
FreeFallVer_MainProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f5bc  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006e0  0800f750  0800f750  0001f750  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe30  0800fe30  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe30  0800fe30  0001fe30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe38  0800fe38  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe38  0800fe38  0001fe38  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe3c  0800fe3c  0001fe3c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800fe40  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          0000039c  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000590  20000590  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   000105ae  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 000026f8  00000000  00000000  000307d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00032ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00033e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bb2  00000000  00000000  00034d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012894  00000000  00000000  000578da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cecad  00000000  00000000  0006a16e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138e1b  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a8c  00000000  00000000  00138e6c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f734 	.word	0x0800f734

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800f734 	.word	0x0800f734

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <GetSector+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x22>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001012:	d302      	bcc.n	800101a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e04b      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <GetSector+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <GetSector+0x38>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <GetSector+0xd0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e040      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <GetSector+0xd4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d806      	bhi.n	8001046 <GetSector+0x4e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <GetSector+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d302      	bcc.n	8001046 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e035      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GetSector+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x64>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GetSector+0xe0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d302      	bcc.n	800105c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001056:	2303      	movs	r3, #3
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e02a      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GetSector+0xe4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0x7a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <GetSector+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800106c:	2304      	movs	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e01f      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GetSector+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d206      	bcs.n	8001088 <GetSector+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <GetSector+0xe4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d902      	bls.n	8001088 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001082:	2305      	movs	r3, #5
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e014      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GetSector+0xec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d206      	bcs.n	800109e <GetSector+0xa6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <GetSector+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d902      	bls.n	800109e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001098:	2306      	movs	r3, #6
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e009      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GetSector+0xf0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d205      	bcs.n	80010b2 <GetSector+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <GetSector+0xec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	08003ffe 	.word	0x08003ffe
 80010c4:	08007ffe 	.word	0x08007ffe
 80010c8:	08004000 	.word	0x08004000
 80010cc:	0800bffe 	.word	0x0800bffe
 80010d0:	08008000 	.word	0x08008000
 80010d4:	0800ffff 	.word	0x0800ffff
 80010d8:	0800c000 	.word	0x0800c000
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff
 80010e8:	0807ffff 	.word	0x0807ffff

080010ec <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f005 feab 	bl	8006e58 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff78 	bl	8000ff8 <GetSector>
 8001108:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001116:	69f8      	ldr	r0, [r7, #28]
 8001118:	f7ff ff6e 	bl	8000ff8 <GetSector>
 800111c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001126:	2202      	movs	r2, #2
 8001128:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Flash_Write_Data+0xb8>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	3301      	adds	r3, #1
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Flash_Write_Data+0xb8>)
 800113a:	60d3      	str	r3, [r2, #12]
	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001144:	f005 fff6 	bl	8007134 <HAL_FLASHEx_Erase>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800114e:	f005 feb5 	bl	8006ebc <HAL_FLASH_GetError>
 8001152:	4603      	mov	r3, r0
 8001154:	e022      	b.n	800119c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	461c      	mov	r4, r3
 8001164:	4615      	mov	r5, r2
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2002      	movs	r0, #2
 800116e:	f005 fe1f 	bl	8006db0 <HAL_FLASH_Program>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3304      	adds	r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e003      	b.n	800118e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001186:	f005 fe99 	bl	8006ebc <HAL_FLASH_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	e006      	b.n	800119c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	429a      	cmp	r2, r3
 8001194:	dbdf      	blt.n	8001156 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001196:	f005 fe81 	bl	8006e9c <HAL_FLASH_Lock>

	   return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	20000210 	.word	0x20000210

080011a8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	80fa      	strh	r2, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d000      	beq.n	80011d6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011d4:	e7ef      	b.n	80011b6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Stop>:
#include "stdbool.h"
#include <math.h>
//#include <FLASH_SECTOR_F4.h>
extern bool POSReach;
void Stop() // Stop motor function
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <Stop+0x1c>)
 80011ee:	f006 fa77 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Disable Servo Enable
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <Stop+0x1c>)
 80011f8:	f006 fa72 	bl	80076e0 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020800 	.word	0x40020800

08001204 <AlarmReset>:

void AlarmReset() // reset alarm function
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_SET);//Pull Estop pin to 1 (24V)
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <AlarmReset+0x44>)
 800120e:	f006 fa67 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_RESET); // trig Alarm Reset Pin
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <AlarmReset+0x44>)
 8001218:	f006 fa62 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f005 fbe4 	bl	80069ec <HAL_Delay>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <AlarmReset+0x44>)
 800122a:	f006 fa59 	bl	80076e0 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 800122e:	2201      	movs	r2, #1
 8001230:	2120      	movs	r1, #32
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <AlarmReset+0x48>)
 8001234:	f006 fa54 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Enable Servo Enable 
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <AlarmReset+0x48>)
 800123e:	f006 fa4f 	bl	80076e0 <HAL_GPIO_WritePin>
		// Turn on the brake
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800

08001250 <Estop>:

void Estop() // Estop function
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);//Pull Estop pin to GND
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Estop+0x14>)
 800125a:	f006 fa41 	bl	80076e0 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <DisableSTOP>:

void DisableSTOP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DisableSTOP+0x14>)
 8001272:	f006 fa35 	bl	80076e0 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800

08001280 <JogMoveUp>:

void JogMoveUp() // Move up by pressing the JOG button on the UI
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_SET); // Choose the direction
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <JogMoveUp+0x20>)
 800128c:	f006 fa28 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <JogMoveUp+0x24>)
 8001296:	f006 fa23 	bl	80076e0 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800

080012a8 <JogMoveDown>:

void JogMoveDown()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // Choose the direction
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <JogMoveDown+0x20>)
 80012b4:	f006 fa14 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <JogMoveDown+0x24>)
 80012be:	f006 fa0f 	bl	80076e0 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800

080012d0 <DriverInit>:
{
	HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // Speed Mode
}

bool DriverInit()
{	
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // CN1-14 - PLSCLR	
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <DriverInit+0x70>)
 80012dc:	f006 fa00 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port,Speed2_Not_PE7_15_Pin,GPIO_PIN_RESET);//CN1-15 SPDLIM/TLIM
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <DriverInit+0x70>)
 80012e6:	f006 f9fb 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CCWLIM_Not_PE12_39_GPIO_Port,CCWLIM_Not_PE12_39_Pin,GPIO_PIN_RESET);//CN1-39 PLSINH
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <DriverInit+0x70>)
 80012f2:	f006 f9f5 	bl	80076e0 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET);// CN-38 - CWLIM
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4810      	ldr	r0, [pc, #64]	; (8001340 <DriverInit+0x70>)
 80012fe:	f006 f9ef 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CWLIM_Not_PE14_13_GPIO_Port,CWLIM_Not_PE14_13_Pin,GPIO_PIN_SET);//CN1-13 CCWLIM
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <DriverInit+0x70>)
 800130a:	f006 f9e9 	bl	80076e0 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);// First, the driver will be in Emergency Stop
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <DriverInit+0x74>)
 8001314:	f006 f9e4 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <DriverInit+0x78>)
 800131e:	f006 f9df 	bl	80076e0 <HAL_GPIO_WritePin>
		
		HAL_GPIO_WritePin(PA12_LINE_DRV_EN_GPIO_Port, PA12_LINE_DRV_EN_Pin, GPIO_PIN_RESET);// Enable U14 DriveLine IC for generating pulses
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <DriverInit+0x7c>)
 800132a:	f006 f9d9 	bl	80076e0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // DIR	
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DriverInit+0x70>)
 8001336:	f006 f9d3 	bl	80076e0 <HAL_GPIO_WritePin>
	
		return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <ReadLogicF7000Out>:
uint16_t ReadLogicF7000Out(void)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint16_t OuputState = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
	uint8_t i=0;
 800135a:	2300      	movs	r3, #0
 800135c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_23_TYPEOUT_GPIO_Port,CN1_23_TYPEOUT_Pin)) // Read CN1-23-TYPEOUT
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	485e      	ldr	r0, [pc, #376]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001362:	f006 f9a5 	bl	80076b0 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <ReadLogicF7000Out+0x30>
	{
		OuputState = OuputState | (1 << i); // Set ith bit		
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	3301      	adds	r3, #1
 8001384:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin)) // Read CN1-48-BRAKE
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4855      	ldr	r0, [pc, #340]	; (80014e0 <ReadLogicF7000Out+0x190>)
 800138a:	f006 f991 	bl	80076b0 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <ReadLogicF7000Out+0x58>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	3301      	adds	r3, #1
 80013ac:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin)) // Read CN1-22-RDY
 80013ae:	2104      	movs	r1, #4
 80013b0:	484b      	ldr	r0, [pc, #300]	; (80014e0 <ReadLogicF7000Out+0x190>)
 80013b2:	f006 f97d 	bl	80076b0 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <ReadLogicF7000Out+0x80>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	3301      	adds	r3, #1
 80013d4:	717b      	strb	r3, [r7, #5]
	POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);	// Check if the position is reached or not
 80013d6:	2102      	movs	r1, #2
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <ReadLogicF7000Out+0x194>)
 80013da:	f006 f969 	bl	80076b0 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013ec:	701a      	strb	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin)) // Read CN1-47
	if(POSReach)
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <ReadLogicF7000Out+0xba>
	{		
		OuputState = OuputState | (1 << i); // Set ith bit
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3301      	adds	r3, #1
 800140e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_21_SPDOUT_TRQOUT_GPIO_Port,CN1_21_SPDOUT_TRQOUT_Pin)) // Read CN1-21
 8001410:	2108      	movs	r1, #8
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <ReadLogicF7000Out+0x190>)
 8001414:	f006 f94c 	bl	80076b0 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <ReadLogicF7000Out+0xe2>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_46_ALARM_GPIO_Port,CN1_46_ALARM_Pin)) // Read CN1-22-
 8001438:	2101      	movs	r1, #1
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800143c:	f006 f938 	bl	80076b0 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <ReadLogicF7000Out+0x10a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	3301      	adds	r3, #1
 800145e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_20_PCWOUT_PTQOUT_GPIO_Port,CN1_20_PCWOUT_PTQOUT_Pin)) // Read CN1-20
 8001460:	2110      	movs	r1, #16
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001464:	f006 f924 	bl	80076b0 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <ReadLogicF7000Out+0x132>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001482:	797b      	ldrb	r3, [r7, #5]
 8001484:	3301      	adds	r3, #1
 8001486:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_45_NCWOUT_NTQOUT_GPIO_Port,CN1_45_NCWOUT_NTQOUT_Pin)) // Read CN1-45
 8001488:	2104      	movs	r1, #4
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800148c:	f006 f910 	bl	80076b0 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <ReadLogicF7000Out+0x15a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	3301      	adds	r3, #1
 80014ae:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_19_ZSPD_GPIO_Port,CN1_19_ZSPD_Pin)) // Read CN1-19-ZSPD
 80014b0:	2108      	movs	r1, #8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <ReadLogicF7000Out+0x19c>)
 80014b4:	f006 f8fc 	bl	80076b0 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <ReadLogicF7000Out+0x182>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	80fb      	strh	r3, [r7, #6]
	}	
	return OuputState;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	20000451 	.word	0x20000451
 80014ec:	40020400 	.word	0x40020400

080014f0 <ExtractMotionCode>:
//	PreError = 0;
//	AccRef = -9.6;
//}

void ExtractMotionCode () // Extract command from the UI
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	memset (MotionCode, '\0', sizeof (MotionCode)); // reset MotionCode
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <ExtractMotionCode+0xa8>)
 80014fc:	f008 fcee 	bl	8009edc <memset>
	memset (DataRegion, '\0', sizeof (DataRegion)); // reset DataRegion
 8001500:	2228      	movs	r2, #40	; 0x28
 8001502:	2100      	movs	r1, #0
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <ExtractMotionCode+0xac>)
 8001506:	f008 fce9 	bl	8009edc <memset>
	uint8_t j = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 800150e:	2300      	movs	r3, #0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	e012      	b.n	800153a <ExtractMotionCode+0x4a>
	{
		if (RxPCBuff[i] != 0) // coppy the command from UI to another array, remove the null character at the beginning
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <ExtractMotionCode+0x44>
		{
			DataRegion[j] = RxPCBuff[i]; // coppy to DataRegion
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	491e      	ldr	r1, [pc, #120]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001526:	5c8a      	ldrb	r2, [r1, r2]
 8001528:	b2d1      	uxtb	r1, r2
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <ExtractMotionCode+0xac>)
 800152c:	54d1      	strb	r1, [r2, r3]
			j++;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	3301      	adds	r3, #1
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	2b27      	cmp	r3, #39	; 0x27
 800153e:	d9e9      	bls.n	8001514 <ExtractMotionCode+0x24>
		}
	}
	j = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
	char *token;
	token = strtok((char *)DataRegion, "/");	// Split the command ~ remove the / character
 8001544:	4917      	ldr	r1, [pc, #92]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <ExtractMotionCode+0xac>)
 8001548:	f00a f9a6 	bl	800b898 <strtok>
 800154c:	6038      	str	r0, [r7, #0]
	while (token != NULL)
 800154e:	e016      	b.n	800157e <ExtractMotionCode+0x8e>
    {
				MotionCode[j] = (atof(token)); // covert to float type
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f008 fc95 	bl	8009e80 <atof>
 8001556:	ec53 2b10 	vmov	r2, r3, d0
 800155a:	79fc      	ldrb	r4, [r7, #7]
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb42 	bl	8000be8 <__aeabi_d2f>
 8001564:	4602      	mov	r2, r0
 8001566:	490c      	ldr	r1, [pc, #48]	; (8001598 <ExtractMotionCode+0xa8>)
 8001568:	00a3      	lsls	r3, r4, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
			  //MotionCode[j] = (atoi(token)); // covert to int type
        token = strtok(NULL, "/");
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001570:	2000      	movs	r0, #0
 8001572:	f00a f991 	bl	800b898 <strtok>
 8001576:	6038      	str	r0, [r7, #0]
				j++;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3301      	adds	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
	while (token != NULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e5      	bne.n	8001550 <ExtractMotionCode+0x60>
    }
	memset (RxPCBuff, '\0', sizeof (RxPCBuff)); // reset
 8001584:	2228      	movs	r2, #40	; 0x28
 8001586:	2100      	movs	r1, #0
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <ExtractMotionCode+0xb0>)
 800158a:	f008 fca7 	bl	8009edc <memset>
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	20000518 	.word	0x20000518
 800159c:	200003e0 	.word	0x200003e0
 80015a0:	20000380 	.word	0x20000380
 80015a4:	0800f750 	.word	0x0800f750

080015a8 <ReadMultiRegister>:
//	}
//}


void ReadMultiRegister(uint16_t StartingAddress, uint8_t NoOfRegister) // Read data from the Driver
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	717b      	strb	r3, [r7, #5]
	// Prepare data frame -- BEGIN
	uint8_t TxDataToDriver[8]; // 8 bytes of data frame

	// Data preparation
	TxDataToDriver[0] = DriverID;//SerialID = 1 of the driver
 80015b8:	2301      	movs	r3, #1
 80015ba:	733b      	strb	r3, [r7, #12]
	TxDataToDriver[1] = 3;//Read Regis, function code
 80015bc:	2303      	movs	r3, #3
 80015be:	737b      	strb	r3, [r7, #13]
	TxDataToDriver[2] = StartingAddress / 256; // Register Address High byte
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	73bb      	strb	r3, [r7, #14]
    TxDataToDriver[3] = StartingAddress % 256; // Register Address LOW byte
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	73fb      	strb	r3, [r7, #15]
	TxDataToDriver[4] = 0; // Number of Register HIGH byte
 80015d0:	2300      	movs	r3, #0
 80015d2:	743b      	strb	r3, [r7, #16]
	TxDataToDriver[5] = NoOfRegister; // Number of Register LOW byte
 80015d4:	797b      	ldrb	r3, [r7, #5]
 80015d6:	747b      	strb	r3, [r7, #17]

	//CRC BEGIN=======
				uint16_t crc = 0xFFFF;
 80015d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015dc:	83fb      	strh	r3, [r7, #30]
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	e027      	b.n	8001634 <ReadMultiRegister+0x8c>
				{	crc ^= (uint16_t)TxDataToDriver[pos];          // XOR byte into least sig. byte of crc
 80015e4:	f107 020c 	add.w	r2, r7, #12
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	4053      	eors	r3, r2
 80015f4:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--)
 80015f6:	2308      	movs	r3, #8
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e015      	b.n	8001628 <ReadMultiRegister+0x80>
					{    // Loop over each bit
						if ((crc & 0x0001) != 0)
 80015fc:	8bfb      	ldrh	r3, [r7, #30]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <ReadMultiRegister+0x74>
						{      // If the LSB is set
							crc >>= 1;                    // Shift right and XOR 0xA001
 8001606:	8bfb      	ldrh	r3, [r7, #30]
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	83fb      	strh	r3, [r7, #30]
							crc ^= 0xA001;
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001612:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001616:	43db      	mvns	r3, r3
 8001618:	83fb      	strh	r3, [r7, #30]
 800161a:	e002      	b.n	8001622 <ReadMultiRegister+0x7a>
						}
						else                            // Else LSB is not set
							crc >>= 1;                    // Just shift right
 800161c:	8bfb      	ldrh	r3, [r7, #30]
 800161e:	085b      	lsrs	r3, r3, #1
 8001620:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3b01      	subs	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1e6      	bne.n	80015fc <ReadMultiRegister+0x54>
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	3301      	adds	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b05      	cmp	r3, #5
 8001638:	ddd4      	ble.n	80015e4 <ReadMultiRegister+0x3c>
					}
				}
	TxDataToDriver[6]= (uint8_t)(crc&0x00FF);;//(uint8_t)(TemDat16&0xFF);
 800163a:	8bfb      	ldrh	r3, [r7, #30]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	74bb      	strb	r3, [r7, #18]
	TxDataToDriver[7]=(uint8_t)((crc>>8)&0x00FF);
 8001640:	8bfb      	ldrh	r3, [r7, #30]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	b29b      	uxth	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	74fb      	strb	r3, [r7, #19]
	//CRC=====END/
	// Prepare data frame -- END
	// Send data use UART5
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
 800164a:	2200      	movs	r2, #0
 800164c:	2101      	movs	r1, #1
 800164e:	480c      	ldr	r0, [pc, #48]	; (8001680 <ReadMultiRegister+0xd8>)
 8001650:	f006 f846 	bl	80076e0 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_UART_Transmit(&huart5,TxDataToDriver,sizeof(TxDataToDriver),200); // use UART5 to send
 8001654:	f107 010c 	add.w	r1, r7, #12
 8001658:	23c8      	movs	r3, #200	; 0xc8
 800165a:	2208      	movs	r2, #8
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <ReadMultiRegister+0xdc>)
 800165e:	f007 fbe8 	bl	8008e32 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
 8001662:	2201      	movs	r2, #1
 8001664:	2101      	movs	r1, #1
 8001666:	4806      	ldr	r0, [pc, #24]	; (8001680 <ReadMultiRegister+0xd8>)
 8001668:	f006 f83a 	bl	80076e0 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
 800166c:	2201      	movs	r2, #1
 800166e:	4906      	ldr	r1, [pc, #24]	; (8001688 <ReadMultiRegister+0xe0>)
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <ReadMultiRegister+0xdc>)
 8001672:	f007 fc70 	bl	8008f56 <HAL_UART_Receive_IT>

	/// For debug only, should be comment out latter
	//uint8_t u8_TxPCBuff[20]="< Read Data";
	//HAL_UART_Transmit(&huart6,u8_TxPCBuff,sizeof(u8_TxPCBuff),1000);
	/// Dubug END
}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	200002b4 	.word	0x200002b4
 8001688:	20000409 	.word	0x20000409

0800168c <LoadSavedParam>:



void LoadSavedParam (uint32_t StartSectorAddress, float *_Param)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b09f      	sub	sp, #124	; 0x7c
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	uint8_t LoadDataBuff[100];

	Flash_Read_Data(StartSectorAddress, (uint32_t *)LoadDataBuff, numofwords);
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <LoadSavedParam+0x74>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fd80 	bl	80011a8 <Flash_Read_Data>

	uint8_t	j = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char *token;
	token = strtok((char *)LoadDataBuff, "/");	// Split the command ~ remove the / character
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4914      	ldr	r1, [pc, #80]	; (8001704 <LoadSavedParam+0x78>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00a f8ef 	bl	800b898 <strtok>
 80016ba:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL)
 80016bc:	e017      	b.n	80016ee <LoadSavedParam+0x62>
    {
				_Param[j] = (atof(token)); // covert to float type
 80016be:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80016c0:	f008 fbde 	bl	8009e80 <atof>
 80016c4:	ec51 0b10 	vmov	r0, r1, d0
 80016c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	18d4      	adds	r4, r2, r3
 80016d2:	f7ff fa89 	bl	8000be8 <__aeabi_d2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, "/");
 80016da:	490a      	ldr	r1, [pc, #40]	; (8001704 <LoadSavedParam+0x78>)
 80016dc:	2000      	movs	r0, #0
 80016de:	f00a f8db 	bl	800b898 <strtok>
 80016e2:	6738      	str	r0, [r7, #112]	; 0x70
				j++;
 80016e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016e8:	3301      	adds	r3, #1
 80016ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (token != NULL)
 80016ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e4      	bne.n	80016be <LoadSavedParam+0x32>
    }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	377c      	adds	r7, #124	; 0x7c
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000000c 	.word	0x2000000c
 8001704:	0800f750 	.word	0x0800f750

08001708 <SaveSystemParams>:

void SaveSystemParams ()
{
 8001708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170c:	b0b9      	sub	sp, #228	; 0xe4
 800170e:	af16      	add	r7, sp, #88	; 0x58
	char SaveBuffer[80];
	TxPCLen = sprintf(SaveBuffer,"%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4f"
 8001710:	4b50      	ldr	r3, [pc, #320]	; (8001854 <SaveSystemParams+0x14c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff17 	bl	8000548 <__aeabi_f2d>
 800171a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800171e:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <SaveSystemParams+0x150>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461e      	mov	r6, r3
 8001724:	4b4d      	ldr	r3, [pc, #308]	; (800185c <SaveSystemParams+0x154>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <SaveSystemParams+0x158>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <SaveSystemParams+0x15c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff07 	bl	8000548 <__aeabi_f2d>
 800173a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <SaveSystemParams+0x160>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800174c:	4b47      	ldr	r3, [pc, #284]	; (800186c <SaveSystemParams+0x164>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fef9 	bl	8000548 <__aeabi_f2d>
 8001756:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <SaveSystemParams+0x168>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fef2 	bl	8000548 <__aeabi_f2d>
 8001764:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001768:	4b42      	ldr	r3, [pc, #264]	; (8001874 <SaveSystemParams+0x16c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe feeb 	bl	8000548 <__aeabi_f2d>
 8001772:	e9c7 0100 	strd	r0, r1, [r7]
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <SaveSystemParams+0x170>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fee4 	bl	8000548 <__aeabi_f2d>
 8001780:	4682      	mov	sl, r0
 8001782:	468b      	mov	fp, r1
 8001784:	4b3d      	ldr	r3, [pc, #244]	; (800187c <SaveSystemParams+0x174>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fedd 	bl	8000548 <__aeabi_f2d>
 800178e:	4680      	mov	r8, r0
 8001790:	4689      	mov	r9, r1
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <SaveSystemParams+0x178>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fed6 	bl	8000548 <__aeabi_f2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	4b38      	ldr	r3, [pc, #224]	; (8001884 <SaveSystemParams+0x17c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fecf 	bl	8000548 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80017b2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80017b6:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 80017ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80017be:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80017c2:	ed97 7b00 	vldr	d7, [r7]
 80017c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80017ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80017ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80017d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80017d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80017da:	ed97 7b06 	vldr	d7, [r7, #24]
 80017de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80017e2:	ed97 7b08 	vldr	d7, [r7, #32]
 80017e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80017ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ec:	9102      	str	r1, [sp, #8]
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	9600      	str	r6, [sp, #0]
 80017f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017f8:	4923      	ldr	r1, [pc, #140]	; (8001888 <SaveSystemParams+0x180>)
 80017fa:	f009 f9f7 	bl	800abec <siprintf>
 80017fe:	4603      	mov	r3, r0
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <SaveSystemParams+0x184>)
 8001804:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
					 FlyAccSlope, DistCoeff, BrakeAccSlope); // Combine to a string
	numofwords = (strlen(SaveBuffer)/4)+((strlen(SaveBuffer)%4)!=0);
 8001806:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fce0 	bl	80001d0 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	b2dc      	uxtb	r4, r3
 8001816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fcd8 	bl	80001d0 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf14      	ite	ne
 800182a:	2301      	movne	r3, #1
 800182c:	2300      	moveq	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	4423      	add	r3, r4
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <SaveSystemParams+0x188>)
 8001836:	701a      	strb	r2, [r3, #0]
	Flash_Write_Data(MemoryAddress , (uint32_t *)SaveBuffer, numofwords);
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <SaveSystemParams+0x188>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b29a      	uxth	r2, r3
 800183e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001842:	4619      	mov	r1, r3
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <SaveSystemParams+0x18c>)
 8001846:	f7ff fc51 	bl	80010ec <Flash_Write_Data>
}
 800184a:	bf00      	nop
 800184c:	378c      	adds	r7, #140	; 0x8c
 800184e:	46bd      	mov	sp, r7
 8001850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001854:	2000046c 	.word	0x2000046c
 8001858:	20000471 	.word	0x20000471
 800185c:	20000472 	.word	0x20000472
 8001860:	20000470 	.word	0x20000470
 8001864:	20000494 	.word	0x20000494
 8001868:	20000478 	.word	0x20000478
 800186c:	2000047c 	.word	0x2000047c
 8001870:	200004b4 	.word	0x200004b4
 8001874:	20000498 	.word	0x20000498
 8001878:	2000049c 	.word	0x2000049c
 800187c:	20000540 	.word	0x20000540
 8001880:	20000538 	.word	0x20000538
 8001884:	2000053c 	.word	0x2000053c
 8001888:	0800f754 	.word	0x0800f754
 800188c:	2000042a 	.word	0x2000042a
 8001890:	2000000c 	.word	0x2000000c
 8001894:	08040000 	.word	0x08040000

08001898 <LinearGeneration>:

void LinearGeneration (float *var, float slope, float Amplitude)
// Amplitude is the limit of the value
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80018a4:	edc7 0a01 	vstr	s1, [r7, #4]

//	float ReturnValue;
//	ReturnValue = (InitialValue + (float)(slope*Time*0.001)); //
	if (slope >= 0)
 80018a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	db0d      	blt.n	80018d2 <LinearGeneration+0x3a>
	{
		if (*var >= Amplitude)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80018c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d811      	bhi.n	80018ee <LinearGeneration+0x56>
			{
				*var = Amplitude;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	601a      	str	r2, [r3, #0]
				return;
 80018d0:	e036      	b.n	8001940 <LinearGeneration+0xa8>
			}
	}
	else
	{
		if (*var <= Amplitude)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80018dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	db03      	blt.n	80018ee <LinearGeneration+0x56>
			{
				*var = Amplitude;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
				return;
 80018ec:	e028      	b.n	8001940 <LinearGeneration+0xa8>
			}
	}
	*var += slope*SampleTime*0.001; // *0.001 to convert to second
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe28 	bl	8000548 <__aeabi_f2d>
 80018f8:	4604      	mov	r4, r0
 80018fa:	460d      	mov	r5, r1
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <LinearGeneration+0xb8>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001908:	edd7 7a02 	vldr	s15, [r7, #8]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	ee17 0a90 	vmov	r0, s15
 8001914:	f7fe fe18 	bl	8000548 <__aeabi_f2d>
 8001918:	a30b      	add	r3, pc, #44	; (adr r3, 8001948 <LinearGeneration+0xb0>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fe6b 	bl	80005f8 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fcaf 	bl	800028c <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f957 	bl	8000be8 <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bdb0      	pop	{r4, r5, r7, pc}
 8001946:	bf00      	nop
 8001948:	d2f1a9fc 	.word	0xd2f1a9fc
 800194c:	3f50624d 	.word	0x3f50624d
 8001950:	20000470 	.word	0x20000470

08001954 <StopPulseGenerating>:


void StopPulseGenerating()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	PulseGenerationFlag = false; //
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <StopPulseGenerating+0x2c>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 800195e:	4809      	ldr	r0, [pc, #36]	; (8001984 <StopPulseGenerating+0x30>)
 8001960:	f006 fc0a 	bl	8008178 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_RESET);//Reset Pin status
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <StopPulseGenerating+0x34>)
 800196c:	f005 feb8 	bl	80076e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port,PC8_PR_Pin, GPIO_PIN_RESET);//Reset Pin status
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <StopPulseGenerating+0x38>)
 8001978:	f005 feb2 	bl	80076e0 <HAL_GPIO_WritePin>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	2000044f 	.word	0x2000044f
 8001984:	2000026c 	.word	0x2000026c
 8001988:	40021000 	.word	0x40021000
 800198c:	40020800 	.word	0x40020800

08001990 <StartPulseGenerating>:
void StartPulseGenerating()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); // Set CW direction
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <StartPulseGenerating+0x2c>)
 800199c:	f005 fea0 	bl	80076e0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <StartPulseGenerating+0x30>)
 80019a8:	f005 fe9a 	bl	80076e0 <HAL_GPIO_WritePin>
	PulseGenerationFlag = true;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <StartPulseGenerating+0x34>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <StartPulseGenerating+0x38>)
 80019b4:	f006 fb70 	bl	8008098 <HAL_TIM_Base_Start_IT>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	2000044f 	.word	0x2000044f
 80019c8:	2000026c 	.word	0x2000026c

080019cc <WaitingMiliSecond>:
bool WaitingMiliSecond(uint16_t TimeInMiliSecond)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
	StoppingTimeCount++;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <WaitingMiliSecond+0x44>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <WaitingMiliSecond+0x44>)
 80019e0:	801a      	strh	r2, [r3, #0]
	if (StoppingTimeCount >= (uint16_t)(TimeInMiliSecond/SampleTime))
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <WaitingMiliSecond+0x48>)
 80019e6:	7812      	ldrb	r2, [r2, #0]
 80019e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <WaitingMiliSecond+0x44>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d804      	bhi.n	8001a00 <WaitingMiliSecond+0x34>
	{
		StoppingTimeCount = 0;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <WaitingMiliSecond+0x44>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	801a      	strh	r2, [r3, #0]
		return true;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <WaitingMiliSecond+0x36>
	}
	return false;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	20000468 	.word	0x20000468
 8001a14:	20000470 	.word	0x20000470

08001a18 <CalculateTimer3Period>:

int CalculateTimer3Period (bool DriverType, float speed)
{
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	ed87 0a00 	vstr	s0, [r7]
 8001a24:	71fb      	strb	r3, [r7, #7]
	// DriverType = true ->  Higen FDA7000 Driver
	// DriverType = false -> ASDA A3 Driver
	// Speed in rpm
	if (DriverType) // Higen FDA7000 Driver
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d037      	beq.n	8001a9c <CalculateTimer3Period+0x84>
	{
		return (int)((float)(120000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001a2c:	edd7 7a00 	vldr	s15, [r7]
 8001a30:	eef0 7ae7 	vabs.f32	s15, s15
 8001a34:	ee17 0a90 	vmov	r0, s15
 8001a38:	f7fe fd86 	bl	8000548 <__aeabi_f2d>
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	460d      	mov	r5, r1
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <CalculateTimer3Period+0x110>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4c:	ee17 0a90 	vmov	r0, s15
 8001a50:	f7fe fd7a 	bl	8000548 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f7fe fdcc 	bl	80005f8 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	a12c      	add	r1, pc, #176	; (adr r1, 8001b18 <CalculateTimer3Period+0x100>)
 8001a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a6a:	f7fe feef 	bl	800084c <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f8b7 	bl	8000be8 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd63 	bl	8000548 <__aeabi_f2d>
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <CalculateTimer3Period+0x114>)
 8001a88:	f7fe fc00 	bl	800028c <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f860 	bl	8000b58 <__aeabi_d2iz>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	e036      	b.n	8001b0a <CalculateTimer3Period+0xf2>
	}
	else
	{
		return (int)((float)(15000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001a9c:	edd7 7a00 	vldr	s15, [r7]
 8001aa0:	eef0 7ae7 	vabs.f32	s15, s15
 8001aa4:	ee17 0a90 	vmov	r0, s15
 8001aa8:	f7fe fd4e 	bl	8000548 <__aeabi_f2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <CalculateTimer3Period+0x110>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001abc:	ee17 0a90 	vmov	r0, s15
 8001ac0:	f7fe fd42 	bl	8000548 <__aeabi_f2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fd94 	bl	80005f8 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	a112      	add	r1, pc, #72	; (adr r1, 8001b20 <CalculateTimer3Period+0x108>)
 8001ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ada:	f7fe feb7 	bl	800084c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f87f 	bl	8000be8 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd2b 	bl	8000548 <__aeabi_f2d>
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <CalculateTimer3Period+0x114>)
 8001af8:	f7fe fbc8 	bl	800028c <__adddf3>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff f828 	bl	8000b58 <__aeabi_d2iz>
 8001b08:	4603      	mov	r3, r0
	}
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	419c9c38 	.word	0x419c9c38
 8001b20:	00000000 	.word	0x00000000
 8001b24:	416c9c38 	.word	0x416c9c38
 8001b28:	2000000a 	.word	0x2000000a
 8001b2c:	3fe00000 	.word	0x3fe00000

08001b30 <CheckGoingToRefPosition>:

bool CheckGoingToRefPosition(bool _direction, int RefPulsePosition) // return true when finish going down, else return false;
// direction = true => go down, false => go up
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
	if (MotorDriver) // FDA7000 Driver, PosCmd based
 8001b3c:	4bad      	ldr	r3, [pc, #692]	; (8001df4 <CheckGoingToRefPosition+0x2c4>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80a9 	beq.w	8001c98 <CheckGoingToRefPosition+0x168>
	{
		//if (abs(RefPulsePosition - EgearRatio*PositionPulseCmd) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/120)) // Start reducing the speed
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/60))
 8001b46:	4bac      	ldr	r3, [pc, #688]	; (8001df8 <CheckGoingToRefPosition+0x2c8>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	1ad2      	subs	r2, r2, r3
 8001b4e:	4bab      	ldr	r3, [pc, #684]	; (8001dfc <CheckGoingToRefPosition+0x2cc>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b58:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b5c:	4ba8      	ldr	r3, [pc, #672]	; (8001e00 <CheckGoingToRefPosition+0x2d0>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4ba8      	ldr	r3, [pc, #672]	; (8001e04 <CheckGoingToRefPosition+0x2d4>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	49a7      	ldr	r1, [pc, #668]	; (8001e08 <CheckGoingToRefPosition+0x2d8>)
 8001b6c:	fb81 0103 	smull	r0, r1, r1, r3
 8001b70:	10c9      	asrs	r1, r1, #3
 8001b72:	17db      	asrs	r3, r3, #31
 8001b74:	1acb      	subs	r3, r1, r3
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dc30      	bgt.n	8001bdc <CheckGoingToRefPosition+0xac>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <CheckGoingToRefPosition+0x72>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20); //-EpsilonPulling means the spd is negative
 8001b80:	4ba2      	ldr	r3, [pc, #648]	; (8001e0c <CheckGoingToRefPosition+0x2dc>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	eef1 7a67 	vneg.f32	s15, s15
 8001b8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b92:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	489d      	ldr	r0, [pc, #628]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001b9c:	f7ff fe7c 	bl	8001898 <LinearGeneration>
 8001ba0:	e00d      	b.n	8001bbe <CheckGoingToRefPosition+0x8e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10,PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20); //-EpsilonPulling means the spd is negative
 8001ba2:	4b9a      	ldr	r3, [pc, #616]	; (8001e0c <CheckGoingToRefPosition+0x2dc>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb0:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	4895      	ldr	r0, [pc, #596]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001bba:	f7ff fe6d 	bl	8001898 <LinearGeneration>
			}
			Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001bbe:	4b8d      	ldr	r3, [pc, #564]	; (8001df4 <CheckGoingToRefPosition+0x2c4>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4a93      	ldr	r2, [pc, #588]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001bc4:	edd2 7a00 	vldr	s15, [r2]
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff23 	bl	8001a18 <CalculateTimer3Period>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	4b8f      	ldr	r3, [pc, #572]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	e044      	b.n	8001c66 <CheckGoingToRefPosition+0x136>
		}
		else // Acclerate going
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d014      	beq.n	8001c0c <CheckGoingToRefPosition+0xdc>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001be2:	4b8a      	ldr	r3, [pc, #552]	; (8001e0c <CheckGoingToRefPosition+0x2dc>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf0:	4b84      	ldr	r3, [pc, #528]	; (8001e04 <CheckGoingToRefPosition+0x2d4>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	ee07 3a10 	vmov	s14, r3
 8001bf8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001bfc:	eef0 0a47 	vmov.f32	s1, s14
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	4882      	ldr	r0, [pc, #520]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001c06:	f7ff fe47 	bl	8001898 <LinearGeneration>
 8001c0a:	e016      	b.n	8001c3a <CheckGoingToRefPosition+0x10a>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed); //-EpsilonPulling means the spd is negative
 8001c0c:	4b7f      	ldr	r3, [pc, #508]	; (8001e0c <CheckGoingToRefPosition+0x2dc>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	eef1 7a67 	vneg.f32	s15, s15
 8001c16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1e:	4b79      	ldr	r3, [pc, #484]	; (8001e04 <CheckGoingToRefPosition+0x2d4>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	425b      	negs	r3, r3
 8001c24:	ee07 3a10 	vmov	s14, r3
 8001c28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c2c:	eef0 0a47 	vmov.f32	s1, s14
 8001c30:	eeb0 0a67 	vmov.f32	s0, s15
 8001c34:	4876      	ldr	r0, [pc, #472]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001c36:	f7ff fe2f 	bl	8001898 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001c3a:	4b75      	ldr	r3, [pc, #468]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	d00d      	beq.n	8001c66 <CheckGoingToRefPosition+0x136>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001c4a:	4b6a      	ldr	r3, [pc, #424]	; (8001df4 <CheckGoingToRefPosition+0x2c4>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4a70      	ldr	r2, [pc, #448]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001c50:	edd2 7a00 	vldr	s15, [r2]
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fedd 	bl	8001a18 <CalculateTimer3Period>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b6c      	ldr	r3, [pc, #432]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001c64:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
			}
			//PrePullingSpeed = SpeedCmd;
		}
		if ( abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 1000) // Reach the ref position
 8001c66:	4b64      	ldr	r3, [pc, #400]	; (8001df8 <CheckGoingToRefPosition+0x2c8>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	1ad2      	subs	r2, r2, r3
 8001c6e:	4b63      	ldr	r3, [pc, #396]	; (8001dfc <CheckGoingToRefPosition+0x2cc>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	2b00      	cmp	r3, #0
 8001c76:	bfb8      	it	lt
 8001c78:	425b      	neglt	r3, r3
 8001c7a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c7e:	f300 80b3 	bgt.w	8001de8 <CheckGoingToRefPosition+0x2b8>
		{
//			RunningTime = 0;
//			RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001c82:	4b64      	ldr	r3, [pc, #400]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001c84:	2200      	movs	r2, #0
 8001c86:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001c88:	4b61      	ldr	r3, [pc, #388]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001c8a:	f04f 0200 	mov.w	r2, #0
 8001c8e:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();
 8001c90:	f7ff fe60 	bl	8001954 <StopPulseGenerating>
			return true;
 8001c94:	2301      	movs	r3, #1
 8001c96:	e0a8      	b.n	8001dea <CheckGoingToRefPosition+0x2ba>
		}
	}
	else // ASDA A3, Actual Encoder based
	{
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/90)) // Start reducing the speed
 8001c98:	4b57      	ldr	r3, [pc, #348]	; (8001df8 <CheckGoingToRefPosition+0x2c8>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	683a      	ldr	r2, [r7, #0]
 8001c9e:	1ad2      	subs	r2, r2, r3
 8001ca0:	4b56      	ldr	r3, [pc, #344]	; (8001dfc <CheckGoingToRefPosition+0x2cc>)
 8001ca2:	681b      	ldr	r3, [r3, #0]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001caa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001cae:	4b54      	ldr	r3, [pc, #336]	; (8001e00 <CheckGoingToRefPosition+0x2d0>)
 8001cb0:	881b      	ldrh	r3, [r3, #0]
 8001cb2:	4619      	mov	r1, r3
 8001cb4:	4b53      	ldr	r3, [pc, #332]	; (8001e04 <CheckGoingToRefPosition+0x2d4>)
 8001cb6:	781b      	ldrb	r3, [r3, #0]
 8001cb8:	fb01 f303 	mul.w	r3, r1, r3
 8001cbc:	4956      	ldr	r1, [pc, #344]	; (8001e18 <CheckGoingToRefPosition+0x2e8>)
 8001cbe:	fb81 0103 	smull	r0, r1, r1, r3
 8001cc2:	4419      	add	r1, r3
 8001cc4:	1109      	asrs	r1, r1, #4
 8001cc6:	17db      	asrs	r3, r3, #31
 8001cc8:	1acb      	subs	r3, r1, r3
 8001cca:	429a      	cmp	r2, r3
 8001ccc:	dc30      	bgt.n	8001d30 <CheckGoingToRefPosition+0x200>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001cce:	79fb      	ldrb	r3, [r7, #7]
 8001cd0:	2b00      	cmp	r3, #0
 8001cd2:	d010      	beq.n	8001cf6 <CheckGoingToRefPosition+0x1c6>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20);
 8001cd4:	4b4d      	ldr	r3, [pc, #308]	; (8001e0c <CheckGoingToRefPosition+0x2dc>)
 8001cd6:	edd3 7a00 	vldr	s15, [r3]
 8001cda:	eef1 7a67 	vneg.f32	s15, s15
 8001cde:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ce2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ce6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001cea:	eeb0 0a67 	vmov.f32	s0, s15
 8001cee:	4848      	ldr	r0, [pc, #288]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001cf0:	f7ff fdd2 	bl	8001898 <LinearGeneration>
 8001cf4:	e00d      	b.n	8001d12 <CheckGoingToRefPosition+0x1e2>
				//SpeedCmd = LinearGeneration(RunningTime2,-GoingAcceleration*10,PrePullingSpeed,20,PullingSpeed); //-EpsilonPulling means the spd is negative
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20);
 8001cf6:	4b45      	ldr	r3, [pc, #276]	; (8001e0c <CheckGoingToRefPosition+0x2dc>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d00:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d04:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001d08:	eeb0 0a67 	vmov.f32	s0, s15
 8001d0c:	4840      	ldr	r0, [pc, #256]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001d0e:	f7ff fdc3 	bl	8001898 <LinearGeneration>
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10, PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
			}
			Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001d12:	4b38      	ldr	r3, [pc, #224]	; (8001df4 <CheckGoingToRefPosition+0x2c4>)
 8001d14:	781b      	ldrb	r3, [r3, #0]
 8001d16:	4a3e      	ldr	r2, [pc, #248]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001d18:	edd2 7a00 	vldr	s15, [r2]
 8001d1c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d20:	4618      	mov	r0, r3
 8001d22:	f7ff fe79 	bl	8001a18 <CalculateTimer3Period>
 8001d26:	4603      	mov	r3, r0
 8001d28:	b29a      	uxth	r2, r3
 8001d2a:	4b3a      	ldr	r3, [pc, #232]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001d2c:	801a      	strh	r2, [r3, #0]
 8001d2e:	e044      	b.n	8001dba <CheckGoingToRefPosition+0x28a>

		else
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001d30:	79fb      	ldrb	r3, [r7, #7]
 8001d32:	2b00      	cmp	r3, #0
 8001d34:	d014      	beq.n	8001d60 <CheckGoingToRefPosition+0x230>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001d36:	4b35      	ldr	r3, [pc, #212]	; (8001e0c <CheckGoingToRefPosition+0x2dc>)
 8001d38:	edd3 7a00 	vldr	s15, [r3]
 8001d3c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d40:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d44:	4b2f      	ldr	r3, [pc, #188]	; (8001e04 <CheckGoingToRefPosition+0x2d4>)
 8001d46:	781b      	ldrb	r3, [r3, #0]
 8001d48:	ee07 3a10 	vmov	s14, r3
 8001d4c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001d50:	eef0 0a47 	vmov.f32	s1, s14
 8001d54:	eeb0 0a67 	vmov.f32	s0, s15
 8001d58:	482d      	ldr	r0, [pc, #180]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001d5a:	f7ff fd9d 	bl	8001898 <LinearGeneration>
 8001d5e:	e016      	b.n	8001d8e <CheckGoingToRefPosition+0x25e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration*10,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed);
 8001d60:	4b2a      	ldr	r3, [pc, #168]	; (8001e0c <CheckGoingToRefPosition+0x2dc>)
 8001d62:	edd3 7a00 	vldr	s15, [r3]
 8001d66:	eef1 7a67 	vneg.f32	s15, s15
 8001d6a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d6e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d72:	4b24      	ldr	r3, [pc, #144]	; (8001e04 <CheckGoingToRefPosition+0x2d4>)
 8001d74:	781b      	ldrb	r3, [r3, #0]
 8001d76:	425b      	negs	r3, r3
 8001d78:	ee07 3a10 	vmov	s14, r3
 8001d7c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d80:	eef0 0a47 	vmov.f32	s1, s14
 8001d84:	eeb0 0a67 	vmov.f32	s0, s15
 8001d88:	4821      	ldr	r0, [pc, #132]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001d8a:	f7ff fd85 	bl	8001898 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001d8e:	4b20      	ldr	r3, [pc, #128]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001d90:	edd3 7a00 	vldr	s15, [r3]
 8001d94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9c:	d00d      	beq.n	8001dba <CheckGoingToRefPosition+0x28a>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001d9e:	4b15      	ldr	r3, [pc, #84]	; (8001df4 <CheckGoingToRefPosition+0x2c4>)
 8001da0:	781b      	ldrb	r3, [r3, #0]
 8001da2:	4a1b      	ldr	r2, [pc, #108]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001da4:	edd2 7a00 	vldr	s15, [r2]
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	4618      	mov	r0, r3
 8001dae:	f7ff fe33 	bl	8001a18 <CalculateTimer3Period>
 8001db2:	4603      	mov	r3, r0
 8001db4:	b29a      	uxth	r2, r3
 8001db6:	4b17      	ldr	r3, [pc, #92]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001db8:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
			}
			//PrePullingSpeed = SpeedCmd;
		}

		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 100) // Reach the bottom position
 8001dba:	4b0f      	ldr	r3, [pc, #60]	; (8001df8 <CheckGoingToRefPosition+0x2c8>)
 8001dbc:	681b      	ldr	r3, [r3, #0]
 8001dbe:	683a      	ldr	r2, [r7, #0]
 8001dc0:	1ad2      	subs	r2, r2, r3
 8001dc2:	4b0e      	ldr	r3, [pc, #56]	; (8001dfc <CheckGoingToRefPosition+0x2cc>)
 8001dc4:	681b      	ldr	r3, [r3, #0]
 8001dc6:	4413      	add	r3, r2
 8001dc8:	2b00      	cmp	r3, #0
 8001dca:	bfb8      	it	lt
 8001dcc:	425b      	neglt	r3, r3
 8001dce:	2b64      	cmp	r3, #100	; 0x64
 8001dd0:	dc0a      	bgt.n	8001de8 <CheckGoingToRefPosition+0x2b8>
		{
			//RunningTime = 0;
			//RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001dd2:	4b10      	ldr	r3, [pc, #64]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001dd4:	2200      	movs	r2, #0
 8001dd6:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001dd8:	4b0d      	ldr	r3, [pc, #52]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001dda:	f04f 0200 	mov.w	r2, #0
 8001dde:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();
 8001de0:	f7ff fdb8 	bl	8001954 <StopPulseGenerating>
			return true;
 8001de4:	2301      	movs	r3, #1
 8001de6:	e000      	b.n	8001dea <CheckGoingToRefPosition+0x2ba>
		}
	}
	return false;
 8001de8:	2300      	movs	r3, #0
}
 8001dea:	4618      	mov	r0, r3
 8001dec:	3708      	adds	r7, #8
 8001dee:	46bd      	mov	sp, r7
 8001df0:	bd80      	pop	{r7, pc}
 8001df2:	bf00      	nop
 8001df4:	20000003 	.word	0x20000003
 8001df8:	20000510 	.word	0x20000510
 8001dfc:	200004c8 	.word	0x200004c8
 8001e00:	2000000a 	.word	0x2000000a
 8001e04:	20000471 	.word	0x20000471
 8001e08:	66666667 	.word	0x66666667
 8001e0c:	20000474 	.word	0x20000474
 8001e10:	20000514 	.word	0x20000514
 8001e14:	20000464 	.word	0x20000464
 8001e18:	88888889 	.word	0x88888889

08001e1c <InitGoingToStartingPosition>:

void InitGoingToStartingPosition ()
{
 8001e1c:	b580      	push	{r7, lr}
 8001e1e:	af00      	add	r7, sp, #0
	if (MotorDriver) // HIGEN FDA7000
 8001e20:	4b48      	ldr	r3, [pc, #288]	; (8001f44 <InitGoingToStartingPosition+0x128>)
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	2b00      	cmp	r3, #0
 8001e26:	d045      	beq.n	8001eb4 <InitGoingToStartingPosition+0x98>
	{
		//if (PositionPulseCmd*EgearRatio < PullingBotomPulseCmdPosition) // Then going down to the bottom
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition)
 8001e28:	4b47      	ldr	r3, [pc, #284]	; (8001f48 <InitGoingToStartingPosition+0x12c>)
 8001e2a:	681a      	ldr	r2, [r3, #0]
 8001e2c:	4b47      	ldr	r3, [pc, #284]	; (8001f4c <InitGoingToStartingPosition+0x130>)
 8001e2e:	681b      	ldr	r3, [r3, #0]
 8001e30:	1ad2      	subs	r2, r2, r3
 8001e32:	4b47      	ldr	r3, [pc, #284]	; (8001f50 <InitGoingToStartingPosition+0x134>)
 8001e34:	681b      	ldr	r3, [r3, #0]
 8001e36:	429a      	cmp	r2, r3
 8001e38:	da0c      	bge.n	8001e54 <InitGoingToStartingPosition+0x38>
		{
			StartAccleratePulling = false;
 8001e3a:	4b46      	ldr	r3, [pc, #280]	; (8001f54 <InitGoingToStartingPosition+0x138>)
 8001e3c:	2200      	movs	r2, #0
 8001e3e:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001e40:	4b45      	ldr	r3, [pc, #276]	; (8001f58 <InitGoingToStartingPosition+0x13c>)
 8001e42:	2201      	movs	r2, #1
 8001e44:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = false; // false = Dropping Down
 8001e46:	4b45      	ldr	r3, [pc, #276]	; (8001f5c <InitGoingToStartingPosition+0x140>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001e4c:	f7ff fa0c 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			StartPulseGenerating();
 8001e50:	f7ff fd9e 	bl	8001990 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001e54:	4b3c      	ldr	r3, [pc, #240]	; (8001f48 <InitGoingToStartingPosition+0x12c>)
 8001e56:	681a      	ldr	r2, [r3, #0]
 8001e58:	4b3c      	ldr	r3, [pc, #240]	; (8001f4c <InitGoingToStartingPosition+0x130>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	1ad2      	subs	r2, r2, r3
 8001e5e:	4b3c      	ldr	r3, [pc, #240]	; (8001f50 <InitGoingToStartingPosition+0x134>)
 8001e60:	681b      	ldr	r3, [r3, #0]
 8001e62:	429a      	cmp	r2, r3
 8001e64:	dd0c      	ble.n	8001e80 <InitGoingToStartingPosition+0x64>
		{
			StartAccleratePulling = false;
 8001e66:	4b3b      	ldr	r3, [pc, #236]	; (8001f54 <InitGoingToStartingPosition+0x138>)
 8001e68:	2200      	movs	r2, #0
 8001e6a:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8001e6c:	4b3a      	ldr	r3, [pc, #232]	; (8001f58 <InitGoingToStartingPosition+0x13c>)
 8001e6e:	2200      	movs	r2, #0
 8001e70:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8001e72:	4b3a      	ldr	r3, [pc, #232]	; (8001f5c <InitGoingToStartingPosition+0x140>)
 8001e74:	2201      	movs	r2, #1
 8001e76:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001e78:	f7ff f9f6 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			StartPulseGenerating();
 8001e7c:	f7ff fd88 	bl	8001990 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8001e80:	4b31      	ldr	r3, [pc, #196]	; (8001f48 <InitGoingToStartingPosition+0x12c>)
 8001e82:	681a      	ldr	r2, [r3, #0]
 8001e84:	4b31      	ldr	r3, [pc, #196]	; (8001f4c <InitGoingToStartingPosition+0x130>)
 8001e86:	681b      	ldr	r3, [r3, #0]
 8001e88:	1ad2      	subs	r2, r2, r3
 8001e8a:	4b31      	ldr	r3, [pc, #196]	; (8001f50 <InitGoingToStartingPosition+0x134>)
 8001e8c:	681b      	ldr	r3, [r3, #0]
 8001e8e:	429a      	cmp	r2, r3
 8001e90:	d155      	bne.n	8001f3e <InitGoingToStartingPosition+0x122>
		{
			StartAccleratePulling = true;
 8001e92:	4b30      	ldr	r3, [pc, #192]	; (8001f54 <InitGoingToStartingPosition+0x138>)
 8001e94:	2201      	movs	r2, #1
 8001e96:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage
 8001e98:	4b31      	ldr	r3, [pc, #196]	; (8001f60 <InitGoingToStartingPosition+0x144>)
 8001e9a:	2200      	movs	r2, #0
 8001e9c:	701a      	strb	r2, [r3, #0]
			Direction = false;
 8001e9e:	4b2e      	ldr	r3, [pc, #184]	; (8001f58 <InitGoingToStartingPosition+0x13c>)
 8001ea0:	2200      	movs	r2, #0
 8001ea2:	701a      	strb	r2, [r3, #0]

			PRIsToggled = true; // true = pulling up.
 8001ea4:	4b2d      	ldr	r3, [pc, #180]	; (8001f5c <InitGoingToStartingPosition+0x140>)
 8001ea6:	2201      	movs	r2, #1
 8001ea8:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001eaa:	f7ff f9dd 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001eae:	f7ff fd6f 	bl	8001990 <StartPulseGenerating>
			PRIsToggled = true; // true = pulling up.
			DisableSTOP(); // Disable the stop
			StartPulseGenerating();
		}
	}
}
 8001eb2:	e044      	b.n	8001f3e <InitGoingToStartingPosition+0x122>
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition) // Then going down to the bottom
 8001eb4:	4b24      	ldr	r3, [pc, #144]	; (8001f48 <InitGoingToStartingPosition+0x12c>)
 8001eb6:	681a      	ldr	r2, [r3, #0]
 8001eb8:	4b24      	ldr	r3, [pc, #144]	; (8001f4c <InitGoingToStartingPosition+0x130>)
 8001eba:	681b      	ldr	r3, [r3, #0]
 8001ebc:	1ad2      	subs	r2, r2, r3
 8001ebe:	4b24      	ldr	r3, [pc, #144]	; (8001f50 <InitGoingToStartingPosition+0x134>)
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	429a      	cmp	r2, r3
 8001ec4:	da0c      	bge.n	8001ee0 <InitGoingToStartingPosition+0xc4>
			StartAccleratePulling = false;
 8001ec6:	4b23      	ldr	r3, [pc, #140]	; (8001f54 <InitGoingToStartingPosition+0x138>)
 8001ec8:	2200      	movs	r2, #0
 8001eca:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001ecc:	4b22      	ldr	r3, [pc, #136]	; (8001f58 <InitGoingToStartingPosition+0x13c>)
 8001ece:	2201      	movs	r2, #1
 8001ed0:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down
 8001ed2:	4b22      	ldr	r3, [pc, #136]	; (8001f5c <InitGoingToStartingPosition+0x140>)
 8001ed4:	2200      	movs	r2, #0
 8001ed6:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001ed8:	f7ff f9c6 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001edc:	f7ff fd58 	bl	8001990 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <InitGoingToStartingPosition+0x12c>)
 8001ee2:	681a      	ldr	r2, [r3, #0]
 8001ee4:	4b19      	ldr	r3, [pc, #100]	; (8001f4c <InitGoingToStartingPosition+0x130>)
 8001ee6:	681b      	ldr	r3, [r3, #0]
 8001ee8:	1ad2      	subs	r2, r2, r3
 8001eea:	4b19      	ldr	r3, [pc, #100]	; (8001f50 <InitGoingToStartingPosition+0x134>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	429a      	cmp	r2, r3
 8001ef0:	dd0c      	ble.n	8001f0c <InitGoingToStartingPosition+0xf0>
			StartAccleratePulling = false;
 8001ef2:	4b18      	ldr	r3, [pc, #96]	; (8001f54 <InitGoingToStartingPosition+0x138>)
 8001ef4:	2200      	movs	r2, #0
 8001ef6:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8001ef8:	4b17      	ldr	r3, [pc, #92]	; (8001f58 <InitGoingToStartingPosition+0x13c>)
 8001efa:	2200      	movs	r2, #0
 8001efc:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8001efe:	4b17      	ldr	r3, [pc, #92]	; (8001f5c <InitGoingToStartingPosition+0x140>)
 8001f00:	2201      	movs	r2, #1
 8001f02:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001f04:	f7ff f9b0 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001f08:	f7ff fd42 	bl	8001990 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8001f0c:	4b0e      	ldr	r3, [pc, #56]	; (8001f48 <InitGoingToStartingPosition+0x12c>)
 8001f0e:	681a      	ldr	r2, [r3, #0]
 8001f10:	4b0e      	ldr	r3, [pc, #56]	; (8001f4c <InitGoingToStartingPosition+0x130>)
 8001f12:	681b      	ldr	r3, [r3, #0]
 8001f14:	1ad2      	subs	r2, r2, r3
 8001f16:	4b0e      	ldr	r3, [pc, #56]	; (8001f50 <InitGoingToStartingPosition+0x134>)
 8001f18:	681b      	ldr	r3, [r3, #0]
 8001f1a:	429a      	cmp	r2, r3
 8001f1c:	d10f      	bne.n	8001f3e <InitGoingToStartingPosition+0x122>
			StartAccleratePulling = true;
 8001f1e:	4b0d      	ldr	r3, [pc, #52]	; (8001f54 <InitGoingToStartingPosition+0x138>)
 8001f20:	2201      	movs	r2, #1
 8001f22:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage
 8001f24:	4b0e      	ldr	r3, [pc, #56]	; (8001f60 <InitGoingToStartingPosition+0x144>)
 8001f26:	2200      	movs	r2, #0
 8001f28:	701a      	strb	r2, [r3, #0]
			Direction = false;
 8001f2a:	4b0b      	ldr	r3, [pc, #44]	; (8001f58 <InitGoingToStartingPosition+0x13c>)
 8001f2c:	2200      	movs	r2, #0
 8001f2e:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 8001f30:	4b0a      	ldr	r3, [pc, #40]	; (8001f5c <InitGoingToStartingPosition+0x140>)
 8001f32:	2201      	movs	r2, #1
 8001f34:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001f36:	f7ff f997 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001f3a:	f7ff fd29 	bl	8001990 <StartPulseGenerating>
}
 8001f3e:	bf00      	nop
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	20000003 	.word	0x20000003
 8001f48:	20000510 	.word	0x20000510
 8001f4c:	200004c8 	.word	0x200004c8
 8001f50:	200004bc 	.word	0x200004bc
 8001f54:	20000454 	.word	0x20000454
 8001f58:	20000448 	.word	0x20000448
 8001f5c:	2000045a 	.word	0x2000045a
 8001f60:	2000044e 	.word	0x2000044e

08001f64 <InitializeSimulating>:
void InitializeSimulating (uint8_t Mode)
{
 8001f64:	b580      	push	{r7, lr}
 8001f66:	b082      	sub	sp, #8
 8001f68:	af00      	add	r7, sp, #0
 8001f6a:	4603      	mov	r3, r0
 8001f6c:	71fb      	strb	r3, [r7, #7]
	switch (Mode)
 8001f6e:	79fb      	ldrb	r3, [r7, #7]
 8001f70:	2b03      	cmp	r3, #3
 8001f72:	d032      	beq.n	8001fda <InitializeSimulating+0x76>
 8001f74:	2b03      	cmp	r3, #3
 8001f76:	dc40      	bgt.n	8001ffa <InitializeSimulating+0x96>
 8001f78:	2b01      	cmp	r3, #1
 8001f7a:	d002      	beq.n	8001f82 <InitializeSimulating+0x1e>
 8001f7c:	2b02      	cmp	r3, #2
 8001f7e:	d01d      	beq.n	8001fbc <InitializeSimulating+0x58>
			StartPulling = true; // Pulling Stage First
			StartDropping = false;
			StartPulseCmdCounting = false;
			break;
		default:
			break;
 8001f80:	e03b      	b.n	8001ffa <InitializeSimulating+0x96>
			StartSimulating = true;
 8001f82:	4b20      	ldr	r3, [pc, #128]	; (8002004 <InitializeSimulating+0xa0>)
 8001f84:	2201      	movs	r2, #1
 8001f86:	701a      	strb	r2, [r3, #0]
			StartDropping = true;
 8001f88:	4b1f      	ldr	r3, [pc, #124]	; (8002008 <InitializeSimulating+0xa4>)
 8001f8a:	2201      	movs	r2, #1
 8001f8c:	701a      	strb	r2, [r3, #0]
			StartBraking = false;
 8001f8e:	4b1f      	ldr	r3, [pc, #124]	; (800200c <InitializeSimulating+0xa8>)
 8001f90:	2200      	movs	r2, #0
 8001f92:	701a      	strb	r2, [r3, #0]
			Direction = true; // variable to show the direction, false = move up, true = move down
 8001f94:	4b1e      	ldr	r3, [pc, #120]	; (8002010 <InitializeSimulating+0xac>)
 8001f96:	2201      	movs	r2, #1
 8001f98:	701a      	strb	r2, [r3, #0]
			StartPulling = false;
 8001f9a:	4b1e      	ldr	r3, [pc, #120]	; (8002014 <InitializeSimulating+0xb0>)
 8001f9c:	2200      	movs	r2, #0
 8001f9e:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8001fa0:	4b1d      	ldr	r3, [pc, #116]	; (8002018 <InitializeSimulating+0xb4>)
 8001fa2:	2200      	movs	r2, #0
 8001fa4:	701a      	strb	r2, [r3, #0]
			StartPulseCmdCounting = false;
 8001fa6:	4b1d      	ldr	r3, [pc, #116]	; (800201c <InitializeSimulating+0xb8>)
 8001fa8:	2200      	movs	r2, #0
 8001faa:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8001fac:	4b1c      	ldr	r3, [pc, #112]	; (8002020 <InitializeSimulating+0xbc>)
 8001fae:	2200      	movs	r2, #0
 8001fb0:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001fb2:	f7ff f959 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001fb6:	f7ff fceb 	bl	8001990 <StartPulseGenerating>
			break;
 8001fba:	e01f      	b.n	8001ffc <InitializeSimulating+0x98>
			StartSimulating = true;
 8001fbc:	4b11      	ldr	r3, [pc, #68]	; (8002004 <InitializeSimulating+0xa0>)
 8001fbe:	2201      	movs	r2, #1
 8001fc0:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 8001fc2:	4b11      	ldr	r3, [pc, #68]	; (8002008 <InitializeSimulating+0xa4>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8001fc8:	4b13      	ldr	r3, [pc, #76]	; (8002018 <InitializeSimulating+0xb4>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
			PositionPulseCmd = 0;
 8001fce:	4b15      	ldr	r3, [pc, #84]	; (8002024 <InitializeSimulating+0xc0>)
 8001fd0:	2200      	movs	r2, #0
 8001fd2:	601a      	str	r2, [r3, #0]
			InitGoingToStartingPosition ();
 8001fd4:	f7ff ff22 	bl	8001e1c <InitGoingToStartingPosition>
			break;
 8001fd8:	e010      	b.n	8001ffc <InitializeSimulating+0x98>
			StartSimulating = true;
 8001fda:	4b0a      	ldr	r3, [pc, #40]	; (8002004 <InitializeSimulating+0xa0>)
 8001fdc:	2201      	movs	r2, #1
 8001fde:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8001fe0:	4b0d      	ldr	r3, [pc, #52]	; (8002018 <InitializeSimulating+0xb4>)
 8001fe2:	2200      	movs	r2, #0
 8001fe4:	701a      	strb	r2, [r3, #0]
			StartPulling = true; // Pulling Stage First
 8001fe6:	4b0b      	ldr	r3, [pc, #44]	; (8002014 <InitializeSimulating+0xb0>)
 8001fe8:	2201      	movs	r2, #1
 8001fea:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 8001fec:	4b06      	ldr	r3, [pc, #24]	; (8002008 <InitializeSimulating+0xa4>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	701a      	strb	r2, [r3, #0]
			StartPulseCmdCounting = false;
 8001ff2:	4b0a      	ldr	r3, [pc, #40]	; (800201c <InitializeSimulating+0xb8>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	701a      	strb	r2, [r3, #0]
			break;
 8001ff8:	e000      	b.n	8001ffc <InitializeSimulating+0x98>
			break;
 8001ffa:	bf00      	nop
	}
}
 8001ffc:	bf00      	nop
 8001ffe:	3708      	adds	r7, #8
 8002000:	46bd      	mov	sp, r7
 8002002:	bd80      	pop	{r7, pc}
 8002004:	20000447 	.word	0x20000447
 8002008:	20000445 	.word	0x20000445
 800200c:	2000044e 	.word	0x2000044e
 8002010:	20000448 	.word	0x20000448
 8002014:	2000044d 	.word	0x2000044d
 8002018:	20000455 	.word	0x20000455
 800201c:	2000044b 	.word	0x2000044b
 8002020:	2000045a 	.word	0x2000045a
 8002024:	200004d0 	.word	0x200004d0

08002028 <InitializeRunning>:
// Init variable for running
void InitializeRunning (uint8_t Mode)
{
 8002028:	b580      	push	{r7, lr}
 800202a:	b082      	sub	sp, #8
 800202c:	af00      	add	r7, sp, #0
 800202e:	4603      	mov	r3, r0
 8002030:	71fb      	strb	r3, [r7, #7]
	switch (Mode)
 8002032:	79fb      	ldrb	r3, [r7, #7]
 8002034:	2b03      	cmp	r3, #3
 8002036:	d032      	beq.n	800209e <InitializeRunning+0x76>
 8002038:	2b03      	cmp	r3, #3
 800203a:	dc42      	bgt.n	80020c2 <InitializeRunning+0x9a>
 800203c:	2b01      	cmp	r3, #1
 800203e:	d002      	beq.n	8002046 <InitializeRunning+0x1e>
 8002040:	2b02      	cmp	r3, #2
 8002042:	d01d      	beq.n	8002080 <InitializeRunning+0x58>
			StartDropping = false;
			StartPulseCmdCounting = false;
			InitGoingToStartingPosition ();
			break;
		default:
			break;
 8002044:	e03d      	b.n	80020c2 <InitializeRunning+0x9a>
			StartRunning = true;
 8002046:	4b21      	ldr	r3, [pc, #132]	; (80020cc <InitializeRunning+0xa4>)
 8002048:	2201      	movs	r2, #1
 800204a:	701a      	strb	r2, [r3, #0]
			StartDropping = true;
 800204c:	4b20      	ldr	r3, [pc, #128]	; (80020d0 <InitializeRunning+0xa8>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
			StartBraking = false;
 8002052:	4b20      	ldr	r3, [pc, #128]	; (80020d4 <InitializeRunning+0xac>)
 8002054:	2200      	movs	r2, #0
 8002056:	701a      	strb	r2, [r3, #0]
			Direction = true; // variable to show the direction, false = move up, true = move down
 8002058:	4b1f      	ldr	r3, [pc, #124]	; (80020d8 <InitializeRunning+0xb0>)
 800205a:	2201      	movs	r2, #1
 800205c:	701a      	strb	r2, [r3, #0]
			StartPulling = false;
 800205e:	4b1f      	ldr	r3, [pc, #124]	; (80020dc <InitializeRunning+0xb4>)
 8002060:	2200      	movs	r2, #0
 8002062:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8002064:	4b1e      	ldr	r3, [pc, #120]	; (80020e0 <InitializeRunning+0xb8>)
 8002066:	2200      	movs	r2, #0
 8002068:	701a      	strb	r2, [r3, #0]
			StartPulseCmdCounting = false;
 800206a:	4b1e      	ldr	r3, [pc, #120]	; (80020e4 <InitializeRunning+0xbc>)
 800206c:	2200      	movs	r2, #0
 800206e:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002070:	4b1d      	ldr	r3, [pc, #116]	; (80020e8 <InitializeRunning+0xc0>)
 8002072:	2200      	movs	r2, #0
 8002074:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002076:	f7ff f8f7 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 800207a:	f7ff fc89 	bl	8001990 <StartPulseGenerating>
			break;
 800207e:	e021      	b.n	80020c4 <InitializeRunning+0x9c>
			StartRunning = true;
 8002080:	4b12      	ldr	r3, [pc, #72]	; (80020cc <InitializeRunning+0xa4>)
 8002082:	2201      	movs	r2, #1
 8002084:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 8002086:	4b12      	ldr	r3, [pc, #72]	; (80020d0 <InitializeRunning+0xa8>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 800208c:	4b14      	ldr	r3, [pc, #80]	; (80020e0 <InitializeRunning+0xb8>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
			PositionPulseCmd = 0;
 8002092:	4b16      	ldr	r3, [pc, #88]	; (80020ec <InitializeRunning+0xc4>)
 8002094:	2200      	movs	r2, #0
 8002096:	601a      	str	r2, [r3, #0]
			InitGoingToStartingPosition ();
 8002098:	f7ff fec0 	bl	8001e1c <InitGoingToStartingPosition>
			break;
 800209c:	e012      	b.n	80020c4 <InitializeRunning+0x9c>
			StartRunning = true;
 800209e:	4b0b      	ldr	r3, [pc, #44]	; (80020cc <InitializeRunning+0xa4>)
 80020a0:	2201      	movs	r2, #1
 80020a2:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 80020a4:	4b0e      	ldr	r3, [pc, #56]	; (80020e0 <InitializeRunning+0xb8>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
			StartPulling = true; // Pulling Stage Firse
 80020aa:	4b0c      	ldr	r3, [pc, #48]	; (80020dc <InitializeRunning+0xb4>)
 80020ac:	2201      	movs	r2, #1
 80020ae:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 80020b0:	4b07      	ldr	r3, [pc, #28]	; (80020d0 <InitializeRunning+0xa8>)
 80020b2:	2200      	movs	r2, #0
 80020b4:	701a      	strb	r2, [r3, #0]
			StartPulseCmdCounting = false;
 80020b6:	4b0b      	ldr	r3, [pc, #44]	; (80020e4 <InitializeRunning+0xbc>)
 80020b8:	2200      	movs	r2, #0
 80020ba:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();
 80020bc:	f7ff feae 	bl	8001e1c <InitGoingToStartingPosition>
			break;
 80020c0:	e000      	b.n	80020c4 <InitializeRunning+0x9c>
			break;
 80020c2:	bf00      	nop
	}
}
 80020c4:	bf00      	nop
 80020c6:	3708      	adds	r7, #8
 80020c8:	46bd      	mov	sp, r7
 80020ca:	bd80      	pop	{r7, pc}
 80020cc:	20000446 	.word	0x20000446
 80020d0:	20000445 	.word	0x20000445
 80020d4:	2000044e 	.word	0x2000044e
 80020d8:	20000448 	.word	0x20000448
 80020dc:	2000044d 	.word	0x2000044d
 80020e0:	20000455 	.word	0x20000455
 80020e4:	2000044b 	.word	0x2000044b
 80020e8:	2000045a 	.word	0x2000045a
 80020ec:	200004d0 	.word	0x200004d0

080020f0 <PullingExperiment>:

bool PullingExperiment ()
{
 80020f0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80020f4:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 80020f6:	4b9c      	ldr	r3, [pc, #624]	; (8002368 <PullingExperiment+0x278>)
 80020f8:	781b      	ldrb	r3, [r3, #0]
 80020fa:	2b00      	cmp	r3, #0
 80020fc:	d001      	beq.n	8002102 <PullingExperiment+0x12>
	{
		return true;
 80020fe:	2301      	movs	r3, #1
 8002100:	e229      	b.n	8002556 <PullingExperiment+0x466>
	}
	else
	{
		if (!StartAccleratePulling)
 8002102:	4b9a      	ldr	r3, [pc, #616]	; (800236c <PullingExperiment+0x27c>)
 8002104:	781b      	ldrb	r3, [r3, #0]
 8002106:	f083 0301 	eor.w	r3, r3, #1
 800210a:	b2db      	uxtb	r3, r3
 800210c:	2b00      	cmp	r3, #0
 800210e:	d02c      	beq.n	800216a <PullingExperiment+0x7a>
		{
			if (CheckGoingToRefPosition(true, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 8002110:	4b97      	ldr	r3, [pc, #604]	; (8002370 <PullingExperiment+0x280>)
 8002112:	681b      	ldr	r3, [r3, #0]
 8002114:	4619      	mov	r1, r3
 8002116:	2001      	movs	r0, #1
 8002118:	f7ff fd0a 	bl	8001b30 <CheckGoingToRefPosition>
 800211c:	4603      	mov	r3, r0
 800211e:	2b00      	cmp	r3, #0
 8002120:	d021      	beq.n	8002166 <PullingExperiment+0x76>
			{
				if (WaitingMiliSecond(5000)) // Wait for 5 seconds = 5000ms
 8002122:	f241 3088 	movw	r0, #5000	; 0x1388
 8002126:	f7ff fc51 	bl	80019cc <WaitingMiliSecond>
 800212a:	4603      	mov	r3, r0
 800212c:	2b00      	cmp	r3, #0
 800212e:	d018      	beq.n	8002162 <PullingExperiment+0x72>
				{
					StartAccleratePulling = true; // turn on flag to start acclerating pulling
 8002130:	4b8e      	ldr	r3, [pc, #568]	; (800236c <PullingExperiment+0x27c>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
					Direction = false;
 8002136:	4b8f      	ldr	r3, [pc, #572]	; (8002374 <PullingExperiment+0x284>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 800213c:	4b8e      	ldr	r3, [pc, #568]	; (8002378 <PullingExperiment+0x288>)
 800213e:	2200      	movs	r2, #0
 8002140:	701a      	strb	r2, [r3, #0]

					PRIsToggled = true; // true = pulling up.
 8002142:	4b8e      	ldr	r3, [pc, #568]	; (800237c <PullingExperiment+0x28c>)
 8002144:	2201      	movs	r2, #1
 8002146:	701a      	strb	r2, [r3, #0]
					DisableSTOP(); // Disable the stop
 8002148:	f7ff f88e 	bl	8001268 <DisableSTOP>
					StartPulseGenerating();
 800214c:	f7ff fc20 	bl	8001990 <StartPulseGenerating>
					PreAccRef = AccRef;
 8002150:	4b8b      	ldr	r3, [pc, #556]	; (8002380 <PullingExperiment+0x290>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4a8b      	ldr	r2, [pc, #556]	; (8002384 <PullingExperiment+0x294>)
 8002156:	6013      	str	r3, [r2, #0]

					TargetPosition = FlyingPosPulseCmd; // First, go to max-speed point
 8002158:	4b8b      	ldr	r3, [pc, #556]	; (8002388 <PullingExperiment+0x298>)
 800215a:	681b      	ldr	r3, [r3, #0]
 800215c:	4a8b      	ldr	r2, [pc, #556]	; (800238c <PullingExperiment+0x29c>)
 800215e:	6013      	str	r3, [r2, #0]
 8002160:	e1f8      	b.n	8002554 <PullingExperiment+0x464>

					//RunningTime = 0;
				}
				else return false;
 8002162:	2300      	movs	r3, #0
 8002164:	e1f7      	b.n	8002556 <PullingExperiment+0x466>
			}
			else return false;
 8002166:	2300      	movs	r3, #0
 8002168:	e1f5      	b.n	8002556 <PullingExperiment+0x466>
		}
		else // Start accelerate pulling
		{
			if (!StartBraking) // Accelerating Stage
 800216a:	4b83      	ldr	r3, [pc, #524]	; (8002378 <PullingExperiment+0x288>)
 800216c:	781b      	ldrb	r3, [r3, #0]
 800216e:	f083 0301 	eor.w	r3, r3, #1
 8002172:	b2db      	uxtb	r3, r3
 8002174:	2b00      	cmp	r3, #0
 8002176:	f000 8127 	beq.w	80023c8 <PullingExperiment+0x2d8>
			{
				if (IsReachTargetPosition)
 800217a:	4b85      	ldr	r3, [pc, #532]	; (8002390 <PullingExperiment+0x2a0>)
 800217c:	781b      	ldrb	r3, [r3, #0]
 800217e:	b2db      	uxtb	r3, r3
 8002180:	2b00      	cmp	r3, #0
 8002182:	d039      	beq.n	80021f8 <PullingExperiment+0x108>
				{
					StartBraking = true;
 8002184:	4b7c      	ldr	r3, [pc, #496]	; (8002378 <PullingExperiment+0x288>)
 8002186:	2201      	movs	r2, #1
 8002188:	701a      	strb	r2, [r3, #0]
					PreAccRef = AccRef;
 800218a:	4b7d      	ldr	r3, [pc, #500]	; (8002380 <PullingExperiment+0x290>)
 800218c:	681b      	ldr	r3, [r3, #0]
 800218e:	4a7d      	ldr	r2, [pc, #500]	; (8002384 <PullingExperiment+0x294>)
 8002190:	6013      	str	r3, [r2, #0]

					StartPulseCmdCounting = false;
 8002192:	4b80      	ldr	r3, [pc, #512]	; (8002394 <PullingExperiment+0x2a4>)
 8002194:	2200      	movs	r2, #0
 8002196:	701a      	strb	r2, [r3, #0]

					PositionPulseCmd = 0; // Reset the pulse count variable
 8002198:	4b7f      	ldr	r3, [pc, #508]	; (8002398 <PullingExperiment+0x2a8>)
 800219a:	2200      	movs	r2, #0
 800219c:	601a      	str	r2, [r3, #0]
					TargetPosition = (int)(EncoderResolution*PullingDecelDistance/(2*3.14*DrumRadius));
 800219e:	4b7f      	ldr	r3, [pc, #508]	; (800239c <PullingExperiment+0x2ac>)
 80021a0:	881b      	ldrh	r3, [r3, #0]
 80021a2:	ee07 3a90 	vmov	s15, r3
 80021a6:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021aa:	4b7d      	ldr	r3, [pc, #500]	; (80023a0 <PullingExperiment+0x2b0>)
 80021ac:	edd3 7a00 	vldr	s15, [r3]
 80021b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021b4:	ee17 0a90 	vmov	r0, s15
 80021b8:	f7fe f9c6 	bl	8000548 <__aeabi_f2d>
 80021bc:	4604      	mov	r4, r0
 80021be:	460d      	mov	r5, r1
 80021c0:	4b78      	ldr	r3, [pc, #480]	; (80023a4 <PullingExperiment+0x2b4>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	4618      	mov	r0, r3
 80021c6:	f7fe f9bf 	bl	8000548 <__aeabi_f2d>
 80021ca:	a35f      	add	r3, pc, #380	; (adr r3, 8002348 <PullingExperiment+0x258>)
 80021cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021d0:	f7fe fa12 	bl	80005f8 <__aeabi_dmul>
 80021d4:	4602      	mov	r2, r0
 80021d6:	460b      	mov	r3, r1
 80021d8:	4620      	mov	r0, r4
 80021da:	4629      	mov	r1, r5
 80021dc:	f7fe fb36 	bl	800084c <__aeabi_ddiv>
 80021e0:	4602      	mov	r2, r0
 80021e2:	460b      	mov	r3, r1
 80021e4:	4610      	mov	r0, r2
 80021e6:	4619      	mov	r1, r3
 80021e8:	f7fe fcb6 	bl	8000b58 <__aeabi_d2iz>
 80021ec:	4603      	mov	r3, r0
 80021ee:	4a67      	ldr	r2, [pc, #412]	; (800238c <PullingExperiment+0x29c>)
 80021f0:	6013      	str	r3, [r2, #0]

					IsReachTargetPosition = false; // Reset the flag
 80021f2:	4b67      	ldr	r3, [pc, #412]	; (8002390 <PullingExperiment+0x2a0>)
 80021f4:	2200      	movs	r2, #0
 80021f6:	701a      	strb	r2, [r3, #0]
				}
				//RunningTime += SampleTime;

				//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-PullingAccel, PreAccRef); // ramping the reference signal
				//LinearGeneration(&AccRef,-8,-9.6-PullingAccel); // ramping the reference signal
				AccRef = -9.6-PullingAccel;
 80021f8:	4b6b      	ldr	r3, [pc, #428]	; (80023a8 <PullingExperiment+0x2b8>)
 80021fa:	681b      	ldr	r3, [r3, #0]
 80021fc:	4618      	mov	r0, r3
 80021fe:	f7fe f9a3 	bl	8000548 <__aeabi_f2d>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	a152      	add	r1, pc, #328	; (adr r1, 8002350 <PullingExperiment+0x260>)
 8002208:	e9d1 0100 	ldrd	r0, r1, [r1]
 800220c:	f7fe f83c 	bl	8000288 <__aeabi_dsub>
 8002210:	4602      	mov	r2, r0
 8002212:	460b      	mov	r3, r1
 8002214:	4610      	mov	r0, r2
 8002216:	4619      	mov	r1, r3
 8002218:	f7fe fce6 	bl	8000be8 <__aeabi_d2f>
 800221c:	4603      	mov	r3, r0
 800221e:	4a58      	ldr	r2, [pc, #352]	; (8002380 <PullingExperiment+0x290>)
 8002220:	6013      	str	r3, [r2, #0]
				// Calculate speed cmd


				if (IsOpenLoopControl) // Use open-loop control
 8002222:	4b62      	ldr	r3, [pc, #392]	; (80023ac <PullingExperiment+0x2bc>)
 8002224:	781b      	ldrb	r3, [r3, #0]
 8002226:	2b00      	cmp	r3, #0
 8002228:	d073      	beq.n	8002312 <PullingExperiment+0x222>
				{
					//SpeedCmd = LinearGeneration(RunningTime,-PullingEpsilonAcc*10,0,-PullingMaxSpeed,0);// Feedforward term
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term

					//LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);
					SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 800222a:	4b61      	ldr	r3, [pc, #388]	; (80023b0 <PullingExperiment+0x2c0>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f98a 	bl	8000548 <__aeabi_f2d>
 8002234:	4604      	mov	r4, r0
 8002236:	460d      	mov	r5, r1
 8002238:	4b5e      	ldr	r3, [pc, #376]	; (80023b4 <PullingExperiment+0x2c4>)
 800223a:	781b      	ldrb	r3, [r3, #0]
 800223c:	4618      	mov	r0, r3
 800223e:	f7fe f971 	bl	8000524 <__aeabi_i2d>
 8002242:	a345      	add	r3, pc, #276	; (adr r3, 8002358 <PullingExperiment+0x268>)
 8002244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002248:	f7fe f9d6 	bl	80005f8 <__aeabi_dmul>
 800224c:	4602      	mov	r2, r0
 800224e:	460b      	mov	r3, r1
 8002250:	4690      	mov	r8, r2
 8002252:	4699      	mov	r9, r3
 8002254:	4b4a      	ldr	r3, [pc, #296]	; (8002380 <PullingExperiment+0x290>)
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	4618      	mov	r0, r3
 800225a:	f7fe f975 	bl	8000548 <__aeabi_f2d>
 800225e:	a340      	add	r3, pc, #256	; (adr r3, 8002360 <PullingExperiment+0x270>)
 8002260:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002264:	f7fe f812 	bl	800028c <__adddf3>
 8002268:	4602      	mov	r2, r0
 800226a:	460b      	mov	r3, r1
 800226c:	4640      	mov	r0, r8
 800226e:	4649      	mov	r1, r9
 8002270:	f7fe f9c2 	bl	80005f8 <__aeabi_dmul>
 8002274:	4602      	mov	r2, r0
 8002276:	460b      	mov	r3, r1
 8002278:	4610      	mov	r0, r2
 800227a:	4619      	mov	r1, r3
 800227c:	f04f 0200 	mov.w	r2, #0
 8002280:	4b4d      	ldr	r3, [pc, #308]	; (80023b8 <PullingExperiment+0x2c8>)
 8002282:	f7fe f9b9 	bl	80005f8 <__aeabi_dmul>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4690      	mov	r8, r2
 800228c:	4699      	mov	r9, r3
 800228e:	4b45      	ldr	r3, [pc, #276]	; (80023a4 <PullingExperiment+0x2b4>)
 8002290:	681b      	ldr	r3, [r3, #0]
 8002292:	4618      	mov	r0, r3
 8002294:	f7fe f958 	bl	8000548 <__aeabi_f2d>
 8002298:	4602      	mov	r2, r0
 800229a:	460b      	mov	r3, r1
 800229c:	4640      	mov	r0, r8
 800229e:	4649      	mov	r1, r9
 80022a0:	f7fe fad4 	bl	800084c <__aeabi_ddiv>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4620      	mov	r0, r4
 80022aa:	4629      	mov	r1, r5
 80022ac:	f7fd ffee 	bl	800028c <__adddf3>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	4610      	mov	r0, r2
 80022b6:	4619      	mov	r1, r3
 80022b8:	f7fe fc96 	bl	8000be8 <__aeabi_d2f>
 80022bc:	4603      	mov	r3, r0
 80022be:	4a3c      	ldr	r2, [pc, #240]	; (80023b0 <PullingExperiment+0x2c0>)
 80022c0:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -PullingMaxSpeed)
 80022c2:	4b3e      	ldr	r3, [pc, #248]	; (80023bc <PullingExperiment+0x2cc>)
 80022c4:	881b      	ldrh	r3, [r3, #0]
 80022c6:	425b      	negs	r3, r3
 80022c8:	ee07 3a90 	vmov	s15, r3
 80022cc:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022d0:	4b37      	ldr	r3, [pc, #220]	; (80023b0 <PullingExperiment+0x2c0>)
 80022d2:	edd3 7a00 	vldr	s15, [r3]
 80022d6:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022da:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022de:	db09      	blt.n	80022f4 <PullingExperiment+0x204>
						SpeedCmd = -PullingMaxSpeed;
 80022e0:	4b36      	ldr	r3, [pc, #216]	; (80023bc <PullingExperiment+0x2cc>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	425b      	negs	r3, r3
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ee:	4b30      	ldr	r3, [pc, #192]	; (80023b0 <PullingExperiment+0x2c0>)
 80022f0:	edc3 7a00 	vstr	s15, [r3]
					if (SpeedCmd >= 0)
 80022f4:	4b2e      	ldr	r3, [pc, #184]	; (80023b0 <PullingExperiment+0x2c0>)
 80022f6:	edd3 7a00 	vldr	s15, [r3]
 80022fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80022fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002302:	db03      	blt.n	800230c <PullingExperiment+0x21c>
						SpeedCmd = 0;
 8002304:	4b2a      	ldr	r3, [pc, #168]	; (80023b0 <PullingExperiment+0x2c0>)
 8002306:	f04f 0200 	mov.w	r2, #0
 800230a:	601a      	str	r2, [r3, #0]
					StartPulseCmdCounting = true;
 800230c:	4b21      	ldr	r3, [pc, #132]	; (8002394 <PullingExperiment+0x2a4>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
//					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,-PullingMaxSpeed,0); // Feedforwad
//					//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term
//					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,-PullingMaxSpeed);// Feedforward term
//				}

				if (SpeedCmd != 0)
 8002312:	4b27      	ldr	r3, [pc, #156]	; (80023b0 <PullingExperiment+0x2c0>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	eef5 7a40 	vcmp.f32	s15, #0.0
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	f000 8118 	beq.w	8002554 <PullingExperiment+0x464>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8002324:	4b26      	ldr	r3, [pc, #152]	; (80023c0 <PullingExperiment+0x2d0>)
 8002326:	781b      	ldrb	r3, [r3, #0]
 8002328:	4a21      	ldr	r2, [pc, #132]	; (80023b0 <PullingExperiment+0x2c0>)
 800232a:	edd2 7a00 	vldr	s15, [r2]
 800232e:	eeb0 0a67 	vmov.f32	s0, s15
 8002332:	4618      	mov	r0, r3
 8002334:	f7ff fb70 	bl	8001a18 <CalculateTimer3Period>
 8002338:	4603      	mov	r3, r0
 800233a:	b29a      	uxth	r2, r3
 800233c:	4b21      	ldr	r3, [pc, #132]	; (80023c4 <PullingExperiment+0x2d4>)
 800233e:	801a      	strh	r2, [r3, #0]
 8002340:	e108      	b.n	8002554 <PullingExperiment+0x464>
 8002342:	bf00      	nop
 8002344:	f3af 8000 	nop.w
 8002348:	51eb851f 	.word	0x51eb851f
 800234c:	40191eb8 	.word	0x40191eb8
 8002350:	33333333 	.word	0x33333333
 8002354:	c0233333 	.word	0xc0233333
 8002358:	d2f1a9fc 	.word	0xd2f1a9fc
 800235c:	3f50624d 	.word	0x3f50624d
 8002360:	33333333 	.word	0x33333333
 8002364:	40233333 	.word	0x40233333
 8002368:	20000455 	.word	0x20000455
 800236c:	20000454 	.word	0x20000454
 8002370:	200004bc 	.word	0x200004bc
 8002374:	20000448 	.word	0x20000448
 8002378:	2000044e 	.word	0x2000044e
 800237c:	2000045a 	.word	0x2000045a
 8002380:	20000010 	.word	0x20000010
 8002384:	2000054c 	.word	0x2000054c
 8002388:	200004c0 	.word	0x200004c0
 800238c:	200004cc 	.word	0x200004cc
 8002390:	20000453 	.word	0x20000453
 8002394:	2000044b 	.word	0x2000044b
 8002398:	200004d0 	.word	0x200004d0
 800239c:	2000000a 	.word	0x2000000a
 80023a0:	200004b0 	.word	0x200004b0
 80023a4:	2000046c 	.word	0x2000046c
 80023a8:	20000498 	.word	0x20000498
 80023ac:	20000004 	.word	0x20000004
 80023b0:	20000514 	.word	0x20000514
 80023b4:	20000470 	.word	0x20000470
 80023b8:	40240000 	.word	0x40240000
 80023bc:	200004ac 	.word	0x200004ac
 80023c0:	20000003 	.word	0x20000003
 80023c4:	20000464 	.word	0x20000464
			else // Braking Stage
			{
				//RunningTime += SampleTime;
				//AccRef = LinearGeneration(RunningTime,8,PreAccRef, PreAccRef, -9.6+PullingDecel); // ramping the reference signal
				//LinearGeneration(&AccRef,60,-9.6+PullingDecel); // ramping the reference signal
				AccRef = -9.6+PullingDecel;
 80023c8:	4b69      	ldr	r3, [pc, #420]	; (8002570 <PullingExperiment+0x480>)
 80023ca:	681b      	ldr	r3, [r3, #0]
 80023cc:	4618      	mov	r0, r3
 80023ce:	f7fe f8bb 	bl	8000548 <__aeabi_f2d>
 80023d2:	a363      	add	r3, pc, #396	; (adr r3, 8002560 <PullingExperiment+0x470>)
 80023d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023d8:	f7fd ff56 	bl	8000288 <__aeabi_dsub>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	4610      	mov	r0, r2
 80023e2:	4619      	mov	r1, r3
 80023e4:	f7fe fc00 	bl	8000be8 <__aeabi_d2f>
 80023e8:	4603      	mov	r3, r0
 80023ea:	4a62      	ldr	r2, [pc, #392]	; (8002574 <PullingExperiment+0x484>)
 80023ec:	6013      	str	r3, [r2, #0]
				if (IsOpenLoopControl)
 80023ee:	4b62      	ldr	r3, [pc, #392]	; (8002578 <PullingExperiment+0x488>)
 80023f0:	781b      	ldrb	r3, [r3, #0]
 80023f2:	2b00      	cmp	r3, #0
 80023f4:	d070      	beq.n	80024d8 <PullingExperiment+0x3e8>
				{
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,TransitionSpeed,TransitionSpeed,0);
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 80023f6:	4b61      	ldr	r3, [pc, #388]	; (800257c <PullingExperiment+0x48c>)
 80023f8:	681b      	ldr	r3, [r3, #0]
 80023fa:	4618      	mov	r0, r3
 80023fc:	f7fe f8a4 	bl	8000548 <__aeabi_f2d>
 8002400:	4604      	mov	r4, r0
 8002402:	460d      	mov	r5, r1
 8002404:	4b5e      	ldr	r3, [pc, #376]	; (8002580 <PullingExperiment+0x490>)
 8002406:	781b      	ldrb	r3, [r3, #0]
 8002408:	4618      	mov	r0, r3
 800240a:	f7fe f88b 	bl	8000524 <__aeabi_i2d>
 800240e:	a356      	add	r3, pc, #344	; (adr r3, 8002568 <PullingExperiment+0x478>)
 8002410:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002414:	f7fe f8f0 	bl	80005f8 <__aeabi_dmul>
 8002418:	4602      	mov	r2, r0
 800241a:	460b      	mov	r3, r1
 800241c:	4690      	mov	r8, r2
 800241e:	4699      	mov	r9, r3
 8002420:	4b54      	ldr	r3, [pc, #336]	; (8002574 <PullingExperiment+0x484>)
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	4618      	mov	r0, r3
 8002426:	f7fe f88f 	bl	8000548 <__aeabi_f2d>
 800242a:	a34d      	add	r3, pc, #308	; (adr r3, 8002560 <PullingExperiment+0x470>)
 800242c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002430:	f7fd ff2c 	bl	800028c <__adddf3>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4640      	mov	r0, r8
 800243a:	4649      	mov	r1, r9
 800243c:	f7fe f8dc 	bl	80005f8 <__aeabi_dmul>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	f04f 0200 	mov.w	r2, #0
 800244c:	4b4d      	ldr	r3, [pc, #308]	; (8002584 <PullingExperiment+0x494>)
 800244e:	f7fe f8d3 	bl	80005f8 <__aeabi_dmul>
 8002452:	4602      	mov	r2, r0
 8002454:	460b      	mov	r3, r1
 8002456:	4690      	mov	r8, r2
 8002458:	4699      	mov	r9, r3
 800245a:	4b4b      	ldr	r3, [pc, #300]	; (8002588 <PullingExperiment+0x498>)
 800245c:	681b      	ldr	r3, [r3, #0]
 800245e:	4618      	mov	r0, r3
 8002460:	f7fe f872 	bl	8000548 <__aeabi_f2d>
 8002464:	4602      	mov	r2, r0
 8002466:	460b      	mov	r3, r1
 8002468:	4640      	mov	r0, r8
 800246a:	4649      	mov	r1, r9
 800246c:	f7fe f9ee 	bl	800084c <__aeabi_ddiv>
 8002470:	4602      	mov	r2, r0
 8002472:	460b      	mov	r3, r1
 8002474:	4620      	mov	r0, r4
 8002476:	4629      	mov	r1, r5
 8002478:	f7fd ff08 	bl	800028c <__adddf3>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4610      	mov	r0, r2
 8002482:	4619      	mov	r1, r3
 8002484:	f7fe fbb0 	bl	8000be8 <__aeabi_d2f>
 8002488:	4603      	mov	r3, r0
 800248a:	4a3c      	ldr	r2, [pc, #240]	; (800257c <PullingExperiment+0x48c>)
 800248c:	6013      	str	r3, [r2, #0]

					if (SpeedCmd <= -PullingMaxSpeed)
 800248e:	4b3f      	ldr	r3, [pc, #252]	; (800258c <PullingExperiment+0x49c>)
 8002490:	881b      	ldrh	r3, [r3, #0]
 8002492:	425b      	negs	r3, r3
 8002494:	ee07 3a90 	vmov	s15, r3
 8002498:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800249c:	4b37      	ldr	r3, [pc, #220]	; (800257c <PullingExperiment+0x48c>)
 800249e:	edd3 7a00 	vldr	s15, [r3]
 80024a2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024aa:	db09      	blt.n	80024c0 <PullingExperiment+0x3d0>
						SpeedCmd = -PullingMaxSpeed;
 80024ac:	4b37      	ldr	r3, [pc, #220]	; (800258c <PullingExperiment+0x49c>)
 80024ae:	881b      	ldrh	r3, [r3, #0]
 80024b0:	425b      	negs	r3, r3
 80024b2:	ee07 3a90 	vmov	s15, r3
 80024b6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024ba:	4b30      	ldr	r3, [pc, #192]	; (800257c <PullingExperiment+0x48c>)
 80024bc:	edc3 7a00 	vstr	s15, [r3]
					if (SpeedCmd >= 0)
 80024c0:	4b2e      	ldr	r3, [pc, #184]	; (800257c <PullingExperiment+0x48c>)
 80024c2:	edd3 7a00 	vldr	s15, [r3]
 80024c6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ce:	db03      	blt.n	80024d8 <PullingExperiment+0x3e8>
						SpeedCmd = 0;
 80024d0:	4b2a      	ldr	r3, [pc, #168]	; (800257c <PullingExperiment+0x48c>)
 80024d2:	f04f 0200 	mov.w	r2, #0
 80024d6:	601a      	str	r2, [r3, #0]
//					SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
//					if (SpeedCmd >= 0)
//						SpeedCmd = 0;
//				}

				if (SpeedCmd != 0)
 80024d8:	4b28      	ldr	r3, [pc, #160]	; (800257c <PullingExperiment+0x48c>)
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	d010      	beq.n	800250a <PullingExperiment+0x41a>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 80024e8:	4b29      	ldr	r3, [pc, #164]	; (8002590 <PullingExperiment+0x4a0>)
 80024ea:	781b      	ldrb	r3, [r3, #0]
 80024ec:	4a23      	ldr	r2, [pc, #140]	; (800257c <PullingExperiment+0x48c>)
 80024ee:	edd2 7a00 	vldr	s15, [r2]
 80024f2:	eeb0 0a67 	vmov.f32	s0, s15
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7ff fa8e 	bl	8001a18 <CalculateTimer3Period>
 80024fc:	4603      	mov	r3, r0
 80024fe:	b29a      	uxth	r2, r3
 8002500:	4b24      	ldr	r3, [pc, #144]	; (8002594 <PullingExperiment+0x4a4>)
 8002502:	801a      	strh	r2, [r3, #0]
					StartPulseCmdCounting = true;
 8002504:	4b24      	ldr	r3, [pc, #144]	; (8002598 <PullingExperiment+0x4a8>)
 8002506:	2201      	movs	r2, #1
 8002508:	701a      	strb	r2, [r3, #0]
				}
//				else
//				{
//					StopPulseGenerating();
//				}
				if (IsReachTargetPosition) // Reach the top position
 800250a:	4b24      	ldr	r3, [pc, #144]	; (800259c <PullingExperiment+0x4ac>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	b2db      	uxtb	r3, r3
 8002510:	2b00      	cmp	r3, #0
 8002512:	d01f      	beq.n	8002554 <PullingExperiment+0x464>
				{
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 8002514:	4b19      	ldr	r3, [pc, #100]	; (800257c <PullingExperiment+0x48c>)
 8002516:	f04f 0200 	mov.w	r2, #0
 800251a:	601a      	str	r2, [r3, #0]

					AccRef = - 9.8;
 800251c:	4b15      	ldr	r3, [pc, #84]	; (8002574 <PullingExperiment+0x484>)
 800251e:	4a20      	ldr	r2, [pc, #128]	; (80025a0 <PullingExperiment+0x4b0>)
 8002520:	601a      	str	r2, [r3, #0]

					StartBraking = false;
 8002522:	4b20      	ldr	r3, [pc, #128]	; (80025a4 <PullingExperiment+0x4b4>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
					StartAccleratePulling = false;
 8002528:	4b1f      	ldr	r3, [pc, #124]	; (80025a8 <PullingExperiment+0x4b8>)
 800252a:	2200      	movs	r2, #0
 800252c:	701a      	strb	r2, [r3, #0]
					StopPulseGenerating();
 800252e:	f7ff fa11 	bl	8001954 <StopPulseGenerating>
					CompleteRunning = true; // Set this flag to return true in the next time
 8002532:	4b1e      	ldr	r3, [pc, #120]	; (80025ac <PullingExperiment+0x4bc>)
 8002534:	2201      	movs	r2, #1
 8002536:	701a      	strb	r2, [r3, #0]

					StartPulseCmdCounting = false;
 8002538:	4b17      	ldr	r3, [pc, #92]	; (8002598 <PullingExperiment+0x4a8>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
					PositionPulseCmd = 0;
 800253e:	4b1c      	ldr	r3, [pc, #112]	; (80025b0 <PullingExperiment+0x4c0>)
 8002540:	2200      	movs	r2, #0
 8002542:	601a      	str	r2, [r3, #0]
					TargetPosition = 0;
 8002544:	4b1b      	ldr	r3, [pc, #108]	; (80025b4 <PullingExperiment+0x4c4>)
 8002546:	2200      	movs	r2, #0
 8002548:	601a      	str	r2, [r3, #0]
					IsReachTargetPosition = false;
 800254a:	4b14      	ldr	r3, [pc, #80]	; (800259c <PullingExperiment+0x4ac>)
 800254c:	2200      	movs	r2, #0
 800254e:	701a      	strb	r2, [r3, #0]
					return true;
 8002550:	2301      	movs	r3, #1
 8002552:	e000      	b.n	8002556 <PullingExperiment+0x466>
				}
			}
		}
		return false;
 8002554:	2300      	movs	r3, #0
	}
}
 8002556:	4618      	mov	r0, r3
 8002558:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800255c:	f3af 8000 	nop.w
 8002560:	33333333 	.word	0x33333333
 8002564:	40233333 	.word	0x40233333
 8002568:	d2f1a9fc 	.word	0xd2f1a9fc
 800256c:	3f50624d 	.word	0x3f50624d
 8002570:	2000049c 	.word	0x2000049c
 8002574:	20000010 	.word	0x20000010
 8002578:	20000004 	.word	0x20000004
 800257c:	20000514 	.word	0x20000514
 8002580:	20000470 	.word	0x20000470
 8002584:	40240000 	.word	0x40240000
 8002588:	2000046c 	.word	0x2000046c
 800258c:	200004ac 	.word	0x200004ac
 8002590:	20000003 	.word	0x20000003
 8002594:	20000464 	.word	0x20000464
 8002598:	2000044b 	.word	0x2000044b
 800259c:	20000453 	.word	0x20000453
 80025a0:	c11ccccd 	.word	0xc11ccccd
 80025a4:	2000044e 	.word	0x2000044e
 80025a8:	20000454 	.word	0x20000454
 80025ac:	20000455 	.word	0x20000455
 80025b0:	200004d0 	.word	0x200004d0
 80025b4:	200004cc 	.word	0x200004cc

080025b8 <SimulatePullAndDrop>:
bool SimulatePullAndDrop ()
{
 80025b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025bc:	ed2d 8b02 	vpush	{d8}
 80025c0:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 80025c2:	4b87      	ldr	r3, [pc, #540]	; (80027e0 <SimulatePullAndDrop+0x228>)
 80025c4:	781b      	ldrb	r3, [r3, #0]
 80025c6:	2b00      	cmp	r3, #0
 80025c8:	d001      	beq.n	80025ce <SimulatePullAndDrop+0x16>
	{
		return true;
 80025ca:	2301      	movs	r3, #1
 80025cc:	e3f2      	b.n	8002db4 <SimulatePullAndDrop+0x7fc>
	}
	else
	{
		// BEGIN PULLING UP
		if (StartPulling && !StartDropping) // Pulling Task
 80025ce:	4b85      	ldr	r3, [pc, #532]	; (80027e4 <SimulatePullAndDrop+0x22c>)
 80025d0:	781b      	ldrb	r3, [r3, #0]
 80025d2:	2b00      	cmp	r3, #0
 80025d4:	f000 81f5 	beq.w	80029c2 <SimulatePullAndDrop+0x40a>
 80025d8:	4b83      	ldr	r3, [pc, #524]	; (80027e8 <SimulatePullAndDrop+0x230>)
 80025da:	781b      	ldrb	r3, [r3, #0]
 80025dc:	f083 0301 	eor.w	r3, r3, #1
 80025e0:	b2db      	uxtb	r3, r3
 80025e2:	2b00      	cmp	r3, #0
 80025e4:	f000 81ed 	beq.w	80029c2 <SimulatePullAndDrop+0x40a>
		{
			// First Pulling up including going to the initial position
			if (!StartAccleratePulling)
 80025e8:	4b80      	ldr	r3, [pc, #512]	; (80027ec <SimulatePullAndDrop+0x234>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	f083 0301 	eor.w	r3, r3, #1
 80025f0:	b2db      	uxtb	r3, r3
 80025f2:	2b00      	cmp	r3, #0
 80025f4:	d016      	beq.n	8002624 <SimulatePullAndDrop+0x6c>
			{
				StartAccleratePulling = true; // turn on flag to start acclerating pulling
 80025f6:	4b7d      	ldr	r3, [pc, #500]	; (80027ec <SimulatePullAndDrop+0x234>)
 80025f8:	2201      	movs	r2, #1
 80025fa:	701a      	strb	r2, [r3, #0]
				Direction = false; // false = move up to count the position pulse cmd
 80025fc:	4b7c      	ldr	r3, [pc, #496]	; (80027f0 <SimulatePullAndDrop+0x238>)
 80025fe:	2200      	movs	r2, #0
 8002600:	701a      	strb	r2, [r3, #0]
				StartBraking = false;
 8002602:	4b7c      	ldr	r3, [pc, #496]	; (80027f4 <SimulatePullAndDrop+0x23c>)
 8002604:	2200      	movs	r2, #0
 8002606:	701a      	strb	r2, [r3, #0]

				PreAccRef = AccRef;
 8002608:	4b7b      	ldr	r3, [pc, #492]	; (80027f8 <SimulatePullAndDrop+0x240>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4a7b      	ldr	r2, [pc, #492]	; (80027fc <SimulatePullAndDrop+0x244>)
 800260e:	6013      	str	r3, [r2, #0]

				PRIsToggled = true; // true = pulling up.
 8002610:	4b7b      	ldr	r3, [pc, #492]	; (8002800 <SimulatePullAndDrop+0x248>)
 8002612:	2201      	movs	r2, #1
 8002614:	701a      	strb	r2, [r3, #0]
				StartPulseGenerating();
 8002616:	f7ff f9bb 	bl	8001990 <StartPulseGenerating>

				TargetPosition = FlyingPosPulseCmd; // First, go to max-speed point
 800261a:	4b7a      	ldr	r3, [pc, #488]	; (8002804 <SimulatePullAndDrop+0x24c>)
 800261c:	681b      	ldr	r3, [r3, #0]
 800261e:	4a7a      	ldr	r2, [pc, #488]	; (8002808 <SimulatePullAndDrop+0x250>)
 8002620:	6013      	str	r3, [r2, #0]
 8002622:	e1ce      	b.n	80029c2 <SimulatePullAndDrop+0x40a>
			}
			else // Start accelerated pulling
			{
				if (!StartBraking) // Accelerating Stage
 8002624:	4b73      	ldr	r3, [pc, #460]	; (80027f4 <SimulatePullAndDrop+0x23c>)
 8002626:	781b      	ldrb	r3, [r3, #0]
 8002628:	f083 0301 	eor.w	r3, r3, #1
 800262c:	b2db      	uxtb	r3, r3
 800262e:	2b00      	cmp	r3, #0
 8002630:	f000 8102 	beq.w	8002838 <SimulatePullAndDrop+0x280>
				{
					if(MotorDriver) // HIGEN Driver
 8002634:	4b75      	ldr	r3, [pc, #468]	; (800280c <SimulatePullAndDrop+0x254>)
 8002636:	781b      	ldrb	r3, [r3, #0]
 8002638:	2b00      	cmp	r3, #0
 800263a:	d011      	beq.n	8002660 <SimulatePullAndDrop+0xa8>
					{
						if ( abs(8*PositionPulseCmd) > abs(TargetPosition)) // 8 is th gear ratio
 800263c:	4b74      	ldr	r3, [pc, #464]	; (8002810 <SimulatePullAndDrop+0x258>)
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	00db      	lsls	r3, r3, #3
 8002642:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002646:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800264a:	4b6f      	ldr	r3, [pc, #444]	; (8002808 <SimulatePullAndDrop+0x250>)
 800264c:	681b      	ldr	r3, [r3, #0]
 800264e:	2b00      	cmp	r3, #0
 8002650:	bfb8      	it	lt
 8002652:	425b      	neglt	r3, r3
 8002654:	429a      	cmp	r2, r3
 8002656:	dd13      	ble.n	8002680 <SimulatePullAndDrop+0xc8>
							{
								IsReachTargetPosition = true;
 8002658:	4b6e      	ldr	r3, [pc, #440]	; (8002814 <SimulatePullAndDrop+0x25c>)
 800265a:	2201      	movs	r2, #1
 800265c:	701a      	strb	r2, [r3, #0]
 800265e:	e00f      	b.n	8002680 <SimulatePullAndDrop+0xc8>
							}
					}
					else // ASDA Driver
					{
						if ( abs(PositionPulseCmd) > abs(TargetPosition))
 8002660:	4b6b      	ldr	r3, [pc, #428]	; (8002810 <SimulatePullAndDrop+0x258>)
 8002662:	681b      	ldr	r3, [r3, #0]
 8002664:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002668:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800266c:	4b66      	ldr	r3, [pc, #408]	; (8002808 <SimulatePullAndDrop+0x250>)
 800266e:	681b      	ldr	r3, [r3, #0]
 8002670:	2b00      	cmp	r3, #0
 8002672:	bfb8      	it	lt
 8002674:	425b      	neglt	r3, r3
 8002676:	429a      	cmp	r2, r3
 8002678:	dd02      	ble.n	8002680 <SimulatePullAndDrop+0xc8>
							{
								IsReachTargetPosition = true;
 800267a:	4b66      	ldr	r3, [pc, #408]	; (8002814 <SimulatePullAndDrop+0x25c>)
 800267c:	2201      	movs	r2, #1
 800267e:	701a      	strb	r2, [r3, #0]
							}
					}
					if (IsReachTargetPosition)
 8002680:	4b64      	ldr	r3, [pc, #400]	; (8002814 <SimulatePullAndDrop+0x25c>)
 8002682:	781b      	ldrb	r3, [r3, #0]
 8002684:	b2db      	uxtb	r3, r3
 8002686:	2b00      	cmp	r3, #0
 8002688:	d009      	beq.n	800269e <SimulatePullAndDrop+0xe6>
					{
						StartBraking = true;
 800268a:	4b5a      	ldr	r3, [pc, #360]	; (80027f4 <SimulatePullAndDrop+0x23c>)
 800268c:	2201      	movs	r2, #1
 800268e:	701a      	strb	r2, [r3, #0]
						PreAccRef = AccRef;
 8002690:	4b59      	ldr	r3, [pc, #356]	; (80027f8 <SimulatePullAndDrop+0x240>)
 8002692:	681b      	ldr	r3, [r3, #0]
 8002694:	4a59      	ldr	r2, [pc, #356]	; (80027fc <SimulatePullAndDrop+0x244>)
 8002696:	6013      	str	r3, [r2, #0]
						IsReachTargetPosition = false; // Reset the flag
 8002698:	4b5e      	ldr	r3, [pc, #376]	; (8002814 <SimulatePullAndDrop+0x25c>)
 800269a:	2200      	movs	r2, #0
 800269c:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6-PullingAccel;
 800269e:	4b5e      	ldr	r3, [pc, #376]	; (8002818 <SimulatePullAndDrop+0x260>)
 80026a0:	681b      	ldr	r3, [r3, #0]
 80026a2:	4618      	mov	r0, r3
 80026a4:	f7fd ff50 	bl	8000548 <__aeabi_f2d>
 80026a8:	4602      	mov	r2, r0
 80026aa:	460b      	mov	r3, r1
 80026ac:	a146      	add	r1, pc, #280	; (adr r1, 80027c8 <SimulatePullAndDrop+0x210>)
 80026ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026b2:	f7fd fde9 	bl	8000288 <__aeabi_dsub>
 80026b6:	4602      	mov	r2, r0
 80026b8:	460b      	mov	r3, r1
 80026ba:	4610      	mov	r0, r2
 80026bc:	4619      	mov	r1, r3
 80026be:	f7fe fa93 	bl	8000be8 <__aeabi_d2f>
 80026c2:	4603      	mov	r3, r0
 80026c4:	4a4c      	ldr	r2, [pc, #304]	; (80027f8 <SimulatePullAndDrop+0x240>)
 80026c6:	6013      	str	r3, [r2, #0]

					//LinearGeneration(&AccRef,-16,-9.6-PullingAccel); // ramping the reference signal

					SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 80026c8:	4b54      	ldr	r3, [pc, #336]	; (800281c <SimulatePullAndDrop+0x264>)
 80026ca:	681b      	ldr	r3, [r3, #0]
 80026cc:	4618      	mov	r0, r3
 80026ce:	f7fd ff3b 	bl	8000548 <__aeabi_f2d>
 80026d2:	4604      	mov	r4, r0
 80026d4:	460d      	mov	r5, r1
 80026d6:	4b52      	ldr	r3, [pc, #328]	; (8002820 <SimulatePullAndDrop+0x268>)
 80026d8:	781b      	ldrb	r3, [r3, #0]
 80026da:	4618      	mov	r0, r3
 80026dc:	f7fd ff22 	bl	8000524 <__aeabi_i2d>
 80026e0:	a33b      	add	r3, pc, #236	; (adr r3, 80027d0 <SimulatePullAndDrop+0x218>)
 80026e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026e6:	f7fd ff87 	bl	80005f8 <__aeabi_dmul>
 80026ea:	4602      	mov	r2, r0
 80026ec:	460b      	mov	r3, r1
 80026ee:	4690      	mov	r8, r2
 80026f0:	4699      	mov	r9, r3
 80026f2:	4b41      	ldr	r3, [pc, #260]	; (80027f8 <SimulatePullAndDrop+0x240>)
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	4618      	mov	r0, r3
 80026f8:	f7fd ff26 	bl	8000548 <__aeabi_f2d>
 80026fc:	a336      	add	r3, pc, #216	; (adr r3, 80027d8 <SimulatePullAndDrop+0x220>)
 80026fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002702:	f7fd fdc3 	bl	800028c <__adddf3>
 8002706:	4602      	mov	r2, r0
 8002708:	460b      	mov	r3, r1
 800270a:	4640      	mov	r0, r8
 800270c:	4649      	mov	r1, r9
 800270e:	f7fd ff73 	bl	80005f8 <__aeabi_dmul>
 8002712:	4602      	mov	r2, r0
 8002714:	460b      	mov	r3, r1
 8002716:	4610      	mov	r0, r2
 8002718:	4619      	mov	r1, r3
 800271a:	f04f 0200 	mov.w	r2, #0
 800271e:	4b41      	ldr	r3, [pc, #260]	; (8002824 <SimulatePullAndDrop+0x26c>)
 8002720:	f7fd ff6a 	bl	80005f8 <__aeabi_dmul>
 8002724:	4602      	mov	r2, r0
 8002726:	460b      	mov	r3, r1
 8002728:	4690      	mov	r8, r2
 800272a:	4699      	mov	r9, r3
 800272c:	4b3e      	ldr	r3, [pc, #248]	; (8002828 <SimulatePullAndDrop+0x270>)
 800272e:	681b      	ldr	r3, [r3, #0]
 8002730:	4618      	mov	r0, r3
 8002732:	f7fd ff09 	bl	8000548 <__aeabi_f2d>
 8002736:	4602      	mov	r2, r0
 8002738:	460b      	mov	r3, r1
 800273a:	4640      	mov	r0, r8
 800273c:	4649      	mov	r1, r9
 800273e:	f7fe f885 	bl	800084c <__aeabi_ddiv>
 8002742:	4602      	mov	r2, r0
 8002744:	460b      	mov	r3, r1
 8002746:	4620      	mov	r0, r4
 8002748:	4629      	mov	r1, r5
 800274a:	f7fd fd9f 	bl	800028c <__adddf3>
 800274e:	4602      	mov	r2, r0
 8002750:	460b      	mov	r3, r1
 8002752:	4610      	mov	r0, r2
 8002754:	4619      	mov	r1, r3
 8002756:	f7fe fa47 	bl	8000be8 <__aeabi_d2f>
 800275a:	4603      	mov	r3, r0
 800275c:	4a2f      	ldr	r2, [pc, #188]	; (800281c <SimulatePullAndDrop+0x264>)
 800275e:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -PullingMaxSpeed)
 8002760:	4b32      	ldr	r3, [pc, #200]	; (800282c <SimulatePullAndDrop+0x274>)
 8002762:	881b      	ldrh	r3, [r3, #0]
 8002764:	425b      	negs	r3, r3
 8002766:	ee07 3a90 	vmov	s15, r3
 800276a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800276e:	4b2b      	ldr	r3, [pc, #172]	; (800281c <SimulatePullAndDrop+0x264>)
 8002770:	edd3 7a00 	vldr	s15, [r3]
 8002774:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002778:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800277c:	db09      	blt.n	8002792 <SimulatePullAndDrop+0x1da>
						SpeedCmd = -PullingMaxSpeed;
 800277e:	4b2b      	ldr	r3, [pc, #172]	; (800282c <SimulatePullAndDrop+0x274>)
 8002780:	881b      	ldrh	r3, [r3, #0]
 8002782:	425b      	negs	r3, r3
 8002784:	ee07 3a90 	vmov	s15, r3
 8002788:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800278c:	4b23      	ldr	r3, [pc, #140]	; (800281c <SimulatePullAndDrop+0x264>)
 800278e:	edc3 7a00 	vstr	s15, [r3]
					StartPulseCmdCounting = true;
 8002792:	4b27      	ldr	r3, [pc, #156]	; (8002830 <SimulatePullAndDrop+0x278>)
 8002794:	2201      	movs	r2, #1
 8002796:	701a      	strb	r2, [r3, #0]

					if (SpeedCmd != 0)
 8002798:	4b20      	ldr	r3, [pc, #128]	; (800281c <SimulatePullAndDrop+0x264>)
 800279a:	edd3 7a00 	vldr	s15, [r3]
 800279e:	eef5 7a40 	vcmp.f32	s15, #0.0
 80027a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a6:	f000 810c 	beq.w	80029c2 <SimulatePullAndDrop+0x40a>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80027aa:	4b18      	ldr	r3, [pc, #96]	; (800280c <SimulatePullAndDrop+0x254>)
 80027ac:	781b      	ldrb	r3, [r3, #0]
 80027ae:	4a1b      	ldr	r2, [pc, #108]	; (800281c <SimulatePullAndDrop+0x264>)
 80027b0:	edd2 7a00 	vldr	s15, [r2]
 80027b4:	eeb0 0a67 	vmov.f32	s0, s15
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7ff f92d 	bl	8001a18 <CalculateTimer3Period>
 80027be:	4603      	mov	r3, r0
 80027c0:	b29a      	uxth	r2, r3
 80027c2:	4b1c      	ldr	r3, [pc, #112]	; (8002834 <SimulatePullAndDrop+0x27c>)
 80027c4:	801a      	strh	r2, [r3, #0]
 80027c6:	e0fc      	b.n	80029c2 <SimulatePullAndDrop+0x40a>
 80027c8:	33333333 	.word	0x33333333
 80027cc:	c0233333 	.word	0xc0233333
 80027d0:	d2f1a9fc 	.word	0xd2f1a9fc
 80027d4:	3f50624d 	.word	0x3f50624d
 80027d8:	33333333 	.word	0x33333333
 80027dc:	40233333 	.word	0x40233333
 80027e0:	20000455 	.word	0x20000455
 80027e4:	2000044d 	.word	0x2000044d
 80027e8:	20000445 	.word	0x20000445
 80027ec:	20000454 	.word	0x20000454
 80027f0:	20000448 	.word	0x20000448
 80027f4:	2000044e 	.word	0x2000044e
 80027f8:	20000010 	.word	0x20000010
 80027fc:	2000054c 	.word	0x2000054c
 8002800:	2000045a 	.word	0x2000045a
 8002804:	200004c0 	.word	0x200004c0
 8002808:	200004cc 	.word	0x200004cc
 800280c:	20000003 	.word	0x20000003
 8002810:	200004d0 	.word	0x200004d0
 8002814:	20000453 	.word	0x20000453
 8002818:	20000498 	.word	0x20000498
 800281c:	20000514 	.word	0x20000514
 8002820:	20000470 	.word	0x20000470
 8002824:	40240000 	.word	0x40240000
 8002828:	2000046c 	.word	0x2000046c
 800282c:	200004ac 	.word	0x200004ac
 8002830:	2000044b 	.word	0x2000044b
 8002834:	20000464 	.word	0x20000464
				}
				else // Braking Stage
				{
					//AccRef =  = -9.8+PullingDecel;

					if (SpeedCmd == 0 || IsReachTargetPosition)
 8002838:	4b93      	ldr	r3, [pc, #588]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 800283a:	edd3 7a00 	vldr	s15, [r3]
 800283e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002842:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002846:	d004      	beq.n	8002852 <SimulatePullAndDrop+0x29a>
 8002848:	4b90      	ldr	r3, [pc, #576]	; (8002a8c <SimulatePullAndDrop+0x4d4>)
 800284a:	781b      	ldrb	r3, [r3, #0]
 800284c:	b2db      	uxtb	r3, r3
 800284e:	2b00      	cmp	r3, #0
 8002850:	d01a      	beq.n	8002888 <SimulatePullAndDrop+0x2d0>
					{
						StopPulseGenerating();
 8002852:	f7ff f87f 	bl	8001954 <StopPulseGenerating>

						TotalPullingPulse = PositionPulseCmd;
 8002856:	4b8e      	ldr	r3, [pc, #568]	; (8002a90 <SimulatePullAndDrop+0x4d8>)
 8002858:	681b      	ldr	r3, [r3, #0]
 800285a:	b29a      	uxth	r2, r3
 800285c:	4b8d      	ldr	r3, [pc, #564]	; (8002a94 <SimulatePullAndDrop+0x4dc>)
 800285e:	801a      	strh	r2, [r3, #0]

						PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002860:	4b8d      	ldr	r3, [pc, #564]	; (8002a98 <SimulatePullAndDrop+0x4e0>)
 8002862:	2200      	movs	r2, #0
 8002864:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd = 0;
 8002866:	4b8a      	ldr	r3, [pc, #552]	; (8002a90 <SimulatePullAndDrop+0x4d8>)
 8002868:	2200      	movs	r2, #0
 800286a:	601a      	str	r2, [r3, #0]
						TargetPosition = BottomFreeDropPulseCmd; // First, go to max-speed point
 800286c:	4b8b      	ldr	r3, [pc, #556]	; (8002a9c <SimulatePullAndDrop+0x4e4>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4a8b      	ldr	r2, [pc, #556]	; (8002aa0 <SimulatePullAndDrop+0x4e8>)
 8002872:	6013      	str	r3, [r2, #0]
						IsReachTargetPosition = false;
 8002874:	4b85      	ldr	r3, [pc, #532]	; (8002a8c <SimulatePullAndDrop+0x4d4>)
 8002876:	2200      	movs	r2, #0
 8002878:	701a      	strb	r2, [r3, #0]

						SpeedCmd = 0; // reset/ stop
 800287a:	4b83      	ldr	r3, [pc, #524]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 800287c:	f04f 0200 	mov.w	r2, #0
 8002880:	601a      	str	r2, [r3, #0]

						//StartPulling = false; // flag to finish Pulling Stage

						StartWaiting = true; // Switch to waiting stage
 8002882:	4b88      	ldr	r3, [pc, #544]	; (8002aa4 <SimulatePullAndDrop+0x4ec>)
 8002884:	2201      	movs	r2, #1
 8002886:	701a      	strb	r2, [r3, #0]
					}

					//AccRef = -9.6+PullingDecel;

					LinearGeneration(&AccRef,FlyAccSlope,-9.6+PullingDecel);
 8002888:	4b87      	ldr	r3, [pc, #540]	; (8002aa8 <SimulatePullAndDrop+0x4f0>)
 800288a:	ed93 8a00 	vldr	s16, [r3]
 800288e:	4b87      	ldr	r3, [pc, #540]	; (8002aac <SimulatePullAndDrop+0x4f4>)
 8002890:	681b      	ldr	r3, [r3, #0]
 8002892:	4618      	mov	r0, r3
 8002894:	f7fd fe58 	bl	8000548 <__aeabi_f2d>
 8002898:	a377      	add	r3, pc, #476	; (adr r3, 8002a78 <SimulatePullAndDrop+0x4c0>)
 800289a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800289e:	f7fd fcf3 	bl	8000288 <__aeabi_dsub>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4610      	mov	r0, r2
 80028a8:	4619      	mov	r1, r3
 80028aa:	f7fe f99d 	bl	8000be8 <__aeabi_d2f>
 80028ae:	4603      	mov	r3, r0
 80028b0:	ee00 3a90 	vmov	s1, r3
 80028b4:	eeb0 0a48 	vmov.f32	s0, s16
 80028b8:	487d      	ldr	r0, [pc, #500]	; (8002ab0 <SimulatePullAndDrop+0x4f8>)
 80028ba:	f7fe ffed 	bl	8001898 <LinearGeneration>

					if (IsOpenLoopControl) // Use open-loop control
 80028be:	4b7d      	ldr	r3, [pc, #500]	; (8002ab4 <SimulatePullAndDrop+0x4fc>)
 80028c0:	781b      	ldrb	r3, [r3, #0]
 80028c2:	2b00      	cmp	r3, #0
 80028c4:	d064      	beq.n	8002990 <SimulatePullAndDrop+0x3d8>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,PullingEpsilonDec,TransitionSpeed,-PullingMaxSpeed,0); // Feedforward term
						//LinearGeneration(&SpeedCmd,(AccRef + 9.6)*10/DrumRadius,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 80028c6:	4b70      	ldr	r3, [pc, #448]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fe3c 	bl	8000548 <__aeabi_f2d>
 80028d0:	4604      	mov	r4, r0
 80028d2:	460d      	mov	r5, r1
 80028d4:	4b78      	ldr	r3, [pc, #480]	; (8002ab8 <SimulatePullAndDrop+0x500>)
 80028d6:	781b      	ldrb	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe23 	bl	8000524 <__aeabi_i2d>
 80028de:	a368      	add	r3, pc, #416	; (adr r3, 8002a80 <SimulatePullAndDrop+0x4c8>)
 80028e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028e4:	f7fd fe88 	bl	80005f8 <__aeabi_dmul>
 80028e8:	4602      	mov	r2, r0
 80028ea:	460b      	mov	r3, r1
 80028ec:	4690      	mov	r8, r2
 80028ee:	4699      	mov	r9, r3
 80028f0:	4b6f      	ldr	r3, [pc, #444]	; (8002ab0 <SimulatePullAndDrop+0x4f8>)
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	4618      	mov	r0, r3
 80028f6:	f7fd fe27 	bl	8000548 <__aeabi_f2d>
 80028fa:	a35f      	add	r3, pc, #380	; (adr r3, 8002a78 <SimulatePullAndDrop+0x4c0>)
 80028fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002900:	f7fd fcc4 	bl	800028c <__adddf3>
 8002904:	4602      	mov	r2, r0
 8002906:	460b      	mov	r3, r1
 8002908:	4640      	mov	r0, r8
 800290a:	4649      	mov	r1, r9
 800290c:	f7fd fe74 	bl	80005f8 <__aeabi_dmul>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f04f 0200 	mov.w	r2, #0
 800291c:	4b67      	ldr	r3, [pc, #412]	; (8002abc <SimulatePullAndDrop+0x504>)
 800291e:	f7fd fe6b 	bl	80005f8 <__aeabi_dmul>
 8002922:	4602      	mov	r2, r0
 8002924:	460b      	mov	r3, r1
 8002926:	4690      	mov	r8, r2
 8002928:	4699      	mov	r9, r3
 800292a:	4b65      	ldr	r3, [pc, #404]	; (8002ac0 <SimulatePullAndDrop+0x508>)
 800292c:	681b      	ldr	r3, [r3, #0]
 800292e:	4618      	mov	r0, r3
 8002930:	f7fd fe0a 	bl	8000548 <__aeabi_f2d>
 8002934:	4602      	mov	r2, r0
 8002936:	460b      	mov	r3, r1
 8002938:	4640      	mov	r0, r8
 800293a:	4649      	mov	r1, r9
 800293c:	f7fd ff86 	bl	800084c <__aeabi_ddiv>
 8002940:	4602      	mov	r2, r0
 8002942:	460b      	mov	r3, r1
 8002944:	4620      	mov	r0, r4
 8002946:	4629      	mov	r1, r5
 8002948:	f7fd fca0 	bl	800028c <__adddf3>
 800294c:	4602      	mov	r2, r0
 800294e:	460b      	mov	r3, r1
 8002950:	4610      	mov	r0, r2
 8002952:	4619      	mov	r1, r3
 8002954:	f7fe f948 	bl	8000be8 <__aeabi_d2f>
 8002958:	4603      	mov	r3, r0
 800295a:	4a4b      	ldr	r2, [pc, #300]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 800295c:	6013      	str	r3, [r2, #0]
						if (SpeedCmd <= -810)
 800295e:	4b4a      	ldr	r3, [pc, #296]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 8002960:	edd3 7a00 	vldr	s15, [r3]
 8002964:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8002ac4 <SimulatePullAndDrop+0x50c>
 8002968:	eef4 7ac7 	vcmpe.f32	s15, s14
 800296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002970:	d802      	bhi.n	8002978 <SimulatePullAndDrop+0x3c0>
							SpeedCmd = -810;
 8002972:	4b45      	ldr	r3, [pc, #276]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 8002974:	4a54      	ldr	r2, [pc, #336]	; (8002ac8 <SimulatePullAndDrop+0x510>)
 8002976:	601a      	str	r2, [r3, #0]
						if (SpeedCmd >= 0)
 8002978:	4b43      	ldr	r3, [pc, #268]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 800297a:	edd3 7a00 	vldr	s15, [r3]
 800297e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002982:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002986:	db03      	blt.n	8002990 <SimulatePullAndDrop+0x3d8>
							SpeedCmd = 0;
 8002988:	4b3f      	ldr	r3, [pc, #252]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
					}

					if (SpeedCmd != 0)
 8002990:	4b3d      	ldr	r3, [pc, #244]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 8002992:	edd3 7a00 	vldr	s15, [r3]
 8002996:	eef5 7a40 	vcmp.f32	s15, #0.0
 800299a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800299e:	d010      	beq.n	80029c2 <SimulatePullAndDrop+0x40a>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80029a0:	4b4a      	ldr	r3, [pc, #296]	; (8002acc <SimulatePullAndDrop+0x514>)
 80029a2:	781b      	ldrb	r3, [r3, #0]
 80029a4:	4a38      	ldr	r2, [pc, #224]	; (8002a88 <SimulatePullAndDrop+0x4d0>)
 80029a6:	edd2 7a00 	vldr	s15, [r2]
 80029aa:	eeb0 0a67 	vmov.f32	s0, s15
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7ff f832 	bl	8001a18 <CalculateTimer3Period>
 80029b4:	4603      	mov	r3, r0
 80029b6:	b29a      	uxth	r2, r3
 80029b8:	4b45      	ldr	r3, [pc, #276]	; (8002ad0 <SimulatePullAndDrop+0x518>)
 80029ba:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 80029bc:	4b45      	ldr	r3, [pc, #276]	; (8002ad4 <SimulatePullAndDrop+0x51c>)
 80029be:	2201      	movs	r2, #1
 80029c0:	701a      	strb	r2, [r3, #0]
//		// Wait for some time before dropping

// BEGIN Delay before dropping

//
		if (StartWaiting)
 80029c2:	4b38      	ldr	r3, [pc, #224]	; (8002aa4 <SimulatePullAndDrop+0x4ec>)
 80029c4:	781b      	ldrb	r3, [r3, #0]
 80029c6:	2b00      	cmp	r3, #0
 80029c8:	d029      	beq.n	8002a1e <SimulatePullAndDrop+0x466>
		{
			if (WaitingMiliSecond(StoppingTime))
 80029ca:	4b43      	ldr	r3, [pc, #268]	; (8002ad8 <SimulatePullAndDrop+0x520>)
 80029cc:	881b      	ldrh	r3, [r3, #0]
 80029ce:	4618      	mov	r0, r3
 80029d0:	f7fe fffc 	bl	80019cc <WaitingMiliSecond>
 80029d4:	4603      	mov	r3, r0
 80029d6:	2b00      	cmp	r3, #0
 80029d8:	d021      	beq.n	8002a1e <SimulatePullAndDrop+0x466>
			{
				StartWaiting = false;
 80029da:	4b32      	ldr	r3, [pc, #200]	; (8002aa4 <SimulatePullAndDrop+0x4ec>)
 80029dc:	2200      	movs	r2, #0
 80029de:	701a      	strb	r2, [r3, #0]

				PreAccRef = AccRef;
 80029e0:	4b33      	ldr	r3, [pc, #204]	; (8002ab0 <SimulatePullAndDrop+0x4f8>)
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a3d      	ldr	r2, [pc, #244]	; (8002adc <SimulatePullAndDrop+0x524>)
 80029e6:	6013      	str	r3, [r2, #0]

				StartDropping = true;
 80029e8:	4b3d      	ldr	r3, [pc, #244]	; (8002ae0 <SimulatePullAndDrop+0x528>)
 80029ea:	2201      	movs	r2, #1
 80029ec:	701a      	strb	r2, [r3, #0]
				StartBraking = false;
 80029ee:	4b3d      	ldr	r3, [pc, #244]	; (8002ae4 <SimulatePullAndDrop+0x52c>)
 80029f0:	2200      	movs	r2, #0
 80029f2:	701a      	strb	r2, [r3, #0]
				Direction = true; // variable to show the direction, false = move up, true = move down
 80029f4:	4b3c      	ldr	r3, [pc, #240]	; (8002ae8 <SimulatePullAndDrop+0x530>)
 80029f6:	2201      	movs	r2, #1
 80029f8:	701a      	strb	r2, [r3, #0]
				StartPulling = false;
 80029fa:	4b3c      	ldr	r3, [pc, #240]	; (8002aec <SimulatePullAndDrop+0x534>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	701a      	strb	r2, [r3, #0]
				PositionPulseCmd = 0;
 8002a00:	4b23      	ldr	r3, [pc, #140]	; (8002a90 <SimulatePullAndDrop+0x4d8>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	601a      	str	r2, [r3, #0]
				StartPulseCmdCounting = false;
 8002a06:	4b33      	ldr	r3, [pc, #204]	; (8002ad4 <SimulatePullAndDrop+0x51c>)
 8002a08:	2200      	movs	r2, #0
 8002a0a:	701a      	strb	r2, [r3, #0]
				PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002a0c:	4b22      	ldr	r3, [pc, #136]	; (8002a98 <SimulatePullAndDrop+0x4e0>)
 8002a0e:	2200      	movs	r2, #0
 8002a10:	701a      	strb	r2, [r3, #0]

				//InitializeRunning(DroppingMode);

				TargetPosition = BottomFreeDropPulseCmd; // First, go to max-speed point
 8002a12:	4b22      	ldr	r3, [pc, #136]	; (8002a9c <SimulatePullAndDrop+0x4e4>)
 8002a14:	681b      	ldr	r3, [r3, #0]
 8002a16:	4a22      	ldr	r2, [pc, #136]	; (8002aa0 <SimulatePullAndDrop+0x4e8>)
 8002a18:	6013      	str	r3, [r2, #0]
				StartPulseGenerating();
 8002a1a:	f7fe ffb9 	bl	8001990 <StartPulseGenerating>
		}

// END WAITING

		// BEGIN DROPPING TASK
		if (StartDropping && !StartPulling)
 8002a1e:	4b30      	ldr	r3, [pc, #192]	; (8002ae0 <SimulatePullAndDrop+0x528>)
 8002a20:	781b      	ldrb	r3, [r3, #0]
 8002a22:	2b00      	cmp	r3, #0
 8002a24:	f000 81c5 	beq.w	8002db2 <SimulatePullAndDrop+0x7fa>
 8002a28:	4b30      	ldr	r3, [pc, #192]	; (8002aec <SimulatePullAndDrop+0x534>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	f083 0301 	eor.w	r3, r3, #1
 8002a30:	b2db      	uxtb	r3, r3
 8002a32:	2b00      	cmp	r3, #0
 8002a34:	f000 81bd 	beq.w	8002db2 <SimulatePullAndDrop+0x7fa>
		{
				// ACCLERATING DROPPING STAGE
				if (!StartBraking) // Accelerating Stage
 8002a38:	4b2a      	ldr	r3, [pc, #168]	; (8002ae4 <SimulatePullAndDrop+0x52c>)
 8002a3a:	781b      	ldrb	r3, [r3, #0]
 8002a3c:	f083 0301 	eor.w	r3, r3, #1
 8002a40:	b2db      	uxtb	r3, r3
 8002a42:	2b00      	cmp	r3, #0
 8002a44:	f000 810e 	beq.w	8002c64 <SimulatePullAndDrop+0x6ac>
				{
					if(MotorDriver) // HIGEN Driver
 8002a48:	4b20      	ldr	r3, [pc, #128]	; (8002acc <SimulatePullAndDrop+0x514>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	d04f      	beq.n	8002af0 <SimulatePullAndDrop+0x538>
					{
						if ( abs(8*PositionPulseCmd) > abs(TargetPosition)) // 8 is th gear ratio
 8002a50:	4b0f      	ldr	r3, [pc, #60]	; (8002a90 <SimulatePullAndDrop+0x4d8>)
 8002a52:	681b      	ldr	r3, [r3, #0]
 8002a54:	00db      	lsls	r3, r3, #3
 8002a56:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002a5a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002a5e:	4b10      	ldr	r3, [pc, #64]	; (8002aa0 <SimulatePullAndDrop+0x4e8>)
 8002a60:	681b      	ldr	r3, [r3, #0]
 8002a62:	2b00      	cmp	r3, #0
 8002a64:	bfb8      	it	lt
 8002a66:	425b      	neglt	r3, r3
 8002a68:	429a      	cmp	r2, r3
 8002a6a:	dd51      	ble.n	8002b10 <SimulatePullAndDrop+0x558>
						{
							IsReachTargetPosition = true;
 8002a6c:	4b07      	ldr	r3, [pc, #28]	; (8002a8c <SimulatePullAndDrop+0x4d4>)
 8002a6e:	2201      	movs	r2, #1
 8002a70:	701a      	strb	r2, [r3, #0]
 8002a72:	e04d      	b.n	8002b10 <SimulatePullAndDrop+0x558>
 8002a74:	f3af 8000 	nop.w
 8002a78:	33333333 	.word	0x33333333
 8002a7c:	40233333 	.word	0x40233333
 8002a80:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a84:	3f50624d 	.word	0x3f50624d
 8002a88:	20000514 	.word	0x20000514
 8002a8c:	20000453 	.word	0x20000453
 8002a90:	200004d0 	.word	0x200004d0
 8002a94:	2000046a 	.word	0x2000046a
 8002a98:	2000045a 	.word	0x2000045a
 8002a9c:	200004c4 	.word	0x200004c4
 8002aa0:	200004cc 	.word	0x200004cc
 8002aa4:	20000452 	.word	0x20000452
 8002aa8:	20000540 	.word	0x20000540
 8002aac:	2000049c 	.word	0x2000049c
 8002ab0:	20000010 	.word	0x20000010
 8002ab4:	20000004 	.word	0x20000004
 8002ab8:	20000470 	.word	0x20000470
 8002abc:	40240000 	.word	0x40240000
 8002ac0:	2000046c 	.word	0x2000046c
 8002ac4:	c44a8000 	.word	0xc44a8000
 8002ac8:	c44a8000 	.word	0xc44a8000
 8002acc:	20000003 	.word	0x20000003
 8002ad0:	20000464 	.word	0x20000464
 8002ad4:	2000044b 	.word	0x2000044b
 8002ad8:	20000472 	.word	0x20000472
 8002adc:	2000054c 	.word	0x2000054c
 8002ae0:	20000445 	.word	0x20000445
 8002ae4:	2000044e 	.word	0x2000044e
 8002ae8:	20000448 	.word	0x20000448
 8002aec:	2000044d 	.word	0x2000044d
						}
					}
					else // ASDA Driver
					{
						if ( abs(PositionPulseCmd) > abs(TargetPosition))
 8002af0:	4bb9      	ldr	r3, [pc, #740]	; (8002dd8 <SimulatePullAndDrop+0x820>)
 8002af2:	681b      	ldr	r3, [r3, #0]
 8002af4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002af8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002afc:	4bb7      	ldr	r3, [pc, #732]	; (8002ddc <SimulatePullAndDrop+0x824>)
 8002afe:	681b      	ldr	r3, [r3, #0]
 8002b00:	2b00      	cmp	r3, #0
 8002b02:	bfb8      	it	lt
 8002b04:	425b      	neglt	r3, r3
 8002b06:	429a      	cmp	r2, r3
 8002b08:	dd02      	ble.n	8002b10 <SimulatePullAndDrop+0x558>
						{
							IsReachTargetPosition = true;
 8002b0a:	4bb5      	ldr	r3, [pc, #724]	; (8002de0 <SimulatePullAndDrop+0x828>)
 8002b0c:	2201      	movs	r2, #1
 8002b0e:	701a      	strb	r2, [r3, #0]
						}
					}
					if (IsReachTargetPosition) // Reach dropping distance
 8002b10:	4bb3      	ldr	r3, [pc, #716]	; (8002de0 <SimulatePullAndDrop+0x828>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	b2db      	uxtb	r3, r3
 8002b16:	2b00      	cmp	r3, #0
 8002b18:	d00f      	beq.n	8002b3a <SimulatePullAndDrop+0x582>
					{
						StartBraking = true;
 8002b1a:	4bb2      	ldr	r3, [pc, #712]	; (8002de4 <SimulatePullAndDrop+0x82c>)
 8002b1c:	2201      	movs	r2, #1
 8002b1e:	701a      	strb	r2, [r3, #0]

						StartPulseCmdCounting = false;
 8002b20:	4bb1      	ldr	r3, [pc, #708]	; (8002de8 <SimulatePullAndDrop+0x830>)
 8002b22:	2200      	movs	r2, #0
 8002b24:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd = 0;
 8002b26:	4bac      	ldr	r3, [pc, #688]	; (8002dd8 <SimulatePullAndDrop+0x820>)
 8002b28:	2200      	movs	r2, #0
 8002b2a:	601a      	str	r2, [r3, #0]
						//TargetPosition = 0;

						TargetPosition = DroppingDecelPulseCmd;
 8002b2c:	4baf      	ldr	r3, [pc, #700]	; (8002dec <SimulatePullAndDrop+0x834>)
 8002b2e:	681b      	ldr	r3, [r3, #0]
 8002b30:	4aaa      	ldr	r2, [pc, #680]	; (8002ddc <SimulatePullAndDrop+0x824>)
 8002b32:	6013      	str	r3, [r2, #0]
						IsReachTargetPosition = false;
 8002b34:	4baa      	ldr	r3, [pc, #680]	; (8002de0 <SimulatePullAndDrop+0x828>)
 8002b36:	2200      	movs	r2, #0
 8002b38:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6+DroppingAccel;
 8002b3a:	4bad      	ldr	r3, [pc, #692]	; (8002df0 <SimulatePullAndDrop+0x838>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	4618      	mov	r0, r3
 8002b40:	f7fd fd02 	bl	8000548 <__aeabi_f2d>
 8002b44:	a39e      	add	r3, pc, #632	; (adr r3, 8002dc0 <SimulatePullAndDrop+0x808>)
 8002b46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b4a:	f7fd fb9d 	bl	8000288 <__aeabi_dsub>
 8002b4e:	4602      	mov	r2, r0
 8002b50:	460b      	mov	r3, r1
 8002b52:	4610      	mov	r0, r2
 8002b54:	4619      	mov	r1, r3
 8002b56:	f7fe f847 	bl	8000be8 <__aeabi_d2f>
 8002b5a:	4603      	mov	r3, r0
 8002b5c:	4aa5      	ldr	r2, [pc, #660]	; (8002df4 <SimulatePullAndDrop+0x83c>)
 8002b5e:	6013      	str	r3, [r2, #0]

					if (IsOpenLoopControl) // Use open-loop control
 8002b60:	4ba5      	ldr	r3, [pc, #660]	; (8002df8 <SimulatePullAndDrop+0x840>)
 8002b62:	781b      	ldrb	r3, [r3, #0]
 8002b64:	2b00      	cmp	r3, #0
 8002b66:	d062      	beq.n	8002c2e <SimulatePullAndDrop+0x676>
					{
						SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8002b68:	4ba4      	ldr	r3, [pc, #656]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002b6a:	681b      	ldr	r3, [r3, #0]
 8002b6c:	4618      	mov	r0, r3
 8002b6e:	f7fd fceb 	bl	8000548 <__aeabi_f2d>
 8002b72:	4604      	mov	r4, r0
 8002b74:	460d      	mov	r5, r1
 8002b76:	4ba2      	ldr	r3, [pc, #648]	; (8002e00 <SimulatePullAndDrop+0x848>)
 8002b78:	781b      	ldrb	r3, [r3, #0]
 8002b7a:	4618      	mov	r0, r3
 8002b7c:	f7fd fcd2 	bl	8000524 <__aeabi_i2d>
 8002b80:	a391      	add	r3, pc, #580	; (adr r3, 8002dc8 <SimulatePullAndDrop+0x810>)
 8002b82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b86:	f7fd fd37 	bl	80005f8 <__aeabi_dmul>
 8002b8a:	4602      	mov	r2, r0
 8002b8c:	460b      	mov	r3, r1
 8002b8e:	4690      	mov	r8, r2
 8002b90:	4699      	mov	r9, r3
 8002b92:	4b98      	ldr	r3, [pc, #608]	; (8002df4 <SimulatePullAndDrop+0x83c>)
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	4618      	mov	r0, r3
 8002b98:	f7fd fcd6 	bl	8000548 <__aeabi_f2d>
 8002b9c:	a388      	add	r3, pc, #544	; (adr r3, 8002dc0 <SimulatePullAndDrop+0x808>)
 8002b9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ba2:	f7fd fb73 	bl	800028c <__adddf3>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4640      	mov	r0, r8
 8002bac:	4649      	mov	r1, r9
 8002bae:	f7fd fd23 	bl	80005f8 <__aeabi_dmul>
 8002bb2:	4602      	mov	r2, r0
 8002bb4:	460b      	mov	r3, r1
 8002bb6:	4610      	mov	r0, r2
 8002bb8:	4619      	mov	r1, r3
 8002bba:	f04f 0200 	mov.w	r2, #0
 8002bbe:	4b91      	ldr	r3, [pc, #580]	; (8002e04 <SimulatePullAndDrop+0x84c>)
 8002bc0:	f7fd fd1a 	bl	80005f8 <__aeabi_dmul>
 8002bc4:	4602      	mov	r2, r0
 8002bc6:	460b      	mov	r3, r1
 8002bc8:	4690      	mov	r8, r2
 8002bca:	4699      	mov	r9, r3
 8002bcc:	4b8e      	ldr	r3, [pc, #568]	; (8002e08 <SimulatePullAndDrop+0x850>)
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	4618      	mov	r0, r3
 8002bd2:	f7fd fcb9 	bl	8000548 <__aeabi_f2d>
 8002bd6:	4602      	mov	r2, r0
 8002bd8:	460b      	mov	r3, r1
 8002bda:	4640      	mov	r0, r8
 8002bdc:	4649      	mov	r1, r9
 8002bde:	f7fd fe35 	bl	800084c <__aeabi_ddiv>
 8002be2:	4602      	mov	r2, r0
 8002be4:	460b      	mov	r3, r1
 8002be6:	4620      	mov	r0, r4
 8002be8:	4629      	mov	r1, r5
 8002bea:	f7fd fb4f 	bl	800028c <__adddf3>
 8002bee:	4602      	mov	r2, r0
 8002bf0:	460b      	mov	r3, r1
 8002bf2:	4610      	mov	r0, r2
 8002bf4:	4619      	mov	r1, r3
 8002bf6:	f7fd fff7 	bl	8000be8 <__aeabi_d2f>
 8002bfa:	4603      	mov	r3, r0
 8002bfc:	4a7f      	ldr	r2, [pc, #508]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002bfe:	6013      	str	r3, [r2, #0]
						if (SpeedCmd >= DroppingMaxSpeed) // Saturation
 8002c00:	4b82      	ldr	r3, [pc, #520]	; (8002e0c <SimulatePullAndDrop+0x854>)
 8002c02:	881b      	ldrh	r3, [r3, #0]
 8002c04:	ee07 3a90 	vmov	s15, r3
 8002c08:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002c0c:	4b7b      	ldr	r3, [pc, #492]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002c16:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c1a:	d808      	bhi.n	8002c2e <SimulatePullAndDrop+0x676>
							SpeedCmd = DroppingMaxSpeed;
 8002c1c:	4b7b      	ldr	r3, [pc, #492]	; (8002e0c <SimulatePullAndDrop+0x854>)
 8002c1e:	881b      	ldrh	r3, [r3, #0]
 8002c20:	ee07 3a90 	vmov	s15, r3
 8002c24:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002c28:	4b74      	ldr	r3, [pc, #464]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002c2a:	edc3 7a00 	vstr	s15, [r3]
					}

					if (SpeedCmd != 0)
 8002c2e:	4b73      	ldr	r3, [pc, #460]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002c30:	edd3 7a00 	vldr	s15, [r3]
 8002c34:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c38:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3c:	f000 80b9 	beq.w	8002db2 <SimulatePullAndDrop+0x7fa>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002c40:	4b73      	ldr	r3, [pc, #460]	; (8002e10 <SimulatePullAndDrop+0x858>)
 8002c42:	781b      	ldrb	r3, [r3, #0]
 8002c44:	4a6d      	ldr	r2, [pc, #436]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002c46:	edd2 7a00 	vldr	s15, [r2]
 8002c4a:	eeb0 0a67 	vmov.f32	s0, s15
 8002c4e:	4618      	mov	r0, r3
 8002c50:	f7fe fee2 	bl	8001a18 <CalculateTimer3Period>
 8002c54:	4603      	mov	r3, r0
 8002c56:	b29a      	uxth	r2, r3
 8002c58:	4b6e      	ldr	r3, [pc, #440]	; (8002e14 <SimulatePullAndDrop+0x85c>)
 8002c5a:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 8002c5c:	4b62      	ldr	r3, [pc, #392]	; (8002de8 <SimulatePullAndDrop+0x830>)
 8002c5e:	2201      	movs	r2, #1
 8002c60:	701a      	strb	r2, [r3, #0]
 8002c62:	e0a6      	b.n	8002db2 <SimulatePullAndDrop+0x7fa>

				// BEGIN BRAKING STAGE
				else
				{

					AccRef = -9.6-DroppingDecel;
 8002c64:	4b6c      	ldr	r3, [pc, #432]	; (8002e18 <SimulatePullAndDrop+0x860>)
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	4618      	mov	r0, r3
 8002c6a:	f7fd fc6d 	bl	8000548 <__aeabi_f2d>
 8002c6e:	4602      	mov	r2, r0
 8002c70:	460b      	mov	r3, r1
 8002c72:	a157      	add	r1, pc, #348	; (adr r1, 8002dd0 <SimulatePullAndDrop+0x818>)
 8002c74:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c78:	f7fd fb06 	bl	8000288 <__aeabi_dsub>
 8002c7c:	4602      	mov	r2, r0
 8002c7e:	460b      	mov	r3, r1
 8002c80:	4610      	mov	r0, r2
 8002c82:	4619      	mov	r1, r3
 8002c84:	f7fd ffb0 	bl	8000be8 <__aeabi_d2f>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	4a5a      	ldr	r2, [pc, #360]	; (8002df4 <SimulatePullAndDrop+0x83c>)
 8002c8c:	6013      	str	r3, [r2, #0]
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8002c8e:	4b5b      	ldr	r3, [pc, #364]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002c90:	681b      	ldr	r3, [r3, #0]
 8002c92:	4618      	mov	r0, r3
 8002c94:	f7fd fc58 	bl	8000548 <__aeabi_f2d>
 8002c98:	4604      	mov	r4, r0
 8002c9a:	460d      	mov	r5, r1
 8002c9c:	4b58      	ldr	r3, [pc, #352]	; (8002e00 <SimulatePullAndDrop+0x848>)
 8002c9e:	781b      	ldrb	r3, [r3, #0]
 8002ca0:	4618      	mov	r0, r3
 8002ca2:	f7fd fc3f 	bl	8000524 <__aeabi_i2d>
 8002ca6:	a348      	add	r3, pc, #288	; (adr r3, 8002dc8 <SimulatePullAndDrop+0x810>)
 8002ca8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cac:	f7fd fca4 	bl	80005f8 <__aeabi_dmul>
 8002cb0:	4602      	mov	r2, r0
 8002cb2:	460b      	mov	r3, r1
 8002cb4:	4690      	mov	r8, r2
 8002cb6:	4699      	mov	r9, r3
 8002cb8:	4b4e      	ldr	r3, [pc, #312]	; (8002df4 <SimulatePullAndDrop+0x83c>)
 8002cba:	681b      	ldr	r3, [r3, #0]
 8002cbc:	4618      	mov	r0, r3
 8002cbe:	f7fd fc43 	bl	8000548 <__aeabi_f2d>
 8002cc2:	a33f      	add	r3, pc, #252	; (adr r3, 8002dc0 <SimulatePullAndDrop+0x808>)
 8002cc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cc8:	f7fd fae0 	bl	800028c <__adddf3>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4640      	mov	r0, r8
 8002cd2:	4649      	mov	r1, r9
 8002cd4:	f7fd fc90 	bl	80005f8 <__aeabi_dmul>
 8002cd8:	4602      	mov	r2, r0
 8002cda:	460b      	mov	r3, r1
 8002cdc:	4610      	mov	r0, r2
 8002cde:	4619      	mov	r1, r3
 8002ce0:	f04f 0200 	mov.w	r2, #0
 8002ce4:	4b47      	ldr	r3, [pc, #284]	; (8002e04 <SimulatePullAndDrop+0x84c>)
 8002ce6:	f7fd fc87 	bl	80005f8 <__aeabi_dmul>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4690      	mov	r8, r2
 8002cf0:	4699      	mov	r9, r3
 8002cf2:	4b45      	ldr	r3, [pc, #276]	; (8002e08 <SimulatePullAndDrop+0x850>)
 8002cf4:	681b      	ldr	r3, [r3, #0]
 8002cf6:	4618      	mov	r0, r3
 8002cf8:	f7fd fc26 	bl	8000548 <__aeabi_f2d>
 8002cfc:	4602      	mov	r2, r0
 8002cfe:	460b      	mov	r3, r1
 8002d00:	4640      	mov	r0, r8
 8002d02:	4649      	mov	r1, r9
 8002d04:	f7fd fda2 	bl	800084c <__aeabi_ddiv>
 8002d08:	4602      	mov	r2, r0
 8002d0a:	460b      	mov	r3, r1
 8002d0c:	4620      	mov	r0, r4
 8002d0e:	4629      	mov	r1, r5
 8002d10:	f7fd fabc 	bl	800028c <__adddf3>
 8002d14:	4602      	mov	r2, r0
 8002d16:	460b      	mov	r3, r1
 8002d18:	4610      	mov	r0, r2
 8002d1a:	4619      	mov	r1, r3
 8002d1c:	f7fd ff64 	bl	8000be8 <__aeabi_d2f>
 8002d20:	4603      	mov	r3, r0
 8002d22:	4a36      	ldr	r2, [pc, #216]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002d24:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= 0)
 8002d26:	4b35      	ldr	r3, [pc, #212]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002d28:	edd3 7a00 	vldr	s15, [r3]
 8002d2c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d34:	d803      	bhi.n	8002d3e <SimulatePullAndDrop+0x786>
						SpeedCmd = 0;
 8002d36:	4b31      	ldr	r3, [pc, #196]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002d38:	f04f 0200 	mov.w	r2, #0
 8002d3c:	601a      	str	r2, [r3, #0]

					if (SpeedCmd != 0)
 8002d3e:	4b2f      	ldr	r3, [pc, #188]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002d40:	edd3 7a00 	vldr	s15, [r3]
 8002d44:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d48:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d4c:	d010      	beq.n	8002d70 <SimulatePullAndDrop+0x7b8>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002d4e:	4b30      	ldr	r3, [pc, #192]	; (8002e10 <SimulatePullAndDrop+0x858>)
 8002d50:	781b      	ldrb	r3, [r3, #0]
 8002d52:	4a2a      	ldr	r2, [pc, #168]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002d54:	edd2 7a00 	vldr	s15, [r2]
 8002d58:	eeb0 0a67 	vmov.f32	s0, s15
 8002d5c:	4618      	mov	r0, r3
 8002d5e:	f7fe fe5b 	bl	8001a18 <CalculateTimer3Period>
 8002d62:	4603      	mov	r3, r0
 8002d64:	b29a      	uxth	r2, r3
 8002d66:	4b2b      	ldr	r3, [pc, #172]	; (8002e14 <SimulatePullAndDrop+0x85c>)
 8002d68:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 8002d6a:	4b1f      	ldr	r3, [pc, #124]	; (8002de8 <SimulatePullAndDrop+0x830>)
 8002d6c:	2201      	movs	r2, #1
 8002d6e:	701a      	strb	r2, [r3, #0]
					}

					if (SpeedCmd <= 0 || IsReachTargetPosition) // Stop braking
 8002d70:	4b22      	ldr	r3, [pc, #136]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002d72:	edd3 7a00 	vldr	s15, [r3]
 8002d76:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d7e:	d904      	bls.n	8002d8a <SimulatePullAndDrop+0x7d2>
 8002d80:	4b17      	ldr	r3, [pc, #92]	; (8002de0 <SimulatePullAndDrop+0x828>)
 8002d82:	781b      	ldrb	r3, [r3, #0]
 8002d84:	b2db      	uxtb	r3, r3
 8002d86:	2b00      	cmp	r3, #0
 8002d88:	d013      	beq.n	8002db2 <SimulatePullAndDrop+0x7fa>
					{
						//RunningTime = 0;
						SpeedCmd = 0; // reset/ stop
 8002d8a:	4b1c      	ldr	r3, [pc, #112]	; (8002dfc <SimulatePullAndDrop+0x844>)
 8002d8c:	f04f 0200 	mov.w	r2, #0
 8002d90:	601a      	str	r2, [r3, #0]

						AccRef = - 9.6;
 8002d92:	4b18      	ldr	r3, [pc, #96]	; (8002df4 <SimulatePullAndDrop+0x83c>)
 8002d94:	4a21      	ldr	r2, [pc, #132]	; (8002e1c <SimulatePullAndDrop+0x864>)
 8002d96:	601a      	str	r2, [r3, #0]

						StartDropping = false; //
 8002d98:	4b21      	ldr	r3, [pc, #132]	; (8002e20 <SimulatePullAndDrop+0x868>)
 8002d9a:	2200      	movs	r2, #0
 8002d9c:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 8002d9e:	4b11      	ldr	r3, [pc, #68]	; (8002de4 <SimulatePullAndDrop+0x82c>)
 8002da0:	2200      	movs	r2, #0
 8002da2:	701a      	strb	r2, [r3, #0]
						StopPulseGenerating();
 8002da4:	f7fe fdd6 	bl	8001954 <StopPulseGenerating>
						CompleteRunning = true;
 8002da8:	4b1e      	ldr	r3, [pc, #120]	; (8002e24 <SimulatePullAndDrop+0x86c>)
 8002daa:	2201      	movs	r2, #1
 8002dac:	701a      	strb	r2, [r3, #0]
						return true;
 8002dae:	2301      	movs	r3, #1
 8002db0:	e000      	b.n	8002db4 <SimulatePullAndDrop+0x7fc>
					}
				}
				// END BRAKING STAGE
		}
		// END DROPPING TASK.
		return false;
 8002db2:	2300      	movs	r3, #0
	}
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	46bd      	mov	sp, r7
 8002db8:	ecbd 8b02 	vpop	{d8}
 8002dbc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dc0:	33333333 	.word	0x33333333
 8002dc4:	40233333 	.word	0x40233333
 8002dc8:	d2f1a9fc 	.word	0xd2f1a9fc
 8002dcc:	3f50624d 	.word	0x3f50624d
 8002dd0:	33333333 	.word	0x33333333
 8002dd4:	c0233333 	.word	0xc0233333
 8002dd8:	200004d0 	.word	0x200004d0
 8002ddc:	200004cc 	.word	0x200004cc
 8002de0:	20000453 	.word	0x20000453
 8002de4:	2000044e 	.word	0x2000044e
 8002de8:	2000044b 	.word	0x2000044b
 8002dec:	2000048c 	.word	0x2000048c
 8002df0:	20000478 	.word	0x20000478
 8002df4:	20000010 	.word	0x20000010
 8002df8:	20000004 	.word	0x20000004
 8002dfc:	20000514 	.word	0x20000514
 8002e00:	20000470 	.word	0x20000470
 8002e04:	40240000 	.word	0x40240000
 8002e08:	2000046c 	.word	0x2000046c
 8002e0c:	20000490 	.word	0x20000490
 8002e10:	20000003 	.word	0x20000003
 8002e14:	20000464 	.word	0x20000464
 8002e18:	2000047c 	.word	0x2000047c
 8002e1c:	c119999a 	.word	0xc119999a
 8002e20:	20000445 	.word	0x20000445
 8002e24:	20000455 	.word	0x20000455

08002e28 <PullAndDrop>:
bool PullAndDrop ()
{
 8002e28:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e2c:	ed2d 8b02 	vpush	{d8}
 8002e30:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 8002e32:	4bb1      	ldr	r3, [pc, #708]	; (80030f8 <PullAndDrop+0x2d0>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	2b00      	cmp	r3, #0
 8002e38:	d002      	beq.n	8002e40 <PullAndDrop+0x18>
	{
		return true;
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	f000 bc58 	b.w	80036f0 <PullAndDrop+0x8c8>
	}
	else
	{
		// BEGIN PULLING UP
		if (StartPulling && !StartDropping) // Pulling Task
 8002e40:	4bae      	ldr	r3, [pc, #696]	; (80030fc <PullAndDrop+0x2d4>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	2b00      	cmp	r3, #0
 8002e46:	f000 8257 	beq.w	80032f8 <PullAndDrop+0x4d0>
 8002e4a:	4bad      	ldr	r3, [pc, #692]	; (8003100 <PullAndDrop+0x2d8>)
 8002e4c:	781b      	ldrb	r3, [r3, #0]
 8002e4e:	f083 0301 	eor.w	r3, r3, #1
 8002e52:	b2db      	uxtb	r3, r3
 8002e54:	2b00      	cmp	r3, #0
 8002e56:	f000 824f 	beq.w	80032f8 <PullAndDrop+0x4d0>
		{
			// First Pulling up including going to the initial position
			if (!StartAccleratePulling)
 8002e5a:	4baa      	ldr	r3, [pc, #680]	; (8003104 <PullAndDrop+0x2dc>)
 8002e5c:	781b      	ldrb	r3, [r3, #0]
 8002e5e:	f083 0301 	eor.w	r3, r3, #1
 8002e62:	b2db      	uxtb	r3, r3
 8002e64:	2b00      	cmp	r3, #0
 8002e66:	d030      	beq.n	8002eca <PullAndDrop+0xa2>
			{
				// Going to the initial position first
				// Direction = true => going down
				// Direction = false => Going up
				if (CheckGoingToRefPosition(Direction, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 8002e68:	4ba7      	ldr	r3, [pc, #668]	; (8003108 <PullAndDrop+0x2e0>)
 8002e6a:	781b      	ldrb	r3, [r3, #0]
 8002e6c:	4aa7      	ldr	r2, [pc, #668]	; (800310c <PullAndDrop+0x2e4>)
 8002e6e:	6812      	ldr	r2, [r2, #0]
 8002e70:	4611      	mov	r1, r2
 8002e72:	4618      	mov	r0, r3
 8002e74:	f7fe fe5c 	bl	8001b30 <CheckGoingToRefPosition>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	d022      	beq.n	8002ec4 <PullAndDrop+0x9c>
				{
					//BottomPosition = ObjectPosition;
					if (WaitingMiliSecond(5000)) // Wait for 5 seconds = 5000ms
 8002e7e:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e82:	f7fe fda3 	bl	80019cc <WaitingMiliSecond>
 8002e86:	4603      	mov	r3, r0
 8002e88:	2b00      	cmp	r3, #0
 8002e8a:	d018      	beq.n	8002ebe <PullAndDrop+0x96>
					{
						StartAccleratePulling = true; // turn on flag to start acclerating pulling
 8002e8c:	4b9d      	ldr	r3, [pc, #628]	; (8003104 <PullAndDrop+0x2dc>)
 8002e8e:	2201      	movs	r2, #1
 8002e90:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up to count the position pulse cmd
 8002e92:	4b9d      	ldr	r3, [pc, #628]	; (8003108 <PullAndDrop+0x2e0>)
 8002e94:	2200      	movs	r2, #0
 8002e96:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 8002e98:	4b9d      	ldr	r3, [pc, #628]	; (8003110 <PullAndDrop+0x2e8>)
 8002e9a:	2200      	movs	r2, #0
 8002e9c:	701a      	strb	r2, [r3, #0]

						PreAccRef = AccRef;
 8002e9e:	4b9d      	ldr	r3, [pc, #628]	; (8003114 <PullAndDrop+0x2ec>)
 8002ea0:	681b      	ldr	r3, [r3, #0]
 8002ea2:	4a9d      	ldr	r2, [pc, #628]	; (8003118 <PullAndDrop+0x2f0>)
 8002ea4:	6013      	str	r3, [r2, #0]

						PRIsToggled = true; // true = pulling up.
 8002ea6:	4b9d      	ldr	r3, [pc, #628]	; (800311c <PullAndDrop+0x2f4>)
 8002ea8:	2201      	movs	r2, #1
 8002eaa:	701a      	strb	r2, [r3, #0]
						DisableSTOP(); // Disable the stop
 8002eac:	f7fe f9dc 	bl	8001268 <DisableSTOP>
						StartPulseGenerating();
 8002eb0:	f7fe fd6e 	bl	8001990 <StartPulseGenerating>

						TargetPosition = FlyingPosPulseCmd; // First, go to max-speed point
 8002eb4:	4b9a      	ldr	r3, [pc, #616]	; (8003120 <PullAndDrop+0x2f8>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4a9a      	ldr	r2, [pc, #616]	; (8003124 <PullAndDrop+0x2fc>)
 8002eba:	6013      	str	r3, [r2, #0]
 8002ebc:	e21c      	b.n	80032f8 <PullAndDrop+0x4d0>
					}
					else return false;
 8002ebe:	2300      	movs	r3, #0
 8002ec0:	f000 bc16 	b.w	80036f0 <PullAndDrop+0x8c8>
				}
				else return false;
 8002ec4:	2300      	movs	r3, #0
 8002ec6:	f000 bc13 	b.w	80036f0 <PullAndDrop+0x8c8>
			}
			else // Start accelerated pulling
			{
				if (!StartBraking) // Accelerating Stage
 8002eca:	4b91      	ldr	r3, [pc, #580]	; (8003110 <PullAndDrop+0x2e8>)
 8002ecc:	781b      	ldrb	r3, [r3, #0]
 8002ece:	f083 0301 	eor.w	r3, r3, #1
 8002ed2:	b2db      	uxtb	r3, r3
 8002ed4:	2b00      	cmp	r3, #0
 8002ed6:	f000 8143 	beq.w	8003160 <PullAndDrop+0x338>
				{
					if(MotorDriver) // HIGEN Driver
 8002eda:	4b93      	ldr	r3, [pc, #588]	; (8003128 <PullAndDrop+0x300>)
 8002edc:	781b      	ldrb	r3, [r3, #0]
 8002ede:	2b00      	cmp	r3, #0
 8002ee0:	d011      	beq.n	8002f06 <PullAndDrop+0xde>
					{
						if ( abs(8*PositionPulseCmd) > abs(TargetPosition)) // 8 is th gear ratio
 8002ee2:	4b92      	ldr	r3, [pc, #584]	; (800312c <PullAndDrop+0x304>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	00db      	lsls	r3, r3, #3
 8002ee8:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002eec:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002ef0:	4b8c      	ldr	r3, [pc, #560]	; (8003124 <PullAndDrop+0x2fc>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	bfb8      	it	lt
 8002ef8:	425b      	neglt	r3, r3
 8002efa:	429a      	cmp	r2, r3
 8002efc:	dd13      	ble.n	8002f26 <PullAndDrop+0xfe>
							{
								IsReachTargetPosition = true;
 8002efe:	4b8c      	ldr	r3, [pc, #560]	; (8003130 <PullAndDrop+0x308>)
 8002f00:	2201      	movs	r2, #1
 8002f02:	701a      	strb	r2, [r3, #0]
 8002f04:	e00f      	b.n	8002f26 <PullAndDrop+0xfe>
							}
					}
					else // ASDA Driver
					{
						if ( abs(PositionPulseCmd) > abs(TargetPosition))
 8002f06:	4b89      	ldr	r3, [pc, #548]	; (800312c <PullAndDrop+0x304>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002f0e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002f12:	4b84      	ldr	r3, [pc, #528]	; (8003124 <PullAndDrop+0x2fc>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	bfb8      	it	lt
 8002f1a:	425b      	neglt	r3, r3
 8002f1c:	429a      	cmp	r2, r3
 8002f1e:	dd02      	ble.n	8002f26 <PullAndDrop+0xfe>
							{
								IsReachTargetPosition = true;
 8002f20:	4b83      	ldr	r3, [pc, #524]	; (8003130 <PullAndDrop+0x308>)
 8002f22:	2201      	movs	r2, #1
 8002f24:	701a      	strb	r2, [r3, #0]
							}
					}
					if (IsReachTargetPosition)
 8002f26:	4b82      	ldr	r3, [pc, #520]	; (8003130 <PullAndDrop+0x308>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	b2db      	uxtb	r3, r3
 8002f2c:	2b00      	cmp	r3, #0
 8002f2e:	d03e      	beq.n	8002fae <PullAndDrop+0x186>
					{
						StartBraking = true;
 8002f30:	4b77      	ldr	r3, [pc, #476]	; (8003110 <PullAndDrop+0x2e8>)
 8002f32:	2201      	movs	r2, #1
 8002f34:	701a      	strb	r2, [r3, #0]
						PreAccRef = AccRef;
 8002f36:	4b77      	ldr	r3, [pc, #476]	; (8003114 <PullAndDrop+0x2ec>)
 8002f38:	681b      	ldr	r3, [r3, #0]
 8002f3a:	4a77      	ldr	r2, [pc, #476]	; (8003118 <PullAndDrop+0x2f0>)
 8002f3c:	6013      	str	r3, [r2, #0]

						StartPulseCmdCounting = false;
 8002f3e:	4b7d      	ldr	r3, [pc, #500]	; (8003134 <PullAndDrop+0x30c>)
 8002f40:	2200      	movs	r2, #0
 8002f42:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd = 0; // Reset the pulse count variable
 8002f44:	4b79      	ldr	r3, [pc, #484]	; (800312c <PullAndDrop+0x304>)
 8002f46:	2200      	movs	r2, #0
 8002f48:	601a      	str	r2, [r3, #0]

						TargetPosition = (int)(EncoderResolution*(PullingTotalDistance-PullingDecelDistance)/(2*3.14*DrumRadius)); // Stop at the top point of the flying (zero-speed point)
 8002f4a:	4b7b      	ldr	r3, [pc, #492]	; (8003138 <PullAndDrop+0x310>)
 8002f4c:	881b      	ldrh	r3, [r3, #0]
 8002f4e:	ee07 3a90 	vmov	s15, r3
 8002f52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f56:	4b79      	ldr	r3, [pc, #484]	; (800313c <PullAndDrop+0x314>)
 8002f58:	edd3 6a00 	vldr	s13, [r3]
 8002f5c:	4b78      	ldr	r3, [pc, #480]	; (8003140 <PullAndDrop+0x318>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f66:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f6a:	ee17 0a90 	vmov	r0, s15
 8002f6e:	f7fd faeb 	bl	8000548 <__aeabi_f2d>
 8002f72:	4604      	mov	r4, r0
 8002f74:	460d      	mov	r5, r1
 8002f76:	4b73      	ldr	r3, [pc, #460]	; (8003144 <PullAndDrop+0x31c>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fae4 	bl	8000548 <__aeabi_f2d>
 8002f80:	a355      	add	r3, pc, #340	; (adr r3, 80030d8 <PullAndDrop+0x2b0>)
 8002f82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f86:	f7fd fb37 	bl	80005f8 <__aeabi_dmul>
 8002f8a:	4602      	mov	r2, r0
 8002f8c:	460b      	mov	r3, r1
 8002f8e:	4620      	mov	r0, r4
 8002f90:	4629      	mov	r1, r5
 8002f92:	f7fd fc5b 	bl	800084c <__aeabi_ddiv>
 8002f96:	4602      	mov	r2, r0
 8002f98:	460b      	mov	r3, r1
 8002f9a:	4610      	mov	r0, r2
 8002f9c:	4619      	mov	r1, r3
 8002f9e:	f7fd fddb 	bl	8000b58 <__aeabi_d2iz>
 8002fa2:	4603      	mov	r3, r0
 8002fa4:	4a5f      	ldr	r2, [pc, #380]	; (8003124 <PullAndDrop+0x2fc>)
 8002fa6:	6013      	str	r3, [r2, #0]

						IsReachTargetPosition = false; // Reset the flag
 8002fa8:	4b61      	ldr	r3, [pc, #388]	; (8003130 <PullAndDrop+0x308>)
 8002faa:	2200      	movs	r2, #0
 8002fac:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6-PullingAccel;
 8002fae:	4b66      	ldr	r3, [pc, #408]	; (8003148 <PullAndDrop+0x320>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fac8 	bl	8000548 <__aeabi_f2d>
 8002fb8:	4602      	mov	r2, r0
 8002fba:	460b      	mov	r3, r1
 8002fbc:	a148      	add	r1, pc, #288	; (adr r1, 80030e0 <PullAndDrop+0x2b8>)
 8002fbe:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fc2:	f7fd f961 	bl	8000288 <__aeabi_dsub>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4610      	mov	r0, r2
 8002fcc:	4619      	mov	r1, r3
 8002fce:	f7fd fe0b 	bl	8000be8 <__aeabi_d2f>
 8002fd2:	4603      	mov	r3, r0
 8002fd4:	4a4f      	ldr	r2, [pc, #316]	; (8003114 <PullAndDrop+0x2ec>)
 8002fd6:	6013      	str	r3, [r2, #0]

					//LinearGeneration(&AccRef,-16,-9.6-PullingAccel); // ramping the reference signal

					//LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);

					SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 8002fd8:	4b5c      	ldr	r3, [pc, #368]	; (800314c <PullAndDrop+0x324>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fab3 	bl	8000548 <__aeabi_f2d>
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	460d      	mov	r5, r1
 8002fe6:	4b5a      	ldr	r3, [pc, #360]	; (8003150 <PullAndDrop+0x328>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fa9a 	bl	8000524 <__aeabi_i2d>
 8002ff0:	a33d      	add	r3, pc, #244	; (adr r3, 80030e8 <PullAndDrop+0x2c0>)
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f7fd faff 	bl	80005f8 <__aeabi_dmul>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4690      	mov	r8, r2
 8003000:	4699      	mov	r9, r3
 8003002:	4b44      	ldr	r3, [pc, #272]	; (8003114 <PullAndDrop+0x2ec>)
 8003004:	681b      	ldr	r3, [r3, #0]
 8003006:	4618      	mov	r0, r3
 8003008:	f7fd fa9e 	bl	8000548 <__aeabi_f2d>
 800300c:	a338      	add	r3, pc, #224	; (adr r3, 80030f0 <PullAndDrop+0x2c8>)
 800300e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003012:	f7fd f93b 	bl	800028c <__adddf3>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4640      	mov	r0, r8
 800301c:	4649      	mov	r1, r9
 800301e:	f7fd faeb 	bl	80005f8 <__aeabi_dmul>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	4b49      	ldr	r3, [pc, #292]	; (8003154 <PullAndDrop+0x32c>)
 8003030:	f7fd fae2 	bl	80005f8 <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4690      	mov	r8, r2
 800303a:	4699      	mov	r9, r3
 800303c:	4b41      	ldr	r3, [pc, #260]	; (8003144 <PullAndDrop+0x31c>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fa81 	bl	8000548 <__aeabi_f2d>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4640      	mov	r0, r8
 800304c:	4649      	mov	r1, r9
 800304e:	f7fd fbfd 	bl	800084c <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4620      	mov	r0, r4
 8003058:	4629      	mov	r1, r5
 800305a:	f7fd f917 	bl	800028c <__adddf3>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4610      	mov	r0, r2
 8003064:	4619      	mov	r1, r3
 8003066:	f7fd fdbf 	bl	8000be8 <__aeabi_d2f>
 800306a:	4603      	mov	r3, r0
 800306c:	4a37      	ldr	r2, [pc, #220]	; (800314c <PullAndDrop+0x324>)
 800306e:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -PullingMaxSpeed)
 8003070:	4b39      	ldr	r3, [pc, #228]	; (8003158 <PullAndDrop+0x330>)
 8003072:	881b      	ldrh	r3, [r3, #0]
 8003074:	425b      	negs	r3, r3
 8003076:	ee07 3a90 	vmov	s15, r3
 800307a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800307e:	4b33      	ldr	r3, [pc, #204]	; (800314c <PullAndDrop+0x324>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	db09      	blt.n	80030a2 <PullAndDrop+0x27a>
						SpeedCmd = -PullingMaxSpeed;
 800308e:	4b32      	ldr	r3, [pc, #200]	; (8003158 <PullAndDrop+0x330>)
 8003090:	881b      	ldrh	r3, [r3, #0]
 8003092:	425b      	negs	r3, r3
 8003094:	ee07 3a90 	vmov	s15, r3
 8003098:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800309c:	4b2b      	ldr	r3, [pc, #172]	; (800314c <PullAndDrop+0x324>)
 800309e:	edc3 7a00 	vstr	s15, [r3]
					StartPulseCmdCounting = true;
 80030a2:	4b24      	ldr	r3, [pc, #144]	; (8003134 <PullAndDrop+0x30c>)
 80030a4:	2201      	movs	r2, #1
 80030a6:	701a      	strb	r2, [r3, #0]

					if (SpeedCmd != 0)
 80030a8:	4b28      	ldr	r3, [pc, #160]	; (800314c <PullAndDrop+0x324>)
 80030aa:	edd3 7a00 	vldr	s15, [r3]
 80030ae:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030b2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030b6:	f000 811f 	beq.w	80032f8 <PullAndDrop+0x4d0>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80030ba:	4b1b      	ldr	r3, [pc, #108]	; (8003128 <PullAndDrop+0x300>)
 80030bc:	781b      	ldrb	r3, [r3, #0]
 80030be:	4a23      	ldr	r2, [pc, #140]	; (800314c <PullAndDrop+0x324>)
 80030c0:	edd2 7a00 	vldr	s15, [r2]
 80030c4:	eeb0 0a67 	vmov.f32	s0, s15
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fe fca5 	bl	8001a18 <CalculateTimer3Period>
 80030ce:	4603      	mov	r3, r0
 80030d0:	b29a      	uxth	r2, r3
 80030d2:	4b22      	ldr	r3, [pc, #136]	; (800315c <PullAndDrop+0x334>)
 80030d4:	801a      	strh	r2, [r3, #0]
 80030d6:	e10f      	b.n	80032f8 <PullAndDrop+0x4d0>
 80030d8:	51eb851f 	.word	0x51eb851f
 80030dc:	40191eb8 	.word	0x40191eb8
 80030e0:	33333333 	.word	0x33333333
 80030e4:	c0233333 	.word	0xc0233333
 80030e8:	d2f1a9fc 	.word	0xd2f1a9fc
 80030ec:	3f50624d 	.word	0x3f50624d
 80030f0:	33333333 	.word	0x33333333
 80030f4:	40233333 	.word	0x40233333
 80030f8:	20000455 	.word	0x20000455
 80030fc:	2000044d 	.word	0x2000044d
 8003100:	20000445 	.word	0x20000445
 8003104:	20000454 	.word	0x20000454
 8003108:	20000448 	.word	0x20000448
 800310c:	200004bc 	.word	0x200004bc
 8003110:	2000044e 	.word	0x2000044e
 8003114:	20000010 	.word	0x20000010
 8003118:	2000054c 	.word	0x2000054c
 800311c:	2000045a 	.word	0x2000045a
 8003120:	200004c0 	.word	0x200004c0
 8003124:	200004cc 	.word	0x200004cc
 8003128:	20000003 	.word	0x20000003
 800312c:	200004d0 	.word	0x200004d0
 8003130:	20000453 	.word	0x20000453
 8003134:	2000044b 	.word	0x2000044b
 8003138:	2000000a 	.word	0x2000000a
 800313c:	200004b8 	.word	0x200004b8
 8003140:	200004b0 	.word	0x200004b0
 8003144:	2000046c 	.word	0x2000046c
 8003148:	20000498 	.word	0x20000498
 800314c:	20000514 	.word	0x20000514
 8003150:	20000470 	.word	0x20000470
 8003154:	40240000 	.word	0x40240000
 8003158:	200004ac 	.word	0x200004ac
 800315c:	20000464 	.word	0x20000464
				}
				else // Braking Stage
				{
					//AccRef =  = -9.8+PullingDecel;

					if (SpeedCmd == 0 || IsReachTargetPosition)
 8003160:	4b97      	ldr	r3, [pc, #604]	; (80033c0 <PullAndDrop+0x598>)
 8003162:	edd3 7a00 	vldr	s15, [r3]
 8003166:	eef5 7a40 	vcmp.f32	s15, #0.0
 800316a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800316e:	d004      	beq.n	800317a <PullAndDrop+0x352>
 8003170:	4b94      	ldr	r3, [pc, #592]	; (80033c4 <PullAndDrop+0x59c>)
 8003172:	781b      	ldrb	r3, [r3, #0]
 8003174:	b2db      	uxtb	r3, r3
 8003176:	2b00      	cmp	r3, #0
 8003178:	d021      	beq.n	80031be <PullAndDrop+0x396>
					{
						StopPulseGenerating();
 800317a:	f7fe fbeb 	bl	8001954 <StopPulseGenerating>

						StartPulseCmdCounting = false;
 800317e:	4b92      	ldr	r3, [pc, #584]	; (80033c8 <PullAndDrop+0x5a0>)
 8003180:	2200      	movs	r2, #0
 8003182:	701a      	strb	r2, [r3, #0]
						PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8003184:	4b91      	ldr	r3, [pc, #580]	; (80033cc <PullAndDrop+0x5a4>)
 8003186:	2200      	movs	r2, #0
 8003188:	701a      	strb	r2, [r3, #0]

						//InitializeRunning(DroppingMode);
						if (StartSimulating)
 800318a:	4b91      	ldr	r3, [pc, #580]	; (80033d0 <PullAndDrop+0x5a8>)
 800318c:	781b      	ldrb	r3, [r3, #0]
 800318e:	2b00      	cmp	r3, #0
 8003190:	d004      	beq.n	800319c <PullAndDrop+0x374>
						{
							TotalPullingPulse = PositionPulseCmd;
 8003192:	4b90      	ldr	r3, [pc, #576]	; (80033d4 <PullAndDrop+0x5ac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	b29a      	uxth	r2, r3
 8003198:	4b8f      	ldr	r3, [pc, #572]	; (80033d8 <PullAndDrop+0x5b0>)
 800319a:	801a      	strh	r2, [r3, #0]
						}

						PositionPulseCmd = 0;
 800319c:	4b8d      	ldr	r3, [pc, #564]	; (80033d4 <PullAndDrop+0x5ac>)
 800319e:	2200      	movs	r2, #0
 80031a0:	601a      	str	r2, [r3, #0]
						TargetPosition = BottomFreeDropPulseCmd; // First, go to max-speed point
 80031a2:	4b8e      	ldr	r3, [pc, #568]	; (80033dc <PullAndDrop+0x5b4>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4a8e      	ldr	r2, [pc, #568]	; (80033e0 <PullAndDrop+0x5b8>)
 80031a8:	6013      	str	r3, [r2, #0]
						IsReachTargetPosition = false;
 80031aa:	4b86      	ldr	r3, [pc, #536]	; (80033c4 <PullAndDrop+0x59c>)
 80031ac:	2200      	movs	r2, #0
 80031ae:	701a      	strb	r2, [r3, #0]

						SpeedCmd = 0; // reset/ stop
 80031b0:	4b83      	ldr	r3, [pc, #524]	; (80033c0 <PullAndDrop+0x598>)
 80031b2:	f04f 0200 	mov.w	r2, #0
 80031b6:	601a      	str	r2, [r3, #0]

						//StartPulling = false; // flag to finish Pulling Stage

						StartWaiting = true; // Switch to waiting stage
 80031b8:	4b8a      	ldr	r3, [pc, #552]	; (80033e4 <PullAndDrop+0x5bc>)
 80031ba:	2201      	movs	r2, #1
 80031bc:	701a      	strb	r2, [r3, #0]
					}

					//AccRef = -9.6+PullingDecel;

					LinearGeneration(&AccRef,FlyAccSlope,-9.6+PullingDecel);
 80031be:	4b8a      	ldr	r3, [pc, #552]	; (80033e8 <PullAndDrop+0x5c0>)
 80031c0:	ed93 8a00 	vldr	s16, [r3]
 80031c4:	4b89      	ldr	r3, [pc, #548]	; (80033ec <PullAndDrop+0x5c4>)
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	4618      	mov	r0, r3
 80031ca:	f7fd f9bd 	bl	8000548 <__aeabi_f2d>
 80031ce:	a378      	add	r3, pc, #480	; (adr r3, 80033b0 <PullAndDrop+0x588>)
 80031d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d4:	f7fd f858 	bl	8000288 <__aeabi_dsub>
 80031d8:	4602      	mov	r2, r0
 80031da:	460b      	mov	r3, r1
 80031dc:	4610      	mov	r0, r2
 80031de:	4619      	mov	r1, r3
 80031e0:	f7fd fd02 	bl	8000be8 <__aeabi_d2f>
 80031e4:	4603      	mov	r3, r0
 80031e6:	ee00 3a90 	vmov	s1, r3
 80031ea:	eeb0 0a48 	vmov.f32	s0, s16
 80031ee:	4880      	ldr	r0, [pc, #512]	; (80033f0 <PullAndDrop+0x5c8>)
 80031f0:	f7fe fb52 	bl	8001898 <LinearGeneration>

					if (IsOpenLoopControl) // Use open-loop control
 80031f4:	4b7f      	ldr	r3, [pc, #508]	; (80033f4 <PullAndDrop+0x5cc>)
 80031f6:	781b      	ldrb	r3, [r3, #0]
 80031f8:	2b00      	cmp	r3, #0
 80031fa:	d064      	beq.n	80032c6 <PullAndDrop+0x49e>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,PullingEpsilonDec,TransitionSpeed,-PullingMaxSpeed,0); // Feedforward term
						//LinearGeneration(&SpeedCmd,(AccRef + 9.6)*10/DrumRadius,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 80031fc:	4b70      	ldr	r3, [pc, #448]	; (80033c0 <PullAndDrop+0x598>)
 80031fe:	681b      	ldr	r3, [r3, #0]
 8003200:	4618      	mov	r0, r3
 8003202:	f7fd f9a1 	bl	8000548 <__aeabi_f2d>
 8003206:	4604      	mov	r4, r0
 8003208:	460d      	mov	r5, r1
 800320a:	4b7b      	ldr	r3, [pc, #492]	; (80033f8 <PullAndDrop+0x5d0>)
 800320c:	781b      	ldrb	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f988 	bl	8000524 <__aeabi_i2d>
 8003214:	a368      	add	r3, pc, #416	; (adr r3, 80033b8 <PullAndDrop+0x590>)
 8003216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800321a:	f7fd f9ed 	bl	80005f8 <__aeabi_dmul>
 800321e:	4602      	mov	r2, r0
 8003220:	460b      	mov	r3, r1
 8003222:	4690      	mov	r8, r2
 8003224:	4699      	mov	r9, r3
 8003226:	4b72      	ldr	r3, [pc, #456]	; (80033f0 <PullAndDrop+0x5c8>)
 8003228:	681b      	ldr	r3, [r3, #0]
 800322a:	4618      	mov	r0, r3
 800322c:	f7fd f98c 	bl	8000548 <__aeabi_f2d>
 8003230:	a35f      	add	r3, pc, #380	; (adr r3, 80033b0 <PullAndDrop+0x588>)
 8003232:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003236:	f7fd f829 	bl	800028c <__adddf3>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4640      	mov	r0, r8
 8003240:	4649      	mov	r1, r9
 8003242:	f7fd f9d9 	bl	80005f8 <__aeabi_dmul>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4610      	mov	r0, r2
 800324c:	4619      	mov	r1, r3
 800324e:	f04f 0200 	mov.w	r2, #0
 8003252:	4b6a      	ldr	r3, [pc, #424]	; (80033fc <PullAndDrop+0x5d4>)
 8003254:	f7fd f9d0 	bl	80005f8 <__aeabi_dmul>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	4690      	mov	r8, r2
 800325e:	4699      	mov	r9, r3
 8003260:	4b67      	ldr	r3, [pc, #412]	; (8003400 <PullAndDrop+0x5d8>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4618      	mov	r0, r3
 8003266:	f7fd f96f 	bl	8000548 <__aeabi_f2d>
 800326a:	4602      	mov	r2, r0
 800326c:	460b      	mov	r3, r1
 800326e:	4640      	mov	r0, r8
 8003270:	4649      	mov	r1, r9
 8003272:	f7fd faeb 	bl	800084c <__aeabi_ddiv>
 8003276:	4602      	mov	r2, r0
 8003278:	460b      	mov	r3, r1
 800327a:	4620      	mov	r0, r4
 800327c:	4629      	mov	r1, r5
 800327e:	f7fd f805 	bl	800028c <__adddf3>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	4610      	mov	r0, r2
 8003288:	4619      	mov	r1, r3
 800328a:	f7fd fcad 	bl	8000be8 <__aeabi_d2f>
 800328e:	4603      	mov	r3, r0
 8003290:	4a4b      	ldr	r2, [pc, #300]	; (80033c0 <PullAndDrop+0x598>)
 8003292:	6013      	str	r3, [r2, #0]
						if (SpeedCmd <= -810)
 8003294:	4b4a      	ldr	r3, [pc, #296]	; (80033c0 <PullAndDrop+0x598>)
 8003296:	edd3 7a00 	vldr	s15, [r3]
 800329a:	ed9f 7a5a 	vldr	s14, [pc, #360]	; 8003404 <PullAndDrop+0x5dc>
 800329e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80032a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032a6:	d802      	bhi.n	80032ae <PullAndDrop+0x486>
							SpeedCmd = -810;
 80032a8:	4b45      	ldr	r3, [pc, #276]	; (80033c0 <PullAndDrop+0x598>)
 80032aa:	4a57      	ldr	r2, [pc, #348]	; (8003408 <PullAndDrop+0x5e0>)
 80032ac:	601a      	str	r2, [r3, #0]
						if (SpeedCmd >= 0)
 80032ae:	4b44      	ldr	r3, [pc, #272]	; (80033c0 <PullAndDrop+0x598>)
 80032b0:	edd3 7a00 	vldr	s15, [r3]
 80032b4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80032b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032bc:	db03      	blt.n	80032c6 <PullAndDrop+0x49e>
							SpeedCmd = 0;
 80032be:	4b40      	ldr	r3, [pc, #256]	; (80033c0 <PullAndDrop+0x598>)
 80032c0:	f04f 0200 	mov.w	r2, #0
 80032c4:	601a      	str	r2, [r3, #0]
//						SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
//						if (SpeedCmd >= 0)
//							SpeedCmd = 0;
//					}

					if (SpeedCmd != 0)
 80032c6:	4b3e      	ldr	r3, [pc, #248]	; (80033c0 <PullAndDrop+0x598>)
 80032c8:	edd3 7a00 	vldr	s15, [r3]
 80032cc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032d0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032d4:	d010      	beq.n	80032f8 <PullAndDrop+0x4d0>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80032d6:	4b4d      	ldr	r3, [pc, #308]	; (800340c <PullAndDrop+0x5e4>)
 80032d8:	781b      	ldrb	r3, [r3, #0]
 80032da:	4a39      	ldr	r2, [pc, #228]	; (80033c0 <PullAndDrop+0x598>)
 80032dc:	edd2 7a00 	vldr	s15, [r2]
 80032e0:	eeb0 0a67 	vmov.f32	s0, s15
 80032e4:	4618      	mov	r0, r3
 80032e6:	f7fe fb97 	bl	8001a18 <CalculateTimer3Period>
 80032ea:	4603      	mov	r3, r0
 80032ec:	b29a      	uxth	r2, r3
 80032ee:	4b48      	ldr	r3, [pc, #288]	; (8003410 <PullAndDrop+0x5e8>)
 80032f0:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 80032f2:	4b35      	ldr	r3, [pc, #212]	; (80033c8 <PullAndDrop+0x5a0>)
 80032f4:	2201      	movs	r2, #1
 80032f6:	701a      	strb	r2, [r3, #0]
//		// Wait for some time before dropping

// BEGIN Delay before dropping

//
		if (StartWaiting)
 80032f8:	4b3a      	ldr	r3, [pc, #232]	; (80033e4 <PullAndDrop+0x5bc>)
 80032fa:	781b      	ldrb	r3, [r3, #0]
 80032fc:	2b00      	cmp	r3, #0
 80032fe:	d029      	beq.n	8003354 <PullAndDrop+0x52c>
		{
			if (WaitingMiliSecond(StoppingTime))
 8003300:	4b44      	ldr	r3, [pc, #272]	; (8003414 <PullAndDrop+0x5ec>)
 8003302:	881b      	ldrh	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fe fb61 	bl	80019cc <WaitingMiliSecond>
 800330a:	4603      	mov	r3, r0
 800330c:	2b00      	cmp	r3, #0
 800330e:	d021      	beq.n	8003354 <PullAndDrop+0x52c>
			{
				StartWaiting = false;
 8003310:	4b34      	ldr	r3, [pc, #208]	; (80033e4 <PullAndDrop+0x5bc>)
 8003312:	2200      	movs	r2, #0
 8003314:	701a      	strb	r2, [r3, #0]

				PreAccRef = AccRef;
 8003316:	4b36      	ldr	r3, [pc, #216]	; (80033f0 <PullAndDrop+0x5c8>)
 8003318:	681b      	ldr	r3, [r3, #0]
 800331a:	4a3f      	ldr	r2, [pc, #252]	; (8003418 <PullAndDrop+0x5f0>)
 800331c:	6013      	str	r3, [r2, #0]

				StartDropping = true;
 800331e:	4b3f      	ldr	r3, [pc, #252]	; (800341c <PullAndDrop+0x5f4>)
 8003320:	2201      	movs	r2, #1
 8003322:	701a      	strb	r2, [r3, #0]
				StartBraking = false;
 8003324:	4b3e      	ldr	r3, [pc, #248]	; (8003420 <PullAndDrop+0x5f8>)
 8003326:	2200      	movs	r2, #0
 8003328:	701a      	strb	r2, [r3, #0]
				Direction = true; // variable to show the direction, false = move up, true = move down
 800332a:	4b3e      	ldr	r3, [pc, #248]	; (8003424 <PullAndDrop+0x5fc>)
 800332c:	2201      	movs	r2, #1
 800332e:	701a      	strb	r2, [r3, #0]
				StartPulling = false;
 8003330:	4b3d      	ldr	r3, [pc, #244]	; (8003428 <PullAndDrop+0x600>)
 8003332:	2200      	movs	r2, #0
 8003334:	701a      	strb	r2, [r3, #0]
				PositionPulseCmd = 0;
 8003336:	4b27      	ldr	r3, [pc, #156]	; (80033d4 <PullAndDrop+0x5ac>)
 8003338:	2200      	movs	r2, #0
 800333a:	601a      	str	r2, [r3, #0]
				StartPulseCmdCounting = false;
 800333c:	4b22      	ldr	r3, [pc, #136]	; (80033c8 <PullAndDrop+0x5a0>)
 800333e:	2200      	movs	r2, #0
 8003340:	701a      	strb	r2, [r3, #0]
				PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8003342:	4b22      	ldr	r3, [pc, #136]	; (80033cc <PullAndDrop+0x5a4>)
 8003344:	2200      	movs	r2, #0
 8003346:	701a      	strb	r2, [r3, #0]

				//InitializeRunning(DroppingMode);

				TargetPosition = BottomFreeDropPulseCmd; // First, go to max-speed point
 8003348:	4b24      	ldr	r3, [pc, #144]	; (80033dc <PullAndDrop+0x5b4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4a24      	ldr	r2, [pc, #144]	; (80033e0 <PullAndDrop+0x5b8>)
 800334e:	6013      	str	r3, [r2, #0]
				StartPulseGenerating();
 8003350:	f7fe fb1e 	bl	8001990 <StartPulseGenerating>
		}

// END WAITING

		// BEGIN DROPPING TASK
		if (StartDropping && !StartPulling)
 8003354:	4b31      	ldr	r3, [pc, #196]	; (800341c <PullAndDrop+0x5f4>)
 8003356:	781b      	ldrb	r3, [r3, #0]
 8003358:	2b00      	cmp	r3, #0
 800335a:	f000 81c8 	beq.w	80036ee <PullAndDrop+0x8c6>
 800335e:	4b32      	ldr	r3, [pc, #200]	; (8003428 <PullAndDrop+0x600>)
 8003360:	781b      	ldrb	r3, [r3, #0]
 8003362:	f083 0301 	eor.w	r3, r3, #1
 8003366:	b2db      	uxtb	r3, r3
 8003368:	2b00      	cmp	r3, #0
 800336a:	f000 81c0 	beq.w	80036ee <PullAndDrop+0x8c6>
		{
				// ACCLERATING DROPPING STAGE
				if (!StartBraking) // Accelerating Stage
 800336e:	4b2c      	ldr	r3, [pc, #176]	; (8003420 <PullAndDrop+0x5f8>)
 8003370:	781b      	ldrb	r3, [r3, #0]
 8003372:	f083 0301 	eor.w	r3, r3, #1
 8003376:	b2db      	uxtb	r3, r3
 8003378:	2b00      	cmp	r3, #0
 800337a:	f000 8111 	beq.w	80035a0 <PullAndDrop+0x778>
				{
					if(MotorDriver) // HIGEN Driver
 800337e:	4b23      	ldr	r3, [pc, #140]	; (800340c <PullAndDrop+0x5e4>)
 8003380:	781b      	ldrb	r3, [r3, #0]
 8003382:	2b00      	cmp	r3, #0
 8003384:	d052      	beq.n	800342c <PullAndDrop+0x604>
					{
						if ( abs(8*PositionPulseCmd) > abs(TargetPosition)) // 8 is th gear ratio
 8003386:	4b13      	ldr	r3, [pc, #76]	; (80033d4 <PullAndDrop+0x5ac>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	00db      	lsls	r3, r3, #3
 800338c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003390:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003394:	4b12      	ldr	r3, [pc, #72]	; (80033e0 <PullAndDrop+0x5b8>)
 8003396:	681b      	ldr	r3, [r3, #0]
 8003398:	2b00      	cmp	r3, #0
 800339a:	bfb8      	it	lt
 800339c:	425b      	neglt	r3, r3
 800339e:	429a      	cmp	r2, r3
 80033a0:	dd54      	ble.n	800344c <PullAndDrop+0x624>
						{
							IsReachTargetPosition = true;
 80033a2:	4b08      	ldr	r3, [pc, #32]	; (80033c4 <PullAndDrop+0x59c>)
 80033a4:	2201      	movs	r2, #1
 80033a6:	701a      	strb	r2, [r3, #0]
 80033a8:	e050      	b.n	800344c <PullAndDrop+0x624>
 80033aa:	bf00      	nop
 80033ac:	f3af 8000 	nop.w
 80033b0:	33333333 	.word	0x33333333
 80033b4:	40233333 	.word	0x40233333
 80033b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80033bc:	3f50624d 	.word	0x3f50624d
 80033c0:	20000514 	.word	0x20000514
 80033c4:	20000453 	.word	0x20000453
 80033c8:	2000044b 	.word	0x2000044b
 80033cc:	2000045a 	.word	0x2000045a
 80033d0:	20000447 	.word	0x20000447
 80033d4:	200004d0 	.word	0x200004d0
 80033d8:	2000046a 	.word	0x2000046a
 80033dc:	200004c4 	.word	0x200004c4
 80033e0:	200004cc 	.word	0x200004cc
 80033e4:	20000452 	.word	0x20000452
 80033e8:	20000540 	.word	0x20000540
 80033ec:	2000049c 	.word	0x2000049c
 80033f0:	20000010 	.word	0x20000010
 80033f4:	20000004 	.word	0x20000004
 80033f8:	20000470 	.word	0x20000470
 80033fc:	40240000 	.word	0x40240000
 8003400:	2000046c 	.word	0x2000046c
 8003404:	c44a8000 	.word	0xc44a8000
 8003408:	c44a8000 	.word	0xc44a8000
 800340c:	20000003 	.word	0x20000003
 8003410:	20000464 	.word	0x20000464
 8003414:	20000472 	.word	0x20000472
 8003418:	2000054c 	.word	0x2000054c
 800341c:	20000445 	.word	0x20000445
 8003420:	2000044e 	.word	0x2000044e
 8003424:	20000448 	.word	0x20000448
 8003428:	2000044d 	.word	0x2000044d
						}
					}
					else // ASDA Driver
					{
						if ( abs(PositionPulseCmd) > abs(TargetPosition))
 800342c:	4bba      	ldr	r3, [pc, #744]	; (8003718 <PullAndDrop+0x8f0>)
 800342e:	681b      	ldr	r3, [r3, #0]
 8003430:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8003434:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8003438:	4bb8      	ldr	r3, [pc, #736]	; (800371c <PullAndDrop+0x8f4>)
 800343a:	681b      	ldr	r3, [r3, #0]
 800343c:	2b00      	cmp	r3, #0
 800343e:	bfb8      	it	lt
 8003440:	425b      	neglt	r3, r3
 8003442:	429a      	cmp	r2, r3
 8003444:	dd02      	ble.n	800344c <PullAndDrop+0x624>
						{
							IsReachTargetPosition = true;
 8003446:	4bb6      	ldr	r3, [pc, #728]	; (8003720 <PullAndDrop+0x8f8>)
 8003448:	2201      	movs	r2, #1
 800344a:	701a      	strb	r2, [r3, #0]
						}
					}
					if (IsReachTargetPosition) // Reach dropping distance
 800344c:	4bb4      	ldr	r3, [pc, #720]	; (8003720 <PullAndDrop+0x8f8>)
 800344e:	781b      	ldrb	r3, [r3, #0]
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d00f      	beq.n	8003476 <PullAndDrop+0x64e>
					{
						StartBraking = true;
 8003456:	4bb3      	ldr	r3, [pc, #716]	; (8003724 <PullAndDrop+0x8fc>)
 8003458:	2201      	movs	r2, #1
 800345a:	701a      	strb	r2, [r3, #0]

						StartPulseCmdCounting = false;
 800345c:	4bb2      	ldr	r3, [pc, #712]	; (8003728 <PullAndDrop+0x900>)
 800345e:	2200      	movs	r2, #0
 8003460:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd = 0;
 8003462:	4bad      	ldr	r3, [pc, #692]	; (8003718 <PullAndDrop+0x8f0>)
 8003464:	2200      	movs	r2, #0
 8003466:	601a      	str	r2, [r3, #0]
						//TargetPosition = 0;

						TargetPosition = DroppingDecelPulseCmd;
 8003468:	4bb0      	ldr	r3, [pc, #704]	; (800372c <PullAndDrop+0x904>)
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	4aab      	ldr	r2, [pc, #684]	; (800371c <PullAndDrop+0x8f4>)
 800346e:	6013      	str	r3, [r2, #0]
						IsReachTargetPosition = false;
 8003470:	4bab      	ldr	r3, [pc, #684]	; (8003720 <PullAndDrop+0x8f8>)
 8003472:	2200      	movs	r2, #0
 8003474:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6+DroppingAccel;
 8003476:	4bae      	ldr	r3, [pc, #696]	; (8003730 <PullAndDrop+0x908>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4618      	mov	r0, r3
 800347c:	f7fd f864 	bl	8000548 <__aeabi_f2d>
 8003480:	a39f      	add	r3, pc, #636	; (adr r3, 8003700 <PullAndDrop+0x8d8>)
 8003482:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003486:	f7fc feff 	bl	8000288 <__aeabi_dsub>
 800348a:	4602      	mov	r2, r0
 800348c:	460b      	mov	r3, r1
 800348e:	4610      	mov	r0, r2
 8003490:	4619      	mov	r1, r3
 8003492:	f7fd fba9 	bl	8000be8 <__aeabi_d2f>
 8003496:	4603      	mov	r3, r0
 8003498:	4aa6      	ldr	r2, [pc, #664]	; (8003734 <PullAndDrop+0x90c>)
 800349a:	6013      	str	r3, [r2, #0]

					if (IsOpenLoopControl) // Use open-loop control
 800349c:	4ba6      	ldr	r3, [pc, #664]	; (8003738 <PullAndDrop+0x910>)
 800349e:	781b      	ldrb	r3, [r3, #0]
 80034a0:	2b00      	cmp	r3, #0
 80034a2:	d062      	beq.n	800356a <PullAndDrop+0x742>
					{
						SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 80034a4:	4ba5      	ldr	r3, [pc, #660]	; (800373c <PullAndDrop+0x914>)
 80034a6:	681b      	ldr	r3, [r3, #0]
 80034a8:	4618      	mov	r0, r3
 80034aa:	f7fd f84d 	bl	8000548 <__aeabi_f2d>
 80034ae:	4604      	mov	r4, r0
 80034b0:	460d      	mov	r5, r1
 80034b2:	4ba3      	ldr	r3, [pc, #652]	; (8003740 <PullAndDrop+0x918>)
 80034b4:	781b      	ldrb	r3, [r3, #0]
 80034b6:	4618      	mov	r0, r3
 80034b8:	f7fd f834 	bl	8000524 <__aeabi_i2d>
 80034bc:	a392      	add	r3, pc, #584	; (adr r3, 8003708 <PullAndDrop+0x8e0>)
 80034be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034c2:	f7fd f899 	bl	80005f8 <__aeabi_dmul>
 80034c6:	4602      	mov	r2, r0
 80034c8:	460b      	mov	r3, r1
 80034ca:	4690      	mov	r8, r2
 80034cc:	4699      	mov	r9, r3
 80034ce:	4b99      	ldr	r3, [pc, #612]	; (8003734 <PullAndDrop+0x90c>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd f838 	bl	8000548 <__aeabi_f2d>
 80034d8:	a389      	add	r3, pc, #548	; (adr r3, 8003700 <PullAndDrop+0x8d8>)
 80034da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034de:	f7fc fed5 	bl	800028c <__adddf3>
 80034e2:	4602      	mov	r2, r0
 80034e4:	460b      	mov	r3, r1
 80034e6:	4640      	mov	r0, r8
 80034e8:	4649      	mov	r1, r9
 80034ea:	f7fd f885 	bl	80005f8 <__aeabi_dmul>
 80034ee:	4602      	mov	r2, r0
 80034f0:	460b      	mov	r3, r1
 80034f2:	4610      	mov	r0, r2
 80034f4:	4619      	mov	r1, r3
 80034f6:	f04f 0200 	mov.w	r2, #0
 80034fa:	4b92      	ldr	r3, [pc, #584]	; (8003744 <PullAndDrop+0x91c>)
 80034fc:	f7fd f87c 	bl	80005f8 <__aeabi_dmul>
 8003500:	4602      	mov	r2, r0
 8003502:	460b      	mov	r3, r1
 8003504:	4690      	mov	r8, r2
 8003506:	4699      	mov	r9, r3
 8003508:	4b8f      	ldr	r3, [pc, #572]	; (8003748 <PullAndDrop+0x920>)
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	4618      	mov	r0, r3
 800350e:	f7fd f81b 	bl	8000548 <__aeabi_f2d>
 8003512:	4602      	mov	r2, r0
 8003514:	460b      	mov	r3, r1
 8003516:	4640      	mov	r0, r8
 8003518:	4649      	mov	r1, r9
 800351a:	f7fd f997 	bl	800084c <__aeabi_ddiv>
 800351e:	4602      	mov	r2, r0
 8003520:	460b      	mov	r3, r1
 8003522:	4620      	mov	r0, r4
 8003524:	4629      	mov	r1, r5
 8003526:	f7fc feb1 	bl	800028c <__adddf3>
 800352a:	4602      	mov	r2, r0
 800352c:	460b      	mov	r3, r1
 800352e:	4610      	mov	r0, r2
 8003530:	4619      	mov	r1, r3
 8003532:	f7fd fb59 	bl	8000be8 <__aeabi_d2f>
 8003536:	4603      	mov	r3, r0
 8003538:	4a80      	ldr	r2, [pc, #512]	; (800373c <PullAndDrop+0x914>)
 800353a:	6013      	str	r3, [r2, #0]
						if (SpeedCmd >= DroppingMaxSpeed) // Saturation
 800353c:	4b83      	ldr	r3, [pc, #524]	; (800374c <PullAndDrop+0x924>)
 800353e:	881b      	ldrh	r3, [r3, #0]
 8003540:	ee07 3a90 	vmov	s15, r3
 8003544:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003548:	4b7c      	ldr	r3, [pc, #496]	; (800373c <PullAndDrop+0x914>)
 800354a:	edd3 7a00 	vldr	s15, [r3]
 800354e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003552:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003556:	d808      	bhi.n	800356a <PullAndDrop+0x742>
							SpeedCmd = DroppingMaxSpeed;
 8003558:	4b7c      	ldr	r3, [pc, #496]	; (800374c <PullAndDrop+0x924>)
 800355a:	881b      	ldrh	r3, [r3, #0]
 800355c:	ee07 3a90 	vmov	s15, r3
 8003560:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003564:	4b75      	ldr	r3, [pc, #468]	; (800373c <PullAndDrop+0x914>)
 8003566:	edc3 7a00 	vstr	s15, [r3]
//						if (SpeedCmd >= DroppingMaxSpeed) // Saturation
//							SpeedCmd = DroppingMaxSpeed;
//						StartPulseCmdCounting = true;
//					}

					if (SpeedCmd != 0)
 800356a:	4b74      	ldr	r3, [pc, #464]	; (800373c <PullAndDrop+0x914>)
 800356c:	edd3 7a00 	vldr	s15, [r3]
 8003570:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003574:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003578:	f000 80b9 	beq.w	80036ee <PullAndDrop+0x8c6>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800357c:	4b74      	ldr	r3, [pc, #464]	; (8003750 <PullAndDrop+0x928>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	4a6e      	ldr	r2, [pc, #440]	; (800373c <PullAndDrop+0x914>)
 8003582:	edd2 7a00 	vldr	s15, [r2]
 8003586:	eeb0 0a67 	vmov.f32	s0, s15
 800358a:	4618      	mov	r0, r3
 800358c:	f7fe fa44 	bl	8001a18 <CalculateTimer3Period>
 8003590:	4603      	mov	r3, r0
 8003592:	b29a      	uxth	r2, r3
 8003594:	4b6f      	ldr	r3, [pc, #444]	; (8003754 <PullAndDrop+0x92c>)
 8003596:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 8003598:	4b63      	ldr	r3, [pc, #396]	; (8003728 <PullAndDrop+0x900>)
 800359a:	2201      	movs	r2, #1
 800359c:	701a      	strb	r2, [r3, #0]
 800359e:	e0a6      	b.n	80036ee <PullAndDrop+0x8c6>

				// BEGIN BRAKING STAGE
				else
				{

					AccRef = -9.6-DroppingDecel;
 80035a0:	4b6d      	ldr	r3, [pc, #436]	; (8003758 <PullAndDrop+0x930>)
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	4618      	mov	r0, r3
 80035a6:	f7fc ffcf 	bl	8000548 <__aeabi_f2d>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	a158      	add	r1, pc, #352	; (adr r1, 8003710 <PullAndDrop+0x8e8>)
 80035b0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80035b4:	f7fc fe68 	bl	8000288 <__aeabi_dsub>
 80035b8:	4602      	mov	r2, r0
 80035ba:	460b      	mov	r3, r1
 80035bc:	4610      	mov	r0, r2
 80035be:	4619      	mov	r1, r3
 80035c0:	f7fd fb12 	bl	8000be8 <__aeabi_d2f>
 80035c4:	4603      	mov	r3, r0
 80035c6:	4a5b      	ldr	r2, [pc, #364]	; (8003734 <PullAndDrop+0x90c>)
 80035c8:	6013      	str	r3, [r2, #0]
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 80035ca:	4b5c      	ldr	r3, [pc, #368]	; (800373c <PullAndDrop+0x914>)
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	4618      	mov	r0, r3
 80035d0:	f7fc ffba 	bl	8000548 <__aeabi_f2d>
 80035d4:	4604      	mov	r4, r0
 80035d6:	460d      	mov	r5, r1
 80035d8:	4b59      	ldr	r3, [pc, #356]	; (8003740 <PullAndDrop+0x918>)
 80035da:	781b      	ldrb	r3, [r3, #0]
 80035dc:	4618      	mov	r0, r3
 80035de:	f7fc ffa1 	bl	8000524 <__aeabi_i2d>
 80035e2:	a349      	add	r3, pc, #292	; (adr r3, 8003708 <PullAndDrop+0x8e0>)
 80035e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035e8:	f7fd f806 	bl	80005f8 <__aeabi_dmul>
 80035ec:	4602      	mov	r2, r0
 80035ee:	460b      	mov	r3, r1
 80035f0:	4690      	mov	r8, r2
 80035f2:	4699      	mov	r9, r3
 80035f4:	4b4f      	ldr	r3, [pc, #316]	; (8003734 <PullAndDrop+0x90c>)
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	4618      	mov	r0, r3
 80035fa:	f7fc ffa5 	bl	8000548 <__aeabi_f2d>
 80035fe:	a340      	add	r3, pc, #256	; (adr r3, 8003700 <PullAndDrop+0x8d8>)
 8003600:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003604:	f7fc fe42 	bl	800028c <__adddf3>
 8003608:	4602      	mov	r2, r0
 800360a:	460b      	mov	r3, r1
 800360c:	4640      	mov	r0, r8
 800360e:	4649      	mov	r1, r9
 8003610:	f7fc fff2 	bl	80005f8 <__aeabi_dmul>
 8003614:	4602      	mov	r2, r0
 8003616:	460b      	mov	r3, r1
 8003618:	4610      	mov	r0, r2
 800361a:	4619      	mov	r1, r3
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	4b48      	ldr	r3, [pc, #288]	; (8003744 <PullAndDrop+0x91c>)
 8003622:	f7fc ffe9 	bl	80005f8 <__aeabi_dmul>
 8003626:	4602      	mov	r2, r0
 8003628:	460b      	mov	r3, r1
 800362a:	4690      	mov	r8, r2
 800362c:	4699      	mov	r9, r3
 800362e:	4b46      	ldr	r3, [pc, #280]	; (8003748 <PullAndDrop+0x920>)
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	4618      	mov	r0, r3
 8003634:	f7fc ff88 	bl	8000548 <__aeabi_f2d>
 8003638:	4602      	mov	r2, r0
 800363a:	460b      	mov	r3, r1
 800363c:	4640      	mov	r0, r8
 800363e:	4649      	mov	r1, r9
 8003640:	f7fd f904 	bl	800084c <__aeabi_ddiv>
 8003644:	4602      	mov	r2, r0
 8003646:	460b      	mov	r3, r1
 8003648:	4620      	mov	r0, r4
 800364a:	4629      	mov	r1, r5
 800364c:	f7fc fe1e 	bl	800028c <__adddf3>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	4610      	mov	r0, r2
 8003656:	4619      	mov	r1, r3
 8003658:	f7fd fac6 	bl	8000be8 <__aeabi_d2f>
 800365c:	4603      	mov	r3, r0
 800365e:	4a37      	ldr	r2, [pc, #220]	; (800373c <PullAndDrop+0x914>)
 8003660:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= 0)
 8003662:	4b36      	ldr	r3, [pc, #216]	; (800373c <PullAndDrop+0x914>)
 8003664:	edd3 7a00 	vldr	s15, [r3]
 8003668:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800366c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003670:	d803      	bhi.n	800367a <PullAndDrop+0x852>
						SpeedCmd = 0;
 8003672:	4b32      	ldr	r3, [pc, #200]	; (800373c <PullAndDrop+0x914>)
 8003674:	f04f 0200 	mov.w	r2, #0
 8003678:	601a      	str	r2, [r3, #0]

					if (SpeedCmd != 0)
 800367a:	4b30      	ldr	r3, [pc, #192]	; (800373c <PullAndDrop+0x914>)
 800367c:	edd3 7a00 	vldr	s15, [r3]
 8003680:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	d010      	beq.n	80036ac <PullAndDrop+0x884>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800368a:	4b31      	ldr	r3, [pc, #196]	; (8003750 <PullAndDrop+0x928>)
 800368c:	781b      	ldrb	r3, [r3, #0]
 800368e:	4a2b      	ldr	r2, [pc, #172]	; (800373c <PullAndDrop+0x914>)
 8003690:	edd2 7a00 	vldr	s15, [r2]
 8003694:	eeb0 0a67 	vmov.f32	s0, s15
 8003698:	4618      	mov	r0, r3
 800369a:	f7fe f9bd 	bl	8001a18 <CalculateTimer3Period>
 800369e:	4603      	mov	r3, r0
 80036a0:	b29a      	uxth	r2, r3
 80036a2:	4b2c      	ldr	r3, [pc, #176]	; (8003754 <PullAndDrop+0x92c>)
 80036a4:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 80036a6:	4b20      	ldr	r3, [pc, #128]	; (8003728 <PullAndDrop+0x900>)
 80036a8:	2201      	movs	r2, #1
 80036aa:	701a      	strb	r2, [r3, #0]
					}

					if (SpeedCmd <= 0 || IsReachTargetPosition) // Stop braking
 80036ac:	4b23      	ldr	r3, [pc, #140]	; (800373c <PullAndDrop+0x914>)
 80036ae:	edd3 7a00 	vldr	s15, [r3]
 80036b2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80036b6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80036ba:	d904      	bls.n	80036c6 <PullAndDrop+0x89e>
 80036bc:	4b18      	ldr	r3, [pc, #96]	; (8003720 <PullAndDrop+0x8f8>)
 80036be:	781b      	ldrb	r3, [r3, #0]
 80036c0:	b2db      	uxtb	r3, r3
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d013      	beq.n	80036ee <PullAndDrop+0x8c6>
					{
						//RunningTime = 0;
						SpeedCmd = 0; // reset/ stop
 80036c6:	4b1d      	ldr	r3, [pc, #116]	; (800373c <PullAndDrop+0x914>)
 80036c8:	f04f 0200 	mov.w	r2, #0
 80036cc:	601a      	str	r2, [r3, #0]

						AccRef = - 9.6;
 80036ce:	4b19      	ldr	r3, [pc, #100]	; (8003734 <PullAndDrop+0x90c>)
 80036d0:	4a22      	ldr	r2, [pc, #136]	; (800375c <PullAndDrop+0x934>)
 80036d2:	601a      	str	r2, [r3, #0]

						StartDropping = false; //
 80036d4:	4b22      	ldr	r3, [pc, #136]	; (8003760 <PullAndDrop+0x938>)
 80036d6:	2200      	movs	r2, #0
 80036d8:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 80036da:	4b12      	ldr	r3, [pc, #72]	; (8003724 <PullAndDrop+0x8fc>)
 80036dc:	2200      	movs	r2, #0
 80036de:	701a      	strb	r2, [r3, #0]
						StopPulseGenerating();
 80036e0:	f7fe f938 	bl	8001954 <StopPulseGenerating>
						CompleteRunning = true;
 80036e4:	4b1f      	ldr	r3, [pc, #124]	; (8003764 <PullAndDrop+0x93c>)
 80036e6:	2201      	movs	r2, #1
 80036e8:	701a      	strb	r2, [r3, #0]
						return true;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e000      	b.n	80036f0 <PullAndDrop+0x8c8>
					}
				}
				// END BRAKING STAGE
		}
		// END DROPPING TASK.
		return false;
 80036ee:	2300      	movs	r3, #0
	}
}
 80036f0:	4618      	mov	r0, r3
 80036f2:	46bd      	mov	sp, r7
 80036f4:	ecbd 8b02 	vpop	{d8}
 80036f8:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036fc:	f3af 8000 	nop.w
 8003700:	33333333 	.word	0x33333333
 8003704:	40233333 	.word	0x40233333
 8003708:	d2f1a9fc 	.word	0xd2f1a9fc
 800370c:	3f50624d 	.word	0x3f50624d
 8003710:	33333333 	.word	0x33333333
 8003714:	c0233333 	.word	0xc0233333
 8003718:	200004d0 	.word	0x200004d0
 800371c:	200004cc 	.word	0x200004cc
 8003720:	20000453 	.word	0x20000453
 8003724:	2000044e 	.word	0x2000044e
 8003728:	2000044b 	.word	0x2000044b
 800372c:	2000048c 	.word	0x2000048c
 8003730:	20000478 	.word	0x20000478
 8003734:	20000010 	.word	0x20000010
 8003738:	20000004 	.word	0x20000004
 800373c:	20000514 	.word	0x20000514
 8003740:	20000470 	.word	0x20000470
 8003744:	40240000 	.word	0x40240000
 8003748:	2000046c 	.word	0x2000046c
 800374c:	20000490 	.word	0x20000490
 8003750:	20000003 	.word	0x20000003
 8003754:	20000464 	.word	0x20000464
 8003758:	2000047c 	.word	0x2000047c
 800375c:	c119999a 	.word	0xc119999a
 8003760:	20000445 	.word	0x20000445
 8003764:	20000455 	.word	0x20000455

08003768 <Dropping>:
bool Dropping() // Dropping Program
// Mode = false -> Manual Running
// Mode = true -> Automatic Running
// return true if finishing, else return false while running
// StoppingDelayTime (ms): the time duration of stopping before pulling
{
 8003768:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800376c:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 800376e:	4bb6      	ldr	r3, [pc, #728]	; (8003a48 <Dropping+0x2e0>)
 8003770:	781b      	ldrb	r3, [r3, #0]
 8003772:	2b00      	cmp	r3, #0
 8003774:	d001      	beq.n	800377a <Dropping+0x12>
	{
		return true;
 8003776:	2301      	movs	r3, #1
 8003778:	e1aa      	b.n	8003ad0 <Dropping+0x368>
	}
	else
	{
		if (StartDropping && !StartPulling) // Dropping Stage
 800377a:	4bb4      	ldr	r3, [pc, #720]	; (8003a4c <Dropping+0x2e4>)
 800377c:	781b      	ldrb	r3, [r3, #0]
 800377e:	2b00      	cmp	r3, #0
 8003780:	f000 8112 	beq.w	80039a8 <Dropping+0x240>
 8003784:	4bb2      	ldr	r3, [pc, #712]	; (8003a50 <Dropping+0x2e8>)
 8003786:	781b      	ldrb	r3, [r3, #0]
 8003788:	f083 0301 	eor.w	r3, r3, #1
 800378c:	b2db      	uxtb	r3, r3
 800378e:	2b00      	cmp	r3, #0
 8003790:	f000 810a 	beq.w	80039a8 <Dropping+0x240>
		{
			if (!StartBraking) // Accelerating Stage
 8003794:	4baf      	ldr	r3, [pc, #700]	; (8003a54 <Dropping+0x2ec>)
 8003796:	781b      	ldrb	r3, [r3, #0]
 8003798:	f083 0301 	eor.w	r3, r3, #1
 800379c:	b2db      	uxtb	r3, r3
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d05b      	beq.n	800385a <Dropping+0xf2>
				// Calculate speed cmd
				//RunningTime += SampleTime;

				// Ramping the reference signal
				// LinearGeneration(&AccRef,8,-9.6+DroppingAccel);
				AccRef = -9.6+DroppingAccel;
 80037a2:	4bad      	ldr	r3, [pc, #692]	; (8003a58 <Dropping+0x2f0>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc fece 	bl	8000548 <__aeabi_f2d>
 80037ac:	a3a0      	add	r3, pc, #640	; (adr r3, 8003a30 <Dropping+0x2c8>)
 80037ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037b2:	f7fc fd69 	bl	8000288 <__aeabi_dsub>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4610      	mov	r0, r2
 80037bc:	4619      	mov	r1, r3
 80037be:	f7fd fa13 	bl	8000be8 <__aeabi_d2f>
 80037c2:	4603      	mov	r3, r0
 80037c4:	4aa5      	ldr	r2, [pc, #660]	; (8003a5c <Dropping+0x2f4>)
 80037c6:	6013      	str	r3, [r2, #0]
				if (IsOpenLoopControl) // Use open-loop control
 80037c8:	4ba5      	ldr	r3, [pc, #660]	; (8003a60 <Dropping+0x2f8>)
 80037ca:	781b      	ldrb	r3, [r3, #0]
 80037cc:	2b00      	cmp	r3, #0
 80037ce:	d013      	beq.n	80037f8 <Dropping+0x90>
				{
					//SpeedCmd = LinearSpeedGeneration(RunningTime,DroppingEpsilonAcc,0,0,DroppingMaxSpeed); // Feedforward term
					LinearGeneration(&SpeedCmd,DroppingEpsilonAcc*10,DroppingMaxSpeed); // Feedforward term
 80037d0:	4ba4      	ldr	r3, [pc, #656]	; (8003a64 <Dropping+0x2fc>)
 80037d2:	edd3 7a00 	vldr	s15, [r3]
 80037d6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80037da:	ee67 7a87 	vmul.f32	s15, s15, s14
 80037de:	4ba2      	ldr	r3, [pc, #648]	; (8003a68 <Dropping+0x300>)
 80037e0:	881b      	ldrh	r3, [r3, #0]
 80037e2:	ee07 3a10 	vmov	s14, r3
 80037e6:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80037ea:	eef0 0a47 	vmov.f32	s1, s14
 80037ee:	eeb0 0a67 	vmov.f32	s0, s15
 80037f2:	489e      	ldr	r0, [pc, #632]	; (8003a6c <Dropping+0x304>)
 80037f4:	f7fe f850 	bl	8001898 <LinearGeneration>
//					AccSet = AccSet + AccRef + 9.6;
//					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
//					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,DroppingMaxSpeed); // Feedforward term
//				}

				if (SpeedCmd != 0)
 80037f8:	4b9c      	ldr	r3, [pc, #624]	; (8003a6c <Dropping+0x304>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003802:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003806:	d00e      	beq.n	8003826 <Dropping+0xbe>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003808:	4b99      	ldr	r3, [pc, #612]	; (8003a70 <Dropping+0x308>)
 800380a:	781b      	ldrb	r3, [r3, #0]
 800380c:	4a97      	ldr	r2, [pc, #604]	; (8003a6c <Dropping+0x304>)
 800380e:	edd2 7a00 	vldr	s15, [r2]
 8003812:	eeb0 0a67 	vmov.f32	s0, s15
 8003816:	4618      	mov	r0, r3
 8003818:	f7fe f8fe 	bl	8001a18 <CalculateTimer3Period>
 800381c:	4603      	mov	r3, r0
 800381e:	b29a      	uxth	r2, r3
 8003820:	4b94      	ldr	r3, [pc, #592]	; (8003a74 <Dropping+0x30c>)
 8003822:	801a      	strh	r2, [r3, #0]
 8003824:	e001      	b.n	800382a <Dropping+0xc2>
					//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else
				{
					StopPulseGenerating();
 8003826:	f7fe f895 	bl	8001954 <StopPulseGenerating>
				}
				//if (SpeedCmd >= DroppingMaxSpeed || fabs(ObjectPosition) >= DroppingAccelDistance )
				if (ObjectPosition >= DroppingAccelDistance)
 800382a:	4b93      	ldr	r3, [pc, #588]	; (8003a78 <Dropping+0x310>)
 800382c:	ed93 7a00 	vldr	s14, [r3]
 8003830:	4b92      	ldr	r3, [pc, #584]	; (8003a7c <Dropping+0x314>)
 8003832:	edd3 7a00 	vldr	s15, [r3]
 8003836:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800383a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800383e:	f2c0 80b3 	blt.w	80039a8 <Dropping+0x240>
				{
					//RunningTime = 0;
					StartBraking = true;
 8003842:	4b84      	ldr	r3, [pc, #528]	; (8003a54 <Dropping+0x2ec>)
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
					IntergraError = 0;
 8003848:	4b8d      	ldr	r3, [pc, #564]	; (8003a80 <Dropping+0x318>)
 800384a:	f04f 0200 	mov.w	r2, #0
 800384e:	601a      	str	r2, [r3, #0]
					PreError = 0;
 8003850:	4b8c      	ldr	r3, [pc, #560]	; (8003a84 <Dropping+0x31c>)
 8003852:	f04f 0200 	mov.w	r2, #0
 8003856:	601a      	str	r2, [r3, #0]
 8003858:	e0a6      	b.n	80039a8 <Dropping+0x240>
			}
			else // Braking Stage
			{
				//RunningTime += SampleTime;

				AccRef = -9.8-DroppingDecel;
 800385a:	4b8b      	ldr	r3, [pc, #556]	; (8003a88 <Dropping+0x320>)
 800385c:	681b      	ldr	r3, [r3, #0]
 800385e:	4618      	mov	r0, r3
 8003860:	f7fc fe72 	bl	8000548 <__aeabi_f2d>
 8003864:	4602      	mov	r2, r0
 8003866:	460b      	mov	r3, r1
 8003868:	a173      	add	r1, pc, #460	; (adr r1, 8003a38 <Dropping+0x2d0>)
 800386a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800386e:	f7fc fd0b 	bl	8000288 <__aeabi_dsub>
 8003872:	4602      	mov	r2, r0
 8003874:	460b      	mov	r3, r1
 8003876:	4610      	mov	r0, r2
 8003878:	4619      	mov	r1, r3
 800387a:	f7fd f9b5 	bl	8000be8 <__aeabi_d2f>
 800387e:	4603      	mov	r3, r0
 8003880:	4a76      	ldr	r2, [pc, #472]	; (8003a5c <Dropping+0x2f4>)
 8003882:	6013      	str	r3, [r2, #0]
//				FeedFWSpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,DroppingMaxSpeed,0,DroppingMaxSpeed);
//				PIDSpeedCmd = PIDCalculate(AccRef,AccZ,-850,850, true); // PID term

				//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,TransitionSpeed,0,TransitionSpeed);
				//SpeedCmd = LinearGeneration(RunningTime,-DroppingEpsilonDec*10,TransitionSpeed,0,TransitionSpeed);
				SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8003884:	4b79      	ldr	r3, [pc, #484]	; (8003a6c <Dropping+0x304>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4618      	mov	r0, r3
 800388a:	f7fc fe5d 	bl	8000548 <__aeabi_f2d>
 800388e:	4604      	mov	r4, r0
 8003890:	460d      	mov	r5, r1
 8003892:	4b7e      	ldr	r3, [pc, #504]	; (8003a8c <Dropping+0x324>)
 8003894:	781b      	ldrb	r3, [r3, #0]
 8003896:	4618      	mov	r0, r3
 8003898:	f7fc fe44 	bl	8000524 <__aeabi_i2d>
 800389c:	a368      	add	r3, pc, #416	; (adr r3, 8003a40 <Dropping+0x2d8>)
 800389e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038a2:	f7fc fea9 	bl	80005f8 <__aeabi_dmul>
 80038a6:	4602      	mov	r2, r0
 80038a8:	460b      	mov	r3, r1
 80038aa:	4690      	mov	r8, r2
 80038ac:	4699      	mov	r9, r3
 80038ae:	4b6b      	ldr	r3, [pc, #428]	; (8003a5c <Dropping+0x2f4>)
 80038b0:	681b      	ldr	r3, [r3, #0]
 80038b2:	4618      	mov	r0, r3
 80038b4:	f7fc fe48 	bl	8000548 <__aeabi_f2d>
 80038b8:	a35d      	add	r3, pc, #372	; (adr r3, 8003a30 <Dropping+0x2c8>)
 80038ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038be:	f7fc fce5 	bl	800028c <__adddf3>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4640      	mov	r0, r8
 80038c8:	4649      	mov	r1, r9
 80038ca:	f7fc fe95 	bl	80005f8 <__aeabi_dmul>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4610      	mov	r0, r2
 80038d4:	4619      	mov	r1, r3
 80038d6:	f04f 0200 	mov.w	r2, #0
 80038da:	4b6d      	ldr	r3, [pc, #436]	; (8003a90 <Dropping+0x328>)
 80038dc:	f7fc fe8c 	bl	80005f8 <__aeabi_dmul>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4690      	mov	r8, r2
 80038e6:	4699      	mov	r9, r3
 80038e8:	4b6a      	ldr	r3, [pc, #424]	; (8003a94 <Dropping+0x32c>)
 80038ea:	681b      	ldr	r3, [r3, #0]
 80038ec:	4618      	mov	r0, r3
 80038ee:	f7fc fe2b 	bl	8000548 <__aeabi_f2d>
 80038f2:	4602      	mov	r2, r0
 80038f4:	460b      	mov	r3, r1
 80038f6:	4640      	mov	r0, r8
 80038f8:	4649      	mov	r1, r9
 80038fa:	f7fc ffa7 	bl	800084c <__aeabi_ddiv>
 80038fe:	4602      	mov	r2, r0
 8003900:	460b      	mov	r3, r1
 8003902:	4620      	mov	r0, r4
 8003904:	4629      	mov	r1, r5
 8003906:	f7fc fcc1 	bl	800028c <__adddf3>
 800390a:	4602      	mov	r2, r0
 800390c:	460b      	mov	r3, r1
 800390e:	4610      	mov	r0, r2
 8003910:	4619      	mov	r1, r3
 8003912:	f7fd f969 	bl	8000be8 <__aeabi_d2f>
 8003916:	4603      	mov	r3, r0
 8003918:	4a54      	ldr	r2, [pc, #336]	; (8003a6c <Dropping+0x304>)
 800391a:	6013      	str	r3, [r2, #0]
				if (SpeedCmd <= 0)
 800391c:	4b53      	ldr	r3, [pc, #332]	; (8003a6c <Dropping+0x304>)
 800391e:	edd3 7a00 	vldr	s15, [r3]
 8003922:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003926:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800392a:	d803      	bhi.n	8003934 <Dropping+0x1cc>
					SpeedCmd = 0;
 800392c:	4b4f      	ldr	r3, [pc, #316]	; (8003a6c <Dropping+0x304>)
 800392e:	f04f 0200 	mov.w	r2, #0
 8003932:	601a      	str	r2, [r3, #0]
				if (SpeedCmd >= 810)
 8003934:	4b4d      	ldr	r3, [pc, #308]	; (8003a6c <Dropping+0x304>)
 8003936:	edd3 7a00 	vldr	s15, [r3]
 800393a:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003a98 <Dropping+0x330>
 800393e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003946:	db02      	blt.n	800394e <Dropping+0x1e6>
					SpeedCmd = 810;
 8003948:	4b48      	ldr	r3, [pc, #288]	; (8003a6c <Dropping+0x304>)
 800394a:	4a54      	ldr	r2, [pc, #336]	; (8003a9c <Dropping+0x334>)
 800394c:	601a      	str	r2, [r3, #0]

				if (SpeedCmd != 0)
 800394e:	4b47      	ldr	r3, [pc, #284]	; (8003a6c <Dropping+0x304>)
 8003950:	edd3 7a00 	vldr	s15, [r3]
 8003954:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003958:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800395c:	d00e      	beq.n	800397c <Dropping+0x214>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800395e:	4b44      	ldr	r3, [pc, #272]	; (8003a70 <Dropping+0x308>)
 8003960:	781b      	ldrb	r3, [r3, #0]
 8003962:	4a42      	ldr	r2, [pc, #264]	; (8003a6c <Dropping+0x304>)
 8003964:	edd2 7a00 	vldr	s15, [r2]
 8003968:	eeb0 0a67 	vmov.f32	s0, s15
 800396c:	4618      	mov	r0, r3
 800396e:	f7fe f853 	bl	8001a18 <CalculateTimer3Period>
 8003972:	4603      	mov	r3, r0
 8003974:	b29a      	uxth	r2, r3
 8003976:	4b3f      	ldr	r3, [pc, #252]	; (8003a74 <Dropping+0x30c>)
 8003978:	801a      	strh	r2, [r3, #0]
 800397a:	e001      	b.n	8003980 <Dropping+0x218>
					// Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else
				{
					StopPulseGenerating();
 800397c:	f7fd ffea 	bl	8001954 <StopPulseGenerating>
				}
				if (SpeedCmd <= 0) // Stop braking
 8003980:	4b3a      	ldr	r3, [pc, #232]	; (8003a6c <Dropping+0x304>)
 8003982:	edd3 7a00 	vldr	s15, [r3]
 8003986:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800398a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800398e:	d80b      	bhi.n	80039a8 <Dropping+0x240>
				{
					StopPulseGenerating();
 8003990:	f7fd ffe0 	bl	8001954 <StopPulseGenerating>
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 8003994:	4b35      	ldr	r3, [pc, #212]	; (8003a6c <Dropping+0x304>)
 8003996:	f04f 0200 	mov.w	r2, #0
 800399a:	601a      	str	r2, [r3, #0]
					//AccRef = - 9.8;

					StartDropping = false; //
 800399c:	4b2b      	ldr	r3, [pc, #172]	; (8003a4c <Dropping+0x2e4>)
 800399e:	2200      	movs	r2, #0
 80039a0:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 80039a2:	4b2c      	ldr	r3, [pc, #176]	; (8003a54 <Dropping+0x2ec>)
 80039a4:	2200      	movs	r2, #0
 80039a6:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (!StartDropping && !StartPulling) // Waiting for some seconds before pulling up
 80039a8:	4b28      	ldr	r3, [pc, #160]	; (8003a4c <Dropping+0x2e4>)
 80039aa:	781b      	ldrb	r3, [r3, #0]
 80039ac:	f083 0301 	eor.w	r3, r3, #1
 80039b0:	b2db      	uxtb	r3, r3
 80039b2:	2b00      	cmp	r3, #0
 80039b4:	d019      	beq.n	80039ea <Dropping+0x282>
 80039b6:	4b26      	ldr	r3, [pc, #152]	; (8003a50 <Dropping+0x2e8>)
 80039b8:	781b      	ldrb	r3, [r3, #0]
 80039ba:	f083 0301 	eor.w	r3, r3, #1
 80039be:	b2db      	uxtb	r3, r3
 80039c0:	2b00      	cmp	r3, #0
 80039c2:	d012      	beq.n	80039ea <Dropping+0x282>
		{
	//		POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);
	//		if (POSReach) // Check if position is reached or not
	//		{

				if (WaitingMiliSecond(StoppingTime)) // Wait some second
 80039c4:	4b36      	ldr	r3, [pc, #216]	; (8003aa0 <Dropping+0x338>)
 80039c6:	881b      	ldrh	r3, [r3, #0]
 80039c8:	4618      	mov	r0, r3
 80039ca:	f7fd ffff 	bl	80019cc <WaitingMiliSecond>
 80039ce:	4603      	mov	r3, r0
 80039d0:	2b00      	cmp	r3, #0
 80039d2:	d00a      	beq.n	80039ea <Dropping+0x282>
				{
					// Change to pulling stage
					StartPulling = true;
 80039d4:	4b1e      	ldr	r3, [pc, #120]	; (8003a50 <Dropping+0x2e8>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]
					//Timer3CountPeriod = CalculateTimer3Period(MotorDriver, PullingSpeed);
					// Timer3CountPeriod = (int)((float)(120000000.0/((float)PullingSpeed*(float)EncoderResolution)) + 0.5);
					// Start pulling to the home position
	//				StepPulseCmd = (int)MotorEncPulse/8; // calculate # of pulse cmd to return to the top postion
	//				IsStepPulseCmd = true;
					PRIsToggled = true;	// true = Pulling
 80039da:	4b32      	ldr	r3, [pc, #200]	; (8003aa4 <Dropping+0x33c>)
 80039dc:	2201      	movs	r2, #1
 80039de:	701a      	strb	r2, [r3, #0]

					//Start Running
					Direction = false; // pulling up direction
 80039e0:	4b31      	ldr	r3, [pc, #196]	; (8003aa8 <Dropping+0x340>)
 80039e2:	2200      	movs	r2, #0
 80039e4:	701a      	strb	r2, [r3, #0]
					StartPulseGenerating();
 80039e6:	f7fd ffd3 	bl	8001990 <StartPulseGenerating>
	//				DisableSTOP();
				}
	//		}
		}

		if (!StartDropping && StartPulling) // Pulling Stage
 80039ea:	4b18      	ldr	r3, [pc, #96]	; (8003a4c <Dropping+0x2e4>)
 80039ec:	781b      	ldrb	r3, [r3, #0]
 80039ee:	f083 0301 	eor.w	r3, r3, #1
 80039f2:	b2db      	uxtb	r3, r3
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d06a      	beq.n	8003ace <Dropping+0x366>
 80039f8:	4b15      	ldr	r3, [pc, #84]	; (8003a50 <Dropping+0x2e8>)
 80039fa:	781b      	ldrb	r3, [r3, #0]
 80039fc:	2b00      	cmp	r3, #0
 80039fe:	d066      	beq.n	8003ace <Dropping+0x366>
		{
			if (MotorDriver) // FDA7000, big model
 8003a00:	4b1b      	ldr	r3, [pc, #108]	; (8003a70 <Dropping+0x308>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	2b00      	cmp	r3, #0
 8003a06:	d051      	beq.n	8003aac <Dropping+0x344>
			{
				if (CheckGoingToRefPosition(false, 0))
 8003a08:	2100      	movs	r1, #0
 8003a0a:	2000      	movs	r0, #0
 8003a0c:	f7fe f890 	bl	8001b30 <CheckGoingToRefPosition>
 8003a10:	4603      	mov	r3, r0
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d05b      	beq.n	8003ace <Dropping+0x366>
				{
		//			POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);
		//			if (POSReach) // Reaching to the top/home postion
		//			{
						StartPulling = false;
 8003a16:	4b0e      	ldr	r3, [pc, #56]	; (8003a50 <Dropping+0x2e8>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 8003a1c:	4b0a      	ldr	r3, [pc, #40]	; (8003a48 <Dropping+0x2e0>)
 8003a1e:	2201      	movs	r2, #1
 8003a20:	701a      	strb	r2, [r3, #0]

						StopPulseGenerating();
 8003a22:	f7fd ff97 	bl	8001954 <StopPulseGenerating>
						return true;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e052      	b.n	8003ad0 <Dropping+0x368>
 8003a2a:	bf00      	nop
 8003a2c:	f3af 8000 	nop.w
 8003a30:	33333333 	.word	0x33333333
 8003a34:	40233333 	.word	0x40233333
 8003a38:	9999999a 	.word	0x9999999a
 8003a3c:	c0239999 	.word	0xc0239999
 8003a40:	d2f1a9fc 	.word	0xd2f1a9fc
 8003a44:	3f50624d 	.word	0x3f50624d
 8003a48:	20000455 	.word	0x20000455
 8003a4c:	20000445 	.word	0x20000445
 8003a50:	2000044d 	.word	0x2000044d
 8003a54:	2000044e 	.word	0x2000044e
 8003a58:	20000478 	.word	0x20000478
 8003a5c:	20000010 	.word	0x20000010
 8003a60:	20000004 	.word	0x20000004
 8003a64:	20000480 	.word	0x20000480
 8003a68:	20000490 	.word	0x20000490
 8003a6c:	20000514 	.word	0x20000514
 8003a70:	20000003 	.word	0x20000003
 8003a74:	20000464 	.word	0x20000464
 8003a78:	20000554 	.word	0x20000554
 8003a7c:	20000494 	.word	0x20000494
 8003a80:	20000544 	.word	0x20000544
 8003a84:	20000550 	.word	0x20000550
 8003a88:	2000047c 	.word	0x2000047c
 8003a8c:	20000470 	.word	0x20000470
 8003a90:	40240000 	.word	0x40240000
 8003a94:	2000046c 	.word	0x2000046c
 8003a98:	444a8000 	.word	0x444a8000
 8003a9c:	444a8000 	.word	0x444a8000
 8003aa0:	20000472 	.word	0x20000472
 8003aa4:	2000045a 	.word	0x2000045a
 8003aa8:	20000448 	.word	0x20000448
		//			}
				}
			}
			else // ASDA A3
			{
				if (CheckGoingToRefPosition(false, 0))
 8003aac:	2100      	movs	r1, #0
 8003aae:	2000      	movs	r0, #0
 8003ab0:	f7fe f83e 	bl	8001b30 <CheckGoingToRefPosition>
 8003ab4:	4603      	mov	r3, r0
 8003ab6:	2b00      	cmp	r3, #0
 8003ab8:	d009      	beq.n	8003ace <Dropping+0x366>
				{
						StartPulling = false;
 8003aba:	4b07      	ldr	r3, [pc, #28]	; (8003ad8 <Dropping+0x370>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 8003ac0:	4b06      	ldr	r3, [pc, #24]	; (8003adc <Dropping+0x374>)
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	701a      	strb	r2, [r3, #0]

						StopPulseGenerating();
 8003ac6:	f7fd ff45 	bl	8001954 <StopPulseGenerating>
						return true;
 8003aca:	2301      	movs	r3, #1
 8003acc:	e000      	b.n	8003ad0 <Dropping+0x368>
				}
			}
		}
		return false;
 8003ace:	2300      	movs	r3, #0
	}
}
 8003ad0:	4618      	mov	r0, r3
 8003ad2:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003ad6:	bf00      	nop
 8003ad8:	2000044d 	.word	0x2000044d
 8003adc:	20000455 	.word	0x20000455

08003ae0 <StopExperiment>:

void StopExperiment ()
{
 8003ae0:	b580      	push	{r7, lr}
 8003ae2:	af00      	add	r7, sp, #0
	TargetPosition = 0;
 8003ae4:	4b12      	ldr	r3, [pc, #72]	; (8003b30 <StopExperiment+0x50>)
 8003ae6:	2200      	movs	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
	PositionPulseCmd = 0;
 8003aea:	4b12      	ldr	r3, [pc, #72]	; (8003b34 <StopExperiment+0x54>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	601a      	str	r2, [r3, #0]
	StartPulseCmdCounting = false;
 8003af0:	4b11      	ldr	r3, [pc, #68]	; (8003b38 <StopExperiment+0x58>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	701a      	strb	r2, [r3, #0]
	IsReachTargetPosition = false;
 8003af6:	4b11      	ldr	r3, [pc, #68]	; (8003b3c <StopExperiment+0x5c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	701a      	strb	r2, [r3, #0]

	// Reset all the flag and state
	StartRunning = false;
 8003afc:	4b10      	ldr	r3, [pc, #64]	; (8003b40 <StopExperiment+0x60>)
 8003afe:	2200      	movs	r2, #0
 8003b00:	701a      	strb	r2, [r3, #0]
	StartDropping = false;
 8003b02:	4b10      	ldr	r3, [pc, #64]	; (8003b44 <StopExperiment+0x64>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	701a      	strb	r2, [r3, #0]
	StartPulling = false;
 8003b08:	4b0f      	ldr	r3, [pc, #60]	; (8003b48 <StopExperiment+0x68>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	701a      	strb	r2, [r3, #0]
	StartBraking = false;
 8003b0e:	4b0f      	ldr	r3, [pc, #60]	; (8003b4c <StopExperiment+0x6c>)
 8003b10:	2200      	movs	r2, #0
 8003b12:	701a      	strb	r2, [r3, #0]
	StartAccleratePulling = false;
 8003b14:	4b0e      	ldr	r3, [pc, #56]	; (8003b50 <StopExperiment+0x70>)
 8003b16:	2200      	movs	r2, #0
 8003b18:	701a      	strb	r2, [r3, #0]
	StopPulseGenerating(); // Stop pulse generation
 8003b1a:	f7fd ff1b 	bl	8001954 <StopPulseGenerating>
	//RunningTime = 0;
	Timer3CountPeriod = 0;
 8003b1e:	4b0d      	ldr	r3, [pc, #52]	; (8003b54 <StopExperiment+0x74>)
 8003b20:	2200      	movs	r2, #0
 8003b22:	801a      	strh	r2, [r3, #0]
	SpeedCmd = 0;
 8003b24:	4b0c      	ldr	r3, [pc, #48]	; (8003b58 <StopExperiment+0x78>)
 8003b26:	f04f 0200 	mov.w	r2, #0
 8003b2a:	601a      	str	r2, [r3, #0]
}
 8003b2c:	bf00      	nop
 8003b2e:	bd80      	pop	{r7, pc}
 8003b30:	200004cc 	.word	0x200004cc
 8003b34:	200004d0 	.word	0x200004d0
 8003b38:	2000044b 	.word	0x2000044b
 8003b3c:	20000453 	.word	0x20000453
 8003b40:	20000446 	.word	0x20000446
 8003b44:	20000445 	.word	0x20000445
 8003b48:	2000044d 	.word	0x2000044d
 8003b4c:	2000044e 	.word	0x2000044e
 8003b50:	20000454 	.word	0x20000454
 8003b54:	20000464 	.word	0x20000464
 8003b58:	20000514 	.word	0x20000514
 8003b5c:	00000000 	.word	0x00000000

08003b60 <CalculateRunningSpec>:
void CalculateRunningSpec () // Calculate running parameters
{
 8003b60:	b5b0      	push	{r4, r5, r7, lr}
 8003b62:	ed2d 8b02 	vpush	{d8}
 8003b66:	af00      	add	r7, sp, #0
	GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8003b68:	4bd3      	ldr	r3, [pc, #844]	; (8003eb8 <CalculateRunningSpec+0x358>)
 8003b6a:	781b      	ldrb	r3, [r3, #0]
 8003b6c:	4618      	mov	r0, r3
 8003b6e:	f7fc fcd9 	bl	8000524 <__aeabi_i2d>
 8003b72:	a3c7      	add	r3, pc, #796	; (adr r3, 8003e90 <CalculateRunningSpec+0x330>)
 8003b74:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b78:	f7fc fd3e 	bl	80005f8 <__aeabi_dmul>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	4bcc      	ldr	r3, [pc, #816]	; (8003ebc <CalculateRunningSpec+0x35c>)
 8003b8a:	f7fc fe5f 	bl	800084c <__aeabi_ddiv>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4610      	mov	r0, r2
 8003b94:	4619      	mov	r1, r3
 8003b96:	f7fd f827 	bl	8000be8 <__aeabi_d2f>
 8003b9a:	4603      	mov	r3, r0
 8003b9c:	4ac8      	ldr	r2, [pc, #800]	; (8003ec0 <CalculateRunningSpec+0x360>)
 8003b9e:	6013      	str	r3, [r2, #0]

	// Dropping Stage Calculations
	DroppingMaxSpeed = (uint16_t)(10*sqrt(2*DroppingAccel*DroppingAccelDistance)/(DrumRadius)); // in rpm; 10~60/2pi
 8003ba0:	4bc8      	ldr	r3, [pc, #800]	; (8003ec4 <CalculateRunningSpec+0x364>)
 8003ba2:	edd3 7a00 	vldr	s15, [r3]
 8003ba6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003baa:	4bc7      	ldr	r3, [pc, #796]	; (8003ec8 <CalculateRunningSpec+0x368>)
 8003bac:	edd3 7a00 	vldr	s15, [r3]
 8003bb0:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003bb4:	ee17 0a90 	vmov	r0, s15
 8003bb8:	f7fc fcc6 	bl	8000548 <__aeabi_f2d>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	ec43 2b10 	vmov	d0, r2, r3
 8003bc4:	f00a fee0 	bl	800e988 <sqrt>
 8003bc8:	ec51 0b10 	vmov	r0, r1, d0
 8003bcc:	f04f 0200 	mov.w	r2, #0
 8003bd0:	4bbe      	ldr	r3, [pc, #760]	; (8003ecc <CalculateRunningSpec+0x36c>)
 8003bd2:	f7fc fd11 	bl	80005f8 <__aeabi_dmul>
 8003bd6:	4602      	mov	r2, r0
 8003bd8:	460b      	mov	r3, r1
 8003bda:	4614      	mov	r4, r2
 8003bdc:	461d      	mov	r5, r3
 8003bde:	4bbc      	ldr	r3, [pc, #752]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	4618      	mov	r0, r3
 8003be4:	f7fc fcb0 	bl	8000548 <__aeabi_f2d>
 8003be8:	4602      	mov	r2, r0
 8003bea:	460b      	mov	r3, r1
 8003bec:	4620      	mov	r0, r4
 8003bee:	4629      	mov	r1, r5
 8003bf0:	f7fc fe2c 	bl	800084c <__aeabi_ddiv>
 8003bf4:	4602      	mov	r2, r0
 8003bf6:	460b      	mov	r3, r1
 8003bf8:	4610      	mov	r0, r2
 8003bfa:	4619      	mov	r1, r3
 8003bfc:	f7fc ffd4 	bl	8000ba8 <__aeabi_d2uiz>
 8003c00:	4603      	mov	r3, r0
 8003c02:	b29a      	uxth	r2, r3
 8003c04:	4bb3      	ldr	r3, [pc, #716]	; (8003ed4 <CalculateRunningSpec+0x374>)
 8003c06:	801a      	strh	r2, [r3, #0]
	DroppingEpsilonAcc = DroppingAccel/DrumRadius;
 8003c08:	4bae      	ldr	r3, [pc, #696]	; (8003ec4 <CalculateRunningSpec+0x364>)
 8003c0a:	edd3 6a00 	vldr	s13, [r3]
 8003c0e:	4bb0      	ldr	r3, [pc, #704]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003c10:	ed93 7a00 	vldr	s14, [r3]
 8003c14:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c18:	4baf      	ldr	r3, [pc, #700]	; (8003ed8 <CalculateRunningSpec+0x378>)
 8003c1a:	edc3 7a00 	vstr	s15, [r3]
	DroppingEpsilonDec = DroppingDecel/DrumRadius;
 8003c1e:	4baf      	ldr	r3, [pc, #700]	; (8003edc <CalculateRunningSpec+0x37c>)
 8003c20:	edd3 6a00 	vldr	s13, [r3]
 8003c24:	4baa      	ldr	r3, [pc, #680]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003c26:	ed93 7a00 	vldr	s14, [r3]
 8003c2a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003c2e:	4bac      	ldr	r3, [pc, #688]	; (8003ee0 <CalculateRunningSpec+0x380>)
 8003c30:	edc3 7a00 	vstr	s15, [r3]

	DroppingDecelDistance = (pow(DroppingMaxSpeed*2*3.14*DrumRadius/60,2))/(2*DroppingDecel); // unit: m
 8003c34:	4ba7      	ldr	r3, [pc, #668]	; (8003ed4 <CalculateRunningSpec+0x374>)
 8003c36:	881b      	ldrh	r3, [r3, #0]
 8003c38:	005b      	lsls	r3, r3, #1
 8003c3a:	4618      	mov	r0, r3
 8003c3c:	f7fc fc72 	bl	8000524 <__aeabi_i2d>
 8003c40:	a395      	add	r3, pc, #596	; (adr r3, 8003e98 <CalculateRunningSpec+0x338>)
 8003c42:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c46:	f7fc fcd7 	bl	80005f8 <__aeabi_dmul>
 8003c4a:	4602      	mov	r2, r0
 8003c4c:	460b      	mov	r3, r1
 8003c4e:	4614      	mov	r4, r2
 8003c50:	461d      	mov	r5, r3
 8003c52:	4b9f      	ldr	r3, [pc, #636]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	4618      	mov	r0, r3
 8003c58:	f7fc fc76 	bl	8000548 <__aeabi_f2d>
 8003c5c:	4602      	mov	r2, r0
 8003c5e:	460b      	mov	r3, r1
 8003c60:	4620      	mov	r0, r4
 8003c62:	4629      	mov	r1, r5
 8003c64:	f7fc fcc8 	bl	80005f8 <__aeabi_dmul>
 8003c68:	4602      	mov	r2, r0
 8003c6a:	460b      	mov	r3, r1
 8003c6c:	4610      	mov	r0, r2
 8003c6e:	4619      	mov	r1, r3
 8003c70:	f04f 0200 	mov.w	r2, #0
 8003c74:	4b9b      	ldr	r3, [pc, #620]	; (8003ee4 <CalculateRunningSpec+0x384>)
 8003c76:	f7fc fde9 	bl	800084c <__aeabi_ddiv>
 8003c7a:	4602      	mov	r2, r0
 8003c7c:	460b      	mov	r3, r1
 8003c7e:	ec43 2b17 	vmov	d7, r2, r3
 8003c82:	ed9f 1b87 	vldr	d1, [pc, #540]	; 8003ea0 <CalculateRunningSpec+0x340>
 8003c86:	eeb0 0a47 	vmov.f32	s0, s14
 8003c8a:	eef0 0a67 	vmov.f32	s1, s15
 8003c8e:	f00a fe0b 	bl	800e8a8 <pow>
 8003c92:	ec55 4b10 	vmov	r4, r5, d0
 8003c96:	4b91      	ldr	r3, [pc, #580]	; (8003edc <CalculateRunningSpec+0x37c>)
 8003c98:	edd3 7a00 	vldr	s15, [r3]
 8003c9c:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003ca0:	ee17 0a90 	vmov	r0, s15
 8003ca4:	f7fc fc50 	bl	8000548 <__aeabi_f2d>
 8003ca8:	4602      	mov	r2, r0
 8003caa:	460b      	mov	r3, r1
 8003cac:	4620      	mov	r0, r4
 8003cae:	4629      	mov	r1, r5
 8003cb0:	f7fc fdcc 	bl	800084c <__aeabi_ddiv>
 8003cb4:	4602      	mov	r2, r0
 8003cb6:	460b      	mov	r3, r1
 8003cb8:	4610      	mov	r0, r2
 8003cba:	4619      	mov	r1, r3
 8003cbc:	f7fc ff94 	bl	8000be8 <__aeabi_d2f>
 8003cc0:	4603      	mov	r3, r0
 8003cc2:	4a89      	ldr	r2, [pc, #548]	; (8003ee8 <CalculateRunningSpec+0x388>)
 8003cc4:	6013      	str	r3, [r2, #0]
	DroppingDecelPulseCmd = ((int)(EncoderResolution*DroppingDecelDistance/(2*3.14*DrumRadius))); // unit: pulses
 8003cc6:	4b89      	ldr	r3, [pc, #548]	; (8003eec <CalculateRunningSpec+0x38c>)
 8003cc8:	881b      	ldrh	r3, [r3, #0]
 8003cca:	ee07 3a90 	vmov	s15, r3
 8003cce:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003cd2:	4b85      	ldr	r3, [pc, #532]	; (8003ee8 <CalculateRunningSpec+0x388>)
 8003cd4:	edd3 7a00 	vldr	s15, [r3]
 8003cd8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cdc:	ee17 0a90 	vmov	r0, s15
 8003ce0:	f7fc fc32 	bl	8000548 <__aeabi_f2d>
 8003ce4:	4604      	mov	r4, r0
 8003ce6:	460d      	mov	r5, r1
 8003ce8:	4b79      	ldr	r3, [pc, #484]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	4618      	mov	r0, r3
 8003cee:	f7fc fc2b 	bl	8000548 <__aeabi_f2d>
 8003cf2:	a36d      	add	r3, pc, #436	; (adr r3, 8003ea8 <CalculateRunningSpec+0x348>)
 8003cf4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cf8:	f7fc fc7e 	bl	80005f8 <__aeabi_dmul>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	460b      	mov	r3, r1
 8003d00:	4620      	mov	r0, r4
 8003d02:	4629      	mov	r1, r5
 8003d04:	f7fc fda2 	bl	800084c <__aeabi_ddiv>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	460b      	mov	r3, r1
 8003d0c:	4610      	mov	r0, r2
 8003d0e:	4619      	mov	r1, r3
 8003d10:	f7fc ff22 	bl	8000b58 <__aeabi_d2iz>
 8003d14:	4603      	mov	r3, r0
 8003d16:	4a76      	ldr	r2, [pc, #472]	; (8003ef0 <CalculateRunningSpec+0x390>)
 8003d18:	6013      	str	r3, [r2, #0]

	BottomFreeDropPulseCmd = ((int)(EncoderResolution*DroppingAccelDistance/(2*3.14*DrumRadius)));
 8003d1a:	4b74      	ldr	r3, [pc, #464]	; (8003eec <CalculateRunningSpec+0x38c>)
 8003d1c:	881b      	ldrh	r3, [r3, #0]
 8003d1e:	ee07 3a90 	vmov	s15, r3
 8003d22:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003d26:	4b68      	ldr	r3, [pc, #416]	; (8003ec8 <CalculateRunningSpec+0x368>)
 8003d28:	edd3 7a00 	vldr	s15, [r3]
 8003d2c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d30:	ee17 0a90 	vmov	r0, s15
 8003d34:	f7fc fc08 	bl	8000548 <__aeabi_f2d>
 8003d38:	4604      	mov	r4, r0
 8003d3a:	460d      	mov	r5, r1
 8003d3c:	4b64      	ldr	r3, [pc, #400]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003d3e:	681b      	ldr	r3, [r3, #0]
 8003d40:	4618      	mov	r0, r3
 8003d42:	f7fc fc01 	bl	8000548 <__aeabi_f2d>
 8003d46:	a358      	add	r3, pc, #352	; (adr r3, 8003ea8 <CalculateRunningSpec+0x348>)
 8003d48:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d4c:	f7fc fc54 	bl	80005f8 <__aeabi_dmul>
 8003d50:	4602      	mov	r2, r0
 8003d52:	460b      	mov	r3, r1
 8003d54:	4620      	mov	r0, r4
 8003d56:	4629      	mov	r1, r5
 8003d58:	f7fc fd78 	bl	800084c <__aeabi_ddiv>
 8003d5c:	4602      	mov	r2, r0
 8003d5e:	460b      	mov	r3, r1
 8003d60:	4610      	mov	r0, r2
 8003d62:	4619      	mov	r1, r3
 8003d64:	f7fc fef8 	bl	8000b58 <__aeabi_d2iz>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	4a62      	ldr	r2, [pc, #392]	; (8003ef4 <CalculateRunningSpec+0x394>)
 8003d6c:	6013      	str	r3, [r2, #0]

	// Pulling Stage Calculations
	PullingMaxSpeed = (uint16_t)(9.5*sqrt(2*PullingAccel*PullingAccelDistance)/(DrumRadius)); // in rpm
 8003d6e:	4b62      	ldr	r3, [pc, #392]	; (8003ef8 <CalculateRunningSpec+0x398>)
 8003d70:	edd3 7a00 	vldr	s15, [r3]
 8003d74:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003d78:	4b60      	ldr	r3, [pc, #384]	; (8003efc <CalculateRunningSpec+0x39c>)
 8003d7a:	edd3 7a00 	vldr	s15, [r3]
 8003d7e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d82:	ee17 0a90 	vmov	r0, s15
 8003d86:	f7fc fbdf 	bl	8000548 <__aeabi_f2d>
 8003d8a:	4602      	mov	r2, r0
 8003d8c:	460b      	mov	r3, r1
 8003d8e:	ec43 2b10 	vmov	d0, r2, r3
 8003d92:	f00a fdf9 	bl	800e988 <sqrt>
 8003d96:	ec51 0b10 	vmov	r0, r1, d0
 8003d9a:	f04f 0200 	mov.w	r2, #0
 8003d9e:	4b58      	ldr	r3, [pc, #352]	; (8003f00 <CalculateRunningSpec+0x3a0>)
 8003da0:	f7fc fc2a 	bl	80005f8 <__aeabi_dmul>
 8003da4:	4602      	mov	r2, r0
 8003da6:	460b      	mov	r3, r1
 8003da8:	4614      	mov	r4, r2
 8003daa:	461d      	mov	r5, r3
 8003dac:	4b48      	ldr	r3, [pc, #288]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003dae:	681b      	ldr	r3, [r3, #0]
 8003db0:	4618      	mov	r0, r3
 8003db2:	f7fc fbc9 	bl	8000548 <__aeabi_f2d>
 8003db6:	4602      	mov	r2, r0
 8003db8:	460b      	mov	r3, r1
 8003dba:	4620      	mov	r0, r4
 8003dbc:	4629      	mov	r1, r5
 8003dbe:	f7fc fd45 	bl	800084c <__aeabi_ddiv>
 8003dc2:	4602      	mov	r2, r0
 8003dc4:	460b      	mov	r3, r1
 8003dc6:	4610      	mov	r0, r2
 8003dc8:	4619      	mov	r1, r3
 8003dca:	f7fc feed 	bl	8000ba8 <__aeabi_d2uiz>
 8003dce:	4603      	mov	r3, r0
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	4b4c      	ldr	r3, [pc, #304]	; (8003f04 <CalculateRunningSpec+0x3a4>)
 8003dd4:	801a      	strh	r2, [r3, #0]
	PullingEpsilonAcc = PullingAccel/DrumRadius;
 8003dd6:	4b48      	ldr	r3, [pc, #288]	; (8003ef8 <CalculateRunningSpec+0x398>)
 8003dd8:	edd3 6a00 	vldr	s13, [r3]
 8003ddc:	4b3c      	ldr	r3, [pc, #240]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003dde:	ed93 7a00 	vldr	s14, [r3]
 8003de2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003de6:	4b48      	ldr	r3, [pc, #288]	; (8003f08 <CalculateRunningSpec+0x3a8>)
 8003de8:	edc3 7a00 	vstr	s15, [r3]
	PullingEpsilonDec = PullingDecel/DrumRadius;
 8003dec:	4b47      	ldr	r3, [pc, #284]	; (8003f0c <CalculateRunningSpec+0x3ac>)
 8003dee:	edd3 6a00 	vldr	s13, [r3]
 8003df2:	4b37      	ldr	r3, [pc, #220]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003df4:	ed93 7a00 	vldr	s14, [r3]
 8003df8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003dfc:	4b44      	ldr	r3, [pc, #272]	; (8003f10 <CalculateRunningSpec+0x3b0>)
 8003dfe:	edc3 7a00 	vstr	s15, [r3]

	PullingDecelTime = (PullingMaxSpeed * (2*3.14/60) * DrumRadius) / PullingDecel; //Motor Deceleration time
 8003e02:	4b40      	ldr	r3, [pc, #256]	; (8003f04 <CalculateRunningSpec+0x3a4>)
 8003e04:	881b      	ldrh	r3, [r3, #0]
 8003e06:	4618      	mov	r0, r3
 8003e08:	f7fc fb8c 	bl	8000524 <__aeabi_i2d>
 8003e0c:	a328      	add	r3, pc, #160	; (adr r3, 8003eb0 <CalculateRunningSpec+0x350>)
 8003e0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e12:	f7fc fbf1 	bl	80005f8 <__aeabi_dmul>
 8003e16:	4602      	mov	r2, r0
 8003e18:	460b      	mov	r3, r1
 8003e1a:	4614      	mov	r4, r2
 8003e1c:	461d      	mov	r5, r3
 8003e1e:	4b2c      	ldr	r3, [pc, #176]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003e20:	681b      	ldr	r3, [r3, #0]
 8003e22:	4618      	mov	r0, r3
 8003e24:	f7fc fb90 	bl	8000548 <__aeabi_f2d>
 8003e28:	4602      	mov	r2, r0
 8003e2a:	460b      	mov	r3, r1
 8003e2c:	4620      	mov	r0, r4
 8003e2e:	4629      	mov	r1, r5
 8003e30:	f7fc fbe2 	bl	80005f8 <__aeabi_dmul>
 8003e34:	4602      	mov	r2, r0
 8003e36:	460b      	mov	r3, r1
 8003e38:	4614      	mov	r4, r2
 8003e3a:	461d      	mov	r5, r3
 8003e3c:	4b33      	ldr	r3, [pc, #204]	; (8003f0c <CalculateRunningSpec+0x3ac>)
 8003e3e:	681b      	ldr	r3, [r3, #0]
 8003e40:	4618      	mov	r0, r3
 8003e42:	f7fc fb81 	bl	8000548 <__aeabi_f2d>
 8003e46:	4602      	mov	r2, r0
 8003e48:	460b      	mov	r3, r1
 8003e4a:	4620      	mov	r0, r4
 8003e4c:	4629      	mov	r1, r5
 8003e4e:	f7fc fcfd 	bl	800084c <__aeabi_ddiv>
 8003e52:	4602      	mov	r2, r0
 8003e54:	460b      	mov	r3, r1
 8003e56:	4610      	mov	r0, r2
 8003e58:	4619      	mov	r1, r3
 8003e5a:	f7fc fec5 	bl	8000be8 <__aeabi_d2f>
 8003e5e:	4603      	mov	r3, r0
 8003e60:	4a2c      	ldr	r2, [pc, #176]	; (8003f14 <CalculateRunningSpec+0x3b4>)
 8003e62:	6013      	str	r3, [r2, #0]

	//PullingDecelDistance = 0.5*PullingMaxSpeed*(2*3.14/60)*DrumRadius*PullingDecelTime;

	//PullingDecelDistance = (pow(PullingMaxSpeed*2*3.14*DrumRadius/60,2))/(2*9.8); // Object flying distance
	PullingDecelDistance = (pow(PullingMaxSpeed*2*3.14*DrumRadius/60,2))/(2*PullingDecel); // Object flying distance
 8003e64:	4b27      	ldr	r3, [pc, #156]	; (8003f04 <CalculateRunningSpec+0x3a4>)
 8003e66:	881b      	ldrh	r3, [r3, #0]
 8003e68:	005b      	lsls	r3, r3, #1
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	f7fc fb5a 	bl	8000524 <__aeabi_i2d>
 8003e70:	a309      	add	r3, pc, #36	; (adr r3, 8003e98 <CalculateRunningSpec+0x338>)
 8003e72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e76:	f7fc fbbf 	bl	80005f8 <__aeabi_dmul>
 8003e7a:	4602      	mov	r2, r0
 8003e7c:	460b      	mov	r3, r1
 8003e7e:	4614      	mov	r4, r2
 8003e80:	461d      	mov	r5, r3
 8003e82:	4b13      	ldr	r3, [pc, #76]	; (8003ed0 <CalculateRunningSpec+0x370>)
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	4618      	mov	r0, r3
 8003e88:	f7fc fb5e 	bl	8000548 <__aeabi_f2d>
 8003e8c:	e044      	b.n	8003f18 <CalculateRunningSpec+0x3b8>
 8003e8e:	bf00      	nop
 8003e90:	9999999a 	.word	0x9999999a
 8003e94:	3fb99999 	.word	0x3fb99999
 8003e98:	51eb851f 	.word	0x51eb851f
 8003e9c:	40091eb8 	.word	0x40091eb8
 8003ea0:	00000000 	.word	0x00000000
 8003ea4:	40000000 	.word	0x40000000
 8003ea8:	51eb851f 	.word	0x51eb851f
 8003eac:	40191eb8 	.word	0x40191eb8
 8003eb0:	46508dff 	.word	0x46508dff
 8003eb4:	3fbacb6f 	.word	0x3fbacb6f
 8003eb8:	20000471 	.word	0x20000471
 8003ebc:	40080000 	.word	0x40080000
 8003ec0:	20000474 	.word	0x20000474
 8003ec4:	20000478 	.word	0x20000478
 8003ec8:	20000494 	.word	0x20000494
 8003ecc:	40240000 	.word	0x40240000
 8003ed0:	2000046c 	.word	0x2000046c
 8003ed4:	20000490 	.word	0x20000490
 8003ed8:	20000480 	.word	0x20000480
 8003edc:	2000047c 	.word	0x2000047c
 8003ee0:	20000484 	.word	0x20000484
 8003ee4:	404e0000 	.word	0x404e0000
 8003ee8:	20000488 	.word	0x20000488
 8003eec:	2000000a 	.word	0x2000000a
 8003ef0:	2000048c 	.word	0x2000048c
 8003ef4:	200004c4 	.word	0x200004c4
 8003ef8:	20000498 	.word	0x20000498
 8003efc:	200004b4 	.word	0x200004b4
 8003f00:	40230000 	.word	0x40230000
 8003f04:	200004ac 	.word	0x200004ac
 8003f08:	200004a0 	.word	0x200004a0
 8003f0c:	2000049c 	.word	0x2000049c
 8003f10:	200004a4 	.word	0x200004a4
 8003f14:	200004a8 	.word	0x200004a8
 8003f18:	4602      	mov	r2, r0
 8003f1a:	460b      	mov	r3, r1
 8003f1c:	4620      	mov	r0, r4
 8003f1e:	4629      	mov	r1, r5
 8003f20:	f7fc fb6a 	bl	80005f8 <__aeabi_dmul>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4610      	mov	r0, r2
 8003f2a:	4619      	mov	r1, r3
 8003f2c:	f04f 0200 	mov.w	r2, #0
 8003f30:	4b7b      	ldr	r3, [pc, #492]	; (8004120 <CalculateRunningSpec+0x5c0>)
 8003f32:	f7fc fc8b 	bl	800084c <__aeabi_ddiv>
 8003f36:	4602      	mov	r2, r0
 8003f38:	460b      	mov	r3, r1
 8003f3a:	ec43 2b17 	vmov	d7, r2, r3
 8003f3e:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 80040f8 <CalculateRunningSpec+0x598>
 8003f42:	eeb0 0a47 	vmov.f32	s0, s14
 8003f46:	eef0 0a67 	vmov.f32	s1, s15
 8003f4a:	f00a fcad 	bl	800e8a8 <pow>
 8003f4e:	ec55 4b10 	vmov	r4, r5, d0
 8003f52:	4b74      	ldr	r3, [pc, #464]	; (8004124 <CalculateRunningSpec+0x5c4>)
 8003f54:	edd3 7a00 	vldr	s15, [r3]
 8003f58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f5c:	ee17 0a90 	vmov	r0, s15
 8003f60:	f7fc faf2 	bl	8000548 <__aeabi_f2d>
 8003f64:	4602      	mov	r2, r0
 8003f66:	460b      	mov	r3, r1
 8003f68:	4620      	mov	r0, r4
 8003f6a:	4629      	mov	r1, r5
 8003f6c:	f7fc fc6e 	bl	800084c <__aeabi_ddiv>
 8003f70:	4602      	mov	r2, r0
 8003f72:	460b      	mov	r3, r1
 8003f74:	4610      	mov	r0, r2
 8003f76:	4619      	mov	r1, r3
 8003f78:	f7fc fe36 	bl	8000be8 <__aeabi_d2f>
 8003f7c:	4603      	mov	r3, r0
 8003f7e:	4a6a      	ldr	r2, [pc, #424]	; (8004128 <CalculateRunningSpec+0x5c8>)
 8003f80:	6013      	str	r3, [r2, #0]

	PullingTotalDistance = ((float)PullingAccelDistance + (float)PullingDecelDistance)*DistCoeff;
 8003f82:	4b6a      	ldr	r3, [pc, #424]	; (800412c <CalculateRunningSpec+0x5cc>)
 8003f84:	ed93 7a00 	vldr	s14, [r3]
 8003f88:	4b67      	ldr	r3, [pc, #412]	; (8004128 <CalculateRunningSpec+0x5c8>)
 8003f8a:	edd3 7a00 	vldr	s15, [r3]
 8003f8e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003f92:	4b67      	ldr	r3, [pc, #412]	; (8004130 <CalculateRunningSpec+0x5d0>)
 8003f94:	edd3 7a00 	vldr	s15, [r3]
 8003f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f9c:	4b65      	ldr	r3, [pc, #404]	; (8004134 <CalculateRunningSpec+0x5d4>)
 8003f9e:	edc3 7a00 	vstr	s15, [r3]
	PullingBotomPulseCmdPosition = (int)((float)EncoderResolution*(float)PullingTotalDistance/((float)(2*3.14*DrumRadius))); // unit: pulses
 8003fa2:	4b65      	ldr	r3, [pc, #404]	; (8004138 <CalculateRunningSpec+0x5d8>)
 8003fa4:	881b      	ldrh	r3, [r3, #0]
 8003fa6:	ee07 3a90 	vmov	s15, r3
 8003faa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003fae:	4b61      	ldr	r3, [pc, #388]	; (8004134 <CalculateRunningSpec+0x5d4>)
 8003fb0:	edd3 7a00 	vldr	s15, [r3]
 8003fb4:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003fb8:	4b60      	ldr	r3, [pc, #384]	; (800413c <CalculateRunningSpec+0x5dc>)
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f7fc fac3 	bl	8000548 <__aeabi_f2d>
 8003fc2:	a34f      	add	r3, pc, #316	; (adr r3, 8004100 <CalculateRunningSpec+0x5a0>)
 8003fc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fc8:	f7fc fb16 	bl	80005f8 <__aeabi_dmul>
 8003fcc:	4602      	mov	r2, r0
 8003fce:	460b      	mov	r3, r1
 8003fd0:	4610      	mov	r0, r2
 8003fd2:	4619      	mov	r1, r3
 8003fd4:	f7fc fe08 	bl	8000be8 <__aeabi_d2f>
 8003fd8:	ee07 0a10 	vmov	s14, r0
 8003fdc:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8003fe0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003fe4:	ee17 2a90 	vmov	r2, s15
 8003fe8:	4b55      	ldr	r3, [pc, #340]	; (8004140 <CalculateRunningSpec+0x5e0>)
 8003fea:	601a      	str	r2, [r3, #0]

	FlyingPosPulseCmd = ((int)(EncoderResolution*PullingAccelDistance/(2*3.14*DrumRadius)));
 8003fec:	4b52      	ldr	r3, [pc, #328]	; (8004138 <CalculateRunningSpec+0x5d8>)
 8003fee:	881b      	ldrh	r3, [r3, #0]
 8003ff0:	ee07 3a90 	vmov	s15, r3
 8003ff4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ff8:	4b4c      	ldr	r3, [pc, #304]	; (800412c <CalculateRunningSpec+0x5cc>)
 8003ffa:	edd3 7a00 	vldr	s15, [r3]
 8003ffe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8004002:	ee17 0a90 	vmov	r0, s15
 8004006:	f7fc fa9f 	bl	8000548 <__aeabi_f2d>
 800400a:	4604      	mov	r4, r0
 800400c:	460d      	mov	r5, r1
 800400e:	4b4b      	ldr	r3, [pc, #300]	; (800413c <CalculateRunningSpec+0x5dc>)
 8004010:	681b      	ldr	r3, [r3, #0]
 8004012:	4618      	mov	r0, r3
 8004014:	f7fc fa98 	bl	8000548 <__aeabi_f2d>
 8004018:	a339      	add	r3, pc, #228	; (adr r3, 8004100 <CalculateRunningSpec+0x5a0>)
 800401a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800401e:	f7fc faeb 	bl	80005f8 <__aeabi_dmul>
 8004022:	4602      	mov	r2, r0
 8004024:	460b      	mov	r3, r1
 8004026:	4620      	mov	r0, r4
 8004028:	4629      	mov	r1, r5
 800402a:	f7fc fc0f 	bl	800084c <__aeabi_ddiv>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4610      	mov	r0, r2
 8004034:	4619      	mov	r1, r3
 8004036:	f7fc fd8f 	bl	8000b58 <__aeabi_d2iz>
 800403a:	4603      	mov	r3, r0
 800403c:	4a41      	ldr	r2, [pc, #260]	; (8004144 <CalculateRunningSpec+0x5e4>)
 800403e:	6013      	str	r3, [r2, #0]


	WaitingTime = (uint16_t)(((PullingMaxSpeed*(2*3.14/60)*DrumRadius)/9.8 - PullingDecelTime)*1000*2*0.7); // *1000 to convert to ms; *2 for both flying up and dropping down
 8004040:	4b41      	ldr	r3, [pc, #260]	; (8004148 <CalculateRunningSpec+0x5e8>)
 8004042:	881b      	ldrh	r3, [r3, #0]
 8004044:	4618      	mov	r0, r3
 8004046:	f7fc fa6d 	bl	8000524 <__aeabi_i2d>
 800404a:	a32f      	add	r3, pc, #188	; (adr r3, 8004108 <CalculateRunningSpec+0x5a8>)
 800404c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004050:	f7fc fad2 	bl	80005f8 <__aeabi_dmul>
 8004054:	4602      	mov	r2, r0
 8004056:	460b      	mov	r3, r1
 8004058:	4614      	mov	r4, r2
 800405a:	461d      	mov	r5, r3
 800405c:	4b37      	ldr	r3, [pc, #220]	; (800413c <CalculateRunningSpec+0x5dc>)
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	4618      	mov	r0, r3
 8004062:	f7fc fa71 	bl	8000548 <__aeabi_f2d>
 8004066:	4602      	mov	r2, r0
 8004068:	460b      	mov	r3, r1
 800406a:	4620      	mov	r0, r4
 800406c:	4629      	mov	r1, r5
 800406e:	f7fc fac3 	bl	80005f8 <__aeabi_dmul>
 8004072:	4602      	mov	r2, r0
 8004074:	460b      	mov	r3, r1
 8004076:	4610      	mov	r0, r2
 8004078:	4619      	mov	r1, r3
 800407a:	a325      	add	r3, pc, #148	; (adr r3, 8004110 <CalculateRunningSpec+0x5b0>)
 800407c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004080:	f7fc fbe4 	bl	800084c <__aeabi_ddiv>
 8004084:	4602      	mov	r2, r0
 8004086:	460b      	mov	r3, r1
 8004088:	4614      	mov	r4, r2
 800408a:	461d      	mov	r5, r3
 800408c:	4b2f      	ldr	r3, [pc, #188]	; (800414c <CalculateRunningSpec+0x5ec>)
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	4618      	mov	r0, r3
 8004092:	f7fc fa59 	bl	8000548 <__aeabi_f2d>
 8004096:	4602      	mov	r2, r0
 8004098:	460b      	mov	r3, r1
 800409a:	4620      	mov	r0, r4
 800409c:	4629      	mov	r1, r5
 800409e:	f7fc f8f3 	bl	8000288 <__aeabi_dsub>
 80040a2:	4602      	mov	r2, r0
 80040a4:	460b      	mov	r3, r1
 80040a6:	4610      	mov	r0, r2
 80040a8:	4619      	mov	r1, r3
 80040aa:	f04f 0200 	mov.w	r2, #0
 80040ae:	4b28      	ldr	r3, [pc, #160]	; (8004150 <CalculateRunningSpec+0x5f0>)
 80040b0:	f7fc faa2 	bl	80005f8 <__aeabi_dmul>
 80040b4:	4602      	mov	r2, r0
 80040b6:	460b      	mov	r3, r1
 80040b8:	4610      	mov	r0, r2
 80040ba:	4619      	mov	r1, r3
 80040bc:	4602      	mov	r2, r0
 80040be:	460b      	mov	r3, r1
 80040c0:	f7fc f8e4 	bl	800028c <__adddf3>
 80040c4:	4602      	mov	r2, r0
 80040c6:	460b      	mov	r3, r1
 80040c8:	4610      	mov	r0, r2
 80040ca:	4619      	mov	r1, r3
 80040cc:	a312      	add	r3, pc, #72	; (adr r3, 8004118 <CalculateRunningSpec+0x5b8>)
 80040ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80040d2:	f7fc fa91 	bl	80005f8 <__aeabi_dmul>
 80040d6:	4602      	mov	r2, r0
 80040d8:	460b      	mov	r3, r1
 80040da:	4610      	mov	r0, r2
 80040dc:	4619      	mov	r1, r3
 80040de:	f7fc fd63 	bl	8000ba8 <__aeabi_d2uiz>
 80040e2:	4603      	mov	r3, r0
 80040e4:	b29a      	uxth	r2, r3
 80040e6:	4b1b      	ldr	r3, [pc, #108]	; (8004154 <CalculateRunningSpec+0x5f4>)
 80040e8:	801a      	strh	r2, [r3, #0]
}
 80040ea:	bf00      	nop
 80040ec:	46bd      	mov	sp, r7
 80040ee:	ecbd 8b02 	vpop	{d8}
 80040f2:	bdb0      	pop	{r4, r5, r7, pc}
 80040f4:	f3af 8000 	nop.w
 80040f8:	00000000 	.word	0x00000000
 80040fc:	40000000 	.word	0x40000000
 8004100:	51eb851f 	.word	0x51eb851f
 8004104:	40191eb8 	.word	0x40191eb8
 8004108:	46508dff 	.word	0x46508dff
 800410c:	3fbacb6f 	.word	0x3fbacb6f
 8004110:	9999999a 	.word	0x9999999a
 8004114:	40239999 	.word	0x40239999
 8004118:	66666666 	.word	0x66666666
 800411c:	3fe66666 	.word	0x3fe66666
 8004120:	404e0000 	.word	0x404e0000
 8004124:	2000049c 	.word	0x2000049c
 8004128:	200004b0 	.word	0x200004b0
 800412c:	200004b4 	.word	0x200004b4
 8004130:	20000538 	.word	0x20000538
 8004134:	200004b8 	.word	0x200004b8
 8004138:	2000000a 	.word	0x2000000a
 800413c:	2000046c 	.word	0x2000046c
 8004140:	200004bc 	.word	0x200004bc
 8004144:	200004c0 	.word	0x200004c0
 8004148:	200004ac 	.word	0x200004ac
 800414c:	200004a8 	.word	0x200004a8
 8004150:	408f4000 	.word	0x408f4000
 8004154:	2000045e 	.word	0x2000045e

08004158 <InitParams>:
void InitParams ()
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b082      	sub	sp, #8
 800415c:	af00      	add	r7, sp, #0
	// Load Parameters from the memory
	LoadSavedParam(MemoryAddress,Params);
 800415e:	4929      	ldr	r1, [pc, #164]	; (8004204 <InitParams+0xac>)
 8004160:	4829      	ldr	r0, [pc, #164]	; (8004208 <InitParams+0xb0>)
 8004162:	f7fd fa93 	bl	800168c <LoadSavedParam>

	// General Params
	DrumRadius = Params[0];
 8004166:	4b27      	ldr	r3, [pc, #156]	; (8004204 <InitParams+0xac>)
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	4a28      	ldr	r2, [pc, #160]	; (800420c <InitParams+0xb4>)
 800416c:	6013      	str	r3, [r2, #0]
	PullingSpeed = Params[1];
 800416e:	4b25      	ldr	r3, [pc, #148]	; (8004204 <InitParams+0xac>)
 8004170:	edd3 7a01 	vldr	s15, [r3, #4]
 8004174:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004178:	edc7 7a01 	vstr	s15, [r7, #4]
 800417c:	793b      	ldrb	r3, [r7, #4]
 800417e:	b2da      	uxtb	r2, r3
 8004180:	4b23      	ldr	r3, [pc, #140]	; (8004210 <InitParams+0xb8>)
 8004182:	701a      	strb	r2, [r3, #0]
	StoppingTime = Params[2];
 8004184:	4b1f      	ldr	r3, [pc, #124]	; (8004204 <InitParams+0xac>)
 8004186:	edd3 7a02 	vldr	s15, [r3, #8]
 800418a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800418e:	ee17 3a90 	vmov	r3, s15
 8004192:	b29a      	uxth	r2, r3
 8004194:	4b1f      	ldr	r3, [pc, #124]	; (8004214 <InitParams+0xbc>)
 8004196:	801a      	strh	r2, [r3, #0]
	SampleTime = Params[3];
 8004198:	4b1a      	ldr	r3, [pc, #104]	; (8004204 <InitParams+0xac>)
 800419a:	edd3 7a03 	vldr	s15, [r3, #12]
 800419e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041a2:	edc7 7a01 	vstr	s15, [r7, #4]
 80041a6:	793b      	ldrb	r3, [r7, #4]
 80041a8:	b2da      	uxtb	r2, r3
 80041aa:	4b1b      	ldr	r3, [pc, #108]	; (8004218 <InitParams+0xc0>)
 80041ac:	701a      	strb	r2, [r3, #0]

	// Dropping Stage Params
	DroppingAccelDistance = Params[4];
 80041ae:	4b15      	ldr	r3, [pc, #84]	; (8004204 <InitParams+0xac>)
 80041b0:	691b      	ldr	r3, [r3, #16]
 80041b2:	4a1a      	ldr	r2, [pc, #104]	; (800421c <InitParams+0xc4>)
 80041b4:	6013      	str	r3, [r2, #0]
	DroppingAccel  = Params[5];
 80041b6:	4b13      	ldr	r3, [pc, #76]	; (8004204 <InitParams+0xac>)
 80041b8:	695b      	ldr	r3, [r3, #20]
 80041ba:	4a19      	ldr	r2, [pc, #100]	; (8004220 <InitParams+0xc8>)
 80041bc:	6013      	str	r3, [r2, #0]
	DroppingDecel = Params[6];
 80041be:	4b11      	ldr	r3, [pc, #68]	; (8004204 <InitParams+0xac>)
 80041c0:	699b      	ldr	r3, [r3, #24]
 80041c2:	4a18      	ldr	r2, [pc, #96]	; (8004224 <InitParams+0xcc>)
 80041c4:	6013      	str	r3, [r2, #0]


	// Pulling Stage Params
	PullingAccelDistance = Params[7];
 80041c6:	4b0f      	ldr	r3, [pc, #60]	; (8004204 <InitParams+0xac>)
 80041c8:	69db      	ldr	r3, [r3, #28]
 80041ca:	4a17      	ldr	r2, [pc, #92]	; (8004228 <InitParams+0xd0>)
 80041cc:	6013      	str	r3, [r2, #0]
	PullingAccel = Params[8];
 80041ce:	4b0d      	ldr	r3, [pc, #52]	; (8004204 <InitParams+0xac>)
 80041d0:	6a1b      	ldr	r3, [r3, #32]
 80041d2:	4a16      	ldr	r2, [pc, #88]	; (800422c <InitParams+0xd4>)
 80041d4:	6013      	str	r3, [r2, #0]
	PullingDecel = Params[9];
 80041d6:	4b0b      	ldr	r3, [pc, #44]	; (8004204 <InitParams+0xac>)
 80041d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041da:	4a15      	ldr	r2, [pc, #84]	; (8004230 <InitParams+0xd8>)
 80041dc:	6013      	str	r3, [r2, #0]

	// PID Controller params
	FlyAccSlope = Params[10];
 80041de:	4b09      	ldr	r3, [pc, #36]	; (8004204 <InitParams+0xac>)
 80041e0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80041e2:	4a14      	ldr	r2, [pc, #80]	; (8004234 <InitParams+0xdc>)
 80041e4:	6013      	str	r3, [r2, #0]
	DistCoeff = Params[11];
 80041e6:	4b07      	ldr	r3, [pc, #28]	; (8004204 <InitParams+0xac>)
 80041e8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80041ea:	4a13      	ldr	r2, [pc, #76]	; (8004238 <InitParams+0xe0>)
 80041ec:	6013      	str	r3, [r2, #0]
	BrakeAccSlope = Params[12];
 80041ee:	4b05      	ldr	r3, [pc, #20]	; (8004204 <InitParams+0xac>)
 80041f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041f2:	4a12      	ldr	r2, [pc, #72]	; (800423c <InitParams+0xe4>)
 80041f4:	6013      	str	r3, [r2, #0]

	CalculateRunningSpec ();
 80041f6:	f7ff fcb3 	bl	8003b60 <CalculateRunningSpec>
}
 80041fa:	bf00      	nop
 80041fc:	3708      	adds	r7, #8
 80041fe:	46bd      	mov	sp, r7
 8004200:	bd80      	pop	{r7, pc}
 8004202:	bf00      	nop
 8004204:	200004d4 	.word	0x200004d4
 8004208:	08040000 	.word	0x08040000
 800420c:	2000046c 	.word	0x2000046c
 8004210:	20000471 	.word	0x20000471
 8004214:	20000472 	.word	0x20000472
 8004218:	20000470 	.word	0x20000470
 800421c:	20000494 	.word	0x20000494
 8004220:	20000478 	.word	0x20000478
 8004224:	2000047c 	.word	0x2000047c
 8004228:	200004b4 	.word	0x200004b4
 800422c:	20000498 	.word	0x20000498
 8004230:	2000049c 	.word	0x2000049c
 8004234:	20000540 	.word	0x20000540
 8004238:	20000538 	.word	0x20000538
 800423c:	2000053c 	.word	0x2000053c

08004240 <ProcessReceivedCommand>:

void ProcessReceivedCommand () // Proceed the command from the UI
{
 8004240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004244:	b0b7      	sub	sp, #220	; 0xdc
 8004246:	af16      	add	r7, sp, #88	; 0x58
	//ExtractMotionCode(); // Extract data to MotionCode
	switch ((int)MotionCode[0])
 8004248:	4bc0      	ldr	r3, [pc, #768]	; (800454c <ProcessReceivedCommand+0x30c>)
 800424a:	edd3 7a00 	vldr	s15, [r3]
 800424e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004252:	ee17 3a90 	vmov	r3, s15
 8004256:	3b01      	subs	r3, #1
 8004258:	2b2f      	cmp	r3, #47	; 0x2f
 800425a:	f200 86e4 	bhi.w	8005026 <ProcessReceivedCommand+0xde6>
 800425e:	a201      	add	r2, pc, #4	; (adr r2, 8004264 <ProcessReceivedCommand+0x24>)
 8004260:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004264:	0800435f 	.word	0x0800435f
 8004268:	080043a5 	.word	0x080043a5
 800426c:	080043cf 	.word	0x080043cf
 8004270:	0800447b 	.word	0x0800447b
 8004274:	080044a9 	.word	0x080044a9
 8004278:	0800451d 	.word	0x0800451d
 800427c:	0800459d 	.word	0x0800459d
 8004280:	080045d7 	.word	0x080045d7
 8004284:	08005027 	.word	0x08005027
 8004288:	08005027 	.word	0x08005027
 800428c:	080047a5 	.word	0x080047a5
 8004290:	08004803 	.word	0x08004803
 8004294:	080048c3 	.word	0x080048c3
 8004298:	08004959 	.word	0x08004959
 800429c:	0800498b 	.word	0x0800498b
 80042a0:	080049db 	.word	0x080049db
 80042a4:	08004a4b 	.word	0x08004a4b
 80042a8:	08004a51 	.word	0x08004a51
 80042ac:	08005027 	.word	0x08005027
 80042b0:	0800503b 	.word	0x0800503b
 80042b4:	08005027 	.word	0x08005027
 80042b8:	08005027 	.word	0x08005027
 80042bc:	08005027 	.word	0x08005027
 80042c0:	08005027 	.word	0x08005027
 80042c4:	08005027 	.word	0x08005027
 80042c8:	08005027 	.word	0x08005027
 80042cc:	08004a7d 	.word	0x08004a7d
 80042d0:	08004adb 	.word	0x08004adb
 80042d4:	08005027 	.word	0x08005027
 80042d8:	08005027 	.word	0x08005027
 80042dc:	08004b4d 	.word	0x08004b4d
 80042e0:	08004ba1 	.word	0x08004ba1
 80042e4:	08004bf1 	.word	0x08004bf1
 80042e8:	08004c41 	.word	0x08004c41
 80042ec:	08004c91 	.word	0x08004c91
 80042f0:	0800503b 	.word	0x0800503b
 80042f4:	08004ce1 	.word	0x08004ce1
 80042f8:	08004d31 	.word	0x08004d31
 80042fc:	08004d5d 	.word	0x08004d5d
 8004300:	08005027 	.word	0x08005027
 8004304:	08004ddf 	.word	0x08004ddf
 8004308:	08004e9b 	.word	0x08004e9b
 800430c:	08004ef5 	.word	0x08004ef5
 8004310:	08004325 	.word	0x08004325
 8004314:	080045fd 	.word	0x080045fd
 8004318:	08004f4b 	.word	0x08004f4b
 800431c:	08004f5b 	.word	0x08004f5b
 8004320:	08004fbf 	.word	0x08004fbf
	{
		case 44: //Emergency Stop Change to 44 to avoid data confusion
			if ((int)MotionCode[1] == 0) // 44/0
 8004324:	4b89      	ldr	r3, [pc, #548]	; (800454c <ProcessReceivedCommand+0x30c>)
 8004326:	edd3 7a01 	vldr	s15, [r3, #4]
 800432a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800432e:	ee17 3a90 	vmov	r3, s15
 8004332:	2b00      	cmp	r3, #0
 8004334:	d10f      	bne.n	8004356 <ProcessReceivedCommand+0x116>
			{
				Estop(); // Estop button on the UI
 8004336:	f7fc ff8b 	bl	8001250 <Estop>
				PulseGenerationFlag = false; // Stop generating pulses
 800433a:	4b85      	ldr	r3, [pc, #532]	; (8004550 <ProcessReceivedCommand+0x310>)
 800433c:	2200      	movs	r2, #0
 800433e:	701a      	strb	r2, [r3, #0]
				StartDropping = false;
 8004340:	4b84      	ldr	r3, [pc, #528]	; (8004554 <ProcessReceivedCommand+0x314>)
 8004342:	2200      	movs	r2, #0
 8004344:	701a      	strb	r2, [r3, #0]
				StartPulling = false;
 8004346:	4b84      	ldr	r3, [pc, #528]	; (8004558 <ProcessReceivedCommand+0x318>)
 8004348:	2200      	movs	r2, #0
 800434a:	701a      	strb	r2, [r3, #0]
				EMO = true;
 800434c:	4b83      	ldr	r3, [pc, #524]	; (800455c <ProcessReceivedCommand+0x31c>)
 800434e:	2201      	movs	r2, #1
 8004350:	701a      	strb	r2, [r3, #0]
			}
			else {AlarmReset();}  // 44/1, alarm button
			break;
 8004352:	f000 be91 	b.w	8005078 <ProcessReceivedCommand+0xe38>
			else {AlarmReset();}  // 44/1, alarm button
 8004356:	f7fc ff55 	bl	8001204 <AlarmReset>
			break;
 800435a:	f000 be8d 	b.w	8005078 <ProcessReceivedCommand+0xe38>
		case 1: // Stop button;
			if ((int)MotionCode[1] == 1) // 1/1
 800435e:	4b7b      	ldr	r3, [pc, #492]	; (800454c <ProcessReceivedCommand+0x30c>)
 8004360:	edd3 7a01 	vldr	s15, [r3, #4]
 8004364:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004368:	ee17 3a90 	vmov	r3, s15
 800436c:	2b01      	cmp	r3, #1
 800436e:	f040 8666 	bne.w	800503e <ProcessReceivedCommand+0xdfe>
			{
				if (MotorDriver) // FDA 7000
 8004372:	4b7b      	ldr	r3, [pc, #492]	; (8004560 <ProcessReceivedCommand+0x320>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d005      	beq.n	8004386 <ProcessReceivedCommand+0x146>
				{
					Stop();
 800437a:	f7fc ff33 	bl	80011e4 <Stop>
					StopExperiment();
 800437e:	f7ff fbaf 	bl	8003ae0 <StopExperiment>
					IsHoming = false;
					IsStepPulseCmd = false;
					JoggingMoveUp = false;
				}
			}
			break;
 8004382:	f000 be5c 	b.w	800503e <ProcessReceivedCommand+0xdfe>
					StopPulseGenerating();
 8004386:	f7fd fae5 	bl	8001954 <StopPulseGenerating>
					StopExperiment();
 800438a:	f7ff fba9 	bl	8003ae0 <StopExperiment>
					IsHoming = false;
 800438e:	4b75      	ldr	r3, [pc, #468]	; (8004564 <ProcessReceivedCommand+0x324>)
 8004390:	2200      	movs	r2, #0
 8004392:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = false;
 8004394:	4b74      	ldr	r3, [pc, #464]	; (8004568 <ProcessReceivedCommand+0x328>)
 8004396:	2200      	movs	r2, #0
 8004398:	701a      	strb	r2, [r3, #0]
					JoggingMoveUp = false;
 800439a:	4b74      	ldr	r3, [pc, #464]	; (800456c <ProcessReceivedCommand+0x32c>)
 800439c:	2200      	movs	r2, #0
 800439e:	701a      	strb	r2, [r3, #0]
			break;
 80043a0:	f000 be4d 	b.w	800503e <ProcessReceivedCommand+0xdfe>
		case 2: // Set Control Mode
			if ((int)MotionCode[1] == 1) // 2/1 position mode
 80043a4:	4b69      	ldr	r3, [pc, #420]	; (800454c <ProcessReceivedCommand+0x30c>)
 80043a6:	edd3 7a01 	vldr	s15, [r3, #4]
 80043aa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ae:	ee17 3a90 	vmov	r3, s15
 80043b2:	2b01      	cmp	r3, #1
 80043b4:	d106      	bne.n	80043c4 <ProcessReceivedCommand+0x184>
					{
						PositionControlMode = true;
 80043b6:	4b6e      	ldr	r3, [pc, #440]	; (8004570 <ProcessReceivedCommand+0x330>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
						DriverInit(); // Init Position Mode
 80043bc:	f7fc ff88 	bl	80012d0 <DriverInit>
			else // 2/0 speed mode
					{
						PositionControlMode = false;
						//SetSpeedMode(); // Set to Speed Mode
					}
			break;
 80043c0:	f000 be5a 	b.w	8005078 <ProcessReceivedCommand+0xe38>
						PositionControlMode = false;
 80043c4:	4b6a      	ldr	r3, [pc, #424]	; (8004570 <ProcessReceivedCommand+0x330>)
 80043c6:	2200      	movs	r2, #0
 80043c8:	701a      	strb	r2, [r3, #0]
			break;
 80043ca:	f000 be55 	b.w	8005078 <ProcessReceivedCommand+0xe38>
		case 3: // Jog Control

			if ((int)MotionCode[1] == 1) // 3/1 move up button
 80043ce:	4b5f      	ldr	r3, [pc, #380]	; (800454c <ProcessReceivedCommand+0x30c>)
 80043d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80043d4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043d8:	ee17 3a90 	vmov	r3, s15
 80043dc:	2b01      	cmp	r3, #1
 80043de:	d127      	bne.n	8004430 <ProcessReceivedCommand+0x1f0>
			{
					JoggingMoveUp = true;
 80043e0:	4b62      	ldr	r3, [pc, #392]	; (800456c <ProcessReceivedCommand+0x32c>)
 80043e2:	2201      	movs	r2, #1
 80043e4:	701a      	strb	r2, [r3, #0]
					if (PositionControlMode) // If the control Mode is Position Mode
 80043e6:	4b62      	ldr	r3, [pc, #392]	; (8004570 <ProcessReceivedCommand+0x330>)
 80043e8:	781b      	ldrb	r3, [r3, #0]
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d01c      	beq.n	8004428 <ProcessReceivedCommand+0x1e8>
//							{
//								break;
//							}
						}
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80043ee:	4b5c      	ldr	r3, [pc, #368]	; (8004560 <ProcessReceivedCommand+0x320>)
 80043f0:	781b      	ldrb	r3, [r3, #0]
 80043f2:	4a60      	ldr	r2, [pc, #384]	; (8004574 <ProcessReceivedCommand+0x334>)
 80043f4:	8812      	ldrh	r2, [r2, #0]
 80043f6:	ee07 2a90 	vmov	s15, r2
 80043fa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80043fe:	eeb0 0a67 	vmov.f32	s0, s15
 8004402:	4618      	mov	r0, r3
 8004404:	f7fd fb08 	bl	8001a18 <CalculateTimer3Period>
 8004408:	4603      	mov	r3, r0
 800440a:	b29a      	uxth	r2, r3
 800440c:	4b5a      	ldr	r3, [pc, #360]	; (8004578 <ProcessReceivedCommand+0x338>)
 800440e:	801a      	strh	r2, [r3, #0]
						//Timer3CountPeriod = (int)((float)(120000000.0/((float)JogSpeed*(float)EncoderResolution)) + 0.5);
						PRIsToggled = true; // PR phase is 90 deg late
 8004410:	4b5a      	ldr	r3, [pc, #360]	; (800457c <ProcessReceivedCommand+0x33c>)
 8004412:	2201      	movs	r2, #1
 8004414:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up
 8004416:	4b5a      	ldr	r3, [pc, #360]	; (8004580 <ProcessReceivedCommand+0x340>)
 8004418:	2200      	movs	r2, #0
 800441a:	701a      	strb	r2, [r3, #0]
						StartPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 800441c:	f7fd fab8 	bl	8001990 <StartPulseGenerating>
						DisableSTOP(); // Turn off STOP to run
 8004420:	f7fc ff22 	bl	8001268 <DisableSTOP>
					else // Speed Mode
					{
						JogMoveDown(); // Disable the stop
					}
			}
			break;
 8004424:	f000 be28 	b.w	8005078 <ProcessReceivedCommand+0xe38>
						JogMoveUp(); // Disable the stop
 8004428:	f7fc ff2a 	bl	8001280 <JogMoveUp>
			break;
 800442c:	f000 be24 	b.w	8005078 <ProcessReceivedCommand+0xe38>
					if (PositionControlMode) // If the control Mode is Position Mode
 8004430:	4b4f      	ldr	r3, [pc, #316]	; (8004570 <ProcessReceivedCommand+0x330>)
 8004432:	781b      	ldrb	r3, [r3, #0]
 8004434:	2b00      	cmp	r3, #0
 8004436:	d01c      	beq.n	8004472 <ProcessReceivedCommand+0x232>
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8004438:	4b49      	ldr	r3, [pc, #292]	; (8004560 <ProcessReceivedCommand+0x320>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	4a4d      	ldr	r2, [pc, #308]	; (8004574 <ProcessReceivedCommand+0x334>)
 800443e:	8812      	ldrh	r2, [r2, #0]
 8004440:	ee07 2a90 	vmov	s15, r2
 8004444:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004448:	eeb0 0a67 	vmov.f32	s0, s15
 800444c:	4618      	mov	r0, r3
 800444e:	f7fd fae3 	bl	8001a18 <CalculateTimer3Period>
 8004452:	4603      	mov	r3, r0
 8004454:	b29a      	uxth	r2, r3
 8004456:	4b48      	ldr	r3, [pc, #288]	; (8004578 <ProcessReceivedCommand+0x338>)
 8004458:	801a      	strh	r2, [r3, #0]
						PRIsToggled = false; //
 800445a:	4b48      	ldr	r3, [pc, #288]	; (800457c <ProcessReceivedCommand+0x33c>)
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
						Direction = true; // true = move down
 8004460:	4b47      	ldr	r3, [pc, #284]	; (8004580 <ProcessReceivedCommand+0x340>)
 8004462:	2201      	movs	r2, #1
 8004464:	701a      	strb	r2, [r3, #0]
						StartPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 8004466:	f7fd fa93 	bl	8001990 <StartPulseGenerating>
						DisableSTOP();	// Turn off STOP to run
 800446a:	f7fc fefd 	bl	8001268 <DisableSTOP>
			break;
 800446e:	f000 be03 	b.w	8005078 <ProcessReceivedCommand+0xe38>
						JogMoveDown(); // Disable the stop
 8004472:	f7fc ff19 	bl	80012a8 <JogMoveDown>
			break;
 8004476:	f000 bdff 	b.w	8005078 <ProcessReceivedCommand+0xe38>
		case 4: // Start Running Buton (Start Running Experiment)
			if ((int)MotionCode[1] == 1) // Start runing
 800447a:	4b34      	ldr	r3, [pc, #208]	; (800454c <ProcessReceivedCommand+0x30c>)
 800447c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004480:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004484:	ee17 3a90 	vmov	r3, s15
 8004488:	2b01      	cmp	r3, #1
 800448a:	d109      	bne.n	80044a0 <ProcessReceivedCommand+0x260>
				{
					InitializeRunning (ExperimentMode);
 800448c:	4b3d      	ldr	r3, [pc, #244]	; (8004584 <ProcessReceivedCommand+0x344>)
 800448e:	781b      	ldrb	r3, [r3, #0]
 8004490:	4618      	mov	r0, r3
 8004492:	f7fd fdc9 	bl	8002028 <InitializeRunning>
					EMO = false;
 8004496:	4b31      	ldr	r3, [pc, #196]	; (800455c <ProcessReceivedCommand+0x31c>)
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]
				}
			else // Stop running
				{
					StopExperiment();
				}
			break;
 800449c:	f000 bdec 	b.w	8005078 <ProcessReceivedCommand+0xe38>
					StopExperiment();
 80044a0:	f7ff fb1e 	bl	8003ae0 <StopExperiment>
			break;
 80044a4:	f000 bde8 	b.w	8005078 <ProcessReceivedCommand+0xe38>

		case 5: // Set Jog Speed
			if (PositionControlMode) // If it is the position control mode, then change the JogSpeed
 80044a8:	4b31      	ldr	r3, [pc, #196]	; (8004570 <ProcessReceivedCommand+0x330>)
 80044aa:	781b      	ldrb	r3, [r3, #0]
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	f000 85c8 	beq.w	8005042 <ProcessReceivedCommand+0xe02>
			{
				JogSpeed = (int)(MotionCode[1]); // unit: rpm
 80044b2:	4b26      	ldr	r3, [pc, #152]	; (800454c <ProcessReceivedCommand+0x30c>)
 80044b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80044b8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044bc:	ee17 3a90 	vmov	r3, s15
 80044c0:	b29a      	uxth	r2, r3
 80044c2:	4b2c      	ldr	r3, [pc, #176]	; (8004574 <ProcessReceivedCommand+0x334>)
 80044c4:	801a      	strh	r2, [r3, #0]
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80044c6:	4b26      	ldr	r3, [pc, #152]	; (8004560 <ProcessReceivedCommand+0x320>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	4a2a      	ldr	r2, [pc, #168]	; (8004574 <ProcessReceivedCommand+0x334>)
 80044cc:	8812      	ldrh	r2, [r2, #0]
 80044ce:	ee07 2a90 	vmov	s15, r2
 80044d2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044d6:	eeb0 0a67 	vmov.f32	s0, s15
 80044da:	4618      	mov	r0, r3
 80044dc:	f7fd fa9c 	bl	8001a18 <CalculateTimer3Period>
 80044e0:	4603      	mov	r3, r0
 80044e2:	b29a      	uxth	r2, r3
 80044e4:	4b24      	ldr	r3, [pc, #144]	; (8004578 <ProcessReceivedCommand+0x338>)
 80044e6:	801a      	strh	r2, [r3, #0]
//				char JogSpeedBuff[10];
//				TxPCLen = sprintf(JogSpeedBuff,"j%.de",JogSpeed);
//				HAL_UART_Transmit(&huart6,(uint8_t *)JogSpeedBuff,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"j%.de",JogSpeed);
 80044e8:	4b22      	ldr	r3, [pc, #136]	; (8004574 <ProcessReceivedCommand+0x334>)
 80044ea:	881b      	ldrh	r3, [r3, #0]
 80044ec:	461a      	mov	r2, r3
 80044ee:	4926      	ldr	r1, [pc, #152]	; (8004588 <ProcessReceivedCommand+0x348>)
 80044f0:	4826      	ldr	r0, [pc, #152]	; (800458c <ProcessReceivedCommand+0x34c>)
 80044f2:	f006 fb7b 	bl	800abec <siprintf>
 80044f6:	4603      	mov	r3, r0
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4b25      	ldr	r3, [pc, #148]	; (8004590 <ProcessReceivedCommand+0x350>)
 80044fc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 80044fe:	4b24      	ldr	r3, [pc, #144]	; (8004590 <ProcessReceivedCommand+0x350>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b29a      	uxth	r2, r3
 8004504:	23c8      	movs	r3, #200	; 0xc8
 8004506:	4921      	ldr	r1, [pc, #132]	; (800458c <ProcessReceivedCommand+0x34c>)
 8004508:	4822      	ldr	r0, [pc, #136]	; (8004594 <ProcessReceivedCommand+0x354>)
 800450a:	f004 fc92 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess)); // Clear the array
 800450e:	220f      	movs	r2, #15
 8004510:	2100      	movs	r1, #0
 8004512:	481e      	ldr	r0, [pc, #120]	; (800458c <ProcessReceivedCommand+0x34c>)
 8004514:	f005 fce2 	bl	8009edc <memset>

				// = (60*10e6)/(JogSpeed*EncoderRelsolution*Timer3Period)
				// Where JogSpeed in rpm; EcoderRelsolution in pulses, Timer3Period in us
				// Timer3 period in us = 2 us
			}
			break;
 8004518:	f000 bd93 	b.w	8005042 <ProcessReceivedCommand+0xe02>

		case 6: // 6 request driver data
			if((int)MotionCode[1] == 1)
 800451c:	4b0b      	ldr	r3, [pc, #44]	; (800454c <ProcessReceivedCommand+0x30c>)
 800451e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004522:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004526:	ee17 3a90 	vmov	r3, s15
 800452a:	2b01      	cmp	r3, #1
 800452c:	d108      	bne.n	8004540 <ProcessReceivedCommand+0x300>
			{
				UIDataRequest = true;
 800452e:	4b1a      	ldr	r3, [pc, #104]	; (8004598 <ProcessReceivedCommand+0x358>)
 8004530:	2201      	movs	r2, #1
 8004532:	701a      	strb	r2, [r3, #0]
				ReadMultiRegister(StE03,5);
 8004534:	2105      	movs	r1, #5
 8004536:	200c      	movs	r0, #12
 8004538:	f7fd f836 	bl	80015a8 <ReadMultiRegister>
			} // 6/1 If the UI request data
			else
			{
				UIDataRequest = false;
			}
			break;
 800453c:	f000 bd9c 	b.w	8005078 <ProcessReceivedCommand+0xe38>
				UIDataRequest = false;
 8004540:	4b15      	ldr	r3, [pc, #84]	; (8004598 <ProcessReceivedCommand+0x358>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
			break;
 8004546:	f000 bd97 	b.w	8005078 <ProcessReceivedCommand+0xe38>
 800454a:	bf00      	nop
 800454c:	20000518 	.word	0x20000518
 8004550:	2000044f 	.word	0x2000044f
 8004554:	20000445 	.word	0x20000445
 8004558:	2000044d 	.word	0x2000044d
 800455c:	20000457 	.word	0x20000457
 8004560:	20000003 	.word	0x20000003
 8004564:	20000458 	.word	0x20000458
 8004568:	20000450 	.word	0x20000450
 800456c:	20000456 	.word	0x20000456
 8004570:	20000002 	.word	0x20000002
 8004574:	20000008 	.word	0x20000008
 8004578:	20000464 	.word	0x20000464
 800457c:	2000045a 	.word	0x2000045a
 8004580:	20000448 	.word	0x20000448
 8004584:	20000005 	.word	0x20000005
 8004588:	0800f790 	.word	0x0800f790
 800458c:	20000430 	.word	0x20000430
 8004590:	2000042a 	.word	0x2000042a
 8004594:	2000033c 	.word	0x2000033c
 8004598:	2000044c 	.word	0x2000044c

		case 7: // Save System Params
			// Save to the flash memory
			//SaveParams(DrumRadius, DroppingAccelDistance, PullingSpeed, StoppingTime, DroppingAccel, SampleTime);
			SaveSystemParams();
 800459c:	f7fd f8b4 	bl	8001708 <SaveSystemParams>
			HAL_Delay(500);
 80045a0:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80045a4:	f002 fa22 	bl	80069ec <HAL_Delay>
			SaveSystemParams(); // Do twice times
 80045a8:	f7fd f8ae 	bl	8001708 <SaveSystemParams>
			// Send back to the UI to notify
			char MessageBuffer[10];
			TxPCLen = sprintf(MessageBuffer,"r7/1e");
 80045ac:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80045b0:	4999      	ldr	r1, [pc, #612]	; (8004818 <ProcessReceivedCommand+0x5d8>)
 80045b2:	4618      	mov	r0, r3
 80045b4:	f006 fb1a 	bl	800abec <siprintf>
 80045b8:	4603      	mov	r3, r0
 80045ba:	b2da      	uxtb	r2, r3
 80045bc:	4b97      	ldr	r3, [pc, #604]	; (800481c <ProcessReceivedCommand+0x5dc>)
 80045be:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t *)MessageBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 80045c0:	4b96      	ldr	r3, [pc, #600]	; (800481c <ProcessReceivedCommand+0x5dc>)
 80045c2:	781b      	ldrb	r3, [r3, #0]
 80045c4:	b29a      	uxth	r2, r3
 80045c6:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80045ca:	2364      	movs	r3, #100	; 0x64
 80045cc:	4894      	ldr	r0, [pc, #592]	; (8004820 <ProcessReceivedCommand+0x5e0>)
 80045ce:	f004 fc30 	bl	8008e32 <HAL_UART_Transmit>
			break;
 80045d2:	f000 bd51 	b.w	8005078 <ProcessReceivedCommand+0xe38>

		case 8: // Request reading digital driver output
			if((int)MotionCode[1] == 1) {OutputDataRequest = true;} // 8/1 = request
 80045d6:	4b93      	ldr	r3, [pc, #588]	; (8004824 <ProcessReceivedCommand+0x5e4>)
 80045d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80045dc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80045e0:	ee17 3a90 	vmov	r3, s15
 80045e4:	2b01      	cmp	r3, #1
 80045e6:	d104      	bne.n	80045f2 <ProcessReceivedCommand+0x3b2>
 80045e8:	4b8f      	ldr	r3, [pc, #572]	; (8004828 <ProcessReceivedCommand+0x5e8>)
 80045ea:	2201      	movs	r2, #1
 80045ec:	701a      	strb	r2, [r3, #0]
			else OutputDataRequest = false; // 8/0 = stop request
			break;
 80045ee:	f000 bd43 	b.w	8005078 <ProcessReceivedCommand+0xe38>
			else OutputDataRequest = false; // 8/0 = stop request
 80045f2:	4b8d      	ldr	r3, [pc, #564]	; (8004828 <ProcessReceivedCommand+0x5e8>)
 80045f4:	2200      	movs	r2, #0
 80045f6:	701a      	strb	r2, [r3, #0]
			break;
 80045f8:	f000 bd3e 	b.w	8005078 <ProcessReceivedCommand+0xe38>

		case 45: // Load saved parameters
			LoadSavedParam(MemoryAddress,Params);
 80045fc:	498b      	ldr	r1, [pc, #556]	; (800482c <ProcessReceivedCommand+0x5ec>)
 80045fe:	488c      	ldr	r0, [pc, #560]	; (8004830 <ProcessReceivedCommand+0x5f0>)
 8004600:	f7fd f844 	bl	800168c <LoadSavedParam>

			// General Params
			DrumRadius = Params[0];
 8004604:	4b89      	ldr	r3, [pc, #548]	; (800482c <ProcessReceivedCommand+0x5ec>)
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	4a8a      	ldr	r2, [pc, #552]	; (8004834 <ProcessReceivedCommand+0x5f4>)
 800460a:	6013      	str	r3, [r2, #0]
			PullingSpeed = Params[1];
 800460c:	4b87      	ldr	r3, [pc, #540]	; (800482c <ProcessReceivedCommand+0x5ec>)
 800460e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004612:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004616:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800461a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800461e:	b2da      	uxtb	r2, r3
 8004620:	4b85      	ldr	r3, [pc, #532]	; (8004838 <ProcessReceivedCommand+0x5f8>)
 8004622:	701a      	strb	r2, [r3, #0]
			StoppingTime = Params[2];
 8004624:	4b81      	ldr	r3, [pc, #516]	; (800482c <ProcessReceivedCommand+0x5ec>)
 8004626:	edd3 7a02 	vldr	s15, [r3, #8]
 800462a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462e:	ee17 3a90 	vmov	r3, s15
 8004632:	b29a      	uxth	r2, r3
 8004634:	4b81      	ldr	r3, [pc, #516]	; (800483c <ProcessReceivedCommand+0x5fc>)
 8004636:	801a      	strh	r2, [r3, #0]
			SampleTime = Params[3];
 8004638:	4b7c      	ldr	r3, [pc, #496]	; (800482c <ProcessReceivedCommand+0x5ec>)
 800463a:	edd3 7a03 	vldr	s15, [r3, #12]
 800463e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004642:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004646:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800464a:	b2da      	uxtb	r2, r3
 800464c:	4b7c      	ldr	r3, [pc, #496]	; (8004840 <ProcessReceivedCommand+0x600>)
 800464e:	701a      	strb	r2, [r3, #0]

			// Dropping Stage Params
			DroppingAccelDistance = Params[4];
 8004650:	4b76      	ldr	r3, [pc, #472]	; (800482c <ProcessReceivedCommand+0x5ec>)
 8004652:	691b      	ldr	r3, [r3, #16]
 8004654:	4a7b      	ldr	r2, [pc, #492]	; (8004844 <ProcessReceivedCommand+0x604>)
 8004656:	6013      	str	r3, [r2, #0]
			DroppingAccel  = Params[5];
 8004658:	4b74      	ldr	r3, [pc, #464]	; (800482c <ProcessReceivedCommand+0x5ec>)
 800465a:	695b      	ldr	r3, [r3, #20]
 800465c:	4a7a      	ldr	r2, [pc, #488]	; (8004848 <ProcessReceivedCommand+0x608>)
 800465e:	6013      	str	r3, [r2, #0]
			DroppingDecel = Params[6];
 8004660:	4b72      	ldr	r3, [pc, #456]	; (800482c <ProcessReceivedCommand+0x5ec>)
 8004662:	699b      	ldr	r3, [r3, #24]
 8004664:	4a79      	ldr	r2, [pc, #484]	; (800484c <ProcessReceivedCommand+0x60c>)
 8004666:	6013      	str	r3, [r2, #0]


			// Pulling Stage Params
			PullingAccelDistance = Params[7];
 8004668:	4b70      	ldr	r3, [pc, #448]	; (800482c <ProcessReceivedCommand+0x5ec>)
 800466a:	69db      	ldr	r3, [r3, #28]
 800466c:	4a78      	ldr	r2, [pc, #480]	; (8004850 <ProcessReceivedCommand+0x610>)
 800466e:	6013      	str	r3, [r2, #0]
			PullingAccel = Params[8];
 8004670:	4b6e      	ldr	r3, [pc, #440]	; (800482c <ProcessReceivedCommand+0x5ec>)
 8004672:	6a1b      	ldr	r3, [r3, #32]
 8004674:	4a77      	ldr	r2, [pc, #476]	; (8004854 <ProcessReceivedCommand+0x614>)
 8004676:	6013      	str	r3, [r2, #0]
			PullingDecel = Params[9];
 8004678:	4b6c      	ldr	r3, [pc, #432]	; (800482c <ProcessReceivedCommand+0x5ec>)
 800467a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800467c:	4a76      	ldr	r2, [pc, #472]	; (8004858 <ProcessReceivedCommand+0x618>)
 800467e:	6013      	str	r3, [r2, #0]

			FlyAccSlope = Params[10];
 8004680:	4b6a      	ldr	r3, [pc, #424]	; (800482c <ProcessReceivedCommand+0x5ec>)
 8004682:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004684:	4a75      	ldr	r2, [pc, #468]	; (800485c <ProcessReceivedCommand+0x61c>)
 8004686:	6013      	str	r3, [r2, #0]
			DistCoeff = Params[11];
 8004688:	4b68      	ldr	r3, [pc, #416]	; (800482c <ProcessReceivedCommand+0x5ec>)
 800468a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800468c:	4a74      	ldr	r2, [pc, #464]	; (8004860 <ProcessReceivedCommand+0x620>)
 800468e:	6013      	str	r3, [r2, #0]
			BrakeAccSlope = Params[12];
 8004690:	4b66      	ldr	r3, [pc, #408]	; (800482c <ProcessReceivedCommand+0x5ec>)
 8004692:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004694:	4a73      	ldr	r2, [pc, #460]	; (8004864 <ProcessReceivedCommand+0x624>)
 8004696:	6013      	str	r3, [r2, #0]
			// Send to the GUI
			char ParamBuffer[60];
			TxPCLen = sprintf(ParamBuffer,"p%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4fe"
 8004698:	4b66      	ldr	r3, [pc, #408]	; (8004834 <ProcessReceivedCommand+0x5f4>)
 800469a:	681b      	ldr	r3, [r3, #0]
 800469c:	4618      	mov	r0, r3
 800469e:	f7fb ff53 	bl	8000548 <__aeabi_f2d>
 80046a2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80046a6:	4b64      	ldr	r3, [pc, #400]	; (8004838 <ProcessReceivedCommand+0x5f8>)
 80046a8:	781b      	ldrb	r3, [r3, #0]
 80046aa:	461e      	mov	r6, r3
 80046ac:	4b63      	ldr	r3, [pc, #396]	; (800483c <ProcessReceivedCommand+0x5fc>)
 80046ae:	881b      	ldrh	r3, [r3, #0]
 80046b0:	62fb      	str	r3, [r7, #44]	; 0x2c
 80046b2:	4b63      	ldr	r3, [pc, #396]	; (8004840 <ProcessReceivedCommand+0x600>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	62bb      	str	r3, [r7, #40]	; 0x28
 80046b8:	4b62      	ldr	r3, [pc, #392]	; (8004844 <ProcessReceivedCommand+0x604>)
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	4618      	mov	r0, r3
 80046be:	f7fb ff43 	bl	8000548 <__aeabi_f2d>
 80046c2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80046c6:	4b60      	ldr	r3, [pc, #384]	; (8004848 <ProcessReceivedCommand+0x608>)
 80046c8:	681b      	ldr	r3, [r3, #0]
 80046ca:	4618      	mov	r0, r3
 80046cc:	f7fb ff3c 	bl	8000548 <__aeabi_f2d>
 80046d0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80046d4:	4b5d      	ldr	r3, [pc, #372]	; (800484c <ProcessReceivedCommand+0x60c>)
 80046d6:	681b      	ldr	r3, [r3, #0]
 80046d8:	4618      	mov	r0, r3
 80046da:	f7fb ff35 	bl	8000548 <__aeabi_f2d>
 80046de:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80046e2:	4b5b      	ldr	r3, [pc, #364]	; (8004850 <ProcessReceivedCommand+0x610>)
 80046e4:	681b      	ldr	r3, [r3, #0]
 80046e6:	4618      	mov	r0, r3
 80046e8:	f7fb ff2e 	bl	8000548 <__aeabi_f2d>
 80046ec:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80046f0:	4b58      	ldr	r3, [pc, #352]	; (8004854 <ProcessReceivedCommand+0x614>)
 80046f2:	681b      	ldr	r3, [r3, #0]
 80046f4:	4618      	mov	r0, r3
 80046f6:	f7fb ff27 	bl	8000548 <__aeabi_f2d>
 80046fa:	e9c7 0100 	strd	r0, r1, [r7]
 80046fe:	4b56      	ldr	r3, [pc, #344]	; (8004858 <ProcessReceivedCommand+0x618>)
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	4618      	mov	r0, r3
 8004704:	f7fb ff20 	bl	8000548 <__aeabi_f2d>
 8004708:	4682      	mov	sl, r0
 800470a:	468b      	mov	fp, r1
 800470c:	4b53      	ldr	r3, [pc, #332]	; (800485c <ProcessReceivedCommand+0x61c>)
 800470e:	681b      	ldr	r3, [r3, #0]
 8004710:	4618      	mov	r0, r3
 8004712:	f7fb ff19 	bl	8000548 <__aeabi_f2d>
 8004716:	4680      	mov	r8, r0
 8004718:	4689      	mov	r9, r1
 800471a:	4b51      	ldr	r3, [pc, #324]	; (8004860 <ProcessReceivedCommand+0x620>)
 800471c:	681b      	ldr	r3, [r3, #0]
 800471e:	4618      	mov	r0, r3
 8004720:	f7fb ff12 	bl	8000548 <__aeabi_f2d>
 8004724:	4604      	mov	r4, r0
 8004726:	460d      	mov	r5, r1
 8004728:	4b4e      	ldr	r3, [pc, #312]	; (8004864 <ProcessReceivedCommand+0x624>)
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	4618      	mov	r0, r3
 800472e:	f7fb ff0b 	bl	8000548 <__aeabi_f2d>
 8004732:	4602      	mov	r2, r0
 8004734:	460b      	mov	r3, r1
 8004736:	f107 0038 	add.w	r0, r7, #56	; 0x38
 800473a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800473e:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8004742:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004746:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 800474a:	ed97 7b00 	vldr	d7, [r7]
 800474e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004752:	ed97 7b02 	vldr	d7, [r7, #8]
 8004756:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800475a:	ed97 7b04 	vldr	d7, [r7, #16]
 800475e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004762:	ed97 7b06 	vldr	d7, [r7, #24]
 8004766:	ed8d 7b06 	vstr	d7, [sp, #24]
 800476a:	ed97 7b08 	vldr	d7, [r7, #32]
 800476e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004772:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004774:	9102      	str	r1, [sp, #8]
 8004776:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004778:	9301      	str	r3, [sp, #4]
 800477a:	9600      	str	r6, [sp, #0]
 800477c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004780:	4939      	ldr	r1, [pc, #228]	; (8004868 <ProcessReceivedCommand+0x628>)
 8004782:	f006 fa33 	bl	800abec <siprintf>
 8004786:	4603      	mov	r3, r0
 8004788:	b2da      	uxtb	r2, r3
 800478a:	4b24      	ldr	r3, [pc, #144]	; (800481c <ProcessReceivedCommand+0x5dc>)
 800478c:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
					 FlyAccSlope, DistCoeff, BrakeAccSlope); // Combine to a string
			HAL_UART_Transmit(&huart6,(uint8_t *)ParamBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 800478e:	4b23      	ldr	r3, [pc, #140]	; (800481c <ProcessReceivedCommand+0x5dc>)
 8004790:	781b      	ldrb	r3, [r3, #0]
 8004792:	b29a      	uxth	r2, r3
 8004794:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004798:	23c8      	movs	r3, #200	; 0xc8
 800479a:	4821      	ldr	r0, [pc, #132]	; (8004820 <ProcessReceivedCommand+0x5e0>)
 800479c:	f004 fb49 	bl	8008e32 <HAL_UART_Transmit>
			break;
 80047a0:	f000 bc6a 	b.w	8005078 <ProcessReceivedCommand+0xe38>

		case 11: // Set Drum Radius
			if (StartRunning) // Setting is not available while running
 80047a4:	4b31      	ldr	r3, [pc, #196]	; (800486c <ProcessReceivedCommand+0x62c>)
 80047a6:	781b      	ldrb	r3, [r3, #0]
 80047a8:	2b00      	cmp	r3, #0
 80047aa:	d006      	beq.n	80047ba <ProcessReceivedCommand+0x57a>
			{
				InitializeRunning (ExperimentMode);
 80047ac:	4b30      	ldr	r3, [pc, #192]	; (8004870 <ProcessReceivedCommand+0x630>)
 80047ae:	781b      	ldrb	r3, [r3, #0]
 80047b0:	4618      	mov	r0, r3
 80047b2:	f7fd fc39 	bl	8002028 <InitializeRunning>
				break;
 80047b6:	f000 bc5f 	b.w	8005078 <ProcessReceivedCommand+0xe38>
			}
			else
			{
				DrumRadius = MotionCode[1];
 80047ba:	4b1a      	ldr	r3, [pc, #104]	; (8004824 <ProcessReceivedCommand+0x5e4>)
 80047bc:	685b      	ldr	r3, [r3, #4]
 80047be:	4a1d      	ldr	r2, [pc, #116]	; (8004834 <ProcessReceivedCommand+0x5f4>)
 80047c0:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 80047c2:	f7ff f9cd 	bl	8003b60 <CalculateRunningSpec>

//				char DrumRadiusBuffer[10];
//				TxPCLen = sprintf(DrumRadiusBuffer,"r11/%.2fe",DrumRadius);
//				HAL_UART_Transmit(&huart6,(uint8_t *)DrumRadiusBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"r11/%.2fe",DrumRadius);
 80047c6:	4b1b      	ldr	r3, [pc, #108]	; (8004834 <ProcessReceivedCommand+0x5f4>)
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	4618      	mov	r0, r3
 80047cc:	f7fb febc 	bl	8000548 <__aeabi_f2d>
 80047d0:	4602      	mov	r2, r0
 80047d2:	460b      	mov	r3, r1
 80047d4:	4927      	ldr	r1, [pc, #156]	; (8004874 <ProcessReceivedCommand+0x634>)
 80047d6:	4828      	ldr	r0, [pc, #160]	; (8004878 <ProcessReceivedCommand+0x638>)
 80047d8:	f006 fa08 	bl	800abec <siprintf>
 80047dc:	4603      	mov	r3, r0
 80047de:	b2da      	uxtb	r2, r3
 80047e0:	4b0e      	ldr	r3, [pc, #56]	; (800481c <ProcessReceivedCommand+0x5dc>)
 80047e2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 80047e4:	4b0d      	ldr	r3, [pc, #52]	; (800481c <ProcessReceivedCommand+0x5dc>)
 80047e6:	781b      	ldrb	r3, [r3, #0]
 80047e8:	b29a      	uxth	r2, r3
 80047ea:	23c8      	movs	r3, #200	; 0xc8
 80047ec:	4922      	ldr	r1, [pc, #136]	; (8004878 <ProcessReceivedCommand+0x638>)
 80047ee:	480c      	ldr	r0, [pc, #48]	; (8004820 <ProcessReceivedCommand+0x5e0>)
 80047f0:	f004 fb1f 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80047f4:	220f      	movs	r2, #15
 80047f6:	2100      	movs	r1, #0
 80047f8:	481f      	ldr	r0, [pc, #124]	; (8004878 <ProcessReceivedCommand+0x638>)
 80047fa:	f005 fb6f 	bl	8009edc <memset>
				break;
 80047fe:	f000 bc3b 	b.w	8005078 <ProcessReceivedCommand+0xe38>
			}

		case 12: // Set DroppingAccelDistance
			if (StartRunning) // Setting is not available while running
 8004802:	4b1a      	ldr	r3, [pc, #104]	; (800486c <ProcessReceivedCommand+0x62c>)
 8004804:	781b      	ldrb	r3, [r3, #0]
 8004806:	2b00      	cmp	r3, #0
 8004808:	d038      	beq.n	800487c <ProcessReceivedCommand+0x63c>
			{
				InitializeRunning (ExperimentMode);
 800480a:	4b19      	ldr	r3, [pc, #100]	; (8004870 <ProcessReceivedCommand+0x630>)
 800480c:	781b      	ldrb	r3, [r3, #0]
 800480e:	4618      	mov	r0, r3
 8004810:	f7fd fc0a 	bl	8002028 <InitializeRunning>
				break;
 8004814:	f000 bc30 	b.w	8005078 <ProcessReceivedCommand+0xe38>
 8004818:	0800f798 	.word	0x0800f798
 800481c:	2000042a 	.word	0x2000042a
 8004820:	2000033c 	.word	0x2000033c
 8004824:	20000518 	.word	0x20000518
 8004828:	20000001 	.word	0x20000001
 800482c:	200004d4 	.word	0x200004d4
 8004830:	08040000 	.word	0x08040000
 8004834:	2000046c 	.word	0x2000046c
 8004838:	20000471 	.word	0x20000471
 800483c:	20000472 	.word	0x20000472
 8004840:	20000470 	.word	0x20000470
 8004844:	20000494 	.word	0x20000494
 8004848:	20000478 	.word	0x20000478
 800484c:	2000047c 	.word	0x2000047c
 8004850:	200004b4 	.word	0x200004b4
 8004854:	20000498 	.word	0x20000498
 8004858:	2000049c 	.word	0x2000049c
 800485c:	20000540 	.word	0x20000540
 8004860:	20000538 	.word	0x20000538
 8004864:	2000053c 	.word	0x2000053c
 8004868:	0800f7a0 	.word	0x0800f7a0
 800486c:	20000446 	.word	0x20000446
 8004870:	20000005 	.word	0x20000005
 8004874:	0800f7e0 	.word	0x0800f7e0
 8004878:	20000430 	.word	0x20000430
			}
			else
			{
				DroppingAccelDistance = MotionCode[1];
 800487c:	4b9e      	ldr	r3, [pc, #632]	; (8004af8 <ProcessReceivedCommand+0x8b8>)
 800487e:	685b      	ldr	r3, [r3, #4]
 8004880:	4a9e      	ldr	r2, [pc, #632]	; (8004afc <ProcessReceivedCommand+0x8bc>)
 8004882:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 8004884:	f7ff f96c 	bl	8003b60 <CalculateRunningSpec>

//				char DroppingAccelDistanceBuffer[10];
//				TxPCLen = sprintf(DroppingAccelDistanceBuffer,"r12/%.1fe",DroppingAccelDistance);
//				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelDistanceBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"r12/%.1fe",DroppingAccelDistance);
 8004888:	4b9c      	ldr	r3, [pc, #624]	; (8004afc <ProcessReceivedCommand+0x8bc>)
 800488a:	681b      	ldr	r3, [r3, #0]
 800488c:	4618      	mov	r0, r3
 800488e:	f7fb fe5b 	bl	8000548 <__aeabi_f2d>
 8004892:	4602      	mov	r2, r0
 8004894:	460b      	mov	r3, r1
 8004896:	499a      	ldr	r1, [pc, #616]	; (8004b00 <ProcessReceivedCommand+0x8c0>)
 8004898:	489a      	ldr	r0, [pc, #616]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 800489a:	f006 f9a7 	bl	800abec <siprintf>
 800489e:	4603      	mov	r3, r0
 80048a0:	b2da      	uxtb	r2, r3
 80048a2:	4b99      	ldr	r3, [pc, #612]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 80048a4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80048a6:	4b98      	ldr	r3, [pc, #608]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 80048a8:	781b      	ldrb	r3, [r3, #0]
 80048aa:	b29a      	uxth	r2, r3
 80048ac:	23c8      	movs	r3, #200	; 0xc8
 80048ae:	4995      	ldr	r1, [pc, #596]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 80048b0:	4896      	ldr	r0, [pc, #600]	; (8004b0c <ProcessReceivedCommand+0x8cc>)
 80048b2:	f004 fabe 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80048b6:	220f      	movs	r2, #15
 80048b8:	2100      	movs	r1, #0
 80048ba:	4892      	ldr	r0, [pc, #584]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 80048bc:	f005 fb0e 	bl	8009edc <memset>
				break;
 80048c0:	e3da      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}

		case 13: // Set PullingSpeed
			// PullingSpeed is the maximum speed when homing or going to the initial Posion
			if (StartRunning) // Setting is not available while running
 80048c2:	4b93      	ldr	r3, [pc, #588]	; (8004b10 <ProcessReceivedCommand+0x8d0>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d005      	beq.n	80048d6 <ProcessReceivedCommand+0x696>
			{
				InitializeRunning (ExperimentMode);
 80048ca:	4b92      	ldr	r3, [pc, #584]	; (8004b14 <ProcessReceivedCommand+0x8d4>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	4618      	mov	r0, r3
 80048d0:	f7fd fbaa 	bl	8002028 <InitializeRunning>
				break;
 80048d4:	e3d0      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}
			else
			{
				PullingSpeed = MotionCode[1];
 80048d6:	4b88      	ldr	r3, [pc, #544]	; (8004af8 <ProcessReceivedCommand+0x8b8>)
 80048d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80048dc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048e0:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80048e4:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048e8:	b2da      	uxtb	r2, r3
 80048ea:	4b8b      	ldr	r3, [pc, #556]	; (8004b18 <ProcessReceivedCommand+0x8d8>)
 80048ec:	701a      	strb	r2, [r3, #0]
				GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 80048ee:	4b8a      	ldr	r3, [pc, #552]	; (8004b18 <ProcessReceivedCommand+0x8d8>)
 80048f0:	781b      	ldrb	r3, [r3, #0]
 80048f2:	4618      	mov	r0, r3
 80048f4:	f7fb fe16 	bl	8000524 <__aeabi_i2d>
 80048f8:	a37d      	add	r3, pc, #500	; (adr r3, 8004af0 <ProcessReceivedCommand+0x8b0>)
 80048fa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048fe:	f7fb fe7b 	bl	80005f8 <__aeabi_dmul>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	f04f 0200 	mov.w	r2, #0
 800490e:	4b83      	ldr	r3, [pc, #524]	; (8004b1c <ProcessReceivedCommand+0x8dc>)
 8004910:	f7fb ff9c 	bl	800084c <__aeabi_ddiv>
 8004914:	4602      	mov	r2, r0
 8004916:	460b      	mov	r3, r1
 8004918:	4610      	mov	r0, r2
 800491a:	4619      	mov	r1, r3
 800491c:	f7fc f964 	bl	8000be8 <__aeabi_d2f>
 8004920:	4603      	mov	r3, r0
 8004922:	4a7f      	ldr	r2, [pc, #508]	; (8004b20 <ProcessReceivedCommand+0x8e0>)
 8004924:	6013      	str	r3, [r2, #0]

				//char PullingSpeedBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r13/%de",PullingSpeed);
 8004926:	4b7c      	ldr	r3, [pc, #496]	; (8004b18 <ProcessReceivedCommand+0x8d8>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	461a      	mov	r2, r3
 800492c:	497d      	ldr	r1, [pc, #500]	; (8004b24 <ProcessReceivedCommand+0x8e4>)
 800492e:	4875      	ldr	r0, [pc, #468]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 8004930:	f006 f95c 	bl	800abec <siprintf>
 8004934:	4603      	mov	r3, r0
 8004936:	b2da      	uxtb	r2, r3
 8004938:	4b73      	ldr	r3, [pc, #460]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 800493a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800493c:	4b72      	ldr	r3, [pc, #456]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 800493e:	781b      	ldrb	r3, [r3, #0]
 8004940:	b29a      	uxth	r2, r3
 8004942:	23c8      	movs	r3, #200	; 0xc8
 8004944:	496f      	ldr	r1, [pc, #444]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 8004946:	4871      	ldr	r0, [pc, #452]	; (8004b0c <ProcessReceivedCommand+0x8cc>)
 8004948:	f004 fa73 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800494c:	220f      	movs	r2, #15
 800494e:	2100      	movs	r1, #0
 8004950:	486c      	ldr	r0, [pc, #432]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 8004952:	f005 fac3 	bl	8009edc <memset>
				break;
 8004956:	e38f      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}

		case 14: // Start Simulating
			if (StartRunning || StartSimulating) // Setting is not available while running
 8004958:	4b6d      	ldr	r3, [pc, #436]	; (8004b10 <ProcessReceivedCommand+0x8d0>)
 800495a:	781b      	ldrb	r3, [r3, #0]
 800495c:	2b00      	cmp	r3, #0
 800495e:	f040 838b 	bne.w	8005078 <ProcessReceivedCommand+0xe38>
 8004962:	4b71      	ldr	r3, [pc, #452]	; (8004b28 <ProcessReceivedCommand+0x8e8>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	2b00      	cmp	r3, #0
 8004968:	f040 8386 	bne.w	8005078 <ProcessReceivedCommand+0xe38>
				break;
			}
			else
			{
				// Turn off servo
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 800496c:	2200      	movs	r2, #0
 800496e:	2110      	movs	r1, #16
 8004970:	486e      	ldr	r0, [pc, #440]	; (8004b2c <ProcessReceivedCommand+0x8ec>)
 8004972:	f002 feb5 	bl	80076e0 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 8004976:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800497a:	f002 f837 	bl	80069ec <HAL_Delay>

				InitializeSimulating (ExperimentMode);
 800497e:	4b65      	ldr	r3, [pc, #404]	; (8004b14 <ProcessReceivedCommand+0x8d4>)
 8004980:	781b      	ldrb	r3, [r3, #0]
 8004982:	4618      	mov	r0, r3
 8004984:	f7fd faee 	bl	8001f64 <InitializeSimulating>
				break;
 8004988:	e376      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}

		case 15: // Set DroppingAccel
			if (StartRunning)
 800498a:	4b61      	ldr	r3, [pc, #388]	; (8004b10 <ProcessReceivedCommand+0x8d0>)
 800498c:	781b      	ldrb	r3, [r3, #0]
 800498e:	2b00      	cmp	r3, #0
 8004990:	f040 8359 	bne.w	8005046 <ProcessReceivedCommand+0xe06>
			{
				break;
			}
			else
			{
				DroppingAccel = MotionCode[1];
 8004994:	4b58      	ldr	r3, [pc, #352]	; (8004af8 <ProcessReceivedCommand+0x8b8>)
 8004996:	685b      	ldr	r3, [r3, #4]
 8004998:	4a65      	ldr	r2, [pc, #404]	; (8004b30 <ProcessReceivedCommand+0x8f0>)
 800499a:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 800499c:	f7ff f8e0 	bl	8003b60 <CalculateRunningSpec>

				//char DroppingAccelBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r15/%.3fe",DroppingAccel);
 80049a0:	4b63      	ldr	r3, [pc, #396]	; (8004b30 <ProcessReceivedCommand+0x8f0>)
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	4618      	mov	r0, r3
 80049a6:	f7fb fdcf 	bl	8000548 <__aeabi_f2d>
 80049aa:	4602      	mov	r2, r0
 80049ac:	460b      	mov	r3, r1
 80049ae:	4961      	ldr	r1, [pc, #388]	; (8004b34 <ProcessReceivedCommand+0x8f4>)
 80049b0:	4854      	ldr	r0, [pc, #336]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 80049b2:	f006 f91b 	bl	800abec <siprintf>
 80049b6:	4603      	mov	r3, r0
 80049b8:	b2da      	uxtb	r2, r3
 80049ba:	4b53      	ldr	r3, [pc, #332]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 80049bc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80049be:	4b52      	ldr	r3, [pc, #328]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 80049c0:	781b      	ldrb	r3, [r3, #0]
 80049c2:	b29a      	uxth	r2, r3
 80049c4:	23c8      	movs	r3, #200	; 0xc8
 80049c6:	494f      	ldr	r1, [pc, #316]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 80049c8:	4850      	ldr	r0, [pc, #320]	; (8004b0c <ProcessReceivedCommand+0x8cc>)
 80049ca:	f004 fa32 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80049ce:	220f      	movs	r2, #15
 80049d0:	2100      	movs	r1, #0
 80049d2:	484c      	ldr	r0, [pc, #304]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 80049d4:	f005 fa82 	bl	8009edc <memset>
				break;
 80049d8:	e34e      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}
		case 16: // Set SampleTime
			if (StartRunning) // When the experiment is running, disable this fcn
 80049da:	4b4d      	ldr	r3, [pc, #308]	; (8004b10 <ProcessReceivedCommand+0x8d0>)
 80049dc:	781b      	ldrb	r3, [r3, #0]
 80049de:	2b00      	cmp	r3, #0
 80049e0:	f040 8333 	bne.w	800504a <ProcessReceivedCommand+0xe0a>
			{
				break;
			}
			else
			{
				SampleTime = MotionCode[1];
 80049e4:	4b44      	ldr	r3, [pc, #272]	; (8004af8 <ProcessReceivedCommand+0x8b8>)
 80049e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80049ea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80049ee:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80049f2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80049f6:	b2da      	uxtb	r2, r3
 80049f8:	4b4f      	ldr	r3, [pc, #316]	; (8004b38 <ProcessReceivedCommand+0x8f8>)
 80049fa:	701a      	strb	r2, [r3, #0]
				if (SampleTime<= 20) // ms Set value range, 20:100ms
 80049fc:	4b4e      	ldr	r3, [pc, #312]	; (8004b38 <ProcessReceivedCommand+0x8f8>)
 80049fe:	781b      	ldrb	r3, [r3, #0]
 8004a00:	2b14      	cmp	r3, #20
 8004a02:	d802      	bhi.n	8004a0a <ProcessReceivedCommand+0x7ca>
				{
					SampleTime = 20;
 8004a04:	4b4c      	ldr	r3, [pc, #304]	; (8004b38 <ProcessReceivedCommand+0x8f8>)
 8004a06:	2214      	movs	r2, #20
 8004a08:	701a      	strb	r2, [r3, #0]
				}
				if (SampleTime >= 100) // ms
 8004a0a:	4b4b      	ldr	r3, [pc, #300]	; (8004b38 <ProcessReceivedCommand+0x8f8>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	2b63      	cmp	r3, #99	; 0x63
 8004a10:	d902      	bls.n	8004a18 <ProcessReceivedCommand+0x7d8>
				{
					SampleTime = 100;
 8004a12:	4b49      	ldr	r3, [pc, #292]	; (8004b38 <ProcessReceivedCommand+0x8f8>)
 8004a14:	2264      	movs	r2, #100	; 0x64
 8004a16:	701a      	strb	r2, [r3, #0]
				}
				//char SammpleTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r16/%de",SampleTime);
 8004a18:	4b47      	ldr	r3, [pc, #284]	; (8004b38 <ProcessReceivedCommand+0x8f8>)
 8004a1a:	781b      	ldrb	r3, [r3, #0]
 8004a1c:	461a      	mov	r2, r3
 8004a1e:	4947      	ldr	r1, [pc, #284]	; (8004b3c <ProcessReceivedCommand+0x8fc>)
 8004a20:	4838      	ldr	r0, [pc, #224]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 8004a22:	f006 f8e3 	bl	800abec <siprintf>
 8004a26:	4603      	mov	r3, r0
 8004a28:	b2da      	uxtb	r2, r3
 8004a2a:	4b37      	ldr	r3, [pc, #220]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 8004a2c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004a2e:	4b36      	ldr	r3, [pc, #216]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	b29a      	uxth	r2, r3
 8004a34:	23c8      	movs	r3, #200	; 0xc8
 8004a36:	4933      	ldr	r1, [pc, #204]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 8004a38:	4834      	ldr	r0, [pc, #208]	; (8004b0c <ProcessReceivedCommand+0x8cc>)
 8004a3a:	f004 f9fa 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004a3e:	220f      	movs	r2, #15
 8004a40:	2100      	movs	r1, #0
 8004a42:	4830      	ldr	r0, [pc, #192]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 8004a44:	f005 fa4a 	bl	8009edc <memset>
				break;
 8004a48:	e316      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}

		case 17: // Reset MCU
			HAL_NVIC_SystemReset();
 8004a4a:	f002 f90e 	bl	8006c6a <HAL_NVIC_SystemReset>
			break;
 8004a4e:	e313      	b.n	8005078 <ProcessReceivedCommand+0xe38>
		case 18: // Servo Enable on/off
			if (MotionCode[1] == 1) // Servo Enable ON
 8004a50:	4b29      	ldr	r3, [pc, #164]	; (8004af8 <ProcessReceivedCommand+0x8b8>)
 8004a52:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a56:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a5a:	eef4 7a47 	vcmp.f32	s15, s14
 8004a5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a62:	d105      	bne.n	8004a70 <ProcessReceivedCommand+0x830>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Servo enable on
 8004a64:	2201      	movs	r2, #1
 8004a66:	2110      	movs	r1, #16
 8004a68:	4830      	ldr	r0, [pc, #192]	; (8004b2c <ProcessReceivedCommand+0x8ec>)
 8004a6a:	f002 fe39 	bl	80076e0 <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
			break;
 8004a6e:	e303      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8004a70:	2200      	movs	r2, #0
 8004a72:	2110      	movs	r1, #16
 8004a74:	482d      	ldr	r0, [pc, #180]	; (8004b2c <ProcessReceivedCommand+0x8ec>)
 8004a76:	f002 fe33 	bl	80076e0 <HAL_GPIO_WritePin>
			break;
 8004a7a:	e2fd      	b.n	8005078 <ProcessReceivedCommand+0xe38>
//					DisableSTOP();
//				}
//				break;
//			}
		case 27: // Set Running Mode
			if(StartRunning) // Setting is not available while running
 8004a7c:	4b24      	ldr	r3, [pc, #144]	; (8004b10 <ProcessReceivedCommand+0x8d0>)
 8004a7e:	781b      	ldrb	r3, [r3, #0]
 8004a80:	2b00      	cmp	r3, #0
 8004a82:	f040 82e4 	bne.w	800504e <ProcessReceivedCommand+0xe0e>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // RunningMode = true => Automatic Running
 8004a86:	4b1c      	ldr	r3, [pc, #112]	; (8004af8 <ProcessReceivedCommand+0x8b8>)
 8004a88:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a8c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a90:	eef4 7a47 	vcmp.f32	s15, s14
 8004a94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a98:	d103      	bne.n	8004aa2 <ProcessReceivedCommand+0x862>
				{
					RunningMode = true; // Automatic
 8004a9a:	4b29      	ldr	r3, [pc, #164]	; (8004b40 <ProcessReceivedCommand+0x900>)
 8004a9c:	2201      	movs	r2, #1
 8004a9e:	701a      	strb	r2, [r3, #0]
 8004aa0:	e002      	b.n	8004aa8 <ProcessReceivedCommand+0x868>
				}
				else
				{
					RunningMode = false; // Manual
 8004aa2:	4b27      	ldr	r3, [pc, #156]	; (8004b40 <ProcessReceivedCommand+0x900>)
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	701a      	strb	r2, [r3, #0]
				}
				//char SammpleTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"g27/%de",RunningMode);
 8004aa8:	4b25      	ldr	r3, [pc, #148]	; (8004b40 <ProcessReceivedCommand+0x900>)
 8004aaa:	781b      	ldrb	r3, [r3, #0]
 8004aac:	461a      	mov	r2, r3
 8004aae:	4925      	ldr	r1, [pc, #148]	; (8004b44 <ProcessReceivedCommand+0x904>)
 8004ab0:	4814      	ldr	r0, [pc, #80]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 8004ab2:	f006 f89b 	bl	800abec <siprintf>
 8004ab6:	4603      	mov	r3, r0
 8004ab8:	b2da      	uxtb	r2, r3
 8004aba:	4b13      	ldr	r3, [pc, #76]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 8004abc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004abe:	4b12      	ldr	r3, [pc, #72]	; (8004b08 <ProcessReceivedCommand+0x8c8>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	b29a      	uxth	r2, r3
 8004ac4:	23c8      	movs	r3, #200	; 0xc8
 8004ac6:	490f      	ldr	r1, [pc, #60]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 8004ac8:	4810      	ldr	r0, [pc, #64]	; (8004b0c <ProcessReceivedCommand+0x8cc>)
 8004aca:	f004 f9b2 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004ace:	220f      	movs	r2, #15
 8004ad0:	2100      	movs	r1, #0
 8004ad2:	480c      	ldr	r0, [pc, #48]	; (8004b04 <ProcessReceivedCommand+0x8c4>)
 8004ad4:	f005 fa02 	bl	8009edc <memset>
				break;
 8004ad8:	e2ce      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}

		case 28: // Stop jog move up/down in Position Jog control;
			if (StartRunning) // Setting is not available while running
 8004ada:	4b0d      	ldr	r3, [pc, #52]	; (8004b10 <ProcessReceivedCommand+0x8d0>)
 8004adc:	781b      	ldrb	r3, [r3, #0]
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	f040 82b7 	bne.w	8005052 <ProcessReceivedCommand+0xe12>
			{
				break;
			}
			else
			{
				StopPulseGenerating();
 8004ae4:	f7fc ff36 	bl	8001954 <StopPulseGenerating>
				JoggingMoveUp = false;
 8004ae8:	4b17      	ldr	r3, [pc, #92]	; (8004b48 <ProcessReceivedCommand+0x908>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
				//HAL_TIM_IC_Stop()
				break;
 8004aee:	e2c3      	b.n	8005078 <ProcessReceivedCommand+0xe38>
 8004af0:	9999999a 	.word	0x9999999a
 8004af4:	3fb99999 	.word	0x3fb99999
 8004af8:	20000518 	.word	0x20000518
 8004afc:	20000494 	.word	0x20000494
 8004b00:	0800f7ec 	.word	0x0800f7ec
 8004b04:	20000430 	.word	0x20000430
 8004b08:	2000042a 	.word	0x2000042a
 8004b0c:	2000033c 	.word	0x2000033c
 8004b10:	20000446 	.word	0x20000446
 8004b14:	20000005 	.word	0x20000005
 8004b18:	20000471 	.word	0x20000471
 8004b1c:	40080000 	.word	0x40080000
 8004b20:	20000474 	.word	0x20000474
 8004b24:	0800f7f8 	.word	0x0800f7f8
 8004b28:	20000447 	.word	0x20000447
 8004b2c:	40020800 	.word	0x40020800
 8004b30:	20000478 	.word	0x20000478
 8004b34:	0800f800 	.word	0x0800f800
 8004b38:	20000470 	.word	0x20000470
 8004b3c:	0800f80c 	.word	0x0800f80c
 8004b40:	20000459 	.word	0x20000459
 8004b44:	0800f814 	.word	0x0800f814
 8004b48:	20000456 	.word	0x20000456
//				}
//				break;
//			}

		case 31: // Set Experiment Mode
			if (StartRunning) // Setting is not available while running
 8004b4c:	4ba9      	ldr	r3, [pc, #676]	; (8004df4 <ProcessReceivedCommand+0xbb4>)
 8004b4e:	781b      	ldrb	r3, [r3, #0]
 8004b50:	2b00      	cmp	r3, #0
 8004b52:	f040 8280 	bne.w	8005056 <ProcessReceivedCommand+0xe16>
			{
				break;
			}
			else
			{
				ExperimentMode = MotionCode[1]; // 1=Dropping Mode;2 = Pulling; 3= Pulling->Dropping
 8004b56:	4ba8      	ldr	r3, [pc, #672]	; (8004df8 <ProcessReceivedCommand+0xbb8>)
 8004b58:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b5c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b60:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004b64:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b68:	b2da      	uxtb	r2, r3
 8004b6a:	4ba4      	ldr	r3, [pc, #656]	; (8004dfc <ProcessReceivedCommand+0xbbc>)
 8004b6c:	701a      	strb	r2, [r3, #0]
				//char SetModeBuff[8];
				TxPCLen = sprintf(ResponseMess,"m%de",ExperimentMode);
 8004b6e:	4ba3      	ldr	r3, [pc, #652]	; (8004dfc <ProcessReceivedCommand+0xbbc>)
 8004b70:	781b      	ldrb	r3, [r3, #0]
 8004b72:	461a      	mov	r2, r3
 8004b74:	49a2      	ldr	r1, [pc, #648]	; (8004e00 <ProcessReceivedCommand+0xbc0>)
 8004b76:	48a3      	ldr	r0, [pc, #652]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004b78:	f006 f838 	bl	800abec <siprintf>
 8004b7c:	4603      	mov	r3, r0
 8004b7e:	b2da      	uxtb	r2, r3
 8004b80:	4ba1      	ldr	r3, [pc, #644]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004b82:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004b84:	4ba0      	ldr	r3, [pc, #640]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004b86:	781b      	ldrb	r3, [r3, #0]
 8004b88:	b29a      	uxth	r2, r3
 8004b8a:	2364      	movs	r3, #100	; 0x64
 8004b8c:	499d      	ldr	r1, [pc, #628]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004b8e:	489f      	ldr	r0, [pc, #636]	; (8004e0c <ProcessReceivedCommand+0xbcc>)
 8004b90:	f004 f94f 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004b94:	220f      	movs	r2, #15
 8004b96:	2100      	movs	r1, #0
 8004b98:	489a      	ldr	r0, [pc, #616]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004b9a:	f005 f99f 	bl	8009edc <memset>
				break;
 8004b9e:	e26b      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}

		case 32: // Set Pulling Accelerating Distance; Pulling Mode
			if (StartRunning) // Setting is not available while running
 8004ba0:	4b94      	ldr	r3, [pc, #592]	; (8004df4 <ProcessReceivedCommand+0xbb4>)
 8004ba2:	781b      	ldrb	r3, [r3, #0]
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	f040 8258 	bne.w	800505a <ProcessReceivedCommand+0xe1a>
			{
				break;
			}
			else
			{
				PullingAccelDistance = MotionCode[1];
 8004baa:	4b93      	ldr	r3, [pc, #588]	; (8004df8 <ProcessReceivedCommand+0xbb8>)
 8004bac:	685b      	ldr	r3, [r3, #4]
 8004bae:	4a98      	ldr	r2, [pc, #608]	; (8004e10 <ProcessReceivedCommand+0xbd0>)
 8004bb0:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 8004bb2:	f7fe ffd5 	bl	8003b60 <CalculateRunningSpec>

				//char PullingDistanceBuffer[10];
				TxPCLen = sprintf(ResponseMess,"r32/%.1fe",PullingAccelDistance);
 8004bb6:	4b96      	ldr	r3, [pc, #600]	; (8004e10 <ProcessReceivedCommand+0xbd0>)
 8004bb8:	681b      	ldr	r3, [r3, #0]
 8004bba:	4618      	mov	r0, r3
 8004bbc:	f7fb fcc4 	bl	8000548 <__aeabi_f2d>
 8004bc0:	4602      	mov	r2, r0
 8004bc2:	460b      	mov	r3, r1
 8004bc4:	4993      	ldr	r1, [pc, #588]	; (8004e14 <ProcessReceivedCommand+0xbd4>)
 8004bc6:	488f      	ldr	r0, [pc, #572]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004bc8:	f006 f810 	bl	800abec <siprintf>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	b2da      	uxtb	r2, r3
 8004bd0:	4b8d      	ldr	r3, [pc, #564]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004bd2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004bd4:	4b8c      	ldr	r3, [pc, #560]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004bd6:	781b      	ldrb	r3, [r3, #0]
 8004bd8:	b29a      	uxth	r2, r3
 8004bda:	2364      	movs	r3, #100	; 0x64
 8004bdc:	4989      	ldr	r1, [pc, #548]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004bde:	488b      	ldr	r0, [pc, #556]	; (8004e0c <ProcessReceivedCommand+0xbcc>)
 8004be0:	f004 f927 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004be4:	220f      	movs	r2, #15
 8004be6:	2100      	movs	r1, #0
 8004be8:	4886      	ldr	r0, [pc, #536]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004bea:	f005 f977 	bl	8009edc <memset>
				break;
 8004bee:	e243      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}

		case 33: // Set Pulling AccRef in Pulling Mode
			if (StartRunning)// Setting is not available while running
 8004bf0:	4b80      	ldr	r3, [pc, #512]	; (8004df4 <ProcessReceivedCommand+0xbb4>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	2b00      	cmp	r3, #0
 8004bf6:	f040 8232 	bne.w	800505e <ProcessReceivedCommand+0xe1e>
			{
				break;
			}
			else
			{
				PullingAccel = MotionCode[1];
 8004bfa:	4b7f      	ldr	r3, [pc, #508]	; (8004df8 <ProcessReceivedCommand+0xbb8>)
 8004bfc:	685b      	ldr	r3, [r3, #4]
 8004bfe:	4a86      	ldr	r2, [pc, #536]	; (8004e18 <ProcessReceivedCommand+0xbd8>)
 8004c00:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 8004c02:	f7fe ffad 	bl	8003b60 <CalculateRunningSpec>

				//char AccRefPullingBuffer[10];
				TxPCLen = sprintf(ResponseMess,"r33/%.2fe",PullingAccel);
 8004c06:	4b84      	ldr	r3, [pc, #528]	; (8004e18 <ProcessReceivedCommand+0xbd8>)
 8004c08:	681b      	ldr	r3, [r3, #0]
 8004c0a:	4618      	mov	r0, r3
 8004c0c:	f7fb fc9c 	bl	8000548 <__aeabi_f2d>
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	4981      	ldr	r1, [pc, #516]	; (8004e1c <ProcessReceivedCommand+0xbdc>)
 8004c16:	487b      	ldr	r0, [pc, #492]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004c18:	f005 ffe8 	bl	800abec <siprintf>
 8004c1c:	4603      	mov	r3, r0
 8004c1e:	b2da      	uxtb	r2, r3
 8004c20:	4b79      	ldr	r3, [pc, #484]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004c22:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004c24:	4b78      	ldr	r3, [pc, #480]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004c26:	781b      	ldrb	r3, [r3, #0]
 8004c28:	b29a      	uxth	r2, r3
 8004c2a:	2364      	movs	r3, #100	; 0x64
 8004c2c:	4975      	ldr	r1, [pc, #468]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004c2e:	4877      	ldr	r0, [pc, #476]	; (8004e0c <ProcessReceivedCommand+0xbcc>)
 8004c30:	f004 f8ff 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004c34:	220f      	movs	r2, #15
 8004c36:	2100      	movs	r1, #0
 8004c38:	4872      	ldr	r0, [pc, #456]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004c3a:	f005 f94f 	bl	8009edc <memset>
				break;
 8004c3e:	e21b      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}

		case 34: // Set DroppingDecel, m/s2
			if (StartRunning)// Setting is not available while running
 8004c40:	4b6c      	ldr	r3, [pc, #432]	; (8004df4 <ProcessReceivedCommand+0xbb4>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	2b00      	cmp	r3, #0
 8004c46:	f040 820c 	bne.w	8005062 <ProcessReceivedCommand+0xe22>
			{
				break;
			}
			else
			{
				DroppingDecel = MotionCode[1];
 8004c4a:	4b6b      	ldr	r3, [pc, #428]	; (8004df8 <ProcessReceivedCommand+0xbb8>)
 8004c4c:	685b      	ldr	r3, [r3, #4]
 8004c4e:	4a74      	ldr	r2, [pc, #464]	; (8004e20 <ProcessReceivedCommand+0xbe0>)
 8004c50:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 8004c52:	f7fe ff85 	bl	8003b60 <CalculateRunningSpec>

				//char DroppingDecelBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r34/%.2fe",DroppingDecel);
 8004c56:	4b72      	ldr	r3, [pc, #456]	; (8004e20 <ProcessReceivedCommand+0xbe0>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fb fc74 	bl	8000548 <__aeabi_f2d>
 8004c60:	4602      	mov	r2, r0
 8004c62:	460b      	mov	r3, r1
 8004c64:	496f      	ldr	r1, [pc, #444]	; (8004e24 <ProcessReceivedCommand+0xbe4>)
 8004c66:	4867      	ldr	r0, [pc, #412]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004c68:	f005 ffc0 	bl	800abec <siprintf>
 8004c6c:	4603      	mov	r3, r0
 8004c6e:	b2da      	uxtb	r2, r3
 8004c70:	4b65      	ldr	r3, [pc, #404]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004c72:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004c74:	4b64      	ldr	r3, [pc, #400]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004c76:	781b      	ldrb	r3, [r3, #0]
 8004c78:	b29a      	uxth	r2, r3
 8004c7a:	2364      	movs	r3, #100	; 0x64
 8004c7c:	4961      	ldr	r1, [pc, #388]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004c7e:	4863      	ldr	r0, [pc, #396]	; (8004e0c <ProcessReceivedCommand+0xbcc>)
 8004c80:	f004 f8d7 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004c84:	220f      	movs	r2, #15
 8004c86:	2100      	movs	r1, #0
 8004c88:	485e      	ldr	r0, [pc, #376]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004c8a:	f005 f927 	bl	8009edc <memset>
			}
			break;
 8004c8e:	e1f3      	b.n	8005078 <ProcessReceivedCommand+0xe38>

		case 35: // Set Pulling Deceleration in m/s2
			if (StartRunning)// Setting is not available while running
 8004c90:	4b58      	ldr	r3, [pc, #352]	; (8004df4 <ProcessReceivedCommand+0xbb4>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	f040 81e6 	bne.w	8005066 <ProcessReceivedCommand+0xe26>
			{
				break;
			}
			else
			{
				PullingDecel = MotionCode[1];
 8004c9a:	4b57      	ldr	r3, [pc, #348]	; (8004df8 <ProcessReceivedCommand+0xbb8>)
 8004c9c:	685b      	ldr	r3, [r3, #4]
 8004c9e:	4a62      	ldr	r2, [pc, #392]	; (8004e28 <ProcessReceivedCommand+0xbe8>)
 8004ca0:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 8004ca2:	f7fe ff5d 	bl	8003b60 <CalculateRunningSpec>

				//char PullingDecelBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r35/%.2fe",PullingDecel);
 8004ca6:	4b60      	ldr	r3, [pc, #384]	; (8004e28 <ProcessReceivedCommand+0xbe8>)
 8004ca8:	681b      	ldr	r3, [r3, #0]
 8004caa:	4618      	mov	r0, r3
 8004cac:	f7fb fc4c 	bl	8000548 <__aeabi_f2d>
 8004cb0:	4602      	mov	r2, r0
 8004cb2:	460b      	mov	r3, r1
 8004cb4:	495d      	ldr	r1, [pc, #372]	; (8004e2c <ProcessReceivedCommand+0xbec>)
 8004cb6:	4853      	ldr	r0, [pc, #332]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004cb8:	f005 ff98 	bl	800abec <siprintf>
 8004cbc:	4603      	mov	r3, r0
 8004cbe:	b2da      	uxtb	r2, r3
 8004cc0:	4b51      	ldr	r3, [pc, #324]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004cc2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004cc4:	4b50      	ldr	r3, [pc, #320]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004cc6:	781b      	ldrb	r3, [r3, #0]
 8004cc8:	b29a      	uxth	r2, r3
 8004cca:	2364      	movs	r3, #100	; 0x64
 8004ccc:	494d      	ldr	r1, [pc, #308]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004cce:	484f      	ldr	r0, [pc, #316]	; (8004e0c <ProcessReceivedCommand+0xbcc>)
 8004cd0:	f004 f8af 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004cd4:	220f      	movs	r2, #15
 8004cd6:	2100      	movs	r1, #0
 8004cd8:	484a      	ldr	r0, [pc, #296]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004cda:	f005 f8ff 	bl	8009edc <memset>
			}
			break;
 8004cde:	e1cb      	b.n	8005078 <ProcessReceivedCommand+0xe38>

		case 36: // Resource
			break;

		case 37: // Set Stopping Time
			if (StartRunning)// Setting is not available while running
 8004ce0:	4b44      	ldr	r3, [pc, #272]	; (8004df4 <ProcessReceivedCommand+0xbb4>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	2b00      	cmp	r3, #0
 8004ce6:	f040 81c0 	bne.w	800506a <ProcessReceivedCommand+0xe2a>
			{
				break;
			}
			else
			{
				StoppingTime = MotionCode[1];
 8004cea:	4b43      	ldr	r3, [pc, #268]	; (8004df8 <ProcessReceivedCommand+0xbb8>)
 8004cec:	edd3 7a01 	vldr	s15, [r3, #4]
 8004cf0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004cf4:	ee17 3a90 	vmov	r3, s15
 8004cf8:	b29a      	uxth	r2, r3
 8004cfa:	4b4d      	ldr	r3, [pc, #308]	; (8004e30 <ProcessReceivedCommand+0xbf0>)
 8004cfc:	801a      	strh	r2, [r3, #0]
//				{
//					StoppingTime = 10000; // max = 10000 ms
//				}
				//char StoppingTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r37/%de",StoppingTime);
 8004cfe:	4b4c      	ldr	r3, [pc, #304]	; (8004e30 <ProcessReceivedCommand+0xbf0>)
 8004d00:	881b      	ldrh	r3, [r3, #0]
 8004d02:	461a      	mov	r2, r3
 8004d04:	494b      	ldr	r1, [pc, #300]	; (8004e34 <ProcessReceivedCommand+0xbf4>)
 8004d06:	483f      	ldr	r0, [pc, #252]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004d08:	f005 ff70 	bl	800abec <siprintf>
 8004d0c:	4603      	mov	r3, r0
 8004d0e:	b2da      	uxtb	r2, r3
 8004d10:	4b3d      	ldr	r3, [pc, #244]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004d12:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004d14:	4b3c      	ldr	r3, [pc, #240]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004d16:	781b      	ldrb	r3, [r3, #0]
 8004d18:	b29a      	uxth	r2, r3
 8004d1a:	23c8      	movs	r3, #200	; 0xc8
 8004d1c:	4939      	ldr	r1, [pc, #228]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004d1e:	483b      	ldr	r0, [pc, #236]	; (8004e0c <ProcessReceivedCommand+0xbcc>)
 8004d20:	f004 f887 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004d24:	220f      	movs	r2, #15
 8004d26:	2100      	movs	r1, #0
 8004d28:	4836      	ldr	r0, [pc, #216]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004d2a:	f005 f8d7 	bl	8009edc <memset>
				break;
 8004d2e:	e1a3      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}
		case 38: // Homing task
			if (StartRunning)// Setting is not available while running
 8004d30:	4b30      	ldr	r3, [pc, #192]	; (8004df4 <ProcessReceivedCommand+0xbb4>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	f040 819a 	bne.w	800506e <ProcessReceivedCommand+0xe2e>
			{
				break;
			}
			else
			{
				IsHoming = true;
 8004d3a:	4b3f      	ldr	r3, [pc, #252]	; (8004e38 <ProcessReceivedCommand+0xbf8>)
 8004d3c:	2201      	movs	r2, #1
 8004d3e:	701a      	strb	r2, [r3, #0]
				//Timer3CountPeriod = CalculateTimer3Period(MotorDriver,PullingSpeed);
				//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
				Direction = false; // false = move up, true = move down
 8004d40:	4b3e      	ldr	r3, [pc, #248]	; (8004e3c <ProcessReceivedCommand+0xbfc>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
				PRIsToggled = true; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8004d46:	4b3e      	ldr	r3, [pc, #248]	; (8004e40 <ProcessReceivedCommand+0xc00>)
 8004d48:	2201      	movs	r2, #1
 8004d4a:	701a      	strb	r2, [r3, #0]
				JoggingMoveUp = true;
 8004d4c:	4b3d      	ldr	r3, [pc, #244]	; (8004e44 <ProcessReceivedCommand+0xc04>)
 8004d4e:	2201      	movs	r2, #1
 8004d50:	701a      	strb	r2, [r3, #0]
				DisableSTOP(); // Disable the stop
 8004d52:	f7fc fa89 	bl	8001268 <DisableSTOP>
				StartPulseGenerating();
 8004d56:	f7fc fe1b 	bl	8001990 <StartPulseGenerating>
			}
			break;
 8004d5a:	e18d      	b.n	8005078 <ProcessReceivedCommand+0xe38>

		case 39: // Set Driver type, FDA7000 or ASDA A3
			if (StartRunning)// Setting is not available while running
 8004d5c:	4b25      	ldr	r3, [pc, #148]	; (8004df4 <ProcessReceivedCommand+0xbb4>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	f040 8186 	bne.w	8005072 <ProcessReceivedCommand+0xe32>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // FDA7000
 8004d66:	4b24      	ldr	r3, [pc, #144]	; (8004df8 <ProcessReceivedCommand+0xbb8>)
 8004d68:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d70:	eef4 7a47 	vcmp.f32	s15, s14
 8004d74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d78:	d10c      	bne.n	8004d94 <ProcessReceivedCommand+0xb54>
				{
					MotorDriver = true;
 8004d7a:	4b33      	ldr	r3, [pc, #204]	; (8004e48 <ProcessReceivedCommand+0xc08>)
 8004d7c:	2201      	movs	r2, #1
 8004d7e:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 29; // For FDA7000, read 5 register => receive 25 bytes
 8004d80:	4b32      	ldr	r3, [pc, #200]	; (8004e4c <ProcessReceivedCommand+0xc0c>)
 8004d82:	221d      	movs	r2, #29
 8004d84:	701a      	strb	r2, [r3, #0]
					EncoderResolution = HigenEncoderResolution;
 8004d86:	4b32      	ldr	r3, [pc, #200]	; (8004e50 <ProcessReceivedCommand+0xc10>)
 8004d88:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004d8c:	801a      	strh	r2, [r3, #0]
					InitParams ();
 8004d8e:	f7ff f9e3 	bl	8004158 <InitParams>
 8004d92:	e00b      	b.n	8004dac <ProcessReceivedCommand+0xb6c>
				}
				else // ASDA A3
				{
					MotorDriver = false;
 8004d94:	4b2c      	ldr	r3, [pc, #176]	; (8004e48 <ProcessReceivedCommand+0xc08>)
 8004d96:	2200      	movs	r2, #0
 8004d98:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 17;
 8004d9a:	4b2c      	ldr	r3, [pc, #176]	; (8004e4c <ProcessReceivedCommand+0xc0c>)
 8004d9c:	2211      	movs	r2, #17
 8004d9e:	701a      	strb	r2, [r3, #0]
					EncoderResolution = AsdaEncoderResolution;
 8004da0:	4b2b      	ldr	r3, [pc, #172]	; (8004e50 <ProcessReceivedCommand+0xc10>)
 8004da2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004da6:	801a      	strh	r2, [r3, #0]
					InitParams ();
 8004da8:	f7ff f9d6 	bl	8004158 <InitParams>
					// For ASDA Drier, read 1 register => receive 9 bytes
					// read 2 registers => receive 13 bytes
				}
				//char DriverTypeBuffer[10];
				TxPCLen = sprintf(ResponseMess,"g39/%de",MotorDriver);
 8004dac:	4b26      	ldr	r3, [pc, #152]	; (8004e48 <ProcessReceivedCommand+0xc08>)
 8004dae:	781b      	ldrb	r3, [r3, #0]
 8004db0:	461a      	mov	r2, r3
 8004db2:	4928      	ldr	r1, [pc, #160]	; (8004e54 <ProcessReceivedCommand+0xc14>)
 8004db4:	4813      	ldr	r0, [pc, #76]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004db6:	f005 ff19 	bl	800abec <siprintf>
 8004dba:	4603      	mov	r3, r0
 8004dbc:	b2da      	uxtb	r2, r3
 8004dbe:	4b12      	ldr	r3, [pc, #72]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004dc0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004dc2:	4b11      	ldr	r3, [pc, #68]	; (8004e08 <ProcessReceivedCommand+0xbc8>)
 8004dc4:	781b      	ldrb	r3, [r3, #0]
 8004dc6:	b29a      	uxth	r2, r3
 8004dc8:	23c8      	movs	r3, #200	; 0xc8
 8004dca:	490e      	ldr	r1, [pc, #56]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004dcc:	480f      	ldr	r0, [pc, #60]	; (8004e0c <ProcessReceivedCommand+0xbcc>)
 8004dce:	f004 f830 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004dd2:	220f      	movs	r2, #15
 8004dd4:	2100      	movs	r1, #0
 8004dd6:	480b      	ldr	r0, [pc, #44]	; (8004e04 <ProcessReceivedCommand+0xbc4>)
 8004dd8:	f005 f880 	bl	8009edc <memset>
			}
			break;
 8004ddc:	e14c      	b.n	8005078 <ProcessReceivedCommand+0xe38>

		case 41: // Set Fly Acc slope
			if (StartRunning)// Setting is not available while running
 8004dde:	4b05      	ldr	r3, [pc, #20]	; (8004df4 <ProcessReceivedCommand+0xbb4>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d038      	beq.n	8004e58 <ProcessReceivedCommand+0xc18>
			{
				InitializeRunning(ExperimentMode);
 8004de6:	4b05      	ldr	r3, [pc, #20]	; (8004dfc <ProcessReceivedCommand+0xbbc>)
 8004de8:	781b      	ldrb	r3, [r3, #0]
 8004dea:	4618      	mov	r0, r3
 8004dec:	f7fd f91c 	bl	8002028 <InitializeRunning>
				TxPCLen = sprintf(ResponseMess,"r41/%.3fe",FlyAccSlope);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}

			break;
 8004df0:	e142      	b.n	8005078 <ProcessReceivedCommand+0xe38>
 8004df2:	bf00      	nop
 8004df4:	20000446 	.word	0x20000446
 8004df8:	20000518 	.word	0x20000518
 8004dfc:	20000005 	.word	0x20000005
 8004e00:	0800f81c 	.word	0x0800f81c
 8004e04:	20000430 	.word	0x20000430
 8004e08:	2000042a 	.word	0x2000042a
 8004e0c:	2000033c 	.word	0x2000033c
 8004e10:	200004b4 	.word	0x200004b4
 8004e14:	0800f824 	.word	0x0800f824
 8004e18:	20000498 	.word	0x20000498
 8004e1c:	0800f830 	.word	0x0800f830
 8004e20:	2000047c 	.word	0x2000047c
 8004e24:	0800f83c 	.word	0x0800f83c
 8004e28:	2000049c 	.word	0x2000049c
 8004e2c:	0800f848 	.word	0x0800f848
 8004e30:	20000472 	.word	0x20000472
 8004e34:	0800f854 	.word	0x0800f854
 8004e38:	20000458 	.word	0x20000458
 8004e3c:	20000448 	.word	0x20000448
 8004e40:	2000045a 	.word	0x2000045a
 8004e44:	20000456 	.word	0x20000456
 8004e48:	20000003 	.word	0x20000003
 8004e4c:	20000000 	.word	0x20000000
 8004e50:	2000000a 	.word	0x2000000a
 8004e54:	0800f85c 	.word	0x0800f85c
				FlyAccSlope = MotionCode[1];
 8004e58:	4b8a      	ldr	r3, [pc, #552]	; (8005084 <ProcessReceivedCommand+0xe44>)
 8004e5a:	685b      	ldr	r3, [r3, #4]
 8004e5c:	4a8a      	ldr	r2, [pc, #552]	; (8005088 <ProcessReceivedCommand+0xe48>)
 8004e5e:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(ResponseMess,"r41/%.3fe",FlyAccSlope);
 8004e60:	4b89      	ldr	r3, [pc, #548]	; (8005088 <ProcessReceivedCommand+0xe48>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f7fb fb6f 	bl	8000548 <__aeabi_f2d>
 8004e6a:	4602      	mov	r2, r0
 8004e6c:	460b      	mov	r3, r1
 8004e6e:	4987      	ldr	r1, [pc, #540]	; (800508c <ProcessReceivedCommand+0xe4c>)
 8004e70:	4887      	ldr	r0, [pc, #540]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004e72:	f005 febb 	bl	800abec <siprintf>
 8004e76:	4603      	mov	r3, r0
 8004e78:	b2da      	uxtb	r2, r3
 8004e7a:	4b86      	ldr	r3, [pc, #536]	; (8005094 <ProcessReceivedCommand+0xe54>)
 8004e7c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004e7e:	4b85      	ldr	r3, [pc, #532]	; (8005094 <ProcessReceivedCommand+0xe54>)
 8004e80:	781b      	ldrb	r3, [r3, #0]
 8004e82:	b29a      	uxth	r2, r3
 8004e84:	2364      	movs	r3, #100	; 0x64
 8004e86:	4982      	ldr	r1, [pc, #520]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004e88:	4883      	ldr	r0, [pc, #524]	; (8005098 <ProcessReceivedCommand+0xe58>)
 8004e8a:	f003 ffd2 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004e8e:	220f      	movs	r2, #15
 8004e90:	2100      	movs	r1, #0
 8004e92:	487f      	ldr	r0, [pc, #508]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004e94:	f005 f822 	bl	8009edc <memset>
			break;
 8004e98:	e0ee      	b.n	8005078 <ProcessReceivedCommand+0xe38>

		case 42: // Set Distance Coefficient
			if (StartRunning)// Setting is not available while running
 8004e9a:	4b80      	ldr	r3, [pc, #512]	; (800509c <ProcessReceivedCommand+0xe5c>)
 8004e9c:	781b      	ldrb	r3, [r3, #0]
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d005      	beq.n	8004eae <ProcessReceivedCommand+0xc6e>
			{
				InitializeRunning(ExperimentMode);
 8004ea2:	4b7f      	ldr	r3, [pc, #508]	; (80050a0 <ProcessReceivedCommand+0xe60>)
 8004ea4:	781b      	ldrb	r3, [r3, #0]
 8004ea6:	4618      	mov	r0, r3
 8004ea8:	f7fd f8be 	bl	8002028 <InitializeRunning>
				//char DistCoeffBuffer[10];
				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 8004eac:	e0e4      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				DistCoeff = MotionCode[1];
 8004eae:	4b75      	ldr	r3, [pc, #468]	; (8005084 <ProcessReceivedCommand+0xe44>)
 8004eb0:	685b      	ldr	r3, [r3, #4]
 8004eb2:	4a7c      	ldr	r2, [pc, #496]	; (80050a4 <ProcessReceivedCommand+0xe64>)
 8004eb4:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 8004eb6:	f7fe fe53 	bl	8003b60 <CalculateRunningSpec>
				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
 8004eba:	4b7a      	ldr	r3, [pc, #488]	; (80050a4 <ProcessReceivedCommand+0xe64>)
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	4618      	mov	r0, r3
 8004ec0:	f7fb fb42 	bl	8000548 <__aeabi_f2d>
 8004ec4:	4602      	mov	r2, r0
 8004ec6:	460b      	mov	r3, r1
 8004ec8:	4977      	ldr	r1, [pc, #476]	; (80050a8 <ProcessReceivedCommand+0xe68>)
 8004eca:	4871      	ldr	r0, [pc, #452]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004ecc:	f005 fe8e 	bl	800abec <siprintf>
 8004ed0:	4603      	mov	r3, r0
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	4b6f      	ldr	r3, [pc, #444]	; (8005094 <ProcessReceivedCommand+0xe54>)
 8004ed6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004ed8:	4b6e      	ldr	r3, [pc, #440]	; (8005094 <ProcessReceivedCommand+0xe54>)
 8004eda:	781b      	ldrb	r3, [r3, #0]
 8004edc:	b29a      	uxth	r2, r3
 8004ede:	2364      	movs	r3, #100	; 0x64
 8004ee0:	496b      	ldr	r1, [pc, #428]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004ee2:	486d      	ldr	r0, [pc, #436]	; (8005098 <ProcessReceivedCommand+0xe58>)
 8004ee4:	f003 ffa5 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004ee8:	220f      	movs	r2, #15
 8004eea:	2100      	movs	r1, #0
 8004eec:	4868      	ldr	r0, [pc, #416]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004eee:	f004 fff5 	bl	8009edc <memset>
			break;
 8004ef2:	e0c1      	b.n	8005078 <ProcessReceivedCommand+0xe38>

		case 43: //
			if (StartRunning)// Setting is not available while running
 8004ef4:	4b69      	ldr	r3, [pc, #420]	; (800509c <ProcessReceivedCommand+0xe5c>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	2b00      	cmp	r3, #0
 8004efa:	d005      	beq.n	8004f08 <ProcessReceivedCommand+0xcc8>
			{
				InitializeRunning(ExperimentMode);
 8004efc:	4b68      	ldr	r3, [pc, #416]	; (80050a0 <ProcessReceivedCommand+0xe60>)
 8004efe:	781b      	ldrb	r3, [r3, #0]
 8004f00:	4618      	mov	r0, r3
 8004f02:	f7fd f891 	bl	8002028 <InitializeRunning>

				TxPCLen = sprintf(ResponseMess,"r43/%.4fe",BrakeAccSlope);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 8004f06:	e0b7      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				BrakeAccSlope = MotionCode[1];
 8004f08:	4b5e      	ldr	r3, [pc, #376]	; (8005084 <ProcessReceivedCommand+0xe44>)
 8004f0a:	685b      	ldr	r3, [r3, #4]
 8004f0c:	4a67      	ldr	r2, [pc, #412]	; (80050ac <ProcessReceivedCommand+0xe6c>)
 8004f0e:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(ResponseMess,"r43/%.4fe",BrakeAccSlope);
 8004f10:	4b66      	ldr	r3, [pc, #408]	; (80050ac <ProcessReceivedCommand+0xe6c>)
 8004f12:	681b      	ldr	r3, [r3, #0]
 8004f14:	4618      	mov	r0, r3
 8004f16:	f7fb fb17 	bl	8000548 <__aeabi_f2d>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4964      	ldr	r1, [pc, #400]	; (80050b0 <ProcessReceivedCommand+0xe70>)
 8004f20:	485b      	ldr	r0, [pc, #364]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004f22:	f005 fe63 	bl	800abec <siprintf>
 8004f26:	4603      	mov	r3, r0
 8004f28:	b2da      	uxtb	r2, r3
 8004f2a:	4b5a      	ldr	r3, [pc, #360]	; (8005094 <ProcessReceivedCommand+0xe54>)
 8004f2c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004f2e:	4b59      	ldr	r3, [pc, #356]	; (8005094 <ProcessReceivedCommand+0xe54>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	b29a      	uxth	r2, r3
 8004f34:	2364      	movs	r3, #100	; 0x64
 8004f36:	4956      	ldr	r1, [pc, #344]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004f38:	4857      	ldr	r0, [pc, #348]	; (8005098 <ProcessReceivedCommand+0xe58>)
 8004f3a:	f003 ff7a 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004f3e:	220f      	movs	r2, #15
 8004f40:	2100      	movs	r1, #0
 8004f42:	4853      	ldr	r0, [pc, #332]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004f44:	f004 ffca 	bl	8009edc <memset>
			break;
 8004f48:	e096      	b.n	8005078 <ProcessReceivedCommand+0xe38>

		case 46: // Set origin (home) position
			OriginPulse = MotorEncPulse;
 8004f4a:	4b5a      	ldr	r3, [pc, #360]	; (80050b4 <ProcessReceivedCommand+0xe74>)
 8004f4c:	681b      	ldr	r3, [r3, #0]
 8004f4e:	4a5a      	ldr	r2, [pc, #360]	; (80050b8 <ProcessReceivedCommand+0xe78>)
 8004f50:	6013      	str	r3, [r2, #0]
			PositionPulseCmd = 0;
 8004f52:	4b5a      	ldr	r3, [pc, #360]	; (80050bc <ProcessReceivedCommand+0xe7c>)
 8004f54:	2200      	movs	r2, #0
 8004f56:	601a      	str	r2, [r3, #0]
			break;
 8004f58:	e08e      	b.n	8005078 <ProcessReceivedCommand+0xe38>

		case 47: // Set open/Closed loop control Mode
			if (StartRunning)// Setting is not available while running
 8004f5a:	4b50      	ldr	r3, [pc, #320]	; (800509c <ProcessReceivedCommand+0xe5c>)
 8004f5c:	781b      	ldrb	r3, [r3, #0]
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d005      	beq.n	8004f6e <ProcessReceivedCommand+0xd2e>
			{
				InitializeRunning(ExperimentMode);
 8004f62:	4b4f      	ldr	r3, [pc, #316]	; (80050a0 <ProcessReceivedCommand+0xe60>)
 8004f64:	781b      	ldrb	r3, [r3, #0]
 8004f66:	4618      	mov	r0, r3
 8004f68:	f7fd f85e 	bl	8002028 <InitializeRunning>
				//char ControlLoopBuffer[10];
				TxPCLen = sprintf(ResponseMess,"g47/%de",IsOpenLoopControl);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 8004f6c:	e084      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				if(MotionCode[1] == 0) // Set to Closed loop control
 8004f6e:	4b45      	ldr	r3, [pc, #276]	; (8005084 <ProcessReceivedCommand+0xe44>)
 8004f70:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f7c:	d103      	bne.n	8004f86 <ProcessReceivedCommand+0xd46>
					IsOpenLoopControl = false;
 8004f7e:	4b50      	ldr	r3, [pc, #320]	; (80050c0 <ProcessReceivedCommand+0xe80>)
 8004f80:	2200      	movs	r2, #0
 8004f82:	701a      	strb	r2, [r3, #0]
 8004f84:	e002      	b.n	8004f8c <ProcessReceivedCommand+0xd4c>
					IsOpenLoopControl = true;
 8004f86:	4b4e      	ldr	r3, [pc, #312]	; (80050c0 <ProcessReceivedCommand+0xe80>)
 8004f88:	2201      	movs	r2, #1
 8004f8a:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"g47/%de",IsOpenLoopControl);
 8004f8c:	4b4c      	ldr	r3, [pc, #304]	; (80050c0 <ProcessReceivedCommand+0xe80>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	461a      	mov	r2, r3
 8004f92:	494c      	ldr	r1, [pc, #304]	; (80050c4 <ProcessReceivedCommand+0xe84>)
 8004f94:	483e      	ldr	r0, [pc, #248]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004f96:	f005 fe29 	bl	800abec <siprintf>
 8004f9a:	4603      	mov	r3, r0
 8004f9c:	b2da      	uxtb	r2, r3
 8004f9e:	4b3d      	ldr	r3, [pc, #244]	; (8005094 <ProcessReceivedCommand+0xe54>)
 8004fa0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004fa2:	4b3c      	ldr	r3, [pc, #240]	; (8005094 <ProcessReceivedCommand+0xe54>)
 8004fa4:	781b      	ldrb	r3, [r3, #0]
 8004fa6:	b29a      	uxth	r2, r3
 8004fa8:	2364      	movs	r3, #100	; 0x64
 8004faa:	4939      	ldr	r1, [pc, #228]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004fac:	483a      	ldr	r0, [pc, #232]	; (8005098 <ProcessReceivedCommand+0xe58>)
 8004fae:	f003 ff40 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004fb2:	220f      	movs	r2, #15
 8004fb4:	2100      	movs	r1, #0
 8004fb6:	4836      	ldr	r0, [pc, #216]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004fb8:	f004 ff90 	bl	8009edc <memset>
			break;
 8004fbc:	e05c      	b.n	8005078 <ProcessReceivedCommand+0xe38>

		case 48: // turn on/off the software upper limit
			if (StartRunning)// Setting is not available while running
 8004fbe:	4b37      	ldr	r3, [pc, #220]	; (800509c <ProcessReceivedCommand+0xe5c>)
 8004fc0:	781b      	ldrb	r3, [r3, #0]
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d005      	beq.n	8004fd2 <ProcessReceivedCommand+0xd92>
			{
				InitializeRunning(ExperimentMode);
 8004fc6:	4b36      	ldr	r3, [pc, #216]	; (80050a0 <ProcessReceivedCommand+0xe60>)
 8004fc8:	781b      	ldrb	r3, [r3, #0]
 8004fca:	4618      	mov	r0, r3
 8004fcc:	f7fd f82c 	bl	8002028 <InitializeRunning>
				//char SoftWareLimitBuffer[10];
				TxPCLen = sprintf(ResponseMess,"g48/%de",SoftWareLimit);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 8004fd0:	e052      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				if(MotionCode[1] == 1) // turn on software limit
 8004fd2:	4b2c      	ldr	r3, [pc, #176]	; (8005084 <ProcessReceivedCommand+0xe44>)
 8004fd4:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fd8:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fdc:	eef4 7a47 	vcmp.f32	s15, s14
 8004fe0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe4:	d103      	bne.n	8004fee <ProcessReceivedCommand+0xdae>
					SoftWareLimit = true;
 8004fe6:	4b38      	ldr	r3, [pc, #224]	; (80050c8 <ProcessReceivedCommand+0xe88>)
 8004fe8:	2201      	movs	r2, #1
 8004fea:	701a      	strb	r2, [r3, #0]
 8004fec:	e002      	b.n	8004ff4 <ProcessReceivedCommand+0xdb4>
					SoftWareLimit = false;
 8004fee:	4b36      	ldr	r3, [pc, #216]	; (80050c8 <ProcessReceivedCommand+0xe88>)
 8004ff0:	2200      	movs	r2, #0
 8004ff2:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"g48/%de",SoftWareLimit);
 8004ff4:	4b34      	ldr	r3, [pc, #208]	; (80050c8 <ProcessReceivedCommand+0xe88>)
 8004ff6:	781b      	ldrb	r3, [r3, #0]
 8004ff8:	461a      	mov	r2, r3
 8004ffa:	4934      	ldr	r1, [pc, #208]	; (80050cc <ProcessReceivedCommand+0xe8c>)
 8004ffc:	4824      	ldr	r0, [pc, #144]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8004ffe:	f005 fdf5 	bl	800abec <siprintf>
 8005002:	4603      	mov	r3, r0
 8005004:	b2da      	uxtb	r2, r3
 8005006:	4b23      	ldr	r3, [pc, #140]	; (8005094 <ProcessReceivedCommand+0xe54>)
 8005008:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 800500a:	4b22      	ldr	r3, [pc, #136]	; (8005094 <ProcessReceivedCommand+0xe54>)
 800500c:	781b      	ldrb	r3, [r3, #0]
 800500e:	b29a      	uxth	r2, r3
 8005010:	2364      	movs	r3, #100	; 0x64
 8005012:	491f      	ldr	r1, [pc, #124]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8005014:	4820      	ldr	r0, [pc, #128]	; (8005098 <ProcessReceivedCommand+0xe58>)
 8005016:	f003 ff0c 	bl	8008e32 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800501a:	220f      	movs	r2, #15
 800501c:	2100      	movs	r1, #0
 800501e:	481c      	ldr	r0, [pc, #112]	; (8005090 <ProcessReceivedCommand+0xe50>)
 8005020:	f004 ff5c 	bl	8009edc <memset>
			break;
 8005024:	e028      	b.n	8005078 <ProcessReceivedCommand+0xe38>
		default:
			if (StartRunning)// Keep running
 8005026:	4b1d      	ldr	r3, [pc, #116]	; (800509c <ProcessReceivedCommand+0xe5c>)
 8005028:	781b      	ldrb	r3, [r3, #0]
 800502a:	2b00      	cmp	r3, #0
 800502c:	d023      	beq.n	8005076 <ProcessReceivedCommand+0xe36>
			{
				InitializeRunning(ExperimentMode);
 800502e:	4b1c      	ldr	r3, [pc, #112]	; (80050a0 <ProcessReceivedCommand+0xe60>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	4618      	mov	r0, r3
 8005034:	f7fc fff8 	bl	8002028 <InitializeRunning>
				break;
 8005038:	e01e      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			break; // unused
 800503a:	bf00      	nop
 800503c:	e01c      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			break;
 800503e:	bf00      	nop
 8005040:	e01a      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			break;
 8005042:	bf00      	nop
 8005044:	e018      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 8005046:	bf00      	nop
 8005048:	e016      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 800504a:	bf00      	nop
 800504c:	e014      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 800504e:	bf00      	nop
 8005050:	e012      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 8005052:	bf00      	nop
 8005054:	e010      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 8005056:	bf00      	nop
 8005058:	e00e      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 800505a:	bf00      	nop
 800505c:	e00c      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 800505e:	bf00      	nop
 8005060:	e00a      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 8005062:	bf00      	nop
 8005064:	e008      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 8005066:	bf00      	nop
 8005068:	e006      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 800506a:	bf00      	nop
 800506c:	e004      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 800506e:	bf00      	nop
 8005070:	e002      	b.n	8005078 <ProcessReceivedCommand+0xe38>
				break;
 8005072:	bf00      	nop
 8005074:	e000      	b.n	8005078 <ProcessReceivedCommand+0xe38>
			}
			else
			{
				break;
 8005076:	bf00      	nop
			}
	}
}
 8005078:	bf00      	nop
 800507a:	3784      	adds	r7, #132	; 0x84
 800507c:	46bd      	mov	sp, r7
 800507e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005082:	bf00      	nop
 8005084:	20000518 	.word	0x20000518
 8005088:	20000540 	.word	0x20000540
 800508c:	0800f864 	.word	0x0800f864
 8005090:	20000430 	.word	0x20000430
 8005094:	2000042a 	.word	0x2000042a
 8005098:	2000033c 	.word	0x2000033c
 800509c:	20000446 	.word	0x20000446
 80050a0:	20000005 	.word	0x20000005
 80050a4:	20000538 	.word	0x20000538
 80050a8:	0800f870 	.word	0x0800f870
 80050ac:	2000053c 	.word	0x2000053c
 80050b0:	0800f87c 	.word	0x0800f87c
 80050b4:	20000510 	.word	0x20000510
 80050b8:	200004c8 	.word	0x200004c8
 80050bc:	200004d0 	.word	0x200004d0
 80050c0:	20000004 	.word	0x20000004
 80050c4:	0800f888 	.word	0x0800f888
 80050c8:	20000006 	.word	0x20000006
 80050cc:	0800f890 	.word	0x0800f890

080050d0 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback function when a receiving complete
{
 80050d0:	b580      	push	{r7, lr}
 80050d2:	b082      	sub	sp, #8
 80050d4:	af00      	add	r7, sp, #0
 80050d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(huart);

	// BEGIN UART6 Receiving
		if (huart->Instance==USART6) // If it is uart6, UI communication
 80050d8:	687b      	ldr	r3, [r7, #4]
 80050da:	681b      	ldr	r3, [r3, #0]
 80050dc:	4a2f      	ldr	r2, [pc, #188]	; (800519c <HAL_UART_RxCpltCallback+0xcc>)
 80050de:	4293      	cmp	r3, r2
 80050e0:	d121      	bne.n	8005126 <HAL_UART_RxCpltCallback+0x56>
		{
			if(RxPCData!=EndChar) // read up to the ending char
 80050e2:	4b2f      	ldr	r3, [pc, #188]	; (80051a0 <HAL_UART_RxCpltCallback+0xd0>)
 80050e4:	781b      	ldrb	r3, [r3, #0]
 80050e6:	2224      	movs	r2, #36	; 0x24
 80050e8:	4293      	cmp	r3, r2
 80050ea:	d016      	beq.n	800511a <HAL_UART_RxCpltCallback+0x4a>
			{
				if (RxPCData != 0) // remove the null character
 80050ec:	4b2c      	ldr	r3, [pc, #176]	; (80051a0 <HAL_UART_RxCpltCallback+0xd0>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b00      	cmp	r3, #0
 80050f2:	d018      	beq.n	8005126 <HAL_UART_RxCpltCallback+0x56>
				//if (RxPCData != NULL) // remove the null character
				{
					RxPCBuff[_rxPCIndex]=RxPCData;// Copy the data to buffer
 80050f4:	4b2b      	ldr	r3, [pc, #172]	; (80051a4 <HAL_UART_RxCpltCallback+0xd4>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	461a      	mov	r2, r3
 80050fa:	4b29      	ldr	r3, [pc, #164]	; (80051a0 <HAL_UART_RxCpltCallback+0xd0>)
 80050fc:	7819      	ldrb	r1, [r3, #0]
 80050fe:	4b2a      	ldr	r3, [pc, #168]	; (80051a8 <HAL_UART_RxCpltCallback+0xd8>)
 8005100:	5499      	strb	r1, [r3, r2]
				  _rxPCIndex++;
 8005102:	4b28      	ldr	r3, [pc, #160]	; (80051a4 <HAL_UART_RxCpltCallback+0xd4>)
 8005104:	781b      	ldrb	r3, [r3, #0]
 8005106:	3301      	adds	r3, #1
 8005108:	b2da      	uxtb	r2, r3
 800510a:	4b26      	ldr	r3, [pc, #152]	; (80051a4 <HAL_UART_RxCpltCallback+0xd4>)
 800510c:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 800510e:	2201      	movs	r2, #1
 8005110:	4923      	ldr	r1, [pc, #140]	; (80051a0 <HAL_UART_RxCpltCallback+0xd0>)
 8005112:	4826      	ldr	r0, [pc, #152]	; (80051ac <HAL_UART_RxCpltCallback+0xdc>)
 8005114:	f003 ff1f 	bl	8008f56 <HAL_UART_Receive_IT>
 8005118:	e005      	b.n	8005126 <HAL_UART_RxCpltCallback+0x56>
				}
			}
			else //if(RxPCData==EndChar)
			{
				_rxPCIndex=0;
 800511a:	4b22      	ldr	r3, [pc, #136]	; (80051a4 <HAL_UART_RxCpltCallback+0xd4>)
 800511c:	2200      	movs	r2, #0
 800511e:	701a      	strb	r2, [r3, #0]
				RxUart6_Cpl_Flag=true; // reading completed
 8005120:	4b23      	ldr	r3, [pc, #140]	; (80051b0 <HAL_UART_RxCpltCallback+0xe0>)
 8005122:	2201      	movs	r2, #1
 8005124:	701a      	strb	r2, [r3, #0]
		}
	// END UART6

		//BEGIN UART5 = HAL_UART_Receive_IT============================================
		/// Use this part
		if (huart->Instance==UART5) // If it is uart5, driver communication
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	681b      	ldr	r3, [r3, #0]
 800512a:	4a22      	ldr	r2, [pc, #136]	; (80051b4 <HAL_UART_RxCpltCallback+0xe4>)
 800512c:	4293      	cmp	r3, r2
 800512e:	d130      	bne.n	8005192 <HAL_UART_RxCpltCallback+0xc2>
		{
			if (_rxDriverIndex >= NoOfBytes) //
 8005130:	4b21      	ldr	r3, [pc, #132]	; (80051b8 <HAL_UART_RxCpltCallback+0xe8>)
 8005132:	781a      	ldrb	r2, [r3, #0]
 8005134:	4b21      	ldr	r3, [pc, #132]	; (80051bc <HAL_UART_RxCpltCallback+0xec>)
 8005136:	781b      	ldrb	r3, [r3, #0]
 8005138:	429a      	cmp	r2, r3
 800513a:	d308      	bcc.n	800514e <HAL_UART_RxCpltCallback+0x7e>
			{
				RxUart5_Cpl_Flag = true; // Complete Receiving
 800513c:	4b20      	ldr	r3, [pc, #128]	; (80051c0 <HAL_UART_RxCpltCallback+0xf0>)
 800513e:	2201      	movs	r2, #1
 8005140:	701a      	strb	r2, [r3, #0]
				StartReceiveDriverData = false;
 8005142:	4b20      	ldr	r3, [pc, #128]	; (80051c4 <HAL_UART_RxCpltCallback+0xf4>)
 8005144:	2200      	movs	r2, #0
 8005146:	701a      	strb	r2, [r3, #0]
				_rxDriverIndex = 0;
 8005148:	4b1b      	ldr	r3, [pc, #108]	; (80051b8 <HAL_UART_RxCpltCallback+0xe8>)
 800514a:	2200      	movs	r2, #0
 800514c:	701a      	strb	r2, [r3, #0]
			}
			if ((_rxDriverIndex == 0)&&(RxDriverData == DriverID)) // If byte 0 is the Driver ID
 800514e:	4b1a      	ldr	r3, [pc, #104]	; (80051b8 <HAL_UART_RxCpltCallback+0xe8>)
 8005150:	781b      	ldrb	r3, [r3, #0]
 8005152:	2b00      	cmp	r3, #0
 8005154:	d106      	bne.n	8005164 <HAL_UART_RxCpltCallback+0x94>
 8005156:	4b1c      	ldr	r3, [pc, #112]	; (80051c8 <HAL_UART_RxCpltCallback+0xf8>)
 8005158:	781b      	ldrb	r3, [r3, #0]
 800515a:	2b01      	cmp	r3, #1
 800515c:	d102      	bne.n	8005164 <HAL_UART_RxCpltCallback+0x94>
			{
				StartReceiveDriverData = true;
 800515e:	4b19      	ldr	r3, [pc, #100]	; (80051c4 <HAL_UART_RxCpltCallback+0xf4>)
 8005160:	2201      	movs	r2, #1
 8005162:	701a      	strb	r2, [r3, #0]
			}
			if (StartReceiveDriverData) //
 8005164:	4b17      	ldr	r3, [pc, #92]	; (80051c4 <HAL_UART_RxCpltCallback+0xf4>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b2db      	uxtb	r3, r3
 800516a:	2b00      	cmp	r3, #0
 800516c:	d011      	beq.n	8005192 <HAL_UART_RxCpltCallback+0xc2>
			{
				RxDriverBuff[_rxDriverIndex]=RxDriverData;// Copy the data to buffer
 800516e:	4b12      	ldr	r3, [pc, #72]	; (80051b8 <HAL_UART_RxCpltCallback+0xe8>)
 8005170:	781b      	ldrb	r3, [r3, #0]
 8005172:	461a      	mov	r2, r3
 8005174:	4b14      	ldr	r3, [pc, #80]	; (80051c8 <HAL_UART_RxCpltCallback+0xf8>)
 8005176:	7819      	ldrb	r1, [r3, #0]
 8005178:	4b14      	ldr	r3, [pc, #80]	; (80051cc <HAL_UART_RxCpltCallback+0xfc>)
 800517a:	5499      	strb	r1, [r3, r2]
				_rxDriverIndex++;
 800517c:	4b0e      	ldr	r3, [pc, #56]	; (80051b8 <HAL_UART_RxCpltCallback+0xe8>)
 800517e:	781b      	ldrb	r3, [r3, #0]
 8005180:	3301      	adds	r3, #1
 8005182:	b2da      	uxtb	r2, r3
 8005184:	4b0c      	ldr	r3, [pc, #48]	; (80051b8 <HAL_UART_RxCpltCallback+0xe8>)
 8005186:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time ///*/
 8005188:	2201      	movs	r2, #1
 800518a:	490f      	ldr	r1, [pc, #60]	; (80051c8 <HAL_UART_RxCpltCallback+0xf8>)
 800518c:	4810      	ldr	r0, [pc, #64]	; (80051d0 <HAL_UART_RxCpltCallback+0x100>)
 800518e:	f003 fee2 	bl	8008f56 <HAL_UART_Receive_IT>
//				RxESP_Cpl_Flag=true; // reading completed
//			}
//			HAL_UART_Receive_IT(&huart4,&RxESPData,1);
//		}
//		// END UART4
}
 8005192:	bf00      	nop
 8005194:	3708      	adds	r7, #8
 8005196:	46bd      	mov	sp, r7
 8005198:	bd80      	pop	{r7, pc}
 800519a:	bf00      	nop
 800519c:	40011400 	.word	0x40011400
 80051a0:	20000408 	.word	0x20000408
 80051a4:	2000043f 	.word	0x2000043f
 80051a8:	20000380 	.word	0x20000380
 80051ac:	2000033c 	.word	0x2000033c
 80051b0:	20000441 	.word	0x20000441
 80051b4:	40005000 	.word	0x40005000
 80051b8:	20000440 	.word	0x20000440
 80051bc:	20000000 	.word	0x20000000
 80051c0:	20000442 	.word	0x20000442
 80051c4:	20000444 	.word	0x20000444
 80051c8:	20000409 	.word	0x20000409
 80051cc:	200003a8 	.word	0x200003a8
 80051d0:	200002b4 	.word	0x200002b4

080051d4 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer 2 interrupt, 1ms
{
 80051d4:	b580      	push	{r7, lr}
 80051d6:	b082      	sub	sp, #8
 80051d8:	af00      	add	r7, sp, #0
 80051da:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)	// TIMER 3 interrupt for pulse generation, period: 2us
 80051dc:	687b      	ldr	r3, [r7, #4]
 80051de:	681b      	ldr	r3, [r3, #0]
 80051e0:	4a40      	ldr	r2, [pc, #256]	; (80052e4 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80051e2:	4293      	cmp	r3, r2
 80051e4:	d150      	bne.n	8005288 <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		if (PulseGenerationFlag) // Only generating pulse when the flag is ON. Otherwise, do nothing
 80051e6:	4b40      	ldr	r3, [pc, #256]	; (80052e8 <HAL_TIM_PeriodElapsedCallback+0x114>)
 80051e8:	781b      	ldrb	r3, [r3, #0]
 80051ea:	2b00      	cmp	r3, #0
 80051ec:	d04c      	beq.n	8005288 <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
				Timer3Count++;
 80051ee:	4b3f      	ldr	r3, [pc, #252]	; (80052ec <HAL_TIM_PeriodElapsedCallback+0x118>)
 80051f0:	881b      	ldrh	r3, [r3, #0]
 80051f2:	3301      	adds	r3, #1
 80051f4:	b29a      	uxth	r2, r3
 80051f6:	4b3d      	ldr	r3, [pc, #244]	; (80052ec <HAL_TIM_PeriodElapsedCallback+0x118>)
 80051f8:	801a      	strh	r2, [r3, #0]
				if (Timer3Count >= Timer3CountPeriod) // Generate pulse
 80051fa:	4b3c      	ldr	r3, [pc, #240]	; (80052ec <HAL_TIM_PeriodElapsedCallback+0x118>)
 80051fc:	881a      	ldrh	r2, [r3, #0]
 80051fe:	4b3c      	ldr	r3, [pc, #240]	; (80052f0 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005200:	881b      	ldrh	r3, [r3, #0]
 8005202:	429a      	cmp	r2, r3
 8005204:	d340      	bcc.n	8005288 <HAL_TIM_PeriodElapsedCallback+0xb4>
				{
					Timer3Count = 0;
 8005206:	4b39      	ldr	r3, [pc, #228]	; (80052ec <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005208:	2200      	movs	r2, #0
 800520a:	801a      	strh	r2, [r3, #0]
//							IsReachTargetPosition = true;
//							return;
//						}
//					}

					if (PRIsToggled)
 800520c:	4b39      	ldr	r3, [pc, #228]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800520e:	781b      	ldrb	r3, [r3, #0]
 8005210:	2b00      	cmp	r3, #0
 8005212:	d01c      	beq.n	800524e <HAL_TIM_PeriodElapsedCallback+0x7a>
					{
						HAL_GPIO_TogglePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin); // Generate pulses on PF by tonggling this input
 8005214:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005218:	4837      	ldr	r0, [pc, #220]	; (80052f8 <HAL_TIM_PeriodElapsedCallback+0x124>)
 800521a:	f002 fa7a 	bl	8007712 <HAL_GPIO_TogglePin>
						PRIsToggled = false;
 800521e:	4b35      	ldr	r3, [pc, #212]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005220:	2200      	movs	r2, #0
 8005222:	701a      	strb	r2, [r3, #0]

						if (StartPulseCmdCounting) // Only counting the pulse cmd while running
 8005224:	4b35      	ldr	r3, [pc, #212]	; (80052fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b2db      	uxtb	r3, r3
 800522a:	2b00      	cmp	r3, #0
 800522c:	d054      	beq.n	80052d8 <HAL_TIM_PeriodElapsedCallback+0x104>
						{
							if (Direction) // Direction = true: dropping down
 800522e:	4b34      	ldr	r3, [pc, #208]	; (8005300 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2b00      	cmp	r3, #0
 8005234:	d005      	beq.n	8005242 <HAL_TIM_PeriodElapsedCallback+0x6e>
							{
								PositionPulseCmd++; // Increase the pulse cmd
 8005236:	4b33      	ldr	r3, [pc, #204]	; (8005304 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	3301      	adds	r3, #1
 800523c:	4a31      	ldr	r2, [pc, #196]	; (8005304 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800523e:	6013      	str	r3, [r2, #0]
							{
								PositionPulseCmd--; // Decrease the pulse cmd
							}
						}

						return; // exit the function
 8005240:	e04a      	b.n	80052d8 <HAL_TIM_PeriodElapsedCallback+0x104>
								PositionPulseCmd--; // Decrease the pulse cmd
 8005242:	4b30      	ldr	r3, [pc, #192]	; (8005304 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005244:	681b      	ldr	r3, [r3, #0]
 8005246:	3b01      	subs	r3, #1
 8005248:	4a2e      	ldr	r2, [pc, #184]	; (8005304 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800524a:	6013      	str	r3, [r2, #0]
						return; // exit the function
 800524c:	e044      	b.n	80052d8 <HAL_TIM_PeriodElapsedCallback+0x104>
					}
					else
					{
						HAL_GPIO_TogglePin(PC8_PR_GPIO_Port, PC8_PR_Pin); // Generate pulses on PF by tonggling this input
 800524e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005252:	482d      	ldr	r0, [pc, #180]	; (8005308 <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005254:	f002 fa5d 	bl	8007712 <HAL_GPIO_TogglePin>
						PRIsToggled = true;
 8005258:	4b26      	ldr	r3, [pc, #152]	; (80052f4 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800525a:	2201      	movs	r2, #1
 800525c:	701a      	strb	r2, [r3, #0]

						if (StartPulseCmdCounting) // Only counting the pulse cmd while running
 800525e:	4b27      	ldr	r3, [pc, #156]	; (80052fc <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005260:	781b      	ldrb	r3, [r3, #0]
 8005262:	b2db      	uxtb	r3, r3
 8005264:	2b00      	cmp	r3, #0
 8005266:	d039      	beq.n	80052dc <HAL_TIM_PeriodElapsedCallback+0x108>
						{
							if (Direction) // Direction = true: dropping down
 8005268:	4b25      	ldr	r3, [pc, #148]	; (8005300 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800526a:	781b      	ldrb	r3, [r3, #0]
 800526c:	2b00      	cmp	r3, #0
 800526e:	d005      	beq.n	800527c <HAL_TIM_PeriodElapsedCallback+0xa8>
							{
								PositionPulseCmd++; // Increase the pulse cmd
 8005270:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005272:	681b      	ldr	r3, [r3, #0]
 8005274:	3301      	adds	r3, #1
 8005276:	4a23      	ldr	r2, [pc, #140]	; (8005304 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005278:	6013      	str	r3, [r2, #0]
							else // false: pulling up
							{
								PositionPulseCmd--; // Decrease the pulse cmd
							}
						}
						return;
 800527a:	e02f      	b.n	80052dc <HAL_TIM_PeriodElapsedCallback+0x108>
								PositionPulseCmd--; // Decrease the pulse cmd
 800527c:	4b21      	ldr	r3, [pc, #132]	; (8005304 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	3b01      	subs	r3, #1
 8005282:	4a20      	ldr	r2, [pc, #128]	; (8005304 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005284:	6013      	str	r3, [r2, #0]
						return;
 8005286:	e029      	b.n	80052dc <HAL_TIM_PeriodElapsedCallback+0x108>
					}
				}
		}
	}

	if (htim->Instance == TIM2) // Timer 2 interrupt, for the main control function, 1ms
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005290:	d125      	bne.n	80052de <HAL_TIM_PeriodElapsedCallback+0x10a>
		{
				// To calculate PID controller
				Timer2SampleTimeControlCount++;
 8005292:	4b1e      	ldr	r3, [pc, #120]	; (800530c <HAL_TIM_PeriodElapsedCallback+0x138>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	3301      	adds	r3, #1
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4b1c      	ldr	r3, [pc, #112]	; (800530c <HAL_TIM_PeriodElapsedCallback+0x138>)
 800529c:	701a      	strb	r2, [r3, #0]
				if (Timer2SampleTimeControlCount >= SampleTime) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 800529e:	4b1b      	ldr	r3, [pc, #108]	; (800530c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80052a0:	781a      	ldrb	r2, [r3, #0]
 80052a2:	4b1b      	ldr	r3, [pc, #108]	; (8005310 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80052a4:	781b      	ldrb	r3, [r3, #0]
 80052a6:	429a      	cmp	r2, r3
 80052a8:	d305      	bcc.n	80052b6 <HAL_TIM_PeriodElapsedCallback+0xe2>
				{
					Timer2ControlInterrupt = true;
 80052aa:	4b1a      	ldr	r3, [pc, #104]	; (8005314 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80052ac:	2201      	movs	r2, #1
 80052ae:	701a      	strb	r2, [r3, #0]
					Timer2SampleTimeControlCount = 0;
 80052b0:	4b16      	ldr	r3, [pc, #88]	; (800530c <HAL_TIM_PeriodElapsedCallback+0x138>)
 80052b2:	2200      	movs	r2, #0
 80052b4:	701a      	strb	r2, [r3, #0]
				}

				// To transmit the data each 50ms
				Timer2Count++;
 80052b6:	4b18      	ldr	r3, [pc, #96]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	3301      	adds	r3, #1
 80052bc:	b2da      	uxtb	r2, r3
 80052be:	4b16      	ldr	r3, [pc, #88]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80052c0:	701a      	strb	r2, [r3, #0]
				if (Timer2Count >= 50) // turn on the flag when the sample time reaches, fix the data sample time to 40ms
 80052c2:	4b15      	ldr	r3, [pc, #84]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b31      	cmp	r3, #49	; 0x31
 80052c8:	d909      	bls.n	80052de <HAL_TIM_PeriodElapsedCallback+0x10a>
				{
					Timer2SampleTimeInterrupt = true;
 80052ca:	4b14      	ldr	r3, [pc, #80]	; (800531c <HAL_TIM_PeriodElapsedCallback+0x148>)
 80052cc:	2201      	movs	r2, #1
 80052ce:	701a      	strb	r2, [r3, #0]
					Timer2Count = 0;
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x144>)
 80052d2:	2200      	movs	r2, #0
 80052d4:	701a      	strb	r2, [r3, #0]
 80052d6:	e002      	b.n	80052de <HAL_TIM_PeriodElapsedCallback+0x10a>
						return; // exit the function
 80052d8:	bf00      	nop
 80052da:	e000      	b.n	80052de <HAL_TIM_PeriodElapsedCallback+0x10a>
						return;
 80052dc:	bf00      	nop
				}
		}
}
 80052de:	3708      	adds	r7, #8
 80052e0:	46bd      	mov	sp, r7
 80052e2:	bd80      	pop	{r7, pc}
 80052e4:	40000400 	.word	0x40000400
 80052e8:	2000044f 	.word	0x2000044f
 80052ec:	20000466 	.word	0x20000466
 80052f0:	20000464 	.word	0x20000464
 80052f4:	2000045a 	.word	0x2000045a
 80052f8:	40021000 	.word	0x40021000
 80052fc:	2000044b 	.word	0x2000044b
 8005300:	20000448 	.word	0x20000448
 8005304:	200004d0 	.word	0x200004d0
 8005308:	40020800 	.word	0x40020800
 800530c:	2000045c 	.word	0x2000045c
 8005310:	20000470 	.word	0x20000470
 8005314:	2000044a 	.word	0x2000044a
 8005318:	2000045b 	.word	0x2000045b
 800531c:	20000449 	.word	0x20000449

08005320 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005320:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005324:	b08f      	sub	sp, #60	; 0x3c
 8005326:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8005328:	f001 faee 	bl	8006908 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800532c:	f000 fccc 	bl	8005cc8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005330:	f000 fea4 	bl	800607c <MX_GPIO_Init>
  MX_TIM2_Init();
 8005334:	f000 fd5e 	bl	8005df4 <MX_TIM2_Init>
  MX_UART5_Init();
 8005338:	f000 fe22 	bl	8005f80 <MX_UART5_Init>
  MX_USART6_UART_Init();
 800533c:	f000 fe74 	bl	8006028 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8005340:	f000 fdd2 	bl	8005ee8 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8005344:	f000 fe46 	bl	8005fd4 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005348:	f000 fd28 	bl	8005d9c <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(PE15_RELAY1_GPIO_Port, PE15_RELAY1_Pin, GPIO_PIN_SET);
 800534c:	2201      	movs	r2, #1
 800534e:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005352:	48ad      	ldr	r0, [pc, #692]	; (8005608 <main+0x2e8>)
 8005354:	f002 f9c4 	bl	80076e0 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8005358:	f241 3088 	movw	r0, #5000	; 0x1388
 800535c:	f001 fb46 	bl	80069ec <HAL_Delay>

	InitParams (); // Read the saved params from the flash memory
 8005360:	f7fe fefa 	bl	8004158 <InitParams>
// PID(&TPID, &AccFb, &PIPulseCmd, &DroppingAccel, Kp, StoppingTime, 0, _PID_P_ON_E, _PID_CD_DIRECT); // Kd = 0, use PI controller
//  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
//  PID_SetSampleTime(&TPID, Timer2Period); // the sample time is 50ms = Timer2 time interval
//  PID_SetOutputLimits(&TPID, -2000, 2000); // min PID: -2000rpm, max: 2000rpm

	HAL_GPIO_WritePin(PB15_485_MCU_PC_DIR_GPIO_Port, PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET); // Set Uart3 to receive Mode
 8005364:	2201      	movs	r2, #1
 8005366:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800536a:	48a8      	ldr	r0, [pc, #672]	; (800560c <main+0x2ec>)
 800536c:	f002 f9b8 	bl	80076e0 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart3,&RxUart3Data,1); // Enable Interrupt
 8005370:	2201      	movs	r2, #1
 8005372:	49a7      	ldr	r1, [pc, #668]	; (8005610 <main+0x2f0>)
 8005374:	48a7      	ldr	r0, [pc, #668]	; (8005614 <main+0x2f4>)
 8005376:	f003 fdee 	bl	8008f56 <HAL_UART_Receive_IT>

	HAL_TIM_Base_Start_IT(&htim2); // Enable Timer 2 interrupt
 800537a:	48a7      	ldr	r0, [pc, #668]	; (8005618 <main+0x2f8>)
 800537c:	f002 fe8c 	bl	8008098 <HAL_TIM_Base_Start_IT>
// Not turn on timer3 at the start
//	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer 3 interrupt
	HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8005380:	2201      	movs	r2, #1
 8005382:	49a6      	ldr	r1, [pc, #664]	; (800561c <main+0x2fc>)
 8005384:	48a6      	ldr	r0, [pc, #664]	; (8005620 <main+0x300>)
 8005386:	f003 fde6 	bl	8008f56 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart4,&RxESPData,1);
	DriverInit();
 800538a:	f7fb ffa1 	bl	80012d0 <DriverInit>
	ReadMultiRegister(StE03,5);
 800538e:	2105      	movs	r1, #5
 8005390:	200c      	movs	r0, #12
 8005392:	f7fc f909 	bl	80015a8 <ReadMultiRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Process Received Cmd from the GUI
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8005396:	4ba3      	ldr	r3, [pc, #652]	; (8005624 <main+0x304>)
 8005398:	781b      	ldrb	r3, [r3, #0]
 800539a:	b2db      	uxtb	r3, r3
 800539c:	2b00      	cmp	r3, #0
 800539e:	d00b      	beq.n	80053b8 <main+0x98>
			{
				ExtractMotionCode();
 80053a0:	f7fc f8a6 	bl	80014f0 <ExtractMotionCode>
				ProcessReceivedCommand (); // Proceed the command
 80053a4:	f7fe ff4c 	bl	8004240 <ProcessReceivedCommand>
				RxUart6_Cpl_Flag=false;
 80053a8:	4b9e      	ldr	r3, [pc, #632]	; (8005624 <main+0x304>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 80053ae:	2201      	movs	r2, #1
 80053b0:	499a      	ldr	r1, [pc, #616]	; (800561c <main+0x2fc>)
 80053b2:	489b      	ldr	r0, [pc, #620]	; (8005620 <main+0x300>)
 80053b4:	f003 fdcf 	bl	8008f56 <HAL_UART_Receive_IT>
			}
		// END UART6 Process Cmd

		// Process Timer2 interrupt after a period of Sampletime
		if (Timer2ControlInterrupt)
 80053b8:	4b9b      	ldr	r3, [pc, #620]	; (8005628 <main+0x308>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b00      	cmp	r3, #0
 80053c0:	f000 8118 	beq.w	80055f4 <main+0x2d4>
		{
			Timer2ControlInterrupt = false; // Reset the flag
 80053c4:	4b98      	ldr	r3, [pc, #608]	; (8005628 <main+0x308>)
 80053c6:	2200      	movs	r2, #0
 80053c8:	701a      	strb	r2, [r3, #0]
			// BEGIN running experiment
			if (StartRunning) // Process Running Experiment
 80053ca:	4b98      	ldr	r3, [pc, #608]	; (800562c <main+0x30c>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	2b00      	cmp	r3, #0
 80053d0:	f000 809b 	beq.w	800550a <main+0x1ea>
			{
				switch (ExperimentMode)
 80053d4:	4b96      	ldr	r3, [pc, #600]	; (8005630 <main+0x310>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b03      	cmp	r3, #3
 80053da:	d067      	beq.n	80054ac <main+0x18c>
 80053dc:	2b03      	cmp	r3, #3
 80053de:	f300 8096 	bgt.w	800550e <main+0x1ee>
 80053e2:	2b01      	cmp	r3, #1
 80053e4:	d002      	beq.n	80053ec <main+0xcc>
 80053e6:	2b02      	cmp	r3, #2
 80053e8:	d031      	beq.n	800544e <main+0x12e>
								}
							}
						}
						break;
					default:
						break;
 80053ea:	e090      	b.n	800550e <main+0x1ee>
						if (Dropping()) // Dropping() return true when it finishing
 80053ec:	f7fe f9bc 	bl	8003768 <Dropping>
 80053f0:	4603      	mov	r3, r0
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	f000 808d 	beq.w	8005512 <main+0x1f2>
							if (!POSReach) // Check if position is reached or not
 80053f8:	4b8e      	ldr	r3, [pc, #568]	; (8005634 <main+0x314>)
 80053fa:	781b      	ldrb	r3, [r3, #0]
 80053fc:	f083 0301 	eor.w	r3, r3, #1
 8005400:	b2db      	uxtb	r3, r3
 8005402:	2b00      	cmp	r3, #0
 8005404:	f000 8085 	beq.w	8005512 <main+0x1f2>
								if (WaitingMiliSecond(2000)) // Wait for 2 Seconds
 8005408:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800540c:	f7fc fade 	bl	80019cc <WaitingMiliSecond>
 8005410:	4603      	mov	r3, r0
 8005412:	2b00      	cmp	r3, #0
 8005414:	d07d      	beq.n	8005512 <main+0x1f2>
									StopExperiment();
 8005416:	f7fe fb63 	bl	8003ae0 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 800541a:	4b87      	ldr	r3, [pc, #540]	; (8005638 <main+0x318>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	2b00      	cmp	r3, #0
 8005420:	d077      	beq.n	8005512 <main+0x1f2>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset/ clear the array
 8005422:	221e      	movs	r2, #30
 8005424:	2100      	movs	r1, #0
 8005426:	4885      	ldr	r0, [pc, #532]	; (800563c <main+0x31c>)
 8005428:	f004 fd58 	bl	8009edc <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 800542c:	4984      	ldr	r1, [pc, #528]	; (8005640 <main+0x320>)
 800542e:	4883      	ldr	r0, [pc, #524]	; (800563c <main+0x31c>)
 8005430:	f005 fbdc 	bl	800abec <siprintf>
 8005434:	4603      	mov	r3, r0
 8005436:	b2da      	uxtb	r2, r3
 8005438:	4b82      	ldr	r3, [pc, #520]	; (8005644 <main+0x324>)
 800543a:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 800543c:	4b81      	ldr	r3, [pc, #516]	; (8005644 <main+0x324>)
 800543e:	781b      	ldrb	r3, [r3, #0]
 8005440:	b29a      	uxth	r2, r3
 8005442:	23c8      	movs	r3, #200	; 0xc8
 8005444:	497d      	ldr	r1, [pc, #500]	; (800563c <main+0x31c>)
 8005446:	4876      	ldr	r0, [pc, #472]	; (8005620 <main+0x300>)
 8005448:	f003 fcf3 	bl	8008e32 <HAL_UART_Transmit>
						break;
 800544c:	e061      	b.n	8005512 <main+0x1f2>
						if (PullingExperiment()) // PullingExperiment() return true when it finishing
 800544e:	f7fc fe4f 	bl	80020f0 <PullingExperiment>
 8005452:	4603      	mov	r3, r0
 8005454:	2b00      	cmp	r3, #0
 8005456:	d05e      	beq.n	8005516 <main+0x1f6>
							if (!POSReach) // Check if position is reached or not
 8005458:	4b76      	ldr	r3, [pc, #472]	; (8005634 <main+0x314>)
 800545a:	781b      	ldrb	r3, [r3, #0]
 800545c:	f083 0301 	eor.w	r3, r3, #1
 8005460:	b2db      	uxtb	r3, r3
 8005462:	2b00      	cmp	r3, #0
 8005464:	d057      	beq.n	8005516 <main+0x1f6>
								if (WaitingMiliSecond(2000)) // Wait for 2 Seconds
 8005466:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800546a:	f7fc faaf 	bl	80019cc <WaitingMiliSecond>
 800546e:	4603      	mov	r3, r0
 8005470:	2b00      	cmp	r3, #0
 8005472:	d050      	beq.n	8005516 <main+0x1f6>
									StopExperiment();
 8005474:	f7fe fb34 	bl	8003ae0 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8005478:	4b6f      	ldr	r3, [pc, #444]	; (8005638 <main+0x318>)
 800547a:	781b      	ldrb	r3, [r3, #0]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d04a      	beq.n	8005516 <main+0x1f6>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005480:	221e      	movs	r2, #30
 8005482:	2100      	movs	r1, #0
 8005484:	486d      	ldr	r0, [pc, #436]	; (800563c <main+0x31c>)
 8005486:	f004 fd29 	bl	8009edc <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 800548a:	496d      	ldr	r1, [pc, #436]	; (8005640 <main+0x320>)
 800548c:	486b      	ldr	r0, [pc, #428]	; (800563c <main+0x31c>)
 800548e:	f005 fbad 	bl	800abec <siprintf>
 8005492:	4603      	mov	r3, r0
 8005494:	b2da      	uxtb	r2, r3
 8005496:	4b6b      	ldr	r3, [pc, #428]	; (8005644 <main+0x324>)
 8005498:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 800549a:	4b6a      	ldr	r3, [pc, #424]	; (8005644 <main+0x324>)
 800549c:	781b      	ldrb	r3, [r3, #0]
 800549e:	b29a      	uxth	r2, r3
 80054a0:	23c8      	movs	r3, #200	; 0xc8
 80054a2:	4966      	ldr	r1, [pc, #408]	; (800563c <main+0x31c>)
 80054a4:	485e      	ldr	r0, [pc, #376]	; (8005620 <main+0x300>)
 80054a6:	f003 fcc4 	bl	8008e32 <HAL_UART_Transmit>
						break;
 80054aa:	e034      	b.n	8005516 <main+0x1f6>
						if (PullAndDrop()) // PullingExperiment() return true when it finishing
 80054ac:	f7fd fcbc 	bl	8002e28 <PullAndDrop>
 80054b0:	4603      	mov	r3, r0
 80054b2:	2b00      	cmp	r3, #0
 80054b4:	d031      	beq.n	800551a <main+0x1fa>
							if (!POSReach) // Check if position is reached or not
 80054b6:	4b5f      	ldr	r3, [pc, #380]	; (8005634 <main+0x314>)
 80054b8:	781b      	ldrb	r3, [r3, #0]
 80054ba:	f083 0301 	eor.w	r3, r3, #1
 80054be:	b2db      	uxtb	r3, r3
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d02a      	beq.n	800551a <main+0x1fa>
								if (WaitingMiliSecond(2000)) // Wait for 3 Seconds
 80054c4:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80054c8:	f7fc fa80 	bl	80019cc <WaitingMiliSecond>
 80054cc:	4603      	mov	r3, r0
 80054ce:	2b00      	cmp	r3, #0
 80054d0:	d023      	beq.n	800551a <main+0x1fa>
									StopExperiment();
 80054d2:	f7fe fb05 	bl	8003ae0 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 80054d6:	4b58      	ldr	r3, [pc, #352]	; (8005638 <main+0x318>)
 80054d8:	781b      	ldrb	r3, [r3, #0]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d01d      	beq.n	800551a <main+0x1fa>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80054de:	221e      	movs	r2, #30
 80054e0:	2100      	movs	r1, #0
 80054e2:	4856      	ldr	r0, [pc, #344]	; (800563c <main+0x31c>)
 80054e4:	f004 fcfa 	bl	8009edc <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 80054e8:	4955      	ldr	r1, [pc, #340]	; (8005640 <main+0x320>)
 80054ea:	4854      	ldr	r0, [pc, #336]	; (800563c <main+0x31c>)
 80054ec:	f005 fb7e 	bl	800abec <siprintf>
 80054f0:	4603      	mov	r3, r0
 80054f2:	b2da      	uxtb	r2, r3
 80054f4:	4b53      	ldr	r3, [pc, #332]	; (8005644 <main+0x324>)
 80054f6:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80054f8:	4b52      	ldr	r3, [pc, #328]	; (8005644 <main+0x324>)
 80054fa:	781b      	ldrb	r3, [r3, #0]
 80054fc:	b29a      	uxth	r2, r3
 80054fe:	23c8      	movs	r3, #200	; 0xc8
 8005500:	494e      	ldr	r1, [pc, #312]	; (800563c <main+0x31c>)
 8005502:	4847      	ldr	r0, [pc, #284]	; (8005620 <main+0x300>)
 8005504:	f003 fc95 	bl	8008e32 <HAL_UART_Transmit>
						break;
 8005508:	e007      	b.n	800551a <main+0x1fa>
				}
			}
 800550a:	bf00      	nop
 800550c:	e006      	b.n	800551c <main+0x1fc>
						break;
 800550e:	bf00      	nop
 8005510:	e004      	b.n	800551c <main+0x1fc>
						break;
 8005512:	bf00      	nop
 8005514:	e002      	b.n	800551c <main+0x1fc>
						break;
 8005516:	bf00      	nop
 8005518:	e000      	b.n	800551c <main+0x1fc>
						break;
 800551a:	bf00      	nop
			// END Running Experiment

			// START SIMULATING EXPERIMENT
			if (StartSimulating) // Process Running Experiment
 800551c:	4b4a      	ldr	r3, [pc, #296]	; (8005648 <main+0x328>)
 800551e:	781b      	ldrb	r3, [r3, #0]
 8005520:	2b00      	cmp	r3, #0
 8005522:	d067      	beq.n	80055f4 <main+0x2d4>
			{
				switch (ExperimentMode)
 8005524:	4b42      	ldr	r3, [pc, #264]	; (8005630 <main+0x310>)
 8005526:	781b      	ldrb	r3, [r3, #0]
 8005528:	2b03      	cmp	r3, #3
 800552a:	d00c      	beq.n	8005546 <main+0x226>
 800552c:	2b03      	cmp	r3, #3
 800552e:	dc63      	bgt.n	80055f8 <main+0x2d8>
 8005530:	2b01      	cmp	r3, #1
 8005532:	d002      	beq.n	800553a <main+0x21a>
 8005534:	2b02      	cmp	r3, #2
 8005536:	d003      	beq.n	8005540 <main+0x220>
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
							memset(ResponseMess, '\0', sizeof(ResponseMess));
						}
						break;
					default:
						break;
 8005538:	e05e      	b.n	80055f8 <main+0x2d8>
						if (Dropping()) // Dropping() return true when it finishing
 800553a:	f7fe f915 	bl	8003768 <Dropping>
						break;
 800553e:	e092      	b.n	8005666 <main+0x346>
						if (PullingExperiment()) // PullingExperiment() return true when it finishing
 8005540:	f7fc fdd6 	bl	80020f0 <PullingExperiment>
						break;
 8005544:	e08f      	b.n	8005666 <main+0x346>
						if (SimulatePullAndDrop()) // PullingExperiment() return true when it finishing
 8005546:	f7fd f837 	bl	80025b8 <SimulatePullAndDrop>
 800554a:	4603      	mov	r3, r0
 800554c:	2b00      	cmp	r3, #0
 800554e:	f000 8089 	beq.w	8005664 <main+0x344>
							StartSimulating = false;
 8005552:	4b3d      	ldr	r3, [pc, #244]	; (8005648 <main+0x328>)
 8005554:	2200      	movs	r2, #0
 8005556:	701a      	strb	r2, [r3, #0]
							PullingTotalDistance = 2*3.14*DrumRadius*TotalPullingPulse/EncoderResolution;
 8005558:	4b3c      	ldr	r3, [pc, #240]	; (800564c <main+0x32c>)
 800555a:	681b      	ldr	r3, [r3, #0]
 800555c:	4618      	mov	r0, r3
 800555e:	f7fa fff3 	bl	8000548 <__aeabi_f2d>
 8005562:	a327      	add	r3, pc, #156	; (adr r3, 8005600 <main+0x2e0>)
 8005564:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005568:	f7fb f846 	bl	80005f8 <__aeabi_dmul>
 800556c:	4602      	mov	r2, r0
 800556e:	460b      	mov	r3, r1
 8005570:	4690      	mov	r8, r2
 8005572:	4699      	mov	r9, r3
 8005574:	4b36      	ldr	r3, [pc, #216]	; (8005650 <main+0x330>)
 8005576:	881b      	ldrh	r3, [r3, #0]
 8005578:	4618      	mov	r0, r3
 800557a:	f7fa ffd3 	bl	8000524 <__aeabi_i2d>
 800557e:	4602      	mov	r2, r0
 8005580:	460b      	mov	r3, r1
 8005582:	4640      	mov	r0, r8
 8005584:	4649      	mov	r1, r9
 8005586:	f7fb f837 	bl	80005f8 <__aeabi_dmul>
 800558a:	4602      	mov	r2, r0
 800558c:	460b      	mov	r3, r1
 800558e:	4690      	mov	r8, r2
 8005590:	4699      	mov	r9, r3
 8005592:	4b30      	ldr	r3, [pc, #192]	; (8005654 <main+0x334>)
 8005594:	881b      	ldrh	r3, [r3, #0]
 8005596:	4618      	mov	r0, r3
 8005598:	f7fa ffc4 	bl	8000524 <__aeabi_i2d>
 800559c:	4602      	mov	r2, r0
 800559e:	460b      	mov	r3, r1
 80055a0:	4640      	mov	r0, r8
 80055a2:	4649      	mov	r1, r9
 80055a4:	f7fb f952 	bl	800084c <__aeabi_ddiv>
 80055a8:	4602      	mov	r2, r0
 80055aa:	460b      	mov	r3, r1
 80055ac:	4610      	mov	r0, r2
 80055ae:	4619      	mov	r1, r3
 80055b0:	f7fb fb1a 	bl	8000be8 <__aeabi_d2f>
 80055b4:	4603      	mov	r3, r0
 80055b6:	4a28      	ldr	r2, [pc, #160]	; (8005658 <main+0x338>)
 80055b8:	6013      	str	r3, [r2, #0]
							TxPCLen = sprintf(ResponseMess,"g14/%.1fe",PullingTotalDistance);
 80055ba:	4b27      	ldr	r3, [pc, #156]	; (8005658 <main+0x338>)
 80055bc:	681b      	ldr	r3, [r3, #0]
 80055be:	4618      	mov	r0, r3
 80055c0:	f7fa ffc2 	bl	8000548 <__aeabi_f2d>
 80055c4:	4602      	mov	r2, r0
 80055c6:	460b      	mov	r3, r1
 80055c8:	4924      	ldr	r1, [pc, #144]	; (800565c <main+0x33c>)
 80055ca:	4825      	ldr	r0, [pc, #148]	; (8005660 <main+0x340>)
 80055cc:	f005 fb0e 	bl	800abec <siprintf>
 80055d0:	4603      	mov	r3, r0
 80055d2:	b2da      	uxtb	r2, r3
 80055d4:	4b1b      	ldr	r3, [pc, #108]	; (8005644 <main+0x324>)
 80055d6:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80055d8:	4b1a      	ldr	r3, [pc, #104]	; (8005644 <main+0x324>)
 80055da:	781b      	ldrb	r3, [r3, #0]
 80055dc:	b29a      	uxth	r2, r3
 80055de:	23c8      	movs	r3, #200	; 0xc8
 80055e0:	491f      	ldr	r1, [pc, #124]	; (8005660 <main+0x340>)
 80055e2:	480f      	ldr	r0, [pc, #60]	; (8005620 <main+0x300>)
 80055e4:	f003 fc25 	bl	8008e32 <HAL_UART_Transmit>
							memset(ResponseMess, '\0', sizeof(ResponseMess));
 80055e8:	220f      	movs	r2, #15
 80055ea:	2100      	movs	r1, #0
 80055ec:	481c      	ldr	r0, [pc, #112]	; (8005660 <main+0x340>)
 80055ee:	f004 fc75 	bl	8009edc <memset>
						break;
 80055f2:	e037      	b.n	8005664 <main+0x344>
				}
			}
 80055f4:	bf00      	nop
 80055f6:	e036      	b.n	8005666 <main+0x346>
						break;
 80055f8:	bf00      	nop
 80055fa:	e034      	b.n	8005666 <main+0x346>
 80055fc:	f3af 8000 	nop.w
 8005600:	51eb851f 	.word	0x51eb851f
 8005604:	40191eb8 	.word	0x40191eb8
 8005608:	40021000 	.word	0x40021000
 800560c:	40020400 	.word	0x40020400
 8005610:	2000040a 	.word	0x2000040a
 8005614:	200002f8 	.word	0x200002f8
 8005618:	20000224 	.word	0x20000224
 800561c:	20000408 	.word	0x20000408
 8005620:	2000033c 	.word	0x2000033c
 8005624:	20000441 	.word	0x20000441
 8005628:	2000044a 	.word	0x2000044a
 800562c:	20000446 	.word	0x20000446
 8005630:	20000005 	.word	0x20000005
 8005634:	20000451 	.word	0x20000451
 8005638:	20000459 	.word	0x20000459
 800563c:	2000040c 	.word	0x2000040c
 8005640:	0800f898 	.word	0x0800f898
 8005644:	2000042a 	.word	0x2000042a
 8005648:	20000447 	.word	0x20000447
 800564c:	2000046c 	.word	0x2000046c
 8005650:	2000046a 	.word	0x2000046a
 8005654:	2000000a 	.word	0x2000000a
 8005658:	200004b8 	.word	0x200004b8
 800565c:	0800f89c 	.word	0x0800f89c
 8005660:	20000430 	.word	0x20000430
						break;
 8005664:	bf00      	nop
		}

		// END Timer2ControlInterrupt

		// BEGIN Timer2 interrupt for sending the data
		if (Timer2SampleTimeInterrupt)
 8005666:	4b9d      	ldr	r3, [pc, #628]	; (80058dc <main+0x5bc>)
 8005668:	781b      	ldrb	r3, [r3, #0]
 800566a:	b2db      	uxtb	r3, r3
 800566c:	2b00      	cmp	r3, #0
 800566e:	f000 8125 	beq.w	80058bc <main+0x59c>
		{
			Timer2SampleTimeInterrupt = false;
 8005672:	4b9a      	ldr	r3, [pc, #616]	; (80058dc <main+0x5bc>)
 8005674:	2200      	movs	r2, #0
 8005676:	701a      	strb	r2, [r3, #0]

			// Read CN1-22-RDY, Check if Servo Ready or not, or Servo ON of OFF.
			// If servo is not ready or not ON, then turn off all the functions
			if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin) || HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin))
 8005678:	2104      	movs	r1, #4
 800567a:	4899      	ldr	r0, [pc, #612]	; (80058e0 <main+0x5c0>)
 800567c:	f002 f818 	bl	80076b0 <HAL_GPIO_ReadPin>
 8005680:	4603      	mov	r3, r0
 8005682:	2b00      	cmp	r3, #0
 8005684:	d106      	bne.n	8005694 <main+0x374>
 8005686:	2140      	movs	r1, #64	; 0x40
 8005688:	4895      	ldr	r0, [pc, #596]	; (80058e0 <main+0x5c0>)
 800568a:	f002 f811 	bl	80076b0 <HAL_GPIO_ReadPin>
 800568e:	4603      	mov	r3, r0
 8005690:	2b00      	cmp	r3, #0
 8005692:	d006      	beq.n	80056a2 <main+0x382>
			{
				// If the servo is not ON. Then stop all the running function
				StopPulseGenerating();
 8005694:	f7fc f95e 	bl	8001954 <StopPulseGenerating>
				StopExperiment();
 8005698:	f7fe fa22 	bl	8003ae0 <StopExperiment>
				IsHoming = false; // Disable Homming
 800569c:	4b91      	ldr	r3, [pc, #580]	; (80058e4 <main+0x5c4>)
 800569e:	2200      	movs	r2, #0
 80056a0:	701a      	strb	r2, [r3, #0]
			}

			// BEGIN Software Limit ASDA Driver
			if (!MotorDriver) // Applied for ASDA-A3 Diver since the encoder pulse only can be cleared when cycle the driver
 80056a2:	4b91      	ldr	r3, [pc, #580]	; (80058e8 <main+0x5c8>)
 80056a4:	781b      	ldrb	r3, [r3, #0]
 80056a6:	f083 0301 	eor.w	r3, r3, #1
 80056aa:	b2db      	uxtb	r3, r3
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d022      	beq.n	80056f6 <main+0x3d6>
			{
				if (StartRunning && StartAccleratePulling) // Always turn on the software limit while running
 80056b0:	4b8e      	ldr	r3, [pc, #568]	; (80058ec <main+0x5cc>)
 80056b2:	781b      	ldrb	r3, [r3, #0]
 80056b4:	2b00      	cmp	r3, #0
 80056b6:	d00e      	beq.n	80056d6 <main+0x3b6>
 80056b8:	4b8d      	ldr	r3, [pc, #564]	; (80058f0 <main+0x5d0>)
 80056ba:	781b      	ldrb	r3, [r3, #0]
 80056bc:	2b00      	cmp	r3, #0
 80056be:	d00a      	beq.n	80056d6 <main+0x3b6>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 80056c0:	4b8c      	ldr	r3, [pc, #560]	; (80058f4 <main+0x5d4>)
 80056c2:	681a      	ldr	r2, [r3, #0]
 80056c4:	4b8c      	ldr	r3, [pc, #560]	; (80058f8 <main+0x5d8>)
 80056c6:	681b      	ldr	r3, [r3, #0]
 80056c8:	1ad3      	subs	r3, r2, r3
 80056ca:	2bc8      	cmp	r3, #200	; 0xc8
 80056cc:	dc03      	bgt.n	80056d6 <main+0x3b6>
					{
						StopPulseGenerating();
 80056ce:	f7fc f941 	bl	8001954 <StopPulseGenerating>
						StopExperiment();
 80056d2:	f7fe fa05 	bl	8003ae0 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 80056d6:	4b89      	ldr	r3, [pc, #548]	; (80058fc <main+0x5dc>)
 80056d8:	781b      	ldrb	r3, [r3, #0]
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d02f      	beq.n	800573e <main+0x41e>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 80056de:	4b85      	ldr	r3, [pc, #532]	; (80058f4 <main+0x5d4>)
 80056e0:	681a      	ldr	r2, [r3, #0]
 80056e2:	4b85      	ldr	r3, [pc, #532]	; (80058f8 <main+0x5d8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	1ad3      	subs	r3, r2, r3
 80056e8:	2bc8      	cmp	r3, #200	; 0xc8
 80056ea:	dc28      	bgt.n	800573e <main+0x41e>
					{
						StopPulseGenerating();
 80056ec:	f7fc f932 	bl	8001954 <StopPulseGenerating>
						StopExperiment();
 80056f0:	f7fe f9f6 	bl	8003ae0 <StopExperiment>
 80056f4:	e023      	b.n	800573e <main+0x41e>
					}
				}
			}
			else // HIGEN FDA Driver, Software Limit Switch
			{
				if (StartRunning && StartAccleratePulling)// Always turn on the software limit while running
 80056f6:	4b7d      	ldr	r3, [pc, #500]	; (80058ec <main+0x5cc>)
 80056f8:	781b      	ldrb	r3, [r3, #0]
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d00f      	beq.n	800571e <main+0x3fe>
 80056fe:	4b7c      	ldr	r3, [pc, #496]	; (80058f0 <main+0x5d0>)
 8005700:	781b      	ldrb	r3, [r3, #0]
 8005702:	2b00      	cmp	r3, #0
 8005704:	d00b      	beq.n	800571e <main+0x3fe>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8005706:	4b7b      	ldr	r3, [pc, #492]	; (80058f4 <main+0x5d4>)
 8005708:	681a      	ldr	r2, [r3, #0]
 800570a:	4b7b      	ldr	r3, [pc, #492]	; (80058f8 <main+0x5d8>)
 800570c:	681b      	ldr	r3, [r3, #0]
 800570e:	1ad3      	subs	r3, r2, r3
 8005710:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005714:	dc03      	bgt.n	800571e <main+0x3fe>
					{
						StopPulseGenerating();
 8005716:	f7fc f91d 	bl	8001954 <StopPulseGenerating>
						StopExperiment();
 800571a:	f7fe f9e1 	bl	8003ae0 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 800571e:	4b77      	ldr	r3, [pc, #476]	; (80058fc <main+0x5dc>)
 8005720:	781b      	ldrb	r3, [r3, #0]
 8005722:	2b00      	cmp	r3, #0
 8005724:	d00b      	beq.n	800573e <main+0x41e>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8005726:	4b73      	ldr	r3, [pc, #460]	; (80058f4 <main+0x5d4>)
 8005728:	681a      	ldr	r2, [r3, #0]
 800572a:	4b73      	ldr	r3, [pc, #460]	; (80058f8 <main+0x5d8>)
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	1ad3      	subs	r3, r2, r3
 8005730:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005734:	dc03      	bgt.n	800573e <main+0x41e>
					{
						StopPulseGenerating();
 8005736:	f7fc f90d 	bl	8001954 <StopPulseGenerating>
						StopExperiment();
 800573a:	f7fe f9d1 	bl	8003ae0 <StopExperiment>
					}
				}
			}
			// END Software Limit ASDA Driver
			//BEGIN Homing
			if (IsHoming)
 800573e:	4b69      	ldr	r3, [pc, #420]	; (80058e4 <main+0x5c4>)
 8005740:	781b      	ldrb	r3, [r3, #0]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d009      	beq.n	800575a <main+0x43a>
			{
				if(CheckGoingToRefPosition(false, 100)) // false = go up, 0 = home position
 8005746:	2164      	movs	r1, #100	; 0x64
 8005748:	2000      	movs	r0, #0
 800574a:	f7fc f9f1 	bl	8001b30 <CheckGoingToRefPosition>
 800574e:	4603      	mov	r3, r0
 8005750:	2b00      	cmp	r3, #0
 8005752:	d002      	beq.n	800575a <main+0x43a>
				{
					IsHoming = false; // finish homing
 8005754:	4b63      	ldr	r3, [pc, #396]	; (80058e4 <main+0x5c4>)
 8005756:	2200      	movs	r2, #0
 8005758:	701a      	strb	r2, [r3, #0]
				}
			}
			//END Homing

			// BEGIN Send data to the UI
			if (UIDataRequest)
 800575a:	4b69      	ldr	r3, [pc, #420]	; (8005900 <main+0x5e0>)
 800575c:	781b      	ldrb	r3, [r3, #0]
 800575e:	2b00      	cmp	r3, #0
 8005760:	d07d      	beq.n	800585e <main+0x53e>
			{
				if (PositionControlMode) // Position Mode, read both Position and Speed, Send both Position and Speed
 8005762:	4b68      	ldr	r3, [pc, #416]	; (8005904 <main+0x5e4>)
 8005764:	781b      	ldrb	r3, [r3, #0]
 8005766:	2b00      	cmp	r3, #0
 8005768:	d079      	beq.n	800585e <main+0x53e>
				{
					memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 800576a:	221e      	movs	r2, #30
 800576c:	2100      	movs	r1, #0
 800576e:	4866      	ldr	r0, [pc, #408]	; (8005908 <main+0x5e8>)
 8005770:	f004 fbb4 	bl	8009edc <memset>
					if (MotorDriver) // FDA7000 Driver
 8005774:	4b5c      	ldr	r3, [pc, #368]	; (80058e8 <main+0x5c8>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	2b00      	cmp	r3, #0
 800577a:	d038      	beq.n	80057ee <main+0x4ce>
					{

						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PositionPulseCmd*EgearRatio); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError);
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 800577c:	4b63      	ldr	r3, [pc, #396]	; (800590c <main+0x5ec>)
 800577e:	681b      	ldr	r3, [r3, #0]
 8005780:	4618      	mov	r0, r3
 8005782:	f7fa fee1 	bl	8000548 <__aeabi_f2d>
 8005786:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800578a:	4b61      	ldr	r3, [pc, #388]	; (8005910 <main+0x5f0>)
 800578c:	681b      	ldr	r3, [r3, #0]
 800578e:	4618      	mov	r0, r3
 8005790:	f7fa feda 	bl	8000548 <__aeabi_f2d>
 8005794:	4680      	mov	r8, r0
 8005796:	4689      	mov	r9, r1
 8005798:	4b5e      	ldr	r3, [pc, #376]	; (8005914 <main+0x5f4>)
 800579a:	681b      	ldr	r3, [r3, #0]
 800579c:	4618      	mov	r0, r3
 800579e:	f7fa fed3 	bl	8000548 <__aeabi_f2d>
 80057a2:	4682      	mov	sl, r0
 80057a4:	468b      	mov	fp, r1
 80057a6:	4b5c      	ldr	r3, [pc, #368]	; (8005918 <main+0x5f8>)
 80057a8:	681b      	ldr	r3, [r3, #0]
 80057aa:	4618      	mov	r0, r3
 80057ac:	f7fa fecc 	bl	8000548 <__aeabi_f2d>
 80057b0:	4602      	mov	r2, r0
 80057b2:	460b      	mov	r3, r1
 80057b4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80057b8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80057bc:	e9cd 8900 	strd	r8, r9, [sp]
 80057c0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80057c4:	4955      	ldr	r1, [pc, #340]	; (800591c <main+0x5fc>)
 80057c6:	4850      	ldr	r0, [pc, #320]	; (8005908 <main+0x5e8>)
 80057c8:	f005 fa10 	bl	800abec <siprintf>
 80057cc:	4603      	mov	r3, r0
 80057ce:	b2da      	uxtb	r2, r3
 80057d0:	4b53      	ldr	r3, [pc, #332]	; (8005920 <main+0x600>)
 80057d2:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80057d4:	4b52      	ldr	r3, [pc, #328]	; (8005920 <main+0x600>)
 80057d6:	781b      	ldrb	r3, [r3, #0]
 80057d8:	b29a      	uxth	r2, r3
 80057da:	23c8      	movs	r3, #200	; 0xc8
 80057dc:	494a      	ldr	r1, [pc, #296]	; (8005908 <main+0x5e8>)
 80057de:	4851      	ldr	r0, [pc, #324]	; (8005924 <main+0x604>)
 80057e0:	f003 fb27 	bl	8008e32 <HAL_UART_Transmit>
						ReadMultiRegister(StE03,6); // Read from StE03 -> StE08
 80057e4:	2106      	movs	r1, #6
 80057e6:	200c      	movs	r0, #12
 80057e8:	f7fb fede 	bl	80015a8 <ReadMultiRegister>
 80057ec:	e037      	b.n	800585e <main+0x53e>
					}
					else // ASDA-A3 Driver
					{
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%d/%.1f/%.1fe",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError,AccZ,AccRef); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 80057ee:	4b47      	ldr	r3, [pc, #284]	; (800590c <main+0x5ec>)
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	4618      	mov	r0, r3
 80057f4:	f7fa fea8 	bl	8000548 <__aeabi_f2d>
 80057f8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80057fc:	4b44      	ldr	r3, [pc, #272]	; (8005910 <main+0x5f0>)
 80057fe:	681b      	ldr	r3, [r3, #0]
 8005800:	4618      	mov	r0, r3
 8005802:	f7fa fea1 	bl	8000548 <__aeabi_f2d>
 8005806:	4680      	mov	r8, r0
 8005808:	4689      	mov	r9, r1
 800580a:	4b42      	ldr	r3, [pc, #264]	; (8005914 <main+0x5f4>)
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	4618      	mov	r0, r3
 8005810:	f7fa fe9a 	bl	8000548 <__aeabi_f2d>
 8005814:	4682      	mov	sl, r0
 8005816:	468b      	mov	fp, r1
 8005818:	4b3f      	ldr	r3, [pc, #252]	; (8005918 <main+0x5f8>)
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	4618      	mov	r0, r3
 800581e:	f7fa fe93 	bl	8000548 <__aeabi_f2d>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800582a:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800582e:	e9cd 8900 	strd	r8, r9, [sp]
 8005832:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005836:	4939      	ldr	r1, [pc, #228]	; (800591c <main+0x5fc>)
 8005838:	4833      	ldr	r0, [pc, #204]	; (8005908 <main+0x5e8>)
 800583a:	f005 f9d7 	bl	800abec <siprintf>
 800583e:	4603      	mov	r3, r0
 8005840:	b2da      	uxtb	r2, r3
 8005842:	4b37      	ldr	r3, [pc, #220]	; (8005920 <main+0x600>)
 8005844:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005846:	4b36      	ldr	r3, [pc, #216]	; (8005920 <main+0x600>)
 8005848:	781b      	ldrb	r3, [r3, #0]
 800584a:	b29a      	uxth	r2, r3
 800584c:	23c8      	movs	r3, #200	; 0xc8
 800584e:	492e      	ldr	r1, [pc, #184]	; (8005908 <main+0x5e8>)
 8005850:	4834      	ldr	r0, [pc, #208]	; (8005924 <main+0x604>)
 8005852:	f003 faee 	bl	8008e32 <HAL_UART_Transmit>
						// Read 4 words start from 0x012 to 0x015
						// Encoder pulse: 0x012 + 0x013 (2 words)
						// Motor Speed: 0x014 + 0x015 (2 words)
						// Pulse Error: (2 word)
						// Total is 6 words, 1word = 4 bytes
						ReadMultiRegister(ASDA_MotorSpeed,6);
 8005856:	2106      	movs	r1, #6
 8005858:	2012      	movs	r0, #18
 800585a:	f7fb fea5 	bl	80015a8 <ReadMultiRegister>
					}
				}
			}
			if(OutputDataRequest)
 800585e:	4b32      	ldr	r3, [pc, #200]	; (8005928 <main+0x608>)
 8005860:	781b      	ldrb	r3, [r3, #0]
 8005862:	2b00      	cmp	r3, #0
 8005864:	d02a      	beq.n	80058bc <main+0x59c>
				{
					CountTimerDriverOutput++;
 8005866:	4b31      	ldr	r3, [pc, #196]	; (800592c <main+0x60c>)
 8005868:	881b      	ldrh	r3, [r3, #0]
 800586a:	3301      	adds	r3, #1
 800586c:	b29a      	uxth	r2, r3
 800586e:	4b2f      	ldr	r3, [pc, #188]	; (800592c <main+0x60c>)
 8005870:	801a      	strh	r2, [r3, #0]
					if (CountTimerDriverOutput >= 15) // 20*25=500 ms, timer 2 period is 1ms
 8005872:	4b2e      	ldr	r3, [pc, #184]	; (800592c <main+0x60c>)
 8005874:	881b      	ldrh	r3, [r3, #0]
 8005876:	2b0e      	cmp	r3, #14
 8005878:	d920      	bls.n	80058bc <main+0x59c>
					{
						DriverOutput = ReadLogicF7000Out(); // Read Driver Output
 800587a:	f7fb fd69 	bl	8001350 <ReadLogicF7000Out>
 800587e:	4603      	mov	r3, r0
 8005880:	461a      	mov	r2, r3
 8005882:	4b2b      	ldr	r3, [pc, #172]	; (8005930 <main+0x610>)
 8005884:	801a      	strh	r2, [r3, #0]

						memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005886:	221e      	movs	r2, #30
 8005888:	2100      	movs	r1, #0
 800588a:	481f      	ldr	r0, [pc, #124]	; (8005908 <main+0x5e8>)
 800588c:	f004 fb26 	bl	8009edc <memset>
						TxPCLen = sprintf(TxPCBuff,"o%de",DriverOutput); // 1 means only the driver outputs
 8005890:	4b27      	ldr	r3, [pc, #156]	; (8005930 <main+0x610>)
 8005892:	881b      	ldrh	r3, [r3, #0]
 8005894:	461a      	mov	r2, r3
 8005896:	4927      	ldr	r1, [pc, #156]	; (8005934 <main+0x614>)
 8005898:	481b      	ldr	r0, [pc, #108]	; (8005908 <main+0x5e8>)
 800589a:	f005 f9a7 	bl	800abec <siprintf>
 800589e:	4603      	mov	r3, r0
 80058a0:	b2da      	uxtb	r2, r3
 80058a2:	4b1f      	ldr	r3, [pc, #124]	; (8005920 <main+0x600>)
 80058a4:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80058a6:	4b1e      	ldr	r3, [pc, #120]	; (8005920 <main+0x600>)
 80058a8:	781b      	ldrb	r3, [r3, #0]
 80058aa:	b29a      	uxth	r2, r3
 80058ac:	23c8      	movs	r3, #200	; 0xc8
 80058ae:	4916      	ldr	r1, [pc, #88]	; (8005908 <main+0x5e8>)
 80058b0:	481c      	ldr	r0, [pc, #112]	; (8005924 <main+0x604>)
 80058b2:	f003 fabe 	bl	8008e32 <HAL_UART_Transmit>

						CountTimerDriverOutput = 0;
 80058b6:	4b1d      	ldr	r3, [pc, #116]	; (800592c <main+0x60c>)
 80058b8:	2200      	movs	r2, #0
 80058ba:	801a      	strh	r2, [r3, #0]
			// END Send data to the UI
		}
		// END 50ms period interrupt

		// BEGIN Uart3 receive complete
		if (RxUart3_Cpl_Flag)
 80058bc:	4b1e      	ldr	r3, [pc, #120]	; (8005938 <main+0x618>)
 80058be:	781b      	ldrb	r3, [r3, #0]
 80058c0:	b2db      	uxtb	r3, r3
 80058c2:	2b00      	cmp	r3, #0
 80058c4:	d06d      	beq.n	80059a2 <main+0x682>
		{
			RxUart3_Cpl_Flag = false;
 80058c6:	4b1c      	ldr	r3, [pc, #112]	; (8005938 <main+0x618>)
 80058c8:	2200      	movs	r2, #0
 80058ca:	701a      	strb	r2, [r3, #0]
//			else
//			{
//				AccZ = AccZ + 10;
//			}

			memset (AccZDataRegion, '\0', sizeof (AccZDataRegion)); // reset buffer
 80058cc:	220a      	movs	r2, #10
 80058ce:	2100      	movs	r1, #0
 80058d0:	481a      	ldr	r0, [pc, #104]	; (800593c <main+0x61c>)
 80058d2:	f004 fb03 	bl	8009edc <memset>

			for (uint8_t i = 0; i<= sizeof(RxUart3Buff); i++) // Remove the null byte
 80058d6:	2300      	movs	r3, #0
 80058d8:	75fb      	strb	r3, [r7, #23]
 80058da:	e041      	b.n	8005960 <main+0x640>
 80058dc:	20000449 	.word	0x20000449
 80058e0:	40021000 	.word	0x40021000
 80058e4:	20000458 	.word	0x20000458
 80058e8:	20000003 	.word	0x20000003
 80058ec:	20000446 	.word	0x20000446
 80058f0:	20000454 	.word	0x20000454
 80058f4:	20000510 	.word	0x20000510
 80058f8:	200004c8 	.word	0x200004c8
 80058fc:	20000006 	.word	0x20000006
 8005900:	2000044c 	.word	0x2000044c
 8005904:	20000002 	.word	0x20000002
 8005908:	2000040c 	.word	0x2000040c
 800590c:	20000508 	.word	0x20000508
 8005910:	20000514 	.word	0x20000514
 8005914:	20000554 	.word	0x20000554
 8005918:	20000010 	.word	0x20000010
 800591c:	0800f8a8 	.word	0x0800f8a8
 8005920:	2000042a 	.word	0x2000042a
 8005924:	2000033c 	.word	0x2000033c
 8005928:	20000001 	.word	0x20000001
 800592c:	20000460 	.word	0x20000460
 8005930:	20000462 	.word	0x20000462
 8005934:	0800f8c0 	.word	0x0800f8c0
 8005938:	20000443 	.word	0x20000443
 800593c:	200003d4 	.word	0x200003d4
			{
				if (RxUart3Buff[i] != 0x00)
 8005940:	7dfb      	ldrb	r3, [r7, #23]
 8005942:	4a4c      	ldr	r2, [pc, #304]	; (8005a74 <main+0x754>)
 8005944:	5cd3      	ldrb	r3, [r2, r3]
 8005946:	b2db      	uxtb	r3, r3
 8005948:	2b00      	cmp	r3, #0
 800594a:	d006      	beq.n	800595a <main+0x63a>
				{
					AccZDataRegion[i] = RxUart3Buff[i];
 800594c:	7dfa      	ldrb	r2, [r7, #23]
 800594e:	7dfb      	ldrb	r3, [r7, #23]
 8005950:	4948      	ldr	r1, [pc, #288]	; (8005a74 <main+0x754>)
 8005952:	5c8a      	ldrb	r2, [r1, r2]
 8005954:	b2d1      	uxtb	r1, r2
 8005956:	4a48      	ldr	r2, [pc, #288]	; (8005a78 <main+0x758>)
 8005958:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i<= sizeof(RxUart3Buff); i++) // Remove the null byte
 800595a:	7dfb      	ldrb	r3, [r7, #23]
 800595c:	3301      	adds	r3, #1
 800595e:	75fb      	strb	r3, [r7, #23]
 8005960:	7dfb      	ldrb	r3, [r7, #23]
 8005962:	2b0a      	cmp	r3, #10
 8005964:	d9ec      	bls.n	8005940 <main+0x620>
				}
			}
			if (fabs(atof((char *)RxUart3Buff)) <= 100)
 8005966:	4843      	ldr	r0, [pc, #268]	; (8005a74 <main+0x754>)
 8005968:	f004 fa8a 	bl	8009e80 <atof>
 800596c:	ec53 2b10 	vmov	r2, r3, d0
 8005970:	4614      	mov	r4, r2
 8005972:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005976:	f04f 0200 	mov.w	r2, #0
 800597a:	4b40      	ldr	r3, [pc, #256]	; (8005a7c <main+0x75c>)
 800597c:	4620      	mov	r0, r4
 800597e:	4629      	mov	r1, r5
 8005980:	f7fb f8b6 	bl	8000af0 <__aeabi_dcmple>
 8005984:	4603      	mov	r3, r0
 8005986:	2b00      	cmp	r3, #0
 8005988:	d00b      	beq.n	80059a2 <main+0x682>
			{
				AccZ = atof((char *)RxUart3Buff);
 800598a:	483a      	ldr	r0, [pc, #232]	; (8005a74 <main+0x754>)
 800598c:	f004 fa78 	bl	8009e80 <atof>
 8005990:	ec53 2b10 	vmov	r2, r3, d0
 8005994:	4610      	mov	r0, r2
 8005996:	4619      	mov	r1, r3
 8005998:	f7fb f926 	bl	8000be8 <__aeabi_d2f>
 800599c:	4603      	mov	r3, r0
 800599e:	4a38      	ldr	r2, [pc, #224]	; (8005a80 <main+0x760>)
 80059a0:	6013      	str	r3, [r2, #0]
//			//HAL_UART_Receive_IT(&huart4,&RxESPData,1);
//		}
// 	 End UART4 (ESP32) process

		// BEGIN Process Driver Received Data
		if (RxUart5_Cpl_Flag) // Complete receive data from the driver
 80059a2:	4b38      	ldr	r3, [pc, #224]	; (8005a84 <main+0x764>)
 80059a4:	781b      	ldrb	r3, [r3, #0]
 80059a6:	b2db      	uxtb	r3, r3
 80059a8:	2b00      	cmp	r3, #0
 80059aa:	f43f acf4 	beq.w	8005396 <main+0x76>
			{
				RxUart5_Cpl_Flag = false;
 80059ae:	4b35      	ldr	r3, [pc, #212]	; (8005a84 <main+0x764>)
 80059b0:	2200      	movs	r2, #0
 80059b2:	701a      	strb	r2, [r3, #0]

				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 80059b4:	4b34      	ldr	r3, [pc, #208]	; (8005a88 <main+0x768>)
 80059b6:	2200      	movs	r2, #0
 80059b8:	701a      	strb	r2, [r3, #0]
 80059ba:	e123      	b.n	8005c04 <main+0x8e4>
				{
					if (RxDriverBuff[i] == DriverID)
 80059bc:	4b32      	ldr	r3, [pc, #200]	; (8005a88 <main+0x768>)
 80059be:	781b      	ldrb	r3, [r3, #0]
 80059c0:	461a      	mov	r2, r3
 80059c2:	4b32      	ldr	r3, [pc, #200]	; (8005a8c <main+0x76c>)
 80059c4:	5c9b      	ldrb	r3, [r3, r2]
 80059c6:	b2db      	uxtb	r3, r3
 80059c8:	2b01      	cmp	r3, #1
 80059ca:	f040 8115 	bne.w	8005bf8 <main+0x8d8>
					{
						if (RxDriverBuff[1+i] == 3)
 80059ce:	4b2e      	ldr	r3, [pc, #184]	; (8005a88 <main+0x768>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	3301      	adds	r3, #1
 80059d4:	4a2d      	ldr	r2, [pc, #180]	; (8005a8c <main+0x76c>)
 80059d6:	5cd3      	ldrb	r3, [r2, r3]
 80059d8:	b2db      	uxtb	r3, r3
 80059da:	2b03      	cmp	r3, #3
 80059dc:	f040 80c4 	bne.w	8005b68 <main+0x848>
						{
							if (MotorDriver) // FDA7000
 80059e0:	4b2b      	ldr	r3, [pc, #172]	; (8005a90 <main+0x770>)
 80059e2:	781b      	ldrb	r3, [r3, #0]
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d05b      	beq.n	8005aa0 <main+0x780>
							{
								SpeedValueRegion[0] = RxDriverBuff[6+i];
 80059e8:	4b27      	ldr	r3, [pc, #156]	; (8005a88 <main+0x768>)
 80059ea:	781b      	ldrb	r3, [r3, #0]
 80059ec:	3306      	adds	r3, #6
 80059ee:	4a27      	ldr	r2, [pc, #156]	; (8005a8c <main+0x76c>)
 80059f0:	5cd3      	ldrb	r3, [r2, r3]
 80059f2:	b2da      	uxtb	r2, r3
 80059f4:	4b27      	ldr	r3, [pc, #156]	; (8005a94 <main+0x774>)
 80059f6:	701a      	strb	r2, [r3, #0]
								SpeedValueRegion[1] = RxDriverBuff[5+i];
 80059f8:	4b23      	ldr	r3, [pc, #140]	; (8005a88 <main+0x768>)
 80059fa:	781b      	ldrb	r3, [r3, #0]
 80059fc:	3305      	adds	r3, #5
 80059fe:	4a23      	ldr	r2, [pc, #140]	; (8005a8c <main+0x76c>)
 8005a00:	5cd3      	ldrb	r3, [r2, r3]
 8005a02:	b2da      	uxtb	r2, r3
 8005a04:	4b23      	ldr	r3, [pc, #140]	; (8005a94 <main+0x774>)
 8005a06:	705a      	strb	r2, [r3, #1]
								SpeedValueRegion[2] = RxDriverBuff[4+i];
 8005a08:	4b1f      	ldr	r3, [pc, #124]	; (8005a88 <main+0x768>)
 8005a0a:	781b      	ldrb	r3, [r3, #0]
 8005a0c:	3304      	adds	r3, #4
 8005a0e:	4a1f      	ldr	r2, [pc, #124]	; (8005a8c <main+0x76c>)
 8005a10:	5cd3      	ldrb	r3, [r2, r3]
 8005a12:	b2da      	uxtb	r2, r3
 8005a14:	4b1f      	ldr	r3, [pc, #124]	; (8005a94 <main+0x774>)
 8005a16:	709a      	strb	r2, [r3, #2]
								SpeedValueRegion[3] = RxDriverBuff[3+i];
 8005a18:	4b1b      	ldr	r3, [pc, #108]	; (8005a88 <main+0x768>)
 8005a1a:	781b      	ldrb	r3, [r3, #0]
 8005a1c:	3303      	adds	r3, #3
 8005a1e:	4a1b      	ldr	r2, [pc, #108]	; (8005a8c <main+0x76c>)
 8005a20:	5cd3      	ldrb	r3, [r2, r3]
 8005a22:	b2da      	uxtb	r2, r3
 8005a24:	4b1b      	ldr	r3, [pc, #108]	; (8005a94 <main+0x774>)
 8005a26:	70da      	strb	r2, [r3, #3]
 8005a28:	4b1a      	ldr	r3, [pc, #104]	; (8005a94 <main+0x774>)
 8005a2a:	681b      	ldr	r3, [r3, #0]

								memcpy(&MotorSpeed, SpeedValueRegion, 4);
 8005a2c:	4a1a      	ldr	r2, [pc, #104]	; (8005a98 <main+0x778>)
 8005a2e:	6013      	str	r3, [r2, #0]
//								{
//									MotorSpeed = MotorSpeedBuff;
//								}


								MotorEncPulse = (RxDriverBuff[19+i] << 24) | (RxDriverBuff[20+i] << 16) | (RxDriverBuff[21+i] << 8) | RxDriverBuff[22+i];
 8005a30:	4b15      	ldr	r3, [pc, #84]	; (8005a88 <main+0x768>)
 8005a32:	781b      	ldrb	r3, [r3, #0]
 8005a34:	3313      	adds	r3, #19
 8005a36:	4a15      	ldr	r2, [pc, #84]	; (8005a8c <main+0x76c>)
 8005a38:	5cd3      	ldrb	r3, [r2, r3]
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	061a      	lsls	r2, r3, #24
 8005a3e:	4b12      	ldr	r3, [pc, #72]	; (8005a88 <main+0x768>)
 8005a40:	781b      	ldrb	r3, [r3, #0]
 8005a42:	3314      	adds	r3, #20
 8005a44:	4911      	ldr	r1, [pc, #68]	; (8005a8c <main+0x76c>)
 8005a46:	5ccb      	ldrb	r3, [r1, r3]
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	041b      	lsls	r3, r3, #16
 8005a4c:	431a      	orrs	r2, r3
 8005a4e:	4b0e      	ldr	r3, [pc, #56]	; (8005a88 <main+0x768>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	3315      	adds	r3, #21
 8005a54:	490d      	ldr	r1, [pc, #52]	; (8005a8c <main+0x76c>)
 8005a56:	5ccb      	ldrb	r3, [r1, r3]
 8005a58:	b2db      	uxtb	r3, r3
 8005a5a:	021b      	lsls	r3, r3, #8
 8005a5c:	4313      	orrs	r3, r2
 8005a5e:	4a0a      	ldr	r2, [pc, #40]	; (8005a88 <main+0x768>)
 8005a60:	7812      	ldrb	r2, [r2, #0]
 8005a62:	3216      	adds	r2, #22
 8005a64:	4909      	ldr	r1, [pc, #36]	; (8005a8c <main+0x76c>)
 8005a66:	5c8a      	ldrb	r2, [r1, r2]
 8005a68:	b2d2      	uxtb	r2, r2
 8005a6a:	4313      	orrs	r3, r2
 8005a6c:	4a0b      	ldr	r2, [pc, #44]	; (8005a9c <main+0x77c>)
 8005a6e:	6013      	str	r3, [r2, #0]
 8005a70:	e070      	b.n	8005b54 <main+0x834>
 8005a72:	bf00      	nop
 8005a74:	200003c8 	.word	0x200003c8
 8005a78:	200003d4 	.word	0x200003d4
 8005a7c:	40590000 	.word	0x40590000
 8005a80:	20000548 	.word	0x20000548
 8005a84:	20000442 	.word	0x20000442
 8005a88:	2000042b 	.word	0x2000042b
 8005a8c:	200003a8 	.word	0x200003a8
 8005a90:	20000003 	.word	0x20000003
 8005a94:	2000042c 	.word	0x2000042c
 8005a98:	20000508 	.word	0x20000508
 8005a9c:	20000510 	.word	0x20000510

								//PulseError = (RxDriverBuff[23+i] << 24) | (RxDriverBuff[24+i] << 16) | (RxDriverBuff[25+i] << 8) | RxDriverBuff[26+i];
							}
							else // ASDA-A3
							{
								MotorSpeedBuff = (float)((RxDriverBuff[5+i] << 24) | (RxDriverBuff[6+i] << 16) | (RxDriverBuff[3+i] << 8) | RxDriverBuff[4+i])/((float)-10.0); // Minus to Reverse
 8005aa0:	4b79      	ldr	r3, [pc, #484]	; (8005c88 <main+0x968>)
 8005aa2:	781b      	ldrb	r3, [r3, #0]
 8005aa4:	3305      	adds	r3, #5
 8005aa6:	4a79      	ldr	r2, [pc, #484]	; (8005c8c <main+0x96c>)
 8005aa8:	5cd3      	ldrb	r3, [r2, r3]
 8005aaa:	b2db      	uxtb	r3, r3
 8005aac:	061a      	lsls	r2, r3, #24
 8005aae:	4b76      	ldr	r3, [pc, #472]	; (8005c88 <main+0x968>)
 8005ab0:	781b      	ldrb	r3, [r3, #0]
 8005ab2:	3306      	adds	r3, #6
 8005ab4:	4975      	ldr	r1, [pc, #468]	; (8005c8c <main+0x96c>)
 8005ab6:	5ccb      	ldrb	r3, [r1, r3]
 8005ab8:	b2db      	uxtb	r3, r3
 8005aba:	041b      	lsls	r3, r3, #16
 8005abc:	431a      	orrs	r2, r3
 8005abe:	4b72      	ldr	r3, [pc, #456]	; (8005c88 <main+0x968>)
 8005ac0:	781b      	ldrb	r3, [r3, #0]
 8005ac2:	3303      	adds	r3, #3
 8005ac4:	4971      	ldr	r1, [pc, #452]	; (8005c8c <main+0x96c>)
 8005ac6:	5ccb      	ldrb	r3, [r1, r3]
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	021b      	lsls	r3, r3, #8
 8005acc:	4313      	orrs	r3, r2
 8005ace:	4a6e      	ldr	r2, [pc, #440]	; (8005c88 <main+0x968>)
 8005ad0:	7812      	ldrb	r2, [r2, #0]
 8005ad2:	3204      	adds	r2, #4
 8005ad4:	496d      	ldr	r1, [pc, #436]	; (8005c8c <main+0x96c>)
 8005ad6:	5c8a      	ldrb	r2, [r1, r2]
 8005ad8:	b2d2      	uxtb	r2, r2
 8005ada:	4313      	orrs	r3, r2
 8005adc:	ee07 3a90 	vmov	s15, r3
 8005ae0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005ae4:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8005ae8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005aec:	4b68      	ldr	r3, [pc, #416]	; (8005c90 <main+0x970>)
 8005aee:	edc3 7a00 	vstr	s15, [r3]

								if (fabs(MotorSpeedBuff) <= 2000)
 8005af2:	4b67      	ldr	r3, [pc, #412]	; (8005c90 <main+0x970>)
 8005af4:	edd3 7a00 	vldr	s15, [r3]
 8005af8:	eef0 7ae7 	vabs.f32	s15, s15
 8005afc:	ed9f 7a65 	vldr	s14, [pc, #404]	; 8005c94 <main+0x974>
 8005b00:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b08:	d803      	bhi.n	8005b12 <main+0x7f2>
								{
									MotorSpeed = MotorSpeedBuff;
 8005b0a:	4b61      	ldr	r3, [pc, #388]	; (8005c90 <main+0x970>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	4a62      	ldr	r2, [pc, #392]	; (8005c98 <main+0x978>)
 8005b10:	6013      	str	r3, [r2, #0]
								}

								MotorEncPulse = -((RxDriverBuff[9+i] << 24) | (RxDriverBuff[10+i] << 16) | (RxDriverBuff[7+i] << 8) | RxDriverBuff[8+i]); // Minus to Reverse
 8005b12:	4b5d      	ldr	r3, [pc, #372]	; (8005c88 <main+0x968>)
 8005b14:	781b      	ldrb	r3, [r3, #0]
 8005b16:	3309      	adds	r3, #9
 8005b18:	4a5c      	ldr	r2, [pc, #368]	; (8005c8c <main+0x96c>)
 8005b1a:	5cd3      	ldrb	r3, [r2, r3]
 8005b1c:	b2db      	uxtb	r3, r3
 8005b1e:	061a      	lsls	r2, r3, #24
 8005b20:	4b59      	ldr	r3, [pc, #356]	; (8005c88 <main+0x968>)
 8005b22:	781b      	ldrb	r3, [r3, #0]
 8005b24:	330a      	adds	r3, #10
 8005b26:	4959      	ldr	r1, [pc, #356]	; (8005c8c <main+0x96c>)
 8005b28:	5ccb      	ldrb	r3, [r1, r3]
 8005b2a:	b2db      	uxtb	r3, r3
 8005b2c:	041b      	lsls	r3, r3, #16
 8005b2e:	431a      	orrs	r2, r3
 8005b30:	4b55      	ldr	r3, [pc, #340]	; (8005c88 <main+0x968>)
 8005b32:	781b      	ldrb	r3, [r3, #0]
 8005b34:	3307      	adds	r3, #7
 8005b36:	4955      	ldr	r1, [pc, #340]	; (8005c8c <main+0x96c>)
 8005b38:	5ccb      	ldrb	r3, [r1, r3]
 8005b3a:	b2db      	uxtb	r3, r3
 8005b3c:	021b      	lsls	r3, r3, #8
 8005b3e:	4313      	orrs	r3, r2
 8005b40:	4a51      	ldr	r2, [pc, #324]	; (8005c88 <main+0x968>)
 8005b42:	7812      	ldrb	r2, [r2, #0]
 8005b44:	3208      	adds	r2, #8
 8005b46:	4951      	ldr	r1, [pc, #324]	; (8005c8c <main+0x96c>)
 8005b48:	5c8a      	ldrb	r2, [r1, r2]
 8005b4a:	b2d2      	uxtb	r2, r2
 8005b4c:	4313      	orrs	r3, r2
 8005b4e:	425b      	negs	r3, r3
 8005b50:	4a52      	ldr	r2, [pc, #328]	; (8005c9c <main+0x97c>)
 8005b52:	6013      	str	r3, [r2, #0]
								//PulseError = ((RxDriverBuff[13+i] << 24) | (RxDriverBuff[14+i] << 16) | (RxDriverBuff[11+i] << 8) | RxDriverBuff[12+i]);

								//ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/AsdaEncoderResolution; // Calculate Object Position in m
							}

							memset (RxDriverBuff, '\0', sizeof (RxDriverBuff)); // reset buffer
 8005b54:	221e      	movs	r2, #30
 8005b56:	2100      	movs	r1, #0
 8005b58:	484c      	ldr	r0, [pc, #304]	; (8005c8c <main+0x96c>)
 8005b5a:	f004 f9bf 	bl	8009edc <memset>
							HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte for the next time
 8005b5e:	2201      	movs	r2, #1
 8005b60:	494f      	ldr	r1, [pc, #316]	; (8005ca0 <main+0x980>)
 8005b62:	4850      	ldr	r0, [pc, #320]	; (8005ca4 <main+0x984>)
 8005b64:	f003 f9f7 	bl	8008f56 <HAL_UART_Receive_IT>
						}
						if (RxDriverBuff[1] == 6) // Writing to a register
 8005b68:	4b48      	ldr	r3, [pc, #288]	; (8005c8c <main+0x96c>)
 8005b6a:	785b      	ldrb	r3, [r3, #1]
 8005b6c:	b2db      	uxtb	r3, r3
 8005b6e:	2b06      	cmp	r3, #6
 8005b70:	d142      	bne.n	8005bf8 <main+0x8d8>
						{
							// Send to PC to check the writing result
							memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005b72:	221e      	movs	r2, #30
 8005b74:	2100      	movs	r1, #0
 8005b76:	484c      	ldr	r0, [pc, #304]	; (8005ca8 <main+0x988>)
 8005b78:	f004 f9b0 	bl	8009edc <memset>
							TxPCLen = sprintf(TxPCBuff,"w%d/%d/%d/%d/%d/%d/%d/%d/%d/e",RxDriverBuff[0],RxDriverBuff[1],RxDriverBuff[2],RxDriverBuff[3],RxDriverBuff[4],RxDriverBuff[5],RxDriverBuff[6],RxDriverBuff[7],RxDriverBuff[8]);
 8005b7c:	4b43      	ldr	r3, [pc, #268]	; (8005c8c <main+0x96c>)
 8005b7e:	781b      	ldrb	r3, [r3, #0]
 8005b80:	b2db      	uxtb	r3, r3
 8005b82:	469c      	mov	ip, r3
 8005b84:	4b41      	ldr	r3, [pc, #260]	; (8005c8c <main+0x96c>)
 8005b86:	785b      	ldrb	r3, [r3, #1]
 8005b88:	b2db      	uxtb	r3, r3
 8005b8a:	469e      	mov	lr, r3
 8005b8c:	4b3f      	ldr	r3, [pc, #252]	; (8005c8c <main+0x96c>)
 8005b8e:	789b      	ldrb	r3, [r3, #2]
 8005b90:	b2db      	uxtb	r3, r3
 8005b92:	461a      	mov	r2, r3
 8005b94:	4b3d      	ldr	r3, [pc, #244]	; (8005c8c <main+0x96c>)
 8005b96:	78db      	ldrb	r3, [r3, #3]
 8005b98:	b2db      	uxtb	r3, r3
 8005b9a:	4619      	mov	r1, r3
 8005b9c:	4b3b      	ldr	r3, [pc, #236]	; (8005c8c <main+0x96c>)
 8005b9e:	791b      	ldrb	r3, [r3, #4]
 8005ba0:	b2db      	uxtb	r3, r3
 8005ba2:	4618      	mov	r0, r3
 8005ba4:	4b39      	ldr	r3, [pc, #228]	; (8005c8c <main+0x96c>)
 8005ba6:	795b      	ldrb	r3, [r3, #5]
 8005ba8:	b2db      	uxtb	r3, r3
 8005baa:	461e      	mov	r6, r3
 8005bac:	4b37      	ldr	r3, [pc, #220]	; (8005c8c <main+0x96c>)
 8005bae:	799b      	ldrb	r3, [r3, #6]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	60bb      	str	r3, [r7, #8]
 8005bb4:	4b35      	ldr	r3, [pc, #212]	; (8005c8c <main+0x96c>)
 8005bb6:	79db      	ldrb	r3, [r3, #7]
 8005bb8:	b2db      	uxtb	r3, r3
 8005bba:	607b      	str	r3, [r7, #4]
 8005bbc:	4b33      	ldr	r3, [pc, #204]	; (8005c8c <main+0x96c>)
 8005bbe:	7a1b      	ldrb	r3, [r3, #8]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	9306      	str	r3, [sp, #24]
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	9305      	str	r3, [sp, #20]
 8005bc8:	68bb      	ldr	r3, [r7, #8]
 8005bca:	9304      	str	r3, [sp, #16]
 8005bcc:	9603      	str	r6, [sp, #12]
 8005bce:	9002      	str	r0, [sp, #8]
 8005bd0:	9101      	str	r1, [sp, #4]
 8005bd2:	9200      	str	r2, [sp, #0]
 8005bd4:	4673      	mov	r3, lr
 8005bd6:	4662      	mov	r2, ip
 8005bd8:	4934      	ldr	r1, [pc, #208]	; (8005cac <main+0x98c>)
 8005bda:	4833      	ldr	r0, [pc, #204]	; (8005ca8 <main+0x988>)
 8005bdc:	f005 f806 	bl	800abec <siprintf>
 8005be0:	4603      	mov	r3, r0
 8005be2:	b2da      	uxtb	r2, r3
 8005be4:	4b32      	ldr	r3, [pc, #200]	; (8005cb0 <main+0x990>)
 8005be6:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005be8:	4b31      	ldr	r3, [pc, #196]	; (8005cb0 <main+0x990>)
 8005bea:	781b      	ldrb	r3, [r3, #0]
 8005bec:	b29a      	uxth	r2, r3
 8005bee:	23c8      	movs	r3, #200	; 0xc8
 8005bf0:	492d      	ldr	r1, [pc, #180]	; (8005ca8 <main+0x988>)
 8005bf2:	4830      	ldr	r0, [pc, #192]	; (8005cb4 <main+0x994>)
 8005bf4:	f003 f91d 	bl	8008e32 <HAL_UART_Transmit>
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8005bf8:	4b23      	ldr	r3, [pc, #140]	; (8005c88 <main+0x968>)
 8005bfa:	781b      	ldrb	r3, [r3, #0]
 8005bfc:	3301      	adds	r3, #1
 8005bfe:	b2da      	uxtb	r2, r3
 8005c00:	4b21      	ldr	r3, [pc, #132]	; (8005c88 <main+0x968>)
 8005c02:	701a      	strb	r2, [r3, #0]
 8005c04:	4b20      	ldr	r3, [pc, #128]	; (8005c88 <main+0x968>)
 8005c06:	781b      	ldrb	r3, [r3, #0]
 8005c08:	2b1e      	cmp	r3, #30
 8005c0a:	f67f aed7 	bls.w	80059bc <main+0x69c>
						}
						//break;
					}
				}
				ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/EncoderResolution; // Calculate Object Position in m
 8005c0e:	4b2a      	ldr	r3, [pc, #168]	; (8005cb8 <main+0x998>)
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	4618      	mov	r0, r3
 8005c14:	f7fa fc98 	bl	8000548 <__aeabi_f2d>
 8005c18:	a319      	add	r3, pc, #100	; (adr r3, 8005c80 <main+0x960>)
 8005c1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005c1e:	f7fa fceb 	bl	80005f8 <__aeabi_dmul>
 8005c22:	4602      	mov	r2, r0
 8005c24:	460b      	mov	r3, r1
 8005c26:	4690      	mov	r8, r2
 8005c28:	4699      	mov	r9, r3
 8005c2a:	4b1c      	ldr	r3, [pc, #112]	; (8005c9c <main+0x97c>)
 8005c2c:	681a      	ldr	r2, [r3, #0]
 8005c2e:	4b23      	ldr	r3, [pc, #140]	; (8005cbc <main+0x99c>)
 8005c30:	681b      	ldr	r3, [r3, #0]
 8005c32:	1ad3      	subs	r3, r2, r3
 8005c34:	4618      	mov	r0, r3
 8005c36:	f7fa fc75 	bl	8000524 <__aeabi_i2d>
 8005c3a:	4602      	mov	r2, r0
 8005c3c:	460b      	mov	r3, r1
 8005c3e:	4640      	mov	r0, r8
 8005c40:	4649      	mov	r1, r9
 8005c42:	f7fa fcd9 	bl	80005f8 <__aeabi_dmul>
 8005c46:	4602      	mov	r2, r0
 8005c48:	460b      	mov	r3, r1
 8005c4a:	4690      	mov	r8, r2
 8005c4c:	4699      	mov	r9, r3
 8005c4e:	4b1c      	ldr	r3, [pc, #112]	; (8005cc0 <main+0x9a0>)
 8005c50:	881b      	ldrh	r3, [r3, #0]
 8005c52:	4618      	mov	r0, r3
 8005c54:	f7fa fc66 	bl	8000524 <__aeabi_i2d>
 8005c58:	4602      	mov	r2, r0
 8005c5a:	460b      	mov	r3, r1
 8005c5c:	4640      	mov	r0, r8
 8005c5e:	4649      	mov	r1, r9
 8005c60:	f7fa fdf4 	bl	800084c <__aeabi_ddiv>
 8005c64:	4602      	mov	r2, r0
 8005c66:	460b      	mov	r3, r1
 8005c68:	4610      	mov	r0, r2
 8005c6a:	4619      	mov	r1, r3
 8005c6c:	f7fa ffbc 	bl	8000be8 <__aeabi_d2f>
 8005c70:	4603      	mov	r3, r0
 8005c72:	4a14      	ldr	r2, [pc, #80]	; (8005cc4 <main+0x9a4>)
 8005c74:	6013      	str	r3, [r2, #0]
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8005c76:	f7ff bb8e 	b.w	8005396 <main+0x76>
 8005c7a:	bf00      	nop
 8005c7c:	f3af 8000 	nop.w
 8005c80:	51eb851f 	.word	0x51eb851f
 8005c84:	40191eb8 	.word	0x40191eb8
 8005c88:	2000042b 	.word	0x2000042b
 8005c8c:	200003a8 	.word	0x200003a8
 8005c90:	2000050c 	.word	0x2000050c
 8005c94:	44fa0000 	.word	0x44fa0000
 8005c98:	20000508 	.word	0x20000508
 8005c9c:	20000510 	.word	0x20000510
 8005ca0:	20000409 	.word	0x20000409
 8005ca4:	200002b4 	.word	0x200002b4
 8005ca8:	2000040c 	.word	0x2000040c
 8005cac:	0800f8c8 	.word	0x0800f8c8
 8005cb0:	2000042a 	.word	0x2000042a
 8005cb4:	2000033c 	.word	0x2000033c
 8005cb8:	2000046c 	.word	0x2000046c
 8005cbc:	200004c8 	.word	0x200004c8
 8005cc0:	2000000a 	.word	0x2000000a
 8005cc4:	20000554 	.word	0x20000554

08005cc8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005cc8:	b580      	push	{r7, lr}
 8005cca:	b094      	sub	sp, #80	; 0x50
 8005ccc:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005cce:	f107 0320 	add.w	r3, r7, #32
 8005cd2:	2230      	movs	r2, #48	; 0x30
 8005cd4:	2100      	movs	r1, #0
 8005cd6:	4618      	mov	r0, r3
 8005cd8:	f004 f900 	bl	8009edc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005cdc:	f107 030c 	add.w	r3, r7, #12
 8005ce0:	2200      	movs	r2, #0
 8005ce2:	601a      	str	r2, [r3, #0]
 8005ce4:	605a      	str	r2, [r3, #4]
 8005ce6:	609a      	str	r2, [r3, #8]
 8005ce8:	60da      	str	r2, [r3, #12]
 8005cea:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005cec:	2300      	movs	r3, #0
 8005cee:	60bb      	str	r3, [r7, #8]
 8005cf0:	4b28      	ldr	r3, [pc, #160]	; (8005d94 <SystemClock_Config+0xcc>)
 8005cf2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cf4:	4a27      	ldr	r2, [pc, #156]	; (8005d94 <SystemClock_Config+0xcc>)
 8005cf6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cfa:	6413      	str	r3, [r2, #64]	; 0x40
 8005cfc:	4b25      	ldr	r3, [pc, #148]	; (8005d94 <SystemClock_Config+0xcc>)
 8005cfe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d00:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d04:	60bb      	str	r3, [r7, #8]
 8005d06:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d08:	2300      	movs	r3, #0
 8005d0a:	607b      	str	r3, [r7, #4]
 8005d0c:	4b22      	ldr	r3, [pc, #136]	; (8005d98 <SystemClock_Config+0xd0>)
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	4a21      	ldr	r2, [pc, #132]	; (8005d98 <SystemClock_Config+0xd0>)
 8005d12:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d16:	6013      	str	r3, [r2, #0]
 8005d18:	4b1f      	ldr	r3, [pc, #124]	; (8005d98 <SystemClock_Config+0xd0>)
 8005d1a:	681b      	ldr	r3, [r3, #0]
 8005d1c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005d20:	607b      	str	r3, [r7, #4]
 8005d22:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005d24:	2301      	movs	r3, #1
 8005d26:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005d28:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005d2c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005d2e:	2302      	movs	r3, #2
 8005d30:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005d32:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005d36:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005d38:	230c      	movs	r3, #12
 8005d3a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005d3c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005d40:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005d42:	2302      	movs	r3, #2
 8005d44:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005d46:	2304      	movs	r3, #4
 8005d48:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005d4a:	f107 0320 	add.w	r3, r7, #32
 8005d4e:	4618      	mov	r0, r3
 8005d50:	f001 fcfa 	bl	8007748 <HAL_RCC_OscConfig>
 8005d54:	4603      	mov	r3, r0
 8005d56:	2b00      	cmp	r3, #0
 8005d58:	d001      	beq.n	8005d5e <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005d5a:	f000 faff 	bl	800635c <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005d5e:	230f      	movs	r3, #15
 8005d60:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005d62:	2302      	movs	r3, #2
 8005d64:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005d66:	2300      	movs	r3, #0
 8005d68:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005d6a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d6e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8005d70:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005d74:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005d76:	f107 030c 	add.w	r3, r7, #12
 8005d7a:	2105      	movs	r1, #5
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	f001 ff5b 	bl	8007c38 <HAL_RCC_ClockConfig>
 8005d82:	4603      	mov	r3, r0
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d001      	beq.n	8005d8c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005d88:	f000 fae8 	bl	800635c <Error_Handler>
  }
}
 8005d8c:	bf00      	nop
 8005d8e:	3750      	adds	r7, #80	; 0x50
 8005d90:	46bd      	mov	sp, r7
 8005d92:	bd80      	pop	{r7, pc}
 8005d94:	40023800 	.word	0x40023800
 8005d98:	40007000 	.word	0x40007000

08005d9c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005da0:	2200      	movs	r2, #0
 8005da2:	2100      	movs	r1, #0
 8005da4:	2047      	movs	r0, #71	; 0x47
 8005da6:	f000 ff36 	bl	8006c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005daa:	2047      	movs	r0, #71	; 0x47
 8005dac:	f000 ff4f 	bl	8006c4e <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005db0:	2200      	movs	r2, #0
 8005db2:	2101      	movs	r1, #1
 8005db4:	2027      	movs	r0, #39	; 0x27
 8005db6:	f000 ff2e 	bl	8006c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005dba:	2027      	movs	r0, #39	; 0x27
 8005dbc:	f000 ff47 	bl	8006c4e <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8005dc0:	2200      	movs	r2, #0
 8005dc2:	2102      	movs	r1, #2
 8005dc4:	201d      	movs	r0, #29
 8005dc6:	f000 ff26 	bl	8006c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005dca:	201d      	movs	r0, #29
 8005dcc:	f000 ff3f 	bl	8006c4e <HAL_NVIC_EnableIRQ>
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 4, 0);
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2104      	movs	r1, #4
 8005dd4:	2035      	movs	r0, #53	; 0x35
 8005dd6:	f000 ff1e 	bl	8006c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005dda:	2035      	movs	r0, #53	; 0x35
 8005ddc:	f000 ff37 	bl	8006c4e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8005de0:	2200      	movs	r2, #0
 8005de2:	2103      	movs	r1, #3
 8005de4:	201c      	movs	r0, #28
 8005de6:	f000 ff16 	bl	8006c16 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005dea:	201c      	movs	r0, #28
 8005dec:	f000 ff2f 	bl	8006c4e <HAL_NVIC_EnableIRQ>
}
 8005df0:	bf00      	nop
 8005df2:	bd80      	pop	{r7, pc}

08005df4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005df4:	b580      	push	{r7, lr}
 8005df6:	b08a      	sub	sp, #40	; 0x28
 8005df8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005dfa:	f107 0318 	add.w	r3, r7, #24
 8005dfe:	2200      	movs	r2, #0
 8005e00:	601a      	str	r2, [r3, #0]
 8005e02:	605a      	str	r2, [r3, #4]
 8005e04:	609a      	str	r2, [r3, #8]
 8005e06:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e08:	f107 0310 	add.w	r3, r7, #16
 8005e0c:	2200      	movs	r2, #0
 8005e0e:	601a      	str	r2, [r3, #0]
 8005e10:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005e12:	463b      	mov	r3, r7
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005e1e:	4b31      	ldr	r3, [pc, #196]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e20:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005e24:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8005e26:	4b2f      	ldr	r3, [pc, #188]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e28:	220a      	movs	r2, #10
 8005e2a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005e2c:	4b2d      	ldr	r3, [pc, #180]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e2e:	2200      	movs	r2, #0
 8005e30:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8005e32:	4b2c      	ldr	r3, [pc, #176]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e34:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8005e38:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005e3a:	4b2a      	ldr	r3, [pc, #168]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e3c:	2200      	movs	r2, #0
 8005e3e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005e40:	4b28      	ldr	r3, [pc, #160]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e42:	2280      	movs	r2, #128	; 0x80
 8005e44:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005e46:	4827      	ldr	r0, [pc, #156]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e48:	f002 f8d6 	bl	8007ff8 <HAL_TIM_Base_Init>
 8005e4c:	4603      	mov	r3, r0
 8005e4e:	2b00      	cmp	r3, #0
 8005e50:	d001      	beq.n	8005e56 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8005e52:	f000 fa83 	bl	800635c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005e56:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e5a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005e5c:	f107 0318 	add.w	r3, r7, #24
 8005e60:	4619      	mov	r1, r3
 8005e62:	4820      	ldr	r0, [pc, #128]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e64:	f002 fbb4 	bl	80085d0 <HAL_TIM_ConfigClockSource>
 8005e68:	4603      	mov	r3, r0
 8005e6a:	2b00      	cmp	r3, #0
 8005e6c:	d001      	beq.n	8005e72 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005e6e:	f000 fa75 	bl	800635c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005e72:	481c      	ldr	r0, [pc, #112]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e74:	f002 f9af 	bl	80081d6 <HAL_TIM_IC_Init>
 8005e78:	4603      	mov	r3, r0
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d001      	beq.n	8005e82 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005e7e:	f000 fa6d 	bl	800635c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005e82:	2320      	movs	r3, #32
 8005e84:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005e86:	2300      	movs	r3, #0
 8005e88:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005e8a:	f107 0310 	add.w	r3, r7, #16
 8005e8e:	4619      	mov	r1, r3
 8005e90:	4814      	ldr	r0, [pc, #80]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005e92:	f002 fef1 	bl	8008c78 <HAL_TIMEx_MasterConfigSynchronization>
 8005e96:	4603      	mov	r3, r0
 8005e98:	2b00      	cmp	r3, #0
 8005e9a:	d001      	beq.n	8005ea0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8005e9c:	f000 fa5e 	bl	800635c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005ea0:	2300      	movs	r3, #0
 8005ea2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005ea4:	2301      	movs	r3, #1
 8005ea6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005eac:	2300      	movs	r3, #0
 8005eae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005eb0:	463b      	mov	r3, r7
 8005eb2:	2200      	movs	r2, #0
 8005eb4:	4619      	mov	r1, r3
 8005eb6:	480b      	ldr	r0, [pc, #44]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005eb8:	f002 faee 	bl	8008498 <HAL_TIM_IC_ConfigChannel>
 8005ebc:	4603      	mov	r3, r0
 8005ebe:	2b00      	cmp	r3, #0
 8005ec0:	d001      	beq.n	8005ec6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8005ec2:	f000 fa4b 	bl	800635c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005ec6:	463b      	mov	r3, r7
 8005ec8:	2204      	movs	r2, #4
 8005eca:	4619      	mov	r1, r3
 8005ecc:	4805      	ldr	r0, [pc, #20]	; (8005ee4 <MX_TIM2_Init+0xf0>)
 8005ece:	f002 fae3 	bl	8008498 <HAL_TIM_IC_ConfigChannel>
 8005ed2:	4603      	mov	r3, r0
 8005ed4:	2b00      	cmp	r3, #0
 8005ed6:	d001      	beq.n	8005edc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8005ed8:	f000 fa40 	bl	800635c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005edc:	bf00      	nop
 8005ede:	3728      	adds	r7, #40	; 0x28
 8005ee0:	46bd      	mov	sp, r7
 8005ee2:	bd80      	pop	{r7, pc}
 8005ee4:	20000224 	.word	0x20000224

08005ee8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005ee8:	b580      	push	{r7, lr}
 8005eea:	b086      	sub	sp, #24
 8005eec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005eee:	f107 0308 	add.w	r3, r7, #8
 8005ef2:	2200      	movs	r2, #0
 8005ef4:	601a      	str	r2, [r3, #0]
 8005ef6:	605a      	str	r2, [r3, #4]
 8005ef8:	609a      	str	r2, [r3, #8]
 8005efa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005efc:	463b      	mov	r3, r7
 8005efe:	2200      	movs	r2, #0
 8005f00:	601a      	str	r2, [r3, #0]
 8005f02:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005f04:	4b1c      	ldr	r3, [pc, #112]	; (8005f78 <MX_TIM3_Init+0x90>)
 8005f06:	4a1d      	ldr	r2, [pc, #116]	; (8005f7c <MX_TIM3_Init+0x94>)
 8005f08:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8005f0a:	4b1b      	ldr	r3, [pc, #108]	; (8005f78 <MX_TIM3_Init+0x90>)
 8005f0c:	2201      	movs	r2, #1
 8005f0e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f10:	4b19      	ldr	r3, [pc, #100]	; (8005f78 <MX_TIM3_Init+0x90>)
 8005f12:	2200      	movs	r2, #0
 8005f14:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168;
 8005f16:	4b18      	ldr	r3, [pc, #96]	; (8005f78 <MX_TIM3_Init+0x90>)
 8005f18:	22a8      	movs	r2, #168	; 0xa8
 8005f1a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005f1c:	4b16      	ldr	r3, [pc, #88]	; (8005f78 <MX_TIM3_Init+0x90>)
 8005f1e:	2200      	movs	r2, #0
 8005f20:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005f22:	4b15      	ldr	r3, [pc, #84]	; (8005f78 <MX_TIM3_Init+0x90>)
 8005f24:	2200      	movs	r2, #0
 8005f26:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005f28:	4813      	ldr	r0, [pc, #76]	; (8005f78 <MX_TIM3_Init+0x90>)
 8005f2a:	f002 f865 	bl	8007ff8 <HAL_TIM_Base_Init>
 8005f2e:	4603      	mov	r3, r0
 8005f30:	2b00      	cmp	r3, #0
 8005f32:	d001      	beq.n	8005f38 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8005f34:	f000 fa12 	bl	800635c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005f38:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005f3c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005f3e:	f107 0308 	add.w	r3, r7, #8
 8005f42:	4619      	mov	r1, r3
 8005f44:	480c      	ldr	r0, [pc, #48]	; (8005f78 <MX_TIM3_Init+0x90>)
 8005f46:	f002 fb43 	bl	80085d0 <HAL_TIM_ConfigClockSource>
 8005f4a:	4603      	mov	r3, r0
 8005f4c:	2b00      	cmp	r3, #0
 8005f4e:	d001      	beq.n	8005f54 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8005f50:	f000 fa04 	bl	800635c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005f54:	2300      	movs	r3, #0
 8005f56:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005f5c:	463b      	mov	r3, r7
 8005f5e:	4619      	mov	r1, r3
 8005f60:	4805      	ldr	r0, [pc, #20]	; (8005f78 <MX_TIM3_Init+0x90>)
 8005f62:	f002 fe89 	bl	8008c78 <HAL_TIMEx_MasterConfigSynchronization>
 8005f66:	4603      	mov	r3, r0
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d001      	beq.n	8005f70 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8005f6c:	f000 f9f6 	bl	800635c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005f70:	bf00      	nop
 8005f72:	3718      	adds	r7, #24
 8005f74:	46bd      	mov	sp, r7
 8005f76:	bd80      	pop	{r7, pc}
 8005f78:	2000026c 	.word	0x2000026c
 8005f7c:	40000400 	.word	0x40000400

08005f80 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005f80:	b580      	push	{r7, lr}
 8005f82:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005f84:	4b11      	ldr	r3, [pc, #68]	; (8005fcc <MX_UART5_Init+0x4c>)
 8005f86:	4a12      	ldr	r2, [pc, #72]	; (8005fd0 <MX_UART5_Init+0x50>)
 8005f88:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8005f8a:	4b10      	ldr	r3, [pc, #64]	; (8005fcc <MX_UART5_Init+0x4c>)
 8005f8c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005f90:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005f92:	4b0e      	ldr	r3, [pc, #56]	; (8005fcc <MX_UART5_Init+0x4c>)
 8005f94:	2200      	movs	r2, #0
 8005f96:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005f98:	4b0c      	ldr	r3, [pc, #48]	; (8005fcc <MX_UART5_Init+0x4c>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8005f9e:	4b0b      	ldr	r3, [pc, #44]	; (8005fcc <MX_UART5_Init+0x4c>)
 8005fa0:	2200      	movs	r2, #0
 8005fa2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005fa4:	4b09      	ldr	r3, [pc, #36]	; (8005fcc <MX_UART5_Init+0x4c>)
 8005fa6:	220c      	movs	r2, #12
 8005fa8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005faa:	4b08      	ldr	r3, [pc, #32]	; (8005fcc <MX_UART5_Init+0x4c>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005fb0:	4b06      	ldr	r3, [pc, #24]	; (8005fcc <MX_UART5_Init+0x4c>)
 8005fb2:	2200      	movs	r2, #0
 8005fb4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005fb6:	4805      	ldr	r0, [pc, #20]	; (8005fcc <MX_UART5_Init+0x4c>)
 8005fb8:	f002 feee 	bl	8008d98 <HAL_UART_Init>
 8005fbc:	4603      	mov	r3, r0
 8005fbe:	2b00      	cmp	r3, #0
 8005fc0:	d001      	beq.n	8005fc6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005fc2:	f000 f9cb 	bl	800635c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005fc6:	bf00      	nop
 8005fc8:	bd80      	pop	{r7, pc}
 8005fca:	bf00      	nop
 8005fcc:	200002b4 	.word	0x200002b4
 8005fd0:	40005000 	.word	0x40005000

08005fd4 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005fd8:	4b11      	ldr	r3, [pc, #68]	; (8006020 <MX_USART3_UART_Init+0x4c>)
 8005fda:	4a12      	ldr	r2, [pc, #72]	; (8006024 <MX_USART3_UART_Init+0x50>)
 8005fdc:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8005fde:	4b10      	ldr	r3, [pc, #64]	; (8006020 <MX_USART3_UART_Init+0x4c>)
 8005fe0:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005fe4:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005fe6:	4b0e      	ldr	r3, [pc, #56]	; (8006020 <MX_USART3_UART_Init+0x4c>)
 8005fe8:	2200      	movs	r2, #0
 8005fea:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8005fec:	4b0c      	ldr	r3, [pc, #48]	; (8006020 <MX_USART3_UART_Init+0x4c>)
 8005fee:	2200      	movs	r2, #0
 8005ff0:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005ff2:	4b0b      	ldr	r3, [pc, #44]	; (8006020 <MX_USART3_UART_Init+0x4c>)
 8005ff4:	2200      	movs	r2, #0
 8005ff6:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005ff8:	4b09      	ldr	r3, [pc, #36]	; (8006020 <MX_USART3_UART_Init+0x4c>)
 8005ffa:	220c      	movs	r2, #12
 8005ffc:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8005ffe:	4b08      	ldr	r3, [pc, #32]	; (8006020 <MX_USART3_UART_Init+0x4c>)
 8006000:	2200      	movs	r2, #0
 8006002:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8006004:	4b06      	ldr	r3, [pc, #24]	; (8006020 <MX_USART3_UART_Init+0x4c>)
 8006006:	2200      	movs	r2, #0
 8006008:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800600a:	4805      	ldr	r0, [pc, #20]	; (8006020 <MX_USART3_UART_Init+0x4c>)
 800600c:	f002 fec4 	bl	8008d98 <HAL_UART_Init>
 8006010:	4603      	mov	r3, r0
 8006012:	2b00      	cmp	r3, #0
 8006014:	d001      	beq.n	800601a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8006016:	f000 f9a1 	bl	800635c <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800601a:	bf00      	nop
 800601c:	bd80      	pop	{r7, pc}
 800601e:	bf00      	nop
 8006020:	200002f8 	.word	0x200002f8
 8006024:	40004800 	.word	0x40004800

08006028 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800602c:	4b11      	ldr	r3, [pc, #68]	; (8006074 <MX_USART6_UART_Init+0x4c>)
 800602e:	4a12      	ldr	r2, [pc, #72]	; (8006078 <MX_USART6_UART_Init+0x50>)
 8006030:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8006032:	4b10      	ldr	r3, [pc, #64]	; (8006074 <MX_USART6_UART_Init+0x4c>)
 8006034:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006038:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800603a:	4b0e      	ldr	r3, [pc, #56]	; (8006074 <MX_USART6_UART_Init+0x4c>)
 800603c:	2200      	movs	r2, #0
 800603e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006040:	4b0c      	ldr	r3, [pc, #48]	; (8006074 <MX_USART6_UART_Init+0x4c>)
 8006042:	2200      	movs	r2, #0
 8006044:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006046:	4b0b      	ldr	r3, [pc, #44]	; (8006074 <MX_USART6_UART_Init+0x4c>)
 8006048:	2200      	movs	r2, #0
 800604a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800604c:	4b09      	ldr	r3, [pc, #36]	; (8006074 <MX_USART6_UART_Init+0x4c>)
 800604e:	220c      	movs	r2, #12
 8006050:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006052:	4b08      	ldr	r3, [pc, #32]	; (8006074 <MX_USART6_UART_Init+0x4c>)
 8006054:	2200      	movs	r2, #0
 8006056:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006058:	4b06      	ldr	r3, [pc, #24]	; (8006074 <MX_USART6_UART_Init+0x4c>)
 800605a:	2200      	movs	r2, #0
 800605c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800605e:	4805      	ldr	r0, [pc, #20]	; (8006074 <MX_USART6_UART_Init+0x4c>)
 8006060:	f002 fe9a 	bl	8008d98 <HAL_UART_Init>
 8006064:	4603      	mov	r3, r0
 8006066:	2b00      	cmp	r3, #0
 8006068:	d001      	beq.n	800606e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800606a:	f000 f977 	bl	800635c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800606e:	bf00      	nop
 8006070:	bd80      	pop	{r7, pc}
 8006072:	bf00      	nop
 8006074:	2000033c 	.word	0x2000033c
 8006078:	40011400 	.word	0x40011400

0800607c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800607c:	b580      	push	{r7, lr}
 800607e:	b08c      	sub	sp, #48	; 0x30
 8006080:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006082:	f107 031c 	add.w	r3, r7, #28
 8006086:	2200      	movs	r2, #0
 8006088:	601a      	str	r2, [r3, #0]
 800608a:	605a      	str	r2, [r3, #4]
 800608c:	609a      	str	r2, [r3, #8]
 800608e:	60da      	str	r2, [r3, #12]
 8006090:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006092:	2300      	movs	r3, #0
 8006094:	61bb      	str	r3, [r7, #24]
 8006096:	4bab      	ldr	r3, [pc, #684]	; (8006344 <MX_GPIO_Init+0x2c8>)
 8006098:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800609a:	4aaa      	ldr	r2, [pc, #680]	; (8006344 <MX_GPIO_Init+0x2c8>)
 800609c:	f043 0310 	orr.w	r3, r3, #16
 80060a0:	6313      	str	r3, [r2, #48]	; 0x30
 80060a2:	4ba8      	ldr	r3, [pc, #672]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060a6:	f003 0310 	and.w	r3, r3, #16
 80060aa:	61bb      	str	r3, [r7, #24]
 80060ac:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80060ae:	2300      	movs	r3, #0
 80060b0:	617b      	str	r3, [r7, #20]
 80060b2:	4ba4      	ldr	r3, [pc, #656]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060b6:	4aa3      	ldr	r2, [pc, #652]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060b8:	f043 0304 	orr.w	r3, r3, #4
 80060bc:	6313      	str	r3, [r2, #48]	; 0x30
 80060be:	4ba1      	ldr	r3, [pc, #644]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060c2:	f003 0304 	and.w	r3, r3, #4
 80060c6:	617b      	str	r3, [r7, #20]
 80060c8:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80060ca:	2300      	movs	r3, #0
 80060cc:	613b      	str	r3, [r7, #16]
 80060ce:	4b9d      	ldr	r3, [pc, #628]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060d2:	4a9c      	ldr	r2, [pc, #624]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80060d8:	6313      	str	r3, [r2, #48]	; 0x30
 80060da:	4b9a      	ldr	r3, [pc, #616]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060de:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80060e2:	613b      	str	r3, [r7, #16]
 80060e4:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80060e6:	2300      	movs	r3, #0
 80060e8:	60fb      	str	r3, [r7, #12]
 80060ea:	4b96      	ldr	r3, [pc, #600]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060ee:	4a95      	ldr	r2, [pc, #596]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060f0:	f043 0301 	orr.w	r3, r3, #1
 80060f4:	6313      	str	r3, [r2, #48]	; 0x30
 80060f6:	4b93      	ldr	r3, [pc, #588]	; (8006344 <MX_GPIO_Init+0x2c8>)
 80060f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80060fa:	f003 0301 	and.w	r3, r3, #1
 80060fe:	60fb      	str	r3, [r7, #12]
 8006100:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006102:	2300      	movs	r3, #0
 8006104:	60bb      	str	r3, [r7, #8]
 8006106:	4b8f      	ldr	r3, [pc, #572]	; (8006344 <MX_GPIO_Init+0x2c8>)
 8006108:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800610a:	4a8e      	ldr	r2, [pc, #568]	; (8006344 <MX_GPIO_Init+0x2c8>)
 800610c:	f043 0302 	orr.w	r3, r3, #2
 8006110:	6313      	str	r3, [r2, #48]	; 0x30
 8006112:	4b8c      	ldr	r3, [pc, #560]	; (8006344 <MX_GPIO_Init+0x2c8>)
 8006114:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006116:	f003 0302 	and.w	r3, r3, #2
 800611a:	60bb      	str	r3, [r7, #8]
 800611c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 800611e:	2300      	movs	r3, #0
 8006120:	607b      	str	r3, [r7, #4]
 8006122:	4b88      	ldr	r3, [pc, #544]	; (8006344 <MX_GPIO_Init+0x2c8>)
 8006124:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006126:	4a87      	ldr	r2, [pc, #540]	; (8006344 <MX_GPIO_Init+0x2c8>)
 8006128:	f043 0308 	orr.w	r3, r3, #8
 800612c:	6313      	str	r3, [r2, #48]	; 0x30
 800612e:	4b85      	ldr	r3, [pc, #532]	; (8006344 <MX_GPIO_Init+0x2c8>)
 8006130:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006132:	f003 0308 	and.w	r3, r3, #8
 8006136:	607b      	str	r3, [r7, #4]
 8006138:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE4_ZIGBEE_PA_EN_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin|Speed1_not_PE13_41_Pin
 800613a:	2200      	movs	r2, #0
 800613c:	f24a 3113 	movw	r1, #41747	; 0xa313
 8006140:	4881      	ldr	r0, [pc, #516]	; (8006348 <MX_GPIO_Init+0x2cc>)
 8006142:	f001 facd 	bl	80076e0 <HAL_GPIO_WritePin>
                          |PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_ZIGBEE_nRST_Pin|PC8_PR_Pin|PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin, GPIO_PIN_RESET);
 8006146:	2200      	movs	r2, #0
 8006148:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 800614c:	487f      	ldr	r0, [pc, #508]	; (800634c <MX_GPIO_Init+0x2d0>)
 800614e:	f001 fac7 	bl	80076e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8006152:	2200      	movs	r2, #0
 8006154:	f649 5108 	movw	r1, #40200	; 0x9d08
 8006158:	487d      	ldr	r0, [pc, #500]	; (8006350 <MX_GPIO_Init+0x2d4>)
 800615a:	f001 fac1 	bl	80076e0 <HAL_GPIO_WritePin>
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin, GPIO_PIN_SET);
 800615e:	2201      	movs	r2, #1
 8006160:	2130      	movs	r1, #48	; 0x30
 8006162:	487a      	ldr	r0, [pc, #488]	; (800634c <MX_GPIO_Init+0x2d0>)
 8006164:	f001 fabc 	bl	80076e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EStop_Not_PB0_17_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin|PB14_POS_CMD_OPC_EN_Pin
 8006168:	2200      	movs	r2, #0
 800616a:	f246 0165 	movw	r1, #24677	; 0x6065
 800616e:	4879      	ldr	r0, [pc, #484]	; (8006354 <MX_GPIO_Init+0x2d8>)
 8006170:	f001 fab6 	bl	80076e0 <HAL_GPIO_WritePin>
                          |PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ArlarmRST_PB1_42_Pin|PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);
 8006174:	2201      	movs	r2, #1
 8006176:	f248 0102 	movw	r1, #32770	; 0x8002
 800617a:	4876      	ldr	r0, [pc, #472]	; (8006354 <MX_GPIO_Init+0x2d8>)
 800617c:	f001 fab0 	bl	80076e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Speed2_Not_PE7_15_Pin|Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin
 8006180:	2201      	movs	r2, #1
 8006182:	f44f 41b9 	mov.w	r1, #23680	; 0x5c80
 8006186:	4870      	ldr	r0, [pc, #448]	; (8006348 <MX_GPIO_Init+0x2cc>)
 8006188:	f001 faaa 	bl	80076e0 <HAL_GPIO_WritePin>
                          |CWLIM_Not_PE14_13_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD10_ESP32_EN_GPIO_Port, PD10_ESP32_EN_Pin, GPIO_PIN_SET);
 800618c:	2201      	movs	r2, #1
 800618e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006192:	4871      	ldr	r0, [pc, #452]	; (8006358 <MX_GPIO_Init+0x2dc>)
 8006194:	f001 faa4 	bl	80076e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin, GPIO_PIN_RESET);
 8006198:	2200      	movs	r2, #0
 800619a:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800619e:	486e      	ldr	r0, [pc, #440]	; (8006358 <MX_GPIO_Init+0x2dc>)
 80061a0:	f001 fa9e 	bl	80076e0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN1_22_RDY_Pin CN1_21_SPDOUT_TRQOUT_Pin PE5_BLE_GPIO_Pin CN1_48_BRAKE_Pin */
  GPIO_InitStruct.Pin = CN1_22_RDY_Pin|CN1_21_SPDOUT_TRQOUT_Pin|PE5_BLE_GPIO_Pin|CN1_48_BRAKE_Pin;
 80061a4:	236c      	movs	r3, #108	; 0x6c
 80061a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061a8:	2300      	movs	r3, #0
 80061aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061ac:	2300      	movs	r3, #0
 80061ae:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80061b0:	f107 031c 	add.w	r3, r7, #28
 80061b4:	4619      	mov	r1, r3
 80061b6:	4864      	ldr	r0, [pc, #400]	; (8006348 <MX_GPIO_Init+0x2cc>)
 80061b8:	f001 f8de 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4_ZIGBEE_PA_EN_Pin Speed2_Not_PE7_15_Pin Type_Not_PE8_40_Pin PE9_TIM1_CH1_PFIN_Pin
                           Dir_Not_PE10_14_Pin SPDLIM_Not_PE11_38_Pin CCWLIM_Not_PE12_39_Pin Speed1_not_PE13_41_Pin
                           CWLIM_Not_PE14_13_Pin PE15_RELAY1_Pin PE0_485_MCU_DRV_DIR_Pin PE1_ZIGBEE_EN_Pin */
  GPIO_InitStruct.Pin = PE4_ZIGBEE_PA_EN_Pin|Speed2_Not_PE7_15_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin
 80061bc:	f64f 7393 	movw	r3, #65427	; 0xff93
 80061c0:	61fb      	str	r3, [r7, #28]
                          |Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin|Speed1_not_PE13_41_Pin
                          |CWLIM_Not_PE14_13_Pin|PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061c2:	2301      	movs	r3, #1
 80061c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061c6:	2300      	movs	r3, #0
 80061c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80061ca:	2300      	movs	r3, #0
 80061cc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 80061ce:	f107 031c 	add.w	r3, r7, #28
 80061d2:	4619      	mov	r1, r3
 80061d4:	485c      	ldr	r0, [pc, #368]	; (8006348 <MX_GPIO_Init+0x2cc>)
 80061d6:	f001 f8cf 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_USER_BT_MID_Pin CN1_46_ALARM_Pin CN1_47_INSPD_INPOS_Pin CN1_45_NCWOUT_NTQOUT_Pin */
  GPIO_InitStruct.Pin = PC13_USER_BT_MID_Pin|CN1_46_ALARM_Pin|CN1_47_INSPD_INPOS_Pin|CN1_45_NCWOUT_NTQOUT_Pin;
 80061da:	f242 0307 	movw	r3, #8199	; 0x2007
 80061de:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80061e0:	2300      	movs	r3, #0
 80061e2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061e4:	2300      	movs	r3, #0
 80061e6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80061e8:	f107 031c 	add.w	r3, r7, #28
 80061ec:	4619      	mov	r1, r3
 80061ee:	4857      	ldr	r0, [pc, #348]	; (800634c <MX_GPIO_Init+0x2d0>)
 80061f0:	f001 f8c2 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_ZIGBEE_nRST_Pin SerVoReset_PC4_18_Pin Stop_PC5_43_Pin PC8_PR_Pin
                           PC9_ZIGBEE_HGM_EN_Pin PC10_SPI3_SCK_SPARE_Pin */
  GPIO_InitStruct.Pin = PC3_ZIGBEE_nRST_Pin|SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin|PC8_PR_Pin
 80061f4:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 80061f8:	61fb      	str	r3, [r7, #28]
                          |PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80061fa:	2301      	movs	r3, #1
 80061fc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80061fe:	2300      	movs	r3, #0
 8006200:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006202:	2300      	movs	r3, #0
 8006204:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006206:	f107 031c 	add.w	r3, r7, #28
 800620a:	4619      	mov	r1, r3
 800620c:	484f      	ldr	r0, [pc, #316]	; (800634c <MX_GPIO_Init+0x2d0>)
 800620e:	f001 f8b3 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_UART4_TX_ESP32_RX_Pin */
  GPIO_InitStruct.Pin = PA0_UART4_TX_ESP32_RX_Pin;
 8006212:	2301      	movs	r3, #1
 8006214:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006216:	2302      	movs	r3, #2
 8006218:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800621a:	2300      	movs	r3, #0
 800621c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800621e:	2303      	movs	r3, #3
 8006220:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8006222:	2308      	movs	r3, #8
 8006224:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PA0_UART4_TX_ESP32_RX_GPIO_Port, &GPIO_InitStruct);
 8006226:	f107 031c 	add.w	r3, r7, #28
 800622a:	4619      	mov	r1, r3
 800622c:	4848      	ldr	r0, [pc, #288]	; (8006350 <MX_GPIO_Init+0x2d4>)
 800622e:	f001 f8a3 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_USER_BT_UP_Pin CN1_20_PCWOUT_PTQOUT_Pin CN1_23_TYPEOUT_Pin PA9_LINE_RECV_SELFTEST_Pin */
  GPIO_InitStruct.Pin = PA2_USER_BT_UP_Pin|CN1_20_PCWOUT_PTQOUT_Pin|CN1_23_TYPEOUT_Pin|PA9_LINE_RECV_SELFTEST_Pin;
 8006232:	f44f 7325 	mov.w	r3, #660	; 0x294
 8006236:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006238:	2300      	movs	r3, #0
 800623a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800623c:	2300      	movs	r3, #0
 800623e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006240:	f107 031c 	add.w	r3, r7, #28
 8006244:	4619      	mov	r1, r3
 8006246:	4842      	ldr	r0, [pc, #264]	; (8006350 <MX_GPIO_Init+0x2d4>)
 8006248:	f001 f896 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_LCD_RST_Pin PA8_LINE_DRV_SELFTEST2_Pin PA10_LINE_DRV_SELFTEST1_Pin PA11_ENC_RECEIV_EN_Pin
                           PA12_LINE_DRV_EN_Pin PA15_SPI3_NSS_SPARE_Pin */
  GPIO_InitStruct.Pin = PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 800624c:	f649 5308 	movw	r3, #40200	; 0x9d08
 8006250:	61fb      	str	r3, [r7, #28]
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006252:	2301      	movs	r3, #1
 8006254:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006256:	2300      	movs	r3, #0
 8006258:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800625a:	2300      	movs	r3, #0
 800625c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800625e:	f107 031c 	add.w	r3, r7, #28
 8006262:	4619      	mov	r1, r3
 8006264:	483a      	ldr	r0, [pc, #232]	; (8006350 <MX_GPIO_Init+0x2d4>)
 8006266:	f001 f887 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : EStop_Not_PB0_17_Pin ArlarmRST_PB1_42_Pin Tor1_PB2_16_Pin PB13_Output_JP7_Pin
                           PB14_POS_CMD_OPC_EN_Pin PB15_485_MCU_PC_DIR_Pin PB5_SPI3_MOSI_SPARE_Pin PB6_RELAY2_Pin */
  GPIO_InitStruct.Pin = EStop_Not_PB0_17_Pin|ArlarmRST_PB1_42_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin
 800626a:	f24e 0367 	movw	r3, #57447	; 0xe067
 800626e:	61fb      	str	r3, [r7, #28]
                          |PB14_POS_CMD_OPC_EN_Pin|PB15_485_MCU_PC_DIR_Pin|PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006270:	2301      	movs	r3, #1
 8006272:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006274:	2300      	movs	r3, #0
 8006276:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006278:	2300      	movs	r3, #0
 800627a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800627c:	f107 031c 	add.w	r3, r7, #28
 8006280:	4619      	mov	r1, r3
 8006282:	4834      	ldr	r0, [pc, #208]	; (8006354 <MX_GPIO_Init+0x2d8>)
 8006284:	f001 f878 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10_I2C2_SCL_LCD_IOEXP_Pin PB11_I2C2_SDA_LCD_IOEXP_Pin */
  GPIO_InitStruct.Pin = PB10_I2C2_SCL_LCD_IOEXP_Pin|PB11_I2C2_SDA_LCD_IOEXP_Pin;
 8006288:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 800628c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800628e:	2312      	movs	r3, #18
 8006290:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006292:	2301      	movs	r3, #1
 8006294:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006296:	2303      	movs	r3, #3
 8006298:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 800629a:	2304      	movs	r3, #4
 800629c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800629e:	f107 031c 	add.w	r3, r7, #28
 80062a2:	4619      	mov	r1, r3
 80062a4:	482b      	ldr	r0, [pc, #172]	; (8006354 <MX_GPIO_Init+0x2d8>)
 80062a6:	f001 f867 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_RELAY3_Pin CN1_19_ZSPD_Pin PB4_SPI3_MISO_SPARE_Pin Input_JP7_Pin */
  GPIO_InitStruct.Pin = PB12_RELAY3_Pin|CN1_19_ZSPD_Pin|PB4_SPI3_MISO_SPARE_Pin|Input_JP7_Pin;
 80062aa:	f241 2318 	movw	r3, #4632	; 0x1218
 80062ae:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062b0:	2300      	movs	r3, #0
 80062b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062b4:	2300      	movs	r3, #0
 80062b6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80062b8:	f107 031c 	add.w	r3, r7, #28
 80062bc:	4619      	mov	r1, r3
 80062be:	4825      	ldr	r0, [pc, #148]	; (8006354 <MX_GPIO_Init+0x2d8>)
 80062c0:	f001 f85a 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10_ESP32_EN_Pin */
  GPIO_InitStruct.Pin = PD10_ESP32_EN_Pin;
 80062c4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80062c8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80062ca:	2311      	movs	r3, #17
 80062cc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ce:	2300      	movs	r3, #0
 80062d0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062d2:	2300      	movs	r3, #0
 80062d4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD10_ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 80062d6:	f107 031c 	add.w	r3, r7, #28
 80062da:	4619      	mov	r1, r3
 80062dc:	481e      	ldr	r0, [pc, #120]	; (8006358 <MX_GPIO_Init+0x2dc>)
 80062de:	f001 f84b 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_ESP32_BOOT_SEL_Pin PD13_MON1_2_EN_Pin PD15_SPDIN_TRQIN_EN_Pin */
  GPIO_InitStruct.Pin = PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin;
 80062e2:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 80062e6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062e8:	2301      	movs	r3, #1
 80062ea:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062ec:	2300      	movs	r3, #0
 80062ee:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062f0:	2300      	movs	r3, #0
 80062f2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80062f4:	f107 031c 	add.w	r3, r7, #28
 80062f8:	4619      	mov	r1, r3
 80062fa:	4817      	ldr	r0, [pc, #92]	; (8006358 <MX_GPIO_Init+0x2dc>)
 80062fc:	f001 f83c 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12_Input_J6_Pin PD14_Input_J6_Pin Input0_J6_DAC_ADC_Pin Input1_J6_DAC_ADC_Pin
                           PD7_A_CODE2_Pin */
  GPIO_InitStruct.Pin = PD12_Input_J6_Pin|PD14_Input_J6_Pin|Input0_J6_DAC_ADC_Pin|Input1_J6_DAC_ADC_Pin
 8006300:	f245 0383 	movw	r3, #20611	; 0x5083
 8006304:	61fb      	str	r3, [r7, #28]
                          |PD7_A_CODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006306:	2300      	movs	r3, #0
 8006308:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800630a:	2300      	movs	r3, #0
 800630c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800630e:	f107 031c 	add.w	r3, r7, #28
 8006312:	4619      	mov	r1, r3
 8006314:	4810      	ldr	r0, [pc, #64]	; (8006358 <MX_GPIO_Init+0x2dc>)
 8006316:	f001 f82f 	bl	8007378 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_I2C1_SDA_DAC_ADC_Pin PB8_I2C1_SCL_DAC_ADC_Pin */
  GPIO_InitStruct.Pin = PB7_I2C1_SDA_DAC_ADC_Pin|PB8_I2C1_SCL_DAC_ADC_Pin;
 800631a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800631e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006320:	2312      	movs	r3, #18
 8006322:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006324:	2301      	movs	r3, #1
 8006326:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006328:	2303      	movs	r3, #3
 800632a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800632c:	2304      	movs	r3, #4
 800632e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006330:	f107 031c 	add.w	r3, r7, #28
 8006334:	4619      	mov	r1, r3
 8006336:	4807      	ldr	r0, [pc, #28]	; (8006354 <MX_GPIO_Init+0x2d8>)
 8006338:	f001 f81e 	bl	8007378 <HAL_GPIO_Init>

}
 800633c:	bf00      	nop
 800633e:	3730      	adds	r7, #48	; 0x30
 8006340:	46bd      	mov	sp, r7
 8006342:	bd80      	pop	{r7, pc}
 8006344:	40023800 	.word	0x40023800
 8006348:	40021000 	.word	0x40021000
 800634c:	40020800 	.word	0x40020800
 8006350:	40020000 	.word	0x40020000
 8006354:	40020400 	.word	0x40020400
 8006358:	40020c00 	.word	0x40020c00

0800635c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800635c:	b480      	push	{r7}
 800635e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8006360:	e7fe      	b.n	8006360 <Error_Handler+0x4>
	...

08006364 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8006364:	b480      	push	{r7}
 8006366:	b083      	sub	sp, #12
 8006368:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800636a:	2300      	movs	r3, #0
 800636c:	607b      	str	r3, [r7, #4]
 800636e:	4b10      	ldr	r3, [pc, #64]	; (80063b0 <HAL_MspInit+0x4c>)
 8006370:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006372:	4a0f      	ldr	r2, [pc, #60]	; (80063b0 <HAL_MspInit+0x4c>)
 8006374:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006378:	6453      	str	r3, [r2, #68]	; 0x44
 800637a:	4b0d      	ldr	r3, [pc, #52]	; (80063b0 <HAL_MspInit+0x4c>)
 800637c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800637e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006382:	607b      	str	r3, [r7, #4]
 8006384:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8006386:	2300      	movs	r3, #0
 8006388:	603b      	str	r3, [r7, #0]
 800638a:	4b09      	ldr	r3, [pc, #36]	; (80063b0 <HAL_MspInit+0x4c>)
 800638c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800638e:	4a08      	ldr	r2, [pc, #32]	; (80063b0 <HAL_MspInit+0x4c>)
 8006390:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006394:	6413      	str	r3, [r2, #64]	; 0x40
 8006396:	4b06      	ldr	r3, [pc, #24]	; (80063b0 <HAL_MspInit+0x4c>)
 8006398:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800639a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800639e:	603b      	str	r3, [r7, #0]
 80063a0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80063a2:	bf00      	nop
 80063a4:	370c      	adds	r7, #12
 80063a6:	46bd      	mov	sp, r7
 80063a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063ac:	4770      	bx	lr
 80063ae:	bf00      	nop
 80063b0:	40023800 	.word	0x40023800

080063b4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80063b4:	b580      	push	{r7, lr}
 80063b6:	b08c      	sub	sp, #48	; 0x30
 80063b8:	af00      	add	r7, sp, #0
 80063ba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80063bc:	f107 031c 	add.w	r3, r7, #28
 80063c0:	2200      	movs	r2, #0
 80063c2:	601a      	str	r2, [r3, #0]
 80063c4:	605a      	str	r2, [r3, #4]
 80063c6:	609a      	str	r2, [r3, #8]
 80063c8:	60da      	str	r2, [r3, #12]
 80063ca:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063d4:	d12c      	bne.n	8006430 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80063d6:	2300      	movs	r3, #0
 80063d8:	61bb      	str	r3, [r7, #24]
 80063da:	4b30      	ldr	r3, [pc, #192]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 80063dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063de:	4a2f      	ldr	r2, [pc, #188]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 80063e0:	f043 0301 	orr.w	r3, r3, #1
 80063e4:	6413      	str	r3, [r2, #64]	; 0x40
 80063e6:	4b2d      	ldr	r3, [pc, #180]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 80063e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80063ea:	f003 0301 	and.w	r3, r3, #1
 80063ee:	61bb      	str	r3, [r7, #24]
 80063f0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	617b      	str	r3, [r7, #20]
 80063f6:	4b29      	ldr	r3, [pc, #164]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 80063f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80063fa:	4a28      	ldr	r2, [pc, #160]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 80063fc:	f043 0301 	orr.w	r3, r3, #1
 8006400:	6313      	str	r3, [r2, #48]	; 0x30
 8006402:	4b26      	ldr	r3, [pc, #152]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 8006404:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006406:	f003 0301 	and.w	r3, r3, #1
 800640a:	617b      	str	r3, [r7, #20]
 800640c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PA1_TIM2_CH2_ENC_PBO_Pin|PA5_TIM2_CH1_ENC_PAO_Pin;
 800640e:	2322      	movs	r3, #34	; 0x22
 8006410:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006412:	2302      	movs	r3, #2
 8006414:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006416:	2300      	movs	r3, #0
 8006418:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800641a:	2300      	movs	r3, #0
 800641c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800641e:	2301      	movs	r3, #1
 8006420:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006422:	f107 031c 	add.w	r3, r7, #28
 8006426:	4619      	mov	r1, r3
 8006428:	481d      	ldr	r0, [pc, #116]	; (80064a0 <HAL_TIM_Base_MspInit+0xec>)
 800642a:	f000 ffa5 	bl	8007378 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800642e:	e030      	b.n	8006492 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8006430:	687b      	ldr	r3, [r7, #4]
 8006432:	681b      	ldr	r3, [r3, #0]
 8006434:	4a1b      	ldr	r2, [pc, #108]	; (80064a4 <HAL_TIM_Base_MspInit+0xf0>)
 8006436:	4293      	cmp	r3, r2
 8006438:	d12b      	bne.n	8006492 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800643a:	2300      	movs	r3, #0
 800643c:	613b      	str	r3, [r7, #16]
 800643e:	4b17      	ldr	r3, [pc, #92]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 8006440:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006442:	4a16      	ldr	r2, [pc, #88]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 8006444:	f043 0302 	orr.w	r3, r3, #2
 8006448:	6413      	str	r3, [r2, #64]	; 0x40
 800644a:	4b14      	ldr	r3, [pc, #80]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 800644c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644e:	f003 0302 	and.w	r3, r3, #2
 8006452:	613b      	str	r3, [r7, #16]
 8006454:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8006456:	2300      	movs	r3, #0
 8006458:	60fb      	str	r3, [r7, #12]
 800645a:	4b10      	ldr	r3, [pc, #64]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 800645c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800645e:	4a0f      	ldr	r2, [pc, #60]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 8006460:	f043 0301 	orr.w	r3, r3, #1
 8006464:	6313      	str	r3, [r2, #48]	; 0x30
 8006466:	4b0d      	ldr	r3, [pc, #52]	; (800649c <HAL_TIM_Base_MspInit+0xe8>)
 8006468:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800646a:	f003 0301 	and.w	r3, r3, #1
 800646e:	60fb      	str	r3, [r7, #12]
 8006470:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PA6_TIM3_CH1_ENC_PZO_Pin;
 8006472:	2340      	movs	r3, #64	; 0x40
 8006474:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006476:	2302      	movs	r3, #2
 8006478:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800647a:	2300      	movs	r3, #0
 800647c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800647e:	2300      	movs	r3, #0
 8006480:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8006482:	2302      	movs	r3, #2
 8006484:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PA6_TIM3_CH1_ENC_PZO_GPIO_Port, &GPIO_InitStruct);
 8006486:	f107 031c 	add.w	r3, r7, #28
 800648a:	4619      	mov	r1, r3
 800648c:	4804      	ldr	r0, [pc, #16]	; (80064a0 <HAL_TIM_Base_MspInit+0xec>)
 800648e:	f000 ff73 	bl	8007378 <HAL_GPIO_Init>
}
 8006492:	bf00      	nop
 8006494:	3730      	adds	r7, #48	; 0x30
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	40023800 	.word	0x40023800
 80064a0:	40020000 	.word	0x40020000
 80064a4:	40000400 	.word	0x40000400

080064a8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80064a8:	b580      	push	{r7, lr}
 80064aa:	b08e      	sub	sp, #56	; 0x38
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80064b0:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80064b4:	2200      	movs	r2, #0
 80064b6:	601a      	str	r2, [r3, #0]
 80064b8:	605a      	str	r2, [r3, #4]
 80064ba:	609a      	str	r2, [r3, #8]
 80064bc:	60da      	str	r2, [r3, #12]
 80064be:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	4a5b      	ldr	r2, [pc, #364]	; (8006634 <HAL_UART_MspInit+0x18c>)
 80064c6:	4293      	cmp	r3, r2
 80064c8:	d14b      	bne.n	8006562 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 80064ca:	2300      	movs	r3, #0
 80064cc:	623b      	str	r3, [r7, #32]
 80064ce:	4b5a      	ldr	r3, [pc, #360]	; (8006638 <HAL_UART_MspInit+0x190>)
 80064d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d2:	4a59      	ldr	r2, [pc, #356]	; (8006638 <HAL_UART_MspInit+0x190>)
 80064d4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80064d8:	6413      	str	r3, [r2, #64]	; 0x40
 80064da:	4b57      	ldr	r3, [pc, #348]	; (8006638 <HAL_UART_MspInit+0x190>)
 80064dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064de:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80064e2:	623b      	str	r3, [r7, #32]
 80064e4:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 80064e6:	2300      	movs	r3, #0
 80064e8:	61fb      	str	r3, [r7, #28]
 80064ea:	4b53      	ldr	r3, [pc, #332]	; (8006638 <HAL_UART_MspInit+0x190>)
 80064ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064ee:	4a52      	ldr	r2, [pc, #328]	; (8006638 <HAL_UART_MspInit+0x190>)
 80064f0:	f043 0304 	orr.w	r3, r3, #4
 80064f4:	6313      	str	r3, [r2, #48]	; 0x30
 80064f6:	4b50      	ldr	r3, [pc, #320]	; (8006638 <HAL_UART_MspInit+0x190>)
 80064f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064fa:	f003 0304 	and.w	r3, r3, #4
 80064fe:	61fb      	str	r3, [r7, #28]
 8006500:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006502:	2300      	movs	r3, #0
 8006504:	61bb      	str	r3, [r7, #24]
 8006506:	4b4c      	ldr	r3, [pc, #304]	; (8006638 <HAL_UART_MspInit+0x190>)
 8006508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800650a:	4a4b      	ldr	r2, [pc, #300]	; (8006638 <HAL_UART_MspInit+0x190>)
 800650c:	f043 0308 	orr.w	r3, r3, #8
 8006510:	6313      	str	r3, [r2, #48]	; 0x30
 8006512:	4b49      	ldr	r3, [pc, #292]	; (8006638 <HAL_UART_MspInit+0x190>)
 8006514:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006516:	f003 0308 	and.w	r3, r3, #8
 800651a:	61bb      	str	r3, [r7, #24]
 800651c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = PC12_UART5_TX_485_MCU_DRV_Pin;
 800651e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006522:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006524:	2302      	movs	r3, #2
 8006526:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006528:	2300      	movs	r3, #0
 800652a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800652c:	2303      	movs	r3, #3
 800652e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006530:	2308      	movs	r3, #8
 8006532:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PC12_UART5_TX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8006534:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006538:	4619      	mov	r1, r3
 800653a:	4840      	ldr	r0, [pc, #256]	; (800663c <HAL_UART_MspInit+0x194>)
 800653c:	f000 ff1c 	bl	8007378 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD2_UART5_RX_485_MCU_DRV_Pin;
 8006540:	2304      	movs	r3, #4
 8006542:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006544:	2302      	movs	r3, #2
 8006546:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006548:	2300      	movs	r3, #0
 800654a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800654c:	2303      	movs	r3, #3
 800654e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8006550:	2308      	movs	r3, #8
 8006552:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PD2_UART5_RX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8006554:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006558:	4619      	mov	r1, r3
 800655a:	4839      	ldr	r0, [pc, #228]	; (8006640 <HAL_UART_MspInit+0x198>)
 800655c:	f000 ff0c 	bl	8007378 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8006560:	e063      	b.n	800662a <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4a37      	ldr	r2, [pc, #220]	; (8006644 <HAL_UART_MspInit+0x19c>)
 8006568:	4293      	cmp	r3, r2
 800656a:	d12d      	bne.n	80065c8 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART3_CLK_ENABLE();
 800656c:	2300      	movs	r3, #0
 800656e:	617b      	str	r3, [r7, #20]
 8006570:	4b31      	ldr	r3, [pc, #196]	; (8006638 <HAL_UART_MspInit+0x190>)
 8006572:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006574:	4a30      	ldr	r2, [pc, #192]	; (8006638 <HAL_UART_MspInit+0x190>)
 8006576:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 800657a:	6413      	str	r3, [r2, #64]	; 0x40
 800657c:	4b2e      	ldr	r3, [pc, #184]	; (8006638 <HAL_UART_MspInit+0x190>)
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8006584:	617b      	str	r3, [r7, #20]
 8006586:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006588:	2300      	movs	r3, #0
 800658a:	613b      	str	r3, [r7, #16]
 800658c:	4b2a      	ldr	r3, [pc, #168]	; (8006638 <HAL_UART_MspInit+0x190>)
 800658e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006590:	4a29      	ldr	r2, [pc, #164]	; (8006638 <HAL_UART_MspInit+0x190>)
 8006592:	f043 0308 	orr.w	r3, r3, #8
 8006596:	6313      	str	r3, [r2, #48]	; 0x30
 8006598:	4b27      	ldr	r3, [pc, #156]	; (8006638 <HAL_UART_MspInit+0x190>)
 800659a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659c:	f003 0308 	and.w	r3, r3, #8
 80065a0:	613b      	str	r3, [r7, #16]
 80065a2:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80065a4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80065a8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065aa:	2302      	movs	r3, #2
 80065ac:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065ae:	2300      	movs	r3, #0
 80065b0:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065b2:	2303      	movs	r3, #3
 80065b4:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80065b6:	2307      	movs	r3, #7
 80065b8:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80065ba:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065be:	4619      	mov	r1, r3
 80065c0:	481f      	ldr	r0, [pc, #124]	; (8006640 <HAL_UART_MspInit+0x198>)
 80065c2:	f000 fed9 	bl	8007378 <HAL_GPIO_Init>
}
 80065c6:	e030      	b.n	800662a <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART6)
 80065c8:	687b      	ldr	r3, [r7, #4]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	4a1e      	ldr	r2, [pc, #120]	; (8006648 <HAL_UART_MspInit+0x1a0>)
 80065ce:	4293      	cmp	r3, r2
 80065d0:	d12b      	bne.n	800662a <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART6_CLK_ENABLE();
 80065d2:	2300      	movs	r3, #0
 80065d4:	60fb      	str	r3, [r7, #12]
 80065d6:	4b18      	ldr	r3, [pc, #96]	; (8006638 <HAL_UART_MspInit+0x190>)
 80065d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065da:	4a17      	ldr	r2, [pc, #92]	; (8006638 <HAL_UART_MspInit+0x190>)
 80065dc:	f043 0320 	orr.w	r3, r3, #32
 80065e0:	6453      	str	r3, [r2, #68]	; 0x44
 80065e2:	4b15      	ldr	r3, [pc, #84]	; (8006638 <HAL_UART_MspInit+0x190>)
 80065e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80065e6:	f003 0320 	and.w	r3, r3, #32
 80065ea:	60fb      	str	r3, [r7, #12]
 80065ec:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80065ee:	2300      	movs	r3, #0
 80065f0:	60bb      	str	r3, [r7, #8]
 80065f2:	4b11      	ldr	r3, [pc, #68]	; (8006638 <HAL_UART_MspInit+0x190>)
 80065f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80065f6:	4a10      	ldr	r2, [pc, #64]	; (8006638 <HAL_UART_MspInit+0x190>)
 80065f8:	f043 0304 	orr.w	r3, r3, #4
 80065fc:	6313      	str	r3, [r2, #48]	; 0x30
 80065fe:	4b0e      	ldr	r3, [pc, #56]	; (8006638 <HAL_UART_MspInit+0x190>)
 8006600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006602:	f003 0304 	and.w	r3, r3, #4
 8006606:	60bb      	str	r3, [r7, #8]
 8006608:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800660a:	23c0      	movs	r3, #192	; 0xc0
 800660c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800660e:	2302      	movs	r3, #2
 8006610:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006612:	2300      	movs	r3, #0
 8006614:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006616:	2303      	movs	r3, #3
 8006618:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800661a:	2308      	movs	r3, #8
 800661c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800661e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006622:	4619      	mov	r1, r3
 8006624:	4805      	ldr	r0, [pc, #20]	; (800663c <HAL_UART_MspInit+0x194>)
 8006626:	f000 fea7 	bl	8007378 <HAL_GPIO_Init>
}
 800662a:	bf00      	nop
 800662c:	3738      	adds	r7, #56	; 0x38
 800662e:	46bd      	mov	sp, r7
 8006630:	bd80      	pop	{r7, pc}
 8006632:	bf00      	nop
 8006634:	40005000 	.word	0x40005000
 8006638:	40023800 	.word	0x40023800
 800663c:	40020800 	.word	0x40020800
 8006640:	40020c00 	.word	0x40020c00
 8006644:	40004800 	.word	0x40004800
 8006648:	40011400 	.word	0x40011400

0800664c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800664c:	b480      	push	{r7}
 800664e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8006650:	e7fe      	b.n	8006650 <NMI_Handler+0x4>

08006652 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8006652:	b480      	push	{r7}
 8006654:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8006656:	e7fe      	b.n	8006656 <HardFault_Handler+0x4>

08006658 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8006658:	b480      	push	{r7}
 800665a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 800665c:	e7fe      	b.n	800665c <MemManage_Handler+0x4>

0800665e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800665e:	b480      	push	{r7}
 8006660:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8006662:	e7fe      	b.n	8006662 <BusFault_Handler+0x4>

08006664 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8006664:	b480      	push	{r7}
 8006666:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8006668:	e7fe      	b.n	8006668 <UsageFault_Handler+0x4>

0800666a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800666a:	b480      	push	{r7}
 800666c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800666e:	bf00      	nop
 8006670:	46bd      	mov	sp, r7
 8006672:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006676:	4770      	bx	lr

08006678 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006678:	b480      	push	{r7}
 800667a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800667c:	bf00      	nop
 800667e:	46bd      	mov	sp, r7
 8006680:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006684:	4770      	bx	lr

08006686 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8006686:	b480      	push	{r7}
 8006688:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800668a:	bf00      	nop
 800668c:	46bd      	mov	sp, r7
 800668e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006692:	4770      	bx	lr

08006694 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8006694:	b580      	push	{r7, lr}
 8006696:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006698:	f000 f988 	bl	80069ac <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800669c:	bf00      	nop
 800669e:	bd80      	pop	{r7, pc}

080066a0 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80066a0:	b580      	push	{r7, lr}
 80066a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80066a4:	4802      	ldr	r0, [pc, #8]	; (80066b0 <TIM2_IRQHandler+0x10>)
 80066a6:	f001 fdef 	bl	8008288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80066aa:	bf00      	nop
 80066ac:	bd80      	pop	{r7, pc}
 80066ae:	bf00      	nop
 80066b0:	20000224 	.word	0x20000224

080066b4 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80066b4:	b580      	push	{r7, lr}
 80066b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80066b8:	4802      	ldr	r0, [pc, #8]	; (80066c4 <TIM3_IRQHandler+0x10>)
 80066ba:	f001 fde5 	bl	8008288 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80066be:	bf00      	nop
 80066c0:	bd80      	pop	{r7, pc}
 80066c2:	bf00      	nop
 80066c4:	2000026c 	.word	0x2000026c

080066c8 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 80066c8:	b580      	push	{r7, lr}
 80066ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 80066cc:	4802      	ldr	r0, [pc, #8]	; (80066d8 <USART3_IRQHandler+0x10>)
 80066ce:	f002 fc73 	bl	8008fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 80066d2:	bf00      	nop
 80066d4:	bd80      	pop	{r7, pc}
 80066d6:	bf00      	nop
 80066d8:	200002f8 	.word	0x200002f8

080066dc <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80066dc:	b580      	push	{r7, lr}
 80066de:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80066e0:	4802      	ldr	r0, [pc, #8]	; (80066ec <UART5_IRQHandler+0x10>)
 80066e2:	f002 fc69 	bl	8008fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80066e6:	bf00      	nop
 80066e8:	bd80      	pop	{r7, pc}
 80066ea:	bf00      	nop
 80066ec:	200002b4 	.word	0x200002b4

080066f0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80066f0:	b580      	push	{r7, lr}
 80066f2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80066f4:	4802      	ldr	r0, [pc, #8]	; (8006700 <USART6_IRQHandler+0x10>)
 80066f6:	f002 fc5f 	bl	8008fb8 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80066fa:	bf00      	nop
 80066fc:	bd80      	pop	{r7, pc}
 80066fe:	bf00      	nop
 8006700:	2000033c 	.word	0x2000033c

08006704 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006704:	b480      	push	{r7}
 8006706:	af00      	add	r7, sp, #0
	return 1;
 8006708:	2301      	movs	r3, #1
}
 800670a:	4618      	mov	r0, r3
 800670c:	46bd      	mov	sp, r7
 800670e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006712:	4770      	bx	lr

08006714 <_kill>:

int _kill(int pid, int sig)
{
 8006714:	b580      	push	{r7, lr}
 8006716:	b082      	sub	sp, #8
 8006718:	af00      	add	r7, sp, #0
 800671a:	6078      	str	r0, [r7, #4]
 800671c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800671e:	f003 fbb3 	bl	8009e88 <__errno>
 8006722:	4603      	mov	r3, r0
 8006724:	2216      	movs	r2, #22
 8006726:	601a      	str	r2, [r3, #0]
	return -1;
 8006728:	f04f 33ff 	mov.w	r3, #4294967295
}
 800672c:	4618      	mov	r0, r3
 800672e:	3708      	adds	r7, #8
 8006730:	46bd      	mov	sp, r7
 8006732:	bd80      	pop	{r7, pc}

08006734 <_exit>:

void _exit (int status)
{
 8006734:	b580      	push	{r7, lr}
 8006736:	b082      	sub	sp, #8
 8006738:	af00      	add	r7, sp, #0
 800673a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800673c:	f04f 31ff 	mov.w	r1, #4294967295
 8006740:	6878      	ldr	r0, [r7, #4]
 8006742:	f7ff ffe7 	bl	8006714 <_kill>
	while (1) {}		/* Make sure we hang here */
 8006746:	e7fe      	b.n	8006746 <_exit+0x12>

08006748 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b086      	sub	sp, #24
 800674c:	af00      	add	r7, sp, #0
 800674e:	60f8      	str	r0, [r7, #12]
 8006750:	60b9      	str	r1, [r7, #8]
 8006752:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006754:	2300      	movs	r3, #0
 8006756:	617b      	str	r3, [r7, #20]
 8006758:	e00a      	b.n	8006770 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800675a:	f3af 8000 	nop.w
 800675e:	4601      	mov	r1, r0
 8006760:	68bb      	ldr	r3, [r7, #8]
 8006762:	1c5a      	adds	r2, r3, #1
 8006764:	60ba      	str	r2, [r7, #8]
 8006766:	b2ca      	uxtb	r2, r1
 8006768:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800676a:	697b      	ldr	r3, [r7, #20]
 800676c:	3301      	adds	r3, #1
 800676e:	617b      	str	r3, [r7, #20]
 8006770:	697a      	ldr	r2, [r7, #20]
 8006772:	687b      	ldr	r3, [r7, #4]
 8006774:	429a      	cmp	r2, r3
 8006776:	dbf0      	blt.n	800675a <_read+0x12>
	}

return len;
 8006778:	687b      	ldr	r3, [r7, #4]
}
 800677a:	4618      	mov	r0, r3
 800677c:	3718      	adds	r7, #24
 800677e:	46bd      	mov	sp, r7
 8006780:	bd80      	pop	{r7, pc}

08006782 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006782:	b580      	push	{r7, lr}
 8006784:	b086      	sub	sp, #24
 8006786:	af00      	add	r7, sp, #0
 8006788:	60f8      	str	r0, [r7, #12]
 800678a:	60b9      	str	r1, [r7, #8]
 800678c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800678e:	2300      	movs	r3, #0
 8006790:	617b      	str	r3, [r7, #20]
 8006792:	e009      	b.n	80067a8 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006794:	68bb      	ldr	r3, [r7, #8]
 8006796:	1c5a      	adds	r2, r3, #1
 8006798:	60ba      	str	r2, [r7, #8]
 800679a:	781b      	ldrb	r3, [r3, #0]
 800679c:	4618      	mov	r0, r3
 800679e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067a2:	697b      	ldr	r3, [r7, #20]
 80067a4:	3301      	adds	r3, #1
 80067a6:	617b      	str	r3, [r7, #20]
 80067a8:	697a      	ldr	r2, [r7, #20]
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	429a      	cmp	r2, r3
 80067ae:	dbf1      	blt.n	8006794 <_write+0x12>
	}
	return len;
 80067b0:	687b      	ldr	r3, [r7, #4]
}
 80067b2:	4618      	mov	r0, r3
 80067b4:	3718      	adds	r7, #24
 80067b6:	46bd      	mov	sp, r7
 80067b8:	bd80      	pop	{r7, pc}

080067ba <_close>:

int _close(int file)
{
 80067ba:	b480      	push	{r7}
 80067bc:	b083      	sub	sp, #12
 80067be:	af00      	add	r7, sp, #0
 80067c0:	6078      	str	r0, [r7, #4]
	return -1;
 80067c2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067c6:	4618      	mov	r0, r3
 80067c8:	370c      	adds	r7, #12
 80067ca:	46bd      	mov	sp, r7
 80067cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067d0:	4770      	bx	lr

080067d2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80067d2:	b480      	push	{r7}
 80067d4:	b083      	sub	sp, #12
 80067d6:	af00      	add	r7, sp, #0
 80067d8:	6078      	str	r0, [r7, #4]
 80067da:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80067e2:	605a      	str	r2, [r3, #4]
	return 0;
 80067e4:	2300      	movs	r3, #0
}
 80067e6:	4618      	mov	r0, r3
 80067e8:	370c      	adds	r7, #12
 80067ea:	46bd      	mov	sp, r7
 80067ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067f0:	4770      	bx	lr

080067f2 <_isatty>:

int _isatty(int file)
{
 80067f2:	b480      	push	{r7}
 80067f4:	b083      	sub	sp, #12
 80067f6:	af00      	add	r7, sp, #0
 80067f8:	6078      	str	r0, [r7, #4]
	return 1;
 80067fa:	2301      	movs	r3, #1
}
 80067fc:	4618      	mov	r0, r3
 80067fe:	370c      	adds	r7, #12
 8006800:	46bd      	mov	sp, r7
 8006802:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006806:	4770      	bx	lr

08006808 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006808:	b480      	push	{r7}
 800680a:	b085      	sub	sp, #20
 800680c:	af00      	add	r7, sp, #0
 800680e:	60f8      	str	r0, [r7, #12]
 8006810:	60b9      	str	r1, [r7, #8]
 8006812:	607a      	str	r2, [r7, #4]
	return 0;
 8006814:	2300      	movs	r3, #0
}
 8006816:	4618      	mov	r0, r3
 8006818:	3714      	adds	r7, #20
 800681a:	46bd      	mov	sp, r7
 800681c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006820:	4770      	bx	lr
	...

08006824 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006824:	b580      	push	{r7, lr}
 8006826:	b086      	sub	sp, #24
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800682c:	4a14      	ldr	r2, [pc, #80]	; (8006880 <_sbrk+0x5c>)
 800682e:	4b15      	ldr	r3, [pc, #84]	; (8006884 <_sbrk+0x60>)
 8006830:	1ad3      	subs	r3, r2, r3
 8006832:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006834:	697b      	ldr	r3, [r7, #20]
 8006836:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006838:	4b13      	ldr	r3, [pc, #76]	; (8006888 <_sbrk+0x64>)
 800683a:	681b      	ldr	r3, [r3, #0]
 800683c:	2b00      	cmp	r3, #0
 800683e:	d102      	bne.n	8006846 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8006840:	4b11      	ldr	r3, [pc, #68]	; (8006888 <_sbrk+0x64>)
 8006842:	4a12      	ldr	r2, [pc, #72]	; (800688c <_sbrk+0x68>)
 8006844:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8006846:	4b10      	ldr	r3, [pc, #64]	; (8006888 <_sbrk+0x64>)
 8006848:	681a      	ldr	r2, [r3, #0]
 800684a:	687b      	ldr	r3, [r7, #4]
 800684c:	4413      	add	r3, r2
 800684e:	693a      	ldr	r2, [r7, #16]
 8006850:	429a      	cmp	r2, r3
 8006852:	d207      	bcs.n	8006864 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8006854:	f003 fb18 	bl	8009e88 <__errno>
 8006858:	4603      	mov	r3, r0
 800685a:	220c      	movs	r2, #12
 800685c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800685e:	f04f 33ff 	mov.w	r3, #4294967295
 8006862:	e009      	b.n	8006878 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006864:	4b08      	ldr	r3, [pc, #32]	; (8006888 <_sbrk+0x64>)
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800686a:	4b07      	ldr	r3, [pc, #28]	; (8006888 <_sbrk+0x64>)
 800686c:	681a      	ldr	r2, [r3, #0]
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	4413      	add	r3, r2
 8006872:	4a05      	ldr	r2, [pc, #20]	; (8006888 <_sbrk+0x64>)
 8006874:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006876:	68fb      	ldr	r3, [r7, #12]
}
 8006878:	4618      	mov	r0, r3
 800687a:	3718      	adds	r7, #24
 800687c:	46bd      	mov	sp, r7
 800687e:	bd80      	pop	{r7, pc}
 8006880:	20020000 	.word	0x20020000
 8006884:	00000400 	.word	0x00000400
 8006888:	20000558 	.word	0x20000558
 800688c:	20000590 	.word	0x20000590

08006890 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006890:	b480      	push	{r7}
 8006892:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006894:	4b06      	ldr	r3, [pc, #24]	; (80068b0 <SystemInit+0x20>)
 8006896:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800689a:	4a05      	ldr	r2, [pc, #20]	; (80068b0 <SystemInit+0x20>)
 800689c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 80068a0:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80068a4:	bf00      	nop
 80068a6:	46bd      	mov	sp, r7
 80068a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068ac:	4770      	bx	lr
 80068ae:	bf00      	nop
 80068b0:	e000ed00 	.word	0xe000ed00

080068b4 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 80068b4:	f8df d034 	ldr.w	sp, [pc, #52]	; 80068ec <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 80068b8:	480d      	ldr	r0, [pc, #52]	; (80068f0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 80068ba:	490e      	ldr	r1, [pc, #56]	; (80068f4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 80068bc:	4a0e      	ldr	r2, [pc, #56]	; (80068f8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 80068be:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80068c0:	e002      	b.n	80068c8 <LoopCopyDataInit>

080068c2 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80068c2:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80068c4:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80068c6:	3304      	adds	r3, #4

080068c8 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80068c8:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80068ca:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80068cc:	d3f9      	bcc.n	80068c2 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80068ce:	4a0b      	ldr	r2, [pc, #44]	; (80068fc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80068d0:	4c0b      	ldr	r4, [pc, #44]	; (8006900 <LoopFillZerobss+0x26>)
  movs r3, #0
 80068d2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80068d4:	e001      	b.n	80068da <LoopFillZerobss>

080068d6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80068d6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80068d8:	3204      	adds	r2, #4

080068da <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80068da:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80068dc:	d3fb      	bcc.n	80068d6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80068de:	f7ff ffd7 	bl	8006890 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80068e2:	f003 fad7 	bl	8009e94 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80068e6:	f7fe fd1b 	bl	8005320 <main>
  bx  lr    
 80068ea:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80068ec:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80068f0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80068f4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80068f8:	0800fe40 	.word	0x0800fe40
  ldr r2, =_sbss
 80068fc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8006900:	20000590 	.word	0x20000590

08006904 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006904:	e7fe      	b.n	8006904 <ADC_IRQHandler>
	...

08006908 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006908:	b580      	push	{r7, lr}
 800690a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800690c:	4b0e      	ldr	r3, [pc, #56]	; (8006948 <HAL_Init+0x40>)
 800690e:	681b      	ldr	r3, [r3, #0]
 8006910:	4a0d      	ldr	r2, [pc, #52]	; (8006948 <HAL_Init+0x40>)
 8006912:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006916:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006918:	4b0b      	ldr	r3, [pc, #44]	; (8006948 <HAL_Init+0x40>)
 800691a:	681b      	ldr	r3, [r3, #0]
 800691c:	4a0a      	ldr	r2, [pc, #40]	; (8006948 <HAL_Init+0x40>)
 800691e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006922:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006924:	4b08      	ldr	r3, [pc, #32]	; (8006948 <HAL_Init+0x40>)
 8006926:	681b      	ldr	r3, [r3, #0]
 8006928:	4a07      	ldr	r2, [pc, #28]	; (8006948 <HAL_Init+0x40>)
 800692a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800692e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006930:	2003      	movs	r0, #3
 8006932:	f000 f965 	bl	8006c00 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006936:	2000      	movs	r0, #0
 8006938:	f000 f808 	bl	800694c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800693c:	f7ff fd12 	bl	8006364 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8006940:	2300      	movs	r3, #0
}
 8006942:	4618      	mov	r0, r3
 8006944:	bd80      	pop	{r7, pc}
 8006946:	bf00      	nop
 8006948:	40023c00 	.word	0x40023c00

0800694c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800694c:	b580      	push	{r7, lr}
 800694e:	b082      	sub	sp, #8
 8006950:	af00      	add	r7, sp, #0
 8006952:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8006954:	4b12      	ldr	r3, [pc, #72]	; (80069a0 <HAL_InitTick+0x54>)
 8006956:	681a      	ldr	r2, [r3, #0]
 8006958:	4b12      	ldr	r3, [pc, #72]	; (80069a4 <HAL_InitTick+0x58>)
 800695a:	781b      	ldrb	r3, [r3, #0]
 800695c:	4619      	mov	r1, r3
 800695e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006962:	fbb3 f3f1 	udiv	r3, r3, r1
 8006966:	fbb2 f3f3 	udiv	r3, r2, r3
 800696a:	4618      	mov	r0, r3
 800696c:	f000 f981 	bl	8006c72 <HAL_SYSTICK_Config>
 8006970:	4603      	mov	r3, r0
 8006972:	2b00      	cmp	r3, #0
 8006974:	d001      	beq.n	800697a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006976:	2301      	movs	r3, #1
 8006978:	e00e      	b.n	8006998 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800697a:	687b      	ldr	r3, [r7, #4]
 800697c:	2b0f      	cmp	r3, #15
 800697e:	d80a      	bhi.n	8006996 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006980:	2200      	movs	r2, #0
 8006982:	6879      	ldr	r1, [r7, #4]
 8006984:	f04f 30ff 	mov.w	r0, #4294967295
 8006988:	f000 f945 	bl	8006c16 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800698c:	4a06      	ldr	r2, [pc, #24]	; (80069a8 <HAL_InitTick+0x5c>)
 800698e:	687b      	ldr	r3, [r7, #4]
 8006990:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006992:	2300      	movs	r3, #0
 8006994:	e000      	b.n	8006998 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006996:	2301      	movs	r3, #1
}
 8006998:	4618      	mov	r0, r3
 800699a:	3708      	adds	r7, #8
 800699c:	46bd      	mov	sp, r7
 800699e:	bd80      	pop	{r7, pc}
 80069a0:	20000014 	.word	0x20000014
 80069a4:	2000001c 	.word	0x2000001c
 80069a8:	20000018 	.word	0x20000018

080069ac <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80069ac:	b480      	push	{r7}
 80069ae:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80069b0:	4b06      	ldr	r3, [pc, #24]	; (80069cc <HAL_IncTick+0x20>)
 80069b2:	781b      	ldrb	r3, [r3, #0]
 80069b4:	461a      	mov	r2, r3
 80069b6:	4b06      	ldr	r3, [pc, #24]	; (80069d0 <HAL_IncTick+0x24>)
 80069b8:	681b      	ldr	r3, [r3, #0]
 80069ba:	4413      	add	r3, r2
 80069bc:	4a04      	ldr	r2, [pc, #16]	; (80069d0 <HAL_IncTick+0x24>)
 80069be:	6013      	str	r3, [r2, #0]
}
 80069c0:	bf00      	nop
 80069c2:	46bd      	mov	sp, r7
 80069c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069c8:	4770      	bx	lr
 80069ca:	bf00      	nop
 80069cc:	2000001c 	.word	0x2000001c
 80069d0:	2000055c 	.word	0x2000055c

080069d4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80069d4:	b480      	push	{r7}
 80069d6:	af00      	add	r7, sp, #0
  return uwTick;
 80069d8:	4b03      	ldr	r3, [pc, #12]	; (80069e8 <HAL_GetTick+0x14>)
 80069da:	681b      	ldr	r3, [r3, #0]
}
 80069dc:	4618      	mov	r0, r3
 80069de:	46bd      	mov	sp, r7
 80069e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e4:	4770      	bx	lr
 80069e6:	bf00      	nop
 80069e8:	2000055c 	.word	0x2000055c

080069ec <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80069ec:	b580      	push	{r7, lr}
 80069ee:	b084      	sub	sp, #16
 80069f0:	af00      	add	r7, sp, #0
 80069f2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80069f4:	f7ff ffee 	bl	80069d4 <HAL_GetTick>
 80069f8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80069fe:	68fb      	ldr	r3, [r7, #12]
 8006a00:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a04:	d005      	beq.n	8006a12 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a06:	4b0a      	ldr	r3, [pc, #40]	; (8006a30 <HAL_Delay+0x44>)
 8006a08:	781b      	ldrb	r3, [r3, #0]
 8006a0a:	461a      	mov	r2, r3
 8006a0c:	68fb      	ldr	r3, [r7, #12]
 8006a0e:	4413      	add	r3, r2
 8006a10:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a12:	bf00      	nop
 8006a14:	f7ff ffde 	bl	80069d4 <HAL_GetTick>
 8006a18:	4602      	mov	r2, r0
 8006a1a:	68bb      	ldr	r3, [r7, #8]
 8006a1c:	1ad3      	subs	r3, r2, r3
 8006a1e:	68fa      	ldr	r2, [r7, #12]
 8006a20:	429a      	cmp	r2, r3
 8006a22:	d8f7      	bhi.n	8006a14 <HAL_Delay+0x28>
  {
  }
}
 8006a24:	bf00      	nop
 8006a26:	bf00      	nop
 8006a28:	3710      	adds	r7, #16
 8006a2a:	46bd      	mov	sp, r7
 8006a2c:	bd80      	pop	{r7, pc}
 8006a2e:	bf00      	nop
 8006a30:	2000001c 	.word	0x2000001c

08006a34 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006a34:	b480      	push	{r7}
 8006a36:	b085      	sub	sp, #20
 8006a38:	af00      	add	r7, sp, #0
 8006a3a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006a3c:	687b      	ldr	r3, [r7, #4]
 8006a3e:	f003 0307 	and.w	r3, r3, #7
 8006a42:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006a44:	4b0c      	ldr	r3, [pc, #48]	; (8006a78 <__NVIC_SetPriorityGrouping+0x44>)
 8006a46:	68db      	ldr	r3, [r3, #12]
 8006a48:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006a4a:	68ba      	ldr	r2, [r7, #8]
 8006a4c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006a50:	4013      	ands	r3, r2
 8006a52:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006a54:	68fb      	ldr	r3, [r7, #12]
 8006a56:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006a58:	68bb      	ldr	r3, [r7, #8]
 8006a5a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006a5c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006a60:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006a64:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006a66:	4a04      	ldr	r2, [pc, #16]	; (8006a78 <__NVIC_SetPriorityGrouping+0x44>)
 8006a68:	68bb      	ldr	r3, [r7, #8]
 8006a6a:	60d3      	str	r3, [r2, #12]
}
 8006a6c:	bf00      	nop
 8006a6e:	3714      	adds	r7, #20
 8006a70:	46bd      	mov	sp, r7
 8006a72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a76:	4770      	bx	lr
 8006a78:	e000ed00 	.word	0xe000ed00

08006a7c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006a80:	4b04      	ldr	r3, [pc, #16]	; (8006a94 <__NVIC_GetPriorityGrouping+0x18>)
 8006a82:	68db      	ldr	r3, [r3, #12]
 8006a84:	0a1b      	lsrs	r3, r3, #8
 8006a86:	f003 0307 	and.w	r3, r3, #7
}
 8006a8a:	4618      	mov	r0, r3
 8006a8c:	46bd      	mov	sp, r7
 8006a8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a92:	4770      	bx	lr
 8006a94:	e000ed00 	.word	0xe000ed00

08006a98 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006a98:	b480      	push	{r7}
 8006a9a:	b083      	sub	sp, #12
 8006a9c:	af00      	add	r7, sp, #0
 8006a9e:	4603      	mov	r3, r0
 8006aa0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006aa2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	db0b      	blt.n	8006ac2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006aaa:	79fb      	ldrb	r3, [r7, #7]
 8006aac:	f003 021f 	and.w	r2, r3, #31
 8006ab0:	4907      	ldr	r1, [pc, #28]	; (8006ad0 <__NVIC_EnableIRQ+0x38>)
 8006ab2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ab6:	095b      	lsrs	r3, r3, #5
 8006ab8:	2001      	movs	r0, #1
 8006aba:	fa00 f202 	lsl.w	r2, r0, r2
 8006abe:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006ac2:	bf00      	nop
 8006ac4:	370c      	adds	r7, #12
 8006ac6:	46bd      	mov	sp, r7
 8006ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006acc:	4770      	bx	lr
 8006ace:	bf00      	nop
 8006ad0:	e000e100 	.word	0xe000e100

08006ad4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006ad4:	b480      	push	{r7}
 8006ad6:	b083      	sub	sp, #12
 8006ad8:	af00      	add	r7, sp, #0
 8006ada:	4603      	mov	r3, r0
 8006adc:	6039      	str	r1, [r7, #0]
 8006ade:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006ae0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	db0a      	blt.n	8006afe <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006ae8:	683b      	ldr	r3, [r7, #0]
 8006aea:	b2da      	uxtb	r2, r3
 8006aec:	490c      	ldr	r1, [pc, #48]	; (8006b20 <__NVIC_SetPriority+0x4c>)
 8006aee:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006af2:	0112      	lsls	r2, r2, #4
 8006af4:	b2d2      	uxtb	r2, r2
 8006af6:	440b      	add	r3, r1
 8006af8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006afc:	e00a      	b.n	8006b14 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006afe:	683b      	ldr	r3, [r7, #0]
 8006b00:	b2da      	uxtb	r2, r3
 8006b02:	4908      	ldr	r1, [pc, #32]	; (8006b24 <__NVIC_SetPriority+0x50>)
 8006b04:	79fb      	ldrb	r3, [r7, #7]
 8006b06:	f003 030f 	and.w	r3, r3, #15
 8006b0a:	3b04      	subs	r3, #4
 8006b0c:	0112      	lsls	r2, r2, #4
 8006b0e:	b2d2      	uxtb	r2, r2
 8006b10:	440b      	add	r3, r1
 8006b12:	761a      	strb	r2, [r3, #24]
}
 8006b14:	bf00      	nop
 8006b16:	370c      	adds	r7, #12
 8006b18:	46bd      	mov	sp, r7
 8006b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1e:	4770      	bx	lr
 8006b20:	e000e100 	.word	0xe000e100
 8006b24:	e000ed00 	.word	0xe000ed00

08006b28 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006b28:	b480      	push	{r7}
 8006b2a:	b089      	sub	sp, #36	; 0x24
 8006b2c:	af00      	add	r7, sp, #0
 8006b2e:	60f8      	str	r0, [r7, #12]
 8006b30:	60b9      	str	r1, [r7, #8]
 8006b32:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006b34:	68fb      	ldr	r3, [r7, #12]
 8006b36:	f003 0307 	and.w	r3, r3, #7
 8006b3a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006b3c:	69fb      	ldr	r3, [r7, #28]
 8006b3e:	f1c3 0307 	rsb	r3, r3, #7
 8006b42:	2b04      	cmp	r3, #4
 8006b44:	bf28      	it	cs
 8006b46:	2304      	movcs	r3, #4
 8006b48:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006b4a:	69fb      	ldr	r3, [r7, #28]
 8006b4c:	3304      	adds	r3, #4
 8006b4e:	2b06      	cmp	r3, #6
 8006b50:	d902      	bls.n	8006b58 <NVIC_EncodePriority+0x30>
 8006b52:	69fb      	ldr	r3, [r7, #28]
 8006b54:	3b03      	subs	r3, #3
 8006b56:	e000      	b.n	8006b5a <NVIC_EncodePriority+0x32>
 8006b58:	2300      	movs	r3, #0
 8006b5a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b5c:	f04f 32ff 	mov.w	r2, #4294967295
 8006b60:	69bb      	ldr	r3, [r7, #24]
 8006b62:	fa02 f303 	lsl.w	r3, r2, r3
 8006b66:	43da      	mvns	r2, r3
 8006b68:	68bb      	ldr	r3, [r7, #8]
 8006b6a:	401a      	ands	r2, r3
 8006b6c:	697b      	ldr	r3, [r7, #20]
 8006b6e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006b70:	f04f 31ff 	mov.w	r1, #4294967295
 8006b74:	697b      	ldr	r3, [r7, #20]
 8006b76:	fa01 f303 	lsl.w	r3, r1, r3
 8006b7a:	43d9      	mvns	r1, r3
 8006b7c:	687b      	ldr	r3, [r7, #4]
 8006b7e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006b80:	4313      	orrs	r3, r2
         );
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3724      	adds	r7, #36	; 0x24
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
	...

08006b90 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006b90:	b480      	push	{r7}
 8006b92:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006b94:	f3bf 8f4f 	dsb	sy
}
 8006b98:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006b9a:	4b06      	ldr	r3, [pc, #24]	; (8006bb4 <__NVIC_SystemReset+0x24>)
 8006b9c:	68db      	ldr	r3, [r3, #12]
 8006b9e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006ba2:	4904      	ldr	r1, [pc, #16]	; (8006bb4 <__NVIC_SystemReset+0x24>)
 8006ba4:	4b04      	ldr	r3, [pc, #16]	; (8006bb8 <__NVIC_SystemReset+0x28>)
 8006ba6:	4313      	orrs	r3, r2
 8006ba8:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006baa:	f3bf 8f4f 	dsb	sy
}
 8006bae:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006bb0:	bf00      	nop
 8006bb2:	e7fd      	b.n	8006bb0 <__NVIC_SystemReset+0x20>
 8006bb4:	e000ed00 	.word	0xe000ed00
 8006bb8:	05fa0004 	.word	0x05fa0004

08006bbc <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006bbc:	b580      	push	{r7, lr}
 8006bbe:	b082      	sub	sp, #8
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	3b01      	subs	r3, #1
 8006bc8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006bcc:	d301      	bcc.n	8006bd2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006bce:	2301      	movs	r3, #1
 8006bd0:	e00f      	b.n	8006bf2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006bd2:	4a0a      	ldr	r2, [pc, #40]	; (8006bfc <SysTick_Config+0x40>)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	3b01      	subs	r3, #1
 8006bd8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006bda:	210f      	movs	r1, #15
 8006bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8006be0:	f7ff ff78 	bl	8006ad4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006be4:	4b05      	ldr	r3, [pc, #20]	; (8006bfc <SysTick_Config+0x40>)
 8006be6:	2200      	movs	r2, #0
 8006be8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006bea:	4b04      	ldr	r3, [pc, #16]	; (8006bfc <SysTick_Config+0x40>)
 8006bec:	2207      	movs	r2, #7
 8006bee:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006bf0:	2300      	movs	r3, #0
}
 8006bf2:	4618      	mov	r0, r3
 8006bf4:	3708      	adds	r7, #8
 8006bf6:	46bd      	mov	sp, r7
 8006bf8:	bd80      	pop	{r7, pc}
 8006bfa:	bf00      	nop
 8006bfc:	e000e010 	.word	0xe000e010

08006c00 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c00:	b580      	push	{r7, lr}
 8006c02:	b082      	sub	sp, #8
 8006c04:	af00      	add	r7, sp, #0
 8006c06:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c08:	6878      	ldr	r0, [r7, #4]
 8006c0a:	f7ff ff13 	bl	8006a34 <__NVIC_SetPriorityGrouping>
}
 8006c0e:	bf00      	nop
 8006c10:	3708      	adds	r7, #8
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b086      	sub	sp, #24
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	4603      	mov	r3, r0
 8006c1e:	60b9      	str	r1, [r7, #8]
 8006c20:	607a      	str	r2, [r7, #4]
 8006c22:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006c24:	2300      	movs	r3, #0
 8006c26:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006c28:	f7ff ff28 	bl	8006a7c <__NVIC_GetPriorityGrouping>
 8006c2c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006c2e:	687a      	ldr	r2, [r7, #4]
 8006c30:	68b9      	ldr	r1, [r7, #8]
 8006c32:	6978      	ldr	r0, [r7, #20]
 8006c34:	f7ff ff78 	bl	8006b28 <NVIC_EncodePriority>
 8006c38:	4602      	mov	r2, r0
 8006c3a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006c3e:	4611      	mov	r1, r2
 8006c40:	4618      	mov	r0, r3
 8006c42:	f7ff ff47 	bl	8006ad4 <__NVIC_SetPriority>
}
 8006c46:	bf00      	nop
 8006c48:	3718      	adds	r7, #24
 8006c4a:	46bd      	mov	sp, r7
 8006c4c:	bd80      	pop	{r7, pc}

08006c4e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006c4e:	b580      	push	{r7, lr}
 8006c50:	b082      	sub	sp, #8
 8006c52:	af00      	add	r7, sp, #0
 8006c54:	4603      	mov	r3, r0
 8006c56:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006c58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006c5c:	4618      	mov	r0, r3
 8006c5e:	f7ff ff1b 	bl	8006a98 <__NVIC_EnableIRQ>
}
 8006c62:	bf00      	nop
 8006c64:	3708      	adds	r7, #8
 8006c66:	46bd      	mov	sp, r7
 8006c68:	bd80      	pop	{r7, pc}

08006c6a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006c6a:	b580      	push	{r7, lr}
 8006c6c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006c6e:	f7ff ff8f 	bl	8006b90 <__NVIC_SystemReset>

08006c72 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006c72:	b580      	push	{r7, lr}
 8006c74:	b082      	sub	sp, #8
 8006c76:	af00      	add	r7, sp, #0
 8006c78:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f7ff ff9e 	bl	8006bbc <SysTick_Config>
 8006c80:	4603      	mov	r3, r0
}
 8006c82:	4618      	mov	r0, r3
 8006c84:	3708      	adds	r7, #8
 8006c86:	46bd      	mov	sp, r7
 8006c88:	bd80      	pop	{r7, pc}

08006c8a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006c8a:	b580      	push	{r7, lr}
 8006c8c:	b084      	sub	sp, #16
 8006c8e:	af00      	add	r7, sp, #0
 8006c90:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006c96:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006c98:	f7ff fe9c 	bl	80069d4 <HAL_GetTick>
 8006c9c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006c9e:	687b      	ldr	r3, [r7, #4]
 8006ca0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006ca4:	b2db      	uxtb	r3, r3
 8006ca6:	2b02      	cmp	r3, #2
 8006ca8:	d008      	beq.n	8006cbc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006caa:	687b      	ldr	r3, [r7, #4]
 8006cac:	2280      	movs	r2, #128	; 0x80
 8006cae:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006cb0:	687b      	ldr	r3, [r7, #4]
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006cb8:	2301      	movs	r3, #1
 8006cba:	e052      	b.n	8006d62 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006cbc:	687b      	ldr	r3, [r7, #4]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	681a      	ldr	r2, [r3, #0]
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	681b      	ldr	r3, [r3, #0]
 8006cc6:	f022 0216 	bic.w	r2, r2, #22
 8006cca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006ccc:	687b      	ldr	r3, [r7, #4]
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	695a      	ldr	r2, [r3, #20]
 8006cd2:	687b      	ldr	r3, [r7, #4]
 8006cd4:	681b      	ldr	r3, [r3, #0]
 8006cd6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006cda:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006ce0:	2b00      	cmp	r3, #0
 8006ce2:	d103      	bne.n	8006cec <HAL_DMA_Abort+0x62>
 8006ce4:	687b      	ldr	r3, [r7, #4]
 8006ce6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006ce8:	2b00      	cmp	r3, #0
 8006cea:	d007      	beq.n	8006cfc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006cec:	687b      	ldr	r3, [r7, #4]
 8006cee:	681b      	ldr	r3, [r3, #0]
 8006cf0:	681a      	ldr	r2, [r3, #0]
 8006cf2:	687b      	ldr	r3, [r7, #4]
 8006cf4:	681b      	ldr	r3, [r3, #0]
 8006cf6:	f022 0208 	bic.w	r2, r2, #8
 8006cfa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	681b      	ldr	r3, [r3, #0]
 8006d00:	681a      	ldr	r2, [r3, #0]
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	681b      	ldr	r3, [r3, #0]
 8006d06:	f022 0201 	bic.w	r2, r2, #1
 8006d0a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d0c:	e013      	b.n	8006d36 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d0e:	f7ff fe61 	bl	80069d4 <HAL_GetTick>
 8006d12:	4602      	mov	r2, r0
 8006d14:	68bb      	ldr	r3, [r7, #8]
 8006d16:	1ad3      	subs	r3, r2, r3
 8006d18:	2b05      	cmp	r3, #5
 8006d1a:	d90c      	bls.n	8006d36 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006d1c:	687b      	ldr	r3, [r7, #4]
 8006d1e:	2220      	movs	r2, #32
 8006d20:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	2203      	movs	r2, #3
 8006d26:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006d32:	2303      	movs	r3, #3
 8006d34:	e015      	b.n	8006d62 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d36:	687b      	ldr	r3, [r7, #4]
 8006d38:	681b      	ldr	r3, [r3, #0]
 8006d3a:	681b      	ldr	r3, [r3, #0]
 8006d3c:	f003 0301 	and.w	r3, r3, #1
 8006d40:	2b00      	cmp	r3, #0
 8006d42:	d1e4      	bne.n	8006d0e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006d48:	223f      	movs	r2, #63	; 0x3f
 8006d4a:	409a      	lsls	r2, r3
 8006d4c:	68fb      	ldr	r3, [r7, #12]
 8006d4e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006d50:	687b      	ldr	r3, [r7, #4]
 8006d52:	2201      	movs	r2, #1
 8006d54:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	2200      	movs	r2, #0
 8006d5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006d60:	2300      	movs	r3, #0
}
 8006d62:	4618      	mov	r0, r3
 8006d64:	3710      	adds	r7, #16
 8006d66:	46bd      	mov	sp, r7
 8006d68:	bd80      	pop	{r7, pc}

08006d6a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006d6a:	b480      	push	{r7}
 8006d6c:	b083      	sub	sp, #12
 8006d6e:	af00      	add	r7, sp, #0
 8006d70:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d72:	687b      	ldr	r3, [r7, #4]
 8006d74:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d78:	b2db      	uxtb	r3, r3
 8006d7a:	2b02      	cmp	r3, #2
 8006d7c:	d004      	beq.n	8006d88 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2280      	movs	r2, #128	; 0x80
 8006d82:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006d84:	2301      	movs	r3, #1
 8006d86:	e00c      	b.n	8006da2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	2205      	movs	r2, #5
 8006d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d90:	687b      	ldr	r3, [r7, #4]
 8006d92:	681b      	ldr	r3, [r3, #0]
 8006d94:	681a      	ldr	r2, [r3, #0]
 8006d96:	687b      	ldr	r3, [r7, #4]
 8006d98:	681b      	ldr	r3, [r3, #0]
 8006d9a:	f022 0201 	bic.w	r2, r2, #1
 8006d9e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006da0:	2300      	movs	r3, #0
}
 8006da2:	4618      	mov	r0, r3
 8006da4:	370c      	adds	r7, #12
 8006da6:	46bd      	mov	sp, r7
 8006da8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dac:	4770      	bx	lr
	...

08006db0 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b086      	sub	sp, #24
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	60f8      	str	r0, [r7, #12]
 8006db8:	60b9      	str	r1, [r7, #8]
 8006dba:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006dbe:	2301      	movs	r3, #1
 8006dc0:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006dc2:	4b23      	ldr	r3, [pc, #140]	; (8006e50 <HAL_FLASH_Program+0xa0>)
 8006dc4:	7e1b      	ldrb	r3, [r3, #24]
 8006dc6:	2b01      	cmp	r3, #1
 8006dc8:	d101      	bne.n	8006dce <HAL_FLASH_Program+0x1e>
 8006dca:	2302      	movs	r3, #2
 8006dcc:	e03b      	b.n	8006e46 <HAL_FLASH_Program+0x96>
 8006dce:	4b20      	ldr	r3, [pc, #128]	; (8006e50 <HAL_FLASH_Program+0xa0>)
 8006dd0:	2201      	movs	r2, #1
 8006dd2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006dd4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006dd8:	f000 f87c 	bl	8006ed4 <FLASH_WaitForLastOperation>
 8006ddc:	4603      	mov	r3, r0
 8006dde:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006de0:	7dfb      	ldrb	r3, [r7, #23]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d12b      	bne.n	8006e3e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006de6:	68fb      	ldr	r3, [r7, #12]
 8006de8:	2b00      	cmp	r3, #0
 8006dea:	d105      	bne.n	8006df8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006dec:	783b      	ldrb	r3, [r7, #0]
 8006dee:	4619      	mov	r1, r3
 8006df0:	68b8      	ldr	r0, [r7, #8]
 8006df2:	f000 f927 	bl	8007044 <FLASH_Program_Byte>
 8006df6:	e016      	b.n	8006e26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006df8:	68fb      	ldr	r3, [r7, #12]
 8006dfa:	2b01      	cmp	r3, #1
 8006dfc:	d105      	bne.n	8006e0a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006dfe:	883b      	ldrh	r3, [r7, #0]
 8006e00:	4619      	mov	r1, r3
 8006e02:	68b8      	ldr	r0, [r7, #8]
 8006e04:	f000 f8fa 	bl	8006ffc <FLASH_Program_HalfWord>
 8006e08:	e00d      	b.n	8006e26 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006e0a:	68fb      	ldr	r3, [r7, #12]
 8006e0c:	2b02      	cmp	r3, #2
 8006e0e:	d105      	bne.n	8006e1c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006e10:	683b      	ldr	r3, [r7, #0]
 8006e12:	4619      	mov	r1, r3
 8006e14:	68b8      	ldr	r0, [r7, #8]
 8006e16:	f000 f8cf 	bl	8006fb8 <FLASH_Program_Word>
 8006e1a:	e004      	b.n	8006e26 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006e1c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006e20:	68b8      	ldr	r0, [r7, #8]
 8006e22:	f000 f897 	bl	8006f54 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e26:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e2a:	f000 f853 	bl	8006ed4 <FLASH_WaitForLastOperation>
 8006e2e:	4603      	mov	r3, r0
 8006e30:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006e32:	4b08      	ldr	r3, [pc, #32]	; (8006e54 <HAL_FLASH_Program+0xa4>)
 8006e34:	691b      	ldr	r3, [r3, #16]
 8006e36:	4a07      	ldr	r2, [pc, #28]	; (8006e54 <HAL_FLASH_Program+0xa4>)
 8006e38:	f023 0301 	bic.w	r3, r3, #1
 8006e3c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006e3e:	4b04      	ldr	r3, [pc, #16]	; (8006e50 <HAL_FLASH_Program+0xa0>)
 8006e40:	2200      	movs	r2, #0
 8006e42:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006e44:	7dfb      	ldrb	r3, [r7, #23]
}
 8006e46:	4618      	mov	r0, r3
 8006e48:	3718      	adds	r7, #24
 8006e4a:	46bd      	mov	sp, r7
 8006e4c:	bd80      	pop	{r7, pc}
 8006e4e:	bf00      	nop
 8006e50:	20000560 	.word	0x20000560
 8006e54:	40023c00 	.word	0x40023c00

08006e58 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006e58:	b480      	push	{r7}
 8006e5a:	b083      	sub	sp, #12
 8006e5c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006e5e:	2300      	movs	r3, #0
 8006e60:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006e62:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <HAL_FLASH_Unlock+0x38>)
 8006e64:	691b      	ldr	r3, [r3, #16]
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	da0b      	bge.n	8006e82 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006e6a:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <HAL_FLASH_Unlock+0x38>)
 8006e6c:	4a09      	ldr	r2, [pc, #36]	; (8006e94 <HAL_FLASH_Unlock+0x3c>)
 8006e6e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006e70:	4b07      	ldr	r3, [pc, #28]	; (8006e90 <HAL_FLASH_Unlock+0x38>)
 8006e72:	4a09      	ldr	r2, [pc, #36]	; (8006e98 <HAL_FLASH_Unlock+0x40>)
 8006e74:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006e76:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <HAL_FLASH_Unlock+0x38>)
 8006e78:	691b      	ldr	r3, [r3, #16]
 8006e7a:	2b00      	cmp	r3, #0
 8006e7c:	da01      	bge.n	8006e82 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006e82:	79fb      	ldrb	r3, [r7, #7]
}
 8006e84:	4618      	mov	r0, r3
 8006e86:	370c      	adds	r7, #12
 8006e88:	46bd      	mov	sp, r7
 8006e8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e8e:	4770      	bx	lr
 8006e90:	40023c00 	.word	0x40023c00
 8006e94:	45670123 	.word	0x45670123
 8006e98:	cdef89ab 	.word	0xcdef89ab

08006e9c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006e9c:	b480      	push	{r7}
 8006e9e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006ea0:	4b05      	ldr	r3, [pc, #20]	; (8006eb8 <HAL_FLASH_Lock+0x1c>)
 8006ea2:	691b      	ldr	r3, [r3, #16]
 8006ea4:	4a04      	ldr	r2, [pc, #16]	; (8006eb8 <HAL_FLASH_Lock+0x1c>)
 8006ea6:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006eaa:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006eac:	2300      	movs	r3, #0
}
 8006eae:	4618      	mov	r0, r3
 8006eb0:	46bd      	mov	sp, r7
 8006eb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006eb6:	4770      	bx	lr
 8006eb8:	40023c00 	.word	0x40023c00

08006ebc <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8006ebc:	b480      	push	{r7}
 8006ebe:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006ec0:	4b03      	ldr	r3, [pc, #12]	; (8006ed0 <HAL_FLASH_GetError+0x14>)
 8006ec2:	69db      	ldr	r3, [r3, #28]
}  
 8006ec4:	4618      	mov	r0, r3
 8006ec6:	46bd      	mov	sp, r7
 8006ec8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ecc:	4770      	bx	lr
 8006ece:	bf00      	nop
 8006ed0:	20000560 	.word	0x20000560

08006ed4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006ed4:	b580      	push	{r7, lr}
 8006ed6:	b084      	sub	sp, #16
 8006ed8:	af00      	add	r7, sp, #0
 8006eda:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006edc:	2300      	movs	r3, #0
 8006ede:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006ee0:	4b1a      	ldr	r3, [pc, #104]	; (8006f4c <FLASH_WaitForLastOperation+0x78>)
 8006ee2:	2200      	movs	r2, #0
 8006ee4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006ee6:	f7ff fd75 	bl	80069d4 <HAL_GetTick>
 8006eea:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006eec:	e010      	b.n	8006f10 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006ef4:	d00c      	beq.n	8006f10 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	2b00      	cmp	r3, #0
 8006efa:	d007      	beq.n	8006f0c <FLASH_WaitForLastOperation+0x38>
 8006efc:	f7ff fd6a 	bl	80069d4 <HAL_GetTick>
 8006f00:	4602      	mov	r2, r0
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	1ad3      	subs	r3, r2, r3
 8006f06:	687a      	ldr	r2, [r7, #4]
 8006f08:	429a      	cmp	r2, r3
 8006f0a:	d201      	bcs.n	8006f10 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006f0c:	2303      	movs	r3, #3
 8006f0e:	e019      	b.n	8006f44 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006f10:	4b0f      	ldr	r3, [pc, #60]	; (8006f50 <FLASH_WaitForLastOperation+0x7c>)
 8006f12:	68db      	ldr	r3, [r3, #12]
 8006f14:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f18:	2b00      	cmp	r3, #0
 8006f1a:	d1e8      	bne.n	8006eee <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006f1c:	4b0c      	ldr	r3, [pc, #48]	; (8006f50 <FLASH_WaitForLastOperation+0x7c>)
 8006f1e:	68db      	ldr	r3, [r3, #12]
 8006f20:	f003 0301 	and.w	r3, r3, #1
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d002      	beq.n	8006f2e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006f28:	4b09      	ldr	r3, [pc, #36]	; (8006f50 <FLASH_WaitForLastOperation+0x7c>)
 8006f2a:	2201      	movs	r2, #1
 8006f2c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006f2e:	4b08      	ldr	r3, [pc, #32]	; (8006f50 <FLASH_WaitForLastOperation+0x7c>)
 8006f30:	68db      	ldr	r3, [r3, #12]
 8006f32:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006f3a:	f000 f8a5 	bl	8007088 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006f3e:	2301      	movs	r3, #1
 8006f40:	e000      	b.n	8006f44 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006f42:	2300      	movs	r3, #0
  
}  
 8006f44:	4618      	mov	r0, r3
 8006f46:	3710      	adds	r7, #16
 8006f48:	46bd      	mov	sp, r7
 8006f4a:	bd80      	pop	{r7, pc}
 8006f4c:	20000560 	.word	0x20000560
 8006f50:	40023c00 	.word	0x40023c00

08006f54 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006f54:	b480      	push	{r7}
 8006f56:	b085      	sub	sp, #20
 8006f58:	af00      	add	r7, sp, #0
 8006f5a:	60f8      	str	r0, [r7, #12]
 8006f5c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006f60:	4b14      	ldr	r3, [pc, #80]	; (8006fb4 <FLASH_Program_DoubleWord+0x60>)
 8006f62:	691b      	ldr	r3, [r3, #16]
 8006f64:	4a13      	ldr	r2, [pc, #76]	; (8006fb4 <FLASH_Program_DoubleWord+0x60>)
 8006f66:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006f6a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006f6c:	4b11      	ldr	r3, [pc, #68]	; (8006fb4 <FLASH_Program_DoubleWord+0x60>)
 8006f6e:	691b      	ldr	r3, [r3, #16]
 8006f70:	4a10      	ldr	r2, [pc, #64]	; (8006fb4 <FLASH_Program_DoubleWord+0x60>)
 8006f72:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006f76:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006f78:	4b0e      	ldr	r3, [pc, #56]	; (8006fb4 <FLASH_Program_DoubleWord+0x60>)
 8006f7a:	691b      	ldr	r3, [r3, #16]
 8006f7c:	4a0d      	ldr	r2, [pc, #52]	; (8006fb4 <FLASH_Program_DoubleWord+0x60>)
 8006f7e:	f043 0301 	orr.w	r3, r3, #1
 8006f82:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	683a      	ldr	r2, [r7, #0]
 8006f88:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8006f8a:	f3bf 8f6f 	isb	sy
}
 8006f8e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006f90:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006f94:	f04f 0200 	mov.w	r2, #0
 8006f98:	f04f 0300 	mov.w	r3, #0
 8006f9c:	000a      	movs	r2, r1
 8006f9e:	2300      	movs	r3, #0
 8006fa0:	68f9      	ldr	r1, [r7, #12]
 8006fa2:	3104      	adds	r1, #4
 8006fa4:	4613      	mov	r3, r2
 8006fa6:	600b      	str	r3, [r1, #0]
}
 8006fa8:	bf00      	nop
 8006faa:	3714      	adds	r7, #20
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr
 8006fb4:	40023c00 	.word	0x40023c00

08006fb8 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006fb8:	b480      	push	{r7}
 8006fba:	b083      	sub	sp, #12
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	; (8006ff8 <FLASH_Program_Word+0x40>)
 8006fc4:	691b      	ldr	r3, [r3, #16]
 8006fc6:	4a0c      	ldr	r2, [pc, #48]	; (8006ff8 <FLASH_Program_Word+0x40>)
 8006fc8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006fcc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8006fce:	4b0a      	ldr	r3, [pc, #40]	; (8006ff8 <FLASH_Program_Word+0x40>)
 8006fd0:	691b      	ldr	r3, [r3, #16]
 8006fd2:	4a09      	ldr	r2, [pc, #36]	; (8006ff8 <FLASH_Program_Word+0x40>)
 8006fd4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006fd8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006fda:	4b07      	ldr	r3, [pc, #28]	; (8006ff8 <FLASH_Program_Word+0x40>)
 8006fdc:	691b      	ldr	r3, [r3, #16]
 8006fde:	4a06      	ldr	r2, [pc, #24]	; (8006ff8 <FLASH_Program_Word+0x40>)
 8006fe0:	f043 0301 	orr.w	r3, r3, #1
 8006fe4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006fe6:	687b      	ldr	r3, [r7, #4]
 8006fe8:	683a      	ldr	r2, [r7, #0]
 8006fea:	601a      	str	r2, [r3, #0]
}
 8006fec:	bf00      	nop
 8006fee:	370c      	adds	r7, #12
 8006ff0:	46bd      	mov	sp, r7
 8006ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ff6:	4770      	bx	lr
 8006ff8:	40023c00 	.word	0x40023c00

08006ffc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8006ffc:	b480      	push	{r7}
 8006ffe:	b083      	sub	sp, #12
 8007000:	af00      	add	r7, sp, #0
 8007002:	6078      	str	r0, [r7, #4]
 8007004:	460b      	mov	r3, r1
 8007006:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007008:	4b0d      	ldr	r3, [pc, #52]	; (8007040 <FLASH_Program_HalfWord+0x44>)
 800700a:	691b      	ldr	r3, [r3, #16]
 800700c:	4a0c      	ldr	r2, [pc, #48]	; (8007040 <FLASH_Program_HalfWord+0x44>)
 800700e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007012:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007014:	4b0a      	ldr	r3, [pc, #40]	; (8007040 <FLASH_Program_HalfWord+0x44>)
 8007016:	691b      	ldr	r3, [r3, #16]
 8007018:	4a09      	ldr	r2, [pc, #36]	; (8007040 <FLASH_Program_HalfWord+0x44>)
 800701a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800701e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007020:	4b07      	ldr	r3, [pc, #28]	; (8007040 <FLASH_Program_HalfWord+0x44>)
 8007022:	691b      	ldr	r3, [r3, #16]
 8007024:	4a06      	ldr	r2, [pc, #24]	; (8007040 <FLASH_Program_HalfWord+0x44>)
 8007026:	f043 0301 	orr.w	r3, r3, #1
 800702a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800702c:	687b      	ldr	r3, [r7, #4]
 800702e:	887a      	ldrh	r2, [r7, #2]
 8007030:	801a      	strh	r2, [r3, #0]
}
 8007032:	bf00      	nop
 8007034:	370c      	adds	r7, #12
 8007036:	46bd      	mov	sp, r7
 8007038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703c:	4770      	bx	lr
 800703e:	bf00      	nop
 8007040:	40023c00 	.word	0x40023c00

08007044 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007044:	b480      	push	{r7}
 8007046:	b083      	sub	sp, #12
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]
 800704c:	460b      	mov	r3, r1
 800704e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007050:	4b0c      	ldr	r3, [pc, #48]	; (8007084 <FLASH_Program_Byte+0x40>)
 8007052:	691b      	ldr	r3, [r3, #16]
 8007054:	4a0b      	ldr	r2, [pc, #44]	; (8007084 <FLASH_Program_Byte+0x40>)
 8007056:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800705a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 800705c:	4b09      	ldr	r3, [pc, #36]	; (8007084 <FLASH_Program_Byte+0x40>)
 800705e:	4a09      	ldr	r2, [pc, #36]	; (8007084 <FLASH_Program_Byte+0x40>)
 8007060:	691b      	ldr	r3, [r3, #16]
 8007062:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007064:	4b07      	ldr	r3, [pc, #28]	; (8007084 <FLASH_Program_Byte+0x40>)
 8007066:	691b      	ldr	r3, [r3, #16]
 8007068:	4a06      	ldr	r2, [pc, #24]	; (8007084 <FLASH_Program_Byte+0x40>)
 800706a:	f043 0301 	orr.w	r3, r3, #1
 800706e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007070:	687b      	ldr	r3, [r7, #4]
 8007072:	78fa      	ldrb	r2, [r7, #3]
 8007074:	701a      	strb	r2, [r3, #0]
}
 8007076:	bf00      	nop
 8007078:	370c      	adds	r7, #12
 800707a:	46bd      	mov	sp, r7
 800707c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007080:	4770      	bx	lr
 8007082:	bf00      	nop
 8007084:	40023c00 	.word	0x40023c00

08007088 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007088:	b480      	push	{r7}
 800708a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800708c:	4b27      	ldr	r3, [pc, #156]	; (800712c <FLASH_SetErrorCode+0xa4>)
 800708e:	68db      	ldr	r3, [r3, #12]
 8007090:	f003 0310 	and.w	r3, r3, #16
 8007094:	2b00      	cmp	r3, #0
 8007096:	d008      	beq.n	80070aa <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007098:	4b25      	ldr	r3, [pc, #148]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 800709a:	69db      	ldr	r3, [r3, #28]
 800709c:	f043 0310 	orr.w	r3, r3, #16
 80070a0:	4a23      	ldr	r2, [pc, #140]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 80070a2:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 80070a4:	4b21      	ldr	r3, [pc, #132]	; (800712c <FLASH_SetErrorCode+0xa4>)
 80070a6:	2210      	movs	r2, #16
 80070a8:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 80070aa:	4b20      	ldr	r3, [pc, #128]	; (800712c <FLASH_SetErrorCode+0xa4>)
 80070ac:	68db      	ldr	r3, [r3, #12]
 80070ae:	f003 0320 	and.w	r3, r3, #32
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d008      	beq.n	80070c8 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 80070b6:	4b1e      	ldr	r3, [pc, #120]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 80070b8:	69db      	ldr	r3, [r3, #28]
 80070ba:	f043 0308 	orr.w	r3, r3, #8
 80070be:	4a1c      	ldr	r2, [pc, #112]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 80070c0:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 80070c2:	4b1a      	ldr	r3, [pc, #104]	; (800712c <FLASH_SetErrorCode+0xa4>)
 80070c4:	2220      	movs	r2, #32
 80070c6:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 80070c8:	4b18      	ldr	r3, [pc, #96]	; (800712c <FLASH_SetErrorCode+0xa4>)
 80070ca:	68db      	ldr	r3, [r3, #12]
 80070cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	d008      	beq.n	80070e6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 80070d4:	4b16      	ldr	r3, [pc, #88]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 80070d6:	69db      	ldr	r3, [r3, #28]
 80070d8:	f043 0304 	orr.w	r3, r3, #4
 80070dc:	4a14      	ldr	r2, [pc, #80]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 80070de:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 80070e0:	4b12      	ldr	r3, [pc, #72]	; (800712c <FLASH_SetErrorCode+0xa4>)
 80070e2:	2240      	movs	r2, #64	; 0x40
 80070e4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 80070e6:	4b11      	ldr	r3, [pc, #68]	; (800712c <FLASH_SetErrorCode+0xa4>)
 80070e8:	68db      	ldr	r3, [r3, #12]
 80070ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80070ee:	2b00      	cmp	r3, #0
 80070f0:	d008      	beq.n	8007104 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 80070f2:	4b0f      	ldr	r3, [pc, #60]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 80070f4:	69db      	ldr	r3, [r3, #28]
 80070f6:	f043 0302 	orr.w	r3, r3, #2
 80070fa:	4a0d      	ldr	r2, [pc, #52]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 80070fc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 80070fe:	4b0b      	ldr	r3, [pc, #44]	; (800712c <FLASH_SetErrorCode+0xa4>)
 8007100:	2280      	movs	r2, #128	; 0x80
 8007102:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007104:	4b09      	ldr	r3, [pc, #36]	; (800712c <FLASH_SetErrorCode+0xa4>)
 8007106:	68db      	ldr	r3, [r3, #12]
 8007108:	f003 0302 	and.w	r3, r3, #2
 800710c:	2b00      	cmp	r3, #0
 800710e:	d008      	beq.n	8007122 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007110:	4b07      	ldr	r3, [pc, #28]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 8007112:	69db      	ldr	r3, [r3, #28]
 8007114:	f043 0320 	orr.w	r3, r3, #32
 8007118:	4a05      	ldr	r2, [pc, #20]	; (8007130 <FLASH_SetErrorCode+0xa8>)
 800711a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800711c:	4b03      	ldr	r3, [pc, #12]	; (800712c <FLASH_SetErrorCode+0xa4>)
 800711e:	2202      	movs	r2, #2
 8007120:	60da      	str	r2, [r3, #12]
  }
}
 8007122:	bf00      	nop
 8007124:	46bd      	mov	sp, r7
 8007126:	f85d 7b04 	ldr.w	r7, [sp], #4
 800712a:	4770      	bx	lr
 800712c:	40023c00 	.word	0x40023c00
 8007130:	20000560 	.word	0x20000560

08007134 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007134:	b580      	push	{r7, lr}
 8007136:	b084      	sub	sp, #16
 8007138:	af00      	add	r7, sp, #0
 800713a:	6078      	str	r0, [r7, #4]
 800713c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800713e:	2301      	movs	r3, #1
 8007140:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007142:	2300      	movs	r3, #0
 8007144:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007146:	4b31      	ldr	r3, [pc, #196]	; (800720c <HAL_FLASHEx_Erase+0xd8>)
 8007148:	7e1b      	ldrb	r3, [r3, #24]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d101      	bne.n	8007152 <HAL_FLASHEx_Erase+0x1e>
 800714e:	2302      	movs	r3, #2
 8007150:	e058      	b.n	8007204 <HAL_FLASHEx_Erase+0xd0>
 8007152:	4b2e      	ldr	r3, [pc, #184]	; (800720c <HAL_FLASHEx_Erase+0xd8>)
 8007154:	2201      	movs	r2, #1
 8007156:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007158:	f24c 3050 	movw	r0, #50000	; 0xc350
 800715c:	f7ff feba 	bl	8006ed4 <FLASH_WaitForLastOperation>
 8007160:	4603      	mov	r3, r0
 8007162:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007164:	7bfb      	ldrb	r3, [r7, #15]
 8007166:	2b00      	cmp	r3, #0
 8007168:	d148      	bne.n	80071fc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 800716a:	683b      	ldr	r3, [r7, #0]
 800716c:	f04f 32ff 	mov.w	r2, #4294967295
 8007170:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007172:	687b      	ldr	r3, [r7, #4]
 8007174:	681b      	ldr	r3, [r3, #0]
 8007176:	2b01      	cmp	r3, #1
 8007178:	d115      	bne.n	80071a6 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 800717a:	687b      	ldr	r3, [r7, #4]
 800717c:	691b      	ldr	r3, [r3, #16]
 800717e:	b2da      	uxtb	r2, r3
 8007180:	687b      	ldr	r3, [r7, #4]
 8007182:	685b      	ldr	r3, [r3, #4]
 8007184:	4619      	mov	r1, r3
 8007186:	4610      	mov	r0, r2
 8007188:	f000 f844 	bl	8007214 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800718c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007190:	f7ff fea0 	bl	8006ed4 <FLASH_WaitForLastOperation>
 8007194:	4603      	mov	r3, r0
 8007196:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007198:	4b1d      	ldr	r3, [pc, #116]	; (8007210 <HAL_FLASHEx_Erase+0xdc>)
 800719a:	691b      	ldr	r3, [r3, #16]
 800719c:	4a1c      	ldr	r2, [pc, #112]	; (8007210 <HAL_FLASHEx_Erase+0xdc>)
 800719e:	f023 0304 	bic.w	r3, r3, #4
 80071a2:	6113      	str	r3, [r2, #16]
 80071a4:	e028      	b.n	80071f8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80071a6:	687b      	ldr	r3, [r7, #4]
 80071a8:	689b      	ldr	r3, [r3, #8]
 80071aa:	60bb      	str	r3, [r7, #8]
 80071ac:	e01c      	b.n	80071e8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 80071ae:	687b      	ldr	r3, [r7, #4]
 80071b0:	691b      	ldr	r3, [r3, #16]
 80071b2:	b2db      	uxtb	r3, r3
 80071b4:	4619      	mov	r1, r3
 80071b6:	68b8      	ldr	r0, [r7, #8]
 80071b8:	f000 f850 	bl	800725c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071bc:	f24c 3050 	movw	r0, #50000	; 0xc350
 80071c0:	f7ff fe88 	bl	8006ed4 <FLASH_WaitForLastOperation>
 80071c4:	4603      	mov	r3, r0
 80071c6:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 80071c8:	4b11      	ldr	r3, [pc, #68]	; (8007210 <HAL_FLASHEx_Erase+0xdc>)
 80071ca:	691b      	ldr	r3, [r3, #16]
 80071cc:	4a10      	ldr	r2, [pc, #64]	; (8007210 <HAL_FLASHEx_Erase+0xdc>)
 80071ce:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 80071d2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 80071d4:	7bfb      	ldrb	r3, [r7, #15]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d003      	beq.n	80071e2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 80071da:	683b      	ldr	r3, [r7, #0]
 80071dc:	68ba      	ldr	r2, [r7, #8]
 80071de:	601a      	str	r2, [r3, #0]
          break;
 80071e0:	e00a      	b.n	80071f8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 80071e2:	68bb      	ldr	r3, [r7, #8]
 80071e4:	3301      	adds	r3, #1
 80071e6:	60bb      	str	r3, [r7, #8]
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	68da      	ldr	r2, [r3, #12]
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	689b      	ldr	r3, [r3, #8]
 80071f0:	4413      	add	r3, r2
 80071f2:	68ba      	ldr	r2, [r7, #8]
 80071f4:	429a      	cmp	r2, r3
 80071f6:	d3da      	bcc.n	80071ae <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 80071f8:	f000 f878 	bl	80072ec <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80071fc:	4b03      	ldr	r3, [pc, #12]	; (800720c <HAL_FLASHEx_Erase+0xd8>)
 80071fe:	2200      	movs	r2, #0
 8007200:	761a      	strb	r2, [r3, #24]

  return status;
 8007202:	7bfb      	ldrb	r3, [r7, #15]
}
 8007204:	4618      	mov	r0, r3
 8007206:	3710      	adds	r7, #16
 8007208:	46bd      	mov	sp, r7
 800720a:	bd80      	pop	{r7, pc}
 800720c:	20000560 	.word	0x20000560
 8007210:	40023c00 	.word	0x40023c00

08007214 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007214:	b480      	push	{r7}
 8007216:	b083      	sub	sp, #12
 8007218:	af00      	add	r7, sp, #0
 800721a:	4603      	mov	r3, r0
 800721c:	6039      	str	r1, [r7, #0]
 800721e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007220:	4b0d      	ldr	r3, [pc, #52]	; (8007258 <FLASH_MassErase+0x44>)
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	4a0c      	ldr	r2, [pc, #48]	; (8007258 <FLASH_MassErase+0x44>)
 8007226:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800722a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800722c:	4b0a      	ldr	r3, [pc, #40]	; (8007258 <FLASH_MassErase+0x44>)
 800722e:	691b      	ldr	r3, [r3, #16]
 8007230:	4a09      	ldr	r2, [pc, #36]	; (8007258 <FLASH_MassErase+0x44>)
 8007232:	f043 0304 	orr.w	r3, r3, #4
 8007236:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8007238:	4b07      	ldr	r3, [pc, #28]	; (8007258 <FLASH_MassErase+0x44>)
 800723a:	691a      	ldr	r2, [r3, #16]
 800723c:	79fb      	ldrb	r3, [r7, #7]
 800723e:	021b      	lsls	r3, r3, #8
 8007240:	4313      	orrs	r3, r2
 8007242:	4a05      	ldr	r2, [pc, #20]	; (8007258 <FLASH_MassErase+0x44>)
 8007244:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007248:	6113      	str	r3, [r2, #16]
}
 800724a:	bf00      	nop
 800724c:	370c      	adds	r7, #12
 800724e:	46bd      	mov	sp, r7
 8007250:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007254:	4770      	bx	lr
 8007256:	bf00      	nop
 8007258:	40023c00 	.word	0x40023c00

0800725c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800725c:	b480      	push	{r7}
 800725e:	b085      	sub	sp, #20
 8007260:	af00      	add	r7, sp, #0
 8007262:	6078      	str	r0, [r7, #4]
 8007264:	460b      	mov	r3, r1
 8007266:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8007268:	2300      	movs	r3, #0
 800726a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800726c:	78fb      	ldrb	r3, [r7, #3]
 800726e:	2b00      	cmp	r3, #0
 8007270:	d102      	bne.n	8007278 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8007272:	2300      	movs	r3, #0
 8007274:	60fb      	str	r3, [r7, #12]
 8007276:	e010      	b.n	800729a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007278:	78fb      	ldrb	r3, [r7, #3]
 800727a:	2b01      	cmp	r3, #1
 800727c:	d103      	bne.n	8007286 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800727e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8007282:	60fb      	str	r3, [r7, #12]
 8007284:	e009      	b.n	800729a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8007286:	78fb      	ldrb	r3, [r7, #3]
 8007288:	2b02      	cmp	r3, #2
 800728a:	d103      	bne.n	8007294 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800728c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007290:	60fb      	str	r3, [r7, #12]
 8007292:	e002      	b.n	800729a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8007294:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007298:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800729a:	4b13      	ldr	r3, [pc, #76]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 800729c:	691b      	ldr	r3, [r3, #16]
 800729e:	4a12      	ldr	r2, [pc, #72]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 80072a0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072a4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 80072a6:	4b10      	ldr	r3, [pc, #64]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 80072a8:	691a      	ldr	r2, [r3, #16]
 80072aa:	490f      	ldr	r1, [pc, #60]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 80072ac:	68fb      	ldr	r3, [r7, #12]
 80072ae:	4313      	orrs	r3, r2
 80072b0:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80072b2:	4b0d      	ldr	r3, [pc, #52]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 80072b4:	691b      	ldr	r3, [r3, #16]
 80072b6:	4a0c      	ldr	r2, [pc, #48]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 80072b8:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80072bc:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80072be:	4b0a      	ldr	r3, [pc, #40]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 80072c0:	691a      	ldr	r2, [r3, #16]
 80072c2:	687b      	ldr	r3, [r7, #4]
 80072c4:	00db      	lsls	r3, r3, #3
 80072c6:	4313      	orrs	r3, r2
 80072c8:	4a07      	ldr	r2, [pc, #28]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 80072ca:	f043 0302 	orr.w	r3, r3, #2
 80072ce:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80072d0:	4b05      	ldr	r3, [pc, #20]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 80072d2:	691b      	ldr	r3, [r3, #16]
 80072d4:	4a04      	ldr	r2, [pc, #16]	; (80072e8 <FLASH_Erase_Sector+0x8c>)
 80072d6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072da:	6113      	str	r3, [r2, #16]
}
 80072dc:	bf00      	nop
 80072de:	3714      	adds	r7, #20
 80072e0:	46bd      	mov	sp, r7
 80072e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e6:	4770      	bx	lr
 80072e8:	40023c00 	.word	0x40023c00

080072ec <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80072ec:	b480      	push	{r7}
 80072ee:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80072f0:	4b20      	ldr	r3, [pc, #128]	; (8007374 <FLASH_FlushCaches+0x88>)
 80072f2:	681b      	ldr	r3, [r3, #0]
 80072f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80072f8:	2b00      	cmp	r3, #0
 80072fa:	d017      	beq.n	800732c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80072fc:	4b1d      	ldr	r3, [pc, #116]	; (8007374 <FLASH_FlushCaches+0x88>)
 80072fe:	681b      	ldr	r3, [r3, #0]
 8007300:	4a1c      	ldr	r2, [pc, #112]	; (8007374 <FLASH_FlushCaches+0x88>)
 8007302:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007306:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007308:	4b1a      	ldr	r3, [pc, #104]	; (8007374 <FLASH_FlushCaches+0x88>)
 800730a:	681b      	ldr	r3, [r3, #0]
 800730c:	4a19      	ldr	r2, [pc, #100]	; (8007374 <FLASH_FlushCaches+0x88>)
 800730e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8007312:	6013      	str	r3, [r2, #0]
 8007314:	4b17      	ldr	r3, [pc, #92]	; (8007374 <FLASH_FlushCaches+0x88>)
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	4a16      	ldr	r2, [pc, #88]	; (8007374 <FLASH_FlushCaches+0x88>)
 800731a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800731e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007320:	4b14      	ldr	r3, [pc, #80]	; (8007374 <FLASH_FlushCaches+0x88>)
 8007322:	681b      	ldr	r3, [r3, #0]
 8007324:	4a13      	ldr	r2, [pc, #76]	; (8007374 <FLASH_FlushCaches+0x88>)
 8007326:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800732a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 800732c:	4b11      	ldr	r3, [pc, #68]	; (8007374 <FLASH_FlushCaches+0x88>)
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8007334:	2b00      	cmp	r3, #0
 8007336:	d017      	beq.n	8007368 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8007338:	4b0e      	ldr	r3, [pc, #56]	; (8007374 <FLASH_FlushCaches+0x88>)
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	4a0d      	ldr	r2, [pc, #52]	; (8007374 <FLASH_FlushCaches+0x88>)
 800733e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007342:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8007344:	4b0b      	ldr	r3, [pc, #44]	; (8007374 <FLASH_FlushCaches+0x88>)
 8007346:	681b      	ldr	r3, [r3, #0]
 8007348:	4a0a      	ldr	r2, [pc, #40]	; (8007374 <FLASH_FlushCaches+0x88>)
 800734a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800734e:	6013      	str	r3, [r2, #0]
 8007350:	4b08      	ldr	r3, [pc, #32]	; (8007374 <FLASH_FlushCaches+0x88>)
 8007352:	681b      	ldr	r3, [r3, #0]
 8007354:	4a07      	ldr	r2, [pc, #28]	; (8007374 <FLASH_FlushCaches+0x88>)
 8007356:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800735a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800735c:	4b05      	ldr	r3, [pc, #20]	; (8007374 <FLASH_FlushCaches+0x88>)
 800735e:	681b      	ldr	r3, [r3, #0]
 8007360:	4a04      	ldr	r2, [pc, #16]	; (8007374 <FLASH_FlushCaches+0x88>)
 8007362:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8007366:	6013      	str	r3, [r2, #0]
  }
}
 8007368:	bf00      	nop
 800736a:	46bd      	mov	sp, r7
 800736c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007370:	4770      	bx	lr
 8007372:	bf00      	nop
 8007374:	40023c00 	.word	0x40023c00

08007378 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007378:	b480      	push	{r7}
 800737a:	b089      	sub	sp, #36	; 0x24
 800737c:	af00      	add	r7, sp, #0
 800737e:	6078      	str	r0, [r7, #4]
 8007380:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8007382:	2300      	movs	r3, #0
 8007384:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8007386:	2300      	movs	r3, #0
 8007388:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800738a:	2300      	movs	r3, #0
 800738c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800738e:	2300      	movs	r3, #0
 8007390:	61fb      	str	r3, [r7, #28]
 8007392:	e16b      	b.n	800766c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8007394:	2201      	movs	r2, #1
 8007396:	69fb      	ldr	r3, [r7, #28]
 8007398:	fa02 f303 	lsl.w	r3, r2, r3
 800739c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800739e:	683b      	ldr	r3, [r7, #0]
 80073a0:	681b      	ldr	r3, [r3, #0]
 80073a2:	697a      	ldr	r2, [r7, #20]
 80073a4:	4013      	ands	r3, r2
 80073a6:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80073a8:	693a      	ldr	r2, [r7, #16]
 80073aa:	697b      	ldr	r3, [r7, #20]
 80073ac:	429a      	cmp	r2, r3
 80073ae:	f040 815a 	bne.w	8007666 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	685b      	ldr	r3, [r3, #4]
 80073b6:	f003 0303 	and.w	r3, r3, #3
 80073ba:	2b01      	cmp	r3, #1
 80073bc:	d005      	beq.n	80073ca <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80073be:	683b      	ldr	r3, [r7, #0]
 80073c0:	685b      	ldr	r3, [r3, #4]
 80073c2:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80073c6:	2b02      	cmp	r3, #2
 80073c8:	d130      	bne.n	800742c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	689b      	ldr	r3, [r3, #8]
 80073ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80073d0:	69fb      	ldr	r3, [r7, #28]
 80073d2:	005b      	lsls	r3, r3, #1
 80073d4:	2203      	movs	r2, #3
 80073d6:	fa02 f303 	lsl.w	r3, r2, r3
 80073da:	43db      	mvns	r3, r3
 80073dc:	69ba      	ldr	r2, [r7, #24]
 80073de:	4013      	ands	r3, r2
 80073e0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80073e2:	683b      	ldr	r3, [r7, #0]
 80073e4:	68da      	ldr	r2, [r3, #12]
 80073e6:	69fb      	ldr	r3, [r7, #28]
 80073e8:	005b      	lsls	r3, r3, #1
 80073ea:	fa02 f303 	lsl.w	r3, r2, r3
 80073ee:	69ba      	ldr	r2, [r7, #24]
 80073f0:	4313      	orrs	r3, r2
 80073f2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	69ba      	ldr	r2, [r7, #24]
 80073f8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	685b      	ldr	r3, [r3, #4]
 80073fe:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007400:	2201      	movs	r2, #1
 8007402:	69fb      	ldr	r3, [r7, #28]
 8007404:	fa02 f303 	lsl.w	r3, r2, r3
 8007408:	43db      	mvns	r3, r3
 800740a:	69ba      	ldr	r2, [r7, #24]
 800740c:	4013      	ands	r3, r2
 800740e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007410:	683b      	ldr	r3, [r7, #0]
 8007412:	685b      	ldr	r3, [r3, #4]
 8007414:	091b      	lsrs	r3, r3, #4
 8007416:	f003 0201 	and.w	r2, r3, #1
 800741a:	69fb      	ldr	r3, [r7, #28]
 800741c:	fa02 f303 	lsl.w	r3, r2, r3
 8007420:	69ba      	ldr	r2, [r7, #24]
 8007422:	4313      	orrs	r3, r2
 8007424:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	69ba      	ldr	r2, [r7, #24]
 800742a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800742c:	683b      	ldr	r3, [r7, #0]
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	f003 0303 	and.w	r3, r3, #3
 8007434:	2b03      	cmp	r3, #3
 8007436:	d017      	beq.n	8007468 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8007438:	687b      	ldr	r3, [r7, #4]
 800743a:	68db      	ldr	r3, [r3, #12]
 800743c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800743e:	69fb      	ldr	r3, [r7, #28]
 8007440:	005b      	lsls	r3, r3, #1
 8007442:	2203      	movs	r2, #3
 8007444:	fa02 f303 	lsl.w	r3, r2, r3
 8007448:	43db      	mvns	r3, r3
 800744a:	69ba      	ldr	r2, [r7, #24]
 800744c:	4013      	ands	r3, r2
 800744e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8007450:	683b      	ldr	r3, [r7, #0]
 8007452:	689a      	ldr	r2, [r3, #8]
 8007454:	69fb      	ldr	r3, [r7, #28]
 8007456:	005b      	lsls	r3, r3, #1
 8007458:	fa02 f303 	lsl.w	r3, r2, r3
 800745c:	69ba      	ldr	r2, [r7, #24]
 800745e:	4313      	orrs	r3, r2
 8007460:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8007462:	687b      	ldr	r3, [r7, #4]
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007468:	683b      	ldr	r3, [r7, #0]
 800746a:	685b      	ldr	r3, [r3, #4]
 800746c:	f003 0303 	and.w	r3, r3, #3
 8007470:	2b02      	cmp	r3, #2
 8007472:	d123      	bne.n	80074bc <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8007474:	69fb      	ldr	r3, [r7, #28]
 8007476:	08da      	lsrs	r2, r3, #3
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	3208      	adds	r2, #8
 800747c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007480:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8007482:	69fb      	ldr	r3, [r7, #28]
 8007484:	f003 0307 	and.w	r3, r3, #7
 8007488:	009b      	lsls	r3, r3, #2
 800748a:	220f      	movs	r2, #15
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	43db      	mvns	r3, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	4013      	ands	r3, r2
 8007496:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	691a      	ldr	r2, [r3, #16]
 800749c:	69fb      	ldr	r3, [r7, #28]
 800749e:	f003 0307 	and.w	r3, r3, #7
 80074a2:	009b      	lsls	r3, r3, #2
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80074ae:	69fb      	ldr	r3, [r7, #28]
 80074b0:	08da      	lsrs	r2, r3, #3
 80074b2:	687b      	ldr	r3, [r7, #4]
 80074b4:	3208      	adds	r2, #8
 80074b6:	69b9      	ldr	r1, [r7, #24]
 80074b8:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80074bc:	687b      	ldr	r3, [r7, #4]
 80074be:	681b      	ldr	r3, [r3, #0]
 80074c0:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80074c2:	69fb      	ldr	r3, [r7, #28]
 80074c4:	005b      	lsls	r3, r3, #1
 80074c6:	2203      	movs	r2, #3
 80074c8:	fa02 f303 	lsl.w	r3, r2, r3
 80074cc:	43db      	mvns	r3, r3
 80074ce:	69ba      	ldr	r2, [r7, #24]
 80074d0:	4013      	ands	r3, r2
 80074d2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80074d4:	683b      	ldr	r3, [r7, #0]
 80074d6:	685b      	ldr	r3, [r3, #4]
 80074d8:	f003 0203 	and.w	r2, r3, #3
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	fa02 f303 	lsl.w	r3, r2, r3
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80074f8:	2b00      	cmp	r3, #0
 80074fa:	f000 80b4 	beq.w	8007666 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80074fe:	2300      	movs	r3, #0
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	4b60      	ldr	r3, [pc, #384]	; (8007684 <HAL_GPIO_Init+0x30c>)
 8007504:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007506:	4a5f      	ldr	r2, [pc, #380]	; (8007684 <HAL_GPIO_Init+0x30c>)
 8007508:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800750c:	6453      	str	r3, [r2, #68]	; 0x44
 800750e:	4b5d      	ldr	r3, [pc, #372]	; (8007684 <HAL_GPIO_Init+0x30c>)
 8007510:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8007512:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8007516:	60fb      	str	r3, [r7, #12]
 8007518:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 800751a:	4a5b      	ldr	r2, [pc, #364]	; (8007688 <HAL_GPIO_Init+0x310>)
 800751c:	69fb      	ldr	r3, [r7, #28]
 800751e:	089b      	lsrs	r3, r3, #2
 8007520:	3302      	adds	r3, #2
 8007522:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8007526:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8007528:	69fb      	ldr	r3, [r7, #28]
 800752a:	f003 0303 	and.w	r3, r3, #3
 800752e:	009b      	lsls	r3, r3, #2
 8007530:	220f      	movs	r2, #15
 8007532:	fa02 f303 	lsl.w	r3, r2, r3
 8007536:	43db      	mvns	r3, r3
 8007538:	69ba      	ldr	r2, [r7, #24]
 800753a:	4013      	ands	r3, r2
 800753c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	4a52      	ldr	r2, [pc, #328]	; (800768c <HAL_GPIO_Init+0x314>)
 8007542:	4293      	cmp	r3, r2
 8007544:	d02b      	beq.n	800759e <HAL_GPIO_Init+0x226>
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	4a51      	ldr	r2, [pc, #324]	; (8007690 <HAL_GPIO_Init+0x318>)
 800754a:	4293      	cmp	r3, r2
 800754c:	d025      	beq.n	800759a <HAL_GPIO_Init+0x222>
 800754e:	687b      	ldr	r3, [r7, #4]
 8007550:	4a50      	ldr	r2, [pc, #320]	; (8007694 <HAL_GPIO_Init+0x31c>)
 8007552:	4293      	cmp	r3, r2
 8007554:	d01f      	beq.n	8007596 <HAL_GPIO_Init+0x21e>
 8007556:	687b      	ldr	r3, [r7, #4]
 8007558:	4a4f      	ldr	r2, [pc, #316]	; (8007698 <HAL_GPIO_Init+0x320>)
 800755a:	4293      	cmp	r3, r2
 800755c:	d019      	beq.n	8007592 <HAL_GPIO_Init+0x21a>
 800755e:	687b      	ldr	r3, [r7, #4]
 8007560:	4a4e      	ldr	r2, [pc, #312]	; (800769c <HAL_GPIO_Init+0x324>)
 8007562:	4293      	cmp	r3, r2
 8007564:	d013      	beq.n	800758e <HAL_GPIO_Init+0x216>
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	4a4d      	ldr	r2, [pc, #308]	; (80076a0 <HAL_GPIO_Init+0x328>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d00d      	beq.n	800758a <HAL_GPIO_Init+0x212>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	4a4c      	ldr	r2, [pc, #304]	; (80076a4 <HAL_GPIO_Init+0x32c>)
 8007572:	4293      	cmp	r3, r2
 8007574:	d007      	beq.n	8007586 <HAL_GPIO_Init+0x20e>
 8007576:	687b      	ldr	r3, [r7, #4]
 8007578:	4a4b      	ldr	r2, [pc, #300]	; (80076a8 <HAL_GPIO_Init+0x330>)
 800757a:	4293      	cmp	r3, r2
 800757c:	d101      	bne.n	8007582 <HAL_GPIO_Init+0x20a>
 800757e:	2307      	movs	r3, #7
 8007580:	e00e      	b.n	80075a0 <HAL_GPIO_Init+0x228>
 8007582:	2308      	movs	r3, #8
 8007584:	e00c      	b.n	80075a0 <HAL_GPIO_Init+0x228>
 8007586:	2306      	movs	r3, #6
 8007588:	e00a      	b.n	80075a0 <HAL_GPIO_Init+0x228>
 800758a:	2305      	movs	r3, #5
 800758c:	e008      	b.n	80075a0 <HAL_GPIO_Init+0x228>
 800758e:	2304      	movs	r3, #4
 8007590:	e006      	b.n	80075a0 <HAL_GPIO_Init+0x228>
 8007592:	2303      	movs	r3, #3
 8007594:	e004      	b.n	80075a0 <HAL_GPIO_Init+0x228>
 8007596:	2302      	movs	r3, #2
 8007598:	e002      	b.n	80075a0 <HAL_GPIO_Init+0x228>
 800759a:	2301      	movs	r3, #1
 800759c:	e000      	b.n	80075a0 <HAL_GPIO_Init+0x228>
 800759e:	2300      	movs	r3, #0
 80075a0:	69fa      	ldr	r2, [r7, #28]
 80075a2:	f002 0203 	and.w	r2, r2, #3
 80075a6:	0092      	lsls	r2, r2, #2
 80075a8:	4093      	lsls	r3, r2
 80075aa:	69ba      	ldr	r2, [r7, #24]
 80075ac:	4313      	orrs	r3, r2
 80075ae:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80075b0:	4935      	ldr	r1, [pc, #212]	; (8007688 <HAL_GPIO_Init+0x310>)
 80075b2:	69fb      	ldr	r3, [r7, #28]
 80075b4:	089b      	lsrs	r3, r3, #2
 80075b6:	3302      	adds	r3, #2
 80075b8:	69ba      	ldr	r2, [r7, #24]
 80075ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80075be:	4b3b      	ldr	r3, [pc, #236]	; (80076ac <HAL_GPIO_Init+0x334>)
 80075c0:	681b      	ldr	r3, [r3, #0]
 80075c2:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075c4:	693b      	ldr	r3, [r7, #16]
 80075c6:	43db      	mvns	r3, r3
 80075c8:	69ba      	ldr	r2, [r7, #24]
 80075ca:	4013      	ands	r3, r2
 80075cc:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80075ce:	683b      	ldr	r3, [r7, #0]
 80075d0:	685b      	ldr	r3, [r3, #4]
 80075d2:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80075d6:	2b00      	cmp	r3, #0
 80075d8:	d003      	beq.n	80075e2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80075da:	69ba      	ldr	r2, [r7, #24]
 80075dc:	693b      	ldr	r3, [r7, #16]
 80075de:	4313      	orrs	r3, r2
 80075e0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80075e2:	4a32      	ldr	r2, [pc, #200]	; (80076ac <HAL_GPIO_Init+0x334>)
 80075e4:	69bb      	ldr	r3, [r7, #24]
 80075e6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80075e8:	4b30      	ldr	r3, [pc, #192]	; (80076ac <HAL_GPIO_Init+0x334>)
 80075ea:	685b      	ldr	r3, [r3, #4]
 80075ec:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80075ee:	693b      	ldr	r3, [r7, #16]
 80075f0:	43db      	mvns	r3, r3
 80075f2:	69ba      	ldr	r2, [r7, #24]
 80075f4:	4013      	ands	r3, r2
 80075f6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80075f8:	683b      	ldr	r3, [r7, #0]
 80075fa:	685b      	ldr	r3, [r3, #4]
 80075fc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007600:	2b00      	cmp	r3, #0
 8007602:	d003      	beq.n	800760c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8007604:	69ba      	ldr	r2, [r7, #24]
 8007606:	693b      	ldr	r3, [r7, #16]
 8007608:	4313      	orrs	r3, r2
 800760a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800760c:	4a27      	ldr	r2, [pc, #156]	; (80076ac <HAL_GPIO_Init+0x334>)
 800760e:	69bb      	ldr	r3, [r7, #24]
 8007610:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8007612:	4b26      	ldr	r3, [pc, #152]	; (80076ac <HAL_GPIO_Init+0x334>)
 8007614:	689b      	ldr	r3, [r3, #8]
 8007616:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007618:	693b      	ldr	r3, [r7, #16]
 800761a:	43db      	mvns	r3, r3
 800761c:	69ba      	ldr	r2, [r7, #24]
 800761e:	4013      	ands	r3, r2
 8007620:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8007622:	683b      	ldr	r3, [r7, #0]
 8007624:	685b      	ldr	r3, [r3, #4]
 8007626:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800762a:	2b00      	cmp	r3, #0
 800762c:	d003      	beq.n	8007636 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 800762e:	69ba      	ldr	r2, [r7, #24]
 8007630:	693b      	ldr	r3, [r7, #16]
 8007632:	4313      	orrs	r3, r2
 8007634:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8007636:	4a1d      	ldr	r2, [pc, #116]	; (80076ac <HAL_GPIO_Init+0x334>)
 8007638:	69bb      	ldr	r3, [r7, #24]
 800763a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800763c:	4b1b      	ldr	r3, [pc, #108]	; (80076ac <HAL_GPIO_Init+0x334>)
 800763e:	68db      	ldr	r3, [r3, #12]
 8007640:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007642:	693b      	ldr	r3, [r7, #16]
 8007644:	43db      	mvns	r3, r3
 8007646:	69ba      	ldr	r2, [r7, #24]
 8007648:	4013      	ands	r3, r2
 800764a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800764c:	683b      	ldr	r3, [r7, #0]
 800764e:	685b      	ldr	r3, [r3, #4]
 8007650:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8007654:	2b00      	cmp	r3, #0
 8007656:	d003      	beq.n	8007660 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8007658:	69ba      	ldr	r2, [r7, #24]
 800765a:	693b      	ldr	r3, [r7, #16]
 800765c:	4313      	orrs	r3, r2
 800765e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8007660:	4a12      	ldr	r2, [pc, #72]	; (80076ac <HAL_GPIO_Init+0x334>)
 8007662:	69bb      	ldr	r3, [r7, #24]
 8007664:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007666:	69fb      	ldr	r3, [r7, #28]
 8007668:	3301      	adds	r3, #1
 800766a:	61fb      	str	r3, [r7, #28]
 800766c:	69fb      	ldr	r3, [r7, #28]
 800766e:	2b0f      	cmp	r3, #15
 8007670:	f67f ae90 	bls.w	8007394 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8007674:	bf00      	nop
 8007676:	bf00      	nop
 8007678:	3724      	adds	r7, #36	; 0x24
 800767a:	46bd      	mov	sp, r7
 800767c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007680:	4770      	bx	lr
 8007682:	bf00      	nop
 8007684:	40023800 	.word	0x40023800
 8007688:	40013800 	.word	0x40013800
 800768c:	40020000 	.word	0x40020000
 8007690:	40020400 	.word	0x40020400
 8007694:	40020800 	.word	0x40020800
 8007698:	40020c00 	.word	0x40020c00
 800769c:	40021000 	.word	0x40021000
 80076a0:	40021400 	.word	0x40021400
 80076a4:	40021800 	.word	0x40021800
 80076a8:	40021c00 	.word	0x40021c00
 80076ac:	40013c00 	.word	0x40013c00

080076b0 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80076b0:	b480      	push	{r7}
 80076b2:	b085      	sub	sp, #20
 80076b4:	af00      	add	r7, sp, #0
 80076b6:	6078      	str	r0, [r7, #4]
 80076b8:	460b      	mov	r3, r1
 80076ba:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	691a      	ldr	r2, [r3, #16]
 80076c0:	887b      	ldrh	r3, [r7, #2]
 80076c2:	4013      	ands	r3, r2
 80076c4:	2b00      	cmp	r3, #0
 80076c6:	d002      	beq.n	80076ce <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80076c8:	2301      	movs	r3, #1
 80076ca:	73fb      	strb	r3, [r7, #15]
 80076cc:	e001      	b.n	80076d2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80076ce:	2300      	movs	r3, #0
 80076d0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80076d2:	7bfb      	ldrb	r3, [r7, #15]
}
 80076d4:	4618      	mov	r0, r3
 80076d6:	3714      	adds	r7, #20
 80076d8:	46bd      	mov	sp, r7
 80076da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076de:	4770      	bx	lr

080076e0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80076e0:	b480      	push	{r7}
 80076e2:	b083      	sub	sp, #12
 80076e4:	af00      	add	r7, sp, #0
 80076e6:	6078      	str	r0, [r7, #4]
 80076e8:	460b      	mov	r3, r1
 80076ea:	807b      	strh	r3, [r7, #2]
 80076ec:	4613      	mov	r3, r2
 80076ee:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80076f0:	787b      	ldrb	r3, [r7, #1]
 80076f2:	2b00      	cmp	r3, #0
 80076f4:	d003      	beq.n	80076fe <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80076f6:	887a      	ldrh	r2, [r7, #2]
 80076f8:	687b      	ldr	r3, [r7, #4]
 80076fa:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80076fc:	e003      	b.n	8007706 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80076fe:	887b      	ldrh	r3, [r7, #2]
 8007700:	041a      	lsls	r2, r3, #16
 8007702:	687b      	ldr	r3, [r7, #4]
 8007704:	619a      	str	r2, [r3, #24]
}
 8007706:	bf00      	nop
 8007708:	370c      	adds	r7, #12
 800770a:	46bd      	mov	sp, r7
 800770c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007710:	4770      	bx	lr

08007712 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007712:	b480      	push	{r7}
 8007714:	b085      	sub	sp, #20
 8007716:	af00      	add	r7, sp, #0
 8007718:	6078      	str	r0, [r7, #4]
 800771a:	460b      	mov	r3, r1
 800771c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	695b      	ldr	r3, [r3, #20]
 8007722:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007724:	887a      	ldrh	r2, [r7, #2]
 8007726:	68fb      	ldr	r3, [r7, #12]
 8007728:	4013      	ands	r3, r2
 800772a:	041a      	lsls	r2, r3, #16
 800772c:	68fb      	ldr	r3, [r7, #12]
 800772e:	43d9      	mvns	r1, r3
 8007730:	887b      	ldrh	r3, [r7, #2]
 8007732:	400b      	ands	r3, r1
 8007734:	431a      	orrs	r2, r3
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	619a      	str	r2, [r3, #24]
}
 800773a:	bf00      	nop
 800773c:	3714      	adds	r7, #20
 800773e:	46bd      	mov	sp, r7
 8007740:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007744:	4770      	bx	lr
	...

08007748 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8007748:	b580      	push	{r7, lr}
 800774a:	b086      	sub	sp, #24
 800774c:	af00      	add	r7, sp, #0
 800774e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	2b00      	cmp	r3, #0
 8007754:	d101      	bne.n	800775a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8007756:	2301      	movs	r3, #1
 8007758:	e267      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800775a:	687b      	ldr	r3, [r7, #4]
 800775c:	681b      	ldr	r3, [r3, #0]
 800775e:	f003 0301 	and.w	r3, r3, #1
 8007762:	2b00      	cmp	r3, #0
 8007764:	d075      	beq.n	8007852 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007766:	4b88      	ldr	r3, [pc, #544]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 8007768:	689b      	ldr	r3, [r3, #8]
 800776a:	f003 030c 	and.w	r3, r3, #12
 800776e:	2b04      	cmp	r3, #4
 8007770:	d00c      	beq.n	800778c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007772:	4b85      	ldr	r3, [pc, #532]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 8007774:	689b      	ldr	r3, [r3, #8]
 8007776:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800777a:	2b08      	cmp	r3, #8
 800777c:	d112      	bne.n	80077a4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800777e:	4b82      	ldr	r3, [pc, #520]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 8007780:	685b      	ldr	r3, [r3, #4]
 8007782:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007786:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800778a:	d10b      	bne.n	80077a4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800778c:	4b7e      	ldr	r3, [pc, #504]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 800778e:	681b      	ldr	r3, [r3, #0]
 8007790:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007794:	2b00      	cmp	r3, #0
 8007796:	d05b      	beq.n	8007850 <HAL_RCC_OscConfig+0x108>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	685b      	ldr	r3, [r3, #4]
 800779c:	2b00      	cmp	r3, #0
 800779e:	d157      	bne.n	8007850 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80077a0:	2301      	movs	r3, #1
 80077a2:	e242      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80077a4:	687b      	ldr	r3, [r7, #4]
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80077ac:	d106      	bne.n	80077bc <HAL_RCC_OscConfig+0x74>
 80077ae:	4b76      	ldr	r3, [pc, #472]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4a75      	ldr	r2, [pc, #468]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077b4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077b8:	6013      	str	r3, [r2, #0]
 80077ba:	e01d      	b.n	80077f8 <HAL_RCC_OscConfig+0xb0>
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	685b      	ldr	r3, [r3, #4]
 80077c0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80077c4:	d10c      	bne.n	80077e0 <HAL_RCC_OscConfig+0x98>
 80077c6:	4b70      	ldr	r3, [pc, #448]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	4a6f      	ldr	r2, [pc, #444]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077cc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80077d0:	6013      	str	r3, [r2, #0]
 80077d2:	4b6d      	ldr	r3, [pc, #436]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077d4:	681b      	ldr	r3, [r3, #0]
 80077d6:	4a6c      	ldr	r2, [pc, #432]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077d8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80077dc:	6013      	str	r3, [r2, #0]
 80077de:	e00b      	b.n	80077f8 <HAL_RCC_OscConfig+0xb0>
 80077e0:	4b69      	ldr	r3, [pc, #420]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077e2:	681b      	ldr	r3, [r3, #0]
 80077e4:	4a68      	ldr	r2, [pc, #416]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077e6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80077ea:	6013      	str	r3, [r2, #0]
 80077ec:	4b66      	ldr	r3, [pc, #408]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077ee:	681b      	ldr	r3, [r3, #0]
 80077f0:	4a65      	ldr	r2, [pc, #404]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80077f2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80077f6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80077f8:	687b      	ldr	r3, [r7, #4]
 80077fa:	685b      	ldr	r3, [r3, #4]
 80077fc:	2b00      	cmp	r3, #0
 80077fe:	d013      	beq.n	8007828 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007800:	f7ff f8e8 	bl	80069d4 <HAL_GetTick>
 8007804:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007806:	e008      	b.n	800781a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007808:	f7ff f8e4 	bl	80069d4 <HAL_GetTick>
 800780c:	4602      	mov	r2, r0
 800780e:	693b      	ldr	r3, [r7, #16]
 8007810:	1ad3      	subs	r3, r2, r3
 8007812:	2b64      	cmp	r3, #100	; 0x64
 8007814:	d901      	bls.n	800781a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007816:	2303      	movs	r3, #3
 8007818:	e207      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800781a:	4b5b      	ldr	r3, [pc, #364]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007822:	2b00      	cmp	r3, #0
 8007824:	d0f0      	beq.n	8007808 <HAL_RCC_OscConfig+0xc0>
 8007826:	e014      	b.n	8007852 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007828:	f7ff f8d4 	bl	80069d4 <HAL_GetTick>
 800782c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800782e:	e008      	b.n	8007842 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007830:	f7ff f8d0 	bl	80069d4 <HAL_GetTick>
 8007834:	4602      	mov	r2, r0
 8007836:	693b      	ldr	r3, [r7, #16]
 8007838:	1ad3      	subs	r3, r2, r3
 800783a:	2b64      	cmp	r3, #100	; 0x64
 800783c:	d901      	bls.n	8007842 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800783e:	2303      	movs	r3, #3
 8007840:	e1f3      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8007842:	4b51      	ldr	r3, [pc, #324]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 8007844:	681b      	ldr	r3, [r3, #0]
 8007846:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800784a:	2b00      	cmp	r3, #0
 800784c:	d1f0      	bne.n	8007830 <HAL_RCC_OscConfig+0xe8>
 800784e:	e000      	b.n	8007852 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007850:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	f003 0302 	and.w	r3, r3, #2
 800785a:	2b00      	cmp	r3, #0
 800785c:	d063      	beq.n	8007926 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800785e:	4b4a      	ldr	r3, [pc, #296]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 8007860:	689b      	ldr	r3, [r3, #8]
 8007862:	f003 030c 	and.w	r3, r3, #12
 8007866:	2b00      	cmp	r3, #0
 8007868:	d00b      	beq.n	8007882 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800786a:	4b47      	ldr	r3, [pc, #284]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 800786c:	689b      	ldr	r3, [r3, #8]
 800786e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007872:	2b08      	cmp	r3, #8
 8007874:	d11c      	bne.n	80078b0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007876:	4b44      	ldr	r3, [pc, #272]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 8007878:	685b      	ldr	r3, [r3, #4]
 800787a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800787e:	2b00      	cmp	r3, #0
 8007880:	d116      	bne.n	80078b0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007882:	4b41      	ldr	r3, [pc, #260]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 8007884:	681b      	ldr	r3, [r3, #0]
 8007886:	f003 0302 	and.w	r3, r3, #2
 800788a:	2b00      	cmp	r3, #0
 800788c:	d005      	beq.n	800789a <HAL_RCC_OscConfig+0x152>
 800788e:	687b      	ldr	r3, [r7, #4]
 8007890:	68db      	ldr	r3, [r3, #12]
 8007892:	2b01      	cmp	r3, #1
 8007894:	d001      	beq.n	800789a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007896:	2301      	movs	r3, #1
 8007898:	e1c7      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800789a:	4b3b      	ldr	r3, [pc, #236]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078a2:	687b      	ldr	r3, [r7, #4]
 80078a4:	691b      	ldr	r3, [r3, #16]
 80078a6:	00db      	lsls	r3, r3, #3
 80078a8:	4937      	ldr	r1, [pc, #220]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80078aa:	4313      	orrs	r3, r2
 80078ac:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80078ae:	e03a      	b.n	8007926 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80078b0:	687b      	ldr	r3, [r7, #4]
 80078b2:	68db      	ldr	r3, [r3, #12]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	d020      	beq.n	80078fa <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80078b8:	4b34      	ldr	r3, [pc, #208]	; (800798c <HAL_RCC_OscConfig+0x244>)
 80078ba:	2201      	movs	r2, #1
 80078bc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80078be:	f7ff f889 	bl	80069d4 <HAL_GetTick>
 80078c2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078c4:	e008      	b.n	80078d8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80078c6:	f7ff f885 	bl	80069d4 <HAL_GetTick>
 80078ca:	4602      	mov	r2, r0
 80078cc:	693b      	ldr	r3, [r7, #16]
 80078ce:	1ad3      	subs	r3, r2, r3
 80078d0:	2b02      	cmp	r3, #2
 80078d2:	d901      	bls.n	80078d8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80078d4:	2303      	movs	r3, #3
 80078d6:	e1a8      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80078d8:	4b2b      	ldr	r3, [pc, #172]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	f003 0302 	and.w	r3, r3, #2
 80078e0:	2b00      	cmp	r3, #0
 80078e2:	d0f0      	beq.n	80078c6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80078e4:	4b28      	ldr	r3, [pc, #160]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	691b      	ldr	r3, [r3, #16]
 80078f0:	00db      	lsls	r3, r3, #3
 80078f2:	4925      	ldr	r1, [pc, #148]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 80078f4:	4313      	orrs	r3, r2
 80078f6:	600b      	str	r3, [r1, #0]
 80078f8:	e015      	b.n	8007926 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80078fa:	4b24      	ldr	r3, [pc, #144]	; (800798c <HAL_RCC_OscConfig+0x244>)
 80078fc:	2200      	movs	r2, #0
 80078fe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007900:	f7ff f868 	bl	80069d4 <HAL_GetTick>
 8007904:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007906:	e008      	b.n	800791a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007908:	f7ff f864 	bl	80069d4 <HAL_GetTick>
 800790c:	4602      	mov	r2, r0
 800790e:	693b      	ldr	r3, [r7, #16]
 8007910:	1ad3      	subs	r3, r2, r3
 8007912:	2b02      	cmp	r3, #2
 8007914:	d901      	bls.n	800791a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007916:	2303      	movs	r3, #3
 8007918:	e187      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800791a:	4b1b      	ldr	r3, [pc, #108]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 800791c:	681b      	ldr	r3, [r3, #0]
 800791e:	f003 0302 	and.w	r3, r3, #2
 8007922:	2b00      	cmp	r3, #0
 8007924:	d1f0      	bne.n	8007908 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007926:	687b      	ldr	r3, [r7, #4]
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	f003 0308 	and.w	r3, r3, #8
 800792e:	2b00      	cmp	r3, #0
 8007930:	d036      	beq.n	80079a0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007932:	687b      	ldr	r3, [r7, #4]
 8007934:	695b      	ldr	r3, [r3, #20]
 8007936:	2b00      	cmp	r3, #0
 8007938:	d016      	beq.n	8007968 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800793a:	4b15      	ldr	r3, [pc, #84]	; (8007990 <HAL_RCC_OscConfig+0x248>)
 800793c:	2201      	movs	r2, #1
 800793e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007940:	f7ff f848 	bl	80069d4 <HAL_GetTick>
 8007944:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8007946:	e008      	b.n	800795a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007948:	f7ff f844 	bl	80069d4 <HAL_GetTick>
 800794c:	4602      	mov	r2, r0
 800794e:	693b      	ldr	r3, [r7, #16]
 8007950:	1ad3      	subs	r3, r2, r3
 8007952:	2b02      	cmp	r3, #2
 8007954:	d901      	bls.n	800795a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8007956:	2303      	movs	r3, #3
 8007958:	e167      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800795a:	4b0b      	ldr	r3, [pc, #44]	; (8007988 <HAL_RCC_OscConfig+0x240>)
 800795c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800795e:	f003 0302 	and.w	r3, r3, #2
 8007962:	2b00      	cmp	r3, #0
 8007964:	d0f0      	beq.n	8007948 <HAL_RCC_OscConfig+0x200>
 8007966:	e01b      	b.n	80079a0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007968:	4b09      	ldr	r3, [pc, #36]	; (8007990 <HAL_RCC_OscConfig+0x248>)
 800796a:	2200      	movs	r2, #0
 800796c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800796e:	f7ff f831 	bl	80069d4 <HAL_GetTick>
 8007972:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007974:	e00e      	b.n	8007994 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007976:	f7ff f82d 	bl	80069d4 <HAL_GetTick>
 800797a:	4602      	mov	r2, r0
 800797c:	693b      	ldr	r3, [r7, #16]
 800797e:	1ad3      	subs	r3, r2, r3
 8007980:	2b02      	cmp	r3, #2
 8007982:	d907      	bls.n	8007994 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007984:	2303      	movs	r3, #3
 8007986:	e150      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
 8007988:	40023800 	.word	0x40023800
 800798c:	42470000 	.word	0x42470000
 8007990:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007994:	4b88      	ldr	r3, [pc, #544]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007996:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007998:	f003 0302 	and.w	r3, r3, #2
 800799c:	2b00      	cmp	r3, #0
 800799e:	d1ea      	bne.n	8007976 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80079a0:	687b      	ldr	r3, [r7, #4]
 80079a2:	681b      	ldr	r3, [r3, #0]
 80079a4:	f003 0304 	and.w	r3, r3, #4
 80079a8:	2b00      	cmp	r3, #0
 80079aa:	f000 8097 	beq.w	8007adc <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80079ae:	2300      	movs	r3, #0
 80079b0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80079b2:	4b81      	ldr	r3, [pc, #516]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 80079b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079b6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079ba:	2b00      	cmp	r3, #0
 80079bc:	d10f      	bne.n	80079de <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80079be:	2300      	movs	r3, #0
 80079c0:	60bb      	str	r3, [r7, #8]
 80079c2:	4b7d      	ldr	r3, [pc, #500]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 80079c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079c6:	4a7c      	ldr	r2, [pc, #496]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 80079c8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80079cc:	6413      	str	r3, [r2, #64]	; 0x40
 80079ce:	4b7a      	ldr	r3, [pc, #488]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 80079d0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80079d2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80079d6:	60bb      	str	r3, [r7, #8]
 80079d8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80079da:	2301      	movs	r3, #1
 80079dc:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079de:	4b77      	ldr	r3, [pc, #476]	; (8007bbc <HAL_RCC_OscConfig+0x474>)
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80079e6:	2b00      	cmp	r3, #0
 80079e8:	d118      	bne.n	8007a1c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80079ea:	4b74      	ldr	r3, [pc, #464]	; (8007bbc <HAL_RCC_OscConfig+0x474>)
 80079ec:	681b      	ldr	r3, [r3, #0]
 80079ee:	4a73      	ldr	r2, [pc, #460]	; (8007bbc <HAL_RCC_OscConfig+0x474>)
 80079f0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80079f4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80079f6:	f7fe ffed 	bl	80069d4 <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80079fc:	e008      	b.n	8007a10 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80079fe:	f7fe ffe9 	bl	80069d4 <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d901      	bls.n	8007a10 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e10c      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a10:	4b6a      	ldr	r3, [pc, #424]	; (8007bbc <HAL_RCC_OscConfig+0x474>)
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a18:	2b00      	cmp	r3, #0
 8007a1a:	d0f0      	beq.n	80079fe <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007a1c:	687b      	ldr	r3, [r7, #4]
 8007a1e:	689b      	ldr	r3, [r3, #8]
 8007a20:	2b01      	cmp	r3, #1
 8007a22:	d106      	bne.n	8007a32 <HAL_RCC_OscConfig+0x2ea>
 8007a24:	4b64      	ldr	r3, [pc, #400]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a26:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a28:	4a63      	ldr	r2, [pc, #396]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a2a:	f043 0301 	orr.w	r3, r3, #1
 8007a2e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a30:	e01c      	b.n	8007a6c <HAL_RCC_OscConfig+0x324>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	689b      	ldr	r3, [r3, #8]
 8007a36:	2b05      	cmp	r3, #5
 8007a38:	d10c      	bne.n	8007a54 <HAL_RCC_OscConfig+0x30c>
 8007a3a:	4b5f      	ldr	r3, [pc, #380]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a3c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a3e:	4a5e      	ldr	r2, [pc, #376]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a40:	f043 0304 	orr.w	r3, r3, #4
 8007a44:	6713      	str	r3, [r2, #112]	; 0x70
 8007a46:	4b5c      	ldr	r3, [pc, #368]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a4a:	4a5b      	ldr	r2, [pc, #364]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a4c:	f043 0301 	orr.w	r3, r3, #1
 8007a50:	6713      	str	r3, [r2, #112]	; 0x70
 8007a52:	e00b      	b.n	8007a6c <HAL_RCC_OscConfig+0x324>
 8007a54:	4b58      	ldr	r3, [pc, #352]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a56:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a58:	4a57      	ldr	r2, [pc, #348]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a5a:	f023 0301 	bic.w	r3, r3, #1
 8007a5e:	6713      	str	r3, [r2, #112]	; 0x70
 8007a60:	4b55      	ldr	r3, [pc, #340]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a62:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a64:	4a54      	ldr	r2, [pc, #336]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a66:	f023 0304 	bic.w	r3, r3, #4
 8007a6a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007a6c:	687b      	ldr	r3, [r7, #4]
 8007a6e:	689b      	ldr	r3, [r3, #8]
 8007a70:	2b00      	cmp	r3, #0
 8007a72:	d015      	beq.n	8007aa0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007a74:	f7fe ffae 	bl	80069d4 <HAL_GetTick>
 8007a78:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a7a:	e00a      	b.n	8007a92 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007a7c:	f7fe ffaa 	bl	80069d4 <HAL_GetTick>
 8007a80:	4602      	mov	r2, r0
 8007a82:	693b      	ldr	r3, [r7, #16]
 8007a84:	1ad3      	subs	r3, r2, r3
 8007a86:	f241 3288 	movw	r2, #5000	; 0x1388
 8007a8a:	4293      	cmp	r3, r2
 8007a8c:	d901      	bls.n	8007a92 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007a8e:	2303      	movs	r3, #3
 8007a90:	e0cb      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007a92:	4b49      	ldr	r3, [pc, #292]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007a94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007a96:	f003 0302 	and.w	r3, r3, #2
 8007a9a:	2b00      	cmp	r3, #0
 8007a9c:	d0ee      	beq.n	8007a7c <HAL_RCC_OscConfig+0x334>
 8007a9e:	e014      	b.n	8007aca <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007aa0:	f7fe ff98 	bl	80069d4 <HAL_GetTick>
 8007aa4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007aa6:	e00a      	b.n	8007abe <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007aa8:	f7fe ff94 	bl	80069d4 <HAL_GetTick>
 8007aac:	4602      	mov	r2, r0
 8007aae:	693b      	ldr	r3, [r7, #16]
 8007ab0:	1ad3      	subs	r3, r2, r3
 8007ab2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007ab6:	4293      	cmp	r3, r2
 8007ab8:	d901      	bls.n	8007abe <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007aba:	2303      	movs	r3, #3
 8007abc:	e0b5      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007abe:	4b3e      	ldr	r3, [pc, #248]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007ac0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac2:	f003 0302 	and.w	r3, r3, #2
 8007ac6:	2b00      	cmp	r3, #0
 8007ac8:	d1ee      	bne.n	8007aa8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007aca:	7dfb      	ldrb	r3, [r7, #23]
 8007acc:	2b01      	cmp	r3, #1
 8007ace:	d105      	bne.n	8007adc <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007ad0:	4b39      	ldr	r3, [pc, #228]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007ad2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad4:	4a38      	ldr	r2, [pc, #224]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007ad6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007ada:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	699b      	ldr	r3, [r3, #24]
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	f000 80a1 	beq.w	8007c28 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007ae6:	4b34      	ldr	r3, [pc, #208]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007ae8:	689b      	ldr	r3, [r3, #8]
 8007aea:	f003 030c 	and.w	r3, r3, #12
 8007aee:	2b08      	cmp	r3, #8
 8007af0:	d05c      	beq.n	8007bac <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	699b      	ldr	r3, [r3, #24]
 8007af6:	2b02      	cmp	r3, #2
 8007af8:	d141      	bne.n	8007b7e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007afa:	4b31      	ldr	r3, [pc, #196]	; (8007bc0 <HAL_RCC_OscConfig+0x478>)
 8007afc:	2200      	movs	r2, #0
 8007afe:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b00:	f7fe ff68 	bl	80069d4 <HAL_GetTick>
 8007b04:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b06:	e008      	b.n	8007b1a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b08:	f7fe ff64 	bl	80069d4 <HAL_GetTick>
 8007b0c:	4602      	mov	r2, r0
 8007b0e:	693b      	ldr	r3, [r7, #16]
 8007b10:	1ad3      	subs	r3, r2, r3
 8007b12:	2b02      	cmp	r3, #2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e087      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b1a:	4b27      	ldr	r3, [pc, #156]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007b1c:	681b      	ldr	r3, [r3, #0]
 8007b1e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d1f0      	bne.n	8007b08 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007b26:	687b      	ldr	r3, [r7, #4]
 8007b28:	69da      	ldr	r2, [r3, #28]
 8007b2a:	687b      	ldr	r3, [r7, #4]
 8007b2c:	6a1b      	ldr	r3, [r3, #32]
 8007b2e:	431a      	orrs	r2, r3
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007b34:	019b      	lsls	r3, r3, #6
 8007b36:	431a      	orrs	r2, r3
 8007b38:	687b      	ldr	r3, [r7, #4]
 8007b3a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007b3c:	085b      	lsrs	r3, r3, #1
 8007b3e:	3b01      	subs	r3, #1
 8007b40:	041b      	lsls	r3, r3, #16
 8007b42:	431a      	orrs	r2, r3
 8007b44:	687b      	ldr	r3, [r7, #4]
 8007b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b48:	061b      	lsls	r3, r3, #24
 8007b4a:	491b      	ldr	r1, [pc, #108]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007b4c:	4313      	orrs	r3, r2
 8007b4e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007b50:	4b1b      	ldr	r3, [pc, #108]	; (8007bc0 <HAL_RCC_OscConfig+0x478>)
 8007b52:	2201      	movs	r2, #1
 8007b54:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b56:	f7fe ff3d 	bl	80069d4 <HAL_GetTick>
 8007b5a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b5c:	e008      	b.n	8007b70 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b5e:	f7fe ff39 	bl	80069d4 <HAL_GetTick>
 8007b62:	4602      	mov	r2, r0
 8007b64:	693b      	ldr	r3, [r7, #16]
 8007b66:	1ad3      	subs	r3, r2, r3
 8007b68:	2b02      	cmp	r3, #2
 8007b6a:	d901      	bls.n	8007b70 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007b6c:	2303      	movs	r3, #3
 8007b6e:	e05c      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007b70:	4b11      	ldr	r3, [pc, #68]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007b72:	681b      	ldr	r3, [r3, #0]
 8007b74:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007b78:	2b00      	cmp	r3, #0
 8007b7a:	d0f0      	beq.n	8007b5e <HAL_RCC_OscConfig+0x416>
 8007b7c:	e054      	b.n	8007c28 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b7e:	4b10      	ldr	r3, [pc, #64]	; (8007bc0 <HAL_RCC_OscConfig+0x478>)
 8007b80:	2200      	movs	r2, #0
 8007b82:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b84:	f7fe ff26 	bl	80069d4 <HAL_GetTick>
 8007b88:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b8a:	e008      	b.n	8007b9e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b8c:	f7fe ff22 	bl	80069d4 <HAL_GetTick>
 8007b90:	4602      	mov	r2, r0
 8007b92:	693b      	ldr	r3, [r7, #16]
 8007b94:	1ad3      	subs	r3, r2, r3
 8007b96:	2b02      	cmp	r3, #2
 8007b98:	d901      	bls.n	8007b9e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007b9a:	2303      	movs	r3, #3
 8007b9c:	e045      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b9e:	4b06      	ldr	r3, [pc, #24]	; (8007bb8 <HAL_RCC_OscConfig+0x470>)
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007ba6:	2b00      	cmp	r3, #0
 8007ba8:	d1f0      	bne.n	8007b8c <HAL_RCC_OscConfig+0x444>
 8007baa:	e03d      	b.n	8007c28 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	699b      	ldr	r3, [r3, #24]
 8007bb0:	2b01      	cmp	r3, #1
 8007bb2:	d107      	bne.n	8007bc4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007bb4:	2301      	movs	r3, #1
 8007bb6:	e038      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
 8007bb8:	40023800 	.word	0x40023800
 8007bbc:	40007000 	.word	0x40007000
 8007bc0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007bc4:	4b1b      	ldr	r3, [pc, #108]	; (8007c34 <HAL_RCC_OscConfig+0x4ec>)
 8007bc6:	685b      	ldr	r3, [r3, #4]
 8007bc8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	699b      	ldr	r3, [r3, #24]
 8007bce:	2b01      	cmp	r3, #1
 8007bd0:	d028      	beq.n	8007c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bd2:	68fb      	ldr	r3, [r7, #12]
 8007bd4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007bdc:	429a      	cmp	r2, r3
 8007bde:	d121      	bne.n	8007c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007be0:	68fb      	ldr	r3, [r7, #12]
 8007be2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007bea:	429a      	cmp	r2, r3
 8007bec:	d11a      	bne.n	8007c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007bee:	68fa      	ldr	r2, [r7, #12]
 8007bf0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007bf4:	4013      	ands	r3, r2
 8007bf6:	687a      	ldr	r2, [r7, #4]
 8007bf8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007bfa:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007bfc:	4293      	cmp	r3, r2
 8007bfe:	d111      	bne.n	8007c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c0a:	085b      	lsrs	r3, r3, #1
 8007c0c:	3b01      	subs	r3, #1
 8007c0e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c10:	429a      	cmp	r2, r3
 8007c12:	d107      	bne.n	8007c24 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c14:	68fb      	ldr	r3, [r7, #12]
 8007c16:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007c1a:	687b      	ldr	r3, [r7, #4]
 8007c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007c1e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c20:	429a      	cmp	r2, r3
 8007c22:	d001      	beq.n	8007c28 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007c24:	2301      	movs	r3, #1
 8007c26:	e000      	b.n	8007c2a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007c28:	2300      	movs	r3, #0
}
 8007c2a:	4618      	mov	r0, r3
 8007c2c:	3718      	adds	r7, #24
 8007c2e:	46bd      	mov	sp, r7
 8007c30:	bd80      	pop	{r7, pc}
 8007c32:	bf00      	nop
 8007c34:	40023800 	.word	0x40023800

08007c38 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007c38:	b580      	push	{r7, lr}
 8007c3a:	b084      	sub	sp, #16
 8007c3c:	af00      	add	r7, sp, #0
 8007c3e:	6078      	str	r0, [r7, #4]
 8007c40:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	2b00      	cmp	r3, #0
 8007c46:	d101      	bne.n	8007c4c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007c48:	2301      	movs	r3, #1
 8007c4a:	e0cc      	b.n	8007de6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007c4c:	4b68      	ldr	r3, [pc, #416]	; (8007df0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c4e:	681b      	ldr	r3, [r3, #0]
 8007c50:	f003 0307 	and.w	r3, r3, #7
 8007c54:	683a      	ldr	r2, [r7, #0]
 8007c56:	429a      	cmp	r2, r3
 8007c58:	d90c      	bls.n	8007c74 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007c5a:	4b65      	ldr	r3, [pc, #404]	; (8007df0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c5c:	683a      	ldr	r2, [r7, #0]
 8007c5e:	b2d2      	uxtb	r2, r2
 8007c60:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007c62:	4b63      	ldr	r3, [pc, #396]	; (8007df0 <HAL_RCC_ClockConfig+0x1b8>)
 8007c64:	681b      	ldr	r3, [r3, #0]
 8007c66:	f003 0307 	and.w	r3, r3, #7
 8007c6a:	683a      	ldr	r2, [r7, #0]
 8007c6c:	429a      	cmp	r2, r3
 8007c6e:	d001      	beq.n	8007c74 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007c70:	2301      	movs	r3, #1
 8007c72:	e0b8      	b.n	8007de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007c74:	687b      	ldr	r3, [r7, #4]
 8007c76:	681b      	ldr	r3, [r3, #0]
 8007c78:	f003 0302 	and.w	r3, r3, #2
 8007c7c:	2b00      	cmp	r3, #0
 8007c7e:	d020      	beq.n	8007cc2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	f003 0304 	and.w	r3, r3, #4
 8007c88:	2b00      	cmp	r3, #0
 8007c8a:	d005      	beq.n	8007c98 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007c8c:	4b59      	ldr	r3, [pc, #356]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c8e:	689b      	ldr	r3, [r3, #8]
 8007c90:	4a58      	ldr	r2, [pc, #352]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007c92:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007c96:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	f003 0308 	and.w	r3, r3, #8
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d005      	beq.n	8007cb0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007ca4:	4b53      	ldr	r3, [pc, #332]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007ca6:	689b      	ldr	r3, [r3, #8]
 8007ca8:	4a52      	ldr	r2, [pc, #328]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007caa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007cae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007cb0:	4b50      	ldr	r3, [pc, #320]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cb2:	689b      	ldr	r3, [r3, #8]
 8007cb4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	689b      	ldr	r3, [r3, #8]
 8007cbc:	494d      	ldr	r1, [pc, #308]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cbe:	4313      	orrs	r3, r2
 8007cc0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007cc2:	687b      	ldr	r3, [r7, #4]
 8007cc4:	681b      	ldr	r3, [r3, #0]
 8007cc6:	f003 0301 	and.w	r3, r3, #1
 8007cca:	2b00      	cmp	r3, #0
 8007ccc:	d044      	beq.n	8007d58 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	685b      	ldr	r3, [r3, #4]
 8007cd2:	2b01      	cmp	r3, #1
 8007cd4:	d107      	bne.n	8007ce6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007cd6:	4b47      	ldr	r3, [pc, #284]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007cde:	2b00      	cmp	r3, #0
 8007ce0:	d119      	bne.n	8007d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007ce2:	2301      	movs	r3, #1
 8007ce4:	e07f      	b.n	8007de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	685b      	ldr	r3, [r3, #4]
 8007cea:	2b02      	cmp	r3, #2
 8007cec:	d003      	beq.n	8007cf6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007cf2:	2b03      	cmp	r3, #3
 8007cf4:	d107      	bne.n	8007d06 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007cf6:	4b3f      	ldr	r3, [pc, #252]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007cf8:	681b      	ldr	r3, [r3, #0]
 8007cfa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	d109      	bne.n	8007d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d02:	2301      	movs	r3, #1
 8007d04:	e06f      	b.n	8007de6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d06:	4b3b      	ldr	r3, [pc, #236]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d08:	681b      	ldr	r3, [r3, #0]
 8007d0a:	f003 0302 	and.w	r3, r3, #2
 8007d0e:	2b00      	cmp	r3, #0
 8007d10:	d101      	bne.n	8007d16 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d12:	2301      	movs	r3, #1
 8007d14:	e067      	b.n	8007de6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d16:	4b37      	ldr	r3, [pc, #220]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d18:	689b      	ldr	r3, [r3, #8]
 8007d1a:	f023 0203 	bic.w	r2, r3, #3
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	685b      	ldr	r3, [r3, #4]
 8007d22:	4934      	ldr	r1, [pc, #208]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d24:	4313      	orrs	r3, r2
 8007d26:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007d28:	f7fe fe54 	bl	80069d4 <HAL_GetTick>
 8007d2c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d2e:	e00a      	b.n	8007d46 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007d30:	f7fe fe50 	bl	80069d4 <HAL_GetTick>
 8007d34:	4602      	mov	r2, r0
 8007d36:	68fb      	ldr	r3, [r7, #12]
 8007d38:	1ad3      	subs	r3, r2, r3
 8007d3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007d3e:	4293      	cmp	r3, r2
 8007d40:	d901      	bls.n	8007d46 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007d42:	2303      	movs	r3, #3
 8007d44:	e04f      	b.n	8007de6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007d46:	4b2b      	ldr	r3, [pc, #172]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d48:	689b      	ldr	r3, [r3, #8]
 8007d4a:	f003 020c 	and.w	r2, r3, #12
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	685b      	ldr	r3, [r3, #4]
 8007d52:	009b      	lsls	r3, r3, #2
 8007d54:	429a      	cmp	r2, r3
 8007d56:	d1eb      	bne.n	8007d30 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007d58:	4b25      	ldr	r3, [pc, #148]	; (8007df0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d5a:	681b      	ldr	r3, [r3, #0]
 8007d5c:	f003 0307 	and.w	r3, r3, #7
 8007d60:	683a      	ldr	r2, [r7, #0]
 8007d62:	429a      	cmp	r2, r3
 8007d64:	d20c      	bcs.n	8007d80 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007d66:	4b22      	ldr	r3, [pc, #136]	; (8007df0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d68:	683a      	ldr	r2, [r7, #0]
 8007d6a:	b2d2      	uxtb	r2, r2
 8007d6c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007d6e:	4b20      	ldr	r3, [pc, #128]	; (8007df0 <HAL_RCC_ClockConfig+0x1b8>)
 8007d70:	681b      	ldr	r3, [r3, #0]
 8007d72:	f003 0307 	and.w	r3, r3, #7
 8007d76:	683a      	ldr	r2, [r7, #0]
 8007d78:	429a      	cmp	r2, r3
 8007d7a:	d001      	beq.n	8007d80 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007d7c:	2301      	movs	r3, #1
 8007d7e:	e032      	b.n	8007de6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d80:	687b      	ldr	r3, [r7, #4]
 8007d82:	681b      	ldr	r3, [r3, #0]
 8007d84:	f003 0304 	and.w	r3, r3, #4
 8007d88:	2b00      	cmp	r3, #0
 8007d8a:	d008      	beq.n	8007d9e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007d8c:	4b19      	ldr	r3, [pc, #100]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d8e:	689b      	ldr	r3, [r3, #8]
 8007d90:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007d94:	687b      	ldr	r3, [r7, #4]
 8007d96:	68db      	ldr	r3, [r3, #12]
 8007d98:	4916      	ldr	r1, [pc, #88]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007d9a:	4313      	orrs	r3, r2
 8007d9c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d9e:	687b      	ldr	r3, [r7, #4]
 8007da0:	681b      	ldr	r3, [r3, #0]
 8007da2:	f003 0308 	and.w	r3, r3, #8
 8007da6:	2b00      	cmp	r3, #0
 8007da8:	d009      	beq.n	8007dbe <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007daa:	4b12      	ldr	r3, [pc, #72]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dac:	689b      	ldr	r3, [r3, #8]
 8007dae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007db2:	687b      	ldr	r3, [r7, #4]
 8007db4:	691b      	ldr	r3, [r3, #16]
 8007db6:	00db      	lsls	r3, r3, #3
 8007db8:	490e      	ldr	r1, [pc, #56]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dba:	4313      	orrs	r3, r2
 8007dbc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007dbe:	f000 f821 	bl	8007e04 <HAL_RCC_GetSysClockFreq>
 8007dc2:	4602      	mov	r2, r0
 8007dc4:	4b0b      	ldr	r3, [pc, #44]	; (8007df4 <HAL_RCC_ClockConfig+0x1bc>)
 8007dc6:	689b      	ldr	r3, [r3, #8]
 8007dc8:	091b      	lsrs	r3, r3, #4
 8007dca:	f003 030f 	and.w	r3, r3, #15
 8007dce:	490a      	ldr	r1, [pc, #40]	; (8007df8 <HAL_RCC_ClockConfig+0x1c0>)
 8007dd0:	5ccb      	ldrb	r3, [r1, r3]
 8007dd2:	fa22 f303 	lsr.w	r3, r2, r3
 8007dd6:	4a09      	ldr	r2, [pc, #36]	; (8007dfc <HAL_RCC_ClockConfig+0x1c4>)
 8007dd8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007dda:	4b09      	ldr	r3, [pc, #36]	; (8007e00 <HAL_RCC_ClockConfig+0x1c8>)
 8007ddc:	681b      	ldr	r3, [r3, #0]
 8007dde:	4618      	mov	r0, r3
 8007de0:	f7fe fdb4 	bl	800694c <HAL_InitTick>

  return HAL_OK;
 8007de4:	2300      	movs	r3, #0
}
 8007de6:	4618      	mov	r0, r3
 8007de8:	3710      	adds	r7, #16
 8007dea:	46bd      	mov	sp, r7
 8007dec:	bd80      	pop	{r7, pc}
 8007dee:	bf00      	nop
 8007df0:	40023c00 	.word	0x40023c00
 8007df4:	40023800 	.word	0x40023800
 8007df8:	0800f8e8 	.word	0x0800f8e8
 8007dfc:	20000014 	.word	0x20000014
 8007e00:	20000018 	.word	0x20000018

08007e04 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e04:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e08:	b090      	sub	sp, #64	; 0x40
 8007e0a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	637b      	str	r3, [r7, #52]	; 0x34
 8007e10:	2300      	movs	r3, #0
 8007e12:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e14:	2300      	movs	r3, #0
 8007e16:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007e18:	2300      	movs	r3, #0
 8007e1a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007e1c:	4b59      	ldr	r3, [pc, #356]	; (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e1e:	689b      	ldr	r3, [r3, #8]
 8007e20:	f003 030c 	and.w	r3, r3, #12
 8007e24:	2b08      	cmp	r3, #8
 8007e26:	d00d      	beq.n	8007e44 <HAL_RCC_GetSysClockFreq+0x40>
 8007e28:	2b08      	cmp	r3, #8
 8007e2a:	f200 80a1 	bhi.w	8007f70 <HAL_RCC_GetSysClockFreq+0x16c>
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d002      	beq.n	8007e38 <HAL_RCC_GetSysClockFreq+0x34>
 8007e32:	2b04      	cmp	r3, #4
 8007e34:	d003      	beq.n	8007e3e <HAL_RCC_GetSysClockFreq+0x3a>
 8007e36:	e09b      	b.n	8007f70 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007e38:	4b53      	ldr	r3, [pc, #332]	; (8007f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8007e3a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007e3c:	e09b      	b.n	8007f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007e3e:	4b53      	ldr	r3, [pc, #332]	; (8007f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e40:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007e42:	e098      	b.n	8007f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007e44:	4b4f      	ldr	r3, [pc, #316]	; (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e46:	685b      	ldr	r3, [r3, #4]
 8007e48:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007e4c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007e4e:	4b4d      	ldr	r3, [pc, #308]	; (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e50:	685b      	ldr	r3, [r3, #4]
 8007e52:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007e56:	2b00      	cmp	r3, #0
 8007e58:	d028      	beq.n	8007eac <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007e5a:	4b4a      	ldr	r3, [pc, #296]	; (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007e5c:	685b      	ldr	r3, [r3, #4]
 8007e5e:	099b      	lsrs	r3, r3, #6
 8007e60:	2200      	movs	r2, #0
 8007e62:	623b      	str	r3, [r7, #32]
 8007e64:	627a      	str	r2, [r7, #36]	; 0x24
 8007e66:	6a3b      	ldr	r3, [r7, #32]
 8007e68:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007e6c:	2100      	movs	r1, #0
 8007e6e:	4b47      	ldr	r3, [pc, #284]	; (8007f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e70:	fb03 f201 	mul.w	r2, r3, r1
 8007e74:	2300      	movs	r3, #0
 8007e76:	fb00 f303 	mul.w	r3, r0, r3
 8007e7a:	4413      	add	r3, r2
 8007e7c:	4a43      	ldr	r2, [pc, #268]	; (8007f8c <HAL_RCC_GetSysClockFreq+0x188>)
 8007e7e:	fba0 1202 	umull	r1, r2, r0, r2
 8007e82:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007e84:	460a      	mov	r2, r1
 8007e86:	62ba      	str	r2, [r7, #40]	; 0x28
 8007e88:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007e8a:	4413      	add	r3, r2
 8007e8c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007e8e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007e90:	2200      	movs	r2, #0
 8007e92:	61bb      	str	r3, [r7, #24]
 8007e94:	61fa      	str	r2, [r7, #28]
 8007e96:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007e9a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007e9e:	f7f8 fef3 	bl	8000c88 <__aeabi_uldivmod>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	4613      	mov	r3, r2
 8007ea8:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007eaa:	e053      	b.n	8007f54 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007eac:	4b35      	ldr	r3, [pc, #212]	; (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007eae:	685b      	ldr	r3, [r3, #4]
 8007eb0:	099b      	lsrs	r3, r3, #6
 8007eb2:	2200      	movs	r2, #0
 8007eb4:	613b      	str	r3, [r7, #16]
 8007eb6:	617a      	str	r2, [r7, #20]
 8007eb8:	693b      	ldr	r3, [r7, #16]
 8007eba:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007ebe:	f04f 0b00 	mov.w	fp, #0
 8007ec2:	4652      	mov	r2, sl
 8007ec4:	465b      	mov	r3, fp
 8007ec6:	f04f 0000 	mov.w	r0, #0
 8007eca:	f04f 0100 	mov.w	r1, #0
 8007ece:	0159      	lsls	r1, r3, #5
 8007ed0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007ed4:	0150      	lsls	r0, r2, #5
 8007ed6:	4602      	mov	r2, r0
 8007ed8:	460b      	mov	r3, r1
 8007eda:	ebb2 080a 	subs.w	r8, r2, sl
 8007ede:	eb63 090b 	sbc.w	r9, r3, fp
 8007ee2:	f04f 0200 	mov.w	r2, #0
 8007ee6:	f04f 0300 	mov.w	r3, #0
 8007eea:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007eee:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007ef2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007ef6:	ebb2 0408 	subs.w	r4, r2, r8
 8007efa:	eb63 0509 	sbc.w	r5, r3, r9
 8007efe:	f04f 0200 	mov.w	r2, #0
 8007f02:	f04f 0300 	mov.w	r3, #0
 8007f06:	00eb      	lsls	r3, r5, #3
 8007f08:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f0c:	00e2      	lsls	r2, r4, #3
 8007f0e:	4614      	mov	r4, r2
 8007f10:	461d      	mov	r5, r3
 8007f12:	eb14 030a 	adds.w	r3, r4, sl
 8007f16:	603b      	str	r3, [r7, #0]
 8007f18:	eb45 030b 	adc.w	r3, r5, fp
 8007f1c:	607b      	str	r3, [r7, #4]
 8007f1e:	f04f 0200 	mov.w	r2, #0
 8007f22:	f04f 0300 	mov.w	r3, #0
 8007f26:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007f2a:	4629      	mov	r1, r5
 8007f2c:	028b      	lsls	r3, r1, #10
 8007f2e:	4621      	mov	r1, r4
 8007f30:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007f34:	4621      	mov	r1, r4
 8007f36:	028a      	lsls	r2, r1, #10
 8007f38:	4610      	mov	r0, r2
 8007f3a:	4619      	mov	r1, r3
 8007f3c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f3e:	2200      	movs	r2, #0
 8007f40:	60bb      	str	r3, [r7, #8]
 8007f42:	60fa      	str	r2, [r7, #12]
 8007f44:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007f48:	f7f8 fe9e 	bl	8000c88 <__aeabi_uldivmod>
 8007f4c:	4602      	mov	r2, r0
 8007f4e:	460b      	mov	r3, r1
 8007f50:	4613      	mov	r3, r2
 8007f52:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007f54:	4b0b      	ldr	r3, [pc, #44]	; (8007f84 <HAL_RCC_GetSysClockFreq+0x180>)
 8007f56:	685b      	ldr	r3, [r3, #4]
 8007f58:	0c1b      	lsrs	r3, r3, #16
 8007f5a:	f003 0303 	and.w	r3, r3, #3
 8007f5e:	3301      	adds	r3, #1
 8007f60:	005b      	lsls	r3, r3, #1
 8007f62:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007f64:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007f66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007f68:	fbb2 f3f3 	udiv	r3, r2, r3
 8007f6c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f6e:	e002      	b.n	8007f76 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007f70:	4b05      	ldr	r3, [pc, #20]	; (8007f88 <HAL_RCC_GetSysClockFreq+0x184>)
 8007f72:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007f74:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007f76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007f78:	4618      	mov	r0, r3
 8007f7a:	3740      	adds	r7, #64	; 0x40
 8007f7c:	46bd      	mov	sp, r7
 8007f7e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007f82:	bf00      	nop
 8007f84:	40023800 	.word	0x40023800
 8007f88:	00f42400 	.word	0x00f42400
 8007f8c:	00b71b00 	.word	0x00b71b00

08007f90 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007f90:	b480      	push	{r7}
 8007f92:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007f94:	4b03      	ldr	r3, [pc, #12]	; (8007fa4 <HAL_RCC_GetHCLKFreq+0x14>)
 8007f96:	681b      	ldr	r3, [r3, #0]
}
 8007f98:	4618      	mov	r0, r3
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fa0:	4770      	bx	lr
 8007fa2:	bf00      	nop
 8007fa4:	20000014 	.word	0x20000014

08007fa8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007fa8:	b580      	push	{r7, lr}
 8007faa:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007fac:	f7ff fff0 	bl	8007f90 <HAL_RCC_GetHCLKFreq>
 8007fb0:	4602      	mov	r2, r0
 8007fb2:	4b05      	ldr	r3, [pc, #20]	; (8007fc8 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007fb4:	689b      	ldr	r3, [r3, #8]
 8007fb6:	0a9b      	lsrs	r3, r3, #10
 8007fb8:	f003 0307 	and.w	r3, r3, #7
 8007fbc:	4903      	ldr	r1, [pc, #12]	; (8007fcc <HAL_RCC_GetPCLK1Freq+0x24>)
 8007fbe:	5ccb      	ldrb	r3, [r1, r3]
 8007fc0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fc4:	4618      	mov	r0, r3
 8007fc6:	bd80      	pop	{r7, pc}
 8007fc8:	40023800 	.word	0x40023800
 8007fcc:	0800f8f8 	.word	0x0800f8f8

08007fd0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007fd0:	b580      	push	{r7, lr}
 8007fd2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007fd4:	f7ff ffdc 	bl	8007f90 <HAL_RCC_GetHCLKFreq>
 8007fd8:	4602      	mov	r2, r0
 8007fda:	4b05      	ldr	r3, [pc, #20]	; (8007ff0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8007fdc:	689b      	ldr	r3, [r3, #8]
 8007fde:	0b5b      	lsrs	r3, r3, #13
 8007fe0:	f003 0307 	and.w	r3, r3, #7
 8007fe4:	4903      	ldr	r1, [pc, #12]	; (8007ff4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007fe6:	5ccb      	ldrb	r3, [r1, r3]
 8007fe8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007fec:	4618      	mov	r0, r3
 8007fee:	bd80      	pop	{r7, pc}
 8007ff0:	40023800 	.word	0x40023800
 8007ff4:	0800f8f8 	.word	0x0800f8f8

08007ff8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007ff8:	b580      	push	{r7, lr}
 8007ffa:	b082      	sub	sp, #8
 8007ffc:	af00      	add	r7, sp, #0
 8007ffe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	2b00      	cmp	r3, #0
 8008004:	d101      	bne.n	800800a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008006:	2301      	movs	r3, #1
 8008008:	e041      	b.n	800808e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800800a:	687b      	ldr	r3, [r7, #4]
 800800c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008010:	b2db      	uxtb	r3, r3
 8008012:	2b00      	cmp	r3, #0
 8008014:	d106      	bne.n	8008024 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008016:	687b      	ldr	r3, [r7, #4]
 8008018:	2200      	movs	r2, #0
 800801a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800801e:	6878      	ldr	r0, [r7, #4]
 8008020:	f7fe f9c8 	bl	80063b4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008024:	687b      	ldr	r3, [r7, #4]
 8008026:	2202      	movs	r2, #2
 8008028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	681a      	ldr	r2, [r3, #0]
 8008030:	687b      	ldr	r3, [r7, #4]
 8008032:	3304      	adds	r3, #4
 8008034:	4619      	mov	r1, r3
 8008036:	4610      	mov	r0, r2
 8008038:	f000 fbba 	bl	80087b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	2201      	movs	r2, #1
 8008040:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008044:	687b      	ldr	r3, [r7, #4]
 8008046:	2201      	movs	r2, #1
 8008048:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800804c:	687b      	ldr	r3, [r7, #4]
 800804e:	2201      	movs	r2, #1
 8008050:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008054:	687b      	ldr	r3, [r7, #4]
 8008056:	2201      	movs	r2, #1
 8008058:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	2201      	movs	r2, #1
 8008060:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008064:	687b      	ldr	r3, [r7, #4]
 8008066:	2201      	movs	r2, #1
 8008068:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	2201      	movs	r2, #1
 8008070:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	2201      	movs	r2, #1
 8008078:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	2201      	movs	r2, #1
 8008080:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2201      	movs	r2, #1
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800808c:	2300      	movs	r3, #0
}
 800808e:	4618      	mov	r0, r3
 8008090:	3708      	adds	r7, #8
 8008092:	46bd      	mov	sp, r7
 8008094:	bd80      	pop	{r7, pc}
	...

08008098 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008098:	b480      	push	{r7}
 800809a:	b085      	sub	sp, #20
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80080a6:	b2db      	uxtb	r3, r3
 80080a8:	2b01      	cmp	r3, #1
 80080aa:	d001      	beq.n	80080b0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80080ac:	2301      	movs	r3, #1
 80080ae:	e04e      	b.n	800814e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	2202      	movs	r2, #2
 80080b4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	681b      	ldr	r3, [r3, #0]
 80080bc:	68da      	ldr	r2, [r3, #12]
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	681b      	ldr	r3, [r3, #0]
 80080c2:	f042 0201 	orr.w	r2, r2, #1
 80080c6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	4a23      	ldr	r2, [pc, #140]	; (800815c <HAL_TIM_Base_Start_IT+0xc4>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d022      	beq.n	8008118 <HAL_TIM_Base_Start_IT+0x80>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	681b      	ldr	r3, [r3, #0]
 80080d6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080da:	d01d      	beq.n	8008118 <HAL_TIM_Base_Start_IT+0x80>
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	681b      	ldr	r3, [r3, #0]
 80080e0:	4a1f      	ldr	r2, [pc, #124]	; (8008160 <HAL_TIM_Base_Start_IT+0xc8>)
 80080e2:	4293      	cmp	r3, r2
 80080e4:	d018      	beq.n	8008118 <HAL_TIM_Base_Start_IT+0x80>
 80080e6:	687b      	ldr	r3, [r7, #4]
 80080e8:	681b      	ldr	r3, [r3, #0]
 80080ea:	4a1e      	ldr	r2, [pc, #120]	; (8008164 <HAL_TIM_Base_Start_IT+0xcc>)
 80080ec:	4293      	cmp	r3, r2
 80080ee:	d013      	beq.n	8008118 <HAL_TIM_Base_Start_IT+0x80>
 80080f0:	687b      	ldr	r3, [r7, #4]
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a1c      	ldr	r2, [pc, #112]	; (8008168 <HAL_TIM_Base_Start_IT+0xd0>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d00e      	beq.n	8008118 <HAL_TIM_Base_Start_IT+0x80>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	681b      	ldr	r3, [r3, #0]
 80080fe:	4a1b      	ldr	r2, [pc, #108]	; (800816c <HAL_TIM_Base_Start_IT+0xd4>)
 8008100:	4293      	cmp	r3, r2
 8008102:	d009      	beq.n	8008118 <HAL_TIM_Base_Start_IT+0x80>
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	681b      	ldr	r3, [r3, #0]
 8008108:	4a19      	ldr	r2, [pc, #100]	; (8008170 <HAL_TIM_Base_Start_IT+0xd8>)
 800810a:	4293      	cmp	r3, r2
 800810c:	d004      	beq.n	8008118 <HAL_TIM_Base_Start_IT+0x80>
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	681b      	ldr	r3, [r3, #0]
 8008112:	4a18      	ldr	r2, [pc, #96]	; (8008174 <HAL_TIM_Base_Start_IT+0xdc>)
 8008114:	4293      	cmp	r3, r2
 8008116:	d111      	bne.n	800813c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008118:	687b      	ldr	r3, [r7, #4]
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	689b      	ldr	r3, [r3, #8]
 800811e:	f003 0307 	and.w	r3, r3, #7
 8008122:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008124:	68fb      	ldr	r3, [r7, #12]
 8008126:	2b06      	cmp	r3, #6
 8008128:	d010      	beq.n	800814c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	681b      	ldr	r3, [r3, #0]
 800812e:	681a      	ldr	r2, [r3, #0]
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	f042 0201 	orr.w	r2, r2, #1
 8008138:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800813a:	e007      	b.n	800814c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800813c:	687b      	ldr	r3, [r7, #4]
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	681a      	ldr	r2, [r3, #0]
 8008142:	687b      	ldr	r3, [r7, #4]
 8008144:	681b      	ldr	r3, [r3, #0]
 8008146:	f042 0201 	orr.w	r2, r2, #1
 800814a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800814c:	2300      	movs	r3, #0
}
 800814e:	4618      	mov	r0, r3
 8008150:	3714      	adds	r7, #20
 8008152:	46bd      	mov	sp, r7
 8008154:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008158:	4770      	bx	lr
 800815a:	bf00      	nop
 800815c:	40010000 	.word	0x40010000
 8008160:	40000400 	.word	0x40000400
 8008164:	40000800 	.word	0x40000800
 8008168:	40000c00 	.word	0x40000c00
 800816c:	40010400 	.word	0x40010400
 8008170:	40014000 	.word	0x40014000
 8008174:	40001800 	.word	0x40001800

08008178 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008178:	b480      	push	{r7}
 800817a:	b083      	sub	sp, #12
 800817c:	af00      	add	r7, sp, #0
 800817e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008180:	687b      	ldr	r3, [r7, #4]
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	68da      	ldr	r2, [r3, #12]
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	f022 0201 	bic.w	r2, r2, #1
 800818e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	6a1a      	ldr	r2, [r3, #32]
 8008196:	f241 1311 	movw	r3, #4369	; 0x1111
 800819a:	4013      	ands	r3, r2
 800819c:	2b00      	cmp	r3, #0
 800819e:	d10f      	bne.n	80081c0 <HAL_TIM_Base_Stop_IT+0x48>
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	6a1a      	ldr	r2, [r3, #32]
 80081a6:	f240 4344 	movw	r3, #1092	; 0x444
 80081aa:	4013      	ands	r3, r2
 80081ac:	2b00      	cmp	r3, #0
 80081ae:	d107      	bne.n	80081c0 <HAL_TIM_Base_Stop_IT+0x48>
 80081b0:	687b      	ldr	r3, [r7, #4]
 80081b2:	681b      	ldr	r3, [r3, #0]
 80081b4:	681a      	ldr	r2, [r3, #0]
 80081b6:	687b      	ldr	r3, [r7, #4]
 80081b8:	681b      	ldr	r3, [r3, #0]
 80081ba:	f022 0201 	bic.w	r2, r2, #1
 80081be:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	2201      	movs	r2, #1
 80081c4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80081c8:	2300      	movs	r3, #0
}
 80081ca:	4618      	mov	r0, r3
 80081cc:	370c      	adds	r7, #12
 80081ce:	46bd      	mov	sp, r7
 80081d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081d4:	4770      	bx	lr

080081d6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 80081d6:	b580      	push	{r7, lr}
 80081d8:	b082      	sub	sp, #8
 80081da:	af00      	add	r7, sp, #0
 80081dc:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80081de:	687b      	ldr	r3, [r7, #4]
 80081e0:	2b00      	cmp	r3, #0
 80081e2:	d101      	bne.n	80081e8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 80081e4:	2301      	movs	r3, #1
 80081e6:	e041      	b.n	800826c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80081e8:	687b      	ldr	r3, [r7, #4]
 80081ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80081ee:	b2db      	uxtb	r3, r3
 80081f0:	2b00      	cmp	r3, #0
 80081f2:	d106      	bne.n	8008202 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	2200      	movs	r2, #0
 80081f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 80081fc:	6878      	ldr	r0, [r7, #4]
 80081fe:	f000 f839 	bl	8008274 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008202:	687b      	ldr	r3, [r7, #4]
 8008204:	2202      	movs	r2, #2
 8008206:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	681a      	ldr	r2, [r3, #0]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	3304      	adds	r3, #4
 8008212:	4619      	mov	r1, r3
 8008214:	4610      	mov	r0, r2
 8008216:	f000 facb 	bl	80087b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800821a:	687b      	ldr	r3, [r7, #4]
 800821c:	2201      	movs	r2, #1
 800821e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008222:	687b      	ldr	r3, [r7, #4]
 8008224:	2201      	movs	r2, #1
 8008226:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800822a:	687b      	ldr	r3, [r7, #4]
 800822c:	2201      	movs	r2, #1
 800822e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	2201      	movs	r2, #1
 8008236:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	2201      	movs	r2, #1
 800823e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	2201      	movs	r2, #1
 8008246:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	2201      	movs	r2, #1
 800824e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008252:	687b      	ldr	r3, [r7, #4]
 8008254:	2201      	movs	r2, #1
 8008256:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	2201      	movs	r2, #1
 800825e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008262:	687b      	ldr	r3, [r7, #4]
 8008264:	2201      	movs	r2, #1
 8008266:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800826a:	2300      	movs	r3, #0
}
 800826c:	4618      	mov	r0, r3
 800826e:	3708      	adds	r7, #8
 8008270:	46bd      	mov	sp, r7
 8008272:	bd80      	pop	{r7, pc}

08008274 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8008274:	b480      	push	{r7}
 8008276:	b083      	sub	sp, #12
 8008278:	af00      	add	r7, sp, #0
 800827a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800827c:	bf00      	nop
 800827e:	370c      	adds	r7, #12
 8008280:	46bd      	mov	sp, r7
 8008282:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008286:	4770      	bx	lr

08008288 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008288:	b580      	push	{r7, lr}
 800828a:	b082      	sub	sp, #8
 800828c:	af00      	add	r7, sp, #0
 800828e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008290:	687b      	ldr	r3, [r7, #4]
 8008292:	681b      	ldr	r3, [r3, #0]
 8008294:	691b      	ldr	r3, [r3, #16]
 8008296:	f003 0302 	and.w	r3, r3, #2
 800829a:	2b02      	cmp	r3, #2
 800829c:	d122      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800829e:	687b      	ldr	r3, [r7, #4]
 80082a0:	681b      	ldr	r3, [r3, #0]
 80082a2:	68db      	ldr	r3, [r3, #12]
 80082a4:	f003 0302 	and.w	r3, r3, #2
 80082a8:	2b02      	cmp	r3, #2
 80082aa:	d11b      	bne.n	80082e4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	f06f 0202 	mvn.w	r2, #2
 80082b4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80082b6:	687b      	ldr	r3, [r7, #4]
 80082b8:	2201      	movs	r2, #1
 80082ba:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	699b      	ldr	r3, [r3, #24]
 80082c2:	f003 0303 	and.w	r3, r3, #3
 80082c6:	2b00      	cmp	r3, #0
 80082c8:	d003      	beq.n	80082d2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80082ca:	6878      	ldr	r0, [r7, #4]
 80082cc:	f000 fa51 	bl	8008772 <HAL_TIM_IC_CaptureCallback>
 80082d0:	e005      	b.n	80082de <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80082d2:	6878      	ldr	r0, [r7, #4]
 80082d4:	f000 fa43 	bl	800875e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80082d8:	6878      	ldr	r0, [r7, #4]
 80082da:	f000 fa54 	bl	8008786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80082de:	687b      	ldr	r3, [r7, #4]
 80082e0:	2200      	movs	r2, #0
 80082e2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80082e4:	687b      	ldr	r3, [r7, #4]
 80082e6:	681b      	ldr	r3, [r3, #0]
 80082e8:	691b      	ldr	r3, [r3, #16]
 80082ea:	f003 0304 	and.w	r3, r3, #4
 80082ee:	2b04      	cmp	r3, #4
 80082f0:	d122      	bne.n	8008338 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80082f2:	687b      	ldr	r3, [r7, #4]
 80082f4:	681b      	ldr	r3, [r3, #0]
 80082f6:	68db      	ldr	r3, [r3, #12]
 80082f8:	f003 0304 	and.w	r3, r3, #4
 80082fc:	2b04      	cmp	r3, #4
 80082fe:	d11b      	bne.n	8008338 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	681b      	ldr	r3, [r3, #0]
 8008304:	f06f 0204 	mvn.w	r2, #4
 8008308:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800830a:	687b      	ldr	r3, [r7, #4]
 800830c:	2202      	movs	r2, #2
 800830e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	681b      	ldr	r3, [r3, #0]
 8008314:	699b      	ldr	r3, [r3, #24]
 8008316:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800831a:	2b00      	cmp	r3, #0
 800831c:	d003      	beq.n	8008326 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800831e:	6878      	ldr	r0, [r7, #4]
 8008320:	f000 fa27 	bl	8008772 <HAL_TIM_IC_CaptureCallback>
 8008324:	e005      	b.n	8008332 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008326:	6878      	ldr	r0, [r7, #4]
 8008328:	f000 fa19 	bl	800875e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800832c:	6878      	ldr	r0, [r7, #4]
 800832e:	f000 fa2a 	bl	8008786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008332:	687b      	ldr	r3, [r7, #4]
 8008334:	2200      	movs	r2, #0
 8008336:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8008338:	687b      	ldr	r3, [r7, #4]
 800833a:	681b      	ldr	r3, [r3, #0]
 800833c:	691b      	ldr	r3, [r3, #16]
 800833e:	f003 0308 	and.w	r3, r3, #8
 8008342:	2b08      	cmp	r3, #8
 8008344:	d122      	bne.n	800838c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	681b      	ldr	r3, [r3, #0]
 800834a:	68db      	ldr	r3, [r3, #12]
 800834c:	f003 0308 	and.w	r3, r3, #8
 8008350:	2b08      	cmp	r3, #8
 8008352:	d11b      	bne.n	800838c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8008354:	687b      	ldr	r3, [r7, #4]
 8008356:	681b      	ldr	r3, [r3, #0]
 8008358:	f06f 0208 	mvn.w	r2, #8
 800835c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	2204      	movs	r2, #4
 8008362:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	681b      	ldr	r3, [r3, #0]
 8008368:	69db      	ldr	r3, [r3, #28]
 800836a:	f003 0303 	and.w	r3, r3, #3
 800836e:	2b00      	cmp	r3, #0
 8008370:	d003      	beq.n	800837a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8008372:	6878      	ldr	r0, [r7, #4]
 8008374:	f000 f9fd 	bl	8008772 <HAL_TIM_IC_CaptureCallback>
 8008378:	e005      	b.n	8008386 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800837a:	6878      	ldr	r0, [r7, #4]
 800837c:	f000 f9ef 	bl	800875e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008380:	6878      	ldr	r0, [r7, #4]
 8008382:	f000 fa00 	bl	8008786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008386:	687b      	ldr	r3, [r7, #4]
 8008388:	2200      	movs	r2, #0
 800838a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	681b      	ldr	r3, [r3, #0]
 8008390:	691b      	ldr	r3, [r3, #16]
 8008392:	f003 0310 	and.w	r3, r3, #16
 8008396:	2b10      	cmp	r3, #16
 8008398:	d122      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800839a:	687b      	ldr	r3, [r7, #4]
 800839c:	681b      	ldr	r3, [r3, #0]
 800839e:	68db      	ldr	r3, [r3, #12]
 80083a0:	f003 0310 	and.w	r3, r3, #16
 80083a4:	2b10      	cmp	r3, #16
 80083a6:	d11b      	bne.n	80083e0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	f06f 0210 	mvn.w	r2, #16
 80083b0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	2208      	movs	r2, #8
 80083b6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	681b      	ldr	r3, [r3, #0]
 80083bc:	69db      	ldr	r3, [r3, #28]
 80083be:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083c2:	2b00      	cmp	r3, #0
 80083c4:	d003      	beq.n	80083ce <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083c6:	6878      	ldr	r0, [r7, #4]
 80083c8:	f000 f9d3 	bl	8008772 <HAL_TIM_IC_CaptureCallback>
 80083cc:	e005      	b.n	80083da <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ce:	6878      	ldr	r0, [r7, #4]
 80083d0:	f000 f9c5 	bl	800875e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083d4:	6878      	ldr	r0, [r7, #4]
 80083d6:	f000 f9d6 	bl	8008786 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083da:	687b      	ldr	r3, [r7, #4]
 80083dc:	2200      	movs	r2, #0
 80083de:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	691b      	ldr	r3, [r3, #16]
 80083e6:	f003 0301 	and.w	r3, r3, #1
 80083ea:	2b01      	cmp	r3, #1
 80083ec:	d10e      	bne.n	800840c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80083ee:	687b      	ldr	r3, [r7, #4]
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	68db      	ldr	r3, [r3, #12]
 80083f4:	f003 0301 	and.w	r3, r3, #1
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	d107      	bne.n	800840c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80083fc:	687b      	ldr	r3, [r7, #4]
 80083fe:	681b      	ldr	r3, [r3, #0]
 8008400:	f06f 0201 	mvn.w	r2, #1
 8008404:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8008406:	6878      	ldr	r0, [r7, #4]
 8008408:	f7fc fee4 	bl	80051d4 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800840c:	687b      	ldr	r3, [r7, #4]
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	691b      	ldr	r3, [r3, #16]
 8008412:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008416:	2b80      	cmp	r3, #128	; 0x80
 8008418:	d10e      	bne.n	8008438 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800841a:	687b      	ldr	r3, [r7, #4]
 800841c:	681b      	ldr	r3, [r3, #0]
 800841e:	68db      	ldr	r3, [r3, #12]
 8008420:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008424:	2b80      	cmp	r3, #128	; 0x80
 8008426:	d107      	bne.n	8008438 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8008428:	687b      	ldr	r3, [r7, #4]
 800842a:	681b      	ldr	r3, [r3, #0]
 800842c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8008430:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8008432:	6878      	ldr	r0, [r7, #4]
 8008434:	f000 fca6 	bl	8008d84 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8008438:	687b      	ldr	r3, [r7, #4]
 800843a:	681b      	ldr	r3, [r3, #0]
 800843c:	691b      	ldr	r3, [r3, #16]
 800843e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008442:	2b40      	cmp	r3, #64	; 0x40
 8008444:	d10e      	bne.n	8008464 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8008446:	687b      	ldr	r3, [r7, #4]
 8008448:	681b      	ldr	r3, [r3, #0]
 800844a:	68db      	ldr	r3, [r3, #12]
 800844c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008450:	2b40      	cmp	r3, #64	; 0x40
 8008452:	d107      	bne.n	8008464 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	681b      	ldr	r3, [r3, #0]
 8008458:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800845c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800845e:	6878      	ldr	r0, [r7, #4]
 8008460:	f000 f99b 	bl	800879a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	681b      	ldr	r3, [r3, #0]
 8008468:	691b      	ldr	r3, [r3, #16]
 800846a:	f003 0320 	and.w	r3, r3, #32
 800846e:	2b20      	cmp	r3, #32
 8008470:	d10e      	bne.n	8008490 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8008472:	687b      	ldr	r3, [r7, #4]
 8008474:	681b      	ldr	r3, [r3, #0]
 8008476:	68db      	ldr	r3, [r3, #12]
 8008478:	f003 0320 	and.w	r3, r3, #32
 800847c:	2b20      	cmp	r3, #32
 800847e:	d107      	bne.n	8008490 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	681b      	ldr	r3, [r3, #0]
 8008484:	f06f 0220 	mvn.w	r2, #32
 8008488:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800848a:	6878      	ldr	r0, [r7, #4]
 800848c:	f000 fc70 	bl	8008d70 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008490:	bf00      	nop
 8008492:	3708      	adds	r7, #8
 8008494:	46bd      	mov	sp, r7
 8008496:	bd80      	pop	{r7, pc}

08008498 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008498:	b580      	push	{r7, lr}
 800849a:	b086      	sub	sp, #24
 800849c:	af00      	add	r7, sp, #0
 800849e:	60f8      	str	r0, [r7, #12]
 80084a0:	60b9      	str	r1, [r7, #8]
 80084a2:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 80084a4:	2300      	movs	r3, #0
 80084a6:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80084a8:	68fb      	ldr	r3, [r7, #12]
 80084aa:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ae:	2b01      	cmp	r3, #1
 80084b0:	d101      	bne.n	80084b6 <HAL_TIM_IC_ConfigChannel+0x1e>
 80084b2:	2302      	movs	r3, #2
 80084b4:	e088      	b.n	80085c8 <HAL_TIM_IC_ConfigChannel+0x130>
 80084b6:	68fb      	ldr	r3, [r7, #12]
 80084b8:	2201      	movs	r2, #1
 80084ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80084be:	687b      	ldr	r3, [r7, #4]
 80084c0:	2b00      	cmp	r3, #0
 80084c2:	d11b      	bne.n	80084fc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80084c4:	68fb      	ldr	r3, [r7, #12]
 80084c6:	6818      	ldr	r0, [r3, #0]
 80084c8:	68bb      	ldr	r3, [r7, #8]
 80084ca:	6819      	ldr	r1, [r3, #0]
 80084cc:	68bb      	ldr	r3, [r7, #8]
 80084ce:	685a      	ldr	r2, [r3, #4]
 80084d0:	68bb      	ldr	r3, [r7, #8]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f000 fa0c 	bl	80088f0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80084d8:	68fb      	ldr	r3, [r7, #12]
 80084da:	681b      	ldr	r3, [r3, #0]
 80084dc:	699a      	ldr	r2, [r3, #24]
 80084de:	68fb      	ldr	r3, [r7, #12]
 80084e0:	681b      	ldr	r3, [r3, #0]
 80084e2:	f022 020c 	bic.w	r2, r2, #12
 80084e6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80084e8:	68fb      	ldr	r3, [r7, #12]
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	6999      	ldr	r1, [r3, #24]
 80084ee:	68bb      	ldr	r3, [r7, #8]
 80084f0:	689a      	ldr	r2, [r3, #8]
 80084f2:	68fb      	ldr	r3, [r7, #12]
 80084f4:	681b      	ldr	r3, [r3, #0]
 80084f6:	430a      	orrs	r2, r1
 80084f8:	619a      	str	r2, [r3, #24]
 80084fa:	e060      	b.n	80085be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80084fc:	687b      	ldr	r3, [r7, #4]
 80084fe:	2b04      	cmp	r3, #4
 8008500:	d11c      	bne.n	800853c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	6818      	ldr	r0, [r3, #0]
 8008506:	68bb      	ldr	r3, [r7, #8]
 8008508:	6819      	ldr	r1, [r3, #0]
 800850a:	68bb      	ldr	r3, [r7, #8]
 800850c:	685a      	ldr	r2, [r3, #4]
 800850e:	68bb      	ldr	r3, [r7, #8]
 8008510:	68db      	ldr	r3, [r3, #12]
 8008512:	f000 fa90 	bl	8008a36 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8008516:	68fb      	ldr	r3, [r7, #12]
 8008518:	681b      	ldr	r3, [r3, #0]
 800851a:	699a      	ldr	r2, [r3, #24]
 800851c:	68fb      	ldr	r3, [r7, #12]
 800851e:	681b      	ldr	r3, [r3, #0]
 8008520:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8008524:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8008526:	68fb      	ldr	r3, [r7, #12]
 8008528:	681b      	ldr	r3, [r3, #0]
 800852a:	6999      	ldr	r1, [r3, #24]
 800852c:	68bb      	ldr	r3, [r7, #8]
 800852e:	689b      	ldr	r3, [r3, #8]
 8008530:	021a      	lsls	r2, r3, #8
 8008532:	68fb      	ldr	r3, [r7, #12]
 8008534:	681b      	ldr	r3, [r3, #0]
 8008536:	430a      	orrs	r2, r1
 8008538:	619a      	str	r2, [r3, #24]
 800853a:	e040      	b.n	80085be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	2b08      	cmp	r3, #8
 8008540:	d11b      	bne.n	800857a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8008542:	68fb      	ldr	r3, [r7, #12]
 8008544:	6818      	ldr	r0, [r3, #0]
 8008546:	68bb      	ldr	r3, [r7, #8]
 8008548:	6819      	ldr	r1, [r3, #0]
 800854a:	68bb      	ldr	r3, [r7, #8]
 800854c:	685a      	ldr	r2, [r3, #4]
 800854e:	68bb      	ldr	r3, [r7, #8]
 8008550:	68db      	ldr	r3, [r3, #12]
 8008552:	f000 fadd 	bl	8008b10 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8008556:	68fb      	ldr	r3, [r7, #12]
 8008558:	681b      	ldr	r3, [r3, #0]
 800855a:	69da      	ldr	r2, [r3, #28]
 800855c:	68fb      	ldr	r3, [r7, #12]
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f022 020c 	bic.w	r2, r2, #12
 8008564:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	69d9      	ldr	r1, [r3, #28]
 800856c:	68bb      	ldr	r3, [r7, #8]
 800856e:	689a      	ldr	r2, [r3, #8]
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	430a      	orrs	r2, r1
 8008576:	61da      	str	r2, [r3, #28]
 8008578:	e021      	b.n	80085be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800857a:	687b      	ldr	r3, [r7, #4]
 800857c:	2b0c      	cmp	r3, #12
 800857e:	d11c      	bne.n	80085ba <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008580:	68fb      	ldr	r3, [r7, #12]
 8008582:	6818      	ldr	r0, [r3, #0]
 8008584:	68bb      	ldr	r3, [r7, #8]
 8008586:	6819      	ldr	r1, [r3, #0]
 8008588:	68bb      	ldr	r3, [r7, #8]
 800858a:	685a      	ldr	r2, [r3, #4]
 800858c:	68bb      	ldr	r3, [r7, #8]
 800858e:	68db      	ldr	r3, [r3, #12]
 8008590:	f000 fafa 	bl	8008b88 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8008594:	68fb      	ldr	r3, [r7, #12]
 8008596:	681b      	ldr	r3, [r3, #0]
 8008598:	69da      	ldr	r2, [r3, #28]
 800859a:	68fb      	ldr	r3, [r7, #12]
 800859c:	681b      	ldr	r3, [r3, #0]
 800859e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80085a2:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	69d9      	ldr	r1, [r3, #28]
 80085aa:	68bb      	ldr	r3, [r7, #8]
 80085ac:	689b      	ldr	r3, [r3, #8]
 80085ae:	021a      	lsls	r2, r3, #8
 80085b0:	68fb      	ldr	r3, [r7, #12]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	430a      	orrs	r2, r1
 80085b6:	61da      	str	r2, [r3, #28]
 80085b8:	e001      	b.n	80085be <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80085ba:	2301      	movs	r3, #1
 80085bc:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	2200      	movs	r2, #0
 80085c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80085c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80085c8:	4618      	mov	r0, r3
 80085ca:	3718      	adds	r7, #24
 80085cc:	46bd      	mov	sp, r7
 80085ce:	bd80      	pop	{r7, pc}

080085d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80085d0:	b580      	push	{r7, lr}
 80085d2:	b084      	sub	sp, #16
 80085d4:	af00      	add	r7, sp, #0
 80085d6:	6078      	str	r0, [r7, #4]
 80085d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80085da:	2300      	movs	r3, #0
 80085dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e4:	2b01      	cmp	r3, #1
 80085e6:	d101      	bne.n	80085ec <HAL_TIM_ConfigClockSource+0x1c>
 80085e8:	2302      	movs	r3, #2
 80085ea:	e0b4      	b.n	8008756 <HAL_TIM_ConfigClockSource+0x186>
 80085ec:	687b      	ldr	r3, [r7, #4]
 80085ee:	2201      	movs	r2, #1
 80085f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	2202      	movs	r2, #2
 80085f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80085fc:	687b      	ldr	r3, [r7, #4]
 80085fe:	681b      	ldr	r3, [r3, #0]
 8008600:	689b      	ldr	r3, [r3, #8]
 8008602:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8008604:	68bb      	ldr	r3, [r7, #8]
 8008606:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800860a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008612:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8008614:	687b      	ldr	r3, [r7, #4]
 8008616:	681b      	ldr	r3, [r3, #0]
 8008618:	68ba      	ldr	r2, [r7, #8]
 800861a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800861c:	683b      	ldr	r3, [r7, #0]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8008624:	d03e      	beq.n	80086a4 <HAL_TIM_ConfigClockSource+0xd4>
 8008626:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800862a:	f200 8087 	bhi.w	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800862e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008632:	f000 8086 	beq.w	8008742 <HAL_TIM_ConfigClockSource+0x172>
 8008636:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800863a:	d87f      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800863c:	2b70      	cmp	r3, #112	; 0x70
 800863e:	d01a      	beq.n	8008676 <HAL_TIM_ConfigClockSource+0xa6>
 8008640:	2b70      	cmp	r3, #112	; 0x70
 8008642:	d87b      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 8008644:	2b60      	cmp	r3, #96	; 0x60
 8008646:	d050      	beq.n	80086ea <HAL_TIM_ConfigClockSource+0x11a>
 8008648:	2b60      	cmp	r3, #96	; 0x60
 800864a:	d877      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800864c:	2b50      	cmp	r3, #80	; 0x50
 800864e:	d03c      	beq.n	80086ca <HAL_TIM_ConfigClockSource+0xfa>
 8008650:	2b50      	cmp	r3, #80	; 0x50
 8008652:	d873      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 8008654:	2b40      	cmp	r3, #64	; 0x40
 8008656:	d058      	beq.n	800870a <HAL_TIM_ConfigClockSource+0x13a>
 8008658:	2b40      	cmp	r3, #64	; 0x40
 800865a:	d86f      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800865c:	2b30      	cmp	r3, #48	; 0x30
 800865e:	d064      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x15a>
 8008660:	2b30      	cmp	r3, #48	; 0x30
 8008662:	d86b      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 8008664:	2b20      	cmp	r3, #32
 8008666:	d060      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x15a>
 8008668:	2b20      	cmp	r3, #32
 800866a:	d867      	bhi.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
 800866c:	2b00      	cmp	r3, #0
 800866e:	d05c      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x15a>
 8008670:	2b10      	cmp	r3, #16
 8008672:	d05a      	beq.n	800872a <HAL_TIM_ConfigClockSource+0x15a>
 8008674:	e062      	b.n	800873c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	6818      	ldr	r0, [r3, #0]
 800867a:	683b      	ldr	r3, [r7, #0]
 800867c:	6899      	ldr	r1, [r3, #8]
 800867e:	683b      	ldr	r3, [r7, #0]
 8008680:	685a      	ldr	r2, [r3, #4]
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	68db      	ldr	r3, [r3, #12]
 8008686:	f000 fad7 	bl	8008c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	681b      	ldr	r3, [r3, #0]
 800868e:	689b      	ldr	r3, [r3, #8]
 8008690:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8008692:	68bb      	ldr	r3, [r7, #8]
 8008694:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008698:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	681b      	ldr	r3, [r3, #0]
 800869e:	68ba      	ldr	r2, [r7, #8]
 80086a0:	609a      	str	r2, [r3, #8]
      break;
 80086a2:	e04f      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6818      	ldr	r0, [r3, #0]
 80086a8:	683b      	ldr	r3, [r7, #0]
 80086aa:	6899      	ldr	r1, [r3, #8]
 80086ac:	683b      	ldr	r3, [r7, #0]
 80086ae:	685a      	ldr	r2, [r3, #4]
 80086b0:	683b      	ldr	r3, [r7, #0]
 80086b2:	68db      	ldr	r3, [r3, #12]
 80086b4:	f000 fac0 	bl	8008c38 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	681b      	ldr	r3, [r3, #0]
 80086bc:	689a      	ldr	r2, [r3, #8]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80086c6:	609a      	str	r2, [r3, #8]
      break;
 80086c8:	e03c      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80086ca:	687b      	ldr	r3, [r7, #4]
 80086cc:	6818      	ldr	r0, [r3, #0]
 80086ce:	683b      	ldr	r3, [r7, #0]
 80086d0:	6859      	ldr	r1, [r3, #4]
 80086d2:	683b      	ldr	r3, [r7, #0]
 80086d4:	68db      	ldr	r3, [r3, #12]
 80086d6:	461a      	mov	r2, r3
 80086d8:	f000 f97e 	bl	80089d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	2150      	movs	r1, #80	; 0x50
 80086e2:	4618      	mov	r0, r3
 80086e4:	f000 fa8d 	bl	8008c02 <TIM_ITRx_SetConfig>
      break;
 80086e8:	e02c      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80086ea:	687b      	ldr	r3, [r7, #4]
 80086ec:	6818      	ldr	r0, [r3, #0]
 80086ee:	683b      	ldr	r3, [r7, #0]
 80086f0:	6859      	ldr	r1, [r3, #4]
 80086f2:	683b      	ldr	r3, [r7, #0]
 80086f4:	68db      	ldr	r3, [r3, #12]
 80086f6:	461a      	mov	r2, r3
 80086f8:	f000 f9da 	bl	8008ab0 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	681b      	ldr	r3, [r3, #0]
 8008700:	2160      	movs	r1, #96	; 0x60
 8008702:	4618      	mov	r0, r3
 8008704:	f000 fa7d 	bl	8008c02 <TIM_ITRx_SetConfig>
      break;
 8008708:	e01c      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6818      	ldr	r0, [r3, #0]
 800870e:	683b      	ldr	r3, [r7, #0]
 8008710:	6859      	ldr	r1, [r3, #4]
 8008712:	683b      	ldr	r3, [r7, #0]
 8008714:	68db      	ldr	r3, [r3, #12]
 8008716:	461a      	mov	r2, r3
 8008718:	f000 f95e 	bl	80089d8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800871c:	687b      	ldr	r3, [r7, #4]
 800871e:	681b      	ldr	r3, [r3, #0]
 8008720:	2140      	movs	r1, #64	; 0x40
 8008722:	4618      	mov	r0, r3
 8008724:	f000 fa6d 	bl	8008c02 <TIM_ITRx_SetConfig>
      break;
 8008728:	e00c      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	681a      	ldr	r2, [r3, #0]
 800872e:	683b      	ldr	r3, [r7, #0]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	4619      	mov	r1, r3
 8008734:	4610      	mov	r0, r2
 8008736:	f000 fa64 	bl	8008c02 <TIM_ITRx_SetConfig>
      break;
 800873a:	e003      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800873c:	2301      	movs	r3, #1
 800873e:	73fb      	strb	r3, [r7, #15]
      break;
 8008740:	e000      	b.n	8008744 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8008742:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	2201      	movs	r2, #1
 8008748:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	2200      	movs	r2, #0
 8008750:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8008754:	7bfb      	ldrb	r3, [r7, #15]
}
 8008756:	4618      	mov	r0, r3
 8008758:	3710      	adds	r7, #16
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}

0800875e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800875e:	b480      	push	{r7}
 8008760:	b083      	sub	sp, #12
 8008762:	af00      	add	r7, sp, #0
 8008764:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008766:	bf00      	nop
 8008768:	370c      	adds	r7, #12
 800876a:	46bd      	mov	sp, r7
 800876c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008770:	4770      	bx	lr

08008772 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008772:	b480      	push	{r7}
 8008774:	b083      	sub	sp, #12
 8008776:	af00      	add	r7, sp, #0
 8008778:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800877a:	bf00      	nop
 800877c:	370c      	adds	r7, #12
 800877e:	46bd      	mov	sp, r7
 8008780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008784:	4770      	bx	lr

08008786 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008786:	b480      	push	{r7}
 8008788:	b083      	sub	sp, #12
 800878a:	af00      	add	r7, sp, #0
 800878c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800878e:	bf00      	nop
 8008790:	370c      	adds	r7, #12
 8008792:	46bd      	mov	sp, r7
 8008794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008798:	4770      	bx	lr

0800879a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800879a:	b480      	push	{r7}
 800879c:	b083      	sub	sp, #12
 800879e:	af00      	add	r7, sp, #0
 80087a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80087a2:	bf00      	nop
 80087a4:	370c      	adds	r7, #12
 80087a6:	46bd      	mov	sp, r7
 80087a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087ac:	4770      	bx	lr
	...

080087b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80087b0:	b480      	push	{r7}
 80087b2:	b085      	sub	sp, #20
 80087b4:	af00      	add	r7, sp, #0
 80087b6:	6078      	str	r0, [r7, #4]
 80087b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80087ba:	687b      	ldr	r3, [r7, #4]
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	4a40      	ldr	r2, [pc, #256]	; (80088c4 <TIM_Base_SetConfig+0x114>)
 80087c4:	4293      	cmp	r3, r2
 80087c6:	d013      	beq.n	80087f0 <TIM_Base_SetConfig+0x40>
 80087c8:	687b      	ldr	r3, [r7, #4]
 80087ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80087ce:	d00f      	beq.n	80087f0 <TIM_Base_SetConfig+0x40>
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	4a3d      	ldr	r2, [pc, #244]	; (80088c8 <TIM_Base_SetConfig+0x118>)
 80087d4:	4293      	cmp	r3, r2
 80087d6:	d00b      	beq.n	80087f0 <TIM_Base_SetConfig+0x40>
 80087d8:	687b      	ldr	r3, [r7, #4]
 80087da:	4a3c      	ldr	r2, [pc, #240]	; (80088cc <TIM_Base_SetConfig+0x11c>)
 80087dc:	4293      	cmp	r3, r2
 80087de:	d007      	beq.n	80087f0 <TIM_Base_SetConfig+0x40>
 80087e0:	687b      	ldr	r3, [r7, #4]
 80087e2:	4a3b      	ldr	r2, [pc, #236]	; (80088d0 <TIM_Base_SetConfig+0x120>)
 80087e4:	4293      	cmp	r3, r2
 80087e6:	d003      	beq.n	80087f0 <TIM_Base_SetConfig+0x40>
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	4a3a      	ldr	r2, [pc, #232]	; (80088d4 <TIM_Base_SetConfig+0x124>)
 80087ec:	4293      	cmp	r3, r2
 80087ee:	d108      	bne.n	8008802 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80087f0:	68fb      	ldr	r3, [r7, #12]
 80087f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80087f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80087f8:	683b      	ldr	r3, [r7, #0]
 80087fa:	685b      	ldr	r3, [r3, #4]
 80087fc:	68fa      	ldr	r2, [r7, #12]
 80087fe:	4313      	orrs	r3, r2
 8008800:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	4a2f      	ldr	r2, [pc, #188]	; (80088c4 <TIM_Base_SetConfig+0x114>)
 8008806:	4293      	cmp	r3, r2
 8008808:	d02b      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008810:	d027      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	4a2c      	ldr	r2, [pc, #176]	; (80088c8 <TIM_Base_SetConfig+0x118>)
 8008816:	4293      	cmp	r3, r2
 8008818:	d023      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 800881a:	687b      	ldr	r3, [r7, #4]
 800881c:	4a2b      	ldr	r2, [pc, #172]	; (80088cc <TIM_Base_SetConfig+0x11c>)
 800881e:	4293      	cmp	r3, r2
 8008820:	d01f      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 8008822:	687b      	ldr	r3, [r7, #4]
 8008824:	4a2a      	ldr	r2, [pc, #168]	; (80088d0 <TIM_Base_SetConfig+0x120>)
 8008826:	4293      	cmp	r3, r2
 8008828:	d01b      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	4a29      	ldr	r2, [pc, #164]	; (80088d4 <TIM_Base_SetConfig+0x124>)
 800882e:	4293      	cmp	r3, r2
 8008830:	d017      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 8008832:	687b      	ldr	r3, [r7, #4]
 8008834:	4a28      	ldr	r2, [pc, #160]	; (80088d8 <TIM_Base_SetConfig+0x128>)
 8008836:	4293      	cmp	r3, r2
 8008838:	d013      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	4a27      	ldr	r2, [pc, #156]	; (80088dc <TIM_Base_SetConfig+0x12c>)
 800883e:	4293      	cmp	r3, r2
 8008840:	d00f      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	4a26      	ldr	r2, [pc, #152]	; (80088e0 <TIM_Base_SetConfig+0x130>)
 8008846:	4293      	cmp	r3, r2
 8008848:	d00b      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 800884a:	687b      	ldr	r3, [r7, #4]
 800884c:	4a25      	ldr	r2, [pc, #148]	; (80088e4 <TIM_Base_SetConfig+0x134>)
 800884e:	4293      	cmp	r3, r2
 8008850:	d007      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	4a24      	ldr	r2, [pc, #144]	; (80088e8 <TIM_Base_SetConfig+0x138>)
 8008856:	4293      	cmp	r3, r2
 8008858:	d003      	beq.n	8008862 <TIM_Base_SetConfig+0xb2>
 800885a:	687b      	ldr	r3, [r7, #4]
 800885c:	4a23      	ldr	r2, [pc, #140]	; (80088ec <TIM_Base_SetConfig+0x13c>)
 800885e:	4293      	cmp	r3, r2
 8008860:	d108      	bne.n	8008874 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008868:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800886a:	683b      	ldr	r3, [r7, #0]
 800886c:	68db      	ldr	r3, [r3, #12]
 800886e:	68fa      	ldr	r2, [r7, #12]
 8008870:	4313      	orrs	r3, r2
 8008872:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008874:	68fb      	ldr	r3, [r7, #12]
 8008876:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800887a:	683b      	ldr	r3, [r7, #0]
 800887c:	695b      	ldr	r3, [r3, #20]
 800887e:	4313      	orrs	r3, r2
 8008880:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008882:	687b      	ldr	r3, [r7, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008888:	683b      	ldr	r3, [r7, #0]
 800888a:	689a      	ldr	r2, [r3, #8]
 800888c:	687b      	ldr	r3, [r7, #4]
 800888e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008890:	683b      	ldr	r3, [r7, #0]
 8008892:	681a      	ldr	r2, [r3, #0]
 8008894:	687b      	ldr	r3, [r7, #4]
 8008896:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008898:	687b      	ldr	r3, [r7, #4]
 800889a:	4a0a      	ldr	r2, [pc, #40]	; (80088c4 <TIM_Base_SetConfig+0x114>)
 800889c:	4293      	cmp	r3, r2
 800889e:	d003      	beq.n	80088a8 <TIM_Base_SetConfig+0xf8>
 80088a0:	687b      	ldr	r3, [r7, #4]
 80088a2:	4a0c      	ldr	r2, [pc, #48]	; (80088d4 <TIM_Base_SetConfig+0x124>)
 80088a4:	4293      	cmp	r3, r2
 80088a6:	d103      	bne.n	80088b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80088a8:	683b      	ldr	r3, [r7, #0]
 80088aa:	691a      	ldr	r2, [r3, #16]
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80088b0:	687b      	ldr	r3, [r7, #4]
 80088b2:	2201      	movs	r2, #1
 80088b4:	615a      	str	r2, [r3, #20]
}
 80088b6:	bf00      	nop
 80088b8:	3714      	adds	r7, #20
 80088ba:	46bd      	mov	sp, r7
 80088bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088c0:	4770      	bx	lr
 80088c2:	bf00      	nop
 80088c4:	40010000 	.word	0x40010000
 80088c8:	40000400 	.word	0x40000400
 80088cc:	40000800 	.word	0x40000800
 80088d0:	40000c00 	.word	0x40000c00
 80088d4:	40010400 	.word	0x40010400
 80088d8:	40014000 	.word	0x40014000
 80088dc:	40014400 	.word	0x40014400
 80088e0:	40014800 	.word	0x40014800
 80088e4:	40001800 	.word	0x40001800
 80088e8:	40001c00 	.word	0x40001c00
 80088ec:	40002000 	.word	0x40002000

080088f0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80088f0:	b480      	push	{r7}
 80088f2:	b087      	sub	sp, #28
 80088f4:	af00      	add	r7, sp, #0
 80088f6:	60f8      	str	r0, [r7, #12]
 80088f8:	60b9      	str	r1, [r7, #8]
 80088fa:	607a      	str	r2, [r7, #4]
 80088fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80088fe:	68fb      	ldr	r3, [r7, #12]
 8008900:	6a1b      	ldr	r3, [r3, #32]
 8008902:	f023 0201 	bic.w	r2, r3, #1
 8008906:	68fb      	ldr	r3, [r7, #12]
 8008908:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800890a:	68fb      	ldr	r3, [r7, #12]
 800890c:	699b      	ldr	r3, [r3, #24]
 800890e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008910:	68fb      	ldr	r3, [r7, #12]
 8008912:	6a1b      	ldr	r3, [r3, #32]
 8008914:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008916:	68fb      	ldr	r3, [r7, #12]
 8008918:	4a28      	ldr	r2, [pc, #160]	; (80089bc <TIM_TI1_SetConfig+0xcc>)
 800891a:	4293      	cmp	r3, r2
 800891c:	d01b      	beq.n	8008956 <TIM_TI1_SetConfig+0x66>
 800891e:	68fb      	ldr	r3, [r7, #12]
 8008920:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008924:	d017      	beq.n	8008956 <TIM_TI1_SetConfig+0x66>
 8008926:	68fb      	ldr	r3, [r7, #12]
 8008928:	4a25      	ldr	r2, [pc, #148]	; (80089c0 <TIM_TI1_SetConfig+0xd0>)
 800892a:	4293      	cmp	r3, r2
 800892c:	d013      	beq.n	8008956 <TIM_TI1_SetConfig+0x66>
 800892e:	68fb      	ldr	r3, [r7, #12]
 8008930:	4a24      	ldr	r2, [pc, #144]	; (80089c4 <TIM_TI1_SetConfig+0xd4>)
 8008932:	4293      	cmp	r3, r2
 8008934:	d00f      	beq.n	8008956 <TIM_TI1_SetConfig+0x66>
 8008936:	68fb      	ldr	r3, [r7, #12]
 8008938:	4a23      	ldr	r2, [pc, #140]	; (80089c8 <TIM_TI1_SetConfig+0xd8>)
 800893a:	4293      	cmp	r3, r2
 800893c:	d00b      	beq.n	8008956 <TIM_TI1_SetConfig+0x66>
 800893e:	68fb      	ldr	r3, [r7, #12]
 8008940:	4a22      	ldr	r2, [pc, #136]	; (80089cc <TIM_TI1_SetConfig+0xdc>)
 8008942:	4293      	cmp	r3, r2
 8008944:	d007      	beq.n	8008956 <TIM_TI1_SetConfig+0x66>
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	4a21      	ldr	r2, [pc, #132]	; (80089d0 <TIM_TI1_SetConfig+0xe0>)
 800894a:	4293      	cmp	r3, r2
 800894c:	d003      	beq.n	8008956 <TIM_TI1_SetConfig+0x66>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	4a20      	ldr	r2, [pc, #128]	; (80089d4 <TIM_TI1_SetConfig+0xe4>)
 8008952:	4293      	cmp	r3, r2
 8008954:	d101      	bne.n	800895a <TIM_TI1_SetConfig+0x6a>
 8008956:	2301      	movs	r3, #1
 8008958:	e000      	b.n	800895c <TIM_TI1_SetConfig+0x6c>
 800895a:	2300      	movs	r3, #0
 800895c:	2b00      	cmp	r3, #0
 800895e:	d008      	beq.n	8008972 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008960:	697b      	ldr	r3, [r7, #20]
 8008962:	f023 0303 	bic.w	r3, r3, #3
 8008966:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008968:	697a      	ldr	r2, [r7, #20]
 800896a:	687b      	ldr	r3, [r7, #4]
 800896c:	4313      	orrs	r3, r2
 800896e:	617b      	str	r3, [r7, #20]
 8008970:	e003      	b.n	800897a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008972:	697b      	ldr	r3, [r7, #20]
 8008974:	f043 0301 	orr.w	r3, r3, #1
 8008978:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800897a:	697b      	ldr	r3, [r7, #20]
 800897c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008980:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008982:	683b      	ldr	r3, [r7, #0]
 8008984:	011b      	lsls	r3, r3, #4
 8008986:	b2db      	uxtb	r3, r3
 8008988:	697a      	ldr	r2, [r7, #20]
 800898a:	4313      	orrs	r3, r2
 800898c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800898e:	693b      	ldr	r3, [r7, #16]
 8008990:	f023 030a 	bic.w	r3, r3, #10
 8008994:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008996:	68bb      	ldr	r3, [r7, #8]
 8008998:	f003 030a 	and.w	r3, r3, #10
 800899c:	693a      	ldr	r2, [r7, #16]
 800899e:	4313      	orrs	r3, r2
 80089a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	697a      	ldr	r2, [r7, #20]
 80089a6:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80089a8:	68fb      	ldr	r3, [r7, #12]
 80089aa:	693a      	ldr	r2, [r7, #16]
 80089ac:	621a      	str	r2, [r3, #32]
}
 80089ae:	bf00      	nop
 80089b0:	371c      	adds	r7, #28
 80089b2:	46bd      	mov	sp, r7
 80089b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b8:	4770      	bx	lr
 80089ba:	bf00      	nop
 80089bc:	40010000 	.word	0x40010000
 80089c0:	40000400 	.word	0x40000400
 80089c4:	40000800 	.word	0x40000800
 80089c8:	40000c00 	.word	0x40000c00
 80089cc:	40010400 	.word	0x40010400
 80089d0:	40014000 	.word	0x40014000
 80089d4:	40001800 	.word	0x40001800

080089d8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80089d8:	b480      	push	{r7}
 80089da:	b087      	sub	sp, #28
 80089dc:	af00      	add	r7, sp, #0
 80089de:	60f8      	str	r0, [r7, #12]
 80089e0:	60b9      	str	r1, [r7, #8]
 80089e2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	6a1b      	ldr	r3, [r3, #32]
 80089e8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80089ea:	68fb      	ldr	r3, [r7, #12]
 80089ec:	6a1b      	ldr	r3, [r3, #32]
 80089ee:	f023 0201 	bic.w	r2, r3, #1
 80089f2:	68fb      	ldr	r3, [r7, #12]
 80089f4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80089f6:	68fb      	ldr	r3, [r7, #12]
 80089f8:	699b      	ldr	r3, [r3, #24]
 80089fa:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80089fc:	693b      	ldr	r3, [r7, #16]
 80089fe:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a02:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a04:	687b      	ldr	r3, [r7, #4]
 8008a06:	011b      	lsls	r3, r3, #4
 8008a08:	693a      	ldr	r2, [r7, #16]
 8008a0a:	4313      	orrs	r3, r2
 8008a0c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a0e:	697b      	ldr	r3, [r7, #20]
 8008a10:	f023 030a 	bic.w	r3, r3, #10
 8008a14:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a16:	697a      	ldr	r2, [r7, #20]
 8008a18:	68bb      	ldr	r3, [r7, #8]
 8008a1a:	4313      	orrs	r3, r2
 8008a1c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	693a      	ldr	r2, [r7, #16]
 8008a22:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a24:	68fb      	ldr	r3, [r7, #12]
 8008a26:	697a      	ldr	r2, [r7, #20]
 8008a28:	621a      	str	r2, [r3, #32]
}
 8008a2a:	bf00      	nop
 8008a2c:	371c      	adds	r7, #28
 8008a2e:	46bd      	mov	sp, r7
 8008a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a34:	4770      	bx	lr

08008a36 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008a36:	b480      	push	{r7}
 8008a38:	b087      	sub	sp, #28
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	60f8      	str	r0, [r7, #12]
 8008a3e:	60b9      	str	r1, [r7, #8]
 8008a40:	607a      	str	r2, [r7, #4]
 8008a42:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008a44:	68fb      	ldr	r3, [r7, #12]
 8008a46:	6a1b      	ldr	r3, [r3, #32]
 8008a48:	f023 0210 	bic.w	r2, r3, #16
 8008a4c:	68fb      	ldr	r3, [r7, #12]
 8008a4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a50:	68fb      	ldr	r3, [r7, #12]
 8008a52:	699b      	ldr	r3, [r3, #24]
 8008a54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008a56:	68fb      	ldr	r3, [r7, #12]
 8008a58:	6a1b      	ldr	r3, [r3, #32]
 8008a5a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008a5c:	697b      	ldr	r3, [r7, #20]
 8008a5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008a62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008a64:	687b      	ldr	r3, [r7, #4]
 8008a66:	021b      	lsls	r3, r3, #8
 8008a68:	697a      	ldr	r2, [r7, #20]
 8008a6a:	4313      	orrs	r3, r2
 8008a6c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008a6e:	697b      	ldr	r3, [r7, #20]
 8008a70:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008a74:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008a76:	683b      	ldr	r3, [r7, #0]
 8008a78:	031b      	lsls	r3, r3, #12
 8008a7a:	b29b      	uxth	r3, r3
 8008a7c:	697a      	ldr	r2, [r7, #20]
 8008a7e:	4313      	orrs	r3, r2
 8008a80:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008a82:	693b      	ldr	r3, [r7, #16]
 8008a84:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008a88:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008a8a:	68bb      	ldr	r3, [r7, #8]
 8008a8c:	011b      	lsls	r3, r3, #4
 8008a8e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008a92:	693a      	ldr	r2, [r7, #16]
 8008a94:	4313      	orrs	r3, r2
 8008a96:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008a98:	68fb      	ldr	r3, [r7, #12]
 8008a9a:	697a      	ldr	r2, [r7, #20]
 8008a9c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a9e:	68fb      	ldr	r3, [r7, #12]
 8008aa0:	693a      	ldr	r2, [r7, #16]
 8008aa2:	621a      	str	r2, [r3, #32]
}
 8008aa4:	bf00      	nop
 8008aa6:	371c      	adds	r7, #28
 8008aa8:	46bd      	mov	sp, r7
 8008aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aae:	4770      	bx	lr

08008ab0 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008ab0:	b480      	push	{r7}
 8008ab2:	b087      	sub	sp, #28
 8008ab4:	af00      	add	r7, sp, #0
 8008ab6:	60f8      	str	r0, [r7, #12]
 8008ab8:	60b9      	str	r1, [r7, #8]
 8008aba:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008abc:	68fb      	ldr	r3, [r7, #12]
 8008abe:	6a1b      	ldr	r3, [r3, #32]
 8008ac0:	f023 0210 	bic.w	r2, r3, #16
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ac8:	68fb      	ldr	r3, [r7, #12]
 8008aca:	699b      	ldr	r3, [r3, #24]
 8008acc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6a1b      	ldr	r3, [r3, #32]
 8008ad2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008ad4:	697b      	ldr	r3, [r7, #20]
 8008ad6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008ada:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008adc:	687b      	ldr	r3, [r7, #4]
 8008ade:	031b      	lsls	r3, r3, #12
 8008ae0:	697a      	ldr	r2, [r7, #20]
 8008ae2:	4313      	orrs	r3, r2
 8008ae4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008ae6:	693b      	ldr	r3, [r7, #16]
 8008ae8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008aec:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008aee:	68bb      	ldr	r3, [r7, #8]
 8008af0:	011b      	lsls	r3, r3, #4
 8008af2:	693a      	ldr	r2, [r7, #16]
 8008af4:	4313      	orrs	r3, r2
 8008af6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008af8:	68fb      	ldr	r3, [r7, #12]
 8008afa:	697a      	ldr	r2, [r7, #20]
 8008afc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	693a      	ldr	r2, [r7, #16]
 8008b02:	621a      	str	r2, [r3, #32]
}
 8008b04:	bf00      	nop
 8008b06:	371c      	adds	r7, #28
 8008b08:	46bd      	mov	sp, r7
 8008b0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b0e:	4770      	bx	lr

08008b10 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b10:	b480      	push	{r7}
 8008b12:	b087      	sub	sp, #28
 8008b14:	af00      	add	r7, sp, #0
 8008b16:	60f8      	str	r0, [r7, #12]
 8008b18:	60b9      	str	r1, [r7, #8]
 8008b1a:	607a      	str	r2, [r7, #4]
 8008b1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	6a1b      	ldr	r3, [r3, #32]
 8008b22:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008b2a:	68fb      	ldr	r3, [r7, #12]
 8008b2c:	69db      	ldr	r3, [r3, #28]
 8008b2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b30:	68fb      	ldr	r3, [r7, #12]
 8008b32:	6a1b      	ldr	r3, [r3, #32]
 8008b34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008b36:	697b      	ldr	r3, [r7, #20]
 8008b38:	f023 0303 	bic.w	r3, r3, #3
 8008b3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008b3e:	697a      	ldr	r2, [r7, #20]
 8008b40:	687b      	ldr	r3, [r7, #4]
 8008b42:	4313      	orrs	r3, r2
 8008b44:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008b46:	697b      	ldr	r3, [r7, #20]
 8008b48:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008b4c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008b4e:	683b      	ldr	r3, [r7, #0]
 8008b50:	011b      	lsls	r3, r3, #4
 8008b52:	b2db      	uxtb	r3, r3
 8008b54:	697a      	ldr	r2, [r7, #20]
 8008b56:	4313      	orrs	r3, r2
 8008b58:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008b5a:	693b      	ldr	r3, [r7, #16]
 8008b5c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008b60:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008b62:	68bb      	ldr	r3, [r7, #8]
 8008b64:	021b      	lsls	r3, r3, #8
 8008b66:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008b6a:	693a      	ldr	r2, [r7, #16]
 8008b6c:	4313      	orrs	r3, r2
 8008b6e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008b70:	68fb      	ldr	r3, [r7, #12]
 8008b72:	697a      	ldr	r2, [r7, #20]
 8008b74:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008b76:	68fb      	ldr	r3, [r7, #12]
 8008b78:	693a      	ldr	r2, [r7, #16]
 8008b7a:	621a      	str	r2, [r3, #32]
}
 8008b7c:	bf00      	nop
 8008b7e:	371c      	adds	r7, #28
 8008b80:	46bd      	mov	sp, r7
 8008b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b86:	4770      	bx	lr

08008b88 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b88:	b480      	push	{r7}
 8008b8a:	b087      	sub	sp, #28
 8008b8c:	af00      	add	r7, sp, #0
 8008b8e:	60f8      	str	r0, [r7, #12]
 8008b90:	60b9      	str	r1, [r7, #8]
 8008b92:	607a      	str	r2, [r7, #4]
 8008b94:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008b96:	68fb      	ldr	r3, [r7, #12]
 8008b98:	6a1b      	ldr	r3, [r3, #32]
 8008b9a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008b9e:	68fb      	ldr	r3, [r7, #12]
 8008ba0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008ba2:	68fb      	ldr	r3, [r7, #12]
 8008ba4:	69db      	ldr	r3, [r3, #28]
 8008ba6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ba8:	68fb      	ldr	r3, [r7, #12]
 8008baa:	6a1b      	ldr	r3, [r3, #32]
 8008bac:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008bae:	697b      	ldr	r3, [r7, #20]
 8008bb0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008bb4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008bb6:	687b      	ldr	r3, [r7, #4]
 8008bb8:	021b      	lsls	r3, r3, #8
 8008bba:	697a      	ldr	r2, [r7, #20]
 8008bbc:	4313      	orrs	r3, r2
 8008bbe:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008bc0:	697b      	ldr	r3, [r7, #20]
 8008bc2:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008bc6:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008bc8:	683b      	ldr	r3, [r7, #0]
 8008bca:	031b      	lsls	r3, r3, #12
 8008bcc:	b29b      	uxth	r3, r3
 8008bce:	697a      	ldr	r2, [r7, #20]
 8008bd0:	4313      	orrs	r3, r2
 8008bd2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008bd4:	693b      	ldr	r3, [r7, #16]
 8008bd6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008bda:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008bdc:	68bb      	ldr	r3, [r7, #8]
 8008bde:	031b      	lsls	r3, r3, #12
 8008be0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008be4:	693a      	ldr	r2, [r7, #16]
 8008be6:	4313      	orrs	r3, r2
 8008be8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008bea:	68fb      	ldr	r3, [r7, #12]
 8008bec:	697a      	ldr	r2, [r7, #20]
 8008bee:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008bf0:	68fb      	ldr	r3, [r7, #12]
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	621a      	str	r2, [r3, #32]
}
 8008bf6:	bf00      	nop
 8008bf8:	371c      	adds	r7, #28
 8008bfa:	46bd      	mov	sp, r7
 8008bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c00:	4770      	bx	lr

08008c02 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c02:	b480      	push	{r7}
 8008c04:	b085      	sub	sp, #20
 8008c06:	af00      	add	r7, sp, #0
 8008c08:	6078      	str	r0, [r7, #4]
 8008c0a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c12:	68fb      	ldr	r3, [r7, #12]
 8008c14:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008c18:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008c1a:	683a      	ldr	r2, [r7, #0]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	4313      	orrs	r3, r2
 8008c20:	f043 0307 	orr.w	r3, r3, #7
 8008c24:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c26:	687b      	ldr	r3, [r7, #4]
 8008c28:	68fa      	ldr	r2, [r7, #12]
 8008c2a:	609a      	str	r2, [r3, #8]
}
 8008c2c:	bf00      	nop
 8008c2e:	3714      	adds	r7, #20
 8008c30:	46bd      	mov	sp, r7
 8008c32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c36:	4770      	bx	lr

08008c38 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008c38:	b480      	push	{r7}
 8008c3a:	b087      	sub	sp, #28
 8008c3c:	af00      	add	r7, sp, #0
 8008c3e:	60f8      	str	r0, [r7, #12]
 8008c40:	60b9      	str	r1, [r7, #8]
 8008c42:	607a      	str	r2, [r7, #4]
 8008c44:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	689b      	ldr	r3, [r3, #8]
 8008c4a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008c4c:	697b      	ldr	r3, [r7, #20]
 8008c4e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008c52:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008c54:	683b      	ldr	r3, [r7, #0]
 8008c56:	021a      	lsls	r2, r3, #8
 8008c58:	687b      	ldr	r3, [r7, #4]
 8008c5a:	431a      	orrs	r2, r3
 8008c5c:	68bb      	ldr	r3, [r7, #8]
 8008c5e:	4313      	orrs	r3, r2
 8008c60:	697a      	ldr	r2, [r7, #20]
 8008c62:	4313      	orrs	r3, r2
 8008c64:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008c66:	68fb      	ldr	r3, [r7, #12]
 8008c68:	697a      	ldr	r2, [r7, #20]
 8008c6a:	609a      	str	r2, [r3, #8]
}
 8008c6c:	bf00      	nop
 8008c6e:	371c      	adds	r7, #28
 8008c70:	46bd      	mov	sp, r7
 8008c72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c76:	4770      	bx	lr

08008c78 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008c78:	b480      	push	{r7}
 8008c7a:	b085      	sub	sp, #20
 8008c7c:	af00      	add	r7, sp, #0
 8008c7e:	6078      	str	r0, [r7, #4]
 8008c80:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008c82:	687b      	ldr	r3, [r7, #4]
 8008c84:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008c88:	2b01      	cmp	r3, #1
 8008c8a:	d101      	bne.n	8008c90 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008c8c:	2302      	movs	r3, #2
 8008c8e:	e05a      	b.n	8008d46 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	2201      	movs	r2, #1
 8008c94:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	2202      	movs	r2, #2
 8008c9c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008ca0:	687b      	ldr	r3, [r7, #4]
 8008ca2:	681b      	ldr	r3, [r3, #0]
 8008ca4:	685b      	ldr	r3, [r3, #4]
 8008ca6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	689b      	ldr	r3, [r3, #8]
 8008cae:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008cb0:	68fb      	ldr	r3, [r7, #12]
 8008cb2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008cb6:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008cb8:	683b      	ldr	r3, [r7, #0]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68fa      	ldr	r2, [r7, #12]
 8008cbe:	4313      	orrs	r3, r2
 8008cc0:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008cc2:	687b      	ldr	r3, [r7, #4]
 8008cc4:	681b      	ldr	r3, [r3, #0]
 8008cc6:	68fa      	ldr	r2, [r7, #12]
 8008cc8:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008cca:	687b      	ldr	r3, [r7, #4]
 8008ccc:	681b      	ldr	r3, [r3, #0]
 8008cce:	4a21      	ldr	r2, [pc, #132]	; (8008d54 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008cd0:	4293      	cmp	r3, r2
 8008cd2:	d022      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cd4:	687b      	ldr	r3, [r7, #4]
 8008cd6:	681b      	ldr	r3, [r3, #0]
 8008cd8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008cdc:	d01d      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	4a1d      	ldr	r2, [pc, #116]	; (8008d58 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008ce4:	4293      	cmp	r3, r2
 8008ce6:	d018      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	4a1b      	ldr	r2, [pc, #108]	; (8008d5c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008cee:	4293      	cmp	r3, r2
 8008cf0:	d013      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	4a1a      	ldr	r2, [pc, #104]	; (8008d60 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008cf8:	4293      	cmp	r3, r2
 8008cfa:	d00e      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	4a18      	ldr	r2, [pc, #96]	; (8008d64 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d02:	4293      	cmp	r3, r2
 8008d04:	d009      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	681b      	ldr	r3, [r3, #0]
 8008d0a:	4a17      	ldr	r2, [pc, #92]	; (8008d68 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d0c:	4293      	cmp	r3, r2
 8008d0e:	d004      	beq.n	8008d1a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	681b      	ldr	r3, [r3, #0]
 8008d14:	4a15      	ldr	r2, [pc, #84]	; (8008d6c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d16:	4293      	cmp	r3, r2
 8008d18:	d10c      	bne.n	8008d34 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008d1a:	68bb      	ldr	r3, [r7, #8]
 8008d1c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008d20:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008d22:	683b      	ldr	r3, [r7, #0]
 8008d24:	685b      	ldr	r3, [r3, #4]
 8008d26:	68ba      	ldr	r2, [r7, #8]
 8008d28:	4313      	orrs	r3, r2
 8008d2a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008d2c:	687b      	ldr	r3, [r7, #4]
 8008d2e:	681b      	ldr	r3, [r3, #0]
 8008d30:	68ba      	ldr	r2, [r7, #8]
 8008d32:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008d34:	687b      	ldr	r3, [r7, #4]
 8008d36:	2201      	movs	r2, #1
 8008d38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008d3c:	687b      	ldr	r3, [r7, #4]
 8008d3e:	2200      	movs	r2, #0
 8008d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008d44:	2300      	movs	r3, #0
}
 8008d46:	4618      	mov	r0, r3
 8008d48:	3714      	adds	r7, #20
 8008d4a:	46bd      	mov	sp, r7
 8008d4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d50:	4770      	bx	lr
 8008d52:	bf00      	nop
 8008d54:	40010000 	.word	0x40010000
 8008d58:	40000400 	.word	0x40000400
 8008d5c:	40000800 	.word	0x40000800
 8008d60:	40000c00 	.word	0x40000c00
 8008d64:	40010400 	.word	0x40010400
 8008d68:	40014000 	.word	0x40014000
 8008d6c:	40001800 	.word	0x40001800

08008d70 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008d70:	b480      	push	{r7}
 8008d72:	b083      	sub	sp, #12
 8008d74:	af00      	add	r7, sp, #0
 8008d76:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008d78:	bf00      	nop
 8008d7a:	370c      	adds	r7, #12
 8008d7c:	46bd      	mov	sp, r7
 8008d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d82:	4770      	bx	lr

08008d84 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008d84:	b480      	push	{r7}
 8008d86:	b083      	sub	sp, #12
 8008d88:	af00      	add	r7, sp, #0
 8008d8a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008d8c:	bf00      	nop
 8008d8e:	370c      	adds	r7, #12
 8008d90:	46bd      	mov	sp, r7
 8008d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d96:	4770      	bx	lr

08008d98 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008d98:	b580      	push	{r7, lr}
 8008d9a:	b082      	sub	sp, #8
 8008d9c:	af00      	add	r7, sp, #0
 8008d9e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008da0:	687b      	ldr	r3, [r7, #4]
 8008da2:	2b00      	cmp	r3, #0
 8008da4:	d101      	bne.n	8008daa <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008da6:	2301      	movs	r3, #1
 8008da8:	e03f      	b.n	8008e2a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008db0:	b2db      	uxtb	r3, r3
 8008db2:	2b00      	cmp	r3, #0
 8008db4:	d106      	bne.n	8008dc4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	2200      	movs	r2, #0
 8008dba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008dbe:	6878      	ldr	r0, [r7, #4]
 8008dc0:	f7fd fb72 	bl	80064a8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2224      	movs	r2, #36	; 0x24
 8008dc8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008dcc:	687b      	ldr	r3, [r7, #4]
 8008dce:	681b      	ldr	r3, [r3, #0]
 8008dd0:	68da      	ldr	r2, [r3, #12]
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008dda:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008ddc:	6878      	ldr	r0, [r7, #4]
 8008dde:	f000 fddb 	bl	8009998 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	681b      	ldr	r3, [r3, #0]
 8008de6:	691a      	ldr	r2, [r3, #16]
 8008de8:	687b      	ldr	r3, [r7, #4]
 8008dea:	681b      	ldr	r3, [r3, #0]
 8008dec:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008df0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008df2:	687b      	ldr	r3, [r7, #4]
 8008df4:	681b      	ldr	r3, [r3, #0]
 8008df6:	695a      	ldr	r2, [r3, #20]
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	681b      	ldr	r3, [r3, #0]
 8008dfc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e00:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	681b      	ldr	r3, [r3, #0]
 8008e06:	68da      	ldr	r2, [r3, #12]
 8008e08:	687b      	ldr	r3, [r7, #4]
 8008e0a:	681b      	ldr	r3, [r3, #0]
 8008e0c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e10:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e12:	687b      	ldr	r3, [r7, #4]
 8008e14:	2200      	movs	r2, #0
 8008e16:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008e18:	687b      	ldr	r3, [r7, #4]
 8008e1a:	2220      	movs	r2, #32
 8008e1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008e20:	687b      	ldr	r3, [r7, #4]
 8008e22:	2220      	movs	r2, #32
 8008e24:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008e28:	2300      	movs	r3, #0
}
 8008e2a:	4618      	mov	r0, r3
 8008e2c:	3708      	adds	r7, #8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}

08008e32 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008e32:	b580      	push	{r7, lr}
 8008e34:	b08a      	sub	sp, #40	; 0x28
 8008e36:	af02      	add	r7, sp, #8
 8008e38:	60f8      	str	r0, [r7, #12]
 8008e3a:	60b9      	str	r1, [r7, #8]
 8008e3c:	603b      	str	r3, [r7, #0]
 8008e3e:	4613      	mov	r3, r2
 8008e40:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008e42:	2300      	movs	r3, #0
 8008e44:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008e46:	68fb      	ldr	r3, [r7, #12]
 8008e48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e4c:	b2db      	uxtb	r3, r3
 8008e4e:	2b20      	cmp	r3, #32
 8008e50:	d17c      	bne.n	8008f4c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008e52:	68bb      	ldr	r3, [r7, #8]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	d002      	beq.n	8008e5e <HAL_UART_Transmit+0x2c>
 8008e58:	88fb      	ldrh	r3, [r7, #6]
 8008e5a:	2b00      	cmp	r3, #0
 8008e5c:	d101      	bne.n	8008e62 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008e5e:	2301      	movs	r3, #1
 8008e60:	e075      	b.n	8008f4e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008e62:	68fb      	ldr	r3, [r7, #12]
 8008e64:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008e68:	2b01      	cmp	r3, #1
 8008e6a:	d101      	bne.n	8008e70 <HAL_UART_Transmit+0x3e>
 8008e6c:	2302      	movs	r3, #2
 8008e6e:	e06e      	b.n	8008f4e <HAL_UART_Transmit+0x11c>
 8008e70:	68fb      	ldr	r3, [r7, #12]
 8008e72:	2201      	movs	r2, #1
 8008e74:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e78:	68fb      	ldr	r3, [r7, #12]
 8008e7a:	2200      	movs	r2, #0
 8008e7c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008e7e:	68fb      	ldr	r3, [r7, #12]
 8008e80:	2221      	movs	r2, #33	; 0x21
 8008e82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008e86:	f7fd fda5 	bl	80069d4 <HAL_GetTick>
 8008e8a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008e8c:	68fb      	ldr	r3, [r7, #12]
 8008e8e:	88fa      	ldrh	r2, [r7, #6]
 8008e90:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008e92:	68fb      	ldr	r3, [r7, #12]
 8008e94:	88fa      	ldrh	r2, [r7, #6]
 8008e96:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e98:	68fb      	ldr	r3, [r7, #12]
 8008e9a:	689b      	ldr	r3, [r3, #8]
 8008e9c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ea0:	d108      	bne.n	8008eb4 <HAL_UART_Transmit+0x82>
 8008ea2:	68fb      	ldr	r3, [r7, #12]
 8008ea4:	691b      	ldr	r3, [r3, #16]
 8008ea6:	2b00      	cmp	r3, #0
 8008ea8:	d104      	bne.n	8008eb4 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008eaa:	2300      	movs	r3, #0
 8008eac:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008eae:	68bb      	ldr	r3, [r7, #8]
 8008eb0:	61bb      	str	r3, [r7, #24]
 8008eb2:	e003      	b.n	8008ebc <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008eb4:	68bb      	ldr	r3, [r7, #8]
 8008eb6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008eb8:	2300      	movs	r3, #0
 8008eba:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	2200      	movs	r2, #0
 8008ec0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008ec4:	e02a      	b.n	8008f1c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008ec6:	683b      	ldr	r3, [r7, #0]
 8008ec8:	9300      	str	r3, [sp, #0]
 8008eca:	697b      	ldr	r3, [r7, #20]
 8008ecc:	2200      	movs	r2, #0
 8008ece:	2180      	movs	r1, #128	; 0x80
 8008ed0:	68f8      	ldr	r0, [r7, #12]
 8008ed2:	f000 fb1f 	bl	8009514 <UART_WaitOnFlagUntilTimeout>
 8008ed6:	4603      	mov	r3, r0
 8008ed8:	2b00      	cmp	r3, #0
 8008eda:	d001      	beq.n	8008ee0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008edc:	2303      	movs	r3, #3
 8008ede:	e036      	b.n	8008f4e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008ee0:	69fb      	ldr	r3, [r7, #28]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d10b      	bne.n	8008efe <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008ee6:	69bb      	ldr	r3, [r7, #24]
 8008ee8:	881b      	ldrh	r3, [r3, #0]
 8008eea:	461a      	mov	r2, r3
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008ef4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008ef6:	69bb      	ldr	r3, [r7, #24]
 8008ef8:	3302      	adds	r3, #2
 8008efa:	61bb      	str	r3, [r7, #24]
 8008efc:	e007      	b.n	8008f0e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008efe:	69fb      	ldr	r3, [r7, #28]
 8008f00:	781a      	ldrb	r2, [r3, #0]
 8008f02:	68fb      	ldr	r3, [r7, #12]
 8008f04:	681b      	ldr	r3, [r3, #0]
 8008f06:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008f08:	69fb      	ldr	r3, [r7, #28]
 8008f0a:	3301      	adds	r3, #1
 8008f0c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f0e:	68fb      	ldr	r3, [r7, #12]
 8008f10:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f12:	b29b      	uxth	r3, r3
 8008f14:	3b01      	subs	r3, #1
 8008f16:	b29a      	uxth	r2, r3
 8008f18:	68fb      	ldr	r3, [r7, #12]
 8008f1a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f20:	b29b      	uxth	r3, r3
 8008f22:	2b00      	cmp	r3, #0
 8008f24:	d1cf      	bne.n	8008ec6 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008f26:	683b      	ldr	r3, [r7, #0]
 8008f28:	9300      	str	r3, [sp, #0]
 8008f2a:	697b      	ldr	r3, [r7, #20]
 8008f2c:	2200      	movs	r2, #0
 8008f2e:	2140      	movs	r1, #64	; 0x40
 8008f30:	68f8      	ldr	r0, [r7, #12]
 8008f32:	f000 faef 	bl	8009514 <UART_WaitOnFlagUntilTimeout>
 8008f36:	4603      	mov	r3, r0
 8008f38:	2b00      	cmp	r3, #0
 8008f3a:	d001      	beq.n	8008f40 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008f3c:	2303      	movs	r3, #3
 8008f3e:	e006      	b.n	8008f4e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008f40:	68fb      	ldr	r3, [r7, #12]
 8008f42:	2220      	movs	r2, #32
 8008f44:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008f48:	2300      	movs	r3, #0
 8008f4a:	e000      	b.n	8008f4e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008f4c:	2302      	movs	r3, #2
  }
}
 8008f4e:	4618      	mov	r0, r3
 8008f50:	3720      	adds	r7, #32
 8008f52:	46bd      	mov	sp, r7
 8008f54:	bd80      	pop	{r7, pc}

08008f56 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f56:	b580      	push	{r7, lr}
 8008f58:	b084      	sub	sp, #16
 8008f5a:	af00      	add	r7, sp, #0
 8008f5c:	60f8      	str	r0, [r7, #12]
 8008f5e:	60b9      	str	r1, [r7, #8]
 8008f60:	4613      	mov	r3, r2
 8008f62:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008f6a:	b2db      	uxtb	r3, r3
 8008f6c:	2b20      	cmp	r3, #32
 8008f6e:	d11d      	bne.n	8008fac <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008f70:	68bb      	ldr	r3, [r7, #8]
 8008f72:	2b00      	cmp	r3, #0
 8008f74:	d002      	beq.n	8008f7c <HAL_UART_Receive_IT+0x26>
 8008f76:	88fb      	ldrh	r3, [r7, #6]
 8008f78:	2b00      	cmp	r3, #0
 8008f7a:	d101      	bne.n	8008f80 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8008f7c:	2301      	movs	r3, #1
 8008f7e:	e016      	b.n	8008fae <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008f80:	68fb      	ldr	r3, [r7, #12]
 8008f82:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008f86:	2b01      	cmp	r3, #1
 8008f88:	d101      	bne.n	8008f8e <HAL_UART_Receive_IT+0x38>
 8008f8a:	2302      	movs	r3, #2
 8008f8c:	e00f      	b.n	8008fae <HAL_UART_Receive_IT+0x58>
 8008f8e:	68fb      	ldr	r3, [r7, #12]
 8008f90:	2201      	movs	r2, #1
 8008f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	2200      	movs	r2, #0
 8008f9a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8008f9c:	88fb      	ldrh	r3, [r7, #6]
 8008f9e:	461a      	mov	r2, r3
 8008fa0:	68b9      	ldr	r1, [r7, #8]
 8008fa2:	68f8      	ldr	r0, [r7, #12]
 8008fa4:	f000 fb24 	bl	80095f0 <UART_Start_Receive_IT>
 8008fa8:	4603      	mov	r3, r0
 8008faa:	e000      	b.n	8008fae <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008fac:	2302      	movs	r3, #2
  }
}
 8008fae:	4618      	mov	r0, r3
 8008fb0:	3710      	adds	r7, #16
 8008fb2:	46bd      	mov	sp, r7
 8008fb4:	bd80      	pop	{r7, pc}
	...

08008fb8 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008fb8:	b580      	push	{r7, lr}
 8008fba:	b0ba      	sub	sp, #232	; 0xe8
 8008fbc:	af00      	add	r7, sp, #0
 8008fbe:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008fc0:	687b      	ldr	r3, [r7, #4]
 8008fc2:	681b      	ldr	r3, [r3, #0]
 8008fc4:	681b      	ldr	r3, [r3, #0]
 8008fc6:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008fca:	687b      	ldr	r3, [r7, #4]
 8008fcc:	681b      	ldr	r3, [r3, #0]
 8008fce:	68db      	ldr	r3, [r3, #12]
 8008fd0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008fd4:	687b      	ldr	r3, [r7, #4]
 8008fd6:	681b      	ldr	r3, [r3, #0]
 8008fd8:	695b      	ldr	r3, [r3, #20]
 8008fda:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8008fde:	2300      	movs	r3, #0
 8008fe0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008fe4:	2300      	movs	r3, #0
 8008fe6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008fea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008fee:	f003 030f 	and.w	r3, r3, #15
 8008ff2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008ff6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d10f      	bne.n	800901e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008ffe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009002:	f003 0320 	and.w	r3, r3, #32
 8009006:	2b00      	cmp	r3, #0
 8009008:	d009      	beq.n	800901e <HAL_UART_IRQHandler+0x66>
 800900a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800900e:	f003 0320 	and.w	r3, r3, #32
 8009012:	2b00      	cmp	r3, #0
 8009014:	d003      	beq.n	800901e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009016:	6878      	ldr	r0, [r7, #4]
 8009018:	f000 fc03 	bl	8009822 <UART_Receive_IT>
      return;
 800901c:	e256      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800901e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009022:	2b00      	cmp	r3, #0
 8009024:	f000 80de 	beq.w	80091e4 <HAL_UART_IRQHandler+0x22c>
 8009028:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800902c:	f003 0301 	and.w	r3, r3, #1
 8009030:	2b00      	cmp	r3, #0
 8009032:	d106      	bne.n	8009042 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009034:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009038:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800903c:	2b00      	cmp	r3, #0
 800903e:	f000 80d1 	beq.w	80091e4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009042:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009046:	f003 0301 	and.w	r3, r3, #1
 800904a:	2b00      	cmp	r3, #0
 800904c:	d00b      	beq.n	8009066 <HAL_UART_IRQHandler+0xae>
 800904e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009052:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009056:	2b00      	cmp	r3, #0
 8009058:	d005      	beq.n	8009066 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800905e:	f043 0201 	orr.w	r2, r3, #1
 8009062:	687b      	ldr	r3, [r7, #4]
 8009064:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009066:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800906a:	f003 0304 	and.w	r3, r3, #4
 800906e:	2b00      	cmp	r3, #0
 8009070:	d00b      	beq.n	800908a <HAL_UART_IRQHandler+0xd2>
 8009072:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009076:	f003 0301 	and.w	r3, r3, #1
 800907a:	2b00      	cmp	r3, #0
 800907c:	d005      	beq.n	800908a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800907e:	687b      	ldr	r3, [r7, #4]
 8009080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009082:	f043 0202 	orr.w	r2, r3, #2
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800908a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b00      	cmp	r3, #0
 8009094:	d00b      	beq.n	80090ae <HAL_UART_IRQHandler+0xf6>
 8009096:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800909a:	f003 0301 	and.w	r3, r3, #1
 800909e:	2b00      	cmp	r3, #0
 80090a0:	d005      	beq.n	80090ae <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80090a2:	687b      	ldr	r3, [r7, #4]
 80090a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090a6:	f043 0204 	orr.w	r2, r3, #4
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80090ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090b2:	f003 0308 	and.w	r3, r3, #8
 80090b6:	2b00      	cmp	r3, #0
 80090b8:	d011      	beq.n	80090de <HAL_UART_IRQHandler+0x126>
 80090ba:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090be:	f003 0320 	and.w	r3, r3, #32
 80090c2:	2b00      	cmp	r3, #0
 80090c4:	d105      	bne.n	80090d2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 80090c6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090ca:	f003 0301 	and.w	r3, r3, #1
 80090ce:	2b00      	cmp	r3, #0
 80090d0:	d005      	beq.n	80090de <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80090d2:	687b      	ldr	r3, [r7, #4]
 80090d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090d6:	f043 0208 	orr.w	r2, r3, #8
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80090de:	687b      	ldr	r3, [r7, #4]
 80090e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e2:	2b00      	cmp	r3, #0
 80090e4:	f000 81ed 	beq.w	80094c2 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80090e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ec:	f003 0320 	and.w	r3, r3, #32
 80090f0:	2b00      	cmp	r3, #0
 80090f2:	d008      	beq.n	8009106 <HAL_UART_IRQHandler+0x14e>
 80090f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090f8:	f003 0320 	and.w	r3, r3, #32
 80090fc:	2b00      	cmp	r3, #0
 80090fe:	d002      	beq.n	8009106 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009100:	6878      	ldr	r0, [r7, #4]
 8009102:	f000 fb8e 	bl	8009822 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	695b      	ldr	r3, [r3, #20]
 800910c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009110:	2b40      	cmp	r3, #64	; 0x40
 8009112:	bf0c      	ite	eq
 8009114:	2301      	moveq	r3, #1
 8009116:	2300      	movne	r3, #0
 8009118:	b2db      	uxtb	r3, r3
 800911a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800911e:	687b      	ldr	r3, [r7, #4]
 8009120:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009122:	f003 0308 	and.w	r3, r3, #8
 8009126:	2b00      	cmp	r3, #0
 8009128:	d103      	bne.n	8009132 <HAL_UART_IRQHandler+0x17a>
 800912a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800912e:	2b00      	cmp	r3, #0
 8009130:	d04f      	beq.n	80091d2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009132:	6878      	ldr	r0, [r7, #4]
 8009134:	f000 fa96 	bl	8009664 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009138:	687b      	ldr	r3, [r7, #4]
 800913a:	681b      	ldr	r3, [r3, #0]
 800913c:	695b      	ldr	r3, [r3, #20]
 800913e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009142:	2b40      	cmp	r3, #64	; 0x40
 8009144:	d141      	bne.n	80091ca <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009146:	687b      	ldr	r3, [r7, #4]
 8009148:	681b      	ldr	r3, [r3, #0]
 800914a:	3314      	adds	r3, #20
 800914c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009150:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009154:	e853 3f00 	ldrex	r3, [r3]
 8009158:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 800915c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009160:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009164:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009168:	687b      	ldr	r3, [r7, #4]
 800916a:	681b      	ldr	r3, [r3, #0]
 800916c:	3314      	adds	r3, #20
 800916e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009172:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009176:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800917a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 800917e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009182:	e841 2300 	strex	r3, r2, [r1]
 8009186:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 800918a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 800918e:	2b00      	cmp	r3, #0
 8009190:	d1d9      	bne.n	8009146 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009196:	2b00      	cmp	r3, #0
 8009198:	d013      	beq.n	80091c2 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800919e:	4a7d      	ldr	r2, [pc, #500]	; (8009394 <HAL_UART_IRQHandler+0x3dc>)
 80091a0:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091a6:	4618      	mov	r0, r3
 80091a8:	f7fd fddf 	bl	8006d6a <HAL_DMA_Abort_IT>
 80091ac:	4603      	mov	r3, r0
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d016      	beq.n	80091e0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80091b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80091b8:	687a      	ldr	r2, [r7, #4]
 80091ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80091bc:	4610      	mov	r0, r2
 80091be:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c0:	e00e      	b.n	80091e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80091c2:	6878      	ldr	r0, [r7, #4]
 80091c4:	f000 f990 	bl	80094e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c8:	e00a      	b.n	80091e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80091ca:	6878      	ldr	r0, [r7, #4]
 80091cc:	f000 f98c 	bl	80094e8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091d0:	e006      	b.n	80091e0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80091d2:	6878      	ldr	r0, [r7, #4]
 80091d4:	f000 f988 	bl	80094e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	2200      	movs	r2, #0
 80091dc:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80091de:	e170      	b.n	80094c2 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091e0:	bf00      	nop
    return;
 80091e2:	e16e      	b.n	80094c2 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091e4:	687b      	ldr	r3, [r7, #4]
 80091e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091e8:	2b01      	cmp	r3, #1
 80091ea:	f040 814a 	bne.w	8009482 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80091ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80091f2:	f003 0310 	and.w	r3, r3, #16
 80091f6:	2b00      	cmp	r3, #0
 80091f8:	f000 8143 	beq.w	8009482 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80091fc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009200:	f003 0310 	and.w	r3, r3, #16
 8009204:	2b00      	cmp	r3, #0
 8009206:	f000 813c 	beq.w	8009482 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800920a:	2300      	movs	r3, #0
 800920c:	60bb      	str	r3, [r7, #8]
 800920e:	687b      	ldr	r3, [r7, #4]
 8009210:	681b      	ldr	r3, [r3, #0]
 8009212:	681b      	ldr	r3, [r3, #0]
 8009214:	60bb      	str	r3, [r7, #8]
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	685b      	ldr	r3, [r3, #4]
 800921c:	60bb      	str	r3, [r7, #8]
 800921e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	695b      	ldr	r3, [r3, #20]
 8009226:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800922a:	2b40      	cmp	r3, #64	; 0x40
 800922c:	f040 80b4 	bne.w	8009398 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009234:	681b      	ldr	r3, [r3, #0]
 8009236:	685b      	ldr	r3, [r3, #4]
 8009238:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800923c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8009240:	2b00      	cmp	r3, #0
 8009242:	f000 8140 	beq.w	80094c6 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8009246:	687b      	ldr	r3, [r7, #4]
 8009248:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800924a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800924e:	429a      	cmp	r2, r3
 8009250:	f080 8139 	bcs.w	80094c6 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800925a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009260:	69db      	ldr	r3, [r3, #28]
 8009262:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8009266:	f000 8088 	beq.w	800937a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	330c      	adds	r3, #12
 8009270:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009274:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009278:	e853 3f00 	ldrex	r3, [r3]
 800927c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009280:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8009284:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009288:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800928c:	687b      	ldr	r3, [r7, #4]
 800928e:	681b      	ldr	r3, [r3, #0]
 8009290:	330c      	adds	r3, #12
 8009292:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8009296:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800929a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 80092a2:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 80092a6:	e841 2300 	strex	r3, r2, [r1]
 80092aa:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 80092ae:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 80092b2:	2b00      	cmp	r3, #0
 80092b4:	d1d9      	bne.n	800926a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	681b      	ldr	r3, [r3, #0]
 80092ba:	3314      	adds	r3, #20
 80092bc:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092be:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80092c0:	e853 3f00 	ldrex	r3, [r3]
 80092c4:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 80092c6:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80092c8:	f023 0301 	bic.w	r3, r3, #1
 80092cc:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80092d0:	687b      	ldr	r3, [r7, #4]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	3314      	adds	r3, #20
 80092d6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 80092da:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 80092de:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80092e0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 80092e2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 80092e6:	e841 2300 	strex	r3, r2, [r1]
 80092ea:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 80092ec:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80092ee:	2b00      	cmp	r3, #0
 80092f0:	d1e1      	bne.n	80092b6 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	3314      	adds	r3, #20
 80092f8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fa:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 80092fc:	e853 3f00 	ldrex	r3, [r3]
 8009300:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8009302:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8009304:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009308:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	681b      	ldr	r3, [r3, #0]
 8009310:	3314      	adds	r3, #20
 8009312:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8009316:	66fa      	str	r2, [r7, #108]	; 0x6c
 8009318:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800931a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800931c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800931e:	e841 2300 	strex	r3, r2, [r1]
 8009322:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8009324:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8009326:	2b00      	cmp	r3, #0
 8009328:	d1e3      	bne.n	80092f2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800932a:	687b      	ldr	r3, [r7, #4]
 800932c:	2220      	movs	r2, #32
 800932e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009332:	687b      	ldr	r3, [r7, #4]
 8009334:	2200      	movs	r2, #0
 8009336:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009338:	687b      	ldr	r3, [r7, #4]
 800933a:	681b      	ldr	r3, [r3, #0]
 800933c:	330c      	adds	r3, #12
 800933e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009340:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8009342:	e853 3f00 	ldrex	r3, [r3]
 8009346:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8009348:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800934a:	f023 0310 	bic.w	r3, r3, #16
 800934e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8009352:	687b      	ldr	r3, [r7, #4]
 8009354:	681b      	ldr	r3, [r3, #0]
 8009356:	330c      	adds	r3, #12
 8009358:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800935c:	65ba      	str	r2, [r7, #88]	; 0x58
 800935e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009360:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8009362:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8009364:	e841 2300 	strex	r3, r2, [r1]
 8009368:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800936a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800936c:	2b00      	cmp	r3, #0
 800936e:	d1e3      	bne.n	8009338 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8009370:	687b      	ldr	r3, [r7, #4]
 8009372:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009374:	4618      	mov	r0, r3
 8009376:	f7fd fc88 	bl	8006c8a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800937e:	687b      	ldr	r3, [r7, #4]
 8009380:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009382:	b29b      	uxth	r3, r3
 8009384:	1ad3      	subs	r3, r2, r3
 8009386:	b29b      	uxth	r3, r3
 8009388:	4619      	mov	r1, r3
 800938a:	6878      	ldr	r0, [r7, #4]
 800938c:	f000 f8b6 	bl	80094fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009390:	e099      	b.n	80094c6 <HAL_UART_IRQHandler+0x50e>
 8009392:	bf00      	nop
 8009394:	0800972b 	.word	0x0800972b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009398:	687b      	ldr	r3, [r7, #4]
 800939a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800939c:	687b      	ldr	r3, [r7, #4]
 800939e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093a0:	b29b      	uxth	r3, r3
 80093a2:	1ad3      	subs	r3, r2, r3
 80093a4:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 80093a8:	687b      	ldr	r3, [r7, #4]
 80093aa:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80093ac:	b29b      	uxth	r3, r3
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	f000 808b 	beq.w	80094ca <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 80093b4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 80093b8:	2b00      	cmp	r3, #0
 80093ba:	f000 8086 	beq.w	80094ca <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80093be:	687b      	ldr	r3, [r7, #4]
 80093c0:	681b      	ldr	r3, [r3, #0]
 80093c2:	330c      	adds	r3, #12
 80093c4:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80093c8:	e853 3f00 	ldrex	r3, [r3]
 80093cc:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 80093ce:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80093d0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 80093d4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	681b      	ldr	r3, [r3, #0]
 80093dc:	330c      	adds	r3, #12
 80093de:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 80093e2:	647a      	str	r2, [r7, #68]	; 0x44
 80093e4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 80093e8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80093ea:	e841 2300 	strex	r3, r2, [r1]
 80093ee:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 80093f0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 80093f2:	2b00      	cmp	r3, #0
 80093f4:	d1e3      	bne.n	80093be <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80093f6:	687b      	ldr	r3, [r7, #4]
 80093f8:	681b      	ldr	r3, [r3, #0]
 80093fa:	3314      	adds	r3, #20
 80093fc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009400:	e853 3f00 	ldrex	r3, [r3]
 8009404:	623b      	str	r3, [r7, #32]
   return(result);
 8009406:	6a3b      	ldr	r3, [r7, #32]
 8009408:	f023 0301 	bic.w	r3, r3, #1
 800940c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009410:	687b      	ldr	r3, [r7, #4]
 8009412:	681b      	ldr	r3, [r3, #0]
 8009414:	3314      	adds	r3, #20
 8009416:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800941a:	633a      	str	r2, [r7, #48]	; 0x30
 800941c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800941e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8009420:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8009422:	e841 2300 	strex	r3, r2, [r1]
 8009426:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8009428:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800942a:	2b00      	cmp	r3, #0
 800942c:	d1e3      	bne.n	80093f6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800942e:	687b      	ldr	r3, [r7, #4]
 8009430:	2220      	movs	r2, #32
 8009432:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009436:	687b      	ldr	r3, [r7, #4]
 8009438:	2200      	movs	r2, #0
 800943a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800943c:	687b      	ldr	r3, [r7, #4]
 800943e:	681b      	ldr	r3, [r3, #0]
 8009440:	330c      	adds	r3, #12
 8009442:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009444:	693b      	ldr	r3, [r7, #16]
 8009446:	e853 3f00 	ldrex	r3, [r3]
 800944a:	60fb      	str	r3, [r7, #12]
   return(result);
 800944c:	68fb      	ldr	r3, [r7, #12]
 800944e:	f023 0310 	bic.w	r3, r3, #16
 8009452:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009456:	687b      	ldr	r3, [r7, #4]
 8009458:	681b      	ldr	r3, [r3, #0]
 800945a:	330c      	adds	r3, #12
 800945c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8009460:	61fa      	str	r2, [r7, #28]
 8009462:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009464:	69b9      	ldr	r1, [r7, #24]
 8009466:	69fa      	ldr	r2, [r7, #28]
 8009468:	e841 2300 	strex	r3, r2, [r1]
 800946c:	617b      	str	r3, [r7, #20]
   return(result);
 800946e:	697b      	ldr	r3, [r7, #20]
 8009470:	2b00      	cmp	r3, #0
 8009472:	d1e3      	bne.n	800943c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8009474:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009478:	4619      	mov	r1, r3
 800947a:	6878      	ldr	r0, [r7, #4]
 800947c:	f000 f83e 	bl	80094fc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009480:	e023      	b.n	80094ca <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8009482:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009486:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800948a:	2b00      	cmp	r3, #0
 800948c:	d009      	beq.n	80094a2 <HAL_UART_IRQHandler+0x4ea>
 800948e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009492:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009496:	2b00      	cmp	r3, #0
 8009498:	d003      	beq.n	80094a2 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800949a:	6878      	ldr	r0, [r7, #4]
 800949c:	f000 f959 	bl	8009752 <UART_Transmit_IT>
    return;
 80094a0:	e014      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80094a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80094a6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00e      	beq.n	80094cc <HAL_UART_IRQHandler+0x514>
 80094ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80094b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80094b6:	2b00      	cmp	r3, #0
 80094b8:	d008      	beq.n	80094cc <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 80094ba:	6878      	ldr	r0, [r7, #4]
 80094bc:	f000 f999 	bl	80097f2 <UART_EndTransmit_IT>
    return;
 80094c0:	e004      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
    return;
 80094c2:	bf00      	nop
 80094c4:	e002      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
      return;
 80094c6:	bf00      	nop
 80094c8:	e000      	b.n	80094cc <HAL_UART_IRQHandler+0x514>
      return;
 80094ca:	bf00      	nop
  }
}
 80094cc:	37e8      	adds	r7, #232	; 0xe8
 80094ce:	46bd      	mov	sp, r7
 80094d0:	bd80      	pop	{r7, pc}
 80094d2:	bf00      	nop

080094d4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80094d4:	b480      	push	{r7}
 80094d6:	b083      	sub	sp, #12
 80094d8:	af00      	add	r7, sp, #0
 80094da:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80094dc:	bf00      	nop
 80094de:	370c      	adds	r7, #12
 80094e0:	46bd      	mov	sp, r7
 80094e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094e6:	4770      	bx	lr

080094e8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80094e8:	b480      	push	{r7}
 80094ea:	b083      	sub	sp, #12
 80094ec:	af00      	add	r7, sp, #0
 80094ee:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80094f0:	bf00      	nop
 80094f2:	370c      	adds	r7, #12
 80094f4:	46bd      	mov	sp, r7
 80094f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80094fa:	4770      	bx	lr

080094fc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80094fc:	b480      	push	{r7}
 80094fe:	b083      	sub	sp, #12
 8009500:	af00      	add	r7, sp, #0
 8009502:	6078      	str	r0, [r7, #4]
 8009504:	460b      	mov	r3, r1
 8009506:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009508:	bf00      	nop
 800950a:	370c      	adds	r7, #12
 800950c:	46bd      	mov	sp, r7
 800950e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009512:	4770      	bx	lr

08009514 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8009514:	b580      	push	{r7, lr}
 8009516:	b090      	sub	sp, #64	; 0x40
 8009518:	af00      	add	r7, sp, #0
 800951a:	60f8      	str	r0, [r7, #12]
 800951c:	60b9      	str	r1, [r7, #8]
 800951e:	603b      	str	r3, [r7, #0]
 8009520:	4613      	mov	r3, r2
 8009522:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009524:	e050      	b.n	80095c8 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8009526:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009528:	f1b3 3fff 	cmp.w	r3, #4294967295
 800952c:	d04c      	beq.n	80095c8 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800952e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8009530:	2b00      	cmp	r3, #0
 8009532:	d007      	beq.n	8009544 <UART_WaitOnFlagUntilTimeout+0x30>
 8009534:	f7fd fa4e 	bl	80069d4 <HAL_GetTick>
 8009538:	4602      	mov	r2, r0
 800953a:	683b      	ldr	r3, [r7, #0]
 800953c:	1ad3      	subs	r3, r2, r3
 800953e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009540:	429a      	cmp	r2, r3
 8009542:	d241      	bcs.n	80095c8 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8009544:	68fb      	ldr	r3, [r7, #12]
 8009546:	681b      	ldr	r3, [r3, #0]
 8009548:	330c      	adds	r3, #12
 800954a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800954c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800954e:	e853 3f00 	ldrex	r3, [r3]
 8009552:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009554:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009556:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800955a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800955c:	68fb      	ldr	r3, [r7, #12]
 800955e:	681b      	ldr	r3, [r3, #0]
 8009560:	330c      	adds	r3, #12
 8009562:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8009564:	637a      	str	r2, [r7, #52]	; 0x34
 8009566:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009568:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800956a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800956c:	e841 2300 	strex	r3, r2, [r1]
 8009570:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8009572:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009574:	2b00      	cmp	r3, #0
 8009576:	d1e5      	bne.n	8009544 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009578:	68fb      	ldr	r3, [r7, #12]
 800957a:	681b      	ldr	r3, [r3, #0]
 800957c:	3314      	adds	r3, #20
 800957e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009580:	697b      	ldr	r3, [r7, #20]
 8009582:	e853 3f00 	ldrex	r3, [r3]
 8009586:	613b      	str	r3, [r7, #16]
   return(result);
 8009588:	693b      	ldr	r3, [r7, #16]
 800958a:	f023 0301 	bic.w	r3, r3, #1
 800958e:	63bb      	str	r3, [r7, #56]	; 0x38
 8009590:	68fb      	ldr	r3, [r7, #12]
 8009592:	681b      	ldr	r3, [r3, #0]
 8009594:	3314      	adds	r3, #20
 8009596:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009598:	623a      	str	r2, [r7, #32]
 800959a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800959c:	69f9      	ldr	r1, [r7, #28]
 800959e:	6a3a      	ldr	r2, [r7, #32]
 80095a0:	e841 2300 	strex	r3, r2, [r1]
 80095a4:	61bb      	str	r3, [r7, #24]
   return(result);
 80095a6:	69bb      	ldr	r3, [r7, #24]
 80095a8:	2b00      	cmp	r3, #0
 80095aa:	d1e5      	bne.n	8009578 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 80095ac:	68fb      	ldr	r3, [r7, #12]
 80095ae:	2220      	movs	r2, #32
 80095b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 80095b4:	68fb      	ldr	r3, [r7, #12]
 80095b6:	2220      	movs	r2, #32
 80095b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 80095bc:	68fb      	ldr	r3, [r7, #12]
 80095be:	2200      	movs	r2, #0
 80095c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 80095c4:	2303      	movs	r3, #3
 80095c6:	e00f      	b.n	80095e8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095c8:	68fb      	ldr	r3, [r7, #12]
 80095ca:	681b      	ldr	r3, [r3, #0]
 80095cc:	681a      	ldr	r2, [r3, #0]
 80095ce:	68bb      	ldr	r3, [r7, #8]
 80095d0:	4013      	ands	r3, r2
 80095d2:	68ba      	ldr	r2, [r7, #8]
 80095d4:	429a      	cmp	r2, r3
 80095d6:	bf0c      	ite	eq
 80095d8:	2301      	moveq	r3, #1
 80095da:	2300      	movne	r3, #0
 80095dc:	b2db      	uxtb	r3, r3
 80095de:	461a      	mov	r2, r3
 80095e0:	79fb      	ldrb	r3, [r7, #7]
 80095e2:	429a      	cmp	r2, r3
 80095e4:	d09f      	beq.n	8009526 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 80095e6:	2300      	movs	r3, #0
}
 80095e8:	4618      	mov	r0, r3
 80095ea:	3740      	adds	r7, #64	; 0x40
 80095ec:	46bd      	mov	sp, r7
 80095ee:	bd80      	pop	{r7, pc}

080095f0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80095f0:	b480      	push	{r7}
 80095f2:	b085      	sub	sp, #20
 80095f4:	af00      	add	r7, sp, #0
 80095f6:	60f8      	str	r0, [r7, #12]
 80095f8:	60b9      	str	r1, [r7, #8]
 80095fa:	4613      	mov	r3, r2
 80095fc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80095fe:	68fb      	ldr	r3, [r7, #12]
 8009600:	68ba      	ldr	r2, [r7, #8]
 8009602:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8009604:	68fb      	ldr	r3, [r7, #12]
 8009606:	88fa      	ldrh	r2, [r7, #6]
 8009608:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800960a:	68fb      	ldr	r3, [r7, #12]
 800960c:	88fa      	ldrh	r2, [r7, #6]
 800960e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009610:	68fb      	ldr	r3, [r7, #12]
 8009612:	2200      	movs	r2, #0
 8009614:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8009616:	68fb      	ldr	r3, [r7, #12]
 8009618:	2222      	movs	r2, #34	; 0x22
 800961a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800961e:	68fb      	ldr	r3, [r7, #12]
 8009620:	2200      	movs	r2, #0
 8009622:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8009626:	68fb      	ldr	r3, [r7, #12]
 8009628:	681b      	ldr	r3, [r3, #0]
 800962a:	68da      	ldr	r2, [r3, #12]
 800962c:	68fb      	ldr	r3, [r7, #12]
 800962e:	681b      	ldr	r3, [r3, #0]
 8009630:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8009634:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8009636:	68fb      	ldr	r3, [r7, #12]
 8009638:	681b      	ldr	r3, [r3, #0]
 800963a:	695a      	ldr	r2, [r3, #20]
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	681b      	ldr	r3, [r3, #0]
 8009640:	f042 0201 	orr.w	r2, r2, #1
 8009644:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8009646:	68fb      	ldr	r3, [r7, #12]
 8009648:	681b      	ldr	r3, [r3, #0]
 800964a:	68da      	ldr	r2, [r3, #12]
 800964c:	68fb      	ldr	r3, [r7, #12]
 800964e:	681b      	ldr	r3, [r3, #0]
 8009650:	f042 0220 	orr.w	r2, r2, #32
 8009654:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8009656:	2300      	movs	r3, #0
}
 8009658:	4618      	mov	r0, r3
 800965a:	3714      	adds	r7, #20
 800965c:	46bd      	mov	sp, r7
 800965e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009662:	4770      	bx	lr

08009664 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8009664:	b480      	push	{r7}
 8009666:	b095      	sub	sp, #84	; 0x54
 8009668:	af00      	add	r7, sp, #0
 800966a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800966c:	687b      	ldr	r3, [r7, #4]
 800966e:	681b      	ldr	r3, [r3, #0]
 8009670:	330c      	adds	r3, #12
 8009672:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009674:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009676:	e853 3f00 	ldrex	r3, [r3]
 800967a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800967c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800967e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8009682:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	681b      	ldr	r3, [r3, #0]
 8009688:	330c      	adds	r3, #12
 800968a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800968c:	643a      	str	r2, [r7, #64]	; 0x40
 800968e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009690:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8009692:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009694:	e841 2300 	strex	r3, r2, [r1]
 8009698:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800969a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800969c:	2b00      	cmp	r3, #0
 800969e:	d1e5      	bne.n	800966c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80096a0:	687b      	ldr	r3, [r7, #4]
 80096a2:	681b      	ldr	r3, [r3, #0]
 80096a4:	3314      	adds	r3, #20
 80096a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096a8:	6a3b      	ldr	r3, [r7, #32]
 80096aa:	e853 3f00 	ldrex	r3, [r3]
 80096ae:	61fb      	str	r3, [r7, #28]
   return(result);
 80096b0:	69fb      	ldr	r3, [r7, #28]
 80096b2:	f023 0301 	bic.w	r3, r3, #1
 80096b6:	64bb      	str	r3, [r7, #72]	; 0x48
 80096b8:	687b      	ldr	r3, [r7, #4]
 80096ba:	681b      	ldr	r3, [r3, #0]
 80096bc:	3314      	adds	r3, #20
 80096be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80096c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 80096c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80096c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80096c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80096c8:	e841 2300 	strex	r3, r2, [r1]
 80096cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80096ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80096d0:	2b00      	cmp	r3, #0
 80096d2:	d1e5      	bne.n	80096a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80096d4:	687b      	ldr	r3, [r7, #4]
 80096d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80096d8:	2b01      	cmp	r3, #1
 80096da:	d119      	bne.n	8009710 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80096dc:	687b      	ldr	r3, [r7, #4]
 80096de:	681b      	ldr	r3, [r3, #0]
 80096e0:	330c      	adds	r3, #12
 80096e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096e4:	68fb      	ldr	r3, [r7, #12]
 80096e6:	e853 3f00 	ldrex	r3, [r3]
 80096ea:	60bb      	str	r3, [r7, #8]
   return(result);
 80096ec:	68bb      	ldr	r3, [r7, #8]
 80096ee:	f023 0310 	bic.w	r3, r3, #16
 80096f2:	647b      	str	r3, [r7, #68]	; 0x44
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	330c      	adds	r3, #12
 80096fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80096fc:	61ba      	str	r2, [r7, #24]
 80096fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009700:	6979      	ldr	r1, [r7, #20]
 8009702:	69ba      	ldr	r2, [r7, #24]
 8009704:	e841 2300 	strex	r3, r2, [r1]
 8009708:	613b      	str	r3, [r7, #16]
   return(result);
 800970a:	693b      	ldr	r3, [r7, #16]
 800970c:	2b00      	cmp	r3, #0
 800970e:	d1e5      	bne.n	80096dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009710:	687b      	ldr	r3, [r7, #4]
 8009712:	2220      	movs	r2, #32
 8009714:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009718:	687b      	ldr	r3, [r7, #4]
 800971a:	2200      	movs	r2, #0
 800971c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800971e:	bf00      	nop
 8009720:	3754      	adds	r7, #84	; 0x54
 8009722:	46bd      	mov	sp, r7
 8009724:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009728:	4770      	bx	lr

0800972a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800972a:	b580      	push	{r7, lr}
 800972c:	b084      	sub	sp, #16
 800972e:	af00      	add	r7, sp, #0
 8009730:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009732:	687b      	ldr	r3, [r7, #4]
 8009734:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009736:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009738:	68fb      	ldr	r3, [r7, #12]
 800973a:	2200      	movs	r2, #0
 800973c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	2200      	movs	r2, #0
 8009742:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8009744:	68f8      	ldr	r0, [r7, #12]
 8009746:	f7ff fecf 	bl	80094e8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800974a:	bf00      	nop
 800974c:	3710      	adds	r7, #16
 800974e:	46bd      	mov	sp, r7
 8009750:	bd80      	pop	{r7, pc}

08009752 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8009752:	b480      	push	{r7}
 8009754:	b085      	sub	sp, #20
 8009756:	af00      	add	r7, sp, #0
 8009758:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800975a:	687b      	ldr	r3, [r7, #4]
 800975c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009760:	b2db      	uxtb	r3, r3
 8009762:	2b21      	cmp	r3, #33	; 0x21
 8009764:	d13e      	bne.n	80097e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009766:	687b      	ldr	r3, [r7, #4]
 8009768:	689b      	ldr	r3, [r3, #8]
 800976a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800976e:	d114      	bne.n	800979a <UART_Transmit_IT+0x48>
 8009770:	687b      	ldr	r3, [r7, #4]
 8009772:	691b      	ldr	r3, [r3, #16]
 8009774:	2b00      	cmp	r3, #0
 8009776:	d110      	bne.n	800979a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009778:	687b      	ldr	r3, [r7, #4]
 800977a:	6a1b      	ldr	r3, [r3, #32]
 800977c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800977e:	68fb      	ldr	r3, [r7, #12]
 8009780:	881b      	ldrh	r3, [r3, #0]
 8009782:	461a      	mov	r2, r3
 8009784:	687b      	ldr	r3, [r7, #4]
 8009786:	681b      	ldr	r3, [r3, #0]
 8009788:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800978c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800978e:	687b      	ldr	r3, [r7, #4]
 8009790:	6a1b      	ldr	r3, [r3, #32]
 8009792:	1c9a      	adds	r2, r3, #2
 8009794:	687b      	ldr	r3, [r7, #4]
 8009796:	621a      	str	r2, [r3, #32]
 8009798:	e008      	b.n	80097ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800979a:	687b      	ldr	r3, [r7, #4]
 800979c:	6a1b      	ldr	r3, [r3, #32]
 800979e:	1c59      	adds	r1, r3, #1
 80097a0:	687a      	ldr	r2, [r7, #4]
 80097a2:	6211      	str	r1, [r2, #32]
 80097a4:	781a      	ldrb	r2, [r3, #0]
 80097a6:	687b      	ldr	r3, [r7, #4]
 80097a8:	681b      	ldr	r3, [r3, #0]
 80097aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80097ac:	687b      	ldr	r3, [r7, #4]
 80097ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80097b0:	b29b      	uxth	r3, r3
 80097b2:	3b01      	subs	r3, #1
 80097b4:	b29b      	uxth	r3, r3
 80097b6:	687a      	ldr	r2, [r7, #4]
 80097b8:	4619      	mov	r1, r3
 80097ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 80097bc:	2b00      	cmp	r3, #0
 80097be:	d10f      	bne.n	80097e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80097c0:	687b      	ldr	r3, [r7, #4]
 80097c2:	681b      	ldr	r3, [r3, #0]
 80097c4:	68da      	ldr	r2, [r3, #12]
 80097c6:	687b      	ldr	r3, [r7, #4]
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80097ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80097d0:	687b      	ldr	r3, [r7, #4]
 80097d2:	681b      	ldr	r3, [r3, #0]
 80097d4:	68da      	ldr	r2, [r3, #12]
 80097d6:	687b      	ldr	r3, [r7, #4]
 80097d8:	681b      	ldr	r3, [r3, #0]
 80097da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80097de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80097e0:	2300      	movs	r3, #0
 80097e2:	e000      	b.n	80097e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80097e4:	2302      	movs	r3, #2
  }
}
 80097e6:	4618      	mov	r0, r3
 80097e8:	3714      	adds	r7, #20
 80097ea:	46bd      	mov	sp, r7
 80097ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097f0:	4770      	bx	lr

080097f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80097f2:	b580      	push	{r7, lr}
 80097f4:	b082      	sub	sp, #8
 80097f6:	af00      	add	r7, sp, #0
 80097f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80097fa:	687b      	ldr	r3, [r7, #4]
 80097fc:	681b      	ldr	r3, [r3, #0]
 80097fe:	68da      	ldr	r2, [r3, #12]
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	681b      	ldr	r3, [r3, #0]
 8009804:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009808:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800980a:	687b      	ldr	r3, [r7, #4]
 800980c:	2220      	movs	r2, #32
 800980e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009812:	6878      	ldr	r0, [r7, #4]
 8009814:	f7ff fe5e 	bl	80094d4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009818:	2300      	movs	r3, #0
}
 800981a:	4618      	mov	r0, r3
 800981c:	3708      	adds	r7, #8
 800981e:	46bd      	mov	sp, r7
 8009820:	bd80      	pop	{r7, pc}

08009822 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009822:	b580      	push	{r7, lr}
 8009824:	b08c      	sub	sp, #48	; 0x30
 8009826:	af00      	add	r7, sp, #0
 8009828:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800982a:	687b      	ldr	r3, [r7, #4]
 800982c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009830:	b2db      	uxtb	r3, r3
 8009832:	2b22      	cmp	r3, #34	; 0x22
 8009834:	f040 80ab 	bne.w	800998e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009838:	687b      	ldr	r3, [r7, #4]
 800983a:	689b      	ldr	r3, [r3, #8]
 800983c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009840:	d117      	bne.n	8009872 <UART_Receive_IT+0x50>
 8009842:	687b      	ldr	r3, [r7, #4]
 8009844:	691b      	ldr	r3, [r3, #16]
 8009846:	2b00      	cmp	r3, #0
 8009848:	d113      	bne.n	8009872 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800984a:	2300      	movs	r3, #0
 800984c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009852:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8009854:	687b      	ldr	r3, [r7, #4]
 8009856:	681b      	ldr	r3, [r3, #0]
 8009858:	685b      	ldr	r3, [r3, #4]
 800985a:	b29b      	uxth	r3, r3
 800985c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009860:	b29a      	uxth	r2, r3
 8009862:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009864:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009866:	687b      	ldr	r3, [r7, #4]
 8009868:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800986a:	1c9a      	adds	r2, r3, #2
 800986c:	687b      	ldr	r3, [r7, #4]
 800986e:	629a      	str	r2, [r3, #40]	; 0x28
 8009870:	e026      	b.n	80098c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009872:	687b      	ldr	r3, [r7, #4]
 8009874:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009876:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009878:	2300      	movs	r3, #0
 800987a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800987c:	687b      	ldr	r3, [r7, #4]
 800987e:	689b      	ldr	r3, [r3, #8]
 8009880:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009884:	d007      	beq.n	8009896 <UART_Receive_IT+0x74>
 8009886:	687b      	ldr	r3, [r7, #4]
 8009888:	689b      	ldr	r3, [r3, #8]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d10a      	bne.n	80098a4 <UART_Receive_IT+0x82>
 800988e:	687b      	ldr	r3, [r7, #4]
 8009890:	691b      	ldr	r3, [r3, #16]
 8009892:	2b00      	cmp	r3, #0
 8009894:	d106      	bne.n	80098a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009896:	687b      	ldr	r3, [r7, #4]
 8009898:	681b      	ldr	r3, [r3, #0]
 800989a:	685b      	ldr	r3, [r3, #4]
 800989c:	b2da      	uxtb	r2, r3
 800989e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098a0:	701a      	strb	r2, [r3, #0]
 80098a2:	e008      	b.n	80098b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80098a4:	687b      	ldr	r3, [r7, #4]
 80098a6:	681b      	ldr	r3, [r3, #0]
 80098a8:	685b      	ldr	r3, [r3, #4]
 80098aa:	b2db      	uxtb	r3, r3
 80098ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 80098b0:	b2da      	uxtb	r2, r3
 80098b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80098b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80098b6:	687b      	ldr	r3, [r7, #4]
 80098b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098ba:	1c5a      	adds	r2, r3, #1
 80098bc:	687b      	ldr	r3, [r7, #4]
 80098be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80098c4:	b29b      	uxth	r3, r3
 80098c6:	3b01      	subs	r3, #1
 80098c8:	b29b      	uxth	r3, r3
 80098ca:	687a      	ldr	r2, [r7, #4]
 80098cc:	4619      	mov	r1, r3
 80098ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d15a      	bne.n	800998a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	681b      	ldr	r3, [r3, #0]
 80098d8:	68da      	ldr	r2, [r3, #12]
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	681b      	ldr	r3, [r3, #0]
 80098de:	f022 0220 	bic.w	r2, r2, #32
 80098e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80098e4:	687b      	ldr	r3, [r7, #4]
 80098e6:	681b      	ldr	r3, [r3, #0]
 80098e8:	68da      	ldr	r2, [r3, #12]
 80098ea:	687b      	ldr	r3, [r7, #4]
 80098ec:	681b      	ldr	r3, [r3, #0]
 80098ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80098f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	681b      	ldr	r3, [r3, #0]
 80098f8:	695a      	ldr	r2, [r3, #20]
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	681b      	ldr	r3, [r3, #0]
 80098fe:	f022 0201 	bic.w	r2, r2, #1
 8009902:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	2220      	movs	r2, #32
 8009908:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800990c:	687b      	ldr	r3, [r7, #4]
 800990e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009910:	2b01      	cmp	r3, #1
 8009912:	d135      	bne.n	8009980 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	2200      	movs	r2, #0
 8009918:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800991a:	687b      	ldr	r3, [r7, #4]
 800991c:	681b      	ldr	r3, [r3, #0]
 800991e:	330c      	adds	r3, #12
 8009920:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009922:	697b      	ldr	r3, [r7, #20]
 8009924:	e853 3f00 	ldrex	r3, [r3]
 8009928:	613b      	str	r3, [r7, #16]
   return(result);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f023 0310 	bic.w	r3, r3, #16
 8009930:	627b      	str	r3, [r7, #36]	; 0x24
 8009932:	687b      	ldr	r3, [r7, #4]
 8009934:	681b      	ldr	r3, [r3, #0]
 8009936:	330c      	adds	r3, #12
 8009938:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800993a:	623a      	str	r2, [r7, #32]
 800993c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800993e:	69f9      	ldr	r1, [r7, #28]
 8009940:	6a3a      	ldr	r2, [r7, #32]
 8009942:	e841 2300 	strex	r3, r2, [r1]
 8009946:	61bb      	str	r3, [r7, #24]
   return(result);
 8009948:	69bb      	ldr	r3, [r7, #24]
 800994a:	2b00      	cmp	r3, #0
 800994c:	d1e5      	bne.n	800991a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800994e:	687b      	ldr	r3, [r7, #4]
 8009950:	681b      	ldr	r3, [r3, #0]
 8009952:	681b      	ldr	r3, [r3, #0]
 8009954:	f003 0310 	and.w	r3, r3, #16
 8009958:	2b10      	cmp	r3, #16
 800995a:	d10a      	bne.n	8009972 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800995c:	2300      	movs	r3, #0
 800995e:	60fb      	str	r3, [r7, #12]
 8009960:	687b      	ldr	r3, [r7, #4]
 8009962:	681b      	ldr	r3, [r3, #0]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	60fb      	str	r3, [r7, #12]
 8009968:	687b      	ldr	r3, [r7, #4]
 800996a:	681b      	ldr	r3, [r3, #0]
 800996c:	685b      	ldr	r3, [r3, #4]
 800996e:	60fb      	str	r3, [r7, #12]
 8009970:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009976:	4619      	mov	r1, r3
 8009978:	6878      	ldr	r0, [r7, #4]
 800997a:	f7ff fdbf 	bl	80094fc <HAL_UARTEx_RxEventCallback>
 800997e:	e002      	b.n	8009986 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009980:	6878      	ldr	r0, [r7, #4]
 8009982:	f7fb fba5 	bl	80050d0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009986:	2300      	movs	r3, #0
 8009988:	e002      	b.n	8009990 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800998a:	2300      	movs	r3, #0
 800998c:	e000      	b.n	8009990 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800998e:	2302      	movs	r3, #2
  }
}
 8009990:	4618      	mov	r0, r3
 8009992:	3730      	adds	r7, #48	; 0x30
 8009994:	46bd      	mov	sp, r7
 8009996:	bd80      	pop	{r7, pc}

08009998 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009998:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800999c:	b0c0      	sub	sp, #256	; 0x100
 800999e:	af00      	add	r7, sp, #0
 80099a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80099a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099a8:	681b      	ldr	r3, [r3, #0]
 80099aa:	691b      	ldr	r3, [r3, #16]
 80099ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80099b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099b4:	68d9      	ldr	r1, [r3, #12]
 80099b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099ba:	681a      	ldr	r2, [r3, #0]
 80099bc:	ea40 0301 	orr.w	r3, r0, r1
 80099c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80099c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099c6:	689a      	ldr	r2, [r3, #8]
 80099c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099cc:	691b      	ldr	r3, [r3, #16]
 80099ce:	431a      	orrs	r2, r3
 80099d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099d4:	695b      	ldr	r3, [r3, #20]
 80099d6:	431a      	orrs	r2, r3
 80099d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099dc:	69db      	ldr	r3, [r3, #28]
 80099de:	4313      	orrs	r3, r2
 80099e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80099e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099e8:	681b      	ldr	r3, [r3, #0]
 80099ea:	68db      	ldr	r3, [r3, #12]
 80099ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80099f0:	f021 010c 	bic.w	r1, r1, #12
 80099f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80099f8:	681a      	ldr	r2, [r3, #0]
 80099fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80099fe:	430b      	orrs	r3, r1
 8009a00:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a02:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a06:	681b      	ldr	r3, [r3, #0]
 8009a08:	695b      	ldr	r3, [r3, #20]
 8009a0a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a0e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a12:	6999      	ldr	r1, [r3, #24]
 8009a14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a18:	681a      	ldr	r2, [r3, #0]
 8009a1a:	ea40 0301 	orr.w	r3, r0, r1
 8009a1e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009a20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a24:	681a      	ldr	r2, [r3, #0]
 8009a26:	4b8f      	ldr	r3, [pc, #572]	; (8009c64 <UART_SetConfig+0x2cc>)
 8009a28:	429a      	cmp	r2, r3
 8009a2a:	d005      	beq.n	8009a38 <UART_SetConfig+0xa0>
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a30:	681a      	ldr	r2, [r3, #0]
 8009a32:	4b8d      	ldr	r3, [pc, #564]	; (8009c68 <UART_SetConfig+0x2d0>)
 8009a34:	429a      	cmp	r2, r3
 8009a36:	d104      	bne.n	8009a42 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009a38:	f7fe faca 	bl	8007fd0 <HAL_RCC_GetPCLK2Freq>
 8009a3c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009a40:	e003      	b.n	8009a4a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009a42:	f7fe fab1 	bl	8007fa8 <HAL_RCC_GetPCLK1Freq>
 8009a46:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a4e:	69db      	ldr	r3, [r3, #28]
 8009a50:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009a54:	f040 810c 	bne.w	8009c70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009a58:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009a5c:	2200      	movs	r2, #0
 8009a5e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009a62:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009a66:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009a6a:	4622      	mov	r2, r4
 8009a6c:	462b      	mov	r3, r5
 8009a6e:	1891      	adds	r1, r2, r2
 8009a70:	65b9      	str	r1, [r7, #88]	; 0x58
 8009a72:	415b      	adcs	r3, r3
 8009a74:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009a76:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009a7a:	4621      	mov	r1, r4
 8009a7c:	eb12 0801 	adds.w	r8, r2, r1
 8009a80:	4629      	mov	r1, r5
 8009a82:	eb43 0901 	adc.w	r9, r3, r1
 8009a86:	f04f 0200 	mov.w	r2, #0
 8009a8a:	f04f 0300 	mov.w	r3, #0
 8009a8e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009a92:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009a96:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009a9a:	4690      	mov	r8, r2
 8009a9c:	4699      	mov	r9, r3
 8009a9e:	4623      	mov	r3, r4
 8009aa0:	eb18 0303 	adds.w	r3, r8, r3
 8009aa4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009aa8:	462b      	mov	r3, r5
 8009aaa:	eb49 0303 	adc.w	r3, r9, r3
 8009aae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009ab2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab6:	685b      	ldr	r3, [r3, #4]
 8009ab8:	2200      	movs	r2, #0
 8009aba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009abe:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009ac2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009ac6:	460b      	mov	r3, r1
 8009ac8:	18db      	adds	r3, r3, r3
 8009aca:	653b      	str	r3, [r7, #80]	; 0x50
 8009acc:	4613      	mov	r3, r2
 8009ace:	eb42 0303 	adc.w	r3, r2, r3
 8009ad2:	657b      	str	r3, [r7, #84]	; 0x54
 8009ad4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009ad8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009adc:	f7f7 f8d4 	bl	8000c88 <__aeabi_uldivmod>
 8009ae0:	4602      	mov	r2, r0
 8009ae2:	460b      	mov	r3, r1
 8009ae4:	4b61      	ldr	r3, [pc, #388]	; (8009c6c <UART_SetConfig+0x2d4>)
 8009ae6:	fba3 2302 	umull	r2, r3, r3, r2
 8009aea:	095b      	lsrs	r3, r3, #5
 8009aec:	011c      	lsls	r4, r3, #4
 8009aee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009af2:	2200      	movs	r2, #0
 8009af4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009af8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009afc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009b00:	4642      	mov	r2, r8
 8009b02:	464b      	mov	r3, r9
 8009b04:	1891      	adds	r1, r2, r2
 8009b06:	64b9      	str	r1, [r7, #72]	; 0x48
 8009b08:	415b      	adcs	r3, r3
 8009b0a:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b0c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009b10:	4641      	mov	r1, r8
 8009b12:	eb12 0a01 	adds.w	sl, r2, r1
 8009b16:	4649      	mov	r1, r9
 8009b18:	eb43 0b01 	adc.w	fp, r3, r1
 8009b1c:	f04f 0200 	mov.w	r2, #0
 8009b20:	f04f 0300 	mov.w	r3, #0
 8009b24:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009b28:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009b2c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009b30:	4692      	mov	sl, r2
 8009b32:	469b      	mov	fp, r3
 8009b34:	4643      	mov	r3, r8
 8009b36:	eb1a 0303 	adds.w	r3, sl, r3
 8009b3a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009b3e:	464b      	mov	r3, r9
 8009b40:	eb4b 0303 	adc.w	r3, fp, r3
 8009b44:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009b48:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b4c:	685b      	ldr	r3, [r3, #4]
 8009b4e:	2200      	movs	r2, #0
 8009b50:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009b54:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009b58:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009b5c:	460b      	mov	r3, r1
 8009b5e:	18db      	adds	r3, r3, r3
 8009b60:	643b      	str	r3, [r7, #64]	; 0x40
 8009b62:	4613      	mov	r3, r2
 8009b64:	eb42 0303 	adc.w	r3, r2, r3
 8009b68:	647b      	str	r3, [r7, #68]	; 0x44
 8009b6a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009b6e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009b72:	f7f7 f889 	bl	8000c88 <__aeabi_uldivmod>
 8009b76:	4602      	mov	r2, r0
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4611      	mov	r1, r2
 8009b7c:	4b3b      	ldr	r3, [pc, #236]	; (8009c6c <UART_SetConfig+0x2d4>)
 8009b7e:	fba3 2301 	umull	r2, r3, r3, r1
 8009b82:	095b      	lsrs	r3, r3, #5
 8009b84:	2264      	movs	r2, #100	; 0x64
 8009b86:	fb02 f303 	mul.w	r3, r2, r3
 8009b8a:	1acb      	subs	r3, r1, r3
 8009b8c:	00db      	lsls	r3, r3, #3
 8009b8e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009b92:	4b36      	ldr	r3, [pc, #216]	; (8009c6c <UART_SetConfig+0x2d4>)
 8009b94:	fba3 2302 	umull	r2, r3, r3, r2
 8009b98:	095b      	lsrs	r3, r3, #5
 8009b9a:	005b      	lsls	r3, r3, #1
 8009b9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009ba0:	441c      	add	r4, r3
 8009ba2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ba6:	2200      	movs	r2, #0
 8009ba8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009bac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009bb0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009bb4:	4642      	mov	r2, r8
 8009bb6:	464b      	mov	r3, r9
 8009bb8:	1891      	adds	r1, r2, r2
 8009bba:	63b9      	str	r1, [r7, #56]	; 0x38
 8009bbc:	415b      	adcs	r3, r3
 8009bbe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009bc0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009bc4:	4641      	mov	r1, r8
 8009bc6:	1851      	adds	r1, r2, r1
 8009bc8:	6339      	str	r1, [r7, #48]	; 0x30
 8009bca:	4649      	mov	r1, r9
 8009bcc:	414b      	adcs	r3, r1
 8009bce:	637b      	str	r3, [r7, #52]	; 0x34
 8009bd0:	f04f 0200 	mov.w	r2, #0
 8009bd4:	f04f 0300 	mov.w	r3, #0
 8009bd8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009bdc:	4659      	mov	r1, fp
 8009bde:	00cb      	lsls	r3, r1, #3
 8009be0:	4651      	mov	r1, sl
 8009be2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009be6:	4651      	mov	r1, sl
 8009be8:	00ca      	lsls	r2, r1, #3
 8009bea:	4610      	mov	r0, r2
 8009bec:	4619      	mov	r1, r3
 8009bee:	4603      	mov	r3, r0
 8009bf0:	4642      	mov	r2, r8
 8009bf2:	189b      	adds	r3, r3, r2
 8009bf4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009bf8:	464b      	mov	r3, r9
 8009bfa:	460a      	mov	r2, r1
 8009bfc:	eb42 0303 	adc.w	r3, r2, r3
 8009c00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c08:	685b      	ldr	r3, [r3, #4]
 8009c0a:	2200      	movs	r2, #0
 8009c0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009c14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009c18:	460b      	mov	r3, r1
 8009c1a:	18db      	adds	r3, r3, r3
 8009c1c:	62bb      	str	r3, [r7, #40]	; 0x28
 8009c1e:	4613      	mov	r3, r2
 8009c20:	eb42 0303 	adc.w	r3, r2, r3
 8009c24:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009c26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009c2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009c2e:	f7f7 f82b 	bl	8000c88 <__aeabi_uldivmod>
 8009c32:	4602      	mov	r2, r0
 8009c34:	460b      	mov	r3, r1
 8009c36:	4b0d      	ldr	r3, [pc, #52]	; (8009c6c <UART_SetConfig+0x2d4>)
 8009c38:	fba3 1302 	umull	r1, r3, r3, r2
 8009c3c:	095b      	lsrs	r3, r3, #5
 8009c3e:	2164      	movs	r1, #100	; 0x64
 8009c40:	fb01 f303 	mul.w	r3, r1, r3
 8009c44:	1ad3      	subs	r3, r2, r3
 8009c46:	00db      	lsls	r3, r3, #3
 8009c48:	3332      	adds	r3, #50	; 0x32
 8009c4a:	4a08      	ldr	r2, [pc, #32]	; (8009c6c <UART_SetConfig+0x2d4>)
 8009c4c:	fba2 2303 	umull	r2, r3, r2, r3
 8009c50:	095b      	lsrs	r3, r3, #5
 8009c52:	f003 0207 	and.w	r2, r3, #7
 8009c56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c5a:	681b      	ldr	r3, [r3, #0]
 8009c5c:	4422      	add	r2, r4
 8009c5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009c60:	e105      	b.n	8009e6e <UART_SetConfig+0x4d6>
 8009c62:	bf00      	nop
 8009c64:	40011000 	.word	0x40011000
 8009c68:	40011400 	.word	0x40011400
 8009c6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009c70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c74:	2200      	movs	r2, #0
 8009c76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009c7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009c7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009c82:	4642      	mov	r2, r8
 8009c84:	464b      	mov	r3, r9
 8009c86:	1891      	adds	r1, r2, r2
 8009c88:	6239      	str	r1, [r7, #32]
 8009c8a:	415b      	adcs	r3, r3
 8009c8c:	627b      	str	r3, [r7, #36]	; 0x24
 8009c8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009c92:	4641      	mov	r1, r8
 8009c94:	1854      	adds	r4, r2, r1
 8009c96:	4649      	mov	r1, r9
 8009c98:	eb43 0501 	adc.w	r5, r3, r1
 8009c9c:	f04f 0200 	mov.w	r2, #0
 8009ca0:	f04f 0300 	mov.w	r3, #0
 8009ca4:	00eb      	lsls	r3, r5, #3
 8009ca6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009caa:	00e2      	lsls	r2, r4, #3
 8009cac:	4614      	mov	r4, r2
 8009cae:	461d      	mov	r5, r3
 8009cb0:	4643      	mov	r3, r8
 8009cb2:	18e3      	adds	r3, r4, r3
 8009cb4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009cb8:	464b      	mov	r3, r9
 8009cba:	eb45 0303 	adc.w	r3, r5, r3
 8009cbe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009cc6:	685b      	ldr	r3, [r3, #4]
 8009cc8:	2200      	movs	r2, #0
 8009cca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009cce:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009cd2:	f04f 0200 	mov.w	r2, #0
 8009cd6:	f04f 0300 	mov.w	r3, #0
 8009cda:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009cde:	4629      	mov	r1, r5
 8009ce0:	008b      	lsls	r3, r1, #2
 8009ce2:	4621      	mov	r1, r4
 8009ce4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ce8:	4621      	mov	r1, r4
 8009cea:	008a      	lsls	r2, r1, #2
 8009cec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009cf0:	f7f6 ffca 	bl	8000c88 <__aeabi_uldivmod>
 8009cf4:	4602      	mov	r2, r0
 8009cf6:	460b      	mov	r3, r1
 8009cf8:	4b60      	ldr	r3, [pc, #384]	; (8009e7c <UART_SetConfig+0x4e4>)
 8009cfa:	fba3 2302 	umull	r2, r3, r3, r2
 8009cfe:	095b      	lsrs	r3, r3, #5
 8009d00:	011c      	lsls	r4, r3, #4
 8009d02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d06:	2200      	movs	r2, #0
 8009d08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009d10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009d14:	4642      	mov	r2, r8
 8009d16:	464b      	mov	r3, r9
 8009d18:	1891      	adds	r1, r2, r2
 8009d1a:	61b9      	str	r1, [r7, #24]
 8009d1c:	415b      	adcs	r3, r3
 8009d1e:	61fb      	str	r3, [r7, #28]
 8009d20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009d24:	4641      	mov	r1, r8
 8009d26:	1851      	adds	r1, r2, r1
 8009d28:	6139      	str	r1, [r7, #16]
 8009d2a:	4649      	mov	r1, r9
 8009d2c:	414b      	adcs	r3, r1
 8009d2e:	617b      	str	r3, [r7, #20]
 8009d30:	f04f 0200 	mov.w	r2, #0
 8009d34:	f04f 0300 	mov.w	r3, #0
 8009d38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009d3c:	4659      	mov	r1, fp
 8009d3e:	00cb      	lsls	r3, r1, #3
 8009d40:	4651      	mov	r1, sl
 8009d42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009d46:	4651      	mov	r1, sl
 8009d48:	00ca      	lsls	r2, r1, #3
 8009d4a:	4610      	mov	r0, r2
 8009d4c:	4619      	mov	r1, r3
 8009d4e:	4603      	mov	r3, r0
 8009d50:	4642      	mov	r2, r8
 8009d52:	189b      	adds	r3, r3, r2
 8009d54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009d58:	464b      	mov	r3, r9
 8009d5a:	460a      	mov	r2, r1
 8009d5c:	eb42 0303 	adc.w	r3, r2, r3
 8009d60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009d64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d68:	685b      	ldr	r3, [r3, #4]
 8009d6a:	2200      	movs	r2, #0
 8009d6c:	67bb      	str	r3, [r7, #120]	; 0x78
 8009d6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009d70:	f04f 0200 	mov.w	r2, #0
 8009d74:	f04f 0300 	mov.w	r3, #0
 8009d78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009d7c:	4649      	mov	r1, r9
 8009d7e:	008b      	lsls	r3, r1, #2
 8009d80:	4641      	mov	r1, r8
 8009d82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d86:	4641      	mov	r1, r8
 8009d88:	008a      	lsls	r2, r1, #2
 8009d8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009d8e:	f7f6 ff7b 	bl	8000c88 <__aeabi_uldivmod>
 8009d92:	4602      	mov	r2, r0
 8009d94:	460b      	mov	r3, r1
 8009d96:	4b39      	ldr	r3, [pc, #228]	; (8009e7c <UART_SetConfig+0x4e4>)
 8009d98:	fba3 1302 	umull	r1, r3, r3, r2
 8009d9c:	095b      	lsrs	r3, r3, #5
 8009d9e:	2164      	movs	r1, #100	; 0x64
 8009da0:	fb01 f303 	mul.w	r3, r1, r3
 8009da4:	1ad3      	subs	r3, r2, r3
 8009da6:	011b      	lsls	r3, r3, #4
 8009da8:	3332      	adds	r3, #50	; 0x32
 8009daa:	4a34      	ldr	r2, [pc, #208]	; (8009e7c <UART_SetConfig+0x4e4>)
 8009dac:	fba2 2303 	umull	r2, r3, r2, r3
 8009db0:	095b      	lsrs	r3, r3, #5
 8009db2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009db6:	441c      	add	r4, r3
 8009db8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009dbc:	2200      	movs	r2, #0
 8009dbe:	673b      	str	r3, [r7, #112]	; 0x70
 8009dc0:	677a      	str	r2, [r7, #116]	; 0x74
 8009dc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009dc6:	4642      	mov	r2, r8
 8009dc8:	464b      	mov	r3, r9
 8009dca:	1891      	adds	r1, r2, r2
 8009dcc:	60b9      	str	r1, [r7, #8]
 8009dce:	415b      	adcs	r3, r3
 8009dd0:	60fb      	str	r3, [r7, #12]
 8009dd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009dd6:	4641      	mov	r1, r8
 8009dd8:	1851      	adds	r1, r2, r1
 8009dda:	6039      	str	r1, [r7, #0]
 8009ddc:	4649      	mov	r1, r9
 8009dde:	414b      	adcs	r3, r1
 8009de0:	607b      	str	r3, [r7, #4]
 8009de2:	f04f 0200 	mov.w	r2, #0
 8009de6:	f04f 0300 	mov.w	r3, #0
 8009dea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009dee:	4659      	mov	r1, fp
 8009df0:	00cb      	lsls	r3, r1, #3
 8009df2:	4651      	mov	r1, sl
 8009df4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009df8:	4651      	mov	r1, sl
 8009dfa:	00ca      	lsls	r2, r1, #3
 8009dfc:	4610      	mov	r0, r2
 8009dfe:	4619      	mov	r1, r3
 8009e00:	4603      	mov	r3, r0
 8009e02:	4642      	mov	r2, r8
 8009e04:	189b      	adds	r3, r3, r2
 8009e06:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e08:	464b      	mov	r3, r9
 8009e0a:	460a      	mov	r2, r1
 8009e0c:	eb42 0303 	adc.w	r3, r2, r3
 8009e10:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e16:	685b      	ldr	r3, [r3, #4]
 8009e18:	2200      	movs	r2, #0
 8009e1a:	663b      	str	r3, [r7, #96]	; 0x60
 8009e1c:	667a      	str	r2, [r7, #100]	; 0x64
 8009e1e:	f04f 0200 	mov.w	r2, #0
 8009e22:	f04f 0300 	mov.w	r3, #0
 8009e26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009e2a:	4649      	mov	r1, r9
 8009e2c:	008b      	lsls	r3, r1, #2
 8009e2e:	4641      	mov	r1, r8
 8009e30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e34:	4641      	mov	r1, r8
 8009e36:	008a      	lsls	r2, r1, #2
 8009e38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009e3c:	f7f6 ff24 	bl	8000c88 <__aeabi_uldivmod>
 8009e40:	4602      	mov	r2, r0
 8009e42:	460b      	mov	r3, r1
 8009e44:	4b0d      	ldr	r3, [pc, #52]	; (8009e7c <UART_SetConfig+0x4e4>)
 8009e46:	fba3 1302 	umull	r1, r3, r3, r2
 8009e4a:	095b      	lsrs	r3, r3, #5
 8009e4c:	2164      	movs	r1, #100	; 0x64
 8009e4e:	fb01 f303 	mul.w	r3, r1, r3
 8009e52:	1ad3      	subs	r3, r2, r3
 8009e54:	011b      	lsls	r3, r3, #4
 8009e56:	3332      	adds	r3, #50	; 0x32
 8009e58:	4a08      	ldr	r2, [pc, #32]	; (8009e7c <UART_SetConfig+0x4e4>)
 8009e5a:	fba2 2303 	umull	r2, r3, r2, r3
 8009e5e:	095b      	lsrs	r3, r3, #5
 8009e60:	f003 020f 	and.w	r2, r3, #15
 8009e64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	4422      	add	r2, r4
 8009e6c:	609a      	str	r2, [r3, #8]
}
 8009e6e:	bf00      	nop
 8009e70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009e74:	46bd      	mov	sp, r7
 8009e76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009e7a:	bf00      	nop
 8009e7c:	51eb851f 	.word	0x51eb851f

08009e80 <atof>:
 8009e80:	2100      	movs	r1, #0
 8009e82:	f001 bcfd 	b.w	800b880 <strtod>
	...

08009e88 <__errno>:
 8009e88:	4b01      	ldr	r3, [pc, #4]	; (8009e90 <__errno+0x8>)
 8009e8a:	6818      	ldr	r0, [r3, #0]
 8009e8c:	4770      	bx	lr
 8009e8e:	bf00      	nop
 8009e90:	20000020 	.word	0x20000020

08009e94 <__libc_init_array>:
 8009e94:	b570      	push	{r4, r5, r6, lr}
 8009e96:	4d0d      	ldr	r5, [pc, #52]	; (8009ecc <__libc_init_array+0x38>)
 8009e98:	4c0d      	ldr	r4, [pc, #52]	; (8009ed0 <__libc_init_array+0x3c>)
 8009e9a:	1b64      	subs	r4, r4, r5
 8009e9c:	10a4      	asrs	r4, r4, #2
 8009e9e:	2600      	movs	r6, #0
 8009ea0:	42a6      	cmp	r6, r4
 8009ea2:	d109      	bne.n	8009eb8 <__libc_init_array+0x24>
 8009ea4:	4d0b      	ldr	r5, [pc, #44]	; (8009ed4 <__libc_init_array+0x40>)
 8009ea6:	4c0c      	ldr	r4, [pc, #48]	; (8009ed8 <__libc_init_array+0x44>)
 8009ea8:	f005 fc44 	bl	800f734 <_init>
 8009eac:	1b64      	subs	r4, r4, r5
 8009eae:	10a4      	asrs	r4, r4, #2
 8009eb0:	2600      	movs	r6, #0
 8009eb2:	42a6      	cmp	r6, r4
 8009eb4:	d105      	bne.n	8009ec2 <__libc_init_array+0x2e>
 8009eb6:	bd70      	pop	{r4, r5, r6, pc}
 8009eb8:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ebc:	4798      	blx	r3
 8009ebe:	3601      	adds	r6, #1
 8009ec0:	e7ee      	b.n	8009ea0 <__libc_init_array+0xc>
 8009ec2:	f855 3b04 	ldr.w	r3, [r5], #4
 8009ec6:	4798      	blx	r3
 8009ec8:	3601      	adds	r6, #1
 8009eca:	e7f2      	b.n	8009eb2 <__libc_init_array+0x1e>
 8009ecc:	0800fe38 	.word	0x0800fe38
 8009ed0:	0800fe38 	.word	0x0800fe38
 8009ed4:	0800fe38 	.word	0x0800fe38
 8009ed8:	0800fe3c 	.word	0x0800fe3c

08009edc <memset>:
 8009edc:	4402      	add	r2, r0
 8009ede:	4603      	mov	r3, r0
 8009ee0:	4293      	cmp	r3, r2
 8009ee2:	d100      	bne.n	8009ee6 <memset+0xa>
 8009ee4:	4770      	bx	lr
 8009ee6:	f803 1b01 	strb.w	r1, [r3], #1
 8009eea:	e7f9      	b.n	8009ee0 <memset+0x4>

08009eec <__cvt>:
 8009eec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ef0:	ec55 4b10 	vmov	r4, r5, d0
 8009ef4:	2d00      	cmp	r5, #0
 8009ef6:	460e      	mov	r6, r1
 8009ef8:	4619      	mov	r1, r3
 8009efa:	462b      	mov	r3, r5
 8009efc:	bfbb      	ittet	lt
 8009efe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f02:	461d      	movlt	r5, r3
 8009f04:	2300      	movge	r3, #0
 8009f06:	232d      	movlt	r3, #45	; 0x2d
 8009f08:	700b      	strb	r3, [r1, #0]
 8009f0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f10:	4691      	mov	r9, r2
 8009f12:	f023 0820 	bic.w	r8, r3, #32
 8009f16:	bfbc      	itt	lt
 8009f18:	4622      	movlt	r2, r4
 8009f1a:	4614      	movlt	r4, r2
 8009f1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f20:	d005      	beq.n	8009f2e <__cvt+0x42>
 8009f22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009f26:	d100      	bne.n	8009f2a <__cvt+0x3e>
 8009f28:	3601      	adds	r6, #1
 8009f2a:	2102      	movs	r1, #2
 8009f2c:	e000      	b.n	8009f30 <__cvt+0x44>
 8009f2e:	2103      	movs	r1, #3
 8009f30:	ab03      	add	r3, sp, #12
 8009f32:	9301      	str	r3, [sp, #4]
 8009f34:	ab02      	add	r3, sp, #8
 8009f36:	9300      	str	r3, [sp, #0]
 8009f38:	ec45 4b10 	vmov	d0, r4, r5
 8009f3c:	4653      	mov	r3, sl
 8009f3e:	4632      	mov	r2, r6
 8009f40:	f001 fe36 	bl	800bbb0 <_dtoa_r>
 8009f44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009f48:	4607      	mov	r7, r0
 8009f4a:	d102      	bne.n	8009f52 <__cvt+0x66>
 8009f4c:	f019 0f01 	tst.w	r9, #1
 8009f50:	d022      	beq.n	8009f98 <__cvt+0xac>
 8009f52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009f56:	eb07 0906 	add.w	r9, r7, r6
 8009f5a:	d110      	bne.n	8009f7e <__cvt+0x92>
 8009f5c:	783b      	ldrb	r3, [r7, #0]
 8009f5e:	2b30      	cmp	r3, #48	; 0x30
 8009f60:	d10a      	bne.n	8009f78 <__cvt+0x8c>
 8009f62:	2200      	movs	r2, #0
 8009f64:	2300      	movs	r3, #0
 8009f66:	4620      	mov	r0, r4
 8009f68:	4629      	mov	r1, r5
 8009f6a:	f7f6 fdad 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f6e:	b918      	cbnz	r0, 8009f78 <__cvt+0x8c>
 8009f70:	f1c6 0601 	rsb	r6, r6, #1
 8009f74:	f8ca 6000 	str.w	r6, [sl]
 8009f78:	f8da 3000 	ldr.w	r3, [sl]
 8009f7c:	4499      	add	r9, r3
 8009f7e:	2200      	movs	r2, #0
 8009f80:	2300      	movs	r3, #0
 8009f82:	4620      	mov	r0, r4
 8009f84:	4629      	mov	r1, r5
 8009f86:	f7f6 fd9f 	bl	8000ac8 <__aeabi_dcmpeq>
 8009f8a:	b108      	cbz	r0, 8009f90 <__cvt+0xa4>
 8009f8c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009f90:	2230      	movs	r2, #48	; 0x30
 8009f92:	9b03      	ldr	r3, [sp, #12]
 8009f94:	454b      	cmp	r3, r9
 8009f96:	d307      	bcc.n	8009fa8 <__cvt+0xbc>
 8009f98:	9b03      	ldr	r3, [sp, #12]
 8009f9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009f9c:	1bdb      	subs	r3, r3, r7
 8009f9e:	4638      	mov	r0, r7
 8009fa0:	6013      	str	r3, [r2, #0]
 8009fa2:	b004      	add	sp, #16
 8009fa4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009fa8:	1c59      	adds	r1, r3, #1
 8009faa:	9103      	str	r1, [sp, #12]
 8009fac:	701a      	strb	r2, [r3, #0]
 8009fae:	e7f0      	b.n	8009f92 <__cvt+0xa6>

08009fb0 <__exponent>:
 8009fb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009fb2:	4603      	mov	r3, r0
 8009fb4:	2900      	cmp	r1, #0
 8009fb6:	bfb8      	it	lt
 8009fb8:	4249      	neglt	r1, r1
 8009fba:	f803 2b02 	strb.w	r2, [r3], #2
 8009fbe:	bfb4      	ite	lt
 8009fc0:	222d      	movlt	r2, #45	; 0x2d
 8009fc2:	222b      	movge	r2, #43	; 0x2b
 8009fc4:	2909      	cmp	r1, #9
 8009fc6:	7042      	strb	r2, [r0, #1]
 8009fc8:	dd2a      	ble.n	800a020 <__exponent+0x70>
 8009fca:	f10d 0407 	add.w	r4, sp, #7
 8009fce:	46a4      	mov	ip, r4
 8009fd0:	270a      	movs	r7, #10
 8009fd2:	46a6      	mov	lr, r4
 8009fd4:	460a      	mov	r2, r1
 8009fd6:	fb91 f6f7 	sdiv	r6, r1, r7
 8009fda:	fb07 1516 	mls	r5, r7, r6, r1
 8009fde:	3530      	adds	r5, #48	; 0x30
 8009fe0:	2a63      	cmp	r2, #99	; 0x63
 8009fe2:	f104 34ff 	add.w	r4, r4, #4294967295
 8009fe6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8009fea:	4631      	mov	r1, r6
 8009fec:	dcf1      	bgt.n	8009fd2 <__exponent+0x22>
 8009fee:	3130      	adds	r1, #48	; 0x30
 8009ff0:	f1ae 0502 	sub.w	r5, lr, #2
 8009ff4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009ff8:	1c44      	adds	r4, r0, #1
 8009ffa:	4629      	mov	r1, r5
 8009ffc:	4561      	cmp	r1, ip
 8009ffe:	d30a      	bcc.n	800a016 <__exponent+0x66>
 800a000:	f10d 0209 	add.w	r2, sp, #9
 800a004:	eba2 020e 	sub.w	r2, r2, lr
 800a008:	4565      	cmp	r5, ip
 800a00a:	bf88      	it	hi
 800a00c:	2200      	movhi	r2, #0
 800a00e:	4413      	add	r3, r2
 800a010:	1a18      	subs	r0, r3, r0
 800a012:	b003      	add	sp, #12
 800a014:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a016:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a01a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a01e:	e7ed      	b.n	8009ffc <__exponent+0x4c>
 800a020:	2330      	movs	r3, #48	; 0x30
 800a022:	3130      	adds	r1, #48	; 0x30
 800a024:	7083      	strb	r3, [r0, #2]
 800a026:	70c1      	strb	r1, [r0, #3]
 800a028:	1d03      	adds	r3, r0, #4
 800a02a:	e7f1      	b.n	800a010 <__exponent+0x60>

0800a02c <_printf_float>:
 800a02c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a030:	ed2d 8b02 	vpush	{d8}
 800a034:	b08d      	sub	sp, #52	; 0x34
 800a036:	460c      	mov	r4, r1
 800a038:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a03c:	4616      	mov	r6, r2
 800a03e:	461f      	mov	r7, r3
 800a040:	4605      	mov	r5, r0
 800a042:	f002 ff25 	bl	800ce90 <_localeconv_r>
 800a046:	f8d0 a000 	ldr.w	sl, [r0]
 800a04a:	4650      	mov	r0, sl
 800a04c:	f7f6 f8c0 	bl	80001d0 <strlen>
 800a050:	2300      	movs	r3, #0
 800a052:	930a      	str	r3, [sp, #40]	; 0x28
 800a054:	6823      	ldr	r3, [r4, #0]
 800a056:	9305      	str	r3, [sp, #20]
 800a058:	f8d8 3000 	ldr.w	r3, [r8]
 800a05c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a060:	3307      	adds	r3, #7
 800a062:	f023 0307 	bic.w	r3, r3, #7
 800a066:	f103 0208 	add.w	r2, r3, #8
 800a06a:	f8c8 2000 	str.w	r2, [r8]
 800a06e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a072:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a076:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a07a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a07e:	9307      	str	r3, [sp, #28]
 800a080:	f8cd 8018 	str.w	r8, [sp, #24]
 800a084:	ee08 0a10 	vmov	s16, r0
 800a088:	4b9f      	ldr	r3, [pc, #636]	; (800a308 <_printf_float+0x2dc>)
 800a08a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a08e:	f04f 32ff 	mov.w	r2, #4294967295
 800a092:	f7f6 fd4b 	bl	8000b2c <__aeabi_dcmpun>
 800a096:	bb88      	cbnz	r0, 800a0fc <_printf_float+0xd0>
 800a098:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a09c:	4b9a      	ldr	r3, [pc, #616]	; (800a308 <_printf_float+0x2dc>)
 800a09e:	f04f 32ff 	mov.w	r2, #4294967295
 800a0a2:	f7f6 fd25 	bl	8000af0 <__aeabi_dcmple>
 800a0a6:	bb48      	cbnz	r0, 800a0fc <_printf_float+0xd0>
 800a0a8:	2200      	movs	r2, #0
 800a0aa:	2300      	movs	r3, #0
 800a0ac:	4640      	mov	r0, r8
 800a0ae:	4649      	mov	r1, r9
 800a0b0:	f7f6 fd14 	bl	8000adc <__aeabi_dcmplt>
 800a0b4:	b110      	cbz	r0, 800a0bc <_printf_float+0x90>
 800a0b6:	232d      	movs	r3, #45	; 0x2d
 800a0b8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0bc:	4b93      	ldr	r3, [pc, #588]	; (800a30c <_printf_float+0x2e0>)
 800a0be:	4894      	ldr	r0, [pc, #592]	; (800a310 <_printf_float+0x2e4>)
 800a0c0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a0c4:	bf94      	ite	ls
 800a0c6:	4698      	movls	r8, r3
 800a0c8:	4680      	movhi	r8, r0
 800a0ca:	2303      	movs	r3, #3
 800a0cc:	6123      	str	r3, [r4, #16]
 800a0ce:	9b05      	ldr	r3, [sp, #20]
 800a0d0:	f023 0204 	bic.w	r2, r3, #4
 800a0d4:	6022      	str	r2, [r4, #0]
 800a0d6:	f04f 0900 	mov.w	r9, #0
 800a0da:	9700      	str	r7, [sp, #0]
 800a0dc:	4633      	mov	r3, r6
 800a0de:	aa0b      	add	r2, sp, #44	; 0x2c
 800a0e0:	4621      	mov	r1, r4
 800a0e2:	4628      	mov	r0, r5
 800a0e4:	f000 f9d8 	bl	800a498 <_printf_common>
 800a0e8:	3001      	adds	r0, #1
 800a0ea:	f040 8090 	bne.w	800a20e <_printf_float+0x1e2>
 800a0ee:	f04f 30ff 	mov.w	r0, #4294967295
 800a0f2:	b00d      	add	sp, #52	; 0x34
 800a0f4:	ecbd 8b02 	vpop	{d8}
 800a0f8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a0fc:	4642      	mov	r2, r8
 800a0fe:	464b      	mov	r3, r9
 800a100:	4640      	mov	r0, r8
 800a102:	4649      	mov	r1, r9
 800a104:	f7f6 fd12 	bl	8000b2c <__aeabi_dcmpun>
 800a108:	b140      	cbz	r0, 800a11c <_printf_float+0xf0>
 800a10a:	464b      	mov	r3, r9
 800a10c:	2b00      	cmp	r3, #0
 800a10e:	bfbc      	itt	lt
 800a110:	232d      	movlt	r3, #45	; 0x2d
 800a112:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a116:	487f      	ldr	r0, [pc, #508]	; (800a314 <_printf_float+0x2e8>)
 800a118:	4b7f      	ldr	r3, [pc, #508]	; (800a318 <_printf_float+0x2ec>)
 800a11a:	e7d1      	b.n	800a0c0 <_printf_float+0x94>
 800a11c:	6863      	ldr	r3, [r4, #4]
 800a11e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a122:	9206      	str	r2, [sp, #24]
 800a124:	1c5a      	adds	r2, r3, #1
 800a126:	d13f      	bne.n	800a1a8 <_printf_float+0x17c>
 800a128:	2306      	movs	r3, #6
 800a12a:	6063      	str	r3, [r4, #4]
 800a12c:	9b05      	ldr	r3, [sp, #20]
 800a12e:	6861      	ldr	r1, [r4, #4]
 800a130:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a134:	2300      	movs	r3, #0
 800a136:	9303      	str	r3, [sp, #12]
 800a138:	ab0a      	add	r3, sp, #40	; 0x28
 800a13a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a13e:	ab09      	add	r3, sp, #36	; 0x24
 800a140:	ec49 8b10 	vmov	d0, r8, r9
 800a144:	9300      	str	r3, [sp, #0]
 800a146:	6022      	str	r2, [r4, #0]
 800a148:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a14c:	4628      	mov	r0, r5
 800a14e:	f7ff fecd 	bl	8009eec <__cvt>
 800a152:	9b06      	ldr	r3, [sp, #24]
 800a154:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a156:	2b47      	cmp	r3, #71	; 0x47
 800a158:	4680      	mov	r8, r0
 800a15a:	d108      	bne.n	800a16e <_printf_float+0x142>
 800a15c:	1cc8      	adds	r0, r1, #3
 800a15e:	db02      	blt.n	800a166 <_printf_float+0x13a>
 800a160:	6863      	ldr	r3, [r4, #4]
 800a162:	4299      	cmp	r1, r3
 800a164:	dd41      	ble.n	800a1ea <_printf_float+0x1be>
 800a166:	f1ab 0b02 	sub.w	fp, fp, #2
 800a16a:	fa5f fb8b 	uxtb.w	fp, fp
 800a16e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a172:	d820      	bhi.n	800a1b6 <_printf_float+0x18a>
 800a174:	3901      	subs	r1, #1
 800a176:	465a      	mov	r2, fp
 800a178:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a17c:	9109      	str	r1, [sp, #36]	; 0x24
 800a17e:	f7ff ff17 	bl	8009fb0 <__exponent>
 800a182:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a184:	1813      	adds	r3, r2, r0
 800a186:	2a01      	cmp	r2, #1
 800a188:	4681      	mov	r9, r0
 800a18a:	6123      	str	r3, [r4, #16]
 800a18c:	dc02      	bgt.n	800a194 <_printf_float+0x168>
 800a18e:	6822      	ldr	r2, [r4, #0]
 800a190:	07d2      	lsls	r2, r2, #31
 800a192:	d501      	bpl.n	800a198 <_printf_float+0x16c>
 800a194:	3301      	adds	r3, #1
 800a196:	6123      	str	r3, [r4, #16]
 800a198:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a19c:	2b00      	cmp	r3, #0
 800a19e:	d09c      	beq.n	800a0da <_printf_float+0xae>
 800a1a0:	232d      	movs	r3, #45	; 0x2d
 800a1a2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a1a6:	e798      	b.n	800a0da <_printf_float+0xae>
 800a1a8:	9a06      	ldr	r2, [sp, #24]
 800a1aa:	2a47      	cmp	r2, #71	; 0x47
 800a1ac:	d1be      	bne.n	800a12c <_printf_float+0x100>
 800a1ae:	2b00      	cmp	r3, #0
 800a1b0:	d1bc      	bne.n	800a12c <_printf_float+0x100>
 800a1b2:	2301      	movs	r3, #1
 800a1b4:	e7b9      	b.n	800a12a <_printf_float+0xfe>
 800a1b6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a1ba:	d118      	bne.n	800a1ee <_printf_float+0x1c2>
 800a1bc:	2900      	cmp	r1, #0
 800a1be:	6863      	ldr	r3, [r4, #4]
 800a1c0:	dd0b      	ble.n	800a1da <_printf_float+0x1ae>
 800a1c2:	6121      	str	r1, [r4, #16]
 800a1c4:	b913      	cbnz	r3, 800a1cc <_printf_float+0x1a0>
 800a1c6:	6822      	ldr	r2, [r4, #0]
 800a1c8:	07d0      	lsls	r0, r2, #31
 800a1ca:	d502      	bpl.n	800a1d2 <_printf_float+0x1a6>
 800a1cc:	3301      	adds	r3, #1
 800a1ce:	440b      	add	r3, r1
 800a1d0:	6123      	str	r3, [r4, #16]
 800a1d2:	65a1      	str	r1, [r4, #88]	; 0x58
 800a1d4:	f04f 0900 	mov.w	r9, #0
 800a1d8:	e7de      	b.n	800a198 <_printf_float+0x16c>
 800a1da:	b913      	cbnz	r3, 800a1e2 <_printf_float+0x1b6>
 800a1dc:	6822      	ldr	r2, [r4, #0]
 800a1de:	07d2      	lsls	r2, r2, #31
 800a1e0:	d501      	bpl.n	800a1e6 <_printf_float+0x1ba>
 800a1e2:	3302      	adds	r3, #2
 800a1e4:	e7f4      	b.n	800a1d0 <_printf_float+0x1a4>
 800a1e6:	2301      	movs	r3, #1
 800a1e8:	e7f2      	b.n	800a1d0 <_printf_float+0x1a4>
 800a1ea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a1ee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f0:	4299      	cmp	r1, r3
 800a1f2:	db05      	blt.n	800a200 <_printf_float+0x1d4>
 800a1f4:	6823      	ldr	r3, [r4, #0]
 800a1f6:	6121      	str	r1, [r4, #16]
 800a1f8:	07d8      	lsls	r0, r3, #31
 800a1fa:	d5ea      	bpl.n	800a1d2 <_printf_float+0x1a6>
 800a1fc:	1c4b      	adds	r3, r1, #1
 800a1fe:	e7e7      	b.n	800a1d0 <_printf_float+0x1a4>
 800a200:	2900      	cmp	r1, #0
 800a202:	bfd4      	ite	le
 800a204:	f1c1 0202 	rsble	r2, r1, #2
 800a208:	2201      	movgt	r2, #1
 800a20a:	4413      	add	r3, r2
 800a20c:	e7e0      	b.n	800a1d0 <_printf_float+0x1a4>
 800a20e:	6823      	ldr	r3, [r4, #0]
 800a210:	055a      	lsls	r2, r3, #21
 800a212:	d407      	bmi.n	800a224 <_printf_float+0x1f8>
 800a214:	6923      	ldr	r3, [r4, #16]
 800a216:	4642      	mov	r2, r8
 800a218:	4631      	mov	r1, r6
 800a21a:	4628      	mov	r0, r5
 800a21c:	47b8      	blx	r7
 800a21e:	3001      	adds	r0, #1
 800a220:	d12c      	bne.n	800a27c <_printf_float+0x250>
 800a222:	e764      	b.n	800a0ee <_printf_float+0xc2>
 800a224:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a228:	f240 80e0 	bls.w	800a3ec <_printf_float+0x3c0>
 800a22c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a230:	2200      	movs	r2, #0
 800a232:	2300      	movs	r3, #0
 800a234:	f7f6 fc48 	bl	8000ac8 <__aeabi_dcmpeq>
 800a238:	2800      	cmp	r0, #0
 800a23a:	d034      	beq.n	800a2a6 <_printf_float+0x27a>
 800a23c:	4a37      	ldr	r2, [pc, #220]	; (800a31c <_printf_float+0x2f0>)
 800a23e:	2301      	movs	r3, #1
 800a240:	4631      	mov	r1, r6
 800a242:	4628      	mov	r0, r5
 800a244:	47b8      	blx	r7
 800a246:	3001      	adds	r0, #1
 800a248:	f43f af51 	beq.w	800a0ee <_printf_float+0xc2>
 800a24c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a250:	429a      	cmp	r2, r3
 800a252:	db02      	blt.n	800a25a <_printf_float+0x22e>
 800a254:	6823      	ldr	r3, [r4, #0]
 800a256:	07d8      	lsls	r0, r3, #31
 800a258:	d510      	bpl.n	800a27c <_printf_float+0x250>
 800a25a:	ee18 3a10 	vmov	r3, s16
 800a25e:	4652      	mov	r2, sl
 800a260:	4631      	mov	r1, r6
 800a262:	4628      	mov	r0, r5
 800a264:	47b8      	blx	r7
 800a266:	3001      	adds	r0, #1
 800a268:	f43f af41 	beq.w	800a0ee <_printf_float+0xc2>
 800a26c:	f04f 0800 	mov.w	r8, #0
 800a270:	f104 091a 	add.w	r9, r4, #26
 800a274:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a276:	3b01      	subs	r3, #1
 800a278:	4543      	cmp	r3, r8
 800a27a:	dc09      	bgt.n	800a290 <_printf_float+0x264>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	079b      	lsls	r3, r3, #30
 800a280:	f100 8105 	bmi.w	800a48e <_printf_float+0x462>
 800a284:	68e0      	ldr	r0, [r4, #12]
 800a286:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a288:	4298      	cmp	r0, r3
 800a28a:	bfb8      	it	lt
 800a28c:	4618      	movlt	r0, r3
 800a28e:	e730      	b.n	800a0f2 <_printf_float+0xc6>
 800a290:	2301      	movs	r3, #1
 800a292:	464a      	mov	r2, r9
 800a294:	4631      	mov	r1, r6
 800a296:	4628      	mov	r0, r5
 800a298:	47b8      	blx	r7
 800a29a:	3001      	adds	r0, #1
 800a29c:	f43f af27 	beq.w	800a0ee <_printf_float+0xc2>
 800a2a0:	f108 0801 	add.w	r8, r8, #1
 800a2a4:	e7e6      	b.n	800a274 <_printf_float+0x248>
 800a2a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2a8:	2b00      	cmp	r3, #0
 800a2aa:	dc39      	bgt.n	800a320 <_printf_float+0x2f4>
 800a2ac:	4a1b      	ldr	r2, [pc, #108]	; (800a31c <_printf_float+0x2f0>)
 800a2ae:	2301      	movs	r3, #1
 800a2b0:	4631      	mov	r1, r6
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b8      	blx	r7
 800a2b6:	3001      	adds	r0, #1
 800a2b8:	f43f af19 	beq.w	800a0ee <_printf_float+0xc2>
 800a2bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2c0:	4313      	orrs	r3, r2
 800a2c2:	d102      	bne.n	800a2ca <_printf_float+0x29e>
 800a2c4:	6823      	ldr	r3, [r4, #0]
 800a2c6:	07d9      	lsls	r1, r3, #31
 800a2c8:	d5d8      	bpl.n	800a27c <_printf_float+0x250>
 800a2ca:	ee18 3a10 	vmov	r3, s16
 800a2ce:	4652      	mov	r2, sl
 800a2d0:	4631      	mov	r1, r6
 800a2d2:	4628      	mov	r0, r5
 800a2d4:	47b8      	blx	r7
 800a2d6:	3001      	adds	r0, #1
 800a2d8:	f43f af09 	beq.w	800a0ee <_printf_float+0xc2>
 800a2dc:	f04f 0900 	mov.w	r9, #0
 800a2e0:	f104 0a1a 	add.w	sl, r4, #26
 800a2e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a2e6:	425b      	negs	r3, r3
 800a2e8:	454b      	cmp	r3, r9
 800a2ea:	dc01      	bgt.n	800a2f0 <_printf_float+0x2c4>
 800a2ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2ee:	e792      	b.n	800a216 <_printf_float+0x1ea>
 800a2f0:	2301      	movs	r3, #1
 800a2f2:	4652      	mov	r2, sl
 800a2f4:	4631      	mov	r1, r6
 800a2f6:	4628      	mov	r0, r5
 800a2f8:	47b8      	blx	r7
 800a2fa:	3001      	adds	r0, #1
 800a2fc:	f43f aef7 	beq.w	800a0ee <_printf_float+0xc2>
 800a300:	f109 0901 	add.w	r9, r9, #1
 800a304:	e7ee      	b.n	800a2e4 <_printf_float+0x2b8>
 800a306:	bf00      	nop
 800a308:	7fefffff 	.word	0x7fefffff
 800a30c:	0800f904 	.word	0x0800f904
 800a310:	0800f908 	.word	0x0800f908
 800a314:	0800f910 	.word	0x0800f910
 800a318:	0800f90c 	.word	0x0800f90c
 800a31c:	0800f914 	.word	0x0800f914
 800a320:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a322:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a324:	429a      	cmp	r2, r3
 800a326:	bfa8      	it	ge
 800a328:	461a      	movge	r2, r3
 800a32a:	2a00      	cmp	r2, #0
 800a32c:	4691      	mov	r9, r2
 800a32e:	dc37      	bgt.n	800a3a0 <_printf_float+0x374>
 800a330:	f04f 0b00 	mov.w	fp, #0
 800a334:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a338:	f104 021a 	add.w	r2, r4, #26
 800a33c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a33e:	9305      	str	r3, [sp, #20]
 800a340:	eba3 0309 	sub.w	r3, r3, r9
 800a344:	455b      	cmp	r3, fp
 800a346:	dc33      	bgt.n	800a3b0 <_printf_float+0x384>
 800a348:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a34c:	429a      	cmp	r2, r3
 800a34e:	db3b      	blt.n	800a3c8 <_printf_float+0x39c>
 800a350:	6823      	ldr	r3, [r4, #0]
 800a352:	07da      	lsls	r2, r3, #31
 800a354:	d438      	bmi.n	800a3c8 <_printf_float+0x39c>
 800a356:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a358:	9a05      	ldr	r2, [sp, #20]
 800a35a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a35c:	1a9a      	subs	r2, r3, r2
 800a35e:	eba3 0901 	sub.w	r9, r3, r1
 800a362:	4591      	cmp	r9, r2
 800a364:	bfa8      	it	ge
 800a366:	4691      	movge	r9, r2
 800a368:	f1b9 0f00 	cmp.w	r9, #0
 800a36c:	dc35      	bgt.n	800a3da <_printf_float+0x3ae>
 800a36e:	f04f 0800 	mov.w	r8, #0
 800a372:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a376:	f104 0a1a 	add.w	sl, r4, #26
 800a37a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a37e:	1a9b      	subs	r3, r3, r2
 800a380:	eba3 0309 	sub.w	r3, r3, r9
 800a384:	4543      	cmp	r3, r8
 800a386:	f77f af79 	ble.w	800a27c <_printf_float+0x250>
 800a38a:	2301      	movs	r3, #1
 800a38c:	4652      	mov	r2, sl
 800a38e:	4631      	mov	r1, r6
 800a390:	4628      	mov	r0, r5
 800a392:	47b8      	blx	r7
 800a394:	3001      	adds	r0, #1
 800a396:	f43f aeaa 	beq.w	800a0ee <_printf_float+0xc2>
 800a39a:	f108 0801 	add.w	r8, r8, #1
 800a39e:	e7ec      	b.n	800a37a <_printf_float+0x34e>
 800a3a0:	4613      	mov	r3, r2
 800a3a2:	4631      	mov	r1, r6
 800a3a4:	4642      	mov	r2, r8
 800a3a6:	4628      	mov	r0, r5
 800a3a8:	47b8      	blx	r7
 800a3aa:	3001      	adds	r0, #1
 800a3ac:	d1c0      	bne.n	800a330 <_printf_float+0x304>
 800a3ae:	e69e      	b.n	800a0ee <_printf_float+0xc2>
 800a3b0:	2301      	movs	r3, #1
 800a3b2:	4631      	mov	r1, r6
 800a3b4:	4628      	mov	r0, r5
 800a3b6:	9205      	str	r2, [sp, #20]
 800a3b8:	47b8      	blx	r7
 800a3ba:	3001      	adds	r0, #1
 800a3bc:	f43f ae97 	beq.w	800a0ee <_printf_float+0xc2>
 800a3c0:	9a05      	ldr	r2, [sp, #20]
 800a3c2:	f10b 0b01 	add.w	fp, fp, #1
 800a3c6:	e7b9      	b.n	800a33c <_printf_float+0x310>
 800a3c8:	ee18 3a10 	vmov	r3, s16
 800a3cc:	4652      	mov	r2, sl
 800a3ce:	4631      	mov	r1, r6
 800a3d0:	4628      	mov	r0, r5
 800a3d2:	47b8      	blx	r7
 800a3d4:	3001      	adds	r0, #1
 800a3d6:	d1be      	bne.n	800a356 <_printf_float+0x32a>
 800a3d8:	e689      	b.n	800a0ee <_printf_float+0xc2>
 800a3da:	9a05      	ldr	r2, [sp, #20]
 800a3dc:	464b      	mov	r3, r9
 800a3de:	4442      	add	r2, r8
 800a3e0:	4631      	mov	r1, r6
 800a3e2:	4628      	mov	r0, r5
 800a3e4:	47b8      	blx	r7
 800a3e6:	3001      	adds	r0, #1
 800a3e8:	d1c1      	bne.n	800a36e <_printf_float+0x342>
 800a3ea:	e680      	b.n	800a0ee <_printf_float+0xc2>
 800a3ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3ee:	2a01      	cmp	r2, #1
 800a3f0:	dc01      	bgt.n	800a3f6 <_printf_float+0x3ca>
 800a3f2:	07db      	lsls	r3, r3, #31
 800a3f4:	d538      	bpl.n	800a468 <_printf_float+0x43c>
 800a3f6:	2301      	movs	r3, #1
 800a3f8:	4642      	mov	r2, r8
 800a3fa:	4631      	mov	r1, r6
 800a3fc:	4628      	mov	r0, r5
 800a3fe:	47b8      	blx	r7
 800a400:	3001      	adds	r0, #1
 800a402:	f43f ae74 	beq.w	800a0ee <_printf_float+0xc2>
 800a406:	ee18 3a10 	vmov	r3, s16
 800a40a:	4652      	mov	r2, sl
 800a40c:	4631      	mov	r1, r6
 800a40e:	4628      	mov	r0, r5
 800a410:	47b8      	blx	r7
 800a412:	3001      	adds	r0, #1
 800a414:	f43f ae6b 	beq.w	800a0ee <_printf_float+0xc2>
 800a418:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a41c:	2200      	movs	r2, #0
 800a41e:	2300      	movs	r3, #0
 800a420:	f7f6 fb52 	bl	8000ac8 <__aeabi_dcmpeq>
 800a424:	b9d8      	cbnz	r0, 800a45e <_printf_float+0x432>
 800a426:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a428:	f108 0201 	add.w	r2, r8, #1
 800a42c:	3b01      	subs	r3, #1
 800a42e:	4631      	mov	r1, r6
 800a430:	4628      	mov	r0, r5
 800a432:	47b8      	blx	r7
 800a434:	3001      	adds	r0, #1
 800a436:	d10e      	bne.n	800a456 <_printf_float+0x42a>
 800a438:	e659      	b.n	800a0ee <_printf_float+0xc2>
 800a43a:	2301      	movs	r3, #1
 800a43c:	4652      	mov	r2, sl
 800a43e:	4631      	mov	r1, r6
 800a440:	4628      	mov	r0, r5
 800a442:	47b8      	blx	r7
 800a444:	3001      	adds	r0, #1
 800a446:	f43f ae52 	beq.w	800a0ee <_printf_float+0xc2>
 800a44a:	f108 0801 	add.w	r8, r8, #1
 800a44e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a450:	3b01      	subs	r3, #1
 800a452:	4543      	cmp	r3, r8
 800a454:	dcf1      	bgt.n	800a43a <_printf_float+0x40e>
 800a456:	464b      	mov	r3, r9
 800a458:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a45c:	e6dc      	b.n	800a218 <_printf_float+0x1ec>
 800a45e:	f04f 0800 	mov.w	r8, #0
 800a462:	f104 0a1a 	add.w	sl, r4, #26
 800a466:	e7f2      	b.n	800a44e <_printf_float+0x422>
 800a468:	2301      	movs	r3, #1
 800a46a:	4642      	mov	r2, r8
 800a46c:	e7df      	b.n	800a42e <_printf_float+0x402>
 800a46e:	2301      	movs	r3, #1
 800a470:	464a      	mov	r2, r9
 800a472:	4631      	mov	r1, r6
 800a474:	4628      	mov	r0, r5
 800a476:	47b8      	blx	r7
 800a478:	3001      	adds	r0, #1
 800a47a:	f43f ae38 	beq.w	800a0ee <_printf_float+0xc2>
 800a47e:	f108 0801 	add.w	r8, r8, #1
 800a482:	68e3      	ldr	r3, [r4, #12]
 800a484:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a486:	1a5b      	subs	r3, r3, r1
 800a488:	4543      	cmp	r3, r8
 800a48a:	dcf0      	bgt.n	800a46e <_printf_float+0x442>
 800a48c:	e6fa      	b.n	800a284 <_printf_float+0x258>
 800a48e:	f04f 0800 	mov.w	r8, #0
 800a492:	f104 0919 	add.w	r9, r4, #25
 800a496:	e7f4      	b.n	800a482 <_printf_float+0x456>

0800a498 <_printf_common>:
 800a498:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a49c:	4616      	mov	r6, r2
 800a49e:	4699      	mov	r9, r3
 800a4a0:	688a      	ldr	r2, [r1, #8]
 800a4a2:	690b      	ldr	r3, [r1, #16]
 800a4a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a4a8:	4293      	cmp	r3, r2
 800a4aa:	bfb8      	it	lt
 800a4ac:	4613      	movlt	r3, r2
 800a4ae:	6033      	str	r3, [r6, #0]
 800a4b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a4b4:	4607      	mov	r7, r0
 800a4b6:	460c      	mov	r4, r1
 800a4b8:	b10a      	cbz	r2, 800a4be <_printf_common+0x26>
 800a4ba:	3301      	adds	r3, #1
 800a4bc:	6033      	str	r3, [r6, #0]
 800a4be:	6823      	ldr	r3, [r4, #0]
 800a4c0:	0699      	lsls	r1, r3, #26
 800a4c2:	bf42      	ittt	mi
 800a4c4:	6833      	ldrmi	r3, [r6, #0]
 800a4c6:	3302      	addmi	r3, #2
 800a4c8:	6033      	strmi	r3, [r6, #0]
 800a4ca:	6825      	ldr	r5, [r4, #0]
 800a4cc:	f015 0506 	ands.w	r5, r5, #6
 800a4d0:	d106      	bne.n	800a4e0 <_printf_common+0x48>
 800a4d2:	f104 0a19 	add.w	sl, r4, #25
 800a4d6:	68e3      	ldr	r3, [r4, #12]
 800a4d8:	6832      	ldr	r2, [r6, #0]
 800a4da:	1a9b      	subs	r3, r3, r2
 800a4dc:	42ab      	cmp	r3, r5
 800a4de:	dc26      	bgt.n	800a52e <_printf_common+0x96>
 800a4e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a4e4:	1e13      	subs	r3, r2, #0
 800a4e6:	6822      	ldr	r2, [r4, #0]
 800a4e8:	bf18      	it	ne
 800a4ea:	2301      	movne	r3, #1
 800a4ec:	0692      	lsls	r2, r2, #26
 800a4ee:	d42b      	bmi.n	800a548 <_printf_common+0xb0>
 800a4f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a4f4:	4649      	mov	r1, r9
 800a4f6:	4638      	mov	r0, r7
 800a4f8:	47c0      	blx	r8
 800a4fa:	3001      	adds	r0, #1
 800a4fc:	d01e      	beq.n	800a53c <_printf_common+0xa4>
 800a4fe:	6823      	ldr	r3, [r4, #0]
 800a500:	68e5      	ldr	r5, [r4, #12]
 800a502:	6832      	ldr	r2, [r6, #0]
 800a504:	f003 0306 	and.w	r3, r3, #6
 800a508:	2b04      	cmp	r3, #4
 800a50a:	bf08      	it	eq
 800a50c:	1aad      	subeq	r5, r5, r2
 800a50e:	68a3      	ldr	r3, [r4, #8]
 800a510:	6922      	ldr	r2, [r4, #16]
 800a512:	bf0c      	ite	eq
 800a514:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a518:	2500      	movne	r5, #0
 800a51a:	4293      	cmp	r3, r2
 800a51c:	bfc4      	itt	gt
 800a51e:	1a9b      	subgt	r3, r3, r2
 800a520:	18ed      	addgt	r5, r5, r3
 800a522:	2600      	movs	r6, #0
 800a524:	341a      	adds	r4, #26
 800a526:	42b5      	cmp	r5, r6
 800a528:	d11a      	bne.n	800a560 <_printf_common+0xc8>
 800a52a:	2000      	movs	r0, #0
 800a52c:	e008      	b.n	800a540 <_printf_common+0xa8>
 800a52e:	2301      	movs	r3, #1
 800a530:	4652      	mov	r2, sl
 800a532:	4649      	mov	r1, r9
 800a534:	4638      	mov	r0, r7
 800a536:	47c0      	blx	r8
 800a538:	3001      	adds	r0, #1
 800a53a:	d103      	bne.n	800a544 <_printf_common+0xac>
 800a53c:	f04f 30ff 	mov.w	r0, #4294967295
 800a540:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a544:	3501      	adds	r5, #1
 800a546:	e7c6      	b.n	800a4d6 <_printf_common+0x3e>
 800a548:	18e1      	adds	r1, r4, r3
 800a54a:	1c5a      	adds	r2, r3, #1
 800a54c:	2030      	movs	r0, #48	; 0x30
 800a54e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a552:	4422      	add	r2, r4
 800a554:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a558:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a55c:	3302      	adds	r3, #2
 800a55e:	e7c7      	b.n	800a4f0 <_printf_common+0x58>
 800a560:	2301      	movs	r3, #1
 800a562:	4622      	mov	r2, r4
 800a564:	4649      	mov	r1, r9
 800a566:	4638      	mov	r0, r7
 800a568:	47c0      	blx	r8
 800a56a:	3001      	adds	r0, #1
 800a56c:	d0e6      	beq.n	800a53c <_printf_common+0xa4>
 800a56e:	3601      	adds	r6, #1
 800a570:	e7d9      	b.n	800a526 <_printf_common+0x8e>
	...

0800a574 <_printf_i>:
 800a574:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a578:	7e0f      	ldrb	r7, [r1, #24]
 800a57a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a57c:	2f78      	cmp	r7, #120	; 0x78
 800a57e:	4691      	mov	r9, r2
 800a580:	4680      	mov	r8, r0
 800a582:	460c      	mov	r4, r1
 800a584:	469a      	mov	sl, r3
 800a586:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a58a:	d807      	bhi.n	800a59c <_printf_i+0x28>
 800a58c:	2f62      	cmp	r7, #98	; 0x62
 800a58e:	d80a      	bhi.n	800a5a6 <_printf_i+0x32>
 800a590:	2f00      	cmp	r7, #0
 800a592:	f000 80d8 	beq.w	800a746 <_printf_i+0x1d2>
 800a596:	2f58      	cmp	r7, #88	; 0x58
 800a598:	f000 80a3 	beq.w	800a6e2 <_printf_i+0x16e>
 800a59c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a5a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a5a4:	e03a      	b.n	800a61c <_printf_i+0xa8>
 800a5a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a5aa:	2b15      	cmp	r3, #21
 800a5ac:	d8f6      	bhi.n	800a59c <_printf_i+0x28>
 800a5ae:	a101      	add	r1, pc, #4	; (adr r1, 800a5b4 <_printf_i+0x40>)
 800a5b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a5b4:	0800a60d 	.word	0x0800a60d
 800a5b8:	0800a621 	.word	0x0800a621
 800a5bc:	0800a59d 	.word	0x0800a59d
 800a5c0:	0800a59d 	.word	0x0800a59d
 800a5c4:	0800a59d 	.word	0x0800a59d
 800a5c8:	0800a59d 	.word	0x0800a59d
 800a5cc:	0800a621 	.word	0x0800a621
 800a5d0:	0800a59d 	.word	0x0800a59d
 800a5d4:	0800a59d 	.word	0x0800a59d
 800a5d8:	0800a59d 	.word	0x0800a59d
 800a5dc:	0800a59d 	.word	0x0800a59d
 800a5e0:	0800a72d 	.word	0x0800a72d
 800a5e4:	0800a651 	.word	0x0800a651
 800a5e8:	0800a70f 	.word	0x0800a70f
 800a5ec:	0800a59d 	.word	0x0800a59d
 800a5f0:	0800a59d 	.word	0x0800a59d
 800a5f4:	0800a74f 	.word	0x0800a74f
 800a5f8:	0800a59d 	.word	0x0800a59d
 800a5fc:	0800a651 	.word	0x0800a651
 800a600:	0800a59d 	.word	0x0800a59d
 800a604:	0800a59d 	.word	0x0800a59d
 800a608:	0800a717 	.word	0x0800a717
 800a60c:	682b      	ldr	r3, [r5, #0]
 800a60e:	1d1a      	adds	r2, r3, #4
 800a610:	681b      	ldr	r3, [r3, #0]
 800a612:	602a      	str	r2, [r5, #0]
 800a614:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a618:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a61c:	2301      	movs	r3, #1
 800a61e:	e0a3      	b.n	800a768 <_printf_i+0x1f4>
 800a620:	6820      	ldr	r0, [r4, #0]
 800a622:	6829      	ldr	r1, [r5, #0]
 800a624:	0606      	lsls	r6, r0, #24
 800a626:	f101 0304 	add.w	r3, r1, #4
 800a62a:	d50a      	bpl.n	800a642 <_printf_i+0xce>
 800a62c:	680e      	ldr	r6, [r1, #0]
 800a62e:	602b      	str	r3, [r5, #0]
 800a630:	2e00      	cmp	r6, #0
 800a632:	da03      	bge.n	800a63c <_printf_i+0xc8>
 800a634:	232d      	movs	r3, #45	; 0x2d
 800a636:	4276      	negs	r6, r6
 800a638:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a63c:	485e      	ldr	r0, [pc, #376]	; (800a7b8 <_printf_i+0x244>)
 800a63e:	230a      	movs	r3, #10
 800a640:	e019      	b.n	800a676 <_printf_i+0x102>
 800a642:	680e      	ldr	r6, [r1, #0]
 800a644:	602b      	str	r3, [r5, #0]
 800a646:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a64a:	bf18      	it	ne
 800a64c:	b236      	sxthne	r6, r6
 800a64e:	e7ef      	b.n	800a630 <_printf_i+0xbc>
 800a650:	682b      	ldr	r3, [r5, #0]
 800a652:	6820      	ldr	r0, [r4, #0]
 800a654:	1d19      	adds	r1, r3, #4
 800a656:	6029      	str	r1, [r5, #0]
 800a658:	0601      	lsls	r1, r0, #24
 800a65a:	d501      	bpl.n	800a660 <_printf_i+0xec>
 800a65c:	681e      	ldr	r6, [r3, #0]
 800a65e:	e002      	b.n	800a666 <_printf_i+0xf2>
 800a660:	0646      	lsls	r6, r0, #25
 800a662:	d5fb      	bpl.n	800a65c <_printf_i+0xe8>
 800a664:	881e      	ldrh	r6, [r3, #0]
 800a666:	4854      	ldr	r0, [pc, #336]	; (800a7b8 <_printf_i+0x244>)
 800a668:	2f6f      	cmp	r7, #111	; 0x6f
 800a66a:	bf0c      	ite	eq
 800a66c:	2308      	moveq	r3, #8
 800a66e:	230a      	movne	r3, #10
 800a670:	2100      	movs	r1, #0
 800a672:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a676:	6865      	ldr	r5, [r4, #4]
 800a678:	60a5      	str	r5, [r4, #8]
 800a67a:	2d00      	cmp	r5, #0
 800a67c:	bfa2      	ittt	ge
 800a67e:	6821      	ldrge	r1, [r4, #0]
 800a680:	f021 0104 	bicge.w	r1, r1, #4
 800a684:	6021      	strge	r1, [r4, #0]
 800a686:	b90e      	cbnz	r6, 800a68c <_printf_i+0x118>
 800a688:	2d00      	cmp	r5, #0
 800a68a:	d04d      	beq.n	800a728 <_printf_i+0x1b4>
 800a68c:	4615      	mov	r5, r2
 800a68e:	fbb6 f1f3 	udiv	r1, r6, r3
 800a692:	fb03 6711 	mls	r7, r3, r1, r6
 800a696:	5dc7      	ldrb	r7, [r0, r7]
 800a698:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a69c:	4637      	mov	r7, r6
 800a69e:	42bb      	cmp	r3, r7
 800a6a0:	460e      	mov	r6, r1
 800a6a2:	d9f4      	bls.n	800a68e <_printf_i+0x11a>
 800a6a4:	2b08      	cmp	r3, #8
 800a6a6:	d10b      	bne.n	800a6c0 <_printf_i+0x14c>
 800a6a8:	6823      	ldr	r3, [r4, #0]
 800a6aa:	07de      	lsls	r6, r3, #31
 800a6ac:	d508      	bpl.n	800a6c0 <_printf_i+0x14c>
 800a6ae:	6923      	ldr	r3, [r4, #16]
 800a6b0:	6861      	ldr	r1, [r4, #4]
 800a6b2:	4299      	cmp	r1, r3
 800a6b4:	bfde      	ittt	le
 800a6b6:	2330      	movle	r3, #48	; 0x30
 800a6b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a6bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a6c0:	1b52      	subs	r2, r2, r5
 800a6c2:	6122      	str	r2, [r4, #16]
 800a6c4:	f8cd a000 	str.w	sl, [sp]
 800a6c8:	464b      	mov	r3, r9
 800a6ca:	aa03      	add	r2, sp, #12
 800a6cc:	4621      	mov	r1, r4
 800a6ce:	4640      	mov	r0, r8
 800a6d0:	f7ff fee2 	bl	800a498 <_printf_common>
 800a6d4:	3001      	adds	r0, #1
 800a6d6:	d14c      	bne.n	800a772 <_printf_i+0x1fe>
 800a6d8:	f04f 30ff 	mov.w	r0, #4294967295
 800a6dc:	b004      	add	sp, #16
 800a6de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a6e2:	4835      	ldr	r0, [pc, #212]	; (800a7b8 <_printf_i+0x244>)
 800a6e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a6e8:	6829      	ldr	r1, [r5, #0]
 800a6ea:	6823      	ldr	r3, [r4, #0]
 800a6ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800a6f0:	6029      	str	r1, [r5, #0]
 800a6f2:	061d      	lsls	r5, r3, #24
 800a6f4:	d514      	bpl.n	800a720 <_printf_i+0x1ac>
 800a6f6:	07df      	lsls	r7, r3, #31
 800a6f8:	bf44      	itt	mi
 800a6fa:	f043 0320 	orrmi.w	r3, r3, #32
 800a6fe:	6023      	strmi	r3, [r4, #0]
 800a700:	b91e      	cbnz	r6, 800a70a <_printf_i+0x196>
 800a702:	6823      	ldr	r3, [r4, #0]
 800a704:	f023 0320 	bic.w	r3, r3, #32
 800a708:	6023      	str	r3, [r4, #0]
 800a70a:	2310      	movs	r3, #16
 800a70c:	e7b0      	b.n	800a670 <_printf_i+0xfc>
 800a70e:	6823      	ldr	r3, [r4, #0]
 800a710:	f043 0320 	orr.w	r3, r3, #32
 800a714:	6023      	str	r3, [r4, #0]
 800a716:	2378      	movs	r3, #120	; 0x78
 800a718:	4828      	ldr	r0, [pc, #160]	; (800a7bc <_printf_i+0x248>)
 800a71a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a71e:	e7e3      	b.n	800a6e8 <_printf_i+0x174>
 800a720:	0659      	lsls	r1, r3, #25
 800a722:	bf48      	it	mi
 800a724:	b2b6      	uxthmi	r6, r6
 800a726:	e7e6      	b.n	800a6f6 <_printf_i+0x182>
 800a728:	4615      	mov	r5, r2
 800a72a:	e7bb      	b.n	800a6a4 <_printf_i+0x130>
 800a72c:	682b      	ldr	r3, [r5, #0]
 800a72e:	6826      	ldr	r6, [r4, #0]
 800a730:	6961      	ldr	r1, [r4, #20]
 800a732:	1d18      	adds	r0, r3, #4
 800a734:	6028      	str	r0, [r5, #0]
 800a736:	0635      	lsls	r5, r6, #24
 800a738:	681b      	ldr	r3, [r3, #0]
 800a73a:	d501      	bpl.n	800a740 <_printf_i+0x1cc>
 800a73c:	6019      	str	r1, [r3, #0]
 800a73e:	e002      	b.n	800a746 <_printf_i+0x1d2>
 800a740:	0670      	lsls	r0, r6, #25
 800a742:	d5fb      	bpl.n	800a73c <_printf_i+0x1c8>
 800a744:	8019      	strh	r1, [r3, #0]
 800a746:	2300      	movs	r3, #0
 800a748:	6123      	str	r3, [r4, #16]
 800a74a:	4615      	mov	r5, r2
 800a74c:	e7ba      	b.n	800a6c4 <_printf_i+0x150>
 800a74e:	682b      	ldr	r3, [r5, #0]
 800a750:	1d1a      	adds	r2, r3, #4
 800a752:	602a      	str	r2, [r5, #0]
 800a754:	681d      	ldr	r5, [r3, #0]
 800a756:	6862      	ldr	r2, [r4, #4]
 800a758:	2100      	movs	r1, #0
 800a75a:	4628      	mov	r0, r5
 800a75c:	f7f5 fd40 	bl	80001e0 <memchr>
 800a760:	b108      	cbz	r0, 800a766 <_printf_i+0x1f2>
 800a762:	1b40      	subs	r0, r0, r5
 800a764:	6060      	str	r0, [r4, #4]
 800a766:	6863      	ldr	r3, [r4, #4]
 800a768:	6123      	str	r3, [r4, #16]
 800a76a:	2300      	movs	r3, #0
 800a76c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a770:	e7a8      	b.n	800a6c4 <_printf_i+0x150>
 800a772:	6923      	ldr	r3, [r4, #16]
 800a774:	462a      	mov	r2, r5
 800a776:	4649      	mov	r1, r9
 800a778:	4640      	mov	r0, r8
 800a77a:	47d0      	blx	sl
 800a77c:	3001      	adds	r0, #1
 800a77e:	d0ab      	beq.n	800a6d8 <_printf_i+0x164>
 800a780:	6823      	ldr	r3, [r4, #0]
 800a782:	079b      	lsls	r3, r3, #30
 800a784:	d413      	bmi.n	800a7ae <_printf_i+0x23a>
 800a786:	68e0      	ldr	r0, [r4, #12]
 800a788:	9b03      	ldr	r3, [sp, #12]
 800a78a:	4298      	cmp	r0, r3
 800a78c:	bfb8      	it	lt
 800a78e:	4618      	movlt	r0, r3
 800a790:	e7a4      	b.n	800a6dc <_printf_i+0x168>
 800a792:	2301      	movs	r3, #1
 800a794:	4632      	mov	r2, r6
 800a796:	4649      	mov	r1, r9
 800a798:	4640      	mov	r0, r8
 800a79a:	47d0      	blx	sl
 800a79c:	3001      	adds	r0, #1
 800a79e:	d09b      	beq.n	800a6d8 <_printf_i+0x164>
 800a7a0:	3501      	adds	r5, #1
 800a7a2:	68e3      	ldr	r3, [r4, #12]
 800a7a4:	9903      	ldr	r1, [sp, #12]
 800a7a6:	1a5b      	subs	r3, r3, r1
 800a7a8:	42ab      	cmp	r3, r5
 800a7aa:	dcf2      	bgt.n	800a792 <_printf_i+0x21e>
 800a7ac:	e7eb      	b.n	800a786 <_printf_i+0x212>
 800a7ae:	2500      	movs	r5, #0
 800a7b0:	f104 0619 	add.w	r6, r4, #25
 800a7b4:	e7f5      	b.n	800a7a2 <_printf_i+0x22e>
 800a7b6:	bf00      	nop
 800a7b8:	0800f916 	.word	0x0800f916
 800a7bc:	0800f927 	.word	0x0800f927

0800a7c0 <_scanf_float>:
 800a7c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a7c4:	b087      	sub	sp, #28
 800a7c6:	4617      	mov	r7, r2
 800a7c8:	9303      	str	r3, [sp, #12]
 800a7ca:	688b      	ldr	r3, [r1, #8]
 800a7cc:	1e5a      	subs	r2, r3, #1
 800a7ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a7d2:	bf83      	ittte	hi
 800a7d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a7d8:	195b      	addhi	r3, r3, r5
 800a7da:	9302      	strhi	r3, [sp, #8]
 800a7dc:	2300      	movls	r3, #0
 800a7de:	bf86      	itte	hi
 800a7e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a7e4:	608b      	strhi	r3, [r1, #8]
 800a7e6:	9302      	strls	r3, [sp, #8]
 800a7e8:	680b      	ldr	r3, [r1, #0]
 800a7ea:	468b      	mov	fp, r1
 800a7ec:	2500      	movs	r5, #0
 800a7ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a7f2:	f84b 3b1c 	str.w	r3, [fp], #28
 800a7f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a7fa:	4680      	mov	r8, r0
 800a7fc:	460c      	mov	r4, r1
 800a7fe:	465e      	mov	r6, fp
 800a800:	46aa      	mov	sl, r5
 800a802:	46a9      	mov	r9, r5
 800a804:	9501      	str	r5, [sp, #4]
 800a806:	68a2      	ldr	r2, [r4, #8]
 800a808:	b152      	cbz	r2, 800a820 <_scanf_float+0x60>
 800a80a:	683b      	ldr	r3, [r7, #0]
 800a80c:	781b      	ldrb	r3, [r3, #0]
 800a80e:	2b4e      	cmp	r3, #78	; 0x4e
 800a810:	d864      	bhi.n	800a8dc <_scanf_float+0x11c>
 800a812:	2b40      	cmp	r3, #64	; 0x40
 800a814:	d83c      	bhi.n	800a890 <_scanf_float+0xd0>
 800a816:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a81a:	b2c8      	uxtb	r0, r1
 800a81c:	280e      	cmp	r0, #14
 800a81e:	d93a      	bls.n	800a896 <_scanf_float+0xd6>
 800a820:	f1b9 0f00 	cmp.w	r9, #0
 800a824:	d003      	beq.n	800a82e <_scanf_float+0x6e>
 800a826:	6823      	ldr	r3, [r4, #0]
 800a828:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a82c:	6023      	str	r3, [r4, #0]
 800a82e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a832:	f1ba 0f01 	cmp.w	sl, #1
 800a836:	f200 8113 	bhi.w	800aa60 <_scanf_float+0x2a0>
 800a83a:	455e      	cmp	r6, fp
 800a83c:	f200 8105 	bhi.w	800aa4a <_scanf_float+0x28a>
 800a840:	2501      	movs	r5, #1
 800a842:	4628      	mov	r0, r5
 800a844:	b007      	add	sp, #28
 800a846:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a84a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a84e:	2a0d      	cmp	r2, #13
 800a850:	d8e6      	bhi.n	800a820 <_scanf_float+0x60>
 800a852:	a101      	add	r1, pc, #4	; (adr r1, 800a858 <_scanf_float+0x98>)
 800a854:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a858:	0800a997 	.word	0x0800a997
 800a85c:	0800a821 	.word	0x0800a821
 800a860:	0800a821 	.word	0x0800a821
 800a864:	0800a821 	.word	0x0800a821
 800a868:	0800a9f7 	.word	0x0800a9f7
 800a86c:	0800a9cf 	.word	0x0800a9cf
 800a870:	0800a821 	.word	0x0800a821
 800a874:	0800a821 	.word	0x0800a821
 800a878:	0800a9a5 	.word	0x0800a9a5
 800a87c:	0800a821 	.word	0x0800a821
 800a880:	0800a821 	.word	0x0800a821
 800a884:	0800a821 	.word	0x0800a821
 800a888:	0800a821 	.word	0x0800a821
 800a88c:	0800a95d 	.word	0x0800a95d
 800a890:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a894:	e7db      	b.n	800a84e <_scanf_float+0x8e>
 800a896:	290e      	cmp	r1, #14
 800a898:	d8c2      	bhi.n	800a820 <_scanf_float+0x60>
 800a89a:	a001      	add	r0, pc, #4	; (adr r0, 800a8a0 <_scanf_float+0xe0>)
 800a89c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a8a0:	0800a94f 	.word	0x0800a94f
 800a8a4:	0800a821 	.word	0x0800a821
 800a8a8:	0800a94f 	.word	0x0800a94f
 800a8ac:	0800a9e3 	.word	0x0800a9e3
 800a8b0:	0800a821 	.word	0x0800a821
 800a8b4:	0800a8fd 	.word	0x0800a8fd
 800a8b8:	0800a939 	.word	0x0800a939
 800a8bc:	0800a939 	.word	0x0800a939
 800a8c0:	0800a939 	.word	0x0800a939
 800a8c4:	0800a939 	.word	0x0800a939
 800a8c8:	0800a939 	.word	0x0800a939
 800a8cc:	0800a939 	.word	0x0800a939
 800a8d0:	0800a939 	.word	0x0800a939
 800a8d4:	0800a939 	.word	0x0800a939
 800a8d8:	0800a939 	.word	0x0800a939
 800a8dc:	2b6e      	cmp	r3, #110	; 0x6e
 800a8de:	d809      	bhi.n	800a8f4 <_scanf_float+0x134>
 800a8e0:	2b60      	cmp	r3, #96	; 0x60
 800a8e2:	d8b2      	bhi.n	800a84a <_scanf_float+0x8a>
 800a8e4:	2b54      	cmp	r3, #84	; 0x54
 800a8e6:	d077      	beq.n	800a9d8 <_scanf_float+0x218>
 800a8e8:	2b59      	cmp	r3, #89	; 0x59
 800a8ea:	d199      	bne.n	800a820 <_scanf_float+0x60>
 800a8ec:	2d07      	cmp	r5, #7
 800a8ee:	d197      	bne.n	800a820 <_scanf_float+0x60>
 800a8f0:	2508      	movs	r5, #8
 800a8f2:	e029      	b.n	800a948 <_scanf_float+0x188>
 800a8f4:	2b74      	cmp	r3, #116	; 0x74
 800a8f6:	d06f      	beq.n	800a9d8 <_scanf_float+0x218>
 800a8f8:	2b79      	cmp	r3, #121	; 0x79
 800a8fa:	e7f6      	b.n	800a8ea <_scanf_float+0x12a>
 800a8fc:	6821      	ldr	r1, [r4, #0]
 800a8fe:	05c8      	lsls	r0, r1, #23
 800a900:	d51a      	bpl.n	800a938 <_scanf_float+0x178>
 800a902:	9b02      	ldr	r3, [sp, #8]
 800a904:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a908:	6021      	str	r1, [r4, #0]
 800a90a:	f109 0901 	add.w	r9, r9, #1
 800a90e:	b11b      	cbz	r3, 800a918 <_scanf_float+0x158>
 800a910:	3b01      	subs	r3, #1
 800a912:	3201      	adds	r2, #1
 800a914:	9302      	str	r3, [sp, #8]
 800a916:	60a2      	str	r2, [r4, #8]
 800a918:	68a3      	ldr	r3, [r4, #8]
 800a91a:	3b01      	subs	r3, #1
 800a91c:	60a3      	str	r3, [r4, #8]
 800a91e:	6923      	ldr	r3, [r4, #16]
 800a920:	3301      	adds	r3, #1
 800a922:	6123      	str	r3, [r4, #16]
 800a924:	687b      	ldr	r3, [r7, #4]
 800a926:	3b01      	subs	r3, #1
 800a928:	2b00      	cmp	r3, #0
 800a92a:	607b      	str	r3, [r7, #4]
 800a92c:	f340 8084 	ble.w	800aa38 <_scanf_float+0x278>
 800a930:	683b      	ldr	r3, [r7, #0]
 800a932:	3301      	adds	r3, #1
 800a934:	603b      	str	r3, [r7, #0]
 800a936:	e766      	b.n	800a806 <_scanf_float+0x46>
 800a938:	eb1a 0f05 	cmn.w	sl, r5
 800a93c:	f47f af70 	bne.w	800a820 <_scanf_float+0x60>
 800a940:	6822      	ldr	r2, [r4, #0]
 800a942:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a946:	6022      	str	r2, [r4, #0]
 800a948:	f806 3b01 	strb.w	r3, [r6], #1
 800a94c:	e7e4      	b.n	800a918 <_scanf_float+0x158>
 800a94e:	6822      	ldr	r2, [r4, #0]
 800a950:	0610      	lsls	r0, r2, #24
 800a952:	f57f af65 	bpl.w	800a820 <_scanf_float+0x60>
 800a956:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a95a:	e7f4      	b.n	800a946 <_scanf_float+0x186>
 800a95c:	f1ba 0f00 	cmp.w	sl, #0
 800a960:	d10e      	bne.n	800a980 <_scanf_float+0x1c0>
 800a962:	f1b9 0f00 	cmp.w	r9, #0
 800a966:	d10e      	bne.n	800a986 <_scanf_float+0x1c6>
 800a968:	6822      	ldr	r2, [r4, #0]
 800a96a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a96e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a972:	d108      	bne.n	800a986 <_scanf_float+0x1c6>
 800a974:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a978:	6022      	str	r2, [r4, #0]
 800a97a:	f04f 0a01 	mov.w	sl, #1
 800a97e:	e7e3      	b.n	800a948 <_scanf_float+0x188>
 800a980:	f1ba 0f02 	cmp.w	sl, #2
 800a984:	d055      	beq.n	800aa32 <_scanf_float+0x272>
 800a986:	2d01      	cmp	r5, #1
 800a988:	d002      	beq.n	800a990 <_scanf_float+0x1d0>
 800a98a:	2d04      	cmp	r5, #4
 800a98c:	f47f af48 	bne.w	800a820 <_scanf_float+0x60>
 800a990:	3501      	adds	r5, #1
 800a992:	b2ed      	uxtb	r5, r5
 800a994:	e7d8      	b.n	800a948 <_scanf_float+0x188>
 800a996:	f1ba 0f01 	cmp.w	sl, #1
 800a99a:	f47f af41 	bne.w	800a820 <_scanf_float+0x60>
 800a99e:	f04f 0a02 	mov.w	sl, #2
 800a9a2:	e7d1      	b.n	800a948 <_scanf_float+0x188>
 800a9a4:	b97d      	cbnz	r5, 800a9c6 <_scanf_float+0x206>
 800a9a6:	f1b9 0f00 	cmp.w	r9, #0
 800a9aa:	f47f af3c 	bne.w	800a826 <_scanf_float+0x66>
 800a9ae:	6822      	ldr	r2, [r4, #0]
 800a9b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a9b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9b8:	f47f af39 	bne.w	800a82e <_scanf_float+0x6e>
 800a9bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800a9c0:	6022      	str	r2, [r4, #0]
 800a9c2:	2501      	movs	r5, #1
 800a9c4:	e7c0      	b.n	800a948 <_scanf_float+0x188>
 800a9c6:	2d03      	cmp	r5, #3
 800a9c8:	d0e2      	beq.n	800a990 <_scanf_float+0x1d0>
 800a9ca:	2d05      	cmp	r5, #5
 800a9cc:	e7de      	b.n	800a98c <_scanf_float+0x1cc>
 800a9ce:	2d02      	cmp	r5, #2
 800a9d0:	f47f af26 	bne.w	800a820 <_scanf_float+0x60>
 800a9d4:	2503      	movs	r5, #3
 800a9d6:	e7b7      	b.n	800a948 <_scanf_float+0x188>
 800a9d8:	2d06      	cmp	r5, #6
 800a9da:	f47f af21 	bne.w	800a820 <_scanf_float+0x60>
 800a9de:	2507      	movs	r5, #7
 800a9e0:	e7b2      	b.n	800a948 <_scanf_float+0x188>
 800a9e2:	6822      	ldr	r2, [r4, #0]
 800a9e4:	0591      	lsls	r1, r2, #22
 800a9e6:	f57f af1b 	bpl.w	800a820 <_scanf_float+0x60>
 800a9ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800a9ee:	6022      	str	r2, [r4, #0]
 800a9f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800a9f4:	e7a8      	b.n	800a948 <_scanf_float+0x188>
 800a9f6:	6822      	ldr	r2, [r4, #0]
 800a9f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800a9fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aa00:	d006      	beq.n	800aa10 <_scanf_float+0x250>
 800aa02:	0550      	lsls	r0, r2, #21
 800aa04:	f57f af0c 	bpl.w	800a820 <_scanf_float+0x60>
 800aa08:	f1b9 0f00 	cmp.w	r9, #0
 800aa0c:	f43f af0f 	beq.w	800a82e <_scanf_float+0x6e>
 800aa10:	0591      	lsls	r1, r2, #22
 800aa12:	bf58      	it	pl
 800aa14:	9901      	ldrpl	r1, [sp, #4]
 800aa16:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa1a:	bf58      	it	pl
 800aa1c:	eba9 0101 	subpl.w	r1, r9, r1
 800aa20:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aa24:	bf58      	it	pl
 800aa26:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aa2a:	6022      	str	r2, [r4, #0]
 800aa2c:	f04f 0900 	mov.w	r9, #0
 800aa30:	e78a      	b.n	800a948 <_scanf_float+0x188>
 800aa32:	f04f 0a03 	mov.w	sl, #3
 800aa36:	e787      	b.n	800a948 <_scanf_float+0x188>
 800aa38:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aa3c:	4639      	mov	r1, r7
 800aa3e:	4640      	mov	r0, r8
 800aa40:	4798      	blx	r3
 800aa42:	2800      	cmp	r0, #0
 800aa44:	f43f aedf 	beq.w	800a806 <_scanf_float+0x46>
 800aa48:	e6ea      	b.n	800a820 <_scanf_float+0x60>
 800aa4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa52:	463a      	mov	r2, r7
 800aa54:	4640      	mov	r0, r8
 800aa56:	4798      	blx	r3
 800aa58:	6923      	ldr	r3, [r4, #16]
 800aa5a:	3b01      	subs	r3, #1
 800aa5c:	6123      	str	r3, [r4, #16]
 800aa5e:	e6ec      	b.n	800a83a <_scanf_float+0x7a>
 800aa60:	1e6b      	subs	r3, r5, #1
 800aa62:	2b06      	cmp	r3, #6
 800aa64:	d825      	bhi.n	800aab2 <_scanf_float+0x2f2>
 800aa66:	2d02      	cmp	r5, #2
 800aa68:	d836      	bhi.n	800aad8 <_scanf_float+0x318>
 800aa6a:	455e      	cmp	r6, fp
 800aa6c:	f67f aee8 	bls.w	800a840 <_scanf_float+0x80>
 800aa70:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa74:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aa78:	463a      	mov	r2, r7
 800aa7a:	4640      	mov	r0, r8
 800aa7c:	4798      	blx	r3
 800aa7e:	6923      	ldr	r3, [r4, #16]
 800aa80:	3b01      	subs	r3, #1
 800aa82:	6123      	str	r3, [r4, #16]
 800aa84:	e7f1      	b.n	800aa6a <_scanf_float+0x2aa>
 800aa86:	9802      	ldr	r0, [sp, #8]
 800aa88:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aa8c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800aa90:	9002      	str	r0, [sp, #8]
 800aa92:	463a      	mov	r2, r7
 800aa94:	4640      	mov	r0, r8
 800aa96:	4798      	blx	r3
 800aa98:	6923      	ldr	r3, [r4, #16]
 800aa9a:	3b01      	subs	r3, #1
 800aa9c:	6123      	str	r3, [r4, #16]
 800aa9e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800aaa2:	fa5f fa8a 	uxtb.w	sl, sl
 800aaa6:	f1ba 0f02 	cmp.w	sl, #2
 800aaaa:	d1ec      	bne.n	800aa86 <_scanf_float+0x2c6>
 800aaac:	3d03      	subs	r5, #3
 800aaae:	b2ed      	uxtb	r5, r5
 800aab0:	1b76      	subs	r6, r6, r5
 800aab2:	6823      	ldr	r3, [r4, #0]
 800aab4:	05da      	lsls	r2, r3, #23
 800aab6:	d52f      	bpl.n	800ab18 <_scanf_float+0x358>
 800aab8:	055b      	lsls	r3, r3, #21
 800aaba:	d510      	bpl.n	800aade <_scanf_float+0x31e>
 800aabc:	455e      	cmp	r6, fp
 800aabe:	f67f aebf 	bls.w	800a840 <_scanf_float+0x80>
 800aac2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aac6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aaca:	463a      	mov	r2, r7
 800aacc:	4640      	mov	r0, r8
 800aace:	4798      	blx	r3
 800aad0:	6923      	ldr	r3, [r4, #16]
 800aad2:	3b01      	subs	r3, #1
 800aad4:	6123      	str	r3, [r4, #16]
 800aad6:	e7f1      	b.n	800aabc <_scanf_float+0x2fc>
 800aad8:	46aa      	mov	sl, r5
 800aada:	9602      	str	r6, [sp, #8]
 800aadc:	e7df      	b.n	800aa9e <_scanf_float+0x2de>
 800aade:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800aae2:	6923      	ldr	r3, [r4, #16]
 800aae4:	2965      	cmp	r1, #101	; 0x65
 800aae6:	f103 33ff 	add.w	r3, r3, #4294967295
 800aaea:	f106 35ff 	add.w	r5, r6, #4294967295
 800aaee:	6123      	str	r3, [r4, #16]
 800aaf0:	d00c      	beq.n	800ab0c <_scanf_float+0x34c>
 800aaf2:	2945      	cmp	r1, #69	; 0x45
 800aaf4:	d00a      	beq.n	800ab0c <_scanf_float+0x34c>
 800aaf6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aafa:	463a      	mov	r2, r7
 800aafc:	4640      	mov	r0, r8
 800aafe:	4798      	blx	r3
 800ab00:	6923      	ldr	r3, [r4, #16]
 800ab02:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab06:	3b01      	subs	r3, #1
 800ab08:	1eb5      	subs	r5, r6, #2
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab10:	463a      	mov	r2, r7
 800ab12:	4640      	mov	r0, r8
 800ab14:	4798      	blx	r3
 800ab16:	462e      	mov	r6, r5
 800ab18:	6825      	ldr	r5, [r4, #0]
 800ab1a:	f015 0510 	ands.w	r5, r5, #16
 800ab1e:	d159      	bne.n	800abd4 <_scanf_float+0x414>
 800ab20:	7035      	strb	r5, [r6, #0]
 800ab22:	6823      	ldr	r3, [r4, #0]
 800ab24:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800ab28:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800ab2c:	d11b      	bne.n	800ab66 <_scanf_float+0x3a6>
 800ab2e:	9b01      	ldr	r3, [sp, #4]
 800ab30:	454b      	cmp	r3, r9
 800ab32:	eba3 0209 	sub.w	r2, r3, r9
 800ab36:	d123      	bne.n	800ab80 <_scanf_float+0x3c0>
 800ab38:	2200      	movs	r2, #0
 800ab3a:	4659      	mov	r1, fp
 800ab3c:	4640      	mov	r0, r8
 800ab3e:	f000 fe99 	bl	800b874 <_strtod_r>
 800ab42:	6822      	ldr	r2, [r4, #0]
 800ab44:	9b03      	ldr	r3, [sp, #12]
 800ab46:	f012 0f02 	tst.w	r2, #2
 800ab4a:	ec57 6b10 	vmov	r6, r7, d0
 800ab4e:	681b      	ldr	r3, [r3, #0]
 800ab50:	d021      	beq.n	800ab96 <_scanf_float+0x3d6>
 800ab52:	9903      	ldr	r1, [sp, #12]
 800ab54:	1d1a      	adds	r2, r3, #4
 800ab56:	600a      	str	r2, [r1, #0]
 800ab58:	681b      	ldr	r3, [r3, #0]
 800ab5a:	e9c3 6700 	strd	r6, r7, [r3]
 800ab5e:	68e3      	ldr	r3, [r4, #12]
 800ab60:	3301      	adds	r3, #1
 800ab62:	60e3      	str	r3, [r4, #12]
 800ab64:	e66d      	b.n	800a842 <_scanf_float+0x82>
 800ab66:	9b04      	ldr	r3, [sp, #16]
 800ab68:	2b00      	cmp	r3, #0
 800ab6a:	d0e5      	beq.n	800ab38 <_scanf_float+0x378>
 800ab6c:	9905      	ldr	r1, [sp, #20]
 800ab6e:	230a      	movs	r3, #10
 800ab70:	462a      	mov	r2, r5
 800ab72:	3101      	adds	r1, #1
 800ab74:	4640      	mov	r0, r8
 800ab76:	f000 ff6d 	bl	800ba54 <_strtol_r>
 800ab7a:	9b04      	ldr	r3, [sp, #16]
 800ab7c:	9e05      	ldr	r6, [sp, #20]
 800ab7e:	1ac2      	subs	r2, r0, r3
 800ab80:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ab84:	429e      	cmp	r6, r3
 800ab86:	bf28      	it	cs
 800ab88:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ab8c:	4912      	ldr	r1, [pc, #72]	; (800abd8 <_scanf_float+0x418>)
 800ab8e:	4630      	mov	r0, r6
 800ab90:	f000 f82c 	bl	800abec <siprintf>
 800ab94:	e7d0      	b.n	800ab38 <_scanf_float+0x378>
 800ab96:	9903      	ldr	r1, [sp, #12]
 800ab98:	f012 0f04 	tst.w	r2, #4
 800ab9c:	f103 0204 	add.w	r2, r3, #4
 800aba0:	600a      	str	r2, [r1, #0]
 800aba2:	d1d9      	bne.n	800ab58 <_scanf_float+0x398>
 800aba4:	f8d3 8000 	ldr.w	r8, [r3]
 800aba8:	ee10 2a10 	vmov	r2, s0
 800abac:	ee10 0a10 	vmov	r0, s0
 800abb0:	463b      	mov	r3, r7
 800abb2:	4639      	mov	r1, r7
 800abb4:	f7f5 ffba 	bl	8000b2c <__aeabi_dcmpun>
 800abb8:	b128      	cbz	r0, 800abc6 <_scanf_float+0x406>
 800abba:	4808      	ldr	r0, [pc, #32]	; (800abdc <_scanf_float+0x41c>)
 800abbc:	f000 f810 	bl	800abe0 <nanf>
 800abc0:	ed88 0a00 	vstr	s0, [r8]
 800abc4:	e7cb      	b.n	800ab5e <_scanf_float+0x39e>
 800abc6:	4630      	mov	r0, r6
 800abc8:	4639      	mov	r1, r7
 800abca:	f7f6 f80d 	bl	8000be8 <__aeabi_d2f>
 800abce:	f8c8 0000 	str.w	r0, [r8]
 800abd2:	e7c4      	b.n	800ab5e <_scanf_float+0x39e>
 800abd4:	2500      	movs	r5, #0
 800abd6:	e634      	b.n	800a842 <_scanf_float+0x82>
 800abd8:	0800f938 	.word	0x0800f938
 800abdc:	0800fa3f 	.word	0x0800fa3f

0800abe0 <nanf>:
 800abe0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800abe8 <nanf+0x8>
 800abe4:	4770      	bx	lr
 800abe6:	bf00      	nop
 800abe8:	7fc00000 	.word	0x7fc00000

0800abec <siprintf>:
 800abec:	b40e      	push	{r1, r2, r3}
 800abee:	b500      	push	{lr}
 800abf0:	b09c      	sub	sp, #112	; 0x70
 800abf2:	ab1d      	add	r3, sp, #116	; 0x74
 800abf4:	9002      	str	r0, [sp, #8]
 800abf6:	9006      	str	r0, [sp, #24]
 800abf8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800abfc:	4809      	ldr	r0, [pc, #36]	; (800ac24 <siprintf+0x38>)
 800abfe:	9107      	str	r1, [sp, #28]
 800ac00:	9104      	str	r1, [sp, #16]
 800ac02:	4909      	ldr	r1, [pc, #36]	; (800ac28 <siprintf+0x3c>)
 800ac04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac08:	9105      	str	r1, [sp, #20]
 800ac0a:	6800      	ldr	r0, [r0, #0]
 800ac0c:	9301      	str	r3, [sp, #4]
 800ac0e:	a902      	add	r1, sp, #8
 800ac10:	f002 ff7e 	bl	800db10 <_svfiprintf_r>
 800ac14:	9b02      	ldr	r3, [sp, #8]
 800ac16:	2200      	movs	r2, #0
 800ac18:	701a      	strb	r2, [r3, #0]
 800ac1a:	b01c      	add	sp, #112	; 0x70
 800ac1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac20:	b003      	add	sp, #12
 800ac22:	4770      	bx	lr
 800ac24:	20000020 	.word	0x20000020
 800ac28:	ffff0208 	.word	0xffff0208

0800ac2c <sulp>:
 800ac2c:	b570      	push	{r4, r5, r6, lr}
 800ac2e:	4604      	mov	r4, r0
 800ac30:	460d      	mov	r5, r1
 800ac32:	ec45 4b10 	vmov	d0, r4, r5
 800ac36:	4616      	mov	r6, r2
 800ac38:	f002 fcc8 	bl	800d5cc <__ulp>
 800ac3c:	ec51 0b10 	vmov	r0, r1, d0
 800ac40:	b17e      	cbz	r6, 800ac62 <sulp+0x36>
 800ac42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ac46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ac4a:	2b00      	cmp	r3, #0
 800ac4c:	dd09      	ble.n	800ac62 <sulp+0x36>
 800ac4e:	051b      	lsls	r3, r3, #20
 800ac50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ac54:	2400      	movs	r4, #0
 800ac56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ac5a:	4622      	mov	r2, r4
 800ac5c:	462b      	mov	r3, r5
 800ac5e:	f7f5 fccb 	bl	80005f8 <__aeabi_dmul>
 800ac62:	bd70      	pop	{r4, r5, r6, pc}
 800ac64:	0000      	movs	r0, r0
	...

0800ac68 <_strtod_l>:
 800ac68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac6c:	ed2d 8b02 	vpush	{d8}
 800ac70:	b09d      	sub	sp, #116	; 0x74
 800ac72:	461f      	mov	r7, r3
 800ac74:	2300      	movs	r3, #0
 800ac76:	9318      	str	r3, [sp, #96]	; 0x60
 800ac78:	4ba2      	ldr	r3, [pc, #648]	; (800af04 <_strtod_l+0x29c>)
 800ac7a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	9305      	str	r3, [sp, #20]
 800ac80:	4604      	mov	r4, r0
 800ac82:	4618      	mov	r0, r3
 800ac84:	4688      	mov	r8, r1
 800ac86:	f7f5 faa3 	bl	80001d0 <strlen>
 800ac8a:	f04f 0a00 	mov.w	sl, #0
 800ac8e:	4605      	mov	r5, r0
 800ac90:	f04f 0b00 	mov.w	fp, #0
 800ac94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ac98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac9a:	781a      	ldrb	r2, [r3, #0]
 800ac9c:	2a2b      	cmp	r2, #43	; 0x2b
 800ac9e:	d04e      	beq.n	800ad3e <_strtod_l+0xd6>
 800aca0:	d83b      	bhi.n	800ad1a <_strtod_l+0xb2>
 800aca2:	2a0d      	cmp	r2, #13
 800aca4:	d834      	bhi.n	800ad10 <_strtod_l+0xa8>
 800aca6:	2a08      	cmp	r2, #8
 800aca8:	d834      	bhi.n	800ad14 <_strtod_l+0xac>
 800acaa:	2a00      	cmp	r2, #0
 800acac:	d03e      	beq.n	800ad2c <_strtod_l+0xc4>
 800acae:	2300      	movs	r3, #0
 800acb0:	930a      	str	r3, [sp, #40]	; 0x28
 800acb2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800acb4:	7833      	ldrb	r3, [r6, #0]
 800acb6:	2b30      	cmp	r3, #48	; 0x30
 800acb8:	f040 80b0 	bne.w	800ae1c <_strtod_l+0x1b4>
 800acbc:	7873      	ldrb	r3, [r6, #1]
 800acbe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800acc2:	2b58      	cmp	r3, #88	; 0x58
 800acc4:	d168      	bne.n	800ad98 <_strtod_l+0x130>
 800acc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acc8:	9301      	str	r3, [sp, #4]
 800acca:	ab18      	add	r3, sp, #96	; 0x60
 800accc:	9702      	str	r7, [sp, #8]
 800acce:	9300      	str	r3, [sp, #0]
 800acd0:	4a8d      	ldr	r2, [pc, #564]	; (800af08 <_strtod_l+0x2a0>)
 800acd2:	ab19      	add	r3, sp, #100	; 0x64
 800acd4:	a917      	add	r1, sp, #92	; 0x5c
 800acd6:	4620      	mov	r0, r4
 800acd8:	f001 fdd2 	bl	800c880 <__gethex>
 800acdc:	f010 0707 	ands.w	r7, r0, #7
 800ace0:	4605      	mov	r5, r0
 800ace2:	d005      	beq.n	800acf0 <_strtod_l+0x88>
 800ace4:	2f06      	cmp	r7, #6
 800ace6:	d12c      	bne.n	800ad42 <_strtod_l+0xda>
 800ace8:	3601      	adds	r6, #1
 800acea:	2300      	movs	r3, #0
 800acec:	9617      	str	r6, [sp, #92]	; 0x5c
 800acee:	930a      	str	r3, [sp, #40]	; 0x28
 800acf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800acf2:	2b00      	cmp	r3, #0
 800acf4:	f040 8590 	bne.w	800b818 <_strtod_l+0xbb0>
 800acf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800acfa:	b1eb      	cbz	r3, 800ad38 <_strtod_l+0xd0>
 800acfc:	4652      	mov	r2, sl
 800acfe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad02:	ec43 2b10 	vmov	d0, r2, r3
 800ad06:	b01d      	add	sp, #116	; 0x74
 800ad08:	ecbd 8b02 	vpop	{d8}
 800ad0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad10:	2a20      	cmp	r2, #32
 800ad12:	d1cc      	bne.n	800acae <_strtod_l+0x46>
 800ad14:	3301      	adds	r3, #1
 800ad16:	9317      	str	r3, [sp, #92]	; 0x5c
 800ad18:	e7be      	b.n	800ac98 <_strtod_l+0x30>
 800ad1a:	2a2d      	cmp	r2, #45	; 0x2d
 800ad1c:	d1c7      	bne.n	800acae <_strtod_l+0x46>
 800ad1e:	2201      	movs	r2, #1
 800ad20:	920a      	str	r2, [sp, #40]	; 0x28
 800ad22:	1c5a      	adds	r2, r3, #1
 800ad24:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad26:	785b      	ldrb	r3, [r3, #1]
 800ad28:	2b00      	cmp	r3, #0
 800ad2a:	d1c2      	bne.n	800acb2 <_strtod_l+0x4a>
 800ad2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad2e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad32:	2b00      	cmp	r3, #0
 800ad34:	f040 856e 	bne.w	800b814 <_strtod_l+0xbac>
 800ad38:	4652      	mov	r2, sl
 800ad3a:	465b      	mov	r3, fp
 800ad3c:	e7e1      	b.n	800ad02 <_strtod_l+0x9a>
 800ad3e:	2200      	movs	r2, #0
 800ad40:	e7ee      	b.n	800ad20 <_strtod_l+0xb8>
 800ad42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800ad44:	b13a      	cbz	r2, 800ad56 <_strtod_l+0xee>
 800ad46:	2135      	movs	r1, #53	; 0x35
 800ad48:	a81a      	add	r0, sp, #104	; 0x68
 800ad4a:	f002 fd4a 	bl	800d7e2 <__copybits>
 800ad4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800ad50:	4620      	mov	r0, r4
 800ad52:	f002 f909 	bl	800cf68 <_Bfree>
 800ad56:	3f01      	subs	r7, #1
 800ad58:	2f04      	cmp	r7, #4
 800ad5a:	d806      	bhi.n	800ad6a <_strtod_l+0x102>
 800ad5c:	e8df f007 	tbb	[pc, r7]
 800ad60:	1714030a 	.word	0x1714030a
 800ad64:	0a          	.byte	0x0a
 800ad65:	00          	.byte	0x00
 800ad66:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800ad6a:	0728      	lsls	r0, r5, #28
 800ad6c:	d5c0      	bpl.n	800acf0 <_strtod_l+0x88>
 800ad6e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800ad72:	e7bd      	b.n	800acf0 <_strtod_l+0x88>
 800ad74:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ad78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ad7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ad7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ad82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ad86:	e7f0      	b.n	800ad6a <_strtod_l+0x102>
 800ad88:	f8df b180 	ldr.w	fp, [pc, #384]	; 800af0c <_strtod_l+0x2a4>
 800ad8c:	e7ed      	b.n	800ad6a <_strtod_l+0x102>
 800ad8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ad92:	f04f 3aff 	mov.w	sl, #4294967295
 800ad96:	e7e8      	b.n	800ad6a <_strtod_l+0x102>
 800ad98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad9a:	1c5a      	adds	r2, r3, #1
 800ad9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ad9e:	785b      	ldrb	r3, [r3, #1]
 800ada0:	2b30      	cmp	r3, #48	; 0x30
 800ada2:	d0f9      	beq.n	800ad98 <_strtod_l+0x130>
 800ada4:	2b00      	cmp	r3, #0
 800ada6:	d0a3      	beq.n	800acf0 <_strtod_l+0x88>
 800ada8:	2301      	movs	r3, #1
 800adaa:	f04f 0900 	mov.w	r9, #0
 800adae:	9304      	str	r3, [sp, #16]
 800adb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800adb2:	9308      	str	r3, [sp, #32]
 800adb4:	f8cd 901c 	str.w	r9, [sp, #28]
 800adb8:	464f      	mov	r7, r9
 800adba:	220a      	movs	r2, #10
 800adbc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800adbe:	7806      	ldrb	r6, [r0, #0]
 800adc0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800adc4:	b2d9      	uxtb	r1, r3
 800adc6:	2909      	cmp	r1, #9
 800adc8:	d92a      	bls.n	800ae20 <_strtod_l+0x1b8>
 800adca:	9905      	ldr	r1, [sp, #20]
 800adcc:	462a      	mov	r2, r5
 800adce:	f003 f913 	bl	800dff8 <strncmp>
 800add2:	b398      	cbz	r0, 800ae3c <_strtod_l+0x1d4>
 800add4:	2000      	movs	r0, #0
 800add6:	4632      	mov	r2, r6
 800add8:	463d      	mov	r5, r7
 800adda:	9005      	str	r0, [sp, #20]
 800addc:	4603      	mov	r3, r0
 800adde:	2a65      	cmp	r2, #101	; 0x65
 800ade0:	d001      	beq.n	800ade6 <_strtod_l+0x17e>
 800ade2:	2a45      	cmp	r2, #69	; 0x45
 800ade4:	d118      	bne.n	800ae18 <_strtod_l+0x1b0>
 800ade6:	b91d      	cbnz	r5, 800adf0 <_strtod_l+0x188>
 800ade8:	9a04      	ldr	r2, [sp, #16]
 800adea:	4302      	orrs	r2, r0
 800adec:	d09e      	beq.n	800ad2c <_strtod_l+0xc4>
 800adee:	2500      	movs	r5, #0
 800adf0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800adf4:	f108 0201 	add.w	r2, r8, #1
 800adf8:	9217      	str	r2, [sp, #92]	; 0x5c
 800adfa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800adfe:	2a2b      	cmp	r2, #43	; 0x2b
 800ae00:	d075      	beq.n	800aeee <_strtod_l+0x286>
 800ae02:	2a2d      	cmp	r2, #45	; 0x2d
 800ae04:	d07b      	beq.n	800aefe <_strtod_l+0x296>
 800ae06:	f04f 0c00 	mov.w	ip, #0
 800ae0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ae0e:	2909      	cmp	r1, #9
 800ae10:	f240 8082 	bls.w	800af18 <_strtod_l+0x2b0>
 800ae14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ae18:	2600      	movs	r6, #0
 800ae1a:	e09d      	b.n	800af58 <_strtod_l+0x2f0>
 800ae1c:	2300      	movs	r3, #0
 800ae1e:	e7c4      	b.n	800adaa <_strtod_l+0x142>
 800ae20:	2f08      	cmp	r7, #8
 800ae22:	bfd8      	it	le
 800ae24:	9907      	ldrle	r1, [sp, #28]
 800ae26:	f100 0001 	add.w	r0, r0, #1
 800ae2a:	bfda      	itte	le
 800ae2c:	fb02 3301 	mlale	r3, r2, r1, r3
 800ae30:	9307      	strle	r3, [sp, #28]
 800ae32:	fb02 3909 	mlagt	r9, r2, r9, r3
 800ae36:	3701      	adds	r7, #1
 800ae38:	9017      	str	r0, [sp, #92]	; 0x5c
 800ae3a:	e7bf      	b.n	800adbc <_strtod_l+0x154>
 800ae3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae3e:	195a      	adds	r2, r3, r5
 800ae40:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae42:	5d5a      	ldrb	r2, [r3, r5]
 800ae44:	2f00      	cmp	r7, #0
 800ae46:	d037      	beq.n	800aeb8 <_strtod_l+0x250>
 800ae48:	9005      	str	r0, [sp, #20]
 800ae4a:	463d      	mov	r5, r7
 800ae4c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800ae50:	2b09      	cmp	r3, #9
 800ae52:	d912      	bls.n	800ae7a <_strtod_l+0x212>
 800ae54:	2301      	movs	r3, #1
 800ae56:	e7c2      	b.n	800adde <_strtod_l+0x176>
 800ae58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae5a:	1c5a      	adds	r2, r3, #1
 800ae5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae5e:	785a      	ldrb	r2, [r3, #1]
 800ae60:	3001      	adds	r0, #1
 800ae62:	2a30      	cmp	r2, #48	; 0x30
 800ae64:	d0f8      	beq.n	800ae58 <_strtod_l+0x1f0>
 800ae66:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800ae6a:	2b08      	cmp	r3, #8
 800ae6c:	f200 84d9 	bhi.w	800b822 <_strtod_l+0xbba>
 800ae70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae72:	9005      	str	r0, [sp, #20]
 800ae74:	2000      	movs	r0, #0
 800ae76:	9308      	str	r3, [sp, #32]
 800ae78:	4605      	mov	r5, r0
 800ae7a:	3a30      	subs	r2, #48	; 0x30
 800ae7c:	f100 0301 	add.w	r3, r0, #1
 800ae80:	d014      	beq.n	800aeac <_strtod_l+0x244>
 800ae82:	9905      	ldr	r1, [sp, #20]
 800ae84:	4419      	add	r1, r3
 800ae86:	9105      	str	r1, [sp, #20]
 800ae88:	462b      	mov	r3, r5
 800ae8a:	eb00 0e05 	add.w	lr, r0, r5
 800ae8e:	210a      	movs	r1, #10
 800ae90:	4573      	cmp	r3, lr
 800ae92:	d113      	bne.n	800aebc <_strtod_l+0x254>
 800ae94:	182b      	adds	r3, r5, r0
 800ae96:	2b08      	cmp	r3, #8
 800ae98:	f105 0501 	add.w	r5, r5, #1
 800ae9c:	4405      	add	r5, r0
 800ae9e:	dc1c      	bgt.n	800aeda <_strtod_l+0x272>
 800aea0:	9907      	ldr	r1, [sp, #28]
 800aea2:	230a      	movs	r3, #10
 800aea4:	fb03 2301 	mla	r3, r3, r1, r2
 800aea8:	9307      	str	r3, [sp, #28]
 800aeaa:	2300      	movs	r3, #0
 800aeac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800aeae:	1c51      	adds	r1, r2, #1
 800aeb0:	9117      	str	r1, [sp, #92]	; 0x5c
 800aeb2:	7852      	ldrb	r2, [r2, #1]
 800aeb4:	4618      	mov	r0, r3
 800aeb6:	e7c9      	b.n	800ae4c <_strtod_l+0x1e4>
 800aeb8:	4638      	mov	r0, r7
 800aeba:	e7d2      	b.n	800ae62 <_strtod_l+0x1fa>
 800aebc:	2b08      	cmp	r3, #8
 800aebe:	dc04      	bgt.n	800aeca <_strtod_l+0x262>
 800aec0:	9e07      	ldr	r6, [sp, #28]
 800aec2:	434e      	muls	r6, r1
 800aec4:	9607      	str	r6, [sp, #28]
 800aec6:	3301      	adds	r3, #1
 800aec8:	e7e2      	b.n	800ae90 <_strtod_l+0x228>
 800aeca:	f103 0c01 	add.w	ip, r3, #1
 800aece:	f1bc 0f10 	cmp.w	ip, #16
 800aed2:	bfd8      	it	le
 800aed4:	fb01 f909 	mulle.w	r9, r1, r9
 800aed8:	e7f5      	b.n	800aec6 <_strtod_l+0x25e>
 800aeda:	2d10      	cmp	r5, #16
 800aedc:	bfdc      	itt	le
 800aede:	230a      	movle	r3, #10
 800aee0:	fb03 2909 	mlale	r9, r3, r9, r2
 800aee4:	e7e1      	b.n	800aeaa <_strtod_l+0x242>
 800aee6:	2300      	movs	r3, #0
 800aee8:	9305      	str	r3, [sp, #20]
 800aeea:	2301      	movs	r3, #1
 800aeec:	e77c      	b.n	800ade8 <_strtod_l+0x180>
 800aeee:	f04f 0c00 	mov.w	ip, #0
 800aef2:	f108 0202 	add.w	r2, r8, #2
 800aef6:	9217      	str	r2, [sp, #92]	; 0x5c
 800aef8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800aefc:	e785      	b.n	800ae0a <_strtod_l+0x1a2>
 800aefe:	f04f 0c01 	mov.w	ip, #1
 800af02:	e7f6      	b.n	800aef2 <_strtod_l+0x28a>
 800af04:	0800fc20 	.word	0x0800fc20
 800af08:	0800f940 	.word	0x0800f940
 800af0c:	7ff00000 	.word	0x7ff00000
 800af10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af12:	1c51      	adds	r1, r2, #1
 800af14:	9117      	str	r1, [sp, #92]	; 0x5c
 800af16:	7852      	ldrb	r2, [r2, #1]
 800af18:	2a30      	cmp	r2, #48	; 0x30
 800af1a:	d0f9      	beq.n	800af10 <_strtod_l+0x2a8>
 800af1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800af20:	2908      	cmp	r1, #8
 800af22:	f63f af79 	bhi.w	800ae18 <_strtod_l+0x1b0>
 800af26:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800af2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af2c:	9206      	str	r2, [sp, #24]
 800af2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af30:	1c51      	adds	r1, r2, #1
 800af32:	9117      	str	r1, [sp, #92]	; 0x5c
 800af34:	7852      	ldrb	r2, [r2, #1]
 800af36:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800af3a:	2e09      	cmp	r6, #9
 800af3c:	d937      	bls.n	800afae <_strtod_l+0x346>
 800af3e:	9e06      	ldr	r6, [sp, #24]
 800af40:	1b89      	subs	r1, r1, r6
 800af42:	2908      	cmp	r1, #8
 800af44:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800af48:	dc02      	bgt.n	800af50 <_strtod_l+0x2e8>
 800af4a:	4576      	cmp	r6, lr
 800af4c:	bfa8      	it	ge
 800af4e:	4676      	movge	r6, lr
 800af50:	f1bc 0f00 	cmp.w	ip, #0
 800af54:	d000      	beq.n	800af58 <_strtod_l+0x2f0>
 800af56:	4276      	negs	r6, r6
 800af58:	2d00      	cmp	r5, #0
 800af5a:	d14d      	bne.n	800aff8 <_strtod_l+0x390>
 800af5c:	9904      	ldr	r1, [sp, #16]
 800af5e:	4301      	orrs	r1, r0
 800af60:	f47f aec6 	bne.w	800acf0 <_strtod_l+0x88>
 800af64:	2b00      	cmp	r3, #0
 800af66:	f47f aee1 	bne.w	800ad2c <_strtod_l+0xc4>
 800af6a:	2a69      	cmp	r2, #105	; 0x69
 800af6c:	d027      	beq.n	800afbe <_strtod_l+0x356>
 800af6e:	dc24      	bgt.n	800afba <_strtod_l+0x352>
 800af70:	2a49      	cmp	r2, #73	; 0x49
 800af72:	d024      	beq.n	800afbe <_strtod_l+0x356>
 800af74:	2a4e      	cmp	r2, #78	; 0x4e
 800af76:	f47f aed9 	bne.w	800ad2c <_strtod_l+0xc4>
 800af7a:	499f      	ldr	r1, [pc, #636]	; (800b1f8 <_strtod_l+0x590>)
 800af7c:	a817      	add	r0, sp, #92	; 0x5c
 800af7e:	f001 fed7 	bl	800cd30 <__match>
 800af82:	2800      	cmp	r0, #0
 800af84:	f43f aed2 	beq.w	800ad2c <_strtod_l+0xc4>
 800af88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800af8a:	781b      	ldrb	r3, [r3, #0]
 800af8c:	2b28      	cmp	r3, #40	; 0x28
 800af8e:	d12d      	bne.n	800afec <_strtod_l+0x384>
 800af90:	499a      	ldr	r1, [pc, #616]	; (800b1fc <_strtod_l+0x594>)
 800af92:	aa1a      	add	r2, sp, #104	; 0x68
 800af94:	a817      	add	r0, sp, #92	; 0x5c
 800af96:	f001 fedf 	bl	800cd58 <__hexnan>
 800af9a:	2805      	cmp	r0, #5
 800af9c:	d126      	bne.n	800afec <_strtod_l+0x384>
 800af9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800afa0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800afa4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800afa8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800afac:	e6a0      	b.n	800acf0 <_strtod_l+0x88>
 800afae:	210a      	movs	r1, #10
 800afb0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800afb4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800afb8:	e7b9      	b.n	800af2e <_strtod_l+0x2c6>
 800afba:	2a6e      	cmp	r2, #110	; 0x6e
 800afbc:	e7db      	b.n	800af76 <_strtod_l+0x30e>
 800afbe:	4990      	ldr	r1, [pc, #576]	; (800b200 <_strtod_l+0x598>)
 800afc0:	a817      	add	r0, sp, #92	; 0x5c
 800afc2:	f001 feb5 	bl	800cd30 <__match>
 800afc6:	2800      	cmp	r0, #0
 800afc8:	f43f aeb0 	beq.w	800ad2c <_strtod_l+0xc4>
 800afcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afce:	498d      	ldr	r1, [pc, #564]	; (800b204 <_strtod_l+0x59c>)
 800afd0:	3b01      	subs	r3, #1
 800afd2:	a817      	add	r0, sp, #92	; 0x5c
 800afd4:	9317      	str	r3, [sp, #92]	; 0x5c
 800afd6:	f001 feab 	bl	800cd30 <__match>
 800afda:	b910      	cbnz	r0, 800afe2 <_strtod_l+0x37a>
 800afdc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800afde:	3301      	adds	r3, #1
 800afe0:	9317      	str	r3, [sp, #92]	; 0x5c
 800afe2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b214 <_strtod_l+0x5ac>
 800afe6:	f04f 0a00 	mov.w	sl, #0
 800afea:	e681      	b.n	800acf0 <_strtod_l+0x88>
 800afec:	4886      	ldr	r0, [pc, #536]	; (800b208 <_strtod_l+0x5a0>)
 800afee:	f002 ffeb 	bl	800dfc8 <nan>
 800aff2:	ec5b ab10 	vmov	sl, fp, d0
 800aff6:	e67b      	b.n	800acf0 <_strtod_l+0x88>
 800aff8:	9b05      	ldr	r3, [sp, #20]
 800affa:	9807      	ldr	r0, [sp, #28]
 800affc:	1af3      	subs	r3, r6, r3
 800affe:	2f00      	cmp	r7, #0
 800b000:	bf08      	it	eq
 800b002:	462f      	moveq	r7, r5
 800b004:	2d10      	cmp	r5, #16
 800b006:	9306      	str	r3, [sp, #24]
 800b008:	46a8      	mov	r8, r5
 800b00a:	bfa8      	it	ge
 800b00c:	f04f 0810 	movge.w	r8, #16
 800b010:	f7f5 fa78 	bl	8000504 <__aeabi_ui2d>
 800b014:	2d09      	cmp	r5, #9
 800b016:	4682      	mov	sl, r0
 800b018:	468b      	mov	fp, r1
 800b01a:	dd13      	ble.n	800b044 <_strtod_l+0x3dc>
 800b01c:	4b7b      	ldr	r3, [pc, #492]	; (800b20c <_strtod_l+0x5a4>)
 800b01e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b022:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b026:	f7f5 fae7 	bl	80005f8 <__aeabi_dmul>
 800b02a:	4682      	mov	sl, r0
 800b02c:	4648      	mov	r0, r9
 800b02e:	468b      	mov	fp, r1
 800b030:	f7f5 fa68 	bl	8000504 <__aeabi_ui2d>
 800b034:	4602      	mov	r2, r0
 800b036:	460b      	mov	r3, r1
 800b038:	4650      	mov	r0, sl
 800b03a:	4659      	mov	r1, fp
 800b03c:	f7f5 f926 	bl	800028c <__adddf3>
 800b040:	4682      	mov	sl, r0
 800b042:	468b      	mov	fp, r1
 800b044:	2d0f      	cmp	r5, #15
 800b046:	dc38      	bgt.n	800b0ba <_strtod_l+0x452>
 800b048:	9b06      	ldr	r3, [sp, #24]
 800b04a:	2b00      	cmp	r3, #0
 800b04c:	f43f ae50 	beq.w	800acf0 <_strtod_l+0x88>
 800b050:	dd24      	ble.n	800b09c <_strtod_l+0x434>
 800b052:	2b16      	cmp	r3, #22
 800b054:	dc0b      	bgt.n	800b06e <_strtod_l+0x406>
 800b056:	496d      	ldr	r1, [pc, #436]	; (800b20c <_strtod_l+0x5a4>)
 800b058:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b05c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b060:	4652      	mov	r2, sl
 800b062:	465b      	mov	r3, fp
 800b064:	f7f5 fac8 	bl	80005f8 <__aeabi_dmul>
 800b068:	4682      	mov	sl, r0
 800b06a:	468b      	mov	fp, r1
 800b06c:	e640      	b.n	800acf0 <_strtod_l+0x88>
 800b06e:	9a06      	ldr	r2, [sp, #24]
 800b070:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b074:	4293      	cmp	r3, r2
 800b076:	db20      	blt.n	800b0ba <_strtod_l+0x452>
 800b078:	4c64      	ldr	r4, [pc, #400]	; (800b20c <_strtod_l+0x5a4>)
 800b07a:	f1c5 050f 	rsb	r5, r5, #15
 800b07e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b082:	4652      	mov	r2, sl
 800b084:	465b      	mov	r3, fp
 800b086:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b08a:	f7f5 fab5 	bl	80005f8 <__aeabi_dmul>
 800b08e:	9b06      	ldr	r3, [sp, #24]
 800b090:	1b5d      	subs	r5, r3, r5
 800b092:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b096:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b09a:	e7e3      	b.n	800b064 <_strtod_l+0x3fc>
 800b09c:	9b06      	ldr	r3, [sp, #24]
 800b09e:	3316      	adds	r3, #22
 800b0a0:	db0b      	blt.n	800b0ba <_strtod_l+0x452>
 800b0a2:	9b05      	ldr	r3, [sp, #20]
 800b0a4:	1b9e      	subs	r6, r3, r6
 800b0a6:	4b59      	ldr	r3, [pc, #356]	; (800b20c <_strtod_l+0x5a4>)
 800b0a8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b0ac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b0b0:	4650      	mov	r0, sl
 800b0b2:	4659      	mov	r1, fp
 800b0b4:	f7f5 fbca 	bl	800084c <__aeabi_ddiv>
 800b0b8:	e7d6      	b.n	800b068 <_strtod_l+0x400>
 800b0ba:	9b06      	ldr	r3, [sp, #24]
 800b0bc:	eba5 0808 	sub.w	r8, r5, r8
 800b0c0:	4498      	add	r8, r3
 800b0c2:	f1b8 0f00 	cmp.w	r8, #0
 800b0c6:	dd74      	ble.n	800b1b2 <_strtod_l+0x54a>
 800b0c8:	f018 030f 	ands.w	r3, r8, #15
 800b0cc:	d00a      	beq.n	800b0e4 <_strtod_l+0x47c>
 800b0ce:	494f      	ldr	r1, [pc, #316]	; (800b20c <_strtod_l+0x5a4>)
 800b0d0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0d4:	4652      	mov	r2, sl
 800b0d6:	465b      	mov	r3, fp
 800b0d8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0dc:	f7f5 fa8c 	bl	80005f8 <__aeabi_dmul>
 800b0e0:	4682      	mov	sl, r0
 800b0e2:	468b      	mov	fp, r1
 800b0e4:	f038 080f 	bics.w	r8, r8, #15
 800b0e8:	d04f      	beq.n	800b18a <_strtod_l+0x522>
 800b0ea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b0ee:	dd22      	ble.n	800b136 <_strtod_l+0x4ce>
 800b0f0:	2500      	movs	r5, #0
 800b0f2:	462e      	mov	r6, r5
 800b0f4:	9507      	str	r5, [sp, #28]
 800b0f6:	9505      	str	r5, [sp, #20]
 800b0f8:	2322      	movs	r3, #34	; 0x22
 800b0fa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b214 <_strtod_l+0x5ac>
 800b0fe:	6023      	str	r3, [r4, #0]
 800b100:	f04f 0a00 	mov.w	sl, #0
 800b104:	9b07      	ldr	r3, [sp, #28]
 800b106:	2b00      	cmp	r3, #0
 800b108:	f43f adf2 	beq.w	800acf0 <_strtod_l+0x88>
 800b10c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b10e:	4620      	mov	r0, r4
 800b110:	f001 ff2a 	bl	800cf68 <_Bfree>
 800b114:	9905      	ldr	r1, [sp, #20]
 800b116:	4620      	mov	r0, r4
 800b118:	f001 ff26 	bl	800cf68 <_Bfree>
 800b11c:	4631      	mov	r1, r6
 800b11e:	4620      	mov	r0, r4
 800b120:	f001 ff22 	bl	800cf68 <_Bfree>
 800b124:	9907      	ldr	r1, [sp, #28]
 800b126:	4620      	mov	r0, r4
 800b128:	f001 ff1e 	bl	800cf68 <_Bfree>
 800b12c:	4629      	mov	r1, r5
 800b12e:	4620      	mov	r0, r4
 800b130:	f001 ff1a 	bl	800cf68 <_Bfree>
 800b134:	e5dc      	b.n	800acf0 <_strtod_l+0x88>
 800b136:	4b36      	ldr	r3, [pc, #216]	; (800b210 <_strtod_l+0x5a8>)
 800b138:	9304      	str	r3, [sp, #16]
 800b13a:	2300      	movs	r3, #0
 800b13c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b140:	4650      	mov	r0, sl
 800b142:	4659      	mov	r1, fp
 800b144:	4699      	mov	r9, r3
 800b146:	f1b8 0f01 	cmp.w	r8, #1
 800b14a:	dc21      	bgt.n	800b190 <_strtod_l+0x528>
 800b14c:	b10b      	cbz	r3, 800b152 <_strtod_l+0x4ea>
 800b14e:	4682      	mov	sl, r0
 800b150:	468b      	mov	fp, r1
 800b152:	4b2f      	ldr	r3, [pc, #188]	; (800b210 <_strtod_l+0x5a8>)
 800b154:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b158:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b15c:	4652      	mov	r2, sl
 800b15e:	465b      	mov	r3, fp
 800b160:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b164:	f7f5 fa48 	bl	80005f8 <__aeabi_dmul>
 800b168:	4b2a      	ldr	r3, [pc, #168]	; (800b214 <_strtod_l+0x5ac>)
 800b16a:	460a      	mov	r2, r1
 800b16c:	400b      	ands	r3, r1
 800b16e:	492a      	ldr	r1, [pc, #168]	; (800b218 <_strtod_l+0x5b0>)
 800b170:	428b      	cmp	r3, r1
 800b172:	4682      	mov	sl, r0
 800b174:	d8bc      	bhi.n	800b0f0 <_strtod_l+0x488>
 800b176:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b17a:	428b      	cmp	r3, r1
 800b17c:	bf86      	itte	hi
 800b17e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b21c <_strtod_l+0x5b4>
 800b182:	f04f 3aff 	movhi.w	sl, #4294967295
 800b186:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b18a:	2300      	movs	r3, #0
 800b18c:	9304      	str	r3, [sp, #16]
 800b18e:	e084      	b.n	800b29a <_strtod_l+0x632>
 800b190:	f018 0f01 	tst.w	r8, #1
 800b194:	d005      	beq.n	800b1a2 <_strtod_l+0x53a>
 800b196:	9b04      	ldr	r3, [sp, #16]
 800b198:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b19c:	f7f5 fa2c 	bl	80005f8 <__aeabi_dmul>
 800b1a0:	2301      	movs	r3, #1
 800b1a2:	9a04      	ldr	r2, [sp, #16]
 800b1a4:	3208      	adds	r2, #8
 800b1a6:	f109 0901 	add.w	r9, r9, #1
 800b1aa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b1ae:	9204      	str	r2, [sp, #16]
 800b1b0:	e7c9      	b.n	800b146 <_strtod_l+0x4de>
 800b1b2:	d0ea      	beq.n	800b18a <_strtod_l+0x522>
 800b1b4:	f1c8 0800 	rsb	r8, r8, #0
 800b1b8:	f018 020f 	ands.w	r2, r8, #15
 800b1bc:	d00a      	beq.n	800b1d4 <_strtod_l+0x56c>
 800b1be:	4b13      	ldr	r3, [pc, #76]	; (800b20c <_strtod_l+0x5a4>)
 800b1c0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b1c4:	4650      	mov	r0, sl
 800b1c6:	4659      	mov	r1, fp
 800b1c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b1cc:	f7f5 fb3e 	bl	800084c <__aeabi_ddiv>
 800b1d0:	4682      	mov	sl, r0
 800b1d2:	468b      	mov	fp, r1
 800b1d4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b1d8:	d0d7      	beq.n	800b18a <_strtod_l+0x522>
 800b1da:	f1b8 0f1f 	cmp.w	r8, #31
 800b1de:	dd1f      	ble.n	800b220 <_strtod_l+0x5b8>
 800b1e0:	2500      	movs	r5, #0
 800b1e2:	462e      	mov	r6, r5
 800b1e4:	9507      	str	r5, [sp, #28]
 800b1e6:	9505      	str	r5, [sp, #20]
 800b1e8:	2322      	movs	r3, #34	; 0x22
 800b1ea:	f04f 0a00 	mov.w	sl, #0
 800b1ee:	f04f 0b00 	mov.w	fp, #0
 800b1f2:	6023      	str	r3, [r4, #0]
 800b1f4:	e786      	b.n	800b104 <_strtod_l+0x49c>
 800b1f6:	bf00      	nop
 800b1f8:	0800f911 	.word	0x0800f911
 800b1fc:	0800f954 	.word	0x0800f954
 800b200:	0800f909 	.word	0x0800f909
 800b204:	0800fb44 	.word	0x0800fb44
 800b208:	0800fa3f 	.word	0x0800fa3f
 800b20c:	0800fcb8 	.word	0x0800fcb8
 800b210:	0800fc90 	.word	0x0800fc90
 800b214:	7ff00000 	.word	0x7ff00000
 800b218:	7ca00000 	.word	0x7ca00000
 800b21c:	7fefffff 	.word	0x7fefffff
 800b220:	f018 0310 	ands.w	r3, r8, #16
 800b224:	bf18      	it	ne
 800b226:	236a      	movne	r3, #106	; 0x6a
 800b228:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b5d8 <_strtod_l+0x970>
 800b22c:	9304      	str	r3, [sp, #16]
 800b22e:	4650      	mov	r0, sl
 800b230:	4659      	mov	r1, fp
 800b232:	2300      	movs	r3, #0
 800b234:	f018 0f01 	tst.w	r8, #1
 800b238:	d004      	beq.n	800b244 <_strtod_l+0x5dc>
 800b23a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b23e:	f7f5 f9db 	bl	80005f8 <__aeabi_dmul>
 800b242:	2301      	movs	r3, #1
 800b244:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b248:	f109 0908 	add.w	r9, r9, #8
 800b24c:	d1f2      	bne.n	800b234 <_strtod_l+0x5cc>
 800b24e:	b10b      	cbz	r3, 800b254 <_strtod_l+0x5ec>
 800b250:	4682      	mov	sl, r0
 800b252:	468b      	mov	fp, r1
 800b254:	9b04      	ldr	r3, [sp, #16]
 800b256:	b1c3      	cbz	r3, 800b28a <_strtod_l+0x622>
 800b258:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b25c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b260:	2b00      	cmp	r3, #0
 800b262:	4659      	mov	r1, fp
 800b264:	dd11      	ble.n	800b28a <_strtod_l+0x622>
 800b266:	2b1f      	cmp	r3, #31
 800b268:	f340 8124 	ble.w	800b4b4 <_strtod_l+0x84c>
 800b26c:	2b34      	cmp	r3, #52	; 0x34
 800b26e:	bfde      	ittt	le
 800b270:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b274:	f04f 33ff 	movle.w	r3, #4294967295
 800b278:	fa03 f202 	lslle.w	r2, r3, r2
 800b27c:	f04f 0a00 	mov.w	sl, #0
 800b280:	bfcc      	ite	gt
 800b282:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b286:	ea02 0b01 	andle.w	fp, r2, r1
 800b28a:	2200      	movs	r2, #0
 800b28c:	2300      	movs	r3, #0
 800b28e:	4650      	mov	r0, sl
 800b290:	4659      	mov	r1, fp
 800b292:	f7f5 fc19 	bl	8000ac8 <__aeabi_dcmpeq>
 800b296:	2800      	cmp	r0, #0
 800b298:	d1a2      	bne.n	800b1e0 <_strtod_l+0x578>
 800b29a:	9b07      	ldr	r3, [sp, #28]
 800b29c:	9300      	str	r3, [sp, #0]
 800b29e:	9908      	ldr	r1, [sp, #32]
 800b2a0:	462b      	mov	r3, r5
 800b2a2:	463a      	mov	r2, r7
 800b2a4:	4620      	mov	r0, r4
 800b2a6:	f001 fec7 	bl	800d038 <__s2b>
 800b2aa:	9007      	str	r0, [sp, #28]
 800b2ac:	2800      	cmp	r0, #0
 800b2ae:	f43f af1f 	beq.w	800b0f0 <_strtod_l+0x488>
 800b2b2:	9b05      	ldr	r3, [sp, #20]
 800b2b4:	1b9e      	subs	r6, r3, r6
 800b2b6:	9b06      	ldr	r3, [sp, #24]
 800b2b8:	2b00      	cmp	r3, #0
 800b2ba:	bfb4      	ite	lt
 800b2bc:	4633      	movlt	r3, r6
 800b2be:	2300      	movge	r3, #0
 800b2c0:	930c      	str	r3, [sp, #48]	; 0x30
 800b2c2:	9b06      	ldr	r3, [sp, #24]
 800b2c4:	2500      	movs	r5, #0
 800b2c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b2ca:	9312      	str	r3, [sp, #72]	; 0x48
 800b2cc:	462e      	mov	r6, r5
 800b2ce:	9b07      	ldr	r3, [sp, #28]
 800b2d0:	4620      	mov	r0, r4
 800b2d2:	6859      	ldr	r1, [r3, #4]
 800b2d4:	f001 fe08 	bl	800cee8 <_Balloc>
 800b2d8:	9005      	str	r0, [sp, #20]
 800b2da:	2800      	cmp	r0, #0
 800b2dc:	f43f af0c 	beq.w	800b0f8 <_strtod_l+0x490>
 800b2e0:	9b07      	ldr	r3, [sp, #28]
 800b2e2:	691a      	ldr	r2, [r3, #16]
 800b2e4:	3202      	adds	r2, #2
 800b2e6:	f103 010c 	add.w	r1, r3, #12
 800b2ea:	0092      	lsls	r2, r2, #2
 800b2ec:	300c      	adds	r0, #12
 800b2ee:	f001 fded 	bl	800cecc <memcpy>
 800b2f2:	ec4b ab10 	vmov	d0, sl, fp
 800b2f6:	aa1a      	add	r2, sp, #104	; 0x68
 800b2f8:	a919      	add	r1, sp, #100	; 0x64
 800b2fa:	4620      	mov	r0, r4
 800b2fc:	f002 f9e2 	bl	800d6c4 <__d2b>
 800b300:	ec4b ab18 	vmov	d8, sl, fp
 800b304:	9018      	str	r0, [sp, #96]	; 0x60
 800b306:	2800      	cmp	r0, #0
 800b308:	f43f aef6 	beq.w	800b0f8 <_strtod_l+0x490>
 800b30c:	2101      	movs	r1, #1
 800b30e:	4620      	mov	r0, r4
 800b310:	f001 ff2c 	bl	800d16c <__i2b>
 800b314:	4606      	mov	r6, r0
 800b316:	2800      	cmp	r0, #0
 800b318:	f43f aeee 	beq.w	800b0f8 <_strtod_l+0x490>
 800b31c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b31e:	9904      	ldr	r1, [sp, #16]
 800b320:	2b00      	cmp	r3, #0
 800b322:	bfab      	itete	ge
 800b324:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b326:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b328:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b32a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b32e:	bfac      	ite	ge
 800b330:	eb03 0902 	addge.w	r9, r3, r2
 800b334:	1ad7      	sublt	r7, r2, r3
 800b336:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b338:	eba3 0801 	sub.w	r8, r3, r1
 800b33c:	4490      	add	r8, r2
 800b33e:	4ba1      	ldr	r3, [pc, #644]	; (800b5c4 <_strtod_l+0x95c>)
 800b340:	f108 38ff 	add.w	r8, r8, #4294967295
 800b344:	4598      	cmp	r8, r3
 800b346:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b34a:	f280 80c7 	bge.w	800b4dc <_strtod_l+0x874>
 800b34e:	eba3 0308 	sub.w	r3, r3, r8
 800b352:	2b1f      	cmp	r3, #31
 800b354:	eba2 0203 	sub.w	r2, r2, r3
 800b358:	f04f 0101 	mov.w	r1, #1
 800b35c:	f300 80b1 	bgt.w	800b4c2 <_strtod_l+0x85a>
 800b360:	fa01 f303 	lsl.w	r3, r1, r3
 800b364:	930d      	str	r3, [sp, #52]	; 0x34
 800b366:	2300      	movs	r3, #0
 800b368:	9308      	str	r3, [sp, #32]
 800b36a:	eb09 0802 	add.w	r8, r9, r2
 800b36e:	9b04      	ldr	r3, [sp, #16]
 800b370:	45c1      	cmp	r9, r8
 800b372:	4417      	add	r7, r2
 800b374:	441f      	add	r7, r3
 800b376:	464b      	mov	r3, r9
 800b378:	bfa8      	it	ge
 800b37a:	4643      	movge	r3, r8
 800b37c:	42bb      	cmp	r3, r7
 800b37e:	bfa8      	it	ge
 800b380:	463b      	movge	r3, r7
 800b382:	2b00      	cmp	r3, #0
 800b384:	bfc2      	ittt	gt
 800b386:	eba8 0803 	subgt.w	r8, r8, r3
 800b38a:	1aff      	subgt	r7, r7, r3
 800b38c:	eba9 0903 	subgt.w	r9, r9, r3
 800b390:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b392:	2b00      	cmp	r3, #0
 800b394:	dd17      	ble.n	800b3c6 <_strtod_l+0x75e>
 800b396:	4631      	mov	r1, r6
 800b398:	461a      	mov	r2, r3
 800b39a:	4620      	mov	r0, r4
 800b39c:	f001 ffa6 	bl	800d2ec <__pow5mult>
 800b3a0:	4606      	mov	r6, r0
 800b3a2:	2800      	cmp	r0, #0
 800b3a4:	f43f aea8 	beq.w	800b0f8 <_strtod_l+0x490>
 800b3a8:	4601      	mov	r1, r0
 800b3aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b3ac:	4620      	mov	r0, r4
 800b3ae:	f001 fef3 	bl	800d198 <__multiply>
 800b3b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800b3b4:	2800      	cmp	r0, #0
 800b3b6:	f43f ae9f 	beq.w	800b0f8 <_strtod_l+0x490>
 800b3ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b3bc:	4620      	mov	r0, r4
 800b3be:	f001 fdd3 	bl	800cf68 <_Bfree>
 800b3c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b3c4:	9318      	str	r3, [sp, #96]	; 0x60
 800b3c6:	f1b8 0f00 	cmp.w	r8, #0
 800b3ca:	f300 808c 	bgt.w	800b4e6 <_strtod_l+0x87e>
 800b3ce:	9b06      	ldr	r3, [sp, #24]
 800b3d0:	2b00      	cmp	r3, #0
 800b3d2:	dd08      	ble.n	800b3e6 <_strtod_l+0x77e>
 800b3d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b3d6:	9905      	ldr	r1, [sp, #20]
 800b3d8:	4620      	mov	r0, r4
 800b3da:	f001 ff87 	bl	800d2ec <__pow5mult>
 800b3de:	9005      	str	r0, [sp, #20]
 800b3e0:	2800      	cmp	r0, #0
 800b3e2:	f43f ae89 	beq.w	800b0f8 <_strtod_l+0x490>
 800b3e6:	2f00      	cmp	r7, #0
 800b3e8:	dd08      	ble.n	800b3fc <_strtod_l+0x794>
 800b3ea:	9905      	ldr	r1, [sp, #20]
 800b3ec:	463a      	mov	r2, r7
 800b3ee:	4620      	mov	r0, r4
 800b3f0:	f001 ffd6 	bl	800d3a0 <__lshift>
 800b3f4:	9005      	str	r0, [sp, #20]
 800b3f6:	2800      	cmp	r0, #0
 800b3f8:	f43f ae7e 	beq.w	800b0f8 <_strtod_l+0x490>
 800b3fc:	f1b9 0f00 	cmp.w	r9, #0
 800b400:	dd08      	ble.n	800b414 <_strtod_l+0x7ac>
 800b402:	4631      	mov	r1, r6
 800b404:	464a      	mov	r2, r9
 800b406:	4620      	mov	r0, r4
 800b408:	f001 ffca 	bl	800d3a0 <__lshift>
 800b40c:	4606      	mov	r6, r0
 800b40e:	2800      	cmp	r0, #0
 800b410:	f43f ae72 	beq.w	800b0f8 <_strtod_l+0x490>
 800b414:	9a05      	ldr	r2, [sp, #20]
 800b416:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b418:	4620      	mov	r0, r4
 800b41a:	f002 f84d 	bl	800d4b8 <__mdiff>
 800b41e:	4605      	mov	r5, r0
 800b420:	2800      	cmp	r0, #0
 800b422:	f43f ae69 	beq.w	800b0f8 <_strtod_l+0x490>
 800b426:	68c3      	ldr	r3, [r0, #12]
 800b428:	930b      	str	r3, [sp, #44]	; 0x2c
 800b42a:	2300      	movs	r3, #0
 800b42c:	60c3      	str	r3, [r0, #12]
 800b42e:	4631      	mov	r1, r6
 800b430:	f002 f826 	bl	800d480 <__mcmp>
 800b434:	2800      	cmp	r0, #0
 800b436:	da60      	bge.n	800b4fa <_strtod_l+0x892>
 800b438:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b43a:	ea53 030a 	orrs.w	r3, r3, sl
 800b43e:	f040 8082 	bne.w	800b546 <_strtod_l+0x8de>
 800b442:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b446:	2b00      	cmp	r3, #0
 800b448:	d17d      	bne.n	800b546 <_strtod_l+0x8de>
 800b44a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b44e:	0d1b      	lsrs	r3, r3, #20
 800b450:	051b      	lsls	r3, r3, #20
 800b452:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b456:	d976      	bls.n	800b546 <_strtod_l+0x8de>
 800b458:	696b      	ldr	r3, [r5, #20]
 800b45a:	b913      	cbnz	r3, 800b462 <_strtod_l+0x7fa>
 800b45c:	692b      	ldr	r3, [r5, #16]
 800b45e:	2b01      	cmp	r3, #1
 800b460:	dd71      	ble.n	800b546 <_strtod_l+0x8de>
 800b462:	4629      	mov	r1, r5
 800b464:	2201      	movs	r2, #1
 800b466:	4620      	mov	r0, r4
 800b468:	f001 ff9a 	bl	800d3a0 <__lshift>
 800b46c:	4631      	mov	r1, r6
 800b46e:	4605      	mov	r5, r0
 800b470:	f002 f806 	bl	800d480 <__mcmp>
 800b474:	2800      	cmp	r0, #0
 800b476:	dd66      	ble.n	800b546 <_strtod_l+0x8de>
 800b478:	9904      	ldr	r1, [sp, #16]
 800b47a:	4a53      	ldr	r2, [pc, #332]	; (800b5c8 <_strtod_l+0x960>)
 800b47c:	465b      	mov	r3, fp
 800b47e:	2900      	cmp	r1, #0
 800b480:	f000 8081 	beq.w	800b586 <_strtod_l+0x91e>
 800b484:	ea02 010b 	and.w	r1, r2, fp
 800b488:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b48c:	dc7b      	bgt.n	800b586 <_strtod_l+0x91e>
 800b48e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b492:	f77f aea9 	ble.w	800b1e8 <_strtod_l+0x580>
 800b496:	4b4d      	ldr	r3, [pc, #308]	; (800b5cc <_strtod_l+0x964>)
 800b498:	4650      	mov	r0, sl
 800b49a:	4659      	mov	r1, fp
 800b49c:	2200      	movs	r2, #0
 800b49e:	f7f5 f8ab 	bl	80005f8 <__aeabi_dmul>
 800b4a2:	460b      	mov	r3, r1
 800b4a4:	4303      	orrs	r3, r0
 800b4a6:	bf08      	it	eq
 800b4a8:	2322      	moveq	r3, #34	; 0x22
 800b4aa:	4682      	mov	sl, r0
 800b4ac:	468b      	mov	fp, r1
 800b4ae:	bf08      	it	eq
 800b4b0:	6023      	streq	r3, [r4, #0]
 800b4b2:	e62b      	b.n	800b10c <_strtod_l+0x4a4>
 800b4b4:	f04f 32ff 	mov.w	r2, #4294967295
 800b4b8:	fa02 f303 	lsl.w	r3, r2, r3
 800b4bc:	ea03 0a0a 	and.w	sl, r3, sl
 800b4c0:	e6e3      	b.n	800b28a <_strtod_l+0x622>
 800b4c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b4c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b4ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b4ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b4d2:	fa01 f308 	lsl.w	r3, r1, r8
 800b4d6:	9308      	str	r3, [sp, #32]
 800b4d8:	910d      	str	r1, [sp, #52]	; 0x34
 800b4da:	e746      	b.n	800b36a <_strtod_l+0x702>
 800b4dc:	2300      	movs	r3, #0
 800b4de:	9308      	str	r3, [sp, #32]
 800b4e0:	2301      	movs	r3, #1
 800b4e2:	930d      	str	r3, [sp, #52]	; 0x34
 800b4e4:	e741      	b.n	800b36a <_strtod_l+0x702>
 800b4e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4e8:	4642      	mov	r2, r8
 800b4ea:	4620      	mov	r0, r4
 800b4ec:	f001 ff58 	bl	800d3a0 <__lshift>
 800b4f0:	9018      	str	r0, [sp, #96]	; 0x60
 800b4f2:	2800      	cmp	r0, #0
 800b4f4:	f47f af6b 	bne.w	800b3ce <_strtod_l+0x766>
 800b4f8:	e5fe      	b.n	800b0f8 <_strtod_l+0x490>
 800b4fa:	465f      	mov	r7, fp
 800b4fc:	d16e      	bne.n	800b5dc <_strtod_l+0x974>
 800b4fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b500:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b504:	b342      	cbz	r2, 800b558 <_strtod_l+0x8f0>
 800b506:	4a32      	ldr	r2, [pc, #200]	; (800b5d0 <_strtod_l+0x968>)
 800b508:	4293      	cmp	r3, r2
 800b50a:	d128      	bne.n	800b55e <_strtod_l+0x8f6>
 800b50c:	9b04      	ldr	r3, [sp, #16]
 800b50e:	4651      	mov	r1, sl
 800b510:	b1eb      	cbz	r3, 800b54e <_strtod_l+0x8e6>
 800b512:	4b2d      	ldr	r3, [pc, #180]	; (800b5c8 <_strtod_l+0x960>)
 800b514:	403b      	ands	r3, r7
 800b516:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b51a:	f04f 32ff 	mov.w	r2, #4294967295
 800b51e:	d819      	bhi.n	800b554 <_strtod_l+0x8ec>
 800b520:	0d1b      	lsrs	r3, r3, #20
 800b522:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b526:	fa02 f303 	lsl.w	r3, r2, r3
 800b52a:	4299      	cmp	r1, r3
 800b52c:	d117      	bne.n	800b55e <_strtod_l+0x8f6>
 800b52e:	4b29      	ldr	r3, [pc, #164]	; (800b5d4 <_strtod_l+0x96c>)
 800b530:	429f      	cmp	r7, r3
 800b532:	d102      	bne.n	800b53a <_strtod_l+0x8d2>
 800b534:	3101      	adds	r1, #1
 800b536:	f43f addf 	beq.w	800b0f8 <_strtod_l+0x490>
 800b53a:	4b23      	ldr	r3, [pc, #140]	; (800b5c8 <_strtod_l+0x960>)
 800b53c:	403b      	ands	r3, r7
 800b53e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b542:	f04f 0a00 	mov.w	sl, #0
 800b546:	9b04      	ldr	r3, [sp, #16]
 800b548:	2b00      	cmp	r3, #0
 800b54a:	d1a4      	bne.n	800b496 <_strtod_l+0x82e>
 800b54c:	e5de      	b.n	800b10c <_strtod_l+0x4a4>
 800b54e:	f04f 33ff 	mov.w	r3, #4294967295
 800b552:	e7ea      	b.n	800b52a <_strtod_l+0x8c2>
 800b554:	4613      	mov	r3, r2
 800b556:	e7e8      	b.n	800b52a <_strtod_l+0x8c2>
 800b558:	ea53 030a 	orrs.w	r3, r3, sl
 800b55c:	d08c      	beq.n	800b478 <_strtod_l+0x810>
 800b55e:	9b08      	ldr	r3, [sp, #32]
 800b560:	b1db      	cbz	r3, 800b59a <_strtod_l+0x932>
 800b562:	423b      	tst	r3, r7
 800b564:	d0ef      	beq.n	800b546 <_strtod_l+0x8de>
 800b566:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b568:	9a04      	ldr	r2, [sp, #16]
 800b56a:	4650      	mov	r0, sl
 800b56c:	4659      	mov	r1, fp
 800b56e:	b1c3      	cbz	r3, 800b5a2 <_strtod_l+0x93a>
 800b570:	f7ff fb5c 	bl	800ac2c <sulp>
 800b574:	4602      	mov	r2, r0
 800b576:	460b      	mov	r3, r1
 800b578:	ec51 0b18 	vmov	r0, r1, d8
 800b57c:	f7f4 fe86 	bl	800028c <__adddf3>
 800b580:	4682      	mov	sl, r0
 800b582:	468b      	mov	fp, r1
 800b584:	e7df      	b.n	800b546 <_strtod_l+0x8de>
 800b586:	4013      	ands	r3, r2
 800b588:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b58c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b590:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b594:	f04f 3aff 	mov.w	sl, #4294967295
 800b598:	e7d5      	b.n	800b546 <_strtod_l+0x8de>
 800b59a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b59c:	ea13 0f0a 	tst.w	r3, sl
 800b5a0:	e7e0      	b.n	800b564 <_strtod_l+0x8fc>
 800b5a2:	f7ff fb43 	bl	800ac2c <sulp>
 800b5a6:	4602      	mov	r2, r0
 800b5a8:	460b      	mov	r3, r1
 800b5aa:	ec51 0b18 	vmov	r0, r1, d8
 800b5ae:	f7f4 fe6b 	bl	8000288 <__aeabi_dsub>
 800b5b2:	2200      	movs	r2, #0
 800b5b4:	2300      	movs	r3, #0
 800b5b6:	4682      	mov	sl, r0
 800b5b8:	468b      	mov	fp, r1
 800b5ba:	f7f5 fa85 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5be:	2800      	cmp	r0, #0
 800b5c0:	d0c1      	beq.n	800b546 <_strtod_l+0x8de>
 800b5c2:	e611      	b.n	800b1e8 <_strtod_l+0x580>
 800b5c4:	fffffc02 	.word	0xfffffc02
 800b5c8:	7ff00000 	.word	0x7ff00000
 800b5cc:	39500000 	.word	0x39500000
 800b5d0:	000fffff 	.word	0x000fffff
 800b5d4:	7fefffff 	.word	0x7fefffff
 800b5d8:	0800f968 	.word	0x0800f968
 800b5dc:	4631      	mov	r1, r6
 800b5de:	4628      	mov	r0, r5
 800b5e0:	f002 f8cc 	bl	800d77c <__ratio>
 800b5e4:	ec59 8b10 	vmov	r8, r9, d0
 800b5e8:	ee10 0a10 	vmov	r0, s0
 800b5ec:	2200      	movs	r2, #0
 800b5ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b5f2:	4649      	mov	r1, r9
 800b5f4:	f7f5 fa7c 	bl	8000af0 <__aeabi_dcmple>
 800b5f8:	2800      	cmp	r0, #0
 800b5fa:	d07a      	beq.n	800b6f2 <_strtod_l+0xa8a>
 800b5fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5fe:	2b00      	cmp	r3, #0
 800b600:	d04a      	beq.n	800b698 <_strtod_l+0xa30>
 800b602:	4b95      	ldr	r3, [pc, #596]	; (800b858 <_strtod_l+0xbf0>)
 800b604:	2200      	movs	r2, #0
 800b606:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b60a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b858 <_strtod_l+0xbf0>
 800b60e:	f04f 0800 	mov.w	r8, #0
 800b612:	4b92      	ldr	r3, [pc, #584]	; (800b85c <_strtod_l+0xbf4>)
 800b614:	403b      	ands	r3, r7
 800b616:	930d      	str	r3, [sp, #52]	; 0x34
 800b618:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b61a:	4b91      	ldr	r3, [pc, #580]	; (800b860 <_strtod_l+0xbf8>)
 800b61c:	429a      	cmp	r2, r3
 800b61e:	f040 80b0 	bne.w	800b782 <_strtod_l+0xb1a>
 800b622:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b626:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b62a:	ec4b ab10 	vmov	d0, sl, fp
 800b62e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b632:	f001 ffcb 	bl	800d5cc <__ulp>
 800b636:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b63a:	ec53 2b10 	vmov	r2, r3, d0
 800b63e:	f7f4 ffdb 	bl	80005f8 <__aeabi_dmul>
 800b642:	4652      	mov	r2, sl
 800b644:	465b      	mov	r3, fp
 800b646:	f7f4 fe21 	bl	800028c <__adddf3>
 800b64a:	460b      	mov	r3, r1
 800b64c:	4983      	ldr	r1, [pc, #524]	; (800b85c <_strtod_l+0xbf4>)
 800b64e:	4a85      	ldr	r2, [pc, #532]	; (800b864 <_strtod_l+0xbfc>)
 800b650:	4019      	ands	r1, r3
 800b652:	4291      	cmp	r1, r2
 800b654:	4682      	mov	sl, r0
 800b656:	d960      	bls.n	800b71a <_strtod_l+0xab2>
 800b658:	ee18 3a90 	vmov	r3, s17
 800b65c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b660:	4293      	cmp	r3, r2
 800b662:	d104      	bne.n	800b66e <_strtod_l+0xa06>
 800b664:	ee18 3a10 	vmov	r3, s16
 800b668:	3301      	adds	r3, #1
 800b66a:	f43f ad45 	beq.w	800b0f8 <_strtod_l+0x490>
 800b66e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b870 <_strtod_l+0xc08>
 800b672:	f04f 3aff 	mov.w	sl, #4294967295
 800b676:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b678:	4620      	mov	r0, r4
 800b67a:	f001 fc75 	bl	800cf68 <_Bfree>
 800b67e:	9905      	ldr	r1, [sp, #20]
 800b680:	4620      	mov	r0, r4
 800b682:	f001 fc71 	bl	800cf68 <_Bfree>
 800b686:	4631      	mov	r1, r6
 800b688:	4620      	mov	r0, r4
 800b68a:	f001 fc6d 	bl	800cf68 <_Bfree>
 800b68e:	4629      	mov	r1, r5
 800b690:	4620      	mov	r0, r4
 800b692:	f001 fc69 	bl	800cf68 <_Bfree>
 800b696:	e61a      	b.n	800b2ce <_strtod_l+0x666>
 800b698:	f1ba 0f00 	cmp.w	sl, #0
 800b69c:	d11b      	bne.n	800b6d6 <_strtod_l+0xa6e>
 800b69e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b6a2:	b9f3      	cbnz	r3, 800b6e2 <_strtod_l+0xa7a>
 800b6a4:	4b6c      	ldr	r3, [pc, #432]	; (800b858 <_strtod_l+0xbf0>)
 800b6a6:	2200      	movs	r2, #0
 800b6a8:	4640      	mov	r0, r8
 800b6aa:	4649      	mov	r1, r9
 800b6ac:	f7f5 fa16 	bl	8000adc <__aeabi_dcmplt>
 800b6b0:	b9d0      	cbnz	r0, 800b6e8 <_strtod_l+0xa80>
 800b6b2:	4640      	mov	r0, r8
 800b6b4:	4649      	mov	r1, r9
 800b6b6:	4b6c      	ldr	r3, [pc, #432]	; (800b868 <_strtod_l+0xc00>)
 800b6b8:	2200      	movs	r2, #0
 800b6ba:	f7f4 ff9d 	bl	80005f8 <__aeabi_dmul>
 800b6be:	4680      	mov	r8, r0
 800b6c0:	4689      	mov	r9, r1
 800b6c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b6c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b6ca:	9315      	str	r3, [sp, #84]	; 0x54
 800b6cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b6d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b6d4:	e79d      	b.n	800b612 <_strtod_l+0x9aa>
 800b6d6:	f1ba 0f01 	cmp.w	sl, #1
 800b6da:	d102      	bne.n	800b6e2 <_strtod_l+0xa7a>
 800b6dc:	2f00      	cmp	r7, #0
 800b6de:	f43f ad83 	beq.w	800b1e8 <_strtod_l+0x580>
 800b6e2:	4b62      	ldr	r3, [pc, #392]	; (800b86c <_strtod_l+0xc04>)
 800b6e4:	2200      	movs	r2, #0
 800b6e6:	e78e      	b.n	800b606 <_strtod_l+0x99e>
 800b6e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b868 <_strtod_l+0xc00>
 800b6ec:	f04f 0800 	mov.w	r8, #0
 800b6f0:	e7e7      	b.n	800b6c2 <_strtod_l+0xa5a>
 800b6f2:	4b5d      	ldr	r3, [pc, #372]	; (800b868 <_strtod_l+0xc00>)
 800b6f4:	4640      	mov	r0, r8
 800b6f6:	4649      	mov	r1, r9
 800b6f8:	2200      	movs	r2, #0
 800b6fa:	f7f4 ff7d 	bl	80005f8 <__aeabi_dmul>
 800b6fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b700:	4680      	mov	r8, r0
 800b702:	4689      	mov	r9, r1
 800b704:	b933      	cbnz	r3, 800b714 <_strtod_l+0xaac>
 800b706:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b70a:	900e      	str	r0, [sp, #56]	; 0x38
 800b70c:	930f      	str	r3, [sp, #60]	; 0x3c
 800b70e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b712:	e7dd      	b.n	800b6d0 <_strtod_l+0xa68>
 800b714:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b718:	e7f9      	b.n	800b70e <_strtod_l+0xaa6>
 800b71a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b71e:	9b04      	ldr	r3, [sp, #16]
 800b720:	2b00      	cmp	r3, #0
 800b722:	d1a8      	bne.n	800b676 <_strtod_l+0xa0e>
 800b724:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b728:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b72a:	0d1b      	lsrs	r3, r3, #20
 800b72c:	051b      	lsls	r3, r3, #20
 800b72e:	429a      	cmp	r2, r3
 800b730:	d1a1      	bne.n	800b676 <_strtod_l+0xa0e>
 800b732:	4640      	mov	r0, r8
 800b734:	4649      	mov	r1, r9
 800b736:	f7f5 fabf 	bl	8000cb8 <__aeabi_d2lz>
 800b73a:	f7f4 ff2f 	bl	800059c <__aeabi_l2d>
 800b73e:	4602      	mov	r2, r0
 800b740:	460b      	mov	r3, r1
 800b742:	4640      	mov	r0, r8
 800b744:	4649      	mov	r1, r9
 800b746:	f7f4 fd9f 	bl	8000288 <__aeabi_dsub>
 800b74a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b74c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b750:	ea43 030a 	orr.w	r3, r3, sl
 800b754:	4313      	orrs	r3, r2
 800b756:	4680      	mov	r8, r0
 800b758:	4689      	mov	r9, r1
 800b75a:	d055      	beq.n	800b808 <_strtod_l+0xba0>
 800b75c:	a336      	add	r3, pc, #216	; (adr r3, 800b838 <_strtod_l+0xbd0>)
 800b75e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b762:	f7f5 f9bb 	bl	8000adc <__aeabi_dcmplt>
 800b766:	2800      	cmp	r0, #0
 800b768:	f47f acd0 	bne.w	800b10c <_strtod_l+0x4a4>
 800b76c:	a334      	add	r3, pc, #208	; (adr r3, 800b840 <_strtod_l+0xbd8>)
 800b76e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b772:	4640      	mov	r0, r8
 800b774:	4649      	mov	r1, r9
 800b776:	f7f5 f9cf 	bl	8000b18 <__aeabi_dcmpgt>
 800b77a:	2800      	cmp	r0, #0
 800b77c:	f43f af7b 	beq.w	800b676 <_strtod_l+0xa0e>
 800b780:	e4c4      	b.n	800b10c <_strtod_l+0x4a4>
 800b782:	9b04      	ldr	r3, [sp, #16]
 800b784:	b333      	cbz	r3, 800b7d4 <_strtod_l+0xb6c>
 800b786:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b788:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b78c:	d822      	bhi.n	800b7d4 <_strtod_l+0xb6c>
 800b78e:	a32e      	add	r3, pc, #184	; (adr r3, 800b848 <_strtod_l+0xbe0>)
 800b790:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b794:	4640      	mov	r0, r8
 800b796:	4649      	mov	r1, r9
 800b798:	f7f5 f9aa 	bl	8000af0 <__aeabi_dcmple>
 800b79c:	b1a0      	cbz	r0, 800b7c8 <_strtod_l+0xb60>
 800b79e:	4649      	mov	r1, r9
 800b7a0:	4640      	mov	r0, r8
 800b7a2:	f7f5 fa01 	bl	8000ba8 <__aeabi_d2uiz>
 800b7a6:	2801      	cmp	r0, #1
 800b7a8:	bf38      	it	cc
 800b7aa:	2001      	movcc	r0, #1
 800b7ac:	f7f4 feaa 	bl	8000504 <__aeabi_ui2d>
 800b7b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7b2:	4680      	mov	r8, r0
 800b7b4:	4689      	mov	r9, r1
 800b7b6:	bb23      	cbnz	r3, 800b802 <_strtod_l+0xb9a>
 800b7b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b7bc:	9010      	str	r0, [sp, #64]	; 0x40
 800b7be:	9311      	str	r3, [sp, #68]	; 0x44
 800b7c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b7c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b7c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b7ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b7d0:	1a9b      	subs	r3, r3, r2
 800b7d2:	9309      	str	r3, [sp, #36]	; 0x24
 800b7d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7d8:	eeb0 0a48 	vmov.f32	s0, s16
 800b7dc:	eef0 0a68 	vmov.f32	s1, s17
 800b7e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b7e4:	f001 fef2 	bl	800d5cc <__ulp>
 800b7e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b7ec:	ec53 2b10 	vmov	r2, r3, d0
 800b7f0:	f7f4 ff02 	bl	80005f8 <__aeabi_dmul>
 800b7f4:	ec53 2b18 	vmov	r2, r3, d8
 800b7f8:	f7f4 fd48 	bl	800028c <__adddf3>
 800b7fc:	4682      	mov	sl, r0
 800b7fe:	468b      	mov	fp, r1
 800b800:	e78d      	b.n	800b71e <_strtod_l+0xab6>
 800b802:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b806:	e7db      	b.n	800b7c0 <_strtod_l+0xb58>
 800b808:	a311      	add	r3, pc, #68	; (adr r3, 800b850 <_strtod_l+0xbe8>)
 800b80a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b80e:	f7f5 f965 	bl	8000adc <__aeabi_dcmplt>
 800b812:	e7b2      	b.n	800b77a <_strtod_l+0xb12>
 800b814:	2300      	movs	r3, #0
 800b816:	930a      	str	r3, [sp, #40]	; 0x28
 800b818:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b81a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b81c:	6013      	str	r3, [r2, #0]
 800b81e:	f7ff ba6b 	b.w	800acf8 <_strtod_l+0x90>
 800b822:	2a65      	cmp	r2, #101	; 0x65
 800b824:	f43f ab5f 	beq.w	800aee6 <_strtod_l+0x27e>
 800b828:	2a45      	cmp	r2, #69	; 0x45
 800b82a:	f43f ab5c 	beq.w	800aee6 <_strtod_l+0x27e>
 800b82e:	2301      	movs	r3, #1
 800b830:	f7ff bb94 	b.w	800af5c <_strtod_l+0x2f4>
 800b834:	f3af 8000 	nop.w
 800b838:	94a03595 	.word	0x94a03595
 800b83c:	3fdfffff 	.word	0x3fdfffff
 800b840:	35afe535 	.word	0x35afe535
 800b844:	3fe00000 	.word	0x3fe00000
 800b848:	ffc00000 	.word	0xffc00000
 800b84c:	41dfffff 	.word	0x41dfffff
 800b850:	94a03595 	.word	0x94a03595
 800b854:	3fcfffff 	.word	0x3fcfffff
 800b858:	3ff00000 	.word	0x3ff00000
 800b85c:	7ff00000 	.word	0x7ff00000
 800b860:	7fe00000 	.word	0x7fe00000
 800b864:	7c9fffff 	.word	0x7c9fffff
 800b868:	3fe00000 	.word	0x3fe00000
 800b86c:	bff00000 	.word	0xbff00000
 800b870:	7fefffff 	.word	0x7fefffff

0800b874 <_strtod_r>:
 800b874:	4b01      	ldr	r3, [pc, #4]	; (800b87c <_strtod_r+0x8>)
 800b876:	f7ff b9f7 	b.w	800ac68 <_strtod_l>
 800b87a:	bf00      	nop
 800b87c:	20000088 	.word	0x20000088

0800b880 <strtod>:
 800b880:	460a      	mov	r2, r1
 800b882:	4601      	mov	r1, r0
 800b884:	4802      	ldr	r0, [pc, #8]	; (800b890 <strtod+0x10>)
 800b886:	4b03      	ldr	r3, [pc, #12]	; (800b894 <strtod+0x14>)
 800b888:	6800      	ldr	r0, [r0, #0]
 800b88a:	f7ff b9ed 	b.w	800ac68 <_strtod_l>
 800b88e:	bf00      	nop
 800b890:	20000020 	.word	0x20000020
 800b894:	20000088 	.word	0x20000088

0800b898 <strtok>:
 800b898:	4b16      	ldr	r3, [pc, #88]	; (800b8f4 <strtok+0x5c>)
 800b89a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b89c:	681e      	ldr	r6, [r3, #0]
 800b89e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b8a0:	4605      	mov	r5, r0
 800b8a2:	b9fc      	cbnz	r4, 800b8e4 <strtok+0x4c>
 800b8a4:	2050      	movs	r0, #80	; 0x50
 800b8a6:	9101      	str	r1, [sp, #4]
 800b8a8:	f001 faf6 	bl	800ce98 <malloc>
 800b8ac:	9901      	ldr	r1, [sp, #4]
 800b8ae:	65b0      	str	r0, [r6, #88]	; 0x58
 800b8b0:	4602      	mov	r2, r0
 800b8b2:	b920      	cbnz	r0, 800b8be <strtok+0x26>
 800b8b4:	4b10      	ldr	r3, [pc, #64]	; (800b8f8 <strtok+0x60>)
 800b8b6:	4811      	ldr	r0, [pc, #68]	; (800b8fc <strtok+0x64>)
 800b8b8:	2157      	movs	r1, #87	; 0x57
 800b8ba:	f000 f8cd 	bl	800ba58 <__assert_func>
 800b8be:	e9c0 4400 	strd	r4, r4, [r0]
 800b8c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b8c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b8ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b8ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b8d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b8d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b8da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b8de:	6184      	str	r4, [r0, #24]
 800b8e0:	7704      	strb	r4, [r0, #28]
 800b8e2:	6244      	str	r4, [r0, #36]	; 0x24
 800b8e4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b8e6:	2301      	movs	r3, #1
 800b8e8:	4628      	mov	r0, r5
 800b8ea:	b002      	add	sp, #8
 800b8ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b8f0:	f000 b806 	b.w	800b900 <__strtok_r>
 800b8f4:	20000020 	.word	0x20000020
 800b8f8:	0800f990 	.word	0x0800f990
 800b8fc:	0800f9a7 	.word	0x0800f9a7

0800b900 <__strtok_r>:
 800b900:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b902:	b908      	cbnz	r0, 800b908 <__strtok_r+0x8>
 800b904:	6810      	ldr	r0, [r2, #0]
 800b906:	b188      	cbz	r0, 800b92c <__strtok_r+0x2c>
 800b908:	4604      	mov	r4, r0
 800b90a:	4620      	mov	r0, r4
 800b90c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b910:	460f      	mov	r7, r1
 800b912:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b916:	b91e      	cbnz	r6, 800b920 <__strtok_r+0x20>
 800b918:	b965      	cbnz	r5, 800b934 <__strtok_r+0x34>
 800b91a:	6015      	str	r5, [r2, #0]
 800b91c:	4628      	mov	r0, r5
 800b91e:	e005      	b.n	800b92c <__strtok_r+0x2c>
 800b920:	42b5      	cmp	r5, r6
 800b922:	d1f6      	bne.n	800b912 <__strtok_r+0x12>
 800b924:	2b00      	cmp	r3, #0
 800b926:	d1f0      	bne.n	800b90a <__strtok_r+0xa>
 800b928:	6014      	str	r4, [r2, #0]
 800b92a:	7003      	strb	r3, [r0, #0]
 800b92c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b92e:	461c      	mov	r4, r3
 800b930:	e00c      	b.n	800b94c <__strtok_r+0x4c>
 800b932:	b915      	cbnz	r5, 800b93a <__strtok_r+0x3a>
 800b934:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b938:	460e      	mov	r6, r1
 800b93a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b93e:	42ab      	cmp	r3, r5
 800b940:	d1f7      	bne.n	800b932 <__strtok_r+0x32>
 800b942:	2b00      	cmp	r3, #0
 800b944:	d0f3      	beq.n	800b92e <__strtok_r+0x2e>
 800b946:	2300      	movs	r3, #0
 800b948:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b94c:	6014      	str	r4, [r2, #0]
 800b94e:	e7ed      	b.n	800b92c <__strtok_r+0x2c>

0800b950 <_strtol_l.constprop.0>:
 800b950:	2b01      	cmp	r3, #1
 800b952:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b956:	d001      	beq.n	800b95c <_strtol_l.constprop.0+0xc>
 800b958:	2b24      	cmp	r3, #36	; 0x24
 800b95a:	d906      	bls.n	800b96a <_strtol_l.constprop.0+0x1a>
 800b95c:	f7fe fa94 	bl	8009e88 <__errno>
 800b960:	2316      	movs	r3, #22
 800b962:	6003      	str	r3, [r0, #0]
 800b964:	2000      	movs	r0, #0
 800b966:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b96a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800ba50 <_strtol_l.constprop.0+0x100>
 800b96e:	460d      	mov	r5, r1
 800b970:	462e      	mov	r6, r5
 800b972:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b976:	f814 700c 	ldrb.w	r7, [r4, ip]
 800b97a:	f017 0708 	ands.w	r7, r7, #8
 800b97e:	d1f7      	bne.n	800b970 <_strtol_l.constprop.0+0x20>
 800b980:	2c2d      	cmp	r4, #45	; 0x2d
 800b982:	d132      	bne.n	800b9ea <_strtol_l.constprop.0+0x9a>
 800b984:	782c      	ldrb	r4, [r5, #0]
 800b986:	2701      	movs	r7, #1
 800b988:	1cb5      	adds	r5, r6, #2
 800b98a:	2b00      	cmp	r3, #0
 800b98c:	d05b      	beq.n	800ba46 <_strtol_l.constprop.0+0xf6>
 800b98e:	2b10      	cmp	r3, #16
 800b990:	d109      	bne.n	800b9a6 <_strtol_l.constprop.0+0x56>
 800b992:	2c30      	cmp	r4, #48	; 0x30
 800b994:	d107      	bne.n	800b9a6 <_strtol_l.constprop.0+0x56>
 800b996:	782c      	ldrb	r4, [r5, #0]
 800b998:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800b99c:	2c58      	cmp	r4, #88	; 0x58
 800b99e:	d14d      	bne.n	800ba3c <_strtol_l.constprop.0+0xec>
 800b9a0:	786c      	ldrb	r4, [r5, #1]
 800b9a2:	2310      	movs	r3, #16
 800b9a4:	3502      	adds	r5, #2
 800b9a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800b9aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800b9ae:	f04f 0c00 	mov.w	ip, #0
 800b9b2:	fbb8 f9f3 	udiv	r9, r8, r3
 800b9b6:	4666      	mov	r6, ip
 800b9b8:	fb03 8a19 	mls	sl, r3, r9, r8
 800b9bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800b9c0:	f1be 0f09 	cmp.w	lr, #9
 800b9c4:	d816      	bhi.n	800b9f4 <_strtol_l.constprop.0+0xa4>
 800b9c6:	4674      	mov	r4, lr
 800b9c8:	42a3      	cmp	r3, r4
 800b9ca:	dd24      	ble.n	800ba16 <_strtol_l.constprop.0+0xc6>
 800b9cc:	f1bc 0f00 	cmp.w	ip, #0
 800b9d0:	db1e      	blt.n	800ba10 <_strtol_l.constprop.0+0xc0>
 800b9d2:	45b1      	cmp	r9, r6
 800b9d4:	d31c      	bcc.n	800ba10 <_strtol_l.constprop.0+0xc0>
 800b9d6:	d101      	bne.n	800b9dc <_strtol_l.constprop.0+0x8c>
 800b9d8:	45a2      	cmp	sl, r4
 800b9da:	db19      	blt.n	800ba10 <_strtol_l.constprop.0+0xc0>
 800b9dc:	fb06 4603 	mla	r6, r6, r3, r4
 800b9e0:	f04f 0c01 	mov.w	ip, #1
 800b9e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9e8:	e7e8      	b.n	800b9bc <_strtol_l.constprop.0+0x6c>
 800b9ea:	2c2b      	cmp	r4, #43	; 0x2b
 800b9ec:	bf04      	itt	eq
 800b9ee:	782c      	ldrbeq	r4, [r5, #0]
 800b9f0:	1cb5      	addeq	r5, r6, #2
 800b9f2:	e7ca      	b.n	800b98a <_strtol_l.constprop.0+0x3a>
 800b9f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800b9f8:	f1be 0f19 	cmp.w	lr, #25
 800b9fc:	d801      	bhi.n	800ba02 <_strtol_l.constprop.0+0xb2>
 800b9fe:	3c37      	subs	r4, #55	; 0x37
 800ba00:	e7e2      	b.n	800b9c8 <_strtol_l.constprop.0+0x78>
 800ba02:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ba06:	f1be 0f19 	cmp.w	lr, #25
 800ba0a:	d804      	bhi.n	800ba16 <_strtol_l.constprop.0+0xc6>
 800ba0c:	3c57      	subs	r4, #87	; 0x57
 800ba0e:	e7db      	b.n	800b9c8 <_strtol_l.constprop.0+0x78>
 800ba10:	f04f 3cff 	mov.w	ip, #4294967295
 800ba14:	e7e6      	b.n	800b9e4 <_strtol_l.constprop.0+0x94>
 800ba16:	f1bc 0f00 	cmp.w	ip, #0
 800ba1a:	da05      	bge.n	800ba28 <_strtol_l.constprop.0+0xd8>
 800ba1c:	2322      	movs	r3, #34	; 0x22
 800ba1e:	6003      	str	r3, [r0, #0]
 800ba20:	4646      	mov	r6, r8
 800ba22:	b942      	cbnz	r2, 800ba36 <_strtol_l.constprop.0+0xe6>
 800ba24:	4630      	mov	r0, r6
 800ba26:	e79e      	b.n	800b966 <_strtol_l.constprop.0+0x16>
 800ba28:	b107      	cbz	r7, 800ba2c <_strtol_l.constprop.0+0xdc>
 800ba2a:	4276      	negs	r6, r6
 800ba2c:	2a00      	cmp	r2, #0
 800ba2e:	d0f9      	beq.n	800ba24 <_strtol_l.constprop.0+0xd4>
 800ba30:	f1bc 0f00 	cmp.w	ip, #0
 800ba34:	d000      	beq.n	800ba38 <_strtol_l.constprop.0+0xe8>
 800ba36:	1e69      	subs	r1, r5, #1
 800ba38:	6011      	str	r1, [r2, #0]
 800ba3a:	e7f3      	b.n	800ba24 <_strtol_l.constprop.0+0xd4>
 800ba3c:	2430      	movs	r4, #48	; 0x30
 800ba3e:	2b00      	cmp	r3, #0
 800ba40:	d1b1      	bne.n	800b9a6 <_strtol_l.constprop.0+0x56>
 800ba42:	2308      	movs	r3, #8
 800ba44:	e7af      	b.n	800b9a6 <_strtol_l.constprop.0+0x56>
 800ba46:	2c30      	cmp	r4, #48	; 0x30
 800ba48:	d0a5      	beq.n	800b996 <_strtol_l.constprop.0+0x46>
 800ba4a:	230a      	movs	r3, #10
 800ba4c:	e7ab      	b.n	800b9a6 <_strtol_l.constprop.0+0x56>
 800ba4e:	bf00      	nop
 800ba50:	0800fa41 	.word	0x0800fa41

0800ba54 <_strtol_r>:
 800ba54:	f7ff bf7c 	b.w	800b950 <_strtol_l.constprop.0>

0800ba58 <__assert_func>:
 800ba58:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ba5a:	4614      	mov	r4, r2
 800ba5c:	461a      	mov	r2, r3
 800ba5e:	4b09      	ldr	r3, [pc, #36]	; (800ba84 <__assert_func+0x2c>)
 800ba60:	681b      	ldr	r3, [r3, #0]
 800ba62:	4605      	mov	r5, r0
 800ba64:	68d8      	ldr	r0, [r3, #12]
 800ba66:	b14c      	cbz	r4, 800ba7c <__assert_func+0x24>
 800ba68:	4b07      	ldr	r3, [pc, #28]	; (800ba88 <__assert_func+0x30>)
 800ba6a:	9100      	str	r1, [sp, #0]
 800ba6c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ba70:	4906      	ldr	r1, [pc, #24]	; (800ba8c <__assert_func+0x34>)
 800ba72:	462b      	mov	r3, r5
 800ba74:	f000 fe8a 	bl	800c78c <fiprintf>
 800ba78:	f002 fba0 	bl	800e1bc <abort>
 800ba7c:	4b04      	ldr	r3, [pc, #16]	; (800ba90 <__assert_func+0x38>)
 800ba7e:	461c      	mov	r4, r3
 800ba80:	e7f3      	b.n	800ba6a <__assert_func+0x12>
 800ba82:	bf00      	nop
 800ba84:	20000020 	.word	0x20000020
 800ba88:	0800fa04 	.word	0x0800fa04
 800ba8c:	0800fa11 	.word	0x0800fa11
 800ba90:	0800fa3f 	.word	0x0800fa3f

0800ba94 <quorem>:
 800ba94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba98:	6903      	ldr	r3, [r0, #16]
 800ba9a:	690c      	ldr	r4, [r1, #16]
 800ba9c:	42a3      	cmp	r3, r4
 800ba9e:	4607      	mov	r7, r0
 800baa0:	f2c0 8081 	blt.w	800bba6 <quorem+0x112>
 800baa4:	3c01      	subs	r4, #1
 800baa6:	f101 0814 	add.w	r8, r1, #20
 800baaa:	f100 0514 	add.w	r5, r0, #20
 800baae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bab2:	9301      	str	r3, [sp, #4]
 800bab4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bab8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800babc:	3301      	adds	r3, #1
 800babe:	429a      	cmp	r2, r3
 800bac0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bac4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bac8:	fbb2 f6f3 	udiv	r6, r2, r3
 800bacc:	d331      	bcc.n	800bb32 <quorem+0x9e>
 800bace:	f04f 0e00 	mov.w	lr, #0
 800bad2:	4640      	mov	r0, r8
 800bad4:	46ac      	mov	ip, r5
 800bad6:	46f2      	mov	sl, lr
 800bad8:	f850 2b04 	ldr.w	r2, [r0], #4
 800badc:	b293      	uxth	r3, r2
 800bade:	fb06 e303 	mla	r3, r6, r3, lr
 800bae2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bae6:	b29b      	uxth	r3, r3
 800bae8:	ebaa 0303 	sub.w	r3, sl, r3
 800baec:	f8dc a000 	ldr.w	sl, [ip]
 800baf0:	0c12      	lsrs	r2, r2, #16
 800baf2:	fa13 f38a 	uxtah	r3, r3, sl
 800baf6:	fb06 e202 	mla	r2, r6, r2, lr
 800bafa:	9300      	str	r3, [sp, #0]
 800bafc:	9b00      	ldr	r3, [sp, #0]
 800bafe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb02:	b292      	uxth	r2, r2
 800bb04:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bb08:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb0c:	f8bd 3000 	ldrh.w	r3, [sp]
 800bb10:	4581      	cmp	r9, r0
 800bb12:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb16:	f84c 3b04 	str.w	r3, [ip], #4
 800bb1a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bb1e:	d2db      	bcs.n	800bad8 <quorem+0x44>
 800bb20:	f855 300b 	ldr.w	r3, [r5, fp]
 800bb24:	b92b      	cbnz	r3, 800bb32 <quorem+0x9e>
 800bb26:	9b01      	ldr	r3, [sp, #4]
 800bb28:	3b04      	subs	r3, #4
 800bb2a:	429d      	cmp	r5, r3
 800bb2c:	461a      	mov	r2, r3
 800bb2e:	d32e      	bcc.n	800bb8e <quorem+0xfa>
 800bb30:	613c      	str	r4, [r7, #16]
 800bb32:	4638      	mov	r0, r7
 800bb34:	f001 fca4 	bl	800d480 <__mcmp>
 800bb38:	2800      	cmp	r0, #0
 800bb3a:	db24      	blt.n	800bb86 <quorem+0xf2>
 800bb3c:	3601      	adds	r6, #1
 800bb3e:	4628      	mov	r0, r5
 800bb40:	f04f 0c00 	mov.w	ip, #0
 800bb44:	f858 2b04 	ldr.w	r2, [r8], #4
 800bb48:	f8d0 e000 	ldr.w	lr, [r0]
 800bb4c:	b293      	uxth	r3, r2
 800bb4e:	ebac 0303 	sub.w	r3, ip, r3
 800bb52:	0c12      	lsrs	r2, r2, #16
 800bb54:	fa13 f38e 	uxtah	r3, r3, lr
 800bb58:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bb5c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb60:	b29b      	uxth	r3, r3
 800bb62:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb66:	45c1      	cmp	r9, r8
 800bb68:	f840 3b04 	str.w	r3, [r0], #4
 800bb6c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bb70:	d2e8      	bcs.n	800bb44 <quorem+0xb0>
 800bb72:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb76:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb7a:	b922      	cbnz	r2, 800bb86 <quorem+0xf2>
 800bb7c:	3b04      	subs	r3, #4
 800bb7e:	429d      	cmp	r5, r3
 800bb80:	461a      	mov	r2, r3
 800bb82:	d30a      	bcc.n	800bb9a <quorem+0x106>
 800bb84:	613c      	str	r4, [r7, #16]
 800bb86:	4630      	mov	r0, r6
 800bb88:	b003      	add	sp, #12
 800bb8a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb8e:	6812      	ldr	r2, [r2, #0]
 800bb90:	3b04      	subs	r3, #4
 800bb92:	2a00      	cmp	r2, #0
 800bb94:	d1cc      	bne.n	800bb30 <quorem+0x9c>
 800bb96:	3c01      	subs	r4, #1
 800bb98:	e7c7      	b.n	800bb2a <quorem+0x96>
 800bb9a:	6812      	ldr	r2, [r2, #0]
 800bb9c:	3b04      	subs	r3, #4
 800bb9e:	2a00      	cmp	r2, #0
 800bba0:	d1f0      	bne.n	800bb84 <quorem+0xf0>
 800bba2:	3c01      	subs	r4, #1
 800bba4:	e7eb      	b.n	800bb7e <quorem+0xea>
 800bba6:	2000      	movs	r0, #0
 800bba8:	e7ee      	b.n	800bb88 <quorem+0xf4>
 800bbaa:	0000      	movs	r0, r0
 800bbac:	0000      	movs	r0, r0
	...

0800bbb0 <_dtoa_r>:
 800bbb0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbb4:	ed2d 8b04 	vpush	{d8-d9}
 800bbb8:	ec57 6b10 	vmov	r6, r7, d0
 800bbbc:	b093      	sub	sp, #76	; 0x4c
 800bbbe:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bbc0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bbc4:	9106      	str	r1, [sp, #24]
 800bbc6:	ee10 aa10 	vmov	sl, s0
 800bbca:	4604      	mov	r4, r0
 800bbcc:	9209      	str	r2, [sp, #36]	; 0x24
 800bbce:	930c      	str	r3, [sp, #48]	; 0x30
 800bbd0:	46bb      	mov	fp, r7
 800bbd2:	b975      	cbnz	r5, 800bbf2 <_dtoa_r+0x42>
 800bbd4:	2010      	movs	r0, #16
 800bbd6:	f001 f95f 	bl	800ce98 <malloc>
 800bbda:	4602      	mov	r2, r0
 800bbdc:	6260      	str	r0, [r4, #36]	; 0x24
 800bbde:	b920      	cbnz	r0, 800bbea <_dtoa_r+0x3a>
 800bbe0:	4ba7      	ldr	r3, [pc, #668]	; (800be80 <_dtoa_r+0x2d0>)
 800bbe2:	21ea      	movs	r1, #234	; 0xea
 800bbe4:	48a7      	ldr	r0, [pc, #668]	; (800be84 <_dtoa_r+0x2d4>)
 800bbe6:	f7ff ff37 	bl	800ba58 <__assert_func>
 800bbea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bbee:	6005      	str	r5, [r0, #0]
 800bbf0:	60c5      	str	r5, [r0, #12]
 800bbf2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bbf4:	6819      	ldr	r1, [r3, #0]
 800bbf6:	b151      	cbz	r1, 800bc0e <_dtoa_r+0x5e>
 800bbf8:	685a      	ldr	r2, [r3, #4]
 800bbfa:	604a      	str	r2, [r1, #4]
 800bbfc:	2301      	movs	r3, #1
 800bbfe:	4093      	lsls	r3, r2
 800bc00:	608b      	str	r3, [r1, #8]
 800bc02:	4620      	mov	r0, r4
 800bc04:	f001 f9b0 	bl	800cf68 <_Bfree>
 800bc08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc0a:	2200      	movs	r2, #0
 800bc0c:	601a      	str	r2, [r3, #0]
 800bc0e:	1e3b      	subs	r3, r7, #0
 800bc10:	bfaa      	itet	ge
 800bc12:	2300      	movge	r3, #0
 800bc14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bc18:	f8c8 3000 	strge.w	r3, [r8]
 800bc1c:	4b9a      	ldr	r3, [pc, #616]	; (800be88 <_dtoa_r+0x2d8>)
 800bc1e:	bfbc      	itt	lt
 800bc20:	2201      	movlt	r2, #1
 800bc22:	f8c8 2000 	strlt.w	r2, [r8]
 800bc26:	ea33 030b 	bics.w	r3, r3, fp
 800bc2a:	d11b      	bne.n	800bc64 <_dtoa_r+0xb4>
 800bc2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800bc32:	6013      	str	r3, [r2, #0]
 800bc34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bc38:	4333      	orrs	r3, r6
 800bc3a:	f000 8592 	beq.w	800c762 <_dtoa_r+0xbb2>
 800bc3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc40:	b963      	cbnz	r3, 800bc5c <_dtoa_r+0xac>
 800bc42:	4b92      	ldr	r3, [pc, #584]	; (800be8c <_dtoa_r+0x2dc>)
 800bc44:	e022      	b.n	800bc8c <_dtoa_r+0xdc>
 800bc46:	4b92      	ldr	r3, [pc, #584]	; (800be90 <_dtoa_r+0x2e0>)
 800bc48:	9301      	str	r3, [sp, #4]
 800bc4a:	3308      	adds	r3, #8
 800bc4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bc4e:	6013      	str	r3, [r2, #0]
 800bc50:	9801      	ldr	r0, [sp, #4]
 800bc52:	b013      	add	sp, #76	; 0x4c
 800bc54:	ecbd 8b04 	vpop	{d8-d9}
 800bc58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc5c:	4b8b      	ldr	r3, [pc, #556]	; (800be8c <_dtoa_r+0x2dc>)
 800bc5e:	9301      	str	r3, [sp, #4]
 800bc60:	3303      	adds	r3, #3
 800bc62:	e7f3      	b.n	800bc4c <_dtoa_r+0x9c>
 800bc64:	2200      	movs	r2, #0
 800bc66:	2300      	movs	r3, #0
 800bc68:	4650      	mov	r0, sl
 800bc6a:	4659      	mov	r1, fp
 800bc6c:	f7f4 ff2c 	bl	8000ac8 <__aeabi_dcmpeq>
 800bc70:	ec4b ab19 	vmov	d9, sl, fp
 800bc74:	4680      	mov	r8, r0
 800bc76:	b158      	cbz	r0, 800bc90 <_dtoa_r+0xe0>
 800bc78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bc7a:	2301      	movs	r3, #1
 800bc7c:	6013      	str	r3, [r2, #0]
 800bc7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bc80:	2b00      	cmp	r3, #0
 800bc82:	f000 856b 	beq.w	800c75c <_dtoa_r+0xbac>
 800bc86:	4883      	ldr	r0, [pc, #524]	; (800be94 <_dtoa_r+0x2e4>)
 800bc88:	6018      	str	r0, [r3, #0]
 800bc8a:	1e43      	subs	r3, r0, #1
 800bc8c:	9301      	str	r3, [sp, #4]
 800bc8e:	e7df      	b.n	800bc50 <_dtoa_r+0xa0>
 800bc90:	ec4b ab10 	vmov	d0, sl, fp
 800bc94:	aa10      	add	r2, sp, #64	; 0x40
 800bc96:	a911      	add	r1, sp, #68	; 0x44
 800bc98:	4620      	mov	r0, r4
 800bc9a:	f001 fd13 	bl	800d6c4 <__d2b>
 800bc9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bca2:	ee08 0a10 	vmov	s16, r0
 800bca6:	2d00      	cmp	r5, #0
 800bca8:	f000 8084 	beq.w	800bdb4 <_dtoa_r+0x204>
 800bcac:	ee19 3a90 	vmov	r3, s19
 800bcb0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bcb4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bcb8:	4656      	mov	r6, sl
 800bcba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bcbe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bcc2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bcc6:	4b74      	ldr	r3, [pc, #464]	; (800be98 <_dtoa_r+0x2e8>)
 800bcc8:	2200      	movs	r2, #0
 800bcca:	4630      	mov	r0, r6
 800bccc:	4639      	mov	r1, r7
 800bcce:	f7f4 fadb 	bl	8000288 <__aeabi_dsub>
 800bcd2:	a365      	add	r3, pc, #404	; (adr r3, 800be68 <_dtoa_r+0x2b8>)
 800bcd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcd8:	f7f4 fc8e 	bl	80005f8 <__aeabi_dmul>
 800bcdc:	a364      	add	r3, pc, #400	; (adr r3, 800be70 <_dtoa_r+0x2c0>)
 800bcde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bce2:	f7f4 fad3 	bl	800028c <__adddf3>
 800bce6:	4606      	mov	r6, r0
 800bce8:	4628      	mov	r0, r5
 800bcea:	460f      	mov	r7, r1
 800bcec:	f7f4 fc1a 	bl	8000524 <__aeabi_i2d>
 800bcf0:	a361      	add	r3, pc, #388	; (adr r3, 800be78 <_dtoa_r+0x2c8>)
 800bcf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bcf6:	f7f4 fc7f 	bl	80005f8 <__aeabi_dmul>
 800bcfa:	4602      	mov	r2, r0
 800bcfc:	460b      	mov	r3, r1
 800bcfe:	4630      	mov	r0, r6
 800bd00:	4639      	mov	r1, r7
 800bd02:	f7f4 fac3 	bl	800028c <__adddf3>
 800bd06:	4606      	mov	r6, r0
 800bd08:	460f      	mov	r7, r1
 800bd0a:	f7f4 ff25 	bl	8000b58 <__aeabi_d2iz>
 800bd0e:	2200      	movs	r2, #0
 800bd10:	9000      	str	r0, [sp, #0]
 800bd12:	2300      	movs	r3, #0
 800bd14:	4630      	mov	r0, r6
 800bd16:	4639      	mov	r1, r7
 800bd18:	f7f4 fee0 	bl	8000adc <__aeabi_dcmplt>
 800bd1c:	b150      	cbz	r0, 800bd34 <_dtoa_r+0x184>
 800bd1e:	9800      	ldr	r0, [sp, #0]
 800bd20:	f7f4 fc00 	bl	8000524 <__aeabi_i2d>
 800bd24:	4632      	mov	r2, r6
 800bd26:	463b      	mov	r3, r7
 800bd28:	f7f4 fece 	bl	8000ac8 <__aeabi_dcmpeq>
 800bd2c:	b910      	cbnz	r0, 800bd34 <_dtoa_r+0x184>
 800bd2e:	9b00      	ldr	r3, [sp, #0]
 800bd30:	3b01      	subs	r3, #1
 800bd32:	9300      	str	r3, [sp, #0]
 800bd34:	9b00      	ldr	r3, [sp, #0]
 800bd36:	2b16      	cmp	r3, #22
 800bd38:	d85a      	bhi.n	800bdf0 <_dtoa_r+0x240>
 800bd3a:	9a00      	ldr	r2, [sp, #0]
 800bd3c:	4b57      	ldr	r3, [pc, #348]	; (800be9c <_dtoa_r+0x2ec>)
 800bd3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bd42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd46:	ec51 0b19 	vmov	r0, r1, d9
 800bd4a:	f7f4 fec7 	bl	8000adc <__aeabi_dcmplt>
 800bd4e:	2800      	cmp	r0, #0
 800bd50:	d050      	beq.n	800bdf4 <_dtoa_r+0x244>
 800bd52:	9b00      	ldr	r3, [sp, #0]
 800bd54:	3b01      	subs	r3, #1
 800bd56:	9300      	str	r3, [sp, #0]
 800bd58:	2300      	movs	r3, #0
 800bd5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800bd5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bd5e:	1b5d      	subs	r5, r3, r5
 800bd60:	1e6b      	subs	r3, r5, #1
 800bd62:	9305      	str	r3, [sp, #20]
 800bd64:	bf45      	ittet	mi
 800bd66:	f1c5 0301 	rsbmi	r3, r5, #1
 800bd6a:	9304      	strmi	r3, [sp, #16]
 800bd6c:	2300      	movpl	r3, #0
 800bd6e:	2300      	movmi	r3, #0
 800bd70:	bf4c      	ite	mi
 800bd72:	9305      	strmi	r3, [sp, #20]
 800bd74:	9304      	strpl	r3, [sp, #16]
 800bd76:	9b00      	ldr	r3, [sp, #0]
 800bd78:	2b00      	cmp	r3, #0
 800bd7a:	db3d      	blt.n	800bdf8 <_dtoa_r+0x248>
 800bd7c:	9b05      	ldr	r3, [sp, #20]
 800bd7e:	9a00      	ldr	r2, [sp, #0]
 800bd80:	920a      	str	r2, [sp, #40]	; 0x28
 800bd82:	4413      	add	r3, r2
 800bd84:	9305      	str	r3, [sp, #20]
 800bd86:	2300      	movs	r3, #0
 800bd88:	9307      	str	r3, [sp, #28]
 800bd8a:	9b06      	ldr	r3, [sp, #24]
 800bd8c:	2b09      	cmp	r3, #9
 800bd8e:	f200 8089 	bhi.w	800bea4 <_dtoa_r+0x2f4>
 800bd92:	2b05      	cmp	r3, #5
 800bd94:	bfc4      	itt	gt
 800bd96:	3b04      	subgt	r3, #4
 800bd98:	9306      	strgt	r3, [sp, #24]
 800bd9a:	9b06      	ldr	r3, [sp, #24]
 800bd9c:	f1a3 0302 	sub.w	r3, r3, #2
 800bda0:	bfcc      	ite	gt
 800bda2:	2500      	movgt	r5, #0
 800bda4:	2501      	movle	r5, #1
 800bda6:	2b03      	cmp	r3, #3
 800bda8:	f200 8087 	bhi.w	800beba <_dtoa_r+0x30a>
 800bdac:	e8df f003 	tbb	[pc, r3]
 800bdb0:	59383a2d 	.word	0x59383a2d
 800bdb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800bdb8:	441d      	add	r5, r3
 800bdba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800bdbe:	2b20      	cmp	r3, #32
 800bdc0:	bfc1      	itttt	gt
 800bdc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800bdc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800bdca:	fa0b f303 	lslgt.w	r3, fp, r3
 800bdce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800bdd2:	bfda      	itte	le
 800bdd4:	f1c3 0320 	rsble	r3, r3, #32
 800bdd8:	fa06 f003 	lslle.w	r0, r6, r3
 800bddc:	4318      	orrgt	r0, r3
 800bdde:	f7f4 fb91 	bl	8000504 <__aeabi_ui2d>
 800bde2:	2301      	movs	r3, #1
 800bde4:	4606      	mov	r6, r0
 800bde6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800bdea:	3d01      	subs	r5, #1
 800bdec:	930e      	str	r3, [sp, #56]	; 0x38
 800bdee:	e76a      	b.n	800bcc6 <_dtoa_r+0x116>
 800bdf0:	2301      	movs	r3, #1
 800bdf2:	e7b2      	b.n	800bd5a <_dtoa_r+0x1aa>
 800bdf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800bdf6:	e7b1      	b.n	800bd5c <_dtoa_r+0x1ac>
 800bdf8:	9b04      	ldr	r3, [sp, #16]
 800bdfa:	9a00      	ldr	r2, [sp, #0]
 800bdfc:	1a9b      	subs	r3, r3, r2
 800bdfe:	9304      	str	r3, [sp, #16]
 800be00:	4253      	negs	r3, r2
 800be02:	9307      	str	r3, [sp, #28]
 800be04:	2300      	movs	r3, #0
 800be06:	930a      	str	r3, [sp, #40]	; 0x28
 800be08:	e7bf      	b.n	800bd8a <_dtoa_r+0x1da>
 800be0a:	2300      	movs	r3, #0
 800be0c:	9308      	str	r3, [sp, #32]
 800be0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be10:	2b00      	cmp	r3, #0
 800be12:	dc55      	bgt.n	800bec0 <_dtoa_r+0x310>
 800be14:	2301      	movs	r3, #1
 800be16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800be1a:	461a      	mov	r2, r3
 800be1c:	9209      	str	r2, [sp, #36]	; 0x24
 800be1e:	e00c      	b.n	800be3a <_dtoa_r+0x28a>
 800be20:	2301      	movs	r3, #1
 800be22:	e7f3      	b.n	800be0c <_dtoa_r+0x25c>
 800be24:	2300      	movs	r3, #0
 800be26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800be28:	9308      	str	r3, [sp, #32]
 800be2a:	9b00      	ldr	r3, [sp, #0]
 800be2c:	4413      	add	r3, r2
 800be2e:	9302      	str	r3, [sp, #8]
 800be30:	3301      	adds	r3, #1
 800be32:	2b01      	cmp	r3, #1
 800be34:	9303      	str	r3, [sp, #12]
 800be36:	bfb8      	it	lt
 800be38:	2301      	movlt	r3, #1
 800be3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800be3c:	2200      	movs	r2, #0
 800be3e:	6042      	str	r2, [r0, #4]
 800be40:	2204      	movs	r2, #4
 800be42:	f102 0614 	add.w	r6, r2, #20
 800be46:	429e      	cmp	r6, r3
 800be48:	6841      	ldr	r1, [r0, #4]
 800be4a:	d93d      	bls.n	800bec8 <_dtoa_r+0x318>
 800be4c:	4620      	mov	r0, r4
 800be4e:	f001 f84b 	bl	800cee8 <_Balloc>
 800be52:	9001      	str	r0, [sp, #4]
 800be54:	2800      	cmp	r0, #0
 800be56:	d13b      	bne.n	800bed0 <_dtoa_r+0x320>
 800be58:	4b11      	ldr	r3, [pc, #68]	; (800bea0 <_dtoa_r+0x2f0>)
 800be5a:	4602      	mov	r2, r0
 800be5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800be60:	e6c0      	b.n	800bbe4 <_dtoa_r+0x34>
 800be62:	2301      	movs	r3, #1
 800be64:	e7df      	b.n	800be26 <_dtoa_r+0x276>
 800be66:	bf00      	nop
 800be68:	636f4361 	.word	0x636f4361
 800be6c:	3fd287a7 	.word	0x3fd287a7
 800be70:	8b60c8b3 	.word	0x8b60c8b3
 800be74:	3fc68a28 	.word	0x3fc68a28
 800be78:	509f79fb 	.word	0x509f79fb
 800be7c:	3fd34413 	.word	0x3fd34413
 800be80:	0800f990 	.word	0x0800f990
 800be84:	0800fb4e 	.word	0x0800fb4e
 800be88:	7ff00000 	.word	0x7ff00000
 800be8c:	0800fb4a 	.word	0x0800fb4a
 800be90:	0800fb41 	.word	0x0800fb41
 800be94:	0800f915 	.word	0x0800f915
 800be98:	3ff80000 	.word	0x3ff80000
 800be9c:	0800fcb8 	.word	0x0800fcb8
 800bea0:	0800fba9 	.word	0x0800fba9
 800bea4:	2501      	movs	r5, #1
 800bea6:	2300      	movs	r3, #0
 800bea8:	9306      	str	r3, [sp, #24]
 800beaa:	9508      	str	r5, [sp, #32]
 800beac:	f04f 33ff 	mov.w	r3, #4294967295
 800beb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800beb4:	2200      	movs	r2, #0
 800beb6:	2312      	movs	r3, #18
 800beb8:	e7b0      	b.n	800be1c <_dtoa_r+0x26c>
 800beba:	2301      	movs	r3, #1
 800bebc:	9308      	str	r3, [sp, #32]
 800bebe:	e7f5      	b.n	800beac <_dtoa_r+0x2fc>
 800bec0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bec2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bec6:	e7b8      	b.n	800be3a <_dtoa_r+0x28a>
 800bec8:	3101      	adds	r1, #1
 800beca:	6041      	str	r1, [r0, #4]
 800becc:	0052      	lsls	r2, r2, #1
 800bece:	e7b8      	b.n	800be42 <_dtoa_r+0x292>
 800bed0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bed2:	9a01      	ldr	r2, [sp, #4]
 800bed4:	601a      	str	r2, [r3, #0]
 800bed6:	9b03      	ldr	r3, [sp, #12]
 800bed8:	2b0e      	cmp	r3, #14
 800beda:	f200 809d 	bhi.w	800c018 <_dtoa_r+0x468>
 800bede:	2d00      	cmp	r5, #0
 800bee0:	f000 809a 	beq.w	800c018 <_dtoa_r+0x468>
 800bee4:	9b00      	ldr	r3, [sp, #0]
 800bee6:	2b00      	cmp	r3, #0
 800bee8:	dd32      	ble.n	800bf50 <_dtoa_r+0x3a0>
 800beea:	4ab7      	ldr	r2, [pc, #732]	; (800c1c8 <_dtoa_r+0x618>)
 800beec:	f003 030f 	and.w	r3, r3, #15
 800bef0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bef4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bef8:	9b00      	ldr	r3, [sp, #0]
 800befa:	05d8      	lsls	r0, r3, #23
 800befc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bf00:	d516      	bpl.n	800bf30 <_dtoa_r+0x380>
 800bf02:	4bb2      	ldr	r3, [pc, #712]	; (800c1cc <_dtoa_r+0x61c>)
 800bf04:	ec51 0b19 	vmov	r0, r1, d9
 800bf08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf0c:	f7f4 fc9e 	bl	800084c <__aeabi_ddiv>
 800bf10:	f007 070f 	and.w	r7, r7, #15
 800bf14:	4682      	mov	sl, r0
 800bf16:	468b      	mov	fp, r1
 800bf18:	2503      	movs	r5, #3
 800bf1a:	4eac      	ldr	r6, [pc, #688]	; (800c1cc <_dtoa_r+0x61c>)
 800bf1c:	b957      	cbnz	r7, 800bf34 <_dtoa_r+0x384>
 800bf1e:	4642      	mov	r2, r8
 800bf20:	464b      	mov	r3, r9
 800bf22:	4650      	mov	r0, sl
 800bf24:	4659      	mov	r1, fp
 800bf26:	f7f4 fc91 	bl	800084c <__aeabi_ddiv>
 800bf2a:	4682      	mov	sl, r0
 800bf2c:	468b      	mov	fp, r1
 800bf2e:	e028      	b.n	800bf82 <_dtoa_r+0x3d2>
 800bf30:	2502      	movs	r5, #2
 800bf32:	e7f2      	b.n	800bf1a <_dtoa_r+0x36a>
 800bf34:	07f9      	lsls	r1, r7, #31
 800bf36:	d508      	bpl.n	800bf4a <_dtoa_r+0x39a>
 800bf38:	4640      	mov	r0, r8
 800bf3a:	4649      	mov	r1, r9
 800bf3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bf40:	f7f4 fb5a 	bl	80005f8 <__aeabi_dmul>
 800bf44:	3501      	adds	r5, #1
 800bf46:	4680      	mov	r8, r0
 800bf48:	4689      	mov	r9, r1
 800bf4a:	107f      	asrs	r7, r7, #1
 800bf4c:	3608      	adds	r6, #8
 800bf4e:	e7e5      	b.n	800bf1c <_dtoa_r+0x36c>
 800bf50:	f000 809b 	beq.w	800c08a <_dtoa_r+0x4da>
 800bf54:	9b00      	ldr	r3, [sp, #0]
 800bf56:	4f9d      	ldr	r7, [pc, #628]	; (800c1cc <_dtoa_r+0x61c>)
 800bf58:	425e      	negs	r6, r3
 800bf5a:	4b9b      	ldr	r3, [pc, #620]	; (800c1c8 <_dtoa_r+0x618>)
 800bf5c:	f006 020f 	and.w	r2, r6, #15
 800bf60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf68:	ec51 0b19 	vmov	r0, r1, d9
 800bf6c:	f7f4 fb44 	bl	80005f8 <__aeabi_dmul>
 800bf70:	1136      	asrs	r6, r6, #4
 800bf72:	4682      	mov	sl, r0
 800bf74:	468b      	mov	fp, r1
 800bf76:	2300      	movs	r3, #0
 800bf78:	2502      	movs	r5, #2
 800bf7a:	2e00      	cmp	r6, #0
 800bf7c:	d17a      	bne.n	800c074 <_dtoa_r+0x4c4>
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d1d3      	bne.n	800bf2a <_dtoa_r+0x37a>
 800bf82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800bf84:	2b00      	cmp	r3, #0
 800bf86:	f000 8082 	beq.w	800c08e <_dtoa_r+0x4de>
 800bf8a:	4b91      	ldr	r3, [pc, #580]	; (800c1d0 <_dtoa_r+0x620>)
 800bf8c:	2200      	movs	r2, #0
 800bf8e:	4650      	mov	r0, sl
 800bf90:	4659      	mov	r1, fp
 800bf92:	f7f4 fda3 	bl	8000adc <__aeabi_dcmplt>
 800bf96:	2800      	cmp	r0, #0
 800bf98:	d079      	beq.n	800c08e <_dtoa_r+0x4de>
 800bf9a:	9b03      	ldr	r3, [sp, #12]
 800bf9c:	2b00      	cmp	r3, #0
 800bf9e:	d076      	beq.n	800c08e <_dtoa_r+0x4de>
 800bfa0:	9b02      	ldr	r3, [sp, #8]
 800bfa2:	2b00      	cmp	r3, #0
 800bfa4:	dd36      	ble.n	800c014 <_dtoa_r+0x464>
 800bfa6:	9b00      	ldr	r3, [sp, #0]
 800bfa8:	4650      	mov	r0, sl
 800bfaa:	4659      	mov	r1, fp
 800bfac:	1e5f      	subs	r7, r3, #1
 800bfae:	2200      	movs	r2, #0
 800bfb0:	4b88      	ldr	r3, [pc, #544]	; (800c1d4 <_dtoa_r+0x624>)
 800bfb2:	f7f4 fb21 	bl	80005f8 <__aeabi_dmul>
 800bfb6:	9e02      	ldr	r6, [sp, #8]
 800bfb8:	4682      	mov	sl, r0
 800bfba:	468b      	mov	fp, r1
 800bfbc:	3501      	adds	r5, #1
 800bfbe:	4628      	mov	r0, r5
 800bfc0:	f7f4 fab0 	bl	8000524 <__aeabi_i2d>
 800bfc4:	4652      	mov	r2, sl
 800bfc6:	465b      	mov	r3, fp
 800bfc8:	f7f4 fb16 	bl	80005f8 <__aeabi_dmul>
 800bfcc:	4b82      	ldr	r3, [pc, #520]	; (800c1d8 <_dtoa_r+0x628>)
 800bfce:	2200      	movs	r2, #0
 800bfd0:	f7f4 f95c 	bl	800028c <__adddf3>
 800bfd4:	46d0      	mov	r8, sl
 800bfd6:	46d9      	mov	r9, fp
 800bfd8:	4682      	mov	sl, r0
 800bfda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800bfde:	2e00      	cmp	r6, #0
 800bfe0:	d158      	bne.n	800c094 <_dtoa_r+0x4e4>
 800bfe2:	4b7e      	ldr	r3, [pc, #504]	; (800c1dc <_dtoa_r+0x62c>)
 800bfe4:	2200      	movs	r2, #0
 800bfe6:	4640      	mov	r0, r8
 800bfe8:	4649      	mov	r1, r9
 800bfea:	f7f4 f94d 	bl	8000288 <__aeabi_dsub>
 800bfee:	4652      	mov	r2, sl
 800bff0:	465b      	mov	r3, fp
 800bff2:	4680      	mov	r8, r0
 800bff4:	4689      	mov	r9, r1
 800bff6:	f7f4 fd8f 	bl	8000b18 <__aeabi_dcmpgt>
 800bffa:	2800      	cmp	r0, #0
 800bffc:	f040 8295 	bne.w	800c52a <_dtoa_r+0x97a>
 800c000:	4652      	mov	r2, sl
 800c002:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c006:	4640      	mov	r0, r8
 800c008:	4649      	mov	r1, r9
 800c00a:	f7f4 fd67 	bl	8000adc <__aeabi_dcmplt>
 800c00e:	2800      	cmp	r0, #0
 800c010:	f040 8289 	bne.w	800c526 <_dtoa_r+0x976>
 800c014:	ec5b ab19 	vmov	sl, fp, d9
 800c018:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c01a:	2b00      	cmp	r3, #0
 800c01c:	f2c0 8148 	blt.w	800c2b0 <_dtoa_r+0x700>
 800c020:	9a00      	ldr	r2, [sp, #0]
 800c022:	2a0e      	cmp	r2, #14
 800c024:	f300 8144 	bgt.w	800c2b0 <_dtoa_r+0x700>
 800c028:	4b67      	ldr	r3, [pc, #412]	; (800c1c8 <_dtoa_r+0x618>)
 800c02a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c02e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c032:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c034:	2b00      	cmp	r3, #0
 800c036:	f280 80d5 	bge.w	800c1e4 <_dtoa_r+0x634>
 800c03a:	9b03      	ldr	r3, [sp, #12]
 800c03c:	2b00      	cmp	r3, #0
 800c03e:	f300 80d1 	bgt.w	800c1e4 <_dtoa_r+0x634>
 800c042:	f040 826f 	bne.w	800c524 <_dtoa_r+0x974>
 800c046:	4b65      	ldr	r3, [pc, #404]	; (800c1dc <_dtoa_r+0x62c>)
 800c048:	2200      	movs	r2, #0
 800c04a:	4640      	mov	r0, r8
 800c04c:	4649      	mov	r1, r9
 800c04e:	f7f4 fad3 	bl	80005f8 <__aeabi_dmul>
 800c052:	4652      	mov	r2, sl
 800c054:	465b      	mov	r3, fp
 800c056:	f7f4 fd55 	bl	8000b04 <__aeabi_dcmpge>
 800c05a:	9e03      	ldr	r6, [sp, #12]
 800c05c:	4637      	mov	r7, r6
 800c05e:	2800      	cmp	r0, #0
 800c060:	f040 8245 	bne.w	800c4ee <_dtoa_r+0x93e>
 800c064:	9d01      	ldr	r5, [sp, #4]
 800c066:	2331      	movs	r3, #49	; 0x31
 800c068:	f805 3b01 	strb.w	r3, [r5], #1
 800c06c:	9b00      	ldr	r3, [sp, #0]
 800c06e:	3301      	adds	r3, #1
 800c070:	9300      	str	r3, [sp, #0]
 800c072:	e240      	b.n	800c4f6 <_dtoa_r+0x946>
 800c074:	07f2      	lsls	r2, r6, #31
 800c076:	d505      	bpl.n	800c084 <_dtoa_r+0x4d4>
 800c078:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c07c:	f7f4 fabc 	bl	80005f8 <__aeabi_dmul>
 800c080:	3501      	adds	r5, #1
 800c082:	2301      	movs	r3, #1
 800c084:	1076      	asrs	r6, r6, #1
 800c086:	3708      	adds	r7, #8
 800c088:	e777      	b.n	800bf7a <_dtoa_r+0x3ca>
 800c08a:	2502      	movs	r5, #2
 800c08c:	e779      	b.n	800bf82 <_dtoa_r+0x3d2>
 800c08e:	9f00      	ldr	r7, [sp, #0]
 800c090:	9e03      	ldr	r6, [sp, #12]
 800c092:	e794      	b.n	800bfbe <_dtoa_r+0x40e>
 800c094:	9901      	ldr	r1, [sp, #4]
 800c096:	4b4c      	ldr	r3, [pc, #304]	; (800c1c8 <_dtoa_r+0x618>)
 800c098:	4431      	add	r1, r6
 800c09a:	910d      	str	r1, [sp, #52]	; 0x34
 800c09c:	9908      	ldr	r1, [sp, #32]
 800c09e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c0a2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c0a6:	2900      	cmp	r1, #0
 800c0a8:	d043      	beq.n	800c132 <_dtoa_r+0x582>
 800c0aa:	494d      	ldr	r1, [pc, #308]	; (800c1e0 <_dtoa_r+0x630>)
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	f7f4 fbcd 	bl	800084c <__aeabi_ddiv>
 800c0b2:	4652      	mov	r2, sl
 800c0b4:	465b      	mov	r3, fp
 800c0b6:	f7f4 f8e7 	bl	8000288 <__aeabi_dsub>
 800c0ba:	9d01      	ldr	r5, [sp, #4]
 800c0bc:	4682      	mov	sl, r0
 800c0be:	468b      	mov	fp, r1
 800c0c0:	4649      	mov	r1, r9
 800c0c2:	4640      	mov	r0, r8
 800c0c4:	f7f4 fd48 	bl	8000b58 <__aeabi_d2iz>
 800c0c8:	4606      	mov	r6, r0
 800c0ca:	f7f4 fa2b 	bl	8000524 <__aeabi_i2d>
 800c0ce:	4602      	mov	r2, r0
 800c0d0:	460b      	mov	r3, r1
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	4649      	mov	r1, r9
 800c0d6:	f7f4 f8d7 	bl	8000288 <__aeabi_dsub>
 800c0da:	3630      	adds	r6, #48	; 0x30
 800c0dc:	f805 6b01 	strb.w	r6, [r5], #1
 800c0e0:	4652      	mov	r2, sl
 800c0e2:	465b      	mov	r3, fp
 800c0e4:	4680      	mov	r8, r0
 800c0e6:	4689      	mov	r9, r1
 800c0e8:	f7f4 fcf8 	bl	8000adc <__aeabi_dcmplt>
 800c0ec:	2800      	cmp	r0, #0
 800c0ee:	d163      	bne.n	800c1b8 <_dtoa_r+0x608>
 800c0f0:	4642      	mov	r2, r8
 800c0f2:	464b      	mov	r3, r9
 800c0f4:	4936      	ldr	r1, [pc, #216]	; (800c1d0 <_dtoa_r+0x620>)
 800c0f6:	2000      	movs	r0, #0
 800c0f8:	f7f4 f8c6 	bl	8000288 <__aeabi_dsub>
 800c0fc:	4652      	mov	r2, sl
 800c0fe:	465b      	mov	r3, fp
 800c100:	f7f4 fcec 	bl	8000adc <__aeabi_dcmplt>
 800c104:	2800      	cmp	r0, #0
 800c106:	f040 80b5 	bne.w	800c274 <_dtoa_r+0x6c4>
 800c10a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c10c:	429d      	cmp	r5, r3
 800c10e:	d081      	beq.n	800c014 <_dtoa_r+0x464>
 800c110:	4b30      	ldr	r3, [pc, #192]	; (800c1d4 <_dtoa_r+0x624>)
 800c112:	2200      	movs	r2, #0
 800c114:	4650      	mov	r0, sl
 800c116:	4659      	mov	r1, fp
 800c118:	f7f4 fa6e 	bl	80005f8 <__aeabi_dmul>
 800c11c:	4b2d      	ldr	r3, [pc, #180]	; (800c1d4 <_dtoa_r+0x624>)
 800c11e:	4682      	mov	sl, r0
 800c120:	468b      	mov	fp, r1
 800c122:	4640      	mov	r0, r8
 800c124:	4649      	mov	r1, r9
 800c126:	2200      	movs	r2, #0
 800c128:	f7f4 fa66 	bl	80005f8 <__aeabi_dmul>
 800c12c:	4680      	mov	r8, r0
 800c12e:	4689      	mov	r9, r1
 800c130:	e7c6      	b.n	800c0c0 <_dtoa_r+0x510>
 800c132:	4650      	mov	r0, sl
 800c134:	4659      	mov	r1, fp
 800c136:	f7f4 fa5f 	bl	80005f8 <__aeabi_dmul>
 800c13a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c13c:	9d01      	ldr	r5, [sp, #4]
 800c13e:	930f      	str	r3, [sp, #60]	; 0x3c
 800c140:	4682      	mov	sl, r0
 800c142:	468b      	mov	fp, r1
 800c144:	4649      	mov	r1, r9
 800c146:	4640      	mov	r0, r8
 800c148:	f7f4 fd06 	bl	8000b58 <__aeabi_d2iz>
 800c14c:	4606      	mov	r6, r0
 800c14e:	f7f4 f9e9 	bl	8000524 <__aeabi_i2d>
 800c152:	3630      	adds	r6, #48	; 0x30
 800c154:	4602      	mov	r2, r0
 800c156:	460b      	mov	r3, r1
 800c158:	4640      	mov	r0, r8
 800c15a:	4649      	mov	r1, r9
 800c15c:	f7f4 f894 	bl	8000288 <__aeabi_dsub>
 800c160:	f805 6b01 	strb.w	r6, [r5], #1
 800c164:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c166:	429d      	cmp	r5, r3
 800c168:	4680      	mov	r8, r0
 800c16a:	4689      	mov	r9, r1
 800c16c:	f04f 0200 	mov.w	r2, #0
 800c170:	d124      	bne.n	800c1bc <_dtoa_r+0x60c>
 800c172:	4b1b      	ldr	r3, [pc, #108]	; (800c1e0 <_dtoa_r+0x630>)
 800c174:	4650      	mov	r0, sl
 800c176:	4659      	mov	r1, fp
 800c178:	f7f4 f888 	bl	800028c <__adddf3>
 800c17c:	4602      	mov	r2, r0
 800c17e:	460b      	mov	r3, r1
 800c180:	4640      	mov	r0, r8
 800c182:	4649      	mov	r1, r9
 800c184:	f7f4 fcc8 	bl	8000b18 <__aeabi_dcmpgt>
 800c188:	2800      	cmp	r0, #0
 800c18a:	d173      	bne.n	800c274 <_dtoa_r+0x6c4>
 800c18c:	4652      	mov	r2, sl
 800c18e:	465b      	mov	r3, fp
 800c190:	4913      	ldr	r1, [pc, #76]	; (800c1e0 <_dtoa_r+0x630>)
 800c192:	2000      	movs	r0, #0
 800c194:	f7f4 f878 	bl	8000288 <__aeabi_dsub>
 800c198:	4602      	mov	r2, r0
 800c19a:	460b      	mov	r3, r1
 800c19c:	4640      	mov	r0, r8
 800c19e:	4649      	mov	r1, r9
 800c1a0:	f7f4 fc9c 	bl	8000adc <__aeabi_dcmplt>
 800c1a4:	2800      	cmp	r0, #0
 800c1a6:	f43f af35 	beq.w	800c014 <_dtoa_r+0x464>
 800c1aa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c1ac:	1e6b      	subs	r3, r5, #1
 800c1ae:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1b0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c1b4:	2b30      	cmp	r3, #48	; 0x30
 800c1b6:	d0f8      	beq.n	800c1aa <_dtoa_r+0x5fa>
 800c1b8:	9700      	str	r7, [sp, #0]
 800c1ba:	e049      	b.n	800c250 <_dtoa_r+0x6a0>
 800c1bc:	4b05      	ldr	r3, [pc, #20]	; (800c1d4 <_dtoa_r+0x624>)
 800c1be:	f7f4 fa1b 	bl	80005f8 <__aeabi_dmul>
 800c1c2:	4680      	mov	r8, r0
 800c1c4:	4689      	mov	r9, r1
 800c1c6:	e7bd      	b.n	800c144 <_dtoa_r+0x594>
 800c1c8:	0800fcb8 	.word	0x0800fcb8
 800c1cc:	0800fc90 	.word	0x0800fc90
 800c1d0:	3ff00000 	.word	0x3ff00000
 800c1d4:	40240000 	.word	0x40240000
 800c1d8:	401c0000 	.word	0x401c0000
 800c1dc:	40140000 	.word	0x40140000
 800c1e0:	3fe00000 	.word	0x3fe00000
 800c1e4:	9d01      	ldr	r5, [sp, #4]
 800c1e6:	4656      	mov	r6, sl
 800c1e8:	465f      	mov	r7, fp
 800c1ea:	4642      	mov	r2, r8
 800c1ec:	464b      	mov	r3, r9
 800c1ee:	4630      	mov	r0, r6
 800c1f0:	4639      	mov	r1, r7
 800c1f2:	f7f4 fb2b 	bl	800084c <__aeabi_ddiv>
 800c1f6:	f7f4 fcaf 	bl	8000b58 <__aeabi_d2iz>
 800c1fa:	4682      	mov	sl, r0
 800c1fc:	f7f4 f992 	bl	8000524 <__aeabi_i2d>
 800c200:	4642      	mov	r2, r8
 800c202:	464b      	mov	r3, r9
 800c204:	f7f4 f9f8 	bl	80005f8 <__aeabi_dmul>
 800c208:	4602      	mov	r2, r0
 800c20a:	460b      	mov	r3, r1
 800c20c:	4630      	mov	r0, r6
 800c20e:	4639      	mov	r1, r7
 800c210:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c214:	f7f4 f838 	bl	8000288 <__aeabi_dsub>
 800c218:	f805 6b01 	strb.w	r6, [r5], #1
 800c21c:	9e01      	ldr	r6, [sp, #4]
 800c21e:	9f03      	ldr	r7, [sp, #12]
 800c220:	1bae      	subs	r6, r5, r6
 800c222:	42b7      	cmp	r7, r6
 800c224:	4602      	mov	r2, r0
 800c226:	460b      	mov	r3, r1
 800c228:	d135      	bne.n	800c296 <_dtoa_r+0x6e6>
 800c22a:	f7f4 f82f 	bl	800028c <__adddf3>
 800c22e:	4642      	mov	r2, r8
 800c230:	464b      	mov	r3, r9
 800c232:	4606      	mov	r6, r0
 800c234:	460f      	mov	r7, r1
 800c236:	f7f4 fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 800c23a:	b9d0      	cbnz	r0, 800c272 <_dtoa_r+0x6c2>
 800c23c:	4642      	mov	r2, r8
 800c23e:	464b      	mov	r3, r9
 800c240:	4630      	mov	r0, r6
 800c242:	4639      	mov	r1, r7
 800c244:	f7f4 fc40 	bl	8000ac8 <__aeabi_dcmpeq>
 800c248:	b110      	cbz	r0, 800c250 <_dtoa_r+0x6a0>
 800c24a:	f01a 0f01 	tst.w	sl, #1
 800c24e:	d110      	bne.n	800c272 <_dtoa_r+0x6c2>
 800c250:	4620      	mov	r0, r4
 800c252:	ee18 1a10 	vmov	r1, s16
 800c256:	f000 fe87 	bl	800cf68 <_Bfree>
 800c25a:	2300      	movs	r3, #0
 800c25c:	9800      	ldr	r0, [sp, #0]
 800c25e:	702b      	strb	r3, [r5, #0]
 800c260:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c262:	3001      	adds	r0, #1
 800c264:	6018      	str	r0, [r3, #0]
 800c266:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c268:	2b00      	cmp	r3, #0
 800c26a:	f43f acf1 	beq.w	800bc50 <_dtoa_r+0xa0>
 800c26e:	601d      	str	r5, [r3, #0]
 800c270:	e4ee      	b.n	800bc50 <_dtoa_r+0xa0>
 800c272:	9f00      	ldr	r7, [sp, #0]
 800c274:	462b      	mov	r3, r5
 800c276:	461d      	mov	r5, r3
 800c278:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c27c:	2a39      	cmp	r2, #57	; 0x39
 800c27e:	d106      	bne.n	800c28e <_dtoa_r+0x6de>
 800c280:	9a01      	ldr	r2, [sp, #4]
 800c282:	429a      	cmp	r2, r3
 800c284:	d1f7      	bne.n	800c276 <_dtoa_r+0x6c6>
 800c286:	9901      	ldr	r1, [sp, #4]
 800c288:	2230      	movs	r2, #48	; 0x30
 800c28a:	3701      	adds	r7, #1
 800c28c:	700a      	strb	r2, [r1, #0]
 800c28e:	781a      	ldrb	r2, [r3, #0]
 800c290:	3201      	adds	r2, #1
 800c292:	701a      	strb	r2, [r3, #0]
 800c294:	e790      	b.n	800c1b8 <_dtoa_r+0x608>
 800c296:	4ba6      	ldr	r3, [pc, #664]	; (800c530 <_dtoa_r+0x980>)
 800c298:	2200      	movs	r2, #0
 800c29a:	f7f4 f9ad 	bl	80005f8 <__aeabi_dmul>
 800c29e:	2200      	movs	r2, #0
 800c2a0:	2300      	movs	r3, #0
 800c2a2:	4606      	mov	r6, r0
 800c2a4:	460f      	mov	r7, r1
 800c2a6:	f7f4 fc0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2aa:	2800      	cmp	r0, #0
 800c2ac:	d09d      	beq.n	800c1ea <_dtoa_r+0x63a>
 800c2ae:	e7cf      	b.n	800c250 <_dtoa_r+0x6a0>
 800c2b0:	9a08      	ldr	r2, [sp, #32]
 800c2b2:	2a00      	cmp	r2, #0
 800c2b4:	f000 80d7 	beq.w	800c466 <_dtoa_r+0x8b6>
 800c2b8:	9a06      	ldr	r2, [sp, #24]
 800c2ba:	2a01      	cmp	r2, #1
 800c2bc:	f300 80ba 	bgt.w	800c434 <_dtoa_r+0x884>
 800c2c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c2c2:	2a00      	cmp	r2, #0
 800c2c4:	f000 80b2 	beq.w	800c42c <_dtoa_r+0x87c>
 800c2c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c2cc:	9e07      	ldr	r6, [sp, #28]
 800c2ce:	9d04      	ldr	r5, [sp, #16]
 800c2d0:	9a04      	ldr	r2, [sp, #16]
 800c2d2:	441a      	add	r2, r3
 800c2d4:	9204      	str	r2, [sp, #16]
 800c2d6:	9a05      	ldr	r2, [sp, #20]
 800c2d8:	2101      	movs	r1, #1
 800c2da:	441a      	add	r2, r3
 800c2dc:	4620      	mov	r0, r4
 800c2de:	9205      	str	r2, [sp, #20]
 800c2e0:	f000 ff44 	bl	800d16c <__i2b>
 800c2e4:	4607      	mov	r7, r0
 800c2e6:	2d00      	cmp	r5, #0
 800c2e8:	dd0c      	ble.n	800c304 <_dtoa_r+0x754>
 800c2ea:	9b05      	ldr	r3, [sp, #20]
 800c2ec:	2b00      	cmp	r3, #0
 800c2ee:	dd09      	ble.n	800c304 <_dtoa_r+0x754>
 800c2f0:	42ab      	cmp	r3, r5
 800c2f2:	9a04      	ldr	r2, [sp, #16]
 800c2f4:	bfa8      	it	ge
 800c2f6:	462b      	movge	r3, r5
 800c2f8:	1ad2      	subs	r2, r2, r3
 800c2fa:	9204      	str	r2, [sp, #16]
 800c2fc:	9a05      	ldr	r2, [sp, #20]
 800c2fe:	1aed      	subs	r5, r5, r3
 800c300:	1ad3      	subs	r3, r2, r3
 800c302:	9305      	str	r3, [sp, #20]
 800c304:	9b07      	ldr	r3, [sp, #28]
 800c306:	b31b      	cbz	r3, 800c350 <_dtoa_r+0x7a0>
 800c308:	9b08      	ldr	r3, [sp, #32]
 800c30a:	2b00      	cmp	r3, #0
 800c30c:	f000 80af 	beq.w	800c46e <_dtoa_r+0x8be>
 800c310:	2e00      	cmp	r6, #0
 800c312:	dd13      	ble.n	800c33c <_dtoa_r+0x78c>
 800c314:	4639      	mov	r1, r7
 800c316:	4632      	mov	r2, r6
 800c318:	4620      	mov	r0, r4
 800c31a:	f000 ffe7 	bl	800d2ec <__pow5mult>
 800c31e:	ee18 2a10 	vmov	r2, s16
 800c322:	4601      	mov	r1, r0
 800c324:	4607      	mov	r7, r0
 800c326:	4620      	mov	r0, r4
 800c328:	f000 ff36 	bl	800d198 <__multiply>
 800c32c:	ee18 1a10 	vmov	r1, s16
 800c330:	4680      	mov	r8, r0
 800c332:	4620      	mov	r0, r4
 800c334:	f000 fe18 	bl	800cf68 <_Bfree>
 800c338:	ee08 8a10 	vmov	s16, r8
 800c33c:	9b07      	ldr	r3, [sp, #28]
 800c33e:	1b9a      	subs	r2, r3, r6
 800c340:	d006      	beq.n	800c350 <_dtoa_r+0x7a0>
 800c342:	ee18 1a10 	vmov	r1, s16
 800c346:	4620      	mov	r0, r4
 800c348:	f000 ffd0 	bl	800d2ec <__pow5mult>
 800c34c:	ee08 0a10 	vmov	s16, r0
 800c350:	2101      	movs	r1, #1
 800c352:	4620      	mov	r0, r4
 800c354:	f000 ff0a 	bl	800d16c <__i2b>
 800c358:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c35a:	2b00      	cmp	r3, #0
 800c35c:	4606      	mov	r6, r0
 800c35e:	f340 8088 	ble.w	800c472 <_dtoa_r+0x8c2>
 800c362:	461a      	mov	r2, r3
 800c364:	4601      	mov	r1, r0
 800c366:	4620      	mov	r0, r4
 800c368:	f000 ffc0 	bl	800d2ec <__pow5mult>
 800c36c:	9b06      	ldr	r3, [sp, #24]
 800c36e:	2b01      	cmp	r3, #1
 800c370:	4606      	mov	r6, r0
 800c372:	f340 8081 	ble.w	800c478 <_dtoa_r+0x8c8>
 800c376:	f04f 0800 	mov.w	r8, #0
 800c37a:	6933      	ldr	r3, [r6, #16]
 800c37c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c380:	6918      	ldr	r0, [r3, #16]
 800c382:	f000 fea3 	bl	800d0cc <__hi0bits>
 800c386:	f1c0 0020 	rsb	r0, r0, #32
 800c38a:	9b05      	ldr	r3, [sp, #20]
 800c38c:	4418      	add	r0, r3
 800c38e:	f010 001f 	ands.w	r0, r0, #31
 800c392:	f000 8092 	beq.w	800c4ba <_dtoa_r+0x90a>
 800c396:	f1c0 0320 	rsb	r3, r0, #32
 800c39a:	2b04      	cmp	r3, #4
 800c39c:	f340 808a 	ble.w	800c4b4 <_dtoa_r+0x904>
 800c3a0:	f1c0 001c 	rsb	r0, r0, #28
 800c3a4:	9b04      	ldr	r3, [sp, #16]
 800c3a6:	4403      	add	r3, r0
 800c3a8:	9304      	str	r3, [sp, #16]
 800c3aa:	9b05      	ldr	r3, [sp, #20]
 800c3ac:	4403      	add	r3, r0
 800c3ae:	4405      	add	r5, r0
 800c3b0:	9305      	str	r3, [sp, #20]
 800c3b2:	9b04      	ldr	r3, [sp, #16]
 800c3b4:	2b00      	cmp	r3, #0
 800c3b6:	dd07      	ble.n	800c3c8 <_dtoa_r+0x818>
 800c3b8:	ee18 1a10 	vmov	r1, s16
 800c3bc:	461a      	mov	r2, r3
 800c3be:	4620      	mov	r0, r4
 800c3c0:	f000 ffee 	bl	800d3a0 <__lshift>
 800c3c4:	ee08 0a10 	vmov	s16, r0
 800c3c8:	9b05      	ldr	r3, [sp, #20]
 800c3ca:	2b00      	cmp	r3, #0
 800c3cc:	dd05      	ble.n	800c3da <_dtoa_r+0x82a>
 800c3ce:	4631      	mov	r1, r6
 800c3d0:	461a      	mov	r2, r3
 800c3d2:	4620      	mov	r0, r4
 800c3d4:	f000 ffe4 	bl	800d3a0 <__lshift>
 800c3d8:	4606      	mov	r6, r0
 800c3da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3dc:	2b00      	cmp	r3, #0
 800c3de:	d06e      	beq.n	800c4be <_dtoa_r+0x90e>
 800c3e0:	ee18 0a10 	vmov	r0, s16
 800c3e4:	4631      	mov	r1, r6
 800c3e6:	f001 f84b 	bl	800d480 <__mcmp>
 800c3ea:	2800      	cmp	r0, #0
 800c3ec:	da67      	bge.n	800c4be <_dtoa_r+0x90e>
 800c3ee:	9b00      	ldr	r3, [sp, #0]
 800c3f0:	3b01      	subs	r3, #1
 800c3f2:	ee18 1a10 	vmov	r1, s16
 800c3f6:	9300      	str	r3, [sp, #0]
 800c3f8:	220a      	movs	r2, #10
 800c3fa:	2300      	movs	r3, #0
 800c3fc:	4620      	mov	r0, r4
 800c3fe:	f000 fdd5 	bl	800cfac <__multadd>
 800c402:	9b08      	ldr	r3, [sp, #32]
 800c404:	ee08 0a10 	vmov	s16, r0
 800c408:	2b00      	cmp	r3, #0
 800c40a:	f000 81b1 	beq.w	800c770 <_dtoa_r+0xbc0>
 800c40e:	2300      	movs	r3, #0
 800c410:	4639      	mov	r1, r7
 800c412:	220a      	movs	r2, #10
 800c414:	4620      	mov	r0, r4
 800c416:	f000 fdc9 	bl	800cfac <__multadd>
 800c41a:	9b02      	ldr	r3, [sp, #8]
 800c41c:	2b00      	cmp	r3, #0
 800c41e:	4607      	mov	r7, r0
 800c420:	f300 808e 	bgt.w	800c540 <_dtoa_r+0x990>
 800c424:	9b06      	ldr	r3, [sp, #24]
 800c426:	2b02      	cmp	r3, #2
 800c428:	dc51      	bgt.n	800c4ce <_dtoa_r+0x91e>
 800c42a:	e089      	b.n	800c540 <_dtoa_r+0x990>
 800c42c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c42e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c432:	e74b      	b.n	800c2cc <_dtoa_r+0x71c>
 800c434:	9b03      	ldr	r3, [sp, #12]
 800c436:	1e5e      	subs	r6, r3, #1
 800c438:	9b07      	ldr	r3, [sp, #28]
 800c43a:	42b3      	cmp	r3, r6
 800c43c:	bfbf      	itttt	lt
 800c43e:	9b07      	ldrlt	r3, [sp, #28]
 800c440:	9607      	strlt	r6, [sp, #28]
 800c442:	1af2      	sublt	r2, r6, r3
 800c444:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c446:	bfb6      	itet	lt
 800c448:	189b      	addlt	r3, r3, r2
 800c44a:	1b9e      	subge	r6, r3, r6
 800c44c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c44e:	9b03      	ldr	r3, [sp, #12]
 800c450:	bfb8      	it	lt
 800c452:	2600      	movlt	r6, #0
 800c454:	2b00      	cmp	r3, #0
 800c456:	bfb7      	itett	lt
 800c458:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c45c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c460:	1a9d      	sublt	r5, r3, r2
 800c462:	2300      	movlt	r3, #0
 800c464:	e734      	b.n	800c2d0 <_dtoa_r+0x720>
 800c466:	9e07      	ldr	r6, [sp, #28]
 800c468:	9d04      	ldr	r5, [sp, #16]
 800c46a:	9f08      	ldr	r7, [sp, #32]
 800c46c:	e73b      	b.n	800c2e6 <_dtoa_r+0x736>
 800c46e:	9a07      	ldr	r2, [sp, #28]
 800c470:	e767      	b.n	800c342 <_dtoa_r+0x792>
 800c472:	9b06      	ldr	r3, [sp, #24]
 800c474:	2b01      	cmp	r3, #1
 800c476:	dc18      	bgt.n	800c4aa <_dtoa_r+0x8fa>
 800c478:	f1ba 0f00 	cmp.w	sl, #0
 800c47c:	d115      	bne.n	800c4aa <_dtoa_r+0x8fa>
 800c47e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c482:	b993      	cbnz	r3, 800c4aa <_dtoa_r+0x8fa>
 800c484:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c488:	0d1b      	lsrs	r3, r3, #20
 800c48a:	051b      	lsls	r3, r3, #20
 800c48c:	b183      	cbz	r3, 800c4b0 <_dtoa_r+0x900>
 800c48e:	9b04      	ldr	r3, [sp, #16]
 800c490:	3301      	adds	r3, #1
 800c492:	9304      	str	r3, [sp, #16]
 800c494:	9b05      	ldr	r3, [sp, #20]
 800c496:	3301      	adds	r3, #1
 800c498:	9305      	str	r3, [sp, #20]
 800c49a:	f04f 0801 	mov.w	r8, #1
 800c49e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c4a0:	2b00      	cmp	r3, #0
 800c4a2:	f47f af6a 	bne.w	800c37a <_dtoa_r+0x7ca>
 800c4a6:	2001      	movs	r0, #1
 800c4a8:	e76f      	b.n	800c38a <_dtoa_r+0x7da>
 800c4aa:	f04f 0800 	mov.w	r8, #0
 800c4ae:	e7f6      	b.n	800c49e <_dtoa_r+0x8ee>
 800c4b0:	4698      	mov	r8, r3
 800c4b2:	e7f4      	b.n	800c49e <_dtoa_r+0x8ee>
 800c4b4:	f43f af7d 	beq.w	800c3b2 <_dtoa_r+0x802>
 800c4b8:	4618      	mov	r0, r3
 800c4ba:	301c      	adds	r0, #28
 800c4bc:	e772      	b.n	800c3a4 <_dtoa_r+0x7f4>
 800c4be:	9b03      	ldr	r3, [sp, #12]
 800c4c0:	2b00      	cmp	r3, #0
 800c4c2:	dc37      	bgt.n	800c534 <_dtoa_r+0x984>
 800c4c4:	9b06      	ldr	r3, [sp, #24]
 800c4c6:	2b02      	cmp	r3, #2
 800c4c8:	dd34      	ble.n	800c534 <_dtoa_r+0x984>
 800c4ca:	9b03      	ldr	r3, [sp, #12]
 800c4cc:	9302      	str	r3, [sp, #8]
 800c4ce:	9b02      	ldr	r3, [sp, #8]
 800c4d0:	b96b      	cbnz	r3, 800c4ee <_dtoa_r+0x93e>
 800c4d2:	4631      	mov	r1, r6
 800c4d4:	2205      	movs	r2, #5
 800c4d6:	4620      	mov	r0, r4
 800c4d8:	f000 fd68 	bl	800cfac <__multadd>
 800c4dc:	4601      	mov	r1, r0
 800c4de:	4606      	mov	r6, r0
 800c4e0:	ee18 0a10 	vmov	r0, s16
 800c4e4:	f000 ffcc 	bl	800d480 <__mcmp>
 800c4e8:	2800      	cmp	r0, #0
 800c4ea:	f73f adbb 	bgt.w	800c064 <_dtoa_r+0x4b4>
 800c4ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c4f0:	9d01      	ldr	r5, [sp, #4]
 800c4f2:	43db      	mvns	r3, r3
 800c4f4:	9300      	str	r3, [sp, #0]
 800c4f6:	f04f 0800 	mov.w	r8, #0
 800c4fa:	4631      	mov	r1, r6
 800c4fc:	4620      	mov	r0, r4
 800c4fe:	f000 fd33 	bl	800cf68 <_Bfree>
 800c502:	2f00      	cmp	r7, #0
 800c504:	f43f aea4 	beq.w	800c250 <_dtoa_r+0x6a0>
 800c508:	f1b8 0f00 	cmp.w	r8, #0
 800c50c:	d005      	beq.n	800c51a <_dtoa_r+0x96a>
 800c50e:	45b8      	cmp	r8, r7
 800c510:	d003      	beq.n	800c51a <_dtoa_r+0x96a>
 800c512:	4641      	mov	r1, r8
 800c514:	4620      	mov	r0, r4
 800c516:	f000 fd27 	bl	800cf68 <_Bfree>
 800c51a:	4639      	mov	r1, r7
 800c51c:	4620      	mov	r0, r4
 800c51e:	f000 fd23 	bl	800cf68 <_Bfree>
 800c522:	e695      	b.n	800c250 <_dtoa_r+0x6a0>
 800c524:	2600      	movs	r6, #0
 800c526:	4637      	mov	r7, r6
 800c528:	e7e1      	b.n	800c4ee <_dtoa_r+0x93e>
 800c52a:	9700      	str	r7, [sp, #0]
 800c52c:	4637      	mov	r7, r6
 800c52e:	e599      	b.n	800c064 <_dtoa_r+0x4b4>
 800c530:	40240000 	.word	0x40240000
 800c534:	9b08      	ldr	r3, [sp, #32]
 800c536:	2b00      	cmp	r3, #0
 800c538:	f000 80ca 	beq.w	800c6d0 <_dtoa_r+0xb20>
 800c53c:	9b03      	ldr	r3, [sp, #12]
 800c53e:	9302      	str	r3, [sp, #8]
 800c540:	2d00      	cmp	r5, #0
 800c542:	dd05      	ble.n	800c550 <_dtoa_r+0x9a0>
 800c544:	4639      	mov	r1, r7
 800c546:	462a      	mov	r2, r5
 800c548:	4620      	mov	r0, r4
 800c54a:	f000 ff29 	bl	800d3a0 <__lshift>
 800c54e:	4607      	mov	r7, r0
 800c550:	f1b8 0f00 	cmp.w	r8, #0
 800c554:	d05b      	beq.n	800c60e <_dtoa_r+0xa5e>
 800c556:	6879      	ldr	r1, [r7, #4]
 800c558:	4620      	mov	r0, r4
 800c55a:	f000 fcc5 	bl	800cee8 <_Balloc>
 800c55e:	4605      	mov	r5, r0
 800c560:	b928      	cbnz	r0, 800c56e <_dtoa_r+0x9be>
 800c562:	4b87      	ldr	r3, [pc, #540]	; (800c780 <_dtoa_r+0xbd0>)
 800c564:	4602      	mov	r2, r0
 800c566:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c56a:	f7ff bb3b 	b.w	800bbe4 <_dtoa_r+0x34>
 800c56e:	693a      	ldr	r2, [r7, #16]
 800c570:	3202      	adds	r2, #2
 800c572:	0092      	lsls	r2, r2, #2
 800c574:	f107 010c 	add.w	r1, r7, #12
 800c578:	300c      	adds	r0, #12
 800c57a:	f000 fca7 	bl	800cecc <memcpy>
 800c57e:	2201      	movs	r2, #1
 800c580:	4629      	mov	r1, r5
 800c582:	4620      	mov	r0, r4
 800c584:	f000 ff0c 	bl	800d3a0 <__lshift>
 800c588:	9b01      	ldr	r3, [sp, #4]
 800c58a:	f103 0901 	add.w	r9, r3, #1
 800c58e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c592:	4413      	add	r3, r2
 800c594:	9305      	str	r3, [sp, #20]
 800c596:	f00a 0301 	and.w	r3, sl, #1
 800c59a:	46b8      	mov	r8, r7
 800c59c:	9304      	str	r3, [sp, #16]
 800c59e:	4607      	mov	r7, r0
 800c5a0:	4631      	mov	r1, r6
 800c5a2:	ee18 0a10 	vmov	r0, s16
 800c5a6:	f7ff fa75 	bl	800ba94 <quorem>
 800c5aa:	4641      	mov	r1, r8
 800c5ac:	9002      	str	r0, [sp, #8]
 800c5ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c5b2:	ee18 0a10 	vmov	r0, s16
 800c5b6:	f000 ff63 	bl	800d480 <__mcmp>
 800c5ba:	463a      	mov	r2, r7
 800c5bc:	9003      	str	r0, [sp, #12]
 800c5be:	4631      	mov	r1, r6
 800c5c0:	4620      	mov	r0, r4
 800c5c2:	f000 ff79 	bl	800d4b8 <__mdiff>
 800c5c6:	68c2      	ldr	r2, [r0, #12]
 800c5c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800c5cc:	4605      	mov	r5, r0
 800c5ce:	bb02      	cbnz	r2, 800c612 <_dtoa_r+0xa62>
 800c5d0:	4601      	mov	r1, r0
 800c5d2:	ee18 0a10 	vmov	r0, s16
 800c5d6:	f000 ff53 	bl	800d480 <__mcmp>
 800c5da:	4602      	mov	r2, r0
 800c5dc:	4629      	mov	r1, r5
 800c5de:	4620      	mov	r0, r4
 800c5e0:	9207      	str	r2, [sp, #28]
 800c5e2:	f000 fcc1 	bl	800cf68 <_Bfree>
 800c5e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c5ea:	ea43 0102 	orr.w	r1, r3, r2
 800c5ee:	9b04      	ldr	r3, [sp, #16]
 800c5f0:	430b      	orrs	r3, r1
 800c5f2:	464d      	mov	r5, r9
 800c5f4:	d10f      	bne.n	800c616 <_dtoa_r+0xa66>
 800c5f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c5fa:	d02a      	beq.n	800c652 <_dtoa_r+0xaa2>
 800c5fc:	9b03      	ldr	r3, [sp, #12]
 800c5fe:	2b00      	cmp	r3, #0
 800c600:	dd02      	ble.n	800c608 <_dtoa_r+0xa58>
 800c602:	9b02      	ldr	r3, [sp, #8]
 800c604:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c608:	f88b a000 	strb.w	sl, [fp]
 800c60c:	e775      	b.n	800c4fa <_dtoa_r+0x94a>
 800c60e:	4638      	mov	r0, r7
 800c610:	e7ba      	b.n	800c588 <_dtoa_r+0x9d8>
 800c612:	2201      	movs	r2, #1
 800c614:	e7e2      	b.n	800c5dc <_dtoa_r+0xa2c>
 800c616:	9b03      	ldr	r3, [sp, #12]
 800c618:	2b00      	cmp	r3, #0
 800c61a:	db04      	blt.n	800c626 <_dtoa_r+0xa76>
 800c61c:	9906      	ldr	r1, [sp, #24]
 800c61e:	430b      	orrs	r3, r1
 800c620:	9904      	ldr	r1, [sp, #16]
 800c622:	430b      	orrs	r3, r1
 800c624:	d122      	bne.n	800c66c <_dtoa_r+0xabc>
 800c626:	2a00      	cmp	r2, #0
 800c628:	ddee      	ble.n	800c608 <_dtoa_r+0xa58>
 800c62a:	ee18 1a10 	vmov	r1, s16
 800c62e:	2201      	movs	r2, #1
 800c630:	4620      	mov	r0, r4
 800c632:	f000 feb5 	bl	800d3a0 <__lshift>
 800c636:	4631      	mov	r1, r6
 800c638:	ee08 0a10 	vmov	s16, r0
 800c63c:	f000 ff20 	bl	800d480 <__mcmp>
 800c640:	2800      	cmp	r0, #0
 800c642:	dc03      	bgt.n	800c64c <_dtoa_r+0xa9c>
 800c644:	d1e0      	bne.n	800c608 <_dtoa_r+0xa58>
 800c646:	f01a 0f01 	tst.w	sl, #1
 800c64a:	d0dd      	beq.n	800c608 <_dtoa_r+0xa58>
 800c64c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c650:	d1d7      	bne.n	800c602 <_dtoa_r+0xa52>
 800c652:	2339      	movs	r3, #57	; 0x39
 800c654:	f88b 3000 	strb.w	r3, [fp]
 800c658:	462b      	mov	r3, r5
 800c65a:	461d      	mov	r5, r3
 800c65c:	3b01      	subs	r3, #1
 800c65e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c662:	2a39      	cmp	r2, #57	; 0x39
 800c664:	d071      	beq.n	800c74a <_dtoa_r+0xb9a>
 800c666:	3201      	adds	r2, #1
 800c668:	701a      	strb	r2, [r3, #0]
 800c66a:	e746      	b.n	800c4fa <_dtoa_r+0x94a>
 800c66c:	2a00      	cmp	r2, #0
 800c66e:	dd07      	ble.n	800c680 <_dtoa_r+0xad0>
 800c670:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c674:	d0ed      	beq.n	800c652 <_dtoa_r+0xaa2>
 800c676:	f10a 0301 	add.w	r3, sl, #1
 800c67a:	f88b 3000 	strb.w	r3, [fp]
 800c67e:	e73c      	b.n	800c4fa <_dtoa_r+0x94a>
 800c680:	9b05      	ldr	r3, [sp, #20]
 800c682:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c686:	4599      	cmp	r9, r3
 800c688:	d047      	beq.n	800c71a <_dtoa_r+0xb6a>
 800c68a:	ee18 1a10 	vmov	r1, s16
 800c68e:	2300      	movs	r3, #0
 800c690:	220a      	movs	r2, #10
 800c692:	4620      	mov	r0, r4
 800c694:	f000 fc8a 	bl	800cfac <__multadd>
 800c698:	45b8      	cmp	r8, r7
 800c69a:	ee08 0a10 	vmov	s16, r0
 800c69e:	f04f 0300 	mov.w	r3, #0
 800c6a2:	f04f 020a 	mov.w	r2, #10
 800c6a6:	4641      	mov	r1, r8
 800c6a8:	4620      	mov	r0, r4
 800c6aa:	d106      	bne.n	800c6ba <_dtoa_r+0xb0a>
 800c6ac:	f000 fc7e 	bl	800cfac <__multadd>
 800c6b0:	4680      	mov	r8, r0
 800c6b2:	4607      	mov	r7, r0
 800c6b4:	f109 0901 	add.w	r9, r9, #1
 800c6b8:	e772      	b.n	800c5a0 <_dtoa_r+0x9f0>
 800c6ba:	f000 fc77 	bl	800cfac <__multadd>
 800c6be:	4639      	mov	r1, r7
 800c6c0:	4680      	mov	r8, r0
 800c6c2:	2300      	movs	r3, #0
 800c6c4:	220a      	movs	r2, #10
 800c6c6:	4620      	mov	r0, r4
 800c6c8:	f000 fc70 	bl	800cfac <__multadd>
 800c6cc:	4607      	mov	r7, r0
 800c6ce:	e7f1      	b.n	800c6b4 <_dtoa_r+0xb04>
 800c6d0:	9b03      	ldr	r3, [sp, #12]
 800c6d2:	9302      	str	r3, [sp, #8]
 800c6d4:	9d01      	ldr	r5, [sp, #4]
 800c6d6:	ee18 0a10 	vmov	r0, s16
 800c6da:	4631      	mov	r1, r6
 800c6dc:	f7ff f9da 	bl	800ba94 <quorem>
 800c6e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c6e4:	9b01      	ldr	r3, [sp, #4]
 800c6e6:	f805 ab01 	strb.w	sl, [r5], #1
 800c6ea:	1aea      	subs	r2, r5, r3
 800c6ec:	9b02      	ldr	r3, [sp, #8]
 800c6ee:	4293      	cmp	r3, r2
 800c6f0:	dd09      	ble.n	800c706 <_dtoa_r+0xb56>
 800c6f2:	ee18 1a10 	vmov	r1, s16
 800c6f6:	2300      	movs	r3, #0
 800c6f8:	220a      	movs	r2, #10
 800c6fa:	4620      	mov	r0, r4
 800c6fc:	f000 fc56 	bl	800cfac <__multadd>
 800c700:	ee08 0a10 	vmov	s16, r0
 800c704:	e7e7      	b.n	800c6d6 <_dtoa_r+0xb26>
 800c706:	9b02      	ldr	r3, [sp, #8]
 800c708:	2b00      	cmp	r3, #0
 800c70a:	bfc8      	it	gt
 800c70c:	461d      	movgt	r5, r3
 800c70e:	9b01      	ldr	r3, [sp, #4]
 800c710:	bfd8      	it	le
 800c712:	2501      	movle	r5, #1
 800c714:	441d      	add	r5, r3
 800c716:	f04f 0800 	mov.w	r8, #0
 800c71a:	ee18 1a10 	vmov	r1, s16
 800c71e:	2201      	movs	r2, #1
 800c720:	4620      	mov	r0, r4
 800c722:	f000 fe3d 	bl	800d3a0 <__lshift>
 800c726:	4631      	mov	r1, r6
 800c728:	ee08 0a10 	vmov	s16, r0
 800c72c:	f000 fea8 	bl	800d480 <__mcmp>
 800c730:	2800      	cmp	r0, #0
 800c732:	dc91      	bgt.n	800c658 <_dtoa_r+0xaa8>
 800c734:	d102      	bne.n	800c73c <_dtoa_r+0xb8c>
 800c736:	f01a 0f01 	tst.w	sl, #1
 800c73a:	d18d      	bne.n	800c658 <_dtoa_r+0xaa8>
 800c73c:	462b      	mov	r3, r5
 800c73e:	461d      	mov	r5, r3
 800c740:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c744:	2a30      	cmp	r2, #48	; 0x30
 800c746:	d0fa      	beq.n	800c73e <_dtoa_r+0xb8e>
 800c748:	e6d7      	b.n	800c4fa <_dtoa_r+0x94a>
 800c74a:	9a01      	ldr	r2, [sp, #4]
 800c74c:	429a      	cmp	r2, r3
 800c74e:	d184      	bne.n	800c65a <_dtoa_r+0xaaa>
 800c750:	9b00      	ldr	r3, [sp, #0]
 800c752:	3301      	adds	r3, #1
 800c754:	9300      	str	r3, [sp, #0]
 800c756:	2331      	movs	r3, #49	; 0x31
 800c758:	7013      	strb	r3, [r2, #0]
 800c75a:	e6ce      	b.n	800c4fa <_dtoa_r+0x94a>
 800c75c:	4b09      	ldr	r3, [pc, #36]	; (800c784 <_dtoa_r+0xbd4>)
 800c75e:	f7ff ba95 	b.w	800bc8c <_dtoa_r+0xdc>
 800c762:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c764:	2b00      	cmp	r3, #0
 800c766:	f47f aa6e 	bne.w	800bc46 <_dtoa_r+0x96>
 800c76a:	4b07      	ldr	r3, [pc, #28]	; (800c788 <_dtoa_r+0xbd8>)
 800c76c:	f7ff ba8e 	b.w	800bc8c <_dtoa_r+0xdc>
 800c770:	9b02      	ldr	r3, [sp, #8]
 800c772:	2b00      	cmp	r3, #0
 800c774:	dcae      	bgt.n	800c6d4 <_dtoa_r+0xb24>
 800c776:	9b06      	ldr	r3, [sp, #24]
 800c778:	2b02      	cmp	r3, #2
 800c77a:	f73f aea8 	bgt.w	800c4ce <_dtoa_r+0x91e>
 800c77e:	e7a9      	b.n	800c6d4 <_dtoa_r+0xb24>
 800c780:	0800fba9 	.word	0x0800fba9
 800c784:	0800f914 	.word	0x0800f914
 800c788:	0800fb41 	.word	0x0800fb41

0800c78c <fiprintf>:
 800c78c:	b40e      	push	{r1, r2, r3}
 800c78e:	b503      	push	{r0, r1, lr}
 800c790:	4601      	mov	r1, r0
 800c792:	ab03      	add	r3, sp, #12
 800c794:	4805      	ldr	r0, [pc, #20]	; (800c7ac <fiprintf+0x20>)
 800c796:	f853 2b04 	ldr.w	r2, [r3], #4
 800c79a:	6800      	ldr	r0, [r0, #0]
 800c79c:	9301      	str	r3, [sp, #4]
 800c79e:	f001 fae1 	bl	800dd64 <_vfiprintf_r>
 800c7a2:	b002      	add	sp, #8
 800c7a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800c7a8:	b003      	add	sp, #12
 800c7aa:	4770      	bx	lr
 800c7ac:	20000020 	.word	0x20000020

0800c7b0 <rshift>:
 800c7b0:	6903      	ldr	r3, [r0, #16]
 800c7b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c7b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c7ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c7be:	f100 0414 	add.w	r4, r0, #20
 800c7c2:	dd45      	ble.n	800c850 <rshift+0xa0>
 800c7c4:	f011 011f 	ands.w	r1, r1, #31
 800c7c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c7cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c7d0:	d10c      	bne.n	800c7ec <rshift+0x3c>
 800c7d2:	f100 0710 	add.w	r7, r0, #16
 800c7d6:	4629      	mov	r1, r5
 800c7d8:	42b1      	cmp	r1, r6
 800c7da:	d334      	bcc.n	800c846 <rshift+0x96>
 800c7dc:	1a9b      	subs	r3, r3, r2
 800c7de:	009b      	lsls	r3, r3, #2
 800c7e0:	1eea      	subs	r2, r5, #3
 800c7e2:	4296      	cmp	r6, r2
 800c7e4:	bf38      	it	cc
 800c7e6:	2300      	movcc	r3, #0
 800c7e8:	4423      	add	r3, r4
 800c7ea:	e015      	b.n	800c818 <rshift+0x68>
 800c7ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c7f0:	f1c1 0820 	rsb	r8, r1, #32
 800c7f4:	40cf      	lsrs	r7, r1
 800c7f6:	f105 0e04 	add.w	lr, r5, #4
 800c7fa:	46a1      	mov	r9, r4
 800c7fc:	4576      	cmp	r6, lr
 800c7fe:	46f4      	mov	ip, lr
 800c800:	d815      	bhi.n	800c82e <rshift+0x7e>
 800c802:	1a9a      	subs	r2, r3, r2
 800c804:	0092      	lsls	r2, r2, #2
 800c806:	3a04      	subs	r2, #4
 800c808:	3501      	adds	r5, #1
 800c80a:	42ae      	cmp	r6, r5
 800c80c:	bf38      	it	cc
 800c80e:	2200      	movcc	r2, #0
 800c810:	18a3      	adds	r3, r4, r2
 800c812:	50a7      	str	r7, [r4, r2]
 800c814:	b107      	cbz	r7, 800c818 <rshift+0x68>
 800c816:	3304      	adds	r3, #4
 800c818:	1b1a      	subs	r2, r3, r4
 800c81a:	42a3      	cmp	r3, r4
 800c81c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c820:	bf08      	it	eq
 800c822:	2300      	moveq	r3, #0
 800c824:	6102      	str	r2, [r0, #16]
 800c826:	bf08      	it	eq
 800c828:	6143      	streq	r3, [r0, #20]
 800c82a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c82e:	f8dc c000 	ldr.w	ip, [ip]
 800c832:	fa0c fc08 	lsl.w	ip, ip, r8
 800c836:	ea4c 0707 	orr.w	r7, ip, r7
 800c83a:	f849 7b04 	str.w	r7, [r9], #4
 800c83e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c842:	40cf      	lsrs	r7, r1
 800c844:	e7da      	b.n	800c7fc <rshift+0x4c>
 800c846:	f851 cb04 	ldr.w	ip, [r1], #4
 800c84a:	f847 cf04 	str.w	ip, [r7, #4]!
 800c84e:	e7c3      	b.n	800c7d8 <rshift+0x28>
 800c850:	4623      	mov	r3, r4
 800c852:	e7e1      	b.n	800c818 <rshift+0x68>

0800c854 <__hexdig_fun>:
 800c854:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c858:	2b09      	cmp	r3, #9
 800c85a:	d802      	bhi.n	800c862 <__hexdig_fun+0xe>
 800c85c:	3820      	subs	r0, #32
 800c85e:	b2c0      	uxtb	r0, r0
 800c860:	4770      	bx	lr
 800c862:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c866:	2b05      	cmp	r3, #5
 800c868:	d801      	bhi.n	800c86e <__hexdig_fun+0x1a>
 800c86a:	3847      	subs	r0, #71	; 0x47
 800c86c:	e7f7      	b.n	800c85e <__hexdig_fun+0xa>
 800c86e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c872:	2b05      	cmp	r3, #5
 800c874:	d801      	bhi.n	800c87a <__hexdig_fun+0x26>
 800c876:	3827      	subs	r0, #39	; 0x27
 800c878:	e7f1      	b.n	800c85e <__hexdig_fun+0xa>
 800c87a:	2000      	movs	r0, #0
 800c87c:	4770      	bx	lr
	...

0800c880 <__gethex>:
 800c880:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c884:	ed2d 8b02 	vpush	{d8}
 800c888:	b089      	sub	sp, #36	; 0x24
 800c88a:	ee08 0a10 	vmov	s16, r0
 800c88e:	9304      	str	r3, [sp, #16]
 800c890:	4bb4      	ldr	r3, [pc, #720]	; (800cb64 <__gethex+0x2e4>)
 800c892:	681b      	ldr	r3, [r3, #0]
 800c894:	9301      	str	r3, [sp, #4]
 800c896:	4618      	mov	r0, r3
 800c898:	468b      	mov	fp, r1
 800c89a:	4690      	mov	r8, r2
 800c89c:	f7f3 fc98 	bl	80001d0 <strlen>
 800c8a0:	9b01      	ldr	r3, [sp, #4]
 800c8a2:	f8db 2000 	ldr.w	r2, [fp]
 800c8a6:	4403      	add	r3, r0
 800c8a8:	4682      	mov	sl, r0
 800c8aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c8ae:	9305      	str	r3, [sp, #20]
 800c8b0:	1c93      	adds	r3, r2, #2
 800c8b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c8b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c8ba:	32fe      	adds	r2, #254	; 0xfe
 800c8bc:	18d1      	adds	r1, r2, r3
 800c8be:	461f      	mov	r7, r3
 800c8c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c8c4:	9100      	str	r1, [sp, #0]
 800c8c6:	2830      	cmp	r0, #48	; 0x30
 800c8c8:	d0f8      	beq.n	800c8bc <__gethex+0x3c>
 800c8ca:	f7ff ffc3 	bl	800c854 <__hexdig_fun>
 800c8ce:	4604      	mov	r4, r0
 800c8d0:	2800      	cmp	r0, #0
 800c8d2:	d13a      	bne.n	800c94a <__gethex+0xca>
 800c8d4:	9901      	ldr	r1, [sp, #4]
 800c8d6:	4652      	mov	r2, sl
 800c8d8:	4638      	mov	r0, r7
 800c8da:	f001 fb8d 	bl	800dff8 <strncmp>
 800c8de:	4605      	mov	r5, r0
 800c8e0:	2800      	cmp	r0, #0
 800c8e2:	d168      	bne.n	800c9b6 <__gethex+0x136>
 800c8e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c8e8:	eb07 060a 	add.w	r6, r7, sl
 800c8ec:	f7ff ffb2 	bl	800c854 <__hexdig_fun>
 800c8f0:	2800      	cmp	r0, #0
 800c8f2:	d062      	beq.n	800c9ba <__gethex+0x13a>
 800c8f4:	4633      	mov	r3, r6
 800c8f6:	7818      	ldrb	r0, [r3, #0]
 800c8f8:	2830      	cmp	r0, #48	; 0x30
 800c8fa:	461f      	mov	r7, r3
 800c8fc:	f103 0301 	add.w	r3, r3, #1
 800c900:	d0f9      	beq.n	800c8f6 <__gethex+0x76>
 800c902:	f7ff ffa7 	bl	800c854 <__hexdig_fun>
 800c906:	2301      	movs	r3, #1
 800c908:	fab0 f480 	clz	r4, r0
 800c90c:	0964      	lsrs	r4, r4, #5
 800c90e:	4635      	mov	r5, r6
 800c910:	9300      	str	r3, [sp, #0]
 800c912:	463a      	mov	r2, r7
 800c914:	4616      	mov	r6, r2
 800c916:	3201      	adds	r2, #1
 800c918:	7830      	ldrb	r0, [r6, #0]
 800c91a:	f7ff ff9b 	bl	800c854 <__hexdig_fun>
 800c91e:	2800      	cmp	r0, #0
 800c920:	d1f8      	bne.n	800c914 <__gethex+0x94>
 800c922:	9901      	ldr	r1, [sp, #4]
 800c924:	4652      	mov	r2, sl
 800c926:	4630      	mov	r0, r6
 800c928:	f001 fb66 	bl	800dff8 <strncmp>
 800c92c:	b980      	cbnz	r0, 800c950 <__gethex+0xd0>
 800c92e:	b94d      	cbnz	r5, 800c944 <__gethex+0xc4>
 800c930:	eb06 050a 	add.w	r5, r6, sl
 800c934:	462a      	mov	r2, r5
 800c936:	4616      	mov	r6, r2
 800c938:	3201      	adds	r2, #1
 800c93a:	7830      	ldrb	r0, [r6, #0]
 800c93c:	f7ff ff8a 	bl	800c854 <__hexdig_fun>
 800c940:	2800      	cmp	r0, #0
 800c942:	d1f8      	bne.n	800c936 <__gethex+0xb6>
 800c944:	1bad      	subs	r5, r5, r6
 800c946:	00ad      	lsls	r5, r5, #2
 800c948:	e004      	b.n	800c954 <__gethex+0xd4>
 800c94a:	2400      	movs	r4, #0
 800c94c:	4625      	mov	r5, r4
 800c94e:	e7e0      	b.n	800c912 <__gethex+0x92>
 800c950:	2d00      	cmp	r5, #0
 800c952:	d1f7      	bne.n	800c944 <__gethex+0xc4>
 800c954:	7833      	ldrb	r3, [r6, #0]
 800c956:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c95a:	2b50      	cmp	r3, #80	; 0x50
 800c95c:	d13b      	bne.n	800c9d6 <__gethex+0x156>
 800c95e:	7873      	ldrb	r3, [r6, #1]
 800c960:	2b2b      	cmp	r3, #43	; 0x2b
 800c962:	d02c      	beq.n	800c9be <__gethex+0x13e>
 800c964:	2b2d      	cmp	r3, #45	; 0x2d
 800c966:	d02e      	beq.n	800c9c6 <__gethex+0x146>
 800c968:	1c71      	adds	r1, r6, #1
 800c96a:	f04f 0900 	mov.w	r9, #0
 800c96e:	7808      	ldrb	r0, [r1, #0]
 800c970:	f7ff ff70 	bl	800c854 <__hexdig_fun>
 800c974:	1e43      	subs	r3, r0, #1
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b18      	cmp	r3, #24
 800c97a:	d82c      	bhi.n	800c9d6 <__gethex+0x156>
 800c97c:	f1a0 0210 	sub.w	r2, r0, #16
 800c980:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800c984:	f7ff ff66 	bl	800c854 <__hexdig_fun>
 800c988:	1e43      	subs	r3, r0, #1
 800c98a:	b2db      	uxtb	r3, r3
 800c98c:	2b18      	cmp	r3, #24
 800c98e:	d91d      	bls.n	800c9cc <__gethex+0x14c>
 800c990:	f1b9 0f00 	cmp.w	r9, #0
 800c994:	d000      	beq.n	800c998 <__gethex+0x118>
 800c996:	4252      	negs	r2, r2
 800c998:	4415      	add	r5, r2
 800c99a:	f8cb 1000 	str.w	r1, [fp]
 800c99e:	b1e4      	cbz	r4, 800c9da <__gethex+0x15a>
 800c9a0:	9b00      	ldr	r3, [sp, #0]
 800c9a2:	2b00      	cmp	r3, #0
 800c9a4:	bf14      	ite	ne
 800c9a6:	2700      	movne	r7, #0
 800c9a8:	2706      	moveq	r7, #6
 800c9aa:	4638      	mov	r0, r7
 800c9ac:	b009      	add	sp, #36	; 0x24
 800c9ae:	ecbd 8b02 	vpop	{d8}
 800c9b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c9b6:	463e      	mov	r6, r7
 800c9b8:	4625      	mov	r5, r4
 800c9ba:	2401      	movs	r4, #1
 800c9bc:	e7ca      	b.n	800c954 <__gethex+0xd4>
 800c9be:	f04f 0900 	mov.w	r9, #0
 800c9c2:	1cb1      	adds	r1, r6, #2
 800c9c4:	e7d3      	b.n	800c96e <__gethex+0xee>
 800c9c6:	f04f 0901 	mov.w	r9, #1
 800c9ca:	e7fa      	b.n	800c9c2 <__gethex+0x142>
 800c9cc:	230a      	movs	r3, #10
 800c9ce:	fb03 0202 	mla	r2, r3, r2, r0
 800c9d2:	3a10      	subs	r2, #16
 800c9d4:	e7d4      	b.n	800c980 <__gethex+0x100>
 800c9d6:	4631      	mov	r1, r6
 800c9d8:	e7df      	b.n	800c99a <__gethex+0x11a>
 800c9da:	1bf3      	subs	r3, r6, r7
 800c9dc:	3b01      	subs	r3, #1
 800c9de:	4621      	mov	r1, r4
 800c9e0:	2b07      	cmp	r3, #7
 800c9e2:	dc0b      	bgt.n	800c9fc <__gethex+0x17c>
 800c9e4:	ee18 0a10 	vmov	r0, s16
 800c9e8:	f000 fa7e 	bl	800cee8 <_Balloc>
 800c9ec:	4604      	mov	r4, r0
 800c9ee:	b940      	cbnz	r0, 800ca02 <__gethex+0x182>
 800c9f0:	4b5d      	ldr	r3, [pc, #372]	; (800cb68 <__gethex+0x2e8>)
 800c9f2:	4602      	mov	r2, r0
 800c9f4:	21de      	movs	r1, #222	; 0xde
 800c9f6:	485d      	ldr	r0, [pc, #372]	; (800cb6c <__gethex+0x2ec>)
 800c9f8:	f7ff f82e 	bl	800ba58 <__assert_func>
 800c9fc:	3101      	adds	r1, #1
 800c9fe:	105b      	asrs	r3, r3, #1
 800ca00:	e7ee      	b.n	800c9e0 <__gethex+0x160>
 800ca02:	f100 0914 	add.w	r9, r0, #20
 800ca06:	f04f 0b00 	mov.w	fp, #0
 800ca0a:	f1ca 0301 	rsb	r3, sl, #1
 800ca0e:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca12:	f8cd b000 	str.w	fp, [sp]
 800ca16:	9306      	str	r3, [sp, #24]
 800ca18:	42b7      	cmp	r7, r6
 800ca1a:	d340      	bcc.n	800ca9e <__gethex+0x21e>
 800ca1c:	9802      	ldr	r0, [sp, #8]
 800ca1e:	9b00      	ldr	r3, [sp, #0]
 800ca20:	f840 3b04 	str.w	r3, [r0], #4
 800ca24:	eba0 0009 	sub.w	r0, r0, r9
 800ca28:	1080      	asrs	r0, r0, #2
 800ca2a:	0146      	lsls	r6, r0, #5
 800ca2c:	6120      	str	r0, [r4, #16]
 800ca2e:	4618      	mov	r0, r3
 800ca30:	f000 fb4c 	bl	800d0cc <__hi0bits>
 800ca34:	1a30      	subs	r0, r6, r0
 800ca36:	f8d8 6000 	ldr.w	r6, [r8]
 800ca3a:	42b0      	cmp	r0, r6
 800ca3c:	dd63      	ble.n	800cb06 <__gethex+0x286>
 800ca3e:	1b87      	subs	r7, r0, r6
 800ca40:	4639      	mov	r1, r7
 800ca42:	4620      	mov	r0, r4
 800ca44:	f000 fef0 	bl	800d828 <__any_on>
 800ca48:	4682      	mov	sl, r0
 800ca4a:	b1a8      	cbz	r0, 800ca78 <__gethex+0x1f8>
 800ca4c:	1e7b      	subs	r3, r7, #1
 800ca4e:	1159      	asrs	r1, r3, #5
 800ca50:	f003 021f 	and.w	r2, r3, #31
 800ca54:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800ca58:	f04f 0a01 	mov.w	sl, #1
 800ca5c:	fa0a f202 	lsl.w	r2, sl, r2
 800ca60:	420a      	tst	r2, r1
 800ca62:	d009      	beq.n	800ca78 <__gethex+0x1f8>
 800ca64:	4553      	cmp	r3, sl
 800ca66:	dd05      	ble.n	800ca74 <__gethex+0x1f4>
 800ca68:	1eb9      	subs	r1, r7, #2
 800ca6a:	4620      	mov	r0, r4
 800ca6c:	f000 fedc 	bl	800d828 <__any_on>
 800ca70:	2800      	cmp	r0, #0
 800ca72:	d145      	bne.n	800cb00 <__gethex+0x280>
 800ca74:	f04f 0a02 	mov.w	sl, #2
 800ca78:	4639      	mov	r1, r7
 800ca7a:	4620      	mov	r0, r4
 800ca7c:	f7ff fe98 	bl	800c7b0 <rshift>
 800ca80:	443d      	add	r5, r7
 800ca82:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800ca86:	42ab      	cmp	r3, r5
 800ca88:	da4c      	bge.n	800cb24 <__gethex+0x2a4>
 800ca8a:	ee18 0a10 	vmov	r0, s16
 800ca8e:	4621      	mov	r1, r4
 800ca90:	f000 fa6a 	bl	800cf68 <_Bfree>
 800ca94:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800ca96:	2300      	movs	r3, #0
 800ca98:	6013      	str	r3, [r2, #0]
 800ca9a:	27a3      	movs	r7, #163	; 0xa3
 800ca9c:	e785      	b.n	800c9aa <__gethex+0x12a>
 800ca9e:	1e73      	subs	r3, r6, #1
 800caa0:	9a05      	ldr	r2, [sp, #20]
 800caa2:	9303      	str	r3, [sp, #12]
 800caa4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800caa8:	4293      	cmp	r3, r2
 800caaa:	d019      	beq.n	800cae0 <__gethex+0x260>
 800caac:	f1bb 0f20 	cmp.w	fp, #32
 800cab0:	d107      	bne.n	800cac2 <__gethex+0x242>
 800cab2:	9b02      	ldr	r3, [sp, #8]
 800cab4:	9a00      	ldr	r2, [sp, #0]
 800cab6:	f843 2b04 	str.w	r2, [r3], #4
 800caba:	9302      	str	r3, [sp, #8]
 800cabc:	2300      	movs	r3, #0
 800cabe:	9300      	str	r3, [sp, #0]
 800cac0:	469b      	mov	fp, r3
 800cac2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cac6:	f7ff fec5 	bl	800c854 <__hexdig_fun>
 800caca:	9b00      	ldr	r3, [sp, #0]
 800cacc:	f000 000f 	and.w	r0, r0, #15
 800cad0:	fa00 f00b 	lsl.w	r0, r0, fp
 800cad4:	4303      	orrs	r3, r0
 800cad6:	9300      	str	r3, [sp, #0]
 800cad8:	f10b 0b04 	add.w	fp, fp, #4
 800cadc:	9b03      	ldr	r3, [sp, #12]
 800cade:	e00d      	b.n	800cafc <__gethex+0x27c>
 800cae0:	9b03      	ldr	r3, [sp, #12]
 800cae2:	9a06      	ldr	r2, [sp, #24]
 800cae4:	4413      	add	r3, r2
 800cae6:	42bb      	cmp	r3, r7
 800cae8:	d3e0      	bcc.n	800caac <__gethex+0x22c>
 800caea:	4618      	mov	r0, r3
 800caec:	9901      	ldr	r1, [sp, #4]
 800caee:	9307      	str	r3, [sp, #28]
 800caf0:	4652      	mov	r2, sl
 800caf2:	f001 fa81 	bl	800dff8 <strncmp>
 800caf6:	9b07      	ldr	r3, [sp, #28]
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d1d7      	bne.n	800caac <__gethex+0x22c>
 800cafc:	461e      	mov	r6, r3
 800cafe:	e78b      	b.n	800ca18 <__gethex+0x198>
 800cb00:	f04f 0a03 	mov.w	sl, #3
 800cb04:	e7b8      	b.n	800ca78 <__gethex+0x1f8>
 800cb06:	da0a      	bge.n	800cb1e <__gethex+0x29e>
 800cb08:	1a37      	subs	r7, r6, r0
 800cb0a:	4621      	mov	r1, r4
 800cb0c:	ee18 0a10 	vmov	r0, s16
 800cb10:	463a      	mov	r2, r7
 800cb12:	f000 fc45 	bl	800d3a0 <__lshift>
 800cb16:	1bed      	subs	r5, r5, r7
 800cb18:	4604      	mov	r4, r0
 800cb1a:	f100 0914 	add.w	r9, r0, #20
 800cb1e:	f04f 0a00 	mov.w	sl, #0
 800cb22:	e7ae      	b.n	800ca82 <__gethex+0x202>
 800cb24:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cb28:	42a8      	cmp	r0, r5
 800cb2a:	dd72      	ble.n	800cc12 <__gethex+0x392>
 800cb2c:	1b45      	subs	r5, r0, r5
 800cb2e:	42ae      	cmp	r6, r5
 800cb30:	dc36      	bgt.n	800cba0 <__gethex+0x320>
 800cb32:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cb36:	2b02      	cmp	r3, #2
 800cb38:	d02a      	beq.n	800cb90 <__gethex+0x310>
 800cb3a:	2b03      	cmp	r3, #3
 800cb3c:	d02c      	beq.n	800cb98 <__gethex+0x318>
 800cb3e:	2b01      	cmp	r3, #1
 800cb40:	d11c      	bne.n	800cb7c <__gethex+0x2fc>
 800cb42:	42ae      	cmp	r6, r5
 800cb44:	d11a      	bne.n	800cb7c <__gethex+0x2fc>
 800cb46:	2e01      	cmp	r6, #1
 800cb48:	d112      	bne.n	800cb70 <__gethex+0x2f0>
 800cb4a:	9a04      	ldr	r2, [sp, #16]
 800cb4c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cb50:	6013      	str	r3, [r2, #0]
 800cb52:	2301      	movs	r3, #1
 800cb54:	6123      	str	r3, [r4, #16]
 800cb56:	f8c9 3000 	str.w	r3, [r9]
 800cb5a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cb5c:	2762      	movs	r7, #98	; 0x62
 800cb5e:	601c      	str	r4, [r3, #0]
 800cb60:	e723      	b.n	800c9aa <__gethex+0x12a>
 800cb62:	bf00      	nop
 800cb64:	0800fc20 	.word	0x0800fc20
 800cb68:	0800fba9 	.word	0x0800fba9
 800cb6c:	0800fbba 	.word	0x0800fbba
 800cb70:	1e71      	subs	r1, r6, #1
 800cb72:	4620      	mov	r0, r4
 800cb74:	f000 fe58 	bl	800d828 <__any_on>
 800cb78:	2800      	cmp	r0, #0
 800cb7a:	d1e6      	bne.n	800cb4a <__gethex+0x2ca>
 800cb7c:	ee18 0a10 	vmov	r0, s16
 800cb80:	4621      	mov	r1, r4
 800cb82:	f000 f9f1 	bl	800cf68 <_Bfree>
 800cb86:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb88:	2300      	movs	r3, #0
 800cb8a:	6013      	str	r3, [r2, #0]
 800cb8c:	2750      	movs	r7, #80	; 0x50
 800cb8e:	e70c      	b.n	800c9aa <__gethex+0x12a>
 800cb90:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb92:	2b00      	cmp	r3, #0
 800cb94:	d1f2      	bne.n	800cb7c <__gethex+0x2fc>
 800cb96:	e7d8      	b.n	800cb4a <__gethex+0x2ca>
 800cb98:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cb9a:	2b00      	cmp	r3, #0
 800cb9c:	d1d5      	bne.n	800cb4a <__gethex+0x2ca>
 800cb9e:	e7ed      	b.n	800cb7c <__gethex+0x2fc>
 800cba0:	1e6f      	subs	r7, r5, #1
 800cba2:	f1ba 0f00 	cmp.w	sl, #0
 800cba6:	d131      	bne.n	800cc0c <__gethex+0x38c>
 800cba8:	b127      	cbz	r7, 800cbb4 <__gethex+0x334>
 800cbaa:	4639      	mov	r1, r7
 800cbac:	4620      	mov	r0, r4
 800cbae:	f000 fe3b 	bl	800d828 <__any_on>
 800cbb2:	4682      	mov	sl, r0
 800cbb4:	117b      	asrs	r3, r7, #5
 800cbb6:	2101      	movs	r1, #1
 800cbb8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cbbc:	f007 071f 	and.w	r7, r7, #31
 800cbc0:	fa01 f707 	lsl.w	r7, r1, r7
 800cbc4:	421f      	tst	r7, r3
 800cbc6:	4629      	mov	r1, r5
 800cbc8:	4620      	mov	r0, r4
 800cbca:	bf18      	it	ne
 800cbcc:	f04a 0a02 	orrne.w	sl, sl, #2
 800cbd0:	1b76      	subs	r6, r6, r5
 800cbd2:	f7ff fded 	bl	800c7b0 <rshift>
 800cbd6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cbda:	2702      	movs	r7, #2
 800cbdc:	f1ba 0f00 	cmp.w	sl, #0
 800cbe0:	d048      	beq.n	800cc74 <__gethex+0x3f4>
 800cbe2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbe6:	2b02      	cmp	r3, #2
 800cbe8:	d015      	beq.n	800cc16 <__gethex+0x396>
 800cbea:	2b03      	cmp	r3, #3
 800cbec:	d017      	beq.n	800cc1e <__gethex+0x39e>
 800cbee:	2b01      	cmp	r3, #1
 800cbf0:	d109      	bne.n	800cc06 <__gethex+0x386>
 800cbf2:	f01a 0f02 	tst.w	sl, #2
 800cbf6:	d006      	beq.n	800cc06 <__gethex+0x386>
 800cbf8:	f8d9 0000 	ldr.w	r0, [r9]
 800cbfc:	ea4a 0a00 	orr.w	sl, sl, r0
 800cc00:	f01a 0f01 	tst.w	sl, #1
 800cc04:	d10e      	bne.n	800cc24 <__gethex+0x3a4>
 800cc06:	f047 0710 	orr.w	r7, r7, #16
 800cc0a:	e033      	b.n	800cc74 <__gethex+0x3f4>
 800cc0c:	f04f 0a01 	mov.w	sl, #1
 800cc10:	e7d0      	b.n	800cbb4 <__gethex+0x334>
 800cc12:	2701      	movs	r7, #1
 800cc14:	e7e2      	b.n	800cbdc <__gethex+0x35c>
 800cc16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc18:	f1c3 0301 	rsb	r3, r3, #1
 800cc1c:	9315      	str	r3, [sp, #84]	; 0x54
 800cc1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d0f0      	beq.n	800cc06 <__gethex+0x386>
 800cc24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800cc28:	f104 0314 	add.w	r3, r4, #20
 800cc2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800cc30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800cc34:	f04f 0c00 	mov.w	ip, #0
 800cc38:	4618      	mov	r0, r3
 800cc3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800cc3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800cc42:	d01c      	beq.n	800cc7e <__gethex+0x3fe>
 800cc44:	3201      	adds	r2, #1
 800cc46:	6002      	str	r2, [r0, #0]
 800cc48:	2f02      	cmp	r7, #2
 800cc4a:	f104 0314 	add.w	r3, r4, #20
 800cc4e:	d13f      	bne.n	800ccd0 <__gethex+0x450>
 800cc50:	f8d8 2000 	ldr.w	r2, [r8]
 800cc54:	3a01      	subs	r2, #1
 800cc56:	42b2      	cmp	r2, r6
 800cc58:	d10a      	bne.n	800cc70 <__gethex+0x3f0>
 800cc5a:	1171      	asrs	r1, r6, #5
 800cc5c:	2201      	movs	r2, #1
 800cc5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800cc62:	f006 061f 	and.w	r6, r6, #31
 800cc66:	fa02 f606 	lsl.w	r6, r2, r6
 800cc6a:	421e      	tst	r6, r3
 800cc6c:	bf18      	it	ne
 800cc6e:	4617      	movne	r7, r2
 800cc70:	f047 0720 	orr.w	r7, r7, #32
 800cc74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cc76:	601c      	str	r4, [r3, #0]
 800cc78:	9b04      	ldr	r3, [sp, #16]
 800cc7a:	601d      	str	r5, [r3, #0]
 800cc7c:	e695      	b.n	800c9aa <__gethex+0x12a>
 800cc7e:	4299      	cmp	r1, r3
 800cc80:	f843 cc04 	str.w	ip, [r3, #-4]
 800cc84:	d8d8      	bhi.n	800cc38 <__gethex+0x3b8>
 800cc86:	68a3      	ldr	r3, [r4, #8]
 800cc88:	459b      	cmp	fp, r3
 800cc8a:	db19      	blt.n	800ccc0 <__gethex+0x440>
 800cc8c:	6861      	ldr	r1, [r4, #4]
 800cc8e:	ee18 0a10 	vmov	r0, s16
 800cc92:	3101      	adds	r1, #1
 800cc94:	f000 f928 	bl	800cee8 <_Balloc>
 800cc98:	4681      	mov	r9, r0
 800cc9a:	b918      	cbnz	r0, 800cca4 <__gethex+0x424>
 800cc9c:	4b1a      	ldr	r3, [pc, #104]	; (800cd08 <__gethex+0x488>)
 800cc9e:	4602      	mov	r2, r0
 800cca0:	2184      	movs	r1, #132	; 0x84
 800cca2:	e6a8      	b.n	800c9f6 <__gethex+0x176>
 800cca4:	6922      	ldr	r2, [r4, #16]
 800cca6:	3202      	adds	r2, #2
 800cca8:	f104 010c 	add.w	r1, r4, #12
 800ccac:	0092      	lsls	r2, r2, #2
 800ccae:	300c      	adds	r0, #12
 800ccb0:	f000 f90c 	bl	800cecc <memcpy>
 800ccb4:	4621      	mov	r1, r4
 800ccb6:	ee18 0a10 	vmov	r0, s16
 800ccba:	f000 f955 	bl	800cf68 <_Bfree>
 800ccbe:	464c      	mov	r4, r9
 800ccc0:	6923      	ldr	r3, [r4, #16]
 800ccc2:	1c5a      	adds	r2, r3, #1
 800ccc4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800ccc8:	6122      	str	r2, [r4, #16]
 800ccca:	2201      	movs	r2, #1
 800cccc:	615a      	str	r2, [r3, #20]
 800ccce:	e7bb      	b.n	800cc48 <__gethex+0x3c8>
 800ccd0:	6922      	ldr	r2, [r4, #16]
 800ccd2:	455a      	cmp	r2, fp
 800ccd4:	dd0b      	ble.n	800ccee <__gethex+0x46e>
 800ccd6:	2101      	movs	r1, #1
 800ccd8:	4620      	mov	r0, r4
 800ccda:	f7ff fd69 	bl	800c7b0 <rshift>
 800ccde:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cce2:	3501      	adds	r5, #1
 800cce4:	42ab      	cmp	r3, r5
 800cce6:	f6ff aed0 	blt.w	800ca8a <__gethex+0x20a>
 800ccea:	2701      	movs	r7, #1
 800ccec:	e7c0      	b.n	800cc70 <__gethex+0x3f0>
 800ccee:	f016 061f 	ands.w	r6, r6, #31
 800ccf2:	d0fa      	beq.n	800ccea <__gethex+0x46a>
 800ccf4:	4453      	add	r3, sl
 800ccf6:	f1c6 0620 	rsb	r6, r6, #32
 800ccfa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800ccfe:	f000 f9e5 	bl	800d0cc <__hi0bits>
 800cd02:	42b0      	cmp	r0, r6
 800cd04:	dbe7      	blt.n	800ccd6 <__gethex+0x456>
 800cd06:	e7f0      	b.n	800ccea <__gethex+0x46a>
 800cd08:	0800fba9 	.word	0x0800fba9

0800cd0c <L_shift>:
 800cd0c:	f1c2 0208 	rsb	r2, r2, #8
 800cd10:	0092      	lsls	r2, r2, #2
 800cd12:	b570      	push	{r4, r5, r6, lr}
 800cd14:	f1c2 0620 	rsb	r6, r2, #32
 800cd18:	6843      	ldr	r3, [r0, #4]
 800cd1a:	6804      	ldr	r4, [r0, #0]
 800cd1c:	fa03 f506 	lsl.w	r5, r3, r6
 800cd20:	432c      	orrs	r4, r5
 800cd22:	40d3      	lsrs	r3, r2
 800cd24:	6004      	str	r4, [r0, #0]
 800cd26:	f840 3f04 	str.w	r3, [r0, #4]!
 800cd2a:	4288      	cmp	r0, r1
 800cd2c:	d3f4      	bcc.n	800cd18 <L_shift+0xc>
 800cd2e:	bd70      	pop	{r4, r5, r6, pc}

0800cd30 <__match>:
 800cd30:	b530      	push	{r4, r5, lr}
 800cd32:	6803      	ldr	r3, [r0, #0]
 800cd34:	3301      	adds	r3, #1
 800cd36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cd3a:	b914      	cbnz	r4, 800cd42 <__match+0x12>
 800cd3c:	6003      	str	r3, [r0, #0]
 800cd3e:	2001      	movs	r0, #1
 800cd40:	bd30      	pop	{r4, r5, pc}
 800cd42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cd46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cd4a:	2d19      	cmp	r5, #25
 800cd4c:	bf98      	it	ls
 800cd4e:	3220      	addls	r2, #32
 800cd50:	42a2      	cmp	r2, r4
 800cd52:	d0f0      	beq.n	800cd36 <__match+0x6>
 800cd54:	2000      	movs	r0, #0
 800cd56:	e7f3      	b.n	800cd40 <__match+0x10>

0800cd58 <__hexnan>:
 800cd58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cd5c:	680b      	ldr	r3, [r1, #0]
 800cd5e:	115e      	asrs	r6, r3, #5
 800cd60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cd64:	f013 031f 	ands.w	r3, r3, #31
 800cd68:	b087      	sub	sp, #28
 800cd6a:	bf18      	it	ne
 800cd6c:	3604      	addne	r6, #4
 800cd6e:	2500      	movs	r5, #0
 800cd70:	1f37      	subs	r7, r6, #4
 800cd72:	4690      	mov	r8, r2
 800cd74:	6802      	ldr	r2, [r0, #0]
 800cd76:	9301      	str	r3, [sp, #4]
 800cd78:	4682      	mov	sl, r0
 800cd7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800cd7e:	46b9      	mov	r9, r7
 800cd80:	463c      	mov	r4, r7
 800cd82:	9502      	str	r5, [sp, #8]
 800cd84:	46ab      	mov	fp, r5
 800cd86:	7851      	ldrb	r1, [r2, #1]
 800cd88:	1c53      	adds	r3, r2, #1
 800cd8a:	9303      	str	r3, [sp, #12]
 800cd8c:	b341      	cbz	r1, 800cde0 <__hexnan+0x88>
 800cd8e:	4608      	mov	r0, r1
 800cd90:	9205      	str	r2, [sp, #20]
 800cd92:	9104      	str	r1, [sp, #16]
 800cd94:	f7ff fd5e 	bl	800c854 <__hexdig_fun>
 800cd98:	2800      	cmp	r0, #0
 800cd9a:	d14f      	bne.n	800ce3c <__hexnan+0xe4>
 800cd9c:	9904      	ldr	r1, [sp, #16]
 800cd9e:	9a05      	ldr	r2, [sp, #20]
 800cda0:	2920      	cmp	r1, #32
 800cda2:	d818      	bhi.n	800cdd6 <__hexnan+0x7e>
 800cda4:	9b02      	ldr	r3, [sp, #8]
 800cda6:	459b      	cmp	fp, r3
 800cda8:	dd13      	ble.n	800cdd2 <__hexnan+0x7a>
 800cdaa:	454c      	cmp	r4, r9
 800cdac:	d206      	bcs.n	800cdbc <__hexnan+0x64>
 800cdae:	2d07      	cmp	r5, #7
 800cdb0:	dc04      	bgt.n	800cdbc <__hexnan+0x64>
 800cdb2:	462a      	mov	r2, r5
 800cdb4:	4649      	mov	r1, r9
 800cdb6:	4620      	mov	r0, r4
 800cdb8:	f7ff ffa8 	bl	800cd0c <L_shift>
 800cdbc:	4544      	cmp	r4, r8
 800cdbe:	d950      	bls.n	800ce62 <__hexnan+0x10a>
 800cdc0:	2300      	movs	r3, #0
 800cdc2:	f1a4 0904 	sub.w	r9, r4, #4
 800cdc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800cdca:	f8cd b008 	str.w	fp, [sp, #8]
 800cdce:	464c      	mov	r4, r9
 800cdd0:	461d      	mov	r5, r3
 800cdd2:	9a03      	ldr	r2, [sp, #12]
 800cdd4:	e7d7      	b.n	800cd86 <__hexnan+0x2e>
 800cdd6:	2929      	cmp	r1, #41	; 0x29
 800cdd8:	d156      	bne.n	800ce88 <__hexnan+0x130>
 800cdda:	3202      	adds	r2, #2
 800cddc:	f8ca 2000 	str.w	r2, [sl]
 800cde0:	f1bb 0f00 	cmp.w	fp, #0
 800cde4:	d050      	beq.n	800ce88 <__hexnan+0x130>
 800cde6:	454c      	cmp	r4, r9
 800cde8:	d206      	bcs.n	800cdf8 <__hexnan+0xa0>
 800cdea:	2d07      	cmp	r5, #7
 800cdec:	dc04      	bgt.n	800cdf8 <__hexnan+0xa0>
 800cdee:	462a      	mov	r2, r5
 800cdf0:	4649      	mov	r1, r9
 800cdf2:	4620      	mov	r0, r4
 800cdf4:	f7ff ff8a 	bl	800cd0c <L_shift>
 800cdf8:	4544      	cmp	r4, r8
 800cdfa:	d934      	bls.n	800ce66 <__hexnan+0x10e>
 800cdfc:	f1a8 0204 	sub.w	r2, r8, #4
 800ce00:	4623      	mov	r3, r4
 800ce02:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce06:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce0a:	429f      	cmp	r7, r3
 800ce0c:	d2f9      	bcs.n	800ce02 <__hexnan+0xaa>
 800ce0e:	1b3b      	subs	r3, r7, r4
 800ce10:	f023 0303 	bic.w	r3, r3, #3
 800ce14:	3304      	adds	r3, #4
 800ce16:	3401      	adds	r4, #1
 800ce18:	3e03      	subs	r6, #3
 800ce1a:	42b4      	cmp	r4, r6
 800ce1c:	bf88      	it	hi
 800ce1e:	2304      	movhi	r3, #4
 800ce20:	4443      	add	r3, r8
 800ce22:	2200      	movs	r2, #0
 800ce24:	f843 2b04 	str.w	r2, [r3], #4
 800ce28:	429f      	cmp	r7, r3
 800ce2a:	d2fb      	bcs.n	800ce24 <__hexnan+0xcc>
 800ce2c:	683b      	ldr	r3, [r7, #0]
 800ce2e:	b91b      	cbnz	r3, 800ce38 <__hexnan+0xe0>
 800ce30:	4547      	cmp	r7, r8
 800ce32:	d127      	bne.n	800ce84 <__hexnan+0x12c>
 800ce34:	2301      	movs	r3, #1
 800ce36:	603b      	str	r3, [r7, #0]
 800ce38:	2005      	movs	r0, #5
 800ce3a:	e026      	b.n	800ce8a <__hexnan+0x132>
 800ce3c:	3501      	adds	r5, #1
 800ce3e:	2d08      	cmp	r5, #8
 800ce40:	f10b 0b01 	add.w	fp, fp, #1
 800ce44:	dd06      	ble.n	800ce54 <__hexnan+0xfc>
 800ce46:	4544      	cmp	r4, r8
 800ce48:	d9c3      	bls.n	800cdd2 <__hexnan+0x7a>
 800ce4a:	2300      	movs	r3, #0
 800ce4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce50:	2501      	movs	r5, #1
 800ce52:	3c04      	subs	r4, #4
 800ce54:	6822      	ldr	r2, [r4, #0]
 800ce56:	f000 000f 	and.w	r0, r0, #15
 800ce5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800ce5e:	6022      	str	r2, [r4, #0]
 800ce60:	e7b7      	b.n	800cdd2 <__hexnan+0x7a>
 800ce62:	2508      	movs	r5, #8
 800ce64:	e7b5      	b.n	800cdd2 <__hexnan+0x7a>
 800ce66:	9b01      	ldr	r3, [sp, #4]
 800ce68:	2b00      	cmp	r3, #0
 800ce6a:	d0df      	beq.n	800ce2c <__hexnan+0xd4>
 800ce6c:	f04f 32ff 	mov.w	r2, #4294967295
 800ce70:	f1c3 0320 	rsb	r3, r3, #32
 800ce74:	fa22 f303 	lsr.w	r3, r2, r3
 800ce78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800ce7c:	401a      	ands	r2, r3
 800ce7e:	f846 2c04 	str.w	r2, [r6, #-4]
 800ce82:	e7d3      	b.n	800ce2c <__hexnan+0xd4>
 800ce84:	3f04      	subs	r7, #4
 800ce86:	e7d1      	b.n	800ce2c <__hexnan+0xd4>
 800ce88:	2004      	movs	r0, #4
 800ce8a:	b007      	add	sp, #28
 800ce8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800ce90 <_localeconv_r>:
 800ce90:	4800      	ldr	r0, [pc, #0]	; (800ce94 <_localeconv_r+0x4>)
 800ce92:	4770      	bx	lr
 800ce94:	20000178 	.word	0x20000178

0800ce98 <malloc>:
 800ce98:	4b02      	ldr	r3, [pc, #8]	; (800cea4 <malloc+0xc>)
 800ce9a:	4601      	mov	r1, r0
 800ce9c:	6818      	ldr	r0, [r3, #0]
 800ce9e:	f000 bd67 	b.w	800d970 <_malloc_r>
 800cea2:	bf00      	nop
 800cea4:	20000020 	.word	0x20000020

0800cea8 <__ascii_mbtowc>:
 800cea8:	b082      	sub	sp, #8
 800ceaa:	b901      	cbnz	r1, 800ceae <__ascii_mbtowc+0x6>
 800ceac:	a901      	add	r1, sp, #4
 800ceae:	b142      	cbz	r2, 800cec2 <__ascii_mbtowc+0x1a>
 800ceb0:	b14b      	cbz	r3, 800cec6 <__ascii_mbtowc+0x1e>
 800ceb2:	7813      	ldrb	r3, [r2, #0]
 800ceb4:	600b      	str	r3, [r1, #0]
 800ceb6:	7812      	ldrb	r2, [r2, #0]
 800ceb8:	1e10      	subs	r0, r2, #0
 800ceba:	bf18      	it	ne
 800cebc:	2001      	movne	r0, #1
 800cebe:	b002      	add	sp, #8
 800cec0:	4770      	bx	lr
 800cec2:	4610      	mov	r0, r2
 800cec4:	e7fb      	b.n	800cebe <__ascii_mbtowc+0x16>
 800cec6:	f06f 0001 	mvn.w	r0, #1
 800ceca:	e7f8      	b.n	800cebe <__ascii_mbtowc+0x16>

0800cecc <memcpy>:
 800cecc:	440a      	add	r2, r1
 800cece:	4291      	cmp	r1, r2
 800ced0:	f100 33ff 	add.w	r3, r0, #4294967295
 800ced4:	d100      	bne.n	800ced8 <memcpy+0xc>
 800ced6:	4770      	bx	lr
 800ced8:	b510      	push	{r4, lr}
 800ceda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cede:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cee2:	4291      	cmp	r1, r2
 800cee4:	d1f9      	bne.n	800ceda <memcpy+0xe>
 800cee6:	bd10      	pop	{r4, pc}

0800cee8 <_Balloc>:
 800cee8:	b570      	push	{r4, r5, r6, lr}
 800ceea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800ceec:	4604      	mov	r4, r0
 800ceee:	460d      	mov	r5, r1
 800cef0:	b976      	cbnz	r6, 800cf10 <_Balloc+0x28>
 800cef2:	2010      	movs	r0, #16
 800cef4:	f7ff ffd0 	bl	800ce98 <malloc>
 800cef8:	4602      	mov	r2, r0
 800cefa:	6260      	str	r0, [r4, #36]	; 0x24
 800cefc:	b920      	cbnz	r0, 800cf08 <_Balloc+0x20>
 800cefe:	4b18      	ldr	r3, [pc, #96]	; (800cf60 <_Balloc+0x78>)
 800cf00:	4818      	ldr	r0, [pc, #96]	; (800cf64 <_Balloc+0x7c>)
 800cf02:	2166      	movs	r1, #102	; 0x66
 800cf04:	f7fe fda8 	bl	800ba58 <__assert_func>
 800cf08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf0c:	6006      	str	r6, [r0, #0]
 800cf0e:	60c6      	str	r6, [r0, #12]
 800cf10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf12:	68f3      	ldr	r3, [r6, #12]
 800cf14:	b183      	cbz	r3, 800cf38 <_Balloc+0x50>
 800cf16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf18:	68db      	ldr	r3, [r3, #12]
 800cf1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cf1e:	b9b8      	cbnz	r0, 800cf50 <_Balloc+0x68>
 800cf20:	2101      	movs	r1, #1
 800cf22:	fa01 f605 	lsl.w	r6, r1, r5
 800cf26:	1d72      	adds	r2, r6, #5
 800cf28:	0092      	lsls	r2, r2, #2
 800cf2a:	4620      	mov	r0, r4
 800cf2c:	f000 fc9d 	bl	800d86a <_calloc_r>
 800cf30:	b160      	cbz	r0, 800cf4c <_Balloc+0x64>
 800cf32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cf36:	e00e      	b.n	800cf56 <_Balloc+0x6e>
 800cf38:	2221      	movs	r2, #33	; 0x21
 800cf3a:	2104      	movs	r1, #4
 800cf3c:	4620      	mov	r0, r4
 800cf3e:	f000 fc94 	bl	800d86a <_calloc_r>
 800cf42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cf44:	60f0      	str	r0, [r6, #12]
 800cf46:	68db      	ldr	r3, [r3, #12]
 800cf48:	2b00      	cmp	r3, #0
 800cf4a:	d1e4      	bne.n	800cf16 <_Balloc+0x2e>
 800cf4c:	2000      	movs	r0, #0
 800cf4e:	bd70      	pop	{r4, r5, r6, pc}
 800cf50:	6802      	ldr	r2, [r0, #0]
 800cf52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cf56:	2300      	movs	r3, #0
 800cf58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cf5c:	e7f7      	b.n	800cf4e <_Balloc+0x66>
 800cf5e:	bf00      	nop
 800cf60:	0800f990 	.word	0x0800f990
 800cf64:	0800fc34 	.word	0x0800fc34

0800cf68 <_Bfree>:
 800cf68:	b570      	push	{r4, r5, r6, lr}
 800cf6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf6c:	4605      	mov	r5, r0
 800cf6e:	460c      	mov	r4, r1
 800cf70:	b976      	cbnz	r6, 800cf90 <_Bfree+0x28>
 800cf72:	2010      	movs	r0, #16
 800cf74:	f7ff ff90 	bl	800ce98 <malloc>
 800cf78:	4602      	mov	r2, r0
 800cf7a:	6268      	str	r0, [r5, #36]	; 0x24
 800cf7c:	b920      	cbnz	r0, 800cf88 <_Bfree+0x20>
 800cf7e:	4b09      	ldr	r3, [pc, #36]	; (800cfa4 <_Bfree+0x3c>)
 800cf80:	4809      	ldr	r0, [pc, #36]	; (800cfa8 <_Bfree+0x40>)
 800cf82:	218a      	movs	r1, #138	; 0x8a
 800cf84:	f7fe fd68 	bl	800ba58 <__assert_func>
 800cf88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf8c:	6006      	str	r6, [r0, #0]
 800cf8e:	60c6      	str	r6, [r0, #12]
 800cf90:	b13c      	cbz	r4, 800cfa2 <_Bfree+0x3a>
 800cf92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800cf94:	6862      	ldr	r2, [r4, #4]
 800cf96:	68db      	ldr	r3, [r3, #12]
 800cf98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800cf9c:	6021      	str	r1, [r4, #0]
 800cf9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800cfa2:	bd70      	pop	{r4, r5, r6, pc}
 800cfa4:	0800f990 	.word	0x0800f990
 800cfa8:	0800fc34 	.word	0x0800fc34

0800cfac <__multadd>:
 800cfac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cfb0:	690d      	ldr	r5, [r1, #16]
 800cfb2:	4607      	mov	r7, r0
 800cfb4:	460c      	mov	r4, r1
 800cfb6:	461e      	mov	r6, r3
 800cfb8:	f101 0c14 	add.w	ip, r1, #20
 800cfbc:	2000      	movs	r0, #0
 800cfbe:	f8dc 3000 	ldr.w	r3, [ip]
 800cfc2:	b299      	uxth	r1, r3
 800cfc4:	fb02 6101 	mla	r1, r2, r1, r6
 800cfc8:	0c1e      	lsrs	r6, r3, #16
 800cfca:	0c0b      	lsrs	r3, r1, #16
 800cfcc:	fb02 3306 	mla	r3, r2, r6, r3
 800cfd0:	b289      	uxth	r1, r1
 800cfd2:	3001      	adds	r0, #1
 800cfd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800cfd8:	4285      	cmp	r5, r0
 800cfda:	f84c 1b04 	str.w	r1, [ip], #4
 800cfde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800cfe2:	dcec      	bgt.n	800cfbe <__multadd+0x12>
 800cfe4:	b30e      	cbz	r6, 800d02a <__multadd+0x7e>
 800cfe6:	68a3      	ldr	r3, [r4, #8]
 800cfe8:	42ab      	cmp	r3, r5
 800cfea:	dc19      	bgt.n	800d020 <__multadd+0x74>
 800cfec:	6861      	ldr	r1, [r4, #4]
 800cfee:	4638      	mov	r0, r7
 800cff0:	3101      	adds	r1, #1
 800cff2:	f7ff ff79 	bl	800cee8 <_Balloc>
 800cff6:	4680      	mov	r8, r0
 800cff8:	b928      	cbnz	r0, 800d006 <__multadd+0x5a>
 800cffa:	4602      	mov	r2, r0
 800cffc:	4b0c      	ldr	r3, [pc, #48]	; (800d030 <__multadd+0x84>)
 800cffe:	480d      	ldr	r0, [pc, #52]	; (800d034 <__multadd+0x88>)
 800d000:	21b5      	movs	r1, #181	; 0xb5
 800d002:	f7fe fd29 	bl	800ba58 <__assert_func>
 800d006:	6922      	ldr	r2, [r4, #16]
 800d008:	3202      	adds	r2, #2
 800d00a:	f104 010c 	add.w	r1, r4, #12
 800d00e:	0092      	lsls	r2, r2, #2
 800d010:	300c      	adds	r0, #12
 800d012:	f7ff ff5b 	bl	800cecc <memcpy>
 800d016:	4621      	mov	r1, r4
 800d018:	4638      	mov	r0, r7
 800d01a:	f7ff ffa5 	bl	800cf68 <_Bfree>
 800d01e:	4644      	mov	r4, r8
 800d020:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d024:	3501      	adds	r5, #1
 800d026:	615e      	str	r6, [r3, #20]
 800d028:	6125      	str	r5, [r4, #16]
 800d02a:	4620      	mov	r0, r4
 800d02c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d030:	0800fba9 	.word	0x0800fba9
 800d034:	0800fc34 	.word	0x0800fc34

0800d038 <__s2b>:
 800d038:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d03c:	460c      	mov	r4, r1
 800d03e:	4615      	mov	r5, r2
 800d040:	461f      	mov	r7, r3
 800d042:	2209      	movs	r2, #9
 800d044:	3308      	adds	r3, #8
 800d046:	4606      	mov	r6, r0
 800d048:	fb93 f3f2 	sdiv	r3, r3, r2
 800d04c:	2100      	movs	r1, #0
 800d04e:	2201      	movs	r2, #1
 800d050:	429a      	cmp	r2, r3
 800d052:	db09      	blt.n	800d068 <__s2b+0x30>
 800d054:	4630      	mov	r0, r6
 800d056:	f7ff ff47 	bl	800cee8 <_Balloc>
 800d05a:	b940      	cbnz	r0, 800d06e <__s2b+0x36>
 800d05c:	4602      	mov	r2, r0
 800d05e:	4b19      	ldr	r3, [pc, #100]	; (800d0c4 <__s2b+0x8c>)
 800d060:	4819      	ldr	r0, [pc, #100]	; (800d0c8 <__s2b+0x90>)
 800d062:	21ce      	movs	r1, #206	; 0xce
 800d064:	f7fe fcf8 	bl	800ba58 <__assert_func>
 800d068:	0052      	lsls	r2, r2, #1
 800d06a:	3101      	adds	r1, #1
 800d06c:	e7f0      	b.n	800d050 <__s2b+0x18>
 800d06e:	9b08      	ldr	r3, [sp, #32]
 800d070:	6143      	str	r3, [r0, #20]
 800d072:	2d09      	cmp	r5, #9
 800d074:	f04f 0301 	mov.w	r3, #1
 800d078:	6103      	str	r3, [r0, #16]
 800d07a:	dd16      	ble.n	800d0aa <__s2b+0x72>
 800d07c:	f104 0909 	add.w	r9, r4, #9
 800d080:	46c8      	mov	r8, r9
 800d082:	442c      	add	r4, r5
 800d084:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d088:	4601      	mov	r1, r0
 800d08a:	3b30      	subs	r3, #48	; 0x30
 800d08c:	220a      	movs	r2, #10
 800d08e:	4630      	mov	r0, r6
 800d090:	f7ff ff8c 	bl	800cfac <__multadd>
 800d094:	45a0      	cmp	r8, r4
 800d096:	d1f5      	bne.n	800d084 <__s2b+0x4c>
 800d098:	f1a5 0408 	sub.w	r4, r5, #8
 800d09c:	444c      	add	r4, r9
 800d09e:	1b2d      	subs	r5, r5, r4
 800d0a0:	1963      	adds	r3, r4, r5
 800d0a2:	42bb      	cmp	r3, r7
 800d0a4:	db04      	blt.n	800d0b0 <__s2b+0x78>
 800d0a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d0aa:	340a      	adds	r4, #10
 800d0ac:	2509      	movs	r5, #9
 800d0ae:	e7f6      	b.n	800d09e <__s2b+0x66>
 800d0b0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d0b4:	4601      	mov	r1, r0
 800d0b6:	3b30      	subs	r3, #48	; 0x30
 800d0b8:	220a      	movs	r2, #10
 800d0ba:	4630      	mov	r0, r6
 800d0bc:	f7ff ff76 	bl	800cfac <__multadd>
 800d0c0:	e7ee      	b.n	800d0a0 <__s2b+0x68>
 800d0c2:	bf00      	nop
 800d0c4:	0800fba9 	.word	0x0800fba9
 800d0c8:	0800fc34 	.word	0x0800fc34

0800d0cc <__hi0bits>:
 800d0cc:	0c03      	lsrs	r3, r0, #16
 800d0ce:	041b      	lsls	r3, r3, #16
 800d0d0:	b9d3      	cbnz	r3, 800d108 <__hi0bits+0x3c>
 800d0d2:	0400      	lsls	r0, r0, #16
 800d0d4:	2310      	movs	r3, #16
 800d0d6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d0da:	bf04      	itt	eq
 800d0dc:	0200      	lsleq	r0, r0, #8
 800d0de:	3308      	addeq	r3, #8
 800d0e0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d0e4:	bf04      	itt	eq
 800d0e6:	0100      	lsleq	r0, r0, #4
 800d0e8:	3304      	addeq	r3, #4
 800d0ea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d0ee:	bf04      	itt	eq
 800d0f0:	0080      	lsleq	r0, r0, #2
 800d0f2:	3302      	addeq	r3, #2
 800d0f4:	2800      	cmp	r0, #0
 800d0f6:	db05      	blt.n	800d104 <__hi0bits+0x38>
 800d0f8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d0fc:	f103 0301 	add.w	r3, r3, #1
 800d100:	bf08      	it	eq
 800d102:	2320      	moveq	r3, #32
 800d104:	4618      	mov	r0, r3
 800d106:	4770      	bx	lr
 800d108:	2300      	movs	r3, #0
 800d10a:	e7e4      	b.n	800d0d6 <__hi0bits+0xa>

0800d10c <__lo0bits>:
 800d10c:	6803      	ldr	r3, [r0, #0]
 800d10e:	f013 0207 	ands.w	r2, r3, #7
 800d112:	4601      	mov	r1, r0
 800d114:	d00b      	beq.n	800d12e <__lo0bits+0x22>
 800d116:	07da      	lsls	r2, r3, #31
 800d118:	d423      	bmi.n	800d162 <__lo0bits+0x56>
 800d11a:	0798      	lsls	r0, r3, #30
 800d11c:	bf49      	itett	mi
 800d11e:	085b      	lsrmi	r3, r3, #1
 800d120:	089b      	lsrpl	r3, r3, #2
 800d122:	2001      	movmi	r0, #1
 800d124:	600b      	strmi	r3, [r1, #0]
 800d126:	bf5c      	itt	pl
 800d128:	600b      	strpl	r3, [r1, #0]
 800d12a:	2002      	movpl	r0, #2
 800d12c:	4770      	bx	lr
 800d12e:	b298      	uxth	r0, r3
 800d130:	b9a8      	cbnz	r0, 800d15e <__lo0bits+0x52>
 800d132:	0c1b      	lsrs	r3, r3, #16
 800d134:	2010      	movs	r0, #16
 800d136:	b2da      	uxtb	r2, r3
 800d138:	b90a      	cbnz	r2, 800d13e <__lo0bits+0x32>
 800d13a:	3008      	adds	r0, #8
 800d13c:	0a1b      	lsrs	r3, r3, #8
 800d13e:	071a      	lsls	r2, r3, #28
 800d140:	bf04      	itt	eq
 800d142:	091b      	lsreq	r3, r3, #4
 800d144:	3004      	addeq	r0, #4
 800d146:	079a      	lsls	r2, r3, #30
 800d148:	bf04      	itt	eq
 800d14a:	089b      	lsreq	r3, r3, #2
 800d14c:	3002      	addeq	r0, #2
 800d14e:	07da      	lsls	r2, r3, #31
 800d150:	d403      	bmi.n	800d15a <__lo0bits+0x4e>
 800d152:	085b      	lsrs	r3, r3, #1
 800d154:	f100 0001 	add.w	r0, r0, #1
 800d158:	d005      	beq.n	800d166 <__lo0bits+0x5a>
 800d15a:	600b      	str	r3, [r1, #0]
 800d15c:	4770      	bx	lr
 800d15e:	4610      	mov	r0, r2
 800d160:	e7e9      	b.n	800d136 <__lo0bits+0x2a>
 800d162:	2000      	movs	r0, #0
 800d164:	4770      	bx	lr
 800d166:	2020      	movs	r0, #32
 800d168:	4770      	bx	lr
	...

0800d16c <__i2b>:
 800d16c:	b510      	push	{r4, lr}
 800d16e:	460c      	mov	r4, r1
 800d170:	2101      	movs	r1, #1
 800d172:	f7ff feb9 	bl	800cee8 <_Balloc>
 800d176:	4602      	mov	r2, r0
 800d178:	b928      	cbnz	r0, 800d186 <__i2b+0x1a>
 800d17a:	4b05      	ldr	r3, [pc, #20]	; (800d190 <__i2b+0x24>)
 800d17c:	4805      	ldr	r0, [pc, #20]	; (800d194 <__i2b+0x28>)
 800d17e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d182:	f7fe fc69 	bl	800ba58 <__assert_func>
 800d186:	2301      	movs	r3, #1
 800d188:	6144      	str	r4, [r0, #20]
 800d18a:	6103      	str	r3, [r0, #16]
 800d18c:	bd10      	pop	{r4, pc}
 800d18e:	bf00      	nop
 800d190:	0800fba9 	.word	0x0800fba9
 800d194:	0800fc34 	.word	0x0800fc34

0800d198 <__multiply>:
 800d198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d19c:	4691      	mov	r9, r2
 800d19e:	690a      	ldr	r2, [r1, #16]
 800d1a0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d1a4:	429a      	cmp	r2, r3
 800d1a6:	bfb8      	it	lt
 800d1a8:	460b      	movlt	r3, r1
 800d1aa:	460c      	mov	r4, r1
 800d1ac:	bfbc      	itt	lt
 800d1ae:	464c      	movlt	r4, r9
 800d1b0:	4699      	movlt	r9, r3
 800d1b2:	6927      	ldr	r7, [r4, #16]
 800d1b4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d1b8:	68a3      	ldr	r3, [r4, #8]
 800d1ba:	6861      	ldr	r1, [r4, #4]
 800d1bc:	eb07 060a 	add.w	r6, r7, sl
 800d1c0:	42b3      	cmp	r3, r6
 800d1c2:	b085      	sub	sp, #20
 800d1c4:	bfb8      	it	lt
 800d1c6:	3101      	addlt	r1, #1
 800d1c8:	f7ff fe8e 	bl	800cee8 <_Balloc>
 800d1cc:	b930      	cbnz	r0, 800d1dc <__multiply+0x44>
 800d1ce:	4602      	mov	r2, r0
 800d1d0:	4b44      	ldr	r3, [pc, #272]	; (800d2e4 <__multiply+0x14c>)
 800d1d2:	4845      	ldr	r0, [pc, #276]	; (800d2e8 <__multiply+0x150>)
 800d1d4:	f240 115d 	movw	r1, #349	; 0x15d
 800d1d8:	f7fe fc3e 	bl	800ba58 <__assert_func>
 800d1dc:	f100 0514 	add.w	r5, r0, #20
 800d1e0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d1e4:	462b      	mov	r3, r5
 800d1e6:	2200      	movs	r2, #0
 800d1e8:	4543      	cmp	r3, r8
 800d1ea:	d321      	bcc.n	800d230 <__multiply+0x98>
 800d1ec:	f104 0314 	add.w	r3, r4, #20
 800d1f0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d1f4:	f109 0314 	add.w	r3, r9, #20
 800d1f8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d1fc:	9202      	str	r2, [sp, #8]
 800d1fe:	1b3a      	subs	r2, r7, r4
 800d200:	3a15      	subs	r2, #21
 800d202:	f022 0203 	bic.w	r2, r2, #3
 800d206:	3204      	adds	r2, #4
 800d208:	f104 0115 	add.w	r1, r4, #21
 800d20c:	428f      	cmp	r7, r1
 800d20e:	bf38      	it	cc
 800d210:	2204      	movcc	r2, #4
 800d212:	9201      	str	r2, [sp, #4]
 800d214:	9a02      	ldr	r2, [sp, #8]
 800d216:	9303      	str	r3, [sp, #12]
 800d218:	429a      	cmp	r2, r3
 800d21a:	d80c      	bhi.n	800d236 <__multiply+0x9e>
 800d21c:	2e00      	cmp	r6, #0
 800d21e:	dd03      	ble.n	800d228 <__multiply+0x90>
 800d220:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d224:	2b00      	cmp	r3, #0
 800d226:	d05a      	beq.n	800d2de <__multiply+0x146>
 800d228:	6106      	str	r6, [r0, #16]
 800d22a:	b005      	add	sp, #20
 800d22c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d230:	f843 2b04 	str.w	r2, [r3], #4
 800d234:	e7d8      	b.n	800d1e8 <__multiply+0x50>
 800d236:	f8b3 a000 	ldrh.w	sl, [r3]
 800d23a:	f1ba 0f00 	cmp.w	sl, #0
 800d23e:	d024      	beq.n	800d28a <__multiply+0xf2>
 800d240:	f104 0e14 	add.w	lr, r4, #20
 800d244:	46a9      	mov	r9, r5
 800d246:	f04f 0c00 	mov.w	ip, #0
 800d24a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d24e:	f8d9 1000 	ldr.w	r1, [r9]
 800d252:	fa1f fb82 	uxth.w	fp, r2
 800d256:	b289      	uxth	r1, r1
 800d258:	fb0a 110b 	mla	r1, sl, fp, r1
 800d25c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d260:	f8d9 2000 	ldr.w	r2, [r9]
 800d264:	4461      	add	r1, ip
 800d266:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d26a:	fb0a c20b 	mla	r2, sl, fp, ip
 800d26e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d272:	b289      	uxth	r1, r1
 800d274:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d278:	4577      	cmp	r7, lr
 800d27a:	f849 1b04 	str.w	r1, [r9], #4
 800d27e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d282:	d8e2      	bhi.n	800d24a <__multiply+0xb2>
 800d284:	9a01      	ldr	r2, [sp, #4]
 800d286:	f845 c002 	str.w	ip, [r5, r2]
 800d28a:	9a03      	ldr	r2, [sp, #12]
 800d28c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d290:	3304      	adds	r3, #4
 800d292:	f1b9 0f00 	cmp.w	r9, #0
 800d296:	d020      	beq.n	800d2da <__multiply+0x142>
 800d298:	6829      	ldr	r1, [r5, #0]
 800d29a:	f104 0c14 	add.w	ip, r4, #20
 800d29e:	46ae      	mov	lr, r5
 800d2a0:	f04f 0a00 	mov.w	sl, #0
 800d2a4:	f8bc b000 	ldrh.w	fp, [ip]
 800d2a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d2ac:	fb09 220b 	mla	r2, r9, fp, r2
 800d2b0:	4492      	add	sl, r2
 800d2b2:	b289      	uxth	r1, r1
 800d2b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d2b8:	f84e 1b04 	str.w	r1, [lr], #4
 800d2bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d2c0:	f8be 1000 	ldrh.w	r1, [lr]
 800d2c4:	0c12      	lsrs	r2, r2, #16
 800d2c6:	fb09 1102 	mla	r1, r9, r2, r1
 800d2ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d2ce:	4567      	cmp	r7, ip
 800d2d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d2d4:	d8e6      	bhi.n	800d2a4 <__multiply+0x10c>
 800d2d6:	9a01      	ldr	r2, [sp, #4]
 800d2d8:	50a9      	str	r1, [r5, r2]
 800d2da:	3504      	adds	r5, #4
 800d2dc:	e79a      	b.n	800d214 <__multiply+0x7c>
 800d2de:	3e01      	subs	r6, #1
 800d2e0:	e79c      	b.n	800d21c <__multiply+0x84>
 800d2e2:	bf00      	nop
 800d2e4:	0800fba9 	.word	0x0800fba9
 800d2e8:	0800fc34 	.word	0x0800fc34

0800d2ec <__pow5mult>:
 800d2ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d2f0:	4615      	mov	r5, r2
 800d2f2:	f012 0203 	ands.w	r2, r2, #3
 800d2f6:	4606      	mov	r6, r0
 800d2f8:	460f      	mov	r7, r1
 800d2fa:	d007      	beq.n	800d30c <__pow5mult+0x20>
 800d2fc:	4c25      	ldr	r4, [pc, #148]	; (800d394 <__pow5mult+0xa8>)
 800d2fe:	3a01      	subs	r2, #1
 800d300:	2300      	movs	r3, #0
 800d302:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d306:	f7ff fe51 	bl	800cfac <__multadd>
 800d30a:	4607      	mov	r7, r0
 800d30c:	10ad      	asrs	r5, r5, #2
 800d30e:	d03d      	beq.n	800d38c <__pow5mult+0xa0>
 800d310:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d312:	b97c      	cbnz	r4, 800d334 <__pow5mult+0x48>
 800d314:	2010      	movs	r0, #16
 800d316:	f7ff fdbf 	bl	800ce98 <malloc>
 800d31a:	4602      	mov	r2, r0
 800d31c:	6270      	str	r0, [r6, #36]	; 0x24
 800d31e:	b928      	cbnz	r0, 800d32c <__pow5mult+0x40>
 800d320:	4b1d      	ldr	r3, [pc, #116]	; (800d398 <__pow5mult+0xac>)
 800d322:	481e      	ldr	r0, [pc, #120]	; (800d39c <__pow5mult+0xb0>)
 800d324:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d328:	f7fe fb96 	bl	800ba58 <__assert_func>
 800d32c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d330:	6004      	str	r4, [r0, #0]
 800d332:	60c4      	str	r4, [r0, #12]
 800d334:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d338:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d33c:	b94c      	cbnz	r4, 800d352 <__pow5mult+0x66>
 800d33e:	f240 2171 	movw	r1, #625	; 0x271
 800d342:	4630      	mov	r0, r6
 800d344:	f7ff ff12 	bl	800d16c <__i2b>
 800d348:	2300      	movs	r3, #0
 800d34a:	f8c8 0008 	str.w	r0, [r8, #8]
 800d34e:	4604      	mov	r4, r0
 800d350:	6003      	str	r3, [r0, #0]
 800d352:	f04f 0900 	mov.w	r9, #0
 800d356:	07eb      	lsls	r3, r5, #31
 800d358:	d50a      	bpl.n	800d370 <__pow5mult+0x84>
 800d35a:	4639      	mov	r1, r7
 800d35c:	4622      	mov	r2, r4
 800d35e:	4630      	mov	r0, r6
 800d360:	f7ff ff1a 	bl	800d198 <__multiply>
 800d364:	4639      	mov	r1, r7
 800d366:	4680      	mov	r8, r0
 800d368:	4630      	mov	r0, r6
 800d36a:	f7ff fdfd 	bl	800cf68 <_Bfree>
 800d36e:	4647      	mov	r7, r8
 800d370:	106d      	asrs	r5, r5, #1
 800d372:	d00b      	beq.n	800d38c <__pow5mult+0xa0>
 800d374:	6820      	ldr	r0, [r4, #0]
 800d376:	b938      	cbnz	r0, 800d388 <__pow5mult+0x9c>
 800d378:	4622      	mov	r2, r4
 800d37a:	4621      	mov	r1, r4
 800d37c:	4630      	mov	r0, r6
 800d37e:	f7ff ff0b 	bl	800d198 <__multiply>
 800d382:	6020      	str	r0, [r4, #0]
 800d384:	f8c0 9000 	str.w	r9, [r0]
 800d388:	4604      	mov	r4, r0
 800d38a:	e7e4      	b.n	800d356 <__pow5mult+0x6a>
 800d38c:	4638      	mov	r0, r7
 800d38e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d392:	bf00      	nop
 800d394:	0800fd80 	.word	0x0800fd80
 800d398:	0800f990 	.word	0x0800f990
 800d39c:	0800fc34 	.word	0x0800fc34

0800d3a0 <__lshift>:
 800d3a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d3a4:	460c      	mov	r4, r1
 800d3a6:	6849      	ldr	r1, [r1, #4]
 800d3a8:	6923      	ldr	r3, [r4, #16]
 800d3aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d3ae:	68a3      	ldr	r3, [r4, #8]
 800d3b0:	4607      	mov	r7, r0
 800d3b2:	4691      	mov	r9, r2
 800d3b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d3b8:	f108 0601 	add.w	r6, r8, #1
 800d3bc:	42b3      	cmp	r3, r6
 800d3be:	db0b      	blt.n	800d3d8 <__lshift+0x38>
 800d3c0:	4638      	mov	r0, r7
 800d3c2:	f7ff fd91 	bl	800cee8 <_Balloc>
 800d3c6:	4605      	mov	r5, r0
 800d3c8:	b948      	cbnz	r0, 800d3de <__lshift+0x3e>
 800d3ca:	4602      	mov	r2, r0
 800d3cc:	4b2a      	ldr	r3, [pc, #168]	; (800d478 <__lshift+0xd8>)
 800d3ce:	482b      	ldr	r0, [pc, #172]	; (800d47c <__lshift+0xdc>)
 800d3d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d3d4:	f7fe fb40 	bl	800ba58 <__assert_func>
 800d3d8:	3101      	adds	r1, #1
 800d3da:	005b      	lsls	r3, r3, #1
 800d3dc:	e7ee      	b.n	800d3bc <__lshift+0x1c>
 800d3de:	2300      	movs	r3, #0
 800d3e0:	f100 0114 	add.w	r1, r0, #20
 800d3e4:	f100 0210 	add.w	r2, r0, #16
 800d3e8:	4618      	mov	r0, r3
 800d3ea:	4553      	cmp	r3, sl
 800d3ec:	db37      	blt.n	800d45e <__lshift+0xbe>
 800d3ee:	6920      	ldr	r0, [r4, #16]
 800d3f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d3f4:	f104 0314 	add.w	r3, r4, #20
 800d3f8:	f019 091f 	ands.w	r9, r9, #31
 800d3fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d400:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d404:	d02f      	beq.n	800d466 <__lshift+0xc6>
 800d406:	f1c9 0e20 	rsb	lr, r9, #32
 800d40a:	468a      	mov	sl, r1
 800d40c:	f04f 0c00 	mov.w	ip, #0
 800d410:	681a      	ldr	r2, [r3, #0]
 800d412:	fa02 f209 	lsl.w	r2, r2, r9
 800d416:	ea42 020c 	orr.w	r2, r2, ip
 800d41a:	f84a 2b04 	str.w	r2, [sl], #4
 800d41e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d422:	4298      	cmp	r0, r3
 800d424:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d428:	d8f2      	bhi.n	800d410 <__lshift+0x70>
 800d42a:	1b03      	subs	r3, r0, r4
 800d42c:	3b15      	subs	r3, #21
 800d42e:	f023 0303 	bic.w	r3, r3, #3
 800d432:	3304      	adds	r3, #4
 800d434:	f104 0215 	add.w	r2, r4, #21
 800d438:	4290      	cmp	r0, r2
 800d43a:	bf38      	it	cc
 800d43c:	2304      	movcc	r3, #4
 800d43e:	f841 c003 	str.w	ip, [r1, r3]
 800d442:	f1bc 0f00 	cmp.w	ip, #0
 800d446:	d001      	beq.n	800d44c <__lshift+0xac>
 800d448:	f108 0602 	add.w	r6, r8, #2
 800d44c:	3e01      	subs	r6, #1
 800d44e:	4638      	mov	r0, r7
 800d450:	612e      	str	r6, [r5, #16]
 800d452:	4621      	mov	r1, r4
 800d454:	f7ff fd88 	bl	800cf68 <_Bfree>
 800d458:	4628      	mov	r0, r5
 800d45a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d45e:	f842 0f04 	str.w	r0, [r2, #4]!
 800d462:	3301      	adds	r3, #1
 800d464:	e7c1      	b.n	800d3ea <__lshift+0x4a>
 800d466:	3904      	subs	r1, #4
 800d468:	f853 2b04 	ldr.w	r2, [r3], #4
 800d46c:	f841 2f04 	str.w	r2, [r1, #4]!
 800d470:	4298      	cmp	r0, r3
 800d472:	d8f9      	bhi.n	800d468 <__lshift+0xc8>
 800d474:	e7ea      	b.n	800d44c <__lshift+0xac>
 800d476:	bf00      	nop
 800d478:	0800fba9 	.word	0x0800fba9
 800d47c:	0800fc34 	.word	0x0800fc34

0800d480 <__mcmp>:
 800d480:	b530      	push	{r4, r5, lr}
 800d482:	6902      	ldr	r2, [r0, #16]
 800d484:	690c      	ldr	r4, [r1, #16]
 800d486:	1b12      	subs	r2, r2, r4
 800d488:	d10e      	bne.n	800d4a8 <__mcmp+0x28>
 800d48a:	f100 0314 	add.w	r3, r0, #20
 800d48e:	3114      	adds	r1, #20
 800d490:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d494:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d498:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d49c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d4a0:	42a5      	cmp	r5, r4
 800d4a2:	d003      	beq.n	800d4ac <__mcmp+0x2c>
 800d4a4:	d305      	bcc.n	800d4b2 <__mcmp+0x32>
 800d4a6:	2201      	movs	r2, #1
 800d4a8:	4610      	mov	r0, r2
 800d4aa:	bd30      	pop	{r4, r5, pc}
 800d4ac:	4283      	cmp	r3, r0
 800d4ae:	d3f3      	bcc.n	800d498 <__mcmp+0x18>
 800d4b0:	e7fa      	b.n	800d4a8 <__mcmp+0x28>
 800d4b2:	f04f 32ff 	mov.w	r2, #4294967295
 800d4b6:	e7f7      	b.n	800d4a8 <__mcmp+0x28>

0800d4b8 <__mdiff>:
 800d4b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d4bc:	460c      	mov	r4, r1
 800d4be:	4606      	mov	r6, r0
 800d4c0:	4611      	mov	r1, r2
 800d4c2:	4620      	mov	r0, r4
 800d4c4:	4690      	mov	r8, r2
 800d4c6:	f7ff ffdb 	bl	800d480 <__mcmp>
 800d4ca:	1e05      	subs	r5, r0, #0
 800d4cc:	d110      	bne.n	800d4f0 <__mdiff+0x38>
 800d4ce:	4629      	mov	r1, r5
 800d4d0:	4630      	mov	r0, r6
 800d4d2:	f7ff fd09 	bl	800cee8 <_Balloc>
 800d4d6:	b930      	cbnz	r0, 800d4e6 <__mdiff+0x2e>
 800d4d8:	4b3a      	ldr	r3, [pc, #232]	; (800d5c4 <__mdiff+0x10c>)
 800d4da:	4602      	mov	r2, r0
 800d4dc:	f240 2132 	movw	r1, #562	; 0x232
 800d4e0:	4839      	ldr	r0, [pc, #228]	; (800d5c8 <__mdiff+0x110>)
 800d4e2:	f7fe fab9 	bl	800ba58 <__assert_func>
 800d4e6:	2301      	movs	r3, #1
 800d4e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d4ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d4f0:	bfa4      	itt	ge
 800d4f2:	4643      	movge	r3, r8
 800d4f4:	46a0      	movge	r8, r4
 800d4f6:	4630      	mov	r0, r6
 800d4f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d4fc:	bfa6      	itte	ge
 800d4fe:	461c      	movge	r4, r3
 800d500:	2500      	movge	r5, #0
 800d502:	2501      	movlt	r5, #1
 800d504:	f7ff fcf0 	bl	800cee8 <_Balloc>
 800d508:	b920      	cbnz	r0, 800d514 <__mdiff+0x5c>
 800d50a:	4b2e      	ldr	r3, [pc, #184]	; (800d5c4 <__mdiff+0x10c>)
 800d50c:	4602      	mov	r2, r0
 800d50e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d512:	e7e5      	b.n	800d4e0 <__mdiff+0x28>
 800d514:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d518:	6926      	ldr	r6, [r4, #16]
 800d51a:	60c5      	str	r5, [r0, #12]
 800d51c:	f104 0914 	add.w	r9, r4, #20
 800d520:	f108 0514 	add.w	r5, r8, #20
 800d524:	f100 0e14 	add.w	lr, r0, #20
 800d528:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d52c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d530:	f108 0210 	add.w	r2, r8, #16
 800d534:	46f2      	mov	sl, lr
 800d536:	2100      	movs	r1, #0
 800d538:	f859 3b04 	ldr.w	r3, [r9], #4
 800d53c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d540:	fa1f f883 	uxth.w	r8, r3
 800d544:	fa11 f18b 	uxtah	r1, r1, fp
 800d548:	0c1b      	lsrs	r3, r3, #16
 800d54a:	eba1 0808 	sub.w	r8, r1, r8
 800d54e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d552:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d556:	fa1f f888 	uxth.w	r8, r8
 800d55a:	1419      	asrs	r1, r3, #16
 800d55c:	454e      	cmp	r6, r9
 800d55e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d562:	f84a 3b04 	str.w	r3, [sl], #4
 800d566:	d8e7      	bhi.n	800d538 <__mdiff+0x80>
 800d568:	1b33      	subs	r3, r6, r4
 800d56a:	3b15      	subs	r3, #21
 800d56c:	f023 0303 	bic.w	r3, r3, #3
 800d570:	3304      	adds	r3, #4
 800d572:	3415      	adds	r4, #21
 800d574:	42a6      	cmp	r6, r4
 800d576:	bf38      	it	cc
 800d578:	2304      	movcc	r3, #4
 800d57a:	441d      	add	r5, r3
 800d57c:	4473      	add	r3, lr
 800d57e:	469e      	mov	lr, r3
 800d580:	462e      	mov	r6, r5
 800d582:	4566      	cmp	r6, ip
 800d584:	d30e      	bcc.n	800d5a4 <__mdiff+0xec>
 800d586:	f10c 0203 	add.w	r2, ip, #3
 800d58a:	1b52      	subs	r2, r2, r5
 800d58c:	f022 0203 	bic.w	r2, r2, #3
 800d590:	3d03      	subs	r5, #3
 800d592:	45ac      	cmp	ip, r5
 800d594:	bf38      	it	cc
 800d596:	2200      	movcc	r2, #0
 800d598:	441a      	add	r2, r3
 800d59a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d59e:	b17b      	cbz	r3, 800d5c0 <__mdiff+0x108>
 800d5a0:	6107      	str	r7, [r0, #16]
 800d5a2:	e7a3      	b.n	800d4ec <__mdiff+0x34>
 800d5a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800d5a8:	fa11 f288 	uxtah	r2, r1, r8
 800d5ac:	1414      	asrs	r4, r2, #16
 800d5ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d5b2:	b292      	uxth	r2, r2
 800d5b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d5b8:	f84e 2b04 	str.w	r2, [lr], #4
 800d5bc:	1421      	asrs	r1, r4, #16
 800d5be:	e7e0      	b.n	800d582 <__mdiff+0xca>
 800d5c0:	3f01      	subs	r7, #1
 800d5c2:	e7ea      	b.n	800d59a <__mdiff+0xe2>
 800d5c4:	0800fba9 	.word	0x0800fba9
 800d5c8:	0800fc34 	.word	0x0800fc34

0800d5cc <__ulp>:
 800d5cc:	b082      	sub	sp, #8
 800d5ce:	ed8d 0b00 	vstr	d0, [sp]
 800d5d2:	9b01      	ldr	r3, [sp, #4]
 800d5d4:	4912      	ldr	r1, [pc, #72]	; (800d620 <__ulp+0x54>)
 800d5d6:	4019      	ands	r1, r3
 800d5d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d5dc:	2900      	cmp	r1, #0
 800d5de:	dd05      	ble.n	800d5ec <__ulp+0x20>
 800d5e0:	2200      	movs	r2, #0
 800d5e2:	460b      	mov	r3, r1
 800d5e4:	ec43 2b10 	vmov	d0, r2, r3
 800d5e8:	b002      	add	sp, #8
 800d5ea:	4770      	bx	lr
 800d5ec:	4249      	negs	r1, r1
 800d5ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d5f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d5f6:	f04f 0200 	mov.w	r2, #0
 800d5fa:	f04f 0300 	mov.w	r3, #0
 800d5fe:	da04      	bge.n	800d60a <__ulp+0x3e>
 800d600:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d604:	fa41 f300 	asr.w	r3, r1, r0
 800d608:	e7ec      	b.n	800d5e4 <__ulp+0x18>
 800d60a:	f1a0 0114 	sub.w	r1, r0, #20
 800d60e:	291e      	cmp	r1, #30
 800d610:	bfda      	itte	le
 800d612:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d616:	fa20 f101 	lsrle.w	r1, r0, r1
 800d61a:	2101      	movgt	r1, #1
 800d61c:	460a      	mov	r2, r1
 800d61e:	e7e1      	b.n	800d5e4 <__ulp+0x18>
 800d620:	7ff00000 	.word	0x7ff00000

0800d624 <__b2d>:
 800d624:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d626:	6905      	ldr	r5, [r0, #16]
 800d628:	f100 0714 	add.w	r7, r0, #20
 800d62c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d630:	1f2e      	subs	r6, r5, #4
 800d632:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d636:	4620      	mov	r0, r4
 800d638:	f7ff fd48 	bl	800d0cc <__hi0bits>
 800d63c:	f1c0 0320 	rsb	r3, r0, #32
 800d640:	280a      	cmp	r0, #10
 800d642:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d6c0 <__b2d+0x9c>
 800d646:	600b      	str	r3, [r1, #0]
 800d648:	dc14      	bgt.n	800d674 <__b2d+0x50>
 800d64a:	f1c0 0e0b 	rsb	lr, r0, #11
 800d64e:	fa24 f10e 	lsr.w	r1, r4, lr
 800d652:	42b7      	cmp	r7, r6
 800d654:	ea41 030c 	orr.w	r3, r1, ip
 800d658:	bf34      	ite	cc
 800d65a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d65e:	2100      	movcs	r1, #0
 800d660:	3015      	adds	r0, #21
 800d662:	fa04 f000 	lsl.w	r0, r4, r0
 800d666:	fa21 f10e 	lsr.w	r1, r1, lr
 800d66a:	ea40 0201 	orr.w	r2, r0, r1
 800d66e:	ec43 2b10 	vmov	d0, r2, r3
 800d672:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d674:	42b7      	cmp	r7, r6
 800d676:	bf3a      	itte	cc
 800d678:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d67c:	f1a5 0608 	subcc.w	r6, r5, #8
 800d680:	2100      	movcs	r1, #0
 800d682:	380b      	subs	r0, #11
 800d684:	d017      	beq.n	800d6b6 <__b2d+0x92>
 800d686:	f1c0 0c20 	rsb	ip, r0, #32
 800d68a:	fa04 f500 	lsl.w	r5, r4, r0
 800d68e:	42be      	cmp	r6, r7
 800d690:	fa21 f40c 	lsr.w	r4, r1, ip
 800d694:	ea45 0504 	orr.w	r5, r5, r4
 800d698:	bf8c      	ite	hi
 800d69a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d69e:	2400      	movls	r4, #0
 800d6a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d6a4:	fa01 f000 	lsl.w	r0, r1, r0
 800d6a8:	fa24 f40c 	lsr.w	r4, r4, ip
 800d6ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d6b0:	ea40 0204 	orr.w	r2, r0, r4
 800d6b4:	e7db      	b.n	800d66e <__b2d+0x4a>
 800d6b6:	ea44 030c 	orr.w	r3, r4, ip
 800d6ba:	460a      	mov	r2, r1
 800d6bc:	e7d7      	b.n	800d66e <__b2d+0x4a>
 800d6be:	bf00      	nop
 800d6c0:	3ff00000 	.word	0x3ff00000

0800d6c4 <__d2b>:
 800d6c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d6c8:	4689      	mov	r9, r1
 800d6ca:	2101      	movs	r1, #1
 800d6cc:	ec57 6b10 	vmov	r6, r7, d0
 800d6d0:	4690      	mov	r8, r2
 800d6d2:	f7ff fc09 	bl	800cee8 <_Balloc>
 800d6d6:	4604      	mov	r4, r0
 800d6d8:	b930      	cbnz	r0, 800d6e8 <__d2b+0x24>
 800d6da:	4602      	mov	r2, r0
 800d6dc:	4b25      	ldr	r3, [pc, #148]	; (800d774 <__d2b+0xb0>)
 800d6de:	4826      	ldr	r0, [pc, #152]	; (800d778 <__d2b+0xb4>)
 800d6e0:	f240 310a 	movw	r1, #778	; 0x30a
 800d6e4:	f7fe f9b8 	bl	800ba58 <__assert_func>
 800d6e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d6ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d6f0:	bb35      	cbnz	r5, 800d740 <__d2b+0x7c>
 800d6f2:	2e00      	cmp	r6, #0
 800d6f4:	9301      	str	r3, [sp, #4]
 800d6f6:	d028      	beq.n	800d74a <__d2b+0x86>
 800d6f8:	4668      	mov	r0, sp
 800d6fa:	9600      	str	r6, [sp, #0]
 800d6fc:	f7ff fd06 	bl	800d10c <__lo0bits>
 800d700:	9900      	ldr	r1, [sp, #0]
 800d702:	b300      	cbz	r0, 800d746 <__d2b+0x82>
 800d704:	9a01      	ldr	r2, [sp, #4]
 800d706:	f1c0 0320 	rsb	r3, r0, #32
 800d70a:	fa02 f303 	lsl.w	r3, r2, r3
 800d70e:	430b      	orrs	r3, r1
 800d710:	40c2      	lsrs	r2, r0
 800d712:	6163      	str	r3, [r4, #20]
 800d714:	9201      	str	r2, [sp, #4]
 800d716:	9b01      	ldr	r3, [sp, #4]
 800d718:	61a3      	str	r3, [r4, #24]
 800d71a:	2b00      	cmp	r3, #0
 800d71c:	bf14      	ite	ne
 800d71e:	2202      	movne	r2, #2
 800d720:	2201      	moveq	r2, #1
 800d722:	6122      	str	r2, [r4, #16]
 800d724:	b1d5      	cbz	r5, 800d75c <__d2b+0x98>
 800d726:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d72a:	4405      	add	r5, r0
 800d72c:	f8c9 5000 	str.w	r5, [r9]
 800d730:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d734:	f8c8 0000 	str.w	r0, [r8]
 800d738:	4620      	mov	r0, r4
 800d73a:	b003      	add	sp, #12
 800d73c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d740:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d744:	e7d5      	b.n	800d6f2 <__d2b+0x2e>
 800d746:	6161      	str	r1, [r4, #20]
 800d748:	e7e5      	b.n	800d716 <__d2b+0x52>
 800d74a:	a801      	add	r0, sp, #4
 800d74c:	f7ff fcde 	bl	800d10c <__lo0bits>
 800d750:	9b01      	ldr	r3, [sp, #4]
 800d752:	6163      	str	r3, [r4, #20]
 800d754:	2201      	movs	r2, #1
 800d756:	6122      	str	r2, [r4, #16]
 800d758:	3020      	adds	r0, #32
 800d75a:	e7e3      	b.n	800d724 <__d2b+0x60>
 800d75c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d760:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d764:	f8c9 0000 	str.w	r0, [r9]
 800d768:	6918      	ldr	r0, [r3, #16]
 800d76a:	f7ff fcaf 	bl	800d0cc <__hi0bits>
 800d76e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d772:	e7df      	b.n	800d734 <__d2b+0x70>
 800d774:	0800fba9 	.word	0x0800fba9
 800d778:	0800fc34 	.word	0x0800fc34

0800d77c <__ratio>:
 800d77c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d780:	4688      	mov	r8, r1
 800d782:	4669      	mov	r1, sp
 800d784:	4681      	mov	r9, r0
 800d786:	f7ff ff4d 	bl	800d624 <__b2d>
 800d78a:	a901      	add	r1, sp, #4
 800d78c:	4640      	mov	r0, r8
 800d78e:	ec55 4b10 	vmov	r4, r5, d0
 800d792:	f7ff ff47 	bl	800d624 <__b2d>
 800d796:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d79a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d79e:	eba3 0c02 	sub.w	ip, r3, r2
 800d7a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d7a6:	1a9b      	subs	r3, r3, r2
 800d7a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d7ac:	ec51 0b10 	vmov	r0, r1, d0
 800d7b0:	2b00      	cmp	r3, #0
 800d7b2:	bfd6      	itet	le
 800d7b4:	460a      	movle	r2, r1
 800d7b6:	462a      	movgt	r2, r5
 800d7b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d7bc:	468b      	mov	fp, r1
 800d7be:	462f      	mov	r7, r5
 800d7c0:	bfd4      	ite	le
 800d7c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d7c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d7ca:	4620      	mov	r0, r4
 800d7cc:	ee10 2a10 	vmov	r2, s0
 800d7d0:	465b      	mov	r3, fp
 800d7d2:	4639      	mov	r1, r7
 800d7d4:	f7f3 f83a 	bl	800084c <__aeabi_ddiv>
 800d7d8:	ec41 0b10 	vmov	d0, r0, r1
 800d7dc:	b003      	add	sp, #12
 800d7de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d7e2 <__copybits>:
 800d7e2:	3901      	subs	r1, #1
 800d7e4:	b570      	push	{r4, r5, r6, lr}
 800d7e6:	1149      	asrs	r1, r1, #5
 800d7e8:	6914      	ldr	r4, [r2, #16]
 800d7ea:	3101      	adds	r1, #1
 800d7ec:	f102 0314 	add.w	r3, r2, #20
 800d7f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d7f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d7f8:	1f05      	subs	r5, r0, #4
 800d7fa:	42a3      	cmp	r3, r4
 800d7fc:	d30c      	bcc.n	800d818 <__copybits+0x36>
 800d7fe:	1aa3      	subs	r3, r4, r2
 800d800:	3b11      	subs	r3, #17
 800d802:	f023 0303 	bic.w	r3, r3, #3
 800d806:	3211      	adds	r2, #17
 800d808:	42a2      	cmp	r2, r4
 800d80a:	bf88      	it	hi
 800d80c:	2300      	movhi	r3, #0
 800d80e:	4418      	add	r0, r3
 800d810:	2300      	movs	r3, #0
 800d812:	4288      	cmp	r0, r1
 800d814:	d305      	bcc.n	800d822 <__copybits+0x40>
 800d816:	bd70      	pop	{r4, r5, r6, pc}
 800d818:	f853 6b04 	ldr.w	r6, [r3], #4
 800d81c:	f845 6f04 	str.w	r6, [r5, #4]!
 800d820:	e7eb      	b.n	800d7fa <__copybits+0x18>
 800d822:	f840 3b04 	str.w	r3, [r0], #4
 800d826:	e7f4      	b.n	800d812 <__copybits+0x30>

0800d828 <__any_on>:
 800d828:	f100 0214 	add.w	r2, r0, #20
 800d82c:	6900      	ldr	r0, [r0, #16]
 800d82e:	114b      	asrs	r3, r1, #5
 800d830:	4298      	cmp	r0, r3
 800d832:	b510      	push	{r4, lr}
 800d834:	db11      	blt.n	800d85a <__any_on+0x32>
 800d836:	dd0a      	ble.n	800d84e <__any_on+0x26>
 800d838:	f011 011f 	ands.w	r1, r1, #31
 800d83c:	d007      	beq.n	800d84e <__any_on+0x26>
 800d83e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d842:	fa24 f001 	lsr.w	r0, r4, r1
 800d846:	fa00 f101 	lsl.w	r1, r0, r1
 800d84a:	428c      	cmp	r4, r1
 800d84c:	d10b      	bne.n	800d866 <__any_on+0x3e>
 800d84e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d852:	4293      	cmp	r3, r2
 800d854:	d803      	bhi.n	800d85e <__any_on+0x36>
 800d856:	2000      	movs	r0, #0
 800d858:	bd10      	pop	{r4, pc}
 800d85a:	4603      	mov	r3, r0
 800d85c:	e7f7      	b.n	800d84e <__any_on+0x26>
 800d85e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d862:	2900      	cmp	r1, #0
 800d864:	d0f5      	beq.n	800d852 <__any_on+0x2a>
 800d866:	2001      	movs	r0, #1
 800d868:	e7f6      	b.n	800d858 <__any_on+0x30>

0800d86a <_calloc_r>:
 800d86a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d86c:	fba1 2402 	umull	r2, r4, r1, r2
 800d870:	b94c      	cbnz	r4, 800d886 <_calloc_r+0x1c>
 800d872:	4611      	mov	r1, r2
 800d874:	9201      	str	r2, [sp, #4]
 800d876:	f000 f87b 	bl	800d970 <_malloc_r>
 800d87a:	9a01      	ldr	r2, [sp, #4]
 800d87c:	4605      	mov	r5, r0
 800d87e:	b930      	cbnz	r0, 800d88e <_calloc_r+0x24>
 800d880:	4628      	mov	r0, r5
 800d882:	b003      	add	sp, #12
 800d884:	bd30      	pop	{r4, r5, pc}
 800d886:	220c      	movs	r2, #12
 800d888:	6002      	str	r2, [r0, #0]
 800d88a:	2500      	movs	r5, #0
 800d88c:	e7f8      	b.n	800d880 <_calloc_r+0x16>
 800d88e:	4621      	mov	r1, r4
 800d890:	f7fc fb24 	bl	8009edc <memset>
 800d894:	e7f4      	b.n	800d880 <_calloc_r+0x16>
	...

0800d898 <_free_r>:
 800d898:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d89a:	2900      	cmp	r1, #0
 800d89c:	d044      	beq.n	800d928 <_free_r+0x90>
 800d89e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d8a2:	9001      	str	r0, [sp, #4]
 800d8a4:	2b00      	cmp	r3, #0
 800d8a6:	f1a1 0404 	sub.w	r4, r1, #4
 800d8aa:	bfb8      	it	lt
 800d8ac:	18e4      	addlt	r4, r4, r3
 800d8ae:	f000 fec7 	bl	800e640 <__malloc_lock>
 800d8b2:	4a1e      	ldr	r2, [pc, #120]	; (800d92c <_free_r+0x94>)
 800d8b4:	9801      	ldr	r0, [sp, #4]
 800d8b6:	6813      	ldr	r3, [r2, #0]
 800d8b8:	b933      	cbnz	r3, 800d8c8 <_free_r+0x30>
 800d8ba:	6063      	str	r3, [r4, #4]
 800d8bc:	6014      	str	r4, [r2, #0]
 800d8be:	b003      	add	sp, #12
 800d8c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d8c4:	f000 bec2 	b.w	800e64c <__malloc_unlock>
 800d8c8:	42a3      	cmp	r3, r4
 800d8ca:	d908      	bls.n	800d8de <_free_r+0x46>
 800d8cc:	6825      	ldr	r5, [r4, #0]
 800d8ce:	1961      	adds	r1, r4, r5
 800d8d0:	428b      	cmp	r3, r1
 800d8d2:	bf01      	itttt	eq
 800d8d4:	6819      	ldreq	r1, [r3, #0]
 800d8d6:	685b      	ldreq	r3, [r3, #4]
 800d8d8:	1949      	addeq	r1, r1, r5
 800d8da:	6021      	streq	r1, [r4, #0]
 800d8dc:	e7ed      	b.n	800d8ba <_free_r+0x22>
 800d8de:	461a      	mov	r2, r3
 800d8e0:	685b      	ldr	r3, [r3, #4]
 800d8e2:	b10b      	cbz	r3, 800d8e8 <_free_r+0x50>
 800d8e4:	42a3      	cmp	r3, r4
 800d8e6:	d9fa      	bls.n	800d8de <_free_r+0x46>
 800d8e8:	6811      	ldr	r1, [r2, #0]
 800d8ea:	1855      	adds	r5, r2, r1
 800d8ec:	42a5      	cmp	r5, r4
 800d8ee:	d10b      	bne.n	800d908 <_free_r+0x70>
 800d8f0:	6824      	ldr	r4, [r4, #0]
 800d8f2:	4421      	add	r1, r4
 800d8f4:	1854      	adds	r4, r2, r1
 800d8f6:	42a3      	cmp	r3, r4
 800d8f8:	6011      	str	r1, [r2, #0]
 800d8fa:	d1e0      	bne.n	800d8be <_free_r+0x26>
 800d8fc:	681c      	ldr	r4, [r3, #0]
 800d8fe:	685b      	ldr	r3, [r3, #4]
 800d900:	6053      	str	r3, [r2, #4]
 800d902:	4421      	add	r1, r4
 800d904:	6011      	str	r1, [r2, #0]
 800d906:	e7da      	b.n	800d8be <_free_r+0x26>
 800d908:	d902      	bls.n	800d910 <_free_r+0x78>
 800d90a:	230c      	movs	r3, #12
 800d90c:	6003      	str	r3, [r0, #0]
 800d90e:	e7d6      	b.n	800d8be <_free_r+0x26>
 800d910:	6825      	ldr	r5, [r4, #0]
 800d912:	1961      	adds	r1, r4, r5
 800d914:	428b      	cmp	r3, r1
 800d916:	bf04      	itt	eq
 800d918:	6819      	ldreq	r1, [r3, #0]
 800d91a:	685b      	ldreq	r3, [r3, #4]
 800d91c:	6063      	str	r3, [r4, #4]
 800d91e:	bf04      	itt	eq
 800d920:	1949      	addeq	r1, r1, r5
 800d922:	6021      	streq	r1, [r4, #0]
 800d924:	6054      	str	r4, [r2, #4]
 800d926:	e7ca      	b.n	800d8be <_free_r+0x26>
 800d928:	b003      	add	sp, #12
 800d92a:	bd30      	pop	{r4, r5, pc}
 800d92c:	20000580 	.word	0x20000580

0800d930 <sbrk_aligned>:
 800d930:	b570      	push	{r4, r5, r6, lr}
 800d932:	4e0e      	ldr	r6, [pc, #56]	; (800d96c <sbrk_aligned+0x3c>)
 800d934:	460c      	mov	r4, r1
 800d936:	6831      	ldr	r1, [r6, #0]
 800d938:	4605      	mov	r5, r0
 800d93a:	b911      	cbnz	r1, 800d942 <sbrk_aligned+0x12>
 800d93c:	f000 fb4c 	bl	800dfd8 <_sbrk_r>
 800d940:	6030      	str	r0, [r6, #0]
 800d942:	4621      	mov	r1, r4
 800d944:	4628      	mov	r0, r5
 800d946:	f000 fb47 	bl	800dfd8 <_sbrk_r>
 800d94a:	1c43      	adds	r3, r0, #1
 800d94c:	d00a      	beq.n	800d964 <sbrk_aligned+0x34>
 800d94e:	1cc4      	adds	r4, r0, #3
 800d950:	f024 0403 	bic.w	r4, r4, #3
 800d954:	42a0      	cmp	r0, r4
 800d956:	d007      	beq.n	800d968 <sbrk_aligned+0x38>
 800d958:	1a21      	subs	r1, r4, r0
 800d95a:	4628      	mov	r0, r5
 800d95c:	f000 fb3c 	bl	800dfd8 <_sbrk_r>
 800d960:	3001      	adds	r0, #1
 800d962:	d101      	bne.n	800d968 <sbrk_aligned+0x38>
 800d964:	f04f 34ff 	mov.w	r4, #4294967295
 800d968:	4620      	mov	r0, r4
 800d96a:	bd70      	pop	{r4, r5, r6, pc}
 800d96c:	20000584 	.word	0x20000584

0800d970 <_malloc_r>:
 800d970:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d974:	1ccd      	adds	r5, r1, #3
 800d976:	f025 0503 	bic.w	r5, r5, #3
 800d97a:	3508      	adds	r5, #8
 800d97c:	2d0c      	cmp	r5, #12
 800d97e:	bf38      	it	cc
 800d980:	250c      	movcc	r5, #12
 800d982:	2d00      	cmp	r5, #0
 800d984:	4607      	mov	r7, r0
 800d986:	db01      	blt.n	800d98c <_malloc_r+0x1c>
 800d988:	42a9      	cmp	r1, r5
 800d98a:	d905      	bls.n	800d998 <_malloc_r+0x28>
 800d98c:	230c      	movs	r3, #12
 800d98e:	603b      	str	r3, [r7, #0]
 800d990:	2600      	movs	r6, #0
 800d992:	4630      	mov	r0, r6
 800d994:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d998:	4e2e      	ldr	r6, [pc, #184]	; (800da54 <_malloc_r+0xe4>)
 800d99a:	f000 fe51 	bl	800e640 <__malloc_lock>
 800d99e:	6833      	ldr	r3, [r6, #0]
 800d9a0:	461c      	mov	r4, r3
 800d9a2:	bb34      	cbnz	r4, 800d9f2 <_malloc_r+0x82>
 800d9a4:	4629      	mov	r1, r5
 800d9a6:	4638      	mov	r0, r7
 800d9a8:	f7ff ffc2 	bl	800d930 <sbrk_aligned>
 800d9ac:	1c43      	adds	r3, r0, #1
 800d9ae:	4604      	mov	r4, r0
 800d9b0:	d14d      	bne.n	800da4e <_malloc_r+0xde>
 800d9b2:	6834      	ldr	r4, [r6, #0]
 800d9b4:	4626      	mov	r6, r4
 800d9b6:	2e00      	cmp	r6, #0
 800d9b8:	d140      	bne.n	800da3c <_malloc_r+0xcc>
 800d9ba:	6823      	ldr	r3, [r4, #0]
 800d9bc:	4631      	mov	r1, r6
 800d9be:	4638      	mov	r0, r7
 800d9c0:	eb04 0803 	add.w	r8, r4, r3
 800d9c4:	f000 fb08 	bl	800dfd8 <_sbrk_r>
 800d9c8:	4580      	cmp	r8, r0
 800d9ca:	d13a      	bne.n	800da42 <_malloc_r+0xd2>
 800d9cc:	6821      	ldr	r1, [r4, #0]
 800d9ce:	3503      	adds	r5, #3
 800d9d0:	1a6d      	subs	r5, r5, r1
 800d9d2:	f025 0503 	bic.w	r5, r5, #3
 800d9d6:	3508      	adds	r5, #8
 800d9d8:	2d0c      	cmp	r5, #12
 800d9da:	bf38      	it	cc
 800d9dc:	250c      	movcc	r5, #12
 800d9de:	4629      	mov	r1, r5
 800d9e0:	4638      	mov	r0, r7
 800d9e2:	f7ff ffa5 	bl	800d930 <sbrk_aligned>
 800d9e6:	3001      	adds	r0, #1
 800d9e8:	d02b      	beq.n	800da42 <_malloc_r+0xd2>
 800d9ea:	6823      	ldr	r3, [r4, #0]
 800d9ec:	442b      	add	r3, r5
 800d9ee:	6023      	str	r3, [r4, #0]
 800d9f0:	e00e      	b.n	800da10 <_malloc_r+0xa0>
 800d9f2:	6822      	ldr	r2, [r4, #0]
 800d9f4:	1b52      	subs	r2, r2, r5
 800d9f6:	d41e      	bmi.n	800da36 <_malloc_r+0xc6>
 800d9f8:	2a0b      	cmp	r2, #11
 800d9fa:	d916      	bls.n	800da2a <_malloc_r+0xba>
 800d9fc:	1961      	adds	r1, r4, r5
 800d9fe:	42a3      	cmp	r3, r4
 800da00:	6025      	str	r5, [r4, #0]
 800da02:	bf18      	it	ne
 800da04:	6059      	strne	r1, [r3, #4]
 800da06:	6863      	ldr	r3, [r4, #4]
 800da08:	bf08      	it	eq
 800da0a:	6031      	streq	r1, [r6, #0]
 800da0c:	5162      	str	r2, [r4, r5]
 800da0e:	604b      	str	r3, [r1, #4]
 800da10:	4638      	mov	r0, r7
 800da12:	f104 060b 	add.w	r6, r4, #11
 800da16:	f000 fe19 	bl	800e64c <__malloc_unlock>
 800da1a:	f026 0607 	bic.w	r6, r6, #7
 800da1e:	1d23      	adds	r3, r4, #4
 800da20:	1af2      	subs	r2, r6, r3
 800da22:	d0b6      	beq.n	800d992 <_malloc_r+0x22>
 800da24:	1b9b      	subs	r3, r3, r6
 800da26:	50a3      	str	r3, [r4, r2]
 800da28:	e7b3      	b.n	800d992 <_malloc_r+0x22>
 800da2a:	6862      	ldr	r2, [r4, #4]
 800da2c:	42a3      	cmp	r3, r4
 800da2e:	bf0c      	ite	eq
 800da30:	6032      	streq	r2, [r6, #0]
 800da32:	605a      	strne	r2, [r3, #4]
 800da34:	e7ec      	b.n	800da10 <_malloc_r+0xa0>
 800da36:	4623      	mov	r3, r4
 800da38:	6864      	ldr	r4, [r4, #4]
 800da3a:	e7b2      	b.n	800d9a2 <_malloc_r+0x32>
 800da3c:	4634      	mov	r4, r6
 800da3e:	6876      	ldr	r6, [r6, #4]
 800da40:	e7b9      	b.n	800d9b6 <_malloc_r+0x46>
 800da42:	230c      	movs	r3, #12
 800da44:	603b      	str	r3, [r7, #0]
 800da46:	4638      	mov	r0, r7
 800da48:	f000 fe00 	bl	800e64c <__malloc_unlock>
 800da4c:	e7a1      	b.n	800d992 <_malloc_r+0x22>
 800da4e:	6025      	str	r5, [r4, #0]
 800da50:	e7de      	b.n	800da10 <_malloc_r+0xa0>
 800da52:	bf00      	nop
 800da54:	20000580 	.word	0x20000580

0800da58 <__ssputs_r>:
 800da58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800da5c:	688e      	ldr	r6, [r1, #8]
 800da5e:	429e      	cmp	r6, r3
 800da60:	4682      	mov	sl, r0
 800da62:	460c      	mov	r4, r1
 800da64:	4690      	mov	r8, r2
 800da66:	461f      	mov	r7, r3
 800da68:	d838      	bhi.n	800dadc <__ssputs_r+0x84>
 800da6a:	898a      	ldrh	r2, [r1, #12]
 800da6c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800da70:	d032      	beq.n	800dad8 <__ssputs_r+0x80>
 800da72:	6825      	ldr	r5, [r4, #0]
 800da74:	6909      	ldr	r1, [r1, #16]
 800da76:	eba5 0901 	sub.w	r9, r5, r1
 800da7a:	6965      	ldr	r5, [r4, #20]
 800da7c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800da80:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800da84:	3301      	adds	r3, #1
 800da86:	444b      	add	r3, r9
 800da88:	106d      	asrs	r5, r5, #1
 800da8a:	429d      	cmp	r5, r3
 800da8c:	bf38      	it	cc
 800da8e:	461d      	movcc	r5, r3
 800da90:	0553      	lsls	r3, r2, #21
 800da92:	d531      	bpl.n	800daf8 <__ssputs_r+0xa0>
 800da94:	4629      	mov	r1, r5
 800da96:	f7ff ff6b 	bl	800d970 <_malloc_r>
 800da9a:	4606      	mov	r6, r0
 800da9c:	b950      	cbnz	r0, 800dab4 <__ssputs_r+0x5c>
 800da9e:	230c      	movs	r3, #12
 800daa0:	f8ca 3000 	str.w	r3, [sl]
 800daa4:	89a3      	ldrh	r3, [r4, #12]
 800daa6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800daaa:	81a3      	strh	r3, [r4, #12]
 800daac:	f04f 30ff 	mov.w	r0, #4294967295
 800dab0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800dab4:	6921      	ldr	r1, [r4, #16]
 800dab6:	464a      	mov	r2, r9
 800dab8:	f7ff fa08 	bl	800cecc <memcpy>
 800dabc:	89a3      	ldrh	r3, [r4, #12]
 800dabe:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800dac2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800dac6:	81a3      	strh	r3, [r4, #12]
 800dac8:	6126      	str	r6, [r4, #16]
 800daca:	6165      	str	r5, [r4, #20]
 800dacc:	444e      	add	r6, r9
 800dace:	eba5 0509 	sub.w	r5, r5, r9
 800dad2:	6026      	str	r6, [r4, #0]
 800dad4:	60a5      	str	r5, [r4, #8]
 800dad6:	463e      	mov	r6, r7
 800dad8:	42be      	cmp	r6, r7
 800dada:	d900      	bls.n	800dade <__ssputs_r+0x86>
 800dadc:	463e      	mov	r6, r7
 800dade:	6820      	ldr	r0, [r4, #0]
 800dae0:	4632      	mov	r2, r6
 800dae2:	4641      	mov	r1, r8
 800dae4:	f000 fd92 	bl	800e60c <memmove>
 800dae8:	68a3      	ldr	r3, [r4, #8]
 800daea:	1b9b      	subs	r3, r3, r6
 800daec:	60a3      	str	r3, [r4, #8]
 800daee:	6823      	ldr	r3, [r4, #0]
 800daf0:	4433      	add	r3, r6
 800daf2:	6023      	str	r3, [r4, #0]
 800daf4:	2000      	movs	r0, #0
 800daf6:	e7db      	b.n	800dab0 <__ssputs_r+0x58>
 800daf8:	462a      	mov	r2, r5
 800dafa:	f000 fdad 	bl	800e658 <_realloc_r>
 800dafe:	4606      	mov	r6, r0
 800db00:	2800      	cmp	r0, #0
 800db02:	d1e1      	bne.n	800dac8 <__ssputs_r+0x70>
 800db04:	6921      	ldr	r1, [r4, #16]
 800db06:	4650      	mov	r0, sl
 800db08:	f7ff fec6 	bl	800d898 <_free_r>
 800db0c:	e7c7      	b.n	800da9e <__ssputs_r+0x46>
	...

0800db10 <_svfiprintf_r>:
 800db10:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db14:	4698      	mov	r8, r3
 800db16:	898b      	ldrh	r3, [r1, #12]
 800db18:	061b      	lsls	r3, r3, #24
 800db1a:	b09d      	sub	sp, #116	; 0x74
 800db1c:	4607      	mov	r7, r0
 800db1e:	460d      	mov	r5, r1
 800db20:	4614      	mov	r4, r2
 800db22:	d50e      	bpl.n	800db42 <_svfiprintf_r+0x32>
 800db24:	690b      	ldr	r3, [r1, #16]
 800db26:	b963      	cbnz	r3, 800db42 <_svfiprintf_r+0x32>
 800db28:	2140      	movs	r1, #64	; 0x40
 800db2a:	f7ff ff21 	bl	800d970 <_malloc_r>
 800db2e:	6028      	str	r0, [r5, #0]
 800db30:	6128      	str	r0, [r5, #16]
 800db32:	b920      	cbnz	r0, 800db3e <_svfiprintf_r+0x2e>
 800db34:	230c      	movs	r3, #12
 800db36:	603b      	str	r3, [r7, #0]
 800db38:	f04f 30ff 	mov.w	r0, #4294967295
 800db3c:	e0d1      	b.n	800dce2 <_svfiprintf_r+0x1d2>
 800db3e:	2340      	movs	r3, #64	; 0x40
 800db40:	616b      	str	r3, [r5, #20]
 800db42:	2300      	movs	r3, #0
 800db44:	9309      	str	r3, [sp, #36]	; 0x24
 800db46:	2320      	movs	r3, #32
 800db48:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800db4c:	f8cd 800c 	str.w	r8, [sp, #12]
 800db50:	2330      	movs	r3, #48	; 0x30
 800db52:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dcfc <_svfiprintf_r+0x1ec>
 800db56:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800db5a:	f04f 0901 	mov.w	r9, #1
 800db5e:	4623      	mov	r3, r4
 800db60:	469a      	mov	sl, r3
 800db62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db66:	b10a      	cbz	r2, 800db6c <_svfiprintf_r+0x5c>
 800db68:	2a25      	cmp	r2, #37	; 0x25
 800db6a:	d1f9      	bne.n	800db60 <_svfiprintf_r+0x50>
 800db6c:	ebba 0b04 	subs.w	fp, sl, r4
 800db70:	d00b      	beq.n	800db8a <_svfiprintf_r+0x7a>
 800db72:	465b      	mov	r3, fp
 800db74:	4622      	mov	r2, r4
 800db76:	4629      	mov	r1, r5
 800db78:	4638      	mov	r0, r7
 800db7a:	f7ff ff6d 	bl	800da58 <__ssputs_r>
 800db7e:	3001      	adds	r0, #1
 800db80:	f000 80aa 	beq.w	800dcd8 <_svfiprintf_r+0x1c8>
 800db84:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800db86:	445a      	add	r2, fp
 800db88:	9209      	str	r2, [sp, #36]	; 0x24
 800db8a:	f89a 3000 	ldrb.w	r3, [sl]
 800db8e:	2b00      	cmp	r3, #0
 800db90:	f000 80a2 	beq.w	800dcd8 <_svfiprintf_r+0x1c8>
 800db94:	2300      	movs	r3, #0
 800db96:	f04f 32ff 	mov.w	r2, #4294967295
 800db9a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800db9e:	f10a 0a01 	add.w	sl, sl, #1
 800dba2:	9304      	str	r3, [sp, #16]
 800dba4:	9307      	str	r3, [sp, #28]
 800dba6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dbaa:	931a      	str	r3, [sp, #104]	; 0x68
 800dbac:	4654      	mov	r4, sl
 800dbae:	2205      	movs	r2, #5
 800dbb0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dbb4:	4851      	ldr	r0, [pc, #324]	; (800dcfc <_svfiprintf_r+0x1ec>)
 800dbb6:	f7f2 fb13 	bl	80001e0 <memchr>
 800dbba:	9a04      	ldr	r2, [sp, #16]
 800dbbc:	b9d8      	cbnz	r0, 800dbf6 <_svfiprintf_r+0xe6>
 800dbbe:	06d0      	lsls	r0, r2, #27
 800dbc0:	bf44      	itt	mi
 800dbc2:	2320      	movmi	r3, #32
 800dbc4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbc8:	0711      	lsls	r1, r2, #28
 800dbca:	bf44      	itt	mi
 800dbcc:	232b      	movmi	r3, #43	; 0x2b
 800dbce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dbd2:	f89a 3000 	ldrb.w	r3, [sl]
 800dbd6:	2b2a      	cmp	r3, #42	; 0x2a
 800dbd8:	d015      	beq.n	800dc06 <_svfiprintf_r+0xf6>
 800dbda:	9a07      	ldr	r2, [sp, #28]
 800dbdc:	4654      	mov	r4, sl
 800dbde:	2000      	movs	r0, #0
 800dbe0:	f04f 0c0a 	mov.w	ip, #10
 800dbe4:	4621      	mov	r1, r4
 800dbe6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dbea:	3b30      	subs	r3, #48	; 0x30
 800dbec:	2b09      	cmp	r3, #9
 800dbee:	d94e      	bls.n	800dc8e <_svfiprintf_r+0x17e>
 800dbf0:	b1b0      	cbz	r0, 800dc20 <_svfiprintf_r+0x110>
 800dbf2:	9207      	str	r2, [sp, #28]
 800dbf4:	e014      	b.n	800dc20 <_svfiprintf_r+0x110>
 800dbf6:	eba0 0308 	sub.w	r3, r0, r8
 800dbfa:	fa09 f303 	lsl.w	r3, r9, r3
 800dbfe:	4313      	orrs	r3, r2
 800dc00:	9304      	str	r3, [sp, #16]
 800dc02:	46a2      	mov	sl, r4
 800dc04:	e7d2      	b.n	800dbac <_svfiprintf_r+0x9c>
 800dc06:	9b03      	ldr	r3, [sp, #12]
 800dc08:	1d19      	adds	r1, r3, #4
 800dc0a:	681b      	ldr	r3, [r3, #0]
 800dc0c:	9103      	str	r1, [sp, #12]
 800dc0e:	2b00      	cmp	r3, #0
 800dc10:	bfbb      	ittet	lt
 800dc12:	425b      	neglt	r3, r3
 800dc14:	f042 0202 	orrlt.w	r2, r2, #2
 800dc18:	9307      	strge	r3, [sp, #28]
 800dc1a:	9307      	strlt	r3, [sp, #28]
 800dc1c:	bfb8      	it	lt
 800dc1e:	9204      	strlt	r2, [sp, #16]
 800dc20:	7823      	ldrb	r3, [r4, #0]
 800dc22:	2b2e      	cmp	r3, #46	; 0x2e
 800dc24:	d10c      	bne.n	800dc40 <_svfiprintf_r+0x130>
 800dc26:	7863      	ldrb	r3, [r4, #1]
 800dc28:	2b2a      	cmp	r3, #42	; 0x2a
 800dc2a:	d135      	bne.n	800dc98 <_svfiprintf_r+0x188>
 800dc2c:	9b03      	ldr	r3, [sp, #12]
 800dc2e:	1d1a      	adds	r2, r3, #4
 800dc30:	681b      	ldr	r3, [r3, #0]
 800dc32:	9203      	str	r2, [sp, #12]
 800dc34:	2b00      	cmp	r3, #0
 800dc36:	bfb8      	it	lt
 800dc38:	f04f 33ff 	movlt.w	r3, #4294967295
 800dc3c:	3402      	adds	r4, #2
 800dc3e:	9305      	str	r3, [sp, #20]
 800dc40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd0c <_svfiprintf_r+0x1fc>
 800dc44:	7821      	ldrb	r1, [r4, #0]
 800dc46:	2203      	movs	r2, #3
 800dc48:	4650      	mov	r0, sl
 800dc4a:	f7f2 fac9 	bl	80001e0 <memchr>
 800dc4e:	b140      	cbz	r0, 800dc62 <_svfiprintf_r+0x152>
 800dc50:	2340      	movs	r3, #64	; 0x40
 800dc52:	eba0 000a 	sub.w	r0, r0, sl
 800dc56:	fa03 f000 	lsl.w	r0, r3, r0
 800dc5a:	9b04      	ldr	r3, [sp, #16]
 800dc5c:	4303      	orrs	r3, r0
 800dc5e:	3401      	adds	r4, #1
 800dc60:	9304      	str	r3, [sp, #16]
 800dc62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc66:	4826      	ldr	r0, [pc, #152]	; (800dd00 <_svfiprintf_r+0x1f0>)
 800dc68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dc6c:	2206      	movs	r2, #6
 800dc6e:	f7f2 fab7 	bl	80001e0 <memchr>
 800dc72:	2800      	cmp	r0, #0
 800dc74:	d038      	beq.n	800dce8 <_svfiprintf_r+0x1d8>
 800dc76:	4b23      	ldr	r3, [pc, #140]	; (800dd04 <_svfiprintf_r+0x1f4>)
 800dc78:	bb1b      	cbnz	r3, 800dcc2 <_svfiprintf_r+0x1b2>
 800dc7a:	9b03      	ldr	r3, [sp, #12]
 800dc7c:	3307      	adds	r3, #7
 800dc7e:	f023 0307 	bic.w	r3, r3, #7
 800dc82:	3308      	adds	r3, #8
 800dc84:	9303      	str	r3, [sp, #12]
 800dc86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dc88:	4433      	add	r3, r6
 800dc8a:	9309      	str	r3, [sp, #36]	; 0x24
 800dc8c:	e767      	b.n	800db5e <_svfiprintf_r+0x4e>
 800dc8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800dc92:	460c      	mov	r4, r1
 800dc94:	2001      	movs	r0, #1
 800dc96:	e7a5      	b.n	800dbe4 <_svfiprintf_r+0xd4>
 800dc98:	2300      	movs	r3, #0
 800dc9a:	3401      	adds	r4, #1
 800dc9c:	9305      	str	r3, [sp, #20]
 800dc9e:	4619      	mov	r1, r3
 800dca0:	f04f 0c0a 	mov.w	ip, #10
 800dca4:	4620      	mov	r0, r4
 800dca6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dcaa:	3a30      	subs	r2, #48	; 0x30
 800dcac:	2a09      	cmp	r2, #9
 800dcae:	d903      	bls.n	800dcb8 <_svfiprintf_r+0x1a8>
 800dcb0:	2b00      	cmp	r3, #0
 800dcb2:	d0c5      	beq.n	800dc40 <_svfiprintf_r+0x130>
 800dcb4:	9105      	str	r1, [sp, #20]
 800dcb6:	e7c3      	b.n	800dc40 <_svfiprintf_r+0x130>
 800dcb8:	fb0c 2101 	mla	r1, ip, r1, r2
 800dcbc:	4604      	mov	r4, r0
 800dcbe:	2301      	movs	r3, #1
 800dcc0:	e7f0      	b.n	800dca4 <_svfiprintf_r+0x194>
 800dcc2:	ab03      	add	r3, sp, #12
 800dcc4:	9300      	str	r3, [sp, #0]
 800dcc6:	462a      	mov	r2, r5
 800dcc8:	4b0f      	ldr	r3, [pc, #60]	; (800dd08 <_svfiprintf_r+0x1f8>)
 800dcca:	a904      	add	r1, sp, #16
 800dccc:	4638      	mov	r0, r7
 800dcce:	f7fc f9ad 	bl	800a02c <_printf_float>
 800dcd2:	1c42      	adds	r2, r0, #1
 800dcd4:	4606      	mov	r6, r0
 800dcd6:	d1d6      	bne.n	800dc86 <_svfiprintf_r+0x176>
 800dcd8:	89ab      	ldrh	r3, [r5, #12]
 800dcda:	065b      	lsls	r3, r3, #25
 800dcdc:	f53f af2c 	bmi.w	800db38 <_svfiprintf_r+0x28>
 800dce0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dce2:	b01d      	add	sp, #116	; 0x74
 800dce4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dce8:	ab03      	add	r3, sp, #12
 800dcea:	9300      	str	r3, [sp, #0]
 800dcec:	462a      	mov	r2, r5
 800dcee:	4b06      	ldr	r3, [pc, #24]	; (800dd08 <_svfiprintf_r+0x1f8>)
 800dcf0:	a904      	add	r1, sp, #16
 800dcf2:	4638      	mov	r0, r7
 800dcf4:	f7fc fc3e 	bl	800a574 <_printf_i>
 800dcf8:	e7eb      	b.n	800dcd2 <_svfiprintf_r+0x1c2>
 800dcfa:	bf00      	nop
 800dcfc:	0800fd8c 	.word	0x0800fd8c
 800dd00:	0800fd96 	.word	0x0800fd96
 800dd04:	0800a02d 	.word	0x0800a02d
 800dd08:	0800da59 	.word	0x0800da59
 800dd0c:	0800fd92 	.word	0x0800fd92

0800dd10 <__sfputc_r>:
 800dd10:	6893      	ldr	r3, [r2, #8]
 800dd12:	3b01      	subs	r3, #1
 800dd14:	2b00      	cmp	r3, #0
 800dd16:	b410      	push	{r4}
 800dd18:	6093      	str	r3, [r2, #8]
 800dd1a:	da08      	bge.n	800dd2e <__sfputc_r+0x1e>
 800dd1c:	6994      	ldr	r4, [r2, #24]
 800dd1e:	42a3      	cmp	r3, r4
 800dd20:	db01      	blt.n	800dd26 <__sfputc_r+0x16>
 800dd22:	290a      	cmp	r1, #10
 800dd24:	d103      	bne.n	800dd2e <__sfputc_r+0x1e>
 800dd26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd2a:	f000 b979 	b.w	800e020 <__swbuf_r>
 800dd2e:	6813      	ldr	r3, [r2, #0]
 800dd30:	1c58      	adds	r0, r3, #1
 800dd32:	6010      	str	r0, [r2, #0]
 800dd34:	7019      	strb	r1, [r3, #0]
 800dd36:	4608      	mov	r0, r1
 800dd38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800dd3c:	4770      	bx	lr

0800dd3e <__sfputs_r>:
 800dd3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800dd40:	4606      	mov	r6, r0
 800dd42:	460f      	mov	r7, r1
 800dd44:	4614      	mov	r4, r2
 800dd46:	18d5      	adds	r5, r2, r3
 800dd48:	42ac      	cmp	r4, r5
 800dd4a:	d101      	bne.n	800dd50 <__sfputs_r+0x12>
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	e007      	b.n	800dd60 <__sfputs_r+0x22>
 800dd50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dd54:	463a      	mov	r2, r7
 800dd56:	4630      	mov	r0, r6
 800dd58:	f7ff ffda 	bl	800dd10 <__sfputc_r>
 800dd5c:	1c43      	adds	r3, r0, #1
 800dd5e:	d1f3      	bne.n	800dd48 <__sfputs_r+0xa>
 800dd60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800dd64 <_vfiprintf_r>:
 800dd64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800dd68:	460d      	mov	r5, r1
 800dd6a:	b09d      	sub	sp, #116	; 0x74
 800dd6c:	4614      	mov	r4, r2
 800dd6e:	4698      	mov	r8, r3
 800dd70:	4606      	mov	r6, r0
 800dd72:	b118      	cbz	r0, 800dd7c <_vfiprintf_r+0x18>
 800dd74:	6983      	ldr	r3, [r0, #24]
 800dd76:	b90b      	cbnz	r3, 800dd7c <_vfiprintf_r+0x18>
 800dd78:	f000 fb42 	bl	800e400 <__sinit>
 800dd7c:	4b89      	ldr	r3, [pc, #548]	; (800dfa4 <_vfiprintf_r+0x240>)
 800dd7e:	429d      	cmp	r5, r3
 800dd80:	d11b      	bne.n	800ddba <_vfiprintf_r+0x56>
 800dd82:	6875      	ldr	r5, [r6, #4]
 800dd84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dd86:	07d9      	lsls	r1, r3, #31
 800dd88:	d405      	bmi.n	800dd96 <_vfiprintf_r+0x32>
 800dd8a:	89ab      	ldrh	r3, [r5, #12]
 800dd8c:	059a      	lsls	r2, r3, #22
 800dd8e:	d402      	bmi.n	800dd96 <_vfiprintf_r+0x32>
 800dd90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800dd92:	f000 fbd3 	bl	800e53c <__retarget_lock_acquire_recursive>
 800dd96:	89ab      	ldrh	r3, [r5, #12]
 800dd98:	071b      	lsls	r3, r3, #28
 800dd9a:	d501      	bpl.n	800dda0 <_vfiprintf_r+0x3c>
 800dd9c:	692b      	ldr	r3, [r5, #16]
 800dd9e:	b9eb      	cbnz	r3, 800dddc <_vfiprintf_r+0x78>
 800dda0:	4629      	mov	r1, r5
 800dda2:	4630      	mov	r0, r6
 800dda4:	f000 f99c 	bl	800e0e0 <__swsetup_r>
 800dda8:	b1c0      	cbz	r0, 800dddc <_vfiprintf_r+0x78>
 800ddaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ddac:	07dc      	lsls	r4, r3, #31
 800ddae:	d50e      	bpl.n	800ddce <_vfiprintf_r+0x6a>
 800ddb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ddb4:	b01d      	add	sp, #116	; 0x74
 800ddb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ddba:	4b7b      	ldr	r3, [pc, #492]	; (800dfa8 <_vfiprintf_r+0x244>)
 800ddbc:	429d      	cmp	r5, r3
 800ddbe:	d101      	bne.n	800ddc4 <_vfiprintf_r+0x60>
 800ddc0:	68b5      	ldr	r5, [r6, #8]
 800ddc2:	e7df      	b.n	800dd84 <_vfiprintf_r+0x20>
 800ddc4:	4b79      	ldr	r3, [pc, #484]	; (800dfac <_vfiprintf_r+0x248>)
 800ddc6:	429d      	cmp	r5, r3
 800ddc8:	bf08      	it	eq
 800ddca:	68f5      	ldreq	r5, [r6, #12]
 800ddcc:	e7da      	b.n	800dd84 <_vfiprintf_r+0x20>
 800ddce:	89ab      	ldrh	r3, [r5, #12]
 800ddd0:	0598      	lsls	r0, r3, #22
 800ddd2:	d4ed      	bmi.n	800ddb0 <_vfiprintf_r+0x4c>
 800ddd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ddd6:	f000 fbb2 	bl	800e53e <__retarget_lock_release_recursive>
 800ddda:	e7e9      	b.n	800ddb0 <_vfiprintf_r+0x4c>
 800dddc:	2300      	movs	r3, #0
 800ddde:	9309      	str	r3, [sp, #36]	; 0x24
 800dde0:	2320      	movs	r3, #32
 800dde2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dde6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ddea:	2330      	movs	r3, #48	; 0x30
 800ddec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800dfb0 <_vfiprintf_r+0x24c>
 800ddf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ddf4:	f04f 0901 	mov.w	r9, #1
 800ddf8:	4623      	mov	r3, r4
 800ddfa:	469a      	mov	sl, r3
 800ddfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de00:	b10a      	cbz	r2, 800de06 <_vfiprintf_r+0xa2>
 800de02:	2a25      	cmp	r2, #37	; 0x25
 800de04:	d1f9      	bne.n	800ddfa <_vfiprintf_r+0x96>
 800de06:	ebba 0b04 	subs.w	fp, sl, r4
 800de0a:	d00b      	beq.n	800de24 <_vfiprintf_r+0xc0>
 800de0c:	465b      	mov	r3, fp
 800de0e:	4622      	mov	r2, r4
 800de10:	4629      	mov	r1, r5
 800de12:	4630      	mov	r0, r6
 800de14:	f7ff ff93 	bl	800dd3e <__sfputs_r>
 800de18:	3001      	adds	r0, #1
 800de1a:	f000 80aa 	beq.w	800df72 <_vfiprintf_r+0x20e>
 800de1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800de20:	445a      	add	r2, fp
 800de22:	9209      	str	r2, [sp, #36]	; 0x24
 800de24:	f89a 3000 	ldrb.w	r3, [sl]
 800de28:	2b00      	cmp	r3, #0
 800de2a:	f000 80a2 	beq.w	800df72 <_vfiprintf_r+0x20e>
 800de2e:	2300      	movs	r3, #0
 800de30:	f04f 32ff 	mov.w	r2, #4294967295
 800de34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800de38:	f10a 0a01 	add.w	sl, sl, #1
 800de3c:	9304      	str	r3, [sp, #16]
 800de3e:	9307      	str	r3, [sp, #28]
 800de40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800de44:	931a      	str	r3, [sp, #104]	; 0x68
 800de46:	4654      	mov	r4, sl
 800de48:	2205      	movs	r2, #5
 800de4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800de4e:	4858      	ldr	r0, [pc, #352]	; (800dfb0 <_vfiprintf_r+0x24c>)
 800de50:	f7f2 f9c6 	bl	80001e0 <memchr>
 800de54:	9a04      	ldr	r2, [sp, #16]
 800de56:	b9d8      	cbnz	r0, 800de90 <_vfiprintf_r+0x12c>
 800de58:	06d1      	lsls	r1, r2, #27
 800de5a:	bf44      	itt	mi
 800de5c:	2320      	movmi	r3, #32
 800de5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de62:	0713      	lsls	r3, r2, #28
 800de64:	bf44      	itt	mi
 800de66:	232b      	movmi	r3, #43	; 0x2b
 800de68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800de6c:	f89a 3000 	ldrb.w	r3, [sl]
 800de70:	2b2a      	cmp	r3, #42	; 0x2a
 800de72:	d015      	beq.n	800dea0 <_vfiprintf_r+0x13c>
 800de74:	9a07      	ldr	r2, [sp, #28]
 800de76:	4654      	mov	r4, sl
 800de78:	2000      	movs	r0, #0
 800de7a:	f04f 0c0a 	mov.w	ip, #10
 800de7e:	4621      	mov	r1, r4
 800de80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800de84:	3b30      	subs	r3, #48	; 0x30
 800de86:	2b09      	cmp	r3, #9
 800de88:	d94e      	bls.n	800df28 <_vfiprintf_r+0x1c4>
 800de8a:	b1b0      	cbz	r0, 800deba <_vfiprintf_r+0x156>
 800de8c:	9207      	str	r2, [sp, #28]
 800de8e:	e014      	b.n	800deba <_vfiprintf_r+0x156>
 800de90:	eba0 0308 	sub.w	r3, r0, r8
 800de94:	fa09 f303 	lsl.w	r3, r9, r3
 800de98:	4313      	orrs	r3, r2
 800de9a:	9304      	str	r3, [sp, #16]
 800de9c:	46a2      	mov	sl, r4
 800de9e:	e7d2      	b.n	800de46 <_vfiprintf_r+0xe2>
 800dea0:	9b03      	ldr	r3, [sp, #12]
 800dea2:	1d19      	adds	r1, r3, #4
 800dea4:	681b      	ldr	r3, [r3, #0]
 800dea6:	9103      	str	r1, [sp, #12]
 800dea8:	2b00      	cmp	r3, #0
 800deaa:	bfbb      	ittet	lt
 800deac:	425b      	neglt	r3, r3
 800deae:	f042 0202 	orrlt.w	r2, r2, #2
 800deb2:	9307      	strge	r3, [sp, #28]
 800deb4:	9307      	strlt	r3, [sp, #28]
 800deb6:	bfb8      	it	lt
 800deb8:	9204      	strlt	r2, [sp, #16]
 800deba:	7823      	ldrb	r3, [r4, #0]
 800debc:	2b2e      	cmp	r3, #46	; 0x2e
 800debe:	d10c      	bne.n	800deda <_vfiprintf_r+0x176>
 800dec0:	7863      	ldrb	r3, [r4, #1]
 800dec2:	2b2a      	cmp	r3, #42	; 0x2a
 800dec4:	d135      	bne.n	800df32 <_vfiprintf_r+0x1ce>
 800dec6:	9b03      	ldr	r3, [sp, #12]
 800dec8:	1d1a      	adds	r2, r3, #4
 800deca:	681b      	ldr	r3, [r3, #0]
 800decc:	9203      	str	r2, [sp, #12]
 800dece:	2b00      	cmp	r3, #0
 800ded0:	bfb8      	it	lt
 800ded2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ded6:	3402      	adds	r4, #2
 800ded8:	9305      	str	r3, [sp, #20]
 800deda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800dfc0 <_vfiprintf_r+0x25c>
 800dede:	7821      	ldrb	r1, [r4, #0]
 800dee0:	2203      	movs	r2, #3
 800dee2:	4650      	mov	r0, sl
 800dee4:	f7f2 f97c 	bl	80001e0 <memchr>
 800dee8:	b140      	cbz	r0, 800defc <_vfiprintf_r+0x198>
 800deea:	2340      	movs	r3, #64	; 0x40
 800deec:	eba0 000a 	sub.w	r0, r0, sl
 800def0:	fa03 f000 	lsl.w	r0, r3, r0
 800def4:	9b04      	ldr	r3, [sp, #16]
 800def6:	4303      	orrs	r3, r0
 800def8:	3401      	adds	r4, #1
 800defa:	9304      	str	r3, [sp, #16]
 800defc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df00:	482c      	ldr	r0, [pc, #176]	; (800dfb4 <_vfiprintf_r+0x250>)
 800df02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df06:	2206      	movs	r2, #6
 800df08:	f7f2 f96a 	bl	80001e0 <memchr>
 800df0c:	2800      	cmp	r0, #0
 800df0e:	d03f      	beq.n	800df90 <_vfiprintf_r+0x22c>
 800df10:	4b29      	ldr	r3, [pc, #164]	; (800dfb8 <_vfiprintf_r+0x254>)
 800df12:	bb1b      	cbnz	r3, 800df5c <_vfiprintf_r+0x1f8>
 800df14:	9b03      	ldr	r3, [sp, #12]
 800df16:	3307      	adds	r3, #7
 800df18:	f023 0307 	bic.w	r3, r3, #7
 800df1c:	3308      	adds	r3, #8
 800df1e:	9303      	str	r3, [sp, #12]
 800df20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800df22:	443b      	add	r3, r7
 800df24:	9309      	str	r3, [sp, #36]	; 0x24
 800df26:	e767      	b.n	800ddf8 <_vfiprintf_r+0x94>
 800df28:	fb0c 3202 	mla	r2, ip, r2, r3
 800df2c:	460c      	mov	r4, r1
 800df2e:	2001      	movs	r0, #1
 800df30:	e7a5      	b.n	800de7e <_vfiprintf_r+0x11a>
 800df32:	2300      	movs	r3, #0
 800df34:	3401      	adds	r4, #1
 800df36:	9305      	str	r3, [sp, #20]
 800df38:	4619      	mov	r1, r3
 800df3a:	f04f 0c0a 	mov.w	ip, #10
 800df3e:	4620      	mov	r0, r4
 800df40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800df44:	3a30      	subs	r2, #48	; 0x30
 800df46:	2a09      	cmp	r2, #9
 800df48:	d903      	bls.n	800df52 <_vfiprintf_r+0x1ee>
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d0c5      	beq.n	800deda <_vfiprintf_r+0x176>
 800df4e:	9105      	str	r1, [sp, #20]
 800df50:	e7c3      	b.n	800deda <_vfiprintf_r+0x176>
 800df52:	fb0c 2101 	mla	r1, ip, r1, r2
 800df56:	4604      	mov	r4, r0
 800df58:	2301      	movs	r3, #1
 800df5a:	e7f0      	b.n	800df3e <_vfiprintf_r+0x1da>
 800df5c:	ab03      	add	r3, sp, #12
 800df5e:	9300      	str	r3, [sp, #0]
 800df60:	462a      	mov	r2, r5
 800df62:	4b16      	ldr	r3, [pc, #88]	; (800dfbc <_vfiprintf_r+0x258>)
 800df64:	a904      	add	r1, sp, #16
 800df66:	4630      	mov	r0, r6
 800df68:	f7fc f860 	bl	800a02c <_printf_float>
 800df6c:	4607      	mov	r7, r0
 800df6e:	1c78      	adds	r0, r7, #1
 800df70:	d1d6      	bne.n	800df20 <_vfiprintf_r+0x1bc>
 800df72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800df74:	07d9      	lsls	r1, r3, #31
 800df76:	d405      	bmi.n	800df84 <_vfiprintf_r+0x220>
 800df78:	89ab      	ldrh	r3, [r5, #12]
 800df7a:	059a      	lsls	r2, r3, #22
 800df7c:	d402      	bmi.n	800df84 <_vfiprintf_r+0x220>
 800df7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800df80:	f000 fadd 	bl	800e53e <__retarget_lock_release_recursive>
 800df84:	89ab      	ldrh	r3, [r5, #12]
 800df86:	065b      	lsls	r3, r3, #25
 800df88:	f53f af12 	bmi.w	800ddb0 <_vfiprintf_r+0x4c>
 800df8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800df8e:	e711      	b.n	800ddb4 <_vfiprintf_r+0x50>
 800df90:	ab03      	add	r3, sp, #12
 800df92:	9300      	str	r3, [sp, #0]
 800df94:	462a      	mov	r2, r5
 800df96:	4b09      	ldr	r3, [pc, #36]	; (800dfbc <_vfiprintf_r+0x258>)
 800df98:	a904      	add	r1, sp, #16
 800df9a:	4630      	mov	r0, r6
 800df9c:	f7fc faea 	bl	800a574 <_printf_i>
 800dfa0:	e7e4      	b.n	800df6c <_vfiprintf_r+0x208>
 800dfa2:	bf00      	nop
 800dfa4:	0800fdc0 	.word	0x0800fdc0
 800dfa8:	0800fde0 	.word	0x0800fde0
 800dfac:	0800fda0 	.word	0x0800fda0
 800dfb0:	0800fd8c 	.word	0x0800fd8c
 800dfb4:	0800fd96 	.word	0x0800fd96
 800dfb8:	0800a02d 	.word	0x0800a02d
 800dfbc:	0800dd3f 	.word	0x0800dd3f
 800dfc0:	0800fd92 	.word	0x0800fd92
 800dfc4:	00000000 	.word	0x00000000

0800dfc8 <nan>:
 800dfc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800dfd0 <nan+0x8>
 800dfcc:	4770      	bx	lr
 800dfce:	bf00      	nop
 800dfd0:	00000000 	.word	0x00000000
 800dfd4:	7ff80000 	.word	0x7ff80000

0800dfd8 <_sbrk_r>:
 800dfd8:	b538      	push	{r3, r4, r5, lr}
 800dfda:	4d06      	ldr	r5, [pc, #24]	; (800dff4 <_sbrk_r+0x1c>)
 800dfdc:	2300      	movs	r3, #0
 800dfde:	4604      	mov	r4, r0
 800dfe0:	4608      	mov	r0, r1
 800dfe2:	602b      	str	r3, [r5, #0]
 800dfe4:	f7f8 fc1e 	bl	8006824 <_sbrk>
 800dfe8:	1c43      	adds	r3, r0, #1
 800dfea:	d102      	bne.n	800dff2 <_sbrk_r+0x1a>
 800dfec:	682b      	ldr	r3, [r5, #0]
 800dfee:	b103      	cbz	r3, 800dff2 <_sbrk_r+0x1a>
 800dff0:	6023      	str	r3, [r4, #0]
 800dff2:	bd38      	pop	{r3, r4, r5, pc}
 800dff4:	2000058c 	.word	0x2000058c

0800dff8 <strncmp>:
 800dff8:	b510      	push	{r4, lr}
 800dffa:	b17a      	cbz	r2, 800e01c <strncmp+0x24>
 800dffc:	4603      	mov	r3, r0
 800dffe:	3901      	subs	r1, #1
 800e000:	1884      	adds	r4, r0, r2
 800e002:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e006:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e00a:	4290      	cmp	r0, r2
 800e00c:	d101      	bne.n	800e012 <strncmp+0x1a>
 800e00e:	42a3      	cmp	r3, r4
 800e010:	d101      	bne.n	800e016 <strncmp+0x1e>
 800e012:	1a80      	subs	r0, r0, r2
 800e014:	bd10      	pop	{r4, pc}
 800e016:	2800      	cmp	r0, #0
 800e018:	d1f3      	bne.n	800e002 <strncmp+0xa>
 800e01a:	e7fa      	b.n	800e012 <strncmp+0x1a>
 800e01c:	4610      	mov	r0, r2
 800e01e:	e7f9      	b.n	800e014 <strncmp+0x1c>

0800e020 <__swbuf_r>:
 800e020:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e022:	460e      	mov	r6, r1
 800e024:	4614      	mov	r4, r2
 800e026:	4605      	mov	r5, r0
 800e028:	b118      	cbz	r0, 800e032 <__swbuf_r+0x12>
 800e02a:	6983      	ldr	r3, [r0, #24]
 800e02c:	b90b      	cbnz	r3, 800e032 <__swbuf_r+0x12>
 800e02e:	f000 f9e7 	bl	800e400 <__sinit>
 800e032:	4b21      	ldr	r3, [pc, #132]	; (800e0b8 <__swbuf_r+0x98>)
 800e034:	429c      	cmp	r4, r3
 800e036:	d12b      	bne.n	800e090 <__swbuf_r+0x70>
 800e038:	686c      	ldr	r4, [r5, #4]
 800e03a:	69a3      	ldr	r3, [r4, #24]
 800e03c:	60a3      	str	r3, [r4, #8]
 800e03e:	89a3      	ldrh	r3, [r4, #12]
 800e040:	071a      	lsls	r2, r3, #28
 800e042:	d52f      	bpl.n	800e0a4 <__swbuf_r+0x84>
 800e044:	6923      	ldr	r3, [r4, #16]
 800e046:	b36b      	cbz	r3, 800e0a4 <__swbuf_r+0x84>
 800e048:	6923      	ldr	r3, [r4, #16]
 800e04a:	6820      	ldr	r0, [r4, #0]
 800e04c:	1ac0      	subs	r0, r0, r3
 800e04e:	6963      	ldr	r3, [r4, #20]
 800e050:	b2f6      	uxtb	r6, r6
 800e052:	4283      	cmp	r3, r0
 800e054:	4637      	mov	r7, r6
 800e056:	dc04      	bgt.n	800e062 <__swbuf_r+0x42>
 800e058:	4621      	mov	r1, r4
 800e05a:	4628      	mov	r0, r5
 800e05c:	f000 f93c 	bl	800e2d8 <_fflush_r>
 800e060:	bb30      	cbnz	r0, 800e0b0 <__swbuf_r+0x90>
 800e062:	68a3      	ldr	r3, [r4, #8]
 800e064:	3b01      	subs	r3, #1
 800e066:	60a3      	str	r3, [r4, #8]
 800e068:	6823      	ldr	r3, [r4, #0]
 800e06a:	1c5a      	adds	r2, r3, #1
 800e06c:	6022      	str	r2, [r4, #0]
 800e06e:	701e      	strb	r6, [r3, #0]
 800e070:	6963      	ldr	r3, [r4, #20]
 800e072:	3001      	adds	r0, #1
 800e074:	4283      	cmp	r3, r0
 800e076:	d004      	beq.n	800e082 <__swbuf_r+0x62>
 800e078:	89a3      	ldrh	r3, [r4, #12]
 800e07a:	07db      	lsls	r3, r3, #31
 800e07c:	d506      	bpl.n	800e08c <__swbuf_r+0x6c>
 800e07e:	2e0a      	cmp	r6, #10
 800e080:	d104      	bne.n	800e08c <__swbuf_r+0x6c>
 800e082:	4621      	mov	r1, r4
 800e084:	4628      	mov	r0, r5
 800e086:	f000 f927 	bl	800e2d8 <_fflush_r>
 800e08a:	b988      	cbnz	r0, 800e0b0 <__swbuf_r+0x90>
 800e08c:	4638      	mov	r0, r7
 800e08e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e090:	4b0a      	ldr	r3, [pc, #40]	; (800e0bc <__swbuf_r+0x9c>)
 800e092:	429c      	cmp	r4, r3
 800e094:	d101      	bne.n	800e09a <__swbuf_r+0x7a>
 800e096:	68ac      	ldr	r4, [r5, #8]
 800e098:	e7cf      	b.n	800e03a <__swbuf_r+0x1a>
 800e09a:	4b09      	ldr	r3, [pc, #36]	; (800e0c0 <__swbuf_r+0xa0>)
 800e09c:	429c      	cmp	r4, r3
 800e09e:	bf08      	it	eq
 800e0a0:	68ec      	ldreq	r4, [r5, #12]
 800e0a2:	e7ca      	b.n	800e03a <__swbuf_r+0x1a>
 800e0a4:	4621      	mov	r1, r4
 800e0a6:	4628      	mov	r0, r5
 800e0a8:	f000 f81a 	bl	800e0e0 <__swsetup_r>
 800e0ac:	2800      	cmp	r0, #0
 800e0ae:	d0cb      	beq.n	800e048 <__swbuf_r+0x28>
 800e0b0:	f04f 37ff 	mov.w	r7, #4294967295
 800e0b4:	e7ea      	b.n	800e08c <__swbuf_r+0x6c>
 800e0b6:	bf00      	nop
 800e0b8:	0800fdc0 	.word	0x0800fdc0
 800e0bc:	0800fde0 	.word	0x0800fde0
 800e0c0:	0800fda0 	.word	0x0800fda0

0800e0c4 <__ascii_wctomb>:
 800e0c4:	b149      	cbz	r1, 800e0da <__ascii_wctomb+0x16>
 800e0c6:	2aff      	cmp	r2, #255	; 0xff
 800e0c8:	bf85      	ittet	hi
 800e0ca:	238a      	movhi	r3, #138	; 0x8a
 800e0cc:	6003      	strhi	r3, [r0, #0]
 800e0ce:	700a      	strbls	r2, [r1, #0]
 800e0d0:	f04f 30ff 	movhi.w	r0, #4294967295
 800e0d4:	bf98      	it	ls
 800e0d6:	2001      	movls	r0, #1
 800e0d8:	4770      	bx	lr
 800e0da:	4608      	mov	r0, r1
 800e0dc:	4770      	bx	lr
	...

0800e0e0 <__swsetup_r>:
 800e0e0:	4b32      	ldr	r3, [pc, #200]	; (800e1ac <__swsetup_r+0xcc>)
 800e0e2:	b570      	push	{r4, r5, r6, lr}
 800e0e4:	681d      	ldr	r5, [r3, #0]
 800e0e6:	4606      	mov	r6, r0
 800e0e8:	460c      	mov	r4, r1
 800e0ea:	b125      	cbz	r5, 800e0f6 <__swsetup_r+0x16>
 800e0ec:	69ab      	ldr	r3, [r5, #24]
 800e0ee:	b913      	cbnz	r3, 800e0f6 <__swsetup_r+0x16>
 800e0f0:	4628      	mov	r0, r5
 800e0f2:	f000 f985 	bl	800e400 <__sinit>
 800e0f6:	4b2e      	ldr	r3, [pc, #184]	; (800e1b0 <__swsetup_r+0xd0>)
 800e0f8:	429c      	cmp	r4, r3
 800e0fa:	d10f      	bne.n	800e11c <__swsetup_r+0x3c>
 800e0fc:	686c      	ldr	r4, [r5, #4]
 800e0fe:	89a3      	ldrh	r3, [r4, #12]
 800e100:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e104:	0719      	lsls	r1, r3, #28
 800e106:	d42c      	bmi.n	800e162 <__swsetup_r+0x82>
 800e108:	06dd      	lsls	r5, r3, #27
 800e10a:	d411      	bmi.n	800e130 <__swsetup_r+0x50>
 800e10c:	2309      	movs	r3, #9
 800e10e:	6033      	str	r3, [r6, #0]
 800e110:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e114:	81a3      	strh	r3, [r4, #12]
 800e116:	f04f 30ff 	mov.w	r0, #4294967295
 800e11a:	e03e      	b.n	800e19a <__swsetup_r+0xba>
 800e11c:	4b25      	ldr	r3, [pc, #148]	; (800e1b4 <__swsetup_r+0xd4>)
 800e11e:	429c      	cmp	r4, r3
 800e120:	d101      	bne.n	800e126 <__swsetup_r+0x46>
 800e122:	68ac      	ldr	r4, [r5, #8]
 800e124:	e7eb      	b.n	800e0fe <__swsetup_r+0x1e>
 800e126:	4b24      	ldr	r3, [pc, #144]	; (800e1b8 <__swsetup_r+0xd8>)
 800e128:	429c      	cmp	r4, r3
 800e12a:	bf08      	it	eq
 800e12c:	68ec      	ldreq	r4, [r5, #12]
 800e12e:	e7e6      	b.n	800e0fe <__swsetup_r+0x1e>
 800e130:	0758      	lsls	r0, r3, #29
 800e132:	d512      	bpl.n	800e15a <__swsetup_r+0x7a>
 800e134:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e136:	b141      	cbz	r1, 800e14a <__swsetup_r+0x6a>
 800e138:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e13c:	4299      	cmp	r1, r3
 800e13e:	d002      	beq.n	800e146 <__swsetup_r+0x66>
 800e140:	4630      	mov	r0, r6
 800e142:	f7ff fba9 	bl	800d898 <_free_r>
 800e146:	2300      	movs	r3, #0
 800e148:	6363      	str	r3, [r4, #52]	; 0x34
 800e14a:	89a3      	ldrh	r3, [r4, #12]
 800e14c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e150:	81a3      	strh	r3, [r4, #12]
 800e152:	2300      	movs	r3, #0
 800e154:	6063      	str	r3, [r4, #4]
 800e156:	6923      	ldr	r3, [r4, #16]
 800e158:	6023      	str	r3, [r4, #0]
 800e15a:	89a3      	ldrh	r3, [r4, #12]
 800e15c:	f043 0308 	orr.w	r3, r3, #8
 800e160:	81a3      	strh	r3, [r4, #12]
 800e162:	6923      	ldr	r3, [r4, #16]
 800e164:	b94b      	cbnz	r3, 800e17a <__swsetup_r+0x9a>
 800e166:	89a3      	ldrh	r3, [r4, #12]
 800e168:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e16c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e170:	d003      	beq.n	800e17a <__swsetup_r+0x9a>
 800e172:	4621      	mov	r1, r4
 800e174:	4630      	mov	r0, r6
 800e176:	f000 fa09 	bl	800e58c <__smakebuf_r>
 800e17a:	89a0      	ldrh	r0, [r4, #12]
 800e17c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e180:	f010 0301 	ands.w	r3, r0, #1
 800e184:	d00a      	beq.n	800e19c <__swsetup_r+0xbc>
 800e186:	2300      	movs	r3, #0
 800e188:	60a3      	str	r3, [r4, #8]
 800e18a:	6963      	ldr	r3, [r4, #20]
 800e18c:	425b      	negs	r3, r3
 800e18e:	61a3      	str	r3, [r4, #24]
 800e190:	6923      	ldr	r3, [r4, #16]
 800e192:	b943      	cbnz	r3, 800e1a6 <__swsetup_r+0xc6>
 800e194:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e198:	d1ba      	bne.n	800e110 <__swsetup_r+0x30>
 800e19a:	bd70      	pop	{r4, r5, r6, pc}
 800e19c:	0781      	lsls	r1, r0, #30
 800e19e:	bf58      	it	pl
 800e1a0:	6963      	ldrpl	r3, [r4, #20]
 800e1a2:	60a3      	str	r3, [r4, #8]
 800e1a4:	e7f4      	b.n	800e190 <__swsetup_r+0xb0>
 800e1a6:	2000      	movs	r0, #0
 800e1a8:	e7f7      	b.n	800e19a <__swsetup_r+0xba>
 800e1aa:	bf00      	nop
 800e1ac:	20000020 	.word	0x20000020
 800e1b0:	0800fdc0 	.word	0x0800fdc0
 800e1b4:	0800fde0 	.word	0x0800fde0
 800e1b8:	0800fda0 	.word	0x0800fda0

0800e1bc <abort>:
 800e1bc:	b508      	push	{r3, lr}
 800e1be:	2006      	movs	r0, #6
 800e1c0:	f000 faa2 	bl	800e708 <raise>
 800e1c4:	2001      	movs	r0, #1
 800e1c6:	f7f8 fab5 	bl	8006734 <_exit>
	...

0800e1cc <__sflush_r>:
 800e1cc:	898a      	ldrh	r2, [r1, #12]
 800e1ce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e1d2:	4605      	mov	r5, r0
 800e1d4:	0710      	lsls	r0, r2, #28
 800e1d6:	460c      	mov	r4, r1
 800e1d8:	d458      	bmi.n	800e28c <__sflush_r+0xc0>
 800e1da:	684b      	ldr	r3, [r1, #4]
 800e1dc:	2b00      	cmp	r3, #0
 800e1de:	dc05      	bgt.n	800e1ec <__sflush_r+0x20>
 800e1e0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e1e2:	2b00      	cmp	r3, #0
 800e1e4:	dc02      	bgt.n	800e1ec <__sflush_r+0x20>
 800e1e6:	2000      	movs	r0, #0
 800e1e8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e1ec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e1ee:	2e00      	cmp	r6, #0
 800e1f0:	d0f9      	beq.n	800e1e6 <__sflush_r+0x1a>
 800e1f2:	2300      	movs	r3, #0
 800e1f4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e1f8:	682f      	ldr	r7, [r5, #0]
 800e1fa:	602b      	str	r3, [r5, #0]
 800e1fc:	d032      	beq.n	800e264 <__sflush_r+0x98>
 800e1fe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e200:	89a3      	ldrh	r3, [r4, #12]
 800e202:	075a      	lsls	r2, r3, #29
 800e204:	d505      	bpl.n	800e212 <__sflush_r+0x46>
 800e206:	6863      	ldr	r3, [r4, #4]
 800e208:	1ac0      	subs	r0, r0, r3
 800e20a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e20c:	b10b      	cbz	r3, 800e212 <__sflush_r+0x46>
 800e20e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e210:	1ac0      	subs	r0, r0, r3
 800e212:	2300      	movs	r3, #0
 800e214:	4602      	mov	r2, r0
 800e216:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e218:	6a21      	ldr	r1, [r4, #32]
 800e21a:	4628      	mov	r0, r5
 800e21c:	47b0      	blx	r6
 800e21e:	1c43      	adds	r3, r0, #1
 800e220:	89a3      	ldrh	r3, [r4, #12]
 800e222:	d106      	bne.n	800e232 <__sflush_r+0x66>
 800e224:	6829      	ldr	r1, [r5, #0]
 800e226:	291d      	cmp	r1, #29
 800e228:	d82c      	bhi.n	800e284 <__sflush_r+0xb8>
 800e22a:	4a2a      	ldr	r2, [pc, #168]	; (800e2d4 <__sflush_r+0x108>)
 800e22c:	40ca      	lsrs	r2, r1
 800e22e:	07d6      	lsls	r6, r2, #31
 800e230:	d528      	bpl.n	800e284 <__sflush_r+0xb8>
 800e232:	2200      	movs	r2, #0
 800e234:	6062      	str	r2, [r4, #4]
 800e236:	04d9      	lsls	r1, r3, #19
 800e238:	6922      	ldr	r2, [r4, #16]
 800e23a:	6022      	str	r2, [r4, #0]
 800e23c:	d504      	bpl.n	800e248 <__sflush_r+0x7c>
 800e23e:	1c42      	adds	r2, r0, #1
 800e240:	d101      	bne.n	800e246 <__sflush_r+0x7a>
 800e242:	682b      	ldr	r3, [r5, #0]
 800e244:	b903      	cbnz	r3, 800e248 <__sflush_r+0x7c>
 800e246:	6560      	str	r0, [r4, #84]	; 0x54
 800e248:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e24a:	602f      	str	r7, [r5, #0]
 800e24c:	2900      	cmp	r1, #0
 800e24e:	d0ca      	beq.n	800e1e6 <__sflush_r+0x1a>
 800e250:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e254:	4299      	cmp	r1, r3
 800e256:	d002      	beq.n	800e25e <__sflush_r+0x92>
 800e258:	4628      	mov	r0, r5
 800e25a:	f7ff fb1d 	bl	800d898 <_free_r>
 800e25e:	2000      	movs	r0, #0
 800e260:	6360      	str	r0, [r4, #52]	; 0x34
 800e262:	e7c1      	b.n	800e1e8 <__sflush_r+0x1c>
 800e264:	6a21      	ldr	r1, [r4, #32]
 800e266:	2301      	movs	r3, #1
 800e268:	4628      	mov	r0, r5
 800e26a:	47b0      	blx	r6
 800e26c:	1c41      	adds	r1, r0, #1
 800e26e:	d1c7      	bne.n	800e200 <__sflush_r+0x34>
 800e270:	682b      	ldr	r3, [r5, #0]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d0c4      	beq.n	800e200 <__sflush_r+0x34>
 800e276:	2b1d      	cmp	r3, #29
 800e278:	d001      	beq.n	800e27e <__sflush_r+0xb2>
 800e27a:	2b16      	cmp	r3, #22
 800e27c:	d101      	bne.n	800e282 <__sflush_r+0xb6>
 800e27e:	602f      	str	r7, [r5, #0]
 800e280:	e7b1      	b.n	800e1e6 <__sflush_r+0x1a>
 800e282:	89a3      	ldrh	r3, [r4, #12]
 800e284:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e288:	81a3      	strh	r3, [r4, #12]
 800e28a:	e7ad      	b.n	800e1e8 <__sflush_r+0x1c>
 800e28c:	690f      	ldr	r7, [r1, #16]
 800e28e:	2f00      	cmp	r7, #0
 800e290:	d0a9      	beq.n	800e1e6 <__sflush_r+0x1a>
 800e292:	0793      	lsls	r3, r2, #30
 800e294:	680e      	ldr	r6, [r1, #0]
 800e296:	bf08      	it	eq
 800e298:	694b      	ldreq	r3, [r1, #20]
 800e29a:	600f      	str	r7, [r1, #0]
 800e29c:	bf18      	it	ne
 800e29e:	2300      	movne	r3, #0
 800e2a0:	eba6 0807 	sub.w	r8, r6, r7
 800e2a4:	608b      	str	r3, [r1, #8]
 800e2a6:	f1b8 0f00 	cmp.w	r8, #0
 800e2aa:	dd9c      	ble.n	800e1e6 <__sflush_r+0x1a>
 800e2ac:	6a21      	ldr	r1, [r4, #32]
 800e2ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e2b0:	4643      	mov	r3, r8
 800e2b2:	463a      	mov	r2, r7
 800e2b4:	4628      	mov	r0, r5
 800e2b6:	47b0      	blx	r6
 800e2b8:	2800      	cmp	r0, #0
 800e2ba:	dc06      	bgt.n	800e2ca <__sflush_r+0xfe>
 800e2bc:	89a3      	ldrh	r3, [r4, #12]
 800e2be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e2c2:	81a3      	strh	r3, [r4, #12]
 800e2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e2c8:	e78e      	b.n	800e1e8 <__sflush_r+0x1c>
 800e2ca:	4407      	add	r7, r0
 800e2cc:	eba8 0800 	sub.w	r8, r8, r0
 800e2d0:	e7e9      	b.n	800e2a6 <__sflush_r+0xda>
 800e2d2:	bf00      	nop
 800e2d4:	20400001 	.word	0x20400001

0800e2d8 <_fflush_r>:
 800e2d8:	b538      	push	{r3, r4, r5, lr}
 800e2da:	690b      	ldr	r3, [r1, #16]
 800e2dc:	4605      	mov	r5, r0
 800e2de:	460c      	mov	r4, r1
 800e2e0:	b913      	cbnz	r3, 800e2e8 <_fflush_r+0x10>
 800e2e2:	2500      	movs	r5, #0
 800e2e4:	4628      	mov	r0, r5
 800e2e6:	bd38      	pop	{r3, r4, r5, pc}
 800e2e8:	b118      	cbz	r0, 800e2f2 <_fflush_r+0x1a>
 800e2ea:	6983      	ldr	r3, [r0, #24]
 800e2ec:	b90b      	cbnz	r3, 800e2f2 <_fflush_r+0x1a>
 800e2ee:	f000 f887 	bl	800e400 <__sinit>
 800e2f2:	4b14      	ldr	r3, [pc, #80]	; (800e344 <_fflush_r+0x6c>)
 800e2f4:	429c      	cmp	r4, r3
 800e2f6:	d11b      	bne.n	800e330 <_fflush_r+0x58>
 800e2f8:	686c      	ldr	r4, [r5, #4]
 800e2fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e2fe:	2b00      	cmp	r3, #0
 800e300:	d0ef      	beq.n	800e2e2 <_fflush_r+0xa>
 800e302:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e304:	07d0      	lsls	r0, r2, #31
 800e306:	d404      	bmi.n	800e312 <_fflush_r+0x3a>
 800e308:	0599      	lsls	r1, r3, #22
 800e30a:	d402      	bmi.n	800e312 <_fflush_r+0x3a>
 800e30c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e30e:	f000 f915 	bl	800e53c <__retarget_lock_acquire_recursive>
 800e312:	4628      	mov	r0, r5
 800e314:	4621      	mov	r1, r4
 800e316:	f7ff ff59 	bl	800e1cc <__sflush_r>
 800e31a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e31c:	07da      	lsls	r2, r3, #31
 800e31e:	4605      	mov	r5, r0
 800e320:	d4e0      	bmi.n	800e2e4 <_fflush_r+0xc>
 800e322:	89a3      	ldrh	r3, [r4, #12]
 800e324:	059b      	lsls	r3, r3, #22
 800e326:	d4dd      	bmi.n	800e2e4 <_fflush_r+0xc>
 800e328:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e32a:	f000 f908 	bl	800e53e <__retarget_lock_release_recursive>
 800e32e:	e7d9      	b.n	800e2e4 <_fflush_r+0xc>
 800e330:	4b05      	ldr	r3, [pc, #20]	; (800e348 <_fflush_r+0x70>)
 800e332:	429c      	cmp	r4, r3
 800e334:	d101      	bne.n	800e33a <_fflush_r+0x62>
 800e336:	68ac      	ldr	r4, [r5, #8]
 800e338:	e7df      	b.n	800e2fa <_fflush_r+0x22>
 800e33a:	4b04      	ldr	r3, [pc, #16]	; (800e34c <_fflush_r+0x74>)
 800e33c:	429c      	cmp	r4, r3
 800e33e:	bf08      	it	eq
 800e340:	68ec      	ldreq	r4, [r5, #12]
 800e342:	e7da      	b.n	800e2fa <_fflush_r+0x22>
 800e344:	0800fdc0 	.word	0x0800fdc0
 800e348:	0800fde0 	.word	0x0800fde0
 800e34c:	0800fda0 	.word	0x0800fda0

0800e350 <std>:
 800e350:	2300      	movs	r3, #0
 800e352:	b510      	push	{r4, lr}
 800e354:	4604      	mov	r4, r0
 800e356:	e9c0 3300 	strd	r3, r3, [r0]
 800e35a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e35e:	6083      	str	r3, [r0, #8]
 800e360:	8181      	strh	r1, [r0, #12]
 800e362:	6643      	str	r3, [r0, #100]	; 0x64
 800e364:	81c2      	strh	r2, [r0, #14]
 800e366:	6183      	str	r3, [r0, #24]
 800e368:	4619      	mov	r1, r3
 800e36a:	2208      	movs	r2, #8
 800e36c:	305c      	adds	r0, #92	; 0x5c
 800e36e:	f7fb fdb5 	bl	8009edc <memset>
 800e372:	4b05      	ldr	r3, [pc, #20]	; (800e388 <std+0x38>)
 800e374:	6263      	str	r3, [r4, #36]	; 0x24
 800e376:	4b05      	ldr	r3, [pc, #20]	; (800e38c <std+0x3c>)
 800e378:	62a3      	str	r3, [r4, #40]	; 0x28
 800e37a:	4b05      	ldr	r3, [pc, #20]	; (800e390 <std+0x40>)
 800e37c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e37e:	4b05      	ldr	r3, [pc, #20]	; (800e394 <std+0x44>)
 800e380:	6224      	str	r4, [r4, #32]
 800e382:	6323      	str	r3, [r4, #48]	; 0x30
 800e384:	bd10      	pop	{r4, pc}
 800e386:	bf00      	nop
 800e388:	0800e741 	.word	0x0800e741
 800e38c:	0800e763 	.word	0x0800e763
 800e390:	0800e79b 	.word	0x0800e79b
 800e394:	0800e7bf 	.word	0x0800e7bf

0800e398 <_cleanup_r>:
 800e398:	4901      	ldr	r1, [pc, #4]	; (800e3a0 <_cleanup_r+0x8>)
 800e39a:	f000 b8af 	b.w	800e4fc <_fwalk_reent>
 800e39e:	bf00      	nop
 800e3a0:	0800e2d9 	.word	0x0800e2d9

0800e3a4 <__sfmoreglue>:
 800e3a4:	b570      	push	{r4, r5, r6, lr}
 800e3a6:	2268      	movs	r2, #104	; 0x68
 800e3a8:	1e4d      	subs	r5, r1, #1
 800e3aa:	4355      	muls	r5, r2
 800e3ac:	460e      	mov	r6, r1
 800e3ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e3b2:	f7ff fadd 	bl	800d970 <_malloc_r>
 800e3b6:	4604      	mov	r4, r0
 800e3b8:	b140      	cbz	r0, 800e3cc <__sfmoreglue+0x28>
 800e3ba:	2100      	movs	r1, #0
 800e3bc:	e9c0 1600 	strd	r1, r6, [r0]
 800e3c0:	300c      	adds	r0, #12
 800e3c2:	60a0      	str	r0, [r4, #8]
 800e3c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e3c8:	f7fb fd88 	bl	8009edc <memset>
 800e3cc:	4620      	mov	r0, r4
 800e3ce:	bd70      	pop	{r4, r5, r6, pc}

0800e3d0 <__sfp_lock_acquire>:
 800e3d0:	4801      	ldr	r0, [pc, #4]	; (800e3d8 <__sfp_lock_acquire+0x8>)
 800e3d2:	f000 b8b3 	b.w	800e53c <__retarget_lock_acquire_recursive>
 800e3d6:	bf00      	nop
 800e3d8:	20000589 	.word	0x20000589

0800e3dc <__sfp_lock_release>:
 800e3dc:	4801      	ldr	r0, [pc, #4]	; (800e3e4 <__sfp_lock_release+0x8>)
 800e3de:	f000 b8ae 	b.w	800e53e <__retarget_lock_release_recursive>
 800e3e2:	bf00      	nop
 800e3e4:	20000589 	.word	0x20000589

0800e3e8 <__sinit_lock_acquire>:
 800e3e8:	4801      	ldr	r0, [pc, #4]	; (800e3f0 <__sinit_lock_acquire+0x8>)
 800e3ea:	f000 b8a7 	b.w	800e53c <__retarget_lock_acquire_recursive>
 800e3ee:	bf00      	nop
 800e3f0:	2000058a 	.word	0x2000058a

0800e3f4 <__sinit_lock_release>:
 800e3f4:	4801      	ldr	r0, [pc, #4]	; (800e3fc <__sinit_lock_release+0x8>)
 800e3f6:	f000 b8a2 	b.w	800e53e <__retarget_lock_release_recursive>
 800e3fa:	bf00      	nop
 800e3fc:	2000058a 	.word	0x2000058a

0800e400 <__sinit>:
 800e400:	b510      	push	{r4, lr}
 800e402:	4604      	mov	r4, r0
 800e404:	f7ff fff0 	bl	800e3e8 <__sinit_lock_acquire>
 800e408:	69a3      	ldr	r3, [r4, #24]
 800e40a:	b11b      	cbz	r3, 800e414 <__sinit+0x14>
 800e40c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e410:	f7ff bff0 	b.w	800e3f4 <__sinit_lock_release>
 800e414:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e418:	6523      	str	r3, [r4, #80]	; 0x50
 800e41a:	4b13      	ldr	r3, [pc, #76]	; (800e468 <__sinit+0x68>)
 800e41c:	4a13      	ldr	r2, [pc, #76]	; (800e46c <__sinit+0x6c>)
 800e41e:	681b      	ldr	r3, [r3, #0]
 800e420:	62a2      	str	r2, [r4, #40]	; 0x28
 800e422:	42a3      	cmp	r3, r4
 800e424:	bf04      	itt	eq
 800e426:	2301      	moveq	r3, #1
 800e428:	61a3      	streq	r3, [r4, #24]
 800e42a:	4620      	mov	r0, r4
 800e42c:	f000 f820 	bl	800e470 <__sfp>
 800e430:	6060      	str	r0, [r4, #4]
 800e432:	4620      	mov	r0, r4
 800e434:	f000 f81c 	bl	800e470 <__sfp>
 800e438:	60a0      	str	r0, [r4, #8]
 800e43a:	4620      	mov	r0, r4
 800e43c:	f000 f818 	bl	800e470 <__sfp>
 800e440:	2200      	movs	r2, #0
 800e442:	60e0      	str	r0, [r4, #12]
 800e444:	2104      	movs	r1, #4
 800e446:	6860      	ldr	r0, [r4, #4]
 800e448:	f7ff ff82 	bl	800e350 <std>
 800e44c:	68a0      	ldr	r0, [r4, #8]
 800e44e:	2201      	movs	r2, #1
 800e450:	2109      	movs	r1, #9
 800e452:	f7ff ff7d 	bl	800e350 <std>
 800e456:	68e0      	ldr	r0, [r4, #12]
 800e458:	2202      	movs	r2, #2
 800e45a:	2112      	movs	r1, #18
 800e45c:	f7ff ff78 	bl	800e350 <std>
 800e460:	2301      	movs	r3, #1
 800e462:	61a3      	str	r3, [r4, #24]
 800e464:	e7d2      	b.n	800e40c <__sinit+0xc>
 800e466:	bf00      	nop
 800e468:	0800f900 	.word	0x0800f900
 800e46c:	0800e399 	.word	0x0800e399

0800e470 <__sfp>:
 800e470:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e472:	4607      	mov	r7, r0
 800e474:	f7ff ffac 	bl	800e3d0 <__sfp_lock_acquire>
 800e478:	4b1e      	ldr	r3, [pc, #120]	; (800e4f4 <__sfp+0x84>)
 800e47a:	681e      	ldr	r6, [r3, #0]
 800e47c:	69b3      	ldr	r3, [r6, #24]
 800e47e:	b913      	cbnz	r3, 800e486 <__sfp+0x16>
 800e480:	4630      	mov	r0, r6
 800e482:	f7ff ffbd 	bl	800e400 <__sinit>
 800e486:	3648      	adds	r6, #72	; 0x48
 800e488:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e48c:	3b01      	subs	r3, #1
 800e48e:	d503      	bpl.n	800e498 <__sfp+0x28>
 800e490:	6833      	ldr	r3, [r6, #0]
 800e492:	b30b      	cbz	r3, 800e4d8 <__sfp+0x68>
 800e494:	6836      	ldr	r6, [r6, #0]
 800e496:	e7f7      	b.n	800e488 <__sfp+0x18>
 800e498:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e49c:	b9d5      	cbnz	r5, 800e4d4 <__sfp+0x64>
 800e49e:	4b16      	ldr	r3, [pc, #88]	; (800e4f8 <__sfp+0x88>)
 800e4a0:	60e3      	str	r3, [r4, #12]
 800e4a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e4a6:	6665      	str	r5, [r4, #100]	; 0x64
 800e4a8:	f000 f847 	bl	800e53a <__retarget_lock_init_recursive>
 800e4ac:	f7ff ff96 	bl	800e3dc <__sfp_lock_release>
 800e4b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e4b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e4b8:	6025      	str	r5, [r4, #0]
 800e4ba:	61a5      	str	r5, [r4, #24]
 800e4bc:	2208      	movs	r2, #8
 800e4be:	4629      	mov	r1, r5
 800e4c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e4c4:	f7fb fd0a 	bl	8009edc <memset>
 800e4c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e4cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e4d0:	4620      	mov	r0, r4
 800e4d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e4d4:	3468      	adds	r4, #104	; 0x68
 800e4d6:	e7d9      	b.n	800e48c <__sfp+0x1c>
 800e4d8:	2104      	movs	r1, #4
 800e4da:	4638      	mov	r0, r7
 800e4dc:	f7ff ff62 	bl	800e3a4 <__sfmoreglue>
 800e4e0:	4604      	mov	r4, r0
 800e4e2:	6030      	str	r0, [r6, #0]
 800e4e4:	2800      	cmp	r0, #0
 800e4e6:	d1d5      	bne.n	800e494 <__sfp+0x24>
 800e4e8:	f7ff ff78 	bl	800e3dc <__sfp_lock_release>
 800e4ec:	230c      	movs	r3, #12
 800e4ee:	603b      	str	r3, [r7, #0]
 800e4f0:	e7ee      	b.n	800e4d0 <__sfp+0x60>
 800e4f2:	bf00      	nop
 800e4f4:	0800f900 	.word	0x0800f900
 800e4f8:	ffff0001 	.word	0xffff0001

0800e4fc <_fwalk_reent>:
 800e4fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e500:	4606      	mov	r6, r0
 800e502:	4688      	mov	r8, r1
 800e504:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e508:	2700      	movs	r7, #0
 800e50a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e50e:	f1b9 0901 	subs.w	r9, r9, #1
 800e512:	d505      	bpl.n	800e520 <_fwalk_reent+0x24>
 800e514:	6824      	ldr	r4, [r4, #0]
 800e516:	2c00      	cmp	r4, #0
 800e518:	d1f7      	bne.n	800e50a <_fwalk_reent+0xe>
 800e51a:	4638      	mov	r0, r7
 800e51c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e520:	89ab      	ldrh	r3, [r5, #12]
 800e522:	2b01      	cmp	r3, #1
 800e524:	d907      	bls.n	800e536 <_fwalk_reent+0x3a>
 800e526:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e52a:	3301      	adds	r3, #1
 800e52c:	d003      	beq.n	800e536 <_fwalk_reent+0x3a>
 800e52e:	4629      	mov	r1, r5
 800e530:	4630      	mov	r0, r6
 800e532:	47c0      	blx	r8
 800e534:	4307      	orrs	r7, r0
 800e536:	3568      	adds	r5, #104	; 0x68
 800e538:	e7e9      	b.n	800e50e <_fwalk_reent+0x12>

0800e53a <__retarget_lock_init_recursive>:
 800e53a:	4770      	bx	lr

0800e53c <__retarget_lock_acquire_recursive>:
 800e53c:	4770      	bx	lr

0800e53e <__retarget_lock_release_recursive>:
 800e53e:	4770      	bx	lr

0800e540 <__swhatbuf_r>:
 800e540:	b570      	push	{r4, r5, r6, lr}
 800e542:	460e      	mov	r6, r1
 800e544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e548:	2900      	cmp	r1, #0
 800e54a:	b096      	sub	sp, #88	; 0x58
 800e54c:	4614      	mov	r4, r2
 800e54e:	461d      	mov	r5, r3
 800e550:	da08      	bge.n	800e564 <__swhatbuf_r+0x24>
 800e552:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e556:	2200      	movs	r2, #0
 800e558:	602a      	str	r2, [r5, #0]
 800e55a:	061a      	lsls	r2, r3, #24
 800e55c:	d410      	bmi.n	800e580 <__swhatbuf_r+0x40>
 800e55e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e562:	e00e      	b.n	800e582 <__swhatbuf_r+0x42>
 800e564:	466a      	mov	r2, sp
 800e566:	f000 f951 	bl	800e80c <_fstat_r>
 800e56a:	2800      	cmp	r0, #0
 800e56c:	dbf1      	blt.n	800e552 <__swhatbuf_r+0x12>
 800e56e:	9a01      	ldr	r2, [sp, #4]
 800e570:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e574:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e578:	425a      	negs	r2, r3
 800e57a:	415a      	adcs	r2, r3
 800e57c:	602a      	str	r2, [r5, #0]
 800e57e:	e7ee      	b.n	800e55e <__swhatbuf_r+0x1e>
 800e580:	2340      	movs	r3, #64	; 0x40
 800e582:	2000      	movs	r0, #0
 800e584:	6023      	str	r3, [r4, #0]
 800e586:	b016      	add	sp, #88	; 0x58
 800e588:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e58c <__smakebuf_r>:
 800e58c:	898b      	ldrh	r3, [r1, #12]
 800e58e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e590:	079d      	lsls	r5, r3, #30
 800e592:	4606      	mov	r6, r0
 800e594:	460c      	mov	r4, r1
 800e596:	d507      	bpl.n	800e5a8 <__smakebuf_r+0x1c>
 800e598:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e59c:	6023      	str	r3, [r4, #0]
 800e59e:	6123      	str	r3, [r4, #16]
 800e5a0:	2301      	movs	r3, #1
 800e5a2:	6163      	str	r3, [r4, #20]
 800e5a4:	b002      	add	sp, #8
 800e5a6:	bd70      	pop	{r4, r5, r6, pc}
 800e5a8:	ab01      	add	r3, sp, #4
 800e5aa:	466a      	mov	r2, sp
 800e5ac:	f7ff ffc8 	bl	800e540 <__swhatbuf_r>
 800e5b0:	9900      	ldr	r1, [sp, #0]
 800e5b2:	4605      	mov	r5, r0
 800e5b4:	4630      	mov	r0, r6
 800e5b6:	f7ff f9db 	bl	800d970 <_malloc_r>
 800e5ba:	b948      	cbnz	r0, 800e5d0 <__smakebuf_r+0x44>
 800e5bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e5c0:	059a      	lsls	r2, r3, #22
 800e5c2:	d4ef      	bmi.n	800e5a4 <__smakebuf_r+0x18>
 800e5c4:	f023 0303 	bic.w	r3, r3, #3
 800e5c8:	f043 0302 	orr.w	r3, r3, #2
 800e5cc:	81a3      	strh	r3, [r4, #12]
 800e5ce:	e7e3      	b.n	800e598 <__smakebuf_r+0xc>
 800e5d0:	4b0d      	ldr	r3, [pc, #52]	; (800e608 <__smakebuf_r+0x7c>)
 800e5d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800e5d4:	89a3      	ldrh	r3, [r4, #12]
 800e5d6:	6020      	str	r0, [r4, #0]
 800e5d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e5dc:	81a3      	strh	r3, [r4, #12]
 800e5de:	9b00      	ldr	r3, [sp, #0]
 800e5e0:	6163      	str	r3, [r4, #20]
 800e5e2:	9b01      	ldr	r3, [sp, #4]
 800e5e4:	6120      	str	r0, [r4, #16]
 800e5e6:	b15b      	cbz	r3, 800e600 <__smakebuf_r+0x74>
 800e5e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e5ec:	4630      	mov	r0, r6
 800e5ee:	f000 f91f 	bl	800e830 <_isatty_r>
 800e5f2:	b128      	cbz	r0, 800e600 <__smakebuf_r+0x74>
 800e5f4:	89a3      	ldrh	r3, [r4, #12]
 800e5f6:	f023 0303 	bic.w	r3, r3, #3
 800e5fa:	f043 0301 	orr.w	r3, r3, #1
 800e5fe:	81a3      	strh	r3, [r4, #12]
 800e600:	89a0      	ldrh	r0, [r4, #12]
 800e602:	4305      	orrs	r5, r0
 800e604:	81a5      	strh	r5, [r4, #12]
 800e606:	e7cd      	b.n	800e5a4 <__smakebuf_r+0x18>
 800e608:	0800e399 	.word	0x0800e399

0800e60c <memmove>:
 800e60c:	4288      	cmp	r0, r1
 800e60e:	b510      	push	{r4, lr}
 800e610:	eb01 0402 	add.w	r4, r1, r2
 800e614:	d902      	bls.n	800e61c <memmove+0x10>
 800e616:	4284      	cmp	r4, r0
 800e618:	4623      	mov	r3, r4
 800e61a:	d807      	bhi.n	800e62c <memmove+0x20>
 800e61c:	1e43      	subs	r3, r0, #1
 800e61e:	42a1      	cmp	r1, r4
 800e620:	d008      	beq.n	800e634 <memmove+0x28>
 800e622:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e626:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e62a:	e7f8      	b.n	800e61e <memmove+0x12>
 800e62c:	4402      	add	r2, r0
 800e62e:	4601      	mov	r1, r0
 800e630:	428a      	cmp	r2, r1
 800e632:	d100      	bne.n	800e636 <memmove+0x2a>
 800e634:	bd10      	pop	{r4, pc}
 800e636:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e63a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e63e:	e7f7      	b.n	800e630 <memmove+0x24>

0800e640 <__malloc_lock>:
 800e640:	4801      	ldr	r0, [pc, #4]	; (800e648 <__malloc_lock+0x8>)
 800e642:	f7ff bf7b 	b.w	800e53c <__retarget_lock_acquire_recursive>
 800e646:	bf00      	nop
 800e648:	20000588 	.word	0x20000588

0800e64c <__malloc_unlock>:
 800e64c:	4801      	ldr	r0, [pc, #4]	; (800e654 <__malloc_unlock+0x8>)
 800e64e:	f7ff bf76 	b.w	800e53e <__retarget_lock_release_recursive>
 800e652:	bf00      	nop
 800e654:	20000588 	.word	0x20000588

0800e658 <_realloc_r>:
 800e658:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e65c:	4680      	mov	r8, r0
 800e65e:	4614      	mov	r4, r2
 800e660:	460e      	mov	r6, r1
 800e662:	b921      	cbnz	r1, 800e66e <_realloc_r+0x16>
 800e664:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e668:	4611      	mov	r1, r2
 800e66a:	f7ff b981 	b.w	800d970 <_malloc_r>
 800e66e:	b92a      	cbnz	r2, 800e67c <_realloc_r+0x24>
 800e670:	f7ff f912 	bl	800d898 <_free_r>
 800e674:	4625      	mov	r5, r4
 800e676:	4628      	mov	r0, r5
 800e678:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e67c:	f000 f8fa 	bl	800e874 <_malloc_usable_size_r>
 800e680:	4284      	cmp	r4, r0
 800e682:	4607      	mov	r7, r0
 800e684:	d802      	bhi.n	800e68c <_realloc_r+0x34>
 800e686:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e68a:	d812      	bhi.n	800e6b2 <_realloc_r+0x5a>
 800e68c:	4621      	mov	r1, r4
 800e68e:	4640      	mov	r0, r8
 800e690:	f7ff f96e 	bl	800d970 <_malloc_r>
 800e694:	4605      	mov	r5, r0
 800e696:	2800      	cmp	r0, #0
 800e698:	d0ed      	beq.n	800e676 <_realloc_r+0x1e>
 800e69a:	42bc      	cmp	r4, r7
 800e69c:	4622      	mov	r2, r4
 800e69e:	4631      	mov	r1, r6
 800e6a0:	bf28      	it	cs
 800e6a2:	463a      	movcs	r2, r7
 800e6a4:	f7fe fc12 	bl	800cecc <memcpy>
 800e6a8:	4631      	mov	r1, r6
 800e6aa:	4640      	mov	r0, r8
 800e6ac:	f7ff f8f4 	bl	800d898 <_free_r>
 800e6b0:	e7e1      	b.n	800e676 <_realloc_r+0x1e>
 800e6b2:	4635      	mov	r5, r6
 800e6b4:	e7df      	b.n	800e676 <_realloc_r+0x1e>

0800e6b6 <_raise_r>:
 800e6b6:	291f      	cmp	r1, #31
 800e6b8:	b538      	push	{r3, r4, r5, lr}
 800e6ba:	4604      	mov	r4, r0
 800e6bc:	460d      	mov	r5, r1
 800e6be:	d904      	bls.n	800e6ca <_raise_r+0x14>
 800e6c0:	2316      	movs	r3, #22
 800e6c2:	6003      	str	r3, [r0, #0]
 800e6c4:	f04f 30ff 	mov.w	r0, #4294967295
 800e6c8:	bd38      	pop	{r3, r4, r5, pc}
 800e6ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e6cc:	b112      	cbz	r2, 800e6d4 <_raise_r+0x1e>
 800e6ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e6d2:	b94b      	cbnz	r3, 800e6e8 <_raise_r+0x32>
 800e6d4:	4620      	mov	r0, r4
 800e6d6:	f000 f831 	bl	800e73c <_getpid_r>
 800e6da:	462a      	mov	r2, r5
 800e6dc:	4601      	mov	r1, r0
 800e6de:	4620      	mov	r0, r4
 800e6e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e6e4:	f000 b818 	b.w	800e718 <_kill_r>
 800e6e8:	2b01      	cmp	r3, #1
 800e6ea:	d00a      	beq.n	800e702 <_raise_r+0x4c>
 800e6ec:	1c59      	adds	r1, r3, #1
 800e6ee:	d103      	bne.n	800e6f8 <_raise_r+0x42>
 800e6f0:	2316      	movs	r3, #22
 800e6f2:	6003      	str	r3, [r0, #0]
 800e6f4:	2001      	movs	r0, #1
 800e6f6:	e7e7      	b.n	800e6c8 <_raise_r+0x12>
 800e6f8:	2400      	movs	r4, #0
 800e6fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e6fe:	4628      	mov	r0, r5
 800e700:	4798      	blx	r3
 800e702:	2000      	movs	r0, #0
 800e704:	e7e0      	b.n	800e6c8 <_raise_r+0x12>
	...

0800e708 <raise>:
 800e708:	4b02      	ldr	r3, [pc, #8]	; (800e714 <raise+0xc>)
 800e70a:	4601      	mov	r1, r0
 800e70c:	6818      	ldr	r0, [r3, #0]
 800e70e:	f7ff bfd2 	b.w	800e6b6 <_raise_r>
 800e712:	bf00      	nop
 800e714:	20000020 	.word	0x20000020

0800e718 <_kill_r>:
 800e718:	b538      	push	{r3, r4, r5, lr}
 800e71a:	4d07      	ldr	r5, [pc, #28]	; (800e738 <_kill_r+0x20>)
 800e71c:	2300      	movs	r3, #0
 800e71e:	4604      	mov	r4, r0
 800e720:	4608      	mov	r0, r1
 800e722:	4611      	mov	r1, r2
 800e724:	602b      	str	r3, [r5, #0]
 800e726:	f7f7 fff5 	bl	8006714 <_kill>
 800e72a:	1c43      	adds	r3, r0, #1
 800e72c:	d102      	bne.n	800e734 <_kill_r+0x1c>
 800e72e:	682b      	ldr	r3, [r5, #0]
 800e730:	b103      	cbz	r3, 800e734 <_kill_r+0x1c>
 800e732:	6023      	str	r3, [r4, #0]
 800e734:	bd38      	pop	{r3, r4, r5, pc}
 800e736:	bf00      	nop
 800e738:	2000058c 	.word	0x2000058c

0800e73c <_getpid_r>:
 800e73c:	f7f7 bfe2 	b.w	8006704 <_getpid>

0800e740 <__sread>:
 800e740:	b510      	push	{r4, lr}
 800e742:	460c      	mov	r4, r1
 800e744:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e748:	f000 f89c 	bl	800e884 <_read_r>
 800e74c:	2800      	cmp	r0, #0
 800e74e:	bfab      	itete	ge
 800e750:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e752:	89a3      	ldrhlt	r3, [r4, #12]
 800e754:	181b      	addge	r3, r3, r0
 800e756:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e75a:	bfac      	ite	ge
 800e75c:	6563      	strge	r3, [r4, #84]	; 0x54
 800e75e:	81a3      	strhlt	r3, [r4, #12]
 800e760:	bd10      	pop	{r4, pc}

0800e762 <__swrite>:
 800e762:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e766:	461f      	mov	r7, r3
 800e768:	898b      	ldrh	r3, [r1, #12]
 800e76a:	05db      	lsls	r3, r3, #23
 800e76c:	4605      	mov	r5, r0
 800e76e:	460c      	mov	r4, r1
 800e770:	4616      	mov	r6, r2
 800e772:	d505      	bpl.n	800e780 <__swrite+0x1e>
 800e774:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e778:	2302      	movs	r3, #2
 800e77a:	2200      	movs	r2, #0
 800e77c:	f000 f868 	bl	800e850 <_lseek_r>
 800e780:	89a3      	ldrh	r3, [r4, #12]
 800e782:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e786:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e78a:	81a3      	strh	r3, [r4, #12]
 800e78c:	4632      	mov	r2, r6
 800e78e:	463b      	mov	r3, r7
 800e790:	4628      	mov	r0, r5
 800e792:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e796:	f000 b817 	b.w	800e7c8 <_write_r>

0800e79a <__sseek>:
 800e79a:	b510      	push	{r4, lr}
 800e79c:	460c      	mov	r4, r1
 800e79e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7a2:	f000 f855 	bl	800e850 <_lseek_r>
 800e7a6:	1c43      	adds	r3, r0, #1
 800e7a8:	89a3      	ldrh	r3, [r4, #12]
 800e7aa:	bf15      	itete	ne
 800e7ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800e7ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e7b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e7b6:	81a3      	strheq	r3, [r4, #12]
 800e7b8:	bf18      	it	ne
 800e7ba:	81a3      	strhne	r3, [r4, #12]
 800e7bc:	bd10      	pop	{r4, pc}

0800e7be <__sclose>:
 800e7be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7c2:	f000 b813 	b.w	800e7ec <_close_r>
	...

0800e7c8 <_write_r>:
 800e7c8:	b538      	push	{r3, r4, r5, lr}
 800e7ca:	4d07      	ldr	r5, [pc, #28]	; (800e7e8 <_write_r+0x20>)
 800e7cc:	4604      	mov	r4, r0
 800e7ce:	4608      	mov	r0, r1
 800e7d0:	4611      	mov	r1, r2
 800e7d2:	2200      	movs	r2, #0
 800e7d4:	602a      	str	r2, [r5, #0]
 800e7d6:	461a      	mov	r2, r3
 800e7d8:	f7f7 ffd3 	bl	8006782 <_write>
 800e7dc:	1c43      	adds	r3, r0, #1
 800e7de:	d102      	bne.n	800e7e6 <_write_r+0x1e>
 800e7e0:	682b      	ldr	r3, [r5, #0]
 800e7e2:	b103      	cbz	r3, 800e7e6 <_write_r+0x1e>
 800e7e4:	6023      	str	r3, [r4, #0]
 800e7e6:	bd38      	pop	{r3, r4, r5, pc}
 800e7e8:	2000058c 	.word	0x2000058c

0800e7ec <_close_r>:
 800e7ec:	b538      	push	{r3, r4, r5, lr}
 800e7ee:	4d06      	ldr	r5, [pc, #24]	; (800e808 <_close_r+0x1c>)
 800e7f0:	2300      	movs	r3, #0
 800e7f2:	4604      	mov	r4, r0
 800e7f4:	4608      	mov	r0, r1
 800e7f6:	602b      	str	r3, [r5, #0]
 800e7f8:	f7f7 ffdf 	bl	80067ba <_close>
 800e7fc:	1c43      	adds	r3, r0, #1
 800e7fe:	d102      	bne.n	800e806 <_close_r+0x1a>
 800e800:	682b      	ldr	r3, [r5, #0]
 800e802:	b103      	cbz	r3, 800e806 <_close_r+0x1a>
 800e804:	6023      	str	r3, [r4, #0]
 800e806:	bd38      	pop	{r3, r4, r5, pc}
 800e808:	2000058c 	.word	0x2000058c

0800e80c <_fstat_r>:
 800e80c:	b538      	push	{r3, r4, r5, lr}
 800e80e:	4d07      	ldr	r5, [pc, #28]	; (800e82c <_fstat_r+0x20>)
 800e810:	2300      	movs	r3, #0
 800e812:	4604      	mov	r4, r0
 800e814:	4608      	mov	r0, r1
 800e816:	4611      	mov	r1, r2
 800e818:	602b      	str	r3, [r5, #0]
 800e81a:	f7f7 ffda 	bl	80067d2 <_fstat>
 800e81e:	1c43      	adds	r3, r0, #1
 800e820:	d102      	bne.n	800e828 <_fstat_r+0x1c>
 800e822:	682b      	ldr	r3, [r5, #0]
 800e824:	b103      	cbz	r3, 800e828 <_fstat_r+0x1c>
 800e826:	6023      	str	r3, [r4, #0]
 800e828:	bd38      	pop	{r3, r4, r5, pc}
 800e82a:	bf00      	nop
 800e82c:	2000058c 	.word	0x2000058c

0800e830 <_isatty_r>:
 800e830:	b538      	push	{r3, r4, r5, lr}
 800e832:	4d06      	ldr	r5, [pc, #24]	; (800e84c <_isatty_r+0x1c>)
 800e834:	2300      	movs	r3, #0
 800e836:	4604      	mov	r4, r0
 800e838:	4608      	mov	r0, r1
 800e83a:	602b      	str	r3, [r5, #0]
 800e83c:	f7f7 ffd9 	bl	80067f2 <_isatty>
 800e840:	1c43      	adds	r3, r0, #1
 800e842:	d102      	bne.n	800e84a <_isatty_r+0x1a>
 800e844:	682b      	ldr	r3, [r5, #0]
 800e846:	b103      	cbz	r3, 800e84a <_isatty_r+0x1a>
 800e848:	6023      	str	r3, [r4, #0]
 800e84a:	bd38      	pop	{r3, r4, r5, pc}
 800e84c:	2000058c 	.word	0x2000058c

0800e850 <_lseek_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4d07      	ldr	r5, [pc, #28]	; (800e870 <_lseek_r+0x20>)
 800e854:	4604      	mov	r4, r0
 800e856:	4608      	mov	r0, r1
 800e858:	4611      	mov	r1, r2
 800e85a:	2200      	movs	r2, #0
 800e85c:	602a      	str	r2, [r5, #0]
 800e85e:	461a      	mov	r2, r3
 800e860:	f7f7 ffd2 	bl	8006808 <_lseek>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_lseek_r+0x1e>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_lseek_r+0x1e>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	2000058c 	.word	0x2000058c

0800e874 <_malloc_usable_size_r>:
 800e874:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e878:	1f18      	subs	r0, r3, #4
 800e87a:	2b00      	cmp	r3, #0
 800e87c:	bfbc      	itt	lt
 800e87e:	580b      	ldrlt	r3, [r1, r0]
 800e880:	18c0      	addlt	r0, r0, r3
 800e882:	4770      	bx	lr

0800e884 <_read_r>:
 800e884:	b538      	push	{r3, r4, r5, lr}
 800e886:	4d07      	ldr	r5, [pc, #28]	; (800e8a4 <_read_r+0x20>)
 800e888:	4604      	mov	r4, r0
 800e88a:	4608      	mov	r0, r1
 800e88c:	4611      	mov	r1, r2
 800e88e:	2200      	movs	r2, #0
 800e890:	602a      	str	r2, [r5, #0]
 800e892:	461a      	mov	r2, r3
 800e894:	f7f7 ff58 	bl	8006748 <_read>
 800e898:	1c43      	adds	r3, r0, #1
 800e89a:	d102      	bne.n	800e8a2 <_read_r+0x1e>
 800e89c:	682b      	ldr	r3, [r5, #0]
 800e89e:	b103      	cbz	r3, 800e8a2 <_read_r+0x1e>
 800e8a0:	6023      	str	r3, [r4, #0]
 800e8a2:	bd38      	pop	{r3, r4, r5, pc}
 800e8a4:	2000058c 	.word	0x2000058c

0800e8a8 <pow>:
 800e8a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e8aa:	ed2d 8b02 	vpush	{d8}
 800e8ae:	eeb0 8a40 	vmov.f32	s16, s0
 800e8b2:	eef0 8a60 	vmov.f32	s17, s1
 800e8b6:	ec55 4b11 	vmov	r4, r5, d1
 800e8ba:	f000 f891 	bl	800e9e0 <__ieee754_pow>
 800e8be:	4622      	mov	r2, r4
 800e8c0:	462b      	mov	r3, r5
 800e8c2:	4620      	mov	r0, r4
 800e8c4:	4629      	mov	r1, r5
 800e8c6:	ec57 6b10 	vmov	r6, r7, d0
 800e8ca:	f7f2 f92f 	bl	8000b2c <__aeabi_dcmpun>
 800e8ce:	2800      	cmp	r0, #0
 800e8d0:	d13b      	bne.n	800e94a <pow+0xa2>
 800e8d2:	ec51 0b18 	vmov	r0, r1, d8
 800e8d6:	2200      	movs	r2, #0
 800e8d8:	2300      	movs	r3, #0
 800e8da:	f7f2 f8f5 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8de:	b1b8      	cbz	r0, 800e910 <pow+0x68>
 800e8e0:	2200      	movs	r2, #0
 800e8e2:	2300      	movs	r3, #0
 800e8e4:	4620      	mov	r0, r4
 800e8e6:	4629      	mov	r1, r5
 800e8e8:	f7f2 f8ee 	bl	8000ac8 <__aeabi_dcmpeq>
 800e8ec:	2800      	cmp	r0, #0
 800e8ee:	d146      	bne.n	800e97e <pow+0xd6>
 800e8f0:	ec45 4b10 	vmov	d0, r4, r5
 800e8f4:	f000 fe8d 	bl	800f612 <finite>
 800e8f8:	b338      	cbz	r0, 800e94a <pow+0xa2>
 800e8fa:	2200      	movs	r2, #0
 800e8fc:	2300      	movs	r3, #0
 800e8fe:	4620      	mov	r0, r4
 800e900:	4629      	mov	r1, r5
 800e902:	f7f2 f8eb 	bl	8000adc <__aeabi_dcmplt>
 800e906:	b300      	cbz	r0, 800e94a <pow+0xa2>
 800e908:	f7fb fabe 	bl	8009e88 <__errno>
 800e90c:	2322      	movs	r3, #34	; 0x22
 800e90e:	e01b      	b.n	800e948 <pow+0xa0>
 800e910:	ec47 6b10 	vmov	d0, r6, r7
 800e914:	f000 fe7d 	bl	800f612 <finite>
 800e918:	b9e0      	cbnz	r0, 800e954 <pow+0xac>
 800e91a:	eeb0 0a48 	vmov.f32	s0, s16
 800e91e:	eef0 0a68 	vmov.f32	s1, s17
 800e922:	f000 fe76 	bl	800f612 <finite>
 800e926:	b1a8      	cbz	r0, 800e954 <pow+0xac>
 800e928:	ec45 4b10 	vmov	d0, r4, r5
 800e92c:	f000 fe71 	bl	800f612 <finite>
 800e930:	b180      	cbz	r0, 800e954 <pow+0xac>
 800e932:	4632      	mov	r2, r6
 800e934:	463b      	mov	r3, r7
 800e936:	4630      	mov	r0, r6
 800e938:	4639      	mov	r1, r7
 800e93a:	f7f2 f8f7 	bl	8000b2c <__aeabi_dcmpun>
 800e93e:	2800      	cmp	r0, #0
 800e940:	d0e2      	beq.n	800e908 <pow+0x60>
 800e942:	f7fb faa1 	bl	8009e88 <__errno>
 800e946:	2321      	movs	r3, #33	; 0x21
 800e948:	6003      	str	r3, [r0, #0]
 800e94a:	ecbd 8b02 	vpop	{d8}
 800e94e:	ec47 6b10 	vmov	d0, r6, r7
 800e952:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e954:	2200      	movs	r2, #0
 800e956:	2300      	movs	r3, #0
 800e958:	4630      	mov	r0, r6
 800e95a:	4639      	mov	r1, r7
 800e95c:	f7f2 f8b4 	bl	8000ac8 <__aeabi_dcmpeq>
 800e960:	2800      	cmp	r0, #0
 800e962:	d0f2      	beq.n	800e94a <pow+0xa2>
 800e964:	eeb0 0a48 	vmov.f32	s0, s16
 800e968:	eef0 0a68 	vmov.f32	s1, s17
 800e96c:	f000 fe51 	bl	800f612 <finite>
 800e970:	2800      	cmp	r0, #0
 800e972:	d0ea      	beq.n	800e94a <pow+0xa2>
 800e974:	ec45 4b10 	vmov	d0, r4, r5
 800e978:	f000 fe4b 	bl	800f612 <finite>
 800e97c:	e7c3      	b.n	800e906 <pow+0x5e>
 800e97e:	4f01      	ldr	r7, [pc, #4]	; (800e984 <pow+0xdc>)
 800e980:	2600      	movs	r6, #0
 800e982:	e7e2      	b.n	800e94a <pow+0xa2>
 800e984:	3ff00000 	.word	0x3ff00000

0800e988 <sqrt>:
 800e988:	b538      	push	{r3, r4, r5, lr}
 800e98a:	ed2d 8b02 	vpush	{d8}
 800e98e:	ec55 4b10 	vmov	r4, r5, d0
 800e992:	f000 fd53 	bl	800f43c <__ieee754_sqrt>
 800e996:	4622      	mov	r2, r4
 800e998:	462b      	mov	r3, r5
 800e99a:	4620      	mov	r0, r4
 800e99c:	4629      	mov	r1, r5
 800e99e:	eeb0 8a40 	vmov.f32	s16, s0
 800e9a2:	eef0 8a60 	vmov.f32	s17, s1
 800e9a6:	f7f2 f8c1 	bl	8000b2c <__aeabi_dcmpun>
 800e9aa:	b990      	cbnz	r0, 800e9d2 <sqrt+0x4a>
 800e9ac:	2200      	movs	r2, #0
 800e9ae:	2300      	movs	r3, #0
 800e9b0:	4620      	mov	r0, r4
 800e9b2:	4629      	mov	r1, r5
 800e9b4:	f7f2 f892 	bl	8000adc <__aeabi_dcmplt>
 800e9b8:	b158      	cbz	r0, 800e9d2 <sqrt+0x4a>
 800e9ba:	f7fb fa65 	bl	8009e88 <__errno>
 800e9be:	2321      	movs	r3, #33	; 0x21
 800e9c0:	6003      	str	r3, [r0, #0]
 800e9c2:	2200      	movs	r2, #0
 800e9c4:	2300      	movs	r3, #0
 800e9c6:	4610      	mov	r0, r2
 800e9c8:	4619      	mov	r1, r3
 800e9ca:	f7f1 ff3f 	bl	800084c <__aeabi_ddiv>
 800e9ce:	ec41 0b18 	vmov	d8, r0, r1
 800e9d2:	eeb0 0a48 	vmov.f32	s0, s16
 800e9d6:	eef0 0a68 	vmov.f32	s1, s17
 800e9da:	ecbd 8b02 	vpop	{d8}
 800e9de:	bd38      	pop	{r3, r4, r5, pc}

0800e9e0 <__ieee754_pow>:
 800e9e0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e9e4:	ed2d 8b06 	vpush	{d8-d10}
 800e9e8:	b089      	sub	sp, #36	; 0x24
 800e9ea:	ed8d 1b00 	vstr	d1, [sp]
 800e9ee:	e9dd 2900 	ldrd	r2, r9, [sp]
 800e9f2:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800e9f6:	ea58 0102 	orrs.w	r1, r8, r2
 800e9fa:	ec57 6b10 	vmov	r6, r7, d0
 800e9fe:	d115      	bne.n	800ea2c <__ieee754_pow+0x4c>
 800ea00:	19b3      	adds	r3, r6, r6
 800ea02:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ea06:	4152      	adcs	r2, r2
 800ea08:	4299      	cmp	r1, r3
 800ea0a:	4b89      	ldr	r3, [pc, #548]	; (800ec30 <__ieee754_pow+0x250>)
 800ea0c:	4193      	sbcs	r3, r2
 800ea0e:	f080 84d2 	bcs.w	800f3b6 <__ieee754_pow+0x9d6>
 800ea12:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea16:	4630      	mov	r0, r6
 800ea18:	4639      	mov	r1, r7
 800ea1a:	f7f1 fc37 	bl	800028c <__adddf3>
 800ea1e:	ec41 0b10 	vmov	d0, r0, r1
 800ea22:	b009      	add	sp, #36	; 0x24
 800ea24:	ecbd 8b06 	vpop	{d8-d10}
 800ea28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ea2c:	4b81      	ldr	r3, [pc, #516]	; (800ec34 <__ieee754_pow+0x254>)
 800ea2e:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800ea32:	429c      	cmp	r4, r3
 800ea34:	ee10 aa10 	vmov	sl, s0
 800ea38:	463d      	mov	r5, r7
 800ea3a:	dc06      	bgt.n	800ea4a <__ieee754_pow+0x6a>
 800ea3c:	d101      	bne.n	800ea42 <__ieee754_pow+0x62>
 800ea3e:	2e00      	cmp	r6, #0
 800ea40:	d1e7      	bne.n	800ea12 <__ieee754_pow+0x32>
 800ea42:	4598      	cmp	r8, r3
 800ea44:	dc01      	bgt.n	800ea4a <__ieee754_pow+0x6a>
 800ea46:	d10f      	bne.n	800ea68 <__ieee754_pow+0x88>
 800ea48:	b172      	cbz	r2, 800ea68 <__ieee754_pow+0x88>
 800ea4a:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ea4e:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800ea52:	ea55 050a 	orrs.w	r5, r5, sl
 800ea56:	d1dc      	bne.n	800ea12 <__ieee754_pow+0x32>
 800ea58:	e9dd 3200 	ldrd	r3, r2, [sp]
 800ea5c:	18db      	adds	r3, r3, r3
 800ea5e:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800ea62:	4152      	adcs	r2, r2
 800ea64:	429d      	cmp	r5, r3
 800ea66:	e7d0      	b.n	800ea0a <__ieee754_pow+0x2a>
 800ea68:	2d00      	cmp	r5, #0
 800ea6a:	da3b      	bge.n	800eae4 <__ieee754_pow+0x104>
 800ea6c:	4b72      	ldr	r3, [pc, #456]	; (800ec38 <__ieee754_pow+0x258>)
 800ea6e:	4598      	cmp	r8, r3
 800ea70:	dc51      	bgt.n	800eb16 <__ieee754_pow+0x136>
 800ea72:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800ea76:	4598      	cmp	r8, r3
 800ea78:	f340 84ac 	ble.w	800f3d4 <__ieee754_pow+0x9f4>
 800ea7c:	ea4f 5328 	mov.w	r3, r8, asr #20
 800ea80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ea84:	2b14      	cmp	r3, #20
 800ea86:	dd0f      	ble.n	800eaa8 <__ieee754_pow+0xc8>
 800ea88:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800ea8c:	fa22 f103 	lsr.w	r1, r2, r3
 800ea90:	fa01 f303 	lsl.w	r3, r1, r3
 800ea94:	4293      	cmp	r3, r2
 800ea96:	f040 849d 	bne.w	800f3d4 <__ieee754_pow+0x9f4>
 800ea9a:	f001 0101 	and.w	r1, r1, #1
 800ea9e:	f1c1 0302 	rsb	r3, r1, #2
 800eaa2:	9304      	str	r3, [sp, #16]
 800eaa4:	b182      	cbz	r2, 800eac8 <__ieee754_pow+0xe8>
 800eaa6:	e05f      	b.n	800eb68 <__ieee754_pow+0x188>
 800eaa8:	2a00      	cmp	r2, #0
 800eaaa:	d15b      	bne.n	800eb64 <__ieee754_pow+0x184>
 800eaac:	f1c3 0314 	rsb	r3, r3, #20
 800eab0:	fa48 f103 	asr.w	r1, r8, r3
 800eab4:	fa01 f303 	lsl.w	r3, r1, r3
 800eab8:	4543      	cmp	r3, r8
 800eaba:	f040 8488 	bne.w	800f3ce <__ieee754_pow+0x9ee>
 800eabe:	f001 0101 	and.w	r1, r1, #1
 800eac2:	f1c1 0302 	rsb	r3, r1, #2
 800eac6:	9304      	str	r3, [sp, #16]
 800eac8:	4b5c      	ldr	r3, [pc, #368]	; (800ec3c <__ieee754_pow+0x25c>)
 800eaca:	4598      	cmp	r8, r3
 800eacc:	d132      	bne.n	800eb34 <__ieee754_pow+0x154>
 800eace:	f1b9 0f00 	cmp.w	r9, #0
 800ead2:	f280 8478 	bge.w	800f3c6 <__ieee754_pow+0x9e6>
 800ead6:	4959      	ldr	r1, [pc, #356]	; (800ec3c <__ieee754_pow+0x25c>)
 800ead8:	4632      	mov	r2, r6
 800eada:	463b      	mov	r3, r7
 800eadc:	2000      	movs	r0, #0
 800eade:	f7f1 feb5 	bl	800084c <__aeabi_ddiv>
 800eae2:	e79c      	b.n	800ea1e <__ieee754_pow+0x3e>
 800eae4:	2300      	movs	r3, #0
 800eae6:	9304      	str	r3, [sp, #16]
 800eae8:	2a00      	cmp	r2, #0
 800eaea:	d13d      	bne.n	800eb68 <__ieee754_pow+0x188>
 800eaec:	4b51      	ldr	r3, [pc, #324]	; (800ec34 <__ieee754_pow+0x254>)
 800eaee:	4598      	cmp	r8, r3
 800eaf0:	d1ea      	bne.n	800eac8 <__ieee754_pow+0xe8>
 800eaf2:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800eaf6:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800eafa:	ea53 030a 	orrs.w	r3, r3, sl
 800eafe:	f000 845a 	beq.w	800f3b6 <__ieee754_pow+0x9d6>
 800eb02:	4b4f      	ldr	r3, [pc, #316]	; (800ec40 <__ieee754_pow+0x260>)
 800eb04:	429c      	cmp	r4, r3
 800eb06:	dd08      	ble.n	800eb1a <__ieee754_pow+0x13a>
 800eb08:	f1b9 0f00 	cmp.w	r9, #0
 800eb0c:	f2c0 8457 	blt.w	800f3be <__ieee754_pow+0x9de>
 800eb10:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb14:	e783      	b.n	800ea1e <__ieee754_pow+0x3e>
 800eb16:	2302      	movs	r3, #2
 800eb18:	e7e5      	b.n	800eae6 <__ieee754_pow+0x106>
 800eb1a:	f1b9 0f00 	cmp.w	r9, #0
 800eb1e:	f04f 0000 	mov.w	r0, #0
 800eb22:	f04f 0100 	mov.w	r1, #0
 800eb26:	f6bf af7a 	bge.w	800ea1e <__ieee754_pow+0x3e>
 800eb2a:	e9dd 0300 	ldrd	r0, r3, [sp]
 800eb2e:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800eb32:	e774      	b.n	800ea1e <__ieee754_pow+0x3e>
 800eb34:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800eb38:	d106      	bne.n	800eb48 <__ieee754_pow+0x168>
 800eb3a:	4632      	mov	r2, r6
 800eb3c:	463b      	mov	r3, r7
 800eb3e:	4630      	mov	r0, r6
 800eb40:	4639      	mov	r1, r7
 800eb42:	f7f1 fd59 	bl	80005f8 <__aeabi_dmul>
 800eb46:	e76a      	b.n	800ea1e <__ieee754_pow+0x3e>
 800eb48:	4b3e      	ldr	r3, [pc, #248]	; (800ec44 <__ieee754_pow+0x264>)
 800eb4a:	4599      	cmp	r9, r3
 800eb4c:	d10c      	bne.n	800eb68 <__ieee754_pow+0x188>
 800eb4e:	2d00      	cmp	r5, #0
 800eb50:	db0a      	blt.n	800eb68 <__ieee754_pow+0x188>
 800eb52:	ec47 6b10 	vmov	d0, r6, r7
 800eb56:	b009      	add	sp, #36	; 0x24
 800eb58:	ecbd 8b06 	vpop	{d8-d10}
 800eb5c:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb60:	f000 bc6c 	b.w	800f43c <__ieee754_sqrt>
 800eb64:	2300      	movs	r3, #0
 800eb66:	9304      	str	r3, [sp, #16]
 800eb68:	ec47 6b10 	vmov	d0, r6, r7
 800eb6c:	f000 fd48 	bl	800f600 <fabs>
 800eb70:	ec51 0b10 	vmov	r0, r1, d0
 800eb74:	f1ba 0f00 	cmp.w	sl, #0
 800eb78:	d129      	bne.n	800ebce <__ieee754_pow+0x1ee>
 800eb7a:	b124      	cbz	r4, 800eb86 <__ieee754_pow+0x1a6>
 800eb7c:	4b2f      	ldr	r3, [pc, #188]	; (800ec3c <__ieee754_pow+0x25c>)
 800eb7e:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800eb82:	429a      	cmp	r2, r3
 800eb84:	d123      	bne.n	800ebce <__ieee754_pow+0x1ee>
 800eb86:	f1b9 0f00 	cmp.w	r9, #0
 800eb8a:	da05      	bge.n	800eb98 <__ieee754_pow+0x1b8>
 800eb8c:	4602      	mov	r2, r0
 800eb8e:	460b      	mov	r3, r1
 800eb90:	2000      	movs	r0, #0
 800eb92:	492a      	ldr	r1, [pc, #168]	; (800ec3c <__ieee754_pow+0x25c>)
 800eb94:	f7f1 fe5a 	bl	800084c <__aeabi_ddiv>
 800eb98:	2d00      	cmp	r5, #0
 800eb9a:	f6bf af40 	bge.w	800ea1e <__ieee754_pow+0x3e>
 800eb9e:	9b04      	ldr	r3, [sp, #16]
 800eba0:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800eba4:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800eba8:	4323      	orrs	r3, r4
 800ebaa:	d108      	bne.n	800ebbe <__ieee754_pow+0x1de>
 800ebac:	4602      	mov	r2, r0
 800ebae:	460b      	mov	r3, r1
 800ebb0:	4610      	mov	r0, r2
 800ebb2:	4619      	mov	r1, r3
 800ebb4:	f7f1 fb68 	bl	8000288 <__aeabi_dsub>
 800ebb8:	4602      	mov	r2, r0
 800ebba:	460b      	mov	r3, r1
 800ebbc:	e78f      	b.n	800eade <__ieee754_pow+0xfe>
 800ebbe:	9b04      	ldr	r3, [sp, #16]
 800ebc0:	2b01      	cmp	r3, #1
 800ebc2:	f47f af2c 	bne.w	800ea1e <__ieee754_pow+0x3e>
 800ebc6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ebca:	4619      	mov	r1, r3
 800ebcc:	e727      	b.n	800ea1e <__ieee754_pow+0x3e>
 800ebce:	0feb      	lsrs	r3, r5, #31
 800ebd0:	3b01      	subs	r3, #1
 800ebd2:	9306      	str	r3, [sp, #24]
 800ebd4:	9a06      	ldr	r2, [sp, #24]
 800ebd6:	9b04      	ldr	r3, [sp, #16]
 800ebd8:	4313      	orrs	r3, r2
 800ebda:	d102      	bne.n	800ebe2 <__ieee754_pow+0x202>
 800ebdc:	4632      	mov	r2, r6
 800ebde:	463b      	mov	r3, r7
 800ebe0:	e7e6      	b.n	800ebb0 <__ieee754_pow+0x1d0>
 800ebe2:	4b19      	ldr	r3, [pc, #100]	; (800ec48 <__ieee754_pow+0x268>)
 800ebe4:	4598      	cmp	r8, r3
 800ebe6:	f340 80fb 	ble.w	800ede0 <__ieee754_pow+0x400>
 800ebea:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ebee:	4598      	cmp	r8, r3
 800ebf0:	4b13      	ldr	r3, [pc, #76]	; (800ec40 <__ieee754_pow+0x260>)
 800ebf2:	dd0c      	ble.n	800ec0e <__ieee754_pow+0x22e>
 800ebf4:	429c      	cmp	r4, r3
 800ebf6:	dc0f      	bgt.n	800ec18 <__ieee754_pow+0x238>
 800ebf8:	f1b9 0f00 	cmp.w	r9, #0
 800ebfc:	da0f      	bge.n	800ec1e <__ieee754_pow+0x23e>
 800ebfe:	2000      	movs	r0, #0
 800ec00:	b009      	add	sp, #36	; 0x24
 800ec02:	ecbd 8b06 	vpop	{d8-d10}
 800ec06:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec0a:	f000 bcf0 	b.w	800f5ee <__math_oflow>
 800ec0e:	429c      	cmp	r4, r3
 800ec10:	dbf2      	blt.n	800ebf8 <__ieee754_pow+0x218>
 800ec12:	4b0a      	ldr	r3, [pc, #40]	; (800ec3c <__ieee754_pow+0x25c>)
 800ec14:	429c      	cmp	r4, r3
 800ec16:	dd19      	ble.n	800ec4c <__ieee754_pow+0x26c>
 800ec18:	f1b9 0f00 	cmp.w	r9, #0
 800ec1c:	dcef      	bgt.n	800ebfe <__ieee754_pow+0x21e>
 800ec1e:	2000      	movs	r0, #0
 800ec20:	b009      	add	sp, #36	; 0x24
 800ec22:	ecbd 8b06 	vpop	{d8-d10}
 800ec26:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec2a:	f000 bcd7 	b.w	800f5dc <__math_uflow>
 800ec2e:	bf00      	nop
 800ec30:	fff00000 	.word	0xfff00000
 800ec34:	7ff00000 	.word	0x7ff00000
 800ec38:	433fffff 	.word	0x433fffff
 800ec3c:	3ff00000 	.word	0x3ff00000
 800ec40:	3fefffff 	.word	0x3fefffff
 800ec44:	3fe00000 	.word	0x3fe00000
 800ec48:	41e00000 	.word	0x41e00000
 800ec4c:	4b60      	ldr	r3, [pc, #384]	; (800edd0 <__ieee754_pow+0x3f0>)
 800ec4e:	2200      	movs	r2, #0
 800ec50:	f7f1 fb1a 	bl	8000288 <__aeabi_dsub>
 800ec54:	a354      	add	r3, pc, #336	; (adr r3, 800eda8 <__ieee754_pow+0x3c8>)
 800ec56:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec5a:	4604      	mov	r4, r0
 800ec5c:	460d      	mov	r5, r1
 800ec5e:	f7f1 fccb 	bl	80005f8 <__aeabi_dmul>
 800ec62:	a353      	add	r3, pc, #332	; (adr r3, 800edb0 <__ieee754_pow+0x3d0>)
 800ec64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ec68:	4606      	mov	r6, r0
 800ec6a:	460f      	mov	r7, r1
 800ec6c:	4620      	mov	r0, r4
 800ec6e:	4629      	mov	r1, r5
 800ec70:	f7f1 fcc2 	bl	80005f8 <__aeabi_dmul>
 800ec74:	4b57      	ldr	r3, [pc, #348]	; (800edd4 <__ieee754_pow+0x3f4>)
 800ec76:	4682      	mov	sl, r0
 800ec78:	468b      	mov	fp, r1
 800ec7a:	2200      	movs	r2, #0
 800ec7c:	4620      	mov	r0, r4
 800ec7e:	4629      	mov	r1, r5
 800ec80:	f7f1 fcba 	bl	80005f8 <__aeabi_dmul>
 800ec84:	4602      	mov	r2, r0
 800ec86:	460b      	mov	r3, r1
 800ec88:	a14b      	add	r1, pc, #300	; (adr r1, 800edb8 <__ieee754_pow+0x3d8>)
 800ec8a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ec8e:	f7f1 fafb 	bl	8000288 <__aeabi_dsub>
 800ec92:	4622      	mov	r2, r4
 800ec94:	462b      	mov	r3, r5
 800ec96:	f7f1 fcaf 	bl	80005f8 <__aeabi_dmul>
 800ec9a:	4602      	mov	r2, r0
 800ec9c:	460b      	mov	r3, r1
 800ec9e:	2000      	movs	r0, #0
 800eca0:	494d      	ldr	r1, [pc, #308]	; (800edd8 <__ieee754_pow+0x3f8>)
 800eca2:	f7f1 faf1 	bl	8000288 <__aeabi_dsub>
 800eca6:	4622      	mov	r2, r4
 800eca8:	4680      	mov	r8, r0
 800ecaa:	4689      	mov	r9, r1
 800ecac:	462b      	mov	r3, r5
 800ecae:	4620      	mov	r0, r4
 800ecb0:	4629      	mov	r1, r5
 800ecb2:	f7f1 fca1 	bl	80005f8 <__aeabi_dmul>
 800ecb6:	4602      	mov	r2, r0
 800ecb8:	460b      	mov	r3, r1
 800ecba:	4640      	mov	r0, r8
 800ecbc:	4649      	mov	r1, r9
 800ecbe:	f7f1 fc9b 	bl	80005f8 <__aeabi_dmul>
 800ecc2:	a33f      	add	r3, pc, #252	; (adr r3, 800edc0 <__ieee754_pow+0x3e0>)
 800ecc4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecc8:	f7f1 fc96 	bl	80005f8 <__aeabi_dmul>
 800eccc:	4602      	mov	r2, r0
 800ecce:	460b      	mov	r3, r1
 800ecd0:	4650      	mov	r0, sl
 800ecd2:	4659      	mov	r1, fp
 800ecd4:	f7f1 fad8 	bl	8000288 <__aeabi_dsub>
 800ecd8:	4602      	mov	r2, r0
 800ecda:	460b      	mov	r3, r1
 800ecdc:	4680      	mov	r8, r0
 800ecde:	4689      	mov	r9, r1
 800ece0:	4630      	mov	r0, r6
 800ece2:	4639      	mov	r1, r7
 800ece4:	f7f1 fad2 	bl	800028c <__adddf3>
 800ece8:	2000      	movs	r0, #0
 800ecea:	4632      	mov	r2, r6
 800ecec:	463b      	mov	r3, r7
 800ecee:	4604      	mov	r4, r0
 800ecf0:	460d      	mov	r5, r1
 800ecf2:	f7f1 fac9 	bl	8000288 <__aeabi_dsub>
 800ecf6:	4602      	mov	r2, r0
 800ecf8:	460b      	mov	r3, r1
 800ecfa:	4640      	mov	r0, r8
 800ecfc:	4649      	mov	r1, r9
 800ecfe:	f7f1 fac3 	bl	8000288 <__aeabi_dsub>
 800ed02:	9b04      	ldr	r3, [sp, #16]
 800ed04:	9a06      	ldr	r2, [sp, #24]
 800ed06:	3b01      	subs	r3, #1
 800ed08:	4313      	orrs	r3, r2
 800ed0a:	4682      	mov	sl, r0
 800ed0c:	468b      	mov	fp, r1
 800ed0e:	f040 81e7 	bne.w	800f0e0 <__ieee754_pow+0x700>
 800ed12:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800edc8 <__ieee754_pow+0x3e8>
 800ed16:	eeb0 8a47 	vmov.f32	s16, s14
 800ed1a:	eef0 8a67 	vmov.f32	s17, s15
 800ed1e:	e9dd 6700 	ldrd	r6, r7, [sp]
 800ed22:	2600      	movs	r6, #0
 800ed24:	4632      	mov	r2, r6
 800ed26:	463b      	mov	r3, r7
 800ed28:	e9dd 0100 	ldrd	r0, r1, [sp]
 800ed2c:	f7f1 faac 	bl	8000288 <__aeabi_dsub>
 800ed30:	4622      	mov	r2, r4
 800ed32:	462b      	mov	r3, r5
 800ed34:	f7f1 fc60 	bl	80005f8 <__aeabi_dmul>
 800ed38:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ed3c:	4680      	mov	r8, r0
 800ed3e:	4689      	mov	r9, r1
 800ed40:	4650      	mov	r0, sl
 800ed42:	4659      	mov	r1, fp
 800ed44:	f7f1 fc58 	bl	80005f8 <__aeabi_dmul>
 800ed48:	4602      	mov	r2, r0
 800ed4a:	460b      	mov	r3, r1
 800ed4c:	4640      	mov	r0, r8
 800ed4e:	4649      	mov	r1, r9
 800ed50:	f7f1 fa9c 	bl	800028c <__adddf3>
 800ed54:	4632      	mov	r2, r6
 800ed56:	463b      	mov	r3, r7
 800ed58:	4680      	mov	r8, r0
 800ed5a:	4689      	mov	r9, r1
 800ed5c:	4620      	mov	r0, r4
 800ed5e:	4629      	mov	r1, r5
 800ed60:	f7f1 fc4a 	bl	80005f8 <__aeabi_dmul>
 800ed64:	460b      	mov	r3, r1
 800ed66:	4604      	mov	r4, r0
 800ed68:	460d      	mov	r5, r1
 800ed6a:	4602      	mov	r2, r0
 800ed6c:	4649      	mov	r1, r9
 800ed6e:	4640      	mov	r0, r8
 800ed70:	f7f1 fa8c 	bl	800028c <__adddf3>
 800ed74:	4b19      	ldr	r3, [pc, #100]	; (800eddc <__ieee754_pow+0x3fc>)
 800ed76:	4299      	cmp	r1, r3
 800ed78:	ec45 4b19 	vmov	d9, r4, r5
 800ed7c:	4606      	mov	r6, r0
 800ed7e:	460f      	mov	r7, r1
 800ed80:	468b      	mov	fp, r1
 800ed82:	f340 82f1 	ble.w	800f368 <__ieee754_pow+0x988>
 800ed86:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ed8a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ed8e:	4303      	orrs	r3, r0
 800ed90:	f000 81e4 	beq.w	800f15c <__ieee754_pow+0x77c>
 800ed94:	ec51 0b18 	vmov	r0, r1, d8
 800ed98:	2200      	movs	r2, #0
 800ed9a:	2300      	movs	r3, #0
 800ed9c:	f7f1 fe9e 	bl	8000adc <__aeabi_dcmplt>
 800eda0:	3800      	subs	r0, #0
 800eda2:	bf18      	it	ne
 800eda4:	2001      	movne	r0, #1
 800eda6:	e72b      	b.n	800ec00 <__ieee754_pow+0x220>
 800eda8:	60000000 	.word	0x60000000
 800edac:	3ff71547 	.word	0x3ff71547
 800edb0:	f85ddf44 	.word	0xf85ddf44
 800edb4:	3e54ae0b 	.word	0x3e54ae0b
 800edb8:	55555555 	.word	0x55555555
 800edbc:	3fd55555 	.word	0x3fd55555
 800edc0:	652b82fe 	.word	0x652b82fe
 800edc4:	3ff71547 	.word	0x3ff71547
 800edc8:	00000000 	.word	0x00000000
 800edcc:	bff00000 	.word	0xbff00000
 800edd0:	3ff00000 	.word	0x3ff00000
 800edd4:	3fd00000 	.word	0x3fd00000
 800edd8:	3fe00000 	.word	0x3fe00000
 800eddc:	408fffff 	.word	0x408fffff
 800ede0:	4bd5      	ldr	r3, [pc, #852]	; (800f138 <__ieee754_pow+0x758>)
 800ede2:	402b      	ands	r3, r5
 800ede4:	2200      	movs	r2, #0
 800ede6:	b92b      	cbnz	r3, 800edf4 <__ieee754_pow+0x414>
 800ede8:	4bd4      	ldr	r3, [pc, #848]	; (800f13c <__ieee754_pow+0x75c>)
 800edea:	f7f1 fc05 	bl	80005f8 <__aeabi_dmul>
 800edee:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800edf2:	460c      	mov	r4, r1
 800edf4:	1523      	asrs	r3, r4, #20
 800edf6:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800edfa:	4413      	add	r3, r2
 800edfc:	9305      	str	r3, [sp, #20]
 800edfe:	4bd0      	ldr	r3, [pc, #832]	; (800f140 <__ieee754_pow+0x760>)
 800ee00:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ee04:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ee08:	429c      	cmp	r4, r3
 800ee0a:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ee0e:	dd08      	ble.n	800ee22 <__ieee754_pow+0x442>
 800ee10:	4bcc      	ldr	r3, [pc, #816]	; (800f144 <__ieee754_pow+0x764>)
 800ee12:	429c      	cmp	r4, r3
 800ee14:	f340 8162 	ble.w	800f0dc <__ieee754_pow+0x6fc>
 800ee18:	9b05      	ldr	r3, [sp, #20]
 800ee1a:	3301      	adds	r3, #1
 800ee1c:	9305      	str	r3, [sp, #20]
 800ee1e:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800ee22:	2400      	movs	r4, #0
 800ee24:	00e3      	lsls	r3, r4, #3
 800ee26:	9307      	str	r3, [sp, #28]
 800ee28:	4bc7      	ldr	r3, [pc, #796]	; (800f148 <__ieee754_pow+0x768>)
 800ee2a:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800ee2e:	ed93 7b00 	vldr	d7, [r3]
 800ee32:	4629      	mov	r1, r5
 800ee34:	ec53 2b17 	vmov	r2, r3, d7
 800ee38:	eeb0 9a47 	vmov.f32	s18, s14
 800ee3c:	eef0 9a67 	vmov.f32	s19, s15
 800ee40:	4682      	mov	sl, r0
 800ee42:	f7f1 fa21 	bl	8000288 <__aeabi_dsub>
 800ee46:	4652      	mov	r2, sl
 800ee48:	4606      	mov	r6, r0
 800ee4a:	460f      	mov	r7, r1
 800ee4c:	462b      	mov	r3, r5
 800ee4e:	ec51 0b19 	vmov	r0, r1, d9
 800ee52:	f7f1 fa1b 	bl	800028c <__adddf3>
 800ee56:	4602      	mov	r2, r0
 800ee58:	460b      	mov	r3, r1
 800ee5a:	2000      	movs	r0, #0
 800ee5c:	49bb      	ldr	r1, [pc, #748]	; (800f14c <__ieee754_pow+0x76c>)
 800ee5e:	f7f1 fcf5 	bl	800084c <__aeabi_ddiv>
 800ee62:	ec41 0b1a 	vmov	d10, r0, r1
 800ee66:	4602      	mov	r2, r0
 800ee68:	460b      	mov	r3, r1
 800ee6a:	4630      	mov	r0, r6
 800ee6c:	4639      	mov	r1, r7
 800ee6e:	f7f1 fbc3 	bl	80005f8 <__aeabi_dmul>
 800ee72:	2300      	movs	r3, #0
 800ee74:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ee78:	9302      	str	r3, [sp, #8]
 800ee7a:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ee7e:	46ab      	mov	fp, r5
 800ee80:	106d      	asrs	r5, r5, #1
 800ee82:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ee86:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ee8a:	ec41 0b18 	vmov	d8, r0, r1
 800ee8e:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ee92:	2200      	movs	r2, #0
 800ee94:	4640      	mov	r0, r8
 800ee96:	4649      	mov	r1, r9
 800ee98:	4614      	mov	r4, r2
 800ee9a:	461d      	mov	r5, r3
 800ee9c:	f7f1 fbac 	bl	80005f8 <__aeabi_dmul>
 800eea0:	4602      	mov	r2, r0
 800eea2:	460b      	mov	r3, r1
 800eea4:	4630      	mov	r0, r6
 800eea6:	4639      	mov	r1, r7
 800eea8:	f7f1 f9ee 	bl	8000288 <__aeabi_dsub>
 800eeac:	ec53 2b19 	vmov	r2, r3, d9
 800eeb0:	4606      	mov	r6, r0
 800eeb2:	460f      	mov	r7, r1
 800eeb4:	4620      	mov	r0, r4
 800eeb6:	4629      	mov	r1, r5
 800eeb8:	f7f1 f9e6 	bl	8000288 <__aeabi_dsub>
 800eebc:	4602      	mov	r2, r0
 800eebe:	460b      	mov	r3, r1
 800eec0:	4650      	mov	r0, sl
 800eec2:	4659      	mov	r1, fp
 800eec4:	f7f1 f9e0 	bl	8000288 <__aeabi_dsub>
 800eec8:	4642      	mov	r2, r8
 800eeca:	464b      	mov	r3, r9
 800eecc:	f7f1 fb94 	bl	80005f8 <__aeabi_dmul>
 800eed0:	4602      	mov	r2, r0
 800eed2:	460b      	mov	r3, r1
 800eed4:	4630      	mov	r0, r6
 800eed6:	4639      	mov	r1, r7
 800eed8:	f7f1 f9d6 	bl	8000288 <__aeabi_dsub>
 800eedc:	ec53 2b1a 	vmov	r2, r3, d10
 800eee0:	f7f1 fb8a 	bl	80005f8 <__aeabi_dmul>
 800eee4:	ec53 2b18 	vmov	r2, r3, d8
 800eee8:	ec41 0b19 	vmov	d9, r0, r1
 800eeec:	ec51 0b18 	vmov	r0, r1, d8
 800eef0:	f7f1 fb82 	bl	80005f8 <__aeabi_dmul>
 800eef4:	a37c      	add	r3, pc, #496	; (adr r3, 800f0e8 <__ieee754_pow+0x708>)
 800eef6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800eefa:	4604      	mov	r4, r0
 800eefc:	460d      	mov	r5, r1
 800eefe:	f7f1 fb7b 	bl	80005f8 <__aeabi_dmul>
 800ef02:	a37b      	add	r3, pc, #492	; (adr r3, 800f0f0 <__ieee754_pow+0x710>)
 800ef04:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef08:	f7f1 f9c0 	bl	800028c <__adddf3>
 800ef0c:	4622      	mov	r2, r4
 800ef0e:	462b      	mov	r3, r5
 800ef10:	f7f1 fb72 	bl	80005f8 <__aeabi_dmul>
 800ef14:	a378      	add	r3, pc, #480	; (adr r3, 800f0f8 <__ieee754_pow+0x718>)
 800ef16:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef1a:	f7f1 f9b7 	bl	800028c <__adddf3>
 800ef1e:	4622      	mov	r2, r4
 800ef20:	462b      	mov	r3, r5
 800ef22:	f7f1 fb69 	bl	80005f8 <__aeabi_dmul>
 800ef26:	a376      	add	r3, pc, #472	; (adr r3, 800f100 <__ieee754_pow+0x720>)
 800ef28:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef2c:	f7f1 f9ae 	bl	800028c <__adddf3>
 800ef30:	4622      	mov	r2, r4
 800ef32:	462b      	mov	r3, r5
 800ef34:	f7f1 fb60 	bl	80005f8 <__aeabi_dmul>
 800ef38:	a373      	add	r3, pc, #460	; (adr r3, 800f108 <__ieee754_pow+0x728>)
 800ef3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef3e:	f7f1 f9a5 	bl	800028c <__adddf3>
 800ef42:	4622      	mov	r2, r4
 800ef44:	462b      	mov	r3, r5
 800ef46:	f7f1 fb57 	bl	80005f8 <__aeabi_dmul>
 800ef4a:	a371      	add	r3, pc, #452	; (adr r3, 800f110 <__ieee754_pow+0x730>)
 800ef4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef50:	f7f1 f99c 	bl	800028c <__adddf3>
 800ef54:	4622      	mov	r2, r4
 800ef56:	4606      	mov	r6, r0
 800ef58:	460f      	mov	r7, r1
 800ef5a:	462b      	mov	r3, r5
 800ef5c:	4620      	mov	r0, r4
 800ef5e:	4629      	mov	r1, r5
 800ef60:	f7f1 fb4a 	bl	80005f8 <__aeabi_dmul>
 800ef64:	4602      	mov	r2, r0
 800ef66:	460b      	mov	r3, r1
 800ef68:	4630      	mov	r0, r6
 800ef6a:	4639      	mov	r1, r7
 800ef6c:	f7f1 fb44 	bl	80005f8 <__aeabi_dmul>
 800ef70:	4642      	mov	r2, r8
 800ef72:	4604      	mov	r4, r0
 800ef74:	460d      	mov	r5, r1
 800ef76:	464b      	mov	r3, r9
 800ef78:	ec51 0b18 	vmov	r0, r1, d8
 800ef7c:	f7f1 f986 	bl	800028c <__adddf3>
 800ef80:	ec53 2b19 	vmov	r2, r3, d9
 800ef84:	f7f1 fb38 	bl	80005f8 <__aeabi_dmul>
 800ef88:	4622      	mov	r2, r4
 800ef8a:	462b      	mov	r3, r5
 800ef8c:	f7f1 f97e 	bl	800028c <__adddf3>
 800ef90:	4642      	mov	r2, r8
 800ef92:	4682      	mov	sl, r0
 800ef94:	468b      	mov	fp, r1
 800ef96:	464b      	mov	r3, r9
 800ef98:	4640      	mov	r0, r8
 800ef9a:	4649      	mov	r1, r9
 800ef9c:	f7f1 fb2c 	bl	80005f8 <__aeabi_dmul>
 800efa0:	4b6b      	ldr	r3, [pc, #428]	; (800f150 <__ieee754_pow+0x770>)
 800efa2:	2200      	movs	r2, #0
 800efa4:	4606      	mov	r6, r0
 800efa6:	460f      	mov	r7, r1
 800efa8:	f7f1 f970 	bl	800028c <__adddf3>
 800efac:	4652      	mov	r2, sl
 800efae:	465b      	mov	r3, fp
 800efb0:	f7f1 f96c 	bl	800028c <__adddf3>
 800efb4:	2000      	movs	r0, #0
 800efb6:	4604      	mov	r4, r0
 800efb8:	460d      	mov	r5, r1
 800efba:	4602      	mov	r2, r0
 800efbc:	460b      	mov	r3, r1
 800efbe:	4640      	mov	r0, r8
 800efc0:	4649      	mov	r1, r9
 800efc2:	f7f1 fb19 	bl	80005f8 <__aeabi_dmul>
 800efc6:	4b62      	ldr	r3, [pc, #392]	; (800f150 <__ieee754_pow+0x770>)
 800efc8:	4680      	mov	r8, r0
 800efca:	4689      	mov	r9, r1
 800efcc:	2200      	movs	r2, #0
 800efce:	4620      	mov	r0, r4
 800efd0:	4629      	mov	r1, r5
 800efd2:	f7f1 f959 	bl	8000288 <__aeabi_dsub>
 800efd6:	4632      	mov	r2, r6
 800efd8:	463b      	mov	r3, r7
 800efda:	f7f1 f955 	bl	8000288 <__aeabi_dsub>
 800efde:	4602      	mov	r2, r0
 800efe0:	460b      	mov	r3, r1
 800efe2:	4650      	mov	r0, sl
 800efe4:	4659      	mov	r1, fp
 800efe6:	f7f1 f94f 	bl	8000288 <__aeabi_dsub>
 800efea:	ec53 2b18 	vmov	r2, r3, d8
 800efee:	f7f1 fb03 	bl	80005f8 <__aeabi_dmul>
 800eff2:	4622      	mov	r2, r4
 800eff4:	4606      	mov	r6, r0
 800eff6:	460f      	mov	r7, r1
 800eff8:	462b      	mov	r3, r5
 800effa:	ec51 0b19 	vmov	r0, r1, d9
 800effe:	f7f1 fafb 	bl	80005f8 <__aeabi_dmul>
 800f002:	4602      	mov	r2, r0
 800f004:	460b      	mov	r3, r1
 800f006:	4630      	mov	r0, r6
 800f008:	4639      	mov	r1, r7
 800f00a:	f7f1 f93f 	bl	800028c <__adddf3>
 800f00e:	4606      	mov	r6, r0
 800f010:	460f      	mov	r7, r1
 800f012:	4602      	mov	r2, r0
 800f014:	460b      	mov	r3, r1
 800f016:	4640      	mov	r0, r8
 800f018:	4649      	mov	r1, r9
 800f01a:	f7f1 f937 	bl	800028c <__adddf3>
 800f01e:	a33e      	add	r3, pc, #248	; (adr r3, 800f118 <__ieee754_pow+0x738>)
 800f020:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f024:	2000      	movs	r0, #0
 800f026:	4604      	mov	r4, r0
 800f028:	460d      	mov	r5, r1
 800f02a:	f7f1 fae5 	bl	80005f8 <__aeabi_dmul>
 800f02e:	4642      	mov	r2, r8
 800f030:	ec41 0b18 	vmov	d8, r0, r1
 800f034:	464b      	mov	r3, r9
 800f036:	4620      	mov	r0, r4
 800f038:	4629      	mov	r1, r5
 800f03a:	f7f1 f925 	bl	8000288 <__aeabi_dsub>
 800f03e:	4602      	mov	r2, r0
 800f040:	460b      	mov	r3, r1
 800f042:	4630      	mov	r0, r6
 800f044:	4639      	mov	r1, r7
 800f046:	f7f1 f91f 	bl	8000288 <__aeabi_dsub>
 800f04a:	a335      	add	r3, pc, #212	; (adr r3, 800f120 <__ieee754_pow+0x740>)
 800f04c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f050:	f7f1 fad2 	bl	80005f8 <__aeabi_dmul>
 800f054:	a334      	add	r3, pc, #208	; (adr r3, 800f128 <__ieee754_pow+0x748>)
 800f056:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f05a:	4606      	mov	r6, r0
 800f05c:	460f      	mov	r7, r1
 800f05e:	4620      	mov	r0, r4
 800f060:	4629      	mov	r1, r5
 800f062:	f7f1 fac9 	bl	80005f8 <__aeabi_dmul>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	4630      	mov	r0, r6
 800f06c:	4639      	mov	r1, r7
 800f06e:	f7f1 f90d 	bl	800028c <__adddf3>
 800f072:	9a07      	ldr	r2, [sp, #28]
 800f074:	4b37      	ldr	r3, [pc, #220]	; (800f154 <__ieee754_pow+0x774>)
 800f076:	4413      	add	r3, r2
 800f078:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f07c:	f7f1 f906 	bl	800028c <__adddf3>
 800f080:	4682      	mov	sl, r0
 800f082:	9805      	ldr	r0, [sp, #20]
 800f084:	468b      	mov	fp, r1
 800f086:	f7f1 fa4d 	bl	8000524 <__aeabi_i2d>
 800f08a:	9a07      	ldr	r2, [sp, #28]
 800f08c:	4b32      	ldr	r3, [pc, #200]	; (800f158 <__ieee754_pow+0x778>)
 800f08e:	4413      	add	r3, r2
 800f090:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f094:	4606      	mov	r6, r0
 800f096:	460f      	mov	r7, r1
 800f098:	4652      	mov	r2, sl
 800f09a:	465b      	mov	r3, fp
 800f09c:	ec51 0b18 	vmov	r0, r1, d8
 800f0a0:	f7f1 f8f4 	bl	800028c <__adddf3>
 800f0a4:	4642      	mov	r2, r8
 800f0a6:	464b      	mov	r3, r9
 800f0a8:	f7f1 f8f0 	bl	800028c <__adddf3>
 800f0ac:	4632      	mov	r2, r6
 800f0ae:	463b      	mov	r3, r7
 800f0b0:	f7f1 f8ec 	bl	800028c <__adddf3>
 800f0b4:	2000      	movs	r0, #0
 800f0b6:	4632      	mov	r2, r6
 800f0b8:	463b      	mov	r3, r7
 800f0ba:	4604      	mov	r4, r0
 800f0bc:	460d      	mov	r5, r1
 800f0be:	f7f1 f8e3 	bl	8000288 <__aeabi_dsub>
 800f0c2:	4642      	mov	r2, r8
 800f0c4:	464b      	mov	r3, r9
 800f0c6:	f7f1 f8df 	bl	8000288 <__aeabi_dsub>
 800f0ca:	ec53 2b18 	vmov	r2, r3, d8
 800f0ce:	f7f1 f8db 	bl	8000288 <__aeabi_dsub>
 800f0d2:	4602      	mov	r2, r0
 800f0d4:	460b      	mov	r3, r1
 800f0d6:	4650      	mov	r0, sl
 800f0d8:	4659      	mov	r1, fp
 800f0da:	e610      	b.n	800ecfe <__ieee754_pow+0x31e>
 800f0dc:	2401      	movs	r4, #1
 800f0de:	e6a1      	b.n	800ee24 <__ieee754_pow+0x444>
 800f0e0:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f130 <__ieee754_pow+0x750>
 800f0e4:	e617      	b.n	800ed16 <__ieee754_pow+0x336>
 800f0e6:	bf00      	nop
 800f0e8:	4a454eef 	.word	0x4a454eef
 800f0ec:	3fca7e28 	.word	0x3fca7e28
 800f0f0:	93c9db65 	.word	0x93c9db65
 800f0f4:	3fcd864a 	.word	0x3fcd864a
 800f0f8:	a91d4101 	.word	0xa91d4101
 800f0fc:	3fd17460 	.word	0x3fd17460
 800f100:	518f264d 	.word	0x518f264d
 800f104:	3fd55555 	.word	0x3fd55555
 800f108:	db6fabff 	.word	0xdb6fabff
 800f10c:	3fdb6db6 	.word	0x3fdb6db6
 800f110:	33333303 	.word	0x33333303
 800f114:	3fe33333 	.word	0x3fe33333
 800f118:	e0000000 	.word	0xe0000000
 800f11c:	3feec709 	.word	0x3feec709
 800f120:	dc3a03fd 	.word	0xdc3a03fd
 800f124:	3feec709 	.word	0x3feec709
 800f128:	145b01f5 	.word	0x145b01f5
 800f12c:	be3e2fe0 	.word	0xbe3e2fe0
 800f130:	00000000 	.word	0x00000000
 800f134:	3ff00000 	.word	0x3ff00000
 800f138:	7ff00000 	.word	0x7ff00000
 800f13c:	43400000 	.word	0x43400000
 800f140:	0003988e 	.word	0x0003988e
 800f144:	000bb679 	.word	0x000bb679
 800f148:	0800fe00 	.word	0x0800fe00
 800f14c:	3ff00000 	.word	0x3ff00000
 800f150:	40080000 	.word	0x40080000
 800f154:	0800fe20 	.word	0x0800fe20
 800f158:	0800fe10 	.word	0x0800fe10
 800f15c:	a3b5      	add	r3, pc, #724	; (adr r3, 800f434 <__ieee754_pow+0xa54>)
 800f15e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f162:	4640      	mov	r0, r8
 800f164:	4649      	mov	r1, r9
 800f166:	f7f1 f891 	bl	800028c <__adddf3>
 800f16a:	4622      	mov	r2, r4
 800f16c:	ec41 0b1a 	vmov	d10, r0, r1
 800f170:	462b      	mov	r3, r5
 800f172:	4630      	mov	r0, r6
 800f174:	4639      	mov	r1, r7
 800f176:	f7f1 f887 	bl	8000288 <__aeabi_dsub>
 800f17a:	4602      	mov	r2, r0
 800f17c:	460b      	mov	r3, r1
 800f17e:	ec51 0b1a 	vmov	r0, r1, d10
 800f182:	f7f1 fcc9 	bl	8000b18 <__aeabi_dcmpgt>
 800f186:	2800      	cmp	r0, #0
 800f188:	f47f ae04 	bne.w	800ed94 <__ieee754_pow+0x3b4>
 800f18c:	4aa4      	ldr	r2, [pc, #656]	; (800f420 <__ieee754_pow+0xa40>)
 800f18e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f192:	4293      	cmp	r3, r2
 800f194:	f340 8108 	ble.w	800f3a8 <__ieee754_pow+0x9c8>
 800f198:	151b      	asrs	r3, r3, #20
 800f19a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f19e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f1a2:	fa4a f303 	asr.w	r3, sl, r3
 800f1a6:	445b      	add	r3, fp
 800f1a8:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f1ac:	4e9d      	ldr	r6, [pc, #628]	; (800f424 <__ieee754_pow+0xa44>)
 800f1ae:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f1b2:	4116      	asrs	r6, r2
 800f1b4:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f1b8:	2000      	movs	r0, #0
 800f1ba:	ea23 0106 	bic.w	r1, r3, r6
 800f1be:	f1c2 0214 	rsb	r2, r2, #20
 800f1c2:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f1c6:	fa4a fa02 	asr.w	sl, sl, r2
 800f1ca:	f1bb 0f00 	cmp.w	fp, #0
 800f1ce:	4602      	mov	r2, r0
 800f1d0:	460b      	mov	r3, r1
 800f1d2:	4620      	mov	r0, r4
 800f1d4:	4629      	mov	r1, r5
 800f1d6:	bfb8      	it	lt
 800f1d8:	f1ca 0a00 	rsblt	sl, sl, #0
 800f1dc:	f7f1 f854 	bl	8000288 <__aeabi_dsub>
 800f1e0:	ec41 0b19 	vmov	d9, r0, r1
 800f1e4:	4642      	mov	r2, r8
 800f1e6:	464b      	mov	r3, r9
 800f1e8:	ec51 0b19 	vmov	r0, r1, d9
 800f1ec:	f7f1 f84e 	bl	800028c <__adddf3>
 800f1f0:	a37b      	add	r3, pc, #492	; (adr r3, 800f3e0 <__ieee754_pow+0xa00>)
 800f1f2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1f6:	2000      	movs	r0, #0
 800f1f8:	4604      	mov	r4, r0
 800f1fa:	460d      	mov	r5, r1
 800f1fc:	f7f1 f9fc 	bl	80005f8 <__aeabi_dmul>
 800f200:	ec53 2b19 	vmov	r2, r3, d9
 800f204:	4606      	mov	r6, r0
 800f206:	460f      	mov	r7, r1
 800f208:	4620      	mov	r0, r4
 800f20a:	4629      	mov	r1, r5
 800f20c:	f7f1 f83c 	bl	8000288 <__aeabi_dsub>
 800f210:	4602      	mov	r2, r0
 800f212:	460b      	mov	r3, r1
 800f214:	4640      	mov	r0, r8
 800f216:	4649      	mov	r1, r9
 800f218:	f7f1 f836 	bl	8000288 <__aeabi_dsub>
 800f21c:	a372      	add	r3, pc, #456	; (adr r3, 800f3e8 <__ieee754_pow+0xa08>)
 800f21e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f222:	f7f1 f9e9 	bl	80005f8 <__aeabi_dmul>
 800f226:	a372      	add	r3, pc, #456	; (adr r3, 800f3f0 <__ieee754_pow+0xa10>)
 800f228:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f22c:	4680      	mov	r8, r0
 800f22e:	4689      	mov	r9, r1
 800f230:	4620      	mov	r0, r4
 800f232:	4629      	mov	r1, r5
 800f234:	f7f1 f9e0 	bl	80005f8 <__aeabi_dmul>
 800f238:	4602      	mov	r2, r0
 800f23a:	460b      	mov	r3, r1
 800f23c:	4640      	mov	r0, r8
 800f23e:	4649      	mov	r1, r9
 800f240:	f7f1 f824 	bl	800028c <__adddf3>
 800f244:	4604      	mov	r4, r0
 800f246:	460d      	mov	r5, r1
 800f248:	4602      	mov	r2, r0
 800f24a:	460b      	mov	r3, r1
 800f24c:	4630      	mov	r0, r6
 800f24e:	4639      	mov	r1, r7
 800f250:	f7f1 f81c 	bl	800028c <__adddf3>
 800f254:	4632      	mov	r2, r6
 800f256:	463b      	mov	r3, r7
 800f258:	4680      	mov	r8, r0
 800f25a:	4689      	mov	r9, r1
 800f25c:	f7f1 f814 	bl	8000288 <__aeabi_dsub>
 800f260:	4602      	mov	r2, r0
 800f262:	460b      	mov	r3, r1
 800f264:	4620      	mov	r0, r4
 800f266:	4629      	mov	r1, r5
 800f268:	f7f1 f80e 	bl	8000288 <__aeabi_dsub>
 800f26c:	4642      	mov	r2, r8
 800f26e:	4606      	mov	r6, r0
 800f270:	460f      	mov	r7, r1
 800f272:	464b      	mov	r3, r9
 800f274:	4640      	mov	r0, r8
 800f276:	4649      	mov	r1, r9
 800f278:	f7f1 f9be 	bl	80005f8 <__aeabi_dmul>
 800f27c:	a35e      	add	r3, pc, #376	; (adr r3, 800f3f8 <__ieee754_pow+0xa18>)
 800f27e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f282:	4604      	mov	r4, r0
 800f284:	460d      	mov	r5, r1
 800f286:	f7f1 f9b7 	bl	80005f8 <__aeabi_dmul>
 800f28a:	a35d      	add	r3, pc, #372	; (adr r3, 800f400 <__ieee754_pow+0xa20>)
 800f28c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f290:	f7f0 fffa 	bl	8000288 <__aeabi_dsub>
 800f294:	4622      	mov	r2, r4
 800f296:	462b      	mov	r3, r5
 800f298:	f7f1 f9ae 	bl	80005f8 <__aeabi_dmul>
 800f29c:	a35a      	add	r3, pc, #360	; (adr r3, 800f408 <__ieee754_pow+0xa28>)
 800f29e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2a2:	f7f0 fff3 	bl	800028c <__adddf3>
 800f2a6:	4622      	mov	r2, r4
 800f2a8:	462b      	mov	r3, r5
 800f2aa:	f7f1 f9a5 	bl	80005f8 <__aeabi_dmul>
 800f2ae:	a358      	add	r3, pc, #352	; (adr r3, 800f410 <__ieee754_pow+0xa30>)
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	f7f0 ffe8 	bl	8000288 <__aeabi_dsub>
 800f2b8:	4622      	mov	r2, r4
 800f2ba:	462b      	mov	r3, r5
 800f2bc:	f7f1 f99c 	bl	80005f8 <__aeabi_dmul>
 800f2c0:	a355      	add	r3, pc, #340	; (adr r3, 800f418 <__ieee754_pow+0xa38>)
 800f2c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2c6:	f7f0 ffe1 	bl	800028c <__adddf3>
 800f2ca:	4622      	mov	r2, r4
 800f2cc:	462b      	mov	r3, r5
 800f2ce:	f7f1 f993 	bl	80005f8 <__aeabi_dmul>
 800f2d2:	4602      	mov	r2, r0
 800f2d4:	460b      	mov	r3, r1
 800f2d6:	4640      	mov	r0, r8
 800f2d8:	4649      	mov	r1, r9
 800f2da:	f7f0 ffd5 	bl	8000288 <__aeabi_dsub>
 800f2de:	4604      	mov	r4, r0
 800f2e0:	460d      	mov	r5, r1
 800f2e2:	4602      	mov	r2, r0
 800f2e4:	460b      	mov	r3, r1
 800f2e6:	4640      	mov	r0, r8
 800f2e8:	4649      	mov	r1, r9
 800f2ea:	f7f1 f985 	bl	80005f8 <__aeabi_dmul>
 800f2ee:	2200      	movs	r2, #0
 800f2f0:	ec41 0b19 	vmov	d9, r0, r1
 800f2f4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f2f8:	4620      	mov	r0, r4
 800f2fa:	4629      	mov	r1, r5
 800f2fc:	f7f0 ffc4 	bl	8000288 <__aeabi_dsub>
 800f300:	4602      	mov	r2, r0
 800f302:	460b      	mov	r3, r1
 800f304:	ec51 0b19 	vmov	r0, r1, d9
 800f308:	f7f1 faa0 	bl	800084c <__aeabi_ddiv>
 800f30c:	4632      	mov	r2, r6
 800f30e:	4604      	mov	r4, r0
 800f310:	460d      	mov	r5, r1
 800f312:	463b      	mov	r3, r7
 800f314:	4640      	mov	r0, r8
 800f316:	4649      	mov	r1, r9
 800f318:	f7f1 f96e 	bl	80005f8 <__aeabi_dmul>
 800f31c:	4632      	mov	r2, r6
 800f31e:	463b      	mov	r3, r7
 800f320:	f7f0 ffb4 	bl	800028c <__adddf3>
 800f324:	4602      	mov	r2, r0
 800f326:	460b      	mov	r3, r1
 800f328:	4620      	mov	r0, r4
 800f32a:	4629      	mov	r1, r5
 800f32c:	f7f0 ffac 	bl	8000288 <__aeabi_dsub>
 800f330:	4642      	mov	r2, r8
 800f332:	464b      	mov	r3, r9
 800f334:	f7f0 ffa8 	bl	8000288 <__aeabi_dsub>
 800f338:	460b      	mov	r3, r1
 800f33a:	4602      	mov	r2, r0
 800f33c:	493a      	ldr	r1, [pc, #232]	; (800f428 <__ieee754_pow+0xa48>)
 800f33e:	2000      	movs	r0, #0
 800f340:	f7f0 ffa2 	bl	8000288 <__aeabi_dsub>
 800f344:	ec41 0b10 	vmov	d0, r0, r1
 800f348:	ee10 3a90 	vmov	r3, s1
 800f34c:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f350:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f354:	da2b      	bge.n	800f3ae <__ieee754_pow+0x9ce>
 800f356:	4650      	mov	r0, sl
 800f358:	f000 f966 	bl	800f628 <scalbn>
 800f35c:	ec51 0b10 	vmov	r0, r1, d0
 800f360:	ec53 2b18 	vmov	r2, r3, d8
 800f364:	f7ff bbed 	b.w	800eb42 <__ieee754_pow+0x162>
 800f368:	4b30      	ldr	r3, [pc, #192]	; (800f42c <__ieee754_pow+0xa4c>)
 800f36a:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f36e:	429e      	cmp	r6, r3
 800f370:	f77f af0c 	ble.w	800f18c <__ieee754_pow+0x7ac>
 800f374:	4b2e      	ldr	r3, [pc, #184]	; (800f430 <__ieee754_pow+0xa50>)
 800f376:	440b      	add	r3, r1
 800f378:	4303      	orrs	r3, r0
 800f37a:	d009      	beq.n	800f390 <__ieee754_pow+0x9b0>
 800f37c:	ec51 0b18 	vmov	r0, r1, d8
 800f380:	2200      	movs	r2, #0
 800f382:	2300      	movs	r3, #0
 800f384:	f7f1 fbaa 	bl	8000adc <__aeabi_dcmplt>
 800f388:	3800      	subs	r0, #0
 800f38a:	bf18      	it	ne
 800f38c:	2001      	movne	r0, #1
 800f38e:	e447      	b.n	800ec20 <__ieee754_pow+0x240>
 800f390:	4622      	mov	r2, r4
 800f392:	462b      	mov	r3, r5
 800f394:	f7f0 ff78 	bl	8000288 <__aeabi_dsub>
 800f398:	4642      	mov	r2, r8
 800f39a:	464b      	mov	r3, r9
 800f39c:	f7f1 fbb2 	bl	8000b04 <__aeabi_dcmpge>
 800f3a0:	2800      	cmp	r0, #0
 800f3a2:	f43f aef3 	beq.w	800f18c <__ieee754_pow+0x7ac>
 800f3a6:	e7e9      	b.n	800f37c <__ieee754_pow+0x99c>
 800f3a8:	f04f 0a00 	mov.w	sl, #0
 800f3ac:	e71a      	b.n	800f1e4 <__ieee754_pow+0x804>
 800f3ae:	ec51 0b10 	vmov	r0, r1, d0
 800f3b2:	4619      	mov	r1, r3
 800f3b4:	e7d4      	b.n	800f360 <__ieee754_pow+0x980>
 800f3b6:	491c      	ldr	r1, [pc, #112]	; (800f428 <__ieee754_pow+0xa48>)
 800f3b8:	2000      	movs	r0, #0
 800f3ba:	f7ff bb30 	b.w	800ea1e <__ieee754_pow+0x3e>
 800f3be:	2000      	movs	r0, #0
 800f3c0:	2100      	movs	r1, #0
 800f3c2:	f7ff bb2c 	b.w	800ea1e <__ieee754_pow+0x3e>
 800f3c6:	4630      	mov	r0, r6
 800f3c8:	4639      	mov	r1, r7
 800f3ca:	f7ff bb28 	b.w	800ea1e <__ieee754_pow+0x3e>
 800f3ce:	9204      	str	r2, [sp, #16]
 800f3d0:	f7ff bb7a 	b.w	800eac8 <__ieee754_pow+0xe8>
 800f3d4:	2300      	movs	r3, #0
 800f3d6:	f7ff bb64 	b.w	800eaa2 <__ieee754_pow+0xc2>
 800f3da:	bf00      	nop
 800f3dc:	f3af 8000 	nop.w
 800f3e0:	00000000 	.word	0x00000000
 800f3e4:	3fe62e43 	.word	0x3fe62e43
 800f3e8:	fefa39ef 	.word	0xfefa39ef
 800f3ec:	3fe62e42 	.word	0x3fe62e42
 800f3f0:	0ca86c39 	.word	0x0ca86c39
 800f3f4:	be205c61 	.word	0xbe205c61
 800f3f8:	72bea4d0 	.word	0x72bea4d0
 800f3fc:	3e663769 	.word	0x3e663769
 800f400:	c5d26bf1 	.word	0xc5d26bf1
 800f404:	3ebbbd41 	.word	0x3ebbbd41
 800f408:	af25de2c 	.word	0xaf25de2c
 800f40c:	3f11566a 	.word	0x3f11566a
 800f410:	16bebd93 	.word	0x16bebd93
 800f414:	3f66c16c 	.word	0x3f66c16c
 800f418:	5555553e 	.word	0x5555553e
 800f41c:	3fc55555 	.word	0x3fc55555
 800f420:	3fe00000 	.word	0x3fe00000
 800f424:	000fffff 	.word	0x000fffff
 800f428:	3ff00000 	.word	0x3ff00000
 800f42c:	4090cbff 	.word	0x4090cbff
 800f430:	3f6f3400 	.word	0x3f6f3400
 800f434:	652b82fe 	.word	0x652b82fe
 800f438:	3c971547 	.word	0x3c971547

0800f43c <__ieee754_sqrt>:
 800f43c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f440:	ec55 4b10 	vmov	r4, r5, d0
 800f444:	4e55      	ldr	r6, [pc, #340]	; (800f59c <__ieee754_sqrt+0x160>)
 800f446:	43ae      	bics	r6, r5
 800f448:	ee10 0a10 	vmov	r0, s0
 800f44c:	ee10 3a10 	vmov	r3, s0
 800f450:	462a      	mov	r2, r5
 800f452:	4629      	mov	r1, r5
 800f454:	d110      	bne.n	800f478 <__ieee754_sqrt+0x3c>
 800f456:	ee10 2a10 	vmov	r2, s0
 800f45a:	462b      	mov	r3, r5
 800f45c:	f7f1 f8cc 	bl	80005f8 <__aeabi_dmul>
 800f460:	4602      	mov	r2, r0
 800f462:	460b      	mov	r3, r1
 800f464:	4620      	mov	r0, r4
 800f466:	4629      	mov	r1, r5
 800f468:	f7f0 ff10 	bl	800028c <__adddf3>
 800f46c:	4604      	mov	r4, r0
 800f46e:	460d      	mov	r5, r1
 800f470:	ec45 4b10 	vmov	d0, r4, r5
 800f474:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f478:	2d00      	cmp	r5, #0
 800f47a:	dc10      	bgt.n	800f49e <__ieee754_sqrt+0x62>
 800f47c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f480:	4330      	orrs	r0, r6
 800f482:	d0f5      	beq.n	800f470 <__ieee754_sqrt+0x34>
 800f484:	b15d      	cbz	r5, 800f49e <__ieee754_sqrt+0x62>
 800f486:	ee10 2a10 	vmov	r2, s0
 800f48a:	462b      	mov	r3, r5
 800f48c:	ee10 0a10 	vmov	r0, s0
 800f490:	f7f0 fefa 	bl	8000288 <__aeabi_dsub>
 800f494:	4602      	mov	r2, r0
 800f496:	460b      	mov	r3, r1
 800f498:	f7f1 f9d8 	bl	800084c <__aeabi_ddiv>
 800f49c:	e7e6      	b.n	800f46c <__ieee754_sqrt+0x30>
 800f49e:	1512      	asrs	r2, r2, #20
 800f4a0:	d074      	beq.n	800f58c <__ieee754_sqrt+0x150>
 800f4a2:	07d4      	lsls	r4, r2, #31
 800f4a4:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f4a8:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f4ac:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f4b0:	bf5e      	ittt	pl
 800f4b2:	0fda      	lsrpl	r2, r3, #31
 800f4b4:	005b      	lslpl	r3, r3, #1
 800f4b6:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f4ba:	2400      	movs	r4, #0
 800f4bc:	0fda      	lsrs	r2, r3, #31
 800f4be:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f4c2:	107f      	asrs	r7, r7, #1
 800f4c4:	005b      	lsls	r3, r3, #1
 800f4c6:	2516      	movs	r5, #22
 800f4c8:	4620      	mov	r0, r4
 800f4ca:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f4ce:	1886      	adds	r6, r0, r2
 800f4d0:	428e      	cmp	r6, r1
 800f4d2:	bfde      	ittt	le
 800f4d4:	1b89      	suble	r1, r1, r6
 800f4d6:	18b0      	addle	r0, r6, r2
 800f4d8:	18a4      	addle	r4, r4, r2
 800f4da:	0049      	lsls	r1, r1, #1
 800f4dc:	3d01      	subs	r5, #1
 800f4de:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f4e2:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f4e6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f4ea:	d1f0      	bne.n	800f4ce <__ieee754_sqrt+0x92>
 800f4ec:	462a      	mov	r2, r5
 800f4ee:	f04f 0e20 	mov.w	lr, #32
 800f4f2:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f4f6:	4281      	cmp	r1, r0
 800f4f8:	eb06 0c05 	add.w	ip, r6, r5
 800f4fc:	dc02      	bgt.n	800f504 <__ieee754_sqrt+0xc8>
 800f4fe:	d113      	bne.n	800f528 <__ieee754_sqrt+0xec>
 800f500:	459c      	cmp	ip, r3
 800f502:	d811      	bhi.n	800f528 <__ieee754_sqrt+0xec>
 800f504:	f1bc 0f00 	cmp.w	ip, #0
 800f508:	eb0c 0506 	add.w	r5, ip, r6
 800f50c:	da43      	bge.n	800f596 <__ieee754_sqrt+0x15a>
 800f50e:	2d00      	cmp	r5, #0
 800f510:	db41      	blt.n	800f596 <__ieee754_sqrt+0x15a>
 800f512:	f100 0801 	add.w	r8, r0, #1
 800f516:	1a09      	subs	r1, r1, r0
 800f518:	459c      	cmp	ip, r3
 800f51a:	bf88      	it	hi
 800f51c:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f520:	eba3 030c 	sub.w	r3, r3, ip
 800f524:	4432      	add	r2, r6
 800f526:	4640      	mov	r0, r8
 800f528:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f52c:	f1be 0e01 	subs.w	lr, lr, #1
 800f530:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f534:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f538:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f53c:	d1db      	bne.n	800f4f6 <__ieee754_sqrt+0xba>
 800f53e:	430b      	orrs	r3, r1
 800f540:	d006      	beq.n	800f550 <__ieee754_sqrt+0x114>
 800f542:	1c50      	adds	r0, r2, #1
 800f544:	bf13      	iteet	ne
 800f546:	3201      	addne	r2, #1
 800f548:	3401      	addeq	r4, #1
 800f54a:	4672      	moveq	r2, lr
 800f54c:	f022 0201 	bicne.w	r2, r2, #1
 800f550:	1063      	asrs	r3, r4, #1
 800f552:	0852      	lsrs	r2, r2, #1
 800f554:	07e1      	lsls	r1, r4, #31
 800f556:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f55a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f55e:	bf48      	it	mi
 800f560:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f564:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f568:	4614      	mov	r4, r2
 800f56a:	e781      	b.n	800f470 <__ieee754_sqrt+0x34>
 800f56c:	0ad9      	lsrs	r1, r3, #11
 800f56e:	3815      	subs	r0, #21
 800f570:	055b      	lsls	r3, r3, #21
 800f572:	2900      	cmp	r1, #0
 800f574:	d0fa      	beq.n	800f56c <__ieee754_sqrt+0x130>
 800f576:	02cd      	lsls	r5, r1, #11
 800f578:	d50a      	bpl.n	800f590 <__ieee754_sqrt+0x154>
 800f57a:	f1c2 0420 	rsb	r4, r2, #32
 800f57e:	fa23 f404 	lsr.w	r4, r3, r4
 800f582:	1e55      	subs	r5, r2, #1
 800f584:	4093      	lsls	r3, r2
 800f586:	4321      	orrs	r1, r4
 800f588:	1b42      	subs	r2, r0, r5
 800f58a:	e78a      	b.n	800f4a2 <__ieee754_sqrt+0x66>
 800f58c:	4610      	mov	r0, r2
 800f58e:	e7f0      	b.n	800f572 <__ieee754_sqrt+0x136>
 800f590:	0049      	lsls	r1, r1, #1
 800f592:	3201      	adds	r2, #1
 800f594:	e7ef      	b.n	800f576 <__ieee754_sqrt+0x13a>
 800f596:	4680      	mov	r8, r0
 800f598:	e7bd      	b.n	800f516 <__ieee754_sqrt+0xda>
 800f59a:	bf00      	nop
 800f59c:	7ff00000 	.word	0x7ff00000

0800f5a0 <with_errno>:
 800f5a0:	b570      	push	{r4, r5, r6, lr}
 800f5a2:	4604      	mov	r4, r0
 800f5a4:	460d      	mov	r5, r1
 800f5a6:	4616      	mov	r6, r2
 800f5a8:	f7fa fc6e 	bl	8009e88 <__errno>
 800f5ac:	4629      	mov	r1, r5
 800f5ae:	6006      	str	r6, [r0, #0]
 800f5b0:	4620      	mov	r0, r4
 800f5b2:	bd70      	pop	{r4, r5, r6, pc}

0800f5b4 <xflow>:
 800f5b4:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f5b6:	4614      	mov	r4, r2
 800f5b8:	461d      	mov	r5, r3
 800f5ba:	b108      	cbz	r0, 800f5c0 <xflow+0xc>
 800f5bc:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f5c0:	e9cd 2300 	strd	r2, r3, [sp]
 800f5c4:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f5c8:	4620      	mov	r0, r4
 800f5ca:	4629      	mov	r1, r5
 800f5cc:	f7f1 f814 	bl	80005f8 <__aeabi_dmul>
 800f5d0:	2222      	movs	r2, #34	; 0x22
 800f5d2:	b003      	add	sp, #12
 800f5d4:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f5d8:	f7ff bfe2 	b.w	800f5a0 <with_errno>

0800f5dc <__math_uflow>:
 800f5dc:	b508      	push	{r3, lr}
 800f5de:	2200      	movs	r2, #0
 800f5e0:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f5e4:	f7ff ffe6 	bl	800f5b4 <xflow>
 800f5e8:	ec41 0b10 	vmov	d0, r0, r1
 800f5ec:	bd08      	pop	{r3, pc}

0800f5ee <__math_oflow>:
 800f5ee:	b508      	push	{r3, lr}
 800f5f0:	2200      	movs	r2, #0
 800f5f2:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f5f6:	f7ff ffdd 	bl	800f5b4 <xflow>
 800f5fa:	ec41 0b10 	vmov	d0, r0, r1
 800f5fe:	bd08      	pop	{r3, pc}

0800f600 <fabs>:
 800f600:	ec51 0b10 	vmov	r0, r1, d0
 800f604:	ee10 2a10 	vmov	r2, s0
 800f608:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f60c:	ec43 2b10 	vmov	d0, r2, r3
 800f610:	4770      	bx	lr

0800f612 <finite>:
 800f612:	b082      	sub	sp, #8
 800f614:	ed8d 0b00 	vstr	d0, [sp]
 800f618:	9801      	ldr	r0, [sp, #4]
 800f61a:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f61e:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f622:	0fc0      	lsrs	r0, r0, #31
 800f624:	b002      	add	sp, #8
 800f626:	4770      	bx	lr

0800f628 <scalbn>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	ec55 4b10 	vmov	r4, r5, d0
 800f62e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f632:	4606      	mov	r6, r0
 800f634:	462b      	mov	r3, r5
 800f636:	b99a      	cbnz	r2, 800f660 <scalbn+0x38>
 800f638:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f63c:	4323      	orrs	r3, r4
 800f63e:	d036      	beq.n	800f6ae <scalbn+0x86>
 800f640:	4b39      	ldr	r3, [pc, #228]	; (800f728 <scalbn+0x100>)
 800f642:	4629      	mov	r1, r5
 800f644:	ee10 0a10 	vmov	r0, s0
 800f648:	2200      	movs	r2, #0
 800f64a:	f7f0 ffd5 	bl	80005f8 <__aeabi_dmul>
 800f64e:	4b37      	ldr	r3, [pc, #220]	; (800f72c <scalbn+0x104>)
 800f650:	429e      	cmp	r6, r3
 800f652:	4604      	mov	r4, r0
 800f654:	460d      	mov	r5, r1
 800f656:	da10      	bge.n	800f67a <scalbn+0x52>
 800f658:	a32b      	add	r3, pc, #172	; (adr r3, 800f708 <scalbn+0xe0>)
 800f65a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f65e:	e03a      	b.n	800f6d6 <scalbn+0xae>
 800f660:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f664:	428a      	cmp	r2, r1
 800f666:	d10c      	bne.n	800f682 <scalbn+0x5a>
 800f668:	ee10 2a10 	vmov	r2, s0
 800f66c:	4620      	mov	r0, r4
 800f66e:	4629      	mov	r1, r5
 800f670:	f7f0 fe0c 	bl	800028c <__adddf3>
 800f674:	4604      	mov	r4, r0
 800f676:	460d      	mov	r5, r1
 800f678:	e019      	b.n	800f6ae <scalbn+0x86>
 800f67a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f67e:	460b      	mov	r3, r1
 800f680:	3a36      	subs	r2, #54	; 0x36
 800f682:	4432      	add	r2, r6
 800f684:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f688:	428a      	cmp	r2, r1
 800f68a:	dd08      	ble.n	800f69e <scalbn+0x76>
 800f68c:	2d00      	cmp	r5, #0
 800f68e:	a120      	add	r1, pc, #128	; (adr r1, 800f710 <scalbn+0xe8>)
 800f690:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f694:	da1c      	bge.n	800f6d0 <scalbn+0xa8>
 800f696:	a120      	add	r1, pc, #128	; (adr r1, 800f718 <scalbn+0xf0>)
 800f698:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f69c:	e018      	b.n	800f6d0 <scalbn+0xa8>
 800f69e:	2a00      	cmp	r2, #0
 800f6a0:	dd08      	ble.n	800f6b4 <scalbn+0x8c>
 800f6a2:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f6a6:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f6aa:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f6ae:	ec45 4b10 	vmov	d0, r4, r5
 800f6b2:	bd70      	pop	{r4, r5, r6, pc}
 800f6b4:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f6b8:	da19      	bge.n	800f6ee <scalbn+0xc6>
 800f6ba:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f6be:	429e      	cmp	r6, r3
 800f6c0:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f6c4:	dd0a      	ble.n	800f6dc <scalbn+0xb4>
 800f6c6:	a112      	add	r1, pc, #72	; (adr r1, 800f710 <scalbn+0xe8>)
 800f6c8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6cc:	2b00      	cmp	r3, #0
 800f6ce:	d1e2      	bne.n	800f696 <scalbn+0x6e>
 800f6d0:	a30f      	add	r3, pc, #60	; (adr r3, 800f710 <scalbn+0xe8>)
 800f6d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6d6:	f7f0 ff8f 	bl	80005f8 <__aeabi_dmul>
 800f6da:	e7cb      	b.n	800f674 <scalbn+0x4c>
 800f6dc:	a10a      	add	r1, pc, #40	; (adr r1, 800f708 <scalbn+0xe0>)
 800f6de:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6e2:	2b00      	cmp	r3, #0
 800f6e4:	d0b8      	beq.n	800f658 <scalbn+0x30>
 800f6e6:	a10e      	add	r1, pc, #56	; (adr r1, 800f720 <scalbn+0xf8>)
 800f6e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f6ec:	e7b4      	b.n	800f658 <scalbn+0x30>
 800f6ee:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f6f2:	3236      	adds	r2, #54	; 0x36
 800f6f4:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f6f8:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f6fc:	4620      	mov	r0, r4
 800f6fe:	4b0c      	ldr	r3, [pc, #48]	; (800f730 <scalbn+0x108>)
 800f700:	2200      	movs	r2, #0
 800f702:	e7e8      	b.n	800f6d6 <scalbn+0xae>
 800f704:	f3af 8000 	nop.w
 800f708:	c2f8f359 	.word	0xc2f8f359
 800f70c:	01a56e1f 	.word	0x01a56e1f
 800f710:	8800759c 	.word	0x8800759c
 800f714:	7e37e43c 	.word	0x7e37e43c
 800f718:	8800759c 	.word	0x8800759c
 800f71c:	fe37e43c 	.word	0xfe37e43c
 800f720:	c2f8f359 	.word	0xc2f8f359
 800f724:	81a56e1f 	.word	0x81a56e1f
 800f728:	43500000 	.word	0x43500000
 800f72c:	ffff3cb0 	.word	0xffff3cb0
 800f730:	3c900000 	.word	0x3c900000

0800f734 <_init>:
 800f734:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f736:	bf00      	nop
 800f738:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f73a:	bc08      	pop	{r3}
 800f73c:	469e      	mov	lr, r3
 800f73e:	4770      	bx	lr

0800f740 <_fini>:
 800f740:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f742:	bf00      	nop
 800f744:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f746:	bc08      	pop	{r3}
 800f748:	469e      	mov	lr, r3
 800f74a:	4770      	bx	lr
