
FreeFallVer_MainProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f530  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800f6c0  0800f6c0  0001f6c0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fe18  0800fe18  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fe18  0800fe18  0001fe18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fe20  0800fe20  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fe20  0800fe20  0001fe20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fe24  0800fe24  0001fe24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800fe28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          0000038c  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000580  20000580  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010513  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002709  00000000  00000000  00030737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00032e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb8  00000000  00000000  00033df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c08  00000000  00000000  00034ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a47  00000000  00000000  000578b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cef1f  00000000  00000000  0006a2f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00139216  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005774  00000000  00000000  00139268  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f6a8 	.word	0x0800f6a8

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800f6a8 	.word	0x0800f6a8

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <GetSector+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x22>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001012:	d302      	bcc.n	800101a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e04b      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <GetSector+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <GetSector+0x38>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <GetSector+0xd0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e040      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <GetSector+0xd4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d806      	bhi.n	8001046 <GetSector+0x4e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <GetSector+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d302      	bcc.n	8001046 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e035      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GetSector+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x64>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GetSector+0xe0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d302      	bcc.n	800105c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001056:	2303      	movs	r3, #3
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e02a      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GetSector+0xe4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0x7a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <GetSector+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800106c:	2304      	movs	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e01f      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GetSector+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d206      	bcs.n	8001088 <GetSector+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <GetSector+0xe4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d902      	bls.n	8001088 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001082:	2305      	movs	r3, #5
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e014      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GetSector+0xec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d206      	bcs.n	800109e <GetSector+0xa6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <GetSector+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d902      	bls.n	800109e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001098:	2306      	movs	r3, #6
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e009      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GetSector+0xf0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d205      	bcs.n	80010b2 <GetSector+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <GetSector+0xec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	08003ffe 	.word	0x08003ffe
 80010c4:	08007ffe 	.word	0x08007ffe
 80010c8:	08004000 	.word	0x08004000
 80010cc:	0800bffe 	.word	0x0800bffe
 80010d0:	08008000 	.word	0x08008000
 80010d4:	0800ffff 	.word	0x0800ffff
 80010d8:	0800c000 	.word	0x0800c000
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff
 80010e8:	0807ffff 	.word	0x0807ffff

080010ec <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f006 fda7 	bl	8007c50 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff78 	bl	8000ff8 <GetSector>
 8001108:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001116:	69f8      	ldr	r0, [r7, #28]
 8001118:	f7ff ff6e 	bl	8000ff8 <GetSector>
 800111c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001126:	2202      	movs	r2, #2
 8001128:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Flash_Write_Data+0xb8>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	3301      	adds	r3, #1
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Flash_Write_Data+0xb8>)
 800113a:	60d3      	str	r3, [r2, #12]
	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001144:	f006 fef2 	bl	8007f2c <HAL_FLASHEx_Erase>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800114e:	f006 fdb1 	bl	8007cb4 <HAL_FLASH_GetError>
 8001152:	4603      	mov	r3, r0
 8001154:	e022      	b.n	800119c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	461c      	mov	r4, r3
 8001164:	4615      	mov	r5, r2
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2002      	movs	r0, #2
 800116e:	f006 fd1b 	bl	8007ba8 <HAL_FLASH_Program>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3304      	adds	r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e003      	b.n	800118e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001186:	f006 fd95 	bl	8007cb4 <HAL_FLASH_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	e006      	b.n	800119c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	429a      	cmp	r2, r3
 8001194:	dbdf      	blt.n	8001156 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001196:	f006 fd7d 	bl	8007c94 <HAL_FLASH_Lock>

	   return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	20000210 	.word	0x20000210

080011a8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	80fa      	strh	r2, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d000      	beq.n	80011d6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011d4:	e7ef      	b.n	80011b6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Stop>:
#include "stdbool.h"
#include <math.h>
//#include <FLASH_SECTOR_F4.h>
extern bool POSReach;
void Stop() // Stop motor function
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <Stop+0x1c>)
 80011ee:	f007 f973 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Disable Servo Enable
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <Stop+0x1c>)
 80011f8:	f007 f96e 	bl	80084d8 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020800 	.word	0x40020800

08001204 <AlarmReset>:

void AlarmReset() // reset alarm function
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_SET);//Pull Estop pin to 1 (24V)
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <AlarmReset+0x44>)
 800120e:	f007 f963 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_RESET); // trig Alarm Reset Pin
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <AlarmReset+0x44>)
 8001218:	f007 f95e 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f006 fae0 	bl	80077e4 <HAL_Delay>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <AlarmReset+0x44>)
 800122a:	f007 f955 	bl	80084d8 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 800122e:	2201      	movs	r2, #1
 8001230:	2120      	movs	r1, #32
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <AlarmReset+0x48>)
 8001234:	f007 f950 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Enable Servo Enable 
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <AlarmReset+0x48>)
 800123e:	f007 f94b 	bl	80084d8 <HAL_GPIO_WritePin>
		// Turn on the brake
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800

08001250 <Estop>:

void Estop() // Estop function
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);//Pull Estop pin to GND
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Estop+0x14>)
 800125a:	f007 f93d 	bl	80084d8 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <DisableSTOP>:

void DisableSTOP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DisableSTOP+0x14>)
 8001272:	f007 f931 	bl	80084d8 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800

08001280 <JogMoveUp>:

void JogMoveUp() // Move up by pressing the JOG button on the UI
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_SET); // Choose the direction
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <JogMoveUp+0x20>)
 800128c:	f007 f924 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <JogMoveUp+0x24>)
 8001296:	f007 f91f 	bl	80084d8 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800

080012a8 <JogMoveDown>:

void JogMoveDown()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // Choose the direction
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <JogMoveDown+0x20>)
 80012b4:	f007 f910 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <JogMoveDown+0x24>)
 80012be:	f007 f90b 	bl	80084d8 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800

080012d0 <DriverInit>:
{
	HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // Speed Mode
}

bool DriverInit()
{	
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // CN1-14 - PLSCLR	
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <DriverInit+0x70>)
 80012dc:	f007 f8fc 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port,Speed2_Not_PE7_15_Pin,GPIO_PIN_RESET);//CN1-15 SPDLIM/TLIM
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <DriverInit+0x70>)
 80012e6:	f007 f8f7 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CCWLIM_Not_PE12_39_GPIO_Port,CCWLIM_Not_PE12_39_Pin,GPIO_PIN_RESET);//CN1-39 PLSINH
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <DriverInit+0x70>)
 80012f2:	f007 f8f1 	bl	80084d8 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET);// CN-38 - CWLIM
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4810      	ldr	r0, [pc, #64]	; (8001340 <DriverInit+0x70>)
 80012fe:	f007 f8eb 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CWLIM_Not_PE14_13_GPIO_Port,CWLIM_Not_PE14_13_Pin,GPIO_PIN_SET);//CN1-13 CCWLIM
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <DriverInit+0x70>)
 800130a:	f007 f8e5 	bl	80084d8 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);// First, the driver will be in Emergency Stop
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <DriverInit+0x74>)
 8001314:	f007 f8e0 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <DriverInit+0x78>)
 800131e:	f007 f8db 	bl	80084d8 <HAL_GPIO_WritePin>
		
		HAL_GPIO_WritePin(PA12_LINE_DRV_EN_GPIO_Port, PA12_LINE_DRV_EN_Pin, GPIO_PIN_RESET);// Enable U14 DriveLine IC for generating pulses
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <DriverInit+0x7c>)
 800132a:	f007 f8d5 	bl	80084d8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // DIR	
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DriverInit+0x70>)
 8001336:	f007 f8cf 	bl	80084d8 <HAL_GPIO_WritePin>
	
		return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <ReadLogicF7000Out>:
uint16_t ReadLogicF7000Out(void)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint16_t OuputState = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
	uint8_t i=0;
 800135a:	2300      	movs	r3, #0
 800135c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_23_TYPEOUT_GPIO_Port,CN1_23_TYPEOUT_Pin)) // Read CN1-23-TYPEOUT
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	485e      	ldr	r0, [pc, #376]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001362:	f007 f8a1 	bl	80084a8 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <ReadLogicF7000Out+0x30>
	{
		OuputState = OuputState | (1 << i); // Set ith bit		
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	3301      	adds	r3, #1
 8001384:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin)) // Read CN1-48-BRAKE
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4855      	ldr	r0, [pc, #340]	; (80014e0 <ReadLogicF7000Out+0x190>)
 800138a:	f007 f88d 	bl	80084a8 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <ReadLogicF7000Out+0x58>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	3301      	adds	r3, #1
 80013ac:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin)) // Read CN1-22-RDY
 80013ae:	2104      	movs	r1, #4
 80013b0:	484b      	ldr	r0, [pc, #300]	; (80014e0 <ReadLogicF7000Out+0x190>)
 80013b2:	f007 f879 	bl	80084a8 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <ReadLogicF7000Out+0x80>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	3301      	adds	r3, #1
 80013d4:	717b      	strb	r3, [r7, #5]
	POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);	// Check if the position is reached or not
 80013d6:	2102      	movs	r1, #2
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <ReadLogicF7000Out+0x194>)
 80013da:	f007 f865 	bl	80084a8 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013ec:	701a      	strb	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin)) // Read CN1-47
	if(POSReach)
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <ReadLogicF7000Out+0xba>
	{		
		OuputState = OuputState | (1 << i); // Set ith bit
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3301      	adds	r3, #1
 800140e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_21_SPDOUT_TRQOUT_GPIO_Port,CN1_21_SPDOUT_TRQOUT_Pin)) // Read CN1-21
 8001410:	2108      	movs	r1, #8
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <ReadLogicF7000Out+0x190>)
 8001414:	f007 f848 	bl	80084a8 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <ReadLogicF7000Out+0xe2>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_46_ALARM_GPIO_Port,CN1_46_ALARM_Pin)) // Read CN1-22-
 8001438:	2101      	movs	r1, #1
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800143c:	f007 f834 	bl	80084a8 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <ReadLogicF7000Out+0x10a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	3301      	adds	r3, #1
 800145e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_20_PCWOUT_PTQOUT_GPIO_Port,CN1_20_PCWOUT_PTQOUT_Pin)) // Read CN1-20
 8001460:	2110      	movs	r1, #16
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001464:	f007 f820 	bl	80084a8 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <ReadLogicF7000Out+0x132>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001482:	797b      	ldrb	r3, [r7, #5]
 8001484:	3301      	adds	r3, #1
 8001486:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_45_NCWOUT_NTQOUT_GPIO_Port,CN1_45_NCWOUT_NTQOUT_Pin)) // Read CN1-45
 8001488:	2104      	movs	r1, #4
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800148c:	f007 f80c 	bl	80084a8 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <ReadLogicF7000Out+0x15a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	3301      	adds	r3, #1
 80014ae:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_19_ZSPD_GPIO_Port,CN1_19_ZSPD_Pin)) // Read CN1-19-ZSPD
 80014b0:	2108      	movs	r1, #8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <ReadLogicF7000Out+0x19c>)
 80014b4:	f006 fff8 	bl	80084a8 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <ReadLogicF7000Out+0x182>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	80fb      	strh	r3, [r7, #6]
	}	
	return OuputState;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	20000437 	.word	0x20000437
 80014ec:	40020400 	.word	0x40020400

080014f0 <ExtractMotionCode>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void ExtractMotionCode () // Extract command from the UI
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	memset (MotionCode, '\0', sizeof (MotionCode)); // reset MotionCode
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <ExtractMotionCode+0xa8>)
 80014fc:	f009 fbee 	bl	800acdc <memset>
	memset (DataRegion, '\0', sizeof (DataRegion)); // reset DataRegion
 8001500:	2228      	movs	r2, #40	; 0x28
 8001502:	2100      	movs	r1, #0
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <ExtractMotionCode+0xac>)
 8001506:	f009 fbe9 	bl	800acdc <memset>
	uint8_t j = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 800150e:	2300      	movs	r3, #0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	e012      	b.n	800153a <ExtractMotionCode+0x4a>
	{
		if (RxPCBuff[i] != 0) // coppy the command from UI to another array, remove the null character at the beginning
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <ExtractMotionCode+0x44>
		{
			DataRegion[j] = RxPCBuff[i]; // coppy to DataRegion
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	491e      	ldr	r1, [pc, #120]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001526:	5c8a      	ldrb	r2, [r1, r2]
 8001528:	b2d1      	uxtb	r1, r2
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <ExtractMotionCode+0xac>)
 800152c:	54d1      	strb	r1, [r2, r3]
			j++;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	3301      	adds	r3, #1
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	2b27      	cmp	r3, #39	; 0x27
 800153e:	d9e9      	bls.n	8001514 <ExtractMotionCode+0x24>
		}
	}
	j = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
	char *token;
	token = strtok((char *)DataRegion, "/");	// Split the command ~ remove the / character
 8001544:	4917      	ldr	r1, [pc, #92]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <ExtractMotionCode+0xac>)
 8001548:	f00b f8a6 	bl	800c698 <strtok>
 800154c:	6038      	str	r0, [r7, #0]
	while (token != NULL)
 800154e:	e016      	b.n	800157e <ExtractMotionCode+0x8e>
    {
				MotionCode[j] = (atof(token)); // covert to float type
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f009 fb95 	bl	800ac80 <atof>
 8001556:	ec53 2b10 	vmov	r2, r3, d0
 800155a:	79fc      	ldrb	r4, [r7, #7]
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb42 	bl	8000be8 <__aeabi_d2f>
 8001564:	4602      	mov	r2, r0
 8001566:	490c      	ldr	r1, [pc, #48]	; (8001598 <ExtractMotionCode+0xa8>)
 8001568:	00a3      	lsls	r3, r4, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
			  //MotionCode[j] = (atoi(token)); // covert to int type
        token = strtok(NULL, "/");
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001570:	2000      	movs	r0, #0
 8001572:	f00b f891 	bl	800c698 <strtok>
 8001576:	6038      	str	r0, [r7, #0]
				j++;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3301      	adds	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
	while (token != NULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e5      	bne.n	8001550 <ExtractMotionCode+0x60>
    }
	memset (RxPCBuff, '\0', sizeof (RxPCBuff)); // reset
 8001584:	2228      	movs	r2, #40	; 0x28
 8001586:	2100      	movs	r1, #0
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <ExtractMotionCode+0xb0>)
 800158a:	f009 fba7 	bl	800acdc <memset>
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	2000051c 	.word	0x2000051c
 800159c:	20000384 	.word	0x20000384
 80015a0:	2000033c 	.word	0x2000033c
 80015a4:	0800f6c0 	.word	0x0800f6c0

080015a8 <ReadMultiRegister>:


void ReadMultiRegister(uint16_t StartingAddress, uint8_t NoOfRegister) // Read data from the Driver
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	717b      	strb	r3, [r7, #5]
	// Prepare data frame -- BEGIN
	// Data preparation
	TxDataToDriver[0] = DriverID;//SerialID = 1 of the driver
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <ReadMultiRegister+0xe8>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
	TxDataToDriver[1] = 3;//Read Regis, function code
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <ReadMultiRegister+0xe8>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	705a      	strb	r2, [r3, #1]
	TxDataToDriver[2] = StartingAddress / 256; // Register Address High byte
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <ReadMultiRegister+0xe8>)
 80015ce:	709a      	strb	r2, [r3, #2]
    TxDataToDriver[3] = StartingAddress % 256; // Register Address LOW byte
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <ReadMultiRegister+0xe8>)
 80015d6:	70da      	strb	r2, [r3, #3]
	TxDataToDriver[4] = 0; // Number of Register HIGH byte
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <ReadMultiRegister+0xe8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	711a      	strb	r2, [r3, #4]
	TxDataToDriver[5] = NoOfRegister; // Number of Register LOW byte
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <ReadMultiRegister+0xe8>)
 80015e0:	797b      	ldrb	r3, [r7, #5]
 80015e2:	7153      	strb	r3, [r2, #5]

	//CRC BEGIN=======
				uint16_t crc = 0xFFFF;
 80015e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e8:	82fb      	strh	r3, [r7, #22]
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	e026      	b.n	800163e <ReadMultiRegister+0x96>
				{	crc ^= (uint16_t)TxDataToDriver[pos];          // XOR byte into least sig. byte of crc
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <ReadMultiRegister+0xe8>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	4053      	eors	r3, r2
 80015fe:	82fb      	strh	r3, [r7, #22]
					for (int i = 8; i != 0; i--)
 8001600:	2308      	movs	r3, #8
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e015      	b.n	8001632 <ReadMultiRegister+0x8a>
					{    // Loop over each bit
						if ((crc & 0x0001) != 0)
 8001606:	8afb      	ldrh	r3, [r7, #22]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00a      	beq.n	8001626 <ReadMultiRegister+0x7e>
						{      // If the LSB is set
							crc >>= 1;                    // Shift right and XOR 0xA001
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	82fb      	strh	r3, [r7, #22]
							crc ^= 0xA001;
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800161c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001620:	43db      	mvns	r3, r3
 8001622:	82fb      	strh	r3, [r7, #22]
 8001624:	e002      	b.n	800162c <ReadMultiRegister+0x84>
						}
						else                            // Else LSB is not set
							crc >>= 1;                    // Just shift right
 8001626:	8afb      	ldrh	r3, [r7, #22]
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	82fb      	strh	r3, [r7, #22]
					for (int i = 8; i != 0; i--)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e6      	bne.n	8001606 <ReadMultiRegister+0x5e>
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	3301      	adds	r3, #1
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b05      	cmp	r3, #5
 8001642:	ddd5      	ble.n	80015f0 <ReadMultiRegister+0x48>
					}
				}
	TxDataToDriver[6]= (uint8_t)(crc&0x00FF);;//(uint8_t)(TemDat16&0xFF);
 8001644:	8afb      	ldrh	r3, [r7, #22]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <ReadMultiRegister+0xe8>)
 800164a:	719a      	strb	r2, [r3, #6]
	TxDataToDriver[7]=(uint8_t)((crc>>8)&0x00FF);
 800164c:	8afb      	ldrh	r3, [r7, #22]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29b      	uxth	r3, r3
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <ReadMultiRegister+0xe8>)
 8001656:	71da      	strb	r2, [r3, #7]
	//CRC=====END/
	// Prepare data frame -- END
	// Send data use UART5
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
 8001658:	2200      	movs	r2, #0
 800165a:	2101      	movs	r1, #1
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <ReadMultiRegister+0xec>)
 800165e:	f006 ff3b 	bl	80084d8 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f006 f8be 	bl	80077e4 <HAL_Delay>
	HAL_UART_Transmit(&huart5,TxDataToDriver,8,200); // use UART5 to send
 8001668:	23c8      	movs	r3, #200	; 0xc8
 800166a:	2208      	movs	r2, #8
 800166c:	4908      	ldr	r1, [pc, #32]	; (8001690 <ReadMultiRegister+0xe8>)
 800166e:	480a      	ldr	r0, [pc, #40]	; (8001698 <ReadMultiRegister+0xf0>)
 8001670:	f008 fadb 	bl	8009c2a <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <ReadMultiRegister+0xec>)
 800167a:	f006 ff2d 	bl	80084d8 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
 800167e:	2201      	movs	r2, #1
 8001680:	4906      	ldr	r1, [pc, #24]	; (800169c <ReadMultiRegister+0xf4>)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <ReadMultiRegister+0xf0>)
 8001684:	f008 fb63 	bl	8009d4e <HAL_UART_Receive_IT>

//	HAL_GPIO_WritePin(PB15_485_MCU_PC_DIR_GPIO_Port, PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
//	HAL_UART_Transmit(&huart3,TxDataToDriver,8,500); // use UART3 to send
//	HAL_GPIO_WritePin(PB15_485_MCU_PC_DIR_GPIO_Port, PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
//	HAL_UART_Receive_IT(&huart3,&RxDriverData,1); // Receive 1 byte each time
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000040c 	.word	0x2000040c
 8001694:	40021000 	.word	0x40021000
 8001698:	200002b4 	.word	0x200002b4
 800169c:	200003ad 	.word	0x200003ad

080016a0 <LoadSavedParam>:



void LoadSavedParam (uint32_t StartSectorAddress, float *_Param)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b09f      	sub	sp, #124	; 0x7c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	uint8_t LoadDataBuff[100];

	Flash_Read_Data(StartSectorAddress, (uint32_t *)LoadDataBuff, numofwords);
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <LoadSavedParam+0x74>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fd76 	bl	80011a8 <Flash_Read_Data>

	uint8_t	j = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char *token;
	token = strtok((char *)LoadDataBuff, "/");	// Split the command ~ remove the / character
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4914      	ldr	r1, [pc, #80]	; (8001718 <LoadSavedParam+0x78>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00a ffe5 	bl	800c698 <strtok>
 80016ce:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL)
 80016d0:	e017      	b.n	8001702 <LoadSavedParam+0x62>
    {
				_Param[j] = (atof(token)); // covert to float type
 80016d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80016d4:	f009 fad4 	bl	800ac80 <atof>
 80016d8:	ec51 0b10 	vmov	r0, r1, d0
 80016dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	18d4      	adds	r4, r2, r3
 80016e6:	f7ff fa7f 	bl	8000be8 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, "/");
 80016ee:	490a      	ldr	r1, [pc, #40]	; (8001718 <LoadSavedParam+0x78>)
 80016f0:	2000      	movs	r0, #0
 80016f2:	f00a ffd1 	bl	800c698 <strtok>
 80016f6:	6738      	str	r0, [r7, #112]	; 0x70
				j++;
 80016f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016fc:	3301      	adds	r3, #1
 80016fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (token != NULL)
 8001702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e4      	bne.n	80016d2 <LoadSavedParam+0x32>
    }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	377c      	adds	r7, #124	; 0x7c
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	2000000c 	.word	0x2000000c
 8001718:	0800f6c0 	.word	0x0800f6c0

0800171c <SaveSystemParams>:

void SaveSystemParams (uint8_t *NoOfWords)
{
 800171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001720:	b0d1      	sub	sp, #324	; 0x144
 8001722:	af22      	add	r7, sp, #136	; 0x88
 8001724:	6678      	str	r0, [r7, #100]	; 0x64
	char SaveBuffer[80];
	TxPCLen = sprintf(SaveBuffer,"%.2f/%d/%d/%d/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%d/%.2f/%d"
 8001726:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <SaveSystemParams+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff0c 	bl	8000548 <__aeabi_f2d>
 8001730:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <SaveSystemParams+0x1bc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	663b      	str	r3, [r7, #96]	; 0x60
 800173a:	4b68      	ldr	r3, [pc, #416]	; (80018dc <SaveSystemParams+0x1c0>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	657b      	str	r3, [r7, #84]	; 0x54
 8001740:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <SaveSystemParams+0x1c4>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	653b      	str	r3, [r7, #80]	; 0x50
 8001746:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <SaveSystemParams+0x1c8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <SaveSystemParams+0x1cc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fef5 	bl	8000548 <__aeabi_f2d>
 800175e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001762:	4b62      	ldr	r3, [pc, #392]	; (80018ec <SaveSystemParams+0x1d0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8001770:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <SaveSystemParams+0x1d4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <SaveSystemParams+0x1d8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fee0 	bl	8000548 <__aeabi_f2d>
 8001788:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800178c:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <SaveSystemParams+0x1dc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fed9 	bl	8000548 <__aeabi_f2d>
 8001796:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800179a:	4b58      	ldr	r3, [pc, #352]	; (80018fc <SaveSystemParams+0x1e0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fed2 	bl	8000548 <__aeabi_f2d>
 80017a4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80017a8:	4b55      	ldr	r3, [pc, #340]	; (8001900 <SaveSystemParams+0x1e4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80017b6:	4b53      	ldr	r3, [pc, #332]	; (8001904 <SaveSystemParams+0x1e8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fec4 	bl	8000548 <__aeabi_f2d>
 80017c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <SaveSystemParams+0x1ec>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe febd 	bl	8000548 <__aeabi_f2d>
 80017ce:	4682      	mov	sl, r0
 80017d0:	468b      	mov	fp, r1
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <SaveSystemParams+0x1f0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe feb6 	bl	8000548 <__aeabi_f2d>
 80017dc:	4680      	mov	r8, r0
 80017de:	4689      	mov	r9, r1
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <SaveSystemParams+0x1f4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe feaf 	bl	8000548 <__aeabi_f2d>
 80017ea:	4604      	mov	r4, r0
 80017ec:	460d      	mov	r5, r1
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <SaveSystemParams+0x1f8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b48      	ldr	r3, [pc, #288]	; (8001918 <SaveSystemParams+0x1fc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fea5 	bl	8000548 <__aeabi_f2d>
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <SaveSystemParams+0x200>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	f107 0668 	add.w	r6, r7, #104	; 0x68
 8001806:	9320      	str	r3, [sp, #128]	; 0x80
 8001808:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	911c      	str	r1, [sp, #112]	; 0x70
 8001810:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8001814:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 8001818:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 800181c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001820:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001824:	ed97 7b04 	vldr	d7, [r7, #16]
 8001828:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800182c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001830:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001834:	ed97 7b08 	vldr	d7, [r7, #32]
 8001838:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800183c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001840:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001844:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001848:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800184c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001850:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001854:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001858:	ed8d 7b06 	vstr	d7, [sp, #24]
 800185c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001860:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001864:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001866:	9102      	str	r1, [sp, #8]
 8001868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800186a:	9101      	str	r1, [sp, #4]
 800186c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001874:	492a      	ldr	r1, [pc, #168]	; (8001920 <SaveSystemParams+0x204>)
 8001876:	4630      	mov	r0, r6
 8001878:	f00a f8b8 	bl	800b9ec <siprintf>
 800187c:	4603      	mov	r3, r0
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <SaveSystemParams+0x208>)
 8001882:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
										 PullingPoint1, PullingPoint2, PullingPoint3, PullingPoint4,
                     PullingAcc1, PullingAcc2, PullingAcc3,
					 PullingAcc4, PullingAcc5, DistCoeff,
					 DroppingAccel, DroppingAccelDistance, DropAccelSlope, DroppingDecel, DropDecelSlope); // Combine to a string
	*NoOfWords = (strlen(SaveBuffer)/4)+((strlen(SaveBuffer)%4)!=0);
 8001884:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fca1 	bl	80001d0 <strlen>
 800188e:	4603      	mov	r3, r0
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	b2dc      	uxtb	r4, r3
 8001894:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fc99 	bl	80001d0 <strlen>
 800189e:	4603      	mov	r3, r0
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	2300      	moveq	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4423      	add	r3, r4
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b4:	701a      	strb	r2, [r3, #0]
	Flash_Write_Data(MemoryAddress , (uint32_t *)SaveBuffer, *NoOfWords);
 80018b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018c0:	4619      	mov	r1, r3
 80018c2:	4819      	ldr	r0, [pc, #100]	; (8001928 <SaveSystemParams+0x20c>)
 80018c4:	f7ff fc12 	bl	80010ec <Flash_Write_Data>
}
 80018c8:	bf00      	nop
 80018ca:	37bc      	adds	r7, #188	; 0xbc
 80018cc:	46bd      	mov	sp, r7
 80018ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d2:	bf00      	nop
 80018d4:	20000464 	.word	0x20000464
 80018d8:	20000469 	.word	0x20000469
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000468 	.word	0x20000468
 80018e4:	20000494 	.word	0x20000494
 80018e8:	20000498 	.word	0x20000498
 80018ec:	2000049c 	.word	0x2000049c
 80018f0:	200004a0 	.word	0x200004a0
 80018f4:	20000480 	.word	0x20000480
 80018f8:	20000484 	.word	0x20000484
 80018fc:	20000488 	.word	0x20000488
 8001900:	2000048c 	.word	0x2000048c
 8001904:	20000490 	.word	0x20000490
 8001908:	2000053c 	.word	0x2000053c
 800190c:	20000470 	.word	0x20000470
 8001910:	20000478 	.word	0x20000478
 8001914:	20000541 	.word	0x20000541
 8001918:	20000474 	.word	0x20000474
 800191c:	20000540 	.word	0x20000540
 8001920:	0800f6c4 	.word	0x0800f6c4
 8001924:	20000414 	.word	0x20000414
 8001928:	08040000 	.word	0x08040000
 800192c:	00000000 	.word	0x00000000

08001930 <LinearGeneration>:

void LinearGeneration (float *var, float slope, float Amplitude)
// Amplitude is the limit of the value
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	ed87 0a02 	vstr	s0, [r7, #8]
 800193c:	edc7 0a01 	vstr	s1, [r7, #4]

//	float ReturnValue;
//	ReturnValue = (InitialValue + (float)(slope*Time*0.001)); //
	if (slope >= 0)
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	db0d      	blt.n	800196a <LinearGeneration+0x3a>
	{
		if (*var >= Amplitude)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ed97 7a01 	vldr	s14, [r7, #4]
 8001958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001960:	d811      	bhi.n	8001986 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
				return;
 8001968:	e036      	b.n	80019d8 <LinearGeneration+0xa8>
			}
	}
	else
	{
		if (*var <= Amplitude)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ed97 7a01 	vldr	s14, [r7, #4]
 8001974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	db03      	blt.n	8001986 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	601a      	str	r2, [r3, #0]
				return;
 8001984:	e028      	b.n	80019d8 <LinearGeneration+0xa8>
			}
	}
	*var += slope*SampleTime*0.001; // *0.001 to convert to second
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fddc 	bl	8000548 <__aeabi_f2d>
 8001990:	4604      	mov	r4, r0
 8001992:	460d      	mov	r5, r1
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <LinearGeneration+0xb8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	ee17 0a90 	vmov	r0, s15
 80019ac:	f7fe fdcc 	bl	8000548 <__aeabi_f2d>
 80019b0:	a30b      	add	r3, pc, #44	; (adr r3, 80019e0 <LinearGeneration+0xb0>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe fe1f 	bl	80005f8 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4620      	mov	r0, r4
 80019c0:	4629      	mov	r1, r5
 80019c2:	f7fe fc63 	bl	800028c <__adddf3>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f90b 	bl	8000be8 <__aeabi_d2f>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bdb0      	pop	{r4, r5, r7, pc}
 80019de:	bf00      	nop
 80019e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019e4:	3f50624d 	.word	0x3f50624d
 80019e8:	20000468 	.word	0x20000468

080019ec <StopPulseGenerating>:


void StopPulseGenerating()
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	PulseGenerationFlag = false; //
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <StopPulseGenerating+0x34>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 80019f6:	480b      	ldr	r0, [pc, #44]	; (8001a24 <StopPulseGenerating+0x38>)
 80019f8:	f007 faba 	bl	8008f70 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_RESET);//Reset Pin status
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <StopPulseGenerating+0x3c>)
 8001a04:	f006 fd68 	bl	80084d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port,PC8_PR_Pin, GPIO_PIN_RESET);//Reset Pin status
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <StopPulseGenerating+0x40>)
 8001a10:	f006 fd62 	bl	80084d8 <HAL_GPIO_WritePin>
	StartPositionCount = false;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <StopPulseGenerating+0x44>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000436 	.word	0x20000436
 8001a24:	2000026c 	.word	0x2000026c
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	20000440 	.word	0x20000440

08001a34 <InitPulseGenerating>:
void InitPulseGenerating()
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); //
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <InitPulseGenerating+0x28>)
 8001a40:	f006 fd4a 	bl	80084d8 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <InitPulseGenerating+0x2c>)
 8001a4c:	f006 fd44 	bl	80084d8 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <InitPulseGenerating+0x30>)
 8001a52:	f007 fa1d 	bl	8008e90 <HAL_TIM_Base_Start_IT>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40021000 	.word	0x40021000
 8001a64:	2000026c 	.word	0x2000026c

08001a68 <WaitingMiliSecond>:
bool WaitingMiliSecond(uint16_t TimeInMiliSecond)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	StoppingTimeCount++;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <WaitingMiliSecond+0x44>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <WaitingMiliSecond+0x44>)
 8001a7c:	801a      	strh	r2, [r3, #0]
	if (StoppingTimeCount >= (uint16_t)(TimeInMiliSecond/SampleTime))
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <WaitingMiliSecond+0x48>)
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <WaitingMiliSecond+0x44>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d804      	bhi.n	8001a9c <WaitingMiliSecond+0x34>
	{
		StoppingTimeCount = 0;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <WaitingMiliSecond+0x44>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	801a      	strh	r2, [r3, #0]
		return true;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <WaitingMiliSecond+0x36>
	}
	return false;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000458 	.word	0x20000458
 8001ab0:	20000468 	.word	0x20000468
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <CalculateTimer3Period>:

int CalculateTimer3Period (bool DriverType, float speed)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	ed87 0a00 	vstr	s0, [r7]
 8001ac4:	71fb      	strb	r3, [r7, #7]
	// DriverType = true ->  Higen FDA7000 Driver
	// DriverType = false -> ASDA A3 Driver
	// Speed in rpm
	if (DriverType) // Higen FDA7000 Driver
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d037      	beq.n	8001b3c <CalculateTimer3Period+0x84>
	{
		return (int)((float)(120000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001acc:	edd7 7a00 	vldr	s15, [r7]
 8001ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8001ad4:	ee17 0a90 	vmov	r0, s15
 8001ad8:	f7fe fd36 	bl	8000548 <__aeabi_f2d>
 8001adc:	4604      	mov	r4, r0
 8001ade:	460d      	mov	r5, r1
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <CalculateTimer3Period+0x110>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aec:	ee17 0a90 	vmov	r0, s15
 8001af0:	f7fe fd2a 	bl	8000548 <__aeabi_f2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fd7c 	bl	80005f8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	a12c      	add	r1, pc, #176	; (adr r1, 8001bb8 <CalculateTimer3Period+0x100>)
 8001b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b0a:	f7fe fe9f 	bl	800084c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f867 	bl	8000be8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd13 	bl	8000548 <__aeabi_f2d>
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <CalculateTimer3Period+0x114>)
 8001b28:	f7fe fbb0 	bl	800028c <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f810 	bl	8000b58 <__aeabi_d2iz>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	e036      	b.n	8001baa <CalculateTimer3Period+0xf2>
	}
	else
	{
		return (int)((float)(15000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001b3c:	edd7 7a00 	vldr	s15, [r7]
 8001b40:	eef0 7ae7 	vabs.f32	s15, s15
 8001b44:	ee17 0a90 	vmov	r0, s15
 8001b48:	f7fe fcfe 	bl	8000548 <__aeabi_f2d>
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	460d      	mov	r5, r1
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <CalculateTimer3Period+0x110>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5c:	ee17 0a90 	vmov	r0, s15
 8001b60:	f7fe fcf2 	bl	8000548 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	a112      	add	r1, pc, #72	; (adr r1, 8001bc0 <CalculateTimer3Period+0x108>)
 8001b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b7a:	f7fe fe67 	bl	800084c <__aeabi_ddiv>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f82f 	bl	8000be8 <__aeabi_d2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fcdb 	bl	8000548 <__aeabi_f2d>
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <CalculateTimer3Period+0x114>)
 8001b98:	f7fe fb78 	bl	800028c <__adddf3>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7fe ffd8 	bl	8000b58 <__aeabi_d2iz>
 8001ba8:	4603      	mov	r3, r0
	}
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	419c9c38 	.word	0x419c9c38
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	416c9c38 	.word	0x416c9c38
 8001bc8:	2000000a 	.word	0x2000000a
 8001bcc:	3fe00000 	.word	0x3fe00000

08001bd0 <CheckGoingToRefPosition>:

bool CheckGoingToRefPosition(bool _direction, int RefPulsePosition) // return true when finish going down, else return false;
// direction = true => go down, false => go up
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
	if (MotorDriver) // FDA7000 Driver, PosCmd based
 8001bdc:	4b9d      	ldr	r3, [pc, #628]	; (8001e54 <CheckGoingToRefPosition+0x284>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80c5 	beq.w	8001d70 <CheckGoingToRefPosition+0x1a0>
	{
		//if (abs(RefPulsePosition - EgearRatio*PulseSimuCount) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/120)) // Start reducing the speed
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/60))
 8001be6:	4b9c      	ldr	r3, [pc, #624]	; (8001e58 <CheckGoingToRefPosition+0x288>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	1ad2      	subs	r2, r2, r3
 8001bee:	4b9b      	ldr	r3, [pc, #620]	; (8001e5c <CheckGoingToRefPosition+0x28c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bf8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bfc:	4b98      	ldr	r3, [pc, #608]	; (8001e60 <CheckGoingToRefPosition+0x290>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4b98      	ldr	r3, [pc, #608]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4997      	ldr	r1, [pc, #604]	; (8001e68 <CheckGoingToRefPosition+0x298>)
 8001c0c:	fb81 0103 	smull	r0, r1, r1, r3
 8001c10:	10c9      	asrs	r1, r1, #3
 8001c12:	17db      	asrs	r3, r3, #31
 8001c14:	1acb      	subs	r3, r1, r3
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dc3e      	bgt.n	8001c98 <CheckGoingToRefPosition+0xc8>
		{
			if (_direction) // go down
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <CheckGoingToRefPosition+0x72>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20); //-EpsilonPulling means the spd is negative
 8001c20:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	eef1 7a67 	vneg.f32	s15, s15
 8001c2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c32:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001c36:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3a:	488d      	ldr	r0, [pc, #564]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001c3c:	f7ff fe78 	bl	8001930 <LinearGeneration>
 8001c40:	e00d      	b.n	8001c5e <CheckGoingToRefPosition+0x8e>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20); //-EpsilonPulling means the spd is negative
 8001c42:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c50:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	4885      	ldr	r0, [pc, #532]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001c5a:	f7ff fe69 	bl	8001930 <LinearGeneration>

			}
			if (SpeedCmd != 0)
 8001c5e:	4b84      	ldr	r3, [pc, #528]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d05f      	beq.n	8001d2e <CheckGoingToRefPosition+0x15e>
			{
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001c6e:	4b79      	ldr	r3, [pc, #484]	; (8001e54 <CheckGoingToRefPosition+0x284>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4a7f      	ldr	r2, [pc, #508]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001c74:	edd2 7a00 	vldr	s15, [r2]
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff1b 	bl	8001ab8 <CalculateTimer3Period>
 8001c82:	4603      	mov	r3, r0
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <CheckGoingToRefPosition+0x2a4>)
 8001c88:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8001c8a:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <CheckGoingToRefPosition+0x2a8>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001c90:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <CheckGoingToRefPosition+0x2ac>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	e04a      	b.n	8001d2e <CheckGoingToRefPosition+0x15e>
			}
		}
		else // Acclerate going
		{
			// Ramping the speed cmd
			if (_direction) // go down
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d014      	beq.n	8001cc8 <CheckGoingToRefPosition+0xf8>
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001c9e:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cac:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	ee07 3a10 	vmov	s14, r3
 8001cb4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001cb8:	eef0 0a47 	vmov.f32	s1, s14
 8001cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc0:	486b      	ldr	r0, [pc, #428]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001cc2:	f7ff fe35 	bl	8001930 <LinearGeneration>
 8001cc6:	e016      	b.n	8001cf6 <CheckGoingToRefPosition+0x126>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed); //-EpsilonPulling means the spd is negative
 8001cc8:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	eef1 7a67 	vneg.f32	s15, s15
 8001cd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cda:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	425b      	negs	r3, r3
 8001ce0:	ee07 3a10 	vmov	s14, r3
 8001ce4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ce8:	eef0 0a47 	vmov.f32	s1, s14
 8001cec:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf0:	485f      	ldr	r0, [pc, #380]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001cf2:	f7ff fe1d 	bl	8001930 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001cf6:	4b5e      	ldr	r3, [pc, #376]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d013      	beq.n	8001d2e <CheckGoingToRefPosition+0x15e>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001d06:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <CheckGoingToRefPosition+0x284>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001d0c:	edd2 7a00 	vldr	s15, [r2]
 8001d10:	eeb0 0a67 	vmov.f32	s0, s15
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fecf 	bl	8001ab8 <CalculateTimer3Period>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b55      	ldr	r3, [pc, #340]	; (8001e74 <CheckGoingToRefPosition+0x2a4>)
 8001d20:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8001d22:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <CheckGoingToRefPosition+0x2a8>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001d28:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <CheckGoingToRefPosition+0x2ac>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
			}

		}
		if ( abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 500) // Reach the ref position
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <CheckGoingToRefPosition+0x288>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	1ad2      	subs	r2, r2, r3
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <CheckGoingToRefPosition+0x28c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8001d40:	f2c0 80f1 	blt.w	8001f26 <CheckGoingToRefPosition+0x356>
 8001d44:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <CheckGoingToRefPosition+0x288>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	1ad2      	subs	r2, r2, r3
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <CheckGoingToRefPosition+0x28c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d56:	f300 80e6 	bgt.w	8001f26 <CheckGoingToRefPosition+0x356>
		{
			Timer3CountPeriod = 0;
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <CheckGoingToRefPosition+0x2a4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

			StopPulseGenerating();
 8001d68:	f7ff fe40 	bl	80019ec <StopPulseGenerating>
			return true;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0db      	b.n	8001f28 <CheckGoingToRefPosition+0x358>
		}
	}
	else // ASDA A3, Actual Encoder based
	{
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/90)) // Start reducing the speed
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <CheckGoingToRefPosition+0x288>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <CheckGoingToRefPosition+0x28c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001d82:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <CheckGoingToRefPosition+0x290>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	493a      	ldr	r1, [pc, #232]	; (8001e80 <CheckGoingToRefPosition+0x2b0>)
 8001d96:	fb81 0103 	smull	r0, r1, r1, r3
 8001d9a:	4419      	add	r1, r3
 8001d9c:	1109      	asrs	r1, r1, #4
 8001d9e:	17db      	asrs	r3, r3, #31
 8001da0:	1acb      	subs	r3, r1, r3
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dc3e      	bgt.n	8001e24 <CheckGoingToRefPosition+0x254>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <CheckGoingToRefPosition+0x1fe>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20);
 8001dac:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	eef1 7a67 	vneg.f32	s15, s15
 8001db6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbe:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	482a      	ldr	r0, [pc, #168]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001dc8:	f7ff fdb2 	bl	8001930 <LinearGeneration>
 8001dcc:	e00d      	b.n	8001dea <CheckGoingToRefPosition+0x21a>
				//SpeedCmd = LinearGeneration(RunningTime2,-GoingAcceleration*10,PrePullingSpeed,20,PullingSpeed); //-EpsilonPulling means the spd is negative
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20);
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ddc:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	4822      	ldr	r0, [pc, #136]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001de6:	f7ff fda3 	bl	8001930 <LinearGeneration>
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10, PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
			}
			if (SpeedCmd != 0)
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d077      	beq.n	8001eea <CheckGoingToRefPosition+0x31a>
			{
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <CheckGoingToRefPosition+0x284>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001e00:	edd2 7a00 	vldr	s15, [r2]
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe55 	bl	8001ab8 <CalculateTimer3Period>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <CheckGoingToRefPosition+0x2a4>)
 8001e14:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <CheckGoingToRefPosition+0x2a8>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <CheckGoingToRefPosition+0x2ac>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e062      	b.n	8001eea <CheckGoingToRefPosition+0x31a>
		}

		else
		{
			// Ramping the speed cmd
			if (_direction) // go down
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d02c      	beq.n	8001e84 <CheckGoingToRefPosition+0x2b4>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	ee07 3a10 	vmov	s14, r3
 8001e40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e44:	eef0 0a47 	vmov.f32	s1, s14
 8001e48:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4c:	4808      	ldr	r0, [pc, #32]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001e4e:	f7ff fd6f 	bl	8001930 <LinearGeneration>
 8001e52:	e02e      	b.n	8001eb2 <CheckGoingToRefPosition+0x2e2>
 8001e54:	20000003 	.word	0x20000003
 8001e58:	20000510 	.word	0x20000510
 8001e5c:	200004ac 	.word	0x200004ac
 8001e60:	2000000a 	.word	0x2000000a
 8001e64:	20000469 	.word	0x20000469
 8001e68:	66666667 	.word	0x66666667
 8001e6c:	2000046c 	.word	0x2000046c
 8001e70:	20000518 	.word	0x20000518
 8001e74:	20000454 	.word	0x20000454
 8001e78:	20000440 	.word	0x20000440
 8001e7c:	20000436 	.word	0x20000436
 8001e80:	88888889 	.word	0x88888889
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed);
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <CheckGoingToRefPosition+0x360>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eef1 7a67 	vneg.f32	s15, s15
 8001e8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <CheckGoingToRefPosition+0x364>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	425b      	negs	r3, r3
 8001e9c:	ee07 3a10 	vmov	s14, r3
 8001ea0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ea4:	eef0 0a47 	vmov.f32	s1, s14
 8001ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eac:	4822      	ldr	r0, [pc, #136]	; (8001f38 <CheckGoingToRefPosition+0x368>)
 8001eae:	f7ff fd3f 	bl	8001930 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <CheckGoingToRefPosition+0x368>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	d013      	beq.n	8001eea <CheckGoingToRefPosition+0x31a>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <CheckGoingToRefPosition+0x36c>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <CheckGoingToRefPosition+0x368>)
 8001ec8:	edd2 7a00 	vldr	s15, [r2]
 8001ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fdf1 	bl	8001ab8 <CalculateTimer3Period>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <CheckGoingToRefPosition+0x370>)
 8001edc:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <CheckGoingToRefPosition+0x374>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <CheckGoingToRefPosition+0x378>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
			}
		}

		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 50) // Reach the bottom position
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <CheckGoingToRefPosition+0x37c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <CheckGoingToRefPosition+0x380>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8001efc:	db13      	blt.n	8001f26 <CheckGoingToRefPosition+0x356>
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <CheckGoingToRefPosition+0x37c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	1ad2      	subs	r2, r2, r3
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <CheckGoingToRefPosition+0x380>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2b32      	cmp	r3, #50	; 0x32
 8001f0e:	dc0a      	bgt.n	8001f26 <CheckGoingToRefPosition+0x356>
		{
			Timer3CountPeriod = 0;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <CheckGoingToRefPosition+0x370>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <CheckGoingToRefPosition+0x368>)
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
			StopPulseGenerating();
 8001f1e:	f7ff fd65 	bl	80019ec <StopPulseGenerating>
			return true;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <CheckGoingToRefPosition+0x358>
		}
	}
	return false;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2000046c 	.word	0x2000046c
 8001f34:	20000469 	.word	0x20000469
 8001f38:	20000518 	.word	0x20000518
 8001f3c:	20000003 	.word	0x20000003
 8001f40:	20000454 	.word	0x20000454
 8001f44:	20000440 	.word	0x20000440
 8001f48:	20000436 	.word	0x20000436
 8001f4c:	20000510 	.word	0x20000510
 8001f50:	200004ac 	.word	0x200004ac

08001f54 <InitGoingToStartingPosition>:

void InitGoingToStartingPosition ()
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	if (MotorDriver) // HIGEN FDA7000
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <InitGoingToStartingPosition+0x11c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d042      	beq.n	8001fe6 <InitGoingToStartingPosition+0x92>
	{
		//if (PulseSimuCount*EgearRatio < PullingBotomPulseCmdPosition) // Then going down to the bottom
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition)
 8001f60:	4b44      	ldr	r3, [pc, #272]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b44      	ldr	r3, [pc, #272]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	4b44      	ldr	r3, [pc, #272]	; (800207c <InitGoingToStartingPosition+0x128>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	da0c      	bge.n	8001f8c <InitGoingToStartingPosition+0x38>
		{
			StartAccleratePulling = false;
 8001f72:	4b43      	ldr	r3, [pc, #268]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001f78:	4b42      	ldr	r3, [pc, #264]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = false; // false = Dropping Down
 8001f7e:	4b42      	ldr	r3, [pc, #264]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001f84:	f7ff f970 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			InitPulseGenerating();
 8001f88:	f7ff fd54 	bl	8001a34 <InitPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	1ad2      	subs	r2, r2, r3
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <InitGoingToStartingPosition+0x128>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dd0c      	ble.n	8001fb8 <InitGoingToStartingPosition+0x64>
		{
			StartAccleratePulling = false;
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8001fa4:	4b37      	ldr	r3, [pc, #220]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001fb0:	f7ff f95a 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 8001fb4:	f7ff fd3e 	bl	8001a34 <InitPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1ad2      	subs	r2, r2, r3
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <InitGoingToStartingPosition+0x128>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d14f      	bne.n	800206a <InitGoingToStartingPosition+0x116>
		{
			StartAccleratePulling = true;
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
			Direction = false;
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]

			PRIsToggled = true; // true = pulling up.
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001fdc:	f7ff f944 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 8001fe0:	f7ff fd28 	bl	8001a34 <InitPulseGenerating>
			PRIsToggled = true; // true = pulling up.
			DisableSTOP(); // Disable the stop
			InitPulseGenerating();
		}
	}
}
 8001fe4:	e041      	b.n	800206a <InitGoingToStartingPosition+0x116>
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition) // Then going down to the bottom
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1ad2      	subs	r2, r2, r3
 8001ff0:	4b22      	ldr	r3, [pc, #136]	; (800207c <InitGoingToStartingPosition+0x128>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	da0c      	bge.n	8002012 <InitGoingToStartingPosition+0xbe>
			StartAccleratePulling = false;
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 800200a:	f7ff f92d 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 800200e:	f7ff fd11 	bl	8001a34 <InitPulseGenerating>
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1ad2      	subs	r2, r2, r3
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <InitGoingToStartingPosition+0x128>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	dd0c      	ble.n	800203e <InitGoingToStartingPosition+0xea>
			StartAccleratePulling = false;
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <InitGoingToStartingPosition+0x130>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002036:	f7ff f917 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 800203a:	f7ff fcfb 	bl	8001a34 <InitPulseGenerating>
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	1ad2      	subs	r2, r2, r3
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <InitGoingToStartingPosition+0x128>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d10c      	bne.n	800206a <InitGoingToStartingPosition+0x116>
			StartAccleratePulling = true;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
			Direction = false;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <InitGoingToStartingPosition+0x134>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002062:	f7ff f901 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 8002066:	f7ff fce5 	bl	8001a34 <InitPulseGenerating>
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000003 	.word	0x20000003
 8002074:	20000510 	.word	0x20000510
 8002078:	200004ac 	.word	0x200004ac
 800207c:	200004a8 	.word	0x200004a8
 8002080:	20000439 	.word	0x20000439
 8002084:	20000434 	.word	0x20000434
 8002088:	2000043f 	.word	0x2000043f
 800208c:	00000000 	.word	0x00000000

08002090 <InitializeSimulating>:
void InitializeSimulating (uint8_t Mode)
{
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
	StartRunning = false;
 800209a:	4b71      	ldr	r3, [pc, #452]	; (8002260 <InitializeSimulating+0x1d0>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
	StartSimulating = true;
 80020a0:	4b70      	ldr	r3, [pc, #448]	; (8002264 <InitializeSimulating+0x1d4>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
	switch (Mode)
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d073      	beq.n	8002194 <InitializeSimulating+0x104>
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	f300 80ce 	bgt.w	800224e <InitializeSimulating+0x1be>
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d002      	beq.n	80020bc <InitializeSimulating+0x2c>
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d01e      	beq.n	80020f8 <InitializeSimulating+0x68>
			PRIsToggled = true; // true = pulling up.
			InitPulseGenerating();
			break;

		default:
			break;
 80020ba:	e0c8      	b.n	800224e <InitializeSimulating+0x1be>
			PulseSimuCount = 0;
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <InitializeSimulating+0x1d8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
			CompleteDropping = false;
 80020c2:	4b6a      	ldr	r3, [pc, #424]	; (800226c <InitializeSimulating+0x1dc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
			DropStep1 = true;
 80020c8:	4b69      	ldr	r3, [pc, #420]	; (8002270 <InitializeSimulating+0x1e0>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
			IsPulseCheck = false; // off pulse checking
 80020ce:	4b69      	ldr	r3, [pc, #420]	; (8002274 <InitializeSimulating+0x1e4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
			DropStep2 = false;
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <InitializeSimulating+0x1e8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
			DropStep3 = false;
 80020da:	4b68      	ldr	r3, [pc, #416]	; (800227c <InitializeSimulating+0x1ec>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
			DropStep4 = false;
 80020e0:	4b67      	ldr	r3, [pc, #412]	; (8002280 <InitializeSimulating+0x1f0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
			Direction = true; // variable to show the direction, false = move up, true = move down
 80020e6:	4b67      	ldr	r3, [pc, #412]	; (8002284 <InitializeSimulating+0x1f4>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 80020ec:	4b66      	ldr	r3, [pc, #408]	; (8002288 <InitializeSimulating+0x1f8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
			InitPulseGenerating();
 80020f2:	f7ff fc9f 	bl	8001a34 <InitPulseGenerating>
			break;
 80020f6:	e0ab      	b.n	8002250 <InitializeSimulating+0x1c0>
			PulseSimuCount = 0;
 80020f8:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <InitializeSimulating+0x1d8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
			CompletePulling = false;
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <InitializeSimulating+0x1fc>)
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
			PullStep1 = true;
 8002104:	4b62      	ldr	r3, [pc, #392]	; (8002290 <InitializeSimulating+0x200>)
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
			IsPulseCheck = true; // Turn on pulse checking at PullStep1
 800210a:	4b5a      	ldr	r3, [pc, #360]	; (8002274 <InitializeSimulating+0x1e4>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
			PullStep2 = false;
 8002110:	4b60      	ldr	r3, [pc, #384]	; (8002294 <InitializeSimulating+0x204>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
			PullStep3 = false;
 8002116:	4b60      	ldr	r3, [pc, #384]	; (8002298 <InitializeSimulating+0x208>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
			PullStep4 = false;
 800211c:	4b5f      	ldr	r3, [pc, #380]	; (800229c <InitializeSimulating+0x20c>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
			PullStep5 = false;
 8002122:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <InitializeSimulating+0x210>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
			PullStep6 = false;
 8002128:	4b5e      	ldr	r3, [pc, #376]	; (80022a4 <InitializeSimulating+0x214>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
			TargetPosition = ((int)(EncoderResolution*PullingPoint1/(2*3.14*DrumRadius)));
 800212e:	4b5e      	ldr	r3, [pc, #376]	; (80022a8 <InitializeSimulating+0x218>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213a:	4b5c      	ldr	r3, [pc, #368]	; (80022ac <InitializeSimulating+0x21c>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	ee17 0a90 	vmov	r0, s15
 8002148:	f7fe f9fe 	bl	8000548 <__aeabi_f2d>
 800214c:	4604      	mov	r4, r0
 800214e:	460d      	mov	r5, r1
 8002150:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <InitializeSimulating+0x220>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_f2d>
 800215a:	a33f      	add	r3, pc, #252	; (adr r3, 8002258 <InitializeSimulating+0x1c8>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa4a 	bl	80005f8 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	f7fe fb6e 	bl	800084c <__aeabi_ddiv>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fcee 	bl	8000b58 <__aeabi_d2iz>
 800217c:	4603      	mov	r3, r0
 800217e:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <InitializeSimulating+0x224>)
 8002180:	6013      	str	r3, [r2, #0]
			Direction = false; // false = move up to count the position pulse cmd
 8002182:	4b40      	ldr	r3, [pc, #256]	; (8002284 <InitializeSimulating+0x1f4>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 8002188:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <InitializeSimulating+0x1f8>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
			InitPulseGenerating();
 800218e:	f7ff fc51 	bl	8001a34 <InitPulseGenerating>
			break;
 8002192:	e05d      	b.n	8002250 <InitializeSimulating+0x1c0>
			PulseSimuCount = 0;
 8002194:	4b34      	ldr	r3, [pc, #208]	; (8002268 <InitializeSimulating+0x1d8>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
			CompletePulling = false;
 800219a:	4b3c      	ldr	r3, [pc, #240]	; (800228c <InitializeSimulating+0x1fc>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
			CompleteDropping = false;
 80021a0:	4b32      	ldr	r3, [pc, #200]	; (800226c <InitializeSimulating+0x1dc>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
			PullStep1 = true;
 80021a6:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <InitializeSimulating+0x200>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
			IsPulseCheck = true;
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <InitializeSimulating+0x1e4>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
			PullStep2 = false;
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <InitializeSimulating+0x204>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
			PullStep3 = false;
 80021b8:	4b37      	ldr	r3, [pc, #220]	; (8002298 <InitializeSimulating+0x208>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
			PullStep4 = false;
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <InitializeSimulating+0x20c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
			PullStep5 = false;
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <InitializeSimulating+0x210>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
			PullStep6 = false;
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <InitializeSimulating+0x214>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
			DropStep1 = true;
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <InitializeSimulating+0x1e0>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
			DropStep2 = false;
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <InitializeSimulating+0x1e8>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
			DropStep3 = false;
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <InitializeSimulating+0x1ec>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
			DropStep4 = false;
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <InitializeSimulating+0x1f0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
			TargetPosition = ((int)(EncoderResolution*PullingPoint1/(2*3.14*DrumRadius)));
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <InitializeSimulating+0x218>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <InitializeSimulating+0x21c>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f7fe f9a1 	bl	8000548 <__aeabi_f2d>
 8002206:	4604      	mov	r4, r0
 8002208:	460d      	mov	r5, r1
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <InitializeSimulating+0x220>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f99a 	bl	8000548 <__aeabi_f2d>
 8002214:	a310      	add	r3, pc, #64	; (adr r3, 8002258 <InitializeSimulating+0x1c8>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fe f9ed 	bl	80005f8 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f7fe fb11 	bl	800084c <__aeabi_ddiv>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fc91 	bl	8000b58 <__aeabi_d2iz>
 8002236:	4603      	mov	r3, r0
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <InitializeSimulating+0x224>)
 800223a:	6013      	str	r3, [r2, #0]
			Direction = false; // false = move up to count the position pulse cmd
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <InitializeSimulating+0x1f4>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <InitializeSimulating+0x1f8>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
			InitPulseGenerating();
 8002248:	f7ff fbf4 	bl	8001a34 <InitPulseGenerating>
			break;
 800224c:	e000      	b.n	8002250 <InitializeSimulating+0x1c0>
			break;
 800224e:	bf00      	nop
	}
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bdb0      	pop	{r4, r5, r7, pc}
 8002258:	51eb851f 	.word	0x51eb851f
 800225c:	40191eb8 	.word	0x40191eb8
 8002260:	20000432 	.word	0x20000432
 8002264:	20000433 	.word	0x20000433
 8002268:	200004b4 	.word	0x200004b4
 800226c:	2000043a 	.word	0x2000043a
 8002270:	20000448 	.word	0x20000448
 8002274:	2000044c 	.word	0x2000044c
 8002278:	20000449 	.word	0x20000449
 800227c:	2000044a 	.word	0x2000044a
 8002280:	2000044b 	.word	0x2000044b
 8002284:	20000434 	.word	0x20000434
 8002288:	2000043f 	.word	0x2000043f
 800228c:	2000043b 	.word	0x2000043b
 8002290:	20000442 	.word	0x20000442
 8002294:	20000443 	.word	0x20000443
 8002298:	20000444 	.word	0x20000444
 800229c:	20000445 	.word	0x20000445
 80022a0:	20000446 	.word	0x20000446
 80022a4:	20000447 	.word	0x20000447
 80022a8:	2000000a 	.word	0x2000000a
 80022ac:	20000494 	.word	0x20000494
 80022b0:	20000464 	.word	0x20000464
 80022b4:	200004b0 	.word	0x200004b0

080022b8 <InitializeRunning>:
// Init variable for running
void InitializeRunning (uint8_t Mode)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
	StartRunning = true;
 80022c2:	4b3c      	ldr	r3, [pc, #240]	; (80023b4 <InitializeRunning+0xfc>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 80022c8:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <InitializeRunning+0x100>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
	switch (Mode)
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d03f      	beq.n	8002354 <InitializeRunning+0x9c>
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	dc67      	bgt.n	80023a8 <InitializeRunning+0xf0>
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d002      	beq.n	80022e2 <InitializeRunning+0x2a>
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d01b      	beq.n	8002318 <InitializeRunning+0x60>
			CompleteDropping = false;

			InitGoingToStartingPosition ();
			break;
		default:
			break;
 80022e0:	e062      	b.n	80023a8 <InitializeRunning+0xf0>
			CompleteDropping = false;
 80022e2:	4b36      	ldr	r3, [pc, #216]	; (80023bc <InitializeRunning+0x104>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
			DropStep1 = true;
 80022e8:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <InitializeRunning+0x108>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
			IsPulseCheck = false; // off pulse checking
 80022ee:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <InitializeRunning+0x10c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
			DropStep2 = false;
 80022f4:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <InitializeRunning+0x110>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
			DropStep3 = false;
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <InitializeRunning+0x114>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
			DropStep4 = false;
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <InitializeRunning+0x118>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
			Direction = true; // variable to show the direction, false = move up, true = move down
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <InitializeRunning+0x11c>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <InitializeRunning+0x120>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
			InitPulseGenerating();
 8002312:	f7ff fb8f 	bl	8001a34 <InitPulseGenerating>
			break;
 8002316:	e048      	b.n	80023aa <InitializeRunning+0xf2>
			IsGoingToBottom = true;
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <InitializeRunning+0x124>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
			PullStep1 = false; // First not step 1, going to bottom
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <InitializeRunning+0x128>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
			PullStep2 = false;
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <InitializeRunning+0x12c>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
			PullStep3 = false;
 800232a:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <InitializeRunning+0x130>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
			PullStep4 = false;
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <InitializeRunning+0x134>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
			PullStep5 = false;
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <InitializeRunning+0x138>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
			PullStep6 = false;
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <InitializeRunning+0x13c>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
			CompletePulling = false;
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <InitializeRunning+0x140>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
			CompleteDropping = false;
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <InitializeRunning+0x104>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();
 800234e:	f7ff fe01 	bl	8001f54 <InitGoingToStartingPosition>
			break;
 8002352:	e02a      	b.n	80023aa <InitializeRunning+0xf2>
			IsGoingToBottom = true;
 8002354:	4b21      	ldr	r3, [pc, #132]	; (80023dc <InitializeRunning+0x124>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
			PullStep1 = false;
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <InitializeRunning+0x128>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
			PullStep2 = false;
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <InitializeRunning+0x12c>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
			PullStep3 = false;
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <InitializeRunning+0x130>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
			PullStep4 = false;
 800236c:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <InitializeRunning+0x134>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
			PullStep5 = false;
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <InitializeRunning+0x138>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
			PullStep6 = false;
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <InitializeRunning+0x13c>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
			DropStep1 = true;
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <InitializeRunning+0x108>)
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
			DropStep2 = false;
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <InitializeRunning+0x110>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
			DropStep3 = false;
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <InitializeRunning+0x114>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
			DropStep4 = false;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <InitializeRunning+0x118>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
			CompletePulling = false;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <InitializeRunning+0x140>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
			CompleteDropping = false;
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <InitializeRunning+0x104>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();
 80023a2:	f7ff fdd7 	bl	8001f54 <InitGoingToStartingPosition>
			break;
 80023a6:	e000      	b.n	80023aa <InitializeRunning+0xf2>
			break;
 80023a8:	bf00      	nop
	}
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000432 	.word	0x20000432
 80023b8:	20000433 	.word	0x20000433
 80023bc:	2000043a 	.word	0x2000043a
 80023c0:	20000448 	.word	0x20000448
 80023c4:	2000044c 	.word	0x2000044c
 80023c8:	20000449 	.word	0x20000449
 80023cc:	2000044a 	.word	0x2000044a
 80023d0:	2000044b 	.word	0x2000044b
 80023d4:	20000434 	.word	0x20000434
 80023d8:	2000043f 	.word	0x2000043f
 80023dc:	20000441 	.word	0x20000441
 80023e0:	20000442 	.word	0x20000442
 80023e4:	20000443 	.word	0x20000443
 80023e8:	20000444 	.word	0x20000444
 80023ec:	20000445 	.word	0x20000445
 80023f0:	20000446 	.word	0x20000446
 80023f4:	20000447 	.word	0x20000447
 80023f8:	2000043b 	.word	0x2000043b
 80023fc:	00000000 	.word	0x00000000

08002400 <PullingExperiment>:

bool PullingExperiment ()
{
 8002400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002404:	af00      	add	r7, sp, #0
	if (CompletePulling)
 8002406:	4b92      	ldr	r3, [pc, #584]	; (8002650 <PullingExperiment+0x250>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <PullingExperiment+0x14>
	{
		return true;
 800240e:	2301      	movs	r3, #1
 8002410:	f000 bce2 	b.w	8002dd8 <PullingExperiment+0x9d8>
	}
	else
	{
		if (IsGoingToBottom)
 8002414:	4b8f      	ldr	r3, [pc, #572]	; (8002654 <PullingExperiment+0x254>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d054      	beq.n	80024c6 <PullingExperiment+0xc6>
		{
			if (CheckGoingToRefPosition(Direction, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 800241c:	4b8e      	ldr	r3, [pc, #568]	; (8002658 <PullingExperiment+0x258>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4a8e      	ldr	r2, [pc, #568]	; (800265c <PullingExperiment+0x25c>)
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fbd2 	bl	8001bd0 <CheckGoingToRefPosition>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d049      	beq.n	80024c6 <PullingExperiment+0xc6>
			{
				if (WaitingMiliSecond(5000)) // Wait for 5 seconds = 5000ms
 8002432:	f241 3088 	movw	r0, #5000	; 0x1388
 8002436:	f7ff fb17 	bl	8001a68 <WaitingMiliSecond>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d03f      	beq.n	80024c0 <PullingExperiment+0xc0>
				{
					IsGoingToBottom = false;
 8002440:	4b84      	ldr	r3, [pc, #528]	; (8002654 <PullingExperiment+0x254>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
					PullStep1 = true;
 8002446:	4b86      	ldr	r3, [pc, #536]	; (8002660 <PullingExperiment+0x260>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
					Direction = false; // false = move up to count the position pulse cmd
 800244c:	4b82      	ldr	r3, [pc, #520]	; (8002658 <PullingExperiment+0x258>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
					PRIsToggled = true; // true = pulling up.
 8002452:	4b84      	ldr	r3, [pc, #528]	; (8002664 <PullingExperiment+0x264>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
					DisableSTOP(); // Disable the stop
 8002458:	f7fe ff06 	bl	8001268 <DisableSTOP>

					InitPulseGenerating();
 800245c:	f7ff faea 	bl	8001a34 <InitPulseGenerating>

					PositionPulseCmd = 0;
 8002460:	4b81      	ldr	r3, [pc, #516]	; (8002668 <PullingExperiment+0x268>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
					TargetPosition = ((int)(EncoderResolution*PullingPoint1/(2*3.14*DrumRadius)));
 8002466:	4b81      	ldr	r3, [pc, #516]	; (800266c <PullingExperiment+0x26c>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002472:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <PullingExperiment+0x270>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	ee17 0a90 	vmov	r0, s15
 8002480:	f7fe f862 	bl	8000548 <__aeabi_f2d>
 8002484:	4604      	mov	r4, r0
 8002486:	460d      	mov	r5, r1
 8002488:	4b7a      	ldr	r3, [pc, #488]	; (8002674 <PullingExperiment+0x274>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f85b 	bl	8000548 <__aeabi_f2d>
 8002492:	a36b      	add	r3, pc, #428	; (adr r3, 8002640 <PullingExperiment+0x240>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f8ae 	bl	80005f8 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fe f9d2 	bl	800084c <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb52 	bl	8000b58 <__aeabi_d2iz>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a70      	ldr	r2, [pc, #448]	; (8002678 <PullingExperiment+0x278>)
 80024b8:	6013      	str	r3, [r2, #0]
					IsPulseCheck = true; // On pulse checking
 80024ba:	4b70      	ldr	r3, [pc, #448]	; (800267c <PullingExperiment+0x27c>)
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
				}
				return false;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f000 bc89 	b.w	8002dd8 <PullingExperiment+0x9d8>
			}
		}

		if (PullStep1) // Accelerate pulling, Acc1
 80024c6:	4b66      	ldr	r3, [pc, #408]	; (8002660 <PullingExperiment+0x260>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80f2 	beq.w	80026b4 <PullingExperiment+0x2b4>
		{
			if (IsReachTargetPosition) // Switch to Step 2
 80024d0:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <PullingExperiment+0x280>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d03b      	beq.n	8002552 <PullingExperiment+0x152>
			{
				PulseGenerationFlag = false; // disable Pulse out
 80024da:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <PullingExperiment+0x284>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
				PullStep1 = false;
 80024e0:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <PullingExperiment+0x260>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
				PullStep2 = true; // Switch to Step 2
 80024e6:	4b68      	ldr	r3, [pc, #416]	; (8002688 <PullingExperiment+0x288>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]

				//TargetPosition += -((int)(EncoderResolution*PullingPoint2/(2*3.14*DrumRadius))); // Max Speed Point
				TargetPosition += (int)(EncoderResolution*PullingPoint2/(2*3.14*DrumRadius)); // Max Speed Point
 80024ec:	4b5f      	ldr	r3, [pc, #380]	; (800266c <PullingExperiment+0x26c>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <PullingExperiment+0x28c>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002502:	ee17 0a90 	vmov	r0, s15
 8002506:	f7fe f81f 	bl	8000548 <__aeabi_f2d>
 800250a:	4604      	mov	r4, r0
 800250c:	460d      	mov	r5, r1
 800250e:	4b59      	ldr	r3, [pc, #356]	; (8002674 <PullingExperiment+0x274>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f818 	bl	8000548 <__aeabi_f2d>
 8002518:	a349      	add	r3, pc, #292	; (adr r3, 8002640 <PullingExperiment+0x240>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	f7fe f86b 	bl	80005f8 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4620      	mov	r0, r4
 8002528:	4629      	mov	r1, r5
 800252a:	f7fe f98f 	bl	800084c <__aeabi_ddiv>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f7fe fb0f 	bl	8000b58 <__aeabi_d2iz>
 800253a:	4602      	mov	r2, r0
 800253c:	4b4e      	ldr	r3, [pc, #312]	; (8002678 <PullingExperiment+0x278>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4413      	add	r3, r2
 8002542:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <PullingExperiment+0x278>)
 8002544:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8002546:	4b4d      	ldr	r3, [pc, #308]	; (800267c <PullingExperiment+0x27c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <PullingExperiment+0x280>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst - PullingAcc1;
 8002552:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002690 <PullingExperiment+0x290>
 8002556:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <PullingExperiment+0x294>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002560:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <PullingExperiment+0x298>)
 8002562:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(-PullingAcc1)*10/DrumRadius;
 8002566:	4b4d      	ldr	r3, [pc, #308]	; (800269c <PullingExperiment+0x29c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd ffec 	bl	8000548 <__aeabi_f2d>
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <PullingExperiment+0x2a0>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ffd3 	bl	8000524 <__aeabi_i2d>
 800257e:	a332      	add	r3, pc, #200	; (adr r3, 8002648 <PullingExperiment+0x248>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fe f838 	bl	80005f8 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4690      	mov	r8, r2
 800258e:	4699      	mov	r9, r3
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <PullingExperiment+0x294>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	eef1 7a67 	vneg.f32	s15, s15
 800259a:	ee17 3a90 	vmov	r3, s15
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffd2 	bl	8000548 <__aeabi_f2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4640      	mov	r0, r8
 80025aa:	4649      	mov	r1, r9
 80025ac:	f7fe f824 	bl	80005f8 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <PullingExperiment+0x2a4>)
 80025be:	f7fe f81b 	bl	80005f8 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4690      	mov	r8, r2
 80025c8:	4699      	mov	r9, r3
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <PullingExperiment+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffba 	bl	8000548 <__aeabi_f2d>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4640      	mov	r0, r8
 80025da:	4649      	mov	r1, r9
 80025dc:	f7fe f936 	bl	800084c <__aeabi_ddiv>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4620      	mov	r0, r4
 80025e6:	4629      	mov	r1, r5
 80025e8:	f7fd fe50 	bl	800028c <__adddf3>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe faf8 	bl	8000be8 <__aeabi_d2f>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4a28      	ldr	r2, [pc, #160]	; (800269c <PullingExperiment+0x29c>)
 80025fc:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 80025fe:	4b27      	ldr	r3, [pc, #156]	; (800269c <PullingExperiment+0x29c>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	d013      	beq.n	8002636 <PullingExperiment+0x236>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <PullingExperiment+0x2a8>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <PullingExperiment+0x29c>)
 8002614:	edd2 7a00 	vldr	s15, [r2]
 8002618:	eeb0 0a67 	vmov.f32	s0, s15
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fa4b 	bl	8001ab8 <CalculateTimer3Period>
 8002622:	4603      	mov	r3, r0
 8002624:	b29a      	uxth	r2, r3
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <PullingExperiment+0x2ac>)
 8002628:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <PullingExperiment+0x2b0>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <PullingExperiment+0x284>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002636:	2300      	movs	r3, #0
 8002638:	e3ce      	b.n	8002dd8 <PullingExperiment+0x9d8>
 800263a:	bf00      	nop
 800263c:	f3af 8000 	nop.w
 8002640:	51eb851f 	.word	0x51eb851f
 8002644:	40191eb8 	.word	0x40191eb8
 8002648:	d2f1a9fc 	.word	0xd2f1a9fc
 800264c:	3f50624d 	.word	0x3f50624d
 8002650:	2000043b 	.word	0x2000043b
 8002654:	20000441 	.word	0x20000441
 8002658:	20000434 	.word	0x20000434
 800265c:	200004a8 	.word	0x200004a8
 8002660:	20000442 	.word	0x20000442
 8002664:	2000043f 	.word	0x2000043f
 8002668:	200004b8 	.word	0x200004b8
 800266c:	2000000a 	.word	0x2000000a
 8002670:	20000494 	.word	0x20000494
 8002674:	20000464 	.word	0x20000464
 8002678:	200004b0 	.word	0x200004b0
 800267c:	2000044c 	.word	0x2000044c
 8002680:	20000438 	.word	0x20000438
 8002684:	20000436 	.word	0x20000436
 8002688:	20000443 	.word	0x20000443
 800268c:	20000498 	.word	0x20000498
 8002690:	c11ccccd 	.word	0xc11ccccd
 8002694:	20000480 	.word	0x20000480
 8002698:	20000010 	.word	0x20000010
 800269c:	20000518 	.word	0x20000518
 80026a0:	20000468 	.word	0x20000468
 80026a4:	40240000 	.word	0x40240000
 80026a8:	20000003 	.word	0x20000003
 80026ac:	20000454 	.word	0x20000454
 80026b0:	20000440 	.word	0x20000440
		}
		if (PullStep2) // Accelerate Pulling Acc2
 80026b4:	4bb0      	ldr	r3, [pc, #704]	; (8002978 <PullingExperiment+0x578>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8088 	beq.w	80027ce <PullingExperiment+0x3ce>
		{
			if (IsReachTargetPosition) // Switch to Step 3
 80026be:	4baf      	ldr	r3, [pc, #700]	; (800297c <PullingExperiment+0x57c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <PullingExperiment+0x2e6>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 80026c8:	4bad      	ldr	r3, [pc, #692]	; (8002980 <PullingExperiment+0x580>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false;
 80026ce:	4bad      	ldr	r3, [pc, #692]	; (8002984 <PullingExperiment+0x584>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]

				PullStep2 = false;
 80026d4:	4ba8      	ldr	r3, [pc, #672]	; (8002978 <PullingExperiment+0x578>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
				PullStep3 = true;
 80026da:	4bab      	ldr	r3, [pc, #684]	; (8002988 <PullingExperiment+0x588>)
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]


				IsReachTargetPosition = false; // Reset the flag
 80026e0:	4ba6      	ldr	r3, [pc, #664]	; (800297c <PullingExperiment+0x57c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst - PullingAcc2;
 80026e6:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800298c <PullingExperiment+0x58c>
 80026ea:	4ba9      	ldr	r3, [pc, #676]	; (8002990 <PullingExperiment+0x590>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f4:	4ba7      	ldr	r3, [pc, #668]	; (8002994 <PullingExperiment+0x594>)
 80026f6:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(-PullingAcc2)*10/DrumRadius; //
 80026fa:	4ba7      	ldr	r3, [pc, #668]	; (8002998 <PullingExperiment+0x598>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff22 	bl	8000548 <__aeabi_f2d>
 8002704:	4604      	mov	r4, r0
 8002706:	460d      	mov	r5, r1
 8002708:	4ba4      	ldr	r3, [pc, #656]	; (800299c <PullingExperiment+0x59c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff09 	bl	8000524 <__aeabi_i2d>
 8002712:	a395      	add	r3, pc, #596	; (adr r3, 8002968 <PullingExperiment+0x568>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd ff6e 	bl	80005f8 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4690      	mov	r8, r2
 8002722:	4699      	mov	r9, r3
 8002724:	4b9a      	ldr	r3, [pc, #616]	; (8002990 <PullingExperiment+0x590>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	eef1 7a67 	vneg.f32	s15, s15
 800272e:	ee17 3a90 	vmov	r3, s15
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff08 	bl	8000548 <__aeabi_f2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4640      	mov	r0, r8
 800273e:	4649      	mov	r1, r9
 8002740:	f7fd ff5a 	bl	80005f8 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	4b93      	ldr	r3, [pc, #588]	; (80029a0 <PullingExperiment+0x5a0>)
 8002752:	f7fd ff51 	bl	80005f8 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4690      	mov	r8, r2
 800275c:	4699      	mov	r9, r3
 800275e:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <PullingExperiment+0x5a4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fef0 	bl	8000548 <__aeabi_f2d>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4640      	mov	r0, r8
 800276e:	4649      	mov	r1, r9
 8002770:	f7fe f86c 	bl	800084c <__aeabi_ddiv>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd86 	bl	800028c <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe fa2e 	bl	8000be8 <__aeabi_d2f>
 800278c:	4603      	mov	r3, r0
 800278e:	4a82      	ldr	r2, [pc, #520]	; (8002998 <PullingExperiment+0x598>)
 8002790:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8002792:	4b81      	ldr	r3, [pc, #516]	; (8002998 <PullingExperiment+0x598>)
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	eef5 7a40 	vcmp.f32	s15, #0.0
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a0:	d013      	beq.n	80027ca <PullingExperiment+0x3ca>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80027a2:	4b81      	ldr	r3, [pc, #516]	; (80029a8 <PullingExperiment+0x5a8>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	4a7c      	ldr	r2, [pc, #496]	; (8002998 <PullingExperiment+0x598>)
 80027a8:	edd2 7a00 	vldr	s15, [r2]
 80027ac:	eeb0 0a67 	vmov.f32	s0, s15
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff f981 	bl	8001ab8 <CalculateTimer3Period>
 80027b6:	4603      	mov	r3, r0
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	4b7c      	ldr	r3, [pc, #496]	; (80029ac <PullingExperiment+0x5ac>)
 80027bc:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 80027be:	4b7c      	ldr	r3, [pc, #496]	; (80029b0 <PullingExperiment+0x5b0>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 80027c4:	4b6e      	ldr	r3, [pc, #440]	; (8002980 <PullingExperiment+0x580>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
			}
			return false;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e304      	b.n	8002dd8 <PullingExperiment+0x9d8>
		}

		if (PullStep3) // Smooth the transition
 80027ce:	4b6e      	ldr	r3, [pc, #440]	; (8002988 <PullingExperiment+0x588>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80fc 	beq.w	80029d0 <PullingExperiment+0x5d0>
		{
			if (AccRef >= GravityConst + PullingAcc3) // Switch to step 2
 80027d8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800298c <PullingExperiment+0x58c>
 80027dc:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <PullingExperiment+0x5b4>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e6:	4b6b      	ldr	r3, [pc, #428]	; (8002994 <PullingExperiment+0x594>)
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	d838      	bhi.n	8002868 <PullingExperiment+0x468>
			{
				PulseGenerationFlag = false;
 80027f6:	4b62      	ldr	r3, [pc, #392]	; (8002980 <PullingExperiment+0x580>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
				TargetPosition = PositionPulseCmd + ((int)(EncoderResolution*PullingPoint3/(2*3.14*DrumRadius))) ;
 80027fc:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <PullingExperiment+0x5b8>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <PullingExperiment+0x5bc>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	ee17 0a90 	vmov	r0, s15
 8002816:	f7fd fe97 	bl	8000548 <__aeabi_f2d>
 800281a:	4604      	mov	r4, r0
 800281c:	460d      	mov	r5, r1
 800281e:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <PullingExperiment+0x5a4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe90 	bl	8000548 <__aeabi_f2d>
 8002828:	a351      	add	r3, pc, #324	; (adr r3, 8002970 <PullingExperiment+0x570>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	f7fd fee3 	bl	80005f8 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4620      	mov	r0, r4
 8002838:	4629      	mov	r1, r5
 800283a:	f7fe f807 	bl	800084c <__aeabi_ddiv>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f7fe f987 	bl	8000b58 <__aeabi_d2iz>
 800284a:	4602      	mov	r2, r0
 800284c:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <PullingExperiment+0x5c0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4413      	add	r3, r2
 8002852:	4a5c      	ldr	r2, [pc, #368]	; (80029c4 <PullingExperiment+0x5c4>)
 8002854:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8002856:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <PullingExperiment+0x584>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]

				PullStep3 = false;
 800285c:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <PullingExperiment+0x588>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
				PullStep4 = true; // Switch to Step 4
 8002862:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <PullingExperiment+0x5c8>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,DropAccelSlope,GravityConst + PullingAcc3);
 8002868:	4b58      	ldr	r3, [pc, #352]	; (80029cc <PullingExperiment+0x5cc>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	ee07 3a90 	vmov	s15, r3
 8002870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002874:	eddf 6a45 	vldr	s13, [pc, #276]	; 800298c <PullingExperiment+0x58c>
 8002878:	4b4e      	ldr	r3, [pc, #312]	; (80029b4 <PullingExperiment+0x5b4>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002882:	eef0 0a67 	vmov.f32	s1, s15
 8002886:	eeb0 0a47 	vmov.f32	s0, s14
 800288a:	4842      	ldr	r0, [pc, #264]	; (8002994 <PullingExperiment+0x594>)
 800288c:	f7ff f850 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8002890:	4b41      	ldr	r3, [pc, #260]	; (8002998 <PullingExperiment+0x598>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fe57 	bl	8000548 <__aeabi_f2d>
 800289a:	4604      	mov	r4, r0
 800289c:	460d      	mov	r5, r1
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <PullingExperiment+0x59c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fe3e 	bl	8000524 <__aeabi_i2d>
 80028a8:	a32f      	add	r3, pc, #188	; (adr r3, 8002968 <PullingExperiment+0x568>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd fea3 	bl	80005f8 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4690      	mov	r8, r2
 80028b8:	4699      	mov	r9, r3
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <PullingExperiment+0x594>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800298c <PullingExperiment+0x58c>
 80028c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028c8:	ee17 0a90 	vmov	r0, s15
 80028cc:	f7fd fe3c 	bl	8000548 <__aeabi_f2d>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4640      	mov	r0, r8
 80028d6:	4649      	mov	r1, r9
 80028d8:	f7fd fe8e 	bl	80005f8 <__aeabi_dmul>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <PullingExperiment+0x5a0>)
 80028ea:	f7fd fe85 	bl	80005f8 <__aeabi_dmul>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4690      	mov	r8, r2
 80028f4:	4699      	mov	r9, r3
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <PullingExperiment+0x5a4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe24 	bl	8000548 <__aeabi_f2d>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4640      	mov	r0, r8
 8002906:	4649      	mov	r1, r9
 8002908:	f7fd ffa0 	bl	800084c <__aeabi_ddiv>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4620      	mov	r0, r4
 8002912:	4629      	mov	r1, r5
 8002914:	f7fd fcba 	bl	800028c <__adddf3>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f7fe f962 	bl	8000be8 <__aeabi_d2f>
 8002924:	4603      	mov	r3, r0
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <PullingExperiment+0x598>)
 8002928:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <PullingExperiment+0x598>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	d011      	beq.n	800295e <PullingExperiment+0x55e>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <PullingExperiment+0x5a8>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <PullingExperiment+0x598>)
 8002940:	edd2 7a00 	vldr	s15, [r2]
 8002944:	eeb0 0a67 	vmov.f32	s0, s15
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f8b5 	bl	8001ab8 <CalculateTimer3Period>
 800294e:	4603      	mov	r3, r0
 8002950:	b29a      	uxth	r2, r3
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <PullingExperiment+0x5ac>)
 8002954:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <PullingExperiment+0x580>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e002      	b.n	8002964 <PullingExperiment+0x564>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <PullingExperiment+0x580>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002964:	2300      	movs	r3, #0
 8002966:	e237      	b.n	8002dd8 <PullingExperiment+0x9d8>
 8002968:	d2f1a9fc 	.word	0xd2f1a9fc
 800296c:	3f50624d 	.word	0x3f50624d
 8002970:	51eb851f 	.word	0x51eb851f
 8002974:	40191eb8 	.word	0x40191eb8
 8002978:	20000443 	.word	0x20000443
 800297c:	20000438 	.word	0x20000438
 8002980:	20000436 	.word	0x20000436
 8002984:	2000044c 	.word	0x2000044c
 8002988:	20000444 	.word	0x20000444
 800298c:	c11ccccd 	.word	0xc11ccccd
 8002990:	20000484 	.word	0x20000484
 8002994:	20000010 	.word	0x20000010
 8002998:	20000518 	.word	0x20000518
 800299c:	20000468 	.word	0x20000468
 80029a0:	40240000 	.word	0x40240000
 80029a4:	20000464 	.word	0x20000464
 80029a8:	20000003 	.word	0x20000003
 80029ac:	20000454 	.word	0x20000454
 80029b0:	20000440 	.word	0x20000440
 80029b4:	20000488 	.word	0x20000488
 80029b8:	2000000a 	.word	0x2000000a
 80029bc:	2000049c 	.word	0x2000049c
 80029c0:	200004b8 	.word	0x200004b8
 80029c4:	200004b0 	.word	0x200004b0
 80029c8:	20000445 	.word	0x20000445
 80029cc:	20000541 	.word	0x20000541
		}
		if (PullStep4) // Release Acc3 > 1g
 80029d0:	4bb5      	ldr	r3, [pc, #724]	; (8002ca8 <PullingExperiment+0x8a8>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80b2 	beq.w	8002b3e <PullingExperiment+0x73e>
		{
			if (IsReachTargetPosition) // Switch to Step 4
 80029da:	4bb4      	ldr	r3, [pc, #720]	; (8002cac <PullingExperiment+0x8ac>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03b      	beq.n	8002a5c <PullingExperiment+0x65c>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 80029e4:	4bb2      	ldr	r3, [pc, #712]	; (8002cb0 <PullingExperiment+0x8b0>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
				PullStep4 = false;
 80029ea:	4baf      	ldr	r3, [pc, #700]	; (8002ca8 <PullingExperiment+0x8a8>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
				PullStep5 = true;
 80029f0:	4bb0      	ldr	r3, [pc, #704]	; (8002cb4 <PullingExperiment+0x8b4>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]

				TargetPosition += ((int)(EncoderResolution*PullingPoint4/(2*3.14*DrumRadius)));
 80029f6:	4bb0      	ldr	r3, [pc, #704]	; (8002cb8 <PullingExperiment+0x8b8>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a02:	4bae      	ldr	r3, [pc, #696]	; (8002cbc <PullingExperiment+0x8bc>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0c:	ee17 0a90 	vmov	r0, s15
 8002a10:	f7fd fd9a 	bl	8000548 <__aeabi_f2d>
 8002a14:	4604      	mov	r4, r0
 8002a16:	460d      	mov	r5, r1
 8002a18:	4ba9      	ldr	r3, [pc, #676]	; (8002cc0 <PullingExperiment+0x8c0>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fd93 	bl	8000548 <__aeabi_f2d>
 8002a22:	a39d      	add	r3, pc, #628	; (adr r3, 8002c98 <PullingExperiment+0x898>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fd fde6 	bl	80005f8 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd ff0a 	bl	800084c <__aeabi_ddiv>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7fe f88a 	bl	8000b58 <__aeabi_d2iz>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b9f      	ldr	r3, [pc, #636]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a9d      	ldr	r2, [pc, #628]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002a4e:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8002a50:	4b9d      	ldr	r3, [pc, #628]	; (8002cc8 <PullingExperiment+0x8c8>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8002a56:	4b95      	ldr	r3, [pc, #596]	; (8002cac <PullingExperiment+0x8ac>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
			}
			//AccRef = GravityConst + PullingAcc3;
			SpeedCmd += SampleTime*0.001*(PullingAcc3)*10/DrumRadius; //
 8002a5c:	4b9b      	ldr	r3, [pc, #620]	; (8002ccc <PullingExperiment+0x8cc>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd71 	bl	8000548 <__aeabi_f2d>
 8002a66:	4604      	mov	r4, r0
 8002a68:	460d      	mov	r5, r1
 8002a6a:	4b99      	ldr	r3, [pc, #612]	; (8002cd0 <PullingExperiment+0x8d0>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd58 	bl	8000524 <__aeabi_i2d>
 8002a74:	a38a      	add	r3, pc, #552	; (adr r3, 8002ca0 <PullingExperiment+0x8a0>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fdbd 	bl	80005f8 <__aeabi_dmul>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4690      	mov	r8, r2
 8002a84:	4699      	mov	r9, r3
 8002a86:	4b93      	ldr	r3, [pc, #588]	; (8002cd4 <PullingExperiment+0x8d4>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd5c 	bl	8000548 <__aeabi_f2d>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4640      	mov	r0, r8
 8002a96:	4649      	mov	r1, r9
 8002a98:	f7fd fdae 	bl	80005f8 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	4b8b      	ldr	r3, [pc, #556]	; (8002cd8 <PullingExperiment+0x8d8>)
 8002aaa:	f7fd fda5 	bl	80005f8 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4690      	mov	r8, r2
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	4b82      	ldr	r3, [pc, #520]	; (8002cc0 <PullingExperiment+0x8c0>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fd44 	bl	8000548 <__aeabi_f2d>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4640      	mov	r0, r8
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	f7fd fec0 	bl	800084c <__aeabi_ddiv>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fbda 	bl	800028c <__adddf3>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f882 	bl	8000be8 <__aeabi_d2f>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a79      	ldr	r2, [pc, #484]	; (8002ccc <PullingExperiment+0x8cc>)
 8002ae8:	6013      	str	r3, [r2, #0]
			if (SpeedCmd >= 0)
 8002aea:	4b78      	ldr	r3, [pc, #480]	; (8002ccc <PullingExperiment+0x8cc>)
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	db03      	blt.n	8002b02 <PullingExperiment+0x702>
				SpeedCmd = 0;
 8002afa:	4b74      	ldr	r3, [pc, #464]	; (8002ccc <PullingExperiment+0x8cc>)
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

//			InnerObjRefSpeed += SampleTime*0.001*(PullingAcc5)*10/DrumRadius;
//			if (InnerObjRefSpeed >= 0)
//				InnerObjRefSpeed = 0;

			if (SpeedCmd != 0)
 8002b02:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <PullingExperiment+0x8cc>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	d013      	beq.n	8002b3a <PullingExperiment+0x73a>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002b12:	4b72      	ldr	r3, [pc, #456]	; (8002cdc <PullingExperiment+0x8dc>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	4a6d      	ldr	r2, [pc, #436]	; (8002ccc <PullingExperiment+0x8cc>)
 8002b18:	edd2 7a00 	vldr	s15, [r2]
 8002b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ffc9 	bl	8001ab8 <CalculateTimer3Period>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b6d      	ldr	r3, [pc, #436]	; (8002ce0 <PullingExperiment+0x8e0>)
 8002b2c:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 8002b2e:	4b6d      	ldr	r3, [pc, #436]	; (8002ce4 <PullingExperiment+0x8e4>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8002b34:	4b5e      	ldr	r3, [pc, #376]	; (8002cb0 <PullingExperiment+0x8b0>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e14c      	b.n	8002dd8 <PullingExperiment+0x9d8>
		}

		if(PullStep5) // catch inner object speed
 8002b3e:	4b5d      	ldr	r3, [pc, #372]	; (8002cb4 <PullingExperiment+0x8b4>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d078      	beq.n	8002c38 <PullingExperiment+0x838>
//				PullStep4 = false;
//				PullStep5 = true;
//			}
			//AccRef = GravityConst - PullingAcc4;

			if (IsReachTargetPosition) // Switch to Step 5
 8002b46:	4b59      	ldr	r3, [pc, #356]	; (8002cac <PullingExperiment+0x8ac>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <PullingExperiment+0x76e>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8002b50:	4b57      	ldr	r3, [pc, #348]	; (8002cb0 <PullingExperiment+0x8b0>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
				PullStep5 = false;
 8002b56:	4b57      	ldr	r3, [pc, #348]	; (8002cb4 <PullingExperiment+0x8b4>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
				PullStep6 = true;
 8002b5c:	4b62      	ldr	r3, [pc, #392]	; (8002ce8 <PullingExperiment+0x8e8>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8002b62:	4b52      	ldr	r3, [pc, #328]	; (8002cac <PullingExperiment+0x8ac>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false; // OFF pulse checking
 8002b68:	4b57      	ldr	r3, [pc, #348]	; (8002cc8 <PullingExperiment+0x8c8>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
			}


			SpeedCmd += SampleTime*0.001*(PullingAcc4)*10/DrumRadius; //
 8002b6e:	4b57      	ldr	r3, [pc, #348]	; (8002ccc <PullingExperiment+0x8cc>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fce8 	bl	8000548 <__aeabi_f2d>
 8002b78:	4604      	mov	r4, r0
 8002b7a:	460d      	mov	r5, r1
 8002b7c:	4b54      	ldr	r3, [pc, #336]	; (8002cd0 <PullingExperiment+0x8d0>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fccf 	bl	8000524 <__aeabi_i2d>
 8002b86:	a346      	add	r3, pc, #280	; (adr r3, 8002ca0 <PullingExperiment+0x8a0>)
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f7fd fd34 	bl	80005f8 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4690      	mov	r8, r2
 8002b96:	4699      	mov	r9, r3
 8002b98:	4b54      	ldr	r3, [pc, #336]	; (8002cec <PullingExperiment+0x8ec>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fcd3 	bl	8000548 <__aeabi_f2d>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4640      	mov	r0, r8
 8002ba8:	4649      	mov	r1, r9
 8002baa:	f7fd fd25 	bl	80005f8 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	4b47      	ldr	r3, [pc, #284]	; (8002cd8 <PullingExperiment+0x8d8>)
 8002bbc:	f7fd fd1c 	bl	80005f8 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4690      	mov	r8, r2
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	4b3d      	ldr	r3, [pc, #244]	; (8002cc0 <PullingExperiment+0x8c0>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fcbb 	bl	8000548 <__aeabi_f2d>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	4649      	mov	r1, r9
 8002bda:	f7fd fe37 	bl	800084c <__aeabi_ddiv>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f7fd fb51 	bl	800028c <__adddf3>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fd fff9 	bl	8000be8 <__aeabi_d2f>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4a34      	ldr	r2, [pc, #208]	; (8002ccc <PullingExperiment+0x8cc>)
 8002bfa:	6013      	str	r3, [r2, #0]
//			if (InnerObjRefSpeed >= 0)
//				InnerObjRefSpeed = 0;
//			if (SpeedCmd <=  InnerObjRefSpeed)
//				SpeedCmd = InnerObjRefSpeed;

			if (SpeedCmd != 0)
 8002bfc:	4b33      	ldr	r3, [pc, #204]	; (8002ccc <PullingExperiment+0x8cc>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d013      	beq.n	8002c34 <PullingExperiment+0x834>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002c0c:	4b33      	ldr	r3, [pc, #204]	; (8002cdc <PullingExperiment+0x8dc>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4a2e      	ldr	r2, [pc, #184]	; (8002ccc <PullingExperiment+0x8cc>)
 8002c12:	edd2 7a00 	vldr	s15, [r2]
 8002c16:	eeb0 0a67 	vmov.f32	s0, s15
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff4c 	bl	8001ab8 <CalculateTimer3Period>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	4b2e      	ldr	r3, [pc, #184]	; (8002ce0 <PullingExperiment+0x8e0>)
 8002c26:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 8002c28:	4b2e      	ldr	r3, [pc, #184]	; (8002ce4 <PullingExperiment+0x8e4>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8002c2e:	4b20      	ldr	r3, [pc, #128]	; (8002cb0 <PullingExperiment+0x8b0>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e0cf      	b.n	8002dd8 <PullingExperiment+0x9d8>
		}

		if (PullStep6) //Final deceleration
 8002c38:	4b2b      	ldr	r3, [pc, #172]	; (8002ce8 <PullingExperiment+0x8e8>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80ca 	beq.w	8002dd6 <PullingExperiment+0x9d6>
		{
			if(SpeedCmd >= 0 || PositionPulseCmd <= 50) // Finish deceleration
 8002c42:	4b22      	ldr	r3, [pc, #136]	; (8002ccc <PullingExperiment+0x8cc>)
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	da03      	bge.n	8002c5a <PullingExperiment+0x85a>
 8002c52:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <PullingExperiment+0x8f0>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b32      	cmp	r3, #50	; 0x32
 8002c58:	dc58      	bgt.n	8002d0c <PullingExperiment+0x90c>
			{
				CompletePulling =true;
 8002c5a:	4b26      	ldr	r3, [pc, #152]	; (8002cf4 <PullingExperiment+0x8f4>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
				PullStep6 = false;
 8002c60:	4b21      	ldr	r3, [pc, #132]	; (8002ce8 <PullingExperiment+0x8e8>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
				SpeedCmd = 0;
 8002c66:	4b19      	ldr	r3, [pc, #100]	; (8002ccc <PullingExperiment+0x8cc>)
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
				StopPulseGenerating();
 8002c6e:	f7fe febd 	bl	80019ec <StopPulseGenerating>

				if (ExperimentMode == 3) // Init for Dropping
 8002c72:	4b21      	ldr	r3, [pc, #132]	; (8002cf8 <PullingExperiment+0x8f8>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <PullingExperiment+0x88a>
				{
					Direction = true; // variable to show the direction, false = move up, true = move down
 8002c7a:	4b20      	ldr	r3, [pc, #128]	; (8002cfc <PullingExperiment+0x8fc>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
					PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002c80:	4b1f      	ldr	r3, [pc, #124]	; (8002d00 <PullingExperiment+0x900>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
					InitPulseGenerating();
 8002c86:	f7fe fed5 	bl	8001a34 <InitPulseGenerating>
				}
				AccRef = GravityConst;
 8002c8a:	4a1e      	ldr	r2, [pc, #120]	; (8002d04 <PullingExperiment+0x904>)
 8002c8c:	4b1e      	ldr	r3, [pc, #120]	; (8002d08 <PullingExperiment+0x908>)
 8002c8e:	601a      	str	r2, [r3, #0]
				return true;
 8002c90:	2301      	movs	r3, #1
 8002c92:	e0a1      	b.n	8002dd8 <PullingExperiment+0x9d8>
 8002c94:	f3af 8000 	nop.w
 8002c98:	51eb851f 	.word	0x51eb851f
 8002c9c:	40191eb8 	.word	0x40191eb8
 8002ca0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002ca4:	3f50624d 	.word	0x3f50624d
 8002ca8:	20000445 	.word	0x20000445
 8002cac:	20000438 	.word	0x20000438
 8002cb0:	20000436 	.word	0x20000436
 8002cb4:	20000446 	.word	0x20000446
 8002cb8:	2000000a 	.word	0x2000000a
 8002cbc:	200004a0 	.word	0x200004a0
 8002cc0:	20000464 	.word	0x20000464
 8002cc4:	200004b0 	.word	0x200004b0
 8002cc8:	2000044c 	.word	0x2000044c
 8002ccc:	20000518 	.word	0x20000518
 8002cd0:	20000468 	.word	0x20000468
 8002cd4:	20000488 	.word	0x20000488
 8002cd8:	40240000 	.word	0x40240000
 8002cdc:	20000003 	.word	0x20000003
 8002ce0:	20000454 	.word	0x20000454
 8002ce4:	20000440 	.word	0x20000440
 8002ce8:	20000447 	.word	0x20000447
 8002cec:	2000048c 	.word	0x2000048c
 8002cf0:	200004b8 	.word	0x200004b8
 8002cf4:	2000043b 	.word	0x2000043b
 8002cf8:	20000005 	.word	0x20000005
 8002cfc:	20000434 	.word	0x20000434
 8002d00:	2000043f 	.word	0x2000043f
 8002d04:	c11ccccd 	.word	0xc11ccccd
 8002d08:	20000010 	.word	0x20000010
			}
			//AccRef = GravityConst + PullingAcc5;
			SpeedCmd += SampleTime*0.001*(PullingAcc5)*10/DrumRadius; //
 8002d0c:	4b36      	ldr	r3, [pc, #216]	; (8002de8 <PullingExperiment+0x9e8>)
 8002d0e:	681b      	ldr	r3, [r3, #0]
 8002d10:	4618      	mov	r0, r3
 8002d12:	f7fd fc19 	bl	8000548 <__aeabi_f2d>
 8002d16:	4604      	mov	r4, r0
 8002d18:	460d      	mov	r5, r1
 8002d1a:	4b34      	ldr	r3, [pc, #208]	; (8002dec <PullingExperiment+0x9ec>)
 8002d1c:	781b      	ldrb	r3, [r3, #0]
 8002d1e:	4618      	mov	r0, r3
 8002d20:	f7fd fc00 	bl	8000524 <__aeabi_i2d>
 8002d24:	a32e      	add	r3, pc, #184	; (adr r3, 8002de0 <PullingExperiment+0x9e0>)
 8002d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d2a:	f7fd fc65 	bl	80005f8 <__aeabi_dmul>
 8002d2e:	4602      	mov	r2, r0
 8002d30:	460b      	mov	r3, r1
 8002d32:	4690      	mov	r8, r2
 8002d34:	4699      	mov	r9, r3
 8002d36:	4b2e      	ldr	r3, [pc, #184]	; (8002df0 <PullingExperiment+0x9f0>)
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	4618      	mov	r0, r3
 8002d3c:	f7fd fc04 	bl	8000548 <__aeabi_f2d>
 8002d40:	4602      	mov	r2, r0
 8002d42:	460b      	mov	r3, r1
 8002d44:	4640      	mov	r0, r8
 8002d46:	4649      	mov	r1, r9
 8002d48:	f7fd fc56 	bl	80005f8 <__aeabi_dmul>
 8002d4c:	4602      	mov	r2, r0
 8002d4e:	460b      	mov	r3, r1
 8002d50:	4610      	mov	r0, r2
 8002d52:	4619      	mov	r1, r3
 8002d54:	f04f 0200 	mov.w	r2, #0
 8002d58:	4b26      	ldr	r3, [pc, #152]	; (8002df4 <PullingExperiment+0x9f4>)
 8002d5a:	f7fd fc4d 	bl	80005f8 <__aeabi_dmul>
 8002d5e:	4602      	mov	r2, r0
 8002d60:	460b      	mov	r3, r1
 8002d62:	4690      	mov	r8, r2
 8002d64:	4699      	mov	r9, r3
 8002d66:	4b24      	ldr	r3, [pc, #144]	; (8002df8 <PullingExperiment+0x9f8>)
 8002d68:	681b      	ldr	r3, [r3, #0]
 8002d6a:	4618      	mov	r0, r3
 8002d6c:	f7fd fbec 	bl	8000548 <__aeabi_f2d>
 8002d70:	4602      	mov	r2, r0
 8002d72:	460b      	mov	r3, r1
 8002d74:	4640      	mov	r0, r8
 8002d76:	4649      	mov	r1, r9
 8002d78:	f7fd fd68 	bl	800084c <__aeabi_ddiv>
 8002d7c:	4602      	mov	r2, r0
 8002d7e:	460b      	mov	r3, r1
 8002d80:	4620      	mov	r0, r4
 8002d82:	4629      	mov	r1, r5
 8002d84:	f7fd fa82 	bl	800028c <__adddf3>
 8002d88:	4602      	mov	r2, r0
 8002d8a:	460b      	mov	r3, r1
 8002d8c:	4610      	mov	r0, r2
 8002d8e:	4619      	mov	r1, r3
 8002d90:	f7fd ff2a 	bl	8000be8 <__aeabi_d2f>
 8002d94:	4603      	mov	r3, r0
 8002d96:	4a14      	ldr	r2, [pc, #80]	; (8002de8 <PullingExperiment+0x9e8>)
 8002d98:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8002d9a:	4b13      	ldr	r3, [pc, #76]	; (8002de8 <PullingExperiment+0x9e8>)
 8002d9c:	edd3 7a00 	vldr	s15, [r3]
 8002da0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002da4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002da8:	d013      	beq.n	8002dd2 <PullingExperiment+0x9d2>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002daa:	4b14      	ldr	r3, [pc, #80]	; (8002dfc <PullingExperiment+0x9fc>)
 8002dac:	781b      	ldrb	r3, [r3, #0]
 8002dae:	4a0e      	ldr	r2, [pc, #56]	; (8002de8 <PullingExperiment+0x9e8>)
 8002db0:	edd2 7a00 	vldr	s15, [r2]
 8002db4:	eeb0 0a67 	vmov.f32	s0, s15
 8002db8:	4618      	mov	r0, r3
 8002dba:	f7fe fe7d 	bl	8001ab8 <CalculateTimer3Period>
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	b29a      	uxth	r2, r3
 8002dc2:	4b0f      	ldr	r3, [pc, #60]	; (8002e00 <PullingExperiment+0xa00>)
 8002dc4:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 8002dc6:	4b0f      	ldr	r3, [pc, #60]	; (8002e04 <PullingExperiment+0xa04>)
 8002dc8:	2201      	movs	r2, #1
 8002dca:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8002dcc:	4b0e      	ldr	r3, [pc, #56]	; (8002e08 <PullingExperiment+0xa08>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002dd2:	2300      	movs	r3, #0
 8002dd4:	e000      	b.n	8002dd8 <PullingExperiment+0x9d8>
		}
	}
	return false;
 8002dd6:	2300      	movs	r3, #0
}
 8002dd8:	4618      	mov	r0, r3
 8002dda:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dde:	bf00      	nop
 8002de0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002de4:	3f50624d 	.word	0x3f50624d
 8002de8:	20000518 	.word	0x20000518
 8002dec:	20000468 	.word	0x20000468
 8002df0:	20000490 	.word	0x20000490
 8002df4:	40240000 	.word	0x40240000
 8002df8:	20000464 	.word	0x20000464
 8002dfc:	20000003 	.word	0x20000003
 8002e00:	20000454 	.word	0x20000454
 8002e04:	20000440 	.word	0x20000440
 8002e08:	20000436 	.word	0x20000436
 8002e0c:	00000000 	.word	0x00000000

08002e10 <SimulatePulling>:
bool SimulatePulling ()
{
 8002e10:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e14:	af00      	add	r7, sp, #0
	if (CompletePulling)
 8002e16:	4ba8      	ldr	r3, [pc, #672]	; (80030b8 <SimulatePulling+0x2a8>)
 8002e18:	781b      	ldrb	r3, [r3, #0]
 8002e1a:	2b00      	cmp	r3, #0
 8002e1c:	d002      	beq.n	8002e24 <SimulatePulling+0x14>
	{
		return true;
 8002e1e:	2301      	movs	r3, #1
 8002e20:	f000 bc8c 	b.w	800373c <SimulatePulling+0x92c>
	}
	else
	{
		if (PullStep1) // Accelerate pulling, Acc1
 8002e24:	4ba5      	ldr	r3, [pc, #660]	; (80030bc <SimulatePulling+0x2ac>)
 8002e26:	781b      	ldrb	r3, [r3, #0]
 8002e28:	2b00      	cmp	r3, #0
 8002e2a:	f000 80b2 	beq.w	8002f92 <SimulatePulling+0x182>
		{
			if (IsReachTargetPosition) // Switch to Step 2
 8002e2e:	4ba4      	ldr	r3, [pc, #656]	; (80030c0 <SimulatePulling+0x2b0>)
 8002e30:	781b      	ldrb	r3, [r3, #0]
 8002e32:	b2db      	uxtb	r3, r3
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d03b      	beq.n	8002eb0 <SimulatePulling+0xa0>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8002e38:	4ba2      	ldr	r3, [pc, #648]	; (80030c4 <SimulatePulling+0x2b4>)
 8002e3a:	2200      	movs	r2, #0
 8002e3c:	701a      	strb	r2, [r3, #0]
				PullStep1 = false;
 8002e3e:	4b9f      	ldr	r3, [pc, #636]	; (80030bc <SimulatePulling+0x2ac>)
 8002e40:	2200      	movs	r2, #0
 8002e42:	701a      	strb	r2, [r3, #0]
				PullStep2 = true; // Switch to Step 2
 8002e44:	4ba0      	ldr	r3, [pc, #640]	; (80030c8 <SimulatePulling+0x2b8>)
 8002e46:	2201      	movs	r2, #1
 8002e48:	701a      	strb	r2, [r3, #0]

				TargetPosition += ((int)(EncoderResolution*PullingPoint2/(2*3.14*DrumRadius))); // Max Speed Point
 8002e4a:	4ba0      	ldr	r3, [pc, #640]	; (80030cc <SimulatePulling+0x2bc>)
 8002e4c:	881b      	ldrh	r3, [r3, #0]
 8002e4e:	ee07 3a90 	vmov	s15, r3
 8002e52:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e56:	4b9e      	ldr	r3, [pc, #632]	; (80030d0 <SimulatePulling+0x2c0>)
 8002e58:	edd3 7a00 	vldr	s15, [r3]
 8002e5c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e60:	ee17 0a90 	vmov	r0, s15
 8002e64:	f7fd fb70 	bl	8000548 <__aeabi_f2d>
 8002e68:	4604      	mov	r4, r0
 8002e6a:	460d      	mov	r5, r1
 8002e6c:	4b99      	ldr	r3, [pc, #612]	; (80030d4 <SimulatePulling+0x2c4>)
 8002e6e:	681b      	ldr	r3, [r3, #0]
 8002e70:	4618      	mov	r0, r3
 8002e72:	f7fd fb69 	bl	8000548 <__aeabi_f2d>
 8002e76:	a38c      	add	r3, pc, #560	; (adr r3, 80030a8 <SimulatePulling+0x298>)
 8002e78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e7c:	f7fd fbbc 	bl	80005f8 <__aeabi_dmul>
 8002e80:	4602      	mov	r2, r0
 8002e82:	460b      	mov	r3, r1
 8002e84:	4620      	mov	r0, r4
 8002e86:	4629      	mov	r1, r5
 8002e88:	f7fd fce0 	bl	800084c <__aeabi_ddiv>
 8002e8c:	4602      	mov	r2, r0
 8002e8e:	460b      	mov	r3, r1
 8002e90:	4610      	mov	r0, r2
 8002e92:	4619      	mov	r1, r3
 8002e94:	f7fd fe60 	bl	8000b58 <__aeabi_d2iz>
 8002e98:	4602      	mov	r2, r0
 8002e9a:	4b8f      	ldr	r3, [pc, #572]	; (80030d8 <SimulatePulling+0x2c8>)
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	4413      	add	r3, r2
 8002ea0:	4a8d      	ldr	r2, [pc, #564]	; (80030d8 <SimulatePulling+0x2c8>)
 8002ea2:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8002ea4:	4b8d      	ldr	r3, [pc, #564]	; (80030dc <SimulatePulling+0x2cc>)
 8002ea6:	2201      	movs	r2, #1
 8002ea8:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8002eaa:	4b85      	ldr	r3, [pc, #532]	; (80030c0 <SimulatePulling+0x2b0>)
 8002eac:	2200      	movs	r2, #0
 8002eae:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst - PullingAcc1;
 8002eb0:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80030e0 <SimulatePulling+0x2d0>
 8002eb4:	4b8b      	ldr	r3, [pc, #556]	; (80030e4 <SimulatePulling+0x2d4>)
 8002eb6:	edd3 7a00 	vldr	s15, [r3]
 8002eba:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002ebe:	4b8a      	ldr	r3, [pc, #552]	; (80030e8 <SimulatePulling+0x2d8>)
 8002ec0:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(-PullingAcc1)*10/DrumRadius;
 8002ec4:	4b89      	ldr	r3, [pc, #548]	; (80030ec <SimulatePulling+0x2dc>)
 8002ec6:	681b      	ldr	r3, [r3, #0]
 8002ec8:	4618      	mov	r0, r3
 8002eca:	f7fd fb3d 	bl	8000548 <__aeabi_f2d>
 8002ece:	4604      	mov	r4, r0
 8002ed0:	460d      	mov	r5, r1
 8002ed2:	4b87      	ldr	r3, [pc, #540]	; (80030f0 <SimulatePulling+0x2e0>)
 8002ed4:	781b      	ldrb	r3, [r3, #0]
 8002ed6:	4618      	mov	r0, r3
 8002ed8:	f7fd fb24 	bl	8000524 <__aeabi_i2d>
 8002edc:	a374      	add	r3, pc, #464	; (adr r3, 80030b0 <SimulatePulling+0x2a0>)
 8002ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ee2:	f7fd fb89 	bl	80005f8 <__aeabi_dmul>
 8002ee6:	4602      	mov	r2, r0
 8002ee8:	460b      	mov	r3, r1
 8002eea:	4690      	mov	r8, r2
 8002eec:	4699      	mov	r9, r3
 8002eee:	4b7d      	ldr	r3, [pc, #500]	; (80030e4 <SimulatePulling+0x2d4>)
 8002ef0:	edd3 7a00 	vldr	s15, [r3]
 8002ef4:	eef1 7a67 	vneg.f32	s15, s15
 8002ef8:	ee17 3a90 	vmov	r3, s15
 8002efc:	4618      	mov	r0, r3
 8002efe:	f7fd fb23 	bl	8000548 <__aeabi_f2d>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4640      	mov	r0, r8
 8002f08:	4649      	mov	r1, r9
 8002f0a:	f7fd fb75 	bl	80005f8 <__aeabi_dmul>
 8002f0e:	4602      	mov	r2, r0
 8002f10:	460b      	mov	r3, r1
 8002f12:	4610      	mov	r0, r2
 8002f14:	4619      	mov	r1, r3
 8002f16:	f04f 0200 	mov.w	r2, #0
 8002f1a:	4b76      	ldr	r3, [pc, #472]	; (80030f4 <SimulatePulling+0x2e4>)
 8002f1c:	f7fd fb6c 	bl	80005f8 <__aeabi_dmul>
 8002f20:	4602      	mov	r2, r0
 8002f22:	460b      	mov	r3, r1
 8002f24:	4690      	mov	r8, r2
 8002f26:	4699      	mov	r9, r3
 8002f28:	4b6a      	ldr	r3, [pc, #424]	; (80030d4 <SimulatePulling+0x2c4>)
 8002f2a:	681b      	ldr	r3, [r3, #0]
 8002f2c:	4618      	mov	r0, r3
 8002f2e:	f7fd fb0b 	bl	8000548 <__aeabi_f2d>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4640      	mov	r0, r8
 8002f38:	4649      	mov	r1, r9
 8002f3a:	f7fd fc87 	bl	800084c <__aeabi_ddiv>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4620      	mov	r0, r4
 8002f44:	4629      	mov	r1, r5
 8002f46:	f7fd f9a1 	bl	800028c <__adddf3>
 8002f4a:	4602      	mov	r2, r0
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	4610      	mov	r0, r2
 8002f50:	4619      	mov	r1, r3
 8002f52:	f7fd fe49 	bl	8000be8 <__aeabi_d2f>
 8002f56:	4603      	mov	r3, r0
 8002f58:	4a64      	ldr	r2, [pc, #400]	; (80030ec <SimulatePulling+0x2dc>)
 8002f5a:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8002f5c:	4b63      	ldr	r3, [pc, #396]	; (80030ec <SimulatePulling+0x2dc>)
 8002f5e:	edd3 7a00 	vldr	s15, [r3]
 8002f62:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f6a:	d010      	beq.n	8002f8e <SimulatePulling+0x17e>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002f6c:	4b62      	ldr	r3, [pc, #392]	; (80030f8 <SimulatePulling+0x2e8>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4a5e      	ldr	r2, [pc, #376]	; (80030ec <SimulatePulling+0x2dc>)
 8002f72:	edd2 7a00 	vldr	s15, [r2]
 8002f76:	eeb0 0a67 	vmov.f32	s0, s15
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fe fd9c 	bl	8001ab8 <CalculateTimer3Period>
 8002f80:	4603      	mov	r3, r0
 8002f82:	b29a      	uxth	r2, r3
 8002f84:	4b5d      	ldr	r3, [pc, #372]	; (80030fc <SimulatePulling+0x2ec>)
 8002f86:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8002f88:	4b4e      	ldr	r3, [pc, #312]	; (80030c4 <SimulatePulling+0x2b4>)
 8002f8a:	2201      	movs	r2, #1
 8002f8c:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002f8e:	2300      	movs	r3, #0
 8002f90:	e3d4      	b.n	800373c <SimulatePulling+0x92c>
		}
		if (PullStep2) // Accelerate Pulling Acc2
 8002f92:	4b4d      	ldr	r3, [pc, #308]	; (80030c8 <SimulatePulling+0x2b8>)
 8002f94:	781b      	ldrb	r3, [r3, #0]
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	f000 80b6 	beq.w	8003108 <SimulatePulling+0x2f8>
		{
			if (IsReachTargetPosition) // Switch to Step 3
 8002f9c:	4b48      	ldr	r3, [pc, #288]	; (80030c0 <SimulatePulling+0x2b0>)
 8002f9e:	781b      	ldrb	r3, [r3, #0]
 8002fa0:	b2db      	uxtb	r3, r3
 8002fa2:	2b00      	cmp	r3, #0
 8002fa4:	d00e      	beq.n	8002fc4 <SimulatePulling+0x1b4>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8002fa6:	4b47      	ldr	r3, [pc, #284]	; (80030c4 <SimulatePulling+0x2b4>)
 8002fa8:	2200      	movs	r2, #0
 8002faa:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false;
 8002fac:	4b4b      	ldr	r3, [pc, #300]	; (80030dc <SimulatePulling+0x2cc>)
 8002fae:	2200      	movs	r2, #0
 8002fb0:	701a      	strb	r2, [r3, #0]
				PullStep2 = false;
 8002fb2:	4b45      	ldr	r3, [pc, #276]	; (80030c8 <SimulatePulling+0x2b8>)
 8002fb4:	2200      	movs	r2, #0
 8002fb6:	701a      	strb	r2, [r3, #0]
				PullStep3 = true;
 8002fb8:	4b51      	ldr	r3, [pc, #324]	; (8003100 <SimulatePulling+0x2f0>)
 8002fba:	2201      	movs	r2, #1
 8002fbc:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8002fbe:	4b40      	ldr	r3, [pc, #256]	; (80030c0 <SimulatePulling+0x2b0>)
 8002fc0:	2200      	movs	r2, #0
 8002fc2:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst - PullingAcc2;
 8002fc4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80030e0 <SimulatePulling+0x2d0>
 8002fc8:	4b4e      	ldr	r3, [pc, #312]	; (8003104 <SimulatePulling+0x2f4>)
 8002fca:	edd3 7a00 	vldr	s15, [r3]
 8002fce:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fd2:	4b45      	ldr	r3, [pc, #276]	; (80030e8 <SimulatePulling+0x2d8>)
 8002fd4:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(-PullingAcc2)*10/DrumRadius; //
 8002fd8:	4b44      	ldr	r3, [pc, #272]	; (80030ec <SimulatePulling+0x2dc>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fab3 	bl	8000548 <__aeabi_f2d>
 8002fe2:	4604      	mov	r4, r0
 8002fe4:	460d      	mov	r5, r1
 8002fe6:	4b42      	ldr	r3, [pc, #264]	; (80030f0 <SimulatePulling+0x2e0>)
 8002fe8:	781b      	ldrb	r3, [r3, #0]
 8002fea:	4618      	mov	r0, r3
 8002fec:	f7fd fa9a 	bl	8000524 <__aeabi_i2d>
 8002ff0:	a32f      	add	r3, pc, #188	; (adr r3, 80030b0 <SimulatePulling+0x2a0>)
 8002ff2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ff6:	f7fd faff 	bl	80005f8 <__aeabi_dmul>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	4690      	mov	r8, r2
 8003000:	4699      	mov	r9, r3
 8003002:	4b40      	ldr	r3, [pc, #256]	; (8003104 <SimulatePulling+0x2f4>)
 8003004:	edd3 7a00 	vldr	s15, [r3]
 8003008:	eef1 7a67 	vneg.f32	s15, s15
 800300c:	ee17 3a90 	vmov	r3, s15
 8003010:	4618      	mov	r0, r3
 8003012:	f7fd fa99 	bl	8000548 <__aeabi_f2d>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4640      	mov	r0, r8
 800301c:	4649      	mov	r1, r9
 800301e:	f7fd faeb 	bl	80005f8 <__aeabi_dmul>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f04f 0200 	mov.w	r2, #0
 800302e:	4b31      	ldr	r3, [pc, #196]	; (80030f4 <SimulatePulling+0x2e4>)
 8003030:	f7fd fae2 	bl	80005f8 <__aeabi_dmul>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4690      	mov	r8, r2
 800303a:	4699      	mov	r9, r3
 800303c:	4b25      	ldr	r3, [pc, #148]	; (80030d4 <SimulatePulling+0x2c4>)
 800303e:	681b      	ldr	r3, [r3, #0]
 8003040:	4618      	mov	r0, r3
 8003042:	f7fd fa81 	bl	8000548 <__aeabi_f2d>
 8003046:	4602      	mov	r2, r0
 8003048:	460b      	mov	r3, r1
 800304a:	4640      	mov	r0, r8
 800304c:	4649      	mov	r1, r9
 800304e:	f7fd fbfd 	bl	800084c <__aeabi_ddiv>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	4620      	mov	r0, r4
 8003058:	4629      	mov	r1, r5
 800305a:	f7fd f917 	bl	800028c <__adddf3>
 800305e:	4602      	mov	r2, r0
 8003060:	460b      	mov	r3, r1
 8003062:	4610      	mov	r0, r2
 8003064:	4619      	mov	r1, r3
 8003066:	f7fd fdbf 	bl	8000be8 <__aeabi_d2f>
 800306a:	4603      	mov	r3, r0
 800306c:	4a1f      	ldr	r2, [pc, #124]	; (80030ec <SimulatePulling+0x2dc>)
 800306e:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8003070:	4b1e      	ldr	r3, [pc, #120]	; (80030ec <SimulatePulling+0x2dc>)
 8003072:	edd3 7a00 	vldr	s15, [r3]
 8003076:	eef5 7a40 	vcmp.f32	s15, #0.0
 800307a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800307e:	d010      	beq.n	80030a2 <SimulatePulling+0x292>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003080:	4b1d      	ldr	r3, [pc, #116]	; (80030f8 <SimulatePulling+0x2e8>)
 8003082:	781b      	ldrb	r3, [r3, #0]
 8003084:	4a19      	ldr	r2, [pc, #100]	; (80030ec <SimulatePulling+0x2dc>)
 8003086:	edd2 7a00 	vldr	s15, [r2]
 800308a:	eeb0 0a67 	vmov.f32	s0, s15
 800308e:	4618      	mov	r0, r3
 8003090:	f7fe fd12 	bl	8001ab8 <CalculateTimer3Period>
 8003094:	4603      	mov	r3, r0
 8003096:	b29a      	uxth	r2, r3
 8003098:	4b18      	ldr	r3, [pc, #96]	; (80030fc <SimulatePulling+0x2ec>)
 800309a:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 800309c:	4b09      	ldr	r3, [pc, #36]	; (80030c4 <SimulatePulling+0x2b4>)
 800309e:	2201      	movs	r2, #1
 80030a0:	701a      	strb	r2, [r3, #0]
			}
			return false;
 80030a2:	2300      	movs	r3, #0
 80030a4:	e34a      	b.n	800373c <SimulatePulling+0x92c>
 80030a6:	bf00      	nop
 80030a8:	51eb851f 	.word	0x51eb851f
 80030ac:	40191eb8 	.word	0x40191eb8
 80030b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80030b4:	3f50624d 	.word	0x3f50624d
 80030b8:	2000043b 	.word	0x2000043b
 80030bc:	20000442 	.word	0x20000442
 80030c0:	20000438 	.word	0x20000438
 80030c4:	20000436 	.word	0x20000436
 80030c8:	20000443 	.word	0x20000443
 80030cc:	2000000a 	.word	0x2000000a
 80030d0:	20000498 	.word	0x20000498
 80030d4:	20000464 	.word	0x20000464
 80030d8:	200004b0 	.word	0x200004b0
 80030dc:	2000044c 	.word	0x2000044c
 80030e0:	c11ccccd 	.word	0xc11ccccd
 80030e4:	20000480 	.word	0x20000480
 80030e8:	20000010 	.word	0x20000010
 80030ec:	20000518 	.word	0x20000518
 80030f0:	20000468 	.word	0x20000468
 80030f4:	40240000 	.word	0x40240000
 80030f8:	20000003 	.word	0x20000003
 80030fc:	20000454 	.word	0x20000454
 8003100:	20000444 	.word	0x20000444
 8003104:	20000484 	.word	0x20000484
		}
		if (PullStep3) // Smooth the transition
 8003108:	4b6b      	ldr	r3, [pc, #428]	; (80032b8 <SimulatePulling+0x4a8>)
 800310a:	781b      	ldrb	r3, [r3, #0]
 800310c:	2b00      	cmp	r3, #0
 800310e:	f000 80f7 	beq.w	8003300 <SimulatePulling+0x4f0>
		{
			if (AccRef >= GravityConst + PullingAcc3) // Switch to step 2
 8003112:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80032bc <SimulatePulling+0x4ac>
 8003116:	4b6a      	ldr	r3, [pc, #424]	; (80032c0 <SimulatePulling+0x4b0>)
 8003118:	edd3 7a00 	vldr	s15, [r3]
 800311c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003120:	4b68      	ldr	r3, [pc, #416]	; (80032c4 <SimulatePulling+0x4b4>)
 8003122:	edd3 7a00 	vldr	s15, [r3]
 8003126:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800312a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800312e:	d838      	bhi.n	80031a2 <SimulatePulling+0x392>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003130:	4b65      	ldr	r3, [pc, #404]	; (80032c8 <SimulatePulling+0x4b8>)
 8003132:	2200      	movs	r2, #0
 8003134:	701a      	strb	r2, [r3, #0]

				TargetPosition = PulseSimuCount + ((int)(EncoderResolution*PullingPoint3/(2*3.14*DrumRadius))) ; // Max Speed Point
 8003136:	4b65      	ldr	r3, [pc, #404]	; (80032cc <SimulatePulling+0x4bc>)
 8003138:	881b      	ldrh	r3, [r3, #0]
 800313a:	ee07 3a90 	vmov	s15, r3
 800313e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003142:	4b63      	ldr	r3, [pc, #396]	; (80032d0 <SimulatePulling+0x4c0>)
 8003144:	edd3 7a00 	vldr	s15, [r3]
 8003148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800314c:	ee17 0a90 	vmov	r0, s15
 8003150:	f7fd f9fa 	bl	8000548 <__aeabi_f2d>
 8003154:	4604      	mov	r4, r0
 8003156:	460d      	mov	r5, r1
 8003158:	4b5e      	ldr	r3, [pc, #376]	; (80032d4 <SimulatePulling+0x4c4>)
 800315a:	681b      	ldr	r3, [r3, #0]
 800315c:	4618      	mov	r0, r3
 800315e:	f7fd f9f3 	bl	8000548 <__aeabi_f2d>
 8003162:	a351      	add	r3, pc, #324	; (adr r3, 80032a8 <SimulatePulling+0x498>)
 8003164:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003168:	f7fd fa46 	bl	80005f8 <__aeabi_dmul>
 800316c:	4602      	mov	r2, r0
 800316e:	460b      	mov	r3, r1
 8003170:	4620      	mov	r0, r4
 8003172:	4629      	mov	r1, r5
 8003174:	f7fd fb6a 	bl	800084c <__aeabi_ddiv>
 8003178:	4602      	mov	r2, r0
 800317a:	460b      	mov	r3, r1
 800317c:	4610      	mov	r0, r2
 800317e:	4619      	mov	r1, r3
 8003180:	f7fd fcea 	bl	8000b58 <__aeabi_d2iz>
 8003184:	4602      	mov	r2, r0
 8003186:	4b54      	ldr	r3, [pc, #336]	; (80032d8 <SimulatePulling+0x4c8>)
 8003188:	681b      	ldr	r3, [r3, #0]
 800318a:	4413      	add	r3, r2
 800318c:	4a53      	ldr	r2, [pc, #332]	; (80032dc <SimulatePulling+0x4cc>)
 800318e:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8003190:	4b53      	ldr	r3, [pc, #332]	; (80032e0 <SimulatePulling+0x4d0>)
 8003192:	2201      	movs	r2, #1
 8003194:	701a      	strb	r2, [r3, #0]

				PullStep3 = false;
 8003196:	4b48      	ldr	r3, [pc, #288]	; (80032b8 <SimulatePulling+0x4a8>)
 8003198:	2200      	movs	r2, #0
 800319a:	701a      	strb	r2, [r3, #0]
				PullStep4 = true; // Switch to Step 4
 800319c:	4b51      	ldr	r3, [pc, #324]	; (80032e4 <SimulatePulling+0x4d4>)
 800319e:	2201      	movs	r2, #1
 80031a0:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,DropAccelSlope,GravityConst + PullingAcc3);
 80031a2:	4b51      	ldr	r3, [pc, #324]	; (80032e8 <SimulatePulling+0x4d8>)
 80031a4:	781b      	ldrb	r3, [r3, #0]
 80031a6:	ee07 3a90 	vmov	s15, r3
 80031aa:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80031ae:	eddf 6a43 	vldr	s13, [pc, #268]	; 80032bc <SimulatePulling+0x4ac>
 80031b2:	4b43      	ldr	r3, [pc, #268]	; (80032c0 <SimulatePulling+0x4b0>)
 80031b4:	edd3 7a00 	vldr	s15, [r3]
 80031b8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031bc:	eef0 0a67 	vmov.f32	s1, s15
 80031c0:	eeb0 0a47 	vmov.f32	s0, s14
 80031c4:	483f      	ldr	r0, [pc, #252]	; (80032c4 <SimulatePulling+0x4b4>)
 80031c6:	f7fe fbb3 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 80031ca:	4b48      	ldr	r3, [pc, #288]	; (80032ec <SimulatePulling+0x4dc>)
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	4618      	mov	r0, r3
 80031d0:	f7fd f9ba 	bl	8000548 <__aeabi_f2d>
 80031d4:	4604      	mov	r4, r0
 80031d6:	460d      	mov	r5, r1
 80031d8:	4b45      	ldr	r3, [pc, #276]	; (80032f0 <SimulatePulling+0x4e0>)
 80031da:	781b      	ldrb	r3, [r3, #0]
 80031dc:	4618      	mov	r0, r3
 80031de:	f7fd f9a1 	bl	8000524 <__aeabi_i2d>
 80031e2:	a333      	add	r3, pc, #204	; (adr r3, 80032b0 <SimulatePulling+0x4a0>)
 80031e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e8:	f7fd fa06 	bl	80005f8 <__aeabi_dmul>
 80031ec:	4602      	mov	r2, r0
 80031ee:	460b      	mov	r3, r1
 80031f0:	4690      	mov	r8, r2
 80031f2:	4699      	mov	r9, r3
 80031f4:	4b33      	ldr	r3, [pc, #204]	; (80032c4 <SimulatePulling+0x4b4>)
 80031f6:	edd3 7a00 	vldr	s15, [r3]
 80031fa:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80032bc <SimulatePulling+0x4ac>
 80031fe:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003202:	ee17 0a90 	vmov	r0, s15
 8003206:	f7fd f99f 	bl	8000548 <__aeabi_f2d>
 800320a:	4602      	mov	r2, r0
 800320c:	460b      	mov	r3, r1
 800320e:	4640      	mov	r0, r8
 8003210:	4649      	mov	r1, r9
 8003212:	f7fd f9f1 	bl	80005f8 <__aeabi_dmul>
 8003216:	4602      	mov	r2, r0
 8003218:	460b      	mov	r3, r1
 800321a:	4610      	mov	r0, r2
 800321c:	4619      	mov	r1, r3
 800321e:	f04f 0200 	mov.w	r2, #0
 8003222:	4b34      	ldr	r3, [pc, #208]	; (80032f4 <SimulatePulling+0x4e4>)
 8003224:	f7fd f9e8 	bl	80005f8 <__aeabi_dmul>
 8003228:	4602      	mov	r2, r0
 800322a:	460b      	mov	r3, r1
 800322c:	4690      	mov	r8, r2
 800322e:	4699      	mov	r9, r3
 8003230:	4b28      	ldr	r3, [pc, #160]	; (80032d4 <SimulatePulling+0x4c4>)
 8003232:	681b      	ldr	r3, [r3, #0]
 8003234:	4618      	mov	r0, r3
 8003236:	f7fd f987 	bl	8000548 <__aeabi_f2d>
 800323a:	4602      	mov	r2, r0
 800323c:	460b      	mov	r3, r1
 800323e:	4640      	mov	r0, r8
 8003240:	4649      	mov	r1, r9
 8003242:	f7fd fb03 	bl	800084c <__aeabi_ddiv>
 8003246:	4602      	mov	r2, r0
 8003248:	460b      	mov	r3, r1
 800324a:	4620      	mov	r0, r4
 800324c:	4629      	mov	r1, r5
 800324e:	f7fd f81d 	bl	800028c <__adddf3>
 8003252:	4602      	mov	r2, r0
 8003254:	460b      	mov	r3, r1
 8003256:	4610      	mov	r0, r2
 8003258:	4619      	mov	r1, r3
 800325a:	f7fd fcc5 	bl	8000be8 <__aeabi_d2f>
 800325e:	4603      	mov	r3, r0
 8003260:	4a22      	ldr	r2, [pc, #136]	; (80032ec <SimulatePulling+0x4dc>)
 8003262:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 8003264:	4b21      	ldr	r3, [pc, #132]	; (80032ec <SimulatePulling+0x4dc>)
 8003266:	edd3 7a00 	vldr	s15, [r3]
 800326a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800326e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003272:	d011      	beq.n	8003298 <SimulatePulling+0x488>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003274:	4b20      	ldr	r3, [pc, #128]	; (80032f8 <SimulatePulling+0x4e8>)
 8003276:	781b      	ldrb	r3, [r3, #0]
 8003278:	4a1c      	ldr	r2, [pc, #112]	; (80032ec <SimulatePulling+0x4dc>)
 800327a:	edd2 7a00 	vldr	s15, [r2]
 800327e:	eeb0 0a67 	vmov.f32	s0, s15
 8003282:	4618      	mov	r0, r3
 8003284:	f7fe fc18 	bl	8001ab8 <CalculateTimer3Period>
 8003288:	4603      	mov	r3, r0
 800328a:	b29a      	uxth	r2, r3
 800328c:	4b1b      	ldr	r3, [pc, #108]	; (80032fc <SimulatePulling+0x4ec>)
 800328e:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003290:	4b0d      	ldr	r3, [pc, #52]	; (80032c8 <SimulatePulling+0x4b8>)
 8003292:	2201      	movs	r2, #1
 8003294:	701a      	strb	r2, [r3, #0]
 8003296:	e002      	b.n	800329e <SimulatePulling+0x48e>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8003298:	4b0b      	ldr	r3, [pc, #44]	; (80032c8 <SimulatePulling+0x4b8>)
 800329a:	2200      	movs	r2, #0
 800329c:	701a      	strb	r2, [r3, #0]
			}
			return false;
 800329e:	2300      	movs	r3, #0
 80032a0:	e24c      	b.n	800373c <SimulatePulling+0x92c>
 80032a2:	bf00      	nop
 80032a4:	f3af 8000 	nop.w
 80032a8:	51eb851f 	.word	0x51eb851f
 80032ac:	40191eb8 	.word	0x40191eb8
 80032b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80032b4:	3f50624d 	.word	0x3f50624d
 80032b8:	20000444 	.word	0x20000444
 80032bc:	c11ccccd 	.word	0xc11ccccd
 80032c0:	20000488 	.word	0x20000488
 80032c4:	20000010 	.word	0x20000010
 80032c8:	20000436 	.word	0x20000436
 80032cc:	2000000a 	.word	0x2000000a
 80032d0:	2000049c 	.word	0x2000049c
 80032d4:	20000464 	.word	0x20000464
 80032d8:	200004b4 	.word	0x200004b4
 80032dc:	200004b0 	.word	0x200004b0
 80032e0:	2000044c 	.word	0x2000044c
 80032e4:	20000445 	.word	0x20000445
 80032e8:	20000541 	.word	0x20000541
 80032ec:	20000518 	.word	0x20000518
 80032f0:	20000468 	.word	0x20000468
 80032f4:	40240000 	.word	0x40240000
 80032f8:	20000003 	.word	0x20000003
 80032fc:	20000454 	.word	0x20000454
		}

		if (PullStep4) //
 8003300:	4ba9      	ldr	r3, [pc, #676]	; (80035a8 <SimulatePulling+0x798>)
 8003302:	781b      	ldrb	r3, [r3, #0]
 8003304:	2b00      	cmp	r3, #0
 8003306:	f000 80bf 	beq.w	8003488 <SimulatePulling+0x678>
		{
			if (IsReachTargetPosition) // Switch to Step 5
 800330a:	4ba8      	ldr	r3, [pc, #672]	; (80035ac <SimulatePulling+0x79c>)
 800330c:	781b      	ldrb	r3, [r3, #0]
 800330e:	b2db      	uxtb	r3, r3
 8003310:	2b00      	cmp	r3, #0
 8003312:	d03b      	beq.n	800338c <SimulatePulling+0x57c>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003314:	4ba6      	ldr	r3, [pc, #664]	; (80035b0 <SimulatePulling+0x7a0>)
 8003316:	2200      	movs	r2, #0
 8003318:	701a      	strb	r2, [r3, #0]
				PullStep4 = false;
 800331a:	4ba3      	ldr	r3, [pc, #652]	; (80035a8 <SimulatePulling+0x798>)
 800331c:	2200      	movs	r2, #0
 800331e:	701a      	strb	r2, [r3, #0]
				PullStep5 = true;
 8003320:	4ba4      	ldr	r3, [pc, #656]	; (80035b4 <SimulatePulling+0x7a4>)
 8003322:	2201      	movs	r2, #1
 8003324:	701a      	strb	r2, [r3, #0]

				TargetPosition += ((int)(EncoderResolution*PullingPoint4/(2*3.14*DrumRadius)));
 8003326:	4ba4      	ldr	r3, [pc, #656]	; (80035b8 <SimulatePulling+0x7a8>)
 8003328:	881b      	ldrh	r3, [r3, #0]
 800332a:	ee07 3a90 	vmov	s15, r3
 800332e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003332:	4ba2      	ldr	r3, [pc, #648]	; (80035bc <SimulatePulling+0x7ac>)
 8003334:	edd3 7a00 	vldr	s15, [r3]
 8003338:	ee67 7a27 	vmul.f32	s15, s14, s15
 800333c:	ee17 0a90 	vmov	r0, s15
 8003340:	f7fd f902 	bl	8000548 <__aeabi_f2d>
 8003344:	4604      	mov	r4, r0
 8003346:	460d      	mov	r5, r1
 8003348:	4b9d      	ldr	r3, [pc, #628]	; (80035c0 <SimulatePulling+0x7b0>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd f8fb 	bl	8000548 <__aeabi_f2d>
 8003352:	a391      	add	r3, pc, #580	; (adr r3, 8003598 <SimulatePulling+0x788>)
 8003354:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003358:	f7fd f94e 	bl	80005f8 <__aeabi_dmul>
 800335c:	4602      	mov	r2, r0
 800335e:	460b      	mov	r3, r1
 8003360:	4620      	mov	r0, r4
 8003362:	4629      	mov	r1, r5
 8003364:	f7fd fa72 	bl	800084c <__aeabi_ddiv>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	4610      	mov	r0, r2
 800336e:	4619      	mov	r1, r3
 8003370:	f7fd fbf2 	bl	8000b58 <__aeabi_d2iz>
 8003374:	4602      	mov	r2, r0
 8003376:	4b93      	ldr	r3, [pc, #588]	; (80035c4 <SimulatePulling+0x7b4>)
 8003378:	681b      	ldr	r3, [r3, #0]
 800337a:	4413      	add	r3, r2
 800337c:	4a91      	ldr	r2, [pc, #580]	; (80035c4 <SimulatePulling+0x7b4>)
 800337e:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8003380:	4b91      	ldr	r3, [pc, #580]	; (80035c8 <SimulatePulling+0x7b8>)
 8003382:	2201      	movs	r2, #1
 8003384:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8003386:	4b89      	ldr	r3, [pc, #548]	; (80035ac <SimulatePulling+0x79c>)
 8003388:	2200      	movs	r2, #0
 800338a:	701a      	strb	r2, [r3, #0]
			}

			AccRef = GravityConst + PullingAcc3;
 800338c:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80035cc <SimulatePulling+0x7bc>
 8003390:	4b8f      	ldr	r3, [pc, #572]	; (80035d0 <SimulatePulling+0x7c0>)
 8003392:	edd3 7a00 	vldr	s15, [r3]
 8003396:	ee77 7a27 	vadd.f32	s15, s14, s15
 800339a:	4b8e      	ldr	r3, [pc, #568]	; (80035d4 <SimulatePulling+0x7c4>)
 800339c:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef-GravityConst)*10/DrumRadius; //
 80033a0:	4b8d      	ldr	r3, [pc, #564]	; (80035d8 <SimulatePulling+0x7c8>)
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f8cf 	bl	8000548 <__aeabi_f2d>
 80033aa:	4604      	mov	r4, r0
 80033ac:	460d      	mov	r5, r1
 80033ae:	4b8b      	ldr	r3, [pc, #556]	; (80035dc <SimulatePulling+0x7cc>)
 80033b0:	781b      	ldrb	r3, [r3, #0]
 80033b2:	4618      	mov	r0, r3
 80033b4:	f7fd f8b6 	bl	8000524 <__aeabi_i2d>
 80033b8:	a379      	add	r3, pc, #484	; (adr r3, 80035a0 <SimulatePulling+0x790>)
 80033ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033be:	f7fd f91b 	bl	80005f8 <__aeabi_dmul>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4690      	mov	r8, r2
 80033c8:	4699      	mov	r9, r3
 80033ca:	4b82      	ldr	r3, [pc, #520]	; (80035d4 <SimulatePulling+0x7c4>)
 80033cc:	edd3 7a00 	vldr	s15, [r3]
 80033d0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80035cc <SimulatePulling+0x7bc>
 80033d4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033d8:	ee17 0a90 	vmov	r0, s15
 80033dc:	f7fd f8b4 	bl	8000548 <__aeabi_f2d>
 80033e0:	4602      	mov	r2, r0
 80033e2:	460b      	mov	r3, r1
 80033e4:	4640      	mov	r0, r8
 80033e6:	4649      	mov	r1, r9
 80033e8:	f7fd f906 	bl	80005f8 <__aeabi_dmul>
 80033ec:	4602      	mov	r2, r0
 80033ee:	460b      	mov	r3, r1
 80033f0:	4610      	mov	r0, r2
 80033f2:	4619      	mov	r1, r3
 80033f4:	f04f 0200 	mov.w	r2, #0
 80033f8:	4b79      	ldr	r3, [pc, #484]	; (80035e0 <SimulatePulling+0x7d0>)
 80033fa:	f7fd f8fd 	bl	80005f8 <__aeabi_dmul>
 80033fe:	4602      	mov	r2, r0
 8003400:	460b      	mov	r3, r1
 8003402:	4690      	mov	r8, r2
 8003404:	4699      	mov	r9, r3
 8003406:	4b6e      	ldr	r3, [pc, #440]	; (80035c0 <SimulatePulling+0x7b0>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f89c 	bl	8000548 <__aeabi_f2d>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	4640      	mov	r0, r8
 8003416:	4649      	mov	r1, r9
 8003418:	f7fd fa18 	bl	800084c <__aeabi_ddiv>
 800341c:	4602      	mov	r2, r0
 800341e:	460b      	mov	r3, r1
 8003420:	4620      	mov	r0, r4
 8003422:	4629      	mov	r1, r5
 8003424:	f7fc ff32 	bl	800028c <__adddf3>
 8003428:	4602      	mov	r2, r0
 800342a:	460b      	mov	r3, r1
 800342c:	4610      	mov	r0, r2
 800342e:	4619      	mov	r1, r3
 8003430:	f7fd fbda 	bl	8000be8 <__aeabi_d2f>
 8003434:	4603      	mov	r3, r0
 8003436:	4a68      	ldr	r2, [pc, #416]	; (80035d8 <SimulatePulling+0x7c8>)
 8003438:	6013      	str	r3, [r2, #0]
			if (SpeedCmd >= 0)
 800343a:	4b67      	ldr	r3, [pc, #412]	; (80035d8 <SimulatePulling+0x7c8>)
 800343c:	edd3 7a00 	vldr	s15, [r3]
 8003440:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003444:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003448:	db03      	blt.n	8003452 <SimulatePulling+0x642>
				SpeedCmd = 0;
 800344a:	4b63      	ldr	r3, [pc, #396]	; (80035d8 <SimulatePulling+0x7c8>)
 800344c:	f04f 0200 	mov.w	r2, #0
 8003450:	601a      	str	r2, [r3, #0]

//			InnerObjRefSpeed += SampleTime*0.001*(PullingAcc5)*10/DrumRadius;
//			if (InnerObjRefSpeed >= 0)
//				InnerObjRefSpeed = 0;

			if (SpeedCmd != 0)
 8003452:	4b61      	ldr	r3, [pc, #388]	; (80035d8 <SimulatePulling+0x7c8>)
 8003454:	edd3 7a00 	vldr	s15, [r3]
 8003458:	eef5 7a40 	vcmp.f32	s15, #0.0
 800345c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003460:	d010      	beq.n	8003484 <SimulatePulling+0x674>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003462:	4b60      	ldr	r3, [pc, #384]	; (80035e4 <SimulatePulling+0x7d4>)
 8003464:	781b      	ldrb	r3, [r3, #0]
 8003466:	4a5c      	ldr	r2, [pc, #368]	; (80035d8 <SimulatePulling+0x7c8>)
 8003468:	edd2 7a00 	vldr	s15, [r2]
 800346c:	eeb0 0a67 	vmov.f32	s0, s15
 8003470:	4618      	mov	r0, r3
 8003472:	f7fe fb21 	bl	8001ab8 <CalculateTimer3Period>
 8003476:	4603      	mov	r3, r0
 8003478:	b29a      	uxth	r2, r3
 800347a:	4b5b      	ldr	r3, [pc, #364]	; (80035e8 <SimulatePulling+0x7d8>)
 800347c:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 800347e:	4b4c      	ldr	r3, [pc, #304]	; (80035b0 <SimulatePulling+0x7a0>)
 8003480:	2201      	movs	r2, #1
 8003482:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003484:	2300      	movs	r3, #0
 8003486:	e159      	b.n	800373c <SimulatePulling+0x92c>
		}

		if(PullStep5) // catch inner object speed
 8003488:	4b4a      	ldr	r3, [pc, #296]	; (80035b4 <SimulatePulling+0x7a4>)
 800348a:	781b      	ldrb	r3, [r3, #0]
 800348c:	2b00      	cmp	r3, #0
 800348e:	f000 80b1 	beq.w	80035f4 <SimulatePulling+0x7e4>
			//				PulseGenerationFlag = false; // Disable Pulse out
			//				PullStep4 = false;
			//				PullStep5 = true;
			//			}
						//AccRef = GravityConst - PullingAcc4;
			if (IsReachTargetPosition) // Switch to Step 5
 8003492:	4b46      	ldr	r3, [pc, #280]	; (80035ac <SimulatePulling+0x79c>)
 8003494:	781b      	ldrb	r3, [r3, #0]
 8003496:	b2db      	uxtb	r3, r3
 8003498:	2b00      	cmp	r3, #0
 800349a:	d00e      	beq.n	80034ba <SimulatePulling+0x6aa>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 800349c:	4b44      	ldr	r3, [pc, #272]	; (80035b0 <SimulatePulling+0x7a0>)
 800349e:	2200      	movs	r2, #0
 80034a0:	701a      	strb	r2, [r3, #0]
				PullStep5 = false;
 80034a2:	4b44      	ldr	r3, [pc, #272]	; (80035b4 <SimulatePulling+0x7a4>)
 80034a4:	2200      	movs	r2, #0
 80034a6:	701a      	strb	r2, [r3, #0]
				PullStep6 = true;
 80034a8:	4b50      	ldr	r3, [pc, #320]	; (80035ec <SimulatePulling+0x7dc>)
 80034aa:	2201      	movs	r2, #1
 80034ac:	701a      	strb	r2, [r3, #0]

				IsPulseCheck = false; // OFF pulse checking
 80034ae:	4b46      	ldr	r3, [pc, #280]	; (80035c8 <SimulatePulling+0x7b8>)
 80034b0:	2200      	movs	r2, #0
 80034b2:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 80034b4:	4b3d      	ldr	r3, [pc, #244]	; (80035ac <SimulatePulling+0x79c>)
 80034b6:	2200      	movs	r2, #0
 80034b8:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst + PullingAcc4;
 80034ba:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80035cc <SimulatePulling+0x7bc>
 80034be:	4b4c      	ldr	r3, [pc, #304]	; (80035f0 <SimulatePulling+0x7e0>)
 80034c0:	edd3 7a00 	vldr	s15, [r3]
 80034c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034c8:	4b42      	ldr	r3, [pc, #264]	; (80035d4 <SimulatePulling+0x7c4>)
 80034ca:	edc3 7a00 	vstr	s15, [r3]


						SpeedCmd += SampleTime*0.001*(PullingAcc4)*10/DrumRadius; //
 80034ce:	4b42      	ldr	r3, [pc, #264]	; (80035d8 <SimulatePulling+0x7c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	4618      	mov	r0, r3
 80034d4:	f7fd f838 	bl	8000548 <__aeabi_f2d>
 80034d8:	4604      	mov	r4, r0
 80034da:	460d      	mov	r5, r1
 80034dc:	4b3f      	ldr	r3, [pc, #252]	; (80035dc <SimulatePulling+0x7cc>)
 80034de:	781b      	ldrb	r3, [r3, #0]
 80034e0:	4618      	mov	r0, r3
 80034e2:	f7fd f81f 	bl	8000524 <__aeabi_i2d>
 80034e6:	a32e      	add	r3, pc, #184	; (adr r3, 80035a0 <SimulatePulling+0x790>)
 80034e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ec:	f7fd f884 	bl	80005f8 <__aeabi_dmul>
 80034f0:	4602      	mov	r2, r0
 80034f2:	460b      	mov	r3, r1
 80034f4:	4690      	mov	r8, r2
 80034f6:	4699      	mov	r9, r3
 80034f8:	4b3d      	ldr	r3, [pc, #244]	; (80035f0 <SimulatePulling+0x7e0>)
 80034fa:	681b      	ldr	r3, [r3, #0]
 80034fc:	4618      	mov	r0, r3
 80034fe:	f7fd f823 	bl	8000548 <__aeabi_f2d>
 8003502:	4602      	mov	r2, r0
 8003504:	460b      	mov	r3, r1
 8003506:	4640      	mov	r0, r8
 8003508:	4649      	mov	r1, r9
 800350a:	f7fd f875 	bl	80005f8 <__aeabi_dmul>
 800350e:	4602      	mov	r2, r0
 8003510:	460b      	mov	r3, r1
 8003512:	4610      	mov	r0, r2
 8003514:	4619      	mov	r1, r3
 8003516:	f04f 0200 	mov.w	r2, #0
 800351a:	4b31      	ldr	r3, [pc, #196]	; (80035e0 <SimulatePulling+0x7d0>)
 800351c:	f7fd f86c 	bl	80005f8 <__aeabi_dmul>
 8003520:	4602      	mov	r2, r0
 8003522:	460b      	mov	r3, r1
 8003524:	4690      	mov	r8, r2
 8003526:	4699      	mov	r9, r3
 8003528:	4b25      	ldr	r3, [pc, #148]	; (80035c0 <SimulatePulling+0x7b0>)
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	4618      	mov	r0, r3
 800352e:	f7fd f80b 	bl	8000548 <__aeabi_f2d>
 8003532:	4602      	mov	r2, r0
 8003534:	460b      	mov	r3, r1
 8003536:	4640      	mov	r0, r8
 8003538:	4649      	mov	r1, r9
 800353a:	f7fd f987 	bl	800084c <__aeabi_ddiv>
 800353e:	4602      	mov	r2, r0
 8003540:	460b      	mov	r3, r1
 8003542:	4620      	mov	r0, r4
 8003544:	4629      	mov	r1, r5
 8003546:	f7fc fea1 	bl	800028c <__adddf3>
 800354a:	4602      	mov	r2, r0
 800354c:	460b      	mov	r3, r1
 800354e:	4610      	mov	r0, r2
 8003550:	4619      	mov	r1, r3
 8003552:	f7fd fb49 	bl	8000be8 <__aeabi_d2f>
 8003556:	4603      	mov	r3, r0
 8003558:	4a1f      	ldr	r2, [pc, #124]	; (80035d8 <SimulatePulling+0x7c8>)
 800355a:	6013      	str	r3, [r2, #0]
			//			if (InnerObjRefSpeed >= 0)
			//				InnerObjRefSpeed = 0;
			//			if (SpeedCmd <=  InnerObjRefSpeed)
			//				SpeedCmd = InnerObjRefSpeed;

						if (SpeedCmd != 0)
 800355c:	4b1e      	ldr	r3, [pc, #120]	; (80035d8 <SimulatePulling+0x7c8>)
 800355e:	edd3 7a00 	vldr	s15, [r3]
 8003562:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003566:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800356a:	d010      	beq.n	800358e <SimulatePulling+0x77e>
						{
							// Calculate Timer3CountPeriod to generate pulse
							Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800356c:	4b1d      	ldr	r3, [pc, #116]	; (80035e4 <SimulatePulling+0x7d4>)
 800356e:	781b      	ldrb	r3, [r3, #0]
 8003570:	4a19      	ldr	r2, [pc, #100]	; (80035d8 <SimulatePulling+0x7c8>)
 8003572:	edd2 7a00 	vldr	s15, [r2]
 8003576:	eeb0 0a67 	vmov.f32	s0, s15
 800357a:	4618      	mov	r0, r3
 800357c:	f7fe fa9c 	bl	8001ab8 <CalculateTimer3Period>
 8003580:	4603      	mov	r3, r0
 8003582:	b29a      	uxth	r2, r3
 8003584:	4b18      	ldr	r3, [pc, #96]	; (80035e8 <SimulatePulling+0x7d8>)
 8003586:	801a      	strh	r2, [r3, #0]
							PulseGenerationFlag = true;
 8003588:	4b09      	ldr	r3, [pc, #36]	; (80035b0 <SimulatePulling+0x7a0>)
 800358a:	2201      	movs	r2, #1
 800358c:	701a      	strb	r2, [r3, #0]
						}
						return false;
 800358e:	2300      	movs	r3, #0
 8003590:	e0d4      	b.n	800373c <SimulatePulling+0x92c>
 8003592:	bf00      	nop
 8003594:	f3af 8000 	nop.w
 8003598:	51eb851f 	.word	0x51eb851f
 800359c:	40191eb8 	.word	0x40191eb8
 80035a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80035a4:	3f50624d 	.word	0x3f50624d
 80035a8:	20000445 	.word	0x20000445
 80035ac:	20000438 	.word	0x20000438
 80035b0:	20000436 	.word	0x20000436
 80035b4:	20000446 	.word	0x20000446
 80035b8:	2000000a 	.word	0x2000000a
 80035bc:	200004a0 	.word	0x200004a0
 80035c0:	20000464 	.word	0x20000464
 80035c4:	200004b0 	.word	0x200004b0
 80035c8:	2000044c 	.word	0x2000044c
 80035cc:	c11ccccd 	.word	0xc11ccccd
 80035d0:	20000488 	.word	0x20000488
 80035d4:	20000010 	.word	0x20000010
 80035d8:	20000518 	.word	0x20000518
 80035dc:	20000468 	.word	0x20000468
 80035e0:	40240000 	.word	0x40240000
 80035e4:	20000003 	.word	0x20000003
 80035e8:	20000454 	.word	0x20000454
 80035ec:	20000447 	.word	0x20000447
 80035f0:	2000048c 	.word	0x2000048c
		}

		if (PullStep6) //Final deceleration
 80035f4:	4b56      	ldr	r3, [pc, #344]	; (8003750 <SimulatePulling+0x940>)
 80035f6:	781b      	ldrb	r3, [r3, #0]
 80035f8:	2b00      	cmp	r3, #0
 80035fa:	f000 809e 	beq.w	800373a <SimulatePulling+0x92a>
		{
			if(SpeedCmd >= 0) // Finish deceleration
 80035fe:	4b55      	ldr	r3, [pc, #340]	; (8003754 <SimulatePulling+0x944>)
 8003600:	edd3 7a00 	vldr	s15, [r3]
 8003604:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800360c:	db29      	blt.n	8003662 <SimulatePulling+0x852>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 800360e:	4b52      	ldr	r3, [pc, #328]	; (8003758 <SimulatePulling+0x948>)
 8003610:	2200      	movs	r2, #0
 8003612:	701a      	strb	r2, [r3, #0]
				PullStep6 = false;
 8003614:	4b4e      	ldr	r3, [pc, #312]	; (8003750 <SimulatePulling+0x940>)
 8003616:	2200      	movs	r2, #0
 8003618:	701a      	strb	r2, [r3, #0]
				SpeedCmd = 0;
 800361a:	4b4e      	ldr	r3, [pc, #312]	; (8003754 <SimulatePulling+0x944>)
 800361c:	f04f 0200 	mov.w	r2, #0
 8003620:	601a      	str	r2, [r3, #0]

				TotalPullingPulse = abs(PulseSimuCount);
 8003622:	4b4e      	ldr	r3, [pc, #312]	; (800375c <SimulatePulling+0x94c>)
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	2b00      	cmp	r3, #0
 8003628:	bfb8      	it	lt
 800362a:	425b      	neglt	r3, r3
 800362c:	461a      	mov	r2, r3
 800362e:	4b4c      	ldr	r3, [pc, #304]	; (8003760 <SimulatePulling+0x950>)
 8003630:	601a      	str	r2, [r3, #0]
				PulseSimuCount = 0;
 8003632:	4b4a      	ldr	r3, [pc, #296]	; (800375c <SimulatePulling+0x94c>)
 8003634:	2200      	movs	r2, #0
 8003636:	601a      	str	r2, [r3, #0]
				TargetPosition = 0;
 8003638:	4b4a      	ldr	r3, [pc, #296]	; (8003764 <SimulatePulling+0x954>)
 800363a:	2200      	movs	r2, #0
 800363c:	601a      	str	r2, [r3, #0]
				IsReachTargetPosition = false;
 800363e:	4b4a      	ldr	r3, [pc, #296]	; (8003768 <SimulatePulling+0x958>)
 8003640:	2200      	movs	r2, #0
 8003642:	701a      	strb	r2, [r3, #0]

				CompletePulling = true;
 8003644:	4b49      	ldr	r3, [pc, #292]	; (800376c <SimulatePulling+0x95c>)
 8003646:	2201      	movs	r2, #1
 8003648:	701a      	strb	r2, [r3, #0]

				if(ExperimentMode == 3) // Simulate pulling and dropping
 800364a:	4b49      	ldr	r3, [pc, #292]	; (8003770 <SimulatePulling+0x960>)
 800364c:	781b      	ldrb	r3, [r3, #0]
 800364e:	2b03      	cmp	r3, #3
 8003650:	d102      	bne.n	8003658 <SimulatePulling+0x848>
				{
					InitializeSimulating(1); // Init Simulate Dropping
 8003652:	2001      	movs	r0, #1
 8003654:	f7fe fd1c 	bl	8002090 <InitializeSimulating>
				}
				AccRef = GravityConst;
 8003658:	4a46      	ldr	r2, [pc, #280]	; (8003774 <SimulatePulling+0x964>)
 800365a:	4b47      	ldr	r3, [pc, #284]	; (8003778 <SimulatePulling+0x968>)
 800365c:	601a      	str	r2, [r3, #0]
				return true;
 800365e:	2301      	movs	r3, #1
 8003660:	e06c      	b.n	800373c <SimulatePulling+0x92c>
			}
			AccRef = GravityConst + PullingAcc5;
 8003662:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800377c <SimulatePulling+0x96c>
 8003666:	4b46      	ldr	r3, [pc, #280]	; (8003780 <SimulatePulling+0x970>)
 8003668:	edd3 7a00 	vldr	s15, [r3]
 800366c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003670:	4b41      	ldr	r3, [pc, #260]	; (8003778 <SimulatePulling+0x968>)
 8003672:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(PullingAcc5)*10/DrumRadius; //
 8003676:	4b37      	ldr	r3, [pc, #220]	; (8003754 <SimulatePulling+0x944>)
 8003678:	681b      	ldr	r3, [r3, #0]
 800367a:	4618      	mov	r0, r3
 800367c:	f7fc ff64 	bl	8000548 <__aeabi_f2d>
 8003680:	4604      	mov	r4, r0
 8003682:	460d      	mov	r5, r1
 8003684:	4b3f      	ldr	r3, [pc, #252]	; (8003784 <SimulatePulling+0x974>)
 8003686:	781b      	ldrb	r3, [r3, #0]
 8003688:	4618      	mov	r0, r3
 800368a:	f7fc ff4b 	bl	8000524 <__aeabi_i2d>
 800368e:	a32e      	add	r3, pc, #184	; (adr r3, 8003748 <SimulatePulling+0x938>)
 8003690:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003694:	f7fc ffb0 	bl	80005f8 <__aeabi_dmul>
 8003698:	4602      	mov	r2, r0
 800369a:	460b      	mov	r3, r1
 800369c:	4690      	mov	r8, r2
 800369e:	4699      	mov	r9, r3
 80036a0:	4b37      	ldr	r3, [pc, #220]	; (8003780 <SimulatePulling+0x970>)
 80036a2:	681b      	ldr	r3, [r3, #0]
 80036a4:	4618      	mov	r0, r3
 80036a6:	f7fc ff4f 	bl	8000548 <__aeabi_f2d>
 80036aa:	4602      	mov	r2, r0
 80036ac:	460b      	mov	r3, r1
 80036ae:	4640      	mov	r0, r8
 80036b0:	4649      	mov	r1, r9
 80036b2:	f7fc ffa1 	bl	80005f8 <__aeabi_dmul>
 80036b6:	4602      	mov	r2, r0
 80036b8:	460b      	mov	r3, r1
 80036ba:	4610      	mov	r0, r2
 80036bc:	4619      	mov	r1, r3
 80036be:	f04f 0200 	mov.w	r2, #0
 80036c2:	4b31      	ldr	r3, [pc, #196]	; (8003788 <SimulatePulling+0x978>)
 80036c4:	f7fc ff98 	bl	80005f8 <__aeabi_dmul>
 80036c8:	4602      	mov	r2, r0
 80036ca:	460b      	mov	r3, r1
 80036cc:	4690      	mov	r8, r2
 80036ce:	4699      	mov	r9, r3
 80036d0:	4b2e      	ldr	r3, [pc, #184]	; (800378c <SimulatePulling+0x97c>)
 80036d2:	681b      	ldr	r3, [r3, #0]
 80036d4:	4618      	mov	r0, r3
 80036d6:	f7fc ff37 	bl	8000548 <__aeabi_f2d>
 80036da:	4602      	mov	r2, r0
 80036dc:	460b      	mov	r3, r1
 80036de:	4640      	mov	r0, r8
 80036e0:	4649      	mov	r1, r9
 80036e2:	f7fd f8b3 	bl	800084c <__aeabi_ddiv>
 80036e6:	4602      	mov	r2, r0
 80036e8:	460b      	mov	r3, r1
 80036ea:	4620      	mov	r0, r4
 80036ec:	4629      	mov	r1, r5
 80036ee:	f7fc fdcd 	bl	800028c <__adddf3>
 80036f2:	4602      	mov	r2, r0
 80036f4:	460b      	mov	r3, r1
 80036f6:	4610      	mov	r0, r2
 80036f8:	4619      	mov	r1, r3
 80036fa:	f7fd fa75 	bl	8000be8 <__aeabi_d2f>
 80036fe:	4603      	mov	r3, r0
 8003700:	4a14      	ldr	r2, [pc, #80]	; (8003754 <SimulatePulling+0x944>)
 8003702:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8003704:	4b13      	ldr	r3, [pc, #76]	; (8003754 <SimulatePulling+0x944>)
 8003706:	edd3 7a00 	vldr	s15, [r3]
 800370a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800370e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003712:	d010      	beq.n	8003736 <SimulatePulling+0x926>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003714:	4b1e      	ldr	r3, [pc, #120]	; (8003790 <SimulatePulling+0x980>)
 8003716:	781b      	ldrb	r3, [r3, #0]
 8003718:	4a0e      	ldr	r2, [pc, #56]	; (8003754 <SimulatePulling+0x944>)
 800371a:	edd2 7a00 	vldr	s15, [r2]
 800371e:	eeb0 0a67 	vmov.f32	s0, s15
 8003722:	4618      	mov	r0, r3
 8003724:	f7fe f9c8 	bl	8001ab8 <CalculateTimer3Period>
 8003728:	4603      	mov	r3, r0
 800372a:	b29a      	uxth	r2, r3
 800372c:	4b19      	ldr	r3, [pc, #100]	; (8003794 <SimulatePulling+0x984>)
 800372e:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003730:	4b09      	ldr	r3, [pc, #36]	; (8003758 <SimulatePulling+0x948>)
 8003732:	2201      	movs	r2, #1
 8003734:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003736:	2300      	movs	r3, #0
 8003738:	e000      	b.n	800373c <SimulatePulling+0x92c>
		}
	}
	return false;
 800373a:	2300      	movs	r3, #0
}
 800373c:	4618      	mov	r0, r3
 800373e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003742:	bf00      	nop
 8003744:	f3af 8000 	nop.w
 8003748:	d2f1a9fc 	.word	0xd2f1a9fc
 800374c:	3f50624d 	.word	0x3f50624d
 8003750:	20000447 	.word	0x20000447
 8003754:	20000518 	.word	0x20000518
 8003758:	20000436 	.word	0x20000436
 800375c:	200004b4 	.word	0x200004b4
 8003760:	2000045c 	.word	0x2000045c
 8003764:	200004b0 	.word	0x200004b0
 8003768:	20000438 	.word	0x20000438
 800376c:	2000043b 	.word	0x2000043b
 8003770:	20000005 	.word	0x20000005
 8003774:	c11ccccd 	.word	0xc11ccccd
 8003778:	20000010 	.word	0x20000010
 800377c:	c11ccccd 	.word	0xc11ccccd
 8003780:	20000490 	.word	0x20000490
 8003784:	20000468 	.word	0x20000468
 8003788:	40240000 	.word	0x40240000
 800378c:	20000464 	.word	0x20000464
 8003790:	20000003 	.word	0x20000003
 8003794:	20000454 	.word	0x20000454

08003798 <SimulateDropping>:
bool SimulateDropping() // Dropping Program
// return true if finishing, else return false while running
{
 8003798:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800379c:	af00      	add	r7, sp, #0
	if (CompleteDropping)
 800379e:	4bba      	ldr	r3, [pc, #744]	; (8003a88 <SimulateDropping+0x2f0>)
 80037a0:	781b      	ldrb	r3, [r3, #0]
 80037a2:	2b00      	cmp	r3, #0
 80037a4:	d001      	beq.n	80037aa <SimulateDropping+0x12>
	{
		return true;
 80037a6:	2301      	movs	r3, #1
 80037a8:	e2d8      	b.n	8003d5c <SimulateDropping+0x5c4>
	}
	else
	{
		if(DropStep1) // 2nd spd curve Accelerating
 80037aa:	4bb8      	ldr	r3, [pc, #736]	; (8003a8c <SimulateDropping+0x2f4>)
 80037ac:	781b      	ldrb	r3, [r3, #0]
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	f000 80d2 	beq.w	8003958 <SimulateDropping+0x1c0>
		{
			if (AccRef >= GravityConst+DroppingAccel) // Switch to step 2
 80037b4:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8003a90 <SimulateDropping+0x2f8>
 80037b8:	4bb6      	ldr	r3, [pc, #728]	; (8003a94 <SimulateDropping+0x2fc>)
 80037ba:	edd3 7a00 	vldr	s15, [r3]
 80037be:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037c2:	4bb5      	ldr	r3, [pc, #724]	; (8003a98 <SimulateDropping+0x300>)
 80037c4:	edd3 7a00 	vldr	s15, [r3]
 80037c8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037cc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037d0:	d842      	bhi.n	8003858 <SimulateDropping+0xc0>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 80037d2:	4bb2      	ldr	r3, [pc, #712]	; (8003a9c <SimulateDropping+0x304>)
 80037d4:	2200      	movs	r2, #0
 80037d6:	701a      	strb	r2, [r3, #0]
				TargetPosition = (int)(PulseSimuCount + DroppingAccelDistance*EncoderResolution/(2*3.14*DrumRadius));
 80037d8:	4bb1      	ldr	r3, [pc, #708]	; (8003aa0 <SimulateDropping+0x308>)
 80037da:	681b      	ldr	r3, [r3, #0]
 80037dc:	4618      	mov	r0, r3
 80037de:	f7fc fea1 	bl	8000524 <__aeabi_i2d>
 80037e2:	4604      	mov	r4, r0
 80037e4:	460d      	mov	r5, r1
 80037e6:	4baf      	ldr	r3, [pc, #700]	; (8003aa4 <SimulateDropping+0x30c>)
 80037e8:	881b      	ldrh	r3, [r3, #0]
 80037ea:	ee07 3a90 	vmov	s15, r3
 80037ee:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037f2:	4bad      	ldr	r3, [pc, #692]	; (8003aa8 <SimulateDropping+0x310>)
 80037f4:	edd3 7a00 	vldr	s15, [r3]
 80037f8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037fc:	ee17 0a90 	vmov	r0, s15
 8003800:	f7fc fea2 	bl	8000548 <__aeabi_f2d>
 8003804:	4680      	mov	r8, r0
 8003806:	4689      	mov	r9, r1
 8003808:	4ba8      	ldr	r3, [pc, #672]	; (8003aac <SimulateDropping+0x314>)
 800380a:	681b      	ldr	r3, [r3, #0]
 800380c:	4618      	mov	r0, r3
 800380e:	f7fc fe9b 	bl	8000548 <__aeabi_f2d>
 8003812:	a399      	add	r3, pc, #612	; (adr r3, 8003a78 <SimulateDropping+0x2e0>)
 8003814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003818:	f7fc feee 	bl	80005f8 <__aeabi_dmul>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	4640      	mov	r0, r8
 8003822:	4649      	mov	r1, r9
 8003824:	f7fd f812 	bl	800084c <__aeabi_ddiv>
 8003828:	4602      	mov	r2, r0
 800382a:	460b      	mov	r3, r1
 800382c:	4620      	mov	r0, r4
 800382e:	4629      	mov	r1, r5
 8003830:	f7fc fd2c 	bl	800028c <__adddf3>
 8003834:	4602      	mov	r2, r0
 8003836:	460b      	mov	r3, r1
 8003838:	4610      	mov	r0, r2
 800383a:	4619      	mov	r1, r3
 800383c:	f7fd f98c 	bl	8000b58 <__aeabi_d2iz>
 8003840:	4603      	mov	r3, r0
 8003842:	4a9b      	ldr	r2, [pc, #620]	; (8003ab0 <SimulateDropping+0x318>)
 8003844:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; //ON pulse checking
 8003846:	4b9b      	ldr	r3, [pc, #620]	; (8003ab4 <SimulateDropping+0x31c>)
 8003848:	2201      	movs	r2, #1
 800384a:	701a      	strb	r2, [r3, #0]

				DropStep1 = false;
 800384c:	4b8f      	ldr	r3, [pc, #572]	; (8003a8c <SimulateDropping+0x2f4>)
 800384e:	2200      	movs	r2, #0
 8003850:	701a      	strb	r2, [r3, #0]
				DropStep2 = true; // Switch to Step 2
 8003852:	4b99      	ldr	r3, [pc, #612]	; (8003ab8 <SimulateDropping+0x320>)
 8003854:	2201      	movs	r2, #1
 8003856:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,DropAccelSlope,GravityConst+DroppingAccel);
 8003858:	4b98      	ldr	r3, [pc, #608]	; (8003abc <SimulateDropping+0x324>)
 800385a:	781b      	ldrb	r3, [r3, #0]
 800385c:	ee07 3a90 	vmov	s15, r3
 8003860:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003864:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8003a90 <SimulateDropping+0x2f8>
 8003868:	4b8a      	ldr	r3, [pc, #552]	; (8003a94 <SimulateDropping+0x2fc>)
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003872:	eef0 0a67 	vmov.f32	s1, s15
 8003876:	eeb0 0a47 	vmov.f32	s0, s14
 800387a:	4887      	ldr	r0, [pc, #540]	; (8003a98 <SimulateDropping+0x300>)
 800387c:	f7fe f858 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003880:	4b8f      	ldr	r3, [pc, #572]	; (8003ac0 <SimulateDropping+0x328>)
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	4618      	mov	r0, r3
 8003886:	f7fc fe5f 	bl	8000548 <__aeabi_f2d>
 800388a:	4604      	mov	r4, r0
 800388c:	460d      	mov	r5, r1
 800388e:	4b8d      	ldr	r3, [pc, #564]	; (8003ac4 <SimulateDropping+0x32c>)
 8003890:	781b      	ldrb	r3, [r3, #0]
 8003892:	4618      	mov	r0, r3
 8003894:	f7fc fe46 	bl	8000524 <__aeabi_i2d>
 8003898:	a379      	add	r3, pc, #484	; (adr r3, 8003a80 <SimulateDropping+0x2e8>)
 800389a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800389e:	f7fc feab 	bl	80005f8 <__aeabi_dmul>
 80038a2:	4602      	mov	r2, r0
 80038a4:	460b      	mov	r3, r1
 80038a6:	4690      	mov	r8, r2
 80038a8:	4699      	mov	r9, r3
 80038aa:	4b7b      	ldr	r3, [pc, #492]	; (8003a98 <SimulateDropping+0x300>)
 80038ac:	edd3 7a00 	vldr	s15, [r3]
 80038b0:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003a90 <SimulateDropping+0x2f8>
 80038b4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038b8:	ee17 0a90 	vmov	r0, s15
 80038bc:	f7fc fe44 	bl	8000548 <__aeabi_f2d>
 80038c0:	4602      	mov	r2, r0
 80038c2:	460b      	mov	r3, r1
 80038c4:	4640      	mov	r0, r8
 80038c6:	4649      	mov	r1, r9
 80038c8:	f7fc fe96 	bl	80005f8 <__aeabi_dmul>
 80038cc:	4602      	mov	r2, r0
 80038ce:	460b      	mov	r3, r1
 80038d0:	4610      	mov	r0, r2
 80038d2:	4619      	mov	r1, r3
 80038d4:	f04f 0200 	mov.w	r2, #0
 80038d8:	4b7b      	ldr	r3, [pc, #492]	; (8003ac8 <SimulateDropping+0x330>)
 80038da:	f7fc fe8d 	bl	80005f8 <__aeabi_dmul>
 80038de:	4602      	mov	r2, r0
 80038e0:	460b      	mov	r3, r1
 80038e2:	4690      	mov	r8, r2
 80038e4:	4699      	mov	r9, r3
 80038e6:	4b71      	ldr	r3, [pc, #452]	; (8003aac <SimulateDropping+0x314>)
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	4618      	mov	r0, r3
 80038ec:	f7fc fe2c 	bl	8000548 <__aeabi_f2d>
 80038f0:	4602      	mov	r2, r0
 80038f2:	460b      	mov	r3, r1
 80038f4:	4640      	mov	r0, r8
 80038f6:	4649      	mov	r1, r9
 80038f8:	f7fc ffa8 	bl	800084c <__aeabi_ddiv>
 80038fc:	4602      	mov	r2, r0
 80038fe:	460b      	mov	r3, r1
 8003900:	4620      	mov	r0, r4
 8003902:	4629      	mov	r1, r5
 8003904:	f7fc fcc2 	bl	800028c <__adddf3>
 8003908:	4602      	mov	r2, r0
 800390a:	460b      	mov	r3, r1
 800390c:	4610      	mov	r0, r2
 800390e:	4619      	mov	r1, r3
 8003910:	f7fd f96a 	bl	8000be8 <__aeabi_d2f>
 8003914:	4603      	mov	r3, r0
 8003916:	4a6a      	ldr	r2, [pc, #424]	; (8003ac0 <SimulateDropping+0x328>)
 8003918:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 800391a:	4b69      	ldr	r3, [pc, #420]	; (8003ac0 <SimulateDropping+0x328>)
 800391c:	edd3 7a00 	vldr	s15, [r3]
 8003920:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003924:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003928:	d011      	beq.n	800394e <SimulateDropping+0x1b6>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800392a:	4b68      	ldr	r3, [pc, #416]	; (8003acc <SimulateDropping+0x334>)
 800392c:	781b      	ldrb	r3, [r3, #0]
 800392e:	4a64      	ldr	r2, [pc, #400]	; (8003ac0 <SimulateDropping+0x328>)
 8003930:	edd2 7a00 	vldr	s15, [r2]
 8003934:	eeb0 0a67 	vmov.f32	s0, s15
 8003938:	4618      	mov	r0, r3
 800393a:	f7fe f8bd 	bl	8001ab8 <CalculateTimer3Period>
 800393e:	4603      	mov	r3, r0
 8003940:	b29a      	uxth	r2, r3
 8003942:	4b63      	ldr	r3, [pc, #396]	; (8003ad0 <SimulateDropping+0x338>)
 8003944:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003946:	4b55      	ldr	r3, [pc, #340]	; (8003a9c <SimulateDropping+0x304>)
 8003948:	2201      	movs	r2, #1
 800394a:	701a      	strb	r2, [r3, #0]
 800394c:	e002      	b.n	8003954 <SimulateDropping+0x1bc>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 800394e:	4b53      	ldr	r3, [pc, #332]	; (8003a9c <SimulateDropping+0x304>)
 8003950:	2200      	movs	r2, #0
 8003952:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003954:	2300      	movs	r3, #0
 8003956:	e201      	b.n	8003d5c <SimulateDropping+0x5c4>
		}
		if (DropStep2)
 8003958:	4b57      	ldr	r3, [pc, #348]	; (8003ab8 <SimulateDropping+0x320>)
 800395a:	781b      	ldrb	r3, [r3, #0]
 800395c:	2b00      	cmp	r3, #0
 800395e:	f000 80bd 	beq.w	8003adc <SimulateDropping+0x344>
		{
			if (IsReachTargetPosition) // Switch to Step 2
 8003962:	4b5c      	ldr	r3, [pc, #368]	; (8003ad4 <SimulateDropping+0x33c>)
 8003964:	781b      	ldrb	r3, [r3, #0]
 8003966:	b2db      	uxtb	r3, r3
 8003968:	2b00      	cmp	r3, #0
 800396a:	d00e      	beq.n	800398a <SimulateDropping+0x1f2>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 800396c:	4b4b      	ldr	r3, [pc, #300]	; (8003a9c <SimulateDropping+0x304>)
 800396e:	2200      	movs	r2, #0
 8003970:	701a      	strb	r2, [r3, #0]

				DropStep2 = false;
 8003972:	4b51      	ldr	r3, [pc, #324]	; (8003ab8 <SimulateDropping+0x320>)
 8003974:	2200      	movs	r2, #0
 8003976:	701a      	strb	r2, [r3, #0]
				DropStep3 = true; // Switch to Step 3
 8003978:	4b57      	ldr	r3, [pc, #348]	; (8003ad8 <SimulateDropping+0x340>)
 800397a:	2201      	movs	r2, #1
 800397c:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false; // Off Pulse checking
 800397e:	4b4d      	ldr	r3, [pc, #308]	; (8003ab4 <SimulateDropping+0x31c>)
 8003980:	2200      	movs	r2, #0
 8003982:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8003984:	4b53      	ldr	r3, [pc, #332]	; (8003ad4 <SimulateDropping+0x33c>)
 8003986:	2200      	movs	r2, #0
 8003988:	701a      	strb	r2, [r3, #0]
			}

			AccRef = GravityConst+DroppingAccel;
 800398a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003a90 <SimulateDropping+0x2f8>
 800398e:	4b41      	ldr	r3, [pc, #260]	; (8003a94 <SimulateDropping+0x2fc>)
 8003990:	edd3 7a00 	vldr	s15, [r3]
 8003994:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003998:	4b3f      	ldr	r3, [pc, #252]	; (8003a98 <SimulateDropping+0x300>)
 800399a:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 800399e:	4b48      	ldr	r3, [pc, #288]	; (8003ac0 <SimulateDropping+0x328>)
 80039a0:	681b      	ldr	r3, [r3, #0]
 80039a2:	4618      	mov	r0, r3
 80039a4:	f7fc fdd0 	bl	8000548 <__aeabi_f2d>
 80039a8:	4604      	mov	r4, r0
 80039aa:	460d      	mov	r5, r1
 80039ac:	4b45      	ldr	r3, [pc, #276]	; (8003ac4 <SimulateDropping+0x32c>)
 80039ae:	781b      	ldrb	r3, [r3, #0]
 80039b0:	4618      	mov	r0, r3
 80039b2:	f7fc fdb7 	bl	8000524 <__aeabi_i2d>
 80039b6:	a332      	add	r3, pc, #200	; (adr r3, 8003a80 <SimulateDropping+0x2e8>)
 80039b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039bc:	f7fc fe1c 	bl	80005f8 <__aeabi_dmul>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4690      	mov	r8, r2
 80039c6:	4699      	mov	r9, r3
 80039c8:	4b33      	ldr	r3, [pc, #204]	; (8003a98 <SimulateDropping+0x300>)
 80039ca:	edd3 7a00 	vldr	s15, [r3]
 80039ce:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003a90 <SimulateDropping+0x2f8>
 80039d2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039d6:	ee17 0a90 	vmov	r0, s15
 80039da:	f7fc fdb5 	bl	8000548 <__aeabi_f2d>
 80039de:	4602      	mov	r2, r0
 80039e0:	460b      	mov	r3, r1
 80039e2:	4640      	mov	r0, r8
 80039e4:	4649      	mov	r1, r9
 80039e6:	f7fc fe07 	bl	80005f8 <__aeabi_dmul>
 80039ea:	4602      	mov	r2, r0
 80039ec:	460b      	mov	r3, r1
 80039ee:	4610      	mov	r0, r2
 80039f0:	4619      	mov	r1, r3
 80039f2:	f04f 0200 	mov.w	r2, #0
 80039f6:	4b34      	ldr	r3, [pc, #208]	; (8003ac8 <SimulateDropping+0x330>)
 80039f8:	f7fc fdfe 	bl	80005f8 <__aeabi_dmul>
 80039fc:	4602      	mov	r2, r0
 80039fe:	460b      	mov	r3, r1
 8003a00:	4690      	mov	r8, r2
 8003a02:	4699      	mov	r9, r3
 8003a04:	4b29      	ldr	r3, [pc, #164]	; (8003aac <SimulateDropping+0x314>)
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	4618      	mov	r0, r3
 8003a0a:	f7fc fd9d 	bl	8000548 <__aeabi_f2d>
 8003a0e:	4602      	mov	r2, r0
 8003a10:	460b      	mov	r3, r1
 8003a12:	4640      	mov	r0, r8
 8003a14:	4649      	mov	r1, r9
 8003a16:	f7fc ff19 	bl	800084c <__aeabi_ddiv>
 8003a1a:	4602      	mov	r2, r0
 8003a1c:	460b      	mov	r3, r1
 8003a1e:	4620      	mov	r0, r4
 8003a20:	4629      	mov	r1, r5
 8003a22:	f7fc fc33 	bl	800028c <__adddf3>
 8003a26:	4602      	mov	r2, r0
 8003a28:	460b      	mov	r3, r1
 8003a2a:	4610      	mov	r0, r2
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	f7fd f8db 	bl	8000be8 <__aeabi_d2f>
 8003a32:	4603      	mov	r3, r0
 8003a34:	4a22      	ldr	r2, [pc, #136]	; (8003ac0 <SimulateDropping+0x328>)
 8003a36:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8003a38:	4b21      	ldr	r3, [pc, #132]	; (8003ac0 <SimulateDropping+0x328>)
 8003a3a:	edd3 7a00 	vldr	s15, [r3]
 8003a3e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a42:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a46:	d011      	beq.n	8003a6c <SimulateDropping+0x2d4>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003a48:	4b20      	ldr	r3, [pc, #128]	; (8003acc <SimulateDropping+0x334>)
 8003a4a:	781b      	ldrb	r3, [r3, #0]
 8003a4c:	4a1c      	ldr	r2, [pc, #112]	; (8003ac0 <SimulateDropping+0x328>)
 8003a4e:	edd2 7a00 	vldr	s15, [r2]
 8003a52:	eeb0 0a67 	vmov.f32	s0, s15
 8003a56:	4618      	mov	r0, r3
 8003a58:	f7fe f82e 	bl	8001ab8 <CalculateTimer3Period>
 8003a5c:	4603      	mov	r3, r0
 8003a5e:	b29a      	uxth	r2, r3
 8003a60:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <SimulateDropping+0x338>)
 8003a62:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003a64:	4b0d      	ldr	r3, [pc, #52]	; (8003a9c <SimulateDropping+0x304>)
 8003a66:	2201      	movs	r2, #1
 8003a68:	701a      	strb	r2, [r3, #0]
 8003a6a:	e002      	b.n	8003a72 <SimulateDropping+0x2da>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8003a6c:	4b0b      	ldr	r3, [pc, #44]	; (8003a9c <SimulateDropping+0x304>)
 8003a6e:	2200      	movs	r2, #0
 8003a70:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003a72:	2300      	movs	r3, #0
 8003a74:	e172      	b.n	8003d5c <SimulateDropping+0x5c4>
 8003a76:	bf00      	nop
 8003a78:	51eb851f 	.word	0x51eb851f
 8003a7c:	40191eb8 	.word	0x40191eb8
 8003a80:	d2f1a9fc 	.word	0xd2f1a9fc
 8003a84:	3f50624d 	.word	0x3f50624d
 8003a88:	2000043a 	.word	0x2000043a
 8003a8c:	20000448 	.word	0x20000448
 8003a90:	c11ccccd 	.word	0xc11ccccd
 8003a94:	20000470 	.word	0x20000470
 8003a98:	20000010 	.word	0x20000010
 8003a9c:	20000436 	.word	0x20000436
 8003aa0:	200004b4 	.word	0x200004b4
 8003aa4:	2000000a 	.word	0x2000000a
 8003aa8:	20000478 	.word	0x20000478
 8003aac:	20000464 	.word	0x20000464
 8003ab0:	200004b0 	.word	0x200004b0
 8003ab4:	2000044c 	.word	0x2000044c
 8003ab8:	20000449 	.word	0x20000449
 8003abc:	20000541 	.word	0x20000541
 8003ac0:	20000518 	.word	0x20000518
 8003ac4:	20000468 	.word	0x20000468
 8003ac8:	40240000 	.word	0x40240000
 8003acc:	20000003 	.word	0x20000003
 8003ad0:	20000454 	.word	0x20000454
 8003ad4:	20000438 	.word	0x20000438
 8003ad8:	2000044a 	.word	0x2000044a
		}
		if (DropStep3)
 8003adc:	4ba4      	ldr	r3, [pc, #656]	; (8003d70 <SimulateDropping+0x5d8>)
 8003ade:	781b      	ldrb	r3, [r3, #0]
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	f000 8099 	beq.w	8003c18 <SimulateDropping+0x480>
		{
			if (AccRef <= GravityConst-DroppingDecel) // Switch to step 2
 8003ae6:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003d74 <SimulateDropping+0x5dc>
 8003aea:	4ba3      	ldr	r3, [pc, #652]	; (8003d78 <SimulateDropping+0x5e0>)
 8003aec:	edd3 7a00 	vldr	s15, [r3]
 8003af0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003af4:	4ba1      	ldr	r3, [pc, #644]	; (8003d7c <SimulateDropping+0x5e4>)
 8003af6:	edd3 7a00 	vldr	s15, [r3]
 8003afa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003afe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003b02:	db08      	blt.n	8003b16 <SimulateDropping+0x37e>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003b04:	4b9e      	ldr	r3, [pc, #632]	; (8003d80 <SimulateDropping+0x5e8>)
 8003b06:	2200      	movs	r2, #0
 8003b08:	701a      	strb	r2, [r3, #0]

				DropStep3 = false;
 8003b0a:	4b99      	ldr	r3, [pc, #612]	; (8003d70 <SimulateDropping+0x5d8>)
 8003b0c:	2200      	movs	r2, #0
 8003b0e:	701a      	strb	r2, [r3, #0]
				DropStep4 = true; // Switch to Step 4
 8003b10:	4b9c      	ldr	r3, [pc, #624]	; (8003d84 <SimulateDropping+0x5ec>)
 8003b12:	2201      	movs	r2, #1
 8003b14:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,-DropDecelSlope,GravityConst-DroppingDecel);
 8003b16:	4b9c      	ldr	r3, [pc, #624]	; (8003d88 <SimulateDropping+0x5f0>)
 8003b18:	781b      	ldrb	r3, [r3, #0]
 8003b1a:	425b      	negs	r3, r3
 8003b1c:	ee07 3a90 	vmov	s15, r3
 8003b20:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b24:	eddf 6a93 	vldr	s13, [pc, #588]	; 8003d74 <SimulateDropping+0x5dc>
 8003b28:	4b93      	ldr	r3, [pc, #588]	; (8003d78 <SimulateDropping+0x5e0>)
 8003b2a:	edd3 7a00 	vldr	s15, [r3]
 8003b2e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b32:	eef0 0a67 	vmov.f32	s1, s15
 8003b36:	eeb0 0a47 	vmov.f32	s0, s14
 8003b3a:	4890      	ldr	r0, [pc, #576]	; (8003d7c <SimulateDropping+0x5e4>)
 8003b3c:	f7fd fef8 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003b40:	4b92      	ldr	r3, [pc, #584]	; (8003d8c <SimulateDropping+0x5f4>)
 8003b42:	681b      	ldr	r3, [r3, #0]
 8003b44:	4618      	mov	r0, r3
 8003b46:	f7fc fcff 	bl	8000548 <__aeabi_f2d>
 8003b4a:	4604      	mov	r4, r0
 8003b4c:	460d      	mov	r5, r1
 8003b4e:	4b90      	ldr	r3, [pc, #576]	; (8003d90 <SimulateDropping+0x5f8>)
 8003b50:	781b      	ldrb	r3, [r3, #0]
 8003b52:	4618      	mov	r0, r3
 8003b54:	f7fc fce6 	bl	8000524 <__aeabi_i2d>
 8003b58:	a383      	add	r3, pc, #524	; (adr r3, 8003d68 <SimulateDropping+0x5d0>)
 8003b5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b5e:	f7fc fd4b 	bl	80005f8 <__aeabi_dmul>
 8003b62:	4602      	mov	r2, r0
 8003b64:	460b      	mov	r3, r1
 8003b66:	4690      	mov	r8, r2
 8003b68:	4699      	mov	r9, r3
 8003b6a:	4b84      	ldr	r3, [pc, #528]	; (8003d7c <SimulateDropping+0x5e4>)
 8003b6c:	edd3 7a00 	vldr	s15, [r3]
 8003b70:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003d74 <SimulateDropping+0x5dc>
 8003b74:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b78:	ee17 0a90 	vmov	r0, s15
 8003b7c:	f7fc fce4 	bl	8000548 <__aeabi_f2d>
 8003b80:	4602      	mov	r2, r0
 8003b82:	460b      	mov	r3, r1
 8003b84:	4640      	mov	r0, r8
 8003b86:	4649      	mov	r1, r9
 8003b88:	f7fc fd36 	bl	80005f8 <__aeabi_dmul>
 8003b8c:	4602      	mov	r2, r0
 8003b8e:	460b      	mov	r3, r1
 8003b90:	4610      	mov	r0, r2
 8003b92:	4619      	mov	r1, r3
 8003b94:	f04f 0200 	mov.w	r2, #0
 8003b98:	4b7e      	ldr	r3, [pc, #504]	; (8003d94 <SimulateDropping+0x5fc>)
 8003b9a:	f7fc fd2d 	bl	80005f8 <__aeabi_dmul>
 8003b9e:	4602      	mov	r2, r0
 8003ba0:	460b      	mov	r3, r1
 8003ba2:	4690      	mov	r8, r2
 8003ba4:	4699      	mov	r9, r3
 8003ba6:	4b7c      	ldr	r3, [pc, #496]	; (8003d98 <SimulateDropping+0x600>)
 8003ba8:	681b      	ldr	r3, [r3, #0]
 8003baa:	4618      	mov	r0, r3
 8003bac:	f7fc fccc 	bl	8000548 <__aeabi_f2d>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4640      	mov	r0, r8
 8003bb6:	4649      	mov	r1, r9
 8003bb8:	f7fc fe48 	bl	800084c <__aeabi_ddiv>
 8003bbc:	4602      	mov	r2, r0
 8003bbe:	460b      	mov	r3, r1
 8003bc0:	4620      	mov	r0, r4
 8003bc2:	4629      	mov	r1, r5
 8003bc4:	f7fc fb62 	bl	800028c <__adddf3>
 8003bc8:	4602      	mov	r2, r0
 8003bca:	460b      	mov	r3, r1
 8003bcc:	4610      	mov	r0, r2
 8003bce:	4619      	mov	r1, r3
 8003bd0:	f7fd f80a 	bl	8000be8 <__aeabi_d2f>
 8003bd4:	4603      	mov	r3, r0
 8003bd6:	4a6d      	ldr	r2, [pc, #436]	; (8003d8c <SimulateDropping+0x5f4>)
 8003bd8:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 8003bda:	4b6c      	ldr	r3, [pc, #432]	; (8003d8c <SimulateDropping+0x5f4>)
 8003bdc:	edd3 7a00 	vldr	s15, [r3]
 8003be0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003be4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003be8:	d011      	beq.n	8003c0e <SimulateDropping+0x476>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003bea:	4b6c      	ldr	r3, [pc, #432]	; (8003d9c <SimulateDropping+0x604>)
 8003bec:	781b      	ldrb	r3, [r3, #0]
 8003bee:	4a67      	ldr	r2, [pc, #412]	; (8003d8c <SimulateDropping+0x5f4>)
 8003bf0:	edd2 7a00 	vldr	s15, [r2]
 8003bf4:	eeb0 0a67 	vmov.f32	s0, s15
 8003bf8:	4618      	mov	r0, r3
 8003bfa:	f7fd ff5d 	bl	8001ab8 <CalculateTimer3Period>
 8003bfe:	4603      	mov	r3, r0
 8003c00:	b29a      	uxth	r2, r3
 8003c02:	4b67      	ldr	r3, [pc, #412]	; (8003da0 <SimulateDropping+0x608>)
 8003c04:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003c06:	4b5e      	ldr	r3, [pc, #376]	; (8003d80 <SimulateDropping+0x5e8>)
 8003c08:	2201      	movs	r2, #1
 8003c0a:	701a      	strb	r2, [r3, #0]
 8003c0c:	e002      	b.n	8003c14 <SimulateDropping+0x47c>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8003c0e:	4b5c      	ldr	r3, [pc, #368]	; (8003d80 <SimulateDropping+0x5e8>)
 8003c10:	2200      	movs	r2, #0
 8003c12:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003c14:	2300      	movs	r3, #0
 8003c16:	e0a1      	b.n	8003d5c <SimulateDropping+0x5c4>
		}
		if (DropStep4)
 8003c18:	4b5a      	ldr	r3, [pc, #360]	; (8003d84 <SimulateDropping+0x5ec>)
 8003c1a:	781b      	ldrb	r3, [r3, #0]
 8003c1c:	2b00      	cmp	r3, #0
 8003c1e:	f000 809c 	beq.w	8003d5a <SimulateDropping+0x5c2>
		{
			if (SpeedCmd <= 5) // finish the Dropping
 8003c22:	4b5a      	ldr	r3, [pc, #360]	; (8003d8c <SimulateDropping+0x5f4>)
 8003c24:	edd3 7a00 	vldr	s15, [r3]
 8003c28:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003c2c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c30:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c34:	d815      	bhi.n	8003c62 <SimulateDropping+0x4ca>
			{
				StopPulseGenerating();
 8003c36:	f7fd fed9 	bl	80019ec <StopPulseGenerating>
				TotalDroppingPulse = PulseSimuCount;
 8003c3a:	4b5a      	ldr	r3, [pc, #360]	; (8003da4 <SimulateDropping+0x60c>)
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	461a      	mov	r2, r3
 8003c40:	4b59      	ldr	r3, [pc, #356]	; (8003da8 <SimulateDropping+0x610>)
 8003c42:	601a      	str	r2, [r3, #0]
				SpeedCmd = 0;
 8003c44:	4b51      	ldr	r3, [pc, #324]	; (8003d8c <SimulateDropping+0x5f4>)
 8003c46:	f04f 0200 	mov.w	r2, #0
 8003c4a:	601a      	str	r2, [r3, #0]
				CompleteDropping = true;
 8003c4c:	4b57      	ldr	r3, [pc, #348]	; (8003dac <SimulateDropping+0x614>)
 8003c4e:	2201      	movs	r2, #1
 8003c50:	701a      	strb	r2, [r3, #0]
				DropStep4 = false;
 8003c52:	4b4c      	ldr	r3, [pc, #304]	; (8003d84 <SimulateDropping+0x5ec>)
 8003c54:	2200      	movs	r2, #0
 8003c56:	701a      	strb	r2, [r3, #0]

				AccRef = GravityConst;
 8003c58:	4a55      	ldr	r2, [pc, #340]	; (8003db0 <SimulateDropping+0x618>)
 8003c5a:	4b48      	ldr	r3, [pc, #288]	; (8003d7c <SimulateDropping+0x5e4>)
 8003c5c:	601a      	str	r2, [r3, #0]
				return true;
 8003c5e:	2301      	movs	r3, #1
 8003c60:	e07c      	b.n	8003d5c <SimulateDropping+0x5c4>
			}
			AccRef = GravityConst-DroppingDecel;
 8003c62:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003d74 <SimulateDropping+0x5dc>
 8003c66:	4b44      	ldr	r3, [pc, #272]	; (8003d78 <SimulateDropping+0x5e0>)
 8003c68:	edd3 7a00 	vldr	s15, [r3]
 8003c6c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c70:	4b42      	ldr	r3, [pc, #264]	; (8003d7c <SimulateDropping+0x5e4>)
 8003c72:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003c76:	4b45      	ldr	r3, [pc, #276]	; (8003d8c <SimulateDropping+0x5f4>)
 8003c78:	681b      	ldr	r3, [r3, #0]
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	f7fc fc64 	bl	8000548 <__aeabi_f2d>
 8003c80:	4604      	mov	r4, r0
 8003c82:	460d      	mov	r5, r1
 8003c84:	4b42      	ldr	r3, [pc, #264]	; (8003d90 <SimulateDropping+0x5f8>)
 8003c86:	781b      	ldrb	r3, [r3, #0]
 8003c88:	4618      	mov	r0, r3
 8003c8a:	f7fc fc4b 	bl	8000524 <__aeabi_i2d>
 8003c8e:	a336      	add	r3, pc, #216	; (adr r3, 8003d68 <SimulateDropping+0x5d0>)
 8003c90:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c94:	f7fc fcb0 	bl	80005f8 <__aeabi_dmul>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	460b      	mov	r3, r1
 8003c9c:	4690      	mov	r8, r2
 8003c9e:	4699      	mov	r9, r3
 8003ca0:	4b36      	ldr	r3, [pc, #216]	; (8003d7c <SimulateDropping+0x5e4>)
 8003ca2:	edd3 7a00 	vldr	s15, [r3]
 8003ca6:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003d74 <SimulateDropping+0x5dc>
 8003caa:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003cae:	ee17 0a90 	vmov	r0, s15
 8003cb2:	f7fc fc49 	bl	8000548 <__aeabi_f2d>
 8003cb6:	4602      	mov	r2, r0
 8003cb8:	460b      	mov	r3, r1
 8003cba:	4640      	mov	r0, r8
 8003cbc:	4649      	mov	r1, r9
 8003cbe:	f7fc fc9b 	bl	80005f8 <__aeabi_dmul>
 8003cc2:	4602      	mov	r2, r0
 8003cc4:	460b      	mov	r3, r1
 8003cc6:	4610      	mov	r0, r2
 8003cc8:	4619      	mov	r1, r3
 8003cca:	f04f 0200 	mov.w	r2, #0
 8003cce:	4b31      	ldr	r3, [pc, #196]	; (8003d94 <SimulateDropping+0x5fc>)
 8003cd0:	f7fc fc92 	bl	80005f8 <__aeabi_dmul>
 8003cd4:	4602      	mov	r2, r0
 8003cd6:	460b      	mov	r3, r1
 8003cd8:	4690      	mov	r8, r2
 8003cda:	4699      	mov	r9, r3
 8003cdc:	4b2e      	ldr	r3, [pc, #184]	; (8003d98 <SimulateDropping+0x600>)
 8003cde:	681b      	ldr	r3, [r3, #0]
 8003ce0:	4618      	mov	r0, r3
 8003ce2:	f7fc fc31 	bl	8000548 <__aeabi_f2d>
 8003ce6:	4602      	mov	r2, r0
 8003ce8:	460b      	mov	r3, r1
 8003cea:	4640      	mov	r0, r8
 8003cec:	4649      	mov	r1, r9
 8003cee:	f7fc fdad 	bl	800084c <__aeabi_ddiv>
 8003cf2:	4602      	mov	r2, r0
 8003cf4:	460b      	mov	r3, r1
 8003cf6:	4620      	mov	r0, r4
 8003cf8:	4629      	mov	r1, r5
 8003cfa:	f7fc fac7 	bl	800028c <__adddf3>
 8003cfe:	4602      	mov	r2, r0
 8003d00:	460b      	mov	r3, r1
 8003d02:	4610      	mov	r0, r2
 8003d04:	4619      	mov	r1, r3
 8003d06:	f7fc ff6f 	bl	8000be8 <__aeabi_d2f>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	4a1f      	ldr	r2, [pc, #124]	; (8003d8c <SimulateDropping+0x5f4>)
 8003d0e:	6013      	str	r3, [r2, #0]
			if (SpeedCmd <= 0)
 8003d10:	4b1e      	ldr	r3, [pc, #120]	; (8003d8c <SimulateDropping+0x5f4>)
 8003d12:	edd3 7a00 	vldr	s15, [r3]
 8003d16:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d1a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d1e:	d803      	bhi.n	8003d28 <SimulateDropping+0x590>
				SpeedCmd = 0;
 8003d20:	4b1a      	ldr	r3, [pc, #104]	; (8003d8c <SimulateDropping+0x5f4>)
 8003d22:	f04f 0200 	mov.w	r2, #0
 8003d26:	601a      	str	r2, [r3, #0]

			if (SpeedCmd != 0)
 8003d28:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <SimulateDropping+0x5f4>)
 8003d2a:	edd3 7a00 	vldr	s15, [r3]
 8003d2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d36:	d010      	beq.n	8003d5a <SimulateDropping+0x5c2>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003d38:	4b18      	ldr	r3, [pc, #96]	; (8003d9c <SimulateDropping+0x604>)
 8003d3a:	781b      	ldrb	r3, [r3, #0]
 8003d3c:	4a13      	ldr	r2, [pc, #76]	; (8003d8c <SimulateDropping+0x5f4>)
 8003d3e:	edd2 7a00 	vldr	s15, [r2]
 8003d42:	eeb0 0a67 	vmov.f32	s0, s15
 8003d46:	4618      	mov	r0, r3
 8003d48:	f7fd feb6 	bl	8001ab8 <CalculateTimer3Period>
 8003d4c:	4603      	mov	r3, r0
 8003d4e:	b29a      	uxth	r2, r3
 8003d50:	4b13      	ldr	r3, [pc, #76]	; (8003da0 <SimulateDropping+0x608>)
 8003d52:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003d54:	4b0a      	ldr	r3, [pc, #40]	; (8003d80 <SimulateDropping+0x5e8>)
 8003d56:	2201      	movs	r2, #1
 8003d58:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return false;
 8003d5a:	2300      	movs	r3, #0
}
 8003d5c:	4618      	mov	r0, r3
 8003d5e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d62:	bf00      	nop
 8003d64:	f3af 8000 	nop.w
 8003d68:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d6c:	3f50624d 	.word	0x3f50624d
 8003d70:	2000044a 	.word	0x2000044a
 8003d74:	c11ccccd 	.word	0xc11ccccd
 8003d78:	20000474 	.word	0x20000474
 8003d7c:	20000010 	.word	0x20000010
 8003d80:	20000436 	.word	0x20000436
 8003d84:	2000044b 	.word	0x2000044b
 8003d88:	20000540 	.word	0x20000540
 8003d8c:	20000518 	.word	0x20000518
 8003d90:	20000468 	.word	0x20000468
 8003d94:	40240000 	.word	0x40240000
 8003d98:	20000464 	.word	0x20000464
 8003d9c:	20000003 	.word	0x20000003
 8003da0:	20000454 	.word	0x20000454
 8003da4:	200004b4 	.word	0x200004b4
 8003da8:	20000460 	.word	0x20000460
 8003dac:	2000043a 	.word	0x2000043a
 8003db0:	c11ccccd 	.word	0xc11ccccd

08003db4 <SimulatePullAndDrop>:
bool SimulatePullAndDrop ()
{
 8003db4:	b580      	push	{r7, lr}
 8003db6:	af00      	add	r7, sp, #0
	if (CompleteDropping)
 8003db8:	4b0a      	ldr	r3, [pc, #40]	; (8003de4 <SimulatePullAndDrop+0x30>)
 8003dba:	781b      	ldrb	r3, [r3, #0]
 8003dbc:	2b00      	cmp	r3, #0
 8003dbe:	d001      	beq.n	8003dc4 <SimulatePullAndDrop+0x10>
	{
		return true;
 8003dc0:	2301      	movs	r3, #1
 8003dc2:	e00c      	b.n	8003dde <SimulatePullAndDrop+0x2a>
	}
	if (SimulatePulling()) // If finish pulling
 8003dc4:	f7ff f824 	bl	8002e10 <SimulatePulling>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d006      	beq.n	8003ddc <SimulatePullAndDrop+0x28>
	{
		if (SimulateDropping()) // finish Dropping
 8003dce:	f7ff fce3 	bl	8003798 <SimulateDropping>
 8003dd2:	4603      	mov	r3, r0
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d001      	beq.n	8003ddc <SimulatePullAndDrop+0x28>
			return true;
 8003dd8:	2301      	movs	r3, #1
 8003dda:	e000      	b.n	8003dde <SimulatePullAndDrop+0x2a>
	}
	return false;
 8003ddc:	2300      	movs	r3, #0
}
 8003dde:	4618      	mov	r0, r3
 8003de0:	bd80      	pop	{r7, pc}
 8003de2:	bf00      	nop
 8003de4:	2000043a 	.word	0x2000043a

08003de8 <Dropping>:
bool Dropping ()
{
 8003de8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003dec:	af00      	add	r7, sp, #0
	if (CompleteDropping)
 8003dee:	4bbe      	ldr	r3, [pc, #760]	; (80040e8 <Dropping+0x300>)
 8003df0:	781b      	ldrb	r3, [r3, #0]
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <Dropping+0x12>
	{
		return true;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e2e1      	b.n	80043be <Dropping+0x5d6>
	}
	else
	{
		if(DropStep1) // 2nd spd curve Accelerating
 8003dfa:	4bbc      	ldr	r3, [pc, #752]	; (80040ec <Dropping+0x304>)
 8003dfc:	781b      	ldrb	r3, [r3, #0]
 8003dfe:	2b00      	cmp	r3, #0
 8003e00:	f000 80d8 	beq.w	8003fb4 <Dropping+0x1cc>
		{
			if (AccRef >= GravityConst+DroppingAccel) // Switch to step 2
 8003e04:	ed9f 7aba 	vldr	s14, [pc, #744]	; 80040f0 <Dropping+0x308>
 8003e08:	4bba      	ldr	r3, [pc, #744]	; (80040f4 <Dropping+0x30c>)
 8003e0a:	edd3 7a00 	vldr	s15, [r3]
 8003e0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e12:	4bb9      	ldr	r3, [pc, #740]	; (80040f8 <Dropping+0x310>)
 8003e14:	edd3 7a00 	vldr	s15, [r3]
 8003e18:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e1c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e20:	d845      	bhi.n	8003eae <Dropping+0xc6>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003e22:	4bb6      	ldr	r3, [pc, #728]	; (80040fc <Dropping+0x314>)
 8003e24:	2200      	movs	r2, #0
 8003e26:	701a      	strb	r2, [r3, #0]
				PositionPulseCmd = 0;
 8003e28:	4bb5      	ldr	r3, [pc, #724]	; (8004100 <Dropping+0x318>)
 8003e2a:	2200      	movs	r2, #0
 8003e2c:	601a      	str	r2, [r3, #0]
				TargetPosition = (int)(PositionPulseCmd + DroppingAccelDistance*EncoderResolution/(2*3.14*DrumRadius));
 8003e2e:	4bb4      	ldr	r3, [pc, #720]	; (8004100 <Dropping+0x318>)
 8003e30:	681b      	ldr	r3, [r3, #0]
 8003e32:	4618      	mov	r0, r3
 8003e34:	f7fc fb76 	bl	8000524 <__aeabi_i2d>
 8003e38:	4604      	mov	r4, r0
 8003e3a:	460d      	mov	r5, r1
 8003e3c:	4bb1      	ldr	r3, [pc, #708]	; (8004104 <Dropping+0x31c>)
 8003e3e:	881b      	ldrh	r3, [r3, #0]
 8003e40:	ee07 3a90 	vmov	s15, r3
 8003e44:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e48:	4baf      	ldr	r3, [pc, #700]	; (8004108 <Dropping+0x320>)
 8003e4a:	edd3 7a00 	vldr	s15, [r3]
 8003e4e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e52:	ee17 0a90 	vmov	r0, s15
 8003e56:	f7fc fb77 	bl	8000548 <__aeabi_f2d>
 8003e5a:	4680      	mov	r8, r0
 8003e5c:	4689      	mov	r9, r1
 8003e5e:	4bab      	ldr	r3, [pc, #684]	; (800410c <Dropping+0x324>)
 8003e60:	681b      	ldr	r3, [r3, #0]
 8003e62:	4618      	mov	r0, r3
 8003e64:	f7fc fb70 	bl	8000548 <__aeabi_f2d>
 8003e68:	a39b      	add	r3, pc, #620	; (adr r3, 80040d8 <Dropping+0x2f0>)
 8003e6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e6e:	f7fc fbc3 	bl	80005f8 <__aeabi_dmul>
 8003e72:	4602      	mov	r2, r0
 8003e74:	460b      	mov	r3, r1
 8003e76:	4640      	mov	r0, r8
 8003e78:	4649      	mov	r1, r9
 8003e7a:	f7fc fce7 	bl	800084c <__aeabi_ddiv>
 8003e7e:	4602      	mov	r2, r0
 8003e80:	460b      	mov	r3, r1
 8003e82:	4620      	mov	r0, r4
 8003e84:	4629      	mov	r1, r5
 8003e86:	f7fc fa01 	bl	800028c <__adddf3>
 8003e8a:	4602      	mov	r2, r0
 8003e8c:	460b      	mov	r3, r1
 8003e8e:	4610      	mov	r0, r2
 8003e90:	4619      	mov	r1, r3
 8003e92:	f7fc fe61 	bl	8000b58 <__aeabi_d2iz>
 8003e96:	4603      	mov	r3, r0
 8003e98:	4a9d      	ldr	r2, [pc, #628]	; (8004110 <Dropping+0x328>)
 8003e9a:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8003e9c:	4b9d      	ldr	r3, [pc, #628]	; (8004114 <Dropping+0x32c>)
 8003e9e:	2201      	movs	r2, #1
 8003ea0:	701a      	strb	r2, [r3, #0]

				DropStep1 = false;
 8003ea2:	4b92      	ldr	r3, [pc, #584]	; (80040ec <Dropping+0x304>)
 8003ea4:	2200      	movs	r2, #0
 8003ea6:	701a      	strb	r2, [r3, #0]
				DropStep2 = true; // Switch to Step 2
 8003ea8:	4b9b      	ldr	r3, [pc, #620]	; (8004118 <Dropping+0x330>)
 8003eaa:	2201      	movs	r2, #1
 8003eac:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,DropAccelSlope,GravityConst+DroppingAccel);
 8003eae:	4b9b      	ldr	r3, [pc, #620]	; (800411c <Dropping+0x334>)
 8003eb0:	781b      	ldrb	r3, [r3, #0]
 8003eb2:	ee07 3a90 	vmov	s15, r3
 8003eb6:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003eba:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80040f0 <Dropping+0x308>
 8003ebe:	4b8d      	ldr	r3, [pc, #564]	; (80040f4 <Dropping+0x30c>)
 8003ec0:	edd3 7a00 	vldr	s15, [r3]
 8003ec4:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003ec8:	eef0 0a67 	vmov.f32	s1, s15
 8003ecc:	eeb0 0a47 	vmov.f32	s0, s14
 8003ed0:	4889      	ldr	r0, [pc, #548]	; (80040f8 <Dropping+0x310>)
 8003ed2:	f7fd fd2d 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003ed6:	4b92      	ldr	r3, [pc, #584]	; (8004120 <Dropping+0x338>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fb34 	bl	8000548 <__aeabi_f2d>
 8003ee0:	4604      	mov	r4, r0
 8003ee2:	460d      	mov	r5, r1
 8003ee4:	4b8f      	ldr	r3, [pc, #572]	; (8004124 <Dropping+0x33c>)
 8003ee6:	781b      	ldrb	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc fb1b 	bl	8000524 <__aeabi_i2d>
 8003eee:	a37c      	add	r3, pc, #496	; (adr r3, 80040e0 <Dropping+0x2f8>)
 8003ef0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003ef4:	f7fc fb80 	bl	80005f8 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4690      	mov	r8, r2
 8003efe:	4699      	mov	r9, r3
 8003f00:	4b7d      	ldr	r3, [pc, #500]	; (80040f8 <Dropping+0x310>)
 8003f02:	edd3 7a00 	vldr	s15, [r3]
 8003f06:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80040f0 <Dropping+0x308>
 8003f0a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003f0e:	ee17 0a90 	vmov	r0, s15
 8003f12:	f7fc fb19 	bl	8000548 <__aeabi_f2d>
 8003f16:	4602      	mov	r2, r0
 8003f18:	460b      	mov	r3, r1
 8003f1a:	4640      	mov	r0, r8
 8003f1c:	4649      	mov	r1, r9
 8003f1e:	f7fc fb6b 	bl	80005f8 <__aeabi_dmul>
 8003f22:	4602      	mov	r2, r0
 8003f24:	460b      	mov	r3, r1
 8003f26:	4610      	mov	r0, r2
 8003f28:	4619      	mov	r1, r3
 8003f2a:	f04f 0200 	mov.w	r2, #0
 8003f2e:	4b7e      	ldr	r3, [pc, #504]	; (8004128 <Dropping+0x340>)
 8003f30:	f7fc fb62 	bl	80005f8 <__aeabi_dmul>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4690      	mov	r8, r2
 8003f3a:	4699      	mov	r9, r3
 8003f3c:	4b73      	ldr	r3, [pc, #460]	; (800410c <Dropping+0x324>)
 8003f3e:	681b      	ldr	r3, [r3, #0]
 8003f40:	4618      	mov	r0, r3
 8003f42:	f7fc fb01 	bl	8000548 <__aeabi_f2d>
 8003f46:	4602      	mov	r2, r0
 8003f48:	460b      	mov	r3, r1
 8003f4a:	4640      	mov	r0, r8
 8003f4c:	4649      	mov	r1, r9
 8003f4e:	f7fc fc7d 	bl	800084c <__aeabi_ddiv>
 8003f52:	4602      	mov	r2, r0
 8003f54:	460b      	mov	r3, r1
 8003f56:	4620      	mov	r0, r4
 8003f58:	4629      	mov	r1, r5
 8003f5a:	f7fc f997 	bl	800028c <__adddf3>
 8003f5e:	4602      	mov	r2, r0
 8003f60:	460b      	mov	r3, r1
 8003f62:	4610      	mov	r0, r2
 8003f64:	4619      	mov	r1, r3
 8003f66:	f7fc fe3f 	bl	8000be8 <__aeabi_d2f>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	4a6c      	ldr	r2, [pc, #432]	; (8004120 <Dropping+0x338>)
 8003f6e:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 8003f70:	4b6b      	ldr	r3, [pc, #428]	; (8004120 <Dropping+0x338>)
 8003f72:	edd3 7a00 	vldr	s15, [r3]
 8003f76:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f7a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f7e:	d014      	beq.n	8003faa <Dropping+0x1c2>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003f80:	4b6a      	ldr	r3, [pc, #424]	; (800412c <Dropping+0x344>)
 8003f82:	781b      	ldrb	r3, [r3, #0]
 8003f84:	4a66      	ldr	r2, [pc, #408]	; (8004120 <Dropping+0x338>)
 8003f86:	edd2 7a00 	vldr	s15, [r2]
 8003f8a:	eeb0 0a67 	vmov.f32	s0, s15
 8003f8e:	4618      	mov	r0, r3
 8003f90:	f7fd fd92 	bl	8001ab8 <CalculateTimer3Period>
 8003f94:	4603      	mov	r3, r0
 8003f96:	b29a      	uxth	r2, r3
 8003f98:	4b65      	ldr	r3, [pc, #404]	; (8004130 <Dropping+0x348>)
 8003f9a:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 8003f9c:	4b65      	ldr	r3, [pc, #404]	; (8004134 <Dropping+0x34c>)
 8003f9e:	2201      	movs	r2, #1
 8003fa0:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003fa2:	4b56      	ldr	r3, [pc, #344]	; (80040fc <Dropping+0x314>)
 8003fa4:	2201      	movs	r2, #1
 8003fa6:	701a      	strb	r2, [r3, #0]
 8003fa8:	e002      	b.n	8003fb0 <Dropping+0x1c8>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8003faa:	4b54      	ldr	r3, [pc, #336]	; (80040fc <Dropping+0x314>)
 8003fac:	2200      	movs	r2, #0
 8003fae:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003fb0:	2300      	movs	r3, #0
 8003fb2:	e204      	b.n	80043be <Dropping+0x5d6>
		}
		if (DropStep2)
 8003fb4:	4b58      	ldr	r3, [pc, #352]	; (8004118 <Dropping+0x330>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	f000 80c1 	beq.w	8004140 <Dropping+0x358>
		{
			if (IsReachTargetPosition) // Switch to Step 2
 8003fbe:	4b5e      	ldr	r3, [pc, #376]	; (8004138 <Dropping+0x350>)
 8003fc0:	781b      	ldrb	r3, [r3, #0]
 8003fc2:	b2db      	uxtb	r3, r3
 8003fc4:	2b00      	cmp	r3, #0
 8003fc6:	d00e      	beq.n	8003fe6 <Dropping+0x1fe>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003fc8:	4b4c      	ldr	r3, [pc, #304]	; (80040fc <Dropping+0x314>)
 8003fca:	2200      	movs	r2, #0
 8003fcc:	701a      	strb	r2, [r3, #0]

				DropStep2 = false;
 8003fce:	4b52      	ldr	r3, [pc, #328]	; (8004118 <Dropping+0x330>)
 8003fd0:	2200      	movs	r2, #0
 8003fd2:	701a      	strb	r2, [r3, #0]
				DropStep3 = true; // Switch to Step 3
 8003fd4:	4b59      	ldr	r3, [pc, #356]	; (800413c <Dropping+0x354>)
 8003fd6:	2201      	movs	r2, #1
 8003fd8:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8003fda:	4b57      	ldr	r3, [pc, #348]	; (8004138 <Dropping+0x350>)
 8003fdc:	2200      	movs	r2, #0
 8003fde:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false; // OFF pulse checking
 8003fe0:	4b4c      	ldr	r3, [pc, #304]	; (8004114 <Dropping+0x32c>)
 8003fe2:	2200      	movs	r2, #0
 8003fe4:	701a      	strb	r2, [r3, #0]
			}

			AccRef = GravityConst+DroppingAccel;
 8003fe6:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80040f0 <Dropping+0x308>
 8003fea:	4b42      	ldr	r3, [pc, #264]	; (80040f4 <Dropping+0x30c>)
 8003fec:	edd3 7a00 	vldr	s15, [r3]
 8003ff0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003ff4:	4b40      	ldr	r3, [pc, #256]	; (80040f8 <Dropping+0x310>)
 8003ff6:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003ffa:	4b49      	ldr	r3, [pc, #292]	; (8004120 <Dropping+0x338>)
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	4618      	mov	r0, r3
 8004000:	f7fc faa2 	bl	8000548 <__aeabi_f2d>
 8004004:	4604      	mov	r4, r0
 8004006:	460d      	mov	r5, r1
 8004008:	4b46      	ldr	r3, [pc, #280]	; (8004124 <Dropping+0x33c>)
 800400a:	781b      	ldrb	r3, [r3, #0]
 800400c:	4618      	mov	r0, r3
 800400e:	f7fc fa89 	bl	8000524 <__aeabi_i2d>
 8004012:	a333      	add	r3, pc, #204	; (adr r3, 80040e0 <Dropping+0x2f8>)
 8004014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004018:	f7fc faee 	bl	80005f8 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4690      	mov	r8, r2
 8004022:	4699      	mov	r9, r3
 8004024:	4b34      	ldr	r3, [pc, #208]	; (80040f8 <Dropping+0x310>)
 8004026:	edd3 7a00 	vldr	s15, [r3]
 800402a:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80040f0 <Dropping+0x308>
 800402e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004032:	ee17 0a90 	vmov	r0, s15
 8004036:	f7fc fa87 	bl	8000548 <__aeabi_f2d>
 800403a:	4602      	mov	r2, r0
 800403c:	460b      	mov	r3, r1
 800403e:	4640      	mov	r0, r8
 8004040:	4649      	mov	r1, r9
 8004042:	f7fc fad9 	bl	80005f8 <__aeabi_dmul>
 8004046:	4602      	mov	r2, r0
 8004048:	460b      	mov	r3, r1
 800404a:	4610      	mov	r0, r2
 800404c:	4619      	mov	r1, r3
 800404e:	f04f 0200 	mov.w	r2, #0
 8004052:	4b35      	ldr	r3, [pc, #212]	; (8004128 <Dropping+0x340>)
 8004054:	f7fc fad0 	bl	80005f8 <__aeabi_dmul>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4690      	mov	r8, r2
 800405e:	4699      	mov	r9, r3
 8004060:	4b2a      	ldr	r3, [pc, #168]	; (800410c <Dropping+0x324>)
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	4618      	mov	r0, r3
 8004066:	f7fc fa6f 	bl	8000548 <__aeabi_f2d>
 800406a:	4602      	mov	r2, r0
 800406c:	460b      	mov	r3, r1
 800406e:	4640      	mov	r0, r8
 8004070:	4649      	mov	r1, r9
 8004072:	f7fc fbeb 	bl	800084c <__aeabi_ddiv>
 8004076:	4602      	mov	r2, r0
 8004078:	460b      	mov	r3, r1
 800407a:	4620      	mov	r0, r4
 800407c:	4629      	mov	r1, r5
 800407e:	f7fc f905 	bl	800028c <__adddf3>
 8004082:	4602      	mov	r2, r0
 8004084:	460b      	mov	r3, r1
 8004086:	4610      	mov	r0, r2
 8004088:	4619      	mov	r1, r3
 800408a:	f7fc fdad 	bl	8000be8 <__aeabi_d2f>
 800408e:	4603      	mov	r3, r0
 8004090:	4a23      	ldr	r2, [pc, #140]	; (8004120 <Dropping+0x338>)
 8004092:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8004094:	4b22      	ldr	r3, [pc, #136]	; (8004120 <Dropping+0x338>)
 8004096:	edd3 7a00 	vldr	s15, [r3]
 800409a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800409e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80040a2:	d014      	beq.n	80040ce <Dropping+0x2e6>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80040a4:	4b21      	ldr	r3, [pc, #132]	; (800412c <Dropping+0x344>)
 80040a6:	781b      	ldrb	r3, [r3, #0]
 80040a8:	4a1d      	ldr	r2, [pc, #116]	; (8004120 <Dropping+0x338>)
 80040aa:	edd2 7a00 	vldr	s15, [r2]
 80040ae:	eeb0 0a67 	vmov.f32	s0, s15
 80040b2:	4618      	mov	r0, r3
 80040b4:	f7fd fd00 	bl	8001ab8 <CalculateTimer3Period>
 80040b8:	4603      	mov	r3, r0
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	4b1c      	ldr	r3, [pc, #112]	; (8004130 <Dropping+0x348>)
 80040be:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 80040c0:	4b1c      	ldr	r3, [pc, #112]	; (8004134 <Dropping+0x34c>)
 80040c2:	2201      	movs	r2, #1
 80040c4:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 80040c6:	4b0d      	ldr	r3, [pc, #52]	; (80040fc <Dropping+0x314>)
 80040c8:	2201      	movs	r2, #1
 80040ca:	701a      	strb	r2, [r3, #0]
 80040cc:	e002      	b.n	80040d4 <Dropping+0x2ec>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 80040ce:	4b0b      	ldr	r3, [pc, #44]	; (80040fc <Dropping+0x314>)
 80040d0:	2200      	movs	r2, #0
 80040d2:	701a      	strb	r2, [r3, #0]
			}
			return false;
 80040d4:	2300      	movs	r3, #0
 80040d6:	e172      	b.n	80043be <Dropping+0x5d6>
 80040d8:	51eb851f 	.word	0x51eb851f
 80040dc:	40191eb8 	.word	0x40191eb8
 80040e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80040e4:	3f50624d 	.word	0x3f50624d
 80040e8:	2000043a 	.word	0x2000043a
 80040ec:	20000448 	.word	0x20000448
 80040f0:	c11ccccd 	.word	0xc11ccccd
 80040f4:	20000470 	.word	0x20000470
 80040f8:	20000010 	.word	0x20000010
 80040fc:	20000436 	.word	0x20000436
 8004100:	200004b8 	.word	0x200004b8
 8004104:	2000000a 	.word	0x2000000a
 8004108:	20000478 	.word	0x20000478
 800410c:	20000464 	.word	0x20000464
 8004110:	200004b0 	.word	0x200004b0
 8004114:	2000044c 	.word	0x2000044c
 8004118:	20000449 	.word	0x20000449
 800411c:	20000541 	.word	0x20000541
 8004120:	20000518 	.word	0x20000518
 8004124:	20000468 	.word	0x20000468
 8004128:	40240000 	.word	0x40240000
 800412c:	20000003 	.word	0x20000003
 8004130:	20000454 	.word	0x20000454
 8004134:	20000440 	.word	0x20000440
 8004138:	20000438 	.word	0x20000438
 800413c:	2000044a 	.word	0x2000044a
		}
		if (DropStep3)
 8004140:	4ba3      	ldr	r3, [pc, #652]	; (80043d0 <Dropping+0x5e8>)
 8004142:	781b      	ldrb	r3, [r3, #0]
 8004144:	2b00      	cmp	r3, #0
 8004146:	f000 809c 	beq.w	8004282 <Dropping+0x49a>
		{
			if (AccRef <= GravityConst-DroppingDecel) // Switch to step 2
 800414a:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80043d4 <Dropping+0x5ec>
 800414e:	4ba2      	ldr	r3, [pc, #648]	; (80043d8 <Dropping+0x5f0>)
 8004150:	edd3 7a00 	vldr	s15, [r3]
 8004154:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004158:	4ba0      	ldr	r3, [pc, #640]	; (80043dc <Dropping+0x5f4>)
 800415a:	edd3 7a00 	vldr	s15, [r3]
 800415e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8004162:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004166:	db08      	blt.n	800417a <Dropping+0x392>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8004168:	4b9d      	ldr	r3, [pc, #628]	; (80043e0 <Dropping+0x5f8>)
 800416a:	2200      	movs	r2, #0
 800416c:	701a      	strb	r2, [r3, #0]

				DropStep3 = false;
 800416e:	4b98      	ldr	r3, [pc, #608]	; (80043d0 <Dropping+0x5e8>)
 8004170:	2200      	movs	r2, #0
 8004172:	701a      	strb	r2, [r3, #0]
				DropStep4 = true; // Switch to Step 4
 8004174:	4b9b      	ldr	r3, [pc, #620]	; (80043e4 <Dropping+0x5fc>)
 8004176:	2201      	movs	r2, #1
 8004178:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,-DropDecelSlope,GravityConst-DroppingDecel);
 800417a:	4b9b      	ldr	r3, [pc, #620]	; (80043e8 <Dropping+0x600>)
 800417c:	781b      	ldrb	r3, [r3, #0]
 800417e:	425b      	negs	r3, r3
 8004180:	ee07 3a90 	vmov	s15, r3
 8004184:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004188:	eddf 6a92 	vldr	s13, [pc, #584]	; 80043d4 <Dropping+0x5ec>
 800418c:	4b92      	ldr	r3, [pc, #584]	; (80043d8 <Dropping+0x5f0>)
 800418e:	edd3 7a00 	vldr	s15, [r3]
 8004192:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8004196:	eef0 0a67 	vmov.f32	s1, s15
 800419a:	eeb0 0a47 	vmov.f32	s0, s14
 800419e:	488f      	ldr	r0, [pc, #572]	; (80043dc <Dropping+0x5f4>)
 80041a0:	f7fd fbc6 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 80041a4:	4b91      	ldr	r3, [pc, #580]	; (80043ec <Dropping+0x604>)
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	4618      	mov	r0, r3
 80041aa:	f7fc f9cd 	bl	8000548 <__aeabi_f2d>
 80041ae:	4604      	mov	r4, r0
 80041b0:	460d      	mov	r5, r1
 80041b2:	4b8f      	ldr	r3, [pc, #572]	; (80043f0 <Dropping+0x608>)
 80041b4:	781b      	ldrb	r3, [r3, #0]
 80041b6:	4618      	mov	r0, r3
 80041b8:	f7fc f9b4 	bl	8000524 <__aeabi_i2d>
 80041bc:	a382      	add	r3, pc, #520	; (adr r3, 80043c8 <Dropping+0x5e0>)
 80041be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80041c2:	f7fc fa19 	bl	80005f8 <__aeabi_dmul>
 80041c6:	4602      	mov	r2, r0
 80041c8:	460b      	mov	r3, r1
 80041ca:	4690      	mov	r8, r2
 80041cc:	4699      	mov	r9, r3
 80041ce:	4b83      	ldr	r3, [pc, #524]	; (80043dc <Dropping+0x5f4>)
 80041d0:	edd3 7a00 	vldr	s15, [r3]
 80041d4:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80043d4 <Dropping+0x5ec>
 80041d8:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041dc:	ee17 0a90 	vmov	r0, s15
 80041e0:	f7fc f9b2 	bl	8000548 <__aeabi_f2d>
 80041e4:	4602      	mov	r2, r0
 80041e6:	460b      	mov	r3, r1
 80041e8:	4640      	mov	r0, r8
 80041ea:	4649      	mov	r1, r9
 80041ec:	f7fc fa04 	bl	80005f8 <__aeabi_dmul>
 80041f0:	4602      	mov	r2, r0
 80041f2:	460b      	mov	r3, r1
 80041f4:	4610      	mov	r0, r2
 80041f6:	4619      	mov	r1, r3
 80041f8:	f04f 0200 	mov.w	r2, #0
 80041fc:	4b7d      	ldr	r3, [pc, #500]	; (80043f4 <Dropping+0x60c>)
 80041fe:	f7fc f9fb 	bl	80005f8 <__aeabi_dmul>
 8004202:	4602      	mov	r2, r0
 8004204:	460b      	mov	r3, r1
 8004206:	4690      	mov	r8, r2
 8004208:	4699      	mov	r9, r3
 800420a:	4b7b      	ldr	r3, [pc, #492]	; (80043f8 <Dropping+0x610>)
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	4618      	mov	r0, r3
 8004210:	f7fc f99a 	bl	8000548 <__aeabi_f2d>
 8004214:	4602      	mov	r2, r0
 8004216:	460b      	mov	r3, r1
 8004218:	4640      	mov	r0, r8
 800421a:	4649      	mov	r1, r9
 800421c:	f7fc fb16 	bl	800084c <__aeabi_ddiv>
 8004220:	4602      	mov	r2, r0
 8004222:	460b      	mov	r3, r1
 8004224:	4620      	mov	r0, r4
 8004226:	4629      	mov	r1, r5
 8004228:	f7fc f830 	bl	800028c <__adddf3>
 800422c:	4602      	mov	r2, r0
 800422e:	460b      	mov	r3, r1
 8004230:	4610      	mov	r0, r2
 8004232:	4619      	mov	r1, r3
 8004234:	f7fc fcd8 	bl	8000be8 <__aeabi_d2f>
 8004238:	4603      	mov	r3, r0
 800423a:	4a6c      	ldr	r2, [pc, #432]	; (80043ec <Dropping+0x604>)
 800423c:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 800423e:	4b6b      	ldr	r3, [pc, #428]	; (80043ec <Dropping+0x604>)
 8004240:	edd3 7a00 	vldr	s15, [r3]
 8004244:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004248:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424c:	d014      	beq.n	8004278 <Dropping+0x490>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800424e:	4b6b      	ldr	r3, [pc, #428]	; (80043fc <Dropping+0x614>)
 8004250:	781b      	ldrb	r3, [r3, #0]
 8004252:	4a66      	ldr	r2, [pc, #408]	; (80043ec <Dropping+0x604>)
 8004254:	edd2 7a00 	vldr	s15, [r2]
 8004258:	eeb0 0a67 	vmov.f32	s0, s15
 800425c:	4618      	mov	r0, r3
 800425e:	f7fd fc2b 	bl	8001ab8 <CalculateTimer3Period>
 8004262:	4603      	mov	r3, r0
 8004264:	b29a      	uxth	r2, r3
 8004266:	4b66      	ldr	r3, [pc, #408]	; (8004400 <Dropping+0x618>)
 8004268:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 800426a:	4b66      	ldr	r3, [pc, #408]	; (8004404 <Dropping+0x61c>)
 800426c:	2201      	movs	r2, #1
 800426e:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8004270:	4b5b      	ldr	r3, [pc, #364]	; (80043e0 <Dropping+0x5f8>)
 8004272:	2201      	movs	r2, #1
 8004274:	701a      	strb	r2, [r3, #0]
 8004276:	e002      	b.n	800427e <Dropping+0x496>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8004278:	4b59      	ldr	r3, [pc, #356]	; (80043e0 <Dropping+0x5f8>)
 800427a:	2200      	movs	r2, #0
 800427c:	701a      	strb	r2, [r3, #0]
			}
			return false;
 800427e:	2300      	movs	r3, #0
 8004280:	e09d      	b.n	80043be <Dropping+0x5d6>
		}
		if (DropStep4)
 8004282:	4b58      	ldr	r3, [pc, #352]	; (80043e4 <Dropping+0x5fc>)
 8004284:	781b      	ldrb	r3, [r3, #0]
 8004286:	2b00      	cmp	r3, #0
 8004288:	f000 8098 	beq.w	80043bc <Dropping+0x5d4>
		{
			if (SpeedCmd <= 0) // finish the Dropping
 800428c:	4b57      	ldr	r3, [pc, #348]	; (80043ec <Dropping+0x604>)
 800428e:	edd3 7a00 	vldr	s15, [r3]
 8004292:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004296:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800429a:	d810      	bhi.n	80042be <Dropping+0x4d6>
			{
				StopPulseGenerating();
 800429c:	f7fd fba6 	bl	80019ec <StopPulseGenerating>
				SpeedCmd = 0;
 80042a0:	4b52      	ldr	r3, [pc, #328]	; (80043ec <Dropping+0x604>)
 80042a2:	f04f 0200 	mov.w	r2, #0
 80042a6:	601a      	str	r2, [r3, #0]
				CompleteDropping = true;
 80042a8:	4b57      	ldr	r3, [pc, #348]	; (8004408 <Dropping+0x620>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
				DropStep4 = false;
 80042ae:	4b4d      	ldr	r3, [pc, #308]	; (80043e4 <Dropping+0x5fc>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]

				AccRef = GravityConst;
 80042b4:	4a55      	ldr	r2, [pc, #340]	; (800440c <Dropping+0x624>)
 80042b6:	4b49      	ldr	r3, [pc, #292]	; (80043dc <Dropping+0x5f4>)
 80042b8:	601a      	str	r2, [r3, #0]
				return true;
 80042ba:	2301      	movs	r3, #1
 80042bc:	e07f      	b.n	80043be <Dropping+0x5d6>
			}
			AccRef = GravityConst-DroppingDecel;
 80042be:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80043d4 <Dropping+0x5ec>
 80042c2:	4b45      	ldr	r3, [pc, #276]	; (80043d8 <Dropping+0x5f0>)
 80042c4:	edd3 7a00 	vldr	s15, [r3]
 80042c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042cc:	4b43      	ldr	r3, [pc, #268]	; (80043dc <Dropping+0x5f4>)
 80042ce:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 80042d2:	4b46      	ldr	r3, [pc, #280]	; (80043ec <Dropping+0x604>)
 80042d4:	681b      	ldr	r3, [r3, #0]
 80042d6:	4618      	mov	r0, r3
 80042d8:	f7fc f936 	bl	8000548 <__aeabi_f2d>
 80042dc:	4604      	mov	r4, r0
 80042de:	460d      	mov	r5, r1
 80042e0:	4b43      	ldr	r3, [pc, #268]	; (80043f0 <Dropping+0x608>)
 80042e2:	781b      	ldrb	r3, [r3, #0]
 80042e4:	4618      	mov	r0, r3
 80042e6:	f7fc f91d 	bl	8000524 <__aeabi_i2d>
 80042ea:	a337      	add	r3, pc, #220	; (adr r3, 80043c8 <Dropping+0x5e0>)
 80042ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042f0:	f7fc f982 	bl	80005f8 <__aeabi_dmul>
 80042f4:	4602      	mov	r2, r0
 80042f6:	460b      	mov	r3, r1
 80042f8:	4690      	mov	r8, r2
 80042fa:	4699      	mov	r9, r3
 80042fc:	4b37      	ldr	r3, [pc, #220]	; (80043dc <Dropping+0x5f4>)
 80042fe:	edd3 7a00 	vldr	s15, [r3]
 8004302:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80043d4 <Dropping+0x5ec>
 8004306:	ee77 7ac7 	vsub.f32	s15, s15, s14
 800430a:	ee17 0a90 	vmov	r0, s15
 800430e:	f7fc f91b 	bl	8000548 <__aeabi_f2d>
 8004312:	4602      	mov	r2, r0
 8004314:	460b      	mov	r3, r1
 8004316:	4640      	mov	r0, r8
 8004318:	4649      	mov	r1, r9
 800431a:	f7fc f96d 	bl	80005f8 <__aeabi_dmul>
 800431e:	4602      	mov	r2, r0
 8004320:	460b      	mov	r3, r1
 8004322:	4610      	mov	r0, r2
 8004324:	4619      	mov	r1, r3
 8004326:	f04f 0200 	mov.w	r2, #0
 800432a:	4b32      	ldr	r3, [pc, #200]	; (80043f4 <Dropping+0x60c>)
 800432c:	f7fc f964 	bl	80005f8 <__aeabi_dmul>
 8004330:	4602      	mov	r2, r0
 8004332:	460b      	mov	r3, r1
 8004334:	4690      	mov	r8, r2
 8004336:	4699      	mov	r9, r3
 8004338:	4b2f      	ldr	r3, [pc, #188]	; (80043f8 <Dropping+0x610>)
 800433a:	681b      	ldr	r3, [r3, #0]
 800433c:	4618      	mov	r0, r3
 800433e:	f7fc f903 	bl	8000548 <__aeabi_f2d>
 8004342:	4602      	mov	r2, r0
 8004344:	460b      	mov	r3, r1
 8004346:	4640      	mov	r0, r8
 8004348:	4649      	mov	r1, r9
 800434a:	f7fc fa7f 	bl	800084c <__aeabi_ddiv>
 800434e:	4602      	mov	r2, r0
 8004350:	460b      	mov	r3, r1
 8004352:	4620      	mov	r0, r4
 8004354:	4629      	mov	r1, r5
 8004356:	f7fb ff99 	bl	800028c <__adddf3>
 800435a:	4602      	mov	r2, r0
 800435c:	460b      	mov	r3, r1
 800435e:	4610      	mov	r0, r2
 8004360:	4619      	mov	r1, r3
 8004362:	f7fc fc41 	bl	8000be8 <__aeabi_d2f>
 8004366:	4603      	mov	r3, r0
 8004368:	4a20      	ldr	r2, [pc, #128]	; (80043ec <Dropping+0x604>)
 800436a:	6013      	str	r3, [r2, #0]
			if (SpeedCmd <= 0)
 800436c:	4b1f      	ldr	r3, [pc, #124]	; (80043ec <Dropping+0x604>)
 800436e:	edd3 7a00 	vldr	s15, [r3]
 8004372:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8004376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800437a:	d803      	bhi.n	8004384 <Dropping+0x59c>
				SpeedCmd = 0;
 800437c:	4b1b      	ldr	r3, [pc, #108]	; (80043ec <Dropping+0x604>)
 800437e:	f04f 0200 	mov.w	r2, #0
 8004382:	601a      	str	r2, [r3, #0]

			if (SpeedCmd != 0)
 8004384:	4b19      	ldr	r3, [pc, #100]	; (80043ec <Dropping+0x604>)
 8004386:	edd3 7a00 	vldr	s15, [r3]
 800438a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800438e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004392:	d013      	beq.n	80043bc <Dropping+0x5d4>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8004394:	4b19      	ldr	r3, [pc, #100]	; (80043fc <Dropping+0x614>)
 8004396:	781b      	ldrb	r3, [r3, #0]
 8004398:	4a14      	ldr	r2, [pc, #80]	; (80043ec <Dropping+0x604>)
 800439a:	edd2 7a00 	vldr	s15, [r2]
 800439e:	eeb0 0a67 	vmov.f32	s0, s15
 80043a2:	4618      	mov	r0, r3
 80043a4:	f7fd fb88 	bl	8001ab8 <CalculateTimer3Period>
 80043a8:	4603      	mov	r3, r0
 80043aa:	b29a      	uxth	r2, r3
 80043ac:	4b14      	ldr	r3, [pc, #80]	; (8004400 <Dropping+0x618>)
 80043ae:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 80043b0:	4b14      	ldr	r3, [pc, #80]	; (8004404 <Dropping+0x61c>)
 80043b2:	2201      	movs	r2, #1
 80043b4:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 80043b6:	4b0a      	ldr	r3, [pc, #40]	; (80043e0 <Dropping+0x5f8>)
 80043b8:	2201      	movs	r2, #1
 80043ba:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return false;
 80043bc:	2300      	movs	r3, #0
}
 80043be:	4618      	mov	r0, r3
 80043c0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80043c4:	f3af 8000 	nop.w
 80043c8:	d2f1a9fc 	.word	0xd2f1a9fc
 80043cc:	3f50624d 	.word	0x3f50624d
 80043d0:	2000044a 	.word	0x2000044a
 80043d4:	c11ccccd 	.word	0xc11ccccd
 80043d8:	20000474 	.word	0x20000474
 80043dc:	20000010 	.word	0x20000010
 80043e0:	20000436 	.word	0x20000436
 80043e4:	2000044b 	.word	0x2000044b
 80043e8:	20000540 	.word	0x20000540
 80043ec:	20000518 	.word	0x20000518
 80043f0:	20000468 	.word	0x20000468
 80043f4:	40240000 	.word	0x40240000
 80043f8:	20000464 	.word	0x20000464
 80043fc:	20000003 	.word	0x20000003
 8004400:	20000454 	.word	0x20000454
 8004404:	20000440 	.word	0x20000440
 8004408:	2000043a 	.word	0x2000043a
 800440c:	c11ccccd 	.word	0xc11ccccd

08004410 <PullAndDrop>:
bool PullAndDrop ()
{
 8004410:	b580      	push	{r7, lr}
 8004412:	af00      	add	r7, sp, #0
	if (CompleteDropping)
 8004414:	4b0a      	ldr	r3, [pc, #40]	; (8004440 <PullAndDrop+0x30>)
 8004416:	781b      	ldrb	r3, [r3, #0]
 8004418:	2b00      	cmp	r3, #0
 800441a:	d001      	beq.n	8004420 <PullAndDrop+0x10>
	{
		return true;
 800441c:	2301      	movs	r3, #1
 800441e:	e00c      	b.n	800443a <PullAndDrop+0x2a>
	}
	if (PullingExperiment()) // If finish pulling
 8004420:	f7fd ffee 	bl	8002400 <PullingExperiment>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d006      	beq.n	8004438 <PullAndDrop+0x28>
	{
		if (Dropping()) // finish Dropping
 800442a:	f7ff fcdd 	bl	8003de8 <Dropping>
 800442e:	4603      	mov	r3, r0
 8004430:	2b00      	cmp	r3, #0
 8004432:	d001      	beq.n	8004438 <PullAndDrop+0x28>
			return true;
 8004434:	2301      	movs	r3, #1
 8004436:	e000      	b.n	800443a <PullAndDrop+0x2a>
	}
	return false;
 8004438:	2300      	movs	r3, #0
}
 800443a:	4618      	mov	r0, r3
 800443c:	bd80      	pop	{r7, pc}
 800443e:	bf00      	nop
 8004440:	2000043a 	.word	0x2000043a

08004444 <StopSimulating>:

void StopSimulating()
{
 8004444:	b580      	push	{r7, lr}
 8004446:	af00      	add	r7, sp, #0
	IsReachTargetPosition = false;
 8004448:	4b1b      	ldr	r3, [pc, #108]	; (80044b8 <StopSimulating+0x74>)
 800444a:	2200      	movs	r2, #0
 800444c:	701a      	strb	r2, [r3, #0]

	// Reset all the flag and state
	StartRunning = false;
 800444e:	4b1b      	ldr	r3, [pc, #108]	; (80044bc <StopSimulating+0x78>)
 8004450:	2200      	movs	r2, #0
 8004452:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 8004454:	4b1a      	ldr	r3, [pc, #104]	; (80044c0 <StopSimulating+0x7c>)
 8004456:	2200      	movs	r2, #0
 8004458:	701a      	strb	r2, [r3, #0]
	CompleteDropping = false;
 800445a:	4b1a      	ldr	r3, [pc, #104]	; (80044c4 <StopSimulating+0x80>)
 800445c:	2200      	movs	r2, #0
 800445e:	701a      	strb	r2, [r3, #0]
	CompletePulling = false;
 8004460:	4b19      	ldr	r3, [pc, #100]	; (80044c8 <StopSimulating+0x84>)
 8004462:	2200      	movs	r2, #0
 8004464:	701a      	strb	r2, [r3, #0]

	PullStep1 = false;
 8004466:	4b19      	ldr	r3, [pc, #100]	; (80044cc <StopSimulating+0x88>)
 8004468:	2200      	movs	r2, #0
 800446a:	701a      	strb	r2, [r3, #0]
	PullStep2 = false;
 800446c:	4b18      	ldr	r3, [pc, #96]	; (80044d0 <StopSimulating+0x8c>)
 800446e:	2200      	movs	r2, #0
 8004470:	701a      	strb	r2, [r3, #0]
	PullStep3 = false;
 8004472:	4b18      	ldr	r3, [pc, #96]	; (80044d4 <StopSimulating+0x90>)
 8004474:	2200      	movs	r2, #0
 8004476:	701a      	strb	r2, [r3, #0]
	PullStep4 = false;
 8004478:	4b17      	ldr	r3, [pc, #92]	; (80044d8 <StopSimulating+0x94>)
 800447a:	2200      	movs	r2, #0
 800447c:	701a      	strb	r2, [r3, #0]
	PullStep5 = false;
 800447e:	4b17      	ldr	r3, [pc, #92]	; (80044dc <StopSimulating+0x98>)
 8004480:	2200      	movs	r2, #0
 8004482:	701a      	strb	r2, [r3, #0]

	DropStep1 = false;
 8004484:	4b16      	ldr	r3, [pc, #88]	; (80044e0 <StopSimulating+0x9c>)
 8004486:	2200      	movs	r2, #0
 8004488:	701a      	strb	r2, [r3, #0]
	DropStep2 = false;
 800448a:	4b16      	ldr	r3, [pc, #88]	; (80044e4 <StopSimulating+0xa0>)
 800448c:	2200      	movs	r2, #0
 800448e:	701a      	strb	r2, [r3, #0]
	DropStep3 = false;
 8004490:	4b15      	ldr	r3, [pc, #84]	; (80044e8 <StopSimulating+0xa4>)
 8004492:	2200      	movs	r2, #0
 8004494:	701a      	strb	r2, [r3, #0]
	DropStep4 = false;
 8004496:	4b15      	ldr	r3, [pc, #84]	; (80044ec <StopSimulating+0xa8>)
 8004498:	2200      	movs	r2, #0
 800449a:	701a      	strb	r2, [r3, #0]

	StopPulseGenerating(); // Stop pulse generation
 800449c:	f7fd faa6 	bl	80019ec <StopPulseGenerating>
	Timer3CountPeriod = 0;
 80044a0:	4b13      	ldr	r3, [pc, #76]	; (80044f0 <StopSimulating+0xac>)
 80044a2:	2200      	movs	r2, #0
 80044a4:	801a      	strh	r2, [r3, #0]
	SpeedCmd = 0;
 80044a6:	4b13      	ldr	r3, [pc, #76]	; (80044f4 <StopSimulating+0xb0>)
 80044a8:	f04f 0200 	mov.w	r2, #0
 80044ac:	601a      	str	r2, [r3, #0]
	PulseSimuCount = 0; // Reset PulseCmd
 80044ae:	4b12      	ldr	r3, [pc, #72]	; (80044f8 <StopSimulating+0xb4>)
 80044b0:	2200      	movs	r2, #0
 80044b2:	601a      	str	r2, [r3, #0]
}
 80044b4:	bf00      	nop
 80044b6:	bd80      	pop	{r7, pc}
 80044b8:	20000438 	.word	0x20000438
 80044bc:	20000432 	.word	0x20000432
 80044c0:	20000433 	.word	0x20000433
 80044c4:	2000043a 	.word	0x2000043a
 80044c8:	2000043b 	.word	0x2000043b
 80044cc:	20000442 	.word	0x20000442
 80044d0:	20000443 	.word	0x20000443
 80044d4:	20000444 	.word	0x20000444
 80044d8:	20000445 	.word	0x20000445
 80044dc:	20000446 	.word	0x20000446
 80044e0:	20000448 	.word	0x20000448
 80044e4:	20000449 	.word	0x20000449
 80044e8:	2000044a 	.word	0x2000044a
 80044ec:	2000044b 	.word	0x2000044b
 80044f0:	20000454 	.word	0x20000454
 80044f4:	20000518 	.word	0x20000518
 80044f8:	200004b4 	.word	0x200004b4

080044fc <StopExperiment>:
void StopExperiment ()
{
 80044fc:	b580      	push	{r7, lr}
 80044fe:	af00      	add	r7, sp, #0
	StopPulseGenerating(); // Stop pulse generation
 8004500:	f7fd fa74 	bl	80019ec <StopPulseGenerating>
	IsReachTargetPosition = false;
 8004504:	4b1a      	ldr	r3, [pc, #104]	; (8004570 <StopExperiment+0x74>)
 8004506:	2200      	movs	r2, #0
 8004508:	701a      	strb	r2, [r3, #0]
	IsPulseCheck = false;
 800450a:	4b1a      	ldr	r3, [pc, #104]	; (8004574 <StopExperiment+0x78>)
 800450c:	2200      	movs	r2, #0
 800450e:	701a      	strb	r2, [r3, #0]

	// Reset all the flag and state
	StartRunning = false;
 8004510:	4b19      	ldr	r3, [pc, #100]	; (8004578 <StopExperiment+0x7c>)
 8004512:	2200      	movs	r2, #0
 8004514:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 8004516:	4b19      	ldr	r3, [pc, #100]	; (800457c <StopExperiment+0x80>)
 8004518:	2200      	movs	r2, #0
 800451a:	701a      	strb	r2, [r3, #0]
	CompleteDropping = false;
 800451c:	4b18      	ldr	r3, [pc, #96]	; (8004580 <StopExperiment+0x84>)
 800451e:	2200      	movs	r2, #0
 8004520:	701a      	strb	r2, [r3, #0]
	CompletePulling = false;
 8004522:	4b18      	ldr	r3, [pc, #96]	; (8004584 <StopExperiment+0x88>)
 8004524:	2200      	movs	r2, #0
 8004526:	701a      	strb	r2, [r3, #0]

	DropStep1 = false;
 8004528:	4b17      	ldr	r3, [pc, #92]	; (8004588 <StopExperiment+0x8c>)
 800452a:	2200      	movs	r2, #0
 800452c:	701a      	strb	r2, [r3, #0]
	DropStep2 = false;
 800452e:	4b17      	ldr	r3, [pc, #92]	; (800458c <StopExperiment+0x90>)
 8004530:	2200      	movs	r2, #0
 8004532:	701a      	strb	r2, [r3, #0]
	DropStep3 = false;
 8004534:	4b16      	ldr	r3, [pc, #88]	; (8004590 <StopExperiment+0x94>)
 8004536:	2200      	movs	r2, #0
 8004538:	701a      	strb	r2, [r3, #0]
	DropStep4 = false;
 800453a:	4b16      	ldr	r3, [pc, #88]	; (8004594 <StopExperiment+0x98>)
 800453c:	2200      	movs	r2, #0
 800453e:	701a      	strb	r2, [r3, #0]

	PullStep1 = false;
 8004540:	4b15      	ldr	r3, [pc, #84]	; (8004598 <StopExperiment+0x9c>)
 8004542:	2200      	movs	r2, #0
 8004544:	701a      	strb	r2, [r3, #0]
	PullStep2 = false;
 8004546:	4b15      	ldr	r3, [pc, #84]	; (800459c <StopExperiment+0xa0>)
 8004548:	2200      	movs	r2, #0
 800454a:	701a      	strb	r2, [r3, #0]
	PullStep3 = false;
 800454c:	4b14      	ldr	r3, [pc, #80]	; (80045a0 <StopExperiment+0xa4>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
	PullStep4 = false;
 8004552:	4b14      	ldr	r3, [pc, #80]	; (80045a4 <StopExperiment+0xa8>)
 8004554:	2200      	movs	r2, #0
 8004556:	701a      	strb	r2, [r3, #0]
	PullStep5 = false;
 8004558:	4b13      	ldr	r3, [pc, #76]	; (80045a8 <StopExperiment+0xac>)
 800455a:	2200      	movs	r2, #0
 800455c:	701a      	strb	r2, [r3, #0]


	Timer3CountPeriod = 0;
 800455e:	4b13      	ldr	r3, [pc, #76]	; (80045ac <StopExperiment+0xb0>)
 8004560:	2200      	movs	r2, #0
 8004562:	801a      	strh	r2, [r3, #0]
	SpeedCmd = 0;
 8004564:	4b12      	ldr	r3, [pc, #72]	; (80045b0 <StopExperiment+0xb4>)
 8004566:	f04f 0200 	mov.w	r2, #0
 800456a:	601a      	str	r2, [r3, #0]
}
 800456c:	bf00      	nop
 800456e:	bd80      	pop	{r7, pc}
 8004570:	20000438 	.word	0x20000438
 8004574:	2000044c 	.word	0x2000044c
 8004578:	20000432 	.word	0x20000432
 800457c:	20000433 	.word	0x20000433
 8004580:	2000043a 	.word	0x2000043a
 8004584:	2000043b 	.word	0x2000043b
 8004588:	20000448 	.word	0x20000448
 800458c:	20000449 	.word	0x20000449
 8004590:	2000044a 	.word	0x2000044a
 8004594:	2000044b 	.word	0x2000044b
 8004598:	20000442 	.word	0x20000442
 800459c:	20000443 	.word	0x20000443
 80045a0:	20000444 	.word	0x20000444
 80045a4:	20000445 	.word	0x20000445
 80045a8:	20000446 	.word	0x20000446
 80045ac:	20000454 	.word	0x20000454
 80045b0:	20000518 	.word	0x20000518
 80045b4:	00000000 	.word	0x00000000

080045b8 <CalculateRunningSpec>:
void CalculateRunningSpec () // Calculate running parameters
{
 80045b8:	b580      	push	{r7, lr}
 80045ba:	af00      	add	r7, sp, #0
	GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 80045bc:	4b10      	ldr	r3, [pc, #64]	; (8004600 <CalculateRunningSpec+0x48>)
 80045be:	781b      	ldrb	r3, [r3, #0]
 80045c0:	4618      	mov	r0, r3
 80045c2:	f7fb ffaf 	bl	8000524 <__aeabi_i2d>
 80045c6:	a30c      	add	r3, pc, #48	; (adr r3, 80045f8 <CalculateRunningSpec+0x40>)
 80045c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045cc:	f7fc f814 	bl	80005f8 <__aeabi_dmul>
 80045d0:	4602      	mov	r2, r0
 80045d2:	460b      	mov	r3, r1
 80045d4:	4610      	mov	r0, r2
 80045d6:	4619      	mov	r1, r3
 80045d8:	f04f 0200 	mov.w	r2, #0
 80045dc:	4b09      	ldr	r3, [pc, #36]	; (8004604 <CalculateRunningSpec+0x4c>)
 80045de:	f7fc f935 	bl	800084c <__aeabi_ddiv>
 80045e2:	4602      	mov	r2, r0
 80045e4:	460b      	mov	r3, r1
 80045e6:	4610      	mov	r0, r2
 80045e8:	4619      	mov	r1, r3
 80045ea:	f7fc fafd 	bl	8000be8 <__aeabi_d2f>
 80045ee:	4603      	mov	r3, r0
 80045f0:	4a05      	ldr	r2, [pc, #20]	; (8004608 <CalculateRunningSpec+0x50>)
 80045f2:	6013      	str	r3, [r2, #0]
}
 80045f4:	bf00      	nop
 80045f6:	bd80      	pop	{r7, pc}
 80045f8:	9999999a 	.word	0x9999999a
 80045fc:	3fb99999 	.word	0x3fb99999
 8004600:	20000469 	.word	0x20000469
 8004604:	40080000 	.word	0x40080000
 8004608:	2000046c 	.word	0x2000046c

0800460c <InitParams>:
void InitParams ()
{
 800460c:	b580      	push	{r7, lr}
 800460e:	b082      	sub	sp, #8
 8004610:	af00      	add	r7, sp, #0
	// Load Parameters from the memory
	LoadSavedParam(MemoryAddress,Params);
 8004612:	493c      	ldr	r1, [pc, #240]	; (8004704 <InitParams+0xf8>)
 8004614:	483c      	ldr	r0, [pc, #240]	; (8004708 <InitParams+0xfc>)
 8004616:	f7fd f843 	bl	80016a0 <LoadSavedParam>

	// General Params
	DrumRadius = Params[0];
 800461a:	4b3a      	ldr	r3, [pc, #232]	; (8004704 <InitParams+0xf8>)
 800461c:	681b      	ldr	r3, [r3, #0]
 800461e:	4a3b      	ldr	r2, [pc, #236]	; (800470c <InitParams+0x100>)
 8004620:	6013      	str	r3, [r2, #0]
	PullingSpeed = Params[1];
 8004622:	4b38      	ldr	r3, [pc, #224]	; (8004704 <InitParams+0xf8>)
 8004624:	edd3 7a01 	vldr	s15, [r3, #4]
 8004628:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462c:	edc7 7a01 	vstr	s15, [r7, #4]
 8004630:	793b      	ldrb	r3, [r7, #4]
 8004632:	b2da      	uxtb	r2, r3
 8004634:	4b36      	ldr	r3, [pc, #216]	; (8004710 <InitParams+0x104>)
 8004636:	701a      	strb	r2, [r3, #0]
	StoppingTime = Params[2];
 8004638:	4b32      	ldr	r3, [pc, #200]	; (8004704 <InitParams+0xf8>)
 800463a:	edd3 7a02 	vldr	s15, [r3, #8]
 800463e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004642:	ee17 3a90 	vmov	r3, s15
 8004646:	b29a      	uxth	r2, r3
 8004648:	4b32      	ldr	r3, [pc, #200]	; (8004714 <InitParams+0x108>)
 800464a:	801a      	strh	r2, [r3, #0]
	SampleTime = Params[3];
 800464c:	4b2d      	ldr	r3, [pc, #180]	; (8004704 <InitParams+0xf8>)
 800464e:	edd3 7a03 	vldr	s15, [r3, #12]
 8004652:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004656:	edc7 7a01 	vstr	s15, [r7, #4]
 800465a:	793b      	ldrb	r3, [r7, #4]
 800465c:	b2da      	uxtb	r2, r3
 800465e:	4b2e      	ldr	r3, [pc, #184]	; (8004718 <InitParams+0x10c>)
 8004660:	701a      	strb	r2, [r3, #0]

	//
	PullingPoint1 = Params[4];
 8004662:	4b28      	ldr	r3, [pc, #160]	; (8004704 <InitParams+0xf8>)
 8004664:	691b      	ldr	r3, [r3, #16]
 8004666:	4a2d      	ldr	r2, [pc, #180]	; (800471c <InitParams+0x110>)
 8004668:	6013      	str	r3, [r2, #0]
	PullingPoint2  = Params[5];
 800466a:	4b26      	ldr	r3, [pc, #152]	; (8004704 <InitParams+0xf8>)
 800466c:	695b      	ldr	r3, [r3, #20]
 800466e:	4a2c      	ldr	r2, [pc, #176]	; (8004720 <InitParams+0x114>)
 8004670:	6013      	str	r3, [r2, #0]
	PullingPoint3 = Params[6];
 8004672:	4b24      	ldr	r3, [pc, #144]	; (8004704 <InitParams+0xf8>)
 8004674:	699b      	ldr	r3, [r3, #24]
 8004676:	4a2b      	ldr	r2, [pc, #172]	; (8004724 <InitParams+0x118>)
 8004678:	6013      	str	r3, [r2, #0]
	PullingPoint4 = Params[7];
 800467a:	4b22      	ldr	r3, [pc, #136]	; (8004704 <InitParams+0xf8>)
 800467c:	69db      	ldr	r3, [r3, #28]
 800467e:	4a2a      	ldr	r2, [pc, #168]	; (8004728 <InitParams+0x11c>)
 8004680:	6013      	str	r3, [r2, #0]


	// Pulling Stage Params
	PullingAcc1 = Params[8];
 8004682:	4b20      	ldr	r3, [pc, #128]	; (8004704 <InitParams+0xf8>)
 8004684:	6a1b      	ldr	r3, [r3, #32]
 8004686:	4a29      	ldr	r2, [pc, #164]	; (800472c <InitParams+0x120>)
 8004688:	6013      	str	r3, [r2, #0]
	PullingAcc2 = Params[9];
 800468a:	4b1e      	ldr	r3, [pc, #120]	; (8004704 <InitParams+0xf8>)
 800468c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800468e:	4a28      	ldr	r2, [pc, #160]	; (8004730 <InitParams+0x124>)
 8004690:	6013      	str	r3, [r2, #0]
	PullingAcc3 = Params[10];
 8004692:	4b1c      	ldr	r3, [pc, #112]	; (8004704 <InitParams+0xf8>)
 8004694:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004696:	4a27      	ldr	r2, [pc, #156]	; (8004734 <InitParams+0x128>)
 8004698:	6013      	str	r3, [r2, #0]

	// PID Controller params
	PullingAcc4 = Params[11];
 800469a:	4b1a      	ldr	r3, [pc, #104]	; (8004704 <InitParams+0xf8>)
 800469c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800469e:	4a26      	ldr	r2, [pc, #152]	; (8004738 <InitParams+0x12c>)
 80046a0:	6013      	str	r3, [r2, #0]
	PullingAcc5 = Params[12];
 80046a2:	4b18      	ldr	r3, [pc, #96]	; (8004704 <InitParams+0xf8>)
 80046a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046a6:	4a25      	ldr	r2, [pc, #148]	; (800473c <InitParams+0x130>)
 80046a8:	6013      	str	r3, [r2, #0]

	DistCoeff = Params[13];
 80046aa:	4b16      	ldr	r3, [pc, #88]	; (8004704 <InitParams+0xf8>)
 80046ac:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80046ae:	4a24      	ldr	r2, [pc, #144]	; (8004740 <InitParams+0x134>)
 80046b0:	6013      	str	r3, [r2, #0]

	DroppingAccel = Params[14];
 80046b2:	4b14      	ldr	r3, [pc, #80]	; (8004704 <InitParams+0xf8>)
 80046b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80046b6:	4a23      	ldr	r2, [pc, #140]	; (8004744 <InitParams+0x138>)
 80046b8:	6013      	str	r3, [r2, #0]
	DroppingAccelDistance = Params[15];
 80046ba:	4b12      	ldr	r3, [pc, #72]	; (8004704 <InitParams+0xf8>)
 80046bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80046be:	4a22      	ldr	r2, [pc, #136]	; (8004748 <InitParams+0x13c>)
 80046c0:	6013      	str	r3, [r2, #0]
	DropAccelSlope = Params[16];
 80046c2:	4b10      	ldr	r3, [pc, #64]	; (8004704 <InitParams+0xf8>)
 80046c4:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80046c8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046cc:	edc7 7a01 	vstr	s15, [r7, #4]
 80046d0:	793b      	ldrb	r3, [r7, #4]
 80046d2:	b2da      	uxtb	r2, r3
 80046d4:	4b1d      	ldr	r3, [pc, #116]	; (800474c <InitParams+0x140>)
 80046d6:	701a      	strb	r2, [r3, #0]
	DroppingDecel = Params[17];
 80046d8:	4b0a      	ldr	r3, [pc, #40]	; (8004704 <InitParams+0xf8>)
 80046da:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046dc:	4a1c      	ldr	r2, [pc, #112]	; (8004750 <InitParams+0x144>)
 80046de:	6013      	str	r3, [r2, #0]
	DropDecelSlope = Params[18];
 80046e0:	4b08      	ldr	r3, [pc, #32]	; (8004704 <InitParams+0xf8>)
 80046e2:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80046e6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046ea:	edc7 7a01 	vstr	s15, [r7, #4]
 80046ee:	793b      	ldrb	r3, [r7, #4]
 80046f0:	b2da      	uxtb	r2, r3
 80046f2:	4b18      	ldr	r3, [pc, #96]	; (8004754 <InitParams+0x148>)
 80046f4:	701a      	strb	r2, [r3, #0]


	CalculateRunningSpec ();
 80046f6:	f7ff ff5f 	bl	80045b8 <CalculateRunningSpec>
}
 80046fa:	bf00      	nop
 80046fc:	3708      	adds	r7, #8
 80046fe:	46bd      	mov	sp, r7
 8004700:	bd80      	pop	{r7, pc}
 8004702:	bf00      	nop
 8004704:	200004bc 	.word	0x200004bc
 8004708:	08040000 	.word	0x08040000
 800470c:	20000464 	.word	0x20000464
 8004710:	20000469 	.word	0x20000469
 8004714:	20000008 	.word	0x20000008
 8004718:	20000468 	.word	0x20000468
 800471c:	20000494 	.word	0x20000494
 8004720:	20000498 	.word	0x20000498
 8004724:	2000049c 	.word	0x2000049c
 8004728:	200004a0 	.word	0x200004a0
 800472c:	20000480 	.word	0x20000480
 8004730:	20000484 	.word	0x20000484
 8004734:	20000488 	.word	0x20000488
 8004738:	2000048c 	.word	0x2000048c
 800473c:	20000490 	.word	0x20000490
 8004740:	2000053c 	.word	0x2000053c
 8004744:	20000470 	.word	0x20000470
 8004748:	20000478 	.word	0x20000478
 800474c:	20000541 	.word	0x20000541
 8004750:	20000474 	.word	0x20000474
 8004754:	20000540 	.word	0x20000540

08004758 <ProcessReceivedCommand>:

void ProcessReceivedCommand () // Proceed the command from the UI
{
 8004758:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800475c:	b0bf      	sub	sp, #252	; 0xfc
 800475e:	af22      	add	r7, sp, #136	; 0x88
	//ExtractMotionCode(); // Extract data to MotionCode
	switch ((int)MotionCode[0])
 8004760:	4bb4      	ldr	r3, [pc, #720]	; (8004a34 <ProcessReceivedCommand+0x2dc>)
 8004762:	edd3 7a00 	vldr	s15, [r3]
 8004766:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800476a:	ee17 3a90 	vmov	r3, s15
 800476e:	3b01      	subs	r3, #1
 8004770:	2b35      	cmp	r3, #53	; 0x35
 8004772:	f201 804a 	bhi.w	800580a <ProcessReceivedCommand+0x10b2>
 8004776:	a201      	add	r2, pc, #4	; (adr r2, 800477c <ProcessReceivedCommand+0x24>)
 8004778:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800477c:	0800487d 	.word	0x0800487d
 8004780:	080048b7 	.word	0x080048b7
 8004784:	080048e1 	.word	0x080048e1
 8004788:	0800499f 	.word	0x0800499f
 800478c:	08004a79 	.word	0x08004a79
 8004790:	08004aed 	.word	0x08004aed
 8004794:	08004b1b 	.word	0x08004b1b
 8004798:	08004b59 	.word	0x08004b59
 800479c:	08004b7f 	.word	0x08004b7f
 80047a0:	0800580b 	.word	0x0800580b
 80047a4:	08004d85 	.word	0x08004d85
 80047a8:	08004de5 	.word	0x08004de5
 80047ac:	08004eb1 	.word	0x08004eb1
 80047b0:	08004f3f 	.word	0x08004f3f
 80047b4:	08005603 	.word	0x08005603
 80047b8:	08004f85 	.word	0x08004f85
 80047bc:	08004ff7 	.word	0x08004ff7
 80047c0:	08004fff 	.word	0x08004fff
 80047c4:	0800580b 	.word	0x0800580b
 80047c8:	0800580b 	.word	0x0800580b
 80047cc:	0800580b 	.word	0x0800580b
 80047d0:	0800580b 	.word	0x0800580b
 80047d4:	0800580b 	.word	0x0800580b
 80047d8:	0800580b 	.word	0x0800580b
 80047dc:	0800580b 	.word	0x0800580b
 80047e0:	0800580b 	.word	0x0800580b
 80047e4:	0800502f 	.word	0x0800502f
 80047e8:	0800508d 	.word	0x0800508d
 80047ec:	0800580b 	.word	0x0800580b
 80047f0:	0800580b 	.word	0x0800580b
 80047f4:	0800509d 	.word	0x0800509d
 80047f8:	080050f1 	.word	0x080050f1
 80047fc:	0800519d 	.word	0x0800519d
 8004800:	080057bb 	.word	0x080057bb
 8004804:	080051ef 	.word	0x080051ef
 8004808:	08005241 	.word	0x08005241
 800480c:	08005293 	.word	0x08005293
 8004810:	080052e3 	.word	0x080052e3
 8004814:	08005309 	.word	0x08005309
 8004818:	0800580b 	.word	0x0800580b
 800481c:	08005383 	.word	0x08005383
 8004820:	080053d5 	.word	0x080053d5
 8004824:	08005499 	.word	0x08005499
 8004828:	08004855 	.word	0x08004855
 800482c:	08004c19 	.word	0x08004c19
 8004830:	080054eb 	.word	0x080054eb
 8004834:	08005501 	.word	0x08005501
 8004838:	08005553 	.word	0x08005553
 800483c:	08005655 	.word	0x08005655
 8004840:	0800580b 	.word	0x0800580b
 8004844:	080055b1 	.word	0x080055b1
 8004848:	080056af 	.word	0x080056af
 800484c:	0800580b 	.word	0x0800580b
 8004850:	08005761 	.word	0x08005761
	{
		case 44: //Emergency Stop Change to 44 to avoid data confusion
			if ((int)MotionCode[1] == 0) // 44/0
 8004854:	4b77      	ldr	r3, [pc, #476]	; (8004a34 <ProcessReceivedCommand+0x2dc>)
 8004856:	edd3 7a01 	vldr	s15, [r3, #4]
 800485a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800485e:	ee17 3a90 	vmov	r3, s15
 8004862:	2b00      	cmp	r3, #0
 8004864:	d106      	bne.n	8004874 <ProcessReceivedCommand+0x11c>
			{
				Estop(); // Estop button on the UI
 8004866:	f7fc fcf3 	bl	8001250 <Estop>
				PulseGenerationFlag = false; // Stop generating pulses
 800486a:	4b73      	ldr	r3, [pc, #460]	; (8004a38 <ProcessReceivedCommand+0x2e0>)
 800486c:	2200      	movs	r2, #0
 800486e:	701a      	strb	r2, [r3, #0]
				//EMO = true;
			}
			else {AlarmReset();}  // 44/1, alarm button
			break;
 8004870:	f001 b802 	b.w	8005878 <ProcessReceivedCommand+0x1120>
			else {AlarmReset();}  // 44/1, alarm button
 8004874:	f7fc fcc6 	bl	8001204 <AlarmReset>
			break;
 8004878:	f000 bffe 	b.w	8005878 <ProcessReceivedCommand+0x1120>
		case 1: // Stop button;
			if ((int)MotionCode[1] == 1) // 1/1
 800487c:	4b6d      	ldr	r3, [pc, #436]	; (8004a34 <ProcessReceivedCommand+0x2dc>)
 800487e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004882:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004886:	ee17 3a90 	vmov	r3, s15
 800488a:	2b01      	cmp	r3, #1
 800488c:	f040 87bf 	bne.w	800580e <ProcessReceivedCommand+0x10b6>
			{
				if (MotorDriver) // FDA 7000
 8004890:	4b6a      	ldr	r3, [pc, #424]	; (8004a3c <ProcessReceivedCommand+0x2e4>)
 8004892:	781b      	ldrb	r3, [r3, #0]
 8004894:	2b00      	cmp	r3, #0
 8004896:	d005      	beq.n	80048a4 <ProcessReceivedCommand+0x14c>
				{
					Stop();
 8004898:	f7fc fca4 	bl	80011e4 <Stop>
					StopExperiment();
 800489c:	f7ff fe2e 	bl	80044fc <StopExperiment>
					StopPulseGenerating();
					StopExperiment();
					IsHoming = false;
				}
			}
			break;
 80048a0:	f000 bfb5 	b.w	800580e <ProcessReceivedCommand+0x10b6>
					StopPulseGenerating();
 80048a4:	f7fd f8a2 	bl	80019ec <StopPulseGenerating>
					StopExperiment();
 80048a8:	f7ff fe28 	bl	80044fc <StopExperiment>
					IsHoming = false;
 80048ac:	4b64      	ldr	r3, [pc, #400]	; (8004a40 <ProcessReceivedCommand+0x2e8>)
 80048ae:	2200      	movs	r2, #0
 80048b0:	701a      	strb	r2, [r3, #0]
			break;
 80048b2:	f000 bfac 	b.w	800580e <ProcessReceivedCommand+0x10b6>
		case 2: // Set Control Mode, no use now
			if ((int)MotionCode[1] == 1) // 2/1 position mode
 80048b6:	4b5f      	ldr	r3, [pc, #380]	; (8004a34 <ProcessReceivedCommand+0x2dc>)
 80048b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80048bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c0:	ee17 3a90 	vmov	r3, s15
 80048c4:	2b01      	cmp	r3, #1
 80048c6:	d106      	bne.n	80048d6 <ProcessReceivedCommand+0x17e>
					{
						PositionControlMode = true;
 80048c8:	4b5e      	ldr	r3, [pc, #376]	; (8004a44 <ProcessReceivedCommand+0x2ec>)
 80048ca:	2201      	movs	r2, #1
 80048cc:	701a      	strb	r2, [r3, #0]
						DriverInit(); // Init Position Mode
 80048ce:	f7fc fcff 	bl	80012d0 <DriverInit>
			else // 2/0 speed mode
					{
						PositionControlMode = false;
						//SetSpeedMode(); // Set to Speed Mode
					}
			break;
 80048d2:	f000 bfd1 	b.w	8005878 <ProcessReceivedCommand+0x1120>
						PositionControlMode = false;
 80048d6:	4b5b      	ldr	r3, [pc, #364]	; (8004a44 <ProcessReceivedCommand+0x2ec>)
 80048d8:	2200      	movs	r2, #0
 80048da:	701a      	strb	r2, [r3, #0]
			break;
 80048dc:	f000 bfcc 	b.w	8005878 <ProcessReceivedCommand+0x1120>
		case 3: // Jog Control

			if ((int)MotionCode[1] == 1) // 3/1 move up button
 80048e0:	4b54      	ldr	r3, [pc, #336]	; (8004a34 <ProcessReceivedCommand+0x2dc>)
 80048e2:	edd3 7a01 	vldr	s15, [r3, #4]
 80048e6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048ea:	ee17 3a90 	vmov	r3, s15
 80048ee:	2b01      	cmp	r3, #1
 80048f0:	d12a      	bne.n	8004948 <ProcessReceivedCommand+0x1f0>
			{
					if (PositionControlMode) // If the control Mode is Position Mode
 80048f2:	4b54      	ldr	r3, [pc, #336]	; (8004a44 <ProcessReceivedCommand+0x2ec>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d022      	beq.n	8004940 <ProcessReceivedCommand+0x1e8>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80048fa:	4b50      	ldr	r3, [pc, #320]	; (8004a3c <ProcessReceivedCommand+0x2e4>)
 80048fc:	781b      	ldrb	r3, [r3, #0]
 80048fe:	4a52      	ldr	r2, [pc, #328]	; (8004a48 <ProcessReceivedCommand+0x2f0>)
 8004900:	8812      	ldrh	r2, [r2, #0]
 8004902:	ee07 2a90 	vmov	s15, r2
 8004906:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800490a:	eeb0 0a67 	vmov.f32	s0, s15
 800490e:	4618      	mov	r0, r3
 8004910:	f7fd f8d2 	bl	8001ab8 <CalculateTimer3Period>
 8004914:	4603      	mov	r3, r0
 8004916:	b29a      	uxth	r2, r3
 8004918:	4b4c      	ldr	r3, [pc, #304]	; (8004a4c <ProcessReceivedCommand+0x2f4>)
 800491a:	801a      	strh	r2, [r3, #0]
						PRIsToggled = true; // PR phase is 90 deg late
 800491c:	4b4c      	ldr	r3, [pc, #304]	; (8004a50 <ProcessReceivedCommand+0x2f8>)
 800491e:	2201      	movs	r2, #1
 8004920:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up
 8004922:	4b4c      	ldr	r3, [pc, #304]	; (8004a54 <ProcessReceivedCommand+0x2fc>)
 8004924:	2200      	movs	r2, #0
 8004926:	701a      	strb	r2, [r3, #0]
						StartPositionCount = true;
 8004928:	4b4b      	ldr	r3, [pc, #300]	; (8004a58 <ProcessReceivedCommand+0x300>)
 800492a:	2201      	movs	r2, #1
 800492c:	701a      	strb	r2, [r3, #0]
						InitPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 800492e:	f7fd f881 	bl	8001a34 <InitPulseGenerating>
						PulseGenerationFlag = true;
 8004932:	4b41      	ldr	r3, [pc, #260]	; (8004a38 <ProcessReceivedCommand+0x2e0>)
 8004934:	2201      	movs	r2, #1
 8004936:	701a      	strb	r2, [r3, #0]
						DisableSTOP(); // Turn off STOP to run
 8004938:	f7fc fc96 	bl	8001268 <DisableSTOP>
					else // Speed Mode
					{
						JogMoveDown(); // Disable the stop
					}
			}
			break;
 800493c:	f000 bf9c 	b.w	8005878 <ProcessReceivedCommand+0x1120>
						JogMoveUp(); // Disable the stop
 8004940:	f7fc fc9e 	bl	8001280 <JogMoveUp>
			break;
 8004944:	f000 bf98 	b.w	8005878 <ProcessReceivedCommand+0x1120>
					if (PositionControlMode) // If the control Mode is Position Mode
 8004948:	4b3e      	ldr	r3, [pc, #248]	; (8004a44 <ProcessReceivedCommand+0x2ec>)
 800494a:	781b      	ldrb	r3, [r3, #0]
 800494c:	2b00      	cmp	r3, #0
 800494e:	d022      	beq.n	8004996 <ProcessReceivedCommand+0x23e>
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8004950:	4b3a      	ldr	r3, [pc, #232]	; (8004a3c <ProcessReceivedCommand+0x2e4>)
 8004952:	781b      	ldrb	r3, [r3, #0]
 8004954:	4a3c      	ldr	r2, [pc, #240]	; (8004a48 <ProcessReceivedCommand+0x2f0>)
 8004956:	8812      	ldrh	r2, [r2, #0]
 8004958:	ee07 2a90 	vmov	s15, r2
 800495c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004960:	eeb0 0a67 	vmov.f32	s0, s15
 8004964:	4618      	mov	r0, r3
 8004966:	f7fd f8a7 	bl	8001ab8 <CalculateTimer3Period>
 800496a:	4603      	mov	r3, r0
 800496c:	b29a      	uxth	r2, r3
 800496e:	4b37      	ldr	r3, [pc, #220]	; (8004a4c <ProcessReceivedCommand+0x2f4>)
 8004970:	801a      	strh	r2, [r3, #0]
						PRIsToggled = false; //
 8004972:	4b37      	ldr	r3, [pc, #220]	; (8004a50 <ProcessReceivedCommand+0x2f8>)
 8004974:	2200      	movs	r2, #0
 8004976:	701a      	strb	r2, [r3, #0]
						Direction = true; // true = move down
 8004978:	4b36      	ldr	r3, [pc, #216]	; (8004a54 <ProcessReceivedCommand+0x2fc>)
 800497a:	2201      	movs	r2, #1
 800497c:	701a      	strb	r2, [r3, #0]
						StartPositionCount = true;// Enable PositionCmd Count
 800497e:	4b36      	ldr	r3, [pc, #216]	; (8004a58 <ProcessReceivedCommand+0x300>)
 8004980:	2201      	movs	r2, #1
 8004982:	701a      	strb	r2, [r3, #0]
						InitPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 8004984:	f7fd f856 	bl	8001a34 <InitPulseGenerating>
						PulseGenerationFlag = true;
 8004988:	4b2b      	ldr	r3, [pc, #172]	; (8004a38 <ProcessReceivedCommand+0x2e0>)
 800498a:	2201      	movs	r2, #1
 800498c:	701a      	strb	r2, [r3, #0]
						DisableSTOP();	// Turn off STOP to run
 800498e:	f7fc fc6b 	bl	8001268 <DisableSTOP>
			break;
 8004992:	f000 bf71 	b.w	8005878 <ProcessReceivedCommand+0x1120>
						JogMoveDown(); // Disable the stop
 8004996:	f7fc fc87 	bl	80012a8 <JogMoveDown>
			break;
 800499a:	f000 bf6d 	b.w	8005878 <ProcessReceivedCommand+0x1120>
		case 4: // Start Running Buton (Start Running Experiment)
			if ((int)MotionCode[1] == 1) // Start runing
 800499e:	4b25      	ldr	r3, [pc, #148]	; (8004a34 <ProcessReceivedCommand+0x2dc>)
 80049a0:	edd3 7a01 	vldr	s15, [r3, #4]
 80049a4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80049a8:	ee17 3a90 	vmov	r3, s15
 80049ac:	2b01      	cmp	r3, #1
 80049ae:	d13c      	bne.n	8004a2a <ProcessReceivedCommand+0x2d2>
				{
					if ( Initialized )
 80049b0:	4b2a      	ldr	r3, [pc, #168]	; (8004a5c <ProcessReceivedCommand+0x304>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d01e      	beq.n	80049f6 <ProcessReceivedCommand+0x29e>
					{
						TxPCLen = sprintf(ResponseMess,"g4/1e"); // Respond that the experiment started
 80049b8:	4929      	ldr	r1, [pc, #164]	; (8004a60 <ProcessReceivedCommand+0x308>)
 80049ba:	482a      	ldr	r0, [pc, #168]	; (8004a64 <ProcessReceivedCommand+0x30c>)
 80049bc:	f007 f816 	bl	800b9ec <siprintf>
 80049c0:	4603      	mov	r3, r0
 80049c2:	b2da      	uxtb	r2, r3
 80049c4:	4b28      	ldr	r3, [pc, #160]	; (8004a68 <ProcessReceivedCommand+0x310>)
 80049c6:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80049c8:	4b27      	ldr	r3, [pc, #156]	; (8004a68 <ProcessReceivedCommand+0x310>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b29a      	uxth	r2, r3
 80049ce:	23c8      	movs	r3, #200	; 0xc8
 80049d0:	4924      	ldr	r1, [pc, #144]	; (8004a64 <ProcessReceivedCommand+0x30c>)
 80049d2:	4826      	ldr	r0, [pc, #152]	; (8004a6c <ProcessReceivedCommand+0x314>)
 80049d4:	f005 f929 	bl	8009c2a <HAL_UART_Transmit>
						HAL_Delay(200);
 80049d8:	20c8      	movs	r0, #200	; 0xc8
 80049da:	f002 ff03 	bl	80077e4 <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 80049de:	220f      	movs	r2, #15
 80049e0:	2100      	movs	r1, #0
 80049e2:	4820      	ldr	r0, [pc, #128]	; (8004a64 <ProcessReceivedCommand+0x30c>)
 80049e4:	f006 f97a 	bl	800acdc <memset>

						InitializeRunning (ExperimentMode);
 80049e8:	4b21      	ldr	r3, [pc, #132]	; (8004a70 <ProcessReceivedCommand+0x318>)
 80049ea:	781b      	ldrb	r3, [r3, #0]
 80049ec:	4618      	mov	r0, r3
 80049ee:	f7fd fc63 	bl	80022b8 <InitializeRunning>
				}
			else // Stop running
				{
					StopExperiment();
				}
			break;
 80049f2:	f000 bf41 	b.w	8005878 <ProcessReceivedCommand+0x1120>
						TxPCLen = sprintf(ResponseMess,"g4/0e"); // Respond that the experiment can not start
 80049f6:	491f      	ldr	r1, [pc, #124]	; (8004a74 <ProcessReceivedCommand+0x31c>)
 80049f8:	481a      	ldr	r0, [pc, #104]	; (8004a64 <ProcessReceivedCommand+0x30c>)
 80049fa:	f006 fff7 	bl	800b9ec <siprintf>
 80049fe:	4603      	mov	r3, r0
 8004a00:	b2da      	uxtb	r2, r3
 8004a02:	4b19      	ldr	r3, [pc, #100]	; (8004a68 <ProcessReceivedCommand+0x310>)
 8004a04:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004a06:	4b18      	ldr	r3, [pc, #96]	; (8004a68 <ProcessReceivedCommand+0x310>)
 8004a08:	781b      	ldrb	r3, [r3, #0]
 8004a0a:	b29a      	uxth	r2, r3
 8004a0c:	23c8      	movs	r3, #200	; 0xc8
 8004a0e:	4915      	ldr	r1, [pc, #84]	; (8004a64 <ProcessReceivedCommand+0x30c>)
 8004a10:	4816      	ldr	r0, [pc, #88]	; (8004a6c <ProcessReceivedCommand+0x314>)
 8004a12:	f005 f90a 	bl	8009c2a <HAL_UART_Transmit>
						HAL_Delay(200);
 8004a16:	20c8      	movs	r0, #200	; 0xc8
 8004a18:	f002 fee4 	bl	80077e4 <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004a1c:	220f      	movs	r2, #15
 8004a1e:	2100      	movs	r1, #0
 8004a20:	4810      	ldr	r0, [pc, #64]	; (8004a64 <ProcessReceivedCommand+0x30c>)
 8004a22:	f006 f95b 	bl	800acdc <memset>
			break;
 8004a26:	f000 bf27 	b.w	8005878 <ProcessReceivedCommand+0x1120>
					StopExperiment();
 8004a2a:	f7ff fd67 	bl	80044fc <StopExperiment>
			break;
 8004a2e:	f000 bf23 	b.w	8005878 <ProcessReceivedCommand+0x1120>
 8004a32:	bf00      	nop
 8004a34:	2000051c 	.word	0x2000051c
 8004a38:	20000436 	.word	0x20000436
 8004a3c:	20000003 	.word	0x20000003
 8004a40:	2000043c 	.word	0x2000043c
 8004a44:	20000002 	.word	0x20000002
 8004a48:	20000006 	.word	0x20000006
 8004a4c:	20000454 	.word	0x20000454
 8004a50:	2000043f 	.word	0x2000043f
 8004a54:	20000434 	.word	0x20000434
 8004a58:	20000440 	.word	0x20000440
 8004a5c:	2000043d 	.word	0x2000043d
 8004a60:	0800f71c 	.word	0x0800f71c
 8004a64:	2000041c 	.word	0x2000041c
 8004a68:	20000414 	.word	0x20000414
 8004a6c:	200002f8 	.word	0x200002f8
 8004a70:	20000005 	.word	0x20000005
 8004a74:	0800f724 	.word	0x0800f724

		case 5: // Set Jog Speed
			if (PositionControlMode) // If it is the position control mode, then change the JogSpeed
 8004a78:	4b56      	ldr	r3, [pc, #344]	; (8004bd4 <ProcessReceivedCommand+0x47c>)
 8004a7a:	781b      	ldrb	r3, [r3, #0]
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	f000 86c8 	beq.w	8005812 <ProcessReceivedCommand+0x10ba>
			{
				JogSpeed = (int)(MotionCode[1]); // unit: rpm
 8004a82:	4b55      	ldr	r3, [pc, #340]	; (8004bd8 <ProcessReceivedCommand+0x480>)
 8004a84:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a88:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a8c:	ee17 3a90 	vmov	r3, s15
 8004a90:	b29a      	uxth	r2, r3
 8004a92:	4b52      	ldr	r3, [pc, #328]	; (8004bdc <ProcessReceivedCommand+0x484>)
 8004a94:	801a      	strh	r2, [r3, #0]
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8004a96:	4b52      	ldr	r3, [pc, #328]	; (8004be0 <ProcessReceivedCommand+0x488>)
 8004a98:	781b      	ldrb	r3, [r3, #0]
 8004a9a:	4a50      	ldr	r2, [pc, #320]	; (8004bdc <ProcessReceivedCommand+0x484>)
 8004a9c:	8812      	ldrh	r2, [r2, #0]
 8004a9e:	ee07 2a90 	vmov	s15, r2
 8004aa2:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004aa6:	eeb0 0a67 	vmov.f32	s0, s15
 8004aaa:	4618      	mov	r0, r3
 8004aac:	f7fd f804 	bl	8001ab8 <CalculateTimer3Period>
 8004ab0:	4603      	mov	r3, r0
 8004ab2:	b29a      	uxth	r2, r3
 8004ab4:	4b4b      	ldr	r3, [pc, #300]	; (8004be4 <ProcessReceivedCommand+0x48c>)
 8004ab6:	801a      	strh	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"j%de",JogSpeed);
 8004ab8:	4b48      	ldr	r3, [pc, #288]	; (8004bdc <ProcessReceivedCommand+0x484>)
 8004aba:	881b      	ldrh	r3, [r3, #0]
 8004abc:	461a      	mov	r2, r3
 8004abe:	494a      	ldr	r1, [pc, #296]	; (8004be8 <ProcessReceivedCommand+0x490>)
 8004ac0:	484a      	ldr	r0, [pc, #296]	; (8004bec <ProcessReceivedCommand+0x494>)
 8004ac2:	f006 ff93 	bl	800b9ec <siprintf>
 8004ac6:	4603      	mov	r3, r0
 8004ac8:	b2da      	uxtb	r2, r3
 8004aca:	4b49      	ldr	r3, [pc, #292]	; (8004bf0 <ProcessReceivedCommand+0x498>)
 8004acc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 8004ace:	4b48      	ldr	r3, [pc, #288]	; (8004bf0 <ProcessReceivedCommand+0x498>)
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	b29a      	uxth	r2, r3
 8004ad4:	23c8      	movs	r3, #200	; 0xc8
 8004ad6:	4945      	ldr	r1, [pc, #276]	; (8004bec <ProcessReceivedCommand+0x494>)
 8004ad8:	4846      	ldr	r0, [pc, #280]	; (8004bf4 <ProcessReceivedCommand+0x49c>)
 8004ada:	f005 f8a6 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess)); // Clear the array
 8004ade:	220f      	movs	r2, #15
 8004ae0:	2100      	movs	r1, #0
 8004ae2:	4842      	ldr	r0, [pc, #264]	; (8004bec <ProcessReceivedCommand+0x494>)
 8004ae4:	f006 f8fa 	bl	800acdc <memset>

				// = (60*10e6)/(JogSpeed*EncoderRelsolution*Timer3Period)
				// Where JogSpeed in rpm; EcoderRelsolution in pulses, Timer3Period in us
				// Timer3 period in us = 2 us
			}
			break;
 8004ae8:	f000 be93 	b.w	8005812 <ProcessReceivedCommand+0x10ba>

		case 6: // 6 request driver data
			if((int)MotionCode[1] == 1)
 8004aec:	4b3a      	ldr	r3, [pc, #232]	; (8004bd8 <ProcessReceivedCommand+0x480>)
 8004aee:	edd3 7a01 	vldr	s15, [r3, #4]
 8004af2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004af6:	ee17 3a90 	vmov	r3, s15
 8004afa:	2b01      	cmp	r3, #1
 8004afc:	d108      	bne.n	8004b10 <ProcessReceivedCommand+0x3b8>
			{
				UIDataRequest = true;
 8004afe:	4b3e      	ldr	r3, [pc, #248]	; (8004bf8 <ProcessReceivedCommand+0x4a0>)
 8004b00:	2201      	movs	r2, #1
 8004b02:	701a      	strb	r2, [r3, #0]
				ReadMultiRegister(StE03,5);
 8004b04:	2105      	movs	r1, #5
 8004b06:	200c      	movs	r0, #12
 8004b08:	f7fc fd4e 	bl	80015a8 <ReadMultiRegister>
			} // 6/1 If the UI request data
			else
			{
				UIDataRequest = false;
			}
			break;
 8004b0c:	f000 beb4 	b.w	8005878 <ProcessReceivedCommand+0x1120>
				UIDataRequest = false;
 8004b10:	4b39      	ldr	r3, [pc, #228]	; (8004bf8 <ProcessReceivedCommand+0x4a0>)
 8004b12:	2200      	movs	r2, #0
 8004b14:	701a      	strb	r2, [r3, #0]
			break;
 8004b16:	f000 beaf 	b.w	8005878 <ProcessReceivedCommand+0x1120>

		case 7: // Save System Params
			// Save to the flash memory
			SaveSystemParams(&numofwords);
 8004b1a:	4838      	ldr	r0, [pc, #224]	; (8004bfc <ProcessReceivedCommand+0x4a4>)
 8004b1c:	f7fc fdfe 	bl	800171c <SaveSystemParams>
			HAL_Delay(500);
 8004b20:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004b24:	f002 fe5e 	bl	80077e4 <HAL_Delay>
			SaveSystemParams(&numofwords); // Do twice times
 8004b28:	4834      	ldr	r0, [pc, #208]	; (8004bfc <ProcessReceivedCommand+0x4a4>)
 8004b2a:	f7fc fdf7 	bl	800171c <SaveSystemParams>
			// Send back to the UI to notify
			char MessageBuffer[10];
			TxPCLen = sprintf(MessageBuffer,"r7/1e");
 8004b2e:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b32:	4933      	ldr	r1, [pc, #204]	; (8004c00 <ProcessReceivedCommand+0x4a8>)
 8004b34:	4618      	mov	r0, r3
 8004b36:	f006 ff59 	bl	800b9ec <siprintf>
 8004b3a:	4603      	mov	r3, r0
 8004b3c:	b2da      	uxtb	r2, r3
 8004b3e:	4b2c      	ldr	r3, [pc, #176]	; (8004bf0 <ProcessReceivedCommand+0x498>)
 8004b40:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t *)MessageBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004b42:	4b2b      	ldr	r3, [pc, #172]	; (8004bf0 <ProcessReceivedCommand+0x498>)
 8004b44:	781b      	ldrb	r3, [r3, #0]
 8004b46:	b29a      	uxth	r2, r3
 8004b48:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8004b4c:	2364      	movs	r3, #100	; 0x64
 8004b4e:	4829      	ldr	r0, [pc, #164]	; (8004bf4 <ProcessReceivedCommand+0x49c>)
 8004b50:	f005 f86b 	bl	8009c2a <HAL_UART_Transmit>
			break;
 8004b54:	f000 be90 	b.w	8005878 <ProcessReceivedCommand+0x1120>

		case 8: // Request reading digital driver output
			if((int)MotionCode[1] == 1) {OutputDataRequest = true;} // 8/1 = request
 8004b58:	4b1f      	ldr	r3, [pc, #124]	; (8004bd8 <ProcessReceivedCommand+0x480>)
 8004b5a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b5e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b62:	ee17 3a90 	vmov	r3, s15
 8004b66:	2b01      	cmp	r3, #1
 8004b68:	d104      	bne.n	8004b74 <ProcessReceivedCommand+0x41c>
 8004b6a:	4b26      	ldr	r3, [pc, #152]	; (8004c04 <ProcessReceivedCommand+0x4ac>)
 8004b6c:	2201      	movs	r2, #1
 8004b6e:	701a      	strb	r2, [r3, #0]
			else OutputDataRequest = false; // 8/0 = stop request
			break;
 8004b70:	f000 be82 	b.w	8005878 <ProcessReceivedCommand+0x1120>
			else OutputDataRequest = false; // 8/0 = stop request
 8004b74:	4b23      	ldr	r3, [pc, #140]	; (8004c04 <ProcessReceivedCommand+0x4ac>)
 8004b76:	2200      	movs	r2, #0
 8004b78:	701a      	strb	r2, [r3, #0]
			break;
 8004b7a:	f000 be7d 	b.w	8005878 <ProcessReceivedCommand+0x1120>
		case 9: // Set Pulling Point 4
			if (StartRunning) // Setting is not available while running
 8004b7e:	4b22      	ldr	r3, [pc, #136]	; (8004c08 <ProcessReceivedCommand+0x4b0>)
 8004b80:	781b      	ldrb	r3, [r3, #0]
 8004b82:	2b00      	cmp	r3, #0
 8004b84:	f040 8647 	bne.w	8005816 <ProcessReceivedCommand+0x10be>
			{
				break;
			}
			else
			{
				PullingPoint4 = MotionCode[1];
 8004b88:	4b13      	ldr	r3, [pc, #76]	; (8004bd8 <ProcessReceivedCommand+0x480>)
 8004b8a:	685b      	ldr	r3, [r3, #4]
 8004b8c:	4a1f      	ldr	r2, [pc, #124]	; (8004c0c <ProcessReceivedCommand+0x4b4>)
 8004b8e:	6013      	str	r3, [r2, #0]
				Initialized = false; // This required to re-initialize the system
 8004b90:	4b1f      	ldr	r3, [pc, #124]	; (8004c10 <ProcessReceivedCommand+0x4b8>)
 8004b92:	2200      	movs	r2, #0
 8004b94:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r9/%.2fe",PullingPoint4);
 8004b96:	4b1d      	ldr	r3, [pc, #116]	; (8004c0c <ProcessReceivedCommand+0x4b4>)
 8004b98:	681b      	ldr	r3, [r3, #0]
 8004b9a:	4618      	mov	r0, r3
 8004b9c:	f7fb fcd4 	bl	8000548 <__aeabi_f2d>
 8004ba0:	4602      	mov	r2, r0
 8004ba2:	460b      	mov	r3, r1
 8004ba4:	491b      	ldr	r1, [pc, #108]	; (8004c14 <ProcessReceivedCommand+0x4bc>)
 8004ba6:	4811      	ldr	r0, [pc, #68]	; (8004bec <ProcessReceivedCommand+0x494>)
 8004ba8:	f006 ff20 	bl	800b9ec <siprintf>
 8004bac:	4603      	mov	r3, r0
 8004bae:	b2da      	uxtb	r2, r3
 8004bb0:	4b0f      	ldr	r3, [pc, #60]	; (8004bf0 <ProcessReceivedCommand+0x498>)
 8004bb2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004bb4:	4b0e      	ldr	r3, [pc, #56]	; (8004bf0 <ProcessReceivedCommand+0x498>)
 8004bb6:	781b      	ldrb	r3, [r3, #0]
 8004bb8:	b29a      	uxth	r2, r3
 8004bba:	2364      	movs	r3, #100	; 0x64
 8004bbc:	490b      	ldr	r1, [pc, #44]	; (8004bec <ProcessReceivedCommand+0x494>)
 8004bbe:	480d      	ldr	r0, [pc, #52]	; (8004bf4 <ProcessReceivedCommand+0x49c>)
 8004bc0:	f005 f833 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004bc4:	220f      	movs	r2, #15
 8004bc6:	2100      	movs	r1, #0
 8004bc8:	4808      	ldr	r0, [pc, #32]	; (8004bec <ProcessReceivedCommand+0x494>)
 8004bca:	f006 f887 	bl	800acdc <memset>
			}
			break;
 8004bce:	f000 be53 	b.w	8005878 <ProcessReceivedCommand+0x1120>
 8004bd2:	bf00      	nop
 8004bd4:	20000002 	.word	0x20000002
 8004bd8:	2000051c 	.word	0x2000051c
 8004bdc:	20000006 	.word	0x20000006
 8004be0:	20000003 	.word	0x20000003
 8004be4:	20000454 	.word	0x20000454
 8004be8:	0800f72c 	.word	0x0800f72c
 8004bec:	2000041c 	.word	0x2000041c
 8004bf0:	20000414 	.word	0x20000414
 8004bf4:	200002f8 	.word	0x200002f8
 8004bf8:	20000435 	.word	0x20000435
 8004bfc:	2000000c 	.word	0x2000000c
 8004c00:	0800f734 	.word	0x0800f734
 8004c04:	20000001 	.word	0x20000001
 8004c08:	20000432 	.word	0x20000432
 8004c0c:	200004a0 	.word	0x200004a0
 8004c10:	2000043d 	.word	0x2000043d
 8004c14:	0800f73c 	.word	0x0800f73c
//			DropDecelSlope = Params[18];

			// Send to the GUI


			TxPCLen = sprintf(TxPCBuff,"p%.2f/%d/%d/%d/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%d/%.2f/%de"
 8004c18:	4b87      	ldr	r3, [pc, #540]	; (8004e38 <ProcessReceivedCommand+0x6e0>)
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	4618      	mov	r0, r3
 8004c1e:	f7fb fc93 	bl	8000548 <__aeabi_f2d>
 8004c22:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8004c26:	4b85      	ldr	r3, [pc, #532]	; (8004e3c <ProcessReceivedCommand+0x6e4>)
 8004c28:	781b      	ldrb	r3, [r3, #0]
 8004c2a:	657b      	str	r3, [r7, #84]	; 0x54
 8004c2c:	4b84      	ldr	r3, [pc, #528]	; (8004e40 <ProcessReceivedCommand+0x6e8>)
 8004c2e:	881b      	ldrh	r3, [r3, #0]
 8004c30:	653b      	str	r3, [r7, #80]	; 0x50
 8004c32:	4b84      	ldr	r3, [pc, #528]	; (8004e44 <ProcessReceivedCommand+0x6ec>)
 8004c34:	781b      	ldrb	r3, [r3, #0]
 8004c36:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c38:	4b83      	ldr	r3, [pc, #524]	; (8004e48 <ProcessReceivedCommand+0x6f0>)
 8004c3a:	681b      	ldr	r3, [r3, #0]
 8004c3c:	4618      	mov	r0, r3
 8004c3e:	f7fb fc83 	bl	8000548 <__aeabi_f2d>
 8004c42:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8004c46:	4b81      	ldr	r3, [pc, #516]	; (8004e4c <ProcessReceivedCommand+0x6f4>)
 8004c48:	681b      	ldr	r3, [r3, #0]
 8004c4a:	4618      	mov	r0, r3
 8004c4c:	f7fb fc7c 	bl	8000548 <__aeabi_f2d>
 8004c50:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8004c54:	4b7e      	ldr	r3, [pc, #504]	; (8004e50 <ProcessReceivedCommand+0x6f8>)
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4618      	mov	r0, r3
 8004c5a:	f7fb fc75 	bl	8000548 <__aeabi_f2d>
 8004c5e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8004c62:	4b7c      	ldr	r3, [pc, #496]	; (8004e54 <ProcessReceivedCommand+0x6fc>)
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	4618      	mov	r0, r3
 8004c68:	f7fb fc6e 	bl	8000548 <__aeabi_f2d>
 8004c6c:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8004c70:	4b79      	ldr	r3, [pc, #484]	; (8004e58 <ProcessReceivedCommand+0x700>)
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	4618      	mov	r0, r3
 8004c76:	f7fb fc67 	bl	8000548 <__aeabi_f2d>
 8004c7a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8004c7e:	4b77      	ldr	r3, [pc, #476]	; (8004e5c <ProcessReceivedCommand+0x704>)
 8004c80:	681b      	ldr	r3, [r3, #0]
 8004c82:	4618      	mov	r0, r3
 8004c84:	f7fb fc60 	bl	8000548 <__aeabi_f2d>
 8004c88:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004c8c:	4b74      	ldr	r3, [pc, #464]	; (8004e60 <ProcessReceivedCommand+0x708>)
 8004c8e:	681b      	ldr	r3, [r3, #0]
 8004c90:	4618      	mov	r0, r3
 8004c92:	f7fb fc59 	bl	8000548 <__aeabi_f2d>
 8004c96:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004c9a:	4b72      	ldr	r3, [pc, #456]	; (8004e64 <ProcessReceivedCommand+0x70c>)
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	4618      	mov	r0, r3
 8004ca0:	f7fb fc52 	bl	8000548 <__aeabi_f2d>
 8004ca4:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004ca8:	4b6f      	ldr	r3, [pc, #444]	; (8004e68 <ProcessReceivedCommand+0x710>)
 8004caa:	681b      	ldr	r3, [r3, #0]
 8004cac:	4618      	mov	r0, r3
 8004cae:	f7fb fc4b 	bl	8000548 <__aeabi_f2d>
 8004cb2:	e9c7 0100 	strd	r0, r1, [r7]
 8004cb6:	4b6d      	ldr	r3, [pc, #436]	; (8004e6c <ProcessReceivedCommand+0x714>)
 8004cb8:	681b      	ldr	r3, [r3, #0]
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fb fc44 	bl	8000548 <__aeabi_f2d>
 8004cc0:	4682      	mov	sl, r0
 8004cc2:	468b      	mov	fp, r1
 8004cc4:	4b6a      	ldr	r3, [pc, #424]	; (8004e70 <ProcessReceivedCommand+0x718>)
 8004cc6:	681b      	ldr	r3, [r3, #0]
 8004cc8:	4618      	mov	r0, r3
 8004cca:	f7fb fc3d 	bl	8000548 <__aeabi_f2d>
 8004cce:	4680      	mov	r8, r0
 8004cd0:	4689      	mov	r9, r1
 8004cd2:	4b68      	ldr	r3, [pc, #416]	; (8004e74 <ProcessReceivedCommand+0x71c>)
 8004cd4:	681b      	ldr	r3, [r3, #0]
 8004cd6:	4618      	mov	r0, r3
 8004cd8:	f7fb fc36 	bl	8000548 <__aeabi_f2d>
 8004cdc:	4604      	mov	r4, r0
 8004cde:	460d      	mov	r5, r1
 8004ce0:	4b65      	ldr	r3, [pc, #404]	; (8004e78 <ProcessReceivedCommand+0x720>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	461e      	mov	r6, r3
 8004ce6:	4b65      	ldr	r3, [pc, #404]	; (8004e7c <ProcessReceivedCommand+0x724>)
 8004ce8:	681b      	ldr	r3, [r3, #0]
 8004cea:	4618      	mov	r0, r3
 8004cec:	f7fb fc2c 	bl	8000548 <__aeabi_f2d>
 8004cf0:	4b63      	ldr	r3, [pc, #396]	; (8004e80 <ProcessReceivedCommand+0x728>)
 8004cf2:	781b      	ldrb	r3, [r3, #0]
 8004cf4:	9320      	str	r3, [sp, #128]	; 0x80
 8004cf6:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8004cfa:	961c      	str	r6, [sp, #112]	; 0x70
 8004cfc:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8004d00:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 8004d04:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 8004d08:	ed97 7b00 	vldr	d7, [r7]
 8004d0c:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004d10:	ed97 7b02 	vldr	d7, [r7, #8]
 8004d14:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8004d18:	ed97 7b04 	vldr	d7, [r7, #16]
 8004d1c:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004d20:	ed97 7b06 	vldr	d7, [r7, #24]
 8004d24:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004d28:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d2c:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004d30:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004d34:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004d38:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004d3c:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004d40:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004d44:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d48:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8004d4c:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004d50:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004d52:	9102      	str	r1, [sp, #8]
 8004d54:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d56:	9101      	str	r1, [sp, #4]
 8004d58:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d5a:	9300      	str	r3, [sp, #0]
 8004d5c:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d60:	4948      	ldr	r1, [pc, #288]	; (8004e84 <ProcessReceivedCommand+0x72c>)
 8004d62:	4849      	ldr	r0, [pc, #292]	; (8004e88 <ProcessReceivedCommand+0x730>)
 8004d64:	f006 fe42 	bl	800b9ec <siprintf>
 8004d68:	4603      	mov	r3, r0
 8004d6a:	b2da      	uxtb	r2, r3
 8004d6c:	4b47      	ldr	r3, [pc, #284]	; (8004e8c <ProcessReceivedCommand+0x734>)
 8004d6e:	701a      	strb	r2, [r3, #0]
			                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
												 PullingPoint1, PullingPoint2, PullingPoint3, PullingPoint4,
		                     PullingAcc1, PullingAcc2, PullingAcc3,
							 PullingAcc4, PullingAcc5, DistCoeff,
							 DroppingAccel, DroppingAccelDistance, DropAccelSlope, DroppingDecel, DropDecelSlope); // Combine to a string
			HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004d70:	4b46      	ldr	r3, [pc, #280]	; (8004e8c <ProcessReceivedCommand+0x734>)
 8004d72:	781b      	ldrb	r3, [r3, #0]
 8004d74:	b29a      	uxth	r2, r3
 8004d76:	23c8      	movs	r3, #200	; 0xc8
 8004d78:	4943      	ldr	r1, [pc, #268]	; (8004e88 <ProcessReceivedCommand+0x730>)
 8004d7a:	4845      	ldr	r0, [pc, #276]	; (8004e90 <ProcessReceivedCommand+0x738>)
 8004d7c:	f004 ff55 	bl	8009c2a <HAL_UART_Transmit>
			break;
 8004d80:	f000 bd7a 	b.w	8005878 <ProcessReceivedCommand+0x1120>

		case 11: // Set Drum Radius
			if (StartRunning) // Setting is not available while running
 8004d84:	4b43      	ldr	r3, [pc, #268]	; (8004e94 <ProcessReceivedCommand+0x73c>)
 8004d86:	781b      	ldrb	r3, [r3, #0]
 8004d88:	2b00      	cmp	r3, #0
 8004d8a:	d006      	beq.n	8004d9a <ProcessReceivedCommand+0x642>
			{
				InitializeRunning (ExperimentMode);
 8004d8c:	4b42      	ldr	r3, [pc, #264]	; (8004e98 <ProcessReceivedCommand+0x740>)
 8004d8e:	781b      	ldrb	r3, [r3, #0]
 8004d90:	4618      	mov	r0, r3
 8004d92:	f7fd fa91 	bl	80022b8 <InitializeRunning>
				break;
 8004d96:	f000 bd6f 	b.w	8005878 <ProcessReceivedCommand+0x1120>
			}
			else
			{
				DrumRadius = MotionCode[1];
 8004d9a:	4b40      	ldr	r3, [pc, #256]	; (8004e9c <ProcessReceivedCommand+0x744>)
 8004d9c:	685b      	ldr	r3, [r3, #4]
 8004d9e:	4a26      	ldr	r2, [pc, #152]	; (8004e38 <ProcessReceivedCommand+0x6e0>)
 8004da0:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8004da2:	4b3f      	ldr	r3, [pc, #252]	; (8004ea0 <ProcessReceivedCommand+0x748>)
 8004da4:	2200      	movs	r2, #0
 8004da6:	701a      	strb	r2, [r3, #0]
//				char DrumRadiusBuffer[10];
//				TxPCLen = sprintf(DrumRadiusBuffer,"r11/%.2fe",DrumRadius);
//				HAL_UART_Transmit(&huart6,(uint8_t *)DrumRadiusBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"r11/%.2fe",DrumRadius);
 8004da8:	4b23      	ldr	r3, [pc, #140]	; (8004e38 <ProcessReceivedCommand+0x6e0>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	4618      	mov	r0, r3
 8004dae:	f7fb fbcb 	bl	8000548 <__aeabi_f2d>
 8004db2:	4602      	mov	r2, r0
 8004db4:	460b      	mov	r3, r1
 8004db6:	493b      	ldr	r1, [pc, #236]	; (8004ea4 <ProcessReceivedCommand+0x74c>)
 8004db8:	483b      	ldr	r0, [pc, #236]	; (8004ea8 <ProcessReceivedCommand+0x750>)
 8004dba:	f006 fe17 	bl	800b9ec <siprintf>
 8004dbe:	4603      	mov	r3, r0
 8004dc0:	b2da      	uxtb	r2, r3
 8004dc2:	4b32      	ldr	r3, [pc, #200]	; (8004e8c <ProcessReceivedCommand+0x734>)
 8004dc4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 8004dc6:	4b31      	ldr	r3, [pc, #196]	; (8004e8c <ProcessReceivedCommand+0x734>)
 8004dc8:	781b      	ldrb	r3, [r3, #0]
 8004dca:	b29a      	uxth	r2, r3
 8004dcc:	23c8      	movs	r3, #200	; 0xc8
 8004dce:	4936      	ldr	r1, [pc, #216]	; (8004ea8 <ProcessReceivedCommand+0x750>)
 8004dd0:	482f      	ldr	r0, [pc, #188]	; (8004e90 <ProcessReceivedCommand+0x738>)
 8004dd2:	f004 ff2a 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004dd6:	220f      	movs	r2, #15
 8004dd8:	2100      	movs	r1, #0
 8004dda:	4833      	ldr	r0, [pc, #204]	; (8004ea8 <ProcessReceivedCommand+0x750>)
 8004ddc:	f005 ff7e 	bl	800acdc <memset>
				break;
 8004de0:	f000 bd4a 	b.w	8005878 <ProcessReceivedCommand+0x1120>
			}

		case 12: // Set DroppingAccelDistance
			if (StartRunning) // Setting is not available while running
 8004de4:	4b2b      	ldr	r3, [pc, #172]	; (8004e94 <ProcessReceivedCommand+0x73c>)
 8004de6:	781b      	ldrb	r3, [r3, #0]
 8004de8:	2b00      	cmp	r3, #0
 8004dea:	f040 8516 	bne.w	800581a <ProcessReceivedCommand+0x10c2>
			{
				break;
			}
			else
			{
				DroppingAccelDistance = MotionCode[1];
 8004dee:	4b2b      	ldr	r3, [pc, #172]	; (8004e9c <ProcessReceivedCommand+0x744>)
 8004df0:	685b      	ldr	r3, [r3, #4]
 8004df2:	4a20      	ldr	r2, [pc, #128]	; (8004e74 <ProcessReceivedCommand+0x71c>)
 8004df4:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8004df6:	4b2a      	ldr	r3, [pc, #168]	; (8004ea0 <ProcessReceivedCommand+0x748>)
 8004df8:	2200      	movs	r2, #0
 8004dfa:	701a      	strb	r2, [r3, #0]
//				char DroppingAccelDistanceBuffer[10];
//				TxPCLen = sprintf(DroppingAccelDistanceBuffer,"r12/%.1fe",DroppingAccelDistance);
//				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelDistanceBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"r12/%.1fe",DroppingAccelDistance);
 8004dfc:	4b1d      	ldr	r3, [pc, #116]	; (8004e74 <ProcessReceivedCommand+0x71c>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4618      	mov	r0, r3
 8004e02:	f7fb fba1 	bl	8000548 <__aeabi_f2d>
 8004e06:	4602      	mov	r2, r0
 8004e08:	460b      	mov	r3, r1
 8004e0a:	4928      	ldr	r1, [pc, #160]	; (8004eac <ProcessReceivedCommand+0x754>)
 8004e0c:	4826      	ldr	r0, [pc, #152]	; (8004ea8 <ProcessReceivedCommand+0x750>)
 8004e0e:	f006 fded 	bl	800b9ec <siprintf>
 8004e12:	4603      	mov	r3, r0
 8004e14:	b2da      	uxtb	r2, r3
 8004e16:	4b1d      	ldr	r3, [pc, #116]	; (8004e8c <ProcessReceivedCommand+0x734>)
 8004e18:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004e1a:	4b1c      	ldr	r3, [pc, #112]	; (8004e8c <ProcessReceivedCommand+0x734>)
 8004e1c:	781b      	ldrb	r3, [r3, #0]
 8004e1e:	b29a      	uxth	r2, r3
 8004e20:	23c8      	movs	r3, #200	; 0xc8
 8004e22:	4921      	ldr	r1, [pc, #132]	; (8004ea8 <ProcessReceivedCommand+0x750>)
 8004e24:	481a      	ldr	r0, [pc, #104]	; (8004e90 <ProcessReceivedCommand+0x738>)
 8004e26:	f004 ff00 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004e2a:	220f      	movs	r2, #15
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	481e      	ldr	r0, [pc, #120]	; (8004ea8 <ProcessReceivedCommand+0x750>)
 8004e30:	f005 ff54 	bl	800acdc <memset>
				break;
 8004e34:	f000 bd20 	b.w	8005878 <ProcessReceivedCommand+0x1120>
 8004e38:	20000464 	.word	0x20000464
 8004e3c:	20000469 	.word	0x20000469
 8004e40:	20000008 	.word	0x20000008
 8004e44:	20000468 	.word	0x20000468
 8004e48:	20000494 	.word	0x20000494
 8004e4c:	20000498 	.word	0x20000498
 8004e50:	2000049c 	.word	0x2000049c
 8004e54:	200004a0 	.word	0x200004a0
 8004e58:	20000480 	.word	0x20000480
 8004e5c:	20000484 	.word	0x20000484
 8004e60:	20000488 	.word	0x20000488
 8004e64:	2000048c 	.word	0x2000048c
 8004e68:	20000490 	.word	0x20000490
 8004e6c:	2000053c 	.word	0x2000053c
 8004e70:	20000470 	.word	0x20000470
 8004e74:	20000478 	.word	0x20000478
 8004e78:	20000541 	.word	0x20000541
 8004e7c:	20000474 	.word	0x20000474
 8004e80:	20000540 	.word	0x20000540
 8004e84:	0800f748 	.word	0x0800f748
 8004e88:	200003b0 	.word	0x200003b0
 8004e8c:	20000414 	.word	0x20000414
 8004e90:	200002f8 	.word	0x200002f8
 8004e94:	20000432 	.word	0x20000432
 8004e98:	20000005 	.word	0x20000005
 8004e9c:	2000051c 	.word	0x2000051c
 8004ea0:	2000043d 	.word	0x2000043d
 8004ea4:	0800f7a0 	.word	0x0800f7a0
 8004ea8:	2000041c 	.word	0x2000041c
 8004eac:	0800f7ac 	.word	0x0800f7ac
			}

		case 13: // Set PullingSpeed
			// PullingSpeed is the maximum speed when homing or going to the initial Posion
			if (StartRunning) // Setting is not available while running
 8004eb0:	4ba7      	ldr	r3, [pc, #668]	; (8005150 <ProcessReceivedCommand+0x9f8>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	2b00      	cmp	r3, #0
 8004eb6:	f040 84b2 	bne.w	800581e <ProcessReceivedCommand+0x10c6>
			{
				break;
			}
			else
			{
				PullingSpeed = MotionCode[1];
 8004eba:	4ba6      	ldr	r3, [pc, #664]	; (8005154 <ProcessReceivedCommand+0x9fc>)
 8004ebc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ec0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004ec4:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8004ec8:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8004ecc:	b2da      	uxtb	r2, r3
 8004ece:	4ba2      	ldr	r3, [pc, #648]	; (8005158 <ProcessReceivedCommand+0xa00>)
 8004ed0:	701a      	strb	r2, [r3, #0]
				GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8004ed2:	4ba1      	ldr	r3, [pc, #644]	; (8005158 <ProcessReceivedCommand+0xa00>)
 8004ed4:	781b      	ldrb	r3, [r3, #0]
 8004ed6:	4618      	mov	r0, r3
 8004ed8:	f7fb fb24 	bl	8000524 <__aeabi_i2d>
 8004edc:	a39a      	add	r3, pc, #616	; (adr r3, 8005148 <ProcessReceivedCommand+0x9f0>)
 8004ede:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004ee2:	f7fb fb89 	bl	80005f8 <__aeabi_dmul>
 8004ee6:	4602      	mov	r2, r0
 8004ee8:	460b      	mov	r3, r1
 8004eea:	4610      	mov	r0, r2
 8004eec:	4619      	mov	r1, r3
 8004eee:	f04f 0200 	mov.w	r2, #0
 8004ef2:	4b9a      	ldr	r3, [pc, #616]	; (800515c <ProcessReceivedCommand+0xa04>)
 8004ef4:	f7fb fcaa 	bl	800084c <__aeabi_ddiv>
 8004ef8:	4602      	mov	r2, r0
 8004efa:	460b      	mov	r3, r1
 8004efc:	4610      	mov	r0, r2
 8004efe:	4619      	mov	r1, r3
 8004f00:	f7fb fe72 	bl	8000be8 <__aeabi_d2f>
 8004f04:	4603      	mov	r3, r0
 8004f06:	4a96      	ldr	r2, [pc, #600]	; (8005160 <ProcessReceivedCommand+0xa08>)
 8004f08:	6013      	str	r3, [r2, #0]

				//char PullingSpeedBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r13/%de",PullingSpeed);
 8004f0a:	4b93      	ldr	r3, [pc, #588]	; (8005158 <ProcessReceivedCommand+0xa00>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	461a      	mov	r2, r3
 8004f10:	4994      	ldr	r1, [pc, #592]	; (8005164 <ProcessReceivedCommand+0xa0c>)
 8004f12:	4895      	ldr	r0, [pc, #596]	; (8005168 <ProcessReceivedCommand+0xa10>)
 8004f14:	f006 fd6a 	bl	800b9ec <siprintf>
 8004f18:	4603      	mov	r3, r0
 8004f1a:	b2da      	uxtb	r2, r3
 8004f1c:	4b93      	ldr	r3, [pc, #588]	; (800516c <ProcessReceivedCommand+0xa14>)
 8004f1e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004f20:	4b92      	ldr	r3, [pc, #584]	; (800516c <ProcessReceivedCommand+0xa14>)
 8004f22:	781b      	ldrb	r3, [r3, #0]
 8004f24:	b29a      	uxth	r2, r3
 8004f26:	23c8      	movs	r3, #200	; 0xc8
 8004f28:	498f      	ldr	r1, [pc, #572]	; (8005168 <ProcessReceivedCommand+0xa10>)
 8004f2a:	4891      	ldr	r0, [pc, #580]	; (8005170 <ProcessReceivedCommand+0xa18>)
 8004f2c:	f004 fe7d 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004f30:	220f      	movs	r2, #15
 8004f32:	2100      	movs	r1, #0
 8004f34:	488c      	ldr	r0, [pc, #560]	; (8005168 <ProcessReceivedCommand+0xa10>)
 8004f36:	f005 fed1 	bl	800acdc <memset>
				break;
 8004f3a:	f000 bc9d 	b.w	8005878 <ProcessReceivedCommand+0x1120>
			}

		case 14: // Start Simulating
			if (StartRunning) // Setting is not available while running
 8004f3e:	4b84      	ldr	r3, [pc, #528]	; (8005150 <ProcessReceivedCommand+0x9f8>)
 8004f40:	781b      	ldrb	r3, [r3, #0]
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	f040 846d 	bne.w	8005822 <ProcessReceivedCommand+0x10ca>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // Start Simulation
 8004f48:	4b82      	ldr	r3, [pc, #520]	; (8005154 <ProcessReceivedCommand+0x9fc>)
 8004f4a:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f4e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f52:	eef4 7a47 	vcmp.f32	s15, s14
 8004f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f5a:	d10f      	bne.n	8004f7c <ProcessReceivedCommand+0x824>
				{
					HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8004f5c:	2200      	movs	r2, #0
 8004f5e:	2110      	movs	r1, #16
 8004f60:	4884      	ldr	r0, [pc, #528]	; (8005174 <ProcessReceivedCommand+0xa1c>)
 8004f62:	f003 fab9 	bl	80084d8 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8004f66:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f6a:	f002 fc3b 	bl	80077e4 <HAL_Delay>
					InitializeSimulating (ExperimentMode);
 8004f6e:	4b82      	ldr	r3, [pc, #520]	; (8005178 <ProcessReceivedCommand+0xa20>)
 8004f70:	781b      	ldrb	r3, [r3, #0]
 8004f72:	4618      	mov	r0, r3
 8004f74:	f7fd f88c 	bl	8002090 <InitializeSimulating>
					break;
 8004f78:	f000 bc7e 	b.w	8005878 <ProcessReceivedCommand+0x1120>
				}
				else // Stop Simulation
				{
					StopSimulating();
 8004f7c:	f7ff fa62 	bl	8004444 <StopSimulating>
				}
			}
			break;
 8004f80:	f000 bc7a 	b.w	8005878 <ProcessReceivedCommand+0x1120>

		case 16: // Set SampleTime
			if (StartRunning) // When the experiment is running, disable this fcn
 8004f84:	4b72      	ldr	r3, [pc, #456]	; (8005150 <ProcessReceivedCommand+0x9f8>)
 8004f86:	781b      	ldrb	r3, [r3, #0]
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	f040 844c 	bne.w	8005826 <ProcessReceivedCommand+0x10ce>
			{
				break;
			}
			else
			{
				SampleTime = MotionCode[1];
 8004f8e:	4b71      	ldr	r3, [pc, #452]	; (8005154 <ProcessReceivedCommand+0x9fc>)
 8004f90:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f94:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f98:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8004f9c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8004fa0:	b2da      	uxtb	r2, r3
 8004fa2:	4b76      	ldr	r3, [pc, #472]	; (800517c <ProcessReceivedCommand+0xa24>)
 8004fa4:	701a      	strb	r2, [r3, #0]
				if (SampleTime<= 2) // ms Set value range, 2:100ms
 8004fa6:	4b75      	ldr	r3, [pc, #468]	; (800517c <ProcessReceivedCommand+0xa24>)
 8004fa8:	781b      	ldrb	r3, [r3, #0]
 8004faa:	2b02      	cmp	r3, #2
 8004fac:	d802      	bhi.n	8004fb4 <ProcessReceivedCommand+0x85c>
				{
					SampleTime = 2;
 8004fae:	4b73      	ldr	r3, [pc, #460]	; (800517c <ProcessReceivedCommand+0xa24>)
 8004fb0:	2202      	movs	r2, #2
 8004fb2:	701a      	strb	r2, [r3, #0]
				}
				if (SampleTime >= 100) // ms
 8004fb4:	4b71      	ldr	r3, [pc, #452]	; (800517c <ProcessReceivedCommand+0xa24>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b63      	cmp	r3, #99	; 0x63
 8004fba:	d902      	bls.n	8004fc2 <ProcessReceivedCommand+0x86a>
				{
					SampleTime = 100;
 8004fbc:	4b6f      	ldr	r3, [pc, #444]	; (800517c <ProcessReceivedCommand+0xa24>)
 8004fbe:	2264      	movs	r2, #100	; 0x64
 8004fc0:	701a      	strb	r2, [r3, #0]
				}
				//char SammpleTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r16/%de",SampleTime);
 8004fc2:	4b6e      	ldr	r3, [pc, #440]	; (800517c <ProcessReceivedCommand+0xa24>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	461a      	mov	r2, r3
 8004fc8:	496d      	ldr	r1, [pc, #436]	; (8005180 <ProcessReceivedCommand+0xa28>)
 8004fca:	4867      	ldr	r0, [pc, #412]	; (8005168 <ProcessReceivedCommand+0xa10>)
 8004fcc:	f006 fd0e 	bl	800b9ec <siprintf>
 8004fd0:	4603      	mov	r3, r0
 8004fd2:	b2da      	uxtb	r2, r3
 8004fd4:	4b65      	ldr	r3, [pc, #404]	; (800516c <ProcessReceivedCommand+0xa14>)
 8004fd6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004fd8:	4b64      	ldr	r3, [pc, #400]	; (800516c <ProcessReceivedCommand+0xa14>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	b29a      	uxth	r2, r3
 8004fde:	23c8      	movs	r3, #200	; 0xc8
 8004fe0:	4961      	ldr	r1, [pc, #388]	; (8005168 <ProcessReceivedCommand+0xa10>)
 8004fe2:	4863      	ldr	r0, [pc, #396]	; (8005170 <ProcessReceivedCommand+0xa18>)
 8004fe4:	f004 fe21 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004fe8:	220f      	movs	r2, #15
 8004fea:	2100      	movs	r1, #0
 8004fec:	485e      	ldr	r0, [pc, #376]	; (8005168 <ProcessReceivedCommand+0xa10>)
 8004fee:	f005 fe75 	bl	800acdc <memset>
				break;
 8004ff2:	f000 bc41 	b.w	8005878 <ProcessReceivedCommand+0x1120>
			}

		case 17: // Reset MCU
			HAL_NVIC_SystemReset();
 8004ff6:	f002 fd34 	bl	8007a62 <HAL_NVIC_SystemReset>
			break;
 8004ffa:	f000 bc3d 	b.w	8005878 <ProcessReceivedCommand+0x1120>
		case 18: // Servo Enable on/off
			if (MotionCode[1] == 1) // Servo Enable ON
 8004ffe:	4b55      	ldr	r3, [pc, #340]	; (8005154 <ProcessReceivedCommand+0x9fc>)
 8005000:	edd3 7a01 	vldr	s15, [r3, #4]
 8005004:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005008:	eef4 7a47 	vcmp.f32	s15, s14
 800500c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005010:	d106      	bne.n	8005020 <ProcessReceivedCommand+0x8c8>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Servo enable on
 8005012:	2201      	movs	r2, #1
 8005014:	2110      	movs	r1, #16
 8005016:	4857      	ldr	r0, [pc, #348]	; (8005174 <ProcessReceivedCommand+0xa1c>)
 8005018:	f003 fa5e 	bl	80084d8 <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
			break;
 800501c:	f000 bc2c 	b.w	8005878 <ProcessReceivedCommand+0x1120>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8005020:	2200      	movs	r2, #0
 8005022:	2110      	movs	r1, #16
 8005024:	4853      	ldr	r0, [pc, #332]	; (8005174 <ProcessReceivedCommand+0xa1c>)
 8005026:	f003 fa57 	bl	80084d8 <HAL_GPIO_WritePin>
			break;
 800502a:	f000 bc25 	b.w	8005878 <ProcessReceivedCommand+0x1120>
		case 20: // Set Step Pulse Cmd

			break; // unused

		case 27: // Set Running Mode
			if(StartRunning) // Setting is not available while running
 800502e:	4b48      	ldr	r3, [pc, #288]	; (8005150 <ProcessReceivedCommand+0x9f8>)
 8005030:	781b      	ldrb	r3, [r3, #0]
 8005032:	2b00      	cmp	r3, #0
 8005034:	f040 83f9 	bne.w	800582a <ProcessReceivedCommand+0x10d2>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // RunningMode = true => Automatic Running
 8005038:	4b46      	ldr	r3, [pc, #280]	; (8005154 <ProcessReceivedCommand+0x9fc>)
 800503a:	edd3 7a01 	vldr	s15, [r3, #4]
 800503e:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005042:	eef4 7a47 	vcmp.f32	s15, s14
 8005046:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800504a:	d103      	bne.n	8005054 <ProcessReceivedCommand+0x8fc>
				{
					RunningMode = true; // Automatic
 800504c:	4b4d      	ldr	r3, [pc, #308]	; (8005184 <ProcessReceivedCommand+0xa2c>)
 800504e:	2201      	movs	r2, #1
 8005050:	701a      	strb	r2, [r3, #0]
 8005052:	e002      	b.n	800505a <ProcessReceivedCommand+0x902>
				}
				else
				{
					RunningMode = false; // Manual
 8005054:	4b4b      	ldr	r3, [pc, #300]	; (8005184 <ProcessReceivedCommand+0xa2c>)
 8005056:	2200      	movs	r2, #0
 8005058:	701a      	strb	r2, [r3, #0]
				}
				//char SammpleTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"g27/%de",RunningMode);
 800505a:	4b4a      	ldr	r3, [pc, #296]	; (8005184 <ProcessReceivedCommand+0xa2c>)
 800505c:	781b      	ldrb	r3, [r3, #0]
 800505e:	461a      	mov	r2, r3
 8005060:	4949      	ldr	r1, [pc, #292]	; (8005188 <ProcessReceivedCommand+0xa30>)
 8005062:	4841      	ldr	r0, [pc, #260]	; (8005168 <ProcessReceivedCommand+0xa10>)
 8005064:	f006 fcc2 	bl	800b9ec <siprintf>
 8005068:	4603      	mov	r3, r0
 800506a:	b2da      	uxtb	r2, r3
 800506c:	4b3f      	ldr	r3, [pc, #252]	; (800516c <ProcessReceivedCommand+0xa14>)
 800506e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8005070:	4b3e      	ldr	r3, [pc, #248]	; (800516c <ProcessReceivedCommand+0xa14>)
 8005072:	781b      	ldrb	r3, [r3, #0]
 8005074:	b29a      	uxth	r2, r3
 8005076:	23c8      	movs	r3, #200	; 0xc8
 8005078:	493b      	ldr	r1, [pc, #236]	; (8005168 <ProcessReceivedCommand+0xa10>)
 800507a:	483d      	ldr	r0, [pc, #244]	; (8005170 <ProcessReceivedCommand+0xa18>)
 800507c:	f004 fdd5 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005080:	220f      	movs	r2, #15
 8005082:	2100      	movs	r1, #0
 8005084:	4838      	ldr	r0, [pc, #224]	; (8005168 <ProcessReceivedCommand+0xa10>)
 8005086:	f005 fe29 	bl	800acdc <memset>
				break;
 800508a:	e3f5      	b.n	8005878 <ProcessReceivedCommand+0x1120>
			}

		case 28: // Stop jog move up/down in Position Jog control;
			if (StartRunning) // Setting is not available while running
 800508c:	4b30      	ldr	r3, [pc, #192]	; (8005150 <ProcessReceivedCommand+0x9f8>)
 800508e:	781b      	ldrb	r3, [r3, #0]
 8005090:	2b00      	cmp	r3, #0
 8005092:	f040 83cc 	bne.w	800582e <ProcessReceivedCommand+0x10d6>
			{
				break;
			}
			else
			{
				StopPulseGenerating();
 8005096:	f7fc fca9 	bl	80019ec <StopPulseGenerating>
				break;
 800509a:	e3ed      	b.n	8005878 <ProcessReceivedCommand+0x1120>
			}

		case 31: // Set Experiment Mode
			if (StartRunning) // Setting is not available while running
 800509c:	4b2c      	ldr	r3, [pc, #176]	; (8005150 <ProcessReceivedCommand+0x9f8>)
 800509e:	781b      	ldrb	r3, [r3, #0]
 80050a0:	2b00      	cmp	r3, #0
 80050a2:	f040 83c6 	bne.w	8005832 <ProcessReceivedCommand+0x10da>
			{
				break;
			}
			else
			{
				ExperimentMode = MotionCode[1]; // 1=Dropping Mode;2 = Pulling; 3= Pulling->Dropping
 80050a6:	4b2b      	ldr	r3, [pc, #172]	; (8005154 <ProcessReceivedCommand+0x9fc>)
 80050a8:	edd3 7a01 	vldr	s15, [r3, #4]
 80050ac:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80050b0:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 80050b4:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 80050b8:	b2da      	uxtb	r2, r3
 80050ba:	4b2f      	ldr	r3, [pc, #188]	; (8005178 <ProcessReceivedCommand+0xa20>)
 80050bc:	701a      	strb	r2, [r3, #0]
				//char SetModeBuff[8];
				TxPCLen = sprintf(ResponseMess,"m%de",ExperimentMode);
 80050be:	4b2e      	ldr	r3, [pc, #184]	; (8005178 <ProcessReceivedCommand+0xa20>)
 80050c0:	781b      	ldrb	r3, [r3, #0]
 80050c2:	461a      	mov	r2, r3
 80050c4:	4931      	ldr	r1, [pc, #196]	; (800518c <ProcessReceivedCommand+0xa34>)
 80050c6:	4828      	ldr	r0, [pc, #160]	; (8005168 <ProcessReceivedCommand+0xa10>)
 80050c8:	f006 fc90 	bl	800b9ec <siprintf>
 80050cc:	4603      	mov	r3, r0
 80050ce:	b2da      	uxtb	r2, r3
 80050d0:	4b26      	ldr	r3, [pc, #152]	; (800516c <ProcessReceivedCommand+0xa14>)
 80050d2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80050d4:	4b25      	ldr	r3, [pc, #148]	; (800516c <ProcessReceivedCommand+0xa14>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	b29a      	uxth	r2, r3
 80050da:	2364      	movs	r3, #100	; 0x64
 80050dc:	4922      	ldr	r1, [pc, #136]	; (8005168 <ProcessReceivedCommand+0xa10>)
 80050de:	4824      	ldr	r0, [pc, #144]	; (8005170 <ProcessReceivedCommand+0xa18>)
 80050e0:	f004 fda3 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80050e4:	220f      	movs	r2, #15
 80050e6:	2100      	movs	r1, #0
 80050e8:	481f      	ldr	r0, [pc, #124]	; (8005168 <ProcessReceivedCommand+0xa10>)
 80050ea:	f005 fdf7 	bl	800acdc <memset>
				break;
 80050ee:	e3c3      	b.n	8005878 <ProcessReceivedCommand+0x1120>
			}

		case 32: // Set Pulling Accelerating Distance; Pulling Mode
			if (StartRunning) // Setting is not available while running
 80050f0:	4b17      	ldr	r3, [pc, #92]	; (8005150 <ProcessReceivedCommand+0x9f8>)
 80050f2:	781b      	ldrb	r3, [r3, #0]
 80050f4:	2b00      	cmp	r3, #0
 80050f6:	f040 839e 	bne.w	8005836 <ProcessReceivedCommand+0x10de>
			{
				break;
			}
			else
			{
				PullingPoint1 = MotionCode[1];
 80050fa:	4b16      	ldr	r3, [pc, #88]	; (8005154 <ProcessReceivedCommand+0x9fc>)
 80050fc:	685b      	ldr	r3, [r3, #4]
 80050fe:	4a24      	ldr	r2, [pc, #144]	; (8005190 <ProcessReceivedCommand+0xa38>)
 8005100:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8005102:	4b24      	ldr	r3, [pc, #144]	; (8005194 <ProcessReceivedCommand+0xa3c>)
 8005104:	2200      	movs	r2, #0
 8005106:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"r32/%.1fe",PullingPoint1);
 8005108:	4b21      	ldr	r3, [pc, #132]	; (8005190 <ProcessReceivedCommand+0xa38>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f7fb fa1b 	bl	8000548 <__aeabi_f2d>
 8005112:	4602      	mov	r2, r0
 8005114:	460b      	mov	r3, r1
 8005116:	4920      	ldr	r1, [pc, #128]	; (8005198 <ProcessReceivedCommand+0xa40>)
 8005118:	4813      	ldr	r0, [pc, #76]	; (8005168 <ProcessReceivedCommand+0xa10>)
 800511a:	f006 fc67 	bl	800b9ec <siprintf>
 800511e:	4603      	mov	r3, r0
 8005120:	b2da      	uxtb	r2, r3
 8005122:	4b12      	ldr	r3, [pc, #72]	; (800516c <ProcessReceivedCommand+0xa14>)
 8005124:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005126:	4b11      	ldr	r3, [pc, #68]	; (800516c <ProcessReceivedCommand+0xa14>)
 8005128:	781b      	ldrb	r3, [r3, #0]
 800512a:	b29a      	uxth	r2, r3
 800512c:	2364      	movs	r3, #100	; 0x64
 800512e:	490e      	ldr	r1, [pc, #56]	; (8005168 <ProcessReceivedCommand+0xa10>)
 8005130:	480f      	ldr	r0, [pc, #60]	; (8005170 <ProcessReceivedCommand+0xa18>)
 8005132:	f004 fd7a 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005136:	220f      	movs	r2, #15
 8005138:	2100      	movs	r1, #0
 800513a:	480b      	ldr	r0, [pc, #44]	; (8005168 <ProcessReceivedCommand+0xa10>)
 800513c:	f005 fdce 	bl	800acdc <memset>
				break;
 8005140:	e39a      	b.n	8005878 <ProcessReceivedCommand+0x1120>
 8005142:	bf00      	nop
 8005144:	f3af 8000 	nop.w
 8005148:	9999999a 	.word	0x9999999a
 800514c:	3fb99999 	.word	0x3fb99999
 8005150:	20000432 	.word	0x20000432
 8005154:	2000051c 	.word	0x2000051c
 8005158:	20000469 	.word	0x20000469
 800515c:	40080000 	.word	0x40080000
 8005160:	2000046c 	.word	0x2000046c
 8005164:	0800f7b8 	.word	0x0800f7b8
 8005168:	2000041c 	.word	0x2000041c
 800516c:	20000414 	.word	0x20000414
 8005170:	200002f8 	.word	0x200002f8
 8005174:	40020800 	.word	0x40020800
 8005178:	20000005 	.word	0x20000005
 800517c:	20000468 	.word	0x20000468
 8005180:	0800f7c0 	.word	0x0800f7c0
 8005184:	2000043e 	.word	0x2000043e
 8005188:	0800f7c8 	.word	0x0800f7c8
 800518c:	0800f7d0 	.word	0x0800f7d0
 8005190:	20000494 	.word	0x20000494
 8005194:	2000043d 	.word	0x2000043d
 8005198:	0800f7d8 	.word	0x0800f7d8
			}

		case 33: // Set Pulling AccRef in Pulling Mode
			if (StartRunning)// Setting is not available while running
 800519c:	4ba4      	ldr	r3, [pc, #656]	; (8005430 <ProcessReceivedCommand+0xcd8>)
 800519e:	781b      	ldrb	r3, [r3, #0]
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	f040 834a 	bne.w	800583a <ProcessReceivedCommand+0x10e2>
			{
				break;
			}
			else
			{
				PullingPoint2 = MotionCode[1];
 80051a6:	4ba3      	ldr	r3, [pc, #652]	; (8005434 <ProcessReceivedCommand+0xcdc>)
 80051a8:	685b      	ldr	r3, [r3, #4]
 80051aa:	4aa3      	ldr	r2, [pc, #652]	; (8005438 <ProcessReceivedCommand+0xce0>)
 80051ac:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80051ae:	4ba3      	ldr	r3, [pc, #652]	; (800543c <ProcessReceivedCommand+0xce4>)
 80051b0:	2200      	movs	r2, #0
 80051b2:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r33/%.2fe",PullingPoint2);
 80051b4:	4ba0      	ldr	r3, [pc, #640]	; (8005438 <ProcessReceivedCommand+0xce0>)
 80051b6:	681b      	ldr	r3, [r3, #0]
 80051b8:	4618      	mov	r0, r3
 80051ba:	f7fb f9c5 	bl	8000548 <__aeabi_f2d>
 80051be:	4602      	mov	r2, r0
 80051c0:	460b      	mov	r3, r1
 80051c2:	499f      	ldr	r1, [pc, #636]	; (8005440 <ProcessReceivedCommand+0xce8>)
 80051c4:	489f      	ldr	r0, [pc, #636]	; (8005444 <ProcessReceivedCommand+0xcec>)
 80051c6:	f006 fc11 	bl	800b9ec <siprintf>
 80051ca:	4603      	mov	r3, r0
 80051cc:	b2da      	uxtb	r2, r3
 80051ce:	4b9e      	ldr	r3, [pc, #632]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 80051d0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80051d2:	4b9d      	ldr	r3, [pc, #628]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 80051d4:	781b      	ldrb	r3, [r3, #0]
 80051d6:	b29a      	uxth	r2, r3
 80051d8:	2364      	movs	r3, #100	; 0x64
 80051da:	499a      	ldr	r1, [pc, #616]	; (8005444 <ProcessReceivedCommand+0xcec>)
 80051dc:	489b      	ldr	r0, [pc, #620]	; (800544c <ProcessReceivedCommand+0xcf4>)
 80051de:	f004 fd24 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80051e2:	220f      	movs	r2, #15
 80051e4:	2100      	movs	r1, #0
 80051e6:	4897      	ldr	r0, [pc, #604]	; (8005444 <ProcessReceivedCommand+0xcec>)
 80051e8:	f005 fd78 	bl	800acdc <memset>
				break;
 80051ec:	e344      	b.n	8005878 <ProcessReceivedCommand+0x1120>
			}

		case 35: // Set PullingPoint3
			if (StartRunning)// Setting is not available while running
 80051ee:	4b90      	ldr	r3, [pc, #576]	; (8005430 <ProcessReceivedCommand+0xcd8>)
 80051f0:	781b      	ldrb	r3, [r3, #0]
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	f040 8323 	bne.w	800583e <ProcessReceivedCommand+0x10e6>
			{
				break;
			}
			else
			{
				PullingPoint3 = MotionCode[1];
 80051f8:	4b8e      	ldr	r3, [pc, #568]	; (8005434 <ProcessReceivedCommand+0xcdc>)
 80051fa:	685b      	ldr	r3, [r3, #4]
 80051fc:	4a94      	ldr	r2, [pc, #592]	; (8005450 <ProcessReceivedCommand+0xcf8>)
 80051fe:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8005200:	4b8e      	ldr	r3, [pc, #568]	; (800543c <ProcessReceivedCommand+0xce4>)
 8005202:	2200      	movs	r2, #0
 8005204:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r35/%.2fe",PullingPoint3);
 8005206:	4b92      	ldr	r3, [pc, #584]	; (8005450 <ProcessReceivedCommand+0xcf8>)
 8005208:	681b      	ldr	r3, [r3, #0]
 800520a:	4618      	mov	r0, r3
 800520c:	f7fb f99c 	bl	8000548 <__aeabi_f2d>
 8005210:	4602      	mov	r2, r0
 8005212:	460b      	mov	r3, r1
 8005214:	498f      	ldr	r1, [pc, #572]	; (8005454 <ProcessReceivedCommand+0xcfc>)
 8005216:	488b      	ldr	r0, [pc, #556]	; (8005444 <ProcessReceivedCommand+0xcec>)
 8005218:	f006 fbe8 	bl	800b9ec <siprintf>
 800521c:	4603      	mov	r3, r0
 800521e:	b2da      	uxtb	r2, r3
 8005220:	4b89      	ldr	r3, [pc, #548]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 8005222:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005224:	4b88      	ldr	r3, [pc, #544]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b29a      	uxth	r2, r3
 800522a:	2364      	movs	r3, #100	; 0x64
 800522c:	4985      	ldr	r1, [pc, #532]	; (8005444 <ProcessReceivedCommand+0xcec>)
 800522e:	4887      	ldr	r0, [pc, #540]	; (800544c <ProcessReceivedCommand+0xcf4>)
 8005230:	f004 fcfb 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005234:	220f      	movs	r2, #15
 8005236:	2100      	movs	r1, #0
 8005238:	4882      	ldr	r0, [pc, #520]	; (8005444 <ProcessReceivedCommand+0xcec>)
 800523a:	f005 fd4f 	bl	800acdc <memset>
			}
			break;
 800523e:	e31b      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 36: // Set Pulling Acc1
			if (StartRunning)// Setting is not available while running
 8005240:	4b7b      	ldr	r3, [pc, #492]	; (8005430 <ProcessReceivedCommand+0xcd8>)
 8005242:	781b      	ldrb	r3, [r3, #0]
 8005244:	2b00      	cmp	r3, #0
 8005246:	f040 82fc 	bne.w	8005842 <ProcessReceivedCommand+0x10ea>
			{
				break;
			}
			else
			{
				PullingAcc1 = MotionCode[1];
 800524a:	4b7a      	ldr	r3, [pc, #488]	; (8005434 <ProcessReceivedCommand+0xcdc>)
 800524c:	685b      	ldr	r3, [r3, #4]
 800524e:	4a82      	ldr	r2, [pc, #520]	; (8005458 <ProcessReceivedCommand+0xd00>)
 8005250:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8005252:	4b7a      	ldr	r3, [pc, #488]	; (800543c <ProcessReceivedCommand+0xce4>)
 8005254:	2200      	movs	r2, #0
 8005256:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"r36/%.2fe",PullingAcc1);
 8005258:	4b7f      	ldr	r3, [pc, #508]	; (8005458 <ProcessReceivedCommand+0xd00>)
 800525a:	681b      	ldr	r3, [r3, #0]
 800525c:	4618      	mov	r0, r3
 800525e:	f7fb f973 	bl	8000548 <__aeabi_f2d>
 8005262:	4602      	mov	r2, r0
 8005264:	460b      	mov	r3, r1
 8005266:	497d      	ldr	r1, [pc, #500]	; (800545c <ProcessReceivedCommand+0xd04>)
 8005268:	4876      	ldr	r0, [pc, #472]	; (8005444 <ProcessReceivedCommand+0xcec>)
 800526a:	f006 fbbf 	bl	800b9ec <siprintf>
 800526e:	4603      	mov	r3, r0
 8005270:	b2da      	uxtb	r2, r3
 8005272:	4b75      	ldr	r3, [pc, #468]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 8005274:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005276:	4b74      	ldr	r3, [pc, #464]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 8005278:	781b      	ldrb	r3, [r3, #0]
 800527a:	b29a      	uxth	r2, r3
 800527c:	2364      	movs	r3, #100	; 0x64
 800527e:	4971      	ldr	r1, [pc, #452]	; (8005444 <ProcessReceivedCommand+0xcec>)
 8005280:	4872      	ldr	r0, [pc, #456]	; (800544c <ProcessReceivedCommand+0xcf4>)
 8005282:	f004 fcd2 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005286:	220f      	movs	r2, #15
 8005288:	2100      	movs	r1, #0
 800528a:	486e      	ldr	r0, [pc, #440]	; (8005444 <ProcessReceivedCommand+0xcec>)
 800528c:	f005 fd26 	bl	800acdc <memset>
			}
			break;
 8005290:	e2f2      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 37: // Set Stopping Time
			if (StartRunning)// Setting is not available while running
 8005292:	4b67      	ldr	r3, [pc, #412]	; (8005430 <ProcessReceivedCommand+0xcd8>)
 8005294:	781b      	ldrb	r3, [r3, #0]
 8005296:	2b00      	cmp	r3, #0
 8005298:	f040 82d5 	bne.w	8005846 <ProcessReceivedCommand+0x10ee>
			{
				break;
			}
			else
			{
				StoppingTime = MotionCode[1];
 800529c:	4b65      	ldr	r3, [pc, #404]	; (8005434 <ProcessReceivedCommand+0xcdc>)
 800529e:	edd3 7a01 	vldr	s15, [r3, #4]
 80052a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80052a6:	ee17 3a90 	vmov	r3, s15
 80052aa:	b29a      	uxth	r2, r3
 80052ac:	4b6c      	ldr	r3, [pc, #432]	; (8005460 <ProcessReceivedCommand+0xd08>)
 80052ae:	801a      	strh	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r37/%de",StoppingTime);
 80052b0:	4b6b      	ldr	r3, [pc, #428]	; (8005460 <ProcessReceivedCommand+0xd08>)
 80052b2:	881b      	ldrh	r3, [r3, #0]
 80052b4:	461a      	mov	r2, r3
 80052b6:	496b      	ldr	r1, [pc, #428]	; (8005464 <ProcessReceivedCommand+0xd0c>)
 80052b8:	4862      	ldr	r0, [pc, #392]	; (8005444 <ProcessReceivedCommand+0xcec>)
 80052ba:	f006 fb97 	bl	800b9ec <siprintf>
 80052be:	4603      	mov	r3, r0
 80052c0:	b2da      	uxtb	r2, r3
 80052c2:	4b61      	ldr	r3, [pc, #388]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 80052c4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80052c6:	4b60      	ldr	r3, [pc, #384]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 80052c8:	781b      	ldrb	r3, [r3, #0]
 80052ca:	b29a      	uxth	r2, r3
 80052cc:	23c8      	movs	r3, #200	; 0xc8
 80052ce:	495d      	ldr	r1, [pc, #372]	; (8005444 <ProcessReceivedCommand+0xcec>)
 80052d0:	485e      	ldr	r0, [pc, #376]	; (800544c <ProcessReceivedCommand+0xcf4>)
 80052d2:	f004 fcaa 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80052d6:	220f      	movs	r2, #15
 80052d8:	2100      	movs	r1, #0
 80052da:	485a      	ldr	r0, [pc, #360]	; (8005444 <ProcessReceivedCommand+0xcec>)
 80052dc:	f005 fcfe 	bl	800acdc <memset>
				break;
 80052e0:	e2ca      	b.n	8005878 <ProcessReceivedCommand+0x1120>
			}
		case 38: // Homing task
			if (StartRunning)// Setting is not available while running
 80052e2:	4b53      	ldr	r3, [pc, #332]	; (8005430 <ProcessReceivedCommand+0xcd8>)
 80052e4:	781b      	ldrb	r3, [r3, #0]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	f040 82af 	bne.w	800584a <ProcessReceivedCommand+0x10f2>
			{
				break;
			}
			else
			{
				IsHoming = true;
 80052ec:	4b5e      	ldr	r3, [pc, #376]	; (8005468 <ProcessReceivedCommand+0xd10>)
 80052ee:	2201      	movs	r2, #1
 80052f0:	701a      	strb	r2, [r3, #0]
				Direction = false; // false = move up, true = move down
 80052f2:	4b5e      	ldr	r3, [pc, #376]	; (800546c <ProcessReceivedCommand+0xd14>)
 80052f4:	2200      	movs	r2, #0
 80052f6:	701a      	strb	r2, [r3, #0]
				PRIsToggled = true; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 80052f8:	4b5d      	ldr	r3, [pc, #372]	; (8005470 <ProcessReceivedCommand+0xd18>)
 80052fa:	2201      	movs	r2, #1
 80052fc:	701a      	strb	r2, [r3, #0]
				DisableSTOP(); // Disable the stop
 80052fe:	f7fb ffb3 	bl	8001268 <DisableSTOP>
				InitPulseGenerating();
 8005302:	f7fc fb97 	bl	8001a34 <InitPulseGenerating>
			}
			break;
 8005306:	e2b7      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 39: // Set Driver type, FDA7000 or ASDA A3
			if (StartRunning)// Setting is not available while running
 8005308:	4b49      	ldr	r3, [pc, #292]	; (8005430 <ProcessReceivedCommand+0xcd8>)
 800530a:	781b      	ldrb	r3, [r3, #0]
 800530c:	2b00      	cmp	r3, #0
 800530e:	f040 829e 	bne.w	800584e <ProcessReceivedCommand+0x10f6>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // FDA7000
 8005312:	4b48      	ldr	r3, [pc, #288]	; (8005434 <ProcessReceivedCommand+0xcdc>)
 8005314:	edd3 7a01 	vldr	s15, [r3, #4]
 8005318:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800531c:	eef4 7a47 	vcmp.f32	s15, s14
 8005320:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005324:	d10a      	bne.n	800533c <ProcessReceivedCommand+0xbe4>
				{
					MotorDriver = true;
 8005326:	4b53      	ldr	r3, [pc, #332]	; (8005474 <ProcessReceivedCommand+0xd1c>)
 8005328:	2201      	movs	r2, #1
 800532a:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 29; // For FDA7000, read 5 register => receive 25 bytes
 800532c:	4b52      	ldr	r3, [pc, #328]	; (8005478 <ProcessReceivedCommand+0xd20>)
 800532e:	221d      	movs	r2, #29
 8005330:	701a      	strb	r2, [r3, #0]
					EncoderResolution = HigenEncoderResolution;
 8005332:	4b52      	ldr	r3, [pc, #328]	; (800547c <ProcessReceivedCommand+0xd24>)
 8005334:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005338:	801a      	strh	r2, [r3, #0]
 800533a:	e009      	b.n	8005350 <ProcessReceivedCommand+0xbf8>
				}
				else // ASDA A3
				{
					MotorDriver = false;
 800533c:	4b4d      	ldr	r3, [pc, #308]	; (8005474 <ProcessReceivedCommand+0xd1c>)
 800533e:	2200      	movs	r2, #0
 8005340:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 17;
 8005342:	4b4d      	ldr	r3, [pc, #308]	; (8005478 <ProcessReceivedCommand+0xd20>)
 8005344:	2211      	movs	r2, #17
 8005346:	701a      	strb	r2, [r3, #0]
					EncoderResolution = AsdaEncoderResolution;
 8005348:	4b4c      	ldr	r3, [pc, #304]	; (800547c <ProcessReceivedCommand+0xd24>)
 800534a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800534e:	801a      	strh	r2, [r3, #0]
					// For ASDA Drier, read 1 register => receive 9 bytes
					// read 2 registers => receive 13 bytes
				}
				TxPCLen = sprintf(ResponseMess,"g39/%de",MotorDriver);
 8005350:	4b48      	ldr	r3, [pc, #288]	; (8005474 <ProcessReceivedCommand+0xd1c>)
 8005352:	781b      	ldrb	r3, [r3, #0]
 8005354:	461a      	mov	r2, r3
 8005356:	494a      	ldr	r1, [pc, #296]	; (8005480 <ProcessReceivedCommand+0xd28>)
 8005358:	483a      	ldr	r0, [pc, #232]	; (8005444 <ProcessReceivedCommand+0xcec>)
 800535a:	f006 fb47 	bl	800b9ec <siprintf>
 800535e:	4603      	mov	r3, r0
 8005360:	b2da      	uxtb	r2, r3
 8005362:	4b39      	ldr	r3, [pc, #228]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 8005364:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8005366:	4b38      	ldr	r3, [pc, #224]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 8005368:	781b      	ldrb	r3, [r3, #0]
 800536a:	b29a      	uxth	r2, r3
 800536c:	23c8      	movs	r3, #200	; 0xc8
 800536e:	4935      	ldr	r1, [pc, #212]	; (8005444 <ProcessReceivedCommand+0xcec>)
 8005370:	4836      	ldr	r0, [pc, #216]	; (800544c <ProcessReceivedCommand+0xcf4>)
 8005372:	f004 fc5a 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005376:	220f      	movs	r2, #15
 8005378:	2100      	movs	r1, #0
 800537a:	4832      	ldr	r0, [pc, #200]	; (8005444 <ProcessReceivedCommand+0xcec>)
 800537c:	f005 fcae 	bl	800acdc <memset>
			}
			break;
 8005380:	e27a      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 41: // Set Pulling Acc2
			if (StartRunning)// Setting is not available while running
 8005382:	4b2b      	ldr	r3, [pc, #172]	; (8005430 <ProcessReceivedCommand+0xcd8>)
 8005384:	781b      	ldrb	r3, [r3, #0]
 8005386:	2b00      	cmp	r3, #0
 8005388:	f040 8263 	bne.w	8005852 <ProcessReceivedCommand+0x10fa>
			{
				break;
			}
			else
			{
				PullingAcc2 = MotionCode[1];
 800538c:	4b29      	ldr	r3, [pc, #164]	; (8005434 <ProcessReceivedCommand+0xcdc>)
 800538e:	685b      	ldr	r3, [r3, #4]
 8005390:	4a3c      	ldr	r2, [pc, #240]	; (8005484 <ProcessReceivedCommand+0xd2c>)
 8005392:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8005394:	4b29      	ldr	r3, [pc, #164]	; (800543c <ProcessReceivedCommand+0xce4>)
 8005396:	2200      	movs	r2, #0
 8005398:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r41/%.2fe",PullingAcc2);
 800539a:	4b3a      	ldr	r3, [pc, #232]	; (8005484 <ProcessReceivedCommand+0xd2c>)
 800539c:	681b      	ldr	r3, [r3, #0]
 800539e:	4618      	mov	r0, r3
 80053a0:	f7fb f8d2 	bl	8000548 <__aeabi_f2d>
 80053a4:	4602      	mov	r2, r0
 80053a6:	460b      	mov	r3, r1
 80053a8:	4937      	ldr	r1, [pc, #220]	; (8005488 <ProcessReceivedCommand+0xd30>)
 80053aa:	4826      	ldr	r0, [pc, #152]	; (8005444 <ProcessReceivedCommand+0xcec>)
 80053ac:	f006 fb1e 	bl	800b9ec <siprintf>
 80053b0:	4603      	mov	r3, r0
 80053b2:	b2da      	uxtb	r2, r3
 80053b4:	4b24      	ldr	r3, [pc, #144]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 80053b6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80053b8:	4b23      	ldr	r3, [pc, #140]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 80053ba:	781b      	ldrb	r3, [r3, #0]
 80053bc:	b29a      	uxth	r2, r3
 80053be:	2364      	movs	r3, #100	; 0x64
 80053c0:	4920      	ldr	r1, [pc, #128]	; (8005444 <ProcessReceivedCommand+0xcec>)
 80053c2:	4822      	ldr	r0, [pc, #136]	; (800544c <ProcessReceivedCommand+0xcf4>)
 80053c4:	f004 fc31 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80053c8:	220f      	movs	r2, #15
 80053ca:	2100      	movs	r1, #0
 80053cc:	481d      	ldr	r0, [pc, #116]	; (8005444 <ProcessReceivedCommand+0xcec>)
 80053ce:	f005 fc85 	bl	800acdc <memset>
			}
			break;
 80053d2:	e251      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 42: // Set Distance Coefficient
			if (StartRunning)// Setting is not available while running
 80053d4:	4b16      	ldr	r3, [pc, #88]	; (8005430 <ProcessReceivedCommand+0xcd8>)
 80053d6:	781b      	ldrb	r3, [r3, #0]
 80053d8:	2b00      	cmp	r3, #0
 80053da:	d005      	beq.n	80053e8 <ProcessReceivedCommand+0xc90>
			{
				InitializeRunning(ExperimentMode);
 80053dc:	4b2b      	ldr	r3, [pc, #172]	; (800548c <ProcessReceivedCommand+0xd34>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	4618      	mov	r0, r3
 80053e2:	f7fc ff69 	bl	80022b8 <InitializeRunning>

				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 80053e6:	e247      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				DistCoeff = MotionCode[1];
 80053e8:	4b12      	ldr	r3, [pc, #72]	; (8005434 <ProcessReceivedCommand+0xcdc>)
 80053ea:	685b      	ldr	r3, [r3, #4]
 80053ec:	4a28      	ldr	r2, [pc, #160]	; (8005490 <ProcessReceivedCommand+0xd38>)
 80053ee:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80053f0:	4b12      	ldr	r3, [pc, #72]	; (800543c <ProcessReceivedCommand+0xce4>)
 80053f2:	2200      	movs	r2, #0
 80053f4:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
 80053f6:	4b26      	ldr	r3, [pc, #152]	; (8005490 <ProcessReceivedCommand+0xd38>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4618      	mov	r0, r3
 80053fc:	f7fb f8a4 	bl	8000548 <__aeabi_f2d>
 8005400:	4602      	mov	r2, r0
 8005402:	460b      	mov	r3, r1
 8005404:	4923      	ldr	r1, [pc, #140]	; (8005494 <ProcessReceivedCommand+0xd3c>)
 8005406:	480f      	ldr	r0, [pc, #60]	; (8005444 <ProcessReceivedCommand+0xcec>)
 8005408:	f006 faf0 	bl	800b9ec <siprintf>
 800540c:	4603      	mov	r3, r0
 800540e:	b2da      	uxtb	r2, r3
 8005410:	4b0d      	ldr	r3, [pc, #52]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 8005412:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005414:	4b0c      	ldr	r3, [pc, #48]	; (8005448 <ProcessReceivedCommand+0xcf0>)
 8005416:	781b      	ldrb	r3, [r3, #0]
 8005418:	b29a      	uxth	r2, r3
 800541a:	2364      	movs	r3, #100	; 0x64
 800541c:	4909      	ldr	r1, [pc, #36]	; (8005444 <ProcessReceivedCommand+0xcec>)
 800541e:	480b      	ldr	r0, [pc, #44]	; (800544c <ProcessReceivedCommand+0xcf4>)
 8005420:	f004 fc03 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005424:	220f      	movs	r2, #15
 8005426:	2100      	movs	r1, #0
 8005428:	4806      	ldr	r0, [pc, #24]	; (8005444 <ProcessReceivedCommand+0xcec>)
 800542a:	f005 fc57 	bl	800acdc <memset>
			break;
 800542e:	e223      	b.n	8005878 <ProcessReceivedCommand+0x1120>
 8005430:	20000432 	.word	0x20000432
 8005434:	2000051c 	.word	0x2000051c
 8005438:	20000498 	.word	0x20000498
 800543c:	2000043d 	.word	0x2000043d
 8005440:	0800f7e4 	.word	0x0800f7e4
 8005444:	2000041c 	.word	0x2000041c
 8005448:	20000414 	.word	0x20000414
 800544c:	200002f8 	.word	0x200002f8
 8005450:	2000049c 	.word	0x2000049c
 8005454:	0800f7f0 	.word	0x0800f7f0
 8005458:	20000480 	.word	0x20000480
 800545c:	0800f7fc 	.word	0x0800f7fc
 8005460:	20000008 	.word	0x20000008
 8005464:	0800f808 	.word	0x0800f808
 8005468:	2000043c 	.word	0x2000043c
 800546c:	20000434 	.word	0x20000434
 8005470:	2000043f 	.word	0x2000043f
 8005474:	20000003 	.word	0x20000003
 8005478:	20000000 	.word	0x20000000
 800547c:	2000000a 	.word	0x2000000a
 8005480:	0800f810 	.word	0x0800f810
 8005484:	20000484 	.word	0x20000484
 8005488:	0800f818 	.word	0x0800f818
 800548c:	20000005 	.word	0x20000005
 8005490:	2000053c 	.word	0x2000053c
 8005494:	0800f824 	.word	0x0800f824

		case 43: //Set PullingAcc3
			if (StartRunning)// Setting is not available while running
 8005498:	4b99      	ldr	r3, [pc, #612]	; (8005700 <ProcessReceivedCommand+0xfa8>)
 800549a:	781b      	ldrb	r3, [r3, #0]
 800549c:	2b00      	cmp	r3, #0
 800549e:	f040 81da 	bne.w	8005856 <ProcessReceivedCommand+0x10fe>
			{
				break;
			}
			else
			{
				PullingAcc3 = MotionCode[1];
 80054a2:	4b98      	ldr	r3, [pc, #608]	; (8005704 <ProcessReceivedCommand+0xfac>)
 80054a4:	685b      	ldr	r3, [r3, #4]
 80054a6:	4a98      	ldr	r2, [pc, #608]	; (8005708 <ProcessReceivedCommand+0xfb0>)
 80054a8:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80054aa:	4b98      	ldr	r3, [pc, #608]	; (800570c <ProcessReceivedCommand+0xfb4>)
 80054ac:	2200      	movs	r2, #0
 80054ae:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r43/%.2fe",PullingAcc3);
 80054b0:	4b95      	ldr	r3, [pc, #596]	; (8005708 <ProcessReceivedCommand+0xfb0>)
 80054b2:	681b      	ldr	r3, [r3, #0]
 80054b4:	4618      	mov	r0, r3
 80054b6:	f7fb f847 	bl	8000548 <__aeabi_f2d>
 80054ba:	4602      	mov	r2, r0
 80054bc:	460b      	mov	r3, r1
 80054be:	4994      	ldr	r1, [pc, #592]	; (8005710 <ProcessReceivedCommand+0xfb8>)
 80054c0:	4894      	ldr	r0, [pc, #592]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80054c2:	f006 fa93 	bl	800b9ec <siprintf>
 80054c6:	4603      	mov	r3, r0
 80054c8:	b2da      	uxtb	r2, r3
 80054ca:	4b93      	ldr	r3, [pc, #588]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 80054cc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80054ce:	4b92      	ldr	r3, [pc, #584]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 80054d0:	781b      	ldrb	r3, [r3, #0]
 80054d2:	b29a      	uxth	r2, r3
 80054d4:	2364      	movs	r3, #100	; 0x64
 80054d6:	498f      	ldr	r1, [pc, #572]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80054d8:	4890      	ldr	r0, [pc, #576]	; (800571c <ProcessReceivedCommand+0xfc4>)
 80054da:	f004 fba6 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80054de:	220f      	movs	r2, #15
 80054e0:	2100      	movs	r1, #0
 80054e2:	488c      	ldr	r0, [pc, #560]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80054e4:	f005 fbfa 	bl	800acdc <memset>
			}
			break;
 80054e8:	e1c6      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 46: // Set origin (home) position
			OriginPulse = MotorEncPulse;
 80054ea:	4b8d      	ldr	r3, [pc, #564]	; (8005720 <ProcessReceivedCommand+0xfc8>)
 80054ec:	681b      	ldr	r3, [r3, #0]
 80054ee:	4a8d      	ldr	r2, [pc, #564]	; (8005724 <ProcessReceivedCommand+0xfcc>)
 80054f0:	6013      	str	r3, [r2, #0]
			PositionPulseCmd = 0;
 80054f2:	4b8d      	ldr	r3, [pc, #564]	; (8005728 <ProcessReceivedCommand+0xfd0>)
 80054f4:	2200      	movs	r2, #0
 80054f6:	601a      	str	r2, [r3, #0]
			PulseSimuCount = 0;
 80054f8:	4b8c      	ldr	r3, [pc, #560]	; (800572c <ProcessReceivedCommand+0xfd4>)
 80054fa:	2200      	movs	r2, #0
 80054fc:	601a      	str	r2, [r3, #0]
			break;
 80054fe:	e1bb      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 47: // Set PullingAcc4
			if (StartRunning)// Setting is not available while running
 8005500:	4b7f      	ldr	r3, [pc, #508]	; (8005700 <ProcessReceivedCommand+0xfa8>)
 8005502:	781b      	ldrb	r3, [r3, #0]
 8005504:	2b00      	cmp	r3, #0
 8005506:	f040 81a8 	bne.w	800585a <ProcessReceivedCommand+0x1102>
			{
				break;
			}
			else
			{
				PullingAcc4 = MotionCode[1];
 800550a:	4b7e      	ldr	r3, [pc, #504]	; (8005704 <ProcessReceivedCommand+0xfac>)
 800550c:	685b      	ldr	r3, [r3, #4]
 800550e:	4a88      	ldr	r2, [pc, #544]	; (8005730 <ProcessReceivedCommand+0xfd8>)
 8005510:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8005512:	4b7e      	ldr	r3, [pc, #504]	; (800570c <ProcessReceivedCommand+0xfb4>)
 8005514:	2200      	movs	r2, #0
 8005516:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r47/%.4fe",PullingAcc4);
 8005518:	4b85      	ldr	r3, [pc, #532]	; (8005730 <ProcessReceivedCommand+0xfd8>)
 800551a:	681b      	ldr	r3, [r3, #0]
 800551c:	4618      	mov	r0, r3
 800551e:	f7fb f813 	bl	8000548 <__aeabi_f2d>
 8005522:	4602      	mov	r2, r0
 8005524:	460b      	mov	r3, r1
 8005526:	4983      	ldr	r1, [pc, #524]	; (8005734 <ProcessReceivedCommand+0xfdc>)
 8005528:	487a      	ldr	r0, [pc, #488]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 800552a:	f006 fa5f 	bl	800b9ec <siprintf>
 800552e:	4603      	mov	r3, r0
 8005530:	b2da      	uxtb	r2, r3
 8005532:	4b79      	ldr	r3, [pc, #484]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 8005534:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005536:	4b78      	ldr	r3, [pc, #480]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 8005538:	781b      	ldrb	r3, [r3, #0]
 800553a:	b29a      	uxth	r2, r3
 800553c:	2364      	movs	r3, #100	; 0x64
 800553e:	4975      	ldr	r1, [pc, #468]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 8005540:	4876      	ldr	r0, [pc, #472]	; (800571c <ProcessReceivedCommand+0xfc4>)
 8005542:	f004 fb72 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005546:	220f      	movs	r2, #15
 8005548:	2100      	movs	r1, #0
 800554a:	4872      	ldr	r0, [pc, #456]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 800554c:	f005 fbc6 	bl	800acdc <memset>
			}
			break;
 8005550:	e192      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 48: // turn on/off the software upper limit
			if (StartRunning)// Setting is not available while running
 8005552:	4b6b      	ldr	r3, [pc, #428]	; (8005700 <ProcessReceivedCommand+0xfa8>)
 8005554:	781b      	ldrb	r3, [r3, #0]
 8005556:	2b00      	cmp	r3, #0
 8005558:	f040 8181 	bne.w	800585e <ProcessReceivedCommand+0x1106>
			{
				break;
			}
			else
			{
				if(MotionCode[1] == 1) // turn on software limit
 800555c:	4b69      	ldr	r3, [pc, #420]	; (8005704 <ProcessReceivedCommand+0xfac>)
 800555e:	edd3 7a01 	vldr	s15, [r3, #4]
 8005562:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8005566:	eef4 7a47 	vcmp.f32	s15, s14
 800556a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800556e:	d103      	bne.n	8005578 <ProcessReceivedCommand+0xe20>
				{
					SoftWareLimit = true;
 8005570:	4b71      	ldr	r3, [pc, #452]	; (8005738 <ProcessReceivedCommand+0xfe0>)
 8005572:	2201      	movs	r2, #1
 8005574:	701a      	strb	r2, [r3, #0]
 8005576:	e002      	b.n	800557e <ProcessReceivedCommand+0xe26>
				}
				else // Set to Open-Loop control
				{
					SoftWareLimit = false;
 8005578:	4b6f      	ldr	r3, [pc, #444]	; (8005738 <ProcessReceivedCommand+0xfe0>)
 800557a:	2200      	movs	r2, #0
 800557c:	701a      	strb	r2, [r3, #0]
				}
				TxPCLen = sprintf(ResponseMess,"g48/%de",SoftWareLimit);
 800557e:	4b6e      	ldr	r3, [pc, #440]	; (8005738 <ProcessReceivedCommand+0xfe0>)
 8005580:	781b      	ldrb	r3, [r3, #0]
 8005582:	461a      	mov	r2, r3
 8005584:	496d      	ldr	r1, [pc, #436]	; (800573c <ProcessReceivedCommand+0xfe4>)
 8005586:	4863      	ldr	r0, [pc, #396]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 8005588:	f006 fa30 	bl	800b9ec <siprintf>
 800558c:	4603      	mov	r3, r0
 800558e:	b2da      	uxtb	r2, r3
 8005590:	4b61      	ldr	r3, [pc, #388]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 8005592:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005594:	4b60      	ldr	r3, [pc, #384]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	b29a      	uxth	r2, r3
 800559a:	2364      	movs	r3, #100	; 0x64
 800559c:	495d      	ldr	r1, [pc, #372]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 800559e:	485f      	ldr	r0, [pc, #380]	; (800571c <ProcessReceivedCommand+0xfc4>)
 80055a0:	f004 fb43 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80055a4:	220f      	movs	r2, #15
 80055a6:	2100      	movs	r1, #0
 80055a8:	485a      	ldr	r0, [pc, #360]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80055aa:	f005 fb97 	bl	800acdc <memset>
			}
			break;
 80055ae:	e163      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 51: // Set PullingAcc5
			if (StartRunning)// Setting is not available while running
 80055b0:	4b53      	ldr	r3, [pc, #332]	; (8005700 <ProcessReceivedCommand+0xfa8>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b00      	cmp	r3, #0
 80055b6:	f040 8154 	bne.w	8005862 <ProcessReceivedCommand+0x110a>
			{
				break;
			}
			else
			{
				PullingAcc5 = MotionCode[1];
 80055ba:	4b52      	ldr	r3, [pc, #328]	; (8005704 <ProcessReceivedCommand+0xfac>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	4a60      	ldr	r2, [pc, #384]	; (8005740 <ProcessReceivedCommand+0xfe8>)
 80055c0:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80055c2:	4b52      	ldr	r3, [pc, #328]	; (800570c <ProcessReceivedCommand+0xfb4>)
 80055c4:	2200      	movs	r2, #0
 80055c6:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r51/%.2fe",PullingAcc5);
 80055c8:	4b5d      	ldr	r3, [pc, #372]	; (8005740 <ProcessReceivedCommand+0xfe8>)
 80055ca:	681b      	ldr	r3, [r3, #0]
 80055cc:	4618      	mov	r0, r3
 80055ce:	f7fa ffbb 	bl	8000548 <__aeabi_f2d>
 80055d2:	4602      	mov	r2, r0
 80055d4:	460b      	mov	r3, r1
 80055d6:	495b      	ldr	r1, [pc, #364]	; (8005744 <ProcessReceivedCommand+0xfec>)
 80055d8:	484e      	ldr	r0, [pc, #312]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80055da:	f006 fa07 	bl	800b9ec <siprintf>
 80055de:	4603      	mov	r3, r0
 80055e0:	b2da      	uxtb	r2, r3
 80055e2:	4b4d      	ldr	r3, [pc, #308]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 80055e4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80055e6:	4b4c      	ldr	r3, [pc, #304]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 80055e8:	781b      	ldrb	r3, [r3, #0]
 80055ea:	b29a      	uxth	r2, r3
 80055ec:	2364      	movs	r3, #100	; 0x64
 80055ee:	4949      	ldr	r1, [pc, #292]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80055f0:	484a      	ldr	r0, [pc, #296]	; (800571c <ProcessReceivedCommand+0xfc4>)
 80055f2:	f004 fb1a 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80055f6:	220f      	movs	r2, #15
 80055f8:	2100      	movs	r1, #0
 80055fa:	4846      	ldr	r0, [pc, #280]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80055fc:	f005 fb6e 	bl	800acdc <memset>
			}
			break;
 8005600:	e13a      	b.n	8005878 <ProcessReceivedCommand+0x1120>

/// Set Dropping Params

		case 15: // Set DroppingAccel
			if (StartRunning)
 8005602:	4b3f      	ldr	r3, [pc, #252]	; (8005700 <ProcessReceivedCommand+0xfa8>)
 8005604:	781b      	ldrb	r3, [r3, #0]
 8005606:	2b00      	cmp	r3, #0
 8005608:	f040 812d 	bne.w	8005866 <ProcessReceivedCommand+0x110e>
			{
				break;
			}
			else
			{
				DroppingAccel = MotionCode[1];
 800560c:	4b3d      	ldr	r3, [pc, #244]	; (8005704 <ProcessReceivedCommand+0xfac>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	4a4d      	ldr	r2, [pc, #308]	; (8005748 <ProcessReceivedCommand+0xff0>)
 8005612:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8005614:	4b3d      	ldr	r3, [pc, #244]	; (800570c <ProcessReceivedCommand+0xfb4>)
 8005616:	2200      	movs	r2, #0
 8005618:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r15/%.3fe",DroppingAccel);
 800561a:	4b4b      	ldr	r3, [pc, #300]	; (8005748 <ProcessReceivedCommand+0xff0>)
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	4618      	mov	r0, r3
 8005620:	f7fa ff92 	bl	8000548 <__aeabi_f2d>
 8005624:	4602      	mov	r2, r0
 8005626:	460b      	mov	r3, r1
 8005628:	4948      	ldr	r1, [pc, #288]	; (800574c <ProcessReceivedCommand+0xff4>)
 800562a:	483a      	ldr	r0, [pc, #232]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 800562c:	f006 f9de 	bl	800b9ec <siprintf>
 8005630:	4603      	mov	r3, r0
 8005632:	b2da      	uxtb	r2, r3
 8005634:	4b38      	ldr	r3, [pc, #224]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 8005636:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8005638:	4b37      	ldr	r3, [pc, #220]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 800563a:	781b      	ldrb	r3, [r3, #0]
 800563c:	b29a      	uxth	r2, r3
 800563e:	23c8      	movs	r3, #200	; 0xc8
 8005640:	4934      	ldr	r1, [pc, #208]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 8005642:	4836      	ldr	r0, [pc, #216]	; (800571c <ProcessReceivedCommand+0xfc4>)
 8005644:	f004 faf1 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005648:	220f      	movs	r2, #15
 800564a:	2100      	movs	r1, #0
 800564c:	4831      	ldr	r0, [pc, #196]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 800564e:	f005 fb45 	bl	800acdc <memset>
				break;
 8005652:	e111      	b.n	8005878 <ProcessReceivedCommand+0x1120>
			}
		case 49: // Set Dropping Accel Slope
			if (StartRunning)// Setting is not available while running
 8005654:	4b2a      	ldr	r3, [pc, #168]	; (8005700 <ProcessReceivedCommand+0xfa8>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	2b00      	cmp	r3, #0
 800565a:	f040 8106 	bne.w	800586a <ProcessReceivedCommand+0x1112>
			{
				break;
			}
			else
			{
				DropAccelSlope = (uint8_t)MotionCode[1];
 800565e:	4b29      	ldr	r3, [pc, #164]	; (8005704 <ProcessReceivedCommand+0xfac>)
 8005660:	edd3 7a01 	vldr	s15, [r3, #4]
 8005664:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005668:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800566c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8005670:	b2da      	uxtb	r2, r3
 8005672:	4b37      	ldr	r3, [pc, #220]	; (8005750 <ProcessReceivedCommand+0xff8>)
 8005674:	701a      	strb	r2, [r3, #0]
				Initialized = false;
 8005676:	4b25      	ldr	r3, [pc, #148]	; (800570c <ProcessReceivedCommand+0xfb4>)
 8005678:	2200      	movs	r2, #0
 800567a:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r49/%de",DropAccelSlope);
 800567c:	4b34      	ldr	r3, [pc, #208]	; (8005750 <ProcessReceivedCommand+0xff8>)
 800567e:	781b      	ldrb	r3, [r3, #0]
 8005680:	461a      	mov	r2, r3
 8005682:	4934      	ldr	r1, [pc, #208]	; (8005754 <ProcessReceivedCommand+0xffc>)
 8005684:	4823      	ldr	r0, [pc, #140]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 8005686:	f006 f9b1 	bl	800b9ec <siprintf>
 800568a:	4603      	mov	r3, r0
 800568c:	b2da      	uxtb	r2, r3
 800568e:	4b22      	ldr	r3, [pc, #136]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 8005690:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005692:	4b21      	ldr	r3, [pc, #132]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 8005694:	781b      	ldrb	r3, [r3, #0]
 8005696:	b29a      	uxth	r2, r3
 8005698:	2364      	movs	r3, #100	; 0x64
 800569a:	491e      	ldr	r1, [pc, #120]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 800569c:	481f      	ldr	r0, [pc, #124]	; (800571c <ProcessReceivedCommand+0xfc4>)
 800569e:	f004 fac4 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80056a2:	220f      	movs	r2, #15
 80056a4:	2100      	movs	r1, #0
 80056a6:	481b      	ldr	r0, [pc, #108]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80056a8:	f005 fb18 	bl	800acdc <memset>
			}
			break;
 80056ac:	e0e4      	b.n	8005878 <ProcessReceivedCommand+0x1120>

		case 52: // Set Dropping Acceleration Distance;
			if (StartRunning)// Setting is not available while running
 80056ae:	4b14      	ldr	r3, [pc, #80]	; (8005700 <ProcessReceivedCommand+0xfa8>)
 80056b0:	781b      	ldrb	r3, [r3, #0]
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	f040 80db 	bne.w	800586e <ProcessReceivedCommand+0x1116>
			{
				break;
			}
			else
			{
				DroppingAccelDistance = MotionCode[1];
 80056b8:	4b12      	ldr	r3, [pc, #72]	; (8005704 <ProcessReceivedCommand+0xfac>)
 80056ba:	685b      	ldr	r3, [r3, #4]
 80056bc:	4a26      	ldr	r2, [pc, #152]	; (8005758 <ProcessReceivedCommand+0x1000>)
 80056be:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80056c0:	4b12      	ldr	r3, [pc, #72]	; (800570c <ProcessReceivedCommand+0xfb4>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r52/%.2fe",DroppingAccelDistance);
 80056c6:	4b24      	ldr	r3, [pc, #144]	; (8005758 <ProcessReceivedCommand+0x1000>)
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	4618      	mov	r0, r3
 80056cc:	f7fa ff3c 	bl	8000548 <__aeabi_f2d>
 80056d0:	4602      	mov	r2, r0
 80056d2:	460b      	mov	r3, r1
 80056d4:	4921      	ldr	r1, [pc, #132]	; (800575c <ProcessReceivedCommand+0x1004>)
 80056d6:	480f      	ldr	r0, [pc, #60]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80056d8:	f006 f988 	bl	800b9ec <siprintf>
 80056dc:	4603      	mov	r3, r0
 80056de:	b2da      	uxtb	r2, r3
 80056e0:	4b0d      	ldr	r3, [pc, #52]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 80056e2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80056e4:	4b0c      	ldr	r3, [pc, #48]	; (8005718 <ProcessReceivedCommand+0xfc0>)
 80056e6:	781b      	ldrb	r3, [r3, #0]
 80056e8:	b29a      	uxth	r2, r3
 80056ea:	2364      	movs	r3, #100	; 0x64
 80056ec:	4909      	ldr	r1, [pc, #36]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80056ee:	480b      	ldr	r0, [pc, #44]	; (800571c <ProcessReceivedCommand+0xfc4>)
 80056f0:	f004 fa9b 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80056f4:	220f      	movs	r2, #15
 80056f6:	2100      	movs	r1, #0
 80056f8:	4806      	ldr	r0, [pc, #24]	; (8005714 <ProcessReceivedCommand+0xfbc>)
 80056fa:	f005 faef 	bl	800acdc <memset>
			}
			break;
 80056fe:	e0bb      	b.n	8005878 <ProcessReceivedCommand+0x1120>
 8005700:	20000432 	.word	0x20000432
 8005704:	2000051c 	.word	0x2000051c
 8005708:	20000488 	.word	0x20000488
 800570c:	2000043d 	.word	0x2000043d
 8005710:	0800f830 	.word	0x0800f830
 8005714:	2000041c 	.word	0x2000041c
 8005718:	20000414 	.word	0x20000414
 800571c:	200002f8 	.word	0x200002f8
 8005720:	20000510 	.word	0x20000510
 8005724:	200004ac 	.word	0x200004ac
 8005728:	200004b8 	.word	0x200004b8
 800572c:	200004b4 	.word	0x200004b4
 8005730:	2000048c 	.word	0x2000048c
 8005734:	0800f83c 	.word	0x0800f83c
 8005738:	20000004 	.word	0x20000004
 800573c:	0800f848 	.word	0x0800f848
 8005740:	20000490 	.word	0x20000490
 8005744:	0800f850 	.word	0x0800f850
 8005748:	20000470 	.word	0x20000470
 800574c:	0800f85c 	.word	0x0800f85c
 8005750:	20000541 	.word	0x20000541
 8005754:	0800f868 	.word	0x0800f868
 8005758:	20000478 	.word	0x20000478
 800575c:	0800f870 	.word	0x0800f870

		case 54: // Set Dropping Decceleration Slope
			if (StartRunning)// Setting is not available while running
 8005760:	4b48      	ldr	r3, [pc, #288]	; (8005884 <ProcessReceivedCommand+0x112c>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	2b00      	cmp	r3, #0
 8005766:	f040 8084 	bne.w	8005872 <ProcessReceivedCommand+0x111a>
			{
				break;
			}
			else
			{
				DropDecelSlope = (uint8_t)MotionCode[1];
 800576a:	4b47      	ldr	r3, [pc, #284]	; (8005888 <ProcessReceivedCommand+0x1130>)
 800576c:	edd3 7a01 	vldr	s15, [r3, #4]
 8005770:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005774:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8005778:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 800577c:	b2da      	uxtb	r2, r3
 800577e:	4b43      	ldr	r3, [pc, #268]	; (800588c <ProcessReceivedCommand+0x1134>)
 8005780:	701a      	strb	r2, [r3, #0]
				Initialized = false;
 8005782:	4b43      	ldr	r3, [pc, #268]	; (8005890 <ProcessReceivedCommand+0x1138>)
 8005784:	2200      	movs	r2, #0
 8005786:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r54/%de",DropDecelSlope);
 8005788:	4b40      	ldr	r3, [pc, #256]	; (800588c <ProcessReceivedCommand+0x1134>)
 800578a:	781b      	ldrb	r3, [r3, #0]
 800578c:	461a      	mov	r2, r3
 800578e:	4941      	ldr	r1, [pc, #260]	; (8005894 <ProcessReceivedCommand+0x113c>)
 8005790:	4841      	ldr	r0, [pc, #260]	; (8005898 <ProcessReceivedCommand+0x1140>)
 8005792:	f006 f92b 	bl	800b9ec <siprintf>
 8005796:	4603      	mov	r3, r0
 8005798:	b2da      	uxtb	r2, r3
 800579a:	4b40      	ldr	r3, [pc, #256]	; (800589c <ProcessReceivedCommand+0x1144>)
 800579c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 800579e:	4b3f      	ldr	r3, [pc, #252]	; (800589c <ProcessReceivedCommand+0x1144>)
 80057a0:	781b      	ldrb	r3, [r3, #0]
 80057a2:	b29a      	uxth	r2, r3
 80057a4:	2364      	movs	r3, #100	; 0x64
 80057a6:	493c      	ldr	r1, [pc, #240]	; (8005898 <ProcessReceivedCommand+0x1140>)
 80057a8:	483d      	ldr	r0, [pc, #244]	; (80058a0 <ProcessReceivedCommand+0x1148>)
 80057aa:	f004 fa3e 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80057ae:	220f      	movs	r2, #15
 80057b0:	2100      	movs	r1, #0
 80057b2:	4839      	ldr	r0, [pc, #228]	; (8005898 <ProcessReceivedCommand+0x1140>)
 80057b4:	f005 fa92 	bl	800acdc <memset>
			}
			break;
 80057b8:	e05e      	b.n	8005878 <ProcessReceivedCommand+0x1120>
		case 34: // Set DroppingDecel, m/s2
			if (StartRunning)// Setting is not available while running
 80057ba:	4b32      	ldr	r3, [pc, #200]	; (8005884 <ProcessReceivedCommand+0x112c>)
 80057bc:	781b      	ldrb	r3, [r3, #0]
 80057be:	2b00      	cmp	r3, #0
 80057c0:	d159      	bne.n	8005876 <ProcessReceivedCommand+0x111e>
			{
				break;
			}
			else
			{
				DroppingDecel = MotionCode[1];
 80057c2:	4b31      	ldr	r3, [pc, #196]	; (8005888 <ProcessReceivedCommand+0x1130>)
 80057c4:	685b      	ldr	r3, [r3, #4]
 80057c6:	4a37      	ldr	r2, [pc, #220]	; (80058a4 <ProcessReceivedCommand+0x114c>)
 80057c8:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80057ca:	4b31      	ldr	r3, [pc, #196]	; (8005890 <ProcessReceivedCommand+0x1138>)
 80057cc:	2200      	movs	r2, #0
 80057ce:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r34/%.2fe",DroppingDecel);
 80057d0:	4b34      	ldr	r3, [pc, #208]	; (80058a4 <ProcessReceivedCommand+0x114c>)
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	4618      	mov	r0, r3
 80057d6:	f7fa feb7 	bl	8000548 <__aeabi_f2d>
 80057da:	4602      	mov	r2, r0
 80057dc:	460b      	mov	r3, r1
 80057de:	4932      	ldr	r1, [pc, #200]	; (80058a8 <ProcessReceivedCommand+0x1150>)
 80057e0:	482d      	ldr	r0, [pc, #180]	; (8005898 <ProcessReceivedCommand+0x1140>)
 80057e2:	f006 f903 	bl	800b9ec <siprintf>
 80057e6:	4603      	mov	r3, r0
 80057e8:	b2da      	uxtb	r2, r3
 80057ea:	4b2c      	ldr	r3, [pc, #176]	; (800589c <ProcessReceivedCommand+0x1144>)
 80057ec:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80057ee:	4b2b      	ldr	r3, [pc, #172]	; (800589c <ProcessReceivedCommand+0x1144>)
 80057f0:	781b      	ldrb	r3, [r3, #0]
 80057f2:	b29a      	uxth	r2, r3
 80057f4:	2364      	movs	r3, #100	; 0x64
 80057f6:	4928      	ldr	r1, [pc, #160]	; (8005898 <ProcessReceivedCommand+0x1140>)
 80057f8:	4829      	ldr	r0, [pc, #164]	; (80058a0 <ProcessReceivedCommand+0x1148>)
 80057fa:	f004 fa16 	bl	8009c2a <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80057fe:	220f      	movs	r2, #15
 8005800:	2100      	movs	r1, #0
 8005802:	4825      	ldr	r0, [pc, #148]	; (8005898 <ProcessReceivedCommand+0x1140>)
 8005804:	f005 fa6a 	bl	800acdc <memset>
			}
			break;
 8005808:	e036      	b.n	8005878 <ProcessReceivedCommand+0x1120>
		default:
			break;
 800580a:	bf00      	nop
 800580c:	e034      	b.n	8005878 <ProcessReceivedCommand+0x1120>
			break;
 800580e:	bf00      	nop
 8005810:	e032      	b.n	8005878 <ProcessReceivedCommand+0x1120>
			break;
 8005812:	bf00      	nop
 8005814:	e030      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005816:	bf00      	nop
 8005818:	e02e      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800581a:	bf00      	nop
 800581c:	e02c      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800581e:	bf00      	nop
 8005820:	e02a      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005822:	bf00      	nop
 8005824:	e028      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005826:	bf00      	nop
 8005828:	e026      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800582a:	bf00      	nop
 800582c:	e024      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800582e:	bf00      	nop
 8005830:	e022      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005832:	bf00      	nop
 8005834:	e020      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005836:	bf00      	nop
 8005838:	e01e      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800583a:	bf00      	nop
 800583c:	e01c      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800583e:	bf00      	nop
 8005840:	e01a      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005842:	bf00      	nop
 8005844:	e018      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005846:	bf00      	nop
 8005848:	e016      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800584a:	bf00      	nop
 800584c:	e014      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800584e:	bf00      	nop
 8005850:	e012      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005852:	bf00      	nop
 8005854:	e010      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005856:	bf00      	nop
 8005858:	e00e      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800585a:	bf00      	nop
 800585c:	e00c      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800585e:	bf00      	nop
 8005860:	e00a      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005862:	bf00      	nop
 8005864:	e008      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005866:	bf00      	nop
 8005868:	e006      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800586a:	bf00      	nop
 800586c:	e004      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 800586e:	bf00      	nop
 8005870:	e002      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005872:	bf00      	nop
 8005874:	e000      	b.n	8005878 <ProcessReceivedCommand+0x1120>
				break;
 8005876:	bf00      	nop
	}
}
 8005878:	bf00      	nop
 800587a:	3774      	adds	r7, #116	; 0x74
 800587c:	46bd      	mov	sp, r7
 800587e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005882:	bf00      	nop
 8005884:	20000432 	.word	0x20000432
 8005888:	2000051c 	.word	0x2000051c
 800588c:	20000540 	.word	0x20000540
 8005890:	2000043d 	.word	0x2000043d
 8005894:	0800f87c 	.word	0x0800f87c
 8005898:	2000041c 	.word	0x2000041c
 800589c:	20000414 	.word	0x20000414
 80058a0:	200002f8 	.word	0x200002f8
 80058a4:	20000474 	.word	0x20000474
 80058a8:	0800f884 	.word	0x0800f884

080058ac <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback function when a receiving complete
{
 80058ac:	b580      	push	{r7, lr}
 80058ae:	b082      	sub	sp, #8
 80058b0:	af00      	add	r7, sp, #0
 80058b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(huart);

	// BEGIN UART6 Receiving
		if (huart->Instance==USART6) // If it is uart6, UI communication
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	4a2f      	ldr	r2, [pc, #188]	; (8005978 <HAL_UART_RxCpltCallback+0xcc>)
 80058ba:	4293      	cmp	r3, r2
 80058bc:	d121      	bne.n	8005902 <HAL_UART_RxCpltCallback+0x56>
		{
			if(RxPCData!=EndChar) // read up to the ending char
 80058be:	4b2f      	ldr	r3, [pc, #188]	; (800597c <HAL_UART_RxCpltCallback+0xd0>)
 80058c0:	781b      	ldrb	r3, [r3, #0]
 80058c2:	2224      	movs	r2, #36	; 0x24
 80058c4:	4293      	cmp	r3, r2
 80058c6:	d016      	beq.n	80058f6 <HAL_UART_RxCpltCallback+0x4a>
			{
				if (RxPCData != 0) // remove the null character
 80058c8:	4b2c      	ldr	r3, [pc, #176]	; (800597c <HAL_UART_RxCpltCallback+0xd0>)
 80058ca:	781b      	ldrb	r3, [r3, #0]
 80058cc:	2b00      	cmp	r3, #0
 80058ce:	d018      	beq.n	8005902 <HAL_UART_RxCpltCallback+0x56>
				//if (RxPCData != NULL) // remove the null character
				{
					RxPCBuff[_rxPCIndex]=RxPCData;// Copy the data to buffer
 80058d0:	4b2b      	ldr	r3, [pc, #172]	; (8005980 <HAL_UART_RxCpltCallback+0xd4>)
 80058d2:	781b      	ldrb	r3, [r3, #0]
 80058d4:	461a      	mov	r2, r3
 80058d6:	4b29      	ldr	r3, [pc, #164]	; (800597c <HAL_UART_RxCpltCallback+0xd0>)
 80058d8:	7819      	ldrb	r1, [r3, #0]
 80058da:	4b2a      	ldr	r3, [pc, #168]	; (8005984 <HAL_UART_RxCpltCallback+0xd8>)
 80058dc:	5499      	strb	r1, [r3, r2]
				  _rxPCIndex++;
 80058de:	4b28      	ldr	r3, [pc, #160]	; (8005980 <HAL_UART_RxCpltCallback+0xd4>)
 80058e0:	781b      	ldrb	r3, [r3, #0]
 80058e2:	3301      	adds	r3, #1
 80058e4:	b2da      	uxtb	r2, r3
 80058e6:	4b26      	ldr	r3, [pc, #152]	; (8005980 <HAL_UART_RxCpltCallback+0xd4>)
 80058e8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 80058ea:	2201      	movs	r2, #1
 80058ec:	4923      	ldr	r1, [pc, #140]	; (800597c <HAL_UART_RxCpltCallback+0xd0>)
 80058ee:	4826      	ldr	r0, [pc, #152]	; (8005988 <HAL_UART_RxCpltCallback+0xdc>)
 80058f0:	f004 fa2d 	bl	8009d4e <HAL_UART_Receive_IT>
 80058f4:	e005      	b.n	8005902 <HAL_UART_RxCpltCallback+0x56>
				}
			}
			else //if(RxPCData==EndChar)
			{
				_rxPCIndex=0;
 80058f6:	4b22      	ldr	r3, [pc, #136]	; (8005980 <HAL_UART_RxCpltCallback+0xd4>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
				RxUart6_Cpl_Flag=true; // reading completed
 80058fc:	4b23      	ldr	r3, [pc, #140]	; (800598c <HAL_UART_RxCpltCallback+0xe0>)
 80058fe:	2201      	movs	r2, #1
 8005900:	701a      	strb	r2, [r3, #0]
		}
	// END UART6

		//BEGIN UART5 = HAL_UART_Receive_IT============================================
		/// Use this part
		if (huart->Instance==UART5) // If it is uart5, driver communication
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	681b      	ldr	r3, [r3, #0]
 8005906:	4a22      	ldr	r2, [pc, #136]	; (8005990 <HAL_UART_RxCpltCallback+0xe4>)
 8005908:	4293      	cmp	r3, r2
 800590a:	d130      	bne.n	800596e <HAL_UART_RxCpltCallback+0xc2>
		{
			if (_rxDriverIndex >= NoOfBytes) //
 800590c:	4b21      	ldr	r3, [pc, #132]	; (8005994 <HAL_UART_RxCpltCallback+0xe8>)
 800590e:	781a      	ldrb	r2, [r3, #0]
 8005910:	4b21      	ldr	r3, [pc, #132]	; (8005998 <HAL_UART_RxCpltCallback+0xec>)
 8005912:	781b      	ldrb	r3, [r3, #0]
 8005914:	429a      	cmp	r2, r3
 8005916:	d308      	bcc.n	800592a <HAL_UART_RxCpltCallback+0x7e>
			{
				RxUart5_Cpl_Flag = true; // Complete Receiving
 8005918:	4b20      	ldr	r3, [pc, #128]	; (800599c <HAL_UART_RxCpltCallback+0xf0>)
 800591a:	2201      	movs	r2, #1
 800591c:	701a      	strb	r2, [r3, #0]
				StartReceiveDriverData = false;
 800591e:	4b20      	ldr	r3, [pc, #128]	; (80059a0 <HAL_UART_RxCpltCallback+0xf4>)
 8005920:	2200      	movs	r2, #0
 8005922:	701a      	strb	r2, [r3, #0]
				_rxDriverIndex = 0;
 8005924:	4b1b      	ldr	r3, [pc, #108]	; (8005994 <HAL_UART_RxCpltCallback+0xe8>)
 8005926:	2200      	movs	r2, #0
 8005928:	701a      	strb	r2, [r3, #0]
			}
			if ((_rxDriverIndex == 0)&&(RxDriverData == DriverID)) // If byte 0 is the Driver ID
 800592a:	4b1a      	ldr	r3, [pc, #104]	; (8005994 <HAL_UART_RxCpltCallback+0xe8>)
 800592c:	781b      	ldrb	r3, [r3, #0]
 800592e:	2b00      	cmp	r3, #0
 8005930:	d106      	bne.n	8005940 <HAL_UART_RxCpltCallback+0x94>
 8005932:	4b1c      	ldr	r3, [pc, #112]	; (80059a4 <HAL_UART_RxCpltCallback+0xf8>)
 8005934:	781b      	ldrb	r3, [r3, #0]
 8005936:	2b01      	cmp	r3, #1
 8005938:	d102      	bne.n	8005940 <HAL_UART_RxCpltCallback+0x94>
			{
				StartReceiveDriverData = true;
 800593a:	4b19      	ldr	r3, [pc, #100]	; (80059a0 <HAL_UART_RxCpltCallback+0xf4>)
 800593c:	2201      	movs	r2, #1
 800593e:	701a      	strb	r2, [r3, #0]
			}
			if (StartReceiveDriverData) //
 8005940:	4b17      	ldr	r3, [pc, #92]	; (80059a0 <HAL_UART_RxCpltCallback+0xf4>)
 8005942:	781b      	ldrb	r3, [r3, #0]
 8005944:	b2db      	uxtb	r3, r3
 8005946:	2b00      	cmp	r3, #0
 8005948:	d011      	beq.n	800596e <HAL_UART_RxCpltCallback+0xc2>
			{
				RxDriverBuff[_rxDriverIndex]=RxDriverData;// Copy the data to buffer
 800594a:	4b12      	ldr	r3, [pc, #72]	; (8005994 <HAL_UART_RxCpltCallback+0xe8>)
 800594c:	781b      	ldrb	r3, [r3, #0]
 800594e:	461a      	mov	r2, r3
 8005950:	4b14      	ldr	r3, [pc, #80]	; (80059a4 <HAL_UART_RxCpltCallback+0xf8>)
 8005952:	7819      	ldrb	r1, [r3, #0]
 8005954:	4b14      	ldr	r3, [pc, #80]	; (80059a8 <HAL_UART_RxCpltCallback+0xfc>)
 8005956:	5499      	strb	r1, [r3, r2]
				_rxDriverIndex++;
 8005958:	4b0e      	ldr	r3, [pc, #56]	; (8005994 <HAL_UART_RxCpltCallback+0xe8>)
 800595a:	781b      	ldrb	r3, [r3, #0]
 800595c:	3301      	adds	r3, #1
 800595e:	b2da      	uxtb	r2, r3
 8005960:	4b0c      	ldr	r3, [pc, #48]	; (8005994 <HAL_UART_RxCpltCallback+0xe8>)
 8005962:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time ///*/
 8005964:	2201      	movs	r2, #1
 8005966:	490f      	ldr	r1, [pc, #60]	; (80059a4 <HAL_UART_RxCpltCallback+0xf8>)
 8005968:	4810      	ldr	r0, [pc, #64]	; (80059ac <HAL_UART_RxCpltCallback+0x100>)
 800596a:	f004 f9f0 	bl	8009d4e <HAL_UART_Receive_IT>
			}
		}
		// END UART5
}
 800596e:	bf00      	nop
 8005970:	3708      	adds	r7, #8
 8005972:	46bd      	mov	sp, r7
 8005974:	bd80      	pop	{r7, pc}
 8005976:	bf00      	nop
 8005978:	40011400 	.word	0x40011400
 800597c:	200003ac 	.word	0x200003ac
 8005980:	2000042b 	.word	0x2000042b
 8005984:	2000033c 	.word	0x2000033c
 8005988:	200002f8 	.word	0x200002f8
 800598c:	2000042d 	.word	0x2000042d
 8005990:	40005000 	.word	0x40005000
 8005994:	2000042c 	.word	0x2000042c
 8005998:	20000000 	.word	0x20000000
 800599c:	2000042e 	.word	0x2000042e
 80059a0:	2000042f 	.word	0x2000042f
 80059a4:	200003ad 	.word	0x200003ad
 80059a8:	20000364 	.word	0x20000364
 80059ac:	200002b4 	.word	0x200002b4

080059b0 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer 2 interrupt, 1ms
{
 80059b0:	b580      	push	{r7, lr}
 80059b2:	b082      	sub	sp, #8
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)	// TIMER 3 interrupt for pulse generation, period: 2us
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	681b      	ldr	r3, [r3, #0]
 80059bc:	4a7a      	ldr	r2, [pc, #488]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 80059be:	4293      	cmp	r3, r2
 80059c0:	f040 80c7 	bne.w	8005b52 <HAL_TIM_PeriodElapsedCallback+0x1a2>
	{
		if (PulseGenerationFlag) // Only generating pulse when the flag is ON. Otherwise, do nothing
 80059c4:	4b79      	ldr	r3, [pc, #484]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 80059c6:	781b      	ldrb	r3, [r3, #0]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	f000 80c2 	beq.w	8005b52 <HAL_TIM_PeriodElapsedCallback+0x1a2>
		{
				Timer3Count++;
 80059ce:	4b78      	ldr	r3, [pc, #480]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	3301      	adds	r3, #1
 80059d4:	b29a      	uxth	r2, r3
 80059d6:	4b76      	ldr	r3, [pc, #472]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80059d8:	801a      	strh	r2, [r3, #0]
				if (Timer3Count >= Timer3CountPeriod) // Generate pulse
 80059da:	4b75      	ldr	r3, [pc, #468]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80059dc:	881a      	ldrh	r2, [r3, #0]
 80059de:	4b75      	ldr	r3, [pc, #468]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x204>)
 80059e0:	881b      	ldrh	r3, [r3, #0]
 80059e2:	429a      	cmp	r2, r3
 80059e4:	f0c0 80b5 	bcc.w	8005b52 <HAL_TIM_PeriodElapsedCallback+0x1a2>
				{
					Timer3Count = 0;
 80059e8:	4b71      	ldr	r3, [pc, #452]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80059ea:	2200      	movs	r2, #0
 80059ec:	801a      	strh	r2, [r3, #0]

					if(StartSimulating) // Check the no of pulse generated in Simulating
 80059ee:	4b72      	ldr	r3, [pc, #456]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80059f0:	781b      	ldrb	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	d02b      	beq.n	8005a4e <HAL_TIM_PeriodElapsedCallback+0x9e>
					{
						if (IsPulseCheck) //
 80059f6:	4b71      	ldr	r3, [pc, #452]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80059f8:	781b      	ldrb	r3, [r3, #0]
 80059fa:	b2db      	uxtb	r3, r3
 80059fc:	2b00      	cmp	r3, #0
 80059fe:	d026      	beq.n	8005a4e <HAL_TIM_PeriodElapsedCallback+0x9e>
						{
							if(MotorDriver) // HIGEN Driver
 8005a00:	4b6f      	ldr	r3, [pc, #444]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005a02:	781b      	ldrb	r3, [r3, #0]
 8005a04:	2b00      	cmp	r3, #0
 8005a06:	d011      	beq.n	8005a2c <HAL_TIM_PeriodElapsedCallback+0x7c>
							{
								if ( abs(8*PulseSimuCount) >= abs(TargetPosition)) // 8 is th gear ratio
 8005a08:	4b6e      	ldr	r3, [pc, #440]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005a0a:	681b      	ldr	r3, [r3, #0]
 8005a0c:	00db      	lsls	r3, r3, #3
 8005a0e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005a12:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005a16:	4b6c      	ldr	r3, [pc, #432]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	2b00      	cmp	r3, #0
 8005a1c:	bfb8      	it	lt
 8005a1e:	425b      	neglt	r3, r3
 8005a20:	429a      	cmp	r2, r3
 8005a22:	db14      	blt.n	8005a4e <HAL_TIM_PeriodElapsedCallback+0x9e>
									{
										IsReachTargetPosition = true;
 8005a24:	4b69      	ldr	r3, [pc, #420]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005a26:	2201      	movs	r2, #1
 8005a28:	701a      	strb	r2, [r3, #0]
										return;
 8005a2a:	e0b9      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
									}
							}
							else // ASDA Driver
							{
								if ( abs(PulseSimuCount) >= abs(TargetPosition))
 8005a2c:	4b65      	ldr	r3, [pc, #404]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005a2e:	681b      	ldr	r3, [r3, #0]
 8005a30:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005a34:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005a38:	4b63      	ldr	r3, [pc, #396]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005a3a:	681b      	ldr	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	bfb8      	it	lt
 8005a40:	425b      	neglt	r3, r3
 8005a42:	429a      	cmp	r2, r3
 8005a44:	db03      	blt.n	8005a4e <HAL_TIM_PeriodElapsedCallback+0x9e>
									{
										IsReachTargetPosition = true;
 8005a46:	4b61      	ldr	r3, [pc, #388]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005a48:	2201      	movs	r2, #1
 8005a4a:	701a      	strb	r2, [r3, #0]
										return;
 8005a4c:	e0a8      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
									}
							}
						}
					}

					if (StartRunning)
 8005a4e:	4b60      	ldr	r3, [pc, #384]	; (8005bd0 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005a50:	781b      	ldrb	r3, [r3, #0]
 8005a52:	2b00      	cmp	r3, #0
 8005a54:	d041      	beq.n	8005ada <HAL_TIM_PeriodElapsedCallback+0x12a>
					{
						if (IsPulseCheck)
 8005a56:	4b59      	ldr	r3, [pc, #356]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8005a58:	781b      	ldrb	r3, [r3, #0]
 8005a5a:	b2db      	uxtb	r3, r3
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d03c      	beq.n	8005ada <HAL_TIM_PeriodElapsedCallback+0x12a>
						{
							if(MotorDriver) // HIGEN Driver
 8005a60:	4b57      	ldr	r3, [pc, #348]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005a62:	781b      	ldrb	r3, [r3, #0]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d027      	beq.n	8005ab8 <HAL_TIM_PeriodElapsedCallback+0x108>
							{
									if (Direction) // dropping down
 8005a68:	4b5a      	ldr	r3, [pc, #360]	; (8005bd4 <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005a6a:	781b      	ldrb	r3, [r3, #0]
 8005a6c:	2b00      	cmp	r3, #0
 8005a6e:	d011      	beq.n	8005a94 <HAL_TIM_PeriodElapsedCallback+0xe4>
									{
										if ( abs(8*PositionPulseCmd) >= abs(TargetPosition)) // 8 is th gear ratio
 8005a70:	4b59      	ldr	r3, [pc, #356]	; (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	00db      	lsls	r3, r3, #3
 8005a76:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005a7a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005a7e:	4b52      	ldr	r3, [pc, #328]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005a80:	681b      	ldr	r3, [r3, #0]
 8005a82:	2b00      	cmp	r3, #0
 8005a84:	bfb8      	it	lt
 8005a86:	425b      	neglt	r3, r3
 8005a88:	429a      	cmp	r2, r3
 8005a8a:	db26      	blt.n	8005ada <HAL_TIM_PeriodElapsedCallback+0x12a>
											{
												IsReachTargetPosition = true;
 8005a8c:	4b4f      	ldr	r3, [pc, #316]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005a8e:	2201      	movs	r2, #1
 8005a90:	701a      	strb	r2, [r3, #0]
												return;
 8005a92:	e085      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
											}
									}
									else // Pulling Up
									{
										if ( abs(8*PositionPulseCmd) < abs(TargetPosition)) // 8 is th gear ratio
 8005a94:	4b50      	ldr	r3, [pc, #320]	; (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005a96:	681b      	ldr	r3, [r3, #0]
 8005a98:	00db      	lsls	r3, r3, #3
 8005a9a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005a9e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005aa2:	4b49      	ldr	r3, [pc, #292]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005aa4:	681b      	ldr	r3, [r3, #0]
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	bfb8      	it	lt
 8005aaa:	425b      	neglt	r3, r3
 8005aac:	429a      	cmp	r2, r3
 8005aae:	da14      	bge.n	8005ada <HAL_TIM_PeriodElapsedCallback+0x12a>
											{
												IsReachTargetPosition = true;
 8005ab0:	4b46      	ldr	r3, [pc, #280]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005ab2:	2201      	movs	r2, #1
 8005ab4:	701a      	strb	r2, [r3, #0]
												return;
 8005ab6:	e073      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
											}
									}
							}
							else // ASDA Driver
							{
								if ( abs(PositionPulseCmd) >= abs(TargetPosition)) // 8 is th gear ratio
 8005ab8:	4b47      	ldr	r3, [pc, #284]	; (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005ac0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005ac4:	4b40      	ldr	r3, [pc, #256]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	2b00      	cmp	r3, #0
 8005aca:	bfb8      	it	lt
 8005acc:	425b      	neglt	r3, r3
 8005ace:	429a      	cmp	r2, r3
 8005ad0:	db03      	blt.n	8005ada <HAL_TIM_PeriodElapsedCallback+0x12a>
								{
									IsReachTargetPosition = true;
 8005ad2:	4b3e      	ldr	r3, [pc, #248]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	701a      	strb	r2, [r3, #0]
									return;
 8005ad8:	e062      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
							}
						}

					}

					if (PRIsToggled)
 8005ada:	4b40      	ldr	r3, [pc, #256]	; (8005bdc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005adc:	781b      	ldrb	r3, [r3, #0]
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d01b      	beq.n	8005b1a <HAL_TIM_PeriodElapsedCallback+0x16a>
					{
						HAL_GPIO_TogglePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin); // Generate pulses on PF by tonggling this input
 8005ae2:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005ae6:	483e      	ldr	r0, [pc, #248]	; (8005be0 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005ae8:	f002 fd0f 	bl	800850a <HAL_GPIO_TogglePin>
						PRIsToggled = false;
 8005aec:	4b3b      	ldr	r3, [pc, #236]	; (8005bdc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005aee:	2200      	movs	r2, #0
 8005af0:	701a      	strb	r2, [r3, #0]
						if (StartSimulating)
 8005af2:	4b31      	ldr	r3, [pc, #196]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	2b00      	cmp	r3, #0
 8005af8:	d005      	beq.n	8005b06 <HAL_TIM_PeriodElapsedCallback+0x156>
						{
							PulseSimuCount++;
 8005afa:	4b32      	ldr	r3, [pc, #200]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	3301      	adds	r3, #1
 8005b00:	4a30      	ldr	r2, [pc, #192]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005b02:	6013      	str	r3, [r2, #0]
							return;
 8005b04:	e04c      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
						}
						if (StartPositionCount)
 8005b06:	4b37      	ldr	r3, [pc, #220]	; (8005be4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005b08:	781b      	ldrb	r3, [r3, #0]
 8005b0a:	2b00      	cmp	r3, #0
 8005b0c:	d021      	beq.n	8005b52 <HAL_TIM_PeriodElapsedCallback+0x1a2>
						{
							PositionPulseCmd++;
 8005b0e:	4b32      	ldr	r3, [pc, #200]	; (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005b10:	681b      	ldr	r3, [r3, #0]
 8005b12:	3301      	adds	r3, #1
 8005b14:	4a30      	ldr	r2, [pc, #192]	; (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005b16:	6013      	str	r3, [r2, #0]
//							}
//							else // false: pulling up
//							{
//								PositionPulseCmd--; // Decrease the pulse cmd
//							}
							return; // exit the function
 8005b18:	e042      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
						}

					}
					else
					{
						HAL_GPIO_TogglePin(PC8_PR_GPIO_Port, PC8_PR_Pin); // Generate pulses on PF by tonggling this input
 8005b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005b1e:	4832      	ldr	r0, [pc, #200]	; (8005be8 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005b20:	f002 fcf3 	bl	800850a <HAL_GPIO_TogglePin>
						PRIsToggled = true;
 8005b24:	4b2d      	ldr	r3, [pc, #180]	; (8005bdc <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005b26:	2201      	movs	r2, #1
 8005b28:	701a      	strb	r2, [r3, #0]
						if (StartSimulating)
 8005b2a:	4b23      	ldr	r3, [pc, #140]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8005b2c:	781b      	ldrb	r3, [r3, #0]
 8005b2e:	2b00      	cmp	r3, #0
 8005b30:	d005      	beq.n	8005b3e <HAL_TIM_PeriodElapsedCallback+0x18e>
						{
							PulseSimuCount++;
 8005b32:	4b24      	ldr	r3, [pc, #144]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005b34:	681b      	ldr	r3, [r3, #0]
 8005b36:	3301      	adds	r3, #1
 8005b38:	4a22      	ldr	r2, [pc, #136]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005b3a:	6013      	str	r3, [r2, #0]
							return;
 8005b3c:	e030      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
						}
						if(StartPositionCount)
 8005b3e:	4b29      	ldr	r3, [pc, #164]	; (8005be4 <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005b40:	781b      	ldrb	r3, [r3, #0]
 8005b42:	2b00      	cmp	r3, #0
 8005b44:	d005      	beq.n	8005b52 <HAL_TIM_PeriodElapsedCallback+0x1a2>
						{
							PositionPulseCmd++;
 8005b46:	4b24      	ldr	r3, [pc, #144]	; (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	3301      	adds	r3, #1
 8005b4c:	4a22      	ldr	r2, [pc, #136]	; (8005bd8 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005b4e:	6013      	str	r3, [r2, #0]
//							}
//							else // false: pulling up
//							{
//								PositionPulseCmd--; // Decrease the pulse cmd
//							}
							return;
 8005b50:	e026      	b.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
					}
				}
		}
	}

	if (htim->Instance == TIM2) // Timer 2 interrupt, for the main control function, 1ms
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b5a:	d121      	bne.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
		{
				// To calculate PID controller
				Timer2SampleTimeControlCount++;
 8005b5c:	4b23      	ldr	r3, [pc, #140]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005b5e:	781b      	ldrb	r3, [r3, #0]
 8005b60:	3301      	adds	r3, #1
 8005b62:	b2da      	uxtb	r2, r3
 8005b64:	4b21      	ldr	r3, [pc, #132]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005b66:	701a      	strb	r2, [r3, #0]
				if (Timer2SampleTimeControlCount >= SampleTime) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 8005b68:	4b20      	ldr	r3, [pc, #128]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005b6a:	781a      	ldrb	r2, [r3, #0]
 8005b6c:	4b20      	ldr	r3, [pc, #128]	; (8005bf0 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005b6e:	781b      	ldrb	r3, [r3, #0]
 8005b70:	429a      	cmp	r2, r3
 8005b72:	d305      	bcc.n	8005b80 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				{
					Timer2ControlInterrupt = true;
 8005b74:	4b1f      	ldr	r3, [pc, #124]	; (8005bf4 <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005b76:	2201      	movs	r2, #1
 8005b78:	701a      	strb	r2, [r3, #0]
					Timer2SampleTimeControlCount = 0;
 8005b7a:	4b1c      	ldr	r3, [pc, #112]	; (8005bec <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005b7c:	2200      	movs	r2, #0
 8005b7e:	701a      	strb	r2, [r3, #0]
				}

				// To transmit the data each 50ms
				Timer2Count++;
 8005b80:	4b1d      	ldr	r3, [pc, #116]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b82:	781b      	ldrb	r3, [r3, #0]
 8005b84:	3301      	adds	r3, #1
 8005b86:	b2da      	uxtb	r2, r3
 8005b88:	4b1b      	ldr	r3, [pc, #108]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b8a:	701a      	strb	r2, [r3, #0]
				if (Timer2Count >= 50) // turn on the flag when the sample time reaches, fix the data sample time to 50
 8005b8c:	4b1a      	ldr	r3, [pc, #104]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b8e:	781b      	ldrb	r3, [r3, #0]
 8005b90:	2b31      	cmp	r3, #49	; 0x31
 8005b92:	d905      	bls.n	8005ba0 <HAL_TIM_PeriodElapsedCallback+0x1f0>
				{
					Timer2SampleTimeInterrupt = true;
 8005b94:	4b19      	ldr	r3, [pc, #100]	; (8005bfc <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005b96:	2201      	movs	r2, #1
 8005b98:	701a      	strb	r2, [r3, #0]
					Timer2Count = 0;
 8005b9a:	4b17      	ldr	r3, [pc, #92]	; (8005bf8 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b9c:	2200      	movs	r2, #0
 8005b9e:	701a      	strb	r2, [r3, #0]
				}
		}
}
 8005ba0:	3708      	adds	r7, #8
 8005ba2:	46bd      	mov	sp, r7
 8005ba4:	bd80      	pop	{r7, pc}
 8005ba6:	bf00      	nop
 8005ba8:	40000400 	.word	0x40000400
 8005bac:	20000436 	.word	0x20000436
 8005bb0:	20000456 	.word	0x20000456
 8005bb4:	20000454 	.word	0x20000454
 8005bb8:	20000433 	.word	0x20000433
 8005bbc:	2000044c 	.word	0x2000044c
 8005bc0:	20000003 	.word	0x20000003
 8005bc4:	200004b4 	.word	0x200004b4
 8005bc8:	200004b0 	.word	0x200004b0
 8005bcc:	20000438 	.word	0x20000438
 8005bd0:	20000432 	.word	0x20000432
 8005bd4:	20000434 	.word	0x20000434
 8005bd8:	200004b8 	.word	0x200004b8
 8005bdc:	2000043f 	.word	0x2000043f
 8005be0:	40021000 	.word	0x40021000
 8005be4:	20000440 	.word	0x20000440
 8005be8:	40020800 	.word	0x40020800
 8005bec:	2000044e 	.word	0x2000044e
 8005bf0:	20000468 	.word	0x20000468
 8005bf4:	20000431 	.word	0x20000431
 8005bf8:	2000044d 	.word	0x2000044d
 8005bfc:	20000430 	.word	0x20000430

08005c00 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005c00:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005c04:	b08b      	sub	sp, #44	; 0x2c
 8005c06:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005c08:	f001 fd7a 	bl	8007700 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005c0c:	f000 ffb8 	bl	8006b80 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005c10:	f001 f956 	bl	8006ec0 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005c14:	f001 f83a 	bl	8006c8c <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8005c18:	f001 f928 	bl	8006e6c <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8005c1c:	f001 f8b0 	bl	8006d80 <MX_TIM3_Init>
  MX_UART5_Init();
 8005c20:	f001 f8fa 	bl	8006e18 <MX_UART5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005c24:	f001 f816 	bl	8006c54 <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(PE15_RELAY1_GPIO_Port, PE15_RELAY1_Pin, GPIO_PIN_SET);
 8005c28:	2201      	movs	r2, #1
 8005c2a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c2e:	489e      	ldr	r0, [pc, #632]	; (8005ea8 <main+0x2a8>)
 8005c30:	f002 fc52 	bl	80084d8 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8005c34:	f241 3088 	movw	r0, #5000	; 0x1388
 8005c38:	f001 fdd4 	bl	80077e4 <HAL_Delay>

	InitParams (); // Read the saved params from the flash memory
 8005c3c:	f7fe fce6 	bl	800460c <InitParams>

	HAL_TIM_Base_Start_IT(&htim2); // Enable Timer 2 interrupt
 8005c40:	489a      	ldr	r0, [pc, #616]	; (8005eac <main+0x2ac>)
 8005c42:	f003 f925 	bl	8008e90 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8005c46:	2201      	movs	r2, #1
 8005c48:	4999      	ldr	r1, [pc, #612]	; (8005eb0 <main+0x2b0>)
 8005c4a:	489a      	ldr	r0, [pc, #616]	; (8005eb4 <main+0x2b4>)
 8005c4c:	f004 f87f 	bl	8009d4e <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart4,&RxESPData,1);
	DriverInit();
 8005c50:	f7fb fb3e 	bl	80012d0 <DriverInit>
	ReadMultiRegister(StE03,5);
 8005c54:	2105      	movs	r1, #5
 8005c56:	200c      	movs	r0, #12
 8005c58:	f7fb fca6 	bl	80015a8 <ReadMultiRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Process Received Cmd from the GUI
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8005c5c:	4b96      	ldr	r3, [pc, #600]	; (8005eb8 <main+0x2b8>)
 8005c5e:	781b      	ldrb	r3, [r3, #0]
 8005c60:	b2db      	uxtb	r3, r3
 8005c62:	2b00      	cmp	r3, #0
 8005c64:	d00b      	beq.n	8005c7e <main+0x7e>
			{
				ExtractMotionCode();
 8005c66:	f7fb fc43 	bl	80014f0 <ExtractMotionCode>
				ProcessReceivedCommand (); // Proceed the command
 8005c6a:	f7fe fd75 	bl	8004758 <ProcessReceivedCommand>
				RxUart6_Cpl_Flag=false;
 8005c6e:	4b92      	ldr	r3, [pc, #584]	; (8005eb8 <main+0x2b8>)
 8005c70:	2200      	movs	r2, #0
 8005c72:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8005c74:	2201      	movs	r2, #1
 8005c76:	498e      	ldr	r1, [pc, #568]	; (8005eb0 <main+0x2b0>)
 8005c78:	488e      	ldr	r0, [pc, #568]	; (8005eb4 <main+0x2b4>)
 8005c7a:	f004 f868 	bl	8009d4e <HAL_UART_Receive_IT>
			}
		// END UART6 Process Cmd

		// Process Timer2 interrupt after a period of Sampletime
		if (Timer2ControlInterrupt)
 8005c7e:	4b8f      	ldr	r3, [pc, #572]	; (8005ebc <main+0x2bc>)
 8005c80:	781b      	ldrb	r3, [r3, #0]
 8005c82:	b2db      	uxtb	r3, r3
 8005c84:	2b00      	cmp	r3, #0
 8005c86:	f000 83c0 	beq.w	800640a <main+0x80a>
		{
			Timer2ControlInterrupt = false; // Reset the flag
 8005c8a:	4b8c      	ldr	r3, [pc, #560]	; (8005ebc <main+0x2bc>)
 8005c8c:	2200      	movs	r2, #0
 8005c8e:	701a      	strb	r2, [r3, #0]
			// BEGIN running experiment
			if (StartRunning) // Process Running Experiment
 8005c90:	4b8b      	ldr	r3, [pc, #556]	; (8005ec0 <main+0x2c0>)
 8005c92:	781b      	ldrb	r3, [r3, #0]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	f000 809b 	beq.w	8005dd0 <main+0x1d0>
			{
				switch (ExperimentMode)
 8005c9a:	4b8a      	ldr	r3, [pc, #552]	; (8005ec4 <main+0x2c4>)
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	2b03      	cmp	r3, #3
 8005ca0:	d067      	beq.n	8005d72 <main+0x172>
 8005ca2:	2b03      	cmp	r3, #3
 8005ca4:	f300 8096 	bgt.w	8005dd4 <main+0x1d4>
 8005ca8:	2b01      	cmp	r3, #1
 8005caa:	d002      	beq.n	8005cb2 <main+0xb2>
 8005cac:	2b02      	cmp	r3, #2
 8005cae:	d031      	beq.n	8005d14 <main+0x114>
								}
							}
						}
						break;
					default:
						break;
 8005cb0:	e090      	b.n	8005dd4 <main+0x1d4>
						if (Dropping()) // Dropping() return true when it finishing
 8005cb2:	f7fe f899 	bl	8003de8 <Dropping>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	f000 808d 	beq.w	8005dd8 <main+0x1d8>
							if (!POSReach) // Check if position is reached or not
 8005cbe:	4b82      	ldr	r3, [pc, #520]	; (8005ec8 <main+0x2c8>)
 8005cc0:	781b      	ldrb	r3, [r3, #0]
 8005cc2:	f083 0301 	eor.w	r3, r3, #1
 8005cc6:	b2db      	uxtb	r3, r3
 8005cc8:	2b00      	cmp	r3, #0
 8005cca:	f000 8085 	beq.w	8005dd8 <main+0x1d8>
								if (WaitingMiliSecond(2000)) // Wait for 2 Seconds
 8005cce:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005cd2:	f7fb fec9 	bl	8001a68 <WaitingMiliSecond>
 8005cd6:	4603      	mov	r3, r0
 8005cd8:	2b00      	cmp	r3, #0
 8005cda:	d07d      	beq.n	8005dd8 <main+0x1d8>
									StopExperiment();
 8005cdc:	f7fe fc0e 	bl	80044fc <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8005ce0:	4b7a      	ldr	r3, [pc, #488]	; (8005ecc <main+0x2cc>)
 8005ce2:	781b      	ldrb	r3, [r3, #0]
 8005ce4:	2b00      	cmp	r3, #0
 8005ce6:	d077      	beq.n	8005dd8 <main+0x1d8>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset/ clear the array
 8005ce8:	225a      	movs	r2, #90	; 0x5a
 8005cea:	2100      	movs	r1, #0
 8005cec:	4878      	ldr	r0, [pc, #480]	; (8005ed0 <main+0x2d0>)
 8005cee:	f004 fff5 	bl	800acdc <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8005cf2:	4978      	ldr	r1, [pc, #480]	; (8005ed4 <main+0x2d4>)
 8005cf4:	4876      	ldr	r0, [pc, #472]	; (8005ed0 <main+0x2d0>)
 8005cf6:	f005 fe79 	bl	800b9ec <siprintf>
 8005cfa:	4603      	mov	r3, r0
 8005cfc:	b2da      	uxtb	r2, r3
 8005cfe:	4b76      	ldr	r3, [pc, #472]	; (8005ed8 <main+0x2d8>)
 8005d00:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005d02:	4b75      	ldr	r3, [pc, #468]	; (8005ed8 <main+0x2d8>)
 8005d04:	781b      	ldrb	r3, [r3, #0]
 8005d06:	b29a      	uxth	r2, r3
 8005d08:	23c8      	movs	r3, #200	; 0xc8
 8005d0a:	4971      	ldr	r1, [pc, #452]	; (8005ed0 <main+0x2d0>)
 8005d0c:	4869      	ldr	r0, [pc, #420]	; (8005eb4 <main+0x2b4>)
 8005d0e:	f003 ff8c 	bl	8009c2a <HAL_UART_Transmit>
						break;
 8005d12:	e061      	b.n	8005dd8 <main+0x1d8>
						if (PullingExperiment()) // PullingExperiment() return true when it finishing
 8005d14:	f7fc fb74 	bl	8002400 <PullingExperiment>
 8005d18:	4603      	mov	r3, r0
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d05e      	beq.n	8005ddc <main+0x1dc>
							if (!POSReach) // Check if position is reached or not
 8005d1e:	4b6a      	ldr	r3, [pc, #424]	; (8005ec8 <main+0x2c8>)
 8005d20:	781b      	ldrb	r3, [r3, #0]
 8005d22:	f083 0301 	eor.w	r3, r3, #1
 8005d26:	b2db      	uxtb	r3, r3
 8005d28:	2b00      	cmp	r3, #0
 8005d2a:	d057      	beq.n	8005ddc <main+0x1dc>
								if (WaitingMiliSecond(2000)) // Wait for 2 Seconds
 8005d2c:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005d30:	f7fb fe9a 	bl	8001a68 <WaitingMiliSecond>
 8005d34:	4603      	mov	r3, r0
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d050      	beq.n	8005ddc <main+0x1dc>
									StopExperiment();
 8005d3a:	f7fe fbdf 	bl	80044fc <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8005d3e:	4b63      	ldr	r3, [pc, #396]	; (8005ecc <main+0x2cc>)
 8005d40:	781b      	ldrb	r3, [r3, #0]
 8005d42:	2b00      	cmp	r3, #0
 8005d44:	d04a      	beq.n	8005ddc <main+0x1dc>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005d46:	225a      	movs	r2, #90	; 0x5a
 8005d48:	2100      	movs	r1, #0
 8005d4a:	4861      	ldr	r0, [pc, #388]	; (8005ed0 <main+0x2d0>)
 8005d4c:	f004 ffc6 	bl	800acdc <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8005d50:	4960      	ldr	r1, [pc, #384]	; (8005ed4 <main+0x2d4>)
 8005d52:	485f      	ldr	r0, [pc, #380]	; (8005ed0 <main+0x2d0>)
 8005d54:	f005 fe4a 	bl	800b9ec <siprintf>
 8005d58:	4603      	mov	r3, r0
 8005d5a:	b2da      	uxtb	r2, r3
 8005d5c:	4b5e      	ldr	r3, [pc, #376]	; (8005ed8 <main+0x2d8>)
 8005d5e:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005d60:	4b5d      	ldr	r3, [pc, #372]	; (8005ed8 <main+0x2d8>)
 8005d62:	781b      	ldrb	r3, [r3, #0]
 8005d64:	b29a      	uxth	r2, r3
 8005d66:	23c8      	movs	r3, #200	; 0xc8
 8005d68:	4959      	ldr	r1, [pc, #356]	; (8005ed0 <main+0x2d0>)
 8005d6a:	4852      	ldr	r0, [pc, #328]	; (8005eb4 <main+0x2b4>)
 8005d6c:	f003 ff5d 	bl	8009c2a <HAL_UART_Transmit>
						break;
 8005d70:	e034      	b.n	8005ddc <main+0x1dc>
						if (PullAndDrop()) // PullingExperiment() return true when it finishing
 8005d72:	f7fe fb4d 	bl	8004410 <PullAndDrop>
 8005d76:	4603      	mov	r3, r0
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d031      	beq.n	8005de0 <main+0x1e0>
							if (!POSReach) // Check if position is reached or not
 8005d7c:	4b52      	ldr	r3, [pc, #328]	; (8005ec8 <main+0x2c8>)
 8005d7e:	781b      	ldrb	r3, [r3, #0]
 8005d80:	f083 0301 	eor.w	r3, r3, #1
 8005d84:	b2db      	uxtb	r3, r3
 8005d86:	2b00      	cmp	r3, #0
 8005d88:	d02a      	beq.n	8005de0 <main+0x1e0>
								if (WaitingMiliSecond(2000)) // Wait for 3 Seconds
 8005d8a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005d8e:	f7fb fe6b 	bl	8001a68 <WaitingMiliSecond>
 8005d92:	4603      	mov	r3, r0
 8005d94:	2b00      	cmp	r3, #0
 8005d96:	d023      	beq.n	8005de0 <main+0x1e0>
									StopExperiment();
 8005d98:	f7fe fbb0 	bl	80044fc <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8005d9c:	4b4b      	ldr	r3, [pc, #300]	; (8005ecc <main+0x2cc>)
 8005d9e:	781b      	ldrb	r3, [r3, #0]
 8005da0:	2b00      	cmp	r3, #0
 8005da2:	d01d      	beq.n	8005de0 <main+0x1e0>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005da4:	225a      	movs	r2, #90	; 0x5a
 8005da6:	2100      	movs	r1, #0
 8005da8:	4849      	ldr	r0, [pc, #292]	; (8005ed0 <main+0x2d0>)
 8005daa:	f004 ff97 	bl	800acdc <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8005dae:	4949      	ldr	r1, [pc, #292]	; (8005ed4 <main+0x2d4>)
 8005db0:	4847      	ldr	r0, [pc, #284]	; (8005ed0 <main+0x2d0>)
 8005db2:	f005 fe1b 	bl	800b9ec <siprintf>
 8005db6:	4603      	mov	r3, r0
 8005db8:	b2da      	uxtb	r2, r3
 8005dba:	4b47      	ldr	r3, [pc, #284]	; (8005ed8 <main+0x2d8>)
 8005dbc:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005dbe:	4b46      	ldr	r3, [pc, #280]	; (8005ed8 <main+0x2d8>)
 8005dc0:	781b      	ldrb	r3, [r3, #0]
 8005dc2:	b29a      	uxth	r2, r3
 8005dc4:	23c8      	movs	r3, #200	; 0xc8
 8005dc6:	4942      	ldr	r1, [pc, #264]	; (8005ed0 <main+0x2d0>)
 8005dc8:	483a      	ldr	r0, [pc, #232]	; (8005eb4 <main+0x2b4>)
 8005dca:	f003 ff2e 	bl	8009c2a <HAL_UART_Transmit>
						break;
 8005dce:	e007      	b.n	8005de0 <main+0x1e0>
				}
			}
 8005dd0:	bf00      	nop
 8005dd2:	e006      	b.n	8005de2 <main+0x1e2>
						break;
 8005dd4:	bf00      	nop
 8005dd6:	e004      	b.n	8005de2 <main+0x1e2>
						break;
 8005dd8:	bf00      	nop
 8005dda:	e002      	b.n	8005de2 <main+0x1e2>
						break;
 8005ddc:	bf00      	nop
 8005dde:	e000      	b.n	8005de2 <main+0x1e2>
						break;
 8005de0:	bf00      	nop
			// END Running Experiment

			// START SIMULATING EXPERIMENT
			if (StartSimulating) // Process Running Experiment
 8005de2:	4b3e      	ldr	r3, [pc, #248]	; (8005edc <main+0x2dc>)
 8005de4:	781b      	ldrb	r3, [r3, #0]
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 830f 	beq.w	800640a <main+0x80a>
			{
				switch (ExperimentMode)
 8005dec:	4b35      	ldr	r3, [pc, #212]	; (8005ec4 <main+0x2c4>)
 8005dee:	781b      	ldrb	r3, [r3, #0]
 8005df0:	2b03      	cmp	r3, #3
 8005df2:	f000 8205 	beq.w	8006200 <main+0x600>
 8005df6:	2b03      	cmp	r3, #3
 8005df8:	f300 8309 	bgt.w	800640e <main+0x80e>
 8005dfc:	2b01      	cmp	r3, #1
 8005dfe:	d003      	beq.n	8005e08 <main+0x208>
 8005e00:	2b02      	cmp	r3, #2
 8005e02:	f000 80d5 	beq.w	8005fb0 <main+0x3b0>

							memset(ResponseMess, '\0', sizeof(ResponseMess));
						}
						break;
					default:
						break;
 8005e06:	e302      	b.n	800640e <main+0x80e>
						if (SimulateDropping()) // Dropping() return true when it finishing
 8005e08:	f7fd fcc6 	bl	8003798 <SimulateDropping>
 8005e0c:	4603      	mov	r3, r0
 8005e0e:	2b00      	cmp	r3, #0
 8005e10:	f000 82ff 	beq.w	8006412 <main+0x812>
							Initialized = true;
 8005e14:	4b32      	ldr	r3, [pc, #200]	; (8005ee0 <main+0x2e0>)
 8005e16:	2201      	movs	r2, #1
 8005e18:	701a      	strb	r2, [r3, #0]
							if(MotorDriver) // HIGEN DRIVER, the pulse is multiplied by 8
 8005e1a:	4b32      	ldr	r3, [pc, #200]	; (8005ee4 <main+0x2e4>)
 8005e1c:	781b      	ldrb	r3, [r3, #0]
 8005e1e:	2b00      	cmp	r3, #0
 8005e20:	d06c      	beq.n	8005efc <main+0x2fc>
								DroppingTotalDistance = 2*3.14*DrumRadius*8*abs(TotalDroppingPulse)/EncoderResolution;
 8005e22:	4b31      	ldr	r3, [pc, #196]	; (8005ee8 <main+0x2e8>)
 8005e24:	681b      	ldr	r3, [r3, #0]
 8005e26:	4618      	mov	r0, r3
 8005e28:	f7fa fb8e 	bl	8000548 <__aeabi_f2d>
 8005e2c:	a31c      	add	r3, pc, #112	; (adr r3, 8005ea0 <main+0x2a0>)
 8005e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e32:	f7fa fbe1 	bl	80005f8 <__aeabi_dmul>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4610      	mov	r0, r2
 8005e3c:	4619      	mov	r1, r3
 8005e3e:	f04f 0200 	mov.w	r2, #0
 8005e42:	4b2a      	ldr	r3, [pc, #168]	; (8005eec <main+0x2ec>)
 8005e44:	f7fa fbd8 	bl	80005f8 <__aeabi_dmul>
 8005e48:	4602      	mov	r2, r0
 8005e4a:	460b      	mov	r3, r1
 8005e4c:	4614      	mov	r4, r2
 8005e4e:	461d      	mov	r5, r3
 8005e50:	4b27      	ldr	r3, [pc, #156]	; (8005ef0 <main+0x2f0>)
 8005e52:	681b      	ldr	r3, [r3, #0]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	bfb8      	it	lt
 8005e58:	425b      	neglt	r3, r3
 8005e5a:	4618      	mov	r0, r3
 8005e5c:	f7fa fb62 	bl	8000524 <__aeabi_i2d>
 8005e60:	4602      	mov	r2, r0
 8005e62:	460b      	mov	r3, r1
 8005e64:	4620      	mov	r0, r4
 8005e66:	4629      	mov	r1, r5
 8005e68:	f7fa fbc6 	bl	80005f8 <__aeabi_dmul>
 8005e6c:	4602      	mov	r2, r0
 8005e6e:	460b      	mov	r3, r1
 8005e70:	4614      	mov	r4, r2
 8005e72:	461d      	mov	r5, r3
 8005e74:	4b1f      	ldr	r3, [pc, #124]	; (8005ef4 <main+0x2f4>)
 8005e76:	881b      	ldrh	r3, [r3, #0]
 8005e78:	4618      	mov	r0, r3
 8005e7a:	f7fa fb53 	bl	8000524 <__aeabi_i2d>
 8005e7e:	4602      	mov	r2, r0
 8005e80:	460b      	mov	r3, r1
 8005e82:	4620      	mov	r0, r4
 8005e84:	4629      	mov	r1, r5
 8005e86:	f7fa fce1 	bl	800084c <__aeabi_ddiv>
 8005e8a:	4602      	mov	r2, r0
 8005e8c:	460b      	mov	r3, r1
 8005e8e:	4610      	mov	r0, r2
 8005e90:	4619      	mov	r1, r3
 8005e92:	f7fa fea9 	bl	8000be8 <__aeabi_d2f>
 8005e96:	4603      	mov	r3, r0
 8005e98:	4a17      	ldr	r2, [pc, #92]	; (8005ef8 <main+0x2f8>)
 8005e9a:	6013      	str	r3, [r2, #0]
 8005e9c:	e062      	b.n	8005f64 <main+0x364>
 8005e9e:	bf00      	nop
 8005ea0:	51eb851f 	.word	0x51eb851f
 8005ea4:	40191eb8 	.word	0x40191eb8
 8005ea8:	40021000 	.word	0x40021000
 8005eac:	20000224 	.word	0x20000224
 8005eb0:	200003ac 	.word	0x200003ac
 8005eb4:	200002f8 	.word	0x200002f8
 8005eb8:	2000042d 	.word	0x2000042d
 8005ebc:	20000431 	.word	0x20000431
 8005ec0:	20000432 	.word	0x20000432
 8005ec4:	20000005 	.word	0x20000005
 8005ec8:	20000437 	.word	0x20000437
 8005ecc:	2000043e 	.word	0x2000043e
 8005ed0:	200003b0 	.word	0x200003b0
 8005ed4:	0800f890 	.word	0x0800f890
 8005ed8:	20000414 	.word	0x20000414
 8005edc:	20000433 	.word	0x20000433
 8005ee0:	2000043d 	.word	0x2000043d
 8005ee4:	20000003 	.word	0x20000003
 8005ee8:	20000464 	.word	0x20000464
 8005eec:	40200000 	.word	0x40200000
 8005ef0:	20000460 	.word	0x20000460
 8005ef4:	2000000a 	.word	0x2000000a
 8005ef8:	2000047c 	.word	0x2000047c
								DroppingTotalDistance = 2*3.14*DrumRadius*abs(TotalDroppingPulse)/EncoderResolution;
 8005efc:	4bae      	ldr	r3, [pc, #696]	; (80061b8 <main+0x5b8>)
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	4618      	mov	r0, r3
 8005f02:	f7fa fb21 	bl	8000548 <__aeabi_f2d>
 8005f06:	a3a8      	add	r3, pc, #672	; (adr r3, 80061a8 <main+0x5a8>)
 8005f08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f0c:	f7fa fb74 	bl	80005f8 <__aeabi_dmul>
 8005f10:	4602      	mov	r2, r0
 8005f12:	460b      	mov	r3, r1
 8005f14:	4614      	mov	r4, r2
 8005f16:	461d      	mov	r5, r3
 8005f18:	4ba8      	ldr	r3, [pc, #672]	; (80061bc <main+0x5bc>)
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	2b00      	cmp	r3, #0
 8005f1e:	bfb8      	it	lt
 8005f20:	425b      	neglt	r3, r3
 8005f22:	4618      	mov	r0, r3
 8005f24:	f7fa fafe 	bl	8000524 <__aeabi_i2d>
 8005f28:	4602      	mov	r2, r0
 8005f2a:	460b      	mov	r3, r1
 8005f2c:	4620      	mov	r0, r4
 8005f2e:	4629      	mov	r1, r5
 8005f30:	f7fa fb62 	bl	80005f8 <__aeabi_dmul>
 8005f34:	4602      	mov	r2, r0
 8005f36:	460b      	mov	r3, r1
 8005f38:	4614      	mov	r4, r2
 8005f3a:	461d      	mov	r5, r3
 8005f3c:	4ba0      	ldr	r3, [pc, #640]	; (80061c0 <main+0x5c0>)
 8005f3e:	881b      	ldrh	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa faef 	bl	8000524 <__aeabi_i2d>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4620      	mov	r0, r4
 8005f4c:	4629      	mov	r1, r5
 8005f4e:	f7fa fc7d 	bl	800084c <__aeabi_ddiv>
 8005f52:	4602      	mov	r2, r0
 8005f54:	460b      	mov	r3, r1
 8005f56:	4610      	mov	r0, r2
 8005f58:	4619      	mov	r1, r3
 8005f5a:	f7fa fe45 	bl	8000be8 <__aeabi_d2f>
 8005f5e:	4603      	mov	r3, r0
 8005f60:	4a98      	ldr	r2, [pc, #608]	; (80061c4 <main+0x5c4>)
 8005f62:	6013      	str	r3, [r2, #0]
							TxPCLen = sprintf(ResponseMess,"g14/%.1fe",DroppingTotalDistance);
 8005f64:	4b97      	ldr	r3, [pc, #604]	; (80061c4 <main+0x5c4>)
 8005f66:	681b      	ldr	r3, [r3, #0]
 8005f68:	4618      	mov	r0, r3
 8005f6a:	f7fa faed 	bl	8000548 <__aeabi_f2d>
 8005f6e:	4602      	mov	r2, r0
 8005f70:	460b      	mov	r3, r1
 8005f72:	4995      	ldr	r1, [pc, #596]	; (80061c8 <main+0x5c8>)
 8005f74:	4895      	ldr	r0, [pc, #596]	; (80061cc <main+0x5cc>)
 8005f76:	f005 fd39 	bl	800b9ec <siprintf>
 8005f7a:	4603      	mov	r3, r0
 8005f7c:	b2da      	uxtb	r2, r3
 8005f7e:	4b94      	ldr	r3, [pc, #592]	; (80061d0 <main+0x5d0>)
 8005f80:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8005f82:	4b93      	ldr	r3, [pc, #588]	; (80061d0 <main+0x5d0>)
 8005f84:	781b      	ldrb	r3, [r3, #0]
 8005f86:	b29a      	uxth	r2, r3
 8005f88:	23c8      	movs	r3, #200	; 0xc8
 8005f8a:	4990      	ldr	r1, [pc, #576]	; (80061cc <main+0x5cc>)
 8005f8c:	4891      	ldr	r0, [pc, #580]	; (80061d4 <main+0x5d4>)
 8005f8e:	f003 fe4c 	bl	8009c2a <HAL_UART_Transmit>
							HAL_Delay(100);
 8005f92:	2064      	movs	r0, #100	; 0x64
 8005f94:	f001 fc26 	bl	80077e4 <HAL_Delay>
							memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005f98:	220f      	movs	r2, #15
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	488b      	ldr	r0, [pc, #556]	; (80061cc <main+0x5cc>)
 8005f9e:	f004 fe9d 	bl	800acdc <memset>
							PulseSimuCount = 0;
 8005fa2:	4b8d      	ldr	r3, [pc, #564]	; (80061d8 <main+0x5d8>)
 8005fa4:	2200      	movs	r2, #0
 8005fa6:	601a      	str	r2, [r3, #0]
							StartSimulating = false;
 8005fa8:	4b8c      	ldr	r3, [pc, #560]	; (80061dc <main+0x5dc>)
 8005faa:	2200      	movs	r2, #0
 8005fac:	701a      	strb	r2, [r3, #0]
						break;
 8005fae:	e230      	b.n	8006412 <main+0x812>
						if (SimulatePulling()) // PullingExperiment() return true when it finishing
 8005fb0:	f7fc ff2e 	bl	8002e10 <SimulatePulling>
 8005fb4:	4603      	mov	r3, r0
 8005fb6:	2b00      	cmp	r3, #0
 8005fb8:	f000 822d 	beq.w	8006416 <main+0x816>
							Initialized = true;
 8005fbc:	4b88      	ldr	r3, [pc, #544]	; (80061e0 <main+0x5e0>)
 8005fbe:	2201      	movs	r2, #1
 8005fc0:	701a      	strb	r2, [r3, #0]
							StartSimulating = false;
 8005fc2:	4b86      	ldr	r3, [pc, #536]	; (80061dc <main+0x5dc>)
 8005fc4:	2200      	movs	r2, #0
 8005fc6:	701a      	strb	r2, [r3, #0]
							if(MotorDriver) // HIGEN DRIVER, the pulse is multiplied by 8
 8005fc8:	4b86      	ldr	r3, [pc, #536]	; (80061e4 <main+0x5e4>)
 8005fca:	781b      	ldrb	r3, [r3, #0]
 8005fcc:	2b00      	cmp	r3, #0
 8005fce:	d068      	beq.n	80060a2 <main+0x4a2>
								PullingTotalDistance = DistCoeff*2*3.14*DrumRadius*8*abs(TotalPullingPulse)/EncoderResolution;
 8005fd0:	4b85      	ldr	r3, [pc, #532]	; (80061e8 <main+0x5e8>)
 8005fd2:	edd3 7a00 	vldr	s15, [r3]
 8005fd6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fda:	ee17 0a90 	vmov	r0, s15
 8005fde:	f7fa fab3 	bl	8000548 <__aeabi_f2d>
 8005fe2:	a373      	add	r3, pc, #460	; (adr r3, 80061b0 <main+0x5b0>)
 8005fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fe8:	f7fa fb06 	bl	80005f8 <__aeabi_dmul>
 8005fec:	4602      	mov	r2, r0
 8005fee:	460b      	mov	r3, r1
 8005ff0:	4614      	mov	r4, r2
 8005ff2:	461d      	mov	r5, r3
 8005ff4:	4b70      	ldr	r3, [pc, #448]	; (80061b8 <main+0x5b8>)
 8005ff6:	681b      	ldr	r3, [r3, #0]
 8005ff8:	4618      	mov	r0, r3
 8005ffa:	f7fa faa5 	bl	8000548 <__aeabi_f2d>
 8005ffe:	4602      	mov	r2, r0
 8006000:	460b      	mov	r3, r1
 8006002:	4620      	mov	r0, r4
 8006004:	4629      	mov	r1, r5
 8006006:	f7fa faf7 	bl	80005f8 <__aeabi_dmul>
 800600a:	4602      	mov	r2, r0
 800600c:	460b      	mov	r3, r1
 800600e:	4610      	mov	r0, r2
 8006010:	4619      	mov	r1, r3
 8006012:	f04f 0200 	mov.w	r2, #0
 8006016:	4b75      	ldr	r3, [pc, #468]	; (80061ec <main+0x5ec>)
 8006018:	f7fa faee 	bl	80005f8 <__aeabi_dmul>
 800601c:	4602      	mov	r2, r0
 800601e:	460b      	mov	r3, r1
 8006020:	4614      	mov	r4, r2
 8006022:	461d      	mov	r5, r3
 8006024:	4b72      	ldr	r3, [pc, #456]	; (80061f0 <main+0x5f0>)
 8006026:	681b      	ldr	r3, [r3, #0]
 8006028:	2b00      	cmp	r3, #0
 800602a:	bfb8      	it	lt
 800602c:	425b      	neglt	r3, r3
 800602e:	4618      	mov	r0, r3
 8006030:	f7fa fa78 	bl	8000524 <__aeabi_i2d>
 8006034:	4602      	mov	r2, r0
 8006036:	460b      	mov	r3, r1
 8006038:	4620      	mov	r0, r4
 800603a:	4629      	mov	r1, r5
 800603c:	f7fa fadc 	bl	80005f8 <__aeabi_dmul>
 8006040:	4602      	mov	r2, r0
 8006042:	460b      	mov	r3, r1
 8006044:	4614      	mov	r4, r2
 8006046:	461d      	mov	r5, r3
 8006048:	4b5d      	ldr	r3, [pc, #372]	; (80061c0 <main+0x5c0>)
 800604a:	881b      	ldrh	r3, [r3, #0]
 800604c:	4618      	mov	r0, r3
 800604e:	f7fa fa69 	bl	8000524 <__aeabi_i2d>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4620      	mov	r0, r4
 8006058:	4629      	mov	r1, r5
 800605a:	f7fa fbf7 	bl	800084c <__aeabi_ddiv>
 800605e:	4602      	mov	r2, r0
 8006060:	460b      	mov	r3, r1
 8006062:	4610      	mov	r0, r2
 8006064:	4619      	mov	r1, r3
 8006066:	f7fa fdbf 	bl	8000be8 <__aeabi_d2f>
 800606a:	4603      	mov	r3, r0
 800606c:	4a61      	ldr	r2, [pc, #388]	; (80061f4 <main+0x5f4>)
 800606e:	6013      	str	r3, [r2, #0]
								PullingBotomPulseCmdPosition = DistCoeff*8*abs(TotalPullingPulse);
 8006070:	4b5d      	ldr	r3, [pc, #372]	; (80061e8 <main+0x5e8>)
 8006072:	edd3 7a00 	vldr	s15, [r3]
 8006076:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 800607a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800607e:	4b5c      	ldr	r3, [pc, #368]	; (80061f0 <main+0x5f0>)
 8006080:	681b      	ldr	r3, [r3, #0]
 8006082:	2b00      	cmp	r3, #0
 8006084:	bfb8      	it	lt
 8006086:	425b      	neglt	r3, r3
 8006088:	ee07 3a90 	vmov	s15, r3
 800608c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006090:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006094:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006098:	ee17 2a90 	vmov	r2, s15
 800609c:	4b56      	ldr	r3, [pc, #344]	; (80061f8 <main+0x5f8>)
 800609e:	601a      	str	r2, [r3, #0]
 80060a0:	e05a      	b.n	8006158 <main+0x558>
								PullingTotalDistance = DistCoeff*2*3.14*DrumRadius*abs(TotalPullingPulse)/EncoderResolution;
 80060a2:	4b51      	ldr	r3, [pc, #324]	; (80061e8 <main+0x5e8>)
 80060a4:	edd3 7a00 	vldr	s15, [r3]
 80060a8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80060ac:	ee17 0a90 	vmov	r0, s15
 80060b0:	f7fa fa4a 	bl	8000548 <__aeabi_f2d>
 80060b4:	a33e      	add	r3, pc, #248	; (adr r3, 80061b0 <main+0x5b0>)
 80060b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80060ba:	f7fa fa9d 	bl	80005f8 <__aeabi_dmul>
 80060be:	4602      	mov	r2, r0
 80060c0:	460b      	mov	r3, r1
 80060c2:	4614      	mov	r4, r2
 80060c4:	461d      	mov	r5, r3
 80060c6:	4b3c      	ldr	r3, [pc, #240]	; (80061b8 <main+0x5b8>)
 80060c8:	681b      	ldr	r3, [r3, #0]
 80060ca:	4618      	mov	r0, r3
 80060cc:	f7fa fa3c 	bl	8000548 <__aeabi_f2d>
 80060d0:	4602      	mov	r2, r0
 80060d2:	460b      	mov	r3, r1
 80060d4:	4620      	mov	r0, r4
 80060d6:	4629      	mov	r1, r5
 80060d8:	f7fa fa8e 	bl	80005f8 <__aeabi_dmul>
 80060dc:	4602      	mov	r2, r0
 80060de:	460b      	mov	r3, r1
 80060e0:	4614      	mov	r4, r2
 80060e2:	461d      	mov	r5, r3
 80060e4:	4b42      	ldr	r3, [pc, #264]	; (80061f0 <main+0x5f0>)
 80060e6:	681b      	ldr	r3, [r3, #0]
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	bfb8      	it	lt
 80060ec:	425b      	neglt	r3, r3
 80060ee:	4618      	mov	r0, r3
 80060f0:	f7fa fa18 	bl	8000524 <__aeabi_i2d>
 80060f4:	4602      	mov	r2, r0
 80060f6:	460b      	mov	r3, r1
 80060f8:	4620      	mov	r0, r4
 80060fa:	4629      	mov	r1, r5
 80060fc:	f7fa fa7c 	bl	80005f8 <__aeabi_dmul>
 8006100:	4602      	mov	r2, r0
 8006102:	460b      	mov	r3, r1
 8006104:	4614      	mov	r4, r2
 8006106:	461d      	mov	r5, r3
 8006108:	4b2d      	ldr	r3, [pc, #180]	; (80061c0 <main+0x5c0>)
 800610a:	881b      	ldrh	r3, [r3, #0]
 800610c:	4618      	mov	r0, r3
 800610e:	f7fa fa09 	bl	8000524 <__aeabi_i2d>
 8006112:	4602      	mov	r2, r0
 8006114:	460b      	mov	r3, r1
 8006116:	4620      	mov	r0, r4
 8006118:	4629      	mov	r1, r5
 800611a:	f7fa fb97 	bl	800084c <__aeabi_ddiv>
 800611e:	4602      	mov	r2, r0
 8006120:	460b      	mov	r3, r1
 8006122:	4610      	mov	r0, r2
 8006124:	4619      	mov	r1, r3
 8006126:	f7fa fd5f 	bl	8000be8 <__aeabi_d2f>
 800612a:	4603      	mov	r3, r0
 800612c:	4a31      	ldr	r2, [pc, #196]	; (80061f4 <main+0x5f4>)
 800612e:	6013      	str	r3, [r2, #0]
								PullingBotomPulseCmdPosition = DistCoeff*abs(TotalPullingPulse);
 8006130:	4b2f      	ldr	r3, [pc, #188]	; (80061f0 <main+0x5f0>)
 8006132:	681b      	ldr	r3, [r3, #0]
 8006134:	2b00      	cmp	r3, #0
 8006136:	bfb8      	it	lt
 8006138:	425b      	neglt	r3, r3
 800613a:	ee07 3a90 	vmov	s15, r3
 800613e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006142:	4b29      	ldr	r3, [pc, #164]	; (80061e8 <main+0x5e8>)
 8006144:	edd3 7a00 	vldr	s15, [r3]
 8006148:	ee67 7a27 	vmul.f32	s15, s14, s15
 800614c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006150:	ee17 2a90 	vmov	r2, s15
 8006154:	4b28      	ldr	r3, [pc, #160]	; (80061f8 <main+0x5f8>)
 8006156:	601a      	str	r2, [r3, #0]
							TotalPullingPulse = 0;
 8006158:	4b25      	ldr	r3, [pc, #148]	; (80061f0 <main+0x5f0>)
 800615a:	2200      	movs	r2, #0
 800615c:	601a      	str	r2, [r3, #0]
							PulseSimuCount = 0;
 800615e:	4b1e      	ldr	r3, [pc, #120]	; (80061d8 <main+0x5d8>)
 8006160:	2200      	movs	r2, #0
 8006162:	601a      	str	r2, [r3, #0]
							TxPCLen = sprintf(ResponseMess,"g15/%.1fe",PullingTotalDistance);
 8006164:	4b23      	ldr	r3, [pc, #140]	; (80061f4 <main+0x5f4>)
 8006166:	681b      	ldr	r3, [r3, #0]
 8006168:	4618      	mov	r0, r3
 800616a:	f7fa f9ed 	bl	8000548 <__aeabi_f2d>
 800616e:	4602      	mov	r2, r0
 8006170:	460b      	mov	r3, r1
 8006172:	4922      	ldr	r1, [pc, #136]	; (80061fc <main+0x5fc>)
 8006174:	4815      	ldr	r0, [pc, #84]	; (80061cc <main+0x5cc>)
 8006176:	f005 fc39 	bl	800b9ec <siprintf>
 800617a:	4603      	mov	r3, r0
 800617c:	b2da      	uxtb	r2, r3
 800617e:	4b14      	ldr	r3, [pc, #80]	; (80061d0 <main+0x5d0>)
 8006180:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8006182:	4b13      	ldr	r3, [pc, #76]	; (80061d0 <main+0x5d0>)
 8006184:	781b      	ldrb	r3, [r3, #0]
 8006186:	b29a      	uxth	r2, r3
 8006188:	23c8      	movs	r3, #200	; 0xc8
 800618a:	4910      	ldr	r1, [pc, #64]	; (80061cc <main+0x5cc>)
 800618c:	4811      	ldr	r0, [pc, #68]	; (80061d4 <main+0x5d4>)
 800618e:	f003 fd4c 	bl	8009c2a <HAL_UART_Transmit>
							HAL_Delay(100);
 8006192:	2064      	movs	r0, #100	; 0x64
 8006194:	f001 fb26 	bl	80077e4 <HAL_Delay>
							memset(ResponseMess, '\0', sizeof(ResponseMess));
 8006198:	220f      	movs	r2, #15
 800619a:	2100      	movs	r1, #0
 800619c:	480b      	ldr	r0, [pc, #44]	; (80061cc <main+0x5cc>)
 800619e:	f004 fd9d 	bl	800acdc <memset>
						break;
 80061a2:	e138      	b.n	8006416 <main+0x816>
 80061a4:	f3af 8000 	nop.w
 80061a8:	51eb851f 	.word	0x51eb851f
 80061ac:	40191eb8 	.word	0x40191eb8
 80061b0:	51eb851f 	.word	0x51eb851f
 80061b4:	40091eb8 	.word	0x40091eb8
 80061b8:	20000464 	.word	0x20000464
 80061bc:	20000460 	.word	0x20000460
 80061c0:	2000000a 	.word	0x2000000a
 80061c4:	2000047c 	.word	0x2000047c
 80061c8:	0800f894 	.word	0x0800f894
 80061cc:	2000041c 	.word	0x2000041c
 80061d0:	20000414 	.word	0x20000414
 80061d4:	200002f8 	.word	0x200002f8
 80061d8:	200004b4 	.word	0x200004b4
 80061dc:	20000433 	.word	0x20000433
 80061e0:	2000043d 	.word	0x2000043d
 80061e4:	20000003 	.word	0x20000003
 80061e8:	2000053c 	.word	0x2000053c
 80061ec:	40200000 	.word	0x40200000
 80061f0:	2000045c 	.word	0x2000045c
 80061f4:	200004a4 	.word	0x200004a4
 80061f8:	200004a8 	.word	0x200004a8
 80061fc:	0800f8a0 	.word	0x0800f8a0
						if (SimulatePullAndDrop()) // finish initializing the Pull and Drop Exp
 8006200:	f7fd fdd8 	bl	8003db4 <SimulatePullAndDrop>
 8006204:	4603      	mov	r3, r0
 8006206:	2b00      	cmp	r3, #0
 8006208:	f000 8107 	beq.w	800641a <main+0x81a>
							Initialized = true;
 800620c:	4ba6      	ldr	r3, [pc, #664]	; (80064a8 <main+0x8a8>)
 800620e:	2201      	movs	r2, #1
 8006210:	701a      	strb	r2, [r3, #0]
							StartSimulating = false;
 8006212:	4ba6      	ldr	r3, [pc, #664]	; (80064ac <main+0x8ac>)
 8006214:	2200      	movs	r2, #0
 8006216:	701a      	strb	r2, [r3, #0]
							if(MotorDriver) // HIGEN DRIVER, the pulse is multiplied by 8
 8006218:	4ba5      	ldr	r3, [pc, #660]	; (80064b0 <main+0x8b0>)
 800621a:	781b      	ldrb	r3, [r3, #0]
 800621c:	2b00      	cmp	r3, #0
 800621e:	d068      	beq.n	80062f2 <main+0x6f2>
								PullingTotalDistance = DistCoeff*2*3.14*DrumRadius*8*abs(TotalPullingPulse)/EncoderResolution;
 8006220:	4ba4      	ldr	r3, [pc, #656]	; (80064b4 <main+0x8b4>)
 8006222:	edd3 7a00 	vldr	s15, [r3]
 8006226:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800622a:	ee17 0a90 	vmov	r0, s15
 800622e:	f7fa f98b 	bl	8000548 <__aeabi_f2d>
 8006232:	a39b      	add	r3, pc, #620	; (adr r3, 80064a0 <main+0x8a0>)
 8006234:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006238:	f7fa f9de 	bl	80005f8 <__aeabi_dmul>
 800623c:	4602      	mov	r2, r0
 800623e:	460b      	mov	r3, r1
 8006240:	4614      	mov	r4, r2
 8006242:	461d      	mov	r5, r3
 8006244:	4b9c      	ldr	r3, [pc, #624]	; (80064b8 <main+0x8b8>)
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	4618      	mov	r0, r3
 800624a:	f7fa f97d 	bl	8000548 <__aeabi_f2d>
 800624e:	4602      	mov	r2, r0
 8006250:	460b      	mov	r3, r1
 8006252:	4620      	mov	r0, r4
 8006254:	4629      	mov	r1, r5
 8006256:	f7fa f9cf 	bl	80005f8 <__aeabi_dmul>
 800625a:	4602      	mov	r2, r0
 800625c:	460b      	mov	r3, r1
 800625e:	4610      	mov	r0, r2
 8006260:	4619      	mov	r1, r3
 8006262:	f04f 0200 	mov.w	r2, #0
 8006266:	4b95      	ldr	r3, [pc, #596]	; (80064bc <main+0x8bc>)
 8006268:	f7fa f9c6 	bl	80005f8 <__aeabi_dmul>
 800626c:	4602      	mov	r2, r0
 800626e:	460b      	mov	r3, r1
 8006270:	4614      	mov	r4, r2
 8006272:	461d      	mov	r5, r3
 8006274:	4b92      	ldr	r3, [pc, #584]	; (80064c0 <main+0x8c0>)
 8006276:	681b      	ldr	r3, [r3, #0]
 8006278:	2b00      	cmp	r3, #0
 800627a:	bfb8      	it	lt
 800627c:	425b      	neglt	r3, r3
 800627e:	4618      	mov	r0, r3
 8006280:	f7fa f950 	bl	8000524 <__aeabi_i2d>
 8006284:	4602      	mov	r2, r0
 8006286:	460b      	mov	r3, r1
 8006288:	4620      	mov	r0, r4
 800628a:	4629      	mov	r1, r5
 800628c:	f7fa f9b4 	bl	80005f8 <__aeabi_dmul>
 8006290:	4602      	mov	r2, r0
 8006292:	460b      	mov	r3, r1
 8006294:	4614      	mov	r4, r2
 8006296:	461d      	mov	r5, r3
 8006298:	4b8a      	ldr	r3, [pc, #552]	; (80064c4 <main+0x8c4>)
 800629a:	881b      	ldrh	r3, [r3, #0]
 800629c:	4618      	mov	r0, r3
 800629e:	f7fa f941 	bl	8000524 <__aeabi_i2d>
 80062a2:	4602      	mov	r2, r0
 80062a4:	460b      	mov	r3, r1
 80062a6:	4620      	mov	r0, r4
 80062a8:	4629      	mov	r1, r5
 80062aa:	f7fa facf 	bl	800084c <__aeabi_ddiv>
 80062ae:	4602      	mov	r2, r0
 80062b0:	460b      	mov	r3, r1
 80062b2:	4610      	mov	r0, r2
 80062b4:	4619      	mov	r1, r3
 80062b6:	f7fa fc97 	bl	8000be8 <__aeabi_d2f>
 80062ba:	4603      	mov	r3, r0
 80062bc:	4a82      	ldr	r2, [pc, #520]	; (80064c8 <main+0x8c8>)
 80062be:	6013      	str	r3, [r2, #0]
								PullingBotomPulseCmdPosition = DistCoeff*8*abs(TotalPullingPulse);
 80062c0:	4b7c      	ldr	r3, [pc, #496]	; (80064b4 <main+0x8b4>)
 80062c2:	edd3 7a00 	vldr	s15, [r3]
 80062c6:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80062ca:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062ce:	4b7c      	ldr	r3, [pc, #496]	; (80064c0 <main+0x8c0>)
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	bfb8      	it	lt
 80062d6:	425b      	neglt	r3, r3
 80062d8:	ee07 3a90 	vmov	s15, r3
 80062dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062e4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062e8:	ee17 2a90 	vmov	r2, s15
 80062ec:	4b77      	ldr	r3, [pc, #476]	; (80064cc <main+0x8cc>)
 80062ee:	601a      	str	r2, [r3, #0]
 80062f0:	e05a      	b.n	80063a8 <main+0x7a8>
								PullingTotalDistance = DistCoeff*2*3.14*DrumRadius*abs(TotalPullingPulse)/EncoderResolution;
 80062f2:	4b70      	ldr	r3, [pc, #448]	; (80064b4 <main+0x8b4>)
 80062f4:	edd3 7a00 	vldr	s15, [r3]
 80062f8:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80062fc:	ee17 0a90 	vmov	r0, s15
 8006300:	f7fa f922 	bl	8000548 <__aeabi_f2d>
 8006304:	a366      	add	r3, pc, #408	; (adr r3, 80064a0 <main+0x8a0>)
 8006306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800630a:	f7fa f975 	bl	80005f8 <__aeabi_dmul>
 800630e:	4602      	mov	r2, r0
 8006310:	460b      	mov	r3, r1
 8006312:	4614      	mov	r4, r2
 8006314:	461d      	mov	r5, r3
 8006316:	4b68      	ldr	r3, [pc, #416]	; (80064b8 <main+0x8b8>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4618      	mov	r0, r3
 800631c:	f7fa f914 	bl	8000548 <__aeabi_f2d>
 8006320:	4602      	mov	r2, r0
 8006322:	460b      	mov	r3, r1
 8006324:	4620      	mov	r0, r4
 8006326:	4629      	mov	r1, r5
 8006328:	f7fa f966 	bl	80005f8 <__aeabi_dmul>
 800632c:	4602      	mov	r2, r0
 800632e:	460b      	mov	r3, r1
 8006330:	4614      	mov	r4, r2
 8006332:	461d      	mov	r5, r3
 8006334:	4b62      	ldr	r3, [pc, #392]	; (80064c0 <main+0x8c0>)
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	2b00      	cmp	r3, #0
 800633a:	bfb8      	it	lt
 800633c:	425b      	neglt	r3, r3
 800633e:	4618      	mov	r0, r3
 8006340:	f7fa f8f0 	bl	8000524 <__aeabi_i2d>
 8006344:	4602      	mov	r2, r0
 8006346:	460b      	mov	r3, r1
 8006348:	4620      	mov	r0, r4
 800634a:	4629      	mov	r1, r5
 800634c:	f7fa f954 	bl	80005f8 <__aeabi_dmul>
 8006350:	4602      	mov	r2, r0
 8006352:	460b      	mov	r3, r1
 8006354:	4614      	mov	r4, r2
 8006356:	461d      	mov	r5, r3
 8006358:	4b5a      	ldr	r3, [pc, #360]	; (80064c4 <main+0x8c4>)
 800635a:	881b      	ldrh	r3, [r3, #0]
 800635c:	4618      	mov	r0, r3
 800635e:	f7fa f8e1 	bl	8000524 <__aeabi_i2d>
 8006362:	4602      	mov	r2, r0
 8006364:	460b      	mov	r3, r1
 8006366:	4620      	mov	r0, r4
 8006368:	4629      	mov	r1, r5
 800636a:	f7fa fa6f 	bl	800084c <__aeabi_ddiv>
 800636e:	4602      	mov	r2, r0
 8006370:	460b      	mov	r3, r1
 8006372:	4610      	mov	r0, r2
 8006374:	4619      	mov	r1, r3
 8006376:	f7fa fc37 	bl	8000be8 <__aeabi_d2f>
 800637a:	4603      	mov	r3, r0
 800637c:	4a52      	ldr	r2, [pc, #328]	; (80064c8 <main+0x8c8>)
 800637e:	6013      	str	r3, [r2, #0]
								PullingBotomPulseCmdPosition = DistCoeff*abs(TotalPullingPulse);
 8006380:	4b4f      	ldr	r3, [pc, #316]	; (80064c0 <main+0x8c0>)
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	2b00      	cmp	r3, #0
 8006386:	bfb8      	it	lt
 8006388:	425b      	neglt	r3, r3
 800638a:	ee07 3a90 	vmov	s15, r3
 800638e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8006392:	4b48      	ldr	r3, [pc, #288]	; (80064b4 <main+0x8b4>)
 8006394:	edd3 7a00 	vldr	s15, [r3]
 8006398:	ee67 7a27 	vmul.f32	s15, s14, s15
 800639c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80063a0:	ee17 2a90 	vmov	r2, s15
 80063a4:	4b49      	ldr	r3, [pc, #292]	; (80064cc <main+0x8cc>)
 80063a6:	601a      	str	r2, [r3, #0]
							TotalPullingPulse = 0;
 80063a8:	4b45      	ldr	r3, [pc, #276]	; (80064c0 <main+0x8c0>)
 80063aa:	2200      	movs	r2, #0
 80063ac:	601a      	str	r2, [r3, #0]
							PulseSimuCount = 0;
 80063ae:	4b48      	ldr	r3, [pc, #288]	; (80064d0 <main+0x8d0>)
 80063b0:	2200      	movs	r2, #0
 80063b2:	601a      	str	r2, [r3, #0]
							TxPCLen = sprintf(ResponseMess,"g16/%.1f/%.1fe",PullingTotalDistance, DroppingTotalDistance);
 80063b4:	4b44      	ldr	r3, [pc, #272]	; (80064c8 <main+0x8c8>)
 80063b6:	681b      	ldr	r3, [r3, #0]
 80063b8:	4618      	mov	r0, r3
 80063ba:	f7fa f8c5 	bl	8000548 <__aeabi_f2d>
 80063be:	4604      	mov	r4, r0
 80063c0:	460d      	mov	r5, r1
 80063c2:	4b44      	ldr	r3, [pc, #272]	; (80064d4 <main+0x8d4>)
 80063c4:	681b      	ldr	r3, [r3, #0]
 80063c6:	4618      	mov	r0, r3
 80063c8:	f7fa f8be 	bl	8000548 <__aeabi_f2d>
 80063cc:	4602      	mov	r2, r0
 80063ce:	460b      	mov	r3, r1
 80063d0:	e9cd 2300 	strd	r2, r3, [sp]
 80063d4:	4622      	mov	r2, r4
 80063d6:	462b      	mov	r3, r5
 80063d8:	493f      	ldr	r1, [pc, #252]	; (80064d8 <main+0x8d8>)
 80063da:	4840      	ldr	r0, [pc, #256]	; (80064dc <main+0x8dc>)
 80063dc:	f005 fb06 	bl	800b9ec <siprintf>
 80063e0:	4603      	mov	r3, r0
 80063e2:	b2da      	uxtb	r2, r3
 80063e4:	4b3e      	ldr	r3, [pc, #248]	; (80064e0 <main+0x8e0>)
 80063e6:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80063e8:	4b3d      	ldr	r3, [pc, #244]	; (80064e0 <main+0x8e0>)
 80063ea:	781b      	ldrb	r3, [r3, #0]
 80063ec:	b29a      	uxth	r2, r3
 80063ee:	23c8      	movs	r3, #200	; 0xc8
 80063f0:	493a      	ldr	r1, [pc, #232]	; (80064dc <main+0x8dc>)
 80063f2:	483c      	ldr	r0, [pc, #240]	; (80064e4 <main+0x8e4>)
 80063f4:	f003 fc19 	bl	8009c2a <HAL_UART_Transmit>
							HAL_Delay(100);
 80063f8:	2064      	movs	r0, #100	; 0x64
 80063fa:	f001 f9f3 	bl	80077e4 <HAL_Delay>
							memset(ResponseMess, '\0', sizeof(ResponseMess));
 80063fe:	220f      	movs	r2, #15
 8006400:	2100      	movs	r1, #0
 8006402:	4836      	ldr	r0, [pc, #216]	; (80064dc <main+0x8dc>)
 8006404:	f004 fc6a 	bl	800acdc <memset>
						break;
 8006408:	e007      	b.n	800641a <main+0x81a>
				}
			}
 800640a:	bf00      	nop
 800640c:	e006      	b.n	800641c <main+0x81c>
						break;
 800640e:	bf00      	nop
 8006410:	e004      	b.n	800641c <main+0x81c>
						break;
 8006412:	bf00      	nop
 8006414:	e002      	b.n	800641c <main+0x81c>
						break;
 8006416:	bf00      	nop
 8006418:	e000      	b.n	800641c <main+0x81c>
						break;
 800641a:	bf00      	nop
		}

		// END Timer2ControlInterrupt

		// BEGIN Timer2 interrupt for sending the data
		if (Timer2SampleTimeInterrupt)
 800641c:	4b32      	ldr	r3, [pc, #200]	; (80064e8 <main+0x8e8>)
 800641e:	781b      	ldrb	r3, [r3, #0]
 8006420:	b2db      	uxtb	r3, r3
 8006422:	2b00      	cmp	r3, #0
 8006424:	f000 8202 	beq.w	800682c <main+0xc2c>
		{
			Timer2SampleTimeInterrupt = false;
 8006428:	4b2f      	ldr	r3, [pc, #188]	; (80064e8 <main+0x8e8>)
 800642a:	2200      	movs	r2, #0
 800642c:	701a      	strb	r2, [r3, #0]

			if (StartRunning)
 800642e:	4b2f      	ldr	r3, [pc, #188]	; (80064ec <main+0x8ec>)
 8006430:	781b      	ldrb	r3, [r3, #0]
 8006432:	2b00      	cmp	r3, #0
 8006434:	d00d      	beq.n	8006452 <main+0x852>
			{
				// Read CN1-22-RDY, Check if Servo Ready or not, or Servo ON of OFF.
				// If servo is not ready or not ON, then turn off all the functions
				//if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin) || HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin))
				if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin))
 8006436:	2104      	movs	r1, #4
 8006438:	482d      	ldr	r0, [pc, #180]	; (80064f0 <main+0x8f0>)
 800643a:	f002 f835 	bl	80084a8 <HAL_GPIO_ReadPin>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d006      	beq.n	8006452 <main+0x852>
				{
				// If the servo is not ON. Then stop all the running function
					StopPulseGenerating();
 8006444:	f7fb fad2 	bl	80019ec <StopPulseGenerating>
					StopExperiment();
 8006448:	f7fe f858 	bl	80044fc <StopExperiment>
					IsHoming = false; // Disable Homming
 800644c:	4b29      	ldr	r3, [pc, #164]	; (80064f4 <main+0x8f4>)
 800644e:	2200      	movs	r2, #0
 8006450:	701a      	strb	r2, [r3, #0]
				}
			}

			// BEGIN Software Limit ASDA Driver
			if (!MotorDriver) // Applied for ASDA-A3 Diver since the encoder pulse only can be cleared when cycle the driver
 8006452:	4b17      	ldr	r3, [pc, #92]	; (80064b0 <main+0x8b0>)
 8006454:	781b      	ldrb	r3, [r3, #0]
 8006456:	f083 0301 	eor.w	r3, r3, #1
 800645a:	b2db      	uxtb	r3, r3
 800645c:	2b00      	cmp	r3, #0
 800645e:	d051      	beq.n	8006504 <main+0x904>
			{
				if (StartRunning) // Always turn on the software limit while running
 8006460:	4b22      	ldr	r3, [pc, #136]	; (80064ec <main+0x8ec>)
 8006462:	781b      	ldrb	r3, [r3, #0]
 8006464:	2b00      	cmp	r3, #0
 8006466:	d00b      	beq.n	8006480 <main+0x880>
				{
					if (MotorEncPulse-OriginPulse <= -200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8006468:	4b23      	ldr	r3, [pc, #140]	; (80064f8 <main+0x8f8>)
 800646a:	681a      	ldr	r2, [r3, #0]
 800646c:	4b23      	ldr	r3, [pc, #140]	; (80064fc <main+0x8fc>)
 800646e:	681b      	ldr	r3, [r3, #0]
 8006470:	1ad3      	subs	r3, r2, r3
 8006472:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8006476:	da03      	bge.n	8006480 <main+0x880>
					{
						StopPulseGenerating();
 8006478:	f7fb fab8 	bl	80019ec <StopPulseGenerating>
						StopExperiment();
 800647c:	f7fe f83e 	bl	80044fc <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 8006480:	4b1f      	ldr	r3, [pc, #124]	; (8006500 <main+0x900>)
 8006482:	781b      	ldrb	r3, [r3, #0]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d05c      	beq.n	8006542 <main+0x942>
				{
					if (MotorEncPulse-OriginPulse <= 0) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8006488:	4b1b      	ldr	r3, [pc, #108]	; (80064f8 <main+0x8f8>)
 800648a:	681a      	ldr	r2, [r3, #0]
 800648c:	4b1b      	ldr	r3, [pc, #108]	; (80064fc <main+0x8fc>)
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	1ad3      	subs	r3, r2, r3
 8006492:	2b00      	cmp	r3, #0
 8006494:	dc55      	bgt.n	8006542 <main+0x942>
					{
						StopPulseGenerating();
 8006496:	f7fb faa9 	bl	80019ec <StopPulseGenerating>
						StopExperiment();
 800649a:	f7fe f82f 	bl	80044fc <StopExperiment>
 800649e:	e050      	b.n	8006542 <main+0x942>
 80064a0:	51eb851f 	.word	0x51eb851f
 80064a4:	40091eb8 	.word	0x40091eb8
 80064a8:	2000043d 	.word	0x2000043d
 80064ac:	20000433 	.word	0x20000433
 80064b0:	20000003 	.word	0x20000003
 80064b4:	2000053c 	.word	0x2000053c
 80064b8:	20000464 	.word	0x20000464
 80064bc:	40200000 	.word	0x40200000
 80064c0:	2000045c 	.word	0x2000045c
 80064c4:	2000000a 	.word	0x2000000a
 80064c8:	200004a4 	.word	0x200004a4
 80064cc:	200004a8 	.word	0x200004a8
 80064d0:	200004b4 	.word	0x200004b4
 80064d4:	2000047c 	.word	0x2000047c
 80064d8:	0800f8ac 	.word	0x0800f8ac
 80064dc:	2000041c 	.word	0x2000041c
 80064e0:	20000414 	.word	0x20000414
 80064e4:	200002f8 	.word	0x200002f8
 80064e8:	20000430 	.word	0x20000430
 80064ec:	20000432 	.word	0x20000432
 80064f0:	40021000 	.word	0x40021000
 80064f4:	2000043c 	.word	0x2000043c
 80064f8:	20000510 	.word	0x20000510
 80064fc:	200004ac 	.word	0x200004ac
 8006500:	20000004 	.word	0x20000004
					}
				}
			}
			else // HIGEN FDA Driver, Software Limit Switch
			{
				if (StartRunning)// Always turn on the software limit while running
 8006504:	4b62      	ldr	r3, [pc, #392]	; (8006690 <main+0xa90>)
 8006506:	781b      	ldrb	r3, [r3, #0]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d00a      	beq.n	8006522 <main+0x922>
				{
					if (MotorEncPulse-OriginPulse <= 0) // Software Limit Switch based on actual motor position, 500/2048 pulses
 800650c:	4b61      	ldr	r3, [pc, #388]	; (8006694 <main+0xa94>)
 800650e:	681a      	ldr	r2, [r3, #0]
 8006510:	4b61      	ldr	r3, [pc, #388]	; (8006698 <main+0xa98>)
 8006512:	681b      	ldr	r3, [r3, #0]
 8006514:	1ad3      	subs	r3, r2, r3
 8006516:	2b00      	cmp	r3, #0
 8006518:	dc03      	bgt.n	8006522 <main+0x922>
					{
						StopPulseGenerating();
 800651a:	f7fb fa67 	bl	80019ec <StopPulseGenerating>
						StopExperiment();
 800651e:	f7fd ffed 	bl	80044fc <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 8006522:	4b5e      	ldr	r3, [pc, #376]	; (800669c <main+0xa9c>)
 8006524:	781b      	ldrb	r3, [r3, #0]
 8006526:	2b00      	cmp	r3, #0
 8006528:	d00b      	beq.n	8006542 <main+0x942>
				{
					if (MotorEncPulse-OriginPulse <= 500) // Software Limit Switch based on actual motor position, 500/2048 pulses
 800652a:	4b5a      	ldr	r3, [pc, #360]	; (8006694 <main+0xa94>)
 800652c:	681a      	ldr	r2, [r3, #0]
 800652e:	4b5a      	ldr	r3, [pc, #360]	; (8006698 <main+0xa98>)
 8006530:	681b      	ldr	r3, [r3, #0]
 8006532:	1ad3      	subs	r3, r2, r3
 8006534:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006538:	dc03      	bgt.n	8006542 <main+0x942>
					{
						StopPulseGenerating();
 800653a:	f7fb fa57 	bl	80019ec <StopPulseGenerating>
						StopExperiment();
 800653e:	f7fd ffdd 	bl	80044fc <StopExperiment>
					}
				}
			}
			// END Software Limit ASDA Driver
			//BEGIN Homing
			if (IsHoming)
 8006542:	4b57      	ldr	r3, [pc, #348]	; (80066a0 <main+0xaa0>)
 8006544:	781b      	ldrb	r3, [r3, #0]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d015      	beq.n	8006576 <main+0x976>
			{
				if(CheckGoingToRefPosition(false, 100)) // false = go up, 0 = home position, 100 pulses
 800654a:	2164      	movs	r1, #100	; 0x64
 800654c:	2000      	movs	r0, #0
 800654e:	f7fb fb3f 	bl	8001bd0 <CheckGoingToRefPosition>
 8006552:	4603      	mov	r3, r0
 8006554:	2b00      	cmp	r3, #0
 8006556:	d002      	beq.n	800655e <main+0x95e>
				{
					IsHoming = false; // finish homing
 8006558:	4b51      	ldr	r3, [pc, #324]	; (80066a0 <main+0xaa0>)
 800655a:	2200      	movs	r2, #0
 800655c:	701a      	strb	r2, [r3, #0]
				}

				if (MotorEncPulse-OriginPulse <= 0) // Software Limit
 800655e:	4b4d      	ldr	r3, [pc, #308]	; (8006694 <main+0xa94>)
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	4b4d      	ldr	r3, [pc, #308]	; (8006698 <main+0xa98>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	1ad3      	subs	r3, r2, r3
 8006568:	2b00      	cmp	r3, #0
 800656a:	dc04      	bgt.n	8006576 <main+0x976>
				{
					StopPulseGenerating();
 800656c:	f7fb fa3e 	bl	80019ec <StopPulseGenerating>
					IsHoming = false;
 8006570:	4b4b      	ldr	r3, [pc, #300]	; (80066a0 <main+0xaa0>)
 8006572:	2200      	movs	r2, #0
 8006574:	701a      	strb	r2, [r3, #0]
				}
			}
			//END Homing

			// BEGIN Send data to the UI
			if (UIDataRequest)
 8006576:	4b4b      	ldr	r3, [pc, #300]	; (80066a4 <main+0xaa4>)
 8006578:	781b      	ldrb	r3, [r3, #0]
 800657a:	2b00      	cmp	r3, #0
 800657c:	f000 8127 	beq.w	80067ce <main+0xbce>
			{
				if (MotorDriver) // FDA7000 Driver
 8006580:	4b49      	ldr	r3, [pc, #292]	; (80066a8 <main+0xaa8>)
 8006582:	781b      	ldrb	r3, [r3, #0]
 8006584:	2b00      	cmp	r3, #0
 8006586:	f000 80ab 	beq.w	80066e0 <main+0xae0>
				{
					PositionCmd = 2*3.14*DrumRadius*8*PositionPulseCmd/EncoderResolution;
 800658a:	4b48      	ldr	r3, [pc, #288]	; (80066ac <main+0xaac>)
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	4618      	mov	r0, r3
 8006590:	f7f9 ffda 	bl	8000548 <__aeabi_f2d>
 8006594:	a33c      	add	r3, pc, #240	; (adr r3, 8006688 <main+0xa88>)
 8006596:	e9d3 2300 	ldrd	r2, r3, [r3]
 800659a:	f7fa f82d 	bl	80005f8 <__aeabi_dmul>
 800659e:	4602      	mov	r2, r0
 80065a0:	460b      	mov	r3, r1
 80065a2:	4610      	mov	r0, r2
 80065a4:	4619      	mov	r1, r3
 80065a6:	f04f 0200 	mov.w	r2, #0
 80065aa:	4b41      	ldr	r3, [pc, #260]	; (80066b0 <main+0xab0>)
 80065ac:	f7fa f824 	bl	80005f8 <__aeabi_dmul>
 80065b0:	4602      	mov	r2, r0
 80065b2:	460b      	mov	r3, r1
 80065b4:	4614      	mov	r4, r2
 80065b6:	461d      	mov	r5, r3
 80065b8:	4b3e      	ldr	r3, [pc, #248]	; (80066b4 <main+0xab4>)
 80065ba:	681b      	ldr	r3, [r3, #0]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7f9 ffb1 	bl	8000524 <__aeabi_i2d>
 80065c2:	4602      	mov	r2, r0
 80065c4:	460b      	mov	r3, r1
 80065c6:	4620      	mov	r0, r4
 80065c8:	4629      	mov	r1, r5
 80065ca:	f7fa f815 	bl	80005f8 <__aeabi_dmul>
 80065ce:	4602      	mov	r2, r0
 80065d0:	460b      	mov	r3, r1
 80065d2:	4614      	mov	r4, r2
 80065d4:	461d      	mov	r5, r3
 80065d6:	4b38      	ldr	r3, [pc, #224]	; (80066b8 <main+0xab8>)
 80065d8:	881b      	ldrh	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7f9 ffa2 	bl	8000524 <__aeabi_i2d>
 80065e0:	4602      	mov	r2, r0
 80065e2:	460b      	mov	r3, r1
 80065e4:	4620      	mov	r0, r4
 80065e6:	4629      	mov	r1, r5
 80065e8:	f7fa f930 	bl	800084c <__aeabi_ddiv>
 80065ec:	4602      	mov	r2, r0
 80065ee:	460b      	mov	r3, r1
 80065f0:	4610      	mov	r0, r2
 80065f2:	4619      	mov	r1, r3
 80065f4:	f7fa faf8 	bl	8000be8 <__aeabi_d2f>
 80065f8:	4603      	mov	r3, r0
 80065fa:	4a30      	ldr	r2, [pc, #192]	; (80066bc <main+0xabc>)
 80065fc:	6013      	str	r3, [r2, #0]
					TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,PositionCmd,AccRef);
 80065fe:	4b30      	ldr	r3, [pc, #192]	; (80066c0 <main+0xac0>)
 8006600:	681b      	ldr	r3, [r3, #0]
 8006602:	4618      	mov	r0, r3
 8006604:	f7f9 ffa0 	bl	8000548 <__aeabi_f2d>
 8006608:	e9c7 0100 	strd	r0, r1, [r7]
 800660c:	4b2d      	ldr	r3, [pc, #180]	; (80066c4 <main+0xac4>)
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	4618      	mov	r0, r3
 8006612:	f7f9 ff99 	bl	8000548 <__aeabi_f2d>
 8006616:	4604      	mov	r4, r0
 8006618:	460d      	mov	r5, r1
 800661a:	4b2b      	ldr	r3, [pc, #172]	; (80066c8 <main+0xac8>)
 800661c:	681b      	ldr	r3, [r3, #0]
 800661e:	4618      	mov	r0, r3
 8006620:	f7f9 ff92 	bl	8000548 <__aeabi_f2d>
 8006624:	4680      	mov	r8, r0
 8006626:	4689      	mov	r9, r1
 8006628:	4b24      	ldr	r3, [pc, #144]	; (80066bc <main+0xabc>)
 800662a:	681b      	ldr	r3, [r3, #0]
 800662c:	4618      	mov	r0, r3
 800662e:	f7f9 ff8b 	bl	8000548 <__aeabi_f2d>
 8006632:	4682      	mov	sl, r0
 8006634:	468b      	mov	fp, r1
 8006636:	4b25      	ldr	r3, [pc, #148]	; (80066cc <main+0xacc>)
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	4618      	mov	r0, r3
 800663c:	f7f9 ff84 	bl	8000548 <__aeabi_f2d>
 8006640:	4602      	mov	r2, r0
 8006642:	460b      	mov	r3, r1
 8006644:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006648:	e9cd ab04 	strd	sl, fp, [sp, #16]
 800664c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006650:	e9cd 4500 	strd	r4, r5, [sp]
 8006654:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006658:	491d      	ldr	r1, [pc, #116]	; (80066d0 <main+0xad0>)
 800665a:	481e      	ldr	r0, [pc, #120]	; (80066d4 <main+0xad4>)
 800665c:	f005 f9c6 	bl	800b9ec <siprintf>
 8006660:	4603      	mov	r3, r0
 8006662:	b2da      	uxtb	r2, r3
 8006664:	4b1c      	ldr	r3, [pc, #112]	; (80066d8 <main+0xad8>)
 8006666:	701a      	strb	r2, [r3, #0]
					//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef,PositionCmd);
					HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8006668:	4b1b      	ldr	r3, [pc, #108]	; (80066d8 <main+0xad8>)
 800666a:	781b      	ldrb	r3, [r3, #0]
 800666c:	b29a      	uxth	r2, r3
 800666e:	23c8      	movs	r3, #200	; 0xc8
 8006670:	4918      	ldr	r1, [pc, #96]	; (80066d4 <main+0xad4>)
 8006672:	481a      	ldr	r0, [pc, #104]	; (80066dc <main+0xadc>)
 8006674:	f003 fad9 	bl	8009c2a <HAL_UART_Transmit>
					ReadMultiRegister(StE03,6); // Read from StE03 -> StE08
 8006678:	2106      	movs	r1, #6
 800667a:	200c      	movs	r0, #12
 800667c:	f7fa ff94 	bl	80015a8 <ReadMultiRegister>
 8006680:	e0a0      	b.n	80067c4 <main+0xbc4>
 8006682:	bf00      	nop
 8006684:	f3af 8000 	nop.w
 8006688:	51eb851f 	.word	0x51eb851f
 800668c:	40191eb8 	.word	0x40191eb8
 8006690:	20000432 	.word	0x20000432
 8006694:	20000510 	.word	0x20000510
 8006698:	200004ac 	.word	0x200004ac
 800669c:	20000004 	.word	0x20000004
 80066a0:	2000043c 	.word	0x2000043c
 80066a4:	20000435 	.word	0x20000435
 80066a8:	20000003 	.word	0x20000003
 80066ac:	20000464 	.word	0x20000464
 80066b0:	40200000 	.word	0x40200000
 80066b4:	200004b8 	.word	0x200004b8
 80066b8:	2000000a 	.word	0x2000000a
 80066bc:	20000514 	.word	0x20000514
 80066c0:	20000508 	.word	0x20000508
 80066c4:	20000518 	.word	0x20000518
 80066c8:	20000544 	.word	0x20000544
 80066cc:	20000010 	.word	0x20000010
 80066d0:	0800f8bc 	.word	0x0800f8bc
 80066d4:	200003b0 	.word	0x200003b0
 80066d8:	20000414 	.word	0x20000414
 80066dc:	200002f8 	.word	0x200002f8
				}
				else // ASDA-A3 Driver
				{
					PositionCmd = 2*3.14*DrumRadius*PositionPulseCmd/EncoderResolution;
 80066e0:	4b89      	ldr	r3, [pc, #548]	; (8006908 <main+0xd08>)
 80066e2:	681b      	ldr	r3, [r3, #0]
 80066e4:	4618      	mov	r0, r3
 80066e6:	f7f9 ff2f 	bl	8000548 <__aeabi_f2d>
 80066ea:	a385      	add	r3, pc, #532	; (adr r3, 8006900 <main+0xd00>)
 80066ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066f0:	f7f9 ff82 	bl	80005f8 <__aeabi_dmul>
 80066f4:	4602      	mov	r2, r0
 80066f6:	460b      	mov	r3, r1
 80066f8:	4614      	mov	r4, r2
 80066fa:	461d      	mov	r5, r3
 80066fc:	4b83      	ldr	r3, [pc, #524]	; (800690c <main+0xd0c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	4618      	mov	r0, r3
 8006702:	f7f9 ff0f 	bl	8000524 <__aeabi_i2d>
 8006706:	4602      	mov	r2, r0
 8006708:	460b      	mov	r3, r1
 800670a:	4620      	mov	r0, r4
 800670c:	4629      	mov	r1, r5
 800670e:	f7f9 ff73 	bl	80005f8 <__aeabi_dmul>
 8006712:	4602      	mov	r2, r0
 8006714:	460b      	mov	r3, r1
 8006716:	4614      	mov	r4, r2
 8006718:	461d      	mov	r5, r3
 800671a:	4b7d      	ldr	r3, [pc, #500]	; (8006910 <main+0xd10>)
 800671c:	881b      	ldrh	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f7f9 ff00 	bl	8000524 <__aeabi_i2d>
 8006724:	4602      	mov	r2, r0
 8006726:	460b      	mov	r3, r1
 8006728:	4620      	mov	r0, r4
 800672a:	4629      	mov	r1, r5
 800672c:	f7fa f88e 	bl	800084c <__aeabi_ddiv>
 8006730:	4602      	mov	r2, r0
 8006732:	460b      	mov	r3, r1
 8006734:	4610      	mov	r0, r2
 8006736:	4619      	mov	r1, r3
 8006738:	f7fa fa56 	bl	8000be8 <__aeabi_d2f>
 800673c:	4603      	mov	r3, r0
 800673e:	4a75      	ldr	r2, [pc, #468]	; (8006914 <main+0xd14>)
 8006740:	6013      	str	r3, [r2, #0]
					TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,PositionCmd,AccRef);
 8006742:	4b75      	ldr	r3, [pc, #468]	; (8006918 <main+0xd18>)
 8006744:	681b      	ldr	r3, [r3, #0]
 8006746:	4618      	mov	r0, r3
 8006748:	f7f9 fefe 	bl	8000548 <__aeabi_f2d>
 800674c:	e9c7 0100 	strd	r0, r1, [r7]
 8006750:	4b72      	ldr	r3, [pc, #456]	; (800691c <main+0xd1c>)
 8006752:	681b      	ldr	r3, [r3, #0]
 8006754:	4618      	mov	r0, r3
 8006756:	f7f9 fef7 	bl	8000548 <__aeabi_f2d>
 800675a:	4604      	mov	r4, r0
 800675c:	460d      	mov	r5, r1
 800675e:	4b70      	ldr	r3, [pc, #448]	; (8006920 <main+0xd20>)
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	4618      	mov	r0, r3
 8006764:	f7f9 fef0 	bl	8000548 <__aeabi_f2d>
 8006768:	4680      	mov	r8, r0
 800676a:	4689      	mov	r9, r1
 800676c:	4b69      	ldr	r3, [pc, #420]	; (8006914 <main+0xd14>)
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	4618      	mov	r0, r3
 8006772:	f7f9 fee9 	bl	8000548 <__aeabi_f2d>
 8006776:	4682      	mov	sl, r0
 8006778:	468b      	mov	fp, r1
 800677a:	4b6a      	ldr	r3, [pc, #424]	; (8006924 <main+0xd24>)
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	4618      	mov	r0, r3
 8006780:	f7f9 fee2 	bl	8000548 <__aeabi_f2d>
 8006784:	4602      	mov	r2, r0
 8006786:	460b      	mov	r3, r1
 8006788:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800678c:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006790:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006794:	e9cd 4500 	strd	r4, r5, [sp]
 8006798:	e9d7 2300 	ldrd	r2, r3, [r7]
 800679c:	4962      	ldr	r1, [pc, #392]	; (8006928 <main+0xd28>)
 800679e:	4863      	ldr	r0, [pc, #396]	; (800692c <main+0xd2c>)
 80067a0:	f005 f924 	bl	800b9ec <siprintf>
 80067a4:	4603      	mov	r3, r0
 80067a6:	b2da      	uxtb	r2, r3
 80067a8:	4b61      	ldr	r3, [pc, #388]	; (8006930 <main+0xd30>)
 80067aa:	701a      	strb	r2, [r3, #0]
					//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef, PositionCmd);
					HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80067ac:	4b60      	ldr	r3, [pc, #384]	; (8006930 <main+0xd30>)
 80067ae:	781b      	ldrb	r3, [r3, #0]
 80067b0:	b29a      	uxth	r2, r3
 80067b2:	23c8      	movs	r3, #200	; 0xc8
 80067b4:	495d      	ldr	r1, [pc, #372]	; (800692c <main+0xd2c>)
 80067b6:	485f      	ldr	r0, [pc, #380]	; (8006934 <main+0xd34>)
 80067b8:	f003 fa37 	bl	8009c2a <HAL_UART_Transmit>
					// Read 4 words start from 0x012 to 0x015
					// Encoder pulse: 0x012 + 0x013 (2 words)
					// Motor Speed: 0x014 + 0x015 (2 words)
					// Pulse Error: (2 word)
					// Total is 6 words, 1word = 4 bytes
					ReadMultiRegister(ASDA_MotorSpeed,6);
 80067bc:	2106      	movs	r1, #6
 80067be:	2012      	movs	r0, #18
 80067c0:	f7fa fef2 	bl	80015a8 <ReadMultiRegister>
				}
				memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80067c4:	225a      	movs	r2, #90	; 0x5a
 80067c6:	2100      	movs	r1, #0
 80067c8:	4858      	ldr	r0, [pc, #352]	; (800692c <main+0xd2c>)
 80067ca:	f004 fa87 	bl	800acdc <memset>
			}
			if(OutputDataRequest)
 80067ce:	4b5a      	ldr	r3, [pc, #360]	; (8006938 <main+0xd38>)
 80067d0:	781b      	ldrb	r3, [r3, #0]
 80067d2:	2b00      	cmp	r3, #0
 80067d4:	d02a      	beq.n	800682c <main+0xc2c>
				{
					CountTimerDriverOutput++;
 80067d6:	4b59      	ldr	r3, [pc, #356]	; (800693c <main+0xd3c>)
 80067d8:	881b      	ldrh	r3, [r3, #0]
 80067da:	3301      	adds	r3, #1
 80067dc:	b29a      	uxth	r2, r3
 80067de:	4b57      	ldr	r3, [pc, #348]	; (800693c <main+0xd3c>)
 80067e0:	801a      	strh	r2, [r3, #0]
					if (CountTimerDriverOutput >= 15) // 20*25=500 ms, timer 2 period is 1ms
 80067e2:	4b56      	ldr	r3, [pc, #344]	; (800693c <main+0xd3c>)
 80067e4:	881b      	ldrh	r3, [r3, #0]
 80067e6:	2b0e      	cmp	r3, #14
 80067e8:	d920      	bls.n	800682c <main+0xc2c>
					{
						DriverOutput = ReadLogicF7000Out(); // Read Driver Output
 80067ea:	f7fa fdb1 	bl	8001350 <ReadLogicF7000Out>
 80067ee:	4603      	mov	r3, r0
 80067f0:	461a      	mov	r2, r3
 80067f2:	4b53      	ldr	r3, [pc, #332]	; (8006940 <main+0xd40>)
 80067f4:	801a      	strh	r2, [r3, #0]

						memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80067f6:	225a      	movs	r2, #90	; 0x5a
 80067f8:	2100      	movs	r1, #0
 80067fa:	484c      	ldr	r0, [pc, #304]	; (800692c <main+0xd2c>)
 80067fc:	f004 fa6e 	bl	800acdc <memset>
						TxPCLen = sprintf(TxPCBuff,"o%de",DriverOutput); // 1 means only the driver outputs
 8006800:	4b4f      	ldr	r3, [pc, #316]	; (8006940 <main+0xd40>)
 8006802:	881b      	ldrh	r3, [r3, #0]
 8006804:	461a      	mov	r2, r3
 8006806:	494f      	ldr	r1, [pc, #316]	; (8006944 <main+0xd44>)
 8006808:	4848      	ldr	r0, [pc, #288]	; (800692c <main+0xd2c>)
 800680a:	f005 f8ef 	bl	800b9ec <siprintf>
 800680e:	4603      	mov	r3, r0
 8006810:	b2da      	uxtb	r2, r3
 8006812:	4b47      	ldr	r3, [pc, #284]	; (8006930 <main+0xd30>)
 8006814:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8006816:	4b46      	ldr	r3, [pc, #280]	; (8006930 <main+0xd30>)
 8006818:	781b      	ldrb	r3, [r3, #0]
 800681a:	b29a      	uxth	r2, r3
 800681c:	23c8      	movs	r3, #200	; 0xc8
 800681e:	4943      	ldr	r1, [pc, #268]	; (800692c <main+0xd2c>)
 8006820:	4844      	ldr	r0, [pc, #272]	; (8006934 <main+0xd34>)
 8006822:	f003 fa02 	bl	8009c2a <HAL_UART_Transmit>

						CountTimerDriverOutput = 0;
 8006826:	4b45      	ldr	r3, [pc, #276]	; (800693c <main+0xd3c>)
 8006828:	2200      	movs	r2, #0
 800682a:	801a      	strh	r2, [r3, #0]
			// END Send data to the UI
		}
		// END 20ms period interrupt

		// BEGIN Process Driver Received Data
		if (RxUart5_Cpl_Flag) // Complete receive data from the driver
 800682c:	4b46      	ldr	r3, [pc, #280]	; (8006948 <main+0xd48>)
 800682e:	781b      	ldrb	r3, [r3, #0]
 8006830:	b2db      	uxtb	r3, r3
 8006832:	2b00      	cmp	r3, #0
 8006834:	f43f aa12 	beq.w	8005c5c <main+0x5c>
			{
				RxUart5_Cpl_Flag = false;
 8006838:	4b43      	ldr	r3, [pc, #268]	; (8006948 <main+0xd48>)
 800683a:	2200      	movs	r2, #0
 800683c:	701a      	strb	r2, [r3, #0]

				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 800683e:	4b43      	ldr	r3, [pc, #268]	; (800694c <main+0xd4c>)
 8006840:	2200      	movs	r2, #0
 8006842:	701a      	strb	r2, [r3, #0]
 8006844:	e13c      	b.n	8006ac0 <main+0xec0>
				{
					if (RxDriverBuff[i] == DriverID)
 8006846:	4b41      	ldr	r3, [pc, #260]	; (800694c <main+0xd4c>)
 8006848:	781b      	ldrb	r3, [r3, #0]
 800684a:	461a      	mov	r2, r3
 800684c:	4b40      	ldr	r3, [pc, #256]	; (8006950 <main+0xd50>)
 800684e:	5c9b      	ldrb	r3, [r3, r2]
 8006850:	b2db      	uxtb	r3, r3
 8006852:	2b01      	cmp	r3, #1
 8006854:	f040 812e 	bne.w	8006ab4 <main+0xeb4>
					{
						if (RxDriverBuff[1+i] == 3)
 8006858:	4b3c      	ldr	r3, [pc, #240]	; (800694c <main+0xd4c>)
 800685a:	781b      	ldrb	r3, [r3, #0]
 800685c:	3301      	adds	r3, #1
 800685e:	4a3c      	ldr	r2, [pc, #240]	; (8006950 <main+0xd50>)
 8006860:	5cd3      	ldrb	r3, [r2, r3]
 8006862:	b2db      	uxtb	r3, r3
 8006864:	2b03      	cmp	r3, #3
 8006866:	f040 80df 	bne.w	8006a28 <main+0xe28>
						{
							if (MotorDriver) // FDA7000
 800686a:	4b3a      	ldr	r3, [pc, #232]	; (8006954 <main+0xd54>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b00      	cmp	r3, #0
 8006870:	d076      	beq.n	8006960 <main+0xd60>
							{
								SpeedValueRegion[0] = RxDriverBuff[6+i];
 8006872:	4b36      	ldr	r3, [pc, #216]	; (800694c <main+0xd4c>)
 8006874:	781b      	ldrb	r3, [r3, #0]
 8006876:	3306      	adds	r3, #6
 8006878:	4a35      	ldr	r2, [pc, #212]	; (8006950 <main+0xd50>)
 800687a:	5cd3      	ldrb	r3, [r2, r3]
 800687c:	b2da      	uxtb	r2, r3
 800687e:	4b36      	ldr	r3, [pc, #216]	; (8006958 <main+0xd58>)
 8006880:	701a      	strb	r2, [r3, #0]
								SpeedValueRegion[1] = RxDriverBuff[5+i];
 8006882:	4b32      	ldr	r3, [pc, #200]	; (800694c <main+0xd4c>)
 8006884:	781b      	ldrb	r3, [r3, #0]
 8006886:	3305      	adds	r3, #5
 8006888:	4a31      	ldr	r2, [pc, #196]	; (8006950 <main+0xd50>)
 800688a:	5cd3      	ldrb	r3, [r2, r3]
 800688c:	b2da      	uxtb	r2, r3
 800688e:	4b32      	ldr	r3, [pc, #200]	; (8006958 <main+0xd58>)
 8006890:	705a      	strb	r2, [r3, #1]
								SpeedValueRegion[2] = RxDriverBuff[4+i];
 8006892:	4b2e      	ldr	r3, [pc, #184]	; (800694c <main+0xd4c>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	3304      	adds	r3, #4
 8006898:	4a2d      	ldr	r2, [pc, #180]	; (8006950 <main+0xd50>)
 800689a:	5cd3      	ldrb	r3, [r2, r3]
 800689c:	b2da      	uxtb	r2, r3
 800689e:	4b2e      	ldr	r3, [pc, #184]	; (8006958 <main+0xd58>)
 80068a0:	709a      	strb	r2, [r3, #2]
								SpeedValueRegion[3] = RxDriverBuff[3+i];
 80068a2:	4b2a      	ldr	r3, [pc, #168]	; (800694c <main+0xd4c>)
 80068a4:	781b      	ldrb	r3, [r3, #0]
 80068a6:	3303      	adds	r3, #3
 80068a8:	4a29      	ldr	r2, [pc, #164]	; (8006950 <main+0xd50>)
 80068aa:	5cd3      	ldrb	r3, [r2, r3]
 80068ac:	b2da      	uxtb	r2, r3
 80068ae:	4b2a      	ldr	r3, [pc, #168]	; (8006958 <main+0xd58>)
 80068b0:	70da      	strb	r2, [r3, #3]
 80068b2:	4b29      	ldr	r3, [pc, #164]	; (8006958 <main+0xd58>)
 80068b4:	681b      	ldr	r3, [r3, #0]

								memcpy(&MotorSpeed, SpeedValueRegion, 4);
 80068b6:	4a18      	ldr	r2, [pc, #96]	; (8006918 <main+0xd18>)
 80068b8:	6013      	str	r3, [r2, #0]

								MotorEncPulse = (RxDriverBuff[19+i] << 24) | (RxDriverBuff[20+i] << 16) | (RxDriverBuff[21+i] << 8) | RxDriverBuff[22+i];
 80068ba:	4b24      	ldr	r3, [pc, #144]	; (800694c <main+0xd4c>)
 80068bc:	781b      	ldrb	r3, [r3, #0]
 80068be:	3313      	adds	r3, #19
 80068c0:	4a23      	ldr	r2, [pc, #140]	; (8006950 <main+0xd50>)
 80068c2:	5cd3      	ldrb	r3, [r2, r3]
 80068c4:	b2db      	uxtb	r3, r3
 80068c6:	061a      	lsls	r2, r3, #24
 80068c8:	4b20      	ldr	r3, [pc, #128]	; (800694c <main+0xd4c>)
 80068ca:	781b      	ldrb	r3, [r3, #0]
 80068cc:	3314      	adds	r3, #20
 80068ce:	4920      	ldr	r1, [pc, #128]	; (8006950 <main+0xd50>)
 80068d0:	5ccb      	ldrb	r3, [r1, r3]
 80068d2:	b2db      	uxtb	r3, r3
 80068d4:	041b      	lsls	r3, r3, #16
 80068d6:	431a      	orrs	r2, r3
 80068d8:	4b1c      	ldr	r3, [pc, #112]	; (800694c <main+0xd4c>)
 80068da:	781b      	ldrb	r3, [r3, #0]
 80068dc:	3315      	adds	r3, #21
 80068de:	491c      	ldr	r1, [pc, #112]	; (8006950 <main+0xd50>)
 80068e0:	5ccb      	ldrb	r3, [r1, r3]
 80068e2:	b2db      	uxtb	r3, r3
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	4313      	orrs	r3, r2
 80068e8:	4a18      	ldr	r2, [pc, #96]	; (800694c <main+0xd4c>)
 80068ea:	7812      	ldrb	r2, [r2, #0]
 80068ec:	3216      	adds	r2, #22
 80068ee:	4918      	ldr	r1, [pc, #96]	; (8006950 <main+0xd50>)
 80068f0:	5c8a      	ldrb	r2, [r1, r2]
 80068f2:	b2d2      	uxtb	r2, r2
 80068f4:	4313      	orrs	r3, r2
 80068f6:	4a19      	ldr	r2, [pc, #100]	; (800695c <main+0xd5c>)
 80068f8:	6013      	str	r3, [r2, #0]
 80068fa:	e08b      	b.n	8006a14 <main+0xe14>
 80068fc:	f3af 8000 	nop.w
 8006900:	51eb851f 	.word	0x51eb851f
 8006904:	40191eb8 	.word	0x40191eb8
 8006908:	20000464 	.word	0x20000464
 800690c:	200004b8 	.word	0x200004b8
 8006910:	2000000a 	.word	0x2000000a
 8006914:	20000514 	.word	0x20000514
 8006918:	20000508 	.word	0x20000508
 800691c:	20000518 	.word	0x20000518
 8006920:	20000544 	.word	0x20000544
 8006924:	20000010 	.word	0x20000010
 8006928:	0800f8bc 	.word	0x0800f8bc
 800692c:	200003b0 	.word	0x200003b0
 8006930:	20000414 	.word	0x20000414
 8006934:	200002f8 	.word	0x200002f8
 8006938:	20000001 	.word	0x20000001
 800693c:	20000450 	.word	0x20000450
 8006940:	20000452 	.word	0x20000452
 8006944:	0800f8d8 	.word	0x0800f8d8
 8006948:	2000042e 	.word	0x2000042e
 800694c:	20000415 	.word	0x20000415
 8006950:	20000364 	.word	0x20000364
 8006954:	20000003 	.word	0x20000003
 8006958:	20000418 	.word	0x20000418
 800695c:	20000510 	.word	0x20000510
							}
							else // ASDA-A3
							{
								MotorSpeedBuff = (float)((RxDriverBuff[5+i] << 24) | (RxDriverBuff[6+i] << 16) | (RxDriverBuff[3+i] << 8) | RxDriverBuff[4+i])/((float)-10.0); // Minus to Reverse
 8006960:	4b77      	ldr	r3, [pc, #476]	; (8006b40 <main+0xf40>)
 8006962:	781b      	ldrb	r3, [r3, #0]
 8006964:	3305      	adds	r3, #5
 8006966:	4a77      	ldr	r2, [pc, #476]	; (8006b44 <main+0xf44>)
 8006968:	5cd3      	ldrb	r3, [r2, r3]
 800696a:	b2db      	uxtb	r3, r3
 800696c:	061a      	lsls	r2, r3, #24
 800696e:	4b74      	ldr	r3, [pc, #464]	; (8006b40 <main+0xf40>)
 8006970:	781b      	ldrb	r3, [r3, #0]
 8006972:	3306      	adds	r3, #6
 8006974:	4973      	ldr	r1, [pc, #460]	; (8006b44 <main+0xf44>)
 8006976:	5ccb      	ldrb	r3, [r1, r3]
 8006978:	b2db      	uxtb	r3, r3
 800697a:	041b      	lsls	r3, r3, #16
 800697c:	431a      	orrs	r2, r3
 800697e:	4b70      	ldr	r3, [pc, #448]	; (8006b40 <main+0xf40>)
 8006980:	781b      	ldrb	r3, [r3, #0]
 8006982:	3303      	adds	r3, #3
 8006984:	496f      	ldr	r1, [pc, #444]	; (8006b44 <main+0xf44>)
 8006986:	5ccb      	ldrb	r3, [r1, r3]
 8006988:	b2db      	uxtb	r3, r3
 800698a:	021b      	lsls	r3, r3, #8
 800698c:	4313      	orrs	r3, r2
 800698e:	4a6c      	ldr	r2, [pc, #432]	; (8006b40 <main+0xf40>)
 8006990:	7812      	ldrb	r2, [r2, #0]
 8006992:	3204      	adds	r2, #4
 8006994:	496b      	ldr	r1, [pc, #428]	; (8006b44 <main+0xf44>)
 8006996:	5c8a      	ldrb	r2, [r1, r2]
 8006998:	b2d2      	uxtb	r2, r2
 800699a:	4313      	orrs	r3, r2
 800699c:	ee07 3a90 	vmov	s15, r3
 80069a0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80069a4:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 80069a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80069ac:	4b66      	ldr	r3, [pc, #408]	; (8006b48 <main+0xf48>)
 80069ae:	edc3 7a00 	vstr	s15, [r3]

								if (fabs(MotorSpeedBuff) <= 2000)
 80069b2:	4b65      	ldr	r3, [pc, #404]	; (8006b48 <main+0xf48>)
 80069b4:	edd3 7a00 	vldr	s15, [r3]
 80069b8:	eef0 7ae7 	vabs.f32	s15, s15
 80069bc:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8006b4c <main+0xf4c>
 80069c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80069c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069c8:	d803      	bhi.n	80069d2 <main+0xdd2>
								{
									MotorSpeed = MotorSpeedBuff;
 80069ca:	4b5f      	ldr	r3, [pc, #380]	; (8006b48 <main+0xf48>)
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	4a60      	ldr	r2, [pc, #384]	; (8006b50 <main+0xf50>)
 80069d0:	6013      	str	r3, [r2, #0]
								}

								MotorEncPulse = -((RxDriverBuff[9+i] << 24) | (RxDriverBuff[10+i] << 16) | (RxDriverBuff[7+i] << 8) | RxDriverBuff[8+i]); // Minus to Reverse
 80069d2:	4b5b      	ldr	r3, [pc, #364]	; (8006b40 <main+0xf40>)
 80069d4:	781b      	ldrb	r3, [r3, #0]
 80069d6:	3309      	adds	r3, #9
 80069d8:	4a5a      	ldr	r2, [pc, #360]	; (8006b44 <main+0xf44>)
 80069da:	5cd3      	ldrb	r3, [r2, r3]
 80069dc:	b2db      	uxtb	r3, r3
 80069de:	061a      	lsls	r2, r3, #24
 80069e0:	4b57      	ldr	r3, [pc, #348]	; (8006b40 <main+0xf40>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	330a      	adds	r3, #10
 80069e6:	4957      	ldr	r1, [pc, #348]	; (8006b44 <main+0xf44>)
 80069e8:	5ccb      	ldrb	r3, [r1, r3]
 80069ea:	b2db      	uxtb	r3, r3
 80069ec:	041b      	lsls	r3, r3, #16
 80069ee:	431a      	orrs	r2, r3
 80069f0:	4b53      	ldr	r3, [pc, #332]	; (8006b40 <main+0xf40>)
 80069f2:	781b      	ldrb	r3, [r3, #0]
 80069f4:	3307      	adds	r3, #7
 80069f6:	4953      	ldr	r1, [pc, #332]	; (8006b44 <main+0xf44>)
 80069f8:	5ccb      	ldrb	r3, [r1, r3]
 80069fa:	b2db      	uxtb	r3, r3
 80069fc:	021b      	lsls	r3, r3, #8
 80069fe:	4313      	orrs	r3, r2
 8006a00:	4a4f      	ldr	r2, [pc, #316]	; (8006b40 <main+0xf40>)
 8006a02:	7812      	ldrb	r2, [r2, #0]
 8006a04:	3208      	adds	r2, #8
 8006a06:	494f      	ldr	r1, [pc, #316]	; (8006b44 <main+0xf44>)
 8006a08:	5c8a      	ldrb	r2, [r1, r2]
 8006a0a:	b2d2      	uxtb	r2, r2
 8006a0c:	4313      	orrs	r3, r2
 8006a0e:	425b      	negs	r3, r3
 8006a10:	4a50      	ldr	r2, [pc, #320]	; (8006b54 <main+0xf54>)
 8006a12:	6013      	str	r3, [r2, #0]
							}

							memset (RxDriverBuff, '\0', sizeof (RxDriverBuff)); // reset buffer
 8006a14:	221e      	movs	r2, #30
 8006a16:	2100      	movs	r1, #0
 8006a18:	484a      	ldr	r0, [pc, #296]	; (8006b44 <main+0xf44>)
 8006a1a:	f004 f95f 	bl	800acdc <memset>
							HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte for the next time
 8006a1e:	2201      	movs	r2, #1
 8006a20:	494d      	ldr	r1, [pc, #308]	; (8006b58 <main+0xf58>)
 8006a22:	484e      	ldr	r0, [pc, #312]	; (8006b5c <main+0xf5c>)
 8006a24:	f003 f993 	bl	8009d4e <HAL_UART_Receive_IT>
						}
						if (RxDriverBuff[1] == 6) // Writing to a register
 8006a28:	4b46      	ldr	r3, [pc, #280]	; (8006b44 <main+0xf44>)
 8006a2a:	785b      	ldrb	r3, [r3, #1]
 8006a2c:	b2db      	uxtb	r3, r3
 8006a2e:	2b06      	cmp	r3, #6
 8006a30:	d140      	bne.n	8006ab4 <main+0xeb4>
						{
							// Send to PC to check the writing result
							memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8006a32:	225a      	movs	r2, #90	; 0x5a
 8006a34:	2100      	movs	r1, #0
 8006a36:	484a      	ldr	r0, [pc, #296]	; (8006b60 <main+0xf60>)
 8006a38:	f004 f950 	bl	800acdc <memset>
							TxPCLen = sprintf(TxPCBuff,"w%d/%d/%d/%d/%d/%d/%d/%d/%d/e",RxDriverBuff[0],RxDriverBuff[1],RxDriverBuff[2],RxDriverBuff[3],RxDriverBuff[4],RxDriverBuff[5],RxDriverBuff[6],RxDriverBuff[7],RxDriverBuff[8]);
 8006a3c:	4b41      	ldr	r3, [pc, #260]	; (8006b44 <main+0xf44>)
 8006a3e:	781b      	ldrb	r3, [r3, #0]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	469c      	mov	ip, r3
 8006a44:	4b3f      	ldr	r3, [pc, #252]	; (8006b44 <main+0xf44>)
 8006a46:	785b      	ldrb	r3, [r3, #1]
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	469e      	mov	lr, r3
 8006a4c:	4b3d      	ldr	r3, [pc, #244]	; (8006b44 <main+0xf44>)
 8006a4e:	789b      	ldrb	r3, [r3, #2]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	461a      	mov	r2, r3
 8006a54:	4b3b      	ldr	r3, [pc, #236]	; (8006b44 <main+0xf44>)
 8006a56:	78db      	ldrb	r3, [r3, #3]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	4619      	mov	r1, r3
 8006a5c:	4b39      	ldr	r3, [pc, #228]	; (8006b44 <main+0xf44>)
 8006a5e:	791b      	ldrb	r3, [r3, #4]
 8006a60:	b2db      	uxtb	r3, r3
 8006a62:	4618      	mov	r0, r3
 8006a64:	4b37      	ldr	r3, [pc, #220]	; (8006b44 <main+0xf44>)
 8006a66:	795b      	ldrb	r3, [r3, #5]
 8006a68:	b2db      	uxtb	r3, r3
 8006a6a:	461c      	mov	r4, r3
 8006a6c:	4b35      	ldr	r3, [pc, #212]	; (8006b44 <main+0xf44>)
 8006a6e:	799b      	ldrb	r3, [r3, #6]
 8006a70:	b2db      	uxtb	r3, r3
 8006a72:	461d      	mov	r5, r3
 8006a74:	4b33      	ldr	r3, [pc, #204]	; (8006b44 <main+0xf44>)
 8006a76:	79db      	ldrb	r3, [r3, #7]
 8006a78:	b2db      	uxtb	r3, r3
 8006a7a:	461e      	mov	r6, r3
 8006a7c:	4b31      	ldr	r3, [pc, #196]	; (8006b44 <main+0xf44>)
 8006a7e:	7a1b      	ldrb	r3, [r3, #8]
 8006a80:	b2db      	uxtb	r3, r3
 8006a82:	9306      	str	r3, [sp, #24]
 8006a84:	9605      	str	r6, [sp, #20]
 8006a86:	9504      	str	r5, [sp, #16]
 8006a88:	9403      	str	r4, [sp, #12]
 8006a8a:	9002      	str	r0, [sp, #8]
 8006a8c:	9101      	str	r1, [sp, #4]
 8006a8e:	9200      	str	r2, [sp, #0]
 8006a90:	4673      	mov	r3, lr
 8006a92:	4662      	mov	r2, ip
 8006a94:	4933      	ldr	r1, [pc, #204]	; (8006b64 <main+0xf64>)
 8006a96:	4832      	ldr	r0, [pc, #200]	; (8006b60 <main+0xf60>)
 8006a98:	f004 ffa8 	bl	800b9ec <siprintf>
 8006a9c:	4603      	mov	r3, r0
 8006a9e:	b2da      	uxtb	r2, r3
 8006aa0:	4b31      	ldr	r3, [pc, #196]	; (8006b68 <main+0xf68>)
 8006aa2:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8006aa4:	4b30      	ldr	r3, [pc, #192]	; (8006b68 <main+0xf68>)
 8006aa6:	781b      	ldrb	r3, [r3, #0]
 8006aa8:	b29a      	uxth	r2, r3
 8006aaa:	23c8      	movs	r3, #200	; 0xc8
 8006aac:	492c      	ldr	r1, [pc, #176]	; (8006b60 <main+0xf60>)
 8006aae:	482f      	ldr	r0, [pc, #188]	; (8006b6c <main+0xf6c>)
 8006ab0:	f003 f8bb 	bl	8009c2a <HAL_UART_Transmit>
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8006ab4:	4b22      	ldr	r3, [pc, #136]	; (8006b40 <main+0xf40>)
 8006ab6:	781b      	ldrb	r3, [r3, #0]
 8006ab8:	3301      	adds	r3, #1
 8006aba:	b2da      	uxtb	r2, r3
 8006abc:	4b20      	ldr	r3, [pc, #128]	; (8006b40 <main+0xf40>)
 8006abe:	701a      	strb	r2, [r3, #0]
 8006ac0:	4b1f      	ldr	r3, [pc, #124]	; (8006b40 <main+0xf40>)
 8006ac2:	781b      	ldrb	r3, [r3, #0]
 8006ac4:	2b1e      	cmp	r3, #30
 8006ac6:	f67f aebe 	bls.w	8006846 <main+0xc46>
						}
						//break;
					}
				}
				ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/EncoderResolution; // Calculate Object Position in m
 8006aca:	4b29      	ldr	r3, [pc, #164]	; (8006b70 <main+0xf70>)
 8006acc:	681b      	ldr	r3, [r3, #0]
 8006ace:	4618      	mov	r0, r3
 8006ad0:	f7f9 fd3a 	bl	8000548 <__aeabi_f2d>
 8006ad4:	a318      	add	r3, pc, #96	; (adr r3, 8006b38 <main+0xf38>)
 8006ad6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ada:	f7f9 fd8d 	bl	80005f8 <__aeabi_dmul>
 8006ade:	4602      	mov	r2, r0
 8006ae0:	460b      	mov	r3, r1
 8006ae2:	4614      	mov	r4, r2
 8006ae4:	461d      	mov	r5, r3
 8006ae6:	4b1b      	ldr	r3, [pc, #108]	; (8006b54 <main+0xf54>)
 8006ae8:	681a      	ldr	r2, [r3, #0]
 8006aea:	4b22      	ldr	r3, [pc, #136]	; (8006b74 <main+0xf74>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	1ad3      	subs	r3, r2, r3
 8006af0:	4618      	mov	r0, r3
 8006af2:	f7f9 fd17 	bl	8000524 <__aeabi_i2d>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4620      	mov	r0, r4
 8006afc:	4629      	mov	r1, r5
 8006afe:	f7f9 fd7b 	bl	80005f8 <__aeabi_dmul>
 8006b02:	4602      	mov	r2, r0
 8006b04:	460b      	mov	r3, r1
 8006b06:	4614      	mov	r4, r2
 8006b08:	461d      	mov	r5, r3
 8006b0a:	4b1b      	ldr	r3, [pc, #108]	; (8006b78 <main+0xf78>)
 8006b0c:	881b      	ldrh	r3, [r3, #0]
 8006b0e:	4618      	mov	r0, r3
 8006b10:	f7f9 fd08 	bl	8000524 <__aeabi_i2d>
 8006b14:	4602      	mov	r2, r0
 8006b16:	460b      	mov	r3, r1
 8006b18:	4620      	mov	r0, r4
 8006b1a:	4629      	mov	r1, r5
 8006b1c:	f7f9 fe96 	bl	800084c <__aeabi_ddiv>
 8006b20:	4602      	mov	r2, r0
 8006b22:	460b      	mov	r3, r1
 8006b24:	4610      	mov	r0, r2
 8006b26:	4619      	mov	r1, r3
 8006b28:	f7fa f85e 	bl	8000be8 <__aeabi_d2f>
 8006b2c:	4603      	mov	r3, r0
 8006b2e:	4a13      	ldr	r2, [pc, #76]	; (8006b7c <main+0xf7c>)
 8006b30:	6013      	str	r3, [r2, #0]
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8006b32:	f7ff b893 	b.w	8005c5c <main+0x5c>
 8006b36:	bf00      	nop
 8006b38:	51eb851f 	.word	0x51eb851f
 8006b3c:	40191eb8 	.word	0x40191eb8
 8006b40:	20000415 	.word	0x20000415
 8006b44:	20000364 	.word	0x20000364
 8006b48:	2000050c 	.word	0x2000050c
 8006b4c:	44fa0000 	.word	0x44fa0000
 8006b50:	20000508 	.word	0x20000508
 8006b54:	20000510 	.word	0x20000510
 8006b58:	200003ad 	.word	0x200003ad
 8006b5c:	200002b4 	.word	0x200002b4
 8006b60:	200003b0 	.word	0x200003b0
 8006b64:	0800f8e0 	.word	0x0800f8e0
 8006b68:	20000414 	.word	0x20000414
 8006b6c:	200002f8 	.word	0x200002f8
 8006b70:	20000464 	.word	0x20000464
 8006b74:	200004ac 	.word	0x200004ac
 8006b78:	2000000a 	.word	0x2000000a
 8006b7c:	20000544 	.word	0x20000544

08006b80 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b80:	b580      	push	{r7, lr}
 8006b82:	b094      	sub	sp, #80	; 0x50
 8006b84:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b86:	f107 0320 	add.w	r3, r7, #32
 8006b8a:	2230      	movs	r2, #48	; 0x30
 8006b8c:	2100      	movs	r1, #0
 8006b8e:	4618      	mov	r0, r3
 8006b90:	f004 f8a4 	bl	800acdc <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b94:	f107 030c 	add.w	r3, r7, #12
 8006b98:	2200      	movs	r2, #0
 8006b9a:	601a      	str	r2, [r3, #0]
 8006b9c:	605a      	str	r2, [r3, #4]
 8006b9e:	609a      	str	r2, [r3, #8]
 8006ba0:	60da      	str	r2, [r3, #12]
 8006ba2:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006ba4:	2300      	movs	r3, #0
 8006ba6:	60bb      	str	r3, [r7, #8]
 8006ba8:	4b28      	ldr	r3, [pc, #160]	; (8006c4c <SystemClock_Config+0xcc>)
 8006baa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bac:	4a27      	ldr	r2, [pc, #156]	; (8006c4c <SystemClock_Config+0xcc>)
 8006bae:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006bb2:	6413      	str	r3, [r2, #64]	; 0x40
 8006bb4:	4b25      	ldr	r3, [pc, #148]	; (8006c4c <SystemClock_Config+0xcc>)
 8006bb6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bb8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006bbc:	60bb      	str	r3, [r7, #8]
 8006bbe:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006bc0:	2300      	movs	r3, #0
 8006bc2:	607b      	str	r3, [r7, #4]
 8006bc4:	4b22      	ldr	r3, [pc, #136]	; (8006c50 <SystemClock_Config+0xd0>)
 8006bc6:	681b      	ldr	r3, [r3, #0]
 8006bc8:	4a21      	ldr	r2, [pc, #132]	; (8006c50 <SystemClock_Config+0xd0>)
 8006bca:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006bce:	6013      	str	r3, [r2, #0]
 8006bd0:	4b1f      	ldr	r3, [pc, #124]	; (8006c50 <SystemClock_Config+0xd0>)
 8006bd2:	681b      	ldr	r3, [r3, #0]
 8006bd4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bd8:	607b      	str	r3, [r7, #4]
 8006bda:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006bdc:	2301      	movs	r3, #1
 8006bde:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006be0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006be4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006be6:	2302      	movs	r3, #2
 8006be8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006bea:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006bee:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006bf0:	230c      	movs	r3, #12
 8006bf2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006bf4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006bf8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006bfa:	2302      	movs	r3, #2
 8006bfc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006bfe:	2304      	movs	r3, #4
 8006c00:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006c02:	f107 0320 	add.w	r3, r7, #32
 8006c06:	4618      	mov	r0, r3
 8006c08:	f001 fc9a 	bl	8008540 <HAL_RCC_OscConfig>
 8006c0c:	4603      	mov	r3, r0
 8006c0e:	2b00      	cmp	r3, #0
 8006c10:	d001      	beq.n	8006c16 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8006c12:	f000 fad7 	bl	80071c4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006c16:	230f      	movs	r3, #15
 8006c18:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006c1a:	2302      	movs	r3, #2
 8006c1c:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006c1e:	2300      	movs	r3, #0
 8006c20:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006c22:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c26:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8006c28:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c2c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006c2e:	f107 030c 	add.w	r3, r7, #12
 8006c32:	2105      	movs	r1, #5
 8006c34:	4618      	mov	r0, r3
 8006c36:	f001 fefb 	bl	8008a30 <HAL_RCC_ClockConfig>
 8006c3a:	4603      	mov	r3, r0
 8006c3c:	2b00      	cmp	r3, #0
 8006c3e:	d001      	beq.n	8006c44 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006c40:	f000 fac0 	bl	80071c4 <Error_Handler>
  }
}
 8006c44:	bf00      	nop
 8006c46:	3750      	adds	r7, #80	; 0x50
 8006c48:	46bd      	mov	sp, r7
 8006c4a:	bd80      	pop	{r7, pc}
 8006c4c:	40023800 	.word	0x40023800
 8006c50:	40007000 	.word	0x40007000

08006c54 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006c54:	b580      	push	{r7, lr}
 8006c56:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8006c58:	2200      	movs	r2, #0
 8006c5a:	2100      	movs	r1, #0
 8006c5c:	2047      	movs	r0, #71	; 0x47
 8006c5e:	f000 fed6 	bl	8007a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006c62:	2047      	movs	r0, #71	; 0x47
 8006c64:	f000 feef 	bl	8007a46 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8006c68:	2200      	movs	r2, #0
 8006c6a:	2102      	movs	r1, #2
 8006c6c:	201d      	movs	r0, #29
 8006c6e:	f000 fece 	bl	8007a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006c72:	201d      	movs	r0, #29
 8006c74:	f000 fee7 	bl	8007a46 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8006c78:	2200      	movs	r2, #0
 8006c7a:	2103      	movs	r1, #3
 8006c7c:	201c      	movs	r0, #28
 8006c7e:	f000 fec6 	bl	8007a0e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006c82:	201c      	movs	r0, #28
 8006c84:	f000 fedf 	bl	8007a46 <HAL_NVIC_EnableIRQ>
}
 8006c88:	bf00      	nop
 8006c8a:	bd80      	pop	{r7, pc}

08006c8c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006c8c:	b580      	push	{r7, lr}
 8006c8e:	b08a      	sub	sp, #40	; 0x28
 8006c90:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c92:	f107 0318 	add.w	r3, r7, #24
 8006c96:	2200      	movs	r2, #0
 8006c98:	601a      	str	r2, [r3, #0]
 8006c9a:	605a      	str	r2, [r3, #4]
 8006c9c:	609a      	str	r2, [r3, #8]
 8006c9e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006ca0:	f107 0310 	add.w	r3, r7, #16
 8006ca4:	2200      	movs	r2, #0
 8006ca6:	601a      	str	r2, [r3, #0]
 8006ca8:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006caa:	463b      	mov	r3, r7
 8006cac:	2200      	movs	r2, #0
 8006cae:	601a      	str	r2, [r3, #0]
 8006cb0:	605a      	str	r2, [r3, #4]
 8006cb2:	609a      	str	r2, [r3, #8]
 8006cb4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006cb6:	4b31      	ldr	r3, [pc, #196]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006cb8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006cbc:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8006cbe:	4b2f      	ldr	r3, [pc, #188]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006cc0:	220a      	movs	r2, #10
 8006cc2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006cc4:	4b2d      	ldr	r3, [pc, #180]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006cc6:	2200      	movs	r2, #0
 8006cc8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8006cca:	4b2c      	ldr	r3, [pc, #176]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006ccc:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8006cd0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006cd2:	4b2a      	ldr	r3, [pc, #168]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006cd4:	2200      	movs	r2, #0
 8006cd6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006cd8:	4b28      	ldr	r3, [pc, #160]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006cda:	2280      	movs	r2, #128	; 0x80
 8006cdc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006cde:	4827      	ldr	r0, [pc, #156]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006ce0:	f002 f886 	bl	8008df0 <HAL_TIM_Base_Init>
 8006ce4:	4603      	mov	r3, r0
 8006ce6:	2b00      	cmp	r3, #0
 8006ce8:	d001      	beq.n	8006cee <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8006cea:	f000 fa6b 	bl	80071c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cf2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006cf4:	f107 0318 	add.w	r3, r7, #24
 8006cf8:	4619      	mov	r1, r3
 8006cfa:	4820      	ldr	r0, [pc, #128]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006cfc:	f002 fb64 	bl	80093c8 <HAL_TIM_ConfigClockSource>
 8006d00:	4603      	mov	r3, r0
 8006d02:	2b00      	cmp	r3, #0
 8006d04:	d001      	beq.n	8006d0a <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8006d06:	f000 fa5d 	bl	80071c4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8006d0a:	481c      	ldr	r0, [pc, #112]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006d0c:	f002 f95f 	bl	8008fce <HAL_TIM_IC_Init>
 8006d10:	4603      	mov	r3, r0
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d001      	beq.n	8006d1a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006d16:	f000 fa55 	bl	80071c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006d1a:	2320      	movs	r3, #32
 8006d1c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006d1e:	2300      	movs	r3, #0
 8006d20:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006d22:	f107 0310 	add.w	r3, r7, #16
 8006d26:	4619      	mov	r1, r3
 8006d28:	4814      	ldr	r0, [pc, #80]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006d2a:	f002 fea1 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 8006d2e:	4603      	mov	r3, r0
 8006d30:	2b00      	cmp	r3, #0
 8006d32:	d001      	beq.n	8006d38 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8006d34:	f000 fa46 	bl	80071c4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006d38:	2300      	movs	r3, #0
 8006d3a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006d3c:	2301      	movs	r3, #1
 8006d3e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006d40:	2300      	movs	r3, #0
 8006d42:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8006d44:	2300      	movs	r3, #0
 8006d46:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8006d48:	463b      	mov	r3, r7
 8006d4a:	2200      	movs	r2, #0
 8006d4c:	4619      	mov	r1, r3
 8006d4e:	480b      	ldr	r0, [pc, #44]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006d50:	f002 fa9e 	bl	8009290 <HAL_TIM_IC_ConfigChannel>
 8006d54:	4603      	mov	r3, r0
 8006d56:	2b00      	cmp	r3, #0
 8006d58:	d001      	beq.n	8006d5e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8006d5a:	f000 fa33 	bl	80071c4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8006d5e:	463b      	mov	r3, r7
 8006d60:	2204      	movs	r2, #4
 8006d62:	4619      	mov	r1, r3
 8006d64:	4805      	ldr	r0, [pc, #20]	; (8006d7c <MX_TIM2_Init+0xf0>)
 8006d66:	f002 fa93 	bl	8009290 <HAL_TIM_IC_ConfigChannel>
 8006d6a:	4603      	mov	r3, r0
 8006d6c:	2b00      	cmp	r3, #0
 8006d6e:	d001      	beq.n	8006d74 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8006d70:	f000 fa28 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006d74:	bf00      	nop
 8006d76:	3728      	adds	r7, #40	; 0x28
 8006d78:	46bd      	mov	sp, r7
 8006d7a:	bd80      	pop	{r7, pc}
 8006d7c:	20000224 	.word	0x20000224

08006d80 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006d80:	b580      	push	{r7, lr}
 8006d82:	b086      	sub	sp, #24
 8006d84:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d86:	f107 0308 	add.w	r3, r7, #8
 8006d8a:	2200      	movs	r2, #0
 8006d8c:	601a      	str	r2, [r3, #0]
 8006d8e:	605a      	str	r2, [r3, #4]
 8006d90:	609a      	str	r2, [r3, #8]
 8006d92:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d94:	463b      	mov	r3, r7
 8006d96:	2200      	movs	r2, #0
 8006d98:	601a      	str	r2, [r3, #0]
 8006d9a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006d9c:	4b1c      	ldr	r3, [pc, #112]	; (8006e10 <MX_TIM3_Init+0x90>)
 8006d9e:	4a1d      	ldr	r2, [pc, #116]	; (8006e14 <MX_TIM3_Init+0x94>)
 8006da0:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006da2:	4b1b      	ldr	r3, [pc, #108]	; (8006e10 <MX_TIM3_Init+0x90>)
 8006da4:	2201      	movs	r2, #1
 8006da6:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006da8:	4b19      	ldr	r3, [pc, #100]	; (8006e10 <MX_TIM3_Init+0x90>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168;
 8006dae:	4b18      	ldr	r3, [pc, #96]	; (8006e10 <MX_TIM3_Init+0x90>)
 8006db0:	22a8      	movs	r2, #168	; 0xa8
 8006db2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006db4:	4b16      	ldr	r3, [pc, #88]	; (8006e10 <MX_TIM3_Init+0x90>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006dba:	4b15      	ldr	r3, [pc, #84]	; (8006e10 <MX_TIM3_Init+0x90>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006dc0:	4813      	ldr	r0, [pc, #76]	; (8006e10 <MX_TIM3_Init+0x90>)
 8006dc2:	f002 f815 	bl	8008df0 <HAL_TIM_Base_Init>
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d001      	beq.n	8006dd0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8006dcc:	f000 f9fa 	bl	80071c4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006dd0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dd4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006dd6:	f107 0308 	add.w	r3, r7, #8
 8006dda:	4619      	mov	r1, r3
 8006ddc:	480c      	ldr	r0, [pc, #48]	; (8006e10 <MX_TIM3_Init+0x90>)
 8006dde:	f002 faf3 	bl	80093c8 <HAL_TIM_ConfigClockSource>
 8006de2:	4603      	mov	r3, r0
 8006de4:	2b00      	cmp	r3, #0
 8006de6:	d001      	beq.n	8006dec <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8006de8:	f000 f9ec 	bl	80071c4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006dec:	2300      	movs	r3, #0
 8006dee:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006df0:	2300      	movs	r3, #0
 8006df2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006df4:	463b      	mov	r3, r7
 8006df6:	4619      	mov	r1, r3
 8006df8:	4805      	ldr	r0, [pc, #20]	; (8006e10 <MX_TIM3_Init+0x90>)
 8006dfa:	f002 fe39 	bl	8009a70 <HAL_TIMEx_MasterConfigSynchronization>
 8006dfe:	4603      	mov	r3, r0
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d001      	beq.n	8006e08 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8006e04:	f000 f9de 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006e08:	bf00      	nop
 8006e0a:	3718      	adds	r7, #24
 8006e0c:	46bd      	mov	sp, r7
 8006e0e:	bd80      	pop	{r7, pc}
 8006e10:	2000026c 	.word	0x2000026c
 8006e14:	40000400 	.word	0x40000400

08006e18 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8006e18:	b580      	push	{r7, lr}
 8006e1a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006e1c:	4b11      	ldr	r3, [pc, #68]	; (8006e64 <MX_UART5_Init+0x4c>)
 8006e1e:	4a12      	ldr	r2, [pc, #72]	; (8006e68 <MX_UART5_Init+0x50>)
 8006e20:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8006e22:	4b10      	ldr	r3, [pc, #64]	; (8006e64 <MX_UART5_Init+0x4c>)
 8006e24:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006e28:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006e2a:	4b0e      	ldr	r3, [pc, #56]	; (8006e64 <MX_UART5_Init+0x4c>)
 8006e2c:	2200      	movs	r2, #0
 8006e2e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006e30:	4b0c      	ldr	r3, [pc, #48]	; (8006e64 <MX_UART5_Init+0x4c>)
 8006e32:	2200      	movs	r2, #0
 8006e34:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006e36:	4b0b      	ldr	r3, [pc, #44]	; (8006e64 <MX_UART5_Init+0x4c>)
 8006e38:	2200      	movs	r2, #0
 8006e3a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006e3c:	4b09      	ldr	r3, [pc, #36]	; (8006e64 <MX_UART5_Init+0x4c>)
 8006e3e:	220c      	movs	r2, #12
 8006e40:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e42:	4b08      	ldr	r3, [pc, #32]	; (8006e64 <MX_UART5_Init+0x4c>)
 8006e44:	2200      	movs	r2, #0
 8006e46:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e48:	4b06      	ldr	r3, [pc, #24]	; (8006e64 <MX_UART5_Init+0x4c>)
 8006e4a:	2200      	movs	r2, #0
 8006e4c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006e4e:	4805      	ldr	r0, [pc, #20]	; (8006e64 <MX_UART5_Init+0x4c>)
 8006e50:	f002 fe9e 	bl	8009b90 <HAL_UART_Init>
 8006e54:	4603      	mov	r3, r0
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d001      	beq.n	8006e5e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8006e5a:	f000 f9b3 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006e5e:	bf00      	nop
 8006e60:	bd80      	pop	{r7, pc}
 8006e62:	bf00      	nop
 8006e64:	200002b4 	.word	0x200002b4
 8006e68:	40005000 	.word	0x40005000

08006e6c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8006e6c:	b580      	push	{r7, lr}
 8006e6e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006e70:	4b11      	ldr	r3, [pc, #68]	; (8006eb8 <MX_USART6_UART_Init+0x4c>)
 8006e72:	4a12      	ldr	r2, [pc, #72]	; (8006ebc <MX_USART6_UART_Init+0x50>)
 8006e74:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8006e76:	4b10      	ldr	r3, [pc, #64]	; (8006eb8 <MX_USART6_UART_Init+0x4c>)
 8006e78:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006e7c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006e7e:	4b0e      	ldr	r3, [pc, #56]	; (8006eb8 <MX_USART6_UART_Init+0x4c>)
 8006e80:	2200      	movs	r2, #0
 8006e82:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006e84:	4b0c      	ldr	r3, [pc, #48]	; (8006eb8 <MX_USART6_UART_Init+0x4c>)
 8006e86:	2200      	movs	r2, #0
 8006e88:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006e8a:	4b0b      	ldr	r3, [pc, #44]	; (8006eb8 <MX_USART6_UART_Init+0x4c>)
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006e90:	4b09      	ldr	r3, [pc, #36]	; (8006eb8 <MX_USART6_UART_Init+0x4c>)
 8006e92:	220c      	movs	r2, #12
 8006e94:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e96:	4b08      	ldr	r3, [pc, #32]	; (8006eb8 <MX_USART6_UART_Init+0x4c>)
 8006e98:	2200      	movs	r2, #0
 8006e9a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e9c:	4b06      	ldr	r3, [pc, #24]	; (8006eb8 <MX_USART6_UART_Init+0x4c>)
 8006e9e:	2200      	movs	r2, #0
 8006ea0:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006ea2:	4805      	ldr	r0, [pc, #20]	; (8006eb8 <MX_USART6_UART_Init+0x4c>)
 8006ea4:	f002 fe74 	bl	8009b90 <HAL_UART_Init>
 8006ea8:	4603      	mov	r3, r0
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d001      	beq.n	8006eb2 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006eae:	f000 f989 	bl	80071c4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006eb2:	bf00      	nop
 8006eb4:	bd80      	pop	{r7, pc}
 8006eb6:	bf00      	nop
 8006eb8:	200002f8 	.word	0x200002f8
 8006ebc:	40011400 	.word	0x40011400

08006ec0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006ec0:	b580      	push	{r7, lr}
 8006ec2:	b08c      	sub	sp, #48	; 0x30
 8006ec4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006ec6:	f107 031c 	add.w	r3, r7, #28
 8006eca:	2200      	movs	r2, #0
 8006ecc:	601a      	str	r2, [r3, #0]
 8006ece:	605a      	str	r2, [r3, #4]
 8006ed0:	609a      	str	r2, [r3, #8]
 8006ed2:	60da      	str	r2, [r3, #12]
 8006ed4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006ed6:	2300      	movs	r3, #0
 8006ed8:	61bb      	str	r3, [r7, #24]
 8006eda:	4bb4      	ldr	r3, [pc, #720]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	4ab3      	ldr	r2, [pc, #716]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006ee0:	f043 0310 	orr.w	r3, r3, #16
 8006ee4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ee6:	4bb1      	ldr	r3, [pc, #708]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eea:	f003 0310 	and.w	r3, r3, #16
 8006eee:	61bb      	str	r3, [r7, #24]
 8006ef0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006ef2:	2300      	movs	r3, #0
 8006ef4:	617b      	str	r3, [r7, #20]
 8006ef6:	4bad      	ldr	r3, [pc, #692]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	4aac      	ldr	r2, [pc, #688]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006efc:	f043 0304 	orr.w	r3, r3, #4
 8006f00:	6313      	str	r3, [r2, #48]	; 0x30
 8006f02:	4baa      	ldr	r3, [pc, #680]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f06:	f003 0304 	and.w	r3, r3, #4
 8006f0a:	617b      	str	r3, [r7, #20]
 8006f0c:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006f0e:	2300      	movs	r3, #0
 8006f10:	613b      	str	r3, [r7, #16]
 8006f12:	4ba6      	ldr	r3, [pc, #664]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	4aa5      	ldr	r2, [pc, #660]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f18:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006f1c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f1e:	4ba3      	ldr	r3, [pc, #652]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f22:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f26:	613b      	str	r3, [r7, #16]
 8006f28:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f2a:	2300      	movs	r3, #0
 8006f2c:	60fb      	str	r3, [r7, #12]
 8006f2e:	4b9f      	ldr	r3, [pc, #636]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	4a9e      	ldr	r2, [pc, #632]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f34:	f043 0301 	orr.w	r3, r3, #1
 8006f38:	6313      	str	r3, [r2, #48]	; 0x30
 8006f3a:	4b9c      	ldr	r3, [pc, #624]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f3e:	f003 0301 	and.w	r3, r3, #1
 8006f42:	60fb      	str	r3, [r7, #12]
 8006f44:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f46:	2300      	movs	r3, #0
 8006f48:	60bb      	str	r3, [r7, #8]
 8006f4a:	4b98      	ldr	r3, [pc, #608]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	4a97      	ldr	r2, [pc, #604]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f50:	f043 0302 	orr.w	r3, r3, #2
 8006f54:	6313      	str	r3, [r2, #48]	; 0x30
 8006f56:	4b95      	ldr	r3, [pc, #596]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f5a:	f003 0302 	and.w	r3, r3, #2
 8006f5e:	60bb      	str	r3, [r7, #8]
 8006f60:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f62:	2300      	movs	r3, #0
 8006f64:	607b      	str	r3, [r7, #4]
 8006f66:	4b91      	ldr	r3, [pc, #580]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f6a:	4a90      	ldr	r2, [pc, #576]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f6c:	f043 0308 	orr.w	r3, r3, #8
 8006f70:	6313      	str	r3, [r2, #48]	; 0x30
 8006f72:	4b8e      	ldr	r3, [pc, #568]	; (80071ac <MX_GPIO_Init+0x2ec>)
 8006f74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f76:	f003 0308 	and.w	r3, r3, #8
 8006f7a:	607b      	str	r3, [r7, #4]
 8006f7c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE4_ZIGBEE_PA_EN_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin|Speed1_not_PE13_41_Pin
 8006f7e:	2200      	movs	r2, #0
 8006f80:	f24a 3113 	movw	r1, #41747	; 0xa313
 8006f84:	488a      	ldr	r0, [pc, #552]	; (80071b0 <MX_GPIO_Init+0x2f0>)
 8006f86:	f001 faa7 	bl	80084d8 <HAL_GPIO_WritePin>
                          |PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_ZIGBEE_nRST_Pin|PC8_PR_Pin|PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin, GPIO_PIN_RESET);
 8006f8a:	2200      	movs	r2, #0
 8006f8c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8006f90:	4888      	ldr	r0, [pc, #544]	; (80071b4 <MX_GPIO_Init+0x2f4>)
 8006f92:	f001 faa1 	bl	80084d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8006f96:	2200      	movs	r2, #0
 8006f98:	f649 5108 	movw	r1, #40200	; 0x9d08
 8006f9c:	4886      	ldr	r0, [pc, #536]	; (80071b8 <MX_GPIO_Init+0x2f8>)
 8006f9e:	f001 fa9b 	bl	80084d8 <HAL_GPIO_WritePin>
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin, GPIO_PIN_SET);
 8006fa2:	2201      	movs	r2, #1
 8006fa4:	2130      	movs	r1, #48	; 0x30
 8006fa6:	4883      	ldr	r0, [pc, #524]	; (80071b4 <MX_GPIO_Init+0x2f4>)
 8006fa8:	f001 fa96 	bl	80084d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EStop_Not_PB0_17_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin|PB14_POS_CMD_OPC_EN_Pin
 8006fac:	2200      	movs	r2, #0
 8006fae:	f246 0165 	movw	r1, #24677	; 0x6065
 8006fb2:	4882      	ldr	r0, [pc, #520]	; (80071bc <MX_GPIO_Init+0x2fc>)
 8006fb4:	f001 fa90 	bl	80084d8 <HAL_GPIO_WritePin>
                          |PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ArlarmRST_PB1_42_Pin|PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);
 8006fb8:	2201      	movs	r2, #1
 8006fba:	f248 0102 	movw	r1, #32770	; 0x8002
 8006fbe:	487f      	ldr	r0, [pc, #508]	; (80071bc <MX_GPIO_Init+0x2fc>)
 8006fc0:	f001 fa8a 	bl	80084d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Speed2_Not_PE7_15_Pin|Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin
 8006fc4:	2201      	movs	r2, #1
 8006fc6:	f44f 41b9 	mov.w	r1, #23680	; 0x5c80
 8006fca:	4879      	ldr	r0, [pc, #484]	; (80071b0 <MX_GPIO_Init+0x2f0>)
 8006fcc:	f001 fa84 	bl	80084d8 <HAL_GPIO_WritePin>
                          |CWLIM_Not_PE14_13_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD10_ESP32_EN_GPIO_Port, PD10_ESP32_EN_Pin, GPIO_PIN_SET);
 8006fd0:	2201      	movs	r2, #1
 8006fd2:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fd6:	487a      	ldr	r0, [pc, #488]	; (80071c0 <MX_GPIO_Init+0x300>)
 8006fd8:	f001 fa7e 	bl	80084d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin, GPIO_PIN_RESET);
 8006fdc:	2200      	movs	r2, #0
 8006fde:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8006fe2:	4877      	ldr	r0, [pc, #476]	; (80071c0 <MX_GPIO_Init+0x300>)
 8006fe4:	f001 fa78 	bl	80084d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN1_22_RDY_Pin CN1_21_SPDOUT_TRQOUT_Pin PE5_BLE_GPIO_Pin CN1_48_BRAKE_Pin */
  GPIO_InitStruct.Pin = CN1_22_RDY_Pin|CN1_21_SPDOUT_TRQOUT_Pin|PE5_BLE_GPIO_Pin|CN1_48_BRAKE_Pin;
 8006fe8:	236c      	movs	r3, #108	; 0x6c
 8006fea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fec:	2300      	movs	r3, #0
 8006fee:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006ff4:	f107 031c 	add.w	r3, r7, #28
 8006ff8:	4619      	mov	r1, r3
 8006ffa:	486d      	ldr	r0, [pc, #436]	; (80071b0 <MX_GPIO_Init+0x2f0>)
 8006ffc:	f001 f8b8 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4_ZIGBEE_PA_EN_Pin Speed2_Not_PE7_15_Pin Type_Not_PE8_40_Pin PE9_TIM1_CH1_PFIN_Pin
                           Dir_Not_PE10_14_Pin SPDLIM_Not_PE11_38_Pin CCWLIM_Not_PE12_39_Pin Speed1_not_PE13_41_Pin
                           CWLIM_Not_PE14_13_Pin PE15_RELAY1_Pin PE0_485_MCU_DRV_DIR_Pin PE1_ZIGBEE_EN_Pin */
  GPIO_InitStruct.Pin = PE4_ZIGBEE_PA_EN_Pin|Speed2_Not_PE7_15_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin
 8007000:	f64f 7393 	movw	r3, #65427	; 0xff93
 8007004:	61fb      	str	r3, [r7, #28]
                          |Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin|Speed1_not_PE13_41_Pin
                          |CWLIM_Not_PE14_13_Pin|PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007006:	2301      	movs	r3, #1
 8007008:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800700a:	2300      	movs	r3, #0
 800700c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800700e:	2300      	movs	r3, #0
 8007010:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8007012:	f107 031c 	add.w	r3, r7, #28
 8007016:	4619      	mov	r1, r3
 8007018:	4865      	ldr	r0, [pc, #404]	; (80071b0 <MX_GPIO_Init+0x2f0>)
 800701a:	f001 f8a9 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_USER_BT_MID_Pin CN1_46_ALARM_Pin CN1_47_INSPD_INPOS_Pin CN1_45_NCWOUT_NTQOUT_Pin */
  GPIO_InitStruct.Pin = PC13_USER_BT_MID_Pin|CN1_46_ALARM_Pin|CN1_47_INSPD_INPOS_Pin|CN1_45_NCWOUT_NTQOUT_Pin;
 800701e:	f242 0307 	movw	r3, #8199	; 0x2007
 8007022:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007024:	2300      	movs	r3, #0
 8007026:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007028:	2300      	movs	r3, #0
 800702a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800702c:	f107 031c 	add.w	r3, r7, #28
 8007030:	4619      	mov	r1, r3
 8007032:	4860      	ldr	r0, [pc, #384]	; (80071b4 <MX_GPIO_Init+0x2f4>)
 8007034:	f001 f89c 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_ZIGBEE_nRST_Pin SerVoReset_PC4_18_Pin Stop_PC5_43_Pin PC8_PR_Pin
                           PC9_ZIGBEE_HGM_EN_Pin PC10_SPI3_SCK_SPARE_Pin */
  GPIO_InitStruct.Pin = PC3_ZIGBEE_nRST_Pin|SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin|PC8_PR_Pin
 8007038:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 800703c:	61fb      	str	r3, [r7, #28]
                          |PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800703e:	2301      	movs	r3, #1
 8007040:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007042:	2300      	movs	r3, #0
 8007044:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007046:	2300      	movs	r3, #0
 8007048:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800704a:	f107 031c 	add.w	r3, r7, #28
 800704e:	4619      	mov	r1, r3
 8007050:	4858      	ldr	r0, [pc, #352]	; (80071b4 <MX_GPIO_Init+0x2f4>)
 8007052:	f001 f88d 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_UART4_TX_ESP32_RX_Pin */
  GPIO_InitStruct.Pin = PA0_UART4_TX_ESP32_RX_Pin;
 8007056:	2301      	movs	r3, #1
 8007058:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800705a:	2302      	movs	r3, #2
 800705c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800705e:	2300      	movs	r3, #0
 8007060:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007062:	2303      	movs	r3, #3
 8007064:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8007066:	2308      	movs	r3, #8
 8007068:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PA0_UART4_TX_ESP32_RX_GPIO_Port, &GPIO_InitStruct);
 800706a:	f107 031c 	add.w	r3, r7, #28
 800706e:	4619      	mov	r1, r3
 8007070:	4851      	ldr	r0, [pc, #324]	; (80071b8 <MX_GPIO_Init+0x2f8>)
 8007072:	f001 f87d 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_USER_BT_UP_Pin CN1_20_PCWOUT_PTQOUT_Pin CN1_23_TYPEOUT_Pin PA9_LINE_RECV_SELFTEST_Pin */
  GPIO_InitStruct.Pin = PA2_USER_BT_UP_Pin|CN1_20_PCWOUT_PTQOUT_Pin|CN1_23_TYPEOUT_Pin|PA9_LINE_RECV_SELFTEST_Pin;
 8007076:	f44f 7325 	mov.w	r3, #660	; 0x294
 800707a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800707c:	2300      	movs	r3, #0
 800707e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007080:	2300      	movs	r3, #0
 8007082:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007084:	f107 031c 	add.w	r3, r7, #28
 8007088:	4619      	mov	r1, r3
 800708a:	484b      	ldr	r0, [pc, #300]	; (80071b8 <MX_GPIO_Init+0x2f8>)
 800708c:	f001 f870 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_LCD_RST_Pin PA8_LINE_DRV_SELFTEST2_Pin PA10_LINE_DRV_SELFTEST1_Pin PA11_ENC_RECEIV_EN_Pin
                           PA12_LINE_DRV_EN_Pin PA15_SPI3_NSS_SPARE_Pin */
  GPIO_InitStruct.Pin = PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8007090:	f649 5308 	movw	r3, #40200	; 0x9d08
 8007094:	61fb      	str	r3, [r7, #28]
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007096:	2301      	movs	r3, #1
 8007098:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800709a:	2300      	movs	r3, #0
 800709c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800709e:	2300      	movs	r3, #0
 80070a0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80070a2:	f107 031c 	add.w	r3, r7, #28
 80070a6:	4619      	mov	r1, r3
 80070a8:	4843      	ldr	r0, [pc, #268]	; (80071b8 <MX_GPIO_Init+0x2f8>)
 80070aa:	f001 f861 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : EStop_Not_PB0_17_Pin ArlarmRST_PB1_42_Pin Tor1_PB2_16_Pin PB13_Output_JP7_Pin
                           PB14_POS_CMD_OPC_EN_Pin PB15_485_MCU_PC_DIR_Pin PB5_SPI3_MOSI_SPARE_Pin PB6_RELAY2_Pin */
  GPIO_InitStruct.Pin = EStop_Not_PB0_17_Pin|ArlarmRST_PB1_42_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin
 80070ae:	f24e 0367 	movw	r3, #57447	; 0xe067
 80070b2:	61fb      	str	r3, [r7, #28]
                          |PB14_POS_CMD_OPC_EN_Pin|PB15_485_MCU_PC_DIR_Pin|PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80070b4:	2301      	movs	r3, #1
 80070b6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070b8:	2300      	movs	r3, #0
 80070ba:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80070bc:	2300      	movs	r3, #0
 80070be:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070c0:	f107 031c 	add.w	r3, r7, #28
 80070c4:	4619      	mov	r1, r3
 80070c6:	483d      	ldr	r0, [pc, #244]	; (80071bc <MX_GPIO_Init+0x2fc>)
 80070c8:	f001 f852 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10_I2C2_SCL_LCD_IOEXP_Pin PB11_I2C2_SDA_LCD_IOEXP_Pin */
  GPIO_InitStruct.Pin = PB10_I2C2_SCL_LCD_IOEXP_Pin|PB11_I2C2_SDA_LCD_IOEXP_Pin;
 80070cc:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80070d0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80070d2:	2312      	movs	r3, #18
 80070d4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070d6:	2301      	movs	r3, #1
 80070d8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070da:	2303      	movs	r3, #3
 80070dc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80070de:	2304      	movs	r3, #4
 80070e0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070e2:	f107 031c 	add.w	r3, r7, #28
 80070e6:	4619      	mov	r1, r3
 80070e8:	4834      	ldr	r0, [pc, #208]	; (80071bc <MX_GPIO_Init+0x2fc>)
 80070ea:	f001 f841 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_RELAY3_Pin CN1_19_ZSPD_Pin PB4_SPI3_MISO_SPARE_Pin Input_JP7_Pin */
  GPIO_InitStruct.Pin = PB12_RELAY3_Pin|CN1_19_ZSPD_Pin|PB4_SPI3_MISO_SPARE_Pin|Input_JP7_Pin;
 80070ee:	f241 2318 	movw	r3, #4632	; 0x1218
 80070f2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070f4:	2300      	movs	r3, #0
 80070f6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070f8:	2300      	movs	r3, #0
 80070fa:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070fc:	f107 031c 	add.w	r3, r7, #28
 8007100:	4619      	mov	r1, r3
 8007102:	482e      	ldr	r0, [pc, #184]	; (80071bc <MX_GPIO_Init+0x2fc>)
 8007104:	f001 f834 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8007108:	f44f 7340 	mov.w	r3, #768	; 0x300
 800710c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800710e:	2302      	movs	r3, #2
 8007110:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007112:	2300      	movs	r3, #0
 8007114:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007116:	2303      	movs	r3, #3
 8007118:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800711a:	2307      	movs	r3, #7
 800711c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800711e:	f107 031c 	add.w	r3, r7, #28
 8007122:	4619      	mov	r1, r3
 8007124:	4826      	ldr	r0, [pc, #152]	; (80071c0 <MX_GPIO_Init+0x300>)
 8007126:	f001 f823 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10_ESP32_EN_Pin */
  GPIO_InitStruct.Pin = PD10_ESP32_EN_Pin;
 800712a:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800712e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007130:	2311      	movs	r3, #17
 8007132:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007134:	2300      	movs	r3, #0
 8007136:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007138:	2300      	movs	r3, #0
 800713a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD10_ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 800713c:	f107 031c 	add.w	r3, r7, #28
 8007140:	4619      	mov	r1, r3
 8007142:	481f      	ldr	r0, [pc, #124]	; (80071c0 <MX_GPIO_Init+0x300>)
 8007144:	f001 f814 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_ESP32_BOOT_SEL_Pin PD13_MON1_2_EN_Pin PD15_SPDIN_TRQIN_EN_Pin */
  GPIO_InitStruct.Pin = PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin;
 8007148:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 800714c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800714e:	2301      	movs	r3, #1
 8007150:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007152:	2300      	movs	r3, #0
 8007154:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007156:	2300      	movs	r3, #0
 8007158:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800715a:	f107 031c 	add.w	r3, r7, #28
 800715e:	4619      	mov	r1, r3
 8007160:	4817      	ldr	r0, [pc, #92]	; (80071c0 <MX_GPIO_Init+0x300>)
 8007162:	f001 f805 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12_Input_J6_Pin PD14_Input_J6_Pin Input0_J6_DAC_ADC_Pin Input1_J6_DAC_ADC_Pin
                           PD7_A_CODE2_Pin */
  GPIO_InitStruct.Pin = PD12_Input_J6_Pin|PD14_Input_J6_Pin|Input0_J6_DAC_ADC_Pin|Input1_J6_DAC_ADC_Pin
 8007166:	f245 0383 	movw	r3, #20611	; 0x5083
 800716a:	61fb      	str	r3, [r7, #28]
                          |PD7_A_CODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800716c:	2300      	movs	r3, #0
 800716e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007170:	2300      	movs	r3, #0
 8007172:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007174:	f107 031c 	add.w	r3, r7, #28
 8007178:	4619      	mov	r1, r3
 800717a:	4811      	ldr	r0, [pc, #68]	; (80071c0 <MX_GPIO_Init+0x300>)
 800717c:	f000 fff8 	bl	8008170 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_I2C1_SDA_DAC_ADC_Pin PB8_I2C1_SCL_DAC_ADC_Pin */
  GPIO_InitStruct.Pin = PB7_I2C1_SDA_DAC_ADC_Pin|PB8_I2C1_SCL_DAC_ADC_Pin;
 8007180:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8007184:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8007186:	2312      	movs	r3, #18
 8007188:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800718a:	2301      	movs	r3, #1
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800718e:	2303      	movs	r3, #3
 8007190:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8007192:	2304      	movs	r3, #4
 8007194:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007196:	f107 031c 	add.w	r3, r7, #28
 800719a:	4619      	mov	r1, r3
 800719c:	4807      	ldr	r0, [pc, #28]	; (80071bc <MX_GPIO_Init+0x2fc>)
 800719e:	f000 ffe7 	bl	8008170 <HAL_GPIO_Init>

}
 80071a2:	bf00      	nop
 80071a4:	3730      	adds	r7, #48	; 0x30
 80071a6:	46bd      	mov	sp, r7
 80071a8:	bd80      	pop	{r7, pc}
 80071aa:	bf00      	nop
 80071ac:	40023800 	.word	0x40023800
 80071b0:	40021000 	.word	0x40021000
 80071b4:	40020800 	.word	0x40020800
 80071b8:	40020000 	.word	0x40020000
 80071bc:	40020400 	.word	0x40020400
 80071c0:	40020c00 	.word	0x40020c00

080071c4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80071c4:	b480      	push	{r7}
 80071c6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80071c8:	e7fe      	b.n	80071c8 <Error_Handler+0x4>
	...

080071cc <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071cc:	b480      	push	{r7}
 80071ce:	b083      	sub	sp, #12
 80071d0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071d2:	2300      	movs	r3, #0
 80071d4:	607b      	str	r3, [r7, #4]
 80071d6:	4b10      	ldr	r3, [pc, #64]	; (8007218 <HAL_MspInit+0x4c>)
 80071d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071da:	4a0f      	ldr	r2, [pc, #60]	; (8007218 <HAL_MspInit+0x4c>)
 80071dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071e0:	6453      	str	r3, [r2, #68]	; 0x44
 80071e2:	4b0d      	ldr	r3, [pc, #52]	; (8007218 <HAL_MspInit+0x4c>)
 80071e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071ea:	607b      	str	r3, [r7, #4]
 80071ec:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071ee:	2300      	movs	r3, #0
 80071f0:	603b      	str	r3, [r7, #0]
 80071f2:	4b09      	ldr	r3, [pc, #36]	; (8007218 <HAL_MspInit+0x4c>)
 80071f4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071f6:	4a08      	ldr	r2, [pc, #32]	; (8007218 <HAL_MspInit+0x4c>)
 80071f8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071fc:	6413      	str	r3, [r2, #64]	; 0x40
 80071fe:	4b06      	ldr	r3, [pc, #24]	; (8007218 <HAL_MspInit+0x4c>)
 8007200:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007202:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007206:	603b      	str	r3, [r7, #0]
 8007208:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800720a:	bf00      	nop
 800720c:	370c      	adds	r7, #12
 800720e:	46bd      	mov	sp, r7
 8007210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007214:	4770      	bx	lr
 8007216:	bf00      	nop
 8007218:	40023800 	.word	0x40023800

0800721c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800721c:	b580      	push	{r7, lr}
 800721e:	b08c      	sub	sp, #48	; 0x30
 8007220:	af00      	add	r7, sp, #0
 8007222:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007224:	f107 031c 	add.w	r3, r7, #28
 8007228:	2200      	movs	r2, #0
 800722a:	601a      	str	r2, [r3, #0]
 800722c:	605a      	str	r2, [r3, #4]
 800722e:	609a      	str	r2, [r3, #8]
 8007230:	60da      	str	r2, [r3, #12]
 8007232:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800723c:	d12c      	bne.n	8007298 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800723e:	2300      	movs	r3, #0
 8007240:	61bb      	str	r3, [r7, #24]
 8007242:	4b30      	ldr	r3, [pc, #192]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 8007244:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007246:	4a2f      	ldr	r2, [pc, #188]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 8007248:	f043 0301 	orr.w	r3, r3, #1
 800724c:	6413      	str	r3, [r2, #64]	; 0x40
 800724e:	4b2d      	ldr	r3, [pc, #180]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 8007250:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007252:	f003 0301 	and.w	r3, r3, #1
 8007256:	61bb      	str	r3, [r7, #24]
 8007258:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800725a:	2300      	movs	r3, #0
 800725c:	617b      	str	r3, [r7, #20]
 800725e:	4b29      	ldr	r3, [pc, #164]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 8007260:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007262:	4a28      	ldr	r2, [pc, #160]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 8007264:	f043 0301 	orr.w	r3, r3, #1
 8007268:	6313      	str	r3, [r2, #48]	; 0x30
 800726a:	4b26      	ldr	r3, [pc, #152]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 800726c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800726e:	f003 0301 	and.w	r3, r3, #1
 8007272:	617b      	str	r3, [r7, #20]
 8007274:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PA1_TIM2_CH2_ENC_PBO_Pin|PA5_TIM2_CH1_ENC_PAO_Pin;
 8007276:	2322      	movs	r3, #34	; 0x22
 8007278:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800727a:	2302      	movs	r3, #2
 800727c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800727e:	2300      	movs	r3, #0
 8007280:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007282:	2300      	movs	r3, #0
 8007284:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8007286:	2301      	movs	r3, #1
 8007288:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800728a:	f107 031c 	add.w	r3, r7, #28
 800728e:	4619      	mov	r1, r3
 8007290:	481d      	ldr	r0, [pc, #116]	; (8007308 <HAL_TIM_Base_MspInit+0xec>)
 8007292:	f000 ff6d 	bl	8008170 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8007296:	e030      	b.n	80072fa <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8007298:	687b      	ldr	r3, [r7, #4]
 800729a:	681b      	ldr	r3, [r3, #0]
 800729c:	4a1b      	ldr	r2, [pc, #108]	; (800730c <HAL_TIM_Base_MspInit+0xf0>)
 800729e:	4293      	cmp	r3, r2
 80072a0:	d12b      	bne.n	80072fa <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80072a2:	2300      	movs	r3, #0
 80072a4:	613b      	str	r3, [r7, #16]
 80072a6:	4b17      	ldr	r3, [pc, #92]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 80072a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072aa:	4a16      	ldr	r2, [pc, #88]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 80072ac:	f043 0302 	orr.w	r3, r3, #2
 80072b0:	6413      	str	r3, [r2, #64]	; 0x40
 80072b2:	4b14      	ldr	r3, [pc, #80]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 80072b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80072b6:	f003 0302 	and.w	r3, r3, #2
 80072ba:	613b      	str	r3, [r7, #16]
 80072bc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80072be:	2300      	movs	r3, #0
 80072c0:	60fb      	str	r3, [r7, #12]
 80072c2:	4b10      	ldr	r3, [pc, #64]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 80072c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072c6:	4a0f      	ldr	r2, [pc, #60]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 80072c8:	f043 0301 	orr.w	r3, r3, #1
 80072cc:	6313      	str	r3, [r2, #48]	; 0x30
 80072ce:	4b0d      	ldr	r3, [pc, #52]	; (8007304 <HAL_TIM_Base_MspInit+0xe8>)
 80072d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072d2:	f003 0301 	and.w	r3, r3, #1
 80072d6:	60fb      	str	r3, [r7, #12]
 80072d8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PA6_TIM3_CH1_ENC_PZO_Pin;
 80072da:	2340      	movs	r3, #64	; 0x40
 80072dc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072de:	2302      	movs	r3, #2
 80072e0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072e2:	2300      	movs	r3, #0
 80072e4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072e6:	2300      	movs	r3, #0
 80072e8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80072ea:	2302      	movs	r3, #2
 80072ec:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PA6_TIM3_CH1_ENC_PZO_GPIO_Port, &GPIO_InitStruct);
 80072ee:	f107 031c 	add.w	r3, r7, #28
 80072f2:	4619      	mov	r1, r3
 80072f4:	4804      	ldr	r0, [pc, #16]	; (8007308 <HAL_TIM_Base_MspInit+0xec>)
 80072f6:	f000 ff3b 	bl	8008170 <HAL_GPIO_Init>
}
 80072fa:	bf00      	nop
 80072fc:	3730      	adds	r7, #48	; 0x30
 80072fe:	46bd      	mov	sp, r7
 8007300:	bd80      	pop	{r7, pc}
 8007302:	bf00      	nop
 8007304:	40023800 	.word	0x40023800
 8007308:	40020000 	.word	0x40020000
 800730c:	40000400 	.word	0x40000400

08007310 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8007310:	b580      	push	{r7, lr}
 8007312:	b08c      	sub	sp, #48	; 0x30
 8007314:	af00      	add	r7, sp, #0
 8007316:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8007318:	f107 031c 	add.w	r3, r7, #28
 800731c:	2200      	movs	r2, #0
 800731e:	601a      	str	r2, [r3, #0]
 8007320:	605a      	str	r2, [r3, #4]
 8007322:	609a      	str	r2, [r3, #8]
 8007324:	60da      	str	r2, [r3, #12]
 8007326:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a45      	ldr	r2, [pc, #276]	; (8007444 <HAL_UART_MspInit+0x134>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d153      	bne.n	80073da <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8007332:	2300      	movs	r3, #0
 8007334:	61bb      	str	r3, [r7, #24]
 8007336:	4b44      	ldr	r3, [pc, #272]	; (8007448 <HAL_UART_MspInit+0x138>)
 8007338:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733a:	4a43      	ldr	r2, [pc, #268]	; (8007448 <HAL_UART_MspInit+0x138>)
 800733c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007340:	6413      	str	r3, [r2, #64]	; 0x40
 8007342:	4b41      	ldr	r3, [pc, #260]	; (8007448 <HAL_UART_MspInit+0x138>)
 8007344:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007346:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800734a:	61bb      	str	r3, [r7, #24]
 800734c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800734e:	2300      	movs	r3, #0
 8007350:	617b      	str	r3, [r7, #20]
 8007352:	4b3d      	ldr	r3, [pc, #244]	; (8007448 <HAL_UART_MspInit+0x138>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	4a3c      	ldr	r2, [pc, #240]	; (8007448 <HAL_UART_MspInit+0x138>)
 8007358:	f043 0304 	orr.w	r3, r3, #4
 800735c:	6313      	str	r3, [r2, #48]	; 0x30
 800735e:	4b3a      	ldr	r3, [pc, #232]	; (8007448 <HAL_UART_MspInit+0x138>)
 8007360:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007362:	f003 0304 	and.w	r3, r3, #4
 8007366:	617b      	str	r3, [r7, #20]
 8007368:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800736a:	2300      	movs	r3, #0
 800736c:	613b      	str	r3, [r7, #16]
 800736e:	4b36      	ldr	r3, [pc, #216]	; (8007448 <HAL_UART_MspInit+0x138>)
 8007370:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007372:	4a35      	ldr	r2, [pc, #212]	; (8007448 <HAL_UART_MspInit+0x138>)
 8007374:	f043 0308 	orr.w	r3, r3, #8
 8007378:	6313      	str	r3, [r2, #48]	; 0x30
 800737a:	4b33      	ldr	r3, [pc, #204]	; (8007448 <HAL_UART_MspInit+0x138>)
 800737c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800737e:	f003 0308 	and.w	r3, r3, #8
 8007382:	613b      	str	r3, [r7, #16]
 8007384:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = PC12_UART5_TX_485_MCU_DRV_Pin;
 8007386:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800738a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800738c:	2302      	movs	r3, #2
 800738e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007390:	2300      	movs	r3, #0
 8007392:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007394:	2303      	movs	r3, #3
 8007396:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007398:	2308      	movs	r3, #8
 800739a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PC12_UART5_TX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 800739c:	f107 031c 	add.w	r3, r7, #28
 80073a0:	4619      	mov	r1, r3
 80073a2:	482a      	ldr	r0, [pc, #168]	; (800744c <HAL_UART_MspInit+0x13c>)
 80073a4:	f000 fee4 	bl	8008170 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD2_UART5_RX_485_MCU_DRV_Pin;
 80073a8:	2304      	movs	r3, #4
 80073aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073ac:	2302      	movs	r3, #2
 80073ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073b0:	2300      	movs	r3, #0
 80073b2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80073b4:	2303      	movs	r3, #3
 80073b6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80073b8:	2308      	movs	r3, #8
 80073ba:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD2_UART5_RX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 80073bc:	f107 031c 	add.w	r3, r7, #28
 80073c0:	4619      	mov	r1, r3
 80073c2:	4823      	ldr	r0, [pc, #140]	; (8007450 <HAL_UART_MspInit+0x140>)
 80073c4:	f000 fed4 	bl	8008170 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80073c8:	2200      	movs	r2, #0
 80073ca:	2100      	movs	r1, #0
 80073cc:	2035      	movs	r0, #53	; 0x35
 80073ce:	f000 fb1e 	bl	8007a0e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80073d2:	2035      	movs	r0, #53	; 0x35
 80073d4:	f000 fb37 	bl	8007a46 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80073d8:	e030      	b.n	800743c <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	4a1d      	ldr	r2, [pc, #116]	; (8007454 <HAL_UART_MspInit+0x144>)
 80073e0:	4293      	cmp	r3, r2
 80073e2:	d12b      	bne.n	800743c <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80073e4:	2300      	movs	r3, #0
 80073e6:	60fb      	str	r3, [r7, #12]
 80073e8:	4b17      	ldr	r3, [pc, #92]	; (8007448 <HAL_UART_MspInit+0x138>)
 80073ea:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073ec:	4a16      	ldr	r2, [pc, #88]	; (8007448 <HAL_UART_MspInit+0x138>)
 80073ee:	f043 0320 	orr.w	r3, r3, #32
 80073f2:	6453      	str	r3, [r2, #68]	; 0x44
 80073f4:	4b14      	ldr	r3, [pc, #80]	; (8007448 <HAL_UART_MspInit+0x138>)
 80073f6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073f8:	f003 0320 	and.w	r3, r3, #32
 80073fc:	60fb      	str	r3, [r7, #12]
 80073fe:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007400:	2300      	movs	r3, #0
 8007402:	60bb      	str	r3, [r7, #8]
 8007404:	4b10      	ldr	r3, [pc, #64]	; (8007448 <HAL_UART_MspInit+0x138>)
 8007406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007408:	4a0f      	ldr	r2, [pc, #60]	; (8007448 <HAL_UART_MspInit+0x138>)
 800740a:	f043 0304 	orr.w	r3, r3, #4
 800740e:	6313      	str	r3, [r2, #48]	; 0x30
 8007410:	4b0d      	ldr	r3, [pc, #52]	; (8007448 <HAL_UART_MspInit+0x138>)
 8007412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007414:	f003 0304 	and.w	r3, r3, #4
 8007418:	60bb      	str	r3, [r7, #8]
 800741a:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800741c:	23c0      	movs	r3, #192	; 0xc0
 800741e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007420:	2302      	movs	r3, #2
 8007422:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007424:	2300      	movs	r3, #0
 8007426:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007428:	2303      	movs	r3, #3
 800742a:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800742c:	2308      	movs	r3, #8
 800742e:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007430:	f107 031c 	add.w	r3, r7, #28
 8007434:	4619      	mov	r1, r3
 8007436:	4805      	ldr	r0, [pc, #20]	; (800744c <HAL_UART_MspInit+0x13c>)
 8007438:	f000 fe9a 	bl	8008170 <HAL_GPIO_Init>
}
 800743c:	bf00      	nop
 800743e:	3730      	adds	r7, #48	; 0x30
 8007440:	46bd      	mov	sp, r7
 8007442:	bd80      	pop	{r7, pc}
 8007444:	40005000 	.word	0x40005000
 8007448:	40023800 	.word	0x40023800
 800744c:	40020800 	.word	0x40020800
 8007450:	40020c00 	.word	0x40020c00
 8007454:	40011400 	.word	0x40011400

08007458 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007458:	b480      	push	{r7}
 800745a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800745c:	e7fe      	b.n	800745c <NMI_Handler+0x4>

0800745e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800745e:	b480      	push	{r7}
 8007460:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8007462:	e7fe      	b.n	8007462 <HardFault_Handler+0x4>

08007464 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8007464:	b480      	push	{r7}
 8007466:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007468:	e7fe      	b.n	8007468 <MemManage_Handler+0x4>

0800746a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800746a:	b480      	push	{r7}
 800746c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800746e:	e7fe      	b.n	800746e <BusFault_Handler+0x4>

08007470 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007470:	b480      	push	{r7}
 8007472:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8007474:	e7fe      	b.n	8007474 <UsageFault_Handler+0x4>

08007476 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8007476:	b480      	push	{r7}
 8007478:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800747a:	bf00      	nop
 800747c:	46bd      	mov	sp, r7
 800747e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007482:	4770      	bx	lr

08007484 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8007484:	b480      	push	{r7}
 8007486:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007488:	bf00      	nop
 800748a:	46bd      	mov	sp, r7
 800748c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007490:	4770      	bx	lr

08007492 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8007492:	b480      	push	{r7}
 8007494:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8007496:	bf00      	nop
 8007498:	46bd      	mov	sp, r7
 800749a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800749e:	4770      	bx	lr

080074a0 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80074a4:	f000 f97e 	bl	80077a4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80074a8:	bf00      	nop
 80074aa:	bd80      	pop	{r7, pc}

080074ac <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80074b0:	4802      	ldr	r0, [pc, #8]	; (80074bc <TIM2_IRQHandler+0x10>)
 80074b2:	f001 fde5 	bl	8009080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80074b6:	bf00      	nop
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	20000224 	.word	0x20000224

080074c0 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80074c4:	4802      	ldr	r0, [pc, #8]	; (80074d0 <TIM3_IRQHandler+0x10>)
 80074c6:	f001 fddb 	bl	8009080 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	2000026c 	.word	0x2000026c

080074d4 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80074d4:	b580      	push	{r7, lr}
 80074d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80074d8:	4802      	ldr	r0, [pc, #8]	; (80074e4 <UART5_IRQHandler+0x10>)
 80074da:	f002 fc69 	bl	8009db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80074de:	bf00      	nop
 80074e0:	bd80      	pop	{r7, pc}
 80074e2:	bf00      	nop
 80074e4:	200002b4 	.word	0x200002b4

080074e8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80074e8:	b580      	push	{r7, lr}
 80074ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80074ec:	4802      	ldr	r0, [pc, #8]	; (80074f8 <USART6_IRQHandler+0x10>)
 80074ee:	f002 fc5f 	bl	8009db0 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80074f2:	bf00      	nop
 80074f4:	bd80      	pop	{r7, pc}
 80074f6:	bf00      	nop
 80074f8:	200002f8 	.word	0x200002f8

080074fc <_getpid>:
 80074fc:	b480      	push	{r7}
 80074fe:	af00      	add	r7, sp, #0
 8007500:	2301      	movs	r3, #1
 8007502:	4618      	mov	r0, r3
 8007504:	46bd      	mov	sp, r7
 8007506:	f85d 7b04 	ldr.w	r7, [sp], #4
 800750a:	4770      	bx	lr

0800750c <_kill>:
 800750c:	b580      	push	{r7, lr}
 800750e:	b082      	sub	sp, #8
 8007510:	af00      	add	r7, sp, #0
 8007512:	6078      	str	r0, [r7, #4]
 8007514:	6039      	str	r1, [r7, #0]
 8007516:	f003 fbb7 	bl	800ac88 <__errno>
 800751a:	4603      	mov	r3, r0
 800751c:	2216      	movs	r2, #22
 800751e:	601a      	str	r2, [r3, #0]
 8007520:	f04f 33ff 	mov.w	r3, #4294967295
 8007524:	4618      	mov	r0, r3
 8007526:	3708      	adds	r7, #8
 8007528:	46bd      	mov	sp, r7
 800752a:	bd80      	pop	{r7, pc}

0800752c <_exit>:
 800752c:	b580      	push	{r7, lr}
 800752e:	b082      	sub	sp, #8
 8007530:	af00      	add	r7, sp, #0
 8007532:	6078      	str	r0, [r7, #4]
 8007534:	f04f 31ff 	mov.w	r1, #4294967295
 8007538:	6878      	ldr	r0, [r7, #4]
 800753a:	f7ff ffe7 	bl	800750c <_kill>
 800753e:	e7fe      	b.n	800753e <_exit+0x12>

08007540 <_read>:
 8007540:	b580      	push	{r7, lr}
 8007542:	b086      	sub	sp, #24
 8007544:	af00      	add	r7, sp, #0
 8007546:	60f8      	str	r0, [r7, #12]
 8007548:	60b9      	str	r1, [r7, #8]
 800754a:	607a      	str	r2, [r7, #4]
 800754c:	2300      	movs	r3, #0
 800754e:	617b      	str	r3, [r7, #20]
 8007550:	e00a      	b.n	8007568 <_read+0x28>
 8007552:	f3af 8000 	nop.w
 8007556:	4601      	mov	r1, r0
 8007558:	68bb      	ldr	r3, [r7, #8]
 800755a:	1c5a      	adds	r2, r3, #1
 800755c:	60ba      	str	r2, [r7, #8]
 800755e:	b2ca      	uxtb	r2, r1
 8007560:	701a      	strb	r2, [r3, #0]
 8007562:	697b      	ldr	r3, [r7, #20]
 8007564:	3301      	adds	r3, #1
 8007566:	617b      	str	r3, [r7, #20]
 8007568:	697a      	ldr	r2, [r7, #20]
 800756a:	687b      	ldr	r3, [r7, #4]
 800756c:	429a      	cmp	r2, r3
 800756e:	dbf0      	blt.n	8007552 <_read+0x12>
 8007570:	687b      	ldr	r3, [r7, #4]
 8007572:	4618      	mov	r0, r3
 8007574:	3718      	adds	r7, #24
 8007576:	46bd      	mov	sp, r7
 8007578:	bd80      	pop	{r7, pc}

0800757a <_write>:
 800757a:	b580      	push	{r7, lr}
 800757c:	b086      	sub	sp, #24
 800757e:	af00      	add	r7, sp, #0
 8007580:	60f8      	str	r0, [r7, #12]
 8007582:	60b9      	str	r1, [r7, #8]
 8007584:	607a      	str	r2, [r7, #4]
 8007586:	2300      	movs	r3, #0
 8007588:	617b      	str	r3, [r7, #20]
 800758a:	e009      	b.n	80075a0 <_write+0x26>
 800758c:	68bb      	ldr	r3, [r7, #8]
 800758e:	1c5a      	adds	r2, r3, #1
 8007590:	60ba      	str	r2, [r7, #8]
 8007592:	781b      	ldrb	r3, [r3, #0]
 8007594:	4618      	mov	r0, r3
 8007596:	f3af 8000 	nop.w
 800759a:	697b      	ldr	r3, [r7, #20]
 800759c:	3301      	adds	r3, #1
 800759e:	617b      	str	r3, [r7, #20]
 80075a0:	697a      	ldr	r2, [r7, #20]
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	429a      	cmp	r2, r3
 80075a6:	dbf1      	blt.n	800758c <_write+0x12>
 80075a8:	687b      	ldr	r3, [r7, #4]
 80075aa:	4618      	mov	r0, r3
 80075ac:	3718      	adds	r7, #24
 80075ae:	46bd      	mov	sp, r7
 80075b0:	bd80      	pop	{r7, pc}

080075b2 <_close>:
 80075b2:	b480      	push	{r7}
 80075b4:	b083      	sub	sp, #12
 80075b6:	af00      	add	r7, sp, #0
 80075b8:	6078      	str	r0, [r7, #4]
 80075ba:	f04f 33ff 	mov.w	r3, #4294967295
 80075be:	4618      	mov	r0, r3
 80075c0:	370c      	adds	r7, #12
 80075c2:	46bd      	mov	sp, r7
 80075c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c8:	4770      	bx	lr

080075ca <_fstat>:
 80075ca:	b480      	push	{r7}
 80075cc:	b083      	sub	sp, #12
 80075ce:	af00      	add	r7, sp, #0
 80075d0:	6078      	str	r0, [r7, #4]
 80075d2:	6039      	str	r1, [r7, #0]
 80075d4:	683b      	ldr	r3, [r7, #0]
 80075d6:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075da:	605a      	str	r2, [r3, #4]
 80075dc:	2300      	movs	r3, #0
 80075de:	4618      	mov	r0, r3
 80075e0:	370c      	adds	r7, #12
 80075e2:	46bd      	mov	sp, r7
 80075e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075e8:	4770      	bx	lr

080075ea <_isatty>:
 80075ea:	b480      	push	{r7}
 80075ec:	b083      	sub	sp, #12
 80075ee:	af00      	add	r7, sp, #0
 80075f0:	6078      	str	r0, [r7, #4]
 80075f2:	2301      	movs	r3, #1
 80075f4:	4618      	mov	r0, r3
 80075f6:	370c      	adds	r7, #12
 80075f8:	46bd      	mov	sp, r7
 80075fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075fe:	4770      	bx	lr

08007600 <_lseek>:
 8007600:	b480      	push	{r7}
 8007602:	b085      	sub	sp, #20
 8007604:	af00      	add	r7, sp, #0
 8007606:	60f8      	str	r0, [r7, #12]
 8007608:	60b9      	str	r1, [r7, #8]
 800760a:	607a      	str	r2, [r7, #4]
 800760c:	2300      	movs	r3, #0
 800760e:	4618      	mov	r0, r3
 8007610:	3714      	adds	r7, #20
 8007612:	46bd      	mov	sp, r7
 8007614:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007618:	4770      	bx	lr
	...

0800761c <_sbrk>:
 800761c:	b580      	push	{r7, lr}
 800761e:	b086      	sub	sp, #24
 8007620:	af00      	add	r7, sp, #0
 8007622:	6078      	str	r0, [r7, #4]
 8007624:	4a14      	ldr	r2, [pc, #80]	; (8007678 <_sbrk+0x5c>)
 8007626:	4b15      	ldr	r3, [pc, #84]	; (800767c <_sbrk+0x60>)
 8007628:	1ad3      	subs	r3, r2, r3
 800762a:	617b      	str	r3, [r7, #20]
 800762c:	697b      	ldr	r3, [r7, #20]
 800762e:	613b      	str	r3, [r7, #16]
 8007630:	4b13      	ldr	r3, [pc, #76]	; (8007680 <_sbrk+0x64>)
 8007632:	681b      	ldr	r3, [r3, #0]
 8007634:	2b00      	cmp	r3, #0
 8007636:	d102      	bne.n	800763e <_sbrk+0x22>
 8007638:	4b11      	ldr	r3, [pc, #68]	; (8007680 <_sbrk+0x64>)
 800763a:	4a12      	ldr	r2, [pc, #72]	; (8007684 <_sbrk+0x68>)
 800763c:	601a      	str	r2, [r3, #0]
 800763e:	4b10      	ldr	r3, [pc, #64]	; (8007680 <_sbrk+0x64>)
 8007640:	681a      	ldr	r2, [r3, #0]
 8007642:	687b      	ldr	r3, [r7, #4]
 8007644:	4413      	add	r3, r2
 8007646:	693a      	ldr	r2, [r7, #16]
 8007648:	429a      	cmp	r2, r3
 800764a:	d207      	bcs.n	800765c <_sbrk+0x40>
 800764c:	f003 fb1c 	bl	800ac88 <__errno>
 8007650:	4603      	mov	r3, r0
 8007652:	220c      	movs	r2, #12
 8007654:	601a      	str	r2, [r3, #0]
 8007656:	f04f 33ff 	mov.w	r3, #4294967295
 800765a:	e009      	b.n	8007670 <_sbrk+0x54>
 800765c:	4b08      	ldr	r3, [pc, #32]	; (8007680 <_sbrk+0x64>)
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	60fb      	str	r3, [r7, #12]
 8007662:	4b07      	ldr	r3, [pc, #28]	; (8007680 <_sbrk+0x64>)
 8007664:	681a      	ldr	r2, [r3, #0]
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	4413      	add	r3, r2
 800766a:	4a05      	ldr	r2, [pc, #20]	; (8007680 <_sbrk+0x64>)
 800766c:	6013      	str	r3, [r2, #0]
 800766e:	68fb      	ldr	r3, [r7, #12]
 8007670:	4618      	mov	r0, r3
 8007672:	3718      	adds	r7, #24
 8007674:	46bd      	mov	sp, r7
 8007676:	bd80      	pop	{r7, pc}
 8007678:	20020000 	.word	0x20020000
 800767c:	00000400 	.word	0x00000400
 8007680:	20000548 	.word	0x20000548
 8007684:	20000580 	.word	0x20000580

08007688 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007688:	b480      	push	{r7}
 800768a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800768c:	4b06      	ldr	r3, [pc, #24]	; (80076a8 <SystemInit+0x20>)
 800768e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8007692:	4a05      	ldr	r2, [pc, #20]	; (80076a8 <SystemInit+0x20>)
 8007694:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007698:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800769c:	bf00      	nop
 800769e:	46bd      	mov	sp, r7
 80076a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076a4:	4770      	bx	lr
 80076a6:	bf00      	nop
 80076a8:	e000ed00 	.word	0xe000ed00

080076ac <Reset_Handler>:
 80076ac:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076e4 <LoopFillZerobss+0x12>
 80076b0:	480d      	ldr	r0, [pc, #52]	; (80076e8 <LoopFillZerobss+0x16>)
 80076b2:	490e      	ldr	r1, [pc, #56]	; (80076ec <LoopFillZerobss+0x1a>)
 80076b4:	4a0e      	ldr	r2, [pc, #56]	; (80076f0 <LoopFillZerobss+0x1e>)
 80076b6:	2300      	movs	r3, #0
 80076b8:	e002      	b.n	80076c0 <LoopCopyDataInit>

080076ba <CopyDataInit>:
 80076ba:	58d4      	ldr	r4, [r2, r3]
 80076bc:	50c4      	str	r4, [r0, r3]
 80076be:	3304      	adds	r3, #4

080076c0 <LoopCopyDataInit>:
 80076c0:	18c4      	adds	r4, r0, r3
 80076c2:	428c      	cmp	r4, r1
 80076c4:	d3f9      	bcc.n	80076ba <CopyDataInit>
 80076c6:	4a0b      	ldr	r2, [pc, #44]	; (80076f4 <LoopFillZerobss+0x22>)
 80076c8:	4c0b      	ldr	r4, [pc, #44]	; (80076f8 <LoopFillZerobss+0x26>)
 80076ca:	2300      	movs	r3, #0
 80076cc:	e001      	b.n	80076d2 <LoopFillZerobss>

080076ce <FillZerobss>:
 80076ce:	6013      	str	r3, [r2, #0]
 80076d0:	3204      	adds	r2, #4

080076d2 <LoopFillZerobss>:
 80076d2:	42a2      	cmp	r2, r4
 80076d4:	d3fb      	bcc.n	80076ce <FillZerobss>
 80076d6:	f7ff ffd7 	bl	8007688 <SystemInit>
 80076da:	f003 fadb 	bl	800ac94 <__libc_init_array>
 80076de:	f7fe fa8f 	bl	8005c00 <main>
 80076e2:	4770      	bx	lr
 80076e4:	20020000 	.word	0x20020000
 80076e8:	20000000 	.word	0x20000000
 80076ec:	200001f4 	.word	0x200001f4
 80076f0:	0800fe28 	.word	0x0800fe28
 80076f4:	200001f4 	.word	0x200001f4
 80076f8:	20000580 	.word	0x20000580

080076fc <ADC_IRQHandler>:
 80076fc:	e7fe      	b.n	80076fc <ADC_IRQHandler>
	...

08007700 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8007700:	b580      	push	{r7, lr}
 8007702:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8007704:	4b0e      	ldr	r3, [pc, #56]	; (8007740 <HAL_Init+0x40>)
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	4a0d      	ldr	r2, [pc, #52]	; (8007740 <HAL_Init+0x40>)
 800770a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800770e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8007710:	4b0b      	ldr	r3, [pc, #44]	; (8007740 <HAL_Init+0x40>)
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	4a0a      	ldr	r2, [pc, #40]	; (8007740 <HAL_Init+0x40>)
 8007716:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800771a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800771c:	4b08      	ldr	r3, [pc, #32]	; (8007740 <HAL_Init+0x40>)
 800771e:	681b      	ldr	r3, [r3, #0]
 8007720:	4a07      	ldr	r2, [pc, #28]	; (8007740 <HAL_Init+0x40>)
 8007722:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007726:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007728:	2003      	movs	r0, #3
 800772a:	f000 f965 	bl	80079f8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800772e:	2000      	movs	r0, #0
 8007730:	f000 f808 	bl	8007744 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8007734:	f7ff fd4a 	bl	80071cc <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007738:	2300      	movs	r3, #0
}
 800773a:	4618      	mov	r0, r3
 800773c:	bd80      	pop	{r7, pc}
 800773e:	bf00      	nop
 8007740:	40023c00 	.word	0x40023c00

08007744 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8007744:	b580      	push	{r7, lr}
 8007746:	b082      	sub	sp, #8
 8007748:	af00      	add	r7, sp, #0
 800774a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800774c:	4b12      	ldr	r3, [pc, #72]	; (8007798 <HAL_InitTick+0x54>)
 800774e:	681a      	ldr	r2, [r3, #0]
 8007750:	4b12      	ldr	r3, [pc, #72]	; (800779c <HAL_InitTick+0x58>)
 8007752:	781b      	ldrb	r3, [r3, #0]
 8007754:	4619      	mov	r1, r3
 8007756:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800775a:	fbb3 f3f1 	udiv	r3, r3, r1
 800775e:	fbb2 f3f3 	udiv	r3, r2, r3
 8007762:	4618      	mov	r0, r3
 8007764:	f000 f981 	bl	8007a6a <HAL_SYSTICK_Config>
 8007768:	4603      	mov	r3, r0
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800776e:	2301      	movs	r3, #1
 8007770:	e00e      	b.n	8007790 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	2b0f      	cmp	r3, #15
 8007776:	d80a      	bhi.n	800778e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007778:	2200      	movs	r2, #0
 800777a:	6879      	ldr	r1, [r7, #4]
 800777c:	f04f 30ff 	mov.w	r0, #4294967295
 8007780:	f000 f945 	bl	8007a0e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8007784:	4a06      	ldr	r2, [pc, #24]	; (80077a0 <HAL_InitTick+0x5c>)
 8007786:	687b      	ldr	r3, [r7, #4]
 8007788:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800778a:	2300      	movs	r3, #0
 800778c:	e000      	b.n	8007790 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800778e:	2301      	movs	r3, #1
}
 8007790:	4618      	mov	r0, r3
 8007792:	3708      	adds	r7, #8
 8007794:	46bd      	mov	sp, r7
 8007796:	bd80      	pop	{r7, pc}
 8007798:	20000014 	.word	0x20000014
 800779c:	2000001c 	.word	0x2000001c
 80077a0:	20000018 	.word	0x20000018

080077a4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 80077a8:	4b06      	ldr	r3, [pc, #24]	; (80077c4 <HAL_IncTick+0x20>)
 80077aa:	781b      	ldrb	r3, [r3, #0]
 80077ac:	461a      	mov	r2, r3
 80077ae:	4b06      	ldr	r3, [pc, #24]	; (80077c8 <HAL_IncTick+0x24>)
 80077b0:	681b      	ldr	r3, [r3, #0]
 80077b2:	4413      	add	r3, r2
 80077b4:	4a04      	ldr	r2, [pc, #16]	; (80077c8 <HAL_IncTick+0x24>)
 80077b6:	6013      	str	r3, [r2, #0]
}
 80077b8:	bf00      	nop
 80077ba:	46bd      	mov	sp, r7
 80077bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077c0:	4770      	bx	lr
 80077c2:	bf00      	nop
 80077c4:	2000001c 	.word	0x2000001c
 80077c8:	2000054c 	.word	0x2000054c

080077cc <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077cc:	b480      	push	{r7}
 80077ce:	af00      	add	r7, sp, #0
  return uwTick;
 80077d0:	4b03      	ldr	r3, [pc, #12]	; (80077e0 <HAL_GetTick+0x14>)
 80077d2:	681b      	ldr	r3, [r3, #0]
}
 80077d4:	4618      	mov	r0, r3
 80077d6:	46bd      	mov	sp, r7
 80077d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077dc:	4770      	bx	lr
 80077de:	bf00      	nop
 80077e0:	2000054c 	.word	0x2000054c

080077e4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80077e4:	b580      	push	{r7, lr}
 80077e6:	b084      	sub	sp, #16
 80077e8:	af00      	add	r7, sp, #0
 80077ea:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077ec:	f7ff ffee 	bl	80077cc <HAL_GetTick>
 80077f0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077f2:	687b      	ldr	r3, [r7, #4]
 80077f4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077f6:	68fb      	ldr	r3, [r7, #12]
 80077f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077fc:	d005      	beq.n	800780a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077fe:	4b0a      	ldr	r3, [pc, #40]	; (8007828 <HAL_Delay+0x44>)
 8007800:	781b      	ldrb	r3, [r3, #0]
 8007802:	461a      	mov	r2, r3
 8007804:	68fb      	ldr	r3, [r7, #12]
 8007806:	4413      	add	r3, r2
 8007808:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800780a:	bf00      	nop
 800780c:	f7ff ffde 	bl	80077cc <HAL_GetTick>
 8007810:	4602      	mov	r2, r0
 8007812:	68bb      	ldr	r3, [r7, #8]
 8007814:	1ad3      	subs	r3, r2, r3
 8007816:	68fa      	ldr	r2, [r7, #12]
 8007818:	429a      	cmp	r2, r3
 800781a:	d8f7      	bhi.n	800780c <HAL_Delay+0x28>
  {
  }
}
 800781c:	bf00      	nop
 800781e:	bf00      	nop
 8007820:	3710      	adds	r7, #16
 8007822:	46bd      	mov	sp, r7
 8007824:	bd80      	pop	{r7, pc}
 8007826:	bf00      	nop
 8007828:	2000001c 	.word	0x2000001c

0800782c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800782c:	b480      	push	{r7}
 800782e:	b085      	sub	sp, #20
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	f003 0307 	and.w	r3, r3, #7
 800783a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800783c:	4b0c      	ldr	r3, [pc, #48]	; (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 800783e:	68db      	ldr	r3, [r3, #12]
 8007840:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8007842:	68ba      	ldr	r2, [r7, #8]
 8007844:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007848:	4013      	ands	r3, r2
 800784a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800784c:	68fb      	ldr	r3, [r7, #12]
 800784e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007850:	68bb      	ldr	r3, [r7, #8]
 8007852:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8007854:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007858:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800785c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800785e:	4a04      	ldr	r2, [pc, #16]	; (8007870 <__NVIC_SetPriorityGrouping+0x44>)
 8007860:	68bb      	ldr	r3, [r7, #8]
 8007862:	60d3      	str	r3, [r2, #12]
}
 8007864:	bf00      	nop
 8007866:	3714      	adds	r7, #20
 8007868:	46bd      	mov	sp, r7
 800786a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800786e:	4770      	bx	lr
 8007870:	e000ed00 	.word	0xe000ed00

08007874 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8007874:	b480      	push	{r7}
 8007876:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007878:	4b04      	ldr	r3, [pc, #16]	; (800788c <__NVIC_GetPriorityGrouping+0x18>)
 800787a:	68db      	ldr	r3, [r3, #12]
 800787c:	0a1b      	lsrs	r3, r3, #8
 800787e:	f003 0307 	and.w	r3, r3, #7
}
 8007882:	4618      	mov	r0, r3
 8007884:	46bd      	mov	sp, r7
 8007886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800788a:	4770      	bx	lr
 800788c:	e000ed00 	.word	0xe000ed00

08007890 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007890:	b480      	push	{r7}
 8007892:	b083      	sub	sp, #12
 8007894:	af00      	add	r7, sp, #0
 8007896:	4603      	mov	r3, r0
 8007898:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800789a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800789e:	2b00      	cmp	r3, #0
 80078a0:	db0b      	blt.n	80078ba <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80078a2:	79fb      	ldrb	r3, [r7, #7]
 80078a4:	f003 021f 	and.w	r2, r3, #31
 80078a8:	4907      	ldr	r1, [pc, #28]	; (80078c8 <__NVIC_EnableIRQ+0x38>)
 80078aa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ae:	095b      	lsrs	r3, r3, #5
 80078b0:	2001      	movs	r0, #1
 80078b2:	fa00 f202 	lsl.w	r2, r0, r2
 80078b6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80078ba:	bf00      	nop
 80078bc:	370c      	adds	r7, #12
 80078be:	46bd      	mov	sp, r7
 80078c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078c4:	4770      	bx	lr
 80078c6:	bf00      	nop
 80078c8:	e000e100 	.word	0xe000e100

080078cc <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078cc:	b480      	push	{r7}
 80078ce:	b083      	sub	sp, #12
 80078d0:	af00      	add	r7, sp, #0
 80078d2:	4603      	mov	r3, r0
 80078d4:	6039      	str	r1, [r7, #0]
 80078d6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078d8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	db0a      	blt.n	80078f6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078e0:	683b      	ldr	r3, [r7, #0]
 80078e2:	b2da      	uxtb	r2, r3
 80078e4:	490c      	ldr	r1, [pc, #48]	; (8007918 <__NVIC_SetPriority+0x4c>)
 80078e6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078ea:	0112      	lsls	r2, r2, #4
 80078ec:	b2d2      	uxtb	r2, r2
 80078ee:	440b      	add	r3, r1
 80078f0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078f4:	e00a      	b.n	800790c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078f6:	683b      	ldr	r3, [r7, #0]
 80078f8:	b2da      	uxtb	r2, r3
 80078fa:	4908      	ldr	r1, [pc, #32]	; (800791c <__NVIC_SetPriority+0x50>)
 80078fc:	79fb      	ldrb	r3, [r7, #7]
 80078fe:	f003 030f 	and.w	r3, r3, #15
 8007902:	3b04      	subs	r3, #4
 8007904:	0112      	lsls	r2, r2, #4
 8007906:	b2d2      	uxtb	r2, r2
 8007908:	440b      	add	r3, r1
 800790a:	761a      	strb	r2, [r3, #24]
}
 800790c:	bf00      	nop
 800790e:	370c      	adds	r7, #12
 8007910:	46bd      	mov	sp, r7
 8007912:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007916:	4770      	bx	lr
 8007918:	e000e100 	.word	0xe000e100
 800791c:	e000ed00 	.word	0xe000ed00

08007920 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8007920:	b480      	push	{r7}
 8007922:	b089      	sub	sp, #36	; 0x24
 8007924:	af00      	add	r7, sp, #0
 8007926:	60f8      	str	r0, [r7, #12]
 8007928:	60b9      	str	r1, [r7, #8]
 800792a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800792c:	68fb      	ldr	r3, [r7, #12]
 800792e:	f003 0307 	and.w	r3, r3, #7
 8007932:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8007934:	69fb      	ldr	r3, [r7, #28]
 8007936:	f1c3 0307 	rsb	r3, r3, #7
 800793a:	2b04      	cmp	r3, #4
 800793c:	bf28      	it	cs
 800793e:	2304      	movcs	r3, #4
 8007940:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8007942:	69fb      	ldr	r3, [r7, #28]
 8007944:	3304      	adds	r3, #4
 8007946:	2b06      	cmp	r3, #6
 8007948:	d902      	bls.n	8007950 <NVIC_EncodePriority+0x30>
 800794a:	69fb      	ldr	r3, [r7, #28]
 800794c:	3b03      	subs	r3, #3
 800794e:	e000      	b.n	8007952 <NVIC_EncodePriority+0x32>
 8007950:	2300      	movs	r3, #0
 8007952:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007954:	f04f 32ff 	mov.w	r2, #4294967295
 8007958:	69bb      	ldr	r3, [r7, #24]
 800795a:	fa02 f303 	lsl.w	r3, r2, r3
 800795e:	43da      	mvns	r2, r3
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	401a      	ands	r2, r3
 8007964:	697b      	ldr	r3, [r7, #20]
 8007966:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007968:	f04f 31ff 	mov.w	r1, #4294967295
 800796c:	697b      	ldr	r3, [r7, #20]
 800796e:	fa01 f303 	lsl.w	r3, r1, r3
 8007972:	43d9      	mvns	r1, r3
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007978:	4313      	orrs	r3, r2
         );
}
 800797a:	4618      	mov	r0, r3
 800797c:	3724      	adds	r7, #36	; 0x24
 800797e:	46bd      	mov	sp, r7
 8007980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007984:	4770      	bx	lr
	...

08007988 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007988:	b480      	push	{r7}
 800798a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800798c:	f3bf 8f4f 	dsb	sy
}
 8007990:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8007992:	4b06      	ldr	r3, [pc, #24]	; (80079ac <__NVIC_SystemReset+0x24>)
 8007994:	68db      	ldr	r3, [r3, #12]
 8007996:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800799a:	4904      	ldr	r1, [pc, #16]	; (80079ac <__NVIC_SystemReset+0x24>)
 800799c:	4b04      	ldr	r3, [pc, #16]	; (80079b0 <__NVIC_SystemReset+0x28>)
 800799e:	4313      	orrs	r3, r2
 80079a0:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 80079a2:	f3bf 8f4f 	dsb	sy
}
 80079a6:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 80079a8:	bf00      	nop
 80079aa:	e7fd      	b.n	80079a8 <__NVIC_SystemReset+0x20>
 80079ac:	e000ed00 	.word	0xe000ed00
 80079b0:	05fa0004 	.word	0x05fa0004

080079b4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80079b4:	b580      	push	{r7, lr}
 80079b6:	b082      	sub	sp, #8
 80079b8:	af00      	add	r7, sp, #0
 80079ba:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	3b01      	subs	r3, #1
 80079c0:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 80079c4:	d301      	bcc.n	80079ca <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80079c6:	2301      	movs	r3, #1
 80079c8:	e00f      	b.n	80079ea <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079ca:	4a0a      	ldr	r2, [pc, #40]	; (80079f4 <SysTick_Config+0x40>)
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	3b01      	subs	r3, #1
 80079d0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079d2:	210f      	movs	r1, #15
 80079d4:	f04f 30ff 	mov.w	r0, #4294967295
 80079d8:	f7ff ff78 	bl	80078cc <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079dc:	4b05      	ldr	r3, [pc, #20]	; (80079f4 <SysTick_Config+0x40>)
 80079de:	2200      	movs	r2, #0
 80079e0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079e2:	4b04      	ldr	r3, [pc, #16]	; (80079f4 <SysTick_Config+0x40>)
 80079e4:	2207      	movs	r2, #7
 80079e6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079e8:	2300      	movs	r3, #0
}
 80079ea:	4618      	mov	r0, r3
 80079ec:	3708      	adds	r7, #8
 80079ee:	46bd      	mov	sp, r7
 80079f0:	bd80      	pop	{r7, pc}
 80079f2:	bf00      	nop
 80079f4:	e000e010 	.word	0xe000e010

080079f8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079f8:	b580      	push	{r7, lr}
 80079fa:	b082      	sub	sp, #8
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8007a00:	6878      	ldr	r0, [r7, #4]
 8007a02:	f7ff ff13 	bl	800782c <__NVIC_SetPriorityGrouping>
}
 8007a06:	bf00      	nop
 8007a08:	3708      	adds	r7, #8
 8007a0a:	46bd      	mov	sp, r7
 8007a0c:	bd80      	pop	{r7, pc}

08007a0e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8007a0e:	b580      	push	{r7, lr}
 8007a10:	b086      	sub	sp, #24
 8007a12:	af00      	add	r7, sp, #0
 8007a14:	4603      	mov	r3, r0
 8007a16:	60b9      	str	r1, [r7, #8]
 8007a18:	607a      	str	r2, [r7, #4]
 8007a1a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8007a1c:	2300      	movs	r3, #0
 8007a1e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8007a20:	f7ff ff28 	bl	8007874 <__NVIC_GetPriorityGrouping>
 8007a24:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8007a26:	687a      	ldr	r2, [r7, #4]
 8007a28:	68b9      	ldr	r1, [r7, #8]
 8007a2a:	6978      	ldr	r0, [r7, #20]
 8007a2c:	f7ff ff78 	bl	8007920 <NVIC_EncodePriority>
 8007a30:	4602      	mov	r2, r0
 8007a32:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a36:	4611      	mov	r1, r2
 8007a38:	4618      	mov	r0, r3
 8007a3a:	f7ff ff47 	bl	80078cc <__NVIC_SetPriority>
}
 8007a3e:	bf00      	nop
 8007a40:	3718      	adds	r7, #24
 8007a42:	46bd      	mov	sp, r7
 8007a44:	bd80      	pop	{r7, pc}

08007a46 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a46:	b580      	push	{r7, lr}
 8007a48:	b082      	sub	sp, #8
 8007a4a:	af00      	add	r7, sp, #0
 8007a4c:	4603      	mov	r3, r0
 8007a4e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a50:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a54:	4618      	mov	r0, r3
 8007a56:	f7ff ff1b 	bl	8007890 <__NVIC_EnableIRQ>
}
 8007a5a:	bf00      	nop
 8007a5c:	3708      	adds	r7, #8
 8007a5e:	46bd      	mov	sp, r7
 8007a60:	bd80      	pop	{r7, pc}

08007a62 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007a62:	b580      	push	{r7, lr}
 8007a64:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007a66:	f7ff ff8f 	bl	8007988 <__NVIC_SystemReset>

08007a6a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a6a:	b580      	push	{r7, lr}
 8007a6c:	b082      	sub	sp, #8
 8007a6e:	af00      	add	r7, sp, #0
 8007a70:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a72:	6878      	ldr	r0, [r7, #4]
 8007a74:	f7ff ff9e 	bl	80079b4 <SysTick_Config>
 8007a78:	4603      	mov	r3, r0
}
 8007a7a:	4618      	mov	r0, r3
 8007a7c:	3708      	adds	r7, #8
 8007a7e:	46bd      	mov	sp, r7
 8007a80:	bd80      	pop	{r7, pc}

08007a82 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a82:	b580      	push	{r7, lr}
 8007a84:	b084      	sub	sp, #16
 8007a86:	af00      	add	r7, sp, #0
 8007a88:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a8e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007a90:	f7ff fe9c 	bl	80077cc <HAL_GetTick>
 8007a94:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a96:	687b      	ldr	r3, [r7, #4]
 8007a98:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a9c:	b2db      	uxtb	r3, r3
 8007a9e:	2b02      	cmp	r3, #2
 8007aa0:	d008      	beq.n	8007ab4 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2280      	movs	r2, #128	; 0x80
 8007aa6:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	2200      	movs	r2, #0
 8007aac:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007ab0:	2301      	movs	r3, #1
 8007ab2:	e052      	b.n	8007b5a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	681b      	ldr	r3, [r3, #0]
 8007ab8:	681a      	ldr	r2, [r3, #0]
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	681b      	ldr	r3, [r3, #0]
 8007abe:	f022 0216 	bic.w	r2, r2, #22
 8007ac2:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	681b      	ldr	r3, [r3, #0]
 8007ac8:	695a      	ldr	r2, [r3, #20]
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	681b      	ldr	r3, [r3, #0]
 8007ace:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007ad2:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ad8:	2b00      	cmp	r3, #0
 8007ada:	d103      	bne.n	8007ae4 <HAL_DMA_Abort+0x62>
 8007adc:	687b      	ldr	r3, [r7, #4]
 8007ade:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d007      	beq.n	8007af4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007ae4:	687b      	ldr	r3, [r7, #4]
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	681a      	ldr	r2, [r3, #0]
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	681b      	ldr	r3, [r3, #0]
 8007aee:	f022 0208 	bic.w	r2, r2, #8
 8007af2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	681b      	ldr	r3, [r3, #0]
 8007af8:	681a      	ldr	r2, [r3, #0]
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	681b      	ldr	r3, [r3, #0]
 8007afe:	f022 0201 	bic.w	r2, r2, #1
 8007b02:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b04:	e013      	b.n	8007b2e <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007b06:	f7ff fe61 	bl	80077cc <HAL_GetTick>
 8007b0a:	4602      	mov	r2, r0
 8007b0c:	68bb      	ldr	r3, [r7, #8]
 8007b0e:	1ad3      	subs	r3, r2, r3
 8007b10:	2b05      	cmp	r3, #5
 8007b12:	d90c      	bls.n	8007b2e <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	2220      	movs	r2, #32
 8007b18:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	2203      	movs	r2, #3
 8007b1e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007b22:	687b      	ldr	r3, [r7, #4]
 8007b24:	2200      	movs	r2, #0
 8007b26:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007b2a:	2303      	movs	r3, #3
 8007b2c:	e015      	b.n	8007b5a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b2e:	687b      	ldr	r3, [r7, #4]
 8007b30:	681b      	ldr	r3, [r3, #0]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	f003 0301 	and.w	r3, r3, #1
 8007b38:	2b00      	cmp	r3, #0
 8007b3a:	d1e4      	bne.n	8007b06 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b3c:	687b      	ldr	r3, [r7, #4]
 8007b3e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b40:	223f      	movs	r2, #63	; 0x3f
 8007b42:	409a      	lsls	r2, r3
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	2201      	movs	r2, #1
 8007b4c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b50:	687b      	ldr	r3, [r7, #4]
 8007b52:	2200      	movs	r2, #0
 8007b54:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007b58:	2300      	movs	r3, #0
}
 8007b5a:	4618      	mov	r0, r3
 8007b5c:	3710      	adds	r7, #16
 8007b5e:	46bd      	mov	sp, r7
 8007b60:	bd80      	pop	{r7, pc}

08007b62 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b62:	b480      	push	{r7}
 8007b64:	b083      	sub	sp, #12
 8007b66:	af00      	add	r7, sp, #0
 8007b68:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b70:	b2db      	uxtb	r3, r3
 8007b72:	2b02      	cmp	r3, #2
 8007b74:	d004      	beq.n	8007b80 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b76:	687b      	ldr	r3, [r7, #4]
 8007b78:	2280      	movs	r2, #128	; 0x80
 8007b7a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b7c:	2301      	movs	r3, #1
 8007b7e:	e00c      	b.n	8007b9a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b80:	687b      	ldr	r3, [r7, #4]
 8007b82:	2205      	movs	r2, #5
 8007b84:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b88:	687b      	ldr	r3, [r7, #4]
 8007b8a:	681b      	ldr	r3, [r3, #0]
 8007b8c:	681a      	ldr	r2, [r3, #0]
 8007b8e:	687b      	ldr	r3, [r7, #4]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	f022 0201 	bic.w	r2, r2, #1
 8007b96:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007b98:	2300      	movs	r3, #0
}
 8007b9a:	4618      	mov	r0, r3
 8007b9c:	370c      	adds	r7, #12
 8007b9e:	46bd      	mov	sp, r7
 8007ba0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ba4:	4770      	bx	lr
	...

08007ba8 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007ba8:	b580      	push	{r7, lr}
 8007baa:	b086      	sub	sp, #24
 8007bac:	af00      	add	r7, sp, #0
 8007bae:	60f8      	str	r0, [r7, #12]
 8007bb0:	60b9      	str	r1, [r7, #8]
 8007bb2:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007bb6:	2301      	movs	r3, #1
 8007bb8:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007bba:	4b23      	ldr	r3, [pc, #140]	; (8007c48 <HAL_FLASH_Program+0xa0>)
 8007bbc:	7e1b      	ldrb	r3, [r3, #24]
 8007bbe:	2b01      	cmp	r3, #1
 8007bc0:	d101      	bne.n	8007bc6 <HAL_FLASH_Program+0x1e>
 8007bc2:	2302      	movs	r3, #2
 8007bc4:	e03b      	b.n	8007c3e <HAL_FLASH_Program+0x96>
 8007bc6:	4b20      	ldr	r3, [pc, #128]	; (8007c48 <HAL_FLASH_Program+0xa0>)
 8007bc8:	2201      	movs	r2, #1
 8007bca:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007bcc:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007bd0:	f000 f87c 	bl	8007ccc <FLASH_WaitForLastOperation>
 8007bd4:	4603      	mov	r3, r0
 8007bd6:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007bd8:	7dfb      	ldrb	r3, [r7, #23]
 8007bda:	2b00      	cmp	r3, #0
 8007bdc:	d12b      	bne.n	8007c36 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007bde:	68fb      	ldr	r3, [r7, #12]
 8007be0:	2b00      	cmp	r3, #0
 8007be2:	d105      	bne.n	8007bf0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007be4:	783b      	ldrb	r3, [r7, #0]
 8007be6:	4619      	mov	r1, r3
 8007be8:	68b8      	ldr	r0, [r7, #8]
 8007bea:	f000 f927 	bl	8007e3c <FLASH_Program_Byte>
 8007bee:	e016      	b.n	8007c1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007bf0:	68fb      	ldr	r3, [r7, #12]
 8007bf2:	2b01      	cmp	r3, #1
 8007bf4:	d105      	bne.n	8007c02 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007bf6:	883b      	ldrh	r3, [r7, #0]
 8007bf8:	4619      	mov	r1, r3
 8007bfa:	68b8      	ldr	r0, [r7, #8]
 8007bfc:	f000 f8fa 	bl	8007df4 <FLASH_Program_HalfWord>
 8007c00:	e00d      	b.n	8007c1e <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007c02:	68fb      	ldr	r3, [r7, #12]
 8007c04:	2b02      	cmp	r3, #2
 8007c06:	d105      	bne.n	8007c14 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007c08:	683b      	ldr	r3, [r7, #0]
 8007c0a:	4619      	mov	r1, r3
 8007c0c:	68b8      	ldr	r0, [r7, #8]
 8007c0e:	f000 f8cf 	bl	8007db0 <FLASH_Program_Word>
 8007c12:	e004      	b.n	8007c1e <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007c14:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007c18:	68b8      	ldr	r0, [r7, #8]
 8007c1a:	f000 f897 	bl	8007d4c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007c1e:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007c22:	f000 f853 	bl	8007ccc <FLASH_WaitForLastOperation>
 8007c26:	4603      	mov	r3, r0
 8007c28:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007c2a:	4b08      	ldr	r3, [pc, #32]	; (8007c4c <HAL_FLASH_Program+0xa4>)
 8007c2c:	691b      	ldr	r3, [r3, #16]
 8007c2e:	4a07      	ldr	r2, [pc, #28]	; (8007c4c <HAL_FLASH_Program+0xa4>)
 8007c30:	f023 0301 	bic.w	r3, r3, #1
 8007c34:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007c36:	4b04      	ldr	r3, [pc, #16]	; (8007c48 <HAL_FLASH_Program+0xa0>)
 8007c38:	2200      	movs	r2, #0
 8007c3a:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007c3c:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c3e:	4618      	mov	r0, r3
 8007c40:	3718      	adds	r7, #24
 8007c42:	46bd      	mov	sp, r7
 8007c44:	bd80      	pop	{r7, pc}
 8007c46:	bf00      	nop
 8007c48:	20000550 	.word	0x20000550
 8007c4c:	40023c00 	.word	0x40023c00

08007c50 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007c50:	b480      	push	{r7}
 8007c52:	b083      	sub	sp, #12
 8007c54:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007c56:	2300      	movs	r3, #0
 8007c58:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007c5a:	4b0b      	ldr	r3, [pc, #44]	; (8007c88 <HAL_FLASH_Unlock+0x38>)
 8007c5c:	691b      	ldr	r3, [r3, #16]
 8007c5e:	2b00      	cmp	r3, #0
 8007c60:	da0b      	bge.n	8007c7a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007c62:	4b09      	ldr	r3, [pc, #36]	; (8007c88 <HAL_FLASH_Unlock+0x38>)
 8007c64:	4a09      	ldr	r2, [pc, #36]	; (8007c8c <HAL_FLASH_Unlock+0x3c>)
 8007c66:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007c68:	4b07      	ldr	r3, [pc, #28]	; (8007c88 <HAL_FLASH_Unlock+0x38>)
 8007c6a:	4a09      	ldr	r2, [pc, #36]	; (8007c90 <HAL_FLASH_Unlock+0x40>)
 8007c6c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007c6e:	4b06      	ldr	r3, [pc, #24]	; (8007c88 <HAL_FLASH_Unlock+0x38>)
 8007c70:	691b      	ldr	r3, [r3, #16]
 8007c72:	2b00      	cmp	r3, #0
 8007c74:	da01      	bge.n	8007c7a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007c76:	2301      	movs	r3, #1
 8007c78:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007c7a:	79fb      	ldrb	r3, [r7, #7]
}
 8007c7c:	4618      	mov	r0, r3
 8007c7e:	370c      	adds	r7, #12
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	40023c00 	.word	0x40023c00
 8007c8c:	45670123 	.word	0x45670123
 8007c90:	cdef89ab 	.word	0xcdef89ab

08007c94 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007c94:	b480      	push	{r7}
 8007c96:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007c98:	4b05      	ldr	r3, [pc, #20]	; (8007cb0 <HAL_FLASH_Lock+0x1c>)
 8007c9a:	691b      	ldr	r3, [r3, #16]
 8007c9c:	4a04      	ldr	r2, [pc, #16]	; (8007cb0 <HAL_FLASH_Lock+0x1c>)
 8007c9e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007ca2:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007ca4:	2300      	movs	r3, #0
}
 8007ca6:	4618      	mov	r0, r3
 8007ca8:	46bd      	mov	sp, r7
 8007caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cae:	4770      	bx	lr
 8007cb0:	40023c00 	.word	0x40023c00

08007cb4 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8007cb4:	b480      	push	{r7}
 8007cb6:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8007cb8:	4b03      	ldr	r3, [pc, #12]	; (8007cc8 <HAL_FLASH_GetError+0x14>)
 8007cba:	69db      	ldr	r3, [r3, #28]
}  
 8007cbc:	4618      	mov	r0, r3
 8007cbe:	46bd      	mov	sp, r7
 8007cc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007cc4:	4770      	bx	lr
 8007cc6:	bf00      	nop
 8007cc8:	20000550 	.word	0x20000550

08007ccc <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007ccc:	b580      	push	{r7, lr}
 8007cce:	b084      	sub	sp, #16
 8007cd0:	af00      	add	r7, sp, #0
 8007cd2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cd4:	2300      	movs	r3, #0
 8007cd6:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007cd8:	4b1a      	ldr	r3, [pc, #104]	; (8007d44 <FLASH_WaitForLastOperation+0x78>)
 8007cda:	2200      	movs	r2, #0
 8007cdc:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007cde:	f7ff fd75 	bl	80077cc <HAL_GetTick>
 8007ce2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007ce4:	e010      	b.n	8007d08 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cec:	d00c      	beq.n	8007d08 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	2b00      	cmp	r3, #0
 8007cf2:	d007      	beq.n	8007d04 <FLASH_WaitForLastOperation+0x38>
 8007cf4:	f7ff fd6a 	bl	80077cc <HAL_GetTick>
 8007cf8:	4602      	mov	r2, r0
 8007cfa:	68fb      	ldr	r3, [r7, #12]
 8007cfc:	1ad3      	subs	r3, r2, r3
 8007cfe:	687a      	ldr	r2, [r7, #4]
 8007d00:	429a      	cmp	r2, r3
 8007d02:	d201      	bcs.n	8007d08 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007d04:	2303      	movs	r3, #3
 8007d06:	e019      	b.n	8007d3c <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007d08:	4b0f      	ldr	r3, [pc, #60]	; (8007d48 <FLASH_WaitForLastOperation+0x7c>)
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d1e8      	bne.n	8007ce6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007d14:	4b0c      	ldr	r3, [pc, #48]	; (8007d48 <FLASH_WaitForLastOperation+0x7c>)
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0301 	and.w	r3, r3, #1
 8007d1c:	2b00      	cmp	r3, #0
 8007d1e:	d002      	beq.n	8007d26 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007d20:	4b09      	ldr	r3, [pc, #36]	; (8007d48 <FLASH_WaitForLastOperation+0x7c>)
 8007d22:	2201      	movs	r2, #1
 8007d24:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007d26:	4b08      	ldr	r3, [pc, #32]	; (8007d48 <FLASH_WaitForLastOperation+0x7c>)
 8007d28:	68db      	ldr	r3, [r3, #12]
 8007d2a:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007d2e:	2b00      	cmp	r3, #0
 8007d30:	d003      	beq.n	8007d3a <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007d32:	f000 f8a5 	bl	8007e80 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007d36:	2301      	movs	r3, #1
 8007d38:	e000      	b.n	8007d3c <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007d3a:	2300      	movs	r3, #0
  
}  
 8007d3c:	4618      	mov	r0, r3
 8007d3e:	3710      	adds	r7, #16
 8007d40:	46bd      	mov	sp, r7
 8007d42:	bd80      	pop	{r7, pc}
 8007d44:	20000550 	.word	0x20000550
 8007d48:	40023c00 	.word	0x40023c00

08007d4c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007d4c:	b480      	push	{r7}
 8007d4e:	b085      	sub	sp, #20
 8007d50:	af00      	add	r7, sp, #0
 8007d52:	60f8      	str	r0, [r7, #12]
 8007d54:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d58:	4b14      	ldr	r3, [pc, #80]	; (8007dac <FLASH_Program_DoubleWord+0x60>)
 8007d5a:	691b      	ldr	r3, [r3, #16]
 8007d5c:	4a13      	ldr	r2, [pc, #76]	; (8007dac <FLASH_Program_DoubleWord+0x60>)
 8007d5e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d62:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007d64:	4b11      	ldr	r3, [pc, #68]	; (8007dac <FLASH_Program_DoubleWord+0x60>)
 8007d66:	691b      	ldr	r3, [r3, #16]
 8007d68:	4a10      	ldr	r2, [pc, #64]	; (8007dac <FLASH_Program_DoubleWord+0x60>)
 8007d6a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007d70:	4b0e      	ldr	r3, [pc, #56]	; (8007dac <FLASH_Program_DoubleWord+0x60>)
 8007d72:	691b      	ldr	r3, [r3, #16]
 8007d74:	4a0d      	ldr	r2, [pc, #52]	; (8007dac <FLASH_Program_DoubleWord+0x60>)
 8007d76:	f043 0301 	orr.w	r3, r3, #1
 8007d7a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007d7c:	68fb      	ldr	r3, [r7, #12]
 8007d7e:	683a      	ldr	r2, [r7, #0]
 8007d80:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007d82:	f3bf 8f6f 	isb	sy
}
 8007d86:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007d88:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d8c:	f04f 0200 	mov.w	r2, #0
 8007d90:	f04f 0300 	mov.w	r3, #0
 8007d94:	000a      	movs	r2, r1
 8007d96:	2300      	movs	r3, #0
 8007d98:	68f9      	ldr	r1, [r7, #12]
 8007d9a:	3104      	adds	r1, #4
 8007d9c:	4613      	mov	r3, r2
 8007d9e:	600b      	str	r3, [r1, #0]
}
 8007da0:	bf00      	nop
 8007da2:	3714      	adds	r7, #20
 8007da4:	46bd      	mov	sp, r7
 8007da6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007daa:	4770      	bx	lr
 8007dac:	40023c00 	.word	0x40023c00

08007db0 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007db0:	b480      	push	{r7}
 8007db2:	b083      	sub	sp, #12
 8007db4:	af00      	add	r7, sp, #0
 8007db6:	6078      	str	r0, [r7, #4]
 8007db8:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007dba:	4b0d      	ldr	r3, [pc, #52]	; (8007df0 <FLASH_Program_Word+0x40>)
 8007dbc:	691b      	ldr	r3, [r3, #16]
 8007dbe:	4a0c      	ldr	r2, [pc, #48]	; (8007df0 <FLASH_Program_Word+0x40>)
 8007dc0:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007dc4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007dc6:	4b0a      	ldr	r3, [pc, #40]	; (8007df0 <FLASH_Program_Word+0x40>)
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	4a09      	ldr	r2, [pc, #36]	; (8007df0 <FLASH_Program_Word+0x40>)
 8007dcc:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007dd0:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007dd2:	4b07      	ldr	r3, [pc, #28]	; (8007df0 <FLASH_Program_Word+0x40>)
 8007dd4:	691b      	ldr	r3, [r3, #16]
 8007dd6:	4a06      	ldr	r2, [pc, #24]	; (8007df0 <FLASH_Program_Word+0x40>)
 8007dd8:	f043 0301 	orr.w	r3, r3, #1
 8007ddc:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007dde:	687b      	ldr	r3, [r7, #4]
 8007de0:	683a      	ldr	r2, [r7, #0]
 8007de2:	601a      	str	r2, [r3, #0]
}
 8007de4:	bf00      	nop
 8007de6:	370c      	adds	r7, #12
 8007de8:	46bd      	mov	sp, r7
 8007dea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dee:	4770      	bx	lr
 8007df0:	40023c00 	.word	0x40023c00

08007df4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007df4:	b480      	push	{r7}
 8007df6:	b083      	sub	sp, #12
 8007df8:	af00      	add	r7, sp, #0
 8007dfa:	6078      	str	r0, [r7, #4]
 8007dfc:	460b      	mov	r3, r1
 8007dfe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007e00:	4b0d      	ldr	r3, [pc, #52]	; (8007e38 <FLASH_Program_HalfWord+0x44>)
 8007e02:	691b      	ldr	r3, [r3, #16]
 8007e04:	4a0c      	ldr	r2, [pc, #48]	; (8007e38 <FLASH_Program_HalfWord+0x44>)
 8007e06:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e0a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007e0c:	4b0a      	ldr	r3, [pc, #40]	; (8007e38 <FLASH_Program_HalfWord+0x44>)
 8007e0e:	691b      	ldr	r3, [r3, #16]
 8007e10:	4a09      	ldr	r2, [pc, #36]	; (8007e38 <FLASH_Program_HalfWord+0x44>)
 8007e12:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007e16:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007e18:	4b07      	ldr	r3, [pc, #28]	; (8007e38 <FLASH_Program_HalfWord+0x44>)
 8007e1a:	691b      	ldr	r3, [r3, #16]
 8007e1c:	4a06      	ldr	r2, [pc, #24]	; (8007e38 <FLASH_Program_HalfWord+0x44>)
 8007e1e:	f043 0301 	orr.w	r3, r3, #1
 8007e22:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	887a      	ldrh	r2, [r7, #2]
 8007e28:	801a      	strh	r2, [r3, #0]
}
 8007e2a:	bf00      	nop
 8007e2c:	370c      	adds	r7, #12
 8007e2e:	46bd      	mov	sp, r7
 8007e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e34:	4770      	bx	lr
 8007e36:	bf00      	nop
 8007e38:	40023c00 	.word	0x40023c00

08007e3c <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007e3c:	b480      	push	{r7}
 8007e3e:	b083      	sub	sp, #12
 8007e40:	af00      	add	r7, sp, #0
 8007e42:	6078      	str	r0, [r7, #4]
 8007e44:	460b      	mov	r3, r1
 8007e46:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007e48:	4b0c      	ldr	r3, [pc, #48]	; (8007e7c <FLASH_Program_Byte+0x40>)
 8007e4a:	691b      	ldr	r3, [r3, #16]
 8007e4c:	4a0b      	ldr	r2, [pc, #44]	; (8007e7c <FLASH_Program_Byte+0x40>)
 8007e4e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e52:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007e54:	4b09      	ldr	r3, [pc, #36]	; (8007e7c <FLASH_Program_Byte+0x40>)
 8007e56:	4a09      	ldr	r2, [pc, #36]	; (8007e7c <FLASH_Program_Byte+0x40>)
 8007e58:	691b      	ldr	r3, [r3, #16]
 8007e5a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007e5c:	4b07      	ldr	r3, [pc, #28]	; (8007e7c <FLASH_Program_Byte+0x40>)
 8007e5e:	691b      	ldr	r3, [r3, #16]
 8007e60:	4a06      	ldr	r2, [pc, #24]	; (8007e7c <FLASH_Program_Byte+0x40>)
 8007e62:	f043 0301 	orr.w	r3, r3, #1
 8007e66:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007e68:	687b      	ldr	r3, [r7, #4]
 8007e6a:	78fa      	ldrb	r2, [r7, #3]
 8007e6c:	701a      	strb	r2, [r3, #0]
}
 8007e6e:	bf00      	nop
 8007e70:	370c      	adds	r7, #12
 8007e72:	46bd      	mov	sp, r7
 8007e74:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e78:	4770      	bx	lr
 8007e7a:	bf00      	nop
 8007e7c:	40023c00 	.word	0x40023c00

08007e80 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007e80:	b480      	push	{r7}
 8007e82:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007e84:	4b27      	ldr	r3, [pc, #156]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007e86:	68db      	ldr	r3, [r3, #12]
 8007e88:	f003 0310 	and.w	r3, r3, #16
 8007e8c:	2b00      	cmp	r3, #0
 8007e8e:	d008      	beq.n	8007ea2 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007e90:	4b25      	ldr	r3, [pc, #148]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007e92:	69db      	ldr	r3, [r3, #28]
 8007e94:	f043 0310 	orr.w	r3, r3, #16
 8007e98:	4a23      	ldr	r2, [pc, #140]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007e9a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007e9c:	4b21      	ldr	r3, [pc, #132]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007e9e:	2210      	movs	r2, #16
 8007ea0:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007ea2:	4b20      	ldr	r3, [pc, #128]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007ea4:	68db      	ldr	r3, [r3, #12]
 8007ea6:	f003 0320 	and.w	r3, r3, #32
 8007eaa:	2b00      	cmp	r3, #0
 8007eac:	d008      	beq.n	8007ec0 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007eae:	4b1e      	ldr	r3, [pc, #120]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007eb0:	69db      	ldr	r3, [r3, #28]
 8007eb2:	f043 0308 	orr.w	r3, r3, #8
 8007eb6:	4a1c      	ldr	r2, [pc, #112]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007eb8:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007eba:	4b1a      	ldr	r3, [pc, #104]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007ebc:	2220      	movs	r2, #32
 8007ebe:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007ec0:	4b18      	ldr	r3, [pc, #96]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007ec2:	68db      	ldr	r3, [r3, #12]
 8007ec4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ec8:	2b00      	cmp	r3, #0
 8007eca:	d008      	beq.n	8007ede <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007ecc:	4b16      	ldr	r3, [pc, #88]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007ece:	69db      	ldr	r3, [r3, #28]
 8007ed0:	f043 0304 	orr.w	r3, r3, #4
 8007ed4:	4a14      	ldr	r2, [pc, #80]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007ed6:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007ed8:	4b12      	ldr	r3, [pc, #72]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007eda:	2240      	movs	r2, #64	; 0x40
 8007edc:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007ede:	4b11      	ldr	r3, [pc, #68]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007ee0:	68db      	ldr	r3, [r3, #12]
 8007ee2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ee6:	2b00      	cmp	r3, #0
 8007ee8:	d008      	beq.n	8007efc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007eea:	4b0f      	ldr	r3, [pc, #60]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007eec:	69db      	ldr	r3, [r3, #28]
 8007eee:	f043 0302 	orr.w	r3, r3, #2
 8007ef2:	4a0d      	ldr	r2, [pc, #52]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007ef4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007ef6:	4b0b      	ldr	r3, [pc, #44]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007ef8:	2280      	movs	r2, #128	; 0x80
 8007efa:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007efc:	4b09      	ldr	r3, [pc, #36]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007efe:	68db      	ldr	r3, [r3, #12]
 8007f00:	f003 0302 	and.w	r3, r3, #2
 8007f04:	2b00      	cmp	r3, #0
 8007f06:	d008      	beq.n	8007f1a <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007f08:	4b07      	ldr	r3, [pc, #28]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007f0a:	69db      	ldr	r3, [r3, #28]
 8007f0c:	f043 0320 	orr.w	r3, r3, #32
 8007f10:	4a05      	ldr	r2, [pc, #20]	; (8007f28 <FLASH_SetErrorCode+0xa8>)
 8007f12:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007f14:	4b03      	ldr	r3, [pc, #12]	; (8007f24 <FLASH_SetErrorCode+0xa4>)
 8007f16:	2202      	movs	r2, #2
 8007f18:	60da      	str	r2, [r3, #12]
  }
}
 8007f1a:	bf00      	nop
 8007f1c:	46bd      	mov	sp, r7
 8007f1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f22:	4770      	bx	lr
 8007f24:	40023c00 	.word	0x40023c00
 8007f28:	20000550 	.word	0x20000550

08007f2c <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007f2c:	b580      	push	{r7, lr}
 8007f2e:	b084      	sub	sp, #16
 8007f30:	af00      	add	r7, sp, #0
 8007f32:	6078      	str	r0, [r7, #4]
 8007f34:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f36:	2301      	movs	r3, #1
 8007f38:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007f3e:	4b31      	ldr	r3, [pc, #196]	; (8008004 <HAL_FLASHEx_Erase+0xd8>)
 8007f40:	7e1b      	ldrb	r3, [r3, #24]
 8007f42:	2b01      	cmp	r3, #1
 8007f44:	d101      	bne.n	8007f4a <HAL_FLASHEx_Erase+0x1e>
 8007f46:	2302      	movs	r3, #2
 8007f48:	e058      	b.n	8007ffc <HAL_FLASHEx_Erase+0xd0>
 8007f4a:	4b2e      	ldr	r3, [pc, #184]	; (8008004 <HAL_FLASHEx_Erase+0xd8>)
 8007f4c:	2201      	movs	r2, #1
 8007f4e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007f50:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007f54:	f7ff feba 	bl	8007ccc <FLASH_WaitForLastOperation>
 8007f58:	4603      	mov	r3, r0
 8007f5a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007f5c:	7bfb      	ldrb	r3, [r7, #15]
 8007f5e:	2b00      	cmp	r3, #0
 8007f60:	d148      	bne.n	8007ff4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007f62:	683b      	ldr	r3, [r7, #0]
 8007f64:	f04f 32ff 	mov.w	r2, #4294967295
 8007f68:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	681b      	ldr	r3, [r3, #0]
 8007f6e:	2b01      	cmp	r3, #1
 8007f70:	d115      	bne.n	8007f9e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007f72:	687b      	ldr	r3, [r7, #4]
 8007f74:	691b      	ldr	r3, [r3, #16]
 8007f76:	b2da      	uxtb	r2, r3
 8007f78:	687b      	ldr	r3, [r7, #4]
 8007f7a:	685b      	ldr	r3, [r3, #4]
 8007f7c:	4619      	mov	r1, r3
 8007f7e:	4610      	mov	r0, r2
 8007f80:	f000 f844 	bl	800800c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007f84:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007f88:	f7ff fea0 	bl	8007ccc <FLASH_WaitForLastOperation>
 8007f8c:	4603      	mov	r3, r0
 8007f8e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007f90:	4b1d      	ldr	r3, [pc, #116]	; (8008008 <HAL_FLASHEx_Erase+0xdc>)
 8007f92:	691b      	ldr	r3, [r3, #16]
 8007f94:	4a1c      	ldr	r2, [pc, #112]	; (8008008 <HAL_FLASHEx_Erase+0xdc>)
 8007f96:	f023 0304 	bic.w	r3, r3, #4
 8007f9a:	6113      	str	r3, [r2, #16]
 8007f9c:	e028      	b.n	8007ff0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007f9e:	687b      	ldr	r3, [r7, #4]
 8007fa0:	689b      	ldr	r3, [r3, #8]
 8007fa2:	60bb      	str	r3, [r7, #8]
 8007fa4:	e01c      	b.n	8007fe0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007fa6:	687b      	ldr	r3, [r7, #4]
 8007fa8:	691b      	ldr	r3, [r3, #16]
 8007faa:	b2db      	uxtb	r3, r3
 8007fac:	4619      	mov	r1, r3
 8007fae:	68b8      	ldr	r0, [r7, #8]
 8007fb0:	f000 f850 	bl	8008054 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007fb4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007fb8:	f7ff fe88 	bl	8007ccc <FLASH_WaitForLastOperation>
 8007fbc:	4603      	mov	r3, r0
 8007fbe:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007fc0:	4b11      	ldr	r3, [pc, #68]	; (8008008 <HAL_FLASHEx_Erase+0xdc>)
 8007fc2:	691b      	ldr	r3, [r3, #16]
 8007fc4:	4a10      	ldr	r2, [pc, #64]	; (8008008 <HAL_FLASHEx_Erase+0xdc>)
 8007fc6:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007fca:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007fcc:	7bfb      	ldrb	r3, [r7, #15]
 8007fce:	2b00      	cmp	r3, #0
 8007fd0:	d003      	beq.n	8007fda <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007fd2:	683b      	ldr	r3, [r7, #0]
 8007fd4:	68ba      	ldr	r2, [r7, #8]
 8007fd6:	601a      	str	r2, [r3, #0]
          break;
 8007fd8:	e00a      	b.n	8007ff0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007fda:	68bb      	ldr	r3, [r7, #8]
 8007fdc:	3301      	adds	r3, #1
 8007fde:	60bb      	str	r3, [r7, #8]
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	68da      	ldr	r2, [r3, #12]
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	689b      	ldr	r3, [r3, #8]
 8007fe8:	4413      	add	r3, r2
 8007fea:	68ba      	ldr	r2, [r7, #8]
 8007fec:	429a      	cmp	r2, r3
 8007fee:	d3da      	bcc.n	8007fa6 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007ff0:	f000 f878 	bl	80080e4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007ff4:	4b03      	ldr	r3, [pc, #12]	; (8008004 <HAL_FLASHEx_Erase+0xd8>)
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	761a      	strb	r2, [r3, #24]

  return status;
 8007ffa:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ffc:	4618      	mov	r0, r3
 8007ffe:	3710      	adds	r7, #16
 8008000:	46bd      	mov	sp, r7
 8008002:	bd80      	pop	{r7, pc}
 8008004:	20000550 	.word	0x20000550
 8008008:	40023c00 	.word	0x40023c00

0800800c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800800c:	b480      	push	{r7}
 800800e:	b083      	sub	sp, #12
 8008010:	af00      	add	r7, sp, #0
 8008012:	4603      	mov	r3, r0
 8008014:	6039      	str	r1, [r7, #0]
 8008016:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008018:	4b0d      	ldr	r3, [pc, #52]	; (8008050 <FLASH_MassErase+0x44>)
 800801a:	691b      	ldr	r3, [r3, #16]
 800801c:	4a0c      	ldr	r2, [pc, #48]	; (8008050 <FLASH_MassErase+0x44>)
 800801e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008022:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8008024:	4b0a      	ldr	r3, [pc, #40]	; (8008050 <FLASH_MassErase+0x44>)
 8008026:	691b      	ldr	r3, [r3, #16]
 8008028:	4a09      	ldr	r2, [pc, #36]	; (8008050 <FLASH_MassErase+0x44>)
 800802a:	f043 0304 	orr.w	r3, r3, #4
 800802e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8008030:	4b07      	ldr	r3, [pc, #28]	; (8008050 <FLASH_MassErase+0x44>)
 8008032:	691a      	ldr	r2, [r3, #16]
 8008034:	79fb      	ldrb	r3, [r7, #7]
 8008036:	021b      	lsls	r3, r3, #8
 8008038:	4313      	orrs	r3, r2
 800803a:	4a05      	ldr	r2, [pc, #20]	; (8008050 <FLASH_MassErase+0x44>)
 800803c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008040:	6113      	str	r3, [r2, #16]
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
 800804e:	bf00      	nop
 8008050:	40023c00 	.word	0x40023c00

08008054 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8008054:	b480      	push	{r7}
 8008056:	b085      	sub	sp, #20
 8008058:	af00      	add	r7, sp, #0
 800805a:	6078      	str	r0, [r7, #4]
 800805c:	460b      	mov	r3, r1
 800805e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008060:	2300      	movs	r3, #0
 8008062:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8008064:	78fb      	ldrb	r3, [r7, #3]
 8008066:	2b00      	cmp	r3, #0
 8008068:	d102      	bne.n	8008070 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 800806a:	2300      	movs	r3, #0
 800806c:	60fb      	str	r3, [r7, #12]
 800806e:	e010      	b.n	8008092 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008070:	78fb      	ldrb	r3, [r7, #3]
 8008072:	2b01      	cmp	r3, #1
 8008074:	d103      	bne.n	800807e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8008076:	f44f 7380 	mov.w	r3, #256	; 0x100
 800807a:	60fb      	str	r3, [r7, #12]
 800807c:	e009      	b.n	8008092 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800807e:	78fb      	ldrb	r3, [r7, #3]
 8008080:	2b02      	cmp	r3, #2
 8008082:	d103      	bne.n	800808c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8008084:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008088:	60fb      	str	r3, [r7, #12]
 800808a:	e002      	b.n	8008092 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800808c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008090:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8008092:	4b13      	ldr	r3, [pc, #76]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 8008094:	691b      	ldr	r3, [r3, #16]
 8008096:	4a12      	ldr	r2, [pc, #72]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 8008098:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800809c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800809e:	4b10      	ldr	r3, [pc, #64]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 80080a0:	691a      	ldr	r2, [r3, #16]
 80080a2:	490f      	ldr	r1, [pc, #60]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 80080a4:	68fb      	ldr	r3, [r7, #12]
 80080a6:	4313      	orrs	r3, r2
 80080a8:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 80080aa:	4b0d      	ldr	r3, [pc, #52]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 80080ac:	691b      	ldr	r3, [r3, #16]
 80080ae:	4a0c      	ldr	r2, [pc, #48]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 80080b0:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 80080b4:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 80080b6:	4b0a      	ldr	r3, [pc, #40]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 80080b8:	691a      	ldr	r2, [r3, #16]
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	00db      	lsls	r3, r3, #3
 80080be:	4313      	orrs	r3, r2
 80080c0:	4a07      	ldr	r2, [pc, #28]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 80080c2:	f043 0302 	orr.w	r3, r3, #2
 80080c6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80080c8:	4b05      	ldr	r3, [pc, #20]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 80080ca:	691b      	ldr	r3, [r3, #16]
 80080cc:	4a04      	ldr	r2, [pc, #16]	; (80080e0 <FLASH_Erase_Sector+0x8c>)
 80080ce:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080d2:	6113      	str	r3, [r2, #16]
}
 80080d4:	bf00      	nop
 80080d6:	3714      	adds	r7, #20
 80080d8:	46bd      	mov	sp, r7
 80080da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080de:	4770      	bx	lr
 80080e0:	40023c00 	.word	0x40023c00

080080e4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80080e4:	b480      	push	{r7}
 80080e6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80080e8:	4b20      	ldr	r3, [pc, #128]	; (800816c <FLASH_FlushCaches+0x88>)
 80080ea:	681b      	ldr	r3, [r3, #0]
 80080ec:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080f0:	2b00      	cmp	r3, #0
 80080f2:	d017      	beq.n	8008124 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80080f4:	4b1d      	ldr	r3, [pc, #116]	; (800816c <FLASH_FlushCaches+0x88>)
 80080f6:	681b      	ldr	r3, [r3, #0]
 80080f8:	4a1c      	ldr	r2, [pc, #112]	; (800816c <FLASH_FlushCaches+0x88>)
 80080fa:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080fe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8008100:	4b1a      	ldr	r3, [pc, #104]	; (800816c <FLASH_FlushCaches+0x88>)
 8008102:	681b      	ldr	r3, [r3, #0]
 8008104:	4a19      	ldr	r2, [pc, #100]	; (800816c <FLASH_FlushCaches+0x88>)
 8008106:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800810a:	6013      	str	r3, [r2, #0]
 800810c:	4b17      	ldr	r3, [pc, #92]	; (800816c <FLASH_FlushCaches+0x88>)
 800810e:	681b      	ldr	r3, [r3, #0]
 8008110:	4a16      	ldr	r2, [pc, #88]	; (800816c <FLASH_FlushCaches+0x88>)
 8008112:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8008116:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8008118:	4b14      	ldr	r3, [pc, #80]	; (800816c <FLASH_FlushCaches+0x88>)
 800811a:	681b      	ldr	r3, [r3, #0]
 800811c:	4a13      	ldr	r2, [pc, #76]	; (800816c <FLASH_FlushCaches+0x88>)
 800811e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8008122:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8008124:	4b11      	ldr	r3, [pc, #68]	; (800816c <FLASH_FlushCaches+0x88>)
 8008126:	681b      	ldr	r3, [r3, #0]
 8008128:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800812c:	2b00      	cmp	r3, #0
 800812e:	d017      	beq.n	8008160 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008130:	4b0e      	ldr	r3, [pc, #56]	; (800816c <FLASH_FlushCaches+0x88>)
 8008132:	681b      	ldr	r3, [r3, #0]
 8008134:	4a0d      	ldr	r2, [pc, #52]	; (800816c <FLASH_FlushCaches+0x88>)
 8008136:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800813a:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 800813c:	4b0b      	ldr	r3, [pc, #44]	; (800816c <FLASH_FlushCaches+0x88>)
 800813e:	681b      	ldr	r3, [r3, #0]
 8008140:	4a0a      	ldr	r2, [pc, #40]	; (800816c <FLASH_FlushCaches+0x88>)
 8008142:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8008146:	6013      	str	r3, [r2, #0]
 8008148:	4b08      	ldr	r3, [pc, #32]	; (800816c <FLASH_FlushCaches+0x88>)
 800814a:	681b      	ldr	r3, [r3, #0]
 800814c:	4a07      	ldr	r2, [pc, #28]	; (800816c <FLASH_FlushCaches+0x88>)
 800814e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8008152:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8008154:	4b05      	ldr	r3, [pc, #20]	; (800816c <FLASH_FlushCaches+0x88>)
 8008156:	681b      	ldr	r3, [r3, #0]
 8008158:	4a04      	ldr	r2, [pc, #16]	; (800816c <FLASH_FlushCaches+0x88>)
 800815a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800815e:	6013      	str	r3, [r2, #0]
  }
}
 8008160:	bf00      	nop
 8008162:	46bd      	mov	sp, r7
 8008164:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008168:	4770      	bx	lr
 800816a:	bf00      	nop
 800816c:	40023c00 	.word	0x40023c00

08008170 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008170:	b480      	push	{r7}
 8008172:	b089      	sub	sp, #36	; 0x24
 8008174:	af00      	add	r7, sp, #0
 8008176:	6078      	str	r0, [r7, #4]
 8008178:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800817a:	2300      	movs	r3, #0
 800817c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800817e:	2300      	movs	r3, #0
 8008180:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8008182:	2300      	movs	r3, #0
 8008184:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008186:	2300      	movs	r3, #0
 8008188:	61fb      	str	r3, [r7, #28]
 800818a:	e16b      	b.n	8008464 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800818c:	2201      	movs	r2, #1
 800818e:	69fb      	ldr	r3, [r7, #28]
 8008190:	fa02 f303 	lsl.w	r3, r2, r3
 8008194:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8008196:	683b      	ldr	r3, [r7, #0]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	697a      	ldr	r2, [r7, #20]
 800819c:	4013      	ands	r3, r2
 800819e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80081a0:	693a      	ldr	r2, [r7, #16]
 80081a2:	697b      	ldr	r3, [r7, #20]
 80081a4:	429a      	cmp	r2, r3
 80081a6:	f040 815a 	bne.w	800845e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081aa:	683b      	ldr	r3, [r7, #0]
 80081ac:	685b      	ldr	r3, [r3, #4]
 80081ae:	f003 0303 	and.w	r3, r3, #3
 80081b2:	2b01      	cmp	r3, #1
 80081b4:	d005      	beq.n	80081c2 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80081b6:	683b      	ldr	r3, [r7, #0]
 80081b8:	685b      	ldr	r3, [r3, #4]
 80081ba:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80081be:	2b02      	cmp	r3, #2
 80081c0:	d130      	bne.n	8008224 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	689b      	ldr	r3, [r3, #8]
 80081c6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80081c8:	69fb      	ldr	r3, [r7, #28]
 80081ca:	005b      	lsls	r3, r3, #1
 80081cc:	2203      	movs	r2, #3
 80081ce:	fa02 f303 	lsl.w	r3, r2, r3
 80081d2:	43db      	mvns	r3, r3
 80081d4:	69ba      	ldr	r2, [r7, #24]
 80081d6:	4013      	ands	r3, r2
 80081d8:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	68da      	ldr	r2, [r3, #12]
 80081de:	69fb      	ldr	r3, [r7, #28]
 80081e0:	005b      	lsls	r3, r3, #1
 80081e2:	fa02 f303 	lsl.w	r3, r2, r3
 80081e6:	69ba      	ldr	r2, [r7, #24]
 80081e8:	4313      	orrs	r3, r2
 80081ea:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	69ba      	ldr	r2, [r7, #24]
 80081f0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	685b      	ldr	r3, [r3, #4]
 80081f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80081f8:	2201      	movs	r2, #1
 80081fa:	69fb      	ldr	r3, [r7, #28]
 80081fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008200:	43db      	mvns	r3, r3
 8008202:	69ba      	ldr	r2, [r7, #24]
 8008204:	4013      	ands	r3, r2
 8008206:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	685b      	ldr	r3, [r3, #4]
 800820c:	091b      	lsrs	r3, r3, #4
 800820e:	f003 0201 	and.w	r2, r3, #1
 8008212:	69fb      	ldr	r3, [r7, #28]
 8008214:	fa02 f303 	lsl.w	r3, r2, r3
 8008218:	69ba      	ldr	r2, [r7, #24]
 800821a:	4313      	orrs	r3, r2
 800821c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800821e:	687b      	ldr	r3, [r7, #4]
 8008220:	69ba      	ldr	r2, [r7, #24]
 8008222:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8008224:	683b      	ldr	r3, [r7, #0]
 8008226:	685b      	ldr	r3, [r3, #4]
 8008228:	f003 0303 	and.w	r3, r3, #3
 800822c:	2b03      	cmp	r3, #3
 800822e:	d017      	beq.n	8008260 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008230:	687b      	ldr	r3, [r7, #4]
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8008236:	69fb      	ldr	r3, [r7, #28]
 8008238:	005b      	lsls	r3, r3, #1
 800823a:	2203      	movs	r2, #3
 800823c:	fa02 f303 	lsl.w	r3, r2, r3
 8008240:	43db      	mvns	r3, r3
 8008242:	69ba      	ldr	r2, [r7, #24]
 8008244:	4013      	ands	r3, r2
 8008246:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008248:	683b      	ldr	r3, [r7, #0]
 800824a:	689a      	ldr	r2, [r3, #8]
 800824c:	69fb      	ldr	r3, [r7, #28]
 800824e:	005b      	lsls	r3, r3, #1
 8008250:	fa02 f303 	lsl.w	r3, r2, r3
 8008254:	69ba      	ldr	r2, [r7, #24]
 8008256:	4313      	orrs	r3, r2
 8008258:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800825a:	687b      	ldr	r3, [r7, #4]
 800825c:	69ba      	ldr	r2, [r7, #24]
 800825e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008260:	683b      	ldr	r3, [r7, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	f003 0303 	and.w	r3, r3, #3
 8008268:	2b02      	cmp	r3, #2
 800826a:	d123      	bne.n	80082b4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	08da      	lsrs	r2, r3, #3
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	3208      	adds	r2, #8
 8008274:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008278:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800827a:	69fb      	ldr	r3, [r7, #28]
 800827c:	f003 0307 	and.w	r3, r3, #7
 8008280:	009b      	lsls	r3, r3, #2
 8008282:	220f      	movs	r2, #15
 8008284:	fa02 f303 	lsl.w	r3, r2, r3
 8008288:	43db      	mvns	r3, r3
 800828a:	69ba      	ldr	r2, [r7, #24]
 800828c:	4013      	ands	r3, r2
 800828e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008290:	683b      	ldr	r3, [r7, #0]
 8008292:	691a      	ldr	r2, [r3, #16]
 8008294:	69fb      	ldr	r3, [r7, #28]
 8008296:	f003 0307 	and.w	r3, r3, #7
 800829a:	009b      	lsls	r3, r3, #2
 800829c:	fa02 f303 	lsl.w	r3, r2, r3
 80082a0:	69ba      	ldr	r2, [r7, #24]
 80082a2:	4313      	orrs	r3, r2
 80082a4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80082a6:	69fb      	ldr	r3, [r7, #28]
 80082a8:	08da      	lsrs	r2, r3, #3
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	3208      	adds	r2, #8
 80082ae:	69b9      	ldr	r1, [r7, #24]
 80082b0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80082ba:	69fb      	ldr	r3, [r7, #28]
 80082bc:	005b      	lsls	r3, r3, #1
 80082be:	2203      	movs	r2, #3
 80082c0:	fa02 f303 	lsl.w	r3, r2, r3
 80082c4:	43db      	mvns	r3, r3
 80082c6:	69ba      	ldr	r2, [r7, #24]
 80082c8:	4013      	ands	r3, r2
 80082ca:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082cc:	683b      	ldr	r3, [r7, #0]
 80082ce:	685b      	ldr	r3, [r3, #4]
 80082d0:	f003 0203 	and.w	r2, r3, #3
 80082d4:	69fb      	ldr	r3, [r7, #28]
 80082d6:	005b      	lsls	r3, r3, #1
 80082d8:	fa02 f303 	lsl.w	r3, r2, r3
 80082dc:	69ba      	ldr	r2, [r7, #24]
 80082de:	4313      	orrs	r3, r2
 80082e0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	69ba      	ldr	r2, [r7, #24]
 80082e6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082e8:	683b      	ldr	r3, [r7, #0]
 80082ea:	685b      	ldr	r3, [r3, #4]
 80082ec:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	f000 80b4 	beq.w	800845e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082f6:	2300      	movs	r3, #0
 80082f8:	60fb      	str	r3, [r7, #12]
 80082fa:	4b60      	ldr	r3, [pc, #384]	; (800847c <HAL_GPIO_Init+0x30c>)
 80082fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082fe:	4a5f      	ldr	r2, [pc, #380]	; (800847c <HAL_GPIO_Init+0x30c>)
 8008300:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8008304:	6453      	str	r3, [r2, #68]	; 0x44
 8008306:	4b5d      	ldr	r3, [pc, #372]	; (800847c <HAL_GPIO_Init+0x30c>)
 8008308:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800830a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800830e:	60fb      	str	r3, [r7, #12]
 8008310:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8008312:	4a5b      	ldr	r2, [pc, #364]	; (8008480 <HAL_GPIO_Init+0x310>)
 8008314:	69fb      	ldr	r3, [r7, #28]
 8008316:	089b      	lsrs	r3, r3, #2
 8008318:	3302      	adds	r3, #2
 800831a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800831e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8008320:	69fb      	ldr	r3, [r7, #28]
 8008322:	f003 0303 	and.w	r3, r3, #3
 8008326:	009b      	lsls	r3, r3, #2
 8008328:	220f      	movs	r2, #15
 800832a:	fa02 f303 	lsl.w	r3, r2, r3
 800832e:	43db      	mvns	r3, r3
 8008330:	69ba      	ldr	r2, [r7, #24]
 8008332:	4013      	ands	r3, r2
 8008334:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a52      	ldr	r2, [pc, #328]	; (8008484 <HAL_GPIO_Init+0x314>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d02b      	beq.n	8008396 <HAL_GPIO_Init+0x226>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a51      	ldr	r2, [pc, #324]	; (8008488 <HAL_GPIO_Init+0x318>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d025      	beq.n	8008392 <HAL_GPIO_Init+0x222>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a50      	ldr	r2, [pc, #320]	; (800848c <HAL_GPIO_Init+0x31c>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d01f      	beq.n	800838e <HAL_GPIO_Init+0x21e>
 800834e:	687b      	ldr	r3, [r7, #4]
 8008350:	4a4f      	ldr	r2, [pc, #316]	; (8008490 <HAL_GPIO_Init+0x320>)
 8008352:	4293      	cmp	r3, r2
 8008354:	d019      	beq.n	800838a <HAL_GPIO_Init+0x21a>
 8008356:	687b      	ldr	r3, [r7, #4]
 8008358:	4a4e      	ldr	r2, [pc, #312]	; (8008494 <HAL_GPIO_Init+0x324>)
 800835a:	4293      	cmp	r3, r2
 800835c:	d013      	beq.n	8008386 <HAL_GPIO_Init+0x216>
 800835e:	687b      	ldr	r3, [r7, #4]
 8008360:	4a4d      	ldr	r2, [pc, #308]	; (8008498 <HAL_GPIO_Init+0x328>)
 8008362:	4293      	cmp	r3, r2
 8008364:	d00d      	beq.n	8008382 <HAL_GPIO_Init+0x212>
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	4a4c      	ldr	r2, [pc, #304]	; (800849c <HAL_GPIO_Init+0x32c>)
 800836a:	4293      	cmp	r3, r2
 800836c:	d007      	beq.n	800837e <HAL_GPIO_Init+0x20e>
 800836e:	687b      	ldr	r3, [r7, #4]
 8008370:	4a4b      	ldr	r2, [pc, #300]	; (80084a0 <HAL_GPIO_Init+0x330>)
 8008372:	4293      	cmp	r3, r2
 8008374:	d101      	bne.n	800837a <HAL_GPIO_Init+0x20a>
 8008376:	2307      	movs	r3, #7
 8008378:	e00e      	b.n	8008398 <HAL_GPIO_Init+0x228>
 800837a:	2308      	movs	r3, #8
 800837c:	e00c      	b.n	8008398 <HAL_GPIO_Init+0x228>
 800837e:	2306      	movs	r3, #6
 8008380:	e00a      	b.n	8008398 <HAL_GPIO_Init+0x228>
 8008382:	2305      	movs	r3, #5
 8008384:	e008      	b.n	8008398 <HAL_GPIO_Init+0x228>
 8008386:	2304      	movs	r3, #4
 8008388:	e006      	b.n	8008398 <HAL_GPIO_Init+0x228>
 800838a:	2303      	movs	r3, #3
 800838c:	e004      	b.n	8008398 <HAL_GPIO_Init+0x228>
 800838e:	2302      	movs	r3, #2
 8008390:	e002      	b.n	8008398 <HAL_GPIO_Init+0x228>
 8008392:	2301      	movs	r3, #1
 8008394:	e000      	b.n	8008398 <HAL_GPIO_Init+0x228>
 8008396:	2300      	movs	r3, #0
 8008398:	69fa      	ldr	r2, [r7, #28]
 800839a:	f002 0203 	and.w	r2, r2, #3
 800839e:	0092      	lsls	r2, r2, #2
 80083a0:	4093      	lsls	r3, r2
 80083a2:	69ba      	ldr	r2, [r7, #24]
 80083a4:	4313      	orrs	r3, r2
 80083a6:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80083a8:	4935      	ldr	r1, [pc, #212]	; (8008480 <HAL_GPIO_Init+0x310>)
 80083aa:	69fb      	ldr	r3, [r7, #28]
 80083ac:	089b      	lsrs	r3, r3, #2
 80083ae:	3302      	adds	r3, #2
 80083b0:	69ba      	ldr	r2, [r7, #24]
 80083b2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80083b6:	4b3b      	ldr	r3, [pc, #236]	; (80084a4 <HAL_GPIO_Init+0x334>)
 80083b8:	689b      	ldr	r3, [r3, #8]
 80083ba:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083bc:	693b      	ldr	r3, [r7, #16]
 80083be:	43db      	mvns	r3, r3
 80083c0:	69ba      	ldr	r2, [r7, #24]
 80083c2:	4013      	ands	r3, r2
 80083c4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80083c6:	683b      	ldr	r3, [r7, #0]
 80083c8:	685b      	ldr	r3, [r3, #4]
 80083ca:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d003      	beq.n	80083da <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80083d2:	69ba      	ldr	r2, [r7, #24]
 80083d4:	693b      	ldr	r3, [r7, #16]
 80083d6:	4313      	orrs	r3, r2
 80083d8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80083da:	4a32      	ldr	r2, [pc, #200]	; (80084a4 <HAL_GPIO_Init+0x334>)
 80083dc:	69bb      	ldr	r3, [r7, #24]
 80083de:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80083e0:	4b30      	ldr	r3, [pc, #192]	; (80084a4 <HAL_GPIO_Init+0x334>)
 80083e2:	68db      	ldr	r3, [r3, #12]
 80083e4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083e6:	693b      	ldr	r3, [r7, #16]
 80083e8:	43db      	mvns	r3, r3
 80083ea:	69ba      	ldr	r2, [r7, #24]
 80083ec:	4013      	ands	r3, r2
 80083ee:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	685b      	ldr	r3, [r3, #4]
 80083f4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083f8:	2b00      	cmp	r3, #0
 80083fa:	d003      	beq.n	8008404 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80083fc:	69ba      	ldr	r2, [r7, #24]
 80083fe:	693b      	ldr	r3, [r7, #16]
 8008400:	4313      	orrs	r3, r2
 8008402:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8008404:	4a27      	ldr	r2, [pc, #156]	; (80084a4 <HAL_GPIO_Init+0x334>)
 8008406:	69bb      	ldr	r3, [r7, #24]
 8008408:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 800840a:	4b26      	ldr	r3, [pc, #152]	; (80084a4 <HAL_GPIO_Init+0x334>)
 800840c:	685b      	ldr	r3, [r3, #4]
 800840e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008410:	693b      	ldr	r3, [r7, #16]
 8008412:	43db      	mvns	r3, r3
 8008414:	69ba      	ldr	r2, [r7, #24]
 8008416:	4013      	ands	r3, r2
 8008418:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800841a:	683b      	ldr	r3, [r7, #0]
 800841c:	685b      	ldr	r3, [r3, #4]
 800841e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008422:	2b00      	cmp	r3, #0
 8008424:	d003      	beq.n	800842e <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8008426:	69ba      	ldr	r2, [r7, #24]
 8008428:	693b      	ldr	r3, [r7, #16]
 800842a:	4313      	orrs	r3, r2
 800842c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800842e:	4a1d      	ldr	r2, [pc, #116]	; (80084a4 <HAL_GPIO_Init+0x334>)
 8008430:	69bb      	ldr	r3, [r7, #24]
 8008432:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8008434:	4b1b      	ldr	r3, [pc, #108]	; (80084a4 <HAL_GPIO_Init+0x334>)
 8008436:	681b      	ldr	r3, [r3, #0]
 8008438:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800843a:	693b      	ldr	r3, [r7, #16]
 800843c:	43db      	mvns	r3, r3
 800843e:	69ba      	ldr	r2, [r7, #24]
 8008440:	4013      	ands	r3, r2
 8008442:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8008444:	683b      	ldr	r3, [r7, #0]
 8008446:	685b      	ldr	r3, [r3, #4]
 8008448:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800844c:	2b00      	cmp	r3, #0
 800844e:	d003      	beq.n	8008458 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008450:	69ba      	ldr	r2, [r7, #24]
 8008452:	693b      	ldr	r3, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008458:	4a12      	ldr	r2, [pc, #72]	; (80084a4 <HAL_GPIO_Init+0x334>)
 800845a:	69bb      	ldr	r3, [r7, #24]
 800845c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800845e:	69fb      	ldr	r3, [r7, #28]
 8008460:	3301      	adds	r3, #1
 8008462:	61fb      	str	r3, [r7, #28]
 8008464:	69fb      	ldr	r3, [r7, #28]
 8008466:	2b0f      	cmp	r3, #15
 8008468:	f67f ae90 	bls.w	800818c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800846c:	bf00      	nop
 800846e:	bf00      	nop
 8008470:	3724      	adds	r7, #36	; 0x24
 8008472:	46bd      	mov	sp, r7
 8008474:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008478:	4770      	bx	lr
 800847a:	bf00      	nop
 800847c:	40023800 	.word	0x40023800
 8008480:	40013800 	.word	0x40013800
 8008484:	40020000 	.word	0x40020000
 8008488:	40020400 	.word	0x40020400
 800848c:	40020800 	.word	0x40020800
 8008490:	40020c00 	.word	0x40020c00
 8008494:	40021000 	.word	0x40021000
 8008498:	40021400 	.word	0x40021400
 800849c:	40021800 	.word	0x40021800
 80084a0:	40021c00 	.word	0x40021c00
 80084a4:	40013c00 	.word	0x40013c00

080084a8 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80084a8:	b480      	push	{r7}
 80084aa:	b085      	sub	sp, #20
 80084ac:	af00      	add	r7, sp, #0
 80084ae:	6078      	str	r0, [r7, #4]
 80084b0:	460b      	mov	r3, r1
 80084b2:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 80084b4:	687b      	ldr	r3, [r7, #4]
 80084b6:	691a      	ldr	r2, [r3, #16]
 80084b8:	887b      	ldrh	r3, [r7, #2]
 80084ba:	4013      	ands	r3, r2
 80084bc:	2b00      	cmp	r3, #0
 80084be:	d002      	beq.n	80084c6 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 80084c0:	2301      	movs	r3, #1
 80084c2:	73fb      	strb	r3, [r7, #15]
 80084c4:	e001      	b.n	80084ca <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 80084c6:	2300      	movs	r3, #0
 80084c8:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084ca:	7bfb      	ldrb	r3, [r7, #15]
}
 80084cc:	4618      	mov	r0, r3
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084d8:	b480      	push	{r7}
 80084da:	b083      	sub	sp, #12
 80084dc:	af00      	add	r7, sp, #0
 80084de:	6078      	str	r0, [r7, #4]
 80084e0:	460b      	mov	r3, r1
 80084e2:	807b      	strh	r3, [r7, #2]
 80084e4:	4613      	mov	r3, r2
 80084e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084e8:	787b      	ldrb	r3, [r7, #1]
 80084ea:	2b00      	cmp	r3, #0
 80084ec:	d003      	beq.n	80084f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084ee:	887a      	ldrh	r2, [r7, #2]
 80084f0:	687b      	ldr	r3, [r7, #4]
 80084f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80084f4:	e003      	b.n	80084fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80084f6:	887b      	ldrh	r3, [r7, #2]
 80084f8:	041a      	lsls	r2, r3, #16
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	619a      	str	r2, [r3, #24]
}
 80084fe:	bf00      	nop
 8008500:	370c      	adds	r7, #12
 8008502:	46bd      	mov	sp, r7
 8008504:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008508:	4770      	bx	lr

0800850a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800850a:	b480      	push	{r7}
 800850c:	b085      	sub	sp, #20
 800850e:	af00      	add	r7, sp, #0
 8008510:	6078      	str	r0, [r7, #4]
 8008512:	460b      	mov	r3, r1
 8008514:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	695b      	ldr	r3, [r3, #20]
 800851a:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 800851c:	887a      	ldrh	r2, [r7, #2]
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	4013      	ands	r3, r2
 8008522:	041a      	lsls	r2, r3, #16
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	43d9      	mvns	r1, r3
 8008528:	887b      	ldrh	r3, [r7, #2]
 800852a:	400b      	ands	r3, r1
 800852c:	431a      	orrs	r2, r3
 800852e:	687b      	ldr	r3, [r7, #4]
 8008530:	619a      	str	r2, [r3, #24]
}
 8008532:	bf00      	nop
 8008534:	3714      	adds	r7, #20
 8008536:	46bd      	mov	sp, r7
 8008538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800853c:	4770      	bx	lr
	...

08008540 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008540:	b580      	push	{r7, lr}
 8008542:	b086      	sub	sp, #24
 8008544:	af00      	add	r7, sp, #0
 8008546:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	2b00      	cmp	r3, #0
 800854c:	d101      	bne.n	8008552 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800854e:	2301      	movs	r3, #1
 8008550:	e267      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8008552:	687b      	ldr	r3, [r7, #4]
 8008554:	681b      	ldr	r3, [r3, #0]
 8008556:	f003 0301 	and.w	r3, r3, #1
 800855a:	2b00      	cmp	r3, #0
 800855c:	d075      	beq.n	800864a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800855e:	4b88      	ldr	r3, [pc, #544]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008560:	689b      	ldr	r3, [r3, #8]
 8008562:	f003 030c 	and.w	r3, r3, #12
 8008566:	2b04      	cmp	r3, #4
 8008568:	d00c      	beq.n	8008584 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800856a:	4b85      	ldr	r3, [pc, #532]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 800856c:	689b      	ldr	r3, [r3, #8]
 800856e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008572:	2b08      	cmp	r3, #8
 8008574:	d112      	bne.n	800859c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008576:	4b82      	ldr	r3, [pc, #520]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008578:	685b      	ldr	r3, [r3, #4]
 800857a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800857e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8008582:	d10b      	bne.n	800859c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008584:	4b7e      	ldr	r3, [pc, #504]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008586:	681b      	ldr	r3, [r3, #0]
 8008588:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800858c:	2b00      	cmp	r3, #0
 800858e:	d05b      	beq.n	8008648 <HAL_RCC_OscConfig+0x108>
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	685b      	ldr	r3, [r3, #4]
 8008594:	2b00      	cmp	r3, #0
 8008596:	d157      	bne.n	8008648 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008598:	2301      	movs	r3, #1
 800859a:	e242      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	685b      	ldr	r3, [r3, #4]
 80085a0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80085a4:	d106      	bne.n	80085b4 <HAL_RCC_OscConfig+0x74>
 80085a6:	4b76      	ldr	r3, [pc, #472]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a75      	ldr	r2, [pc, #468]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085ac:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085b0:	6013      	str	r3, [r2, #0]
 80085b2:	e01d      	b.n	80085f0 <HAL_RCC_OscConfig+0xb0>
 80085b4:	687b      	ldr	r3, [r7, #4]
 80085b6:	685b      	ldr	r3, [r3, #4]
 80085b8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80085bc:	d10c      	bne.n	80085d8 <HAL_RCC_OscConfig+0x98>
 80085be:	4b70      	ldr	r3, [pc, #448]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085c0:	681b      	ldr	r3, [r3, #0]
 80085c2:	4a6f      	ldr	r2, [pc, #444]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085c4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085c8:	6013      	str	r3, [r2, #0]
 80085ca:	4b6d      	ldr	r3, [pc, #436]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085cc:	681b      	ldr	r3, [r3, #0]
 80085ce:	4a6c      	ldr	r2, [pc, #432]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085d0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085d4:	6013      	str	r3, [r2, #0]
 80085d6:	e00b      	b.n	80085f0 <HAL_RCC_OscConfig+0xb0>
 80085d8:	4b69      	ldr	r3, [pc, #420]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085da:	681b      	ldr	r3, [r3, #0]
 80085dc:	4a68      	ldr	r2, [pc, #416]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085de:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085e2:	6013      	str	r3, [r2, #0]
 80085e4:	4b66      	ldr	r3, [pc, #408]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	4a65      	ldr	r2, [pc, #404]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80085ea:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085ee:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	685b      	ldr	r3, [r3, #4]
 80085f4:	2b00      	cmp	r3, #0
 80085f6:	d013      	beq.n	8008620 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085f8:	f7ff f8e8 	bl	80077cc <HAL_GetTick>
 80085fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085fe:	e008      	b.n	8008612 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008600:	f7ff f8e4 	bl	80077cc <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b64      	cmp	r3, #100	; 0x64
 800860c:	d901      	bls.n	8008612 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e207      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008612:	4b5b      	ldr	r3, [pc, #364]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d0f0      	beq.n	8008600 <HAL_RCC_OscConfig+0xc0>
 800861e:	e014      	b.n	800864a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008620:	f7ff f8d4 	bl	80077cc <HAL_GetTick>
 8008624:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008626:	e008      	b.n	800863a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008628:	f7ff f8d0 	bl	80077cc <HAL_GetTick>
 800862c:	4602      	mov	r2, r0
 800862e:	693b      	ldr	r3, [r7, #16]
 8008630:	1ad3      	subs	r3, r2, r3
 8008632:	2b64      	cmp	r3, #100	; 0x64
 8008634:	d901      	bls.n	800863a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8008636:	2303      	movs	r3, #3
 8008638:	e1f3      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800863a:	4b51      	ldr	r3, [pc, #324]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 800863c:	681b      	ldr	r3, [r3, #0]
 800863e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008642:	2b00      	cmp	r3, #0
 8008644:	d1f0      	bne.n	8008628 <HAL_RCC_OscConfig+0xe8>
 8008646:	e000      	b.n	800864a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008648:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	681b      	ldr	r3, [r3, #0]
 800864e:	f003 0302 	and.w	r3, r3, #2
 8008652:	2b00      	cmp	r3, #0
 8008654:	d063      	beq.n	800871e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008656:	4b4a      	ldr	r3, [pc, #296]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008658:	689b      	ldr	r3, [r3, #8]
 800865a:	f003 030c 	and.w	r3, r3, #12
 800865e:	2b00      	cmp	r3, #0
 8008660:	d00b      	beq.n	800867a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008662:	4b47      	ldr	r3, [pc, #284]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008664:	689b      	ldr	r3, [r3, #8]
 8008666:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800866a:	2b08      	cmp	r3, #8
 800866c:	d11c      	bne.n	80086a8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800866e:	4b44      	ldr	r3, [pc, #272]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008670:	685b      	ldr	r3, [r3, #4]
 8008672:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008676:	2b00      	cmp	r3, #0
 8008678:	d116      	bne.n	80086a8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800867a:	4b41      	ldr	r3, [pc, #260]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 800867c:	681b      	ldr	r3, [r3, #0]
 800867e:	f003 0302 	and.w	r3, r3, #2
 8008682:	2b00      	cmp	r3, #0
 8008684:	d005      	beq.n	8008692 <HAL_RCC_OscConfig+0x152>
 8008686:	687b      	ldr	r3, [r7, #4]
 8008688:	68db      	ldr	r3, [r3, #12]
 800868a:	2b01      	cmp	r3, #1
 800868c:	d001      	beq.n	8008692 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800868e:	2301      	movs	r3, #1
 8008690:	e1c7      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8008692:	4b3b      	ldr	r3, [pc, #236]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	691b      	ldr	r3, [r3, #16]
 800869e:	00db      	lsls	r3, r3, #3
 80086a0:	4937      	ldr	r1, [pc, #220]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80086a2:	4313      	orrs	r3, r2
 80086a4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80086a6:	e03a      	b.n	800871e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	68db      	ldr	r3, [r3, #12]
 80086ac:	2b00      	cmp	r3, #0
 80086ae:	d020      	beq.n	80086f2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80086b0:	4b34      	ldr	r3, [pc, #208]	; (8008784 <HAL_RCC_OscConfig+0x244>)
 80086b2:	2201      	movs	r2, #1
 80086b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086b6:	f7ff f889 	bl	80077cc <HAL_GetTick>
 80086ba:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086bc:	e008      	b.n	80086d0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086be:	f7ff f885 	bl	80077cc <HAL_GetTick>
 80086c2:	4602      	mov	r2, r0
 80086c4:	693b      	ldr	r3, [r7, #16]
 80086c6:	1ad3      	subs	r3, r2, r3
 80086c8:	2b02      	cmp	r3, #2
 80086ca:	d901      	bls.n	80086d0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086cc:	2303      	movs	r3, #3
 80086ce:	e1a8      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086d0:	4b2b      	ldr	r3, [pc, #172]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	f003 0302 	and.w	r3, r3, #2
 80086d8:	2b00      	cmp	r3, #0
 80086da:	d0f0      	beq.n	80086be <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086dc:	4b28      	ldr	r3, [pc, #160]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086e4:	687b      	ldr	r3, [r7, #4]
 80086e6:	691b      	ldr	r3, [r3, #16]
 80086e8:	00db      	lsls	r3, r3, #3
 80086ea:	4925      	ldr	r1, [pc, #148]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 80086ec:	4313      	orrs	r3, r2
 80086ee:	600b      	str	r3, [r1, #0]
 80086f0:	e015      	b.n	800871e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086f2:	4b24      	ldr	r3, [pc, #144]	; (8008784 <HAL_RCC_OscConfig+0x244>)
 80086f4:	2200      	movs	r2, #0
 80086f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086f8:	f7ff f868 	bl	80077cc <HAL_GetTick>
 80086fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086fe:	e008      	b.n	8008712 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008700:	f7ff f864 	bl	80077cc <HAL_GetTick>
 8008704:	4602      	mov	r2, r0
 8008706:	693b      	ldr	r3, [r7, #16]
 8008708:	1ad3      	subs	r3, r2, r3
 800870a:	2b02      	cmp	r3, #2
 800870c:	d901      	bls.n	8008712 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800870e:	2303      	movs	r3, #3
 8008710:	e187      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8008712:	4b1b      	ldr	r3, [pc, #108]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	f003 0302 	and.w	r3, r3, #2
 800871a:	2b00      	cmp	r3, #0
 800871c:	d1f0      	bne.n	8008700 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	f003 0308 	and.w	r3, r3, #8
 8008726:	2b00      	cmp	r3, #0
 8008728:	d036      	beq.n	8008798 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800872a:	687b      	ldr	r3, [r7, #4]
 800872c:	695b      	ldr	r3, [r3, #20]
 800872e:	2b00      	cmp	r3, #0
 8008730:	d016      	beq.n	8008760 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8008732:	4b15      	ldr	r3, [pc, #84]	; (8008788 <HAL_RCC_OscConfig+0x248>)
 8008734:	2201      	movs	r2, #1
 8008736:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008738:	f7ff f848 	bl	80077cc <HAL_GetTick>
 800873c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800873e:	e008      	b.n	8008752 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008740:	f7ff f844 	bl	80077cc <HAL_GetTick>
 8008744:	4602      	mov	r2, r0
 8008746:	693b      	ldr	r3, [r7, #16]
 8008748:	1ad3      	subs	r3, r2, r3
 800874a:	2b02      	cmp	r3, #2
 800874c:	d901      	bls.n	8008752 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800874e:	2303      	movs	r3, #3
 8008750:	e167      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008752:	4b0b      	ldr	r3, [pc, #44]	; (8008780 <HAL_RCC_OscConfig+0x240>)
 8008754:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008756:	f003 0302 	and.w	r3, r3, #2
 800875a:	2b00      	cmp	r3, #0
 800875c:	d0f0      	beq.n	8008740 <HAL_RCC_OscConfig+0x200>
 800875e:	e01b      	b.n	8008798 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008760:	4b09      	ldr	r3, [pc, #36]	; (8008788 <HAL_RCC_OscConfig+0x248>)
 8008762:	2200      	movs	r2, #0
 8008764:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008766:	f7ff f831 	bl	80077cc <HAL_GetTick>
 800876a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800876c:	e00e      	b.n	800878c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800876e:	f7ff f82d 	bl	80077cc <HAL_GetTick>
 8008772:	4602      	mov	r2, r0
 8008774:	693b      	ldr	r3, [r7, #16]
 8008776:	1ad3      	subs	r3, r2, r3
 8008778:	2b02      	cmp	r3, #2
 800877a:	d907      	bls.n	800878c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e150      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
 8008780:	40023800 	.word	0x40023800
 8008784:	42470000 	.word	0x42470000
 8008788:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800878c:	4b88      	ldr	r3, [pc, #544]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 800878e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008790:	f003 0302 	and.w	r3, r3, #2
 8008794:	2b00      	cmp	r3, #0
 8008796:	d1ea      	bne.n	800876e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008798:	687b      	ldr	r3, [r7, #4]
 800879a:	681b      	ldr	r3, [r3, #0]
 800879c:	f003 0304 	and.w	r3, r3, #4
 80087a0:	2b00      	cmp	r3, #0
 80087a2:	f000 8097 	beq.w	80088d4 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80087a6:	2300      	movs	r3, #0
 80087a8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80087aa:	4b81      	ldr	r3, [pc, #516]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 80087ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ae:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	d10f      	bne.n	80087d6 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80087b6:	2300      	movs	r3, #0
 80087b8:	60bb      	str	r3, [r7, #8]
 80087ba:	4b7d      	ldr	r3, [pc, #500]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 80087bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087be:	4a7c      	ldr	r2, [pc, #496]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 80087c0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80087c4:	6413      	str	r3, [r2, #64]	; 0x40
 80087c6:	4b7a      	ldr	r3, [pc, #488]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 80087c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087ca:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087ce:	60bb      	str	r3, [r7, #8]
 80087d0:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087d2:	2301      	movs	r3, #1
 80087d4:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087d6:	4b77      	ldr	r3, [pc, #476]	; (80089b4 <HAL_RCC_OscConfig+0x474>)
 80087d8:	681b      	ldr	r3, [r3, #0]
 80087da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087de:	2b00      	cmp	r3, #0
 80087e0:	d118      	bne.n	8008814 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087e2:	4b74      	ldr	r3, [pc, #464]	; (80089b4 <HAL_RCC_OscConfig+0x474>)
 80087e4:	681b      	ldr	r3, [r3, #0]
 80087e6:	4a73      	ldr	r2, [pc, #460]	; (80089b4 <HAL_RCC_OscConfig+0x474>)
 80087e8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087ec:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087ee:	f7fe ffed 	bl	80077cc <HAL_GetTick>
 80087f2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087f4:	e008      	b.n	8008808 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087f6:	f7fe ffe9 	bl	80077cc <HAL_GetTick>
 80087fa:	4602      	mov	r2, r0
 80087fc:	693b      	ldr	r3, [r7, #16]
 80087fe:	1ad3      	subs	r3, r2, r3
 8008800:	2b02      	cmp	r3, #2
 8008802:	d901      	bls.n	8008808 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8008804:	2303      	movs	r3, #3
 8008806:	e10c      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8008808:	4b6a      	ldr	r3, [pc, #424]	; (80089b4 <HAL_RCC_OscConfig+0x474>)
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008810:	2b00      	cmp	r3, #0
 8008812:	d0f0      	beq.n	80087f6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8008814:	687b      	ldr	r3, [r7, #4]
 8008816:	689b      	ldr	r3, [r3, #8]
 8008818:	2b01      	cmp	r3, #1
 800881a:	d106      	bne.n	800882a <HAL_RCC_OscConfig+0x2ea>
 800881c:	4b64      	ldr	r3, [pc, #400]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 800881e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008820:	4a63      	ldr	r2, [pc, #396]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 8008822:	f043 0301 	orr.w	r3, r3, #1
 8008826:	6713      	str	r3, [r2, #112]	; 0x70
 8008828:	e01c      	b.n	8008864 <HAL_RCC_OscConfig+0x324>
 800882a:	687b      	ldr	r3, [r7, #4]
 800882c:	689b      	ldr	r3, [r3, #8]
 800882e:	2b05      	cmp	r3, #5
 8008830:	d10c      	bne.n	800884c <HAL_RCC_OscConfig+0x30c>
 8008832:	4b5f      	ldr	r3, [pc, #380]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 8008834:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008836:	4a5e      	ldr	r2, [pc, #376]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 8008838:	f043 0304 	orr.w	r3, r3, #4
 800883c:	6713      	str	r3, [r2, #112]	; 0x70
 800883e:	4b5c      	ldr	r3, [pc, #368]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 8008840:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008842:	4a5b      	ldr	r2, [pc, #364]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 8008844:	f043 0301 	orr.w	r3, r3, #1
 8008848:	6713      	str	r3, [r2, #112]	; 0x70
 800884a:	e00b      	b.n	8008864 <HAL_RCC_OscConfig+0x324>
 800884c:	4b58      	ldr	r3, [pc, #352]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 800884e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008850:	4a57      	ldr	r2, [pc, #348]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 8008852:	f023 0301 	bic.w	r3, r3, #1
 8008856:	6713      	str	r3, [r2, #112]	; 0x70
 8008858:	4b55      	ldr	r3, [pc, #340]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 800885a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800885c:	4a54      	ldr	r2, [pc, #336]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 800885e:	f023 0304 	bic.w	r3, r3, #4
 8008862:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	689b      	ldr	r3, [r3, #8]
 8008868:	2b00      	cmp	r3, #0
 800886a:	d015      	beq.n	8008898 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800886c:	f7fe ffae 	bl	80077cc <HAL_GetTick>
 8008870:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008872:	e00a      	b.n	800888a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008874:	f7fe ffaa 	bl	80077cc <HAL_GetTick>
 8008878:	4602      	mov	r2, r0
 800887a:	693b      	ldr	r3, [r7, #16]
 800887c:	1ad3      	subs	r3, r2, r3
 800887e:	f241 3288 	movw	r2, #5000	; 0x1388
 8008882:	4293      	cmp	r3, r2
 8008884:	d901      	bls.n	800888a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8008886:	2303      	movs	r3, #3
 8008888:	e0cb      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800888a:	4b49      	ldr	r3, [pc, #292]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 800888c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800888e:	f003 0302 	and.w	r3, r3, #2
 8008892:	2b00      	cmp	r3, #0
 8008894:	d0ee      	beq.n	8008874 <HAL_RCC_OscConfig+0x334>
 8008896:	e014      	b.n	80088c2 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008898:	f7fe ff98 	bl	80077cc <HAL_GetTick>
 800889c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800889e:	e00a      	b.n	80088b6 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80088a0:	f7fe ff94 	bl	80077cc <HAL_GetTick>
 80088a4:	4602      	mov	r2, r0
 80088a6:	693b      	ldr	r3, [r7, #16]
 80088a8:	1ad3      	subs	r3, r2, r3
 80088aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d901      	bls.n	80088b6 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80088b2:	2303      	movs	r3, #3
 80088b4:	e0b5      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80088b6:	4b3e      	ldr	r3, [pc, #248]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 80088b8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80088ba:	f003 0302 	and.w	r3, r3, #2
 80088be:	2b00      	cmp	r3, #0
 80088c0:	d1ee      	bne.n	80088a0 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80088c2:	7dfb      	ldrb	r3, [r7, #23]
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d105      	bne.n	80088d4 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088c8:	4b39      	ldr	r3, [pc, #228]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 80088ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088cc:	4a38      	ldr	r2, [pc, #224]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 80088ce:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088d2:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088d4:	687b      	ldr	r3, [r7, #4]
 80088d6:	699b      	ldr	r3, [r3, #24]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	f000 80a1 	beq.w	8008a20 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088de:	4b34      	ldr	r3, [pc, #208]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 80088e0:	689b      	ldr	r3, [r3, #8]
 80088e2:	f003 030c 	and.w	r3, r3, #12
 80088e6:	2b08      	cmp	r3, #8
 80088e8:	d05c      	beq.n	80089a4 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088ea:	687b      	ldr	r3, [r7, #4]
 80088ec:	699b      	ldr	r3, [r3, #24]
 80088ee:	2b02      	cmp	r3, #2
 80088f0:	d141      	bne.n	8008976 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088f2:	4b31      	ldr	r3, [pc, #196]	; (80089b8 <HAL_RCC_OscConfig+0x478>)
 80088f4:	2200      	movs	r2, #0
 80088f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088f8:	f7fe ff68 	bl	80077cc <HAL_GetTick>
 80088fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088fe:	e008      	b.n	8008912 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008900:	f7fe ff64 	bl	80077cc <HAL_GetTick>
 8008904:	4602      	mov	r2, r0
 8008906:	693b      	ldr	r3, [r7, #16]
 8008908:	1ad3      	subs	r3, r2, r3
 800890a:	2b02      	cmp	r3, #2
 800890c:	d901      	bls.n	8008912 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800890e:	2303      	movs	r3, #3
 8008910:	e087      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008912:	4b27      	ldr	r3, [pc, #156]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 8008914:	681b      	ldr	r3, [r3, #0]
 8008916:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800891a:	2b00      	cmp	r3, #0
 800891c:	d1f0      	bne.n	8008900 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	69da      	ldr	r2, [r3, #28]
 8008922:	687b      	ldr	r3, [r7, #4]
 8008924:	6a1b      	ldr	r3, [r3, #32]
 8008926:	431a      	orrs	r2, r3
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800892c:	019b      	lsls	r3, r3, #6
 800892e:	431a      	orrs	r2, r3
 8008930:	687b      	ldr	r3, [r7, #4]
 8008932:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008934:	085b      	lsrs	r3, r3, #1
 8008936:	3b01      	subs	r3, #1
 8008938:	041b      	lsls	r3, r3, #16
 800893a:	431a      	orrs	r2, r3
 800893c:	687b      	ldr	r3, [r7, #4]
 800893e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008940:	061b      	lsls	r3, r3, #24
 8008942:	491b      	ldr	r1, [pc, #108]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 8008944:	4313      	orrs	r3, r2
 8008946:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008948:	4b1b      	ldr	r3, [pc, #108]	; (80089b8 <HAL_RCC_OscConfig+0x478>)
 800894a:	2201      	movs	r2, #1
 800894c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800894e:	f7fe ff3d 	bl	80077cc <HAL_GetTick>
 8008952:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008954:	e008      	b.n	8008968 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008956:	f7fe ff39 	bl	80077cc <HAL_GetTick>
 800895a:	4602      	mov	r2, r0
 800895c:	693b      	ldr	r3, [r7, #16]
 800895e:	1ad3      	subs	r3, r2, r3
 8008960:	2b02      	cmp	r3, #2
 8008962:	d901      	bls.n	8008968 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8008964:	2303      	movs	r3, #3
 8008966:	e05c      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008968:	4b11      	ldr	r3, [pc, #68]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 800896a:	681b      	ldr	r3, [r3, #0]
 800896c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008970:	2b00      	cmp	r3, #0
 8008972:	d0f0      	beq.n	8008956 <HAL_RCC_OscConfig+0x416>
 8008974:	e054      	b.n	8008a20 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8008976:	4b10      	ldr	r3, [pc, #64]	; (80089b8 <HAL_RCC_OscConfig+0x478>)
 8008978:	2200      	movs	r2, #0
 800897a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800897c:	f7fe ff26 	bl	80077cc <HAL_GetTick>
 8008980:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008982:	e008      	b.n	8008996 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8008984:	f7fe ff22 	bl	80077cc <HAL_GetTick>
 8008988:	4602      	mov	r2, r0
 800898a:	693b      	ldr	r3, [r7, #16]
 800898c:	1ad3      	subs	r3, r2, r3
 800898e:	2b02      	cmp	r3, #2
 8008990:	d901      	bls.n	8008996 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8008992:	2303      	movs	r3, #3
 8008994:	e045      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8008996:	4b06      	ldr	r3, [pc, #24]	; (80089b0 <HAL_RCC_OscConfig+0x470>)
 8008998:	681b      	ldr	r3, [r3, #0]
 800899a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800899e:	2b00      	cmp	r3, #0
 80089a0:	d1f0      	bne.n	8008984 <HAL_RCC_OscConfig+0x444>
 80089a2:	e03d      	b.n	8008a20 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	699b      	ldr	r3, [r3, #24]
 80089a8:	2b01      	cmp	r3, #1
 80089aa:	d107      	bne.n	80089bc <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80089ac:	2301      	movs	r3, #1
 80089ae:	e038      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
 80089b0:	40023800 	.word	0x40023800
 80089b4:	40007000 	.word	0x40007000
 80089b8:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80089bc:	4b1b      	ldr	r3, [pc, #108]	; (8008a2c <HAL_RCC_OscConfig+0x4ec>)
 80089be:	685b      	ldr	r3, [r3, #4]
 80089c0:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	699b      	ldr	r3, [r3, #24]
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d028      	beq.n	8008a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089d0:	687b      	ldr	r3, [r7, #4]
 80089d2:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089d4:	429a      	cmp	r2, r3
 80089d6:	d121      	bne.n	8008a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089e2:	429a      	cmp	r2, r3
 80089e4:	d11a      	bne.n	8008a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089e6:	68fa      	ldr	r2, [r7, #12]
 80089e8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089ec:	4013      	ands	r3, r2
 80089ee:	687a      	ldr	r2, [r7, #4]
 80089f0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089f2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089f4:	4293      	cmp	r3, r2
 80089f6:	d111      	bne.n	8008a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089f8:	68fb      	ldr	r3, [r7, #12]
 80089fa:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80089fe:	687b      	ldr	r3, [r7, #4]
 8008a00:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008a02:	085b      	lsrs	r3, r3, #1
 8008a04:	3b01      	subs	r3, #1
 8008a06:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8008a08:	429a      	cmp	r2, r3
 8008a0a:	d107      	bne.n	8008a1c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008a16:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8008a18:	429a      	cmp	r2, r3
 8008a1a:	d001      	beq.n	8008a20 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8008a1c:	2301      	movs	r3, #1
 8008a1e:	e000      	b.n	8008a22 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8008a20:	2300      	movs	r3, #0
}
 8008a22:	4618      	mov	r0, r3
 8008a24:	3718      	adds	r7, #24
 8008a26:	46bd      	mov	sp, r7
 8008a28:	bd80      	pop	{r7, pc}
 8008a2a:	bf00      	nop
 8008a2c:	40023800 	.word	0x40023800

08008a30 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a30:	b580      	push	{r7, lr}
 8008a32:	b084      	sub	sp, #16
 8008a34:	af00      	add	r7, sp, #0
 8008a36:	6078      	str	r0, [r7, #4]
 8008a38:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	2b00      	cmp	r3, #0
 8008a3e:	d101      	bne.n	8008a44 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e0cc      	b.n	8008bde <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a44:	4b68      	ldr	r3, [pc, #416]	; (8008be8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0307 	and.w	r3, r3, #7
 8008a4c:	683a      	ldr	r2, [r7, #0]
 8008a4e:	429a      	cmp	r2, r3
 8008a50:	d90c      	bls.n	8008a6c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a52:	4b65      	ldr	r3, [pc, #404]	; (8008be8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a54:	683a      	ldr	r2, [r7, #0]
 8008a56:	b2d2      	uxtb	r2, r2
 8008a58:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a5a:	4b63      	ldr	r3, [pc, #396]	; (8008be8 <HAL_RCC_ClockConfig+0x1b8>)
 8008a5c:	681b      	ldr	r3, [r3, #0]
 8008a5e:	f003 0307 	and.w	r3, r3, #7
 8008a62:	683a      	ldr	r2, [r7, #0]
 8008a64:	429a      	cmp	r2, r3
 8008a66:	d001      	beq.n	8008a6c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a68:	2301      	movs	r3, #1
 8008a6a:	e0b8      	b.n	8008bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a6c:	687b      	ldr	r3, [r7, #4]
 8008a6e:	681b      	ldr	r3, [r3, #0]
 8008a70:	f003 0302 	and.w	r3, r3, #2
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	d020      	beq.n	8008aba <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	681b      	ldr	r3, [r3, #0]
 8008a7c:	f003 0304 	and.w	r3, r3, #4
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	d005      	beq.n	8008a90 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a84:	4b59      	ldr	r3, [pc, #356]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008a86:	689b      	ldr	r3, [r3, #8]
 8008a88:	4a58      	ldr	r2, [pc, #352]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008a8a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a8e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	681b      	ldr	r3, [r3, #0]
 8008a94:	f003 0308 	and.w	r3, r3, #8
 8008a98:	2b00      	cmp	r3, #0
 8008a9a:	d005      	beq.n	8008aa8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a9c:	4b53      	ldr	r3, [pc, #332]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008a9e:	689b      	ldr	r3, [r3, #8]
 8008aa0:	4a52      	ldr	r2, [pc, #328]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008aa2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008aa6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008aa8:	4b50      	ldr	r3, [pc, #320]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008aaa:	689b      	ldr	r3, [r3, #8]
 8008aac:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008ab0:	687b      	ldr	r3, [r7, #4]
 8008ab2:	689b      	ldr	r3, [r3, #8]
 8008ab4:	494d      	ldr	r1, [pc, #308]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008ab6:	4313      	orrs	r3, r2
 8008ab8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008aba:	687b      	ldr	r3, [r7, #4]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f003 0301 	and.w	r3, r3, #1
 8008ac2:	2b00      	cmp	r3, #0
 8008ac4:	d044      	beq.n	8008b50 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008ac6:	687b      	ldr	r3, [r7, #4]
 8008ac8:	685b      	ldr	r3, [r3, #4]
 8008aca:	2b01      	cmp	r3, #1
 8008acc:	d107      	bne.n	8008ade <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008ace:	4b47      	ldr	r3, [pc, #284]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008ad0:	681b      	ldr	r3, [r3, #0]
 8008ad2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	d119      	bne.n	8008b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ada:	2301      	movs	r3, #1
 8008adc:	e07f      	b.n	8008bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ade:	687b      	ldr	r3, [r7, #4]
 8008ae0:	685b      	ldr	r3, [r3, #4]
 8008ae2:	2b02      	cmp	r3, #2
 8008ae4:	d003      	beq.n	8008aee <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008aea:	2b03      	cmp	r3, #3
 8008aec:	d107      	bne.n	8008afe <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008aee:	4b3f      	ldr	r3, [pc, #252]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008af0:	681b      	ldr	r3, [r3, #0]
 8008af2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d109      	bne.n	8008b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008afa:	2301      	movs	r3, #1
 8008afc:	e06f      	b.n	8008bde <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008afe:	4b3b      	ldr	r3, [pc, #236]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008b00:	681b      	ldr	r3, [r3, #0]
 8008b02:	f003 0302 	and.w	r3, r3, #2
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d101      	bne.n	8008b0e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008b0a:	2301      	movs	r3, #1
 8008b0c:	e067      	b.n	8008bde <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008b0e:	4b37      	ldr	r3, [pc, #220]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008b10:	689b      	ldr	r3, [r3, #8]
 8008b12:	f023 0203 	bic.w	r2, r3, #3
 8008b16:	687b      	ldr	r3, [r7, #4]
 8008b18:	685b      	ldr	r3, [r3, #4]
 8008b1a:	4934      	ldr	r1, [pc, #208]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008b20:	f7fe fe54 	bl	80077cc <HAL_GetTick>
 8008b24:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b26:	e00a      	b.n	8008b3e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b28:	f7fe fe50 	bl	80077cc <HAL_GetTick>
 8008b2c:	4602      	mov	r2, r0
 8008b2e:	68fb      	ldr	r3, [r7, #12]
 8008b30:	1ad3      	subs	r3, r2, r3
 8008b32:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b36:	4293      	cmp	r3, r2
 8008b38:	d901      	bls.n	8008b3e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b3a:	2303      	movs	r3, #3
 8008b3c:	e04f      	b.n	8008bde <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b3e:	4b2b      	ldr	r3, [pc, #172]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008b40:	689b      	ldr	r3, [r3, #8]
 8008b42:	f003 020c 	and.w	r2, r3, #12
 8008b46:	687b      	ldr	r3, [r7, #4]
 8008b48:	685b      	ldr	r3, [r3, #4]
 8008b4a:	009b      	lsls	r3, r3, #2
 8008b4c:	429a      	cmp	r2, r3
 8008b4e:	d1eb      	bne.n	8008b28 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b50:	4b25      	ldr	r3, [pc, #148]	; (8008be8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0307 	and.w	r3, r3, #7
 8008b58:	683a      	ldr	r2, [r7, #0]
 8008b5a:	429a      	cmp	r2, r3
 8008b5c:	d20c      	bcs.n	8008b78 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b5e:	4b22      	ldr	r3, [pc, #136]	; (8008be8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b60:	683a      	ldr	r2, [r7, #0]
 8008b62:	b2d2      	uxtb	r2, r2
 8008b64:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b66:	4b20      	ldr	r3, [pc, #128]	; (8008be8 <HAL_RCC_ClockConfig+0x1b8>)
 8008b68:	681b      	ldr	r3, [r3, #0]
 8008b6a:	f003 0307 	and.w	r3, r3, #7
 8008b6e:	683a      	ldr	r2, [r7, #0]
 8008b70:	429a      	cmp	r2, r3
 8008b72:	d001      	beq.n	8008b78 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b74:	2301      	movs	r3, #1
 8008b76:	e032      	b.n	8008bde <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b78:	687b      	ldr	r3, [r7, #4]
 8008b7a:	681b      	ldr	r3, [r3, #0]
 8008b7c:	f003 0304 	and.w	r3, r3, #4
 8008b80:	2b00      	cmp	r3, #0
 8008b82:	d008      	beq.n	8008b96 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b84:	4b19      	ldr	r3, [pc, #100]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008b86:	689b      	ldr	r3, [r3, #8]
 8008b88:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	68db      	ldr	r3, [r3, #12]
 8008b90:	4916      	ldr	r1, [pc, #88]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008b92:	4313      	orrs	r3, r2
 8008b94:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b96:	687b      	ldr	r3, [r7, #4]
 8008b98:	681b      	ldr	r3, [r3, #0]
 8008b9a:	f003 0308 	and.w	r3, r3, #8
 8008b9e:	2b00      	cmp	r3, #0
 8008ba0:	d009      	beq.n	8008bb6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008ba2:	4b12      	ldr	r3, [pc, #72]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008ba4:	689b      	ldr	r3, [r3, #8]
 8008ba6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	691b      	ldr	r3, [r3, #16]
 8008bae:	00db      	lsls	r3, r3, #3
 8008bb0:	490e      	ldr	r1, [pc, #56]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008bb2:	4313      	orrs	r3, r2
 8008bb4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008bb6:	f000 f821 	bl	8008bfc <HAL_RCC_GetSysClockFreq>
 8008bba:	4602      	mov	r2, r0
 8008bbc:	4b0b      	ldr	r3, [pc, #44]	; (8008bec <HAL_RCC_ClockConfig+0x1bc>)
 8008bbe:	689b      	ldr	r3, [r3, #8]
 8008bc0:	091b      	lsrs	r3, r3, #4
 8008bc2:	f003 030f 	and.w	r3, r3, #15
 8008bc6:	490a      	ldr	r1, [pc, #40]	; (8008bf0 <HAL_RCC_ClockConfig+0x1c0>)
 8008bc8:	5ccb      	ldrb	r3, [r1, r3]
 8008bca:	fa22 f303 	lsr.w	r3, r2, r3
 8008bce:	4a09      	ldr	r2, [pc, #36]	; (8008bf4 <HAL_RCC_ClockConfig+0x1c4>)
 8008bd0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008bd2:	4b09      	ldr	r3, [pc, #36]	; (8008bf8 <HAL_RCC_ClockConfig+0x1c8>)
 8008bd4:	681b      	ldr	r3, [r3, #0]
 8008bd6:	4618      	mov	r0, r3
 8008bd8:	f7fe fdb4 	bl	8007744 <HAL_InitTick>

  return HAL_OK;
 8008bdc:	2300      	movs	r3, #0
}
 8008bde:	4618      	mov	r0, r3
 8008be0:	3710      	adds	r7, #16
 8008be2:	46bd      	mov	sp, r7
 8008be4:	bd80      	pop	{r7, pc}
 8008be6:	bf00      	nop
 8008be8:	40023c00 	.word	0x40023c00
 8008bec:	40023800 	.word	0x40023800
 8008bf0:	0800f900 	.word	0x0800f900
 8008bf4:	20000014 	.word	0x20000014
 8008bf8:	20000018 	.word	0x20000018

08008bfc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bfc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008c00:	b090      	sub	sp, #64	; 0x40
 8008c02:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008c04:	2300      	movs	r3, #0
 8008c06:	637b      	str	r3, [r7, #52]	; 0x34
 8008c08:	2300      	movs	r3, #0
 8008c0a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c0c:	2300      	movs	r3, #0
 8008c0e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008c10:	2300      	movs	r3, #0
 8008c12:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008c14:	4b59      	ldr	r3, [pc, #356]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008c16:	689b      	ldr	r3, [r3, #8]
 8008c18:	f003 030c 	and.w	r3, r3, #12
 8008c1c:	2b08      	cmp	r3, #8
 8008c1e:	d00d      	beq.n	8008c3c <HAL_RCC_GetSysClockFreq+0x40>
 8008c20:	2b08      	cmp	r3, #8
 8008c22:	f200 80a1 	bhi.w	8008d68 <HAL_RCC_GetSysClockFreq+0x16c>
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d002      	beq.n	8008c30 <HAL_RCC_GetSysClockFreq+0x34>
 8008c2a:	2b04      	cmp	r3, #4
 8008c2c:	d003      	beq.n	8008c36 <HAL_RCC_GetSysClockFreq+0x3a>
 8008c2e:	e09b      	b.n	8008d68 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c30:	4b53      	ldr	r3, [pc, #332]	; (8008d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c32:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008c34:	e09b      	b.n	8008d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c36:	4b53      	ldr	r3, [pc, #332]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c38:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008c3a:	e098      	b.n	8008d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c3c:	4b4f      	ldr	r3, [pc, #316]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008c3e:	685b      	ldr	r3, [r3, #4]
 8008c40:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c44:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c46:	4b4d      	ldr	r3, [pc, #308]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008c48:	685b      	ldr	r3, [r3, #4]
 8008c4a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d028      	beq.n	8008ca4 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c52:	4b4a      	ldr	r3, [pc, #296]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008c54:	685b      	ldr	r3, [r3, #4]
 8008c56:	099b      	lsrs	r3, r3, #6
 8008c58:	2200      	movs	r2, #0
 8008c5a:	623b      	str	r3, [r7, #32]
 8008c5c:	627a      	str	r2, [r7, #36]	; 0x24
 8008c5e:	6a3b      	ldr	r3, [r7, #32]
 8008c60:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008c64:	2100      	movs	r1, #0
 8008c66:	4b47      	ldr	r3, [pc, #284]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c68:	fb03 f201 	mul.w	r2, r3, r1
 8008c6c:	2300      	movs	r3, #0
 8008c6e:	fb00 f303 	mul.w	r3, r0, r3
 8008c72:	4413      	add	r3, r2
 8008c74:	4a43      	ldr	r2, [pc, #268]	; (8008d84 <HAL_RCC_GetSysClockFreq+0x188>)
 8008c76:	fba0 1202 	umull	r1, r2, r0, r2
 8008c7a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c7c:	460a      	mov	r2, r1
 8008c7e:	62ba      	str	r2, [r7, #40]	; 0x28
 8008c80:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c82:	4413      	add	r3, r2
 8008c84:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c88:	2200      	movs	r2, #0
 8008c8a:	61bb      	str	r3, [r7, #24]
 8008c8c:	61fa      	str	r2, [r7, #28]
 8008c8e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c92:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008c96:	f7f7 fff7 	bl	8000c88 <__aeabi_uldivmod>
 8008c9a:	4602      	mov	r2, r0
 8008c9c:	460b      	mov	r3, r1
 8008c9e:	4613      	mov	r3, r2
 8008ca0:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ca2:	e053      	b.n	8008d4c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008ca4:	4b35      	ldr	r3, [pc, #212]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008ca6:	685b      	ldr	r3, [r3, #4]
 8008ca8:	099b      	lsrs	r3, r3, #6
 8008caa:	2200      	movs	r2, #0
 8008cac:	613b      	str	r3, [r7, #16]
 8008cae:	617a      	str	r2, [r7, #20]
 8008cb0:	693b      	ldr	r3, [r7, #16]
 8008cb2:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008cb6:	f04f 0b00 	mov.w	fp, #0
 8008cba:	4652      	mov	r2, sl
 8008cbc:	465b      	mov	r3, fp
 8008cbe:	f04f 0000 	mov.w	r0, #0
 8008cc2:	f04f 0100 	mov.w	r1, #0
 8008cc6:	0159      	lsls	r1, r3, #5
 8008cc8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ccc:	0150      	lsls	r0, r2, #5
 8008cce:	4602      	mov	r2, r0
 8008cd0:	460b      	mov	r3, r1
 8008cd2:	ebb2 080a 	subs.w	r8, r2, sl
 8008cd6:	eb63 090b 	sbc.w	r9, r3, fp
 8008cda:	f04f 0200 	mov.w	r2, #0
 8008cde:	f04f 0300 	mov.w	r3, #0
 8008ce2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008ce6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008cea:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008cee:	ebb2 0408 	subs.w	r4, r2, r8
 8008cf2:	eb63 0509 	sbc.w	r5, r3, r9
 8008cf6:	f04f 0200 	mov.w	r2, #0
 8008cfa:	f04f 0300 	mov.w	r3, #0
 8008cfe:	00eb      	lsls	r3, r5, #3
 8008d00:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008d04:	00e2      	lsls	r2, r4, #3
 8008d06:	4614      	mov	r4, r2
 8008d08:	461d      	mov	r5, r3
 8008d0a:	eb14 030a 	adds.w	r3, r4, sl
 8008d0e:	603b      	str	r3, [r7, #0]
 8008d10:	eb45 030b 	adc.w	r3, r5, fp
 8008d14:	607b      	str	r3, [r7, #4]
 8008d16:	f04f 0200 	mov.w	r2, #0
 8008d1a:	f04f 0300 	mov.w	r3, #0
 8008d1e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008d22:	4629      	mov	r1, r5
 8008d24:	028b      	lsls	r3, r1, #10
 8008d26:	4621      	mov	r1, r4
 8008d28:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d2c:	4621      	mov	r1, r4
 8008d2e:	028a      	lsls	r2, r1, #10
 8008d30:	4610      	mov	r0, r2
 8008d32:	4619      	mov	r1, r3
 8008d34:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d36:	2200      	movs	r2, #0
 8008d38:	60bb      	str	r3, [r7, #8]
 8008d3a:	60fa      	str	r2, [r7, #12]
 8008d3c:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d40:	f7f7 ffa2 	bl	8000c88 <__aeabi_uldivmod>
 8008d44:	4602      	mov	r2, r0
 8008d46:	460b      	mov	r3, r1
 8008d48:	4613      	mov	r3, r2
 8008d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d4c:	4b0b      	ldr	r3, [pc, #44]	; (8008d7c <HAL_RCC_GetSysClockFreq+0x180>)
 8008d4e:	685b      	ldr	r3, [r3, #4]
 8008d50:	0c1b      	lsrs	r3, r3, #16
 8008d52:	f003 0303 	and.w	r3, r3, #3
 8008d56:	3301      	adds	r3, #1
 8008d58:	005b      	lsls	r3, r3, #1
 8008d5a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008d5c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d60:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d64:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008d66:	e002      	b.n	8008d6e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d6a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008d6c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008d70:	4618      	mov	r0, r3
 8008d72:	3740      	adds	r7, #64	; 0x40
 8008d74:	46bd      	mov	sp, r7
 8008d76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d7a:	bf00      	nop
 8008d7c:	40023800 	.word	0x40023800
 8008d80:	00f42400 	.word	0x00f42400
 8008d84:	00b71b00 	.word	0x00b71b00

08008d88 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d8c:	4b03      	ldr	r3, [pc, #12]	; (8008d9c <HAL_RCC_GetHCLKFreq+0x14>)
 8008d8e:	681b      	ldr	r3, [r3, #0]
}
 8008d90:	4618      	mov	r0, r3
 8008d92:	46bd      	mov	sp, r7
 8008d94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d98:	4770      	bx	lr
 8008d9a:	bf00      	nop
 8008d9c:	20000014 	.word	0x20000014

08008da0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008da4:	f7ff fff0 	bl	8008d88 <HAL_RCC_GetHCLKFreq>
 8008da8:	4602      	mov	r2, r0
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	0a9b      	lsrs	r3, r3, #10
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	4903      	ldr	r1, [pc, #12]	; (8008dc4 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008db6:	5ccb      	ldrb	r3, [r1, r3]
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	0800f910 	.word	0x0800f910

08008dc8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008dcc:	f7ff ffdc 	bl	8008d88 <HAL_RCC_GetHCLKFreq>
 8008dd0:	4602      	mov	r2, r0
 8008dd2:	4b05      	ldr	r3, [pc, #20]	; (8008de8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008dd4:	689b      	ldr	r3, [r3, #8]
 8008dd6:	0b5b      	lsrs	r3, r3, #13
 8008dd8:	f003 0307 	and.w	r3, r3, #7
 8008ddc:	4903      	ldr	r1, [pc, #12]	; (8008dec <HAL_RCC_GetPCLK2Freq+0x24>)
 8008dde:	5ccb      	ldrb	r3, [r1, r3]
 8008de0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008de4:	4618      	mov	r0, r3
 8008de6:	bd80      	pop	{r7, pc}
 8008de8:	40023800 	.word	0x40023800
 8008dec:	0800f910 	.word	0x0800f910

08008df0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008df0:	b580      	push	{r7, lr}
 8008df2:	b082      	sub	sp, #8
 8008df4:	af00      	add	r7, sp, #0
 8008df6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008df8:	687b      	ldr	r3, [r7, #4]
 8008dfa:	2b00      	cmp	r3, #0
 8008dfc:	d101      	bne.n	8008e02 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dfe:	2301      	movs	r3, #1
 8008e00:	e041      	b.n	8008e86 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d106      	bne.n	8008e1c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008e0e:	687b      	ldr	r3, [r7, #4]
 8008e10:	2200      	movs	r2, #0
 8008e12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008e16:	6878      	ldr	r0, [r7, #4]
 8008e18:	f7fe fa00 	bl	800721c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2202      	movs	r2, #2
 8008e20:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	681a      	ldr	r2, [r3, #0]
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	3304      	adds	r3, #4
 8008e2c:	4619      	mov	r1, r3
 8008e2e:	4610      	mov	r0, r2
 8008e30:	f000 fbba 	bl	80095a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e5c:	687b      	ldr	r3, [r7, #4]
 8008e5e:	2201      	movs	r2, #1
 8008e60:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e64:	687b      	ldr	r3, [r7, #4]
 8008e66:	2201      	movs	r2, #1
 8008e68:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e6c:	687b      	ldr	r3, [r7, #4]
 8008e6e:	2201      	movs	r2, #1
 8008e70:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e74:	687b      	ldr	r3, [r7, #4]
 8008e76:	2201      	movs	r2, #1
 8008e78:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	2201      	movs	r2, #1
 8008e80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e84:	2300      	movs	r3, #0
}
 8008e86:	4618      	mov	r0, r3
 8008e88:	3708      	adds	r7, #8
 8008e8a:	46bd      	mov	sp, r7
 8008e8c:	bd80      	pop	{r7, pc}
	...

08008e90 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e9e:	b2db      	uxtb	r3, r3
 8008ea0:	2b01      	cmp	r3, #1
 8008ea2:	d001      	beq.n	8008ea8 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008ea4:	2301      	movs	r3, #1
 8008ea6:	e04e      	b.n	8008f46 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2202      	movs	r2, #2
 8008eac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008eb0:	687b      	ldr	r3, [r7, #4]
 8008eb2:	681b      	ldr	r3, [r3, #0]
 8008eb4:	68da      	ldr	r2, [r3, #12]
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	f042 0201 	orr.w	r2, r2, #1
 8008ebe:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a23      	ldr	r2, [pc, #140]	; (8008f54 <HAL_TIM_Base_Start_IT+0xc4>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d022      	beq.n	8008f10 <HAL_TIM_Base_Start_IT+0x80>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008ed2:	d01d      	beq.n	8008f10 <HAL_TIM_Base_Start_IT+0x80>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a1f      	ldr	r2, [pc, #124]	; (8008f58 <HAL_TIM_Base_Start_IT+0xc8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d018      	beq.n	8008f10 <HAL_TIM_Base_Start_IT+0x80>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a1e      	ldr	r2, [pc, #120]	; (8008f5c <HAL_TIM_Base_Start_IT+0xcc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d013      	beq.n	8008f10 <HAL_TIM_Base_Start_IT+0x80>
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	4a1c      	ldr	r2, [pc, #112]	; (8008f60 <HAL_TIM_Base_Start_IT+0xd0>)
 8008eee:	4293      	cmp	r3, r2
 8008ef0:	d00e      	beq.n	8008f10 <HAL_TIM_Base_Start_IT+0x80>
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	4a1b      	ldr	r2, [pc, #108]	; (8008f64 <HAL_TIM_Base_Start_IT+0xd4>)
 8008ef8:	4293      	cmp	r3, r2
 8008efa:	d009      	beq.n	8008f10 <HAL_TIM_Base_Start_IT+0x80>
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	681b      	ldr	r3, [r3, #0]
 8008f00:	4a19      	ldr	r2, [pc, #100]	; (8008f68 <HAL_TIM_Base_Start_IT+0xd8>)
 8008f02:	4293      	cmp	r3, r2
 8008f04:	d004      	beq.n	8008f10 <HAL_TIM_Base_Start_IT+0x80>
 8008f06:	687b      	ldr	r3, [r7, #4]
 8008f08:	681b      	ldr	r3, [r3, #0]
 8008f0a:	4a18      	ldr	r2, [pc, #96]	; (8008f6c <HAL_TIM_Base_Start_IT+0xdc>)
 8008f0c:	4293      	cmp	r3, r2
 8008f0e:	d111      	bne.n	8008f34 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	681b      	ldr	r3, [r3, #0]
 8008f14:	689b      	ldr	r3, [r3, #8]
 8008f16:	f003 0307 	and.w	r3, r3, #7
 8008f1a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2b06      	cmp	r3, #6
 8008f20:	d010      	beq.n	8008f44 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008f22:	687b      	ldr	r3, [r7, #4]
 8008f24:	681b      	ldr	r3, [r3, #0]
 8008f26:	681a      	ldr	r2, [r3, #0]
 8008f28:	687b      	ldr	r3, [r7, #4]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	f042 0201 	orr.w	r2, r2, #1
 8008f30:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f32:	e007      	b.n	8008f44 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f34:	687b      	ldr	r3, [r7, #4]
 8008f36:	681b      	ldr	r3, [r3, #0]
 8008f38:	681a      	ldr	r2, [r3, #0]
 8008f3a:	687b      	ldr	r3, [r7, #4]
 8008f3c:	681b      	ldr	r3, [r3, #0]
 8008f3e:	f042 0201 	orr.w	r2, r2, #1
 8008f42:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f44:	2300      	movs	r3, #0
}
 8008f46:	4618      	mov	r0, r3
 8008f48:	3714      	adds	r7, #20
 8008f4a:	46bd      	mov	sp, r7
 8008f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f50:	4770      	bx	lr
 8008f52:	bf00      	nop
 8008f54:	40010000 	.word	0x40010000
 8008f58:	40000400 	.word	0x40000400
 8008f5c:	40000800 	.word	0x40000800
 8008f60:	40000c00 	.word	0x40000c00
 8008f64:	40010400 	.word	0x40010400
 8008f68:	40014000 	.word	0x40014000
 8008f6c:	40001800 	.word	0x40001800

08008f70 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008f70:	b480      	push	{r7}
 8008f72:	b083      	sub	sp, #12
 8008f74:	af00      	add	r7, sp, #0
 8008f76:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008f78:	687b      	ldr	r3, [r7, #4]
 8008f7a:	681b      	ldr	r3, [r3, #0]
 8008f7c:	68da      	ldr	r2, [r3, #12]
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	681b      	ldr	r3, [r3, #0]
 8008f82:	f022 0201 	bic.w	r2, r2, #1
 8008f86:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f88:	687b      	ldr	r3, [r7, #4]
 8008f8a:	681b      	ldr	r3, [r3, #0]
 8008f8c:	6a1a      	ldr	r2, [r3, #32]
 8008f8e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f92:	4013      	ands	r3, r2
 8008f94:	2b00      	cmp	r3, #0
 8008f96:	d10f      	bne.n	8008fb8 <HAL_TIM_Base_Stop_IT+0x48>
 8008f98:	687b      	ldr	r3, [r7, #4]
 8008f9a:	681b      	ldr	r3, [r3, #0]
 8008f9c:	6a1a      	ldr	r2, [r3, #32]
 8008f9e:	f240 4344 	movw	r3, #1092	; 0x444
 8008fa2:	4013      	ands	r3, r2
 8008fa4:	2b00      	cmp	r3, #0
 8008fa6:	d107      	bne.n	8008fb8 <HAL_TIM_Base_Stop_IT+0x48>
 8008fa8:	687b      	ldr	r3, [r7, #4]
 8008faa:	681b      	ldr	r3, [r3, #0]
 8008fac:	681a      	ldr	r2, [r3, #0]
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	681b      	ldr	r3, [r3, #0]
 8008fb2:	f022 0201 	bic.w	r2, r2, #1
 8008fb6:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2201      	movs	r2, #1
 8008fbc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008fc0:	2300      	movs	r3, #0
}
 8008fc2:	4618      	mov	r0, r3
 8008fc4:	370c      	adds	r7, #12
 8008fc6:	46bd      	mov	sp, r7
 8008fc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fcc:	4770      	bx	lr

08008fce <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008fce:	b580      	push	{r7, lr}
 8008fd0:	b082      	sub	sp, #8
 8008fd2:	af00      	add	r7, sp, #0
 8008fd4:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fd6:	687b      	ldr	r3, [r7, #4]
 8008fd8:	2b00      	cmp	r3, #0
 8008fda:	d101      	bne.n	8008fe0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008fdc:	2301      	movs	r3, #1
 8008fde:	e041      	b.n	8009064 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fe0:	687b      	ldr	r3, [r7, #4]
 8008fe2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fe6:	b2db      	uxtb	r3, r3
 8008fe8:	2b00      	cmp	r3, #0
 8008fea:	d106      	bne.n	8008ffa <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fec:	687b      	ldr	r3, [r7, #4]
 8008fee:	2200      	movs	r2, #0
 8008ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008ff4:	6878      	ldr	r0, [r7, #4]
 8008ff6:	f000 f839 	bl	800906c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2202      	movs	r2, #2
 8008ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	681a      	ldr	r2, [r3, #0]
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	3304      	adds	r3, #4
 800900a:	4619      	mov	r1, r3
 800900c:	4610      	mov	r0, r2
 800900e:	f000 facb 	bl	80095a8 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	2201      	movs	r2, #1
 800903e:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8009042:	687b      	ldr	r3, [r7, #4]
 8009044:	2201      	movs	r2, #1
 8009046:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800904a:	687b      	ldr	r3, [r7, #4]
 800904c:	2201      	movs	r2, #1
 800904e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	2201      	movs	r2, #1
 8009056:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800905a:	687b      	ldr	r3, [r7, #4]
 800905c:	2201      	movs	r2, #1
 800905e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8009062:	2300      	movs	r3, #0
}
 8009064:	4618      	mov	r0, r3
 8009066:	3708      	adds	r7, #8
 8009068:	46bd      	mov	sp, r7
 800906a:	bd80      	pop	{r7, pc}

0800906c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 800906c:	b480      	push	{r7}
 800906e:	b083      	sub	sp, #12
 8009070:	af00      	add	r7, sp, #0
 8009072:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8009074:	bf00      	nop
 8009076:	370c      	adds	r7, #12
 8009078:	46bd      	mov	sp, r7
 800907a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800907e:	4770      	bx	lr

08009080 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009080:	b580      	push	{r7, lr}
 8009082:	b082      	sub	sp, #8
 8009084:	af00      	add	r7, sp, #0
 8009086:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009088:	687b      	ldr	r3, [r7, #4]
 800908a:	681b      	ldr	r3, [r3, #0]
 800908c:	691b      	ldr	r3, [r3, #16]
 800908e:	f003 0302 	and.w	r3, r3, #2
 8009092:	2b02      	cmp	r3, #2
 8009094:	d122      	bne.n	80090dc <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8009096:	687b      	ldr	r3, [r7, #4]
 8009098:	681b      	ldr	r3, [r3, #0]
 800909a:	68db      	ldr	r3, [r3, #12]
 800909c:	f003 0302 	and.w	r3, r3, #2
 80090a0:	2b02      	cmp	r3, #2
 80090a2:	d11b      	bne.n	80090dc <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 80090a4:	687b      	ldr	r3, [r7, #4]
 80090a6:	681b      	ldr	r3, [r3, #0]
 80090a8:	f06f 0202 	mvn.w	r2, #2
 80090ac:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2201      	movs	r2, #1
 80090b2:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	699b      	ldr	r3, [r3, #24]
 80090ba:	f003 0303 	and.w	r3, r3, #3
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d003      	beq.n	80090ca <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 80090c2:	6878      	ldr	r0, [r7, #4]
 80090c4:	f000 fa51 	bl	800956a <HAL_TIM_IC_CaptureCallback>
 80090c8:	e005      	b.n	80090d6 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090ca:	6878      	ldr	r0, [r7, #4]
 80090cc:	f000 fa43 	bl	8009556 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090d0:	6878      	ldr	r0, [r7, #4]
 80090d2:	f000 fa54 	bl	800957e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090d6:	687b      	ldr	r3, [r7, #4]
 80090d8:	2200      	movs	r2, #0
 80090da:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090dc:	687b      	ldr	r3, [r7, #4]
 80090de:	681b      	ldr	r3, [r3, #0]
 80090e0:	691b      	ldr	r3, [r3, #16]
 80090e2:	f003 0304 	and.w	r3, r3, #4
 80090e6:	2b04      	cmp	r3, #4
 80090e8:	d122      	bne.n	8009130 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	681b      	ldr	r3, [r3, #0]
 80090ee:	68db      	ldr	r3, [r3, #12]
 80090f0:	f003 0304 	and.w	r3, r3, #4
 80090f4:	2b04      	cmp	r3, #4
 80090f6:	d11b      	bne.n	8009130 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090f8:	687b      	ldr	r3, [r7, #4]
 80090fa:	681b      	ldr	r3, [r3, #0]
 80090fc:	f06f 0204 	mvn.w	r2, #4
 8009100:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2202      	movs	r2, #2
 8009106:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	699b      	ldr	r3, [r3, #24]
 800910e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009112:	2b00      	cmp	r3, #0
 8009114:	d003      	beq.n	800911e <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009116:	6878      	ldr	r0, [r7, #4]
 8009118:	f000 fa27 	bl	800956a <HAL_TIM_IC_CaptureCallback>
 800911c:	e005      	b.n	800912a <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800911e:	6878      	ldr	r0, [r7, #4]
 8009120:	f000 fa19 	bl	8009556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009124:	6878      	ldr	r0, [r7, #4]
 8009126:	f000 fa2a 	bl	800957e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	2200      	movs	r2, #0
 800912e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	691b      	ldr	r3, [r3, #16]
 8009136:	f003 0308 	and.w	r3, r3, #8
 800913a:	2b08      	cmp	r3, #8
 800913c:	d122      	bne.n	8009184 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800913e:	687b      	ldr	r3, [r7, #4]
 8009140:	681b      	ldr	r3, [r3, #0]
 8009142:	68db      	ldr	r3, [r3, #12]
 8009144:	f003 0308 	and.w	r3, r3, #8
 8009148:	2b08      	cmp	r3, #8
 800914a:	d11b      	bne.n	8009184 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 800914c:	687b      	ldr	r3, [r7, #4]
 800914e:	681b      	ldr	r3, [r3, #0]
 8009150:	f06f 0208 	mvn.w	r2, #8
 8009154:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2204      	movs	r2, #4
 800915a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	69db      	ldr	r3, [r3, #28]
 8009162:	f003 0303 	and.w	r3, r3, #3
 8009166:	2b00      	cmp	r3, #0
 8009168:	d003      	beq.n	8009172 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800916a:	6878      	ldr	r0, [r7, #4]
 800916c:	f000 f9fd 	bl	800956a <HAL_TIM_IC_CaptureCallback>
 8009170:	e005      	b.n	800917e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f000 f9ef 	bl	8009556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009178:	6878      	ldr	r0, [r7, #4]
 800917a:	f000 fa00 	bl	800957e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800917e:	687b      	ldr	r3, [r7, #4]
 8009180:	2200      	movs	r2, #0
 8009182:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	691b      	ldr	r3, [r3, #16]
 800918a:	f003 0310 	and.w	r3, r3, #16
 800918e:	2b10      	cmp	r3, #16
 8009190:	d122      	bne.n	80091d8 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8009192:	687b      	ldr	r3, [r7, #4]
 8009194:	681b      	ldr	r3, [r3, #0]
 8009196:	68db      	ldr	r3, [r3, #12]
 8009198:	f003 0310 	and.w	r3, r3, #16
 800919c:	2b10      	cmp	r3, #16
 800919e:	d11b      	bne.n	80091d8 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80091a0:	687b      	ldr	r3, [r7, #4]
 80091a2:	681b      	ldr	r3, [r3, #0]
 80091a4:	f06f 0210 	mvn.w	r2, #16
 80091a8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2208      	movs	r2, #8
 80091ae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	69db      	ldr	r3, [r3, #28]
 80091b6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80091ba:	2b00      	cmp	r3, #0
 80091bc:	d003      	beq.n	80091c6 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80091be:	6878      	ldr	r0, [r7, #4]
 80091c0:	f000 f9d3 	bl	800956a <HAL_TIM_IC_CaptureCallback>
 80091c4:	e005      	b.n	80091d2 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80091c6:	6878      	ldr	r0, [r7, #4]
 80091c8:	f000 f9c5 	bl	8009556 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091cc:	6878      	ldr	r0, [r7, #4]
 80091ce:	f000 f9d6 	bl	800957e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	2200      	movs	r2, #0
 80091d6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091d8:	687b      	ldr	r3, [r7, #4]
 80091da:	681b      	ldr	r3, [r3, #0]
 80091dc:	691b      	ldr	r3, [r3, #16]
 80091de:	f003 0301 	and.w	r3, r3, #1
 80091e2:	2b01      	cmp	r3, #1
 80091e4:	d10e      	bne.n	8009204 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	681b      	ldr	r3, [r3, #0]
 80091ea:	68db      	ldr	r3, [r3, #12]
 80091ec:	f003 0301 	and.w	r3, r3, #1
 80091f0:	2b01      	cmp	r3, #1
 80091f2:	d107      	bne.n	8009204 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091f4:	687b      	ldr	r3, [r7, #4]
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f06f 0201 	mvn.w	r2, #1
 80091fc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091fe:	6878      	ldr	r0, [r7, #4]
 8009200:	f7fc fbd6 	bl	80059b0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	691b      	ldr	r3, [r3, #16]
 800920a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800920e:	2b80      	cmp	r3, #128	; 0x80
 8009210:	d10e      	bne.n	8009230 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	68db      	ldr	r3, [r3, #12]
 8009218:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800921c:	2b80      	cmp	r3, #128	; 0x80
 800921e:	d107      	bne.n	8009230 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	681b      	ldr	r3, [r3, #0]
 8009224:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009228:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 800922a:	6878      	ldr	r0, [r7, #4]
 800922c:	f000 fca6 	bl	8009b7c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009230:	687b      	ldr	r3, [r7, #4]
 8009232:	681b      	ldr	r3, [r3, #0]
 8009234:	691b      	ldr	r3, [r3, #16]
 8009236:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800923a:	2b40      	cmp	r3, #64	; 0x40
 800923c:	d10e      	bne.n	800925c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800923e:	687b      	ldr	r3, [r7, #4]
 8009240:	681b      	ldr	r3, [r3, #0]
 8009242:	68db      	ldr	r3, [r3, #12]
 8009244:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009248:	2b40      	cmp	r3, #64	; 0x40
 800924a:	d107      	bne.n	800925c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 800924c:	687b      	ldr	r3, [r7, #4]
 800924e:	681b      	ldr	r3, [r3, #0]
 8009250:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8009254:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8009256:	6878      	ldr	r0, [r7, #4]
 8009258:	f000 f99b 	bl	8009592 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 800925c:	687b      	ldr	r3, [r7, #4]
 800925e:	681b      	ldr	r3, [r3, #0]
 8009260:	691b      	ldr	r3, [r3, #16]
 8009262:	f003 0320 	and.w	r3, r3, #32
 8009266:	2b20      	cmp	r3, #32
 8009268:	d10e      	bne.n	8009288 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	681b      	ldr	r3, [r3, #0]
 800926e:	68db      	ldr	r3, [r3, #12]
 8009270:	f003 0320 	and.w	r3, r3, #32
 8009274:	2b20      	cmp	r3, #32
 8009276:	d107      	bne.n	8009288 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	f06f 0220 	mvn.w	r2, #32
 8009280:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8009282:	6878      	ldr	r0, [r7, #4]
 8009284:	f000 fc70 	bl	8009b68 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009288:	bf00      	nop
 800928a:	3708      	adds	r7, #8
 800928c:	46bd      	mov	sp, r7
 800928e:	bd80      	pop	{r7, pc}

08009290 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009290:	b580      	push	{r7, lr}
 8009292:	b086      	sub	sp, #24
 8009294:	af00      	add	r7, sp, #0
 8009296:	60f8      	str	r0, [r7, #12]
 8009298:	60b9      	str	r1, [r7, #8]
 800929a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800929c:	2300      	movs	r3, #0
 800929e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 80092a0:	68fb      	ldr	r3, [r7, #12]
 80092a2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80092a6:	2b01      	cmp	r3, #1
 80092a8:	d101      	bne.n	80092ae <HAL_TIM_IC_ConfigChannel+0x1e>
 80092aa:	2302      	movs	r3, #2
 80092ac:	e088      	b.n	80093c0 <HAL_TIM_IC_ConfigChannel+0x130>
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	2201      	movs	r2, #1
 80092b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 80092b6:	687b      	ldr	r3, [r7, #4]
 80092b8:	2b00      	cmp	r3, #0
 80092ba:	d11b      	bne.n	80092f4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 80092bc:	68fb      	ldr	r3, [r7, #12]
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	68bb      	ldr	r3, [r7, #8]
 80092c2:	6819      	ldr	r1, [r3, #0]
 80092c4:	68bb      	ldr	r3, [r7, #8]
 80092c6:	685a      	ldr	r2, [r3, #4]
 80092c8:	68bb      	ldr	r3, [r7, #8]
 80092ca:	68db      	ldr	r3, [r3, #12]
 80092cc:	f000 fa0c 	bl	80096e8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80092d0:	68fb      	ldr	r3, [r7, #12]
 80092d2:	681b      	ldr	r3, [r3, #0]
 80092d4:	699a      	ldr	r2, [r3, #24]
 80092d6:	68fb      	ldr	r3, [r7, #12]
 80092d8:	681b      	ldr	r3, [r3, #0]
 80092da:	f022 020c 	bic.w	r2, r2, #12
 80092de:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80092e0:	68fb      	ldr	r3, [r7, #12]
 80092e2:	681b      	ldr	r3, [r3, #0]
 80092e4:	6999      	ldr	r1, [r3, #24]
 80092e6:	68bb      	ldr	r3, [r7, #8]
 80092e8:	689a      	ldr	r2, [r3, #8]
 80092ea:	68fb      	ldr	r3, [r7, #12]
 80092ec:	681b      	ldr	r3, [r3, #0]
 80092ee:	430a      	orrs	r2, r1
 80092f0:	619a      	str	r2, [r3, #24]
 80092f2:	e060      	b.n	80093b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80092f4:	687b      	ldr	r3, [r7, #4]
 80092f6:	2b04      	cmp	r3, #4
 80092f8:	d11c      	bne.n	8009334 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80092fa:	68fb      	ldr	r3, [r7, #12]
 80092fc:	6818      	ldr	r0, [r3, #0]
 80092fe:	68bb      	ldr	r3, [r7, #8]
 8009300:	6819      	ldr	r1, [r3, #0]
 8009302:	68bb      	ldr	r3, [r7, #8]
 8009304:	685a      	ldr	r2, [r3, #4]
 8009306:	68bb      	ldr	r3, [r7, #8]
 8009308:	68db      	ldr	r3, [r3, #12]
 800930a:	f000 fa90 	bl	800982e <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800930e:	68fb      	ldr	r3, [r7, #12]
 8009310:	681b      	ldr	r3, [r3, #0]
 8009312:	699a      	ldr	r2, [r3, #24]
 8009314:	68fb      	ldr	r3, [r7, #12]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800931c:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 800931e:	68fb      	ldr	r3, [r7, #12]
 8009320:	681b      	ldr	r3, [r3, #0]
 8009322:	6999      	ldr	r1, [r3, #24]
 8009324:	68bb      	ldr	r3, [r7, #8]
 8009326:	689b      	ldr	r3, [r3, #8]
 8009328:	021a      	lsls	r2, r3, #8
 800932a:	68fb      	ldr	r3, [r7, #12]
 800932c:	681b      	ldr	r3, [r3, #0]
 800932e:	430a      	orrs	r2, r1
 8009330:	619a      	str	r2, [r3, #24]
 8009332:	e040      	b.n	80093b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	2b08      	cmp	r3, #8
 8009338:	d11b      	bne.n	8009372 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 800933a:	68fb      	ldr	r3, [r7, #12]
 800933c:	6818      	ldr	r0, [r3, #0]
 800933e:	68bb      	ldr	r3, [r7, #8]
 8009340:	6819      	ldr	r1, [r3, #0]
 8009342:	68bb      	ldr	r3, [r7, #8]
 8009344:	685a      	ldr	r2, [r3, #4]
 8009346:	68bb      	ldr	r3, [r7, #8]
 8009348:	68db      	ldr	r3, [r3, #12]
 800934a:	f000 fadd 	bl	8009908 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800934e:	68fb      	ldr	r3, [r7, #12]
 8009350:	681b      	ldr	r3, [r3, #0]
 8009352:	69da      	ldr	r2, [r3, #28]
 8009354:	68fb      	ldr	r3, [r7, #12]
 8009356:	681b      	ldr	r3, [r3, #0]
 8009358:	f022 020c 	bic.w	r2, r2, #12
 800935c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800935e:	68fb      	ldr	r3, [r7, #12]
 8009360:	681b      	ldr	r3, [r3, #0]
 8009362:	69d9      	ldr	r1, [r3, #28]
 8009364:	68bb      	ldr	r3, [r7, #8]
 8009366:	689a      	ldr	r2, [r3, #8]
 8009368:	68fb      	ldr	r3, [r7, #12]
 800936a:	681b      	ldr	r3, [r3, #0]
 800936c:	430a      	orrs	r2, r1
 800936e:	61da      	str	r2, [r3, #28]
 8009370:	e021      	b.n	80093b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8009372:	687b      	ldr	r3, [r7, #4]
 8009374:	2b0c      	cmp	r3, #12
 8009376:	d11c      	bne.n	80093b2 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009378:	68fb      	ldr	r3, [r7, #12]
 800937a:	6818      	ldr	r0, [r3, #0]
 800937c:	68bb      	ldr	r3, [r7, #8]
 800937e:	6819      	ldr	r1, [r3, #0]
 8009380:	68bb      	ldr	r3, [r7, #8]
 8009382:	685a      	ldr	r2, [r3, #4]
 8009384:	68bb      	ldr	r3, [r7, #8]
 8009386:	68db      	ldr	r3, [r3, #12]
 8009388:	f000 fafa 	bl	8009980 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800938c:	68fb      	ldr	r3, [r7, #12]
 800938e:	681b      	ldr	r3, [r3, #0]
 8009390:	69da      	ldr	r2, [r3, #28]
 8009392:	68fb      	ldr	r3, [r7, #12]
 8009394:	681b      	ldr	r3, [r3, #0]
 8009396:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800939a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800939c:	68fb      	ldr	r3, [r7, #12]
 800939e:	681b      	ldr	r3, [r3, #0]
 80093a0:	69d9      	ldr	r1, [r3, #28]
 80093a2:	68bb      	ldr	r3, [r7, #8]
 80093a4:	689b      	ldr	r3, [r3, #8]
 80093a6:	021a      	lsls	r2, r3, #8
 80093a8:	68fb      	ldr	r3, [r7, #12]
 80093aa:	681b      	ldr	r3, [r3, #0]
 80093ac:	430a      	orrs	r2, r1
 80093ae:	61da      	str	r2, [r3, #28]
 80093b0:	e001      	b.n	80093b6 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 80093b2:	2301      	movs	r3, #1
 80093b4:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 80093b6:	68fb      	ldr	r3, [r7, #12]
 80093b8:	2200      	movs	r2, #0
 80093ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80093be:	7dfb      	ldrb	r3, [r7, #23]
}
 80093c0:	4618      	mov	r0, r3
 80093c2:	3718      	adds	r7, #24
 80093c4:	46bd      	mov	sp, r7
 80093c6:	bd80      	pop	{r7, pc}

080093c8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093c8:	b580      	push	{r7, lr}
 80093ca:	b084      	sub	sp, #16
 80093cc:	af00      	add	r7, sp, #0
 80093ce:	6078      	str	r0, [r7, #4]
 80093d0:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093d2:	2300      	movs	r3, #0
 80093d4:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093d6:	687b      	ldr	r3, [r7, #4]
 80093d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093dc:	2b01      	cmp	r3, #1
 80093de:	d101      	bne.n	80093e4 <HAL_TIM_ConfigClockSource+0x1c>
 80093e0:	2302      	movs	r3, #2
 80093e2:	e0b4      	b.n	800954e <HAL_TIM_ConfigClockSource+0x186>
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	2201      	movs	r2, #1
 80093e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093ec:	687b      	ldr	r3, [r7, #4]
 80093ee:	2202      	movs	r2, #2
 80093f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093f4:	687b      	ldr	r3, [r7, #4]
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	689b      	ldr	r3, [r3, #8]
 80093fa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093fc:	68bb      	ldr	r3, [r7, #8]
 80093fe:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8009402:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009404:	68bb      	ldr	r3, [r7, #8]
 8009406:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800940a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800940c:	687b      	ldr	r3, [r7, #4]
 800940e:	681b      	ldr	r3, [r3, #0]
 8009410:	68ba      	ldr	r2, [r7, #8]
 8009412:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8009414:	683b      	ldr	r3, [r7, #0]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800941c:	d03e      	beq.n	800949c <HAL_TIM_ConfigClockSource+0xd4>
 800941e:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8009422:	f200 8087 	bhi.w	8009534 <HAL_TIM_ConfigClockSource+0x16c>
 8009426:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800942a:	f000 8086 	beq.w	800953a <HAL_TIM_ConfigClockSource+0x172>
 800942e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009432:	d87f      	bhi.n	8009534 <HAL_TIM_ConfigClockSource+0x16c>
 8009434:	2b70      	cmp	r3, #112	; 0x70
 8009436:	d01a      	beq.n	800946e <HAL_TIM_ConfigClockSource+0xa6>
 8009438:	2b70      	cmp	r3, #112	; 0x70
 800943a:	d87b      	bhi.n	8009534 <HAL_TIM_ConfigClockSource+0x16c>
 800943c:	2b60      	cmp	r3, #96	; 0x60
 800943e:	d050      	beq.n	80094e2 <HAL_TIM_ConfigClockSource+0x11a>
 8009440:	2b60      	cmp	r3, #96	; 0x60
 8009442:	d877      	bhi.n	8009534 <HAL_TIM_ConfigClockSource+0x16c>
 8009444:	2b50      	cmp	r3, #80	; 0x50
 8009446:	d03c      	beq.n	80094c2 <HAL_TIM_ConfigClockSource+0xfa>
 8009448:	2b50      	cmp	r3, #80	; 0x50
 800944a:	d873      	bhi.n	8009534 <HAL_TIM_ConfigClockSource+0x16c>
 800944c:	2b40      	cmp	r3, #64	; 0x40
 800944e:	d058      	beq.n	8009502 <HAL_TIM_ConfigClockSource+0x13a>
 8009450:	2b40      	cmp	r3, #64	; 0x40
 8009452:	d86f      	bhi.n	8009534 <HAL_TIM_ConfigClockSource+0x16c>
 8009454:	2b30      	cmp	r3, #48	; 0x30
 8009456:	d064      	beq.n	8009522 <HAL_TIM_ConfigClockSource+0x15a>
 8009458:	2b30      	cmp	r3, #48	; 0x30
 800945a:	d86b      	bhi.n	8009534 <HAL_TIM_ConfigClockSource+0x16c>
 800945c:	2b20      	cmp	r3, #32
 800945e:	d060      	beq.n	8009522 <HAL_TIM_ConfigClockSource+0x15a>
 8009460:	2b20      	cmp	r3, #32
 8009462:	d867      	bhi.n	8009534 <HAL_TIM_ConfigClockSource+0x16c>
 8009464:	2b00      	cmp	r3, #0
 8009466:	d05c      	beq.n	8009522 <HAL_TIM_ConfigClockSource+0x15a>
 8009468:	2b10      	cmp	r3, #16
 800946a:	d05a      	beq.n	8009522 <HAL_TIM_ConfigClockSource+0x15a>
 800946c:	e062      	b.n	8009534 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800946e:	687b      	ldr	r3, [r7, #4]
 8009470:	6818      	ldr	r0, [r3, #0]
 8009472:	683b      	ldr	r3, [r7, #0]
 8009474:	6899      	ldr	r1, [r3, #8]
 8009476:	683b      	ldr	r3, [r7, #0]
 8009478:	685a      	ldr	r2, [r3, #4]
 800947a:	683b      	ldr	r3, [r7, #0]
 800947c:	68db      	ldr	r3, [r3, #12]
 800947e:	f000 fad7 	bl	8009a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8009482:	687b      	ldr	r3, [r7, #4]
 8009484:	681b      	ldr	r3, [r3, #0]
 8009486:	689b      	ldr	r3, [r3, #8]
 8009488:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800948a:	68bb      	ldr	r3, [r7, #8]
 800948c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009490:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8009492:	687b      	ldr	r3, [r7, #4]
 8009494:	681b      	ldr	r3, [r3, #0]
 8009496:	68ba      	ldr	r2, [r7, #8]
 8009498:	609a      	str	r2, [r3, #8]
      break;
 800949a:	e04f      	b.n	800953c <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800949c:	687b      	ldr	r3, [r7, #4]
 800949e:	6818      	ldr	r0, [r3, #0]
 80094a0:	683b      	ldr	r3, [r7, #0]
 80094a2:	6899      	ldr	r1, [r3, #8]
 80094a4:	683b      	ldr	r3, [r7, #0]
 80094a6:	685a      	ldr	r2, [r3, #4]
 80094a8:	683b      	ldr	r3, [r7, #0]
 80094aa:	68db      	ldr	r3, [r3, #12]
 80094ac:	f000 fac0 	bl	8009a30 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80094b0:	687b      	ldr	r3, [r7, #4]
 80094b2:	681b      	ldr	r3, [r3, #0]
 80094b4:	689a      	ldr	r2, [r3, #8]
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	681b      	ldr	r3, [r3, #0]
 80094ba:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80094be:	609a      	str	r2, [r3, #8]
      break;
 80094c0:	e03c      	b.n	800953c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094c2:	687b      	ldr	r3, [r7, #4]
 80094c4:	6818      	ldr	r0, [r3, #0]
 80094c6:	683b      	ldr	r3, [r7, #0]
 80094c8:	6859      	ldr	r1, [r3, #4]
 80094ca:	683b      	ldr	r3, [r7, #0]
 80094cc:	68db      	ldr	r3, [r3, #12]
 80094ce:	461a      	mov	r2, r3
 80094d0:	f000 f97e 	bl	80097d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094d4:	687b      	ldr	r3, [r7, #4]
 80094d6:	681b      	ldr	r3, [r3, #0]
 80094d8:	2150      	movs	r1, #80	; 0x50
 80094da:	4618      	mov	r0, r3
 80094dc:	f000 fa8d 	bl	80099fa <TIM_ITRx_SetConfig>
      break;
 80094e0:	e02c      	b.n	800953c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094e2:	687b      	ldr	r3, [r7, #4]
 80094e4:	6818      	ldr	r0, [r3, #0]
 80094e6:	683b      	ldr	r3, [r7, #0]
 80094e8:	6859      	ldr	r1, [r3, #4]
 80094ea:	683b      	ldr	r3, [r7, #0]
 80094ec:	68db      	ldr	r3, [r3, #12]
 80094ee:	461a      	mov	r2, r3
 80094f0:	f000 f9da 	bl	80098a8 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094f4:	687b      	ldr	r3, [r7, #4]
 80094f6:	681b      	ldr	r3, [r3, #0]
 80094f8:	2160      	movs	r1, #96	; 0x60
 80094fa:	4618      	mov	r0, r3
 80094fc:	f000 fa7d 	bl	80099fa <TIM_ITRx_SetConfig>
      break;
 8009500:	e01c      	b.n	800953c <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8009502:	687b      	ldr	r3, [r7, #4]
 8009504:	6818      	ldr	r0, [r3, #0]
 8009506:	683b      	ldr	r3, [r7, #0]
 8009508:	6859      	ldr	r1, [r3, #4]
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68db      	ldr	r3, [r3, #12]
 800950e:	461a      	mov	r2, r3
 8009510:	f000 f95e 	bl	80097d0 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	681b      	ldr	r3, [r3, #0]
 8009518:	2140      	movs	r1, #64	; 0x40
 800951a:	4618      	mov	r0, r3
 800951c:	f000 fa6d 	bl	80099fa <TIM_ITRx_SetConfig>
      break;
 8009520:	e00c      	b.n	800953c <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8009522:	687b      	ldr	r3, [r7, #4]
 8009524:	681a      	ldr	r2, [r3, #0]
 8009526:	683b      	ldr	r3, [r7, #0]
 8009528:	681b      	ldr	r3, [r3, #0]
 800952a:	4619      	mov	r1, r3
 800952c:	4610      	mov	r0, r2
 800952e:	f000 fa64 	bl	80099fa <TIM_ITRx_SetConfig>
      break;
 8009532:	e003      	b.n	800953c <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8009534:	2301      	movs	r3, #1
 8009536:	73fb      	strb	r3, [r7, #15]
      break;
 8009538:	e000      	b.n	800953c <HAL_TIM_ConfigClockSource+0x174>
      break;
 800953a:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 800953c:	687b      	ldr	r3, [r7, #4]
 800953e:	2201      	movs	r2, #1
 8009540:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009544:	687b      	ldr	r3, [r7, #4]
 8009546:	2200      	movs	r2, #0
 8009548:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800954c:	7bfb      	ldrb	r3, [r7, #15]
}
 800954e:	4618      	mov	r0, r3
 8009550:	3710      	adds	r7, #16
 8009552:	46bd      	mov	sp, r7
 8009554:	bd80      	pop	{r7, pc}

08009556 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr

0800957e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800957e:	b480      	push	{r7}
 8009580:	b083      	sub	sp, #12
 8009582:	af00      	add	r7, sp, #0
 8009584:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8009586:	bf00      	nop
 8009588:	370c      	adds	r7, #12
 800958a:	46bd      	mov	sp, r7
 800958c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009590:	4770      	bx	lr

08009592 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8009592:	b480      	push	{r7}
 8009594:	b083      	sub	sp, #12
 8009596:	af00      	add	r7, sp, #0
 8009598:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800959a:	bf00      	nop
 800959c:	370c      	adds	r7, #12
 800959e:	46bd      	mov	sp, r7
 80095a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80095a4:	4770      	bx	lr
	...

080095a8 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80095a8:	b480      	push	{r7}
 80095aa:	b085      	sub	sp, #20
 80095ac:	af00      	add	r7, sp, #0
 80095ae:	6078      	str	r0, [r7, #4]
 80095b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80095b2:	687b      	ldr	r3, [r7, #4]
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a40      	ldr	r2, [pc, #256]	; (80096bc <TIM_Base_SetConfig+0x114>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d013      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095c0:	687b      	ldr	r3, [r7, #4]
 80095c2:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095c6:	d00f      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095c8:	687b      	ldr	r3, [r7, #4]
 80095ca:	4a3d      	ldr	r2, [pc, #244]	; (80096c0 <TIM_Base_SetConfig+0x118>)
 80095cc:	4293      	cmp	r3, r2
 80095ce:	d00b      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	4a3c      	ldr	r2, [pc, #240]	; (80096c4 <TIM_Base_SetConfig+0x11c>)
 80095d4:	4293      	cmp	r3, r2
 80095d6:	d007      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095d8:	687b      	ldr	r3, [r7, #4]
 80095da:	4a3b      	ldr	r2, [pc, #236]	; (80096c8 <TIM_Base_SetConfig+0x120>)
 80095dc:	4293      	cmp	r3, r2
 80095de:	d003      	beq.n	80095e8 <TIM_Base_SetConfig+0x40>
 80095e0:	687b      	ldr	r3, [r7, #4]
 80095e2:	4a3a      	ldr	r2, [pc, #232]	; (80096cc <TIM_Base_SetConfig+0x124>)
 80095e4:	4293      	cmp	r3, r2
 80095e6:	d108      	bne.n	80095fa <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095e8:	68fb      	ldr	r3, [r7, #12]
 80095ea:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095ee:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095f0:	683b      	ldr	r3, [r7, #0]
 80095f2:	685b      	ldr	r3, [r3, #4]
 80095f4:	68fa      	ldr	r2, [r7, #12]
 80095f6:	4313      	orrs	r3, r2
 80095f8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a2f      	ldr	r2, [pc, #188]	; (80096bc <TIM_Base_SetConfig+0x114>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d02b      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009608:	d027      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a2c      	ldr	r2, [pc, #176]	; (80096c0 <TIM_Base_SetConfig+0x118>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d023      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a2b      	ldr	r2, [pc, #172]	; (80096c4 <TIM_Base_SetConfig+0x11c>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d01f      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a2a      	ldr	r2, [pc, #168]	; (80096c8 <TIM_Base_SetConfig+0x120>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d01b      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a29      	ldr	r2, [pc, #164]	; (80096cc <TIM_Base_SetConfig+0x124>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d017      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a28      	ldr	r2, [pc, #160]	; (80096d0 <TIM_Base_SetConfig+0x128>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d013      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009632:	687b      	ldr	r3, [r7, #4]
 8009634:	4a27      	ldr	r2, [pc, #156]	; (80096d4 <TIM_Base_SetConfig+0x12c>)
 8009636:	4293      	cmp	r3, r2
 8009638:	d00f      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800963a:	687b      	ldr	r3, [r7, #4]
 800963c:	4a26      	ldr	r2, [pc, #152]	; (80096d8 <TIM_Base_SetConfig+0x130>)
 800963e:	4293      	cmp	r3, r2
 8009640:	d00b      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009642:	687b      	ldr	r3, [r7, #4]
 8009644:	4a25      	ldr	r2, [pc, #148]	; (80096dc <TIM_Base_SetConfig+0x134>)
 8009646:	4293      	cmp	r3, r2
 8009648:	d007      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 800964a:	687b      	ldr	r3, [r7, #4]
 800964c:	4a24      	ldr	r2, [pc, #144]	; (80096e0 <TIM_Base_SetConfig+0x138>)
 800964e:	4293      	cmp	r3, r2
 8009650:	d003      	beq.n	800965a <TIM_Base_SetConfig+0xb2>
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	4a23      	ldr	r2, [pc, #140]	; (80096e4 <TIM_Base_SetConfig+0x13c>)
 8009656:	4293      	cmp	r3, r2
 8009658:	d108      	bne.n	800966c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800965a:	68fb      	ldr	r3, [r7, #12]
 800965c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009660:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8009662:	683b      	ldr	r3, [r7, #0]
 8009664:	68db      	ldr	r3, [r3, #12]
 8009666:	68fa      	ldr	r2, [r7, #12]
 8009668:	4313      	orrs	r3, r2
 800966a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800966c:	68fb      	ldr	r3, [r7, #12]
 800966e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8009672:	683b      	ldr	r3, [r7, #0]
 8009674:	695b      	ldr	r3, [r3, #20]
 8009676:	4313      	orrs	r3, r2
 8009678:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800967a:	687b      	ldr	r3, [r7, #4]
 800967c:	68fa      	ldr	r2, [r7, #12]
 800967e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009680:	683b      	ldr	r3, [r7, #0]
 8009682:	689a      	ldr	r2, [r3, #8]
 8009684:	687b      	ldr	r3, [r7, #4]
 8009686:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009688:	683b      	ldr	r3, [r7, #0]
 800968a:	681a      	ldr	r2, [r3, #0]
 800968c:	687b      	ldr	r3, [r7, #4]
 800968e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009690:	687b      	ldr	r3, [r7, #4]
 8009692:	4a0a      	ldr	r2, [pc, #40]	; (80096bc <TIM_Base_SetConfig+0x114>)
 8009694:	4293      	cmp	r3, r2
 8009696:	d003      	beq.n	80096a0 <TIM_Base_SetConfig+0xf8>
 8009698:	687b      	ldr	r3, [r7, #4]
 800969a:	4a0c      	ldr	r2, [pc, #48]	; (80096cc <TIM_Base_SetConfig+0x124>)
 800969c:	4293      	cmp	r3, r2
 800969e:	d103      	bne.n	80096a8 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80096a0:	683b      	ldr	r3, [r7, #0]
 80096a2:	691a      	ldr	r2, [r3, #16]
 80096a4:	687b      	ldr	r3, [r7, #4]
 80096a6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80096a8:	687b      	ldr	r3, [r7, #4]
 80096aa:	2201      	movs	r2, #1
 80096ac:	615a      	str	r2, [r3, #20]
}
 80096ae:	bf00      	nop
 80096b0:	3714      	adds	r7, #20
 80096b2:	46bd      	mov	sp, r7
 80096b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096b8:	4770      	bx	lr
 80096ba:	bf00      	nop
 80096bc:	40010000 	.word	0x40010000
 80096c0:	40000400 	.word	0x40000400
 80096c4:	40000800 	.word	0x40000800
 80096c8:	40000c00 	.word	0x40000c00
 80096cc:	40010400 	.word	0x40010400
 80096d0:	40014000 	.word	0x40014000
 80096d4:	40014400 	.word	0x40014400
 80096d8:	40014800 	.word	0x40014800
 80096dc:	40001800 	.word	0x40001800
 80096e0:	40001c00 	.word	0x40001c00
 80096e4:	40002000 	.word	0x40002000

080096e8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096e8:	b480      	push	{r7}
 80096ea:	b087      	sub	sp, #28
 80096ec:	af00      	add	r7, sp, #0
 80096ee:	60f8      	str	r0, [r7, #12]
 80096f0:	60b9      	str	r1, [r7, #8]
 80096f2:	607a      	str	r2, [r7, #4]
 80096f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	6a1b      	ldr	r3, [r3, #32]
 80096fa:	f023 0201 	bic.w	r2, r3, #1
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009702:	68fb      	ldr	r3, [r7, #12]
 8009704:	699b      	ldr	r3, [r3, #24]
 8009706:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009708:	68fb      	ldr	r3, [r7, #12]
 800970a:	6a1b      	ldr	r3, [r3, #32]
 800970c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4a28      	ldr	r2, [pc, #160]	; (80097b4 <TIM_TI1_SetConfig+0xcc>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d01b      	beq.n	800974e <TIM_TI1_SetConfig+0x66>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800971c:	d017      	beq.n	800974e <TIM_TI1_SetConfig+0x66>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4a25      	ldr	r2, [pc, #148]	; (80097b8 <TIM_TI1_SetConfig+0xd0>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d013      	beq.n	800974e <TIM_TI1_SetConfig+0x66>
 8009726:	68fb      	ldr	r3, [r7, #12]
 8009728:	4a24      	ldr	r2, [pc, #144]	; (80097bc <TIM_TI1_SetConfig+0xd4>)
 800972a:	4293      	cmp	r3, r2
 800972c:	d00f      	beq.n	800974e <TIM_TI1_SetConfig+0x66>
 800972e:	68fb      	ldr	r3, [r7, #12]
 8009730:	4a23      	ldr	r2, [pc, #140]	; (80097c0 <TIM_TI1_SetConfig+0xd8>)
 8009732:	4293      	cmp	r3, r2
 8009734:	d00b      	beq.n	800974e <TIM_TI1_SetConfig+0x66>
 8009736:	68fb      	ldr	r3, [r7, #12]
 8009738:	4a22      	ldr	r2, [pc, #136]	; (80097c4 <TIM_TI1_SetConfig+0xdc>)
 800973a:	4293      	cmp	r3, r2
 800973c:	d007      	beq.n	800974e <TIM_TI1_SetConfig+0x66>
 800973e:	68fb      	ldr	r3, [r7, #12]
 8009740:	4a21      	ldr	r2, [pc, #132]	; (80097c8 <TIM_TI1_SetConfig+0xe0>)
 8009742:	4293      	cmp	r3, r2
 8009744:	d003      	beq.n	800974e <TIM_TI1_SetConfig+0x66>
 8009746:	68fb      	ldr	r3, [r7, #12]
 8009748:	4a20      	ldr	r2, [pc, #128]	; (80097cc <TIM_TI1_SetConfig+0xe4>)
 800974a:	4293      	cmp	r3, r2
 800974c:	d101      	bne.n	8009752 <TIM_TI1_SetConfig+0x6a>
 800974e:	2301      	movs	r3, #1
 8009750:	e000      	b.n	8009754 <TIM_TI1_SetConfig+0x6c>
 8009752:	2300      	movs	r3, #0
 8009754:	2b00      	cmp	r3, #0
 8009756:	d008      	beq.n	800976a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009758:	697b      	ldr	r3, [r7, #20]
 800975a:	f023 0303 	bic.w	r3, r3, #3
 800975e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009760:	697a      	ldr	r2, [r7, #20]
 8009762:	687b      	ldr	r3, [r7, #4]
 8009764:	4313      	orrs	r3, r2
 8009766:	617b      	str	r3, [r7, #20]
 8009768:	e003      	b.n	8009772 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800976a:	697b      	ldr	r3, [r7, #20]
 800976c:	f043 0301 	orr.w	r3, r3, #1
 8009770:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8009772:	697b      	ldr	r3, [r7, #20]
 8009774:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009778:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800977a:	683b      	ldr	r3, [r7, #0]
 800977c:	011b      	lsls	r3, r3, #4
 800977e:	b2db      	uxtb	r3, r3
 8009780:	697a      	ldr	r2, [r7, #20]
 8009782:	4313      	orrs	r3, r2
 8009784:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009786:	693b      	ldr	r3, [r7, #16]
 8009788:	f023 030a 	bic.w	r3, r3, #10
 800978c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800978e:	68bb      	ldr	r3, [r7, #8]
 8009790:	f003 030a 	and.w	r3, r3, #10
 8009794:	693a      	ldr	r2, [r7, #16]
 8009796:	4313      	orrs	r3, r2
 8009798:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800979a:	68fb      	ldr	r3, [r7, #12]
 800979c:	697a      	ldr	r2, [r7, #20]
 800979e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097a0:	68fb      	ldr	r3, [r7, #12]
 80097a2:	693a      	ldr	r2, [r7, #16]
 80097a4:	621a      	str	r2, [r3, #32]
}
 80097a6:	bf00      	nop
 80097a8:	371c      	adds	r7, #28
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr
 80097b2:	bf00      	nop
 80097b4:	40010000 	.word	0x40010000
 80097b8:	40000400 	.word	0x40000400
 80097bc:	40000800 	.word	0x40000800
 80097c0:	40000c00 	.word	0x40000c00
 80097c4:	40010400 	.word	0x40010400
 80097c8:	40014000 	.word	0x40014000
 80097cc:	40001800 	.word	0x40001800

080097d0 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097d0:	b480      	push	{r7}
 80097d2:	b087      	sub	sp, #28
 80097d4:	af00      	add	r7, sp, #0
 80097d6:	60f8      	str	r0, [r7, #12]
 80097d8:	60b9      	str	r1, [r7, #8]
 80097da:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097dc:	68fb      	ldr	r3, [r7, #12]
 80097de:	6a1b      	ldr	r3, [r3, #32]
 80097e0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097e2:	68fb      	ldr	r3, [r7, #12]
 80097e4:	6a1b      	ldr	r3, [r3, #32]
 80097e6:	f023 0201 	bic.w	r2, r3, #1
 80097ea:	68fb      	ldr	r3, [r7, #12]
 80097ec:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	699b      	ldr	r3, [r3, #24]
 80097f2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097f4:	693b      	ldr	r3, [r7, #16]
 80097f6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097fa:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097fc:	687b      	ldr	r3, [r7, #4]
 80097fe:	011b      	lsls	r3, r3, #4
 8009800:	693a      	ldr	r2, [r7, #16]
 8009802:	4313      	orrs	r3, r2
 8009804:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8009806:	697b      	ldr	r3, [r7, #20]
 8009808:	f023 030a 	bic.w	r3, r3, #10
 800980c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800980e:	697a      	ldr	r2, [r7, #20]
 8009810:	68bb      	ldr	r3, [r7, #8]
 8009812:	4313      	orrs	r3, r2
 8009814:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009816:	68fb      	ldr	r3, [r7, #12]
 8009818:	693a      	ldr	r2, [r7, #16]
 800981a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	697a      	ldr	r2, [r7, #20]
 8009820:	621a      	str	r2, [r3, #32]
}
 8009822:	bf00      	nop
 8009824:	371c      	adds	r7, #28
 8009826:	46bd      	mov	sp, r7
 8009828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800982c:	4770      	bx	lr

0800982e <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 800982e:	b480      	push	{r7}
 8009830:	b087      	sub	sp, #28
 8009832:	af00      	add	r7, sp, #0
 8009834:	60f8      	str	r0, [r7, #12]
 8009836:	60b9      	str	r1, [r7, #8]
 8009838:	607a      	str	r2, [r7, #4]
 800983a:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800983c:	68fb      	ldr	r3, [r7, #12]
 800983e:	6a1b      	ldr	r3, [r3, #32]
 8009840:	f023 0210 	bic.w	r2, r3, #16
 8009844:	68fb      	ldr	r3, [r7, #12]
 8009846:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009848:	68fb      	ldr	r3, [r7, #12]
 800984a:	699b      	ldr	r3, [r3, #24]
 800984c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800984e:	68fb      	ldr	r3, [r7, #12]
 8009850:	6a1b      	ldr	r3, [r3, #32]
 8009852:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8009854:	697b      	ldr	r3, [r7, #20]
 8009856:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800985a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800985c:	687b      	ldr	r3, [r7, #4]
 800985e:	021b      	lsls	r3, r3, #8
 8009860:	697a      	ldr	r2, [r7, #20]
 8009862:	4313      	orrs	r3, r2
 8009864:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8009866:	697b      	ldr	r3, [r7, #20]
 8009868:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800986c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800986e:	683b      	ldr	r3, [r7, #0]
 8009870:	031b      	lsls	r3, r3, #12
 8009872:	b29b      	uxth	r3, r3
 8009874:	697a      	ldr	r2, [r7, #20]
 8009876:	4313      	orrs	r3, r2
 8009878:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800987a:	693b      	ldr	r3, [r7, #16]
 800987c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009880:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8009882:	68bb      	ldr	r3, [r7, #8]
 8009884:	011b      	lsls	r3, r3, #4
 8009886:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800988a:	693a      	ldr	r2, [r7, #16]
 800988c:	4313      	orrs	r3, r2
 800988e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009890:	68fb      	ldr	r3, [r7, #12]
 8009892:	697a      	ldr	r2, [r7, #20]
 8009894:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009896:	68fb      	ldr	r3, [r7, #12]
 8009898:	693a      	ldr	r2, [r7, #16]
 800989a:	621a      	str	r2, [r3, #32]
}
 800989c:	bf00      	nop
 800989e:	371c      	adds	r7, #28
 80098a0:	46bd      	mov	sp, r7
 80098a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098a6:	4770      	bx	lr

080098a8 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80098a8:	b480      	push	{r7}
 80098aa:	b087      	sub	sp, #28
 80098ac:	af00      	add	r7, sp, #0
 80098ae:	60f8      	str	r0, [r7, #12]
 80098b0:	60b9      	str	r1, [r7, #8]
 80098b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80098b4:	68fb      	ldr	r3, [r7, #12]
 80098b6:	6a1b      	ldr	r3, [r3, #32]
 80098b8:	f023 0210 	bic.w	r2, r3, #16
 80098bc:	68fb      	ldr	r3, [r7, #12]
 80098be:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80098c0:	68fb      	ldr	r3, [r7, #12]
 80098c2:	699b      	ldr	r3, [r3, #24]
 80098c4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80098c6:	68fb      	ldr	r3, [r7, #12]
 80098c8:	6a1b      	ldr	r3, [r3, #32]
 80098ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098cc:	697b      	ldr	r3, [r7, #20]
 80098ce:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098d2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098d4:	687b      	ldr	r3, [r7, #4]
 80098d6:	031b      	lsls	r3, r3, #12
 80098d8:	697a      	ldr	r2, [r7, #20]
 80098da:	4313      	orrs	r3, r2
 80098dc:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098de:	693b      	ldr	r3, [r7, #16]
 80098e0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098e4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098e6:	68bb      	ldr	r3, [r7, #8]
 80098e8:	011b      	lsls	r3, r3, #4
 80098ea:	693a      	ldr	r2, [r7, #16]
 80098ec:	4313      	orrs	r3, r2
 80098ee:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098f0:	68fb      	ldr	r3, [r7, #12]
 80098f2:	697a      	ldr	r2, [r7, #20]
 80098f4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	693a      	ldr	r2, [r7, #16]
 80098fa:	621a      	str	r2, [r3, #32]
}
 80098fc:	bf00      	nop
 80098fe:	371c      	adds	r7, #28
 8009900:	46bd      	mov	sp, r7
 8009902:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009906:	4770      	bx	lr

08009908 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009908:	b480      	push	{r7}
 800990a:	b087      	sub	sp, #28
 800990c:	af00      	add	r7, sp, #0
 800990e:	60f8      	str	r0, [r7, #12]
 8009910:	60b9      	str	r1, [r7, #8]
 8009912:	607a      	str	r2, [r7, #4]
 8009914:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	6a1b      	ldr	r3, [r3, #32]
 800991a:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 800991e:	68fb      	ldr	r3, [r7, #12]
 8009920:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009922:	68fb      	ldr	r3, [r7, #12]
 8009924:	69db      	ldr	r3, [r3, #28]
 8009926:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009928:	68fb      	ldr	r3, [r7, #12]
 800992a:	6a1b      	ldr	r3, [r3, #32]
 800992c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 800992e:	697b      	ldr	r3, [r7, #20]
 8009930:	f023 0303 	bic.w	r3, r3, #3
 8009934:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8009936:	697a      	ldr	r2, [r7, #20]
 8009938:	687b      	ldr	r3, [r7, #4]
 800993a:	4313      	orrs	r3, r2
 800993c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 800993e:	697b      	ldr	r3, [r7, #20]
 8009940:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009944:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8009946:	683b      	ldr	r3, [r7, #0]
 8009948:	011b      	lsls	r3, r3, #4
 800994a:	b2db      	uxtb	r3, r3
 800994c:	697a      	ldr	r2, [r7, #20]
 800994e:	4313      	orrs	r3, r2
 8009950:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8009952:	693b      	ldr	r3, [r7, #16]
 8009954:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009958:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800995a:	68bb      	ldr	r3, [r7, #8]
 800995c:	021b      	lsls	r3, r3, #8
 800995e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8009962:	693a      	ldr	r2, [r7, #16]
 8009964:	4313      	orrs	r3, r2
 8009966:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009968:	68fb      	ldr	r3, [r7, #12]
 800996a:	697a      	ldr	r2, [r7, #20]
 800996c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	693a      	ldr	r2, [r7, #16]
 8009972:	621a      	str	r2, [r3, #32]
}
 8009974:	bf00      	nop
 8009976:	371c      	adds	r7, #28
 8009978:	46bd      	mov	sp, r7
 800997a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800997e:	4770      	bx	lr

08009980 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009980:	b480      	push	{r7}
 8009982:	b087      	sub	sp, #28
 8009984:	af00      	add	r7, sp, #0
 8009986:	60f8      	str	r0, [r7, #12]
 8009988:	60b9      	str	r1, [r7, #8]
 800998a:	607a      	str	r2, [r7, #4]
 800998c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800998e:	68fb      	ldr	r3, [r7, #12]
 8009990:	6a1b      	ldr	r3, [r3, #32]
 8009992:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8009996:	68fb      	ldr	r3, [r7, #12]
 8009998:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	69db      	ldr	r3, [r3, #28]
 800999e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80099a0:	68fb      	ldr	r3, [r7, #12]
 80099a2:	6a1b      	ldr	r3, [r3, #32]
 80099a4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 80099a6:	697b      	ldr	r3, [r7, #20]
 80099a8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80099ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 80099ae:	687b      	ldr	r3, [r7, #4]
 80099b0:	021b      	lsls	r3, r3, #8
 80099b2:	697a      	ldr	r2, [r7, #20]
 80099b4:	4313      	orrs	r3, r2
 80099b6:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 80099b8:	697b      	ldr	r3, [r7, #20]
 80099ba:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80099be:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 80099c0:	683b      	ldr	r3, [r7, #0]
 80099c2:	031b      	lsls	r3, r3, #12
 80099c4:	b29b      	uxth	r3, r3
 80099c6:	697a      	ldr	r2, [r7, #20]
 80099c8:	4313      	orrs	r3, r2
 80099ca:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80099cc:	693b      	ldr	r3, [r7, #16]
 80099ce:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80099d2:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80099d4:	68bb      	ldr	r3, [r7, #8]
 80099d6:	031b      	lsls	r3, r3, #12
 80099d8:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80099dc:	693a      	ldr	r2, [r7, #16]
 80099de:	4313      	orrs	r3, r2
 80099e0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	697a      	ldr	r2, [r7, #20]
 80099e6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80099e8:	68fb      	ldr	r3, [r7, #12]
 80099ea:	693a      	ldr	r2, [r7, #16]
 80099ec:	621a      	str	r2, [r3, #32]
}
 80099ee:	bf00      	nop
 80099f0:	371c      	adds	r7, #28
 80099f2:	46bd      	mov	sp, r7
 80099f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099f8:	4770      	bx	lr

080099fa <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099fa:	b480      	push	{r7}
 80099fc:	b085      	sub	sp, #20
 80099fe:	af00      	add	r7, sp, #0
 8009a00:	6078      	str	r0, [r7, #4]
 8009a02:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8009a04:	687b      	ldr	r3, [r7, #4]
 8009a06:	689b      	ldr	r3, [r3, #8]
 8009a08:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8009a0a:	68fb      	ldr	r3, [r7, #12]
 8009a0c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a10:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8009a12:	683a      	ldr	r2, [r7, #0]
 8009a14:	68fb      	ldr	r3, [r7, #12]
 8009a16:	4313      	orrs	r3, r2
 8009a18:	f043 0307 	orr.w	r3, r3, #7
 8009a1c:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a1e:	687b      	ldr	r3, [r7, #4]
 8009a20:	68fa      	ldr	r2, [r7, #12]
 8009a22:	609a      	str	r2, [r3, #8]
}
 8009a24:	bf00      	nop
 8009a26:	3714      	adds	r7, #20
 8009a28:	46bd      	mov	sp, r7
 8009a2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a2e:	4770      	bx	lr

08009a30 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a30:	b480      	push	{r7}
 8009a32:	b087      	sub	sp, #28
 8009a34:	af00      	add	r7, sp, #0
 8009a36:	60f8      	str	r0, [r7, #12]
 8009a38:	60b9      	str	r1, [r7, #8]
 8009a3a:	607a      	str	r2, [r7, #4]
 8009a3c:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	689b      	ldr	r3, [r3, #8]
 8009a42:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a44:	697b      	ldr	r3, [r7, #20]
 8009a46:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a4a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a4c:	683b      	ldr	r3, [r7, #0]
 8009a4e:	021a      	lsls	r2, r3, #8
 8009a50:	687b      	ldr	r3, [r7, #4]
 8009a52:	431a      	orrs	r2, r3
 8009a54:	68bb      	ldr	r3, [r7, #8]
 8009a56:	4313      	orrs	r3, r2
 8009a58:	697a      	ldr	r2, [r7, #20]
 8009a5a:	4313      	orrs	r3, r2
 8009a5c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a5e:	68fb      	ldr	r3, [r7, #12]
 8009a60:	697a      	ldr	r2, [r7, #20]
 8009a62:	609a      	str	r2, [r3, #8]
}
 8009a64:	bf00      	nop
 8009a66:	371c      	adds	r7, #28
 8009a68:	46bd      	mov	sp, r7
 8009a6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a6e:	4770      	bx	lr

08009a70 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a70:	b480      	push	{r7}
 8009a72:	b085      	sub	sp, #20
 8009a74:	af00      	add	r7, sp, #0
 8009a76:	6078      	str	r0, [r7, #4]
 8009a78:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a7a:	687b      	ldr	r3, [r7, #4]
 8009a7c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a80:	2b01      	cmp	r3, #1
 8009a82:	d101      	bne.n	8009a88 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a84:	2302      	movs	r3, #2
 8009a86:	e05a      	b.n	8009b3e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a88:	687b      	ldr	r3, [r7, #4]
 8009a8a:	2201      	movs	r2, #1
 8009a8c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a90:	687b      	ldr	r3, [r7, #4]
 8009a92:	2202      	movs	r2, #2
 8009a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a98:	687b      	ldr	r3, [r7, #4]
 8009a9a:	681b      	ldr	r3, [r3, #0]
 8009a9c:	685b      	ldr	r3, [r3, #4]
 8009a9e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009aa0:	687b      	ldr	r3, [r7, #4]
 8009aa2:	681b      	ldr	r3, [r3, #0]
 8009aa4:	689b      	ldr	r3, [r3, #8]
 8009aa6:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009aa8:	68fb      	ldr	r3, [r7, #12]
 8009aaa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009aae:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009ab0:	683b      	ldr	r3, [r7, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	68fa      	ldr	r2, [r7, #12]
 8009ab6:	4313      	orrs	r3, r2
 8009ab8:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009aba:	687b      	ldr	r3, [r7, #4]
 8009abc:	681b      	ldr	r3, [r3, #0]
 8009abe:	68fa      	ldr	r2, [r7, #12]
 8009ac0:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a21      	ldr	r2, [pc, #132]	; (8009b4c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d022      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009ad4:	d01d      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a1d      	ldr	r2, [pc, #116]	; (8009b50 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d018      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a1b      	ldr	r2, [pc, #108]	; (8009b54 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d013      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aea:	687b      	ldr	r3, [r7, #4]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	4a1a      	ldr	r2, [pc, #104]	; (8009b58 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009af0:	4293      	cmp	r3, r2
 8009af2:	d00e      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009af4:	687b      	ldr	r3, [r7, #4]
 8009af6:	681b      	ldr	r3, [r3, #0]
 8009af8:	4a18      	ldr	r2, [pc, #96]	; (8009b5c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009afa:	4293      	cmp	r3, r2
 8009afc:	d009      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009afe:	687b      	ldr	r3, [r7, #4]
 8009b00:	681b      	ldr	r3, [r3, #0]
 8009b02:	4a17      	ldr	r2, [pc, #92]	; (8009b60 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009b04:	4293      	cmp	r3, r2
 8009b06:	d004      	beq.n	8009b12 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009b08:	687b      	ldr	r3, [r7, #4]
 8009b0a:	681b      	ldr	r3, [r3, #0]
 8009b0c:	4a15      	ldr	r2, [pc, #84]	; (8009b64 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009b0e:	4293      	cmp	r3, r2
 8009b10:	d10c      	bne.n	8009b2c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009b12:	68bb      	ldr	r3, [r7, #8]
 8009b14:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009b18:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009b1a:	683b      	ldr	r3, [r7, #0]
 8009b1c:	685b      	ldr	r3, [r3, #4]
 8009b1e:	68ba      	ldr	r2, [r7, #8]
 8009b20:	4313      	orrs	r3, r2
 8009b22:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009b24:	687b      	ldr	r3, [r7, #4]
 8009b26:	681b      	ldr	r3, [r3, #0]
 8009b28:	68ba      	ldr	r2, [r7, #8]
 8009b2a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b2c:	687b      	ldr	r3, [r7, #4]
 8009b2e:	2201      	movs	r2, #1
 8009b30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b34:	687b      	ldr	r3, [r7, #4]
 8009b36:	2200      	movs	r2, #0
 8009b38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b3c:	2300      	movs	r3, #0
}
 8009b3e:	4618      	mov	r0, r3
 8009b40:	3714      	adds	r7, #20
 8009b42:	46bd      	mov	sp, r7
 8009b44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b48:	4770      	bx	lr
 8009b4a:	bf00      	nop
 8009b4c:	40010000 	.word	0x40010000
 8009b50:	40000400 	.word	0x40000400
 8009b54:	40000800 	.word	0x40000800
 8009b58:	40000c00 	.word	0x40000c00
 8009b5c:	40010400 	.word	0x40010400
 8009b60:	40014000 	.word	0x40014000
 8009b64:	40001800 	.word	0x40001800

08009b68 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b68:	b480      	push	{r7}
 8009b6a:	b083      	sub	sp, #12
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b70:	bf00      	nop
 8009b72:	370c      	adds	r7, #12
 8009b74:	46bd      	mov	sp, r7
 8009b76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b7a:	4770      	bx	lr

08009b7c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b7c:	b480      	push	{r7}
 8009b7e:	b083      	sub	sp, #12
 8009b80:	af00      	add	r7, sp, #0
 8009b82:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b84:	bf00      	nop
 8009b86:	370c      	adds	r7, #12
 8009b88:	46bd      	mov	sp, r7
 8009b8a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b8e:	4770      	bx	lr

08009b90 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b90:	b580      	push	{r7, lr}
 8009b92:	b082      	sub	sp, #8
 8009b94:	af00      	add	r7, sp, #0
 8009b96:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b98:	687b      	ldr	r3, [r7, #4]
 8009b9a:	2b00      	cmp	r3, #0
 8009b9c:	d101      	bne.n	8009ba2 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	e03f      	b.n	8009c22 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009ba8:	b2db      	uxtb	r3, r3
 8009baa:	2b00      	cmp	r3, #0
 8009bac:	d106      	bne.n	8009bbc <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009bae:	687b      	ldr	r3, [r7, #4]
 8009bb0:	2200      	movs	r2, #0
 8009bb2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009bb6:	6878      	ldr	r0, [r7, #4]
 8009bb8:	f7fd fbaa 	bl	8007310 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009bbc:	687b      	ldr	r3, [r7, #4]
 8009bbe:	2224      	movs	r2, #36	; 0x24
 8009bc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009bc4:	687b      	ldr	r3, [r7, #4]
 8009bc6:	681b      	ldr	r3, [r3, #0]
 8009bc8:	68da      	ldr	r2, [r3, #12]
 8009bca:	687b      	ldr	r3, [r7, #4]
 8009bcc:	681b      	ldr	r3, [r3, #0]
 8009bce:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009bd2:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bd4:	6878      	ldr	r0, [r7, #4]
 8009bd6:	f000 fddf 	bl	800a798 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bda:	687b      	ldr	r3, [r7, #4]
 8009bdc:	681b      	ldr	r3, [r3, #0]
 8009bde:	691a      	ldr	r2, [r3, #16]
 8009be0:	687b      	ldr	r3, [r7, #4]
 8009be2:	681b      	ldr	r3, [r3, #0]
 8009be4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009be8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bea:	687b      	ldr	r3, [r7, #4]
 8009bec:	681b      	ldr	r3, [r3, #0]
 8009bee:	695a      	ldr	r2, [r3, #20]
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	681b      	ldr	r3, [r3, #0]
 8009bf4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bf8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009bfa:	687b      	ldr	r3, [r7, #4]
 8009bfc:	681b      	ldr	r3, [r3, #0]
 8009bfe:	68da      	ldr	r2, [r3, #12]
 8009c00:	687b      	ldr	r3, [r7, #4]
 8009c02:	681b      	ldr	r3, [r3, #0]
 8009c04:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009c08:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c0a:	687b      	ldr	r3, [r7, #4]
 8009c0c:	2200      	movs	r2, #0
 8009c0e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009c10:	687b      	ldr	r3, [r7, #4]
 8009c12:	2220      	movs	r2, #32
 8009c14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009c18:	687b      	ldr	r3, [r7, #4]
 8009c1a:	2220      	movs	r2, #32
 8009c1c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009c20:	2300      	movs	r3, #0
}
 8009c22:	4618      	mov	r0, r3
 8009c24:	3708      	adds	r7, #8
 8009c26:	46bd      	mov	sp, r7
 8009c28:	bd80      	pop	{r7, pc}

08009c2a <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c2a:	b580      	push	{r7, lr}
 8009c2c:	b08a      	sub	sp, #40	; 0x28
 8009c2e:	af02      	add	r7, sp, #8
 8009c30:	60f8      	str	r0, [r7, #12]
 8009c32:	60b9      	str	r1, [r7, #8]
 8009c34:	603b      	str	r3, [r7, #0]
 8009c36:	4613      	mov	r3, r2
 8009c38:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c3a:	2300      	movs	r3, #0
 8009c3c:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c3e:	68fb      	ldr	r3, [r7, #12]
 8009c40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c44:	b2db      	uxtb	r3, r3
 8009c46:	2b20      	cmp	r3, #32
 8009c48:	d17c      	bne.n	8009d44 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c4a:	68bb      	ldr	r3, [r7, #8]
 8009c4c:	2b00      	cmp	r3, #0
 8009c4e:	d002      	beq.n	8009c56 <HAL_UART_Transmit+0x2c>
 8009c50:	88fb      	ldrh	r3, [r7, #6]
 8009c52:	2b00      	cmp	r3, #0
 8009c54:	d101      	bne.n	8009c5a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c56:	2301      	movs	r3, #1
 8009c58:	e075      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c5a:	68fb      	ldr	r3, [r7, #12]
 8009c5c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c60:	2b01      	cmp	r3, #1
 8009c62:	d101      	bne.n	8009c68 <HAL_UART_Transmit+0x3e>
 8009c64:	2302      	movs	r3, #2
 8009c66:	e06e      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	2201      	movs	r2, #1
 8009c6c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c70:	68fb      	ldr	r3, [r7, #12]
 8009c72:	2200      	movs	r2, #0
 8009c74:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c76:	68fb      	ldr	r3, [r7, #12]
 8009c78:	2221      	movs	r2, #33	; 0x21
 8009c7a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c7e:	f7fd fda5 	bl	80077cc <HAL_GetTick>
 8009c82:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c84:	68fb      	ldr	r3, [r7, #12]
 8009c86:	88fa      	ldrh	r2, [r7, #6]
 8009c88:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c8a:	68fb      	ldr	r3, [r7, #12]
 8009c8c:	88fa      	ldrh	r2, [r7, #6]
 8009c8e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c90:	68fb      	ldr	r3, [r7, #12]
 8009c92:	689b      	ldr	r3, [r3, #8]
 8009c94:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c98:	d108      	bne.n	8009cac <HAL_UART_Transmit+0x82>
 8009c9a:	68fb      	ldr	r3, [r7, #12]
 8009c9c:	691b      	ldr	r3, [r3, #16]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	d104      	bne.n	8009cac <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009ca2:	2300      	movs	r3, #0
 8009ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009ca6:	68bb      	ldr	r3, [r7, #8]
 8009ca8:	61bb      	str	r3, [r7, #24]
 8009caa:	e003      	b.n	8009cb4 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009cac:	68bb      	ldr	r3, [r7, #8]
 8009cae:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009cb0:	2300      	movs	r3, #0
 8009cb2:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009cb4:	68fb      	ldr	r3, [r7, #12]
 8009cb6:	2200      	movs	r2, #0
 8009cb8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009cbc:	e02a      	b.n	8009d14 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009cbe:	683b      	ldr	r3, [r7, #0]
 8009cc0:	9300      	str	r3, [sp, #0]
 8009cc2:	697b      	ldr	r3, [r7, #20]
 8009cc4:	2200      	movs	r2, #0
 8009cc6:	2180      	movs	r1, #128	; 0x80
 8009cc8:	68f8      	ldr	r0, [r7, #12]
 8009cca:	f000 fb1f 	bl	800a30c <UART_WaitOnFlagUntilTimeout>
 8009cce:	4603      	mov	r3, r0
 8009cd0:	2b00      	cmp	r3, #0
 8009cd2:	d001      	beq.n	8009cd8 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009cd4:	2303      	movs	r3, #3
 8009cd6:	e036      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	2b00      	cmp	r3, #0
 8009cdc:	d10b      	bne.n	8009cf6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cde:	69bb      	ldr	r3, [r7, #24]
 8009ce0:	881b      	ldrh	r3, [r3, #0]
 8009ce2:	461a      	mov	r2, r3
 8009ce4:	68fb      	ldr	r3, [r7, #12]
 8009ce6:	681b      	ldr	r3, [r3, #0]
 8009ce8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cec:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cee:	69bb      	ldr	r3, [r7, #24]
 8009cf0:	3302      	adds	r3, #2
 8009cf2:	61bb      	str	r3, [r7, #24]
 8009cf4:	e007      	b.n	8009d06 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cf6:	69fb      	ldr	r3, [r7, #28]
 8009cf8:	781a      	ldrb	r2, [r3, #0]
 8009cfa:	68fb      	ldr	r3, [r7, #12]
 8009cfc:	681b      	ldr	r3, [r3, #0]
 8009cfe:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009d00:	69fb      	ldr	r3, [r7, #28]
 8009d02:	3301      	adds	r3, #1
 8009d04:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009d06:	68fb      	ldr	r3, [r7, #12]
 8009d08:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d0a:	b29b      	uxth	r3, r3
 8009d0c:	3b01      	subs	r3, #1
 8009d0e:	b29a      	uxth	r2, r3
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009d14:	68fb      	ldr	r3, [r7, #12]
 8009d16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009d18:	b29b      	uxth	r3, r3
 8009d1a:	2b00      	cmp	r3, #0
 8009d1c:	d1cf      	bne.n	8009cbe <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009d1e:	683b      	ldr	r3, [r7, #0]
 8009d20:	9300      	str	r3, [sp, #0]
 8009d22:	697b      	ldr	r3, [r7, #20]
 8009d24:	2200      	movs	r2, #0
 8009d26:	2140      	movs	r1, #64	; 0x40
 8009d28:	68f8      	ldr	r0, [r7, #12]
 8009d2a:	f000 faef 	bl	800a30c <UART_WaitOnFlagUntilTimeout>
 8009d2e:	4603      	mov	r3, r0
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d001      	beq.n	8009d38 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d34:	2303      	movs	r3, #3
 8009d36:	e006      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d38:	68fb      	ldr	r3, [r7, #12]
 8009d3a:	2220      	movs	r2, #32
 8009d3c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d40:	2300      	movs	r3, #0
 8009d42:	e000      	b.n	8009d46 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d44:	2302      	movs	r3, #2
  }
}
 8009d46:	4618      	mov	r0, r3
 8009d48:	3720      	adds	r7, #32
 8009d4a:	46bd      	mov	sp, r7
 8009d4c:	bd80      	pop	{r7, pc}

08009d4e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d4e:	b580      	push	{r7, lr}
 8009d50:	b084      	sub	sp, #16
 8009d52:	af00      	add	r7, sp, #0
 8009d54:	60f8      	str	r0, [r7, #12]
 8009d56:	60b9      	str	r1, [r7, #8]
 8009d58:	4613      	mov	r3, r2
 8009d5a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d5c:	68fb      	ldr	r3, [r7, #12]
 8009d5e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d62:	b2db      	uxtb	r3, r3
 8009d64:	2b20      	cmp	r3, #32
 8009d66:	d11d      	bne.n	8009da4 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d68:	68bb      	ldr	r3, [r7, #8]
 8009d6a:	2b00      	cmp	r3, #0
 8009d6c:	d002      	beq.n	8009d74 <HAL_UART_Receive_IT+0x26>
 8009d6e:	88fb      	ldrh	r3, [r7, #6]
 8009d70:	2b00      	cmp	r3, #0
 8009d72:	d101      	bne.n	8009d78 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d74:	2301      	movs	r3, #1
 8009d76:	e016      	b.n	8009da6 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d78:	68fb      	ldr	r3, [r7, #12]
 8009d7a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d7e:	2b01      	cmp	r3, #1
 8009d80:	d101      	bne.n	8009d86 <HAL_UART_Receive_IT+0x38>
 8009d82:	2302      	movs	r3, #2
 8009d84:	e00f      	b.n	8009da6 <HAL_UART_Receive_IT+0x58>
 8009d86:	68fb      	ldr	r3, [r7, #12]
 8009d88:	2201      	movs	r2, #1
 8009d8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d8e:	68fb      	ldr	r3, [r7, #12]
 8009d90:	2200      	movs	r2, #0
 8009d92:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d94:	88fb      	ldrh	r3, [r7, #6]
 8009d96:	461a      	mov	r2, r3
 8009d98:	68b9      	ldr	r1, [r7, #8]
 8009d9a:	68f8      	ldr	r0, [r7, #12]
 8009d9c:	f000 fb24 	bl	800a3e8 <UART_Start_Receive_IT>
 8009da0:	4603      	mov	r3, r0
 8009da2:	e000      	b.n	8009da6 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009da4:	2302      	movs	r3, #2
  }
}
 8009da6:	4618      	mov	r0, r3
 8009da8:	3710      	adds	r7, #16
 8009daa:	46bd      	mov	sp, r7
 8009dac:	bd80      	pop	{r7, pc}
	...

08009db0 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009db0:	b580      	push	{r7, lr}
 8009db2:	b0ba      	sub	sp, #232	; 0xe8
 8009db4:	af00      	add	r7, sp, #0
 8009db6:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009db8:	687b      	ldr	r3, [r7, #4]
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	681b      	ldr	r3, [r3, #0]
 8009dbe:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009dc2:	687b      	ldr	r3, [r7, #4]
 8009dc4:	681b      	ldr	r3, [r3, #0]
 8009dc6:	68db      	ldr	r3, [r3, #12]
 8009dc8:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009dcc:	687b      	ldr	r3, [r7, #4]
 8009dce:	681b      	ldr	r3, [r3, #0]
 8009dd0:	695b      	ldr	r3, [r3, #20]
 8009dd2:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009dd6:	2300      	movs	r3, #0
 8009dd8:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009de6:	f003 030f 	and.w	r3, r3, #15
 8009dea:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	d10f      	bne.n	8009e16 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009df6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dfa:	f003 0320 	and.w	r3, r3, #32
 8009dfe:	2b00      	cmp	r3, #0
 8009e00:	d009      	beq.n	8009e16 <HAL_UART_IRQHandler+0x66>
 8009e02:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e06:	f003 0320 	and.w	r3, r3, #32
 8009e0a:	2b00      	cmp	r3, #0
 8009e0c:	d003      	beq.n	8009e16 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009e0e:	6878      	ldr	r0, [r7, #4]
 8009e10:	f000 fc07 	bl	800a622 <UART_Receive_IT>
      return;
 8009e14:	e256      	b.n	800a2c4 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009e16:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	f000 80de 	beq.w	8009fdc <HAL_UART_IRQHandler+0x22c>
 8009e20:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e24:	f003 0301 	and.w	r3, r3, #1
 8009e28:	2b00      	cmp	r3, #0
 8009e2a:	d106      	bne.n	8009e3a <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e2c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e30:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e34:	2b00      	cmp	r3, #0
 8009e36:	f000 80d1 	beq.w	8009fdc <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3e:	f003 0301 	and.w	r3, r3, #1
 8009e42:	2b00      	cmp	r3, #0
 8009e44:	d00b      	beq.n	8009e5e <HAL_UART_IRQHandler+0xae>
 8009e46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e4a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e4e:	2b00      	cmp	r3, #0
 8009e50:	d005      	beq.n	8009e5e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e56:	f043 0201 	orr.w	r2, r3, #1
 8009e5a:	687b      	ldr	r3, [r7, #4]
 8009e5c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e62:	f003 0304 	and.w	r3, r3, #4
 8009e66:	2b00      	cmp	r3, #0
 8009e68:	d00b      	beq.n	8009e82 <HAL_UART_IRQHandler+0xd2>
 8009e6a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e6e:	f003 0301 	and.w	r3, r3, #1
 8009e72:	2b00      	cmp	r3, #0
 8009e74:	d005      	beq.n	8009e82 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e76:	687b      	ldr	r3, [r7, #4]
 8009e78:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e7a:	f043 0202 	orr.w	r2, r3, #2
 8009e7e:	687b      	ldr	r3, [r7, #4]
 8009e80:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e82:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e86:	f003 0302 	and.w	r3, r3, #2
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	d00b      	beq.n	8009ea6 <HAL_UART_IRQHandler+0xf6>
 8009e8e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e92:	f003 0301 	and.w	r3, r3, #1
 8009e96:	2b00      	cmp	r3, #0
 8009e98:	d005      	beq.n	8009ea6 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e9a:	687b      	ldr	r3, [r7, #4]
 8009e9c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e9e:	f043 0204 	orr.w	r2, r3, #4
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009eaa:	f003 0308 	and.w	r3, r3, #8
 8009eae:	2b00      	cmp	r3, #0
 8009eb0:	d011      	beq.n	8009ed6 <HAL_UART_IRQHandler+0x126>
 8009eb2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009eb6:	f003 0320 	and.w	r3, r3, #32
 8009eba:	2b00      	cmp	r3, #0
 8009ebc:	d105      	bne.n	8009eca <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009ebe:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009ec2:	f003 0301 	and.w	r3, r3, #1
 8009ec6:	2b00      	cmp	r3, #0
 8009ec8:	d005      	beq.n	8009ed6 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009eca:	687b      	ldr	r3, [r7, #4]
 8009ecc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ece:	f043 0208 	orr.w	r2, r3, #8
 8009ed2:	687b      	ldr	r3, [r7, #4]
 8009ed4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	f000 81ed 	beq.w	800a2ba <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009ee0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ee4:	f003 0320 	and.w	r3, r3, #32
 8009ee8:	2b00      	cmp	r3, #0
 8009eea:	d008      	beq.n	8009efe <HAL_UART_IRQHandler+0x14e>
 8009eec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ef0:	f003 0320 	and.w	r3, r3, #32
 8009ef4:	2b00      	cmp	r3, #0
 8009ef6:	d002      	beq.n	8009efe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ef8:	6878      	ldr	r0, [r7, #4]
 8009efa:	f000 fb92 	bl	800a622 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009efe:	687b      	ldr	r3, [r7, #4]
 8009f00:	681b      	ldr	r3, [r3, #0]
 8009f02:	695b      	ldr	r3, [r3, #20]
 8009f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f08:	2b40      	cmp	r3, #64	; 0x40
 8009f0a:	bf0c      	ite	eq
 8009f0c:	2301      	moveq	r3, #1
 8009f0e:	2300      	movne	r3, #0
 8009f10:	b2db      	uxtb	r3, r3
 8009f12:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009f1a:	f003 0308 	and.w	r3, r3, #8
 8009f1e:	2b00      	cmp	r3, #0
 8009f20:	d103      	bne.n	8009f2a <HAL_UART_IRQHandler+0x17a>
 8009f22:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009f26:	2b00      	cmp	r3, #0
 8009f28:	d04f      	beq.n	8009fca <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f2a:	6878      	ldr	r0, [r7, #4]
 8009f2c:	f000 fa9a 	bl	800a464 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f30:	687b      	ldr	r3, [r7, #4]
 8009f32:	681b      	ldr	r3, [r3, #0]
 8009f34:	695b      	ldr	r3, [r3, #20]
 8009f36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f3a:	2b40      	cmp	r3, #64	; 0x40
 8009f3c:	d141      	bne.n	8009fc2 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f3e:	687b      	ldr	r3, [r7, #4]
 8009f40:	681b      	ldr	r3, [r3, #0]
 8009f42:	3314      	adds	r3, #20
 8009f44:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f48:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f4c:	e853 3f00 	ldrex	r3, [r3]
 8009f50:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f54:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f58:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f5c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f60:	687b      	ldr	r3, [r7, #4]
 8009f62:	681b      	ldr	r3, [r3, #0]
 8009f64:	3314      	adds	r3, #20
 8009f66:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f6a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f6e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f72:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f76:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f7a:	e841 2300 	strex	r3, r2, [r1]
 8009f7e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f82:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f86:	2b00      	cmp	r3, #0
 8009f88:	d1d9      	bne.n	8009f3e <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f8a:	687b      	ldr	r3, [r7, #4]
 8009f8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f8e:	2b00      	cmp	r3, #0
 8009f90:	d013      	beq.n	8009fba <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f92:	687b      	ldr	r3, [r7, #4]
 8009f94:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f96:	4a7d      	ldr	r2, [pc, #500]	; (800a18c <HAL_UART_IRQHandler+0x3dc>)
 8009f98:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f9a:	687b      	ldr	r3, [r7, #4]
 8009f9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f9e:	4618      	mov	r0, r3
 8009fa0:	f7fd fddf 	bl	8007b62 <HAL_DMA_Abort_IT>
 8009fa4:	4603      	mov	r3, r0
 8009fa6:	2b00      	cmp	r3, #0
 8009fa8:	d016      	beq.n	8009fd8 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009faa:	687b      	ldr	r3, [r7, #4]
 8009fac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009fae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009fb0:	687a      	ldr	r2, [r7, #4]
 8009fb2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009fb4:	4610      	mov	r0, r2
 8009fb6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb8:	e00e      	b.n	8009fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009fba:	6878      	ldr	r0, [r7, #4]
 8009fbc:	f000 f990 	bl	800a2e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc0:	e00a      	b.n	8009fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009fc2:	6878      	ldr	r0, [r7, #4]
 8009fc4:	f000 f98c 	bl	800a2e0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fc8:	e006      	b.n	8009fd8 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fca:	6878      	ldr	r0, [r7, #4]
 8009fcc:	f000 f988 	bl	800a2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fd0:	687b      	ldr	r3, [r7, #4]
 8009fd2:	2200      	movs	r2, #0
 8009fd4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009fd6:	e170      	b.n	800a2ba <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fd8:	bf00      	nop
    return;
 8009fda:	e16e      	b.n	800a2ba <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fdc:	687b      	ldr	r3, [r7, #4]
 8009fde:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fe0:	2b01      	cmp	r3, #1
 8009fe2:	f040 814a 	bne.w	800a27a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009fe6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fea:	f003 0310 	and.w	r3, r3, #16
 8009fee:	2b00      	cmp	r3, #0
 8009ff0:	f000 8143 	beq.w	800a27a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009ff4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ff8:	f003 0310 	and.w	r3, r3, #16
 8009ffc:	2b00      	cmp	r3, #0
 8009ffe:	f000 813c 	beq.w	800a27a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a002:	2300      	movs	r3, #0
 800a004:	60bb      	str	r3, [r7, #8]
 800a006:	687b      	ldr	r3, [r7, #4]
 800a008:	681b      	ldr	r3, [r3, #0]
 800a00a:	681b      	ldr	r3, [r3, #0]
 800a00c:	60bb      	str	r3, [r7, #8]
 800a00e:	687b      	ldr	r3, [r7, #4]
 800a010:	681b      	ldr	r3, [r3, #0]
 800a012:	685b      	ldr	r3, [r3, #4]
 800a014:	60bb      	str	r3, [r7, #8]
 800a016:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800a018:	687b      	ldr	r3, [r7, #4]
 800a01a:	681b      	ldr	r3, [r3, #0]
 800a01c:	695b      	ldr	r3, [r3, #20]
 800a01e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a022:	2b40      	cmp	r3, #64	; 0x40
 800a024:	f040 80b4 	bne.w	800a190 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a028:	687b      	ldr	r3, [r7, #4]
 800a02a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a02c:	681b      	ldr	r3, [r3, #0]
 800a02e:	685b      	ldr	r3, [r3, #4]
 800a030:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a034:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a038:	2b00      	cmp	r3, #0
 800a03a:	f000 8140 	beq.w	800a2be <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a03e:	687b      	ldr	r3, [r7, #4]
 800a040:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a042:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a046:	429a      	cmp	r2, r3
 800a048:	f080 8139 	bcs.w	800a2be <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a04c:	687b      	ldr	r3, [r7, #4]
 800a04e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a052:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a054:	687b      	ldr	r3, [r7, #4]
 800a056:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a058:	69db      	ldr	r3, [r3, #28]
 800a05a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a05e:	f000 8088 	beq.w	800a172 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a062:	687b      	ldr	r3, [r7, #4]
 800a064:	681b      	ldr	r3, [r3, #0]
 800a066:	330c      	adds	r3, #12
 800a068:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a06c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a070:	e853 3f00 	ldrex	r3, [r3]
 800a074:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a078:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a07c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a080:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a084:	687b      	ldr	r3, [r7, #4]
 800a086:	681b      	ldr	r3, [r3, #0]
 800a088:	330c      	adds	r3, #12
 800a08a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a08e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a092:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a096:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a09a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a09e:	e841 2300 	strex	r3, r2, [r1]
 800a0a2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a0a6:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a0aa:	2b00      	cmp	r3, #0
 800a0ac:	d1d9      	bne.n	800a062 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a0ae:	687b      	ldr	r3, [r7, #4]
 800a0b0:	681b      	ldr	r3, [r3, #0]
 800a0b2:	3314      	adds	r3, #20
 800a0b4:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0b6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a0b8:	e853 3f00 	ldrex	r3, [r3]
 800a0bc:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a0be:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a0c0:	f023 0301 	bic.w	r3, r3, #1
 800a0c4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0c8:	687b      	ldr	r3, [r7, #4]
 800a0ca:	681b      	ldr	r3, [r3, #0]
 800a0cc:	3314      	adds	r3, #20
 800a0ce:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0d2:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0d6:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0d8:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0da:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0de:	e841 2300 	strex	r3, r2, [r1]
 800a0e2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0e4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0e6:	2b00      	cmp	r3, #0
 800a0e8:	d1e1      	bne.n	800a0ae <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0ea:	687b      	ldr	r3, [r7, #4]
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	3314      	adds	r3, #20
 800a0f0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0f2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0f4:	e853 3f00 	ldrex	r3, [r3]
 800a0f8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0fa:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0fc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a100:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a104:	687b      	ldr	r3, [r7, #4]
 800a106:	681b      	ldr	r3, [r3, #0]
 800a108:	3314      	adds	r3, #20
 800a10a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a10e:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a110:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a112:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a114:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a116:	e841 2300 	strex	r3, r2, [r1]
 800a11a:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a11c:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a11e:	2b00      	cmp	r3, #0
 800a120:	d1e3      	bne.n	800a0ea <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	2220      	movs	r2, #32
 800a126:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a12a:	687b      	ldr	r3, [r7, #4]
 800a12c:	2200      	movs	r2, #0
 800a12e:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a130:	687b      	ldr	r3, [r7, #4]
 800a132:	681b      	ldr	r3, [r3, #0]
 800a134:	330c      	adds	r3, #12
 800a136:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a138:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a13a:	e853 3f00 	ldrex	r3, [r3]
 800a13e:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a140:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a142:	f023 0310 	bic.w	r3, r3, #16
 800a146:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	681b      	ldr	r3, [r3, #0]
 800a14e:	330c      	adds	r3, #12
 800a150:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a154:	65ba      	str	r2, [r7, #88]	; 0x58
 800a156:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a158:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a15a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a15c:	e841 2300 	strex	r3, r2, [r1]
 800a160:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a162:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a164:	2b00      	cmp	r3, #0
 800a166:	d1e3      	bne.n	800a130 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a16c:	4618      	mov	r0, r3
 800a16e:	f7fd fc88 	bl	8007a82 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a172:	687b      	ldr	r3, [r7, #4]
 800a174:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a176:	687b      	ldr	r3, [r7, #4]
 800a178:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a17a:	b29b      	uxth	r3, r3
 800a17c:	1ad3      	subs	r3, r2, r3
 800a17e:	b29b      	uxth	r3, r3
 800a180:	4619      	mov	r1, r3
 800a182:	6878      	ldr	r0, [r7, #4]
 800a184:	f000 f8b6 	bl	800a2f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a188:	e099      	b.n	800a2be <HAL_UART_IRQHandler+0x50e>
 800a18a:	bf00      	nop
 800a18c:	0800a52b 	.word	0x0800a52b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a190:	687b      	ldr	r3, [r7, #4]
 800a192:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a194:	687b      	ldr	r3, [r7, #4]
 800a196:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a198:	b29b      	uxth	r3, r3
 800a19a:	1ad3      	subs	r3, r2, r3
 800a19c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a1a0:	687b      	ldr	r3, [r7, #4]
 800a1a2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a1a4:	b29b      	uxth	r3, r3
 800a1a6:	2b00      	cmp	r3, #0
 800a1a8:	f000 808b 	beq.w	800a2c2 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a1ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a1b0:	2b00      	cmp	r3, #0
 800a1b2:	f000 8086 	beq.w	800a2c2 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a1b6:	687b      	ldr	r3, [r7, #4]
 800a1b8:	681b      	ldr	r3, [r3, #0]
 800a1ba:	330c      	adds	r3, #12
 800a1bc:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1be:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a1c0:	e853 3f00 	ldrex	r3, [r3]
 800a1c4:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a1c6:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1c8:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1cc:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1d0:	687b      	ldr	r3, [r7, #4]
 800a1d2:	681b      	ldr	r3, [r3, #0]
 800a1d4:	330c      	adds	r3, #12
 800a1d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a1da:	647a      	str	r2, [r7, #68]	; 0x44
 800a1dc:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1de:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1e0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1e2:	e841 2300 	strex	r3, r2, [r1]
 800a1e6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1e8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1ea:	2b00      	cmp	r3, #0
 800a1ec:	d1e3      	bne.n	800a1b6 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1ee:	687b      	ldr	r3, [r7, #4]
 800a1f0:	681b      	ldr	r3, [r3, #0]
 800a1f2:	3314      	adds	r3, #20
 800a1f4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1f6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1f8:	e853 3f00 	ldrex	r3, [r3]
 800a1fc:	623b      	str	r3, [r7, #32]
   return(result);
 800a1fe:	6a3b      	ldr	r3, [r7, #32]
 800a200:	f023 0301 	bic.w	r3, r3, #1
 800a204:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a208:	687b      	ldr	r3, [r7, #4]
 800a20a:	681b      	ldr	r3, [r3, #0]
 800a20c:	3314      	adds	r3, #20
 800a20e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a212:	633a      	str	r2, [r7, #48]	; 0x30
 800a214:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a216:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a218:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a21a:	e841 2300 	strex	r3, r2, [r1]
 800a21e:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a220:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a222:	2b00      	cmp	r3, #0
 800a224:	d1e3      	bne.n	800a1ee <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	2220      	movs	r2, #32
 800a22a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a22e:	687b      	ldr	r3, [r7, #4]
 800a230:	2200      	movs	r2, #0
 800a232:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a234:	687b      	ldr	r3, [r7, #4]
 800a236:	681b      	ldr	r3, [r3, #0]
 800a238:	330c      	adds	r3, #12
 800a23a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a23c:	693b      	ldr	r3, [r7, #16]
 800a23e:	e853 3f00 	ldrex	r3, [r3]
 800a242:	60fb      	str	r3, [r7, #12]
   return(result);
 800a244:	68fb      	ldr	r3, [r7, #12]
 800a246:	f023 0310 	bic.w	r3, r3, #16
 800a24a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a24e:	687b      	ldr	r3, [r7, #4]
 800a250:	681b      	ldr	r3, [r3, #0]
 800a252:	330c      	adds	r3, #12
 800a254:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a258:	61fa      	str	r2, [r7, #28]
 800a25a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a25c:	69b9      	ldr	r1, [r7, #24]
 800a25e:	69fa      	ldr	r2, [r7, #28]
 800a260:	e841 2300 	strex	r3, r2, [r1]
 800a264:	617b      	str	r3, [r7, #20]
   return(result);
 800a266:	697b      	ldr	r3, [r7, #20]
 800a268:	2b00      	cmp	r3, #0
 800a26a:	d1e3      	bne.n	800a234 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a26c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a270:	4619      	mov	r1, r3
 800a272:	6878      	ldr	r0, [r7, #4]
 800a274:	f000 f83e 	bl	800a2f4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a278:	e023      	b.n	800a2c2 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a27a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a27e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a282:	2b00      	cmp	r3, #0
 800a284:	d009      	beq.n	800a29a <HAL_UART_IRQHandler+0x4ea>
 800a286:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a28a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a28e:	2b00      	cmp	r3, #0
 800a290:	d003      	beq.n	800a29a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a292:	6878      	ldr	r0, [r7, #4]
 800a294:	f000 f95d 	bl	800a552 <UART_Transmit_IT>
    return;
 800a298:	e014      	b.n	800a2c4 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a29a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a29e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d00e      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x514>
 800a2a6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a2aa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a2ae:	2b00      	cmp	r3, #0
 800a2b0:	d008      	beq.n	800a2c4 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a2b2:	6878      	ldr	r0, [r7, #4]
 800a2b4:	f000 f99d 	bl	800a5f2 <UART_EndTransmit_IT>
    return;
 800a2b8:	e004      	b.n	800a2c4 <HAL_UART_IRQHandler+0x514>
    return;
 800a2ba:	bf00      	nop
 800a2bc:	e002      	b.n	800a2c4 <HAL_UART_IRQHandler+0x514>
      return;
 800a2be:	bf00      	nop
 800a2c0:	e000      	b.n	800a2c4 <HAL_UART_IRQHandler+0x514>
      return;
 800a2c2:	bf00      	nop
  }
}
 800a2c4:	37e8      	adds	r7, #232	; 0xe8
 800a2c6:	46bd      	mov	sp, r7
 800a2c8:	bd80      	pop	{r7, pc}
 800a2ca:	bf00      	nop

0800a2cc <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a2d4:	bf00      	nop
 800a2d6:	370c      	adds	r7, #12
 800a2d8:	46bd      	mov	sp, r7
 800a2da:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2de:	4770      	bx	lr

0800a2e0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2e0:	b480      	push	{r7}
 800a2e2:	b083      	sub	sp, #12
 800a2e4:	af00      	add	r7, sp, #0
 800a2e6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2e8:	bf00      	nop
 800a2ea:	370c      	adds	r7, #12
 800a2ec:	46bd      	mov	sp, r7
 800a2ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2f2:	4770      	bx	lr

0800a2f4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2f4:	b480      	push	{r7}
 800a2f6:	b083      	sub	sp, #12
 800a2f8:	af00      	add	r7, sp, #0
 800a2fa:	6078      	str	r0, [r7, #4]
 800a2fc:	460b      	mov	r3, r1
 800a2fe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a300:	bf00      	nop
 800a302:	370c      	adds	r7, #12
 800a304:	46bd      	mov	sp, r7
 800a306:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a30a:	4770      	bx	lr

0800a30c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a30c:	b580      	push	{r7, lr}
 800a30e:	b090      	sub	sp, #64	; 0x40
 800a310:	af00      	add	r7, sp, #0
 800a312:	60f8      	str	r0, [r7, #12]
 800a314:	60b9      	str	r1, [r7, #8]
 800a316:	603b      	str	r3, [r7, #0]
 800a318:	4613      	mov	r3, r2
 800a31a:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a31c:	e050      	b.n	800a3c0 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a31e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a320:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a324:	d04c      	beq.n	800a3c0 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a326:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a328:	2b00      	cmp	r3, #0
 800a32a:	d007      	beq.n	800a33c <UART_WaitOnFlagUntilTimeout+0x30>
 800a32c:	f7fd fa4e 	bl	80077cc <HAL_GetTick>
 800a330:	4602      	mov	r2, r0
 800a332:	683b      	ldr	r3, [r7, #0]
 800a334:	1ad3      	subs	r3, r2, r3
 800a336:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a338:	429a      	cmp	r2, r3
 800a33a:	d241      	bcs.n	800a3c0 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a33c:	68fb      	ldr	r3, [r7, #12]
 800a33e:	681b      	ldr	r3, [r3, #0]
 800a340:	330c      	adds	r3, #12
 800a342:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a344:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a346:	e853 3f00 	ldrex	r3, [r3]
 800a34a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a34c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a34e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a352:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a354:	68fb      	ldr	r3, [r7, #12]
 800a356:	681b      	ldr	r3, [r3, #0]
 800a358:	330c      	adds	r3, #12
 800a35a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a35c:	637a      	str	r2, [r7, #52]	; 0x34
 800a35e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a360:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a362:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a364:	e841 2300 	strex	r3, r2, [r1]
 800a368:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a36a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a36c:	2b00      	cmp	r3, #0
 800a36e:	d1e5      	bne.n	800a33c <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a370:	68fb      	ldr	r3, [r7, #12]
 800a372:	681b      	ldr	r3, [r3, #0]
 800a374:	3314      	adds	r3, #20
 800a376:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a378:	697b      	ldr	r3, [r7, #20]
 800a37a:	e853 3f00 	ldrex	r3, [r3]
 800a37e:	613b      	str	r3, [r7, #16]
   return(result);
 800a380:	693b      	ldr	r3, [r7, #16]
 800a382:	f023 0301 	bic.w	r3, r3, #1
 800a386:	63bb      	str	r3, [r7, #56]	; 0x38
 800a388:	68fb      	ldr	r3, [r7, #12]
 800a38a:	681b      	ldr	r3, [r3, #0]
 800a38c:	3314      	adds	r3, #20
 800a38e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a390:	623a      	str	r2, [r7, #32]
 800a392:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a394:	69f9      	ldr	r1, [r7, #28]
 800a396:	6a3a      	ldr	r2, [r7, #32]
 800a398:	e841 2300 	strex	r3, r2, [r1]
 800a39c:	61bb      	str	r3, [r7, #24]
   return(result);
 800a39e:	69bb      	ldr	r3, [r7, #24]
 800a3a0:	2b00      	cmp	r3, #0
 800a3a2:	d1e5      	bne.n	800a370 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a3a4:	68fb      	ldr	r3, [r7, #12]
 800a3a6:	2220      	movs	r2, #32
 800a3a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a3ac:	68fb      	ldr	r3, [r7, #12]
 800a3ae:	2220      	movs	r2, #32
 800a3b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a3b4:	68fb      	ldr	r3, [r7, #12]
 800a3b6:	2200      	movs	r2, #0
 800a3b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a3bc:	2303      	movs	r3, #3
 800a3be:	e00f      	b.n	800a3e0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a3c0:	68fb      	ldr	r3, [r7, #12]
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	681a      	ldr	r2, [r3, #0]
 800a3c6:	68bb      	ldr	r3, [r7, #8]
 800a3c8:	4013      	ands	r3, r2
 800a3ca:	68ba      	ldr	r2, [r7, #8]
 800a3cc:	429a      	cmp	r2, r3
 800a3ce:	bf0c      	ite	eq
 800a3d0:	2301      	moveq	r3, #1
 800a3d2:	2300      	movne	r3, #0
 800a3d4:	b2db      	uxtb	r3, r3
 800a3d6:	461a      	mov	r2, r3
 800a3d8:	79fb      	ldrb	r3, [r7, #7]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d09f      	beq.n	800a31e <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a3de:	2300      	movs	r3, #0
}
 800a3e0:	4618      	mov	r0, r3
 800a3e2:	3740      	adds	r7, #64	; 0x40
 800a3e4:	46bd      	mov	sp, r7
 800a3e6:	bd80      	pop	{r7, pc}

0800a3e8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3e8:	b480      	push	{r7}
 800a3ea:	b085      	sub	sp, #20
 800a3ec:	af00      	add	r7, sp, #0
 800a3ee:	60f8      	str	r0, [r7, #12]
 800a3f0:	60b9      	str	r1, [r7, #8]
 800a3f2:	4613      	mov	r3, r2
 800a3f4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	68ba      	ldr	r2, [r7, #8]
 800a3fa:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a3fc:	68fb      	ldr	r3, [r7, #12]
 800a3fe:	88fa      	ldrh	r2, [r7, #6]
 800a400:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a402:	68fb      	ldr	r3, [r7, #12]
 800a404:	88fa      	ldrh	r2, [r7, #6]
 800a406:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a408:	68fb      	ldr	r3, [r7, #12]
 800a40a:	2200      	movs	r2, #0
 800a40c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	2222      	movs	r2, #34	; 0x22
 800a412:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a416:	68fb      	ldr	r3, [r7, #12]
 800a418:	2200      	movs	r2, #0
 800a41a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	691b      	ldr	r3, [r3, #16]
 800a422:	2b00      	cmp	r3, #0
 800a424:	d007      	beq.n	800a436 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a426:	68fb      	ldr	r3, [r7, #12]
 800a428:	681b      	ldr	r3, [r3, #0]
 800a42a:	68da      	ldr	r2, [r3, #12]
 800a42c:	68fb      	ldr	r3, [r7, #12]
 800a42e:	681b      	ldr	r3, [r3, #0]
 800a430:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a434:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a436:	68fb      	ldr	r3, [r7, #12]
 800a438:	681b      	ldr	r3, [r3, #0]
 800a43a:	695a      	ldr	r2, [r3, #20]
 800a43c:	68fb      	ldr	r3, [r7, #12]
 800a43e:	681b      	ldr	r3, [r3, #0]
 800a440:	f042 0201 	orr.w	r2, r2, #1
 800a444:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a446:	68fb      	ldr	r3, [r7, #12]
 800a448:	681b      	ldr	r3, [r3, #0]
 800a44a:	68da      	ldr	r2, [r3, #12]
 800a44c:	68fb      	ldr	r3, [r7, #12]
 800a44e:	681b      	ldr	r3, [r3, #0]
 800a450:	f042 0220 	orr.w	r2, r2, #32
 800a454:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a456:	2300      	movs	r3, #0
}
 800a458:	4618      	mov	r0, r3
 800a45a:	3714      	adds	r7, #20
 800a45c:	46bd      	mov	sp, r7
 800a45e:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a462:	4770      	bx	lr

0800a464 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a464:	b480      	push	{r7}
 800a466:	b095      	sub	sp, #84	; 0x54
 800a468:	af00      	add	r7, sp, #0
 800a46a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a46c:	687b      	ldr	r3, [r7, #4]
 800a46e:	681b      	ldr	r3, [r3, #0]
 800a470:	330c      	adds	r3, #12
 800a472:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a474:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a476:	e853 3f00 	ldrex	r3, [r3]
 800a47a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a47c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a47e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a482:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a484:	687b      	ldr	r3, [r7, #4]
 800a486:	681b      	ldr	r3, [r3, #0]
 800a488:	330c      	adds	r3, #12
 800a48a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a48c:	643a      	str	r2, [r7, #64]	; 0x40
 800a48e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a490:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a492:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a494:	e841 2300 	strex	r3, r2, [r1]
 800a498:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a49a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a49c:	2b00      	cmp	r3, #0
 800a49e:	d1e5      	bne.n	800a46c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a4a0:	687b      	ldr	r3, [r7, #4]
 800a4a2:	681b      	ldr	r3, [r3, #0]
 800a4a4:	3314      	adds	r3, #20
 800a4a6:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4a8:	6a3b      	ldr	r3, [r7, #32]
 800a4aa:	e853 3f00 	ldrex	r3, [r3]
 800a4ae:	61fb      	str	r3, [r7, #28]
   return(result);
 800a4b0:	69fb      	ldr	r3, [r7, #28]
 800a4b2:	f023 0301 	bic.w	r3, r3, #1
 800a4b6:	64bb      	str	r3, [r7, #72]	; 0x48
 800a4b8:	687b      	ldr	r3, [r7, #4]
 800a4ba:	681b      	ldr	r3, [r3, #0]
 800a4bc:	3314      	adds	r3, #20
 800a4be:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a4c0:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a4c2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4c4:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a4c6:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4c8:	e841 2300 	strex	r3, r2, [r1]
 800a4cc:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4d0:	2b00      	cmp	r3, #0
 800a4d2:	d1e5      	bne.n	800a4a0 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4d4:	687b      	ldr	r3, [r7, #4]
 800a4d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4d8:	2b01      	cmp	r3, #1
 800a4da:	d119      	bne.n	800a510 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4dc:	687b      	ldr	r3, [r7, #4]
 800a4de:	681b      	ldr	r3, [r3, #0]
 800a4e0:	330c      	adds	r3, #12
 800a4e2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4e4:	68fb      	ldr	r3, [r7, #12]
 800a4e6:	e853 3f00 	ldrex	r3, [r3]
 800a4ea:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4ec:	68bb      	ldr	r3, [r7, #8]
 800a4ee:	f023 0310 	bic.w	r3, r3, #16
 800a4f2:	647b      	str	r3, [r7, #68]	; 0x44
 800a4f4:	687b      	ldr	r3, [r7, #4]
 800a4f6:	681b      	ldr	r3, [r3, #0]
 800a4f8:	330c      	adds	r3, #12
 800a4fa:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4fc:	61ba      	str	r2, [r7, #24]
 800a4fe:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a500:	6979      	ldr	r1, [r7, #20]
 800a502:	69ba      	ldr	r2, [r7, #24]
 800a504:	e841 2300 	strex	r3, r2, [r1]
 800a508:	613b      	str	r3, [r7, #16]
   return(result);
 800a50a:	693b      	ldr	r3, [r7, #16]
 800a50c:	2b00      	cmp	r3, #0
 800a50e:	d1e5      	bne.n	800a4dc <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a510:	687b      	ldr	r3, [r7, #4]
 800a512:	2220      	movs	r2, #32
 800a514:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a518:	687b      	ldr	r3, [r7, #4]
 800a51a:	2200      	movs	r2, #0
 800a51c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a51e:	bf00      	nop
 800a520:	3754      	adds	r7, #84	; 0x54
 800a522:	46bd      	mov	sp, r7
 800a524:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a528:	4770      	bx	lr

0800a52a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a52a:	b580      	push	{r7, lr}
 800a52c:	b084      	sub	sp, #16
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a536:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a538:	68fb      	ldr	r3, [r7, #12]
 800a53a:	2200      	movs	r2, #0
 800a53c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a53e:	68fb      	ldr	r3, [r7, #12]
 800a540:	2200      	movs	r2, #0
 800a542:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a544:	68f8      	ldr	r0, [r7, #12]
 800a546:	f7ff fecb 	bl	800a2e0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a54a:	bf00      	nop
 800a54c:	3710      	adds	r7, #16
 800a54e:	46bd      	mov	sp, r7
 800a550:	bd80      	pop	{r7, pc}

0800a552 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a552:	b480      	push	{r7}
 800a554:	b085      	sub	sp, #20
 800a556:	af00      	add	r7, sp, #0
 800a558:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a55a:	687b      	ldr	r3, [r7, #4]
 800a55c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a560:	b2db      	uxtb	r3, r3
 800a562:	2b21      	cmp	r3, #33	; 0x21
 800a564:	d13e      	bne.n	800a5e4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	689b      	ldr	r3, [r3, #8]
 800a56a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a56e:	d114      	bne.n	800a59a <UART_Transmit_IT+0x48>
 800a570:	687b      	ldr	r3, [r7, #4]
 800a572:	691b      	ldr	r3, [r3, #16]
 800a574:	2b00      	cmp	r3, #0
 800a576:	d110      	bne.n	800a59a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a578:	687b      	ldr	r3, [r7, #4]
 800a57a:	6a1b      	ldr	r3, [r3, #32]
 800a57c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a57e:	68fb      	ldr	r3, [r7, #12]
 800a580:	881b      	ldrh	r3, [r3, #0]
 800a582:	461a      	mov	r2, r3
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	681b      	ldr	r3, [r3, #0]
 800a588:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a58c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a58e:	687b      	ldr	r3, [r7, #4]
 800a590:	6a1b      	ldr	r3, [r3, #32]
 800a592:	1c9a      	adds	r2, r3, #2
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	621a      	str	r2, [r3, #32]
 800a598:	e008      	b.n	800a5ac <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	6a1b      	ldr	r3, [r3, #32]
 800a59e:	1c59      	adds	r1, r3, #1
 800a5a0:	687a      	ldr	r2, [r7, #4]
 800a5a2:	6211      	str	r1, [r2, #32]
 800a5a4:	781a      	ldrb	r2, [r3, #0]
 800a5a6:	687b      	ldr	r3, [r7, #4]
 800a5a8:	681b      	ldr	r3, [r3, #0]
 800a5aa:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a5ac:	687b      	ldr	r3, [r7, #4]
 800a5ae:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a5b0:	b29b      	uxth	r3, r3
 800a5b2:	3b01      	subs	r3, #1
 800a5b4:	b29b      	uxth	r3, r3
 800a5b6:	687a      	ldr	r2, [r7, #4]
 800a5b8:	4619      	mov	r1, r3
 800a5ba:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a5bc:	2b00      	cmp	r3, #0
 800a5be:	d10f      	bne.n	800a5e0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a5c0:	687b      	ldr	r3, [r7, #4]
 800a5c2:	681b      	ldr	r3, [r3, #0]
 800a5c4:	68da      	ldr	r2, [r3, #12]
 800a5c6:	687b      	ldr	r3, [r7, #4]
 800a5c8:	681b      	ldr	r3, [r3, #0]
 800a5ca:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5ce:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5d0:	687b      	ldr	r3, [r7, #4]
 800a5d2:	681b      	ldr	r3, [r3, #0]
 800a5d4:	68da      	ldr	r2, [r3, #12]
 800a5d6:	687b      	ldr	r3, [r7, #4]
 800a5d8:	681b      	ldr	r3, [r3, #0]
 800a5da:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5de:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5e0:	2300      	movs	r3, #0
 800a5e2:	e000      	b.n	800a5e6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5e4:	2302      	movs	r3, #2
  }
}
 800a5e6:	4618      	mov	r0, r3
 800a5e8:	3714      	adds	r7, #20
 800a5ea:	46bd      	mov	sp, r7
 800a5ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5f0:	4770      	bx	lr

0800a5f2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5f2:	b580      	push	{r7, lr}
 800a5f4:	b082      	sub	sp, #8
 800a5f6:	af00      	add	r7, sp, #0
 800a5f8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5fa:	687b      	ldr	r3, [r7, #4]
 800a5fc:	681b      	ldr	r3, [r3, #0]
 800a5fe:	68da      	ldr	r2, [r3, #12]
 800a600:	687b      	ldr	r3, [r7, #4]
 800a602:	681b      	ldr	r3, [r3, #0]
 800a604:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a608:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a60a:	687b      	ldr	r3, [r7, #4]
 800a60c:	2220      	movs	r2, #32
 800a60e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a612:	6878      	ldr	r0, [r7, #4]
 800a614:	f7ff fe5a 	bl	800a2cc <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a618:	2300      	movs	r3, #0
}
 800a61a:	4618      	mov	r0, r3
 800a61c:	3708      	adds	r7, #8
 800a61e:	46bd      	mov	sp, r7
 800a620:	bd80      	pop	{r7, pc}

0800a622 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a622:	b580      	push	{r7, lr}
 800a624:	b08c      	sub	sp, #48	; 0x30
 800a626:	af00      	add	r7, sp, #0
 800a628:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a62a:	687b      	ldr	r3, [r7, #4]
 800a62c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a630:	b2db      	uxtb	r3, r3
 800a632:	2b22      	cmp	r3, #34	; 0x22
 800a634:	f040 80ab 	bne.w	800a78e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a638:	687b      	ldr	r3, [r7, #4]
 800a63a:	689b      	ldr	r3, [r3, #8]
 800a63c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a640:	d117      	bne.n	800a672 <UART_Receive_IT+0x50>
 800a642:	687b      	ldr	r3, [r7, #4]
 800a644:	691b      	ldr	r3, [r3, #16]
 800a646:	2b00      	cmp	r3, #0
 800a648:	d113      	bne.n	800a672 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a64a:	2300      	movs	r3, #0
 800a64c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a64e:	687b      	ldr	r3, [r7, #4]
 800a650:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	681b      	ldr	r3, [r3, #0]
 800a658:	685b      	ldr	r3, [r3, #4]
 800a65a:	b29b      	uxth	r3, r3
 800a65c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a660:	b29a      	uxth	r2, r3
 800a662:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a664:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a66a:	1c9a      	adds	r2, r3, #2
 800a66c:	687b      	ldr	r3, [r7, #4]
 800a66e:	629a      	str	r2, [r3, #40]	; 0x28
 800a670:	e026      	b.n	800a6c0 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a672:	687b      	ldr	r3, [r7, #4]
 800a674:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a676:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a678:	2300      	movs	r3, #0
 800a67a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	689b      	ldr	r3, [r3, #8]
 800a680:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a684:	d007      	beq.n	800a696 <UART_Receive_IT+0x74>
 800a686:	687b      	ldr	r3, [r7, #4]
 800a688:	689b      	ldr	r3, [r3, #8]
 800a68a:	2b00      	cmp	r3, #0
 800a68c:	d10a      	bne.n	800a6a4 <UART_Receive_IT+0x82>
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	691b      	ldr	r3, [r3, #16]
 800a692:	2b00      	cmp	r3, #0
 800a694:	d106      	bne.n	800a6a4 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a696:	687b      	ldr	r3, [r7, #4]
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	685b      	ldr	r3, [r3, #4]
 800a69c:	b2da      	uxtb	r2, r3
 800a69e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6a0:	701a      	strb	r2, [r3, #0]
 800a6a2:	e008      	b.n	800a6b6 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a6a4:	687b      	ldr	r3, [r7, #4]
 800a6a6:	681b      	ldr	r3, [r3, #0]
 800a6a8:	685b      	ldr	r3, [r3, #4]
 800a6aa:	b2db      	uxtb	r3, r3
 800a6ac:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a6b0:	b2da      	uxtb	r2, r3
 800a6b2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a6b4:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a6b6:	687b      	ldr	r3, [r7, #4]
 800a6b8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a6ba:	1c5a      	adds	r2, r3, #1
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a6c0:	687b      	ldr	r3, [r7, #4]
 800a6c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a6c4:	b29b      	uxth	r3, r3
 800a6c6:	3b01      	subs	r3, #1
 800a6c8:	b29b      	uxth	r3, r3
 800a6ca:	687a      	ldr	r2, [r7, #4]
 800a6cc:	4619      	mov	r1, r3
 800a6ce:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	d15a      	bne.n	800a78a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6d4:	687b      	ldr	r3, [r7, #4]
 800a6d6:	681b      	ldr	r3, [r3, #0]
 800a6d8:	68da      	ldr	r2, [r3, #12]
 800a6da:	687b      	ldr	r3, [r7, #4]
 800a6dc:	681b      	ldr	r3, [r3, #0]
 800a6de:	f022 0220 	bic.w	r2, r2, #32
 800a6e2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	681b      	ldr	r3, [r3, #0]
 800a6e8:	68da      	ldr	r2, [r3, #12]
 800a6ea:	687b      	ldr	r3, [r7, #4]
 800a6ec:	681b      	ldr	r3, [r3, #0]
 800a6ee:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6f2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6f4:	687b      	ldr	r3, [r7, #4]
 800a6f6:	681b      	ldr	r3, [r3, #0]
 800a6f8:	695a      	ldr	r2, [r3, #20]
 800a6fa:	687b      	ldr	r3, [r7, #4]
 800a6fc:	681b      	ldr	r3, [r3, #0]
 800a6fe:	f022 0201 	bic.w	r2, r2, #1
 800a702:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a704:	687b      	ldr	r3, [r7, #4]
 800a706:	2220      	movs	r2, #32
 800a708:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a70c:	687b      	ldr	r3, [r7, #4]
 800a70e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a710:	2b01      	cmp	r3, #1
 800a712:	d135      	bne.n	800a780 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	2200      	movs	r2, #0
 800a718:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a71a:	687b      	ldr	r3, [r7, #4]
 800a71c:	681b      	ldr	r3, [r3, #0]
 800a71e:	330c      	adds	r3, #12
 800a720:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a722:	697b      	ldr	r3, [r7, #20]
 800a724:	e853 3f00 	ldrex	r3, [r3]
 800a728:	613b      	str	r3, [r7, #16]
   return(result);
 800a72a:	693b      	ldr	r3, [r7, #16]
 800a72c:	f023 0310 	bic.w	r3, r3, #16
 800a730:	627b      	str	r3, [r7, #36]	; 0x24
 800a732:	687b      	ldr	r3, [r7, #4]
 800a734:	681b      	ldr	r3, [r3, #0]
 800a736:	330c      	adds	r3, #12
 800a738:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a73a:	623a      	str	r2, [r7, #32]
 800a73c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a73e:	69f9      	ldr	r1, [r7, #28]
 800a740:	6a3a      	ldr	r2, [r7, #32]
 800a742:	e841 2300 	strex	r3, r2, [r1]
 800a746:	61bb      	str	r3, [r7, #24]
   return(result);
 800a748:	69bb      	ldr	r3, [r7, #24]
 800a74a:	2b00      	cmp	r3, #0
 800a74c:	d1e5      	bne.n	800a71a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a74e:	687b      	ldr	r3, [r7, #4]
 800a750:	681b      	ldr	r3, [r3, #0]
 800a752:	681b      	ldr	r3, [r3, #0]
 800a754:	f003 0310 	and.w	r3, r3, #16
 800a758:	2b10      	cmp	r3, #16
 800a75a:	d10a      	bne.n	800a772 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a75c:	2300      	movs	r3, #0
 800a75e:	60fb      	str	r3, [r7, #12]
 800a760:	687b      	ldr	r3, [r7, #4]
 800a762:	681b      	ldr	r3, [r3, #0]
 800a764:	681b      	ldr	r3, [r3, #0]
 800a766:	60fb      	str	r3, [r7, #12]
 800a768:	687b      	ldr	r3, [r7, #4]
 800a76a:	681b      	ldr	r3, [r3, #0]
 800a76c:	685b      	ldr	r3, [r3, #4]
 800a76e:	60fb      	str	r3, [r7, #12]
 800a770:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a772:	687b      	ldr	r3, [r7, #4]
 800a774:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a776:	4619      	mov	r1, r3
 800a778:	6878      	ldr	r0, [r7, #4]
 800a77a:	f7ff fdbb 	bl	800a2f4 <HAL_UARTEx_RxEventCallback>
 800a77e:	e002      	b.n	800a786 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a780:	6878      	ldr	r0, [r7, #4]
 800a782:	f7fb f893 	bl	80058ac <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a786:	2300      	movs	r3, #0
 800a788:	e002      	b.n	800a790 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a78a:	2300      	movs	r3, #0
 800a78c:	e000      	b.n	800a790 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a78e:	2302      	movs	r3, #2
  }
}
 800a790:	4618      	mov	r0, r3
 800a792:	3730      	adds	r7, #48	; 0x30
 800a794:	46bd      	mov	sp, r7
 800a796:	bd80      	pop	{r7, pc}

0800a798 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a798:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a79c:	b0c0      	sub	sp, #256	; 0x100
 800a79e:	af00      	add	r7, sp, #0
 800a7a0:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a7a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a8:	681b      	ldr	r3, [r3, #0]
 800a7aa:	691b      	ldr	r3, [r3, #16]
 800a7ac:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b4:	68d9      	ldr	r1, [r3, #12]
 800a7b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ba:	681a      	ldr	r2, [r3, #0]
 800a7bc:	ea40 0301 	orr.w	r3, r0, r1
 800a7c0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a7c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c6:	689a      	ldr	r2, [r3, #8]
 800a7c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7cc:	691b      	ldr	r3, [r3, #16]
 800a7ce:	431a      	orrs	r2, r3
 800a7d0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d4:	695b      	ldr	r3, [r3, #20]
 800a7d6:	431a      	orrs	r2, r3
 800a7d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7dc:	69db      	ldr	r3, [r3, #28]
 800a7de:	4313      	orrs	r3, r2
 800a7e0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a7e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7e8:	681b      	ldr	r3, [r3, #0]
 800a7ea:	68db      	ldr	r3, [r3, #12]
 800a7ec:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a7f0:	f021 010c 	bic.w	r1, r1, #12
 800a7f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f8:	681a      	ldr	r2, [r3, #0]
 800a7fa:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7fe:	430b      	orrs	r3, r1
 800a800:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a802:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a806:	681b      	ldr	r3, [r3, #0]
 800a808:	695b      	ldr	r3, [r3, #20]
 800a80a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a80e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a812:	6999      	ldr	r1, [r3, #24]
 800a814:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a818:	681a      	ldr	r2, [r3, #0]
 800a81a:	ea40 0301 	orr.w	r3, r0, r1
 800a81e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a820:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a824:	681a      	ldr	r2, [r3, #0]
 800a826:	4b8f      	ldr	r3, [pc, #572]	; (800aa64 <UART_SetConfig+0x2cc>)
 800a828:	429a      	cmp	r2, r3
 800a82a:	d005      	beq.n	800a838 <UART_SetConfig+0xa0>
 800a82c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a830:	681a      	ldr	r2, [r3, #0]
 800a832:	4b8d      	ldr	r3, [pc, #564]	; (800aa68 <UART_SetConfig+0x2d0>)
 800a834:	429a      	cmp	r2, r3
 800a836:	d104      	bne.n	800a842 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a838:	f7fe fac6 	bl	8008dc8 <HAL_RCC_GetPCLK2Freq>
 800a83c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a840:	e003      	b.n	800a84a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a842:	f7fe faad 	bl	8008da0 <HAL_RCC_GetPCLK1Freq>
 800a846:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a84a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a84e:	69db      	ldr	r3, [r3, #28]
 800a850:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a854:	f040 810c 	bne.w	800aa70 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a858:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a85c:	2200      	movs	r2, #0
 800a85e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a862:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a866:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a86a:	4622      	mov	r2, r4
 800a86c:	462b      	mov	r3, r5
 800a86e:	1891      	adds	r1, r2, r2
 800a870:	65b9      	str	r1, [r7, #88]	; 0x58
 800a872:	415b      	adcs	r3, r3
 800a874:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a876:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a87a:	4621      	mov	r1, r4
 800a87c:	eb12 0801 	adds.w	r8, r2, r1
 800a880:	4629      	mov	r1, r5
 800a882:	eb43 0901 	adc.w	r9, r3, r1
 800a886:	f04f 0200 	mov.w	r2, #0
 800a88a:	f04f 0300 	mov.w	r3, #0
 800a88e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a892:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a896:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a89a:	4690      	mov	r8, r2
 800a89c:	4699      	mov	r9, r3
 800a89e:	4623      	mov	r3, r4
 800a8a0:	eb18 0303 	adds.w	r3, r8, r3
 800a8a4:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a8a8:	462b      	mov	r3, r5
 800a8aa:	eb49 0303 	adc.w	r3, r9, r3
 800a8ae:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a8b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a8b6:	685b      	ldr	r3, [r3, #4]
 800a8b8:	2200      	movs	r2, #0
 800a8ba:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a8be:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a8c2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a8c6:	460b      	mov	r3, r1
 800a8c8:	18db      	adds	r3, r3, r3
 800a8ca:	653b      	str	r3, [r7, #80]	; 0x50
 800a8cc:	4613      	mov	r3, r2
 800a8ce:	eb42 0303 	adc.w	r3, r2, r3
 800a8d2:	657b      	str	r3, [r7, #84]	; 0x54
 800a8d4:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a8d8:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a8dc:	f7f6 f9d4 	bl	8000c88 <__aeabi_uldivmod>
 800a8e0:	4602      	mov	r2, r0
 800a8e2:	460b      	mov	r3, r1
 800a8e4:	4b61      	ldr	r3, [pc, #388]	; (800aa6c <UART_SetConfig+0x2d4>)
 800a8e6:	fba3 2302 	umull	r2, r3, r3, r2
 800a8ea:	095b      	lsrs	r3, r3, #5
 800a8ec:	011c      	lsls	r4, r3, #4
 800a8ee:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8f2:	2200      	movs	r2, #0
 800a8f4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8f8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a8fc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a900:	4642      	mov	r2, r8
 800a902:	464b      	mov	r3, r9
 800a904:	1891      	adds	r1, r2, r2
 800a906:	64b9      	str	r1, [r7, #72]	; 0x48
 800a908:	415b      	adcs	r3, r3
 800a90a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a90c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a910:	4641      	mov	r1, r8
 800a912:	eb12 0a01 	adds.w	sl, r2, r1
 800a916:	4649      	mov	r1, r9
 800a918:	eb43 0b01 	adc.w	fp, r3, r1
 800a91c:	f04f 0200 	mov.w	r2, #0
 800a920:	f04f 0300 	mov.w	r3, #0
 800a924:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a928:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a92c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a930:	4692      	mov	sl, r2
 800a932:	469b      	mov	fp, r3
 800a934:	4643      	mov	r3, r8
 800a936:	eb1a 0303 	adds.w	r3, sl, r3
 800a93a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a93e:	464b      	mov	r3, r9
 800a940:	eb4b 0303 	adc.w	r3, fp, r3
 800a944:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a94c:	685b      	ldr	r3, [r3, #4]
 800a94e:	2200      	movs	r2, #0
 800a950:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a954:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a958:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a95c:	460b      	mov	r3, r1
 800a95e:	18db      	adds	r3, r3, r3
 800a960:	643b      	str	r3, [r7, #64]	; 0x40
 800a962:	4613      	mov	r3, r2
 800a964:	eb42 0303 	adc.w	r3, r2, r3
 800a968:	647b      	str	r3, [r7, #68]	; 0x44
 800a96a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a96e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a972:	f7f6 f989 	bl	8000c88 <__aeabi_uldivmod>
 800a976:	4602      	mov	r2, r0
 800a978:	460b      	mov	r3, r1
 800a97a:	4611      	mov	r1, r2
 800a97c:	4b3b      	ldr	r3, [pc, #236]	; (800aa6c <UART_SetConfig+0x2d4>)
 800a97e:	fba3 2301 	umull	r2, r3, r3, r1
 800a982:	095b      	lsrs	r3, r3, #5
 800a984:	2264      	movs	r2, #100	; 0x64
 800a986:	fb02 f303 	mul.w	r3, r2, r3
 800a98a:	1acb      	subs	r3, r1, r3
 800a98c:	00db      	lsls	r3, r3, #3
 800a98e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a992:	4b36      	ldr	r3, [pc, #216]	; (800aa6c <UART_SetConfig+0x2d4>)
 800a994:	fba3 2302 	umull	r2, r3, r3, r2
 800a998:	095b      	lsrs	r3, r3, #5
 800a99a:	005b      	lsls	r3, r3, #1
 800a99c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a9a0:	441c      	add	r4, r3
 800a9a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a9a6:	2200      	movs	r2, #0
 800a9a8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a9ac:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a9b0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a9b4:	4642      	mov	r2, r8
 800a9b6:	464b      	mov	r3, r9
 800a9b8:	1891      	adds	r1, r2, r2
 800a9ba:	63b9      	str	r1, [r7, #56]	; 0x38
 800a9bc:	415b      	adcs	r3, r3
 800a9be:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a9c0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a9c4:	4641      	mov	r1, r8
 800a9c6:	1851      	adds	r1, r2, r1
 800a9c8:	6339      	str	r1, [r7, #48]	; 0x30
 800a9ca:	4649      	mov	r1, r9
 800a9cc:	414b      	adcs	r3, r1
 800a9ce:	637b      	str	r3, [r7, #52]	; 0x34
 800a9d0:	f04f 0200 	mov.w	r2, #0
 800a9d4:	f04f 0300 	mov.w	r3, #0
 800a9d8:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a9dc:	4659      	mov	r1, fp
 800a9de:	00cb      	lsls	r3, r1, #3
 800a9e0:	4651      	mov	r1, sl
 800a9e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9e6:	4651      	mov	r1, sl
 800a9e8:	00ca      	lsls	r2, r1, #3
 800a9ea:	4610      	mov	r0, r2
 800a9ec:	4619      	mov	r1, r3
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	4642      	mov	r2, r8
 800a9f2:	189b      	adds	r3, r3, r2
 800a9f4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9f8:	464b      	mov	r3, r9
 800a9fa:	460a      	mov	r2, r1
 800a9fc:	eb42 0303 	adc.w	r3, r2, r3
 800aa00:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800aa04:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa08:	685b      	ldr	r3, [r3, #4]
 800aa0a:	2200      	movs	r2, #0
 800aa0c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800aa10:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800aa14:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800aa18:	460b      	mov	r3, r1
 800aa1a:	18db      	adds	r3, r3, r3
 800aa1c:	62bb      	str	r3, [r7, #40]	; 0x28
 800aa1e:	4613      	mov	r3, r2
 800aa20:	eb42 0303 	adc.w	r3, r2, r3
 800aa24:	62fb      	str	r3, [r7, #44]	; 0x2c
 800aa26:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa2a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa2e:	f7f6 f92b 	bl	8000c88 <__aeabi_uldivmod>
 800aa32:	4602      	mov	r2, r0
 800aa34:	460b      	mov	r3, r1
 800aa36:	4b0d      	ldr	r3, [pc, #52]	; (800aa6c <UART_SetConfig+0x2d4>)
 800aa38:	fba3 1302 	umull	r1, r3, r3, r2
 800aa3c:	095b      	lsrs	r3, r3, #5
 800aa3e:	2164      	movs	r1, #100	; 0x64
 800aa40:	fb01 f303 	mul.w	r3, r1, r3
 800aa44:	1ad3      	subs	r3, r2, r3
 800aa46:	00db      	lsls	r3, r3, #3
 800aa48:	3332      	adds	r3, #50	; 0x32
 800aa4a:	4a08      	ldr	r2, [pc, #32]	; (800aa6c <UART_SetConfig+0x2d4>)
 800aa4c:	fba2 2303 	umull	r2, r3, r2, r3
 800aa50:	095b      	lsrs	r3, r3, #5
 800aa52:	f003 0207 	and.w	r2, r3, #7
 800aa56:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa5a:	681b      	ldr	r3, [r3, #0]
 800aa5c:	4422      	add	r2, r4
 800aa5e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa60:	e105      	b.n	800ac6e <UART_SetConfig+0x4d6>
 800aa62:	bf00      	nop
 800aa64:	40011000 	.word	0x40011000
 800aa68:	40011400 	.word	0x40011400
 800aa6c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa70:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa74:	2200      	movs	r2, #0
 800aa76:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa7a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa7e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa82:	4642      	mov	r2, r8
 800aa84:	464b      	mov	r3, r9
 800aa86:	1891      	adds	r1, r2, r2
 800aa88:	6239      	str	r1, [r7, #32]
 800aa8a:	415b      	adcs	r3, r3
 800aa8c:	627b      	str	r3, [r7, #36]	; 0x24
 800aa8e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa92:	4641      	mov	r1, r8
 800aa94:	1854      	adds	r4, r2, r1
 800aa96:	4649      	mov	r1, r9
 800aa98:	eb43 0501 	adc.w	r5, r3, r1
 800aa9c:	f04f 0200 	mov.w	r2, #0
 800aaa0:	f04f 0300 	mov.w	r3, #0
 800aaa4:	00eb      	lsls	r3, r5, #3
 800aaa6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aaaa:	00e2      	lsls	r2, r4, #3
 800aaac:	4614      	mov	r4, r2
 800aaae:	461d      	mov	r5, r3
 800aab0:	4643      	mov	r3, r8
 800aab2:	18e3      	adds	r3, r4, r3
 800aab4:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aab8:	464b      	mov	r3, r9
 800aaba:	eb45 0303 	adc.w	r3, r5, r3
 800aabe:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aac2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aac6:	685b      	ldr	r3, [r3, #4]
 800aac8:	2200      	movs	r2, #0
 800aaca:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aace:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aad2:	f04f 0200 	mov.w	r2, #0
 800aad6:	f04f 0300 	mov.w	r3, #0
 800aada:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aade:	4629      	mov	r1, r5
 800aae0:	008b      	lsls	r3, r1, #2
 800aae2:	4621      	mov	r1, r4
 800aae4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aae8:	4621      	mov	r1, r4
 800aaea:	008a      	lsls	r2, r1, #2
 800aaec:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aaf0:	f7f6 f8ca 	bl	8000c88 <__aeabi_uldivmod>
 800aaf4:	4602      	mov	r2, r0
 800aaf6:	460b      	mov	r3, r1
 800aaf8:	4b60      	ldr	r3, [pc, #384]	; (800ac7c <UART_SetConfig+0x4e4>)
 800aafa:	fba3 2302 	umull	r2, r3, r3, r2
 800aafe:	095b      	lsrs	r3, r3, #5
 800ab00:	011c      	lsls	r4, r3, #4
 800ab02:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab06:	2200      	movs	r2, #0
 800ab08:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800ab0c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800ab10:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800ab14:	4642      	mov	r2, r8
 800ab16:	464b      	mov	r3, r9
 800ab18:	1891      	adds	r1, r2, r2
 800ab1a:	61b9      	str	r1, [r7, #24]
 800ab1c:	415b      	adcs	r3, r3
 800ab1e:	61fb      	str	r3, [r7, #28]
 800ab20:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800ab24:	4641      	mov	r1, r8
 800ab26:	1851      	adds	r1, r2, r1
 800ab28:	6139      	str	r1, [r7, #16]
 800ab2a:	4649      	mov	r1, r9
 800ab2c:	414b      	adcs	r3, r1
 800ab2e:	617b      	str	r3, [r7, #20]
 800ab30:	f04f 0200 	mov.w	r2, #0
 800ab34:	f04f 0300 	mov.w	r3, #0
 800ab38:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab3c:	4659      	mov	r1, fp
 800ab3e:	00cb      	lsls	r3, r1, #3
 800ab40:	4651      	mov	r1, sl
 800ab42:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab46:	4651      	mov	r1, sl
 800ab48:	00ca      	lsls	r2, r1, #3
 800ab4a:	4610      	mov	r0, r2
 800ab4c:	4619      	mov	r1, r3
 800ab4e:	4603      	mov	r3, r0
 800ab50:	4642      	mov	r2, r8
 800ab52:	189b      	adds	r3, r3, r2
 800ab54:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab58:	464b      	mov	r3, r9
 800ab5a:	460a      	mov	r2, r1
 800ab5c:	eb42 0303 	adc.w	r3, r2, r3
 800ab60:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab68:	685b      	ldr	r3, [r3, #4]
 800ab6a:	2200      	movs	r2, #0
 800ab6c:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab6e:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab70:	f04f 0200 	mov.w	r2, #0
 800ab74:	f04f 0300 	mov.w	r3, #0
 800ab78:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab7c:	4649      	mov	r1, r9
 800ab7e:	008b      	lsls	r3, r1, #2
 800ab80:	4641      	mov	r1, r8
 800ab82:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab86:	4641      	mov	r1, r8
 800ab88:	008a      	lsls	r2, r1, #2
 800ab8a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab8e:	f7f6 f87b 	bl	8000c88 <__aeabi_uldivmod>
 800ab92:	4602      	mov	r2, r0
 800ab94:	460b      	mov	r3, r1
 800ab96:	4b39      	ldr	r3, [pc, #228]	; (800ac7c <UART_SetConfig+0x4e4>)
 800ab98:	fba3 1302 	umull	r1, r3, r3, r2
 800ab9c:	095b      	lsrs	r3, r3, #5
 800ab9e:	2164      	movs	r1, #100	; 0x64
 800aba0:	fb01 f303 	mul.w	r3, r1, r3
 800aba4:	1ad3      	subs	r3, r2, r3
 800aba6:	011b      	lsls	r3, r3, #4
 800aba8:	3332      	adds	r3, #50	; 0x32
 800abaa:	4a34      	ldr	r2, [pc, #208]	; (800ac7c <UART_SetConfig+0x4e4>)
 800abac:	fba2 2303 	umull	r2, r3, r2, r3
 800abb0:	095b      	lsrs	r3, r3, #5
 800abb2:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800abb6:	441c      	add	r4, r3
 800abb8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800abbc:	2200      	movs	r2, #0
 800abbe:	673b      	str	r3, [r7, #112]	; 0x70
 800abc0:	677a      	str	r2, [r7, #116]	; 0x74
 800abc2:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800abc6:	4642      	mov	r2, r8
 800abc8:	464b      	mov	r3, r9
 800abca:	1891      	adds	r1, r2, r2
 800abcc:	60b9      	str	r1, [r7, #8]
 800abce:	415b      	adcs	r3, r3
 800abd0:	60fb      	str	r3, [r7, #12]
 800abd2:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abd6:	4641      	mov	r1, r8
 800abd8:	1851      	adds	r1, r2, r1
 800abda:	6039      	str	r1, [r7, #0]
 800abdc:	4649      	mov	r1, r9
 800abde:	414b      	adcs	r3, r1
 800abe0:	607b      	str	r3, [r7, #4]
 800abe2:	f04f 0200 	mov.w	r2, #0
 800abe6:	f04f 0300 	mov.w	r3, #0
 800abea:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800abee:	4659      	mov	r1, fp
 800abf0:	00cb      	lsls	r3, r1, #3
 800abf2:	4651      	mov	r1, sl
 800abf4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abf8:	4651      	mov	r1, sl
 800abfa:	00ca      	lsls	r2, r1, #3
 800abfc:	4610      	mov	r0, r2
 800abfe:	4619      	mov	r1, r3
 800ac00:	4603      	mov	r3, r0
 800ac02:	4642      	mov	r2, r8
 800ac04:	189b      	adds	r3, r3, r2
 800ac06:	66bb      	str	r3, [r7, #104]	; 0x68
 800ac08:	464b      	mov	r3, r9
 800ac0a:	460a      	mov	r2, r1
 800ac0c:	eb42 0303 	adc.w	r3, r2, r3
 800ac10:	66fb      	str	r3, [r7, #108]	; 0x6c
 800ac12:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac16:	685b      	ldr	r3, [r3, #4]
 800ac18:	2200      	movs	r2, #0
 800ac1a:	663b      	str	r3, [r7, #96]	; 0x60
 800ac1c:	667a      	str	r2, [r7, #100]	; 0x64
 800ac1e:	f04f 0200 	mov.w	r2, #0
 800ac22:	f04f 0300 	mov.w	r3, #0
 800ac26:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac2a:	4649      	mov	r1, r9
 800ac2c:	008b      	lsls	r3, r1, #2
 800ac2e:	4641      	mov	r1, r8
 800ac30:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac34:	4641      	mov	r1, r8
 800ac36:	008a      	lsls	r2, r1, #2
 800ac38:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ac3c:	f7f6 f824 	bl	8000c88 <__aeabi_uldivmod>
 800ac40:	4602      	mov	r2, r0
 800ac42:	460b      	mov	r3, r1
 800ac44:	4b0d      	ldr	r3, [pc, #52]	; (800ac7c <UART_SetConfig+0x4e4>)
 800ac46:	fba3 1302 	umull	r1, r3, r3, r2
 800ac4a:	095b      	lsrs	r3, r3, #5
 800ac4c:	2164      	movs	r1, #100	; 0x64
 800ac4e:	fb01 f303 	mul.w	r3, r1, r3
 800ac52:	1ad3      	subs	r3, r2, r3
 800ac54:	011b      	lsls	r3, r3, #4
 800ac56:	3332      	adds	r3, #50	; 0x32
 800ac58:	4a08      	ldr	r2, [pc, #32]	; (800ac7c <UART_SetConfig+0x4e4>)
 800ac5a:	fba2 2303 	umull	r2, r3, r2, r3
 800ac5e:	095b      	lsrs	r3, r3, #5
 800ac60:	f003 020f 	and.w	r2, r3, #15
 800ac64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac68:	681b      	ldr	r3, [r3, #0]
 800ac6a:	4422      	add	r2, r4
 800ac6c:	609a      	str	r2, [r3, #8]
}
 800ac6e:	bf00      	nop
 800ac70:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac74:	46bd      	mov	sp, r7
 800ac76:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac7a:	bf00      	nop
 800ac7c:	51eb851f 	.word	0x51eb851f

0800ac80 <atof>:
 800ac80:	2100      	movs	r1, #0
 800ac82:	f001 bcfd 	b.w	800c680 <strtod>
	...

0800ac88 <__errno>:
 800ac88:	4b01      	ldr	r3, [pc, #4]	; (800ac90 <__errno+0x8>)
 800ac8a:	6818      	ldr	r0, [r3, #0]
 800ac8c:	4770      	bx	lr
 800ac8e:	bf00      	nop
 800ac90:	20000020 	.word	0x20000020

0800ac94 <__libc_init_array>:
 800ac94:	b570      	push	{r4, r5, r6, lr}
 800ac96:	4d0d      	ldr	r5, [pc, #52]	; (800accc <__libc_init_array+0x38>)
 800ac98:	4c0d      	ldr	r4, [pc, #52]	; (800acd0 <__libc_init_array+0x3c>)
 800ac9a:	1b64      	subs	r4, r4, r5
 800ac9c:	10a4      	asrs	r4, r4, #2
 800ac9e:	2600      	movs	r6, #0
 800aca0:	42a6      	cmp	r6, r4
 800aca2:	d109      	bne.n	800acb8 <__libc_init_array+0x24>
 800aca4:	4d0b      	ldr	r5, [pc, #44]	; (800acd4 <__libc_init_array+0x40>)
 800aca6:	4c0c      	ldr	r4, [pc, #48]	; (800acd8 <__libc_init_array+0x44>)
 800aca8:	f004 fcfe 	bl	800f6a8 <_init>
 800acac:	1b64      	subs	r4, r4, r5
 800acae:	10a4      	asrs	r4, r4, #2
 800acb0:	2600      	movs	r6, #0
 800acb2:	42a6      	cmp	r6, r4
 800acb4:	d105      	bne.n	800acc2 <__libc_init_array+0x2e>
 800acb6:	bd70      	pop	{r4, r5, r6, pc}
 800acb8:	f855 3b04 	ldr.w	r3, [r5], #4
 800acbc:	4798      	blx	r3
 800acbe:	3601      	adds	r6, #1
 800acc0:	e7ee      	b.n	800aca0 <__libc_init_array+0xc>
 800acc2:	f855 3b04 	ldr.w	r3, [r5], #4
 800acc6:	4798      	blx	r3
 800acc8:	3601      	adds	r6, #1
 800acca:	e7f2      	b.n	800acb2 <__libc_init_array+0x1e>
 800accc:	0800fe20 	.word	0x0800fe20
 800acd0:	0800fe20 	.word	0x0800fe20
 800acd4:	0800fe20 	.word	0x0800fe20
 800acd8:	0800fe24 	.word	0x0800fe24

0800acdc <memset>:
 800acdc:	4402      	add	r2, r0
 800acde:	4603      	mov	r3, r0
 800ace0:	4293      	cmp	r3, r2
 800ace2:	d100      	bne.n	800ace6 <memset+0xa>
 800ace4:	4770      	bx	lr
 800ace6:	f803 1b01 	strb.w	r1, [r3], #1
 800acea:	e7f9      	b.n	800ace0 <memset+0x4>

0800acec <__cvt>:
 800acec:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acf0:	ec55 4b10 	vmov	r4, r5, d0
 800acf4:	2d00      	cmp	r5, #0
 800acf6:	460e      	mov	r6, r1
 800acf8:	4619      	mov	r1, r3
 800acfa:	462b      	mov	r3, r5
 800acfc:	bfbb      	ittet	lt
 800acfe:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800ad02:	461d      	movlt	r5, r3
 800ad04:	2300      	movge	r3, #0
 800ad06:	232d      	movlt	r3, #45	; 0x2d
 800ad08:	700b      	strb	r3, [r1, #0]
 800ad0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ad0c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ad10:	4691      	mov	r9, r2
 800ad12:	f023 0820 	bic.w	r8, r3, #32
 800ad16:	bfbc      	itt	lt
 800ad18:	4622      	movlt	r2, r4
 800ad1a:	4614      	movlt	r4, r2
 800ad1c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad20:	d005      	beq.n	800ad2e <__cvt+0x42>
 800ad22:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800ad26:	d100      	bne.n	800ad2a <__cvt+0x3e>
 800ad28:	3601      	adds	r6, #1
 800ad2a:	2102      	movs	r1, #2
 800ad2c:	e000      	b.n	800ad30 <__cvt+0x44>
 800ad2e:	2103      	movs	r1, #3
 800ad30:	ab03      	add	r3, sp, #12
 800ad32:	9301      	str	r3, [sp, #4]
 800ad34:	ab02      	add	r3, sp, #8
 800ad36:	9300      	str	r3, [sp, #0]
 800ad38:	ec45 4b10 	vmov	d0, r4, r5
 800ad3c:	4653      	mov	r3, sl
 800ad3e:	4632      	mov	r2, r6
 800ad40:	f001 fe36 	bl	800c9b0 <_dtoa_r>
 800ad44:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad48:	4607      	mov	r7, r0
 800ad4a:	d102      	bne.n	800ad52 <__cvt+0x66>
 800ad4c:	f019 0f01 	tst.w	r9, #1
 800ad50:	d022      	beq.n	800ad98 <__cvt+0xac>
 800ad52:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad56:	eb07 0906 	add.w	r9, r7, r6
 800ad5a:	d110      	bne.n	800ad7e <__cvt+0x92>
 800ad5c:	783b      	ldrb	r3, [r7, #0]
 800ad5e:	2b30      	cmp	r3, #48	; 0x30
 800ad60:	d10a      	bne.n	800ad78 <__cvt+0x8c>
 800ad62:	2200      	movs	r2, #0
 800ad64:	2300      	movs	r3, #0
 800ad66:	4620      	mov	r0, r4
 800ad68:	4629      	mov	r1, r5
 800ad6a:	f7f5 fead 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad6e:	b918      	cbnz	r0, 800ad78 <__cvt+0x8c>
 800ad70:	f1c6 0601 	rsb	r6, r6, #1
 800ad74:	f8ca 6000 	str.w	r6, [sl]
 800ad78:	f8da 3000 	ldr.w	r3, [sl]
 800ad7c:	4499      	add	r9, r3
 800ad7e:	2200      	movs	r2, #0
 800ad80:	2300      	movs	r3, #0
 800ad82:	4620      	mov	r0, r4
 800ad84:	4629      	mov	r1, r5
 800ad86:	f7f5 fe9f 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad8a:	b108      	cbz	r0, 800ad90 <__cvt+0xa4>
 800ad8c:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad90:	2230      	movs	r2, #48	; 0x30
 800ad92:	9b03      	ldr	r3, [sp, #12]
 800ad94:	454b      	cmp	r3, r9
 800ad96:	d307      	bcc.n	800ada8 <__cvt+0xbc>
 800ad98:	9b03      	ldr	r3, [sp, #12]
 800ad9a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad9c:	1bdb      	subs	r3, r3, r7
 800ad9e:	4638      	mov	r0, r7
 800ada0:	6013      	str	r3, [r2, #0]
 800ada2:	b004      	add	sp, #16
 800ada4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ada8:	1c59      	adds	r1, r3, #1
 800adaa:	9103      	str	r1, [sp, #12]
 800adac:	701a      	strb	r2, [r3, #0]
 800adae:	e7f0      	b.n	800ad92 <__cvt+0xa6>

0800adb0 <__exponent>:
 800adb0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800adb2:	4603      	mov	r3, r0
 800adb4:	2900      	cmp	r1, #0
 800adb6:	bfb8      	it	lt
 800adb8:	4249      	neglt	r1, r1
 800adba:	f803 2b02 	strb.w	r2, [r3], #2
 800adbe:	bfb4      	ite	lt
 800adc0:	222d      	movlt	r2, #45	; 0x2d
 800adc2:	222b      	movge	r2, #43	; 0x2b
 800adc4:	2909      	cmp	r1, #9
 800adc6:	7042      	strb	r2, [r0, #1]
 800adc8:	dd2a      	ble.n	800ae20 <__exponent+0x70>
 800adca:	f10d 0407 	add.w	r4, sp, #7
 800adce:	46a4      	mov	ip, r4
 800add0:	270a      	movs	r7, #10
 800add2:	46a6      	mov	lr, r4
 800add4:	460a      	mov	r2, r1
 800add6:	fb91 f6f7 	sdiv	r6, r1, r7
 800adda:	fb07 1516 	mls	r5, r7, r6, r1
 800adde:	3530      	adds	r5, #48	; 0x30
 800ade0:	2a63      	cmp	r2, #99	; 0x63
 800ade2:	f104 34ff 	add.w	r4, r4, #4294967295
 800ade6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800adea:	4631      	mov	r1, r6
 800adec:	dcf1      	bgt.n	800add2 <__exponent+0x22>
 800adee:	3130      	adds	r1, #48	; 0x30
 800adf0:	f1ae 0502 	sub.w	r5, lr, #2
 800adf4:	f804 1c01 	strb.w	r1, [r4, #-1]
 800adf8:	1c44      	adds	r4, r0, #1
 800adfa:	4629      	mov	r1, r5
 800adfc:	4561      	cmp	r1, ip
 800adfe:	d30a      	bcc.n	800ae16 <__exponent+0x66>
 800ae00:	f10d 0209 	add.w	r2, sp, #9
 800ae04:	eba2 020e 	sub.w	r2, r2, lr
 800ae08:	4565      	cmp	r5, ip
 800ae0a:	bf88      	it	hi
 800ae0c:	2200      	movhi	r2, #0
 800ae0e:	4413      	add	r3, r2
 800ae10:	1a18      	subs	r0, r3, r0
 800ae12:	b003      	add	sp, #12
 800ae14:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae16:	f811 2b01 	ldrb.w	r2, [r1], #1
 800ae1a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800ae1e:	e7ed      	b.n	800adfc <__exponent+0x4c>
 800ae20:	2330      	movs	r3, #48	; 0x30
 800ae22:	3130      	adds	r1, #48	; 0x30
 800ae24:	7083      	strb	r3, [r0, #2]
 800ae26:	70c1      	strb	r1, [r0, #3]
 800ae28:	1d03      	adds	r3, r0, #4
 800ae2a:	e7f1      	b.n	800ae10 <__exponent+0x60>

0800ae2c <_printf_float>:
 800ae2c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae30:	ed2d 8b02 	vpush	{d8}
 800ae34:	b08d      	sub	sp, #52	; 0x34
 800ae36:	460c      	mov	r4, r1
 800ae38:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae3c:	4616      	mov	r6, r2
 800ae3e:	461f      	mov	r7, r3
 800ae40:	4605      	mov	r5, r0
 800ae42:	f002 ff25 	bl	800dc90 <_localeconv_r>
 800ae46:	f8d0 a000 	ldr.w	sl, [r0]
 800ae4a:	4650      	mov	r0, sl
 800ae4c:	f7f5 f9c0 	bl	80001d0 <strlen>
 800ae50:	2300      	movs	r3, #0
 800ae52:	930a      	str	r3, [sp, #40]	; 0x28
 800ae54:	6823      	ldr	r3, [r4, #0]
 800ae56:	9305      	str	r3, [sp, #20]
 800ae58:	f8d8 3000 	ldr.w	r3, [r8]
 800ae5c:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae60:	3307      	adds	r3, #7
 800ae62:	f023 0307 	bic.w	r3, r3, #7
 800ae66:	f103 0208 	add.w	r2, r3, #8
 800ae6a:	f8c8 2000 	str.w	r2, [r8]
 800ae6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae72:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae76:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae7a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae7e:	9307      	str	r3, [sp, #28]
 800ae80:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae84:	ee08 0a10 	vmov	s16, r0
 800ae88:	4b9f      	ldr	r3, [pc, #636]	; (800b108 <_printf_float+0x2dc>)
 800ae8a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae8e:	f04f 32ff 	mov.w	r2, #4294967295
 800ae92:	f7f5 fe4b 	bl	8000b2c <__aeabi_dcmpun>
 800ae96:	bb88      	cbnz	r0, 800aefc <_printf_float+0xd0>
 800ae98:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae9c:	4b9a      	ldr	r3, [pc, #616]	; (800b108 <_printf_float+0x2dc>)
 800ae9e:	f04f 32ff 	mov.w	r2, #4294967295
 800aea2:	f7f5 fe25 	bl	8000af0 <__aeabi_dcmple>
 800aea6:	bb48      	cbnz	r0, 800aefc <_printf_float+0xd0>
 800aea8:	2200      	movs	r2, #0
 800aeaa:	2300      	movs	r3, #0
 800aeac:	4640      	mov	r0, r8
 800aeae:	4649      	mov	r1, r9
 800aeb0:	f7f5 fe14 	bl	8000adc <__aeabi_dcmplt>
 800aeb4:	b110      	cbz	r0, 800aebc <_printf_float+0x90>
 800aeb6:	232d      	movs	r3, #45	; 0x2d
 800aeb8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800aebc:	4b93      	ldr	r3, [pc, #588]	; (800b10c <_printf_float+0x2e0>)
 800aebe:	4894      	ldr	r0, [pc, #592]	; (800b110 <_printf_float+0x2e4>)
 800aec0:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800aec4:	bf94      	ite	ls
 800aec6:	4698      	movls	r8, r3
 800aec8:	4680      	movhi	r8, r0
 800aeca:	2303      	movs	r3, #3
 800aecc:	6123      	str	r3, [r4, #16]
 800aece:	9b05      	ldr	r3, [sp, #20]
 800aed0:	f023 0204 	bic.w	r2, r3, #4
 800aed4:	6022      	str	r2, [r4, #0]
 800aed6:	f04f 0900 	mov.w	r9, #0
 800aeda:	9700      	str	r7, [sp, #0]
 800aedc:	4633      	mov	r3, r6
 800aede:	aa0b      	add	r2, sp, #44	; 0x2c
 800aee0:	4621      	mov	r1, r4
 800aee2:	4628      	mov	r0, r5
 800aee4:	f000 f9d8 	bl	800b298 <_printf_common>
 800aee8:	3001      	adds	r0, #1
 800aeea:	f040 8090 	bne.w	800b00e <_printf_float+0x1e2>
 800aeee:	f04f 30ff 	mov.w	r0, #4294967295
 800aef2:	b00d      	add	sp, #52	; 0x34
 800aef4:	ecbd 8b02 	vpop	{d8}
 800aef8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aefc:	4642      	mov	r2, r8
 800aefe:	464b      	mov	r3, r9
 800af00:	4640      	mov	r0, r8
 800af02:	4649      	mov	r1, r9
 800af04:	f7f5 fe12 	bl	8000b2c <__aeabi_dcmpun>
 800af08:	b140      	cbz	r0, 800af1c <_printf_float+0xf0>
 800af0a:	464b      	mov	r3, r9
 800af0c:	2b00      	cmp	r3, #0
 800af0e:	bfbc      	itt	lt
 800af10:	232d      	movlt	r3, #45	; 0x2d
 800af12:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800af16:	487f      	ldr	r0, [pc, #508]	; (800b114 <_printf_float+0x2e8>)
 800af18:	4b7f      	ldr	r3, [pc, #508]	; (800b118 <_printf_float+0x2ec>)
 800af1a:	e7d1      	b.n	800aec0 <_printf_float+0x94>
 800af1c:	6863      	ldr	r3, [r4, #4]
 800af1e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800af22:	9206      	str	r2, [sp, #24]
 800af24:	1c5a      	adds	r2, r3, #1
 800af26:	d13f      	bne.n	800afa8 <_printf_float+0x17c>
 800af28:	2306      	movs	r3, #6
 800af2a:	6063      	str	r3, [r4, #4]
 800af2c:	9b05      	ldr	r3, [sp, #20]
 800af2e:	6861      	ldr	r1, [r4, #4]
 800af30:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af34:	2300      	movs	r3, #0
 800af36:	9303      	str	r3, [sp, #12]
 800af38:	ab0a      	add	r3, sp, #40	; 0x28
 800af3a:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af3e:	ab09      	add	r3, sp, #36	; 0x24
 800af40:	ec49 8b10 	vmov	d0, r8, r9
 800af44:	9300      	str	r3, [sp, #0]
 800af46:	6022      	str	r2, [r4, #0]
 800af48:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af4c:	4628      	mov	r0, r5
 800af4e:	f7ff fecd 	bl	800acec <__cvt>
 800af52:	9b06      	ldr	r3, [sp, #24]
 800af54:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af56:	2b47      	cmp	r3, #71	; 0x47
 800af58:	4680      	mov	r8, r0
 800af5a:	d108      	bne.n	800af6e <_printf_float+0x142>
 800af5c:	1cc8      	adds	r0, r1, #3
 800af5e:	db02      	blt.n	800af66 <_printf_float+0x13a>
 800af60:	6863      	ldr	r3, [r4, #4]
 800af62:	4299      	cmp	r1, r3
 800af64:	dd41      	ble.n	800afea <_printf_float+0x1be>
 800af66:	f1ab 0b02 	sub.w	fp, fp, #2
 800af6a:	fa5f fb8b 	uxtb.w	fp, fp
 800af6e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af72:	d820      	bhi.n	800afb6 <_printf_float+0x18a>
 800af74:	3901      	subs	r1, #1
 800af76:	465a      	mov	r2, fp
 800af78:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af7c:	9109      	str	r1, [sp, #36]	; 0x24
 800af7e:	f7ff ff17 	bl	800adb0 <__exponent>
 800af82:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af84:	1813      	adds	r3, r2, r0
 800af86:	2a01      	cmp	r2, #1
 800af88:	4681      	mov	r9, r0
 800af8a:	6123      	str	r3, [r4, #16]
 800af8c:	dc02      	bgt.n	800af94 <_printf_float+0x168>
 800af8e:	6822      	ldr	r2, [r4, #0]
 800af90:	07d2      	lsls	r2, r2, #31
 800af92:	d501      	bpl.n	800af98 <_printf_float+0x16c>
 800af94:	3301      	adds	r3, #1
 800af96:	6123      	str	r3, [r4, #16]
 800af98:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af9c:	2b00      	cmp	r3, #0
 800af9e:	d09c      	beq.n	800aeda <_printf_float+0xae>
 800afa0:	232d      	movs	r3, #45	; 0x2d
 800afa2:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800afa6:	e798      	b.n	800aeda <_printf_float+0xae>
 800afa8:	9a06      	ldr	r2, [sp, #24]
 800afaa:	2a47      	cmp	r2, #71	; 0x47
 800afac:	d1be      	bne.n	800af2c <_printf_float+0x100>
 800afae:	2b00      	cmp	r3, #0
 800afb0:	d1bc      	bne.n	800af2c <_printf_float+0x100>
 800afb2:	2301      	movs	r3, #1
 800afb4:	e7b9      	b.n	800af2a <_printf_float+0xfe>
 800afb6:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800afba:	d118      	bne.n	800afee <_printf_float+0x1c2>
 800afbc:	2900      	cmp	r1, #0
 800afbe:	6863      	ldr	r3, [r4, #4]
 800afc0:	dd0b      	ble.n	800afda <_printf_float+0x1ae>
 800afc2:	6121      	str	r1, [r4, #16]
 800afc4:	b913      	cbnz	r3, 800afcc <_printf_float+0x1a0>
 800afc6:	6822      	ldr	r2, [r4, #0]
 800afc8:	07d0      	lsls	r0, r2, #31
 800afca:	d502      	bpl.n	800afd2 <_printf_float+0x1a6>
 800afcc:	3301      	adds	r3, #1
 800afce:	440b      	add	r3, r1
 800afd0:	6123      	str	r3, [r4, #16]
 800afd2:	65a1      	str	r1, [r4, #88]	; 0x58
 800afd4:	f04f 0900 	mov.w	r9, #0
 800afd8:	e7de      	b.n	800af98 <_printf_float+0x16c>
 800afda:	b913      	cbnz	r3, 800afe2 <_printf_float+0x1b6>
 800afdc:	6822      	ldr	r2, [r4, #0]
 800afde:	07d2      	lsls	r2, r2, #31
 800afe0:	d501      	bpl.n	800afe6 <_printf_float+0x1ba>
 800afe2:	3302      	adds	r3, #2
 800afe4:	e7f4      	b.n	800afd0 <_printf_float+0x1a4>
 800afe6:	2301      	movs	r3, #1
 800afe8:	e7f2      	b.n	800afd0 <_printf_float+0x1a4>
 800afea:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800afee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800aff0:	4299      	cmp	r1, r3
 800aff2:	db05      	blt.n	800b000 <_printf_float+0x1d4>
 800aff4:	6823      	ldr	r3, [r4, #0]
 800aff6:	6121      	str	r1, [r4, #16]
 800aff8:	07d8      	lsls	r0, r3, #31
 800affa:	d5ea      	bpl.n	800afd2 <_printf_float+0x1a6>
 800affc:	1c4b      	adds	r3, r1, #1
 800affe:	e7e7      	b.n	800afd0 <_printf_float+0x1a4>
 800b000:	2900      	cmp	r1, #0
 800b002:	bfd4      	ite	le
 800b004:	f1c1 0202 	rsble	r2, r1, #2
 800b008:	2201      	movgt	r2, #1
 800b00a:	4413      	add	r3, r2
 800b00c:	e7e0      	b.n	800afd0 <_printf_float+0x1a4>
 800b00e:	6823      	ldr	r3, [r4, #0]
 800b010:	055a      	lsls	r2, r3, #21
 800b012:	d407      	bmi.n	800b024 <_printf_float+0x1f8>
 800b014:	6923      	ldr	r3, [r4, #16]
 800b016:	4642      	mov	r2, r8
 800b018:	4631      	mov	r1, r6
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b8      	blx	r7
 800b01e:	3001      	adds	r0, #1
 800b020:	d12c      	bne.n	800b07c <_printf_float+0x250>
 800b022:	e764      	b.n	800aeee <_printf_float+0xc2>
 800b024:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b028:	f240 80e0 	bls.w	800b1ec <_printf_float+0x3c0>
 800b02c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b030:	2200      	movs	r2, #0
 800b032:	2300      	movs	r3, #0
 800b034:	f7f5 fd48 	bl	8000ac8 <__aeabi_dcmpeq>
 800b038:	2800      	cmp	r0, #0
 800b03a:	d034      	beq.n	800b0a6 <_printf_float+0x27a>
 800b03c:	4a37      	ldr	r2, [pc, #220]	; (800b11c <_printf_float+0x2f0>)
 800b03e:	2301      	movs	r3, #1
 800b040:	4631      	mov	r1, r6
 800b042:	4628      	mov	r0, r5
 800b044:	47b8      	blx	r7
 800b046:	3001      	adds	r0, #1
 800b048:	f43f af51 	beq.w	800aeee <_printf_float+0xc2>
 800b04c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b050:	429a      	cmp	r2, r3
 800b052:	db02      	blt.n	800b05a <_printf_float+0x22e>
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	07d8      	lsls	r0, r3, #31
 800b058:	d510      	bpl.n	800b07c <_printf_float+0x250>
 800b05a:	ee18 3a10 	vmov	r3, s16
 800b05e:	4652      	mov	r2, sl
 800b060:	4631      	mov	r1, r6
 800b062:	4628      	mov	r0, r5
 800b064:	47b8      	blx	r7
 800b066:	3001      	adds	r0, #1
 800b068:	f43f af41 	beq.w	800aeee <_printf_float+0xc2>
 800b06c:	f04f 0800 	mov.w	r8, #0
 800b070:	f104 091a 	add.w	r9, r4, #26
 800b074:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b076:	3b01      	subs	r3, #1
 800b078:	4543      	cmp	r3, r8
 800b07a:	dc09      	bgt.n	800b090 <_printf_float+0x264>
 800b07c:	6823      	ldr	r3, [r4, #0]
 800b07e:	079b      	lsls	r3, r3, #30
 800b080:	f100 8105 	bmi.w	800b28e <_printf_float+0x462>
 800b084:	68e0      	ldr	r0, [r4, #12]
 800b086:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b088:	4298      	cmp	r0, r3
 800b08a:	bfb8      	it	lt
 800b08c:	4618      	movlt	r0, r3
 800b08e:	e730      	b.n	800aef2 <_printf_float+0xc6>
 800b090:	2301      	movs	r3, #1
 800b092:	464a      	mov	r2, r9
 800b094:	4631      	mov	r1, r6
 800b096:	4628      	mov	r0, r5
 800b098:	47b8      	blx	r7
 800b09a:	3001      	adds	r0, #1
 800b09c:	f43f af27 	beq.w	800aeee <_printf_float+0xc2>
 800b0a0:	f108 0801 	add.w	r8, r8, #1
 800b0a4:	e7e6      	b.n	800b074 <_printf_float+0x248>
 800b0a6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0a8:	2b00      	cmp	r3, #0
 800b0aa:	dc39      	bgt.n	800b120 <_printf_float+0x2f4>
 800b0ac:	4a1b      	ldr	r2, [pc, #108]	; (800b11c <_printf_float+0x2f0>)
 800b0ae:	2301      	movs	r3, #1
 800b0b0:	4631      	mov	r1, r6
 800b0b2:	4628      	mov	r0, r5
 800b0b4:	47b8      	blx	r7
 800b0b6:	3001      	adds	r0, #1
 800b0b8:	f43f af19 	beq.w	800aeee <_printf_float+0xc2>
 800b0bc:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b0c0:	4313      	orrs	r3, r2
 800b0c2:	d102      	bne.n	800b0ca <_printf_float+0x29e>
 800b0c4:	6823      	ldr	r3, [r4, #0]
 800b0c6:	07d9      	lsls	r1, r3, #31
 800b0c8:	d5d8      	bpl.n	800b07c <_printf_float+0x250>
 800b0ca:	ee18 3a10 	vmov	r3, s16
 800b0ce:	4652      	mov	r2, sl
 800b0d0:	4631      	mov	r1, r6
 800b0d2:	4628      	mov	r0, r5
 800b0d4:	47b8      	blx	r7
 800b0d6:	3001      	adds	r0, #1
 800b0d8:	f43f af09 	beq.w	800aeee <_printf_float+0xc2>
 800b0dc:	f04f 0900 	mov.w	r9, #0
 800b0e0:	f104 0a1a 	add.w	sl, r4, #26
 800b0e4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0e6:	425b      	negs	r3, r3
 800b0e8:	454b      	cmp	r3, r9
 800b0ea:	dc01      	bgt.n	800b0f0 <_printf_float+0x2c4>
 800b0ec:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0ee:	e792      	b.n	800b016 <_printf_float+0x1ea>
 800b0f0:	2301      	movs	r3, #1
 800b0f2:	4652      	mov	r2, sl
 800b0f4:	4631      	mov	r1, r6
 800b0f6:	4628      	mov	r0, r5
 800b0f8:	47b8      	blx	r7
 800b0fa:	3001      	adds	r0, #1
 800b0fc:	f43f aef7 	beq.w	800aeee <_printf_float+0xc2>
 800b100:	f109 0901 	add.w	r9, r9, #1
 800b104:	e7ee      	b.n	800b0e4 <_printf_float+0x2b8>
 800b106:	bf00      	nop
 800b108:	7fefffff 	.word	0x7fefffff
 800b10c:	0800f91c 	.word	0x0800f91c
 800b110:	0800f920 	.word	0x0800f920
 800b114:	0800f928 	.word	0x0800f928
 800b118:	0800f924 	.word	0x0800f924
 800b11c:	0800f92c 	.word	0x0800f92c
 800b120:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b122:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b124:	429a      	cmp	r2, r3
 800b126:	bfa8      	it	ge
 800b128:	461a      	movge	r2, r3
 800b12a:	2a00      	cmp	r2, #0
 800b12c:	4691      	mov	r9, r2
 800b12e:	dc37      	bgt.n	800b1a0 <_printf_float+0x374>
 800b130:	f04f 0b00 	mov.w	fp, #0
 800b134:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b138:	f104 021a 	add.w	r2, r4, #26
 800b13c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b13e:	9305      	str	r3, [sp, #20]
 800b140:	eba3 0309 	sub.w	r3, r3, r9
 800b144:	455b      	cmp	r3, fp
 800b146:	dc33      	bgt.n	800b1b0 <_printf_float+0x384>
 800b148:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b14c:	429a      	cmp	r2, r3
 800b14e:	db3b      	blt.n	800b1c8 <_printf_float+0x39c>
 800b150:	6823      	ldr	r3, [r4, #0]
 800b152:	07da      	lsls	r2, r3, #31
 800b154:	d438      	bmi.n	800b1c8 <_printf_float+0x39c>
 800b156:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b158:	9a05      	ldr	r2, [sp, #20]
 800b15a:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b15c:	1a9a      	subs	r2, r3, r2
 800b15e:	eba3 0901 	sub.w	r9, r3, r1
 800b162:	4591      	cmp	r9, r2
 800b164:	bfa8      	it	ge
 800b166:	4691      	movge	r9, r2
 800b168:	f1b9 0f00 	cmp.w	r9, #0
 800b16c:	dc35      	bgt.n	800b1da <_printf_float+0x3ae>
 800b16e:	f04f 0800 	mov.w	r8, #0
 800b172:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b176:	f104 0a1a 	add.w	sl, r4, #26
 800b17a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b17e:	1a9b      	subs	r3, r3, r2
 800b180:	eba3 0309 	sub.w	r3, r3, r9
 800b184:	4543      	cmp	r3, r8
 800b186:	f77f af79 	ble.w	800b07c <_printf_float+0x250>
 800b18a:	2301      	movs	r3, #1
 800b18c:	4652      	mov	r2, sl
 800b18e:	4631      	mov	r1, r6
 800b190:	4628      	mov	r0, r5
 800b192:	47b8      	blx	r7
 800b194:	3001      	adds	r0, #1
 800b196:	f43f aeaa 	beq.w	800aeee <_printf_float+0xc2>
 800b19a:	f108 0801 	add.w	r8, r8, #1
 800b19e:	e7ec      	b.n	800b17a <_printf_float+0x34e>
 800b1a0:	4613      	mov	r3, r2
 800b1a2:	4631      	mov	r1, r6
 800b1a4:	4642      	mov	r2, r8
 800b1a6:	4628      	mov	r0, r5
 800b1a8:	47b8      	blx	r7
 800b1aa:	3001      	adds	r0, #1
 800b1ac:	d1c0      	bne.n	800b130 <_printf_float+0x304>
 800b1ae:	e69e      	b.n	800aeee <_printf_float+0xc2>
 800b1b0:	2301      	movs	r3, #1
 800b1b2:	4631      	mov	r1, r6
 800b1b4:	4628      	mov	r0, r5
 800b1b6:	9205      	str	r2, [sp, #20]
 800b1b8:	47b8      	blx	r7
 800b1ba:	3001      	adds	r0, #1
 800b1bc:	f43f ae97 	beq.w	800aeee <_printf_float+0xc2>
 800b1c0:	9a05      	ldr	r2, [sp, #20]
 800b1c2:	f10b 0b01 	add.w	fp, fp, #1
 800b1c6:	e7b9      	b.n	800b13c <_printf_float+0x310>
 800b1c8:	ee18 3a10 	vmov	r3, s16
 800b1cc:	4652      	mov	r2, sl
 800b1ce:	4631      	mov	r1, r6
 800b1d0:	4628      	mov	r0, r5
 800b1d2:	47b8      	blx	r7
 800b1d4:	3001      	adds	r0, #1
 800b1d6:	d1be      	bne.n	800b156 <_printf_float+0x32a>
 800b1d8:	e689      	b.n	800aeee <_printf_float+0xc2>
 800b1da:	9a05      	ldr	r2, [sp, #20]
 800b1dc:	464b      	mov	r3, r9
 800b1de:	4442      	add	r2, r8
 800b1e0:	4631      	mov	r1, r6
 800b1e2:	4628      	mov	r0, r5
 800b1e4:	47b8      	blx	r7
 800b1e6:	3001      	adds	r0, #1
 800b1e8:	d1c1      	bne.n	800b16e <_printf_float+0x342>
 800b1ea:	e680      	b.n	800aeee <_printf_float+0xc2>
 800b1ec:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1ee:	2a01      	cmp	r2, #1
 800b1f0:	dc01      	bgt.n	800b1f6 <_printf_float+0x3ca>
 800b1f2:	07db      	lsls	r3, r3, #31
 800b1f4:	d538      	bpl.n	800b268 <_printf_float+0x43c>
 800b1f6:	2301      	movs	r3, #1
 800b1f8:	4642      	mov	r2, r8
 800b1fa:	4631      	mov	r1, r6
 800b1fc:	4628      	mov	r0, r5
 800b1fe:	47b8      	blx	r7
 800b200:	3001      	adds	r0, #1
 800b202:	f43f ae74 	beq.w	800aeee <_printf_float+0xc2>
 800b206:	ee18 3a10 	vmov	r3, s16
 800b20a:	4652      	mov	r2, sl
 800b20c:	4631      	mov	r1, r6
 800b20e:	4628      	mov	r0, r5
 800b210:	47b8      	blx	r7
 800b212:	3001      	adds	r0, #1
 800b214:	f43f ae6b 	beq.w	800aeee <_printf_float+0xc2>
 800b218:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b21c:	2200      	movs	r2, #0
 800b21e:	2300      	movs	r3, #0
 800b220:	f7f5 fc52 	bl	8000ac8 <__aeabi_dcmpeq>
 800b224:	b9d8      	cbnz	r0, 800b25e <_printf_float+0x432>
 800b226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b228:	f108 0201 	add.w	r2, r8, #1
 800b22c:	3b01      	subs	r3, #1
 800b22e:	4631      	mov	r1, r6
 800b230:	4628      	mov	r0, r5
 800b232:	47b8      	blx	r7
 800b234:	3001      	adds	r0, #1
 800b236:	d10e      	bne.n	800b256 <_printf_float+0x42a>
 800b238:	e659      	b.n	800aeee <_printf_float+0xc2>
 800b23a:	2301      	movs	r3, #1
 800b23c:	4652      	mov	r2, sl
 800b23e:	4631      	mov	r1, r6
 800b240:	4628      	mov	r0, r5
 800b242:	47b8      	blx	r7
 800b244:	3001      	adds	r0, #1
 800b246:	f43f ae52 	beq.w	800aeee <_printf_float+0xc2>
 800b24a:	f108 0801 	add.w	r8, r8, #1
 800b24e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b250:	3b01      	subs	r3, #1
 800b252:	4543      	cmp	r3, r8
 800b254:	dcf1      	bgt.n	800b23a <_printf_float+0x40e>
 800b256:	464b      	mov	r3, r9
 800b258:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b25c:	e6dc      	b.n	800b018 <_printf_float+0x1ec>
 800b25e:	f04f 0800 	mov.w	r8, #0
 800b262:	f104 0a1a 	add.w	sl, r4, #26
 800b266:	e7f2      	b.n	800b24e <_printf_float+0x422>
 800b268:	2301      	movs	r3, #1
 800b26a:	4642      	mov	r2, r8
 800b26c:	e7df      	b.n	800b22e <_printf_float+0x402>
 800b26e:	2301      	movs	r3, #1
 800b270:	464a      	mov	r2, r9
 800b272:	4631      	mov	r1, r6
 800b274:	4628      	mov	r0, r5
 800b276:	47b8      	blx	r7
 800b278:	3001      	adds	r0, #1
 800b27a:	f43f ae38 	beq.w	800aeee <_printf_float+0xc2>
 800b27e:	f108 0801 	add.w	r8, r8, #1
 800b282:	68e3      	ldr	r3, [r4, #12]
 800b284:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b286:	1a5b      	subs	r3, r3, r1
 800b288:	4543      	cmp	r3, r8
 800b28a:	dcf0      	bgt.n	800b26e <_printf_float+0x442>
 800b28c:	e6fa      	b.n	800b084 <_printf_float+0x258>
 800b28e:	f04f 0800 	mov.w	r8, #0
 800b292:	f104 0919 	add.w	r9, r4, #25
 800b296:	e7f4      	b.n	800b282 <_printf_float+0x456>

0800b298 <_printf_common>:
 800b298:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b29c:	4616      	mov	r6, r2
 800b29e:	4699      	mov	r9, r3
 800b2a0:	688a      	ldr	r2, [r1, #8]
 800b2a2:	690b      	ldr	r3, [r1, #16]
 800b2a4:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b2a8:	4293      	cmp	r3, r2
 800b2aa:	bfb8      	it	lt
 800b2ac:	4613      	movlt	r3, r2
 800b2ae:	6033      	str	r3, [r6, #0]
 800b2b0:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b2b4:	4607      	mov	r7, r0
 800b2b6:	460c      	mov	r4, r1
 800b2b8:	b10a      	cbz	r2, 800b2be <_printf_common+0x26>
 800b2ba:	3301      	adds	r3, #1
 800b2bc:	6033      	str	r3, [r6, #0]
 800b2be:	6823      	ldr	r3, [r4, #0]
 800b2c0:	0699      	lsls	r1, r3, #26
 800b2c2:	bf42      	ittt	mi
 800b2c4:	6833      	ldrmi	r3, [r6, #0]
 800b2c6:	3302      	addmi	r3, #2
 800b2c8:	6033      	strmi	r3, [r6, #0]
 800b2ca:	6825      	ldr	r5, [r4, #0]
 800b2cc:	f015 0506 	ands.w	r5, r5, #6
 800b2d0:	d106      	bne.n	800b2e0 <_printf_common+0x48>
 800b2d2:	f104 0a19 	add.w	sl, r4, #25
 800b2d6:	68e3      	ldr	r3, [r4, #12]
 800b2d8:	6832      	ldr	r2, [r6, #0]
 800b2da:	1a9b      	subs	r3, r3, r2
 800b2dc:	42ab      	cmp	r3, r5
 800b2de:	dc26      	bgt.n	800b32e <_printf_common+0x96>
 800b2e0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2e4:	1e13      	subs	r3, r2, #0
 800b2e6:	6822      	ldr	r2, [r4, #0]
 800b2e8:	bf18      	it	ne
 800b2ea:	2301      	movne	r3, #1
 800b2ec:	0692      	lsls	r2, r2, #26
 800b2ee:	d42b      	bmi.n	800b348 <_printf_common+0xb0>
 800b2f0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2f4:	4649      	mov	r1, r9
 800b2f6:	4638      	mov	r0, r7
 800b2f8:	47c0      	blx	r8
 800b2fa:	3001      	adds	r0, #1
 800b2fc:	d01e      	beq.n	800b33c <_printf_common+0xa4>
 800b2fe:	6823      	ldr	r3, [r4, #0]
 800b300:	68e5      	ldr	r5, [r4, #12]
 800b302:	6832      	ldr	r2, [r6, #0]
 800b304:	f003 0306 	and.w	r3, r3, #6
 800b308:	2b04      	cmp	r3, #4
 800b30a:	bf08      	it	eq
 800b30c:	1aad      	subeq	r5, r5, r2
 800b30e:	68a3      	ldr	r3, [r4, #8]
 800b310:	6922      	ldr	r2, [r4, #16]
 800b312:	bf0c      	ite	eq
 800b314:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b318:	2500      	movne	r5, #0
 800b31a:	4293      	cmp	r3, r2
 800b31c:	bfc4      	itt	gt
 800b31e:	1a9b      	subgt	r3, r3, r2
 800b320:	18ed      	addgt	r5, r5, r3
 800b322:	2600      	movs	r6, #0
 800b324:	341a      	adds	r4, #26
 800b326:	42b5      	cmp	r5, r6
 800b328:	d11a      	bne.n	800b360 <_printf_common+0xc8>
 800b32a:	2000      	movs	r0, #0
 800b32c:	e008      	b.n	800b340 <_printf_common+0xa8>
 800b32e:	2301      	movs	r3, #1
 800b330:	4652      	mov	r2, sl
 800b332:	4649      	mov	r1, r9
 800b334:	4638      	mov	r0, r7
 800b336:	47c0      	blx	r8
 800b338:	3001      	adds	r0, #1
 800b33a:	d103      	bne.n	800b344 <_printf_common+0xac>
 800b33c:	f04f 30ff 	mov.w	r0, #4294967295
 800b340:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b344:	3501      	adds	r5, #1
 800b346:	e7c6      	b.n	800b2d6 <_printf_common+0x3e>
 800b348:	18e1      	adds	r1, r4, r3
 800b34a:	1c5a      	adds	r2, r3, #1
 800b34c:	2030      	movs	r0, #48	; 0x30
 800b34e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b352:	4422      	add	r2, r4
 800b354:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b358:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b35c:	3302      	adds	r3, #2
 800b35e:	e7c7      	b.n	800b2f0 <_printf_common+0x58>
 800b360:	2301      	movs	r3, #1
 800b362:	4622      	mov	r2, r4
 800b364:	4649      	mov	r1, r9
 800b366:	4638      	mov	r0, r7
 800b368:	47c0      	blx	r8
 800b36a:	3001      	adds	r0, #1
 800b36c:	d0e6      	beq.n	800b33c <_printf_common+0xa4>
 800b36e:	3601      	adds	r6, #1
 800b370:	e7d9      	b.n	800b326 <_printf_common+0x8e>
	...

0800b374 <_printf_i>:
 800b374:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b378:	7e0f      	ldrb	r7, [r1, #24]
 800b37a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b37c:	2f78      	cmp	r7, #120	; 0x78
 800b37e:	4691      	mov	r9, r2
 800b380:	4680      	mov	r8, r0
 800b382:	460c      	mov	r4, r1
 800b384:	469a      	mov	sl, r3
 800b386:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b38a:	d807      	bhi.n	800b39c <_printf_i+0x28>
 800b38c:	2f62      	cmp	r7, #98	; 0x62
 800b38e:	d80a      	bhi.n	800b3a6 <_printf_i+0x32>
 800b390:	2f00      	cmp	r7, #0
 800b392:	f000 80d8 	beq.w	800b546 <_printf_i+0x1d2>
 800b396:	2f58      	cmp	r7, #88	; 0x58
 800b398:	f000 80a3 	beq.w	800b4e2 <_printf_i+0x16e>
 800b39c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3a0:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b3a4:	e03a      	b.n	800b41c <_printf_i+0xa8>
 800b3a6:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b3aa:	2b15      	cmp	r3, #21
 800b3ac:	d8f6      	bhi.n	800b39c <_printf_i+0x28>
 800b3ae:	a101      	add	r1, pc, #4	; (adr r1, 800b3b4 <_printf_i+0x40>)
 800b3b0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b3b4:	0800b40d 	.word	0x0800b40d
 800b3b8:	0800b421 	.word	0x0800b421
 800b3bc:	0800b39d 	.word	0x0800b39d
 800b3c0:	0800b39d 	.word	0x0800b39d
 800b3c4:	0800b39d 	.word	0x0800b39d
 800b3c8:	0800b39d 	.word	0x0800b39d
 800b3cc:	0800b421 	.word	0x0800b421
 800b3d0:	0800b39d 	.word	0x0800b39d
 800b3d4:	0800b39d 	.word	0x0800b39d
 800b3d8:	0800b39d 	.word	0x0800b39d
 800b3dc:	0800b39d 	.word	0x0800b39d
 800b3e0:	0800b52d 	.word	0x0800b52d
 800b3e4:	0800b451 	.word	0x0800b451
 800b3e8:	0800b50f 	.word	0x0800b50f
 800b3ec:	0800b39d 	.word	0x0800b39d
 800b3f0:	0800b39d 	.word	0x0800b39d
 800b3f4:	0800b54f 	.word	0x0800b54f
 800b3f8:	0800b39d 	.word	0x0800b39d
 800b3fc:	0800b451 	.word	0x0800b451
 800b400:	0800b39d 	.word	0x0800b39d
 800b404:	0800b39d 	.word	0x0800b39d
 800b408:	0800b517 	.word	0x0800b517
 800b40c:	682b      	ldr	r3, [r5, #0]
 800b40e:	1d1a      	adds	r2, r3, #4
 800b410:	681b      	ldr	r3, [r3, #0]
 800b412:	602a      	str	r2, [r5, #0]
 800b414:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b418:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b41c:	2301      	movs	r3, #1
 800b41e:	e0a3      	b.n	800b568 <_printf_i+0x1f4>
 800b420:	6820      	ldr	r0, [r4, #0]
 800b422:	6829      	ldr	r1, [r5, #0]
 800b424:	0606      	lsls	r6, r0, #24
 800b426:	f101 0304 	add.w	r3, r1, #4
 800b42a:	d50a      	bpl.n	800b442 <_printf_i+0xce>
 800b42c:	680e      	ldr	r6, [r1, #0]
 800b42e:	602b      	str	r3, [r5, #0]
 800b430:	2e00      	cmp	r6, #0
 800b432:	da03      	bge.n	800b43c <_printf_i+0xc8>
 800b434:	232d      	movs	r3, #45	; 0x2d
 800b436:	4276      	negs	r6, r6
 800b438:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b43c:	485e      	ldr	r0, [pc, #376]	; (800b5b8 <_printf_i+0x244>)
 800b43e:	230a      	movs	r3, #10
 800b440:	e019      	b.n	800b476 <_printf_i+0x102>
 800b442:	680e      	ldr	r6, [r1, #0]
 800b444:	602b      	str	r3, [r5, #0]
 800b446:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b44a:	bf18      	it	ne
 800b44c:	b236      	sxthne	r6, r6
 800b44e:	e7ef      	b.n	800b430 <_printf_i+0xbc>
 800b450:	682b      	ldr	r3, [r5, #0]
 800b452:	6820      	ldr	r0, [r4, #0]
 800b454:	1d19      	adds	r1, r3, #4
 800b456:	6029      	str	r1, [r5, #0]
 800b458:	0601      	lsls	r1, r0, #24
 800b45a:	d501      	bpl.n	800b460 <_printf_i+0xec>
 800b45c:	681e      	ldr	r6, [r3, #0]
 800b45e:	e002      	b.n	800b466 <_printf_i+0xf2>
 800b460:	0646      	lsls	r6, r0, #25
 800b462:	d5fb      	bpl.n	800b45c <_printf_i+0xe8>
 800b464:	881e      	ldrh	r6, [r3, #0]
 800b466:	4854      	ldr	r0, [pc, #336]	; (800b5b8 <_printf_i+0x244>)
 800b468:	2f6f      	cmp	r7, #111	; 0x6f
 800b46a:	bf0c      	ite	eq
 800b46c:	2308      	moveq	r3, #8
 800b46e:	230a      	movne	r3, #10
 800b470:	2100      	movs	r1, #0
 800b472:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b476:	6865      	ldr	r5, [r4, #4]
 800b478:	60a5      	str	r5, [r4, #8]
 800b47a:	2d00      	cmp	r5, #0
 800b47c:	bfa2      	ittt	ge
 800b47e:	6821      	ldrge	r1, [r4, #0]
 800b480:	f021 0104 	bicge.w	r1, r1, #4
 800b484:	6021      	strge	r1, [r4, #0]
 800b486:	b90e      	cbnz	r6, 800b48c <_printf_i+0x118>
 800b488:	2d00      	cmp	r5, #0
 800b48a:	d04d      	beq.n	800b528 <_printf_i+0x1b4>
 800b48c:	4615      	mov	r5, r2
 800b48e:	fbb6 f1f3 	udiv	r1, r6, r3
 800b492:	fb03 6711 	mls	r7, r3, r1, r6
 800b496:	5dc7      	ldrb	r7, [r0, r7]
 800b498:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b49c:	4637      	mov	r7, r6
 800b49e:	42bb      	cmp	r3, r7
 800b4a0:	460e      	mov	r6, r1
 800b4a2:	d9f4      	bls.n	800b48e <_printf_i+0x11a>
 800b4a4:	2b08      	cmp	r3, #8
 800b4a6:	d10b      	bne.n	800b4c0 <_printf_i+0x14c>
 800b4a8:	6823      	ldr	r3, [r4, #0]
 800b4aa:	07de      	lsls	r6, r3, #31
 800b4ac:	d508      	bpl.n	800b4c0 <_printf_i+0x14c>
 800b4ae:	6923      	ldr	r3, [r4, #16]
 800b4b0:	6861      	ldr	r1, [r4, #4]
 800b4b2:	4299      	cmp	r1, r3
 800b4b4:	bfde      	ittt	le
 800b4b6:	2330      	movle	r3, #48	; 0x30
 800b4b8:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b4bc:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b4c0:	1b52      	subs	r2, r2, r5
 800b4c2:	6122      	str	r2, [r4, #16]
 800b4c4:	f8cd a000 	str.w	sl, [sp]
 800b4c8:	464b      	mov	r3, r9
 800b4ca:	aa03      	add	r2, sp, #12
 800b4cc:	4621      	mov	r1, r4
 800b4ce:	4640      	mov	r0, r8
 800b4d0:	f7ff fee2 	bl	800b298 <_printf_common>
 800b4d4:	3001      	adds	r0, #1
 800b4d6:	d14c      	bne.n	800b572 <_printf_i+0x1fe>
 800b4d8:	f04f 30ff 	mov.w	r0, #4294967295
 800b4dc:	b004      	add	sp, #16
 800b4de:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4e2:	4835      	ldr	r0, [pc, #212]	; (800b5b8 <_printf_i+0x244>)
 800b4e4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b4e8:	6829      	ldr	r1, [r5, #0]
 800b4ea:	6823      	ldr	r3, [r4, #0]
 800b4ec:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4f0:	6029      	str	r1, [r5, #0]
 800b4f2:	061d      	lsls	r5, r3, #24
 800b4f4:	d514      	bpl.n	800b520 <_printf_i+0x1ac>
 800b4f6:	07df      	lsls	r7, r3, #31
 800b4f8:	bf44      	itt	mi
 800b4fa:	f043 0320 	orrmi.w	r3, r3, #32
 800b4fe:	6023      	strmi	r3, [r4, #0]
 800b500:	b91e      	cbnz	r6, 800b50a <_printf_i+0x196>
 800b502:	6823      	ldr	r3, [r4, #0]
 800b504:	f023 0320 	bic.w	r3, r3, #32
 800b508:	6023      	str	r3, [r4, #0]
 800b50a:	2310      	movs	r3, #16
 800b50c:	e7b0      	b.n	800b470 <_printf_i+0xfc>
 800b50e:	6823      	ldr	r3, [r4, #0]
 800b510:	f043 0320 	orr.w	r3, r3, #32
 800b514:	6023      	str	r3, [r4, #0]
 800b516:	2378      	movs	r3, #120	; 0x78
 800b518:	4828      	ldr	r0, [pc, #160]	; (800b5bc <_printf_i+0x248>)
 800b51a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b51e:	e7e3      	b.n	800b4e8 <_printf_i+0x174>
 800b520:	0659      	lsls	r1, r3, #25
 800b522:	bf48      	it	mi
 800b524:	b2b6      	uxthmi	r6, r6
 800b526:	e7e6      	b.n	800b4f6 <_printf_i+0x182>
 800b528:	4615      	mov	r5, r2
 800b52a:	e7bb      	b.n	800b4a4 <_printf_i+0x130>
 800b52c:	682b      	ldr	r3, [r5, #0]
 800b52e:	6826      	ldr	r6, [r4, #0]
 800b530:	6961      	ldr	r1, [r4, #20]
 800b532:	1d18      	adds	r0, r3, #4
 800b534:	6028      	str	r0, [r5, #0]
 800b536:	0635      	lsls	r5, r6, #24
 800b538:	681b      	ldr	r3, [r3, #0]
 800b53a:	d501      	bpl.n	800b540 <_printf_i+0x1cc>
 800b53c:	6019      	str	r1, [r3, #0]
 800b53e:	e002      	b.n	800b546 <_printf_i+0x1d2>
 800b540:	0670      	lsls	r0, r6, #25
 800b542:	d5fb      	bpl.n	800b53c <_printf_i+0x1c8>
 800b544:	8019      	strh	r1, [r3, #0]
 800b546:	2300      	movs	r3, #0
 800b548:	6123      	str	r3, [r4, #16]
 800b54a:	4615      	mov	r5, r2
 800b54c:	e7ba      	b.n	800b4c4 <_printf_i+0x150>
 800b54e:	682b      	ldr	r3, [r5, #0]
 800b550:	1d1a      	adds	r2, r3, #4
 800b552:	602a      	str	r2, [r5, #0]
 800b554:	681d      	ldr	r5, [r3, #0]
 800b556:	6862      	ldr	r2, [r4, #4]
 800b558:	2100      	movs	r1, #0
 800b55a:	4628      	mov	r0, r5
 800b55c:	f7f4 fe40 	bl	80001e0 <memchr>
 800b560:	b108      	cbz	r0, 800b566 <_printf_i+0x1f2>
 800b562:	1b40      	subs	r0, r0, r5
 800b564:	6060      	str	r0, [r4, #4]
 800b566:	6863      	ldr	r3, [r4, #4]
 800b568:	6123      	str	r3, [r4, #16]
 800b56a:	2300      	movs	r3, #0
 800b56c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b570:	e7a8      	b.n	800b4c4 <_printf_i+0x150>
 800b572:	6923      	ldr	r3, [r4, #16]
 800b574:	462a      	mov	r2, r5
 800b576:	4649      	mov	r1, r9
 800b578:	4640      	mov	r0, r8
 800b57a:	47d0      	blx	sl
 800b57c:	3001      	adds	r0, #1
 800b57e:	d0ab      	beq.n	800b4d8 <_printf_i+0x164>
 800b580:	6823      	ldr	r3, [r4, #0]
 800b582:	079b      	lsls	r3, r3, #30
 800b584:	d413      	bmi.n	800b5ae <_printf_i+0x23a>
 800b586:	68e0      	ldr	r0, [r4, #12]
 800b588:	9b03      	ldr	r3, [sp, #12]
 800b58a:	4298      	cmp	r0, r3
 800b58c:	bfb8      	it	lt
 800b58e:	4618      	movlt	r0, r3
 800b590:	e7a4      	b.n	800b4dc <_printf_i+0x168>
 800b592:	2301      	movs	r3, #1
 800b594:	4632      	mov	r2, r6
 800b596:	4649      	mov	r1, r9
 800b598:	4640      	mov	r0, r8
 800b59a:	47d0      	blx	sl
 800b59c:	3001      	adds	r0, #1
 800b59e:	d09b      	beq.n	800b4d8 <_printf_i+0x164>
 800b5a0:	3501      	adds	r5, #1
 800b5a2:	68e3      	ldr	r3, [r4, #12]
 800b5a4:	9903      	ldr	r1, [sp, #12]
 800b5a6:	1a5b      	subs	r3, r3, r1
 800b5a8:	42ab      	cmp	r3, r5
 800b5aa:	dcf2      	bgt.n	800b592 <_printf_i+0x21e>
 800b5ac:	e7eb      	b.n	800b586 <_printf_i+0x212>
 800b5ae:	2500      	movs	r5, #0
 800b5b0:	f104 0619 	add.w	r6, r4, #25
 800b5b4:	e7f5      	b.n	800b5a2 <_printf_i+0x22e>
 800b5b6:	bf00      	nop
 800b5b8:	0800f92e 	.word	0x0800f92e
 800b5bc:	0800f93f 	.word	0x0800f93f

0800b5c0 <_scanf_float>:
 800b5c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5c4:	b087      	sub	sp, #28
 800b5c6:	4617      	mov	r7, r2
 800b5c8:	9303      	str	r3, [sp, #12]
 800b5ca:	688b      	ldr	r3, [r1, #8]
 800b5cc:	1e5a      	subs	r2, r3, #1
 800b5ce:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b5d2:	bf83      	ittte	hi
 800b5d4:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b5d8:	195b      	addhi	r3, r3, r5
 800b5da:	9302      	strhi	r3, [sp, #8]
 800b5dc:	2300      	movls	r3, #0
 800b5de:	bf86      	itte	hi
 800b5e0:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b5e4:	608b      	strhi	r3, [r1, #8]
 800b5e6:	9302      	strls	r3, [sp, #8]
 800b5e8:	680b      	ldr	r3, [r1, #0]
 800b5ea:	468b      	mov	fp, r1
 800b5ec:	2500      	movs	r5, #0
 800b5ee:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b5f2:	f84b 3b1c 	str.w	r3, [fp], #28
 800b5f6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b5fa:	4680      	mov	r8, r0
 800b5fc:	460c      	mov	r4, r1
 800b5fe:	465e      	mov	r6, fp
 800b600:	46aa      	mov	sl, r5
 800b602:	46a9      	mov	r9, r5
 800b604:	9501      	str	r5, [sp, #4]
 800b606:	68a2      	ldr	r2, [r4, #8]
 800b608:	b152      	cbz	r2, 800b620 <_scanf_float+0x60>
 800b60a:	683b      	ldr	r3, [r7, #0]
 800b60c:	781b      	ldrb	r3, [r3, #0]
 800b60e:	2b4e      	cmp	r3, #78	; 0x4e
 800b610:	d864      	bhi.n	800b6dc <_scanf_float+0x11c>
 800b612:	2b40      	cmp	r3, #64	; 0x40
 800b614:	d83c      	bhi.n	800b690 <_scanf_float+0xd0>
 800b616:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b61a:	b2c8      	uxtb	r0, r1
 800b61c:	280e      	cmp	r0, #14
 800b61e:	d93a      	bls.n	800b696 <_scanf_float+0xd6>
 800b620:	f1b9 0f00 	cmp.w	r9, #0
 800b624:	d003      	beq.n	800b62e <_scanf_float+0x6e>
 800b626:	6823      	ldr	r3, [r4, #0]
 800b628:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b62c:	6023      	str	r3, [r4, #0]
 800b62e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b632:	f1ba 0f01 	cmp.w	sl, #1
 800b636:	f200 8113 	bhi.w	800b860 <_scanf_float+0x2a0>
 800b63a:	455e      	cmp	r6, fp
 800b63c:	f200 8105 	bhi.w	800b84a <_scanf_float+0x28a>
 800b640:	2501      	movs	r5, #1
 800b642:	4628      	mov	r0, r5
 800b644:	b007      	add	sp, #28
 800b646:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b64a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b64e:	2a0d      	cmp	r2, #13
 800b650:	d8e6      	bhi.n	800b620 <_scanf_float+0x60>
 800b652:	a101      	add	r1, pc, #4	; (adr r1, 800b658 <_scanf_float+0x98>)
 800b654:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b658:	0800b797 	.word	0x0800b797
 800b65c:	0800b621 	.word	0x0800b621
 800b660:	0800b621 	.word	0x0800b621
 800b664:	0800b621 	.word	0x0800b621
 800b668:	0800b7f7 	.word	0x0800b7f7
 800b66c:	0800b7cf 	.word	0x0800b7cf
 800b670:	0800b621 	.word	0x0800b621
 800b674:	0800b621 	.word	0x0800b621
 800b678:	0800b7a5 	.word	0x0800b7a5
 800b67c:	0800b621 	.word	0x0800b621
 800b680:	0800b621 	.word	0x0800b621
 800b684:	0800b621 	.word	0x0800b621
 800b688:	0800b621 	.word	0x0800b621
 800b68c:	0800b75d 	.word	0x0800b75d
 800b690:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b694:	e7db      	b.n	800b64e <_scanf_float+0x8e>
 800b696:	290e      	cmp	r1, #14
 800b698:	d8c2      	bhi.n	800b620 <_scanf_float+0x60>
 800b69a:	a001      	add	r0, pc, #4	; (adr r0, 800b6a0 <_scanf_float+0xe0>)
 800b69c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b6a0:	0800b74f 	.word	0x0800b74f
 800b6a4:	0800b621 	.word	0x0800b621
 800b6a8:	0800b74f 	.word	0x0800b74f
 800b6ac:	0800b7e3 	.word	0x0800b7e3
 800b6b0:	0800b621 	.word	0x0800b621
 800b6b4:	0800b6fd 	.word	0x0800b6fd
 800b6b8:	0800b739 	.word	0x0800b739
 800b6bc:	0800b739 	.word	0x0800b739
 800b6c0:	0800b739 	.word	0x0800b739
 800b6c4:	0800b739 	.word	0x0800b739
 800b6c8:	0800b739 	.word	0x0800b739
 800b6cc:	0800b739 	.word	0x0800b739
 800b6d0:	0800b739 	.word	0x0800b739
 800b6d4:	0800b739 	.word	0x0800b739
 800b6d8:	0800b739 	.word	0x0800b739
 800b6dc:	2b6e      	cmp	r3, #110	; 0x6e
 800b6de:	d809      	bhi.n	800b6f4 <_scanf_float+0x134>
 800b6e0:	2b60      	cmp	r3, #96	; 0x60
 800b6e2:	d8b2      	bhi.n	800b64a <_scanf_float+0x8a>
 800b6e4:	2b54      	cmp	r3, #84	; 0x54
 800b6e6:	d077      	beq.n	800b7d8 <_scanf_float+0x218>
 800b6e8:	2b59      	cmp	r3, #89	; 0x59
 800b6ea:	d199      	bne.n	800b620 <_scanf_float+0x60>
 800b6ec:	2d07      	cmp	r5, #7
 800b6ee:	d197      	bne.n	800b620 <_scanf_float+0x60>
 800b6f0:	2508      	movs	r5, #8
 800b6f2:	e029      	b.n	800b748 <_scanf_float+0x188>
 800b6f4:	2b74      	cmp	r3, #116	; 0x74
 800b6f6:	d06f      	beq.n	800b7d8 <_scanf_float+0x218>
 800b6f8:	2b79      	cmp	r3, #121	; 0x79
 800b6fa:	e7f6      	b.n	800b6ea <_scanf_float+0x12a>
 800b6fc:	6821      	ldr	r1, [r4, #0]
 800b6fe:	05c8      	lsls	r0, r1, #23
 800b700:	d51a      	bpl.n	800b738 <_scanf_float+0x178>
 800b702:	9b02      	ldr	r3, [sp, #8]
 800b704:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b708:	6021      	str	r1, [r4, #0]
 800b70a:	f109 0901 	add.w	r9, r9, #1
 800b70e:	b11b      	cbz	r3, 800b718 <_scanf_float+0x158>
 800b710:	3b01      	subs	r3, #1
 800b712:	3201      	adds	r2, #1
 800b714:	9302      	str	r3, [sp, #8]
 800b716:	60a2      	str	r2, [r4, #8]
 800b718:	68a3      	ldr	r3, [r4, #8]
 800b71a:	3b01      	subs	r3, #1
 800b71c:	60a3      	str	r3, [r4, #8]
 800b71e:	6923      	ldr	r3, [r4, #16]
 800b720:	3301      	adds	r3, #1
 800b722:	6123      	str	r3, [r4, #16]
 800b724:	687b      	ldr	r3, [r7, #4]
 800b726:	3b01      	subs	r3, #1
 800b728:	2b00      	cmp	r3, #0
 800b72a:	607b      	str	r3, [r7, #4]
 800b72c:	f340 8084 	ble.w	800b838 <_scanf_float+0x278>
 800b730:	683b      	ldr	r3, [r7, #0]
 800b732:	3301      	adds	r3, #1
 800b734:	603b      	str	r3, [r7, #0]
 800b736:	e766      	b.n	800b606 <_scanf_float+0x46>
 800b738:	eb1a 0f05 	cmn.w	sl, r5
 800b73c:	f47f af70 	bne.w	800b620 <_scanf_float+0x60>
 800b740:	6822      	ldr	r2, [r4, #0]
 800b742:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b746:	6022      	str	r2, [r4, #0]
 800b748:	f806 3b01 	strb.w	r3, [r6], #1
 800b74c:	e7e4      	b.n	800b718 <_scanf_float+0x158>
 800b74e:	6822      	ldr	r2, [r4, #0]
 800b750:	0610      	lsls	r0, r2, #24
 800b752:	f57f af65 	bpl.w	800b620 <_scanf_float+0x60>
 800b756:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b75a:	e7f4      	b.n	800b746 <_scanf_float+0x186>
 800b75c:	f1ba 0f00 	cmp.w	sl, #0
 800b760:	d10e      	bne.n	800b780 <_scanf_float+0x1c0>
 800b762:	f1b9 0f00 	cmp.w	r9, #0
 800b766:	d10e      	bne.n	800b786 <_scanf_float+0x1c6>
 800b768:	6822      	ldr	r2, [r4, #0]
 800b76a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b76e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b772:	d108      	bne.n	800b786 <_scanf_float+0x1c6>
 800b774:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b778:	6022      	str	r2, [r4, #0]
 800b77a:	f04f 0a01 	mov.w	sl, #1
 800b77e:	e7e3      	b.n	800b748 <_scanf_float+0x188>
 800b780:	f1ba 0f02 	cmp.w	sl, #2
 800b784:	d055      	beq.n	800b832 <_scanf_float+0x272>
 800b786:	2d01      	cmp	r5, #1
 800b788:	d002      	beq.n	800b790 <_scanf_float+0x1d0>
 800b78a:	2d04      	cmp	r5, #4
 800b78c:	f47f af48 	bne.w	800b620 <_scanf_float+0x60>
 800b790:	3501      	adds	r5, #1
 800b792:	b2ed      	uxtb	r5, r5
 800b794:	e7d8      	b.n	800b748 <_scanf_float+0x188>
 800b796:	f1ba 0f01 	cmp.w	sl, #1
 800b79a:	f47f af41 	bne.w	800b620 <_scanf_float+0x60>
 800b79e:	f04f 0a02 	mov.w	sl, #2
 800b7a2:	e7d1      	b.n	800b748 <_scanf_float+0x188>
 800b7a4:	b97d      	cbnz	r5, 800b7c6 <_scanf_float+0x206>
 800b7a6:	f1b9 0f00 	cmp.w	r9, #0
 800b7aa:	f47f af3c 	bne.w	800b626 <_scanf_float+0x66>
 800b7ae:	6822      	ldr	r2, [r4, #0]
 800b7b0:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b7b4:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b7b8:	f47f af39 	bne.w	800b62e <_scanf_float+0x6e>
 800b7bc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b7c0:	6022      	str	r2, [r4, #0]
 800b7c2:	2501      	movs	r5, #1
 800b7c4:	e7c0      	b.n	800b748 <_scanf_float+0x188>
 800b7c6:	2d03      	cmp	r5, #3
 800b7c8:	d0e2      	beq.n	800b790 <_scanf_float+0x1d0>
 800b7ca:	2d05      	cmp	r5, #5
 800b7cc:	e7de      	b.n	800b78c <_scanf_float+0x1cc>
 800b7ce:	2d02      	cmp	r5, #2
 800b7d0:	f47f af26 	bne.w	800b620 <_scanf_float+0x60>
 800b7d4:	2503      	movs	r5, #3
 800b7d6:	e7b7      	b.n	800b748 <_scanf_float+0x188>
 800b7d8:	2d06      	cmp	r5, #6
 800b7da:	f47f af21 	bne.w	800b620 <_scanf_float+0x60>
 800b7de:	2507      	movs	r5, #7
 800b7e0:	e7b2      	b.n	800b748 <_scanf_float+0x188>
 800b7e2:	6822      	ldr	r2, [r4, #0]
 800b7e4:	0591      	lsls	r1, r2, #22
 800b7e6:	f57f af1b 	bpl.w	800b620 <_scanf_float+0x60>
 800b7ea:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b7ee:	6022      	str	r2, [r4, #0]
 800b7f0:	f8cd 9004 	str.w	r9, [sp, #4]
 800b7f4:	e7a8      	b.n	800b748 <_scanf_float+0x188>
 800b7f6:	6822      	ldr	r2, [r4, #0]
 800b7f8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b7fc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b800:	d006      	beq.n	800b810 <_scanf_float+0x250>
 800b802:	0550      	lsls	r0, r2, #21
 800b804:	f57f af0c 	bpl.w	800b620 <_scanf_float+0x60>
 800b808:	f1b9 0f00 	cmp.w	r9, #0
 800b80c:	f43f af0f 	beq.w	800b62e <_scanf_float+0x6e>
 800b810:	0591      	lsls	r1, r2, #22
 800b812:	bf58      	it	pl
 800b814:	9901      	ldrpl	r1, [sp, #4]
 800b816:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b81a:	bf58      	it	pl
 800b81c:	eba9 0101 	subpl.w	r1, r9, r1
 800b820:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b824:	bf58      	it	pl
 800b826:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b82a:	6022      	str	r2, [r4, #0]
 800b82c:	f04f 0900 	mov.w	r9, #0
 800b830:	e78a      	b.n	800b748 <_scanf_float+0x188>
 800b832:	f04f 0a03 	mov.w	sl, #3
 800b836:	e787      	b.n	800b748 <_scanf_float+0x188>
 800b838:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b83c:	4639      	mov	r1, r7
 800b83e:	4640      	mov	r0, r8
 800b840:	4798      	blx	r3
 800b842:	2800      	cmp	r0, #0
 800b844:	f43f aedf 	beq.w	800b606 <_scanf_float+0x46>
 800b848:	e6ea      	b.n	800b620 <_scanf_float+0x60>
 800b84a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b84e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b852:	463a      	mov	r2, r7
 800b854:	4640      	mov	r0, r8
 800b856:	4798      	blx	r3
 800b858:	6923      	ldr	r3, [r4, #16]
 800b85a:	3b01      	subs	r3, #1
 800b85c:	6123      	str	r3, [r4, #16]
 800b85e:	e6ec      	b.n	800b63a <_scanf_float+0x7a>
 800b860:	1e6b      	subs	r3, r5, #1
 800b862:	2b06      	cmp	r3, #6
 800b864:	d825      	bhi.n	800b8b2 <_scanf_float+0x2f2>
 800b866:	2d02      	cmp	r5, #2
 800b868:	d836      	bhi.n	800b8d8 <_scanf_float+0x318>
 800b86a:	455e      	cmp	r6, fp
 800b86c:	f67f aee8 	bls.w	800b640 <_scanf_float+0x80>
 800b870:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b874:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b878:	463a      	mov	r2, r7
 800b87a:	4640      	mov	r0, r8
 800b87c:	4798      	blx	r3
 800b87e:	6923      	ldr	r3, [r4, #16]
 800b880:	3b01      	subs	r3, #1
 800b882:	6123      	str	r3, [r4, #16]
 800b884:	e7f1      	b.n	800b86a <_scanf_float+0x2aa>
 800b886:	9802      	ldr	r0, [sp, #8]
 800b888:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b88c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b890:	9002      	str	r0, [sp, #8]
 800b892:	463a      	mov	r2, r7
 800b894:	4640      	mov	r0, r8
 800b896:	4798      	blx	r3
 800b898:	6923      	ldr	r3, [r4, #16]
 800b89a:	3b01      	subs	r3, #1
 800b89c:	6123      	str	r3, [r4, #16]
 800b89e:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b8a2:	fa5f fa8a 	uxtb.w	sl, sl
 800b8a6:	f1ba 0f02 	cmp.w	sl, #2
 800b8aa:	d1ec      	bne.n	800b886 <_scanf_float+0x2c6>
 800b8ac:	3d03      	subs	r5, #3
 800b8ae:	b2ed      	uxtb	r5, r5
 800b8b0:	1b76      	subs	r6, r6, r5
 800b8b2:	6823      	ldr	r3, [r4, #0]
 800b8b4:	05da      	lsls	r2, r3, #23
 800b8b6:	d52f      	bpl.n	800b918 <_scanf_float+0x358>
 800b8b8:	055b      	lsls	r3, r3, #21
 800b8ba:	d510      	bpl.n	800b8de <_scanf_float+0x31e>
 800b8bc:	455e      	cmp	r6, fp
 800b8be:	f67f aebf 	bls.w	800b640 <_scanf_float+0x80>
 800b8c2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8c6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8ca:	463a      	mov	r2, r7
 800b8cc:	4640      	mov	r0, r8
 800b8ce:	4798      	blx	r3
 800b8d0:	6923      	ldr	r3, [r4, #16]
 800b8d2:	3b01      	subs	r3, #1
 800b8d4:	6123      	str	r3, [r4, #16]
 800b8d6:	e7f1      	b.n	800b8bc <_scanf_float+0x2fc>
 800b8d8:	46aa      	mov	sl, r5
 800b8da:	9602      	str	r6, [sp, #8]
 800b8dc:	e7df      	b.n	800b89e <_scanf_float+0x2de>
 800b8de:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b8e2:	6923      	ldr	r3, [r4, #16]
 800b8e4:	2965      	cmp	r1, #101	; 0x65
 800b8e6:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8ea:	f106 35ff 	add.w	r5, r6, #4294967295
 800b8ee:	6123      	str	r3, [r4, #16]
 800b8f0:	d00c      	beq.n	800b90c <_scanf_float+0x34c>
 800b8f2:	2945      	cmp	r1, #69	; 0x45
 800b8f4:	d00a      	beq.n	800b90c <_scanf_float+0x34c>
 800b8f6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8fa:	463a      	mov	r2, r7
 800b8fc:	4640      	mov	r0, r8
 800b8fe:	4798      	blx	r3
 800b900:	6923      	ldr	r3, [r4, #16]
 800b902:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b906:	3b01      	subs	r3, #1
 800b908:	1eb5      	subs	r5, r6, #2
 800b90a:	6123      	str	r3, [r4, #16]
 800b90c:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b910:	463a      	mov	r2, r7
 800b912:	4640      	mov	r0, r8
 800b914:	4798      	blx	r3
 800b916:	462e      	mov	r6, r5
 800b918:	6825      	ldr	r5, [r4, #0]
 800b91a:	f015 0510 	ands.w	r5, r5, #16
 800b91e:	d159      	bne.n	800b9d4 <_scanf_float+0x414>
 800b920:	7035      	strb	r5, [r6, #0]
 800b922:	6823      	ldr	r3, [r4, #0]
 800b924:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b928:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b92c:	d11b      	bne.n	800b966 <_scanf_float+0x3a6>
 800b92e:	9b01      	ldr	r3, [sp, #4]
 800b930:	454b      	cmp	r3, r9
 800b932:	eba3 0209 	sub.w	r2, r3, r9
 800b936:	d123      	bne.n	800b980 <_scanf_float+0x3c0>
 800b938:	2200      	movs	r2, #0
 800b93a:	4659      	mov	r1, fp
 800b93c:	4640      	mov	r0, r8
 800b93e:	f000 fe99 	bl	800c674 <_strtod_r>
 800b942:	6822      	ldr	r2, [r4, #0]
 800b944:	9b03      	ldr	r3, [sp, #12]
 800b946:	f012 0f02 	tst.w	r2, #2
 800b94a:	ec57 6b10 	vmov	r6, r7, d0
 800b94e:	681b      	ldr	r3, [r3, #0]
 800b950:	d021      	beq.n	800b996 <_scanf_float+0x3d6>
 800b952:	9903      	ldr	r1, [sp, #12]
 800b954:	1d1a      	adds	r2, r3, #4
 800b956:	600a      	str	r2, [r1, #0]
 800b958:	681b      	ldr	r3, [r3, #0]
 800b95a:	e9c3 6700 	strd	r6, r7, [r3]
 800b95e:	68e3      	ldr	r3, [r4, #12]
 800b960:	3301      	adds	r3, #1
 800b962:	60e3      	str	r3, [r4, #12]
 800b964:	e66d      	b.n	800b642 <_scanf_float+0x82>
 800b966:	9b04      	ldr	r3, [sp, #16]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	d0e5      	beq.n	800b938 <_scanf_float+0x378>
 800b96c:	9905      	ldr	r1, [sp, #20]
 800b96e:	230a      	movs	r3, #10
 800b970:	462a      	mov	r2, r5
 800b972:	3101      	adds	r1, #1
 800b974:	4640      	mov	r0, r8
 800b976:	f000 ff6d 	bl	800c854 <_strtol_r>
 800b97a:	9b04      	ldr	r3, [sp, #16]
 800b97c:	9e05      	ldr	r6, [sp, #20]
 800b97e:	1ac2      	subs	r2, r0, r3
 800b980:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b984:	429e      	cmp	r6, r3
 800b986:	bf28      	it	cs
 800b988:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b98c:	4912      	ldr	r1, [pc, #72]	; (800b9d8 <_scanf_float+0x418>)
 800b98e:	4630      	mov	r0, r6
 800b990:	f000 f82c 	bl	800b9ec <siprintf>
 800b994:	e7d0      	b.n	800b938 <_scanf_float+0x378>
 800b996:	9903      	ldr	r1, [sp, #12]
 800b998:	f012 0f04 	tst.w	r2, #4
 800b99c:	f103 0204 	add.w	r2, r3, #4
 800b9a0:	600a      	str	r2, [r1, #0]
 800b9a2:	d1d9      	bne.n	800b958 <_scanf_float+0x398>
 800b9a4:	f8d3 8000 	ldr.w	r8, [r3]
 800b9a8:	ee10 2a10 	vmov	r2, s0
 800b9ac:	ee10 0a10 	vmov	r0, s0
 800b9b0:	463b      	mov	r3, r7
 800b9b2:	4639      	mov	r1, r7
 800b9b4:	f7f5 f8ba 	bl	8000b2c <__aeabi_dcmpun>
 800b9b8:	b128      	cbz	r0, 800b9c6 <_scanf_float+0x406>
 800b9ba:	4808      	ldr	r0, [pc, #32]	; (800b9dc <_scanf_float+0x41c>)
 800b9bc:	f000 f810 	bl	800b9e0 <nanf>
 800b9c0:	ed88 0a00 	vstr	s0, [r8]
 800b9c4:	e7cb      	b.n	800b95e <_scanf_float+0x39e>
 800b9c6:	4630      	mov	r0, r6
 800b9c8:	4639      	mov	r1, r7
 800b9ca:	f7f5 f90d 	bl	8000be8 <__aeabi_d2f>
 800b9ce:	f8c8 0000 	str.w	r0, [r8]
 800b9d2:	e7c4      	b.n	800b95e <_scanf_float+0x39e>
 800b9d4:	2500      	movs	r5, #0
 800b9d6:	e634      	b.n	800b642 <_scanf_float+0x82>
 800b9d8:	0800f950 	.word	0x0800f950
 800b9dc:	0800fa57 	.word	0x0800fa57

0800b9e0 <nanf>:
 800b9e0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b9e8 <nanf+0x8>
 800b9e4:	4770      	bx	lr
 800b9e6:	bf00      	nop
 800b9e8:	7fc00000 	.word	0x7fc00000

0800b9ec <siprintf>:
 800b9ec:	b40e      	push	{r1, r2, r3}
 800b9ee:	b500      	push	{lr}
 800b9f0:	b09c      	sub	sp, #112	; 0x70
 800b9f2:	ab1d      	add	r3, sp, #116	; 0x74
 800b9f4:	9002      	str	r0, [sp, #8]
 800b9f6:	9006      	str	r0, [sp, #24]
 800b9f8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9fc:	4809      	ldr	r0, [pc, #36]	; (800ba24 <siprintf+0x38>)
 800b9fe:	9107      	str	r1, [sp, #28]
 800ba00:	9104      	str	r1, [sp, #16]
 800ba02:	4909      	ldr	r1, [pc, #36]	; (800ba28 <siprintf+0x3c>)
 800ba04:	f853 2b04 	ldr.w	r2, [r3], #4
 800ba08:	9105      	str	r1, [sp, #20]
 800ba0a:	6800      	ldr	r0, [r0, #0]
 800ba0c:	9301      	str	r3, [sp, #4]
 800ba0e:	a902      	add	r1, sp, #8
 800ba10:	f002 ff7e 	bl	800e910 <_svfiprintf_r>
 800ba14:	9b02      	ldr	r3, [sp, #8]
 800ba16:	2200      	movs	r2, #0
 800ba18:	701a      	strb	r2, [r3, #0]
 800ba1a:	b01c      	add	sp, #112	; 0x70
 800ba1c:	f85d eb04 	ldr.w	lr, [sp], #4
 800ba20:	b003      	add	sp, #12
 800ba22:	4770      	bx	lr
 800ba24:	20000020 	.word	0x20000020
 800ba28:	ffff0208 	.word	0xffff0208

0800ba2c <sulp>:
 800ba2c:	b570      	push	{r4, r5, r6, lr}
 800ba2e:	4604      	mov	r4, r0
 800ba30:	460d      	mov	r5, r1
 800ba32:	ec45 4b10 	vmov	d0, r4, r5
 800ba36:	4616      	mov	r6, r2
 800ba38:	f002 fcc8 	bl	800e3cc <__ulp>
 800ba3c:	ec51 0b10 	vmov	r0, r1, d0
 800ba40:	b17e      	cbz	r6, 800ba62 <sulp+0x36>
 800ba42:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba46:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba4a:	2b00      	cmp	r3, #0
 800ba4c:	dd09      	ble.n	800ba62 <sulp+0x36>
 800ba4e:	051b      	lsls	r3, r3, #20
 800ba50:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ba54:	2400      	movs	r4, #0
 800ba56:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ba5a:	4622      	mov	r2, r4
 800ba5c:	462b      	mov	r3, r5
 800ba5e:	f7f4 fdcb 	bl	80005f8 <__aeabi_dmul>
 800ba62:	bd70      	pop	{r4, r5, r6, pc}
 800ba64:	0000      	movs	r0, r0
	...

0800ba68 <_strtod_l>:
 800ba68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba6c:	ed2d 8b02 	vpush	{d8}
 800ba70:	b09d      	sub	sp, #116	; 0x74
 800ba72:	461f      	mov	r7, r3
 800ba74:	2300      	movs	r3, #0
 800ba76:	9318      	str	r3, [sp, #96]	; 0x60
 800ba78:	4ba2      	ldr	r3, [pc, #648]	; (800bd04 <_strtod_l+0x29c>)
 800ba7a:	9213      	str	r2, [sp, #76]	; 0x4c
 800ba7c:	681b      	ldr	r3, [r3, #0]
 800ba7e:	9305      	str	r3, [sp, #20]
 800ba80:	4604      	mov	r4, r0
 800ba82:	4618      	mov	r0, r3
 800ba84:	4688      	mov	r8, r1
 800ba86:	f7f4 fba3 	bl	80001d0 <strlen>
 800ba8a:	f04f 0a00 	mov.w	sl, #0
 800ba8e:	4605      	mov	r5, r0
 800ba90:	f04f 0b00 	mov.w	fp, #0
 800ba94:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ba98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba9a:	781a      	ldrb	r2, [r3, #0]
 800ba9c:	2a2b      	cmp	r2, #43	; 0x2b
 800ba9e:	d04e      	beq.n	800bb3e <_strtod_l+0xd6>
 800baa0:	d83b      	bhi.n	800bb1a <_strtod_l+0xb2>
 800baa2:	2a0d      	cmp	r2, #13
 800baa4:	d834      	bhi.n	800bb10 <_strtod_l+0xa8>
 800baa6:	2a08      	cmp	r2, #8
 800baa8:	d834      	bhi.n	800bb14 <_strtod_l+0xac>
 800baaa:	2a00      	cmp	r2, #0
 800baac:	d03e      	beq.n	800bb2c <_strtod_l+0xc4>
 800baae:	2300      	movs	r3, #0
 800bab0:	930a      	str	r3, [sp, #40]	; 0x28
 800bab2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800bab4:	7833      	ldrb	r3, [r6, #0]
 800bab6:	2b30      	cmp	r3, #48	; 0x30
 800bab8:	f040 80b0 	bne.w	800bc1c <_strtod_l+0x1b4>
 800babc:	7873      	ldrb	r3, [r6, #1]
 800babe:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bac2:	2b58      	cmp	r3, #88	; 0x58
 800bac4:	d168      	bne.n	800bb98 <_strtod_l+0x130>
 800bac6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bac8:	9301      	str	r3, [sp, #4]
 800baca:	ab18      	add	r3, sp, #96	; 0x60
 800bacc:	9702      	str	r7, [sp, #8]
 800bace:	9300      	str	r3, [sp, #0]
 800bad0:	4a8d      	ldr	r2, [pc, #564]	; (800bd08 <_strtod_l+0x2a0>)
 800bad2:	ab19      	add	r3, sp, #100	; 0x64
 800bad4:	a917      	add	r1, sp, #92	; 0x5c
 800bad6:	4620      	mov	r0, r4
 800bad8:	f001 fdd2 	bl	800d680 <__gethex>
 800badc:	f010 0707 	ands.w	r7, r0, #7
 800bae0:	4605      	mov	r5, r0
 800bae2:	d005      	beq.n	800baf0 <_strtod_l+0x88>
 800bae4:	2f06      	cmp	r7, #6
 800bae6:	d12c      	bne.n	800bb42 <_strtod_l+0xda>
 800bae8:	3601      	adds	r6, #1
 800baea:	2300      	movs	r3, #0
 800baec:	9617      	str	r6, [sp, #92]	; 0x5c
 800baee:	930a      	str	r3, [sp, #40]	; 0x28
 800baf0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800baf2:	2b00      	cmp	r3, #0
 800baf4:	f040 8590 	bne.w	800c618 <_strtod_l+0xbb0>
 800baf8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bafa:	b1eb      	cbz	r3, 800bb38 <_strtod_l+0xd0>
 800bafc:	4652      	mov	r2, sl
 800bafe:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bb02:	ec43 2b10 	vmov	d0, r2, r3
 800bb06:	b01d      	add	sp, #116	; 0x74
 800bb08:	ecbd 8b02 	vpop	{d8}
 800bb0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bb10:	2a20      	cmp	r2, #32
 800bb12:	d1cc      	bne.n	800baae <_strtod_l+0x46>
 800bb14:	3301      	adds	r3, #1
 800bb16:	9317      	str	r3, [sp, #92]	; 0x5c
 800bb18:	e7be      	b.n	800ba98 <_strtod_l+0x30>
 800bb1a:	2a2d      	cmp	r2, #45	; 0x2d
 800bb1c:	d1c7      	bne.n	800baae <_strtod_l+0x46>
 800bb1e:	2201      	movs	r2, #1
 800bb20:	920a      	str	r2, [sp, #40]	; 0x28
 800bb22:	1c5a      	adds	r2, r3, #1
 800bb24:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb26:	785b      	ldrb	r3, [r3, #1]
 800bb28:	2b00      	cmp	r3, #0
 800bb2a:	d1c2      	bne.n	800bab2 <_strtod_l+0x4a>
 800bb2c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb2e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bb32:	2b00      	cmp	r3, #0
 800bb34:	f040 856e 	bne.w	800c614 <_strtod_l+0xbac>
 800bb38:	4652      	mov	r2, sl
 800bb3a:	465b      	mov	r3, fp
 800bb3c:	e7e1      	b.n	800bb02 <_strtod_l+0x9a>
 800bb3e:	2200      	movs	r2, #0
 800bb40:	e7ee      	b.n	800bb20 <_strtod_l+0xb8>
 800bb42:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bb44:	b13a      	cbz	r2, 800bb56 <_strtod_l+0xee>
 800bb46:	2135      	movs	r1, #53	; 0x35
 800bb48:	a81a      	add	r0, sp, #104	; 0x68
 800bb4a:	f002 fd4a 	bl	800e5e2 <__copybits>
 800bb4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bb50:	4620      	mov	r0, r4
 800bb52:	f002 f909 	bl	800dd68 <_Bfree>
 800bb56:	3f01      	subs	r7, #1
 800bb58:	2f04      	cmp	r7, #4
 800bb5a:	d806      	bhi.n	800bb6a <_strtod_l+0x102>
 800bb5c:	e8df f007 	tbb	[pc, r7]
 800bb60:	1714030a 	.word	0x1714030a
 800bb64:	0a          	.byte	0x0a
 800bb65:	00          	.byte	0x00
 800bb66:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bb6a:	0728      	lsls	r0, r5, #28
 800bb6c:	d5c0      	bpl.n	800baf0 <_strtod_l+0x88>
 800bb6e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bb72:	e7bd      	b.n	800baf0 <_strtod_l+0x88>
 800bb74:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bb78:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bb7a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb7e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb82:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bb86:	e7f0      	b.n	800bb6a <_strtod_l+0x102>
 800bb88:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bd0c <_strtod_l+0x2a4>
 800bb8c:	e7ed      	b.n	800bb6a <_strtod_l+0x102>
 800bb8e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bb92:	f04f 3aff 	mov.w	sl, #4294967295
 800bb96:	e7e8      	b.n	800bb6a <_strtod_l+0x102>
 800bb98:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb9a:	1c5a      	adds	r2, r3, #1
 800bb9c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb9e:	785b      	ldrb	r3, [r3, #1]
 800bba0:	2b30      	cmp	r3, #48	; 0x30
 800bba2:	d0f9      	beq.n	800bb98 <_strtod_l+0x130>
 800bba4:	2b00      	cmp	r3, #0
 800bba6:	d0a3      	beq.n	800baf0 <_strtod_l+0x88>
 800bba8:	2301      	movs	r3, #1
 800bbaa:	f04f 0900 	mov.w	r9, #0
 800bbae:	9304      	str	r3, [sp, #16]
 800bbb0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bbb2:	9308      	str	r3, [sp, #32]
 800bbb4:	f8cd 901c 	str.w	r9, [sp, #28]
 800bbb8:	464f      	mov	r7, r9
 800bbba:	220a      	movs	r2, #10
 800bbbc:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bbbe:	7806      	ldrb	r6, [r0, #0]
 800bbc0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bbc4:	b2d9      	uxtb	r1, r3
 800bbc6:	2909      	cmp	r1, #9
 800bbc8:	d92a      	bls.n	800bc20 <_strtod_l+0x1b8>
 800bbca:	9905      	ldr	r1, [sp, #20]
 800bbcc:	462a      	mov	r2, r5
 800bbce:	f003 f913 	bl	800edf8 <strncmp>
 800bbd2:	b398      	cbz	r0, 800bc3c <_strtod_l+0x1d4>
 800bbd4:	2000      	movs	r0, #0
 800bbd6:	4632      	mov	r2, r6
 800bbd8:	463d      	mov	r5, r7
 800bbda:	9005      	str	r0, [sp, #20]
 800bbdc:	4603      	mov	r3, r0
 800bbde:	2a65      	cmp	r2, #101	; 0x65
 800bbe0:	d001      	beq.n	800bbe6 <_strtod_l+0x17e>
 800bbe2:	2a45      	cmp	r2, #69	; 0x45
 800bbe4:	d118      	bne.n	800bc18 <_strtod_l+0x1b0>
 800bbe6:	b91d      	cbnz	r5, 800bbf0 <_strtod_l+0x188>
 800bbe8:	9a04      	ldr	r2, [sp, #16]
 800bbea:	4302      	orrs	r2, r0
 800bbec:	d09e      	beq.n	800bb2c <_strtod_l+0xc4>
 800bbee:	2500      	movs	r5, #0
 800bbf0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bbf4:	f108 0201 	add.w	r2, r8, #1
 800bbf8:	9217      	str	r2, [sp, #92]	; 0x5c
 800bbfa:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bbfe:	2a2b      	cmp	r2, #43	; 0x2b
 800bc00:	d075      	beq.n	800bcee <_strtod_l+0x286>
 800bc02:	2a2d      	cmp	r2, #45	; 0x2d
 800bc04:	d07b      	beq.n	800bcfe <_strtod_l+0x296>
 800bc06:	f04f 0c00 	mov.w	ip, #0
 800bc0a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bc0e:	2909      	cmp	r1, #9
 800bc10:	f240 8082 	bls.w	800bd18 <_strtod_l+0x2b0>
 800bc14:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bc18:	2600      	movs	r6, #0
 800bc1a:	e09d      	b.n	800bd58 <_strtod_l+0x2f0>
 800bc1c:	2300      	movs	r3, #0
 800bc1e:	e7c4      	b.n	800bbaa <_strtod_l+0x142>
 800bc20:	2f08      	cmp	r7, #8
 800bc22:	bfd8      	it	le
 800bc24:	9907      	ldrle	r1, [sp, #28]
 800bc26:	f100 0001 	add.w	r0, r0, #1
 800bc2a:	bfda      	itte	le
 800bc2c:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc30:	9307      	strle	r3, [sp, #28]
 800bc32:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bc36:	3701      	adds	r7, #1
 800bc38:	9017      	str	r0, [sp, #92]	; 0x5c
 800bc3a:	e7bf      	b.n	800bbbc <_strtod_l+0x154>
 800bc3c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc3e:	195a      	adds	r2, r3, r5
 800bc40:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc42:	5d5a      	ldrb	r2, [r3, r5]
 800bc44:	2f00      	cmp	r7, #0
 800bc46:	d037      	beq.n	800bcb8 <_strtod_l+0x250>
 800bc48:	9005      	str	r0, [sp, #20]
 800bc4a:	463d      	mov	r5, r7
 800bc4c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bc50:	2b09      	cmp	r3, #9
 800bc52:	d912      	bls.n	800bc7a <_strtod_l+0x212>
 800bc54:	2301      	movs	r3, #1
 800bc56:	e7c2      	b.n	800bbde <_strtod_l+0x176>
 800bc58:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc5a:	1c5a      	adds	r2, r3, #1
 800bc5c:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc5e:	785a      	ldrb	r2, [r3, #1]
 800bc60:	3001      	adds	r0, #1
 800bc62:	2a30      	cmp	r2, #48	; 0x30
 800bc64:	d0f8      	beq.n	800bc58 <_strtod_l+0x1f0>
 800bc66:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bc6a:	2b08      	cmp	r3, #8
 800bc6c:	f200 84d9 	bhi.w	800c622 <_strtod_l+0xbba>
 800bc70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc72:	9005      	str	r0, [sp, #20]
 800bc74:	2000      	movs	r0, #0
 800bc76:	9308      	str	r3, [sp, #32]
 800bc78:	4605      	mov	r5, r0
 800bc7a:	3a30      	subs	r2, #48	; 0x30
 800bc7c:	f100 0301 	add.w	r3, r0, #1
 800bc80:	d014      	beq.n	800bcac <_strtod_l+0x244>
 800bc82:	9905      	ldr	r1, [sp, #20]
 800bc84:	4419      	add	r1, r3
 800bc86:	9105      	str	r1, [sp, #20]
 800bc88:	462b      	mov	r3, r5
 800bc8a:	eb00 0e05 	add.w	lr, r0, r5
 800bc8e:	210a      	movs	r1, #10
 800bc90:	4573      	cmp	r3, lr
 800bc92:	d113      	bne.n	800bcbc <_strtod_l+0x254>
 800bc94:	182b      	adds	r3, r5, r0
 800bc96:	2b08      	cmp	r3, #8
 800bc98:	f105 0501 	add.w	r5, r5, #1
 800bc9c:	4405      	add	r5, r0
 800bc9e:	dc1c      	bgt.n	800bcda <_strtod_l+0x272>
 800bca0:	9907      	ldr	r1, [sp, #28]
 800bca2:	230a      	movs	r3, #10
 800bca4:	fb03 2301 	mla	r3, r3, r1, r2
 800bca8:	9307      	str	r3, [sp, #28]
 800bcaa:	2300      	movs	r3, #0
 800bcac:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bcae:	1c51      	adds	r1, r2, #1
 800bcb0:	9117      	str	r1, [sp, #92]	; 0x5c
 800bcb2:	7852      	ldrb	r2, [r2, #1]
 800bcb4:	4618      	mov	r0, r3
 800bcb6:	e7c9      	b.n	800bc4c <_strtod_l+0x1e4>
 800bcb8:	4638      	mov	r0, r7
 800bcba:	e7d2      	b.n	800bc62 <_strtod_l+0x1fa>
 800bcbc:	2b08      	cmp	r3, #8
 800bcbe:	dc04      	bgt.n	800bcca <_strtod_l+0x262>
 800bcc0:	9e07      	ldr	r6, [sp, #28]
 800bcc2:	434e      	muls	r6, r1
 800bcc4:	9607      	str	r6, [sp, #28]
 800bcc6:	3301      	adds	r3, #1
 800bcc8:	e7e2      	b.n	800bc90 <_strtod_l+0x228>
 800bcca:	f103 0c01 	add.w	ip, r3, #1
 800bcce:	f1bc 0f10 	cmp.w	ip, #16
 800bcd2:	bfd8      	it	le
 800bcd4:	fb01 f909 	mulle.w	r9, r1, r9
 800bcd8:	e7f5      	b.n	800bcc6 <_strtod_l+0x25e>
 800bcda:	2d10      	cmp	r5, #16
 800bcdc:	bfdc      	itt	le
 800bcde:	230a      	movle	r3, #10
 800bce0:	fb03 2909 	mlale	r9, r3, r9, r2
 800bce4:	e7e1      	b.n	800bcaa <_strtod_l+0x242>
 800bce6:	2300      	movs	r3, #0
 800bce8:	9305      	str	r3, [sp, #20]
 800bcea:	2301      	movs	r3, #1
 800bcec:	e77c      	b.n	800bbe8 <_strtod_l+0x180>
 800bcee:	f04f 0c00 	mov.w	ip, #0
 800bcf2:	f108 0202 	add.w	r2, r8, #2
 800bcf6:	9217      	str	r2, [sp, #92]	; 0x5c
 800bcf8:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bcfc:	e785      	b.n	800bc0a <_strtod_l+0x1a2>
 800bcfe:	f04f 0c01 	mov.w	ip, #1
 800bd02:	e7f6      	b.n	800bcf2 <_strtod_l+0x28a>
 800bd04:	0800fc38 	.word	0x0800fc38
 800bd08:	0800f958 	.word	0x0800f958
 800bd0c:	7ff00000 	.word	0x7ff00000
 800bd10:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd12:	1c51      	adds	r1, r2, #1
 800bd14:	9117      	str	r1, [sp, #92]	; 0x5c
 800bd16:	7852      	ldrb	r2, [r2, #1]
 800bd18:	2a30      	cmp	r2, #48	; 0x30
 800bd1a:	d0f9      	beq.n	800bd10 <_strtod_l+0x2a8>
 800bd1c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bd20:	2908      	cmp	r1, #8
 800bd22:	f63f af79 	bhi.w	800bc18 <_strtod_l+0x1b0>
 800bd26:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bd2a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd2c:	9206      	str	r2, [sp, #24]
 800bd2e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd30:	1c51      	adds	r1, r2, #1
 800bd32:	9117      	str	r1, [sp, #92]	; 0x5c
 800bd34:	7852      	ldrb	r2, [r2, #1]
 800bd36:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bd3a:	2e09      	cmp	r6, #9
 800bd3c:	d937      	bls.n	800bdae <_strtod_l+0x346>
 800bd3e:	9e06      	ldr	r6, [sp, #24]
 800bd40:	1b89      	subs	r1, r1, r6
 800bd42:	2908      	cmp	r1, #8
 800bd44:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bd48:	dc02      	bgt.n	800bd50 <_strtod_l+0x2e8>
 800bd4a:	4576      	cmp	r6, lr
 800bd4c:	bfa8      	it	ge
 800bd4e:	4676      	movge	r6, lr
 800bd50:	f1bc 0f00 	cmp.w	ip, #0
 800bd54:	d000      	beq.n	800bd58 <_strtod_l+0x2f0>
 800bd56:	4276      	negs	r6, r6
 800bd58:	2d00      	cmp	r5, #0
 800bd5a:	d14d      	bne.n	800bdf8 <_strtod_l+0x390>
 800bd5c:	9904      	ldr	r1, [sp, #16]
 800bd5e:	4301      	orrs	r1, r0
 800bd60:	f47f aec6 	bne.w	800baf0 <_strtod_l+0x88>
 800bd64:	2b00      	cmp	r3, #0
 800bd66:	f47f aee1 	bne.w	800bb2c <_strtod_l+0xc4>
 800bd6a:	2a69      	cmp	r2, #105	; 0x69
 800bd6c:	d027      	beq.n	800bdbe <_strtod_l+0x356>
 800bd6e:	dc24      	bgt.n	800bdba <_strtod_l+0x352>
 800bd70:	2a49      	cmp	r2, #73	; 0x49
 800bd72:	d024      	beq.n	800bdbe <_strtod_l+0x356>
 800bd74:	2a4e      	cmp	r2, #78	; 0x4e
 800bd76:	f47f aed9 	bne.w	800bb2c <_strtod_l+0xc4>
 800bd7a:	499f      	ldr	r1, [pc, #636]	; (800bff8 <_strtod_l+0x590>)
 800bd7c:	a817      	add	r0, sp, #92	; 0x5c
 800bd7e:	f001 fed7 	bl	800db30 <__match>
 800bd82:	2800      	cmp	r0, #0
 800bd84:	f43f aed2 	beq.w	800bb2c <_strtod_l+0xc4>
 800bd88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd8a:	781b      	ldrb	r3, [r3, #0]
 800bd8c:	2b28      	cmp	r3, #40	; 0x28
 800bd8e:	d12d      	bne.n	800bdec <_strtod_l+0x384>
 800bd90:	499a      	ldr	r1, [pc, #616]	; (800bffc <_strtod_l+0x594>)
 800bd92:	aa1a      	add	r2, sp, #104	; 0x68
 800bd94:	a817      	add	r0, sp, #92	; 0x5c
 800bd96:	f001 fedf 	bl	800db58 <__hexnan>
 800bd9a:	2805      	cmp	r0, #5
 800bd9c:	d126      	bne.n	800bdec <_strtod_l+0x384>
 800bd9e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bda0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bda4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bda8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bdac:	e6a0      	b.n	800baf0 <_strtod_l+0x88>
 800bdae:	210a      	movs	r1, #10
 800bdb0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bdb4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bdb8:	e7b9      	b.n	800bd2e <_strtod_l+0x2c6>
 800bdba:	2a6e      	cmp	r2, #110	; 0x6e
 800bdbc:	e7db      	b.n	800bd76 <_strtod_l+0x30e>
 800bdbe:	4990      	ldr	r1, [pc, #576]	; (800c000 <_strtod_l+0x598>)
 800bdc0:	a817      	add	r0, sp, #92	; 0x5c
 800bdc2:	f001 feb5 	bl	800db30 <__match>
 800bdc6:	2800      	cmp	r0, #0
 800bdc8:	f43f aeb0 	beq.w	800bb2c <_strtod_l+0xc4>
 800bdcc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdce:	498d      	ldr	r1, [pc, #564]	; (800c004 <_strtod_l+0x59c>)
 800bdd0:	3b01      	subs	r3, #1
 800bdd2:	a817      	add	r0, sp, #92	; 0x5c
 800bdd4:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdd6:	f001 feab 	bl	800db30 <__match>
 800bdda:	b910      	cbnz	r0, 800bde2 <_strtod_l+0x37a>
 800bddc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdde:	3301      	adds	r3, #1
 800bde0:	9317      	str	r3, [sp, #92]	; 0x5c
 800bde2:	f8df b230 	ldr.w	fp, [pc, #560]	; 800c014 <_strtod_l+0x5ac>
 800bde6:	f04f 0a00 	mov.w	sl, #0
 800bdea:	e681      	b.n	800baf0 <_strtod_l+0x88>
 800bdec:	4886      	ldr	r0, [pc, #536]	; (800c008 <_strtod_l+0x5a0>)
 800bdee:	f002 ffeb 	bl	800edc8 <nan>
 800bdf2:	ec5b ab10 	vmov	sl, fp, d0
 800bdf6:	e67b      	b.n	800baf0 <_strtod_l+0x88>
 800bdf8:	9b05      	ldr	r3, [sp, #20]
 800bdfa:	9807      	ldr	r0, [sp, #28]
 800bdfc:	1af3      	subs	r3, r6, r3
 800bdfe:	2f00      	cmp	r7, #0
 800be00:	bf08      	it	eq
 800be02:	462f      	moveq	r7, r5
 800be04:	2d10      	cmp	r5, #16
 800be06:	9306      	str	r3, [sp, #24]
 800be08:	46a8      	mov	r8, r5
 800be0a:	bfa8      	it	ge
 800be0c:	f04f 0810 	movge.w	r8, #16
 800be10:	f7f4 fb78 	bl	8000504 <__aeabi_ui2d>
 800be14:	2d09      	cmp	r5, #9
 800be16:	4682      	mov	sl, r0
 800be18:	468b      	mov	fp, r1
 800be1a:	dd13      	ble.n	800be44 <_strtod_l+0x3dc>
 800be1c:	4b7b      	ldr	r3, [pc, #492]	; (800c00c <_strtod_l+0x5a4>)
 800be1e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800be22:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800be26:	f7f4 fbe7 	bl	80005f8 <__aeabi_dmul>
 800be2a:	4682      	mov	sl, r0
 800be2c:	4648      	mov	r0, r9
 800be2e:	468b      	mov	fp, r1
 800be30:	f7f4 fb68 	bl	8000504 <__aeabi_ui2d>
 800be34:	4602      	mov	r2, r0
 800be36:	460b      	mov	r3, r1
 800be38:	4650      	mov	r0, sl
 800be3a:	4659      	mov	r1, fp
 800be3c:	f7f4 fa26 	bl	800028c <__adddf3>
 800be40:	4682      	mov	sl, r0
 800be42:	468b      	mov	fp, r1
 800be44:	2d0f      	cmp	r5, #15
 800be46:	dc38      	bgt.n	800beba <_strtod_l+0x452>
 800be48:	9b06      	ldr	r3, [sp, #24]
 800be4a:	2b00      	cmp	r3, #0
 800be4c:	f43f ae50 	beq.w	800baf0 <_strtod_l+0x88>
 800be50:	dd24      	ble.n	800be9c <_strtod_l+0x434>
 800be52:	2b16      	cmp	r3, #22
 800be54:	dc0b      	bgt.n	800be6e <_strtod_l+0x406>
 800be56:	496d      	ldr	r1, [pc, #436]	; (800c00c <_strtod_l+0x5a4>)
 800be58:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be5c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be60:	4652      	mov	r2, sl
 800be62:	465b      	mov	r3, fp
 800be64:	f7f4 fbc8 	bl	80005f8 <__aeabi_dmul>
 800be68:	4682      	mov	sl, r0
 800be6a:	468b      	mov	fp, r1
 800be6c:	e640      	b.n	800baf0 <_strtod_l+0x88>
 800be6e:	9a06      	ldr	r2, [sp, #24]
 800be70:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800be74:	4293      	cmp	r3, r2
 800be76:	db20      	blt.n	800beba <_strtod_l+0x452>
 800be78:	4c64      	ldr	r4, [pc, #400]	; (800c00c <_strtod_l+0x5a4>)
 800be7a:	f1c5 050f 	rsb	r5, r5, #15
 800be7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800be82:	4652      	mov	r2, sl
 800be84:	465b      	mov	r3, fp
 800be86:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be8a:	f7f4 fbb5 	bl	80005f8 <__aeabi_dmul>
 800be8e:	9b06      	ldr	r3, [sp, #24]
 800be90:	1b5d      	subs	r5, r3, r5
 800be92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800be96:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be9a:	e7e3      	b.n	800be64 <_strtod_l+0x3fc>
 800be9c:	9b06      	ldr	r3, [sp, #24]
 800be9e:	3316      	adds	r3, #22
 800bea0:	db0b      	blt.n	800beba <_strtod_l+0x452>
 800bea2:	9b05      	ldr	r3, [sp, #20]
 800bea4:	1b9e      	subs	r6, r3, r6
 800bea6:	4b59      	ldr	r3, [pc, #356]	; (800c00c <_strtod_l+0x5a4>)
 800bea8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800beac:	e9d6 2300 	ldrd	r2, r3, [r6]
 800beb0:	4650      	mov	r0, sl
 800beb2:	4659      	mov	r1, fp
 800beb4:	f7f4 fcca 	bl	800084c <__aeabi_ddiv>
 800beb8:	e7d6      	b.n	800be68 <_strtod_l+0x400>
 800beba:	9b06      	ldr	r3, [sp, #24]
 800bebc:	eba5 0808 	sub.w	r8, r5, r8
 800bec0:	4498      	add	r8, r3
 800bec2:	f1b8 0f00 	cmp.w	r8, #0
 800bec6:	dd74      	ble.n	800bfb2 <_strtod_l+0x54a>
 800bec8:	f018 030f 	ands.w	r3, r8, #15
 800becc:	d00a      	beq.n	800bee4 <_strtod_l+0x47c>
 800bece:	494f      	ldr	r1, [pc, #316]	; (800c00c <_strtod_l+0x5a4>)
 800bed0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800bed4:	4652      	mov	r2, sl
 800bed6:	465b      	mov	r3, fp
 800bed8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800bedc:	f7f4 fb8c 	bl	80005f8 <__aeabi_dmul>
 800bee0:	4682      	mov	sl, r0
 800bee2:	468b      	mov	fp, r1
 800bee4:	f038 080f 	bics.w	r8, r8, #15
 800bee8:	d04f      	beq.n	800bf8a <_strtod_l+0x522>
 800beea:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800beee:	dd22      	ble.n	800bf36 <_strtod_l+0x4ce>
 800bef0:	2500      	movs	r5, #0
 800bef2:	462e      	mov	r6, r5
 800bef4:	9507      	str	r5, [sp, #28]
 800bef6:	9505      	str	r5, [sp, #20]
 800bef8:	2322      	movs	r3, #34	; 0x22
 800befa:	f8df b118 	ldr.w	fp, [pc, #280]	; 800c014 <_strtod_l+0x5ac>
 800befe:	6023      	str	r3, [r4, #0]
 800bf00:	f04f 0a00 	mov.w	sl, #0
 800bf04:	9b07      	ldr	r3, [sp, #28]
 800bf06:	2b00      	cmp	r3, #0
 800bf08:	f43f adf2 	beq.w	800baf0 <_strtod_l+0x88>
 800bf0c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bf0e:	4620      	mov	r0, r4
 800bf10:	f001 ff2a 	bl	800dd68 <_Bfree>
 800bf14:	9905      	ldr	r1, [sp, #20]
 800bf16:	4620      	mov	r0, r4
 800bf18:	f001 ff26 	bl	800dd68 <_Bfree>
 800bf1c:	4631      	mov	r1, r6
 800bf1e:	4620      	mov	r0, r4
 800bf20:	f001 ff22 	bl	800dd68 <_Bfree>
 800bf24:	9907      	ldr	r1, [sp, #28]
 800bf26:	4620      	mov	r0, r4
 800bf28:	f001 ff1e 	bl	800dd68 <_Bfree>
 800bf2c:	4629      	mov	r1, r5
 800bf2e:	4620      	mov	r0, r4
 800bf30:	f001 ff1a 	bl	800dd68 <_Bfree>
 800bf34:	e5dc      	b.n	800baf0 <_strtod_l+0x88>
 800bf36:	4b36      	ldr	r3, [pc, #216]	; (800c010 <_strtod_l+0x5a8>)
 800bf38:	9304      	str	r3, [sp, #16]
 800bf3a:	2300      	movs	r3, #0
 800bf3c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bf40:	4650      	mov	r0, sl
 800bf42:	4659      	mov	r1, fp
 800bf44:	4699      	mov	r9, r3
 800bf46:	f1b8 0f01 	cmp.w	r8, #1
 800bf4a:	dc21      	bgt.n	800bf90 <_strtod_l+0x528>
 800bf4c:	b10b      	cbz	r3, 800bf52 <_strtod_l+0x4ea>
 800bf4e:	4682      	mov	sl, r0
 800bf50:	468b      	mov	fp, r1
 800bf52:	4b2f      	ldr	r3, [pc, #188]	; (800c010 <_strtod_l+0x5a8>)
 800bf54:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bf58:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bf5c:	4652      	mov	r2, sl
 800bf5e:	465b      	mov	r3, fp
 800bf60:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bf64:	f7f4 fb48 	bl	80005f8 <__aeabi_dmul>
 800bf68:	4b2a      	ldr	r3, [pc, #168]	; (800c014 <_strtod_l+0x5ac>)
 800bf6a:	460a      	mov	r2, r1
 800bf6c:	400b      	ands	r3, r1
 800bf6e:	492a      	ldr	r1, [pc, #168]	; (800c018 <_strtod_l+0x5b0>)
 800bf70:	428b      	cmp	r3, r1
 800bf72:	4682      	mov	sl, r0
 800bf74:	d8bc      	bhi.n	800bef0 <_strtod_l+0x488>
 800bf76:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bf7a:	428b      	cmp	r3, r1
 800bf7c:	bf86      	itte	hi
 800bf7e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800c01c <_strtod_l+0x5b4>
 800bf82:	f04f 3aff 	movhi.w	sl, #4294967295
 800bf86:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bf8a:	2300      	movs	r3, #0
 800bf8c:	9304      	str	r3, [sp, #16]
 800bf8e:	e084      	b.n	800c09a <_strtod_l+0x632>
 800bf90:	f018 0f01 	tst.w	r8, #1
 800bf94:	d005      	beq.n	800bfa2 <_strtod_l+0x53a>
 800bf96:	9b04      	ldr	r3, [sp, #16]
 800bf98:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf9c:	f7f4 fb2c 	bl	80005f8 <__aeabi_dmul>
 800bfa0:	2301      	movs	r3, #1
 800bfa2:	9a04      	ldr	r2, [sp, #16]
 800bfa4:	3208      	adds	r2, #8
 800bfa6:	f109 0901 	add.w	r9, r9, #1
 800bfaa:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bfae:	9204      	str	r2, [sp, #16]
 800bfb0:	e7c9      	b.n	800bf46 <_strtod_l+0x4de>
 800bfb2:	d0ea      	beq.n	800bf8a <_strtod_l+0x522>
 800bfb4:	f1c8 0800 	rsb	r8, r8, #0
 800bfb8:	f018 020f 	ands.w	r2, r8, #15
 800bfbc:	d00a      	beq.n	800bfd4 <_strtod_l+0x56c>
 800bfbe:	4b13      	ldr	r3, [pc, #76]	; (800c00c <_strtod_l+0x5a4>)
 800bfc0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfc4:	4650      	mov	r0, sl
 800bfc6:	4659      	mov	r1, fp
 800bfc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfcc:	f7f4 fc3e 	bl	800084c <__aeabi_ddiv>
 800bfd0:	4682      	mov	sl, r0
 800bfd2:	468b      	mov	fp, r1
 800bfd4:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bfd8:	d0d7      	beq.n	800bf8a <_strtod_l+0x522>
 800bfda:	f1b8 0f1f 	cmp.w	r8, #31
 800bfde:	dd1f      	ble.n	800c020 <_strtod_l+0x5b8>
 800bfe0:	2500      	movs	r5, #0
 800bfe2:	462e      	mov	r6, r5
 800bfe4:	9507      	str	r5, [sp, #28]
 800bfe6:	9505      	str	r5, [sp, #20]
 800bfe8:	2322      	movs	r3, #34	; 0x22
 800bfea:	f04f 0a00 	mov.w	sl, #0
 800bfee:	f04f 0b00 	mov.w	fp, #0
 800bff2:	6023      	str	r3, [r4, #0]
 800bff4:	e786      	b.n	800bf04 <_strtod_l+0x49c>
 800bff6:	bf00      	nop
 800bff8:	0800f929 	.word	0x0800f929
 800bffc:	0800f96c 	.word	0x0800f96c
 800c000:	0800f921 	.word	0x0800f921
 800c004:	0800fb5c 	.word	0x0800fb5c
 800c008:	0800fa57 	.word	0x0800fa57
 800c00c:	0800fcd0 	.word	0x0800fcd0
 800c010:	0800fca8 	.word	0x0800fca8
 800c014:	7ff00000 	.word	0x7ff00000
 800c018:	7ca00000 	.word	0x7ca00000
 800c01c:	7fefffff 	.word	0x7fefffff
 800c020:	f018 0310 	ands.w	r3, r8, #16
 800c024:	bf18      	it	ne
 800c026:	236a      	movne	r3, #106	; 0x6a
 800c028:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c3d8 <_strtod_l+0x970>
 800c02c:	9304      	str	r3, [sp, #16]
 800c02e:	4650      	mov	r0, sl
 800c030:	4659      	mov	r1, fp
 800c032:	2300      	movs	r3, #0
 800c034:	f018 0f01 	tst.w	r8, #1
 800c038:	d004      	beq.n	800c044 <_strtod_l+0x5dc>
 800c03a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c03e:	f7f4 fadb 	bl	80005f8 <__aeabi_dmul>
 800c042:	2301      	movs	r3, #1
 800c044:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c048:	f109 0908 	add.w	r9, r9, #8
 800c04c:	d1f2      	bne.n	800c034 <_strtod_l+0x5cc>
 800c04e:	b10b      	cbz	r3, 800c054 <_strtod_l+0x5ec>
 800c050:	4682      	mov	sl, r0
 800c052:	468b      	mov	fp, r1
 800c054:	9b04      	ldr	r3, [sp, #16]
 800c056:	b1c3      	cbz	r3, 800c08a <_strtod_l+0x622>
 800c058:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c05c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c060:	2b00      	cmp	r3, #0
 800c062:	4659      	mov	r1, fp
 800c064:	dd11      	ble.n	800c08a <_strtod_l+0x622>
 800c066:	2b1f      	cmp	r3, #31
 800c068:	f340 8124 	ble.w	800c2b4 <_strtod_l+0x84c>
 800c06c:	2b34      	cmp	r3, #52	; 0x34
 800c06e:	bfde      	ittt	le
 800c070:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c074:	f04f 33ff 	movle.w	r3, #4294967295
 800c078:	fa03 f202 	lslle.w	r2, r3, r2
 800c07c:	f04f 0a00 	mov.w	sl, #0
 800c080:	bfcc      	ite	gt
 800c082:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c086:	ea02 0b01 	andle.w	fp, r2, r1
 800c08a:	2200      	movs	r2, #0
 800c08c:	2300      	movs	r3, #0
 800c08e:	4650      	mov	r0, sl
 800c090:	4659      	mov	r1, fp
 800c092:	f7f4 fd19 	bl	8000ac8 <__aeabi_dcmpeq>
 800c096:	2800      	cmp	r0, #0
 800c098:	d1a2      	bne.n	800bfe0 <_strtod_l+0x578>
 800c09a:	9b07      	ldr	r3, [sp, #28]
 800c09c:	9300      	str	r3, [sp, #0]
 800c09e:	9908      	ldr	r1, [sp, #32]
 800c0a0:	462b      	mov	r3, r5
 800c0a2:	463a      	mov	r2, r7
 800c0a4:	4620      	mov	r0, r4
 800c0a6:	f001 fec7 	bl	800de38 <__s2b>
 800c0aa:	9007      	str	r0, [sp, #28]
 800c0ac:	2800      	cmp	r0, #0
 800c0ae:	f43f af1f 	beq.w	800bef0 <_strtod_l+0x488>
 800c0b2:	9b05      	ldr	r3, [sp, #20]
 800c0b4:	1b9e      	subs	r6, r3, r6
 800c0b6:	9b06      	ldr	r3, [sp, #24]
 800c0b8:	2b00      	cmp	r3, #0
 800c0ba:	bfb4      	ite	lt
 800c0bc:	4633      	movlt	r3, r6
 800c0be:	2300      	movge	r3, #0
 800c0c0:	930c      	str	r3, [sp, #48]	; 0x30
 800c0c2:	9b06      	ldr	r3, [sp, #24]
 800c0c4:	2500      	movs	r5, #0
 800c0c6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c0ca:	9312      	str	r3, [sp, #72]	; 0x48
 800c0cc:	462e      	mov	r6, r5
 800c0ce:	9b07      	ldr	r3, [sp, #28]
 800c0d0:	4620      	mov	r0, r4
 800c0d2:	6859      	ldr	r1, [r3, #4]
 800c0d4:	f001 fe08 	bl	800dce8 <_Balloc>
 800c0d8:	9005      	str	r0, [sp, #20]
 800c0da:	2800      	cmp	r0, #0
 800c0dc:	f43f af0c 	beq.w	800bef8 <_strtod_l+0x490>
 800c0e0:	9b07      	ldr	r3, [sp, #28]
 800c0e2:	691a      	ldr	r2, [r3, #16]
 800c0e4:	3202      	adds	r2, #2
 800c0e6:	f103 010c 	add.w	r1, r3, #12
 800c0ea:	0092      	lsls	r2, r2, #2
 800c0ec:	300c      	adds	r0, #12
 800c0ee:	f001 fded 	bl	800dccc <memcpy>
 800c0f2:	ec4b ab10 	vmov	d0, sl, fp
 800c0f6:	aa1a      	add	r2, sp, #104	; 0x68
 800c0f8:	a919      	add	r1, sp, #100	; 0x64
 800c0fa:	4620      	mov	r0, r4
 800c0fc:	f002 f9e2 	bl	800e4c4 <__d2b>
 800c100:	ec4b ab18 	vmov	d8, sl, fp
 800c104:	9018      	str	r0, [sp, #96]	; 0x60
 800c106:	2800      	cmp	r0, #0
 800c108:	f43f aef6 	beq.w	800bef8 <_strtod_l+0x490>
 800c10c:	2101      	movs	r1, #1
 800c10e:	4620      	mov	r0, r4
 800c110:	f001 ff2c 	bl	800df6c <__i2b>
 800c114:	4606      	mov	r6, r0
 800c116:	2800      	cmp	r0, #0
 800c118:	f43f aeee 	beq.w	800bef8 <_strtod_l+0x490>
 800c11c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c11e:	9904      	ldr	r1, [sp, #16]
 800c120:	2b00      	cmp	r3, #0
 800c122:	bfab      	itete	ge
 800c124:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c126:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c128:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c12a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c12e:	bfac      	ite	ge
 800c130:	eb03 0902 	addge.w	r9, r3, r2
 800c134:	1ad7      	sublt	r7, r2, r3
 800c136:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c138:	eba3 0801 	sub.w	r8, r3, r1
 800c13c:	4490      	add	r8, r2
 800c13e:	4ba1      	ldr	r3, [pc, #644]	; (800c3c4 <_strtod_l+0x95c>)
 800c140:	f108 38ff 	add.w	r8, r8, #4294967295
 800c144:	4598      	cmp	r8, r3
 800c146:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c14a:	f280 80c7 	bge.w	800c2dc <_strtod_l+0x874>
 800c14e:	eba3 0308 	sub.w	r3, r3, r8
 800c152:	2b1f      	cmp	r3, #31
 800c154:	eba2 0203 	sub.w	r2, r2, r3
 800c158:	f04f 0101 	mov.w	r1, #1
 800c15c:	f300 80b1 	bgt.w	800c2c2 <_strtod_l+0x85a>
 800c160:	fa01 f303 	lsl.w	r3, r1, r3
 800c164:	930d      	str	r3, [sp, #52]	; 0x34
 800c166:	2300      	movs	r3, #0
 800c168:	9308      	str	r3, [sp, #32]
 800c16a:	eb09 0802 	add.w	r8, r9, r2
 800c16e:	9b04      	ldr	r3, [sp, #16]
 800c170:	45c1      	cmp	r9, r8
 800c172:	4417      	add	r7, r2
 800c174:	441f      	add	r7, r3
 800c176:	464b      	mov	r3, r9
 800c178:	bfa8      	it	ge
 800c17a:	4643      	movge	r3, r8
 800c17c:	42bb      	cmp	r3, r7
 800c17e:	bfa8      	it	ge
 800c180:	463b      	movge	r3, r7
 800c182:	2b00      	cmp	r3, #0
 800c184:	bfc2      	ittt	gt
 800c186:	eba8 0803 	subgt.w	r8, r8, r3
 800c18a:	1aff      	subgt	r7, r7, r3
 800c18c:	eba9 0903 	subgt.w	r9, r9, r3
 800c190:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c192:	2b00      	cmp	r3, #0
 800c194:	dd17      	ble.n	800c1c6 <_strtod_l+0x75e>
 800c196:	4631      	mov	r1, r6
 800c198:	461a      	mov	r2, r3
 800c19a:	4620      	mov	r0, r4
 800c19c:	f001 ffa6 	bl	800e0ec <__pow5mult>
 800c1a0:	4606      	mov	r6, r0
 800c1a2:	2800      	cmp	r0, #0
 800c1a4:	f43f aea8 	beq.w	800bef8 <_strtod_l+0x490>
 800c1a8:	4601      	mov	r1, r0
 800c1aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c1ac:	4620      	mov	r0, r4
 800c1ae:	f001 fef3 	bl	800df98 <__multiply>
 800c1b2:	900b      	str	r0, [sp, #44]	; 0x2c
 800c1b4:	2800      	cmp	r0, #0
 800c1b6:	f43f ae9f 	beq.w	800bef8 <_strtod_l+0x490>
 800c1ba:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1bc:	4620      	mov	r0, r4
 800c1be:	f001 fdd3 	bl	800dd68 <_Bfree>
 800c1c2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c1c4:	9318      	str	r3, [sp, #96]	; 0x60
 800c1c6:	f1b8 0f00 	cmp.w	r8, #0
 800c1ca:	f300 808c 	bgt.w	800c2e6 <_strtod_l+0x87e>
 800c1ce:	9b06      	ldr	r3, [sp, #24]
 800c1d0:	2b00      	cmp	r3, #0
 800c1d2:	dd08      	ble.n	800c1e6 <_strtod_l+0x77e>
 800c1d4:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1d6:	9905      	ldr	r1, [sp, #20]
 800c1d8:	4620      	mov	r0, r4
 800c1da:	f001 ff87 	bl	800e0ec <__pow5mult>
 800c1de:	9005      	str	r0, [sp, #20]
 800c1e0:	2800      	cmp	r0, #0
 800c1e2:	f43f ae89 	beq.w	800bef8 <_strtod_l+0x490>
 800c1e6:	2f00      	cmp	r7, #0
 800c1e8:	dd08      	ble.n	800c1fc <_strtod_l+0x794>
 800c1ea:	9905      	ldr	r1, [sp, #20]
 800c1ec:	463a      	mov	r2, r7
 800c1ee:	4620      	mov	r0, r4
 800c1f0:	f001 ffd6 	bl	800e1a0 <__lshift>
 800c1f4:	9005      	str	r0, [sp, #20]
 800c1f6:	2800      	cmp	r0, #0
 800c1f8:	f43f ae7e 	beq.w	800bef8 <_strtod_l+0x490>
 800c1fc:	f1b9 0f00 	cmp.w	r9, #0
 800c200:	dd08      	ble.n	800c214 <_strtod_l+0x7ac>
 800c202:	4631      	mov	r1, r6
 800c204:	464a      	mov	r2, r9
 800c206:	4620      	mov	r0, r4
 800c208:	f001 ffca 	bl	800e1a0 <__lshift>
 800c20c:	4606      	mov	r6, r0
 800c20e:	2800      	cmp	r0, #0
 800c210:	f43f ae72 	beq.w	800bef8 <_strtod_l+0x490>
 800c214:	9a05      	ldr	r2, [sp, #20]
 800c216:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c218:	4620      	mov	r0, r4
 800c21a:	f002 f84d 	bl	800e2b8 <__mdiff>
 800c21e:	4605      	mov	r5, r0
 800c220:	2800      	cmp	r0, #0
 800c222:	f43f ae69 	beq.w	800bef8 <_strtod_l+0x490>
 800c226:	68c3      	ldr	r3, [r0, #12]
 800c228:	930b      	str	r3, [sp, #44]	; 0x2c
 800c22a:	2300      	movs	r3, #0
 800c22c:	60c3      	str	r3, [r0, #12]
 800c22e:	4631      	mov	r1, r6
 800c230:	f002 f826 	bl	800e280 <__mcmp>
 800c234:	2800      	cmp	r0, #0
 800c236:	da60      	bge.n	800c2fa <_strtod_l+0x892>
 800c238:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c23a:	ea53 030a 	orrs.w	r3, r3, sl
 800c23e:	f040 8082 	bne.w	800c346 <_strtod_l+0x8de>
 800c242:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c246:	2b00      	cmp	r3, #0
 800c248:	d17d      	bne.n	800c346 <_strtod_l+0x8de>
 800c24a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c24e:	0d1b      	lsrs	r3, r3, #20
 800c250:	051b      	lsls	r3, r3, #20
 800c252:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c256:	d976      	bls.n	800c346 <_strtod_l+0x8de>
 800c258:	696b      	ldr	r3, [r5, #20]
 800c25a:	b913      	cbnz	r3, 800c262 <_strtod_l+0x7fa>
 800c25c:	692b      	ldr	r3, [r5, #16]
 800c25e:	2b01      	cmp	r3, #1
 800c260:	dd71      	ble.n	800c346 <_strtod_l+0x8de>
 800c262:	4629      	mov	r1, r5
 800c264:	2201      	movs	r2, #1
 800c266:	4620      	mov	r0, r4
 800c268:	f001 ff9a 	bl	800e1a0 <__lshift>
 800c26c:	4631      	mov	r1, r6
 800c26e:	4605      	mov	r5, r0
 800c270:	f002 f806 	bl	800e280 <__mcmp>
 800c274:	2800      	cmp	r0, #0
 800c276:	dd66      	ble.n	800c346 <_strtod_l+0x8de>
 800c278:	9904      	ldr	r1, [sp, #16]
 800c27a:	4a53      	ldr	r2, [pc, #332]	; (800c3c8 <_strtod_l+0x960>)
 800c27c:	465b      	mov	r3, fp
 800c27e:	2900      	cmp	r1, #0
 800c280:	f000 8081 	beq.w	800c386 <_strtod_l+0x91e>
 800c284:	ea02 010b 	and.w	r1, r2, fp
 800c288:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c28c:	dc7b      	bgt.n	800c386 <_strtod_l+0x91e>
 800c28e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c292:	f77f aea9 	ble.w	800bfe8 <_strtod_l+0x580>
 800c296:	4b4d      	ldr	r3, [pc, #308]	; (800c3cc <_strtod_l+0x964>)
 800c298:	4650      	mov	r0, sl
 800c29a:	4659      	mov	r1, fp
 800c29c:	2200      	movs	r2, #0
 800c29e:	f7f4 f9ab 	bl	80005f8 <__aeabi_dmul>
 800c2a2:	460b      	mov	r3, r1
 800c2a4:	4303      	orrs	r3, r0
 800c2a6:	bf08      	it	eq
 800c2a8:	2322      	moveq	r3, #34	; 0x22
 800c2aa:	4682      	mov	sl, r0
 800c2ac:	468b      	mov	fp, r1
 800c2ae:	bf08      	it	eq
 800c2b0:	6023      	streq	r3, [r4, #0]
 800c2b2:	e62b      	b.n	800bf0c <_strtod_l+0x4a4>
 800c2b4:	f04f 32ff 	mov.w	r2, #4294967295
 800c2b8:	fa02 f303 	lsl.w	r3, r2, r3
 800c2bc:	ea03 0a0a 	and.w	sl, r3, sl
 800c2c0:	e6e3      	b.n	800c08a <_strtod_l+0x622>
 800c2c2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c2c6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c2ca:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c2ce:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c2d2:	fa01 f308 	lsl.w	r3, r1, r8
 800c2d6:	9308      	str	r3, [sp, #32]
 800c2d8:	910d      	str	r1, [sp, #52]	; 0x34
 800c2da:	e746      	b.n	800c16a <_strtod_l+0x702>
 800c2dc:	2300      	movs	r3, #0
 800c2de:	9308      	str	r3, [sp, #32]
 800c2e0:	2301      	movs	r3, #1
 800c2e2:	930d      	str	r3, [sp, #52]	; 0x34
 800c2e4:	e741      	b.n	800c16a <_strtod_l+0x702>
 800c2e6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c2e8:	4642      	mov	r2, r8
 800c2ea:	4620      	mov	r0, r4
 800c2ec:	f001 ff58 	bl	800e1a0 <__lshift>
 800c2f0:	9018      	str	r0, [sp, #96]	; 0x60
 800c2f2:	2800      	cmp	r0, #0
 800c2f4:	f47f af6b 	bne.w	800c1ce <_strtod_l+0x766>
 800c2f8:	e5fe      	b.n	800bef8 <_strtod_l+0x490>
 800c2fa:	465f      	mov	r7, fp
 800c2fc:	d16e      	bne.n	800c3dc <_strtod_l+0x974>
 800c2fe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c300:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c304:	b342      	cbz	r2, 800c358 <_strtod_l+0x8f0>
 800c306:	4a32      	ldr	r2, [pc, #200]	; (800c3d0 <_strtod_l+0x968>)
 800c308:	4293      	cmp	r3, r2
 800c30a:	d128      	bne.n	800c35e <_strtod_l+0x8f6>
 800c30c:	9b04      	ldr	r3, [sp, #16]
 800c30e:	4651      	mov	r1, sl
 800c310:	b1eb      	cbz	r3, 800c34e <_strtod_l+0x8e6>
 800c312:	4b2d      	ldr	r3, [pc, #180]	; (800c3c8 <_strtod_l+0x960>)
 800c314:	403b      	ands	r3, r7
 800c316:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c31a:	f04f 32ff 	mov.w	r2, #4294967295
 800c31e:	d819      	bhi.n	800c354 <_strtod_l+0x8ec>
 800c320:	0d1b      	lsrs	r3, r3, #20
 800c322:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c326:	fa02 f303 	lsl.w	r3, r2, r3
 800c32a:	4299      	cmp	r1, r3
 800c32c:	d117      	bne.n	800c35e <_strtod_l+0x8f6>
 800c32e:	4b29      	ldr	r3, [pc, #164]	; (800c3d4 <_strtod_l+0x96c>)
 800c330:	429f      	cmp	r7, r3
 800c332:	d102      	bne.n	800c33a <_strtod_l+0x8d2>
 800c334:	3101      	adds	r1, #1
 800c336:	f43f addf 	beq.w	800bef8 <_strtod_l+0x490>
 800c33a:	4b23      	ldr	r3, [pc, #140]	; (800c3c8 <_strtod_l+0x960>)
 800c33c:	403b      	ands	r3, r7
 800c33e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c342:	f04f 0a00 	mov.w	sl, #0
 800c346:	9b04      	ldr	r3, [sp, #16]
 800c348:	2b00      	cmp	r3, #0
 800c34a:	d1a4      	bne.n	800c296 <_strtod_l+0x82e>
 800c34c:	e5de      	b.n	800bf0c <_strtod_l+0x4a4>
 800c34e:	f04f 33ff 	mov.w	r3, #4294967295
 800c352:	e7ea      	b.n	800c32a <_strtod_l+0x8c2>
 800c354:	4613      	mov	r3, r2
 800c356:	e7e8      	b.n	800c32a <_strtod_l+0x8c2>
 800c358:	ea53 030a 	orrs.w	r3, r3, sl
 800c35c:	d08c      	beq.n	800c278 <_strtod_l+0x810>
 800c35e:	9b08      	ldr	r3, [sp, #32]
 800c360:	b1db      	cbz	r3, 800c39a <_strtod_l+0x932>
 800c362:	423b      	tst	r3, r7
 800c364:	d0ef      	beq.n	800c346 <_strtod_l+0x8de>
 800c366:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c368:	9a04      	ldr	r2, [sp, #16]
 800c36a:	4650      	mov	r0, sl
 800c36c:	4659      	mov	r1, fp
 800c36e:	b1c3      	cbz	r3, 800c3a2 <_strtod_l+0x93a>
 800c370:	f7ff fb5c 	bl	800ba2c <sulp>
 800c374:	4602      	mov	r2, r0
 800c376:	460b      	mov	r3, r1
 800c378:	ec51 0b18 	vmov	r0, r1, d8
 800c37c:	f7f3 ff86 	bl	800028c <__adddf3>
 800c380:	4682      	mov	sl, r0
 800c382:	468b      	mov	fp, r1
 800c384:	e7df      	b.n	800c346 <_strtod_l+0x8de>
 800c386:	4013      	ands	r3, r2
 800c388:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c38c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c390:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c394:	f04f 3aff 	mov.w	sl, #4294967295
 800c398:	e7d5      	b.n	800c346 <_strtod_l+0x8de>
 800c39a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c39c:	ea13 0f0a 	tst.w	r3, sl
 800c3a0:	e7e0      	b.n	800c364 <_strtod_l+0x8fc>
 800c3a2:	f7ff fb43 	bl	800ba2c <sulp>
 800c3a6:	4602      	mov	r2, r0
 800c3a8:	460b      	mov	r3, r1
 800c3aa:	ec51 0b18 	vmov	r0, r1, d8
 800c3ae:	f7f3 ff6b 	bl	8000288 <__aeabi_dsub>
 800c3b2:	2200      	movs	r2, #0
 800c3b4:	2300      	movs	r3, #0
 800c3b6:	4682      	mov	sl, r0
 800c3b8:	468b      	mov	fp, r1
 800c3ba:	f7f4 fb85 	bl	8000ac8 <__aeabi_dcmpeq>
 800c3be:	2800      	cmp	r0, #0
 800c3c0:	d0c1      	beq.n	800c346 <_strtod_l+0x8de>
 800c3c2:	e611      	b.n	800bfe8 <_strtod_l+0x580>
 800c3c4:	fffffc02 	.word	0xfffffc02
 800c3c8:	7ff00000 	.word	0x7ff00000
 800c3cc:	39500000 	.word	0x39500000
 800c3d0:	000fffff 	.word	0x000fffff
 800c3d4:	7fefffff 	.word	0x7fefffff
 800c3d8:	0800f980 	.word	0x0800f980
 800c3dc:	4631      	mov	r1, r6
 800c3de:	4628      	mov	r0, r5
 800c3e0:	f002 f8cc 	bl	800e57c <__ratio>
 800c3e4:	ec59 8b10 	vmov	r8, r9, d0
 800c3e8:	ee10 0a10 	vmov	r0, s0
 800c3ec:	2200      	movs	r2, #0
 800c3ee:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3f2:	4649      	mov	r1, r9
 800c3f4:	f7f4 fb7c 	bl	8000af0 <__aeabi_dcmple>
 800c3f8:	2800      	cmp	r0, #0
 800c3fa:	d07a      	beq.n	800c4f2 <_strtod_l+0xa8a>
 800c3fc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3fe:	2b00      	cmp	r3, #0
 800c400:	d04a      	beq.n	800c498 <_strtod_l+0xa30>
 800c402:	4b95      	ldr	r3, [pc, #596]	; (800c658 <_strtod_l+0xbf0>)
 800c404:	2200      	movs	r2, #0
 800c406:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c40a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c658 <_strtod_l+0xbf0>
 800c40e:	f04f 0800 	mov.w	r8, #0
 800c412:	4b92      	ldr	r3, [pc, #584]	; (800c65c <_strtod_l+0xbf4>)
 800c414:	403b      	ands	r3, r7
 800c416:	930d      	str	r3, [sp, #52]	; 0x34
 800c418:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c41a:	4b91      	ldr	r3, [pc, #580]	; (800c660 <_strtod_l+0xbf8>)
 800c41c:	429a      	cmp	r2, r3
 800c41e:	f040 80b0 	bne.w	800c582 <_strtod_l+0xb1a>
 800c422:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c426:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c42a:	ec4b ab10 	vmov	d0, sl, fp
 800c42e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c432:	f001 ffcb 	bl	800e3cc <__ulp>
 800c436:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c43a:	ec53 2b10 	vmov	r2, r3, d0
 800c43e:	f7f4 f8db 	bl	80005f8 <__aeabi_dmul>
 800c442:	4652      	mov	r2, sl
 800c444:	465b      	mov	r3, fp
 800c446:	f7f3 ff21 	bl	800028c <__adddf3>
 800c44a:	460b      	mov	r3, r1
 800c44c:	4983      	ldr	r1, [pc, #524]	; (800c65c <_strtod_l+0xbf4>)
 800c44e:	4a85      	ldr	r2, [pc, #532]	; (800c664 <_strtod_l+0xbfc>)
 800c450:	4019      	ands	r1, r3
 800c452:	4291      	cmp	r1, r2
 800c454:	4682      	mov	sl, r0
 800c456:	d960      	bls.n	800c51a <_strtod_l+0xab2>
 800c458:	ee18 3a90 	vmov	r3, s17
 800c45c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c460:	4293      	cmp	r3, r2
 800c462:	d104      	bne.n	800c46e <_strtod_l+0xa06>
 800c464:	ee18 3a10 	vmov	r3, s16
 800c468:	3301      	adds	r3, #1
 800c46a:	f43f ad45 	beq.w	800bef8 <_strtod_l+0x490>
 800c46e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c670 <_strtod_l+0xc08>
 800c472:	f04f 3aff 	mov.w	sl, #4294967295
 800c476:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c478:	4620      	mov	r0, r4
 800c47a:	f001 fc75 	bl	800dd68 <_Bfree>
 800c47e:	9905      	ldr	r1, [sp, #20]
 800c480:	4620      	mov	r0, r4
 800c482:	f001 fc71 	bl	800dd68 <_Bfree>
 800c486:	4631      	mov	r1, r6
 800c488:	4620      	mov	r0, r4
 800c48a:	f001 fc6d 	bl	800dd68 <_Bfree>
 800c48e:	4629      	mov	r1, r5
 800c490:	4620      	mov	r0, r4
 800c492:	f001 fc69 	bl	800dd68 <_Bfree>
 800c496:	e61a      	b.n	800c0ce <_strtod_l+0x666>
 800c498:	f1ba 0f00 	cmp.w	sl, #0
 800c49c:	d11b      	bne.n	800c4d6 <_strtod_l+0xa6e>
 800c49e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c4a2:	b9f3      	cbnz	r3, 800c4e2 <_strtod_l+0xa7a>
 800c4a4:	4b6c      	ldr	r3, [pc, #432]	; (800c658 <_strtod_l+0xbf0>)
 800c4a6:	2200      	movs	r2, #0
 800c4a8:	4640      	mov	r0, r8
 800c4aa:	4649      	mov	r1, r9
 800c4ac:	f7f4 fb16 	bl	8000adc <__aeabi_dcmplt>
 800c4b0:	b9d0      	cbnz	r0, 800c4e8 <_strtod_l+0xa80>
 800c4b2:	4640      	mov	r0, r8
 800c4b4:	4649      	mov	r1, r9
 800c4b6:	4b6c      	ldr	r3, [pc, #432]	; (800c668 <_strtod_l+0xc00>)
 800c4b8:	2200      	movs	r2, #0
 800c4ba:	f7f4 f89d 	bl	80005f8 <__aeabi_dmul>
 800c4be:	4680      	mov	r8, r0
 800c4c0:	4689      	mov	r9, r1
 800c4c2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c4c6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c4ca:	9315      	str	r3, [sp, #84]	; 0x54
 800c4cc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c4d0:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c4d4:	e79d      	b.n	800c412 <_strtod_l+0x9aa>
 800c4d6:	f1ba 0f01 	cmp.w	sl, #1
 800c4da:	d102      	bne.n	800c4e2 <_strtod_l+0xa7a>
 800c4dc:	2f00      	cmp	r7, #0
 800c4de:	f43f ad83 	beq.w	800bfe8 <_strtod_l+0x580>
 800c4e2:	4b62      	ldr	r3, [pc, #392]	; (800c66c <_strtod_l+0xc04>)
 800c4e4:	2200      	movs	r2, #0
 800c4e6:	e78e      	b.n	800c406 <_strtod_l+0x99e>
 800c4e8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c668 <_strtod_l+0xc00>
 800c4ec:	f04f 0800 	mov.w	r8, #0
 800c4f0:	e7e7      	b.n	800c4c2 <_strtod_l+0xa5a>
 800c4f2:	4b5d      	ldr	r3, [pc, #372]	; (800c668 <_strtod_l+0xc00>)
 800c4f4:	4640      	mov	r0, r8
 800c4f6:	4649      	mov	r1, r9
 800c4f8:	2200      	movs	r2, #0
 800c4fa:	f7f4 f87d 	bl	80005f8 <__aeabi_dmul>
 800c4fe:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c500:	4680      	mov	r8, r0
 800c502:	4689      	mov	r9, r1
 800c504:	b933      	cbnz	r3, 800c514 <_strtod_l+0xaac>
 800c506:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c50a:	900e      	str	r0, [sp, #56]	; 0x38
 800c50c:	930f      	str	r3, [sp, #60]	; 0x3c
 800c50e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c512:	e7dd      	b.n	800c4d0 <_strtod_l+0xa68>
 800c514:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c518:	e7f9      	b.n	800c50e <_strtod_l+0xaa6>
 800c51a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c51e:	9b04      	ldr	r3, [sp, #16]
 800c520:	2b00      	cmp	r3, #0
 800c522:	d1a8      	bne.n	800c476 <_strtod_l+0xa0e>
 800c524:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c528:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c52a:	0d1b      	lsrs	r3, r3, #20
 800c52c:	051b      	lsls	r3, r3, #20
 800c52e:	429a      	cmp	r2, r3
 800c530:	d1a1      	bne.n	800c476 <_strtod_l+0xa0e>
 800c532:	4640      	mov	r0, r8
 800c534:	4649      	mov	r1, r9
 800c536:	f7f4 fbbf 	bl	8000cb8 <__aeabi_d2lz>
 800c53a:	f7f4 f82f 	bl	800059c <__aeabi_l2d>
 800c53e:	4602      	mov	r2, r0
 800c540:	460b      	mov	r3, r1
 800c542:	4640      	mov	r0, r8
 800c544:	4649      	mov	r1, r9
 800c546:	f7f3 fe9f 	bl	8000288 <__aeabi_dsub>
 800c54a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c54c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c550:	ea43 030a 	orr.w	r3, r3, sl
 800c554:	4313      	orrs	r3, r2
 800c556:	4680      	mov	r8, r0
 800c558:	4689      	mov	r9, r1
 800c55a:	d055      	beq.n	800c608 <_strtod_l+0xba0>
 800c55c:	a336      	add	r3, pc, #216	; (adr r3, 800c638 <_strtod_l+0xbd0>)
 800c55e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c562:	f7f4 fabb 	bl	8000adc <__aeabi_dcmplt>
 800c566:	2800      	cmp	r0, #0
 800c568:	f47f acd0 	bne.w	800bf0c <_strtod_l+0x4a4>
 800c56c:	a334      	add	r3, pc, #208	; (adr r3, 800c640 <_strtod_l+0xbd8>)
 800c56e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c572:	4640      	mov	r0, r8
 800c574:	4649      	mov	r1, r9
 800c576:	f7f4 facf 	bl	8000b18 <__aeabi_dcmpgt>
 800c57a:	2800      	cmp	r0, #0
 800c57c:	f43f af7b 	beq.w	800c476 <_strtod_l+0xa0e>
 800c580:	e4c4      	b.n	800bf0c <_strtod_l+0x4a4>
 800c582:	9b04      	ldr	r3, [sp, #16]
 800c584:	b333      	cbz	r3, 800c5d4 <_strtod_l+0xb6c>
 800c586:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c588:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c58c:	d822      	bhi.n	800c5d4 <_strtod_l+0xb6c>
 800c58e:	a32e      	add	r3, pc, #184	; (adr r3, 800c648 <_strtod_l+0xbe0>)
 800c590:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c594:	4640      	mov	r0, r8
 800c596:	4649      	mov	r1, r9
 800c598:	f7f4 faaa 	bl	8000af0 <__aeabi_dcmple>
 800c59c:	b1a0      	cbz	r0, 800c5c8 <_strtod_l+0xb60>
 800c59e:	4649      	mov	r1, r9
 800c5a0:	4640      	mov	r0, r8
 800c5a2:	f7f4 fb01 	bl	8000ba8 <__aeabi_d2uiz>
 800c5a6:	2801      	cmp	r0, #1
 800c5a8:	bf38      	it	cc
 800c5aa:	2001      	movcc	r0, #1
 800c5ac:	f7f3 ffaa 	bl	8000504 <__aeabi_ui2d>
 800c5b0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c5b2:	4680      	mov	r8, r0
 800c5b4:	4689      	mov	r9, r1
 800c5b6:	bb23      	cbnz	r3, 800c602 <_strtod_l+0xb9a>
 800c5b8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c5bc:	9010      	str	r0, [sp, #64]	; 0x40
 800c5be:	9311      	str	r3, [sp, #68]	; 0x44
 800c5c0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c5c4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c5c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5ca:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5cc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c5d0:	1a9b      	subs	r3, r3, r2
 800c5d2:	9309      	str	r3, [sp, #36]	; 0x24
 800c5d4:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5d8:	eeb0 0a48 	vmov.f32	s0, s16
 800c5dc:	eef0 0a68 	vmov.f32	s1, s17
 800c5e0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c5e4:	f001 fef2 	bl	800e3cc <__ulp>
 800c5e8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5ec:	ec53 2b10 	vmov	r2, r3, d0
 800c5f0:	f7f4 f802 	bl	80005f8 <__aeabi_dmul>
 800c5f4:	ec53 2b18 	vmov	r2, r3, d8
 800c5f8:	f7f3 fe48 	bl	800028c <__adddf3>
 800c5fc:	4682      	mov	sl, r0
 800c5fe:	468b      	mov	fp, r1
 800c600:	e78d      	b.n	800c51e <_strtod_l+0xab6>
 800c602:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c606:	e7db      	b.n	800c5c0 <_strtod_l+0xb58>
 800c608:	a311      	add	r3, pc, #68	; (adr r3, 800c650 <_strtod_l+0xbe8>)
 800c60a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c60e:	f7f4 fa65 	bl	8000adc <__aeabi_dcmplt>
 800c612:	e7b2      	b.n	800c57a <_strtod_l+0xb12>
 800c614:	2300      	movs	r3, #0
 800c616:	930a      	str	r3, [sp, #40]	; 0x28
 800c618:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c61a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c61c:	6013      	str	r3, [r2, #0]
 800c61e:	f7ff ba6b 	b.w	800baf8 <_strtod_l+0x90>
 800c622:	2a65      	cmp	r2, #101	; 0x65
 800c624:	f43f ab5f 	beq.w	800bce6 <_strtod_l+0x27e>
 800c628:	2a45      	cmp	r2, #69	; 0x45
 800c62a:	f43f ab5c 	beq.w	800bce6 <_strtod_l+0x27e>
 800c62e:	2301      	movs	r3, #1
 800c630:	f7ff bb94 	b.w	800bd5c <_strtod_l+0x2f4>
 800c634:	f3af 8000 	nop.w
 800c638:	94a03595 	.word	0x94a03595
 800c63c:	3fdfffff 	.word	0x3fdfffff
 800c640:	35afe535 	.word	0x35afe535
 800c644:	3fe00000 	.word	0x3fe00000
 800c648:	ffc00000 	.word	0xffc00000
 800c64c:	41dfffff 	.word	0x41dfffff
 800c650:	94a03595 	.word	0x94a03595
 800c654:	3fcfffff 	.word	0x3fcfffff
 800c658:	3ff00000 	.word	0x3ff00000
 800c65c:	7ff00000 	.word	0x7ff00000
 800c660:	7fe00000 	.word	0x7fe00000
 800c664:	7c9fffff 	.word	0x7c9fffff
 800c668:	3fe00000 	.word	0x3fe00000
 800c66c:	bff00000 	.word	0xbff00000
 800c670:	7fefffff 	.word	0x7fefffff

0800c674 <_strtod_r>:
 800c674:	4b01      	ldr	r3, [pc, #4]	; (800c67c <_strtod_r+0x8>)
 800c676:	f7ff b9f7 	b.w	800ba68 <_strtod_l>
 800c67a:	bf00      	nop
 800c67c:	20000088 	.word	0x20000088

0800c680 <strtod>:
 800c680:	460a      	mov	r2, r1
 800c682:	4601      	mov	r1, r0
 800c684:	4802      	ldr	r0, [pc, #8]	; (800c690 <strtod+0x10>)
 800c686:	4b03      	ldr	r3, [pc, #12]	; (800c694 <strtod+0x14>)
 800c688:	6800      	ldr	r0, [r0, #0]
 800c68a:	f7ff b9ed 	b.w	800ba68 <_strtod_l>
 800c68e:	bf00      	nop
 800c690:	20000020 	.word	0x20000020
 800c694:	20000088 	.word	0x20000088

0800c698 <strtok>:
 800c698:	4b16      	ldr	r3, [pc, #88]	; (800c6f4 <strtok+0x5c>)
 800c69a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c69c:	681e      	ldr	r6, [r3, #0]
 800c69e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c6a0:	4605      	mov	r5, r0
 800c6a2:	b9fc      	cbnz	r4, 800c6e4 <strtok+0x4c>
 800c6a4:	2050      	movs	r0, #80	; 0x50
 800c6a6:	9101      	str	r1, [sp, #4]
 800c6a8:	f001 faf6 	bl	800dc98 <malloc>
 800c6ac:	9901      	ldr	r1, [sp, #4]
 800c6ae:	65b0      	str	r0, [r6, #88]	; 0x58
 800c6b0:	4602      	mov	r2, r0
 800c6b2:	b920      	cbnz	r0, 800c6be <strtok+0x26>
 800c6b4:	4b10      	ldr	r3, [pc, #64]	; (800c6f8 <strtok+0x60>)
 800c6b6:	4811      	ldr	r0, [pc, #68]	; (800c6fc <strtok+0x64>)
 800c6b8:	2157      	movs	r1, #87	; 0x57
 800c6ba:	f000 f8cd 	bl	800c858 <__assert_func>
 800c6be:	e9c0 4400 	strd	r4, r4, [r0]
 800c6c2:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c6c6:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c6ca:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c6ce:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c6d2:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c6d6:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c6da:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c6de:	6184      	str	r4, [r0, #24]
 800c6e0:	7704      	strb	r4, [r0, #28]
 800c6e2:	6244      	str	r4, [r0, #36]	; 0x24
 800c6e4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c6e6:	2301      	movs	r3, #1
 800c6e8:	4628      	mov	r0, r5
 800c6ea:	b002      	add	sp, #8
 800c6ec:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6f0:	f000 b806 	b.w	800c700 <__strtok_r>
 800c6f4:	20000020 	.word	0x20000020
 800c6f8:	0800f9a8 	.word	0x0800f9a8
 800c6fc:	0800f9bf 	.word	0x0800f9bf

0800c700 <__strtok_r>:
 800c700:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c702:	b908      	cbnz	r0, 800c708 <__strtok_r+0x8>
 800c704:	6810      	ldr	r0, [r2, #0]
 800c706:	b188      	cbz	r0, 800c72c <__strtok_r+0x2c>
 800c708:	4604      	mov	r4, r0
 800c70a:	4620      	mov	r0, r4
 800c70c:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c710:	460f      	mov	r7, r1
 800c712:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c716:	b91e      	cbnz	r6, 800c720 <__strtok_r+0x20>
 800c718:	b965      	cbnz	r5, 800c734 <__strtok_r+0x34>
 800c71a:	6015      	str	r5, [r2, #0]
 800c71c:	4628      	mov	r0, r5
 800c71e:	e005      	b.n	800c72c <__strtok_r+0x2c>
 800c720:	42b5      	cmp	r5, r6
 800c722:	d1f6      	bne.n	800c712 <__strtok_r+0x12>
 800c724:	2b00      	cmp	r3, #0
 800c726:	d1f0      	bne.n	800c70a <__strtok_r+0xa>
 800c728:	6014      	str	r4, [r2, #0]
 800c72a:	7003      	strb	r3, [r0, #0]
 800c72c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c72e:	461c      	mov	r4, r3
 800c730:	e00c      	b.n	800c74c <__strtok_r+0x4c>
 800c732:	b915      	cbnz	r5, 800c73a <__strtok_r+0x3a>
 800c734:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c738:	460e      	mov	r6, r1
 800c73a:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c73e:	42ab      	cmp	r3, r5
 800c740:	d1f7      	bne.n	800c732 <__strtok_r+0x32>
 800c742:	2b00      	cmp	r3, #0
 800c744:	d0f3      	beq.n	800c72e <__strtok_r+0x2e>
 800c746:	2300      	movs	r3, #0
 800c748:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c74c:	6014      	str	r4, [r2, #0]
 800c74e:	e7ed      	b.n	800c72c <__strtok_r+0x2c>

0800c750 <_strtol_l.constprop.0>:
 800c750:	2b01      	cmp	r3, #1
 800c752:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c756:	d001      	beq.n	800c75c <_strtol_l.constprop.0+0xc>
 800c758:	2b24      	cmp	r3, #36	; 0x24
 800c75a:	d906      	bls.n	800c76a <_strtol_l.constprop.0+0x1a>
 800c75c:	f7fe fa94 	bl	800ac88 <__errno>
 800c760:	2316      	movs	r3, #22
 800c762:	6003      	str	r3, [r0, #0]
 800c764:	2000      	movs	r0, #0
 800c766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c76a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c850 <_strtol_l.constprop.0+0x100>
 800c76e:	460d      	mov	r5, r1
 800c770:	462e      	mov	r6, r5
 800c772:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c776:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c77a:	f017 0708 	ands.w	r7, r7, #8
 800c77e:	d1f7      	bne.n	800c770 <_strtol_l.constprop.0+0x20>
 800c780:	2c2d      	cmp	r4, #45	; 0x2d
 800c782:	d132      	bne.n	800c7ea <_strtol_l.constprop.0+0x9a>
 800c784:	782c      	ldrb	r4, [r5, #0]
 800c786:	2701      	movs	r7, #1
 800c788:	1cb5      	adds	r5, r6, #2
 800c78a:	2b00      	cmp	r3, #0
 800c78c:	d05b      	beq.n	800c846 <_strtol_l.constprop.0+0xf6>
 800c78e:	2b10      	cmp	r3, #16
 800c790:	d109      	bne.n	800c7a6 <_strtol_l.constprop.0+0x56>
 800c792:	2c30      	cmp	r4, #48	; 0x30
 800c794:	d107      	bne.n	800c7a6 <_strtol_l.constprop.0+0x56>
 800c796:	782c      	ldrb	r4, [r5, #0]
 800c798:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c79c:	2c58      	cmp	r4, #88	; 0x58
 800c79e:	d14d      	bne.n	800c83c <_strtol_l.constprop.0+0xec>
 800c7a0:	786c      	ldrb	r4, [r5, #1]
 800c7a2:	2310      	movs	r3, #16
 800c7a4:	3502      	adds	r5, #2
 800c7a6:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c7aa:	f108 38ff 	add.w	r8, r8, #4294967295
 800c7ae:	f04f 0c00 	mov.w	ip, #0
 800c7b2:	fbb8 f9f3 	udiv	r9, r8, r3
 800c7b6:	4666      	mov	r6, ip
 800c7b8:	fb03 8a19 	mls	sl, r3, r9, r8
 800c7bc:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c7c0:	f1be 0f09 	cmp.w	lr, #9
 800c7c4:	d816      	bhi.n	800c7f4 <_strtol_l.constprop.0+0xa4>
 800c7c6:	4674      	mov	r4, lr
 800c7c8:	42a3      	cmp	r3, r4
 800c7ca:	dd24      	ble.n	800c816 <_strtol_l.constprop.0+0xc6>
 800c7cc:	f1bc 0f00 	cmp.w	ip, #0
 800c7d0:	db1e      	blt.n	800c810 <_strtol_l.constprop.0+0xc0>
 800c7d2:	45b1      	cmp	r9, r6
 800c7d4:	d31c      	bcc.n	800c810 <_strtol_l.constprop.0+0xc0>
 800c7d6:	d101      	bne.n	800c7dc <_strtol_l.constprop.0+0x8c>
 800c7d8:	45a2      	cmp	sl, r4
 800c7da:	db19      	blt.n	800c810 <_strtol_l.constprop.0+0xc0>
 800c7dc:	fb06 4603 	mla	r6, r6, r3, r4
 800c7e0:	f04f 0c01 	mov.w	ip, #1
 800c7e4:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7e8:	e7e8      	b.n	800c7bc <_strtol_l.constprop.0+0x6c>
 800c7ea:	2c2b      	cmp	r4, #43	; 0x2b
 800c7ec:	bf04      	itt	eq
 800c7ee:	782c      	ldrbeq	r4, [r5, #0]
 800c7f0:	1cb5      	addeq	r5, r6, #2
 800c7f2:	e7ca      	b.n	800c78a <_strtol_l.constprop.0+0x3a>
 800c7f4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c7f8:	f1be 0f19 	cmp.w	lr, #25
 800c7fc:	d801      	bhi.n	800c802 <_strtol_l.constprop.0+0xb2>
 800c7fe:	3c37      	subs	r4, #55	; 0x37
 800c800:	e7e2      	b.n	800c7c8 <_strtol_l.constprop.0+0x78>
 800c802:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c806:	f1be 0f19 	cmp.w	lr, #25
 800c80a:	d804      	bhi.n	800c816 <_strtol_l.constprop.0+0xc6>
 800c80c:	3c57      	subs	r4, #87	; 0x57
 800c80e:	e7db      	b.n	800c7c8 <_strtol_l.constprop.0+0x78>
 800c810:	f04f 3cff 	mov.w	ip, #4294967295
 800c814:	e7e6      	b.n	800c7e4 <_strtol_l.constprop.0+0x94>
 800c816:	f1bc 0f00 	cmp.w	ip, #0
 800c81a:	da05      	bge.n	800c828 <_strtol_l.constprop.0+0xd8>
 800c81c:	2322      	movs	r3, #34	; 0x22
 800c81e:	6003      	str	r3, [r0, #0]
 800c820:	4646      	mov	r6, r8
 800c822:	b942      	cbnz	r2, 800c836 <_strtol_l.constprop.0+0xe6>
 800c824:	4630      	mov	r0, r6
 800c826:	e79e      	b.n	800c766 <_strtol_l.constprop.0+0x16>
 800c828:	b107      	cbz	r7, 800c82c <_strtol_l.constprop.0+0xdc>
 800c82a:	4276      	negs	r6, r6
 800c82c:	2a00      	cmp	r2, #0
 800c82e:	d0f9      	beq.n	800c824 <_strtol_l.constprop.0+0xd4>
 800c830:	f1bc 0f00 	cmp.w	ip, #0
 800c834:	d000      	beq.n	800c838 <_strtol_l.constprop.0+0xe8>
 800c836:	1e69      	subs	r1, r5, #1
 800c838:	6011      	str	r1, [r2, #0]
 800c83a:	e7f3      	b.n	800c824 <_strtol_l.constprop.0+0xd4>
 800c83c:	2430      	movs	r4, #48	; 0x30
 800c83e:	2b00      	cmp	r3, #0
 800c840:	d1b1      	bne.n	800c7a6 <_strtol_l.constprop.0+0x56>
 800c842:	2308      	movs	r3, #8
 800c844:	e7af      	b.n	800c7a6 <_strtol_l.constprop.0+0x56>
 800c846:	2c30      	cmp	r4, #48	; 0x30
 800c848:	d0a5      	beq.n	800c796 <_strtol_l.constprop.0+0x46>
 800c84a:	230a      	movs	r3, #10
 800c84c:	e7ab      	b.n	800c7a6 <_strtol_l.constprop.0+0x56>
 800c84e:	bf00      	nop
 800c850:	0800fa59 	.word	0x0800fa59

0800c854 <_strtol_r>:
 800c854:	f7ff bf7c 	b.w	800c750 <_strtol_l.constprop.0>

0800c858 <__assert_func>:
 800c858:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c85a:	4614      	mov	r4, r2
 800c85c:	461a      	mov	r2, r3
 800c85e:	4b09      	ldr	r3, [pc, #36]	; (800c884 <__assert_func+0x2c>)
 800c860:	681b      	ldr	r3, [r3, #0]
 800c862:	4605      	mov	r5, r0
 800c864:	68d8      	ldr	r0, [r3, #12]
 800c866:	b14c      	cbz	r4, 800c87c <__assert_func+0x24>
 800c868:	4b07      	ldr	r3, [pc, #28]	; (800c888 <__assert_func+0x30>)
 800c86a:	9100      	str	r1, [sp, #0]
 800c86c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c870:	4906      	ldr	r1, [pc, #24]	; (800c88c <__assert_func+0x34>)
 800c872:	462b      	mov	r3, r5
 800c874:	f000 fe8a 	bl	800d58c <fiprintf>
 800c878:	f002 fba0 	bl	800efbc <abort>
 800c87c:	4b04      	ldr	r3, [pc, #16]	; (800c890 <__assert_func+0x38>)
 800c87e:	461c      	mov	r4, r3
 800c880:	e7f3      	b.n	800c86a <__assert_func+0x12>
 800c882:	bf00      	nop
 800c884:	20000020 	.word	0x20000020
 800c888:	0800fa1c 	.word	0x0800fa1c
 800c88c:	0800fa29 	.word	0x0800fa29
 800c890:	0800fa57 	.word	0x0800fa57

0800c894 <quorem>:
 800c894:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c898:	6903      	ldr	r3, [r0, #16]
 800c89a:	690c      	ldr	r4, [r1, #16]
 800c89c:	42a3      	cmp	r3, r4
 800c89e:	4607      	mov	r7, r0
 800c8a0:	f2c0 8081 	blt.w	800c9a6 <quorem+0x112>
 800c8a4:	3c01      	subs	r4, #1
 800c8a6:	f101 0814 	add.w	r8, r1, #20
 800c8aa:	f100 0514 	add.w	r5, r0, #20
 800c8ae:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c8b2:	9301      	str	r3, [sp, #4]
 800c8b4:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c8b8:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c8bc:	3301      	adds	r3, #1
 800c8be:	429a      	cmp	r2, r3
 800c8c0:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c8c4:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8c8:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8cc:	d331      	bcc.n	800c932 <quorem+0x9e>
 800c8ce:	f04f 0e00 	mov.w	lr, #0
 800c8d2:	4640      	mov	r0, r8
 800c8d4:	46ac      	mov	ip, r5
 800c8d6:	46f2      	mov	sl, lr
 800c8d8:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8dc:	b293      	uxth	r3, r2
 800c8de:	fb06 e303 	mla	r3, r6, r3, lr
 800c8e2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c8e6:	b29b      	uxth	r3, r3
 800c8e8:	ebaa 0303 	sub.w	r3, sl, r3
 800c8ec:	f8dc a000 	ldr.w	sl, [ip]
 800c8f0:	0c12      	lsrs	r2, r2, #16
 800c8f2:	fa13 f38a 	uxtah	r3, r3, sl
 800c8f6:	fb06 e202 	mla	r2, r6, r2, lr
 800c8fa:	9300      	str	r3, [sp, #0]
 800c8fc:	9b00      	ldr	r3, [sp, #0]
 800c8fe:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c902:	b292      	uxth	r2, r2
 800c904:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c908:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c90c:	f8bd 3000 	ldrh.w	r3, [sp]
 800c910:	4581      	cmp	r9, r0
 800c912:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c916:	f84c 3b04 	str.w	r3, [ip], #4
 800c91a:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c91e:	d2db      	bcs.n	800c8d8 <quorem+0x44>
 800c920:	f855 300b 	ldr.w	r3, [r5, fp]
 800c924:	b92b      	cbnz	r3, 800c932 <quorem+0x9e>
 800c926:	9b01      	ldr	r3, [sp, #4]
 800c928:	3b04      	subs	r3, #4
 800c92a:	429d      	cmp	r5, r3
 800c92c:	461a      	mov	r2, r3
 800c92e:	d32e      	bcc.n	800c98e <quorem+0xfa>
 800c930:	613c      	str	r4, [r7, #16]
 800c932:	4638      	mov	r0, r7
 800c934:	f001 fca4 	bl	800e280 <__mcmp>
 800c938:	2800      	cmp	r0, #0
 800c93a:	db24      	blt.n	800c986 <quorem+0xf2>
 800c93c:	3601      	adds	r6, #1
 800c93e:	4628      	mov	r0, r5
 800c940:	f04f 0c00 	mov.w	ip, #0
 800c944:	f858 2b04 	ldr.w	r2, [r8], #4
 800c948:	f8d0 e000 	ldr.w	lr, [r0]
 800c94c:	b293      	uxth	r3, r2
 800c94e:	ebac 0303 	sub.w	r3, ip, r3
 800c952:	0c12      	lsrs	r2, r2, #16
 800c954:	fa13 f38e 	uxtah	r3, r3, lr
 800c958:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c95c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c960:	b29b      	uxth	r3, r3
 800c962:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c966:	45c1      	cmp	r9, r8
 800c968:	f840 3b04 	str.w	r3, [r0], #4
 800c96c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c970:	d2e8      	bcs.n	800c944 <quorem+0xb0>
 800c972:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c976:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c97a:	b922      	cbnz	r2, 800c986 <quorem+0xf2>
 800c97c:	3b04      	subs	r3, #4
 800c97e:	429d      	cmp	r5, r3
 800c980:	461a      	mov	r2, r3
 800c982:	d30a      	bcc.n	800c99a <quorem+0x106>
 800c984:	613c      	str	r4, [r7, #16]
 800c986:	4630      	mov	r0, r6
 800c988:	b003      	add	sp, #12
 800c98a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c98e:	6812      	ldr	r2, [r2, #0]
 800c990:	3b04      	subs	r3, #4
 800c992:	2a00      	cmp	r2, #0
 800c994:	d1cc      	bne.n	800c930 <quorem+0x9c>
 800c996:	3c01      	subs	r4, #1
 800c998:	e7c7      	b.n	800c92a <quorem+0x96>
 800c99a:	6812      	ldr	r2, [r2, #0]
 800c99c:	3b04      	subs	r3, #4
 800c99e:	2a00      	cmp	r2, #0
 800c9a0:	d1f0      	bne.n	800c984 <quorem+0xf0>
 800c9a2:	3c01      	subs	r4, #1
 800c9a4:	e7eb      	b.n	800c97e <quorem+0xea>
 800c9a6:	2000      	movs	r0, #0
 800c9a8:	e7ee      	b.n	800c988 <quorem+0xf4>
 800c9aa:	0000      	movs	r0, r0
 800c9ac:	0000      	movs	r0, r0
	...

0800c9b0 <_dtoa_r>:
 800c9b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c9b4:	ed2d 8b04 	vpush	{d8-d9}
 800c9b8:	ec57 6b10 	vmov	r6, r7, d0
 800c9bc:	b093      	sub	sp, #76	; 0x4c
 800c9be:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c9c0:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c9c4:	9106      	str	r1, [sp, #24]
 800c9c6:	ee10 aa10 	vmov	sl, s0
 800c9ca:	4604      	mov	r4, r0
 800c9cc:	9209      	str	r2, [sp, #36]	; 0x24
 800c9ce:	930c      	str	r3, [sp, #48]	; 0x30
 800c9d0:	46bb      	mov	fp, r7
 800c9d2:	b975      	cbnz	r5, 800c9f2 <_dtoa_r+0x42>
 800c9d4:	2010      	movs	r0, #16
 800c9d6:	f001 f95f 	bl	800dc98 <malloc>
 800c9da:	4602      	mov	r2, r0
 800c9dc:	6260      	str	r0, [r4, #36]	; 0x24
 800c9de:	b920      	cbnz	r0, 800c9ea <_dtoa_r+0x3a>
 800c9e0:	4ba7      	ldr	r3, [pc, #668]	; (800cc80 <_dtoa_r+0x2d0>)
 800c9e2:	21ea      	movs	r1, #234	; 0xea
 800c9e4:	48a7      	ldr	r0, [pc, #668]	; (800cc84 <_dtoa_r+0x2d4>)
 800c9e6:	f7ff ff37 	bl	800c858 <__assert_func>
 800c9ea:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c9ee:	6005      	str	r5, [r0, #0]
 800c9f0:	60c5      	str	r5, [r0, #12]
 800c9f2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9f4:	6819      	ldr	r1, [r3, #0]
 800c9f6:	b151      	cbz	r1, 800ca0e <_dtoa_r+0x5e>
 800c9f8:	685a      	ldr	r2, [r3, #4]
 800c9fa:	604a      	str	r2, [r1, #4]
 800c9fc:	2301      	movs	r3, #1
 800c9fe:	4093      	lsls	r3, r2
 800ca00:	608b      	str	r3, [r1, #8]
 800ca02:	4620      	mov	r0, r4
 800ca04:	f001 f9b0 	bl	800dd68 <_Bfree>
 800ca08:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ca0a:	2200      	movs	r2, #0
 800ca0c:	601a      	str	r2, [r3, #0]
 800ca0e:	1e3b      	subs	r3, r7, #0
 800ca10:	bfaa      	itet	ge
 800ca12:	2300      	movge	r3, #0
 800ca14:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800ca18:	f8c8 3000 	strge.w	r3, [r8]
 800ca1c:	4b9a      	ldr	r3, [pc, #616]	; (800cc88 <_dtoa_r+0x2d8>)
 800ca1e:	bfbc      	itt	lt
 800ca20:	2201      	movlt	r2, #1
 800ca22:	f8c8 2000 	strlt.w	r2, [r8]
 800ca26:	ea33 030b 	bics.w	r3, r3, fp
 800ca2a:	d11b      	bne.n	800ca64 <_dtoa_r+0xb4>
 800ca2c:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca2e:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca32:	6013      	str	r3, [r2, #0]
 800ca34:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca38:	4333      	orrs	r3, r6
 800ca3a:	f000 8592 	beq.w	800d562 <_dtoa_r+0xbb2>
 800ca3e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca40:	b963      	cbnz	r3, 800ca5c <_dtoa_r+0xac>
 800ca42:	4b92      	ldr	r3, [pc, #584]	; (800cc8c <_dtoa_r+0x2dc>)
 800ca44:	e022      	b.n	800ca8c <_dtoa_r+0xdc>
 800ca46:	4b92      	ldr	r3, [pc, #584]	; (800cc90 <_dtoa_r+0x2e0>)
 800ca48:	9301      	str	r3, [sp, #4]
 800ca4a:	3308      	adds	r3, #8
 800ca4c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca4e:	6013      	str	r3, [r2, #0]
 800ca50:	9801      	ldr	r0, [sp, #4]
 800ca52:	b013      	add	sp, #76	; 0x4c
 800ca54:	ecbd 8b04 	vpop	{d8-d9}
 800ca58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca5c:	4b8b      	ldr	r3, [pc, #556]	; (800cc8c <_dtoa_r+0x2dc>)
 800ca5e:	9301      	str	r3, [sp, #4]
 800ca60:	3303      	adds	r3, #3
 800ca62:	e7f3      	b.n	800ca4c <_dtoa_r+0x9c>
 800ca64:	2200      	movs	r2, #0
 800ca66:	2300      	movs	r3, #0
 800ca68:	4650      	mov	r0, sl
 800ca6a:	4659      	mov	r1, fp
 800ca6c:	f7f4 f82c 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca70:	ec4b ab19 	vmov	d9, sl, fp
 800ca74:	4680      	mov	r8, r0
 800ca76:	b158      	cbz	r0, 800ca90 <_dtoa_r+0xe0>
 800ca78:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca7a:	2301      	movs	r3, #1
 800ca7c:	6013      	str	r3, [r2, #0]
 800ca7e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca80:	2b00      	cmp	r3, #0
 800ca82:	f000 856b 	beq.w	800d55c <_dtoa_r+0xbac>
 800ca86:	4883      	ldr	r0, [pc, #524]	; (800cc94 <_dtoa_r+0x2e4>)
 800ca88:	6018      	str	r0, [r3, #0]
 800ca8a:	1e43      	subs	r3, r0, #1
 800ca8c:	9301      	str	r3, [sp, #4]
 800ca8e:	e7df      	b.n	800ca50 <_dtoa_r+0xa0>
 800ca90:	ec4b ab10 	vmov	d0, sl, fp
 800ca94:	aa10      	add	r2, sp, #64	; 0x40
 800ca96:	a911      	add	r1, sp, #68	; 0x44
 800ca98:	4620      	mov	r0, r4
 800ca9a:	f001 fd13 	bl	800e4c4 <__d2b>
 800ca9e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800caa2:	ee08 0a10 	vmov	s16, r0
 800caa6:	2d00      	cmp	r5, #0
 800caa8:	f000 8084 	beq.w	800cbb4 <_dtoa_r+0x204>
 800caac:	ee19 3a90 	vmov	r3, s19
 800cab0:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800cab4:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800cab8:	4656      	mov	r6, sl
 800caba:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800cabe:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800cac2:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800cac6:	4b74      	ldr	r3, [pc, #464]	; (800cc98 <_dtoa_r+0x2e8>)
 800cac8:	2200      	movs	r2, #0
 800caca:	4630      	mov	r0, r6
 800cacc:	4639      	mov	r1, r7
 800cace:	f7f3 fbdb 	bl	8000288 <__aeabi_dsub>
 800cad2:	a365      	add	r3, pc, #404	; (adr r3, 800cc68 <_dtoa_r+0x2b8>)
 800cad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cad8:	f7f3 fd8e 	bl	80005f8 <__aeabi_dmul>
 800cadc:	a364      	add	r3, pc, #400	; (adr r3, 800cc70 <_dtoa_r+0x2c0>)
 800cade:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cae2:	f7f3 fbd3 	bl	800028c <__adddf3>
 800cae6:	4606      	mov	r6, r0
 800cae8:	4628      	mov	r0, r5
 800caea:	460f      	mov	r7, r1
 800caec:	f7f3 fd1a 	bl	8000524 <__aeabi_i2d>
 800caf0:	a361      	add	r3, pc, #388	; (adr r3, 800cc78 <_dtoa_r+0x2c8>)
 800caf2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caf6:	f7f3 fd7f 	bl	80005f8 <__aeabi_dmul>
 800cafa:	4602      	mov	r2, r0
 800cafc:	460b      	mov	r3, r1
 800cafe:	4630      	mov	r0, r6
 800cb00:	4639      	mov	r1, r7
 800cb02:	f7f3 fbc3 	bl	800028c <__adddf3>
 800cb06:	4606      	mov	r6, r0
 800cb08:	460f      	mov	r7, r1
 800cb0a:	f7f4 f825 	bl	8000b58 <__aeabi_d2iz>
 800cb0e:	2200      	movs	r2, #0
 800cb10:	9000      	str	r0, [sp, #0]
 800cb12:	2300      	movs	r3, #0
 800cb14:	4630      	mov	r0, r6
 800cb16:	4639      	mov	r1, r7
 800cb18:	f7f3 ffe0 	bl	8000adc <__aeabi_dcmplt>
 800cb1c:	b150      	cbz	r0, 800cb34 <_dtoa_r+0x184>
 800cb1e:	9800      	ldr	r0, [sp, #0]
 800cb20:	f7f3 fd00 	bl	8000524 <__aeabi_i2d>
 800cb24:	4632      	mov	r2, r6
 800cb26:	463b      	mov	r3, r7
 800cb28:	f7f3 ffce 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb2c:	b910      	cbnz	r0, 800cb34 <_dtoa_r+0x184>
 800cb2e:	9b00      	ldr	r3, [sp, #0]
 800cb30:	3b01      	subs	r3, #1
 800cb32:	9300      	str	r3, [sp, #0]
 800cb34:	9b00      	ldr	r3, [sp, #0]
 800cb36:	2b16      	cmp	r3, #22
 800cb38:	d85a      	bhi.n	800cbf0 <_dtoa_r+0x240>
 800cb3a:	9a00      	ldr	r2, [sp, #0]
 800cb3c:	4b57      	ldr	r3, [pc, #348]	; (800cc9c <_dtoa_r+0x2ec>)
 800cb3e:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb42:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb46:	ec51 0b19 	vmov	r0, r1, d9
 800cb4a:	f7f3 ffc7 	bl	8000adc <__aeabi_dcmplt>
 800cb4e:	2800      	cmp	r0, #0
 800cb50:	d050      	beq.n	800cbf4 <_dtoa_r+0x244>
 800cb52:	9b00      	ldr	r3, [sp, #0]
 800cb54:	3b01      	subs	r3, #1
 800cb56:	9300      	str	r3, [sp, #0]
 800cb58:	2300      	movs	r3, #0
 800cb5a:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb5c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb5e:	1b5d      	subs	r5, r3, r5
 800cb60:	1e6b      	subs	r3, r5, #1
 800cb62:	9305      	str	r3, [sp, #20]
 800cb64:	bf45      	ittet	mi
 800cb66:	f1c5 0301 	rsbmi	r3, r5, #1
 800cb6a:	9304      	strmi	r3, [sp, #16]
 800cb6c:	2300      	movpl	r3, #0
 800cb6e:	2300      	movmi	r3, #0
 800cb70:	bf4c      	ite	mi
 800cb72:	9305      	strmi	r3, [sp, #20]
 800cb74:	9304      	strpl	r3, [sp, #16]
 800cb76:	9b00      	ldr	r3, [sp, #0]
 800cb78:	2b00      	cmp	r3, #0
 800cb7a:	db3d      	blt.n	800cbf8 <_dtoa_r+0x248>
 800cb7c:	9b05      	ldr	r3, [sp, #20]
 800cb7e:	9a00      	ldr	r2, [sp, #0]
 800cb80:	920a      	str	r2, [sp, #40]	; 0x28
 800cb82:	4413      	add	r3, r2
 800cb84:	9305      	str	r3, [sp, #20]
 800cb86:	2300      	movs	r3, #0
 800cb88:	9307      	str	r3, [sp, #28]
 800cb8a:	9b06      	ldr	r3, [sp, #24]
 800cb8c:	2b09      	cmp	r3, #9
 800cb8e:	f200 8089 	bhi.w	800cca4 <_dtoa_r+0x2f4>
 800cb92:	2b05      	cmp	r3, #5
 800cb94:	bfc4      	itt	gt
 800cb96:	3b04      	subgt	r3, #4
 800cb98:	9306      	strgt	r3, [sp, #24]
 800cb9a:	9b06      	ldr	r3, [sp, #24]
 800cb9c:	f1a3 0302 	sub.w	r3, r3, #2
 800cba0:	bfcc      	ite	gt
 800cba2:	2500      	movgt	r5, #0
 800cba4:	2501      	movle	r5, #1
 800cba6:	2b03      	cmp	r3, #3
 800cba8:	f200 8087 	bhi.w	800ccba <_dtoa_r+0x30a>
 800cbac:	e8df f003 	tbb	[pc, r3]
 800cbb0:	59383a2d 	.word	0x59383a2d
 800cbb4:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cbb8:	441d      	add	r5, r3
 800cbba:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cbbe:	2b20      	cmp	r3, #32
 800cbc0:	bfc1      	itttt	gt
 800cbc2:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cbc6:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cbca:	fa0b f303 	lslgt.w	r3, fp, r3
 800cbce:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cbd2:	bfda      	itte	le
 800cbd4:	f1c3 0320 	rsble	r3, r3, #32
 800cbd8:	fa06 f003 	lslle.w	r0, r6, r3
 800cbdc:	4318      	orrgt	r0, r3
 800cbde:	f7f3 fc91 	bl	8000504 <__aeabi_ui2d>
 800cbe2:	2301      	movs	r3, #1
 800cbe4:	4606      	mov	r6, r0
 800cbe6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cbea:	3d01      	subs	r5, #1
 800cbec:	930e      	str	r3, [sp, #56]	; 0x38
 800cbee:	e76a      	b.n	800cac6 <_dtoa_r+0x116>
 800cbf0:	2301      	movs	r3, #1
 800cbf2:	e7b2      	b.n	800cb5a <_dtoa_r+0x1aa>
 800cbf4:	900b      	str	r0, [sp, #44]	; 0x2c
 800cbf6:	e7b1      	b.n	800cb5c <_dtoa_r+0x1ac>
 800cbf8:	9b04      	ldr	r3, [sp, #16]
 800cbfa:	9a00      	ldr	r2, [sp, #0]
 800cbfc:	1a9b      	subs	r3, r3, r2
 800cbfe:	9304      	str	r3, [sp, #16]
 800cc00:	4253      	negs	r3, r2
 800cc02:	9307      	str	r3, [sp, #28]
 800cc04:	2300      	movs	r3, #0
 800cc06:	930a      	str	r3, [sp, #40]	; 0x28
 800cc08:	e7bf      	b.n	800cb8a <_dtoa_r+0x1da>
 800cc0a:	2300      	movs	r3, #0
 800cc0c:	9308      	str	r3, [sp, #32]
 800cc0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc10:	2b00      	cmp	r3, #0
 800cc12:	dc55      	bgt.n	800ccc0 <_dtoa_r+0x310>
 800cc14:	2301      	movs	r3, #1
 800cc16:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cc1a:	461a      	mov	r2, r3
 800cc1c:	9209      	str	r2, [sp, #36]	; 0x24
 800cc1e:	e00c      	b.n	800cc3a <_dtoa_r+0x28a>
 800cc20:	2301      	movs	r3, #1
 800cc22:	e7f3      	b.n	800cc0c <_dtoa_r+0x25c>
 800cc24:	2300      	movs	r3, #0
 800cc26:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc28:	9308      	str	r3, [sp, #32]
 800cc2a:	9b00      	ldr	r3, [sp, #0]
 800cc2c:	4413      	add	r3, r2
 800cc2e:	9302      	str	r3, [sp, #8]
 800cc30:	3301      	adds	r3, #1
 800cc32:	2b01      	cmp	r3, #1
 800cc34:	9303      	str	r3, [sp, #12]
 800cc36:	bfb8      	it	lt
 800cc38:	2301      	movlt	r3, #1
 800cc3a:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cc3c:	2200      	movs	r2, #0
 800cc3e:	6042      	str	r2, [r0, #4]
 800cc40:	2204      	movs	r2, #4
 800cc42:	f102 0614 	add.w	r6, r2, #20
 800cc46:	429e      	cmp	r6, r3
 800cc48:	6841      	ldr	r1, [r0, #4]
 800cc4a:	d93d      	bls.n	800ccc8 <_dtoa_r+0x318>
 800cc4c:	4620      	mov	r0, r4
 800cc4e:	f001 f84b 	bl	800dce8 <_Balloc>
 800cc52:	9001      	str	r0, [sp, #4]
 800cc54:	2800      	cmp	r0, #0
 800cc56:	d13b      	bne.n	800ccd0 <_dtoa_r+0x320>
 800cc58:	4b11      	ldr	r3, [pc, #68]	; (800cca0 <_dtoa_r+0x2f0>)
 800cc5a:	4602      	mov	r2, r0
 800cc5c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc60:	e6c0      	b.n	800c9e4 <_dtoa_r+0x34>
 800cc62:	2301      	movs	r3, #1
 800cc64:	e7df      	b.n	800cc26 <_dtoa_r+0x276>
 800cc66:	bf00      	nop
 800cc68:	636f4361 	.word	0x636f4361
 800cc6c:	3fd287a7 	.word	0x3fd287a7
 800cc70:	8b60c8b3 	.word	0x8b60c8b3
 800cc74:	3fc68a28 	.word	0x3fc68a28
 800cc78:	509f79fb 	.word	0x509f79fb
 800cc7c:	3fd34413 	.word	0x3fd34413
 800cc80:	0800f9a8 	.word	0x0800f9a8
 800cc84:	0800fb66 	.word	0x0800fb66
 800cc88:	7ff00000 	.word	0x7ff00000
 800cc8c:	0800fb62 	.word	0x0800fb62
 800cc90:	0800fb59 	.word	0x0800fb59
 800cc94:	0800f92d 	.word	0x0800f92d
 800cc98:	3ff80000 	.word	0x3ff80000
 800cc9c:	0800fcd0 	.word	0x0800fcd0
 800cca0:	0800fbc1 	.word	0x0800fbc1
 800cca4:	2501      	movs	r5, #1
 800cca6:	2300      	movs	r3, #0
 800cca8:	9306      	str	r3, [sp, #24]
 800ccaa:	9508      	str	r5, [sp, #32]
 800ccac:	f04f 33ff 	mov.w	r3, #4294967295
 800ccb0:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ccb4:	2200      	movs	r2, #0
 800ccb6:	2312      	movs	r3, #18
 800ccb8:	e7b0      	b.n	800cc1c <_dtoa_r+0x26c>
 800ccba:	2301      	movs	r3, #1
 800ccbc:	9308      	str	r3, [sp, #32]
 800ccbe:	e7f5      	b.n	800ccac <_dtoa_r+0x2fc>
 800ccc0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ccc2:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800ccc6:	e7b8      	b.n	800cc3a <_dtoa_r+0x28a>
 800ccc8:	3101      	adds	r1, #1
 800ccca:	6041      	str	r1, [r0, #4]
 800cccc:	0052      	lsls	r2, r2, #1
 800ccce:	e7b8      	b.n	800cc42 <_dtoa_r+0x292>
 800ccd0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccd2:	9a01      	ldr	r2, [sp, #4]
 800ccd4:	601a      	str	r2, [r3, #0]
 800ccd6:	9b03      	ldr	r3, [sp, #12]
 800ccd8:	2b0e      	cmp	r3, #14
 800ccda:	f200 809d 	bhi.w	800ce18 <_dtoa_r+0x468>
 800ccde:	2d00      	cmp	r5, #0
 800cce0:	f000 809a 	beq.w	800ce18 <_dtoa_r+0x468>
 800cce4:	9b00      	ldr	r3, [sp, #0]
 800cce6:	2b00      	cmp	r3, #0
 800cce8:	dd32      	ble.n	800cd50 <_dtoa_r+0x3a0>
 800ccea:	4ab7      	ldr	r2, [pc, #732]	; (800cfc8 <_dtoa_r+0x618>)
 800ccec:	f003 030f 	and.w	r3, r3, #15
 800ccf0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800ccf4:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccf8:	9b00      	ldr	r3, [sp, #0]
 800ccfa:	05d8      	lsls	r0, r3, #23
 800ccfc:	ea4f 1723 	mov.w	r7, r3, asr #4
 800cd00:	d516      	bpl.n	800cd30 <_dtoa_r+0x380>
 800cd02:	4bb2      	ldr	r3, [pc, #712]	; (800cfcc <_dtoa_r+0x61c>)
 800cd04:	ec51 0b19 	vmov	r0, r1, d9
 800cd08:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cd0c:	f7f3 fd9e 	bl	800084c <__aeabi_ddiv>
 800cd10:	f007 070f 	and.w	r7, r7, #15
 800cd14:	4682      	mov	sl, r0
 800cd16:	468b      	mov	fp, r1
 800cd18:	2503      	movs	r5, #3
 800cd1a:	4eac      	ldr	r6, [pc, #688]	; (800cfcc <_dtoa_r+0x61c>)
 800cd1c:	b957      	cbnz	r7, 800cd34 <_dtoa_r+0x384>
 800cd1e:	4642      	mov	r2, r8
 800cd20:	464b      	mov	r3, r9
 800cd22:	4650      	mov	r0, sl
 800cd24:	4659      	mov	r1, fp
 800cd26:	f7f3 fd91 	bl	800084c <__aeabi_ddiv>
 800cd2a:	4682      	mov	sl, r0
 800cd2c:	468b      	mov	fp, r1
 800cd2e:	e028      	b.n	800cd82 <_dtoa_r+0x3d2>
 800cd30:	2502      	movs	r5, #2
 800cd32:	e7f2      	b.n	800cd1a <_dtoa_r+0x36a>
 800cd34:	07f9      	lsls	r1, r7, #31
 800cd36:	d508      	bpl.n	800cd4a <_dtoa_r+0x39a>
 800cd38:	4640      	mov	r0, r8
 800cd3a:	4649      	mov	r1, r9
 800cd3c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd40:	f7f3 fc5a 	bl	80005f8 <__aeabi_dmul>
 800cd44:	3501      	adds	r5, #1
 800cd46:	4680      	mov	r8, r0
 800cd48:	4689      	mov	r9, r1
 800cd4a:	107f      	asrs	r7, r7, #1
 800cd4c:	3608      	adds	r6, #8
 800cd4e:	e7e5      	b.n	800cd1c <_dtoa_r+0x36c>
 800cd50:	f000 809b 	beq.w	800ce8a <_dtoa_r+0x4da>
 800cd54:	9b00      	ldr	r3, [sp, #0]
 800cd56:	4f9d      	ldr	r7, [pc, #628]	; (800cfcc <_dtoa_r+0x61c>)
 800cd58:	425e      	negs	r6, r3
 800cd5a:	4b9b      	ldr	r3, [pc, #620]	; (800cfc8 <_dtoa_r+0x618>)
 800cd5c:	f006 020f 	and.w	r2, r6, #15
 800cd60:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd64:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd68:	ec51 0b19 	vmov	r0, r1, d9
 800cd6c:	f7f3 fc44 	bl	80005f8 <__aeabi_dmul>
 800cd70:	1136      	asrs	r6, r6, #4
 800cd72:	4682      	mov	sl, r0
 800cd74:	468b      	mov	fp, r1
 800cd76:	2300      	movs	r3, #0
 800cd78:	2502      	movs	r5, #2
 800cd7a:	2e00      	cmp	r6, #0
 800cd7c:	d17a      	bne.n	800ce74 <_dtoa_r+0x4c4>
 800cd7e:	2b00      	cmp	r3, #0
 800cd80:	d1d3      	bne.n	800cd2a <_dtoa_r+0x37a>
 800cd82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd84:	2b00      	cmp	r3, #0
 800cd86:	f000 8082 	beq.w	800ce8e <_dtoa_r+0x4de>
 800cd8a:	4b91      	ldr	r3, [pc, #580]	; (800cfd0 <_dtoa_r+0x620>)
 800cd8c:	2200      	movs	r2, #0
 800cd8e:	4650      	mov	r0, sl
 800cd90:	4659      	mov	r1, fp
 800cd92:	f7f3 fea3 	bl	8000adc <__aeabi_dcmplt>
 800cd96:	2800      	cmp	r0, #0
 800cd98:	d079      	beq.n	800ce8e <_dtoa_r+0x4de>
 800cd9a:	9b03      	ldr	r3, [sp, #12]
 800cd9c:	2b00      	cmp	r3, #0
 800cd9e:	d076      	beq.n	800ce8e <_dtoa_r+0x4de>
 800cda0:	9b02      	ldr	r3, [sp, #8]
 800cda2:	2b00      	cmp	r3, #0
 800cda4:	dd36      	ble.n	800ce14 <_dtoa_r+0x464>
 800cda6:	9b00      	ldr	r3, [sp, #0]
 800cda8:	4650      	mov	r0, sl
 800cdaa:	4659      	mov	r1, fp
 800cdac:	1e5f      	subs	r7, r3, #1
 800cdae:	2200      	movs	r2, #0
 800cdb0:	4b88      	ldr	r3, [pc, #544]	; (800cfd4 <_dtoa_r+0x624>)
 800cdb2:	f7f3 fc21 	bl	80005f8 <__aeabi_dmul>
 800cdb6:	9e02      	ldr	r6, [sp, #8]
 800cdb8:	4682      	mov	sl, r0
 800cdba:	468b      	mov	fp, r1
 800cdbc:	3501      	adds	r5, #1
 800cdbe:	4628      	mov	r0, r5
 800cdc0:	f7f3 fbb0 	bl	8000524 <__aeabi_i2d>
 800cdc4:	4652      	mov	r2, sl
 800cdc6:	465b      	mov	r3, fp
 800cdc8:	f7f3 fc16 	bl	80005f8 <__aeabi_dmul>
 800cdcc:	4b82      	ldr	r3, [pc, #520]	; (800cfd8 <_dtoa_r+0x628>)
 800cdce:	2200      	movs	r2, #0
 800cdd0:	f7f3 fa5c 	bl	800028c <__adddf3>
 800cdd4:	46d0      	mov	r8, sl
 800cdd6:	46d9      	mov	r9, fp
 800cdd8:	4682      	mov	sl, r0
 800cdda:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cdde:	2e00      	cmp	r6, #0
 800cde0:	d158      	bne.n	800ce94 <_dtoa_r+0x4e4>
 800cde2:	4b7e      	ldr	r3, [pc, #504]	; (800cfdc <_dtoa_r+0x62c>)
 800cde4:	2200      	movs	r2, #0
 800cde6:	4640      	mov	r0, r8
 800cde8:	4649      	mov	r1, r9
 800cdea:	f7f3 fa4d 	bl	8000288 <__aeabi_dsub>
 800cdee:	4652      	mov	r2, sl
 800cdf0:	465b      	mov	r3, fp
 800cdf2:	4680      	mov	r8, r0
 800cdf4:	4689      	mov	r9, r1
 800cdf6:	f7f3 fe8f 	bl	8000b18 <__aeabi_dcmpgt>
 800cdfa:	2800      	cmp	r0, #0
 800cdfc:	f040 8295 	bne.w	800d32a <_dtoa_r+0x97a>
 800ce00:	4652      	mov	r2, sl
 800ce02:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ce06:	4640      	mov	r0, r8
 800ce08:	4649      	mov	r1, r9
 800ce0a:	f7f3 fe67 	bl	8000adc <__aeabi_dcmplt>
 800ce0e:	2800      	cmp	r0, #0
 800ce10:	f040 8289 	bne.w	800d326 <_dtoa_r+0x976>
 800ce14:	ec5b ab19 	vmov	sl, fp, d9
 800ce18:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800ce1a:	2b00      	cmp	r3, #0
 800ce1c:	f2c0 8148 	blt.w	800d0b0 <_dtoa_r+0x700>
 800ce20:	9a00      	ldr	r2, [sp, #0]
 800ce22:	2a0e      	cmp	r2, #14
 800ce24:	f300 8144 	bgt.w	800d0b0 <_dtoa_r+0x700>
 800ce28:	4b67      	ldr	r3, [pc, #412]	; (800cfc8 <_dtoa_r+0x618>)
 800ce2a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce2e:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce32:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce34:	2b00      	cmp	r3, #0
 800ce36:	f280 80d5 	bge.w	800cfe4 <_dtoa_r+0x634>
 800ce3a:	9b03      	ldr	r3, [sp, #12]
 800ce3c:	2b00      	cmp	r3, #0
 800ce3e:	f300 80d1 	bgt.w	800cfe4 <_dtoa_r+0x634>
 800ce42:	f040 826f 	bne.w	800d324 <_dtoa_r+0x974>
 800ce46:	4b65      	ldr	r3, [pc, #404]	; (800cfdc <_dtoa_r+0x62c>)
 800ce48:	2200      	movs	r2, #0
 800ce4a:	4640      	mov	r0, r8
 800ce4c:	4649      	mov	r1, r9
 800ce4e:	f7f3 fbd3 	bl	80005f8 <__aeabi_dmul>
 800ce52:	4652      	mov	r2, sl
 800ce54:	465b      	mov	r3, fp
 800ce56:	f7f3 fe55 	bl	8000b04 <__aeabi_dcmpge>
 800ce5a:	9e03      	ldr	r6, [sp, #12]
 800ce5c:	4637      	mov	r7, r6
 800ce5e:	2800      	cmp	r0, #0
 800ce60:	f040 8245 	bne.w	800d2ee <_dtoa_r+0x93e>
 800ce64:	9d01      	ldr	r5, [sp, #4]
 800ce66:	2331      	movs	r3, #49	; 0x31
 800ce68:	f805 3b01 	strb.w	r3, [r5], #1
 800ce6c:	9b00      	ldr	r3, [sp, #0]
 800ce6e:	3301      	adds	r3, #1
 800ce70:	9300      	str	r3, [sp, #0]
 800ce72:	e240      	b.n	800d2f6 <_dtoa_r+0x946>
 800ce74:	07f2      	lsls	r2, r6, #31
 800ce76:	d505      	bpl.n	800ce84 <_dtoa_r+0x4d4>
 800ce78:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce7c:	f7f3 fbbc 	bl	80005f8 <__aeabi_dmul>
 800ce80:	3501      	adds	r5, #1
 800ce82:	2301      	movs	r3, #1
 800ce84:	1076      	asrs	r6, r6, #1
 800ce86:	3708      	adds	r7, #8
 800ce88:	e777      	b.n	800cd7a <_dtoa_r+0x3ca>
 800ce8a:	2502      	movs	r5, #2
 800ce8c:	e779      	b.n	800cd82 <_dtoa_r+0x3d2>
 800ce8e:	9f00      	ldr	r7, [sp, #0]
 800ce90:	9e03      	ldr	r6, [sp, #12]
 800ce92:	e794      	b.n	800cdbe <_dtoa_r+0x40e>
 800ce94:	9901      	ldr	r1, [sp, #4]
 800ce96:	4b4c      	ldr	r3, [pc, #304]	; (800cfc8 <_dtoa_r+0x618>)
 800ce98:	4431      	add	r1, r6
 800ce9a:	910d      	str	r1, [sp, #52]	; 0x34
 800ce9c:	9908      	ldr	r1, [sp, #32]
 800ce9e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800cea2:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800cea6:	2900      	cmp	r1, #0
 800cea8:	d043      	beq.n	800cf32 <_dtoa_r+0x582>
 800ceaa:	494d      	ldr	r1, [pc, #308]	; (800cfe0 <_dtoa_r+0x630>)
 800ceac:	2000      	movs	r0, #0
 800ceae:	f7f3 fccd 	bl	800084c <__aeabi_ddiv>
 800ceb2:	4652      	mov	r2, sl
 800ceb4:	465b      	mov	r3, fp
 800ceb6:	f7f3 f9e7 	bl	8000288 <__aeabi_dsub>
 800ceba:	9d01      	ldr	r5, [sp, #4]
 800cebc:	4682      	mov	sl, r0
 800cebe:	468b      	mov	fp, r1
 800cec0:	4649      	mov	r1, r9
 800cec2:	4640      	mov	r0, r8
 800cec4:	f7f3 fe48 	bl	8000b58 <__aeabi_d2iz>
 800cec8:	4606      	mov	r6, r0
 800ceca:	f7f3 fb2b 	bl	8000524 <__aeabi_i2d>
 800cece:	4602      	mov	r2, r0
 800ced0:	460b      	mov	r3, r1
 800ced2:	4640      	mov	r0, r8
 800ced4:	4649      	mov	r1, r9
 800ced6:	f7f3 f9d7 	bl	8000288 <__aeabi_dsub>
 800ceda:	3630      	adds	r6, #48	; 0x30
 800cedc:	f805 6b01 	strb.w	r6, [r5], #1
 800cee0:	4652      	mov	r2, sl
 800cee2:	465b      	mov	r3, fp
 800cee4:	4680      	mov	r8, r0
 800cee6:	4689      	mov	r9, r1
 800cee8:	f7f3 fdf8 	bl	8000adc <__aeabi_dcmplt>
 800ceec:	2800      	cmp	r0, #0
 800ceee:	d163      	bne.n	800cfb8 <_dtoa_r+0x608>
 800cef0:	4642      	mov	r2, r8
 800cef2:	464b      	mov	r3, r9
 800cef4:	4936      	ldr	r1, [pc, #216]	; (800cfd0 <_dtoa_r+0x620>)
 800cef6:	2000      	movs	r0, #0
 800cef8:	f7f3 f9c6 	bl	8000288 <__aeabi_dsub>
 800cefc:	4652      	mov	r2, sl
 800cefe:	465b      	mov	r3, fp
 800cf00:	f7f3 fdec 	bl	8000adc <__aeabi_dcmplt>
 800cf04:	2800      	cmp	r0, #0
 800cf06:	f040 80b5 	bne.w	800d074 <_dtoa_r+0x6c4>
 800cf0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf0c:	429d      	cmp	r5, r3
 800cf0e:	d081      	beq.n	800ce14 <_dtoa_r+0x464>
 800cf10:	4b30      	ldr	r3, [pc, #192]	; (800cfd4 <_dtoa_r+0x624>)
 800cf12:	2200      	movs	r2, #0
 800cf14:	4650      	mov	r0, sl
 800cf16:	4659      	mov	r1, fp
 800cf18:	f7f3 fb6e 	bl	80005f8 <__aeabi_dmul>
 800cf1c:	4b2d      	ldr	r3, [pc, #180]	; (800cfd4 <_dtoa_r+0x624>)
 800cf1e:	4682      	mov	sl, r0
 800cf20:	468b      	mov	fp, r1
 800cf22:	4640      	mov	r0, r8
 800cf24:	4649      	mov	r1, r9
 800cf26:	2200      	movs	r2, #0
 800cf28:	f7f3 fb66 	bl	80005f8 <__aeabi_dmul>
 800cf2c:	4680      	mov	r8, r0
 800cf2e:	4689      	mov	r9, r1
 800cf30:	e7c6      	b.n	800cec0 <_dtoa_r+0x510>
 800cf32:	4650      	mov	r0, sl
 800cf34:	4659      	mov	r1, fp
 800cf36:	f7f3 fb5f 	bl	80005f8 <__aeabi_dmul>
 800cf3a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf3c:	9d01      	ldr	r5, [sp, #4]
 800cf3e:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf40:	4682      	mov	sl, r0
 800cf42:	468b      	mov	fp, r1
 800cf44:	4649      	mov	r1, r9
 800cf46:	4640      	mov	r0, r8
 800cf48:	f7f3 fe06 	bl	8000b58 <__aeabi_d2iz>
 800cf4c:	4606      	mov	r6, r0
 800cf4e:	f7f3 fae9 	bl	8000524 <__aeabi_i2d>
 800cf52:	3630      	adds	r6, #48	; 0x30
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4640      	mov	r0, r8
 800cf5a:	4649      	mov	r1, r9
 800cf5c:	f7f3 f994 	bl	8000288 <__aeabi_dsub>
 800cf60:	f805 6b01 	strb.w	r6, [r5], #1
 800cf64:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf66:	429d      	cmp	r5, r3
 800cf68:	4680      	mov	r8, r0
 800cf6a:	4689      	mov	r9, r1
 800cf6c:	f04f 0200 	mov.w	r2, #0
 800cf70:	d124      	bne.n	800cfbc <_dtoa_r+0x60c>
 800cf72:	4b1b      	ldr	r3, [pc, #108]	; (800cfe0 <_dtoa_r+0x630>)
 800cf74:	4650      	mov	r0, sl
 800cf76:	4659      	mov	r1, fp
 800cf78:	f7f3 f988 	bl	800028c <__adddf3>
 800cf7c:	4602      	mov	r2, r0
 800cf7e:	460b      	mov	r3, r1
 800cf80:	4640      	mov	r0, r8
 800cf82:	4649      	mov	r1, r9
 800cf84:	f7f3 fdc8 	bl	8000b18 <__aeabi_dcmpgt>
 800cf88:	2800      	cmp	r0, #0
 800cf8a:	d173      	bne.n	800d074 <_dtoa_r+0x6c4>
 800cf8c:	4652      	mov	r2, sl
 800cf8e:	465b      	mov	r3, fp
 800cf90:	4913      	ldr	r1, [pc, #76]	; (800cfe0 <_dtoa_r+0x630>)
 800cf92:	2000      	movs	r0, #0
 800cf94:	f7f3 f978 	bl	8000288 <__aeabi_dsub>
 800cf98:	4602      	mov	r2, r0
 800cf9a:	460b      	mov	r3, r1
 800cf9c:	4640      	mov	r0, r8
 800cf9e:	4649      	mov	r1, r9
 800cfa0:	f7f3 fd9c 	bl	8000adc <__aeabi_dcmplt>
 800cfa4:	2800      	cmp	r0, #0
 800cfa6:	f43f af35 	beq.w	800ce14 <_dtoa_r+0x464>
 800cfaa:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cfac:	1e6b      	subs	r3, r5, #1
 800cfae:	930f      	str	r3, [sp, #60]	; 0x3c
 800cfb0:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cfb4:	2b30      	cmp	r3, #48	; 0x30
 800cfb6:	d0f8      	beq.n	800cfaa <_dtoa_r+0x5fa>
 800cfb8:	9700      	str	r7, [sp, #0]
 800cfba:	e049      	b.n	800d050 <_dtoa_r+0x6a0>
 800cfbc:	4b05      	ldr	r3, [pc, #20]	; (800cfd4 <_dtoa_r+0x624>)
 800cfbe:	f7f3 fb1b 	bl	80005f8 <__aeabi_dmul>
 800cfc2:	4680      	mov	r8, r0
 800cfc4:	4689      	mov	r9, r1
 800cfc6:	e7bd      	b.n	800cf44 <_dtoa_r+0x594>
 800cfc8:	0800fcd0 	.word	0x0800fcd0
 800cfcc:	0800fca8 	.word	0x0800fca8
 800cfd0:	3ff00000 	.word	0x3ff00000
 800cfd4:	40240000 	.word	0x40240000
 800cfd8:	401c0000 	.word	0x401c0000
 800cfdc:	40140000 	.word	0x40140000
 800cfe0:	3fe00000 	.word	0x3fe00000
 800cfe4:	9d01      	ldr	r5, [sp, #4]
 800cfe6:	4656      	mov	r6, sl
 800cfe8:	465f      	mov	r7, fp
 800cfea:	4642      	mov	r2, r8
 800cfec:	464b      	mov	r3, r9
 800cfee:	4630      	mov	r0, r6
 800cff0:	4639      	mov	r1, r7
 800cff2:	f7f3 fc2b 	bl	800084c <__aeabi_ddiv>
 800cff6:	f7f3 fdaf 	bl	8000b58 <__aeabi_d2iz>
 800cffa:	4682      	mov	sl, r0
 800cffc:	f7f3 fa92 	bl	8000524 <__aeabi_i2d>
 800d000:	4642      	mov	r2, r8
 800d002:	464b      	mov	r3, r9
 800d004:	f7f3 faf8 	bl	80005f8 <__aeabi_dmul>
 800d008:	4602      	mov	r2, r0
 800d00a:	460b      	mov	r3, r1
 800d00c:	4630      	mov	r0, r6
 800d00e:	4639      	mov	r1, r7
 800d010:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800d014:	f7f3 f938 	bl	8000288 <__aeabi_dsub>
 800d018:	f805 6b01 	strb.w	r6, [r5], #1
 800d01c:	9e01      	ldr	r6, [sp, #4]
 800d01e:	9f03      	ldr	r7, [sp, #12]
 800d020:	1bae      	subs	r6, r5, r6
 800d022:	42b7      	cmp	r7, r6
 800d024:	4602      	mov	r2, r0
 800d026:	460b      	mov	r3, r1
 800d028:	d135      	bne.n	800d096 <_dtoa_r+0x6e6>
 800d02a:	f7f3 f92f 	bl	800028c <__adddf3>
 800d02e:	4642      	mov	r2, r8
 800d030:	464b      	mov	r3, r9
 800d032:	4606      	mov	r6, r0
 800d034:	460f      	mov	r7, r1
 800d036:	f7f3 fd6f 	bl	8000b18 <__aeabi_dcmpgt>
 800d03a:	b9d0      	cbnz	r0, 800d072 <_dtoa_r+0x6c2>
 800d03c:	4642      	mov	r2, r8
 800d03e:	464b      	mov	r3, r9
 800d040:	4630      	mov	r0, r6
 800d042:	4639      	mov	r1, r7
 800d044:	f7f3 fd40 	bl	8000ac8 <__aeabi_dcmpeq>
 800d048:	b110      	cbz	r0, 800d050 <_dtoa_r+0x6a0>
 800d04a:	f01a 0f01 	tst.w	sl, #1
 800d04e:	d110      	bne.n	800d072 <_dtoa_r+0x6c2>
 800d050:	4620      	mov	r0, r4
 800d052:	ee18 1a10 	vmov	r1, s16
 800d056:	f000 fe87 	bl	800dd68 <_Bfree>
 800d05a:	2300      	movs	r3, #0
 800d05c:	9800      	ldr	r0, [sp, #0]
 800d05e:	702b      	strb	r3, [r5, #0]
 800d060:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d062:	3001      	adds	r0, #1
 800d064:	6018      	str	r0, [r3, #0]
 800d066:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d068:	2b00      	cmp	r3, #0
 800d06a:	f43f acf1 	beq.w	800ca50 <_dtoa_r+0xa0>
 800d06e:	601d      	str	r5, [r3, #0]
 800d070:	e4ee      	b.n	800ca50 <_dtoa_r+0xa0>
 800d072:	9f00      	ldr	r7, [sp, #0]
 800d074:	462b      	mov	r3, r5
 800d076:	461d      	mov	r5, r3
 800d078:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d07c:	2a39      	cmp	r2, #57	; 0x39
 800d07e:	d106      	bne.n	800d08e <_dtoa_r+0x6de>
 800d080:	9a01      	ldr	r2, [sp, #4]
 800d082:	429a      	cmp	r2, r3
 800d084:	d1f7      	bne.n	800d076 <_dtoa_r+0x6c6>
 800d086:	9901      	ldr	r1, [sp, #4]
 800d088:	2230      	movs	r2, #48	; 0x30
 800d08a:	3701      	adds	r7, #1
 800d08c:	700a      	strb	r2, [r1, #0]
 800d08e:	781a      	ldrb	r2, [r3, #0]
 800d090:	3201      	adds	r2, #1
 800d092:	701a      	strb	r2, [r3, #0]
 800d094:	e790      	b.n	800cfb8 <_dtoa_r+0x608>
 800d096:	4ba6      	ldr	r3, [pc, #664]	; (800d330 <_dtoa_r+0x980>)
 800d098:	2200      	movs	r2, #0
 800d09a:	f7f3 faad 	bl	80005f8 <__aeabi_dmul>
 800d09e:	2200      	movs	r2, #0
 800d0a0:	2300      	movs	r3, #0
 800d0a2:	4606      	mov	r6, r0
 800d0a4:	460f      	mov	r7, r1
 800d0a6:	f7f3 fd0f 	bl	8000ac8 <__aeabi_dcmpeq>
 800d0aa:	2800      	cmp	r0, #0
 800d0ac:	d09d      	beq.n	800cfea <_dtoa_r+0x63a>
 800d0ae:	e7cf      	b.n	800d050 <_dtoa_r+0x6a0>
 800d0b0:	9a08      	ldr	r2, [sp, #32]
 800d0b2:	2a00      	cmp	r2, #0
 800d0b4:	f000 80d7 	beq.w	800d266 <_dtoa_r+0x8b6>
 800d0b8:	9a06      	ldr	r2, [sp, #24]
 800d0ba:	2a01      	cmp	r2, #1
 800d0bc:	f300 80ba 	bgt.w	800d234 <_dtoa_r+0x884>
 800d0c0:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d0c2:	2a00      	cmp	r2, #0
 800d0c4:	f000 80b2 	beq.w	800d22c <_dtoa_r+0x87c>
 800d0c8:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d0cc:	9e07      	ldr	r6, [sp, #28]
 800d0ce:	9d04      	ldr	r5, [sp, #16]
 800d0d0:	9a04      	ldr	r2, [sp, #16]
 800d0d2:	441a      	add	r2, r3
 800d0d4:	9204      	str	r2, [sp, #16]
 800d0d6:	9a05      	ldr	r2, [sp, #20]
 800d0d8:	2101      	movs	r1, #1
 800d0da:	441a      	add	r2, r3
 800d0dc:	4620      	mov	r0, r4
 800d0de:	9205      	str	r2, [sp, #20]
 800d0e0:	f000 ff44 	bl	800df6c <__i2b>
 800d0e4:	4607      	mov	r7, r0
 800d0e6:	2d00      	cmp	r5, #0
 800d0e8:	dd0c      	ble.n	800d104 <_dtoa_r+0x754>
 800d0ea:	9b05      	ldr	r3, [sp, #20]
 800d0ec:	2b00      	cmp	r3, #0
 800d0ee:	dd09      	ble.n	800d104 <_dtoa_r+0x754>
 800d0f0:	42ab      	cmp	r3, r5
 800d0f2:	9a04      	ldr	r2, [sp, #16]
 800d0f4:	bfa8      	it	ge
 800d0f6:	462b      	movge	r3, r5
 800d0f8:	1ad2      	subs	r2, r2, r3
 800d0fa:	9204      	str	r2, [sp, #16]
 800d0fc:	9a05      	ldr	r2, [sp, #20]
 800d0fe:	1aed      	subs	r5, r5, r3
 800d100:	1ad3      	subs	r3, r2, r3
 800d102:	9305      	str	r3, [sp, #20]
 800d104:	9b07      	ldr	r3, [sp, #28]
 800d106:	b31b      	cbz	r3, 800d150 <_dtoa_r+0x7a0>
 800d108:	9b08      	ldr	r3, [sp, #32]
 800d10a:	2b00      	cmp	r3, #0
 800d10c:	f000 80af 	beq.w	800d26e <_dtoa_r+0x8be>
 800d110:	2e00      	cmp	r6, #0
 800d112:	dd13      	ble.n	800d13c <_dtoa_r+0x78c>
 800d114:	4639      	mov	r1, r7
 800d116:	4632      	mov	r2, r6
 800d118:	4620      	mov	r0, r4
 800d11a:	f000 ffe7 	bl	800e0ec <__pow5mult>
 800d11e:	ee18 2a10 	vmov	r2, s16
 800d122:	4601      	mov	r1, r0
 800d124:	4607      	mov	r7, r0
 800d126:	4620      	mov	r0, r4
 800d128:	f000 ff36 	bl	800df98 <__multiply>
 800d12c:	ee18 1a10 	vmov	r1, s16
 800d130:	4680      	mov	r8, r0
 800d132:	4620      	mov	r0, r4
 800d134:	f000 fe18 	bl	800dd68 <_Bfree>
 800d138:	ee08 8a10 	vmov	s16, r8
 800d13c:	9b07      	ldr	r3, [sp, #28]
 800d13e:	1b9a      	subs	r2, r3, r6
 800d140:	d006      	beq.n	800d150 <_dtoa_r+0x7a0>
 800d142:	ee18 1a10 	vmov	r1, s16
 800d146:	4620      	mov	r0, r4
 800d148:	f000 ffd0 	bl	800e0ec <__pow5mult>
 800d14c:	ee08 0a10 	vmov	s16, r0
 800d150:	2101      	movs	r1, #1
 800d152:	4620      	mov	r0, r4
 800d154:	f000 ff0a 	bl	800df6c <__i2b>
 800d158:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d15a:	2b00      	cmp	r3, #0
 800d15c:	4606      	mov	r6, r0
 800d15e:	f340 8088 	ble.w	800d272 <_dtoa_r+0x8c2>
 800d162:	461a      	mov	r2, r3
 800d164:	4601      	mov	r1, r0
 800d166:	4620      	mov	r0, r4
 800d168:	f000 ffc0 	bl	800e0ec <__pow5mult>
 800d16c:	9b06      	ldr	r3, [sp, #24]
 800d16e:	2b01      	cmp	r3, #1
 800d170:	4606      	mov	r6, r0
 800d172:	f340 8081 	ble.w	800d278 <_dtoa_r+0x8c8>
 800d176:	f04f 0800 	mov.w	r8, #0
 800d17a:	6933      	ldr	r3, [r6, #16]
 800d17c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d180:	6918      	ldr	r0, [r3, #16]
 800d182:	f000 fea3 	bl	800decc <__hi0bits>
 800d186:	f1c0 0020 	rsb	r0, r0, #32
 800d18a:	9b05      	ldr	r3, [sp, #20]
 800d18c:	4418      	add	r0, r3
 800d18e:	f010 001f 	ands.w	r0, r0, #31
 800d192:	f000 8092 	beq.w	800d2ba <_dtoa_r+0x90a>
 800d196:	f1c0 0320 	rsb	r3, r0, #32
 800d19a:	2b04      	cmp	r3, #4
 800d19c:	f340 808a 	ble.w	800d2b4 <_dtoa_r+0x904>
 800d1a0:	f1c0 001c 	rsb	r0, r0, #28
 800d1a4:	9b04      	ldr	r3, [sp, #16]
 800d1a6:	4403      	add	r3, r0
 800d1a8:	9304      	str	r3, [sp, #16]
 800d1aa:	9b05      	ldr	r3, [sp, #20]
 800d1ac:	4403      	add	r3, r0
 800d1ae:	4405      	add	r5, r0
 800d1b0:	9305      	str	r3, [sp, #20]
 800d1b2:	9b04      	ldr	r3, [sp, #16]
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	dd07      	ble.n	800d1c8 <_dtoa_r+0x818>
 800d1b8:	ee18 1a10 	vmov	r1, s16
 800d1bc:	461a      	mov	r2, r3
 800d1be:	4620      	mov	r0, r4
 800d1c0:	f000 ffee 	bl	800e1a0 <__lshift>
 800d1c4:	ee08 0a10 	vmov	s16, r0
 800d1c8:	9b05      	ldr	r3, [sp, #20]
 800d1ca:	2b00      	cmp	r3, #0
 800d1cc:	dd05      	ble.n	800d1da <_dtoa_r+0x82a>
 800d1ce:	4631      	mov	r1, r6
 800d1d0:	461a      	mov	r2, r3
 800d1d2:	4620      	mov	r0, r4
 800d1d4:	f000 ffe4 	bl	800e1a0 <__lshift>
 800d1d8:	4606      	mov	r6, r0
 800d1da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1dc:	2b00      	cmp	r3, #0
 800d1de:	d06e      	beq.n	800d2be <_dtoa_r+0x90e>
 800d1e0:	ee18 0a10 	vmov	r0, s16
 800d1e4:	4631      	mov	r1, r6
 800d1e6:	f001 f84b 	bl	800e280 <__mcmp>
 800d1ea:	2800      	cmp	r0, #0
 800d1ec:	da67      	bge.n	800d2be <_dtoa_r+0x90e>
 800d1ee:	9b00      	ldr	r3, [sp, #0]
 800d1f0:	3b01      	subs	r3, #1
 800d1f2:	ee18 1a10 	vmov	r1, s16
 800d1f6:	9300      	str	r3, [sp, #0]
 800d1f8:	220a      	movs	r2, #10
 800d1fa:	2300      	movs	r3, #0
 800d1fc:	4620      	mov	r0, r4
 800d1fe:	f000 fdd5 	bl	800ddac <__multadd>
 800d202:	9b08      	ldr	r3, [sp, #32]
 800d204:	ee08 0a10 	vmov	s16, r0
 800d208:	2b00      	cmp	r3, #0
 800d20a:	f000 81b1 	beq.w	800d570 <_dtoa_r+0xbc0>
 800d20e:	2300      	movs	r3, #0
 800d210:	4639      	mov	r1, r7
 800d212:	220a      	movs	r2, #10
 800d214:	4620      	mov	r0, r4
 800d216:	f000 fdc9 	bl	800ddac <__multadd>
 800d21a:	9b02      	ldr	r3, [sp, #8]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	4607      	mov	r7, r0
 800d220:	f300 808e 	bgt.w	800d340 <_dtoa_r+0x990>
 800d224:	9b06      	ldr	r3, [sp, #24]
 800d226:	2b02      	cmp	r3, #2
 800d228:	dc51      	bgt.n	800d2ce <_dtoa_r+0x91e>
 800d22a:	e089      	b.n	800d340 <_dtoa_r+0x990>
 800d22c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d22e:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d232:	e74b      	b.n	800d0cc <_dtoa_r+0x71c>
 800d234:	9b03      	ldr	r3, [sp, #12]
 800d236:	1e5e      	subs	r6, r3, #1
 800d238:	9b07      	ldr	r3, [sp, #28]
 800d23a:	42b3      	cmp	r3, r6
 800d23c:	bfbf      	itttt	lt
 800d23e:	9b07      	ldrlt	r3, [sp, #28]
 800d240:	9607      	strlt	r6, [sp, #28]
 800d242:	1af2      	sublt	r2, r6, r3
 800d244:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d246:	bfb6      	itet	lt
 800d248:	189b      	addlt	r3, r3, r2
 800d24a:	1b9e      	subge	r6, r3, r6
 800d24c:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d24e:	9b03      	ldr	r3, [sp, #12]
 800d250:	bfb8      	it	lt
 800d252:	2600      	movlt	r6, #0
 800d254:	2b00      	cmp	r3, #0
 800d256:	bfb7      	itett	lt
 800d258:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d25c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d260:	1a9d      	sublt	r5, r3, r2
 800d262:	2300      	movlt	r3, #0
 800d264:	e734      	b.n	800d0d0 <_dtoa_r+0x720>
 800d266:	9e07      	ldr	r6, [sp, #28]
 800d268:	9d04      	ldr	r5, [sp, #16]
 800d26a:	9f08      	ldr	r7, [sp, #32]
 800d26c:	e73b      	b.n	800d0e6 <_dtoa_r+0x736>
 800d26e:	9a07      	ldr	r2, [sp, #28]
 800d270:	e767      	b.n	800d142 <_dtoa_r+0x792>
 800d272:	9b06      	ldr	r3, [sp, #24]
 800d274:	2b01      	cmp	r3, #1
 800d276:	dc18      	bgt.n	800d2aa <_dtoa_r+0x8fa>
 800d278:	f1ba 0f00 	cmp.w	sl, #0
 800d27c:	d115      	bne.n	800d2aa <_dtoa_r+0x8fa>
 800d27e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d282:	b993      	cbnz	r3, 800d2aa <_dtoa_r+0x8fa>
 800d284:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d288:	0d1b      	lsrs	r3, r3, #20
 800d28a:	051b      	lsls	r3, r3, #20
 800d28c:	b183      	cbz	r3, 800d2b0 <_dtoa_r+0x900>
 800d28e:	9b04      	ldr	r3, [sp, #16]
 800d290:	3301      	adds	r3, #1
 800d292:	9304      	str	r3, [sp, #16]
 800d294:	9b05      	ldr	r3, [sp, #20]
 800d296:	3301      	adds	r3, #1
 800d298:	9305      	str	r3, [sp, #20]
 800d29a:	f04f 0801 	mov.w	r8, #1
 800d29e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d2a0:	2b00      	cmp	r3, #0
 800d2a2:	f47f af6a 	bne.w	800d17a <_dtoa_r+0x7ca>
 800d2a6:	2001      	movs	r0, #1
 800d2a8:	e76f      	b.n	800d18a <_dtoa_r+0x7da>
 800d2aa:	f04f 0800 	mov.w	r8, #0
 800d2ae:	e7f6      	b.n	800d29e <_dtoa_r+0x8ee>
 800d2b0:	4698      	mov	r8, r3
 800d2b2:	e7f4      	b.n	800d29e <_dtoa_r+0x8ee>
 800d2b4:	f43f af7d 	beq.w	800d1b2 <_dtoa_r+0x802>
 800d2b8:	4618      	mov	r0, r3
 800d2ba:	301c      	adds	r0, #28
 800d2bc:	e772      	b.n	800d1a4 <_dtoa_r+0x7f4>
 800d2be:	9b03      	ldr	r3, [sp, #12]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	dc37      	bgt.n	800d334 <_dtoa_r+0x984>
 800d2c4:	9b06      	ldr	r3, [sp, #24]
 800d2c6:	2b02      	cmp	r3, #2
 800d2c8:	dd34      	ble.n	800d334 <_dtoa_r+0x984>
 800d2ca:	9b03      	ldr	r3, [sp, #12]
 800d2cc:	9302      	str	r3, [sp, #8]
 800d2ce:	9b02      	ldr	r3, [sp, #8]
 800d2d0:	b96b      	cbnz	r3, 800d2ee <_dtoa_r+0x93e>
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	2205      	movs	r2, #5
 800d2d6:	4620      	mov	r0, r4
 800d2d8:	f000 fd68 	bl	800ddac <__multadd>
 800d2dc:	4601      	mov	r1, r0
 800d2de:	4606      	mov	r6, r0
 800d2e0:	ee18 0a10 	vmov	r0, s16
 800d2e4:	f000 ffcc 	bl	800e280 <__mcmp>
 800d2e8:	2800      	cmp	r0, #0
 800d2ea:	f73f adbb 	bgt.w	800ce64 <_dtoa_r+0x4b4>
 800d2ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2f0:	9d01      	ldr	r5, [sp, #4]
 800d2f2:	43db      	mvns	r3, r3
 800d2f4:	9300      	str	r3, [sp, #0]
 800d2f6:	f04f 0800 	mov.w	r8, #0
 800d2fa:	4631      	mov	r1, r6
 800d2fc:	4620      	mov	r0, r4
 800d2fe:	f000 fd33 	bl	800dd68 <_Bfree>
 800d302:	2f00      	cmp	r7, #0
 800d304:	f43f aea4 	beq.w	800d050 <_dtoa_r+0x6a0>
 800d308:	f1b8 0f00 	cmp.w	r8, #0
 800d30c:	d005      	beq.n	800d31a <_dtoa_r+0x96a>
 800d30e:	45b8      	cmp	r8, r7
 800d310:	d003      	beq.n	800d31a <_dtoa_r+0x96a>
 800d312:	4641      	mov	r1, r8
 800d314:	4620      	mov	r0, r4
 800d316:	f000 fd27 	bl	800dd68 <_Bfree>
 800d31a:	4639      	mov	r1, r7
 800d31c:	4620      	mov	r0, r4
 800d31e:	f000 fd23 	bl	800dd68 <_Bfree>
 800d322:	e695      	b.n	800d050 <_dtoa_r+0x6a0>
 800d324:	2600      	movs	r6, #0
 800d326:	4637      	mov	r7, r6
 800d328:	e7e1      	b.n	800d2ee <_dtoa_r+0x93e>
 800d32a:	9700      	str	r7, [sp, #0]
 800d32c:	4637      	mov	r7, r6
 800d32e:	e599      	b.n	800ce64 <_dtoa_r+0x4b4>
 800d330:	40240000 	.word	0x40240000
 800d334:	9b08      	ldr	r3, [sp, #32]
 800d336:	2b00      	cmp	r3, #0
 800d338:	f000 80ca 	beq.w	800d4d0 <_dtoa_r+0xb20>
 800d33c:	9b03      	ldr	r3, [sp, #12]
 800d33e:	9302      	str	r3, [sp, #8]
 800d340:	2d00      	cmp	r5, #0
 800d342:	dd05      	ble.n	800d350 <_dtoa_r+0x9a0>
 800d344:	4639      	mov	r1, r7
 800d346:	462a      	mov	r2, r5
 800d348:	4620      	mov	r0, r4
 800d34a:	f000 ff29 	bl	800e1a0 <__lshift>
 800d34e:	4607      	mov	r7, r0
 800d350:	f1b8 0f00 	cmp.w	r8, #0
 800d354:	d05b      	beq.n	800d40e <_dtoa_r+0xa5e>
 800d356:	6879      	ldr	r1, [r7, #4]
 800d358:	4620      	mov	r0, r4
 800d35a:	f000 fcc5 	bl	800dce8 <_Balloc>
 800d35e:	4605      	mov	r5, r0
 800d360:	b928      	cbnz	r0, 800d36e <_dtoa_r+0x9be>
 800d362:	4b87      	ldr	r3, [pc, #540]	; (800d580 <_dtoa_r+0xbd0>)
 800d364:	4602      	mov	r2, r0
 800d366:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d36a:	f7ff bb3b 	b.w	800c9e4 <_dtoa_r+0x34>
 800d36e:	693a      	ldr	r2, [r7, #16]
 800d370:	3202      	adds	r2, #2
 800d372:	0092      	lsls	r2, r2, #2
 800d374:	f107 010c 	add.w	r1, r7, #12
 800d378:	300c      	adds	r0, #12
 800d37a:	f000 fca7 	bl	800dccc <memcpy>
 800d37e:	2201      	movs	r2, #1
 800d380:	4629      	mov	r1, r5
 800d382:	4620      	mov	r0, r4
 800d384:	f000 ff0c 	bl	800e1a0 <__lshift>
 800d388:	9b01      	ldr	r3, [sp, #4]
 800d38a:	f103 0901 	add.w	r9, r3, #1
 800d38e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d392:	4413      	add	r3, r2
 800d394:	9305      	str	r3, [sp, #20]
 800d396:	f00a 0301 	and.w	r3, sl, #1
 800d39a:	46b8      	mov	r8, r7
 800d39c:	9304      	str	r3, [sp, #16]
 800d39e:	4607      	mov	r7, r0
 800d3a0:	4631      	mov	r1, r6
 800d3a2:	ee18 0a10 	vmov	r0, s16
 800d3a6:	f7ff fa75 	bl	800c894 <quorem>
 800d3aa:	4641      	mov	r1, r8
 800d3ac:	9002      	str	r0, [sp, #8]
 800d3ae:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d3b2:	ee18 0a10 	vmov	r0, s16
 800d3b6:	f000 ff63 	bl	800e280 <__mcmp>
 800d3ba:	463a      	mov	r2, r7
 800d3bc:	9003      	str	r0, [sp, #12]
 800d3be:	4631      	mov	r1, r6
 800d3c0:	4620      	mov	r0, r4
 800d3c2:	f000 ff79 	bl	800e2b8 <__mdiff>
 800d3c6:	68c2      	ldr	r2, [r0, #12]
 800d3c8:	f109 3bff 	add.w	fp, r9, #4294967295
 800d3cc:	4605      	mov	r5, r0
 800d3ce:	bb02      	cbnz	r2, 800d412 <_dtoa_r+0xa62>
 800d3d0:	4601      	mov	r1, r0
 800d3d2:	ee18 0a10 	vmov	r0, s16
 800d3d6:	f000 ff53 	bl	800e280 <__mcmp>
 800d3da:	4602      	mov	r2, r0
 800d3dc:	4629      	mov	r1, r5
 800d3de:	4620      	mov	r0, r4
 800d3e0:	9207      	str	r2, [sp, #28]
 800d3e2:	f000 fcc1 	bl	800dd68 <_Bfree>
 800d3e6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d3ea:	ea43 0102 	orr.w	r1, r3, r2
 800d3ee:	9b04      	ldr	r3, [sp, #16]
 800d3f0:	430b      	orrs	r3, r1
 800d3f2:	464d      	mov	r5, r9
 800d3f4:	d10f      	bne.n	800d416 <_dtoa_r+0xa66>
 800d3f6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d3fa:	d02a      	beq.n	800d452 <_dtoa_r+0xaa2>
 800d3fc:	9b03      	ldr	r3, [sp, #12]
 800d3fe:	2b00      	cmp	r3, #0
 800d400:	dd02      	ble.n	800d408 <_dtoa_r+0xa58>
 800d402:	9b02      	ldr	r3, [sp, #8]
 800d404:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d408:	f88b a000 	strb.w	sl, [fp]
 800d40c:	e775      	b.n	800d2fa <_dtoa_r+0x94a>
 800d40e:	4638      	mov	r0, r7
 800d410:	e7ba      	b.n	800d388 <_dtoa_r+0x9d8>
 800d412:	2201      	movs	r2, #1
 800d414:	e7e2      	b.n	800d3dc <_dtoa_r+0xa2c>
 800d416:	9b03      	ldr	r3, [sp, #12]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	db04      	blt.n	800d426 <_dtoa_r+0xa76>
 800d41c:	9906      	ldr	r1, [sp, #24]
 800d41e:	430b      	orrs	r3, r1
 800d420:	9904      	ldr	r1, [sp, #16]
 800d422:	430b      	orrs	r3, r1
 800d424:	d122      	bne.n	800d46c <_dtoa_r+0xabc>
 800d426:	2a00      	cmp	r2, #0
 800d428:	ddee      	ble.n	800d408 <_dtoa_r+0xa58>
 800d42a:	ee18 1a10 	vmov	r1, s16
 800d42e:	2201      	movs	r2, #1
 800d430:	4620      	mov	r0, r4
 800d432:	f000 feb5 	bl	800e1a0 <__lshift>
 800d436:	4631      	mov	r1, r6
 800d438:	ee08 0a10 	vmov	s16, r0
 800d43c:	f000 ff20 	bl	800e280 <__mcmp>
 800d440:	2800      	cmp	r0, #0
 800d442:	dc03      	bgt.n	800d44c <_dtoa_r+0xa9c>
 800d444:	d1e0      	bne.n	800d408 <_dtoa_r+0xa58>
 800d446:	f01a 0f01 	tst.w	sl, #1
 800d44a:	d0dd      	beq.n	800d408 <_dtoa_r+0xa58>
 800d44c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d450:	d1d7      	bne.n	800d402 <_dtoa_r+0xa52>
 800d452:	2339      	movs	r3, #57	; 0x39
 800d454:	f88b 3000 	strb.w	r3, [fp]
 800d458:	462b      	mov	r3, r5
 800d45a:	461d      	mov	r5, r3
 800d45c:	3b01      	subs	r3, #1
 800d45e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d462:	2a39      	cmp	r2, #57	; 0x39
 800d464:	d071      	beq.n	800d54a <_dtoa_r+0xb9a>
 800d466:	3201      	adds	r2, #1
 800d468:	701a      	strb	r2, [r3, #0]
 800d46a:	e746      	b.n	800d2fa <_dtoa_r+0x94a>
 800d46c:	2a00      	cmp	r2, #0
 800d46e:	dd07      	ble.n	800d480 <_dtoa_r+0xad0>
 800d470:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d474:	d0ed      	beq.n	800d452 <_dtoa_r+0xaa2>
 800d476:	f10a 0301 	add.w	r3, sl, #1
 800d47a:	f88b 3000 	strb.w	r3, [fp]
 800d47e:	e73c      	b.n	800d2fa <_dtoa_r+0x94a>
 800d480:	9b05      	ldr	r3, [sp, #20]
 800d482:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d486:	4599      	cmp	r9, r3
 800d488:	d047      	beq.n	800d51a <_dtoa_r+0xb6a>
 800d48a:	ee18 1a10 	vmov	r1, s16
 800d48e:	2300      	movs	r3, #0
 800d490:	220a      	movs	r2, #10
 800d492:	4620      	mov	r0, r4
 800d494:	f000 fc8a 	bl	800ddac <__multadd>
 800d498:	45b8      	cmp	r8, r7
 800d49a:	ee08 0a10 	vmov	s16, r0
 800d49e:	f04f 0300 	mov.w	r3, #0
 800d4a2:	f04f 020a 	mov.w	r2, #10
 800d4a6:	4641      	mov	r1, r8
 800d4a8:	4620      	mov	r0, r4
 800d4aa:	d106      	bne.n	800d4ba <_dtoa_r+0xb0a>
 800d4ac:	f000 fc7e 	bl	800ddac <__multadd>
 800d4b0:	4680      	mov	r8, r0
 800d4b2:	4607      	mov	r7, r0
 800d4b4:	f109 0901 	add.w	r9, r9, #1
 800d4b8:	e772      	b.n	800d3a0 <_dtoa_r+0x9f0>
 800d4ba:	f000 fc77 	bl	800ddac <__multadd>
 800d4be:	4639      	mov	r1, r7
 800d4c0:	4680      	mov	r8, r0
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	220a      	movs	r2, #10
 800d4c6:	4620      	mov	r0, r4
 800d4c8:	f000 fc70 	bl	800ddac <__multadd>
 800d4cc:	4607      	mov	r7, r0
 800d4ce:	e7f1      	b.n	800d4b4 <_dtoa_r+0xb04>
 800d4d0:	9b03      	ldr	r3, [sp, #12]
 800d4d2:	9302      	str	r3, [sp, #8]
 800d4d4:	9d01      	ldr	r5, [sp, #4]
 800d4d6:	ee18 0a10 	vmov	r0, s16
 800d4da:	4631      	mov	r1, r6
 800d4dc:	f7ff f9da 	bl	800c894 <quorem>
 800d4e0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d4e4:	9b01      	ldr	r3, [sp, #4]
 800d4e6:	f805 ab01 	strb.w	sl, [r5], #1
 800d4ea:	1aea      	subs	r2, r5, r3
 800d4ec:	9b02      	ldr	r3, [sp, #8]
 800d4ee:	4293      	cmp	r3, r2
 800d4f0:	dd09      	ble.n	800d506 <_dtoa_r+0xb56>
 800d4f2:	ee18 1a10 	vmov	r1, s16
 800d4f6:	2300      	movs	r3, #0
 800d4f8:	220a      	movs	r2, #10
 800d4fa:	4620      	mov	r0, r4
 800d4fc:	f000 fc56 	bl	800ddac <__multadd>
 800d500:	ee08 0a10 	vmov	s16, r0
 800d504:	e7e7      	b.n	800d4d6 <_dtoa_r+0xb26>
 800d506:	9b02      	ldr	r3, [sp, #8]
 800d508:	2b00      	cmp	r3, #0
 800d50a:	bfc8      	it	gt
 800d50c:	461d      	movgt	r5, r3
 800d50e:	9b01      	ldr	r3, [sp, #4]
 800d510:	bfd8      	it	le
 800d512:	2501      	movle	r5, #1
 800d514:	441d      	add	r5, r3
 800d516:	f04f 0800 	mov.w	r8, #0
 800d51a:	ee18 1a10 	vmov	r1, s16
 800d51e:	2201      	movs	r2, #1
 800d520:	4620      	mov	r0, r4
 800d522:	f000 fe3d 	bl	800e1a0 <__lshift>
 800d526:	4631      	mov	r1, r6
 800d528:	ee08 0a10 	vmov	s16, r0
 800d52c:	f000 fea8 	bl	800e280 <__mcmp>
 800d530:	2800      	cmp	r0, #0
 800d532:	dc91      	bgt.n	800d458 <_dtoa_r+0xaa8>
 800d534:	d102      	bne.n	800d53c <_dtoa_r+0xb8c>
 800d536:	f01a 0f01 	tst.w	sl, #1
 800d53a:	d18d      	bne.n	800d458 <_dtoa_r+0xaa8>
 800d53c:	462b      	mov	r3, r5
 800d53e:	461d      	mov	r5, r3
 800d540:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d544:	2a30      	cmp	r2, #48	; 0x30
 800d546:	d0fa      	beq.n	800d53e <_dtoa_r+0xb8e>
 800d548:	e6d7      	b.n	800d2fa <_dtoa_r+0x94a>
 800d54a:	9a01      	ldr	r2, [sp, #4]
 800d54c:	429a      	cmp	r2, r3
 800d54e:	d184      	bne.n	800d45a <_dtoa_r+0xaaa>
 800d550:	9b00      	ldr	r3, [sp, #0]
 800d552:	3301      	adds	r3, #1
 800d554:	9300      	str	r3, [sp, #0]
 800d556:	2331      	movs	r3, #49	; 0x31
 800d558:	7013      	strb	r3, [r2, #0]
 800d55a:	e6ce      	b.n	800d2fa <_dtoa_r+0x94a>
 800d55c:	4b09      	ldr	r3, [pc, #36]	; (800d584 <_dtoa_r+0xbd4>)
 800d55e:	f7ff ba95 	b.w	800ca8c <_dtoa_r+0xdc>
 800d562:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d564:	2b00      	cmp	r3, #0
 800d566:	f47f aa6e 	bne.w	800ca46 <_dtoa_r+0x96>
 800d56a:	4b07      	ldr	r3, [pc, #28]	; (800d588 <_dtoa_r+0xbd8>)
 800d56c:	f7ff ba8e 	b.w	800ca8c <_dtoa_r+0xdc>
 800d570:	9b02      	ldr	r3, [sp, #8]
 800d572:	2b00      	cmp	r3, #0
 800d574:	dcae      	bgt.n	800d4d4 <_dtoa_r+0xb24>
 800d576:	9b06      	ldr	r3, [sp, #24]
 800d578:	2b02      	cmp	r3, #2
 800d57a:	f73f aea8 	bgt.w	800d2ce <_dtoa_r+0x91e>
 800d57e:	e7a9      	b.n	800d4d4 <_dtoa_r+0xb24>
 800d580:	0800fbc1 	.word	0x0800fbc1
 800d584:	0800f92c 	.word	0x0800f92c
 800d588:	0800fb59 	.word	0x0800fb59

0800d58c <fiprintf>:
 800d58c:	b40e      	push	{r1, r2, r3}
 800d58e:	b503      	push	{r0, r1, lr}
 800d590:	4601      	mov	r1, r0
 800d592:	ab03      	add	r3, sp, #12
 800d594:	4805      	ldr	r0, [pc, #20]	; (800d5ac <fiprintf+0x20>)
 800d596:	f853 2b04 	ldr.w	r2, [r3], #4
 800d59a:	6800      	ldr	r0, [r0, #0]
 800d59c:	9301      	str	r3, [sp, #4]
 800d59e:	f001 fae1 	bl	800eb64 <_vfiprintf_r>
 800d5a2:	b002      	add	sp, #8
 800d5a4:	f85d eb04 	ldr.w	lr, [sp], #4
 800d5a8:	b003      	add	sp, #12
 800d5aa:	4770      	bx	lr
 800d5ac:	20000020 	.word	0x20000020

0800d5b0 <rshift>:
 800d5b0:	6903      	ldr	r3, [r0, #16]
 800d5b2:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d5b6:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d5ba:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d5be:	f100 0414 	add.w	r4, r0, #20
 800d5c2:	dd45      	ble.n	800d650 <rshift+0xa0>
 800d5c4:	f011 011f 	ands.w	r1, r1, #31
 800d5c8:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d5cc:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d5d0:	d10c      	bne.n	800d5ec <rshift+0x3c>
 800d5d2:	f100 0710 	add.w	r7, r0, #16
 800d5d6:	4629      	mov	r1, r5
 800d5d8:	42b1      	cmp	r1, r6
 800d5da:	d334      	bcc.n	800d646 <rshift+0x96>
 800d5dc:	1a9b      	subs	r3, r3, r2
 800d5de:	009b      	lsls	r3, r3, #2
 800d5e0:	1eea      	subs	r2, r5, #3
 800d5e2:	4296      	cmp	r6, r2
 800d5e4:	bf38      	it	cc
 800d5e6:	2300      	movcc	r3, #0
 800d5e8:	4423      	add	r3, r4
 800d5ea:	e015      	b.n	800d618 <rshift+0x68>
 800d5ec:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d5f0:	f1c1 0820 	rsb	r8, r1, #32
 800d5f4:	40cf      	lsrs	r7, r1
 800d5f6:	f105 0e04 	add.w	lr, r5, #4
 800d5fa:	46a1      	mov	r9, r4
 800d5fc:	4576      	cmp	r6, lr
 800d5fe:	46f4      	mov	ip, lr
 800d600:	d815      	bhi.n	800d62e <rshift+0x7e>
 800d602:	1a9a      	subs	r2, r3, r2
 800d604:	0092      	lsls	r2, r2, #2
 800d606:	3a04      	subs	r2, #4
 800d608:	3501      	adds	r5, #1
 800d60a:	42ae      	cmp	r6, r5
 800d60c:	bf38      	it	cc
 800d60e:	2200      	movcc	r2, #0
 800d610:	18a3      	adds	r3, r4, r2
 800d612:	50a7      	str	r7, [r4, r2]
 800d614:	b107      	cbz	r7, 800d618 <rshift+0x68>
 800d616:	3304      	adds	r3, #4
 800d618:	1b1a      	subs	r2, r3, r4
 800d61a:	42a3      	cmp	r3, r4
 800d61c:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d620:	bf08      	it	eq
 800d622:	2300      	moveq	r3, #0
 800d624:	6102      	str	r2, [r0, #16]
 800d626:	bf08      	it	eq
 800d628:	6143      	streq	r3, [r0, #20]
 800d62a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d62e:	f8dc c000 	ldr.w	ip, [ip]
 800d632:	fa0c fc08 	lsl.w	ip, ip, r8
 800d636:	ea4c 0707 	orr.w	r7, ip, r7
 800d63a:	f849 7b04 	str.w	r7, [r9], #4
 800d63e:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d642:	40cf      	lsrs	r7, r1
 800d644:	e7da      	b.n	800d5fc <rshift+0x4c>
 800d646:	f851 cb04 	ldr.w	ip, [r1], #4
 800d64a:	f847 cf04 	str.w	ip, [r7, #4]!
 800d64e:	e7c3      	b.n	800d5d8 <rshift+0x28>
 800d650:	4623      	mov	r3, r4
 800d652:	e7e1      	b.n	800d618 <rshift+0x68>

0800d654 <__hexdig_fun>:
 800d654:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d658:	2b09      	cmp	r3, #9
 800d65a:	d802      	bhi.n	800d662 <__hexdig_fun+0xe>
 800d65c:	3820      	subs	r0, #32
 800d65e:	b2c0      	uxtb	r0, r0
 800d660:	4770      	bx	lr
 800d662:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d666:	2b05      	cmp	r3, #5
 800d668:	d801      	bhi.n	800d66e <__hexdig_fun+0x1a>
 800d66a:	3847      	subs	r0, #71	; 0x47
 800d66c:	e7f7      	b.n	800d65e <__hexdig_fun+0xa>
 800d66e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d672:	2b05      	cmp	r3, #5
 800d674:	d801      	bhi.n	800d67a <__hexdig_fun+0x26>
 800d676:	3827      	subs	r0, #39	; 0x27
 800d678:	e7f1      	b.n	800d65e <__hexdig_fun+0xa>
 800d67a:	2000      	movs	r0, #0
 800d67c:	4770      	bx	lr
	...

0800d680 <__gethex>:
 800d680:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d684:	ed2d 8b02 	vpush	{d8}
 800d688:	b089      	sub	sp, #36	; 0x24
 800d68a:	ee08 0a10 	vmov	s16, r0
 800d68e:	9304      	str	r3, [sp, #16]
 800d690:	4bb4      	ldr	r3, [pc, #720]	; (800d964 <__gethex+0x2e4>)
 800d692:	681b      	ldr	r3, [r3, #0]
 800d694:	9301      	str	r3, [sp, #4]
 800d696:	4618      	mov	r0, r3
 800d698:	468b      	mov	fp, r1
 800d69a:	4690      	mov	r8, r2
 800d69c:	f7f2 fd98 	bl	80001d0 <strlen>
 800d6a0:	9b01      	ldr	r3, [sp, #4]
 800d6a2:	f8db 2000 	ldr.w	r2, [fp]
 800d6a6:	4403      	add	r3, r0
 800d6a8:	4682      	mov	sl, r0
 800d6aa:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d6ae:	9305      	str	r3, [sp, #20]
 800d6b0:	1c93      	adds	r3, r2, #2
 800d6b2:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d6b6:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d6ba:	32fe      	adds	r2, #254	; 0xfe
 800d6bc:	18d1      	adds	r1, r2, r3
 800d6be:	461f      	mov	r7, r3
 800d6c0:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d6c4:	9100      	str	r1, [sp, #0]
 800d6c6:	2830      	cmp	r0, #48	; 0x30
 800d6c8:	d0f8      	beq.n	800d6bc <__gethex+0x3c>
 800d6ca:	f7ff ffc3 	bl	800d654 <__hexdig_fun>
 800d6ce:	4604      	mov	r4, r0
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	d13a      	bne.n	800d74a <__gethex+0xca>
 800d6d4:	9901      	ldr	r1, [sp, #4]
 800d6d6:	4652      	mov	r2, sl
 800d6d8:	4638      	mov	r0, r7
 800d6da:	f001 fb8d 	bl	800edf8 <strncmp>
 800d6de:	4605      	mov	r5, r0
 800d6e0:	2800      	cmp	r0, #0
 800d6e2:	d168      	bne.n	800d7b6 <__gethex+0x136>
 800d6e4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d6e8:	eb07 060a 	add.w	r6, r7, sl
 800d6ec:	f7ff ffb2 	bl	800d654 <__hexdig_fun>
 800d6f0:	2800      	cmp	r0, #0
 800d6f2:	d062      	beq.n	800d7ba <__gethex+0x13a>
 800d6f4:	4633      	mov	r3, r6
 800d6f6:	7818      	ldrb	r0, [r3, #0]
 800d6f8:	2830      	cmp	r0, #48	; 0x30
 800d6fa:	461f      	mov	r7, r3
 800d6fc:	f103 0301 	add.w	r3, r3, #1
 800d700:	d0f9      	beq.n	800d6f6 <__gethex+0x76>
 800d702:	f7ff ffa7 	bl	800d654 <__hexdig_fun>
 800d706:	2301      	movs	r3, #1
 800d708:	fab0 f480 	clz	r4, r0
 800d70c:	0964      	lsrs	r4, r4, #5
 800d70e:	4635      	mov	r5, r6
 800d710:	9300      	str	r3, [sp, #0]
 800d712:	463a      	mov	r2, r7
 800d714:	4616      	mov	r6, r2
 800d716:	3201      	adds	r2, #1
 800d718:	7830      	ldrb	r0, [r6, #0]
 800d71a:	f7ff ff9b 	bl	800d654 <__hexdig_fun>
 800d71e:	2800      	cmp	r0, #0
 800d720:	d1f8      	bne.n	800d714 <__gethex+0x94>
 800d722:	9901      	ldr	r1, [sp, #4]
 800d724:	4652      	mov	r2, sl
 800d726:	4630      	mov	r0, r6
 800d728:	f001 fb66 	bl	800edf8 <strncmp>
 800d72c:	b980      	cbnz	r0, 800d750 <__gethex+0xd0>
 800d72e:	b94d      	cbnz	r5, 800d744 <__gethex+0xc4>
 800d730:	eb06 050a 	add.w	r5, r6, sl
 800d734:	462a      	mov	r2, r5
 800d736:	4616      	mov	r6, r2
 800d738:	3201      	adds	r2, #1
 800d73a:	7830      	ldrb	r0, [r6, #0]
 800d73c:	f7ff ff8a 	bl	800d654 <__hexdig_fun>
 800d740:	2800      	cmp	r0, #0
 800d742:	d1f8      	bne.n	800d736 <__gethex+0xb6>
 800d744:	1bad      	subs	r5, r5, r6
 800d746:	00ad      	lsls	r5, r5, #2
 800d748:	e004      	b.n	800d754 <__gethex+0xd4>
 800d74a:	2400      	movs	r4, #0
 800d74c:	4625      	mov	r5, r4
 800d74e:	e7e0      	b.n	800d712 <__gethex+0x92>
 800d750:	2d00      	cmp	r5, #0
 800d752:	d1f7      	bne.n	800d744 <__gethex+0xc4>
 800d754:	7833      	ldrb	r3, [r6, #0]
 800d756:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d75a:	2b50      	cmp	r3, #80	; 0x50
 800d75c:	d13b      	bne.n	800d7d6 <__gethex+0x156>
 800d75e:	7873      	ldrb	r3, [r6, #1]
 800d760:	2b2b      	cmp	r3, #43	; 0x2b
 800d762:	d02c      	beq.n	800d7be <__gethex+0x13e>
 800d764:	2b2d      	cmp	r3, #45	; 0x2d
 800d766:	d02e      	beq.n	800d7c6 <__gethex+0x146>
 800d768:	1c71      	adds	r1, r6, #1
 800d76a:	f04f 0900 	mov.w	r9, #0
 800d76e:	7808      	ldrb	r0, [r1, #0]
 800d770:	f7ff ff70 	bl	800d654 <__hexdig_fun>
 800d774:	1e43      	subs	r3, r0, #1
 800d776:	b2db      	uxtb	r3, r3
 800d778:	2b18      	cmp	r3, #24
 800d77a:	d82c      	bhi.n	800d7d6 <__gethex+0x156>
 800d77c:	f1a0 0210 	sub.w	r2, r0, #16
 800d780:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d784:	f7ff ff66 	bl	800d654 <__hexdig_fun>
 800d788:	1e43      	subs	r3, r0, #1
 800d78a:	b2db      	uxtb	r3, r3
 800d78c:	2b18      	cmp	r3, #24
 800d78e:	d91d      	bls.n	800d7cc <__gethex+0x14c>
 800d790:	f1b9 0f00 	cmp.w	r9, #0
 800d794:	d000      	beq.n	800d798 <__gethex+0x118>
 800d796:	4252      	negs	r2, r2
 800d798:	4415      	add	r5, r2
 800d79a:	f8cb 1000 	str.w	r1, [fp]
 800d79e:	b1e4      	cbz	r4, 800d7da <__gethex+0x15a>
 800d7a0:	9b00      	ldr	r3, [sp, #0]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	bf14      	ite	ne
 800d7a6:	2700      	movne	r7, #0
 800d7a8:	2706      	moveq	r7, #6
 800d7aa:	4638      	mov	r0, r7
 800d7ac:	b009      	add	sp, #36	; 0x24
 800d7ae:	ecbd 8b02 	vpop	{d8}
 800d7b2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d7b6:	463e      	mov	r6, r7
 800d7b8:	4625      	mov	r5, r4
 800d7ba:	2401      	movs	r4, #1
 800d7bc:	e7ca      	b.n	800d754 <__gethex+0xd4>
 800d7be:	f04f 0900 	mov.w	r9, #0
 800d7c2:	1cb1      	adds	r1, r6, #2
 800d7c4:	e7d3      	b.n	800d76e <__gethex+0xee>
 800d7c6:	f04f 0901 	mov.w	r9, #1
 800d7ca:	e7fa      	b.n	800d7c2 <__gethex+0x142>
 800d7cc:	230a      	movs	r3, #10
 800d7ce:	fb03 0202 	mla	r2, r3, r2, r0
 800d7d2:	3a10      	subs	r2, #16
 800d7d4:	e7d4      	b.n	800d780 <__gethex+0x100>
 800d7d6:	4631      	mov	r1, r6
 800d7d8:	e7df      	b.n	800d79a <__gethex+0x11a>
 800d7da:	1bf3      	subs	r3, r6, r7
 800d7dc:	3b01      	subs	r3, #1
 800d7de:	4621      	mov	r1, r4
 800d7e0:	2b07      	cmp	r3, #7
 800d7e2:	dc0b      	bgt.n	800d7fc <__gethex+0x17c>
 800d7e4:	ee18 0a10 	vmov	r0, s16
 800d7e8:	f000 fa7e 	bl	800dce8 <_Balloc>
 800d7ec:	4604      	mov	r4, r0
 800d7ee:	b940      	cbnz	r0, 800d802 <__gethex+0x182>
 800d7f0:	4b5d      	ldr	r3, [pc, #372]	; (800d968 <__gethex+0x2e8>)
 800d7f2:	4602      	mov	r2, r0
 800d7f4:	21de      	movs	r1, #222	; 0xde
 800d7f6:	485d      	ldr	r0, [pc, #372]	; (800d96c <__gethex+0x2ec>)
 800d7f8:	f7ff f82e 	bl	800c858 <__assert_func>
 800d7fc:	3101      	adds	r1, #1
 800d7fe:	105b      	asrs	r3, r3, #1
 800d800:	e7ee      	b.n	800d7e0 <__gethex+0x160>
 800d802:	f100 0914 	add.w	r9, r0, #20
 800d806:	f04f 0b00 	mov.w	fp, #0
 800d80a:	f1ca 0301 	rsb	r3, sl, #1
 800d80e:	f8cd 9008 	str.w	r9, [sp, #8]
 800d812:	f8cd b000 	str.w	fp, [sp]
 800d816:	9306      	str	r3, [sp, #24]
 800d818:	42b7      	cmp	r7, r6
 800d81a:	d340      	bcc.n	800d89e <__gethex+0x21e>
 800d81c:	9802      	ldr	r0, [sp, #8]
 800d81e:	9b00      	ldr	r3, [sp, #0]
 800d820:	f840 3b04 	str.w	r3, [r0], #4
 800d824:	eba0 0009 	sub.w	r0, r0, r9
 800d828:	1080      	asrs	r0, r0, #2
 800d82a:	0146      	lsls	r6, r0, #5
 800d82c:	6120      	str	r0, [r4, #16]
 800d82e:	4618      	mov	r0, r3
 800d830:	f000 fb4c 	bl	800decc <__hi0bits>
 800d834:	1a30      	subs	r0, r6, r0
 800d836:	f8d8 6000 	ldr.w	r6, [r8]
 800d83a:	42b0      	cmp	r0, r6
 800d83c:	dd63      	ble.n	800d906 <__gethex+0x286>
 800d83e:	1b87      	subs	r7, r0, r6
 800d840:	4639      	mov	r1, r7
 800d842:	4620      	mov	r0, r4
 800d844:	f000 fef0 	bl	800e628 <__any_on>
 800d848:	4682      	mov	sl, r0
 800d84a:	b1a8      	cbz	r0, 800d878 <__gethex+0x1f8>
 800d84c:	1e7b      	subs	r3, r7, #1
 800d84e:	1159      	asrs	r1, r3, #5
 800d850:	f003 021f 	and.w	r2, r3, #31
 800d854:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d858:	f04f 0a01 	mov.w	sl, #1
 800d85c:	fa0a f202 	lsl.w	r2, sl, r2
 800d860:	420a      	tst	r2, r1
 800d862:	d009      	beq.n	800d878 <__gethex+0x1f8>
 800d864:	4553      	cmp	r3, sl
 800d866:	dd05      	ble.n	800d874 <__gethex+0x1f4>
 800d868:	1eb9      	subs	r1, r7, #2
 800d86a:	4620      	mov	r0, r4
 800d86c:	f000 fedc 	bl	800e628 <__any_on>
 800d870:	2800      	cmp	r0, #0
 800d872:	d145      	bne.n	800d900 <__gethex+0x280>
 800d874:	f04f 0a02 	mov.w	sl, #2
 800d878:	4639      	mov	r1, r7
 800d87a:	4620      	mov	r0, r4
 800d87c:	f7ff fe98 	bl	800d5b0 <rshift>
 800d880:	443d      	add	r5, r7
 800d882:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d886:	42ab      	cmp	r3, r5
 800d888:	da4c      	bge.n	800d924 <__gethex+0x2a4>
 800d88a:	ee18 0a10 	vmov	r0, s16
 800d88e:	4621      	mov	r1, r4
 800d890:	f000 fa6a 	bl	800dd68 <_Bfree>
 800d894:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d896:	2300      	movs	r3, #0
 800d898:	6013      	str	r3, [r2, #0]
 800d89a:	27a3      	movs	r7, #163	; 0xa3
 800d89c:	e785      	b.n	800d7aa <__gethex+0x12a>
 800d89e:	1e73      	subs	r3, r6, #1
 800d8a0:	9a05      	ldr	r2, [sp, #20]
 800d8a2:	9303      	str	r3, [sp, #12]
 800d8a4:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d8a8:	4293      	cmp	r3, r2
 800d8aa:	d019      	beq.n	800d8e0 <__gethex+0x260>
 800d8ac:	f1bb 0f20 	cmp.w	fp, #32
 800d8b0:	d107      	bne.n	800d8c2 <__gethex+0x242>
 800d8b2:	9b02      	ldr	r3, [sp, #8]
 800d8b4:	9a00      	ldr	r2, [sp, #0]
 800d8b6:	f843 2b04 	str.w	r2, [r3], #4
 800d8ba:	9302      	str	r3, [sp, #8]
 800d8bc:	2300      	movs	r3, #0
 800d8be:	9300      	str	r3, [sp, #0]
 800d8c0:	469b      	mov	fp, r3
 800d8c2:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d8c6:	f7ff fec5 	bl	800d654 <__hexdig_fun>
 800d8ca:	9b00      	ldr	r3, [sp, #0]
 800d8cc:	f000 000f 	and.w	r0, r0, #15
 800d8d0:	fa00 f00b 	lsl.w	r0, r0, fp
 800d8d4:	4303      	orrs	r3, r0
 800d8d6:	9300      	str	r3, [sp, #0]
 800d8d8:	f10b 0b04 	add.w	fp, fp, #4
 800d8dc:	9b03      	ldr	r3, [sp, #12]
 800d8de:	e00d      	b.n	800d8fc <__gethex+0x27c>
 800d8e0:	9b03      	ldr	r3, [sp, #12]
 800d8e2:	9a06      	ldr	r2, [sp, #24]
 800d8e4:	4413      	add	r3, r2
 800d8e6:	42bb      	cmp	r3, r7
 800d8e8:	d3e0      	bcc.n	800d8ac <__gethex+0x22c>
 800d8ea:	4618      	mov	r0, r3
 800d8ec:	9901      	ldr	r1, [sp, #4]
 800d8ee:	9307      	str	r3, [sp, #28]
 800d8f0:	4652      	mov	r2, sl
 800d8f2:	f001 fa81 	bl	800edf8 <strncmp>
 800d8f6:	9b07      	ldr	r3, [sp, #28]
 800d8f8:	2800      	cmp	r0, #0
 800d8fa:	d1d7      	bne.n	800d8ac <__gethex+0x22c>
 800d8fc:	461e      	mov	r6, r3
 800d8fe:	e78b      	b.n	800d818 <__gethex+0x198>
 800d900:	f04f 0a03 	mov.w	sl, #3
 800d904:	e7b8      	b.n	800d878 <__gethex+0x1f8>
 800d906:	da0a      	bge.n	800d91e <__gethex+0x29e>
 800d908:	1a37      	subs	r7, r6, r0
 800d90a:	4621      	mov	r1, r4
 800d90c:	ee18 0a10 	vmov	r0, s16
 800d910:	463a      	mov	r2, r7
 800d912:	f000 fc45 	bl	800e1a0 <__lshift>
 800d916:	1bed      	subs	r5, r5, r7
 800d918:	4604      	mov	r4, r0
 800d91a:	f100 0914 	add.w	r9, r0, #20
 800d91e:	f04f 0a00 	mov.w	sl, #0
 800d922:	e7ae      	b.n	800d882 <__gethex+0x202>
 800d924:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d928:	42a8      	cmp	r0, r5
 800d92a:	dd72      	ble.n	800da12 <__gethex+0x392>
 800d92c:	1b45      	subs	r5, r0, r5
 800d92e:	42ae      	cmp	r6, r5
 800d930:	dc36      	bgt.n	800d9a0 <__gethex+0x320>
 800d932:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d936:	2b02      	cmp	r3, #2
 800d938:	d02a      	beq.n	800d990 <__gethex+0x310>
 800d93a:	2b03      	cmp	r3, #3
 800d93c:	d02c      	beq.n	800d998 <__gethex+0x318>
 800d93e:	2b01      	cmp	r3, #1
 800d940:	d11c      	bne.n	800d97c <__gethex+0x2fc>
 800d942:	42ae      	cmp	r6, r5
 800d944:	d11a      	bne.n	800d97c <__gethex+0x2fc>
 800d946:	2e01      	cmp	r6, #1
 800d948:	d112      	bne.n	800d970 <__gethex+0x2f0>
 800d94a:	9a04      	ldr	r2, [sp, #16]
 800d94c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d950:	6013      	str	r3, [r2, #0]
 800d952:	2301      	movs	r3, #1
 800d954:	6123      	str	r3, [r4, #16]
 800d956:	f8c9 3000 	str.w	r3, [r9]
 800d95a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d95c:	2762      	movs	r7, #98	; 0x62
 800d95e:	601c      	str	r4, [r3, #0]
 800d960:	e723      	b.n	800d7aa <__gethex+0x12a>
 800d962:	bf00      	nop
 800d964:	0800fc38 	.word	0x0800fc38
 800d968:	0800fbc1 	.word	0x0800fbc1
 800d96c:	0800fbd2 	.word	0x0800fbd2
 800d970:	1e71      	subs	r1, r6, #1
 800d972:	4620      	mov	r0, r4
 800d974:	f000 fe58 	bl	800e628 <__any_on>
 800d978:	2800      	cmp	r0, #0
 800d97a:	d1e6      	bne.n	800d94a <__gethex+0x2ca>
 800d97c:	ee18 0a10 	vmov	r0, s16
 800d980:	4621      	mov	r1, r4
 800d982:	f000 f9f1 	bl	800dd68 <_Bfree>
 800d986:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d988:	2300      	movs	r3, #0
 800d98a:	6013      	str	r3, [r2, #0]
 800d98c:	2750      	movs	r7, #80	; 0x50
 800d98e:	e70c      	b.n	800d7aa <__gethex+0x12a>
 800d990:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d992:	2b00      	cmp	r3, #0
 800d994:	d1f2      	bne.n	800d97c <__gethex+0x2fc>
 800d996:	e7d8      	b.n	800d94a <__gethex+0x2ca>
 800d998:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d99a:	2b00      	cmp	r3, #0
 800d99c:	d1d5      	bne.n	800d94a <__gethex+0x2ca>
 800d99e:	e7ed      	b.n	800d97c <__gethex+0x2fc>
 800d9a0:	1e6f      	subs	r7, r5, #1
 800d9a2:	f1ba 0f00 	cmp.w	sl, #0
 800d9a6:	d131      	bne.n	800da0c <__gethex+0x38c>
 800d9a8:	b127      	cbz	r7, 800d9b4 <__gethex+0x334>
 800d9aa:	4639      	mov	r1, r7
 800d9ac:	4620      	mov	r0, r4
 800d9ae:	f000 fe3b 	bl	800e628 <__any_on>
 800d9b2:	4682      	mov	sl, r0
 800d9b4:	117b      	asrs	r3, r7, #5
 800d9b6:	2101      	movs	r1, #1
 800d9b8:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d9bc:	f007 071f 	and.w	r7, r7, #31
 800d9c0:	fa01 f707 	lsl.w	r7, r1, r7
 800d9c4:	421f      	tst	r7, r3
 800d9c6:	4629      	mov	r1, r5
 800d9c8:	4620      	mov	r0, r4
 800d9ca:	bf18      	it	ne
 800d9cc:	f04a 0a02 	orrne.w	sl, sl, #2
 800d9d0:	1b76      	subs	r6, r6, r5
 800d9d2:	f7ff fded 	bl	800d5b0 <rshift>
 800d9d6:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9da:	2702      	movs	r7, #2
 800d9dc:	f1ba 0f00 	cmp.w	sl, #0
 800d9e0:	d048      	beq.n	800da74 <__gethex+0x3f4>
 800d9e2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9e6:	2b02      	cmp	r3, #2
 800d9e8:	d015      	beq.n	800da16 <__gethex+0x396>
 800d9ea:	2b03      	cmp	r3, #3
 800d9ec:	d017      	beq.n	800da1e <__gethex+0x39e>
 800d9ee:	2b01      	cmp	r3, #1
 800d9f0:	d109      	bne.n	800da06 <__gethex+0x386>
 800d9f2:	f01a 0f02 	tst.w	sl, #2
 800d9f6:	d006      	beq.n	800da06 <__gethex+0x386>
 800d9f8:	f8d9 0000 	ldr.w	r0, [r9]
 800d9fc:	ea4a 0a00 	orr.w	sl, sl, r0
 800da00:	f01a 0f01 	tst.w	sl, #1
 800da04:	d10e      	bne.n	800da24 <__gethex+0x3a4>
 800da06:	f047 0710 	orr.w	r7, r7, #16
 800da0a:	e033      	b.n	800da74 <__gethex+0x3f4>
 800da0c:	f04f 0a01 	mov.w	sl, #1
 800da10:	e7d0      	b.n	800d9b4 <__gethex+0x334>
 800da12:	2701      	movs	r7, #1
 800da14:	e7e2      	b.n	800d9dc <__gethex+0x35c>
 800da16:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da18:	f1c3 0301 	rsb	r3, r3, #1
 800da1c:	9315      	str	r3, [sp, #84]	; 0x54
 800da1e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800da20:	2b00      	cmp	r3, #0
 800da22:	d0f0      	beq.n	800da06 <__gethex+0x386>
 800da24:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da28:	f104 0314 	add.w	r3, r4, #20
 800da2c:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800da30:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da34:	f04f 0c00 	mov.w	ip, #0
 800da38:	4618      	mov	r0, r3
 800da3a:	f853 2b04 	ldr.w	r2, [r3], #4
 800da3e:	f1b2 3fff 	cmp.w	r2, #4294967295
 800da42:	d01c      	beq.n	800da7e <__gethex+0x3fe>
 800da44:	3201      	adds	r2, #1
 800da46:	6002      	str	r2, [r0, #0]
 800da48:	2f02      	cmp	r7, #2
 800da4a:	f104 0314 	add.w	r3, r4, #20
 800da4e:	d13f      	bne.n	800dad0 <__gethex+0x450>
 800da50:	f8d8 2000 	ldr.w	r2, [r8]
 800da54:	3a01      	subs	r2, #1
 800da56:	42b2      	cmp	r2, r6
 800da58:	d10a      	bne.n	800da70 <__gethex+0x3f0>
 800da5a:	1171      	asrs	r1, r6, #5
 800da5c:	2201      	movs	r2, #1
 800da5e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da62:	f006 061f 	and.w	r6, r6, #31
 800da66:	fa02 f606 	lsl.w	r6, r2, r6
 800da6a:	421e      	tst	r6, r3
 800da6c:	bf18      	it	ne
 800da6e:	4617      	movne	r7, r2
 800da70:	f047 0720 	orr.w	r7, r7, #32
 800da74:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da76:	601c      	str	r4, [r3, #0]
 800da78:	9b04      	ldr	r3, [sp, #16]
 800da7a:	601d      	str	r5, [r3, #0]
 800da7c:	e695      	b.n	800d7aa <__gethex+0x12a>
 800da7e:	4299      	cmp	r1, r3
 800da80:	f843 cc04 	str.w	ip, [r3, #-4]
 800da84:	d8d8      	bhi.n	800da38 <__gethex+0x3b8>
 800da86:	68a3      	ldr	r3, [r4, #8]
 800da88:	459b      	cmp	fp, r3
 800da8a:	db19      	blt.n	800dac0 <__gethex+0x440>
 800da8c:	6861      	ldr	r1, [r4, #4]
 800da8e:	ee18 0a10 	vmov	r0, s16
 800da92:	3101      	adds	r1, #1
 800da94:	f000 f928 	bl	800dce8 <_Balloc>
 800da98:	4681      	mov	r9, r0
 800da9a:	b918      	cbnz	r0, 800daa4 <__gethex+0x424>
 800da9c:	4b1a      	ldr	r3, [pc, #104]	; (800db08 <__gethex+0x488>)
 800da9e:	4602      	mov	r2, r0
 800daa0:	2184      	movs	r1, #132	; 0x84
 800daa2:	e6a8      	b.n	800d7f6 <__gethex+0x176>
 800daa4:	6922      	ldr	r2, [r4, #16]
 800daa6:	3202      	adds	r2, #2
 800daa8:	f104 010c 	add.w	r1, r4, #12
 800daac:	0092      	lsls	r2, r2, #2
 800daae:	300c      	adds	r0, #12
 800dab0:	f000 f90c 	bl	800dccc <memcpy>
 800dab4:	4621      	mov	r1, r4
 800dab6:	ee18 0a10 	vmov	r0, s16
 800daba:	f000 f955 	bl	800dd68 <_Bfree>
 800dabe:	464c      	mov	r4, r9
 800dac0:	6923      	ldr	r3, [r4, #16]
 800dac2:	1c5a      	adds	r2, r3, #1
 800dac4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800dac8:	6122      	str	r2, [r4, #16]
 800daca:	2201      	movs	r2, #1
 800dacc:	615a      	str	r2, [r3, #20]
 800dace:	e7bb      	b.n	800da48 <__gethex+0x3c8>
 800dad0:	6922      	ldr	r2, [r4, #16]
 800dad2:	455a      	cmp	r2, fp
 800dad4:	dd0b      	ble.n	800daee <__gethex+0x46e>
 800dad6:	2101      	movs	r1, #1
 800dad8:	4620      	mov	r0, r4
 800dada:	f7ff fd69 	bl	800d5b0 <rshift>
 800dade:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800dae2:	3501      	adds	r5, #1
 800dae4:	42ab      	cmp	r3, r5
 800dae6:	f6ff aed0 	blt.w	800d88a <__gethex+0x20a>
 800daea:	2701      	movs	r7, #1
 800daec:	e7c0      	b.n	800da70 <__gethex+0x3f0>
 800daee:	f016 061f 	ands.w	r6, r6, #31
 800daf2:	d0fa      	beq.n	800daea <__gethex+0x46a>
 800daf4:	4453      	add	r3, sl
 800daf6:	f1c6 0620 	rsb	r6, r6, #32
 800dafa:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dafe:	f000 f9e5 	bl	800decc <__hi0bits>
 800db02:	42b0      	cmp	r0, r6
 800db04:	dbe7      	blt.n	800dad6 <__gethex+0x456>
 800db06:	e7f0      	b.n	800daea <__gethex+0x46a>
 800db08:	0800fbc1 	.word	0x0800fbc1

0800db0c <L_shift>:
 800db0c:	f1c2 0208 	rsb	r2, r2, #8
 800db10:	0092      	lsls	r2, r2, #2
 800db12:	b570      	push	{r4, r5, r6, lr}
 800db14:	f1c2 0620 	rsb	r6, r2, #32
 800db18:	6843      	ldr	r3, [r0, #4]
 800db1a:	6804      	ldr	r4, [r0, #0]
 800db1c:	fa03 f506 	lsl.w	r5, r3, r6
 800db20:	432c      	orrs	r4, r5
 800db22:	40d3      	lsrs	r3, r2
 800db24:	6004      	str	r4, [r0, #0]
 800db26:	f840 3f04 	str.w	r3, [r0, #4]!
 800db2a:	4288      	cmp	r0, r1
 800db2c:	d3f4      	bcc.n	800db18 <L_shift+0xc>
 800db2e:	bd70      	pop	{r4, r5, r6, pc}

0800db30 <__match>:
 800db30:	b530      	push	{r4, r5, lr}
 800db32:	6803      	ldr	r3, [r0, #0]
 800db34:	3301      	adds	r3, #1
 800db36:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db3a:	b914      	cbnz	r4, 800db42 <__match+0x12>
 800db3c:	6003      	str	r3, [r0, #0]
 800db3e:	2001      	movs	r0, #1
 800db40:	bd30      	pop	{r4, r5, pc}
 800db42:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db46:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800db4a:	2d19      	cmp	r5, #25
 800db4c:	bf98      	it	ls
 800db4e:	3220      	addls	r2, #32
 800db50:	42a2      	cmp	r2, r4
 800db52:	d0f0      	beq.n	800db36 <__match+0x6>
 800db54:	2000      	movs	r0, #0
 800db56:	e7f3      	b.n	800db40 <__match+0x10>

0800db58 <__hexnan>:
 800db58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db5c:	680b      	ldr	r3, [r1, #0]
 800db5e:	115e      	asrs	r6, r3, #5
 800db60:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db64:	f013 031f 	ands.w	r3, r3, #31
 800db68:	b087      	sub	sp, #28
 800db6a:	bf18      	it	ne
 800db6c:	3604      	addne	r6, #4
 800db6e:	2500      	movs	r5, #0
 800db70:	1f37      	subs	r7, r6, #4
 800db72:	4690      	mov	r8, r2
 800db74:	6802      	ldr	r2, [r0, #0]
 800db76:	9301      	str	r3, [sp, #4]
 800db78:	4682      	mov	sl, r0
 800db7a:	f846 5c04 	str.w	r5, [r6, #-4]
 800db7e:	46b9      	mov	r9, r7
 800db80:	463c      	mov	r4, r7
 800db82:	9502      	str	r5, [sp, #8]
 800db84:	46ab      	mov	fp, r5
 800db86:	7851      	ldrb	r1, [r2, #1]
 800db88:	1c53      	adds	r3, r2, #1
 800db8a:	9303      	str	r3, [sp, #12]
 800db8c:	b341      	cbz	r1, 800dbe0 <__hexnan+0x88>
 800db8e:	4608      	mov	r0, r1
 800db90:	9205      	str	r2, [sp, #20]
 800db92:	9104      	str	r1, [sp, #16]
 800db94:	f7ff fd5e 	bl	800d654 <__hexdig_fun>
 800db98:	2800      	cmp	r0, #0
 800db9a:	d14f      	bne.n	800dc3c <__hexnan+0xe4>
 800db9c:	9904      	ldr	r1, [sp, #16]
 800db9e:	9a05      	ldr	r2, [sp, #20]
 800dba0:	2920      	cmp	r1, #32
 800dba2:	d818      	bhi.n	800dbd6 <__hexnan+0x7e>
 800dba4:	9b02      	ldr	r3, [sp, #8]
 800dba6:	459b      	cmp	fp, r3
 800dba8:	dd13      	ble.n	800dbd2 <__hexnan+0x7a>
 800dbaa:	454c      	cmp	r4, r9
 800dbac:	d206      	bcs.n	800dbbc <__hexnan+0x64>
 800dbae:	2d07      	cmp	r5, #7
 800dbb0:	dc04      	bgt.n	800dbbc <__hexnan+0x64>
 800dbb2:	462a      	mov	r2, r5
 800dbb4:	4649      	mov	r1, r9
 800dbb6:	4620      	mov	r0, r4
 800dbb8:	f7ff ffa8 	bl	800db0c <L_shift>
 800dbbc:	4544      	cmp	r4, r8
 800dbbe:	d950      	bls.n	800dc62 <__hexnan+0x10a>
 800dbc0:	2300      	movs	r3, #0
 800dbc2:	f1a4 0904 	sub.w	r9, r4, #4
 800dbc6:	f844 3c04 	str.w	r3, [r4, #-4]
 800dbca:	f8cd b008 	str.w	fp, [sp, #8]
 800dbce:	464c      	mov	r4, r9
 800dbd0:	461d      	mov	r5, r3
 800dbd2:	9a03      	ldr	r2, [sp, #12]
 800dbd4:	e7d7      	b.n	800db86 <__hexnan+0x2e>
 800dbd6:	2929      	cmp	r1, #41	; 0x29
 800dbd8:	d156      	bne.n	800dc88 <__hexnan+0x130>
 800dbda:	3202      	adds	r2, #2
 800dbdc:	f8ca 2000 	str.w	r2, [sl]
 800dbe0:	f1bb 0f00 	cmp.w	fp, #0
 800dbe4:	d050      	beq.n	800dc88 <__hexnan+0x130>
 800dbe6:	454c      	cmp	r4, r9
 800dbe8:	d206      	bcs.n	800dbf8 <__hexnan+0xa0>
 800dbea:	2d07      	cmp	r5, #7
 800dbec:	dc04      	bgt.n	800dbf8 <__hexnan+0xa0>
 800dbee:	462a      	mov	r2, r5
 800dbf0:	4649      	mov	r1, r9
 800dbf2:	4620      	mov	r0, r4
 800dbf4:	f7ff ff8a 	bl	800db0c <L_shift>
 800dbf8:	4544      	cmp	r4, r8
 800dbfa:	d934      	bls.n	800dc66 <__hexnan+0x10e>
 800dbfc:	f1a8 0204 	sub.w	r2, r8, #4
 800dc00:	4623      	mov	r3, r4
 800dc02:	f853 1b04 	ldr.w	r1, [r3], #4
 800dc06:	f842 1f04 	str.w	r1, [r2, #4]!
 800dc0a:	429f      	cmp	r7, r3
 800dc0c:	d2f9      	bcs.n	800dc02 <__hexnan+0xaa>
 800dc0e:	1b3b      	subs	r3, r7, r4
 800dc10:	f023 0303 	bic.w	r3, r3, #3
 800dc14:	3304      	adds	r3, #4
 800dc16:	3401      	adds	r4, #1
 800dc18:	3e03      	subs	r6, #3
 800dc1a:	42b4      	cmp	r4, r6
 800dc1c:	bf88      	it	hi
 800dc1e:	2304      	movhi	r3, #4
 800dc20:	4443      	add	r3, r8
 800dc22:	2200      	movs	r2, #0
 800dc24:	f843 2b04 	str.w	r2, [r3], #4
 800dc28:	429f      	cmp	r7, r3
 800dc2a:	d2fb      	bcs.n	800dc24 <__hexnan+0xcc>
 800dc2c:	683b      	ldr	r3, [r7, #0]
 800dc2e:	b91b      	cbnz	r3, 800dc38 <__hexnan+0xe0>
 800dc30:	4547      	cmp	r7, r8
 800dc32:	d127      	bne.n	800dc84 <__hexnan+0x12c>
 800dc34:	2301      	movs	r3, #1
 800dc36:	603b      	str	r3, [r7, #0]
 800dc38:	2005      	movs	r0, #5
 800dc3a:	e026      	b.n	800dc8a <__hexnan+0x132>
 800dc3c:	3501      	adds	r5, #1
 800dc3e:	2d08      	cmp	r5, #8
 800dc40:	f10b 0b01 	add.w	fp, fp, #1
 800dc44:	dd06      	ble.n	800dc54 <__hexnan+0xfc>
 800dc46:	4544      	cmp	r4, r8
 800dc48:	d9c3      	bls.n	800dbd2 <__hexnan+0x7a>
 800dc4a:	2300      	movs	r3, #0
 800dc4c:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc50:	2501      	movs	r5, #1
 800dc52:	3c04      	subs	r4, #4
 800dc54:	6822      	ldr	r2, [r4, #0]
 800dc56:	f000 000f 	and.w	r0, r0, #15
 800dc5a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dc5e:	6022      	str	r2, [r4, #0]
 800dc60:	e7b7      	b.n	800dbd2 <__hexnan+0x7a>
 800dc62:	2508      	movs	r5, #8
 800dc64:	e7b5      	b.n	800dbd2 <__hexnan+0x7a>
 800dc66:	9b01      	ldr	r3, [sp, #4]
 800dc68:	2b00      	cmp	r3, #0
 800dc6a:	d0df      	beq.n	800dc2c <__hexnan+0xd4>
 800dc6c:	f04f 32ff 	mov.w	r2, #4294967295
 800dc70:	f1c3 0320 	rsb	r3, r3, #32
 800dc74:	fa22 f303 	lsr.w	r3, r2, r3
 800dc78:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dc7c:	401a      	ands	r2, r3
 800dc7e:	f846 2c04 	str.w	r2, [r6, #-4]
 800dc82:	e7d3      	b.n	800dc2c <__hexnan+0xd4>
 800dc84:	3f04      	subs	r7, #4
 800dc86:	e7d1      	b.n	800dc2c <__hexnan+0xd4>
 800dc88:	2004      	movs	r0, #4
 800dc8a:	b007      	add	sp, #28
 800dc8c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc90 <_localeconv_r>:
 800dc90:	4800      	ldr	r0, [pc, #0]	; (800dc94 <_localeconv_r+0x4>)
 800dc92:	4770      	bx	lr
 800dc94:	20000178 	.word	0x20000178

0800dc98 <malloc>:
 800dc98:	4b02      	ldr	r3, [pc, #8]	; (800dca4 <malloc+0xc>)
 800dc9a:	4601      	mov	r1, r0
 800dc9c:	6818      	ldr	r0, [r3, #0]
 800dc9e:	f000 bd67 	b.w	800e770 <_malloc_r>
 800dca2:	bf00      	nop
 800dca4:	20000020 	.word	0x20000020

0800dca8 <__ascii_mbtowc>:
 800dca8:	b082      	sub	sp, #8
 800dcaa:	b901      	cbnz	r1, 800dcae <__ascii_mbtowc+0x6>
 800dcac:	a901      	add	r1, sp, #4
 800dcae:	b142      	cbz	r2, 800dcc2 <__ascii_mbtowc+0x1a>
 800dcb0:	b14b      	cbz	r3, 800dcc6 <__ascii_mbtowc+0x1e>
 800dcb2:	7813      	ldrb	r3, [r2, #0]
 800dcb4:	600b      	str	r3, [r1, #0]
 800dcb6:	7812      	ldrb	r2, [r2, #0]
 800dcb8:	1e10      	subs	r0, r2, #0
 800dcba:	bf18      	it	ne
 800dcbc:	2001      	movne	r0, #1
 800dcbe:	b002      	add	sp, #8
 800dcc0:	4770      	bx	lr
 800dcc2:	4610      	mov	r0, r2
 800dcc4:	e7fb      	b.n	800dcbe <__ascii_mbtowc+0x16>
 800dcc6:	f06f 0001 	mvn.w	r0, #1
 800dcca:	e7f8      	b.n	800dcbe <__ascii_mbtowc+0x16>

0800dccc <memcpy>:
 800dccc:	440a      	add	r2, r1
 800dcce:	4291      	cmp	r1, r2
 800dcd0:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcd4:	d100      	bne.n	800dcd8 <memcpy+0xc>
 800dcd6:	4770      	bx	lr
 800dcd8:	b510      	push	{r4, lr}
 800dcda:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcde:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dce2:	4291      	cmp	r1, r2
 800dce4:	d1f9      	bne.n	800dcda <memcpy+0xe>
 800dce6:	bd10      	pop	{r4, pc}

0800dce8 <_Balloc>:
 800dce8:	b570      	push	{r4, r5, r6, lr}
 800dcea:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dcec:	4604      	mov	r4, r0
 800dcee:	460d      	mov	r5, r1
 800dcf0:	b976      	cbnz	r6, 800dd10 <_Balloc+0x28>
 800dcf2:	2010      	movs	r0, #16
 800dcf4:	f7ff ffd0 	bl	800dc98 <malloc>
 800dcf8:	4602      	mov	r2, r0
 800dcfa:	6260      	str	r0, [r4, #36]	; 0x24
 800dcfc:	b920      	cbnz	r0, 800dd08 <_Balloc+0x20>
 800dcfe:	4b18      	ldr	r3, [pc, #96]	; (800dd60 <_Balloc+0x78>)
 800dd00:	4818      	ldr	r0, [pc, #96]	; (800dd64 <_Balloc+0x7c>)
 800dd02:	2166      	movs	r1, #102	; 0x66
 800dd04:	f7fe fda8 	bl	800c858 <__assert_func>
 800dd08:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd0c:	6006      	str	r6, [r0, #0]
 800dd0e:	60c6      	str	r6, [r0, #12]
 800dd10:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dd12:	68f3      	ldr	r3, [r6, #12]
 800dd14:	b183      	cbz	r3, 800dd38 <_Balloc+0x50>
 800dd16:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd18:	68db      	ldr	r3, [r3, #12]
 800dd1a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dd1e:	b9b8      	cbnz	r0, 800dd50 <_Balloc+0x68>
 800dd20:	2101      	movs	r1, #1
 800dd22:	fa01 f605 	lsl.w	r6, r1, r5
 800dd26:	1d72      	adds	r2, r6, #5
 800dd28:	0092      	lsls	r2, r2, #2
 800dd2a:	4620      	mov	r0, r4
 800dd2c:	f000 fc9d 	bl	800e66a <_calloc_r>
 800dd30:	b160      	cbz	r0, 800dd4c <_Balloc+0x64>
 800dd32:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd36:	e00e      	b.n	800dd56 <_Balloc+0x6e>
 800dd38:	2221      	movs	r2, #33	; 0x21
 800dd3a:	2104      	movs	r1, #4
 800dd3c:	4620      	mov	r0, r4
 800dd3e:	f000 fc94 	bl	800e66a <_calloc_r>
 800dd42:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd44:	60f0      	str	r0, [r6, #12]
 800dd46:	68db      	ldr	r3, [r3, #12]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d1e4      	bne.n	800dd16 <_Balloc+0x2e>
 800dd4c:	2000      	movs	r0, #0
 800dd4e:	bd70      	pop	{r4, r5, r6, pc}
 800dd50:	6802      	ldr	r2, [r0, #0]
 800dd52:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd56:	2300      	movs	r3, #0
 800dd58:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd5c:	e7f7      	b.n	800dd4e <_Balloc+0x66>
 800dd5e:	bf00      	nop
 800dd60:	0800f9a8 	.word	0x0800f9a8
 800dd64:	0800fc4c 	.word	0x0800fc4c

0800dd68 <_Bfree>:
 800dd68:	b570      	push	{r4, r5, r6, lr}
 800dd6a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd6c:	4605      	mov	r5, r0
 800dd6e:	460c      	mov	r4, r1
 800dd70:	b976      	cbnz	r6, 800dd90 <_Bfree+0x28>
 800dd72:	2010      	movs	r0, #16
 800dd74:	f7ff ff90 	bl	800dc98 <malloc>
 800dd78:	4602      	mov	r2, r0
 800dd7a:	6268      	str	r0, [r5, #36]	; 0x24
 800dd7c:	b920      	cbnz	r0, 800dd88 <_Bfree+0x20>
 800dd7e:	4b09      	ldr	r3, [pc, #36]	; (800dda4 <_Bfree+0x3c>)
 800dd80:	4809      	ldr	r0, [pc, #36]	; (800dda8 <_Bfree+0x40>)
 800dd82:	218a      	movs	r1, #138	; 0x8a
 800dd84:	f7fe fd68 	bl	800c858 <__assert_func>
 800dd88:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd8c:	6006      	str	r6, [r0, #0]
 800dd8e:	60c6      	str	r6, [r0, #12]
 800dd90:	b13c      	cbz	r4, 800dda2 <_Bfree+0x3a>
 800dd92:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dd94:	6862      	ldr	r2, [r4, #4]
 800dd96:	68db      	ldr	r3, [r3, #12]
 800dd98:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd9c:	6021      	str	r1, [r4, #0]
 800dd9e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dda2:	bd70      	pop	{r4, r5, r6, pc}
 800dda4:	0800f9a8 	.word	0x0800f9a8
 800dda8:	0800fc4c 	.word	0x0800fc4c

0800ddac <__multadd>:
 800ddac:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800ddb0:	690d      	ldr	r5, [r1, #16]
 800ddb2:	4607      	mov	r7, r0
 800ddb4:	460c      	mov	r4, r1
 800ddb6:	461e      	mov	r6, r3
 800ddb8:	f101 0c14 	add.w	ip, r1, #20
 800ddbc:	2000      	movs	r0, #0
 800ddbe:	f8dc 3000 	ldr.w	r3, [ip]
 800ddc2:	b299      	uxth	r1, r3
 800ddc4:	fb02 6101 	mla	r1, r2, r1, r6
 800ddc8:	0c1e      	lsrs	r6, r3, #16
 800ddca:	0c0b      	lsrs	r3, r1, #16
 800ddcc:	fb02 3306 	mla	r3, r2, r6, r3
 800ddd0:	b289      	uxth	r1, r1
 800ddd2:	3001      	adds	r0, #1
 800ddd4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ddd8:	4285      	cmp	r5, r0
 800ddda:	f84c 1b04 	str.w	r1, [ip], #4
 800ddde:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800dde2:	dcec      	bgt.n	800ddbe <__multadd+0x12>
 800dde4:	b30e      	cbz	r6, 800de2a <__multadd+0x7e>
 800dde6:	68a3      	ldr	r3, [r4, #8]
 800dde8:	42ab      	cmp	r3, r5
 800ddea:	dc19      	bgt.n	800de20 <__multadd+0x74>
 800ddec:	6861      	ldr	r1, [r4, #4]
 800ddee:	4638      	mov	r0, r7
 800ddf0:	3101      	adds	r1, #1
 800ddf2:	f7ff ff79 	bl	800dce8 <_Balloc>
 800ddf6:	4680      	mov	r8, r0
 800ddf8:	b928      	cbnz	r0, 800de06 <__multadd+0x5a>
 800ddfa:	4602      	mov	r2, r0
 800ddfc:	4b0c      	ldr	r3, [pc, #48]	; (800de30 <__multadd+0x84>)
 800ddfe:	480d      	ldr	r0, [pc, #52]	; (800de34 <__multadd+0x88>)
 800de00:	21b5      	movs	r1, #181	; 0xb5
 800de02:	f7fe fd29 	bl	800c858 <__assert_func>
 800de06:	6922      	ldr	r2, [r4, #16]
 800de08:	3202      	adds	r2, #2
 800de0a:	f104 010c 	add.w	r1, r4, #12
 800de0e:	0092      	lsls	r2, r2, #2
 800de10:	300c      	adds	r0, #12
 800de12:	f7ff ff5b 	bl	800dccc <memcpy>
 800de16:	4621      	mov	r1, r4
 800de18:	4638      	mov	r0, r7
 800de1a:	f7ff ffa5 	bl	800dd68 <_Bfree>
 800de1e:	4644      	mov	r4, r8
 800de20:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800de24:	3501      	adds	r5, #1
 800de26:	615e      	str	r6, [r3, #20]
 800de28:	6125      	str	r5, [r4, #16]
 800de2a:	4620      	mov	r0, r4
 800de2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de30:	0800fbc1 	.word	0x0800fbc1
 800de34:	0800fc4c 	.word	0x0800fc4c

0800de38 <__s2b>:
 800de38:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de3c:	460c      	mov	r4, r1
 800de3e:	4615      	mov	r5, r2
 800de40:	461f      	mov	r7, r3
 800de42:	2209      	movs	r2, #9
 800de44:	3308      	adds	r3, #8
 800de46:	4606      	mov	r6, r0
 800de48:	fb93 f3f2 	sdiv	r3, r3, r2
 800de4c:	2100      	movs	r1, #0
 800de4e:	2201      	movs	r2, #1
 800de50:	429a      	cmp	r2, r3
 800de52:	db09      	blt.n	800de68 <__s2b+0x30>
 800de54:	4630      	mov	r0, r6
 800de56:	f7ff ff47 	bl	800dce8 <_Balloc>
 800de5a:	b940      	cbnz	r0, 800de6e <__s2b+0x36>
 800de5c:	4602      	mov	r2, r0
 800de5e:	4b19      	ldr	r3, [pc, #100]	; (800dec4 <__s2b+0x8c>)
 800de60:	4819      	ldr	r0, [pc, #100]	; (800dec8 <__s2b+0x90>)
 800de62:	21ce      	movs	r1, #206	; 0xce
 800de64:	f7fe fcf8 	bl	800c858 <__assert_func>
 800de68:	0052      	lsls	r2, r2, #1
 800de6a:	3101      	adds	r1, #1
 800de6c:	e7f0      	b.n	800de50 <__s2b+0x18>
 800de6e:	9b08      	ldr	r3, [sp, #32]
 800de70:	6143      	str	r3, [r0, #20]
 800de72:	2d09      	cmp	r5, #9
 800de74:	f04f 0301 	mov.w	r3, #1
 800de78:	6103      	str	r3, [r0, #16]
 800de7a:	dd16      	ble.n	800deaa <__s2b+0x72>
 800de7c:	f104 0909 	add.w	r9, r4, #9
 800de80:	46c8      	mov	r8, r9
 800de82:	442c      	add	r4, r5
 800de84:	f818 3b01 	ldrb.w	r3, [r8], #1
 800de88:	4601      	mov	r1, r0
 800de8a:	3b30      	subs	r3, #48	; 0x30
 800de8c:	220a      	movs	r2, #10
 800de8e:	4630      	mov	r0, r6
 800de90:	f7ff ff8c 	bl	800ddac <__multadd>
 800de94:	45a0      	cmp	r8, r4
 800de96:	d1f5      	bne.n	800de84 <__s2b+0x4c>
 800de98:	f1a5 0408 	sub.w	r4, r5, #8
 800de9c:	444c      	add	r4, r9
 800de9e:	1b2d      	subs	r5, r5, r4
 800dea0:	1963      	adds	r3, r4, r5
 800dea2:	42bb      	cmp	r3, r7
 800dea4:	db04      	blt.n	800deb0 <__s2b+0x78>
 800dea6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800deaa:	340a      	adds	r4, #10
 800deac:	2509      	movs	r5, #9
 800deae:	e7f6      	b.n	800de9e <__s2b+0x66>
 800deb0:	f814 3b01 	ldrb.w	r3, [r4], #1
 800deb4:	4601      	mov	r1, r0
 800deb6:	3b30      	subs	r3, #48	; 0x30
 800deb8:	220a      	movs	r2, #10
 800deba:	4630      	mov	r0, r6
 800debc:	f7ff ff76 	bl	800ddac <__multadd>
 800dec0:	e7ee      	b.n	800dea0 <__s2b+0x68>
 800dec2:	bf00      	nop
 800dec4:	0800fbc1 	.word	0x0800fbc1
 800dec8:	0800fc4c 	.word	0x0800fc4c

0800decc <__hi0bits>:
 800decc:	0c03      	lsrs	r3, r0, #16
 800dece:	041b      	lsls	r3, r3, #16
 800ded0:	b9d3      	cbnz	r3, 800df08 <__hi0bits+0x3c>
 800ded2:	0400      	lsls	r0, r0, #16
 800ded4:	2310      	movs	r3, #16
 800ded6:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800deda:	bf04      	itt	eq
 800dedc:	0200      	lsleq	r0, r0, #8
 800dede:	3308      	addeq	r3, #8
 800dee0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800dee4:	bf04      	itt	eq
 800dee6:	0100      	lsleq	r0, r0, #4
 800dee8:	3304      	addeq	r3, #4
 800deea:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800deee:	bf04      	itt	eq
 800def0:	0080      	lsleq	r0, r0, #2
 800def2:	3302      	addeq	r3, #2
 800def4:	2800      	cmp	r0, #0
 800def6:	db05      	blt.n	800df04 <__hi0bits+0x38>
 800def8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800defc:	f103 0301 	add.w	r3, r3, #1
 800df00:	bf08      	it	eq
 800df02:	2320      	moveq	r3, #32
 800df04:	4618      	mov	r0, r3
 800df06:	4770      	bx	lr
 800df08:	2300      	movs	r3, #0
 800df0a:	e7e4      	b.n	800ded6 <__hi0bits+0xa>

0800df0c <__lo0bits>:
 800df0c:	6803      	ldr	r3, [r0, #0]
 800df0e:	f013 0207 	ands.w	r2, r3, #7
 800df12:	4601      	mov	r1, r0
 800df14:	d00b      	beq.n	800df2e <__lo0bits+0x22>
 800df16:	07da      	lsls	r2, r3, #31
 800df18:	d423      	bmi.n	800df62 <__lo0bits+0x56>
 800df1a:	0798      	lsls	r0, r3, #30
 800df1c:	bf49      	itett	mi
 800df1e:	085b      	lsrmi	r3, r3, #1
 800df20:	089b      	lsrpl	r3, r3, #2
 800df22:	2001      	movmi	r0, #1
 800df24:	600b      	strmi	r3, [r1, #0]
 800df26:	bf5c      	itt	pl
 800df28:	600b      	strpl	r3, [r1, #0]
 800df2a:	2002      	movpl	r0, #2
 800df2c:	4770      	bx	lr
 800df2e:	b298      	uxth	r0, r3
 800df30:	b9a8      	cbnz	r0, 800df5e <__lo0bits+0x52>
 800df32:	0c1b      	lsrs	r3, r3, #16
 800df34:	2010      	movs	r0, #16
 800df36:	b2da      	uxtb	r2, r3
 800df38:	b90a      	cbnz	r2, 800df3e <__lo0bits+0x32>
 800df3a:	3008      	adds	r0, #8
 800df3c:	0a1b      	lsrs	r3, r3, #8
 800df3e:	071a      	lsls	r2, r3, #28
 800df40:	bf04      	itt	eq
 800df42:	091b      	lsreq	r3, r3, #4
 800df44:	3004      	addeq	r0, #4
 800df46:	079a      	lsls	r2, r3, #30
 800df48:	bf04      	itt	eq
 800df4a:	089b      	lsreq	r3, r3, #2
 800df4c:	3002      	addeq	r0, #2
 800df4e:	07da      	lsls	r2, r3, #31
 800df50:	d403      	bmi.n	800df5a <__lo0bits+0x4e>
 800df52:	085b      	lsrs	r3, r3, #1
 800df54:	f100 0001 	add.w	r0, r0, #1
 800df58:	d005      	beq.n	800df66 <__lo0bits+0x5a>
 800df5a:	600b      	str	r3, [r1, #0]
 800df5c:	4770      	bx	lr
 800df5e:	4610      	mov	r0, r2
 800df60:	e7e9      	b.n	800df36 <__lo0bits+0x2a>
 800df62:	2000      	movs	r0, #0
 800df64:	4770      	bx	lr
 800df66:	2020      	movs	r0, #32
 800df68:	4770      	bx	lr
	...

0800df6c <__i2b>:
 800df6c:	b510      	push	{r4, lr}
 800df6e:	460c      	mov	r4, r1
 800df70:	2101      	movs	r1, #1
 800df72:	f7ff feb9 	bl	800dce8 <_Balloc>
 800df76:	4602      	mov	r2, r0
 800df78:	b928      	cbnz	r0, 800df86 <__i2b+0x1a>
 800df7a:	4b05      	ldr	r3, [pc, #20]	; (800df90 <__i2b+0x24>)
 800df7c:	4805      	ldr	r0, [pc, #20]	; (800df94 <__i2b+0x28>)
 800df7e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800df82:	f7fe fc69 	bl	800c858 <__assert_func>
 800df86:	2301      	movs	r3, #1
 800df88:	6144      	str	r4, [r0, #20]
 800df8a:	6103      	str	r3, [r0, #16]
 800df8c:	bd10      	pop	{r4, pc}
 800df8e:	bf00      	nop
 800df90:	0800fbc1 	.word	0x0800fbc1
 800df94:	0800fc4c 	.word	0x0800fc4c

0800df98 <__multiply>:
 800df98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df9c:	4691      	mov	r9, r2
 800df9e:	690a      	ldr	r2, [r1, #16]
 800dfa0:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800dfa4:	429a      	cmp	r2, r3
 800dfa6:	bfb8      	it	lt
 800dfa8:	460b      	movlt	r3, r1
 800dfaa:	460c      	mov	r4, r1
 800dfac:	bfbc      	itt	lt
 800dfae:	464c      	movlt	r4, r9
 800dfb0:	4699      	movlt	r9, r3
 800dfb2:	6927      	ldr	r7, [r4, #16]
 800dfb4:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800dfb8:	68a3      	ldr	r3, [r4, #8]
 800dfba:	6861      	ldr	r1, [r4, #4]
 800dfbc:	eb07 060a 	add.w	r6, r7, sl
 800dfc0:	42b3      	cmp	r3, r6
 800dfc2:	b085      	sub	sp, #20
 800dfc4:	bfb8      	it	lt
 800dfc6:	3101      	addlt	r1, #1
 800dfc8:	f7ff fe8e 	bl	800dce8 <_Balloc>
 800dfcc:	b930      	cbnz	r0, 800dfdc <__multiply+0x44>
 800dfce:	4602      	mov	r2, r0
 800dfd0:	4b44      	ldr	r3, [pc, #272]	; (800e0e4 <__multiply+0x14c>)
 800dfd2:	4845      	ldr	r0, [pc, #276]	; (800e0e8 <__multiply+0x150>)
 800dfd4:	f240 115d 	movw	r1, #349	; 0x15d
 800dfd8:	f7fe fc3e 	bl	800c858 <__assert_func>
 800dfdc:	f100 0514 	add.w	r5, r0, #20
 800dfe0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dfe4:	462b      	mov	r3, r5
 800dfe6:	2200      	movs	r2, #0
 800dfe8:	4543      	cmp	r3, r8
 800dfea:	d321      	bcc.n	800e030 <__multiply+0x98>
 800dfec:	f104 0314 	add.w	r3, r4, #20
 800dff0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dff4:	f109 0314 	add.w	r3, r9, #20
 800dff8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dffc:	9202      	str	r2, [sp, #8]
 800dffe:	1b3a      	subs	r2, r7, r4
 800e000:	3a15      	subs	r2, #21
 800e002:	f022 0203 	bic.w	r2, r2, #3
 800e006:	3204      	adds	r2, #4
 800e008:	f104 0115 	add.w	r1, r4, #21
 800e00c:	428f      	cmp	r7, r1
 800e00e:	bf38      	it	cc
 800e010:	2204      	movcc	r2, #4
 800e012:	9201      	str	r2, [sp, #4]
 800e014:	9a02      	ldr	r2, [sp, #8]
 800e016:	9303      	str	r3, [sp, #12]
 800e018:	429a      	cmp	r2, r3
 800e01a:	d80c      	bhi.n	800e036 <__multiply+0x9e>
 800e01c:	2e00      	cmp	r6, #0
 800e01e:	dd03      	ble.n	800e028 <__multiply+0x90>
 800e020:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800e024:	2b00      	cmp	r3, #0
 800e026:	d05a      	beq.n	800e0de <__multiply+0x146>
 800e028:	6106      	str	r6, [r0, #16]
 800e02a:	b005      	add	sp, #20
 800e02c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e030:	f843 2b04 	str.w	r2, [r3], #4
 800e034:	e7d8      	b.n	800dfe8 <__multiply+0x50>
 800e036:	f8b3 a000 	ldrh.w	sl, [r3]
 800e03a:	f1ba 0f00 	cmp.w	sl, #0
 800e03e:	d024      	beq.n	800e08a <__multiply+0xf2>
 800e040:	f104 0e14 	add.w	lr, r4, #20
 800e044:	46a9      	mov	r9, r5
 800e046:	f04f 0c00 	mov.w	ip, #0
 800e04a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e04e:	f8d9 1000 	ldr.w	r1, [r9]
 800e052:	fa1f fb82 	uxth.w	fp, r2
 800e056:	b289      	uxth	r1, r1
 800e058:	fb0a 110b 	mla	r1, sl, fp, r1
 800e05c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e060:	f8d9 2000 	ldr.w	r2, [r9]
 800e064:	4461      	add	r1, ip
 800e066:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e06a:	fb0a c20b 	mla	r2, sl, fp, ip
 800e06e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e072:	b289      	uxth	r1, r1
 800e074:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e078:	4577      	cmp	r7, lr
 800e07a:	f849 1b04 	str.w	r1, [r9], #4
 800e07e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e082:	d8e2      	bhi.n	800e04a <__multiply+0xb2>
 800e084:	9a01      	ldr	r2, [sp, #4]
 800e086:	f845 c002 	str.w	ip, [r5, r2]
 800e08a:	9a03      	ldr	r2, [sp, #12]
 800e08c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e090:	3304      	adds	r3, #4
 800e092:	f1b9 0f00 	cmp.w	r9, #0
 800e096:	d020      	beq.n	800e0da <__multiply+0x142>
 800e098:	6829      	ldr	r1, [r5, #0]
 800e09a:	f104 0c14 	add.w	ip, r4, #20
 800e09e:	46ae      	mov	lr, r5
 800e0a0:	f04f 0a00 	mov.w	sl, #0
 800e0a4:	f8bc b000 	ldrh.w	fp, [ip]
 800e0a8:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e0ac:	fb09 220b 	mla	r2, r9, fp, r2
 800e0b0:	4492      	add	sl, r2
 800e0b2:	b289      	uxth	r1, r1
 800e0b4:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e0b8:	f84e 1b04 	str.w	r1, [lr], #4
 800e0bc:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e0c0:	f8be 1000 	ldrh.w	r1, [lr]
 800e0c4:	0c12      	lsrs	r2, r2, #16
 800e0c6:	fb09 1102 	mla	r1, r9, r2, r1
 800e0ca:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e0ce:	4567      	cmp	r7, ip
 800e0d0:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e0d4:	d8e6      	bhi.n	800e0a4 <__multiply+0x10c>
 800e0d6:	9a01      	ldr	r2, [sp, #4]
 800e0d8:	50a9      	str	r1, [r5, r2]
 800e0da:	3504      	adds	r5, #4
 800e0dc:	e79a      	b.n	800e014 <__multiply+0x7c>
 800e0de:	3e01      	subs	r6, #1
 800e0e0:	e79c      	b.n	800e01c <__multiply+0x84>
 800e0e2:	bf00      	nop
 800e0e4:	0800fbc1 	.word	0x0800fbc1
 800e0e8:	0800fc4c 	.word	0x0800fc4c

0800e0ec <__pow5mult>:
 800e0ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0f0:	4615      	mov	r5, r2
 800e0f2:	f012 0203 	ands.w	r2, r2, #3
 800e0f6:	4606      	mov	r6, r0
 800e0f8:	460f      	mov	r7, r1
 800e0fa:	d007      	beq.n	800e10c <__pow5mult+0x20>
 800e0fc:	4c25      	ldr	r4, [pc, #148]	; (800e194 <__pow5mult+0xa8>)
 800e0fe:	3a01      	subs	r2, #1
 800e100:	2300      	movs	r3, #0
 800e102:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e106:	f7ff fe51 	bl	800ddac <__multadd>
 800e10a:	4607      	mov	r7, r0
 800e10c:	10ad      	asrs	r5, r5, #2
 800e10e:	d03d      	beq.n	800e18c <__pow5mult+0xa0>
 800e110:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e112:	b97c      	cbnz	r4, 800e134 <__pow5mult+0x48>
 800e114:	2010      	movs	r0, #16
 800e116:	f7ff fdbf 	bl	800dc98 <malloc>
 800e11a:	4602      	mov	r2, r0
 800e11c:	6270      	str	r0, [r6, #36]	; 0x24
 800e11e:	b928      	cbnz	r0, 800e12c <__pow5mult+0x40>
 800e120:	4b1d      	ldr	r3, [pc, #116]	; (800e198 <__pow5mult+0xac>)
 800e122:	481e      	ldr	r0, [pc, #120]	; (800e19c <__pow5mult+0xb0>)
 800e124:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e128:	f7fe fb96 	bl	800c858 <__assert_func>
 800e12c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e130:	6004      	str	r4, [r0, #0]
 800e132:	60c4      	str	r4, [r0, #12]
 800e134:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e138:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e13c:	b94c      	cbnz	r4, 800e152 <__pow5mult+0x66>
 800e13e:	f240 2171 	movw	r1, #625	; 0x271
 800e142:	4630      	mov	r0, r6
 800e144:	f7ff ff12 	bl	800df6c <__i2b>
 800e148:	2300      	movs	r3, #0
 800e14a:	f8c8 0008 	str.w	r0, [r8, #8]
 800e14e:	4604      	mov	r4, r0
 800e150:	6003      	str	r3, [r0, #0]
 800e152:	f04f 0900 	mov.w	r9, #0
 800e156:	07eb      	lsls	r3, r5, #31
 800e158:	d50a      	bpl.n	800e170 <__pow5mult+0x84>
 800e15a:	4639      	mov	r1, r7
 800e15c:	4622      	mov	r2, r4
 800e15e:	4630      	mov	r0, r6
 800e160:	f7ff ff1a 	bl	800df98 <__multiply>
 800e164:	4639      	mov	r1, r7
 800e166:	4680      	mov	r8, r0
 800e168:	4630      	mov	r0, r6
 800e16a:	f7ff fdfd 	bl	800dd68 <_Bfree>
 800e16e:	4647      	mov	r7, r8
 800e170:	106d      	asrs	r5, r5, #1
 800e172:	d00b      	beq.n	800e18c <__pow5mult+0xa0>
 800e174:	6820      	ldr	r0, [r4, #0]
 800e176:	b938      	cbnz	r0, 800e188 <__pow5mult+0x9c>
 800e178:	4622      	mov	r2, r4
 800e17a:	4621      	mov	r1, r4
 800e17c:	4630      	mov	r0, r6
 800e17e:	f7ff ff0b 	bl	800df98 <__multiply>
 800e182:	6020      	str	r0, [r4, #0]
 800e184:	f8c0 9000 	str.w	r9, [r0]
 800e188:	4604      	mov	r4, r0
 800e18a:	e7e4      	b.n	800e156 <__pow5mult+0x6a>
 800e18c:	4638      	mov	r0, r7
 800e18e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e192:	bf00      	nop
 800e194:	0800fd98 	.word	0x0800fd98
 800e198:	0800f9a8 	.word	0x0800f9a8
 800e19c:	0800fc4c 	.word	0x0800fc4c

0800e1a0 <__lshift>:
 800e1a0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e1a4:	460c      	mov	r4, r1
 800e1a6:	6849      	ldr	r1, [r1, #4]
 800e1a8:	6923      	ldr	r3, [r4, #16]
 800e1aa:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e1ae:	68a3      	ldr	r3, [r4, #8]
 800e1b0:	4607      	mov	r7, r0
 800e1b2:	4691      	mov	r9, r2
 800e1b4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e1b8:	f108 0601 	add.w	r6, r8, #1
 800e1bc:	42b3      	cmp	r3, r6
 800e1be:	db0b      	blt.n	800e1d8 <__lshift+0x38>
 800e1c0:	4638      	mov	r0, r7
 800e1c2:	f7ff fd91 	bl	800dce8 <_Balloc>
 800e1c6:	4605      	mov	r5, r0
 800e1c8:	b948      	cbnz	r0, 800e1de <__lshift+0x3e>
 800e1ca:	4602      	mov	r2, r0
 800e1cc:	4b2a      	ldr	r3, [pc, #168]	; (800e278 <__lshift+0xd8>)
 800e1ce:	482b      	ldr	r0, [pc, #172]	; (800e27c <__lshift+0xdc>)
 800e1d0:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e1d4:	f7fe fb40 	bl	800c858 <__assert_func>
 800e1d8:	3101      	adds	r1, #1
 800e1da:	005b      	lsls	r3, r3, #1
 800e1dc:	e7ee      	b.n	800e1bc <__lshift+0x1c>
 800e1de:	2300      	movs	r3, #0
 800e1e0:	f100 0114 	add.w	r1, r0, #20
 800e1e4:	f100 0210 	add.w	r2, r0, #16
 800e1e8:	4618      	mov	r0, r3
 800e1ea:	4553      	cmp	r3, sl
 800e1ec:	db37      	blt.n	800e25e <__lshift+0xbe>
 800e1ee:	6920      	ldr	r0, [r4, #16]
 800e1f0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1f4:	f104 0314 	add.w	r3, r4, #20
 800e1f8:	f019 091f 	ands.w	r9, r9, #31
 800e1fc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e200:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e204:	d02f      	beq.n	800e266 <__lshift+0xc6>
 800e206:	f1c9 0e20 	rsb	lr, r9, #32
 800e20a:	468a      	mov	sl, r1
 800e20c:	f04f 0c00 	mov.w	ip, #0
 800e210:	681a      	ldr	r2, [r3, #0]
 800e212:	fa02 f209 	lsl.w	r2, r2, r9
 800e216:	ea42 020c 	orr.w	r2, r2, ip
 800e21a:	f84a 2b04 	str.w	r2, [sl], #4
 800e21e:	f853 2b04 	ldr.w	r2, [r3], #4
 800e222:	4298      	cmp	r0, r3
 800e224:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e228:	d8f2      	bhi.n	800e210 <__lshift+0x70>
 800e22a:	1b03      	subs	r3, r0, r4
 800e22c:	3b15      	subs	r3, #21
 800e22e:	f023 0303 	bic.w	r3, r3, #3
 800e232:	3304      	adds	r3, #4
 800e234:	f104 0215 	add.w	r2, r4, #21
 800e238:	4290      	cmp	r0, r2
 800e23a:	bf38      	it	cc
 800e23c:	2304      	movcc	r3, #4
 800e23e:	f841 c003 	str.w	ip, [r1, r3]
 800e242:	f1bc 0f00 	cmp.w	ip, #0
 800e246:	d001      	beq.n	800e24c <__lshift+0xac>
 800e248:	f108 0602 	add.w	r6, r8, #2
 800e24c:	3e01      	subs	r6, #1
 800e24e:	4638      	mov	r0, r7
 800e250:	612e      	str	r6, [r5, #16]
 800e252:	4621      	mov	r1, r4
 800e254:	f7ff fd88 	bl	800dd68 <_Bfree>
 800e258:	4628      	mov	r0, r5
 800e25a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e25e:	f842 0f04 	str.w	r0, [r2, #4]!
 800e262:	3301      	adds	r3, #1
 800e264:	e7c1      	b.n	800e1ea <__lshift+0x4a>
 800e266:	3904      	subs	r1, #4
 800e268:	f853 2b04 	ldr.w	r2, [r3], #4
 800e26c:	f841 2f04 	str.w	r2, [r1, #4]!
 800e270:	4298      	cmp	r0, r3
 800e272:	d8f9      	bhi.n	800e268 <__lshift+0xc8>
 800e274:	e7ea      	b.n	800e24c <__lshift+0xac>
 800e276:	bf00      	nop
 800e278:	0800fbc1 	.word	0x0800fbc1
 800e27c:	0800fc4c 	.word	0x0800fc4c

0800e280 <__mcmp>:
 800e280:	b530      	push	{r4, r5, lr}
 800e282:	6902      	ldr	r2, [r0, #16]
 800e284:	690c      	ldr	r4, [r1, #16]
 800e286:	1b12      	subs	r2, r2, r4
 800e288:	d10e      	bne.n	800e2a8 <__mcmp+0x28>
 800e28a:	f100 0314 	add.w	r3, r0, #20
 800e28e:	3114      	adds	r1, #20
 800e290:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e294:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e298:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e29c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e2a0:	42a5      	cmp	r5, r4
 800e2a2:	d003      	beq.n	800e2ac <__mcmp+0x2c>
 800e2a4:	d305      	bcc.n	800e2b2 <__mcmp+0x32>
 800e2a6:	2201      	movs	r2, #1
 800e2a8:	4610      	mov	r0, r2
 800e2aa:	bd30      	pop	{r4, r5, pc}
 800e2ac:	4283      	cmp	r3, r0
 800e2ae:	d3f3      	bcc.n	800e298 <__mcmp+0x18>
 800e2b0:	e7fa      	b.n	800e2a8 <__mcmp+0x28>
 800e2b2:	f04f 32ff 	mov.w	r2, #4294967295
 800e2b6:	e7f7      	b.n	800e2a8 <__mcmp+0x28>

0800e2b8 <__mdiff>:
 800e2b8:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e2bc:	460c      	mov	r4, r1
 800e2be:	4606      	mov	r6, r0
 800e2c0:	4611      	mov	r1, r2
 800e2c2:	4620      	mov	r0, r4
 800e2c4:	4690      	mov	r8, r2
 800e2c6:	f7ff ffdb 	bl	800e280 <__mcmp>
 800e2ca:	1e05      	subs	r5, r0, #0
 800e2cc:	d110      	bne.n	800e2f0 <__mdiff+0x38>
 800e2ce:	4629      	mov	r1, r5
 800e2d0:	4630      	mov	r0, r6
 800e2d2:	f7ff fd09 	bl	800dce8 <_Balloc>
 800e2d6:	b930      	cbnz	r0, 800e2e6 <__mdiff+0x2e>
 800e2d8:	4b3a      	ldr	r3, [pc, #232]	; (800e3c4 <__mdiff+0x10c>)
 800e2da:	4602      	mov	r2, r0
 800e2dc:	f240 2132 	movw	r1, #562	; 0x232
 800e2e0:	4839      	ldr	r0, [pc, #228]	; (800e3c8 <__mdiff+0x110>)
 800e2e2:	f7fe fab9 	bl	800c858 <__assert_func>
 800e2e6:	2301      	movs	r3, #1
 800e2e8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2ec:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2f0:	bfa4      	itt	ge
 800e2f2:	4643      	movge	r3, r8
 800e2f4:	46a0      	movge	r8, r4
 800e2f6:	4630      	mov	r0, r6
 800e2f8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e2fc:	bfa6      	itte	ge
 800e2fe:	461c      	movge	r4, r3
 800e300:	2500      	movge	r5, #0
 800e302:	2501      	movlt	r5, #1
 800e304:	f7ff fcf0 	bl	800dce8 <_Balloc>
 800e308:	b920      	cbnz	r0, 800e314 <__mdiff+0x5c>
 800e30a:	4b2e      	ldr	r3, [pc, #184]	; (800e3c4 <__mdiff+0x10c>)
 800e30c:	4602      	mov	r2, r0
 800e30e:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e312:	e7e5      	b.n	800e2e0 <__mdiff+0x28>
 800e314:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e318:	6926      	ldr	r6, [r4, #16]
 800e31a:	60c5      	str	r5, [r0, #12]
 800e31c:	f104 0914 	add.w	r9, r4, #20
 800e320:	f108 0514 	add.w	r5, r8, #20
 800e324:	f100 0e14 	add.w	lr, r0, #20
 800e328:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e32c:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e330:	f108 0210 	add.w	r2, r8, #16
 800e334:	46f2      	mov	sl, lr
 800e336:	2100      	movs	r1, #0
 800e338:	f859 3b04 	ldr.w	r3, [r9], #4
 800e33c:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e340:	fa1f f883 	uxth.w	r8, r3
 800e344:	fa11 f18b 	uxtah	r1, r1, fp
 800e348:	0c1b      	lsrs	r3, r3, #16
 800e34a:	eba1 0808 	sub.w	r8, r1, r8
 800e34e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e352:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e356:	fa1f f888 	uxth.w	r8, r8
 800e35a:	1419      	asrs	r1, r3, #16
 800e35c:	454e      	cmp	r6, r9
 800e35e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e362:	f84a 3b04 	str.w	r3, [sl], #4
 800e366:	d8e7      	bhi.n	800e338 <__mdiff+0x80>
 800e368:	1b33      	subs	r3, r6, r4
 800e36a:	3b15      	subs	r3, #21
 800e36c:	f023 0303 	bic.w	r3, r3, #3
 800e370:	3304      	adds	r3, #4
 800e372:	3415      	adds	r4, #21
 800e374:	42a6      	cmp	r6, r4
 800e376:	bf38      	it	cc
 800e378:	2304      	movcc	r3, #4
 800e37a:	441d      	add	r5, r3
 800e37c:	4473      	add	r3, lr
 800e37e:	469e      	mov	lr, r3
 800e380:	462e      	mov	r6, r5
 800e382:	4566      	cmp	r6, ip
 800e384:	d30e      	bcc.n	800e3a4 <__mdiff+0xec>
 800e386:	f10c 0203 	add.w	r2, ip, #3
 800e38a:	1b52      	subs	r2, r2, r5
 800e38c:	f022 0203 	bic.w	r2, r2, #3
 800e390:	3d03      	subs	r5, #3
 800e392:	45ac      	cmp	ip, r5
 800e394:	bf38      	it	cc
 800e396:	2200      	movcc	r2, #0
 800e398:	441a      	add	r2, r3
 800e39a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e39e:	b17b      	cbz	r3, 800e3c0 <__mdiff+0x108>
 800e3a0:	6107      	str	r7, [r0, #16]
 800e3a2:	e7a3      	b.n	800e2ec <__mdiff+0x34>
 800e3a4:	f856 8b04 	ldr.w	r8, [r6], #4
 800e3a8:	fa11 f288 	uxtah	r2, r1, r8
 800e3ac:	1414      	asrs	r4, r2, #16
 800e3ae:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e3b2:	b292      	uxth	r2, r2
 800e3b4:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e3b8:	f84e 2b04 	str.w	r2, [lr], #4
 800e3bc:	1421      	asrs	r1, r4, #16
 800e3be:	e7e0      	b.n	800e382 <__mdiff+0xca>
 800e3c0:	3f01      	subs	r7, #1
 800e3c2:	e7ea      	b.n	800e39a <__mdiff+0xe2>
 800e3c4:	0800fbc1 	.word	0x0800fbc1
 800e3c8:	0800fc4c 	.word	0x0800fc4c

0800e3cc <__ulp>:
 800e3cc:	b082      	sub	sp, #8
 800e3ce:	ed8d 0b00 	vstr	d0, [sp]
 800e3d2:	9b01      	ldr	r3, [sp, #4]
 800e3d4:	4912      	ldr	r1, [pc, #72]	; (800e420 <__ulp+0x54>)
 800e3d6:	4019      	ands	r1, r3
 800e3d8:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e3dc:	2900      	cmp	r1, #0
 800e3de:	dd05      	ble.n	800e3ec <__ulp+0x20>
 800e3e0:	2200      	movs	r2, #0
 800e3e2:	460b      	mov	r3, r1
 800e3e4:	ec43 2b10 	vmov	d0, r2, r3
 800e3e8:	b002      	add	sp, #8
 800e3ea:	4770      	bx	lr
 800e3ec:	4249      	negs	r1, r1
 800e3ee:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e3f2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e3f6:	f04f 0200 	mov.w	r2, #0
 800e3fa:	f04f 0300 	mov.w	r3, #0
 800e3fe:	da04      	bge.n	800e40a <__ulp+0x3e>
 800e400:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e404:	fa41 f300 	asr.w	r3, r1, r0
 800e408:	e7ec      	b.n	800e3e4 <__ulp+0x18>
 800e40a:	f1a0 0114 	sub.w	r1, r0, #20
 800e40e:	291e      	cmp	r1, #30
 800e410:	bfda      	itte	le
 800e412:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e416:	fa20 f101 	lsrle.w	r1, r0, r1
 800e41a:	2101      	movgt	r1, #1
 800e41c:	460a      	mov	r2, r1
 800e41e:	e7e1      	b.n	800e3e4 <__ulp+0x18>
 800e420:	7ff00000 	.word	0x7ff00000

0800e424 <__b2d>:
 800e424:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e426:	6905      	ldr	r5, [r0, #16]
 800e428:	f100 0714 	add.w	r7, r0, #20
 800e42c:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e430:	1f2e      	subs	r6, r5, #4
 800e432:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e436:	4620      	mov	r0, r4
 800e438:	f7ff fd48 	bl	800decc <__hi0bits>
 800e43c:	f1c0 0320 	rsb	r3, r0, #32
 800e440:	280a      	cmp	r0, #10
 800e442:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e4c0 <__b2d+0x9c>
 800e446:	600b      	str	r3, [r1, #0]
 800e448:	dc14      	bgt.n	800e474 <__b2d+0x50>
 800e44a:	f1c0 0e0b 	rsb	lr, r0, #11
 800e44e:	fa24 f10e 	lsr.w	r1, r4, lr
 800e452:	42b7      	cmp	r7, r6
 800e454:	ea41 030c 	orr.w	r3, r1, ip
 800e458:	bf34      	ite	cc
 800e45a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e45e:	2100      	movcs	r1, #0
 800e460:	3015      	adds	r0, #21
 800e462:	fa04 f000 	lsl.w	r0, r4, r0
 800e466:	fa21 f10e 	lsr.w	r1, r1, lr
 800e46a:	ea40 0201 	orr.w	r2, r0, r1
 800e46e:	ec43 2b10 	vmov	d0, r2, r3
 800e472:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e474:	42b7      	cmp	r7, r6
 800e476:	bf3a      	itte	cc
 800e478:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e47c:	f1a5 0608 	subcc.w	r6, r5, #8
 800e480:	2100      	movcs	r1, #0
 800e482:	380b      	subs	r0, #11
 800e484:	d017      	beq.n	800e4b6 <__b2d+0x92>
 800e486:	f1c0 0c20 	rsb	ip, r0, #32
 800e48a:	fa04 f500 	lsl.w	r5, r4, r0
 800e48e:	42be      	cmp	r6, r7
 800e490:	fa21 f40c 	lsr.w	r4, r1, ip
 800e494:	ea45 0504 	orr.w	r5, r5, r4
 800e498:	bf8c      	ite	hi
 800e49a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e49e:	2400      	movls	r4, #0
 800e4a0:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e4a4:	fa01 f000 	lsl.w	r0, r1, r0
 800e4a8:	fa24 f40c 	lsr.w	r4, r4, ip
 800e4ac:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e4b0:	ea40 0204 	orr.w	r2, r0, r4
 800e4b4:	e7db      	b.n	800e46e <__b2d+0x4a>
 800e4b6:	ea44 030c 	orr.w	r3, r4, ip
 800e4ba:	460a      	mov	r2, r1
 800e4bc:	e7d7      	b.n	800e46e <__b2d+0x4a>
 800e4be:	bf00      	nop
 800e4c0:	3ff00000 	.word	0x3ff00000

0800e4c4 <__d2b>:
 800e4c4:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4c8:	4689      	mov	r9, r1
 800e4ca:	2101      	movs	r1, #1
 800e4cc:	ec57 6b10 	vmov	r6, r7, d0
 800e4d0:	4690      	mov	r8, r2
 800e4d2:	f7ff fc09 	bl	800dce8 <_Balloc>
 800e4d6:	4604      	mov	r4, r0
 800e4d8:	b930      	cbnz	r0, 800e4e8 <__d2b+0x24>
 800e4da:	4602      	mov	r2, r0
 800e4dc:	4b25      	ldr	r3, [pc, #148]	; (800e574 <__d2b+0xb0>)
 800e4de:	4826      	ldr	r0, [pc, #152]	; (800e578 <__d2b+0xb4>)
 800e4e0:	f240 310a 	movw	r1, #778	; 0x30a
 800e4e4:	f7fe f9b8 	bl	800c858 <__assert_func>
 800e4e8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e4ec:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e4f0:	bb35      	cbnz	r5, 800e540 <__d2b+0x7c>
 800e4f2:	2e00      	cmp	r6, #0
 800e4f4:	9301      	str	r3, [sp, #4]
 800e4f6:	d028      	beq.n	800e54a <__d2b+0x86>
 800e4f8:	4668      	mov	r0, sp
 800e4fa:	9600      	str	r6, [sp, #0]
 800e4fc:	f7ff fd06 	bl	800df0c <__lo0bits>
 800e500:	9900      	ldr	r1, [sp, #0]
 800e502:	b300      	cbz	r0, 800e546 <__d2b+0x82>
 800e504:	9a01      	ldr	r2, [sp, #4]
 800e506:	f1c0 0320 	rsb	r3, r0, #32
 800e50a:	fa02 f303 	lsl.w	r3, r2, r3
 800e50e:	430b      	orrs	r3, r1
 800e510:	40c2      	lsrs	r2, r0
 800e512:	6163      	str	r3, [r4, #20]
 800e514:	9201      	str	r2, [sp, #4]
 800e516:	9b01      	ldr	r3, [sp, #4]
 800e518:	61a3      	str	r3, [r4, #24]
 800e51a:	2b00      	cmp	r3, #0
 800e51c:	bf14      	ite	ne
 800e51e:	2202      	movne	r2, #2
 800e520:	2201      	moveq	r2, #1
 800e522:	6122      	str	r2, [r4, #16]
 800e524:	b1d5      	cbz	r5, 800e55c <__d2b+0x98>
 800e526:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e52a:	4405      	add	r5, r0
 800e52c:	f8c9 5000 	str.w	r5, [r9]
 800e530:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e534:	f8c8 0000 	str.w	r0, [r8]
 800e538:	4620      	mov	r0, r4
 800e53a:	b003      	add	sp, #12
 800e53c:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e540:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e544:	e7d5      	b.n	800e4f2 <__d2b+0x2e>
 800e546:	6161      	str	r1, [r4, #20]
 800e548:	e7e5      	b.n	800e516 <__d2b+0x52>
 800e54a:	a801      	add	r0, sp, #4
 800e54c:	f7ff fcde 	bl	800df0c <__lo0bits>
 800e550:	9b01      	ldr	r3, [sp, #4]
 800e552:	6163      	str	r3, [r4, #20]
 800e554:	2201      	movs	r2, #1
 800e556:	6122      	str	r2, [r4, #16]
 800e558:	3020      	adds	r0, #32
 800e55a:	e7e3      	b.n	800e524 <__d2b+0x60>
 800e55c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e560:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e564:	f8c9 0000 	str.w	r0, [r9]
 800e568:	6918      	ldr	r0, [r3, #16]
 800e56a:	f7ff fcaf 	bl	800decc <__hi0bits>
 800e56e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e572:	e7df      	b.n	800e534 <__d2b+0x70>
 800e574:	0800fbc1 	.word	0x0800fbc1
 800e578:	0800fc4c 	.word	0x0800fc4c

0800e57c <__ratio>:
 800e57c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e580:	4688      	mov	r8, r1
 800e582:	4669      	mov	r1, sp
 800e584:	4681      	mov	r9, r0
 800e586:	f7ff ff4d 	bl	800e424 <__b2d>
 800e58a:	a901      	add	r1, sp, #4
 800e58c:	4640      	mov	r0, r8
 800e58e:	ec55 4b10 	vmov	r4, r5, d0
 800e592:	f7ff ff47 	bl	800e424 <__b2d>
 800e596:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e59a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e59e:	eba3 0c02 	sub.w	ip, r3, r2
 800e5a2:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e5a6:	1a9b      	subs	r3, r3, r2
 800e5a8:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e5ac:	ec51 0b10 	vmov	r0, r1, d0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	bfd6      	itet	le
 800e5b4:	460a      	movle	r2, r1
 800e5b6:	462a      	movgt	r2, r5
 800e5b8:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e5bc:	468b      	mov	fp, r1
 800e5be:	462f      	mov	r7, r5
 800e5c0:	bfd4      	ite	le
 800e5c2:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e5c6:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e5ca:	4620      	mov	r0, r4
 800e5cc:	ee10 2a10 	vmov	r2, s0
 800e5d0:	465b      	mov	r3, fp
 800e5d2:	4639      	mov	r1, r7
 800e5d4:	f7f2 f93a 	bl	800084c <__aeabi_ddiv>
 800e5d8:	ec41 0b10 	vmov	d0, r0, r1
 800e5dc:	b003      	add	sp, #12
 800e5de:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5e2 <__copybits>:
 800e5e2:	3901      	subs	r1, #1
 800e5e4:	b570      	push	{r4, r5, r6, lr}
 800e5e6:	1149      	asrs	r1, r1, #5
 800e5e8:	6914      	ldr	r4, [r2, #16]
 800e5ea:	3101      	adds	r1, #1
 800e5ec:	f102 0314 	add.w	r3, r2, #20
 800e5f0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e5f4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e5f8:	1f05      	subs	r5, r0, #4
 800e5fa:	42a3      	cmp	r3, r4
 800e5fc:	d30c      	bcc.n	800e618 <__copybits+0x36>
 800e5fe:	1aa3      	subs	r3, r4, r2
 800e600:	3b11      	subs	r3, #17
 800e602:	f023 0303 	bic.w	r3, r3, #3
 800e606:	3211      	adds	r2, #17
 800e608:	42a2      	cmp	r2, r4
 800e60a:	bf88      	it	hi
 800e60c:	2300      	movhi	r3, #0
 800e60e:	4418      	add	r0, r3
 800e610:	2300      	movs	r3, #0
 800e612:	4288      	cmp	r0, r1
 800e614:	d305      	bcc.n	800e622 <__copybits+0x40>
 800e616:	bd70      	pop	{r4, r5, r6, pc}
 800e618:	f853 6b04 	ldr.w	r6, [r3], #4
 800e61c:	f845 6f04 	str.w	r6, [r5, #4]!
 800e620:	e7eb      	b.n	800e5fa <__copybits+0x18>
 800e622:	f840 3b04 	str.w	r3, [r0], #4
 800e626:	e7f4      	b.n	800e612 <__copybits+0x30>

0800e628 <__any_on>:
 800e628:	f100 0214 	add.w	r2, r0, #20
 800e62c:	6900      	ldr	r0, [r0, #16]
 800e62e:	114b      	asrs	r3, r1, #5
 800e630:	4298      	cmp	r0, r3
 800e632:	b510      	push	{r4, lr}
 800e634:	db11      	blt.n	800e65a <__any_on+0x32>
 800e636:	dd0a      	ble.n	800e64e <__any_on+0x26>
 800e638:	f011 011f 	ands.w	r1, r1, #31
 800e63c:	d007      	beq.n	800e64e <__any_on+0x26>
 800e63e:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e642:	fa24 f001 	lsr.w	r0, r4, r1
 800e646:	fa00 f101 	lsl.w	r1, r0, r1
 800e64a:	428c      	cmp	r4, r1
 800e64c:	d10b      	bne.n	800e666 <__any_on+0x3e>
 800e64e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e652:	4293      	cmp	r3, r2
 800e654:	d803      	bhi.n	800e65e <__any_on+0x36>
 800e656:	2000      	movs	r0, #0
 800e658:	bd10      	pop	{r4, pc}
 800e65a:	4603      	mov	r3, r0
 800e65c:	e7f7      	b.n	800e64e <__any_on+0x26>
 800e65e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e662:	2900      	cmp	r1, #0
 800e664:	d0f5      	beq.n	800e652 <__any_on+0x2a>
 800e666:	2001      	movs	r0, #1
 800e668:	e7f6      	b.n	800e658 <__any_on+0x30>

0800e66a <_calloc_r>:
 800e66a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e66c:	fba1 2402 	umull	r2, r4, r1, r2
 800e670:	b94c      	cbnz	r4, 800e686 <_calloc_r+0x1c>
 800e672:	4611      	mov	r1, r2
 800e674:	9201      	str	r2, [sp, #4]
 800e676:	f000 f87b 	bl	800e770 <_malloc_r>
 800e67a:	9a01      	ldr	r2, [sp, #4]
 800e67c:	4605      	mov	r5, r0
 800e67e:	b930      	cbnz	r0, 800e68e <_calloc_r+0x24>
 800e680:	4628      	mov	r0, r5
 800e682:	b003      	add	sp, #12
 800e684:	bd30      	pop	{r4, r5, pc}
 800e686:	220c      	movs	r2, #12
 800e688:	6002      	str	r2, [r0, #0]
 800e68a:	2500      	movs	r5, #0
 800e68c:	e7f8      	b.n	800e680 <_calloc_r+0x16>
 800e68e:	4621      	mov	r1, r4
 800e690:	f7fc fb24 	bl	800acdc <memset>
 800e694:	e7f4      	b.n	800e680 <_calloc_r+0x16>
	...

0800e698 <_free_r>:
 800e698:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e69a:	2900      	cmp	r1, #0
 800e69c:	d044      	beq.n	800e728 <_free_r+0x90>
 800e69e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e6a2:	9001      	str	r0, [sp, #4]
 800e6a4:	2b00      	cmp	r3, #0
 800e6a6:	f1a1 0404 	sub.w	r4, r1, #4
 800e6aa:	bfb8      	it	lt
 800e6ac:	18e4      	addlt	r4, r4, r3
 800e6ae:	f000 fec7 	bl	800f440 <__malloc_lock>
 800e6b2:	4a1e      	ldr	r2, [pc, #120]	; (800e72c <_free_r+0x94>)
 800e6b4:	9801      	ldr	r0, [sp, #4]
 800e6b6:	6813      	ldr	r3, [r2, #0]
 800e6b8:	b933      	cbnz	r3, 800e6c8 <_free_r+0x30>
 800e6ba:	6063      	str	r3, [r4, #4]
 800e6bc:	6014      	str	r4, [r2, #0]
 800e6be:	b003      	add	sp, #12
 800e6c0:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e6c4:	f000 bec2 	b.w	800f44c <__malloc_unlock>
 800e6c8:	42a3      	cmp	r3, r4
 800e6ca:	d908      	bls.n	800e6de <_free_r+0x46>
 800e6cc:	6825      	ldr	r5, [r4, #0]
 800e6ce:	1961      	adds	r1, r4, r5
 800e6d0:	428b      	cmp	r3, r1
 800e6d2:	bf01      	itttt	eq
 800e6d4:	6819      	ldreq	r1, [r3, #0]
 800e6d6:	685b      	ldreq	r3, [r3, #4]
 800e6d8:	1949      	addeq	r1, r1, r5
 800e6da:	6021      	streq	r1, [r4, #0]
 800e6dc:	e7ed      	b.n	800e6ba <_free_r+0x22>
 800e6de:	461a      	mov	r2, r3
 800e6e0:	685b      	ldr	r3, [r3, #4]
 800e6e2:	b10b      	cbz	r3, 800e6e8 <_free_r+0x50>
 800e6e4:	42a3      	cmp	r3, r4
 800e6e6:	d9fa      	bls.n	800e6de <_free_r+0x46>
 800e6e8:	6811      	ldr	r1, [r2, #0]
 800e6ea:	1855      	adds	r5, r2, r1
 800e6ec:	42a5      	cmp	r5, r4
 800e6ee:	d10b      	bne.n	800e708 <_free_r+0x70>
 800e6f0:	6824      	ldr	r4, [r4, #0]
 800e6f2:	4421      	add	r1, r4
 800e6f4:	1854      	adds	r4, r2, r1
 800e6f6:	42a3      	cmp	r3, r4
 800e6f8:	6011      	str	r1, [r2, #0]
 800e6fa:	d1e0      	bne.n	800e6be <_free_r+0x26>
 800e6fc:	681c      	ldr	r4, [r3, #0]
 800e6fe:	685b      	ldr	r3, [r3, #4]
 800e700:	6053      	str	r3, [r2, #4]
 800e702:	4421      	add	r1, r4
 800e704:	6011      	str	r1, [r2, #0]
 800e706:	e7da      	b.n	800e6be <_free_r+0x26>
 800e708:	d902      	bls.n	800e710 <_free_r+0x78>
 800e70a:	230c      	movs	r3, #12
 800e70c:	6003      	str	r3, [r0, #0]
 800e70e:	e7d6      	b.n	800e6be <_free_r+0x26>
 800e710:	6825      	ldr	r5, [r4, #0]
 800e712:	1961      	adds	r1, r4, r5
 800e714:	428b      	cmp	r3, r1
 800e716:	bf04      	itt	eq
 800e718:	6819      	ldreq	r1, [r3, #0]
 800e71a:	685b      	ldreq	r3, [r3, #4]
 800e71c:	6063      	str	r3, [r4, #4]
 800e71e:	bf04      	itt	eq
 800e720:	1949      	addeq	r1, r1, r5
 800e722:	6021      	streq	r1, [r4, #0]
 800e724:	6054      	str	r4, [r2, #4]
 800e726:	e7ca      	b.n	800e6be <_free_r+0x26>
 800e728:	b003      	add	sp, #12
 800e72a:	bd30      	pop	{r4, r5, pc}
 800e72c:	20000570 	.word	0x20000570

0800e730 <sbrk_aligned>:
 800e730:	b570      	push	{r4, r5, r6, lr}
 800e732:	4e0e      	ldr	r6, [pc, #56]	; (800e76c <sbrk_aligned+0x3c>)
 800e734:	460c      	mov	r4, r1
 800e736:	6831      	ldr	r1, [r6, #0]
 800e738:	4605      	mov	r5, r0
 800e73a:	b911      	cbnz	r1, 800e742 <sbrk_aligned+0x12>
 800e73c:	f000 fb4c 	bl	800edd8 <_sbrk_r>
 800e740:	6030      	str	r0, [r6, #0]
 800e742:	4621      	mov	r1, r4
 800e744:	4628      	mov	r0, r5
 800e746:	f000 fb47 	bl	800edd8 <_sbrk_r>
 800e74a:	1c43      	adds	r3, r0, #1
 800e74c:	d00a      	beq.n	800e764 <sbrk_aligned+0x34>
 800e74e:	1cc4      	adds	r4, r0, #3
 800e750:	f024 0403 	bic.w	r4, r4, #3
 800e754:	42a0      	cmp	r0, r4
 800e756:	d007      	beq.n	800e768 <sbrk_aligned+0x38>
 800e758:	1a21      	subs	r1, r4, r0
 800e75a:	4628      	mov	r0, r5
 800e75c:	f000 fb3c 	bl	800edd8 <_sbrk_r>
 800e760:	3001      	adds	r0, #1
 800e762:	d101      	bne.n	800e768 <sbrk_aligned+0x38>
 800e764:	f04f 34ff 	mov.w	r4, #4294967295
 800e768:	4620      	mov	r0, r4
 800e76a:	bd70      	pop	{r4, r5, r6, pc}
 800e76c:	20000574 	.word	0x20000574

0800e770 <_malloc_r>:
 800e770:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e774:	1ccd      	adds	r5, r1, #3
 800e776:	f025 0503 	bic.w	r5, r5, #3
 800e77a:	3508      	adds	r5, #8
 800e77c:	2d0c      	cmp	r5, #12
 800e77e:	bf38      	it	cc
 800e780:	250c      	movcc	r5, #12
 800e782:	2d00      	cmp	r5, #0
 800e784:	4607      	mov	r7, r0
 800e786:	db01      	blt.n	800e78c <_malloc_r+0x1c>
 800e788:	42a9      	cmp	r1, r5
 800e78a:	d905      	bls.n	800e798 <_malloc_r+0x28>
 800e78c:	230c      	movs	r3, #12
 800e78e:	603b      	str	r3, [r7, #0]
 800e790:	2600      	movs	r6, #0
 800e792:	4630      	mov	r0, r6
 800e794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e798:	4e2e      	ldr	r6, [pc, #184]	; (800e854 <_malloc_r+0xe4>)
 800e79a:	f000 fe51 	bl	800f440 <__malloc_lock>
 800e79e:	6833      	ldr	r3, [r6, #0]
 800e7a0:	461c      	mov	r4, r3
 800e7a2:	bb34      	cbnz	r4, 800e7f2 <_malloc_r+0x82>
 800e7a4:	4629      	mov	r1, r5
 800e7a6:	4638      	mov	r0, r7
 800e7a8:	f7ff ffc2 	bl	800e730 <sbrk_aligned>
 800e7ac:	1c43      	adds	r3, r0, #1
 800e7ae:	4604      	mov	r4, r0
 800e7b0:	d14d      	bne.n	800e84e <_malloc_r+0xde>
 800e7b2:	6834      	ldr	r4, [r6, #0]
 800e7b4:	4626      	mov	r6, r4
 800e7b6:	2e00      	cmp	r6, #0
 800e7b8:	d140      	bne.n	800e83c <_malloc_r+0xcc>
 800e7ba:	6823      	ldr	r3, [r4, #0]
 800e7bc:	4631      	mov	r1, r6
 800e7be:	4638      	mov	r0, r7
 800e7c0:	eb04 0803 	add.w	r8, r4, r3
 800e7c4:	f000 fb08 	bl	800edd8 <_sbrk_r>
 800e7c8:	4580      	cmp	r8, r0
 800e7ca:	d13a      	bne.n	800e842 <_malloc_r+0xd2>
 800e7cc:	6821      	ldr	r1, [r4, #0]
 800e7ce:	3503      	adds	r5, #3
 800e7d0:	1a6d      	subs	r5, r5, r1
 800e7d2:	f025 0503 	bic.w	r5, r5, #3
 800e7d6:	3508      	adds	r5, #8
 800e7d8:	2d0c      	cmp	r5, #12
 800e7da:	bf38      	it	cc
 800e7dc:	250c      	movcc	r5, #12
 800e7de:	4629      	mov	r1, r5
 800e7e0:	4638      	mov	r0, r7
 800e7e2:	f7ff ffa5 	bl	800e730 <sbrk_aligned>
 800e7e6:	3001      	adds	r0, #1
 800e7e8:	d02b      	beq.n	800e842 <_malloc_r+0xd2>
 800e7ea:	6823      	ldr	r3, [r4, #0]
 800e7ec:	442b      	add	r3, r5
 800e7ee:	6023      	str	r3, [r4, #0]
 800e7f0:	e00e      	b.n	800e810 <_malloc_r+0xa0>
 800e7f2:	6822      	ldr	r2, [r4, #0]
 800e7f4:	1b52      	subs	r2, r2, r5
 800e7f6:	d41e      	bmi.n	800e836 <_malloc_r+0xc6>
 800e7f8:	2a0b      	cmp	r2, #11
 800e7fa:	d916      	bls.n	800e82a <_malloc_r+0xba>
 800e7fc:	1961      	adds	r1, r4, r5
 800e7fe:	42a3      	cmp	r3, r4
 800e800:	6025      	str	r5, [r4, #0]
 800e802:	bf18      	it	ne
 800e804:	6059      	strne	r1, [r3, #4]
 800e806:	6863      	ldr	r3, [r4, #4]
 800e808:	bf08      	it	eq
 800e80a:	6031      	streq	r1, [r6, #0]
 800e80c:	5162      	str	r2, [r4, r5]
 800e80e:	604b      	str	r3, [r1, #4]
 800e810:	4638      	mov	r0, r7
 800e812:	f104 060b 	add.w	r6, r4, #11
 800e816:	f000 fe19 	bl	800f44c <__malloc_unlock>
 800e81a:	f026 0607 	bic.w	r6, r6, #7
 800e81e:	1d23      	adds	r3, r4, #4
 800e820:	1af2      	subs	r2, r6, r3
 800e822:	d0b6      	beq.n	800e792 <_malloc_r+0x22>
 800e824:	1b9b      	subs	r3, r3, r6
 800e826:	50a3      	str	r3, [r4, r2]
 800e828:	e7b3      	b.n	800e792 <_malloc_r+0x22>
 800e82a:	6862      	ldr	r2, [r4, #4]
 800e82c:	42a3      	cmp	r3, r4
 800e82e:	bf0c      	ite	eq
 800e830:	6032      	streq	r2, [r6, #0]
 800e832:	605a      	strne	r2, [r3, #4]
 800e834:	e7ec      	b.n	800e810 <_malloc_r+0xa0>
 800e836:	4623      	mov	r3, r4
 800e838:	6864      	ldr	r4, [r4, #4]
 800e83a:	e7b2      	b.n	800e7a2 <_malloc_r+0x32>
 800e83c:	4634      	mov	r4, r6
 800e83e:	6876      	ldr	r6, [r6, #4]
 800e840:	e7b9      	b.n	800e7b6 <_malloc_r+0x46>
 800e842:	230c      	movs	r3, #12
 800e844:	603b      	str	r3, [r7, #0]
 800e846:	4638      	mov	r0, r7
 800e848:	f000 fe00 	bl	800f44c <__malloc_unlock>
 800e84c:	e7a1      	b.n	800e792 <_malloc_r+0x22>
 800e84e:	6025      	str	r5, [r4, #0]
 800e850:	e7de      	b.n	800e810 <_malloc_r+0xa0>
 800e852:	bf00      	nop
 800e854:	20000570 	.word	0x20000570

0800e858 <__ssputs_r>:
 800e858:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e85c:	688e      	ldr	r6, [r1, #8]
 800e85e:	429e      	cmp	r6, r3
 800e860:	4682      	mov	sl, r0
 800e862:	460c      	mov	r4, r1
 800e864:	4690      	mov	r8, r2
 800e866:	461f      	mov	r7, r3
 800e868:	d838      	bhi.n	800e8dc <__ssputs_r+0x84>
 800e86a:	898a      	ldrh	r2, [r1, #12]
 800e86c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e870:	d032      	beq.n	800e8d8 <__ssputs_r+0x80>
 800e872:	6825      	ldr	r5, [r4, #0]
 800e874:	6909      	ldr	r1, [r1, #16]
 800e876:	eba5 0901 	sub.w	r9, r5, r1
 800e87a:	6965      	ldr	r5, [r4, #20]
 800e87c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e880:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e884:	3301      	adds	r3, #1
 800e886:	444b      	add	r3, r9
 800e888:	106d      	asrs	r5, r5, #1
 800e88a:	429d      	cmp	r5, r3
 800e88c:	bf38      	it	cc
 800e88e:	461d      	movcc	r5, r3
 800e890:	0553      	lsls	r3, r2, #21
 800e892:	d531      	bpl.n	800e8f8 <__ssputs_r+0xa0>
 800e894:	4629      	mov	r1, r5
 800e896:	f7ff ff6b 	bl	800e770 <_malloc_r>
 800e89a:	4606      	mov	r6, r0
 800e89c:	b950      	cbnz	r0, 800e8b4 <__ssputs_r+0x5c>
 800e89e:	230c      	movs	r3, #12
 800e8a0:	f8ca 3000 	str.w	r3, [sl]
 800e8a4:	89a3      	ldrh	r3, [r4, #12]
 800e8a6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e8aa:	81a3      	strh	r3, [r4, #12]
 800e8ac:	f04f 30ff 	mov.w	r0, #4294967295
 800e8b0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e8b4:	6921      	ldr	r1, [r4, #16]
 800e8b6:	464a      	mov	r2, r9
 800e8b8:	f7ff fa08 	bl	800dccc <memcpy>
 800e8bc:	89a3      	ldrh	r3, [r4, #12]
 800e8be:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e8c2:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e8c6:	81a3      	strh	r3, [r4, #12]
 800e8c8:	6126      	str	r6, [r4, #16]
 800e8ca:	6165      	str	r5, [r4, #20]
 800e8cc:	444e      	add	r6, r9
 800e8ce:	eba5 0509 	sub.w	r5, r5, r9
 800e8d2:	6026      	str	r6, [r4, #0]
 800e8d4:	60a5      	str	r5, [r4, #8]
 800e8d6:	463e      	mov	r6, r7
 800e8d8:	42be      	cmp	r6, r7
 800e8da:	d900      	bls.n	800e8de <__ssputs_r+0x86>
 800e8dc:	463e      	mov	r6, r7
 800e8de:	6820      	ldr	r0, [r4, #0]
 800e8e0:	4632      	mov	r2, r6
 800e8e2:	4641      	mov	r1, r8
 800e8e4:	f000 fd92 	bl	800f40c <memmove>
 800e8e8:	68a3      	ldr	r3, [r4, #8]
 800e8ea:	1b9b      	subs	r3, r3, r6
 800e8ec:	60a3      	str	r3, [r4, #8]
 800e8ee:	6823      	ldr	r3, [r4, #0]
 800e8f0:	4433      	add	r3, r6
 800e8f2:	6023      	str	r3, [r4, #0]
 800e8f4:	2000      	movs	r0, #0
 800e8f6:	e7db      	b.n	800e8b0 <__ssputs_r+0x58>
 800e8f8:	462a      	mov	r2, r5
 800e8fa:	f000 fdad 	bl	800f458 <_realloc_r>
 800e8fe:	4606      	mov	r6, r0
 800e900:	2800      	cmp	r0, #0
 800e902:	d1e1      	bne.n	800e8c8 <__ssputs_r+0x70>
 800e904:	6921      	ldr	r1, [r4, #16]
 800e906:	4650      	mov	r0, sl
 800e908:	f7ff fec6 	bl	800e698 <_free_r>
 800e90c:	e7c7      	b.n	800e89e <__ssputs_r+0x46>
	...

0800e910 <_svfiprintf_r>:
 800e910:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e914:	4698      	mov	r8, r3
 800e916:	898b      	ldrh	r3, [r1, #12]
 800e918:	061b      	lsls	r3, r3, #24
 800e91a:	b09d      	sub	sp, #116	; 0x74
 800e91c:	4607      	mov	r7, r0
 800e91e:	460d      	mov	r5, r1
 800e920:	4614      	mov	r4, r2
 800e922:	d50e      	bpl.n	800e942 <_svfiprintf_r+0x32>
 800e924:	690b      	ldr	r3, [r1, #16]
 800e926:	b963      	cbnz	r3, 800e942 <_svfiprintf_r+0x32>
 800e928:	2140      	movs	r1, #64	; 0x40
 800e92a:	f7ff ff21 	bl	800e770 <_malloc_r>
 800e92e:	6028      	str	r0, [r5, #0]
 800e930:	6128      	str	r0, [r5, #16]
 800e932:	b920      	cbnz	r0, 800e93e <_svfiprintf_r+0x2e>
 800e934:	230c      	movs	r3, #12
 800e936:	603b      	str	r3, [r7, #0]
 800e938:	f04f 30ff 	mov.w	r0, #4294967295
 800e93c:	e0d1      	b.n	800eae2 <_svfiprintf_r+0x1d2>
 800e93e:	2340      	movs	r3, #64	; 0x40
 800e940:	616b      	str	r3, [r5, #20]
 800e942:	2300      	movs	r3, #0
 800e944:	9309      	str	r3, [sp, #36]	; 0x24
 800e946:	2320      	movs	r3, #32
 800e948:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e94c:	f8cd 800c 	str.w	r8, [sp, #12]
 800e950:	2330      	movs	r3, #48	; 0x30
 800e952:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800eafc <_svfiprintf_r+0x1ec>
 800e956:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e95a:	f04f 0901 	mov.w	r9, #1
 800e95e:	4623      	mov	r3, r4
 800e960:	469a      	mov	sl, r3
 800e962:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e966:	b10a      	cbz	r2, 800e96c <_svfiprintf_r+0x5c>
 800e968:	2a25      	cmp	r2, #37	; 0x25
 800e96a:	d1f9      	bne.n	800e960 <_svfiprintf_r+0x50>
 800e96c:	ebba 0b04 	subs.w	fp, sl, r4
 800e970:	d00b      	beq.n	800e98a <_svfiprintf_r+0x7a>
 800e972:	465b      	mov	r3, fp
 800e974:	4622      	mov	r2, r4
 800e976:	4629      	mov	r1, r5
 800e978:	4638      	mov	r0, r7
 800e97a:	f7ff ff6d 	bl	800e858 <__ssputs_r>
 800e97e:	3001      	adds	r0, #1
 800e980:	f000 80aa 	beq.w	800ead8 <_svfiprintf_r+0x1c8>
 800e984:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e986:	445a      	add	r2, fp
 800e988:	9209      	str	r2, [sp, #36]	; 0x24
 800e98a:	f89a 3000 	ldrb.w	r3, [sl]
 800e98e:	2b00      	cmp	r3, #0
 800e990:	f000 80a2 	beq.w	800ead8 <_svfiprintf_r+0x1c8>
 800e994:	2300      	movs	r3, #0
 800e996:	f04f 32ff 	mov.w	r2, #4294967295
 800e99a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e99e:	f10a 0a01 	add.w	sl, sl, #1
 800e9a2:	9304      	str	r3, [sp, #16]
 800e9a4:	9307      	str	r3, [sp, #28]
 800e9a6:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e9aa:	931a      	str	r3, [sp, #104]	; 0x68
 800e9ac:	4654      	mov	r4, sl
 800e9ae:	2205      	movs	r2, #5
 800e9b0:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e9b4:	4851      	ldr	r0, [pc, #324]	; (800eafc <_svfiprintf_r+0x1ec>)
 800e9b6:	f7f1 fc13 	bl	80001e0 <memchr>
 800e9ba:	9a04      	ldr	r2, [sp, #16]
 800e9bc:	b9d8      	cbnz	r0, 800e9f6 <_svfiprintf_r+0xe6>
 800e9be:	06d0      	lsls	r0, r2, #27
 800e9c0:	bf44      	itt	mi
 800e9c2:	2320      	movmi	r3, #32
 800e9c4:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9c8:	0711      	lsls	r1, r2, #28
 800e9ca:	bf44      	itt	mi
 800e9cc:	232b      	movmi	r3, #43	; 0x2b
 800e9ce:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9d2:	f89a 3000 	ldrb.w	r3, [sl]
 800e9d6:	2b2a      	cmp	r3, #42	; 0x2a
 800e9d8:	d015      	beq.n	800ea06 <_svfiprintf_r+0xf6>
 800e9da:	9a07      	ldr	r2, [sp, #28]
 800e9dc:	4654      	mov	r4, sl
 800e9de:	2000      	movs	r0, #0
 800e9e0:	f04f 0c0a 	mov.w	ip, #10
 800e9e4:	4621      	mov	r1, r4
 800e9e6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9ea:	3b30      	subs	r3, #48	; 0x30
 800e9ec:	2b09      	cmp	r3, #9
 800e9ee:	d94e      	bls.n	800ea8e <_svfiprintf_r+0x17e>
 800e9f0:	b1b0      	cbz	r0, 800ea20 <_svfiprintf_r+0x110>
 800e9f2:	9207      	str	r2, [sp, #28]
 800e9f4:	e014      	b.n	800ea20 <_svfiprintf_r+0x110>
 800e9f6:	eba0 0308 	sub.w	r3, r0, r8
 800e9fa:	fa09 f303 	lsl.w	r3, r9, r3
 800e9fe:	4313      	orrs	r3, r2
 800ea00:	9304      	str	r3, [sp, #16]
 800ea02:	46a2      	mov	sl, r4
 800ea04:	e7d2      	b.n	800e9ac <_svfiprintf_r+0x9c>
 800ea06:	9b03      	ldr	r3, [sp, #12]
 800ea08:	1d19      	adds	r1, r3, #4
 800ea0a:	681b      	ldr	r3, [r3, #0]
 800ea0c:	9103      	str	r1, [sp, #12]
 800ea0e:	2b00      	cmp	r3, #0
 800ea10:	bfbb      	ittet	lt
 800ea12:	425b      	neglt	r3, r3
 800ea14:	f042 0202 	orrlt.w	r2, r2, #2
 800ea18:	9307      	strge	r3, [sp, #28]
 800ea1a:	9307      	strlt	r3, [sp, #28]
 800ea1c:	bfb8      	it	lt
 800ea1e:	9204      	strlt	r2, [sp, #16]
 800ea20:	7823      	ldrb	r3, [r4, #0]
 800ea22:	2b2e      	cmp	r3, #46	; 0x2e
 800ea24:	d10c      	bne.n	800ea40 <_svfiprintf_r+0x130>
 800ea26:	7863      	ldrb	r3, [r4, #1]
 800ea28:	2b2a      	cmp	r3, #42	; 0x2a
 800ea2a:	d135      	bne.n	800ea98 <_svfiprintf_r+0x188>
 800ea2c:	9b03      	ldr	r3, [sp, #12]
 800ea2e:	1d1a      	adds	r2, r3, #4
 800ea30:	681b      	ldr	r3, [r3, #0]
 800ea32:	9203      	str	r2, [sp, #12]
 800ea34:	2b00      	cmp	r3, #0
 800ea36:	bfb8      	it	lt
 800ea38:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea3c:	3402      	adds	r4, #2
 800ea3e:	9305      	str	r3, [sp, #20]
 800ea40:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eb0c <_svfiprintf_r+0x1fc>
 800ea44:	7821      	ldrb	r1, [r4, #0]
 800ea46:	2203      	movs	r2, #3
 800ea48:	4650      	mov	r0, sl
 800ea4a:	f7f1 fbc9 	bl	80001e0 <memchr>
 800ea4e:	b140      	cbz	r0, 800ea62 <_svfiprintf_r+0x152>
 800ea50:	2340      	movs	r3, #64	; 0x40
 800ea52:	eba0 000a 	sub.w	r0, r0, sl
 800ea56:	fa03 f000 	lsl.w	r0, r3, r0
 800ea5a:	9b04      	ldr	r3, [sp, #16]
 800ea5c:	4303      	orrs	r3, r0
 800ea5e:	3401      	adds	r4, #1
 800ea60:	9304      	str	r3, [sp, #16]
 800ea62:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea66:	4826      	ldr	r0, [pc, #152]	; (800eb00 <_svfiprintf_r+0x1f0>)
 800ea68:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea6c:	2206      	movs	r2, #6
 800ea6e:	f7f1 fbb7 	bl	80001e0 <memchr>
 800ea72:	2800      	cmp	r0, #0
 800ea74:	d038      	beq.n	800eae8 <_svfiprintf_r+0x1d8>
 800ea76:	4b23      	ldr	r3, [pc, #140]	; (800eb04 <_svfiprintf_r+0x1f4>)
 800ea78:	bb1b      	cbnz	r3, 800eac2 <_svfiprintf_r+0x1b2>
 800ea7a:	9b03      	ldr	r3, [sp, #12]
 800ea7c:	3307      	adds	r3, #7
 800ea7e:	f023 0307 	bic.w	r3, r3, #7
 800ea82:	3308      	adds	r3, #8
 800ea84:	9303      	str	r3, [sp, #12]
 800ea86:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea88:	4433      	add	r3, r6
 800ea8a:	9309      	str	r3, [sp, #36]	; 0x24
 800ea8c:	e767      	b.n	800e95e <_svfiprintf_r+0x4e>
 800ea8e:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea92:	460c      	mov	r4, r1
 800ea94:	2001      	movs	r0, #1
 800ea96:	e7a5      	b.n	800e9e4 <_svfiprintf_r+0xd4>
 800ea98:	2300      	movs	r3, #0
 800ea9a:	3401      	adds	r4, #1
 800ea9c:	9305      	str	r3, [sp, #20]
 800ea9e:	4619      	mov	r1, r3
 800eaa0:	f04f 0c0a 	mov.w	ip, #10
 800eaa4:	4620      	mov	r0, r4
 800eaa6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800eaaa:	3a30      	subs	r2, #48	; 0x30
 800eaac:	2a09      	cmp	r2, #9
 800eaae:	d903      	bls.n	800eab8 <_svfiprintf_r+0x1a8>
 800eab0:	2b00      	cmp	r3, #0
 800eab2:	d0c5      	beq.n	800ea40 <_svfiprintf_r+0x130>
 800eab4:	9105      	str	r1, [sp, #20]
 800eab6:	e7c3      	b.n	800ea40 <_svfiprintf_r+0x130>
 800eab8:	fb0c 2101 	mla	r1, ip, r1, r2
 800eabc:	4604      	mov	r4, r0
 800eabe:	2301      	movs	r3, #1
 800eac0:	e7f0      	b.n	800eaa4 <_svfiprintf_r+0x194>
 800eac2:	ab03      	add	r3, sp, #12
 800eac4:	9300      	str	r3, [sp, #0]
 800eac6:	462a      	mov	r2, r5
 800eac8:	4b0f      	ldr	r3, [pc, #60]	; (800eb08 <_svfiprintf_r+0x1f8>)
 800eaca:	a904      	add	r1, sp, #16
 800eacc:	4638      	mov	r0, r7
 800eace:	f7fc f9ad 	bl	800ae2c <_printf_float>
 800ead2:	1c42      	adds	r2, r0, #1
 800ead4:	4606      	mov	r6, r0
 800ead6:	d1d6      	bne.n	800ea86 <_svfiprintf_r+0x176>
 800ead8:	89ab      	ldrh	r3, [r5, #12]
 800eada:	065b      	lsls	r3, r3, #25
 800eadc:	f53f af2c 	bmi.w	800e938 <_svfiprintf_r+0x28>
 800eae0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eae2:	b01d      	add	sp, #116	; 0x74
 800eae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eae8:	ab03      	add	r3, sp, #12
 800eaea:	9300      	str	r3, [sp, #0]
 800eaec:	462a      	mov	r2, r5
 800eaee:	4b06      	ldr	r3, [pc, #24]	; (800eb08 <_svfiprintf_r+0x1f8>)
 800eaf0:	a904      	add	r1, sp, #16
 800eaf2:	4638      	mov	r0, r7
 800eaf4:	f7fc fc3e 	bl	800b374 <_printf_i>
 800eaf8:	e7eb      	b.n	800ead2 <_svfiprintf_r+0x1c2>
 800eafa:	bf00      	nop
 800eafc:	0800fda4 	.word	0x0800fda4
 800eb00:	0800fdae 	.word	0x0800fdae
 800eb04:	0800ae2d 	.word	0x0800ae2d
 800eb08:	0800e859 	.word	0x0800e859
 800eb0c:	0800fdaa 	.word	0x0800fdaa

0800eb10 <__sfputc_r>:
 800eb10:	6893      	ldr	r3, [r2, #8]
 800eb12:	3b01      	subs	r3, #1
 800eb14:	2b00      	cmp	r3, #0
 800eb16:	b410      	push	{r4}
 800eb18:	6093      	str	r3, [r2, #8]
 800eb1a:	da08      	bge.n	800eb2e <__sfputc_r+0x1e>
 800eb1c:	6994      	ldr	r4, [r2, #24]
 800eb1e:	42a3      	cmp	r3, r4
 800eb20:	db01      	blt.n	800eb26 <__sfputc_r+0x16>
 800eb22:	290a      	cmp	r1, #10
 800eb24:	d103      	bne.n	800eb2e <__sfputc_r+0x1e>
 800eb26:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb2a:	f000 b979 	b.w	800ee20 <__swbuf_r>
 800eb2e:	6813      	ldr	r3, [r2, #0]
 800eb30:	1c58      	adds	r0, r3, #1
 800eb32:	6010      	str	r0, [r2, #0]
 800eb34:	7019      	strb	r1, [r3, #0]
 800eb36:	4608      	mov	r0, r1
 800eb38:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb3c:	4770      	bx	lr

0800eb3e <__sfputs_r>:
 800eb3e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb40:	4606      	mov	r6, r0
 800eb42:	460f      	mov	r7, r1
 800eb44:	4614      	mov	r4, r2
 800eb46:	18d5      	adds	r5, r2, r3
 800eb48:	42ac      	cmp	r4, r5
 800eb4a:	d101      	bne.n	800eb50 <__sfputs_r+0x12>
 800eb4c:	2000      	movs	r0, #0
 800eb4e:	e007      	b.n	800eb60 <__sfputs_r+0x22>
 800eb50:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb54:	463a      	mov	r2, r7
 800eb56:	4630      	mov	r0, r6
 800eb58:	f7ff ffda 	bl	800eb10 <__sfputc_r>
 800eb5c:	1c43      	adds	r3, r0, #1
 800eb5e:	d1f3      	bne.n	800eb48 <__sfputs_r+0xa>
 800eb60:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb64 <_vfiprintf_r>:
 800eb64:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb68:	460d      	mov	r5, r1
 800eb6a:	b09d      	sub	sp, #116	; 0x74
 800eb6c:	4614      	mov	r4, r2
 800eb6e:	4698      	mov	r8, r3
 800eb70:	4606      	mov	r6, r0
 800eb72:	b118      	cbz	r0, 800eb7c <_vfiprintf_r+0x18>
 800eb74:	6983      	ldr	r3, [r0, #24]
 800eb76:	b90b      	cbnz	r3, 800eb7c <_vfiprintf_r+0x18>
 800eb78:	f000 fb42 	bl	800f200 <__sinit>
 800eb7c:	4b89      	ldr	r3, [pc, #548]	; (800eda4 <_vfiprintf_r+0x240>)
 800eb7e:	429d      	cmp	r5, r3
 800eb80:	d11b      	bne.n	800ebba <_vfiprintf_r+0x56>
 800eb82:	6875      	ldr	r5, [r6, #4]
 800eb84:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb86:	07d9      	lsls	r1, r3, #31
 800eb88:	d405      	bmi.n	800eb96 <_vfiprintf_r+0x32>
 800eb8a:	89ab      	ldrh	r3, [r5, #12]
 800eb8c:	059a      	lsls	r2, r3, #22
 800eb8e:	d402      	bmi.n	800eb96 <_vfiprintf_r+0x32>
 800eb90:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb92:	f000 fbd3 	bl	800f33c <__retarget_lock_acquire_recursive>
 800eb96:	89ab      	ldrh	r3, [r5, #12]
 800eb98:	071b      	lsls	r3, r3, #28
 800eb9a:	d501      	bpl.n	800eba0 <_vfiprintf_r+0x3c>
 800eb9c:	692b      	ldr	r3, [r5, #16]
 800eb9e:	b9eb      	cbnz	r3, 800ebdc <_vfiprintf_r+0x78>
 800eba0:	4629      	mov	r1, r5
 800eba2:	4630      	mov	r0, r6
 800eba4:	f000 f99c 	bl	800eee0 <__swsetup_r>
 800eba8:	b1c0      	cbz	r0, 800ebdc <_vfiprintf_r+0x78>
 800ebaa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ebac:	07dc      	lsls	r4, r3, #31
 800ebae:	d50e      	bpl.n	800ebce <_vfiprintf_r+0x6a>
 800ebb0:	f04f 30ff 	mov.w	r0, #4294967295
 800ebb4:	b01d      	add	sp, #116	; 0x74
 800ebb6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ebba:	4b7b      	ldr	r3, [pc, #492]	; (800eda8 <_vfiprintf_r+0x244>)
 800ebbc:	429d      	cmp	r5, r3
 800ebbe:	d101      	bne.n	800ebc4 <_vfiprintf_r+0x60>
 800ebc0:	68b5      	ldr	r5, [r6, #8]
 800ebc2:	e7df      	b.n	800eb84 <_vfiprintf_r+0x20>
 800ebc4:	4b79      	ldr	r3, [pc, #484]	; (800edac <_vfiprintf_r+0x248>)
 800ebc6:	429d      	cmp	r5, r3
 800ebc8:	bf08      	it	eq
 800ebca:	68f5      	ldreq	r5, [r6, #12]
 800ebcc:	e7da      	b.n	800eb84 <_vfiprintf_r+0x20>
 800ebce:	89ab      	ldrh	r3, [r5, #12]
 800ebd0:	0598      	lsls	r0, r3, #22
 800ebd2:	d4ed      	bmi.n	800ebb0 <_vfiprintf_r+0x4c>
 800ebd4:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebd6:	f000 fbb2 	bl	800f33e <__retarget_lock_release_recursive>
 800ebda:	e7e9      	b.n	800ebb0 <_vfiprintf_r+0x4c>
 800ebdc:	2300      	movs	r3, #0
 800ebde:	9309      	str	r3, [sp, #36]	; 0x24
 800ebe0:	2320      	movs	r3, #32
 800ebe2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebe6:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebea:	2330      	movs	r3, #48	; 0x30
 800ebec:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800edb0 <_vfiprintf_r+0x24c>
 800ebf0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebf4:	f04f 0901 	mov.w	r9, #1
 800ebf8:	4623      	mov	r3, r4
 800ebfa:	469a      	mov	sl, r3
 800ebfc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ec00:	b10a      	cbz	r2, 800ec06 <_vfiprintf_r+0xa2>
 800ec02:	2a25      	cmp	r2, #37	; 0x25
 800ec04:	d1f9      	bne.n	800ebfa <_vfiprintf_r+0x96>
 800ec06:	ebba 0b04 	subs.w	fp, sl, r4
 800ec0a:	d00b      	beq.n	800ec24 <_vfiprintf_r+0xc0>
 800ec0c:	465b      	mov	r3, fp
 800ec0e:	4622      	mov	r2, r4
 800ec10:	4629      	mov	r1, r5
 800ec12:	4630      	mov	r0, r6
 800ec14:	f7ff ff93 	bl	800eb3e <__sfputs_r>
 800ec18:	3001      	adds	r0, #1
 800ec1a:	f000 80aa 	beq.w	800ed72 <_vfiprintf_r+0x20e>
 800ec1e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ec20:	445a      	add	r2, fp
 800ec22:	9209      	str	r2, [sp, #36]	; 0x24
 800ec24:	f89a 3000 	ldrb.w	r3, [sl]
 800ec28:	2b00      	cmp	r3, #0
 800ec2a:	f000 80a2 	beq.w	800ed72 <_vfiprintf_r+0x20e>
 800ec2e:	2300      	movs	r3, #0
 800ec30:	f04f 32ff 	mov.w	r2, #4294967295
 800ec34:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec38:	f10a 0a01 	add.w	sl, sl, #1
 800ec3c:	9304      	str	r3, [sp, #16]
 800ec3e:	9307      	str	r3, [sp, #28]
 800ec40:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec44:	931a      	str	r3, [sp, #104]	; 0x68
 800ec46:	4654      	mov	r4, sl
 800ec48:	2205      	movs	r2, #5
 800ec4a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec4e:	4858      	ldr	r0, [pc, #352]	; (800edb0 <_vfiprintf_r+0x24c>)
 800ec50:	f7f1 fac6 	bl	80001e0 <memchr>
 800ec54:	9a04      	ldr	r2, [sp, #16]
 800ec56:	b9d8      	cbnz	r0, 800ec90 <_vfiprintf_r+0x12c>
 800ec58:	06d1      	lsls	r1, r2, #27
 800ec5a:	bf44      	itt	mi
 800ec5c:	2320      	movmi	r3, #32
 800ec5e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec62:	0713      	lsls	r3, r2, #28
 800ec64:	bf44      	itt	mi
 800ec66:	232b      	movmi	r3, #43	; 0x2b
 800ec68:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec6c:	f89a 3000 	ldrb.w	r3, [sl]
 800ec70:	2b2a      	cmp	r3, #42	; 0x2a
 800ec72:	d015      	beq.n	800eca0 <_vfiprintf_r+0x13c>
 800ec74:	9a07      	ldr	r2, [sp, #28]
 800ec76:	4654      	mov	r4, sl
 800ec78:	2000      	movs	r0, #0
 800ec7a:	f04f 0c0a 	mov.w	ip, #10
 800ec7e:	4621      	mov	r1, r4
 800ec80:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec84:	3b30      	subs	r3, #48	; 0x30
 800ec86:	2b09      	cmp	r3, #9
 800ec88:	d94e      	bls.n	800ed28 <_vfiprintf_r+0x1c4>
 800ec8a:	b1b0      	cbz	r0, 800ecba <_vfiprintf_r+0x156>
 800ec8c:	9207      	str	r2, [sp, #28]
 800ec8e:	e014      	b.n	800ecba <_vfiprintf_r+0x156>
 800ec90:	eba0 0308 	sub.w	r3, r0, r8
 800ec94:	fa09 f303 	lsl.w	r3, r9, r3
 800ec98:	4313      	orrs	r3, r2
 800ec9a:	9304      	str	r3, [sp, #16]
 800ec9c:	46a2      	mov	sl, r4
 800ec9e:	e7d2      	b.n	800ec46 <_vfiprintf_r+0xe2>
 800eca0:	9b03      	ldr	r3, [sp, #12]
 800eca2:	1d19      	adds	r1, r3, #4
 800eca4:	681b      	ldr	r3, [r3, #0]
 800eca6:	9103      	str	r1, [sp, #12]
 800eca8:	2b00      	cmp	r3, #0
 800ecaa:	bfbb      	ittet	lt
 800ecac:	425b      	neglt	r3, r3
 800ecae:	f042 0202 	orrlt.w	r2, r2, #2
 800ecb2:	9307      	strge	r3, [sp, #28]
 800ecb4:	9307      	strlt	r3, [sp, #28]
 800ecb6:	bfb8      	it	lt
 800ecb8:	9204      	strlt	r2, [sp, #16]
 800ecba:	7823      	ldrb	r3, [r4, #0]
 800ecbc:	2b2e      	cmp	r3, #46	; 0x2e
 800ecbe:	d10c      	bne.n	800ecda <_vfiprintf_r+0x176>
 800ecc0:	7863      	ldrb	r3, [r4, #1]
 800ecc2:	2b2a      	cmp	r3, #42	; 0x2a
 800ecc4:	d135      	bne.n	800ed32 <_vfiprintf_r+0x1ce>
 800ecc6:	9b03      	ldr	r3, [sp, #12]
 800ecc8:	1d1a      	adds	r2, r3, #4
 800ecca:	681b      	ldr	r3, [r3, #0]
 800eccc:	9203      	str	r2, [sp, #12]
 800ecce:	2b00      	cmp	r3, #0
 800ecd0:	bfb8      	it	lt
 800ecd2:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecd6:	3402      	adds	r4, #2
 800ecd8:	9305      	str	r3, [sp, #20]
 800ecda:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800edc0 <_vfiprintf_r+0x25c>
 800ecde:	7821      	ldrb	r1, [r4, #0]
 800ece0:	2203      	movs	r2, #3
 800ece2:	4650      	mov	r0, sl
 800ece4:	f7f1 fa7c 	bl	80001e0 <memchr>
 800ece8:	b140      	cbz	r0, 800ecfc <_vfiprintf_r+0x198>
 800ecea:	2340      	movs	r3, #64	; 0x40
 800ecec:	eba0 000a 	sub.w	r0, r0, sl
 800ecf0:	fa03 f000 	lsl.w	r0, r3, r0
 800ecf4:	9b04      	ldr	r3, [sp, #16]
 800ecf6:	4303      	orrs	r3, r0
 800ecf8:	3401      	adds	r4, #1
 800ecfa:	9304      	str	r3, [sp, #16]
 800ecfc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ed00:	482c      	ldr	r0, [pc, #176]	; (800edb4 <_vfiprintf_r+0x250>)
 800ed02:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ed06:	2206      	movs	r2, #6
 800ed08:	f7f1 fa6a 	bl	80001e0 <memchr>
 800ed0c:	2800      	cmp	r0, #0
 800ed0e:	d03f      	beq.n	800ed90 <_vfiprintf_r+0x22c>
 800ed10:	4b29      	ldr	r3, [pc, #164]	; (800edb8 <_vfiprintf_r+0x254>)
 800ed12:	bb1b      	cbnz	r3, 800ed5c <_vfiprintf_r+0x1f8>
 800ed14:	9b03      	ldr	r3, [sp, #12]
 800ed16:	3307      	adds	r3, #7
 800ed18:	f023 0307 	bic.w	r3, r3, #7
 800ed1c:	3308      	adds	r3, #8
 800ed1e:	9303      	str	r3, [sp, #12]
 800ed20:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ed22:	443b      	add	r3, r7
 800ed24:	9309      	str	r3, [sp, #36]	; 0x24
 800ed26:	e767      	b.n	800ebf8 <_vfiprintf_r+0x94>
 800ed28:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed2c:	460c      	mov	r4, r1
 800ed2e:	2001      	movs	r0, #1
 800ed30:	e7a5      	b.n	800ec7e <_vfiprintf_r+0x11a>
 800ed32:	2300      	movs	r3, #0
 800ed34:	3401      	adds	r4, #1
 800ed36:	9305      	str	r3, [sp, #20]
 800ed38:	4619      	mov	r1, r3
 800ed3a:	f04f 0c0a 	mov.w	ip, #10
 800ed3e:	4620      	mov	r0, r4
 800ed40:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed44:	3a30      	subs	r2, #48	; 0x30
 800ed46:	2a09      	cmp	r2, #9
 800ed48:	d903      	bls.n	800ed52 <_vfiprintf_r+0x1ee>
 800ed4a:	2b00      	cmp	r3, #0
 800ed4c:	d0c5      	beq.n	800ecda <_vfiprintf_r+0x176>
 800ed4e:	9105      	str	r1, [sp, #20]
 800ed50:	e7c3      	b.n	800ecda <_vfiprintf_r+0x176>
 800ed52:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed56:	4604      	mov	r4, r0
 800ed58:	2301      	movs	r3, #1
 800ed5a:	e7f0      	b.n	800ed3e <_vfiprintf_r+0x1da>
 800ed5c:	ab03      	add	r3, sp, #12
 800ed5e:	9300      	str	r3, [sp, #0]
 800ed60:	462a      	mov	r2, r5
 800ed62:	4b16      	ldr	r3, [pc, #88]	; (800edbc <_vfiprintf_r+0x258>)
 800ed64:	a904      	add	r1, sp, #16
 800ed66:	4630      	mov	r0, r6
 800ed68:	f7fc f860 	bl	800ae2c <_printf_float>
 800ed6c:	4607      	mov	r7, r0
 800ed6e:	1c78      	adds	r0, r7, #1
 800ed70:	d1d6      	bne.n	800ed20 <_vfiprintf_r+0x1bc>
 800ed72:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed74:	07d9      	lsls	r1, r3, #31
 800ed76:	d405      	bmi.n	800ed84 <_vfiprintf_r+0x220>
 800ed78:	89ab      	ldrh	r3, [r5, #12]
 800ed7a:	059a      	lsls	r2, r3, #22
 800ed7c:	d402      	bmi.n	800ed84 <_vfiprintf_r+0x220>
 800ed7e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed80:	f000 fadd 	bl	800f33e <__retarget_lock_release_recursive>
 800ed84:	89ab      	ldrh	r3, [r5, #12]
 800ed86:	065b      	lsls	r3, r3, #25
 800ed88:	f53f af12 	bmi.w	800ebb0 <_vfiprintf_r+0x4c>
 800ed8c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed8e:	e711      	b.n	800ebb4 <_vfiprintf_r+0x50>
 800ed90:	ab03      	add	r3, sp, #12
 800ed92:	9300      	str	r3, [sp, #0]
 800ed94:	462a      	mov	r2, r5
 800ed96:	4b09      	ldr	r3, [pc, #36]	; (800edbc <_vfiprintf_r+0x258>)
 800ed98:	a904      	add	r1, sp, #16
 800ed9a:	4630      	mov	r0, r6
 800ed9c:	f7fc faea 	bl	800b374 <_printf_i>
 800eda0:	e7e4      	b.n	800ed6c <_vfiprintf_r+0x208>
 800eda2:	bf00      	nop
 800eda4:	0800fdd8 	.word	0x0800fdd8
 800eda8:	0800fdf8 	.word	0x0800fdf8
 800edac:	0800fdb8 	.word	0x0800fdb8
 800edb0:	0800fda4 	.word	0x0800fda4
 800edb4:	0800fdae 	.word	0x0800fdae
 800edb8:	0800ae2d 	.word	0x0800ae2d
 800edbc:	0800eb3f 	.word	0x0800eb3f
 800edc0:	0800fdaa 	.word	0x0800fdaa
 800edc4:	00000000 	.word	0x00000000

0800edc8 <nan>:
 800edc8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800edd0 <nan+0x8>
 800edcc:	4770      	bx	lr
 800edce:	bf00      	nop
 800edd0:	00000000 	.word	0x00000000
 800edd4:	7ff80000 	.word	0x7ff80000

0800edd8 <_sbrk_r>:
 800edd8:	b538      	push	{r3, r4, r5, lr}
 800edda:	4d06      	ldr	r5, [pc, #24]	; (800edf4 <_sbrk_r+0x1c>)
 800eddc:	2300      	movs	r3, #0
 800edde:	4604      	mov	r4, r0
 800ede0:	4608      	mov	r0, r1
 800ede2:	602b      	str	r3, [r5, #0]
 800ede4:	f7f8 fc1a 	bl	800761c <_sbrk>
 800ede8:	1c43      	adds	r3, r0, #1
 800edea:	d102      	bne.n	800edf2 <_sbrk_r+0x1a>
 800edec:	682b      	ldr	r3, [r5, #0]
 800edee:	b103      	cbz	r3, 800edf2 <_sbrk_r+0x1a>
 800edf0:	6023      	str	r3, [r4, #0]
 800edf2:	bd38      	pop	{r3, r4, r5, pc}
 800edf4:	2000057c 	.word	0x2000057c

0800edf8 <strncmp>:
 800edf8:	b510      	push	{r4, lr}
 800edfa:	b17a      	cbz	r2, 800ee1c <strncmp+0x24>
 800edfc:	4603      	mov	r3, r0
 800edfe:	3901      	subs	r1, #1
 800ee00:	1884      	adds	r4, r0, r2
 800ee02:	f813 0b01 	ldrb.w	r0, [r3], #1
 800ee06:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ee0a:	4290      	cmp	r0, r2
 800ee0c:	d101      	bne.n	800ee12 <strncmp+0x1a>
 800ee0e:	42a3      	cmp	r3, r4
 800ee10:	d101      	bne.n	800ee16 <strncmp+0x1e>
 800ee12:	1a80      	subs	r0, r0, r2
 800ee14:	bd10      	pop	{r4, pc}
 800ee16:	2800      	cmp	r0, #0
 800ee18:	d1f3      	bne.n	800ee02 <strncmp+0xa>
 800ee1a:	e7fa      	b.n	800ee12 <strncmp+0x1a>
 800ee1c:	4610      	mov	r0, r2
 800ee1e:	e7f9      	b.n	800ee14 <strncmp+0x1c>

0800ee20 <__swbuf_r>:
 800ee20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ee22:	460e      	mov	r6, r1
 800ee24:	4614      	mov	r4, r2
 800ee26:	4605      	mov	r5, r0
 800ee28:	b118      	cbz	r0, 800ee32 <__swbuf_r+0x12>
 800ee2a:	6983      	ldr	r3, [r0, #24]
 800ee2c:	b90b      	cbnz	r3, 800ee32 <__swbuf_r+0x12>
 800ee2e:	f000 f9e7 	bl	800f200 <__sinit>
 800ee32:	4b21      	ldr	r3, [pc, #132]	; (800eeb8 <__swbuf_r+0x98>)
 800ee34:	429c      	cmp	r4, r3
 800ee36:	d12b      	bne.n	800ee90 <__swbuf_r+0x70>
 800ee38:	686c      	ldr	r4, [r5, #4]
 800ee3a:	69a3      	ldr	r3, [r4, #24]
 800ee3c:	60a3      	str	r3, [r4, #8]
 800ee3e:	89a3      	ldrh	r3, [r4, #12]
 800ee40:	071a      	lsls	r2, r3, #28
 800ee42:	d52f      	bpl.n	800eea4 <__swbuf_r+0x84>
 800ee44:	6923      	ldr	r3, [r4, #16]
 800ee46:	b36b      	cbz	r3, 800eea4 <__swbuf_r+0x84>
 800ee48:	6923      	ldr	r3, [r4, #16]
 800ee4a:	6820      	ldr	r0, [r4, #0]
 800ee4c:	1ac0      	subs	r0, r0, r3
 800ee4e:	6963      	ldr	r3, [r4, #20]
 800ee50:	b2f6      	uxtb	r6, r6
 800ee52:	4283      	cmp	r3, r0
 800ee54:	4637      	mov	r7, r6
 800ee56:	dc04      	bgt.n	800ee62 <__swbuf_r+0x42>
 800ee58:	4621      	mov	r1, r4
 800ee5a:	4628      	mov	r0, r5
 800ee5c:	f000 f93c 	bl	800f0d8 <_fflush_r>
 800ee60:	bb30      	cbnz	r0, 800eeb0 <__swbuf_r+0x90>
 800ee62:	68a3      	ldr	r3, [r4, #8]
 800ee64:	3b01      	subs	r3, #1
 800ee66:	60a3      	str	r3, [r4, #8]
 800ee68:	6823      	ldr	r3, [r4, #0]
 800ee6a:	1c5a      	adds	r2, r3, #1
 800ee6c:	6022      	str	r2, [r4, #0]
 800ee6e:	701e      	strb	r6, [r3, #0]
 800ee70:	6963      	ldr	r3, [r4, #20]
 800ee72:	3001      	adds	r0, #1
 800ee74:	4283      	cmp	r3, r0
 800ee76:	d004      	beq.n	800ee82 <__swbuf_r+0x62>
 800ee78:	89a3      	ldrh	r3, [r4, #12]
 800ee7a:	07db      	lsls	r3, r3, #31
 800ee7c:	d506      	bpl.n	800ee8c <__swbuf_r+0x6c>
 800ee7e:	2e0a      	cmp	r6, #10
 800ee80:	d104      	bne.n	800ee8c <__swbuf_r+0x6c>
 800ee82:	4621      	mov	r1, r4
 800ee84:	4628      	mov	r0, r5
 800ee86:	f000 f927 	bl	800f0d8 <_fflush_r>
 800ee8a:	b988      	cbnz	r0, 800eeb0 <__swbuf_r+0x90>
 800ee8c:	4638      	mov	r0, r7
 800ee8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee90:	4b0a      	ldr	r3, [pc, #40]	; (800eebc <__swbuf_r+0x9c>)
 800ee92:	429c      	cmp	r4, r3
 800ee94:	d101      	bne.n	800ee9a <__swbuf_r+0x7a>
 800ee96:	68ac      	ldr	r4, [r5, #8]
 800ee98:	e7cf      	b.n	800ee3a <__swbuf_r+0x1a>
 800ee9a:	4b09      	ldr	r3, [pc, #36]	; (800eec0 <__swbuf_r+0xa0>)
 800ee9c:	429c      	cmp	r4, r3
 800ee9e:	bf08      	it	eq
 800eea0:	68ec      	ldreq	r4, [r5, #12]
 800eea2:	e7ca      	b.n	800ee3a <__swbuf_r+0x1a>
 800eea4:	4621      	mov	r1, r4
 800eea6:	4628      	mov	r0, r5
 800eea8:	f000 f81a 	bl	800eee0 <__swsetup_r>
 800eeac:	2800      	cmp	r0, #0
 800eeae:	d0cb      	beq.n	800ee48 <__swbuf_r+0x28>
 800eeb0:	f04f 37ff 	mov.w	r7, #4294967295
 800eeb4:	e7ea      	b.n	800ee8c <__swbuf_r+0x6c>
 800eeb6:	bf00      	nop
 800eeb8:	0800fdd8 	.word	0x0800fdd8
 800eebc:	0800fdf8 	.word	0x0800fdf8
 800eec0:	0800fdb8 	.word	0x0800fdb8

0800eec4 <__ascii_wctomb>:
 800eec4:	b149      	cbz	r1, 800eeda <__ascii_wctomb+0x16>
 800eec6:	2aff      	cmp	r2, #255	; 0xff
 800eec8:	bf85      	ittet	hi
 800eeca:	238a      	movhi	r3, #138	; 0x8a
 800eecc:	6003      	strhi	r3, [r0, #0]
 800eece:	700a      	strbls	r2, [r1, #0]
 800eed0:	f04f 30ff 	movhi.w	r0, #4294967295
 800eed4:	bf98      	it	ls
 800eed6:	2001      	movls	r0, #1
 800eed8:	4770      	bx	lr
 800eeda:	4608      	mov	r0, r1
 800eedc:	4770      	bx	lr
	...

0800eee0 <__swsetup_r>:
 800eee0:	4b32      	ldr	r3, [pc, #200]	; (800efac <__swsetup_r+0xcc>)
 800eee2:	b570      	push	{r4, r5, r6, lr}
 800eee4:	681d      	ldr	r5, [r3, #0]
 800eee6:	4606      	mov	r6, r0
 800eee8:	460c      	mov	r4, r1
 800eeea:	b125      	cbz	r5, 800eef6 <__swsetup_r+0x16>
 800eeec:	69ab      	ldr	r3, [r5, #24]
 800eeee:	b913      	cbnz	r3, 800eef6 <__swsetup_r+0x16>
 800eef0:	4628      	mov	r0, r5
 800eef2:	f000 f985 	bl	800f200 <__sinit>
 800eef6:	4b2e      	ldr	r3, [pc, #184]	; (800efb0 <__swsetup_r+0xd0>)
 800eef8:	429c      	cmp	r4, r3
 800eefa:	d10f      	bne.n	800ef1c <__swsetup_r+0x3c>
 800eefc:	686c      	ldr	r4, [r5, #4]
 800eefe:	89a3      	ldrh	r3, [r4, #12]
 800ef00:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef04:	0719      	lsls	r1, r3, #28
 800ef06:	d42c      	bmi.n	800ef62 <__swsetup_r+0x82>
 800ef08:	06dd      	lsls	r5, r3, #27
 800ef0a:	d411      	bmi.n	800ef30 <__swsetup_r+0x50>
 800ef0c:	2309      	movs	r3, #9
 800ef0e:	6033      	str	r3, [r6, #0]
 800ef10:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800ef14:	81a3      	strh	r3, [r4, #12]
 800ef16:	f04f 30ff 	mov.w	r0, #4294967295
 800ef1a:	e03e      	b.n	800ef9a <__swsetup_r+0xba>
 800ef1c:	4b25      	ldr	r3, [pc, #148]	; (800efb4 <__swsetup_r+0xd4>)
 800ef1e:	429c      	cmp	r4, r3
 800ef20:	d101      	bne.n	800ef26 <__swsetup_r+0x46>
 800ef22:	68ac      	ldr	r4, [r5, #8]
 800ef24:	e7eb      	b.n	800eefe <__swsetup_r+0x1e>
 800ef26:	4b24      	ldr	r3, [pc, #144]	; (800efb8 <__swsetup_r+0xd8>)
 800ef28:	429c      	cmp	r4, r3
 800ef2a:	bf08      	it	eq
 800ef2c:	68ec      	ldreq	r4, [r5, #12]
 800ef2e:	e7e6      	b.n	800eefe <__swsetup_r+0x1e>
 800ef30:	0758      	lsls	r0, r3, #29
 800ef32:	d512      	bpl.n	800ef5a <__swsetup_r+0x7a>
 800ef34:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef36:	b141      	cbz	r1, 800ef4a <__swsetup_r+0x6a>
 800ef38:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef3c:	4299      	cmp	r1, r3
 800ef3e:	d002      	beq.n	800ef46 <__swsetup_r+0x66>
 800ef40:	4630      	mov	r0, r6
 800ef42:	f7ff fba9 	bl	800e698 <_free_r>
 800ef46:	2300      	movs	r3, #0
 800ef48:	6363      	str	r3, [r4, #52]	; 0x34
 800ef4a:	89a3      	ldrh	r3, [r4, #12]
 800ef4c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef50:	81a3      	strh	r3, [r4, #12]
 800ef52:	2300      	movs	r3, #0
 800ef54:	6063      	str	r3, [r4, #4]
 800ef56:	6923      	ldr	r3, [r4, #16]
 800ef58:	6023      	str	r3, [r4, #0]
 800ef5a:	89a3      	ldrh	r3, [r4, #12]
 800ef5c:	f043 0308 	orr.w	r3, r3, #8
 800ef60:	81a3      	strh	r3, [r4, #12]
 800ef62:	6923      	ldr	r3, [r4, #16]
 800ef64:	b94b      	cbnz	r3, 800ef7a <__swsetup_r+0x9a>
 800ef66:	89a3      	ldrh	r3, [r4, #12]
 800ef68:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef6c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef70:	d003      	beq.n	800ef7a <__swsetup_r+0x9a>
 800ef72:	4621      	mov	r1, r4
 800ef74:	4630      	mov	r0, r6
 800ef76:	f000 fa09 	bl	800f38c <__smakebuf_r>
 800ef7a:	89a0      	ldrh	r0, [r4, #12]
 800ef7c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef80:	f010 0301 	ands.w	r3, r0, #1
 800ef84:	d00a      	beq.n	800ef9c <__swsetup_r+0xbc>
 800ef86:	2300      	movs	r3, #0
 800ef88:	60a3      	str	r3, [r4, #8]
 800ef8a:	6963      	ldr	r3, [r4, #20]
 800ef8c:	425b      	negs	r3, r3
 800ef8e:	61a3      	str	r3, [r4, #24]
 800ef90:	6923      	ldr	r3, [r4, #16]
 800ef92:	b943      	cbnz	r3, 800efa6 <__swsetup_r+0xc6>
 800ef94:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef98:	d1ba      	bne.n	800ef10 <__swsetup_r+0x30>
 800ef9a:	bd70      	pop	{r4, r5, r6, pc}
 800ef9c:	0781      	lsls	r1, r0, #30
 800ef9e:	bf58      	it	pl
 800efa0:	6963      	ldrpl	r3, [r4, #20]
 800efa2:	60a3      	str	r3, [r4, #8]
 800efa4:	e7f4      	b.n	800ef90 <__swsetup_r+0xb0>
 800efa6:	2000      	movs	r0, #0
 800efa8:	e7f7      	b.n	800ef9a <__swsetup_r+0xba>
 800efaa:	bf00      	nop
 800efac:	20000020 	.word	0x20000020
 800efb0:	0800fdd8 	.word	0x0800fdd8
 800efb4:	0800fdf8 	.word	0x0800fdf8
 800efb8:	0800fdb8 	.word	0x0800fdb8

0800efbc <abort>:
 800efbc:	b508      	push	{r3, lr}
 800efbe:	2006      	movs	r0, #6
 800efc0:	f000 faa2 	bl	800f508 <raise>
 800efc4:	2001      	movs	r0, #1
 800efc6:	f7f8 fab1 	bl	800752c <_exit>
	...

0800efcc <__sflush_r>:
 800efcc:	898a      	ldrh	r2, [r1, #12]
 800efce:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efd2:	4605      	mov	r5, r0
 800efd4:	0710      	lsls	r0, r2, #28
 800efd6:	460c      	mov	r4, r1
 800efd8:	d458      	bmi.n	800f08c <__sflush_r+0xc0>
 800efda:	684b      	ldr	r3, [r1, #4]
 800efdc:	2b00      	cmp	r3, #0
 800efde:	dc05      	bgt.n	800efec <__sflush_r+0x20>
 800efe0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efe2:	2b00      	cmp	r3, #0
 800efe4:	dc02      	bgt.n	800efec <__sflush_r+0x20>
 800efe6:	2000      	movs	r0, #0
 800efe8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efec:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efee:	2e00      	cmp	r6, #0
 800eff0:	d0f9      	beq.n	800efe6 <__sflush_r+0x1a>
 800eff2:	2300      	movs	r3, #0
 800eff4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800eff8:	682f      	ldr	r7, [r5, #0]
 800effa:	602b      	str	r3, [r5, #0]
 800effc:	d032      	beq.n	800f064 <__sflush_r+0x98>
 800effe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800f000:	89a3      	ldrh	r3, [r4, #12]
 800f002:	075a      	lsls	r2, r3, #29
 800f004:	d505      	bpl.n	800f012 <__sflush_r+0x46>
 800f006:	6863      	ldr	r3, [r4, #4]
 800f008:	1ac0      	subs	r0, r0, r3
 800f00a:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800f00c:	b10b      	cbz	r3, 800f012 <__sflush_r+0x46>
 800f00e:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800f010:	1ac0      	subs	r0, r0, r3
 800f012:	2300      	movs	r3, #0
 800f014:	4602      	mov	r2, r0
 800f016:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800f018:	6a21      	ldr	r1, [r4, #32]
 800f01a:	4628      	mov	r0, r5
 800f01c:	47b0      	blx	r6
 800f01e:	1c43      	adds	r3, r0, #1
 800f020:	89a3      	ldrh	r3, [r4, #12]
 800f022:	d106      	bne.n	800f032 <__sflush_r+0x66>
 800f024:	6829      	ldr	r1, [r5, #0]
 800f026:	291d      	cmp	r1, #29
 800f028:	d82c      	bhi.n	800f084 <__sflush_r+0xb8>
 800f02a:	4a2a      	ldr	r2, [pc, #168]	; (800f0d4 <__sflush_r+0x108>)
 800f02c:	40ca      	lsrs	r2, r1
 800f02e:	07d6      	lsls	r6, r2, #31
 800f030:	d528      	bpl.n	800f084 <__sflush_r+0xb8>
 800f032:	2200      	movs	r2, #0
 800f034:	6062      	str	r2, [r4, #4]
 800f036:	04d9      	lsls	r1, r3, #19
 800f038:	6922      	ldr	r2, [r4, #16]
 800f03a:	6022      	str	r2, [r4, #0]
 800f03c:	d504      	bpl.n	800f048 <__sflush_r+0x7c>
 800f03e:	1c42      	adds	r2, r0, #1
 800f040:	d101      	bne.n	800f046 <__sflush_r+0x7a>
 800f042:	682b      	ldr	r3, [r5, #0]
 800f044:	b903      	cbnz	r3, 800f048 <__sflush_r+0x7c>
 800f046:	6560      	str	r0, [r4, #84]	; 0x54
 800f048:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f04a:	602f      	str	r7, [r5, #0]
 800f04c:	2900      	cmp	r1, #0
 800f04e:	d0ca      	beq.n	800efe6 <__sflush_r+0x1a>
 800f050:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f054:	4299      	cmp	r1, r3
 800f056:	d002      	beq.n	800f05e <__sflush_r+0x92>
 800f058:	4628      	mov	r0, r5
 800f05a:	f7ff fb1d 	bl	800e698 <_free_r>
 800f05e:	2000      	movs	r0, #0
 800f060:	6360      	str	r0, [r4, #52]	; 0x34
 800f062:	e7c1      	b.n	800efe8 <__sflush_r+0x1c>
 800f064:	6a21      	ldr	r1, [r4, #32]
 800f066:	2301      	movs	r3, #1
 800f068:	4628      	mov	r0, r5
 800f06a:	47b0      	blx	r6
 800f06c:	1c41      	adds	r1, r0, #1
 800f06e:	d1c7      	bne.n	800f000 <__sflush_r+0x34>
 800f070:	682b      	ldr	r3, [r5, #0]
 800f072:	2b00      	cmp	r3, #0
 800f074:	d0c4      	beq.n	800f000 <__sflush_r+0x34>
 800f076:	2b1d      	cmp	r3, #29
 800f078:	d001      	beq.n	800f07e <__sflush_r+0xb2>
 800f07a:	2b16      	cmp	r3, #22
 800f07c:	d101      	bne.n	800f082 <__sflush_r+0xb6>
 800f07e:	602f      	str	r7, [r5, #0]
 800f080:	e7b1      	b.n	800efe6 <__sflush_r+0x1a>
 800f082:	89a3      	ldrh	r3, [r4, #12]
 800f084:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f088:	81a3      	strh	r3, [r4, #12]
 800f08a:	e7ad      	b.n	800efe8 <__sflush_r+0x1c>
 800f08c:	690f      	ldr	r7, [r1, #16]
 800f08e:	2f00      	cmp	r7, #0
 800f090:	d0a9      	beq.n	800efe6 <__sflush_r+0x1a>
 800f092:	0793      	lsls	r3, r2, #30
 800f094:	680e      	ldr	r6, [r1, #0]
 800f096:	bf08      	it	eq
 800f098:	694b      	ldreq	r3, [r1, #20]
 800f09a:	600f      	str	r7, [r1, #0]
 800f09c:	bf18      	it	ne
 800f09e:	2300      	movne	r3, #0
 800f0a0:	eba6 0807 	sub.w	r8, r6, r7
 800f0a4:	608b      	str	r3, [r1, #8]
 800f0a6:	f1b8 0f00 	cmp.w	r8, #0
 800f0aa:	dd9c      	ble.n	800efe6 <__sflush_r+0x1a>
 800f0ac:	6a21      	ldr	r1, [r4, #32]
 800f0ae:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f0b0:	4643      	mov	r3, r8
 800f0b2:	463a      	mov	r2, r7
 800f0b4:	4628      	mov	r0, r5
 800f0b6:	47b0      	blx	r6
 800f0b8:	2800      	cmp	r0, #0
 800f0ba:	dc06      	bgt.n	800f0ca <__sflush_r+0xfe>
 800f0bc:	89a3      	ldrh	r3, [r4, #12]
 800f0be:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f0c2:	81a3      	strh	r3, [r4, #12]
 800f0c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f0c8:	e78e      	b.n	800efe8 <__sflush_r+0x1c>
 800f0ca:	4407      	add	r7, r0
 800f0cc:	eba8 0800 	sub.w	r8, r8, r0
 800f0d0:	e7e9      	b.n	800f0a6 <__sflush_r+0xda>
 800f0d2:	bf00      	nop
 800f0d4:	20400001 	.word	0x20400001

0800f0d8 <_fflush_r>:
 800f0d8:	b538      	push	{r3, r4, r5, lr}
 800f0da:	690b      	ldr	r3, [r1, #16]
 800f0dc:	4605      	mov	r5, r0
 800f0de:	460c      	mov	r4, r1
 800f0e0:	b913      	cbnz	r3, 800f0e8 <_fflush_r+0x10>
 800f0e2:	2500      	movs	r5, #0
 800f0e4:	4628      	mov	r0, r5
 800f0e6:	bd38      	pop	{r3, r4, r5, pc}
 800f0e8:	b118      	cbz	r0, 800f0f2 <_fflush_r+0x1a>
 800f0ea:	6983      	ldr	r3, [r0, #24]
 800f0ec:	b90b      	cbnz	r3, 800f0f2 <_fflush_r+0x1a>
 800f0ee:	f000 f887 	bl	800f200 <__sinit>
 800f0f2:	4b14      	ldr	r3, [pc, #80]	; (800f144 <_fflush_r+0x6c>)
 800f0f4:	429c      	cmp	r4, r3
 800f0f6:	d11b      	bne.n	800f130 <_fflush_r+0x58>
 800f0f8:	686c      	ldr	r4, [r5, #4]
 800f0fa:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0fe:	2b00      	cmp	r3, #0
 800f100:	d0ef      	beq.n	800f0e2 <_fflush_r+0xa>
 800f102:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f104:	07d0      	lsls	r0, r2, #31
 800f106:	d404      	bmi.n	800f112 <_fflush_r+0x3a>
 800f108:	0599      	lsls	r1, r3, #22
 800f10a:	d402      	bmi.n	800f112 <_fflush_r+0x3a>
 800f10c:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f10e:	f000 f915 	bl	800f33c <__retarget_lock_acquire_recursive>
 800f112:	4628      	mov	r0, r5
 800f114:	4621      	mov	r1, r4
 800f116:	f7ff ff59 	bl	800efcc <__sflush_r>
 800f11a:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f11c:	07da      	lsls	r2, r3, #31
 800f11e:	4605      	mov	r5, r0
 800f120:	d4e0      	bmi.n	800f0e4 <_fflush_r+0xc>
 800f122:	89a3      	ldrh	r3, [r4, #12]
 800f124:	059b      	lsls	r3, r3, #22
 800f126:	d4dd      	bmi.n	800f0e4 <_fflush_r+0xc>
 800f128:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f12a:	f000 f908 	bl	800f33e <__retarget_lock_release_recursive>
 800f12e:	e7d9      	b.n	800f0e4 <_fflush_r+0xc>
 800f130:	4b05      	ldr	r3, [pc, #20]	; (800f148 <_fflush_r+0x70>)
 800f132:	429c      	cmp	r4, r3
 800f134:	d101      	bne.n	800f13a <_fflush_r+0x62>
 800f136:	68ac      	ldr	r4, [r5, #8]
 800f138:	e7df      	b.n	800f0fa <_fflush_r+0x22>
 800f13a:	4b04      	ldr	r3, [pc, #16]	; (800f14c <_fflush_r+0x74>)
 800f13c:	429c      	cmp	r4, r3
 800f13e:	bf08      	it	eq
 800f140:	68ec      	ldreq	r4, [r5, #12]
 800f142:	e7da      	b.n	800f0fa <_fflush_r+0x22>
 800f144:	0800fdd8 	.word	0x0800fdd8
 800f148:	0800fdf8 	.word	0x0800fdf8
 800f14c:	0800fdb8 	.word	0x0800fdb8

0800f150 <std>:
 800f150:	2300      	movs	r3, #0
 800f152:	b510      	push	{r4, lr}
 800f154:	4604      	mov	r4, r0
 800f156:	e9c0 3300 	strd	r3, r3, [r0]
 800f15a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f15e:	6083      	str	r3, [r0, #8]
 800f160:	8181      	strh	r1, [r0, #12]
 800f162:	6643      	str	r3, [r0, #100]	; 0x64
 800f164:	81c2      	strh	r2, [r0, #14]
 800f166:	6183      	str	r3, [r0, #24]
 800f168:	4619      	mov	r1, r3
 800f16a:	2208      	movs	r2, #8
 800f16c:	305c      	adds	r0, #92	; 0x5c
 800f16e:	f7fb fdb5 	bl	800acdc <memset>
 800f172:	4b05      	ldr	r3, [pc, #20]	; (800f188 <std+0x38>)
 800f174:	6263      	str	r3, [r4, #36]	; 0x24
 800f176:	4b05      	ldr	r3, [pc, #20]	; (800f18c <std+0x3c>)
 800f178:	62a3      	str	r3, [r4, #40]	; 0x28
 800f17a:	4b05      	ldr	r3, [pc, #20]	; (800f190 <std+0x40>)
 800f17c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f17e:	4b05      	ldr	r3, [pc, #20]	; (800f194 <std+0x44>)
 800f180:	6224      	str	r4, [r4, #32]
 800f182:	6323      	str	r3, [r4, #48]	; 0x30
 800f184:	bd10      	pop	{r4, pc}
 800f186:	bf00      	nop
 800f188:	0800f541 	.word	0x0800f541
 800f18c:	0800f563 	.word	0x0800f563
 800f190:	0800f59b 	.word	0x0800f59b
 800f194:	0800f5bf 	.word	0x0800f5bf

0800f198 <_cleanup_r>:
 800f198:	4901      	ldr	r1, [pc, #4]	; (800f1a0 <_cleanup_r+0x8>)
 800f19a:	f000 b8af 	b.w	800f2fc <_fwalk_reent>
 800f19e:	bf00      	nop
 800f1a0:	0800f0d9 	.word	0x0800f0d9

0800f1a4 <__sfmoreglue>:
 800f1a4:	b570      	push	{r4, r5, r6, lr}
 800f1a6:	2268      	movs	r2, #104	; 0x68
 800f1a8:	1e4d      	subs	r5, r1, #1
 800f1aa:	4355      	muls	r5, r2
 800f1ac:	460e      	mov	r6, r1
 800f1ae:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f1b2:	f7ff fadd 	bl	800e770 <_malloc_r>
 800f1b6:	4604      	mov	r4, r0
 800f1b8:	b140      	cbz	r0, 800f1cc <__sfmoreglue+0x28>
 800f1ba:	2100      	movs	r1, #0
 800f1bc:	e9c0 1600 	strd	r1, r6, [r0]
 800f1c0:	300c      	adds	r0, #12
 800f1c2:	60a0      	str	r0, [r4, #8]
 800f1c4:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f1c8:	f7fb fd88 	bl	800acdc <memset>
 800f1cc:	4620      	mov	r0, r4
 800f1ce:	bd70      	pop	{r4, r5, r6, pc}

0800f1d0 <__sfp_lock_acquire>:
 800f1d0:	4801      	ldr	r0, [pc, #4]	; (800f1d8 <__sfp_lock_acquire+0x8>)
 800f1d2:	f000 b8b3 	b.w	800f33c <__retarget_lock_acquire_recursive>
 800f1d6:	bf00      	nop
 800f1d8:	20000579 	.word	0x20000579

0800f1dc <__sfp_lock_release>:
 800f1dc:	4801      	ldr	r0, [pc, #4]	; (800f1e4 <__sfp_lock_release+0x8>)
 800f1de:	f000 b8ae 	b.w	800f33e <__retarget_lock_release_recursive>
 800f1e2:	bf00      	nop
 800f1e4:	20000579 	.word	0x20000579

0800f1e8 <__sinit_lock_acquire>:
 800f1e8:	4801      	ldr	r0, [pc, #4]	; (800f1f0 <__sinit_lock_acquire+0x8>)
 800f1ea:	f000 b8a7 	b.w	800f33c <__retarget_lock_acquire_recursive>
 800f1ee:	bf00      	nop
 800f1f0:	2000057a 	.word	0x2000057a

0800f1f4 <__sinit_lock_release>:
 800f1f4:	4801      	ldr	r0, [pc, #4]	; (800f1fc <__sinit_lock_release+0x8>)
 800f1f6:	f000 b8a2 	b.w	800f33e <__retarget_lock_release_recursive>
 800f1fa:	bf00      	nop
 800f1fc:	2000057a 	.word	0x2000057a

0800f200 <__sinit>:
 800f200:	b510      	push	{r4, lr}
 800f202:	4604      	mov	r4, r0
 800f204:	f7ff fff0 	bl	800f1e8 <__sinit_lock_acquire>
 800f208:	69a3      	ldr	r3, [r4, #24]
 800f20a:	b11b      	cbz	r3, 800f214 <__sinit+0x14>
 800f20c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f210:	f7ff bff0 	b.w	800f1f4 <__sinit_lock_release>
 800f214:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f218:	6523      	str	r3, [r4, #80]	; 0x50
 800f21a:	4b13      	ldr	r3, [pc, #76]	; (800f268 <__sinit+0x68>)
 800f21c:	4a13      	ldr	r2, [pc, #76]	; (800f26c <__sinit+0x6c>)
 800f21e:	681b      	ldr	r3, [r3, #0]
 800f220:	62a2      	str	r2, [r4, #40]	; 0x28
 800f222:	42a3      	cmp	r3, r4
 800f224:	bf04      	itt	eq
 800f226:	2301      	moveq	r3, #1
 800f228:	61a3      	streq	r3, [r4, #24]
 800f22a:	4620      	mov	r0, r4
 800f22c:	f000 f820 	bl	800f270 <__sfp>
 800f230:	6060      	str	r0, [r4, #4]
 800f232:	4620      	mov	r0, r4
 800f234:	f000 f81c 	bl	800f270 <__sfp>
 800f238:	60a0      	str	r0, [r4, #8]
 800f23a:	4620      	mov	r0, r4
 800f23c:	f000 f818 	bl	800f270 <__sfp>
 800f240:	2200      	movs	r2, #0
 800f242:	60e0      	str	r0, [r4, #12]
 800f244:	2104      	movs	r1, #4
 800f246:	6860      	ldr	r0, [r4, #4]
 800f248:	f7ff ff82 	bl	800f150 <std>
 800f24c:	68a0      	ldr	r0, [r4, #8]
 800f24e:	2201      	movs	r2, #1
 800f250:	2109      	movs	r1, #9
 800f252:	f7ff ff7d 	bl	800f150 <std>
 800f256:	68e0      	ldr	r0, [r4, #12]
 800f258:	2202      	movs	r2, #2
 800f25a:	2112      	movs	r1, #18
 800f25c:	f7ff ff78 	bl	800f150 <std>
 800f260:	2301      	movs	r3, #1
 800f262:	61a3      	str	r3, [r4, #24]
 800f264:	e7d2      	b.n	800f20c <__sinit+0xc>
 800f266:	bf00      	nop
 800f268:	0800f918 	.word	0x0800f918
 800f26c:	0800f199 	.word	0x0800f199

0800f270 <__sfp>:
 800f270:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f272:	4607      	mov	r7, r0
 800f274:	f7ff ffac 	bl	800f1d0 <__sfp_lock_acquire>
 800f278:	4b1e      	ldr	r3, [pc, #120]	; (800f2f4 <__sfp+0x84>)
 800f27a:	681e      	ldr	r6, [r3, #0]
 800f27c:	69b3      	ldr	r3, [r6, #24]
 800f27e:	b913      	cbnz	r3, 800f286 <__sfp+0x16>
 800f280:	4630      	mov	r0, r6
 800f282:	f7ff ffbd 	bl	800f200 <__sinit>
 800f286:	3648      	adds	r6, #72	; 0x48
 800f288:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f28c:	3b01      	subs	r3, #1
 800f28e:	d503      	bpl.n	800f298 <__sfp+0x28>
 800f290:	6833      	ldr	r3, [r6, #0]
 800f292:	b30b      	cbz	r3, 800f2d8 <__sfp+0x68>
 800f294:	6836      	ldr	r6, [r6, #0]
 800f296:	e7f7      	b.n	800f288 <__sfp+0x18>
 800f298:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f29c:	b9d5      	cbnz	r5, 800f2d4 <__sfp+0x64>
 800f29e:	4b16      	ldr	r3, [pc, #88]	; (800f2f8 <__sfp+0x88>)
 800f2a0:	60e3      	str	r3, [r4, #12]
 800f2a2:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f2a6:	6665      	str	r5, [r4, #100]	; 0x64
 800f2a8:	f000 f847 	bl	800f33a <__retarget_lock_init_recursive>
 800f2ac:	f7ff ff96 	bl	800f1dc <__sfp_lock_release>
 800f2b0:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f2b4:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f2b8:	6025      	str	r5, [r4, #0]
 800f2ba:	61a5      	str	r5, [r4, #24]
 800f2bc:	2208      	movs	r2, #8
 800f2be:	4629      	mov	r1, r5
 800f2c0:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f2c4:	f7fb fd0a 	bl	800acdc <memset>
 800f2c8:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2cc:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2d0:	4620      	mov	r0, r4
 800f2d2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2d4:	3468      	adds	r4, #104	; 0x68
 800f2d6:	e7d9      	b.n	800f28c <__sfp+0x1c>
 800f2d8:	2104      	movs	r1, #4
 800f2da:	4638      	mov	r0, r7
 800f2dc:	f7ff ff62 	bl	800f1a4 <__sfmoreglue>
 800f2e0:	4604      	mov	r4, r0
 800f2e2:	6030      	str	r0, [r6, #0]
 800f2e4:	2800      	cmp	r0, #0
 800f2e6:	d1d5      	bne.n	800f294 <__sfp+0x24>
 800f2e8:	f7ff ff78 	bl	800f1dc <__sfp_lock_release>
 800f2ec:	230c      	movs	r3, #12
 800f2ee:	603b      	str	r3, [r7, #0]
 800f2f0:	e7ee      	b.n	800f2d0 <__sfp+0x60>
 800f2f2:	bf00      	nop
 800f2f4:	0800f918 	.word	0x0800f918
 800f2f8:	ffff0001 	.word	0xffff0001

0800f2fc <_fwalk_reent>:
 800f2fc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f300:	4606      	mov	r6, r0
 800f302:	4688      	mov	r8, r1
 800f304:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f308:	2700      	movs	r7, #0
 800f30a:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f30e:	f1b9 0901 	subs.w	r9, r9, #1
 800f312:	d505      	bpl.n	800f320 <_fwalk_reent+0x24>
 800f314:	6824      	ldr	r4, [r4, #0]
 800f316:	2c00      	cmp	r4, #0
 800f318:	d1f7      	bne.n	800f30a <_fwalk_reent+0xe>
 800f31a:	4638      	mov	r0, r7
 800f31c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f320:	89ab      	ldrh	r3, [r5, #12]
 800f322:	2b01      	cmp	r3, #1
 800f324:	d907      	bls.n	800f336 <_fwalk_reent+0x3a>
 800f326:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f32a:	3301      	adds	r3, #1
 800f32c:	d003      	beq.n	800f336 <_fwalk_reent+0x3a>
 800f32e:	4629      	mov	r1, r5
 800f330:	4630      	mov	r0, r6
 800f332:	47c0      	blx	r8
 800f334:	4307      	orrs	r7, r0
 800f336:	3568      	adds	r5, #104	; 0x68
 800f338:	e7e9      	b.n	800f30e <_fwalk_reent+0x12>

0800f33a <__retarget_lock_init_recursive>:
 800f33a:	4770      	bx	lr

0800f33c <__retarget_lock_acquire_recursive>:
 800f33c:	4770      	bx	lr

0800f33e <__retarget_lock_release_recursive>:
 800f33e:	4770      	bx	lr

0800f340 <__swhatbuf_r>:
 800f340:	b570      	push	{r4, r5, r6, lr}
 800f342:	460e      	mov	r6, r1
 800f344:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f348:	2900      	cmp	r1, #0
 800f34a:	b096      	sub	sp, #88	; 0x58
 800f34c:	4614      	mov	r4, r2
 800f34e:	461d      	mov	r5, r3
 800f350:	da08      	bge.n	800f364 <__swhatbuf_r+0x24>
 800f352:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f356:	2200      	movs	r2, #0
 800f358:	602a      	str	r2, [r5, #0]
 800f35a:	061a      	lsls	r2, r3, #24
 800f35c:	d410      	bmi.n	800f380 <__swhatbuf_r+0x40>
 800f35e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f362:	e00e      	b.n	800f382 <__swhatbuf_r+0x42>
 800f364:	466a      	mov	r2, sp
 800f366:	f000 f951 	bl	800f60c <_fstat_r>
 800f36a:	2800      	cmp	r0, #0
 800f36c:	dbf1      	blt.n	800f352 <__swhatbuf_r+0x12>
 800f36e:	9a01      	ldr	r2, [sp, #4]
 800f370:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f374:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f378:	425a      	negs	r2, r3
 800f37a:	415a      	adcs	r2, r3
 800f37c:	602a      	str	r2, [r5, #0]
 800f37e:	e7ee      	b.n	800f35e <__swhatbuf_r+0x1e>
 800f380:	2340      	movs	r3, #64	; 0x40
 800f382:	2000      	movs	r0, #0
 800f384:	6023      	str	r3, [r4, #0]
 800f386:	b016      	add	sp, #88	; 0x58
 800f388:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f38c <__smakebuf_r>:
 800f38c:	898b      	ldrh	r3, [r1, #12]
 800f38e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f390:	079d      	lsls	r5, r3, #30
 800f392:	4606      	mov	r6, r0
 800f394:	460c      	mov	r4, r1
 800f396:	d507      	bpl.n	800f3a8 <__smakebuf_r+0x1c>
 800f398:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f39c:	6023      	str	r3, [r4, #0]
 800f39e:	6123      	str	r3, [r4, #16]
 800f3a0:	2301      	movs	r3, #1
 800f3a2:	6163      	str	r3, [r4, #20]
 800f3a4:	b002      	add	sp, #8
 800f3a6:	bd70      	pop	{r4, r5, r6, pc}
 800f3a8:	ab01      	add	r3, sp, #4
 800f3aa:	466a      	mov	r2, sp
 800f3ac:	f7ff ffc8 	bl	800f340 <__swhatbuf_r>
 800f3b0:	9900      	ldr	r1, [sp, #0]
 800f3b2:	4605      	mov	r5, r0
 800f3b4:	4630      	mov	r0, r6
 800f3b6:	f7ff f9db 	bl	800e770 <_malloc_r>
 800f3ba:	b948      	cbnz	r0, 800f3d0 <__smakebuf_r+0x44>
 800f3bc:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f3c0:	059a      	lsls	r2, r3, #22
 800f3c2:	d4ef      	bmi.n	800f3a4 <__smakebuf_r+0x18>
 800f3c4:	f023 0303 	bic.w	r3, r3, #3
 800f3c8:	f043 0302 	orr.w	r3, r3, #2
 800f3cc:	81a3      	strh	r3, [r4, #12]
 800f3ce:	e7e3      	b.n	800f398 <__smakebuf_r+0xc>
 800f3d0:	4b0d      	ldr	r3, [pc, #52]	; (800f408 <__smakebuf_r+0x7c>)
 800f3d2:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3d4:	89a3      	ldrh	r3, [r4, #12]
 800f3d6:	6020      	str	r0, [r4, #0]
 800f3d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3dc:	81a3      	strh	r3, [r4, #12]
 800f3de:	9b00      	ldr	r3, [sp, #0]
 800f3e0:	6163      	str	r3, [r4, #20]
 800f3e2:	9b01      	ldr	r3, [sp, #4]
 800f3e4:	6120      	str	r0, [r4, #16]
 800f3e6:	b15b      	cbz	r3, 800f400 <__smakebuf_r+0x74>
 800f3e8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3ec:	4630      	mov	r0, r6
 800f3ee:	f000 f91f 	bl	800f630 <_isatty_r>
 800f3f2:	b128      	cbz	r0, 800f400 <__smakebuf_r+0x74>
 800f3f4:	89a3      	ldrh	r3, [r4, #12]
 800f3f6:	f023 0303 	bic.w	r3, r3, #3
 800f3fa:	f043 0301 	orr.w	r3, r3, #1
 800f3fe:	81a3      	strh	r3, [r4, #12]
 800f400:	89a0      	ldrh	r0, [r4, #12]
 800f402:	4305      	orrs	r5, r0
 800f404:	81a5      	strh	r5, [r4, #12]
 800f406:	e7cd      	b.n	800f3a4 <__smakebuf_r+0x18>
 800f408:	0800f199 	.word	0x0800f199

0800f40c <memmove>:
 800f40c:	4288      	cmp	r0, r1
 800f40e:	b510      	push	{r4, lr}
 800f410:	eb01 0402 	add.w	r4, r1, r2
 800f414:	d902      	bls.n	800f41c <memmove+0x10>
 800f416:	4284      	cmp	r4, r0
 800f418:	4623      	mov	r3, r4
 800f41a:	d807      	bhi.n	800f42c <memmove+0x20>
 800f41c:	1e43      	subs	r3, r0, #1
 800f41e:	42a1      	cmp	r1, r4
 800f420:	d008      	beq.n	800f434 <memmove+0x28>
 800f422:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f426:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f42a:	e7f8      	b.n	800f41e <memmove+0x12>
 800f42c:	4402      	add	r2, r0
 800f42e:	4601      	mov	r1, r0
 800f430:	428a      	cmp	r2, r1
 800f432:	d100      	bne.n	800f436 <memmove+0x2a>
 800f434:	bd10      	pop	{r4, pc}
 800f436:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f43a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f43e:	e7f7      	b.n	800f430 <memmove+0x24>

0800f440 <__malloc_lock>:
 800f440:	4801      	ldr	r0, [pc, #4]	; (800f448 <__malloc_lock+0x8>)
 800f442:	f7ff bf7b 	b.w	800f33c <__retarget_lock_acquire_recursive>
 800f446:	bf00      	nop
 800f448:	20000578 	.word	0x20000578

0800f44c <__malloc_unlock>:
 800f44c:	4801      	ldr	r0, [pc, #4]	; (800f454 <__malloc_unlock+0x8>)
 800f44e:	f7ff bf76 	b.w	800f33e <__retarget_lock_release_recursive>
 800f452:	bf00      	nop
 800f454:	20000578 	.word	0x20000578

0800f458 <_realloc_r>:
 800f458:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f45c:	4680      	mov	r8, r0
 800f45e:	4614      	mov	r4, r2
 800f460:	460e      	mov	r6, r1
 800f462:	b921      	cbnz	r1, 800f46e <_realloc_r+0x16>
 800f464:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f468:	4611      	mov	r1, r2
 800f46a:	f7ff b981 	b.w	800e770 <_malloc_r>
 800f46e:	b92a      	cbnz	r2, 800f47c <_realloc_r+0x24>
 800f470:	f7ff f912 	bl	800e698 <_free_r>
 800f474:	4625      	mov	r5, r4
 800f476:	4628      	mov	r0, r5
 800f478:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f47c:	f000 f8fa 	bl	800f674 <_malloc_usable_size_r>
 800f480:	4284      	cmp	r4, r0
 800f482:	4607      	mov	r7, r0
 800f484:	d802      	bhi.n	800f48c <_realloc_r+0x34>
 800f486:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f48a:	d812      	bhi.n	800f4b2 <_realloc_r+0x5a>
 800f48c:	4621      	mov	r1, r4
 800f48e:	4640      	mov	r0, r8
 800f490:	f7ff f96e 	bl	800e770 <_malloc_r>
 800f494:	4605      	mov	r5, r0
 800f496:	2800      	cmp	r0, #0
 800f498:	d0ed      	beq.n	800f476 <_realloc_r+0x1e>
 800f49a:	42bc      	cmp	r4, r7
 800f49c:	4622      	mov	r2, r4
 800f49e:	4631      	mov	r1, r6
 800f4a0:	bf28      	it	cs
 800f4a2:	463a      	movcs	r2, r7
 800f4a4:	f7fe fc12 	bl	800dccc <memcpy>
 800f4a8:	4631      	mov	r1, r6
 800f4aa:	4640      	mov	r0, r8
 800f4ac:	f7ff f8f4 	bl	800e698 <_free_r>
 800f4b0:	e7e1      	b.n	800f476 <_realloc_r+0x1e>
 800f4b2:	4635      	mov	r5, r6
 800f4b4:	e7df      	b.n	800f476 <_realloc_r+0x1e>

0800f4b6 <_raise_r>:
 800f4b6:	291f      	cmp	r1, #31
 800f4b8:	b538      	push	{r3, r4, r5, lr}
 800f4ba:	4604      	mov	r4, r0
 800f4bc:	460d      	mov	r5, r1
 800f4be:	d904      	bls.n	800f4ca <_raise_r+0x14>
 800f4c0:	2316      	movs	r3, #22
 800f4c2:	6003      	str	r3, [r0, #0]
 800f4c4:	f04f 30ff 	mov.w	r0, #4294967295
 800f4c8:	bd38      	pop	{r3, r4, r5, pc}
 800f4ca:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4cc:	b112      	cbz	r2, 800f4d4 <_raise_r+0x1e>
 800f4ce:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4d2:	b94b      	cbnz	r3, 800f4e8 <_raise_r+0x32>
 800f4d4:	4620      	mov	r0, r4
 800f4d6:	f000 f831 	bl	800f53c <_getpid_r>
 800f4da:	462a      	mov	r2, r5
 800f4dc:	4601      	mov	r1, r0
 800f4de:	4620      	mov	r0, r4
 800f4e0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4e4:	f000 b818 	b.w	800f518 <_kill_r>
 800f4e8:	2b01      	cmp	r3, #1
 800f4ea:	d00a      	beq.n	800f502 <_raise_r+0x4c>
 800f4ec:	1c59      	adds	r1, r3, #1
 800f4ee:	d103      	bne.n	800f4f8 <_raise_r+0x42>
 800f4f0:	2316      	movs	r3, #22
 800f4f2:	6003      	str	r3, [r0, #0]
 800f4f4:	2001      	movs	r0, #1
 800f4f6:	e7e7      	b.n	800f4c8 <_raise_r+0x12>
 800f4f8:	2400      	movs	r4, #0
 800f4fa:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4fe:	4628      	mov	r0, r5
 800f500:	4798      	blx	r3
 800f502:	2000      	movs	r0, #0
 800f504:	e7e0      	b.n	800f4c8 <_raise_r+0x12>
	...

0800f508 <raise>:
 800f508:	4b02      	ldr	r3, [pc, #8]	; (800f514 <raise+0xc>)
 800f50a:	4601      	mov	r1, r0
 800f50c:	6818      	ldr	r0, [r3, #0]
 800f50e:	f7ff bfd2 	b.w	800f4b6 <_raise_r>
 800f512:	bf00      	nop
 800f514:	20000020 	.word	0x20000020

0800f518 <_kill_r>:
 800f518:	b538      	push	{r3, r4, r5, lr}
 800f51a:	4d07      	ldr	r5, [pc, #28]	; (800f538 <_kill_r+0x20>)
 800f51c:	2300      	movs	r3, #0
 800f51e:	4604      	mov	r4, r0
 800f520:	4608      	mov	r0, r1
 800f522:	4611      	mov	r1, r2
 800f524:	602b      	str	r3, [r5, #0]
 800f526:	f7f7 fff1 	bl	800750c <_kill>
 800f52a:	1c43      	adds	r3, r0, #1
 800f52c:	d102      	bne.n	800f534 <_kill_r+0x1c>
 800f52e:	682b      	ldr	r3, [r5, #0]
 800f530:	b103      	cbz	r3, 800f534 <_kill_r+0x1c>
 800f532:	6023      	str	r3, [r4, #0]
 800f534:	bd38      	pop	{r3, r4, r5, pc}
 800f536:	bf00      	nop
 800f538:	2000057c 	.word	0x2000057c

0800f53c <_getpid_r>:
 800f53c:	f7f7 bfde 	b.w	80074fc <_getpid>

0800f540 <__sread>:
 800f540:	b510      	push	{r4, lr}
 800f542:	460c      	mov	r4, r1
 800f544:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f548:	f000 f89c 	bl	800f684 <_read_r>
 800f54c:	2800      	cmp	r0, #0
 800f54e:	bfab      	itete	ge
 800f550:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f552:	89a3      	ldrhlt	r3, [r4, #12]
 800f554:	181b      	addge	r3, r3, r0
 800f556:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f55a:	bfac      	ite	ge
 800f55c:	6563      	strge	r3, [r4, #84]	; 0x54
 800f55e:	81a3      	strhlt	r3, [r4, #12]
 800f560:	bd10      	pop	{r4, pc}

0800f562 <__swrite>:
 800f562:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f566:	461f      	mov	r7, r3
 800f568:	898b      	ldrh	r3, [r1, #12]
 800f56a:	05db      	lsls	r3, r3, #23
 800f56c:	4605      	mov	r5, r0
 800f56e:	460c      	mov	r4, r1
 800f570:	4616      	mov	r6, r2
 800f572:	d505      	bpl.n	800f580 <__swrite+0x1e>
 800f574:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f578:	2302      	movs	r3, #2
 800f57a:	2200      	movs	r2, #0
 800f57c:	f000 f868 	bl	800f650 <_lseek_r>
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f586:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f58a:	81a3      	strh	r3, [r4, #12]
 800f58c:	4632      	mov	r2, r6
 800f58e:	463b      	mov	r3, r7
 800f590:	4628      	mov	r0, r5
 800f592:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f596:	f000 b817 	b.w	800f5c8 <_write_r>

0800f59a <__sseek>:
 800f59a:	b510      	push	{r4, lr}
 800f59c:	460c      	mov	r4, r1
 800f59e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5a2:	f000 f855 	bl	800f650 <_lseek_r>
 800f5a6:	1c43      	adds	r3, r0, #1
 800f5a8:	89a3      	ldrh	r3, [r4, #12]
 800f5aa:	bf15      	itete	ne
 800f5ac:	6560      	strne	r0, [r4, #84]	; 0x54
 800f5ae:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f5b2:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f5b6:	81a3      	strheq	r3, [r4, #12]
 800f5b8:	bf18      	it	ne
 800f5ba:	81a3      	strhne	r3, [r4, #12]
 800f5bc:	bd10      	pop	{r4, pc}

0800f5be <__sclose>:
 800f5be:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f5c2:	f000 b813 	b.w	800f5ec <_close_r>
	...

0800f5c8 <_write_r>:
 800f5c8:	b538      	push	{r3, r4, r5, lr}
 800f5ca:	4d07      	ldr	r5, [pc, #28]	; (800f5e8 <_write_r+0x20>)
 800f5cc:	4604      	mov	r4, r0
 800f5ce:	4608      	mov	r0, r1
 800f5d0:	4611      	mov	r1, r2
 800f5d2:	2200      	movs	r2, #0
 800f5d4:	602a      	str	r2, [r5, #0]
 800f5d6:	461a      	mov	r2, r3
 800f5d8:	f7f7 ffcf 	bl	800757a <_write>
 800f5dc:	1c43      	adds	r3, r0, #1
 800f5de:	d102      	bne.n	800f5e6 <_write_r+0x1e>
 800f5e0:	682b      	ldr	r3, [r5, #0]
 800f5e2:	b103      	cbz	r3, 800f5e6 <_write_r+0x1e>
 800f5e4:	6023      	str	r3, [r4, #0]
 800f5e6:	bd38      	pop	{r3, r4, r5, pc}
 800f5e8:	2000057c 	.word	0x2000057c

0800f5ec <_close_r>:
 800f5ec:	b538      	push	{r3, r4, r5, lr}
 800f5ee:	4d06      	ldr	r5, [pc, #24]	; (800f608 <_close_r+0x1c>)
 800f5f0:	2300      	movs	r3, #0
 800f5f2:	4604      	mov	r4, r0
 800f5f4:	4608      	mov	r0, r1
 800f5f6:	602b      	str	r3, [r5, #0]
 800f5f8:	f7f7 ffdb 	bl	80075b2 <_close>
 800f5fc:	1c43      	adds	r3, r0, #1
 800f5fe:	d102      	bne.n	800f606 <_close_r+0x1a>
 800f600:	682b      	ldr	r3, [r5, #0]
 800f602:	b103      	cbz	r3, 800f606 <_close_r+0x1a>
 800f604:	6023      	str	r3, [r4, #0]
 800f606:	bd38      	pop	{r3, r4, r5, pc}
 800f608:	2000057c 	.word	0x2000057c

0800f60c <_fstat_r>:
 800f60c:	b538      	push	{r3, r4, r5, lr}
 800f60e:	4d07      	ldr	r5, [pc, #28]	; (800f62c <_fstat_r+0x20>)
 800f610:	2300      	movs	r3, #0
 800f612:	4604      	mov	r4, r0
 800f614:	4608      	mov	r0, r1
 800f616:	4611      	mov	r1, r2
 800f618:	602b      	str	r3, [r5, #0]
 800f61a:	f7f7 ffd6 	bl	80075ca <_fstat>
 800f61e:	1c43      	adds	r3, r0, #1
 800f620:	d102      	bne.n	800f628 <_fstat_r+0x1c>
 800f622:	682b      	ldr	r3, [r5, #0]
 800f624:	b103      	cbz	r3, 800f628 <_fstat_r+0x1c>
 800f626:	6023      	str	r3, [r4, #0]
 800f628:	bd38      	pop	{r3, r4, r5, pc}
 800f62a:	bf00      	nop
 800f62c:	2000057c 	.word	0x2000057c

0800f630 <_isatty_r>:
 800f630:	b538      	push	{r3, r4, r5, lr}
 800f632:	4d06      	ldr	r5, [pc, #24]	; (800f64c <_isatty_r+0x1c>)
 800f634:	2300      	movs	r3, #0
 800f636:	4604      	mov	r4, r0
 800f638:	4608      	mov	r0, r1
 800f63a:	602b      	str	r3, [r5, #0]
 800f63c:	f7f7 ffd5 	bl	80075ea <_isatty>
 800f640:	1c43      	adds	r3, r0, #1
 800f642:	d102      	bne.n	800f64a <_isatty_r+0x1a>
 800f644:	682b      	ldr	r3, [r5, #0]
 800f646:	b103      	cbz	r3, 800f64a <_isatty_r+0x1a>
 800f648:	6023      	str	r3, [r4, #0]
 800f64a:	bd38      	pop	{r3, r4, r5, pc}
 800f64c:	2000057c 	.word	0x2000057c

0800f650 <_lseek_r>:
 800f650:	b538      	push	{r3, r4, r5, lr}
 800f652:	4d07      	ldr	r5, [pc, #28]	; (800f670 <_lseek_r+0x20>)
 800f654:	4604      	mov	r4, r0
 800f656:	4608      	mov	r0, r1
 800f658:	4611      	mov	r1, r2
 800f65a:	2200      	movs	r2, #0
 800f65c:	602a      	str	r2, [r5, #0]
 800f65e:	461a      	mov	r2, r3
 800f660:	f7f7 ffce 	bl	8007600 <_lseek>
 800f664:	1c43      	adds	r3, r0, #1
 800f666:	d102      	bne.n	800f66e <_lseek_r+0x1e>
 800f668:	682b      	ldr	r3, [r5, #0]
 800f66a:	b103      	cbz	r3, 800f66e <_lseek_r+0x1e>
 800f66c:	6023      	str	r3, [r4, #0]
 800f66e:	bd38      	pop	{r3, r4, r5, pc}
 800f670:	2000057c 	.word	0x2000057c

0800f674 <_malloc_usable_size_r>:
 800f674:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f678:	1f18      	subs	r0, r3, #4
 800f67a:	2b00      	cmp	r3, #0
 800f67c:	bfbc      	itt	lt
 800f67e:	580b      	ldrlt	r3, [r1, r0]
 800f680:	18c0      	addlt	r0, r0, r3
 800f682:	4770      	bx	lr

0800f684 <_read_r>:
 800f684:	b538      	push	{r3, r4, r5, lr}
 800f686:	4d07      	ldr	r5, [pc, #28]	; (800f6a4 <_read_r+0x20>)
 800f688:	4604      	mov	r4, r0
 800f68a:	4608      	mov	r0, r1
 800f68c:	4611      	mov	r1, r2
 800f68e:	2200      	movs	r2, #0
 800f690:	602a      	str	r2, [r5, #0]
 800f692:	461a      	mov	r2, r3
 800f694:	f7f7 ff54 	bl	8007540 <_read>
 800f698:	1c43      	adds	r3, r0, #1
 800f69a:	d102      	bne.n	800f6a2 <_read_r+0x1e>
 800f69c:	682b      	ldr	r3, [r5, #0]
 800f69e:	b103      	cbz	r3, 800f6a2 <_read_r+0x1e>
 800f6a0:	6023      	str	r3, [r4, #0]
 800f6a2:	bd38      	pop	{r3, r4, r5, pc}
 800f6a4:	2000057c 	.word	0x2000057c

0800f6a8 <_init>:
 800f6a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6aa:	bf00      	nop
 800f6ac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ae:	bc08      	pop	{r3}
 800f6b0:	469e      	mov	lr, r3
 800f6b2:	4770      	bx	lr

0800f6b4 <_fini>:
 800f6b4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f6b6:	bf00      	nop
 800f6b8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f6ba:	bc08      	pop	{r3}
 800f6bc:	469e      	mov	lr, r3
 800f6be:	4770      	bx	lr
