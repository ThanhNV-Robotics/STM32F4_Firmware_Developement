
FreeFallVer_MainProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000be98  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000628  0800c028  0800c028  0001c028  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c650  0800c650  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800c650  0800c650  0001c650  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c658  0800c658  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c658  0800c658  0001c658  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c65c  0800c65c  0001c65c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800c660  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00003218  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  2000340c  2000340c  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010358  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000273d  00000000  00000000  0003057c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00032cc0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00033c68  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c08  00000000  00000000  00034b18  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011e73  00000000  00000000  00057720  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ced39  00000000  00000000  00069593  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001382cc  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005720  00000000  00000000  0013831c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c010 	.word	0x0800c010

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800c010 	.word	0x0800c010

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <GetSector+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x22>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001012:	d302      	bcc.n	800101a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e04b      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <GetSector+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <GetSector+0x38>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <GetSector+0xd0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e040      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <GetSector+0xd4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d806      	bhi.n	8001046 <GetSector+0x4e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <GetSector+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d302      	bcc.n	8001046 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e035      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GetSector+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x64>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GetSector+0xe0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d302      	bcc.n	800105c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001056:	2303      	movs	r3, #3
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e02a      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GetSector+0xe4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0x7a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <GetSector+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800106c:	2304      	movs	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e01f      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GetSector+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d206      	bcs.n	8001088 <GetSector+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <GetSector+0xe4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d902      	bls.n	8001088 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001082:	2305      	movs	r3, #5
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e014      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GetSector+0xec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d206      	bcs.n	800109e <GetSector+0xa6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <GetSector+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d902      	bls.n	800109e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001098:	2306      	movs	r3, #6
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e009      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GetSector+0xf0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d205      	bcs.n	80010b2 <GetSector+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <GetSector+0xec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	08003ffe 	.word	0x08003ffe
 80010c4:	08007ffe 	.word	0x08007ffe
 80010c8:	08004000 	.word	0x08004000
 80010cc:	0800bffe 	.word	0x0800bffe
 80010d0:	08008000 	.word	0x08008000
 80010d4:	0800ffff 	.word	0x0800ffff
 80010d8:	0800c000 	.word	0x0800c000
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff
 80010e8:	0807ffff 	.word	0x0807ffff

080010ec <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f003 fa5b 	bl	80045b8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff78 	bl	8000ff8 <GetSector>
 8001108:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001116:	69f8      	ldr	r0, [r7, #28]
 8001118:	f7ff ff6e 	bl	8000ff8 <GetSector>
 800111c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001126:	2202      	movs	r2, #2
 8001128:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Flash_Write_Data+0xb8>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	3301      	adds	r3, #1
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Flash_Write_Data+0xb8>)
 800113a:	60d3      	str	r3, [r2, #12]
	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001144:	f003 fba6 	bl	8004894 <HAL_FLASHEx_Erase>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800114e:	f003 fa65 	bl	800461c <HAL_FLASH_GetError>
 8001152:	4603      	mov	r3, r0
 8001154:	e022      	b.n	800119c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	461c      	mov	r4, r3
 8001164:	4615      	mov	r5, r2
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2002      	movs	r0, #2
 800116e:	f003 f9cf 	bl	8004510 <HAL_FLASH_Program>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3304      	adds	r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e003      	b.n	800118e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001186:	f003 fa49 	bl	800461c <HAL_FLASH_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	e006      	b.n	800119c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	429a      	cmp	r2, r3
 8001194:	dbdf      	blt.n	8001156 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001196:	f003 fa31 	bl	80045fc <HAL_FLASH_Lock>

	   return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	20000210 	.word	0x20000210

080011a8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	80fa      	strh	r2, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d000      	beq.n	80011d6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011d4:	e7ef      	b.n	80011b6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Stop>:
#include "stdbool.h"
#include <math.h>
//#include <FLASH_SECTOR_F4.h>
extern bool POSReach;
void Stop() // Stop motor function
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <Stop+0x1c>)
 80011ee:	f003 fe27 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Disable Servo Enable
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <Stop+0x1c>)
 80011f8:	f003 fe22 	bl	8004e40 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020800 	.word	0x40020800

08001204 <AlarmReset>:

void AlarmReset() // reset alarm function
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	  	HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_SET);//Pull Estop pin to 1 (24V)
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <AlarmReset+0x44>)
 800120e:	f003 fe17 	bl	8004e40 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_RESET); // trig Alarm Reset Pin
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <AlarmReset+0x44>)
 8001218:	f003 fe12 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f002 ff94 	bl	800414c <HAL_Delay>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <AlarmReset+0x44>)
 800122a:	f003 fe09 	bl	8004e40 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 800122e:	2201      	movs	r2, #1
 8001230:	2120      	movs	r1, #32
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <AlarmReset+0x48>)
 8001234:	f003 fe04 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Enable Servo Enable 
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <AlarmReset+0x48>)
 800123e:	f003 fdff 	bl	8004e40 <HAL_GPIO_WritePin>
		// Turn on the brake
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800

08001250 <Estop>:

void Estop() // Estop function
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);//Pull Estop pin to GND
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Estop+0x14>)
 800125a:	f003 fdf1 	bl	8004e40 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <DisableSTOP>:

void DisableSTOP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DisableSTOP+0x14>)
 8001272:	f003 fde5 	bl	8004e40 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800

08001280 <JogMoveUp>:

void JogMoveUp() // Move up by pressing the JOG button on the UI
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_SET); // Choose the direction
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <JogMoveUp+0x20>)
 800128c:	f003 fdd8 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <JogMoveUp+0x24>)
 8001296:	f003 fdd3 	bl	8004e40 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800

080012a8 <JogMoveDown>:

void JogMoveDown()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // Choose the direction
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <JogMoveDown+0x20>)
 80012b4:	f003 fdc4 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <JogMoveDown+0x24>)
 80012be:	f003 fdbf 	bl	8004e40 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800

080012d0 <DriverInit>:
{
	HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // Speed Mode
}

bool DriverInit()
{	
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // CN1-14 - PLSCLR	
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <DriverInit+0x70>)
 80012dc:	f003 fdb0 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port,Speed2_Not_PE7_15_Pin,GPIO_PIN_RESET);//CN1-15 SPDLIM/TLIM
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <DriverInit+0x70>)
 80012e6:	f003 fdab 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CCWLIM_Not_PE12_39_GPIO_Port,CCWLIM_Not_PE12_39_Pin,GPIO_PIN_RESET);//CN1-39 PLSINH
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <DriverInit+0x70>)
 80012f2:	f003 fda5 	bl	8004e40 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET);// CN-38 - CWLIM
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4810      	ldr	r0, [pc, #64]	; (8001340 <DriverInit+0x70>)
 80012fe:	f003 fd9f 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CWLIM_Not_PE14_13_GPIO_Port,CWLIM_Not_PE14_13_Pin,GPIO_PIN_SET);//CN1-13 CCWLIM
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <DriverInit+0x70>)
 800130a:	f003 fd99 	bl	8004e40 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);// First, the driver will be in Emergency Stop
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <DriverInit+0x74>)
 8001314:	f003 fd94 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <DriverInit+0x78>)
 800131e:	f003 fd8f 	bl	8004e40 <HAL_GPIO_WritePin>
		
		HAL_GPIO_WritePin(PA12_LINE_DRV_EN_GPIO_Port, PA12_LINE_DRV_EN_Pin, GPIO_PIN_RESET);// Enable U14 DriveLine IC for generating pulses
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <DriverInit+0x7c>)
 800132a:	f003 fd89 	bl	8004e40 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // DIR	
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DriverInit+0x70>)
 8001336:	f003 fd83 	bl	8004e40 <HAL_GPIO_WritePin>
	
		return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <ReadLogicF7000Out>:
uint16_t ReadLogicF7000Out(void)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint16_t OuputState = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
	uint8_t i=0;
 800135a:	2300      	movs	r3, #0
 800135c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_23_TYPEOUT_GPIO_Port,CN1_23_TYPEOUT_Pin)) // Read CN1-23-TYPEOUT
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	485e      	ldr	r0, [pc, #376]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001362:	f003 fd55 	bl	8004e10 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <ReadLogicF7000Out+0x30>
	{
		OuputState = OuputState | (1 << i); // Set ith bit		
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	3301      	adds	r3, #1
 8001384:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin)) // Read CN1-48-BRAKE
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4855      	ldr	r0, [pc, #340]	; (80014e0 <ReadLogicF7000Out+0x190>)
 800138a:	f003 fd41 	bl	8004e10 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <ReadLogicF7000Out+0x58>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	3301      	adds	r3, #1
 80013ac:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin)) // Read CN1-22-RDY
 80013ae:	2104      	movs	r1, #4
 80013b0:	484b      	ldr	r0, [pc, #300]	; (80014e0 <ReadLogicF7000Out+0x190>)
 80013b2:	f003 fd2d 	bl	8004e10 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <ReadLogicF7000Out+0x80>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	3301      	adds	r3, #1
 80013d4:	717b      	strb	r3, [r7, #5]
	POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);	// Check if the position is reached or not
 80013d6:	2102      	movs	r1, #2
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <ReadLogicF7000Out+0x194>)
 80013da:	f003 fd19 	bl	8004e10 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013ec:	701a      	strb	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin)) // Read CN1-47
	if(POSReach)
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <ReadLogicF7000Out+0xba>
	{		
		OuputState = OuputState | (1 << i); // Set ith bit
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3301      	adds	r3, #1
 800140e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_21_SPDOUT_TRQOUT_GPIO_Port,CN1_21_SPDOUT_TRQOUT_Pin)) // Read CN1-21
 8001410:	2108      	movs	r1, #8
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <ReadLogicF7000Out+0x190>)
 8001414:	f003 fcfc 	bl	8004e10 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <ReadLogicF7000Out+0xe2>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_46_ALARM_GPIO_Port,CN1_46_ALARM_Pin)) // Read CN1-22-
 8001438:	2101      	movs	r1, #1
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800143c:	f003 fce8 	bl	8004e10 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <ReadLogicF7000Out+0x10a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	3301      	adds	r3, #1
 800145e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_20_PCWOUT_PTQOUT_GPIO_Port,CN1_20_PCWOUT_PTQOUT_Pin)) // Read CN1-20
 8001460:	2110      	movs	r1, #16
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001464:	f003 fcd4 	bl	8004e10 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <ReadLogicF7000Out+0x132>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001482:	797b      	ldrb	r3, [r7, #5]
 8001484:	3301      	adds	r3, #1
 8001486:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_45_NCWOUT_NTQOUT_GPIO_Port,CN1_45_NCWOUT_NTQOUT_Pin)) // Read CN1-45
 8001488:	2104      	movs	r1, #4
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800148c:	f003 fcc0 	bl	8004e10 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <ReadLogicF7000Out+0x15a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	3301      	adds	r3, #1
 80014ae:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_19_ZSPD_GPIO_Port,CN1_19_ZSPD_Pin)) // Read CN1-19-ZSPD
 80014b0:	2108      	movs	r1, #8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <ReadLogicF7000Out+0x19c>)
 80014b4:	f003 fcac 	bl	8004e10 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <ReadLogicF7000Out+0x182>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	80fb      	strh	r3, [r7, #6]
	}	
	return OuputState;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	20000437 	.word	0x20000437
 80014ec:	40020400 	.word	0x40020400

080014f0 <ExtractMotionCode>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void ExtractMotionCode () // Extract command from the UI
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	memset (MotionCode, '\0', sizeof (MotionCode)); // reset MotionCode
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <ExtractMotionCode+0xa8>)
 80014fc:	f006 f8a2 	bl	8007644 <memset>
	memset (DataRegion, '\0', sizeof (DataRegion)); // reset DataRegion
 8001500:	2228      	movs	r2, #40	; 0x28
 8001502:	2100      	movs	r1, #0
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <ExtractMotionCode+0xac>)
 8001506:	f006 f89d 	bl	8007644 <memset>
	uint8_t j = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 800150e:	2300      	movs	r3, #0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	e012      	b.n	800153a <ExtractMotionCode+0x4a>
	{
		if (RxPCBuff[i] != 0) // coppy the command from UI to another array, remove the null character at the beginning
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <ExtractMotionCode+0x44>
		{
			DataRegion[j] = RxPCBuff[i]; // coppy to DataRegion
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	491e      	ldr	r1, [pc, #120]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001526:	5c8a      	ldrb	r2, [r1, r2]
 8001528:	b2d1      	uxtb	r1, r2
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <ExtractMotionCode+0xac>)
 800152c:	54d1      	strb	r1, [r2, r3]
			j++;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	3301      	adds	r3, #1
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	2b27      	cmp	r3, #39	; 0x27
 800153e:	d9e9      	bls.n	8001514 <ExtractMotionCode+0x24>
		}
	}
	j = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
	char *token;
	token = strtok((char *)DataRegion, "/");	// Split the command ~ remove the / character
 8001544:	4917      	ldr	r1, [pc, #92]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <ExtractMotionCode+0xac>)
 8001548:	f007 fd5a 	bl	8009000 <strtok>
 800154c:	6038      	str	r0, [r7, #0]
	while (token != NULL)
 800154e:	e016      	b.n	800157e <ExtractMotionCode+0x8e>
    {
				MotionCode[j] = (atof(token)); // covert to float type
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f006 f849 	bl	80075e8 <atof>
 8001556:	ec53 2b10 	vmov	r2, r3, d0
 800155a:	79fc      	ldrb	r4, [r7, #7]
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb42 	bl	8000be8 <__aeabi_d2f>
 8001564:	4602      	mov	r2, r0
 8001566:	490c      	ldr	r1, [pc, #48]	; (8001598 <ExtractMotionCode+0xa8>)
 8001568:	00a3      	lsls	r3, r4, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
			  //MotionCode[j] = (atoi(token)); // covert to int type
        token = strtok(NULL, "/");
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001570:	2000      	movs	r0, #0
 8001572:	f007 fd45 	bl	8009000 <strtok>
 8001576:	6038      	str	r0, [r7, #0]
				j++;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3301      	adds	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
	while (token != NULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e5      	bne.n	8001550 <ExtractMotionCode+0x60>
    }
	memset (RxPCBuff, '\0', sizeof (RxPCBuff)); // reset
 8001584:	2228      	movs	r2, #40	; 0x28
 8001586:	2100      	movs	r1, #0
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <ExtractMotionCode+0xb0>)
 800158a:	f006 f85b 	bl	8007644 <memset>
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	200033ac 	.word	0x200033ac
 800159c:	20000384 	.word	0x20000384
 80015a0:	2000033c 	.word	0x2000033c
 80015a4:	0800c028 	.word	0x0800c028

080015a8 <ReadMultiRegister>:


void ReadMultiRegister(uint16_t StartingAddress, uint8_t NoOfRegister) // Read data from the Driver
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	717b      	strb	r3, [r7, #5]
	// Prepare data frame -- BEGIN
	// Data preparation
	TxDataToDriver[0] = DriverID;//SerialID = 1 of the driver
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <ReadMultiRegister+0xe8>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
	TxDataToDriver[1] = 3;//Read Regis, function code
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <ReadMultiRegister+0xe8>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	705a      	strb	r2, [r3, #1]
	TxDataToDriver[2] = StartingAddress / 256; // Register Address High byte
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <ReadMultiRegister+0xe8>)
 80015ce:	709a      	strb	r2, [r3, #2]
    TxDataToDriver[3] = StartingAddress % 256; // Register Address LOW byte
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <ReadMultiRegister+0xe8>)
 80015d6:	70da      	strb	r2, [r3, #3]
	TxDataToDriver[4] = 0; // Number of Register HIGH byte
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <ReadMultiRegister+0xe8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	711a      	strb	r2, [r3, #4]
	TxDataToDriver[5] = NoOfRegister; // Number of Register LOW byte
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <ReadMultiRegister+0xe8>)
 80015e0:	797b      	ldrb	r3, [r7, #5]
 80015e2:	7153      	strb	r3, [r2, #5]

	//CRC BEGIN=======
				uint16_t crc = 0xFFFF;
 80015e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e8:	82fb      	strh	r3, [r7, #22]
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	e026      	b.n	800163e <ReadMultiRegister+0x96>
				{	crc ^= (uint16_t)TxDataToDriver[pos];          // XOR byte into least sig. byte of crc
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <ReadMultiRegister+0xe8>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	4053      	eors	r3, r2
 80015fe:	82fb      	strh	r3, [r7, #22]
					for (int i = 8; i != 0; i--)
 8001600:	2308      	movs	r3, #8
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e015      	b.n	8001632 <ReadMultiRegister+0x8a>
					{    // Loop over each bit
						if ((crc & 0x0001) != 0)
 8001606:	8afb      	ldrh	r3, [r7, #22]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00a      	beq.n	8001626 <ReadMultiRegister+0x7e>
						{      // If the LSB is set
							crc >>= 1;                    // Shift right and XOR 0xA001
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	82fb      	strh	r3, [r7, #22]
							crc ^= 0xA001;
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800161c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001620:	43db      	mvns	r3, r3
 8001622:	82fb      	strh	r3, [r7, #22]
 8001624:	e002      	b.n	800162c <ReadMultiRegister+0x84>
						}
						else                            // Else LSB is not set
							crc >>= 1;                    // Just shift right
 8001626:	8afb      	ldrh	r3, [r7, #22]
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	82fb      	strh	r3, [r7, #22]
					for (int i = 8; i != 0; i--)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e6      	bne.n	8001606 <ReadMultiRegister+0x5e>
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	3301      	adds	r3, #1
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b05      	cmp	r3, #5
 8001642:	ddd5      	ble.n	80015f0 <ReadMultiRegister+0x48>
					}
				}
	TxDataToDriver[6]= (uint8_t)(crc&0x00FF);;//(uint8_t)(TemDat16&0xFF);
 8001644:	8afb      	ldrh	r3, [r7, #22]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <ReadMultiRegister+0xe8>)
 800164a:	719a      	strb	r2, [r3, #6]
	TxDataToDriver[7]=(uint8_t)((crc>>8)&0x00FF);
 800164c:	8afb      	ldrh	r3, [r7, #22]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29b      	uxth	r3, r3
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <ReadMultiRegister+0xe8>)
 8001656:	71da      	strb	r2, [r3, #7]
	//CRC=====END/
	// Prepare data frame -- END
	// Send data use UART5
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
 8001658:	2200      	movs	r2, #0
 800165a:	2101      	movs	r1, #1
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <ReadMultiRegister+0xec>)
 800165e:	f003 fbef 	bl	8004e40 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f002 fd72 	bl	800414c <HAL_Delay>
	HAL_UART_Transmit(&huart5,TxDataToDriver,8,200); // use UART5 to send
 8001668:	23c8      	movs	r3, #200	; 0xc8
 800166a:	2208      	movs	r2, #8
 800166c:	4908      	ldr	r1, [pc, #32]	; (8001690 <ReadMultiRegister+0xe8>)
 800166e:	480a      	ldr	r0, [pc, #40]	; (8001698 <ReadMultiRegister+0xf0>)
 8001670:	f004 ff8f 	bl	8006592 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <ReadMultiRegister+0xec>)
 800167a:	f003 fbe1 	bl	8004e40 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
 800167e:	2201      	movs	r2, #1
 8001680:	4906      	ldr	r1, [pc, #24]	; (800169c <ReadMultiRegister+0xf4>)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <ReadMultiRegister+0xf0>)
 8001684:	f005 f817 	bl	80066b6 <HAL_UART_Receive_IT>
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000040c 	.word	0x2000040c
 8001694:	40021000 	.word	0x40021000
 8001698:	200002b4 	.word	0x200002b4
 800169c:	200003ad 	.word	0x200003ad

080016a0 <LoadSavedParam>:
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
}


void LoadSavedParam (uint32_t StartSectorAddress, float *_Param)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b09f      	sub	sp, #124	; 0x7c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	uint8_t LoadDataBuff[100];

	Flash_Read_Data(StartSectorAddress, (uint32_t *)LoadDataBuff, numofwords);
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <LoadSavedParam+0x74>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fd76 	bl	80011a8 <Flash_Read_Data>

	uint8_t	j = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char *token;
	token = strtok((char *)LoadDataBuff, "/");	// Split the command ~ remove the / character
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4914      	ldr	r1, [pc, #80]	; (8001718 <LoadSavedParam+0x78>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f007 fc99 	bl	8009000 <strtok>
 80016ce:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL)
 80016d0:	e017      	b.n	8001702 <LoadSavedParam+0x62>
    {
		_Param[j] = (atof(token)); // covert to float type
 80016d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80016d4:	f005 ff88 	bl	80075e8 <atof>
 80016d8:	ec51 0b10 	vmov	r0, r1, d0
 80016dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	18d4      	adds	r4, r2, r3
 80016e6:	f7ff fa7f 	bl	8000be8 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, "/");
 80016ee:	490a      	ldr	r1, [pc, #40]	; (8001718 <LoadSavedParam+0x78>)
 80016f0:	2000      	movs	r0, #0
 80016f2:	f007 fc85 	bl	8009000 <strtok>
 80016f6:	6738      	str	r0, [r7, #112]	; 0x70
		j++;
 80016f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016fc:	3301      	adds	r3, #1
 80016fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (token != NULL)
 8001702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e4      	bne.n	80016d2 <LoadSavedParam+0x32>
    }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	377c      	adds	r7, #124	; 0x7c
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	2000000c 	.word	0x2000000c
 8001718:	0800c028 	.word	0x0800c028

0800171c <SaveSystemParams>:

void SaveSystemParams (uint8_t *NoOfWords)
{
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b09a      	sub	sp, #104	; 0x68
 8001720:	af04      	add	r7, sp, #16
 8001722:	6078      	str	r0, [r7, #4]
	char SaveBuffer[80];
	TxPCLen = sprintf(SaveBuffer,"%.2f/%d/%d/%d"
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <SaveSystemParams+0x8c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff0d 	bl	8000548 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	491e      	ldr	r1, [pc, #120]	; (80017ac <SaveSystemParams+0x90>)
 8001734:	7809      	ldrb	r1, [r1, #0]
 8001736:	460c      	mov	r4, r1
 8001738:	491d      	ldr	r1, [pc, #116]	; (80017b0 <SaveSystemParams+0x94>)
 800173a:	8809      	ldrh	r1, [r1, #0]
 800173c:	460d      	mov	r5, r1
 800173e:	491d      	ldr	r1, [pc, #116]	; (80017b4 <SaveSystemParams+0x98>)
 8001740:	7809      	ldrb	r1, [r1, #0]
 8001742:	f107 0008 	add.w	r0, r7, #8
 8001746:	9102      	str	r1, [sp, #8]
 8001748:	9501      	str	r5, [sp, #4]
 800174a:	9400      	str	r4, [sp, #0]
 800174c:	491a      	ldr	r1, [pc, #104]	; (80017b8 <SaveSystemParams+0x9c>)
 800174e:	f006 fe01 	bl	8008354 <siprintf>
 8001752:	4603      	mov	r3, r0
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <SaveSystemParams+0xa0>)
 8001758:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime); // Combine to a string
	*NoOfWords = (strlen(SaveBuffer)/4)+((strlen(SaveBuffer)%4)!=0);
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd36 	bl	80001d0 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	b2dc      	uxtb	r4, r3
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fd2e 	bl	80001d0 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf14      	ite	ne
 800177e:	2301      	movne	r3, #1
 8001780:	2300      	moveq	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4423      	add	r3, r4
 8001786:	b2da      	uxtb	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	701a      	strb	r2, [r3, #0]
	Flash_Write_Data(MemoryAddress , (uint32_t *)SaveBuffer, *NoOfWords);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b29a      	uxth	r2, r3
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	4619      	mov	r1, r3
 8001798:	4809      	ldr	r0, [pc, #36]	; (80017c0 <SaveSystemParams+0xa4>)
 800179a:	f7ff fca7 	bl	80010ec <Flash_Write_Data>
}
 800179e:	bf00      	nop
 80017a0:	3758      	adds	r7, #88	; 0x58
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bdb0      	pop	{r4, r5, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20003330 	.word	0x20003330
 80017ac:	20003335 	.word	0x20003335
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20003334 	.word	0x20003334
 80017b8:	0800c02c 	.word	0x0800c02c
 80017bc:	20000414 	.word	0x20000414
 80017c0:	08040000 	.word	0x08040000
 80017c4:	00000000 	.word	0x00000000

080017c8 <LinearGeneration>:

void LinearGeneration (float *var, float slope, float Amplitude)
// Amplitude is the limit of the value
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017d4:	edc7 0a01 	vstr	s1, [r7, #4]

//	float ReturnValue;
//	ReturnValue = (InitialValue + (float)(slope*Time*0.001)); //
	if (slope >= 0)
 80017d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	db0d      	blt.n	8001802 <LinearGeneration+0x3a>
	{
		if (*var >= Amplitude)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	d811      	bhi.n	800181e <LinearGeneration+0x56>
			{
				*var = Amplitude;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	601a      	str	r2, [r3, #0]
				return;
 8001800:	e036      	b.n	8001870 <LinearGeneration+0xa8>
			}
	}
	else
	{
		if (*var <= Amplitude)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ed97 7a01 	vldr	s14, [r7, #4]
 800180c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	db03      	blt.n	800181e <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]
				return;
 800181c:	e028      	b.n	8001870 <LinearGeneration+0xa8>
			}
	}
	*var += slope*SampleTime*0.001; // *0.001 to convert to second
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe90 	bl	8000548 <__aeabi_f2d>
 8001828:	4604      	mov	r4, r0
 800182a:	460d      	mov	r5, r1
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <LinearGeneration+0xb8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001838:	edd7 7a02 	vldr	s15, [r7, #8]
 800183c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001840:	ee17 0a90 	vmov	r0, s15
 8001844:	f7fe fe80 	bl	8000548 <__aeabi_f2d>
 8001848:	a30b      	add	r3, pc, #44	; (adr r3, 8001878 <LinearGeneration+0xb0>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fed3 	bl	80005f8 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fd17 	bl	800028c <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f9bf 	bl	8000be8 <__aeabi_d2f>
 800186a:	4602      	mov	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bdb0      	pop	{r4, r5, r7, pc}
 8001876:	bf00      	nop
 8001878:	d2f1a9fc 	.word	0xd2f1a9fc
 800187c:	3f50624d 	.word	0x3f50624d
 8001880:	20003334 	.word	0x20003334

08001884 <StopPulseGenerating>:


void StopPulseGenerating()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	PulseGenerationFlag = false; //
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <StopPulseGenerating+0x2c>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 800188e:	4809      	ldr	r0, [pc, #36]	; (80018b4 <StopPulseGenerating+0x30>)
 8001890:	f004 f822 	bl	80058d8 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_RESET);//Reset Pin status
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <StopPulseGenerating+0x34>)
 800189c:	f003 fad0 	bl	8004e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port,PC8_PR_Pin, GPIO_PIN_RESET);//Reset Pin status
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <StopPulseGenerating+0x38>)
 80018a8:	f003 faca 	bl	8004e40 <HAL_GPIO_WritePin>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000436 	.word	0x20000436
 80018b4:	2000026c 	.word	0x2000026c
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40020800 	.word	0x40020800

080018c0 <InitPulseGenerating>:
void InitPulseGenerating()
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); //
 80018c4:	2201      	movs	r2, #1
 80018c6:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018ca:	4807      	ldr	r0, [pc, #28]	; (80018e8 <InitPulseGenerating+0x28>)
 80018cc:	f003 fab8 	bl	8004e40 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 80018d0:	2201      	movs	r2, #1
 80018d2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018d6:	4805      	ldr	r0, [pc, #20]	; (80018ec <InitPulseGenerating+0x2c>)
 80018d8:	f003 fab2 	bl	8004e40 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3
 80018dc:	4804      	ldr	r0, [pc, #16]	; (80018f0 <InitPulseGenerating+0x30>)
 80018de:	f003 ff8b 	bl	80057f8 <HAL_TIM_Base_Start_IT>
}
 80018e2:	bf00      	nop
 80018e4:	bd80      	pop	{r7, pc}
 80018e6:	bf00      	nop
 80018e8:	40020800 	.word	0x40020800
 80018ec:	40021000 	.word	0x40021000
 80018f0:	2000026c 	.word	0x2000026c
 80018f4:	00000000 	.word	0x00000000

080018f8 <CalculateTimer3Period>:
	}
	return false;
}

int CalculateTimer3Period (bool DriverType, float speed)
{
 80018f8:	b5b0      	push	{r4, r5, r7, lr}
 80018fa:	b082      	sub	sp, #8
 80018fc:	af00      	add	r7, sp, #0
 80018fe:	4603      	mov	r3, r0
 8001900:	ed87 0a00 	vstr	s0, [r7]
 8001904:	71fb      	strb	r3, [r7, #7]
	// DriverType = true ->  Higen FDA7000 Driver
	// DriverType = false -> ASDA A3 Driver
	// Speed in rpm
	if (DriverType) // Higen FDA7000 Driver
 8001906:	79fb      	ldrb	r3, [r7, #7]
 8001908:	2b00      	cmp	r3, #0
 800190a:	d037      	beq.n	800197c <CalculateTimer3Period+0x84>
	{
		return (int)((float)(120000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 800190c:	edd7 7a00 	vldr	s15, [r7]
 8001910:	eef0 7ae7 	vabs.f32	s15, s15
 8001914:	ee17 0a90 	vmov	r0, s15
 8001918:	f7fe fe16 	bl	8000548 <__aeabi_f2d>
 800191c:	4604      	mov	r4, r0
 800191e:	460d      	mov	r5, r1
 8001920:	4b39      	ldr	r3, [pc, #228]	; (8001a08 <CalculateTimer3Period+0x110>)
 8001922:	881b      	ldrh	r3, [r3, #0]
 8001924:	ee07 3a90 	vmov	s15, r3
 8001928:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800192c:	ee17 0a90 	vmov	r0, s15
 8001930:	f7fe fe0a 	bl	8000548 <__aeabi_f2d>
 8001934:	4602      	mov	r2, r0
 8001936:	460b      	mov	r3, r1
 8001938:	4620      	mov	r0, r4
 800193a:	4629      	mov	r1, r5
 800193c:	f7fe fe5c 	bl	80005f8 <__aeabi_dmul>
 8001940:	4602      	mov	r2, r0
 8001942:	460b      	mov	r3, r1
 8001944:	a12c      	add	r1, pc, #176	; (adr r1, 80019f8 <CalculateTimer3Period+0x100>)
 8001946:	e9d1 0100 	ldrd	r0, r1, [r1]
 800194a:	f7fe ff7f 	bl	800084c <__aeabi_ddiv>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	4610      	mov	r0, r2
 8001954:	4619      	mov	r1, r3
 8001956:	f7ff f947 	bl	8000be8 <__aeabi_d2f>
 800195a:	4603      	mov	r3, r0
 800195c:	4618      	mov	r0, r3
 800195e:	f7fe fdf3 	bl	8000548 <__aeabi_f2d>
 8001962:	f04f 0200 	mov.w	r2, #0
 8001966:	4b29      	ldr	r3, [pc, #164]	; (8001a0c <CalculateTimer3Period+0x114>)
 8001968:	f7fe fc90 	bl	800028c <__adddf3>
 800196c:	4602      	mov	r2, r0
 800196e:	460b      	mov	r3, r1
 8001970:	4610      	mov	r0, r2
 8001972:	4619      	mov	r1, r3
 8001974:	f7ff f8f0 	bl	8000b58 <__aeabi_d2iz>
 8001978:	4603      	mov	r3, r0
 800197a:	e036      	b.n	80019ea <CalculateTimer3Period+0xf2>
	}
	else
	{
		return (int)((float)(15000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 800197c:	edd7 7a00 	vldr	s15, [r7]
 8001980:	eef0 7ae7 	vabs.f32	s15, s15
 8001984:	ee17 0a90 	vmov	r0, s15
 8001988:	f7fe fdde 	bl	8000548 <__aeabi_f2d>
 800198c:	4604      	mov	r4, r0
 800198e:	460d      	mov	r5, r1
 8001990:	4b1d      	ldr	r3, [pc, #116]	; (8001a08 <CalculateTimer3Period+0x110>)
 8001992:	881b      	ldrh	r3, [r3, #0]
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199c:	ee17 0a90 	vmov	r0, s15
 80019a0:	f7fe fdd2 	bl	8000548 <__aeabi_f2d>
 80019a4:	4602      	mov	r2, r0
 80019a6:	460b      	mov	r3, r1
 80019a8:	4620      	mov	r0, r4
 80019aa:	4629      	mov	r1, r5
 80019ac:	f7fe fe24 	bl	80005f8 <__aeabi_dmul>
 80019b0:	4602      	mov	r2, r0
 80019b2:	460b      	mov	r3, r1
 80019b4:	a112      	add	r1, pc, #72	; (adr r1, 8001a00 <CalculateTimer3Period+0x108>)
 80019b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019ba:	f7fe ff47 	bl	800084c <__aeabi_ddiv>
 80019be:	4602      	mov	r2, r0
 80019c0:	460b      	mov	r3, r1
 80019c2:	4610      	mov	r0, r2
 80019c4:	4619      	mov	r1, r3
 80019c6:	f7ff f90f 	bl	8000be8 <__aeabi_d2f>
 80019ca:	4603      	mov	r3, r0
 80019cc:	4618      	mov	r0, r3
 80019ce:	f7fe fdbb 	bl	8000548 <__aeabi_f2d>
 80019d2:	f04f 0200 	mov.w	r2, #0
 80019d6:	4b0d      	ldr	r3, [pc, #52]	; (8001a0c <CalculateTimer3Period+0x114>)
 80019d8:	f7fe fc58 	bl	800028c <__adddf3>
 80019dc:	4602      	mov	r2, r0
 80019de:	460b      	mov	r3, r1
 80019e0:	4610      	mov	r0, r2
 80019e2:	4619      	mov	r1, r3
 80019e4:	f7ff f8b8 	bl	8000b58 <__aeabi_d2iz>
 80019e8:	4603      	mov	r3, r0
	}
}
 80019ea:	4618      	mov	r0, r3
 80019ec:	3708      	adds	r7, #8
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bdb0      	pop	{r4, r5, r7, pc}
 80019f2:	bf00      	nop
 80019f4:	f3af 8000 	nop.w
 80019f8:	00000000 	.word	0x00000000
 80019fc:	419c9c38 	.word	0x419c9c38
 8001a00:	00000000 	.word	0x00000000
 8001a04:	416c9c38 	.word	0x416c9c38
 8001a08:	2000000a 	.word	0x2000000a
 8001a0c:	3fe00000 	.word	0x3fe00000

08001a10 <CheckGoingToRefPosition>:

bool CheckGoingToRefPosition(bool _direction, int RefPulsePosition) // return true when finish going down, else return false;
// direction = true => go down, false => go up
{
 8001a10:	b580      	push	{r7, lr}
 8001a12:	b082      	sub	sp, #8
 8001a14:	af00      	add	r7, sp, #0
 8001a16:	4603      	mov	r3, r0
 8001a18:	6039      	str	r1, [r7, #0]
 8001a1a:	71fb      	strb	r3, [r7, #7]
	TargetPosition = RefPulsePosition;
 8001a1c:	683b      	ldr	r3, [r7, #0]
 8001a1e:	4abc      	ldr	r2, [pc, #752]	; (8001d10 <CheckGoingToRefPosition+0x300>)
 8001a20:	6013      	str	r3, [r2, #0]
	if (MotorDriver) // FDA7000 Driver, PosCmd based
 8001a22:	4bbc      	ldr	r3, [pc, #752]	; (8001d14 <CheckGoingToRefPosition+0x304>)
 8001a24:	781b      	ldrb	r3, [r3, #0]
 8001a26:	2b00      	cmp	r3, #0
 8001a28:	f000 80dd 	beq.w	8001be6 <CheckGoingToRefPosition+0x1d6>
	{
		// Start reducing the speed
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/60))
 8001a2c:	4bba      	ldr	r3, [pc, #744]	; (8001d18 <CheckGoingToRefPosition+0x308>)
 8001a2e:	681b      	ldr	r3, [r3, #0]
 8001a30:	683a      	ldr	r2, [r7, #0]
 8001a32:	1ad2      	subs	r2, r2, r3
 8001a34:	4bb9      	ldr	r3, [pc, #740]	; (8001d1c <CheckGoingToRefPosition+0x30c>)
 8001a36:	681b      	ldr	r3, [r3, #0]
 8001a38:	4413      	add	r3, r2
 8001a3a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001a3e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001a42:	4bb7      	ldr	r3, [pc, #732]	; (8001d20 <CheckGoingToRefPosition+0x310>)
 8001a44:	881b      	ldrh	r3, [r3, #0]
 8001a46:	4619      	mov	r1, r3
 8001a48:	4bb6      	ldr	r3, [pc, #728]	; (8001d24 <CheckGoingToRefPosition+0x314>)
 8001a4a:	781b      	ldrb	r3, [r3, #0]
 8001a4c:	fb01 f303 	mul.w	r3, r1, r3
 8001a50:	49b5      	ldr	r1, [pc, #724]	; (8001d28 <CheckGoingToRefPosition+0x318>)
 8001a52:	fb81 0103 	smull	r0, r1, r1, r3
 8001a56:	10c9      	asrs	r1, r1, #3
 8001a58:	17db      	asrs	r3, r3, #31
 8001a5a:	1acb      	subs	r3, r1, r3
 8001a5c:	429a      	cmp	r2, r3
 8001a5e:	dc52      	bgt.n	8001b06 <CheckGoingToRefPosition+0xf6>
		{
			if (_direction) // go down
 8001a60:	79fb      	ldrb	r3, [r7, #7]
 8001a62:	2b00      	cmp	r3, #0
 8001a64:	d01d      	beq.n	8001aa2 <CheckGoingToRefPosition+0x92>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*9.549,20); //-EpsilonPulling means the spd is negative
 8001a66:	4bb1      	ldr	r3, [pc, #708]	; (8001d2c <CheckGoingToRefPosition+0x31c>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	eef1 7a67 	vneg.f32	s15, s15
 8001a70:	ee17 3a90 	vmov	r3, s15
 8001a74:	4618      	mov	r0, r3
 8001a76:	f7fe fd67 	bl	8000548 <__aeabi_f2d>
 8001a7a:	a3a3      	add	r3, pc, #652	; (adr r3, 8001d08 <CheckGoingToRefPosition+0x2f8>)
 8001a7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001a80:	f7fe fdba 	bl	80005f8 <__aeabi_dmul>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4610      	mov	r0, r2
 8001a8a:	4619      	mov	r1, r3
 8001a8c:	f7ff f8ac 	bl	8000be8 <__aeabi_d2f>
 8001a90:	4603      	mov	r3, r0
 8001a92:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001a96:	ee00 3a10 	vmov	s0, r3
 8001a9a:	48a5      	ldr	r0, [pc, #660]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001a9c:	f7ff fe94 	bl	80017c8 <LinearGeneration>
 8001aa0:	e017      	b.n	8001ad2 <CheckGoingToRefPosition+0xc2>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*9.549,-20); //-EpsilonPulling means the spd is negative
 8001aa2:	4ba2      	ldr	r3, [pc, #648]	; (8001d2c <CheckGoingToRefPosition+0x31c>)
 8001aa4:	681b      	ldr	r3, [r3, #0]
 8001aa6:	4618      	mov	r0, r3
 8001aa8:	f7fe fd4e 	bl	8000548 <__aeabi_f2d>
 8001aac:	a396      	add	r3, pc, #600	; (adr r3, 8001d08 <CheckGoingToRefPosition+0x2f8>)
 8001aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ab2:	f7fe fda1 	bl	80005f8 <__aeabi_dmul>
 8001ab6:	4602      	mov	r2, r0
 8001ab8:	460b      	mov	r3, r1
 8001aba:	4610      	mov	r0, r2
 8001abc:	4619      	mov	r1, r3
 8001abe:	f7ff f893 	bl	8000be8 <__aeabi_d2f>
 8001ac2:	4603      	mov	r3, r0
 8001ac4:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001ac8:	ee00 3a10 	vmov	s0, r3
 8001acc:	4898      	ldr	r0, [pc, #608]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001ace:	f7ff fe7b 	bl	80017c8 <LinearGeneration>
			}
			if (SpeedCmd != 0)
 8001ad2:	4b97      	ldr	r3, [pc, #604]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001ad4:	edd3 7a00 	vldr	s15, [r3]
 8001ad8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001adc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ae0:	d070      	beq.n	8001bc4 <CheckGoingToRefPosition+0x1b4>
			{
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001ae2:	4b8c      	ldr	r3, [pc, #560]	; (8001d14 <CheckGoingToRefPosition+0x304>)
 8001ae4:	781b      	ldrb	r3, [r3, #0]
 8001ae6:	4a92      	ldr	r2, [pc, #584]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001ae8:	edd2 7a00 	vldr	s15, [r2]
 8001aec:	eeb0 0a67 	vmov.f32	s0, s15
 8001af0:	4618      	mov	r0, r3
 8001af2:	f7ff ff01 	bl	80018f8 <CalculateTimer3Period>
 8001af6:	4603      	mov	r3, r0
 8001af8:	b29a      	uxth	r2, r3
 8001afa:	4b8e      	ldr	r3, [pc, #568]	; (8001d34 <CheckGoingToRefPosition+0x324>)
 8001afc:	801a      	strh	r2, [r3, #0]

				PulseGenerationFlag = true;
 8001afe:	4b8e      	ldr	r3, [pc, #568]	; (8001d38 <CheckGoingToRefPosition+0x328>)
 8001b00:	2201      	movs	r2, #1
 8001b02:	701a      	strb	r2, [r3, #0]
 8001b04:	e05e      	b.n	8001bc4 <CheckGoingToRefPosition+0x1b4>
			}
		}
		else // Acclerate going
		{
			// Ramping the speed cmd
			if (_direction) // go down
 8001b06:	79fb      	ldrb	r3, [r7, #7]
 8001b08:	2b00      	cmp	r3, #0
 8001b0a:	d01e      	beq.n	8001b4a <CheckGoingToRefPosition+0x13a>
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*9.549,PullingSpeed);
 8001b0c:	4b87      	ldr	r3, [pc, #540]	; (8001d2c <CheckGoingToRefPosition+0x31c>)
 8001b0e:	681b      	ldr	r3, [r3, #0]
 8001b10:	4618      	mov	r0, r3
 8001b12:	f7fe fd19 	bl	8000548 <__aeabi_f2d>
 8001b16:	a37c      	add	r3, pc, #496	; (adr r3, 8001d08 <CheckGoingToRefPosition+0x2f8>)
 8001b18:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b1c:	f7fe fd6c 	bl	80005f8 <__aeabi_dmul>
 8001b20:	4602      	mov	r2, r0
 8001b22:	460b      	mov	r3, r1
 8001b24:	4610      	mov	r0, r2
 8001b26:	4619      	mov	r1, r3
 8001b28:	f7ff f85e 	bl	8000be8 <__aeabi_d2f>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	4b7d      	ldr	r3, [pc, #500]	; (8001d24 <CheckGoingToRefPosition+0x314>)
 8001b30:	781b      	ldrb	r3, [r3, #0]
 8001b32:	ee07 3a90 	vmov	s15, r3
 8001b36:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b3a:	eef0 0a67 	vmov.f32	s1, s15
 8001b3e:	ee00 2a10 	vmov	s0, r2
 8001b42:	487b      	ldr	r0, [pc, #492]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001b44:	f7ff fe40 	bl	80017c8 <LinearGeneration>
 8001b48:	e023      	b.n	8001b92 <CheckGoingToRefPosition+0x182>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*9.549,-PullingSpeed); //-EpsilonPulling means the spd is negative
 8001b4a:	4b78      	ldr	r3, [pc, #480]	; (8001d2c <CheckGoingToRefPosition+0x31c>)
 8001b4c:	edd3 7a00 	vldr	s15, [r3]
 8001b50:	eef1 7a67 	vneg.f32	s15, s15
 8001b54:	ee17 3a90 	vmov	r3, s15
 8001b58:	4618      	mov	r0, r3
 8001b5a:	f7fe fcf5 	bl	8000548 <__aeabi_f2d>
 8001b5e:	a36a      	add	r3, pc, #424	; (adr r3, 8001d08 <CheckGoingToRefPosition+0x2f8>)
 8001b60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001b64:	f7fe fd48 	bl	80005f8 <__aeabi_dmul>
 8001b68:	4602      	mov	r2, r0
 8001b6a:	460b      	mov	r3, r1
 8001b6c:	4610      	mov	r0, r2
 8001b6e:	4619      	mov	r1, r3
 8001b70:	f7ff f83a 	bl	8000be8 <__aeabi_d2f>
 8001b74:	4602      	mov	r2, r0
 8001b76:	4b6b      	ldr	r3, [pc, #428]	; (8001d24 <CheckGoingToRefPosition+0x314>)
 8001b78:	781b      	ldrb	r3, [r3, #0]
 8001b7a:	425b      	negs	r3, r3
 8001b7c:	ee07 3a90 	vmov	s15, r3
 8001b80:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001b84:	eef0 0a67 	vmov.f32	s1, s15
 8001b88:	ee00 2a10 	vmov	s0, r2
 8001b8c:	4868      	ldr	r0, [pc, #416]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001b8e:	f7ff fe1b 	bl	80017c8 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001b92:	4b67      	ldr	r3, [pc, #412]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001b94:	edd3 7a00 	vldr	s15, [r3]
 8001b98:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001b9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ba0:	d010      	beq.n	8001bc4 <CheckGoingToRefPosition+0x1b4>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001ba2:	4b5c      	ldr	r3, [pc, #368]	; (8001d14 <CheckGoingToRefPosition+0x304>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	4a62      	ldr	r2, [pc, #392]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001ba8:	edd2 7a00 	vldr	s15, [r2]
 8001bac:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb0:	4618      	mov	r0, r3
 8001bb2:	f7ff fea1 	bl	80018f8 <CalculateTimer3Period>
 8001bb6:	4603      	mov	r3, r0
 8001bb8:	b29a      	uxth	r2, r3
 8001bba:	4b5e      	ldr	r3, [pc, #376]	; (8001d34 <CheckGoingToRefPosition+0x324>)
 8001bbc:	801a      	strh	r2, [r3, #0]

				PulseGenerationFlag = true;
 8001bbe:	4b5e      	ldr	r3, [pc, #376]	; (8001d38 <CheckGoingToRefPosition+0x328>)
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	701a      	strb	r2, [r3, #0]
			}

		}
		//if ( abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 500) // Reach the ref position
		if (IsReachTargetPosition)
 8001bc4:	4b5d      	ldr	r3, [pc, #372]	; (8001d3c <CheckGoingToRefPosition+0x32c>)
 8001bc6:	781b      	ldrb	r3, [r3, #0]
 8001bc8:	b2db      	uxtb	r3, r3
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	f000 8107 	beq.w	8001dde <CheckGoingToRefPosition+0x3ce>
		{
			Timer3CountPeriod = 0;
 8001bd0:	4b58      	ldr	r3, [pc, #352]	; (8001d34 <CheckGoingToRefPosition+0x324>)
 8001bd2:	2200      	movs	r2, #0
 8001bd4:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001bd6:	4b56      	ldr	r3, [pc, #344]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001bd8:	f04f 0200 	mov.w	r2, #0
 8001bdc:	601a      	str	r2, [r3, #0]

			StopPulseGenerating();
 8001bde:	f7ff fe51 	bl	8001884 <StopPulseGenerating>
			return true;
 8001be2:	2301      	movs	r3, #1
 8001be4:	e0fc      	b.n	8001de0 <CheckGoingToRefPosition+0x3d0>
		}
	}
	else // ASDA A3, Actual Encoder based
	{
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/90)) // Start reducing the speed
 8001be6:	4b4c      	ldr	r3, [pc, #304]	; (8001d18 <CheckGoingToRefPosition+0x308>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	1ad2      	subs	r2, r2, r3
 8001bee:	4b4b      	ldr	r3, [pc, #300]	; (8001d1c <CheckGoingToRefPosition+0x30c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bf8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bfc:	4b48      	ldr	r3, [pc, #288]	; (8001d20 <CheckGoingToRefPosition+0x310>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4b48      	ldr	r3, [pc, #288]	; (8001d24 <CheckGoingToRefPosition+0x314>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	494d      	ldr	r1, [pc, #308]	; (8001d40 <CheckGoingToRefPosition+0x330>)
 8001c0c:	fb81 0103 	smull	r0, r1, r1, r3
 8001c10:	4419      	add	r1, r3
 8001c12:	1109      	asrs	r1, r1, #4
 8001c14:	17db      	asrs	r3, r3, #31
 8001c16:	1acb      	subs	r3, r1, r3
 8001c18:	429a      	cmp	r2, r3
 8001c1a:	dc53      	bgt.n	8001cc4 <CheckGoingToRefPosition+0x2b4>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001c1c:	79fb      	ldrb	r3, [r7, #7]
 8001c1e:	2b00      	cmp	r3, #0
 8001c20:	d01d      	beq.n	8001c5e <CheckGoingToRefPosition+0x24e>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*9.549,20);
 8001c22:	4b42      	ldr	r3, [pc, #264]	; (8001d2c <CheckGoingToRefPosition+0x31c>)
 8001c24:	edd3 7a00 	vldr	s15, [r3]
 8001c28:	eef1 7a67 	vneg.f32	s15, s15
 8001c2c:	ee17 3a90 	vmov	r3, s15
 8001c30:	4618      	mov	r0, r3
 8001c32:	f7fe fc89 	bl	8000548 <__aeabi_f2d>
 8001c36:	a334      	add	r3, pc, #208	; (adr r3, 8001d08 <CheckGoingToRefPosition+0x2f8>)
 8001c38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c3c:	f7fe fcdc 	bl	80005f8 <__aeabi_dmul>
 8001c40:	4602      	mov	r2, r0
 8001c42:	460b      	mov	r3, r1
 8001c44:	4610      	mov	r0, r2
 8001c46:	4619      	mov	r1, r3
 8001c48:	f7fe ffce 	bl	8000be8 <__aeabi_d2f>
 8001c4c:	4603      	mov	r3, r0
 8001c4e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001c52:	ee00 3a10 	vmov	s0, r3
 8001c56:	4836      	ldr	r0, [pc, #216]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001c58:	f7ff fdb6 	bl	80017c8 <LinearGeneration>
 8001c5c:	e017      	b.n	8001c8e <CheckGoingToRefPosition+0x27e>
				//SpeedCmd = LinearGeneration(RunningTime2,-GoingAcceleration*9.549,PrePullingSpeed,20,PullingSpeed); //-EpsilonPulling means the spd is negative
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*9.549,-20);
 8001c5e:	4b33      	ldr	r3, [pc, #204]	; (8001d2c <CheckGoingToRefPosition+0x31c>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc70 	bl	8000548 <__aeabi_f2d>
 8001c68:	a327      	add	r3, pc, #156	; (adr r3, 8001d08 <CheckGoingToRefPosition+0x2f8>)
 8001c6a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c6e:	f7fe fcc3 	bl	80005f8 <__aeabi_dmul>
 8001c72:	4602      	mov	r2, r0
 8001c74:	460b      	mov	r3, r1
 8001c76:	4610      	mov	r0, r2
 8001c78:	4619      	mov	r1, r3
 8001c7a:	f7fe ffb5 	bl	8000be8 <__aeabi_d2f>
 8001c7e:	4603      	mov	r3, r0
 8001c80:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001c84:	ee00 3a10 	vmov	s0, r3
 8001c88:	4829      	ldr	r0, [pc, #164]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001c8a:	f7ff fd9d 	bl	80017c8 <LinearGeneration>
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*9.549, PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
			}
			if (SpeedCmd != 0)
 8001c8e:	4b28      	ldr	r3, [pc, #160]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001c90:	edd3 7a00 	vldr	s15, [r3]
 8001c94:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c98:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c9c:	f000 808f 	beq.w	8001dbe <CheckGoingToRefPosition+0x3ae>
			{
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001ca0:	4b1c      	ldr	r3, [pc, #112]	; (8001d14 <CheckGoingToRefPosition+0x304>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	4a22      	ldr	r2, [pc, #136]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001ca6:	edd2 7a00 	vldr	s15, [r2]
 8001caa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cae:	4618      	mov	r0, r3
 8001cb0:	f7ff fe22 	bl	80018f8 <CalculateTimer3Period>
 8001cb4:	4603      	mov	r3, r0
 8001cb6:	b29a      	uxth	r2, r3
 8001cb8:	4b1e      	ldr	r3, [pc, #120]	; (8001d34 <CheckGoingToRefPosition+0x324>)
 8001cba:	801a      	strh	r2, [r3, #0]

				PulseGenerationFlag = true;
 8001cbc:	4b1e      	ldr	r3, [pc, #120]	; (8001d38 <CheckGoingToRefPosition+0x328>)
 8001cbe:	2201      	movs	r2, #1
 8001cc0:	701a      	strb	r2, [r3, #0]
 8001cc2:	e07c      	b.n	8001dbe <CheckGoingToRefPosition+0x3ae>
		}

		else
		{
			// Ramping the speed cmd
			if (_direction) // go down
 8001cc4:	79fb      	ldrb	r3, [r7, #7]
 8001cc6:	2b00      	cmp	r3, #0
 8001cc8:	d03c      	beq.n	8001d44 <CheckGoingToRefPosition+0x334>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*9.549,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*9.549,PullingSpeed);
 8001cca:	4b18      	ldr	r3, [pc, #96]	; (8001d2c <CheckGoingToRefPosition+0x31c>)
 8001ccc:	681b      	ldr	r3, [r3, #0]
 8001cce:	4618      	mov	r0, r3
 8001cd0:	f7fe fc3a 	bl	8000548 <__aeabi_f2d>
 8001cd4:	a30c      	add	r3, pc, #48	; (adr r3, 8001d08 <CheckGoingToRefPosition+0x2f8>)
 8001cd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001cda:	f7fe fc8d 	bl	80005f8 <__aeabi_dmul>
 8001cde:	4602      	mov	r2, r0
 8001ce0:	460b      	mov	r3, r1
 8001ce2:	4610      	mov	r0, r2
 8001ce4:	4619      	mov	r1, r3
 8001ce6:	f7fe ff7f 	bl	8000be8 <__aeabi_d2f>
 8001cea:	4602      	mov	r2, r0
 8001cec:	4b0d      	ldr	r3, [pc, #52]	; (8001d24 <CheckGoingToRefPosition+0x314>)
 8001cee:	781b      	ldrb	r3, [r3, #0]
 8001cf0:	ee07 3a90 	vmov	s15, r3
 8001cf4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cf8:	eef0 0a67 	vmov.f32	s1, s15
 8001cfc:	ee00 2a10 	vmov	s0, r2
 8001d00:	480b      	ldr	r0, [pc, #44]	; (8001d30 <CheckGoingToRefPosition+0x320>)
 8001d02:	f7ff fd61 	bl	80017c8 <LinearGeneration>
 8001d06:	e041      	b.n	8001d8c <CheckGoingToRefPosition+0x37c>
 8001d08:	872b020c 	.word	0x872b020c
 8001d0c:	40231916 	.word	0x40231916
 8001d10:	20003340 	.word	0x20003340
 8001d14:	20000003 	.word	0x20000003
 8001d18:	200033a0 	.word	0x200033a0
 8001d1c:	2000333c 	.word	0x2000333c
 8001d20:	2000000a 	.word	0x2000000a
 8001d24:	20003335 	.word	0x20003335
 8001d28:	66666667 	.word	0x66666667
 8001d2c:	20003338 	.word	0x20003338
 8001d30:	200033a8 	.word	0x200033a8
 8001d34:	2000332a 	.word	0x2000332a
 8001d38:	20000436 	.word	0x20000436
 8001d3c:	20000438 	.word	0x20000438
 8001d40:	88888889 	.word	0x88888889
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*9.549,-PullingSpeed);
 8001d44:	4b2a      	ldr	r3, [pc, #168]	; (8001df0 <CheckGoingToRefPosition+0x3e0>)
 8001d46:	edd3 7a00 	vldr	s15, [r3]
 8001d4a:	eef1 7a67 	vneg.f32	s15, s15
 8001d4e:	ee17 3a90 	vmov	r3, s15
 8001d52:	4618      	mov	r0, r3
 8001d54:	f7fe fbf8 	bl	8000548 <__aeabi_f2d>
 8001d58:	a323      	add	r3, pc, #140	; (adr r3, 8001de8 <CheckGoingToRefPosition+0x3d8>)
 8001d5a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001d5e:	f7fe fc4b 	bl	80005f8 <__aeabi_dmul>
 8001d62:	4602      	mov	r2, r0
 8001d64:	460b      	mov	r3, r1
 8001d66:	4610      	mov	r0, r2
 8001d68:	4619      	mov	r1, r3
 8001d6a:	f7fe ff3d 	bl	8000be8 <__aeabi_d2f>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	4b20      	ldr	r3, [pc, #128]	; (8001df4 <CheckGoingToRefPosition+0x3e4>)
 8001d72:	781b      	ldrb	r3, [r3, #0]
 8001d74:	425b      	negs	r3, r3
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d7e:	eef0 0a67 	vmov.f32	s1, s15
 8001d82:	ee00 2a10 	vmov	s0, r2
 8001d86:	481c      	ldr	r0, [pc, #112]	; (8001df8 <CheckGoingToRefPosition+0x3e8>)
 8001d88:	f7ff fd1e 	bl	80017c8 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001d8c:	4b1a      	ldr	r3, [pc, #104]	; (8001df8 <CheckGoingToRefPosition+0x3e8>)
 8001d8e:	edd3 7a00 	vldr	s15, [r3]
 8001d92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d9a:	d010      	beq.n	8001dbe <CheckGoingToRefPosition+0x3ae>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001d9c:	4b17      	ldr	r3, [pc, #92]	; (8001dfc <CheckGoingToRefPosition+0x3ec>)
 8001d9e:	781b      	ldrb	r3, [r3, #0]
 8001da0:	4a15      	ldr	r2, [pc, #84]	; (8001df8 <CheckGoingToRefPosition+0x3e8>)
 8001da2:	edd2 7a00 	vldr	s15, [r2]
 8001da6:	eeb0 0a67 	vmov.f32	s0, s15
 8001daa:	4618      	mov	r0, r3
 8001dac:	f7ff fda4 	bl	80018f8 <CalculateTimer3Period>
 8001db0:	4603      	mov	r3, r0
 8001db2:	b29a      	uxth	r2, r3
 8001db4:	4b12      	ldr	r3, [pc, #72]	; (8001e00 <CheckGoingToRefPosition+0x3f0>)
 8001db6:	801a      	strh	r2, [r3, #0]

				PulseGenerationFlag = true;
 8001db8:	4b12      	ldr	r3, [pc, #72]	; (8001e04 <CheckGoingToRefPosition+0x3f4>)
 8001dba:	2201      	movs	r2, #1
 8001dbc:	701a      	strb	r2, [r3, #0]
			}
		}

		//if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 50) // Reach the bottom position

		if (IsReachTargetPosition)
 8001dbe:	4b12      	ldr	r3, [pc, #72]	; (8001e08 <CheckGoingToRefPosition+0x3f8>)
 8001dc0:	781b      	ldrb	r3, [r3, #0]
 8001dc2:	b2db      	uxtb	r3, r3
 8001dc4:	2b00      	cmp	r3, #0
 8001dc6:	d00a      	beq.n	8001dde <CheckGoingToRefPosition+0x3ce>
		{
			Timer3CountPeriod = 0;
 8001dc8:	4b0d      	ldr	r3, [pc, #52]	; (8001e00 <CheckGoingToRefPosition+0x3f0>)
 8001dca:	2200      	movs	r2, #0
 8001dcc:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001dce:	4b0a      	ldr	r3, [pc, #40]	; (8001df8 <CheckGoingToRefPosition+0x3e8>)
 8001dd0:	f04f 0200 	mov.w	r2, #0
 8001dd4:	601a      	str	r2, [r3, #0]
			StopPulseGenerating();
 8001dd6:	f7ff fd55 	bl	8001884 <StopPulseGenerating>
			return true;
 8001dda:	2301      	movs	r3, #1
 8001ddc:	e000      	b.n	8001de0 <CheckGoingToRefPosition+0x3d0>
		}
	}
	return false;
 8001dde:	2300      	movs	r3, #0
}
 8001de0:	4618      	mov	r0, r3
 8001de2:	3708      	adds	r7, #8
 8001de4:	46bd      	mov	sp, r7
 8001de6:	bd80      	pop	{r7, pc}
 8001de8:	872b020c 	.word	0x872b020c
 8001dec:	40231916 	.word	0x40231916
 8001df0:	20003338 	.word	0x20003338
 8001df4:	20003335 	.word	0x20003335
 8001df8:	200033a8 	.word	0x200033a8
 8001dfc:	20000003 	.word	0x20000003
 8001e00:	2000332a 	.word	0x2000332a
 8001e04:	20000436 	.word	0x20000436
 8001e08:	20000438 	.word	0x20000438

08001e0c <InitializeRunning>:
}


// Init variable for running
void InitializeRunning ()
{
 8001e0c:	b480      	push	{r7}
 8001e0e:	af00      	add	r7, sp, #0
	StartRunning = true;
 8001e10:	4b0c      	ldr	r3, [pc, #48]	; (8001e44 <InitializeRunning+0x38>)
 8001e12:	2201      	movs	r2, #1
 8001e14:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 8001e16:	4b0c      	ldr	r3, [pc, #48]	; (8001e48 <InitializeRunning+0x3c>)
 8001e18:	2200      	movs	r2, #0
 8001e1a:	701a      	strb	r2, [r3, #0]
	PRIsToggled = false; // Go down
 8001e1c:	4b0b      	ldr	r3, [pc, #44]	; (8001e4c <InitializeRunning+0x40>)
 8001e1e:	2200      	movs	r2, #0
 8001e20:	701a      	strb	r2, [r3, #0]

	TargetPosition = 0;
 8001e22:	4b0b      	ldr	r3, [pc, #44]	; (8001e50 <InitializeRunning+0x44>)
 8001e24:	2200      	movs	r2, #0
 8001e26:	601a      	str	r2, [r3, #0]
	Timer3CountPeriod = 0;
 8001e28:	4b0a      	ldr	r3, [pc, #40]	; (8001e54 <InitializeRunning+0x48>)
 8001e2a:	2200      	movs	r2, #0
 8001e2c:	801a      	strh	r2, [r3, #0]

	PositionPulseCmd = 0;
 8001e2e:	4b0a      	ldr	r3, [pc, #40]	; (8001e58 <InitializeRunning+0x4c>)
 8001e30:	2200      	movs	r2, #0
 8001e32:	601a      	str	r2, [r3, #0]
	Index = 0;
 8001e34:	4b09      	ldr	r3, [pc, #36]	; (8001e5c <InitializeRunning+0x50>)
 8001e36:	2200      	movs	r2, #0
 8001e38:	801a      	strh	r2, [r3, #0]
}
 8001e3a:	bf00      	nop
 8001e3c:	46bd      	mov	sp, r7
 8001e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e42:	4770      	bx	lr
 8001e44:	20000432 	.word	0x20000432
 8001e48:	20000433 	.word	0x20000433
 8001e4c:	2000043e 	.word	0x2000043e
 8001e50:	20003340 	.word	0x20003340
 8001e54:	2000332a 	.word	0x2000332a
 8001e58:	20003348 	.word	0x20003348
 8001e5c:	2000332e 	.word	0x2000332e

08001e60 <StopExperiment>:

void StopExperiment ()
{
 8001e60:	b580      	push	{r7, lr}
 8001e62:	af00      	add	r7, sp, #0
	StopPulseGenerating(); // Stop pulse generation
 8001e64:	f7ff fd0e 	bl	8001884 <StopPulseGenerating>
	IsReachTargetPosition = false;
 8001e68:	4b0e      	ldr	r3, [pc, #56]	; (8001ea4 <StopExperiment+0x44>)
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	701a      	strb	r2, [r3, #0]
	IsPulseCheck = false;
 8001e6e:	4b0e      	ldr	r3, [pc, #56]	; (8001ea8 <StopExperiment+0x48>)
 8001e70:	2200      	movs	r2, #0
 8001e72:	701a      	strb	r2, [r3, #0]

	// Reset all the flag and state
	StartRunning = false;
 8001e74:	4b0d      	ldr	r3, [pc, #52]	; (8001eac <StopExperiment+0x4c>)
 8001e76:	2200      	movs	r2, #0
 8001e78:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 8001e7a:	4b0d      	ldr	r3, [pc, #52]	; (8001eb0 <StopExperiment+0x50>)
 8001e7c:	2200      	movs	r2, #0
 8001e7e:	701a      	strb	r2, [r3, #0]
	CompleteDropping = false;
 8001e80:	4b0c      	ldr	r3, [pc, #48]	; (8001eb4 <StopExperiment+0x54>)
 8001e82:	2200      	movs	r2, #0
 8001e84:	701a      	strb	r2, [r3, #0]
	CompletePulling = false;
 8001e86:	4b0c      	ldr	r3, [pc, #48]	; (8001eb8 <StopExperiment+0x58>)
 8001e88:	2200      	movs	r2, #0
 8001e8a:	701a      	strb	r2, [r3, #0]

	Timer3CountPeriod = 0;
 8001e8c:	4b0b      	ldr	r3, [pc, #44]	; (8001ebc <StopExperiment+0x5c>)
 8001e8e:	2200      	movs	r2, #0
 8001e90:	801a      	strh	r2, [r3, #0]
	PositionPulseCmd = 0;
 8001e92:	4b0b      	ldr	r3, [pc, #44]	; (8001ec0 <StopExperiment+0x60>)
 8001e94:	2200      	movs	r2, #0
 8001e96:	601a      	str	r2, [r3, #0]
	SpeedCmd = 0;
 8001e98:	4b0a      	ldr	r3, [pc, #40]	; (8001ec4 <StopExperiment+0x64>)
 8001e9a:	f04f 0200 	mov.w	r2, #0
 8001e9e:	601a      	str	r2, [r3, #0]
}
 8001ea0:	bf00      	nop
 8001ea2:	bd80      	pop	{r7, pc}
 8001ea4:	20000438 	.word	0x20000438
 8001ea8:	2000043f 	.word	0x2000043f
 8001eac:	20000432 	.word	0x20000432
 8001eb0:	20000433 	.word	0x20000433
 8001eb4:	20000439 	.word	0x20000439
 8001eb8:	2000043a 	.word	0x2000043a
 8001ebc:	2000332a 	.word	0x2000332a
 8001ec0:	20003348 	.word	0x20003348
 8001ec4:	200033a8 	.word	0x200033a8

08001ec8 <CalculateRunningSpec>:
void CalculateRunningSpec () // Calculate running parameters
{
 8001ec8:	b580      	push	{r7, lr}
 8001eca:	af00      	add	r7, sp, #0
	GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8001ecc:	4b10      	ldr	r3, [pc, #64]	; (8001f10 <CalculateRunningSpec+0x48>)
 8001ece:	781b      	ldrb	r3, [r3, #0]
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7fe fb27 	bl	8000524 <__aeabi_i2d>
 8001ed6:	a30c      	add	r3, pc, #48	; (adr r3, 8001f08 <CalculateRunningSpec+0x40>)
 8001ed8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001edc:	f7fe fb8c 	bl	80005f8 <__aeabi_dmul>
 8001ee0:	4602      	mov	r2, r0
 8001ee2:	460b      	mov	r3, r1
 8001ee4:	4610      	mov	r0, r2
 8001ee6:	4619      	mov	r1, r3
 8001ee8:	f04f 0200 	mov.w	r2, #0
 8001eec:	4b09      	ldr	r3, [pc, #36]	; (8001f14 <CalculateRunningSpec+0x4c>)
 8001eee:	f7fe fcad 	bl	800084c <__aeabi_ddiv>
 8001ef2:	4602      	mov	r2, r0
 8001ef4:	460b      	mov	r3, r1
 8001ef6:	4610      	mov	r0, r2
 8001ef8:	4619      	mov	r1, r3
 8001efa:	f7fe fe75 	bl	8000be8 <__aeabi_d2f>
 8001efe:	4603      	mov	r3, r0
 8001f00:	4a05      	ldr	r2, [pc, #20]	; (8001f18 <CalculateRunningSpec+0x50>)
 8001f02:	6013      	str	r3, [r2, #0]
}
 8001f04:	bf00      	nop
 8001f06:	bd80      	pop	{r7, pc}
 8001f08:	9999999a 	.word	0x9999999a
 8001f0c:	3fb99999 	.word	0x3fb99999
 8001f10:	20003335 	.word	0x20003335
 8001f14:	40080000 	.word	0x40080000
 8001f18:	20003338 	.word	0x20003338

08001f1c <InitParams>:


void InitParams ()
{
 8001f1c:	b580      	push	{r7, lr}
 8001f1e:	b082      	sub	sp, #8
 8001f20:	af00      	add	r7, sp, #0
	// Load Parameters from the memory
	LoadSavedParam(MemoryAddress,Params);
 8001f22:	4917      	ldr	r1, [pc, #92]	; (8001f80 <InitParams+0x64>)
 8001f24:	4817      	ldr	r0, [pc, #92]	; (8001f84 <InitParams+0x68>)
 8001f26:	f7ff fbbb 	bl	80016a0 <LoadSavedParam>

	// General Params
	DrumRadius = Params[0];
 8001f2a:	4b15      	ldr	r3, [pc, #84]	; (8001f80 <InitParams+0x64>)
 8001f2c:	681b      	ldr	r3, [r3, #0]
 8001f2e:	4a16      	ldr	r2, [pc, #88]	; (8001f88 <InitParams+0x6c>)
 8001f30:	6013      	str	r3, [r2, #0]
	PullingSpeed = Params[1];
 8001f32:	4b13      	ldr	r3, [pc, #76]	; (8001f80 <InitParams+0x64>)
 8001f34:	edd3 7a01 	vldr	s15, [r3, #4]
 8001f38:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f3c:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f40:	793b      	ldrb	r3, [r7, #4]
 8001f42:	b2da      	uxtb	r2, r3
 8001f44:	4b11      	ldr	r3, [pc, #68]	; (8001f8c <InitParams+0x70>)
 8001f46:	701a      	strb	r2, [r3, #0]
	StoppingTime = Params[2];
 8001f48:	4b0d      	ldr	r3, [pc, #52]	; (8001f80 <InitParams+0x64>)
 8001f4a:	edd3 7a02 	vldr	s15, [r3, #8]
 8001f4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f52:	ee17 3a90 	vmov	r3, s15
 8001f56:	b29a      	uxth	r2, r3
 8001f58:	4b0d      	ldr	r3, [pc, #52]	; (8001f90 <InitParams+0x74>)
 8001f5a:	801a      	strh	r2, [r3, #0]
	SampleTime = Params[3];
 8001f5c:	4b08      	ldr	r3, [pc, #32]	; (8001f80 <InitParams+0x64>)
 8001f5e:	edd3 7a03 	vldr	s15, [r3, #12]
 8001f62:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8001f66:	edc7 7a01 	vstr	s15, [r7, #4]
 8001f6a:	793b      	ldrb	r3, [r7, #4]
 8001f6c:	b2da      	uxtb	r2, r3
 8001f6e:	4b09      	ldr	r3, [pc, #36]	; (8001f94 <InitParams+0x78>)
 8001f70:	701a      	strb	r2, [r3, #0]

	//DistCoeff = Params[13];

	CalculateRunningSpec ();
 8001f72:	f7ff ffa9 	bl	8001ec8 <CalculateRunningSpec>
}
 8001f76:	bf00      	nop
 8001f78:	3708      	adds	r7, #8
 8001f7a:	46bd      	mov	sp, r7
 8001f7c:	bd80      	pop	{r7, pc}
 8001f7e:	bf00      	nop
 8001f80:	2000334c 	.word	0x2000334c
 8001f84:	08040000 	.word	0x08040000
 8001f88:	20003330 	.word	0x20003330
 8001f8c:	20003335 	.word	0x20003335
 8001f90:	20000008 	.word	0x20000008
 8001f94:	20003334 	.word	0x20003334

08001f98 <InitSimulating>:
void InitSimulating()
{
 8001f98:	b480      	push	{r7}
 8001f9a:	af00      	add	r7, sp, #0
	StartSimulating = true;
 8001f9c:	4b09      	ldr	r3, [pc, #36]	; (8001fc4 <InitSimulating+0x2c>)
 8001f9e:	2201      	movs	r2, #1
 8001fa0:	701a      	strb	r2, [r3, #0]
	PulseSimuCount = 0;
 8001fa2:	4b09      	ldr	r3, [pc, #36]	; (8001fc8 <InitSimulating+0x30>)
 8001fa4:	2200      	movs	r2, #0
 8001fa6:	601a      	str	r2, [r3, #0]
	TargetPosition = 0;
 8001fa8:	4b08      	ldr	r3, [pc, #32]	; (8001fcc <InitSimulating+0x34>)
 8001faa:	2200      	movs	r2, #0
 8001fac:	601a      	str	r2, [r3, #0]
	Timer3CountPeriod = 0;
 8001fae:	4b08      	ldr	r3, [pc, #32]	; (8001fd0 <InitSimulating+0x38>)
 8001fb0:	2200      	movs	r2, #0
 8001fb2:	801a      	strh	r2, [r3, #0]
	//HAL_TIM_Base_Start_IT(&htim3);
	Index = 0;
 8001fb4:	4b07      	ldr	r3, [pc, #28]	; (8001fd4 <InitSimulating+0x3c>)
 8001fb6:	2200      	movs	r2, #0
 8001fb8:	801a      	strh	r2, [r3, #0]
}
 8001fba:	bf00      	nop
 8001fbc:	46bd      	mov	sp, r7
 8001fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc2:	4770      	bx	lr
 8001fc4:	20000433 	.word	0x20000433
 8001fc8:	20003344 	.word	0x20003344
 8001fcc:	20003340 	.word	0x20003340
 8001fd0:	2000332a 	.word	0x2000332a
 8001fd4:	2000332e 	.word	0x2000332e

08001fd8 <StopSimulating>:
void StopSimulating()
{
 8001fd8:	b580      	push	{r7, lr}
 8001fda:	af00      	add	r7, sp, #0
	IsReachTargetPosition = false;
 8001fdc:	4b09      	ldr	r3, [pc, #36]	; (8002004 <StopSimulating+0x2c>)
 8001fde:	2200      	movs	r2, #0
 8001fe0:	701a      	strb	r2, [r3, #0]

	StartSimulating = false;
 8001fe2:	4b09      	ldr	r3, [pc, #36]	; (8002008 <StopSimulating+0x30>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
	StopPulseGenerating(); // Stop pulse generation
 8001fe8:	f7ff fc4c 	bl	8001884 <StopPulseGenerating>

	Index = 0;
 8001fec:	4b07      	ldr	r3, [pc, #28]	; (800200c <StopSimulating+0x34>)
 8001fee:	2200      	movs	r2, #0
 8001ff0:	801a      	strh	r2, [r3, #0]
	Timer3CountPeriod = 0;
 8001ff2:	4b07      	ldr	r3, [pc, #28]	; (8002010 <StopSimulating+0x38>)
 8001ff4:	2200      	movs	r2, #0
 8001ff6:	801a      	strh	r2, [r3, #0]
	PulseSimuCount = 0; // Reset PulseCmd
 8001ff8:	4b06      	ldr	r3, [pc, #24]	; (8002014 <StopSimulating+0x3c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	601a      	str	r2, [r3, #0]
}
 8001ffe:	bf00      	nop
 8002000:	bd80      	pop	{r7, pc}
 8002002:	bf00      	nop
 8002004:	20000438 	.word	0x20000438
 8002008:	20000433 	.word	0x20000433
 800200c:	2000332e 	.word	0x2000332e
 8002010:	2000332a 	.word	0x2000332a
 8002014:	20003344 	.word	0x20003344

08002018 <PulseGenerating>:
void PulseGenerating(int DeltaPulse)
{
 8002018:	b580      	push	{r7, lr}
 800201a:	b082      	sub	sp, #8
 800201c:	af00      	add	r7, sp, #0
 800201e:	6078      	str	r0, [r7, #4]
	if(StartSimulating)
 8002020:	4b16      	ldr	r3, [pc, #88]	; (800207c <PulseGenerating+0x64>)
 8002022:	781b      	ldrb	r3, [r3, #0]
 8002024:	2b00      	cmp	r3, #0
 8002026:	d005      	beq.n	8002034 <PulseGenerating+0x1c>
	{
		TargetPosition += DeltaPulse;
 8002028:	4b15      	ldr	r3, [pc, #84]	; (8002080 <PulseGenerating+0x68>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	687b      	ldr	r3, [r7, #4]
 800202e:	4413      	add	r3, r2
 8002030:	4a13      	ldr	r2, [pc, #76]	; (8002080 <PulseGenerating+0x68>)
 8002032:	6013      	str	r3, [r2, #0]
	}
	if(StartRunning)
 8002034:	4b13      	ldr	r3, [pc, #76]	; (8002084 <PulseGenerating+0x6c>)
 8002036:	781b      	ldrb	r3, [r3, #0]
 8002038:	2b00      	cmp	r3, #0
 800203a:	d002      	beq.n	8002042 <PulseGenerating+0x2a>
	{
		TargetPosition = DeltaPulse;
 800203c:	687b      	ldr	r3, [r7, #4]
 800203e:	4a10      	ldr	r2, [pc, #64]	; (8002080 <PulseGenerating+0x68>)
 8002040:	6013      	str	r3, [r2, #0]
	}

	if (DeltaPulse == 0)
 8002042:	687b      	ldr	r3, [r7, #4]
 8002044:	2b00      	cmp	r3, #0
 8002046:	d109      	bne.n	800205c <PulseGenerating+0x44>
	{
		HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 8002048:	480f      	ldr	r0, [pc, #60]	; (8002088 <PulseGenerating+0x70>)
 800204a:	f003 fc45 	bl	80058d8 <HAL_TIM_Base_Stop_IT>
		PulseGenerationFlag = false;
 800204e:	4b0f      	ldr	r3, [pc, #60]	; (800208c <PulseGenerating+0x74>)
 8002050:	2200      	movs	r2, #0
 8002052:	701a      	strb	r2, [r3, #0]
		Timer3Count = 0;
 8002054:	4b0e      	ldr	r3, [pc, #56]	; (8002090 <PulseGenerating+0x78>)
 8002056:	2200      	movs	r2, #0
 8002058:	801a      	strh	r2, [r3, #0]
		return;
 800205a:	e00b      	b.n	8002074 <PulseGenerating+0x5c>
//		Timer3CountPeriod = (uint16_t)((SampleTime*1000)/(4*NoPulse*2));
//		if (Timer3CountPeriod <= 4) //limit maximum speed
//		{
//			Timer3CountPeriod = 4;
//		}
		Timer3CountPeriod = 4;
 800205c:	4b0d      	ldr	r3, [pc, #52]	; (8002094 <PulseGenerating+0x7c>)
 800205e:	2204      	movs	r2, #4
 8002060:	801a      	strh	r2, [r3, #0]
		IsReachTargetPosition = false;
 8002062:	4b0d      	ldr	r3, [pc, #52]	; (8002098 <PulseGenerating+0x80>)
 8002064:	2200      	movs	r2, #0
 8002066:	701a      	strb	r2, [r3, #0]
		PulseGenerationFlag = true; //Enable Pulse Generation
 8002068:	4b08      	ldr	r3, [pc, #32]	; (800208c <PulseGenerating+0x74>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
		HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3
 800206e:	4806      	ldr	r0, [pc, #24]	; (8002088 <PulseGenerating+0x70>)
 8002070:	f003 fbc2 	bl	80057f8 <HAL_TIM_Base_Start_IT>
	}
}
 8002074:	3708      	adds	r7, #8
 8002076:	46bd      	mov	sp, r7
 8002078:	bd80      	pop	{r7, pc}
 800207a:	bf00      	nop
 800207c:	20000433 	.word	0x20000433
 8002080:	20003340 	.word	0x20003340
 8002084:	20000432 	.word	0x20000432
 8002088:	2000026c 	.word	0x2000026c
 800208c:	20000436 	.word	0x20000436
 8002090:	2000332c 	.word	0x2000332c
 8002094:	2000332a 	.word	0x2000332a
 8002098:	20000438 	.word	0x20000438

0800209c <Simulating>:
void Simulating()
{
 800209c:	b580      	push	{r7, lr}
 800209e:	af00      	add	r7, sp, #0
	if (Index >= DropCurveDataIndex)
 80020a0:	4b0d      	ldr	r3, [pc, #52]	; (80020d8 <Simulating+0x3c>)
 80020a2:	881a      	ldrh	r2, [r3, #0]
 80020a4:	4b0d      	ldr	r3, [pc, #52]	; (80020dc <Simulating+0x40>)
 80020a6:	881b      	ldrh	r3, [r3, #0]
 80020a8:	429a      	cmp	r2, r3
 80020aa:	d305      	bcc.n	80020b8 <Simulating+0x1c>
	{
		StopSimulating();
 80020ac:	f7ff ff94 	bl	8001fd8 <StopSimulating>
		Initialized = true;
 80020b0:	4b0b      	ldr	r3, [pc, #44]	; (80020e0 <Simulating+0x44>)
 80020b2:	2201      	movs	r2, #1
 80020b4:	701a      	strb	r2, [r3, #0]
		return;
 80020b6:	e00e      	b.n	80020d6 <Simulating+0x3a>
	}
	PulseGenerating(DropRefPosDeltaPulse[Index]);
 80020b8:	4b07      	ldr	r3, [pc, #28]	; (80020d8 <Simulating+0x3c>)
 80020ba:	881b      	ldrh	r3, [r3, #0]
 80020bc:	461a      	mov	r2, r3
 80020be:	4b09      	ldr	r3, [pc, #36]	; (80020e4 <Simulating+0x48>)
 80020c0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80020c4:	4618      	mov	r0, r3
 80020c6:	f7ff ffa7 	bl	8002018 <PulseGenerating>
	Index++;
 80020ca:	4b03      	ldr	r3, [pc, #12]	; (80020d8 <Simulating+0x3c>)
 80020cc:	881b      	ldrh	r3, [r3, #0]
 80020ce:	3301      	adds	r3, #1
 80020d0:	b29a      	uxth	r2, r3
 80020d2:	4b01      	ldr	r3, [pc, #4]	; (80020d8 <Simulating+0x3c>)
 80020d4:	801a      	strh	r2, [r3, #0]
}
 80020d6:	bd80      	pop	{r7, pc}
 80020d8:	2000332e 	.word	0x2000332e
 80020dc:	20000440 	.word	0x20000440
 80020e0:	2000043c 	.word	0x2000043c
 80020e4:	20000444 	.word	0x20000444

080020e8 <RunningExperiment>:

void RunningExperiment()
{
 80020e8:	b580      	push	{r7, lr}
 80020ea:	af00      	add	r7, sp, #0
	if (Index >= DropCurveDataIndex)
 80020ec:	4b0c      	ldr	r3, [pc, #48]	; (8002120 <RunningExperiment+0x38>)
 80020ee:	881a      	ldrh	r2, [r3, #0]
 80020f0:	4b0c      	ldr	r3, [pc, #48]	; (8002124 <RunningExperiment+0x3c>)
 80020f2:	881b      	ldrh	r3, [r3, #0]
 80020f4:	429a      	cmp	r2, r3
 80020f6:	d302      	bcc.n	80020fe <RunningExperiment+0x16>
	{
		StopExperiment();
 80020f8:	f7ff feb2 	bl	8001e60 <StopExperiment>
		return;
 80020fc:	e00e      	b.n	800211c <RunningExperiment+0x34>
	}
	PulseGenerating(DropRefPosDeltaPulse[Index]);
 80020fe:	4b08      	ldr	r3, [pc, #32]	; (8002120 <RunningExperiment+0x38>)
 8002100:	881b      	ldrh	r3, [r3, #0]
 8002102:	461a      	mov	r2, r3
 8002104:	4b08      	ldr	r3, [pc, #32]	; (8002128 <RunningExperiment+0x40>)
 8002106:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800210a:	4618      	mov	r0, r3
 800210c:	f7ff ff84 	bl	8002018 <PulseGenerating>
	Index++;
 8002110:	4b03      	ldr	r3, [pc, #12]	; (8002120 <RunningExperiment+0x38>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	3301      	adds	r3, #1
 8002116:	b29a      	uxth	r2, r3
 8002118:	4b01      	ldr	r3, [pc, #4]	; (8002120 <RunningExperiment+0x38>)
 800211a:	801a      	strh	r2, [r3, #0]
}
 800211c:	bd80      	pop	{r7, pc}
 800211e:	bf00      	nop
 8002120:	2000332e 	.word	0x2000332e
 8002124:	20000440 	.word	0x20000440
 8002128:	20000444 	.word	0x20000444
 800212c:	00000000 	.word	0x00000000

08002130 <ProcessReceivedCommand>:

void ProcessReceivedCommand () // Proceed the command from the UI
{
 8002130:	b580      	push	{r7, lr}
 8002132:	b088      	sub	sp, #32
 8002134:	af02      	add	r7, sp, #8
	switch ((int)MotionCode[0])
 8002136:	4bc1      	ldr	r3, [pc, #772]	; (800243c <ProcessReceivedCommand+0x30c>)
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002140:	ee17 3a90 	vmov	r3, s15
 8002144:	3b01      	subs	r3, #1
 8002146:	2b2d      	cmp	r3, #45	; 0x2d
 8002148:	f200 83ec 	bhi.w	8002924 <ProcessReceivedCommand+0x7f4>
 800214c:	a201      	add	r2, pc, #4	; (adr r2, 8002154 <ProcessReceivedCommand+0x24>)
 800214e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002152:	bf00      	nop
 8002154:	0800222f 	.word	0x0800222f
 8002158:	08002265 	.word	0x08002265
 800215c:	08002299 	.word	0x08002299
 8002160:	08002343 	.word	0x08002343
 8002164:	080023cb 	.word	0x080023cb
 8002168:	08002485 	.word	0x08002485
 800216c:	080024af 	.word	0x080024af
 8002170:	080024eb 	.word	0x080024eb
 8002174:	08002925 	.word	0x08002925
 8002178:	08002925 	.word	0x08002925
 800217c:	0800254b 	.word	0x0800254b
 8002180:	08002925 	.word	0x08002925
 8002184:	080025a7 	.word	0x080025a7
 8002188:	08002631 	.word	0x08002631
 800218c:	08002925 	.word	0x08002925
 8002190:	0800265b 	.word	0x0800265b
 8002194:	080026c9 	.word	0x080026c9
 8002198:	080026cf 	.word	0x080026cf
 800219c:	08002925 	.word	0x08002925
 80021a0:	08002925 	.word	0x08002925
 80021a4:	08002925 	.word	0x08002925
 80021a8:	08002925 	.word	0x08002925
 80021ac:	08002925 	.word	0x08002925
 80021b0:	08002925 	.word	0x08002925
 80021b4:	08002925 	.word	0x08002925
 80021b8:	08002925 	.word	0x08002925
 80021bc:	08002925 	.word	0x08002925
 80021c0:	080026fb 	.word	0x080026fb
 80021c4:	08002925 	.word	0x08002925
 80021c8:	08002925 	.word	0x08002925
 80021cc:	08002771 	.word	0x08002771
 80021d0:	08002925 	.word	0x08002925
 80021d4:	08002925 	.word	0x08002925
 80021d8:	08002925 	.word	0x08002925
 80021dc:	08002925 	.word	0x08002925
 80021e0:	08002925 	.word	0x08002925
 80021e4:	080027c3 	.word	0x080027c3
 80021e8:	08002813 	.word	0x08002813
 80021ec:	08002839 	.word	0x08002839
 80021f0:	08002925 	.word	0x08002925
 80021f4:	08002925 	.word	0x08002925
 80021f8:	080028b3 	.word	0x080028b3
 80021fc:	08002925 	.word	0x08002925
 8002200:	0800220d 	.word	0x0800220d
 8002204:	0800250d 	.word	0x0800250d
 8002208:	0800290f 	.word	0x0800290f
	{
		case 44: //Emergency Stop Change to 44 to avoid data confusion
			if ((int)MotionCode[1] == 0) // 44/0
 800220c:	4b8b      	ldr	r3, [pc, #556]	; (800243c <ProcessReceivedCommand+0x30c>)
 800220e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002212:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002216:	ee17 3a90 	vmov	r3, s15
 800221a:	2b00      	cmp	r3, #0
 800221c:	d104      	bne.n	8002228 <ProcessReceivedCommand+0xf8>
			{
				Estop(); // Estop button on the UI
 800221e:	f7ff f817 	bl	8001250 <Estop>
				StopPulseGenerating();
 8002222:	f7ff fb2f 	bl	8001884 <StopPulseGenerating>
				//EMO = true;
			}
			else {AlarmReset();}  // 44/1, alarm button
			break;
 8002226:	e392      	b.n	800294e <ProcessReceivedCommand+0x81e>
			else {AlarmReset();}  // 44/1, alarm button
 8002228:	f7fe ffec 	bl	8001204 <AlarmReset>
			break;
 800222c:	e38f      	b.n	800294e <ProcessReceivedCommand+0x81e>
		case 1: // Stop button;
			if ((int)MotionCode[1] == 1) // 1/1
 800222e:	4b83      	ldr	r3, [pc, #524]	; (800243c <ProcessReceivedCommand+0x30c>)
 8002230:	edd3 7a01 	vldr	s15, [r3, #4]
 8002234:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002238:	ee17 3a90 	vmov	r3, s15
 800223c:	2b01      	cmp	r3, #1
 800223e:	f040 8373 	bne.w	8002928 <ProcessReceivedCommand+0x7f8>
			{
				if (MotorDriver) // FDA 7000
 8002242:	4b7f      	ldr	r3, [pc, #508]	; (8002440 <ProcessReceivedCommand+0x310>)
 8002244:	781b      	ldrb	r3, [r3, #0]
 8002246:	2b00      	cmp	r3, #0
 8002248:	d004      	beq.n	8002254 <ProcessReceivedCommand+0x124>
				{
					Stop();
 800224a:	f7fe ffcb 	bl	80011e4 <Stop>
					StopExperiment();
 800224e:	f7ff fe07 	bl	8001e60 <StopExperiment>
					StopPulseGenerating();
					StopExperiment();
					IsHoming = false;
				}
			}
			break;
 8002252:	e369      	b.n	8002928 <ProcessReceivedCommand+0x7f8>
					StopPulseGenerating();
 8002254:	f7ff fb16 	bl	8001884 <StopPulseGenerating>
					StopExperiment();
 8002258:	f7ff fe02 	bl	8001e60 <StopExperiment>
					IsHoming = false;
 800225c:	4b79      	ldr	r3, [pc, #484]	; (8002444 <ProcessReceivedCommand+0x314>)
 800225e:	2200      	movs	r2, #0
 8002260:	701a      	strb	r2, [r3, #0]
			break;
 8002262:	e361      	b.n	8002928 <ProcessReceivedCommand+0x7f8>
		case 2: // Receive Position Data
			DropCurveDataIndex = (uint16_t)MotionCode[1];
 8002264:	4b75      	ldr	r3, [pc, #468]	; (800243c <ProcessReceivedCommand+0x30c>)
 8002266:	edd3 7a01 	vldr	s15, [r3, #4]
 800226a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800226e:	ee17 3a90 	vmov	r3, s15
 8002272:	b29a      	uxth	r2, r3
 8002274:	4b74      	ldr	r3, [pc, #464]	; (8002448 <ProcessReceivedCommand+0x318>)
 8002276:	801a      	strh	r2, [r3, #0]
			DropRefPosDeltaPulse[DropCurveDataIndex] = (uint8_t)MotionCode[2];
 8002278:	4b70      	ldr	r3, [pc, #448]	; (800243c <ProcessReceivedCommand+0x30c>)
 800227a:	edd3 7a02 	vldr	s15, [r3, #8]
 800227e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002282:	edc7 7a01 	vstr	s15, [r7, #4]
 8002286:	793b      	ldrb	r3, [r7, #4]
 8002288:	b2d9      	uxtb	r1, r3
 800228a:	4b6f      	ldr	r3, [pc, #444]	; (8002448 <ProcessReceivedCommand+0x318>)
 800228c:	881b      	ldrh	r3, [r3, #0]
 800228e:	461a      	mov	r2, r3
 8002290:	4b6e      	ldr	r3, [pc, #440]	; (800244c <ProcessReceivedCommand+0x31c>)
 8002292:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 8002296:	e35a      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 3: // Jog Control

			if ((int)MotionCode[1] == 1) // 3/1 move up button
 8002298:	4b68      	ldr	r3, [pc, #416]	; (800243c <ProcessReceivedCommand+0x30c>)
 800229a:	edd3 7a01 	vldr	s15, [r3, #4]
 800229e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80022a2:	ee17 3a90 	vmov	r3, s15
 80022a6:	2b01      	cmp	r3, #1
 80022a8:	d125      	bne.n	80022f6 <ProcessReceivedCommand+0x1c6>
			{
					if (PositionControlMode) // If the control Mode is Position Mode
 80022aa:	4b69      	ldr	r3, [pc, #420]	; (8002450 <ProcessReceivedCommand+0x320>)
 80022ac:	781b      	ldrb	r3, [r3, #0]
 80022ae:	2b00      	cmp	r3, #0
 80022b0:	d01e      	beq.n	80022f0 <ProcessReceivedCommand+0x1c0>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80022b2:	4b63      	ldr	r3, [pc, #396]	; (8002440 <ProcessReceivedCommand+0x310>)
 80022b4:	781b      	ldrb	r3, [r3, #0]
 80022b6:	4a67      	ldr	r2, [pc, #412]	; (8002454 <ProcessReceivedCommand+0x324>)
 80022b8:	8812      	ldrh	r2, [r2, #0]
 80022ba:	ee07 2a90 	vmov	s15, r2
 80022be:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80022c2:	eeb0 0a67 	vmov.f32	s0, s15
 80022c6:	4618      	mov	r0, r3
 80022c8:	f7ff fb16 	bl	80018f8 <CalculateTimer3Period>
 80022cc:	4603      	mov	r3, r0
 80022ce:	b29a      	uxth	r2, r3
 80022d0:	4b61      	ldr	r3, [pc, #388]	; (8002458 <ProcessReceivedCommand+0x328>)
 80022d2:	801a      	strh	r2, [r3, #0]
						PRIsToggled = true; // PR phase is 90 deg late
 80022d4:	4b61      	ldr	r3, [pc, #388]	; (800245c <ProcessReceivedCommand+0x32c>)
 80022d6:	2201      	movs	r2, #1
 80022d8:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up
 80022da:	4b61      	ldr	r3, [pc, #388]	; (8002460 <ProcessReceivedCommand+0x330>)
 80022dc:	2200      	movs	r2, #0
 80022de:	701a      	strb	r2, [r3, #0]

						InitPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 80022e0:	f7ff faee 	bl	80018c0 <InitPulseGenerating>
						PulseGenerationFlag = true;
 80022e4:	4b5f      	ldr	r3, [pc, #380]	; (8002464 <ProcessReceivedCommand+0x334>)
 80022e6:	2201      	movs	r2, #1
 80022e8:	701a      	strb	r2, [r3, #0]
						DisableSTOP(); // Turn off STOP to run
 80022ea:	f7fe ffbd 	bl	8001268 <DisableSTOP>
					else // Speed Mode
					{
						JogMoveDown(); // Disable the stop
					}
			}
			break;
 80022ee:	e32e      	b.n	800294e <ProcessReceivedCommand+0x81e>
						JogMoveUp(); // Disable the stop
 80022f0:	f7fe ffc6 	bl	8001280 <JogMoveUp>
			break;
 80022f4:	e32b      	b.n	800294e <ProcessReceivedCommand+0x81e>
					if (PositionControlMode) // If the control Mode is Position Mode
 80022f6:	4b56      	ldr	r3, [pc, #344]	; (8002450 <ProcessReceivedCommand+0x320>)
 80022f8:	781b      	ldrb	r3, [r3, #0]
 80022fa:	2b00      	cmp	r3, #0
 80022fc:	d01e      	beq.n	800233c <ProcessReceivedCommand+0x20c>
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80022fe:	4b50      	ldr	r3, [pc, #320]	; (8002440 <ProcessReceivedCommand+0x310>)
 8002300:	781b      	ldrb	r3, [r3, #0]
 8002302:	4a54      	ldr	r2, [pc, #336]	; (8002454 <ProcessReceivedCommand+0x324>)
 8002304:	8812      	ldrh	r2, [r2, #0]
 8002306:	ee07 2a90 	vmov	s15, r2
 800230a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800230e:	eeb0 0a67 	vmov.f32	s0, s15
 8002312:	4618      	mov	r0, r3
 8002314:	f7ff faf0 	bl	80018f8 <CalculateTimer3Period>
 8002318:	4603      	mov	r3, r0
 800231a:	b29a      	uxth	r2, r3
 800231c:	4b4e      	ldr	r3, [pc, #312]	; (8002458 <ProcessReceivedCommand+0x328>)
 800231e:	801a      	strh	r2, [r3, #0]
						PRIsToggled = false; //
 8002320:	4b4e      	ldr	r3, [pc, #312]	; (800245c <ProcessReceivedCommand+0x32c>)
 8002322:	2200      	movs	r2, #0
 8002324:	701a      	strb	r2, [r3, #0]
						Direction = true; // true = move down
 8002326:	4b4e      	ldr	r3, [pc, #312]	; (8002460 <ProcessReceivedCommand+0x330>)
 8002328:	2201      	movs	r2, #1
 800232a:	701a      	strb	r2, [r3, #0]
						InitPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 800232c:	f7ff fac8 	bl	80018c0 <InitPulseGenerating>
						PulseGenerationFlag = true;
 8002330:	4b4c      	ldr	r3, [pc, #304]	; (8002464 <ProcessReceivedCommand+0x334>)
 8002332:	2201      	movs	r2, #1
 8002334:	701a      	strb	r2, [r3, #0]
						DisableSTOP();	// Turn off STOP to run
 8002336:	f7fe ff97 	bl	8001268 <DisableSTOP>
			break;
 800233a:	e308      	b.n	800294e <ProcessReceivedCommand+0x81e>
						JogMoveDown(); // Disable the stop
 800233c:	f7fe ffb4 	bl	80012a8 <JogMoveDown>
			break;
 8002340:	e305      	b.n	800294e <ProcessReceivedCommand+0x81e>
		case 4: // Start Running Buton (Start Running Experiment)
			if ((int)MotionCode[1] == 1) // Start runing
 8002342:	4b3e      	ldr	r3, [pc, #248]	; (800243c <ProcessReceivedCommand+0x30c>)
 8002344:	edd3 7a01 	vldr	s15, [r3, #4]
 8002348:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800234c:	ee17 3a90 	vmov	r3, s15
 8002350:	2b01      	cmp	r3, #1
 8002352:	d137      	bne.n	80023c4 <ProcessReceivedCommand+0x294>
				{
					if ( Initialized )
 8002354:	4b44      	ldr	r3, [pc, #272]	; (8002468 <ProcessReceivedCommand+0x338>)
 8002356:	781b      	ldrb	r3, [r3, #0]
 8002358:	2b00      	cmp	r3, #0
 800235a:	d01a      	beq.n	8002392 <ProcessReceivedCommand+0x262>
					{
						TxPCLen = sprintf(ResponseMess,"g4/1e"); // Respond that the experiment started
 800235c:	4943      	ldr	r1, [pc, #268]	; (800246c <ProcessReceivedCommand+0x33c>)
 800235e:	4844      	ldr	r0, [pc, #272]	; (8002470 <ProcessReceivedCommand+0x340>)
 8002360:	f005 fff8 	bl	8008354 <siprintf>
 8002364:	4603      	mov	r3, r0
 8002366:	b2da      	uxtb	r2, r3
 8002368:	4b42      	ldr	r3, [pc, #264]	; (8002474 <ProcessReceivedCommand+0x344>)
 800236a:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800236c:	4b41      	ldr	r3, [pc, #260]	; (8002474 <ProcessReceivedCommand+0x344>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	b29a      	uxth	r2, r3
 8002372:	23c8      	movs	r3, #200	; 0xc8
 8002374:	493e      	ldr	r1, [pc, #248]	; (8002470 <ProcessReceivedCommand+0x340>)
 8002376:	4840      	ldr	r0, [pc, #256]	; (8002478 <ProcessReceivedCommand+0x348>)
 8002378:	f004 f90b 	bl	8006592 <HAL_UART_Transmit>
						HAL_Delay(200);
 800237c:	20c8      	movs	r0, #200	; 0xc8
 800237e:	f001 fee5 	bl	800414c <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002382:	220f      	movs	r2, #15
 8002384:	2100      	movs	r1, #0
 8002386:	483a      	ldr	r0, [pc, #232]	; (8002470 <ProcessReceivedCommand+0x340>)
 8002388:	f005 f95c 	bl	8007644 <memset>

						InitializeRunning ();
 800238c:	f7ff fd3e 	bl	8001e0c <InitializeRunning>
				}
			else // Stop running
				{
					StopExperiment();
				}
			break;
 8002390:	e2dd      	b.n	800294e <ProcessReceivedCommand+0x81e>
						TxPCLen = sprintf(ResponseMess,"g4/0e"); // Respond that the experiment can not start
 8002392:	493a      	ldr	r1, [pc, #232]	; (800247c <ProcessReceivedCommand+0x34c>)
 8002394:	4836      	ldr	r0, [pc, #216]	; (8002470 <ProcessReceivedCommand+0x340>)
 8002396:	f005 ffdd 	bl	8008354 <siprintf>
 800239a:	4603      	mov	r3, r0
 800239c:	b2da      	uxtb	r2, r3
 800239e:	4b35      	ldr	r3, [pc, #212]	; (8002474 <ProcessReceivedCommand+0x344>)
 80023a0:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80023a2:	4b34      	ldr	r3, [pc, #208]	; (8002474 <ProcessReceivedCommand+0x344>)
 80023a4:	781b      	ldrb	r3, [r3, #0]
 80023a6:	b29a      	uxth	r2, r3
 80023a8:	23c8      	movs	r3, #200	; 0xc8
 80023aa:	4931      	ldr	r1, [pc, #196]	; (8002470 <ProcessReceivedCommand+0x340>)
 80023ac:	4832      	ldr	r0, [pc, #200]	; (8002478 <ProcessReceivedCommand+0x348>)
 80023ae:	f004 f8f0 	bl	8006592 <HAL_UART_Transmit>
						HAL_Delay(200);
 80023b2:	20c8      	movs	r0, #200	; 0xc8
 80023b4:	f001 feca 	bl	800414c <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 80023b8:	220f      	movs	r2, #15
 80023ba:	2100      	movs	r1, #0
 80023bc:	482c      	ldr	r0, [pc, #176]	; (8002470 <ProcessReceivedCommand+0x340>)
 80023be:	f005 f941 	bl	8007644 <memset>
			break;
 80023c2:	e2c4      	b.n	800294e <ProcessReceivedCommand+0x81e>
					StopExperiment();
 80023c4:	f7ff fd4c 	bl	8001e60 <StopExperiment>
			break;
 80023c8:	e2c1      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 5: // Set Jog Speed
			if (PositionControlMode) // If it is the position control mode, then change the JogSpeed
 80023ca:	4b21      	ldr	r3, [pc, #132]	; (8002450 <ProcessReceivedCommand+0x320>)
 80023cc:	781b      	ldrb	r3, [r3, #0]
 80023ce:	2b00      	cmp	r3, #0
 80023d0:	f000 82ac 	beq.w	800292c <ProcessReceivedCommand+0x7fc>
			{
				JogSpeed = (int)(MotionCode[1]); // unit: rpm
 80023d4:	4b19      	ldr	r3, [pc, #100]	; (800243c <ProcessReceivedCommand+0x30c>)
 80023d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80023da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80023de:	ee17 3a90 	vmov	r3, s15
 80023e2:	b29a      	uxth	r2, r3
 80023e4:	4b1b      	ldr	r3, [pc, #108]	; (8002454 <ProcessReceivedCommand+0x324>)
 80023e6:	801a      	strh	r2, [r3, #0]
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80023e8:	4b15      	ldr	r3, [pc, #84]	; (8002440 <ProcessReceivedCommand+0x310>)
 80023ea:	781b      	ldrb	r3, [r3, #0]
 80023ec:	4a19      	ldr	r2, [pc, #100]	; (8002454 <ProcessReceivedCommand+0x324>)
 80023ee:	8812      	ldrh	r2, [r2, #0]
 80023f0:	ee07 2a90 	vmov	s15, r2
 80023f4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80023f8:	eeb0 0a67 	vmov.f32	s0, s15
 80023fc:	4618      	mov	r0, r3
 80023fe:	f7ff fa7b 	bl	80018f8 <CalculateTimer3Period>
 8002402:	4603      	mov	r3, r0
 8002404:	b29a      	uxth	r2, r3
 8002406:	4b14      	ldr	r3, [pc, #80]	; (8002458 <ProcessReceivedCommand+0x328>)
 8002408:	801a      	strh	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"j%de",JogSpeed);
 800240a:	4b12      	ldr	r3, [pc, #72]	; (8002454 <ProcessReceivedCommand+0x324>)
 800240c:	881b      	ldrh	r3, [r3, #0]
 800240e:	461a      	mov	r2, r3
 8002410:	491b      	ldr	r1, [pc, #108]	; (8002480 <ProcessReceivedCommand+0x350>)
 8002412:	4817      	ldr	r0, [pc, #92]	; (8002470 <ProcessReceivedCommand+0x340>)
 8002414:	f005 ff9e 	bl	8008354 <siprintf>
 8002418:	4603      	mov	r3, r0
 800241a:	b2da      	uxtb	r2, r3
 800241c:	4b15      	ldr	r3, [pc, #84]	; (8002474 <ProcessReceivedCommand+0x344>)
 800241e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 8002420:	4b14      	ldr	r3, [pc, #80]	; (8002474 <ProcessReceivedCommand+0x344>)
 8002422:	781b      	ldrb	r3, [r3, #0]
 8002424:	b29a      	uxth	r2, r3
 8002426:	23c8      	movs	r3, #200	; 0xc8
 8002428:	4911      	ldr	r1, [pc, #68]	; (8002470 <ProcessReceivedCommand+0x340>)
 800242a:	4813      	ldr	r0, [pc, #76]	; (8002478 <ProcessReceivedCommand+0x348>)
 800242c:	f004 f8b1 	bl	8006592 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess)); // Clear the array
 8002430:	220f      	movs	r2, #15
 8002432:	2100      	movs	r1, #0
 8002434:	480e      	ldr	r0, [pc, #56]	; (8002470 <ProcessReceivedCommand+0x340>)
 8002436:	f005 f905 	bl	8007644 <memset>
			}
			break;
 800243a:	e277      	b.n	800292c <ProcessReceivedCommand+0x7fc>
 800243c:	200033ac 	.word	0x200033ac
 8002440:	20000003 	.word	0x20000003
 8002444:	2000043b 	.word	0x2000043b
 8002448:	20000440 	.word	0x20000440
 800244c:	20000444 	.word	0x20000444
 8002450:	20000002 	.word	0x20000002
 8002454:	20000006 	.word	0x20000006
 8002458:	2000332a 	.word	0x2000332a
 800245c:	2000043e 	.word	0x2000043e
 8002460:	20000434 	.word	0x20000434
 8002464:	20000436 	.word	0x20000436
 8002468:	2000043c 	.word	0x2000043c
 800246c:	0800c03c 	.word	0x0800c03c
 8002470:	2000041c 	.word	0x2000041c
 8002474:	20000414 	.word	0x20000414
 8002478:	200002f8 	.word	0x200002f8
 800247c:	0800c044 	.word	0x0800c044
 8002480:	0800c04c 	.word	0x0800c04c

		case 6: // 6 request driver data
			if((int)MotionCode[1] == 1)
 8002484:	4ba4      	ldr	r3, [pc, #656]	; (8002718 <ProcessReceivedCommand+0x5e8>)
 8002486:	edd3 7a01 	vldr	s15, [r3, #4]
 800248a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800248e:	ee17 3a90 	vmov	r3, s15
 8002492:	2b01      	cmp	r3, #1
 8002494:	d107      	bne.n	80024a6 <ProcessReceivedCommand+0x376>
			{
				UIDataRequest = true;
 8002496:	4ba1      	ldr	r3, [pc, #644]	; (800271c <ProcessReceivedCommand+0x5ec>)
 8002498:	2201      	movs	r2, #1
 800249a:	701a      	strb	r2, [r3, #0]
				ReadMultiRegister(StE03,5);
 800249c:	2105      	movs	r1, #5
 800249e:	200c      	movs	r0, #12
 80024a0:	f7ff f882 	bl	80015a8 <ReadMultiRegister>
			} // 6/1 If the UI request data
			else
			{
				UIDataRequest = false;
			}
			break;
 80024a4:	e253      	b.n	800294e <ProcessReceivedCommand+0x81e>
				UIDataRequest = false;
 80024a6:	4b9d      	ldr	r3, [pc, #628]	; (800271c <ProcessReceivedCommand+0x5ec>)
 80024a8:	2200      	movs	r2, #0
 80024aa:	701a      	strb	r2, [r3, #0]
			break;
 80024ac:	e24f      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 7: // Save System Params
			// Save to the flash memory
			SaveSystemParams(&numofwords);
 80024ae:	489c      	ldr	r0, [pc, #624]	; (8002720 <ProcessReceivedCommand+0x5f0>)
 80024b0:	f7ff f934 	bl	800171c <SaveSystemParams>
			HAL_Delay(500);
 80024b4:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 80024b8:	f001 fe48 	bl	800414c <HAL_Delay>
			SaveSystemParams(&numofwords); // Do twice times
 80024bc:	4898      	ldr	r0, [pc, #608]	; (8002720 <ProcessReceivedCommand+0x5f0>)
 80024be:	f7ff f92d 	bl	800171c <SaveSystemParams>
			// Send back to the UI to notify
			char MessageBuffer[10];
			TxPCLen = sprintf(MessageBuffer,"r7/1e");
 80024c2:	f107 030c 	add.w	r3, r7, #12
 80024c6:	4997      	ldr	r1, [pc, #604]	; (8002724 <ProcessReceivedCommand+0x5f4>)
 80024c8:	4618      	mov	r0, r3
 80024ca:	f005 ff43 	bl	8008354 <siprintf>
 80024ce:	4603      	mov	r3, r0
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b95      	ldr	r3, [pc, #596]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 80024d4:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t *)MessageBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 80024d6:	4b94      	ldr	r3, [pc, #592]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 80024d8:	781b      	ldrb	r3, [r3, #0]
 80024da:	b29a      	uxth	r2, r3
 80024dc:	f107 010c 	add.w	r1, r7, #12
 80024e0:	2364      	movs	r3, #100	; 0x64
 80024e2:	4892      	ldr	r0, [pc, #584]	; (800272c <ProcessReceivedCommand+0x5fc>)
 80024e4:	f004 f855 	bl	8006592 <HAL_UART_Transmit>
			break;
 80024e8:	e231      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 8: // Request reading digital driver output
			if((int)MotionCode[1] == 1) {OutputDataRequest = true;} // 8/1 = request
 80024ea:	4b8b      	ldr	r3, [pc, #556]	; (8002718 <ProcessReceivedCommand+0x5e8>)
 80024ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80024f0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024f4:	ee17 3a90 	vmov	r3, s15
 80024f8:	2b01      	cmp	r3, #1
 80024fa:	d103      	bne.n	8002504 <ProcessReceivedCommand+0x3d4>
 80024fc:	4b8c      	ldr	r3, [pc, #560]	; (8002730 <ProcessReceivedCommand+0x600>)
 80024fe:	2201      	movs	r2, #1
 8002500:	701a      	strb	r2, [r3, #0]
			else OutputDataRequest = false; // 8/0 = stop request
			break;
 8002502:	e224      	b.n	800294e <ProcessReceivedCommand+0x81e>
			else OutputDataRequest = false; // 8/0 = stop request
 8002504:	4b8a      	ldr	r3, [pc, #552]	; (8002730 <ProcessReceivedCommand+0x600>)
 8002506:	2200      	movs	r2, #0
 8002508:	701a      	strb	r2, [r3, #0]
			break;
 800250a:	e220      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 45: // Load saved parameters

			// Send to the GUI
			TxPCLen = sprintf(TxPCBuff,"p%.2f/%d/%de"
 800250c:	4b89      	ldr	r3, [pc, #548]	; (8002734 <ProcessReceivedCommand+0x604>)
 800250e:	681b      	ldr	r3, [r3, #0]
 8002510:	4618      	mov	r0, r3
 8002512:	f7fe f819 	bl	8000548 <__aeabi_f2d>
 8002516:	4602      	mov	r2, r0
 8002518:	460b      	mov	r3, r1
 800251a:	4987      	ldr	r1, [pc, #540]	; (8002738 <ProcessReceivedCommand+0x608>)
 800251c:	7809      	ldrb	r1, [r1, #0]
 800251e:	4608      	mov	r0, r1
 8002520:	4986      	ldr	r1, [pc, #536]	; (800273c <ProcessReceivedCommand+0x60c>)
 8002522:	7809      	ldrb	r1, [r1, #0]
 8002524:	9101      	str	r1, [sp, #4]
 8002526:	9000      	str	r0, [sp, #0]
 8002528:	4985      	ldr	r1, [pc, #532]	; (8002740 <ProcessReceivedCommand+0x610>)
 800252a:	4886      	ldr	r0, [pc, #536]	; (8002744 <ProcessReceivedCommand+0x614>)
 800252c:	f005 ff12 	bl	8008354 <siprintf>
 8002530:	4603      	mov	r3, r0
 8002532:	b2da      	uxtb	r2, r3
 8002534:	4b7c      	ldr	r3, [pc, #496]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 8002536:	701a      	strb	r2, [r3, #0]
			                   ,DrumRadius, SampleTime, PullingSpeed); // Combine to a string
			HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // Send to uart6 to check the params are set or not
 8002538:	4b7b      	ldr	r3, [pc, #492]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 800253a:	781b      	ldrb	r3, [r3, #0]
 800253c:	b29a      	uxth	r2, r3
 800253e:	23c8      	movs	r3, #200	; 0xc8
 8002540:	4980      	ldr	r1, [pc, #512]	; (8002744 <ProcessReceivedCommand+0x614>)
 8002542:	487a      	ldr	r0, [pc, #488]	; (800272c <ProcessReceivedCommand+0x5fc>)
 8002544:	f004 f825 	bl	8006592 <HAL_UART_Transmit>
			break;
 8002548:	e201      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 11: // Set Drum Radius
			if (StartRunning) // Setting is not available while running
 800254a:	4b7f      	ldr	r3, [pc, #508]	; (8002748 <ProcessReceivedCommand+0x618>)
 800254c:	781b      	ldrb	r3, [r3, #0]
 800254e:	2b00      	cmp	r3, #0
 8002550:	d005      	beq.n	800255e <ProcessReceivedCommand+0x42e>
			{
				InitializeRunning (ExperimentMode);
 8002552:	4b7e      	ldr	r3, [pc, #504]	; (800274c <ProcessReceivedCommand+0x61c>)
 8002554:	781b      	ldrb	r3, [r3, #0]
 8002556:	4618      	mov	r0, r3
 8002558:	f7ff fc58 	bl	8001e0c <InitializeRunning>
				break;
 800255c:	e1f7      	b.n	800294e <ProcessReceivedCommand+0x81e>
			}
			else
			{
				DrumRadius = MotionCode[1];
 800255e:	4b6e      	ldr	r3, [pc, #440]	; (8002718 <ProcessReceivedCommand+0x5e8>)
 8002560:	685b      	ldr	r3, [r3, #4]
 8002562:	4a74      	ldr	r2, [pc, #464]	; (8002734 <ProcessReceivedCommand+0x604>)
 8002564:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8002566:	4b7a      	ldr	r3, [pc, #488]	; (8002750 <ProcessReceivedCommand+0x620>)
 8002568:	2200      	movs	r2, #0
 800256a:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r11/%.2fe",DrumRadius);
 800256c:	4b71      	ldr	r3, [pc, #452]	; (8002734 <ProcessReceivedCommand+0x604>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	4618      	mov	r0, r3
 8002572:	f7fd ffe9 	bl	8000548 <__aeabi_f2d>
 8002576:	4602      	mov	r2, r0
 8002578:	460b      	mov	r3, r1
 800257a:	4976      	ldr	r1, [pc, #472]	; (8002754 <ProcessReceivedCommand+0x624>)
 800257c:	4876      	ldr	r0, [pc, #472]	; (8002758 <ProcessReceivedCommand+0x628>)
 800257e:	f005 fee9 	bl	8008354 <siprintf>
 8002582:	4603      	mov	r3, r0
 8002584:	b2da      	uxtb	r2, r3
 8002586:	4b68      	ldr	r3, [pc, #416]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 8002588:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 800258a:	4b67      	ldr	r3, [pc, #412]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 800258c:	781b      	ldrb	r3, [r3, #0]
 800258e:	b29a      	uxth	r2, r3
 8002590:	23c8      	movs	r3, #200	; 0xc8
 8002592:	4971      	ldr	r1, [pc, #452]	; (8002758 <ProcessReceivedCommand+0x628>)
 8002594:	4865      	ldr	r0, [pc, #404]	; (800272c <ProcessReceivedCommand+0x5fc>)
 8002596:	f003 fffc 	bl	8006592 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800259a:	220f      	movs	r2, #15
 800259c:	2100      	movs	r1, #0
 800259e:	486e      	ldr	r0, [pc, #440]	; (8002758 <ProcessReceivedCommand+0x628>)
 80025a0:	f005 f850 	bl	8007644 <memset>
				break;
 80025a4:	e1d3      	b.n	800294e <ProcessReceivedCommand+0x81e>
			}
			break;

		case 13: // Set Going Speed
			if (StartRunning) // Setting is not available while running
 80025a6:	4b68      	ldr	r3, [pc, #416]	; (8002748 <ProcessReceivedCommand+0x618>)
 80025a8:	781b      	ldrb	r3, [r3, #0]
 80025aa:	2b00      	cmp	r3, #0
 80025ac:	f040 81c0 	bne.w	8002930 <ProcessReceivedCommand+0x800>
			{
				break;
			}
			else
			{
				PullingSpeed = MotionCode[1];
 80025b0:	4b59      	ldr	r3, [pc, #356]	; (8002718 <ProcessReceivedCommand+0x5e8>)
 80025b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80025b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80025ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80025be:	793b      	ldrb	r3, [r7, #4]
 80025c0:	b2da      	uxtb	r2, r3
 80025c2:	4b5e      	ldr	r3, [pc, #376]	; (800273c <ProcessReceivedCommand+0x60c>)
 80025c4:	701a      	strb	r2, [r3, #0]
				GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 80025c6:	4b5d      	ldr	r3, [pc, #372]	; (800273c <ProcessReceivedCommand+0x60c>)
 80025c8:	781b      	ldrb	r3, [r3, #0]
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7fd ffaa 	bl	8000524 <__aeabi_i2d>
 80025d0:	a34f      	add	r3, pc, #316	; (adr r3, 8002710 <ProcessReceivedCommand+0x5e0>)
 80025d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025d6:	f7fe f80f 	bl	80005f8 <__aeabi_dmul>
 80025da:	4602      	mov	r2, r0
 80025dc:	460b      	mov	r3, r1
 80025de:	4610      	mov	r0, r2
 80025e0:	4619      	mov	r1, r3
 80025e2:	f04f 0200 	mov.w	r2, #0
 80025e6:	4b5d      	ldr	r3, [pc, #372]	; (800275c <ProcessReceivedCommand+0x62c>)
 80025e8:	f7fe f930 	bl	800084c <__aeabi_ddiv>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe faf8 	bl	8000be8 <__aeabi_d2f>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4a59      	ldr	r2, [pc, #356]	; (8002760 <ProcessReceivedCommand+0x630>)
 80025fc:	6013      	str	r3, [r2, #0]

				//char PullingSpeedBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r13/%de",PullingSpeed);
 80025fe:	4b4f      	ldr	r3, [pc, #316]	; (800273c <ProcessReceivedCommand+0x60c>)
 8002600:	781b      	ldrb	r3, [r3, #0]
 8002602:	461a      	mov	r2, r3
 8002604:	4957      	ldr	r1, [pc, #348]	; (8002764 <ProcessReceivedCommand+0x634>)
 8002606:	4854      	ldr	r0, [pc, #336]	; (8002758 <ProcessReceivedCommand+0x628>)
 8002608:	f005 fea4 	bl	8008354 <siprintf>
 800260c:	4603      	mov	r3, r0
 800260e:	b2da      	uxtb	r2, r3
 8002610:	4b45      	ldr	r3, [pc, #276]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 8002612:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8002614:	4b44      	ldr	r3, [pc, #272]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 8002616:	781b      	ldrb	r3, [r3, #0]
 8002618:	b29a      	uxth	r2, r3
 800261a:	23c8      	movs	r3, #200	; 0xc8
 800261c:	494e      	ldr	r1, [pc, #312]	; (8002758 <ProcessReceivedCommand+0x628>)
 800261e:	4843      	ldr	r0, [pc, #268]	; (800272c <ProcessReceivedCommand+0x5fc>)
 8002620:	f003 ffb7 	bl	8006592 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002624:	220f      	movs	r2, #15
 8002626:	2100      	movs	r1, #0
 8002628:	484b      	ldr	r0, [pc, #300]	; (8002758 <ProcessReceivedCommand+0x628>)
 800262a:	f005 f80b 	bl	8007644 <memset>
				break;
 800262e:	e18e      	b.n	800294e <ProcessReceivedCommand+0x81e>
			}

		case 14: // Start Simulating
			if (StartRunning) // Setting is not available while running
 8002630:	4b45      	ldr	r3, [pc, #276]	; (8002748 <ProcessReceivedCommand+0x618>)
 8002632:	781b      	ldrb	r3, [r3, #0]
 8002634:	2b00      	cmp	r3, #0
 8002636:	f040 817d 	bne.w	8002934 <ProcessReceivedCommand+0x804>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // Start Simulation
 800263a:	4b37      	ldr	r3, [pc, #220]	; (8002718 <ProcessReceivedCommand+0x5e8>)
 800263c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002640:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002644:	eef4 7a47 	vcmp.f32	s15, s14
 8002648:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800264c:	d102      	bne.n	8002654 <ProcessReceivedCommand+0x524>
				{
					InitSimulating();
 800264e:	f7ff fca3 	bl	8001f98 <InitSimulating>
					break;
 8002652:	e17c      	b.n	800294e <ProcessReceivedCommand+0x81e>
				}
				else // Stop Simulation
				{
					StopSimulating();
 8002654:	f7ff fcc0 	bl	8001fd8 <StopSimulating>
				}
			}
			break;
 8002658:	e179      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 16: // Set SampleTime
			if (StartRunning) // When the experiment is running, disable this fcn
 800265a:	4b3b      	ldr	r3, [pc, #236]	; (8002748 <ProcessReceivedCommand+0x618>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	2b00      	cmp	r3, #0
 8002660:	f040 816a 	bne.w	8002938 <ProcessReceivedCommand+0x808>
			{
				break;
			}
			else
			{
				SampleTime = MotionCode[1];
 8002664:	4b2c      	ldr	r3, [pc, #176]	; (8002718 <ProcessReceivedCommand+0x5e8>)
 8002666:	edd3 7a01 	vldr	s15, [r3, #4]
 800266a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800266e:	edc7 7a01 	vstr	s15, [r7, #4]
 8002672:	793b      	ldrb	r3, [r7, #4]
 8002674:	b2da      	uxtb	r2, r3
 8002676:	4b30      	ldr	r3, [pc, #192]	; (8002738 <ProcessReceivedCommand+0x608>)
 8002678:	701a      	strb	r2, [r3, #0]
				if (SampleTime<= 2) // ms Set value range, 2:100ms
 800267a:	4b2f      	ldr	r3, [pc, #188]	; (8002738 <ProcessReceivedCommand+0x608>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	2b02      	cmp	r3, #2
 8002680:	d802      	bhi.n	8002688 <ProcessReceivedCommand+0x558>
				{
					SampleTime = 2;
 8002682:	4b2d      	ldr	r3, [pc, #180]	; (8002738 <ProcessReceivedCommand+0x608>)
 8002684:	2202      	movs	r2, #2
 8002686:	701a      	strb	r2, [r3, #0]
				}
				if (SampleTime >= 100) // ms
 8002688:	4b2b      	ldr	r3, [pc, #172]	; (8002738 <ProcessReceivedCommand+0x608>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b63      	cmp	r3, #99	; 0x63
 800268e:	d902      	bls.n	8002696 <ProcessReceivedCommand+0x566>
				{
					SampleTime = 100;
 8002690:	4b29      	ldr	r3, [pc, #164]	; (8002738 <ProcessReceivedCommand+0x608>)
 8002692:	2264      	movs	r2, #100	; 0x64
 8002694:	701a      	strb	r2, [r3, #0]
				}
				//char SammpleTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r16/%de",SampleTime);
 8002696:	4b28      	ldr	r3, [pc, #160]	; (8002738 <ProcessReceivedCommand+0x608>)
 8002698:	781b      	ldrb	r3, [r3, #0]
 800269a:	461a      	mov	r2, r3
 800269c:	4932      	ldr	r1, [pc, #200]	; (8002768 <ProcessReceivedCommand+0x638>)
 800269e:	482e      	ldr	r0, [pc, #184]	; (8002758 <ProcessReceivedCommand+0x628>)
 80026a0:	f005 fe58 	bl	8008354 <siprintf>
 80026a4:	4603      	mov	r3, r0
 80026a6:	b2da      	uxtb	r2, r3
 80026a8:	4b1f      	ldr	r3, [pc, #124]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 80026aa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80026ac:	4b1e      	ldr	r3, [pc, #120]	; (8002728 <ProcessReceivedCommand+0x5f8>)
 80026ae:	781b      	ldrb	r3, [r3, #0]
 80026b0:	b29a      	uxth	r2, r3
 80026b2:	23c8      	movs	r3, #200	; 0xc8
 80026b4:	4928      	ldr	r1, [pc, #160]	; (8002758 <ProcessReceivedCommand+0x628>)
 80026b6:	481d      	ldr	r0, [pc, #116]	; (800272c <ProcessReceivedCommand+0x5fc>)
 80026b8:	f003 ff6b 	bl	8006592 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80026bc:	220f      	movs	r2, #15
 80026be:	2100      	movs	r1, #0
 80026c0:	4825      	ldr	r0, [pc, #148]	; (8002758 <ProcessReceivedCommand+0x628>)
 80026c2:	f004 ffbf 	bl	8007644 <memset>
				break;
 80026c6:	e142      	b.n	800294e <ProcessReceivedCommand+0x81e>
			}

		case 17: // Reset MCU
			HAL_NVIC_SystemReset();
 80026c8:	f001 fe7f 	bl	80043ca <HAL_NVIC_SystemReset>
			break;
 80026cc:	e13f      	b.n	800294e <ProcessReceivedCommand+0x81e>
		case 18: // Servo Enable on/off
			if (MotionCode[1] == 1) // Servo Enable ON
 80026ce:	4b12      	ldr	r3, [pc, #72]	; (8002718 <ProcessReceivedCommand+0x5e8>)
 80026d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80026d8:	eef4 7a47 	vcmp.f32	s15, s14
 80026dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026e0:	d105      	bne.n	80026ee <ProcessReceivedCommand+0x5be>
			{
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Servo enable on
 80026e2:	2201      	movs	r2, #1
 80026e4:	2110      	movs	r1, #16
 80026e6:	4821      	ldr	r0, [pc, #132]	; (800276c <ProcessReceivedCommand+0x63c>)
 80026e8:	f002 fbaa 	bl	8004e40 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_RESET); // SPD LIM OFF
			}

			else
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
			break;
 80026ec:	e12f      	b.n	800294e <ProcessReceivedCommand+0x81e>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 80026ee:	2200      	movs	r2, #0
 80026f0:	2110      	movs	r1, #16
 80026f2:	481e      	ldr	r0, [pc, #120]	; (800276c <ProcessReceivedCommand+0x63c>)
 80026f4:	f002 fba4 	bl	8004e40 <HAL_GPIO_WritePin>
			break;
 80026f8:	e129      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 28: // Stop jog move up/down in Position Jog control;
			if (StartRunning) // Setting is not available while running
 80026fa:	4b13      	ldr	r3, [pc, #76]	; (8002748 <ProcessReceivedCommand+0x618>)
 80026fc:	781b      	ldrb	r3, [r3, #0]
 80026fe:	2b00      	cmp	r3, #0
 8002700:	f040 811c 	bne.w	800293c <ProcessReceivedCommand+0x80c>
			{
				break;
			}
			else
			{
				StopPulseGenerating();
 8002704:	f7ff f8be 	bl	8001884 <StopPulseGenerating>
				break;
 8002708:	e121      	b.n	800294e <ProcessReceivedCommand+0x81e>
 800270a:	bf00      	nop
 800270c:	f3af 8000 	nop.w
 8002710:	9999999a 	.word	0x9999999a
 8002714:	3fb99999 	.word	0x3fb99999
 8002718:	200033ac 	.word	0x200033ac
 800271c:	20000435 	.word	0x20000435
 8002720:	2000000c 	.word	0x2000000c
 8002724:	0800c054 	.word	0x0800c054
 8002728:	20000414 	.word	0x20000414
 800272c:	200002f8 	.word	0x200002f8
 8002730:	20000001 	.word	0x20000001
 8002734:	20003330 	.word	0x20003330
 8002738:	20003334 	.word	0x20003334
 800273c:	20003335 	.word	0x20003335
 8002740:	0800c05c 	.word	0x0800c05c
 8002744:	200003b0 	.word	0x200003b0
 8002748:	20000432 	.word	0x20000432
 800274c:	20000004 	.word	0x20000004
 8002750:	2000043c 	.word	0x2000043c
 8002754:	0800c06c 	.word	0x0800c06c
 8002758:	2000041c 	.word	0x2000041c
 800275c:	40080000 	.word	0x40080000
 8002760:	20003338 	.word	0x20003338
 8002764:	0800c078 	.word	0x0800c078
 8002768:	0800c080 	.word	0x0800c080
 800276c:	40020800 	.word	0x40020800
			}

		case 31: // Set Experiment Mode Pulling/Dropping/PaD
			if (StartRunning) // Setting is not available while running
 8002770:	4b79      	ldr	r3, [pc, #484]	; (8002958 <ProcessReceivedCommand+0x828>)
 8002772:	781b      	ldrb	r3, [r3, #0]
 8002774:	2b00      	cmp	r3, #0
 8002776:	f040 80e3 	bne.w	8002940 <ProcessReceivedCommand+0x810>
			{
				break;
			}
			else
			{
				ExperimentMode = MotionCode[1]; // 1=Dropping Mode;2 = Pulling; 3= Pulling->Dropping
 800277a:	4b78      	ldr	r3, [pc, #480]	; (800295c <ProcessReceivedCommand+0x82c>)
 800277c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002780:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002784:	edc7 7a01 	vstr	s15, [r7, #4]
 8002788:	793b      	ldrb	r3, [r7, #4]
 800278a:	b2da      	uxtb	r2, r3
 800278c:	4b74      	ldr	r3, [pc, #464]	; (8002960 <ProcessReceivedCommand+0x830>)
 800278e:	701a      	strb	r2, [r3, #0]
				//char SetModeBuff[8];
				TxPCLen = sprintf(ResponseMess,"m%de",ExperimentMode);
 8002790:	4b73      	ldr	r3, [pc, #460]	; (8002960 <ProcessReceivedCommand+0x830>)
 8002792:	781b      	ldrb	r3, [r3, #0]
 8002794:	461a      	mov	r2, r3
 8002796:	4973      	ldr	r1, [pc, #460]	; (8002964 <ProcessReceivedCommand+0x834>)
 8002798:	4873      	ldr	r0, [pc, #460]	; (8002968 <ProcessReceivedCommand+0x838>)
 800279a:	f005 fddb 	bl	8008354 <siprintf>
 800279e:	4603      	mov	r3, r0
 80027a0:	b2da      	uxtb	r2, r3
 80027a2:	4b72      	ldr	r3, [pc, #456]	; (800296c <ProcessReceivedCommand+0x83c>)
 80027a4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80027a6:	4b71      	ldr	r3, [pc, #452]	; (800296c <ProcessReceivedCommand+0x83c>)
 80027a8:	781b      	ldrb	r3, [r3, #0]
 80027aa:	b29a      	uxth	r2, r3
 80027ac:	2364      	movs	r3, #100	; 0x64
 80027ae:	496e      	ldr	r1, [pc, #440]	; (8002968 <ProcessReceivedCommand+0x838>)
 80027b0:	486f      	ldr	r0, [pc, #444]	; (8002970 <ProcessReceivedCommand+0x840>)
 80027b2:	f003 feee 	bl	8006592 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80027b6:	220f      	movs	r2, #15
 80027b8:	2100      	movs	r1, #0
 80027ba:	486b      	ldr	r0, [pc, #428]	; (8002968 <ProcessReceivedCommand+0x838>)
 80027bc:	f004 ff42 	bl	8007644 <memset>
				break;
 80027c0:	e0c5      	b.n	800294e <ProcessReceivedCommand+0x81e>
			}

		case 37: // Set Stopping Time
			if (StartRunning)// Setting is not available while running
 80027c2:	4b65      	ldr	r3, [pc, #404]	; (8002958 <ProcessReceivedCommand+0x828>)
 80027c4:	781b      	ldrb	r3, [r3, #0]
 80027c6:	2b00      	cmp	r3, #0
 80027c8:	f040 80bc 	bne.w	8002944 <ProcessReceivedCommand+0x814>
			{
				break;
			}
			else
			{
				StoppingTime = MotionCode[1];
 80027cc:	4b63      	ldr	r3, [pc, #396]	; (800295c <ProcessReceivedCommand+0x82c>)
 80027ce:	edd3 7a01 	vldr	s15, [r3, #4]
 80027d2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027d6:	ee17 3a90 	vmov	r3, s15
 80027da:	b29a      	uxth	r2, r3
 80027dc:	4b65      	ldr	r3, [pc, #404]	; (8002974 <ProcessReceivedCommand+0x844>)
 80027de:	801a      	strh	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r37/%de",StoppingTime);
 80027e0:	4b64      	ldr	r3, [pc, #400]	; (8002974 <ProcessReceivedCommand+0x844>)
 80027e2:	881b      	ldrh	r3, [r3, #0]
 80027e4:	461a      	mov	r2, r3
 80027e6:	4964      	ldr	r1, [pc, #400]	; (8002978 <ProcessReceivedCommand+0x848>)
 80027e8:	485f      	ldr	r0, [pc, #380]	; (8002968 <ProcessReceivedCommand+0x838>)
 80027ea:	f005 fdb3 	bl	8008354 <siprintf>
 80027ee:	4603      	mov	r3, r0
 80027f0:	b2da      	uxtb	r2, r3
 80027f2:	4b5e      	ldr	r3, [pc, #376]	; (800296c <ProcessReceivedCommand+0x83c>)
 80027f4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80027f6:	4b5d      	ldr	r3, [pc, #372]	; (800296c <ProcessReceivedCommand+0x83c>)
 80027f8:	781b      	ldrb	r3, [r3, #0]
 80027fa:	b29a      	uxth	r2, r3
 80027fc:	23c8      	movs	r3, #200	; 0xc8
 80027fe:	495a      	ldr	r1, [pc, #360]	; (8002968 <ProcessReceivedCommand+0x838>)
 8002800:	485b      	ldr	r0, [pc, #364]	; (8002970 <ProcessReceivedCommand+0x840>)
 8002802:	f003 fec6 	bl	8006592 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002806:	220f      	movs	r2, #15
 8002808:	2100      	movs	r1, #0
 800280a:	4857      	ldr	r0, [pc, #348]	; (8002968 <ProcessReceivedCommand+0x838>)
 800280c:	f004 ff1a 	bl	8007644 <memset>
				break;
 8002810:	e09d      	b.n	800294e <ProcessReceivedCommand+0x81e>
			}
		case 38: // Homing task
			if (StartRunning)// Setting is not available while running
 8002812:	4b51      	ldr	r3, [pc, #324]	; (8002958 <ProcessReceivedCommand+0x828>)
 8002814:	781b      	ldrb	r3, [r3, #0]
 8002816:	2b00      	cmp	r3, #0
 8002818:	f040 8096 	bne.w	8002948 <ProcessReceivedCommand+0x818>
			{
				break;
			}
			else
			{
				IsHoming = true;
 800281c:	4b57      	ldr	r3, [pc, #348]	; (800297c <ProcessReceivedCommand+0x84c>)
 800281e:	2201      	movs	r2, #1
 8002820:	701a      	strb	r2, [r3, #0]
				Direction = false; // false = move up, true = move down
 8002822:	4b57      	ldr	r3, [pc, #348]	; (8002980 <ProcessReceivedCommand+0x850>)
 8002824:	2200      	movs	r2, #0
 8002826:	701a      	strb	r2, [r3, #0]
				PRIsToggled = true; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002828:	4b56      	ldr	r3, [pc, #344]	; (8002984 <ProcessReceivedCommand+0x854>)
 800282a:	2201      	movs	r2, #1
 800282c:	701a      	strb	r2, [r3, #0]
				DisableSTOP(); // Disable the stop
 800282e:	f7fe fd1b 	bl	8001268 <DisableSTOP>
				InitPulseGenerating();
 8002832:	f7ff f845 	bl	80018c0 <InitPulseGenerating>
			}
			break;
 8002836:	e08a      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 39: // Set Driver type, FDA7000 or ASDA A3
			if (StartRunning)// Setting is not available while running
 8002838:	4b47      	ldr	r3, [pc, #284]	; (8002958 <ProcessReceivedCommand+0x828>)
 800283a:	781b      	ldrb	r3, [r3, #0]
 800283c:	2b00      	cmp	r3, #0
 800283e:	f040 8085 	bne.w	800294c <ProcessReceivedCommand+0x81c>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // FDA7000
 8002842:	4b46      	ldr	r3, [pc, #280]	; (800295c <ProcessReceivedCommand+0x82c>)
 8002844:	edd3 7a01 	vldr	s15, [r3, #4]
 8002848:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800284c:	eef4 7a47 	vcmp.f32	s15, s14
 8002850:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002854:	d10a      	bne.n	800286c <ProcessReceivedCommand+0x73c>
				{
					MotorDriver = true;
 8002856:	4b4c      	ldr	r3, [pc, #304]	; (8002988 <ProcessReceivedCommand+0x858>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 29; // For FDA7000, read 5 register => receive 25 bytes
 800285c:	4b4b      	ldr	r3, [pc, #300]	; (800298c <ProcessReceivedCommand+0x85c>)
 800285e:	221d      	movs	r2, #29
 8002860:	701a      	strb	r2, [r3, #0]
					EncoderResolution = HigenEncoderResolution;
 8002862:	4b4b      	ldr	r3, [pc, #300]	; (8002990 <ProcessReceivedCommand+0x860>)
 8002864:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002868:	801a      	strh	r2, [r3, #0]
 800286a:	e009      	b.n	8002880 <ProcessReceivedCommand+0x750>
				}
				else // ASDA A3
				{
					MotorDriver = false;
 800286c:	4b46      	ldr	r3, [pc, #280]	; (8002988 <ProcessReceivedCommand+0x858>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 17;
 8002872:	4b46      	ldr	r3, [pc, #280]	; (800298c <ProcessReceivedCommand+0x85c>)
 8002874:	2211      	movs	r2, #17
 8002876:	701a      	strb	r2, [r3, #0]
					EncoderResolution = AsdaEncoderResolution;
 8002878:	4b45      	ldr	r3, [pc, #276]	; (8002990 <ProcessReceivedCommand+0x860>)
 800287a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800287e:	801a      	strh	r2, [r3, #0]
					// For ASDA Drier, read 1 register => receive 9 bytes
					// read 2 registers => receive 13 bytes
				}
				TxPCLen = sprintf(ResponseMess,"g39/%de",MotorDriver);
 8002880:	4b41      	ldr	r3, [pc, #260]	; (8002988 <ProcessReceivedCommand+0x858>)
 8002882:	781b      	ldrb	r3, [r3, #0]
 8002884:	461a      	mov	r2, r3
 8002886:	4943      	ldr	r1, [pc, #268]	; (8002994 <ProcessReceivedCommand+0x864>)
 8002888:	4837      	ldr	r0, [pc, #220]	; (8002968 <ProcessReceivedCommand+0x838>)
 800288a:	f005 fd63 	bl	8008354 <siprintf>
 800288e:	4603      	mov	r3, r0
 8002890:	b2da      	uxtb	r2, r3
 8002892:	4b36      	ldr	r3, [pc, #216]	; (800296c <ProcessReceivedCommand+0x83c>)
 8002894:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8002896:	4b35      	ldr	r3, [pc, #212]	; (800296c <ProcessReceivedCommand+0x83c>)
 8002898:	781b      	ldrb	r3, [r3, #0]
 800289a:	b29a      	uxth	r2, r3
 800289c:	23c8      	movs	r3, #200	; 0xc8
 800289e:	4932      	ldr	r1, [pc, #200]	; (8002968 <ProcessReceivedCommand+0x838>)
 80028a0:	4833      	ldr	r0, [pc, #204]	; (8002970 <ProcessReceivedCommand+0x840>)
 80028a2:	f003 fe76 	bl	8006592 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80028a6:	220f      	movs	r2, #15
 80028a8:	2100      	movs	r1, #0
 80028aa:	482f      	ldr	r0, [pc, #188]	; (8002968 <ProcessReceivedCommand+0x838>)
 80028ac:	f004 feca 	bl	8007644 <memset>
			}
			break;
 80028b0:	e04d      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 42: // Set Distance Coefficient
			if (StartRunning)// Setting is not available while running
 80028b2:	4b29      	ldr	r3, [pc, #164]	; (8002958 <ProcessReceivedCommand+0x828>)
 80028b4:	781b      	ldrb	r3, [r3, #0]
 80028b6:	2b00      	cmp	r3, #0
 80028b8:	d005      	beq.n	80028c6 <ProcessReceivedCommand+0x796>
			{
				InitializeRunning(ExperimentMode);
 80028ba:	4b29      	ldr	r3, [pc, #164]	; (8002960 <ProcessReceivedCommand+0x830>)
 80028bc:	781b      	ldrb	r3, [r3, #0]
 80028be:	4618      	mov	r0, r3
 80028c0:	f7ff faa4 	bl	8001e0c <InitializeRunning>

				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 80028c4:	e043      	b.n	800294e <ProcessReceivedCommand+0x81e>
				DistCoeff = MotionCode[1];
 80028c6:	4b25      	ldr	r3, [pc, #148]	; (800295c <ProcessReceivedCommand+0x82c>)
 80028c8:	685b      	ldr	r3, [r3, #4]
 80028ca:	4a33      	ldr	r2, [pc, #204]	; (8002998 <ProcessReceivedCommand+0x868>)
 80028cc:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80028ce:	4b33      	ldr	r3, [pc, #204]	; (800299c <ProcessReceivedCommand+0x86c>)
 80028d0:	2200      	movs	r2, #0
 80028d2:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
 80028d4:	4b30      	ldr	r3, [pc, #192]	; (8002998 <ProcessReceivedCommand+0x868>)
 80028d6:	681b      	ldr	r3, [r3, #0]
 80028d8:	4618      	mov	r0, r3
 80028da:	f7fd fe35 	bl	8000548 <__aeabi_f2d>
 80028de:	4602      	mov	r2, r0
 80028e0:	460b      	mov	r3, r1
 80028e2:	492f      	ldr	r1, [pc, #188]	; (80029a0 <ProcessReceivedCommand+0x870>)
 80028e4:	4820      	ldr	r0, [pc, #128]	; (8002968 <ProcessReceivedCommand+0x838>)
 80028e6:	f005 fd35 	bl	8008354 <siprintf>
 80028ea:	4603      	mov	r3, r0
 80028ec:	b2da      	uxtb	r2, r3
 80028ee:	4b1f      	ldr	r3, [pc, #124]	; (800296c <ProcessReceivedCommand+0x83c>)
 80028f0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80028f2:	4b1e      	ldr	r3, [pc, #120]	; (800296c <ProcessReceivedCommand+0x83c>)
 80028f4:	781b      	ldrb	r3, [r3, #0]
 80028f6:	b29a      	uxth	r2, r3
 80028f8:	2364      	movs	r3, #100	; 0x64
 80028fa:	491b      	ldr	r1, [pc, #108]	; (8002968 <ProcessReceivedCommand+0x838>)
 80028fc:	481c      	ldr	r0, [pc, #112]	; (8002970 <ProcessReceivedCommand+0x840>)
 80028fe:	f003 fe48 	bl	8006592 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002902:	220f      	movs	r2, #15
 8002904:	2100      	movs	r1, #0
 8002906:	4818      	ldr	r0, [pc, #96]	; (8002968 <ProcessReceivedCommand+0x838>)
 8002908:	f004 fe9c 	bl	8007644 <memset>
			break;
 800290c:	e01f      	b.n	800294e <ProcessReceivedCommand+0x81e>

		case 46: // Set origin (home) position
			OriginPulse = MotorEncPulse;
 800290e:	4b25      	ldr	r3, [pc, #148]	; (80029a4 <ProcessReceivedCommand+0x874>)
 8002910:	681b      	ldr	r3, [r3, #0]
 8002912:	4a25      	ldr	r2, [pc, #148]	; (80029a8 <ProcessReceivedCommand+0x878>)
 8002914:	6013      	str	r3, [r2, #0]
			PositionPulseCmd = 0;
 8002916:	4b25      	ldr	r3, [pc, #148]	; (80029ac <ProcessReceivedCommand+0x87c>)
 8002918:	2200      	movs	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
			PulseSimuCount = 0;
 800291c:	4b24      	ldr	r3, [pc, #144]	; (80029b0 <ProcessReceivedCommand+0x880>)
 800291e:	2200      	movs	r2, #0
 8002920:	601a      	str	r2, [r3, #0]
			//PulseClear();
			break;
 8002922:	e014      	b.n	800294e <ProcessReceivedCommand+0x81e>

		default:
			break;
 8002924:	bf00      	nop
 8002926:	e012      	b.n	800294e <ProcessReceivedCommand+0x81e>
			break;
 8002928:	bf00      	nop
 800292a:	e010      	b.n	800294e <ProcessReceivedCommand+0x81e>
			break;
 800292c:	bf00      	nop
 800292e:	e00e      	b.n	800294e <ProcessReceivedCommand+0x81e>
				break;
 8002930:	bf00      	nop
 8002932:	e00c      	b.n	800294e <ProcessReceivedCommand+0x81e>
				break;
 8002934:	bf00      	nop
 8002936:	e00a      	b.n	800294e <ProcessReceivedCommand+0x81e>
				break;
 8002938:	bf00      	nop
 800293a:	e008      	b.n	800294e <ProcessReceivedCommand+0x81e>
				break;
 800293c:	bf00      	nop
 800293e:	e006      	b.n	800294e <ProcessReceivedCommand+0x81e>
				break;
 8002940:	bf00      	nop
 8002942:	e004      	b.n	800294e <ProcessReceivedCommand+0x81e>
				break;
 8002944:	bf00      	nop
 8002946:	e002      	b.n	800294e <ProcessReceivedCommand+0x81e>
				break;
 8002948:	bf00      	nop
 800294a:	e000      	b.n	800294e <ProcessReceivedCommand+0x81e>
				break;
 800294c:	bf00      	nop
	}
}
 800294e:	bf00      	nop
 8002950:	3718      	adds	r7, #24
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	20000432 	.word	0x20000432
 800295c:	200033ac 	.word	0x200033ac
 8002960:	20000004 	.word	0x20000004
 8002964:	0800c088 	.word	0x0800c088
 8002968:	2000041c 	.word	0x2000041c
 800296c:	20000414 	.word	0x20000414
 8002970:	200002f8 	.word	0x200002f8
 8002974:	20000008 	.word	0x20000008
 8002978:	0800c090 	.word	0x0800c090
 800297c:	2000043b 	.word	0x2000043b
 8002980:	20000434 	.word	0x20000434
 8002984:	2000043e 	.word	0x2000043e
 8002988:	20000003 	.word	0x20000003
 800298c:	20000000 	.word	0x20000000
 8002990:	2000000a 	.word	0x2000000a
 8002994:	0800c098 	.word	0x0800c098
 8002998:	200033cc 	.word	0x200033cc
 800299c:	2000043c 	.word	0x2000043c
 80029a0:	0800c0a0 	.word	0x0800c0a0
 80029a4:	200033a0 	.word	0x200033a0
 80029a8:	2000333c 	.word	0x2000333c
 80029ac:	20003348 	.word	0x20003348
 80029b0:	20003344 	.word	0x20003344

080029b4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback function when a receiving complete
{
 80029b4:	b580      	push	{r7, lr}
 80029b6:	b082      	sub	sp, #8
 80029b8:	af00      	add	r7, sp, #0
 80029ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(huart);

	// BEGIN UART6 Receiving
		if (huart->Instance==USART6) // If it is uart6, UI communication
 80029bc:	687b      	ldr	r3, [r7, #4]
 80029be:	681b      	ldr	r3, [r3, #0]
 80029c0:	4a2f      	ldr	r2, [pc, #188]	; (8002a80 <HAL_UART_RxCpltCallback+0xcc>)
 80029c2:	4293      	cmp	r3, r2
 80029c4:	d121      	bne.n	8002a0a <HAL_UART_RxCpltCallback+0x56>
		{
			if(RxPCData!=EndChar) // read up to the ending char
 80029c6:	4b2f      	ldr	r3, [pc, #188]	; (8002a84 <HAL_UART_RxCpltCallback+0xd0>)
 80029c8:	781b      	ldrb	r3, [r3, #0]
 80029ca:	2224      	movs	r2, #36	; 0x24
 80029cc:	4293      	cmp	r3, r2
 80029ce:	d016      	beq.n	80029fe <HAL_UART_RxCpltCallback+0x4a>
			{
				if (RxPCData != 0) // remove the null character
 80029d0:	4b2c      	ldr	r3, [pc, #176]	; (8002a84 <HAL_UART_RxCpltCallback+0xd0>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	d018      	beq.n	8002a0a <HAL_UART_RxCpltCallback+0x56>
				//if (RxPCData != NULL) // remove the null character
				{
					RxPCBuff[_rxPCIndex]=RxPCData;// Copy the data to buffer
 80029d8:	4b2b      	ldr	r3, [pc, #172]	; (8002a88 <HAL_UART_RxCpltCallback+0xd4>)
 80029da:	781b      	ldrb	r3, [r3, #0]
 80029dc:	461a      	mov	r2, r3
 80029de:	4b29      	ldr	r3, [pc, #164]	; (8002a84 <HAL_UART_RxCpltCallback+0xd0>)
 80029e0:	7819      	ldrb	r1, [r3, #0]
 80029e2:	4b2a      	ldr	r3, [pc, #168]	; (8002a8c <HAL_UART_RxCpltCallback+0xd8>)
 80029e4:	5499      	strb	r1, [r3, r2]
				  _rxPCIndex++;
 80029e6:	4b28      	ldr	r3, [pc, #160]	; (8002a88 <HAL_UART_RxCpltCallback+0xd4>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	3301      	adds	r3, #1
 80029ec:	b2da      	uxtb	r2, r3
 80029ee:	4b26      	ldr	r3, [pc, #152]	; (8002a88 <HAL_UART_RxCpltCallback+0xd4>)
 80029f0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 80029f2:	2201      	movs	r2, #1
 80029f4:	4923      	ldr	r1, [pc, #140]	; (8002a84 <HAL_UART_RxCpltCallback+0xd0>)
 80029f6:	4826      	ldr	r0, [pc, #152]	; (8002a90 <HAL_UART_RxCpltCallback+0xdc>)
 80029f8:	f003 fe5d 	bl	80066b6 <HAL_UART_Receive_IT>
 80029fc:	e005      	b.n	8002a0a <HAL_UART_RxCpltCallback+0x56>
				}
			}
			else //if(RxPCData==EndChar)
			{
				_rxPCIndex=0;
 80029fe:	4b22      	ldr	r3, [pc, #136]	; (8002a88 <HAL_UART_RxCpltCallback+0xd4>)
 8002a00:	2200      	movs	r2, #0
 8002a02:	701a      	strb	r2, [r3, #0]
				RxUart6_Cpl_Flag=true; // reading completed
 8002a04:	4b23      	ldr	r3, [pc, #140]	; (8002a94 <HAL_UART_RxCpltCallback+0xe0>)
 8002a06:	2201      	movs	r2, #1
 8002a08:	701a      	strb	r2, [r3, #0]
		}
	// END UART6

		//BEGIN UART5 = HAL_UART_Receive_IT============================================
		/// Use this part
		if (huart->Instance==UART5) // If it is uart5, driver communication
 8002a0a:	687b      	ldr	r3, [r7, #4]
 8002a0c:	681b      	ldr	r3, [r3, #0]
 8002a0e:	4a22      	ldr	r2, [pc, #136]	; (8002a98 <HAL_UART_RxCpltCallback+0xe4>)
 8002a10:	4293      	cmp	r3, r2
 8002a12:	d130      	bne.n	8002a76 <HAL_UART_RxCpltCallback+0xc2>
		{
			if (_rxDriverIndex >= NoOfBytes) //
 8002a14:	4b21      	ldr	r3, [pc, #132]	; (8002a9c <HAL_UART_RxCpltCallback+0xe8>)
 8002a16:	781a      	ldrb	r2, [r3, #0]
 8002a18:	4b21      	ldr	r3, [pc, #132]	; (8002aa0 <HAL_UART_RxCpltCallback+0xec>)
 8002a1a:	781b      	ldrb	r3, [r3, #0]
 8002a1c:	429a      	cmp	r2, r3
 8002a1e:	d308      	bcc.n	8002a32 <HAL_UART_RxCpltCallback+0x7e>
			{
				RxUart5_Cpl_Flag = true; // Complete Receiving
 8002a20:	4b20      	ldr	r3, [pc, #128]	; (8002aa4 <HAL_UART_RxCpltCallback+0xf0>)
 8002a22:	2201      	movs	r2, #1
 8002a24:	701a      	strb	r2, [r3, #0]
				StartReceiveDriverData = false;
 8002a26:	4b20      	ldr	r3, [pc, #128]	; (8002aa8 <HAL_UART_RxCpltCallback+0xf4>)
 8002a28:	2200      	movs	r2, #0
 8002a2a:	701a      	strb	r2, [r3, #0]
				_rxDriverIndex = 0;
 8002a2c:	4b1b      	ldr	r3, [pc, #108]	; (8002a9c <HAL_UART_RxCpltCallback+0xe8>)
 8002a2e:	2200      	movs	r2, #0
 8002a30:	701a      	strb	r2, [r3, #0]
			}
			if ((_rxDriverIndex == 0)&&(RxDriverData == DriverID)) // If byte 0 is the Driver ID
 8002a32:	4b1a      	ldr	r3, [pc, #104]	; (8002a9c <HAL_UART_RxCpltCallback+0xe8>)
 8002a34:	781b      	ldrb	r3, [r3, #0]
 8002a36:	2b00      	cmp	r3, #0
 8002a38:	d106      	bne.n	8002a48 <HAL_UART_RxCpltCallback+0x94>
 8002a3a:	4b1c      	ldr	r3, [pc, #112]	; (8002aac <HAL_UART_RxCpltCallback+0xf8>)
 8002a3c:	781b      	ldrb	r3, [r3, #0]
 8002a3e:	2b01      	cmp	r3, #1
 8002a40:	d102      	bne.n	8002a48 <HAL_UART_RxCpltCallback+0x94>
			{
				StartReceiveDriverData = true;
 8002a42:	4b19      	ldr	r3, [pc, #100]	; (8002aa8 <HAL_UART_RxCpltCallback+0xf4>)
 8002a44:	2201      	movs	r2, #1
 8002a46:	701a      	strb	r2, [r3, #0]
			}
			if (StartReceiveDriverData) //
 8002a48:	4b17      	ldr	r3, [pc, #92]	; (8002aa8 <HAL_UART_RxCpltCallback+0xf4>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	b2db      	uxtb	r3, r3
 8002a4e:	2b00      	cmp	r3, #0
 8002a50:	d011      	beq.n	8002a76 <HAL_UART_RxCpltCallback+0xc2>
			{
				RxDriverBuff[_rxDriverIndex]=RxDriverData;// Copy the data to buffer
 8002a52:	4b12      	ldr	r3, [pc, #72]	; (8002a9c <HAL_UART_RxCpltCallback+0xe8>)
 8002a54:	781b      	ldrb	r3, [r3, #0]
 8002a56:	461a      	mov	r2, r3
 8002a58:	4b14      	ldr	r3, [pc, #80]	; (8002aac <HAL_UART_RxCpltCallback+0xf8>)
 8002a5a:	7819      	ldrb	r1, [r3, #0]
 8002a5c:	4b14      	ldr	r3, [pc, #80]	; (8002ab0 <HAL_UART_RxCpltCallback+0xfc>)
 8002a5e:	5499      	strb	r1, [r3, r2]
				_rxDriverIndex++;
 8002a60:	4b0e      	ldr	r3, [pc, #56]	; (8002a9c <HAL_UART_RxCpltCallback+0xe8>)
 8002a62:	781b      	ldrb	r3, [r3, #0]
 8002a64:	3301      	adds	r3, #1
 8002a66:	b2da      	uxtb	r2, r3
 8002a68:	4b0c      	ldr	r3, [pc, #48]	; (8002a9c <HAL_UART_RxCpltCallback+0xe8>)
 8002a6a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time ///*/
 8002a6c:	2201      	movs	r2, #1
 8002a6e:	490f      	ldr	r1, [pc, #60]	; (8002aac <HAL_UART_RxCpltCallback+0xf8>)
 8002a70:	4810      	ldr	r0, [pc, #64]	; (8002ab4 <HAL_UART_RxCpltCallback+0x100>)
 8002a72:	f003 fe20 	bl	80066b6 <HAL_UART_Receive_IT>
			}
		}
		// END UART5
}
 8002a76:	bf00      	nop
 8002a78:	3708      	adds	r7, #8
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40011400 	.word	0x40011400
 8002a84:	200003ac 	.word	0x200003ac
 8002a88:	2000042b 	.word	0x2000042b
 8002a8c:	2000033c 	.word	0x2000033c
 8002a90:	200002f8 	.word	0x200002f8
 8002a94:	2000042d 	.word	0x2000042d
 8002a98:	40005000 	.word	0x40005000
 8002a9c:	2000042c 	.word	0x2000042c
 8002aa0:	20000000 	.word	0x20000000
 8002aa4:	2000042e 	.word	0x2000042e
 8002aa8:	2000042f 	.word	0x2000042f
 8002aac:	200003ad 	.word	0x200003ad
 8002ab0:	20000364 	.word	0x20000364
 8002ab4:	200002b4 	.word	0x200002b4

08002ab8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer 2 interrupt, 1ms
{
 8002ab8:	b580      	push	{r7, lr}
 8002aba:	b082      	sub	sp, #8
 8002abc:	af00      	add	r7, sp, #0
 8002abe:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)	// TIMER 3 interrupt for pulse generation, period: 2us
 8002ac0:	687b      	ldr	r3, [r7, #4]
 8002ac2:	681b      	ldr	r3, [r3, #0]
 8002ac4:	4a5a      	ldr	r2, [pc, #360]	; (8002c30 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8002ac6:	4293      	cmp	r3, r2
 8002ac8:	d17a      	bne.n	8002bc0 <HAL_TIM_PeriodElapsedCallback+0x108>
	{
		if (PulseGenerationFlag) // Only generating pulse when the flag is ON. Otherwise, do nothing
 8002aca:	4b5a      	ldr	r3, [pc, #360]	; (8002c34 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8002acc:	781b      	ldrb	r3, [r3, #0]
 8002ace:	2b00      	cmp	r3, #0
 8002ad0:	d076      	beq.n	8002bc0 <HAL_TIM_PeriodElapsedCallback+0x108>
		{
				Timer3Count++;
 8002ad2:	4b59      	ldr	r3, [pc, #356]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002ad4:	881b      	ldrh	r3, [r3, #0]
 8002ad6:	3301      	adds	r3, #1
 8002ad8:	b29a      	uxth	r2, r3
 8002ada:	4b57      	ldr	r3, [pc, #348]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002adc:	801a      	strh	r2, [r3, #0]
				if (Timer3Count >= Timer3CountPeriod) // Generate pulse
 8002ade:	4b56      	ldr	r3, [pc, #344]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002ae0:	881a      	ldrh	r2, [r3, #0]
 8002ae2:	4b56      	ldr	r3, [pc, #344]	; (8002c3c <HAL_TIM_PeriodElapsedCallback+0x184>)
 8002ae4:	881b      	ldrh	r3, [r3, #0]
 8002ae6:	429a      	cmp	r2, r3
 8002ae8:	d36a      	bcc.n	8002bc0 <HAL_TIM_PeriodElapsedCallback+0x108>
				{
					Timer3Count = 0;
 8002aea:	4b53      	ldr	r3, [pc, #332]	; (8002c38 <HAL_TIM_PeriodElapsedCallback+0x180>)
 8002aec:	2200      	movs	r2, #0
 8002aee:	801a      	strh	r2, [r3, #0]

					if(StartSimulating) // Check the no of pulse generated in Simulating
 8002af0:	4b53      	ldr	r3, [pc, #332]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002af2:	781b      	ldrb	r3, [r3, #0]
 8002af4:	2b00      	cmp	r3, #0
 8002af6:	d026      	beq.n	8002b46 <HAL_TIM_PeriodElapsedCallback+0x8e>
					{
						if (IsReachTargetPosition)
 8002af8:	4b52      	ldr	r3, [pc, #328]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002afa:	781b      	ldrb	r3, [r3, #0]
 8002afc:	b2db      	uxtb	r3, r3
 8002afe:	2b00      	cmp	r3, #0
 8002b00:	f040 808f 	bne.w	8002c22 <HAL_TIM_PeriodElapsedCallback+0x16a>
						{
							return;
						}
						if ( abs(PulseSimuCount) >= abs(TargetPosition))
 8002b04:	4b50      	ldr	r3, [pc, #320]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b06:	681b      	ldr	r3, [r3, #0]
 8002b08:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002b0c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002b10:	4b4e      	ldr	r3, [pc, #312]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002b12:	681b      	ldr	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	bfb8      	it	lt
 8002b18:	425b      	neglt	r3, r3
 8002b1a:	429a      	cmp	r2, r3
 8002b1c:	db03      	blt.n	8002b26 <HAL_TIM_PeriodElapsedCallback+0x6e>
						{
							IsReachTargetPosition = true;
 8002b1e:	4b49      	ldr	r3, [pc, #292]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b20:	2201      	movs	r2, #1
 8002b22:	701a      	strb	r2, [r3, #0]
							return;
 8002b24:	e080      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
						}
						if (Direction) // go down
 8002b26:	4b4a      	ldr	r3, [pc, #296]	; (8002c50 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002b28:	781b      	ldrb	r3, [r3, #0]
 8002b2a:	2b00      	cmp	r3, #0
 8002b2c:	d005      	beq.n	8002b3a <HAL_TIM_PeriodElapsedCallback+0x82>
						{
							PulseSimuCount++;
 8002b2e:	4b46      	ldr	r3, [pc, #280]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b30:	681b      	ldr	r3, [r3, #0]
 8002b32:	3301      	adds	r3, #1
 8002b34:	4a44      	ldr	r2, [pc, #272]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b36:	6013      	str	r3, [r2, #0]
						}
						else // move up
						{
							PulseSimuCount--;
						}
						return;
 8002b38:	e076      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
							PulseSimuCount--;
 8002b3a:	4b43      	ldr	r3, [pc, #268]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	3b01      	subs	r3, #1
 8002b40:	4a41      	ldr	r2, [pc, #260]	; (8002c48 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002b42:	6013      	str	r3, [r2, #0]
						return;
 8002b44:	e070      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
					}

					if (StartRunning)
 8002b46:	4b43      	ldr	r3, [pc, #268]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	2b00      	cmp	r3, #0
 8002b4c:	d018      	beq.n	8002b80 <HAL_TIM_PeriodElapsedCallback+0xc8>
					{
						if (IsReachTargetPosition)
 8002b4e:	4b3d      	ldr	r3, [pc, #244]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b50:	781b      	ldrb	r3, [r3, #0]
 8002b52:	b2db      	uxtb	r3, r3
 8002b54:	2b00      	cmp	r3, #0
 8002b56:	d166      	bne.n	8002c26 <HAL_TIM_PeriodElapsedCallback+0x16e>
						{
							return;
						}
						if ( abs(PositionPulseCmd) >= abs(TargetPosition))
 8002b58:	4b3f      	ldr	r3, [pc, #252]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002b60:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002b64:	4b39      	ldr	r3, [pc, #228]	; (8002c4c <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	2b00      	cmp	r3, #0
 8002b6a:	bfb8      	it	lt
 8002b6c:	425b      	neglt	r3, r3
 8002b6e:	429a      	cmp	r2, r3
 8002b70:	db06      	blt.n	8002b80 <HAL_TIM_PeriodElapsedCallback+0xc8>
						{
							PositionPulseCmd = 0;
 8002b72:	4b39      	ldr	r3, [pc, #228]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002b74:	2200      	movs	r2, #0
 8002b76:	601a      	str	r2, [r3, #0]
							IsReachTargetPosition = true;
 8002b78:	4b32      	ldr	r3, [pc, #200]	; (8002c44 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8002b7a:	2201      	movs	r2, #1
 8002b7c:	701a      	strb	r2, [r3, #0]
							return;
 8002b7e:	e053      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
						}
					}

					if (PRIsToggled)
 8002b80:	4b36      	ldr	r3, [pc, #216]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002b82:	781b      	ldrb	r3, [r3, #0]
 8002b84:	2b00      	cmp	r3, #0
 8002b86:	d00d      	beq.n	8002ba4 <HAL_TIM_PeriodElapsedCallback+0xec>
					{
						HAL_GPIO_TogglePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin); // Generate pulses on PF by tonggling this input
 8002b88:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002b8c:	4834      	ldr	r0, [pc, #208]	; (8002c60 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002b8e:	f002 f970 	bl	8004e72 <HAL_GPIO_TogglePin>
						PRIsToggled = false;
 8002b92:	4b32      	ldr	r3, [pc, #200]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002b94:	2200      	movs	r2, #0
 8002b96:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd++;
 8002b98:	4b2f      	ldr	r3, [pc, #188]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	3301      	adds	r3, #1
 8002b9e:	4a2e      	ldr	r2, [pc, #184]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002ba0:	6013      	str	r3, [r2, #0]
						return; // exit the function
 8002ba2:	e041      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
					}
					else
					{
						HAL_GPIO_TogglePin(PC8_PR_GPIO_Port, PC8_PR_Pin); // Generate pulses on PF by tonggling this input
 8002ba4:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ba8:	482e      	ldr	r0, [pc, #184]	; (8002c64 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002baa:	f002 f962 	bl	8004e72 <HAL_GPIO_TogglePin>
						PRIsToggled = true;
 8002bae:	4b2b      	ldr	r3, [pc, #172]	; (8002c5c <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002bb0:	2201      	movs	r2, #1
 8002bb2:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd++;
 8002bb4:	4b28      	ldr	r3, [pc, #160]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002bb6:	681b      	ldr	r3, [r3, #0]
 8002bb8:	3301      	adds	r3, #1
 8002bba:	4a27      	ldr	r2, [pc, #156]	; (8002c58 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002bbc:	6013      	str	r3, [r2, #0]
						return;
 8002bbe:	e033      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
					}
				}
		}
	}

	if (htim->Instance == TIM2) // Timer 2 interrupt, for the main control function, 1ms
 8002bc0:	687b      	ldr	r3, [r7, #4]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002bc8:	d12e      	bne.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
		{
				Timer2SampleTimeControlCount++;
 8002bca:	4b27      	ldr	r3, [pc, #156]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bcc:	781b      	ldrb	r3, [r3, #0]
 8002bce:	3301      	adds	r3, #1
 8002bd0:	b2da      	uxtb	r2, r3
 8002bd2:	4b25      	ldr	r3, [pc, #148]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bd4:	701a      	strb	r2, [r3, #0]
				if (Timer2SampleTimeControlCount >= SampleTime) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 8002bd6:	4b24      	ldr	r3, [pc, #144]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bd8:	781a      	ldrb	r2, [r3, #0]
 8002bda:	4b24      	ldr	r3, [pc, #144]	; (8002c6c <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	429a      	cmp	r2, r3
 8002be0:	d30e      	bcc.n	8002c00 <HAL_TIM_PeriodElapsedCallback+0x148>
				{
					if (StartSimulating)
 8002be2:	4b17      	ldr	r3, [pc, #92]	; (8002c40 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8002be4:	781b      	ldrb	r3, [r3, #0]
 8002be6:	2b00      	cmp	r3, #0
 8002be8:	d001      	beq.n	8002bee <HAL_TIM_PeriodElapsedCallback+0x136>
					{
						Simulating();
 8002bea:	f7ff fa57 	bl	800209c <Simulating>
					}
					if (StartRunning)
 8002bee:	4b19      	ldr	r3, [pc, #100]	; (8002c54 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002bf0:	781b      	ldrb	r3, [r3, #0]
 8002bf2:	2b00      	cmp	r3, #0
 8002bf4:	d001      	beq.n	8002bfa <HAL_TIM_PeriodElapsedCallback+0x142>
					{
						RunningExperiment();
 8002bf6:	f7ff fa77 	bl	80020e8 <RunningExperiment>
					}
					Timer2SampleTimeControlCount = 0;
 8002bfa:	4b1b      	ldr	r3, [pc, #108]	; (8002c68 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002bfc:	2200      	movs	r2, #0
 8002bfe:	701a      	strb	r2, [r3, #0]
				}

				// To transmit the data each 50ms
				Timer2Count++;
 8002c00:	4b1b      	ldr	r3, [pc, #108]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c02:	781b      	ldrb	r3, [r3, #0]
 8002c04:	3301      	adds	r3, #1
 8002c06:	b2da      	uxtb	r2, r3
 8002c08:	4b19      	ldr	r3, [pc, #100]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c0a:	701a      	strb	r2, [r3, #0]
				if (Timer2Count >= 25) // turn on the flag when the sample time reaches, fix the data sample time to 50
 8002c0c:	4b18      	ldr	r3, [pc, #96]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	2b18      	cmp	r3, #24
 8002c12:	d909      	bls.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
				{
					Timer2SampleTimeInterrupt = true;
 8002c14:	4b17      	ldr	r3, [pc, #92]	; (8002c74 <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
					Timer2Count = 0;
 8002c1a:	4b15      	ldr	r3, [pc, #84]	; (8002c70 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
 8002c20:	e002      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
							return;
 8002c22:	bf00      	nop
 8002c24:	e000      	b.n	8002c28 <HAL_TIM_PeriodElapsedCallback+0x170>
							return;
 8002c26:	bf00      	nop
				}
		}
}
 8002c28:	3708      	adds	r7, #8
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	bd80      	pop	{r7, pc}
 8002c2e:	bf00      	nop
 8002c30:	40000400 	.word	0x40000400
 8002c34:	20000436 	.word	0x20000436
 8002c38:	2000332c 	.word	0x2000332c
 8002c3c:	2000332a 	.word	0x2000332a
 8002c40:	20000433 	.word	0x20000433
 8002c44:	20000438 	.word	0x20000438
 8002c48:	20003344 	.word	0x20003344
 8002c4c:	20003340 	.word	0x20003340
 8002c50:	20000434 	.word	0x20000434
 8002c54:	20000432 	.word	0x20000432
 8002c58:	20003348 	.word	0x20003348
 8002c5c:	2000043e 	.word	0x2000043e
 8002c60:	40021000 	.word	0x40021000
 8002c64:	40020800 	.word	0x40020800
 8002c68:	20003325 	.word	0x20003325
 8002c6c:	20003334 	.word	0x20003334
 8002c70:	20003324 	.word	0x20003324
 8002c74:	20000430 	.word	0x20000430

08002c78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8002c78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8002c7c:	b08b      	sub	sp, #44	; 0x2c
 8002c7e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8002c80:	f001 f9f2 	bl	8004068 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8002c84:	f000 fc30 	bl	80034e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8002c88:	f000 fdce 	bl	8003828 <MX_GPIO_Init>
  MX_TIM2_Init();
 8002c8c:	f000 fcb2 	bl	80035f4 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8002c90:	f000 fda0 	bl	80037d4 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8002c94:	f000 fd28 	bl	80036e8 <MX_TIM3_Init>
  MX_UART5_Init();
 8002c98:	f000 fd72 	bl	8003780 <MX_UART5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8002c9c:	f000 fc8e 	bl	80035bc <MX_NVIC_Init>

  	//HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET); // SPD LIM OFF
  	//HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port, Speed2_Not_PE7_15_Pin, GPIO_PIN_SET); // SPD LIM OFF
  	//DisableSTOP();

	HAL_GPIO_WritePin(PE15_RELAY1_GPIO_Port, PE15_RELAY1_Pin, GPIO_PIN_SET);
 8002ca0:	2201      	movs	r2, #1
 8002ca2:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8002ca6:	48aa      	ldr	r0, [pc, #680]	; (8002f50 <main+0x2d8>)
 8002ca8:	f002 f8ca 	bl	8004e40 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8002cac:	f241 3088 	movw	r0, #5000	; 0x1388
 8002cb0:	f001 fa4c 	bl	800414c <HAL_Delay>

	InitParams (); // Read the saved params from the flash memory
 8002cb4:	f7ff f932 	bl	8001f1c <InitParams>

	HAL_TIM_Base_Start_IT(&htim2); // Enable Timer 2 interrupt
 8002cb8:	48a6      	ldr	r0, [pc, #664]	; (8002f54 <main+0x2dc>)
 8002cba:	f002 fd9d 	bl	80057f8 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8002cbe:	2201      	movs	r2, #1
 8002cc0:	49a5      	ldr	r1, [pc, #660]	; (8002f58 <main+0x2e0>)
 8002cc2:	48a6      	ldr	r0, [pc, #664]	; (8002f5c <main+0x2e4>)
 8002cc4:	f003 fcf7 	bl	80066b6 <HAL_UART_Receive_IT>

	DriverInit();
 8002cc8:	f7fe fb02 	bl	80012d0 <DriverInit>
	ReadMultiRegister(StE03,5);
 8002ccc:	2105      	movs	r1, #5
 8002cce:	200c      	movs	r0, #12
 8002cd0:	f7fe fc6a 	bl	80015a8 <ReadMultiRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Process Received Cmd from the GUI
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8002cd4:	4ba2      	ldr	r3, [pc, #648]	; (8002f60 <main+0x2e8>)
 8002cd6:	781b      	ldrb	r3, [r3, #0]
 8002cd8:	b2db      	uxtb	r3, r3
 8002cda:	2b00      	cmp	r3, #0
 8002cdc:	d00b      	beq.n	8002cf6 <main+0x7e>
			{
				ExtractMotionCode();
 8002cde:	f7fe fc07 	bl	80014f0 <ExtractMotionCode>
				ProcessReceivedCommand (); // Proceed the command
 8002ce2:	f7ff fa25 	bl	8002130 <ProcessReceivedCommand>
				RxUart6_Cpl_Flag=false;
 8002ce6:	4b9e      	ldr	r3, [pc, #632]	; (8002f60 <main+0x2e8>)
 8002ce8:	2200      	movs	r2, #0
 8002cea:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8002cec:	2201      	movs	r2, #1
 8002cee:	499a      	ldr	r1, [pc, #616]	; (8002f58 <main+0x2e0>)
 8002cf0:	489a      	ldr	r0, [pc, #616]	; (8002f5c <main+0x2e4>)
 8002cf2:	f003 fce0 	bl	80066b6 <HAL_UART_Receive_IT>
			}
		// END UART6 Process Cmd

		// Process Timer2 interrupt after a period of Sampletime
		if (Timer2ControlInterrupt)
 8002cf6:	4b9b      	ldr	r3, [pc, #620]	; (8002f64 <main+0x2ec>)
 8002cf8:	781b      	ldrb	r3, [r3, #0]
 8002cfa:	b2db      	uxtb	r3, r3
 8002cfc:	2b00      	cmp	r3, #0
 8002cfe:	d002      	beq.n	8002d06 <main+0x8e>
		{
			Timer2ControlInterrupt = false; // Reset the flag
 8002d00:	4b98      	ldr	r3, [pc, #608]	; (8002f64 <main+0x2ec>)
 8002d02:	2200      	movs	r2, #0
 8002d04:	701a      	strb	r2, [r3, #0]

		}
		// END Timer2ControlInterrupt

		// Process Emergency Stop
		if (StartRunning)
 8002d06:	4b98      	ldr	r3, [pc, #608]	; (8002f68 <main+0x2f0>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	2b00      	cmp	r3, #0
 8002d0c:	d00d      	beq.n	8002d2a <main+0xb2>
		{
			// Read CN1-22-RDY, Check if Servo Ready or not, or Servo ON of OFF.
			// If servo is not ready or not ON, then turn off all the functions
			//if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin) || HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin))
			if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin))
 8002d0e:	2104      	movs	r1, #4
 8002d10:	488f      	ldr	r0, [pc, #572]	; (8002f50 <main+0x2d8>)
 8002d12:	f002 f87d 	bl	8004e10 <HAL_GPIO_ReadPin>
 8002d16:	4603      	mov	r3, r0
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d006      	beq.n	8002d2a <main+0xb2>
			{
			// If the servo is not ON. Then stop all the running function
				StopPulseGenerating();
 8002d1c:	f7fe fdb2 	bl	8001884 <StopPulseGenerating>
				StopExperiment();
 8002d20:	f7ff f89e 	bl	8001e60 <StopExperiment>
				IsHoming = false; // Disable Homming
 8002d24:	4b91      	ldr	r3, [pc, #580]	; (8002f6c <main+0x2f4>)
 8002d26:	2200      	movs	r2, #0
 8002d28:	701a      	strb	r2, [r3, #0]
			}
		}
		// END Process Emergency Stop

		// BEGIN Timer2 interrupt for sending the data
		if (Timer2SampleTimeInterrupt)
 8002d2a:	4b91      	ldr	r3, [pc, #580]	; (8002f70 <main+0x2f8>)
 8002d2c:	781b      	ldrb	r3, [r3, #0]
 8002d2e:	b2db      	uxtb	r3, r3
 8002d30:	2b00      	cmp	r3, #0
 8002d32:	f000 822e 	beq.w	8003192 <main+0x51a>
		{
			Timer2SampleTimeInterrupt = false;
 8002d36:	4b8e      	ldr	r3, [pc, #568]	; (8002f70 <main+0x2f8>)
 8002d38:	2200      	movs	r2, #0
 8002d3a:	701a      	strb	r2, [r3, #0]

			// BEGIN Software Limit ASDA Driver
			if (!MotorDriver) // Applied for ASDA-A3 Diver since the encoder pulse only can be cleared when cycle the driver
 8002d3c:	4b8d      	ldr	r3, [pc, #564]	; (8002f74 <main+0x2fc>)
 8002d3e:	781b      	ldrb	r3, [r3, #0]
 8002d40:	f083 0301 	eor.w	r3, r3, #1
 8002d44:	b2db      	uxtb	r3, r3
 8002d46:	2b00      	cmp	r3, #0
 8002d48:	d01f      	beq.n	8002d8a <main+0x112>
			{
				if (StartRunning) // Always turn on the software limit while running
 8002d4a:	4b87      	ldr	r3, [pc, #540]	; (8002f68 <main+0x2f0>)
 8002d4c:	781b      	ldrb	r3, [r3, #0]
 8002d4e:	2b00      	cmp	r3, #0
 8002d50:	d00b      	beq.n	8002d6a <main+0xf2>
				{
					if (MotorEncPulse-OriginPulse <= -200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8002d52:	4b89      	ldr	r3, [pc, #548]	; (8002f78 <main+0x300>)
 8002d54:	681a      	ldr	r2, [r3, #0]
 8002d56:	4b89      	ldr	r3, [pc, #548]	; (8002f7c <main+0x304>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	1ad3      	subs	r3, r2, r3
 8002d5c:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8002d60:	da03      	bge.n	8002d6a <main+0xf2>
					{
						StopPulseGenerating();
 8002d62:	f7fe fd8f 	bl	8001884 <StopPulseGenerating>
						StopExperiment();
 8002d66:	f7ff f87b 	bl	8001e60 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 8002d6a:	4b85      	ldr	r3, [pc, #532]	; (8002f80 <main+0x308>)
 8002d6c:	781b      	ldrb	r3, [r3, #0]
 8002d6e:	2b00      	cmp	r3, #0
 8002d70:	d02a      	beq.n	8002dc8 <main+0x150>
				{
					if (MotorEncPulse-OriginPulse <= 0) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8002d72:	4b81      	ldr	r3, [pc, #516]	; (8002f78 <main+0x300>)
 8002d74:	681a      	ldr	r2, [r3, #0]
 8002d76:	4b81      	ldr	r3, [pc, #516]	; (8002f7c <main+0x304>)
 8002d78:	681b      	ldr	r3, [r3, #0]
 8002d7a:	1ad3      	subs	r3, r2, r3
 8002d7c:	2b00      	cmp	r3, #0
 8002d7e:	dc23      	bgt.n	8002dc8 <main+0x150>
					{
						StopPulseGenerating();
 8002d80:	f7fe fd80 	bl	8001884 <StopPulseGenerating>
						StopExperiment();
 8002d84:	f7ff f86c 	bl	8001e60 <StopExperiment>
 8002d88:	e01e      	b.n	8002dc8 <main+0x150>
					}
				}
			}
			else // HIGEN FDA Driver, Software Limit Switch
			{
				if (StartRunning)// Always turn on the software limit while running
 8002d8a:	4b77      	ldr	r3, [pc, #476]	; (8002f68 <main+0x2f0>)
 8002d8c:	781b      	ldrb	r3, [r3, #0]
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d00a      	beq.n	8002da8 <main+0x130>
				{
					if (MotorEncPulse-OriginPulse <= 0) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8002d92:	4b79      	ldr	r3, [pc, #484]	; (8002f78 <main+0x300>)
 8002d94:	681a      	ldr	r2, [r3, #0]
 8002d96:	4b79      	ldr	r3, [pc, #484]	; (8002f7c <main+0x304>)
 8002d98:	681b      	ldr	r3, [r3, #0]
 8002d9a:	1ad3      	subs	r3, r2, r3
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	dc03      	bgt.n	8002da8 <main+0x130>
					{
						StopPulseGenerating();
 8002da0:	f7fe fd70 	bl	8001884 <StopPulseGenerating>
						StopExperiment();
 8002da4:	f7ff f85c 	bl	8001e60 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 8002da8:	4b75      	ldr	r3, [pc, #468]	; (8002f80 <main+0x308>)
 8002daa:	781b      	ldrb	r3, [r3, #0]
 8002dac:	2b00      	cmp	r3, #0
 8002dae:	d00b      	beq.n	8002dc8 <main+0x150>
				{
					if (MotorEncPulse-OriginPulse <= 500) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8002db0:	4b71      	ldr	r3, [pc, #452]	; (8002f78 <main+0x300>)
 8002db2:	681a      	ldr	r2, [r3, #0]
 8002db4:	4b71      	ldr	r3, [pc, #452]	; (8002f7c <main+0x304>)
 8002db6:	681b      	ldr	r3, [r3, #0]
 8002db8:	1ad3      	subs	r3, r2, r3
 8002dba:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8002dbe:	dc03      	bgt.n	8002dc8 <main+0x150>
					{
						StopPulseGenerating();
 8002dc0:	f7fe fd60 	bl	8001884 <StopPulseGenerating>
						StopExperiment();
 8002dc4:	f7ff f84c 	bl	8001e60 <StopExperiment>
					}
				}
			}
			// END Software Limit ASDA Driver
			//BEGIN Homing
			if (IsHoming)
 8002dc8:	4b68      	ldr	r3, [pc, #416]	; (8002f6c <main+0x2f4>)
 8002dca:	781b      	ldrb	r3, [r3, #0]
 8002dcc:	2b00      	cmp	r3, #0
 8002dce:	d015      	beq.n	8002dfc <main+0x184>
			{
				if(CheckGoingToRefPosition(false, 100)) // false = go up, 0 = home position, 100 pulses
 8002dd0:	2164      	movs	r1, #100	; 0x64
 8002dd2:	2000      	movs	r0, #0
 8002dd4:	f7fe fe1c 	bl	8001a10 <CheckGoingToRefPosition>
 8002dd8:	4603      	mov	r3, r0
 8002dda:	2b00      	cmp	r3, #0
 8002ddc:	d002      	beq.n	8002de4 <main+0x16c>
				{
					IsHoming = false; // finish homing
 8002dde:	4b63      	ldr	r3, [pc, #396]	; (8002f6c <main+0x2f4>)
 8002de0:	2200      	movs	r2, #0
 8002de2:	701a      	strb	r2, [r3, #0]
				}

				if (MotorEncPulse-OriginPulse <= 0) // Software Limit
 8002de4:	4b64      	ldr	r3, [pc, #400]	; (8002f78 <main+0x300>)
 8002de6:	681a      	ldr	r2, [r3, #0]
 8002de8:	4b64      	ldr	r3, [pc, #400]	; (8002f7c <main+0x304>)
 8002dea:	681b      	ldr	r3, [r3, #0]
 8002dec:	1ad3      	subs	r3, r2, r3
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	dc04      	bgt.n	8002dfc <main+0x184>
				{
					StopPulseGenerating();
 8002df2:	f7fe fd47 	bl	8001884 <StopPulseGenerating>
					IsHoming = false;
 8002df6:	4b5d      	ldr	r3, [pc, #372]	; (8002f6c <main+0x2f4>)
 8002df8:	2200      	movs	r2, #0
 8002dfa:	701a      	strb	r2, [r3, #0]
				}
			}
			//END Homing

			// BEGIN Send data to the UI
			if (UIDataRequest)
 8002dfc:	4b61      	ldr	r3, [pc, #388]	; (8002f84 <main+0x30c>)
 8002dfe:	781b      	ldrb	r3, [r3, #0]
 8002e00:	2b00      	cmp	r3, #0
 8002e02:	f000 8197 	beq.w	8003134 <main+0x4bc>
			{
				if (MotorDriver) // FDA7000 Driver
 8002e06:	4b5b      	ldr	r3, [pc, #364]	; (8002f74 <main+0x2fc>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	f000 80d4 	beq.w	8002fb8 <main+0x340>
				{
					if (StartSimulating)
 8002e10:	4b5d      	ldr	r3, [pc, #372]	; (8002f88 <main+0x310>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	2b00      	cmp	r3, #0
 8002e16:	d05d      	beq.n	8002ed4 <main+0x25c>
					{
						PositionCmd = (float)(8*PulseSimuCount*2*3.14*DrumRadius/EncoderResolution);
 8002e18:	4b5c      	ldr	r3, [pc, #368]	; (8002f8c <main+0x314>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	011b      	lsls	r3, r3, #4
 8002e1e:	4618      	mov	r0, r3
 8002e20:	f7fd fb80 	bl	8000524 <__aeabi_i2d>
 8002e24:	a348      	add	r3, pc, #288	; (adr r3, 8002f48 <main+0x2d0>)
 8002e26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e2a:	f7fd fbe5 	bl	80005f8 <__aeabi_dmul>
 8002e2e:	4602      	mov	r2, r0
 8002e30:	460b      	mov	r3, r1
 8002e32:	4614      	mov	r4, r2
 8002e34:	461d      	mov	r5, r3
 8002e36:	4b56      	ldr	r3, [pc, #344]	; (8002f90 <main+0x318>)
 8002e38:	681b      	ldr	r3, [r3, #0]
 8002e3a:	4618      	mov	r0, r3
 8002e3c:	f7fd fb84 	bl	8000548 <__aeabi_f2d>
 8002e40:	4602      	mov	r2, r0
 8002e42:	460b      	mov	r3, r1
 8002e44:	4620      	mov	r0, r4
 8002e46:	4629      	mov	r1, r5
 8002e48:	f7fd fbd6 	bl	80005f8 <__aeabi_dmul>
 8002e4c:	4602      	mov	r2, r0
 8002e4e:	460b      	mov	r3, r1
 8002e50:	4614      	mov	r4, r2
 8002e52:	461d      	mov	r5, r3
 8002e54:	4b4f      	ldr	r3, [pc, #316]	; (8002f94 <main+0x31c>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb63 	bl	8000524 <__aeabi_i2d>
 8002e5e:	4602      	mov	r2, r0
 8002e60:	460b      	mov	r3, r1
 8002e62:	4620      	mov	r0, r4
 8002e64:	4629      	mov	r1, r5
 8002e66:	f7fd fcf1 	bl	800084c <__aeabi_ddiv>
 8002e6a:	4602      	mov	r2, r0
 8002e6c:	460b      	mov	r3, r1
 8002e6e:	4610      	mov	r0, r2
 8002e70:	4619      	mov	r1, r3
 8002e72:	f7fd feb9 	bl	8000be8 <__aeabi_d2f>
 8002e76:	4603      	mov	r3, r0
 8002e78:	4a47      	ldr	r2, [pc, #284]	; (8002f98 <main+0x320>)
 8002e7a:	6013      	str	r3, [r2, #0]
						TxPCLen = sprintf(TxPCBuff,"t%.1f/%.1f/%.1fe",MotorSpeed,ObjectPosition,PositionCmd);
 8002e7c:	4b47      	ldr	r3, [pc, #284]	; (8002f9c <main+0x324>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb61 	bl	8000548 <__aeabi_f2d>
 8002e86:	4680      	mov	r8, r0
 8002e88:	4689      	mov	r9, r1
 8002e8a:	4b45      	ldr	r3, [pc, #276]	; (8002fa0 <main+0x328>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4618      	mov	r0, r3
 8002e90:	f7fd fb5a 	bl	8000548 <__aeabi_f2d>
 8002e94:	4604      	mov	r4, r0
 8002e96:	460d      	mov	r5, r1
 8002e98:	4b3f      	ldr	r3, [pc, #252]	; (8002f98 <main+0x320>)
 8002e9a:	681b      	ldr	r3, [r3, #0]
 8002e9c:	4618      	mov	r0, r3
 8002e9e:	f7fd fb53 	bl	8000548 <__aeabi_f2d>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8002eaa:	e9cd 4500 	strd	r4, r5, [sp]
 8002eae:	4642      	mov	r2, r8
 8002eb0:	464b      	mov	r3, r9
 8002eb2:	493c      	ldr	r1, [pc, #240]	; (8002fa4 <main+0x32c>)
 8002eb4:	483c      	ldr	r0, [pc, #240]	; (8002fa8 <main+0x330>)
 8002eb6:	f005 fa4d 	bl	8008354 <siprintf>
 8002eba:	4603      	mov	r3, r0
 8002ebc:	b2da      	uxtb	r2, r3
 8002ebe:	4b3b      	ldr	r3, [pc, #236]	; (8002fac <main+0x334>)
 8002ec0:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8002ec2:	4b3a      	ldr	r3, [pc, #232]	; (8002fac <main+0x334>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	b29a      	uxth	r2, r3
 8002ec8:	23c8      	movs	r3, #200	; 0xc8
 8002eca:	4937      	ldr	r1, [pc, #220]	; (8002fa8 <main+0x330>)
 8002ecc:	4823      	ldr	r0, [pc, #140]	; (8002f5c <main+0x2e4>)
 8002ece:	f003 fb60 	bl	8006592 <HAL_UART_Transmit>
 8002ed2:	e12a      	b.n	800312a <main+0x4b2>
					}
					else
					{
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,ObjectPosition,PositionCmd,AccRef);
 8002ed4:	4b31      	ldr	r3, [pc, #196]	; (8002f9c <main+0x324>)
 8002ed6:	681b      	ldr	r3, [r3, #0]
 8002ed8:	4618      	mov	r0, r3
 8002eda:	f7fd fb35 	bl	8000548 <__aeabi_f2d>
 8002ede:	4682      	mov	sl, r0
 8002ee0:	468b      	mov	fp, r1
 8002ee2:	4b2f      	ldr	r3, [pc, #188]	; (8002fa0 <main+0x328>)
 8002ee4:	681b      	ldr	r3, [r3, #0]
 8002ee6:	4618      	mov	r0, r3
 8002ee8:	f7fd fb2e 	bl	8000548 <__aeabi_f2d>
 8002eec:	4604      	mov	r4, r0
 8002eee:	460d      	mov	r5, r1
 8002ef0:	4b29      	ldr	r3, [pc, #164]	; (8002f98 <main+0x320>)
 8002ef2:	681b      	ldr	r3, [r3, #0]
 8002ef4:	4618      	mov	r0, r3
 8002ef6:	f7fd fb27 	bl	8000548 <__aeabi_f2d>
 8002efa:	4680      	mov	r8, r0
 8002efc:	4689      	mov	r9, r1
 8002efe:	4b2c      	ldr	r3, [pc, #176]	; (8002fb0 <main+0x338>)
 8002f00:	681b      	ldr	r3, [r3, #0]
 8002f02:	4618      	mov	r0, r3
 8002f04:	f7fd fb20 	bl	8000548 <__aeabi_f2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f10:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002f14:	e9cd 4500 	strd	r4, r5, [sp]
 8002f18:	4652      	mov	r2, sl
 8002f1a:	465b      	mov	r3, fp
 8002f1c:	4925      	ldr	r1, [pc, #148]	; (8002fb4 <main+0x33c>)
 8002f1e:	4822      	ldr	r0, [pc, #136]	; (8002fa8 <main+0x330>)
 8002f20:	f005 fa18 	bl	8008354 <siprintf>
 8002f24:	4603      	mov	r3, r0
 8002f26:	b2da      	uxtb	r2, r3
 8002f28:	4b20      	ldr	r3, [pc, #128]	; (8002fac <main+0x334>)
 8002f2a:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef,PositionCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8002f2c:	4b1f      	ldr	r3, [pc, #124]	; (8002fac <main+0x334>)
 8002f2e:	781b      	ldrb	r3, [r3, #0]
 8002f30:	b29a      	uxth	r2, r3
 8002f32:	23c8      	movs	r3, #200	; 0xc8
 8002f34:	491c      	ldr	r1, [pc, #112]	; (8002fa8 <main+0x330>)
 8002f36:	4809      	ldr	r0, [pc, #36]	; (8002f5c <main+0x2e4>)
 8002f38:	f003 fb2b 	bl	8006592 <HAL_UART_Transmit>
						ReadMultiRegister(StE03,6); // Read from StE03 -> StE08
 8002f3c:	2106      	movs	r1, #6
 8002f3e:	200c      	movs	r0, #12
 8002f40:	f7fe fb32 	bl	80015a8 <ReadMultiRegister>
 8002f44:	e0f1      	b.n	800312a <main+0x4b2>
 8002f46:	bf00      	nop
 8002f48:	51eb851f 	.word	0x51eb851f
 8002f4c:	40091eb8 	.word	0x40091eb8
 8002f50:	40021000 	.word	0x40021000
 8002f54:	20000224 	.word	0x20000224
 8002f58:	200003ac 	.word	0x200003ac
 8002f5c:	200002f8 	.word	0x200002f8
 8002f60:	2000042d 	.word	0x2000042d
 8002f64:	20000431 	.word	0x20000431
 8002f68:	20000432 	.word	0x20000432
 8002f6c:	2000043b 	.word	0x2000043b
 8002f70:	20000430 	.word	0x20000430
 8002f74:	20000003 	.word	0x20000003
 8002f78:	200033a0 	.word	0x200033a0
 8002f7c:	2000333c 	.word	0x2000333c
 8002f80:	2000043d 	.word	0x2000043d
 8002f84:	20000435 	.word	0x20000435
 8002f88:	20000433 	.word	0x20000433
 8002f8c:	20003344 	.word	0x20003344
 8002f90:	20003330 	.word	0x20003330
 8002f94:	2000000a 	.word	0x2000000a
 8002f98:	200033a4 	.word	0x200033a4
 8002f9c:	20003398 	.word	0x20003398
 8002fa0:	200033d0 	.word	0x200033d0
 8002fa4:	0800c0ac 	.word	0x0800c0ac
 8002fa8:	200003b0 	.word	0x200003b0
 8002fac:	20000414 	.word	0x20000414
 8002fb0:	20000010 	.word	0x20000010
 8002fb4:	0800c0c0 	.word	0x0800c0c0
					}
				}
				else // ASDA-A3 Driver
				{
					if (StartSimulating)
 8002fb8:	4b7f      	ldr	r3, [pc, #508]	; (80031b8 <main+0x540>)
 8002fba:	781b      	ldrb	r3, [r3, #0]
 8002fbc:	2b00      	cmp	r3, #0
 8002fbe:	d073      	beq.n	80030a8 <main+0x430>
					{
						PositionCmd = (float)(PulseSimuCount*2*3.14*DrumRadius/EncoderResolution);
 8002fc0:	4b7e      	ldr	r3, [pc, #504]	; (80031bc <main+0x544>)
 8002fc2:	681b      	ldr	r3, [r3, #0]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd faac 	bl	8000524 <__aeabi_i2d>
 8002fcc:	a378      	add	r3, pc, #480	; (adr r3, 80031b0 <main+0x538>)
 8002fce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fd2:	f7fd fb11 	bl	80005f8 <__aeabi_dmul>
 8002fd6:	4602      	mov	r2, r0
 8002fd8:	460b      	mov	r3, r1
 8002fda:	4614      	mov	r4, r2
 8002fdc:	461d      	mov	r5, r3
 8002fde:	4b78      	ldr	r3, [pc, #480]	; (80031c0 <main+0x548>)
 8002fe0:	681b      	ldr	r3, [r3, #0]
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	f7fd fab0 	bl	8000548 <__aeabi_f2d>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4620      	mov	r0, r4
 8002fee:	4629      	mov	r1, r5
 8002ff0:	f7fd fb02 	bl	80005f8 <__aeabi_dmul>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4614      	mov	r4, r2
 8002ffa:	461d      	mov	r5, r3
 8002ffc:	4b71      	ldr	r3, [pc, #452]	; (80031c4 <main+0x54c>)
 8002ffe:	881b      	ldrh	r3, [r3, #0]
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd fa8f 	bl	8000524 <__aeabi_i2d>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4620      	mov	r0, r4
 800300c:	4629      	mov	r1, r5
 800300e:	f7fd fc1d 	bl	800084c <__aeabi_ddiv>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	f7fd fde5 	bl	8000be8 <__aeabi_d2f>
 800301e:	4603      	mov	r3, r0
 8003020:	4a69      	ldr	r2, [pc, #420]	; (80031c8 <main+0x550>)
 8003022:	6013      	str	r3, [r2, #0]
						TxPCLen = sprintf(TxPCBuff,"t%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,ObjectPosition,PositionCmd, SpeedCmd,AccRef);
 8003024:	4b69      	ldr	r3, [pc, #420]	; (80031cc <main+0x554>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd fa8d 	bl	8000548 <__aeabi_f2d>
 800302e:	e9c7 0100 	strd	r0, r1, [r7]
 8003032:	4b67      	ldr	r3, [pc, #412]	; (80031d0 <main+0x558>)
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	4618      	mov	r0, r3
 8003038:	f7fd fa86 	bl	8000548 <__aeabi_f2d>
 800303c:	4604      	mov	r4, r0
 800303e:	460d      	mov	r5, r1
 8003040:	4b61      	ldr	r3, [pc, #388]	; (80031c8 <main+0x550>)
 8003042:	681b      	ldr	r3, [r3, #0]
 8003044:	4618      	mov	r0, r3
 8003046:	f7fd fa7f 	bl	8000548 <__aeabi_f2d>
 800304a:	4680      	mov	r8, r0
 800304c:	4689      	mov	r9, r1
 800304e:	4b61      	ldr	r3, [pc, #388]	; (80031d4 <main+0x55c>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fa78 	bl	8000548 <__aeabi_f2d>
 8003058:	4682      	mov	sl, r0
 800305a:	468b      	mov	fp, r1
 800305c:	4b5e      	ldr	r3, [pc, #376]	; (80031d8 <main+0x560>)
 800305e:	681b      	ldr	r3, [r3, #0]
 8003060:	4618      	mov	r0, r3
 8003062:	f7fd fa71 	bl	8000548 <__aeabi_f2d>
 8003066:	4602      	mov	r2, r0
 8003068:	460b      	mov	r3, r1
 800306a:	e9cd 2306 	strd	r2, r3, [sp, #24]
 800306e:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8003072:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8003076:	e9cd 4500 	strd	r4, r5, [sp]
 800307a:	e9d7 2300 	ldrd	r2, r3, [r7]
 800307e:	4957      	ldr	r1, [pc, #348]	; (80031dc <main+0x564>)
 8003080:	4857      	ldr	r0, [pc, #348]	; (80031e0 <main+0x568>)
 8003082:	f005 f967 	bl	8008354 <siprintf>
 8003086:	4603      	mov	r3, r0
 8003088:	b2da      	uxtb	r2, r3
 800308a:	4b56      	ldr	r3, [pc, #344]	; (80031e4 <main+0x56c>)
 800308c:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef, PositionCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 800308e:	4b55      	ldr	r3, [pc, #340]	; (80031e4 <main+0x56c>)
 8003090:	781b      	ldrb	r3, [r3, #0]
 8003092:	b29a      	uxth	r2, r3
 8003094:	23c8      	movs	r3, #200	; 0xc8
 8003096:	4952      	ldr	r1, [pc, #328]	; (80031e0 <main+0x568>)
 8003098:	4853      	ldr	r0, [pc, #332]	; (80031e8 <main+0x570>)
 800309a:	f003 fa7a 	bl	8006592 <HAL_UART_Transmit>
						// Read 4 words start from 0x012 to 0x015
						// Encoder pulse: 0x012 + 0x013 (2 words)
						// Motor Speed: 0x014 + 0x015 (2 words)
						// Pulse Error: (2 word)
						// Total is 6 words, 1word = 4 bytes
						ReadMultiRegister(ASDA_MotorSpeed,6);
 800309e:	2106      	movs	r1, #6
 80030a0:	2012      	movs	r0, #18
 80030a2:	f7fe fa81 	bl	80015a8 <ReadMultiRegister>
 80030a6:	e040      	b.n	800312a <main+0x4b2>
					}
					else
					{
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,ObjectPosition,PositionCmd,SpeedCmd,AccRef);
 80030a8:	4b48      	ldr	r3, [pc, #288]	; (80031cc <main+0x554>)
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	4618      	mov	r0, r3
 80030ae:	f7fd fa4b 	bl	8000548 <__aeabi_f2d>
 80030b2:	e9c7 0100 	strd	r0, r1, [r7]
 80030b6:	4b46      	ldr	r3, [pc, #280]	; (80031d0 <main+0x558>)
 80030b8:	681b      	ldr	r3, [r3, #0]
 80030ba:	4618      	mov	r0, r3
 80030bc:	f7fd fa44 	bl	8000548 <__aeabi_f2d>
 80030c0:	4604      	mov	r4, r0
 80030c2:	460d      	mov	r5, r1
 80030c4:	4b40      	ldr	r3, [pc, #256]	; (80031c8 <main+0x550>)
 80030c6:	681b      	ldr	r3, [r3, #0]
 80030c8:	4618      	mov	r0, r3
 80030ca:	f7fd fa3d 	bl	8000548 <__aeabi_f2d>
 80030ce:	4680      	mov	r8, r0
 80030d0:	4689      	mov	r9, r1
 80030d2:	4b40      	ldr	r3, [pc, #256]	; (80031d4 <main+0x55c>)
 80030d4:	681b      	ldr	r3, [r3, #0]
 80030d6:	4618      	mov	r0, r3
 80030d8:	f7fd fa36 	bl	8000548 <__aeabi_f2d>
 80030dc:	4682      	mov	sl, r0
 80030de:	468b      	mov	fp, r1
 80030e0:	4b3d      	ldr	r3, [pc, #244]	; (80031d8 <main+0x560>)
 80030e2:	681b      	ldr	r3, [r3, #0]
 80030e4:	4618      	mov	r0, r3
 80030e6:	f7fd fa2f 	bl	8000548 <__aeabi_f2d>
 80030ea:	4602      	mov	r2, r0
 80030ec:	460b      	mov	r3, r1
 80030ee:	e9cd 2306 	strd	r2, r3, [sp, #24]
 80030f2:	e9cd ab04 	strd	sl, fp, [sp, #16]
 80030f6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80030fa:	e9cd 4500 	strd	r4, r5, [sp]
 80030fe:	e9d7 2300 	ldrd	r2, r3, [r7]
 8003102:	493a      	ldr	r1, [pc, #232]	; (80031ec <main+0x574>)
 8003104:	4836      	ldr	r0, [pc, #216]	; (80031e0 <main+0x568>)
 8003106:	f005 f925 	bl	8008354 <siprintf>
 800310a:	4603      	mov	r3, r0
 800310c:	b2da      	uxtb	r2, r3
 800310e:	4b35      	ldr	r3, [pc, #212]	; (80031e4 <main+0x56c>)
 8003110:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef, PositionCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8003112:	4b34      	ldr	r3, [pc, #208]	; (80031e4 <main+0x56c>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	b29a      	uxth	r2, r3
 8003118:	23c8      	movs	r3, #200	; 0xc8
 800311a:	4931      	ldr	r1, [pc, #196]	; (80031e0 <main+0x568>)
 800311c:	4832      	ldr	r0, [pc, #200]	; (80031e8 <main+0x570>)
 800311e:	f003 fa38 	bl	8006592 <HAL_UART_Transmit>
						// Read 4 words start from 0x012 to 0x015
						// Encoder pulse: 0x012 + 0x013 (2 words)
						// Motor Speed: 0x014 + 0x015 (2 words)
						// Pulse Error: (2 word)
						// Total is 6 words, 1word = 4 bytes
						ReadMultiRegister(ASDA_MotorSpeed,6);
 8003122:	2106      	movs	r1, #6
 8003124:	2012      	movs	r0, #18
 8003126:	f7fe fa3f 	bl	80015a8 <ReadMultiRegister>
					}
				}
				memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 800312a:	225a      	movs	r2, #90	; 0x5a
 800312c:	2100      	movs	r1, #0
 800312e:	482c      	ldr	r0, [pc, #176]	; (80031e0 <main+0x568>)
 8003130:	f004 fa88 	bl	8007644 <memset>
			}
			if(OutputDataRequest)
 8003134:	4b2e      	ldr	r3, [pc, #184]	; (80031f0 <main+0x578>)
 8003136:	781b      	ldrb	r3, [r3, #0]
 8003138:	2b00      	cmp	r3, #0
 800313a:	d02a      	beq.n	8003192 <main+0x51a>
				{
					CountTimerDriverOutput++;
 800313c:	4b2d      	ldr	r3, [pc, #180]	; (80031f4 <main+0x57c>)
 800313e:	881b      	ldrh	r3, [r3, #0]
 8003140:	3301      	adds	r3, #1
 8003142:	b29a      	uxth	r2, r3
 8003144:	4b2b      	ldr	r3, [pc, #172]	; (80031f4 <main+0x57c>)
 8003146:	801a      	strh	r2, [r3, #0]
					if (CountTimerDriverOutput >= 15) // 20*25=500 ms, timer 2 period is 1ms
 8003148:	4b2a      	ldr	r3, [pc, #168]	; (80031f4 <main+0x57c>)
 800314a:	881b      	ldrh	r3, [r3, #0]
 800314c:	2b0e      	cmp	r3, #14
 800314e:	d920      	bls.n	8003192 <main+0x51a>
					{
						DriverOutput = ReadLogicF7000Out(); // Read Driver Output
 8003150:	f7fe f8fe 	bl	8001350 <ReadLogicF7000Out>
 8003154:	4603      	mov	r3, r0
 8003156:	461a      	mov	r2, r3
 8003158:	4b27      	ldr	r3, [pc, #156]	; (80031f8 <main+0x580>)
 800315a:	801a      	strh	r2, [r3, #0]

						memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 800315c:	225a      	movs	r2, #90	; 0x5a
 800315e:	2100      	movs	r1, #0
 8003160:	481f      	ldr	r0, [pc, #124]	; (80031e0 <main+0x568>)
 8003162:	f004 fa6f 	bl	8007644 <memset>
						TxPCLen = sprintf(TxPCBuff,"o%de",DriverOutput); // 1 means only the driver outputs
 8003166:	4b24      	ldr	r3, [pc, #144]	; (80031f8 <main+0x580>)
 8003168:	881b      	ldrh	r3, [r3, #0]
 800316a:	461a      	mov	r2, r3
 800316c:	4923      	ldr	r1, [pc, #140]	; (80031fc <main+0x584>)
 800316e:	481c      	ldr	r0, [pc, #112]	; (80031e0 <main+0x568>)
 8003170:	f005 f8f0 	bl	8008354 <siprintf>
 8003174:	4603      	mov	r3, r0
 8003176:	b2da      	uxtb	r2, r3
 8003178:	4b1a      	ldr	r3, [pc, #104]	; (80031e4 <main+0x56c>)
 800317a:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 800317c:	4b19      	ldr	r3, [pc, #100]	; (80031e4 <main+0x56c>)
 800317e:	781b      	ldrb	r3, [r3, #0]
 8003180:	b29a      	uxth	r2, r3
 8003182:	23c8      	movs	r3, #200	; 0xc8
 8003184:	4916      	ldr	r1, [pc, #88]	; (80031e0 <main+0x568>)
 8003186:	4818      	ldr	r0, [pc, #96]	; (80031e8 <main+0x570>)
 8003188:	f003 fa03 	bl	8006592 <HAL_UART_Transmit>

						CountTimerDriverOutput = 0;
 800318c:	4b19      	ldr	r3, [pc, #100]	; (80031f4 <main+0x57c>)
 800318e:	2200      	movs	r2, #0
 8003190:	801a      	strh	r2, [r3, #0]
			// END Send data to the UI
		}
		// END 20ms period interrupt

		// BEGIN Process Driver Received Data
		if (RxUart5_Cpl_Flag) // Complete receive data from the driver
 8003192:	4b1b      	ldr	r3, [pc, #108]	; (8003200 <main+0x588>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	b2db      	uxtb	r3, r3
 8003198:	2b00      	cmp	r3, #0
 800319a:	f43f ad9b 	beq.w	8002cd4 <main+0x5c>
			{
				RxUart5_Cpl_Flag = false;
 800319e:	4b18      	ldr	r3, [pc, #96]	; (8003200 <main+0x588>)
 80031a0:	2200      	movs	r2, #0
 80031a2:	701a      	strb	r2, [r3, #0]

				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 80031a4:	4b17      	ldr	r3, [pc, #92]	; (8003204 <main+0x58c>)
 80031a6:	2200      	movs	r2, #0
 80031a8:	701a      	strb	r2, [r3, #0]
 80031aa:	e138      	b.n	800341e <main+0x7a6>
 80031ac:	f3af 8000 	nop.w
 80031b0:	51eb851f 	.word	0x51eb851f
 80031b4:	40091eb8 	.word	0x40091eb8
 80031b8:	20000433 	.word	0x20000433
 80031bc:	20003344 	.word	0x20003344
 80031c0:	20003330 	.word	0x20003330
 80031c4:	2000000a 	.word	0x2000000a
 80031c8:	200033a4 	.word	0x200033a4
 80031cc:	20003398 	.word	0x20003398
 80031d0:	200033d0 	.word	0x200033d0
 80031d4:	200033a8 	.word	0x200033a8
 80031d8:	20000010 	.word	0x20000010
 80031dc:	0800c0d8 	.word	0x0800c0d8
 80031e0:	200003b0 	.word	0x200003b0
 80031e4:	20000414 	.word	0x20000414
 80031e8:	200002f8 	.word	0x200002f8
 80031ec:	0800c0f4 	.word	0x0800c0f4
 80031f0:	20000001 	.word	0x20000001
 80031f4:	20003326 	.word	0x20003326
 80031f8:	20003328 	.word	0x20003328
 80031fc:	0800c110 	.word	0x0800c110
 8003200:	2000042e 	.word	0x2000042e
 8003204:	20000415 	.word	0x20000415
				{
					if (RxDriverBuff[i] == DriverID)
 8003208:	4ba5      	ldr	r3, [pc, #660]	; (80034a0 <main+0x828>)
 800320a:	781b      	ldrb	r3, [r3, #0]
 800320c:	461a      	mov	r2, r3
 800320e:	4ba5      	ldr	r3, [pc, #660]	; (80034a4 <main+0x82c>)
 8003210:	5c9b      	ldrb	r3, [r3, r2]
 8003212:	b2db      	uxtb	r3, r3
 8003214:	2b01      	cmp	r3, #1
 8003216:	f040 80fc 	bne.w	8003412 <main+0x79a>
					{
						if (RxDriverBuff[1+i] == 3)
 800321a:	4ba1      	ldr	r3, [pc, #644]	; (80034a0 <main+0x828>)
 800321c:	781b      	ldrb	r3, [r3, #0]
 800321e:	3301      	adds	r3, #1
 8003220:	4aa0      	ldr	r2, [pc, #640]	; (80034a4 <main+0x82c>)
 8003222:	5cd3      	ldrb	r3, [r2, r3]
 8003224:	b2db      	uxtb	r3, r3
 8003226:	2b03      	cmp	r3, #3
 8003228:	f040 80ad 	bne.w	8003386 <main+0x70e>
						{
							if (MotorDriver) // FDA7000
 800322c:	4b9e      	ldr	r3, [pc, #632]	; (80034a8 <main+0x830>)
 800322e:	781b      	ldrb	r3, [r3, #0]
 8003230:	2b00      	cmp	r3, #0
 8003232:	d044      	beq.n	80032be <main+0x646>
							{
								SpeedValueRegion[0] = RxDriverBuff[6+i];
 8003234:	4b9a      	ldr	r3, [pc, #616]	; (80034a0 <main+0x828>)
 8003236:	781b      	ldrb	r3, [r3, #0]
 8003238:	3306      	adds	r3, #6
 800323a:	4a9a      	ldr	r2, [pc, #616]	; (80034a4 <main+0x82c>)
 800323c:	5cd3      	ldrb	r3, [r2, r3]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	4b9a      	ldr	r3, [pc, #616]	; (80034ac <main+0x834>)
 8003242:	701a      	strb	r2, [r3, #0]
								SpeedValueRegion[1] = RxDriverBuff[5+i];
 8003244:	4b96      	ldr	r3, [pc, #600]	; (80034a0 <main+0x828>)
 8003246:	781b      	ldrb	r3, [r3, #0]
 8003248:	3305      	adds	r3, #5
 800324a:	4a96      	ldr	r2, [pc, #600]	; (80034a4 <main+0x82c>)
 800324c:	5cd3      	ldrb	r3, [r2, r3]
 800324e:	b2da      	uxtb	r2, r3
 8003250:	4b96      	ldr	r3, [pc, #600]	; (80034ac <main+0x834>)
 8003252:	705a      	strb	r2, [r3, #1]
								SpeedValueRegion[2] = RxDriverBuff[4+i];
 8003254:	4b92      	ldr	r3, [pc, #584]	; (80034a0 <main+0x828>)
 8003256:	781b      	ldrb	r3, [r3, #0]
 8003258:	3304      	adds	r3, #4
 800325a:	4a92      	ldr	r2, [pc, #584]	; (80034a4 <main+0x82c>)
 800325c:	5cd3      	ldrb	r3, [r2, r3]
 800325e:	b2da      	uxtb	r2, r3
 8003260:	4b92      	ldr	r3, [pc, #584]	; (80034ac <main+0x834>)
 8003262:	709a      	strb	r2, [r3, #2]
								SpeedValueRegion[3] = RxDriverBuff[3+i];
 8003264:	4b8e      	ldr	r3, [pc, #568]	; (80034a0 <main+0x828>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	3303      	adds	r3, #3
 800326a:	4a8e      	ldr	r2, [pc, #568]	; (80034a4 <main+0x82c>)
 800326c:	5cd3      	ldrb	r3, [r2, r3]
 800326e:	b2da      	uxtb	r2, r3
 8003270:	4b8e      	ldr	r3, [pc, #568]	; (80034ac <main+0x834>)
 8003272:	70da      	strb	r2, [r3, #3]
 8003274:	4b8d      	ldr	r3, [pc, #564]	; (80034ac <main+0x834>)
 8003276:	681b      	ldr	r3, [r3, #0]

								memcpy(&MotorSpeed, SpeedValueRegion, 4);
 8003278:	4a8d      	ldr	r2, [pc, #564]	; (80034b0 <main+0x838>)
 800327a:	6013      	str	r3, [r2, #0]

								MotorEncPulse = (RxDriverBuff[19+i] << 24) | (RxDriverBuff[20+i] << 16) | (RxDriverBuff[21+i] << 8) | RxDriverBuff[22+i];
 800327c:	4b88      	ldr	r3, [pc, #544]	; (80034a0 <main+0x828>)
 800327e:	781b      	ldrb	r3, [r3, #0]
 8003280:	3313      	adds	r3, #19
 8003282:	4a88      	ldr	r2, [pc, #544]	; (80034a4 <main+0x82c>)
 8003284:	5cd3      	ldrb	r3, [r2, r3]
 8003286:	b2db      	uxtb	r3, r3
 8003288:	061a      	lsls	r2, r3, #24
 800328a:	4b85      	ldr	r3, [pc, #532]	; (80034a0 <main+0x828>)
 800328c:	781b      	ldrb	r3, [r3, #0]
 800328e:	3314      	adds	r3, #20
 8003290:	4984      	ldr	r1, [pc, #528]	; (80034a4 <main+0x82c>)
 8003292:	5ccb      	ldrb	r3, [r1, r3]
 8003294:	b2db      	uxtb	r3, r3
 8003296:	041b      	lsls	r3, r3, #16
 8003298:	431a      	orrs	r2, r3
 800329a:	4b81      	ldr	r3, [pc, #516]	; (80034a0 <main+0x828>)
 800329c:	781b      	ldrb	r3, [r3, #0]
 800329e:	3315      	adds	r3, #21
 80032a0:	4980      	ldr	r1, [pc, #512]	; (80034a4 <main+0x82c>)
 80032a2:	5ccb      	ldrb	r3, [r1, r3]
 80032a4:	b2db      	uxtb	r3, r3
 80032a6:	021b      	lsls	r3, r3, #8
 80032a8:	4313      	orrs	r3, r2
 80032aa:	4a7d      	ldr	r2, [pc, #500]	; (80034a0 <main+0x828>)
 80032ac:	7812      	ldrb	r2, [r2, #0]
 80032ae:	3216      	adds	r2, #22
 80032b0:	497c      	ldr	r1, [pc, #496]	; (80034a4 <main+0x82c>)
 80032b2:	5c8a      	ldrb	r2, [r1, r2]
 80032b4:	b2d2      	uxtb	r2, r2
 80032b6:	4313      	orrs	r3, r2
 80032b8:	4a7e      	ldr	r2, [pc, #504]	; (80034b4 <main+0x83c>)
 80032ba:	6013      	str	r3, [r2, #0]
 80032bc:	e059      	b.n	8003372 <main+0x6fa>
							}
							else // ASDA-A3
							{
								MotorSpeedBuff = (float)((RxDriverBuff[5+i] << 24) | (RxDriverBuff[6+i] << 16) | (RxDriverBuff[3+i] << 8) | RxDriverBuff[4+i])/((float)-10.0); // Minus to Reverse
 80032be:	4b78      	ldr	r3, [pc, #480]	; (80034a0 <main+0x828>)
 80032c0:	781b      	ldrb	r3, [r3, #0]
 80032c2:	3305      	adds	r3, #5
 80032c4:	4a77      	ldr	r2, [pc, #476]	; (80034a4 <main+0x82c>)
 80032c6:	5cd3      	ldrb	r3, [r2, r3]
 80032c8:	b2db      	uxtb	r3, r3
 80032ca:	061a      	lsls	r2, r3, #24
 80032cc:	4b74      	ldr	r3, [pc, #464]	; (80034a0 <main+0x828>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	3306      	adds	r3, #6
 80032d2:	4974      	ldr	r1, [pc, #464]	; (80034a4 <main+0x82c>)
 80032d4:	5ccb      	ldrb	r3, [r1, r3]
 80032d6:	b2db      	uxtb	r3, r3
 80032d8:	041b      	lsls	r3, r3, #16
 80032da:	431a      	orrs	r2, r3
 80032dc:	4b70      	ldr	r3, [pc, #448]	; (80034a0 <main+0x828>)
 80032de:	781b      	ldrb	r3, [r3, #0]
 80032e0:	3303      	adds	r3, #3
 80032e2:	4970      	ldr	r1, [pc, #448]	; (80034a4 <main+0x82c>)
 80032e4:	5ccb      	ldrb	r3, [r1, r3]
 80032e6:	b2db      	uxtb	r3, r3
 80032e8:	021b      	lsls	r3, r3, #8
 80032ea:	4313      	orrs	r3, r2
 80032ec:	4a6c      	ldr	r2, [pc, #432]	; (80034a0 <main+0x828>)
 80032ee:	7812      	ldrb	r2, [r2, #0]
 80032f0:	3204      	adds	r2, #4
 80032f2:	496c      	ldr	r1, [pc, #432]	; (80034a4 <main+0x82c>)
 80032f4:	5c8a      	ldrb	r2, [r1, r2]
 80032f6:	b2d2      	uxtb	r2, r2
 80032f8:	4313      	orrs	r3, r2
 80032fa:	ee07 3a90 	vmov	s15, r3
 80032fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003302:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003306:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800330a:	4b6b      	ldr	r3, [pc, #428]	; (80034b8 <main+0x840>)
 800330c:	edc3 7a00 	vstr	s15, [r3]

								if (fabs(MotorSpeedBuff) <= 2000)
 8003310:	4b69      	ldr	r3, [pc, #420]	; (80034b8 <main+0x840>)
 8003312:	edd3 7a00 	vldr	s15, [r3]
 8003316:	eef0 7ae7 	vabs.f32	s15, s15
 800331a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80034bc <main+0x844>
 800331e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003322:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003326:	d803      	bhi.n	8003330 <main+0x6b8>
								{
									MotorSpeed = MotorSpeedBuff;
 8003328:	4b63      	ldr	r3, [pc, #396]	; (80034b8 <main+0x840>)
 800332a:	681b      	ldr	r3, [r3, #0]
 800332c:	4a60      	ldr	r2, [pc, #384]	; (80034b0 <main+0x838>)
 800332e:	6013      	str	r3, [r2, #0]
								}

								MotorEncPulse = -((RxDriverBuff[9+i] << 24) | (RxDriverBuff[10+i] << 16) | (RxDriverBuff[7+i] << 8) | RxDriverBuff[8+i]); // Minus to Reverse
 8003330:	4b5b      	ldr	r3, [pc, #364]	; (80034a0 <main+0x828>)
 8003332:	781b      	ldrb	r3, [r3, #0]
 8003334:	3309      	adds	r3, #9
 8003336:	4a5b      	ldr	r2, [pc, #364]	; (80034a4 <main+0x82c>)
 8003338:	5cd3      	ldrb	r3, [r2, r3]
 800333a:	b2db      	uxtb	r3, r3
 800333c:	061a      	lsls	r2, r3, #24
 800333e:	4b58      	ldr	r3, [pc, #352]	; (80034a0 <main+0x828>)
 8003340:	781b      	ldrb	r3, [r3, #0]
 8003342:	330a      	adds	r3, #10
 8003344:	4957      	ldr	r1, [pc, #348]	; (80034a4 <main+0x82c>)
 8003346:	5ccb      	ldrb	r3, [r1, r3]
 8003348:	b2db      	uxtb	r3, r3
 800334a:	041b      	lsls	r3, r3, #16
 800334c:	431a      	orrs	r2, r3
 800334e:	4b54      	ldr	r3, [pc, #336]	; (80034a0 <main+0x828>)
 8003350:	781b      	ldrb	r3, [r3, #0]
 8003352:	3307      	adds	r3, #7
 8003354:	4953      	ldr	r1, [pc, #332]	; (80034a4 <main+0x82c>)
 8003356:	5ccb      	ldrb	r3, [r1, r3]
 8003358:	b2db      	uxtb	r3, r3
 800335a:	021b      	lsls	r3, r3, #8
 800335c:	4313      	orrs	r3, r2
 800335e:	4a50      	ldr	r2, [pc, #320]	; (80034a0 <main+0x828>)
 8003360:	7812      	ldrb	r2, [r2, #0]
 8003362:	3208      	adds	r2, #8
 8003364:	494f      	ldr	r1, [pc, #316]	; (80034a4 <main+0x82c>)
 8003366:	5c8a      	ldrb	r2, [r1, r2]
 8003368:	b2d2      	uxtb	r2, r2
 800336a:	4313      	orrs	r3, r2
 800336c:	425b      	negs	r3, r3
 800336e:	4a51      	ldr	r2, [pc, #324]	; (80034b4 <main+0x83c>)
 8003370:	6013      	str	r3, [r2, #0]
							}

							memset (RxDriverBuff, '\0', sizeof (RxDriverBuff)); // reset buffer
 8003372:	221e      	movs	r2, #30
 8003374:	2100      	movs	r1, #0
 8003376:	484b      	ldr	r0, [pc, #300]	; (80034a4 <main+0x82c>)
 8003378:	f004 f964 	bl	8007644 <memset>
							HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte for the next time
 800337c:	2201      	movs	r2, #1
 800337e:	4950      	ldr	r1, [pc, #320]	; (80034c0 <main+0x848>)
 8003380:	4850      	ldr	r0, [pc, #320]	; (80034c4 <main+0x84c>)
 8003382:	f003 f998 	bl	80066b6 <HAL_UART_Receive_IT>
						}
						if (RxDriverBuff[1] == 6) // Writing to a register
 8003386:	4b47      	ldr	r3, [pc, #284]	; (80034a4 <main+0x82c>)
 8003388:	785b      	ldrb	r3, [r3, #1]
 800338a:	b2db      	uxtb	r3, r3
 800338c:	2b06      	cmp	r3, #6
 800338e:	d140      	bne.n	8003412 <main+0x79a>
						{
							// Send to PC to check the writing result
							memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8003390:	225a      	movs	r2, #90	; 0x5a
 8003392:	2100      	movs	r1, #0
 8003394:	484c      	ldr	r0, [pc, #304]	; (80034c8 <main+0x850>)
 8003396:	f004 f955 	bl	8007644 <memset>
							TxPCLen = sprintf(TxPCBuff,"w%d/%d/%d/%d/%d/%d/%d/%d/%d/e",RxDriverBuff[0],RxDriverBuff[1],RxDriverBuff[2],RxDriverBuff[3],RxDriverBuff[4],RxDriverBuff[5],RxDriverBuff[6],RxDriverBuff[7],RxDriverBuff[8]);
 800339a:	4b42      	ldr	r3, [pc, #264]	; (80034a4 <main+0x82c>)
 800339c:	781b      	ldrb	r3, [r3, #0]
 800339e:	b2db      	uxtb	r3, r3
 80033a0:	469c      	mov	ip, r3
 80033a2:	4b40      	ldr	r3, [pc, #256]	; (80034a4 <main+0x82c>)
 80033a4:	785b      	ldrb	r3, [r3, #1]
 80033a6:	b2db      	uxtb	r3, r3
 80033a8:	469e      	mov	lr, r3
 80033aa:	4b3e      	ldr	r3, [pc, #248]	; (80034a4 <main+0x82c>)
 80033ac:	789b      	ldrb	r3, [r3, #2]
 80033ae:	b2db      	uxtb	r3, r3
 80033b0:	461a      	mov	r2, r3
 80033b2:	4b3c      	ldr	r3, [pc, #240]	; (80034a4 <main+0x82c>)
 80033b4:	78db      	ldrb	r3, [r3, #3]
 80033b6:	b2db      	uxtb	r3, r3
 80033b8:	4619      	mov	r1, r3
 80033ba:	4b3a      	ldr	r3, [pc, #232]	; (80034a4 <main+0x82c>)
 80033bc:	791b      	ldrb	r3, [r3, #4]
 80033be:	b2db      	uxtb	r3, r3
 80033c0:	4618      	mov	r0, r3
 80033c2:	4b38      	ldr	r3, [pc, #224]	; (80034a4 <main+0x82c>)
 80033c4:	795b      	ldrb	r3, [r3, #5]
 80033c6:	b2db      	uxtb	r3, r3
 80033c8:	461c      	mov	r4, r3
 80033ca:	4b36      	ldr	r3, [pc, #216]	; (80034a4 <main+0x82c>)
 80033cc:	799b      	ldrb	r3, [r3, #6]
 80033ce:	b2db      	uxtb	r3, r3
 80033d0:	461d      	mov	r5, r3
 80033d2:	4b34      	ldr	r3, [pc, #208]	; (80034a4 <main+0x82c>)
 80033d4:	79db      	ldrb	r3, [r3, #7]
 80033d6:	b2db      	uxtb	r3, r3
 80033d8:	461e      	mov	r6, r3
 80033da:	4b32      	ldr	r3, [pc, #200]	; (80034a4 <main+0x82c>)
 80033dc:	7a1b      	ldrb	r3, [r3, #8]
 80033de:	b2db      	uxtb	r3, r3
 80033e0:	9306      	str	r3, [sp, #24]
 80033e2:	9605      	str	r6, [sp, #20]
 80033e4:	9504      	str	r5, [sp, #16]
 80033e6:	9403      	str	r4, [sp, #12]
 80033e8:	9002      	str	r0, [sp, #8]
 80033ea:	9101      	str	r1, [sp, #4]
 80033ec:	9200      	str	r2, [sp, #0]
 80033ee:	4673      	mov	r3, lr
 80033f0:	4662      	mov	r2, ip
 80033f2:	4936      	ldr	r1, [pc, #216]	; (80034cc <main+0x854>)
 80033f4:	4834      	ldr	r0, [pc, #208]	; (80034c8 <main+0x850>)
 80033f6:	f004 ffad 	bl	8008354 <siprintf>
 80033fa:	4603      	mov	r3, r0
 80033fc:	b2da      	uxtb	r2, r3
 80033fe:	4b34      	ldr	r3, [pc, #208]	; (80034d0 <main+0x858>)
 8003400:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8003402:	4b33      	ldr	r3, [pc, #204]	; (80034d0 <main+0x858>)
 8003404:	781b      	ldrb	r3, [r3, #0]
 8003406:	b29a      	uxth	r2, r3
 8003408:	23c8      	movs	r3, #200	; 0xc8
 800340a:	492f      	ldr	r1, [pc, #188]	; (80034c8 <main+0x850>)
 800340c:	4831      	ldr	r0, [pc, #196]	; (80034d4 <main+0x85c>)
 800340e:	f003 f8c0 	bl	8006592 <HAL_UART_Transmit>
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8003412:	4b23      	ldr	r3, [pc, #140]	; (80034a0 <main+0x828>)
 8003414:	781b      	ldrb	r3, [r3, #0]
 8003416:	3301      	adds	r3, #1
 8003418:	b2da      	uxtb	r2, r3
 800341a:	4b21      	ldr	r3, [pc, #132]	; (80034a0 <main+0x828>)
 800341c:	701a      	strb	r2, [r3, #0]
 800341e:	4b20      	ldr	r3, [pc, #128]	; (80034a0 <main+0x828>)
 8003420:	781b      	ldrb	r3, [r3, #0]
 8003422:	2b1e      	cmp	r3, #30
 8003424:	f67f aef0 	bls.w	8003208 <main+0x590>
						}
						//break;
					}
				}
				ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/EncoderResolution; // Calculate Object Position in m
 8003428:	4b2b      	ldr	r3, [pc, #172]	; (80034d8 <main+0x860>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd f88b 	bl	8000548 <__aeabi_f2d>
 8003432:	a319      	add	r3, pc, #100	; (adr r3, 8003498 <main+0x820>)
 8003434:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003438:	f7fd f8de 	bl	80005f8 <__aeabi_dmul>
 800343c:	4602      	mov	r2, r0
 800343e:	460b      	mov	r3, r1
 8003440:	4614      	mov	r4, r2
 8003442:	461d      	mov	r5, r3
 8003444:	4b1b      	ldr	r3, [pc, #108]	; (80034b4 <main+0x83c>)
 8003446:	681a      	ldr	r2, [r3, #0]
 8003448:	4b24      	ldr	r3, [pc, #144]	; (80034dc <main+0x864>)
 800344a:	681b      	ldr	r3, [r3, #0]
 800344c:	1ad3      	subs	r3, r2, r3
 800344e:	4618      	mov	r0, r3
 8003450:	f7fd f868 	bl	8000524 <__aeabi_i2d>
 8003454:	4602      	mov	r2, r0
 8003456:	460b      	mov	r3, r1
 8003458:	4620      	mov	r0, r4
 800345a:	4629      	mov	r1, r5
 800345c:	f7fd f8cc 	bl	80005f8 <__aeabi_dmul>
 8003460:	4602      	mov	r2, r0
 8003462:	460b      	mov	r3, r1
 8003464:	4614      	mov	r4, r2
 8003466:	461d      	mov	r5, r3
 8003468:	4b1d      	ldr	r3, [pc, #116]	; (80034e0 <main+0x868>)
 800346a:	881b      	ldrh	r3, [r3, #0]
 800346c:	4618      	mov	r0, r3
 800346e:	f7fd f859 	bl	8000524 <__aeabi_i2d>
 8003472:	4602      	mov	r2, r0
 8003474:	460b      	mov	r3, r1
 8003476:	4620      	mov	r0, r4
 8003478:	4629      	mov	r1, r5
 800347a:	f7fd f9e7 	bl	800084c <__aeabi_ddiv>
 800347e:	4602      	mov	r2, r0
 8003480:	460b      	mov	r3, r1
 8003482:	4610      	mov	r0, r2
 8003484:	4619      	mov	r1, r3
 8003486:	f7fd fbaf 	bl	8000be8 <__aeabi_d2f>
 800348a:	4603      	mov	r3, r0
 800348c:	4a15      	ldr	r2, [pc, #84]	; (80034e4 <main+0x86c>)
 800348e:	6013      	str	r3, [r2, #0]
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8003490:	e420      	b.n	8002cd4 <main+0x5c>
 8003492:	bf00      	nop
 8003494:	f3af 8000 	nop.w
 8003498:	51eb851f 	.word	0x51eb851f
 800349c:	40191eb8 	.word	0x40191eb8
 80034a0:	20000415 	.word	0x20000415
 80034a4:	20000364 	.word	0x20000364
 80034a8:	20000003 	.word	0x20000003
 80034ac:	20000418 	.word	0x20000418
 80034b0:	20003398 	.word	0x20003398
 80034b4:	200033a0 	.word	0x200033a0
 80034b8:	2000339c 	.word	0x2000339c
 80034bc:	44fa0000 	.word	0x44fa0000
 80034c0:	200003ad 	.word	0x200003ad
 80034c4:	200002b4 	.word	0x200002b4
 80034c8:	200003b0 	.word	0x200003b0
 80034cc:	0800c118 	.word	0x0800c118
 80034d0:	20000414 	.word	0x20000414
 80034d4:	200002f8 	.word	0x200002f8
 80034d8:	20003330 	.word	0x20003330
 80034dc:	2000333c 	.word	0x2000333c
 80034e0:	2000000a 	.word	0x2000000a
 80034e4:	200033d0 	.word	0x200033d0

080034e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b094      	sub	sp, #80	; 0x50
 80034ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80034ee:	f107 0320 	add.w	r3, r7, #32
 80034f2:	2230      	movs	r2, #48	; 0x30
 80034f4:	2100      	movs	r1, #0
 80034f6:	4618      	mov	r0, r3
 80034f8:	f004 f8a4 	bl	8007644 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80034fc:	f107 030c 	add.w	r3, r7, #12
 8003500:	2200      	movs	r2, #0
 8003502:	601a      	str	r2, [r3, #0]
 8003504:	605a      	str	r2, [r3, #4]
 8003506:	609a      	str	r2, [r3, #8]
 8003508:	60da      	str	r2, [r3, #12]
 800350a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800350c:	2300      	movs	r3, #0
 800350e:	60bb      	str	r3, [r7, #8]
 8003510:	4b28      	ldr	r3, [pc, #160]	; (80035b4 <SystemClock_Config+0xcc>)
 8003512:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003514:	4a27      	ldr	r2, [pc, #156]	; (80035b4 <SystemClock_Config+0xcc>)
 8003516:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800351a:	6413      	str	r3, [r2, #64]	; 0x40
 800351c:	4b25      	ldr	r3, [pc, #148]	; (80035b4 <SystemClock_Config+0xcc>)
 800351e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003520:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003524:	60bb      	str	r3, [r7, #8]
 8003526:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003528:	2300      	movs	r3, #0
 800352a:	607b      	str	r3, [r7, #4]
 800352c:	4b22      	ldr	r3, [pc, #136]	; (80035b8 <SystemClock_Config+0xd0>)
 800352e:	681b      	ldr	r3, [r3, #0]
 8003530:	4a21      	ldr	r2, [pc, #132]	; (80035b8 <SystemClock_Config+0xd0>)
 8003532:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003536:	6013      	str	r3, [r2, #0]
 8003538:	4b1f      	ldr	r3, [pc, #124]	; (80035b8 <SystemClock_Config+0xd0>)
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003540:	607b      	str	r3, [r7, #4]
 8003542:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8003544:	2301      	movs	r3, #1
 8003546:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8003548:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800354c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800354e:	2302      	movs	r3, #2
 8003550:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8003552:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8003556:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8003558:	230c      	movs	r3, #12
 800355a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800355c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8003560:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8003562:	2302      	movs	r3, #2
 8003564:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8003566:	2304      	movs	r3, #4
 8003568:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800356a:	f107 0320 	add.w	r3, r7, #32
 800356e:	4618      	mov	r0, r3
 8003570:	f001 fc9a 	bl	8004ea8 <HAL_RCC_OscConfig>
 8003574:	4603      	mov	r3, r0
 8003576:	2b00      	cmp	r3, #0
 8003578:	d001      	beq.n	800357e <SystemClock_Config+0x96>
  {
    Error_Handler();
 800357a:	f000 fad7 	bl	8003b2c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800357e:	230f      	movs	r3, #15
 8003580:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8003582:	2302      	movs	r3, #2
 8003584:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8003586:	2300      	movs	r3, #0
 8003588:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800358a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800358e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8003590:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8003594:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8003596:	f107 030c 	add.w	r3, r7, #12
 800359a:	2105      	movs	r1, #5
 800359c:	4618      	mov	r0, r3
 800359e:	f001 fefb 	bl	8005398 <HAL_RCC_ClockConfig>
 80035a2:	4603      	mov	r3, r0
 80035a4:	2b00      	cmp	r3, #0
 80035a6:	d001      	beq.n	80035ac <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80035a8:	f000 fac0 	bl	8003b2c <Error_Handler>
  }
}
 80035ac:	bf00      	nop
 80035ae:	3750      	adds	r7, #80	; 0x50
 80035b0:	46bd      	mov	sp, r7
 80035b2:	bd80      	pop	{r7, pc}
 80035b4:	40023800 	.word	0x40023800
 80035b8:	40007000 	.word	0x40007000

080035bc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80035bc:	b580      	push	{r7, lr}
 80035be:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 80035c0:	2200      	movs	r2, #0
 80035c2:	2100      	movs	r1, #0
 80035c4:	2047      	movs	r0, #71	; 0x47
 80035c6:	f000 fed6 	bl	8004376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 80035ca:	2047      	movs	r0, #71	; 0x47
 80035cc:	f000 feef 	bl	80043ae <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 80035d0:	2200      	movs	r2, #0
 80035d2:	2102      	movs	r1, #2
 80035d4:	201d      	movs	r0, #29
 80035d6:	f000 fece 	bl	8004376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80035da:	201d      	movs	r0, #29
 80035dc:	f000 fee7 	bl	80043ae <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 80035e0:	2200      	movs	r2, #0
 80035e2:	2103      	movs	r1, #3
 80035e4:	201c      	movs	r0, #28
 80035e6:	f000 fec6 	bl	8004376 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80035ea:	201c      	movs	r0, #28
 80035ec:	f000 fedf 	bl	80043ae <HAL_NVIC_EnableIRQ>
}
 80035f0:	bf00      	nop
 80035f2:	bd80      	pop	{r7, pc}

080035f4 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08a      	sub	sp, #40	; 0x28
 80035f8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80035fa:	f107 0318 	add.w	r3, r7, #24
 80035fe:	2200      	movs	r2, #0
 8003600:	601a      	str	r2, [r3, #0]
 8003602:	605a      	str	r2, [r3, #4]
 8003604:	609a      	str	r2, [r3, #8]
 8003606:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003608:	f107 0310 	add.w	r3, r7, #16
 800360c:	2200      	movs	r2, #0
 800360e:	601a      	str	r2, [r3, #0]
 8003610:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8003612:	463b      	mov	r3, r7
 8003614:	2200      	movs	r2, #0
 8003616:	601a      	str	r2, [r3, #0]
 8003618:	605a      	str	r2, [r3, #4]
 800361a:	609a      	str	r2, [r3, #8]
 800361c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800361e:	4b31      	ldr	r3, [pc, #196]	; (80036e4 <MX_TIM2_Init+0xf0>)
 8003620:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8003624:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 8003626:	4b2f      	ldr	r3, [pc, #188]	; (80036e4 <MX_TIM2_Init+0xf0>)
 8003628:	2209      	movs	r2, #9
 800362a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800362c:	4b2d      	ldr	r3, [pc, #180]	; (80036e4 <MX_TIM2_Init+0xf0>)
 800362e:	2200      	movs	r2, #0
 8003630:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8003632:	4b2c      	ldr	r3, [pc, #176]	; (80036e4 <MX_TIM2_Init+0xf0>)
 8003634:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8003638:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800363a:	4b2a      	ldr	r3, [pc, #168]	; (80036e4 <MX_TIM2_Init+0xf0>)
 800363c:	2200      	movs	r2, #0
 800363e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003640:	4b28      	ldr	r3, [pc, #160]	; (80036e4 <MX_TIM2_Init+0xf0>)
 8003642:	2280      	movs	r2, #128	; 0x80
 8003644:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8003646:	4827      	ldr	r0, [pc, #156]	; (80036e4 <MX_TIM2_Init+0xf0>)
 8003648:	f002 f886 	bl	8005758 <HAL_TIM_Base_Init>
 800364c:	4603      	mov	r3, r0
 800364e:	2b00      	cmp	r3, #0
 8003650:	d001      	beq.n	8003656 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8003652:	f000 fa6b 	bl	8003b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003656:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800365a:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800365c:	f107 0318 	add.w	r3, r7, #24
 8003660:	4619      	mov	r1, r3
 8003662:	4820      	ldr	r0, [pc, #128]	; (80036e4 <MX_TIM2_Init+0xf0>)
 8003664:	f002 fb64 	bl	8005d30 <HAL_TIM_ConfigClockSource>
 8003668:	4603      	mov	r3, r0
 800366a:	2b00      	cmp	r3, #0
 800366c:	d001      	beq.n	8003672 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800366e:	f000 fa5d 	bl	8003b2c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8003672:	481c      	ldr	r0, [pc, #112]	; (80036e4 <MX_TIM2_Init+0xf0>)
 8003674:	f002 f95f 	bl	8005936 <HAL_TIM_IC_Init>
 8003678:	4603      	mov	r3, r0
 800367a:	2b00      	cmp	r3, #0
 800367c:	d001      	beq.n	8003682 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800367e:	f000 fa55 	bl	8003b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8003682:	2320      	movs	r3, #32
 8003684:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003686:	2300      	movs	r3, #0
 8003688:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800368a:	f107 0310 	add.w	r3, r7, #16
 800368e:	4619      	mov	r1, r3
 8003690:	4814      	ldr	r0, [pc, #80]	; (80036e4 <MX_TIM2_Init+0xf0>)
 8003692:	f002 fea1 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003696:	4603      	mov	r3, r0
 8003698:	2b00      	cmp	r3, #0
 800369a:	d001      	beq.n	80036a0 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800369c:	f000 fa46 	bl	8003b2c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80036a0:	2300      	movs	r3, #0
 80036a2:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80036a4:	2301      	movs	r3, #1
 80036a6:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 80036a8:	2300      	movs	r3, #0
 80036aa:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 80036ac:	2300      	movs	r3, #0
 80036ae:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 80036b0:	463b      	mov	r3, r7
 80036b2:	2200      	movs	r2, #0
 80036b4:	4619      	mov	r1, r3
 80036b6:	480b      	ldr	r0, [pc, #44]	; (80036e4 <MX_TIM2_Init+0xf0>)
 80036b8:	f002 fa9e 	bl	8005bf8 <HAL_TIM_IC_ConfigChannel>
 80036bc:	4603      	mov	r3, r0
 80036be:	2b00      	cmp	r3, #0
 80036c0:	d001      	beq.n	80036c6 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 80036c2:	f000 fa33 	bl	8003b2c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 80036c6:	463b      	mov	r3, r7
 80036c8:	2204      	movs	r2, #4
 80036ca:	4619      	mov	r1, r3
 80036cc:	4805      	ldr	r0, [pc, #20]	; (80036e4 <MX_TIM2_Init+0xf0>)
 80036ce:	f002 fa93 	bl	8005bf8 <HAL_TIM_IC_ConfigChannel>
 80036d2:	4603      	mov	r3, r0
 80036d4:	2b00      	cmp	r3, #0
 80036d6:	d001      	beq.n	80036dc <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 80036d8:	f000 fa28 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80036dc:	bf00      	nop
 80036de:	3728      	adds	r7, #40	; 0x28
 80036e0:	46bd      	mov	sp, r7
 80036e2:	bd80      	pop	{r7, pc}
 80036e4:	20000224 	.word	0x20000224

080036e8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80036e8:	b580      	push	{r7, lr}
 80036ea:	b086      	sub	sp, #24
 80036ec:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80036ee:	f107 0308 	add.w	r3, r7, #8
 80036f2:	2200      	movs	r2, #0
 80036f4:	601a      	str	r2, [r3, #0]
 80036f6:	605a      	str	r2, [r3, #4]
 80036f8:	609a      	str	r2, [r3, #8]
 80036fa:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80036fc:	463b      	mov	r3, r7
 80036fe:	2200      	movs	r2, #0
 8003700:	601a      	str	r2, [r3, #0]
 8003702:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003704:	4b1c      	ldr	r3, [pc, #112]	; (8003778 <MX_TIM3_Init+0x90>)
 8003706:	4a1d      	ldr	r2, [pc, #116]	; (800377c <MX_TIM3_Init+0x94>)
 8003708:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800370a:	4b1b      	ldr	r3, [pc, #108]	; (8003778 <MX_TIM3_Init+0x90>)
 800370c:	2201      	movs	r2, #1
 800370e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003710:	4b19      	ldr	r3, [pc, #100]	; (8003778 <MX_TIM3_Init+0x90>)
 8003712:	2200      	movs	r2, #0
 8003714:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168;
 8003716:	4b18      	ldr	r3, [pc, #96]	; (8003778 <MX_TIM3_Init+0x90>)
 8003718:	22a8      	movs	r2, #168	; 0xa8
 800371a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800371c:	4b16      	ldr	r3, [pc, #88]	; (8003778 <MX_TIM3_Init+0x90>)
 800371e:	2200      	movs	r2, #0
 8003720:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003722:	4b15      	ldr	r3, [pc, #84]	; (8003778 <MX_TIM3_Init+0x90>)
 8003724:	2200      	movs	r2, #0
 8003726:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003728:	4813      	ldr	r0, [pc, #76]	; (8003778 <MX_TIM3_Init+0x90>)
 800372a:	f002 f815 	bl	8005758 <HAL_TIM_Base_Init>
 800372e:	4603      	mov	r3, r0
 8003730:	2b00      	cmp	r3, #0
 8003732:	d001      	beq.n	8003738 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8003734:	f000 f9fa 	bl	8003b2c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003738:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800373c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800373e:	f107 0308 	add.w	r3, r7, #8
 8003742:	4619      	mov	r1, r3
 8003744:	480c      	ldr	r0, [pc, #48]	; (8003778 <MX_TIM3_Init+0x90>)
 8003746:	f002 faf3 	bl	8005d30 <HAL_TIM_ConfigClockSource>
 800374a:	4603      	mov	r3, r0
 800374c:	2b00      	cmp	r3, #0
 800374e:	d001      	beq.n	8003754 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003750:	f000 f9ec 	bl	8003b2c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003754:	2300      	movs	r3, #0
 8003756:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003758:	2300      	movs	r3, #0
 800375a:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800375c:	463b      	mov	r3, r7
 800375e:	4619      	mov	r1, r3
 8003760:	4805      	ldr	r0, [pc, #20]	; (8003778 <MX_TIM3_Init+0x90>)
 8003762:	f002 fe39 	bl	80063d8 <HAL_TIMEx_MasterConfigSynchronization>
 8003766:	4603      	mov	r3, r0
 8003768:	2b00      	cmp	r3, #0
 800376a:	d001      	beq.n	8003770 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800376c:	f000 f9de 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003770:	bf00      	nop
 8003772:	3718      	adds	r7, #24
 8003774:	46bd      	mov	sp, r7
 8003776:	bd80      	pop	{r7, pc}
 8003778:	2000026c 	.word	0x2000026c
 800377c:	40000400 	.word	0x40000400

08003780 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003780:	b580      	push	{r7, lr}
 8003782:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003784:	4b11      	ldr	r3, [pc, #68]	; (80037cc <MX_UART5_Init+0x4c>)
 8003786:	4a12      	ldr	r2, [pc, #72]	; (80037d0 <MX_UART5_Init+0x50>)
 8003788:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 800378a:	4b10      	ldr	r3, [pc, #64]	; (80037cc <MX_UART5_Init+0x4c>)
 800378c:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003790:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003792:	4b0e      	ldr	r3, [pc, #56]	; (80037cc <MX_UART5_Init+0x4c>)
 8003794:	2200      	movs	r2, #0
 8003796:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003798:	4b0c      	ldr	r3, [pc, #48]	; (80037cc <MX_UART5_Init+0x4c>)
 800379a:	2200      	movs	r2, #0
 800379c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800379e:	4b0b      	ldr	r3, [pc, #44]	; (80037cc <MX_UART5_Init+0x4c>)
 80037a0:	2200      	movs	r2, #0
 80037a2:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 80037a4:	4b09      	ldr	r3, [pc, #36]	; (80037cc <MX_UART5_Init+0x4c>)
 80037a6:	220c      	movs	r2, #12
 80037a8:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037aa:	4b08      	ldr	r3, [pc, #32]	; (80037cc <MX_UART5_Init+0x4c>)
 80037ac:	2200      	movs	r2, #0
 80037ae:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 80037b0:	4b06      	ldr	r3, [pc, #24]	; (80037cc <MX_UART5_Init+0x4c>)
 80037b2:	2200      	movs	r2, #0
 80037b4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 80037b6:	4805      	ldr	r0, [pc, #20]	; (80037cc <MX_UART5_Init+0x4c>)
 80037b8:	f002 fe9e 	bl	80064f8 <HAL_UART_Init>
 80037bc:	4603      	mov	r3, r0
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d001      	beq.n	80037c6 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 80037c2:	f000 f9b3 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 80037c6:	bf00      	nop
 80037c8:	bd80      	pop	{r7, pc}
 80037ca:	bf00      	nop
 80037cc:	200002b4 	.word	0x200002b4
 80037d0:	40005000 	.word	0x40005000

080037d4 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80037d4:	b580      	push	{r7, lr}
 80037d6:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80037d8:	4b11      	ldr	r3, [pc, #68]	; (8003820 <MX_USART6_UART_Init+0x4c>)
 80037da:	4a12      	ldr	r2, [pc, #72]	; (8003824 <MX_USART6_UART_Init+0x50>)
 80037dc:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80037de:	4b10      	ldr	r3, [pc, #64]	; (8003820 <MX_USART6_UART_Init+0x4c>)
 80037e0:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80037e4:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80037e6:	4b0e      	ldr	r3, [pc, #56]	; (8003820 <MX_USART6_UART_Init+0x4c>)
 80037e8:	2200      	movs	r2, #0
 80037ea:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80037ec:	4b0c      	ldr	r3, [pc, #48]	; (8003820 <MX_USART6_UART_Init+0x4c>)
 80037ee:	2200      	movs	r2, #0
 80037f0:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80037f2:	4b0b      	ldr	r3, [pc, #44]	; (8003820 <MX_USART6_UART_Init+0x4c>)
 80037f4:	2200      	movs	r2, #0
 80037f6:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80037f8:	4b09      	ldr	r3, [pc, #36]	; (8003820 <MX_USART6_UART_Init+0x4c>)
 80037fa:	220c      	movs	r2, #12
 80037fc:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80037fe:	4b08      	ldr	r3, [pc, #32]	; (8003820 <MX_USART6_UART_Init+0x4c>)
 8003800:	2200      	movs	r2, #0
 8003802:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003804:	4b06      	ldr	r3, [pc, #24]	; (8003820 <MX_USART6_UART_Init+0x4c>)
 8003806:	2200      	movs	r2, #0
 8003808:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800380a:	4805      	ldr	r0, [pc, #20]	; (8003820 <MX_USART6_UART_Init+0x4c>)
 800380c:	f002 fe74 	bl	80064f8 <HAL_UART_Init>
 8003810:	4603      	mov	r3, r0
 8003812:	2b00      	cmp	r3, #0
 8003814:	d001      	beq.n	800381a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003816:	f000 f989 	bl	8003b2c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800381a:	bf00      	nop
 800381c:	bd80      	pop	{r7, pc}
 800381e:	bf00      	nop
 8003820:	200002f8 	.word	0x200002f8
 8003824:	40011400 	.word	0x40011400

08003828 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003828:	b580      	push	{r7, lr}
 800382a:	b08c      	sub	sp, #48	; 0x30
 800382c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800382e:	f107 031c 	add.w	r3, r7, #28
 8003832:	2200      	movs	r2, #0
 8003834:	601a      	str	r2, [r3, #0]
 8003836:	605a      	str	r2, [r3, #4]
 8003838:	609a      	str	r2, [r3, #8]
 800383a:	60da      	str	r2, [r3, #12]
 800383c:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800383e:	2300      	movs	r3, #0
 8003840:	61bb      	str	r3, [r7, #24]
 8003842:	4bb4      	ldr	r3, [pc, #720]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	4ab3      	ldr	r2, [pc, #716]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 8003848:	f043 0310 	orr.w	r3, r3, #16
 800384c:	6313      	str	r3, [r2, #48]	; 0x30
 800384e:	4bb1      	ldr	r3, [pc, #708]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 8003850:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003852:	f003 0310 	and.w	r3, r3, #16
 8003856:	61bb      	str	r3, [r7, #24]
 8003858:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800385a:	2300      	movs	r3, #0
 800385c:	617b      	str	r3, [r7, #20]
 800385e:	4bad      	ldr	r3, [pc, #692]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 8003860:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003862:	4aac      	ldr	r2, [pc, #688]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 8003864:	f043 0304 	orr.w	r3, r3, #4
 8003868:	6313      	str	r3, [r2, #48]	; 0x30
 800386a:	4baa      	ldr	r3, [pc, #680]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 800386c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800386e:	f003 0304 	and.w	r3, r3, #4
 8003872:	617b      	str	r3, [r7, #20]
 8003874:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003876:	2300      	movs	r3, #0
 8003878:	613b      	str	r3, [r7, #16]
 800387a:	4ba6      	ldr	r3, [pc, #664]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 800387c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800387e:	4aa5      	ldr	r2, [pc, #660]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 8003880:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003884:	6313      	str	r3, [r2, #48]	; 0x30
 8003886:	4ba3      	ldr	r3, [pc, #652]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 8003888:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800388a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800388e:	613b      	str	r3, [r7, #16]
 8003890:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003892:	2300      	movs	r3, #0
 8003894:	60fb      	str	r3, [r7, #12]
 8003896:	4b9f      	ldr	r3, [pc, #636]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 8003898:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800389a:	4a9e      	ldr	r2, [pc, #632]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 800389c:	f043 0301 	orr.w	r3, r3, #1
 80038a0:	6313      	str	r3, [r2, #48]	; 0x30
 80038a2:	4b9c      	ldr	r3, [pc, #624]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 80038a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038a6:	f003 0301 	and.w	r3, r3, #1
 80038aa:	60fb      	str	r3, [r7, #12]
 80038ac:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80038ae:	2300      	movs	r3, #0
 80038b0:	60bb      	str	r3, [r7, #8]
 80038b2:	4b98      	ldr	r3, [pc, #608]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 80038b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038b6:	4a97      	ldr	r2, [pc, #604]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 80038b8:	f043 0302 	orr.w	r3, r3, #2
 80038bc:	6313      	str	r3, [r2, #48]	; 0x30
 80038be:	4b95      	ldr	r3, [pc, #596]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 80038c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038c2:	f003 0302 	and.w	r3, r3, #2
 80038c6:	60bb      	str	r3, [r7, #8]
 80038c8:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80038ca:	2300      	movs	r3, #0
 80038cc:	607b      	str	r3, [r7, #4]
 80038ce:	4b91      	ldr	r3, [pc, #580]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 80038d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d2:	4a90      	ldr	r2, [pc, #576]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 80038d4:	f043 0308 	orr.w	r3, r3, #8
 80038d8:	6313      	str	r3, [r2, #48]	; 0x30
 80038da:	4b8e      	ldr	r3, [pc, #568]	; (8003b14 <MX_GPIO_Init+0x2ec>)
 80038dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038de:	f003 0308 	and.w	r3, r3, #8
 80038e2:	607b      	str	r3, [r7, #4]
 80038e4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE4_ZIGBEE_PA_EN_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin|Speed1_not_PE13_41_Pin
 80038e6:	2200      	movs	r2, #0
 80038e8:	f24a 3113 	movw	r1, #41747	; 0xa313
 80038ec:	488a      	ldr	r0, [pc, #552]	; (8003b18 <MX_GPIO_Init+0x2f0>)
 80038ee:	f001 faa7 	bl	8004e40 <HAL_GPIO_WritePin>
                          |PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_ZIGBEE_nRST_Pin|PC8_PR_Pin|PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin, GPIO_PIN_RESET);
 80038f2:	2200      	movs	r2, #0
 80038f4:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80038f8:	4888      	ldr	r0, [pc, #544]	; (8003b1c <MX_GPIO_Init+0x2f4>)
 80038fa:	f001 faa1 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 80038fe:	2200      	movs	r2, #0
 8003900:	f649 5108 	movw	r1, #40200	; 0x9d08
 8003904:	4886      	ldr	r0, [pc, #536]	; (8003b20 <MX_GPIO_Init+0x2f8>)
 8003906:	f001 fa9b 	bl	8004e40 <HAL_GPIO_WritePin>
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin, GPIO_PIN_SET);
 800390a:	2201      	movs	r2, #1
 800390c:	2130      	movs	r1, #48	; 0x30
 800390e:	4883      	ldr	r0, [pc, #524]	; (8003b1c <MX_GPIO_Init+0x2f4>)
 8003910:	f001 fa96 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EStop_Not_PB0_17_Pin|CN1_16_PulseCCLR_Pin|PB13_Output_JP7_Pin|PB14_POS_CMD_OPC_EN_Pin
 8003914:	2200      	movs	r2, #0
 8003916:	f246 0165 	movw	r1, #24677	; 0x6065
 800391a:	4882      	ldr	r0, [pc, #520]	; (8003b24 <MX_GPIO_Init+0x2fc>)
 800391c:	f001 fa90 	bl	8004e40 <HAL_GPIO_WritePin>
                          |PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ArlarmRST_PB1_42_Pin|PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);
 8003920:	2201      	movs	r2, #1
 8003922:	f248 0102 	movw	r1, #32770	; 0x8002
 8003926:	487f      	ldr	r0, [pc, #508]	; (8003b24 <MX_GPIO_Init+0x2fc>)
 8003928:	f001 fa8a 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Speed2_Not_PE7_15_Pin|Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin
 800392c:	2201      	movs	r2, #1
 800392e:	f44f 41b9 	mov.w	r1, #23680	; 0x5c80
 8003932:	4879      	ldr	r0, [pc, #484]	; (8003b18 <MX_GPIO_Init+0x2f0>)
 8003934:	f001 fa84 	bl	8004e40 <HAL_GPIO_WritePin>
                          |CWLIM_Not_PE14_13_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD10_ESP32_EN_GPIO_Port, PD10_ESP32_EN_Pin, GPIO_PIN_SET);
 8003938:	2201      	movs	r2, #1
 800393a:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800393e:	487a      	ldr	r0, [pc, #488]	; (8003b28 <MX_GPIO_Init+0x300>)
 8003940:	f001 fa7e 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin, GPIO_PIN_RESET);
 8003944:	2200      	movs	r2, #0
 8003946:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 800394a:	4877      	ldr	r0, [pc, #476]	; (8003b28 <MX_GPIO_Init+0x300>)
 800394c:	f001 fa78 	bl	8004e40 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN1_22_RDY_Pin CN1_21_SPDOUT_TRQOUT_Pin PE5_BLE_GPIO_Pin CN1_48_BRAKE_Pin */
  GPIO_InitStruct.Pin = CN1_22_RDY_Pin|CN1_21_SPDOUT_TRQOUT_Pin|PE5_BLE_GPIO_Pin|CN1_48_BRAKE_Pin;
 8003950:	236c      	movs	r3, #108	; 0x6c
 8003952:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003954:	2300      	movs	r3, #0
 8003956:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003958:	2300      	movs	r3, #0
 800395a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800395c:	f107 031c 	add.w	r3, r7, #28
 8003960:	4619      	mov	r1, r3
 8003962:	486d      	ldr	r0, [pc, #436]	; (8003b18 <MX_GPIO_Init+0x2f0>)
 8003964:	f001 f8b8 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4_ZIGBEE_PA_EN_Pin Speed2_Not_PE7_15_Pin Type_Not_PE8_40_Pin PE9_TIM1_CH1_PFIN_Pin
                           Dir_Not_PE10_14_Pin SPDLIM_Not_PE11_38_Pin CCWLIM_Not_PE12_39_Pin Speed1_not_PE13_41_Pin
                           CWLIM_Not_PE14_13_Pin PE15_RELAY1_Pin PE0_485_MCU_DRV_DIR_Pin PE1_ZIGBEE_EN_Pin */
  GPIO_InitStruct.Pin = PE4_ZIGBEE_PA_EN_Pin|Speed2_Not_PE7_15_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin
 8003968:	f64f 7393 	movw	r3, #65427	; 0xff93
 800396c:	61fb      	str	r3, [r7, #28]
                          |Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin|Speed1_not_PE13_41_Pin
                          |CWLIM_Not_PE14_13_Pin|PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800396e:	2301      	movs	r3, #1
 8003970:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003972:	2300      	movs	r3, #0
 8003974:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003976:	2300      	movs	r3, #0
 8003978:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 800397a:	f107 031c 	add.w	r3, r7, #28
 800397e:	4619      	mov	r1, r3
 8003980:	4865      	ldr	r0, [pc, #404]	; (8003b18 <MX_GPIO_Init+0x2f0>)
 8003982:	f001 f8a9 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_USER_BT_MID_Pin CN1_46_ALARM_Pin CN1_47_INSPD_INPOS_Pin CN1_45_NCWOUT_NTQOUT_Pin */
  GPIO_InitStruct.Pin = PC13_USER_BT_MID_Pin|CN1_46_ALARM_Pin|CN1_47_INSPD_INPOS_Pin|CN1_45_NCWOUT_NTQOUT_Pin;
 8003986:	f242 0307 	movw	r3, #8199	; 0x2007
 800398a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800398c:	2300      	movs	r3, #0
 800398e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003990:	2300      	movs	r3, #0
 8003992:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003994:	f107 031c 	add.w	r3, r7, #28
 8003998:	4619      	mov	r1, r3
 800399a:	4860      	ldr	r0, [pc, #384]	; (8003b1c <MX_GPIO_Init+0x2f4>)
 800399c:	f001 f89c 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_ZIGBEE_nRST_Pin SerVoReset_PC4_18_Pin Stop_PC5_43_Pin PC8_PR_Pin
                           PC9_ZIGBEE_HGM_EN_Pin PC10_SPI3_SCK_SPARE_Pin */
  GPIO_InitStruct.Pin = PC3_ZIGBEE_nRST_Pin|SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin|PC8_PR_Pin
 80039a0:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 80039a4:	61fb      	str	r3, [r7, #28]
                          |PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039a6:	2301      	movs	r3, #1
 80039a8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039aa:	2300      	movs	r3, #0
 80039ac:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80039ae:	2300      	movs	r3, #0
 80039b0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80039b2:	f107 031c 	add.w	r3, r7, #28
 80039b6:	4619      	mov	r1, r3
 80039b8:	4858      	ldr	r0, [pc, #352]	; (8003b1c <MX_GPIO_Init+0x2f4>)
 80039ba:	f001 f88d 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_UART4_TX_ESP32_RX_Pin */
  GPIO_InitStruct.Pin = PA0_UART4_TX_ESP32_RX_Pin;
 80039be:	2301      	movs	r3, #1
 80039c0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80039c2:	2302      	movs	r3, #2
 80039c4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039c6:	2300      	movs	r3, #0
 80039c8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80039ca:	2303      	movs	r3, #3
 80039cc:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80039ce:	2308      	movs	r3, #8
 80039d0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PA0_UART4_TX_ESP32_RX_GPIO_Port, &GPIO_InitStruct);
 80039d2:	f107 031c 	add.w	r3, r7, #28
 80039d6:	4619      	mov	r1, r3
 80039d8:	4851      	ldr	r0, [pc, #324]	; (8003b20 <MX_GPIO_Init+0x2f8>)
 80039da:	f001 f87d 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_USER_BT_UP_Pin CN1_20_PCWOUT_PTQOUT_Pin CN1_23_TYPEOUT_Pin PA9_LINE_RECV_SELFTEST_Pin */
  GPIO_InitStruct.Pin = PA2_USER_BT_UP_Pin|CN1_20_PCWOUT_PTQOUT_Pin|CN1_23_TYPEOUT_Pin|PA9_LINE_RECV_SELFTEST_Pin;
 80039de:	f44f 7325 	mov.w	r3, #660	; 0x294
 80039e2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80039e4:	2300      	movs	r3, #0
 80039e6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80039e8:	2300      	movs	r3, #0
 80039ea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80039ec:	f107 031c 	add.w	r3, r7, #28
 80039f0:	4619      	mov	r1, r3
 80039f2:	484b      	ldr	r0, [pc, #300]	; (8003b20 <MX_GPIO_Init+0x2f8>)
 80039f4:	f001 f870 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_LCD_RST_Pin PA8_LINE_DRV_SELFTEST2_Pin PA10_LINE_DRV_SELFTEST1_Pin PA11_ENC_RECEIV_EN_Pin
                           PA12_LINE_DRV_EN_Pin PA15_SPI3_NSS_SPARE_Pin */
  GPIO_InitStruct.Pin = PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 80039f8:	f649 5308 	movw	r3, #40200	; 0x9d08
 80039fc:	61fb      	str	r3, [r7, #28]
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80039fe:	2301      	movs	r3, #1
 8003a00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a02:	2300      	movs	r3, #0
 8003a04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a06:	2300      	movs	r3, #0
 8003a08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003a0a:	f107 031c 	add.w	r3, r7, #28
 8003a0e:	4619      	mov	r1, r3
 8003a10:	4843      	ldr	r0, [pc, #268]	; (8003b20 <MX_GPIO_Init+0x2f8>)
 8003a12:	f001 f861 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EStop_Not_PB0_17_Pin ArlarmRST_PB1_42_Pin CN1_16_PulseCCLR_Pin PB13_Output_JP7_Pin
                           PB14_POS_CMD_OPC_EN_Pin PB15_485_MCU_PC_DIR_Pin PB5_SPI3_MOSI_SPARE_Pin PB6_RELAY2_Pin */
  GPIO_InitStruct.Pin = EStop_Not_PB0_17_Pin|ArlarmRST_PB1_42_Pin|CN1_16_PulseCCLR_Pin|PB13_Output_JP7_Pin
 8003a16:	f24e 0367 	movw	r3, #57447	; 0xe067
 8003a1a:	61fb      	str	r3, [r7, #28]
                          |PB14_POS_CMD_OPC_EN_Pin|PB15_485_MCU_PC_DIR_Pin|PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003a1c:	2301      	movs	r3, #1
 8003a1e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a20:	2300      	movs	r3, #0
 8003a22:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003a24:	2300      	movs	r3, #0
 8003a26:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a28:	f107 031c 	add.w	r3, r7, #28
 8003a2c:	4619      	mov	r1, r3
 8003a2e:	483d      	ldr	r0, [pc, #244]	; (8003b24 <MX_GPIO_Init+0x2fc>)
 8003a30:	f001 f852 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10_I2C2_SCL_LCD_IOEXP_Pin PB11_I2C2_SDA_LCD_IOEXP_Pin */
  GPIO_InitStruct.Pin = PB10_I2C2_SCL_LCD_IOEXP_Pin|PB11_I2C2_SDA_LCD_IOEXP_Pin;
 8003a34:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003a38:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003a3a:	2312      	movs	r3, #18
 8003a3c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003a3e:	2301      	movs	r3, #1
 8003a40:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a42:	2303      	movs	r3, #3
 8003a44:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003a46:	2304      	movs	r3, #4
 8003a48:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a4a:	f107 031c 	add.w	r3, r7, #28
 8003a4e:	4619      	mov	r1, r3
 8003a50:	4834      	ldr	r0, [pc, #208]	; (8003b24 <MX_GPIO_Init+0x2fc>)
 8003a52:	f001 f841 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_RELAY3_Pin CN1_19_ZSPD_Pin PB4_SPI3_MISO_SPARE_Pin Input_JP7_Pin */
  GPIO_InitStruct.Pin = PB12_RELAY3_Pin|CN1_19_ZSPD_Pin|PB4_SPI3_MISO_SPARE_Pin|Input_JP7_Pin;
 8003a56:	f241 2318 	movw	r3, #4632	; 0x1218
 8003a5a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003a5c:	2300      	movs	r3, #0
 8003a5e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a60:	2300      	movs	r3, #0
 8003a62:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003a64:	f107 031c 	add.w	r3, r7, #28
 8003a68:	4619      	mov	r1, r3
 8003a6a:	482e      	ldr	r0, [pc, #184]	; (8003b24 <MX_GPIO_Init+0x2fc>)
 8003a6c:	f001 f834 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003a70:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003a74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a76:	2302      	movs	r3, #2
 8003a78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a7a:	2300      	movs	r3, #0
 8003a7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a7e:	2303      	movs	r3, #3
 8003a80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003a82:	2307      	movs	r3, #7
 8003a84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003a86:	f107 031c 	add.w	r3, r7, #28
 8003a8a:	4619      	mov	r1, r3
 8003a8c:	4826      	ldr	r0, [pc, #152]	; (8003b28 <MX_GPIO_Init+0x300>)
 8003a8e:	f001 f823 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10_ESP32_EN_Pin */
  GPIO_InitStruct.Pin = PD10_ESP32_EN_Pin;
 8003a92:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003a96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003a98:	2311      	movs	r3, #17
 8003a9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a9c:	2300      	movs	r3, #0
 8003a9e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003aa0:	2300      	movs	r3, #0
 8003aa2:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD10_ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 8003aa4:	f107 031c 	add.w	r3, r7, #28
 8003aa8:	4619      	mov	r1, r3
 8003aaa:	481f      	ldr	r0, [pc, #124]	; (8003b28 <MX_GPIO_Init+0x300>)
 8003aac:	f001 f814 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_ESP32_BOOT_SEL_Pin PD13_MON1_2_EN_Pin PD15_SPDIN_TRQIN_EN_Pin */
  GPIO_InitStruct.Pin = PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin;
 8003ab0:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8003ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003aba:	2300      	movs	r3, #0
 8003abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003abe:	2300      	movs	r3, #0
 8003ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003ac2:	f107 031c 	add.w	r3, r7, #28
 8003ac6:	4619      	mov	r1, r3
 8003ac8:	4817      	ldr	r0, [pc, #92]	; (8003b28 <MX_GPIO_Init+0x300>)
 8003aca:	f001 f805 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12_Input_J6_Pin PD14_Input_J6_Pin Input0_J6_DAC_ADC_Pin Input1_J6_DAC_ADC_Pin
                           PD7_A_CODE2_Pin */
  GPIO_InitStruct.Pin = PD12_Input_J6_Pin|PD14_Input_J6_Pin|Input0_J6_DAC_ADC_Pin|Input1_J6_DAC_ADC_Pin
 8003ace:	f245 0383 	movw	r3, #20611	; 0x5083
 8003ad2:	61fb      	str	r3, [r7, #28]
                          |PD7_A_CODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ad4:	2300      	movs	r3, #0
 8003ad6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ad8:	2300      	movs	r3, #0
 8003ada:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003adc:	f107 031c 	add.w	r3, r7, #28
 8003ae0:	4619      	mov	r1, r3
 8003ae2:	4811      	ldr	r0, [pc, #68]	; (8003b28 <MX_GPIO_Init+0x300>)
 8003ae4:	f000 fff8 	bl	8004ad8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_I2C1_SDA_DAC_ADC_Pin PB8_I2C1_SCL_DAC_ADC_Pin */
  GPIO_InitStruct.Pin = PB7_I2C1_SDA_DAC_ADC_Pin|PB8_I2C1_SCL_DAC_ADC_Pin;
 8003ae8:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003aec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003aee:	2312      	movs	r3, #18
 8003af0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003af2:	2301      	movs	r3, #1
 8003af4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003af6:	2303      	movs	r3, #3
 8003af8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003afa:	2304      	movs	r3, #4
 8003afc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003afe:	f107 031c 	add.w	r3, r7, #28
 8003b02:	4619      	mov	r1, r3
 8003b04:	4807      	ldr	r0, [pc, #28]	; (8003b24 <MX_GPIO_Init+0x2fc>)
 8003b06:	f000 ffe7 	bl	8004ad8 <HAL_GPIO_Init>

}
 8003b0a:	bf00      	nop
 8003b0c:	3730      	adds	r7, #48	; 0x30
 8003b0e:	46bd      	mov	sp, r7
 8003b10:	bd80      	pop	{r7, pc}
 8003b12:	bf00      	nop
 8003b14:	40023800 	.word	0x40023800
 8003b18:	40021000 	.word	0x40021000
 8003b1c:	40020800 	.word	0x40020800
 8003b20:	40020000 	.word	0x40020000
 8003b24:	40020400 	.word	0x40020400
 8003b28:	40020c00 	.word	0x40020c00

08003b2c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003b2c:	b480      	push	{r7}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003b30:	e7fe      	b.n	8003b30 <Error_Handler+0x4>
	...

08003b34 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	607b      	str	r3, [r7, #4]
 8003b3e:	4b10      	ldr	r3, [pc, #64]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b40:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b42:	4a0f      	ldr	r2, [pc, #60]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b44:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003b48:	6453      	str	r3, [r2, #68]	; 0x44
 8003b4a:	4b0d      	ldr	r3, [pc, #52]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003b4e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003b52:	607b      	str	r3, [r7, #4]
 8003b54:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003b56:	2300      	movs	r3, #0
 8003b58:	603b      	str	r3, [r7, #0]
 8003b5a:	4b09      	ldr	r3, [pc, #36]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b5e:	4a08      	ldr	r2, [pc, #32]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b60:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003b64:	6413      	str	r3, [r2, #64]	; 0x40
 8003b66:	4b06      	ldr	r3, [pc, #24]	; (8003b80 <HAL_MspInit+0x4c>)
 8003b68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003b6a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003b6e:	603b      	str	r3, [r7, #0]
 8003b70:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003b72:	bf00      	nop
 8003b74:	370c      	adds	r7, #12
 8003b76:	46bd      	mov	sp, r7
 8003b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b7c:	4770      	bx	lr
 8003b7e:	bf00      	nop
 8003b80:	40023800 	.word	0x40023800

08003b84 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003b84:	b580      	push	{r7, lr}
 8003b86:	b08c      	sub	sp, #48	; 0x30
 8003b88:	af00      	add	r7, sp, #0
 8003b8a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b8c:	f107 031c 	add.w	r3, r7, #28
 8003b90:	2200      	movs	r2, #0
 8003b92:	601a      	str	r2, [r3, #0]
 8003b94:	605a      	str	r2, [r3, #4]
 8003b96:	609a      	str	r2, [r3, #8]
 8003b98:	60da      	str	r2, [r3, #12]
 8003b9a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003b9c:	687b      	ldr	r3, [r7, #4]
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ba4:	d12c      	bne.n	8003c00 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003ba6:	2300      	movs	r3, #0
 8003ba8:	61bb      	str	r3, [r7, #24]
 8003baa:	4b30      	ldr	r3, [pc, #192]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003bac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bae:	4a2f      	ldr	r2, [pc, #188]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003bb0:	f043 0301 	orr.w	r3, r3, #1
 8003bb4:	6413      	str	r3, [r2, #64]	; 0x40
 8003bb6:	4b2d      	ldr	r3, [pc, #180]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003bb8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003bba:	f003 0301 	and.w	r3, r3, #1
 8003bbe:	61bb      	str	r3, [r7, #24]
 8003bc0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bc2:	2300      	movs	r3, #0
 8003bc4:	617b      	str	r3, [r7, #20]
 8003bc6:	4b29      	ldr	r3, [pc, #164]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003bc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bca:	4a28      	ldr	r2, [pc, #160]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003bcc:	f043 0301 	orr.w	r3, r3, #1
 8003bd0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bd2:	4b26      	ldr	r3, [pc, #152]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	f003 0301 	and.w	r3, r3, #1
 8003bda:	617b      	str	r3, [r7, #20]
 8003bdc:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PA1_TIM2_CH2_ENC_PBO_Pin|PA5_TIM2_CH1_ENC_PAO_Pin;
 8003bde:	2322      	movs	r3, #34	; 0x22
 8003be0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003be2:	2302      	movs	r3, #2
 8003be4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003be6:	2300      	movs	r3, #0
 8003be8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003bea:	2300      	movs	r3, #0
 8003bec:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003bee:	2301      	movs	r3, #1
 8003bf0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003bf2:	f107 031c 	add.w	r3, r7, #28
 8003bf6:	4619      	mov	r1, r3
 8003bf8:	481d      	ldr	r0, [pc, #116]	; (8003c70 <HAL_TIM_Base_MspInit+0xec>)
 8003bfa:	f000 ff6d 	bl	8004ad8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003bfe:	e030      	b.n	8003c62 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	4a1b      	ldr	r2, [pc, #108]	; (8003c74 <HAL_TIM_Base_MspInit+0xf0>)
 8003c06:	4293      	cmp	r3, r2
 8003c08:	d12b      	bne.n	8003c62 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003c0a:	2300      	movs	r3, #0
 8003c0c:	613b      	str	r3, [r7, #16]
 8003c0e:	4b17      	ldr	r3, [pc, #92]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003c10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c12:	4a16      	ldr	r2, [pc, #88]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003c14:	f043 0302 	orr.w	r3, r3, #2
 8003c18:	6413      	str	r3, [r2, #64]	; 0x40
 8003c1a:	4b14      	ldr	r3, [pc, #80]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003c1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003c1e:	f003 0302 	and.w	r3, r3, #2
 8003c22:	613b      	str	r3, [r7, #16]
 8003c24:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003c26:	2300      	movs	r3, #0
 8003c28:	60fb      	str	r3, [r7, #12]
 8003c2a:	4b10      	ldr	r3, [pc, #64]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003c2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2e:	4a0f      	ldr	r2, [pc, #60]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003c30:	f043 0301 	orr.w	r3, r3, #1
 8003c34:	6313      	str	r3, [r2, #48]	; 0x30
 8003c36:	4b0d      	ldr	r3, [pc, #52]	; (8003c6c <HAL_TIM_Base_MspInit+0xe8>)
 8003c38:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3a:	f003 0301 	and.w	r3, r3, #1
 8003c3e:	60fb      	str	r3, [r7, #12]
 8003c40:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PA6_TIM3_CH1_ENC_PZO_Pin;
 8003c42:	2340      	movs	r3, #64	; 0x40
 8003c44:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003c46:	2302      	movs	r3, #2
 8003c48:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003c4a:	2300      	movs	r3, #0
 8003c4c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003c4e:	2300      	movs	r3, #0
 8003c50:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003c52:	2302      	movs	r3, #2
 8003c54:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PA6_TIM3_CH1_ENC_PZO_GPIO_Port, &GPIO_InitStruct);
 8003c56:	f107 031c 	add.w	r3, r7, #28
 8003c5a:	4619      	mov	r1, r3
 8003c5c:	4804      	ldr	r0, [pc, #16]	; (8003c70 <HAL_TIM_Base_MspInit+0xec>)
 8003c5e:	f000 ff3b 	bl	8004ad8 <HAL_GPIO_Init>
}
 8003c62:	bf00      	nop
 8003c64:	3730      	adds	r7, #48	; 0x30
 8003c66:	46bd      	mov	sp, r7
 8003c68:	bd80      	pop	{r7, pc}
 8003c6a:	bf00      	nop
 8003c6c:	40023800 	.word	0x40023800
 8003c70:	40020000 	.word	0x40020000
 8003c74:	40000400 	.word	0x40000400

08003c78 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b08c      	sub	sp, #48	; 0x30
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003c80:	f107 031c 	add.w	r3, r7, #28
 8003c84:	2200      	movs	r2, #0
 8003c86:	601a      	str	r2, [r3, #0]
 8003c88:	605a      	str	r2, [r3, #4]
 8003c8a:	609a      	str	r2, [r3, #8]
 8003c8c:	60da      	str	r2, [r3, #12]
 8003c8e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003c90:	687b      	ldr	r3, [r7, #4]
 8003c92:	681b      	ldr	r3, [r3, #0]
 8003c94:	4a45      	ldr	r2, [pc, #276]	; (8003dac <HAL_UART_MspInit+0x134>)
 8003c96:	4293      	cmp	r3, r2
 8003c98:	d153      	bne.n	8003d42 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003c9a:	2300      	movs	r3, #0
 8003c9c:	61bb      	str	r3, [r7, #24]
 8003c9e:	4b44      	ldr	r3, [pc, #272]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003ca0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ca2:	4a43      	ldr	r2, [pc, #268]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003ca4:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8003ca8:	6413      	str	r3, [r2, #64]	; 0x40
 8003caa:	4b41      	ldr	r3, [pc, #260]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003cac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003cae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003cb2:	61bb      	str	r3, [r7, #24]
 8003cb4:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	617b      	str	r3, [r7, #20]
 8003cba:	4b3d      	ldr	r3, [pc, #244]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003cbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cbe:	4a3c      	ldr	r2, [pc, #240]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003cc0:	f043 0304 	orr.w	r3, r3, #4
 8003cc4:	6313      	str	r3, [r2, #48]	; 0x30
 8003cc6:	4b3a      	ldr	r3, [pc, #232]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003cc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cca:	f003 0304 	and.w	r3, r3, #4
 8003cce:	617b      	str	r3, [r7, #20]
 8003cd0:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8003cd2:	2300      	movs	r3, #0
 8003cd4:	613b      	str	r3, [r7, #16]
 8003cd6:	4b36      	ldr	r3, [pc, #216]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003cd8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cda:	4a35      	ldr	r2, [pc, #212]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003cdc:	f043 0308 	orr.w	r3, r3, #8
 8003ce0:	6313      	str	r3, [r2, #48]	; 0x30
 8003ce2:	4b33      	ldr	r3, [pc, #204]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003ce4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ce6:	f003 0308 	and.w	r3, r3, #8
 8003cea:	613b      	str	r3, [r7, #16]
 8003cec:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = PC12_UART5_TX_485_MCU_DRV_Pin;
 8003cee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003cf2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003cf4:	2302      	movs	r3, #2
 8003cf6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cf8:	2300      	movs	r3, #0
 8003cfa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003cfc:	2303      	movs	r3, #3
 8003cfe:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d00:	2308      	movs	r3, #8
 8003d02:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PC12_UART5_TX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8003d04:	f107 031c 	add.w	r3, r7, #28
 8003d08:	4619      	mov	r1, r3
 8003d0a:	482a      	ldr	r0, [pc, #168]	; (8003db4 <HAL_UART_MspInit+0x13c>)
 8003d0c:	f000 fee4 	bl	8004ad8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD2_UART5_RX_485_MCU_DRV_Pin;
 8003d10:	2304      	movs	r3, #4
 8003d12:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d14:	2302      	movs	r3, #2
 8003d16:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d18:	2300      	movs	r3, #0
 8003d1a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d1c:	2303      	movs	r3, #3
 8003d1e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8003d20:	2308      	movs	r3, #8
 8003d22:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD2_UART5_RX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8003d24:	f107 031c 	add.w	r3, r7, #28
 8003d28:	4619      	mov	r1, r3
 8003d2a:	4823      	ldr	r0, [pc, #140]	; (8003db8 <HAL_UART_MspInit+0x140>)
 8003d2c:	f000 fed4 	bl	8004ad8 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8003d30:	2200      	movs	r2, #0
 8003d32:	2100      	movs	r1, #0
 8003d34:	2035      	movs	r0, #53	; 0x35
 8003d36:	f000 fb1e 	bl	8004376 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8003d3a:	2035      	movs	r0, #53	; 0x35
 8003d3c:	f000 fb37 	bl	80043ae <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003d40:	e030      	b.n	8003da4 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 8003d42:	687b      	ldr	r3, [r7, #4]
 8003d44:	681b      	ldr	r3, [r3, #0]
 8003d46:	4a1d      	ldr	r2, [pc, #116]	; (8003dbc <HAL_UART_MspInit+0x144>)
 8003d48:	4293      	cmp	r3, r2
 8003d4a:	d12b      	bne.n	8003da4 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003d4c:	2300      	movs	r3, #0
 8003d4e:	60fb      	str	r3, [r7, #12]
 8003d50:	4b17      	ldr	r3, [pc, #92]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003d52:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d54:	4a16      	ldr	r2, [pc, #88]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003d56:	f043 0320 	orr.w	r3, r3, #32
 8003d5a:	6453      	str	r3, [r2, #68]	; 0x44
 8003d5c:	4b14      	ldr	r3, [pc, #80]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003d5e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d60:	f003 0320 	and.w	r3, r3, #32
 8003d64:	60fb      	str	r3, [r7, #12]
 8003d66:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003d68:	2300      	movs	r3, #0
 8003d6a:	60bb      	str	r3, [r7, #8]
 8003d6c:	4b10      	ldr	r3, [pc, #64]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003d6e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d70:	4a0f      	ldr	r2, [pc, #60]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003d72:	f043 0304 	orr.w	r3, r3, #4
 8003d76:	6313      	str	r3, [r2, #48]	; 0x30
 8003d78:	4b0d      	ldr	r3, [pc, #52]	; (8003db0 <HAL_UART_MspInit+0x138>)
 8003d7a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003d7c:	f003 0304 	and.w	r3, r3, #4
 8003d80:	60bb      	str	r3, [r7, #8]
 8003d82:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003d84:	23c0      	movs	r3, #192	; 0xc0
 8003d86:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d88:	2302      	movs	r3, #2
 8003d8a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d8c:	2300      	movs	r3, #0
 8003d8e:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d90:	2303      	movs	r3, #3
 8003d92:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003d94:	2308      	movs	r3, #8
 8003d96:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d98:	f107 031c 	add.w	r3, r7, #28
 8003d9c:	4619      	mov	r1, r3
 8003d9e:	4805      	ldr	r0, [pc, #20]	; (8003db4 <HAL_UART_MspInit+0x13c>)
 8003da0:	f000 fe9a 	bl	8004ad8 <HAL_GPIO_Init>
}
 8003da4:	bf00      	nop
 8003da6:	3730      	adds	r7, #48	; 0x30
 8003da8:	46bd      	mov	sp, r7
 8003daa:	bd80      	pop	{r7, pc}
 8003dac:	40005000 	.word	0x40005000
 8003db0:	40023800 	.word	0x40023800
 8003db4:	40020800 	.word	0x40020800
 8003db8:	40020c00 	.word	0x40020c00
 8003dbc:	40011400 	.word	0x40011400

08003dc0 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003dc0:	b480      	push	{r7}
 8003dc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003dc4:	e7fe      	b.n	8003dc4 <NMI_Handler+0x4>

08003dc6 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003dc6:	b480      	push	{r7}
 8003dc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003dca:	e7fe      	b.n	8003dca <HardFault_Handler+0x4>

08003dcc <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003dcc:	b480      	push	{r7}
 8003dce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003dd0:	e7fe      	b.n	8003dd0 <MemManage_Handler+0x4>

08003dd2 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003dd2:	b480      	push	{r7}
 8003dd4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003dd6:	e7fe      	b.n	8003dd6 <BusFault_Handler+0x4>

08003dd8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003dd8:	b480      	push	{r7}
 8003dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003ddc:	e7fe      	b.n	8003ddc <UsageFault_Handler+0x4>

08003dde <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003dde:	b480      	push	{r7}
 8003de0:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003de2:	bf00      	nop
 8003de4:	46bd      	mov	sp, r7
 8003de6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dea:	4770      	bx	lr

08003dec <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003dec:	b480      	push	{r7}
 8003dee:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003df0:	bf00      	nop
 8003df2:	46bd      	mov	sp, r7
 8003df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003df8:	4770      	bx	lr

08003dfa <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003dfa:	b480      	push	{r7}
 8003dfc:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003dfe:	bf00      	nop
 8003e00:	46bd      	mov	sp, r7
 8003e02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e06:	4770      	bx	lr

08003e08 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003e08:	b580      	push	{r7, lr}
 8003e0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003e0c:	f000 f97e 	bl	800410c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003e10:	bf00      	nop
 8003e12:	bd80      	pop	{r7, pc}

08003e14 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003e14:	b580      	push	{r7, lr}
 8003e16:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003e18:	4802      	ldr	r0, [pc, #8]	; (8003e24 <TIM2_IRQHandler+0x10>)
 8003e1a:	f001 fde5 	bl	80059e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003e1e:	bf00      	nop
 8003e20:	bd80      	pop	{r7, pc}
 8003e22:	bf00      	nop
 8003e24:	20000224 	.word	0x20000224

08003e28 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003e28:	b580      	push	{r7, lr}
 8003e2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003e2c:	4802      	ldr	r0, [pc, #8]	; (8003e38 <TIM3_IRQHandler+0x10>)
 8003e2e:	f001 fddb 	bl	80059e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003e32:	bf00      	nop
 8003e34:	bd80      	pop	{r7, pc}
 8003e36:	bf00      	nop
 8003e38:	2000026c 	.word	0x2000026c

08003e3c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8003e3c:	b580      	push	{r7, lr}
 8003e3e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8003e40:	4802      	ldr	r0, [pc, #8]	; (8003e4c <UART5_IRQHandler+0x10>)
 8003e42:	f002 fc69 	bl	8006718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8003e46:	bf00      	nop
 8003e48:	bd80      	pop	{r7, pc}
 8003e4a:	bf00      	nop
 8003e4c:	200002b4 	.word	0x200002b4

08003e50 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8003e50:	b580      	push	{r7, lr}
 8003e52:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8003e54:	4802      	ldr	r0, [pc, #8]	; (8003e60 <USART6_IRQHandler+0x10>)
 8003e56:	f002 fc5f 	bl	8006718 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8003e5a:	bf00      	nop
 8003e5c:	bd80      	pop	{r7, pc}
 8003e5e:	bf00      	nop
 8003e60:	200002f8 	.word	0x200002f8

08003e64 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8003e64:	b480      	push	{r7}
 8003e66:	af00      	add	r7, sp, #0
	return 1;
 8003e68:	2301      	movs	r3, #1
}
 8003e6a:	4618      	mov	r0, r3
 8003e6c:	46bd      	mov	sp, r7
 8003e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e72:	4770      	bx	lr

08003e74 <_kill>:

int _kill(int pid, int sig)
{
 8003e74:	b580      	push	{r7, lr}
 8003e76:	b082      	sub	sp, #8
 8003e78:	af00      	add	r7, sp, #0
 8003e7a:	6078      	str	r0, [r7, #4]
 8003e7c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8003e7e:	f003 fbb7 	bl	80075f0 <__errno>
 8003e82:	4603      	mov	r3, r0
 8003e84:	2216      	movs	r2, #22
 8003e86:	601a      	str	r2, [r3, #0]
	return -1;
 8003e88:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003e8c:	4618      	mov	r0, r3
 8003e8e:	3708      	adds	r7, #8
 8003e90:	46bd      	mov	sp, r7
 8003e92:	bd80      	pop	{r7, pc}

08003e94 <_exit>:

void _exit (int status)
{
 8003e94:	b580      	push	{r7, lr}
 8003e96:	b082      	sub	sp, #8
 8003e98:	af00      	add	r7, sp, #0
 8003e9a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8003e9c:	f04f 31ff 	mov.w	r1, #4294967295
 8003ea0:	6878      	ldr	r0, [r7, #4]
 8003ea2:	f7ff ffe7 	bl	8003e74 <_kill>
	while (1) {}		/* Make sure we hang here */
 8003ea6:	e7fe      	b.n	8003ea6 <_exit+0x12>

08003ea8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8003ea8:	b580      	push	{r7, lr}
 8003eaa:	b086      	sub	sp, #24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eb4:	2300      	movs	r3, #0
 8003eb6:	617b      	str	r3, [r7, #20]
 8003eb8:	e00a      	b.n	8003ed0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8003eba:	f3af 8000 	nop.w
 8003ebe:	4601      	mov	r1, r0
 8003ec0:	68bb      	ldr	r3, [r7, #8]
 8003ec2:	1c5a      	adds	r2, r3, #1
 8003ec4:	60ba      	str	r2, [r7, #8]
 8003ec6:	b2ca      	uxtb	r2, r1
 8003ec8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eca:	697b      	ldr	r3, [r7, #20]
 8003ecc:	3301      	adds	r3, #1
 8003ece:	617b      	str	r3, [r7, #20]
 8003ed0:	697a      	ldr	r2, [r7, #20]
 8003ed2:	687b      	ldr	r3, [r7, #4]
 8003ed4:	429a      	cmp	r2, r3
 8003ed6:	dbf0      	blt.n	8003eba <_read+0x12>
	}

return len;
 8003ed8:	687b      	ldr	r3, [r7, #4]
}
 8003eda:	4618      	mov	r0, r3
 8003edc:	3718      	adds	r7, #24
 8003ede:	46bd      	mov	sp, r7
 8003ee0:	bd80      	pop	{r7, pc}

08003ee2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8003ee2:	b580      	push	{r7, lr}
 8003ee4:	b086      	sub	sp, #24
 8003ee6:	af00      	add	r7, sp, #0
 8003ee8:	60f8      	str	r0, [r7, #12]
 8003eea:	60b9      	str	r1, [r7, #8]
 8003eec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003eee:	2300      	movs	r3, #0
 8003ef0:	617b      	str	r3, [r7, #20]
 8003ef2:	e009      	b.n	8003f08 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8003ef4:	68bb      	ldr	r3, [r7, #8]
 8003ef6:	1c5a      	adds	r2, r3, #1
 8003ef8:	60ba      	str	r2, [r7, #8]
 8003efa:	781b      	ldrb	r3, [r3, #0]
 8003efc:	4618      	mov	r0, r3
 8003efe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8003f02:	697b      	ldr	r3, [r7, #20]
 8003f04:	3301      	adds	r3, #1
 8003f06:	617b      	str	r3, [r7, #20]
 8003f08:	697a      	ldr	r2, [r7, #20]
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	429a      	cmp	r2, r3
 8003f0e:	dbf1      	blt.n	8003ef4 <_write+0x12>
	}
	return len;
 8003f10:	687b      	ldr	r3, [r7, #4]
}
 8003f12:	4618      	mov	r0, r3
 8003f14:	3718      	adds	r7, #24
 8003f16:	46bd      	mov	sp, r7
 8003f18:	bd80      	pop	{r7, pc}

08003f1a <_close>:

int _close(int file)
{
 8003f1a:	b480      	push	{r7}
 8003f1c:	b083      	sub	sp, #12
 8003f1e:	af00      	add	r7, sp, #0
 8003f20:	6078      	str	r0, [r7, #4]
	return -1;
 8003f22:	f04f 33ff 	mov.w	r3, #4294967295
}
 8003f26:	4618      	mov	r0, r3
 8003f28:	370c      	adds	r7, #12
 8003f2a:	46bd      	mov	sp, r7
 8003f2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f30:	4770      	bx	lr

08003f32 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8003f32:	b480      	push	{r7}
 8003f34:	b083      	sub	sp, #12
 8003f36:	af00      	add	r7, sp, #0
 8003f38:	6078      	str	r0, [r7, #4]
 8003f3a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8003f3c:	683b      	ldr	r3, [r7, #0]
 8003f3e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8003f42:	605a      	str	r2, [r3, #4]
	return 0;
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	370c      	adds	r7, #12
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f50:	4770      	bx	lr

08003f52 <_isatty>:

int _isatty(int file)
{
 8003f52:	b480      	push	{r7}
 8003f54:	b083      	sub	sp, #12
 8003f56:	af00      	add	r7, sp, #0
 8003f58:	6078      	str	r0, [r7, #4]
	return 1;
 8003f5a:	2301      	movs	r3, #1
}
 8003f5c:	4618      	mov	r0, r3
 8003f5e:	370c      	adds	r7, #12
 8003f60:	46bd      	mov	sp, r7
 8003f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f66:	4770      	bx	lr

08003f68 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8003f68:	b480      	push	{r7}
 8003f6a:	b085      	sub	sp, #20
 8003f6c:	af00      	add	r7, sp, #0
 8003f6e:	60f8      	str	r0, [r7, #12]
 8003f70:	60b9      	str	r1, [r7, #8]
 8003f72:	607a      	str	r2, [r7, #4]
	return 0;
 8003f74:	2300      	movs	r3, #0
}
 8003f76:	4618      	mov	r0, r3
 8003f78:	3714      	adds	r7, #20
 8003f7a:	46bd      	mov	sp, r7
 8003f7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f80:	4770      	bx	lr
	...

08003f84 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003f84:	b580      	push	{r7, lr}
 8003f86:	b086      	sub	sp, #24
 8003f88:	af00      	add	r7, sp, #0
 8003f8a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003f8c:	4a14      	ldr	r2, [pc, #80]	; (8003fe0 <_sbrk+0x5c>)
 8003f8e:	4b15      	ldr	r3, [pc, #84]	; (8003fe4 <_sbrk+0x60>)
 8003f90:	1ad3      	subs	r3, r2, r3
 8003f92:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003f94:	697b      	ldr	r3, [r7, #20]
 8003f96:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003f98:	4b13      	ldr	r3, [pc, #76]	; (8003fe8 <_sbrk+0x64>)
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	2b00      	cmp	r3, #0
 8003f9e:	d102      	bne.n	8003fa6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003fa0:	4b11      	ldr	r3, [pc, #68]	; (8003fe8 <_sbrk+0x64>)
 8003fa2:	4a12      	ldr	r2, [pc, #72]	; (8003fec <_sbrk+0x68>)
 8003fa4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003fa6:	4b10      	ldr	r3, [pc, #64]	; (8003fe8 <_sbrk+0x64>)
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	4413      	add	r3, r2
 8003fae:	693a      	ldr	r2, [r7, #16]
 8003fb0:	429a      	cmp	r2, r3
 8003fb2:	d207      	bcs.n	8003fc4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003fb4:	f003 fb1c 	bl	80075f0 <__errno>
 8003fb8:	4603      	mov	r3, r0
 8003fba:	220c      	movs	r2, #12
 8003fbc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003fbe:	f04f 33ff 	mov.w	r3, #4294967295
 8003fc2:	e009      	b.n	8003fd8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003fc4:	4b08      	ldr	r3, [pc, #32]	; (8003fe8 <_sbrk+0x64>)
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003fca:	4b07      	ldr	r3, [pc, #28]	; (8003fe8 <_sbrk+0x64>)
 8003fcc:	681a      	ldr	r2, [r3, #0]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	4413      	add	r3, r2
 8003fd2:	4a05      	ldr	r2, [pc, #20]	; (8003fe8 <_sbrk+0x64>)
 8003fd4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003fd6:	68fb      	ldr	r3, [r7, #12]
}
 8003fd8:	4618      	mov	r0, r3
 8003fda:	3718      	adds	r7, #24
 8003fdc:	46bd      	mov	sp, r7
 8003fde:	bd80      	pop	{r7, pc}
 8003fe0:	20020000 	.word	0x20020000
 8003fe4:	00000400 	.word	0x00000400
 8003fe8:	200033d4 	.word	0x200033d4
 8003fec:	20003410 	.word	0x20003410

08003ff0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003ff0:	b480      	push	{r7}
 8003ff2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003ff4:	4b06      	ldr	r3, [pc, #24]	; (8004010 <SystemInit+0x20>)
 8003ff6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003ffa:	4a05      	ldr	r2, [pc, #20]	; (8004010 <SystemInit+0x20>)
 8003ffc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004000:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8004004:	bf00      	nop
 8004006:	46bd      	mov	sp, r7
 8004008:	f85d 7b04 	ldr.w	r7, [sp], #4
 800400c:	4770      	bx	lr
 800400e:	bf00      	nop
 8004010:	e000ed00 	.word	0xe000ed00

08004014 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8004014:	f8df d034 	ldr.w	sp, [pc, #52]	; 800404c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004018:	480d      	ldr	r0, [pc, #52]	; (8004050 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800401a:	490e      	ldr	r1, [pc, #56]	; (8004054 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800401c:	4a0e      	ldr	r2, [pc, #56]	; (8004058 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800401e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004020:	e002      	b.n	8004028 <LoopCopyDataInit>

08004022 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8004022:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8004024:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8004026:	3304      	adds	r3, #4

08004028 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004028:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800402a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800402c:	d3f9      	bcc.n	8004022 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800402e:	4a0b      	ldr	r2, [pc, #44]	; (800405c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004030:	4c0b      	ldr	r4, [pc, #44]	; (8004060 <LoopFillZerobss+0x26>)
  movs r3, #0
 8004032:	2300      	movs	r3, #0
  b LoopFillZerobss
 8004034:	e001      	b.n	800403a <LoopFillZerobss>

08004036 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8004036:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004038:	3204      	adds	r2, #4

0800403a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800403a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800403c:	d3fb      	bcc.n	8004036 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800403e:	f7ff ffd7 	bl	8003ff0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8004042:	f003 fadb 	bl	80075fc <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8004046:	f7fe fe17 	bl	8002c78 <main>
  bx  lr    
 800404a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800404c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8004050:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8004054:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8004058:	0800c660 	.word	0x0800c660
  ldr r2, =_sbss
 800405c:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8004060:	2000340c 	.word	0x2000340c

08004064 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8004064:	e7fe      	b.n	8004064 <ADC_IRQHandler>
	...

08004068 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8004068:	b580      	push	{r7, lr}
 800406a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800406c:	4b0e      	ldr	r3, [pc, #56]	; (80040a8 <HAL_Init+0x40>)
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	4a0d      	ldr	r2, [pc, #52]	; (80040a8 <HAL_Init+0x40>)
 8004072:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004076:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8004078:	4b0b      	ldr	r3, [pc, #44]	; (80040a8 <HAL_Init+0x40>)
 800407a:	681b      	ldr	r3, [r3, #0]
 800407c:	4a0a      	ldr	r2, [pc, #40]	; (80040a8 <HAL_Init+0x40>)
 800407e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004082:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8004084:	4b08      	ldr	r3, [pc, #32]	; (80040a8 <HAL_Init+0x40>)
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	4a07      	ldr	r2, [pc, #28]	; (80040a8 <HAL_Init+0x40>)
 800408a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800408e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8004090:	2003      	movs	r0, #3
 8004092:	f000 f965 	bl	8004360 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8004096:	2000      	movs	r0, #0
 8004098:	f000 f808 	bl	80040ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800409c:	f7ff fd4a 	bl	8003b34 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80040a0:	2300      	movs	r3, #0
}
 80040a2:	4618      	mov	r0, r3
 80040a4:	bd80      	pop	{r7, pc}
 80040a6:	bf00      	nop
 80040a8:	40023c00 	.word	0x40023c00

080040ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80040ac:	b580      	push	{r7, lr}
 80040ae:	b082      	sub	sp, #8
 80040b0:	af00      	add	r7, sp, #0
 80040b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80040b4:	4b12      	ldr	r3, [pc, #72]	; (8004100 <HAL_InitTick+0x54>)
 80040b6:	681a      	ldr	r2, [r3, #0]
 80040b8:	4b12      	ldr	r3, [pc, #72]	; (8004104 <HAL_InitTick+0x58>)
 80040ba:	781b      	ldrb	r3, [r3, #0]
 80040bc:	4619      	mov	r1, r3
 80040be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80040c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80040c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80040ca:	4618      	mov	r0, r3
 80040cc:	f000 f981 	bl	80043d2 <HAL_SYSTICK_Config>
 80040d0:	4603      	mov	r3, r0
 80040d2:	2b00      	cmp	r3, #0
 80040d4:	d001      	beq.n	80040da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80040d6:	2301      	movs	r3, #1
 80040d8:	e00e      	b.n	80040f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	2b0f      	cmp	r3, #15
 80040de:	d80a      	bhi.n	80040f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80040e0:	2200      	movs	r2, #0
 80040e2:	6879      	ldr	r1, [r7, #4]
 80040e4:	f04f 30ff 	mov.w	r0, #4294967295
 80040e8:	f000 f945 	bl	8004376 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80040ec:	4a06      	ldr	r2, [pc, #24]	; (8004108 <HAL_InitTick+0x5c>)
 80040ee:	687b      	ldr	r3, [r7, #4]
 80040f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80040f2:	2300      	movs	r3, #0
 80040f4:	e000      	b.n	80040f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80040f6:	2301      	movs	r3, #1
}
 80040f8:	4618      	mov	r0, r3
 80040fa:	3708      	adds	r7, #8
 80040fc:	46bd      	mov	sp, r7
 80040fe:	bd80      	pop	{r7, pc}
 8004100:	20000014 	.word	0x20000014
 8004104:	2000001c 	.word	0x2000001c
 8004108:	20000018 	.word	0x20000018

0800410c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800410c:	b480      	push	{r7}
 800410e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004110:	4b06      	ldr	r3, [pc, #24]	; (800412c <HAL_IncTick+0x20>)
 8004112:	781b      	ldrb	r3, [r3, #0]
 8004114:	461a      	mov	r2, r3
 8004116:	4b06      	ldr	r3, [pc, #24]	; (8004130 <HAL_IncTick+0x24>)
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	4413      	add	r3, r2
 800411c:	4a04      	ldr	r2, [pc, #16]	; (8004130 <HAL_IncTick+0x24>)
 800411e:	6013      	str	r3, [r2, #0]
}
 8004120:	bf00      	nop
 8004122:	46bd      	mov	sp, r7
 8004124:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004128:	4770      	bx	lr
 800412a:	bf00      	nop
 800412c:	2000001c 	.word	0x2000001c
 8004130:	200033d8 	.word	0x200033d8

08004134 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8004134:	b480      	push	{r7}
 8004136:	af00      	add	r7, sp, #0
  return uwTick;
 8004138:	4b03      	ldr	r3, [pc, #12]	; (8004148 <HAL_GetTick+0x14>)
 800413a:	681b      	ldr	r3, [r3, #0]
}
 800413c:	4618      	mov	r0, r3
 800413e:	46bd      	mov	sp, r7
 8004140:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004144:	4770      	bx	lr
 8004146:	bf00      	nop
 8004148:	200033d8 	.word	0x200033d8

0800414c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b084      	sub	sp, #16
 8004150:	af00      	add	r7, sp, #0
 8004152:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8004154:	f7ff ffee 	bl	8004134 <HAL_GetTick>
 8004158:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800415a:	687b      	ldr	r3, [r7, #4]
 800415c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800415e:	68fb      	ldr	r3, [r7, #12]
 8004160:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004164:	d005      	beq.n	8004172 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8004166:	4b0a      	ldr	r3, [pc, #40]	; (8004190 <HAL_Delay+0x44>)
 8004168:	781b      	ldrb	r3, [r3, #0]
 800416a:	461a      	mov	r2, r3
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	4413      	add	r3, r2
 8004170:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8004172:	bf00      	nop
 8004174:	f7ff ffde 	bl	8004134 <HAL_GetTick>
 8004178:	4602      	mov	r2, r0
 800417a:	68bb      	ldr	r3, [r7, #8]
 800417c:	1ad3      	subs	r3, r2, r3
 800417e:	68fa      	ldr	r2, [r7, #12]
 8004180:	429a      	cmp	r2, r3
 8004182:	d8f7      	bhi.n	8004174 <HAL_Delay+0x28>
  {
  }
}
 8004184:	bf00      	nop
 8004186:	bf00      	nop
 8004188:	3710      	adds	r7, #16
 800418a:	46bd      	mov	sp, r7
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	2000001c 	.word	0x2000001c

08004194 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004194:	b480      	push	{r7}
 8004196:	b085      	sub	sp, #20
 8004198:	af00      	add	r7, sp, #0
 800419a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800419c:	687b      	ldr	r3, [r7, #4]
 800419e:	f003 0307 	and.w	r3, r3, #7
 80041a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80041a4:	4b0c      	ldr	r3, [pc, #48]	; (80041d8 <__NVIC_SetPriorityGrouping+0x44>)
 80041a6:	68db      	ldr	r3, [r3, #12]
 80041a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80041aa:	68ba      	ldr	r2, [r7, #8]
 80041ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80041b0:	4013      	ands	r3, r2
 80041b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80041b8:	68bb      	ldr	r3, [r7, #8]
 80041ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80041bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80041c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80041c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80041c6:	4a04      	ldr	r2, [pc, #16]	; (80041d8 <__NVIC_SetPriorityGrouping+0x44>)
 80041c8:	68bb      	ldr	r3, [r7, #8]
 80041ca:	60d3      	str	r3, [r2, #12]
}
 80041cc:	bf00      	nop
 80041ce:	3714      	adds	r7, #20
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr
 80041d8:	e000ed00 	.word	0xe000ed00

080041dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80041dc:	b480      	push	{r7}
 80041de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80041e0:	4b04      	ldr	r3, [pc, #16]	; (80041f4 <__NVIC_GetPriorityGrouping+0x18>)
 80041e2:	68db      	ldr	r3, [r3, #12]
 80041e4:	0a1b      	lsrs	r3, r3, #8
 80041e6:	f003 0307 	and.w	r3, r3, #7
}
 80041ea:	4618      	mov	r0, r3
 80041ec:	46bd      	mov	sp, r7
 80041ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f2:	4770      	bx	lr
 80041f4:	e000ed00 	.word	0xe000ed00

080041f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b083      	sub	sp, #12
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	4603      	mov	r3, r0
 8004200:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004202:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004206:	2b00      	cmp	r3, #0
 8004208:	db0b      	blt.n	8004222 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800420a:	79fb      	ldrb	r3, [r7, #7]
 800420c:	f003 021f 	and.w	r2, r3, #31
 8004210:	4907      	ldr	r1, [pc, #28]	; (8004230 <__NVIC_EnableIRQ+0x38>)
 8004212:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004216:	095b      	lsrs	r3, r3, #5
 8004218:	2001      	movs	r0, #1
 800421a:	fa00 f202 	lsl.w	r2, r0, r2
 800421e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8004222:	bf00      	nop
 8004224:	370c      	adds	r7, #12
 8004226:	46bd      	mov	sp, r7
 8004228:	f85d 7b04 	ldr.w	r7, [sp], #4
 800422c:	4770      	bx	lr
 800422e:	bf00      	nop
 8004230:	e000e100 	.word	0xe000e100

08004234 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8004234:	b480      	push	{r7}
 8004236:	b083      	sub	sp, #12
 8004238:	af00      	add	r7, sp, #0
 800423a:	4603      	mov	r3, r0
 800423c:	6039      	str	r1, [r7, #0]
 800423e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004240:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004244:	2b00      	cmp	r3, #0
 8004246:	db0a      	blt.n	800425e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8004248:	683b      	ldr	r3, [r7, #0]
 800424a:	b2da      	uxtb	r2, r3
 800424c:	490c      	ldr	r1, [pc, #48]	; (8004280 <__NVIC_SetPriority+0x4c>)
 800424e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004252:	0112      	lsls	r2, r2, #4
 8004254:	b2d2      	uxtb	r2, r2
 8004256:	440b      	add	r3, r1
 8004258:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800425c:	e00a      	b.n	8004274 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800425e:	683b      	ldr	r3, [r7, #0]
 8004260:	b2da      	uxtb	r2, r3
 8004262:	4908      	ldr	r1, [pc, #32]	; (8004284 <__NVIC_SetPriority+0x50>)
 8004264:	79fb      	ldrb	r3, [r7, #7]
 8004266:	f003 030f 	and.w	r3, r3, #15
 800426a:	3b04      	subs	r3, #4
 800426c:	0112      	lsls	r2, r2, #4
 800426e:	b2d2      	uxtb	r2, r2
 8004270:	440b      	add	r3, r1
 8004272:	761a      	strb	r2, [r3, #24]
}
 8004274:	bf00      	nop
 8004276:	370c      	adds	r7, #12
 8004278:	46bd      	mov	sp, r7
 800427a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800427e:	4770      	bx	lr
 8004280:	e000e100 	.word	0xe000e100
 8004284:	e000ed00 	.word	0xe000ed00

08004288 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8004288:	b480      	push	{r7}
 800428a:	b089      	sub	sp, #36	; 0x24
 800428c:	af00      	add	r7, sp, #0
 800428e:	60f8      	str	r0, [r7, #12]
 8004290:	60b9      	str	r1, [r7, #8]
 8004292:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	f003 0307 	and.w	r3, r3, #7
 800429a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800429c:	69fb      	ldr	r3, [r7, #28]
 800429e:	f1c3 0307 	rsb	r3, r3, #7
 80042a2:	2b04      	cmp	r3, #4
 80042a4:	bf28      	it	cs
 80042a6:	2304      	movcs	r3, #4
 80042a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80042aa:	69fb      	ldr	r3, [r7, #28]
 80042ac:	3304      	adds	r3, #4
 80042ae:	2b06      	cmp	r3, #6
 80042b0:	d902      	bls.n	80042b8 <NVIC_EncodePriority+0x30>
 80042b2:	69fb      	ldr	r3, [r7, #28]
 80042b4:	3b03      	subs	r3, #3
 80042b6:	e000      	b.n	80042ba <NVIC_EncodePriority+0x32>
 80042b8:	2300      	movs	r3, #0
 80042ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042bc:	f04f 32ff 	mov.w	r2, #4294967295
 80042c0:	69bb      	ldr	r3, [r7, #24]
 80042c2:	fa02 f303 	lsl.w	r3, r2, r3
 80042c6:	43da      	mvns	r2, r3
 80042c8:	68bb      	ldr	r3, [r7, #8]
 80042ca:	401a      	ands	r2, r3
 80042cc:	697b      	ldr	r3, [r7, #20]
 80042ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80042d0:	f04f 31ff 	mov.w	r1, #4294967295
 80042d4:	697b      	ldr	r3, [r7, #20]
 80042d6:	fa01 f303 	lsl.w	r3, r1, r3
 80042da:	43d9      	mvns	r1, r3
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80042e0:	4313      	orrs	r3, r2
         );
}
 80042e2:	4618      	mov	r0, r3
 80042e4:	3724      	adds	r7, #36	; 0x24
 80042e6:	46bd      	mov	sp, r7
 80042e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042ec:	4770      	bx	lr
	...

080042f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80042f0:	b480      	push	{r7}
 80042f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80042f4:	f3bf 8f4f 	dsb	sy
}
 80042f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80042fa:	4b06      	ldr	r3, [pc, #24]	; (8004314 <__NVIC_SystemReset+0x24>)
 80042fc:	68db      	ldr	r3, [r3, #12]
 80042fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8004302:	4904      	ldr	r1, [pc, #16]	; (8004314 <__NVIC_SystemReset+0x24>)
 8004304:	4b04      	ldr	r3, [pc, #16]	; (8004318 <__NVIC_SystemReset+0x28>)
 8004306:	4313      	orrs	r3, r2
 8004308:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800430a:	f3bf 8f4f 	dsb	sy
}
 800430e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004310:	bf00      	nop
 8004312:	e7fd      	b.n	8004310 <__NVIC_SystemReset+0x20>
 8004314:	e000ed00 	.word	0xe000ed00
 8004318:	05fa0004 	.word	0x05fa0004

0800431c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800431c:	b580      	push	{r7, lr}
 800431e:	b082      	sub	sp, #8
 8004320:	af00      	add	r7, sp, #0
 8004322:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	3b01      	subs	r3, #1
 8004328:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800432c:	d301      	bcc.n	8004332 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800432e:	2301      	movs	r3, #1
 8004330:	e00f      	b.n	8004352 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8004332:	4a0a      	ldr	r2, [pc, #40]	; (800435c <SysTick_Config+0x40>)
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	3b01      	subs	r3, #1
 8004338:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800433a:	210f      	movs	r1, #15
 800433c:	f04f 30ff 	mov.w	r0, #4294967295
 8004340:	f7ff ff78 	bl	8004234 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8004344:	4b05      	ldr	r3, [pc, #20]	; (800435c <SysTick_Config+0x40>)
 8004346:	2200      	movs	r2, #0
 8004348:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800434a:	4b04      	ldr	r3, [pc, #16]	; (800435c <SysTick_Config+0x40>)
 800434c:	2207      	movs	r2, #7
 800434e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8004350:	2300      	movs	r3, #0
}
 8004352:	4618      	mov	r0, r3
 8004354:	3708      	adds	r7, #8
 8004356:	46bd      	mov	sp, r7
 8004358:	bd80      	pop	{r7, pc}
 800435a:	bf00      	nop
 800435c:	e000e010 	.word	0xe000e010

08004360 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8004360:	b580      	push	{r7, lr}
 8004362:	b082      	sub	sp, #8
 8004364:	af00      	add	r7, sp, #0
 8004366:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8004368:	6878      	ldr	r0, [r7, #4]
 800436a:	f7ff ff13 	bl	8004194 <__NVIC_SetPriorityGrouping>
}
 800436e:	bf00      	nop
 8004370:	3708      	adds	r7, #8
 8004372:	46bd      	mov	sp, r7
 8004374:	bd80      	pop	{r7, pc}

08004376 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8004376:	b580      	push	{r7, lr}
 8004378:	b086      	sub	sp, #24
 800437a:	af00      	add	r7, sp, #0
 800437c:	4603      	mov	r3, r0
 800437e:	60b9      	str	r1, [r7, #8]
 8004380:	607a      	str	r2, [r7, #4]
 8004382:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8004384:	2300      	movs	r3, #0
 8004386:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8004388:	f7ff ff28 	bl	80041dc <__NVIC_GetPriorityGrouping>
 800438c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800438e:	687a      	ldr	r2, [r7, #4]
 8004390:	68b9      	ldr	r1, [r7, #8]
 8004392:	6978      	ldr	r0, [r7, #20]
 8004394:	f7ff ff78 	bl	8004288 <NVIC_EncodePriority>
 8004398:	4602      	mov	r2, r0
 800439a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800439e:	4611      	mov	r1, r2
 80043a0:	4618      	mov	r0, r3
 80043a2:	f7ff ff47 	bl	8004234 <__NVIC_SetPriority>
}
 80043a6:	bf00      	nop
 80043a8:	3718      	adds	r7, #24
 80043aa:	46bd      	mov	sp, r7
 80043ac:	bd80      	pop	{r7, pc}

080043ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80043ae:	b580      	push	{r7, lr}
 80043b0:	b082      	sub	sp, #8
 80043b2:	af00      	add	r7, sp, #0
 80043b4:	4603      	mov	r3, r0
 80043b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80043b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7ff ff1b 	bl	80041f8 <__NVIC_EnableIRQ>
}
 80043c2:	bf00      	nop
 80043c4:	3708      	adds	r7, #8
 80043c6:	46bd      	mov	sp, r7
 80043c8:	bd80      	pop	{r7, pc}

080043ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80043ca:	b580      	push	{r7, lr}
 80043cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80043ce:	f7ff ff8f 	bl	80042f0 <__NVIC_SystemReset>

080043d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80043d2:	b580      	push	{r7, lr}
 80043d4:	b082      	sub	sp, #8
 80043d6:	af00      	add	r7, sp, #0
 80043d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80043da:	6878      	ldr	r0, [r7, #4]
 80043dc:	f7ff ff9e 	bl	800431c <SysTick_Config>
 80043e0:	4603      	mov	r3, r0
}
 80043e2:	4618      	mov	r0, r3
 80043e4:	3708      	adds	r7, #8
 80043e6:	46bd      	mov	sp, r7
 80043e8:	bd80      	pop	{r7, pc}

080043ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80043ea:	b580      	push	{r7, lr}
 80043ec:	b084      	sub	sp, #16
 80043ee:	af00      	add	r7, sp, #0
 80043f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80043f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80043f8:	f7ff fe9c 	bl	8004134 <HAL_GetTick>
 80043fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004404:	b2db      	uxtb	r3, r3
 8004406:	2b02      	cmp	r3, #2
 8004408:	d008      	beq.n	800441c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	2280      	movs	r2, #128	; 0x80
 800440e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	2200      	movs	r2, #0
 8004414:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004418:	2301      	movs	r3, #1
 800441a:	e052      	b.n	80044c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	681a      	ldr	r2, [r3, #0]
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	f022 0216 	bic.w	r2, r2, #22
 800442a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	695a      	ldr	r2, [r3, #20]
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800443a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800443c:	687b      	ldr	r3, [r7, #4]
 800443e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004440:	2b00      	cmp	r3, #0
 8004442:	d103      	bne.n	800444c <HAL_DMA_Abort+0x62>
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004448:	2b00      	cmp	r3, #0
 800444a:	d007      	beq.n	800445c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	681a      	ldr	r2, [r3, #0]
 8004452:	687b      	ldr	r3, [r7, #4]
 8004454:	681b      	ldr	r3, [r3, #0]
 8004456:	f022 0208 	bic.w	r2, r2, #8
 800445a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	681b      	ldr	r3, [r3, #0]
 8004460:	681a      	ldr	r2, [r3, #0]
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f022 0201 	bic.w	r2, r2, #1
 800446a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800446c:	e013      	b.n	8004496 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800446e:	f7ff fe61 	bl	8004134 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	68bb      	ldr	r3, [r7, #8]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	2b05      	cmp	r3, #5
 800447a:	d90c      	bls.n	8004496 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	2220      	movs	r2, #32
 8004480:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	2203      	movs	r2, #3
 8004486:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800448a:	687b      	ldr	r3, [r7, #4]
 800448c:	2200      	movs	r2, #0
 800448e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8004492:	2303      	movs	r3, #3
 8004494:	e015      	b.n	80044c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681b      	ldr	r3, [r3, #0]
 800449c:	f003 0301 	and.w	r3, r3, #1
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	d1e4      	bne.n	800446e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044a8:	223f      	movs	r2, #63	; 0x3f
 80044aa:	409a      	lsls	r2, r3
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80044b0:	687b      	ldr	r3, [r7, #4]
 80044b2:	2201      	movs	r2, #1
 80044b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80044b8:	687b      	ldr	r3, [r7, #4]
 80044ba:	2200      	movs	r2, #0
 80044bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80044c0:	2300      	movs	r3, #0
}
 80044c2:	4618      	mov	r0, r3
 80044c4:	3710      	adds	r7, #16
 80044c6:	46bd      	mov	sp, r7
 80044c8:	bd80      	pop	{r7, pc}

080044ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80044ca:	b480      	push	{r7}
 80044cc:	b083      	sub	sp, #12
 80044ce:	af00      	add	r7, sp, #0
 80044d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044d8:	b2db      	uxtb	r3, r3
 80044da:	2b02      	cmp	r3, #2
 80044dc:	d004      	beq.n	80044e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	2280      	movs	r2, #128	; 0x80
 80044e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80044e4:	2301      	movs	r3, #1
 80044e6:	e00c      	b.n	8004502 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2205      	movs	r2, #5
 80044ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80044f0:	687b      	ldr	r3, [r7, #4]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681a      	ldr	r2, [r3, #0]
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	681b      	ldr	r3, [r3, #0]
 80044fa:	f022 0201 	bic.w	r2, r2, #1
 80044fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004500:	2300      	movs	r3, #0
}
 8004502:	4618      	mov	r0, r3
 8004504:	370c      	adds	r7, #12
 8004506:	46bd      	mov	sp, r7
 8004508:	f85d 7b04 	ldr.w	r7, [sp], #4
 800450c:	4770      	bx	lr
	...

08004510 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004510:	b580      	push	{r7, lr}
 8004512:	b086      	sub	sp, #24
 8004514:	af00      	add	r7, sp, #0
 8004516:	60f8      	str	r0, [r7, #12]
 8004518:	60b9      	str	r1, [r7, #8]
 800451a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004522:	4b23      	ldr	r3, [pc, #140]	; (80045b0 <HAL_FLASH_Program+0xa0>)
 8004524:	7e1b      	ldrb	r3, [r3, #24]
 8004526:	2b01      	cmp	r3, #1
 8004528:	d101      	bne.n	800452e <HAL_FLASH_Program+0x1e>
 800452a:	2302      	movs	r3, #2
 800452c:	e03b      	b.n	80045a6 <HAL_FLASH_Program+0x96>
 800452e:	4b20      	ldr	r3, [pc, #128]	; (80045b0 <HAL_FLASH_Program+0xa0>)
 8004530:	2201      	movs	r2, #1
 8004532:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004534:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004538:	f000 f87c 	bl	8004634 <FLASH_WaitForLastOperation>
 800453c:	4603      	mov	r3, r0
 800453e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004540:	7dfb      	ldrb	r3, [r7, #23]
 8004542:	2b00      	cmp	r3, #0
 8004544:	d12b      	bne.n	800459e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8004546:	68fb      	ldr	r3, [r7, #12]
 8004548:	2b00      	cmp	r3, #0
 800454a:	d105      	bne.n	8004558 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800454c:	783b      	ldrb	r3, [r7, #0]
 800454e:	4619      	mov	r1, r3
 8004550:	68b8      	ldr	r0, [r7, #8]
 8004552:	f000 f927 	bl	80047a4 <FLASH_Program_Byte>
 8004556:	e016      	b.n	8004586 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	2b01      	cmp	r3, #1
 800455c:	d105      	bne.n	800456a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800455e:	883b      	ldrh	r3, [r7, #0]
 8004560:	4619      	mov	r1, r3
 8004562:	68b8      	ldr	r0, [r7, #8]
 8004564:	f000 f8fa 	bl	800475c <FLASH_Program_HalfWord>
 8004568:	e00d      	b.n	8004586 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800456a:	68fb      	ldr	r3, [r7, #12]
 800456c:	2b02      	cmp	r3, #2
 800456e:	d105      	bne.n	800457c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8004570:	683b      	ldr	r3, [r7, #0]
 8004572:	4619      	mov	r1, r3
 8004574:	68b8      	ldr	r0, [r7, #8]
 8004576:	f000 f8cf 	bl	8004718 <FLASH_Program_Word>
 800457a:	e004      	b.n	8004586 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800457c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004580:	68b8      	ldr	r0, [r7, #8]
 8004582:	f000 f897 	bl	80046b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004586:	f24c 3050 	movw	r0, #50000	; 0xc350
 800458a:	f000 f853 	bl	8004634 <FLASH_WaitForLastOperation>
 800458e:	4603      	mov	r3, r0
 8004590:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8004592:	4b08      	ldr	r3, [pc, #32]	; (80045b4 <HAL_FLASH_Program+0xa4>)
 8004594:	691b      	ldr	r3, [r3, #16]
 8004596:	4a07      	ldr	r2, [pc, #28]	; (80045b4 <HAL_FLASH_Program+0xa4>)
 8004598:	f023 0301 	bic.w	r3, r3, #1
 800459c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800459e:	4b04      	ldr	r3, [pc, #16]	; (80045b0 <HAL_FLASH_Program+0xa0>)
 80045a0:	2200      	movs	r2, #0
 80045a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80045a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80045a6:	4618      	mov	r0, r3
 80045a8:	3718      	adds	r7, #24
 80045aa:	46bd      	mov	sp, r7
 80045ac:	bd80      	pop	{r7, pc}
 80045ae:	bf00      	nop
 80045b0:	200033dc 	.word	0x200033dc
 80045b4:	40023c00 	.word	0x40023c00

080045b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80045b8:	b480      	push	{r7}
 80045ba:	b083      	sub	sp, #12
 80045bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80045be:	2300      	movs	r3, #0
 80045c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045c2:	4b0b      	ldr	r3, [pc, #44]	; (80045f0 <HAL_FLASH_Unlock+0x38>)
 80045c4:	691b      	ldr	r3, [r3, #16]
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	da0b      	bge.n	80045e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80045ca:	4b09      	ldr	r3, [pc, #36]	; (80045f0 <HAL_FLASH_Unlock+0x38>)
 80045cc:	4a09      	ldr	r2, [pc, #36]	; (80045f4 <HAL_FLASH_Unlock+0x3c>)
 80045ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80045d0:	4b07      	ldr	r3, [pc, #28]	; (80045f0 <HAL_FLASH_Unlock+0x38>)
 80045d2:	4a09      	ldr	r2, [pc, #36]	; (80045f8 <HAL_FLASH_Unlock+0x40>)
 80045d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80045d6:	4b06      	ldr	r3, [pc, #24]	; (80045f0 <HAL_FLASH_Unlock+0x38>)
 80045d8:	691b      	ldr	r3, [r3, #16]
 80045da:	2b00      	cmp	r3, #0
 80045dc:	da01      	bge.n	80045e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80045de:	2301      	movs	r3, #1
 80045e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80045e2:	79fb      	ldrb	r3, [r7, #7]
}
 80045e4:	4618      	mov	r0, r3
 80045e6:	370c      	adds	r7, #12
 80045e8:	46bd      	mov	sp, r7
 80045ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ee:	4770      	bx	lr
 80045f0:	40023c00 	.word	0x40023c00
 80045f4:	45670123 	.word	0x45670123
 80045f8:	cdef89ab 	.word	0xcdef89ab

080045fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80045fc:	b480      	push	{r7}
 80045fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004600:	4b05      	ldr	r3, [pc, #20]	; (8004618 <HAL_FLASH_Lock+0x1c>)
 8004602:	691b      	ldr	r3, [r3, #16]
 8004604:	4a04      	ldr	r2, [pc, #16]	; (8004618 <HAL_FLASH_Lock+0x1c>)
 8004606:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800460a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800460c:	2300      	movs	r3, #0
}
 800460e:	4618      	mov	r0, r3
 8004610:	46bd      	mov	sp, r7
 8004612:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004616:	4770      	bx	lr
 8004618:	40023c00 	.word	0x40023c00

0800461c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800461c:	b480      	push	{r7}
 800461e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004620:	4b03      	ldr	r3, [pc, #12]	; (8004630 <HAL_FLASH_GetError+0x14>)
 8004622:	69db      	ldr	r3, [r3, #28]
}  
 8004624:	4618      	mov	r0, r3
 8004626:	46bd      	mov	sp, r7
 8004628:	f85d 7b04 	ldr.w	r7, [sp], #4
 800462c:	4770      	bx	lr
 800462e:	bf00      	nop
 8004630:	200033dc 	.word	0x200033dc

08004634 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800463c:	2300      	movs	r3, #0
 800463e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004640:	4b1a      	ldr	r3, [pc, #104]	; (80046ac <FLASH_WaitForLastOperation+0x78>)
 8004642:	2200      	movs	r2, #0
 8004644:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8004646:	f7ff fd75 	bl	8004134 <HAL_GetTick>
 800464a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800464c:	e010      	b.n	8004670 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800464e:	687b      	ldr	r3, [r7, #4]
 8004650:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004654:	d00c      	beq.n	8004670 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	2b00      	cmp	r3, #0
 800465a:	d007      	beq.n	800466c <FLASH_WaitForLastOperation+0x38>
 800465c:	f7ff fd6a 	bl	8004134 <HAL_GetTick>
 8004660:	4602      	mov	r2, r0
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	1ad3      	subs	r3, r2, r3
 8004666:	687a      	ldr	r2, [r7, #4]
 8004668:	429a      	cmp	r2, r3
 800466a:	d201      	bcs.n	8004670 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800466c:	2303      	movs	r3, #3
 800466e:	e019      	b.n	80046a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8004670:	4b0f      	ldr	r3, [pc, #60]	; (80046b0 <FLASH_WaitForLastOperation+0x7c>)
 8004672:	68db      	ldr	r3, [r3, #12]
 8004674:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004678:	2b00      	cmp	r3, #0
 800467a:	d1e8      	bne.n	800464e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800467c:	4b0c      	ldr	r3, [pc, #48]	; (80046b0 <FLASH_WaitForLastOperation+0x7c>)
 800467e:	68db      	ldr	r3, [r3, #12]
 8004680:	f003 0301 	and.w	r3, r3, #1
 8004684:	2b00      	cmp	r3, #0
 8004686:	d002      	beq.n	800468e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8004688:	4b09      	ldr	r3, [pc, #36]	; (80046b0 <FLASH_WaitForLastOperation+0x7c>)
 800468a:	2201      	movs	r2, #1
 800468c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800468e:	4b08      	ldr	r3, [pc, #32]	; (80046b0 <FLASH_WaitForLastOperation+0x7c>)
 8004690:	68db      	ldr	r3, [r3, #12]
 8004692:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8004696:	2b00      	cmp	r3, #0
 8004698:	d003      	beq.n	80046a2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800469a:	f000 f8a5 	bl	80047e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800469e:	2301      	movs	r3, #1
 80046a0:	e000      	b.n	80046a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80046a2:	2300      	movs	r3, #0
  
}  
 80046a4:	4618      	mov	r0, r3
 80046a6:	3710      	adds	r7, #16
 80046a8:	46bd      	mov	sp, r7
 80046aa:	bd80      	pop	{r7, pc}
 80046ac:	200033dc 	.word	0x200033dc
 80046b0:	40023c00 	.word	0x40023c00

080046b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80046b4:	b480      	push	{r7}
 80046b6:	b085      	sub	sp, #20
 80046b8:	af00      	add	r7, sp, #0
 80046ba:	60f8      	str	r0, [r7, #12]
 80046bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80046c0:	4b14      	ldr	r3, [pc, #80]	; (8004714 <FLASH_Program_DoubleWord+0x60>)
 80046c2:	691b      	ldr	r3, [r3, #16]
 80046c4:	4a13      	ldr	r2, [pc, #76]	; (8004714 <FLASH_Program_DoubleWord+0x60>)
 80046c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80046ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80046cc:	4b11      	ldr	r3, [pc, #68]	; (8004714 <FLASH_Program_DoubleWord+0x60>)
 80046ce:	691b      	ldr	r3, [r3, #16]
 80046d0:	4a10      	ldr	r2, [pc, #64]	; (8004714 <FLASH_Program_DoubleWord+0x60>)
 80046d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80046d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80046d8:	4b0e      	ldr	r3, [pc, #56]	; (8004714 <FLASH_Program_DoubleWord+0x60>)
 80046da:	691b      	ldr	r3, [r3, #16]
 80046dc:	4a0d      	ldr	r2, [pc, #52]	; (8004714 <FLASH_Program_DoubleWord+0x60>)
 80046de:	f043 0301 	orr.w	r3, r3, #1
 80046e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80046e4:	68fb      	ldr	r3, [r7, #12]
 80046e6:	683a      	ldr	r2, [r7, #0]
 80046e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80046ea:	f3bf 8f6f 	isb	sy
}
 80046ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80046f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80046f4:	f04f 0200 	mov.w	r2, #0
 80046f8:	f04f 0300 	mov.w	r3, #0
 80046fc:	000a      	movs	r2, r1
 80046fe:	2300      	movs	r3, #0
 8004700:	68f9      	ldr	r1, [r7, #12]
 8004702:	3104      	adds	r1, #4
 8004704:	4613      	mov	r3, r2
 8004706:	600b      	str	r3, [r1, #0]
}
 8004708:	bf00      	nop
 800470a:	3714      	adds	r7, #20
 800470c:	46bd      	mov	sp, r7
 800470e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004712:	4770      	bx	lr
 8004714:	40023c00 	.word	0x40023c00

08004718 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004718:	b480      	push	{r7}
 800471a:	b083      	sub	sp, #12
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
 8004720:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004722:	4b0d      	ldr	r3, [pc, #52]	; (8004758 <FLASH_Program_Word+0x40>)
 8004724:	691b      	ldr	r3, [r3, #16]
 8004726:	4a0c      	ldr	r2, [pc, #48]	; (8004758 <FLASH_Program_Word+0x40>)
 8004728:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800472c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800472e:	4b0a      	ldr	r3, [pc, #40]	; (8004758 <FLASH_Program_Word+0x40>)
 8004730:	691b      	ldr	r3, [r3, #16]
 8004732:	4a09      	ldr	r2, [pc, #36]	; (8004758 <FLASH_Program_Word+0x40>)
 8004734:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004738:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800473a:	4b07      	ldr	r3, [pc, #28]	; (8004758 <FLASH_Program_Word+0x40>)
 800473c:	691b      	ldr	r3, [r3, #16]
 800473e:	4a06      	ldr	r2, [pc, #24]	; (8004758 <FLASH_Program_Word+0x40>)
 8004740:	f043 0301 	orr.w	r3, r3, #1
 8004744:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	683a      	ldr	r2, [r7, #0]
 800474a:	601a      	str	r2, [r3, #0]
}
 800474c:	bf00      	nop
 800474e:	370c      	adds	r7, #12
 8004750:	46bd      	mov	sp, r7
 8004752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004756:	4770      	bx	lr
 8004758:	40023c00 	.word	0x40023c00

0800475c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800475c:	b480      	push	{r7}
 800475e:	b083      	sub	sp, #12
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	460b      	mov	r3, r1
 8004766:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004768:	4b0d      	ldr	r3, [pc, #52]	; (80047a0 <FLASH_Program_HalfWord+0x44>)
 800476a:	691b      	ldr	r3, [r3, #16]
 800476c:	4a0c      	ldr	r2, [pc, #48]	; (80047a0 <FLASH_Program_HalfWord+0x44>)
 800476e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004772:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004774:	4b0a      	ldr	r3, [pc, #40]	; (80047a0 <FLASH_Program_HalfWord+0x44>)
 8004776:	691b      	ldr	r3, [r3, #16]
 8004778:	4a09      	ldr	r2, [pc, #36]	; (80047a0 <FLASH_Program_HalfWord+0x44>)
 800477a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800477e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004780:	4b07      	ldr	r3, [pc, #28]	; (80047a0 <FLASH_Program_HalfWord+0x44>)
 8004782:	691b      	ldr	r3, [r3, #16]
 8004784:	4a06      	ldr	r2, [pc, #24]	; (80047a0 <FLASH_Program_HalfWord+0x44>)
 8004786:	f043 0301 	orr.w	r3, r3, #1
 800478a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	887a      	ldrh	r2, [r7, #2]
 8004790:	801a      	strh	r2, [r3, #0]
}
 8004792:	bf00      	nop
 8004794:	370c      	adds	r7, #12
 8004796:	46bd      	mov	sp, r7
 8004798:	f85d 7b04 	ldr.w	r7, [sp], #4
 800479c:	4770      	bx	lr
 800479e:	bf00      	nop
 80047a0:	40023c00 	.word	0x40023c00

080047a4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80047a4:	b480      	push	{r7}
 80047a6:	b083      	sub	sp, #12
 80047a8:	af00      	add	r7, sp, #0
 80047aa:	6078      	str	r0, [r7, #4]
 80047ac:	460b      	mov	r3, r1
 80047ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80047b0:	4b0c      	ldr	r3, [pc, #48]	; (80047e4 <FLASH_Program_Byte+0x40>)
 80047b2:	691b      	ldr	r3, [r3, #16]
 80047b4:	4a0b      	ldr	r2, [pc, #44]	; (80047e4 <FLASH_Program_Byte+0x40>)
 80047b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80047ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80047bc:	4b09      	ldr	r3, [pc, #36]	; (80047e4 <FLASH_Program_Byte+0x40>)
 80047be:	4a09      	ldr	r2, [pc, #36]	; (80047e4 <FLASH_Program_Byte+0x40>)
 80047c0:	691b      	ldr	r3, [r3, #16]
 80047c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80047c4:	4b07      	ldr	r3, [pc, #28]	; (80047e4 <FLASH_Program_Byte+0x40>)
 80047c6:	691b      	ldr	r3, [r3, #16]
 80047c8:	4a06      	ldr	r2, [pc, #24]	; (80047e4 <FLASH_Program_Byte+0x40>)
 80047ca:	f043 0301 	orr.w	r3, r3, #1
 80047ce:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80047d0:	687b      	ldr	r3, [r7, #4]
 80047d2:	78fa      	ldrb	r2, [r7, #3]
 80047d4:	701a      	strb	r2, [r3, #0]
}
 80047d6:	bf00      	nop
 80047d8:	370c      	adds	r7, #12
 80047da:	46bd      	mov	sp, r7
 80047dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047e0:	4770      	bx	lr
 80047e2:	bf00      	nop
 80047e4:	40023c00 	.word	0x40023c00

080047e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80047e8:	b480      	push	{r7}
 80047ea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80047ec:	4b27      	ldr	r3, [pc, #156]	; (800488c <FLASH_SetErrorCode+0xa4>)
 80047ee:	68db      	ldr	r3, [r3, #12]
 80047f0:	f003 0310 	and.w	r3, r3, #16
 80047f4:	2b00      	cmp	r3, #0
 80047f6:	d008      	beq.n	800480a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80047f8:	4b25      	ldr	r3, [pc, #148]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 80047fa:	69db      	ldr	r3, [r3, #28]
 80047fc:	f043 0310 	orr.w	r3, r3, #16
 8004800:	4a23      	ldr	r2, [pc, #140]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 8004802:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004804:	4b21      	ldr	r3, [pc, #132]	; (800488c <FLASH_SetErrorCode+0xa4>)
 8004806:	2210      	movs	r2, #16
 8004808:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800480a:	4b20      	ldr	r3, [pc, #128]	; (800488c <FLASH_SetErrorCode+0xa4>)
 800480c:	68db      	ldr	r3, [r3, #12]
 800480e:	f003 0320 	and.w	r3, r3, #32
 8004812:	2b00      	cmp	r3, #0
 8004814:	d008      	beq.n	8004828 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004816:	4b1e      	ldr	r3, [pc, #120]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 8004818:	69db      	ldr	r3, [r3, #28]
 800481a:	f043 0308 	orr.w	r3, r3, #8
 800481e:	4a1c      	ldr	r2, [pc, #112]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 8004820:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004822:	4b1a      	ldr	r3, [pc, #104]	; (800488c <FLASH_SetErrorCode+0xa4>)
 8004824:	2220      	movs	r2, #32
 8004826:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004828:	4b18      	ldr	r3, [pc, #96]	; (800488c <FLASH_SetErrorCode+0xa4>)
 800482a:	68db      	ldr	r3, [r3, #12]
 800482c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004830:	2b00      	cmp	r3, #0
 8004832:	d008      	beq.n	8004846 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004834:	4b16      	ldr	r3, [pc, #88]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 8004836:	69db      	ldr	r3, [r3, #28]
 8004838:	f043 0304 	orr.w	r3, r3, #4
 800483c:	4a14      	ldr	r2, [pc, #80]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 800483e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004840:	4b12      	ldr	r3, [pc, #72]	; (800488c <FLASH_SetErrorCode+0xa4>)
 8004842:	2240      	movs	r2, #64	; 0x40
 8004844:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004846:	4b11      	ldr	r3, [pc, #68]	; (800488c <FLASH_SetErrorCode+0xa4>)
 8004848:	68db      	ldr	r3, [r3, #12]
 800484a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800484e:	2b00      	cmp	r3, #0
 8004850:	d008      	beq.n	8004864 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004852:	4b0f      	ldr	r3, [pc, #60]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 8004854:	69db      	ldr	r3, [r3, #28]
 8004856:	f043 0302 	orr.w	r3, r3, #2
 800485a:	4a0d      	ldr	r2, [pc, #52]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 800485c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800485e:	4b0b      	ldr	r3, [pc, #44]	; (800488c <FLASH_SetErrorCode+0xa4>)
 8004860:	2280      	movs	r2, #128	; 0x80
 8004862:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004864:	4b09      	ldr	r3, [pc, #36]	; (800488c <FLASH_SetErrorCode+0xa4>)
 8004866:	68db      	ldr	r3, [r3, #12]
 8004868:	f003 0302 	and.w	r3, r3, #2
 800486c:	2b00      	cmp	r3, #0
 800486e:	d008      	beq.n	8004882 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004870:	4b07      	ldr	r3, [pc, #28]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 8004872:	69db      	ldr	r3, [r3, #28]
 8004874:	f043 0320 	orr.w	r3, r3, #32
 8004878:	4a05      	ldr	r2, [pc, #20]	; (8004890 <FLASH_SetErrorCode+0xa8>)
 800487a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 800487c:	4b03      	ldr	r3, [pc, #12]	; (800488c <FLASH_SetErrorCode+0xa4>)
 800487e:	2202      	movs	r2, #2
 8004880:	60da      	str	r2, [r3, #12]
  }
}
 8004882:	bf00      	nop
 8004884:	46bd      	mov	sp, r7
 8004886:	f85d 7b04 	ldr.w	r7, [sp], #4
 800488a:	4770      	bx	lr
 800488c:	40023c00 	.word	0x40023c00
 8004890:	200033dc 	.word	0x200033dc

08004894 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	6078      	str	r0, [r7, #4]
 800489c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 800489e:	2301      	movs	r3, #1
 80048a0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80048a2:	2300      	movs	r3, #0
 80048a4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80048a6:	4b31      	ldr	r3, [pc, #196]	; (800496c <HAL_FLASHEx_Erase+0xd8>)
 80048a8:	7e1b      	ldrb	r3, [r3, #24]
 80048aa:	2b01      	cmp	r3, #1
 80048ac:	d101      	bne.n	80048b2 <HAL_FLASHEx_Erase+0x1e>
 80048ae:	2302      	movs	r3, #2
 80048b0:	e058      	b.n	8004964 <HAL_FLASHEx_Erase+0xd0>
 80048b2:	4b2e      	ldr	r3, [pc, #184]	; (800496c <HAL_FLASHEx_Erase+0xd8>)
 80048b4:	2201      	movs	r2, #1
 80048b6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048b8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048bc:	f7ff feba 	bl	8004634 <FLASH_WaitForLastOperation>
 80048c0:	4603      	mov	r3, r0
 80048c2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80048c4:	7bfb      	ldrb	r3, [r7, #15]
 80048c6:	2b00      	cmp	r3, #0
 80048c8:	d148      	bne.n	800495c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80048ca:	683b      	ldr	r3, [r7, #0]
 80048cc:	f04f 32ff 	mov.w	r2, #4294967295
 80048d0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	2b01      	cmp	r3, #1
 80048d8:	d115      	bne.n	8004906 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 80048da:	687b      	ldr	r3, [r7, #4]
 80048dc:	691b      	ldr	r3, [r3, #16]
 80048de:	b2da      	uxtb	r2, r3
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	685b      	ldr	r3, [r3, #4]
 80048e4:	4619      	mov	r1, r3
 80048e6:	4610      	mov	r0, r2
 80048e8:	f000 f844 	bl	8004974 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048ec:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048f0:	f7ff fea0 	bl	8004634 <FLASH_WaitForLastOperation>
 80048f4:	4603      	mov	r3, r0
 80048f6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 80048f8:	4b1d      	ldr	r3, [pc, #116]	; (8004970 <HAL_FLASHEx_Erase+0xdc>)
 80048fa:	691b      	ldr	r3, [r3, #16]
 80048fc:	4a1c      	ldr	r2, [pc, #112]	; (8004970 <HAL_FLASHEx_Erase+0xdc>)
 80048fe:	f023 0304 	bic.w	r3, r3, #4
 8004902:	6113      	str	r3, [r2, #16]
 8004904:	e028      	b.n	8004958 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004906:	687b      	ldr	r3, [r7, #4]
 8004908:	689b      	ldr	r3, [r3, #8]
 800490a:	60bb      	str	r3, [r7, #8]
 800490c:	e01c      	b.n	8004948 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	691b      	ldr	r3, [r3, #16]
 8004912:	b2db      	uxtb	r3, r3
 8004914:	4619      	mov	r1, r3
 8004916:	68b8      	ldr	r0, [r7, #8]
 8004918:	f000 f850 	bl	80049bc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800491c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004920:	f7ff fe88 	bl	8004634 <FLASH_WaitForLastOperation>
 8004924:	4603      	mov	r3, r0
 8004926:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004928:	4b11      	ldr	r3, [pc, #68]	; (8004970 <HAL_FLASHEx_Erase+0xdc>)
 800492a:	691b      	ldr	r3, [r3, #16]
 800492c:	4a10      	ldr	r2, [pc, #64]	; (8004970 <HAL_FLASHEx_Erase+0xdc>)
 800492e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004932:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004934:	7bfb      	ldrb	r3, [r7, #15]
 8004936:	2b00      	cmp	r3, #0
 8004938:	d003      	beq.n	8004942 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 800493a:	683b      	ldr	r3, [r7, #0]
 800493c:	68ba      	ldr	r2, [r7, #8]
 800493e:	601a      	str	r2, [r3, #0]
          break;
 8004940:	e00a      	b.n	8004958 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004942:	68bb      	ldr	r3, [r7, #8]
 8004944:	3301      	adds	r3, #1
 8004946:	60bb      	str	r3, [r7, #8]
 8004948:	687b      	ldr	r3, [r7, #4]
 800494a:	68da      	ldr	r2, [r3, #12]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	689b      	ldr	r3, [r3, #8]
 8004950:	4413      	add	r3, r2
 8004952:	68ba      	ldr	r2, [r7, #8]
 8004954:	429a      	cmp	r2, r3
 8004956:	d3da      	bcc.n	800490e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004958:	f000 f878 	bl	8004a4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800495c:	4b03      	ldr	r3, [pc, #12]	; (800496c <HAL_FLASHEx_Erase+0xd8>)
 800495e:	2200      	movs	r2, #0
 8004960:	761a      	strb	r2, [r3, #24]

  return status;
 8004962:	7bfb      	ldrb	r3, [r7, #15]
}
 8004964:	4618      	mov	r0, r3
 8004966:	3710      	adds	r7, #16
 8004968:	46bd      	mov	sp, r7
 800496a:	bd80      	pop	{r7, pc}
 800496c:	200033dc 	.word	0x200033dc
 8004970:	40023c00 	.word	0x40023c00

08004974 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004974:	b480      	push	{r7}
 8004976:	b083      	sub	sp, #12
 8004978:	af00      	add	r7, sp, #0
 800497a:	4603      	mov	r3, r0
 800497c:	6039      	str	r1, [r7, #0]
 800497e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004980:	4b0d      	ldr	r3, [pc, #52]	; (80049b8 <FLASH_MassErase+0x44>)
 8004982:	691b      	ldr	r3, [r3, #16]
 8004984:	4a0c      	ldr	r2, [pc, #48]	; (80049b8 <FLASH_MassErase+0x44>)
 8004986:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800498a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 800498c:	4b0a      	ldr	r3, [pc, #40]	; (80049b8 <FLASH_MassErase+0x44>)
 800498e:	691b      	ldr	r3, [r3, #16]
 8004990:	4a09      	ldr	r2, [pc, #36]	; (80049b8 <FLASH_MassErase+0x44>)
 8004992:	f043 0304 	orr.w	r3, r3, #4
 8004996:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004998:	4b07      	ldr	r3, [pc, #28]	; (80049b8 <FLASH_MassErase+0x44>)
 800499a:	691a      	ldr	r2, [r3, #16]
 800499c:	79fb      	ldrb	r3, [r7, #7]
 800499e:	021b      	lsls	r3, r3, #8
 80049a0:	4313      	orrs	r3, r2
 80049a2:	4a05      	ldr	r2, [pc, #20]	; (80049b8 <FLASH_MassErase+0x44>)
 80049a4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80049a8:	6113      	str	r3, [r2, #16]
}
 80049aa:	bf00      	nop
 80049ac:	370c      	adds	r7, #12
 80049ae:	46bd      	mov	sp, r7
 80049b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049b4:	4770      	bx	lr
 80049b6:	bf00      	nop
 80049b8:	40023c00 	.word	0x40023c00

080049bc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80049bc:	b480      	push	{r7}
 80049be:	b085      	sub	sp, #20
 80049c0:	af00      	add	r7, sp, #0
 80049c2:	6078      	str	r0, [r7, #4]
 80049c4:	460b      	mov	r3, r1
 80049c6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80049c8:	2300      	movs	r3, #0
 80049ca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80049cc:	78fb      	ldrb	r3, [r7, #3]
 80049ce:	2b00      	cmp	r3, #0
 80049d0:	d102      	bne.n	80049d8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80049d2:	2300      	movs	r3, #0
 80049d4:	60fb      	str	r3, [r7, #12]
 80049d6:	e010      	b.n	80049fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 80049d8:	78fb      	ldrb	r3, [r7, #3]
 80049da:	2b01      	cmp	r3, #1
 80049dc:	d103      	bne.n	80049e6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 80049de:	f44f 7380 	mov.w	r3, #256	; 0x100
 80049e2:	60fb      	str	r3, [r7, #12]
 80049e4:	e009      	b.n	80049fa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 80049e6:	78fb      	ldrb	r3, [r7, #3]
 80049e8:	2b02      	cmp	r3, #2
 80049ea:	d103      	bne.n	80049f4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 80049ec:	f44f 7300 	mov.w	r3, #512	; 0x200
 80049f0:	60fb      	str	r3, [r7, #12]
 80049f2:	e002      	b.n	80049fa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 80049f4:	f44f 7340 	mov.w	r3, #768	; 0x300
 80049f8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80049fa:	4b13      	ldr	r3, [pc, #76]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 80049fc:	691b      	ldr	r3, [r3, #16]
 80049fe:	4a12      	ldr	r2, [pc, #72]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 8004a00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004a06:	4b10      	ldr	r3, [pc, #64]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 8004a08:	691a      	ldr	r2, [r3, #16]
 8004a0a:	490f      	ldr	r1, [pc, #60]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	4313      	orrs	r3, r2
 8004a10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004a12:	4b0d      	ldr	r3, [pc, #52]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 8004a14:	691b      	ldr	r3, [r3, #16]
 8004a16:	4a0c      	ldr	r2, [pc, #48]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 8004a18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004a1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004a1e:	4b0a      	ldr	r3, [pc, #40]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	00db      	lsls	r3, r3, #3
 8004a26:	4313      	orrs	r3, r2
 8004a28:	4a07      	ldr	r2, [pc, #28]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 8004a2a:	f043 0302 	orr.w	r3, r3, #2
 8004a2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004a30:	4b05      	ldr	r3, [pc, #20]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	4a04      	ldr	r2, [pc, #16]	; (8004a48 <FLASH_Erase_Sector+0x8c>)
 8004a36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004a3a:	6113      	str	r3, [r2, #16]
}
 8004a3c:	bf00      	nop
 8004a3e:	3714      	adds	r7, #20
 8004a40:	46bd      	mov	sp, r7
 8004a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a46:	4770      	bx	lr
 8004a48:	40023c00 	.word	0x40023c00

08004a4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004a4c:	b480      	push	{r7}
 8004a4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004a50:	4b20      	ldr	r3, [pc, #128]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d017      	beq.n	8004a8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004a5c:	4b1d      	ldr	r3, [pc, #116]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	4a1c      	ldr	r2, [pc, #112]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004a66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004a68:	4b1a      	ldr	r3, [pc, #104]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a6a:	681b      	ldr	r3, [r3, #0]
 8004a6c:	4a19      	ldr	r2, [pc, #100]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004a72:	6013      	str	r3, [r2, #0]
 8004a74:	4b17      	ldr	r3, [pc, #92]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	4a16      	ldr	r2, [pc, #88]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004a7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004a80:	4b14      	ldr	r3, [pc, #80]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	4a13      	ldr	r2, [pc, #76]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a8a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004a8c:	4b11      	ldr	r3, [pc, #68]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a8e:	681b      	ldr	r3, [r3, #0]
 8004a90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004a94:	2b00      	cmp	r3, #0
 8004a96:	d017      	beq.n	8004ac8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004a98:	4b0e      	ldr	r3, [pc, #56]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a9a:	681b      	ldr	r3, [r3, #0]
 8004a9c:	4a0d      	ldr	r2, [pc, #52]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004a9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004aa2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004aa4:	4b0b      	ldr	r3, [pc, #44]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	4a0a      	ldr	r2, [pc, #40]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004aaa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004aae:	6013      	str	r3, [r2, #0]
 8004ab0:	4b08      	ldr	r3, [pc, #32]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004ab2:	681b      	ldr	r3, [r3, #0]
 8004ab4:	4a07      	ldr	r2, [pc, #28]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004ab6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004aba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004abc:	4b05      	ldr	r3, [pc, #20]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	4a04      	ldr	r2, [pc, #16]	; (8004ad4 <FLASH_FlushCaches+0x88>)
 8004ac2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004ac6:	6013      	str	r3, [r2, #0]
  }
}
 8004ac8:	bf00      	nop
 8004aca:	46bd      	mov	sp, r7
 8004acc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ad0:	4770      	bx	lr
 8004ad2:	bf00      	nop
 8004ad4:	40023c00 	.word	0x40023c00

08004ad8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004ad8:	b480      	push	{r7}
 8004ada:	b089      	sub	sp, #36	; 0x24
 8004adc:	af00      	add	r7, sp, #0
 8004ade:	6078      	str	r0, [r7, #4]
 8004ae0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004ae2:	2300      	movs	r3, #0
 8004ae4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004ae6:	2300      	movs	r3, #0
 8004ae8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004aea:	2300      	movs	r3, #0
 8004aec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004aee:	2300      	movs	r3, #0
 8004af0:	61fb      	str	r3, [r7, #28]
 8004af2:	e16b      	b.n	8004dcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004af4:	2201      	movs	r2, #1
 8004af6:	69fb      	ldr	r3, [r7, #28]
 8004af8:	fa02 f303 	lsl.w	r3, r2, r3
 8004afc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004afe:	683b      	ldr	r3, [r7, #0]
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	697a      	ldr	r2, [r7, #20]
 8004b04:	4013      	ands	r3, r2
 8004b06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004b08:	693a      	ldr	r2, [r7, #16]
 8004b0a:	697b      	ldr	r3, [r7, #20]
 8004b0c:	429a      	cmp	r2, r3
 8004b0e:	f040 815a 	bne.w	8004dc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b12:	683b      	ldr	r3, [r7, #0]
 8004b14:	685b      	ldr	r3, [r3, #4]
 8004b16:	f003 0303 	and.w	r3, r3, #3
 8004b1a:	2b01      	cmp	r3, #1
 8004b1c:	d005      	beq.n	8004b2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004b1e:	683b      	ldr	r3, [r7, #0]
 8004b20:	685b      	ldr	r3, [r3, #4]
 8004b22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004b26:	2b02      	cmp	r3, #2
 8004b28:	d130      	bne.n	8004b8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	689b      	ldr	r3, [r3, #8]
 8004b2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004b30:	69fb      	ldr	r3, [r7, #28]
 8004b32:	005b      	lsls	r3, r3, #1
 8004b34:	2203      	movs	r2, #3
 8004b36:	fa02 f303 	lsl.w	r3, r2, r3
 8004b3a:	43db      	mvns	r3, r3
 8004b3c:	69ba      	ldr	r2, [r7, #24]
 8004b3e:	4013      	ands	r3, r2
 8004b40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004b42:	683b      	ldr	r3, [r7, #0]
 8004b44:	68da      	ldr	r2, [r3, #12]
 8004b46:	69fb      	ldr	r3, [r7, #28]
 8004b48:	005b      	lsls	r3, r3, #1
 8004b4a:	fa02 f303 	lsl.w	r3, r2, r3
 8004b4e:	69ba      	ldr	r2, [r7, #24]
 8004b50:	4313      	orrs	r3, r2
 8004b52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	69ba      	ldr	r2, [r7, #24]
 8004b58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004b5a:	687b      	ldr	r3, [r7, #4]
 8004b5c:	685b      	ldr	r3, [r3, #4]
 8004b5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004b60:	2201      	movs	r2, #1
 8004b62:	69fb      	ldr	r3, [r7, #28]
 8004b64:	fa02 f303 	lsl.w	r3, r2, r3
 8004b68:	43db      	mvns	r3, r3
 8004b6a:	69ba      	ldr	r2, [r7, #24]
 8004b6c:	4013      	ands	r3, r2
 8004b6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004b70:	683b      	ldr	r3, [r7, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	091b      	lsrs	r3, r3, #4
 8004b76:	f003 0201 	and.w	r2, r3, #1
 8004b7a:	69fb      	ldr	r3, [r7, #28]
 8004b7c:	fa02 f303 	lsl.w	r3, r2, r3
 8004b80:	69ba      	ldr	r2, [r7, #24]
 8004b82:	4313      	orrs	r3, r2
 8004b84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	69ba      	ldr	r2, [r7, #24]
 8004b8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004b8c:	683b      	ldr	r3, [r7, #0]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	f003 0303 	and.w	r3, r3, #3
 8004b94:	2b03      	cmp	r3, #3
 8004b96:	d017      	beq.n	8004bc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	68db      	ldr	r3, [r3, #12]
 8004b9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004b9e:	69fb      	ldr	r3, [r7, #28]
 8004ba0:	005b      	lsls	r3, r3, #1
 8004ba2:	2203      	movs	r2, #3
 8004ba4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ba8:	43db      	mvns	r3, r3
 8004baa:	69ba      	ldr	r2, [r7, #24]
 8004bac:	4013      	ands	r3, r2
 8004bae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004bb0:	683b      	ldr	r3, [r7, #0]
 8004bb2:	689a      	ldr	r2, [r3, #8]
 8004bb4:	69fb      	ldr	r3, [r7, #28]
 8004bb6:	005b      	lsls	r3, r3, #1
 8004bb8:	fa02 f303 	lsl.w	r3, r2, r3
 8004bbc:	69ba      	ldr	r2, [r7, #24]
 8004bbe:	4313      	orrs	r3, r2
 8004bc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004bc2:	687b      	ldr	r3, [r7, #4]
 8004bc4:	69ba      	ldr	r2, [r7, #24]
 8004bc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004bc8:	683b      	ldr	r3, [r7, #0]
 8004bca:	685b      	ldr	r3, [r3, #4]
 8004bcc:	f003 0303 	and.w	r3, r3, #3
 8004bd0:	2b02      	cmp	r3, #2
 8004bd2:	d123      	bne.n	8004c1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004bd4:	69fb      	ldr	r3, [r7, #28]
 8004bd6:	08da      	lsrs	r2, r3, #3
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	3208      	adds	r2, #8
 8004bdc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004be0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004be2:	69fb      	ldr	r3, [r7, #28]
 8004be4:	f003 0307 	and.w	r3, r3, #7
 8004be8:	009b      	lsls	r3, r3, #2
 8004bea:	220f      	movs	r2, #15
 8004bec:	fa02 f303 	lsl.w	r3, r2, r3
 8004bf0:	43db      	mvns	r3, r3
 8004bf2:	69ba      	ldr	r2, [r7, #24]
 8004bf4:	4013      	ands	r3, r2
 8004bf6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004bf8:	683b      	ldr	r3, [r7, #0]
 8004bfa:	691a      	ldr	r2, [r3, #16]
 8004bfc:	69fb      	ldr	r3, [r7, #28]
 8004bfe:	f003 0307 	and.w	r3, r3, #7
 8004c02:	009b      	lsls	r3, r3, #2
 8004c04:	fa02 f303 	lsl.w	r3, r2, r3
 8004c08:	69ba      	ldr	r2, [r7, #24]
 8004c0a:	4313      	orrs	r3, r2
 8004c0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004c0e:	69fb      	ldr	r3, [r7, #28]
 8004c10:	08da      	lsrs	r2, r3, #3
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	3208      	adds	r2, #8
 8004c16:	69b9      	ldr	r1, [r7, #24]
 8004c18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004c1c:	687b      	ldr	r3, [r7, #4]
 8004c1e:	681b      	ldr	r3, [r3, #0]
 8004c20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004c22:	69fb      	ldr	r3, [r7, #28]
 8004c24:	005b      	lsls	r3, r3, #1
 8004c26:	2203      	movs	r2, #3
 8004c28:	fa02 f303 	lsl.w	r3, r2, r3
 8004c2c:	43db      	mvns	r3, r3
 8004c2e:	69ba      	ldr	r2, [r7, #24]
 8004c30:	4013      	ands	r3, r2
 8004c32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004c34:	683b      	ldr	r3, [r7, #0]
 8004c36:	685b      	ldr	r3, [r3, #4]
 8004c38:	f003 0203 	and.w	r2, r3, #3
 8004c3c:	69fb      	ldr	r3, [r7, #28]
 8004c3e:	005b      	lsls	r3, r3, #1
 8004c40:	fa02 f303 	lsl.w	r3, r2, r3
 8004c44:	69ba      	ldr	r2, [r7, #24]
 8004c46:	4313      	orrs	r3, r2
 8004c48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	69ba      	ldr	r2, [r7, #24]
 8004c4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004c50:	683b      	ldr	r3, [r7, #0]
 8004c52:	685b      	ldr	r3, [r3, #4]
 8004c54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80b4 	beq.w	8004dc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004c5e:	2300      	movs	r3, #0
 8004c60:	60fb      	str	r3, [r7, #12]
 8004c62:	4b60      	ldr	r3, [pc, #384]	; (8004de4 <HAL_GPIO_Init+0x30c>)
 8004c64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c66:	4a5f      	ldr	r2, [pc, #380]	; (8004de4 <HAL_GPIO_Init+0x30c>)
 8004c68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004c6c:	6453      	str	r3, [r2, #68]	; 0x44
 8004c6e:	4b5d      	ldr	r3, [pc, #372]	; (8004de4 <HAL_GPIO_Init+0x30c>)
 8004c70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004c72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004c76:	60fb      	str	r3, [r7, #12]
 8004c78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004c7a:	4a5b      	ldr	r2, [pc, #364]	; (8004de8 <HAL_GPIO_Init+0x310>)
 8004c7c:	69fb      	ldr	r3, [r7, #28]
 8004c7e:	089b      	lsrs	r3, r3, #2
 8004c80:	3302      	adds	r3, #2
 8004c82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004c86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004c88:	69fb      	ldr	r3, [r7, #28]
 8004c8a:	f003 0303 	and.w	r3, r3, #3
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	220f      	movs	r2, #15
 8004c92:	fa02 f303 	lsl.w	r3, r2, r3
 8004c96:	43db      	mvns	r3, r3
 8004c98:	69ba      	ldr	r2, [r7, #24]
 8004c9a:	4013      	ands	r3, r2
 8004c9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	4a52      	ldr	r2, [pc, #328]	; (8004dec <HAL_GPIO_Init+0x314>)
 8004ca2:	4293      	cmp	r3, r2
 8004ca4:	d02b      	beq.n	8004cfe <HAL_GPIO_Init+0x226>
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	4a51      	ldr	r2, [pc, #324]	; (8004df0 <HAL_GPIO_Init+0x318>)
 8004caa:	4293      	cmp	r3, r2
 8004cac:	d025      	beq.n	8004cfa <HAL_GPIO_Init+0x222>
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	4a50      	ldr	r2, [pc, #320]	; (8004df4 <HAL_GPIO_Init+0x31c>)
 8004cb2:	4293      	cmp	r3, r2
 8004cb4:	d01f      	beq.n	8004cf6 <HAL_GPIO_Init+0x21e>
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	4a4f      	ldr	r2, [pc, #316]	; (8004df8 <HAL_GPIO_Init+0x320>)
 8004cba:	4293      	cmp	r3, r2
 8004cbc:	d019      	beq.n	8004cf2 <HAL_GPIO_Init+0x21a>
 8004cbe:	687b      	ldr	r3, [r7, #4]
 8004cc0:	4a4e      	ldr	r2, [pc, #312]	; (8004dfc <HAL_GPIO_Init+0x324>)
 8004cc2:	4293      	cmp	r3, r2
 8004cc4:	d013      	beq.n	8004cee <HAL_GPIO_Init+0x216>
 8004cc6:	687b      	ldr	r3, [r7, #4]
 8004cc8:	4a4d      	ldr	r2, [pc, #308]	; (8004e00 <HAL_GPIO_Init+0x328>)
 8004cca:	4293      	cmp	r3, r2
 8004ccc:	d00d      	beq.n	8004cea <HAL_GPIO_Init+0x212>
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	4a4c      	ldr	r2, [pc, #304]	; (8004e04 <HAL_GPIO_Init+0x32c>)
 8004cd2:	4293      	cmp	r3, r2
 8004cd4:	d007      	beq.n	8004ce6 <HAL_GPIO_Init+0x20e>
 8004cd6:	687b      	ldr	r3, [r7, #4]
 8004cd8:	4a4b      	ldr	r2, [pc, #300]	; (8004e08 <HAL_GPIO_Init+0x330>)
 8004cda:	4293      	cmp	r3, r2
 8004cdc:	d101      	bne.n	8004ce2 <HAL_GPIO_Init+0x20a>
 8004cde:	2307      	movs	r3, #7
 8004ce0:	e00e      	b.n	8004d00 <HAL_GPIO_Init+0x228>
 8004ce2:	2308      	movs	r3, #8
 8004ce4:	e00c      	b.n	8004d00 <HAL_GPIO_Init+0x228>
 8004ce6:	2306      	movs	r3, #6
 8004ce8:	e00a      	b.n	8004d00 <HAL_GPIO_Init+0x228>
 8004cea:	2305      	movs	r3, #5
 8004cec:	e008      	b.n	8004d00 <HAL_GPIO_Init+0x228>
 8004cee:	2304      	movs	r3, #4
 8004cf0:	e006      	b.n	8004d00 <HAL_GPIO_Init+0x228>
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e004      	b.n	8004d00 <HAL_GPIO_Init+0x228>
 8004cf6:	2302      	movs	r3, #2
 8004cf8:	e002      	b.n	8004d00 <HAL_GPIO_Init+0x228>
 8004cfa:	2301      	movs	r3, #1
 8004cfc:	e000      	b.n	8004d00 <HAL_GPIO_Init+0x228>
 8004cfe:	2300      	movs	r3, #0
 8004d00:	69fa      	ldr	r2, [r7, #28]
 8004d02:	f002 0203 	and.w	r2, r2, #3
 8004d06:	0092      	lsls	r2, r2, #2
 8004d08:	4093      	lsls	r3, r2
 8004d0a:	69ba      	ldr	r2, [r7, #24]
 8004d0c:	4313      	orrs	r3, r2
 8004d0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004d10:	4935      	ldr	r1, [pc, #212]	; (8004de8 <HAL_GPIO_Init+0x310>)
 8004d12:	69fb      	ldr	r3, [r7, #28]
 8004d14:	089b      	lsrs	r3, r3, #2
 8004d16:	3302      	adds	r3, #2
 8004d18:	69ba      	ldr	r2, [r7, #24]
 8004d1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004d1e:	4b3b      	ldr	r3, [pc, #236]	; (8004e0c <HAL_GPIO_Init+0x334>)
 8004d20:	689b      	ldr	r3, [r3, #8]
 8004d22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d24:	693b      	ldr	r3, [r7, #16]
 8004d26:	43db      	mvns	r3, r3
 8004d28:	69ba      	ldr	r2, [r7, #24]
 8004d2a:	4013      	ands	r3, r2
 8004d2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8004d2e:	683b      	ldr	r3, [r7, #0]
 8004d30:	685b      	ldr	r3, [r3, #4]
 8004d32:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004d36:	2b00      	cmp	r3, #0
 8004d38:	d003      	beq.n	8004d42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8004d3a:	69ba      	ldr	r2, [r7, #24]
 8004d3c:	693b      	ldr	r3, [r7, #16]
 8004d3e:	4313      	orrs	r3, r2
 8004d40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004d42:	4a32      	ldr	r2, [pc, #200]	; (8004e0c <HAL_GPIO_Init+0x334>)
 8004d44:	69bb      	ldr	r3, [r7, #24]
 8004d46:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004d48:	4b30      	ldr	r3, [pc, #192]	; (8004e0c <HAL_GPIO_Init+0x334>)
 8004d4a:	68db      	ldr	r3, [r3, #12]
 8004d4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d4e:	693b      	ldr	r3, [r7, #16]
 8004d50:	43db      	mvns	r3, r3
 8004d52:	69ba      	ldr	r2, [r7, #24]
 8004d54:	4013      	ands	r3, r2
 8004d56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8004d58:	683b      	ldr	r3, [r7, #0]
 8004d5a:	685b      	ldr	r3, [r3, #4]
 8004d5c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d003      	beq.n	8004d6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8004d64:	69ba      	ldr	r2, [r7, #24]
 8004d66:	693b      	ldr	r3, [r7, #16]
 8004d68:	4313      	orrs	r3, r2
 8004d6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004d6c:	4a27      	ldr	r2, [pc, #156]	; (8004e0c <HAL_GPIO_Init+0x334>)
 8004d6e:	69bb      	ldr	r3, [r7, #24]
 8004d70:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8004d72:	4b26      	ldr	r3, [pc, #152]	; (8004e0c <HAL_GPIO_Init+0x334>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004d78:	693b      	ldr	r3, [r7, #16]
 8004d7a:	43db      	mvns	r3, r3
 8004d7c:	69ba      	ldr	r2, [r7, #24]
 8004d7e:	4013      	ands	r3, r2
 8004d80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8004d82:	683b      	ldr	r3, [r7, #0]
 8004d84:	685b      	ldr	r3, [r3, #4]
 8004d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	d003      	beq.n	8004d96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8004d8e:	69ba      	ldr	r2, [r7, #24]
 8004d90:	693b      	ldr	r3, [r7, #16]
 8004d92:	4313      	orrs	r3, r2
 8004d94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004d96:	4a1d      	ldr	r2, [pc, #116]	; (8004e0c <HAL_GPIO_Init+0x334>)
 8004d98:	69bb      	ldr	r3, [r7, #24]
 8004d9a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004d9c:	4b1b      	ldr	r3, [pc, #108]	; (8004e0c <HAL_GPIO_Init+0x334>)
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	43db      	mvns	r3, r3
 8004da6:	69ba      	ldr	r2, [r7, #24]
 8004da8:	4013      	ands	r3, r2
 8004daa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8004dac:	683b      	ldr	r3, [r7, #0]
 8004dae:	685b      	ldr	r3, [r3, #4]
 8004db0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004db4:	2b00      	cmp	r3, #0
 8004db6:	d003      	beq.n	8004dc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8004db8:	69ba      	ldr	r2, [r7, #24]
 8004dba:	693b      	ldr	r3, [r7, #16]
 8004dbc:	4313      	orrs	r3, r2
 8004dbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004dc0:	4a12      	ldr	r2, [pc, #72]	; (8004e0c <HAL_GPIO_Init+0x334>)
 8004dc2:	69bb      	ldr	r3, [r7, #24]
 8004dc4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004dc6:	69fb      	ldr	r3, [r7, #28]
 8004dc8:	3301      	adds	r3, #1
 8004dca:	61fb      	str	r3, [r7, #28]
 8004dcc:	69fb      	ldr	r3, [r7, #28]
 8004dce:	2b0f      	cmp	r3, #15
 8004dd0:	f67f ae90 	bls.w	8004af4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004dd4:	bf00      	nop
 8004dd6:	bf00      	nop
 8004dd8:	3724      	adds	r7, #36	; 0x24
 8004dda:	46bd      	mov	sp, r7
 8004ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004de0:	4770      	bx	lr
 8004de2:	bf00      	nop
 8004de4:	40023800 	.word	0x40023800
 8004de8:	40013800 	.word	0x40013800
 8004dec:	40020000 	.word	0x40020000
 8004df0:	40020400 	.word	0x40020400
 8004df4:	40020800 	.word	0x40020800
 8004df8:	40020c00 	.word	0x40020c00
 8004dfc:	40021000 	.word	0x40021000
 8004e00:	40021400 	.word	0x40021400
 8004e04:	40021800 	.word	0x40021800
 8004e08:	40021c00 	.word	0x40021c00
 8004e0c:	40013c00 	.word	0x40013c00

08004e10 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e10:	b480      	push	{r7}
 8004e12:	b085      	sub	sp, #20
 8004e14:	af00      	add	r7, sp, #0
 8004e16:	6078      	str	r0, [r7, #4]
 8004e18:	460b      	mov	r3, r1
 8004e1a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	691a      	ldr	r2, [r3, #16]
 8004e20:	887b      	ldrh	r3, [r7, #2]
 8004e22:	4013      	ands	r3, r2
 8004e24:	2b00      	cmp	r3, #0
 8004e26:	d002      	beq.n	8004e2e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8004e28:	2301      	movs	r3, #1
 8004e2a:	73fb      	strb	r3, [r7, #15]
 8004e2c:	e001      	b.n	8004e32 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8004e2e:	2300      	movs	r3, #0
 8004e30:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8004e32:	7bfb      	ldrb	r3, [r7, #15]
}
 8004e34:	4618      	mov	r0, r3
 8004e36:	3714      	adds	r7, #20
 8004e38:	46bd      	mov	sp, r7
 8004e3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e3e:	4770      	bx	lr

08004e40 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004e40:	b480      	push	{r7}
 8004e42:	b083      	sub	sp, #12
 8004e44:	af00      	add	r7, sp, #0
 8004e46:	6078      	str	r0, [r7, #4]
 8004e48:	460b      	mov	r3, r1
 8004e4a:	807b      	strh	r3, [r7, #2]
 8004e4c:	4613      	mov	r3, r2
 8004e4e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004e50:	787b      	ldrb	r3, [r7, #1]
 8004e52:	2b00      	cmp	r3, #0
 8004e54:	d003      	beq.n	8004e5e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004e56:	887a      	ldrh	r2, [r7, #2]
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004e5c:	e003      	b.n	8004e66 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004e5e:	887b      	ldrh	r3, [r7, #2]
 8004e60:	041a      	lsls	r2, r3, #16
 8004e62:	687b      	ldr	r3, [r7, #4]
 8004e64:	619a      	str	r2, [r3, #24]
}
 8004e66:	bf00      	nop
 8004e68:	370c      	adds	r7, #12
 8004e6a:	46bd      	mov	sp, r7
 8004e6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e70:	4770      	bx	lr

08004e72 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8004e72:	b480      	push	{r7}
 8004e74:	b085      	sub	sp, #20
 8004e76:	af00      	add	r7, sp, #0
 8004e78:	6078      	str	r0, [r7, #4]
 8004e7a:	460b      	mov	r3, r1
 8004e7c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	695b      	ldr	r3, [r3, #20]
 8004e82:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8004e84:	887a      	ldrh	r2, [r7, #2]
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	4013      	ands	r3, r2
 8004e8a:	041a      	lsls	r2, r3, #16
 8004e8c:	68fb      	ldr	r3, [r7, #12]
 8004e8e:	43d9      	mvns	r1, r3
 8004e90:	887b      	ldrh	r3, [r7, #2]
 8004e92:	400b      	ands	r3, r1
 8004e94:	431a      	orrs	r2, r3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	619a      	str	r2, [r3, #24]
}
 8004e9a:	bf00      	nop
 8004e9c:	3714      	adds	r7, #20
 8004e9e:	46bd      	mov	sp, r7
 8004ea0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ea4:	4770      	bx	lr
	...

08004ea8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004ea8:	b580      	push	{r7, lr}
 8004eaa:	b086      	sub	sp, #24
 8004eac:	af00      	add	r7, sp, #0
 8004eae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004eb0:	687b      	ldr	r3, [r7, #4]
 8004eb2:	2b00      	cmp	r3, #0
 8004eb4:	d101      	bne.n	8004eba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004eb6:	2301      	movs	r3, #1
 8004eb8:	e267      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004eba:	687b      	ldr	r3, [r7, #4]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f003 0301 	and.w	r3, r3, #1
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d075      	beq.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004ec6:	4b88      	ldr	r3, [pc, #544]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004ec8:	689b      	ldr	r3, [r3, #8]
 8004eca:	f003 030c 	and.w	r3, r3, #12
 8004ece:	2b04      	cmp	r3, #4
 8004ed0:	d00c      	beq.n	8004eec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ed2:	4b85      	ldr	r3, [pc, #532]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004ed4:	689b      	ldr	r3, [r3, #8]
 8004ed6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004eda:	2b08      	cmp	r3, #8
 8004edc:	d112      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004ede:	4b82      	ldr	r3, [pc, #520]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004ee0:	685b      	ldr	r3, [r3, #4]
 8004ee2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004ee6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004eea:	d10b      	bne.n	8004f04 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004eec:	4b7e      	ldr	r3, [pc, #504]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ef4:	2b00      	cmp	r3, #0
 8004ef6:	d05b      	beq.n	8004fb0 <HAL_RCC_OscConfig+0x108>
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d157      	bne.n	8004fb0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004f00:	2301      	movs	r3, #1
 8004f02:	e242      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004f04:	687b      	ldr	r3, [r7, #4]
 8004f06:	685b      	ldr	r3, [r3, #4]
 8004f08:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004f0c:	d106      	bne.n	8004f1c <HAL_RCC_OscConfig+0x74>
 8004f0e:	4b76      	ldr	r3, [pc, #472]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f10:	681b      	ldr	r3, [r3, #0]
 8004f12:	4a75      	ldr	r2, [pc, #468]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f14:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f18:	6013      	str	r3, [r2, #0]
 8004f1a:	e01d      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	685b      	ldr	r3, [r3, #4]
 8004f20:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004f24:	d10c      	bne.n	8004f40 <HAL_RCC_OscConfig+0x98>
 8004f26:	4b70      	ldr	r3, [pc, #448]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	4a6f      	ldr	r2, [pc, #444]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f2c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004f30:	6013      	str	r3, [r2, #0]
 8004f32:	4b6d      	ldr	r3, [pc, #436]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f34:	681b      	ldr	r3, [r3, #0]
 8004f36:	4a6c      	ldr	r2, [pc, #432]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f38:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004f3c:	6013      	str	r3, [r2, #0]
 8004f3e:	e00b      	b.n	8004f58 <HAL_RCC_OscConfig+0xb0>
 8004f40:	4b69      	ldr	r3, [pc, #420]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f42:	681b      	ldr	r3, [r3, #0]
 8004f44:	4a68      	ldr	r2, [pc, #416]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f46:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004f4a:	6013      	str	r3, [r2, #0]
 8004f4c:	4b66      	ldr	r3, [pc, #408]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f4e:	681b      	ldr	r3, [r3, #0]
 8004f50:	4a65      	ldr	r2, [pc, #404]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f52:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004f56:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004f58:	687b      	ldr	r3, [r7, #4]
 8004f5a:	685b      	ldr	r3, [r3, #4]
 8004f5c:	2b00      	cmp	r3, #0
 8004f5e:	d013      	beq.n	8004f88 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f60:	f7ff f8e8 	bl	8004134 <HAL_GetTick>
 8004f64:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f66:	e008      	b.n	8004f7a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f68:	f7ff f8e4 	bl	8004134 <HAL_GetTick>
 8004f6c:	4602      	mov	r2, r0
 8004f6e:	693b      	ldr	r3, [r7, #16]
 8004f70:	1ad3      	subs	r3, r2, r3
 8004f72:	2b64      	cmp	r3, #100	; 0x64
 8004f74:	d901      	bls.n	8004f7a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004f76:	2303      	movs	r3, #3
 8004f78:	e207      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f7a:	4b5b      	ldr	r3, [pc, #364]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004f7c:	681b      	ldr	r3, [r3, #0]
 8004f7e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004f82:	2b00      	cmp	r3, #0
 8004f84:	d0f0      	beq.n	8004f68 <HAL_RCC_OscConfig+0xc0>
 8004f86:	e014      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004f88:	f7ff f8d4 	bl	8004134 <HAL_GetTick>
 8004f8c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004f8e:	e008      	b.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004f90:	f7ff f8d0 	bl	8004134 <HAL_GetTick>
 8004f94:	4602      	mov	r2, r0
 8004f96:	693b      	ldr	r3, [r7, #16]
 8004f98:	1ad3      	subs	r3, r2, r3
 8004f9a:	2b64      	cmp	r3, #100	; 0x64
 8004f9c:	d901      	bls.n	8004fa2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004f9e:	2303      	movs	r3, #3
 8004fa0:	e1f3      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004fa2:	4b51      	ldr	r3, [pc, #324]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fa4:	681b      	ldr	r3, [r3, #0]
 8004fa6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004faa:	2b00      	cmp	r3, #0
 8004fac:	d1f0      	bne.n	8004f90 <HAL_RCC_OscConfig+0xe8>
 8004fae:	e000      	b.n	8004fb2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004fb0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	f003 0302 	and.w	r3, r3, #2
 8004fba:	2b00      	cmp	r3, #0
 8004fbc:	d063      	beq.n	8005086 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fbe:	4b4a      	ldr	r3, [pc, #296]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fc0:	689b      	ldr	r3, [r3, #8]
 8004fc2:	f003 030c 	and.w	r3, r3, #12
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d00b      	beq.n	8004fe2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fca:	4b47      	ldr	r3, [pc, #284]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fcc:	689b      	ldr	r3, [r3, #8]
 8004fce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004fd2:	2b08      	cmp	r3, #8
 8004fd4:	d11c      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004fd6:	4b44      	ldr	r3, [pc, #272]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d116      	bne.n	8005010 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004fe2:	4b41      	ldr	r3, [pc, #260]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f003 0302 	and.w	r3, r3, #2
 8004fea:	2b00      	cmp	r3, #0
 8004fec:	d005      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
 8004fee:	687b      	ldr	r3, [r7, #4]
 8004ff0:	68db      	ldr	r3, [r3, #12]
 8004ff2:	2b01      	cmp	r3, #1
 8004ff4:	d001      	beq.n	8004ffa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004ff6:	2301      	movs	r3, #1
 8004ff8:	e1c7      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004ffa:	4b3b      	ldr	r3, [pc, #236]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8004ffc:	681b      	ldr	r3, [r3, #0]
 8004ffe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	691b      	ldr	r3, [r3, #16]
 8005006:	00db      	lsls	r3, r3, #3
 8005008:	4937      	ldr	r1, [pc, #220]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 800500a:	4313      	orrs	r3, r2
 800500c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800500e:	e03a      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	68db      	ldr	r3, [r3, #12]
 8005014:	2b00      	cmp	r3, #0
 8005016:	d020      	beq.n	800505a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005018:	4b34      	ldr	r3, [pc, #208]	; (80050ec <HAL_RCC_OscConfig+0x244>)
 800501a:	2201      	movs	r2, #1
 800501c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800501e:	f7ff f889 	bl	8004134 <HAL_GetTick>
 8005022:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005024:	e008      	b.n	8005038 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005026:	f7ff f885 	bl	8004134 <HAL_GetTick>
 800502a:	4602      	mov	r2, r0
 800502c:	693b      	ldr	r3, [r7, #16]
 800502e:	1ad3      	subs	r3, r2, r3
 8005030:	2b02      	cmp	r3, #2
 8005032:	d901      	bls.n	8005038 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005034:	2303      	movs	r3, #3
 8005036:	e1a8      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005038:	4b2b      	ldr	r3, [pc, #172]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	f003 0302 	and.w	r3, r3, #2
 8005040:	2b00      	cmp	r3, #0
 8005042:	d0f0      	beq.n	8005026 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005044:	4b28      	ldr	r3, [pc, #160]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8005046:	681b      	ldr	r3, [r3, #0]
 8005048:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	691b      	ldr	r3, [r3, #16]
 8005050:	00db      	lsls	r3, r3, #3
 8005052:	4925      	ldr	r1, [pc, #148]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 8005054:	4313      	orrs	r3, r2
 8005056:	600b      	str	r3, [r1, #0]
 8005058:	e015      	b.n	8005086 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800505a:	4b24      	ldr	r3, [pc, #144]	; (80050ec <HAL_RCC_OscConfig+0x244>)
 800505c:	2200      	movs	r2, #0
 800505e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005060:	f7ff f868 	bl	8004134 <HAL_GetTick>
 8005064:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005066:	e008      	b.n	800507a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005068:	f7ff f864 	bl	8004134 <HAL_GetTick>
 800506c:	4602      	mov	r2, r0
 800506e:	693b      	ldr	r3, [r7, #16]
 8005070:	1ad3      	subs	r3, r2, r3
 8005072:	2b02      	cmp	r3, #2
 8005074:	d901      	bls.n	800507a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005076:	2303      	movs	r3, #3
 8005078:	e187      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800507a:	4b1b      	ldr	r3, [pc, #108]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f003 0302 	and.w	r3, r3, #2
 8005082:	2b00      	cmp	r3, #0
 8005084:	d1f0      	bne.n	8005068 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005086:	687b      	ldr	r3, [r7, #4]
 8005088:	681b      	ldr	r3, [r3, #0]
 800508a:	f003 0308 	and.w	r3, r3, #8
 800508e:	2b00      	cmp	r3, #0
 8005090:	d036      	beq.n	8005100 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	695b      	ldr	r3, [r3, #20]
 8005096:	2b00      	cmp	r3, #0
 8005098:	d016      	beq.n	80050c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800509a:	4b15      	ldr	r3, [pc, #84]	; (80050f0 <HAL_RCC_OscConfig+0x248>)
 800509c:	2201      	movs	r2, #1
 800509e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050a0:	f7ff f848 	bl	8004134 <HAL_GetTick>
 80050a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050a6:	e008      	b.n	80050ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050a8:	f7ff f844 	bl	8004134 <HAL_GetTick>
 80050ac:	4602      	mov	r2, r0
 80050ae:	693b      	ldr	r3, [r7, #16]
 80050b0:	1ad3      	subs	r3, r2, r3
 80050b2:	2b02      	cmp	r3, #2
 80050b4:	d901      	bls.n	80050ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80050b6:	2303      	movs	r3, #3
 80050b8:	e167      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80050ba:	4b0b      	ldr	r3, [pc, #44]	; (80050e8 <HAL_RCC_OscConfig+0x240>)
 80050bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050be:	f003 0302 	and.w	r3, r3, #2
 80050c2:	2b00      	cmp	r3, #0
 80050c4:	d0f0      	beq.n	80050a8 <HAL_RCC_OscConfig+0x200>
 80050c6:	e01b      	b.n	8005100 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80050c8:	4b09      	ldr	r3, [pc, #36]	; (80050f0 <HAL_RCC_OscConfig+0x248>)
 80050ca:	2200      	movs	r2, #0
 80050cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80050ce:	f7ff f831 	bl	8004134 <HAL_GetTick>
 80050d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050d4:	e00e      	b.n	80050f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80050d6:	f7ff f82d 	bl	8004134 <HAL_GetTick>
 80050da:	4602      	mov	r2, r0
 80050dc:	693b      	ldr	r3, [r7, #16]
 80050de:	1ad3      	subs	r3, r2, r3
 80050e0:	2b02      	cmp	r3, #2
 80050e2:	d907      	bls.n	80050f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80050e4:	2303      	movs	r3, #3
 80050e6:	e150      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
 80050e8:	40023800 	.word	0x40023800
 80050ec:	42470000 	.word	0x42470000
 80050f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80050f4:	4b88      	ldr	r3, [pc, #544]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80050f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80050f8:	f003 0302 	and.w	r3, r3, #2
 80050fc:	2b00      	cmp	r3, #0
 80050fe:	d1ea      	bne.n	80050d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f003 0304 	and.w	r3, r3, #4
 8005108:	2b00      	cmp	r3, #0
 800510a:	f000 8097 	beq.w	800523c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800510e:	2300      	movs	r3, #0
 8005110:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005112:	4b81      	ldr	r3, [pc, #516]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005114:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005116:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800511a:	2b00      	cmp	r3, #0
 800511c:	d10f      	bne.n	800513e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800511e:	2300      	movs	r3, #0
 8005120:	60bb      	str	r3, [r7, #8]
 8005122:	4b7d      	ldr	r3, [pc, #500]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005124:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005126:	4a7c      	ldr	r2, [pc, #496]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005128:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800512c:	6413      	str	r3, [r2, #64]	; 0x40
 800512e:	4b7a      	ldr	r3, [pc, #488]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005130:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005132:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005136:	60bb      	str	r3, [r7, #8]
 8005138:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800513a:	2301      	movs	r3, #1
 800513c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800513e:	4b77      	ldr	r3, [pc, #476]	; (800531c <HAL_RCC_OscConfig+0x474>)
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005146:	2b00      	cmp	r3, #0
 8005148:	d118      	bne.n	800517c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800514a:	4b74      	ldr	r3, [pc, #464]	; (800531c <HAL_RCC_OscConfig+0x474>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	4a73      	ldr	r2, [pc, #460]	; (800531c <HAL_RCC_OscConfig+0x474>)
 8005150:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005154:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005156:	f7fe ffed 	bl	8004134 <HAL_GetTick>
 800515a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800515c:	e008      	b.n	8005170 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800515e:	f7fe ffe9 	bl	8004134 <HAL_GetTick>
 8005162:	4602      	mov	r2, r0
 8005164:	693b      	ldr	r3, [r7, #16]
 8005166:	1ad3      	subs	r3, r2, r3
 8005168:	2b02      	cmp	r3, #2
 800516a:	d901      	bls.n	8005170 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800516c:	2303      	movs	r3, #3
 800516e:	e10c      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005170:	4b6a      	ldr	r3, [pc, #424]	; (800531c <HAL_RCC_OscConfig+0x474>)
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005178:	2b00      	cmp	r3, #0
 800517a:	d0f0      	beq.n	800515e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800517c:	687b      	ldr	r3, [r7, #4]
 800517e:	689b      	ldr	r3, [r3, #8]
 8005180:	2b01      	cmp	r3, #1
 8005182:	d106      	bne.n	8005192 <HAL_RCC_OscConfig+0x2ea>
 8005184:	4b64      	ldr	r3, [pc, #400]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005186:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005188:	4a63      	ldr	r2, [pc, #396]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 800518a:	f043 0301 	orr.w	r3, r3, #1
 800518e:	6713      	str	r3, [r2, #112]	; 0x70
 8005190:	e01c      	b.n	80051cc <HAL_RCC_OscConfig+0x324>
 8005192:	687b      	ldr	r3, [r7, #4]
 8005194:	689b      	ldr	r3, [r3, #8]
 8005196:	2b05      	cmp	r3, #5
 8005198:	d10c      	bne.n	80051b4 <HAL_RCC_OscConfig+0x30c>
 800519a:	4b5f      	ldr	r3, [pc, #380]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 800519c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800519e:	4a5e      	ldr	r2, [pc, #376]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80051a0:	f043 0304 	orr.w	r3, r3, #4
 80051a4:	6713      	str	r3, [r2, #112]	; 0x70
 80051a6:	4b5c      	ldr	r3, [pc, #368]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80051a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051aa:	4a5b      	ldr	r2, [pc, #364]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80051ac:	f043 0301 	orr.w	r3, r3, #1
 80051b0:	6713      	str	r3, [r2, #112]	; 0x70
 80051b2:	e00b      	b.n	80051cc <HAL_RCC_OscConfig+0x324>
 80051b4:	4b58      	ldr	r3, [pc, #352]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80051b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051b8:	4a57      	ldr	r2, [pc, #348]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80051ba:	f023 0301 	bic.w	r3, r3, #1
 80051be:	6713      	str	r3, [r2, #112]	; 0x70
 80051c0:	4b55      	ldr	r3, [pc, #340]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80051c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051c4:	4a54      	ldr	r2, [pc, #336]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80051c6:	f023 0304 	bic.w	r3, r3, #4
 80051ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80051cc:	687b      	ldr	r3, [r7, #4]
 80051ce:	689b      	ldr	r3, [r3, #8]
 80051d0:	2b00      	cmp	r3, #0
 80051d2:	d015      	beq.n	8005200 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80051d4:	f7fe ffae 	bl	8004134 <HAL_GetTick>
 80051d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051da:	e00a      	b.n	80051f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80051dc:	f7fe ffaa 	bl	8004134 <HAL_GetTick>
 80051e0:	4602      	mov	r2, r0
 80051e2:	693b      	ldr	r3, [r7, #16]
 80051e4:	1ad3      	subs	r3, r2, r3
 80051e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80051ea:	4293      	cmp	r3, r2
 80051ec:	d901      	bls.n	80051f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80051ee:	2303      	movs	r3, #3
 80051f0:	e0cb      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80051f2:	4b49      	ldr	r3, [pc, #292]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80051f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80051f6:	f003 0302 	and.w	r3, r3, #2
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d0ee      	beq.n	80051dc <HAL_RCC_OscConfig+0x334>
 80051fe:	e014      	b.n	800522a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005200:	f7fe ff98 	bl	8004134 <HAL_GetTick>
 8005204:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005206:	e00a      	b.n	800521e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005208:	f7fe ff94 	bl	8004134 <HAL_GetTick>
 800520c:	4602      	mov	r2, r0
 800520e:	693b      	ldr	r3, [r7, #16]
 8005210:	1ad3      	subs	r3, r2, r3
 8005212:	f241 3288 	movw	r2, #5000	; 0x1388
 8005216:	4293      	cmp	r3, r2
 8005218:	d901      	bls.n	800521e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800521a:	2303      	movs	r3, #3
 800521c:	e0b5      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800521e:	4b3e      	ldr	r3, [pc, #248]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005220:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005222:	f003 0302 	and.w	r3, r3, #2
 8005226:	2b00      	cmp	r3, #0
 8005228:	d1ee      	bne.n	8005208 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800522a:	7dfb      	ldrb	r3, [r7, #23]
 800522c:	2b01      	cmp	r3, #1
 800522e:	d105      	bne.n	800523c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005230:	4b39      	ldr	r3, [pc, #228]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005232:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005234:	4a38      	ldr	r2, [pc, #224]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005236:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800523a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800523c:	687b      	ldr	r3, [r7, #4]
 800523e:	699b      	ldr	r3, [r3, #24]
 8005240:	2b00      	cmp	r3, #0
 8005242:	f000 80a1 	beq.w	8005388 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8005246:	4b34      	ldr	r3, [pc, #208]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005248:	689b      	ldr	r3, [r3, #8]
 800524a:	f003 030c 	and.w	r3, r3, #12
 800524e:	2b08      	cmp	r3, #8
 8005250:	d05c      	beq.n	800530c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005252:	687b      	ldr	r3, [r7, #4]
 8005254:	699b      	ldr	r3, [r3, #24]
 8005256:	2b02      	cmp	r3, #2
 8005258:	d141      	bne.n	80052de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800525a:	4b31      	ldr	r3, [pc, #196]	; (8005320 <HAL_RCC_OscConfig+0x478>)
 800525c:	2200      	movs	r2, #0
 800525e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005260:	f7fe ff68 	bl	8004134 <HAL_GetTick>
 8005264:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005266:	e008      	b.n	800527a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005268:	f7fe ff64 	bl	8004134 <HAL_GetTick>
 800526c:	4602      	mov	r2, r0
 800526e:	693b      	ldr	r3, [r7, #16]
 8005270:	1ad3      	subs	r3, r2, r3
 8005272:	2b02      	cmp	r3, #2
 8005274:	d901      	bls.n	800527a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005276:	2303      	movs	r3, #3
 8005278:	e087      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800527a:	4b27      	ldr	r3, [pc, #156]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 800527c:	681b      	ldr	r3, [r3, #0]
 800527e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005282:	2b00      	cmp	r3, #0
 8005284:	d1f0      	bne.n	8005268 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	69da      	ldr	r2, [r3, #28]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	6a1b      	ldr	r3, [r3, #32]
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005294:	019b      	lsls	r3, r3, #6
 8005296:	431a      	orrs	r2, r3
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800529c:	085b      	lsrs	r3, r3, #1
 800529e:	3b01      	subs	r3, #1
 80052a0:	041b      	lsls	r3, r3, #16
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80052a8:	061b      	lsls	r3, r3, #24
 80052aa:	491b      	ldr	r1, [pc, #108]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80052ac:	4313      	orrs	r3, r2
 80052ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80052b0:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <HAL_RCC_OscConfig+0x478>)
 80052b2:	2201      	movs	r2, #1
 80052b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b6:	f7fe ff3d 	bl	8004134 <HAL_GetTick>
 80052ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052bc:	e008      	b.n	80052d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052be:	f7fe ff39 	bl	8004134 <HAL_GetTick>
 80052c2:	4602      	mov	r2, r0
 80052c4:	693b      	ldr	r3, [r7, #16]
 80052c6:	1ad3      	subs	r3, r2, r3
 80052c8:	2b02      	cmp	r3, #2
 80052ca:	d901      	bls.n	80052d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80052cc:	2303      	movs	r3, #3
 80052ce:	e05c      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80052d0:	4b11      	ldr	r3, [pc, #68]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 80052d2:	681b      	ldr	r3, [r3, #0]
 80052d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80052d8:	2b00      	cmp	r3, #0
 80052da:	d0f0      	beq.n	80052be <HAL_RCC_OscConfig+0x416>
 80052dc:	e054      	b.n	8005388 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80052de:	4b10      	ldr	r3, [pc, #64]	; (8005320 <HAL_RCC_OscConfig+0x478>)
 80052e0:	2200      	movs	r2, #0
 80052e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e4:	f7fe ff26 	bl	8004134 <HAL_GetTick>
 80052e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052ea:	e008      	b.n	80052fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80052ec:	f7fe ff22 	bl	8004134 <HAL_GetTick>
 80052f0:	4602      	mov	r2, r0
 80052f2:	693b      	ldr	r3, [r7, #16]
 80052f4:	1ad3      	subs	r3, r2, r3
 80052f6:	2b02      	cmp	r3, #2
 80052f8:	d901      	bls.n	80052fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80052fa:	2303      	movs	r3, #3
 80052fc:	e045      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80052fe:	4b06      	ldr	r3, [pc, #24]	; (8005318 <HAL_RCC_OscConfig+0x470>)
 8005300:	681b      	ldr	r3, [r3, #0]
 8005302:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005306:	2b00      	cmp	r3, #0
 8005308:	d1f0      	bne.n	80052ec <HAL_RCC_OscConfig+0x444>
 800530a:	e03d      	b.n	8005388 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800530c:	687b      	ldr	r3, [r7, #4]
 800530e:	699b      	ldr	r3, [r3, #24]
 8005310:	2b01      	cmp	r3, #1
 8005312:	d107      	bne.n	8005324 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8005314:	2301      	movs	r3, #1
 8005316:	e038      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
 8005318:	40023800 	.word	0x40023800
 800531c:	40007000 	.word	0x40007000
 8005320:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8005324:	4b1b      	ldr	r3, [pc, #108]	; (8005394 <HAL_RCC_OscConfig+0x4ec>)
 8005326:	685b      	ldr	r3, [r3, #4]
 8005328:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	699b      	ldr	r3, [r3, #24]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d028      	beq.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005332:	68fb      	ldr	r3, [r7, #12]
 8005334:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800533c:	429a      	cmp	r2, r3
 800533e:	d121      	bne.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005340:	68fb      	ldr	r3, [r7, #12]
 8005342:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800534a:	429a      	cmp	r2, r3
 800534c:	d11a      	bne.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800534e:	68fa      	ldr	r2, [r7, #12]
 8005350:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005354:	4013      	ands	r3, r2
 8005356:	687a      	ldr	r2, [r7, #4]
 8005358:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800535a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800535c:	4293      	cmp	r3, r2
 800535e:	d111      	bne.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005360:	68fb      	ldr	r3, [r7, #12]
 8005362:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005366:	687b      	ldr	r3, [r7, #4]
 8005368:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800536a:	085b      	lsrs	r3, r3, #1
 800536c:	3b01      	subs	r3, #1
 800536e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005370:	429a      	cmp	r2, r3
 8005372:	d107      	bne.n	8005384 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005374:	68fb      	ldr	r3, [r7, #12]
 8005376:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800537e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005380:	429a      	cmp	r2, r3
 8005382:	d001      	beq.n	8005388 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8005384:	2301      	movs	r3, #1
 8005386:	e000      	b.n	800538a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005388:	2300      	movs	r3, #0
}
 800538a:	4618      	mov	r0, r3
 800538c:	3718      	adds	r7, #24
 800538e:	46bd      	mov	sp, r7
 8005390:	bd80      	pop	{r7, pc}
 8005392:	bf00      	nop
 8005394:	40023800 	.word	0x40023800

08005398 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005398:	b580      	push	{r7, lr}
 800539a:	b084      	sub	sp, #16
 800539c:	af00      	add	r7, sp, #0
 800539e:	6078      	str	r0, [r7, #4]
 80053a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80053a2:	687b      	ldr	r3, [r7, #4]
 80053a4:	2b00      	cmp	r3, #0
 80053a6:	d101      	bne.n	80053ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80053a8:	2301      	movs	r3, #1
 80053aa:	e0cc      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80053ac:	4b68      	ldr	r3, [pc, #416]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0307 	and.w	r3, r3, #7
 80053b4:	683a      	ldr	r2, [r7, #0]
 80053b6:	429a      	cmp	r2, r3
 80053b8:	d90c      	bls.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053ba:	4b65      	ldr	r3, [pc, #404]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053bc:	683a      	ldr	r2, [r7, #0]
 80053be:	b2d2      	uxtb	r2, r2
 80053c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053c2:	4b63      	ldr	r3, [pc, #396]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	f003 0307 	and.w	r3, r3, #7
 80053ca:	683a      	ldr	r2, [r7, #0]
 80053cc:	429a      	cmp	r2, r3
 80053ce:	d001      	beq.n	80053d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80053d0:	2301      	movs	r3, #1
 80053d2:	e0b8      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80053d4:	687b      	ldr	r3, [r7, #4]
 80053d6:	681b      	ldr	r3, [r3, #0]
 80053d8:	f003 0302 	and.w	r3, r3, #2
 80053dc:	2b00      	cmp	r3, #0
 80053de:	d020      	beq.n	8005422 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053e0:	687b      	ldr	r3, [r7, #4]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0304 	and.w	r3, r3, #4
 80053e8:	2b00      	cmp	r3, #0
 80053ea:	d005      	beq.n	80053f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80053ec:	4b59      	ldr	r3, [pc, #356]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053ee:	689b      	ldr	r3, [r3, #8]
 80053f0:	4a58      	ldr	r2, [pc, #352]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80053f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80053f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	f003 0308 	and.w	r3, r3, #8
 8005400:	2b00      	cmp	r3, #0
 8005402:	d005      	beq.n	8005410 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005404:	4b53      	ldr	r3, [pc, #332]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005406:	689b      	ldr	r3, [r3, #8]
 8005408:	4a52      	ldr	r2, [pc, #328]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800540e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005410:	4b50      	ldr	r3, [pc, #320]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005412:	689b      	ldr	r3, [r3, #8]
 8005414:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005418:	687b      	ldr	r3, [r7, #4]
 800541a:	689b      	ldr	r3, [r3, #8]
 800541c:	494d      	ldr	r1, [pc, #308]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800541e:	4313      	orrs	r3, r2
 8005420:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f003 0301 	and.w	r3, r3, #1
 800542a:	2b00      	cmp	r3, #0
 800542c:	d044      	beq.n	80054b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	685b      	ldr	r3, [r3, #4]
 8005432:	2b01      	cmp	r3, #1
 8005434:	d107      	bne.n	8005446 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005436:	4b47      	ldr	r3, [pc, #284]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800543e:	2b00      	cmp	r3, #0
 8005440:	d119      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005442:	2301      	movs	r3, #1
 8005444:	e07f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	685b      	ldr	r3, [r3, #4]
 800544a:	2b02      	cmp	r3, #2
 800544c:	d003      	beq.n	8005456 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800544e:	687b      	ldr	r3, [r7, #4]
 8005450:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005452:	2b03      	cmp	r3, #3
 8005454:	d107      	bne.n	8005466 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005456:	4b3f      	ldr	r3, [pc, #252]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005458:	681b      	ldr	r3, [r3, #0]
 800545a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800545e:	2b00      	cmp	r3, #0
 8005460:	d109      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005462:	2301      	movs	r3, #1
 8005464:	e06f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005466:	4b3b      	ldr	r3, [pc, #236]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005468:	681b      	ldr	r3, [r3, #0]
 800546a:	f003 0302 	and.w	r3, r3, #2
 800546e:	2b00      	cmp	r3, #0
 8005470:	d101      	bne.n	8005476 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005472:	2301      	movs	r3, #1
 8005474:	e067      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005476:	4b37      	ldr	r3, [pc, #220]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005478:	689b      	ldr	r3, [r3, #8]
 800547a:	f023 0203 	bic.w	r2, r3, #3
 800547e:	687b      	ldr	r3, [r7, #4]
 8005480:	685b      	ldr	r3, [r3, #4]
 8005482:	4934      	ldr	r1, [pc, #208]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005484:	4313      	orrs	r3, r2
 8005486:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005488:	f7fe fe54 	bl	8004134 <HAL_GetTick>
 800548c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800548e:	e00a      	b.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005490:	f7fe fe50 	bl	8004134 <HAL_GetTick>
 8005494:	4602      	mov	r2, r0
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	1ad3      	subs	r3, r2, r3
 800549a:	f241 3288 	movw	r2, #5000	; 0x1388
 800549e:	4293      	cmp	r3, r2
 80054a0:	d901      	bls.n	80054a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80054a2:	2303      	movs	r3, #3
 80054a4:	e04f      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80054a6:	4b2b      	ldr	r3, [pc, #172]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054a8:	689b      	ldr	r3, [r3, #8]
 80054aa:	f003 020c 	and.w	r2, r3, #12
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	685b      	ldr	r3, [r3, #4]
 80054b2:	009b      	lsls	r3, r3, #2
 80054b4:	429a      	cmp	r2, r3
 80054b6:	d1eb      	bne.n	8005490 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80054b8:	4b25      	ldr	r3, [pc, #148]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054ba:	681b      	ldr	r3, [r3, #0]
 80054bc:	f003 0307 	and.w	r3, r3, #7
 80054c0:	683a      	ldr	r2, [r7, #0]
 80054c2:	429a      	cmp	r2, r3
 80054c4:	d20c      	bcs.n	80054e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80054c6:	4b22      	ldr	r3, [pc, #136]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054c8:	683a      	ldr	r2, [r7, #0]
 80054ca:	b2d2      	uxtb	r2, r2
 80054cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80054ce:	4b20      	ldr	r3, [pc, #128]	; (8005550 <HAL_RCC_ClockConfig+0x1b8>)
 80054d0:	681b      	ldr	r3, [r3, #0]
 80054d2:	f003 0307 	and.w	r3, r3, #7
 80054d6:	683a      	ldr	r2, [r7, #0]
 80054d8:	429a      	cmp	r2, r3
 80054da:	d001      	beq.n	80054e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80054dc:	2301      	movs	r3, #1
 80054de:	e032      	b.n	8005546 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	681b      	ldr	r3, [r3, #0]
 80054e4:	f003 0304 	and.w	r3, r3, #4
 80054e8:	2b00      	cmp	r3, #0
 80054ea:	d008      	beq.n	80054fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80054ec:	4b19      	ldr	r3, [pc, #100]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054ee:	689b      	ldr	r3, [r3, #8]
 80054f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	68db      	ldr	r3, [r3, #12]
 80054f8:	4916      	ldr	r1, [pc, #88]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 80054fa:	4313      	orrs	r3, r2
 80054fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	681b      	ldr	r3, [r3, #0]
 8005502:	f003 0308 	and.w	r3, r3, #8
 8005506:	2b00      	cmp	r3, #0
 8005508:	d009      	beq.n	800551e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800550a:	4b12      	ldr	r3, [pc, #72]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800550c:	689b      	ldr	r3, [r3, #8]
 800550e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005512:	687b      	ldr	r3, [r7, #4]
 8005514:	691b      	ldr	r3, [r3, #16]
 8005516:	00db      	lsls	r3, r3, #3
 8005518:	490e      	ldr	r1, [pc, #56]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 800551a:	4313      	orrs	r3, r2
 800551c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800551e:	f000 f821 	bl	8005564 <HAL_RCC_GetSysClockFreq>
 8005522:	4602      	mov	r2, r0
 8005524:	4b0b      	ldr	r3, [pc, #44]	; (8005554 <HAL_RCC_ClockConfig+0x1bc>)
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	091b      	lsrs	r3, r3, #4
 800552a:	f003 030f 	and.w	r3, r3, #15
 800552e:	490a      	ldr	r1, [pc, #40]	; (8005558 <HAL_RCC_ClockConfig+0x1c0>)
 8005530:	5ccb      	ldrb	r3, [r1, r3]
 8005532:	fa22 f303 	lsr.w	r3, r2, r3
 8005536:	4a09      	ldr	r2, [pc, #36]	; (800555c <HAL_RCC_ClockConfig+0x1c4>)
 8005538:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800553a:	4b09      	ldr	r3, [pc, #36]	; (8005560 <HAL_RCC_ClockConfig+0x1c8>)
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	4618      	mov	r0, r3
 8005540:	f7fe fdb4 	bl	80040ac <HAL_InitTick>

  return HAL_OK;
 8005544:	2300      	movs	r3, #0
}
 8005546:	4618      	mov	r0, r3
 8005548:	3710      	adds	r7, #16
 800554a:	46bd      	mov	sp, r7
 800554c:	bd80      	pop	{r7, pc}
 800554e:	bf00      	nop
 8005550:	40023c00 	.word	0x40023c00
 8005554:	40023800 	.word	0x40023800
 8005558:	0800c138 	.word	0x0800c138
 800555c:	20000014 	.word	0x20000014
 8005560:	20000018 	.word	0x20000018

08005564 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005564:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005568:	b090      	sub	sp, #64	; 0x40
 800556a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800556c:	2300      	movs	r3, #0
 800556e:	637b      	str	r3, [r7, #52]	; 0x34
 8005570:	2300      	movs	r3, #0
 8005572:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005574:	2300      	movs	r3, #0
 8005576:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8005578:	2300      	movs	r3, #0
 800557a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800557c:	4b59      	ldr	r3, [pc, #356]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800557e:	689b      	ldr	r3, [r3, #8]
 8005580:	f003 030c 	and.w	r3, r3, #12
 8005584:	2b08      	cmp	r3, #8
 8005586:	d00d      	beq.n	80055a4 <HAL_RCC_GetSysClockFreq+0x40>
 8005588:	2b08      	cmp	r3, #8
 800558a:	f200 80a1 	bhi.w	80056d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800558e:	2b00      	cmp	r3, #0
 8005590:	d002      	beq.n	8005598 <HAL_RCC_GetSysClockFreq+0x34>
 8005592:	2b04      	cmp	r3, #4
 8005594:	d003      	beq.n	800559e <HAL_RCC_GetSysClockFreq+0x3a>
 8005596:	e09b      	b.n	80056d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005598:	4b53      	ldr	r3, [pc, #332]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800559a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800559c:	e09b      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800559e:	4b53      	ldr	r3, [pc, #332]	; (80056ec <HAL_RCC_GetSysClockFreq+0x188>)
 80055a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80055a2:	e098      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80055a4:	4b4f      	ldr	r3, [pc, #316]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055a6:	685b      	ldr	r3, [r3, #4]
 80055a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80055ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80055ae:	4b4d      	ldr	r3, [pc, #308]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055b0:	685b      	ldr	r3, [r3, #4]
 80055b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d028      	beq.n	800560c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80055ba:	4b4a      	ldr	r3, [pc, #296]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80055bc:	685b      	ldr	r3, [r3, #4]
 80055be:	099b      	lsrs	r3, r3, #6
 80055c0:	2200      	movs	r2, #0
 80055c2:	623b      	str	r3, [r7, #32]
 80055c4:	627a      	str	r2, [r7, #36]	; 0x24
 80055c6:	6a3b      	ldr	r3, [r7, #32]
 80055c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80055cc:	2100      	movs	r1, #0
 80055ce:	4b47      	ldr	r3, [pc, #284]	; (80056ec <HAL_RCC_GetSysClockFreq+0x188>)
 80055d0:	fb03 f201 	mul.w	r2, r3, r1
 80055d4:	2300      	movs	r3, #0
 80055d6:	fb00 f303 	mul.w	r3, r0, r3
 80055da:	4413      	add	r3, r2
 80055dc:	4a43      	ldr	r2, [pc, #268]	; (80056ec <HAL_RCC_GetSysClockFreq+0x188>)
 80055de:	fba0 1202 	umull	r1, r2, r0, r2
 80055e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80055e4:	460a      	mov	r2, r1
 80055e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80055e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80055ea:	4413      	add	r3, r2
 80055ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80055ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80055f0:	2200      	movs	r2, #0
 80055f2:	61bb      	str	r3, [r7, #24]
 80055f4:	61fa      	str	r2, [r7, #28]
 80055f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80055fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80055fe:	f7fb fb43 	bl	8000c88 <__aeabi_uldivmod>
 8005602:	4602      	mov	r2, r0
 8005604:	460b      	mov	r3, r1
 8005606:	4613      	mov	r3, r2
 8005608:	63fb      	str	r3, [r7, #60]	; 0x3c
 800560a:	e053      	b.n	80056b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800560c:	4b35      	ldr	r3, [pc, #212]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800560e:	685b      	ldr	r3, [r3, #4]
 8005610:	099b      	lsrs	r3, r3, #6
 8005612:	2200      	movs	r2, #0
 8005614:	613b      	str	r3, [r7, #16]
 8005616:	617a      	str	r2, [r7, #20]
 8005618:	693b      	ldr	r3, [r7, #16]
 800561a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800561e:	f04f 0b00 	mov.w	fp, #0
 8005622:	4652      	mov	r2, sl
 8005624:	465b      	mov	r3, fp
 8005626:	f04f 0000 	mov.w	r0, #0
 800562a:	f04f 0100 	mov.w	r1, #0
 800562e:	0159      	lsls	r1, r3, #5
 8005630:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005634:	0150      	lsls	r0, r2, #5
 8005636:	4602      	mov	r2, r0
 8005638:	460b      	mov	r3, r1
 800563a:	ebb2 080a 	subs.w	r8, r2, sl
 800563e:	eb63 090b 	sbc.w	r9, r3, fp
 8005642:	f04f 0200 	mov.w	r2, #0
 8005646:	f04f 0300 	mov.w	r3, #0
 800564a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800564e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8005652:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8005656:	ebb2 0408 	subs.w	r4, r2, r8
 800565a:	eb63 0509 	sbc.w	r5, r3, r9
 800565e:	f04f 0200 	mov.w	r2, #0
 8005662:	f04f 0300 	mov.w	r3, #0
 8005666:	00eb      	lsls	r3, r5, #3
 8005668:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800566c:	00e2      	lsls	r2, r4, #3
 800566e:	4614      	mov	r4, r2
 8005670:	461d      	mov	r5, r3
 8005672:	eb14 030a 	adds.w	r3, r4, sl
 8005676:	603b      	str	r3, [r7, #0]
 8005678:	eb45 030b 	adc.w	r3, r5, fp
 800567c:	607b      	str	r3, [r7, #4]
 800567e:	f04f 0200 	mov.w	r2, #0
 8005682:	f04f 0300 	mov.w	r3, #0
 8005686:	e9d7 4500 	ldrd	r4, r5, [r7]
 800568a:	4629      	mov	r1, r5
 800568c:	028b      	lsls	r3, r1, #10
 800568e:	4621      	mov	r1, r4
 8005690:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005694:	4621      	mov	r1, r4
 8005696:	028a      	lsls	r2, r1, #10
 8005698:	4610      	mov	r0, r2
 800569a:	4619      	mov	r1, r3
 800569c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800569e:	2200      	movs	r2, #0
 80056a0:	60bb      	str	r3, [r7, #8]
 80056a2:	60fa      	str	r2, [r7, #12]
 80056a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80056a8:	f7fb faee 	bl	8000c88 <__aeabi_uldivmod>
 80056ac:	4602      	mov	r2, r0
 80056ae:	460b      	mov	r3, r1
 80056b0:	4613      	mov	r3, r2
 80056b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80056b4:	4b0b      	ldr	r3, [pc, #44]	; (80056e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80056b6:	685b      	ldr	r3, [r3, #4]
 80056b8:	0c1b      	lsrs	r3, r3, #16
 80056ba:	f003 0303 	and.w	r3, r3, #3
 80056be:	3301      	adds	r3, #1
 80056c0:	005b      	lsls	r3, r3, #1
 80056c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80056c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80056c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80056c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80056cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056ce:	e002      	b.n	80056d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80056d0:	4b05      	ldr	r3, [pc, #20]	; (80056e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80056d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80056d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80056d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80056d8:	4618      	mov	r0, r3
 80056da:	3740      	adds	r7, #64	; 0x40
 80056dc:	46bd      	mov	sp, r7
 80056de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80056e2:	bf00      	nop
 80056e4:	40023800 	.word	0x40023800
 80056e8:	00f42400 	.word	0x00f42400
 80056ec:	00b71b00 	.word	0x00b71b00

080056f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80056f0:	b480      	push	{r7}
 80056f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80056f4:	4b03      	ldr	r3, [pc, #12]	; (8005704 <HAL_RCC_GetHCLKFreq+0x14>)
 80056f6:	681b      	ldr	r3, [r3, #0]
}
 80056f8:	4618      	mov	r0, r3
 80056fa:	46bd      	mov	sp, r7
 80056fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005700:	4770      	bx	lr
 8005702:	bf00      	nop
 8005704:	20000014 	.word	0x20000014

08005708 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005708:	b580      	push	{r7, lr}
 800570a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800570c:	f7ff fff0 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8005710:	4602      	mov	r2, r0
 8005712:	4b05      	ldr	r3, [pc, #20]	; (8005728 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005714:	689b      	ldr	r3, [r3, #8]
 8005716:	0a9b      	lsrs	r3, r3, #10
 8005718:	f003 0307 	and.w	r3, r3, #7
 800571c:	4903      	ldr	r1, [pc, #12]	; (800572c <HAL_RCC_GetPCLK1Freq+0x24>)
 800571e:	5ccb      	ldrb	r3, [r1, r3]
 8005720:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005724:	4618      	mov	r0, r3
 8005726:	bd80      	pop	{r7, pc}
 8005728:	40023800 	.word	0x40023800
 800572c:	0800c148 	.word	0x0800c148

08005730 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005734:	f7ff ffdc 	bl	80056f0 <HAL_RCC_GetHCLKFreq>
 8005738:	4602      	mov	r2, r0
 800573a:	4b05      	ldr	r3, [pc, #20]	; (8005750 <HAL_RCC_GetPCLK2Freq+0x20>)
 800573c:	689b      	ldr	r3, [r3, #8]
 800573e:	0b5b      	lsrs	r3, r3, #13
 8005740:	f003 0307 	and.w	r3, r3, #7
 8005744:	4903      	ldr	r1, [pc, #12]	; (8005754 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005746:	5ccb      	ldrb	r3, [r1, r3]
 8005748:	fa22 f303 	lsr.w	r3, r2, r3
}
 800574c:	4618      	mov	r0, r3
 800574e:	bd80      	pop	{r7, pc}
 8005750:	40023800 	.word	0x40023800
 8005754:	0800c148 	.word	0x0800c148

08005758 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005758:	b580      	push	{r7, lr}
 800575a:	b082      	sub	sp, #8
 800575c:	af00      	add	r7, sp, #0
 800575e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005760:	687b      	ldr	r3, [r7, #4]
 8005762:	2b00      	cmp	r3, #0
 8005764:	d101      	bne.n	800576a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005766:	2301      	movs	r3, #1
 8005768:	e041      	b.n	80057ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005770:	b2db      	uxtb	r3, r3
 8005772:	2b00      	cmp	r3, #0
 8005774:	d106      	bne.n	8005784 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800577e:	6878      	ldr	r0, [r7, #4]
 8005780:	f7fe fa00 	bl	8003b84 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005784:	687b      	ldr	r3, [r7, #4]
 8005786:	2202      	movs	r2, #2
 8005788:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681a      	ldr	r2, [r3, #0]
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	3304      	adds	r3, #4
 8005794:	4619      	mov	r1, r3
 8005796:	4610      	mov	r0, r2
 8005798:	f000 fbba 	bl	8005f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	2201      	movs	r2, #1
 80057a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2201      	movs	r2, #1
 80057a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80057ac:	687b      	ldr	r3, [r7, #4]
 80057ae:	2201      	movs	r2, #1
 80057b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	2201      	movs	r2, #1
 80057b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	2201      	movs	r2, #1
 80057c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80057c4:	687b      	ldr	r3, [r7, #4]
 80057c6:	2201      	movs	r2, #1
 80057c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80057cc:	687b      	ldr	r3, [r7, #4]
 80057ce:	2201      	movs	r2, #1
 80057d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80057d4:	687b      	ldr	r3, [r7, #4]
 80057d6:	2201      	movs	r2, #1
 80057d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	2201      	movs	r2, #1
 80057e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057e4:	687b      	ldr	r3, [r7, #4]
 80057e6:	2201      	movs	r2, #1
 80057e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057ec:	2300      	movs	r3, #0
}
 80057ee:	4618      	mov	r0, r3
 80057f0:	3708      	adds	r7, #8
 80057f2:	46bd      	mov	sp, r7
 80057f4:	bd80      	pop	{r7, pc}
	...

080057f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80057f8:	b480      	push	{r7}
 80057fa:	b085      	sub	sp, #20
 80057fc:	af00      	add	r7, sp, #0
 80057fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005806:	b2db      	uxtb	r3, r3
 8005808:	2b01      	cmp	r3, #1
 800580a:	d001      	beq.n	8005810 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800580c:	2301      	movs	r3, #1
 800580e:	e04e      	b.n	80058ae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2202      	movs	r2, #2
 8005814:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	68da      	ldr	r2, [r3, #12]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f042 0201 	orr.w	r2, r2, #1
 8005826:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	4a23      	ldr	r2, [pc, #140]	; (80058bc <HAL_TIM_Base_Start_IT+0xc4>)
 800582e:	4293      	cmp	r3, r2
 8005830:	d022      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800583a:	d01d      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	681b      	ldr	r3, [r3, #0]
 8005840:	4a1f      	ldr	r2, [pc, #124]	; (80058c0 <HAL_TIM_Base_Start_IT+0xc8>)
 8005842:	4293      	cmp	r3, r2
 8005844:	d018      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 8005846:	687b      	ldr	r3, [r7, #4]
 8005848:	681b      	ldr	r3, [r3, #0]
 800584a:	4a1e      	ldr	r2, [pc, #120]	; (80058c4 <HAL_TIM_Base_Start_IT+0xcc>)
 800584c:	4293      	cmp	r3, r2
 800584e:	d013      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 8005850:	687b      	ldr	r3, [r7, #4]
 8005852:	681b      	ldr	r3, [r3, #0]
 8005854:	4a1c      	ldr	r2, [pc, #112]	; (80058c8 <HAL_TIM_Base_Start_IT+0xd0>)
 8005856:	4293      	cmp	r3, r2
 8005858:	d00e      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 800585a:	687b      	ldr	r3, [r7, #4]
 800585c:	681b      	ldr	r3, [r3, #0]
 800585e:	4a1b      	ldr	r2, [pc, #108]	; (80058cc <HAL_TIM_Base_Start_IT+0xd4>)
 8005860:	4293      	cmp	r3, r2
 8005862:	d009      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	4a19      	ldr	r2, [pc, #100]	; (80058d0 <HAL_TIM_Base_Start_IT+0xd8>)
 800586a:	4293      	cmp	r3, r2
 800586c:	d004      	beq.n	8005878 <HAL_TIM_Base_Start_IT+0x80>
 800586e:	687b      	ldr	r3, [r7, #4]
 8005870:	681b      	ldr	r3, [r3, #0]
 8005872:	4a18      	ldr	r2, [pc, #96]	; (80058d4 <HAL_TIM_Base_Start_IT+0xdc>)
 8005874:	4293      	cmp	r3, r2
 8005876:	d111      	bne.n	800589c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005878:	687b      	ldr	r3, [r7, #4]
 800587a:	681b      	ldr	r3, [r3, #0]
 800587c:	689b      	ldr	r3, [r3, #8]
 800587e:	f003 0307 	and.w	r3, r3, #7
 8005882:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005884:	68fb      	ldr	r3, [r7, #12]
 8005886:	2b06      	cmp	r3, #6
 8005888:	d010      	beq.n	80058ac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f042 0201 	orr.w	r2, r2, #1
 8005898:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800589a:	e007      	b.n	80058ac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800589c:	687b      	ldr	r3, [r7, #4]
 800589e:	681b      	ldr	r3, [r3, #0]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	681b      	ldr	r3, [r3, #0]
 80058a6:	f042 0201 	orr.w	r2, r2, #1
 80058aa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80058ac:	2300      	movs	r3, #0
}
 80058ae:	4618      	mov	r0, r3
 80058b0:	3714      	adds	r7, #20
 80058b2:	46bd      	mov	sp, r7
 80058b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058b8:	4770      	bx	lr
 80058ba:	bf00      	nop
 80058bc:	40010000 	.word	0x40010000
 80058c0:	40000400 	.word	0x40000400
 80058c4:	40000800 	.word	0x40000800
 80058c8:	40000c00 	.word	0x40000c00
 80058cc:	40010400 	.word	0x40010400
 80058d0:	40014000 	.word	0x40014000
 80058d4:	40001800 	.word	0x40001800

080058d8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 80058d8:	b480      	push	{r7}
 80058da:	b083      	sub	sp, #12
 80058dc:	af00      	add	r7, sp, #0
 80058de:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	68da      	ldr	r2, [r3, #12]
 80058e6:	687b      	ldr	r3, [r7, #4]
 80058e8:	681b      	ldr	r3, [r3, #0]
 80058ea:	f022 0201 	bic.w	r2, r2, #1
 80058ee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	6a1a      	ldr	r2, [r3, #32]
 80058f6:	f241 1311 	movw	r3, #4369	; 0x1111
 80058fa:	4013      	ands	r3, r2
 80058fc:	2b00      	cmp	r3, #0
 80058fe:	d10f      	bne.n	8005920 <HAL_TIM_Base_Stop_IT+0x48>
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	681b      	ldr	r3, [r3, #0]
 8005904:	6a1a      	ldr	r2, [r3, #32]
 8005906:	f240 4344 	movw	r3, #1092	; 0x444
 800590a:	4013      	ands	r3, r2
 800590c:	2b00      	cmp	r3, #0
 800590e:	d107      	bne.n	8005920 <HAL_TIM_Base_Stop_IT+0x48>
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	681b      	ldr	r3, [r3, #0]
 8005914:	681a      	ldr	r2, [r3, #0]
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	681b      	ldr	r3, [r3, #0]
 800591a:	f022 0201 	bic.w	r2, r2, #1
 800591e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005920:	687b      	ldr	r3, [r7, #4]
 8005922:	2201      	movs	r2, #1
 8005924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005928:	2300      	movs	r3, #0
}
 800592a:	4618      	mov	r0, r3
 800592c:	370c      	adds	r7, #12
 800592e:	46bd      	mov	sp, r7
 8005930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005934:	4770      	bx	lr

08005936 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005936:	b580      	push	{r7, lr}
 8005938:	b082      	sub	sp, #8
 800593a:	af00      	add	r7, sp, #0
 800593c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	2b00      	cmp	r3, #0
 8005942:	d101      	bne.n	8005948 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005944:	2301      	movs	r3, #1
 8005946:	e041      	b.n	80059cc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800594e:	b2db      	uxtb	r3, r3
 8005950:	2b00      	cmp	r3, #0
 8005952:	d106      	bne.n	8005962 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	2200      	movs	r2, #0
 8005958:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 800595c:	6878      	ldr	r0, [r7, #4]
 800595e:	f000 f839 	bl	80059d4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	2202      	movs	r2, #2
 8005966:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800596a:	687b      	ldr	r3, [r7, #4]
 800596c:	681a      	ldr	r2, [r3, #0]
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	3304      	adds	r3, #4
 8005972:	4619      	mov	r1, r3
 8005974:	4610      	mov	r0, r2
 8005976:	f000 facb 	bl	8005f10 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597a:	687b      	ldr	r3, [r7, #4]
 800597c:	2201      	movs	r2, #1
 800597e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	2201      	movs	r2, #1
 8005986:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	2201      	movs	r2, #1
 800598e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005992:	687b      	ldr	r3, [r7, #4]
 8005994:	2201      	movs	r2, #1
 8005996:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599a:	687b      	ldr	r3, [r7, #4]
 800599c:	2201      	movs	r2, #1
 800599e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a2:	687b      	ldr	r3, [r7, #4]
 80059a4:	2201      	movs	r2, #1
 80059a6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	2201      	movs	r2, #1
 80059ae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	2201      	movs	r2, #1
 80059b6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059ba:	687b      	ldr	r3, [r7, #4]
 80059bc:	2201      	movs	r2, #1
 80059be:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2201      	movs	r2, #1
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059ca:	2300      	movs	r3, #0
}
 80059cc:	4618      	mov	r0, r3
 80059ce:	3708      	adds	r7, #8
 80059d0:	46bd      	mov	sp, r7
 80059d2:	bd80      	pop	{r7, pc}

080059d4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80059d4:	b480      	push	{r7}
 80059d6:	b083      	sub	sp, #12
 80059d8:	af00      	add	r7, sp, #0
 80059da:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 80059dc:	bf00      	nop
 80059de:	370c      	adds	r7, #12
 80059e0:	46bd      	mov	sp, r7
 80059e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e6:	4770      	bx	lr

080059e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d122      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d11b      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0202 	mvn.w	r2, #2
 8005a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa51 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa43 	bl	8005ebe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fa54 	bl	8005ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0204 	mvn.w	r2, #4
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa27 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa19 	bl	8005ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa2a 	bl	8005ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0208 	mvn.w	r2, #8
 8005abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 f9fd 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 f9ef 	bl	8005ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa00 	bl	8005ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0210 	mvn.w	r2, #16
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2208      	movs	r2, #8
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9d3 	bl	8005ed2 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9c5 	bl	8005ebe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f9d6 	bl	8005ee6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d10e      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d107      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0201 	mvn.w	r2, #1
 8005b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fc ffa6 	bl	8002ab8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d10e      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	2b80      	cmp	r3, #128	; 0x80
 8005b86:	d107      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fca6 	bl	80064e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f99b 	bl	8005efa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0220 	mvn.w	r2, #32
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fc70 	bl	80064d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b086      	sub	sp, #24
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005c04:	2300      	movs	r3, #0
 8005c06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c08:	68fb      	ldr	r3, [r7, #12]
 8005c0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0e:	2b01      	cmp	r3, #1
 8005c10:	d101      	bne.n	8005c16 <HAL_TIM_IC_ConfigChannel+0x1e>
 8005c12:	2302      	movs	r3, #2
 8005c14:	e088      	b.n	8005d28 <HAL_TIM_IC_ConfigChannel+0x130>
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2201      	movs	r2, #1
 8005c1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2b00      	cmp	r3, #0
 8005c22:	d11b      	bne.n	8005c5c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005c24:	68fb      	ldr	r3, [r7, #12]
 8005c26:	6818      	ldr	r0, [r3, #0]
 8005c28:	68bb      	ldr	r3, [r7, #8]
 8005c2a:	6819      	ldr	r1, [r3, #0]
 8005c2c:	68bb      	ldr	r3, [r7, #8]
 8005c2e:	685a      	ldr	r2, [r3, #4]
 8005c30:	68bb      	ldr	r3, [r7, #8]
 8005c32:	68db      	ldr	r3, [r3, #12]
 8005c34:	f000 fa0c 	bl	8006050 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005c38:	68fb      	ldr	r3, [r7, #12]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	699a      	ldr	r2, [r3, #24]
 8005c3e:	68fb      	ldr	r3, [r7, #12]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 020c 	bic.w	r2, r2, #12
 8005c46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005c48:	68fb      	ldr	r3, [r7, #12]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6999      	ldr	r1, [r3, #24]
 8005c4e:	68bb      	ldr	r3, [r7, #8]
 8005c50:	689a      	ldr	r2, [r3, #8]
 8005c52:	68fb      	ldr	r3, [r7, #12]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	430a      	orrs	r2, r1
 8005c58:	619a      	str	r2, [r3, #24]
 8005c5a:	e060      	b.n	8005d1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	2b04      	cmp	r3, #4
 8005c60:	d11c      	bne.n	8005c9c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	6818      	ldr	r0, [r3, #0]
 8005c66:	68bb      	ldr	r3, [r7, #8]
 8005c68:	6819      	ldr	r1, [r3, #0]
 8005c6a:	68bb      	ldr	r3, [r7, #8]
 8005c6c:	685a      	ldr	r2, [r3, #4]
 8005c6e:	68bb      	ldr	r3, [r7, #8]
 8005c70:	68db      	ldr	r3, [r3, #12]
 8005c72:	f000 fa90 	bl	8006196 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	699a      	ldr	r2, [r3, #24]
 8005c7c:	68fb      	ldr	r3, [r7, #12]
 8005c7e:	681b      	ldr	r3, [r3, #0]
 8005c80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005c84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	6999      	ldr	r1, [r3, #24]
 8005c8c:	68bb      	ldr	r3, [r7, #8]
 8005c8e:	689b      	ldr	r3, [r3, #8]
 8005c90:	021a      	lsls	r2, r3, #8
 8005c92:	68fb      	ldr	r3, [r7, #12]
 8005c94:	681b      	ldr	r3, [r3, #0]
 8005c96:	430a      	orrs	r2, r1
 8005c98:	619a      	str	r2, [r3, #24]
 8005c9a:	e040      	b.n	8005d1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2b08      	cmp	r3, #8
 8005ca0:	d11b      	bne.n	8005cda <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ca2:	68fb      	ldr	r3, [r7, #12]
 8005ca4:	6818      	ldr	r0, [r3, #0]
 8005ca6:	68bb      	ldr	r3, [r7, #8]
 8005ca8:	6819      	ldr	r1, [r3, #0]
 8005caa:	68bb      	ldr	r3, [r7, #8]
 8005cac:	685a      	ldr	r2, [r3, #4]
 8005cae:	68bb      	ldr	r3, [r7, #8]
 8005cb0:	68db      	ldr	r3, [r3, #12]
 8005cb2:	f000 fadd 	bl	8006270 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	69da      	ldr	r2, [r3, #28]
 8005cbc:	68fb      	ldr	r3, [r7, #12]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	f022 020c 	bic.w	r2, r2, #12
 8005cc4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	69d9      	ldr	r1, [r3, #28]
 8005ccc:	68bb      	ldr	r3, [r7, #8]
 8005cce:	689a      	ldr	r2, [r3, #8]
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	430a      	orrs	r2, r1
 8005cd6:	61da      	str	r2, [r3, #28]
 8005cd8:	e021      	b.n	8005d1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2b0c      	cmp	r3, #12
 8005cde:	d11c      	bne.n	8005d1a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8005ce0:	68fb      	ldr	r3, [r7, #12]
 8005ce2:	6818      	ldr	r0, [r3, #0]
 8005ce4:	68bb      	ldr	r3, [r7, #8]
 8005ce6:	6819      	ldr	r1, [r3, #0]
 8005ce8:	68bb      	ldr	r3, [r7, #8]
 8005cea:	685a      	ldr	r2, [r3, #4]
 8005cec:	68bb      	ldr	r3, [r7, #8]
 8005cee:	68db      	ldr	r3, [r3, #12]
 8005cf0:	f000 fafa 	bl	80062e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8005cf4:	68fb      	ldr	r3, [r7, #12]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	69da      	ldr	r2, [r3, #28]
 8005cfa:	68fb      	ldr	r3, [r7, #12]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005d02:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8005d04:	68fb      	ldr	r3, [r7, #12]
 8005d06:	681b      	ldr	r3, [r3, #0]
 8005d08:	69d9      	ldr	r1, [r3, #28]
 8005d0a:	68bb      	ldr	r3, [r7, #8]
 8005d0c:	689b      	ldr	r3, [r3, #8]
 8005d0e:	021a      	lsls	r2, r3, #8
 8005d10:	68fb      	ldr	r3, [r7, #12]
 8005d12:	681b      	ldr	r3, [r3, #0]
 8005d14:	430a      	orrs	r2, r1
 8005d16:	61da      	str	r2, [r3, #28]
 8005d18:	e001      	b.n	8005d1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8005d1a:	2301      	movs	r3, #1
 8005d1c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2200      	movs	r2, #0
 8005d22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005d26:	7dfb      	ldrb	r3, [r7, #23]
}
 8005d28:	4618      	mov	r0, r3
 8005d2a:	3718      	adds	r7, #24
 8005d2c:	46bd      	mov	sp, r7
 8005d2e:	bd80      	pop	{r7, pc}

08005d30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d30:	b580      	push	{r7, lr}
 8005d32:	b084      	sub	sp, #16
 8005d34:	af00      	add	r7, sp, #0
 8005d36:	6078      	str	r0, [r7, #4]
 8005d38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8005d3a:	2300      	movs	r3, #0
 8005d3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d3e:	687b      	ldr	r3, [r7, #4]
 8005d40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d44:	2b01      	cmp	r3, #1
 8005d46:	d101      	bne.n	8005d4c <HAL_TIM_ConfigClockSource+0x1c>
 8005d48:	2302      	movs	r3, #2
 8005d4a:	e0b4      	b.n	8005eb6 <HAL_TIM_ConfigClockSource+0x186>
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	2201      	movs	r2, #1
 8005d50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	2202      	movs	r2, #2
 8005d58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005d5c:	687b      	ldr	r3, [r7, #4]
 8005d5e:	681b      	ldr	r3, [r3, #0]
 8005d60:	689b      	ldr	r3, [r3, #8]
 8005d62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005d64:	68bb      	ldr	r3, [r7, #8]
 8005d66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005d6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005d6c:	68bb      	ldr	r3, [r7, #8]
 8005d6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005d72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	68ba      	ldr	r2, [r7, #8]
 8005d7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005d7c:	683b      	ldr	r3, [r7, #0]
 8005d7e:	681b      	ldr	r3, [r3, #0]
 8005d80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d84:	d03e      	beq.n	8005e04 <HAL_TIM_ConfigClockSource+0xd4>
 8005d86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005d8a:	f200 8087 	bhi.w	8005e9c <HAL_TIM_ConfigClockSource+0x16c>
 8005d8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d92:	f000 8086 	beq.w	8005ea2 <HAL_TIM_ConfigClockSource+0x172>
 8005d96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005d9a:	d87f      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x16c>
 8005d9c:	2b70      	cmp	r3, #112	; 0x70
 8005d9e:	d01a      	beq.n	8005dd6 <HAL_TIM_ConfigClockSource+0xa6>
 8005da0:	2b70      	cmp	r3, #112	; 0x70
 8005da2:	d87b      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x16c>
 8005da4:	2b60      	cmp	r3, #96	; 0x60
 8005da6:	d050      	beq.n	8005e4a <HAL_TIM_ConfigClockSource+0x11a>
 8005da8:	2b60      	cmp	r3, #96	; 0x60
 8005daa:	d877      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x16c>
 8005dac:	2b50      	cmp	r3, #80	; 0x50
 8005dae:	d03c      	beq.n	8005e2a <HAL_TIM_ConfigClockSource+0xfa>
 8005db0:	2b50      	cmp	r3, #80	; 0x50
 8005db2:	d873      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x16c>
 8005db4:	2b40      	cmp	r3, #64	; 0x40
 8005db6:	d058      	beq.n	8005e6a <HAL_TIM_ConfigClockSource+0x13a>
 8005db8:	2b40      	cmp	r3, #64	; 0x40
 8005dba:	d86f      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x16c>
 8005dbc:	2b30      	cmp	r3, #48	; 0x30
 8005dbe:	d064      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x15a>
 8005dc0:	2b30      	cmp	r3, #48	; 0x30
 8005dc2:	d86b      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x16c>
 8005dc4:	2b20      	cmp	r3, #32
 8005dc6:	d060      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x15a>
 8005dc8:	2b20      	cmp	r3, #32
 8005dca:	d867      	bhi.n	8005e9c <HAL_TIM_ConfigClockSource+0x16c>
 8005dcc:	2b00      	cmp	r3, #0
 8005dce:	d05c      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x15a>
 8005dd0:	2b10      	cmp	r3, #16
 8005dd2:	d05a      	beq.n	8005e8a <HAL_TIM_ConfigClockSource+0x15a>
 8005dd4:	e062      	b.n	8005e9c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	6818      	ldr	r0, [r3, #0]
 8005dda:	683b      	ldr	r3, [r7, #0]
 8005ddc:	6899      	ldr	r1, [r3, #8]
 8005dde:	683b      	ldr	r3, [r7, #0]
 8005de0:	685a      	ldr	r2, [r3, #4]
 8005de2:	683b      	ldr	r3, [r7, #0]
 8005de4:	68db      	ldr	r3, [r3, #12]
 8005de6:	f000 fad7 	bl	8006398 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	689b      	ldr	r3, [r3, #8]
 8005df0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005df2:	68bb      	ldr	r3, [r7, #8]
 8005df4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005df8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8005dfa:	687b      	ldr	r3, [r7, #4]
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	68ba      	ldr	r2, [r7, #8]
 8005e00:	609a      	str	r2, [r3, #8]
      break;
 8005e02:	e04f      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	6818      	ldr	r0, [r3, #0]
 8005e08:	683b      	ldr	r3, [r7, #0]
 8005e0a:	6899      	ldr	r1, [r3, #8]
 8005e0c:	683b      	ldr	r3, [r7, #0]
 8005e0e:	685a      	ldr	r2, [r3, #4]
 8005e10:	683b      	ldr	r3, [r7, #0]
 8005e12:	68db      	ldr	r3, [r3, #12]
 8005e14:	f000 fac0 	bl	8006398 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	681b      	ldr	r3, [r3, #0]
 8005e1c:	689a      	ldr	r2, [r3, #8]
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e26:	609a      	str	r2, [r3, #8]
      break;
 8005e28:	e03c      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e2a:	687b      	ldr	r3, [r7, #4]
 8005e2c:	6818      	ldr	r0, [r3, #0]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6859      	ldr	r1, [r3, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	461a      	mov	r2, r3
 8005e38:	f000 f97e 	bl	8006138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	681b      	ldr	r3, [r3, #0]
 8005e40:	2150      	movs	r1, #80	; 0x50
 8005e42:	4618      	mov	r0, r3
 8005e44:	f000 fa8d 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005e48:	e02c      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	6818      	ldr	r0, [r3, #0]
 8005e4e:	683b      	ldr	r3, [r7, #0]
 8005e50:	6859      	ldr	r1, [r3, #4]
 8005e52:	683b      	ldr	r3, [r7, #0]
 8005e54:	68db      	ldr	r3, [r3, #12]
 8005e56:	461a      	mov	r2, r3
 8005e58:	f000 f9da 	bl	8006210 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005e5c:	687b      	ldr	r3, [r7, #4]
 8005e5e:	681b      	ldr	r3, [r3, #0]
 8005e60:	2160      	movs	r1, #96	; 0x60
 8005e62:	4618      	mov	r0, r3
 8005e64:	f000 fa7d 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005e68:	e01c      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	6818      	ldr	r0, [r3, #0]
 8005e6e:	683b      	ldr	r3, [r7, #0]
 8005e70:	6859      	ldr	r1, [r3, #4]
 8005e72:	683b      	ldr	r3, [r7, #0]
 8005e74:	68db      	ldr	r3, [r3, #12]
 8005e76:	461a      	mov	r2, r3
 8005e78:	f000 f95e 	bl	8006138 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005e7c:	687b      	ldr	r3, [r7, #4]
 8005e7e:	681b      	ldr	r3, [r3, #0]
 8005e80:	2140      	movs	r1, #64	; 0x40
 8005e82:	4618      	mov	r0, r3
 8005e84:	f000 fa6d 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005e88:	e00c      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005e8a:	687b      	ldr	r3, [r7, #4]
 8005e8c:	681a      	ldr	r2, [r3, #0]
 8005e8e:	683b      	ldr	r3, [r7, #0]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	4619      	mov	r1, r3
 8005e94:	4610      	mov	r0, r2
 8005e96:	f000 fa64 	bl	8006362 <TIM_ITRx_SetConfig>
      break;
 8005e9a:	e003      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8005e9c:	2301      	movs	r3, #1
 8005e9e:	73fb      	strb	r3, [r7, #15]
      break;
 8005ea0:	e000      	b.n	8005ea4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8005ea2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	2201      	movs	r2, #1
 8005ea8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	2200      	movs	r2, #0
 8005eb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8005eb4:	7bfb      	ldrb	r3, [r7, #15]
}
 8005eb6:	4618      	mov	r0, r3
 8005eb8:	3710      	adds	r7, #16
 8005eba:	46bd      	mov	sp, r7
 8005ebc:	bd80      	pop	{r7, pc}

08005ebe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005ebe:	b480      	push	{r7}
 8005ec0:	b083      	sub	sp, #12
 8005ec2:	af00      	add	r7, sp, #0
 8005ec4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005ec6:	bf00      	nop
 8005ec8:	370c      	adds	r7, #12
 8005eca:	46bd      	mov	sp, r7
 8005ecc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ed0:	4770      	bx	lr

08005ed2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005ed2:	b480      	push	{r7}
 8005ed4:	b083      	sub	sp, #12
 8005ed6:	af00      	add	r7, sp, #0
 8005ed8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005eda:	bf00      	nop
 8005edc:	370c      	adds	r7, #12
 8005ede:	46bd      	mov	sp, r7
 8005ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ee4:	4770      	bx	lr

08005ee6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005ee6:	b480      	push	{r7}
 8005ee8:	b083      	sub	sp, #12
 8005eea:	af00      	add	r7, sp, #0
 8005eec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005eee:	bf00      	nop
 8005ef0:	370c      	adds	r7, #12
 8005ef2:	46bd      	mov	sp, r7
 8005ef4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ef8:	4770      	bx	lr

08005efa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005efa:	b480      	push	{r7}
 8005efc:	b083      	sub	sp, #12
 8005efe:	af00      	add	r7, sp, #0
 8005f00:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f02:	bf00      	nop
 8005f04:	370c      	adds	r7, #12
 8005f06:	46bd      	mov	sp, r7
 8005f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f0c:	4770      	bx	lr
	...

08005f10 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f10:	b480      	push	{r7}
 8005f12:	b085      	sub	sp, #20
 8005f14:	af00      	add	r7, sp, #0
 8005f16:	6078      	str	r0, [r7, #4]
 8005f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	681b      	ldr	r3, [r3, #0]
 8005f1e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	4a40      	ldr	r2, [pc, #256]	; (8006024 <TIM_Base_SetConfig+0x114>)
 8005f24:	4293      	cmp	r3, r2
 8005f26:	d013      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f2e:	d00f      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f30:	687b      	ldr	r3, [r7, #4]
 8005f32:	4a3d      	ldr	r2, [pc, #244]	; (8006028 <TIM_Base_SetConfig+0x118>)
 8005f34:	4293      	cmp	r3, r2
 8005f36:	d00b      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	4a3c      	ldr	r2, [pc, #240]	; (800602c <TIM_Base_SetConfig+0x11c>)
 8005f3c:	4293      	cmp	r3, r2
 8005f3e:	d007      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	4a3b      	ldr	r2, [pc, #236]	; (8006030 <TIM_Base_SetConfig+0x120>)
 8005f44:	4293      	cmp	r3, r2
 8005f46:	d003      	beq.n	8005f50 <TIM_Base_SetConfig+0x40>
 8005f48:	687b      	ldr	r3, [r7, #4]
 8005f4a:	4a3a      	ldr	r2, [pc, #232]	; (8006034 <TIM_Base_SetConfig+0x124>)
 8005f4c:	4293      	cmp	r3, r2
 8005f4e:	d108      	bne.n	8005f62 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f50:	68fb      	ldr	r3, [r7, #12]
 8005f52:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f56:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f58:	683b      	ldr	r3, [r7, #0]
 8005f5a:	685b      	ldr	r3, [r3, #4]
 8005f5c:	68fa      	ldr	r2, [r7, #12]
 8005f5e:	4313      	orrs	r3, r2
 8005f60:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	4a2f      	ldr	r2, [pc, #188]	; (8006024 <TIM_Base_SetConfig+0x114>)
 8005f66:	4293      	cmp	r3, r2
 8005f68:	d02b      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f70:	d027      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f72:	687b      	ldr	r3, [r7, #4]
 8005f74:	4a2c      	ldr	r2, [pc, #176]	; (8006028 <TIM_Base_SetConfig+0x118>)
 8005f76:	4293      	cmp	r3, r2
 8005f78:	d023      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	4a2b      	ldr	r2, [pc, #172]	; (800602c <TIM_Base_SetConfig+0x11c>)
 8005f7e:	4293      	cmp	r3, r2
 8005f80:	d01f      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f82:	687b      	ldr	r3, [r7, #4]
 8005f84:	4a2a      	ldr	r2, [pc, #168]	; (8006030 <TIM_Base_SetConfig+0x120>)
 8005f86:	4293      	cmp	r3, r2
 8005f88:	d01b      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	4a29      	ldr	r2, [pc, #164]	; (8006034 <TIM_Base_SetConfig+0x124>)
 8005f8e:	4293      	cmp	r3, r2
 8005f90:	d017      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	4a28      	ldr	r2, [pc, #160]	; (8006038 <TIM_Base_SetConfig+0x128>)
 8005f96:	4293      	cmp	r3, r2
 8005f98:	d013      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	4a27      	ldr	r2, [pc, #156]	; (800603c <TIM_Base_SetConfig+0x12c>)
 8005f9e:	4293      	cmp	r3, r2
 8005fa0:	d00f      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	4a26      	ldr	r2, [pc, #152]	; (8006040 <TIM_Base_SetConfig+0x130>)
 8005fa6:	4293      	cmp	r3, r2
 8005fa8:	d00b      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005faa:	687b      	ldr	r3, [r7, #4]
 8005fac:	4a25      	ldr	r2, [pc, #148]	; (8006044 <TIM_Base_SetConfig+0x134>)
 8005fae:	4293      	cmp	r3, r2
 8005fb0:	d007      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	4a24      	ldr	r2, [pc, #144]	; (8006048 <TIM_Base_SetConfig+0x138>)
 8005fb6:	4293      	cmp	r3, r2
 8005fb8:	d003      	beq.n	8005fc2 <TIM_Base_SetConfig+0xb2>
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	4a23      	ldr	r2, [pc, #140]	; (800604c <TIM_Base_SetConfig+0x13c>)
 8005fbe:	4293      	cmp	r3, r2
 8005fc0:	d108      	bne.n	8005fd4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fc2:	68fb      	ldr	r3, [r7, #12]
 8005fc4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fc8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fca:	683b      	ldr	r3, [r7, #0]
 8005fcc:	68db      	ldr	r3, [r3, #12]
 8005fce:	68fa      	ldr	r2, [r7, #12]
 8005fd0:	4313      	orrs	r3, r2
 8005fd2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005fda:	683b      	ldr	r3, [r7, #0]
 8005fdc:	695b      	ldr	r3, [r3, #20]
 8005fde:	4313      	orrs	r3, r2
 8005fe0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	68fa      	ldr	r2, [r7, #12]
 8005fe6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8005fe8:	683b      	ldr	r3, [r7, #0]
 8005fea:	689a      	ldr	r2, [r3, #8]
 8005fec:	687b      	ldr	r3, [r7, #4]
 8005fee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8005ff0:	683b      	ldr	r3, [r7, #0]
 8005ff2:	681a      	ldr	r2, [r3, #0]
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8005ff8:	687b      	ldr	r3, [r7, #4]
 8005ffa:	4a0a      	ldr	r2, [pc, #40]	; (8006024 <TIM_Base_SetConfig+0x114>)
 8005ffc:	4293      	cmp	r3, r2
 8005ffe:	d003      	beq.n	8006008 <TIM_Base_SetConfig+0xf8>
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	4a0c      	ldr	r2, [pc, #48]	; (8006034 <TIM_Base_SetConfig+0x124>)
 8006004:	4293      	cmp	r3, r2
 8006006:	d103      	bne.n	8006010 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006008:	683b      	ldr	r3, [r7, #0]
 800600a:	691a      	ldr	r2, [r3, #16]
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	2201      	movs	r2, #1
 8006014:	615a      	str	r2, [r3, #20]
}
 8006016:	bf00      	nop
 8006018:	3714      	adds	r7, #20
 800601a:	46bd      	mov	sp, r7
 800601c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006020:	4770      	bx	lr
 8006022:	bf00      	nop
 8006024:	40010000 	.word	0x40010000
 8006028:	40000400 	.word	0x40000400
 800602c:	40000800 	.word	0x40000800
 8006030:	40000c00 	.word	0x40000c00
 8006034:	40010400 	.word	0x40010400
 8006038:	40014000 	.word	0x40014000
 800603c:	40014400 	.word	0x40014400
 8006040:	40014800 	.word	0x40014800
 8006044:	40001800 	.word	0x40001800
 8006048:	40001c00 	.word	0x40001c00
 800604c:	40002000 	.word	0x40002000

08006050 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8006050:	b480      	push	{r7}
 8006052:	b087      	sub	sp, #28
 8006054:	af00      	add	r7, sp, #0
 8006056:	60f8      	str	r0, [r7, #12]
 8006058:	60b9      	str	r1, [r7, #8]
 800605a:	607a      	str	r2, [r7, #4]
 800605c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800605e:	68fb      	ldr	r3, [r7, #12]
 8006060:	6a1b      	ldr	r3, [r3, #32]
 8006062:	f023 0201 	bic.w	r2, r3, #1
 8006066:	68fb      	ldr	r3, [r7, #12]
 8006068:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800606a:	68fb      	ldr	r3, [r7, #12]
 800606c:	699b      	ldr	r3, [r3, #24]
 800606e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006070:	68fb      	ldr	r3, [r7, #12]
 8006072:	6a1b      	ldr	r3, [r3, #32]
 8006074:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	4a28      	ldr	r2, [pc, #160]	; (800611c <TIM_TI1_SetConfig+0xcc>)
 800607a:	4293      	cmp	r3, r2
 800607c:	d01b      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 800607e:	68fb      	ldr	r3, [r7, #12]
 8006080:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006084:	d017      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 8006086:	68fb      	ldr	r3, [r7, #12]
 8006088:	4a25      	ldr	r2, [pc, #148]	; (8006120 <TIM_TI1_SetConfig+0xd0>)
 800608a:	4293      	cmp	r3, r2
 800608c:	d013      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 800608e:	68fb      	ldr	r3, [r7, #12]
 8006090:	4a24      	ldr	r2, [pc, #144]	; (8006124 <TIM_TI1_SetConfig+0xd4>)
 8006092:	4293      	cmp	r3, r2
 8006094:	d00f      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 8006096:	68fb      	ldr	r3, [r7, #12]
 8006098:	4a23      	ldr	r2, [pc, #140]	; (8006128 <TIM_TI1_SetConfig+0xd8>)
 800609a:	4293      	cmp	r3, r2
 800609c:	d00b      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 800609e:	68fb      	ldr	r3, [r7, #12]
 80060a0:	4a22      	ldr	r2, [pc, #136]	; (800612c <TIM_TI1_SetConfig+0xdc>)
 80060a2:	4293      	cmp	r3, r2
 80060a4:	d007      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 80060a6:	68fb      	ldr	r3, [r7, #12]
 80060a8:	4a21      	ldr	r2, [pc, #132]	; (8006130 <TIM_TI1_SetConfig+0xe0>)
 80060aa:	4293      	cmp	r3, r2
 80060ac:	d003      	beq.n	80060b6 <TIM_TI1_SetConfig+0x66>
 80060ae:	68fb      	ldr	r3, [r7, #12]
 80060b0:	4a20      	ldr	r2, [pc, #128]	; (8006134 <TIM_TI1_SetConfig+0xe4>)
 80060b2:	4293      	cmp	r3, r2
 80060b4:	d101      	bne.n	80060ba <TIM_TI1_SetConfig+0x6a>
 80060b6:	2301      	movs	r3, #1
 80060b8:	e000      	b.n	80060bc <TIM_TI1_SetConfig+0x6c>
 80060ba:	2300      	movs	r3, #0
 80060bc:	2b00      	cmp	r3, #0
 80060be:	d008      	beq.n	80060d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80060c0:	697b      	ldr	r3, [r7, #20]
 80060c2:	f023 0303 	bic.w	r3, r3, #3
 80060c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80060c8:	697a      	ldr	r2, [r7, #20]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	4313      	orrs	r3, r2
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	e003      	b.n	80060da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80060d2:	697b      	ldr	r3, [r7, #20]
 80060d4:	f043 0301 	orr.w	r3, r3, #1
 80060d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80060da:	697b      	ldr	r3, [r7, #20]
 80060dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80060e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80060e2:	683b      	ldr	r3, [r7, #0]
 80060e4:	011b      	lsls	r3, r3, #4
 80060e6:	b2db      	uxtb	r3, r3
 80060e8:	697a      	ldr	r2, [r7, #20]
 80060ea:	4313      	orrs	r3, r2
 80060ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80060ee:	693b      	ldr	r3, [r7, #16]
 80060f0:	f023 030a 	bic.w	r3, r3, #10
 80060f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80060f6:	68bb      	ldr	r3, [r7, #8]
 80060f8:	f003 030a 	and.w	r3, r3, #10
 80060fc:	693a      	ldr	r2, [r7, #16]
 80060fe:	4313      	orrs	r3, r2
 8006100:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8006102:	68fb      	ldr	r3, [r7, #12]
 8006104:	697a      	ldr	r2, [r7, #20]
 8006106:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006108:	68fb      	ldr	r3, [r7, #12]
 800610a:	693a      	ldr	r2, [r7, #16]
 800610c:	621a      	str	r2, [r3, #32]
}
 800610e:	bf00      	nop
 8006110:	371c      	adds	r7, #28
 8006112:	46bd      	mov	sp, r7
 8006114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006118:	4770      	bx	lr
 800611a:	bf00      	nop
 800611c:	40010000 	.word	0x40010000
 8006120:	40000400 	.word	0x40000400
 8006124:	40000800 	.word	0x40000800
 8006128:	40000c00 	.word	0x40000c00
 800612c:	40010400 	.word	0x40010400
 8006130:	40014000 	.word	0x40014000
 8006134:	40001800 	.word	0x40001800

08006138 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006138:	b480      	push	{r7}
 800613a:	b087      	sub	sp, #28
 800613c:	af00      	add	r7, sp, #0
 800613e:	60f8      	str	r0, [r7, #12]
 8006140:	60b9      	str	r1, [r7, #8]
 8006142:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006144:	68fb      	ldr	r3, [r7, #12]
 8006146:	6a1b      	ldr	r3, [r3, #32]
 8006148:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800614a:	68fb      	ldr	r3, [r7, #12]
 800614c:	6a1b      	ldr	r3, [r3, #32]
 800614e:	f023 0201 	bic.w	r2, r3, #1
 8006152:	68fb      	ldr	r3, [r7, #12]
 8006154:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006156:	68fb      	ldr	r3, [r7, #12]
 8006158:	699b      	ldr	r3, [r3, #24]
 800615a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800615c:	693b      	ldr	r3, [r7, #16]
 800615e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006162:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006164:	687b      	ldr	r3, [r7, #4]
 8006166:	011b      	lsls	r3, r3, #4
 8006168:	693a      	ldr	r2, [r7, #16]
 800616a:	4313      	orrs	r3, r2
 800616c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800616e:	697b      	ldr	r3, [r7, #20]
 8006170:	f023 030a 	bic.w	r3, r3, #10
 8006174:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006176:	697a      	ldr	r2, [r7, #20]
 8006178:	68bb      	ldr	r3, [r7, #8]
 800617a:	4313      	orrs	r3, r2
 800617c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800617e:	68fb      	ldr	r3, [r7, #12]
 8006180:	693a      	ldr	r2, [r7, #16]
 8006182:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006184:	68fb      	ldr	r3, [r7, #12]
 8006186:	697a      	ldr	r2, [r7, #20]
 8006188:	621a      	str	r2, [r3, #32]
}
 800618a:	bf00      	nop
 800618c:	371c      	adds	r7, #28
 800618e:	46bd      	mov	sp, r7
 8006190:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006194:	4770      	bx	lr

08006196 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006196:	b480      	push	{r7}
 8006198:	b087      	sub	sp, #28
 800619a:	af00      	add	r7, sp, #0
 800619c:	60f8      	str	r0, [r7, #12]
 800619e:	60b9      	str	r1, [r7, #8]
 80061a0:	607a      	str	r2, [r7, #4]
 80061a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80061a4:	68fb      	ldr	r3, [r7, #12]
 80061a6:	6a1b      	ldr	r3, [r3, #32]
 80061a8:	f023 0210 	bic.w	r2, r3, #16
 80061ac:	68fb      	ldr	r3, [r7, #12]
 80061ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80061b0:	68fb      	ldr	r3, [r7, #12]
 80061b2:	699b      	ldr	r3, [r3, #24]
 80061b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80061b6:	68fb      	ldr	r3, [r7, #12]
 80061b8:	6a1b      	ldr	r3, [r3, #32]
 80061ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80061bc:	697b      	ldr	r3, [r7, #20]
 80061be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80061c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	021b      	lsls	r3, r3, #8
 80061c8:	697a      	ldr	r2, [r7, #20]
 80061ca:	4313      	orrs	r3, r2
 80061cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80061ce:	697b      	ldr	r3, [r7, #20]
 80061d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80061d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80061d6:	683b      	ldr	r3, [r7, #0]
 80061d8:	031b      	lsls	r3, r3, #12
 80061da:	b29b      	uxth	r3, r3
 80061dc:	697a      	ldr	r2, [r7, #20]
 80061de:	4313      	orrs	r3, r2
 80061e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80061e2:	693b      	ldr	r3, [r7, #16]
 80061e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80061e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80061ea:	68bb      	ldr	r3, [r7, #8]
 80061ec:	011b      	lsls	r3, r3, #4
 80061ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80061f2:	693a      	ldr	r2, [r7, #16]
 80061f4:	4313      	orrs	r3, r2
 80061f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80061f8:	68fb      	ldr	r3, [r7, #12]
 80061fa:	697a      	ldr	r2, [r7, #20]
 80061fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80061fe:	68fb      	ldr	r3, [r7, #12]
 8006200:	693a      	ldr	r2, [r7, #16]
 8006202:	621a      	str	r2, [r3, #32]
}
 8006204:	bf00      	nop
 8006206:	371c      	adds	r7, #28
 8006208:	46bd      	mov	sp, r7
 800620a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620e:	4770      	bx	lr

08006210 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006210:	b480      	push	{r7}
 8006212:	b087      	sub	sp, #28
 8006214:	af00      	add	r7, sp, #0
 8006216:	60f8      	str	r0, [r7, #12]
 8006218:	60b9      	str	r1, [r7, #8]
 800621a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800621c:	68fb      	ldr	r3, [r7, #12]
 800621e:	6a1b      	ldr	r3, [r3, #32]
 8006220:	f023 0210 	bic.w	r2, r3, #16
 8006224:	68fb      	ldr	r3, [r7, #12]
 8006226:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	699b      	ldr	r3, [r3, #24]
 800622c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800622e:	68fb      	ldr	r3, [r7, #12]
 8006230:	6a1b      	ldr	r3, [r3, #32]
 8006232:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006234:	697b      	ldr	r3, [r7, #20]
 8006236:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800623a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800623c:	687b      	ldr	r3, [r7, #4]
 800623e:	031b      	lsls	r3, r3, #12
 8006240:	697a      	ldr	r2, [r7, #20]
 8006242:	4313      	orrs	r3, r2
 8006244:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006246:	693b      	ldr	r3, [r7, #16]
 8006248:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800624c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800624e:	68bb      	ldr	r3, [r7, #8]
 8006250:	011b      	lsls	r3, r3, #4
 8006252:	693a      	ldr	r2, [r7, #16]
 8006254:	4313      	orrs	r3, r2
 8006256:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006258:	68fb      	ldr	r3, [r7, #12]
 800625a:	697a      	ldr	r2, [r7, #20]
 800625c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800625e:	68fb      	ldr	r3, [r7, #12]
 8006260:	693a      	ldr	r2, [r7, #16]
 8006262:	621a      	str	r2, [r3, #32]
}
 8006264:	bf00      	nop
 8006266:	371c      	adds	r7, #28
 8006268:	46bd      	mov	sp, r7
 800626a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800626e:	4770      	bx	lr

08006270 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006270:	b480      	push	{r7}
 8006272:	b087      	sub	sp, #28
 8006274:	af00      	add	r7, sp, #0
 8006276:	60f8      	str	r0, [r7, #12]
 8006278:	60b9      	str	r1, [r7, #8]
 800627a:	607a      	str	r2, [r7, #4]
 800627c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800627e:	68fb      	ldr	r3, [r7, #12]
 8006280:	6a1b      	ldr	r3, [r3, #32]
 8006282:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006286:	68fb      	ldr	r3, [r7, #12]
 8006288:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800628a:	68fb      	ldr	r3, [r7, #12]
 800628c:	69db      	ldr	r3, [r3, #28]
 800628e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006290:	68fb      	ldr	r3, [r7, #12]
 8006292:	6a1b      	ldr	r3, [r3, #32]
 8006294:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8006296:	697b      	ldr	r3, [r7, #20]
 8006298:	f023 0303 	bic.w	r3, r3, #3
 800629c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800629e:	697a      	ldr	r2, [r7, #20]
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4313      	orrs	r3, r2
 80062a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80062a6:	697b      	ldr	r3, [r7, #20]
 80062a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80062ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80062ae:	683b      	ldr	r3, [r7, #0]
 80062b0:	011b      	lsls	r3, r3, #4
 80062b2:	b2db      	uxtb	r3, r3
 80062b4:	697a      	ldr	r2, [r7, #20]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80062ba:	693b      	ldr	r3, [r7, #16]
 80062bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80062c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80062c2:	68bb      	ldr	r3, [r7, #8]
 80062c4:	021b      	lsls	r3, r3, #8
 80062c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80062ca:	693a      	ldr	r2, [r7, #16]
 80062cc:	4313      	orrs	r3, r2
 80062ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80062d0:	68fb      	ldr	r3, [r7, #12]
 80062d2:	697a      	ldr	r2, [r7, #20]
 80062d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80062d6:	68fb      	ldr	r3, [r7, #12]
 80062d8:	693a      	ldr	r2, [r7, #16]
 80062da:	621a      	str	r2, [r3, #32]
}
 80062dc:	bf00      	nop
 80062de:	371c      	adds	r7, #28
 80062e0:	46bd      	mov	sp, r7
 80062e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062e6:	4770      	bx	lr

080062e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80062e8:	b480      	push	{r7}
 80062ea:	b087      	sub	sp, #28
 80062ec:	af00      	add	r7, sp, #0
 80062ee:	60f8      	str	r0, [r7, #12]
 80062f0:	60b9      	str	r1, [r7, #8]
 80062f2:	607a      	str	r2, [r7, #4]
 80062f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062f6:	68fb      	ldr	r3, [r7, #12]
 80062f8:	6a1b      	ldr	r3, [r3, #32]
 80062fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062fe:	68fb      	ldr	r3, [r7, #12]
 8006300:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	69db      	ldr	r3, [r3, #28]
 8006306:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006308:	68fb      	ldr	r3, [r7, #12]
 800630a:	6a1b      	ldr	r3, [r3, #32]
 800630c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800630e:	697b      	ldr	r3, [r7, #20]
 8006310:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006314:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8006316:	687b      	ldr	r3, [r7, #4]
 8006318:	021b      	lsls	r3, r3, #8
 800631a:	697a      	ldr	r2, [r7, #20]
 800631c:	4313      	orrs	r3, r2
 800631e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006320:	697b      	ldr	r3, [r7, #20]
 8006322:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006326:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006328:	683b      	ldr	r3, [r7, #0]
 800632a:	031b      	lsls	r3, r3, #12
 800632c:	b29b      	uxth	r3, r3
 800632e:	697a      	ldr	r2, [r7, #20]
 8006330:	4313      	orrs	r3, r2
 8006332:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8006334:	693b      	ldr	r3, [r7, #16]
 8006336:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800633a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800633c:	68bb      	ldr	r3, [r7, #8]
 800633e:	031b      	lsls	r3, r3, #12
 8006340:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8006344:	693a      	ldr	r2, [r7, #16]
 8006346:	4313      	orrs	r3, r2
 8006348:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800634a:	68fb      	ldr	r3, [r7, #12]
 800634c:	697a      	ldr	r2, [r7, #20]
 800634e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8006350:	68fb      	ldr	r3, [r7, #12]
 8006352:	693a      	ldr	r2, [r7, #16]
 8006354:	621a      	str	r2, [r3, #32]
}
 8006356:	bf00      	nop
 8006358:	371c      	adds	r7, #28
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	689b      	ldr	r3, [r3, #8]
 8006370:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006372:	68fb      	ldr	r3, [r7, #12]
 8006374:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006378:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800637a:	683a      	ldr	r2, [r7, #0]
 800637c:	68fb      	ldr	r3, [r7, #12]
 800637e:	4313      	orrs	r3, r2
 8006380:	f043 0307 	orr.w	r3, r3, #7
 8006384:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	68fa      	ldr	r2, [r7, #12]
 800638a:	609a      	str	r2, [r3, #8]
}
 800638c:	bf00      	nop
 800638e:	3714      	adds	r7, #20
 8006390:	46bd      	mov	sp, r7
 8006392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006396:	4770      	bx	lr

08006398 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006398:	b480      	push	{r7}
 800639a:	b087      	sub	sp, #28
 800639c:	af00      	add	r7, sp, #0
 800639e:	60f8      	str	r0, [r7, #12]
 80063a0:	60b9      	str	r1, [r7, #8]
 80063a2:	607a      	str	r2, [r7, #4]
 80063a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80063a6:	68fb      	ldr	r3, [r7, #12]
 80063a8:	689b      	ldr	r3, [r3, #8]
 80063aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80063ac:	697b      	ldr	r3, [r7, #20]
 80063ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80063b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80063b4:	683b      	ldr	r3, [r7, #0]
 80063b6:	021a      	lsls	r2, r3, #8
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	431a      	orrs	r2, r3
 80063bc:	68bb      	ldr	r3, [r7, #8]
 80063be:	4313      	orrs	r3, r2
 80063c0:	697a      	ldr	r2, [r7, #20]
 80063c2:	4313      	orrs	r3, r2
 80063c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80063c6:	68fb      	ldr	r3, [r7, #12]
 80063c8:	697a      	ldr	r2, [r7, #20]
 80063ca:	609a      	str	r2, [r3, #8]
}
 80063cc:	bf00      	nop
 80063ce:	371c      	adds	r7, #28
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr

080063d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80063d8:	b480      	push	{r7}
 80063da:	b085      	sub	sp, #20
 80063dc:	af00      	add	r7, sp, #0
 80063de:	6078      	str	r0, [r7, #4]
 80063e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80063e8:	2b01      	cmp	r3, #1
 80063ea:	d101      	bne.n	80063f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80063ec:	2302      	movs	r3, #2
 80063ee:	e05a      	b.n	80064a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	2201      	movs	r2, #1
 80063f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	2202      	movs	r2, #2
 80063fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	681b      	ldr	r3, [r3, #0]
 8006404:	685b      	ldr	r3, [r3, #4]
 8006406:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	689b      	ldr	r3, [r3, #8]
 800640e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006410:	68fb      	ldr	r3, [r7, #12]
 8006412:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006416:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006418:	683b      	ldr	r3, [r7, #0]
 800641a:	681b      	ldr	r3, [r3, #0]
 800641c:	68fa      	ldr	r2, [r7, #12]
 800641e:	4313      	orrs	r3, r2
 8006420:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	681b      	ldr	r3, [r3, #0]
 8006426:	68fa      	ldr	r2, [r7, #12]
 8006428:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800642a:	687b      	ldr	r3, [r7, #4]
 800642c:	681b      	ldr	r3, [r3, #0]
 800642e:	4a21      	ldr	r2, [pc, #132]	; (80064b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006430:	4293      	cmp	r3, r2
 8006432:	d022      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	681b      	ldr	r3, [r3, #0]
 8006438:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800643c:	d01d      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800643e:	687b      	ldr	r3, [r7, #4]
 8006440:	681b      	ldr	r3, [r3, #0]
 8006442:	4a1d      	ldr	r2, [pc, #116]	; (80064b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8006444:	4293      	cmp	r3, r2
 8006446:	d018      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	4a1b      	ldr	r2, [pc, #108]	; (80064bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800644e:	4293      	cmp	r3, r2
 8006450:	d013      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	4a1a      	ldr	r2, [pc, #104]	; (80064c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8006458:	4293      	cmp	r3, r2
 800645a:	d00e      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800645c:	687b      	ldr	r3, [r7, #4]
 800645e:	681b      	ldr	r3, [r3, #0]
 8006460:	4a18      	ldr	r2, [pc, #96]	; (80064c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8006462:	4293      	cmp	r3, r2
 8006464:	d009      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	681b      	ldr	r3, [r3, #0]
 800646a:	4a17      	ldr	r2, [pc, #92]	; (80064c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800646c:	4293      	cmp	r3, r2
 800646e:	d004      	beq.n	800647a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	4a15      	ldr	r2, [pc, #84]	; (80064cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8006476:	4293      	cmp	r3, r2
 8006478:	d10c      	bne.n	8006494 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800647a:	68bb      	ldr	r3, [r7, #8]
 800647c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006480:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006482:	683b      	ldr	r3, [r7, #0]
 8006484:	685b      	ldr	r3, [r3, #4]
 8006486:	68ba      	ldr	r2, [r7, #8]
 8006488:	4313      	orrs	r3, r2
 800648a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68ba      	ldr	r2, [r7, #8]
 8006492:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006494:	687b      	ldr	r3, [r7, #4]
 8006496:	2201      	movs	r2, #1
 8006498:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800649c:	687b      	ldr	r3, [r7, #4]
 800649e:	2200      	movs	r2, #0
 80064a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064a4:	2300      	movs	r3, #0
}
 80064a6:	4618      	mov	r0, r3
 80064a8:	3714      	adds	r7, #20
 80064aa:	46bd      	mov	sp, r7
 80064ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064b0:	4770      	bx	lr
 80064b2:	bf00      	nop
 80064b4:	40010000 	.word	0x40010000
 80064b8:	40000400 	.word	0x40000400
 80064bc:	40000800 	.word	0x40000800
 80064c0:	40000c00 	.word	0x40000c00
 80064c4:	40010400 	.word	0x40010400
 80064c8:	40014000 	.word	0x40014000
 80064cc:	40001800 	.word	0x40001800

080064d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80064d0:	b480      	push	{r7}
 80064d2:	b083      	sub	sp, #12
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80064d8:	bf00      	nop
 80064da:	370c      	adds	r7, #12
 80064dc:	46bd      	mov	sp, r7
 80064de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064e2:	4770      	bx	lr

080064e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80064e4:	b480      	push	{r7}
 80064e6:	b083      	sub	sp, #12
 80064e8:	af00      	add	r7, sp, #0
 80064ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80064ec:	bf00      	nop
 80064ee:	370c      	adds	r7, #12
 80064f0:	46bd      	mov	sp, r7
 80064f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f6:	4770      	bx	lr

080064f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b082      	sub	sp, #8
 80064fc:	af00      	add	r7, sp, #0
 80064fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	2b00      	cmp	r3, #0
 8006504:	d101      	bne.n	800650a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006506:	2301      	movs	r3, #1
 8006508:	e03f      	b.n	800658a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800650a:	687b      	ldr	r3, [r7, #4]
 800650c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006510:	b2db      	uxtb	r3, r3
 8006512:	2b00      	cmp	r3, #0
 8006514:	d106      	bne.n	8006524 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	2200      	movs	r2, #0
 800651a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800651e:	6878      	ldr	r0, [r7, #4]
 8006520:	f7fd fbaa 	bl	8003c78 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	2224      	movs	r2, #36	; 0x24
 8006528:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800652c:	687b      	ldr	r3, [r7, #4]
 800652e:	681b      	ldr	r3, [r3, #0]
 8006530:	68da      	ldr	r2, [r3, #12]
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	681b      	ldr	r3, [r3, #0]
 8006536:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800653a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800653c:	6878      	ldr	r0, [r7, #4]
 800653e:	f000 fddf 	bl	8007100 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006542:	687b      	ldr	r3, [r7, #4]
 8006544:	681b      	ldr	r3, [r3, #0]
 8006546:	691a      	ldr	r2, [r3, #16]
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006550:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006552:	687b      	ldr	r3, [r7, #4]
 8006554:	681b      	ldr	r3, [r3, #0]
 8006556:	695a      	ldr	r2, [r3, #20]
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	681b      	ldr	r3, [r3, #0]
 800655c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006560:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	68da      	ldr	r2, [r3, #12]
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	681b      	ldr	r3, [r3, #0]
 800656c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006570:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	2200      	movs	r2, #0
 8006576:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	2220      	movs	r2, #32
 800657c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006580:	687b      	ldr	r3, [r7, #4]
 8006582:	2220      	movs	r2, #32
 8006584:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006588:	2300      	movs	r3, #0
}
 800658a:	4618      	mov	r0, r3
 800658c:	3708      	adds	r7, #8
 800658e:	46bd      	mov	sp, r7
 8006590:	bd80      	pop	{r7, pc}

08006592 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8006592:	b580      	push	{r7, lr}
 8006594:	b08a      	sub	sp, #40	; 0x28
 8006596:	af02      	add	r7, sp, #8
 8006598:	60f8      	str	r0, [r7, #12]
 800659a:	60b9      	str	r1, [r7, #8]
 800659c:	603b      	str	r3, [r7, #0]
 800659e:	4613      	mov	r3, r2
 80065a0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80065a2:	2300      	movs	r3, #0
 80065a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80065a6:	68fb      	ldr	r3, [r7, #12]
 80065a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065ac:	b2db      	uxtb	r3, r3
 80065ae:	2b20      	cmp	r3, #32
 80065b0:	d17c      	bne.n	80066ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80065b2:	68bb      	ldr	r3, [r7, #8]
 80065b4:	2b00      	cmp	r3, #0
 80065b6:	d002      	beq.n	80065be <HAL_UART_Transmit+0x2c>
 80065b8:	88fb      	ldrh	r3, [r7, #6]
 80065ba:	2b00      	cmp	r3, #0
 80065bc:	d101      	bne.n	80065c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80065be:	2301      	movs	r3, #1
 80065c0:	e075      	b.n	80066ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80065c2:	68fb      	ldr	r3, [r7, #12]
 80065c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80065c8:	2b01      	cmp	r3, #1
 80065ca:	d101      	bne.n	80065d0 <HAL_UART_Transmit+0x3e>
 80065cc:	2302      	movs	r3, #2
 80065ce:	e06e      	b.n	80066ae <HAL_UART_Transmit+0x11c>
 80065d0:	68fb      	ldr	r3, [r7, #12]
 80065d2:	2201      	movs	r2, #1
 80065d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80065d8:	68fb      	ldr	r3, [r7, #12]
 80065da:	2200      	movs	r2, #0
 80065dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	2221      	movs	r2, #33	; 0x21
 80065e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80065e6:	f7fd fda5 	bl	8004134 <HAL_GetTick>
 80065ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	88fa      	ldrh	r2, [r7, #6]
 80065f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80065f2:	68fb      	ldr	r3, [r7, #12]
 80065f4:	88fa      	ldrh	r2, [r7, #6]
 80065f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80065f8:	68fb      	ldr	r3, [r7, #12]
 80065fa:	689b      	ldr	r3, [r3, #8]
 80065fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006600:	d108      	bne.n	8006614 <HAL_UART_Transmit+0x82>
 8006602:	68fb      	ldr	r3, [r7, #12]
 8006604:	691b      	ldr	r3, [r3, #16]
 8006606:	2b00      	cmp	r3, #0
 8006608:	d104      	bne.n	8006614 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800660a:	2300      	movs	r3, #0
 800660c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800660e:	68bb      	ldr	r3, [r7, #8]
 8006610:	61bb      	str	r3, [r7, #24]
 8006612:	e003      	b.n	800661c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8006614:	68bb      	ldr	r3, [r7, #8]
 8006616:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006618:	2300      	movs	r3, #0
 800661a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800661c:	68fb      	ldr	r3, [r7, #12]
 800661e:	2200      	movs	r2, #0
 8006620:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8006624:	e02a      	b.n	800667c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8006626:	683b      	ldr	r3, [r7, #0]
 8006628:	9300      	str	r3, [sp, #0]
 800662a:	697b      	ldr	r3, [r7, #20]
 800662c:	2200      	movs	r2, #0
 800662e:	2180      	movs	r1, #128	; 0x80
 8006630:	68f8      	ldr	r0, [r7, #12]
 8006632:	f000 fb1f 	bl	8006c74 <UART_WaitOnFlagUntilTimeout>
 8006636:	4603      	mov	r3, r0
 8006638:	2b00      	cmp	r3, #0
 800663a:	d001      	beq.n	8006640 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800663c:	2303      	movs	r3, #3
 800663e:	e036      	b.n	80066ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006640:	69fb      	ldr	r3, [r7, #28]
 8006642:	2b00      	cmp	r3, #0
 8006644:	d10b      	bne.n	800665e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8006646:	69bb      	ldr	r3, [r7, #24]
 8006648:	881b      	ldrh	r3, [r3, #0]
 800664a:	461a      	mov	r2, r3
 800664c:	68fb      	ldr	r3, [r7, #12]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006654:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8006656:	69bb      	ldr	r3, [r7, #24]
 8006658:	3302      	adds	r3, #2
 800665a:	61bb      	str	r3, [r7, #24]
 800665c:	e007      	b.n	800666e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800665e:	69fb      	ldr	r3, [r7, #28]
 8006660:	781a      	ldrb	r2, [r3, #0]
 8006662:	68fb      	ldr	r3, [r7, #12]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8006668:	69fb      	ldr	r3, [r7, #28]
 800666a:	3301      	adds	r3, #1
 800666c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800666e:	68fb      	ldr	r3, [r7, #12]
 8006670:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006672:	b29b      	uxth	r3, r3
 8006674:	3b01      	subs	r3, #1
 8006676:	b29a      	uxth	r2, r3
 8006678:	68fb      	ldr	r3, [r7, #12]
 800667a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800667c:	68fb      	ldr	r3, [r7, #12]
 800667e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006680:	b29b      	uxth	r3, r3
 8006682:	2b00      	cmp	r3, #0
 8006684:	d1cf      	bne.n	8006626 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8006686:	683b      	ldr	r3, [r7, #0]
 8006688:	9300      	str	r3, [sp, #0]
 800668a:	697b      	ldr	r3, [r7, #20]
 800668c:	2200      	movs	r2, #0
 800668e:	2140      	movs	r1, #64	; 0x40
 8006690:	68f8      	ldr	r0, [r7, #12]
 8006692:	f000 faef 	bl	8006c74 <UART_WaitOnFlagUntilTimeout>
 8006696:	4603      	mov	r3, r0
 8006698:	2b00      	cmp	r3, #0
 800669a:	d001      	beq.n	80066a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800669c:	2303      	movs	r3, #3
 800669e:	e006      	b.n	80066ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2220      	movs	r2, #32
 80066a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80066a8:	2300      	movs	r3, #0
 80066aa:	e000      	b.n	80066ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80066ac:	2302      	movs	r3, #2
  }
}
 80066ae:	4618      	mov	r0, r3
 80066b0:	3720      	adds	r7, #32
 80066b2:	46bd      	mov	sp, r7
 80066b4:	bd80      	pop	{r7, pc}

080066b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80066b6:	b580      	push	{r7, lr}
 80066b8:	b084      	sub	sp, #16
 80066ba:	af00      	add	r7, sp, #0
 80066bc:	60f8      	str	r0, [r7, #12]
 80066be:	60b9      	str	r1, [r7, #8]
 80066c0:	4613      	mov	r3, r2
 80066c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80066c4:	68fb      	ldr	r3, [r7, #12]
 80066c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80066ca:	b2db      	uxtb	r3, r3
 80066cc:	2b20      	cmp	r3, #32
 80066ce:	d11d      	bne.n	800670c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80066d0:	68bb      	ldr	r3, [r7, #8]
 80066d2:	2b00      	cmp	r3, #0
 80066d4:	d002      	beq.n	80066dc <HAL_UART_Receive_IT+0x26>
 80066d6:	88fb      	ldrh	r3, [r7, #6]
 80066d8:	2b00      	cmp	r3, #0
 80066da:	d101      	bne.n	80066e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80066dc:	2301      	movs	r3, #1
 80066de:	e016      	b.n	800670e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80066e0:	68fb      	ldr	r3, [r7, #12]
 80066e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80066e6:	2b01      	cmp	r3, #1
 80066e8:	d101      	bne.n	80066ee <HAL_UART_Receive_IT+0x38>
 80066ea:	2302      	movs	r3, #2
 80066ec:	e00f      	b.n	800670e <HAL_UART_Receive_IT+0x58>
 80066ee:	68fb      	ldr	r3, [r7, #12]
 80066f0:	2201      	movs	r2, #1
 80066f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80066f6:	68fb      	ldr	r3, [r7, #12]
 80066f8:	2200      	movs	r2, #0
 80066fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80066fc:	88fb      	ldrh	r3, [r7, #6]
 80066fe:	461a      	mov	r2, r3
 8006700:	68b9      	ldr	r1, [r7, #8]
 8006702:	68f8      	ldr	r0, [r7, #12]
 8006704:	f000 fb24 	bl	8006d50 <UART_Start_Receive_IT>
 8006708:	4603      	mov	r3, r0
 800670a:	e000      	b.n	800670e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800670c:	2302      	movs	r3, #2
  }
}
 800670e:	4618      	mov	r0, r3
 8006710:	3710      	adds	r7, #16
 8006712:	46bd      	mov	sp, r7
 8006714:	bd80      	pop	{r7, pc}
	...

08006718 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006718:	b580      	push	{r7, lr}
 800671a:	b0ba      	sub	sp, #232	; 0xe8
 800671c:	af00      	add	r7, sp, #0
 800671e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006720:	687b      	ldr	r3, [r7, #4]
 8006722:	681b      	ldr	r3, [r3, #0]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800672a:	687b      	ldr	r3, [r7, #4]
 800672c:	681b      	ldr	r3, [r3, #0]
 800672e:	68db      	ldr	r3, [r3, #12]
 8006730:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006734:	687b      	ldr	r3, [r7, #4]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	695b      	ldr	r3, [r3, #20]
 800673a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800673e:	2300      	movs	r3, #0
 8006740:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006744:	2300      	movs	r3, #0
 8006746:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800674a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800674e:	f003 030f 	and.w	r3, r3, #15
 8006752:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006756:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800675a:	2b00      	cmp	r3, #0
 800675c:	d10f      	bne.n	800677e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800675e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006762:	f003 0320 	and.w	r3, r3, #32
 8006766:	2b00      	cmp	r3, #0
 8006768:	d009      	beq.n	800677e <HAL_UART_IRQHandler+0x66>
 800676a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800676e:	f003 0320 	and.w	r3, r3, #32
 8006772:	2b00      	cmp	r3, #0
 8006774:	d003      	beq.n	800677e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006776:	6878      	ldr	r0, [r7, #4]
 8006778:	f000 fc07 	bl	8006f8a <UART_Receive_IT>
      return;
 800677c:	e256      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800677e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006782:	2b00      	cmp	r3, #0
 8006784:	f000 80de 	beq.w	8006944 <HAL_UART_IRQHandler+0x22c>
 8006788:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800678c:	f003 0301 	and.w	r3, r3, #1
 8006790:	2b00      	cmp	r3, #0
 8006792:	d106      	bne.n	80067a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006794:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006798:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800679c:	2b00      	cmp	r3, #0
 800679e:	f000 80d1 	beq.w	8006944 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80067a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067a6:	f003 0301 	and.w	r3, r3, #1
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d00b      	beq.n	80067c6 <HAL_UART_IRQHandler+0xae>
 80067ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80067b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80067b6:	2b00      	cmp	r3, #0
 80067b8:	d005      	beq.n	80067c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067be:	f043 0201 	orr.w	r2, r3, #1
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ca:	f003 0304 	and.w	r3, r3, #4
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d00b      	beq.n	80067ea <HAL_UART_IRQHandler+0xd2>
 80067d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067d6:	f003 0301 	and.w	r3, r3, #1
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d005      	beq.n	80067ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80067e2:	f043 0202 	orr.w	r2, r3, #2
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80067ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80067ee:	f003 0302 	and.w	r3, r3, #2
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d00b      	beq.n	800680e <HAL_UART_IRQHandler+0xf6>
 80067f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80067fa:	f003 0301 	and.w	r3, r3, #1
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006806:	f043 0204 	orr.w	r2, r3, #4
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800680e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006812:	f003 0308 	and.w	r3, r3, #8
 8006816:	2b00      	cmp	r3, #0
 8006818:	d011      	beq.n	800683e <HAL_UART_IRQHandler+0x126>
 800681a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800681e:	f003 0320 	and.w	r3, r3, #32
 8006822:	2b00      	cmp	r3, #0
 8006824:	d105      	bne.n	8006832 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006826:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800682a:	f003 0301 	and.w	r3, r3, #1
 800682e:	2b00      	cmp	r3, #0
 8006830:	d005      	beq.n	800683e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006836:	f043 0208 	orr.w	r2, r3, #8
 800683a:	687b      	ldr	r3, [r7, #4]
 800683c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800683e:	687b      	ldr	r3, [r7, #4]
 8006840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006842:	2b00      	cmp	r3, #0
 8006844:	f000 81ed 	beq.w	8006c22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006848:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800684c:	f003 0320 	and.w	r3, r3, #32
 8006850:	2b00      	cmp	r3, #0
 8006852:	d008      	beq.n	8006866 <HAL_UART_IRQHandler+0x14e>
 8006854:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006858:	f003 0320 	and.w	r3, r3, #32
 800685c:	2b00      	cmp	r3, #0
 800685e:	d002      	beq.n	8006866 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006860:	6878      	ldr	r0, [r7, #4]
 8006862:	f000 fb92 	bl	8006f8a <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006866:	687b      	ldr	r3, [r7, #4]
 8006868:	681b      	ldr	r3, [r3, #0]
 800686a:	695b      	ldr	r3, [r3, #20]
 800686c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006870:	2b40      	cmp	r3, #64	; 0x40
 8006872:	bf0c      	ite	eq
 8006874:	2301      	moveq	r3, #1
 8006876:	2300      	movne	r3, #0
 8006878:	b2db      	uxtb	r3, r3
 800687a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006882:	f003 0308 	and.w	r3, r3, #8
 8006886:	2b00      	cmp	r3, #0
 8006888:	d103      	bne.n	8006892 <HAL_UART_IRQHandler+0x17a>
 800688a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 800688e:	2b00      	cmp	r3, #0
 8006890:	d04f      	beq.n	8006932 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f000 fa9a 	bl	8006dcc <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006898:	687b      	ldr	r3, [r7, #4]
 800689a:	681b      	ldr	r3, [r3, #0]
 800689c:	695b      	ldr	r3, [r3, #20]
 800689e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80068a2:	2b40      	cmp	r3, #64	; 0x40
 80068a4:	d141      	bne.n	800692a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	681b      	ldr	r3, [r3, #0]
 80068aa:	3314      	adds	r3, #20
 80068ac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80068b0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80068b4:	e853 3f00 	ldrex	r3, [r3]
 80068b8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80068bc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80068c0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80068c4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	681b      	ldr	r3, [r3, #0]
 80068cc:	3314      	adds	r3, #20
 80068ce:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80068d2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80068d6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80068da:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 80068de:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 80068e2:	e841 2300 	strex	r3, r2, [r1]
 80068e6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 80068ea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 80068ee:	2b00      	cmp	r3, #0
 80068f0:	d1d9      	bne.n	80068a6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80068f2:	687b      	ldr	r3, [r7, #4]
 80068f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068f6:	2b00      	cmp	r3, #0
 80068f8:	d013      	beq.n	8006922 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80068fa:	687b      	ldr	r3, [r7, #4]
 80068fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80068fe:	4a7d      	ldr	r2, [pc, #500]	; (8006af4 <HAL_UART_IRQHandler+0x3dc>)
 8006900:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006902:	687b      	ldr	r3, [r7, #4]
 8006904:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006906:	4618      	mov	r0, r3
 8006908:	f7fd fddf 	bl	80044ca <HAL_DMA_Abort_IT>
 800690c:	4603      	mov	r3, r0
 800690e:	2b00      	cmp	r3, #0
 8006910:	d016      	beq.n	8006940 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006912:	687b      	ldr	r3, [r7, #4]
 8006914:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006916:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006918:	687a      	ldr	r2, [r7, #4]
 800691a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800691c:	4610      	mov	r0, r2
 800691e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006920:	e00e      	b.n	8006940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006922:	6878      	ldr	r0, [r7, #4]
 8006924:	f000 f990 	bl	8006c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006928:	e00a      	b.n	8006940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800692a:	6878      	ldr	r0, [r7, #4]
 800692c:	f000 f98c 	bl	8006c48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006930:	e006      	b.n	8006940 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006932:	6878      	ldr	r0, [r7, #4]
 8006934:	f000 f988 	bl	8006c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006938:	687b      	ldr	r3, [r7, #4]
 800693a:	2200      	movs	r2, #0
 800693c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 800693e:	e170      	b.n	8006c22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006940:	bf00      	nop
    return;
 8006942:	e16e      	b.n	8006c22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006944:	687b      	ldr	r3, [r7, #4]
 8006946:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006948:	2b01      	cmp	r3, #1
 800694a:	f040 814a 	bne.w	8006be2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800694e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006952:	f003 0310 	and.w	r3, r3, #16
 8006956:	2b00      	cmp	r3, #0
 8006958:	f000 8143 	beq.w	8006be2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 800695c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006960:	f003 0310 	and.w	r3, r3, #16
 8006964:	2b00      	cmp	r3, #0
 8006966:	f000 813c 	beq.w	8006be2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 800696a:	2300      	movs	r3, #0
 800696c:	60bb      	str	r3, [r7, #8]
 800696e:	687b      	ldr	r3, [r7, #4]
 8006970:	681b      	ldr	r3, [r3, #0]
 8006972:	681b      	ldr	r3, [r3, #0]
 8006974:	60bb      	str	r3, [r7, #8]
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	681b      	ldr	r3, [r3, #0]
 800697a:	685b      	ldr	r3, [r3, #4]
 800697c:	60bb      	str	r3, [r7, #8]
 800697e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006980:	687b      	ldr	r3, [r7, #4]
 8006982:	681b      	ldr	r3, [r3, #0]
 8006984:	695b      	ldr	r3, [r3, #20]
 8006986:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800698a:	2b40      	cmp	r3, #64	; 0x40
 800698c:	f040 80b4 	bne.w	8006af8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006990:	687b      	ldr	r3, [r7, #4]
 8006992:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	685b      	ldr	r3, [r3, #4]
 8006998:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800699c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80069a0:	2b00      	cmp	r3, #0
 80069a2:	f000 8140 	beq.w	8006c26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80069a6:	687b      	ldr	r3, [r7, #4]
 80069a8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80069aa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ae:	429a      	cmp	r2, r3
 80069b0:	f080 8139 	bcs.w	8006c26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80069b4:	687b      	ldr	r3, [r7, #4]
 80069b6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80069ba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80069bc:	687b      	ldr	r3, [r7, #4]
 80069be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80069c0:	69db      	ldr	r3, [r3, #28]
 80069c2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80069c6:	f000 8088 	beq.w	8006ada <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	330c      	adds	r3, #12
 80069d0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80069d4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 80069d8:	e853 3f00 	ldrex	r3, [r3]
 80069dc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 80069e0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 80069e4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80069e8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 80069ec:	687b      	ldr	r3, [r7, #4]
 80069ee:	681b      	ldr	r3, [r3, #0]
 80069f0:	330c      	adds	r3, #12
 80069f2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 80069f6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 80069fa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80069fe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006a02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006a06:	e841 2300 	strex	r3, r2, [r1]
 8006a0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006a0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d1d9      	bne.n	80069ca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	3314      	adds	r3, #20
 8006a1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006a20:	e853 3f00 	ldrex	r3, [r3]
 8006a24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006a26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006a28:	f023 0301 	bic.w	r3, r3, #1
 8006a2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a30:	687b      	ldr	r3, [r7, #4]
 8006a32:	681b      	ldr	r3, [r3, #0]
 8006a34:	3314      	adds	r3, #20
 8006a36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006a3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006a3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006a42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006a46:	e841 2300 	strex	r3, r2, [r1]
 8006a4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006a4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d1e1      	bne.n	8006a16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006a52:	687b      	ldr	r3, [r7, #4]
 8006a54:	681b      	ldr	r3, [r3, #0]
 8006a56:	3314      	adds	r3, #20
 8006a58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006a5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006a5c:	e853 3f00 	ldrex	r3, [r3]
 8006a60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006a62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006a64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006a68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	681b      	ldr	r3, [r3, #0]
 8006a70:	3314      	adds	r3, #20
 8006a72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006a76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006a78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006a7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006a7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006a7e:	e841 2300 	strex	r3, r2, [r1]
 8006a82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006a84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d1e3      	bne.n	8006a52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006a8a:	687b      	ldr	r3, [r7, #4]
 8006a8c:	2220      	movs	r2, #32
 8006a8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a92:	687b      	ldr	r3, [r7, #4]
 8006a94:	2200      	movs	r2, #0
 8006a96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006a98:	687b      	ldr	r3, [r7, #4]
 8006a9a:	681b      	ldr	r3, [r3, #0]
 8006a9c:	330c      	adds	r3, #12
 8006a9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006aa0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006aa2:	e853 3f00 	ldrex	r3, [r3]
 8006aa6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006aa8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006aaa:	f023 0310 	bic.w	r3, r3, #16
 8006aae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	681b      	ldr	r3, [r3, #0]
 8006ab6:	330c      	adds	r3, #12
 8006ab8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006abc:	65ba      	str	r2, [r7, #88]	; 0x58
 8006abe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ac0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006ac2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006ac4:	e841 2300 	strex	r3, r2, [r1]
 8006ac8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006aca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006acc:	2b00      	cmp	r3, #0
 8006ace:	d1e3      	bne.n	8006a98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006ad0:	687b      	ldr	r3, [r7, #4]
 8006ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	f7fd fc88 	bl	80043ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006ae2:	b29b      	uxth	r3, r3
 8006ae4:	1ad3      	subs	r3, r2, r3
 8006ae6:	b29b      	uxth	r3, r3
 8006ae8:	4619      	mov	r1, r3
 8006aea:	6878      	ldr	r0, [r7, #4]
 8006aec:	f000 f8b6 	bl	8006c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006af0:	e099      	b.n	8006c26 <HAL_UART_IRQHandler+0x50e>
 8006af2:	bf00      	nop
 8006af4:	08006e93 	.word	0x08006e93
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006afc:	687b      	ldr	r3, [r7, #4]
 8006afe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b00:	b29b      	uxth	r3, r3
 8006b02:	1ad3      	subs	r3, r2, r3
 8006b04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006b08:	687b      	ldr	r3, [r7, #4]
 8006b0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006b0c:	b29b      	uxth	r3, r3
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	f000 808b 	beq.w	8006c2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006b14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	f000 8086 	beq.w	8006c2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006b1e:	687b      	ldr	r3, [r7, #4]
 8006b20:	681b      	ldr	r3, [r3, #0]
 8006b22:	330c      	adds	r3, #12
 8006b24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b28:	e853 3f00 	ldrex	r3, [r3]
 8006b2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006b2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006b30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006b34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	330c      	adds	r3, #12
 8006b3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006b42:	647a      	str	r2, [r7, #68]	; 0x44
 8006b44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006b48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006b4a:	e841 2300 	strex	r3, r2, [r1]
 8006b4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006b50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d1e3      	bne.n	8006b1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006b56:	687b      	ldr	r3, [r7, #4]
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	3314      	adds	r3, #20
 8006b5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006b5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006b60:	e853 3f00 	ldrex	r3, [r3]
 8006b64:	623b      	str	r3, [r7, #32]
   return(result);
 8006b66:	6a3b      	ldr	r3, [r7, #32]
 8006b68:	f023 0301 	bic.w	r3, r3, #1
 8006b6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	681b      	ldr	r3, [r3, #0]
 8006b74:	3314      	adds	r3, #20
 8006b76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006b7a:	633a      	str	r2, [r7, #48]	; 0x30
 8006b7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006b7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006b80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006b82:	e841 2300 	strex	r3, r2, [r1]
 8006b86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006b88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006b8a:	2b00      	cmp	r3, #0
 8006b8c:	d1e3      	bne.n	8006b56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	2220      	movs	r2, #32
 8006b92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	2200      	movs	r2, #0
 8006b9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006b9c:	687b      	ldr	r3, [r7, #4]
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	330c      	adds	r3, #12
 8006ba2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ba4:	693b      	ldr	r3, [r7, #16]
 8006ba6:	e853 3f00 	ldrex	r3, [r3]
 8006baa:	60fb      	str	r3, [r7, #12]
   return(result);
 8006bac:	68fb      	ldr	r3, [r7, #12]
 8006bae:	f023 0310 	bic.w	r3, r3, #16
 8006bb2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	681b      	ldr	r3, [r3, #0]
 8006bba:	330c      	adds	r3, #12
 8006bbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006bc0:	61fa      	str	r2, [r7, #28]
 8006bc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006bc4:	69b9      	ldr	r1, [r7, #24]
 8006bc6:	69fa      	ldr	r2, [r7, #28]
 8006bc8:	e841 2300 	strex	r3, r2, [r1]
 8006bcc:	617b      	str	r3, [r7, #20]
   return(result);
 8006bce:	697b      	ldr	r3, [r7, #20]
 8006bd0:	2b00      	cmp	r3, #0
 8006bd2:	d1e3      	bne.n	8006b9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006bd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006bd8:	4619      	mov	r1, r3
 8006bda:	6878      	ldr	r0, [r7, #4]
 8006bdc:	f000 f83e 	bl	8006c5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006be0:	e023      	b.n	8006c2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006be2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006be6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bea:	2b00      	cmp	r3, #0
 8006bec:	d009      	beq.n	8006c02 <HAL_UART_IRQHandler+0x4ea>
 8006bee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bf2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006bf6:	2b00      	cmp	r3, #0
 8006bf8:	d003      	beq.n	8006c02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006bfa:	6878      	ldr	r0, [r7, #4]
 8006bfc:	f000 f95d 	bl	8006eba <UART_Transmit_IT>
    return;
 8006c00:	e014      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006c02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c0a:	2b00      	cmp	r3, #0
 8006c0c:	d00e      	beq.n	8006c2c <HAL_UART_IRQHandler+0x514>
 8006c0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006c12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006c16:	2b00      	cmp	r3, #0
 8006c18:	d008      	beq.n	8006c2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006c1a:	6878      	ldr	r0, [r7, #4]
 8006c1c:	f000 f99d 	bl	8006f5a <UART_EndTransmit_IT>
    return;
 8006c20:	e004      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
    return;
 8006c22:	bf00      	nop
 8006c24:	e002      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
      return;
 8006c26:	bf00      	nop
 8006c28:	e000      	b.n	8006c2c <HAL_UART_IRQHandler+0x514>
      return;
 8006c2a:	bf00      	nop
  }
}
 8006c2c:	37e8      	adds	r7, #232	; 0xe8
 8006c2e:	46bd      	mov	sp, r7
 8006c30:	bd80      	pop	{r7, pc}
 8006c32:	bf00      	nop

08006c34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006c34:	b480      	push	{r7}
 8006c36:	b083      	sub	sp, #12
 8006c38:	af00      	add	r7, sp, #0
 8006c3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006c3c:	bf00      	nop
 8006c3e:	370c      	adds	r7, #12
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr

08006c48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006c48:	b480      	push	{r7}
 8006c4a:	b083      	sub	sp, #12
 8006c4c:	af00      	add	r7, sp, #0
 8006c4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006c50:	bf00      	nop
 8006c52:	370c      	adds	r7, #12
 8006c54:	46bd      	mov	sp, r7
 8006c56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c5a:	4770      	bx	lr

08006c5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006c5c:	b480      	push	{r7}
 8006c5e:	b083      	sub	sp, #12
 8006c60:	af00      	add	r7, sp, #0
 8006c62:	6078      	str	r0, [r7, #4]
 8006c64:	460b      	mov	r3, r1
 8006c66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006c68:	bf00      	nop
 8006c6a:	370c      	adds	r7, #12
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c72:	4770      	bx	lr

08006c74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006c74:	b580      	push	{r7, lr}
 8006c76:	b090      	sub	sp, #64	; 0x40
 8006c78:	af00      	add	r7, sp, #0
 8006c7a:	60f8      	str	r0, [r7, #12]
 8006c7c:	60b9      	str	r1, [r7, #8]
 8006c7e:	603b      	str	r3, [r7, #0]
 8006c80:	4613      	mov	r3, r2
 8006c82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006c84:	e050      	b.n	8006d28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006c86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006c8c:	d04c      	beq.n	8006d28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006c8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006c90:	2b00      	cmp	r3, #0
 8006c92:	d007      	beq.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x30>
 8006c94:	f7fd fa4e 	bl	8004134 <HAL_GetTick>
 8006c98:	4602      	mov	r2, r0
 8006c9a:	683b      	ldr	r3, [r7, #0]
 8006c9c:	1ad3      	subs	r3, r2, r3
 8006c9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ca0:	429a      	cmp	r2, r3
 8006ca2:	d241      	bcs.n	8006d28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ca4:	68fb      	ldr	r3, [r7, #12]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	330c      	adds	r3, #12
 8006caa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006cac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cae:	e853 3f00 	ldrex	r3, [r3]
 8006cb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006cb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006cb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8006cba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006cbc:	68fb      	ldr	r3, [r7, #12]
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	330c      	adds	r3, #12
 8006cc2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8006cc4:	637a      	str	r2, [r7, #52]	; 0x34
 8006cc6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cc8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8006cca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8006ccc:	e841 2300 	strex	r3, r2, [r1]
 8006cd0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8006cd2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006cd4:	2b00      	cmp	r3, #0
 8006cd6:	d1e5      	bne.n	8006ca4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006cd8:	68fb      	ldr	r3, [r7, #12]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	3314      	adds	r3, #20
 8006cde:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ce0:	697b      	ldr	r3, [r7, #20]
 8006ce2:	e853 3f00 	ldrex	r3, [r3]
 8006ce6:	613b      	str	r3, [r7, #16]
   return(result);
 8006ce8:	693b      	ldr	r3, [r7, #16]
 8006cea:	f023 0301 	bic.w	r3, r3, #1
 8006cee:	63bb      	str	r3, [r7, #56]	; 0x38
 8006cf0:	68fb      	ldr	r3, [r7, #12]
 8006cf2:	681b      	ldr	r3, [r3, #0]
 8006cf4:	3314      	adds	r3, #20
 8006cf6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8006cf8:	623a      	str	r2, [r7, #32]
 8006cfa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006cfc:	69f9      	ldr	r1, [r7, #28]
 8006cfe:	6a3a      	ldr	r2, [r7, #32]
 8006d00:	e841 2300 	strex	r3, r2, [r1]
 8006d04:	61bb      	str	r3, [r7, #24]
   return(result);
 8006d06:	69bb      	ldr	r3, [r7, #24]
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d1e5      	bne.n	8006cd8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8006d0c:	68fb      	ldr	r3, [r7, #12]
 8006d0e:	2220      	movs	r2, #32
 8006d10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8006d14:	68fb      	ldr	r3, [r7, #12]
 8006d16:	2220      	movs	r2, #32
 8006d18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8006d1c:	68fb      	ldr	r3, [r7, #12]
 8006d1e:	2200      	movs	r2, #0
 8006d20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8006d24:	2303      	movs	r3, #3
 8006d26:	e00f      	b.n	8006d48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006d28:	68fb      	ldr	r3, [r7, #12]
 8006d2a:	681b      	ldr	r3, [r3, #0]
 8006d2c:	681a      	ldr	r2, [r3, #0]
 8006d2e:	68bb      	ldr	r3, [r7, #8]
 8006d30:	4013      	ands	r3, r2
 8006d32:	68ba      	ldr	r2, [r7, #8]
 8006d34:	429a      	cmp	r2, r3
 8006d36:	bf0c      	ite	eq
 8006d38:	2301      	moveq	r3, #1
 8006d3a:	2300      	movne	r3, #0
 8006d3c:	b2db      	uxtb	r3, r3
 8006d3e:	461a      	mov	r2, r3
 8006d40:	79fb      	ldrb	r3, [r7, #7]
 8006d42:	429a      	cmp	r2, r3
 8006d44:	d09f      	beq.n	8006c86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8006d46:	2300      	movs	r3, #0
}
 8006d48:	4618      	mov	r0, r3
 8006d4a:	3740      	adds	r7, #64	; 0x40
 8006d4c:	46bd      	mov	sp, r7
 8006d4e:	bd80      	pop	{r7, pc}

08006d50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006d50:	b480      	push	{r7}
 8006d52:	b085      	sub	sp, #20
 8006d54:	af00      	add	r7, sp, #0
 8006d56:	60f8      	str	r0, [r7, #12]
 8006d58:	60b9      	str	r1, [r7, #8]
 8006d5a:	4613      	mov	r3, r2
 8006d5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006d5e:	68fb      	ldr	r3, [r7, #12]
 8006d60:	68ba      	ldr	r2, [r7, #8]
 8006d62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8006d64:	68fb      	ldr	r3, [r7, #12]
 8006d66:	88fa      	ldrh	r2, [r7, #6]
 8006d68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8006d6a:	68fb      	ldr	r3, [r7, #12]
 8006d6c:	88fa      	ldrh	r2, [r7, #6]
 8006d6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006d70:	68fb      	ldr	r3, [r7, #12]
 8006d72:	2200      	movs	r2, #0
 8006d74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006d76:	68fb      	ldr	r3, [r7, #12]
 8006d78:	2222      	movs	r2, #34	; 0x22
 8006d7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8006d7e:	68fb      	ldr	r3, [r7, #12]
 8006d80:	2200      	movs	r2, #0
 8006d82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	2b00      	cmp	r3, #0
 8006d8c:	d007      	beq.n	8006d9e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006d8e:	68fb      	ldr	r3, [r7, #12]
 8006d90:	681b      	ldr	r3, [r3, #0]
 8006d92:	68da      	ldr	r2, [r3, #12]
 8006d94:	68fb      	ldr	r3, [r7, #12]
 8006d96:	681b      	ldr	r3, [r3, #0]
 8006d98:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8006d9c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006d9e:	68fb      	ldr	r3, [r7, #12]
 8006da0:	681b      	ldr	r3, [r3, #0]
 8006da2:	695a      	ldr	r2, [r3, #20]
 8006da4:	68fb      	ldr	r3, [r7, #12]
 8006da6:	681b      	ldr	r3, [r3, #0]
 8006da8:	f042 0201 	orr.w	r2, r2, #1
 8006dac:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006dae:	68fb      	ldr	r3, [r7, #12]
 8006db0:	681b      	ldr	r3, [r3, #0]
 8006db2:	68da      	ldr	r2, [r3, #12]
 8006db4:	68fb      	ldr	r3, [r7, #12]
 8006db6:	681b      	ldr	r3, [r3, #0]
 8006db8:	f042 0220 	orr.w	r2, r2, #32
 8006dbc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006dbe:	2300      	movs	r3, #0
}
 8006dc0:	4618      	mov	r0, r3
 8006dc2:	3714      	adds	r7, #20
 8006dc4:	46bd      	mov	sp, r7
 8006dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006dca:	4770      	bx	lr

08006dcc <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8006dcc:	b480      	push	{r7}
 8006dce:	b095      	sub	sp, #84	; 0x54
 8006dd0:	af00      	add	r7, sp, #0
 8006dd2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006dd4:	687b      	ldr	r3, [r7, #4]
 8006dd6:	681b      	ldr	r3, [r3, #0]
 8006dd8:	330c      	adds	r3, #12
 8006dda:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006ddc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006dde:	e853 3f00 	ldrex	r3, [r3]
 8006de2:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8006de4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006de6:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006dea:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	330c      	adds	r3, #12
 8006df2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8006df4:	643a      	str	r2, [r7, #64]	; 0x40
 8006df6:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006df8:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8006dfa:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8006dfc:	e841 2300 	strex	r3, r2, [r1]
 8006e00:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8006e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e04:	2b00      	cmp	r3, #0
 8006e06:	d1e5      	bne.n	8006dd4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	3314      	adds	r3, #20
 8006e0e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e10:	6a3b      	ldr	r3, [r7, #32]
 8006e12:	e853 3f00 	ldrex	r3, [r3]
 8006e16:	61fb      	str	r3, [r7, #28]
   return(result);
 8006e18:	69fb      	ldr	r3, [r7, #28]
 8006e1a:	f023 0301 	bic.w	r3, r3, #1
 8006e1e:	64bb      	str	r3, [r7, #72]	; 0x48
 8006e20:	687b      	ldr	r3, [r7, #4]
 8006e22:	681b      	ldr	r3, [r3, #0]
 8006e24:	3314      	adds	r3, #20
 8006e26:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006e28:	62fa      	str	r2, [r7, #44]	; 0x2c
 8006e2a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e2c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8006e2e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8006e30:	e841 2300 	strex	r3, r2, [r1]
 8006e34:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8006e36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006e38:	2b00      	cmp	r3, #0
 8006e3a:	d1e5      	bne.n	8006e08 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006e3c:	687b      	ldr	r3, [r7, #4]
 8006e3e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006e40:	2b01      	cmp	r3, #1
 8006e42:	d119      	bne.n	8006e78 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006e44:	687b      	ldr	r3, [r7, #4]
 8006e46:	681b      	ldr	r3, [r3, #0]
 8006e48:	330c      	adds	r3, #12
 8006e4a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e4c:	68fb      	ldr	r3, [r7, #12]
 8006e4e:	e853 3f00 	ldrex	r3, [r3]
 8006e52:	60bb      	str	r3, [r7, #8]
   return(result);
 8006e54:	68bb      	ldr	r3, [r7, #8]
 8006e56:	f023 0310 	bic.w	r3, r3, #16
 8006e5a:	647b      	str	r3, [r7, #68]	; 0x44
 8006e5c:	687b      	ldr	r3, [r7, #4]
 8006e5e:	681b      	ldr	r3, [r3, #0]
 8006e60:	330c      	adds	r3, #12
 8006e62:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006e64:	61ba      	str	r2, [r7, #24]
 8006e66:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e68:	6979      	ldr	r1, [r7, #20]
 8006e6a:	69ba      	ldr	r2, [r7, #24]
 8006e6c:	e841 2300 	strex	r3, r2, [r1]
 8006e70:	613b      	str	r3, [r7, #16]
   return(result);
 8006e72:	693b      	ldr	r3, [r7, #16]
 8006e74:	2b00      	cmp	r3, #0
 8006e76:	d1e5      	bne.n	8006e44 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8006e78:	687b      	ldr	r3, [r7, #4]
 8006e7a:	2220      	movs	r2, #32
 8006e7c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006e80:	687b      	ldr	r3, [r7, #4]
 8006e82:	2200      	movs	r2, #0
 8006e84:	631a      	str	r2, [r3, #48]	; 0x30
}
 8006e86:	bf00      	nop
 8006e88:	3754      	adds	r7, #84	; 0x54
 8006e8a:	46bd      	mov	sp, r7
 8006e8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e90:	4770      	bx	lr

08006e92 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006e92:	b580      	push	{r7, lr}
 8006e94:	b084      	sub	sp, #16
 8006e96:	af00      	add	r7, sp, #0
 8006e98:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8006e9a:	687b      	ldr	r3, [r7, #4]
 8006e9c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e9e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8006ea6:	68fb      	ldr	r3, [r7, #12]
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006eac:	68f8      	ldr	r0, [r7, #12]
 8006eae:	f7ff fecb 	bl	8006c48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8006eb2:	bf00      	nop
 8006eb4:	3710      	adds	r7, #16
 8006eb6:	46bd      	mov	sp, r7
 8006eb8:	bd80      	pop	{r7, pc}

08006eba <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006eba:	b480      	push	{r7}
 8006ebc:	b085      	sub	sp, #20
 8006ebe:	af00      	add	r7, sp, #0
 8006ec0:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8006ec2:	687b      	ldr	r3, [r7, #4]
 8006ec4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006ec8:	b2db      	uxtb	r3, r3
 8006eca:	2b21      	cmp	r3, #33	; 0x21
 8006ecc:	d13e      	bne.n	8006f4c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	689b      	ldr	r3, [r3, #8]
 8006ed2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006ed6:	d114      	bne.n	8006f02 <UART_Transmit_IT+0x48>
 8006ed8:	687b      	ldr	r3, [r7, #4]
 8006eda:	691b      	ldr	r3, [r3, #16]
 8006edc:	2b00      	cmp	r3, #0
 8006ede:	d110      	bne.n	8006f02 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8006ee0:	687b      	ldr	r3, [r7, #4]
 8006ee2:	6a1b      	ldr	r3, [r3, #32]
 8006ee4:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006ee6:	68fb      	ldr	r3, [r7, #12]
 8006ee8:	881b      	ldrh	r3, [r3, #0]
 8006eea:	461a      	mov	r2, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8006ef4:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8006ef6:	687b      	ldr	r3, [r7, #4]
 8006ef8:	6a1b      	ldr	r3, [r3, #32]
 8006efa:	1c9a      	adds	r2, r3, #2
 8006efc:	687b      	ldr	r3, [r7, #4]
 8006efe:	621a      	str	r2, [r3, #32]
 8006f00:	e008      	b.n	8006f14 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8006f02:	687b      	ldr	r3, [r7, #4]
 8006f04:	6a1b      	ldr	r3, [r3, #32]
 8006f06:	1c59      	adds	r1, r3, #1
 8006f08:	687a      	ldr	r2, [r7, #4]
 8006f0a:	6211      	str	r1, [r2, #32]
 8006f0c:	781a      	ldrb	r2, [r3, #0]
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8006f14:	687b      	ldr	r3, [r7, #4]
 8006f16:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8006f18:	b29b      	uxth	r3, r3
 8006f1a:	3b01      	subs	r3, #1
 8006f1c:	b29b      	uxth	r3, r3
 8006f1e:	687a      	ldr	r2, [r7, #4]
 8006f20:	4619      	mov	r1, r3
 8006f22:	84d1      	strh	r1, [r2, #38]	; 0x26
 8006f24:	2b00      	cmp	r3, #0
 8006f26:	d10f      	bne.n	8006f48 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8006f28:	687b      	ldr	r3, [r7, #4]
 8006f2a:	681b      	ldr	r3, [r3, #0]
 8006f2c:	68da      	ldr	r2, [r3, #12]
 8006f2e:	687b      	ldr	r3, [r7, #4]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006f36:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8006f38:	687b      	ldr	r3, [r7, #4]
 8006f3a:	681b      	ldr	r3, [r3, #0]
 8006f3c:	68da      	ldr	r2, [r3, #12]
 8006f3e:	687b      	ldr	r3, [r7, #4]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8006f46:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8006f48:	2300      	movs	r3, #0
 8006f4a:	e000      	b.n	8006f4e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8006f4c:	2302      	movs	r3, #2
  }
}
 8006f4e:	4618      	mov	r0, r3
 8006f50:	3714      	adds	r7, #20
 8006f52:	46bd      	mov	sp, r7
 8006f54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f58:	4770      	bx	lr

08006f5a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006f5a:	b580      	push	{r7, lr}
 8006f5c:	b082      	sub	sp, #8
 8006f5e:	af00      	add	r7, sp, #0
 8006f60:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8006f62:	687b      	ldr	r3, [r7, #4]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68da      	ldr	r2, [r3, #12]
 8006f68:	687b      	ldr	r3, [r7, #4]
 8006f6a:	681b      	ldr	r3, [r3, #0]
 8006f6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8006f70:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8006f72:	687b      	ldr	r3, [r7, #4]
 8006f74:	2220      	movs	r2, #32
 8006f76:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006f7a:	6878      	ldr	r0, [r7, #4]
 8006f7c:	f7ff fe5a 	bl	8006c34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8006f80:	2300      	movs	r3, #0
}
 8006f82:	4618      	mov	r0, r3
 8006f84:	3708      	adds	r7, #8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}

08006f8a <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006f8a:	b580      	push	{r7, lr}
 8006f8c:	b08c      	sub	sp, #48	; 0x30
 8006f8e:	af00      	add	r7, sp, #0
 8006f90:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006f92:	687b      	ldr	r3, [r7, #4]
 8006f94:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006f98:	b2db      	uxtb	r3, r3
 8006f9a:	2b22      	cmp	r3, #34	; 0x22
 8006f9c:	f040 80ab 	bne.w	80070f6 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006fa0:	687b      	ldr	r3, [r7, #4]
 8006fa2:	689b      	ldr	r3, [r3, #8]
 8006fa4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fa8:	d117      	bne.n	8006fda <UART_Receive_IT+0x50>
 8006faa:	687b      	ldr	r3, [r7, #4]
 8006fac:	691b      	ldr	r3, [r3, #16]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d113      	bne.n	8006fda <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8006fb2:	2300      	movs	r3, #0
 8006fb4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fba:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	681b      	ldr	r3, [r3, #0]
 8006fc0:	685b      	ldr	r3, [r3, #4]
 8006fc2:	b29b      	uxth	r3, r3
 8006fc4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006fc8:	b29a      	uxth	r2, r3
 8006fca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006fcc:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8006fce:	687b      	ldr	r3, [r7, #4]
 8006fd0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fd2:	1c9a      	adds	r2, r3, #2
 8006fd4:	687b      	ldr	r3, [r7, #4]
 8006fd6:	629a      	str	r2, [r3, #40]	; 0x28
 8006fd8:	e026      	b.n	8007028 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8006fda:	687b      	ldr	r3, [r7, #4]
 8006fdc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006fde:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8006fe0:	2300      	movs	r3, #0
 8006fe2:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006fe4:	687b      	ldr	r3, [r7, #4]
 8006fe6:	689b      	ldr	r3, [r3, #8]
 8006fe8:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006fec:	d007      	beq.n	8006ffe <UART_Receive_IT+0x74>
 8006fee:	687b      	ldr	r3, [r7, #4]
 8006ff0:	689b      	ldr	r3, [r3, #8]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d10a      	bne.n	800700c <UART_Receive_IT+0x82>
 8006ff6:	687b      	ldr	r3, [r7, #4]
 8006ff8:	691b      	ldr	r3, [r3, #16]
 8006ffa:	2b00      	cmp	r3, #0
 8006ffc:	d106      	bne.n	800700c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8006ffe:	687b      	ldr	r3, [r7, #4]
 8007000:	681b      	ldr	r3, [r3, #0]
 8007002:	685b      	ldr	r3, [r3, #4]
 8007004:	b2da      	uxtb	r2, r3
 8007006:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007008:	701a      	strb	r2, [r3, #0]
 800700a:	e008      	b.n	800701e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800700c:	687b      	ldr	r3, [r7, #4]
 800700e:	681b      	ldr	r3, [r3, #0]
 8007010:	685b      	ldr	r3, [r3, #4]
 8007012:	b2db      	uxtb	r3, r3
 8007014:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007018:	b2da      	uxtb	r2, r3
 800701a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800701c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800701e:	687b      	ldr	r3, [r7, #4]
 8007020:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007022:	1c5a      	adds	r2, r3, #1
 8007024:	687b      	ldr	r3, [r7, #4]
 8007026:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800702c:	b29b      	uxth	r3, r3
 800702e:	3b01      	subs	r3, #1
 8007030:	b29b      	uxth	r3, r3
 8007032:	687a      	ldr	r2, [r7, #4]
 8007034:	4619      	mov	r1, r3
 8007036:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007038:	2b00      	cmp	r3, #0
 800703a:	d15a      	bne.n	80070f2 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800703c:	687b      	ldr	r3, [r7, #4]
 800703e:	681b      	ldr	r3, [r3, #0]
 8007040:	68da      	ldr	r2, [r3, #12]
 8007042:	687b      	ldr	r3, [r7, #4]
 8007044:	681b      	ldr	r3, [r3, #0]
 8007046:	f022 0220 	bic.w	r2, r2, #32
 800704a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	681b      	ldr	r3, [r3, #0]
 8007050:	68da      	ldr	r2, [r3, #12]
 8007052:	687b      	ldr	r3, [r7, #4]
 8007054:	681b      	ldr	r3, [r3, #0]
 8007056:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800705a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	681b      	ldr	r3, [r3, #0]
 8007060:	695a      	ldr	r2, [r3, #20]
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	681b      	ldr	r3, [r3, #0]
 8007066:	f022 0201 	bic.w	r2, r2, #1
 800706a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800706c:	687b      	ldr	r3, [r7, #4]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007074:	687b      	ldr	r3, [r7, #4]
 8007076:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007078:	2b01      	cmp	r3, #1
 800707a:	d135      	bne.n	80070e8 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2200      	movs	r2, #0
 8007080:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	330c      	adds	r3, #12
 8007088:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800708a:	697b      	ldr	r3, [r7, #20]
 800708c:	e853 3f00 	ldrex	r3, [r3]
 8007090:	613b      	str	r3, [r7, #16]
   return(result);
 8007092:	693b      	ldr	r3, [r7, #16]
 8007094:	f023 0310 	bic.w	r3, r3, #16
 8007098:	627b      	str	r3, [r7, #36]	; 0x24
 800709a:	687b      	ldr	r3, [r7, #4]
 800709c:	681b      	ldr	r3, [r3, #0]
 800709e:	330c      	adds	r3, #12
 80070a0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80070a2:	623a      	str	r2, [r7, #32]
 80070a4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80070a6:	69f9      	ldr	r1, [r7, #28]
 80070a8:	6a3a      	ldr	r2, [r7, #32]
 80070aa:	e841 2300 	strex	r3, r2, [r1]
 80070ae:	61bb      	str	r3, [r7, #24]
   return(result);
 80070b0:	69bb      	ldr	r3, [r7, #24]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d1e5      	bne.n	8007082 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80070b6:	687b      	ldr	r3, [r7, #4]
 80070b8:	681b      	ldr	r3, [r3, #0]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f003 0310 	and.w	r3, r3, #16
 80070c0:	2b10      	cmp	r3, #16
 80070c2:	d10a      	bne.n	80070da <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80070c4:	2300      	movs	r3, #0
 80070c6:	60fb      	str	r3, [r7, #12]
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	681b      	ldr	r3, [r3, #0]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	60fb      	str	r3, [r7, #12]
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	681b      	ldr	r3, [r3, #0]
 80070d4:	685b      	ldr	r3, [r3, #4]
 80070d6:	60fb      	str	r3, [r7, #12]
 80070d8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80070da:	687b      	ldr	r3, [r7, #4]
 80070dc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80070de:	4619      	mov	r1, r3
 80070e0:	6878      	ldr	r0, [r7, #4]
 80070e2:	f7ff fdbb 	bl	8006c5c <HAL_UARTEx_RxEventCallback>
 80070e6:	e002      	b.n	80070ee <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80070e8:	6878      	ldr	r0, [r7, #4]
 80070ea:	f7fb fc63 	bl	80029b4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80070ee:	2300      	movs	r3, #0
 80070f0:	e002      	b.n	80070f8 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80070f2:	2300      	movs	r3, #0
 80070f4:	e000      	b.n	80070f8 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80070f6:	2302      	movs	r3, #2
  }
}
 80070f8:	4618      	mov	r0, r3
 80070fa:	3730      	adds	r7, #48	; 0x30
 80070fc:	46bd      	mov	sp, r7
 80070fe:	bd80      	pop	{r7, pc}

08007100 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007100:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007104:	b0c0      	sub	sp, #256	; 0x100
 8007106:	af00      	add	r7, sp, #0
 8007108:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800710c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	691b      	ldr	r3, [r3, #16]
 8007114:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007118:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800711c:	68d9      	ldr	r1, [r3, #12]
 800711e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007122:	681a      	ldr	r2, [r3, #0]
 8007124:	ea40 0301 	orr.w	r3, r0, r1
 8007128:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800712a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800712e:	689a      	ldr	r2, [r3, #8]
 8007130:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007134:	691b      	ldr	r3, [r3, #16]
 8007136:	431a      	orrs	r2, r3
 8007138:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800713c:	695b      	ldr	r3, [r3, #20]
 800713e:	431a      	orrs	r2, r3
 8007140:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007144:	69db      	ldr	r3, [r3, #28]
 8007146:	4313      	orrs	r3, r2
 8007148:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800714c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007150:	681b      	ldr	r3, [r3, #0]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8007158:	f021 010c 	bic.w	r1, r1, #12
 800715c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007160:	681a      	ldr	r2, [r3, #0]
 8007162:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8007166:	430b      	orrs	r3, r1
 8007168:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800716a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800716e:	681b      	ldr	r3, [r3, #0]
 8007170:	695b      	ldr	r3, [r3, #20]
 8007172:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8007176:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800717a:	6999      	ldr	r1, [r3, #24]
 800717c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007180:	681a      	ldr	r2, [r3, #0]
 8007182:	ea40 0301 	orr.w	r3, r0, r1
 8007186:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8007188:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	4b8f      	ldr	r3, [pc, #572]	; (80073cc <UART_SetConfig+0x2cc>)
 8007190:	429a      	cmp	r2, r3
 8007192:	d005      	beq.n	80071a0 <UART_SetConfig+0xa0>
 8007194:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	4b8d      	ldr	r3, [pc, #564]	; (80073d0 <UART_SetConfig+0x2d0>)
 800719c:	429a      	cmp	r2, r3
 800719e:	d104      	bne.n	80071aa <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80071a0:	f7fe fac6 	bl	8005730 <HAL_RCC_GetPCLK2Freq>
 80071a4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80071a8:	e003      	b.n	80071b2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80071aa:	f7fe faad 	bl	8005708 <HAL_RCC_GetPCLK1Freq>
 80071ae:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80071b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80071b6:	69db      	ldr	r3, [r3, #28]
 80071b8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80071bc:	f040 810c 	bne.w	80073d8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80071c0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80071c4:	2200      	movs	r2, #0
 80071c6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80071ca:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80071ce:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80071d2:	4622      	mov	r2, r4
 80071d4:	462b      	mov	r3, r5
 80071d6:	1891      	adds	r1, r2, r2
 80071d8:	65b9      	str	r1, [r7, #88]	; 0x58
 80071da:	415b      	adcs	r3, r3
 80071dc:	65fb      	str	r3, [r7, #92]	; 0x5c
 80071de:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80071e2:	4621      	mov	r1, r4
 80071e4:	eb12 0801 	adds.w	r8, r2, r1
 80071e8:	4629      	mov	r1, r5
 80071ea:	eb43 0901 	adc.w	r9, r3, r1
 80071ee:	f04f 0200 	mov.w	r2, #0
 80071f2:	f04f 0300 	mov.w	r3, #0
 80071f6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80071fa:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80071fe:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8007202:	4690      	mov	r8, r2
 8007204:	4699      	mov	r9, r3
 8007206:	4623      	mov	r3, r4
 8007208:	eb18 0303 	adds.w	r3, r8, r3
 800720c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007210:	462b      	mov	r3, r5
 8007212:	eb49 0303 	adc.w	r3, r9, r3
 8007216:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800721a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800721e:	685b      	ldr	r3, [r3, #4]
 8007220:	2200      	movs	r2, #0
 8007222:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8007226:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800722a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800722e:	460b      	mov	r3, r1
 8007230:	18db      	adds	r3, r3, r3
 8007232:	653b      	str	r3, [r7, #80]	; 0x50
 8007234:	4613      	mov	r3, r2
 8007236:	eb42 0303 	adc.w	r3, r2, r3
 800723a:	657b      	str	r3, [r7, #84]	; 0x54
 800723c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007240:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8007244:	f7f9 fd20 	bl	8000c88 <__aeabi_uldivmod>
 8007248:	4602      	mov	r2, r0
 800724a:	460b      	mov	r3, r1
 800724c:	4b61      	ldr	r3, [pc, #388]	; (80073d4 <UART_SetConfig+0x2d4>)
 800724e:	fba3 2302 	umull	r2, r3, r3, r2
 8007252:	095b      	lsrs	r3, r3, #5
 8007254:	011c      	lsls	r4, r3, #4
 8007256:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800725a:	2200      	movs	r2, #0
 800725c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8007260:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8007264:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8007268:	4642      	mov	r2, r8
 800726a:	464b      	mov	r3, r9
 800726c:	1891      	adds	r1, r2, r2
 800726e:	64b9      	str	r1, [r7, #72]	; 0x48
 8007270:	415b      	adcs	r3, r3
 8007272:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007274:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8007278:	4641      	mov	r1, r8
 800727a:	eb12 0a01 	adds.w	sl, r2, r1
 800727e:	4649      	mov	r1, r9
 8007280:	eb43 0b01 	adc.w	fp, r3, r1
 8007284:	f04f 0200 	mov.w	r2, #0
 8007288:	f04f 0300 	mov.w	r3, #0
 800728c:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8007290:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8007294:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8007298:	4692      	mov	sl, r2
 800729a:	469b      	mov	fp, r3
 800729c:	4643      	mov	r3, r8
 800729e:	eb1a 0303 	adds.w	r3, sl, r3
 80072a2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80072a6:	464b      	mov	r3, r9
 80072a8:	eb4b 0303 	adc.w	r3, fp, r3
 80072ac:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80072b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80072b4:	685b      	ldr	r3, [r3, #4]
 80072b6:	2200      	movs	r2, #0
 80072b8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80072bc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80072c0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80072c4:	460b      	mov	r3, r1
 80072c6:	18db      	adds	r3, r3, r3
 80072c8:	643b      	str	r3, [r7, #64]	; 0x40
 80072ca:	4613      	mov	r3, r2
 80072cc:	eb42 0303 	adc.w	r3, r2, r3
 80072d0:	647b      	str	r3, [r7, #68]	; 0x44
 80072d2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80072d6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80072da:	f7f9 fcd5 	bl	8000c88 <__aeabi_uldivmod>
 80072de:	4602      	mov	r2, r0
 80072e0:	460b      	mov	r3, r1
 80072e2:	4611      	mov	r1, r2
 80072e4:	4b3b      	ldr	r3, [pc, #236]	; (80073d4 <UART_SetConfig+0x2d4>)
 80072e6:	fba3 2301 	umull	r2, r3, r3, r1
 80072ea:	095b      	lsrs	r3, r3, #5
 80072ec:	2264      	movs	r2, #100	; 0x64
 80072ee:	fb02 f303 	mul.w	r3, r2, r3
 80072f2:	1acb      	subs	r3, r1, r3
 80072f4:	00db      	lsls	r3, r3, #3
 80072f6:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80072fa:	4b36      	ldr	r3, [pc, #216]	; (80073d4 <UART_SetConfig+0x2d4>)
 80072fc:	fba3 2302 	umull	r2, r3, r3, r2
 8007300:	095b      	lsrs	r3, r3, #5
 8007302:	005b      	lsls	r3, r3, #1
 8007304:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007308:	441c      	add	r4, r3
 800730a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800730e:	2200      	movs	r2, #0
 8007310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8007314:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007318:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800731c:	4642      	mov	r2, r8
 800731e:	464b      	mov	r3, r9
 8007320:	1891      	adds	r1, r2, r2
 8007322:	63b9      	str	r1, [r7, #56]	; 0x38
 8007324:	415b      	adcs	r3, r3
 8007326:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007328:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800732c:	4641      	mov	r1, r8
 800732e:	1851      	adds	r1, r2, r1
 8007330:	6339      	str	r1, [r7, #48]	; 0x30
 8007332:	4649      	mov	r1, r9
 8007334:	414b      	adcs	r3, r1
 8007336:	637b      	str	r3, [r7, #52]	; 0x34
 8007338:	f04f 0200 	mov.w	r2, #0
 800733c:	f04f 0300 	mov.w	r3, #0
 8007340:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8007344:	4659      	mov	r1, fp
 8007346:	00cb      	lsls	r3, r1, #3
 8007348:	4651      	mov	r1, sl
 800734a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800734e:	4651      	mov	r1, sl
 8007350:	00ca      	lsls	r2, r1, #3
 8007352:	4610      	mov	r0, r2
 8007354:	4619      	mov	r1, r3
 8007356:	4603      	mov	r3, r0
 8007358:	4642      	mov	r2, r8
 800735a:	189b      	adds	r3, r3, r2
 800735c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8007360:	464b      	mov	r3, r9
 8007362:	460a      	mov	r2, r1
 8007364:	eb42 0303 	adc.w	r3, r2, r3
 8007368:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800736c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007370:	685b      	ldr	r3, [r3, #4]
 8007372:	2200      	movs	r2, #0
 8007374:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8007378:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800737c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8007380:	460b      	mov	r3, r1
 8007382:	18db      	adds	r3, r3, r3
 8007384:	62bb      	str	r3, [r7, #40]	; 0x28
 8007386:	4613      	mov	r3, r2
 8007388:	eb42 0303 	adc.w	r3, r2, r3
 800738c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800738e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8007392:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8007396:	f7f9 fc77 	bl	8000c88 <__aeabi_uldivmod>
 800739a:	4602      	mov	r2, r0
 800739c:	460b      	mov	r3, r1
 800739e:	4b0d      	ldr	r3, [pc, #52]	; (80073d4 <UART_SetConfig+0x2d4>)
 80073a0:	fba3 1302 	umull	r1, r3, r3, r2
 80073a4:	095b      	lsrs	r3, r3, #5
 80073a6:	2164      	movs	r1, #100	; 0x64
 80073a8:	fb01 f303 	mul.w	r3, r1, r3
 80073ac:	1ad3      	subs	r3, r2, r3
 80073ae:	00db      	lsls	r3, r3, #3
 80073b0:	3332      	adds	r3, #50	; 0x32
 80073b2:	4a08      	ldr	r2, [pc, #32]	; (80073d4 <UART_SetConfig+0x2d4>)
 80073b4:	fba2 2303 	umull	r2, r3, r2, r3
 80073b8:	095b      	lsrs	r3, r3, #5
 80073ba:	f003 0207 	and.w	r2, r3, #7
 80073be:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4422      	add	r2, r4
 80073c6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80073c8:	e105      	b.n	80075d6 <UART_SetConfig+0x4d6>
 80073ca:	bf00      	nop
 80073cc:	40011000 	.word	0x40011000
 80073d0:	40011400 	.word	0x40011400
 80073d4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80073d8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80073dc:	2200      	movs	r2, #0
 80073de:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80073e2:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80073e6:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80073ea:	4642      	mov	r2, r8
 80073ec:	464b      	mov	r3, r9
 80073ee:	1891      	adds	r1, r2, r2
 80073f0:	6239      	str	r1, [r7, #32]
 80073f2:	415b      	adcs	r3, r3
 80073f4:	627b      	str	r3, [r7, #36]	; 0x24
 80073f6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80073fa:	4641      	mov	r1, r8
 80073fc:	1854      	adds	r4, r2, r1
 80073fe:	4649      	mov	r1, r9
 8007400:	eb43 0501 	adc.w	r5, r3, r1
 8007404:	f04f 0200 	mov.w	r2, #0
 8007408:	f04f 0300 	mov.w	r3, #0
 800740c:	00eb      	lsls	r3, r5, #3
 800740e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007412:	00e2      	lsls	r2, r4, #3
 8007414:	4614      	mov	r4, r2
 8007416:	461d      	mov	r5, r3
 8007418:	4643      	mov	r3, r8
 800741a:	18e3      	adds	r3, r4, r3
 800741c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007420:	464b      	mov	r3, r9
 8007422:	eb45 0303 	adc.w	r3, r5, r3
 8007426:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800742a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800742e:	685b      	ldr	r3, [r3, #4]
 8007430:	2200      	movs	r2, #0
 8007432:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8007436:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800743a:	f04f 0200 	mov.w	r2, #0
 800743e:	f04f 0300 	mov.w	r3, #0
 8007442:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8007446:	4629      	mov	r1, r5
 8007448:	008b      	lsls	r3, r1, #2
 800744a:	4621      	mov	r1, r4
 800744c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007450:	4621      	mov	r1, r4
 8007452:	008a      	lsls	r2, r1, #2
 8007454:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8007458:	f7f9 fc16 	bl	8000c88 <__aeabi_uldivmod>
 800745c:	4602      	mov	r2, r0
 800745e:	460b      	mov	r3, r1
 8007460:	4b60      	ldr	r3, [pc, #384]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007462:	fba3 2302 	umull	r2, r3, r3, r2
 8007466:	095b      	lsrs	r3, r3, #5
 8007468:	011c      	lsls	r4, r3, #4
 800746a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800746e:	2200      	movs	r2, #0
 8007470:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8007474:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8007478:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800747c:	4642      	mov	r2, r8
 800747e:	464b      	mov	r3, r9
 8007480:	1891      	adds	r1, r2, r2
 8007482:	61b9      	str	r1, [r7, #24]
 8007484:	415b      	adcs	r3, r3
 8007486:	61fb      	str	r3, [r7, #28]
 8007488:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800748c:	4641      	mov	r1, r8
 800748e:	1851      	adds	r1, r2, r1
 8007490:	6139      	str	r1, [r7, #16]
 8007492:	4649      	mov	r1, r9
 8007494:	414b      	adcs	r3, r1
 8007496:	617b      	str	r3, [r7, #20]
 8007498:	f04f 0200 	mov.w	r2, #0
 800749c:	f04f 0300 	mov.w	r3, #0
 80074a0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80074a4:	4659      	mov	r1, fp
 80074a6:	00cb      	lsls	r3, r1, #3
 80074a8:	4651      	mov	r1, sl
 80074aa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80074ae:	4651      	mov	r1, sl
 80074b0:	00ca      	lsls	r2, r1, #3
 80074b2:	4610      	mov	r0, r2
 80074b4:	4619      	mov	r1, r3
 80074b6:	4603      	mov	r3, r0
 80074b8:	4642      	mov	r2, r8
 80074ba:	189b      	adds	r3, r3, r2
 80074bc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80074c0:	464b      	mov	r3, r9
 80074c2:	460a      	mov	r2, r1
 80074c4:	eb42 0303 	adc.w	r3, r2, r3
 80074c8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80074cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d0:	685b      	ldr	r3, [r3, #4]
 80074d2:	2200      	movs	r2, #0
 80074d4:	67bb      	str	r3, [r7, #120]	; 0x78
 80074d6:	67fa      	str	r2, [r7, #124]	; 0x7c
 80074d8:	f04f 0200 	mov.w	r2, #0
 80074dc:	f04f 0300 	mov.w	r3, #0
 80074e0:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80074e4:	4649      	mov	r1, r9
 80074e6:	008b      	lsls	r3, r1, #2
 80074e8:	4641      	mov	r1, r8
 80074ea:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80074ee:	4641      	mov	r1, r8
 80074f0:	008a      	lsls	r2, r1, #2
 80074f2:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80074f6:	f7f9 fbc7 	bl	8000c88 <__aeabi_uldivmod>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4b39      	ldr	r3, [pc, #228]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007500:	fba3 1302 	umull	r1, r3, r3, r2
 8007504:	095b      	lsrs	r3, r3, #5
 8007506:	2164      	movs	r1, #100	; 0x64
 8007508:	fb01 f303 	mul.w	r3, r1, r3
 800750c:	1ad3      	subs	r3, r2, r3
 800750e:	011b      	lsls	r3, r3, #4
 8007510:	3332      	adds	r3, #50	; 0x32
 8007512:	4a34      	ldr	r2, [pc, #208]	; (80075e4 <UART_SetConfig+0x4e4>)
 8007514:	fba2 2303 	umull	r2, r3, r2, r3
 8007518:	095b      	lsrs	r3, r3, #5
 800751a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800751e:	441c      	add	r4, r3
 8007520:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007524:	2200      	movs	r2, #0
 8007526:	673b      	str	r3, [r7, #112]	; 0x70
 8007528:	677a      	str	r2, [r7, #116]	; 0x74
 800752a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800752e:	4642      	mov	r2, r8
 8007530:	464b      	mov	r3, r9
 8007532:	1891      	adds	r1, r2, r2
 8007534:	60b9      	str	r1, [r7, #8]
 8007536:	415b      	adcs	r3, r3
 8007538:	60fb      	str	r3, [r7, #12]
 800753a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800753e:	4641      	mov	r1, r8
 8007540:	1851      	adds	r1, r2, r1
 8007542:	6039      	str	r1, [r7, #0]
 8007544:	4649      	mov	r1, r9
 8007546:	414b      	adcs	r3, r1
 8007548:	607b      	str	r3, [r7, #4]
 800754a:	f04f 0200 	mov.w	r2, #0
 800754e:	f04f 0300 	mov.w	r3, #0
 8007552:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8007556:	4659      	mov	r1, fp
 8007558:	00cb      	lsls	r3, r1, #3
 800755a:	4651      	mov	r1, sl
 800755c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007560:	4651      	mov	r1, sl
 8007562:	00ca      	lsls	r2, r1, #3
 8007564:	4610      	mov	r0, r2
 8007566:	4619      	mov	r1, r3
 8007568:	4603      	mov	r3, r0
 800756a:	4642      	mov	r2, r8
 800756c:	189b      	adds	r3, r3, r2
 800756e:	66bb      	str	r3, [r7, #104]	; 0x68
 8007570:	464b      	mov	r3, r9
 8007572:	460a      	mov	r2, r1
 8007574:	eb42 0303 	adc.w	r3, r2, r3
 8007578:	66fb      	str	r3, [r7, #108]	; 0x6c
 800757a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800757e:	685b      	ldr	r3, [r3, #4]
 8007580:	2200      	movs	r2, #0
 8007582:	663b      	str	r3, [r7, #96]	; 0x60
 8007584:	667a      	str	r2, [r7, #100]	; 0x64
 8007586:	f04f 0200 	mov.w	r2, #0
 800758a:	f04f 0300 	mov.w	r3, #0
 800758e:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8007592:	4649      	mov	r1, r9
 8007594:	008b      	lsls	r3, r1, #2
 8007596:	4641      	mov	r1, r8
 8007598:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800759c:	4641      	mov	r1, r8
 800759e:	008a      	lsls	r2, r1, #2
 80075a0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80075a4:	f7f9 fb70 	bl	8000c88 <__aeabi_uldivmod>
 80075a8:	4602      	mov	r2, r0
 80075aa:	460b      	mov	r3, r1
 80075ac:	4b0d      	ldr	r3, [pc, #52]	; (80075e4 <UART_SetConfig+0x4e4>)
 80075ae:	fba3 1302 	umull	r1, r3, r3, r2
 80075b2:	095b      	lsrs	r3, r3, #5
 80075b4:	2164      	movs	r1, #100	; 0x64
 80075b6:	fb01 f303 	mul.w	r3, r1, r3
 80075ba:	1ad3      	subs	r3, r2, r3
 80075bc:	011b      	lsls	r3, r3, #4
 80075be:	3332      	adds	r3, #50	; 0x32
 80075c0:	4a08      	ldr	r2, [pc, #32]	; (80075e4 <UART_SetConfig+0x4e4>)
 80075c2:	fba2 2303 	umull	r2, r3, r2, r3
 80075c6:	095b      	lsrs	r3, r3, #5
 80075c8:	f003 020f 	and.w	r2, r3, #15
 80075cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80075d0:	681b      	ldr	r3, [r3, #0]
 80075d2:	4422      	add	r2, r4
 80075d4:	609a      	str	r2, [r3, #8]
}
 80075d6:	bf00      	nop
 80075d8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80075dc:	46bd      	mov	sp, r7
 80075de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80075e2:	bf00      	nop
 80075e4:	51eb851f 	.word	0x51eb851f

080075e8 <atof>:
 80075e8:	2100      	movs	r1, #0
 80075ea:	f001 bcfd 	b.w	8008fe8 <strtod>
	...

080075f0 <__errno>:
 80075f0:	4b01      	ldr	r3, [pc, #4]	; (80075f8 <__errno+0x8>)
 80075f2:	6818      	ldr	r0, [r3, #0]
 80075f4:	4770      	bx	lr
 80075f6:	bf00      	nop
 80075f8:	20000020 	.word	0x20000020

080075fc <__libc_init_array>:
 80075fc:	b570      	push	{r4, r5, r6, lr}
 80075fe:	4d0d      	ldr	r5, [pc, #52]	; (8007634 <__libc_init_array+0x38>)
 8007600:	4c0d      	ldr	r4, [pc, #52]	; (8007638 <__libc_init_array+0x3c>)
 8007602:	1b64      	subs	r4, r4, r5
 8007604:	10a4      	asrs	r4, r4, #2
 8007606:	2600      	movs	r6, #0
 8007608:	42a6      	cmp	r6, r4
 800760a:	d109      	bne.n	8007620 <__libc_init_array+0x24>
 800760c:	4d0b      	ldr	r5, [pc, #44]	; (800763c <__libc_init_array+0x40>)
 800760e:	4c0c      	ldr	r4, [pc, #48]	; (8007640 <__libc_init_array+0x44>)
 8007610:	f004 fcfe 	bl	800c010 <_init>
 8007614:	1b64      	subs	r4, r4, r5
 8007616:	10a4      	asrs	r4, r4, #2
 8007618:	2600      	movs	r6, #0
 800761a:	42a6      	cmp	r6, r4
 800761c:	d105      	bne.n	800762a <__libc_init_array+0x2e>
 800761e:	bd70      	pop	{r4, r5, r6, pc}
 8007620:	f855 3b04 	ldr.w	r3, [r5], #4
 8007624:	4798      	blx	r3
 8007626:	3601      	adds	r6, #1
 8007628:	e7ee      	b.n	8007608 <__libc_init_array+0xc>
 800762a:	f855 3b04 	ldr.w	r3, [r5], #4
 800762e:	4798      	blx	r3
 8007630:	3601      	adds	r6, #1
 8007632:	e7f2      	b.n	800761a <__libc_init_array+0x1e>
 8007634:	0800c658 	.word	0x0800c658
 8007638:	0800c658 	.word	0x0800c658
 800763c:	0800c658 	.word	0x0800c658
 8007640:	0800c65c 	.word	0x0800c65c

08007644 <memset>:
 8007644:	4402      	add	r2, r0
 8007646:	4603      	mov	r3, r0
 8007648:	4293      	cmp	r3, r2
 800764a:	d100      	bne.n	800764e <memset+0xa>
 800764c:	4770      	bx	lr
 800764e:	f803 1b01 	strb.w	r1, [r3], #1
 8007652:	e7f9      	b.n	8007648 <memset+0x4>

08007654 <__cvt>:
 8007654:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007658:	ec55 4b10 	vmov	r4, r5, d0
 800765c:	2d00      	cmp	r5, #0
 800765e:	460e      	mov	r6, r1
 8007660:	4619      	mov	r1, r3
 8007662:	462b      	mov	r3, r5
 8007664:	bfbb      	ittet	lt
 8007666:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800766a:	461d      	movlt	r5, r3
 800766c:	2300      	movge	r3, #0
 800766e:	232d      	movlt	r3, #45	; 0x2d
 8007670:	700b      	strb	r3, [r1, #0]
 8007672:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8007674:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8007678:	4691      	mov	r9, r2
 800767a:	f023 0820 	bic.w	r8, r3, #32
 800767e:	bfbc      	itt	lt
 8007680:	4622      	movlt	r2, r4
 8007682:	4614      	movlt	r4, r2
 8007684:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007688:	d005      	beq.n	8007696 <__cvt+0x42>
 800768a:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800768e:	d100      	bne.n	8007692 <__cvt+0x3e>
 8007690:	3601      	adds	r6, #1
 8007692:	2102      	movs	r1, #2
 8007694:	e000      	b.n	8007698 <__cvt+0x44>
 8007696:	2103      	movs	r1, #3
 8007698:	ab03      	add	r3, sp, #12
 800769a:	9301      	str	r3, [sp, #4]
 800769c:	ab02      	add	r3, sp, #8
 800769e:	9300      	str	r3, [sp, #0]
 80076a0:	ec45 4b10 	vmov	d0, r4, r5
 80076a4:	4653      	mov	r3, sl
 80076a6:	4632      	mov	r2, r6
 80076a8:	f001 fe36 	bl	8009318 <_dtoa_r>
 80076ac:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80076b0:	4607      	mov	r7, r0
 80076b2:	d102      	bne.n	80076ba <__cvt+0x66>
 80076b4:	f019 0f01 	tst.w	r9, #1
 80076b8:	d022      	beq.n	8007700 <__cvt+0xac>
 80076ba:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80076be:	eb07 0906 	add.w	r9, r7, r6
 80076c2:	d110      	bne.n	80076e6 <__cvt+0x92>
 80076c4:	783b      	ldrb	r3, [r7, #0]
 80076c6:	2b30      	cmp	r3, #48	; 0x30
 80076c8:	d10a      	bne.n	80076e0 <__cvt+0x8c>
 80076ca:	2200      	movs	r2, #0
 80076cc:	2300      	movs	r3, #0
 80076ce:	4620      	mov	r0, r4
 80076d0:	4629      	mov	r1, r5
 80076d2:	f7f9 f9f9 	bl	8000ac8 <__aeabi_dcmpeq>
 80076d6:	b918      	cbnz	r0, 80076e0 <__cvt+0x8c>
 80076d8:	f1c6 0601 	rsb	r6, r6, #1
 80076dc:	f8ca 6000 	str.w	r6, [sl]
 80076e0:	f8da 3000 	ldr.w	r3, [sl]
 80076e4:	4499      	add	r9, r3
 80076e6:	2200      	movs	r2, #0
 80076e8:	2300      	movs	r3, #0
 80076ea:	4620      	mov	r0, r4
 80076ec:	4629      	mov	r1, r5
 80076ee:	f7f9 f9eb 	bl	8000ac8 <__aeabi_dcmpeq>
 80076f2:	b108      	cbz	r0, 80076f8 <__cvt+0xa4>
 80076f4:	f8cd 900c 	str.w	r9, [sp, #12]
 80076f8:	2230      	movs	r2, #48	; 0x30
 80076fa:	9b03      	ldr	r3, [sp, #12]
 80076fc:	454b      	cmp	r3, r9
 80076fe:	d307      	bcc.n	8007710 <__cvt+0xbc>
 8007700:	9b03      	ldr	r3, [sp, #12]
 8007702:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007704:	1bdb      	subs	r3, r3, r7
 8007706:	4638      	mov	r0, r7
 8007708:	6013      	str	r3, [r2, #0]
 800770a:	b004      	add	sp, #16
 800770c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007710:	1c59      	adds	r1, r3, #1
 8007712:	9103      	str	r1, [sp, #12]
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	e7f0      	b.n	80076fa <__cvt+0xa6>

08007718 <__exponent>:
 8007718:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800771a:	4603      	mov	r3, r0
 800771c:	2900      	cmp	r1, #0
 800771e:	bfb8      	it	lt
 8007720:	4249      	neglt	r1, r1
 8007722:	f803 2b02 	strb.w	r2, [r3], #2
 8007726:	bfb4      	ite	lt
 8007728:	222d      	movlt	r2, #45	; 0x2d
 800772a:	222b      	movge	r2, #43	; 0x2b
 800772c:	2909      	cmp	r1, #9
 800772e:	7042      	strb	r2, [r0, #1]
 8007730:	dd2a      	ble.n	8007788 <__exponent+0x70>
 8007732:	f10d 0407 	add.w	r4, sp, #7
 8007736:	46a4      	mov	ip, r4
 8007738:	270a      	movs	r7, #10
 800773a:	46a6      	mov	lr, r4
 800773c:	460a      	mov	r2, r1
 800773e:	fb91 f6f7 	sdiv	r6, r1, r7
 8007742:	fb07 1516 	mls	r5, r7, r6, r1
 8007746:	3530      	adds	r5, #48	; 0x30
 8007748:	2a63      	cmp	r2, #99	; 0x63
 800774a:	f104 34ff 	add.w	r4, r4, #4294967295
 800774e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007752:	4631      	mov	r1, r6
 8007754:	dcf1      	bgt.n	800773a <__exponent+0x22>
 8007756:	3130      	adds	r1, #48	; 0x30
 8007758:	f1ae 0502 	sub.w	r5, lr, #2
 800775c:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007760:	1c44      	adds	r4, r0, #1
 8007762:	4629      	mov	r1, r5
 8007764:	4561      	cmp	r1, ip
 8007766:	d30a      	bcc.n	800777e <__exponent+0x66>
 8007768:	f10d 0209 	add.w	r2, sp, #9
 800776c:	eba2 020e 	sub.w	r2, r2, lr
 8007770:	4565      	cmp	r5, ip
 8007772:	bf88      	it	hi
 8007774:	2200      	movhi	r2, #0
 8007776:	4413      	add	r3, r2
 8007778:	1a18      	subs	r0, r3, r0
 800777a:	b003      	add	sp, #12
 800777c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800777e:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007782:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007786:	e7ed      	b.n	8007764 <__exponent+0x4c>
 8007788:	2330      	movs	r3, #48	; 0x30
 800778a:	3130      	adds	r1, #48	; 0x30
 800778c:	7083      	strb	r3, [r0, #2]
 800778e:	70c1      	strb	r1, [r0, #3]
 8007790:	1d03      	adds	r3, r0, #4
 8007792:	e7f1      	b.n	8007778 <__exponent+0x60>

08007794 <_printf_float>:
 8007794:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007798:	ed2d 8b02 	vpush	{d8}
 800779c:	b08d      	sub	sp, #52	; 0x34
 800779e:	460c      	mov	r4, r1
 80077a0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80077a4:	4616      	mov	r6, r2
 80077a6:	461f      	mov	r7, r3
 80077a8:	4605      	mov	r5, r0
 80077aa:	f002 ff25 	bl	800a5f8 <_localeconv_r>
 80077ae:	f8d0 a000 	ldr.w	sl, [r0]
 80077b2:	4650      	mov	r0, sl
 80077b4:	f7f8 fd0c 	bl	80001d0 <strlen>
 80077b8:	2300      	movs	r3, #0
 80077ba:	930a      	str	r3, [sp, #40]	; 0x28
 80077bc:	6823      	ldr	r3, [r4, #0]
 80077be:	9305      	str	r3, [sp, #20]
 80077c0:	f8d8 3000 	ldr.w	r3, [r8]
 80077c4:	f894 b018 	ldrb.w	fp, [r4, #24]
 80077c8:	3307      	adds	r3, #7
 80077ca:	f023 0307 	bic.w	r3, r3, #7
 80077ce:	f103 0208 	add.w	r2, r3, #8
 80077d2:	f8c8 2000 	str.w	r2, [r8]
 80077d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077da:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80077de:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80077e2:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80077e6:	9307      	str	r3, [sp, #28]
 80077e8:	f8cd 8018 	str.w	r8, [sp, #24]
 80077ec:	ee08 0a10 	vmov	s16, r0
 80077f0:	4b9f      	ldr	r3, [pc, #636]	; (8007a70 <_printf_float+0x2dc>)
 80077f2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80077f6:	f04f 32ff 	mov.w	r2, #4294967295
 80077fa:	f7f9 f997 	bl	8000b2c <__aeabi_dcmpun>
 80077fe:	bb88      	cbnz	r0, 8007864 <_printf_float+0xd0>
 8007800:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007804:	4b9a      	ldr	r3, [pc, #616]	; (8007a70 <_printf_float+0x2dc>)
 8007806:	f04f 32ff 	mov.w	r2, #4294967295
 800780a:	f7f9 f971 	bl	8000af0 <__aeabi_dcmple>
 800780e:	bb48      	cbnz	r0, 8007864 <_printf_float+0xd0>
 8007810:	2200      	movs	r2, #0
 8007812:	2300      	movs	r3, #0
 8007814:	4640      	mov	r0, r8
 8007816:	4649      	mov	r1, r9
 8007818:	f7f9 f960 	bl	8000adc <__aeabi_dcmplt>
 800781c:	b110      	cbz	r0, 8007824 <_printf_float+0x90>
 800781e:	232d      	movs	r3, #45	; 0x2d
 8007820:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007824:	4b93      	ldr	r3, [pc, #588]	; (8007a74 <_printf_float+0x2e0>)
 8007826:	4894      	ldr	r0, [pc, #592]	; (8007a78 <_printf_float+0x2e4>)
 8007828:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800782c:	bf94      	ite	ls
 800782e:	4698      	movls	r8, r3
 8007830:	4680      	movhi	r8, r0
 8007832:	2303      	movs	r3, #3
 8007834:	6123      	str	r3, [r4, #16]
 8007836:	9b05      	ldr	r3, [sp, #20]
 8007838:	f023 0204 	bic.w	r2, r3, #4
 800783c:	6022      	str	r2, [r4, #0]
 800783e:	f04f 0900 	mov.w	r9, #0
 8007842:	9700      	str	r7, [sp, #0]
 8007844:	4633      	mov	r3, r6
 8007846:	aa0b      	add	r2, sp, #44	; 0x2c
 8007848:	4621      	mov	r1, r4
 800784a:	4628      	mov	r0, r5
 800784c:	f000 f9d8 	bl	8007c00 <_printf_common>
 8007850:	3001      	adds	r0, #1
 8007852:	f040 8090 	bne.w	8007976 <_printf_float+0x1e2>
 8007856:	f04f 30ff 	mov.w	r0, #4294967295
 800785a:	b00d      	add	sp, #52	; 0x34
 800785c:	ecbd 8b02 	vpop	{d8}
 8007860:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007864:	4642      	mov	r2, r8
 8007866:	464b      	mov	r3, r9
 8007868:	4640      	mov	r0, r8
 800786a:	4649      	mov	r1, r9
 800786c:	f7f9 f95e 	bl	8000b2c <__aeabi_dcmpun>
 8007870:	b140      	cbz	r0, 8007884 <_printf_float+0xf0>
 8007872:	464b      	mov	r3, r9
 8007874:	2b00      	cmp	r3, #0
 8007876:	bfbc      	itt	lt
 8007878:	232d      	movlt	r3, #45	; 0x2d
 800787a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800787e:	487f      	ldr	r0, [pc, #508]	; (8007a7c <_printf_float+0x2e8>)
 8007880:	4b7f      	ldr	r3, [pc, #508]	; (8007a80 <_printf_float+0x2ec>)
 8007882:	e7d1      	b.n	8007828 <_printf_float+0x94>
 8007884:	6863      	ldr	r3, [r4, #4]
 8007886:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800788a:	9206      	str	r2, [sp, #24]
 800788c:	1c5a      	adds	r2, r3, #1
 800788e:	d13f      	bne.n	8007910 <_printf_float+0x17c>
 8007890:	2306      	movs	r3, #6
 8007892:	6063      	str	r3, [r4, #4]
 8007894:	9b05      	ldr	r3, [sp, #20]
 8007896:	6861      	ldr	r1, [r4, #4]
 8007898:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800789c:	2300      	movs	r3, #0
 800789e:	9303      	str	r3, [sp, #12]
 80078a0:	ab0a      	add	r3, sp, #40	; 0x28
 80078a2:	e9cd b301 	strd	fp, r3, [sp, #4]
 80078a6:	ab09      	add	r3, sp, #36	; 0x24
 80078a8:	ec49 8b10 	vmov	d0, r8, r9
 80078ac:	9300      	str	r3, [sp, #0]
 80078ae:	6022      	str	r2, [r4, #0]
 80078b0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80078b4:	4628      	mov	r0, r5
 80078b6:	f7ff fecd 	bl	8007654 <__cvt>
 80078ba:	9b06      	ldr	r3, [sp, #24]
 80078bc:	9909      	ldr	r1, [sp, #36]	; 0x24
 80078be:	2b47      	cmp	r3, #71	; 0x47
 80078c0:	4680      	mov	r8, r0
 80078c2:	d108      	bne.n	80078d6 <_printf_float+0x142>
 80078c4:	1cc8      	adds	r0, r1, #3
 80078c6:	db02      	blt.n	80078ce <_printf_float+0x13a>
 80078c8:	6863      	ldr	r3, [r4, #4]
 80078ca:	4299      	cmp	r1, r3
 80078cc:	dd41      	ble.n	8007952 <_printf_float+0x1be>
 80078ce:	f1ab 0b02 	sub.w	fp, fp, #2
 80078d2:	fa5f fb8b 	uxtb.w	fp, fp
 80078d6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 80078da:	d820      	bhi.n	800791e <_printf_float+0x18a>
 80078dc:	3901      	subs	r1, #1
 80078de:	465a      	mov	r2, fp
 80078e0:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80078e4:	9109      	str	r1, [sp, #36]	; 0x24
 80078e6:	f7ff ff17 	bl	8007718 <__exponent>
 80078ea:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80078ec:	1813      	adds	r3, r2, r0
 80078ee:	2a01      	cmp	r2, #1
 80078f0:	4681      	mov	r9, r0
 80078f2:	6123      	str	r3, [r4, #16]
 80078f4:	dc02      	bgt.n	80078fc <_printf_float+0x168>
 80078f6:	6822      	ldr	r2, [r4, #0]
 80078f8:	07d2      	lsls	r2, r2, #31
 80078fa:	d501      	bpl.n	8007900 <_printf_float+0x16c>
 80078fc:	3301      	adds	r3, #1
 80078fe:	6123      	str	r3, [r4, #16]
 8007900:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007904:	2b00      	cmp	r3, #0
 8007906:	d09c      	beq.n	8007842 <_printf_float+0xae>
 8007908:	232d      	movs	r3, #45	; 0x2d
 800790a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800790e:	e798      	b.n	8007842 <_printf_float+0xae>
 8007910:	9a06      	ldr	r2, [sp, #24]
 8007912:	2a47      	cmp	r2, #71	; 0x47
 8007914:	d1be      	bne.n	8007894 <_printf_float+0x100>
 8007916:	2b00      	cmp	r3, #0
 8007918:	d1bc      	bne.n	8007894 <_printf_float+0x100>
 800791a:	2301      	movs	r3, #1
 800791c:	e7b9      	b.n	8007892 <_printf_float+0xfe>
 800791e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007922:	d118      	bne.n	8007956 <_printf_float+0x1c2>
 8007924:	2900      	cmp	r1, #0
 8007926:	6863      	ldr	r3, [r4, #4]
 8007928:	dd0b      	ble.n	8007942 <_printf_float+0x1ae>
 800792a:	6121      	str	r1, [r4, #16]
 800792c:	b913      	cbnz	r3, 8007934 <_printf_float+0x1a0>
 800792e:	6822      	ldr	r2, [r4, #0]
 8007930:	07d0      	lsls	r0, r2, #31
 8007932:	d502      	bpl.n	800793a <_printf_float+0x1a6>
 8007934:	3301      	adds	r3, #1
 8007936:	440b      	add	r3, r1
 8007938:	6123      	str	r3, [r4, #16]
 800793a:	65a1      	str	r1, [r4, #88]	; 0x58
 800793c:	f04f 0900 	mov.w	r9, #0
 8007940:	e7de      	b.n	8007900 <_printf_float+0x16c>
 8007942:	b913      	cbnz	r3, 800794a <_printf_float+0x1b6>
 8007944:	6822      	ldr	r2, [r4, #0]
 8007946:	07d2      	lsls	r2, r2, #31
 8007948:	d501      	bpl.n	800794e <_printf_float+0x1ba>
 800794a:	3302      	adds	r3, #2
 800794c:	e7f4      	b.n	8007938 <_printf_float+0x1a4>
 800794e:	2301      	movs	r3, #1
 8007950:	e7f2      	b.n	8007938 <_printf_float+0x1a4>
 8007952:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007956:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007958:	4299      	cmp	r1, r3
 800795a:	db05      	blt.n	8007968 <_printf_float+0x1d4>
 800795c:	6823      	ldr	r3, [r4, #0]
 800795e:	6121      	str	r1, [r4, #16]
 8007960:	07d8      	lsls	r0, r3, #31
 8007962:	d5ea      	bpl.n	800793a <_printf_float+0x1a6>
 8007964:	1c4b      	adds	r3, r1, #1
 8007966:	e7e7      	b.n	8007938 <_printf_float+0x1a4>
 8007968:	2900      	cmp	r1, #0
 800796a:	bfd4      	ite	le
 800796c:	f1c1 0202 	rsble	r2, r1, #2
 8007970:	2201      	movgt	r2, #1
 8007972:	4413      	add	r3, r2
 8007974:	e7e0      	b.n	8007938 <_printf_float+0x1a4>
 8007976:	6823      	ldr	r3, [r4, #0]
 8007978:	055a      	lsls	r2, r3, #21
 800797a:	d407      	bmi.n	800798c <_printf_float+0x1f8>
 800797c:	6923      	ldr	r3, [r4, #16]
 800797e:	4642      	mov	r2, r8
 8007980:	4631      	mov	r1, r6
 8007982:	4628      	mov	r0, r5
 8007984:	47b8      	blx	r7
 8007986:	3001      	adds	r0, #1
 8007988:	d12c      	bne.n	80079e4 <_printf_float+0x250>
 800798a:	e764      	b.n	8007856 <_printf_float+0xc2>
 800798c:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007990:	f240 80e0 	bls.w	8007b54 <_printf_float+0x3c0>
 8007994:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007998:	2200      	movs	r2, #0
 800799a:	2300      	movs	r3, #0
 800799c:	f7f9 f894 	bl	8000ac8 <__aeabi_dcmpeq>
 80079a0:	2800      	cmp	r0, #0
 80079a2:	d034      	beq.n	8007a0e <_printf_float+0x27a>
 80079a4:	4a37      	ldr	r2, [pc, #220]	; (8007a84 <_printf_float+0x2f0>)
 80079a6:	2301      	movs	r3, #1
 80079a8:	4631      	mov	r1, r6
 80079aa:	4628      	mov	r0, r5
 80079ac:	47b8      	blx	r7
 80079ae:	3001      	adds	r0, #1
 80079b0:	f43f af51 	beq.w	8007856 <_printf_float+0xc2>
 80079b4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80079b8:	429a      	cmp	r2, r3
 80079ba:	db02      	blt.n	80079c2 <_printf_float+0x22e>
 80079bc:	6823      	ldr	r3, [r4, #0]
 80079be:	07d8      	lsls	r0, r3, #31
 80079c0:	d510      	bpl.n	80079e4 <_printf_float+0x250>
 80079c2:	ee18 3a10 	vmov	r3, s16
 80079c6:	4652      	mov	r2, sl
 80079c8:	4631      	mov	r1, r6
 80079ca:	4628      	mov	r0, r5
 80079cc:	47b8      	blx	r7
 80079ce:	3001      	adds	r0, #1
 80079d0:	f43f af41 	beq.w	8007856 <_printf_float+0xc2>
 80079d4:	f04f 0800 	mov.w	r8, #0
 80079d8:	f104 091a 	add.w	r9, r4, #26
 80079dc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80079de:	3b01      	subs	r3, #1
 80079e0:	4543      	cmp	r3, r8
 80079e2:	dc09      	bgt.n	80079f8 <_printf_float+0x264>
 80079e4:	6823      	ldr	r3, [r4, #0]
 80079e6:	079b      	lsls	r3, r3, #30
 80079e8:	f100 8105 	bmi.w	8007bf6 <_printf_float+0x462>
 80079ec:	68e0      	ldr	r0, [r4, #12]
 80079ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80079f0:	4298      	cmp	r0, r3
 80079f2:	bfb8      	it	lt
 80079f4:	4618      	movlt	r0, r3
 80079f6:	e730      	b.n	800785a <_printf_float+0xc6>
 80079f8:	2301      	movs	r3, #1
 80079fa:	464a      	mov	r2, r9
 80079fc:	4631      	mov	r1, r6
 80079fe:	4628      	mov	r0, r5
 8007a00:	47b8      	blx	r7
 8007a02:	3001      	adds	r0, #1
 8007a04:	f43f af27 	beq.w	8007856 <_printf_float+0xc2>
 8007a08:	f108 0801 	add.w	r8, r8, #1
 8007a0c:	e7e6      	b.n	80079dc <_printf_float+0x248>
 8007a0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a10:	2b00      	cmp	r3, #0
 8007a12:	dc39      	bgt.n	8007a88 <_printf_float+0x2f4>
 8007a14:	4a1b      	ldr	r2, [pc, #108]	; (8007a84 <_printf_float+0x2f0>)
 8007a16:	2301      	movs	r3, #1
 8007a18:	4631      	mov	r1, r6
 8007a1a:	4628      	mov	r0, r5
 8007a1c:	47b8      	blx	r7
 8007a1e:	3001      	adds	r0, #1
 8007a20:	f43f af19 	beq.w	8007856 <_printf_float+0xc2>
 8007a24:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007a28:	4313      	orrs	r3, r2
 8007a2a:	d102      	bne.n	8007a32 <_printf_float+0x29e>
 8007a2c:	6823      	ldr	r3, [r4, #0]
 8007a2e:	07d9      	lsls	r1, r3, #31
 8007a30:	d5d8      	bpl.n	80079e4 <_printf_float+0x250>
 8007a32:	ee18 3a10 	vmov	r3, s16
 8007a36:	4652      	mov	r2, sl
 8007a38:	4631      	mov	r1, r6
 8007a3a:	4628      	mov	r0, r5
 8007a3c:	47b8      	blx	r7
 8007a3e:	3001      	adds	r0, #1
 8007a40:	f43f af09 	beq.w	8007856 <_printf_float+0xc2>
 8007a44:	f04f 0900 	mov.w	r9, #0
 8007a48:	f104 0a1a 	add.w	sl, r4, #26
 8007a4c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007a4e:	425b      	negs	r3, r3
 8007a50:	454b      	cmp	r3, r9
 8007a52:	dc01      	bgt.n	8007a58 <_printf_float+0x2c4>
 8007a54:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007a56:	e792      	b.n	800797e <_printf_float+0x1ea>
 8007a58:	2301      	movs	r3, #1
 8007a5a:	4652      	mov	r2, sl
 8007a5c:	4631      	mov	r1, r6
 8007a5e:	4628      	mov	r0, r5
 8007a60:	47b8      	blx	r7
 8007a62:	3001      	adds	r0, #1
 8007a64:	f43f aef7 	beq.w	8007856 <_printf_float+0xc2>
 8007a68:	f109 0901 	add.w	r9, r9, #1
 8007a6c:	e7ee      	b.n	8007a4c <_printf_float+0x2b8>
 8007a6e:	bf00      	nop
 8007a70:	7fefffff 	.word	0x7fefffff
 8007a74:	0800c154 	.word	0x0800c154
 8007a78:	0800c158 	.word	0x0800c158
 8007a7c:	0800c160 	.word	0x0800c160
 8007a80:	0800c15c 	.word	0x0800c15c
 8007a84:	0800c164 	.word	0x0800c164
 8007a88:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007a8a:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007a8c:	429a      	cmp	r2, r3
 8007a8e:	bfa8      	it	ge
 8007a90:	461a      	movge	r2, r3
 8007a92:	2a00      	cmp	r2, #0
 8007a94:	4691      	mov	r9, r2
 8007a96:	dc37      	bgt.n	8007b08 <_printf_float+0x374>
 8007a98:	f04f 0b00 	mov.w	fp, #0
 8007a9c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007aa0:	f104 021a 	add.w	r2, r4, #26
 8007aa4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007aa6:	9305      	str	r3, [sp, #20]
 8007aa8:	eba3 0309 	sub.w	r3, r3, r9
 8007aac:	455b      	cmp	r3, fp
 8007aae:	dc33      	bgt.n	8007b18 <_printf_float+0x384>
 8007ab0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ab4:	429a      	cmp	r2, r3
 8007ab6:	db3b      	blt.n	8007b30 <_printf_float+0x39c>
 8007ab8:	6823      	ldr	r3, [r4, #0]
 8007aba:	07da      	lsls	r2, r3, #31
 8007abc:	d438      	bmi.n	8007b30 <_printf_float+0x39c>
 8007abe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ac0:	9a05      	ldr	r2, [sp, #20]
 8007ac2:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007ac4:	1a9a      	subs	r2, r3, r2
 8007ac6:	eba3 0901 	sub.w	r9, r3, r1
 8007aca:	4591      	cmp	r9, r2
 8007acc:	bfa8      	it	ge
 8007ace:	4691      	movge	r9, r2
 8007ad0:	f1b9 0f00 	cmp.w	r9, #0
 8007ad4:	dc35      	bgt.n	8007b42 <_printf_float+0x3ae>
 8007ad6:	f04f 0800 	mov.w	r8, #0
 8007ada:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007ade:	f104 0a1a 	add.w	sl, r4, #26
 8007ae2:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007ae6:	1a9b      	subs	r3, r3, r2
 8007ae8:	eba3 0309 	sub.w	r3, r3, r9
 8007aec:	4543      	cmp	r3, r8
 8007aee:	f77f af79 	ble.w	80079e4 <_printf_float+0x250>
 8007af2:	2301      	movs	r3, #1
 8007af4:	4652      	mov	r2, sl
 8007af6:	4631      	mov	r1, r6
 8007af8:	4628      	mov	r0, r5
 8007afa:	47b8      	blx	r7
 8007afc:	3001      	adds	r0, #1
 8007afe:	f43f aeaa 	beq.w	8007856 <_printf_float+0xc2>
 8007b02:	f108 0801 	add.w	r8, r8, #1
 8007b06:	e7ec      	b.n	8007ae2 <_printf_float+0x34e>
 8007b08:	4613      	mov	r3, r2
 8007b0a:	4631      	mov	r1, r6
 8007b0c:	4642      	mov	r2, r8
 8007b0e:	4628      	mov	r0, r5
 8007b10:	47b8      	blx	r7
 8007b12:	3001      	adds	r0, #1
 8007b14:	d1c0      	bne.n	8007a98 <_printf_float+0x304>
 8007b16:	e69e      	b.n	8007856 <_printf_float+0xc2>
 8007b18:	2301      	movs	r3, #1
 8007b1a:	4631      	mov	r1, r6
 8007b1c:	4628      	mov	r0, r5
 8007b1e:	9205      	str	r2, [sp, #20]
 8007b20:	47b8      	blx	r7
 8007b22:	3001      	adds	r0, #1
 8007b24:	f43f ae97 	beq.w	8007856 <_printf_float+0xc2>
 8007b28:	9a05      	ldr	r2, [sp, #20]
 8007b2a:	f10b 0b01 	add.w	fp, fp, #1
 8007b2e:	e7b9      	b.n	8007aa4 <_printf_float+0x310>
 8007b30:	ee18 3a10 	vmov	r3, s16
 8007b34:	4652      	mov	r2, sl
 8007b36:	4631      	mov	r1, r6
 8007b38:	4628      	mov	r0, r5
 8007b3a:	47b8      	blx	r7
 8007b3c:	3001      	adds	r0, #1
 8007b3e:	d1be      	bne.n	8007abe <_printf_float+0x32a>
 8007b40:	e689      	b.n	8007856 <_printf_float+0xc2>
 8007b42:	9a05      	ldr	r2, [sp, #20]
 8007b44:	464b      	mov	r3, r9
 8007b46:	4442      	add	r2, r8
 8007b48:	4631      	mov	r1, r6
 8007b4a:	4628      	mov	r0, r5
 8007b4c:	47b8      	blx	r7
 8007b4e:	3001      	adds	r0, #1
 8007b50:	d1c1      	bne.n	8007ad6 <_printf_float+0x342>
 8007b52:	e680      	b.n	8007856 <_printf_float+0xc2>
 8007b54:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007b56:	2a01      	cmp	r2, #1
 8007b58:	dc01      	bgt.n	8007b5e <_printf_float+0x3ca>
 8007b5a:	07db      	lsls	r3, r3, #31
 8007b5c:	d538      	bpl.n	8007bd0 <_printf_float+0x43c>
 8007b5e:	2301      	movs	r3, #1
 8007b60:	4642      	mov	r2, r8
 8007b62:	4631      	mov	r1, r6
 8007b64:	4628      	mov	r0, r5
 8007b66:	47b8      	blx	r7
 8007b68:	3001      	adds	r0, #1
 8007b6a:	f43f ae74 	beq.w	8007856 <_printf_float+0xc2>
 8007b6e:	ee18 3a10 	vmov	r3, s16
 8007b72:	4652      	mov	r2, sl
 8007b74:	4631      	mov	r1, r6
 8007b76:	4628      	mov	r0, r5
 8007b78:	47b8      	blx	r7
 8007b7a:	3001      	adds	r0, #1
 8007b7c:	f43f ae6b 	beq.w	8007856 <_printf_float+0xc2>
 8007b80:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007b84:	2200      	movs	r2, #0
 8007b86:	2300      	movs	r3, #0
 8007b88:	f7f8 ff9e 	bl	8000ac8 <__aeabi_dcmpeq>
 8007b8c:	b9d8      	cbnz	r0, 8007bc6 <_printf_float+0x432>
 8007b8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007b90:	f108 0201 	add.w	r2, r8, #1
 8007b94:	3b01      	subs	r3, #1
 8007b96:	4631      	mov	r1, r6
 8007b98:	4628      	mov	r0, r5
 8007b9a:	47b8      	blx	r7
 8007b9c:	3001      	adds	r0, #1
 8007b9e:	d10e      	bne.n	8007bbe <_printf_float+0x42a>
 8007ba0:	e659      	b.n	8007856 <_printf_float+0xc2>
 8007ba2:	2301      	movs	r3, #1
 8007ba4:	4652      	mov	r2, sl
 8007ba6:	4631      	mov	r1, r6
 8007ba8:	4628      	mov	r0, r5
 8007baa:	47b8      	blx	r7
 8007bac:	3001      	adds	r0, #1
 8007bae:	f43f ae52 	beq.w	8007856 <_printf_float+0xc2>
 8007bb2:	f108 0801 	add.w	r8, r8, #1
 8007bb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007bb8:	3b01      	subs	r3, #1
 8007bba:	4543      	cmp	r3, r8
 8007bbc:	dcf1      	bgt.n	8007ba2 <_printf_float+0x40e>
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007bc4:	e6dc      	b.n	8007980 <_printf_float+0x1ec>
 8007bc6:	f04f 0800 	mov.w	r8, #0
 8007bca:	f104 0a1a 	add.w	sl, r4, #26
 8007bce:	e7f2      	b.n	8007bb6 <_printf_float+0x422>
 8007bd0:	2301      	movs	r3, #1
 8007bd2:	4642      	mov	r2, r8
 8007bd4:	e7df      	b.n	8007b96 <_printf_float+0x402>
 8007bd6:	2301      	movs	r3, #1
 8007bd8:	464a      	mov	r2, r9
 8007bda:	4631      	mov	r1, r6
 8007bdc:	4628      	mov	r0, r5
 8007bde:	47b8      	blx	r7
 8007be0:	3001      	adds	r0, #1
 8007be2:	f43f ae38 	beq.w	8007856 <_printf_float+0xc2>
 8007be6:	f108 0801 	add.w	r8, r8, #1
 8007bea:	68e3      	ldr	r3, [r4, #12]
 8007bec:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007bee:	1a5b      	subs	r3, r3, r1
 8007bf0:	4543      	cmp	r3, r8
 8007bf2:	dcf0      	bgt.n	8007bd6 <_printf_float+0x442>
 8007bf4:	e6fa      	b.n	80079ec <_printf_float+0x258>
 8007bf6:	f04f 0800 	mov.w	r8, #0
 8007bfa:	f104 0919 	add.w	r9, r4, #25
 8007bfe:	e7f4      	b.n	8007bea <_printf_float+0x456>

08007c00 <_printf_common>:
 8007c00:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007c04:	4616      	mov	r6, r2
 8007c06:	4699      	mov	r9, r3
 8007c08:	688a      	ldr	r2, [r1, #8]
 8007c0a:	690b      	ldr	r3, [r1, #16]
 8007c0c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007c10:	4293      	cmp	r3, r2
 8007c12:	bfb8      	it	lt
 8007c14:	4613      	movlt	r3, r2
 8007c16:	6033      	str	r3, [r6, #0]
 8007c18:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007c1c:	4607      	mov	r7, r0
 8007c1e:	460c      	mov	r4, r1
 8007c20:	b10a      	cbz	r2, 8007c26 <_printf_common+0x26>
 8007c22:	3301      	adds	r3, #1
 8007c24:	6033      	str	r3, [r6, #0]
 8007c26:	6823      	ldr	r3, [r4, #0]
 8007c28:	0699      	lsls	r1, r3, #26
 8007c2a:	bf42      	ittt	mi
 8007c2c:	6833      	ldrmi	r3, [r6, #0]
 8007c2e:	3302      	addmi	r3, #2
 8007c30:	6033      	strmi	r3, [r6, #0]
 8007c32:	6825      	ldr	r5, [r4, #0]
 8007c34:	f015 0506 	ands.w	r5, r5, #6
 8007c38:	d106      	bne.n	8007c48 <_printf_common+0x48>
 8007c3a:	f104 0a19 	add.w	sl, r4, #25
 8007c3e:	68e3      	ldr	r3, [r4, #12]
 8007c40:	6832      	ldr	r2, [r6, #0]
 8007c42:	1a9b      	subs	r3, r3, r2
 8007c44:	42ab      	cmp	r3, r5
 8007c46:	dc26      	bgt.n	8007c96 <_printf_common+0x96>
 8007c48:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007c4c:	1e13      	subs	r3, r2, #0
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	bf18      	it	ne
 8007c52:	2301      	movne	r3, #1
 8007c54:	0692      	lsls	r2, r2, #26
 8007c56:	d42b      	bmi.n	8007cb0 <_printf_common+0xb0>
 8007c58:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007c5c:	4649      	mov	r1, r9
 8007c5e:	4638      	mov	r0, r7
 8007c60:	47c0      	blx	r8
 8007c62:	3001      	adds	r0, #1
 8007c64:	d01e      	beq.n	8007ca4 <_printf_common+0xa4>
 8007c66:	6823      	ldr	r3, [r4, #0]
 8007c68:	68e5      	ldr	r5, [r4, #12]
 8007c6a:	6832      	ldr	r2, [r6, #0]
 8007c6c:	f003 0306 	and.w	r3, r3, #6
 8007c70:	2b04      	cmp	r3, #4
 8007c72:	bf08      	it	eq
 8007c74:	1aad      	subeq	r5, r5, r2
 8007c76:	68a3      	ldr	r3, [r4, #8]
 8007c78:	6922      	ldr	r2, [r4, #16]
 8007c7a:	bf0c      	ite	eq
 8007c7c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007c80:	2500      	movne	r5, #0
 8007c82:	4293      	cmp	r3, r2
 8007c84:	bfc4      	itt	gt
 8007c86:	1a9b      	subgt	r3, r3, r2
 8007c88:	18ed      	addgt	r5, r5, r3
 8007c8a:	2600      	movs	r6, #0
 8007c8c:	341a      	adds	r4, #26
 8007c8e:	42b5      	cmp	r5, r6
 8007c90:	d11a      	bne.n	8007cc8 <_printf_common+0xc8>
 8007c92:	2000      	movs	r0, #0
 8007c94:	e008      	b.n	8007ca8 <_printf_common+0xa8>
 8007c96:	2301      	movs	r3, #1
 8007c98:	4652      	mov	r2, sl
 8007c9a:	4649      	mov	r1, r9
 8007c9c:	4638      	mov	r0, r7
 8007c9e:	47c0      	blx	r8
 8007ca0:	3001      	adds	r0, #1
 8007ca2:	d103      	bne.n	8007cac <_printf_common+0xac>
 8007ca4:	f04f 30ff 	mov.w	r0, #4294967295
 8007ca8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007cac:	3501      	adds	r5, #1
 8007cae:	e7c6      	b.n	8007c3e <_printf_common+0x3e>
 8007cb0:	18e1      	adds	r1, r4, r3
 8007cb2:	1c5a      	adds	r2, r3, #1
 8007cb4:	2030      	movs	r0, #48	; 0x30
 8007cb6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8007cba:	4422      	add	r2, r4
 8007cbc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8007cc0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8007cc4:	3302      	adds	r3, #2
 8007cc6:	e7c7      	b.n	8007c58 <_printf_common+0x58>
 8007cc8:	2301      	movs	r3, #1
 8007cca:	4622      	mov	r2, r4
 8007ccc:	4649      	mov	r1, r9
 8007cce:	4638      	mov	r0, r7
 8007cd0:	47c0      	blx	r8
 8007cd2:	3001      	adds	r0, #1
 8007cd4:	d0e6      	beq.n	8007ca4 <_printf_common+0xa4>
 8007cd6:	3601      	adds	r6, #1
 8007cd8:	e7d9      	b.n	8007c8e <_printf_common+0x8e>
	...

08007cdc <_printf_i>:
 8007cdc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007ce0:	7e0f      	ldrb	r7, [r1, #24]
 8007ce2:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8007ce4:	2f78      	cmp	r7, #120	; 0x78
 8007ce6:	4691      	mov	r9, r2
 8007ce8:	4680      	mov	r8, r0
 8007cea:	460c      	mov	r4, r1
 8007cec:	469a      	mov	sl, r3
 8007cee:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8007cf2:	d807      	bhi.n	8007d04 <_printf_i+0x28>
 8007cf4:	2f62      	cmp	r7, #98	; 0x62
 8007cf6:	d80a      	bhi.n	8007d0e <_printf_i+0x32>
 8007cf8:	2f00      	cmp	r7, #0
 8007cfa:	f000 80d8 	beq.w	8007eae <_printf_i+0x1d2>
 8007cfe:	2f58      	cmp	r7, #88	; 0x58
 8007d00:	f000 80a3 	beq.w	8007e4a <_printf_i+0x16e>
 8007d04:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d08:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8007d0c:	e03a      	b.n	8007d84 <_printf_i+0xa8>
 8007d0e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8007d12:	2b15      	cmp	r3, #21
 8007d14:	d8f6      	bhi.n	8007d04 <_printf_i+0x28>
 8007d16:	a101      	add	r1, pc, #4	; (adr r1, 8007d1c <_printf_i+0x40>)
 8007d18:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8007d1c:	08007d75 	.word	0x08007d75
 8007d20:	08007d89 	.word	0x08007d89
 8007d24:	08007d05 	.word	0x08007d05
 8007d28:	08007d05 	.word	0x08007d05
 8007d2c:	08007d05 	.word	0x08007d05
 8007d30:	08007d05 	.word	0x08007d05
 8007d34:	08007d89 	.word	0x08007d89
 8007d38:	08007d05 	.word	0x08007d05
 8007d3c:	08007d05 	.word	0x08007d05
 8007d40:	08007d05 	.word	0x08007d05
 8007d44:	08007d05 	.word	0x08007d05
 8007d48:	08007e95 	.word	0x08007e95
 8007d4c:	08007db9 	.word	0x08007db9
 8007d50:	08007e77 	.word	0x08007e77
 8007d54:	08007d05 	.word	0x08007d05
 8007d58:	08007d05 	.word	0x08007d05
 8007d5c:	08007eb7 	.word	0x08007eb7
 8007d60:	08007d05 	.word	0x08007d05
 8007d64:	08007db9 	.word	0x08007db9
 8007d68:	08007d05 	.word	0x08007d05
 8007d6c:	08007d05 	.word	0x08007d05
 8007d70:	08007e7f 	.word	0x08007e7f
 8007d74:	682b      	ldr	r3, [r5, #0]
 8007d76:	1d1a      	adds	r2, r3, #4
 8007d78:	681b      	ldr	r3, [r3, #0]
 8007d7a:	602a      	str	r2, [r5, #0]
 8007d7c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8007d80:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8007d84:	2301      	movs	r3, #1
 8007d86:	e0a3      	b.n	8007ed0 <_printf_i+0x1f4>
 8007d88:	6820      	ldr	r0, [r4, #0]
 8007d8a:	6829      	ldr	r1, [r5, #0]
 8007d8c:	0606      	lsls	r6, r0, #24
 8007d8e:	f101 0304 	add.w	r3, r1, #4
 8007d92:	d50a      	bpl.n	8007daa <_printf_i+0xce>
 8007d94:	680e      	ldr	r6, [r1, #0]
 8007d96:	602b      	str	r3, [r5, #0]
 8007d98:	2e00      	cmp	r6, #0
 8007d9a:	da03      	bge.n	8007da4 <_printf_i+0xc8>
 8007d9c:	232d      	movs	r3, #45	; 0x2d
 8007d9e:	4276      	negs	r6, r6
 8007da0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007da4:	485e      	ldr	r0, [pc, #376]	; (8007f20 <_printf_i+0x244>)
 8007da6:	230a      	movs	r3, #10
 8007da8:	e019      	b.n	8007dde <_printf_i+0x102>
 8007daa:	680e      	ldr	r6, [r1, #0]
 8007dac:	602b      	str	r3, [r5, #0]
 8007dae:	f010 0f40 	tst.w	r0, #64	; 0x40
 8007db2:	bf18      	it	ne
 8007db4:	b236      	sxthne	r6, r6
 8007db6:	e7ef      	b.n	8007d98 <_printf_i+0xbc>
 8007db8:	682b      	ldr	r3, [r5, #0]
 8007dba:	6820      	ldr	r0, [r4, #0]
 8007dbc:	1d19      	adds	r1, r3, #4
 8007dbe:	6029      	str	r1, [r5, #0]
 8007dc0:	0601      	lsls	r1, r0, #24
 8007dc2:	d501      	bpl.n	8007dc8 <_printf_i+0xec>
 8007dc4:	681e      	ldr	r6, [r3, #0]
 8007dc6:	e002      	b.n	8007dce <_printf_i+0xf2>
 8007dc8:	0646      	lsls	r6, r0, #25
 8007dca:	d5fb      	bpl.n	8007dc4 <_printf_i+0xe8>
 8007dcc:	881e      	ldrh	r6, [r3, #0]
 8007dce:	4854      	ldr	r0, [pc, #336]	; (8007f20 <_printf_i+0x244>)
 8007dd0:	2f6f      	cmp	r7, #111	; 0x6f
 8007dd2:	bf0c      	ite	eq
 8007dd4:	2308      	moveq	r3, #8
 8007dd6:	230a      	movne	r3, #10
 8007dd8:	2100      	movs	r1, #0
 8007dda:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8007dde:	6865      	ldr	r5, [r4, #4]
 8007de0:	60a5      	str	r5, [r4, #8]
 8007de2:	2d00      	cmp	r5, #0
 8007de4:	bfa2      	ittt	ge
 8007de6:	6821      	ldrge	r1, [r4, #0]
 8007de8:	f021 0104 	bicge.w	r1, r1, #4
 8007dec:	6021      	strge	r1, [r4, #0]
 8007dee:	b90e      	cbnz	r6, 8007df4 <_printf_i+0x118>
 8007df0:	2d00      	cmp	r5, #0
 8007df2:	d04d      	beq.n	8007e90 <_printf_i+0x1b4>
 8007df4:	4615      	mov	r5, r2
 8007df6:	fbb6 f1f3 	udiv	r1, r6, r3
 8007dfa:	fb03 6711 	mls	r7, r3, r1, r6
 8007dfe:	5dc7      	ldrb	r7, [r0, r7]
 8007e00:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8007e04:	4637      	mov	r7, r6
 8007e06:	42bb      	cmp	r3, r7
 8007e08:	460e      	mov	r6, r1
 8007e0a:	d9f4      	bls.n	8007df6 <_printf_i+0x11a>
 8007e0c:	2b08      	cmp	r3, #8
 8007e0e:	d10b      	bne.n	8007e28 <_printf_i+0x14c>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07de      	lsls	r6, r3, #31
 8007e14:	d508      	bpl.n	8007e28 <_printf_i+0x14c>
 8007e16:	6923      	ldr	r3, [r4, #16]
 8007e18:	6861      	ldr	r1, [r4, #4]
 8007e1a:	4299      	cmp	r1, r3
 8007e1c:	bfde      	ittt	le
 8007e1e:	2330      	movle	r3, #48	; 0x30
 8007e20:	f805 3c01 	strble.w	r3, [r5, #-1]
 8007e24:	f105 35ff 	addle.w	r5, r5, #4294967295
 8007e28:	1b52      	subs	r2, r2, r5
 8007e2a:	6122      	str	r2, [r4, #16]
 8007e2c:	f8cd a000 	str.w	sl, [sp]
 8007e30:	464b      	mov	r3, r9
 8007e32:	aa03      	add	r2, sp, #12
 8007e34:	4621      	mov	r1, r4
 8007e36:	4640      	mov	r0, r8
 8007e38:	f7ff fee2 	bl	8007c00 <_printf_common>
 8007e3c:	3001      	adds	r0, #1
 8007e3e:	d14c      	bne.n	8007eda <_printf_i+0x1fe>
 8007e40:	f04f 30ff 	mov.w	r0, #4294967295
 8007e44:	b004      	add	sp, #16
 8007e46:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007e4a:	4835      	ldr	r0, [pc, #212]	; (8007f20 <_printf_i+0x244>)
 8007e4c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8007e50:	6829      	ldr	r1, [r5, #0]
 8007e52:	6823      	ldr	r3, [r4, #0]
 8007e54:	f851 6b04 	ldr.w	r6, [r1], #4
 8007e58:	6029      	str	r1, [r5, #0]
 8007e5a:	061d      	lsls	r5, r3, #24
 8007e5c:	d514      	bpl.n	8007e88 <_printf_i+0x1ac>
 8007e5e:	07df      	lsls	r7, r3, #31
 8007e60:	bf44      	itt	mi
 8007e62:	f043 0320 	orrmi.w	r3, r3, #32
 8007e66:	6023      	strmi	r3, [r4, #0]
 8007e68:	b91e      	cbnz	r6, 8007e72 <_printf_i+0x196>
 8007e6a:	6823      	ldr	r3, [r4, #0]
 8007e6c:	f023 0320 	bic.w	r3, r3, #32
 8007e70:	6023      	str	r3, [r4, #0]
 8007e72:	2310      	movs	r3, #16
 8007e74:	e7b0      	b.n	8007dd8 <_printf_i+0xfc>
 8007e76:	6823      	ldr	r3, [r4, #0]
 8007e78:	f043 0320 	orr.w	r3, r3, #32
 8007e7c:	6023      	str	r3, [r4, #0]
 8007e7e:	2378      	movs	r3, #120	; 0x78
 8007e80:	4828      	ldr	r0, [pc, #160]	; (8007f24 <_printf_i+0x248>)
 8007e82:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8007e86:	e7e3      	b.n	8007e50 <_printf_i+0x174>
 8007e88:	0659      	lsls	r1, r3, #25
 8007e8a:	bf48      	it	mi
 8007e8c:	b2b6      	uxthmi	r6, r6
 8007e8e:	e7e6      	b.n	8007e5e <_printf_i+0x182>
 8007e90:	4615      	mov	r5, r2
 8007e92:	e7bb      	b.n	8007e0c <_printf_i+0x130>
 8007e94:	682b      	ldr	r3, [r5, #0]
 8007e96:	6826      	ldr	r6, [r4, #0]
 8007e98:	6961      	ldr	r1, [r4, #20]
 8007e9a:	1d18      	adds	r0, r3, #4
 8007e9c:	6028      	str	r0, [r5, #0]
 8007e9e:	0635      	lsls	r5, r6, #24
 8007ea0:	681b      	ldr	r3, [r3, #0]
 8007ea2:	d501      	bpl.n	8007ea8 <_printf_i+0x1cc>
 8007ea4:	6019      	str	r1, [r3, #0]
 8007ea6:	e002      	b.n	8007eae <_printf_i+0x1d2>
 8007ea8:	0670      	lsls	r0, r6, #25
 8007eaa:	d5fb      	bpl.n	8007ea4 <_printf_i+0x1c8>
 8007eac:	8019      	strh	r1, [r3, #0]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	6123      	str	r3, [r4, #16]
 8007eb2:	4615      	mov	r5, r2
 8007eb4:	e7ba      	b.n	8007e2c <_printf_i+0x150>
 8007eb6:	682b      	ldr	r3, [r5, #0]
 8007eb8:	1d1a      	adds	r2, r3, #4
 8007eba:	602a      	str	r2, [r5, #0]
 8007ebc:	681d      	ldr	r5, [r3, #0]
 8007ebe:	6862      	ldr	r2, [r4, #4]
 8007ec0:	2100      	movs	r1, #0
 8007ec2:	4628      	mov	r0, r5
 8007ec4:	f7f8 f98c 	bl	80001e0 <memchr>
 8007ec8:	b108      	cbz	r0, 8007ece <_printf_i+0x1f2>
 8007eca:	1b40      	subs	r0, r0, r5
 8007ecc:	6060      	str	r0, [r4, #4]
 8007ece:	6863      	ldr	r3, [r4, #4]
 8007ed0:	6123      	str	r3, [r4, #16]
 8007ed2:	2300      	movs	r3, #0
 8007ed4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007ed8:	e7a8      	b.n	8007e2c <_printf_i+0x150>
 8007eda:	6923      	ldr	r3, [r4, #16]
 8007edc:	462a      	mov	r2, r5
 8007ede:	4649      	mov	r1, r9
 8007ee0:	4640      	mov	r0, r8
 8007ee2:	47d0      	blx	sl
 8007ee4:	3001      	adds	r0, #1
 8007ee6:	d0ab      	beq.n	8007e40 <_printf_i+0x164>
 8007ee8:	6823      	ldr	r3, [r4, #0]
 8007eea:	079b      	lsls	r3, r3, #30
 8007eec:	d413      	bmi.n	8007f16 <_printf_i+0x23a>
 8007eee:	68e0      	ldr	r0, [r4, #12]
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	4298      	cmp	r0, r3
 8007ef4:	bfb8      	it	lt
 8007ef6:	4618      	movlt	r0, r3
 8007ef8:	e7a4      	b.n	8007e44 <_printf_i+0x168>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4632      	mov	r2, r6
 8007efe:	4649      	mov	r1, r9
 8007f00:	4640      	mov	r0, r8
 8007f02:	47d0      	blx	sl
 8007f04:	3001      	adds	r0, #1
 8007f06:	d09b      	beq.n	8007e40 <_printf_i+0x164>
 8007f08:	3501      	adds	r5, #1
 8007f0a:	68e3      	ldr	r3, [r4, #12]
 8007f0c:	9903      	ldr	r1, [sp, #12]
 8007f0e:	1a5b      	subs	r3, r3, r1
 8007f10:	42ab      	cmp	r3, r5
 8007f12:	dcf2      	bgt.n	8007efa <_printf_i+0x21e>
 8007f14:	e7eb      	b.n	8007eee <_printf_i+0x212>
 8007f16:	2500      	movs	r5, #0
 8007f18:	f104 0619 	add.w	r6, r4, #25
 8007f1c:	e7f5      	b.n	8007f0a <_printf_i+0x22e>
 8007f1e:	bf00      	nop
 8007f20:	0800c166 	.word	0x0800c166
 8007f24:	0800c177 	.word	0x0800c177

08007f28 <_scanf_float>:
 8007f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007f2c:	b087      	sub	sp, #28
 8007f2e:	4617      	mov	r7, r2
 8007f30:	9303      	str	r3, [sp, #12]
 8007f32:	688b      	ldr	r3, [r1, #8]
 8007f34:	1e5a      	subs	r2, r3, #1
 8007f36:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8007f3a:	bf83      	ittte	hi
 8007f3c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8007f40:	195b      	addhi	r3, r3, r5
 8007f42:	9302      	strhi	r3, [sp, #8]
 8007f44:	2300      	movls	r3, #0
 8007f46:	bf86      	itte	hi
 8007f48:	f240 135d 	movwhi	r3, #349	; 0x15d
 8007f4c:	608b      	strhi	r3, [r1, #8]
 8007f4e:	9302      	strls	r3, [sp, #8]
 8007f50:	680b      	ldr	r3, [r1, #0]
 8007f52:	468b      	mov	fp, r1
 8007f54:	2500      	movs	r5, #0
 8007f56:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 8007f5a:	f84b 3b1c 	str.w	r3, [fp], #28
 8007f5e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007f62:	4680      	mov	r8, r0
 8007f64:	460c      	mov	r4, r1
 8007f66:	465e      	mov	r6, fp
 8007f68:	46aa      	mov	sl, r5
 8007f6a:	46a9      	mov	r9, r5
 8007f6c:	9501      	str	r5, [sp, #4]
 8007f6e:	68a2      	ldr	r2, [r4, #8]
 8007f70:	b152      	cbz	r2, 8007f88 <_scanf_float+0x60>
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	781b      	ldrb	r3, [r3, #0]
 8007f76:	2b4e      	cmp	r3, #78	; 0x4e
 8007f78:	d864      	bhi.n	8008044 <_scanf_float+0x11c>
 8007f7a:	2b40      	cmp	r3, #64	; 0x40
 8007f7c:	d83c      	bhi.n	8007ff8 <_scanf_float+0xd0>
 8007f7e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 8007f82:	b2c8      	uxtb	r0, r1
 8007f84:	280e      	cmp	r0, #14
 8007f86:	d93a      	bls.n	8007ffe <_scanf_float+0xd6>
 8007f88:	f1b9 0f00 	cmp.w	r9, #0
 8007f8c:	d003      	beq.n	8007f96 <_scanf_float+0x6e>
 8007f8e:	6823      	ldr	r3, [r4, #0]
 8007f90:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f94:	6023      	str	r3, [r4, #0]
 8007f96:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007f9a:	f1ba 0f01 	cmp.w	sl, #1
 8007f9e:	f200 8113 	bhi.w	80081c8 <_scanf_float+0x2a0>
 8007fa2:	455e      	cmp	r6, fp
 8007fa4:	f200 8105 	bhi.w	80081b2 <_scanf_float+0x28a>
 8007fa8:	2501      	movs	r5, #1
 8007faa:	4628      	mov	r0, r5
 8007fac:	b007      	add	sp, #28
 8007fae:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007fb2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 8007fb6:	2a0d      	cmp	r2, #13
 8007fb8:	d8e6      	bhi.n	8007f88 <_scanf_float+0x60>
 8007fba:	a101      	add	r1, pc, #4	; (adr r1, 8007fc0 <_scanf_float+0x98>)
 8007fbc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8007fc0:	080080ff 	.word	0x080080ff
 8007fc4:	08007f89 	.word	0x08007f89
 8007fc8:	08007f89 	.word	0x08007f89
 8007fcc:	08007f89 	.word	0x08007f89
 8007fd0:	0800815f 	.word	0x0800815f
 8007fd4:	08008137 	.word	0x08008137
 8007fd8:	08007f89 	.word	0x08007f89
 8007fdc:	08007f89 	.word	0x08007f89
 8007fe0:	0800810d 	.word	0x0800810d
 8007fe4:	08007f89 	.word	0x08007f89
 8007fe8:	08007f89 	.word	0x08007f89
 8007fec:	08007f89 	.word	0x08007f89
 8007ff0:	08007f89 	.word	0x08007f89
 8007ff4:	080080c5 	.word	0x080080c5
 8007ff8:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8007ffc:	e7db      	b.n	8007fb6 <_scanf_float+0x8e>
 8007ffe:	290e      	cmp	r1, #14
 8008000:	d8c2      	bhi.n	8007f88 <_scanf_float+0x60>
 8008002:	a001      	add	r0, pc, #4	; (adr r0, 8008008 <_scanf_float+0xe0>)
 8008004:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008008:	080080b7 	.word	0x080080b7
 800800c:	08007f89 	.word	0x08007f89
 8008010:	080080b7 	.word	0x080080b7
 8008014:	0800814b 	.word	0x0800814b
 8008018:	08007f89 	.word	0x08007f89
 800801c:	08008065 	.word	0x08008065
 8008020:	080080a1 	.word	0x080080a1
 8008024:	080080a1 	.word	0x080080a1
 8008028:	080080a1 	.word	0x080080a1
 800802c:	080080a1 	.word	0x080080a1
 8008030:	080080a1 	.word	0x080080a1
 8008034:	080080a1 	.word	0x080080a1
 8008038:	080080a1 	.word	0x080080a1
 800803c:	080080a1 	.word	0x080080a1
 8008040:	080080a1 	.word	0x080080a1
 8008044:	2b6e      	cmp	r3, #110	; 0x6e
 8008046:	d809      	bhi.n	800805c <_scanf_float+0x134>
 8008048:	2b60      	cmp	r3, #96	; 0x60
 800804a:	d8b2      	bhi.n	8007fb2 <_scanf_float+0x8a>
 800804c:	2b54      	cmp	r3, #84	; 0x54
 800804e:	d077      	beq.n	8008140 <_scanf_float+0x218>
 8008050:	2b59      	cmp	r3, #89	; 0x59
 8008052:	d199      	bne.n	8007f88 <_scanf_float+0x60>
 8008054:	2d07      	cmp	r5, #7
 8008056:	d197      	bne.n	8007f88 <_scanf_float+0x60>
 8008058:	2508      	movs	r5, #8
 800805a:	e029      	b.n	80080b0 <_scanf_float+0x188>
 800805c:	2b74      	cmp	r3, #116	; 0x74
 800805e:	d06f      	beq.n	8008140 <_scanf_float+0x218>
 8008060:	2b79      	cmp	r3, #121	; 0x79
 8008062:	e7f6      	b.n	8008052 <_scanf_float+0x12a>
 8008064:	6821      	ldr	r1, [r4, #0]
 8008066:	05c8      	lsls	r0, r1, #23
 8008068:	d51a      	bpl.n	80080a0 <_scanf_float+0x178>
 800806a:	9b02      	ldr	r3, [sp, #8]
 800806c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 8008070:	6021      	str	r1, [r4, #0]
 8008072:	f109 0901 	add.w	r9, r9, #1
 8008076:	b11b      	cbz	r3, 8008080 <_scanf_float+0x158>
 8008078:	3b01      	subs	r3, #1
 800807a:	3201      	adds	r2, #1
 800807c:	9302      	str	r3, [sp, #8]
 800807e:	60a2      	str	r2, [r4, #8]
 8008080:	68a3      	ldr	r3, [r4, #8]
 8008082:	3b01      	subs	r3, #1
 8008084:	60a3      	str	r3, [r4, #8]
 8008086:	6923      	ldr	r3, [r4, #16]
 8008088:	3301      	adds	r3, #1
 800808a:	6123      	str	r3, [r4, #16]
 800808c:	687b      	ldr	r3, [r7, #4]
 800808e:	3b01      	subs	r3, #1
 8008090:	2b00      	cmp	r3, #0
 8008092:	607b      	str	r3, [r7, #4]
 8008094:	f340 8084 	ble.w	80081a0 <_scanf_float+0x278>
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	3301      	adds	r3, #1
 800809c:	603b      	str	r3, [r7, #0]
 800809e:	e766      	b.n	8007f6e <_scanf_float+0x46>
 80080a0:	eb1a 0f05 	cmn.w	sl, r5
 80080a4:	f47f af70 	bne.w	8007f88 <_scanf_float+0x60>
 80080a8:	6822      	ldr	r2, [r4, #0]
 80080aa:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 80080ae:	6022      	str	r2, [r4, #0]
 80080b0:	f806 3b01 	strb.w	r3, [r6], #1
 80080b4:	e7e4      	b.n	8008080 <_scanf_float+0x158>
 80080b6:	6822      	ldr	r2, [r4, #0]
 80080b8:	0610      	lsls	r0, r2, #24
 80080ba:	f57f af65 	bpl.w	8007f88 <_scanf_float+0x60>
 80080be:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80080c2:	e7f4      	b.n	80080ae <_scanf_float+0x186>
 80080c4:	f1ba 0f00 	cmp.w	sl, #0
 80080c8:	d10e      	bne.n	80080e8 <_scanf_float+0x1c0>
 80080ca:	f1b9 0f00 	cmp.w	r9, #0
 80080ce:	d10e      	bne.n	80080ee <_scanf_float+0x1c6>
 80080d0:	6822      	ldr	r2, [r4, #0]
 80080d2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 80080d6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 80080da:	d108      	bne.n	80080ee <_scanf_float+0x1c6>
 80080dc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80080e0:	6022      	str	r2, [r4, #0]
 80080e2:	f04f 0a01 	mov.w	sl, #1
 80080e6:	e7e3      	b.n	80080b0 <_scanf_float+0x188>
 80080e8:	f1ba 0f02 	cmp.w	sl, #2
 80080ec:	d055      	beq.n	800819a <_scanf_float+0x272>
 80080ee:	2d01      	cmp	r5, #1
 80080f0:	d002      	beq.n	80080f8 <_scanf_float+0x1d0>
 80080f2:	2d04      	cmp	r5, #4
 80080f4:	f47f af48 	bne.w	8007f88 <_scanf_float+0x60>
 80080f8:	3501      	adds	r5, #1
 80080fa:	b2ed      	uxtb	r5, r5
 80080fc:	e7d8      	b.n	80080b0 <_scanf_float+0x188>
 80080fe:	f1ba 0f01 	cmp.w	sl, #1
 8008102:	f47f af41 	bne.w	8007f88 <_scanf_float+0x60>
 8008106:	f04f 0a02 	mov.w	sl, #2
 800810a:	e7d1      	b.n	80080b0 <_scanf_float+0x188>
 800810c:	b97d      	cbnz	r5, 800812e <_scanf_float+0x206>
 800810e:	f1b9 0f00 	cmp.w	r9, #0
 8008112:	f47f af3c 	bne.w	8007f8e <_scanf_float+0x66>
 8008116:	6822      	ldr	r2, [r4, #0]
 8008118:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800811c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008120:	f47f af39 	bne.w	8007f96 <_scanf_float+0x6e>
 8008124:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008128:	6022      	str	r2, [r4, #0]
 800812a:	2501      	movs	r5, #1
 800812c:	e7c0      	b.n	80080b0 <_scanf_float+0x188>
 800812e:	2d03      	cmp	r5, #3
 8008130:	d0e2      	beq.n	80080f8 <_scanf_float+0x1d0>
 8008132:	2d05      	cmp	r5, #5
 8008134:	e7de      	b.n	80080f4 <_scanf_float+0x1cc>
 8008136:	2d02      	cmp	r5, #2
 8008138:	f47f af26 	bne.w	8007f88 <_scanf_float+0x60>
 800813c:	2503      	movs	r5, #3
 800813e:	e7b7      	b.n	80080b0 <_scanf_float+0x188>
 8008140:	2d06      	cmp	r5, #6
 8008142:	f47f af21 	bne.w	8007f88 <_scanf_float+0x60>
 8008146:	2507      	movs	r5, #7
 8008148:	e7b2      	b.n	80080b0 <_scanf_float+0x188>
 800814a:	6822      	ldr	r2, [r4, #0]
 800814c:	0591      	lsls	r1, r2, #22
 800814e:	f57f af1b 	bpl.w	8007f88 <_scanf_float+0x60>
 8008152:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 8008156:	6022      	str	r2, [r4, #0]
 8008158:	f8cd 9004 	str.w	r9, [sp, #4]
 800815c:	e7a8      	b.n	80080b0 <_scanf_float+0x188>
 800815e:	6822      	ldr	r2, [r4, #0]
 8008160:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 8008164:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 8008168:	d006      	beq.n	8008178 <_scanf_float+0x250>
 800816a:	0550      	lsls	r0, r2, #21
 800816c:	f57f af0c 	bpl.w	8007f88 <_scanf_float+0x60>
 8008170:	f1b9 0f00 	cmp.w	r9, #0
 8008174:	f43f af0f 	beq.w	8007f96 <_scanf_float+0x6e>
 8008178:	0591      	lsls	r1, r2, #22
 800817a:	bf58      	it	pl
 800817c:	9901      	ldrpl	r1, [sp, #4]
 800817e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008182:	bf58      	it	pl
 8008184:	eba9 0101 	subpl.w	r1, r9, r1
 8008188:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800818c:	bf58      	it	pl
 800818e:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8008192:	6022      	str	r2, [r4, #0]
 8008194:	f04f 0900 	mov.w	r9, #0
 8008198:	e78a      	b.n	80080b0 <_scanf_float+0x188>
 800819a:	f04f 0a03 	mov.w	sl, #3
 800819e:	e787      	b.n	80080b0 <_scanf_float+0x188>
 80081a0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80081a4:	4639      	mov	r1, r7
 80081a6:	4640      	mov	r0, r8
 80081a8:	4798      	blx	r3
 80081aa:	2800      	cmp	r0, #0
 80081ac:	f43f aedf 	beq.w	8007f6e <_scanf_float+0x46>
 80081b0:	e6ea      	b.n	8007f88 <_scanf_float+0x60>
 80081b2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081b6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081ba:	463a      	mov	r2, r7
 80081bc:	4640      	mov	r0, r8
 80081be:	4798      	blx	r3
 80081c0:	6923      	ldr	r3, [r4, #16]
 80081c2:	3b01      	subs	r3, #1
 80081c4:	6123      	str	r3, [r4, #16]
 80081c6:	e6ec      	b.n	8007fa2 <_scanf_float+0x7a>
 80081c8:	1e6b      	subs	r3, r5, #1
 80081ca:	2b06      	cmp	r3, #6
 80081cc:	d825      	bhi.n	800821a <_scanf_float+0x2f2>
 80081ce:	2d02      	cmp	r5, #2
 80081d0:	d836      	bhi.n	8008240 <_scanf_float+0x318>
 80081d2:	455e      	cmp	r6, fp
 80081d4:	f67f aee8 	bls.w	8007fa8 <_scanf_float+0x80>
 80081d8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081dc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80081e0:	463a      	mov	r2, r7
 80081e2:	4640      	mov	r0, r8
 80081e4:	4798      	blx	r3
 80081e6:	6923      	ldr	r3, [r4, #16]
 80081e8:	3b01      	subs	r3, #1
 80081ea:	6123      	str	r3, [r4, #16]
 80081ec:	e7f1      	b.n	80081d2 <_scanf_float+0x2aa>
 80081ee:	9802      	ldr	r0, [sp, #8]
 80081f0:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80081f4:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 80081f8:	9002      	str	r0, [sp, #8]
 80081fa:	463a      	mov	r2, r7
 80081fc:	4640      	mov	r0, r8
 80081fe:	4798      	blx	r3
 8008200:	6923      	ldr	r3, [r4, #16]
 8008202:	3b01      	subs	r3, #1
 8008204:	6123      	str	r3, [r4, #16]
 8008206:	f10a 3aff 	add.w	sl, sl, #4294967295
 800820a:	fa5f fa8a 	uxtb.w	sl, sl
 800820e:	f1ba 0f02 	cmp.w	sl, #2
 8008212:	d1ec      	bne.n	80081ee <_scanf_float+0x2c6>
 8008214:	3d03      	subs	r5, #3
 8008216:	b2ed      	uxtb	r5, r5
 8008218:	1b76      	subs	r6, r6, r5
 800821a:	6823      	ldr	r3, [r4, #0]
 800821c:	05da      	lsls	r2, r3, #23
 800821e:	d52f      	bpl.n	8008280 <_scanf_float+0x358>
 8008220:	055b      	lsls	r3, r3, #21
 8008222:	d510      	bpl.n	8008246 <_scanf_float+0x31e>
 8008224:	455e      	cmp	r6, fp
 8008226:	f67f aebf 	bls.w	8007fa8 <_scanf_float+0x80>
 800822a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800822e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008232:	463a      	mov	r2, r7
 8008234:	4640      	mov	r0, r8
 8008236:	4798      	blx	r3
 8008238:	6923      	ldr	r3, [r4, #16]
 800823a:	3b01      	subs	r3, #1
 800823c:	6123      	str	r3, [r4, #16]
 800823e:	e7f1      	b.n	8008224 <_scanf_float+0x2fc>
 8008240:	46aa      	mov	sl, r5
 8008242:	9602      	str	r6, [sp, #8]
 8008244:	e7df      	b.n	8008206 <_scanf_float+0x2de>
 8008246:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800824a:	6923      	ldr	r3, [r4, #16]
 800824c:	2965      	cmp	r1, #101	; 0x65
 800824e:	f103 33ff 	add.w	r3, r3, #4294967295
 8008252:	f106 35ff 	add.w	r5, r6, #4294967295
 8008256:	6123      	str	r3, [r4, #16]
 8008258:	d00c      	beq.n	8008274 <_scanf_float+0x34c>
 800825a:	2945      	cmp	r1, #69	; 0x45
 800825c:	d00a      	beq.n	8008274 <_scanf_float+0x34c>
 800825e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008262:	463a      	mov	r2, r7
 8008264:	4640      	mov	r0, r8
 8008266:	4798      	blx	r3
 8008268:	6923      	ldr	r3, [r4, #16]
 800826a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800826e:	3b01      	subs	r3, #1
 8008270:	1eb5      	subs	r5, r6, #2
 8008272:	6123      	str	r3, [r4, #16]
 8008274:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008278:	463a      	mov	r2, r7
 800827a:	4640      	mov	r0, r8
 800827c:	4798      	blx	r3
 800827e:	462e      	mov	r6, r5
 8008280:	6825      	ldr	r5, [r4, #0]
 8008282:	f015 0510 	ands.w	r5, r5, #16
 8008286:	d159      	bne.n	800833c <_scanf_float+0x414>
 8008288:	7035      	strb	r5, [r6, #0]
 800828a:	6823      	ldr	r3, [r4, #0]
 800828c:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 8008290:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8008294:	d11b      	bne.n	80082ce <_scanf_float+0x3a6>
 8008296:	9b01      	ldr	r3, [sp, #4]
 8008298:	454b      	cmp	r3, r9
 800829a:	eba3 0209 	sub.w	r2, r3, r9
 800829e:	d123      	bne.n	80082e8 <_scanf_float+0x3c0>
 80082a0:	2200      	movs	r2, #0
 80082a2:	4659      	mov	r1, fp
 80082a4:	4640      	mov	r0, r8
 80082a6:	f000 fe99 	bl	8008fdc <_strtod_r>
 80082aa:	6822      	ldr	r2, [r4, #0]
 80082ac:	9b03      	ldr	r3, [sp, #12]
 80082ae:	f012 0f02 	tst.w	r2, #2
 80082b2:	ec57 6b10 	vmov	r6, r7, d0
 80082b6:	681b      	ldr	r3, [r3, #0]
 80082b8:	d021      	beq.n	80082fe <_scanf_float+0x3d6>
 80082ba:	9903      	ldr	r1, [sp, #12]
 80082bc:	1d1a      	adds	r2, r3, #4
 80082be:	600a      	str	r2, [r1, #0]
 80082c0:	681b      	ldr	r3, [r3, #0]
 80082c2:	e9c3 6700 	strd	r6, r7, [r3]
 80082c6:	68e3      	ldr	r3, [r4, #12]
 80082c8:	3301      	adds	r3, #1
 80082ca:	60e3      	str	r3, [r4, #12]
 80082cc:	e66d      	b.n	8007faa <_scanf_float+0x82>
 80082ce:	9b04      	ldr	r3, [sp, #16]
 80082d0:	2b00      	cmp	r3, #0
 80082d2:	d0e5      	beq.n	80082a0 <_scanf_float+0x378>
 80082d4:	9905      	ldr	r1, [sp, #20]
 80082d6:	230a      	movs	r3, #10
 80082d8:	462a      	mov	r2, r5
 80082da:	3101      	adds	r1, #1
 80082dc:	4640      	mov	r0, r8
 80082de:	f000 ff6d 	bl	80091bc <_strtol_r>
 80082e2:	9b04      	ldr	r3, [sp, #16]
 80082e4:	9e05      	ldr	r6, [sp, #20]
 80082e6:	1ac2      	subs	r2, r0, r3
 80082e8:	f204 136f 	addw	r3, r4, #367	; 0x16f
 80082ec:	429e      	cmp	r6, r3
 80082ee:	bf28      	it	cs
 80082f0:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 80082f4:	4912      	ldr	r1, [pc, #72]	; (8008340 <_scanf_float+0x418>)
 80082f6:	4630      	mov	r0, r6
 80082f8:	f000 f82c 	bl	8008354 <siprintf>
 80082fc:	e7d0      	b.n	80082a0 <_scanf_float+0x378>
 80082fe:	9903      	ldr	r1, [sp, #12]
 8008300:	f012 0f04 	tst.w	r2, #4
 8008304:	f103 0204 	add.w	r2, r3, #4
 8008308:	600a      	str	r2, [r1, #0]
 800830a:	d1d9      	bne.n	80082c0 <_scanf_float+0x398>
 800830c:	f8d3 8000 	ldr.w	r8, [r3]
 8008310:	ee10 2a10 	vmov	r2, s0
 8008314:	ee10 0a10 	vmov	r0, s0
 8008318:	463b      	mov	r3, r7
 800831a:	4639      	mov	r1, r7
 800831c:	f7f8 fc06 	bl	8000b2c <__aeabi_dcmpun>
 8008320:	b128      	cbz	r0, 800832e <_scanf_float+0x406>
 8008322:	4808      	ldr	r0, [pc, #32]	; (8008344 <_scanf_float+0x41c>)
 8008324:	f000 f810 	bl	8008348 <nanf>
 8008328:	ed88 0a00 	vstr	s0, [r8]
 800832c:	e7cb      	b.n	80082c6 <_scanf_float+0x39e>
 800832e:	4630      	mov	r0, r6
 8008330:	4639      	mov	r1, r7
 8008332:	f7f8 fc59 	bl	8000be8 <__aeabi_d2f>
 8008336:	f8c8 0000 	str.w	r0, [r8]
 800833a:	e7c4      	b.n	80082c6 <_scanf_float+0x39e>
 800833c:	2500      	movs	r5, #0
 800833e:	e634      	b.n	8007faa <_scanf_float+0x82>
 8008340:	0800c188 	.word	0x0800c188
 8008344:	0800c28f 	.word	0x0800c28f

08008348 <nanf>:
 8008348:	ed9f 0a01 	vldr	s0, [pc, #4]	; 8008350 <nanf+0x8>
 800834c:	4770      	bx	lr
 800834e:	bf00      	nop
 8008350:	7fc00000 	.word	0x7fc00000

08008354 <siprintf>:
 8008354:	b40e      	push	{r1, r2, r3}
 8008356:	b500      	push	{lr}
 8008358:	b09c      	sub	sp, #112	; 0x70
 800835a:	ab1d      	add	r3, sp, #116	; 0x74
 800835c:	9002      	str	r0, [sp, #8]
 800835e:	9006      	str	r0, [sp, #24]
 8008360:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8008364:	4809      	ldr	r0, [pc, #36]	; (800838c <siprintf+0x38>)
 8008366:	9107      	str	r1, [sp, #28]
 8008368:	9104      	str	r1, [sp, #16]
 800836a:	4909      	ldr	r1, [pc, #36]	; (8008390 <siprintf+0x3c>)
 800836c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008370:	9105      	str	r1, [sp, #20]
 8008372:	6800      	ldr	r0, [r0, #0]
 8008374:	9301      	str	r3, [sp, #4]
 8008376:	a902      	add	r1, sp, #8
 8008378:	f002 ff7e 	bl	800b278 <_svfiprintf_r>
 800837c:	9b02      	ldr	r3, [sp, #8]
 800837e:	2200      	movs	r2, #0
 8008380:	701a      	strb	r2, [r3, #0]
 8008382:	b01c      	add	sp, #112	; 0x70
 8008384:	f85d eb04 	ldr.w	lr, [sp], #4
 8008388:	b003      	add	sp, #12
 800838a:	4770      	bx	lr
 800838c:	20000020 	.word	0x20000020
 8008390:	ffff0208 	.word	0xffff0208

08008394 <sulp>:
 8008394:	b570      	push	{r4, r5, r6, lr}
 8008396:	4604      	mov	r4, r0
 8008398:	460d      	mov	r5, r1
 800839a:	ec45 4b10 	vmov	d0, r4, r5
 800839e:	4616      	mov	r6, r2
 80083a0:	f002 fcc8 	bl	800ad34 <__ulp>
 80083a4:	ec51 0b10 	vmov	r0, r1, d0
 80083a8:	b17e      	cbz	r6, 80083ca <sulp+0x36>
 80083aa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80083ae:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 80083b2:	2b00      	cmp	r3, #0
 80083b4:	dd09      	ble.n	80083ca <sulp+0x36>
 80083b6:	051b      	lsls	r3, r3, #20
 80083b8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 80083bc:	2400      	movs	r4, #0
 80083be:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 80083c2:	4622      	mov	r2, r4
 80083c4:	462b      	mov	r3, r5
 80083c6:	f7f8 f917 	bl	80005f8 <__aeabi_dmul>
 80083ca:	bd70      	pop	{r4, r5, r6, pc}
 80083cc:	0000      	movs	r0, r0
	...

080083d0 <_strtod_l>:
 80083d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80083d4:	ed2d 8b02 	vpush	{d8}
 80083d8:	b09d      	sub	sp, #116	; 0x74
 80083da:	461f      	mov	r7, r3
 80083dc:	2300      	movs	r3, #0
 80083de:	9318      	str	r3, [sp, #96]	; 0x60
 80083e0:	4ba2      	ldr	r3, [pc, #648]	; (800866c <_strtod_l+0x29c>)
 80083e2:	9213      	str	r2, [sp, #76]	; 0x4c
 80083e4:	681b      	ldr	r3, [r3, #0]
 80083e6:	9305      	str	r3, [sp, #20]
 80083e8:	4604      	mov	r4, r0
 80083ea:	4618      	mov	r0, r3
 80083ec:	4688      	mov	r8, r1
 80083ee:	f7f7 feef 	bl	80001d0 <strlen>
 80083f2:	f04f 0a00 	mov.w	sl, #0
 80083f6:	4605      	mov	r5, r0
 80083f8:	f04f 0b00 	mov.w	fp, #0
 80083fc:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008400:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008402:	781a      	ldrb	r2, [r3, #0]
 8008404:	2a2b      	cmp	r2, #43	; 0x2b
 8008406:	d04e      	beq.n	80084a6 <_strtod_l+0xd6>
 8008408:	d83b      	bhi.n	8008482 <_strtod_l+0xb2>
 800840a:	2a0d      	cmp	r2, #13
 800840c:	d834      	bhi.n	8008478 <_strtod_l+0xa8>
 800840e:	2a08      	cmp	r2, #8
 8008410:	d834      	bhi.n	800847c <_strtod_l+0xac>
 8008412:	2a00      	cmp	r2, #0
 8008414:	d03e      	beq.n	8008494 <_strtod_l+0xc4>
 8008416:	2300      	movs	r3, #0
 8008418:	930a      	str	r3, [sp, #40]	; 0x28
 800841a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800841c:	7833      	ldrb	r3, [r6, #0]
 800841e:	2b30      	cmp	r3, #48	; 0x30
 8008420:	f040 80b0 	bne.w	8008584 <_strtod_l+0x1b4>
 8008424:	7873      	ldrb	r3, [r6, #1]
 8008426:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800842a:	2b58      	cmp	r3, #88	; 0x58
 800842c:	d168      	bne.n	8008500 <_strtod_l+0x130>
 800842e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008430:	9301      	str	r3, [sp, #4]
 8008432:	ab18      	add	r3, sp, #96	; 0x60
 8008434:	9702      	str	r7, [sp, #8]
 8008436:	9300      	str	r3, [sp, #0]
 8008438:	4a8d      	ldr	r2, [pc, #564]	; (8008670 <_strtod_l+0x2a0>)
 800843a:	ab19      	add	r3, sp, #100	; 0x64
 800843c:	a917      	add	r1, sp, #92	; 0x5c
 800843e:	4620      	mov	r0, r4
 8008440:	f001 fdd2 	bl	8009fe8 <__gethex>
 8008444:	f010 0707 	ands.w	r7, r0, #7
 8008448:	4605      	mov	r5, r0
 800844a:	d005      	beq.n	8008458 <_strtod_l+0x88>
 800844c:	2f06      	cmp	r7, #6
 800844e:	d12c      	bne.n	80084aa <_strtod_l+0xda>
 8008450:	3601      	adds	r6, #1
 8008452:	2300      	movs	r3, #0
 8008454:	9617      	str	r6, [sp, #92]	; 0x5c
 8008456:	930a      	str	r3, [sp, #40]	; 0x28
 8008458:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800845a:	2b00      	cmp	r3, #0
 800845c:	f040 8590 	bne.w	8008f80 <_strtod_l+0xbb0>
 8008460:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008462:	b1eb      	cbz	r3, 80084a0 <_strtod_l+0xd0>
 8008464:	4652      	mov	r2, sl
 8008466:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800846a:	ec43 2b10 	vmov	d0, r2, r3
 800846e:	b01d      	add	sp, #116	; 0x74
 8008470:	ecbd 8b02 	vpop	{d8}
 8008474:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008478:	2a20      	cmp	r2, #32
 800847a:	d1cc      	bne.n	8008416 <_strtod_l+0x46>
 800847c:	3301      	adds	r3, #1
 800847e:	9317      	str	r3, [sp, #92]	; 0x5c
 8008480:	e7be      	b.n	8008400 <_strtod_l+0x30>
 8008482:	2a2d      	cmp	r2, #45	; 0x2d
 8008484:	d1c7      	bne.n	8008416 <_strtod_l+0x46>
 8008486:	2201      	movs	r2, #1
 8008488:	920a      	str	r2, [sp, #40]	; 0x28
 800848a:	1c5a      	adds	r2, r3, #1
 800848c:	9217      	str	r2, [sp, #92]	; 0x5c
 800848e:	785b      	ldrb	r3, [r3, #1]
 8008490:	2b00      	cmp	r3, #0
 8008492:	d1c2      	bne.n	800841a <_strtod_l+0x4a>
 8008494:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 8008496:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800849a:	2b00      	cmp	r3, #0
 800849c:	f040 856e 	bne.w	8008f7c <_strtod_l+0xbac>
 80084a0:	4652      	mov	r2, sl
 80084a2:	465b      	mov	r3, fp
 80084a4:	e7e1      	b.n	800846a <_strtod_l+0x9a>
 80084a6:	2200      	movs	r2, #0
 80084a8:	e7ee      	b.n	8008488 <_strtod_l+0xb8>
 80084aa:	9a18      	ldr	r2, [sp, #96]	; 0x60
 80084ac:	b13a      	cbz	r2, 80084be <_strtod_l+0xee>
 80084ae:	2135      	movs	r1, #53	; 0x35
 80084b0:	a81a      	add	r0, sp, #104	; 0x68
 80084b2:	f002 fd4a 	bl	800af4a <__copybits>
 80084b6:	9918      	ldr	r1, [sp, #96]	; 0x60
 80084b8:	4620      	mov	r0, r4
 80084ba:	f002 f909 	bl	800a6d0 <_Bfree>
 80084be:	3f01      	subs	r7, #1
 80084c0:	2f04      	cmp	r7, #4
 80084c2:	d806      	bhi.n	80084d2 <_strtod_l+0x102>
 80084c4:	e8df f007 	tbb	[pc, r7]
 80084c8:	1714030a 	.word	0x1714030a
 80084cc:	0a          	.byte	0x0a
 80084cd:	00          	.byte	0x00
 80084ce:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 80084d2:	0728      	lsls	r0, r5, #28
 80084d4:	d5c0      	bpl.n	8008458 <_strtod_l+0x88>
 80084d6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 80084da:	e7bd      	b.n	8008458 <_strtod_l+0x88>
 80084dc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 80084e0:	9a19      	ldr	r2, [sp, #100]	; 0x64
 80084e2:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 80084e6:	f202 4233 	addw	r2, r2, #1075	; 0x433
 80084ea:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80084ee:	e7f0      	b.n	80084d2 <_strtod_l+0x102>
 80084f0:	f8df b180 	ldr.w	fp, [pc, #384]	; 8008674 <_strtod_l+0x2a4>
 80084f4:	e7ed      	b.n	80084d2 <_strtod_l+0x102>
 80084f6:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 80084fa:	f04f 3aff 	mov.w	sl, #4294967295
 80084fe:	e7e8      	b.n	80084d2 <_strtod_l+0x102>
 8008500:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008502:	1c5a      	adds	r2, r3, #1
 8008504:	9217      	str	r2, [sp, #92]	; 0x5c
 8008506:	785b      	ldrb	r3, [r3, #1]
 8008508:	2b30      	cmp	r3, #48	; 0x30
 800850a:	d0f9      	beq.n	8008500 <_strtod_l+0x130>
 800850c:	2b00      	cmp	r3, #0
 800850e:	d0a3      	beq.n	8008458 <_strtod_l+0x88>
 8008510:	2301      	movs	r3, #1
 8008512:	f04f 0900 	mov.w	r9, #0
 8008516:	9304      	str	r3, [sp, #16]
 8008518:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800851a:	9308      	str	r3, [sp, #32]
 800851c:	f8cd 901c 	str.w	r9, [sp, #28]
 8008520:	464f      	mov	r7, r9
 8008522:	220a      	movs	r2, #10
 8008524:	9817      	ldr	r0, [sp, #92]	; 0x5c
 8008526:	7806      	ldrb	r6, [r0, #0]
 8008528:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800852c:	b2d9      	uxtb	r1, r3
 800852e:	2909      	cmp	r1, #9
 8008530:	d92a      	bls.n	8008588 <_strtod_l+0x1b8>
 8008532:	9905      	ldr	r1, [sp, #20]
 8008534:	462a      	mov	r2, r5
 8008536:	f003 f913 	bl	800b760 <strncmp>
 800853a:	b398      	cbz	r0, 80085a4 <_strtod_l+0x1d4>
 800853c:	2000      	movs	r0, #0
 800853e:	4632      	mov	r2, r6
 8008540:	463d      	mov	r5, r7
 8008542:	9005      	str	r0, [sp, #20]
 8008544:	4603      	mov	r3, r0
 8008546:	2a65      	cmp	r2, #101	; 0x65
 8008548:	d001      	beq.n	800854e <_strtod_l+0x17e>
 800854a:	2a45      	cmp	r2, #69	; 0x45
 800854c:	d118      	bne.n	8008580 <_strtod_l+0x1b0>
 800854e:	b91d      	cbnz	r5, 8008558 <_strtod_l+0x188>
 8008550:	9a04      	ldr	r2, [sp, #16]
 8008552:	4302      	orrs	r2, r0
 8008554:	d09e      	beq.n	8008494 <_strtod_l+0xc4>
 8008556:	2500      	movs	r5, #0
 8008558:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800855c:	f108 0201 	add.w	r2, r8, #1
 8008560:	9217      	str	r2, [sp, #92]	; 0x5c
 8008562:	f898 2001 	ldrb.w	r2, [r8, #1]
 8008566:	2a2b      	cmp	r2, #43	; 0x2b
 8008568:	d075      	beq.n	8008656 <_strtod_l+0x286>
 800856a:	2a2d      	cmp	r2, #45	; 0x2d
 800856c:	d07b      	beq.n	8008666 <_strtod_l+0x296>
 800856e:	f04f 0c00 	mov.w	ip, #0
 8008572:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 8008576:	2909      	cmp	r1, #9
 8008578:	f240 8082 	bls.w	8008680 <_strtod_l+0x2b0>
 800857c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008580:	2600      	movs	r6, #0
 8008582:	e09d      	b.n	80086c0 <_strtod_l+0x2f0>
 8008584:	2300      	movs	r3, #0
 8008586:	e7c4      	b.n	8008512 <_strtod_l+0x142>
 8008588:	2f08      	cmp	r7, #8
 800858a:	bfd8      	it	le
 800858c:	9907      	ldrle	r1, [sp, #28]
 800858e:	f100 0001 	add.w	r0, r0, #1
 8008592:	bfda      	itte	le
 8008594:	fb02 3301 	mlale	r3, r2, r1, r3
 8008598:	9307      	strle	r3, [sp, #28]
 800859a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800859e:	3701      	adds	r7, #1
 80085a0:	9017      	str	r0, [sp, #92]	; 0x5c
 80085a2:	e7bf      	b.n	8008524 <_strtod_l+0x154>
 80085a4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085a6:	195a      	adds	r2, r3, r5
 80085a8:	9217      	str	r2, [sp, #92]	; 0x5c
 80085aa:	5d5a      	ldrb	r2, [r3, r5]
 80085ac:	2f00      	cmp	r7, #0
 80085ae:	d037      	beq.n	8008620 <_strtod_l+0x250>
 80085b0:	9005      	str	r0, [sp, #20]
 80085b2:	463d      	mov	r5, r7
 80085b4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 80085b8:	2b09      	cmp	r3, #9
 80085ba:	d912      	bls.n	80085e2 <_strtod_l+0x212>
 80085bc:	2301      	movs	r3, #1
 80085be:	e7c2      	b.n	8008546 <_strtod_l+0x176>
 80085c0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085c2:	1c5a      	adds	r2, r3, #1
 80085c4:	9217      	str	r2, [sp, #92]	; 0x5c
 80085c6:	785a      	ldrb	r2, [r3, #1]
 80085c8:	3001      	adds	r0, #1
 80085ca:	2a30      	cmp	r2, #48	; 0x30
 80085cc:	d0f8      	beq.n	80085c0 <_strtod_l+0x1f0>
 80085ce:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 80085d2:	2b08      	cmp	r3, #8
 80085d4:	f200 84d9 	bhi.w	8008f8a <_strtod_l+0xbba>
 80085d8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80085da:	9005      	str	r0, [sp, #20]
 80085dc:	2000      	movs	r0, #0
 80085de:	9308      	str	r3, [sp, #32]
 80085e0:	4605      	mov	r5, r0
 80085e2:	3a30      	subs	r2, #48	; 0x30
 80085e4:	f100 0301 	add.w	r3, r0, #1
 80085e8:	d014      	beq.n	8008614 <_strtod_l+0x244>
 80085ea:	9905      	ldr	r1, [sp, #20]
 80085ec:	4419      	add	r1, r3
 80085ee:	9105      	str	r1, [sp, #20]
 80085f0:	462b      	mov	r3, r5
 80085f2:	eb00 0e05 	add.w	lr, r0, r5
 80085f6:	210a      	movs	r1, #10
 80085f8:	4573      	cmp	r3, lr
 80085fa:	d113      	bne.n	8008624 <_strtod_l+0x254>
 80085fc:	182b      	adds	r3, r5, r0
 80085fe:	2b08      	cmp	r3, #8
 8008600:	f105 0501 	add.w	r5, r5, #1
 8008604:	4405      	add	r5, r0
 8008606:	dc1c      	bgt.n	8008642 <_strtod_l+0x272>
 8008608:	9907      	ldr	r1, [sp, #28]
 800860a:	230a      	movs	r3, #10
 800860c:	fb03 2301 	mla	r3, r3, r1, r2
 8008610:	9307      	str	r3, [sp, #28]
 8008612:	2300      	movs	r3, #0
 8008614:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008616:	1c51      	adds	r1, r2, #1
 8008618:	9117      	str	r1, [sp, #92]	; 0x5c
 800861a:	7852      	ldrb	r2, [r2, #1]
 800861c:	4618      	mov	r0, r3
 800861e:	e7c9      	b.n	80085b4 <_strtod_l+0x1e4>
 8008620:	4638      	mov	r0, r7
 8008622:	e7d2      	b.n	80085ca <_strtod_l+0x1fa>
 8008624:	2b08      	cmp	r3, #8
 8008626:	dc04      	bgt.n	8008632 <_strtod_l+0x262>
 8008628:	9e07      	ldr	r6, [sp, #28]
 800862a:	434e      	muls	r6, r1
 800862c:	9607      	str	r6, [sp, #28]
 800862e:	3301      	adds	r3, #1
 8008630:	e7e2      	b.n	80085f8 <_strtod_l+0x228>
 8008632:	f103 0c01 	add.w	ip, r3, #1
 8008636:	f1bc 0f10 	cmp.w	ip, #16
 800863a:	bfd8      	it	le
 800863c:	fb01 f909 	mulle.w	r9, r1, r9
 8008640:	e7f5      	b.n	800862e <_strtod_l+0x25e>
 8008642:	2d10      	cmp	r5, #16
 8008644:	bfdc      	itt	le
 8008646:	230a      	movle	r3, #10
 8008648:	fb03 2909 	mlale	r9, r3, r9, r2
 800864c:	e7e1      	b.n	8008612 <_strtod_l+0x242>
 800864e:	2300      	movs	r3, #0
 8008650:	9305      	str	r3, [sp, #20]
 8008652:	2301      	movs	r3, #1
 8008654:	e77c      	b.n	8008550 <_strtod_l+0x180>
 8008656:	f04f 0c00 	mov.w	ip, #0
 800865a:	f108 0202 	add.w	r2, r8, #2
 800865e:	9217      	str	r2, [sp, #92]	; 0x5c
 8008660:	f898 2002 	ldrb.w	r2, [r8, #2]
 8008664:	e785      	b.n	8008572 <_strtod_l+0x1a2>
 8008666:	f04f 0c01 	mov.w	ip, #1
 800866a:	e7f6      	b.n	800865a <_strtod_l+0x28a>
 800866c:	0800c470 	.word	0x0800c470
 8008670:	0800c190 	.word	0x0800c190
 8008674:	7ff00000 	.word	0x7ff00000
 8008678:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800867a:	1c51      	adds	r1, r2, #1
 800867c:	9117      	str	r1, [sp, #92]	; 0x5c
 800867e:	7852      	ldrb	r2, [r2, #1]
 8008680:	2a30      	cmp	r2, #48	; 0x30
 8008682:	d0f9      	beq.n	8008678 <_strtod_l+0x2a8>
 8008684:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 8008688:	2908      	cmp	r1, #8
 800868a:	f63f af79 	bhi.w	8008580 <_strtod_l+0x1b0>
 800868e:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 8008692:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008694:	9206      	str	r2, [sp, #24]
 8008696:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 8008698:	1c51      	adds	r1, r2, #1
 800869a:	9117      	str	r1, [sp, #92]	; 0x5c
 800869c:	7852      	ldrb	r2, [r2, #1]
 800869e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80086a2:	2e09      	cmp	r6, #9
 80086a4:	d937      	bls.n	8008716 <_strtod_l+0x346>
 80086a6:	9e06      	ldr	r6, [sp, #24]
 80086a8:	1b89      	subs	r1, r1, r6
 80086aa:	2908      	cmp	r1, #8
 80086ac:	f644 661f 	movw	r6, #19999	; 0x4e1f
 80086b0:	dc02      	bgt.n	80086b8 <_strtod_l+0x2e8>
 80086b2:	4576      	cmp	r6, lr
 80086b4:	bfa8      	it	ge
 80086b6:	4676      	movge	r6, lr
 80086b8:	f1bc 0f00 	cmp.w	ip, #0
 80086bc:	d000      	beq.n	80086c0 <_strtod_l+0x2f0>
 80086be:	4276      	negs	r6, r6
 80086c0:	2d00      	cmp	r5, #0
 80086c2:	d14d      	bne.n	8008760 <_strtod_l+0x390>
 80086c4:	9904      	ldr	r1, [sp, #16]
 80086c6:	4301      	orrs	r1, r0
 80086c8:	f47f aec6 	bne.w	8008458 <_strtod_l+0x88>
 80086cc:	2b00      	cmp	r3, #0
 80086ce:	f47f aee1 	bne.w	8008494 <_strtod_l+0xc4>
 80086d2:	2a69      	cmp	r2, #105	; 0x69
 80086d4:	d027      	beq.n	8008726 <_strtod_l+0x356>
 80086d6:	dc24      	bgt.n	8008722 <_strtod_l+0x352>
 80086d8:	2a49      	cmp	r2, #73	; 0x49
 80086da:	d024      	beq.n	8008726 <_strtod_l+0x356>
 80086dc:	2a4e      	cmp	r2, #78	; 0x4e
 80086de:	f47f aed9 	bne.w	8008494 <_strtod_l+0xc4>
 80086e2:	499f      	ldr	r1, [pc, #636]	; (8008960 <_strtod_l+0x590>)
 80086e4:	a817      	add	r0, sp, #92	; 0x5c
 80086e6:	f001 fed7 	bl	800a498 <__match>
 80086ea:	2800      	cmp	r0, #0
 80086ec:	f43f aed2 	beq.w	8008494 <_strtod_l+0xc4>
 80086f0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80086f2:	781b      	ldrb	r3, [r3, #0]
 80086f4:	2b28      	cmp	r3, #40	; 0x28
 80086f6:	d12d      	bne.n	8008754 <_strtod_l+0x384>
 80086f8:	499a      	ldr	r1, [pc, #616]	; (8008964 <_strtod_l+0x594>)
 80086fa:	aa1a      	add	r2, sp, #104	; 0x68
 80086fc:	a817      	add	r0, sp, #92	; 0x5c
 80086fe:	f001 fedf 	bl	800a4c0 <__hexnan>
 8008702:	2805      	cmp	r0, #5
 8008704:	d126      	bne.n	8008754 <_strtod_l+0x384>
 8008706:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008708:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800870c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008710:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008714:	e6a0      	b.n	8008458 <_strtod_l+0x88>
 8008716:	210a      	movs	r1, #10
 8008718:	fb01 2e0e 	mla	lr, r1, lr, r2
 800871c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008720:	e7b9      	b.n	8008696 <_strtod_l+0x2c6>
 8008722:	2a6e      	cmp	r2, #110	; 0x6e
 8008724:	e7db      	b.n	80086de <_strtod_l+0x30e>
 8008726:	4990      	ldr	r1, [pc, #576]	; (8008968 <_strtod_l+0x598>)
 8008728:	a817      	add	r0, sp, #92	; 0x5c
 800872a:	f001 feb5 	bl	800a498 <__match>
 800872e:	2800      	cmp	r0, #0
 8008730:	f43f aeb0 	beq.w	8008494 <_strtod_l+0xc4>
 8008734:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008736:	498d      	ldr	r1, [pc, #564]	; (800896c <_strtod_l+0x59c>)
 8008738:	3b01      	subs	r3, #1
 800873a:	a817      	add	r0, sp, #92	; 0x5c
 800873c:	9317      	str	r3, [sp, #92]	; 0x5c
 800873e:	f001 feab 	bl	800a498 <__match>
 8008742:	b910      	cbnz	r0, 800874a <_strtod_l+0x37a>
 8008744:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008746:	3301      	adds	r3, #1
 8008748:	9317      	str	r3, [sp, #92]	; 0x5c
 800874a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800897c <_strtod_l+0x5ac>
 800874e:	f04f 0a00 	mov.w	sl, #0
 8008752:	e681      	b.n	8008458 <_strtod_l+0x88>
 8008754:	4886      	ldr	r0, [pc, #536]	; (8008970 <_strtod_l+0x5a0>)
 8008756:	f002 ffeb 	bl	800b730 <nan>
 800875a:	ec5b ab10 	vmov	sl, fp, d0
 800875e:	e67b      	b.n	8008458 <_strtod_l+0x88>
 8008760:	9b05      	ldr	r3, [sp, #20]
 8008762:	9807      	ldr	r0, [sp, #28]
 8008764:	1af3      	subs	r3, r6, r3
 8008766:	2f00      	cmp	r7, #0
 8008768:	bf08      	it	eq
 800876a:	462f      	moveq	r7, r5
 800876c:	2d10      	cmp	r5, #16
 800876e:	9306      	str	r3, [sp, #24]
 8008770:	46a8      	mov	r8, r5
 8008772:	bfa8      	it	ge
 8008774:	f04f 0810 	movge.w	r8, #16
 8008778:	f7f7 fec4 	bl	8000504 <__aeabi_ui2d>
 800877c:	2d09      	cmp	r5, #9
 800877e:	4682      	mov	sl, r0
 8008780:	468b      	mov	fp, r1
 8008782:	dd13      	ble.n	80087ac <_strtod_l+0x3dc>
 8008784:	4b7b      	ldr	r3, [pc, #492]	; (8008974 <_strtod_l+0x5a4>)
 8008786:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800878a:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800878e:	f7f7 ff33 	bl	80005f8 <__aeabi_dmul>
 8008792:	4682      	mov	sl, r0
 8008794:	4648      	mov	r0, r9
 8008796:	468b      	mov	fp, r1
 8008798:	f7f7 feb4 	bl	8000504 <__aeabi_ui2d>
 800879c:	4602      	mov	r2, r0
 800879e:	460b      	mov	r3, r1
 80087a0:	4650      	mov	r0, sl
 80087a2:	4659      	mov	r1, fp
 80087a4:	f7f7 fd72 	bl	800028c <__adddf3>
 80087a8:	4682      	mov	sl, r0
 80087aa:	468b      	mov	fp, r1
 80087ac:	2d0f      	cmp	r5, #15
 80087ae:	dc38      	bgt.n	8008822 <_strtod_l+0x452>
 80087b0:	9b06      	ldr	r3, [sp, #24]
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f43f ae50 	beq.w	8008458 <_strtod_l+0x88>
 80087b8:	dd24      	ble.n	8008804 <_strtod_l+0x434>
 80087ba:	2b16      	cmp	r3, #22
 80087bc:	dc0b      	bgt.n	80087d6 <_strtod_l+0x406>
 80087be:	496d      	ldr	r1, [pc, #436]	; (8008974 <_strtod_l+0x5a4>)
 80087c0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80087c4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087c8:	4652      	mov	r2, sl
 80087ca:	465b      	mov	r3, fp
 80087cc:	f7f7 ff14 	bl	80005f8 <__aeabi_dmul>
 80087d0:	4682      	mov	sl, r0
 80087d2:	468b      	mov	fp, r1
 80087d4:	e640      	b.n	8008458 <_strtod_l+0x88>
 80087d6:	9a06      	ldr	r2, [sp, #24]
 80087d8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 80087dc:	4293      	cmp	r3, r2
 80087de:	db20      	blt.n	8008822 <_strtod_l+0x452>
 80087e0:	4c64      	ldr	r4, [pc, #400]	; (8008974 <_strtod_l+0x5a4>)
 80087e2:	f1c5 050f 	rsb	r5, r5, #15
 80087e6:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 80087ea:	4652      	mov	r2, sl
 80087ec:	465b      	mov	r3, fp
 80087ee:	e9d1 0100 	ldrd	r0, r1, [r1]
 80087f2:	f7f7 ff01 	bl	80005f8 <__aeabi_dmul>
 80087f6:	9b06      	ldr	r3, [sp, #24]
 80087f8:	1b5d      	subs	r5, r3, r5
 80087fa:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 80087fe:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008802:	e7e3      	b.n	80087cc <_strtod_l+0x3fc>
 8008804:	9b06      	ldr	r3, [sp, #24]
 8008806:	3316      	adds	r3, #22
 8008808:	db0b      	blt.n	8008822 <_strtod_l+0x452>
 800880a:	9b05      	ldr	r3, [sp, #20]
 800880c:	1b9e      	subs	r6, r3, r6
 800880e:	4b59      	ldr	r3, [pc, #356]	; (8008974 <_strtod_l+0x5a4>)
 8008810:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008814:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008818:	4650      	mov	r0, sl
 800881a:	4659      	mov	r1, fp
 800881c:	f7f8 f816 	bl	800084c <__aeabi_ddiv>
 8008820:	e7d6      	b.n	80087d0 <_strtod_l+0x400>
 8008822:	9b06      	ldr	r3, [sp, #24]
 8008824:	eba5 0808 	sub.w	r8, r5, r8
 8008828:	4498      	add	r8, r3
 800882a:	f1b8 0f00 	cmp.w	r8, #0
 800882e:	dd74      	ble.n	800891a <_strtod_l+0x54a>
 8008830:	f018 030f 	ands.w	r3, r8, #15
 8008834:	d00a      	beq.n	800884c <_strtod_l+0x47c>
 8008836:	494f      	ldr	r1, [pc, #316]	; (8008974 <_strtod_l+0x5a4>)
 8008838:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800883c:	4652      	mov	r2, sl
 800883e:	465b      	mov	r3, fp
 8008840:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008844:	f7f7 fed8 	bl	80005f8 <__aeabi_dmul>
 8008848:	4682      	mov	sl, r0
 800884a:	468b      	mov	fp, r1
 800884c:	f038 080f 	bics.w	r8, r8, #15
 8008850:	d04f      	beq.n	80088f2 <_strtod_l+0x522>
 8008852:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008856:	dd22      	ble.n	800889e <_strtod_l+0x4ce>
 8008858:	2500      	movs	r5, #0
 800885a:	462e      	mov	r6, r5
 800885c:	9507      	str	r5, [sp, #28]
 800885e:	9505      	str	r5, [sp, #20]
 8008860:	2322      	movs	r3, #34	; 0x22
 8008862:	f8df b118 	ldr.w	fp, [pc, #280]	; 800897c <_strtod_l+0x5ac>
 8008866:	6023      	str	r3, [r4, #0]
 8008868:	f04f 0a00 	mov.w	sl, #0
 800886c:	9b07      	ldr	r3, [sp, #28]
 800886e:	2b00      	cmp	r3, #0
 8008870:	f43f adf2 	beq.w	8008458 <_strtod_l+0x88>
 8008874:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008876:	4620      	mov	r0, r4
 8008878:	f001 ff2a 	bl	800a6d0 <_Bfree>
 800887c:	9905      	ldr	r1, [sp, #20]
 800887e:	4620      	mov	r0, r4
 8008880:	f001 ff26 	bl	800a6d0 <_Bfree>
 8008884:	4631      	mov	r1, r6
 8008886:	4620      	mov	r0, r4
 8008888:	f001 ff22 	bl	800a6d0 <_Bfree>
 800888c:	9907      	ldr	r1, [sp, #28]
 800888e:	4620      	mov	r0, r4
 8008890:	f001 ff1e 	bl	800a6d0 <_Bfree>
 8008894:	4629      	mov	r1, r5
 8008896:	4620      	mov	r0, r4
 8008898:	f001 ff1a 	bl	800a6d0 <_Bfree>
 800889c:	e5dc      	b.n	8008458 <_strtod_l+0x88>
 800889e:	4b36      	ldr	r3, [pc, #216]	; (8008978 <_strtod_l+0x5a8>)
 80088a0:	9304      	str	r3, [sp, #16]
 80088a2:	2300      	movs	r3, #0
 80088a4:	ea4f 1828 	mov.w	r8, r8, asr #4
 80088a8:	4650      	mov	r0, sl
 80088aa:	4659      	mov	r1, fp
 80088ac:	4699      	mov	r9, r3
 80088ae:	f1b8 0f01 	cmp.w	r8, #1
 80088b2:	dc21      	bgt.n	80088f8 <_strtod_l+0x528>
 80088b4:	b10b      	cbz	r3, 80088ba <_strtod_l+0x4ea>
 80088b6:	4682      	mov	sl, r0
 80088b8:	468b      	mov	fp, r1
 80088ba:	4b2f      	ldr	r3, [pc, #188]	; (8008978 <_strtod_l+0x5a8>)
 80088bc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 80088c0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 80088c4:	4652      	mov	r2, sl
 80088c6:	465b      	mov	r3, fp
 80088c8:	e9d9 0100 	ldrd	r0, r1, [r9]
 80088cc:	f7f7 fe94 	bl	80005f8 <__aeabi_dmul>
 80088d0:	4b2a      	ldr	r3, [pc, #168]	; (800897c <_strtod_l+0x5ac>)
 80088d2:	460a      	mov	r2, r1
 80088d4:	400b      	ands	r3, r1
 80088d6:	492a      	ldr	r1, [pc, #168]	; (8008980 <_strtod_l+0x5b0>)
 80088d8:	428b      	cmp	r3, r1
 80088da:	4682      	mov	sl, r0
 80088dc:	d8bc      	bhi.n	8008858 <_strtod_l+0x488>
 80088de:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 80088e2:	428b      	cmp	r3, r1
 80088e4:	bf86      	itte	hi
 80088e6:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008984 <_strtod_l+0x5b4>
 80088ea:	f04f 3aff 	movhi.w	sl, #4294967295
 80088ee:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 80088f2:	2300      	movs	r3, #0
 80088f4:	9304      	str	r3, [sp, #16]
 80088f6:	e084      	b.n	8008a02 <_strtod_l+0x632>
 80088f8:	f018 0f01 	tst.w	r8, #1
 80088fc:	d005      	beq.n	800890a <_strtod_l+0x53a>
 80088fe:	9b04      	ldr	r3, [sp, #16]
 8008900:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008904:	f7f7 fe78 	bl	80005f8 <__aeabi_dmul>
 8008908:	2301      	movs	r3, #1
 800890a:	9a04      	ldr	r2, [sp, #16]
 800890c:	3208      	adds	r2, #8
 800890e:	f109 0901 	add.w	r9, r9, #1
 8008912:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008916:	9204      	str	r2, [sp, #16]
 8008918:	e7c9      	b.n	80088ae <_strtod_l+0x4de>
 800891a:	d0ea      	beq.n	80088f2 <_strtod_l+0x522>
 800891c:	f1c8 0800 	rsb	r8, r8, #0
 8008920:	f018 020f 	ands.w	r2, r8, #15
 8008924:	d00a      	beq.n	800893c <_strtod_l+0x56c>
 8008926:	4b13      	ldr	r3, [pc, #76]	; (8008974 <_strtod_l+0x5a4>)
 8008928:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800892c:	4650      	mov	r0, sl
 800892e:	4659      	mov	r1, fp
 8008930:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008934:	f7f7 ff8a 	bl	800084c <__aeabi_ddiv>
 8008938:	4682      	mov	sl, r0
 800893a:	468b      	mov	fp, r1
 800893c:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008940:	d0d7      	beq.n	80088f2 <_strtod_l+0x522>
 8008942:	f1b8 0f1f 	cmp.w	r8, #31
 8008946:	dd1f      	ble.n	8008988 <_strtod_l+0x5b8>
 8008948:	2500      	movs	r5, #0
 800894a:	462e      	mov	r6, r5
 800894c:	9507      	str	r5, [sp, #28]
 800894e:	9505      	str	r5, [sp, #20]
 8008950:	2322      	movs	r3, #34	; 0x22
 8008952:	f04f 0a00 	mov.w	sl, #0
 8008956:	f04f 0b00 	mov.w	fp, #0
 800895a:	6023      	str	r3, [r4, #0]
 800895c:	e786      	b.n	800886c <_strtod_l+0x49c>
 800895e:	bf00      	nop
 8008960:	0800c161 	.word	0x0800c161
 8008964:	0800c1a4 	.word	0x0800c1a4
 8008968:	0800c159 	.word	0x0800c159
 800896c:	0800c394 	.word	0x0800c394
 8008970:	0800c28f 	.word	0x0800c28f
 8008974:	0800c508 	.word	0x0800c508
 8008978:	0800c4e0 	.word	0x0800c4e0
 800897c:	7ff00000 	.word	0x7ff00000
 8008980:	7ca00000 	.word	0x7ca00000
 8008984:	7fefffff 	.word	0x7fefffff
 8008988:	f018 0310 	ands.w	r3, r8, #16
 800898c:	bf18      	it	ne
 800898e:	236a      	movne	r3, #106	; 0x6a
 8008990:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8008d40 <_strtod_l+0x970>
 8008994:	9304      	str	r3, [sp, #16]
 8008996:	4650      	mov	r0, sl
 8008998:	4659      	mov	r1, fp
 800899a:	2300      	movs	r3, #0
 800899c:	f018 0f01 	tst.w	r8, #1
 80089a0:	d004      	beq.n	80089ac <_strtod_l+0x5dc>
 80089a2:	e9d9 2300 	ldrd	r2, r3, [r9]
 80089a6:	f7f7 fe27 	bl	80005f8 <__aeabi_dmul>
 80089aa:	2301      	movs	r3, #1
 80089ac:	ea5f 0868 	movs.w	r8, r8, asr #1
 80089b0:	f109 0908 	add.w	r9, r9, #8
 80089b4:	d1f2      	bne.n	800899c <_strtod_l+0x5cc>
 80089b6:	b10b      	cbz	r3, 80089bc <_strtod_l+0x5ec>
 80089b8:	4682      	mov	sl, r0
 80089ba:	468b      	mov	fp, r1
 80089bc:	9b04      	ldr	r3, [sp, #16]
 80089be:	b1c3      	cbz	r3, 80089f2 <_strtod_l+0x622>
 80089c0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80089c4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 80089c8:	2b00      	cmp	r3, #0
 80089ca:	4659      	mov	r1, fp
 80089cc:	dd11      	ble.n	80089f2 <_strtod_l+0x622>
 80089ce:	2b1f      	cmp	r3, #31
 80089d0:	f340 8124 	ble.w	8008c1c <_strtod_l+0x84c>
 80089d4:	2b34      	cmp	r3, #52	; 0x34
 80089d6:	bfde      	ittt	le
 80089d8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 80089dc:	f04f 33ff 	movle.w	r3, #4294967295
 80089e0:	fa03 f202 	lslle.w	r2, r3, r2
 80089e4:	f04f 0a00 	mov.w	sl, #0
 80089e8:	bfcc      	ite	gt
 80089ea:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 80089ee:	ea02 0b01 	andle.w	fp, r2, r1
 80089f2:	2200      	movs	r2, #0
 80089f4:	2300      	movs	r3, #0
 80089f6:	4650      	mov	r0, sl
 80089f8:	4659      	mov	r1, fp
 80089fa:	f7f8 f865 	bl	8000ac8 <__aeabi_dcmpeq>
 80089fe:	2800      	cmp	r0, #0
 8008a00:	d1a2      	bne.n	8008948 <_strtod_l+0x578>
 8008a02:	9b07      	ldr	r3, [sp, #28]
 8008a04:	9300      	str	r3, [sp, #0]
 8008a06:	9908      	ldr	r1, [sp, #32]
 8008a08:	462b      	mov	r3, r5
 8008a0a:	463a      	mov	r2, r7
 8008a0c:	4620      	mov	r0, r4
 8008a0e:	f001 fec7 	bl	800a7a0 <__s2b>
 8008a12:	9007      	str	r0, [sp, #28]
 8008a14:	2800      	cmp	r0, #0
 8008a16:	f43f af1f 	beq.w	8008858 <_strtod_l+0x488>
 8008a1a:	9b05      	ldr	r3, [sp, #20]
 8008a1c:	1b9e      	subs	r6, r3, r6
 8008a1e:	9b06      	ldr	r3, [sp, #24]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	bfb4      	ite	lt
 8008a24:	4633      	movlt	r3, r6
 8008a26:	2300      	movge	r3, #0
 8008a28:	930c      	str	r3, [sp, #48]	; 0x30
 8008a2a:	9b06      	ldr	r3, [sp, #24]
 8008a2c:	2500      	movs	r5, #0
 8008a2e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008a32:	9312      	str	r3, [sp, #72]	; 0x48
 8008a34:	462e      	mov	r6, r5
 8008a36:	9b07      	ldr	r3, [sp, #28]
 8008a38:	4620      	mov	r0, r4
 8008a3a:	6859      	ldr	r1, [r3, #4]
 8008a3c:	f001 fe08 	bl	800a650 <_Balloc>
 8008a40:	9005      	str	r0, [sp, #20]
 8008a42:	2800      	cmp	r0, #0
 8008a44:	f43f af0c 	beq.w	8008860 <_strtod_l+0x490>
 8008a48:	9b07      	ldr	r3, [sp, #28]
 8008a4a:	691a      	ldr	r2, [r3, #16]
 8008a4c:	3202      	adds	r2, #2
 8008a4e:	f103 010c 	add.w	r1, r3, #12
 8008a52:	0092      	lsls	r2, r2, #2
 8008a54:	300c      	adds	r0, #12
 8008a56:	f001 fded 	bl	800a634 <memcpy>
 8008a5a:	ec4b ab10 	vmov	d0, sl, fp
 8008a5e:	aa1a      	add	r2, sp, #104	; 0x68
 8008a60:	a919      	add	r1, sp, #100	; 0x64
 8008a62:	4620      	mov	r0, r4
 8008a64:	f002 f9e2 	bl	800ae2c <__d2b>
 8008a68:	ec4b ab18 	vmov	d8, sl, fp
 8008a6c:	9018      	str	r0, [sp, #96]	; 0x60
 8008a6e:	2800      	cmp	r0, #0
 8008a70:	f43f aef6 	beq.w	8008860 <_strtod_l+0x490>
 8008a74:	2101      	movs	r1, #1
 8008a76:	4620      	mov	r0, r4
 8008a78:	f001 ff2c 	bl	800a8d4 <__i2b>
 8008a7c:	4606      	mov	r6, r0
 8008a7e:	2800      	cmp	r0, #0
 8008a80:	f43f aeee 	beq.w	8008860 <_strtod_l+0x490>
 8008a84:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008a86:	9904      	ldr	r1, [sp, #16]
 8008a88:	2b00      	cmp	r3, #0
 8008a8a:	bfab      	itete	ge
 8008a8c:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008a8e:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008a90:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008a92:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008a96:	bfac      	ite	ge
 8008a98:	eb03 0902 	addge.w	r9, r3, r2
 8008a9c:	1ad7      	sublt	r7, r2, r3
 8008a9e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008aa0:	eba3 0801 	sub.w	r8, r3, r1
 8008aa4:	4490      	add	r8, r2
 8008aa6:	4ba1      	ldr	r3, [pc, #644]	; (8008d2c <_strtod_l+0x95c>)
 8008aa8:	f108 38ff 	add.w	r8, r8, #4294967295
 8008aac:	4598      	cmp	r8, r3
 8008aae:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008ab2:	f280 80c7 	bge.w	8008c44 <_strtod_l+0x874>
 8008ab6:	eba3 0308 	sub.w	r3, r3, r8
 8008aba:	2b1f      	cmp	r3, #31
 8008abc:	eba2 0203 	sub.w	r2, r2, r3
 8008ac0:	f04f 0101 	mov.w	r1, #1
 8008ac4:	f300 80b1 	bgt.w	8008c2a <_strtod_l+0x85a>
 8008ac8:	fa01 f303 	lsl.w	r3, r1, r3
 8008acc:	930d      	str	r3, [sp, #52]	; 0x34
 8008ace:	2300      	movs	r3, #0
 8008ad0:	9308      	str	r3, [sp, #32]
 8008ad2:	eb09 0802 	add.w	r8, r9, r2
 8008ad6:	9b04      	ldr	r3, [sp, #16]
 8008ad8:	45c1      	cmp	r9, r8
 8008ada:	4417      	add	r7, r2
 8008adc:	441f      	add	r7, r3
 8008ade:	464b      	mov	r3, r9
 8008ae0:	bfa8      	it	ge
 8008ae2:	4643      	movge	r3, r8
 8008ae4:	42bb      	cmp	r3, r7
 8008ae6:	bfa8      	it	ge
 8008ae8:	463b      	movge	r3, r7
 8008aea:	2b00      	cmp	r3, #0
 8008aec:	bfc2      	ittt	gt
 8008aee:	eba8 0803 	subgt.w	r8, r8, r3
 8008af2:	1aff      	subgt	r7, r7, r3
 8008af4:	eba9 0903 	subgt.w	r9, r9, r3
 8008af8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008afa:	2b00      	cmp	r3, #0
 8008afc:	dd17      	ble.n	8008b2e <_strtod_l+0x75e>
 8008afe:	4631      	mov	r1, r6
 8008b00:	461a      	mov	r2, r3
 8008b02:	4620      	mov	r0, r4
 8008b04:	f001 ffa6 	bl	800aa54 <__pow5mult>
 8008b08:	4606      	mov	r6, r0
 8008b0a:	2800      	cmp	r0, #0
 8008b0c:	f43f aea8 	beq.w	8008860 <_strtod_l+0x490>
 8008b10:	4601      	mov	r1, r0
 8008b12:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008b14:	4620      	mov	r0, r4
 8008b16:	f001 fef3 	bl	800a900 <__multiply>
 8008b1a:	900b      	str	r0, [sp, #44]	; 0x2c
 8008b1c:	2800      	cmp	r0, #0
 8008b1e:	f43f ae9f 	beq.w	8008860 <_strtod_l+0x490>
 8008b22:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b24:	4620      	mov	r0, r4
 8008b26:	f001 fdd3 	bl	800a6d0 <_Bfree>
 8008b2a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008b2c:	9318      	str	r3, [sp, #96]	; 0x60
 8008b2e:	f1b8 0f00 	cmp.w	r8, #0
 8008b32:	f300 808c 	bgt.w	8008c4e <_strtod_l+0x87e>
 8008b36:	9b06      	ldr	r3, [sp, #24]
 8008b38:	2b00      	cmp	r3, #0
 8008b3a:	dd08      	ble.n	8008b4e <_strtod_l+0x77e>
 8008b3c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008b3e:	9905      	ldr	r1, [sp, #20]
 8008b40:	4620      	mov	r0, r4
 8008b42:	f001 ff87 	bl	800aa54 <__pow5mult>
 8008b46:	9005      	str	r0, [sp, #20]
 8008b48:	2800      	cmp	r0, #0
 8008b4a:	f43f ae89 	beq.w	8008860 <_strtod_l+0x490>
 8008b4e:	2f00      	cmp	r7, #0
 8008b50:	dd08      	ble.n	8008b64 <_strtod_l+0x794>
 8008b52:	9905      	ldr	r1, [sp, #20]
 8008b54:	463a      	mov	r2, r7
 8008b56:	4620      	mov	r0, r4
 8008b58:	f001 ffd6 	bl	800ab08 <__lshift>
 8008b5c:	9005      	str	r0, [sp, #20]
 8008b5e:	2800      	cmp	r0, #0
 8008b60:	f43f ae7e 	beq.w	8008860 <_strtod_l+0x490>
 8008b64:	f1b9 0f00 	cmp.w	r9, #0
 8008b68:	dd08      	ble.n	8008b7c <_strtod_l+0x7ac>
 8008b6a:	4631      	mov	r1, r6
 8008b6c:	464a      	mov	r2, r9
 8008b6e:	4620      	mov	r0, r4
 8008b70:	f001 ffca 	bl	800ab08 <__lshift>
 8008b74:	4606      	mov	r6, r0
 8008b76:	2800      	cmp	r0, #0
 8008b78:	f43f ae72 	beq.w	8008860 <_strtod_l+0x490>
 8008b7c:	9a05      	ldr	r2, [sp, #20]
 8008b7e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008b80:	4620      	mov	r0, r4
 8008b82:	f002 f84d 	bl	800ac20 <__mdiff>
 8008b86:	4605      	mov	r5, r0
 8008b88:	2800      	cmp	r0, #0
 8008b8a:	f43f ae69 	beq.w	8008860 <_strtod_l+0x490>
 8008b8e:	68c3      	ldr	r3, [r0, #12]
 8008b90:	930b      	str	r3, [sp, #44]	; 0x2c
 8008b92:	2300      	movs	r3, #0
 8008b94:	60c3      	str	r3, [r0, #12]
 8008b96:	4631      	mov	r1, r6
 8008b98:	f002 f826 	bl	800abe8 <__mcmp>
 8008b9c:	2800      	cmp	r0, #0
 8008b9e:	da60      	bge.n	8008c62 <_strtod_l+0x892>
 8008ba0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008ba2:	ea53 030a 	orrs.w	r3, r3, sl
 8008ba6:	f040 8082 	bne.w	8008cae <_strtod_l+0x8de>
 8008baa:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008bae:	2b00      	cmp	r3, #0
 8008bb0:	d17d      	bne.n	8008cae <_strtod_l+0x8de>
 8008bb2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008bb6:	0d1b      	lsrs	r3, r3, #20
 8008bb8:	051b      	lsls	r3, r3, #20
 8008bba:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008bbe:	d976      	bls.n	8008cae <_strtod_l+0x8de>
 8008bc0:	696b      	ldr	r3, [r5, #20]
 8008bc2:	b913      	cbnz	r3, 8008bca <_strtod_l+0x7fa>
 8008bc4:	692b      	ldr	r3, [r5, #16]
 8008bc6:	2b01      	cmp	r3, #1
 8008bc8:	dd71      	ble.n	8008cae <_strtod_l+0x8de>
 8008bca:	4629      	mov	r1, r5
 8008bcc:	2201      	movs	r2, #1
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f001 ff9a 	bl	800ab08 <__lshift>
 8008bd4:	4631      	mov	r1, r6
 8008bd6:	4605      	mov	r5, r0
 8008bd8:	f002 f806 	bl	800abe8 <__mcmp>
 8008bdc:	2800      	cmp	r0, #0
 8008bde:	dd66      	ble.n	8008cae <_strtod_l+0x8de>
 8008be0:	9904      	ldr	r1, [sp, #16]
 8008be2:	4a53      	ldr	r2, [pc, #332]	; (8008d30 <_strtod_l+0x960>)
 8008be4:	465b      	mov	r3, fp
 8008be6:	2900      	cmp	r1, #0
 8008be8:	f000 8081 	beq.w	8008cee <_strtod_l+0x91e>
 8008bec:	ea02 010b 	and.w	r1, r2, fp
 8008bf0:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008bf4:	dc7b      	bgt.n	8008cee <_strtod_l+0x91e>
 8008bf6:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008bfa:	f77f aea9 	ble.w	8008950 <_strtod_l+0x580>
 8008bfe:	4b4d      	ldr	r3, [pc, #308]	; (8008d34 <_strtod_l+0x964>)
 8008c00:	4650      	mov	r0, sl
 8008c02:	4659      	mov	r1, fp
 8008c04:	2200      	movs	r2, #0
 8008c06:	f7f7 fcf7 	bl	80005f8 <__aeabi_dmul>
 8008c0a:	460b      	mov	r3, r1
 8008c0c:	4303      	orrs	r3, r0
 8008c0e:	bf08      	it	eq
 8008c10:	2322      	moveq	r3, #34	; 0x22
 8008c12:	4682      	mov	sl, r0
 8008c14:	468b      	mov	fp, r1
 8008c16:	bf08      	it	eq
 8008c18:	6023      	streq	r3, [r4, #0]
 8008c1a:	e62b      	b.n	8008874 <_strtod_l+0x4a4>
 8008c1c:	f04f 32ff 	mov.w	r2, #4294967295
 8008c20:	fa02 f303 	lsl.w	r3, r2, r3
 8008c24:	ea03 0a0a 	and.w	sl, r3, sl
 8008c28:	e6e3      	b.n	80089f2 <_strtod_l+0x622>
 8008c2a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008c2e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008c32:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008c36:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008c3a:	fa01 f308 	lsl.w	r3, r1, r8
 8008c3e:	9308      	str	r3, [sp, #32]
 8008c40:	910d      	str	r1, [sp, #52]	; 0x34
 8008c42:	e746      	b.n	8008ad2 <_strtod_l+0x702>
 8008c44:	2300      	movs	r3, #0
 8008c46:	9308      	str	r3, [sp, #32]
 8008c48:	2301      	movs	r3, #1
 8008c4a:	930d      	str	r3, [sp, #52]	; 0x34
 8008c4c:	e741      	b.n	8008ad2 <_strtod_l+0x702>
 8008c4e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008c50:	4642      	mov	r2, r8
 8008c52:	4620      	mov	r0, r4
 8008c54:	f001 ff58 	bl	800ab08 <__lshift>
 8008c58:	9018      	str	r0, [sp, #96]	; 0x60
 8008c5a:	2800      	cmp	r0, #0
 8008c5c:	f47f af6b 	bne.w	8008b36 <_strtod_l+0x766>
 8008c60:	e5fe      	b.n	8008860 <_strtod_l+0x490>
 8008c62:	465f      	mov	r7, fp
 8008c64:	d16e      	bne.n	8008d44 <_strtod_l+0x974>
 8008c66:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008c68:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008c6c:	b342      	cbz	r2, 8008cc0 <_strtod_l+0x8f0>
 8008c6e:	4a32      	ldr	r2, [pc, #200]	; (8008d38 <_strtod_l+0x968>)
 8008c70:	4293      	cmp	r3, r2
 8008c72:	d128      	bne.n	8008cc6 <_strtod_l+0x8f6>
 8008c74:	9b04      	ldr	r3, [sp, #16]
 8008c76:	4651      	mov	r1, sl
 8008c78:	b1eb      	cbz	r3, 8008cb6 <_strtod_l+0x8e6>
 8008c7a:	4b2d      	ldr	r3, [pc, #180]	; (8008d30 <_strtod_l+0x960>)
 8008c7c:	403b      	ands	r3, r7
 8008c7e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008c82:	f04f 32ff 	mov.w	r2, #4294967295
 8008c86:	d819      	bhi.n	8008cbc <_strtod_l+0x8ec>
 8008c88:	0d1b      	lsrs	r3, r3, #20
 8008c8a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008c8e:	fa02 f303 	lsl.w	r3, r2, r3
 8008c92:	4299      	cmp	r1, r3
 8008c94:	d117      	bne.n	8008cc6 <_strtod_l+0x8f6>
 8008c96:	4b29      	ldr	r3, [pc, #164]	; (8008d3c <_strtod_l+0x96c>)
 8008c98:	429f      	cmp	r7, r3
 8008c9a:	d102      	bne.n	8008ca2 <_strtod_l+0x8d2>
 8008c9c:	3101      	adds	r1, #1
 8008c9e:	f43f addf 	beq.w	8008860 <_strtod_l+0x490>
 8008ca2:	4b23      	ldr	r3, [pc, #140]	; (8008d30 <_strtod_l+0x960>)
 8008ca4:	403b      	ands	r3, r7
 8008ca6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8008caa:	f04f 0a00 	mov.w	sl, #0
 8008cae:	9b04      	ldr	r3, [sp, #16]
 8008cb0:	2b00      	cmp	r3, #0
 8008cb2:	d1a4      	bne.n	8008bfe <_strtod_l+0x82e>
 8008cb4:	e5de      	b.n	8008874 <_strtod_l+0x4a4>
 8008cb6:	f04f 33ff 	mov.w	r3, #4294967295
 8008cba:	e7ea      	b.n	8008c92 <_strtod_l+0x8c2>
 8008cbc:	4613      	mov	r3, r2
 8008cbe:	e7e8      	b.n	8008c92 <_strtod_l+0x8c2>
 8008cc0:	ea53 030a 	orrs.w	r3, r3, sl
 8008cc4:	d08c      	beq.n	8008be0 <_strtod_l+0x810>
 8008cc6:	9b08      	ldr	r3, [sp, #32]
 8008cc8:	b1db      	cbz	r3, 8008d02 <_strtod_l+0x932>
 8008cca:	423b      	tst	r3, r7
 8008ccc:	d0ef      	beq.n	8008cae <_strtod_l+0x8de>
 8008cce:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008cd0:	9a04      	ldr	r2, [sp, #16]
 8008cd2:	4650      	mov	r0, sl
 8008cd4:	4659      	mov	r1, fp
 8008cd6:	b1c3      	cbz	r3, 8008d0a <_strtod_l+0x93a>
 8008cd8:	f7ff fb5c 	bl	8008394 <sulp>
 8008cdc:	4602      	mov	r2, r0
 8008cde:	460b      	mov	r3, r1
 8008ce0:	ec51 0b18 	vmov	r0, r1, d8
 8008ce4:	f7f7 fad2 	bl	800028c <__adddf3>
 8008ce8:	4682      	mov	sl, r0
 8008cea:	468b      	mov	fp, r1
 8008cec:	e7df      	b.n	8008cae <_strtod_l+0x8de>
 8008cee:	4013      	ands	r3, r2
 8008cf0:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 8008cf4:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8008cf8:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8008cfc:	f04f 3aff 	mov.w	sl, #4294967295
 8008d00:	e7d5      	b.n	8008cae <_strtod_l+0x8de>
 8008d02:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008d04:	ea13 0f0a 	tst.w	r3, sl
 8008d08:	e7e0      	b.n	8008ccc <_strtod_l+0x8fc>
 8008d0a:	f7ff fb43 	bl	8008394 <sulp>
 8008d0e:	4602      	mov	r2, r0
 8008d10:	460b      	mov	r3, r1
 8008d12:	ec51 0b18 	vmov	r0, r1, d8
 8008d16:	f7f7 fab7 	bl	8000288 <__aeabi_dsub>
 8008d1a:	2200      	movs	r2, #0
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	4682      	mov	sl, r0
 8008d20:	468b      	mov	fp, r1
 8008d22:	f7f7 fed1 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d26:	2800      	cmp	r0, #0
 8008d28:	d0c1      	beq.n	8008cae <_strtod_l+0x8de>
 8008d2a:	e611      	b.n	8008950 <_strtod_l+0x580>
 8008d2c:	fffffc02 	.word	0xfffffc02
 8008d30:	7ff00000 	.word	0x7ff00000
 8008d34:	39500000 	.word	0x39500000
 8008d38:	000fffff 	.word	0x000fffff
 8008d3c:	7fefffff 	.word	0x7fefffff
 8008d40:	0800c1b8 	.word	0x0800c1b8
 8008d44:	4631      	mov	r1, r6
 8008d46:	4628      	mov	r0, r5
 8008d48:	f002 f8cc 	bl	800aee4 <__ratio>
 8008d4c:	ec59 8b10 	vmov	r8, r9, d0
 8008d50:	ee10 0a10 	vmov	r0, s0
 8008d54:	2200      	movs	r2, #0
 8008d56:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8008d5a:	4649      	mov	r1, r9
 8008d5c:	f7f7 fec8 	bl	8000af0 <__aeabi_dcmple>
 8008d60:	2800      	cmp	r0, #0
 8008d62:	d07a      	beq.n	8008e5a <_strtod_l+0xa8a>
 8008d64:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008d66:	2b00      	cmp	r3, #0
 8008d68:	d04a      	beq.n	8008e00 <_strtod_l+0xa30>
 8008d6a:	4b95      	ldr	r3, [pc, #596]	; (8008fc0 <_strtod_l+0xbf0>)
 8008d6c:	2200      	movs	r2, #0
 8008d6e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008d72:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8008fc0 <_strtod_l+0xbf0>
 8008d76:	f04f 0800 	mov.w	r8, #0
 8008d7a:	4b92      	ldr	r3, [pc, #584]	; (8008fc4 <_strtod_l+0xbf4>)
 8008d7c:	403b      	ands	r3, r7
 8008d7e:	930d      	str	r3, [sp, #52]	; 0x34
 8008d80:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008d82:	4b91      	ldr	r3, [pc, #580]	; (8008fc8 <_strtod_l+0xbf8>)
 8008d84:	429a      	cmp	r2, r3
 8008d86:	f040 80b0 	bne.w	8008eea <_strtod_l+0xb1a>
 8008d8a:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008d8e:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 8008d92:	ec4b ab10 	vmov	d0, sl, fp
 8008d96:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008d9a:	f001 ffcb 	bl	800ad34 <__ulp>
 8008d9e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008da2:	ec53 2b10 	vmov	r2, r3, d0
 8008da6:	f7f7 fc27 	bl	80005f8 <__aeabi_dmul>
 8008daa:	4652      	mov	r2, sl
 8008dac:	465b      	mov	r3, fp
 8008dae:	f7f7 fa6d 	bl	800028c <__adddf3>
 8008db2:	460b      	mov	r3, r1
 8008db4:	4983      	ldr	r1, [pc, #524]	; (8008fc4 <_strtod_l+0xbf4>)
 8008db6:	4a85      	ldr	r2, [pc, #532]	; (8008fcc <_strtod_l+0xbfc>)
 8008db8:	4019      	ands	r1, r3
 8008dba:	4291      	cmp	r1, r2
 8008dbc:	4682      	mov	sl, r0
 8008dbe:	d960      	bls.n	8008e82 <_strtod_l+0xab2>
 8008dc0:	ee18 3a90 	vmov	r3, s17
 8008dc4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8008dc8:	4293      	cmp	r3, r2
 8008dca:	d104      	bne.n	8008dd6 <_strtod_l+0xa06>
 8008dcc:	ee18 3a10 	vmov	r3, s16
 8008dd0:	3301      	adds	r3, #1
 8008dd2:	f43f ad45 	beq.w	8008860 <_strtod_l+0x490>
 8008dd6:	f8df b200 	ldr.w	fp, [pc, #512]	; 8008fd8 <_strtod_l+0xc08>
 8008dda:	f04f 3aff 	mov.w	sl, #4294967295
 8008dde:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008de0:	4620      	mov	r0, r4
 8008de2:	f001 fc75 	bl	800a6d0 <_Bfree>
 8008de6:	9905      	ldr	r1, [sp, #20]
 8008de8:	4620      	mov	r0, r4
 8008dea:	f001 fc71 	bl	800a6d0 <_Bfree>
 8008dee:	4631      	mov	r1, r6
 8008df0:	4620      	mov	r0, r4
 8008df2:	f001 fc6d 	bl	800a6d0 <_Bfree>
 8008df6:	4629      	mov	r1, r5
 8008df8:	4620      	mov	r0, r4
 8008dfa:	f001 fc69 	bl	800a6d0 <_Bfree>
 8008dfe:	e61a      	b.n	8008a36 <_strtod_l+0x666>
 8008e00:	f1ba 0f00 	cmp.w	sl, #0
 8008e04:	d11b      	bne.n	8008e3e <_strtod_l+0xa6e>
 8008e06:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008e0a:	b9f3      	cbnz	r3, 8008e4a <_strtod_l+0xa7a>
 8008e0c:	4b6c      	ldr	r3, [pc, #432]	; (8008fc0 <_strtod_l+0xbf0>)
 8008e0e:	2200      	movs	r2, #0
 8008e10:	4640      	mov	r0, r8
 8008e12:	4649      	mov	r1, r9
 8008e14:	f7f7 fe62 	bl	8000adc <__aeabi_dcmplt>
 8008e18:	b9d0      	cbnz	r0, 8008e50 <_strtod_l+0xa80>
 8008e1a:	4640      	mov	r0, r8
 8008e1c:	4649      	mov	r1, r9
 8008e1e:	4b6c      	ldr	r3, [pc, #432]	; (8008fd0 <_strtod_l+0xc00>)
 8008e20:	2200      	movs	r2, #0
 8008e22:	f7f7 fbe9 	bl	80005f8 <__aeabi_dmul>
 8008e26:	4680      	mov	r8, r0
 8008e28:	4689      	mov	r9, r1
 8008e2a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8008e2e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 8008e32:	9315      	str	r3, [sp, #84]	; 0x54
 8008e34:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8008e38:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008e3c:	e79d      	b.n	8008d7a <_strtod_l+0x9aa>
 8008e3e:	f1ba 0f01 	cmp.w	sl, #1
 8008e42:	d102      	bne.n	8008e4a <_strtod_l+0xa7a>
 8008e44:	2f00      	cmp	r7, #0
 8008e46:	f43f ad83 	beq.w	8008950 <_strtod_l+0x580>
 8008e4a:	4b62      	ldr	r3, [pc, #392]	; (8008fd4 <_strtod_l+0xc04>)
 8008e4c:	2200      	movs	r2, #0
 8008e4e:	e78e      	b.n	8008d6e <_strtod_l+0x99e>
 8008e50:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8008fd0 <_strtod_l+0xc00>
 8008e54:	f04f 0800 	mov.w	r8, #0
 8008e58:	e7e7      	b.n	8008e2a <_strtod_l+0xa5a>
 8008e5a:	4b5d      	ldr	r3, [pc, #372]	; (8008fd0 <_strtod_l+0xc00>)
 8008e5c:	4640      	mov	r0, r8
 8008e5e:	4649      	mov	r1, r9
 8008e60:	2200      	movs	r2, #0
 8008e62:	f7f7 fbc9 	bl	80005f8 <__aeabi_dmul>
 8008e66:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e68:	4680      	mov	r8, r0
 8008e6a:	4689      	mov	r9, r1
 8008e6c:	b933      	cbnz	r3, 8008e7c <_strtod_l+0xaac>
 8008e6e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008e72:	900e      	str	r0, [sp, #56]	; 0x38
 8008e74:	930f      	str	r3, [sp, #60]	; 0x3c
 8008e76:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 8008e7a:	e7dd      	b.n	8008e38 <_strtod_l+0xa68>
 8008e7c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 8008e80:	e7f9      	b.n	8008e76 <_strtod_l+0xaa6>
 8008e82:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 8008e86:	9b04      	ldr	r3, [sp, #16]
 8008e88:	2b00      	cmp	r3, #0
 8008e8a:	d1a8      	bne.n	8008dde <_strtod_l+0xa0e>
 8008e8c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008e90:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008e92:	0d1b      	lsrs	r3, r3, #20
 8008e94:	051b      	lsls	r3, r3, #20
 8008e96:	429a      	cmp	r2, r3
 8008e98:	d1a1      	bne.n	8008dde <_strtod_l+0xa0e>
 8008e9a:	4640      	mov	r0, r8
 8008e9c:	4649      	mov	r1, r9
 8008e9e:	f7f7 ff0b 	bl	8000cb8 <__aeabi_d2lz>
 8008ea2:	f7f7 fb7b 	bl	800059c <__aeabi_l2d>
 8008ea6:	4602      	mov	r2, r0
 8008ea8:	460b      	mov	r3, r1
 8008eaa:	4640      	mov	r0, r8
 8008eac:	4649      	mov	r1, r9
 8008eae:	f7f7 f9eb 	bl	8000288 <__aeabi_dsub>
 8008eb2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008eb4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008eb8:	ea43 030a 	orr.w	r3, r3, sl
 8008ebc:	4313      	orrs	r3, r2
 8008ebe:	4680      	mov	r8, r0
 8008ec0:	4689      	mov	r9, r1
 8008ec2:	d055      	beq.n	8008f70 <_strtod_l+0xba0>
 8008ec4:	a336      	add	r3, pc, #216	; (adr r3, 8008fa0 <_strtod_l+0xbd0>)
 8008ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eca:	f7f7 fe07 	bl	8000adc <__aeabi_dcmplt>
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	f47f acd0 	bne.w	8008874 <_strtod_l+0x4a4>
 8008ed4:	a334      	add	r3, pc, #208	; (adr r3, 8008fa8 <_strtod_l+0xbd8>)
 8008ed6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eda:	4640      	mov	r0, r8
 8008edc:	4649      	mov	r1, r9
 8008ede:	f7f7 fe1b 	bl	8000b18 <__aeabi_dcmpgt>
 8008ee2:	2800      	cmp	r0, #0
 8008ee4:	f43f af7b 	beq.w	8008dde <_strtod_l+0xa0e>
 8008ee8:	e4c4      	b.n	8008874 <_strtod_l+0x4a4>
 8008eea:	9b04      	ldr	r3, [sp, #16]
 8008eec:	b333      	cbz	r3, 8008f3c <_strtod_l+0xb6c>
 8008eee:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8008ef0:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008ef4:	d822      	bhi.n	8008f3c <_strtod_l+0xb6c>
 8008ef6:	a32e      	add	r3, pc, #184	; (adr r3, 8008fb0 <_strtod_l+0xbe0>)
 8008ef8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008efc:	4640      	mov	r0, r8
 8008efe:	4649      	mov	r1, r9
 8008f00:	f7f7 fdf6 	bl	8000af0 <__aeabi_dcmple>
 8008f04:	b1a0      	cbz	r0, 8008f30 <_strtod_l+0xb60>
 8008f06:	4649      	mov	r1, r9
 8008f08:	4640      	mov	r0, r8
 8008f0a:	f7f7 fe4d 	bl	8000ba8 <__aeabi_d2uiz>
 8008f0e:	2801      	cmp	r0, #1
 8008f10:	bf38      	it	cc
 8008f12:	2001      	movcc	r0, #1
 8008f14:	f7f7 faf6 	bl	8000504 <__aeabi_ui2d>
 8008f18:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008f1a:	4680      	mov	r8, r0
 8008f1c:	4689      	mov	r9, r1
 8008f1e:	bb23      	cbnz	r3, 8008f6a <_strtod_l+0xb9a>
 8008f20:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008f24:	9010      	str	r0, [sp, #64]	; 0x40
 8008f26:	9311      	str	r3, [sp, #68]	; 0x44
 8008f28:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8008f2c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8008f30:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008f32:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 8008f34:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8008f38:	1a9b      	subs	r3, r3, r2
 8008f3a:	9309      	str	r3, [sp, #36]	; 0x24
 8008f3c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f40:	eeb0 0a48 	vmov.f32	s0, s16
 8008f44:	eef0 0a68 	vmov.f32	s1, s17
 8008f48:	e9cd 0108 	strd	r0, r1, [sp, #32]
 8008f4c:	f001 fef2 	bl	800ad34 <__ulp>
 8008f50:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8008f54:	ec53 2b10 	vmov	r2, r3, d0
 8008f58:	f7f7 fb4e 	bl	80005f8 <__aeabi_dmul>
 8008f5c:	ec53 2b18 	vmov	r2, r3, d8
 8008f60:	f7f7 f994 	bl	800028c <__adddf3>
 8008f64:	4682      	mov	sl, r0
 8008f66:	468b      	mov	fp, r1
 8008f68:	e78d      	b.n	8008e86 <_strtod_l+0xab6>
 8008f6a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8008f6e:	e7db      	b.n	8008f28 <_strtod_l+0xb58>
 8008f70:	a311      	add	r3, pc, #68	; (adr r3, 8008fb8 <_strtod_l+0xbe8>)
 8008f72:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008f76:	f7f7 fdb1 	bl	8000adc <__aeabi_dcmplt>
 8008f7a:	e7b2      	b.n	8008ee2 <_strtod_l+0xb12>
 8008f7c:	2300      	movs	r3, #0
 8008f7e:	930a      	str	r3, [sp, #40]	; 0x28
 8008f80:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 8008f82:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008f84:	6013      	str	r3, [r2, #0]
 8008f86:	f7ff ba6b 	b.w	8008460 <_strtod_l+0x90>
 8008f8a:	2a65      	cmp	r2, #101	; 0x65
 8008f8c:	f43f ab5f 	beq.w	800864e <_strtod_l+0x27e>
 8008f90:	2a45      	cmp	r2, #69	; 0x45
 8008f92:	f43f ab5c 	beq.w	800864e <_strtod_l+0x27e>
 8008f96:	2301      	movs	r3, #1
 8008f98:	f7ff bb94 	b.w	80086c4 <_strtod_l+0x2f4>
 8008f9c:	f3af 8000 	nop.w
 8008fa0:	94a03595 	.word	0x94a03595
 8008fa4:	3fdfffff 	.word	0x3fdfffff
 8008fa8:	35afe535 	.word	0x35afe535
 8008fac:	3fe00000 	.word	0x3fe00000
 8008fb0:	ffc00000 	.word	0xffc00000
 8008fb4:	41dfffff 	.word	0x41dfffff
 8008fb8:	94a03595 	.word	0x94a03595
 8008fbc:	3fcfffff 	.word	0x3fcfffff
 8008fc0:	3ff00000 	.word	0x3ff00000
 8008fc4:	7ff00000 	.word	0x7ff00000
 8008fc8:	7fe00000 	.word	0x7fe00000
 8008fcc:	7c9fffff 	.word	0x7c9fffff
 8008fd0:	3fe00000 	.word	0x3fe00000
 8008fd4:	bff00000 	.word	0xbff00000
 8008fd8:	7fefffff 	.word	0x7fefffff

08008fdc <_strtod_r>:
 8008fdc:	4b01      	ldr	r3, [pc, #4]	; (8008fe4 <_strtod_r+0x8>)
 8008fde:	f7ff b9f7 	b.w	80083d0 <_strtod_l>
 8008fe2:	bf00      	nop
 8008fe4:	20000088 	.word	0x20000088

08008fe8 <strtod>:
 8008fe8:	460a      	mov	r2, r1
 8008fea:	4601      	mov	r1, r0
 8008fec:	4802      	ldr	r0, [pc, #8]	; (8008ff8 <strtod+0x10>)
 8008fee:	4b03      	ldr	r3, [pc, #12]	; (8008ffc <strtod+0x14>)
 8008ff0:	6800      	ldr	r0, [r0, #0]
 8008ff2:	f7ff b9ed 	b.w	80083d0 <_strtod_l>
 8008ff6:	bf00      	nop
 8008ff8:	20000020 	.word	0x20000020
 8008ffc:	20000088 	.word	0x20000088

08009000 <strtok>:
 8009000:	4b16      	ldr	r3, [pc, #88]	; (800905c <strtok+0x5c>)
 8009002:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8009004:	681e      	ldr	r6, [r3, #0]
 8009006:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009008:	4605      	mov	r5, r0
 800900a:	b9fc      	cbnz	r4, 800904c <strtok+0x4c>
 800900c:	2050      	movs	r0, #80	; 0x50
 800900e:	9101      	str	r1, [sp, #4]
 8009010:	f001 faf6 	bl	800a600 <malloc>
 8009014:	9901      	ldr	r1, [sp, #4]
 8009016:	65b0      	str	r0, [r6, #88]	; 0x58
 8009018:	4602      	mov	r2, r0
 800901a:	b920      	cbnz	r0, 8009026 <strtok+0x26>
 800901c:	4b10      	ldr	r3, [pc, #64]	; (8009060 <strtok+0x60>)
 800901e:	4811      	ldr	r0, [pc, #68]	; (8009064 <strtok+0x64>)
 8009020:	2157      	movs	r1, #87	; 0x57
 8009022:	f000 f8cd 	bl	80091c0 <__assert_func>
 8009026:	e9c0 4400 	strd	r4, r4, [r0]
 800902a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800902e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 8009032:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 8009036:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800903a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800903e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 8009042:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 8009046:	6184      	str	r4, [r0, #24]
 8009048:	7704      	strb	r4, [r0, #28]
 800904a:	6244      	str	r4, [r0, #36]	; 0x24
 800904c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800904e:	2301      	movs	r3, #1
 8009050:	4628      	mov	r0, r5
 8009052:	b002      	add	sp, #8
 8009054:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8009058:	f000 b806 	b.w	8009068 <__strtok_r>
 800905c:	20000020 	.word	0x20000020
 8009060:	0800c1e0 	.word	0x0800c1e0
 8009064:	0800c1f7 	.word	0x0800c1f7

08009068 <__strtok_r>:
 8009068:	b5f0      	push	{r4, r5, r6, r7, lr}
 800906a:	b908      	cbnz	r0, 8009070 <__strtok_r+0x8>
 800906c:	6810      	ldr	r0, [r2, #0]
 800906e:	b188      	cbz	r0, 8009094 <__strtok_r+0x2c>
 8009070:	4604      	mov	r4, r0
 8009072:	4620      	mov	r0, r4
 8009074:	f814 5b01 	ldrb.w	r5, [r4], #1
 8009078:	460f      	mov	r7, r1
 800907a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800907e:	b91e      	cbnz	r6, 8009088 <__strtok_r+0x20>
 8009080:	b965      	cbnz	r5, 800909c <__strtok_r+0x34>
 8009082:	6015      	str	r5, [r2, #0]
 8009084:	4628      	mov	r0, r5
 8009086:	e005      	b.n	8009094 <__strtok_r+0x2c>
 8009088:	42b5      	cmp	r5, r6
 800908a:	d1f6      	bne.n	800907a <__strtok_r+0x12>
 800908c:	2b00      	cmp	r3, #0
 800908e:	d1f0      	bne.n	8009072 <__strtok_r+0xa>
 8009090:	6014      	str	r4, [r2, #0]
 8009092:	7003      	strb	r3, [r0, #0]
 8009094:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009096:	461c      	mov	r4, r3
 8009098:	e00c      	b.n	80090b4 <__strtok_r+0x4c>
 800909a:	b915      	cbnz	r5, 80090a2 <__strtok_r+0x3a>
 800909c:	f814 3b01 	ldrb.w	r3, [r4], #1
 80090a0:	460e      	mov	r6, r1
 80090a2:	f816 5b01 	ldrb.w	r5, [r6], #1
 80090a6:	42ab      	cmp	r3, r5
 80090a8:	d1f7      	bne.n	800909a <__strtok_r+0x32>
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	d0f3      	beq.n	8009096 <__strtok_r+0x2e>
 80090ae:	2300      	movs	r3, #0
 80090b0:	f804 3c01 	strb.w	r3, [r4, #-1]
 80090b4:	6014      	str	r4, [r2, #0]
 80090b6:	e7ed      	b.n	8009094 <__strtok_r+0x2c>

080090b8 <_strtol_l.constprop.0>:
 80090b8:	2b01      	cmp	r3, #1
 80090ba:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80090be:	d001      	beq.n	80090c4 <_strtol_l.constprop.0+0xc>
 80090c0:	2b24      	cmp	r3, #36	; 0x24
 80090c2:	d906      	bls.n	80090d2 <_strtol_l.constprop.0+0x1a>
 80090c4:	f7fe fa94 	bl	80075f0 <__errno>
 80090c8:	2316      	movs	r3, #22
 80090ca:	6003      	str	r3, [r0, #0]
 80090cc:	2000      	movs	r0, #0
 80090ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80090d2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 80091b8 <_strtol_l.constprop.0+0x100>
 80090d6:	460d      	mov	r5, r1
 80090d8:	462e      	mov	r6, r5
 80090da:	f815 4b01 	ldrb.w	r4, [r5], #1
 80090de:	f814 700c 	ldrb.w	r7, [r4, ip]
 80090e2:	f017 0708 	ands.w	r7, r7, #8
 80090e6:	d1f7      	bne.n	80090d8 <_strtol_l.constprop.0+0x20>
 80090e8:	2c2d      	cmp	r4, #45	; 0x2d
 80090ea:	d132      	bne.n	8009152 <_strtol_l.constprop.0+0x9a>
 80090ec:	782c      	ldrb	r4, [r5, #0]
 80090ee:	2701      	movs	r7, #1
 80090f0:	1cb5      	adds	r5, r6, #2
 80090f2:	2b00      	cmp	r3, #0
 80090f4:	d05b      	beq.n	80091ae <_strtol_l.constprop.0+0xf6>
 80090f6:	2b10      	cmp	r3, #16
 80090f8:	d109      	bne.n	800910e <_strtol_l.constprop.0+0x56>
 80090fa:	2c30      	cmp	r4, #48	; 0x30
 80090fc:	d107      	bne.n	800910e <_strtol_l.constprop.0+0x56>
 80090fe:	782c      	ldrb	r4, [r5, #0]
 8009100:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 8009104:	2c58      	cmp	r4, #88	; 0x58
 8009106:	d14d      	bne.n	80091a4 <_strtol_l.constprop.0+0xec>
 8009108:	786c      	ldrb	r4, [r5, #1]
 800910a:	2310      	movs	r3, #16
 800910c:	3502      	adds	r5, #2
 800910e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 8009112:	f108 38ff 	add.w	r8, r8, #4294967295
 8009116:	f04f 0c00 	mov.w	ip, #0
 800911a:	fbb8 f9f3 	udiv	r9, r8, r3
 800911e:	4666      	mov	r6, ip
 8009120:	fb03 8a19 	mls	sl, r3, r9, r8
 8009124:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009128:	f1be 0f09 	cmp.w	lr, #9
 800912c:	d816      	bhi.n	800915c <_strtol_l.constprop.0+0xa4>
 800912e:	4674      	mov	r4, lr
 8009130:	42a3      	cmp	r3, r4
 8009132:	dd24      	ble.n	800917e <_strtol_l.constprop.0+0xc6>
 8009134:	f1bc 0f00 	cmp.w	ip, #0
 8009138:	db1e      	blt.n	8009178 <_strtol_l.constprop.0+0xc0>
 800913a:	45b1      	cmp	r9, r6
 800913c:	d31c      	bcc.n	8009178 <_strtol_l.constprop.0+0xc0>
 800913e:	d101      	bne.n	8009144 <_strtol_l.constprop.0+0x8c>
 8009140:	45a2      	cmp	sl, r4
 8009142:	db19      	blt.n	8009178 <_strtol_l.constprop.0+0xc0>
 8009144:	fb06 4603 	mla	r6, r6, r3, r4
 8009148:	f04f 0c01 	mov.w	ip, #1
 800914c:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009150:	e7e8      	b.n	8009124 <_strtol_l.constprop.0+0x6c>
 8009152:	2c2b      	cmp	r4, #43	; 0x2b
 8009154:	bf04      	itt	eq
 8009156:	782c      	ldrbeq	r4, [r5, #0]
 8009158:	1cb5      	addeq	r5, r6, #2
 800915a:	e7ca      	b.n	80090f2 <_strtol_l.constprop.0+0x3a>
 800915c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 8009160:	f1be 0f19 	cmp.w	lr, #25
 8009164:	d801      	bhi.n	800916a <_strtol_l.constprop.0+0xb2>
 8009166:	3c37      	subs	r4, #55	; 0x37
 8009168:	e7e2      	b.n	8009130 <_strtol_l.constprop.0+0x78>
 800916a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800916e:	f1be 0f19 	cmp.w	lr, #25
 8009172:	d804      	bhi.n	800917e <_strtol_l.constprop.0+0xc6>
 8009174:	3c57      	subs	r4, #87	; 0x57
 8009176:	e7db      	b.n	8009130 <_strtol_l.constprop.0+0x78>
 8009178:	f04f 3cff 	mov.w	ip, #4294967295
 800917c:	e7e6      	b.n	800914c <_strtol_l.constprop.0+0x94>
 800917e:	f1bc 0f00 	cmp.w	ip, #0
 8009182:	da05      	bge.n	8009190 <_strtol_l.constprop.0+0xd8>
 8009184:	2322      	movs	r3, #34	; 0x22
 8009186:	6003      	str	r3, [r0, #0]
 8009188:	4646      	mov	r6, r8
 800918a:	b942      	cbnz	r2, 800919e <_strtol_l.constprop.0+0xe6>
 800918c:	4630      	mov	r0, r6
 800918e:	e79e      	b.n	80090ce <_strtol_l.constprop.0+0x16>
 8009190:	b107      	cbz	r7, 8009194 <_strtol_l.constprop.0+0xdc>
 8009192:	4276      	negs	r6, r6
 8009194:	2a00      	cmp	r2, #0
 8009196:	d0f9      	beq.n	800918c <_strtol_l.constprop.0+0xd4>
 8009198:	f1bc 0f00 	cmp.w	ip, #0
 800919c:	d000      	beq.n	80091a0 <_strtol_l.constprop.0+0xe8>
 800919e:	1e69      	subs	r1, r5, #1
 80091a0:	6011      	str	r1, [r2, #0]
 80091a2:	e7f3      	b.n	800918c <_strtol_l.constprop.0+0xd4>
 80091a4:	2430      	movs	r4, #48	; 0x30
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d1b1      	bne.n	800910e <_strtol_l.constprop.0+0x56>
 80091aa:	2308      	movs	r3, #8
 80091ac:	e7af      	b.n	800910e <_strtol_l.constprop.0+0x56>
 80091ae:	2c30      	cmp	r4, #48	; 0x30
 80091b0:	d0a5      	beq.n	80090fe <_strtol_l.constprop.0+0x46>
 80091b2:	230a      	movs	r3, #10
 80091b4:	e7ab      	b.n	800910e <_strtol_l.constprop.0+0x56>
 80091b6:	bf00      	nop
 80091b8:	0800c291 	.word	0x0800c291

080091bc <_strtol_r>:
 80091bc:	f7ff bf7c 	b.w	80090b8 <_strtol_l.constprop.0>

080091c0 <__assert_func>:
 80091c0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80091c2:	4614      	mov	r4, r2
 80091c4:	461a      	mov	r2, r3
 80091c6:	4b09      	ldr	r3, [pc, #36]	; (80091ec <__assert_func+0x2c>)
 80091c8:	681b      	ldr	r3, [r3, #0]
 80091ca:	4605      	mov	r5, r0
 80091cc:	68d8      	ldr	r0, [r3, #12]
 80091ce:	b14c      	cbz	r4, 80091e4 <__assert_func+0x24>
 80091d0:	4b07      	ldr	r3, [pc, #28]	; (80091f0 <__assert_func+0x30>)
 80091d2:	9100      	str	r1, [sp, #0]
 80091d4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 80091d8:	4906      	ldr	r1, [pc, #24]	; (80091f4 <__assert_func+0x34>)
 80091da:	462b      	mov	r3, r5
 80091dc:	f000 fe8a 	bl	8009ef4 <fiprintf>
 80091e0:	f002 fba0 	bl	800b924 <abort>
 80091e4:	4b04      	ldr	r3, [pc, #16]	; (80091f8 <__assert_func+0x38>)
 80091e6:	461c      	mov	r4, r3
 80091e8:	e7f3      	b.n	80091d2 <__assert_func+0x12>
 80091ea:	bf00      	nop
 80091ec:	20000020 	.word	0x20000020
 80091f0:	0800c254 	.word	0x0800c254
 80091f4:	0800c261 	.word	0x0800c261
 80091f8:	0800c28f 	.word	0x0800c28f

080091fc <quorem>:
 80091fc:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009200:	6903      	ldr	r3, [r0, #16]
 8009202:	690c      	ldr	r4, [r1, #16]
 8009204:	42a3      	cmp	r3, r4
 8009206:	4607      	mov	r7, r0
 8009208:	f2c0 8081 	blt.w	800930e <quorem+0x112>
 800920c:	3c01      	subs	r4, #1
 800920e:	f101 0814 	add.w	r8, r1, #20
 8009212:	f100 0514 	add.w	r5, r0, #20
 8009216:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800921a:	9301      	str	r3, [sp, #4]
 800921c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009220:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009224:	3301      	adds	r3, #1
 8009226:	429a      	cmp	r2, r3
 8009228:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800922c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009230:	fbb2 f6f3 	udiv	r6, r2, r3
 8009234:	d331      	bcc.n	800929a <quorem+0x9e>
 8009236:	f04f 0e00 	mov.w	lr, #0
 800923a:	4640      	mov	r0, r8
 800923c:	46ac      	mov	ip, r5
 800923e:	46f2      	mov	sl, lr
 8009240:	f850 2b04 	ldr.w	r2, [r0], #4
 8009244:	b293      	uxth	r3, r2
 8009246:	fb06 e303 	mla	r3, r6, r3, lr
 800924a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800924e:	b29b      	uxth	r3, r3
 8009250:	ebaa 0303 	sub.w	r3, sl, r3
 8009254:	f8dc a000 	ldr.w	sl, [ip]
 8009258:	0c12      	lsrs	r2, r2, #16
 800925a:	fa13 f38a 	uxtah	r3, r3, sl
 800925e:	fb06 e202 	mla	r2, r6, r2, lr
 8009262:	9300      	str	r3, [sp, #0]
 8009264:	9b00      	ldr	r3, [sp, #0]
 8009266:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800926a:	b292      	uxth	r2, r2
 800926c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 8009270:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009274:	f8bd 3000 	ldrh.w	r3, [sp]
 8009278:	4581      	cmp	r9, r0
 800927a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800927e:	f84c 3b04 	str.w	r3, [ip], #4
 8009282:	ea4f 4a22 	mov.w	sl, r2, asr #16
 8009286:	d2db      	bcs.n	8009240 <quorem+0x44>
 8009288:	f855 300b 	ldr.w	r3, [r5, fp]
 800928c:	b92b      	cbnz	r3, 800929a <quorem+0x9e>
 800928e:	9b01      	ldr	r3, [sp, #4]
 8009290:	3b04      	subs	r3, #4
 8009292:	429d      	cmp	r5, r3
 8009294:	461a      	mov	r2, r3
 8009296:	d32e      	bcc.n	80092f6 <quorem+0xfa>
 8009298:	613c      	str	r4, [r7, #16]
 800929a:	4638      	mov	r0, r7
 800929c:	f001 fca4 	bl	800abe8 <__mcmp>
 80092a0:	2800      	cmp	r0, #0
 80092a2:	db24      	blt.n	80092ee <quorem+0xf2>
 80092a4:	3601      	adds	r6, #1
 80092a6:	4628      	mov	r0, r5
 80092a8:	f04f 0c00 	mov.w	ip, #0
 80092ac:	f858 2b04 	ldr.w	r2, [r8], #4
 80092b0:	f8d0 e000 	ldr.w	lr, [r0]
 80092b4:	b293      	uxth	r3, r2
 80092b6:	ebac 0303 	sub.w	r3, ip, r3
 80092ba:	0c12      	lsrs	r2, r2, #16
 80092bc:	fa13 f38e 	uxtah	r3, r3, lr
 80092c0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 80092c4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80092c8:	b29b      	uxth	r3, r3
 80092ca:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80092ce:	45c1      	cmp	r9, r8
 80092d0:	f840 3b04 	str.w	r3, [r0], #4
 80092d4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 80092d8:	d2e8      	bcs.n	80092ac <quorem+0xb0>
 80092da:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80092de:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80092e2:	b922      	cbnz	r2, 80092ee <quorem+0xf2>
 80092e4:	3b04      	subs	r3, #4
 80092e6:	429d      	cmp	r5, r3
 80092e8:	461a      	mov	r2, r3
 80092ea:	d30a      	bcc.n	8009302 <quorem+0x106>
 80092ec:	613c      	str	r4, [r7, #16]
 80092ee:	4630      	mov	r0, r6
 80092f0:	b003      	add	sp, #12
 80092f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092f6:	6812      	ldr	r2, [r2, #0]
 80092f8:	3b04      	subs	r3, #4
 80092fa:	2a00      	cmp	r2, #0
 80092fc:	d1cc      	bne.n	8009298 <quorem+0x9c>
 80092fe:	3c01      	subs	r4, #1
 8009300:	e7c7      	b.n	8009292 <quorem+0x96>
 8009302:	6812      	ldr	r2, [r2, #0]
 8009304:	3b04      	subs	r3, #4
 8009306:	2a00      	cmp	r2, #0
 8009308:	d1f0      	bne.n	80092ec <quorem+0xf0>
 800930a:	3c01      	subs	r4, #1
 800930c:	e7eb      	b.n	80092e6 <quorem+0xea>
 800930e:	2000      	movs	r0, #0
 8009310:	e7ee      	b.n	80092f0 <quorem+0xf4>
 8009312:	0000      	movs	r0, r0
 8009314:	0000      	movs	r0, r0
	...

08009318 <_dtoa_r>:
 8009318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800931c:	ed2d 8b04 	vpush	{d8-d9}
 8009320:	ec57 6b10 	vmov	r6, r7, d0
 8009324:	b093      	sub	sp, #76	; 0x4c
 8009326:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009328:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800932c:	9106      	str	r1, [sp, #24]
 800932e:	ee10 aa10 	vmov	sl, s0
 8009332:	4604      	mov	r4, r0
 8009334:	9209      	str	r2, [sp, #36]	; 0x24
 8009336:	930c      	str	r3, [sp, #48]	; 0x30
 8009338:	46bb      	mov	fp, r7
 800933a:	b975      	cbnz	r5, 800935a <_dtoa_r+0x42>
 800933c:	2010      	movs	r0, #16
 800933e:	f001 f95f 	bl	800a600 <malloc>
 8009342:	4602      	mov	r2, r0
 8009344:	6260      	str	r0, [r4, #36]	; 0x24
 8009346:	b920      	cbnz	r0, 8009352 <_dtoa_r+0x3a>
 8009348:	4ba7      	ldr	r3, [pc, #668]	; (80095e8 <_dtoa_r+0x2d0>)
 800934a:	21ea      	movs	r1, #234	; 0xea
 800934c:	48a7      	ldr	r0, [pc, #668]	; (80095ec <_dtoa_r+0x2d4>)
 800934e:	f7ff ff37 	bl	80091c0 <__assert_func>
 8009352:	e9c0 5501 	strd	r5, r5, [r0, #4]
 8009356:	6005      	str	r5, [r0, #0]
 8009358:	60c5      	str	r5, [r0, #12]
 800935a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800935c:	6819      	ldr	r1, [r3, #0]
 800935e:	b151      	cbz	r1, 8009376 <_dtoa_r+0x5e>
 8009360:	685a      	ldr	r2, [r3, #4]
 8009362:	604a      	str	r2, [r1, #4]
 8009364:	2301      	movs	r3, #1
 8009366:	4093      	lsls	r3, r2
 8009368:	608b      	str	r3, [r1, #8]
 800936a:	4620      	mov	r0, r4
 800936c:	f001 f9b0 	bl	800a6d0 <_Bfree>
 8009370:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009372:	2200      	movs	r2, #0
 8009374:	601a      	str	r2, [r3, #0]
 8009376:	1e3b      	subs	r3, r7, #0
 8009378:	bfaa      	itet	ge
 800937a:	2300      	movge	r3, #0
 800937c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 8009380:	f8c8 3000 	strge.w	r3, [r8]
 8009384:	4b9a      	ldr	r3, [pc, #616]	; (80095f0 <_dtoa_r+0x2d8>)
 8009386:	bfbc      	itt	lt
 8009388:	2201      	movlt	r2, #1
 800938a:	f8c8 2000 	strlt.w	r2, [r8]
 800938e:	ea33 030b 	bics.w	r3, r3, fp
 8009392:	d11b      	bne.n	80093cc <_dtoa_r+0xb4>
 8009394:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8009396:	f242 730f 	movw	r3, #9999	; 0x270f
 800939a:	6013      	str	r3, [r2, #0]
 800939c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80093a0:	4333      	orrs	r3, r6
 80093a2:	f000 8592 	beq.w	8009eca <_dtoa_r+0xbb2>
 80093a6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093a8:	b963      	cbnz	r3, 80093c4 <_dtoa_r+0xac>
 80093aa:	4b92      	ldr	r3, [pc, #584]	; (80095f4 <_dtoa_r+0x2dc>)
 80093ac:	e022      	b.n	80093f4 <_dtoa_r+0xdc>
 80093ae:	4b92      	ldr	r3, [pc, #584]	; (80095f8 <_dtoa_r+0x2e0>)
 80093b0:	9301      	str	r3, [sp, #4]
 80093b2:	3308      	adds	r3, #8
 80093b4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 80093b6:	6013      	str	r3, [r2, #0]
 80093b8:	9801      	ldr	r0, [sp, #4]
 80093ba:	b013      	add	sp, #76	; 0x4c
 80093bc:	ecbd 8b04 	vpop	{d8-d9}
 80093c0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80093c4:	4b8b      	ldr	r3, [pc, #556]	; (80095f4 <_dtoa_r+0x2dc>)
 80093c6:	9301      	str	r3, [sp, #4]
 80093c8:	3303      	adds	r3, #3
 80093ca:	e7f3      	b.n	80093b4 <_dtoa_r+0x9c>
 80093cc:	2200      	movs	r2, #0
 80093ce:	2300      	movs	r3, #0
 80093d0:	4650      	mov	r0, sl
 80093d2:	4659      	mov	r1, fp
 80093d4:	f7f7 fb78 	bl	8000ac8 <__aeabi_dcmpeq>
 80093d8:	ec4b ab19 	vmov	d9, sl, fp
 80093dc:	4680      	mov	r8, r0
 80093de:	b158      	cbz	r0, 80093f8 <_dtoa_r+0xe0>
 80093e0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80093e2:	2301      	movs	r3, #1
 80093e4:	6013      	str	r3, [r2, #0]
 80093e6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80093e8:	2b00      	cmp	r3, #0
 80093ea:	f000 856b 	beq.w	8009ec4 <_dtoa_r+0xbac>
 80093ee:	4883      	ldr	r0, [pc, #524]	; (80095fc <_dtoa_r+0x2e4>)
 80093f0:	6018      	str	r0, [r3, #0]
 80093f2:	1e43      	subs	r3, r0, #1
 80093f4:	9301      	str	r3, [sp, #4]
 80093f6:	e7df      	b.n	80093b8 <_dtoa_r+0xa0>
 80093f8:	ec4b ab10 	vmov	d0, sl, fp
 80093fc:	aa10      	add	r2, sp, #64	; 0x40
 80093fe:	a911      	add	r1, sp, #68	; 0x44
 8009400:	4620      	mov	r0, r4
 8009402:	f001 fd13 	bl	800ae2c <__d2b>
 8009406:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800940a:	ee08 0a10 	vmov	s16, r0
 800940e:	2d00      	cmp	r5, #0
 8009410:	f000 8084 	beq.w	800951c <_dtoa_r+0x204>
 8009414:	ee19 3a90 	vmov	r3, s19
 8009418:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800941c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009420:	4656      	mov	r6, sl
 8009422:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 8009426:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800942a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800942e:	4b74      	ldr	r3, [pc, #464]	; (8009600 <_dtoa_r+0x2e8>)
 8009430:	2200      	movs	r2, #0
 8009432:	4630      	mov	r0, r6
 8009434:	4639      	mov	r1, r7
 8009436:	f7f6 ff27 	bl	8000288 <__aeabi_dsub>
 800943a:	a365      	add	r3, pc, #404	; (adr r3, 80095d0 <_dtoa_r+0x2b8>)
 800943c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009440:	f7f7 f8da 	bl	80005f8 <__aeabi_dmul>
 8009444:	a364      	add	r3, pc, #400	; (adr r3, 80095d8 <_dtoa_r+0x2c0>)
 8009446:	e9d3 2300 	ldrd	r2, r3, [r3]
 800944a:	f7f6 ff1f 	bl	800028c <__adddf3>
 800944e:	4606      	mov	r6, r0
 8009450:	4628      	mov	r0, r5
 8009452:	460f      	mov	r7, r1
 8009454:	f7f7 f866 	bl	8000524 <__aeabi_i2d>
 8009458:	a361      	add	r3, pc, #388	; (adr r3, 80095e0 <_dtoa_r+0x2c8>)
 800945a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800945e:	f7f7 f8cb 	bl	80005f8 <__aeabi_dmul>
 8009462:	4602      	mov	r2, r0
 8009464:	460b      	mov	r3, r1
 8009466:	4630      	mov	r0, r6
 8009468:	4639      	mov	r1, r7
 800946a:	f7f6 ff0f 	bl	800028c <__adddf3>
 800946e:	4606      	mov	r6, r0
 8009470:	460f      	mov	r7, r1
 8009472:	f7f7 fb71 	bl	8000b58 <__aeabi_d2iz>
 8009476:	2200      	movs	r2, #0
 8009478:	9000      	str	r0, [sp, #0]
 800947a:	2300      	movs	r3, #0
 800947c:	4630      	mov	r0, r6
 800947e:	4639      	mov	r1, r7
 8009480:	f7f7 fb2c 	bl	8000adc <__aeabi_dcmplt>
 8009484:	b150      	cbz	r0, 800949c <_dtoa_r+0x184>
 8009486:	9800      	ldr	r0, [sp, #0]
 8009488:	f7f7 f84c 	bl	8000524 <__aeabi_i2d>
 800948c:	4632      	mov	r2, r6
 800948e:	463b      	mov	r3, r7
 8009490:	f7f7 fb1a 	bl	8000ac8 <__aeabi_dcmpeq>
 8009494:	b910      	cbnz	r0, 800949c <_dtoa_r+0x184>
 8009496:	9b00      	ldr	r3, [sp, #0]
 8009498:	3b01      	subs	r3, #1
 800949a:	9300      	str	r3, [sp, #0]
 800949c:	9b00      	ldr	r3, [sp, #0]
 800949e:	2b16      	cmp	r3, #22
 80094a0:	d85a      	bhi.n	8009558 <_dtoa_r+0x240>
 80094a2:	9a00      	ldr	r2, [sp, #0]
 80094a4:	4b57      	ldr	r3, [pc, #348]	; (8009604 <_dtoa_r+0x2ec>)
 80094a6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80094aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80094ae:	ec51 0b19 	vmov	r0, r1, d9
 80094b2:	f7f7 fb13 	bl	8000adc <__aeabi_dcmplt>
 80094b6:	2800      	cmp	r0, #0
 80094b8:	d050      	beq.n	800955c <_dtoa_r+0x244>
 80094ba:	9b00      	ldr	r3, [sp, #0]
 80094bc:	3b01      	subs	r3, #1
 80094be:	9300      	str	r3, [sp, #0]
 80094c0:	2300      	movs	r3, #0
 80094c2:	930b      	str	r3, [sp, #44]	; 0x2c
 80094c4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 80094c6:	1b5d      	subs	r5, r3, r5
 80094c8:	1e6b      	subs	r3, r5, #1
 80094ca:	9305      	str	r3, [sp, #20]
 80094cc:	bf45      	ittet	mi
 80094ce:	f1c5 0301 	rsbmi	r3, r5, #1
 80094d2:	9304      	strmi	r3, [sp, #16]
 80094d4:	2300      	movpl	r3, #0
 80094d6:	2300      	movmi	r3, #0
 80094d8:	bf4c      	ite	mi
 80094da:	9305      	strmi	r3, [sp, #20]
 80094dc:	9304      	strpl	r3, [sp, #16]
 80094de:	9b00      	ldr	r3, [sp, #0]
 80094e0:	2b00      	cmp	r3, #0
 80094e2:	db3d      	blt.n	8009560 <_dtoa_r+0x248>
 80094e4:	9b05      	ldr	r3, [sp, #20]
 80094e6:	9a00      	ldr	r2, [sp, #0]
 80094e8:	920a      	str	r2, [sp, #40]	; 0x28
 80094ea:	4413      	add	r3, r2
 80094ec:	9305      	str	r3, [sp, #20]
 80094ee:	2300      	movs	r3, #0
 80094f0:	9307      	str	r3, [sp, #28]
 80094f2:	9b06      	ldr	r3, [sp, #24]
 80094f4:	2b09      	cmp	r3, #9
 80094f6:	f200 8089 	bhi.w	800960c <_dtoa_r+0x2f4>
 80094fa:	2b05      	cmp	r3, #5
 80094fc:	bfc4      	itt	gt
 80094fe:	3b04      	subgt	r3, #4
 8009500:	9306      	strgt	r3, [sp, #24]
 8009502:	9b06      	ldr	r3, [sp, #24]
 8009504:	f1a3 0302 	sub.w	r3, r3, #2
 8009508:	bfcc      	ite	gt
 800950a:	2500      	movgt	r5, #0
 800950c:	2501      	movle	r5, #1
 800950e:	2b03      	cmp	r3, #3
 8009510:	f200 8087 	bhi.w	8009622 <_dtoa_r+0x30a>
 8009514:	e8df f003 	tbb	[pc, r3]
 8009518:	59383a2d 	.word	0x59383a2d
 800951c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009520:	441d      	add	r5, r3
 8009522:	f205 4332 	addw	r3, r5, #1074	; 0x432
 8009526:	2b20      	cmp	r3, #32
 8009528:	bfc1      	itttt	gt
 800952a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800952e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 8009532:	fa0b f303 	lslgt.w	r3, fp, r3
 8009536:	fa26 f000 	lsrgt.w	r0, r6, r0
 800953a:	bfda      	itte	le
 800953c:	f1c3 0320 	rsble	r3, r3, #32
 8009540:	fa06 f003 	lslle.w	r0, r6, r3
 8009544:	4318      	orrgt	r0, r3
 8009546:	f7f6 ffdd 	bl	8000504 <__aeabi_ui2d>
 800954a:	2301      	movs	r3, #1
 800954c:	4606      	mov	r6, r0
 800954e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 8009552:	3d01      	subs	r5, #1
 8009554:	930e      	str	r3, [sp, #56]	; 0x38
 8009556:	e76a      	b.n	800942e <_dtoa_r+0x116>
 8009558:	2301      	movs	r3, #1
 800955a:	e7b2      	b.n	80094c2 <_dtoa_r+0x1aa>
 800955c:	900b      	str	r0, [sp, #44]	; 0x2c
 800955e:	e7b1      	b.n	80094c4 <_dtoa_r+0x1ac>
 8009560:	9b04      	ldr	r3, [sp, #16]
 8009562:	9a00      	ldr	r2, [sp, #0]
 8009564:	1a9b      	subs	r3, r3, r2
 8009566:	9304      	str	r3, [sp, #16]
 8009568:	4253      	negs	r3, r2
 800956a:	9307      	str	r3, [sp, #28]
 800956c:	2300      	movs	r3, #0
 800956e:	930a      	str	r3, [sp, #40]	; 0x28
 8009570:	e7bf      	b.n	80094f2 <_dtoa_r+0x1da>
 8009572:	2300      	movs	r3, #0
 8009574:	9308      	str	r3, [sp, #32]
 8009576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009578:	2b00      	cmp	r3, #0
 800957a:	dc55      	bgt.n	8009628 <_dtoa_r+0x310>
 800957c:	2301      	movs	r3, #1
 800957e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009582:	461a      	mov	r2, r3
 8009584:	9209      	str	r2, [sp, #36]	; 0x24
 8009586:	e00c      	b.n	80095a2 <_dtoa_r+0x28a>
 8009588:	2301      	movs	r3, #1
 800958a:	e7f3      	b.n	8009574 <_dtoa_r+0x25c>
 800958c:	2300      	movs	r3, #0
 800958e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8009590:	9308      	str	r3, [sp, #32]
 8009592:	9b00      	ldr	r3, [sp, #0]
 8009594:	4413      	add	r3, r2
 8009596:	9302      	str	r3, [sp, #8]
 8009598:	3301      	adds	r3, #1
 800959a:	2b01      	cmp	r3, #1
 800959c:	9303      	str	r3, [sp, #12]
 800959e:	bfb8      	it	lt
 80095a0:	2301      	movlt	r3, #1
 80095a2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80095a4:	2200      	movs	r2, #0
 80095a6:	6042      	str	r2, [r0, #4]
 80095a8:	2204      	movs	r2, #4
 80095aa:	f102 0614 	add.w	r6, r2, #20
 80095ae:	429e      	cmp	r6, r3
 80095b0:	6841      	ldr	r1, [r0, #4]
 80095b2:	d93d      	bls.n	8009630 <_dtoa_r+0x318>
 80095b4:	4620      	mov	r0, r4
 80095b6:	f001 f84b 	bl	800a650 <_Balloc>
 80095ba:	9001      	str	r0, [sp, #4]
 80095bc:	2800      	cmp	r0, #0
 80095be:	d13b      	bne.n	8009638 <_dtoa_r+0x320>
 80095c0:	4b11      	ldr	r3, [pc, #68]	; (8009608 <_dtoa_r+0x2f0>)
 80095c2:	4602      	mov	r2, r0
 80095c4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 80095c8:	e6c0      	b.n	800934c <_dtoa_r+0x34>
 80095ca:	2301      	movs	r3, #1
 80095cc:	e7df      	b.n	800958e <_dtoa_r+0x276>
 80095ce:	bf00      	nop
 80095d0:	636f4361 	.word	0x636f4361
 80095d4:	3fd287a7 	.word	0x3fd287a7
 80095d8:	8b60c8b3 	.word	0x8b60c8b3
 80095dc:	3fc68a28 	.word	0x3fc68a28
 80095e0:	509f79fb 	.word	0x509f79fb
 80095e4:	3fd34413 	.word	0x3fd34413
 80095e8:	0800c1e0 	.word	0x0800c1e0
 80095ec:	0800c39e 	.word	0x0800c39e
 80095f0:	7ff00000 	.word	0x7ff00000
 80095f4:	0800c39a 	.word	0x0800c39a
 80095f8:	0800c391 	.word	0x0800c391
 80095fc:	0800c165 	.word	0x0800c165
 8009600:	3ff80000 	.word	0x3ff80000
 8009604:	0800c508 	.word	0x0800c508
 8009608:	0800c3f9 	.word	0x0800c3f9
 800960c:	2501      	movs	r5, #1
 800960e:	2300      	movs	r3, #0
 8009610:	9306      	str	r3, [sp, #24]
 8009612:	9508      	str	r5, [sp, #32]
 8009614:	f04f 33ff 	mov.w	r3, #4294967295
 8009618:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800961c:	2200      	movs	r2, #0
 800961e:	2312      	movs	r3, #18
 8009620:	e7b0      	b.n	8009584 <_dtoa_r+0x26c>
 8009622:	2301      	movs	r3, #1
 8009624:	9308      	str	r3, [sp, #32]
 8009626:	e7f5      	b.n	8009614 <_dtoa_r+0x2fc>
 8009628:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800962a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800962e:	e7b8      	b.n	80095a2 <_dtoa_r+0x28a>
 8009630:	3101      	adds	r1, #1
 8009632:	6041      	str	r1, [r0, #4]
 8009634:	0052      	lsls	r2, r2, #1
 8009636:	e7b8      	b.n	80095aa <_dtoa_r+0x292>
 8009638:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800963a:	9a01      	ldr	r2, [sp, #4]
 800963c:	601a      	str	r2, [r3, #0]
 800963e:	9b03      	ldr	r3, [sp, #12]
 8009640:	2b0e      	cmp	r3, #14
 8009642:	f200 809d 	bhi.w	8009780 <_dtoa_r+0x468>
 8009646:	2d00      	cmp	r5, #0
 8009648:	f000 809a 	beq.w	8009780 <_dtoa_r+0x468>
 800964c:	9b00      	ldr	r3, [sp, #0]
 800964e:	2b00      	cmp	r3, #0
 8009650:	dd32      	ble.n	80096b8 <_dtoa_r+0x3a0>
 8009652:	4ab7      	ldr	r2, [pc, #732]	; (8009930 <_dtoa_r+0x618>)
 8009654:	f003 030f 	and.w	r3, r3, #15
 8009658:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800965c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009660:	9b00      	ldr	r3, [sp, #0]
 8009662:	05d8      	lsls	r0, r3, #23
 8009664:	ea4f 1723 	mov.w	r7, r3, asr #4
 8009668:	d516      	bpl.n	8009698 <_dtoa_r+0x380>
 800966a:	4bb2      	ldr	r3, [pc, #712]	; (8009934 <_dtoa_r+0x61c>)
 800966c:	ec51 0b19 	vmov	r0, r1, d9
 8009670:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8009674:	f7f7 f8ea 	bl	800084c <__aeabi_ddiv>
 8009678:	f007 070f 	and.w	r7, r7, #15
 800967c:	4682      	mov	sl, r0
 800967e:	468b      	mov	fp, r1
 8009680:	2503      	movs	r5, #3
 8009682:	4eac      	ldr	r6, [pc, #688]	; (8009934 <_dtoa_r+0x61c>)
 8009684:	b957      	cbnz	r7, 800969c <_dtoa_r+0x384>
 8009686:	4642      	mov	r2, r8
 8009688:	464b      	mov	r3, r9
 800968a:	4650      	mov	r0, sl
 800968c:	4659      	mov	r1, fp
 800968e:	f7f7 f8dd 	bl	800084c <__aeabi_ddiv>
 8009692:	4682      	mov	sl, r0
 8009694:	468b      	mov	fp, r1
 8009696:	e028      	b.n	80096ea <_dtoa_r+0x3d2>
 8009698:	2502      	movs	r5, #2
 800969a:	e7f2      	b.n	8009682 <_dtoa_r+0x36a>
 800969c:	07f9      	lsls	r1, r7, #31
 800969e:	d508      	bpl.n	80096b2 <_dtoa_r+0x39a>
 80096a0:	4640      	mov	r0, r8
 80096a2:	4649      	mov	r1, r9
 80096a4:	e9d6 2300 	ldrd	r2, r3, [r6]
 80096a8:	f7f6 ffa6 	bl	80005f8 <__aeabi_dmul>
 80096ac:	3501      	adds	r5, #1
 80096ae:	4680      	mov	r8, r0
 80096b0:	4689      	mov	r9, r1
 80096b2:	107f      	asrs	r7, r7, #1
 80096b4:	3608      	adds	r6, #8
 80096b6:	e7e5      	b.n	8009684 <_dtoa_r+0x36c>
 80096b8:	f000 809b 	beq.w	80097f2 <_dtoa_r+0x4da>
 80096bc:	9b00      	ldr	r3, [sp, #0]
 80096be:	4f9d      	ldr	r7, [pc, #628]	; (8009934 <_dtoa_r+0x61c>)
 80096c0:	425e      	negs	r6, r3
 80096c2:	4b9b      	ldr	r3, [pc, #620]	; (8009930 <_dtoa_r+0x618>)
 80096c4:	f006 020f 	and.w	r2, r6, #15
 80096c8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80096cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d0:	ec51 0b19 	vmov	r0, r1, d9
 80096d4:	f7f6 ff90 	bl	80005f8 <__aeabi_dmul>
 80096d8:	1136      	asrs	r6, r6, #4
 80096da:	4682      	mov	sl, r0
 80096dc:	468b      	mov	fp, r1
 80096de:	2300      	movs	r3, #0
 80096e0:	2502      	movs	r5, #2
 80096e2:	2e00      	cmp	r6, #0
 80096e4:	d17a      	bne.n	80097dc <_dtoa_r+0x4c4>
 80096e6:	2b00      	cmp	r3, #0
 80096e8:	d1d3      	bne.n	8009692 <_dtoa_r+0x37a>
 80096ea:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80096ec:	2b00      	cmp	r3, #0
 80096ee:	f000 8082 	beq.w	80097f6 <_dtoa_r+0x4de>
 80096f2:	4b91      	ldr	r3, [pc, #580]	; (8009938 <_dtoa_r+0x620>)
 80096f4:	2200      	movs	r2, #0
 80096f6:	4650      	mov	r0, sl
 80096f8:	4659      	mov	r1, fp
 80096fa:	f7f7 f9ef 	bl	8000adc <__aeabi_dcmplt>
 80096fe:	2800      	cmp	r0, #0
 8009700:	d079      	beq.n	80097f6 <_dtoa_r+0x4de>
 8009702:	9b03      	ldr	r3, [sp, #12]
 8009704:	2b00      	cmp	r3, #0
 8009706:	d076      	beq.n	80097f6 <_dtoa_r+0x4de>
 8009708:	9b02      	ldr	r3, [sp, #8]
 800970a:	2b00      	cmp	r3, #0
 800970c:	dd36      	ble.n	800977c <_dtoa_r+0x464>
 800970e:	9b00      	ldr	r3, [sp, #0]
 8009710:	4650      	mov	r0, sl
 8009712:	4659      	mov	r1, fp
 8009714:	1e5f      	subs	r7, r3, #1
 8009716:	2200      	movs	r2, #0
 8009718:	4b88      	ldr	r3, [pc, #544]	; (800993c <_dtoa_r+0x624>)
 800971a:	f7f6 ff6d 	bl	80005f8 <__aeabi_dmul>
 800971e:	9e02      	ldr	r6, [sp, #8]
 8009720:	4682      	mov	sl, r0
 8009722:	468b      	mov	fp, r1
 8009724:	3501      	adds	r5, #1
 8009726:	4628      	mov	r0, r5
 8009728:	f7f6 fefc 	bl	8000524 <__aeabi_i2d>
 800972c:	4652      	mov	r2, sl
 800972e:	465b      	mov	r3, fp
 8009730:	f7f6 ff62 	bl	80005f8 <__aeabi_dmul>
 8009734:	4b82      	ldr	r3, [pc, #520]	; (8009940 <_dtoa_r+0x628>)
 8009736:	2200      	movs	r2, #0
 8009738:	f7f6 fda8 	bl	800028c <__adddf3>
 800973c:	46d0      	mov	r8, sl
 800973e:	46d9      	mov	r9, fp
 8009740:	4682      	mov	sl, r0
 8009742:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009746:	2e00      	cmp	r6, #0
 8009748:	d158      	bne.n	80097fc <_dtoa_r+0x4e4>
 800974a:	4b7e      	ldr	r3, [pc, #504]	; (8009944 <_dtoa_r+0x62c>)
 800974c:	2200      	movs	r2, #0
 800974e:	4640      	mov	r0, r8
 8009750:	4649      	mov	r1, r9
 8009752:	f7f6 fd99 	bl	8000288 <__aeabi_dsub>
 8009756:	4652      	mov	r2, sl
 8009758:	465b      	mov	r3, fp
 800975a:	4680      	mov	r8, r0
 800975c:	4689      	mov	r9, r1
 800975e:	f7f7 f9db 	bl	8000b18 <__aeabi_dcmpgt>
 8009762:	2800      	cmp	r0, #0
 8009764:	f040 8295 	bne.w	8009c92 <_dtoa_r+0x97a>
 8009768:	4652      	mov	r2, sl
 800976a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800976e:	4640      	mov	r0, r8
 8009770:	4649      	mov	r1, r9
 8009772:	f7f7 f9b3 	bl	8000adc <__aeabi_dcmplt>
 8009776:	2800      	cmp	r0, #0
 8009778:	f040 8289 	bne.w	8009c8e <_dtoa_r+0x976>
 800977c:	ec5b ab19 	vmov	sl, fp, d9
 8009780:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009782:	2b00      	cmp	r3, #0
 8009784:	f2c0 8148 	blt.w	8009a18 <_dtoa_r+0x700>
 8009788:	9a00      	ldr	r2, [sp, #0]
 800978a:	2a0e      	cmp	r2, #14
 800978c:	f300 8144 	bgt.w	8009a18 <_dtoa_r+0x700>
 8009790:	4b67      	ldr	r3, [pc, #412]	; (8009930 <_dtoa_r+0x618>)
 8009792:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009796:	e9d3 8900 	ldrd	r8, r9, [r3]
 800979a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800979c:	2b00      	cmp	r3, #0
 800979e:	f280 80d5 	bge.w	800994c <_dtoa_r+0x634>
 80097a2:	9b03      	ldr	r3, [sp, #12]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	f300 80d1 	bgt.w	800994c <_dtoa_r+0x634>
 80097aa:	f040 826f 	bne.w	8009c8c <_dtoa_r+0x974>
 80097ae:	4b65      	ldr	r3, [pc, #404]	; (8009944 <_dtoa_r+0x62c>)
 80097b0:	2200      	movs	r2, #0
 80097b2:	4640      	mov	r0, r8
 80097b4:	4649      	mov	r1, r9
 80097b6:	f7f6 ff1f 	bl	80005f8 <__aeabi_dmul>
 80097ba:	4652      	mov	r2, sl
 80097bc:	465b      	mov	r3, fp
 80097be:	f7f7 f9a1 	bl	8000b04 <__aeabi_dcmpge>
 80097c2:	9e03      	ldr	r6, [sp, #12]
 80097c4:	4637      	mov	r7, r6
 80097c6:	2800      	cmp	r0, #0
 80097c8:	f040 8245 	bne.w	8009c56 <_dtoa_r+0x93e>
 80097cc:	9d01      	ldr	r5, [sp, #4]
 80097ce:	2331      	movs	r3, #49	; 0x31
 80097d0:	f805 3b01 	strb.w	r3, [r5], #1
 80097d4:	9b00      	ldr	r3, [sp, #0]
 80097d6:	3301      	adds	r3, #1
 80097d8:	9300      	str	r3, [sp, #0]
 80097da:	e240      	b.n	8009c5e <_dtoa_r+0x946>
 80097dc:	07f2      	lsls	r2, r6, #31
 80097de:	d505      	bpl.n	80097ec <_dtoa_r+0x4d4>
 80097e0:	e9d7 2300 	ldrd	r2, r3, [r7]
 80097e4:	f7f6 ff08 	bl	80005f8 <__aeabi_dmul>
 80097e8:	3501      	adds	r5, #1
 80097ea:	2301      	movs	r3, #1
 80097ec:	1076      	asrs	r6, r6, #1
 80097ee:	3708      	adds	r7, #8
 80097f0:	e777      	b.n	80096e2 <_dtoa_r+0x3ca>
 80097f2:	2502      	movs	r5, #2
 80097f4:	e779      	b.n	80096ea <_dtoa_r+0x3d2>
 80097f6:	9f00      	ldr	r7, [sp, #0]
 80097f8:	9e03      	ldr	r6, [sp, #12]
 80097fa:	e794      	b.n	8009726 <_dtoa_r+0x40e>
 80097fc:	9901      	ldr	r1, [sp, #4]
 80097fe:	4b4c      	ldr	r3, [pc, #304]	; (8009930 <_dtoa_r+0x618>)
 8009800:	4431      	add	r1, r6
 8009802:	910d      	str	r1, [sp, #52]	; 0x34
 8009804:	9908      	ldr	r1, [sp, #32]
 8009806:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800980a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800980e:	2900      	cmp	r1, #0
 8009810:	d043      	beq.n	800989a <_dtoa_r+0x582>
 8009812:	494d      	ldr	r1, [pc, #308]	; (8009948 <_dtoa_r+0x630>)
 8009814:	2000      	movs	r0, #0
 8009816:	f7f7 f819 	bl	800084c <__aeabi_ddiv>
 800981a:	4652      	mov	r2, sl
 800981c:	465b      	mov	r3, fp
 800981e:	f7f6 fd33 	bl	8000288 <__aeabi_dsub>
 8009822:	9d01      	ldr	r5, [sp, #4]
 8009824:	4682      	mov	sl, r0
 8009826:	468b      	mov	fp, r1
 8009828:	4649      	mov	r1, r9
 800982a:	4640      	mov	r0, r8
 800982c:	f7f7 f994 	bl	8000b58 <__aeabi_d2iz>
 8009830:	4606      	mov	r6, r0
 8009832:	f7f6 fe77 	bl	8000524 <__aeabi_i2d>
 8009836:	4602      	mov	r2, r0
 8009838:	460b      	mov	r3, r1
 800983a:	4640      	mov	r0, r8
 800983c:	4649      	mov	r1, r9
 800983e:	f7f6 fd23 	bl	8000288 <__aeabi_dsub>
 8009842:	3630      	adds	r6, #48	; 0x30
 8009844:	f805 6b01 	strb.w	r6, [r5], #1
 8009848:	4652      	mov	r2, sl
 800984a:	465b      	mov	r3, fp
 800984c:	4680      	mov	r8, r0
 800984e:	4689      	mov	r9, r1
 8009850:	f7f7 f944 	bl	8000adc <__aeabi_dcmplt>
 8009854:	2800      	cmp	r0, #0
 8009856:	d163      	bne.n	8009920 <_dtoa_r+0x608>
 8009858:	4642      	mov	r2, r8
 800985a:	464b      	mov	r3, r9
 800985c:	4936      	ldr	r1, [pc, #216]	; (8009938 <_dtoa_r+0x620>)
 800985e:	2000      	movs	r0, #0
 8009860:	f7f6 fd12 	bl	8000288 <__aeabi_dsub>
 8009864:	4652      	mov	r2, sl
 8009866:	465b      	mov	r3, fp
 8009868:	f7f7 f938 	bl	8000adc <__aeabi_dcmplt>
 800986c:	2800      	cmp	r0, #0
 800986e:	f040 80b5 	bne.w	80099dc <_dtoa_r+0x6c4>
 8009872:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009874:	429d      	cmp	r5, r3
 8009876:	d081      	beq.n	800977c <_dtoa_r+0x464>
 8009878:	4b30      	ldr	r3, [pc, #192]	; (800993c <_dtoa_r+0x624>)
 800987a:	2200      	movs	r2, #0
 800987c:	4650      	mov	r0, sl
 800987e:	4659      	mov	r1, fp
 8009880:	f7f6 feba 	bl	80005f8 <__aeabi_dmul>
 8009884:	4b2d      	ldr	r3, [pc, #180]	; (800993c <_dtoa_r+0x624>)
 8009886:	4682      	mov	sl, r0
 8009888:	468b      	mov	fp, r1
 800988a:	4640      	mov	r0, r8
 800988c:	4649      	mov	r1, r9
 800988e:	2200      	movs	r2, #0
 8009890:	f7f6 feb2 	bl	80005f8 <__aeabi_dmul>
 8009894:	4680      	mov	r8, r0
 8009896:	4689      	mov	r9, r1
 8009898:	e7c6      	b.n	8009828 <_dtoa_r+0x510>
 800989a:	4650      	mov	r0, sl
 800989c:	4659      	mov	r1, fp
 800989e:	f7f6 feab 	bl	80005f8 <__aeabi_dmul>
 80098a2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098a4:	9d01      	ldr	r5, [sp, #4]
 80098a6:	930f      	str	r3, [sp, #60]	; 0x3c
 80098a8:	4682      	mov	sl, r0
 80098aa:	468b      	mov	fp, r1
 80098ac:	4649      	mov	r1, r9
 80098ae:	4640      	mov	r0, r8
 80098b0:	f7f7 f952 	bl	8000b58 <__aeabi_d2iz>
 80098b4:	4606      	mov	r6, r0
 80098b6:	f7f6 fe35 	bl	8000524 <__aeabi_i2d>
 80098ba:	3630      	adds	r6, #48	; 0x30
 80098bc:	4602      	mov	r2, r0
 80098be:	460b      	mov	r3, r1
 80098c0:	4640      	mov	r0, r8
 80098c2:	4649      	mov	r1, r9
 80098c4:	f7f6 fce0 	bl	8000288 <__aeabi_dsub>
 80098c8:	f805 6b01 	strb.w	r6, [r5], #1
 80098cc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80098ce:	429d      	cmp	r5, r3
 80098d0:	4680      	mov	r8, r0
 80098d2:	4689      	mov	r9, r1
 80098d4:	f04f 0200 	mov.w	r2, #0
 80098d8:	d124      	bne.n	8009924 <_dtoa_r+0x60c>
 80098da:	4b1b      	ldr	r3, [pc, #108]	; (8009948 <_dtoa_r+0x630>)
 80098dc:	4650      	mov	r0, sl
 80098de:	4659      	mov	r1, fp
 80098e0:	f7f6 fcd4 	bl	800028c <__adddf3>
 80098e4:	4602      	mov	r2, r0
 80098e6:	460b      	mov	r3, r1
 80098e8:	4640      	mov	r0, r8
 80098ea:	4649      	mov	r1, r9
 80098ec:	f7f7 f914 	bl	8000b18 <__aeabi_dcmpgt>
 80098f0:	2800      	cmp	r0, #0
 80098f2:	d173      	bne.n	80099dc <_dtoa_r+0x6c4>
 80098f4:	4652      	mov	r2, sl
 80098f6:	465b      	mov	r3, fp
 80098f8:	4913      	ldr	r1, [pc, #76]	; (8009948 <_dtoa_r+0x630>)
 80098fa:	2000      	movs	r0, #0
 80098fc:	f7f6 fcc4 	bl	8000288 <__aeabi_dsub>
 8009900:	4602      	mov	r2, r0
 8009902:	460b      	mov	r3, r1
 8009904:	4640      	mov	r0, r8
 8009906:	4649      	mov	r1, r9
 8009908:	f7f7 f8e8 	bl	8000adc <__aeabi_dcmplt>
 800990c:	2800      	cmp	r0, #0
 800990e:	f43f af35 	beq.w	800977c <_dtoa_r+0x464>
 8009912:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009914:	1e6b      	subs	r3, r5, #1
 8009916:	930f      	str	r3, [sp, #60]	; 0x3c
 8009918:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800991c:	2b30      	cmp	r3, #48	; 0x30
 800991e:	d0f8      	beq.n	8009912 <_dtoa_r+0x5fa>
 8009920:	9700      	str	r7, [sp, #0]
 8009922:	e049      	b.n	80099b8 <_dtoa_r+0x6a0>
 8009924:	4b05      	ldr	r3, [pc, #20]	; (800993c <_dtoa_r+0x624>)
 8009926:	f7f6 fe67 	bl	80005f8 <__aeabi_dmul>
 800992a:	4680      	mov	r8, r0
 800992c:	4689      	mov	r9, r1
 800992e:	e7bd      	b.n	80098ac <_dtoa_r+0x594>
 8009930:	0800c508 	.word	0x0800c508
 8009934:	0800c4e0 	.word	0x0800c4e0
 8009938:	3ff00000 	.word	0x3ff00000
 800993c:	40240000 	.word	0x40240000
 8009940:	401c0000 	.word	0x401c0000
 8009944:	40140000 	.word	0x40140000
 8009948:	3fe00000 	.word	0x3fe00000
 800994c:	9d01      	ldr	r5, [sp, #4]
 800994e:	4656      	mov	r6, sl
 8009950:	465f      	mov	r7, fp
 8009952:	4642      	mov	r2, r8
 8009954:	464b      	mov	r3, r9
 8009956:	4630      	mov	r0, r6
 8009958:	4639      	mov	r1, r7
 800995a:	f7f6 ff77 	bl	800084c <__aeabi_ddiv>
 800995e:	f7f7 f8fb 	bl	8000b58 <__aeabi_d2iz>
 8009962:	4682      	mov	sl, r0
 8009964:	f7f6 fdde 	bl	8000524 <__aeabi_i2d>
 8009968:	4642      	mov	r2, r8
 800996a:	464b      	mov	r3, r9
 800996c:	f7f6 fe44 	bl	80005f8 <__aeabi_dmul>
 8009970:	4602      	mov	r2, r0
 8009972:	460b      	mov	r3, r1
 8009974:	4630      	mov	r0, r6
 8009976:	4639      	mov	r1, r7
 8009978:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800997c:	f7f6 fc84 	bl	8000288 <__aeabi_dsub>
 8009980:	f805 6b01 	strb.w	r6, [r5], #1
 8009984:	9e01      	ldr	r6, [sp, #4]
 8009986:	9f03      	ldr	r7, [sp, #12]
 8009988:	1bae      	subs	r6, r5, r6
 800998a:	42b7      	cmp	r7, r6
 800998c:	4602      	mov	r2, r0
 800998e:	460b      	mov	r3, r1
 8009990:	d135      	bne.n	80099fe <_dtoa_r+0x6e6>
 8009992:	f7f6 fc7b 	bl	800028c <__adddf3>
 8009996:	4642      	mov	r2, r8
 8009998:	464b      	mov	r3, r9
 800999a:	4606      	mov	r6, r0
 800999c:	460f      	mov	r7, r1
 800999e:	f7f7 f8bb 	bl	8000b18 <__aeabi_dcmpgt>
 80099a2:	b9d0      	cbnz	r0, 80099da <_dtoa_r+0x6c2>
 80099a4:	4642      	mov	r2, r8
 80099a6:	464b      	mov	r3, r9
 80099a8:	4630      	mov	r0, r6
 80099aa:	4639      	mov	r1, r7
 80099ac:	f7f7 f88c 	bl	8000ac8 <__aeabi_dcmpeq>
 80099b0:	b110      	cbz	r0, 80099b8 <_dtoa_r+0x6a0>
 80099b2:	f01a 0f01 	tst.w	sl, #1
 80099b6:	d110      	bne.n	80099da <_dtoa_r+0x6c2>
 80099b8:	4620      	mov	r0, r4
 80099ba:	ee18 1a10 	vmov	r1, s16
 80099be:	f000 fe87 	bl	800a6d0 <_Bfree>
 80099c2:	2300      	movs	r3, #0
 80099c4:	9800      	ldr	r0, [sp, #0]
 80099c6:	702b      	strb	r3, [r5, #0]
 80099c8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 80099ca:	3001      	adds	r0, #1
 80099cc:	6018      	str	r0, [r3, #0]
 80099ce:	9b21      	ldr	r3, [sp, #132]	; 0x84
 80099d0:	2b00      	cmp	r3, #0
 80099d2:	f43f acf1 	beq.w	80093b8 <_dtoa_r+0xa0>
 80099d6:	601d      	str	r5, [r3, #0]
 80099d8:	e4ee      	b.n	80093b8 <_dtoa_r+0xa0>
 80099da:	9f00      	ldr	r7, [sp, #0]
 80099dc:	462b      	mov	r3, r5
 80099de:	461d      	mov	r5, r3
 80099e0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80099e4:	2a39      	cmp	r2, #57	; 0x39
 80099e6:	d106      	bne.n	80099f6 <_dtoa_r+0x6de>
 80099e8:	9a01      	ldr	r2, [sp, #4]
 80099ea:	429a      	cmp	r2, r3
 80099ec:	d1f7      	bne.n	80099de <_dtoa_r+0x6c6>
 80099ee:	9901      	ldr	r1, [sp, #4]
 80099f0:	2230      	movs	r2, #48	; 0x30
 80099f2:	3701      	adds	r7, #1
 80099f4:	700a      	strb	r2, [r1, #0]
 80099f6:	781a      	ldrb	r2, [r3, #0]
 80099f8:	3201      	adds	r2, #1
 80099fa:	701a      	strb	r2, [r3, #0]
 80099fc:	e790      	b.n	8009920 <_dtoa_r+0x608>
 80099fe:	4ba6      	ldr	r3, [pc, #664]	; (8009c98 <_dtoa_r+0x980>)
 8009a00:	2200      	movs	r2, #0
 8009a02:	f7f6 fdf9 	bl	80005f8 <__aeabi_dmul>
 8009a06:	2200      	movs	r2, #0
 8009a08:	2300      	movs	r3, #0
 8009a0a:	4606      	mov	r6, r0
 8009a0c:	460f      	mov	r7, r1
 8009a0e:	f7f7 f85b 	bl	8000ac8 <__aeabi_dcmpeq>
 8009a12:	2800      	cmp	r0, #0
 8009a14:	d09d      	beq.n	8009952 <_dtoa_r+0x63a>
 8009a16:	e7cf      	b.n	80099b8 <_dtoa_r+0x6a0>
 8009a18:	9a08      	ldr	r2, [sp, #32]
 8009a1a:	2a00      	cmp	r2, #0
 8009a1c:	f000 80d7 	beq.w	8009bce <_dtoa_r+0x8b6>
 8009a20:	9a06      	ldr	r2, [sp, #24]
 8009a22:	2a01      	cmp	r2, #1
 8009a24:	f300 80ba 	bgt.w	8009b9c <_dtoa_r+0x884>
 8009a28:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009a2a:	2a00      	cmp	r2, #0
 8009a2c:	f000 80b2 	beq.w	8009b94 <_dtoa_r+0x87c>
 8009a30:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009a34:	9e07      	ldr	r6, [sp, #28]
 8009a36:	9d04      	ldr	r5, [sp, #16]
 8009a38:	9a04      	ldr	r2, [sp, #16]
 8009a3a:	441a      	add	r2, r3
 8009a3c:	9204      	str	r2, [sp, #16]
 8009a3e:	9a05      	ldr	r2, [sp, #20]
 8009a40:	2101      	movs	r1, #1
 8009a42:	441a      	add	r2, r3
 8009a44:	4620      	mov	r0, r4
 8009a46:	9205      	str	r2, [sp, #20]
 8009a48:	f000 ff44 	bl	800a8d4 <__i2b>
 8009a4c:	4607      	mov	r7, r0
 8009a4e:	2d00      	cmp	r5, #0
 8009a50:	dd0c      	ble.n	8009a6c <_dtoa_r+0x754>
 8009a52:	9b05      	ldr	r3, [sp, #20]
 8009a54:	2b00      	cmp	r3, #0
 8009a56:	dd09      	ble.n	8009a6c <_dtoa_r+0x754>
 8009a58:	42ab      	cmp	r3, r5
 8009a5a:	9a04      	ldr	r2, [sp, #16]
 8009a5c:	bfa8      	it	ge
 8009a5e:	462b      	movge	r3, r5
 8009a60:	1ad2      	subs	r2, r2, r3
 8009a62:	9204      	str	r2, [sp, #16]
 8009a64:	9a05      	ldr	r2, [sp, #20]
 8009a66:	1aed      	subs	r5, r5, r3
 8009a68:	1ad3      	subs	r3, r2, r3
 8009a6a:	9305      	str	r3, [sp, #20]
 8009a6c:	9b07      	ldr	r3, [sp, #28]
 8009a6e:	b31b      	cbz	r3, 8009ab8 <_dtoa_r+0x7a0>
 8009a70:	9b08      	ldr	r3, [sp, #32]
 8009a72:	2b00      	cmp	r3, #0
 8009a74:	f000 80af 	beq.w	8009bd6 <_dtoa_r+0x8be>
 8009a78:	2e00      	cmp	r6, #0
 8009a7a:	dd13      	ble.n	8009aa4 <_dtoa_r+0x78c>
 8009a7c:	4639      	mov	r1, r7
 8009a7e:	4632      	mov	r2, r6
 8009a80:	4620      	mov	r0, r4
 8009a82:	f000 ffe7 	bl	800aa54 <__pow5mult>
 8009a86:	ee18 2a10 	vmov	r2, s16
 8009a8a:	4601      	mov	r1, r0
 8009a8c:	4607      	mov	r7, r0
 8009a8e:	4620      	mov	r0, r4
 8009a90:	f000 ff36 	bl	800a900 <__multiply>
 8009a94:	ee18 1a10 	vmov	r1, s16
 8009a98:	4680      	mov	r8, r0
 8009a9a:	4620      	mov	r0, r4
 8009a9c:	f000 fe18 	bl	800a6d0 <_Bfree>
 8009aa0:	ee08 8a10 	vmov	s16, r8
 8009aa4:	9b07      	ldr	r3, [sp, #28]
 8009aa6:	1b9a      	subs	r2, r3, r6
 8009aa8:	d006      	beq.n	8009ab8 <_dtoa_r+0x7a0>
 8009aaa:	ee18 1a10 	vmov	r1, s16
 8009aae:	4620      	mov	r0, r4
 8009ab0:	f000 ffd0 	bl	800aa54 <__pow5mult>
 8009ab4:	ee08 0a10 	vmov	s16, r0
 8009ab8:	2101      	movs	r1, #1
 8009aba:	4620      	mov	r0, r4
 8009abc:	f000 ff0a 	bl	800a8d4 <__i2b>
 8009ac0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009ac2:	2b00      	cmp	r3, #0
 8009ac4:	4606      	mov	r6, r0
 8009ac6:	f340 8088 	ble.w	8009bda <_dtoa_r+0x8c2>
 8009aca:	461a      	mov	r2, r3
 8009acc:	4601      	mov	r1, r0
 8009ace:	4620      	mov	r0, r4
 8009ad0:	f000 ffc0 	bl	800aa54 <__pow5mult>
 8009ad4:	9b06      	ldr	r3, [sp, #24]
 8009ad6:	2b01      	cmp	r3, #1
 8009ad8:	4606      	mov	r6, r0
 8009ada:	f340 8081 	ble.w	8009be0 <_dtoa_r+0x8c8>
 8009ade:	f04f 0800 	mov.w	r8, #0
 8009ae2:	6933      	ldr	r3, [r6, #16]
 8009ae4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009ae8:	6918      	ldr	r0, [r3, #16]
 8009aea:	f000 fea3 	bl	800a834 <__hi0bits>
 8009aee:	f1c0 0020 	rsb	r0, r0, #32
 8009af2:	9b05      	ldr	r3, [sp, #20]
 8009af4:	4418      	add	r0, r3
 8009af6:	f010 001f 	ands.w	r0, r0, #31
 8009afa:	f000 8092 	beq.w	8009c22 <_dtoa_r+0x90a>
 8009afe:	f1c0 0320 	rsb	r3, r0, #32
 8009b02:	2b04      	cmp	r3, #4
 8009b04:	f340 808a 	ble.w	8009c1c <_dtoa_r+0x904>
 8009b08:	f1c0 001c 	rsb	r0, r0, #28
 8009b0c:	9b04      	ldr	r3, [sp, #16]
 8009b0e:	4403      	add	r3, r0
 8009b10:	9304      	str	r3, [sp, #16]
 8009b12:	9b05      	ldr	r3, [sp, #20]
 8009b14:	4403      	add	r3, r0
 8009b16:	4405      	add	r5, r0
 8009b18:	9305      	str	r3, [sp, #20]
 8009b1a:	9b04      	ldr	r3, [sp, #16]
 8009b1c:	2b00      	cmp	r3, #0
 8009b1e:	dd07      	ble.n	8009b30 <_dtoa_r+0x818>
 8009b20:	ee18 1a10 	vmov	r1, s16
 8009b24:	461a      	mov	r2, r3
 8009b26:	4620      	mov	r0, r4
 8009b28:	f000 ffee 	bl	800ab08 <__lshift>
 8009b2c:	ee08 0a10 	vmov	s16, r0
 8009b30:	9b05      	ldr	r3, [sp, #20]
 8009b32:	2b00      	cmp	r3, #0
 8009b34:	dd05      	ble.n	8009b42 <_dtoa_r+0x82a>
 8009b36:	4631      	mov	r1, r6
 8009b38:	461a      	mov	r2, r3
 8009b3a:	4620      	mov	r0, r4
 8009b3c:	f000 ffe4 	bl	800ab08 <__lshift>
 8009b40:	4606      	mov	r6, r0
 8009b42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b44:	2b00      	cmp	r3, #0
 8009b46:	d06e      	beq.n	8009c26 <_dtoa_r+0x90e>
 8009b48:	ee18 0a10 	vmov	r0, s16
 8009b4c:	4631      	mov	r1, r6
 8009b4e:	f001 f84b 	bl	800abe8 <__mcmp>
 8009b52:	2800      	cmp	r0, #0
 8009b54:	da67      	bge.n	8009c26 <_dtoa_r+0x90e>
 8009b56:	9b00      	ldr	r3, [sp, #0]
 8009b58:	3b01      	subs	r3, #1
 8009b5a:	ee18 1a10 	vmov	r1, s16
 8009b5e:	9300      	str	r3, [sp, #0]
 8009b60:	220a      	movs	r2, #10
 8009b62:	2300      	movs	r3, #0
 8009b64:	4620      	mov	r0, r4
 8009b66:	f000 fdd5 	bl	800a714 <__multadd>
 8009b6a:	9b08      	ldr	r3, [sp, #32]
 8009b6c:	ee08 0a10 	vmov	s16, r0
 8009b70:	2b00      	cmp	r3, #0
 8009b72:	f000 81b1 	beq.w	8009ed8 <_dtoa_r+0xbc0>
 8009b76:	2300      	movs	r3, #0
 8009b78:	4639      	mov	r1, r7
 8009b7a:	220a      	movs	r2, #10
 8009b7c:	4620      	mov	r0, r4
 8009b7e:	f000 fdc9 	bl	800a714 <__multadd>
 8009b82:	9b02      	ldr	r3, [sp, #8]
 8009b84:	2b00      	cmp	r3, #0
 8009b86:	4607      	mov	r7, r0
 8009b88:	f300 808e 	bgt.w	8009ca8 <_dtoa_r+0x990>
 8009b8c:	9b06      	ldr	r3, [sp, #24]
 8009b8e:	2b02      	cmp	r3, #2
 8009b90:	dc51      	bgt.n	8009c36 <_dtoa_r+0x91e>
 8009b92:	e089      	b.n	8009ca8 <_dtoa_r+0x990>
 8009b94:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009b96:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009b9a:	e74b      	b.n	8009a34 <_dtoa_r+0x71c>
 8009b9c:	9b03      	ldr	r3, [sp, #12]
 8009b9e:	1e5e      	subs	r6, r3, #1
 8009ba0:	9b07      	ldr	r3, [sp, #28]
 8009ba2:	42b3      	cmp	r3, r6
 8009ba4:	bfbf      	itttt	lt
 8009ba6:	9b07      	ldrlt	r3, [sp, #28]
 8009ba8:	9607      	strlt	r6, [sp, #28]
 8009baa:	1af2      	sublt	r2, r6, r3
 8009bac:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009bae:	bfb6      	itet	lt
 8009bb0:	189b      	addlt	r3, r3, r2
 8009bb2:	1b9e      	subge	r6, r3, r6
 8009bb4:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009bb6:	9b03      	ldr	r3, [sp, #12]
 8009bb8:	bfb8      	it	lt
 8009bba:	2600      	movlt	r6, #0
 8009bbc:	2b00      	cmp	r3, #0
 8009bbe:	bfb7      	itett	lt
 8009bc0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009bc4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009bc8:	1a9d      	sublt	r5, r3, r2
 8009bca:	2300      	movlt	r3, #0
 8009bcc:	e734      	b.n	8009a38 <_dtoa_r+0x720>
 8009bce:	9e07      	ldr	r6, [sp, #28]
 8009bd0:	9d04      	ldr	r5, [sp, #16]
 8009bd2:	9f08      	ldr	r7, [sp, #32]
 8009bd4:	e73b      	b.n	8009a4e <_dtoa_r+0x736>
 8009bd6:	9a07      	ldr	r2, [sp, #28]
 8009bd8:	e767      	b.n	8009aaa <_dtoa_r+0x792>
 8009bda:	9b06      	ldr	r3, [sp, #24]
 8009bdc:	2b01      	cmp	r3, #1
 8009bde:	dc18      	bgt.n	8009c12 <_dtoa_r+0x8fa>
 8009be0:	f1ba 0f00 	cmp.w	sl, #0
 8009be4:	d115      	bne.n	8009c12 <_dtoa_r+0x8fa>
 8009be6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009bea:	b993      	cbnz	r3, 8009c12 <_dtoa_r+0x8fa>
 8009bec:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009bf0:	0d1b      	lsrs	r3, r3, #20
 8009bf2:	051b      	lsls	r3, r3, #20
 8009bf4:	b183      	cbz	r3, 8009c18 <_dtoa_r+0x900>
 8009bf6:	9b04      	ldr	r3, [sp, #16]
 8009bf8:	3301      	adds	r3, #1
 8009bfa:	9304      	str	r3, [sp, #16]
 8009bfc:	9b05      	ldr	r3, [sp, #20]
 8009bfe:	3301      	adds	r3, #1
 8009c00:	9305      	str	r3, [sp, #20]
 8009c02:	f04f 0801 	mov.w	r8, #1
 8009c06:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	f47f af6a 	bne.w	8009ae2 <_dtoa_r+0x7ca>
 8009c0e:	2001      	movs	r0, #1
 8009c10:	e76f      	b.n	8009af2 <_dtoa_r+0x7da>
 8009c12:	f04f 0800 	mov.w	r8, #0
 8009c16:	e7f6      	b.n	8009c06 <_dtoa_r+0x8ee>
 8009c18:	4698      	mov	r8, r3
 8009c1a:	e7f4      	b.n	8009c06 <_dtoa_r+0x8ee>
 8009c1c:	f43f af7d 	beq.w	8009b1a <_dtoa_r+0x802>
 8009c20:	4618      	mov	r0, r3
 8009c22:	301c      	adds	r0, #28
 8009c24:	e772      	b.n	8009b0c <_dtoa_r+0x7f4>
 8009c26:	9b03      	ldr	r3, [sp, #12]
 8009c28:	2b00      	cmp	r3, #0
 8009c2a:	dc37      	bgt.n	8009c9c <_dtoa_r+0x984>
 8009c2c:	9b06      	ldr	r3, [sp, #24]
 8009c2e:	2b02      	cmp	r3, #2
 8009c30:	dd34      	ble.n	8009c9c <_dtoa_r+0x984>
 8009c32:	9b03      	ldr	r3, [sp, #12]
 8009c34:	9302      	str	r3, [sp, #8]
 8009c36:	9b02      	ldr	r3, [sp, #8]
 8009c38:	b96b      	cbnz	r3, 8009c56 <_dtoa_r+0x93e>
 8009c3a:	4631      	mov	r1, r6
 8009c3c:	2205      	movs	r2, #5
 8009c3e:	4620      	mov	r0, r4
 8009c40:	f000 fd68 	bl	800a714 <__multadd>
 8009c44:	4601      	mov	r1, r0
 8009c46:	4606      	mov	r6, r0
 8009c48:	ee18 0a10 	vmov	r0, s16
 8009c4c:	f000 ffcc 	bl	800abe8 <__mcmp>
 8009c50:	2800      	cmp	r0, #0
 8009c52:	f73f adbb 	bgt.w	80097cc <_dtoa_r+0x4b4>
 8009c56:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c58:	9d01      	ldr	r5, [sp, #4]
 8009c5a:	43db      	mvns	r3, r3
 8009c5c:	9300      	str	r3, [sp, #0]
 8009c5e:	f04f 0800 	mov.w	r8, #0
 8009c62:	4631      	mov	r1, r6
 8009c64:	4620      	mov	r0, r4
 8009c66:	f000 fd33 	bl	800a6d0 <_Bfree>
 8009c6a:	2f00      	cmp	r7, #0
 8009c6c:	f43f aea4 	beq.w	80099b8 <_dtoa_r+0x6a0>
 8009c70:	f1b8 0f00 	cmp.w	r8, #0
 8009c74:	d005      	beq.n	8009c82 <_dtoa_r+0x96a>
 8009c76:	45b8      	cmp	r8, r7
 8009c78:	d003      	beq.n	8009c82 <_dtoa_r+0x96a>
 8009c7a:	4641      	mov	r1, r8
 8009c7c:	4620      	mov	r0, r4
 8009c7e:	f000 fd27 	bl	800a6d0 <_Bfree>
 8009c82:	4639      	mov	r1, r7
 8009c84:	4620      	mov	r0, r4
 8009c86:	f000 fd23 	bl	800a6d0 <_Bfree>
 8009c8a:	e695      	b.n	80099b8 <_dtoa_r+0x6a0>
 8009c8c:	2600      	movs	r6, #0
 8009c8e:	4637      	mov	r7, r6
 8009c90:	e7e1      	b.n	8009c56 <_dtoa_r+0x93e>
 8009c92:	9700      	str	r7, [sp, #0]
 8009c94:	4637      	mov	r7, r6
 8009c96:	e599      	b.n	80097cc <_dtoa_r+0x4b4>
 8009c98:	40240000 	.word	0x40240000
 8009c9c:	9b08      	ldr	r3, [sp, #32]
 8009c9e:	2b00      	cmp	r3, #0
 8009ca0:	f000 80ca 	beq.w	8009e38 <_dtoa_r+0xb20>
 8009ca4:	9b03      	ldr	r3, [sp, #12]
 8009ca6:	9302      	str	r3, [sp, #8]
 8009ca8:	2d00      	cmp	r5, #0
 8009caa:	dd05      	ble.n	8009cb8 <_dtoa_r+0x9a0>
 8009cac:	4639      	mov	r1, r7
 8009cae:	462a      	mov	r2, r5
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	f000 ff29 	bl	800ab08 <__lshift>
 8009cb6:	4607      	mov	r7, r0
 8009cb8:	f1b8 0f00 	cmp.w	r8, #0
 8009cbc:	d05b      	beq.n	8009d76 <_dtoa_r+0xa5e>
 8009cbe:	6879      	ldr	r1, [r7, #4]
 8009cc0:	4620      	mov	r0, r4
 8009cc2:	f000 fcc5 	bl	800a650 <_Balloc>
 8009cc6:	4605      	mov	r5, r0
 8009cc8:	b928      	cbnz	r0, 8009cd6 <_dtoa_r+0x9be>
 8009cca:	4b87      	ldr	r3, [pc, #540]	; (8009ee8 <_dtoa_r+0xbd0>)
 8009ccc:	4602      	mov	r2, r0
 8009cce:	f240 21ea 	movw	r1, #746	; 0x2ea
 8009cd2:	f7ff bb3b 	b.w	800934c <_dtoa_r+0x34>
 8009cd6:	693a      	ldr	r2, [r7, #16]
 8009cd8:	3202      	adds	r2, #2
 8009cda:	0092      	lsls	r2, r2, #2
 8009cdc:	f107 010c 	add.w	r1, r7, #12
 8009ce0:	300c      	adds	r0, #12
 8009ce2:	f000 fca7 	bl	800a634 <memcpy>
 8009ce6:	2201      	movs	r2, #1
 8009ce8:	4629      	mov	r1, r5
 8009cea:	4620      	mov	r0, r4
 8009cec:	f000 ff0c 	bl	800ab08 <__lshift>
 8009cf0:	9b01      	ldr	r3, [sp, #4]
 8009cf2:	f103 0901 	add.w	r9, r3, #1
 8009cf6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 8009cfa:	4413      	add	r3, r2
 8009cfc:	9305      	str	r3, [sp, #20]
 8009cfe:	f00a 0301 	and.w	r3, sl, #1
 8009d02:	46b8      	mov	r8, r7
 8009d04:	9304      	str	r3, [sp, #16]
 8009d06:	4607      	mov	r7, r0
 8009d08:	4631      	mov	r1, r6
 8009d0a:	ee18 0a10 	vmov	r0, s16
 8009d0e:	f7ff fa75 	bl	80091fc <quorem>
 8009d12:	4641      	mov	r1, r8
 8009d14:	9002      	str	r0, [sp, #8]
 8009d16:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009d1a:	ee18 0a10 	vmov	r0, s16
 8009d1e:	f000 ff63 	bl	800abe8 <__mcmp>
 8009d22:	463a      	mov	r2, r7
 8009d24:	9003      	str	r0, [sp, #12]
 8009d26:	4631      	mov	r1, r6
 8009d28:	4620      	mov	r0, r4
 8009d2a:	f000 ff79 	bl	800ac20 <__mdiff>
 8009d2e:	68c2      	ldr	r2, [r0, #12]
 8009d30:	f109 3bff 	add.w	fp, r9, #4294967295
 8009d34:	4605      	mov	r5, r0
 8009d36:	bb02      	cbnz	r2, 8009d7a <_dtoa_r+0xa62>
 8009d38:	4601      	mov	r1, r0
 8009d3a:	ee18 0a10 	vmov	r0, s16
 8009d3e:	f000 ff53 	bl	800abe8 <__mcmp>
 8009d42:	4602      	mov	r2, r0
 8009d44:	4629      	mov	r1, r5
 8009d46:	4620      	mov	r0, r4
 8009d48:	9207      	str	r2, [sp, #28]
 8009d4a:	f000 fcc1 	bl	800a6d0 <_Bfree>
 8009d4e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 8009d52:	ea43 0102 	orr.w	r1, r3, r2
 8009d56:	9b04      	ldr	r3, [sp, #16]
 8009d58:	430b      	orrs	r3, r1
 8009d5a:	464d      	mov	r5, r9
 8009d5c:	d10f      	bne.n	8009d7e <_dtoa_r+0xa66>
 8009d5e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009d62:	d02a      	beq.n	8009dba <_dtoa_r+0xaa2>
 8009d64:	9b03      	ldr	r3, [sp, #12]
 8009d66:	2b00      	cmp	r3, #0
 8009d68:	dd02      	ble.n	8009d70 <_dtoa_r+0xa58>
 8009d6a:	9b02      	ldr	r3, [sp, #8]
 8009d6c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 8009d70:	f88b a000 	strb.w	sl, [fp]
 8009d74:	e775      	b.n	8009c62 <_dtoa_r+0x94a>
 8009d76:	4638      	mov	r0, r7
 8009d78:	e7ba      	b.n	8009cf0 <_dtoa_r+0x9d8>
 8009d7a:	2201      	movs	r2, #1
 8009d7c:	e7e2      	b.n	8009d44 <_dtoa_r+0xa2c>
 8009d7e:	9b03      	ldr	r3, [sp, #12]
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	db04      	blt.n	8009d8e <_dtoa_r+0xa76>
 8009d84:	9906      	ldr	r1, [sp, #24]
 8009d86:	430b      	orrs	r3, r1
 8009d88:	9904      	ldr	r1, [sp, #16]
 8009d8a:	430b      	orrs	r3, r1
 8009d8c:	d122      	bne.n	8009dd4 <_dtoa_r+0xabc>
 8009d8e:	2a00      	cmp	r2, #0
 8009d90:	ddee      	ble.n	8009d70 <_dtoa_r+0xa58>
 8009d92:	ee18 1a10 	vmov	r1, s16
 8009d96:	2201      	movs	r2, #1
 8009d98:	4620      	mov	r0, r4
 8009d9a:	f000 feb5 	bl	800ab08 <__lshift>
 8009d9e:	4631      	mov	r1, r6
 8009da0:	ee08 0a10 	vmov	s16, r0
 8009da4:	f000 ff20 	bl	800abe8 <__mcmp>
 8009da8:	2800      	cmp	r0, #0
 8009daa:	dc03      	bgt.n	8009db4 <_dtoa_r+0xa9c>
 8009dac:	d1e0      	bne.n	8009d70 <_dtoa_r+0xa58>
 8009dae:	f01a 0f01 	tst.w	sl, #1
 8009db2:	d0dd      	beq.n	8009d70 <_dtoa_r+0xa58>
 8009db4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009db8:	d1d7      	bne.n	8009d6a <_dtoa_r+0xa52>
 8009dba:	2339      	movs	r3, #57	; 0x39
 8009dbc:	f88b 3000 	strb.w	r3, [fp]
 8009dc0:	462b      	mov	r3, r5
 8009dc2:	461d      	mov	r5, r3
 8009dc4:	3b01      	subs	r3, #1
 8009dc6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 8009dca:	2a39      	cmp	r2, #57	; 0x39
 8009dcc:	d071      	beq.n	8009eb2 <_dtoa_r+0xb9a>
 8009dce:	3201      	adds	r2, #1
 8009dd0:	701a      	strb	r2, [r3, #0]
 8009dd2:	e746      	b.n	8009c62 <_dtoa_r+0x94a>
 8009dd4:	2a00      	cmp	r2, #0
 8009dd6:	dd07      	ble.n	8009de8 <_dtoa_r+0xad0>
 8009dd8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 8009ddc:	d0ed      	beq.n	8009dba <_dtoa_r+0xaa2>
 8009dde:	f10a 0301 	add.w	r3, sl, #1
 8009de2:	f88b 3000 	strb.w	r3, [fp]
 8009de6:	e73c      	b.n	8009c62 <_dtoa_r+0x94a>
 8009de8:	9b05      	ldr	r3, [sp, #20]
 8009dea:	f809 ac01 	strb.w	sl, [r9, #-1]
 8009dee:	4599      	cmp	r9, r3
 8009df0:	d047      	beq.n	8009e82 <_dtoa_r+0xb6a>
 8009df2:	ee18 1a10 	vmov	r1, s16
 8009df6:	2300      	movs	r3, #0
 8009df8:	220a      	movs	r2, #10
 8009dfa:	4620      	mov	r0, r4
 8009dfc:	f000 fc8a 	bl	800a714 <__multadd>
 8009e00:	45b8      	cmp	r8, r7
 8009e02:	ee08 0a10 	vmov	s16, r0
 8009e06:	f04f 0300 	mov.w	r3, #0
 8009e0a:	f04f 020a 	mov.w	r2, #10
 8009e0e:	4641      	mov	r1, r8
 8009e10:	4620      	mov	r0, r4
 8009e12:	d106      	bne.n	8009e22 <_dtoa_r+0xb0a>
 8009e14:	f000 fc7e 	bl	800a714 <__multadd>
 8009e18:	4680      	mov	r8, r0
 8009e1a:	4607      	mov	r7, r0
 8009e1c:	f109 0901 	add.w	r9, r9, #1
 8009e20:	e772      	b.n	8009d08 <_dtoa_r+0x9f0>
 8009e22:	f000 fc77 	bl	800a714 <__multadd>
 8009e26:	4639      	mov	r1, r7
 8009e28:	4680      	mov	r8, r0
 8009e2a:	2300      	movs	r3, #0
 8009e2c:	220a      	movs	r2, #10
 8009e2e:	4620      	mov	r0, r4
 8009e30:	f000 fc70 	bl	800a714 <__multadd>
 8009e34:	4607      	mov	r7, r0
 8009e36:	e7f1      	b.n	8009e1c <_dtoa_r+0xb04>
 8009e38:	9b03      	ldr	r3, [sp, #12]
 8009e3a:	9302      	str	r3, [sp, #8]
 8009e3c:	9d01      	ldr	r5, [sp, #4]
 8009e3e:	ee18 0a10 	vmov	r0, s16
 8009e42:	4631      	mov	r1, r6
 8009e44:	f7ff f9da 	bl	80091fc <quorem>
 8009e48:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 8009e4c:	9b01      	ldr	r3, [sp, #4]
 8009e4e:	f805 ab01 	strb.w	sl, [r5], #1
 8009e52:	1aea      	subs	r2, r5, r3
 8009e54:	9b02      	ldr	r3, [sp, #8]
 8009e56:	4293      	cmp	r3, r2
 8009e58:	dd09      	ble.n	8009e6e <_dtoa_r+0xb56>
 8009e5a:	ee18 1a10 	vmov	r1, s16
 8009e5e:	2300      	movs	r3, #0
 8009e60:	220a      	movs	r2, #10
 8009e62:	4620      	mov	r0, r4
 8009e64:	f000 fc56 	bl	800a714 <__multadd>
 8009e68:	ee08 0a10 	vmov	s16, r0
 8009e6c:	e7e7      	b.n	8009e3e <_dtoa_r+0xb26>
 8009e6e:	9b02      	ldr	r3, [sp, #8]
 8009e70:	2b00      	cmp	r3, #0
 8009e72:	bfc8      	it	gt
 8009e74:	461d      	movgt	r5, r3
 8009e76:	9b01      	ldr	r3, [sp, #4]
 8009e78:	bfd8      	it	le
 8009e7a:	2501      	movle	r5, #1
 8009e7c:	441d      	add	r5, r3
 8009e7e:	f04f 0800 	mov.w	r8, #0
 8009e82:	ee18 1a10 	vmov	r1, s16
 8009e86:	2201      	movs	r2, #1
 8009e88:	4620      	mov	r0, r4
 8009e8a:	f000 fe3d 	bl	800ab08 <__lshift>
 8009e8e:	4631      	mov	r1, r6
 8009e90:	ee08 0a10 	vmov	s16, r0
 8009e94:	f000 fea8 	bl	800abe8 <__mcmp>
 8009e98:	2800      	cmp	r0, #0
 8009e9a:	dc91      	bgt.n	8009dc0 <_dtoa_r+0xaa8>
 8009e9c:	d102      	bne.n	8009ea4 <_dtoa_r+0xb8c>
 8009e9e:	f01a 0f01 	tst.w	sl, #1
 8009ea2:	d18d      	bne.n	8009dc0 <_dtoa_r+0xaa8>
 8009ea4:	462b      	mov	r3, r5
 8009ea6:	461d      	mov	r5, r3
 8009ea8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009eac:	2a30      	cmp	r2, #48	; 0x30
 8009eae:	d0fa      	beq.n	8009ea6 <_dtoa_r+0xb8e>
 8009eb0:	e6d7      	b.n	8009c62 <_dtoa_r+0x94a>
 8009eb2:	9a01      	ldr	r2, [sp, #4]
 8009eb4:	429a      	cmp	r2, r3
 8009eb6:	d184      	bne.n	8009dc2 <_dtoa_r+0xaaa>
 8009eb8:	9b00      	ldr	r3, [sp, #0]
 8009eba:	3301      	adds	r3, #1
 8009ebc:	9300      	str	r3, [sp, #0]
 8009ebe:	2331      	movs	r3, #49	; 0x31
 8009ec0:	7013      	strb	r3, [r2, #0]
 8009ec2:	e6ce      	b.n	8009c62 <_dtoa_r+0x94a>
 8009ec4:	4b09      	ldr	r3, [pc, #36]	; (8009eec <_dtoa_r+0xbd4>)
 8009ec6:	f7ff ba95 	b.w	80093f4 <_dtoa_r+0xdc>
 8009eca:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	f47f aa6e 	bne.w	80093ae <_dtoa_r+0x96>
 8009ed2:	4b07      	ldr	r3, [pc, #28]	; (8009ef0 <_dtoa_r+0xbd8>)
 8009ed4:	f7ff ba8e 	b.w	80093f4 <_dtoa_r+0xdc>
 8009ed8:	9b02      	ldr	r3, [sp, #8]
 8009eda:	2b00      	cmp	r3, #0
 8009edc:	dcae      	bgt.n	8009e3c <_dtoa_r+0xb24>
 8009ede:	9b06      	ldr	r3, [sp, #24]
 8009ee0:	2b02      	cmp	r3, #2
 8009ee2:	f73f aea8 	bgt.w	8009c36 <_dtoa_r+0x91e>
 8009ee6:	e7a9      	b.n	8009e3c <_dtoa_r+0xb24>
 8009ee8:	0800c3f9 	.word	0x0800c3f9
 8009eec:	0800c164 	.word	0x0800c164
 8009ef0:	0800c391 	.word	0x0800c391

08009ef4 <fiprintf>:
 8009ef4:	b40e      	push	{r1, r2, r3}
 8009ef6:	b503      	push	{r0, r1, lr}
 8009ef8:	4601      	mov	r1, r0
 8009efa:	ab03      	add	r3, sp, #12
 8009efc:	4805      	ldr	r0, [pc, #20]	; (8009f14 <fiprintf+0x20>)
 8009efe:	f853 2b04 	ldr.w	r2, [r3], #4
 8009f02:	6800      	ldr	r0, [r0, #0]
 8009f04:	9301      	str	r3, [sp, #4]
 8009f06:	f001 fae1 	bl	800b4cc <_vfiprintf_r>
 8009f0a:	b002      	add	sp, #8
 8009f0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8009f10:	b003      	add	sp, #12
 8009f12:	4770      	bx	lr
 8009f14:	20000020 	.word	0x20000020

08009f18 <rshift>:
 8009f18:	6903      	ldr	r3, [r0, #16]
 8009f1a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 8009f1e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8009f22:	ea4f 1261 	mov.w	r2, r1, asr #5
 8009f26:	f100 0414 	add.w	r4, r0, #20
 8009f2a:	dd45      	ble.n	8009fb8 <rshift+0xa0>
 8009f2c:	f011 011f 	ands.w	r1, r1, #31
 8009f30:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 8009f34:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 8009f38:	d10c      	bne.n	8009f54 <rshift+0x3c>
 8009f3a:	f100 0710 	add.w	r7, r0, #16
 8009f3e:	4629      	mov	r1, r5
 8009f40:	42b1      	cmp	r1, r6
 8009f42:	d334      	bcc.n	8009fae <rshift+0x96>
 8009f44:	1a9b      	subs	r3, r3, r2
 8009f46:	009b      	lsls	r3, r3, #2
 8009f48:	1eea      	subs	r2, r5, #3
 8009f4a:	4296      	cmp	r6, r2
 8009f4c:	bf38      	it	cc
 8009f4e:	2300      	movcc	r3, #0
 8009f50:	4423      	add	r3, r4
 8009f52:	e015      	b.n	8009f80 <rshift+0x68>
 8009f54:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 8009f58:	f1c1 0820 	rsb	r8, r1, #32
 8009f5c:	40cf      	lsrs	r7, r1
 8009f5e:	f105 0e04 	add.w	lr, r5, #4
 8009f62:	46a1      	mov	r9, r4
 8009f64:	4576      	cmp	r6, lr
 8009f66:	46f4      	mov	ip, lr
 8009f68:	d815      	bhi.n	8009f96 <rshift+0x7e>
 8009f6a:	1a9a      	subs	r2, r3, r2
 8009f6c:	0092      	lsls	r2, r2, #2
 8009f6e:	3a04      	subs	r2, #4
 8009f70:	3501      	adds	r5, #1
 8009f72:	42ae      	cmp	r6, r5
 8009f74:	bf38      	it	cc
 8009f76:	2200      	movcc	r2, #0
 8009f78:	18a3      	adds	r3, r4, r2
 8009f7a:	50a7      	str	r7, [r4, r2]
 8009f7c:	b107      	cbz	r7, 8009f80 <rshift+0x68>
 8009f7e:	3304      	adds	r3, #4
 8009f80:	1b1a      	subs	r2, r3, r4
 8009f82:	42a3      	cmp	r3, r4
 8009f84:	ea4f 02a2 	mov.w	r2, r2, asr #2
 8009f88:	bf08      	it	eq
 8009f8a:	2300      	moveq	r3, #0
 8009f8c:	6102      	str	r2, [r0, #16]
 8009f8e:	bf08      	it	eq
 8009f90:	6143      	streq	r3, [r0, #20]
 8009f92:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8009f96:	f8dc c000 	ldr.w	ip, [ip]
 8009f9a:	fa0c fc08 	lsl.w	ip, ip, r8
 8009f9e:	ea4c 0707 	orr.w	r7, ip, r7
 8009fa2:	f849 7b04 	str.w	r7, [r9], #4
 8009fa6:	f85e 7b04 	ldr.w	r7, [lr], #4
 8009faa:	40cf      	lsrs	r7, r1
 8009fac:	e7da      	b.n	8009f64 <rshift+0x4c>
 8009fae:	f851 cb04 	ldr.w	ip, [r1], #4
 8009fb2:	f847 cf04 	str.w	ip, [r7, #4]!
 8009fb6:	e7c3      	b.n	8009f40 <rshift+0x28>
 8009fb8:	4623      	mov	r3, r4
 8009fba:	e7e1      	b.n	8009f80 <rshift+0x68>

08009fbc <__hexdig_fun>:
 8009fbc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 8009fc0:	2b09      	cmp	r3, #9
 8009fc2:	d802      	bhi.n	8009fca <__hexdig_fun+0xe>
 8009fc4:	3820      	subs	r0, #32
 8009fc6:	b2c0      	uxtb	r0, r0
 8009fc8:	4770      	bx	lr
 8009fca:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 8009fce:	2b05      	cmp	r3, #5
 8009fd0:	d801      	bhi.n	8009fd6 <__hexdig_fun+0x1a>
 8009fd2:	3847      	subs	r0, #71	; 0x47
 8009fd4:	e7f7      	b.n	8009fc6 <__hexdig_fun+0xa>
 8009fd6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 8009fda:	2b05      	cmp	r3, #5
 8009fdc:	d801      	bhi.n	8009fe2 <__hexdig_fun+0x26>
 8009fde:	3827      	subs	r0, #39	; 0x27
 8009fe0:	e7f1      	b.n	8009fc6 <__hexdig_fun+0xa>
 8009fe2:	2000      	movs	r0, #0
 8009fe4:	4770      	bx	lr
	...

08009fe8 <__gethex>:
 8009fe8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fec:	ed2d 8b02 	vpush	{d8}
 8009ff0:	b089      	sub	sp, #36	; 0x24
 8009ff2:	ee08 0a10 	vmov	s16, r0
 8009ff6:	9304      	str	r3, [sp, #16]
 8009ff8:	4bb4      	ldr	r3, [pc, #720]	; (800a2cc <__gethex+0x2e4>)
 8009ffa:	681b      	ldr	r3, [r3, #0]
 8009ffc:	9301      	str	r3, [sp, #4]
 8009ffe:	4618      	mov	r0, r3
 800a000:	468b      	mov	fp, r1
 800a002:	4690      	mov	r8, r2
 800a004:	f7f6 f8e4 	bl	80001d0 <strlen>
 800a008:	9b01      	ldr	r3, [sp, #4]
 800a00a:	f8db 2000 	ldr.w	r2, [fp]
 800a00e:	4403      	add	r3, r0
 800a010:	4682      	mov	sl, r0
 800a012:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a016:	9305      	str	r3, [sp, #20]
 800a018:	1c93      	adds	r3, r2, #2
 800a01a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a01e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a022:	32fe      	adds	r2, #254	; 0xfe
 800a024:	18d1      	adds	r1, r2, r3
 800a026:	461f      	mov	r7, r3
 800a028:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a02c:	9100      	str	r1, [sp, #0]
 800a02e:	2830      	cmp	r0, #48	; 0x30
 800a030:	d0f8      	beq.n	800a024 <__gethex+0x3c>
 800a032:	f7ff ffc3 	bl	8009fbc <__hexdig_fun>
 800a036:	4604      	mov	r4, r0
 800a038:	2800      	cmp	r0, #0
 800a03a:	d13a      	bne.n	800a0b2 <__gethex+0xca>
 800a03c:	9901      	ldr	r1, [sp, #4]
 800a03e:	4652      	mov	r2, sl
 800a040:	4638      	mov	r0, r7
 800a042:	f001 fb8d 	bl	800b760 <strncmp>
 800a046:	4605      	mov	r5, r0
 800a048:	2800      	cmp	r0, #0
 800a04a:	d168      	bne.n	800a11e <__gethex+0x136>
 800a04c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a050:	eb07 060a 	add.w	r6, r7, sl
 800a054:	f7ff ffb2 	bl	8009fbc <__hexdig_fun>
 800a058:	2800      	cmp	r0, #0
 800a05a:	d062      	beq.n	800a122 <__gethex+0x13a>
 800a05c:	4633      	mov	r3, r6
 800a05e:	7818      	ldrb	r0, [r3, #0]
 800a060:	2830      	cmp	r0, #48	; 0x30
 800a062:	461f      	mov	r7, r3
 800a064:	f103 0301 	add.w	r3, r3, #1
 800a068:	d0f9      	beq.n	800a05e <__gethex+0x76>
 800a06a:	f7ff ffa7 	bl	8009fbc <__hexdig_fun>
 800a06e:	2301      	movs	r3, #1
 800a070:	fab0 f480 	clz	r4, r0
 800a074:	0964      	lsrs	r4, r4, #5
 800a076:	4635      	mov	r5, r6
 800a078:	9300      	str	r3, [sp, #0]
 800a07a:	463a      	mov	r2, r7
 800a07c:	4616      	mov	r6, r2
 800a07e:	3201      	adds	r2, #1
 800a080:	7830      	ldrb	r0, [r6, #0]
 800a082:	f7ff ff9b 	bl	8009fbc <__hexdig_fun>
 800a086:	2800      	cmp	r0, #0
 800a088:	d1f8      	bne.n	800a07c <__gethex+0x94>
 800a08a:	9901      	ldr	r1, [sp, #4]
 800a08c:	4652      	mov	r2, sl
 800a08e:	4630      	mov	r0, r6
 800a090:	f001 fb66 	bl	800b760 <strncmp>
 800a094:	b980      	cbnz	r0, 800a0b8 <__gethex+0xd0>
 800a096:	b94d      	cbnz	r5, 800a0ac <__gethex+0xc4>
 800a098:	eb06 050a 	add.w	r5, r6, sl
 800a09c:	462a      	mov	r2, r5
 800a09e:	4616      	mov	r6, r2
 800a0a0:	3201      	adds	r2, #1
 800a0a2:	7830      	ldrb	r0, [r6, #0]
 800a0a4:	f7ff ff8a 	bl	8009fbc <__hexdig_fun>
 800a0a8:	2800      	cmp	r0, #0
 800a0aa:	d1f8      	bne.n	800a09e <__gethex+0xb6>
 800a0ac:	1bad      	subs	r5, r5, r6
 800a0ae:	00ad      	lsls	r5, r5, #2
 800a0b0:	e004      	b.n	800a0bc <__gethex+0xd4>
 800a0b2:	2400      	movs	r4, #0
 800a0b4:	4625      	mov	r5, r4
 800a0b6:	e7e0      	b.n	800a07a <__gethex+0x92>
 800a0b8:	2d00      	cmp	r5, #0
 800a0ba:	d1f7      	bne.n	800a0ac <__gethex+0xc4>
 800a0bc:	7833      	ldrb	r3, [r6, #0]
 800a0be:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a0c2:	2b50      	cmp	r3, #80	; 0x50
 800a0c4:	d13b      	bne.n	800a13e <__gethex+0x156>
 800a0c6:	7873      	ldrb	r3, [r6, #1]
 800a0c8:	2b2b      	cmp	r3, #43	; 0x2b
 800a0ca:	d02c      	beq.n	800a126 <__gethex+0x13e>
 800a0cc:	2b2d      	cmp	r3, #45	; 0x2d
 800a0ce:	d02e      	beq.n	800a12e <__gethex+0x146>
 800a0d0:	1c71      	adds	r1, r6, #1
 800a0d2:	f04f 0900 	mov.w	r9, #0
 800a0d6:	7808      	ldrb	r0, [r1, #0]
 800a0d8:	f7ff ff70 	bl	8009fbc <__hexdig_fun>
 800a0dc:	1e43      	subs	r3, r0, #1
 800a0de:	b2db      	uxtb	r3, r3
 800a0e0:	2b18      	cmp	r3, #24
 800a0e2:	d82c      	bhi.n	800a13e <__gethex+0x156>
 800a0e4:	f1a0 0210 	sub.w	r2, r0, #16
 800a0e8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a0ec:	f7ff ff66 	bl	8009fbc <__hexdig_fun>
 800a0f0:	1e43      	subs	r3, r0, #1
 800a0f2:	b2db      	uxtb	r3, r3
 800a0f4:	2b18      	cmp	r3, #24
 800a0f6:	d91d      	bls.n	800a134 <__gethex+0x14c>
 800a0f8:	f1b9 0f00 	cmp.w	r9, #0
 800a0fc:	d000      	beq.n	800a100 <__gethex+0x118>
 800a0fe:	4252      	negs	r2, r2
 800a100:	4415      	add	r5, r2
 800a102:	f8cb 1000 	str.w	r1, [fp]
 800a106:	b1e4      	cbz	r4, 800a142 <__gethex+0x15a>
 800a108:	9b00      	ldr	r3, [sp, #0]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	bf14      	ite	ne
 800a10e:	2700      	movne	r7, #0
 800a110:	2706      	moveq	r7, #6
 800a112:	4638      	mov	r0, r7
 800a114:	b009      	add	sp, #36	; 0x24
 800a116:	ecbd 8b02 	vpop	{d8}
 800a11a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a11e:	463e      	mov	r6, r7
 800a120:	4625      	mov	r5, r4
 800a122:	2401      	movs	r4, #1
 800a124:	e7ca      	b.n	800a0bc <__gethex+0xd4>
 800a126:	f04f 0900 	mov.w	r9, #0
 800a12a:	1cb1      	adds	r1, r6, #2
 800a12c:	e7d3      	b.n	800a0d6 <__gethex+0xee>
 800a12e:	f04f 0901 	mov.w	r9, #1
 800a132:	e7fa      	b.n	800a12a <__gethex+0x142>
 800a134:	230a      	movs	r3, #10
 800a136:	fb03 0202 	mla	r2, r3, r2, r0
 800a13a:	3a10      	subs	r2, #16
 800a13c:	e7d4      	b.n	800a0e8 <__gethex+0x100>
 800a13e:	4631      	mov	r1, r6
 800a140:	e7df      	b.n	800a102 <__gethex+0x11a>
 800a142:	1bf3      	subs	r3, r6, r7
 800a144:	3b01      	subs	r3, #1
 800a146:	4621      	mov	r1, r4
 800a148:	2b07      	cmp	r3, #7
 800a14a:	dc0b      	bgt.n	800a164 <__gethex+0x17c>
 800a14c:	ee18 0a10 	vmov	r0, s16
 800a150:	f000 fa7e 	bl	800a650 <_Balloc>
 800a154:	4604      	mov	r4, r0
 800a156:	b940      	cbnz	r0, 800a16a <__gethex+0x182>
 800a158:	4b5d      	ldr	r3, [pc, #372]	; (800a2d0 <__gethex+0x2e8>)
 800a15a:	4602      	mov	r2, r0
 800a15c:	21de      	movs	r1, #222	; 0xde
 800a15e:	485d      	ldr	r0, [pc, #372]	; (800a2d4 <__gethex+0x2ec>)
 800a160:	f7ff f82e 	bl	80091c0 <__assert_func>
 800a164:	3101      	adds	r1, #1
 800a166:	105b      	asrs	r3, r3, #1
 800a168:	e7ee      	b.n	800a148 <__gethex+0x160>
 800a16a:	f100 0914 	add.w	r9, r0, #20
 800a16e:	f04f 0b00 	mov.w	fp, #0
 800a172:	f1ca 0301 	rsb	r3, sl, #1
 800a176:	f8cd 9008 	str.w	r9, [sp, #8]
 800a17a:	f8cd b000 	str.w	fp, [sp]
 800a17e:	9306      	str	r3, [sp, #24]
 800a180:	42b7      	cmp	r7, r6
 800a182:	d340      	bcc.n	800a206 <__gethex+0x21e>
 800a184:	9802      	ldr	r0, [sp, #8]
 800a186:	9b00      	ldr	r3, [sp, #0]
 800a188:	f840 3b04 	str.w	r3, [r0], #4
 800a18c:	eba0 0009 	sub.w	r0, r0, r9
 800a190:	1080      	asrs	r0, r0, #2
 800a192:	0146      	lsls	r6, r0, #5
 800a194:	6120      	str	r0, [r4, #16]
 800a196:	4618      	mov	r0, r3
 800a198:	f000 fb4c 	bl	800a834 <__hi0bits>
 800a19c:	1a30      	subs	r0, r6, r0
 800a19e:	f8d8 6000 	ldr.w	r6, [r8]
 800a1a2:	42b0      	cmp	r0, r6
 800a1a4:	dd63      	ble.n	800a26e <__gethex+0x286>
 800a1a6:	1b87      	subs	r7, r0, r6
 800a1a8:	4639      	mov	r1, r7
 800a1aa:	4620      	mov	r0, r4
 800a1ac:	f000 fef0 	bl	800af90 <__any_on>
 800a1b0:	4682      	mov	sl, r0
 800a1b2:	b1a8      	cbz	r0, 800a1e0 <__gethex+0x1f8>
 800a1b4:	1e7b      	subs	r3, r7, #1
 800a1b6:	1159      	asrs	r1, r3, #5
 800a1b8:	f003 021f 	and.w	r2, r3, #31
 800a1bc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a1c0:	f04f 0a01 	mov.w	sl, #1
 800a1c4:	fa0a f202 	lsl.w	r2, sl, r2
 800a1c8:	420a      	tst	r2, r1
 800a1ca:	d009      	beq.n	800a1e0 <__gethex+0x1f8>
 800a1cc:	4553      	cmp	r3, sl
 800a1ce:	dd05      	ble.n	800a1dc <__gethex+0x1f4>
 800a1d0:	1eb9      	subs	r1, r7, #2
 800a1d2:	4620      	mov	r0, r4
 800a1d4:	f000 fedc 	bl	800af90 <__any_on>
 800a1d8:	2800      	cmp	r0, #0
 800a1da:	d145      	bne.n	800a268 <__gethex+0x280>
 800a1dc:	f04f 0a02 	mov.w	sl, #2
 800a1e0:	4639      	mov	r1, r7
 800a1e2:	4620      	mov	r0, r4
 800a1e4:	f7ff fe98 	bl	8009f18 <rshift>
 800a1e8:	443d      	add	r5, r7
 800a1ea:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a1ee:	42ab      	cmp	r3, r5
 800a1f0:	da4c      	bge.n	800a28c <__gethex+0x2a4>
 800a1f2:	ee18 0a10 	vmov	r0, s16
 800a1f6:	4621      	mov	r1, r4
 800a1f8:	f000 fa6a 	bl	800a6d0 <_Bfree>
 800a1fc:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a1fe:	2300      	movs	r3, #0
 800a200:	6013      	str	r3, [r2, #0]
 800a202:	27a3      	movs	r7, #163	; 0xa3
 800a204:	e785      	b.n	800a112 <__gethex+0x12a>
 800a206:	1e73      	subs	r3, r6, #1
 800a208:	9a05      	ldr	r2, [sp, #20]
 800a20a:	9303      	str	r3, [sp, #12]
 800a20c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a210:	4293      	cmp	r3, r2
 800a212:	d019      	beq.n	800a248 <__gethex+0x260>
 800a214:	f1bb 0f20 	cmp.w	fp, #32
 800a218:	d107      	bne.n	800a22a <__gethex+0x242>
 800a21a:	9b02      	ldr	r3, [sp, #8]
 800a21c:	9a00      	ldr	r2, [sp, #0]
 800a21e:	f843 2b04 	str.w	r2, [r3], #4
 800a222:	9302      	str	r3, [sp, #8]
 800a224:	2300      	movs	r3, #0
 800a226:	9300      	str	r3, [sp, #0]
 800a228:	469b      	mov	fp, r3
 800a22a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a22e:	f7ff fec5 	bl	8009fbc <__hexdig_fun>
 800a232:	9b00      	ldr	r3, [sp, #0]
 800a234:	f000 000f 	and.w	r0, r0, #15
 800a238:	fa00 f00b 	lsl.w	r0, r0, fp
 800a23c:	4303      	orrs	r3, r0
 800a23e:	9300      	str	r3, [sp, #0]
 800a240:	f10b 0b04 	add.w	fp, fp, #4
 800a244:	9b03      	ldr	r3, [sp, #12]
 800a246:	e00d      	b.n	800a264 <__gethex+0x27c>
 800a248:	9b03      	ldr	r3, [sp, #12]
 800a24a:	9a06      	ldr	r2, [sp, #24]
 800a24c:	4413      	add	r3, r2
 800a24e:	42bb      	cmp	r3, r7
 800a250:	d3e0      	bcc.n	800a214 <__gethex+0x22c>
 800a252:	4618      	mov	r0, r3
 800a254:	9901      	ldr	r1, [sp, #4]
 800a256:	9307      	str	r3, [sp, #28]
 800a258:	4652      	mov	r2, sl
 800a25a:	f001 fa81 	bl	800b760 <strncmp>
 800a25e:	9b07      	ldr	r3, [sp, #28]
 800a260:	2800      	cmp	r0, #0
 800a262:	d1d7      	bne.n	800a214 <__gethex+0x22c>
 800a264:	461e      	mov	r6, r3
 800a266:	e78b      	b.n	800a180 <__gethex+0x198>
 800a268:	f04f 0a03 	mov.w	sl, #3
 800a26c:	e7b8      	b.n	800a1e0 <__gethex+0x1f8>
 800a26e:	da0a      	bge.n	800a286 <__gethex+0x29e>
 800a270:	1a37      	subs	r7, r6, r0
 800a272:	4621      	mov	r1, r4
 800a274:	ee18 0a10 	vmov	r0, s16
 800a278:	463a      	mov	r2, r7
 800a27a:	f000 fc45 	bl	800ab08 <__lshift>
 800a27e:	1bed      	subs	r5, r5, r7
 800a280:	4604      	mov	r4, r0
 800a282:	f100 0914 	add.w	r9, r0, #20
 800a286:	f04f 0a00 	mov.w	sl, #0
 800a28a:	e7ae      	b.n	800a1ea <__gethex+0x202>
 800a28c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a290:	42a8      	cmp	r0, r5
 800a292:	dd72      	ble.n	800a37a <__gethex+0x392>
 800a294:	1b45      	subs	r5, r0, r5
 800a296:	42ae      	cmp	r6, r5
 800a298:	dc36      	bgt.n	800a308 <__gethex+0x320>
 800a29a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a29e:	2b02      	cmp	r3, #2
 800a2a0:	d02a      	beq.n	800a2f8 <__gethex+0x310>
 800a2a2:	2b03      	cmp	r3, #3
 800a2a4:	d02c      	beq.n	800a300 <__gethex+0x318>
 800a2a6:	2b01      	cmp	r3, #1
 800a2a8:	d11c      	bne.n	800a2e4 <__gethex+0x2fc>
 800a2aa:	42ae      	cmp	r6, r5
 800a2ac:	d11a      	bne.n	800a2e4 <__gethex+0x2fc>
 800a2ae:	2e01      	cmp	r6, #1
 800a2b0:	d112      	bne.n	800a2d8 <__gethex+0x2f0>
 800a2b2:	9a04      	ldr	r2, [sp, #16]
 800a2b4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a2b8:	6013      	str	r3, [r2, #0]
 800a2ba:	2301      	movs	r3, #1
 800a2bc:	6123      	str	r3, [r4, #16]
 800a2be:	f8c9 3000 	str.w	r3, [r9]
 800a2c2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a2c4:	2762      	movs	r7, #98	; 0x62
 800a2c6:	601c      	str	r4, [r3, #0]
 800a2c8:	e723      	b.n	800a112 <__gethex+0x12a>
 800a2ca:	bf00      	nop
 800a2cc:	0800c470 	.word	0x0800c470
 800a2d0:	0800c3f9 	.word	0x0800c3f9
 800a2d4:	0800c40a 	.word	0x0800c40a
 800a2d8:	1e71      	subs	r1, r6, #1
 800a2da:	4620      	mov	r0, r4
 800a2dc:	f000 fe58 	bl	800af90 <__any_on>
 800a2e0:	2800      	cmp	r0, #0
 800a2e2:	d1e6      	bne.n	800a2b2 <__gethex+0x2ca>
 800a2e4:	ee18 0a10 	vmov	r0, s16
 800a2e8:	4621      	mov	r1, r4
 800a2ea:	f000 f9f1 	bl	800a6d0 <_Bfree>
 800a2ee:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a2f0:	2300      	movs	r3, #0
 800a2f2:	6013      	str	r3, [r2, #0]
 800a2f4:	2750      	movs	r7, #80	; 0x50
 800a2f6:	e70c      	b.n	800a112 <__gethex+0x12a>
 800a2f8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a2fa:	2b00      	cmp	r3, #0
 800a2fc:	d1f2      	bne.n	800a2e4 <__gethex+0x2fc>
 800a2fe:	e7d8      	b.n	800a2b2 <__gethex+0x2ca>
 800a300:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a302:	2b00      	cmp	r3, #0
 800a304:	d1d5      	bne.n	800a2b2 <__gethex+0x2ca>
 800a306:	e7ed      	b.n	800a2e4 <__gethex+0x2fc>
 800a308:	1e6f      	subs	r7, r5, #1
 800a30a:	f1ba 0f00 	cmp.w	sl, #0
 800a30e:	d131      	bne.n	800a374 <__gethex+0x38c>
 800a310:	b127      	cbz	r7, 800a31c <__gethex+0x334>
 800a312:	4639      	mov	r1, r7
 800a314:	4620      	mov	r0, r4
 800a316:	f000 fe3b 	bl	800af90 <__any_on>
 800a31a:	4682      	mov	sl, r0
 800a31c:	117b      	asrs	r3, r7, #5
 800a31e:	2101      	movs	r1, #1
 800a320:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a324:	f007 071f 	and.w	r7, r7, #31
 800a328:	fa01 f707 	lsl.w	r7, r1, r7
 800a32c:	421f      	tst	r7, r3
 800a32e:	4629      	mov	r1, r5
 800a330:	4620      	mov	r0, r4
 800a332:	bf18      	it	ne
 800a334:	f04a 0a02 	orrne.w	sl, sl, #2
 800a338:	1b76      	subs	r6, r6, r5
 800a33a:	f7ff fded 	bl	8009f18 <rshift>
 800a33e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a342:	2702      	movs	r7, #2
 800a344:	f1ba 0f00 	cmp.w	sl, #0
 800a348:	d048      	beq.n	800a3dc <__gethex+0x3f4>
 800a34a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a34e:	2b02      	cmp	r3, #2
 800a350:	d015      	beq.n	800a37e <__gethex+0x396>
 800a352:	2b03      	cmp	r3, #3
 800a354:	d017      	beq.n	800a386 <__gethex+0x39e>
 800a356:	2b01      	cmp	r3, #1
 800a358:	d109      	bne.n	800a36e <__gethex+0x386>
 800a35a:	f01a 0f02 	tst.w	sl, #2
 800a35e:	d006      	beq.n	800a36e <__gethex+0x386>
 800a360:	f8d9 0000 	ldr.w	r0, [r9]
 800a364:	ea4a 0a00 	orr.w	sl, sl, r0
 800a368:	f01a 0f01 	tst.w	sl, #1
 800a36c:	d10e      	bne.n	800a38c <__gethex+0x3a4>
 800a36e:	f047 0710 	orr.w	r7, r7, #16
 800a372:	e033      	b.n	800a3dc <__gethex+0x3f4>
 800a374:	f04f 0a01 	mov.w	sl, #1
 800a378:	e7d0      	b.n	800a31c <__gethex+0x334>
 800a37a:	2701      	movs	r7, #1
 800a37c:	e7e2      	b.n	800a344 <__gethex+0x35c>
 800a37e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a380:	f1c3 0301 	rsb	r3, r3, #1
 800a384:	9315      	str	r3, [sp, #84]	; 0x54
 800a386:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a388:	2b00      	cmp	r3, #0
 800a38a:	d0f0      	beq.n	800a36e <__gethex+0x386>
 800a38c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a390:	f104 0314 	add.w	r3, r4, #20
 800a394:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a398:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a39c:	f04f 0c00 	mov.w	ip, #0
 800a3a0:	4618      	mov	r0, r3
 800a3a2:	f853 2b04 	ldr.w	r2, [r3], #4
 800a3a6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a3aa:	d01c      	beq.n	800a3e6 <__gethex+0x3fe>
 800a3ac:	3201      	adds	r2, #1
 800a3ae:	6002      	str	r2, [r0, #0]
 800a3b0:	2f02      	cmp	r7, #2
 800a3b2:	f104 0314 	add.w	r3, r4, #20
 800a3b6:	d13f      	bne.n	800a438 <__gethex+0x450>
 800a3b8:	f8d8 2000 	ldr.w	r2, [r8]
 800a3bc:	3a01      	subs	r2, #1
 800a3be:	42b2      	cmp	r2, r6
 800a3c0:	d10a      	bne.n	800a3d8 <__gethex+0x3f0>
 800a3c2:	1171      	asrs	r1, r6, #5
 800a3c4:	2201      	movs	r2, #1
 800a3c6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a3ca:	f006 061f 	and.w	r6, r6, #31
 800a3ce:	fa02 f606 	lsl.w	r6, r2, r6
 800a3d2:	421e      	tst	r6, r3
 800a3d4:	bf18      	it	ne
 800a3d6:	4617      	movne	r7, r2
 800a3d8:	f047 0720 	orr.w	r7, r7, #32
 800a3dc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a3de:	601c      	str	r4, [r3, #0]
 800a3e0:	9b04      	ldr	r3, [sp, #16]
 800a3e2:	601d      	str	r5, [r3, #0]
 800a3e4:	e695      	b.n	800a112 <__gethex+0x12a>
 800a3e6:	4299      	cmp	r1, r3
 800a3e8:	f843 cc04 	str.w	ip, [r3, #-4]
 800a3ec:	d8d8      	bhi.n	800a3a0 <__gethex+0x3b8>
 800a3ee:	68a3      	ldr	r3, [r4, #8]
 800a3f0:	459b      	cmp	fp, r3
 800a3f2:	db19      	blt.n	800a428 <__gethex+0x440>
 800a3f4:	6861      	ldr	r1, [r4, #4]
 800a3f6:	ee18 0a10 	vmov	r0, s16
 800a3fa:	3101      	adds	r1, #1
 800a3fc:	f000 f928 	bl	800a650 <_Balloc>
 800a400:	4681      	mov	r9, r0
 800a402:	b918      	cbnz	r0, 800a40c <__gethex+0x424>
 800a404:	4b1a      	ldr	r3, [pc, #104]	; (800a470 <__gethex+0x488>)
 800a406:	4602      	mov	r2, r0
 800a408:	2184      	movs	r1, #132	; 0x84
 800a40a:	e6a8      	b.n	800a15e <__gethex+0x176>
 800a40c:	6922      	ldr	r2, [r4, #16]
 800a40e:	3202      	adds	r2, #2
 800a410:	f104 010c 	add.w	r1, r4, #12
 800a414:	0092      	lsls	r2, r2, #2
 800a416:	300c      	adds	r0, #12
 800a418:	f000 f90c 	bl	800a634 <memcpy>
 800a41c:	4621      	mov	r1, r4
 800a41e:	ee18 0a10 	vmov	r0, s16
 800a422:	f000 f955 	bl	800a6d0 <_Bfree>
 800a426:	464c      	mov	r4, r9
 800a428:	6923      	ldr	r3, [r4, #16]
 800a42a:	1c5a      	adds	r2, r3, #1
 800a42c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a430:	6122      	str	r2, [r4, #16]
 800a432:	2201      	movs	r2, #1
 800a434:	615a      	str	r2, [r3, #20]
 800a436:	e7bb      	b.n	800a3b0 <__gethex+0x3c8>
 800a438:	6922      	ldr	r2, [r4, #16]
 800a43a:	455a      	cmp	r2, fp
 800a43c:	dd0b      	ble.n	800a456 <__gethex+0x46e>
 800a43e:	2101      	movs	r1, #1
 800a440:	4620      	mov	r0, r4
 800a442:	f7ff fd69 	bl	8009f18 <rshift>
 800a446:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a44a:	3501      	adds	r5, #1
 800a44c:	42ab      	cmp	r3, r5
 800a44e:	f6ff aed0 	blt.w	800a1f2 <__gethex+0x20a>
 800a452:	2701      	movs	r7, #1
 800a454:	e7c0      	b.n	800a3d8 <__gethex+0x3f0>
 800a456:	f016 061f 	ands.w	r6, r6, #31
 800a45a:	d0fa      	beq.n	800a452 <__gethex+0x46a>
 800a45c:	4453      	add	r3, sl
 800a45e:	f1c6 0620 	rsb	r6, r6, #32
 800a462:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a466:	f000 f9e5 	bl	800a834 <__hi0bits>
 800a46a:	42b0      	cmp	r0, r6
 800a46c:	dbe7      	blt.n	800a43e <__gethex+0x456>
 800a46e:	e7f0      	b.n	800a452 <__gethex+0x46a>
 800a470:	0800c3f9 	.word	0x0800c3f9

0800a474 <L_shift>:
 800a474:	f1c2 0208 	rsb	r2, r2, #8
 800a478:	0092      	lsls	r2, r2, #2
 800a47a:	b570      	push	{r4, r5, r6, lr}
 800a47c:	f1c2 0620 	rsb	r6, r2, #32
 800a480:	6843      	ldr	r3, [r0, #4]
 800a482:	6804      	ldr	r4, [r0, #0]
 800a484:	fa03 f506 	lsl.w	r5, r3, r6
 800a488:	432c      	orrs	r4, r5
 800a48a:	40d3      	lsrs	r3, r2
 800a48c:	6004      	str	r4, [r0, #0]
 800a48e:	f840 3f04 	str.w	r3, [r0, #4]!
 800a492:	4288      	cmp	r0, r1
 800a494:	d3f4      	bcc.n	800a480 <L_shift+0xc>
 800a496:	bd70      	pop	{r4, r5, r6, pc}

0800a498 <__match>:
 800a498:	b530      	push	{r4, r5, lr}
 800a49a:	6803      	ldr	r3, [r0, #0]
 800a49c:	3301      	adds	r3, #1
 800a49e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4a2:	b914      	cbnz	r4, 800a4aa <__match+0x12>
 800a4a4:	6003      	str	r3, [r0, #0]
 800a4a6:	2001      	movs	r0, #1
 800a4a8:	bd30      	pop	{r4, r5, pc}
 800a4aa:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a4ae:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a4b2:	2d19      	cmp	r5, #25
 800a4b4:	bf98      	it	ls
 800a4b6:	3220      	addls	r2, #32
 800a4b8:	42a2      	cmp	r2, r4
 800a4ba:	d0f0      	beq.n	800a49e <__match+0x6>
 800a4bc:	2000      	movs	r0, #0
 800a4be:	e7f3      	b.n	800a4a8 <__match+0x10>

0800a4c0 <__hexnan>:
 800a4c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a4c4:	680b      	ldr	r3, [r1, #0]
 800a4c6:	115e      	asrs	r6, r3, #5
 800a4c8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a4cc:	f013 031f 	ands.w	r3, r3, #31
 800a4d0:	b087      	sub	sp, #28
 800a4d2:	bf18      	it	ne
 800a4d4:	3604      	addne	r6, #4
 800a4d6:	2500      	movs	r5, #0
 800a4d8:	1f37      	subs	r7, r6, #4
 800a4da:	4690      	mov	r8, r2
 800a4dc:	6802      	ldr	r2, [r0, #0]
 800a4de:	9301      	str	r3, [sp, #4]
 800a4e0:	4682      	mov	sl, r0
 800a4e2:	f846 5c04 	str.w	r5, [r6, #-4]
 800a4e6:	46b9      	mov	r9, r7
 800a4e8:	463c      	mov	r4, r7
 800a4ea:	9502      	str	r5, [sp, #8]
 800a4ec:	46ab      	mov	fp, r5
 800a4ee:	7851      	ldrb	r1, [r2, #1]
 800a4f0:	1c53      	adds	r3, r2, #1
 800a4f2:	9303      	str	r3, [sp, #12]
 800a4f4:	b341      	cbz	r1, 800a548 <__hexnan+0x88>
 800a4f6:	4608      	mov	r0, r1
 800a4f8:	9205      	str	r2, [sp, #20]
 800a4fa:	9104      	str	r1, [sp, #16]
 800a4fc:	f7ff fd5e 	bl	8009fbc <__hexdig_fun>
 800a500:	2800      	cmp	r0, #0
 800a502:	d14f      	bne.n	800a5a4 <__hexnan+0xe4>
 800a504:	9904      	ldr	r1, [sp, #16]
 800a506:	9a05      	ldr	r2, [sp, #20]
 800a508:	2920      	cmp	r1, #32
 800a50a:	d818      	bhi.n	800a53e <__hexnan+0x7e>
 800a50c:	9b02      	ldr	r3, [sp, #8]
 800a50e:	459b      	cmp	fp, r3
 800a510:	dd13      	ble.n	800a53a <__hexnan+0x7a>
 800a512:	454c      	cmp	r4, r9
 800a514:	d206      	bcs.n	800a524 <__hexnan+0x64>
 800a516:	2d07      	cmp	r5, #7
 800a518:	dc04      	bgt.n	800a524 <__hexnan+0x64>
 800a51a:	462a      	mov	r2, r5
 800a51c:	4649      	mov	r1, r9
 800a51e:	4620      	mov	r0, r4
 800a520:	f7ff ffa8 	bl	800a474 <L_shift>
 800a524:	4544      	cmp	r4, r8
 800a526:	d950      	bls.n	800a5ca <__hexnan+0x10a>
 800a528:	2300      	movs	r3, #0
 800a52a:	f1a4 0904 	sub.w	r9, r4, #4
 800a52e:	f844 3c04 	str.w	r3, [r4, #-4]
 800a532:	f8cd b008 	str.w	fp, [sp, #8]
 800a536:	464c      	mov	r4, r9
 800a538:	461d      	mov	r5, r3
 800a53a:	9a03      	ldr	r2, [sp, #12]
 800a53c:	e7d7      	b.n	800a4ee <__hexnan+0x2e>
 800a53e:	2929      	cmp	r1, #41	; 0x29
 800a540:	d156      	bne.n	800a5f0 <__hexnan+0x130>
 800a542:	3202      	adds	r2, #2
 800a544:	f8ca 2000 	str.w	r2, [sl]
 800a548:	f1bb 0f00 	cmp.w	fp, #0
 800a54c:	d050      	beq.n	800a5f0 <__hexnan+0x130>
 800a54e:	454c      	cmp	r4, r9
 800a550:	d206      	bcs.n	800a560 <__hexnan+0xa0>
 800a552:	2d07      	cmp	r5, #7
 800a554:	dc04      	bgt.n	800a560 <__hexnan+0xa0>
 800a556:	462a      	mov	r2, r5
 800a558:	4649      	mov	r1, r9
 800a55a:	4620      	mov	r0, r4
 800a55c:	f7ff ff8a 	bl	800a474 <L_shift>
 800a560:	4544      	cmp	r4, r8
 800a562:	d934      	bls.n	800a5ce <__hexnan+0x10e>
 800a564:	f1a8 0204 	sub.w	r2, r8, #4
 800a568:	4623      	mov	r3, r4
 800a56a:	f853 1b04 	ldr.w	r1, [r3], #4
 800a56e:	f842 1f04 	str.w	r1, [r2, #4]!
 800a572:	429f      	cmp	r7, r3
 800a574:	d2f9      	bcs.n	800a56a <__hexnan+0xaa>
 800a576:	1b3b      	subs	r3, r7, r4
 800a578:	f023 0303 	bic.w	r3, r3, #3
 800a57c:	3304      	adds	r3, #4
 800a57e:	3401      	adds	r4, #1
 800a580:	3e03      	subs	r6, #3
 800a582:	42b4      	cmp	r4, r6
 800a584:	bf88      	it	hi
 800a586:	2304      	movhi	r3, #4
 800a588:	4443      	add	r3, r8
 800a58a:	2200      	movs	r2, #0
 800a58c:	f843 2b04 	str.w	r2, [r3], #4
 800a590:	429f      	cmp	r7, r3
 800a592:	d2fb      	bcs.n	800a58c <__hexnan+0xcc>
 800a594:	683b      	ldr	r3, [r7, #0]
 800a596:	b91b      	cbnz	r3, 800a5a0 <__hexnan+0xe0>
 800a598:	4547      	cmp	r7, r8
 800a59a:	d127      	bne.n	800a5ec <__hexnan+0x12c>
 800a59c:	2301      	movs	r3, #1
 800a59e:	603b      	str	r3, [r7, #0]
 800a5a0:	2005      	movs	r0, #5
 800a5a2:	e026      	b.n	800a5f2 <__hexnan+0x132>
 800a5a4:	3501      	adds	r5, #1
 800a5a6:	2d08      	cmp	r5, #8
 800a5a8:	f10b 0b01 	add.w	fp, fp, #1
 800a5ac:	dd06      	ble.n	800a5bc <__hexnan+0xfc>
 800a5ae:	4544      	cmp	r4, r8
 800a5b0:	d9c3      	bls.n	800a53a <__hexnan+0x7a>
 800a5b2:	2300      	movs	r3, #0
 800a5b4:	f844 3c04 	str.w	r3, [r4, #-4]
 800a5b8:	2501      	movs	r5, #1
 800a5ba:	3c04      	subs	r4, #4
 800a5bc:	6822      	ldr	r2, [r4, #0]
 800a5be:	f000 000f 	and.w	r0, r0, #15
 800a5c2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a5c6:	6022      	str	r2, [r4, #0]
 800a5c8:	e7b7      	b.n	800a53a <__hexnan+0x7a>
 800a5ca:	2508      	movs	r5, #8
 800a5cc:	e7b5      	b.n	800a53a <__hexnan+0x7a>
 800a5ce:	9b01      	ldr	r3, [sp, #4]
 800a5d0:	2b00      	cmp	r3, #0
 800a5d2:	d0df      	beq.n	800a594 <__hexnan+0xd4>
 800a5d4:	f04f 32ff 	mov.w	r2, #4294967295
 800a5d8:	f1c3 0320 	rsb	r3, r3, #32
 800a5dc:	fa22 f303 	lsr.w	r3, r2, r3
 800a5e0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a5e4:	401a      	ands	r2, r3
 800a5e6:	f846 2c04 	str.w	r2, [r6, #-4]
 800a5ea:	e7d3      	b.n	800a594 <__hexnan+0xd4>
 800a5ec:	3f04      	subs	r7, #4
 800a5ee:	e7d1      	b.n	800a594 <__hexnan+0xd4>
 800a5f0:	2004      	movs	r0, #4
 800a5f2:	b007      	add	sp, #28
 800a5f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a5f8 <_localeconv_r>:
 800a5f8:	4800      	ldr	r0, [pc, #0]	; (800a5fc <_localeconv_r+0x4>)
 800a5fa:	4770      	bx	lr
 800a5fc:	20000178 	.word	0x20000178

0800a600 <malloc>:
 800a600:	4b02      	ldr	r3, [pc, #8]	; (800a60c <malloc+0xc>)
 800a602:	4601      	mov	r1, r0
 800a604:	6818      	ldr	r0, [r3, #0]
 800a606:	f000 bd67 	b.w	800b0d8 <_malloc_r>
 800a60a:	bf00      	nop
 800a60c:	20000020 	.word	0x20000020

0800a610 <__ascii_mbtowc>:
 800a610:	b082      	sub	sp, #8
 800a612:	b901      	cbnz	r1, 800a616 <__ascii_mbtowc+0x6>
 800a614:	a901      	add	r1, sp, #4
 800a616:	b142      	cbz	r2, 800a62a <__ascii_mbtowc+0x1a>
 800a618:	b14b      	cbz	r3, 800a62e <__ascii_mbtowc+0x1e>
 800a61a:	7813      	ldrb	r3, [r2, #0]
 800a61c:	600b      	str	r3, [r1, #0]
 800a61e:	7812      	ldrb	r2, [r2, #0]
 800a620:	1e10      	subs	r0, r2, #0
 800a622:	bf18      	it	ne
 800a624:	2001      	movne	r0, #1
 800a626:	b002      	add	sp, #8
 800a628:	4770      	bx	lr
 800a62a:	4610      	mov	r0, r2
 800a62c:	e7fb      	b.n	800a626 <__ascii_mbtowc+0x16>
 800a62e:	f06f 0001 	mvn.w	r0, #1
 800a632:	e7f8      	b.n	800a626 <__ascii_mbtowc+0x16>

0800a634 <memcpy>:
 800a634:	440a      	add	r2, r1
 800a636:	4291      	cmp	r1, r2
 800a638:	f100 33ff 	add.w	r3, r0, #4294967295
 800a63c:	d100      	bne.n	800a640 <memcpy+0xc>
 800a63e:	4770      	bx	lr
 800a640:	b510      	push	{r4, lr}
 800a642:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a646:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a64a:	4291      	cmp	r1, r2
 800a64c:	d1f9      	bne.n	800a642 <memcpy+0xe>
 800a64e:	bd10      	pop	{r4, pc}

0800a650 <_Balloc>:
 800a650:	b570      	push	{r4, r5, r6, lr}
 800a652:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a654:	4604      	mov	r4, r0
 800a656:	460d      	mov	r5, r1
 800a658:	b976      	cbnz	r6, 800a678 <_Balloc+0x28>
 800a65a:	2010      	movs	r0, #16
 800a65c:	f7ff ffd0 	bl	800a600 <malloc>
 800a660:	4602      	mov	r2, r0
 800a662:	6260      	str	r0, [r4, #36]	; 0x24
 800a664:	b920      	cbnz	r0, 800a670 <_Balloc+0x20>
 800a666:	4b18      	ldr	r3, [pc, #96]	; (800a6c8 <_Balloc+0x78>)
 800a668:	4818      	ldr	r0, [pc, #96]	; (800a6cc <_Balloc+0x7c>)
 800a66a:	2166      	movs	r1, #102	; 0x66
 800a66c:	f7fe fda8 	bl	80091c0 <__assert_func>
 800a670:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a674:	6006      	str	r6, [r0, #0]
 800a676:	60c6      	str	r6, [r0, #12]
 800a678:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a67a:	68f3      	ldr	r3, [r6, #12]
 800a67c:	b183      	cbz	r3, 800a6a0 <_Balloc+0x50>
 800a67e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a680:	68db      	ldr	r3, [r3, #12]
 800a682:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a686:	b9b8      	cbnz	r0, 800a6b8 <_Balloc+0x68>
 800a688:	2101      	movs	r1, #1
 800a68a:	fa01 f605 	lsl.w	r6, r1, r5
 800a68e:	1d72      	adds	r2, r6, #5
 800a690:	0092      	lsls	r2, r2, #2
 800a692:	4620      	mov	r0, r4
 800a694:	f000 fc9d 	bl	800afd2 <_calloc_r>
 800a698:	b160      	cbz	r0, 800a6b4 <_Balloc+0x64>
 800a69a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a69e:	e00e      	b.n	800a6be <_Balloc+0x6e>
 800a6a0:	2221      	movs	r2, #33	; 0x21
 800a6a2:	2104      	movs	r1, #4
 800a6a4:	4620      	mov	r0, r4
 800a6a6:	f000 fc94 	bl	800afd2 <_calloc_r>
 800a6aa:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a6ac:	60f0      	str	r0, [r6, #12]
 800a6ae:	68db      	ldr	r3, [r3, #12]
 800a6b0:	2b00      	cmp	r3, #0
 800a6b2:	d1e4      	bne.n	800a67e <_Balloc+0x2e>
 800a6b4:	2000      	movs	r0, #0
 800a6b6:	bd70      	pop	{r4, r5, r6, pc}
 800a6b8:	6802      	ldr	r2, [r0, #0]
 800a6ba:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800a6be:	2300      	movs	r3, #0
 800a6c0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800a6c4:	e7f7      	b.n	800a6b6 <_Balloc+0x66>
 800a6c6:	bf00      	nop
 800a6c8:	0800c1e0 	.word	0x0800c1e0
 800a6cc:	0800c484 	.word	0x0800c484

0800a6d0 <_Bfree>:
 800a6d0:	b570      	push	{r4, r5, r6, lr}
 800a6d2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a6d4:	4605      	mov	r5, r0
 800a6d6:	460c      	mov	r4, r1
 800a6d8:	b976      	cbnz	r6, 800a6f8 <_Bfree+0x28>
 800a6da:	2010      	movs	r0, #16
 800a6dc:	f7ff ff90 	bl	800a600 <malloc>
 800a6e0:	4602      	mov	r2, r0
 800a6e2:	6268      	str	r0, [r5, #36]	; 0x24
 800a6e4:	b920      	cbnz	r0, 800a6f0 <_Bfree+0x20>
 800a6e6:	4b09      	ldr	r3, [pc, #36]	; (800a70c <_Bfree+0x3c>)
 800a6e8:	4809      	ldr	r0, [pc, #36]	; (800a710 <_Bfree+0x40>)
 800a6ea:	218a      	movs	r1, #138	; 0x8a
 800a6ec:	f7fe fd68 	bl	80091c0 <__assert_func>
 800a6f0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a6f4:	6006      	str	r6, [r0, #0]
 800a6f6:	60c6      	str	r6, [r0, #12]
 800a6f8:	b13c      	cbz	r4, 800a70a <_Bfree+0x3a>
 800a6fa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800a6fc:	6862      	ldr	r2, [r4, #4]
 800a6fe:	68db      	ldr	r3, [r3, #12]
 800a700:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800a704:	6021      	str	r1, [r4, #0]
 800a706:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800a70a:	bd70      	pop	{r4, r5, r6, pc}
 800a70c:	0800c1e0 	.word	0x0800c1e0
 800a710:	0800c484 	.word	0x0800c484

0800a714 <__multadd>:
 800a714:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a718:	690d      	ldr	r5, [r1, #16]
 800a71a:	4607      	mov	r7, r0
 800a71c:	460c      	mov	r4, r1
 800a71e:	461e      	mov	r6, r3
 800a720:	f101 0c14 	add.w	ip, r1, #20
 800a724:	2000      	movs	r0, #0
 800a726:	f8dc 3000 	ldr.w	r3, [ip]
 800a72a:	b299      	uxth	r1, r3
 800a72c:	fb02 6101 	mla	r1, r2, r1, r6
 800a730:	0c1e      	lsrs	r6, r3, #16
 800a732:	0c0b      	lsrs	r3, r1, #16
 800a734:	fb02 3306 	mla	r3, r2, r6, r3
 800a738:	b289      	uxth	r1, r1
 800a73a:	3001      	adds	r0, #1
 800a73c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800a740:	4285      	cmp	r5, r0
 800a742:	f84c 1b04 	str.w	r1, [ip], #4
 800a746:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800a74a:	dcec      	bgt.n	800a726 <__multadd+0x12>
 800a74c:	b30e      	cbz	r6, 800a792 <__multadd+0x7e>
 800a74e:	68a3      	ldr	r3, [r4, #8]
 800a750:	42ab      	cmp	r3, r5
 800a752:	dc19      	bgt.n	800a788 <__multadd+0x74>
 800a754:	6861      	ldr	r1, [r4, #4]
 800a756:	4638      	mov	r0, r7
 800a758:	3101      	adds	r1, #1
 800a75a:	f7ff ff79 	bl	800a650 <_Balloc>
 800a75e:	4680      	mov	r8, r0
 800a760:	b928      	cbnz	r0, 800a76e <__multadd+0x5a>
 800a762:	4602      	mov	r2, r0
 800a764:	4b0c      	ldr	r3, [pc, #48]	; (800a798 <__multadd+0x84>)
 800a766:	480d      	ldr	r0, [pc, #52]	; (800a79c <__multadd+0x88>)
 800a768:	21b5      	movs	r1, #181	; 0xb5
 800a76a:	f7fe fd29 	bl	80091c0 <__assert_func>
 800a76e:	6922      	ldr	r2, [r4, #16]
 800a770:	3202      	adds	r2, #2
 800a772:	f104 010c 	add.w	r1, r4, #12
 800a776:	0092      	lsls	r2, r2, #2
 800a778:	300c      	adds	r0, #12
 800a77a:	f7ff ff5b 	bl	800a634 <memcpy>
 800a77e:	4621      	mov	r1, r4
 800a780:	4638      	mov	r0, r7
 800a782:	f7ff ffa5 	bl	800a6d0 <_Bfree>
 800a786:	4644      	mov	r4, r8
 800a788:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800a78c:	3501      	adds	r5, #1
 800a78e:	615e      	str	r6, [r3, #20]
 800a790:	6125      	str	r5, [r4, #16]
 800a792:	4620      	mov	r0, r4
 800a794:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a798:	0800c3f9 	.word	0x0800c3f9
 800a79c:	0800c484 	.word	0x0800c484

0800a7a0 <__s2b>:
 800a7a0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800a7a4:	460c      	mov	r4, r1
 800a7a6:	4615      	mov	r5, r2
 800a7a8:	461f      	mov	r7, r3
 800a7aa:	2209      	movs	r2, #9
 800a7ac:	3308      	adds	r3, #8
 800a7ae:	4606      	mov	r6, r0
 800a7b0:	fb93 f3f2 	sdiv	r3, r3, r2
 800a7b4:	2100      	movs	r1, #0
 800a7b6:	2201      	movs	r2, #1
 800a7b8:	429a      	cmp	r2, r3
 800a7ba:	db09      	blt.n	800a7d0 <__s2b+0x30>
 800a7bc:	4630      	mov	r0, r6
 800a7be:	f7ff ff47 	bl	800a650 <_Balloc>
 800a7c2:	b940      	cbnz	r0, 800a7d6 <__s2b+0x36>
 800a7c4:	4602      	mov	r2, r0
 800a7c6:	4b19      	ldr	r3, [pc, #100]	; (800a82c <__s2b+0x8c>)
 800a7c8:	4819      	ldr	r0, [pc, #100]	; (800a830 <__s2b+0x90>)
 800a7ca:	21ce      	movs	r1, #206	; 0xce
 800a7cc:	f7fe fcf8 	bl	80091c0 <__assert_func>
 800a7d0:	0052      	lsls	r2, r2, #1
 800a7d2:	3101      	adds	r1, #1
 800a7d4:	e7f0      	b.n	800a7b8 <__s2b+0x18>
 800a7d6:	9b08      	ldr	r3, [sp, #32]
 800a7d8:	6143      	str	r3, [r0, #20]
 800a7da:	2d09      	cmp	r5, #9
 800a7dc:	f04f 0301 	mov.w	r3, #1
 800a7e0:	6103      	str	r3, [r0, #16]
 800a7e2:	dd16      	ble.n	800a812 <__s2b+0x72>
 800a7e4:	f104 0909 	add.w	r9, r4, #9
 800a7e8:	46c8      	mov	r8, r9
 800a7ea:	442c      	add	r4, r5
 800a7ec:	f818 3b01 	ldrb.w	r3, [r8], #1
 800a7f0:	4601      	mov	r1, r0
 800a7f2:	3b30      	subs	r3, #48	; 0x30
 800a7f4:	220a      	movs	r2, #10
 800a7f6:	4630      	mov	r0, r6
 800a7f8:	f7ff ff8c 	bl	800a714 <__multadd>
 800a7fc:	45a0      	cmp	r8, r4
 800a7fe:	d1f5      	bne.n	800a7ec <__s2b+0x4c>
 800a800:	f1a5 0408 	sub.w	r4, r5, #8
 800a804:	444c      	add	r4, r9
 800a806:	1b2d      	subs	r5, r5, r4
 800a808:	1963      	adds	r3, r4, r5
 800a80a:	42bb      	cmp	r3, r7
 800a80c:	db04      	blt.n	800a818 <__s2b+0x78>
 800a80e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800a812:	340a      	adds	r4, #10
 800a814:	2509      	movs	r5, #9
 800a816:	e7f6      	b.n	800a806 <__s2b+0x66>
 800a818:	f814 3b01 	ldrb.w	r3, [r4], #1
 800a81c:	4601      	mov	r1, r0
 800a81e:	3b30      	subs	r3, #48	; 0x30
 800a820:	220a      	movs	r2, #10
 800a822:	4630      	mov	r0, r6
 800a824:	f7ff ff76 	bl	800a714 <__multadd>
 800a828:	e7ee      	b.n	800a808 <__s2b+0x68>
 800a82a:	bf00      	nop
 800a82c:	0800c3f9 	.word	0x0800c3f9
 800a830:	0800c484 	.word	0x0800c484

0800a834 <__hi0bits>:
 800a834:	0c03      	lsrs	r3, r0, #16
 800a836:	041b      	lsls	r3, r3, #16
 800a838:	b9d3      	cbnz	r3, 800a870 <__hi0bits+0x3c>
 800a83a:	0400      	lsls	r0, r0, #16
 800a83c:	2310      	movs	r3, #16
 800a83e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800a842:	bf04      	itt	eq
 800a844:	0200      	lsleq	r0, r0, #8
 800a846:	3308      	addeq	r3, #8
 800a848:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800a84c:	bf04      	itt	eq
 800a84e:	0100      	lsleq	r0, r0, #4
 800a850:	3304      	addeq	r3, #4
 800a852:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800a856:	bf04      	itt	eq
 800a858:	0080      	lsleq	r0, r0, #2
 800a85a:	3302      	addeq	r3, #2
 800a85c:	2800      	cmp	r0, #0
 800a85e:	db05      	blt.n	800a86c <__hi0bits+0x38>
 800a860:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800a864:	f103 0301 	add.w	r3, r3, #1
 800a868:	bf08      	it	eq
 800a86a:	2320      	moveq	r3, #32
 800a86c:	4618      	mov	r0, r3
 800a86e:	4770      	bx	lr
 800a870:	2300      	movs	r3, #0
 800a872:	e7e4      	b.n	800a83e <__hi0bits+0xa>

0800a874 <__lo0bits>:
 800a874:	6803      	ldr	r3, [r0, #0]
 800a876:	f013 0207 	ands.w	r2, r3, #7
 800a87a:	4601      	mov	r1, r0
 800a87c:	d00b      	beq.n	800a896 <__lo0bits+0x22>
 800a87e:	07da      	lsls	r2, r3, #31
 800a880:	d423      	bmi.n	800a8ca <__lo0bits+0x56>
 800a882:	0798      	lsls	r0, r3, #30
 800a884:	bf49      	itett	mi
 800a886:	085b      	lsrmi	r3, r3, #1
 800a888:	089b      	lsrpl	r3, r3, #2
 800a88a:	2001      	movmi	r0, #1
 800a88c:	600b      	strmi	r3, [r1, #0]
 800a88e:	bf5c      	itt	pl
 800a890:	600b      	strpl	r3, [r1, #0]
 800a892:	2002      	movpl	r0, #2
 800a894:	4770      	bx	lr
 800a896:	b298      	uxth	r0, r3
 800a898:	b9a8      	cbnz	r0, 800a8c6 <__lo0bits+0x52>
 800a89a:	0c1b      	lsrs	r3, r3, #16
 800a89c:	2010      	movs	r0, #16
 800a89e:	b2da      	uxtb	r2, r3
 800a8a0:	b90a      	cbnz	r2, 800a8a6 <__lo0bits+0x32>
 800a8a2:	3008      	adds	r0, #8
 800a8a4:	0a1b      	lsrs	r3, r3, #8
 800a8a6:	071a      	lsls	r2, r3, #28
 800a8a8:	bf04      	itt	eq
 800a8aa:	091b      	lsreq	r3, r3, #4
 800a8ac:	3004      	addeq	r0, #4
 800a8ae:	079a      	lsls	r2, r3, #30
 800a8b0:	bf04      	itt	eq
 800a8b2:	089b      	lsreq	r3, r3, #2
 800a8b4:	3002      	addeq	r0, #2
 800a8b6:	07da      	lsls	r2, r3, #31
 800a8b8:	d403      	bmi.n	800a8c2 <__lo0bits+0x4e>
 800a8ba:	085b      	lsrs	r3, r3, #1
 800a8bc:	f100 0001 	add.w	r0, r0, #1
 800a8c0:	d005      	beq.n	800a8ce <__lo0bits+0x5a>
 800a8c2:	600b      	str	r3, [r1, #0]
 800a8c4:	4770      	bx	lr
 800a8c6:	4610      	mov	r0, r2
 800a8c8:	e7e9      	b.n	800a89e <__lo0bits+0x2a>
 800a8ca:	2000      	movs	r0, #0
 800a8cc:	4770      	bx	lr
 800a8ce:	2020      	movs	r0, #32
 800a8d0:	4770      	bx	lr
	...

0800a8d4 <__i2b>:
 800a8d4:	b510      	push	{r4, lr}
 800a8d6:	460c      	mov	r4, r1
 800a8d8:	2101      	movs	r1, #1
 800a8da:	f7ff feb9 	bl	800a650 <_Balloc>
 800a8de:	4602      	mov	r2, r0
 800a8e0:	b928      	cbnz	r0, 800a8ee <__i2b+0x1a>
 800a8e2:	4b05      	ldr	r3, [pc, #20]	; (800a8f8 <__i2b+0x24>)
 800a8e4:	4805      	ldr	r0, [pc, #20]	; (800a8fc <__i2b+0x28>)
 800a8e6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800a8ea:	f7fe fc69 	bl	80091c0 <__assert_func>
 800a8ee:	2301      	movs	r3, #1
 800a8f0:	6144      	str	r4, [r0, #20]
 800a8f2:	6103      	str	r3, [r0, #16]
 800a8f4:	bd10      	pop	{r4, pc}
 800a8f6:	bf00      	nop
 800a8f8:	0800c3f9 	.word	0x0800c3f9
 800a8fc:	0800c484 	.word	0x0800c484

0800a900 <__multiply>:
 800a900:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a904:	4691      	mov	r9, r2
 800a906:	690a      	ldr	r2, [r1, #16]
 800a908:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800a90c:	429a      	cmp	r2, r3
 800a90e:	bfb8      	it	lt
 800a910:	460b      	movlt	r3, r1
 800a912:	460c      	mov	r4, r1
 800a914:	bfbc      	itt	lt
 800a916:	464c      	movlt	r4, r9
 800a918:	4699      	movlt	r9, r3
 800a91a:	6927      	ldr	r7, [r4, #16]
 800a91c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800a920:	68a3      	ldr	r3, [r4, #8]
 800a922:	6861      	ldr	r1, [r4, #4]
 800a924:	eb07 060a 	add.w	r6, r7, sl
 800a928:	42b3      	cmp	r3, r6
 800a92a:	b085      	sub	sp, #20
 800a92c:	bfb8      	it	lt
 800a92e:	3101      	addlt	r1, #1
 800a930:	f7ff fe8e 	bl	800a650 <_Balloc>
 800a934:	b930      	cbnz	r0, 800a944 <__multiply+0x44>
 800a936:	4602      	mov	r2, r0
 800a938:	4b44      	ldr	r3, [pc, #272]	; (800aa4c <__multiply+0x14c>)
 800a93a:	4845      	ldr	r0, [pc, #276]	; (800aa50 <__multiply+0x150>)
 800a93c:	f240 115d 	movw	r1, #349	; 0x15d
 800a940:	f7fe fc3e 	bl	80091c0 <__assert_func>
 800a944:	f100 0514 	add.w	r5, r0, #20
 800a948:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800a94c:	462b      	mov	r3, r5
 800a94e:	2200      	movs	r2, #0
 800a950:	4543      	cmp	r3, r8
 800a952:	d321      	bcc.n	800a998 <__multiply+0x98>
 800a954:	f104 0314 	add.w	r3, r4, #20
 800a958:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800a95c:	f109 0314 	add.w	r3, r9, #20
 800a960:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800a964:	9202      	str	r2, [sp, #8]
 800a966:	1b3a      	subs	r2, r7, r4
 800a968:	3a15      	subs	r2, #21
 800a96a:	f022 0203 	bic.w	r2, r2, #3
 800a96e:	3204      	adds	r2, #4
 800a970:	f104 0115 	add.w	r1, r4, #21
 800a974:	428f      	cmp	r7, r1
 800a976:	bf38      	it	cc
 800a978:	2204      	movcc	r2, #4
 800a97a:	9201      	str	r2, [sp, #4]
 800a97c:	9a02      	ldr	r2, [sp, #8]
 800a97e:	9303      	str	r3, [sp, #12]
 800a980:	429a      	cmp	r2, r3
 800a982:	d80c      	bhi.n	800a99e <__multiply+0x9e>
 800a984:	2e00      	cmp	r6, #0
 800a986:	dd03      	ble.n	800a990 <__multiply+0x90>
 800a988:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800a98c:	2b00      	cmp	r3, #0
 800a98e:	d05a      	beq.n	800aa46 <__multiply+0x146>
 800a990:	6106      	str	r6, [r0, #16]
 800a992:	b005      	add	sp, #20
 800a994:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a998:	f843 2b04 	str.w	r2, [r3], #4
 800a99c:	e7d8      	b.n	800a950 <__multiply+0x50>
 800a99e:	f8b3 a000 	ldrh.w	sl, [r3]
 800a9a2:	f1ba 0f00 	cmp.w	sl, #0
 800a9a6:	d024      	beq.n	800a9f2 <__multiply+0xf2>
 800a9a8:	f104 0e14 	add.w	lr, r4, #20
 800a9ac:	46a9      	mov	r9, r5
 800a9ae:	f04f 0c00 	mov.w	ip, #0
 800a9b2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800a9b6:	f8d9 1000 	ldr.w	r1, [r9]
 800a9ba:	fa1f fb82 	uxth.w	fp, r2
 800a9be:	b289      	uxth	r1, r1
 800a9c0:	fb0a 110b 	mla	r1, sl, fp, r1
 800a9c4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800a9c8:	f8d9 2000 	ldr.w	r2, [r9]
 800a9cc:	4461      	add	r1, ip
 800a9ce:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9d2:	fb0a c20b 	mla	r2, sl, fp, ip
 800a9d6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800a9da:	b289      	uxth	r1, r1
 800a9dc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800a9e0:	4577      	cmp	r7, lr
 800a9e2:	f849 1b04 	str.w	r1, [r9], #4
 800a9e6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800a9ea:	d8e2      	bhi.n	800a9b2 <__multiply+0xb2>
 800a9ec:	9a01      	ldr	r2, [sp, #4]
 800a9ee:	f845 c002 	str.w	ip, [r5, r2]
 800a9f2:	9a03      	ldr	r2, [sp, #12]
 800a9f4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800a9f8:	3304      	adds	r3, #4
 800a9fa:	f1b9 0f00 	cmp.w	r9, #0
 800a9fe:	d020      	beq.n	800aa42 <__multiply+0x142>
 800aa00:	6829      	ldr	r1, [r5, #0]
 800aa02:	f104 0c14 	add.w	ip, r4, #20
 800aa06:	46ae      	mov	lr, r5
 800aa08:	f04f 0a00 	mov.w	sl, #0
 800aa0c:	f8bc b000 	ldrh.w	fp, [ip]
 800aa10:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800aa14:	fb09 220b 	mla	r2, r9, fp, r2
 800aa18:	4492      	add	sl, r2
 800aa1a:	b289      	uxth	r1, r1
 800aa1c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800aa20:	f84e 1b04 	str.w	r1, [lr], #4
 800aa24:	f85c 2b04 	ldr.w	r2, [ip], #4
 800aa28:	f8be 1000 	ldrh.w	r1, [lr]
 800aa2c:	0c12      	lsrs	r2, r2, #16
 800aa2e:	fb09 1102 	mla	r1, r9, r2, r1
 800aa32:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800aa36:	4567      	cmp	r7, ip
 800aa38:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800aa3c:	d8e6      	bhi.n	800aa0c <__multiply+0x10c>
 800aa3e:	9a01      	ldr	r2, [sp, #4]
 800aa40:	50a9      	str	r1, [r5, r2]
 800aa42:	3504      	adds	r5, #4
 800aa44:	e79a      	b.n	800a97c <__multiply+0x7c>
 800aa46:	3e01      	subs	r6, #1
 800aa48:	e79c      	b.n	800a984 <__multiply+0x84>
 800aa4a:	bf00      	nop
 800aa4c:	0800c3f9 	.word	0x0800c3f9
 800aa50:	0800c484 	.word	0x0800c484

0800aa54 <__pow5mult>:
 800aa54:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aa58:	4615      	mov	r5, r2
 800aa5a:	f012 0203 	ands.w	r2, r2, #3
 800aa5e:	4606      	mov	r6, r0
 800aa60:	460f      	mov	r7, r1
 800aa62:	d007      	beq.n	800aa74 <__pow5mult+0x20>
 800aa64:	4c25      	ldr	r4, [pc, #148]	; (800aafc <__pow5mult+0xa8>)
 800aa66:	3a01      	subs	r2, #1
 800aa68:	2300      	movs	r3, #0
 800aa6a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800aa6e:	f7ff fe51 	bl	800a714 <__multadd>
 800aa72:	4607      	mov	r7, r0
 800aa74:	10ad      	asrs	r5, r5, #2
 800aa76:	d03d      	beq.n	800aaf4 <__pow5mult+0xa0>
 800aa78:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800aa7a:	b97c      	cbnz	r4, 800aa9c <__pow5mult+0x48>
 800aa7c:	2010      	movs	r0, #16
 800aa7e:	f7ff fdbf 	bl	800a600 <malloc>
 800aa82:	4602      	mov	r2, r0
 800aa84:	6270      	str	r0, [r6, #36]	; 0x24
 800aa86:	b928      	cbnz	r0, 800aa94 <__pow5mult+0x40>
 800aa88:	4b1d      	ldr	r3, [pc, #116]	; (800ab00 <__pow5mult+0xac>)
 800aa8a:	481e      	ldr	r0, [pc, #120]	; (800ab04 <__pow5mult+0xb0>)
 800aa8c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800aa90:	f7fe fb96 	bl	80091c0 <__assert_func>
 800aa94:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800aa98:	6004      	str	r4, [r0, #0]
 800aa9a:	60c4      	str	r4, [r0, #12]
 800aa9c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800aaa0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800aaa4:	b94c      	cbnz	r4, 800aaba <__pow5mult+0x66>
 800aaa6:	f240 2171 	movw	r1, #625	; 0x271
 800aaaa:	4630      	mov	r0, r6
 800aaac:	f7ff ff12 	bl	800a8d4 <__i2b>
 800aab0:	2300      	movs	r3, #0
 800aab2:	f8c8 0008 	str.w	r0, [r8, #8]
 800aab6:	4604      	mov	r4, r0
 800aab8:	6003      	str	r3, [r0, #0]
 800aaba:	f04f 0900 	mov.w	r9, #0
 800aabe:	07eb      	lsls	r3, r5, #31
 800aac0:	d50a      	bpl.n	800aad8 <__pow5mult+0x84>
 800aac2:	4639      	mov	r1, r7
 800aac4:	4622      	mov	r2, r4
 800aac6:	4630      	mov	r0, r6
 800aac8:	f7ff ff1a 	bl	800a900 <__multiply>
 800aacc:	4639      	mov	r1, r7
 800aace:	4680      	mov	r8, r0
 800aad0:	4630      	mov	r0, r6
 800aad2:	f7ff fdfd 	bl	800a6d0 <_Bfree>
 800aad6:	4647      	mov	r7, r8
 800aad8:	106d      	asrs	r5, r5, #1
 800aada:	d00b      	beq.n	800aaf4 <__pow5mult+0xa0>
 800aadc:	6820      	ldr	r0, [r4, #0]
 800aade:	b938      	cbnz	r0, 800aaf0 <__pow5mult+0x9c>
 800aae0:	4622      	mov	r2, r4
 800aae2:	4621      	mov	r1, r4
 800aae4:	4630      	mov	r0, r6
 800aae6:	f7ff ff0b 	bl	800a900 <__multiply>
 800aaea:	6020      	str	r0, [r4, #0]
 800aaec:	f8c0 9000 	str.w	r9, [r0]
 800aaf0:	4604      	mov	r4, r0
 800aaf2:	e7e4      	b.n	800aabe <__pow5mult+0x6a>
 800aaf4:	4638      	mov	r0, r7
 800aaf6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800aafa:	bf00      	nop
 800aafc:	0800c5d0 	.word	0x0800c5d0
 800ab00:	0800c1e0 	.word	0x0800c1e0
 800ab04:	0800c484 	.word	0x0800c484

0800ab08 <__lshift>:
 800ab08:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ab0c:	460c      	mov	r4, r1
 800ab0e:	6849      	ldr	r1, [r1, #4]
 800ab10:	6923      	ldr	r3, [r4, #16]
 800ab12:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ab16:	68a3      	ldr	r3, [r4, #8]
 800ab18:	4607      	mov	r7, r0
 800ab1a:	4691      	mov	r9, r2
 800ab1c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ab20:	f108 0601 	add.w	r6, r8, #1
 800ab24:	42b3      	cmp	r3, r6
 800ab26:	db0b      	blt.n	800ab40 <__lshift+0x38>
 800ab28:	4638      	mov	r0, r7
 800ab2a:	f7ff fd91 	bl	800a650 <_Balloc>
 800ab2e:	4605      	mov	r5, r0
 800ab30:	b948      	cbnz	r0, 800ab46 <__lshift+0x3e>
 800ab32:	4602      	mov	r2, r0
 800ab34:	4b2a      	ldr	r3, [pc, #168]	; (800abe0 <__lshift+0xd8>)
 800ab36:	482b      	ldr	r0, [pc, #172]	; (800abe4 <__lshift+0xdc>)
 800ab38:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ab3c:	f7fe fb40 	bl	80091c0 <__assert_func>
 800ab40:	3101      	adds	r1, #1
 800ab42:	005b      	lsls	r3, r3, #1
 800ab44:	e7ee      	b.n	800ab24 <__lshift+0x1c>
 800ab46:	2300      	movs	r3, #0
 800ab48:	f100 0114 	add.w	r1, r0, #20
 800ab4c:	f100 0210 	add.w	r2, r0, #16
 800ab50:	4618      	mov	r0, r3
 800ab52:	4553      	cmp	r3, sl
 800ab54:	db37      	blt.n	800abc6 <__lshift+0xbe>
 800ab56:	6920      	ldr	r0, [r4, #16]
 800ab58:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800ab5c:	f104 0314 	add.w	r3, r4, #20
 800ab60:	f019 091f 	ands.w	r9, r9, #31
 800ab64:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800ab68:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800ab6c:	d02f      	beq.n	800abce <__lshift+0xc6>
 800ab6e:	f1c9 0e20 	rsb	lr, r9, #32
 800ab72:	468a      	mov	sl, r1
 800ab74:	f04f 0c00 	mov.w	ip, #0
 800ab78:	681a      	ldr	r2, [r3, #0]
 800ab7a:	fa02 f209 	lsl.w	r2, r2, r9
 800ab7e:	ea42 020c 	orr.w	r2, r2, ip
 800ab82:	f84a 2b04 	str.w	r2, [sl], #4
 800ab86:	f853 2b04 	ldr.w	r2, [r3], #4
 800ab8a:	4298      	cmp	r0, r3
 800ab8c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800ab90:	d8f2      	bhi.n	800ab78 <__lshift+0x70>
 800ab92:	1b03      	subs	r3, r0, r4
 800ab94:	3b15      	subs	r3, #21
 800ab96:	f023 0303 	bic.w	r3, r3, #3
 800ab9a:	3304      	adds	r3, #4
 800ab9c:	f104 0215 	add.w	r2, r4, #21
 800aba0:	4290      	cmp	r0, r2
 800aba2:	bf38      	it	cc
 800aba4:	2304      	movcc	r3, #4
 800aba6:	f841 c003 	str.w	ip, [r1, r3]
 800abaa:	f1bc 0f00 	cmp.w	ip, #0
 800abae:	d001      	beq.n	800abb4 <__lshift+0xac>
 800abb0:	f108 0602 	add.w	r6, r8, #2
 800abb4:	3e01      	subs	r6, #1
 800abb6:	4638      	mov	r0, r7
 800abb8:	612e      	str	r6, [r5, #16]
 800abba:	4621      	mov	r1, r4
 800abbc:	f7ff fd88 	bl	800a6d0 <_Bfree>
 800abc0:	4628      	mov	r0, r5
 800abc2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800abc6:	f842 0f04 	str.w	r0, [r2, #4]!
 800abca:	3301      	adds	r3, #1
 800abcc:	e7c1      	b.n	800ab52 <__lshift+0x4a>
 800abce:	3904      	subs	r1, #4
 800abd0:	f853 2b04 	ldr.w	r2, [r3], #4
 800abd4:	f841 2f04 	str.w	r2, [r1, #4]!
 800abd8:	4298      	cmp	r0, r3
 800abda:	d8f9      	bhi.n	800abd0 <__lshift+0xc8>
 800abdc:	e7ea      	b.n	800abb4 <__lshift+0xac>
 800abde:	bf00      	nop
 800abe0:	0800c3f9 	.word	0x0800c3f9
 800abe4:	0800c484 	.word	0x0800c484

0800abe8 <__mcmp>:
 800abe8:	b530      	push	{r4, r5, lr}
 800abea:	6902      	ldr	r2, [r0, #16]
 800abec:	690c      	ldr	r4, [r1, #16]
 800abee:	1b12      	subs	r2, r2, r4
 800abf0:	d10e      	bne.n	800ac10 <__mcmp+0x28>
 800abf2:	f100 0314 	add.w	r3, r0, #20
 800abf6:	3114      	adds	r1, #20
 800abf8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800abfc:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800ac00:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800ac04:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800ac08:	42a5      	cmp	r5, r4
 800ac0a:	d003      	beq.n	800ac14 <__mcmp+0x2c>
 800ac0c:	d305      	bcc.n	800ac1a <__mcmp+0x32>
 800ac0e:	2201      	movs	r2, #1
 800ac10:	4610      	mov	r0, r2
 800ac12:	bd30      	pop	{r4, r5, pc}
 800ac14:	4283      	cmp	r3, r0
 800ac16:	d3f3      	bcc.n	800ac00 <__mcmp+0x18>
 800ac18:	e7fa      	b.n	800ac10 <__mcmp+0x28>
 800ac1a:	f04f 32ff 	mov.w	r2, #4294967295
 800ac1e:	e7f7      	b.n	800ac10 <__mcmp+0x28>

0800ac20 <__mdiff>:
 800ac20:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac24:	460c      	mov	r4, r1
 800ac26:	4606      	mov	r6, r0
 800ac28:	4611      	mov	r1, r2
 800ac2a:	4620      	mov	r0, r4
 800ac2c:	4690      	mov	r8, r2
 800ac2e:	f7ff ffdb 	bl	800abe8 <__mcmp>
 800ac32:	1e05      	subs	r5, r0, #0
 800ac34:	d110      	bne.n	800ac58 <__mdiff+0x38>
 800ac36:	4629      	mov	r1, r5
 800ac38:	4630      	mov	r0, r6
 800ac3a:	f7ff fd09 	bl	800a650 <_Balloc>
 800ac3e:	b930      	cbnz	r0, 800ac4e <__mdiff+0x2e>
 800ac40:	4b3a      	ldr	r3, [pc, #232]	; (800ad2c <__mdiff+0x10c>)
 800ac42:	4602      	mov	r2, r0
 800ac44:	f240 2132 	movw	r1, #562	; 0x232
 800ac48:	4839      	ldr	r0, [pc, #228]	; (800ad30 <__mdiff+0x110>)
 800ac4a:	f7fe fab9 	bl	80091c0 <__assert_func>
 800ac4e:	2301      	movs	r3, #1
 800ac50:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800ac54:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ac58:	bfa4      	itt	ge
 800ac5a:	4643      	movge	r3, r8
 800ac5c:	46a0      	movge	r8, r4
 800ac5e:	4630      	mov	r0, r6
 800ac60:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800ac64:	bfa6      	itte	ge
 800ac66:	461c      	movge	r4, r3
 800ac68:	2500      	movge	r5, #0
 800ac6a:	2501      	movlt	r5, #1
 800ac6c:	f7ff fcf0 	bl	800a650 <_Balloc>
 800ac70:	b920      	cbnz	r0, 800ac7c <__mdiff+0x5c>
 800ac72:	4b2e      	ldr	r3, [pc, #184]	; (800ad2c <__mdiff+0x10c>)
 800ac74:	4602      	mov	r2, r0
 800ac76:	f44f 7110 	mov.w	r1, #576	; 0x240
 800ac7a:	e7e5      	b.n	800ac48 <__mdiff+0x28>
 800ac7c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800ac80:	6926      	ldr	r6, [r4, #16]
 800ac82:	60c5      	str	r5, [r0, #12]
 800ac84:	f104 0914 	add.w	r9, r4, #20
 800ac88:	f108 0514 	add.w	r5, r8, #20
 800ac8c:	f100 0e14 	add.w	lr, r0, #20
 800ac90:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800ac94:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800ac98:	f108 0210 	add.w	r2, r8, #16
 800ac9c:	46f2      	mov	sl, lr
 800ac9e:	2100      	movs	r1, #0
 800aca0:	f859 3b04 	ldr.w	r3, [r9], #4
 800aca4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800aca8:	fa1f f883 	uxth.w	r8, r3
 800acac:	fa11 f18b 	uxtah	r1, r1, fp
 800acb0:	0c1b      	lsrs	r3, r3, #16
 800acb2:	eba1 0808 	sub.w	r8, r1, r8
 800acb6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800acba:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800acbe:	fa1f f888 	uxth.w	r8, r8
 800acc2:	1419      	asrs	r1, r3, #16
 800acc4:	454e      	cmp	r6, r9
 800acc6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800acca:	f84a 3b04 	str.w	r3, [sl], #4
 800acce:	d8e7      	bhi.n	800aca0 <__mdiff+0x80>
 800acd0:	1b33      	subs	r3, r6, r4
 800acd2:	3b15      	subs	r3, #21
 800acd4:	f023 0303 	bic.w	r3, r3, #3
 800acd8:	3304      	adds	r3, #4
 800acda:	3415      	adds	r4, #21
 800acdc:	42a6      	cmp	r6, r4
 800acde:	bf38      	it	cc
 800ace0:	2304      	movcc	r3, #4
 800ace2:	441d      	add	r5, r3
 800ace4:	4473      	add	r3, lr
 800ace6:	469e      	mov	lr, r3
 800ace8:	462e      	mov	r6, r5
 800acea:	4566      	cmp	r6, ip
 800acec:	d30e      	bcc.n	800ad0c <__mdiff+0xec>
 800acee:	f10c 0203 	add.w	r2, ip, #3
 800acf2:	1b52      	subs	r2, r2, r5
 800acf4:	f022 0203 	bic.w	r2, r2, #3
 800acf8:	3d03      	subs	r5, #3
 800acfa:	45ac      	cmp	ip, r5
 800acfc:	bf38      	it	cc
 800acfe:	2200      	movcc	r2, #0
 800ad00:	441a      	add	r2, r3
 800ad02:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800ad06:	b17b      	cbz	r3, 800ad28 <__mdiff+0x108>
 800ad08:	6107      	str	r7, [r0, #16]
 800ad0a:	e7a3      	b.n	800ac54 <__mdiff+0x34>
 800ad0c:	f856 8b04 	ldr.w	r8, [r6], #4
 800ad10:	fa11 f288 	uxtah	r2, r1, r8
 800ad14:	1414      	asrs	r4, r2, #16
 800ad16:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800ad1a:	b292      	uxth	r2, r2
 800ad1c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800ad20:	f84e 2b04 	str.w	r2, [lr], #4
 800ad24:	1421      	asrs	r1, r4, #16
 800ad26:	e7e0      	b.n	800acea <__mdiff+0xca>
 800ad28:	3f01      	subs	r7, #1
 800ad2a:	e7ea      	b.n	800ad02 <__mdiff+0xe2>
 800ad2c:	0800c3f9 	.word	0x0800c3f9
 800ad30:	0800c484 	.word	0x0800c484

0800ad34 <__ulp>:
 800ad34:	b082      	sub	sp, #8
 800ad36:	ed8d 0b00 	vstr	d0, [sp]
 800ad3a:	9b01      	ldr	r3, [sp, #4]
 800ad3c:	4912      	ldr	r1, [pc, #72]	; (800ad88 <__ulp+0x54>)
 800ad3e:	4019      	ands	r1, r3
 800ad40:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800ad44:	2900      	cmp	r1, #0
 800ad46:	dd05      	ble.n	800ad54 <__ulp+0x20>
 800ad48:	2200      	movs	r2, #0
 800ad4a:	460b      	mov	r3, r1
 800ad4c:	ec43 2b10 	vmov	d0, r2, r3
 800ad50:	b002      	add	sp, #8
 800ad52:	4770      	bx	lr
 800ad54:	4249      	negs	r1, r1
 800ad56:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ad5a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ad5e:	f04f 0200 	mov.w	r2, #0
 800ad62:	f04f 0300 	mov.w	r3, #0
 800ad66:	da04      	bge.n	800ad72 <__ulp+0x3e>
 800ad68:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ad6c:	fa41 f300 	asr.w	r3, r1, r0
 800ad70:	e7ec      	b.n	800ad4c <__ulp+0x18>
 800ad72:	f1a0 0114 	sub.w	r1, r0, #20
 800ad76:	291e      	cmp	r1, #30
 800ad78:	bfda      	itte	le
 800ad7a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ad7e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ad82:	2101      	movgt	r1, #1
 800ad84:	460a      	mov	r2, r1
 800ad86:	e7e1      	b.n	800ad4c <__ulp+0x18>
 800ad88:	7ff00000 	.word	0x7ff00000

0800ad8c <__b2d>:
 800ad8c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad8e:	6905      	ldr	r5, [r0, #16]
 800ad90:	f100 0714 	add.w	r7, r0, #20
 800ad94:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ad98:	1f2e      	subs	r6, r5, #4
 800ad9a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ad9e:	4620      	mov	r0, r4
 800ada0:	f7ff fd48 	bl	800a834 <__hi0bits>
 800ada4:	f1c0 0320 	rsb	r3, r0, #32
 800ada8:	280a      	cmp	r0, #10
 800adaa:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ae28 <__b2d+0x9c>
 800adae:	600b      	str	r3, [r1, #0]
 800adb0:	dc14      	bgt.n	800addc <__b2d+0x50>
 800adb2:	f1c0 0e0b 	rsb	lr, r0, #11
 800adb6:	fa24 f10e 	lsr.w	r1, r4, lr
 800adba:	42b7      	cmp	r7, r6
 800adbc:	ea41 030c 	orr.w	r3, r1, ip
 800adc0:	bf34      	ite	cc
 800adc2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800adc6:	2100      	movcs	r1, #0
 800adc8:	3015      	adds	r0, #21
 800adca:	fa04 f000 	lsl.w	r0, r4, r0
 800adce:	fa21 f10e 	lsr.w	r1, r1, lr
 800add2:	ea40 0201 	orr.w	r2, r0, r1
 800add6:	ec43 2b10 	vmov	d0, r2, r3
 800adda:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800addc:	42b7      	cmp	r7, r6
 800adde:	bf3a      	itte	cc
 800ade0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ade4:	f1a5 0608 	subcc.w	r6, r5, #8
 800ade8:	2100      	movcs	r1, #0
 800adea:	380b      	subs	r0, #11
 800adec:	d017      	beq.n	800ae1e <__b2d+0x92>
 800adee:	f1c0 0c20 	rsb	ip, r0, #32
 800adf2:	fa04 f500 	lsl.w	r5, r4, r0
 800adf6:	42be      	cmp	r6, r7
 800adf8:	fa21 f40c 	lsr.w	r4, r1, ip
 800adfc:	ea45 0504 	orr.w	r5, r5, r4
 800ae00:	bf8c      	ite	hi
 800ae02:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800ae06:	2400      	movls	r4, #0
 800ae08:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800ae0c:	fa01 f000 	lsl.w	r0, r1, r0
 800ae10:	fa24 f40c 	lsr.w	r4, r4, ip
 800ae14:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ae18:	ea40 0204 	orr.w	r2, r0, r4
 800ae1c:	e7db      	b.n	800add6 <__b2d+0x4a>
 800ae1e:	ea44 030c 	orr.w	r3, r4, ip
 800ae22:	460a      	mov	r2, r1
 800ae24:	e7d7      	b.n	800add6 <__b2d+0x4a>
 800ae26:	bf00      	nop
 800ae28:	3ff00000 	.word	0x3ff00000

0800ae2c <__d2b>:
 800ae2c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ae30:	4689      	mov	r9, r1
 800ae32:	2101      	movs	r1, #1
 800ae34:	ec57 6b10 	vmov	r6, r7, d0
 800ae38:	4690      	mov	r8, r2
 800ae3a:	f7ff fc09 	bl	800a650 <_Balloc>
 800ae3e:	4604      	mov	r4, r0
 800ae40:	b930      	cbnz	r0, 800ae50 <__d2b+0x24>
 800ae42:	4602      	mov	r2, r0
 800ae44:	4b25      	ldr	r3, [pc, #148]	; (800aedc <__d2b+0xb0>)
 800ae46:	4826      	ldr	r0, [pc, #152]	; (800aee0 <__d2b+0xb4>)
 800ae48:	f240 310a 	movw	r1, #778	; 0x30a
 800ae4c:	f7fe f9b8 	bl	80091c0 <__assert_func>
 800ae50:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ae54:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ae58:	bb35      	cbnz	r5, 800aea8 <__d2b+0x7c>
 800ae5a:	2e00      	cmp	r6, #0
 800ae5c:	9301      	str	r3, [sp, #4]
 800ae5e:	d028      	beq.n	800aeb2 <__d2b+0x86>
 800ae60:	4668      	mov	r0, sp
 800ae62:	9600      	str	r6, [sp, #0]
 800ae64:	f7ff fd06 	bl	800a874 <__lo0bits>
 800ae68:	9900      	ldr	r1, [sp, #0]
 800ae6a:	b300      	cbz	r0, 800aeae <__d2b+0x82>
 800ae6c:	9a01      	ldr	r2, [sp, #4]
 800ae6e:	f1c0 0320 	rsb	r3, r0, #32
 800ae72:	fa02 f303 	lsl.w	r3, r2, r3
 800ae76:	430b      	orrs	r3, r1
 800ae78:	40c2      	lsrs	r2, r0
 800ae7a:	6163      	str	r3, [r4, #20]
 800ae7c:	9201      	str	r2, [sp, #4]
 800ae7e:	9b01      	ldr	r3, [sp, #4]
 800ae80:	61a3      	str	r3, [r4, #24]
 800ae82:	2b00      	cmp	r3, #0
 800ae84:	bf14      	ite	ne
 800ae86:	2202      	movne	r2, #2
 800ae88:	2201      	moveq	r2, #1
 800ae8a:	6122      	str	r2, [r4, #16]
 800ae8c:	b1d5      	cbz	r5, 800aec4 <__d2b+0x98>
 800ae8e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ae92:	4405      	add	r5, r0
 800ae94:	f8c9 5000 	str.w	r5, [r9]
 800ae98:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ae9c:	f8c8 0000 	str.w	r0, [r8]
 800aea0:	4620      	mov	r0, r4
 800aea2:	b003      	add	sp, #12
 800aea4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800aea8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800aeac:	e7d5      	b.n	800ae5a <__d2b+0x2e>
 800aeae:	6161      	str	r1, [r4, #20]
 800aeb0:	e7e5      	b.n	800ae7e <__d2b+0x52>
 800aeb2:	a801      	add	r0, sp, #4
 800aeb4:	f7ff fcde 	bl	800a874 <__lo0bits>
 800aeb8:	9b01      	ldr	r3, [sp, #4]
 800aeba:	6163      	str	r3, [r4, #20]
 800aebc:	2201      	movs	r2, #1
 800aebe:	6122      	str	r2, [r4, #16]
 800aec0:	3020      	adds	r0, #32
 800aec2:	e7e3      	b.n	800ae8c <__d2b+0x60>
 800aec4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800aec8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800aecc:	f8c9 0000 	str.w	r0, [r9]
 800aed0:	6918      	ldr	r0, [r3, #16]
 800aed2:	f7ff fcaf 	bl	800a834 <__hi0bits>
 800aed6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800aeda:	e7df      	b.n	800ae9c <__d2b+0x70>
 800aedc:	0800c3f9 	.word	0x0800c3f9
 800aee0:	0800c484 	.word	0x0800c484

0800aee4 <__ratio>:
 800aee4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aee8:	4688      	mov	r8, r1
 800aeea:	4669      	mov	r1, sp
 800aeec:	4681      	mov	r9, r0
 800aeee:	f7ff ff4d 	bl	800ad8c <__b2d>
 800aef2:	a901      	add	r1, sp, #4
 800aef4:	4640      	mov	r0, r8
 800aef6:	ec55 4b10 	vmov	r4, r5, d0
 800aefa:	f7ff ff47 	bl	800ad8c <__b2d>
 800aefe:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800af02:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800af06:	eba3 0c02 	sub.w	ip, r3, r2
 800af0a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800af0e:	1a9b      	subs	r3, r3, r2
 800af10:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800af14:	ec51 0b10 	vmov	r0, r1, d0
 800af18:	2b00      	cmp	r3, #0
 800af1a:	bfd6      	itet	le
 800af1c:	460a      	movle	r2, r1
 800af1e:	462a      	movgt	r2, r5
 800af20:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800af24:	468b      	mov	fp, r1
 800af26:	462f      	mov	r7, r5
 800af28:	bfd4      	ite	le
 800af2a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800af2e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800af32:	4620      	mov	r0, r4
 800af34:	ee10 2a10 	vmov	r2, s0
 800af38:	465b      	mov	r3, fp
 800af3a:	4639      	mov	r1, r7
 800af3c:	f7f5 fc86 	bl	800084c <__aeabi_ddiv>
 800af40:	ec41 0b10 	vmov	d0, r0, r1
 800af44:	b003      	add	sp, #12
 800af46:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800af4a <__copybits>:
 800af4a:	3901      	subs	r1, #1
 800af4c:	b570      	push	{r4, r5, r6, lr}
 800af4e:	1149      	asrs	r1, r1, #5
 800af50:	6914      	ldr	r4, [r2, #16]
 800af52:	3101      	adds	r1, #1
 800af54:	f102 0314 	add.w	r3, r2, #20
 800af58:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800af5c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800af60:	1f05      	subs	r5, r0, #4
 800af62:	42a3      	cmp	r3, r4
 800af64:	d30c      	bcc.n	800af80 <__copybits+0x36>
 800af66:	1aa3      	subs	r3, r4, r2
 800af68:	3b11      	subs	r3, #17
 800af6a:	f023 0303 	bic.w	r3, r3, #3
 800af6e:	3211      	adds	r2, #17
 800af70:	42a2      	cmp	r2, r4
 800af72:	bf88      	it	hi
 800af74:	2300      	movhi	r3, #0
 800af76:	4418      	add	r0, r3
 800af78:	2300      	movs	r3, #0
 800af7a:	4288      	cmp	r0, r1
 800af7c:	d305      	bcc.n	800af8a <__copybits+0x40>
 800af7e:	bd70      	pop	{r4, r5, r6, pc}
 800af80:	f853 6b04 	ldr.w	r6, [r3], #4
 800af84:	f845 6f04 	str.w	r6, [r5, #4]!
 800af88:	e7eb      	b.n	800af62 <__copybits+0x18>
 800af8a:	f840 3b04 	str.w	r3, [r0], #4
 800af8e:	e7f4      	b.n	800af7a <__copybits+0x30>

0800af90 <__any_on>:
 800af90:	f100 0214 	add.w	r2, r0, #20
 800af94:	6900      	ldr	r0, [r0, #16]
 800af96:	114b      	asrs	r3, r1, #5
 800af98:	4298      	cmp	r0, r3
 800af9a:	b510      	push	{r4, lr}
 800af9c:	db11      	blt.n	800afc2 <__any_on+0x32>
 800af9e:	dd0a      	ble.n	800afb6 <__any_on+0x26>
 800afa0:	f011 011f 	ands.w	r1, r1, #31
 800afa4:	d007      	beq.n	800afb6 <__any_on+0x26>
 800afa6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800afaa:	fa24 f001 	lsr.w	r0, r4, r1
 800afae:	fa00 f101 	lsl.w	r1, r0, r1
 800afb2:	428c      	cmp	r4, r1
 800afb4:	d10b      	bne.n	800afce <__any_on+0x3e>
 800afb6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800afba:	4293      	cmp	r3, r2
 800afbc:	d803      	bhi.n	800afc6 <__any_on+0x36>
 800afbe:	2000      	movs	r0, #0
 800afc0:	bd10      	pop	{r4, pc}
 800afc2:	4603      	mov	r3, r0
 800afc4:	e7f7      	b.n	800afb6 <__any_on+0x26>
 800afc6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800afca:	2900      	cmp	r1, #0
 800afcc:	d0f5      	beq.n	800afba <__any_on+0x2a>
 800afce:	2001      	movs	r0, #1
 800afd0:	e7f6      	b.n	800afc0 <__any_on+0x30>

0800afd2 <_calloc_r>:
 800afd2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800afd4:	fba1 2402 	umull	r2, r4, r1, r2
 800afd8:	b94c      	cbnz	r4, 800afee <_calloc_r+0x1c>
 800afda:	4611      	mov	r1, r2
 800afdc:	9201      	str	r2, [sp, #4]
 800afde:	f000 f87b 	bl	800b0d8 <_malloc_r>
 800afe2:	9a01      	ldr	r2, [sp, #4]
 800afe4:	4605      	mov	r5, r0
 800afe6:	b930      	cbnz	r0, 800aff6 <_calloc_r+0x24>
 800afe8:	4628      	mov	r0, r5
 800afea:	b003      	add	sp, #12
 800afec:	bd30      	pop	{r4, r5, pc}
 800afee:	220c      	movs	r2, #12
 800aff0:	6002      	str	r2, [r0, #0]
 800aff2:	2500      	movs	r5, #0
 800aff4:	e7f8      	b.n	800afe8 <_calloc_r+0x16>
 800aff6:	4621      	mov	r1, r4
 800aff8:	f7fc fb24 	bl	8007644 <memset>
 800affc:	e7f4      	b.n	800afe8 <_calloc_r+0x16>
	...

0800b000 <_free_r>:
 800b000:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b002:	2900      	cmp	r1, #0
 800b004:	d044      	beq.n	800b090 <_free_r+0x90>
 800b006:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b00a:	9001      	str	r0, [sp, #4]
 800b00c:	2b00      	cmp	r3, #0
 800b00e:	f1a1 0404 	sub.w	r4, r1, #4
 800b012:	bfb8      	it	lt
 800b014:	18e4      	addlt	r4, r4, r3
 800b016:	f000 fec7 	bl	800bda8 <__malloc_lock>
 800b01a:	4a1e      	ldr	r2, [pc, #120]	; (800b094 <_free_r+0x94>)
 800b01c:	9801      	ldr	r0, [sp, #4]
 800b01e:	6813      	ldr	r3, [r2, #0]
 800b020:	b933      	cbnz	r3, 800b030 <_free_r+0x30>
 800b022:	6063      	str	r3, [r4, #4]
 800b024:	6014      	str	r4, [r2, #0]
 800b026:	b003      	add	sp, #12
 800b028:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b02c:	f000 bec2 	b.w	800bdb4 <__malloc_unlock>
 800b030:	42a3      	cmp	r3, r4
 800b032:	d908      	bls.n	800b046 <_free_r+0x46>
 800b034:	6825      	ldr	r5, [r4, #0]
 800b036:	1961      	adds	r1, r4, r5
 800b038:	428b      	cmp	r3, r1
 800b03a:	bf01      	itttt	eq
 800b03c:	6819      	ldreq	r1, [r3, #0]
 800b03e:	685b      	ldreq	r3, [r3, #4]
 800b040:	1949      	addeq	r1, r1, r5
 800b042:	6021      	streq	r1, [r4, #0]
 800b044:	e7ed      	b.n	800b022 <_free_r+0x22>
 800b046:	461a      	mov	r2, r3
 800b048:	685b      	ldr	r3, [r3, #4]
 800b04a:	b10b      	cbz	r3, 800b050 <_free_r+0x50>
 800b04c:	42a3      	cmp	r3, r4
 800b04e:	d9fa      	bls.n	800b046 <_free_r+0x46>
 800b050:	6811      	ldr	r1, [r2, #0]
 800b052:	1855      	adds	r5, r2, r1
 800b054:	42a5      	cmp	r5, r4
 800b056:	d10b      	bne.n	800b070 <_free_r+0x70>
 800b058:	6824      	ldr	r4, [r4, #0]
 800b05a:	4421      	add	r1, r4
 800b05c:	1854      	adds	r4, r2, r1
 800b05e:	42a3      	cmp	r3, r4
 800b060:	6011      	str	r1, [r2, #0]
 800b062:	d1e0      	bne.n	800b026 <_free_r+0x26>
 800b064:	681c      	ldr	r4, [r3, #0]
 800b066:	685b      	ldr	r3, [r3, #4]
 800b068:	6053      	str	r3, [r2, #4]
 800b06a:	4421      	add	r1, r4
 800b06c:	6011      	str	r1, [r2, #0]
 800b06e:	e7da      	b.n	800b026 <_free_r+0x26>
 800b070:	d902      	bls.n	800b078 <_free_r+0x78>
 800b072:	230c      	movs	r3, #12
 800b074:	6003      	str	r3, [r0, #0]
 800b076:	e7d6      	b.n	800b026 <_free_r+0x26>
 800b078:	6825      	ldr	r5, [r4, #0]
 800b07a:	1961      	adds	r1, r4, r5
 800b07c:	428b      	cmp	r3, r1
 800b07e:	bf04      	itt	eq
 800b080:	6819      	ldreq	r1, [r3, #0]
 800b082:	685b      	ldreq	r3, [r3, #4]
 800b084:	6063      	str	r3, [r4, #4]
 800b086:	bf04      	itt	eq
 800b088:	1949      	addeq	r1, r1, r5
 800b08a:	6021      	streq	r1, [r4, #0]
 800b08c:	6054      	str	r4, [r2, #4]
 800b08e:	e7ca      	b.n	800b026 <_free_r+0x26>
 800b090:	b003      	add	sp, #12
 800b092:	bd30      	pop	{r4, r5, pc}
 800b094:	200033fc 	.word	0x200033fc

0800b098 <sbrk_aligned>:
 800b098:	b570      	push	{r4, r5, r6, lr}
 800b09a:	4e0e      	ldr	r6, [pc, #56]	; (800b0d4 <sbrk_aligned+0x3c>)
 800b09c:	460c      	mov	r4, r1
 800b09e:	6831      	ldr	r1, [r6, #0]
 800b0a0:	4605      	mov	r5, r0
 800b0a2:	b911      	cbnz	r1, 800b0aa <sbrk_aligned+0x12>
 800b0a4:	f000 fb4c 	bl	800b740 <_sbrk_r>
 800b0a8:	6030      	str	r0, [r6, #0]
 800b0aa:	4621      	mov	r1, r4
 800b0ac:	4628      	mov	r0, r5
 800b0ae:	f000 fb47 	bl	800b740 <_sbrk_r>
 800b0b2:	1c43      	adds	r3, r0, #1
 800b0b4:	d00a      	beq.n	800b0cc <sbrk_aligned+0x34>
 800b0b6:	1cc4      	adds	r4, r0, #3
 800b0b8:	f024 0403 	bic.w	r4, r4, #3
 800b0bc:	42a0      	cmp	r0, r4
 800b0be:	d007      	beq.n	800b0d0 <sbrk_aligned+0x38>
 800b0c0:	1a21      	subs	r1, r4, r0
 800b0c2:	4628      	mov	r0, r5
 800b0c4:	f000 fb3c 	bl	800b740 <_sbrk_r>
 800b0c8:	3001      	adds	r0, #1
 800b0ca:	d101      	bne.n	800b0d0 <sbrk_aligned+0x38>
 800b0cc:	f04f 34ff 	mov.w	r4, #4294967295
 800b0d0:	4620      	mov	r0, r4
 800b0d2:	bd70      	pop	{r4, r5, r6, pc}
 800b0d4:	20003400 	.word	0x20003400

0800b0d8 <_malloc_r>:
 800b0d8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b0dc:	1ccd      	adds	r5, r1, #3
 800b0de:	f025 0503 	bic.w	r5, r5, #3
 800b0e2:	3508      	adds	r5, #8
 800b0e4:	2d0c      	cmp	r5, #12
 800b0e6:	bf38      	it	cc
 800b0e8:	250c      	movcc	r5, #12
 800b0ea:	2d00      	cmp	r5, #0
 800b0ec:	4607      	mov	r7, r0
 800b0ee:	db01      	blt.n	800b0f4 <_malloc_r+0x1c>
 800b0f0:	42a9      	cmp	r1, r5
 800b0f2:	d905      	bls.n	800b100 <_malloc_r+0x28>
 800b0f4:	230c      	movs	r3, #12
 800b0f6:	603b      	str	r3, [r7, #0]
 800b0f8:	2600      	movs	r6, #0
 800b0fa:	4630      	mov	r0, r6
 800b0fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b100:	4e2e      	ldr	r6, [pc, #184]	; (800b1bc <_malloc_r+0xe4>)
 800b102:	f000 fe51 	bl	800bda8 <__malloc_lock>
 800b106:	6833      	ldr	r3, [r6, #0]
 800b108:	461c      	mov	r4, r3
 800b10a:	bb34      	cbnz	r4, 800b15a <_malloc_r+0x82>
 800b10c:	4629      	mov	r1, r5
 800b10e:	4638      	mov	r0, r7
 800b110:	f7ff ffc2 	bl	800b098 <sbrk_aligned>
 800b114:	1c43      	adds	r3, r0, #1
 800b116:	4604      	mov	r4, r0
 800b118:	d14d      	bne.n	800b1b6 <_malloc_r+0xde>
 800b11a:	6834      	ldr	r4, [r6, #0]
 800b11c:	4626      	mov	r6, r4
 800b11e:	2e00      	cmp	r6, #0
 800b120:	d140      	bne.n	800b1a4 <_malloc_r+0xcc>
 800b122:	6823      	ldr	r3, [r4, #0]
 800b124:	4631      	mov	r1, r6
 800b126:	4638      	mov	r0, r7
 800b128:	eb04 0803 	add.w	r8, r4, r3
 800b12c:	f000 fb08 	bl	800b740 <_sbrk_r>
 800b130:	4580      	cmp	r8, r0
 800b132:	d13a      	bne.n	800b1aa <_malloc_r+0xd2>
 800b134:	6821      	ldr	r1, [r4, #0]
 800b136:	3503      	adds	r5, #3
 800b138:	1a6d      	subs	r5, r5, r1
 800b13a:	f025 0503 	bic.w	r5, r5, #3
 800b13e:	3508      	adds	r5, #8
 800b140:	2d0c      	cmp	r5, #12
 800b142:	bf38      	it	cc
 800b144:	250c      	movcc	r5, #12
 800b146:	4629      	mov	r1, r5
 800b148:	4638      	mov	r0, r7
 800b14a:	f7ff ffa5 	bl	800b098 <sbrk_aligned>
 800b14e:	3001      	adds	r0, #1
 800b150:	d02b      	beq.n	800b1aa <_malloc_r+0xd2>
 800b152:	6823      	ldr	r3, [r4, #0]
 800b154:	442b      	add	r3, r5
 800b156:	6023      	str	r3, [r4, #0]
 800b158:	e00e      	b.n	800b178 <_malloc_r+0xa0>
 800b15a:	6822      	ldr	r2, [r4, #0]
 800b15c:	1b52      	subs	r2, r2, r5
 800b15e:	d41e      	bmi.n	800b19e <_malloc_r+0xc6>
 800b160:	2a0b      	cmp	r2, #11
 800b162:	d916      	bls.n	800b192 <_malloc_r+0xba>
 800b164:	1961      	adds	r1, r4, r5
 800b166:	42a3      	cmp	r3, r4
 800b168:	6025      	str	r5, [r4, #0]
 800b16a:	bf18      	it	ne
 800b16c:	6059      	strne	r1, [r3, #4]
 800b16e:	6863      	ldr	r3, [r4, #4]
 800b170:	bf08      	it	eq
 800b172:	6031      	streq	r1, [r6, #0]
 800b174:	5162      	str	r2, [r4, r5]
 800b176:	604b      	str	r3, [r1, #4]
 800b178:	4638      	mov	r0, r7
 800b17a:	f104 060b 	add.w	r6, r4, #11
 800b17e:	f000 fe19 	bl	800bdb4 <__malloc_unlock>
 800b182:	f026 0607 	bic.w	r6, r6, #7
 800b186:	1d23      	adds	r3, r4, #4
 800b188:	1af2      	subs	r2, r6, r3
 800b18a:	d0b6      	beq.n	800b0fa <_malloc_r+0x22>
 800b18c:	1b9b      	subs	r3, r3, r6
 800b18e:	50a3      	str	r3, [r4, r2]
 800b190:	e7b3      	b.n	800b0fa <_malloc_r+0x22>
 800b192:	6862      	ldr	r2, [r4, #4]
 800b194:	42a3      	cmp	r3, r4
 800b196:	bf0c      	ite	eq
 800b198:	6032      	streq	r2, [r6, #0]
 800b19a:	605a      	strne	r2, [r3, #4]
 800b19c:	e7ec      	b.n	800b178 <_malloc_r+0xa0>
 800b19e:	4623      	mov	r3, r4
 800b1a0:	6864      	ldr	r4, [r4, #4]
 800b1a2:	e7b2      	b.n	800b10a <_malloc_r+0x32>
 800b1a4:	4634      	mov	r4, r6
 800b1a6:	6876      	ldr	r6, [r6, #4]
 800b1a8:	e7b9      	b.n	800b11e <_malloc_r+0x46>
 800b1aa:	230c      	movs	r3, #12
 800b1ac:	603b      	str	r3, [r7, #0]
 800b1ae:	4638      	mov	r0, r7
 800b1b0:	f000 fe00 	bl	800bdb4 <__malloc_unlock>
 800b1b4:	e7a1      	b.n	800b0fa <_malloc_r+0x22>
 800b1b6:	6025      	str	r5, [r4, #0]
 800b1b8:	e7de      	b.n	800b178 <_malloc_r+0xa0>
 800b1ba:	bf00      	nop
 800b1bc:	200033fc 	.word	0x200033fc

0800b1c0 <__ssputs_r>:
 800b1c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b1c4:	688e      	ldr	r6, [r1, #8]
 800b1c6:	429e      	cmp	r6, r3
 800b1c8:	4682      	mov	sl, r0
 800b1ca:	460c      	mov	r4, r1
 800b1cc:	4690      	mov	r8, r2
 800b1ce:	461f      	mov	r7, r3
 800b1d0:	d838      	bhi.n	800b244 <__ssputs_r+0x84>
 800b1d2:	898a      	ldrh	r2, [r1, #12]
 800b1d4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b1d8:	d032      	beq.n	800b240 <__ssputs_r+0x80>
 800b1da:	6825      	ldr	r5, [r4, #0]
 800b1dc:	6909      	ldr	r1, [r1, #16]
 800b1de:	eba5 0901 	sub.w	r9, r5, r1
 800b1e2:	6965      	ldr	r5, [r4, #20]
 800b1e4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b1e8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b1ec:	3301      	adds	r3, #1
 800b1ee:	444b      	add	r3, r9
 800b1f0:	106d      	asrs	r5, r5, #1
 800b1f2:	429d      	cmp	r5, r3
 800b1f4:	bf38      	it	cc
 800b1f6:	461d      	movcc	r5, r3
 800b1f8:	0553      	lsls	r3, r2, #21
 800b1fa:	d531      	bpl.n	800b260 <__ssputs_r+0xa0>
 800b1fc:	4629      	mov	r1, r5
 800b1fe:	f7ff ff6b 	bl	800b0d8 <_malloc_r>
 800b202:	4606      	mov	r6, r0
 800b204:	b950      	cbnz	r0, 800b21c <__ssputs_r+0x5c>
 800b206:	230c      	movs	r3, #12
 800b208:	f8ca 3000 	str.w	r3, [sl]
 800b20c:	89a3      	ldrh	r3, [r4, #12]
 800b20e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b212:	81a3      	strh	r3, [r4, #12]
 800b214:	f04f 30ff 	mov.w	r0, #4294967295
 800b218:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b21c:	6921      	ldr	r1, [r4, #16]
 800b21e:	464a      	mov	r2, r9
 800b220:	f7ff fa08 	bl	800a634 <memcpy>
 800b224:	89a3      	ldrh	r3, [r4, #12]
 800b226:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b22a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b22e:	81a3      	strh	r3, [r4, #12]
 800b230:	6126      	str	r6, [r4, #16]
 800b232:	6165      	str	r5, [r4, #20]
 800b234:	444e      	add	r6, r9
 800b236:	eba5 0509 	sub.w	r5, r5, r9
 800b23a:	6026      	str	r6, [r4, #0]
 800b23c:	60a5      	str	r5, [r4, #8]
 800b23e:	463e      	mov	r6, r7
 800b240:	42be      	cmp	r6, r7
 800b242:	d900      	bls.n	800b246 <__ssputs_r+0x86>
 800b244:	463e      	mov	r6, r7
 800b246:	6820      	ldr	r0, [r4, #0]
 800b248:	4632      	mov	r2, r6
 800b24a:	4641      	mov	r1, r8
 800b24c:	f000 fd92 	bl	800bd74 <memmove>
 800b250:	68a3      	ldr	r3, [r4, #8]
 800b252:	1b9b      	subs	r3, r3, r6
 800b254:	60a3      	str	r3, [r4, #8]
 800b256:	6823      	ldr	r3, [r4, #0]
 800b258:	4433      	add	r3, r6
 800b25a:	6023      	str	r3, [r4, #0]
 800b25c:	2000      	movs	r0, #0
 800b25e:	e7db      	b.n	800b218 <__ssputs_r+0x58>
 800b260:	462a      	mov	r2, r5
 800b262:	f000 fdad 	bl	800bdc0 <_realloc_r>
 800b266:	4606      	mov	r6, r0
 800b268:	2800      	cmp	r0, #0
 800b26a:	d1e1      	bne.n	800b230 <__ssputs_r+0x70>
 800b26c:	6921      	ldr	r1, [r4, #16]
 800b26e:	4650      	mov	r0, sl
 800b270:	f7ff fec6 	bl	800b000 <_free_r>
 800b274:	e7c7      	b.n	800b206 <__ssputs_r+0x46>
	...

0800b278 <_svfiprintf_r>:
 800b278:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b27c:	4698      	mov	r8, r3
 800b27e:	898b      	ldrh	r3, [r1, #12]
 800b280:	061b      	lsls	r3, r3, #24
 800b282:	b09d      	sub	sp, #116	; 0x74
 800b284:	4607      	mov	r7, r0
 800b286:	460d      	mov	r5, r1
 800b288:	4614      	mov	r4, r2
 800b28a:	d50e      	bpl.n	800b2aa <_svfiprintf_r+0x32>
 800b28c:	690b      	ldr	r3, [r1, #16]
 800b28e:	b963      	cbnz	r3, 800b2aa <_svfiprintf_r+0x32>
 800b290:	2140      	movs	r1, #64	; 0x40
 800b292:	f7ff ff21 	bl	800b0d8 <_malloc_r>
 800b296:	6028      	str	r0, [r5, #0]
 800b298:	6128      	str	r0, [r5, #16]
 800b29a:	b920      	cbnz	r0, 800b2a6 <_svfiprintf_r+0x2e>
 800b29c:	230c      	movs	r3, #12
 800b29e:	603b      	str	r3, [r7, #0]
 800b2a0:	f04f 30ff 	mov.w	r0, #4294967295
 800b2a4:	e0d1      	b.n	800b44a <_svfiprintf_r+0x1d2>
 800b2a6:	2340      	movs	r3, #64	; 0x40
 800b2a8:	616b      	str	r3, [r5, #20]
 800b2aa:	2300      	movs	r3, #0
 800b2ac:	9309      	str	r3, [sp, #36]	; 0x24
 800b2ae:	2320      	movs	r3, #32
 800b2b0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b2b4:	f8cd 800c 	str.w	r8, [sp, #12]
 800b2b8:	2330      	movs	r3, #48	; 0x30
 800b2ba:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b464 <_svfiprintf_r+0x1ec>
 800b2be:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b2c2:	f04f 0901 	mov.w	r9, #1
 800b2c6:	4623      	mov	r3, r4
 800b2c8:	469a      	mov	sl, r3
 800b2ca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b2ce:	b10a      	cbz	r2, 800b2d4 <_svfiprintf_r+0x5c>
 800b2d0:	2a25      	cmp	r2, #37	; 0x25
 800b2d2:	d1f9      	bne.n	800b2c8 <_svfiprintf_r+0x50>
 800b2d4:	ebba 0b04 	subs.w	fp, sl, r4
 800b2d8:	d00b      	beq.n	800b2f2 <_svfiprintf_r+0x7a>
 800b2da:	465b      	mov	r3, fp
 800b2dc:	4622      	mov	r2, r4
 800b2de:	4629      	mov	r1, r5
 800b2e0:	4638      	mov	r0, r7
 800b2e2:	f7ff ff6d 	bl	800b1c0 <__ssputs_r>
 800b2e6:	3001      	adds	r0, #1
 800b2e8:	f000 80aa 	beq.w	800b440 <_svfiprintf_r+0x1c8>
 800b2ec:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b2ee:	445a      	add	r2, fp
 800b2f0:	9209      	str	r2, [sp, #36]	; 0x24
 800b2f2:	f89a 3000 	ldrb.w	r3, [sl]
 800b2f6:	2b00      	cmp	r3, #0
 800b2f8:	f000 80a2 	beq.w	800b440 <_svfiprintf_r+0x1c8>
 800b2fc:	2300      	movs	r3, #0
 800b2fe:	f04f 32ff 	mov.w	r2, #4294967295
 800b302:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b306:	f10a 0a01 	add.w	sl, sl, #1
 800b30a:	9304      	str	r3, [sp, #16]
 800b30c:	9307      	str	r3, [sp, #28]
 800b30e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b312:	931a      	str	r3, [sp, #104]	; 0x68
 800b314:	4654      	mov	r4, sl
 800b316:	2205      	movs	r2, #5
 800b318:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b31c:	4851      	ldr	r0, [pc, #324]	; (800b464 <_svfiprintf_r+0x1ec>)
 800b31e:	f7f4 ff5f 	bl	80001e0 <memchr>
 800b322:	9a04      	ldr	r2, [sp, #16]
 800b324:	b9d8      	cbnz	r0, 800b35e <_svfiprintf_r+0xe6>
 800b326:	06d0      	lsls	r0, r2, #27
 800b328:	bf44      	itt	mi
 800b32a:	2320      	movmi	r3, #32
 800b32c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b330:	0711      	lsls	r1, r2, #28
 800b332:	bf44      	itt	mi
 800b334:	232b      	movmi	r3, #43	; 0x2b
 800b336:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b33a:	f89a 3000 	ldrb.w	r3, [sl]
 800b33e:	2b2a      	cmp	r3, #42	; 0x2a
 800b340:	d015      	beq.n	800b36e <_svfiprintf_r+0xf6>
 800b342:	9a07      	ldr	r2, [sp, #28]
 800b344:	4654      	mov	r4, sl
 800b346:	2000      	movs	r0, #0
 800b348:	f04f 0c0a 	mov.w	ip, #10
 800b34c:	4621      	mov	r1, r4
 800b34e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b352:	3b30      	subs	r3, #48	; 0x30
 800b354:	2b09      	cmp	r3, #9
 800b356:	d94e      	bls.n	800b3f6 <_svfiprintf_r+0x17e>
 800b358:	b1b0      	cbz	r0, 800b388 <_svfiprintf_r+0x110>
 800b35a:	9207      	str	r2, [sp, #28]
 800b35c:	e014      	b.n	800b388 <_svfiprintf_r+0x110>
 800b35e:	eba0 0308 	sub.w	r3, r0, r8
 800b362:	fa09 f303 	lsl.w	r3, r9, r3
 800b366:	4313      	orrs	r3, r2
 800b368:	9304      	str	r3, [sp, #16]
 800b36a:	46a2      	mov	sl, r4
 800b36c:	e7d2      	b.n	800b314 <_svfiprintf_r+0x9c>
 800b36e:	9b03      	ldr	r3, [sp, #12]
 800b370:	1d19      	adds	r1, r3, #4
 800b372:	681b      	ldr	r3, [r3, #0]
 800b374:	9103      	str	r1, [sp, #12]
 800b376:	2b00      	cmp	r3, #0
 800b378:	bfbb      	ittet	lt
 800b37a:	425b      	neglt	r3, r3
 800b37c:	f042 0202 	orrlt.w	r2, r2, #2
 800b380:	9307      	strge	r3, [sp, #28]
 800b382:	9307      	strlt	r3, [sp, #28]
 800b384:	bfb8      	it	lt
 800b386:	9204      	strlt	r2, [sp, #16]
 800b388:	7823      	ldrb	r3, [r4, #0]
 800b38a:	2b2e      	cmp	r3, #46	; 0x2e
 800b38c:	d10c      	bne.n	800b3a8 <_svfiprintf_r+0x130>
 800b38e:	7863      	ldrb	r3, [r4, #1]
 800b390:	2b2a      	cmp	r3, #42	; 0x2a
 800b392:	d135      	bne.n	800b400 <_svfiprintf_r+0x188>
 800b394:	9b03      	ldr	r3, [sp, #12]
 800b396:	1d1a      	adds	r2, r3, #4
 800b398:	681b      	ldr	r3, [r3, #0]
 800b39a:	9203      	str	r2, [sp, #12]
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	bfb8      	it	lt
 800b3a0:	f04f 33ff 	movlt.w	r3, #4294967295
 800b3a4:	3402      	adds	r4, #2
 800b3a6:	9305      	str	r3, [sp, #20]
 800b3a8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b474 <_svfiprintf_r+0x1fc>
 800b3ac:	7821      	ldrb	r1, [r4, #0]
 800b3ae:	2203      	movs	r2, #3
 800b3b0:	4650      	mov	r0, sl
 800b3b2:	f7f4 ff15 	bl	80001e0 <memchr>
 800b3b6:	b140      	cbz	r0, 800b3ca <_svfiprintf_r+0x152>
 800b3b8:	2340      	movs	r3, #64	; 0x40
 800b3ba:	eba0 000a 	sub.w	r0, r0, sl
 800b3be:	fa03 f000 	lsl.w	r0, r3, r0
 800b3c2:	9b04      	ldr	r3, [sp, #16]
 800b3c4:	4303      	orrs	r3, r0
 800b3c6:	3401      	adds	r4, #1
 800b3c8:	9304      	str	r3, [sp, #16]
 800b3ca:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b3ce:	4826      	ldr	r0, [pc, #152]	; (800b468 <_svfiprintf_r+0x1f0>)
 800b3d0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b3d4:	2206      	movs	r2, #6
 800b3d6:	f7f4 ff03 	bl	80001e0 <memchr>
 800b3da:	2800      	cmp	r0, #0
 800b3dc:	d038      	beq.n	800b450 <_svfiprintf_r+0x1d8>
 800b3de:	4b23      	ldr	r3, [pc, #140]	; (800b46c <_svfiprintf_r+0x1f4>)
 800b3e0:	bb1b      	cbnz	r3, 800b42a <_svfiprintf_r+0x1b2>
 800b3e2:	9b03      	ldr	r3, [sp, #12]
 800b3e4:	3307      	adds	r3, #7
 800b3e6:	f023 0307 	bic.w	r3, r3, #7
 800b3ea:	3308      	adds	r3, #8
 800b3ec:	9303      	str	r3, [sp, #12]
 800b3ee:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b3f0:	4433      	add	r3, r6
 800b3f2:	9309      	str	r3, [sp, #36]	; 0x24
 800b3f4:	e767      	b.n	800b2c6 <_svfiprintf_r+0x4e>
 800b3f6:	fb0c 3202 	mla	r2, ip, r2, r3
 800b3fa:	460c      	mov	r4, r1
 800b3fc:	2001      	movs	r0, #1
 800b3fe:	e7a5      	b.n	800b34c <_svfiprintf_r+0xd4>
 800b400:	2300      	movs	r3, #0
 800b402:	3401      	adds	r4, #1
 800b404:	9305      	str	r3, [sp, #20]
 800b406:	4619      	mov	r1, r3
 800b408:	f04f 0c0a 	mov.w	ip, #10
 800b40c:	4620      	mov	r0, r4
 800b40e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b412:	3a30      	subs	r2, #48	; 0x30
 800b414:	2a09      	cmp	r2, #9
 800b416:	d903      	bls.n	800b420 <_svfiprintf_r+0x1a8>
 800b418:	2b00      	cmp	r3, #0
 800b41a:	d0c5      	beq.n	800b3a8 <_svfiprintf_r+0x130>
 800b41c:	9105      	str	r1, [sp, #20]
 800b41e:	e7c3      	b.n	800b3a8 <_svfiprintf_r+0x130>
 800b420:	fb0c 2101 	mla	r1, ip, r1, r2
 800b424:	4604      	mov	r4, r0
 800b426:	2301      	movs	r3, #1
 800b428:	e7f0      	b.n	800b40c <_svfiprintf_r+0x194>
 800b42a:	ab03      	add	r3, sp, #12
 800b42c:	9300      	str	r3, [sp, #0]
 800b42e:	462a      	mov	r2, r5
 800b430:	4b0f      	ldr	r3, [pc, #60]	; (800b470 <_svfiprintf_r+0x1f8>)
 800b432:	a904      	add	r1, sp, #16
 800b434:	4638      	mov	r0, r7
 800b436:	f7fc f9ad 	bl	8007794 <_printf_float>
 800b43a:	1c42      	adds	r2, r0, #1
 800b43c:	4606      	mov	r6, r0
 800b43e:	d1d6      	bne.n	800b3ee <_svfiprintf_r+0x176>
 800b440:	89ab      	ldrh	r3, [r5, #12]
 800b442:	065b      	lsls	r3, r3, #25
 800b444:	f53f af2c 	bmi.w	800b2a0 <_svfiprintf_r+0x28>
 800b448:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b44a:	b01d      	add	sp, #116	; 0x74
 800b44c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b450:	ab03      	add	r3, sp, #12
 800b452:	9300      	str	r3, [sp, #0]
 800b454:	462a      	mov	r2, r5
 800b456:	4b06      	ldr	r3, [pc, #24]	; (800b470 <_svfiprintf_r+0x1f8>)
 800b458:	a904      	add	r1, sp, #16
 800b45a:	4638      	mov	r0, r7
 800b45c:	f7fc fc3e 	bl	8007cdc <_printf_i>
 800b460:	e7eb      	b.n	800b43a <_svfiprintf_r+0x1c2>
 800b462:	bf00      	nop
 800b464:	0800c5dc 	.word	0x0800c5dc
 800b468:	0800c5e6 	.word	0x0800c5e6
 800b46c:	08007795 	.word	0x08007795
 800b470:	0800b1c1 	.word	0x0800b1c1
 800b474:	0800c5e2 	.word	0x0800c5e2

0800b478 <__sfputc_r>:
 800b478:	6893      	ldr	r3, [r2, #8]
 800b47a:	3b01      	subs	r3, #1
 800b47c:	2b00      	cmp	r3, #0
 800b47e:	b410      	push	{r4}
 800b480:	6093      	str	r3, [r2, #8]
 800b482:	da08      	bge.n	800b496 <__sfputc_r+0x1e>
 800b484:	6994      	ldr	r4, [r2, #24]
 800b486:	42a3      	cmp	r3, r4
 800b488:	db01      	blt.n	800b48e <__sfputc_r+0x16>
 800b48a:	290a      	cmp	r1, #10
 800b48c:	d103      	bne.n	800b496 <__sfputc_r+0x1e>
 800b48e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b492:	f000 b979 	b.w	800b788 <__swbuf_r>
 800b496:	6813      	ldr	r3, [r2, #0]
 800b498:	1c58      	adds	r0, r3, #1
 800b49a:	6010      	str	r0, [r2, #0]
 800b49c:	7019      	strb	r1, [r3, #0]
 800b49e:	4608      	mov	r0, r1
 800b4a0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b4a4:	4770      	bx	lr

0800b4a6 <__sfputs_r>:
 800b4a6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b4a8:	4606      	mov	r6, r0
 800b4aa:	460f      	mov	r7, r1
 800b4ac:	4614      	mov	r4, r2
 800b4ae:	18d5      	adds	r5, r2, r3
 800b4b0:	42ac      	cmp	r4, r5
 800b4b2:	d101      	bne.n	800b4b8 <__sfputs_r+0x12>
 800b4b4:	2000      	movs	r0, #0
 800b4b6:	e007      	b.n	800b4c8 <__sfputs_r+0x22>
 800b4b8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4bc:	463a      	mov	r2, r7
 800b4be:	4630      	mov	r0, r6
 800b4c0:	f7ff ffda 	bl	800b478 <__sfputc_r>
 800b4c4:	1c43      	adds	r3, r0, #1
 800b4c6:	d1f3      	bne.n	800b4b0 <__sfputs_r+0xa>
 800b4c8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b4cc <_vfiprintf_r>:
 800b4cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b4d0:	460d      	mov	r5, r1
 800b4d2:	b09d      	sub	sp, #116	; 0x74
 800b4d4:	4614      	mov	r4, r2
 800b4d6:	4698      	mov	r8, r3
 800b4d8:	4606      	mov	r6, r0
 800b4da:	b118      	cbz	r0, 800b4e4 <_vfiprintf_r+0x18>
 800b4dc:	6983      	ldr	r3, [r0, #24]
 800b4de:	b90b      	cbnz	r3, 800b4e4 <_vfiprintf_r+0x18>
 800b4e0:	f000 fb42 	bl	800bb68 <__sinit>
 800b4e4:	4b89      	ldr	r3, [pc, #548]	; (800b70c <_vfiprintf_r+0x240>)
 800b4e6:	429d      	cmp	r5, r3
 800b4e8:	d11b      	bne.n	800b522 <_vfiprintf_r+0x56>
 800b4ea:	6875      	ldr	r5, [r6, #4]
 800b4ec:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b4ee:	07d9      	lsls	r1, r3, #31
 800b4f0:	d405      	bmi.n	800b4fe <_vfiprintf_r+0x32>
 800b4f2:	89ab      	ldrh	r3, [r5, #12]
 800b4f4:	059a      	lsls	r2, r3, #22
 800b4f6:	d402      	bmi.n	800b4fe <_vfiprintf_r+0x32>
 800b4f8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b4fa:	f000 fbd3 	bl	800bca4 <__retarget_lock_acquire_recursive>
 800b4fe:	89ab      	ldrh	r3, [r5, #12]
 800b500:	071b      	lsls	r3, r3, #28
 800b502:	d501      	bpl.n	800b508 <_vfiprintf_r+0x3c>
 800b504:	692b      	ldr	r3, [r5, #16]
 800b506:	b9eb      	cbnz	r3, 800b544 <_vfiprintf_r+0x78>
 800b508:	4629      	mov	r1, r5
 800b50a:	4630      	mov	r0, r6
 800b50c:	f000 f99c 	bl	800b848 <__swsetup_r>
 800b510:	b1c0      	cbz	r0, 800b544 <_vfiprintf_r+0x78>
 800b512:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b514:	07dc      	lsls	r4, r3, #31
 800b516:	d50e      	bpl.n	800b536 <_vfiprintf_r+0x6a>
 800b518:	f04f 30ff 	mov.w	r0, #4294967295
 800b51c:	b01d      	add	sp, #116	; 0x74
 800b51e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b522:	4b7b      	ldr	r3, [pc, #492]	; (800b710 <_vfiprintf_r+0x244>)
 800b524:	429d      	cmp	r5, r3
 800b526:	d101      	bne.n	800b52c <_vfiprintf_r+0x60>
 800b528:	68b5      	ldr	r5, [r6, #8]
 800b52a:	e7df      	b.n	800b4ec <_vfiprintf_r+0x20>
 800b52c:	4b79      	ldr	r3, [pc, #484]	; (800b714 <_vfiprintf_r+0x248>)
 800b52e:	429d      	cmp	r5, r3
 800b530:	bf08      	it	eq
 800b532:	68f5      	ldreq	r5, [r6, #12]
 800b534:	e7da      	b.n	800b4ec <_vfiprintf_r+0x20>
 800b536:	89ab      	ldrh	r3, [r5, #12]
 800b538:	0598      	lsls	r0, r3, #22
 800b53a:	d4ed      	bmi.n	800b518 <_vfiprintf_r+0x4c>
 800b53c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b53e:	f000 fbb2 	bl	800bca6 <__retarget_lock_release_recursive>
 800b542:	e7e9      	b.n	800b518 <_vfiprintf_r+0x4c>
 800b544:	2300      	movs	r3, #0
 800b546:	9309      	str	r3, [sp, #36]	; 0x24
 800b548:	2320      	movs	r3, #32
 800b54a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b54e:	f8cd 800c 	str.w	r8, [sp, #12]
 800b552:	2330      	movs	r3, #48	; 0x30
 800b554:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800b718 <_vfiprintf_r+0x24c>
 800b558:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b55c:	f04f 0901 	mov.w	r9, #1
 800b560:	4623      	mov	r3, r4
 800b562:	469a      	mov	sl, r3
 800b564:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b568:	b10a      	cbz	r2, 800b56e <_vfiprintf_r+0xa2>
 800b56a:	2a25      	cmp	r2, #37	; 0x25
 800b56c:	d1f9      	bne.n	800b562 <_vfiprintf_r+0x96>
 800b56e:	ebba 0b04 	subs.w	fp, sl, r4
 800b572:	d00b      	beq.n	800b58c <_vfiprintf_r+0xc0>
 800b574:	465b      	mov	r3, fp
 800b576:	4622      	mov	r2, r4
 800b578:	4629      	mov	r1, r5
 800b57a:	4630      	mov	r0, r6
 800b57c:	f7ff ff93 	bl	800b4a6 <__sfputs_r>
 800b580:	3001      	adds	r0, #1
 800b582:	f000 80aa 	beq.w	800b6da <_vfiprintf_r+0x20e>
 800b586:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b588:	445a      	add	r2, fp
 800b58a:	9209      	str	r2, [sp, #36]	; 0x24
 800b58c:	f89a 3000 	ldrb.w	r3, [sl]
 800b590:	2b00      	cmp	r3, #0
 800b592:	f000 80a2 	beq.w	800b6da <_vfiprintf_r+0x20e>
 800b596:	2300      	movs	r3, #0
 800b598:	f04f 32ff 	mov.w	r2, #4294967295
 800b59c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b5a0:	f10a 0a01 	add.w	sl, sl, #1
 800b5a4:	9304      	str	r3, [sp, #16]
 800b5a6:	9307      	str	r3, [sp, #28]
 800b5a8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b5ac:	931a      	str	r3, [sp, #104]	; 0x68
 800b5ae:	4654      	mov	r4, sl
 800b5b0:	2205      	movs	r2, #5
 800b5b2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b5b6:	4858      	ldr	r0, [pc, #352]	; (800b718 <_vfiprintf_r+0x24c>)
 800b5b8:	f7f4 fe12 	bl	80001e0 <memchr>
 800b5bc:	9a04      	ldr	r2, [sp, #16]
 800b5be:	b9d8      	cbnz	r0, 800b5f8 <_vfiprintf_r+0x12c>
 800b5c0:	06d1      	lsls	r1, r2, #27
 800b5c2:	bf44      	itt	mi
 800b5c4:	2320      	movmi	r3, #32
 800b5c6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5ca:	0713      	lsls	r3, r2, #28
 800b5cc:	bf44      	itt	mi
 800b5ce:	232b      	movmi	r3, #43	; 0x2b
 800b5d0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b5d4:	f89a 3000 	ldrb.w	r3, [sl]
 800b5d8:	2b2a      	cmp	r3, #42	; 0x2a
 800b5da:	d015      	beq.n	800b608 <_vfiprintf_r+0x13c>
 800b5dc:	9a07      	ldr	r2, [sp, #28]
 800b5de:	4654      	mov	r4, sl
 800b5e0:	2000      	movs	r0, #0
 800b5e2:	f04f 0c0a 	mov.w	ip, #10
 800b5e6:	4621      	mov	r1, r4
 800b5e8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b5ec:	3b30      	subs	r3, #48	; 0x30
 800b5ee:	2b09      	cmp	r3, #9
 800b5f0:	d94e      	bls.n	800b690 <_vfiprintf_r+0x1c4>
 800b5f2:	b1b0      	cbz	r0, 800b622 <_vfiprintf_r+0x156>
 800b5f4:	9207      	str	r2, [sp, #28]
 800b5f6:	e014      	b.n	800b622 <_vfiprintf_r+0x156>
 800b5f8:	eba0 0308 	sub.w	r3, r0, r8
 800b5fc:	fa09 f303 	lsl.w	r3, r9, r3
 800b600:	4313      	orrs	r3, r2
 800b602:	9304      	str	r3, [sp, #16]
 800b604:	46a2      	mov	sl, r4
 800b606:	e7d2      	b.n	800b5ae <_vfiprintf_r+0xe2>
 800b608:	9b03      	ldr	r3, [sp, #12]
 800b60a:	1d19      	adds	r1, r3, #4
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	9103      	str	r1, [sp, #12]
 800b610:	2b00      	cmp	r3, #0
 800b612:	bfbb      	ittet	lt
 800b614:	425b      	neglt	r3, r3
 800b616:	f042 0202 	orrlt.w	r2, r2, #2
 800b61a:	9307      	strge	r3, [sp, #28]
 800b61c:	9307      	strlt	r3, [sp, #28]
 800b61e:	bfb8      	it	lt
 800b620:	9204      	strlt	r2, [sp, #16]
 800b622:	7823      	ldrb	r3, [r4, #0]
 800b624:	2b2e      	cmp	r3, #46	; 0x2e
 800b626:	d10c      	bne.n	800b642 <_vfiprintf_r+0x176>
 800b628:	7863      	ldrb	r3, [r4, #1]
 800b62a:	2b2a      	cmp	r3, #42	; 0x2a
 800b62c:	d135      	bne.n	800b69a <_vfiprintf_r+0x1ce>
 800b62e:	9b03      	ldr	r3, [sp, #12]
 800b630:	1d1a      	adds	r2, r3, #4
 800b632:	681b      	ldr	r3, [r3, #0]
 800b634:	9203      	str	r2, [sp, #12]
 800b636:	2b00      	cmp	r3, #0
 800b638:	bfb8      	it	lt
 800b63a:	f04f 33ff 	movlt.w	r3, #4294967295
 800b63e:	3402      	adds	r4, #2
 800b640:	9305      	str	r3, [sp, #20]
 800b642:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800b728 <_vfiprintf_r+0x25c>
 800b646:	7821      	ldrb	r1, [r4, #0]
 800b648:	2203      	movs	r2, #3
 800b64a:	4650      	mov	r0, sl
 800b64c:	f7f4 fdc8 	bl	80001e0 <memchr>
 800b650:	b140      	cbz	r0, 800b664 <_vfiprintf_r+0x198>
 800b652:	2340      	movs	r3, #64	; 0x40
 800b654:	eba0 000a 	sub.w	r0, r0, sl
 800b658:	fa03 f000 	lsl.w	r0, r3, r0
 800b65c:	9b04      	ldr	r3, [sp, #16]
 800b65e:	4303      	orrs	r3, r0
 800b660:	3401      	adds	r4, #1
 800b662:	9304      	str	r3, [sp, #16]
 800b664:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b668:	482c      	ldr	r0, [pc, #176]	; (800b71c <_vfiprintf_r+0x250>)
 800b66a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b66e:	2206      	movs	r2, #6
 800b670:	f7f4 fdb6 	bl	80001e0 <memchr>
 800b674:	2800      	cmp	r0, #0
 800b676:	d03f      	beq.n	800b6f8 <_vfiprintf_r+0x22c>
 800b678:	4b29      	ldr	r3, [pc, #164]	; (800b720 <_vfiprintf_r+0x254>)
 800b67a:	bb1b      	cbnz	r3, 800b6c4 <_vfiprintf_r+0x1f8>
 800b67c:	9b03      	ldr	r3, [sp, #12]
 800b67e:	3307      	adds	r3, #7
 800b680:	f023 0307 	bic.w	r3, r3, #7
 800b684:	3308      	adds	r3, #8
 800b686:	9303      	str	r3, [sp, #12]
 800b688:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b68a:	443b      	add	r3, r7
 800b68c:	9309      	str	r3, [sp, #36]	; 0x24
 800b68e:	e767      	b.n	800b560 <_vfiprintf_r+0x94>
 800b690:	fb0c 3202 	mla	r2, ip, r2, r3
 800b694:	460c      	mov	r4, r1
 800b696:	2001      	movs	r0, #1
 800b698:	e7a5      	b.n	800b5e6 <_vfiprintf_r+0x11a>
 800b69a:	2300      	movs	r3, #0
 800b69c:	3401      	adds	r4, #1
 800b69e:	9305      	str	r3, [sp, #20]
 800b6a0:	4619      	mov	r1, r3
 800b6a2:	f04f 0c0a 	mov.w	ip, #10
 800b6a6:	4620      	mov	r0, r4
 800b6a8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b6ac:	3a30      	subs	r2, #48	; 0x30
 800b6ae:	2a09      	cmp	r2, #9
 800b6b0:	d903      	bls.n	800b6ba <_vfiprintf_r+0x1ee>
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	d0c5      	beq.n	800b642 <_vfiprintf_r+0x176>
 800b6b6:	9105      	str	r1, [sp, #20]
 800b6b8:	e7c3      	b.n	800b642 <_vfiprintf_r+0x176>
 800b6ba:	fb0c 2101 	mla	r1, ip, r1, r2
 800b6be:	4604      	mov	r4, r0
 800b6c0:	2301      	movs	r3, #1
 800b6c2:	e7f0      	b.n	800b6a6 <_vfiprintf_r+0x1da>
 800b6c4:	ab03      	add	r3, sp, #12
 800b6c6:	9300      	str	r3, [sp, #0]
 800b6c8:	462a      	mov	r2, r5
 800b6ca:	4b16      	ldr	r3, [pc, #88]	; (800b724 <_vfiprintf_r+0x258>)
 800b6cc:	a904      	add	r1, sp, #16
 800b6ce:	4630      	mov	r0, r6
 800b6d0:	f7fc f860 	bl	8007794 <_printf_float>
 800b6d4:	4607      	mov	r7, r0
 800b6d6:	1c78      	adds	r0, r7, #1
 800b6d8:	d1d6      	bne.n	800b688 <_vfiprintf_r+0x1bc>
 800b6da:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b6dc:	07d9      	lsls	r1, r3, #31
 800b6de:	d405      	bmi.n	800b6ec <_vfiprintf_r+0x220>
 800b6e0:	89ab      	ldrh	r3, [r5, #12]
 800b6e2:	059a      	lsls	r2, r3, #22
 800b6e4:	d402      	bmi.n	800b6ec <_vfiprintf_r+0x220>
 800b6e6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b6e8:	f000 fadd 	bl	800bca6 <__retarget_lock_release_recursive>
 800b6ec:	89ab      	ldrh	r3, [r5, #12]
 800b6ee:	065b      	lsls	r3, r3, #25
 800b6f0:	f53f af12 	bmi.w	800b518 <_vfiprintf_r+0x4c>
 800b6f4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b6f6:	e711      	b.n	800b51c <_vfiprintf_r+0x50>
 800b6f8:	ab03      	add	r3, sp, #12
 800b6fa:	9300      	str	r3, [sp, #0]
 800b6fc:	462a      	mov	r2, r5
 800b6fe:	4b09      	ldr	r3, [pc, #36]	; (800b724 <_vfiprintf_r+0x258>)
 800b700:	a904      	add	r1, sp, #16
 800b702:	4630      	mov	r0, r6
 800b704:	f7fc faea 	bl	8007cdc <_printf_i>
 800b708:	e7e4      	b.n	800b6d4 <_vfiprintf_r+0x208>
 800b70a:	bf00      	nop
 800b70c:	0800c610 	.word	0x0800c610
 800b710:	0800c630 	.word	0x0800c630
 800b714:	0800c5f0 	.word	0x0800c5f0
 800b718:	0800c5dc 	.word	0x0800c5dc
 800b71c:	0800c5e6 	.word	0x0800c5e6
 800b720:	08007795 	.word	0x08007795
 800b724:	0800b4a7 	.word	0x0800b4a7
 800b728:	0800c5e2 	.word	0x0800c5e2
 800b72c:	00000000 	.word	0x00000000

0800b730 <nan>:
 800b730:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800b738 <nan+0x8>
 800b734:	4770      	bx	lr
 800b736:	bf00      	nop
 800b738:	00000000 	.word	0x00000000
 800b73c:	7ff80000 	.word	0x7ff80000

0800b740 <_sbrk_r>:
 800b740:	b538      	push	{r3, r4, r5, lr}
 800b742:	4d06      	ldr	r5, [pc, #24]	; (800b75c <_sbrk_r+0x1c>)
 800b744:	2300      	movs	r3, #0
 800b746:	4604      	mov	r4, r0
 800b748:	4608      	mov	r0, r1
 800b74a:	602b      	str	r3, [r5, #0]
 800b74c:	f7f8 fc1a 	bl	8003f84 <_sbrk>
 800b750:	1c43      	adds	r3, r0, #1
 800b752:	d102      	bne.n	800b75a <_sbrk_r+0x1a>
 800b754:	682b      	ldr	r3, [r5, #0]
 800b756:	b103      	cbz	r3, 800b75a <_sbrk_r+0x1a>
 800b758:	6023      	str	r3, [r4, #0]
 800b75a:	bd38      	pop	{r3, r4, r5, pc}
 800b75c:	20003408 	.word	0x20003408

0800b760 <strncmp>:
 800b760:	b510      	push	{r4, lr}
 800b762:	b17a      	cbz	r2, 800b784 <strncmp+0x24>
 800b764:	4603      	mov	r3, r0
 800b766:	3901      	subs	r1, #1
 800b768:	1884      	adds	r4, r0, r2
 800b76a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800b76e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800b772:	4290      	cmp	r0, r2
 800b774:	d101      	bne.n	800b77a <strncmp+0x1a>
 800b776:	42a3      	cmp	r3, r4
 800b778:	d101      	bne.n	800b77e <strncmp+0x1e>
 800b77a:	1a80      	subs	r0, r0, r2
 800b77c:	bd10      	pop	{r4, pc}
 800b77e:	2800      	cmp	r0, #0
 800b780:	d1f3      	bne.n	800b76a <strncmp+0xa>
 800b782:	e7fa      	b.n	800b77a <strncmp+0x1a>
 800b784:	4610      	mov	r0, r2
 800b786:	e7f9      	b.n	800b77c <strncmp+0x1c>

0800b788 <__swbuf_r>:
 800b788:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b78a:	460e      	mov	r6, r1
 800b78c:	4614      	mov	r4, r2
 800b78e:	4605      	mov	r5, r0
 800b790:	b118      	cbz	r0, 800b79a <__swbuf_r+0x12>
 800b792:	6983      	ldr	r3, [r0, #24]
 800b794:	b90b      	cbnz	r3, 800b79a <__swbuf_r+0x12>
 800b796:	f000 f9e7 	bl	800bb68 <__sinit>
 800b79a:	4b21      	ldr	r3, [pc, #132]	; (800b820 <__swbuf_r+0x98>)
 800b79c:	429c      	cmp	r4, r3
 800b79e:	d12b      	bne.n	800b7f8 <__swbuf_r+0x70>
 800b7a0:	686c      	ldr	r4, [r5, #4]
 800b7a2:	69a3      	ldr	r3, [r4, #24]
 800b7a4:	60a3      	str	r3, [r4, #8]
 800b7a6:	89a3      	ldrh	r3, [r4, #12]
 800b7a8:	071a      	lsls	r2, r3, #28
 800b7aa:	d52f      	bpl.n	800b80c <__swbuf_r+0x84>
 800b7ac:	6923      	ldr	r3, [r4, #16]
 800b7ae:	b36b      	cbz	r3, 800b80c <__swbuf_r+0x84>
 800b7b0:	6923      	ldr	r3, [r4, #16]
 800b7b2:	6820      	ldr	r0, [r4, #0]
 800b7b4:	1ac0      	subs	r0, r0, r3
 800b7b6:	6963      	ldr	r3, [r4, #20]
 800b7b8:	b2f6      	uxtb	r6, r6
 800b7ba:	4283      	cmp	r3, r0
 800b7bc:	4637      	mov	r7, r6
 800b7be:	dc04      	bgt.n	800b7ca <__swbuf_r+0x42>
 800b7c0:	4621      	mov	r1, r4
 800b7c2:	4628      	mov	r0, r5
 800b7c4:	f000 f93c 	bl	800ba40 <_fflush_r>
 800b7c8:	bb30      	cbnz	r0, 800b818 <__swbuf_r+0x90>
 800b7ca:	68a3      	ldr	r3, [r4, #8]
 800b7cc:	3b01      	subs	r3, #1
 800b7ce:	60a3      	str	r3, [r4, #8]
 800b7d0:	6823      	ldr	r3, [r4, #0]
 800b7d2:	1c5a      	adds	r2, r3, #1
 800b7d4:	6022      	str	r2, [r4, #0]
 800b7d6:	701e      	strb	r6, [r3, #0]
 800b7d8:	6963      	ldr	r3, [r4, #20]
 800b7da:	3001      	adds	r0, #1
 800b7dc:	4283      	cmp	r3, r0
 800b7de:	d004      	beq.n	800b7ea <__swbuf_r+0x62>
 800b7e0:	89a3      	ldrh	r3, [r4, #12]
 800b7e2:	07db      	lsls	r3, r3, #31
 800b7e4:	d506      	bpl.n	800b7f4 <__swbuf_r+0x6c>
 800b7e6:	2e0a      	cmp	r6, #10
 800b7e8:	d104      	bne.n	800b7f4 <__swbuf_r+0x6c>
 800b7ea:	4621      	mov	r1, r4
 800b7ec:	4628      	mov	r0, r5
 800b7ee:	f000 f927 	bl	800ba40 <_fflush_r>
 800b7f2:	b988      	cbnz	r0, 800b818 <__swbuf_r+0x90>
 800b7f4:	4638      	mov	r0, r7
 800b7f6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b7f8:	4b0a      	ldr	r3, [pc, #40]	; (800b824 <__swbuf_r+0x9c>)
 800b7fa:	429c      	cmp	r4, r3
 800b7fc:	d101      	bne.n	800b802 <__swbuf_r+0x7a>
 800b7fe:	68ac      	ldr	r4, [r5, #8]
 800b800:	e7cf      	b.n	800b7a2 <__swbuf_r+0x1a>
 800b802:	4b09      	ldr	r3, [pc, #36]	; (800b828 <__swbuf_r+0xa0>)
 800b804:	429c      	cmp	r4, r3
 800b806:	bf08      	it	eq
 800b808:	68ec      	ldreq	r4, [r5, #12]
 800b80a:	e7ca      	b.n	800b7a2 <__swbuf_r+0x1a>
 800b80c:	4621      	mov	r1, r4
 800b80e:	4628      	mov	r0, r5
 800b810:	f000 f81a 	bl	800b848 <__swsetup_r>
 800b814:	2800      	cmp	r0, #0
 800b816:	d0cb      	beq.n	800b7b0 <__swbuf_r+0x28>
 800b818:	f04f 37ff 	mov.w	r7, #4294967295
 800b81c:	e7ea      	b.n	800b7f4 <__swbuf_r+0x6c>
 800b81e:	bf00      	nop
 800b820:	0800c610 	.word	0x0800c610
 800b824:	0800c630 	.word	0x0800c630
 800b828:	0800c5f0 	.word	0x0800c5f0

0800b82c <__ascii_wctomb>:
 800b82c:	b149      	cbz	r1, 800b842 <__ascii_wctomb+0x16>
 800b82e:	2aff      	cmp	r2, #255	; 0xff
 800b830:	bf85      	ittet	hi
 800b832:	238a      	movhi	r3, #138	; 0x8a
 800b834:	6003      	strhi	r3, [r0, #0]
 800b836:	700a      	strbls	r2, [r1, #0]
 800b838:	f04f 30ff 	movhi.w	r0, #4294967295
 800b83c:	bf98      	it	ls
 800b83e:	2001      	movls	r0, #1
 800b840:	4770      	bx	lr
 800b842:	4608      	mov	r0, r1
 800b844:	4770      	bx	lr
	...

0800b848 <__swsetup_r>:
 800b848:	4b32      	ldr	r3, [pc, #200]	; (800b914 <__swsetup_r+0xcc>)
 800b84a:	b570      	push	{r4, r5, r6, lr}
 800b84c:	681d      	ldr	r5, [r3, #0]
 800b84e:	4606      	mov	r6, r0
 800b850:	460c      	mov	r4, r1
 800b852:	b125      	cbz	r5, 800b85e <__swsetup_r+0x16>
 800b854:	69ab      	ldr	r3, [r5, #24]
 800b856:	b913      	cbnz	r3, 800b85e <__swsetup_r+0x16>
 800b858:	4628      	mov	r0, r5
 800b85a:	f000 f985 	bl	800bb68 <__sinit>
 800b85e:	4b2e      	ldr	r3, [pc, #184]	; (800b918 <__swsetup_r+0xd0>)
 800b860:	429c      	cmp	r4, r3
 800b862:	d10f      	bne.n	800b884 <__swsetup_r+0x3c>
 800b864:	686c      	ldr	r4, [r5, #4]
 800b866:	89a3      	ldrh	r3, [r4, #12]
 800b868:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b86c:	0719      	lsls	r1, r3, #28
 800b86e:	d42c      	bmi.n	800b8ca <__swsetup_r+0x82>
 800b870:	06dd      	lsls	r5, r3, #27
 800b872:	d411      	bmi.n	800b898 <__swsetup_r+0x50>
 800b874:	2309      	movs	r3, #9
 800b876:	6033      	str	r3, [r6, #0]
 800b878:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800b87c:	81a3      	strh	r3, [r4, #12]
 800b87e:	f04f 30ff 	mov.w	r0, #4294967295
 800b882:	e03e      	b.n	800b902 <__swsetup_r+0xba>
 800b884:	4b25      	ldr	r3, [pc, #148]	; (800b91c <__swsetup_r+0xd4>)
 800b886:	429c      	cmp	r4, r3
 800b888:	d101      	bne.n	800b88e <__swsetup_r+0x46>
 800b88a:	68ac      	ldr	r4, [r5, #8]
 800b88c:	e7eb      	b.n	800b866 <__swsetup_r+0x1e>
 800b88e:	4b24      	ldr	r3, [pc, #144]	; (800b920 <__swsetup_r+0xd8>)
 800b890:	429c      	cmp	r4, r3
 800b892:	bf08      	it	eq
 800b894:	68ec      	ldreq	r4, [r5, #12]
 800b896:	e7e6      	b.n	800b866 <__swsetup_r+0x1e>
 800b898:	0758      	lsls	r0, r3, #29
 800b89a:	d512      	bpl.n	800b8c2 <__swsetup_r+0x7a>
 800b89c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b89e:	b141      	cbz	r1, 800b8b2 <__swsetup_r+0x6a>
 800b8a0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b8a4:	4299      	cmp	r1, r3
 800b8a6:	d002      	beq.n	800b8ae <__swsetup_r+0x66>
 800b8a8:	4630      	mov	r0, r6
 800b8aa:	f7ff fba9 	bl	800b000 <_free_r>
 800b8ae:	2300      	movs	r3, #0
 800b8b0:	6363      	str	r3, [r4, #52]	; 0x34
 800b8b2:	89a3      	ldrh	r3, [r4, #12]
 800b8b4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800b8b8:	81a3      	strh	r3, [r4, #12]
 800b8ba:	2300      	movs	r3, #0
 800b8bc:	6063      	str	r3, [r4, #4]
 800b8be:	6923      	ldr	r3, [r4, #16]
 800b8c0:	6023      	str	r3, [r4, #0]
 800b8c2:	89a3      	ldrh	r3, [r4, #12]
 800b8c4:	f043 0308 	orr.w	r3, r3, #8
 800b8c8:	81a3      	strh	r3, [r4, #12]
 800b8ca:	6923      	ldr	r3, [r4, #16]
 800b8cc:	b94b      	cbnz	r3, 800b8e2 <__swsetup_r+0x9a>
 800b8ce:	89a3      	ldrh	r3, [r4, #12]
 800b8d0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800b8d4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800b8d8:	d003      	beq.n	800b8e2 <__swsetup_r+0x9a>
 800b8da:	4621      	mov	r1, r4
 800b8dc:	4630      	mov	r0, r6
 800b8de:	f000 fa09 	bl	800bcf4 <__smakebuf_r>
 800b8e2:	89a0      	ldrh	r0, [r4, #12]
 800b8e4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800b8e8:	f010 0301 	ands.w	r3, r0, #1
 800b8ec:	d00a      	beq.n	800b904 <__swsetup_r+0xbc>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	60a3      	str	r3, [r4, #8]
 800b8f2:	6963      	ldr	r3, [r4, #20]
 800b8f4:	425b      	negs	r3, r3
 800b8f6:	61a3      	str	r3, [r4, #24]
 800b8f8:	6923      	ldr	r3, [r4, #16]
 800b8fa:	b943      	cbnz	r3, 800b90e <__swsetup_r+0xc6>
 800b8fc:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800b900:	d1ba      	bne.n	800b878 <__swsetup_r+0x30>
 800b902:	bd70      	pop	{r4, r5, r6, pc}
 800b904:	0781      	lsls	r1, r0, #30
 800b906:	bf58      	it	pl
 800b908:	6963      	ldrpl	r3, [r4, #20]
 800b90a:	60a3      	str	r3, [r4, #8]
 800b90c:	e7f4      	b.n	800b8f8 <__swsetup_r+0xb0>
 800b90e:	2000      	movs	r0, #0
 800b910:	e7f7      	b.n	800b902 <__swsetup_r+0xba>
 800b912:	bf00      	nop
 800b914:	20000020 	.word	0x20000020
 800b918:	0800c610 	.word	0x0800c610
 800b91c:	0800c630 	.word	0x0800c630
 800b920:	0800c5f0 	.word	0x0800c5f0

0800b924 <abort>:
 800b924:	b508      	push	{r3, lr}
 800b926:	2006      	movs	r0, #6
 800b928:	f000 faa2 	bl	800be70 <raise>
 800b92c:	2001      	movs	r0, #1
 800b92e:	f7f8 fab1 	bl	8003e94 <_exit>
	...

0800b934 <__sflush_r>:
 800b934:	898a      	ldrh	r2, [r1, #12]
 800b936:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b93a:	4605      	mov	r5, r0
 800b93c:	0710      	lsls	r0, r2, #28
 800b93e:	460c      	mov	r4, r1
 800b940:	d458      	bmi.n	800b9f4 <__sflush_r+0xc0>
 800b942:	684b      	ldr	r3, [r1, #4]
 800b944:	2b00      	cmp	r3, #0
 800b946:	dc05      	bgt.n	800b954 <__sflush_r+0x20>
 800b948:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800b94a:	2b00      	cmp	r3, #0
 800b94c:	dc02      	bgt.n	800b954 <__sflush_r+0x20>
 800b94e:	2000      	movs	r0, #0
 800b950:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b954:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b956:	2e00      	cmp	r6, #0
 800b958:	d0f9      	beq.n	800b94e <__sflush_r+0x1a>
 800b95a:	2300      	movs	r3, #0
 800b95c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800b960:	682f      	ldr	r7, [r5, #0]
 800b962:	602b      	str	r3, [r5, #0]
 800b964:	d032      	beq.n	800b9cc <__sflush_r+0x98>
 800b966:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800b968:	89a3      	ldrh	r3, [r4, #12]
 800b96a:	075a      	lsls	r2, r3, #29
 800b96c:	d505      	bpl.n	800b97a <__sflush_r+0x46>
 800b96e:	6863      	ldr	r3, [r4, #4]
 800b970:	1ac0      	subs	r0, r0, r3
 800b972:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800b974:	b10b      	cbz	r3, 800b97a <__sflush_r+0x46>
 800b976:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800b978:	1ac0      	subs	r0, r0, r3
 800b97a:	2300      	movs	r3, #0
 800b97c:	4602      	mov	r2, r0
 800b97e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800b980:	6a21      	ldr	r1, [r4, #32]
 800b982:	4628      	mov	r0, r5
 800b984:	47b0      	blx	r6
 800b986:	1c43      	adds	r3, r0, #1
 800b988:	89a3      	ldrh	r3, [r4, #12]
 800b98a:	d106      	bne.n	800b99a <__sflush_r+0x66>
 800b98c:	6829      	ldr	r1, [r5, #0]
 800b98e:	291d      	cmp	r1, #29
 800b990:	d82c      	bhi.n	800b9ec <__sflush_r+0xb8>
 800b992:	4a2a      	ldr	r2, [pc, #168]	; (800ba3c <__sflush_r+0x108>)
 800b994:	40ca      	lsrs	r2, r1
 800b996:	07d6      	lsls	r6, r2, #31
 800b998:	d528      	bpl.n	800b9ec <__sflush_r+0xb8>
 800b99a:	2200      	movs	r2, #0
 800b99c:	6062      	str	r2, [r4, #4]
 800b99e:	04d9      	lsls	r1, r3, #19
 800b9a0:	6922      	ldr	r2, [r4, #16]
 800b9a2:	6022      	str	r2, [r4, #0]
 800b9a4:	d504      	bpl.n	800b9b0 <__sflush_r+0x7c>
 800b9a6:	1c42      	adds	r2, r0, #1
 800b9a8:	d101      	bne.n	800b9ae <__sflush_r+0x7a>
 800b9aa:	682b      	ldr	r3, [r5, #0]
 800b9ac:	b903      	cbnz	r3, 800b9b0 <__sflush_r+0x7c>
 800b9ae:	6560      	str	r0, [r4, #84]	; 0x54
 800b9b0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800b9b2:	602f      	str	r7, [r5, #0]
 800b9b4:	2900      	cmp	r1, #0
 800b9b6:	d0ca      	beq.n	800b94e <__sflush_r+0x1a>
 800b9b8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800b9bc:	4299      	cmp	r1, r3
 800b9be:	d002      	beq.n	800b9c6 <__sflush_r+0x92>
 800b9c0:	4628      	mov	r0, r5
 800b9c2:	f7ff fb1d 	bl	800b000 <_free_r>
 800b9c6:	2000      	movs	r0, #0
 800b9c8:	6360      	str	r0, [r4, #52]	; 0x34
 800b9ca:	e7c1      	b.n	800b950 <__sflush_r+0x1c>
 800b9cc:	6a21      	ldr	r1, [r4, #32]
 800b9ce:	2301      	movs	r3, #1
 800b9d0:	4628      	mov	r0, r5
 800b9d2:	47b0      	blx	r6
 800b9d4:	1c41      	adds	r1, r0, #1
 800b9d6:	d1c7      	bne.n	800b968 <__sflush_r+0x34>
 800b9d8:	682b      	ldr	r3, [r5, #0]
 800b9da:	2b00      	cmp	r3, #0
 800b9dc:	d0c4      	beq.n	800b968 <__sflush_r+0x34>
 800b9de:	2b1d      	cmp	r3, #29
 800b9e0:	d001      	beq.n	800b9e6 <__sflush_r+0xb2>
 800b9e2:	2b16      	cmp	r3, #22
 800b9e4:	d101      	bne.n	800b9ea <__sflush_r+0xb6>
 800b9e6:	602f      	str	r7, [r5, #0]
 800b9e8:	e7b1      	b.n	800b94e <__sflush_r+0x1a>
 800b9ea:	89a3      	ldrh	r3, [r4, #12]
 800b9ec:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b9f0:	81a3      	strh	r3, [r4, #12]
 800b9f2:	e7ad      	b.n	800b950 <__sflush_r+0x1c>
 800b9f4:	690f      	ldr	r7, [r1, #16]
 800b9f6:	2f00      	cmp	r7, #0
 800b9f8:	d0a9      	beq.n	800b94e <__sflush_r+0x1a>
 800b9fa:	0793      	lsls	r3, r2, #30
 800b9fc:	680e      	ldr	r6, [r1, #0]
 800b9fe:	bf08      	it	eq
 800ba00:	694b      	ldreq	r3, [r1, #20]
 800ba02:	600f      	str	r7, [r1, #0]
 800ba04:	bf18      	it	ne
 800ba06:	2300      	movne	r3, #0
 800ba08:	eba6 0807 	sub.w	r8, r6, r7
 800ba0c:	608b      	str	r3, [r1, #8]
 800ba0e:	f1b8 0f00 	cmp.w	r8, #0
 800ba12:	dd9c      	ble.n	800b94e <__sflush_r+0x1a>
 800ba14:	6a21      	ldr	r1, [r4, #32]
 800ba16:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800ba18:	4643      	mov	r3, r8
 800ba1a:	463a      	mov	r2, r7
 800ba1c:	4628      	mov	r0, r5
 800ba1e:	47b0      	blx	r6
 800ba20:	2800      	cmp	r0, #0
 800ba22:	dc06      	bgt.n	800ba32 <__sflush_r+0xfe>
 800ba24:	89a3      	ldrh	r3, [r4, #12]
 800ba26:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ba2a:	81a3      	strh	r3, [r4, #12]
 800ba2c:	f04f 30ff 	mov.w	r0, #4294967295
 800ba30:	e78e      	b.n	800b950 <__sflush_r+0x1c>
 800ba32:	4407      	add	r7, r0
 800ba34:	eba8 0800 	sub.w	r8, r8, r0
 800ba38:	e7e9      	b.n	800ba0e <__sflush_r+0xda>
 800ba3a:	bf00      	nop
 800ba3c:	20400001 	.word	0x20400001

0800ba40 <_fflush_r>:
 800ba40:	b538      	push	{r3, r4, r5, lr}
 800ba42:	690b      	ldr	r3, [r1, #16]
 800ba44:	4605      	mov	r5, r0
 800ba46:	460c      	mov	r4, r1
 800ba48:	b913      	cbnz	r3, 800ba50 <_fflush_r+0x10>
 800ba4a:	2500      	movs	r5, #0
 800ba4c:	4628      	mov	r0, r5
 800ba4e:	bd38      	pop	{r3, r4, r5, pc}
 800ba50:	b118      	cbz	r0, 800ba5a <_fflush_r+0x1a>
 800ba52:	6983      	ldr	r3, [r0, #24]
 800ba54:	b90b      	cbnz	r3, 800ba5a <_fflush_r+0x1a>
 800ba56:	f000 f887 	bl	800bb68 <__sinit>
 800ba5a:	4b14      	ldr	r3, [pc, #80]	; (800baac <_fflush_r+0x6c>)
 800ba5c:	429c      	cmp	r4, r3
 800ba5e:	d11b      	bne.n	800ba98 <_fflush_r+0x58>
 800ba60:	686c      	ldr	r4, [r5, #4]
 800ba62:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ba66:	2b00      	cmp	r3, #0
 800ba68:	d0ef      	beq.n	800ba4a <_fflush_r+0xa>
 800ba6a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800ba6c:	07d0      	lsls	r0, r2, #31
 800ba6e:	d404      	bmi.n	800ba7a <_fflush_r+0x3a>
 800ba70:	0599      	lsls	r1, r3, #22
 800ba72:	d402      	bmi.n	800ba7a <_fflush_r+0x3a>
 800ba74:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba76:	f000 f915 	bl	800bca4 <__retarget_lock_acquire_recursive>
 800ba7a:	4628      	mov	r0, r5
 800ba7c:	4621      	mov	r1, r4
 800ba7e:	f7ff ff59 	bl	800b934 <__sflush_r>
 800ba82:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800ba84:	07da      	lsls	r2, r3, #31
 800ba86:	4605      	mov	r5, r0
 800ba88:	d4e0      	bmi.n	800ba4c <_fflush_r+0xc>
 800ba8a:	89a3      	ldrh	r3, [r4, #12]
 800ba8c:	059b      	lsls	r3, r3, #22
 800ba8e:	d4dd      	bmi.n	800ba4c <_fflush_r+0xc>
 800ba90:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800ba92:	f000 f908 	bl	800bca6 <__retarget_lock_release_recursive>
 800ba96:	e7d9      	b.n	800ba4c <_fflush_r+0xc>
 800ba98:	4b05      	ldr	r3, [pc, #20]	; (800bab0 <_fflush_r+0x70>)
 800ba9a:	429c      	cmp	r4, r3
 800ba9c:	d101      	bne.n	800baa2 <_fflush_r+0x62>
 800ba9e:	68ac      	ldr	r4, [r5, #8]
 800baa0:	e7df      	b.n	800ba62 <_fflush_r+0x22>
 800baa2:	4b04      	ldr	r3, [pc, #16]	; (800bab4 <_fflush_r+0x74>)
 800baa4:	429c      	cmp	r4, r3
 800baa6:	bf08      	it	eq
 800baa8:	68ec      	ldreq	r4, [r5, #12]
 800baaa:	e7da      	b.n	800ba62 <_fflush_r+0x22>
 800baac:	0800c610 	.word	0x0800c610
 800bab0:	0800c630 	.word	0x0800c630
 800bab4:	0800c5f0 	.word	0x0800c5f0

0800bab8 <std>:
 800bab8:	2300      	movs	r3, #0
 800baba:	b510      	push	{r4, lr}
 800babc:	4604      	mov	r4, r0
 800babe:	e9c0 3300 	strd	r3, r3, [r0]
 800bac2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800bac6:	6083      	str	r3, [r0, #8]
 800bac8:	8181      	strh	r1, [r0, #12]
 800baca:	6643      	str	r3, [r0, #100]	; 0x64
 800bacc:	81c2      	strh	r2, [r0, #14]
 800bace:	6183      	str	r3, [r0, #24]
 800bad0:	4619      	mov	r1, r3
 800bad2:	2208      	movs	r2, #8
 800bad4:	305c      	adds	r0, #92	; 0x5c
 800bad6:	f7fb fdb5 	bl	8007644 <memset>
 800bada:	4b05      	ldr	r3, [pc, #20]	; (800baf0 <std+0x38>)
 800badc:	6263      	str	r3, [r4, #36]	; 0x24
 800bade:	4b05      	ldr	r3, [pc, #20]	; (800baf4 <std+0x3c>)
 800bae0:	62a3      	str	r3, [r4, #40]	; 0x28
 800bae2:	4b05      	ldr	r3, [pc, #20]	; (800baf8 <std+0x40>)
 800bae4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800bae6:	4b05      	ldr	r3, [pc, #20]	; (800bafc <std+0x44>)
 800bae8:	6224      	str	r4, [r4, #32]
 800baea:	6323      	str	r3, [r4, #48]	; 0x30
 800baec:	bd10      	pop	{r4, pc}
 800baee:	bf00      	nop
 800baf0:	0800bea9 	.word	0x0800bea9
 800baf4:	0800becb 	.word	0x0800becb
 800baf8:	0800bf03 	.word	0x0800bf03
 800bafc:	0800bf27 	.word	0x0800bf27

0800bb00 <_cleanup_r>:
 800bb00:	4901      	ldr	r1, [pc, #4]	; (800bb08 <_cleanup_r+0x8>)
 800bb02:	f000 b8af 	b.w	800bc64 <_fwalk_reent>
 800bb06:	bf00      	nop
 800bb08:	0800ba41 	.word	0x0800ba41

0800bb0c <__sfmoreglue>:
 800bb0c:	b570      	push	{r4, r5, r6, lr}
 800bb0e:	2268      	movs	r2, #104	; 0x68
 800bb10:	1e4d      	subs	r5, r1, #1
 800bb12:	4355      	muls	r5, r2
 800bb14:	460e      	mov	r6, r1
 800bb16:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800bb1a:	f7ff fadd 	bl	800b0d8 <_malloc_r>
 800bb1e:	4604      	mov	r4, r0
 800bb20:	b140      	cbz	r0, 800bb34 <__sfmoreglue+0x28>
 800bb22:	2100      	movs	r1, #0
 800bb24:	e9c0 1600 	strd	r1, r6, [r0]
 800bb28:	300c      	adds	r0, #12
 800bb2a:	60a0      	str	r0, [r4, #8]
 800bb2c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800bb30:	f7fb fd88 	bl	8007644 <memset>
 800bb34:	4620      	mov	r0, r4
 800bb36:	bd70      	pop	{r4, r5, r6, pc}

0800bb38 <__sfp_lock_acquire>:
 800bb38:	4801      	ldr	r0, [pc, #4]	; (800bb40 <__sfp_lock_acquire+0x8>)
 800bb3a:	f000 b8b3 	b.w	800bca4 <__retarget_lock_acquire_recursive>
 800bb3e:	bf00      	nop
 800bb40:	20003405 	.word	0x20003405

0800bb44 <__sfp_lock_release>:
 800bb44:	4801      	ldr	r0, [pc, #4]	; (800bb4c <__sfp_lock_release+0x8>)
 800bb46:	f000 b8ae 	b.w	800bca6 <__retarget_lock_release_recursive>
 800bb4a:	bf00      	nop
 800bb4c:	20003405 	.word	0x20003405

0800bb50 <__sinit_lock_acquire>:
 800bb50:	4801      	ldr	r0, [pc, #4]	; (800bb58 <__sinit_lock_acquire+0x8>)
 800bb52:	f000 b8a7 	b.w	800bca4 <__retarget_lock_acquire_recursive>
 800bb56:	bf00      	nop
 800bb58:	20003406 	.word	0x20003406

0800bb5c <__sinit_lock_release>:
 800bb5c:	4801      	ldr	r0, [pc, #4]	; (800bb64 <__sinit_lock_release+0x8>)
 800bb5e:	f000 b8a2 	b.w	800bca6 <__retarget_lock_release_recursive>
 800bb62:	bf00      	nop
 800bb64:	20003406 	.word	0x20003406

0800bb68 <__sinit>:
 800bb68:	b510      	push	{r4, lr}
 800bb6a:	4604      	mov	r4, r0
 800bb6c:	f7ff fff0 	bl	800bb50 <__sinit_lock_acquire>
 800bb70:	69a3      	ldr	r3, [r4, #24]
 800bb72:	b11b      	cbz	r3, 800bb7c <__sinit+0x14>
 800bb74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bb78:	f7ff bff0 	b.w	800bb5c <__sinit_lock_release>
 800bb7c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bb80:	6523      	str	r3, [r4, #80]	; 0x50
 800bb82:	4b13      	ldr	r3, [pc, #76]	; (800bbd0 <__sinit+0x68>)
 800bb84:	4a13      	ldr	r2, [pc, #76]	; (800bbd4 <__sinit+0x6c>)
 800bb86:	681b      	ldr	r3, [r3, #0]
 800bb88:	62a2      	str	r2, [r4, #40]	; 0x28
 800bb8a:	42a3      	cmp	r3, r4
 800bb8c:	bf04      	itt	eq
 800bb8e:	2301      	moveq	r3, #1
 800bb90:	61a3      	streq	r3, [r4, #24]
 800bb92:	4620      	mov	r0, r4
 800bb94:	f000 f820 	bl	800bbd8 <__sfp>
 800bb98:	6060      	str	r0, [r4, #4]
 800bb9a:	4620      	mov	r0, r4
 800bb9c:	f000 f81c 	bl	800bbd8 <__sfp>
 800bba0:	60a0      	str	r0, [r4, #8]
 800bba2:	4620      	mov	r0, r4
 800bba4:	f000 f818 	bl	800bbd8 <__sfp>
 800bba8:	2200      	movs	r2, #0
 800bbaa:	60e0      	str	r0, [r4, #12]
 800bbac:	2104      	movs	r1, #4
 800bbae:	6860      	ldr	r0, [r4, #4]
 800bbb0:	f7ff ff82 	bl	800bab8 <std>
 800bbb4:	68a0      	ldr	r0, [r4, #8]
 800bbb6:	2201      	movs	r2, #1
 800bbb8:	2109      	movs	r1, #9
 800bbba:	f7ff ff7d 	bl	800bab8 <std>
 800bbbe:	68e0      	ldr	r0, [r4, #12]
 800bbc0:	2202      	movs	r2, #2
 800bbc2:	2112      	movs	r1, #18
 800bbc4:	f7ff ff78 	bl	800bab8 <std>
 800bbc8:	2301      	movs	r3, #1
 800bbca:	61a3      	str	r3, [r4, #24]
 800bbcc:	e7d2      	b.n	800bb74 <__sinit+0xc>
 800bbce:	bf00      	nop
 800bbd0:	0800c150 	.word	0x0800c150
 800bbd4:	0800bb01 	.word	0x0800bb01

0800bbd8 <__sfp>:
 800bbd8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bbda:	4607      	mov	r7, r0
 800bbdc:	f7ff ffac 	bl	800bb38 <__sfp_lock_acquire>
 800bbe0:	4b1e      	ldr	r3, [pc, #120]	; (800bc5c <__sfp+0x84>)
 800bbe2:	681e      	ldr	r6, [r3, #0]
 800bbe4:	69b3      	ldr	r3, [r6, #24]
 800bbe6:	b913      	cbnz	r3, 800bbee <__sfp+0x16>
 800bbe8:	4630      	mov	r0, r6
 800bbea:	f7ff ffbd 	bl	800bb68 <__sinit>
 800bbee:	3648      	adds	r6, #72	; 0x48
 800bbf0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bbf4:	3b01      	subs	r3, #1
 800bbf6:	d503      	bpl.n	800bc00 <__sfp+0x28>
 800bbf8:	6833      	ldr	r3, [r6, #0]
 800bbfa:	b30b      	cbz	r3, 800bc40 <__sfp+0x68>
 800bbfc:	6836      	ldr	r6, [r6, #0]
 800bbfe:	e7f7      	b.n	800bbf0 <__sfp+0x18>
 800bc00:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bc04:	b9d5      	cbnz	r5, 800bc3c <__sfp+0x64>
 800bc06:	4b16      	ldr	r3, [pc, #88]	; (800bc60 <__sfp+0x88>)
 800bc08:	60e3      	str	r3, [r4, #12]
 800bc0a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bc0e:	6665      	str	r5, [r4, #100]	; 0x64
 800bc10:	f000 f847 	bl	800bca2 <__retarget_lock_init_recursive>
 800bc14:	f7ff ff96 	bl	800bb44 <__sfp_lock_release>
 800bc18:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bc1c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bc20:	6025      	str	r5, [r4, #0]
 800bc22:	61a5      	str	r5, [r4, #24]
 800bc24:	2208      	movs	r2, #8
 800bc26:	4629      	mov	r1, r5
 800bc28:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bc2c:	f7fb fd0a 	bl	8007644 <memset>
 800bc30:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bc34:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bc38:	4620      	mov	r0, r4
 800bc3a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bc3c:	3468      	adds	r4, #104	; 0x68
 800bc3e:	e7d9      	b.n	800bbf4 <__sfp+0x1c>
 800bc40:	2104      	movs	r1, #4
 800bc42:	4638      	mov	r0, r7
 800bc44:	f7ff ff62 	bl	800bb0c <__sfmoreglue>
 800bc48:	4604      	mov	r4, r0
 800bc4a:	6030      	str	r0, [r6, #0]
 800bc4c:	2800      	cmp	r0, #0
 800bc4e:	d1d5      	bne.n	800bbfc <__sfp+0x24>
 800bc50:	f7ff ff78 	bl	800bb44 <__sfp_lock_release>
 800bc54:	230c      	movs	r3, #12
 800bc56:	603b      	str	r3, [r7, #0]
 800bc58:	e7ee      	b.n	800bc38 <__sfp+0x60>
 800bc5a:	bf00      	nop
 800bc5c:	0800c150 	.word	0x0800c150
 800bc60:	ffff0001 	.word	0xffff0001

0800bc64 <_fwalk_reent>:
 800bc64:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bc68:	4606      	mov	r6, r0
 800bc6a:	4688      	mov	r8, r1
 800bc6c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bc70:	2700      	movs	r7, #0
 800bc72:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bc76:	f1b9 0901 	subs.w	r9, r9, #1
 800bc7a:	d505      	bpl.n	800bc88 <_fwalk_reent+0x24>
 800bc7c:	6824      	ldr	r4, [r4, #0]
 800bc7e:	2c00      	cmp	r4, #0
 800bc80:	d1f7      	bne.n	800bc72 <_fwalk_reent+0xe>
 800bc82:	4638      	mov	r0, r7
 800bc84:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bc88:	89ab      	ldrh	r3, [r5, #12]
 800bc8a:	2b01      	cmp	r3, #1
 800bc8c:	d907      	bls.n	800bc9e <_fwalk_reent+0x3a>
 800bc8e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bc92:	3301      	adds	r3, #1
 800bc94:	d003      	beq.n	800bc9e <_fwalk_reent+0x3a>
 800bc96:	4629      	mov	r1, r5
 800bc98:	4630      	mov	r0, r6
 800bc9a:	47c0      	blx	r8
 800bc9c:	4307      	orrs	r7, r0
 800bc9e:	3568      	adds	r5, #104	; 0x68
 800bca0:	e7e9      	b.n	800bc76 <_fwalk_reent+0x12>

0800bca2 <__retarget_lock_init_recursive>:
 800bca2:	4770      	bx	lr

0800bca4 <__retarget_lock_acquire_recursive>:
 800bca4:	4770      	bx	lr

0800bca6 <__retarget_lock_release_recursive>:
 800bca6:	4770      	bx	lr

0800bca8 <__swhatbuf_r>:
 800bca8:	b570      	push	{r4, r5, r6, lr}
 800bcaa:	460e      	mov	r6, r1
 800bcac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bcb0:	2900      	cmp	r1, #0
 800bcb2:	b096      	sub	sp, #88	; 0x58
 800bcb4:	4614      	mov	r4, r2
 800bcb6:	461d      	mov	r5, r3
 800bcb8:	da08      	bge.n	800bccc <__swhatbuf_r+0x24>
 800bcba:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800bcbe:	2200      	movs	r2, #0
 800bcc0:	602a      	str	r2, [r5, #0]
 800bcc2:	061a      	lsls	r2, r3, #24
 800bcc4:	d410      	bmi.n	800bce8 <__swhatbuf_r+0x40>
 800bcc6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800bcca:	e00e      	b.n	800bcea <__swhatbuf_r+0x42>
 800bccc:	466a      	mov	r2, sp
 800bcce:	f000 f951 	bl	800bf74 <_fstat_r>
 800bcd2:	2800      	cmp	r0, #0
 800bcd4:	dbf1      	blt.n	800bcba <__swhatbuf_r+0x12>
 800bcd6:	9a01      	ldr	r2, [sp, #4]
 800bcd8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800bcdc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800bce0:	425a      	negs	r2, r3
 800bce2:	415a      	adcs	r2, r3
 800bce4:	602a      	str	r2, [r5, #0]
 800bce6:	e7ee      	b.n	800bcc6 <__swhatbuf_r+0x1e>
 800bce8:	2340      	movs	r3, #64	; 0x40
 800bcea:	2000      	movs	r0, #0
 800bcec:	6023      	str	r3, [r4, #0]
 800bcee:	b016      	add	sp, #88	; 0x58
 800bcf0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800bcf4 <__smakebuf_r>:
 800bcf4:	898b      	ldrh	r3, [r1, #12]
 800bcf6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800bcf8:	079d      	lsls	r5, r3, #30
 800bcfa:	4606      	mov	r6, r0
 800bcfc:	460c      	mov	r4, r1
 800bcfe:	d507      	bpl.n	800bd10 <__smakebuf_r+0x1c>
 800bd00:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800bd04:	6023      	str	r3, [r4, #0]
 800bd06:	6123      	str	r3, [r4, #16]
 800bd08:	2301      	movs	r3, #1
 800bd0a:	6163      	str	r3, [r4, #20]
 800bd0c:	b002      	add	sp, #8
 800bd0e:	bd70      	pop	{r4, r5, r6, pc}
 800bd10:	ab01      	add	r3, sp, #4
 800bd12:	466a      	mov	r2, sp
 800bd14:	f7ff ffc8 	bl	800bca8 <__swhatbuf_r>
 800bd18:	9900      	ldr	r1, [sp, #0]
 800bd1a:	4605      	mov	r5, r0
 800bd1c:	4630      	mov	r0, r6
 800bd1e:	f7ff f9db 	bl	800b0d8 <_malloc_r>
 800bd22:	b948      	cbnz	r0, 800bd38 <__smakebuf_r+0x44>
 800bd24:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bd28:	059a      	lsls	r2, r3, #22
 800bd2a:	d4ef      	bmi.n	800bd0c <__smakebuf_r+0x18>
 800bd2c:	f023 0303 	bic.w	r3, r3, #3
 800bd30:	f043 0302 	orr.w	r3, r3, #2
 800bd34:	81a3      	strh	r3, [r4, #12]
 800bd36:	e7e3      	b.n	800bd00 <__smakebuf_r+0xc>
 800bd38:	4b0d      	ldr	r3, [pc, #52]	; (800bd70 <__smakebuf_r+0x7c>)
 800bd3a:	62b3      	str	r3, [r6, #40]	; 0x28
 800bd3c:	89a3      	ldrh	r3, [r4, #12]
 800bd3e:	6020      	str	r0, [r4, #0]
 800bd40:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800bd44:	81a3      	strh	r3, [r4, #12]
 800bd46:	9b00      	ldr	r3, [sp, #0]
 800bd48:	6163      	str	r3, [r4, #20]
 800bd4a:	9b01      	ldr	r3, [sp, #4]
 800bd4c:	6120      	str	r0, [r4, #16]
 800bd4e:	b15b      	cbz	r3, 800bd68 <__smakebuf_r+0x74>
 800bd50:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800bd54:	4630      	mov	r0, r6
 800bd56:	f000 f91f 	bl	800bf98 <_isatty_r>
 800bd5a:	b128      	cbz	r0, 800bd68 <__smakebuf_r+0x74>
 800bd5c:	89a3      	ldrh	r3, [r4, #12]
 800bd5e:	f023 0303 	bic.w	r3, r3, #3
 800bd62:	f043 0301 	orr.w	r3, r3, #1
 800bd66:	81a3      	strh	r3, [r4, #12]
 800bd68:	89a0      	ldrh	r0, [r4, #12]
 800bd6a:	4305      	orrs	r5, r0
 800bd6c:	81a5      	strh	r5, [r4, #12]
 800bd6e:	e7cd      	b.n	800bd0c <__smakebuf_r+0x18>
 800bd70:	0800bb01 	.word	0x0800bb01

0800bd74 <memmove>:
 800bd74:	4288      	cmp	r0, r1
 800bd76:	b510      	push	{r4, lr}
 800bd78:	eb01 0402 	add.w	r4, r1, r2
 800bd7c:	d902      	bls.n	800bd84 <memmove+0x10>
 800bd7e:	4284      	cmp	r4, r0
 800bd80:	4623      	mov	r3, r4
 800bd82:	d807      	bhi.n	800bd94 <memmove+0x20>
 800bd84:	1e43      	subs	r3, r0, #1
 800bd86:	42a1      	cmp	r1, r4
 800bd88:	d008      	beq.n	800bd9c <memmove+0x28>
 800bd8a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800bd8e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800bd92:	e7f8      	b.n	800bd86 <memmove+0x12>
 800bd94:	4402      	add	r2, r0
 800bd96:	4601      	mov	r1, r0
 800bd98:	428a      	cmp	r2, r1
 800bd9a:	d100      	bne.n	800bd9e <memmove+0x2a>
 800bd9c:	bd10      	pop	{r4, pc}
 800bd9e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800bda2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800bda6:	e7f7      	b.n	800bd98 <memmove+0x24>

0800bda8 <__malloc_lock>:
 800bda8:	4801      	ldr	r0, [pc, #4]	; (800bdb0 <__malloc_lock+0x8>)
 800bdaa:	f7ff bf7b 	b.w	800bca4 <__retarget_lock_acquire_recursive>
 800bdae:	bf00      	nop
 800bdb0:	20003404 	.word	0x20003404

0800bdb4 <__malloc_unlock>:
 800bdb4:	4801      	ldr	r0, [pc, #4]	; (800bdbc <__malloc_unlock+0x8>)
 800bdb6:	f7ff bf76 	b.w	800bca6 <__retarget_lock_release_recursive>
 800bdba:	bf00      	nop
 800bdbc:	20003404 	.word	0x20003404

0800bdc0 <_realloc_r>:
 800bdc0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bdc4:	4680      	mov	r8, r0
 800bdc6:	4614      	mov	r4, r2
 800bdc8:	460e      	mov	r6, r1
 800bdca:	b921      	cbnz	r1, 800bdd6 <_realloc_r+0x16>
 800bdcc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800bdd0:	4611      	mov	r1, r2
 800bdd2:	f7ff b981 	b.w	800b0d8 <_malloc_r>
 800bdd6:	b92a      	cbnz	r2, 800bde4 <_realloc_r+0x24>
 800bdd8:	f7ff f912 	bl	800b000 <_free_r>
 800bddc:	4625      	mov	r5, r4
 800bdde:	4628      	mov	r0, r5
 800bde0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bde4:	f000 f8fa 	bl	800bfdc <_malloc_usable_size_r>
 800bde8:	4284      	cmp	r4, r0
 800bdea:	4607      	mov	r7, r0
 800bdec:	d802      	bhi.n	800bdf4 <_realloc_r+0x34>
 800bdee:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800bdf2:	d812      	bhi.n	800be1a <_realloc_r+0x5a>
 800bdf4:	4621      	mov	r1, r4
 800bdf6:	4640      	mov	r0, r8
 800bdf8:	f7ff f96e 	bl	800b0d8 <_malloc_r>
 800bdfc:	4605      	mov	r5, r0
 800bdfe:	2800      	cmp	r0, #0
 800be00:	d0ed      	beq.n	800bdde <_realloc_r+0x1e>
 800be02:	42bc      	cmp	r4, r7
 800be04:	4622      	mov	r2, r4
 800be06:	4631      	mov	r1, r6
 800be08:	bf28      	it	cs
 800be0a:	463a      	movcs	r2, r7
 800be0c:	f7fe fc12 	bl	800a634 <memcpy>
 800be10:	4631      	mov	r1, r6
 800be12:	4640      	mov	r0, r8
 800be14:	f7ff f8f4 	bl	800b000 <_free_r>
 800be18:	e7e1      	b.n	800bdde <_realloc_r+0x1e>
 800be1a:	4635      	mov	r5, r6
 800be1c:	e7df      	b.n	800bdde <_realloc_r+0x1e>

0800be1e <_raise_r>:
 800be1e:	291f      	cmp	r1, #31
 800be20:	b538      	push	{r3, r4, r5, lr}
 800be22:	4604      	mov	r4, r0
 800be24:	460d      	mov	r5, r1
 800be26:	d904      	bls.n	800be32 <_raise_r+0x14>
 800be28:	2316      	movs	r3, #22
 800be2a:	6003      	str	r3, [r0, #0]
 800be2c:	f04f 30ff 	mov.w	r0, #4294967295
 800be30:	bd38      	pop	{r3, r4, r5, pc}
 800be32:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800be34:	b112      	cbz	r2, 800be3c <_raise_r+0x1e>
 800be36:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800be3a:	b94b      	cbnz	r3, 800be50 <_raise_r+0x32>
 800be3c:	4620      	mov	r0, r4
 800be3e:	f000 f831 	bl	800bea4 <_getpid_r>
 800be42:	462a      	mov	r2, r5
 800be44:	4601      	mov	r1, r0
 800be46:	4620      	mov	r0, r4
 800be48:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800be4c:	f000 b818 	b.w	800be80 <_kill_r>
 800be50:	2b01      	cmp	r3, #1
 800be52:	d00a      	beq.n	800be6a <_raise_r+0x4c>
 800be54:	1c59      	adds	r1, r3, #1
 800be56:	d103      	bne.n	800be60 <_raise_r+0x42>
 800be58:	2316      	movs	r3, #22
 800be5a:	6003      	str	r3, [r0, #0]
 800be5c:	2001      	movs	r0, #1
 800be5e:	e7e7      	b.n	800be30 <_raise_r+0x12>
 800be60:	2400      	movs	r4, #0
 800be62:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800be66:	4628      	mov	r0, r5
 800be68:	4798      	blx	r3
 800be6a:	2000      	movs	r0, #0
 800be6c:	e7e0      	b.n	800be30 <_raise_r+0x12>
	...

0800be70 <raise>:
 800be70:	4b02      	ldr	r3, [pc, #8]	; (800be7c <raise+0xc>)
 800be72:	4601      	mov	r1, r0
 800be74:	6818      	ldr	r0, [r3, #0]
 800be76:	f7ff bfd2 	b.w	800be1e <_raise_r>
 800be7a:	bf00      	nop
 800be7c:	20000020 	.word	0x20000020

0800be80 <_kill_r>:
 800be80:	b538      	push	{r3, r4, r5, lr}
 800be82:	4d07      	ldr	r5, [pc, #28]	; (800bea0 <_kill_r+0x20>)
 800be84:	2300      	movs	r3, #0
 800be86:	4604      	mov	r4, r0
 800be88:	4608      	mov	r0, r1
 800be8a:	4611      	mov	r1, r2
 800be8c:	602b      	str	r3, [r5, #0]
 800be8e:	f7f7 fff1 	bl	8003e74 <_kill>
 800be92:	1c43      	adds	r3, r0, #1
 800be94:	d102      	bne.n	800be9c <_kill_r+0x1c>
 800be96:	682b      	ldr	r3, [r5, #0]
 800be98:	b103      	cbz	r3, 800be9c <_kill_r+0x1c>
 800be9a:	6023      	str	r3, [r4, #0]
 800be9c:	bd38      	pop	{r3, r4, r5, pc}
 800be9e:	bf00      	nop
 800bea0:	20003408 	.word	0x20003408

0800bea4 <_getpid_r>:
 800bea4:	f7f7 bfde 	b.w	8003e64 <_getpid>

0800bea8 <__sread>:
 800bea8:	b510      	push	{r4, lr}
 800beaa:	460c      	mov	r4, r1
 800beac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800beb0:	f000 f89c 	bl	800bfec <_read_r>
 800beb4:	2800      	cmp	r0, #0
 800beb6:	bfab      	itete	ge
 800beb8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800beba:	89a3      	ldrhlt	r3, [r4, #12]
 800bebc:	181b      	addge	r3, r3, r0
 800bebe:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800bec2:	bfac      	ite	ge
 800bec4:	6563      	strge	r3, [r4, #84]	; 0x54
 800bec6:	81a3      	strhlt	r3, [r4, #12]
 800bec8:	bd10      	pop	{r4, pc}

0800beca <__swrite>:
 800beca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bece:	461f      	mov	r7, r3
 800bed0:	898b      	ldrh	r3, [r1, #12]
 800bed2:	05db      	lsls	r3, r3, #23
 800bed4:	4605      	mov	r5, r0
 800bed6:	460c      	mov	r4, r1
 800bed8:	4616      	mov	r6, r2
 800beda:	d505      	bpl.n	800bee8 <__swrite+0x1e>
 800bedc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bee0:	2302      	movs	r3, #2
 800bee2:	2200      	movs	r2, #0
 800bee4:	f000 f868 	bl	800bfb8 <_lseek_r>
 800bee8:	89a3      	ldrh	r3, [r4, #12]
 800beea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800beee:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800bef2:	81a3      	strh	r3, [r4, #12]
 800bef4:	4632      	mov	r2, r6
 800bef6:	463b      	mov	r3, r7
 800bef8:	4628      	mov	r0, r5
 800befa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800befe:	f000 b817 	b.w	800bf30 <_write_r>

0800bf02 <__sseek>:
 800bf02:	b510      	push	{r4, lr}
 800bf04:	460c      	mov	r4, r1
 800bf06:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf0a:	f000 f855 	bl	800bfb8 <_lseek_r>
 800bf0e:	1c43      	adds	r3, r0, #1
 800bf10:	89a3      	ldrh	r3, [r4, #12]
 800bf12:	bf15      	itete	ne
 800bf14:	6560      	strne	r0, [r4, #84]	; 0x54
 800bf16:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800bf1a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800bf1e:	81a3      	strheq	r3, [r4, #12]
 800bf20:	bf18      	it	ne
 800bf22:	81a3      	strhne	r3, [r4, #12]
 800bf24:	bd10      	pop	{r4, pc}

0800bf26 <__sclose>:
 800bf26:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800bf2a:	f000 b813 	b.w	800bf54 <_close_r>
	...

0800bf30 <_write_r>:
 800bf30:	b538      	push	{r3, r4, r5, lr}
 800bf32:	4d07      	ldr	r5, [pc, #28]	; (800bf50 <_write_r+0x20>)
 800bf34:	4604      	mov	r4, r0
 800bf36:	4608      	mov	r0, r1
 800bf38:	4611      	mov	r1, r2
 800bf3a:	2200      	movs	r2, #0
 800bf3c:	602a      	str	r2, [r5, #0]
 800bf3e:	461a      	mov	r2, r3
 800bf40:	f7f7 ffcf 	bl	8003ee2 <_write>
 800bf44:	1c43      	adds	r3, r0, #1
 800bf46:	d102      	bne.n	800bf4e <_write_r+0x1e>
 800bf48:	682b      	ldr	r3, [r5, #0]
 800bf4a:	b103      	cbz	r3, 800bf4e <_write_r+0x1e>
 800bf4c:	6023      	str	r3, [r4, #0]
 800bf4e:	bd38      	pop	{r3, r4, r5, pc}
 800bf50:	20003408 	.word	0x20003408

0800bf54 <_close_r>:
 800bf54:	b538      	push	{r3, r4, r5, lr}
 800bf56:	4d06      	ldr	r5, [pc, #24]	; (800bf70 <_close_r+0x1c>)
 800bf58:	2300      	movs	r3, #0
 800bf5a:	4604      	mov	r4, r0
 800bf5c:	4608      	mov	r0, r1
 800bf5e:	602b      	str	r3, [r5, #0]
 800bf60:	f7f7 ffdb 	bl	8003f1a <_close>
 800bf64:	1c43      	adds	r3, r0, #1
 800bf66:	d102      	bne.n	800bf6e <_close_r+0x1a>
 800bf68:	682b      	ldr	r3, [r5, #0]
 800bf6a:	b103      	cbz	r3, 800bf6e <_close_r+0x1a>
 800bf6c:	6023      	str	r3, [r4, #0]
 800bf6e:	bd38      	pop	{r3, r4, r5, pc}
 800bf70:	20003408 	.word	0x20003408

0800bf74 <_fstat_r>:
 800bf74:	b538      	push	{r3, r4, r5, lr}
 800bf76:	4d07      	ldr	r5, [pc, #28]	; (800bf94 <_fstat_r+0x20>)
 800bf78:	2300      	movs	r3, #0
 800bf7a:	4604      	mov	r4, r0
 800bf7c:	4608      	mov	r0, r1
 800bf7e:	4611      	mov	r1, r2
 800bf80:	602b      	str	r3, [r5, #0]
 800bf82:	f7f7 ffd6 	bl	8003f32 <_fstat>
 800bf86:	1c43      	adds	r3, r0, #1
 800bf88:	d102      	bne.n	800bf90 <_fstat_r+0x1c>
 800bf8a:	682b      	ldr	r3, [r5, #0]
 800bf8c:	b103      	cbz	r3, 800bf90 <_fstat_r+0x1c>
 800bf8e:	6023      	str	r3, [r4, #0]
 800bf90:	bd38      	pop	{r3, r4, r5, pc}
 800bf92:	bf00      	nop
 800bf94:	20003408 	.word	0x20003408

0800bf98 <_isatty_r>:
 800bf98:	b538      	push	{r3, r4, r5, lr}
 800bf9a:	4d06      	ldr	r5, [pc, #24]	; (800bfb4 <_isatty_r+0x1c>)
 800bf9c:	2300      	movs	r3, #0
 800bf9e:	4604      	mov	r4, r0
 800bfa0:	4608      	mov	r0, r1
 800bfa2:	602b      	str	r3, [r5, #0]
 800bfa4:	f7f7 ffd5 	bl	8003f52 <_isatty>
 800bfa8:	1c43      	adds	r3, r0, #1
 800bfaa:	d102      	bne.n	800bfb2 <_isatty_r+0x1a>
 800bfac:	682b      	ldr	r3, [r5, #0]
 800bfae:	b103      	cbz	r3, 800bfb2 <_isatty_r+0x1a>
 800bfb0:	6023      	str	r3, [r4, #0]
 800bfb2:	bd38      	pop	{r3, r4, r5, pc}
 800bfb4:	20003408 	.word	0x20003408

0800bfb8 <_lseek_r>:
 800bfb8:	b538      	push	{r3, r4, r5, lr}
 800bfba:	4d07      	ldr	r5, [pc, #28]	; (800bfd8 <_lseek_r+0x20>)
 800bfbc:	4604      	mov	r4, r0
 800bfbe:	4608      	mov	r0, r1
 800bfc0:	4611      	mov	r1, r2
 800bfc2:	2200      	movs	r2, #0
 800bfc4:	602a      	str	r2, [r5, #0]
 800bfc6:	461a      	mov	r2, r3
 800bfc8:	f7f7 ffce 	bl	8003f68 <_lseek>
 800bfcc:	1c43      	adds	r3, r0, #1
 800bfce:	d102      	bne.n	800bfd6 <_lseek_r+0x1e>
 800bfd0:	682b      	ldr	r3, [r5, #0]
 800bfd2:	b103      	cbz	r3, 800bfd6 <_lseek_r+0x1e>
 800bfd4:	6023      	str	r3, [r4, #0]
 800bfd6:	bd38      	pop	{r3, r4, r5, pc}
 800bfd8:	20003408 	.word	0x20003408

0800bfdc <_malloc_usable_size_r>:
 800bfdc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800bfe0:	1f18      	subs	r0, r3, #4
 800bfe2:	2b00      	cmp	r3, #0
 800bfe4:	bfbc      	itt	lt
 800bfe6:	580b      	ldrlt	r3, [r1, r0]
 800bfe8:	18c0      	addlt	r0, r0, r3
 800bfea:	4770      	bx	lr

0800bfec <_read_r>:
 800bfec:	b538      	push	{r3, r4, r5, lr}
 800bfee:	4d07      	ldr	r5, [pc, #28]	; (800c00c <_read_r+0x20>)
 800bff0:	4604      	mov	r4, r0
 800bff2:	4608      	mov	r0, r1
 800bff4:	4611      	mov	r1, r2
 800bff6:	2200      	movs	r2, #0
 800bff8:	602a      	str	r2, [r5, #0]
 800bffa:	461a      	mov	r2, r3
 800bffc:	f7f7 ff54 	bl	8003ea8 <_read>
 800c000:	1c43      	adds	r3, r0, #1
 800c002:	d102      	bne.n	800c00a <_read_r+0x1e>
 800c004:	682b      	ldr	r3, [r5, #0]
 800c006:	b103      	cbz	r3, 800c00a <_read_r+0x1e>
 800c008:	6023      	str	r3, [r4, #0]
 800c00a:	bd38      	pop	{r3, r4, r5, pc}
 800c00c:	20003408 	.word	0x20003408

0800c010 <_init>:
 800c010:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c012:	bf00      	nop
 800c014:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c016:	bc08      	pop	{r3}
 800c018:	469e      	mov	lr, r3
 800c01a:	4770      	bx	lr

0800c01c <_fini>:
 800c01c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c01e:	bf00      	nop
 800c020:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c022:	bc08      	pop	{r3}
 800c024:	469e      	mov	lr, r3
 800c026:	4770      	bx	lr
