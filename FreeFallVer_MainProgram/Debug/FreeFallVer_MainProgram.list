
FreeFallVer_MainProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f508  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000758  0800f698  0800f698  0001f698  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fdf0  0800fdf0  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fdf0  0800fdf0  0001fdf0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fdf8  0800fdf8  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fdf8  0800fdf8  0001fdf8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fdfc  0800fdfc  0001fdfc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800fe00  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          0000038c  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000580  20000580  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010513  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002709  00000000  00000000  00030737  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fb0  00000000  00000000  00032e40  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb8  00000000  00000000  00033df0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c08  00000000  00000000  00034ca8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012a40  00000000  00000000  000578b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cef1f  00000000  00000000  0006a2f0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013920f  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005774  00000000  00000000  00139260  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f680 	.word	0x0800f680

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800f680 	.word	0x0800f680

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <GetSector+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x22>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001012:	d302      	bcc.n	800101a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e04b      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <GetSector+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <GetSector+0x38>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <GetSector+0xd0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e040      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <GetSector+0xd4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d806      	bhi.n	8001046 <GetSector+0x4e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <GetSector+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d302      	bcc.n	8001046 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e035      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GetSector+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x64>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GetSector+0xe0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d302      	bcc.n	800105c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001056:	2303      	movs	r3, #3
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e02a      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GetSector+0xe4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0x7a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <GetSector+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800106c:	2304      	movs	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e01f      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GetSector+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d206      	bcs.n	8001088 <GetSector+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <GetSector+0xe4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d902      	bls.n	8001088 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001082:	2305      	movs	r3, #5
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e014      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GetSector+0xec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d206      	bcs.n	800109e <GetSector+0xa6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <GetSector+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d902      	bls.n	800109e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001098:	2306      	movs	r3, #6
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e009      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GetSector+0xf0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d205      	bcs.n	80010b2 <GetSector+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <GetSector+0xec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	08003ffe 	.word	0x08003ffe
 80010c4:	08007ffe 	.word	0x08007ffe
 80010c8:	08004000 	.word	0x08004000
 80010cc:	0800bffe 	.word	0x0800bffe
 80010d0:	08008000 	.word	0x08008000
 80010d4:	0800ffff 	.word	0x0800ffff
 80010d8:	0800c000 	.word	0x0800c000
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff
 80010e8:	0807ffff 	.word	0x0807ffff

080010ec <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f006 fd93 	bl	8007c28 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff78 	bl	8000ff8 <GetSector>
 8001108:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001116:	69f8      	ldr	r0, [r7, #28]
 8001118:	f7ff ff6e 	bl	8000ff8 <GetSector>
 800111c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001126:	2202      	movs	r2, #2
 8001128:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Flash_Write_Data+0xb8>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	3301      	adds	r3, #1
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Flash_Write_Data+0xb8>)
 800113a:	60d3      	str	r3, [r2, #12]
	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001144:	f006 fede 	bl	8007f04 <HAL_FLASHEx_Erase>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800114e:	f006 fd9d 	bl	8007c8c <HAL_FLASH_GetError>
 8001152:	4603      	mov	r3, r0
 8001154:	e022      	b.n	800119c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	461c      	mov	r4, r3
 8001164:	4615      	mov	r5, r2
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2002      	movs	r0, #2
 800116e:	f006 fd07 	bl	8007b80 <HAL_FLASH_Program>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3304      	adds	r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e003      	b.n	800118e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001186:	f006 fd81 	bl	8007c8c <HAL_FLASH_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	e006      	b.n	800119c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	429a      	cmp	r2, r3
 8001194:	dbdf      	blt.n	8001156 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001196:	f006 fd69 	bl	8007c6c <HAL_FLASH_Lock>

	   return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	20000210 	.word	0x20000210

080011a8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	80fa      	strh	r2, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d000      	beq.n	80011d6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011d4:	e7ef      	b.n	80011b6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Stop>:
#include "stdbool.h"
#include <math.h>
//#include <FLASH_SECTOR_F4.h>
extern bool POSReach;
void Stop() // Stop motor function
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <Stop+0x1c>)
 80011ee:	f007 f95f 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Disable Servo Enable
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <Stop+0x1c>)
 80011f8:	f007 f95a 	bl	80084b0 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020800 	.word	0x40020800

08001204 <AlarmReset>:

void AlarmReset() // reset alarm function
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_SET);//Pull Estop pin to 1 (24V)
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <AlarmReset+0x44>)
 800120e:	f007 f94f 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_RESET); // trig Alarm Reset Pin
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <AlarmReset+0x44>)
 8001218:	f007 f94a 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f006 facc 	bl	80077bc <HAL_Delay>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <AlarmReset+0x44>)
 800122a:	f007 f941 	bl	80084b0 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 800122e:	2201      	movs	r2, #1
 8001230:	2120      	movs	r1, #32
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <AlarmReset+0x48>)
 8001234:	f007 f93c 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Enable Servo Enable 
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <AlarmReset+0x48>)
 800123e:	f007 f937 	bl	80084b0 <HAL_GPIO_WritePin>
		// Turn on the brake
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800

08001250 <Estop>:

void Estop() // Estop function
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);//Pull Estop pin to GND
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Estop+0x14>)
 800125a:	f007 f929 	bl	80084b0 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <DisableSTOP>:

void DisableSTOP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DisableSTOP+0x14>)
 8001272:	f007 f91d 	bl	80084b0 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800

08001280 <JogMoveUp>:

void JogMoveUp() // Move up by pressing the JOG button on the UI
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_SET); // Choose the direction
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <JogMoveUp+0x20>)
 800128c:	f007 f910 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <JogMoveUp+0x24>)
 8001296:	f007 f90b 	bl	80084b0 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800

080012a8 <JogMoveDown>:

void JogMoveDown()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // Choose the direction
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <JogMoveDown+0x20>)
 80012b4:	f007 f8fc 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <JogMoveDown+0x24>)
 80012be:	f007 f8f7 	bl	80084b0 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800

080012d0 <DriverInit>:
{
	HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // Speed Mode
}

bool DriverInit()
{	
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // CN1-14 - PLSCLR	
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <DriverInit+0x70>)
 80012dc:	f007 f8e8 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port,Speed2_Not_PE7_15_Pin,GPIO_PIN_RESET);//CN1-15 SPDLIM/TLIM
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <DriverInit+0x70>)
 80012e6:	f007 f8e3 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CCWLIM_Not_PE12_39_GPIO_Port,CCWLIM_Not_PE12_39_Pin,GPIO_PIN_RESET);//CN1-39 PLSINH
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <DriverInit+0x70>)
 80012f2:	f007 f8dd 	bl	80084b0 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET);// CN-38 - CWLIM
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4810      	ldr	r0, [pc, #64]	; (8001340 <DriverInit+0x70>)
 80012fe:	f007 f8d7 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CWLIM_Not_PE14_13_GPIO_Port,CWLIM_Not_PE14_13_Pin,GPIO_PIN_SET);//CN1-13 CCWLIM
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <DriverInit+0x70>)
 800130a:	f007 f8d1 	bl	80084b0 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);// First, the driver will be in Emergency Stop
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <DriverInit+0x74>)
 8001314:	f007 f8cc 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <DriverInit+0x78>)
 800131e:	f007 f8c7 	bl	80084b0 <HAL_GPIO_WritePin>
		
		HAL_GPIO_WritePin(PA12_LINE_DRV_EN_GPIO_Port, PA12_LINE_DRV_EN_Pin, GPIO_PIN_RESET);// Enable U14 DriveLine IC for generating pulses
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <DriverInit+0x7c>)
 800132a:	f007 f8c1 	bl	80084b0 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // DIR	
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DriverInit+0x70>)
 8001336:	f007 f8bb 	bl	80084b0 <HAL_GPIO_WritePin>
	
		return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <ReadLogicF7000Out>:
uint16_t ReadLogicF7000Out(void)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint16_t OuputState = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
	uint8_t i=0;
 800135a:	2300      	movs	r3, #0
 800135c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_23_TYPEOUT_GPIO_Port,CN1_23_TYPEOUT_Pin)) // Read CN1-23-TYPEOUT
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	485e      	ldr	r0, [pc, #376]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001362:	f007 f88d 	bl	8008480 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <ReadLogicF7000Out+0x30>
	{
		OuputState = OuputState | (1 << i); // Set ith bit		
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	3301      	adds	r3, #1
 8001384:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin)) // Read CN1-48-BRAKE
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4855      	ldr	r0, [pc, #340]	; (80014e0 <ReadLogicF7000Out+0x190>)
 800138a:	f007 f879 	bl	8008480 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <ReadLogicF7000Out+0x58>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	3301      	adds	r3, #1
 80013ac:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin)) // Read CN1-22-RDY
 80013ae:	2104      	movs	r1, #4
 80013b0:	484b      	ldr	r0, [pc, #300]	; (80014e0 <ReadLogicF7000Out+0x190>)
 80013b2:	f007 f865 	bl	8008480 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <ReadLogicF7000Out+0x80>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	3301      	adds	r3, #1
 80013d4:	717b      	strb	r3, [r7, #5]
	POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);	// Check if the position is reached or not
 80013d6:	2102      	movs	r1, #2
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <ReadLogicF7000Out+0x194>)
 80013da:	f007 f851 	bl	8008480 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013ec:	701a      	strb	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin)) // Read CN1-47
	if(POSReach)
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <ReadLogicF7000Out+0xba>
	{		
		OuputState = OuputState | (1 << i); // Set ith bit
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3301      	adds	r3, #1
 800140e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_21_SPDOUT_TRQOUT_GPIO_Port,CN1_21_SPDOUT_TRQOUT_Pin)) // Read CN1-21
 8001410:	2108      	movs	r1, #8
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <ReadLogicF7000Out+0x190>)
 8001414:	f007 f834 	bl	8008480 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <ReadLogicF7000Out+0xe2>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_46_ALARM_GPIO_Port,CN1_46_ALARM_Pin)) // Read CN1-22-
 8001438:	2101      	movs	r1, #1
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800143c:	f007 f820 	bl	8008480 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <ReadLogicF7000Out+0x10a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	3301      	adds	r3, #1
 800145e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_20_PCWOUT_PTQOUT_GPIO_Port,CN1_20_PCWOUT_PTQOUT_Pin)) // Read CN1-20
 8001460:	2110      	movs	r1, #16
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001464:	f007 f80c 	bl	8008480 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <ReadLogicF7000Out+0x132>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001482:	797b      	ldrb	r3, [r7, #5]
 8001484:	3301      	adds	r3, #1
 8001486:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_45_NCWOUT_NTQOUT_GPIO_Port,CN1_45_NCWOUT_NTQOUT_Pin)) // Read CN1-45
 8001488:	2104      	movs	r1, #4
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800148c:	f006 fff8 	bl	8008480 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <ReadLogicF7000Out+0x15a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	3301      	adds	r3, #1
 80014ae:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_19_ZSPD_GPIO_Port,CN1_19_ZSPD_Pin)) // Read CN1-19-ZSPD
 80014b0:	2108      	movs	r1, #8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <ReadLogicF7000Out+0x19c>)
 80014b4:	f006 ffe4 	bl	8008480 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <ReadLogicF7000Out+0x182>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	80fb      	strh	r3, [r7, #6]
	}	
	return OuputState;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	20000437 	.word	0x20000437
 80014ec:	40020400 	.word	0x40020400

080014f0 <ExtractMotionCode>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void ExtractMotionCode () // Extract command from the UI
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	memset (MotionCode, '\0', sizeof (MotionCode)); // reset MotionCode
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <ExtractMotionCode+0xa8>)
 80014fc:	f009 fbda 	bl	800acb4 <memset>
	memset (DataRegion, '\0', sizeof (DataRegion)); // reset DataRegion
 8001500:	2228      	movs	r2, #40	; 0x28
 8001502:	2100      	movs	r1, #0
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <ExtractMotionCode+0xac>)
 8001506:	f009 fbd5 	bl	800acb4 <memset>
	uint8_t j = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 800150e:	2300      	movs	r3, #0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	e012      	b.n	800153a <ExtractMotionCode+0x4a>
	{
		if (RxPCBuff[i] != 0) // coppy the command from UI to another array, remove the null character at the beginning
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <ExtractMotionCode+0x44>
		{
			DataRegion[j] = RxPCBuff[i]; // coppy to DataRegion
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	491e      	ldr	r1, [pc, #120]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001526:	5c8a      	ldrb	r2, [r1, r2]
 8001528:	b2d1      	uxtb	r1, r2
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <ExtractMotionCode+0xac>)
 800152c:	54d1      	strb	r1, [r2, r3]
			j++;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	3301      	adds	r3, #1
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	2b27      	cmp	r3, #39	; 0x27
 800153e:	d9e9      	bls.n	8001514 <ExtractMotionCode+0x24>
		}
	}
	j = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
	char *token;
	token = strtok((char *)DataRegion, "/");	// Split the command ~ remove the / character
 8001544:	4917      	ldr	r1, [pc, #92]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <ExtractMotionCode+0xac>)
 8001548:	f00b f892 	bl	800c670 <strtok>
 800154c:	6038      	str	r0, [r7, #0]
	while (token != NULL)
 800154e:	e016      	b.n	800157e <ExtractMotionCode+0x8e>
    {
				MotionCode[j] = (atof(token)); // covert to float type
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f009 fb81 	bl	800ac58 <atof>
 8001556:	ec53 2b10 	vmov	r2, r3, d0
 800155a:	79fc      	ldrb	r4, [r7, #7]
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb42 	bl	8000be8 <__aeabi_d2f>
 8001564:	4602      	mov	r2, r0
 8001566:	490c      	ldr	r1, [pc, #48]	; (8001598 <ExtractMotionCode+0xa8>)
 8001568:	00a3      	lsls	r3, r4, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
			  //MotionCode[j] = (atoi(token)); // covert to int type
        token = strtok(NULL, "/");
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001570:	2000      	movs	r0, #0
 8001572:	f00b f87d 	bl	800c670 <strtok>
 8001576:	6038      	str	r0, [r7, #0]
				j++;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3301      	adds	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
	while (token != NULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e5      	bne.n	8001550 <ExtractMotionCode+0x60>
    }
	memset (RxPCBuff, '\0', sizeof (RxPCBuff)); // reset
 8001584:	2228      	movs	r2, #40	; 0x28
 8001586:	2100      	movs	r1, #0
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <ExtractMotionCode+0xb0>)
 800158a:	f009 fb93 	bl	800acb4 <memset>
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	2000051c 	.word	0x2000051c
 800159c:	20000384 	.word	0x20000384
 80015a0:	2000033c 	.word	0x2000033c
 80015a4:	0800f698 	.word	0x0800f698

080015a8 <ReadMultiRegister>:


void ReadMultiRegister(uint16_t StartingAddress, uint8_t NoOfRegister) // Read data from the Driver
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	717b      	strb	r3, [r7, #5]
	// Prepare data frame -- BEGIN
	// Data preparation
	TxDataToDriver[0] = DriverID;//SerialID = 1 of the driver
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <ReadMultiRegister+0xe8>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
	TxDataToDriver[1] = 3;//Read Regis, function code
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <ReadMultiRegister+0xe8>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	705a      	strb	r2, [r3, #1]
	TxDataToDriver[2] = StartingAddress / 256; // Register Address High byte
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <ReadMultiRegister+0xe8>)
 80015ce:	709a      	strb	r2, [r3, #2]
    TxDataToDriver[3] = StartingAddress % 256; // Register Address LOW byte
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <ReadMultiRegister+0xe8>)
 80015d6:	70da      	strb	r2, [r3, #3]
	TxDataToDriver[4] = 0; // Number of Register HIGH byte
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <ReadMultiRegister+0xe8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	711a      	strb	r2, [r3, #4]
	TxDataToDriver[5] = NoOfRegister; // Number of Register LOW byte
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <ReadMultiRegister+0xe8>)
 80015e0:	797b      	ldrb	r3, [r7, #5]
 80015e2:	7153      	strb	r3, [r2, #5]

	//CRC BEGIN=======
				uint16_t crc = 0xFFFF;
 80015e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e8:	82fb      	strh	r3, [r7, #22]
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	e026      	b.n	800163e <ReadMultiRegister+0x96>
				{	crc ^= (uint16_t)TxDataToDriver[pos];          // XOR byte into least sig. byte of crc
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <ReadMultiRegister+0xe8>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	4053      	eors	r3, r2
 80015fe:	82fb      	strh	r3, [r7, #22]
					for (int i = 8; i != 0; i--)
 8001600:	2308      	movs	r3, #8
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e015      	b.n	8001632 <ReadMultiRegister+0x8a>
					{    // Loop over each bit
						if ((crc & 0x0001) != 0)
 8001606:	8afb      	ldrh	r3, [r7, #22]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00a      	beq.n	8001626 <ReadMultiRegister+0x7e>
						{      // If the LSB is set
							crc >>= 1;                    // Shift right and XOR 0xA001
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	82fb      	strh	r3, [r7, #22]
							crc ^= 0xA001;
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800161c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001620:	43db      	mvns	r3, r3
 8001622:	82fb      	strh	r3, [r7, #22]
 8001624:	e002      	b.n	800162c <ReadMultiRegister+0x84>
						}
						else                            // Else LSB is not set
							crc >>= 1;                    // Just shift right
 8001626:	8afb      	ldrh	r3, [r7, #22]
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	82fb      	strh	r3, [r7, #22]
					for (int i = 8; i != 0; i--)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e6      	bne.n	8001606 <ReadMultiRegister+0x5e>
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	3301      	adds	r3, #1
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b05      	cmp	r3, #5
 8001642:	ddd5      	ble.n	80015f0 <ReadMultiRegister+0x48>
					}
				}
	TxDataToDriver[6]= (uint8_t)(crc&0x00FF);;//(uint8_t)(TemDat16&0xFF);
 8001644:	8afb      	ldrh	r3, [r7, #22]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <ReadMultiRegister+0xe8>)
 800164a:	719a      	strb	r2, [r3, #6]
	TxDataToDriver[7]=(uint8_t)((crc>>8)&0x00FF);
 800164c:	8afb      	ldrh	r3, [r7, #22]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29b      	uxth	r3, r3
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <ReadMultiRegister+0xe8>)
 8001656:	71da      	strb	r2, [r3, #7]
	//CRC=====END/
	// Prepare data frame -- END
	// Send data use UART5
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
 8001658:	2200      	movs	r2, #0
 800165a:	2101      	movs	r1, #1
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <ReadMultiRegister+0xec>)
 800165e:	f006 ff27 	bl	80084b0 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f006 f8aa 	bl	80077bc <HAL_Delay>
	HAL_UART_Transmit(&huart5,TxDataToDriver,8,200); // use UART5 to send
 8001668:	23c8      	movs	r3, #200	; 0xc8
 800166a:	2208      	movs	r2, #8
 800166c:	4908      	ldr	r1, [pc, #32]	; (8001690 <ReadMultiRegister+0xe8>)
 800166e:	480a      	ldr	r0, [pc, #40]	; (8001698 <ReadMultiRegister+0xf0>)
 8001670:	f008 fac7 	bl	8009c02 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <ReadMultiRegister+0xec>)
 800167a:	f006 ff19 	bl	80084b0 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
 800167e:	2201      	movs	r2, #1
 8001680:	4906      	ldr	r1, [pc, #24]	; (800169c <ReadMultiRegister+0xf4>)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <ReadMultiRegister+0xf0>)
 8001684:	f008 fb4f 	bl	8009d26 <HAL_UART_Receive_IT>

//	HAL_GPIO_WritePin(PB15_485_MCU_PC_DIR_GPIO_Port, PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
//	HAL_UART_Transmit(&huart3,TxDataToDriver,8,500); // use UART3 to send
//	HAL_GPIO_WritePin(PB15_485_MCU_PC_DIR_GPIO_Port, PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
//	HAL_UART_Receive_IT(&huart3,&RxDriverData,1); // Receive 1 byte each time
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	2000040c 	.word	0x2000040c
 8001694:	40021000 	.word	0x40021000
 8001698:	200002b4 	.word	0x200002b4
 800169c:	200003ad 	.word	0x200003ad

080016a0 <LoadSavedParam>:



void LoadSavedParam (uint32_t StartSectorAddress, float *_Param)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b09f      	sub	sp, #124	; 0x7c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	uint8_t LoadDataBuff[100];

	Flash_Read_Data(StartSectorAddress, (uint32_t *)LoadDataBuff, numofwords);
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <LoadSavedParam+0x74>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fd76 	bl	80011a8 <Flash_Read_Data>

	uint8_t	j = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char *token;
	token = strtok((char *)LoadDataBuff, "/");	// Split the command ~ remove the / character
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4914      	ldr	r1, [pc, #80]	; (8001718 <LoadSavedParam+0x78>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f00a ffd1 	bl	800c670 <strtok>
 80016ce:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL)
 80016d0:	e017      	b.n	8001702 <LoadSavedParam+0x62>
    {
				_Param[j] = (atof(token)); // covert to float type
 80016d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80016d4:	f009 fac0 	bl	800ac58 <atof>
 80016d8:	ec51 0b10 	vmov	r0, r1, d0
 80016dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	18d4      	adds	r4, r2, r3
 80016e6:	f7ff fa7f 	bl	8000be8 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, "/");
 80016ee:	490a      	ldr	r1, [pc, #40]	; (8001718 <LoadSavedParam+0x78>)
 80016f0:	2000      	movs	r0, #0
 80016f2:	f00a ffbd 	bl	800c670 <strtok>
 80016f6:	6738      	str	r0, [r7, #112]	; 0x70
				j++;
 80016f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016fc:	3301      	adds	r3, #1
 80016fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (token != NULL)
 8001702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e4      	bne.n	80016d2 <LoadSavedParam+0x32>
    }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	377c      	adds	r7, #124	; 0x7c
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	2000000c 	.word	0x2000000c
 8001718:	0800f698 	.word	0x0800f698

0800171c <SaveSystemParams>:

void SaveSystemParams (uint8_t *NoOfWords)
{
 800171c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8001720:	b0d1      	sub	sp, #324	; 0x144
 8001722:	af22      	add	r7, sp, #136	; 0x88
 8001724:	6678      	str	r0, [r7, #100]	; 0x64
	char SaveBuffer[80];
	TxPCLen = sprintf(SaveBuffer,"%.2f/%d/%d/%d/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%d/%.2f/%d"
 8001726:	4b6b      	ldr	r3, [pc, #428]	; (80018d4 <SaveSystemParams+0x1b8>)
 8001728:	681b      	ldr	r3, [r3, #0]
 800172a:	4618      	mov	r0, r3
 800172c:	f7fe ff0c 	bl	8000548 <__aeabi_f2d>
 8001730:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8001734:	4b68      	ldr	r3, [pc, #416]	; (80018d8 <SaveSystemParams+0x1bc>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	663b      	str	r3, [r7, #96]	; 0x60
 800173a:	4b68      	ldr	r3, [pc, #416]	; (80018dc <SaveSystemParams+0x1c0>)
 800173c:	881b      	ldrh	r3, [r3, #0]
 800173e:	657b      	str	r3, [r7, #84]	; 0x54
 8001740:	4b67      	ldr	r3, [pc, #412]	; (80018e0 <SaveSystemParams+0x1c4>)
 8001742:	781b      	ldrb	r3, [r3, #0]
 8001744:	653b      	str	r3, [r7, #80]	; 0x50
 8001746:	4b67      	ldr	r3, [pc, #412]	; (80018e4 <SaveSystemParams+0x1c8>)
 8001748:	681b      	ldr	r3, [r3, #0]
 800174a:	4618      	mov	r0, r3
 800174c:	f7fe fefc 	bl	8000548 <__aeabi_f2d>
 8001750:	e9c7 0112 	strd	r0, r1, [r7, #72]	; 0x48
 8001754:	4b64      	ldr	r3, [pc, #400]	; (80018e8 <SaveSystemParams+0x1cc>)
 8001756:	681b      	ldr	r3, [r3, #0]
 8001758:	4618      	mov	r0, r3
 800175a:	f7fe fef5 	bl	8000548 <__aeabi_f2d>
 800175e:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8001762:	4b62      	ldr	r3, [pc, #392]	; (80018ec <SaveSystemParams+0x1d0>)
 8001764:	681b      	ldr	r3, [r3, #0]
 8001766:	4618      	mov	r0, r3
 8001768:	f7fe feee 	bl	8000548 <__aeabi_f2d>
 800176c:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8001770:	4b5f      	ldr	r3, [pc, #380]	; (80018f0 <SaveSystemParams+0x1d4>)
 8001772:	681b      	ldr	r3, [r3, #0]
 8001774:	4618      	mov	r0, r3
 8001776:	f7fe fee7 	bl	8000548 <__aeabi_f2d>
 800177a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800177e:	4b5d      	ldr	r3, [pc, #372]	; (80018f4 <SaveSystemParams+0x1d8>)
 8001780:	681b      	ldr	r3, [r3, #0]
 8001782:	4618      	mov	r0, r3
 8001784:	f7fe fee0 	bl	8000548 <__aeabi_f2d>
 8001788:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 800178c:	4b5a      	ldr	r3, [pc, #360]	; (80018f8 <SaveSystemParams+0x1dc>)
 800178e:	681b      	ldr	r3, [r3, #0]
 8001790:	4618      	mov	r0, r3
 8001792:	f7fe fed9 	bl	8000548 <__aeabi_f2d>
 8001796:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800179a:	4b58      	ldr	r3, [pc, #352]	; (80018fc <SaveSystemParams+0x1e0>)
 800179c:	681b      	ldr	r3, [r3, #0]
 800179e:	4618      	mov	r0, r3
 80017a0:	f7fe fed2 	bl	8000548 <__aeabi_f2d>
 80017a4:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80017a8:	4b55      	ldr	r3, [pc, #340]	; (8001900 <SaveSystemParams+0x1e4>)
 80017aa:	681b      	ldr	r3, [r3, #0]
 80017ac:	4618      	mov	r0, r3
 80017ae:	f7fe fecb 	bl	8000548 <__aeabi_f2d>
 80017b2:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80017b6:	4b53      	ldr	r3, [pc, #332]	; (8001904 <SaveSystemParams+0x1e8>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	4618      	mov	r0, r3
 80017bc:	f7fe fec4 	bl	8000548 <__aeabi_f2d>
 80017c0:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80017c4:	4b50      	ldr	r3, [pc, #320]	; (8001908 <SaveSystemParams+0x1ec>)
 80017c6:	681b      	ldr	r3, [r3, #0]
 80017c8:	4618      	mov	r0, r3
 80017ca:	f7fe febd 	bl	8000548 <__aeabi_f2d>
 80017ce:	4682      	mov	sl, r0
 80017d0:	468b      	mov	fp, r1
 80017d2:	4b4e      	ldr	r3, [pc, #312]	; (800190c <SaveSystemParams+0x1f0>)
 80017d4:	681b      	ldr	r3, [r3, #0]
 80017d6:	4618      	mov	r0, r3
 80017d8:	f7fe feb6 	bl	8000548 <__aeabi_f2d>
 80017dc:	4680      	mov	r8, r0
 80017de:	4689      	mov	r9, r1
 80017e0:	4b4b      	ldr	r3, [pc, #300]	; (8001910 <SaveSystemParams+0x1f4>)
 80017e2:	681b      	ldr	r3, [r3, #0]
 80017e4:	4618      	mov	r0, r3
 80017e6:	f7fe feaf 	bl	8000548 <__aeabi_f2d>
 80017ea:	4604      	mov	r4, r0
 80017ec:	460d      	mov	r5, r1
 80017ee:	4b49      	ldr	r3, [pc, #292]	; (8001914 <SaveSystemParams+0x1f8>)
 80017f0:	781b      	ldrb	r3, [r3, #0]
 80017f2:	607b      	str	r3, [r7, #4]
 80017f4:	4b48      	ldr	r3, [pc, #288]	; (8001918 <SaveSystemParams+0x1fc>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	4618      	mov	r0, r3
 80017fa:	f7fe fea5 	bl	8000548 <__aeabi_f2d>
 80017fe:	4b47      	ldr	r3, [pc, #284]	; (800191c <SaveSystemParams+0x200>)
 8001800:	781b      	ldrb	r3, [r3, #0]
 8001802:	f107 0668 	add.w	r6, r7, #104	; 0x68
 8001806:	9320      	str	r3, [sp, #128]	; 0x80
 8001808:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 800180c:	6879      	ldr	r1, [r7, #4]
 800180e:	911c      	str	r1, [sp, #112]	; 0x70
 8001810:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8001814:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 8001818:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 800181c:	ed97 7b02 	vldr	d7, [r7, #8]
 8001820:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8001824:	ed97 7b04 	vldr	d7, [r7, #16]
 8001828:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 800182c:	ed97 7b06 	vldr	d7, [r7, #24]
 8001830:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8001834:	ed97 7b08 	vldr	d7, [r7, #32]
 8001838:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 800183c:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8001840:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8001844:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8001848:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 800184c:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8001850:	ed8d 7b08 	vstr	d7, [sp, #32]
 8001854:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8001858:	ed8d 7b06 	vstr	d7, [sp, #24]
 800185c:	ed97 7b12 	vldr	d7, [r7, #72]	; 0x48
 8001860:	ed8d 7b04 	vstr	d7, [sp, #16]
 8001864:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8001866:	9102      	str	r1, [sp, #8]
 8001868:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800186a:	9101      	str	r1, [sp, #4]
 800186c:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800186e:	9300      	str	r3, [sp, #0]
 8001870:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8001874:	492a      	ldr	r1, [pc, #168]	; (8001920 <SaveSystemParams+0x204>)
 8001876:	4630      	mov	r0, r6
 8001878:	f00a f8a4 	bl	800b9c4 <siprintf>
 800187c:	4603      	mov	r3, r0
 800187e:	b2da      	uxtb	r2, r3
 8001880:	4b28      	ldr	r3, [pc, #160]	; (8001924 <SaveSystemParams+0x208>)
 8001882:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
										 PullingPoint1, PullingPoint2, PullingPoint3, PullingPoint4,
                     PullingAcc1, PullingAcc2, PullingAcc3,
					 PullingAcc4, PullingAcc5, DistCoeff,
					 DroppingAccel, DroppingAccelDistance, DropAccelSlope, DroppingDecel, DropDecelSlope); // Combine to a string
	*NoOfWords = (strlen(SaveBuffer)/4)+((strlen(SaveBuffer)%4)!=0);
 8001884:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001888:	4618      	mov	r0, r3
 800188a:	f7fe fca1 	bl	80001d0 <strlen>
 800188e:	4603      	mov	r3, r0
 8001890:	089b      	lsrs	r3, r3, #2
 8001892:	b2dc      	uxtb	r4, r3
 8001894:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001898:	4618      	mov	r0, r3
 800189a:	f7fe fc99 	bl	80001d0 <strlen>
 800189e:	4603      	mov	r3, r0
 80018a0:	f003 0303 	and.w	r3, r3, #3
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bf14      	ite	ne
 80018a8:	2301      	movne	r3, #1
 80018aa:	2300      	moveq	r3, #0
 80018ac:	b2db      	uxtb	r3, r3
 80018ae:	4423      	add	r3, r4
 80018b0:	b2da      	uxtb	r2, r3
 80018b2:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b4:	701a      	strb	r2, [r3, #0]
	Flash_Write_Data(MemoryAddress , (uint32_t *)SaveBuffer, *NoOfWords);
 80018b6:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80018b8:	781b      	ldrb	r3, [r3, #0]
 80018ba:	b29a      	uxth	r2, r3
 80018bc:	f107 0368 	add.w	r3, r7, #104	; 0x68
 80018c0:	4619      	mov	r1, r3
 80018c2:	4819      	ldr	r0, [pc, #100]	; (8001928 <SaveSystemParams+0x20c>)
 80018c4:	f7ff fc12 	bl	80010ec <Flash_Write_Data>
}
 80018c8:	bf00      	nop
 80018ca:	37bc      	adds	r7, #188	; 0xbc
 80018cc:	46bd      	mov	sp, r7
 80018ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80018d2:	bf00      	nop
 80018d4:	20000464 	.word	0x20000464
 80018d8:	20000469 	.word	0x20000469
 80018dc:	20000008 	.word	0x20000008
 80018e0:	20000468 	.word	0x20000468
 80018e4:	20000494 	.word	0x20000494
 80018e8:	20000498 	.word	0x20000498
 80018ec:	2000049c 	.word	0x2000049c
 80018f0:	200004a0 	.word	0x200004a0
 80018f4:	20000480 	.word	0x20000480
 80018f8:	20000484 	.word	0x20000484
 80018fc:	20000488 	.word	0x20000488
 8001900:	2000048c 	.word	0x2000048c
 8001904:	20000490 	.word	0x20000490
 8001908:	2000053c 	.word	0x2000053c
 800190c:	20000470 	.word	0x20000470
 8001910:	20000478 	.word	0x20000478
 8001914:	20000541 	.word	0x20000541
 8001918:	20000474 	.word	0x20000474
 800191c:	20000540 	.word	0x20000540
 8001920:	0800f69c 	.word	0x0800f69c
 8001924:	20000414 	.word	0x20000414
 8001928:	08040000 	.word	0x08040000
 800192c:	00000000 	.word	0x00000000

08001930 <LinearGeneration>:

void LinearGeneration (float *var, float slope, float Amplitude)
// Amplitude is the limit of the value
{
 8001930:	b5b0      	push	{r4, r5, r7, lr}
 8001932:	b084      	sub	sp, #16
 8001934:	af00      	add	r7, sp, #0
 8001936:	60f8      	str	r0, [r7, #12]
 8001938:	ed87 0a02 	vstr	s0, [r7, #8]
 800193c:	edc7 0a01 	vstr	s1, [r7, #4]

//	float ReturnValue;
//	ReturnValue = (InitialValue + (float)(slope*Time*0.001)); //
	if (slope >= 0)
 8001940:	edd7 7a02 	vldr	s15, [r7, #8]
 8001944:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001948:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800194c:	db0d      	blt.n	800196a <LinearGeneration+0x3a>
	{
		if (*var >= Amplitude)
 800194e:	68fb      	ldr	r3, [r7, #12]
 8001950:	edd3 7a00 	vldr	s15, [r3]
 8001954:	ed97 7a01 	vldr	s14, [r7, #4]
 8001958:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800195c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001960:	d811      	bhi.n	8001986 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001962:	68fb      	ldr	r3, [r7, #12]
 8001964:	687a      	ldr	r2, [r7, #4]
 8001966:	601a      	str	r2, [r3, #0]
				return;
 8001968:	e036      	b.n	80019d8 <LinearGeneration+0xa8>
			}
	}
	else
	{
		if (*var <= Amplitude)
 800196a:	68fb      	ldr	r3, [r7, #12]
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ed97 7a01 	vldr	s14, [r7, #4]
 8001974:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001978:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800197c:	db03      	blt.n	8001986 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 800197e:	68fb      	ldr	r3, [r7, #12]
 8001980:	687a      	ldr	r2, [r7, #4]
 8001982:	601a      	str	r2, [r3, #0]
				return;
 8001984:	e028      	b.n	80019d8 <LinearGeneration+0xa8>
			}
	}
	*var += slope*SampleTime*0.001; // *0.001 to convert to second
 8001986:	68fb      	ldr	r3, [r7, #12]
 8001988:	681b      	ldr	r3, [r3, #0]
 800198a:	4618      	mov	r0, r3
 800198c:	f7fe fddc 	bl	8000548 <__aeabi_f2d>
 8001990:	4604      	mov	r4, r0
 8001992:	460d      	mov	r5, r1
 8001994:	4b14      	ldr	r3, [pc, #80]	; (80019e8 <LinearGeneration+0xb8>)
 8001996:	781b      	ldrb	r3, [r3, #0]
 8001998:	ee07 3a90 	vmov	s15, r3
 800199c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80019a0:	edd7 7a02 	vldr	s15, [r7, #8]
 80019a4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80019a8:	ee17 0a90 	vmov	r0, s15
 80019ac:	f7fe fdcc 	bl	8000548 <__aeabi_f2d>
 80019b0:	a30b      	add	r3, pc, #44	; (adr r3, 80019e0 <LinearGeneration+0xb0>)
 80019b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019b6:	f7fe fe1f 	bl	80005f8 <__aeabi_dmul>
 80019ba:	4602      	mov	r2, r0
 80019bc:	460b      	mov	r3, r1
 80019be:	4620      	mov	r0, r4
 80019c0:	4629      	mov	r1, r5
 80019c2:	f7fe fc63 	bl	800028c <__adddf3>
 80019c6:	4602      	mov	r2, r0
 80019c8:	460b      	mov	r3, r1
 80019ca:	4610      	mov	r0, r2
 80019cc:	4619      	mov	r1, r3
 80019ce:	f7ff f90b 	bl	8000be8 <__aeabi_d2f>
 80019d2:	4602      	mov	r2, r0
 80019d4:	68fb      	ldr	r3, [r7, #12]
 80019d6:	601a      	str	r2, [r3, #0]
}
 80019d8:	3710      	adds	r7, #16
 80019da:	46bd      	mov	sp, r7
 80019dc:	bdb0      	pop	{r4, r5, r7, pc}
 80019de:	bf00      	nop
 80019e0:	d2f1a9fc 	.word	0xd2f1a9fc
 80019e4:	3f50624d 	.word	0x3f50624d
 80019e8:	20000468 	.word	0x20000468

080019ec <StopPulseGenerating>:


void StopPulseGenerating()
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0
	PulseGenerationFlag = false; //
 80019f0:	4b0b      	ldr	r3, [pc, #44]	; (8001a20 <StopPulseGenerating+0x34>)
 80019f2:	2200      	movs	r2, #0
 80019f4:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 80019f6:	480b      	ldr	r0, [pc, #44]	; (8001a24 <StopPulseGenerating+0x38>)
 80019f8:	f007 faa6 	bl	8008f48 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_RESET);//Reset Pin status
 80019fc:	2200      	movs	r2, #0
 80019fe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a02:	4809      	ldr	r0, [pc, #36]	; (8001a28 <StopPulseGenerating+0x3c>)
 8001a04:	f006 fd54 	bl	80084b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port,PC8_PR_Pin, GPIO_PIN_RESET);//Reset Pin status
 8001a08:	2200      	movs	r2, #0
 8001a0a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a0e:	4807      	ldr	r0, [pc, #28]	; (8001a2c <StopPulseGenerating+0x40>)
 8001a10:	f006 fd4e 	bl	80084b0 <HAL_GPIO_WritePin>
	StartPositionCount = false;
 8001a14:	4b06      	ldr	r3, [pc, #24]	; (8001a30 <StopPulseGenerating+0x44>)
 8001a16:	2200      	movs	r2, #0
 8001a18:	701a      	strb	r2, [r3, #0]
}
 8001a1a:	bf00      	nop
 8001a1c:	bd80      	pop	{r7, pc}
 8001a1e:	bf00      	nop
 8001a20:	20000436 	.word	0x20000436
 8001a24:	2000026c 	.word	0x2000026c
 8001a28:	40021000 	.word	0x40021000
 8001a2c:	40020800 	.word	0x40020800
 8001a30:	20000440 	.word	0x20000440

08001a34 <InitPulseGenerating>:
void InitPulseGenerating()
{
 8001a34:	b580      	push	{r7, lr}
 8001a36:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); //
 8001a38:	2201      	movs	r2, #1
 8001a3a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001a3e:	4807      	ldr	r0, [pc, #28]	; (8001a5c <InitPulseGenerating+0x28>)
 8001a40:	f006 fd36 	bl	80084b0 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 8001a44:	2201      	movs	r2, #1
 8001a46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001a4a:	4805      	ldr	r0, [pc, #20]	; (8001a60 <InitPulseGenerating+0x2c>)
 8001a4c:	f006 fd30 	bl	80084b0 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3
 8001a50:	4804      	ldr	r0, [pc, #16]	; (8001a64 <InitPulseGenerating+0x30>)
 8001a52:	f007 fa09 	bl	8008e68 <HAL_TIM_Base_Start_IT>
}
 8001a56:	bf00      	nop
 8001a58:	bd80      	pop	{r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	40020800 	.word	0x40020800
 8001a60:	40021000 	.word	0x40021000
 8001a64:	2000026c 	.word	0x2000026c

08001a68 <WaitingMiliSecond>:
bool WaitingMiliSecond(uint16_t TimeInMiliSecond)
{
 8001a68:	b480      	push	{r7}
 8001a6a:	b083      	sub	sp, #12
 8001a6c:	af00      	add	r7, sp, #0
 8001a6e:	4603      	mov	r3, r0
 8001a70:	80fb      	strh	r3, [r7, #6]
	StoppingTimeCount++;
 8001a72:	4b0e      	ldr	r3, [pc, #56]	; (8001aac <WaitingMiliSecond+0x44>)
 8001a74:	881b      	ldrh	r3, [r3, #0]
 8001a76:	3301      	adds	r3, #1
 8001a78:	b29a      	uxth	r2, r3
 8001a7a:	4b0c      	ldr	r3, [pc, #48]	; (8001aac <WaitingMiliSecond+0x44>)
 8001a7c:	801a      	strh	r2, [r3, #0]
	if (StoppingTimeCount >= (uint16_t)(TimeInMiliSecond/SampleTime))
 8001a7e:	88fb      	ldrh	r3, [r7, #6]
 8001a80:	4a0b      	ldr	r2, [pc, #44]	; (8001ab0 <WaitingMiliSecond+0x48>)
 8001a82:	7812      	ldrb	r2, [r2, #0]
 8001a84:	fb93 f3f2 	sdiv	r3, r3, r2
 8001a88:	b29a      	uxth	r2, r3
 8001a8a:	4b08      	ldr	r3, [pc, #32]	; (8001aac <WaitingMiliSecond+0x44>)
 8001a8c:	881b      	ldrh	r3, [r3, #0]
 8001a8e:	429a      	cmp	r2, r3
 8001a90:	d804      	bhi.n	8001a9c <WaitingMiliSecond+0x34>
	{
		StoppingTimeCount = 0;
 8001a92:	4b06      	ldr	r3, [pc, #24]	; (8001aac <WaitingMiliSecond+0x44>)
 8001a94:	2200      	movs	r2, #0
 8001a96:	801a      	strh	r2, [r3, #0]
		return true;
 8001a98:	2301      	movs	r3, #1
 8001a9a:	e000      	b.n	8001a9e <WaitingMiliSecond+0x36>
	}
	return false;
 8001a9c:	2300      	movs	r3, #0
}
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	370c      	adds	r7, #12
 8001aa2:	46bd      	mov	sp, r7
 8001aa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001aa8:	4770      	bx	lr
 8001aaa:	bf00      	nop
 8001aac:	20000458 	.word	0x20000458
 8001ab0:	20000468 	.word	0x20000468
 8001ab4:	00000000 	.word	0x00000000

08001ab8 <CalculateTimer3Period>:

int CalculateTimer3Period (bool DriverType, float speed)
{
 8001ab8:	b5b0      	push	{r4, r5, r7, lr}
 8001aba:	b082      	sub	sp, #8
 8001abc:	af00      	add	r7, sp, #0
 8001abe:	4603      	mov	r3, r0
 8001ac0:	ed87 0a00 	vstr	s0, [r7]
 8001ac4:	71fb      	strb	r3, [r7, #7]
	// DriverType = true ->  Higen FDA7000 Driver
	// DriverType = false -> ASDA A3 Driver
	// Speed in rpm
	if (DriverType) // Higen FDA7000 Driver
 8001ac6:	79fb      	ldrb	r3, [r7, #7]
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d037      	beq.n	8001b3c <CalculateTimer3Period+0x84>
	{
		return (int)((float)(120000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001acc:	edd7 7a00 	vldr	s15, [r7]
 8001ad0:	eef0 7ae7 	vabs.f32	s15, s15
 8001ad4:	ee17 0a90 	vmov	r0, s15
 8001ad8:	f7fe fd36 	bl	8000548 <__aeabi_f2d>
 8001adc:	4604      	mov	r4, r0
 8001ade:	460d      	mov	r5, r1
 8001ae0:	4b39      	ldr	r3, [pc, #228]	; (8001bc8 <CalculateTimer3Period+0x110>)
 8001ae2:	881b      	ldrh	r3, [r3, #0]
 8001ae4:	ee07 3a90 	vmov	s15, r3
 8001ae8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001aec:	ee17 0a90 	vmov	r0, s15
 8001af0:	f7fe fd2a 	bl	8000548 <__aeabi_f2d>
 8001af4:	4602      	mov	r2, r0
 8001af6:	460b      	mov	r3, r1
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7fe fd7c 	bl	80005f8 <__aeabi_dmul>
 8001b00:	4602      	mov	r2, r0
 8001b02:	460b      	mov	r3, r1
 8001b04:	a12c      	add	r1, pc, #176	; (adr r1, 8001bb8 <CalculateTimer3Period+0x100>)
 8001b06:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b0a:	f7fe fe9f 	bl	800084c <__aeabi_ddiv>
 8001b0e:	4602      	mov	r2, r0
 8001b10:	460b      	mov	r3, r1
 8001b12:	4610      	mov	r0, r2
 8001b14:	4619      	mov	r1, r3
 8001b16:	f7ff f867 	bl	8000be8 <__aeabi_d2f>
 8001b1a:	4603      	mov	r3, r0
 8001b1c:	4618      	mov	r0, r3
 8001b1e:	f7fe fd13 	bl	8000548 <__aeabi_f2d>
 8001b22:	f04f 0200 	mov.w	r2, #0
 8001b26:	4b29      	ldr	r3, [pc, #164]	; (8001bcc <CalculateTimer3Period+0x114>)
 8001b28:	f7fe fbb0 	bl	800028c <__adddf3>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	4610      	mov	r0, r2
 8001b32:	4619      	mov	r1, r3
 8001b34:	f7ff f810 	bl	8000b58 <__aeabi_d2iz>
 8001b38:	4603      	mov	r3, r0
 8001b3a:	e036      	b.n	8001baa <CalculateTimer3Period+0xf2>
	}
	else
	{
		return (int)((float)(15000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001b3c:	edd7 7a00 	vldr	s15, [r7]
 8001b40:	eef0 7ae7 	vabs.f32	s15, s15
 8001b44:	ee17 0a90 	vmov	r0, s15
 8001b48:	f7fe fcfe 	bl	8000548 <__aeabi_f2d>
 8001b4c:	4604      	mov	r4, r0
 8001b4e:	460d      	mov	r5, r1
 8001b50:	4b1d      	ldr	r3, [pc, #116]	; (8001bc8 <CalculateTimer3Period+0x110>)
 8001b52:	881b      	ldrh	r3, [r3, #0]
 8001b54:	ee07 3a90 	vmov	s15, r3
 8001b58:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001b5c:	ee17 0a90 	vmov	r0, s15
 8001b60:	f7fe fcf2 	bl	8000548 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4620      	mov	r0, r4
 8001b6a:	4629      	mov	r1, r5
 8001b6c:	f7fe fd44 	bl	80005f8 <__aeabi_dmul>
 8001b70:	4602      	mov	r2, r0
 8001b72:	460b      	mov	r3, r1
 8001b74:	a112      	add	r1, pc, #72	; (adr r1, 8001bc0 <CalculateTimer3Period+0x108>)
 8001b76:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001b7a:	f7fe fe67 	bl	800084c <__aeabi_ddiv>
 8001b7e:	4602      	mov	r2, r0
 8001b80:	460b      	mov	r3, r1
 8001b82:	4610      	mov	r0, r2
 8001b84:	4619      	mov	r1, r3
 8001b86:	f7ff f82f 	bl	8000be8 <__aeabi_d2f>
 8001b8a:	4603      	mov	r3, r0
 8001b8c:	4618      	mov	r0, r3
 8001b8e:	f7fe fcdb 	bl	8000548 <__aeabi_f2d>
 8001b92:	f04f 0200 	mov.w	r2, #0
 8001b96:	4b0d      	ldr	r3, [pc, #52]	; (8001bcc <CalculateTimer3Period+0x114>)
 8001b98:	f7fe fb78 	bl	800028c <__adddf3>
 8001b9c:	4602      	mov	r2, r0
 8001b9e:	460b      	mov	r3, r1
 8001ba0:	4610      	mov	r0, r2
 8001ba2:	4619      	mov	r1, r3
 8001ba4:	f7fe ffd8 	bl	8000b58 <__aeabi_d2iz>
 8001ba8:	4603      	mov	r3, r0
	}
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	3708      	adds	r7, #8
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	bdb0      	pop	{r4, r5, r7, pc}
 8001bb2:	bf00      	nop
 8001bb4:	f3af 8000 	nop.w
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	419c9c38 	.word	0x419c9c38
 8001bc0:	00000000 	.word	0x00000000
 8001bc4:	416c9c38 	.word	0x416c9c38
 8001bc8:	2000000a 	.word	0x2000000a
 8001bcc:	3fe00000 	.word	0x3fe00000

08001bd0 <CheckGoingToRefPosition>:

bool CheckGoingToRefPosition(bool _direction, int RefPulsePosition) // return true when finish going down, else return false;
// direction = true => go down, false => go up
{
 8001bd0:	b580      	push	{r7, lr}
 8001bd2:	b082      	sub	sp, #8
 8001bd4:	af00      	add	r7, sp, #0
 8001bd6:	4603      	mov	r3, r0
 8001bd8:	6039      	str	r1, [r7, #0]
 8001bda:	71fb      	strb	r3, [r7, #7]
	if (MotorDriver) // FDA7000 Driver, PosCmd based
 8001bdc:	4b9d      	ldr	r3, [pc, #628]	; (8001e54 <CheckGoingToRefPosition+0x284>)
 8001bde:	781b      	ldrb	r3, [r3, #0]
 8001be0:	2b00      	cmp	r3, #0
 8001be2:	f000 80c5 	beq.w	8001d70 <CheckGoingToRefPosition+0x1a0>
	{
		//if (abs(RefPulsePosition - EgearRatio*PulseSimuCount) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/120)) // Start reducing the speed
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/60))
 8001be6:	4b9c      	ldr	r3, [pc, #624]	; (8001e58 <CheckGoingToRefPosition+0x288>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	683a      	ldr	r2, [r7, #0]
 8001bec:	1ad2      	subs	r2, r2, r3
 8001bee:	4b9b      	ldr	r3, [pc, #620]	; (8001e5c <CheckGoingToRefPosition+0x28c>)
 8001bf0:	681b      	ldr	r3, [r3, #0]
 8001bf2:	4413      	add	r3, r2
 8001bf4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bf8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bfc:	4b98      	ldr	r3, [pc, #608]	; (8001e60 <CheckGoingToRefPosition+0x290>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	4b98      	ldr	r3, [pc, #608]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001c04:	781b      	ldrb	r3, [r3, #0]
 8001c06:	fb01 f303 	mul.w	r3, r1, r3
 8001c0a:	4997      	ldr	r1, [pc, #604]	; (8001e68 <CheckGoingToRefPosition+0x298>)
 8001c0c:	fb81 0103 	smull	r0, r1, r1, r3
 8001c10:	10c9      	asrs	r1, r1, #3
 8001c12:	17db      	asrs	r3, r3, #31
 8001c14:	1acb      	subs	r3, r1, r3
 8001c16:	429a      	cmp	r2, r3
 8001c18:	dc3e      	bgt.n	8001c98 <CheckGoingToRefPosition+0xc8>
		{
			if (_direction) // go down
 8001c1a:	79fb      	ldrb	r3, [r7, #7]
 8001c1c:	2b00      	cmp	r3, #0
 8001c1e:	d010      	beq.n	8001c42 <CheckGoingToRefPosition+0x72>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20); //-EpsilonPulling means the spd is negative
 8001c20:	4b92      	ldr	r3, [pc, #584]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001c22:	edd3 7a00 	vldr	s15, [r3]
 8001c26:	eef1 7a67 	vneg.f32	s15, s15
 8001c2a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c2e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c32:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001c36:	eeb0 0a67 	vmov.f32	s0, s15
 8001c3a:	488d      	ldr	r0, [pc, #564]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001c3c:	f7ff fe78 	bl	8001930 <LinearGeneration>
 8001c40:	e00d      	b.n	8001c5e <CheckGoingToRefPosition+0x8e>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20); //-EpsilonPulling means the spd is negative
 8001c42:	4b8a      	ldr	r3, [pc, #552]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c4c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c50:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	4885      	ldr	r0, [pc, #532]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001c5a:	f7ff fe69 	bl	8001930 <LinearGeneration>

			}
			if (SpeedCmd != 0)
 8001c5e:	4b84      	ldr	r3, [pc, #528]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001c60:	edd3 7a00 	vldr	s15, [r3]
 8001c64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6c:	d05f      	beq.n	8001d2e <CheckGoingToRefPosition+0x15e>
			{
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001c6e:	4b79      	ldr	r3, [pc, #484]	; (8001e54 <CheckGoingToRefPosition+0x284>)
 8001c70:	781b      	ldrb	r3, [r3, #0]
 8001c72:	4a7f      	ldr	r2, [pc, #508]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001c74:	edd2 7a00 	vldr	s15, [r2]
 8001c78:	eeb0 0a67 	vmov.f32	s0, s15
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	f7ff ff1b 	bl	8001ab8 <CalculateTimer3Period>
 8001c82:	4603      	mov	r3, r0
 8001c84:	b29a      	uxth	r2, r3
 8001c86:	4b7b      	ldr	r3, [pc, #492]	; (8001e74 <CheckGoingToRefPosition+0x2a4>)
 8001c88:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8001c8a:	4b7b      	ldr	r3, [pc, #492]	; (8001e78 <CheckGoingToRefPosition+0x2a8>)
 8001c8c:	2201      	movs	r2, #1
 8001c8e:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001c90:	4b7a      	ldr	r3, [pc, #488]	; (8001e7c <CheckGoingToRefPosition+0x2ac>)
 8001c92:	2201      	movs	r2, #1
 8001c94:	701a      	strb	r2, [r3, #0]
 8001c96:	e04a      	b.n	8001d2e <CheckGoingToRefPosition+0x15e>
			}
		}
		else // Acclerate going
		{
			// Ramping the speed cmd
			if (_direction) // go down
 8001c98:	79fb      	ldrb	r3, [r7, #7]
 8001c9a:	2b00      	cmp	r3, #0
 8001c9c:	d014      	beq.n	8001cc8 <CheckGoingToRefPosition+0xf8>
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001c9e:	4b73      	ldr	r3, [pc, #460]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001ca0:	edd3 7a00 	vldr	s15, [r3]
 8001ca4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ca8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cac:	4b6d      	ldr	r3, [pc, #436]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001cae:	781b      	ldrb	r3, [r3, #0]
 8001cb0:	ee07 3a10 	vmov	s14, r3
 8001cb4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001cb8:	eef0 0a47 	vmov.f32	s1, s14
 8001cbc:	eeb0 0a67 	vmov.f32	s0, s15
 8001cc0:	486b      	ldr	r0, [pc, #428]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001cc2:	f7ff fe35 	bl	8001930 <LinearGeneration>
 8001cc6:	e016      	b.n	8001cf6 <CheckGoingToRefPosition+0x126>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed); //-EpsilonPulling means the spd is negative
 8001cc8:	4b68      	ldr	r3, [pc, #416]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001cca:	edd3 7a00 	vldr	s15, [r3]
 8001cce:	eef1 7a67 	vneg.f32	s15, s15
 8001cd2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cd6:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cda:	4b62      	ldr	r3, [pc, #392]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001cdc:	781b      	ldrb	r3, [r3, #0]
 8001cde:	425b      	negs	r3, r3
 8001ce0:	ee07 3a10 	vmov	s14, r3
 8001ce4:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ce8:	eef0 0a47 	vmov.f32	s1, s14
 8001cec:	eeb0 0a67 	vmov.f32	s0, s15
 8001cf0:	485f      	ldr	r0, [pc, #380]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001cf2:	f7ff fe1d 	bl	8001930 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001cf6:	4b5e      	ldr	r3, [pc, #376]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001cf8:	edd3 7a00 	vldr	s15, [r3]
 8001cfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d04:	d013      	beq.n	8001d2e <CheckGoingToRefPosition+0x15e>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001d06:	4b53      	ldr	r3, [pc, #332]	; (8001e54 <CheckGoingToRefPosition+0x284>)
 8001d08:	781b      	ldrb	r3, [r3, #0]
 8001d0a:	4a59      	ldr	r2, [pc, #356]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001d0c:	edd2 7a00 	vldr	s15, [r2]
 8001d10:	eeb0 0a67 	vmov.f32	s0, s15
 8001d14:	4618      	mov	r0, r3
 8001d16:	f7ff fecf 	bl	8001ab8 <CalculateTimer3Period>
 8001d1a:	4603      	mov	r3, r0
 8001d1c:	b29a      	uxth	r2, r3
 8001d1e:	4b55      	ldr	r3, [pc, #340]	; (8001e74 <CheckGoingToRefPosition+0x2a4>)
 8001d20:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8001d22:	4b55      	ldr	r3, [pc, #340]	; (8001e78 <CheckGoingToRefPosition+0x2a8>)
 8001d24:	2201      	movs	r2, #1
 8001d26:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001d28:	4b54      	ldr	r3, [pc, #336]	; (8001e7c <CheckGoingToRefPosition+0x2ac>)
 8001d2a:	2201      	movs	r2, #1
 8001d2c:	701a      	strb	r2, [r3, #0]
			}

		}
		if ( abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 500) // Reach the ref position
 8001d2e:	4b4a      	ldr	r3, [pc, #296]	; (8001e58 <CheckGoingToRefPosition+0x288>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	683a      	ldr	r2, [r7, #0]
 8001d34:	1ad2      	subs	r2, r2, r3
 8001d36:	4b49      	ldr	r3, [pc, #292]	; (8001e5c <CheckGoingToRefPosition+0x28c>)
 8001d38:	681b      	ldr	r3, [r3, #0]
 8001d3a:	4413      	add	r3, r2
 8001d3c:	f513 7ffa 	cmn.w	r3, #500	; 0x1f4
 8001d40:	f2c0 80f1 	blt.w	8001f26 <CheckGoingToRefPosition+0x356>
 8001d44:	4b44      	ldr	r3, [pc, #272]	; (8001e58 <CheckGoingToRefPosition+0x288>)
 8001d46:	681b      	ldr	r3, [r3, #0]
 8001d48:	683a      	ldr	r2, [r7, #0]
 8001d4a:	1ad2      	subs	r2, r2, r3
 8001d4c:	4b43      	ldr	r3, [pc, #268]	; (8001e5c <CheckGoingToRefPosition+0x28c>)
 8001d4e:	681b      	ldr	r3, [r3, #0]
 8001d50:	4413      	add	r3, r2
 8001d52:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001d56:	f300 80e6 	bgt.w	8001f26 <CheckGoingToRefPosition+0x356>
		{
			Timer3CountPeriod = 0;
 8001d5a:	4b46      	ldr	r3, [pc, #280]	; (8001e74 <CheckGoingToRefPosition+0x2a4>)
 8001d5c:	2200      	movs	r2, #0
 8001d5e:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001d60:	4b43      	ldr	r3, [pc, #268]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001d62:	f04f 0200 	mov.w	r2, #0
 8001d66:	601a      	str	r2, [r3, #0]

			StopPulseGenerating();
 8001d68:	f7ff fe40 	bl	80019ec <StopPulseGenerating>
			return true;
 8001d6c:	2301      	movs	r3, #1
 8001d6e:	e0db      	b.n	8001f28 <CheckGoingToRefPosition+0x358>
		}
	}
	else // ASDA A3, Actual Encoder based
	{
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/90)) // Start reducing the speed
 8001d70:	4b39      	ldr	r3, [pc, #228]	; (8001e58 <CheckGoingToRefPosition+0x288>)
 8001d72:	681b      	ldr	r3, [r3, #0]
 8001d74:	683a      	ldr	r2, [r7, #0]
 8001d76:	1ad2      	subs	r2, r2, r3
 8001d78:	4b38      	ldr	r3, [pc, #224]	; (8001e5c <CheckGoingToRefPosition+0x28c>)
 8001d7a:	681b      	ldr	r3, [r3, #0]
 8001d7c:	4413      	add	r3, r2
 8001d7e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001d82:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001d86:	4b36      	ldr	r3, [pc, #216]	; (8001e60 <CheckGoingToRefPosition+0x290>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	4619      	mov	r1, r3
 8001d8c:	4b35      	ldr	r3, [pc, #212]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	fb01 f303 	mul.w	r3, r1, r3
 8001d94:	493a      	ldr	r1, [pc, #232]	; (8001e80 <CheckGoingToRefPosition+0x2b0>)
 8001d96:	fb81 0103 	smull	r0, r1, r1, r3
 8001d9a:	4419      	add	r1, r3
 8001d9c:	1109      	asrs	r1, r1, #4
 8001d9e:	17db      	asrs	r3, r3, #31
 8001da0:	1acb      	subs	r3, r1, r3
 8001da2:	429a      	cmp	r2, r3
 8001da4:	dc3e      	bgt.n	8001e24 <CheckGoingToRefPosition+0x254>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001da6:	79fb      	ldrb	r3, [r7, #7]
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	d010      	beq.n	8001dce <CheckGoingToRefPosition+0x1fe>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20);
 8001dac:	4b2f      	ldr	r3, [pc, #188]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001dae:	edd3 7a00 	vldr	s15, [r3]
 8001db2:	eef1 7a67 	vneg.f32	s15, s15
 8001db6:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dba:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dbe:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001dc2:	eeb0 0a67 	vmov.f32	s0, s15
 8001dc6:	482a      	ldr	r0, [pc, #168]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001dc8:	f7ff fdb2 	bl	8001930 <LinearGeneration>
 8001dcc:	e00d      	b.n	8001dea <CheckGoingToRefPosition+0x21a>
				//SpeedCmd = LinearGeneration(RunningTime2,-GoingAcceleration*10,PrePullingSpeed,20,PullingSpeed); //-EpsilonPulling means the spd is negative
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20);
 8001dce:	4b27      	ldr	r3, [pc, #156]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dd8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001ddc:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001de0:	eeb0 0a67 	vmov.f32	s0, s15
 8001de4:	4822      	ldr	r0, [pc, #136]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001de6:	f7ff fda3 	bl	8001930 <LinearGeneration>
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10, PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
			}
			if (SpeedCmd != 0)
 8001dea:	4b21      	ldr	r3, [pc, #132]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001dec:	edd3 7a00 	vldr	s15, [r3]
 8001df0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001df4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df8:	d077      	beq.n	8001eea <CheckGoingToRefPosition+0x31a>
			{
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001dfa:	4b16      	ldr	r3, [pc, #88]	; (8001e54 <CheckGoingToRefPosition+0x284>)
 8001dfc:	781b      	ldrb	r3, [r3, #0]
 8001dfe:	4a1c      	ldr	r2, [pc, #112]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001e00:	edd2 7a00 	vldr	s15, [r2]
 8001e04:	eeb0 0a67 	vmov.f32	s0, s15
 8001e08:	4618      	mov	r0, r3
 8001e0a:	f7ff fe55 	bl	8001ab8 <CalculateTimer3Period>
 8001e0e:	4603      	mov	r3, r0
 8001e10:	b29a      	uxth	r2, r3
 8001e12:	4b18      	ldr	r3, [pc, #96]	; (8001e74 <CheckGoingToRefPosition+0x2a4>)
 8001e14:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8001e16:	4b18      	ldr	r3, [pc, #96]	; (8001e78 <CheckGoingToRefPosition+0x2a8>)
 8001e18:	2201      	movs	r2, #1
 8001e1a:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001e1c:	4b17      	ldr	r3, [pc, #92]	; (8001e7c <CheckGoingToRefPosition+0x2ac>)
 8001e1e:	2201      	movs	r2, #1
 8001e20:	701a      	strb	r2, [r3, #0]
 8001e22:	e062      	b.n	8001eea <CheckGoingToRefPosition+0x31a>
		}

		else
		{
			// Ramping the speed cmd
			if (_direction) // go down
 8001e24:	79fb      	ldrb	r3, [r7, #7]
 8001e26:	2b00      	cmp	r3, #0
 8001e28:	d02c      	beq.n	8001e84 <CheckGoingToRefPosition+0x2b4>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001e2a:	4b10      	ldr	r3, [pc, #64]	; (8001e6c <CheckGoingToRefPosition+0x29c>)
 8001e2c:	edd3 7a00 	vldr	s15, [r3]
 8001e30:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e34:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e38:	4b0a      	ldr	r3, [pc, #40]	; (8001e64 <CheckGoingToRefPosition+0x294>)
 8001e3a:	781b      	ldrb	r3, [r3, #0]
 8001e3c:	ee07 3a10 	vmov	s14, r3
 8001e40:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001e44:	eef0 0a47 	vmov.f32	s1, s14
 8001e48:	eeb0 0a67 	vmov.f32	s0, s15
 8001e4c:	4808      	ldr	r0, [pc, #32]	; (8001e70 <CheckGoingToRefPosition+0x2a0>)
 8001e4e:	f7ff fd6f 	bl	8001930 <LinearGeneration>
 8001e52:	e02e      	b.n	8001eb2 <CheckGoingToRefPosition+0x2e2>
 8001e54:	20000003 	.word	0x20000003
 8001e58:	20000510 	.word	0x20000510
 8001e5c:	200004ac 	.word	0x200004ac
 8001e60:	2000000a 	.word	0x2000000a
 8001e64:	20000469 	.word	0x20000469
 8001e68:	66666667 	.word	0x66666667
 8001e6c:	2000046c 	.word	0x2000046c
 8001e70:	20000518 	.word	0x20000518
 8001e74:	20000454 	.word	0x20000454
 8001e78:	20000440 	.word	0x20000440
 8001e7c:	20000436 	.word	0x20000436
 8001e80:	88888889 	.word	0x88888889
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed);
 8001e84:	4b2a      	ldr	r3, [pc, #168]	; (8001f30 <CheckGoingToRefPosition+0x360>)
 8001e86:	edd3 7a00 	vldr	s15, [r3]
 8001e8a:	eef1 7a67 	vneg.f32	s15, s15
 8001e8e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e92:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e96:	4b27      	ldr	r3, [pc, #156]	; (8001f34 <CheckGoingToRefPosition+0x364>)
 8001e98:	781b      	ldrb	r3, [r3, #0]
 8001e9a:	425b      	negs	r3, r3
 8001e9c:	ee07 3a10 	vmov	s14, r3
 8001ea0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001ea4:	eef0 0a47 	vmov.f32	s1, s14
 8001ea8:	eeb0 0a67 	vmov.f32	s0, s15
 8001eac:	4822      	ldr	r0, [pc, #136]	; (8001f38 <CheckGoingToRefPosition+0x368>)
 8001eae:	f7ff fd3f 	bl	8001930 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001eb2:	4b21      	ldr	r3, [pc, #132]	; (8001f38 <CheckGoingToRefPosition+0x368>)
 8001eb4:	edd3 7a00 	vldr	s15, [r3]
 8001eb8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001ebc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ec0:	d013      	beq.n	8001eea <CheckGoingToRefPosition+0x31a>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001ec2:	4b1e      	ldr	r3, [pc, #120]	; (8001f3c <CheckGoingToRefPosition+0x36c>)
 8001ec4:	781b      	ldrb	r3, [r3, #0]
 8001ec6:	4a1c      	ldr	r2, [pc, #112]	; (8001f38 <CheckGoingToRefPosition+0x368>)
 8001ec8:	edd2 7a00 	vldr	s15, [r2]
 8001ecc:	eeb0 0a67 	vmov.f32	s0, s15
 8001ed0:	4618      	mov	r0, r3
 8001ed2:	f7ff fdf1 	bl	8001ab8 <CalculateTimer3Period>
 8001ed6:	4603      	mov	r3, r0
 8001ed8:	b29a      	uxth	r2, r3
 8001eda:	4b19      	ldr	r3, [pc, #100]	; (8001f40 <CheckGoingToRefPosition+0x370>)
 8001edc:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8001ede:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <CheckGoingToRefPosition+0x374>)
 8001ee0:	2201      	movs	r2, #1
 8001ee2:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001ee4:	4b18      	ldr	r3, [pc, #96]	; (8001f48 <CheckGoingToRefPosition+0x378>)
 8001ee6:	2201      	movs	r2, #1
 8001ee8:	701a      	strb	r2, [r3, #0]
			}
		}

		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 50) // Reach the bottom position
 8001eea:	4b18      	ldr	r3, [pc, #96]	; (8001f4c <CheckGoingToRefPosition+0x37c>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	683a      	ldr	r2, [r7, #0]
 8001ef0:	1ad2      	subs	r2, r2, r3
 8001ef2:	4b17      	ldr	r3, [pc, #92]	; (8001f50 <CheckGoingToRefPosition+0x380>)
 8001ef4:	681b      	ldr	r3, [r3, #0]
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f113 0f32 	cmn.w	r3, #50	; 0x32
 8001efc:	db13      	blt.n	8001f26 <CheckGoingToRefPosition+0x356>
 8001efe:	4b13      	ldr	r3, [pc, #76]	; (8001f4c <CheckGoingToRefPosition+0x37c>)
 8001f00:	681b      	ldr	r3, [r3, #0]
 8001f02:	683a      	ldr	r2, [r7, #0]
 8001f04:	1ad2      	subs	r2, r2, r3
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <CheckGoingToRefPosition+0x380>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	4413      	add	r3, r2
 8001f0c:	2b32      	cmp	r3, #50	; 0x32
 8001f0e:	dc0a      	bgt.n	8001f26 <CheckGoingToRefPosition+0x356>
		{
			Timer3CountPeriod = 0;
 8001f10:	4b0b      	ldr	r3, [pc, #44]	; (8001f40 <CheckGoingToRefPosition+0x370>)
 8001f12:	2200      	movs	r2, #0
 8001f14:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001f16:	4b08      	ldr	r3, [pc, #32]	; (8001f38 <CheckGoingToRefPosition+0x368>)
 8001f18:	f04f 0200 	mov.w	r2, #0
 8001f1c:	601a      	str	r2, [r3, #0]
			StopPulseGenerating();
 8001f1e:	f7ff fd65 	bl	80019ec <StopPulseGenerating>
			return true;
 8001f22:	2301      	movs	r3, #1
 8001f24:	e000      	b.n	8001f28 <CheckGoingToRefPosition+0x358>
		}
	}
	return false;
 8001f26:	2300      	movs	r3, #0
}
 8001f28:	4618      	mov	r0, r3
 8001f2a:	3708      	adds	r7, #8
 8001f2c:	46bd      	mov	sp, r7
 8001f2e:	bd80      	pop	{r7, pc}
 8001f30:	2000046c 	.word	0x2000046c
 8001f34:	20000469 	.word	0x20000469
 8001f38:	20000518 	.word	0x20000518
 8001f3c:	20000003 	.word	0x20000003
 8001f40:	20000454 	.word	0x20000454
 8001f44:	20000440 	.word	0x20000440
 8001f48:	20000436 	.word	0x20000436
 8001f4c:	20000510 	.word	0x20000510
 8001f50:	200004ac 	.word	0x200004ac

08001f54 <InitGoingToStartingPosition>:

void InitGoingToStartingPosition ()
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	af00      	add	r7, sp, #0
	if (MotorDriver) // HIGEN FDA7000
 8001f58:	4b45      	ldr	r3, [pc, #276]	; (8002070 <InitGoingToStartingPosition+0x11c>)
 8001f5a:	781b      	ldrb	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	d042      	beq.n	8001fe6 <InitGoingToStartingPosition+0x92>
	{
		//if (PulseSimuCount*EgearRatio < PullingBotomPulseCmdPosition) // Then going down to the bottom
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition)
 8001f60:	4b44      	ldr	r3, [pc, #272]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8001f62:	681a      	ldr	r2, [r3, #0]
 8001f64:	4b44      	ldr	r3, [pc, #272]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8001f66:	681b      	ldr	r3, [r3, #0]
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	4b44      	ldr	r3, [pc, #272]	; (800207c <InitGoingToStartingPosition+0x128>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	429a      	cmp	r2, r3
 8001f70:	da0c      	bge.n	8001f8c <InitGoingToStartingPosition+0x38>
		{
			StartAccleratePulling = false;
 8001f72:	4b43      	ldr	r3, [pc, #268]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8001f74:	2200      	movs	r2, #0
 8001f76:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001f78:	4b42      	ldr	r3, [pc, #264]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8001f7a:	2201      	movs	r2, #1
 8001f7c:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = false; // false = Dropping Down
 8001f7e:	4b42      	ldr	r3, [pc, #264]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8001f80:	2200      	movs	r2, #0
 8001f82:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001f84:	f7ff f970 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			InitPulseGenerating();
 8001f88:	f7ff fd54 	bl	8001a34 <InitPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001f8c:	4b39      	ldr	r3, [pc, #228]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8001f8e:	681a      	ldr	r2, [r3, #0]
 8001f90:	4b39      	ldr	r3, [pc, #228]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8001f92:	681b      	ldr	r3, [r3, #0]
 8001f94:	1ad2      	subs	r2, r2, r3
 8001f96:	4b39      	ldr	r3, [pc, #228]	; (800207c <InitGoingToStartingPosition+0x128>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	429a      	cmp	r2, r3
 8001f9c:	dd0c      	ble.n	8001fb8 <InitGoingToStartingPosition+0x64>
		{
			StartAccleratePulling = false;
 8001f9e:	4b38      	ldr	r3, [pc, #224]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8001fa0:	2200      	movs	r2, #0
 8001fa2:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8001fa4:	4b37      	ldr	r3, [pc, #220]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8001fa6:	2200      	movs	r2, #0
 8001fa8:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8001faa:	4b37      	ldr	r3, [pc, #220]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001fb0:	f7ff f95a 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 8001fb4:	f7ff fd3e 	bl	8001a34 <InitPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8001fb8:	4b2e      	ldr	r3, [pc, #184]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8001fba:	681a      	ldr	r2, [r3, #0]
 8001fbc:	4b2e      	ldr	r3, [pc, #184]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8001fbe:	681b      	ldr	r3, [r3, #0]
 8001fc0:	1ad2      	subs	r2, r2, r3
 8001fc2:	4b2e      	ldr	r3, [pc, #184]	; (800207c <InitGoingToStartingPosition+0x128>)
 8001fc4:	681b      	ldr	r3, [r3, #0]
 8001fc6:	429a      	cmp	r2, r3
 8001fc8:	d14f      	bne.n	800206a <InitGoingToStartingPosition+0x116>
		{
			StartAccleratePulling = true;
 8001fca:	4b2d      	ldr	r3, [pc, #180]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8001fcc:	2201      	movs	r2, #1
 8001fce:	701a      	strb	r2, [r3, #0]
			Direction = false;
 8001fd0:	4b2c      	ldr	r3, [pc, #176]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8001fd2:	2200      	movs	r2, #0
 8001fd4:	701a      	strb	r2, [r3, #0]

			PRIsToggled = true; // true = pulling up.
 8001fd6:	4b2c      	ldr	r3, [pc, #176]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8001fd8:	2201      	movs	r2, #1
 8001fda:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001fdc:	f7ff f944 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 8001fe0:	f7ff fd28 	bl	8001a34 <InitPulseGenerating>
			PRIsToggled = true; // true = pulling up.
			DisableSTOP(); // Disable the stop
			InitPulseGenerating();
		}
	}
}
 8001fe4:	e041      	b.n	800206a <InitGoingToStartingPosition+0x116>
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition) // Then going down to the bottom
 8001fe6:	4b23      	ldr	r3, [pc, #140]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8001fe8:	681a      	ldr	r2, [r3, #0]
 8001fea:	4b23      	ldr	r3, [pc, #140]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8001fec:	681b      	ldr	r3, [r3, #0]
 8001fee:	1ad2      	subs	r2, r2, r3
 8001ff0:	4b22      	ldr	r3, [pc, #136]	; (800207c <InitGoingToStartingPosition+0x128>)
 8001ff2:	681b      	ldr	r3, [r3, #0]
 8001ff4:	429a      	cmp	r2, r3
 8001ff6:	da0c      	bge.n	8002012 <InitGoingToStartingPosition+0xbe>
			StartAccleratePulling = false;
 8001ff8:	4b21      	ldr	r3, [pc, #132]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001ffe:	4b21      	ldr	r3, [pc, #132]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8002000:	2201      	movs	r2, #1
 8002002:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down
 8002004:	4b20      	ldr	r3, [pc, #128]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8002006:	2200      	movs	r2, #0
 8002008:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 800200a:	f7ff f92d 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 800200e:	f7ff fd11 	bl	8001a34 <InitPulseGenerating>
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8002014:	681a      	ldr	r2, [r3, #0]
 8002016:	4b18      	ldr	r3, [pc, #96]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	1ad2      	subs	r2, r2, r3
 800201c:	4b17      	ldr	r3, [pc, #92]	; (800207c <InitGoingToStartingPosition+0x128>)
 800201e:	681b      	ldr	r3, [r3, #0]
 8002020:	429a      	cmp	r2, r3
 8002022:	dd0c      	ble.n	800203e <InitGoingToStartingPosition+0xea>
			StartAccleratePulling = false;
 8002024:	4b16      	ldr	r3, [pc, #88]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8002026:	2200      	movs	r2, #0
 8002028:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 800202a:	4b16      	ldr	r3, [pc, #88]	; (8002084 <InitGoingToStartingPosition+0x130>)
 800202c:	2200      	movs	r2, #0
 800202e:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8002030:	4b15      	ldr	r3, [pc, #84]	; (8002088 <InitGoingToStartingPosition+0x134>)
 8002032:	2201      	movs	r2, #1
 8002034:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002036:	f7ff f917 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 800203a:	f7ff fcfb 	bl	8001a34 <InitPulseGenerating>
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 800203e:	4b0d      	ldr	r3, [pc, #52]	; (8002074 <InitGoingToStartingPosition+0x120>)
 8002040:	681a      	ldr	r2, [r3, #0]
 8002042:	4b0d      	ldr	r3, [pc, #52]	; (8002078 <InitGoingToStartingPosition+0x124>)
 8002044:	681b      	ldr	r3, [r3, #0]
 8002046:	1ad2      	subs	r2, r2, r3
 8002048:	4b0c      	ldr	r3, [pc, #48]	; (800207c <InitGoingToStartingPosition+0x128>)
 800204a:	681b      	ldr	r3, [r3, #0]
 800204c:	429a      	cmp	r2, r3
 800204e:	d10c      	bne.n	800206a <InitGoingToStartingPosition+0x116>
			StartAccleratePulling = true;
 8002050:	4b0b      	ldr	r3, [pc, #44]	; (8002080 <InitGoingToStartingPosition+0x12c>)
 8002052:	2201      	movs	r2, #1
 8002054:	701a      	strb	r2, [r3, #0]
			Direction = false;
 8002056:	4b0b      	ldr	r3, [pc, #44]	; (8002084 <InitGoingToStartingPosition+0x130>)
 8002058:	2200      	movs	r2, #0
 800205a:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 800205c:	4b0a      	ldr	r3, [pc, #40]	; (8002088 <InitGoingToStartingPosition+0x134>)
 800205e:	2201      	movs	r2, #1
 8002060:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002062:	f7ff f901 	bl	8001268 <DisableSTOP>
			InitPulseGenerating();
 8002066:	f7ff fce5 	bl	8001a34 <InitPulseGenerating>
}
 800206a:	bf00      	nop
 800206c:	bd80      	pop	{r7, pc}
 800206e:	bf00      	nop
 8002070:	20000003 	.word	0x20000003
 8002074:	20000510 	.word	0x20000510
 8002078:	200004ac 	.word	0x200004ac
 800207c:	200004a8 	.word	0x200004a8
 8002080:	20000439 	.word	0x20000439
 8002084:	20000434 	.word	0x20000434
 8002088:	2000043f 	.word	0x2000043f
 800208c:	00000000 	.word	0x00000000

08002090 <InitializeSimulating>:
void InitializeSimulating (uint8_t Mode)
{
 8002090:	b5b0      	push	{r4, r5, r7, lr}
 8002092:	b082      	sub	sp, #8
 8002094:	af00      	add	r7, sp, #0
 8002096:	4603      	mov	r3, r0
 8002098:	71fb      	strb	r3, [r7, #7]
	StartRunning = false;
 800209a:	4b71      	ldr	r3, [pc, #452]	; (8002260 <InitializeSimulating+0x1d0>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
	StartSimulating = true;
 80020a0:	4b70      	ldr	r3, [pc, #448]	; (8002264 <InitializeSimulating+0x1d4>)
 80020a2:	2201      	movs	r2, #1
 80020a4:	701a      	strb	r2, [r3, #0]
	switch (Mode)
 80020a6:	79fb      	ldrb	r3, [r7, #7]
 80020a8:	2b03      	cmp	r3, #3
 80020aa:	d073      	beq.n	8002194 <InitializeSimulating+0x104>
 80020ac:	2b03      	cmp	r3, #3
 80020ae:	f300 80ce 	bgt.w	800224e <InitializeSimulating+0x1be>
 80020b2:	2b01      	cmp	r3, #1
 80020b4:	d002      	beq.n	80020bc <InitializeSimulating+0x2c>
 80020b6:	2b02      	cmp	r3, #2
 80020b8:	d01e      	beq.n	80020f8 <InitializeSimulating+0x68>
			PRIsToggled = true; // true = pulling up.
			InitPulseGenerating();
			break;

		default:
			break;
 80020ba:	e0c8      	b.n	800224e <InitializeSimulating+0x1be>
			PulseSimuCount = 0;
 80020bc:	4b6a      	ldr	r3, [pc, #424]	; (8002268 <InitializeSimulating+0x1d8>)
 80020be:	2200      	movs	r2, #0
 80020c0:	601a      	str	r2, [r3, #0]
			CompleteDropping = false;
 80020c2:	4b6a      	ldr	r3, [pc, #424]	; (800226c <InitializeSimulating+0x1dc>)
 80020c4:	2200      	movs	r2, #0
 80020c6:	701a      	strb	r2, [r3, #0]
			DropStep1 = true;
 80020c8:	4b69      	ldr	r3, [pc, #420]	; (8002270 <InitializeSimulating+0x1e0>)
 80020ca:	2201      	movs	r2, #1
 80020cc:	701a      	strb	r2, [r3, #0]
			IsPulseCheck = false; // off pulse checking
 80020ce:	4b69      	ldr	r3, [pc, #420]	; (8002274 <InitializeSimulating+0x1e4>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
			DropStep2 = false;
 80020d4:	4b68      	ldr	r3, [pc, #416]	; (8002278 <InitializeSimulating+0x1e8>)
 80020d6:	2200      	movs	r2, #0
 80020d8:	701a      	strb	r2, [r3, #0]
			DropStep3 = false;
 80020da:	4b68      	ldr	r3, [pc, #416]	; (800227c <InitializeSimulating+0x1ec>)
 80020dc:	2200      	movs	r2, #0
 80020de:	701a      	strb	r2, [r3, #0]
			DropStep4 = false;
 80020e0:	4b67      	ldr	r3, [pc, #412]	; (8002280 <InitializeSimulating+0x1f0>)
 80020e2:	2200      	movs	r2, #0
 80020e4:	701a      	strb	r2, [r3, #0]
			Direction = true; // variable to show the direction, false = move up, true = move down
 80020e6:	4b67      	ldr	r3, [pc, #412]	; (8002284 <InitializeSimulating+0x1f4>)
 80020e8:	2201      	movs	r2, #1
 80020ea:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 80020ec:	4b66      	ldr	r3, [pc, #408]	; (8002288 <InitializeSimulating+0x1f8>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	701a      	strb	r2, [r3, #0]
			InitPulseGenerating();
 80020f2:	f7ff fc9f 	bl	8001a34 <InitPulseGenerating>
			break;
 80020f6:	e0ab      	b.n	8002250 <InitializeSimulating+0x1c0>
			PulseSimuCount = 0;
 80020f8:	4b5b      	ldr	r3, [pc, #364]	; (8002268 <InitializeSimulating+0x1d8>)
 80020fa:	2200      	movs	r2, #0
 80020fc:	601a      	str	r2, [r3, #0]
			CompletePulling = false;
 80020fe:	4b63      	ldr	r3, [pc, #396]	; (800228c <InitializeSimulating+0x1fc>)
 8002100:	2200      	movs	r2, #0
 8002102:	701a      	strb	r2, [r3, #0]
			PullStep1 = true;
 8002104:	4b62      	ldr	r3, [pc, #392]	; (8002290 <InitializeSimulating+0x200>)
 8002106:	2201      	movs	r2, #1
 8002108:	701a      	strb	r2, [r3, #0]
			IsPulseCheck = true; // Turn on pulse checking at PullStep1
 800210a:	4b5a      	ldr	r3, [pc, #360]	; (8002274 <InitializeSimulating+0x1e4>)
 800210c:	2201      	movs	r2, #1
 800210e:	701a      	strb	r2, [r3, #0]
			PullStep2 = false;
 8002110:	4b60      	ldr	r3, [pc, #384]	; (8002294 <InitializeSimulating+0x204>)
 8002112:	2200      	movs	r2, #0
 8002114:	701a      	strb	r2, [r3, #0]
			PullStep3 = false;
 8002116:	4b60      	ldr	r3, [pc, #384]	; (8002298 <InitializeSimulating+0x208>)
 8002118:	2200      	movs	r2, #0
 800211a:	701a      	strb	r2, [r3, #0]
			PullStep4 = false;
 800211c:	4b5f      	ldr	r3, [pc, #380]	; (800229c <InitializeSimulating+0x20c>)
 800211e:	2200      	movs	r2, #0
 8002120:	701a      	strb	r2, [r3, #0]
			PullStep5 = false;
 8002122:	4b5f      	ldr	r3, [pc, #380]	; (80022a0 <InitializeSimulating+0x210>)
 8002124:	2200      	movs	r2, #0
 8002126:	701a      	strb	r2, [r3, #0]
			PullStep6 = false;
 8002128:	4b5e      	ldr	r3, [pc, #376]	; (80022a4 <InitializeSimulating+0x214>)
 800212a:	2200      	movs	r2, #0
 800212c:	701a      	strb	r2, [r3, #0]
			TargetPosition = ((int)(EncoderResolution*PullingPoint1/(2*3.14*DrumRadius)));
 800212e:	4b5e      	ldr	r3, [pc, #376]	; (80022a8 <InitializeSimulating+0x218>)
 8002130:	881b      	ldrh	r3, [r3, #0]
 8002132:	ee07 3a90 	vmov	s15, r3
 8002136:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800213a:	4b5c      	ldr	r3, [pc, #368]	; (80022ac <InitializeSimulating+0x21c>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002144:	ee17 0a90 	vmov	r0, s15
 8002148:	f7fe f9fe 	bl	8000548 <__aeabi_f2d>
 800214c:	4604      	mov	r4, r0
 800214e:	460d      	mov	r5, r1
 8002150:	4b57      	ldr	r3, [pc, #348]	; (80022b0 <InitializeSimulating+0x220>)
 8002152:	681b      	ldr	r3, [r3, #0]
 8002154:	4618      	mov	r0, r3
 8002156:	f7fe f9f7 	bl	8000548 <__aeabi_f2d>
 800215a:	a33f      	add	r3, pc, #252	; (adr r3, 8002258 <InitializeSimulating+0x1c8>)
 800215c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002160:	f7fe fa4a 	bl	80005f8 <__aeabi_dmul>
 8002164:	4602      	mov	r2, r0
 8002166:	460b      	mov	r3, r1
 8002168:	4620      	mov	r0, r4
 800216a:	4629      	mov	r1, r5
 800216c:	f7fe fb6e 	bl	800084c <__aeabi_ddiv>
 8002170:	4602      	mov	r2, r0
 8002172:	460b      	mov	r3, r1
 8002174:	4610      	mov	r0, r2
 8002176:	4619      	mov	r1, r3
 8002178:	f7fe fcee 	bl	8000b58 <__aeabi_d2iz>
 800217c:	4603      	mov	r3, r0
 800217e:	4a4d      	ldr	r2, [pc, #308]	; (80022b4 <InitializeSimulating+0x224>)
 8002180:	6013      	str	r3, [r2, #0]
			Direction = false; // false = move up to count the position pulse cmd
 8002182:	4b40      	ldr	r3, [pc, #256]	; (8002284 <InitializeSimulating+0x1f4>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 8002188:	4b3f      	ldr	r3, [pc, #252]	; (8002288 <InitializeSimulating+0x1f8>)
 800218a:	2201      	movs	r2, #1
 800218c:	701a      	strb	r2, [r3, #0]
			InitPulseGenerating();
 800218e:	f7ff fc51 	bl	8001a34 <InitPulseGenerating>
			break;
 8002192:	e05d      	b.n	8002250 <InitializeSimulating+0x1c0>
			PulseSimuCount = 0;
 8002194:	4b34      	ldr	r3, [pc, #208]	; (8002268 <InitializeSimulating+0x1d8>)
 8002196:	2200      	movs	r2, #0
 8002198:	601a      	str	r2, [r3, #0]
			CompletePulling = false;
 800219a:	4b3c      	ldr	r3, [pc, #240]	; (800228c <InitializeSimulating+0x1fc>)
 800219c:	2200      	movs	r2, #0
 800219e:	701a      	strb	r2, [r3, #0]
			CompleteDropping = false;
 80021a0:	4b32      	ldr	r3, [pc, #200]	; (800226c <InitializeSimulating+0x1dc>)
 80021a2:	2200      	movs	r2, #0
 80021a4:	701a      	strb	r2, [r3, #0]
			PullStep1 = true;
 80021a6:	4b3a      	ldr	r3, [pc, #232]	; (8002290 <InitializeSimulating+0x200>)
 80021a8:	2201      	movs	r2, #1
 80021aa:	701a      	strb	r2, [r3, #0]
			IsPulseCheck = true;
 80021ac:	4b31      	ldr	r3, [pc, #196]	; (8002274 <InitializeSimulating+0x1e4>)
 80021ae:	2201      	movs	r2, #1
 80021b0:	701a      	strb	r2, [r3, #0]
			PullStep2 = false;
 80021b2:	4b38      	ldr	r3, [pc, #224]	; (8002294 <InitializeSimulating+0x204>)
 80021b4:	2200      	movs	r2, #0
 80021b6:	701a      	strb	r2, [r3, #0]
			PullStep3 = false;
 80021b8:	4b37      	ldr	r3, [pc, #220]	; (8002298 <InitializeSimulating+0x208>)
 80021ba:	2200      	movs	r2, #0
 80021bc:	701a      	strb	r2, [r3, #0]
			PullStep4 = false;
 80021be:	4b37      	ldr	r3, [pc, #220]	; (800229c <InitializeSimulating+0x20c>)
 80021c0:	2200      	movs	r2, #0
 80021c2:	701a      	strb	r2, [r3, #0]
			PullStep5 = false;
 80021c4:	4b36      	ldr	r3, [pc, #216]	; (80022a0 <InitializeSimulating+0x210>)
 80021c6:	2200      	movs	r2, #0
 80021c8:	701a      	strb	r2, [r3, #0]
			PullStep6 = false;
 80021ca:	4b36      	ldr	r3, [pc, #216]	; (80022a4 <InitializeSimulating+0x214>)
 80021cc:	2200      	movs	r2, #0
 80021ce:	701a      	strb	r2, [r3, #0]
			DropStep1 = true;
 80021d0:	4b27      	ldr	r3, [pc, #156]	; (8002270 <InitializeSimulating+0x1e0>)
 80021d2:	2201      	movs	r2, #1
 80021d4:	701a      	strb	r2, [r3, #0]
			DropStep2 = false;
 80021d6:	4b28      	ldr	r3, [pc, #160]	; (8002278 <InitializeSimulating+0x1e8>)
 80021d8:	2200      	movs	r2, #0
 80021da:	701a      	strb	r2, [r3, #0]
			DropStep3 = false;
 80021dc:	4b27      	ldr	r3, [pc, #156]	; (800227c <InitializeSimulating+0x1ec>)
 80021de:	2200      	movs	r2, #0
 80021e0:	701a      	strb	r2, [r3, #0]
			DropStep4 = false;
 80021e2:	4b27      	ldr	r3, [pc, #156]	; (8002280 <InitializeSimulating+0x1f0>)
 80021e4:	2200      	movs	r2, #0
 80021e6:	701a      	strb	r2, [r3, #0]
			TargetPosition = ((int)(EncoderResolution*PullingPoint1/(2*3.14*DrumRadius)));
 80021e8:	4b2f      	ldr	r3, [pc, #188]	; (80022a8 <InitializeSimulating+0x218>)
 80021ea:	881b      	ldrh	r3, [r3, #0]
 80021ec:	ee07 3a90 	vmov	s15, r3
 80021f0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021f4:	4b2d      	ldr	r3, [pc, #180]	; (80022ac <InitializeSimulating+0x21c>)
 80021f6:	edd3 7a00 	vldr	s15, [r3]
 80021fa:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021fe:	ee17 0a90 	vmov	r0, s15
 8002202:	f7fe f9a1 	bl	8000548 <__aeabi_f2d>
 8002206:	4604      	mov	r4, r0
 8002208:	460d      	mov	r5, r1
 800220a:	4b29      	ldr	r3, [pc, #164]	; (80022b0 <InitializeSimulating+0x220>)
 800220c:	681b      	ldr	r3, [r3, #0]
 800220e:	4618      	mov	r0, r3
 8002210:	f7fe f99a 	bl	8000548 <__aeabi_f2d>
 8002214:	a310      	add	r3, pc, #64	; (adr r3, 8002258 <InitializeSimulating+0x1c8>)
 8002216:	e9d3 2300 	ldrd	r2, r3, [r3]
 800221a:	f7fe f9ed 	bl	80005f8 <__aeabi_dmul>
 800221e:	4602      	mov	r2, r0
 8002220:	460b      	mov	r3, r1
 8002222:	4620      	mov	r0, r4
 8002224:	4629      	mov	r1, r5
 8002226:	f7fe fb11 	bl	800084c <__aeabi_ddiv>
 800222a:	4602      	mov	r2, r0
 800222c:	460b      	mov	r3, r1
 800222e:	4610      	mov	r0, r2
 8002230:	4619      	mov	r1, r3
 8002232:	f7fe fc91 	bl	8000b58 <__aeabi_d2iz>
 8002236:	4603      	mov	r3, r0
 8002238:	4a1e      	ldr	r2, [pc, #120]	; (80022b4 <InitializeSimulating+0x224>)
 800223a:	6013      	str	r3, [r2, #0]
			Direction = false; // false = move up to count the position pulse cmd
 800223c:	4b11      	ldr	r3, [pc, #68]	; (8002284 <InitializeSimulating+0x1f4>)
 800223e:	2200      	movs	r2, #0
 8002240:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 8002242:	4b11      	ldr	r3, [pc, #68]	; (8002288 <InitializeSimulating+0x1f8>)
 8002244:	2201      	movs	r2, #1
 8002246:	701a      	strb	r2, [r3, #0]
			InitPulseGenerating();
 8002248:	f7ff fbf4 	bl	8001a34 <InitPulseGenerating>
			break;
 800224c:	e000      	b.n	8002250 <InitializeSimulating+0x1c0>
			break;
 800224e:	bf00      	nop
	}
}
 8002250:	bf00      	nop
 8002252:	3708      	adds	r7, #8
 8002254:	46bd      	mov	sp, r7
 8002256:	bdb0      	pop	{r4, r5, r7, pc}
 8002258:	51eb851f 	.word	0x51eb851f
 800225c:	40191eb8 	.word	0x40191eb8
 8002260:	20000432 	.word	0x20000432
 8002264:	20000433 	.word	0x20000433
 8002268:	200004b4 	.word	0x200004b4
 800226c:	2000043a 	.word	0x2000043a
 8002270:	20000448 	.word	0x20000448
 8002274:	2000044c 	.word	0x2000044c
 8002278:	20000449 	.word	0x20000449
 800227c:	2000044a 	.word	0x2000044a
 8002280:	2000044b 	.word	0x2000044b
 8002284:	20000434 	.word	0x20000434
 8002288:	2000043f 	.word	0x2000043f
 800228c:	2000043b 	.word	0x2000043b
 8002290:	20000442 	.word	0x20000442
 8002294:	20000443 	.word	0x20000443
 8002298:	20000444 	.word	0x20000444
 800229c:	20000445 	.word	0x20000445
 80022a0:	20000446 	.word	0x20000446
 80022a4:	20000447 	.word	0x20000447
 80022a8:	2000000a 	.word	0x2000000a
 80022ac:	20000494 	.word	0x20000494
 80022b0:	20000464 	.word	0x20000464
 80022b4:	200004b0 	.word	0x200004b0

080022b8 <InitializeRunning>:
// Init variable for running
void InitializeRunning (uint8_t Mode)
{
 80022b8:	b580      	push	{r7, lr}
 80022ba:	b082      	sub	sp, #8
 80022bc:	af00      	add	r7, sp, #0
 80022be:	4603      	mov	r3, r0
 80022c0:	71fb      	strb	r3, [r7, #7]
	StartRunning = true;
 80022c2:	4b3c      	ldr	r3, [pc, #240]	; (80023b4 <InitializeRunning+0xfc>)
 80022c4:	2201      	movs	r2, #1
 80022c6:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 80022c8:	4b3b      	ldr	r3, [pc, #236]	; (80023b8 <InitializeRunning+0x100>)
 80022ca:	2200      	movs	r2, #0
 80022cc:	701a      	strb	r2, [r3, #0]
	switch (Mode)
 80022ce:	79fb      	ldrb	r3, [r7, #7]
 80022d0:	2b03      	cmp	r3, #3
 80022d2:	d03f      	beq.n	8002354 <InitializeRunning+0x9c>
 80022d4:	2b03      	cmp	r3, #3
 80022d6:	dc67      	bgt.n	80023a8 <InitializeRunning+0xf0>
 80022d8:	2b01      	cmp	r3, #1
 80022da:	d002      	beq.n	80022e2 <InitializeRunning+0x2a>
 80022dc:	2b02      	cmp	r3, #2
 80022de:	d01b      	beq.n	8002318 <InitializeRunning+0x60>
			CompleteDropping = false;

			InitGoingToStartingPosition ();
			break;
		default:
			break;
 80022e0:	e062      	b.n	80023a8 <InitializeRunning+0xf0>
			CompleteDropping = false;
 80022e2:	4b36      	ldr	r3, [pc, #216]	; (80023bc <InitializeRunning+0x104>)
 80022e4:	2200      	movs	r2, #0
 80022e6:	701a      	strb	r2, [r3, #0]
			DropStep1 = true;
 80022e8:	4b35      	ldr	r3, [pc, #212]	; (80023c0 <InitializeRunning+0x108>)
 80022ea:	2201      	movs	r2, #1
 80022ec:	701a      	strb	r2, [r3, #0]
			IsPulseCheck = false; // off pulse checking
 80022ee:	4b35      	ldr	r3, [pc, #212]	; (80023c4 <InitializeRunning+0x10c>)
 80022f0:	2200      	movs	r2, #0
 80022f2:	701a      	strb	r2, [r3, #0]
			DropStep2 = false;
 80022f4:	4b34      	ldr	r3, [pc, #208]	; (80023c8 <InitializeRunning+0x110>)
 80022f6:	2200      	movs	r2, #0
 80022f8:	701a      	strb	r2, [r3, #0]
			DropStep3 = false;
 80022fa:	4b34      	ldr	r3, [pc, #208]	; (80023cc <InitializeRunning+0x114>)
 80022fc:	2200      	movs	r2, #0
 80022fe:	701a      	strb	r2, [r3, #0]
			DropStep4 = false;
 8002300:	4b33      	ldr	r3, [pc, #204]	; (80023d0 <InitializeRunning+0x118>)
 8002302:	2200      	movs	r2, #0
 8002304:	701a      	strb	r2, [r3, #0]
			Direction = true; // variable to show the direction, false = move up, true = move down
 8002306:	4b33      	ldr	r3, [pc, #204]	; (80023d4 <InitializeRunning+0x11c>)
 8002308:	2201      	movs	r2, #1
 800230a:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <InitializeRunning+0x120>)
 800230e:	2200      	movs	r2, #0
 8002310:	701a      	strb	r2, [r3, #0]
			InitPulseGenerating();
 8002312:	f7ff fb8f 	bl	8001a34 <InitPulseGenerating>
			break;
 8002316:	e048      	b.n	80023aa <InitializeRunning+0xf2>
			IsGoingToBottom = true;
 8002318:	4b30      	ldr	r3, [pc, #192]	; (80023dc <InitializeRunning+0x124>)
 800231a:	2201      	movs	r2, #1
 800231c:	701a      	strb	r2, [r3, #0]
			PullStep1 = false; // First not step 1, going to bottom
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <InitializeRunning+0x128>)
 8002320:	2200      	movs	r2, #0
 8002322:	701a      	strb	r2, [r3, #0]
			PullStep2 = false;
 8002324:	4b2f      	ldr	r3, [pc, #188]	; (80023e4 <InitializeRunning+0x12c>)
 8002326:	2200      	movs	r2, #0
 8002328:	701a      	strb	r2, [r3, #0]
			PullStep3 = false;
 800232a:	4b2f      	ldr	r3, [pc, #188]	; (80023e8 <InitializeRunning+0x130>)
 800232c:	2200      	movs	r2, #0
 800232e:	701a      	strb	r2, [r3, #0]
			PullStep4 = false;
 8002330:	4b2e      	ldr	r3, [pc, #184]	; (80023ec <InitializeRunning+0x134>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
			PullStep5 = false;
 8002336:	4b2e      	ldr	r3, [pc, #184]	; (80023f0 <InitializeRunning+0x138>)
 8002338:	2200      	movs	r2, #0
 800233a:	701a      	strb	r2, [r3, #0]
			PullStep6 = false;
 800233c:	4b2d      	ldr	r3, [pc, #180]	; (80023f4 <InitializeRunning+0x13c>)
 800233e:	2200      	movs	r2, #0
 8002340:	701a      	strb	r2, [r3, #0]
			CompletePulling = false;
 8002342:	4b2d      	ldr	r3, [pc, #180]	; (80023f8 <InitializeRunning+0x140>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
			CompleteDropping = false;
 8002348:	4b1c      	ldr	r3, [pc, #112]	; (80023bc <InitializeRunning+0x104>)
 800234a:	2200      	movs	r2, #0
 800234c:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();
 800234e:	f7ff fe01 	bl	8001f54 <InitGoingToStartingPosition>
			break;
 8002352:	e02a      	b.n	80023aa <InitializeRunning+0xf2>
			IsGoingToBottom = true;
 8002354:	4b21      	ldr	r3, [pc, #132]	; (80023dc <InitializeRunning+0x124>)
 8002356:	2201      	movs	r2, #1
 8002358:	701a      	strb	r2, [r3, #0]
			PullStep1 = false;
 800235a:	4b21      	ldr	r3, [pc, #132]	; (80023e0 <InitializeRunning+0x128>)
 800235c:	2200      	movs	r2, #0
 800235e:	701a      	strb	r2, [r3, #0]
			PullStep2 = false;
 8002360:	4b20      	ldr	r3, [pc, #128]	; (80023e4 <InitializeRunning+0x12c>)
 8002362:	2200      	movs	r2, #0
 8002364:	701a      	strb	r2, [r3, #0]
			PullStep3 = false;
 8002366:	4b20      	ldr	r3, [pc, #128]	; (80023e8 <InitializeRunning+0x130>)
 8002368:	2200      	movs	r2, #0
 800236a:	701a      	strb	r2, [r3, #0]
			PullStep4 = false;
 800236c:	4b1f      	ldr	r3, [pc, #124]	; (80023ec <InitializeRunning+0x134>)
 800236e:	2200      	movs	r2, #0
 8002370:	701a      	strb	r2, [r3, #0]
			PullStep5 = false;
 8002372:	4b1f      	ldr	r3, [pc, #124]	; (80023f0 <InitializeRunning+0x138>)
 8002374:	2200      	movs	r2, #0
 8002376:	701a      	strb	r2, [r3, #0]
			PullStep6 = false;
 8002378:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <InitializeRunning+0x13c>)
 800237a:	2200      	movs	r2, #0
 800237c:	701a      	strb	r2, [r3, #0]
			DropStep1 = true;
 800237e:	4b10      	ldr	r3, [pc, #64]	; (80023c0 <InitializeRunning+0x108>)
 8002380:	2201      	movs	r2, #1
 8002382:	701a      	strb	r2, [r3, #0]
			DropStep2 = false;
 8002384:	4b10      	ldr	r3, [pc, #64]	; (80023c8 <InitializeRunning+0x110>)
 8002386:	2200      	movs	r2, #0
 8002388:	701a      	strb	r2, [r3, #0]
			DropStep3 = false;
 800238a:	4b10      	ldr	r3, [pc, #64]	; (80023cc <InitializeRunning+0x114>)
 800238c:	2200      	movs	r2, #0
 800238e:	701a      	strb	r2, [r3, #0]
			DropStep4 = false;
 8002390:	4b0f      	ldr	r3, [pc, #60]	; (80023d0 <InitializeRunning+0x118>)
 8002392:	2200      	movs	r2, #0
 8002394:	701a      	strb	r2, [r3, #0]
			CompletePulling = false;
 8002396:	4b18      	ldr	r3, [pc, #96]	; (80023f8 <InitializeRunning+0x140>)
 8002398:	2200      	movs	r2, #0
 800239a:	701a      	strb	r2, [r3, #0]
			CompleteDropping = false;
 800239c:	4b07      	ldr	r3, [pc, #28]	; (80023bc <InitializeRunning+0x104>)
 800239e:	2200      	movs	r2, #0
 80023a0:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();
 80023a2:	f7ff fdd7 	bl	8001f54 <InitGoingToStartingPosition>
			break;
 80023a6:	e000      	b.n	80023aa <InitializeRunning+0xf2>
			break;
 80023a8:	bf00      	nop
	}
}
 80023aa:	bf00      	nop
 80023ac:	3708      	adds	r7, #8
 80023ae:	46bd      	mov	sp, r7
 80023b0:	bd80      	pop	{r7, pc}
 80023b2:	bf00      	nop
 80023b4:	20000432 	.word	0x20000432
 80023b8:	20000433 	.word	0x20000433
 80023bc:	2000043a 	.word	0x2000043a
 80023c0:	20000448 	.word	0x20000448
 80023c4:	2000044c 	.word	0x2000044c
 80023c8:	20000449 	.word	0x20000449
 80023cc:	2000044a 	.word	0x2000044a
 80023d0:	2000044b 	.word	0x2000044b
 80023d4:	20000434 	.word	0x20000434
 80023d8:	2000043f 	.word	0x2000043f
 80023dc:	20000441 	.word	0x20000441
 80023e0:	20000442 	.word	0x20000442
 80023e4:	20000443 	.word	0x20000443
 80023e8:	20000444 	.word	0x20000444
 80023ec:	20000445 	.word	0x20000445
 80023f0:	20000446 	.word	0x20000446
 80023f4:	20000447 	.word	0x20000447
 80023f8:	2000043b 	.word	0x2000043b
 80023fc:	00000000 	.word	0x00000000

08002400 <PullingExperiment>:

bool PullingExperiment ()
{
 8002400:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002404:	af00      	add	r7, sp, #0
	if (CompletePulling)
 8002406:	4b92      	ldr	r3, [pc, #584]	; (8002650 <PullingExperiment+0x250>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d002      	beq.n	8002414 <PullingExperiment+0x14>
	{
		return true;
 800240e:	2301      	movs	r3, #1
 8002410:	f000 bcda 	b.w	8002dc8 <PullingExperiment+0x9c8>
	}
	else
	{
		if (IsGoingToBottom)
 8002414:	4b8f      	ldr	r3, [pc, #572]	; (8002654 <PullingExperiment+0x254>)
 8002416:	781b      	ldrb	r3, [r3, #0]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d054      	beq.n	80024c6 <PullingExperiment+0xc6>
		{
			if (CheckGoingToRefPosition(Direction, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 800241c:	4b8e      	ldr	r3, [pc, #568]	; (8002658 <PullingExperiment+0x258>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4a8e      	ldr	r2, [pc, #568]	; (800265c <PullingExperiment+0x25c>)
 8002422:	6812      	ldr	r2, [r2, #0]
 8002424:	4611      	mov	r1, r2
 8002426:	4618      	mov	r0, r3
 8002428:	f7ff fbd2 	bl	8001bd0 <CheckGoingToRefPosition>
 800242c:	4603      	mov	r3, r0
 800242e:	2b00      	cmp	r3, #0
 8002430:	d049      	beq.n	80024c6 <PullingExperiment+0xc6>
			{
				if (WaitingMiliSecond(5000)) // Wait for 5 seconds = 5000ms
 8002432:	f241 3088 	movw	r0, #5000	; 0x1388
 8002436:	f7ff fb17 	bl	8001a68 <WaitingMiliSecond>
 800243a:	4603      	mov	r3, r0
 800243c:	2b00      	cmp	r3, #0
 800243e:	d03f      	beq.n	80024c0 <PullingExperiment+0xc0>
				{
					IsGoingToBottom = false;
 8002440:	4b84      	ldr	r3, [pc, #528]	; (8002654 <PullingExperiment+0x254>)
 8002442:	2200      	movs	r2, #0
 8002444:	701a      	strb	r2, [r3, #0]
					PullStep1 = true;
 8002446:	4b86      	ldr	r3, [pc, #536]	; (8002660 <PullingExperiment+0x260>)
 8002448:	2201      	movs	r2, #1
 800244a:	701a      	strb	r2, [r3, #0]
					Direction = false; // false = move up to count the position pulse cmd
 800244c:	4b82      	ldr	r3, [pc, #520]	; (8002658 <PullingExperiment+0x258>)
 800244e:	2200      	movs	r2, #0
 8002450:	701a      	strb	r2, [r3, #0]
					PRIsToggled = true; // true = pulling up.
 8002452:	4b84      	ldr	r3, [pc, #528]	; (8002664 <PullingExperiment+0x264>)
 8002454:	2201      	movs	r2, #1
 8002456:	701a      	strb	r2, [r3, #0]
					DisableSTOP(); // Disable the stop
 8002458:	f7fe ff06 	bl	8001268 <DisableSTOP>

					InitPulseGenerating();
 800245c:	f7ff faea 	bl	8001a34 <InitPulseGenerating>

					PositionPulseCmd = 0;
 8002460:	4b81      	ldr	r3, [pc, #516]	; (8002668 <PullingExperiment+0x268>)
 8002462:	2200      	movs	r2, #0
 8002464:	601a      	str	r2, [r3, #0]
					TargetPosition = ((int)(EncoderResolution*PullingPoint1/(2*3.14*DrumRadius)));
 8002466:	4b81      	ldr	r3, [pc, #516]	; (800266c <PullingExperiment+0x26c>)
 8002468:	881b      	ldrh	r3, [r3, #0]
 800246a:	ee07 3a90 	vmov	s15, r3
 800246e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002472:	4b7f      	ldr	r3, [pc, #508]	; (8002670 <PullingExperiment+0x270>)
 8002474:	edd3 7a00 	vldr	s15, [r3]
 8002478:	ee67 7a27 	vmul.f32	s15, s14, s15
 800247c:	ee17 0a90 	vmov	r0, s15
 8002480:	f7fe f862 	bl	8000548 <__aeabi_f2d>
 8002484:	4604      	mov	r4, r0
 8002486:	460d      	mov	r5, r1
 8002488:	4b7a      	ldr	r3, [pc, #488]	; (8002674 <PullingExperiment+0x274>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	4618      	mov	r0, r3
 800248e:	f7fe f85b 	bl	8000548 <__aeabi_f2d>
 8002492:	a36b      	add	r3, pc, #428	; (adr r3, 8002640 <PullingExperiment+0x240>)
 8002494:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002498:	f7fe f8ae 	bl	80005f8 <__aeabi_dmul>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4620      	mov	r0, r4
 80024a2:	4629      	mov	r1, r5
 80024a4:	f7fe f9d2 	bl	800084c <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4610      	mov	r0, r2
 80024ae:	4619      	mov	r1, r3
 80024b0:	f7fe fb52 	bl	8000b58 <__aeabi_d2iz>
 80024b4:	4603      	mov	r3, r0
 80024b6:	4a70      	ldr	r2, [pc, #448]	; (8002678 <PullingExperiment+0x278>)
 80024b8:	6013      	str	r3, [r2, #0]
					IsPulseCheck = true; // On pulse checking
 80024ba:	4b70      	ldr	r3, [pc, #448]	; (800267c <PullingExperiment+0x27c>)
 80024bc:	2201      	movs	r2, #1
 80024be:	701a      	strb	r2, [r3, #0]
				}
				return false;
 80024c0:	2300      	movs	r3, #0
 80024c2:	f000 bc81 	b.w	8002dc8 <PullingExperiment+0x9c8>
			}
		}

		if (PullStep1) // Accelerate pulling, Acc1
 80024c6:	4b66      	ldr	r3, [pc, #408]	; (8002660 <PullingExperiment+0x260>)
 80024c8:	781b      	ldrb	r3, [r3, #0]
 80024ca:	2b00      	cmp	r3, #0
 80024cc:	f000 80f2 	beq.w	80026b4 <PullingExperiment+0x2b4>
		{
			if (IsReachTargetPosition) // Switch to Step 2
 80024d0:	4b6b      	ldr	r3, [pc, #428]	; (8002680 <PullingExperiment+0x280>)
 80024d2:	781b      	ldrb	r3, [r3, #0]
 80024d4:	b2db      	uxtb	r3, r3
 80024d6:	2b00      	cmp	r3, #0
 80024d8:	d03b      	beq.n	8002552 <PullingExperiment+0x152>
			{
				PulseGenerationFlag = false; // disable Pulse out
 80024da:	4b6a      	ldr	r3, [pc, #424]	; (8002684 <PullingExperiment+0x284>)
 80024dc:	2200      	movs	r2, #0
 80024de:	701a      	strb	r2, [r3, #0]
				PullStep1 = false;
 80024e0:	4b5f      	ldr	r3, [pc, #380]	; (8002660 <PullingExperiment+0x260>)
 80024e2:	2200      	movs	r2, #0
 80024e4:	701a      	strb	r2, [r3, #0]
				PullStep2 = true; // Switch to Step 2
 80024e6:	4b68      	ldr	r3, [pc, #416]	; (8002688 <PullingExperiment+0x288>)
 80024e8:	2201      	movs	r2, #1
 80024ea:	701a      	strb	r2, [r3, #0]

				//TargetPosition += -((int)(EncoderResolution*PullingPoint2/(2*3.14*DrumRadius))); // Max Speed Point
				TargetPosition += (int)(EncoderResolution*PullingPoint2/(2*3.14*DrumRadius)); // Max Speed Point
 80024ec:	4b5f      	ldr	r3, [pc, #380]	; (800266c <PullingExperiment+0x26c>)
 80024ee:	881b      	ldrh	r3, [r3, #0]
 80024f0:	ee07 3a90 	vmov	s15, r3
 80024f4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024f8:	4b64      	ldr	r3, [pc, #400]	; (800268c <PullingExperiment+0x28c>)
 80024fa:	edd3 7a00 	vldr	s15, [r3]
 80024fe:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002502:	ee17 0a90 	vmov	r0, s15
 8002506:	f7fe f81f 	bl	8000548 <__aeabi_f2d>
 800250a:	4604      	mov	r4, r0
 800250c:	460d      	mov	r5, r1
 800250e:	4b59      	ldr	r3, [pc, #356]	; (8002674 <PullingExperiment+0x274>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fe f818 	bl	8000548 <__aeabi_f2d>
 8002518:	a349      	add	r3, pc, #292	; (adr r3, 8002640 <PullingExperiment+0x240>)
 800251a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800251e:	f7fe f86b 	bl	80005f8 <__aeabi_dmul>
 8002522:	4602      	mov	r2, r0
 8002524:	460b      	mov	r3, r1
 8002526:	4620      	mov	r0, r4
 8002528:	4629      	mov	r1, r5
 800252a:	f7fe f98f 	bl	800084c <__aeabi_ddiv>
 800252e:	4602      	mov	r2, r0
 8002530:	460b      	mov	r3, r1
 8002532:	4610      	mov	r0, r2
 8002534:	4619      	mov	r1, r3
 8002536:	f7fe fb0f 	bl	8000b58 <__aeabi_d2iz>
 800253a:	4602      	mov	r2, r0
 800253c:	4b4e      	ldr	r3, [pc, #312]	; (8002678 <PullingExperiment+0x278>)
 800253e:	681b      	ldr	r3, [r3, #0]
 8002540:	4413      	add	r3, r2
 8002542:	4a4d      	ldr	r2, [pc, #308]	; (8002678 <PullingExperiment+0x278>)
 8002544:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8002546:	4b4d      	ldr	r3, [pc, #308]	; (800267c <PullingExperiment+0x27c>)
 8002548:	2201      	movs	r2, #1
 800254a:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 800254c:	4b4c      	ldr	r3, [pc, #304]	; (8002680 <PullingExperiment+0x280>)
 800254e:	2200      	movs	r2, #0
 8002550:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst - PullingAcc1;
 8002552:	ed9f 7a4f 	vldr	s14, [pc, #316]	; 8002690 <PullingExperiment+0x290>
 8002556:	4b4f      	ldr	r3, [pc, #316]	; (8002694 <PullingExperiment+0x294>)
 8002558:	edd3 7a00 	vldr	s15, [r3]
 800255c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002560:	4b4d      	ldr	r3, [pc, #308]	; (8002698 <PullingExperiment+0x298>)
 8002562:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(-PullingAcc1)*10/DrumRadius;
 8002566:	4b4d      	ldr	r3, [pc, #308]	; (800269c <PullingExperiment+0x29c>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4618      	mov	r0, r3
 800256c:	f7fd ffec 	bl	8000548 <__aeabi_f2d>
 8002570:	4604      	mov	r4, r0
 8002572:	460d      	mov	r5, r1
 8002574:	4b4a      	ldr	r3, [pc, #296]	; (80026a0 <PullingExperiment+0x2a0>)
 8002576:	781b      	ldrb	r3, [r3, #0]
 8002578:	4618      	mov	r0, r3
 800257a:	f7fd ffd3 	bl	8000524 <__aeabi_i2d>
 800257e:	a332      	add	r3, pc, #200	; (adr r3, 8002648 <PullingExperiment+0x248>)
 8002580:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002584:	f7fe f838 	bl	80005f8 <__aeabi_dmul>
 8002588:	4602      	mov	r2, r0
 800258a:	460b      	mov	r3, r1
 800258c:	4690      	mov	r8, r2
 800258e:	4699      	mov	r9, r3
 8002590:	4b40      	ldr	r3, [pc, #256]	; (8002694 <PullingExperiment+0x294>)
 8002592:	edd3 7a00 	vldr	s15, [r3]
 8002596:	eef1 7a67 	vneg.f32	s15, s15
 800259a:	ee17 3a90 	vmov	r3, s15
 800259e:	4618      	mov	r0, r3
 80025a0:	f7fd ffd2 	bl	8000548 <__aeabi_f2d>
 80025a4:	4602      	mov	r2, r0
 80025a6:	460b      	mov	r3, r1
 80025a8:	4640      	mov	r0, r8
 80025aa:	4649      	mov	r1, r9
 80025ac:	f7fe f824 	bl	80005f8 <__aeabi_dmul>
 80025b0:	4602      	mov	r2, r0
 80025b2:	460b      	mov	r3, r1
 80025b4:	4610      	mov	r0, r2
 80025b6:	4619      	mov	r1, r3
 80025b8:	f04f 0200 	mov.w	r2, #0
 80025bc:	4b39      	ldr	r3, [pc, #228]	; (80026a4 <PullingExperiment+0x2a4>)
 80025be:	f7fe f81b 	bl	80005f8 <__aeabi_dmul>
 80025c2:	4602      	mov	r2, r0
 80025c4:	460b      	mov	r3, r1
 80025c6:	4690      	mov	r8, r2
 80025c8:	4699      	mov	r9, r3
 80025ca:	4b2a      	ldr	r3, [pc, #168]	; (8002674 <PullingExperiment+0x274>)
 80025cc:	681b      	ldr	r3, [r3, #0]
 80025ce:	4618      	mov	r0, r3
 80025d0:	f7fd ffba 	bl	8000548 <__aeabi_f2d>
 80025d4:	4602      	mov	r2, r0
 80025d6:	460b      	mov	r3, r1
 80025d8:	4640      	mov	r0, r8
 80025da:	4649      	mov	r1, r9
 80025dc:	f7fe f936 	bl	800084c <__aeabi_ddiv>
 80025e0:	4602      	mov	r2, r0
 80025e2:	460b      	mov	r3, r1
 80025e4:	4620      	mov	r0, r4
 80025e6:	4629      	mov	r1, r5
 80025e8:	f7fd fe50 	bl	800028c <__adddf3>
 80025ec:	4602      	mov	r2, r0
 80025ee:	460b      	mov	r3, r1
 80025f0:	4610      	mov	r0, r2
 80025f2:	4619      	mov	r1, r3
 80025f4:	f7fe faf8 	bl	8000be8 <__aeabi_d2f>
 80025f8:	4603      	mov	r3, r0
 80025fa:	4a28      	ldr	r2, [pc, #160]	; (800269c <PullingExperiment+0x29c>)
 80025fc:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 80025fe:	4b27      	ldr	r3, [pc, #156]	; (800269c <PullingExperiment+0x29c>)
 8002600:	edd3 7a00 	vldr	s15, [r3]
 8002604:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002608:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800260c:	d013      	beq.n	8002636 <PullingExperiment+0x236>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800260e:	4b26      	ldr	r3, [pc, #152]	; (80026a8 <PullingExperiment+0x2a8>)
 8002610:	781b      	ldrb	r3, [r3, #0]
 8002612:	4a22      	ldr	r2, [pc, #136]	; (800269c <PullingExperiment+0x29c>)
 8002614:	edd2 7a00 	vldr	s15, [r2]
 8002618:	eeb0 0a67 	vmov.f32	s0, s15
 800261c:	4618      	mov	r0, r3
 800261e:	f7ff fa4b 	bl	8001ab8 <CalculateTimer3Period>
 8002622:	4603      	mov	r3, r0
 8002624:	b29a      	uxth	r2, r3
 8002626:	4b21      	ldr	r3, [pc, #132]	; (80026ac <PullingExperiment+0x2ac>)
 8002628:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 800262a:	4b21      	ldr	r3, [pc, #132]	; (80026b0 <PullingExperiment+0x2b0>)
 800262c:	2201      	movs	r2, #1
 800262e:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8002630:	4b14      	ldr	r3, [pc, #80]	; (8002684 <PullingExperiment+0x284>)
 8002632:	2201      	movs	r2, #1
 8002634:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002636:	2300      	movs	r3, #0
 8002638:	e3c6      	b.n	8002dc8 <PullingExperiment+0x9c8>
 800263a:	bf00      	nop
 800263c:	f3af 8000 	nop.w
 8002640:	51eb851f 	.word	0x51eb851f
 8002644:	40191eb8 	.word	0x40191eb8
 8002648:	d2f1a9fc 	.word	0xd2f1a9fc
 800264c:	3f50624d 	.word	0x3f50624d
 8002650:	2000043b 	.word	0x2000043b
 8002654:	20000441 	.word	0x20000441
 8002658:	20000434 	.word	0x20000434
 800265c:	200004a8 	.word	0x200004a8
 8002660:	20000442 	.word	0x20000442
 8002664:	2000043f 	.word	0x2000043f
 8002668:	200004b8 	.word	0x200004b8
 800266c:	2000000a 	.word	0x2000000a
 8002670:	20000494 	.word	0x20000494
 8002674:	20000464 	.word	0x20000464
 8002678:	200004b0 	.word	0x200004b0
 800267c:	2000044c 	.word	0x2000044c
 8002680:	20000438 	.word	0x20000438
 8002684:	20000436 	.word	0x20000436
 8002688:	20000443 	.word	0x20000443
 800268c:	20000498 	.word	0x20000498
 8002690:	c11ccccd 	.word	0xc11ccccd
 8002694:	20000480 	.word	0x20000480
 8002698:	20000010 	.word	0x20000010
 800269c:	20000518 	.word	0x20000518
 80026a0:	20000468 	.word	0x20000468
 80026a4:	40240000 	.word	0x40240000
 80026a8:	20000003 	.word	0x20000003
 80026ac:	20000454 	.word	0x20000454
 80026b0:	20000440 	.word	0x20000440
		}
		if (PullStep2) // Accelerate Pulling Acc2
 80026b4:	4bb0      	ldr	r3, [pc, #704]	; (8002978 <PullingExperiment+0x578>)
 80026b6:	781b      	ldrb	r3, [r3, #0]
 80026b8:	2b00      	cmp	r3, #0
 80026ba:	f000 8088 	beq.w	80027ce <PullingExperiment+0x3ce>
		{
			if (IsReachTargetPosition) // Switch to Step 3
 80026be:	4baf      	ldr	r3, [pc, #700]	; (800297c <PullingExperiment+0x57c>)
 80026c0:	781b      	ldrb	r3, [r3, #0]
 80026c2:	b2db      	uxtb	r3, r3
 80026c4:	2b00      	cmp	r3, #0
 80026c6:	d00e      	beq.n	80026e6 <PullingExperiment+0x2e6>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 80026c8:	4bad      	ldr	r3, [pc, #692]	; (8002980 <PullingExperiment+0x580>)
 80026ca:	2200      	movs	r2, #0
 80026cc:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false;
 80026ce:	4bad      	ldr	r3, [pc, #692]	; (8002984 <PullingExperiment+0x584>)
 80026d0:	2200      	movs	r2, #0
 80026d2:	701a      	strb	r2, [r3, #0]

				PullStep2 = false;
 80026d4:	4ba8      	ldr	r3, [pc, #672]	; (8002978 <PullingExperiment+0x578>)
 80026d6:	2200      	movs	r2, #0
 80026d8:	701a      	strb	r2, [r3, #0]
				PullStep3 = true;
 80026da:	4bab      	ldr	r3, [pc, #684]	; (8002988 <PullingExperiment+0x588>)
 80026dc:	2201      	movs	r2, #1
 80026de:	701a      	strb	r2, [r3, #0]


				IsReachTargetPosition = false; // Reset the flag
 80026e0:	4ba6      	ldr	r3, [pc, #664]	; (800297c <PullingExperiment+0x57c>)
 80026e2:	2200      	movs	r2, #0
 80026e4:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst - PullingAcc2;
 80026e6:	ed9f 7aa9 	vldr	s14, [pc, #676]	; 800298c <PullingExperiment+0x58c>
 80026ea:	4ba9      	ldr	r3, [pc, #676]	; (8002990 <PullingExperiment+0x590>)
 80026ec:	edd3 7a00 	vldr	s15, [r3]
 80026f0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026f4:	4ba7      	ldr	r3, [pc, #668]	; (8002994 <PullingExperiment+0x594>)
 80026f6:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(-PullingAcc2)*10/DrumRadius; //
 80026fa:	4ba7      	ldr	r3, [pc, #668]	; (8002998 <PullingExperiment+0x598>)
 80026fc:	681b      	ldr	r3, [r3, #0]
 80026fe:	4618      	mov	r0, r3
 8002700:	f7fd ff22 	bl	8000548 <__aeabi_f2d>
 8002704:	4604      	mov	r4, r0
 8002706:	460d      	mov	r5, r1
 8002708:	4ba4      	ldr	r3, [pc, #656]	; (800299c <PullingExperiment+0x59c>)
 800270a:	781b      	ldrb	r3, [r3, #0]
 800270c:	4618      	mov	r0, r3
 800270e:	f7fd ff09 	bl	8000524 <__aeabi_i2d>
 8002712:	a395      	add	r3, pc, #596	; (adr r3, 8002968 <PullingExperiment+0x568>)
 8002714:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002718:	f7fd ff6e 	bl	80005f8 <__aeabi_dmul>
 800271c:	4602      	mov	r2, r0
 800271e:	460b      	mov	r3, r1
 8002720:	4690      	mov	r8, r2
 8002722:	4699      	mov	r9, r3
 8002724:	4b9a      	ldr	r3, [pc, #616]	; (8002990 <PullingExperiment+0x590>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	eef1 7a67 	vneg.f32	s15, s15
 800272e:	ee17 3a90 	vmov	r3, s15
 8002732:	4618      	mov	r0, r3
 8002734:	f7fd ff08 	bl	8000548 <__aeabi_f2d>
 8002738:	4602      	mov	r2, r0
 800273a:	460b      	mov	r3, r1
 800273c:	4640      	mov	r0, r8
 800273e:	4649      	mov	r1, r9
 8002740:	f7fd ff5a 	bl	80005f8 <__aeabi_dmul>
 8002744:	4602      	mov	r2, r0
 8002746:	460b      	mov	r3, r1
 8002748:	4610      	mov	r0, r2
 800274a:	4619      	mov	r1, r3
 800274c:	f04f 0200 	mov.w	r2, #0
 8002750:	4b93      	ldr	r3, [pc, #588]	; (80029a0 <PullingExperiment+0x5a0>)
 8002752:	f7fd ff51 	bl	80005f8 <__aeabi_dmul>
 8002756:	4602      	mov	r2, r0
 8002758:	460b      	mov	r3, r1
 800275a:	4690      	mov	r8, r2
 800275c:	4699      	mov	r9, r3
 800275e:	4b91      	ldr	r3, [pc, #580]	; (80029a4 <PullingExperiment+0x5a4>)
 8002760:	681b      	ldr	r3, [r3, #0]
 8002762:	4618      	mov	r0, r3
 8002764:	f7fd fef0 	bl	8000548 <__aeabi_f2d>
 8002768:	4602      	mov	r2, r0
 800276a:	460b      	mov	r3, r1
 800276c:	4640      	mov	r0, r8
 800276e:	4649      	mov	r1, r9
 8002770:	f7fe f86c 	bl	800084c <__aeabi_ddiv>
 8002774:	4602      	mov	r2, r0
 8002776:	460b      	mov	r3, r1
 8002778:	4620      	mov	r0, r4
 800277a:	4629      	mov	r1, r5
 800277c:	f7fd fd86 	bl	800028c <__adddf3>
 8002780:	4602      	mov	r2, r0
 8002782:	460b      	mov	r3, r1
 8002784:	4610      	mov	r0, r2
 8002786:	4619      	mov	r1, r3
 8002788:	f7fe fa2e 	bl	8000be8 <__aeabi_d2f>
 800278c:	4603      	mov	r3, r0
 800278e:	4a82      	ldr	r2, [pc, #520]	; (8002998 <PullingExperiment+0x598>)
 8002790:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8002792:	4b81      	ldr	r3, [pc, #516]	; (8002998 <PullingExperiment+0x598>)
 8002794:	edd3 7a00 	vldr	s15, [r3]
 8002798:	eef5 7a40 	vcmp.f32	s15, #0.0
 800279c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027a0:	d013      	beq.n	80027ca <PullingExperiment+0x3ca>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80027a2:	4b81      	ldr	r3, [pc, #516]	; (80029a8 <PullingExperiment+0x5a8>)
 80027a4:	781b      	ldrb	r3, [r3, #0]
 80027a6:	4a7c      	ldr	r2, [pc, #496]	; (8002998 <PullingExperiment+0x598>)
 80027a8:	edd2 7a00 	vldr	s15, [r2]
 80027ac:	eeb0 0a67 	vmov.f32	s0, s15
 80027b0:	4618      	mov	r0, r3
 80027b2:	f7ff f981 	bl	8001ab8 <CalculateTimer3Period>
 80027b6:	4603      	mov	r3, r0
 80027b8:	b29a      	uxth	r2, r3
 80027ba:	4b7c      	ldr	r3, [pc, #496]	; (80029ac <PullingExperiment+0x5ac>)
 80027bc:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 80027be:	4b7c      	ldr	r3, [pc, #496]	; (80029b0 <PullingExperiment+0x5b0>)
 80027c0:	2201      	movs	r2, #1
 80027c2:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 80027c4:	4b6e      	ldr	r3, [pc, #440]	; (8002980 <PullingExperiment+0x580>)
 80027c6:	2201      	movs	r2, #1
 80027c8:	701a      	strb	r2, [r3, #0]
			}
			return false;
 80027ca:	2300      	movs	r3, #0
 80027cc:	e2fc      	b.n	8002dc8 <PullingExperiment+0x9c8>
		}

		if (PullStep3) // Smooth the transition
 80027ce:	4b6e      	ldr	r3, [pc, #440]	; (8002988 <PullingExperiment+0x588>)
 80027d0:	781b      	ldrb	r3, [r3, #0]
 80027d2:	2b00      	cmp	r3, #0
 80027d4:	f000 80fc 	beq.w	80029d0 <PullingExperiment+0x5d0>
		{
			if (AccRef >= GravityConst + PullingAcc3) // Switch to step 2
 80027d8:	ed9f 7a6c 	vldr	s14, [pc, #432]	; 800298c <PullingExperiment+0x58c>
 80027dc:	4b75      	ldr	r3, [pc, #468]	; (80029b4 <PullingExperiment+0x5b4>)
 80027de:	edd3 7a00 	vldr	s15, [r3]
 80027e2:	ee37 7a27 	vadd.f32	s14, s14, s15
 80027e6:	4b6b      	ldr	r3, [pc, #428]	; (8002994 <PullingExperiment+0x594>)
 80027e8:	edd3 7a00 	vldr	s15, [r3]
 80027ec:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80027f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80027f4:	d838      	bhi.n	8002868 <PullingExperiment+0x468>
			{
				PulseGenerationFlag = false;
 80027f6:	4b62      	ldr	r3, [pc, #392]	; (8002980 <PullingExperiment+0x580>)
 80027f8:	2200      	movs	r2, #0
 80027fa:	701a      	strb	r2, [r3, #0]
				TargetPosition = PositionPulseCmd + ((int)(EncoderResolution*PullingPoint3/(2*3.14*DrumRadius))) ;
 80027fc:	4b6e      	ldr	r3, [pc, #440]	; (80029b8 <PullingExperiment+0x5b8>)
 80027fe:	881b      	ldrh	r3, [r3, #0]
 8002800:	ee07 3a90 	vmov	s15, r3
 8002804:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002808:	4b6c      	ldr	r3, [pc, #432]	; (80029bc <PullingExperiment+0x5bc>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002812:	ee17 0a90 	vmov	r0, s15
 8002816:	f7fd fe97 	bl	8000548 <__aeabi_f2d>
 800281a:	4604      	mov	r4, r0
 800281c:	460d      	mov	r5, r1
 800281e:	4b61      	ldr	r3, [pc, #388]	; (80029a4 <PullingExperiment+0x5a4>)
 8002820:	681b      	ldr	r3, [r3, #0]
 8002822:	4618      	mov	r0, r3
 8002824:	f7fd fe90 	bl	8000548 <__aeabi_f2d>
 8002828:	a351      	add	r3, pc, #324	; (adr r3, 8002970 <PullingExperiment+0x570>)
 800282a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800282e:	f7fd fee3 	bl	80005f8 <__aeabi_dmul>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4620      	mov	r0, r4
 8002838:	4629      	mov	r1, r5
 800283a:	f7fe f807 	bl	800084c <__aeabi_ddiv>
 800283e:	4602      	mov	r2, r0
 8002840:	460b      	mov	r3, r1
 8002842:	4610      	mov	r0, r2
 8002844:	4619      	mov	r1, r3
 8002846:	f7fe f987 	bl	8000b58 <__aeabi_d2iz>
 800284a:	4602      	mov	r2, r0
 800284c:	4b5c      	ldr	r3, [pc, #368]	; (80029c0 <PullingExperiment+0x5c0>)
 800284e:	681b      	ldr	r3, [r3, #0]
 8002850:	4413      	add	r3, r2
 8002852:	4a5c      	ldr	r2, [pc, #368]	; (80029c4 <PullingExperiment+0x5c4>)
 8002854:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8002856:	4b4b      	ldr	r3, [pc, #300]	; (8002984 <PullingExperiment+0x584>)
 8002858:	2201      	movs	r2, #1
 800285a:	701a      	strb	r2, [r3, #0]

				PullStep3 = false;
 800285c:	4b4a      	ldr	r3, [pc, #296]	; (8002988 <PullingExperiment+0x588>)
 800285e:	2200      	movs	r2, #0
 8002860:	701a      	strb	r2, [r3, #0]
				PullStep4 = true; // Switch to Step 4
 8002862:	4b59      	ldr	r3, [pc, #356]	; (80029c8 <PullingExperiment+0x5c8>)
 8002864:	2201      	movs	r2, #1
 8002866:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,DropAccelSlope,GravityConst + PullingAcc3);
 8002868:	4b58      	ldr	r3, [pc, #352]	; (80029cc <PullingExperiment+0x5cc>)
 800286a:	781b      	ldrb	r3, [r3, #0]
 800286c:	ee07 3a90 	vmov	s15, r3
 8002870:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002874:	eddf 6a45 	vldr	s13, [pc, #276]	; 800298c <PullingExperiment+0x58c>
 8002878:	4b4e      	ldr	r3, [pc, #312]	; (80029b4 <PullingExperiment+0x5b4>)
 800287a:	edd3 7a00 	vldr	s15, [r3]
 800287e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8002882:	eef0 0a67 	vmov.f32	s1, s15
 8002886:	eeb0 0a47 	vmov.f32	s0, s14
 800288a:	4842      	ldr	r0, [pc, #264]	; (8002994 <PullingExperiment+0x594>)
 800288c:	f7ff f850 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8002890:	4b41      	ldr	r3, [pc, #260]	; (8002998 <PullingExperiment+0x598>)
 8002892:	681b      	ldr	r3, [r3, #0]
 8002894:	4618      	mov	r0, r3
 8002896:	f7fd fe57 	bl	8000548 <__aeabi_f2d>
 800289a:	4604      	mov	r4, r0
 800289c:	460d      	mov	r5, r1
 800289e:	4b3f      	ldr	r3, [pc, #252]	; (800299c <PullingExperiment+0x59c>)
 80028a0:	781b      	ldrb	r3, [r3, #0]
 80028a2:	4618      	mov	r0, r3
 80028a4:	f7fd fe3e 	bl	8000524 <__aeabi_i2d>
 80028a8:	a32f      	add	r3, pc, #188	; (adr r3, 8002968 <PullingExperiment+0x568>)
 80028aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028ae:	f7fd fea3 	bl	80005f8 <__aeabi_dmul>
 80028b2:	4602      	mov	r2, r0
 80028b4:	460b      	mov	r3, r1
 80028b6:	4690      	mov	r8, r2
 80028b8:	4699      	mov	r9, r3
 80028ba:	4b36      	ldr	r3, [pc, #216]	; (8002994 <PullingExperiment+0x594>)
 80028bc:	edd3 7a00 	vldr	s15, [r3]
 80028c0:	ed9f 7a32 	vldr	s14, [pc, #200]	; 800298c <PullingExperiment+0x58c>
 80028c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80028c8:	ee17 0a90 	vmov	r0, s15
 80028cc:	f7fd fe3c 	bl	8000548 <__aeabi_f2d>
 80028d0:	4602      	mov	r2, r0
 80028d2:	460b      	mov	r3, r1
 80028d4:	4640      	mov	r0, r8
 80028d6:	4649      	mov	r1, r9
 80028d8:	f7fd fe8e 	bl	80005f8 <__aeabi_dmul>
 80028dc:	4602      	mov	r2, r0
 80028de:	460b      	mov	r3, r1
 80028e0:	4610      	mov	r0, r2
 80028e2:	4619      	mov	r1, r3
 80028e4:	f04f 0200 	mov.w	r2, #0
 80028e8:	4b2d      	ldr	r3, [pc, #180]	; (80029a0 <PullingExperiment+0x5a0>)
 80028ea:	f7fd fe85 	bl	80005f8 <__aeabi_dmul>
 80028ee:	4602      	mov	r2, r0
 80028f0:	460b      	mov	r3, r1
 80028f2:	4690      	mov	r8, r2
 80028f4:	4699      	mov	r9, r3
 80028f6:	4b2b      	ldr	r3, [pc, #172]	; (80029a4 <PullingExperiment+0x5a4>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fe24 	bl	8000548 <__aeabi_f2d>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	4640      	mov	r0, r8
 8002906:	4649      	mov	r1, r9
 8002908:	f7fd ffa0 	bl	800084c <__aeabi_ddiv>
 800290c:	4602      	mov	r2, r0
 800290e:	460b      	mov	r3, r1
 8002910:	4620      	mov	r0, r4
 8002912:	4629      	mov	r1, r5
 8002914:	f7fd fcba 	bl	800028c <__adddf3>
 8002918:	4602      	mov	r2, r0
 800291a:	460b      	mov	r3, r1
 800291c:	4610      	mov	r0, r2
 800291e:	4619      	mov	r1, r3
 8002920:	f7fe f962 	bl	8000be8 <__aeabi_d2f>
 8002924:	4603      	mov	r3, r0
 8002926:	4a1c      	ldr	r2, [pc, #112]	; (8002998 <PullingExperiment+0x598>)
 8002928:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 800292a:	4b1b      	ldr	r3, [pc, #108]	; (8002998 <PullingExperiment+0x598>)
 800292c:	edd3 7a00 	vldr	s15, [r3]
 8002930:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002934:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002938:	d011      	beq.n	800295e <PullingExperiment+0x55e>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800293a:	4b1b      	ldr	r3, [pc, #108]	; (80029a8 <PullingExperiment+0x5a8>)
 800293c:	781b      	ldrb	r3, [r3, #0]
 800293e:	4a16      	ldr	r2, [pc, #88]	; (8002998 <PullingExperiment+0x598>)
 8002940:	edd2 7a00 	vldr	s15, [r2]
 8002944:	eeb0 0a67 	vmov.f32	s0, s15
 8002948:	4618      	mov	r0, r3
 800294a:	f7ff f8b5 	bl	8001ab8 <CalculateTimer3Period>
 800294e:	4603      	mov	r3, r0
 8002950:	b29a      	uxth	r2, r3
 8002952:	4b16      	ldr	r3, [pc, #88]	; (80029ac <PullingExperiment+0x5ac>)
 8002954:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8002956:	4b0a      	ldr	r3, [pc, #40]	; (8002980 <PullingExperiment+0x580>)
 8002958:	2201      	movs	r2, #1
 800295a:	701a      	strb	r2, [r3, #0]
 800295c:	e002      	b.n	8002964 <PullingExperiment+0x564>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 800295e:	4b08      	ldr	r3, [pc, #32]	; (8002980 <PullingExperiment+0x580>)
 8002960:	2200      	movs	r2, #0
 8002962:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002964:	2300      	movs	r3, #0
 8002966:	e22f      	b.n	8002dc8 <PullingExperiment+0x9c8>
 8002968:	d2f1a9fc 	.word	0xd2f1a9fc
 800296c:	3f50624d 	.word	0x3f50624d
 8002970:	51eb851f 	.word	0x51eb851f
 8002974:	40191eb8 	.word	0x40191eb8
 8002978:	20000443 	.word	0x20000443
 800297c:	20000438 	.word	0x20000438
 8002980:	20000436 	.word	0x20000436
 8002984:	2000044c 	.word	0x2000044c
 8002988:	20000444 	.word	0x20000444
 800298c:	c11ccccd 	.word	0xc11ccccd
 8002990:	20000484 	.word	0x20000484
 8002994:	20000010 	.word	0x20000010
 8002998:	20000518 	.word	0x20000518
 800299c:	20000468 	.word	0x20000468
 80029a0:	40240000 	.word	0x40240000
 80029a4:	20000464 	.word	0x20000464
 80029a8:	20000003 	.word	0x20000003
 80029ac:	20000454 	.word	0x20000454
 80029b0:	20000440 	.word	0x20000440
 80029b4:	20000488 	.word	0x20000488
 80029b8:	2000000a 	.word	0x2000000a
 80029bc:	2000049c 	.word	0x2000049c
 80029c0:	200004b8 	.word	0x200004b8
 80029c4:	200004b0 	.word	0x200004b0
 80029c8:	20000445 	.word	0x20000445
 80029cc:	20000541 	.word	0x20000541
		}
		if (PullStep4) // Release Acc3 > 1g
 80029d0:	4bb3      	ldr	r3, [pc, #716]	; (8002ca0 <PullingExperiment+0x8a0>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	2b00      	cmp	r3, #0
 80029d6:	f000 80b2 	beq.w	8002b3e <PullingExperiment+0x73e>
		{
			if (IsReachTargetPosition) // Switch to Step 4
 80029da:	4bb2      	ldr	r3, [pc, #712]	; (8002ca4 <PullingExperiment+0x8a4>)
 80029dc:	781b      	ldrb	r3, [r3, #0]
 80029de:	b2db      	uxtb	r3, r3
 80029e0:	2b00      	cmp	r3, #0
 80029e2:	d03b      	beq.n	8002a5c <PullingExperiment+0x65c>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 80029e4:	4bb0      	ldr	r3, [pc, #704]	; (8002ca8 <PullingExperiment+0x8a8>)
 80029e6:	2200      	movs	r2, #0
 80029e8:	701a      	strb	r2, [r3, #0]
				PullStep4 = false;
 80029ea:	4bad      	ldr	r3, [pc, #692]	; (8002ca0 <PullingExperiment+0x8a0>)
 80029ec:	2200      	movs	r2, #0
 80029ee:	701a      	strb	r2, [r3, #0]
				PullStep5 = true;
 80029f0:	4bae      	ldr	r3, [pc, #696]	; (8002cac <PullingExperiment+0x8ac>)
 80029f2:	2201      	movs	r2, #1
 80029f4:	701a      	strb	r2, [r3, #0]

				TargetPosition += ((int)(EncoderResolution*PullingPoint4/(2*3.14*DrumRadius)));
 80029f6:	4bae      	ldr	r3, [pc, #696]	; (8002cb0 <PullingExperiment+0x8b0>)
 80029f8:	881b      	ldrh	r3, [r3, #0]
 80029fa:	ee07 3a90 	vmov	s15, r3
 80029fe:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002a02:	4bac      	ldr	r3, [pc, #688]	; (8002cb4 <PullingExperiment+0x8b4>)
 8002a04:	edd3 7a00 	vldr	s15, [r3]
 8002a08:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002a0c:	ee17 0a90 	vmov	r0, s15
 8002a10:	f7fd fd9a 	bl	8000548 <__aeabi_f2d>
 8002a14:	4604      	mov	r4, r0
 8002a16:	460d      	mov	r5, r1
 8002a18:	4ba7      	ldr	r3, [pc, #668]	; (8002cb8 <PullingExperiment+0x8b8>)
 8002a1a:	681b      	ldr	r3, [r3, #0]
 8002a1c:	4618      	mov	r0, r3
 8002a1e:	f7fd fd93 	bl	8000548 <__aeabi_f2d>
 8002a22:	a39b      	add	r3, pc, #620	; (adr r3, 8002c90 <PullingExperiment+0x890>)
 8002a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a28:	f7fd fde6 	bl	80005f8 <__aeabi_dmul>
 8002a2c:	4602      	mov	r2, r0
 8002a2e:	460b      	mov	r3, r1
 8002a30:	4620      	mov	r0, r4
 8002a32:	4629      	mov	r1, r5
 8002a34:	f7fd ff0a 	bl	800084c <__aeabi_ddiv>
 8002a38:	4602      	mov	r2, r0
 8002a3a:	460b      	mov	r3, r1
 8002a3c:	4610      	mov	r0, r2
 8002a3e:	4619      	mov	r1, r3
 8002a40:	f7fe f88a 	bl	8000b58 <__aeabi_d2iz>
 8002a44:	4602      	mov	r2, r0
 8002a46:	4b9d      	ldr	r3, [pc, #628]	; (8002cbc <PullingExperiment+0x8bc>)
 8002a48:	681b      	ldr	r3, [r3, #0]
 8002a4a:	4413      	add	r3, r2
 8002a4c:	4a9b      	ldr	r2, [pc, #620]	; (8002cbc <PullingExperiment+0x8bc>)
 8002a4e:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8002a50:	4b9b      	ldr	r3, [pc, #620]	; (8002cc0 <PullingExperiment+0x8c0>)
 8002a52:	2201      	movs	r2, #1
 8002a54:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8002a56:	4b93      	ldr	r3, [pc, #588]	; (8002ca4 <PullingExperiment+0x8a4>)
 8002a58:	2200      	movs	r2, #0
 8002a5a:	701a      	strb	r2, [r3, #0]
			}
			//AccRef = GravityConst + PullingAcc3;
			SpeedCmd += SampleTime*0.001*(PullingAcc3)*10/DrumRadius; //
 8002a5c:	4b99      	ldr	r3, [pc, #612]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002a5e:	681b      	ldr	r3, [r3, #0]
 8002a60:	4618      	mov	r0, r3
 8002a62:	f7fd fd71 	bl	8000548 <__aeabi_f2d>
 8002a66:	4604      	mov	r4, r0
 8002a68:	460d      	mov	r5, r1
 8002a6a:	4b97      	ldr	r3, [pc, #604]	; (8002cc8 <PullingExperiment+0x8c8>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	4618      	mov	r0, r3
 8002a70:	f7fd fd58 	bl	8000524 <__aeabi_i2d>
 8002a74:	a388      	add	r3, pc, #544	; (adr r3, 8002c98 <PullingExperiment+0x898>)
 8002a76:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a7a:	f7fd fdbd 	bl	80005f8 <__aeabi_dmul>
 8002a7e:	4602      	mov	r2, r0
 8002a80:	460b      	mov	r3, r1
 8002a82:	4690      	mov	r8, r2
 8002a84:	4699      	mov	r9, r3
 8002a86:	4b91      	ldr	r3, [pc, #580]	; (8002ccc <PullingExperiment+0x8cc>)
 8002a88:	681b      	ldr	r3, [r3, #0]
 8002a8a:	4618      	mov	r0, r3
 8002a8c:	f7fd fd5c 	bl	8000548 <__aeabi_f2d>
 8002a90:	4602      	mov	r2, r0
 8002a92:	460b      	mov	r3, r1
 8002a94:	4640      	mov	r0, r8
 8002a96:	4649      	mov	r1, r9
 8002a98:	f7fd fdae 	bl	80005f8 <__aeabi_dmul>
 8002a9c:	4602      	mov	r2, r0
 8002a9e:	460b      	mov	r3, r1
 8002aa0:	4610      	mov	r0, r2
 8002aa2:	4619      	mov	r1, r3
 8002aa4:	f04f 0200 	mov.w	r2, #0
 8002aa8:	4b89      	ldr	r3, [pc, #548]	; (8002cd0 <PullingExperiment+0x8d0>)
 8002aaa:	f7fd fda5 	bl	80005f8 <__aeabi_dmul>
 8002aae:	4602      	mov	r2, r0
 8002ab0:	460b      	mov	r3, r1
 8002ab2:	4690      	mov	r8, r2
 8002ab4:	4699      	mov	r9, r3
 8002ab6:	4b80      	ldr	r3, [pc, #512]	; (8002cb8 <PullingExperiment+0x8b8>)
 8002ab8:	681b      	ldr	r3, [r3, #0]
 8002aba:	4618      	mov	r0, r3
 8002abc:	f7fd fd44 	bl	8000548 <__aeabi_f2d>
 8002ac0:	4602      	mov	r2, r0
 8002ac2:	460b      	mov	r3, r1
 8002ac4:	4640      	mov	r0, r8
 8002ac6:	4649      	mov	r1, r9
 8002ac8:	f7fd fec0 	bl	800084c <__aeabi_ddiv>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4620      	mov	r0, r4
 8002ad2:	4629      	mov	r1, r5
 8002ad4:	f7fd fbda 	bl	800028c <__adddf3>
 8002ad8:	4602      	mov	r2, r0
 8002ada:	460b      	mov	r3, r1
 8002adc:	4610      	mov	r0, r2
 8002ade:	4619      	mov	r1, r3
 8002ae0:	f7fe f882 	bl	8000be8 <__aeabi_d2f>
 8002ae4:	4603      	mov	r3, r0
 8002ae6:	4a77      	ldr	r2, [pc, #476]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002ae8:	6013      	str	r3, [r2, #0]
			if (SpeedCmd >= 0)
 8002aea:	4b76      	ldr	r3, [pc, #472]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002aec:	edd3 7a00 	vldr	s15, [r3]
 8002af0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002af4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002af8:	db03      	blt.n	8002b02 <PullingExperiment+0x702>
				SpeedCmd = 0;
 8002afa:	4b72      	ldr	r3, [pc, #456]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002afc:	f04f 0200 	mov.w	r2, #0
 8002b00:	601a      	str	r2, [r3, #0]

//			InnerObjRefSpeed += SampleTime*0.001*(PullingAcc5)*10/DrumRadius;
//			if (InnerObjRefSpeed >= 0)
//				InnerObjRefSpeed = 0;

			if (SpeedCmd != 0)
 8002b02:	4b70      	ldr	r3, [pc, #448]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002b04:	edd3 7a00 	vldr	s15, [r3]
 8002b08:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b10:	d013      	beq.n	8002b3a <PullingExperiment+0x73a>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002b12:	4b70      	ldr	r3, [pc, #448]	; (8002cd4 <PullingExperiment+0x8d4>)
 8002b14:	781b      	ldrb	r3, [r3, #0]
 8002b16:	4a6b      	ldr	r2, [pc, #428]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002b18:	edd2 7a00 	vldr	s15, [r2]
 8002b1c:	eeb0 0a67 	vmov.f32	s0, s15
 8002b20:	4618      	mov	r0, r3
 8002b22:	f7fe ffc9 	bl	8001ab8 <CalculateTimer3Period>
 8002b26:	4603      	mov	r3, r0
 8002b28:	b29a      	uxth	r2, r3
 8002b2a:	4b6b      	ldr	r3, [pc, #428]	; (8002cd8 <PullingExperiment+0x8d8>)
 8002b2c:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 8002b2e:	4b6b      	ldr	r3, [pc, #428]	; (8002cdc <PullingExperiment+0x8dc>)
 8002b30:	2201      	movs	r2, #1
 8002b32:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8002b34:	4b5c      	ldr	r3, [pc, #368]	; (8002ca8 <PullingExperiment+0x8a8>)
 8002b36:	2201      	movs	r2, #1
 8002b38:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	e144      	b.n	8002dc8 <PullingExperiment+0x9c8>
		}

		if(PullStep5) // catch inner object speed
 8002b3e:	4b5b      	ldr	r3, [pc, #364]	; (8002cac <PullingExperiment+0x8ac>)
 8002b40:	781b      	ldrb	r3, [r3, #0]
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d078      	beq.n	8002c38 <PullingExperiment+0x838>
//				PullStep4 = false;
//				PullStep5 = true;
//			}
			//AccRef = GravityConst - PullingAcc4;

			if (IsReachTargetPosition) // Switch to Step 5
 8002b46:	4b57      	ldr	r3, [pc, #348]	; (8002ca4 <PullingExperiment+0x8a4>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b2db      	uxtb	r3, r3
 8002b4c:	2b00      	cmp	r3, #0
 8002b4e:	d00e      	beq.n	8002b6e <PullingExperiment+0x76e>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8002b50:	4b55      	ldr	r3, [pc, #340]	; (8002ca8 <PullingExperiment+0x8a8>)
 8002b52:	2200      	movs	r2, #0
 8002b54:	701a      	strb	r2, [r3, #0]
				PullStep5 = false;
 8002b56:	4b55      	ldr	r3, [pc, #340]	; (8002cac <PullingExperiment+0x8ac>)
 8002b58:	2200      	movs	r2, #0
 8002b5a:	701a      	strb	r2, [r3, #0]
				PullStep6 = true;
 8002b5c:	4b60      	ldr	r3, [pc, #384]	; (8002ce0 <PullingExperiment+0x8e0>)
 8002b5e:	2201      	movs	r2, #1
 8002b60:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8002b62:	4b50      	ldr	r3, [pc, #320]	; (8002ca4 <PullingExperiment+0x8a4>)
 8002b64:	2200      	movs	r2, #0
 8002b66:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false; // OFF pulse checking
 8002b68:	4b55      	ldr	r3, [pc, #340]	; (8002cc0 <PullingExperiment+0x8c0>)
 8002b6a:	2200      	movs	r2, #0
 8002b6c:	701a      	strb	r2, [r3, #0]
			}


			SpeedCmd += SampleTime*0.001*(PullingAcc4)*10/DrumRadius; //
 8002b6e:	4b55      	ldr	r3, [pc, #340]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002b70:	681b      	ldr	r3, [r3, #0]
 8002b72:	4618      	mov	r0, r3
 8002b74:	f7fd fce8 	bl	8000548 <__aeabi_f2d>
 8002b78:	4604      	mov	r4, r0
 8002b7a:	460d      	mov	r5, r1
 8002b7c:	4b52      	ldr	r3, [pc, #328]	; (8002cc8 <PullingExperiment+0x8c8>)
 8002b7e:	781b      	ldrb	r3, [r3, #0]
 8002b80:	4618      	mov	r0, r3
 8002b82:	f7fd fccf 	bl	8000524 <__aeabi_i2d>
 8002b86:	a344      	add	r3, pc, #272	; (adr r3, 8002c98 <PullingExperiment+0x898>)
 8002b88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b8c:	f7fd fd34 	bl	80005f8 <__aeabi_dmul>
 8002b90:	4602      	mov	r2, r0
 8002b92:	460b      	mov	r3, r1
 8002b94:	4690      	mov	r8, r2
 8002b96:	4699      	mov	r9, r3
 8002b98:	4b52      	ldr	r3, [pc, #328]	; (8002ce4 <PullingExperiment+0x8e4>)
 8002b9a:	681b      	ldr	r3, [r3, #0]
 8002b9c:	4618      	mov	r0, r3
 8002b9e:	f7fd fcd3 	bl	8000548 <__aeabi_f2d>
 8002ba2:	4602      	mov	r2, r0
 8002ba4:	460b      	mov	r3, r1
 8002ba6:	4640      	mov	r0, r8
 8002ba8:	4649      	mov	r1, r9
 8002baa:	f7fd fd25 	bl	80005f8 <__aeabi_dmul>
 8002bae:	4602      	mov	r2, r0
 8002bb0:	460b      	mov	r3, r1
 8002bb2:	4610      	mov	r0, r2
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	f04f 0200 	mov.w	r2, #0
 8002bba:	4b45      	ldr	r3, [pc, #276]	; (8002cd0 <PullingExperiment+0x8d0>)
 8002bbc:	f7fd fd1c 	bl	80005f8 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4690      	mov	r8, r2
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	4b3b      	ldr	r3, [pc, #236]	; (8002cb8 <PullingExperiment+0x8b8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fcbb 	bl	8000548 <__aeabi_f2d>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	4649      	mov	r1, r9
 8002bda:	f7fd fe37 	bl	800084c <__aeabi_ddiv>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4620      	mov	r0, r4
 8002be4:	4629      	mov	r1, r5
 8002be6:	f7fd fb51 	bl	800028c <__adddf3>
 8002bea:	4602      	mov	r2, r0
 8002bec:	460b      	mov	r3, r1
 8002bee:	4610      	mov	r0, r2
 8002bf0:	4619      	mov	r1, r3
 8002bf2:	f7fd fff9 	bl	8000be8 <__aeabi_d2f>
 8002bf6:	4603      	mov	r3, r0
 8002bf8:	4a32      	ldr	r2, [pc, #200]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002bfa:	6013      	str	r3, [r2, #0]
//			if (InnerObjRefSpeed >= 0)
//				InnerObjRefSpeed = 0;
//			if (SpeedCmd <=  InnerObjRefSpeed)
//				SpeedCmd = InnerObjRefSpeed;

			if (SpeedCmd != 0)
 8002bfc:	4b31      	ldr	r3, [pc, #196]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002bfe:	edd3 7a00 	vldr	s15, [r3]
 8002c02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c0a:	d013      	beq.n	8002c34 <PullingExperiment+0x834>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002c0c:	4b31      	ldr	r3, [pc, #196]	; (8002cd4 <PullingExperiment+0x8d4>)
 8002c0e:	781b      	ldrb	r3, [r3, #0]
 8002c10:	4a2c      	ldr	r2, [pc, #176]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002c12:	edd2 7a00 	vldr	s15, [r2]
 8002c16:	eeb0 0a67 	vmov.f32	s0, s15
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fe ff4c 	bl	8001ab8 <CalculateTimer3Period>
 8002c20:	4603      	mov	r3, r0
 8002c22:	b29a      	uxth	r2, r3
 8002c24:	4b2c      	ldr	r3, [pc, #176]	; (8002cd8 <PullingExperiment+0x8d8>)
 8002c26:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 8002c28:	4b2c      	ldr	r3, [pc, #176]	; (8002cdc <PullingExperiment+0x8dc>)
 8002c2a:	2201      	movs	r2, #1
 8002c2c:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8002c2e:	4b1e      	ldr	r3, [pc, #120]	; (8002ca8 <PullingExperiment+0x8a8>)
 8002c30:	2201      	movs	r2, #1
 8002c32:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002c34:	2300      	movs	r3, #0
 8002c36:	e0c7      	b.n	8002dc8 <PullingExperiment+0x9c8>
		}

		if (PullStep6) //Final deceleration
 8002c38:	4b29      	ldr	r3, [pc, #164]	; (8002ce0 <PullingExperiment+0x8e0>)
 8002c3a:	781b      	ldrb	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	f000 80c2 	beq.w	8002dc6 <PullingExperiment+0x9c6>
		{
			if(SpeedCmd >= 0 || PositionPulseCmd <= 50) // Finish deceleration
 8002c42:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002c44:	edd3 7a00 	vldr	s15, [r3]
 8002c48:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c4c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c50:	da03      	bge.n	8002c5a <PullingExperiment+0x85a>
 8002c52:	4b25      	ldr	r3, [pc, #148]	; (8002ce8 <PullingExperiment+0x8e8>)
 8002c54:	681b      	ldr	r3, [r3, #0]
 8002c56:	2b32      	cmp	r3, #50	; 0x32
 8002c58:	dc50      	bgt.n	8002cfc <PullingExperiment+0x8fc>
			{
				CompletePulling =true;
 8002c5a:	4b24      	ldr	r3, [pc, #144]	; (8002cec <PullingExperiment+0x8ec>)
 8002c5c:	2201      	movs	r2, #1
 8002c5e:	701a      	strb	r2, [r3, #0]
				PullStep6 = false;
 8002c60:	4b1f      	ldr	r3, [pc, #124]	; (8002ce0 <PullingExperiment+0x8e0>)
 8002c62:	2200      	movs	r2, #0
 8002c64:	701a      	strb	r2, [r3, #0]
				SpeedCmd = 0;
 8002c66:	4b17      	ldr	r3, [pc, #92]	; (8002cc4 <PullingExperiment+0x8c4>)
 8002c68:	f04f 0200 	mov.w	r2, #0
 8002c6c:	601a      	str	r2, [r3, #0]
				StopPulseGenerating();
 8002c6e:	f7fe febd 	bl	80019ec <StopPulseGenerating>

				if (ExperimentMode == 3) // Init for Dropping
 8002c72:	4b1f      	ldr	r3, [pc, #124]	; (8002cf0 <PullingExperiment+0x8f0>)
 8002c74:	781b      	ldrb	r3, [r3, #0]
 8002c76:	2b03      	cmp	r3, #3
 8002c78:	d107      	bne.n	8002c8a <PullingExperiment+0x88a>
				{
					Direction = true; // variable to show the direction, false = move up, true = move down
 8002c7a:	4b1e      	ldr	r3, [pc, #120]	; (8002cf4 <PullingExperiment+0x8f4>)
 8002c7c:	2201      	movs	r2, #1
 8002c7e:	701a      	strb	r2, [r3, #0]
					PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002c80:	4b1d      	ldr	r3, [pc, #116]	; (8002cf8 <PullingExperiment+0x8f8>)
 8002c82:	2200      	movs	r2, #0
 8002c84:	701a      	strb	r2, [r3, #0]
					InitPulseGenerating();
 8002c86:	f7fe fed5 	bl	8001a34 <InitPulseGenerating>
				}
				return true;
 8002c8a:	2301      	movs	r3, #1
 8002c8c:	e09c      	b.n	8002dc8 <PullingExperiment+0x9c8>
 8002c8e:	bf00      	nop
 8002c90:	51eb851f 	.word	0x51eb851f
 8002c94:	40191eb8 	.word	0x40191eb8
 8002c98:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c9c:	3f50624d 	.word	0x3f50624d
 8002ca0:	20000445 	.word	0x20000445
 8002ca4:	20000438 	.word	0x20000438
 8002ca8:	20000436 	.word	0x20000436
 8002cac:	20000446 	.word	0x20000446
 8002cb0:	2000000a 	.word	0x2000000a
 8002cb4:	200004a0 	.word	0x200004a0
 8002cb8:	20000464 	.word	0x20000464
 8002cbc:	200004b0 	.word	0x200004b0
 8002cc0:	2000044c 	.word	0x2000044c
 8002cc4:	20000518 	.word	0x20000518
 8002cc8:	20000468 	.word	0x20000468
 8002ccc:	20000488 	.word	0x20000488
 8002cd0:	40240000 	.word	0x40240000
 8002cd4:	20000003 	.word	0x20000003
 8002cd8:	20000454 	.word	0x20000454
 8002cdc:	20000440 	.word	0x20000440
 8002ce0:	20000447 	.word	0x20000447
 8002ce4:	2000048c 	.word	0x2000048c
 8002ce8:	200004b8 	.word	0x200004b8
 8002cec:	2000043b 	.word	0x2000043b
 8002cf0:	20000005 	.word	0x20000005
 8002cf4:	20000434 	.word	0x20000434
 8002cf8:	2000043f 	.word	0x2000043f
			}
			//AccRef = GravityConst + PullingAcc5;
			SpeedCmd += SampleTime*0.001*(PullingAcc5)*10/DrumRadius; //
 8002cfc:	4b36      	ldr	r3, [pc, #216]	; (8002dd8 <PullingExperiment+0x9d8>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	4618      	mov	r0, r3
 8002d02:	f7fd fc21 	bl	8000548 <__aeabi_f2d>
 8002d06:	4604      	mov	r4, r0
 8002d08:	460d      	mov	r5, r1
 8002d0a:	4b34      	ldr	r3, [pc, #208]	; (8002ddc <PullingExperiment+0x9dc>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	4618      	mov	r0, r3
 8002d10:	f7fd fc08 	bl	8000524 <__aeabi_i2d>
 8002d14:	a32e      	add	r3, pc, #184	; (adr r3, 8002dd0 <PullingExperiment+0x9d0>)
 8002d16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d1a:	f7fd fc6d 	bl	80005f8 <__aeabi_dmul>
 8002d1e:	4602      	mov	r2, r0
 8002d20:	460b      	mov	r3, r1
 8002d22:	4690      	mov	r8, r2
 8002d24:	4699      	mov	r9, r3
 8002d26:	4b2e      	ldr	r3, [pc, #184]	; (8002de0 <PullingExperiment+0x9e0>)
 8002d28:	681b      	ldr	r3, [r3, #0]
 8002d2a:	4618      	mov	r0, r3
 8002d2c:	f7fd fc0c 	bl	8000548 <__aeabi_f2d>
 8002d30:	4602      	mov	r2, r0
 8002d32:	460b      	mov	r3, r1
 8002d34:	4640      	mov	r0, r8
 8002d36:	4649      	mov	r1, r9
 8002d38:	f7fd fc5e 	bl	80005f8 <__aeabi_dmul>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4610      	mov	r0, r2
 8002d42:	4619      	mov	r1, r3
 8002d44:	f04f 0200 	mov.w	r2, #0
 8002d48:	4b26      	ldr	r3, [pc, #152]	; (8002de4 <PullingExperiment+0x9e4>)
 8002d4a:	f7fd fc55 	bl	80005f8 <__aeabi_dmul>
 8002d4e:	4602      	mov	r2, r0
 8002d50:	460b      	mov	r3, r1
 8002d52:	4690      	mov	r8, r2
 8002d54:	4699      	mov	r9, r3
 8002d56:	4b24      	ldr	r3, [pc, #144]	; (8002de8 <PullingExperiment+0x9e8>)
 8002d58:	681b      	ldr	r3, [r3, #0]
 8002d5a:	4618      	mov	r0, r3
 8002d5c:	f7fd fbf4 	bl	8000548 <__aeabi_f2d>
 8002d60:	4602      	mov	r2, r0
 8002d62:	460b      	mov	r3, r1
 8002d64:	4640      	mov	r0, r8
 8002d66:	4649      	mov	r1, r9
 8002d68:	f7fd fd70 	bl	800084c <__aeabi_ddiv>
 8002d6c:	4602      	mov	r2, r0
 8002d6e:	460b      	mov	r3, r1
 8002d70:	4620      	mov	r0, r4
 8002d72:	4629      	mov	r1, r5
 8002d74:	f7fd fa8a 	bl	800028c <__adddf3>
 8002d78:	4602      	mov	r2, r0
 8002d7a:	460b      	mov	r3, r1
 8002d7c:	4610      	mov	r0, r2
 8002d7e:	4619      	mov	r1, r3
 8002d80:	f7fd ff32 	bl	8000be8 <__aeabi_d2f>
 8002d84:	4603      	mov	r3, r0
 8002d86:	4a14      	ldr	r2, [pc, #80]	; (8002dd8 <PullingExperiment+0x9d8>)
 8002d88:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8002d8a:	4b13      	ldr	r3, [pc, #76]	; (8002dd8 <PullingExperiment+0x9d8>)
 8002d8c:	edd3 7a00 	vldr	s15, [r3]
 8002d90:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d94:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d98:	d013      	beq.n	8002dc2 <PullingExperiment+0x9c2>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002d9a:	4b14      	ldr	r3, [pc, #80]	; (8002dec <PullingExperiment+0x9ec>)
 8002d9c:	781b      	ldrb	r3, [r3, #0]
 8002d9e:	4a0e      	ldr	r2, [pc, #56]	; (8002dd8 <PullingExperiment+0x9d8>)
 8002da0:	edd2 7a00 	vldr	s15, [r2]
 8002da4:	eeb0 0a67 	vmov.f32	s0, s15
 8002da8:	4618      	mov	r0, r3
 8002daa:	f7fe fe85 	bl	8001ab8 <CalculateTimer3Period>
 8002dae:	4603      	mov	r3, r0
 8002db0:	b29a      	uxth	r2, r3
 8002db2:	4b0f      	ldr	r3, [pc, #60]	; (8002df0 <PullingExperiment+0x9f0>)
 8002db4:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 8002db6:	4b0f      	ldr	r3, [pc, #60]	; (8002df4 <PullingExperiment+0x9f4>)
 8002db8:	2201      	movs	r2, #1
 8002dba:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true;
 8002dbc:	4b0e      	ldr	r3, [pc, #56]	; (8002df8 <PullingExperiment+0x9f8>)
 8002dbe:	2201      	movs	r2, #1
 8002dc0:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	e000      	b.n	8002dc8 <PullingExperiment+0x9c8>
		}
	}
	return false;
 8002dc6:	2300      	movs	r3, #0
}
 8002dc8:	4618      	mov	r0, r3
 8002dca:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002dce:	bf00      	nop
 8002dd0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002dd4:	3f50624d 	.word	0x3f50624d
 8002dd8:	20000518 	.word	0x20000518
 8002ddc:	20000468 	.word	0x20000468
 8002de0:	20000490 	.word	0x20000490
 8002de4:	40240000 	.word	0x40240000
 8002de8:	20000464 	.word	0x20000464
 8002dec:	20000003 	.word	0x20000003
 8002df0:	20000454 	.word	0x20000454
 8002df4:	20000440 	.word	0x20000440
 8002df8:	20000436 	.word	0x20000436
 8002dfc:	00000000 	.word	0x00000000

08002e00 <SimulatePulling>:
bool SimulatePulling ()
{
 8002e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e04:	af00      	add	r7, sp, #0
	if (CompletePulling)
 8002e06:	4ba8      	ldr	r3, [pc, #672]	; (80030a8 <SimulatePulling+0x2a8>)
 8002e08:	781b      	ldrb	r3, [r3, #0]
 8002e0a:	2b00      	cmp	r3, #0
 8002e0c:	d002      	beq.n	8002e14 <SimulatePulling+0x14>
	{
		return true;
 8002e0e:	2301      	movs	r3, #1
 8002e10:	f000 bc8c 	b.w	800372c <SimulatePulling+0x92c>
	}
	else
	{
		if (PullStep1) // Accelerate pulling, Acc1
 8002e14:	4ba5      	ldr	r3, [pc, #660]	; (80030ac <SimulatePulling+0x2ac>)
 8002e16:	781b      	ldrb	r3, [r3, #0]
 8002e18:	2b00      	cmp	r3, #0
 8002e1a:	f000 80b2 	beq.w	8002f82 <SimulatePulling+0x182>
		{
			if (IsReachTargetPosition) // Switch to Step 2
 8002e1e:	4ba4      	ldr	r3, [pc, #656]	; (80030b0 <SimulatePulling+0x2b0>)
 8002e20:	781b      	ldrb	r3, [r3, #0]
 8002e22:	b2db      	uxtb	r3, r3
 8002e24:	2b00      	cmp	r3, #0
 8002e26:	d03b      	beq.n	8002ea0 <SimulatePulling+0xa0>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8002e28:	4ba2      	ldr	r3, [pc, #648]	; (80030b4 <SimulatePulling+0x2b4>)
 8002e2a:	2200      	movs	r2, #0
 8002e2c:	701a      	strb	r2, [r3, #0]
				PullStep1 = false;
 8002e2e:	4b9f      	ldr	r3, [pc, #636]	; (80030ac <SimulatePulling+0x2ac>)
 8002e30:	2200      	movs	r2, #0
 8002e32:	701a      	strb	r2, [r3, #0]
				PullStep2 = true; // Switch to Step 2
 8002e34:	4ba0      	ldr	r3, [pc, #640]	; (80030b8 <SimulatePulling+0x2b8>)
 8002e36:	2201      	movs	r2, #1
 8002e38:	701a      	strb	r2, [r3, #0]

				TargetPosition += ((int)(EncoderResolution*PullingPoint2/(2*3.14*DrumRadius))); // Max Speed Point
 8002e3a:	4ba0      	ldr	r3, [pc, #640]	; (80030bc <SimulatePulling+0x2bc>)
 8002e3c:	881b      	ldrh	r3, [r3, #0]
 8002e3e:	ee07 3a90 	vmov	s15, r3
 8002e42:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002e46:	4b9e      	ldr	r3, [pc, #632]	; (80030c0 <SimulatePulling+0x2c0>)
 8002e48:	edd3 7a00 	vldr	s15, [r3]
 8002e4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002e50:	ee17 0a90 	vmov	r0, s15
 8002e54:	f7fd fb78 	bl	8000548 <__aeabi_f2d>
 8002e58:	4604      	mov	r4, r0
 8002e5a:	460d      	mov	r5, r1
 8002e5c:	4b99      	ldr	r3, [pc, #612]	; (80030c4 <SimulatePulling+0x2c4>)
 8002e5e:	681b      	ldr	r3, [r3, #0]
 8002e60:	4618      	mov	r0, r3
 8002e62:	f7fd fb71 	bl	8000548 <__aeabi_f2d>
 8002e66:	a38c      	add	r3, pc, #560	; (adr r3, 8003098 <SimulatePulling+0x298>)
 8002e68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e6c:	f7fd fbc4 	bl	80005f8 <__aeabi_dmul>
 8002e70:	4602      	mov	r2, r0
 8002e72:	460b      	mov	r3, r1
 8002e74:	4620      	mov	r0, r4
 8002e76:	4629      	mov	r1, r5
 8002e78:	f7fd fce8 	bl	800084c <__aeabi_ddiv>
 8002e7c:	4602      	mov	r2, r0
 8002e7e:	460b      	mov	r3, r1
 8002e80:	4610      	mov	r0, r2
 8002e82:	4619      	mov	r1, r3
 8002e84:	f7fd fe68 	bl	8000b58 <__aeabi_d2iz>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	4b8f      	ldr	r3, [pc, #572]	; (80030c8 <SimulatePulling+0x2c8>)
 8002e8c:	681b      	ldr	r3, [r3, #0]
 8002e8e:	4413      	add	r3, r2
 8002e90:	4a8d      	ldr	r2, [pc, #564]	; (80030c8 <SimulatePulling+0x2c8>)
 8002e92:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8002e94:	4b8d      	ldr	r3, [pc, #564]	; (80030cc <SimulatePulling+0x2cc>)
 8002e96:	2201      	movs	r2, #1
 8002e98:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8002e9a:	4b85      	ldr	r3, [pc, #532]	; (80030b0 <SimulatePulling+0x2b0>)
 8002e9c:	2200      	movs	r2, #0
 8002e9e:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst - PullingAcc1;
 8002ea0:	ed9f 7a8b 	vldr	s14, [pc, #556]	; 80030d0 <SimulatePulling+0x2d0>
 8002ea4:	4b8b      	ldr	r3, [pc, #556]	; (80030d4 <SimulatePulling+0x2d4>)
 8002ea6:	edd3 7a00 	vldr	s15, [r3]
 8002eaa:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002eae:	4b8a      	ldr	r3, [pc, #552]	; (80030d8 <SimulatePulling+0x2d8>)
 8002eb0:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(-PullingAcc1)*10/DrumRadius;
 8002eb4:	4b89      	ldr	r3, [pc, #548]	; (80030dc <SimulatePulling+0x2dc>)
 8002eb6:	681b      	ldr	r3, [r3, #0]
 8002eb8:	4618      	mov	r0, r3
 8002eba:	f7fd fb45 	bl	8000548 <__aeabi_f2d>
 8002ebe:	4604      	mov	r4, r0
 8002ec0:	460d      	mov	r5, r1
 8002ec2:	4b87      	ldr	r3, [pc, #540]	; (80030e0 <SimulatePulling+0x2e0>)
 8002ec4:	781b      	ldrb	r3, [r3, #0]
 8002ec6:	4618      	mov	r0, r3
 8002ec8:	f7fd fb2c 	bl	8000524 <__aeabi_i2d>
 8002ecc:	a374      	add	r3, pc, #464	; (adr r3, 80030a0 <SimulatePulling+0x2a0>)
 8002ece:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ed2:	f7fd fb91 	bl	80005f8 <__aeabi_dmul>
 8002ed6:	4602      	mov	r2, r0
 8002ed8:	460b      	mov	r3, r1
 8002eda:	4690      	mov	r8, r2
 8002edc:	4699      	mov	r9, r3
 8002ede:	4b7d      	ldr	r3, [pc, #500]	; (80030d4 <SimulatePulling+0x2d4>)
 8002ee0:	edd3 7a00 	vldr	s15, [r3]
 8002ee4:	eef1 7a67 	vneg.f32	s15, s15
 8002ee8:	ee17 3a90 	vmov	r3, s15
 8002eec:	4618      	mov	r0, r3
 8002eee:	f7fd fb2b 	bl	8000548 <__aeabi_f2d>
 8002ef2:	4602      	mov	r2, r0
 8002ef4:	460b      	mov	r3, r1
 8002ef6:	4640      	mov	r0, r8
 8002ef8:	4649      	mov	r1, r9
 8002efa:	f7fd fb7d 	bl	80005f8 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4610      	mov	r0, r2
 8002f04:	4619      	mov	r1, r3
 8002f06:	f04f 0200 	mov.w	r2, #0
 8002f0a:	4b76      	ldr	r3, [pc, #472]	; (80030e4 <SimulatePulling+0x2e4>)
 8002f0c:	f7fd fb74 	bl	80005f8 <__aeabi_dmul>
 8002f10:	4602      	mov	r2, r0
 8002f12:	460b      	mov	r3, r1
 8002f14:	4690      	mov	r8, r2
 8002f16:	4699      	mov	r9, r3
 8002f18:	4b6a      	ldr	r3, [pc, #424]	; (80030c4 <SimulatePulling+0x2c4>)
 8002f1a:	681b      	ldr	r3, [r3, #0]
 8002f1c:	4618      	mov	r0, r3
 8002f1e:	f7fd fb13 	bl	8000548 <__aeabi_f2d>
 8002f22:	4602      	mov	r2, r0
 8002f24:	460b      	mov	r3, r1
 8002f26:	4640      	mov	r0, r8
 8002f28:	4649      	mov	r1, r9
 8002f2a:	f7fd fc8f 	bl	800084c <__aeabi_ddiv>
 8002f2e:	4602      	mov	r2, r0
 8002f30:	460b      	mov	r3, r1
 8002f32:	4620      	mov	r0, r4
 8002f34:	4629      	mov	r1, r5
 8002f36:	f7fd f9a9 	bl	800028c <__adddf3>
 8002f3a:	4602      	mov	r2, r0
 8002f3c:	460b      	mov	r3, r1
 8002f3e:	4610      	mov	r0, r2
 8002f40:	4619      	mov	r1, r3
 8002f42:	f7fd fe51 	bl	8000be8 <__aeabi_d2f>
 8002f46:	4603      	mov	r3, r0
 8002f48:	4a64      	ldr	r2, [pc, #400]	; (80030dc <SimulatePulling+0x2dc>)
 8002f4a:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8002f4c:	4b63      	ldr	r3, [pc, #396]	; (80030dc <SimulatePulling+0x2dc>)
 8002f4e:	edd3 7a00 	vldr	s15, [r3]
 8002f52:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f56:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f5a:	d010      	beq.n	8002f7e <SimulatePulling+0x17e>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002f5c:	4b62      	ldr	r3, [pc, #392]	; (80030e8 <SimulatePulling+0x2e8>)
 8002f5e:	781b      	ldrb	r3, [r3, #0]
 8002f60:	4a5e      	ldr	r2, [pc, #376]	; (80030dc <SimulatePulling+0x2dc>)
 8002f62:	edd2 7a00 	vldr	s15, [r2]
 8002f66:	eeb0 0a67 	vmov.f32	s0, s15
 8002f6a:	4618      	mov	r0, r3
 8002f6c:	f7fe fda4 	bl	8001ab8 <CalculateTimer3Period>
 8002f70:	4603      	mov	r3, r0
 8002f72:	b29a      	uxth	r2, r3
 8002f74:	4b5d      	ldr	r3, [pc, #372]	; (80030ec <SimulatePulling+0x2ec>)
 8002f76:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8002f78:	4b4e      	ldr	r3, [pc, #312]	; (80030b4 <SimulatePulling+0x2b4>)
 8002f7a:	2201      	movs	r2, #1
 8002f7c:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8002f7e:	2300      	movs	r3, #0
 8002f80:	e3d4      	b.n	800372c <SimulatePulling+0x92c>
		}
		if (PullStep2) // Accelerate Pulling Acc2
 8002f82:	4b4d      	ldr	r3, [pc, #308]	; (80030b8 <SimulatePulling+0x2b8>)
 8002f84:	781b      	ldrb	r3, [r3, #0]
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	f000 80b6 	beq.w	80030f8 <SimulatePulling+0x2f8>
		{
			if (IsReachTargetPosition) // Switch to Step 3
 8002f8c:	4b48      	ldr	r3, [pc, #288]	; (80030b0 <SimulatePulling+0x2b0>)
 8002f8e:	781b      	ldrb	r3, [r3, #0]
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d00e      	beq.n	8002fb4 <SimulatePulling+0x1b4>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8002f96:	4b47      	ldr	r3, [pc, #284]	; (80030b4 <SimulatePulling+0x2b4>)
 8002f98:	2200      	movs	r2, #0
 8002f9a:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false;
 8002f9c:	4b4b      	ldr	r3, [pc, #300]	; (80030cc <SimulatePulling+0x2cc>)
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	701a      	strb	r2, [r3, #0]
				PullStep2 = false;
 8002fa2:	4b45      	ldr	r3, [pc, #276]	; (80030b8 <SimulatePulling+0x2b8>)
 8002fa4:	2200      	movs	r2, #0
 8002fa6:	701a      	strb	r2, [r3, #0]
				PullStep3 = true;
 8002fa8:	4b51      	ldr	r3, [pc, #324]	; (80030f0 <SimulatePulling+0x2f0>)
 8002faa:	2201      	movs	r2, #1
 8002fac:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8002fae:	4b40      	ldr	r3, [pc, #256]	; (80030b0 <SimulatePulling+0x2b0>)
 8002fb0:	2200      	movs	r2, #0
 8002fb2:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst - PullingAcc2;
 8002fb4:	ed9f 7a46 	vldr	s14, [pc, #280]	; 80030d0 <SimulatePulling+0x2d0>
 8002fb8:	4b4e      	ldr	r3, [pc, #312]	; (80030f4 <SimulatePulling+0x2f4>)
 8002fba:	edd3 7a00 	vldr	s15, [r3]
 8002fbe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002fc2:	4b45      	ldr	r3, [pc, #276]	; (80030d8 <SimulatePulling+0x2d8>)
 8002fc4:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(-PullingAcc2)*10/DrumRadius; //
 8002fc8:	4b44      	ldr	r3, [pc, #272]	; (80030dc <SimulatePulling+0x2dc>)
 8002fca:	681b      	ldr	r3, [r3, #0]
 8002fcc:	4618      	mov	r0, r3
 8002fce:	f7fd fabb 	bl	8000548 <__aeabi_f2d>
 8002fd2:	4604      	mov	r4, r0
 8002fd4:	460d      	mov	r5, r1
 8002fd6:	4b42      	ldr	r3, [pc, #264]	; (80030e0 <SimulatePulling+0x2e0>)
 8002fd8:	781b      	ldrb	r3, [r3, #0]
 8002fda:	4618      	mov	r0, r3
 8002fdc:	f7fd faa2 	bl	8000524 <__aeabi_i2d>
 8002fe0:	a32f      	add	r3, pc, #188	; (adr r3, 80030a0 <SimulatePulling+0x2a0>)
 8002fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe6:	f7fd fb07 	bl	80005f8 <__aeabi_dmul>
 8002fea:	4602      	mov	r2, r0
 8002fec:	460b      	mov	r3, r1
 8002fee:	4690      	mov	r8, r2
 8002ff0:	4699      	mov	r9, r3
 8002ff2:	4b40      	ldr	r3, [pc, #256]	; (80030f4 <SimulatePulling+0x2f4>)
 8002ff4:	edd3 7a00 	vldr	s15, [r3]
 8002ff8:	eef1 7a67 	vneg.f32	s15, s15
 8002ffc:	ee17 3a90 	vmov	r3, s15
 8003000:	4618      	mov	r0, r3
 8003002:	f7fd faa1 	bl	8000548 <__aeabi_f2d>
 8003006:	4602      	mov	r2, r0
 8003008:	460b      	mov	r3, r1
 800300a:	4640      	mov	r0, r8
 800300c:	4649      	mov	r1, r9
 800300e:	f7fd faf3 	bl	80005f8 <__aeabi_dmul>
 8003012:	4602      	mov	r2, r0
 8003014:	460b      	mov	r3, r1
 8003016:	4610      	mov	r0, r2
 8003018:	4619      	mov	r1, r3
 800301a:	f04f 0200 	mov.w	r2, #0
 800301e:	4b31      	ldr	r3, [pc, #196]	; (80030e4 <SimulatePulling+0x2e4>)
 8003020:	f7fd faea 	bl	80005f8 <__aeabi_dmul>
 8003024:	4602      	mov	r2, r0
 8003026:	460b      	mov	r3, r1
 8003028:	4690      	mov	r8, r2
 800302a:	4699      	mov	r9, r3
 800302c:	4b25      	ldr	r3, [pc, #148]	; (80030c4 <SimulatePulling+0x2c4>)
 800302e:	681b      	ldr	r3, [r3, #0]
 8003030:	4618      	mov	r0, r3
 8003032:	f7fd fa89 	bl	8000548 <__aeabi_f2d>
 8003036:	4602      	mov	r2, r0
 8003038:	460b      	mov	r3, r1
 800303a:	4640      	mov	r0, r8
 800303c:	4649      	mov	r1, r9
 800303e:	f7fd fc05 	bl	800084c <__aeabi_ddiv>
 8003042:	4602      	mov	r2, r0
 8003044:	460b      	mov	r3, r1
 8003046:	4620      	mov	r0, r4
 8003048:	4629      	mov	r1, r5
 800304a:	f7fd f91f 	bl	800028c <__adddf3>
 800304e:	4602      	mov	r2, r0
 8003050:	460b      	mov	r3, r1
 8003052:	4610      	mov	r0, r2
 8003054:	4619      	mov	r1, r3
 8003056:	f7fd fdc7 	bl	8000be8 <__aeabi_d2f>
 800305a:	4603      	mov	r3, r0
 800305c:	4a1f      	ldr	r2, [pc, #124]	; (80030dc <SimulatePulling+0x2dc>)
 800305e:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8003060:	4b1e      	ldr	r3, [pc, #120]	; (80030dc <SimulatePulling+0x2dc>)
 8003062:	edd3 7a00 	vldr	s15, [r3]
 8003066:	eef5 7a40 	vcmp.f32	s15, #0.0
 800306a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800306e:	d010      	beq.n	8003092 <SimulatePulling+0x292>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003070:	4b1d      	ldr	r3, [pc, #116]	; (80030e8 <SimulatePulling+0x2e8>)
 8003072:	781b      	ldrb	r3, [r3, #0]
 8003074:	4a19      	ldr	r2, [pc, #100]	; (80030dc <SimulatePulling+0x2dc>)
 8003076:	edd2 7a00 	vldr	s15, [r2]
 800307a:	eeb0 0a67 	vmov.f32	s0, s15
 800307e:	4618      	mov	r0, r3
 8003080:	f7fe fd1a 	bl	8001ab8 <CalculateTimer3Period>
 8003084:	4603      	mov	r3, r0
 8003086:	b29a      	uxth	r2, r3
 8003088:	4b18      	ldr	r3, [pc, #96]	; (80030ec <SimulatePulling+0x2ec>)
 800308a:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 800308c:	4b09      	ldr	r3, [pc, #36]	; (80030b4 <SimulatePulling+0x2b4>)
 800308e:	2201      	movs	r2, #1
 8003090:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003092:	2300      	movs	r3, #0
 8003094:	e34a      	b.n	800372c <SimulatePulling+0x92c>
 8003096:	bf00      	nop
 8003098:	51eb851f 	.word	0x51eb851f
 800309c:	40191eb8 	.word	0x40191eb8
 80030a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80030a4:	3f50624d 	.word	0x3f50624d
 80030a8:	2000043b 	.word	0x2000043b
 80030ac:	20000442 	.word	0x20000442
 80030b0:	20000438 	.word	0x20000438
 80030b4:	20000436 	.word	0x20000436
 80030b8:	20000443 	.word	0x20000443
 80030bc:	2000000a 	.word	0x2000000a
 80030c0:	20000498 	.word	0x20000498
 80030c4:	20000464 	.word	0x20000464
 80030c8:	200004b0 	.word	0x200004b0
 80030cc:	2000044c 	.word	0x2000044c
 80030d0:	c11ccccd 	.word	0xc11ccccd
 80030d4:	20000480 	.word	0x20000480
 80030d8:	20000010 	.word	0x20000010
 80030dc:	20000518 	.word	0x20000518
 80030e0:	20000468 	.word	0x20000468
 80030e4:	40240000 	.word	0x40240000
 80030e8:	20000003 	.word	0x20000003
 80030ec:	20000454 	.word	0x20000454
 80030f0:	20000444 	.word	0x20000444
 80030f4:	20000484 	.word	0x20000484
		}
		if (PullStep3) // Smooth the transition
 80030f8:	4b6b      	ldr	r3, [pc, #428]	; (80032a8 <SimulatePulling+0x4a8>)
 80030fa:	781b      	ldrb	r3, [r3, #0]
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	f000 80f7 	beq.w	80032f0 <SimulatePulling+0x4f0>
		{
			if (AccRef >= GravityConst + PullingAcc3) // Switch to step 2
 8003102:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 80032ac <SimulatePulling+0x4ac>
 8003106:	4b6a      	ldr	r3, [pc, #424]	; (80032b0 <SimulatePulling+0x4b0>)
 8003108:	edd3 7a00 	vldr	s15, [r3]
 800310c:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003110:	4b68      	ldr	r3, [pc, #416]	; (80032b4 <SimulatePulling+0x4b4>)
 8003112:	edd3 7a00 	vldr	s15, [r3]
 8003116:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800311a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800311e:	d838      	bhi.n	8003192 <SimulatePulling+0x392>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003120:	4b65      	ldr	r3, [pc, #404]	; (80032b8 <SimulatePulling+0x4b8>)
 8003122:	2200      	movs	r2, #0
 8003124:	701a      	strb	r2, [r3, #0]

				TargetPosition = PulseSimuCount + ((int)(EncoderResolution*PullingPoint3/(2*3.14*DrumRadius))) ; // Max Speed Point
 8003126:	4b65      	ldr	r3, [pc, #404]	; (80032bc <SimulatePulling+0x4bc>)
 8003128:	881b      	ldrh	r3, [r3, #0]
 800312a:	ee07 3a90 	vmov	s15, r3
 800312e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003132:	4b63      	ldr	r3, [pc, #396]	; (80032c0 <SimulatePulling+0x4c0>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313c:	ee17 0a90 	vmov	r0, s15
 8003140:	f7fd fa02 	bl	8000548 <__aeabi_f2d>
 8003144:	4604      	mov	r4, r0
 8003146:	460d      	mov	r5, r1
 8003148:	4b5e      	ldr	r3, [pc, #376]	; (80032c4 <SimulatePulling+0x4c4>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd f9fb 	bl	8000548 <__aeabi_f2d>
 8003152:	a351      	add	r3, pc, #324	; (adr r3, 8003298 <SimulatePulling+0x498>)
 8003154:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003158:	f7fd fa4e 	bl	80005f8 <__aeabi_dmul>
 800315c:	4602      	mov	r2, r0
 800315e:	460b      	mov	r3, r1
 8003160:	4620      	mov	r0, r4
 8003162:	4629      	mov	r1, r5
 8003164:	f7fd fb72 	bl	800084c <__aeabi_ddiv>
 8003168:	4602      	mov	r2, r0
 800316a:	460b      	mov	r3, r1
 800316c:	4610      	mov	r0, r2
 800316e:	4619      	mov	r1, r3
 8003170:	f7fd fcf2 	bl	8000b58 <__aeabi_d2iz>
 8003174:	4602      	mov	r2, r0
 8003176:	4b54      	ldr	r3, [pc, #336]	; (80032c8 <SimulatePulling+0x4c8>)
 8003178:	681b      	ldr	r3, [r3, #0]
 800317a:	4413      	add	r3, r2
 800317c:	4a53      	ldr	r2, [pc, #332]	; (80032cc <SimulatePulling+0x4cc>)
 800317e:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8003180:	4b53      	ldr	r3, [pc, #332]	; (80032d0 <SimulatePulling+0x4d0>)
 8003182:	2201      	movs	r2, #1
 8003184:	701a      	strb	r2, [r3, #0]

				PullStep3 = false;
 8003186:	4b48      	ldr	r3, [pc, #288]	; (80032a8 <SimulatePulling+0x4a8>)
 8003188:	2200      	movs	r2, #0
 800318a:	701a      	strb	r2, [r3, #0]
				PullStep4 = true; // Switch to Step 4
 800318c:	4b51      	ldr	r3, [pc, #324]	; (80032d4 <SimulatePulling+0x4d4>)
 800318e:	2201      	movs	r2, #1
 8003190:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,DropAccelSlope,GravityConst + PullingAcc3);
 8003192:	4b51      	ldr	r3, [pc, #324]	; (80032d8 <SimulatePulling+0x4d8>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	ee07 3a90 	vmov	s15, r3
 800319a:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800319e:	eddf 6a43 	vldr	s13, [pc, #268]	; 80032ac <SimulatePulling+0x4ac>
 80031a2:	4b43      	ldr	r3, [pc, #268]	; (80032b0 <SimulatePulling+0x4b0>)
 80031a4:	edd3 7a00 	vldr	s15, [r3]
 80031a8:	ee76 7aa7 	vadd.f32	s15, s13, s15
 80031ac:	eef0 0a67 	vmov.f32	s1, s15
 80031b0:	eeb0 0a47 	vmov.f32	s0, s14
 80031b4:	483f      	ldr	r0, [pc, #252]	; (80032b4 <SimulatePulling+0x4b4>)
 80031b6:	f7fe fbbb 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 80031ba:	4b48      	ldr	r3, [pc, #288]	; (80032dc <SimulatePulling+0x4dc>)
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	4618      	mov	r0, r3
 80031c0:	f7fd f9c2 	bl	8000548 <__aeabi_f2d>
 80031c4:	4604      	mov	r4, r0
 80031c6:	460d      	mov	r5, r1
 80031c8:	4b45      	ldr	r3, [pc, #276]	; (80032e0 <SimulatePulling+0x4e0>)
 80031ca:	781b      	ldrb	r3, [r3, #0]
 80031cc:	4618      	mov	r0, r3
 80031ce:	f7fd f9a9 	bl	8000524 <__aeabi_i2d>
 80031d2:	a333      	add	r3, pc, #204	; (adr r3, 80032a0 <SimulatePulling+0x4a0>)
 80031d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031d8:	f7fd fa0e 	bl	80005f8 <__aeabi_dmul>
 80031dc:	4602      	mov	r2, r0
 80031de:	460b      	mov	r3, r1
 80031e0:	4690      	mov	r8, r2
 80031e2:	4699      	mov	r9, r3
 80031e4:	4b33      	ldr	r3, [pc, #204]	; (80032b4 <SimulatePulling+0x4b4>)
 80031e6:	edd3 7a00 	vldr	s15, [r3]
 80031ea:	ed9f 7a30 	vldr	s14, [pc, #192]	; 80032ac <SimulatePulling+0x4ac>
 80031ee:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80031f2:	ee17 0a90 	vmov	r0, s15
 80031f6:	f7fd f9a7 	bl	8000548 <__aeabi_f2d>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	4640      	mov	r0, r8
 8003200:	4649      	mov	r1, r9
 8003202:	f7fd f9f9 	bl	80005f8 <__aeabi_dmul>
 8003206:	4602      	mov	r2, r0
 8003208:	460b      	mov	r3, r1
 800320a:	4610      	mov	r0, r2
 800320c:	4619      	mov	r1, r3
 800320e:	f04f 0200 	mov.w	r2, #0
 8003212:	4b34      	ldr	r3, [pc, #208]	; (80032e4 <SimulatePulling+0x4e4>)
 8003214:	f7fd f9f0 	bl	80005f8 <__aeabi_dmul>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4690      	mov	r8, r2
 800321e:	4699      	mov	r9, r3
 8003220:	4b28      	ldr	r3, [pc, #160]	; (80032c4 <SimulatePulling+0x4c4>)
 8003222:	681b      	ldr	r3, [r3, #0]
 8003224:	4618      	mov	r0, r3
 8003226:	f7fd f98f 	bl	8000548 <__aeabi_f2d>
 800322a:	4602      	mov	r2, r0
 800322c:	460b      	mov	r3, r1
 800322e:	4640      	mov	r0, r8
 8003230:	4649      	mov	r1, r9
 8003232:	f7fd fb0b 	bl	800084c <__aeabi_ddiv>
 8003236:	4602      	mov	r2, r0
 8003238:	460b      	mov	r3, r1
 800323a:	4620      	mov	r0, r4
 800323c:	4629      	mov	r1, r5
 800323e:	f7fd f825 	bl	800028c <__adddf3>
 8003242:	4602      	mov	r2, r0
 8003244:	460b      	mov	r3, r1
 8003246:	4610      	mov	r0, r2
 8003248:	4619      	mov	r1, r3
 800324a:	f7fd fccd 	bl	8000be8 <__aeabi_d2f>
 800324e:	4603      	mov	r3, r0
 8003250:	4a22      	ldr	r2, [pc, #136]	; (80032dc <SimulatePulling+0x4dc>)
 8003252:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 8003254:	4b21      	ldr	r3, [pc, #132]	; (80032dc <SimulatePulling+0x4dc>)
 8003256:	edd3 7a00 	vldr	s15, [r3]
 800325a:	eef5 7a40 	vcmp.f32	s15, #0.0
 800325e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003262:	d011      	beq.n	8003288 <SimulatePulling+0x488>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003264:	4b20      	ldr	r3, [pc, #128]	; (80032e8 <SimulatePulling+0x4e8>)
 8003266:	781b      	ldrb	r3, [r3, #0]
 8003268:	4a1c      	ldr	r2, [pc, #112]	; (80032dc <SimulatePulling+0x4dc>)
 800326a:	edd2 7a00 	vldr	s15, [r2]
 800326e:	eeb0 0a67 	vmov.f32	s0, s15
 8003272:	4618      	mov	r0, r3
 8003274:	f7fe fc20 	bl	8001ab8 <CalculateTimer3Period>
 8003278:	4603      	mov	r3, r0
 800327a:	b29a      	uxth	r2, r3
 800327c:	4b1b      	ldr	r3, [pc, #108]	; (80032ec <SimulatePulling+0x4ec>)
 800327e:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003280:	4b0d      	ldr	r3, [pc, #52]	; (80032b8 <SimulatePulling+0x4b8>)
 8003282:	2201      	movs	r2, #1
 8003284:	701a      	strb	r2, [r3, #0]
 8003286:	e002      	b.n	800328e <SimulatePulling+0x48e>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8003288:	4b0b      	ldr	r3, [pc, #44]	; (80032b8 <SimulatePulling+0x4b8>)
 800328a:	2200      	movs	r2, #0
 800328c:	701a      	strb	r2, [r3, #0]
			}
			return false;
 800328e:	2300      	movs	r3, #0
 8003290:	e24c      	b.n	800372c <SimulatePulling+0x92c>
 8003292:	bf00      	nop
 8003294:	f3af 8000 	nop.w
 8003298:	51eb851f 	.word	0x51eb851f
 800329c:	40191eb8 	.word	0x40191eb8
 80032a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80032a4:	3f50624d 	.word	0x3f50624d
 80032a8:	20000444 	.word	0x20000444
 80032ac:	c11ccccd 	.word	0xc11ccccd
 80032b0:	20000488 	.word	0x20000488
 80032b4:	20000010 	.word	0x20000010
 80032b8:	20000436 	.word	0x20000436
 80032bc:	2000000a 	.word	0x2000000a
 80032c0:	2000049c 	.word	0x2000049c
 80032c4:	20000464 	.word	0x20000464
 80032c8:	200004b4 	.word	0x200004b4
 80032cc:	200004b0 	.word	0x200004b0
 80032d0:	2000044c 	.word	0x2000044c
 80032d4:	20000445 	.word	0x20000445
 80032d8:	20000541 	.word	0x20000541
 80032dc:	20000518 	.word	0x20000518
 80032e0:	20000468 	.word	0x20000468
 80032e4:	40240000 	.word	0x40240000
 80032e8:	20000003 	.word	0x20000003
 80032ec:	20000454 	.word	0x20000454
		}

		if (PullStep4) //
 80032f0:	4ba9      	ldr	r3, [pc, #676]	; (8003598 <SimulatePulling+0x798>)
 80032f2:	781b      	ldrb	r3, [r3, #0]
 80032f4:	2b00      	cmp	r3, #0
 80032f6:	f000 80bf 	beq.w	8003478 <SimulatePulling+0x678>
		{
			if (IsReachTargetPosition) // Switch to Step 5
 80032fa:	4ba8      	ldr	r3, [pc, #672]	; (800359c <SimulatePulling+0x79c>)
 80032fc:	781b      	ldrb	r3, [r3, #0]
 80032fe:	b2db      	uxtb	r3, r3
 8003300:	2b00      	cmp	r3, #0
 8003302:	d03b      	beq.n	800337c <SimulatePulling+0x57c>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003304:	4ba6      	ldr	r3, [pc, #664]	; (80035a0 <SimulatePulling+0x7a0>)
 8003306:	2200      	movs	r2, #0
 8003308:	701a      	strb	r2, [r3, #0]
				PullStep4 = false;
 800330a:	4ba3      	ldr	r3, [pc, #652]	; (8003598 <SimulatePulling+0x798>)
 800330c:	2200      	movs	r2, #0
 800330e:	701a      	strb	r2, [r3, #0]
				PullStep5 = true;
 8003310:	4ba4      	ldr	r3, [pc, #656]	; (80035a4 <SimulatePulling+0x7a4>)
 8003312:	2201      	movs	r2, #1
 8003314:	701a      	strb	r2, [r3, #0]

				TargetPosition += ((int)(EncoderResolution*PullingPoint4/(2*3.14*DrumRadius)));
 8003316:	4ba4      	ldr	r3, [pc, #656]	; (80035a8 <SimulatePulling+0x7a8>)
 8003318:	881b      	ldrh	r3, [r3, #0]
 800331a:	ee07 3a90 	vmov	s15, r3
 800331e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003322:	4ba2      	ldr	r3, [pc, #648]	; (80035ac <SimulatePulling+0x7ac>)
 8003324:	edd3 7a00 	vldr	s15, [r3]
 8003328:	ee67 7a27 	vmul.f32	s15, s14, s15
 800332c:	ee17 0a90 	vmov	r0, s15
 8003330:	f7fd f90a 	bl	8000548 <__aeabi_f2d>
 8003334:	4604      	mov	r4, r0
 8003336:	460d      	mov	r5, r1
 8003338:	4b9d      	ldr	r3, [pc, #628]	; (80035b0 <SimulatePulling+0x7b0>)
 800333a:	681b      	ldr	r3, [r3, #0]
 800333c:	4618      	mov	r0, r3
 800333e:	f7fd f903 	bl	8000548 <__aeabi_f2d>
 8003342:	a391      	add	r3, pc, #580	; (adr r3, 8003588 <SimulatePulling+0x788>)
 8003344:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003348:	f7fd f956 	bl	80005f8 <__aeabi_dmul>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4620      	mov	r0, r4
 8003352:	4629      	mov	r1, r5
 8003354:	f7fd fa7a 	bl	800084c <__aeabi_ddiv>
 8003358:	4602      	mov	r2, r0
 800335a:	460b      	mov	r3, r1
 800335c:	4610      	mov	r0, r2
 800335e:	4619      	mov	r1, r3
 8003360:	f7fd fbfa 	bl	8000b58 <__aeabi_d2iz>
 8003364:	4602      	mov	r2, r0
 8003366:	4b93      	ldr	r3, [pc, #588]	; (80035b4 <SimulatePulling+0x7b4>)
 8003368:	681b      	ldr	r3, [r3, #0]
 800336a:	4413      	add	r3, r2
 800336c:	4a91      	ldr	r2, [pc, #580]	; (80035b4 <SimulatePulling+0x7b4>)
 800336e:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8003370:	4b91      	ldr	r3, [pc, #580]	; (80035b8 <SimulatePulling+0x7b8>)
 8003372:	2201      	movs	r2, #1
 8003374:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8003376:	4b89      	ldr	r3, [pc, #548]	; (800359c <SimulatePulling+0x79c>)
 8003378:	2200      	movs	r2, #0
 800337a:	701a      	strb	r2, [r3, #0]
			}

			AccRef = GravityConst + PullingAcc3;
 800337c:	ed9f 7a8f 	vldr	s14, [pc, #572]	; 80035bc <SimulatePulling+0x7bc>
 8003380:	4b8f      	ldr	r3, [pc, #572]	; (80035c0 <SimulatePulling+0x7c0>)
 8003382:	edd3 7a00 	vldr	s15, [r3]
 8003386:	ee77 7a27 	vadd.f32	s15, s14, s15
 800338a:	4b8e      	ldr	r3, [pc, #568]	; (80035c4 <SimulatePulling+0x7c4>)
 800338c:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef-GravityConst)*10/DrumRadius; //
 8003390:	4b8d      	ldr	r3, [pc, #564]	; (80035c8 <SimulatePulling+0x7c8>)
 8003392:	681b      	ldr	r3, [r3, #0]
 8003394:	4618      	mov	r0, r3
 8003396:	f7fd f8d7 	bl	8000548 <__aeabi_f2d>
 800339a:	4604      	mov	r4, r0
 800339c:	460d      	mov	r5, r1
 800339e:	4b8b      	ldr	r3, [pc, #556]	; (80035cc <SimulatePulling+0x7cc>)
 80033a0:	781b      	ldrb	r3, [r3, #0]
 80033a2:	4618      	mov	r0, r3
 80033a4:	f7fd f8be 	bl	8000524 <__aeabi_i2d>
 80033a8:	a379      	add	r3, pc, #484	; (adr r3, 8003590 <SimulatePulling+0x790>)
 80033aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033ae:	f7fd f923 	bl	80005f8 <__aeabi_dmul>
 80033b2:	4602      	mov	r2, r0
 80033b4:	460b      	mov	r3, r1
 80033b6:	4690      	mov	r8, r2
 80033b8:	4699      	mov	r9, r3
 80033ba:	4b82      	ldr	r3, [pc, #520]	; (80035c4 <SimulatePulling+0x7c4>)
 80033bc:	edd3 7a00 	vldr	s15, [r3]
 80033c0:	ed9f 7a7e 	vldr	s14, [pc, #504]	; 80035bc <SimulatePulling+0x7bc>
 80033c4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80033c8:	ee17 0a90 	vmov	r0, s15
 80033cc:	f7fd f8bc 	bl	8000548 <__aeabi_f2d>
 80033d0:	4602      	mov	r2, r0
 80033d2:	460b      	mov	r3, r1
 80033d4:	4640      	mov	r0, r8
 80033d6:	4649      	mov	r1, r9
 80033d8:	f7fd f90e 	bl	80005f8 <__aeabi_dmul>
 80033dc:	4602      	mov	r2, r0
 80033de:	460b      	mov	r3, r1
 80033e0:	4610      	mov	r0, r2
 80033e2:	4619      	mov	r1, r3
 80033e4:	f04f 0200 	mov.w	r2, #0
 80033e8:	4b79      	ldr	r3, [pc, #484]	; (80035d0 <SimulatePulling+0x7d0>)
 80033ea:	f7fd f905 	bl	80005f8 <__aeabi_dmul>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	4690      	mov	r8, r2
 80033f4:	4699      	mov	r9, r3
 80033f6:	4b6e      	ldr	r3, [pc, #440]	; (80035b0 <SimulatePulling+0x7b0>)
 80033f8:	681b      	ldr	r3, [r3, #0]
 80033fa:	4618      	mov	r0, r3
 80033fc:	f7fd f8a4 	bl	8000548 <__aeabi_f2d>
 8003400:	4602      	mov	r2, r0
 8003402:	460b      	mov	r3, r1
 8003404:	4640      	mov	r0, r8
 8003406:	4649      	mov	r1, r9
 8003408:	f7fd fa20 	bl	800084c <__aeabi_ddiv>
 800340c:	4602      	mov	r2, r0
 800340e:	460b      	mov	r3, r1
 8003410:	4620      	mov	r0, r4
 8003412:	4629      	mov	r1, r5
 8003414:	f7fc ff3a 	bl	800028c <__adddf3>
 8003418:	4602      	mov	r2, r0
 800341a:	460b      	mov	r3, r1
 800341c:	4610      	mov	r0, r2
 800341e:	4619      	mov	r1, r3
 8003420:	f7fd fbe2 	bl	8000be8 <__aeabi_d2f>
 8003424:	4603      	mov	r3, r0
 8003426:	4a68      	ldr	r2, [pc, #416]	; (80035c8 <SimulatePulling+0x7c8>)
 8003428:	6013      	str	r3, [r2, #0]
			if (SpeedCmd >= 0)
 800342a:	4b67      	ldr	r3, [pc, #412]	; (80035c8 <SimulatePulling+0x7c8>)
 800342c:	edd3 7a00 	vldr	s15, [r3]
 8003430:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003434:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003438:	db03      	blt.n	8003442 <SimulatePulling+0x642>
				SpeedCmd = 0;
 800343a:	4b63      	ldr	r3, [pc, #396]	; (80035c8 <SimulatePulling+0x7c8>)
 800343c:	f04f 0200 	mov.w	r2, #0
 8003440:	601a      	str	r2, [r3, #0]

//			InnerObjRefSpeed += SampleTime*0.001*(PullingAcc5)*10/DrumRadius;
//			if (InnerObjRefSpeed >= 0)
//				InnerObjRefSpeed = 0;

			if (SpeedCmd != 0)
 8003442:	4b61      	ldr	r3, [pc, #388]	; (80035c8 <SimulatePulling+0x7c8>)
 8003444:	edd3 7a00 	vldr	s15, [r3]
 8003448:	eef5 7a40 	vcmp.f32	s15, #0.0
 800344c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003450:	d010      	beq.n	8003474 <SimulatePulling+0x674>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003452:	4b60      	ldr	r3, [pc, #384]	; (80035d4 <SimulatePulling+0x7d4>)
 8003454:	781b      	ldrb	r3, [r3, #0]
 8003456:	4a5c      	ldr	r2, [pc, #368]	; (80035c8 <SimulatePulling+0x7c8>)
 8003458:	edd2 7a00 	vldr	s15, [r2]
 800345c:	eeb0 0a67 	vmov.f32	s0, s15
 8003460:	4618      	mov	r0, r3
 8003462:	f7fe fb29 	bl	8001ab8 <CalculateTimer3Period>
 8003466:	4603      	mov	r3, r0
 8003468:	b29a      	uxth	r2, r3
 800346a:	4b5b      	ldr	r3, [pc, #364]	; (80035d8 <SimulatePulling+0x7d8>)
 800346c:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 800346e:	4b4c      	ldr	r3, [pc, #304]	; (80035a0 <SimulatePulling+0x7a0>)
 8003470:	2201      	movs	r2, #1
 8003472:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003474:	2300      	movs	r3, #0
 8003476:	e159      	b.n	800372c <SimulatePulling+0x92c>
		}

		if(PullStep5) // catch inner object speed
 8003478:	4b4a      	ldr	r3, [pc, #296]	; (80035a4 <SimulatePulling+0x7a4>)
 800347a:	781b      	ldrb	r3, [r3, #0]
 800347c:	2b00      	cmp	r3, #0
 800347e:	f000 80b1 	beq.w	80035e4 <SimulatePulling+0x7e4>
			//				PulseGenerationFlag = false; // Disable Pulse out
			//				PullStep4 = false;
			//				PullStep5 = true;
			//			}
						//AccRef = GravityConst - PullingAcc4;
			if (IsReachTargetPosition) // Switch to Step 5
 8003482:	4b46      	ldr	r3, [pc, #280]	; (800359c <SimulatePulling+0x79c>)
 8003484:	781b      	ldrb	r3, [r3, #0]
 8003486:	b2db      	uxtb	r3, r3
 8003488:	2b00      	cmp	r3, #0
 800348a:	d00e      	beq.n	80034aa <SimulatePulling+0x6aa>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 800348c:	4b44      	ldr	r3, [pc, #272]	; (80035a0 <SimulatePulling+0x7a0>)
 800348e:	2200      	movs	r2, #0
 8003490:	701a      	strb	r2, [r3, #0]
				PullStep5 = false;
 8003492:	4b44      	ldr	r3, [pc, #272]	; (80035a4 <SimulatePulling+0x7a4>)
 8003494:	2200      	movs	r2, #0
 8003496:	701a      	strb	r2, [r3, #0]
				PullStep6 = true;
 8003498:	4b50      	ldr	r3, [pc, #320]	; (80035dc <SimulatePulling+0x7dc>)
 800349a:	2201      	movs	r2, #1
 800349c:	701a      	strb	r2, [r3, #0]

				IsPulseCheck = false; // OFF pulse checking
 800349e:	4b46      	ldr	r3, [pc, #280]	; (80035b8 <SimulatePulling+0x7b8>)
 80034a0:	2200      	movs	r2, #0
 80034a2:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 80034a4:	4b3d      	ldr	r3, [pc, #244]	; (800359c <SimulatePulling+0x79c>)
 80034a6:	2200      	movs	r2, #0
 80034a8:	701a      	strb	r2, [r3, #0]
			}
			AccRef = GravityConst + PullingAcc4;
 80034aa:	ed9f 7a44 	vldr	s14, [pc, #272]	; 80035bc <SimulatePulling+0x7bc>
 80034ae:	4b4c      	ldr	r3, [pc, #304]	; (80035e0 <SimulatePulling+0x7e0>)
 80034b0:	edd3 7a00 	vldr	s15, [r3]
 80034b4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80034b8:	4b42      	ldr	r3, [pc, #264]	; (80035c4 <SimulatePulling+0x7c4>)
 80034ba:	edc3 7a00 	vstr	s15, [r3]


						SpeedCmd += SampleTime*0.001*(PullingAcc4)*10/DrumRadius; //
 80034be:	4b42      	ldr	r3, [pc, #264]	; (80035c8 <SimulatePulling+0x7c8>)
 80034c0:	681b      	ldr	r3, [r3, #0]
 80034c2:	4618      	mov	r0, r3
 80034c4:	f7fd f840 	bl	8000548 <__aeabi_f2d>
 80034c8:	4604      	mov	r4, r0
 80034ca:	460d      	mov	r5, r1
 80034cc:	4b3f      	ldr	r3, [pc, #252]	; (80035cc <SimulatePulling+0x7cc>)
 80034ce:	781b      	ldrb	r3, [r3, #0]
 80034d0:	4618      	mov	r0, r3
 80034d2:	f7fd f827 	bl	8000524 <__aeabi_i2d>
 80034d6:	a32e      	add	r3, pc, #184	; (adr r3, 8003590 <SimulatePulling+0x790>)
 80034d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034dc:	f7fd f88c 	bl	80005f8 <__aeabi_dmul>
 80034e0:	4602      	mov	r2, r0
 80034e2:	460b      	mov	r3, r1
 80034e4:	4690      	mov	r8, r2
 80034e6:	4699      	mov	r9, r3
 80034e8:	4b3d      	ldr	r3, [pc, #244]	; (80035e0 <SimulatePulling+0x7e0>)
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	4618      	mov	r0, r3
 80034ee:	f7fd f82b 	bl	8000548 <__aeabi_f2d>
 80034f2:	4602      	mov	r2, r0
 80034f4:	460b      	mov	r3, r1
 80034f6:	4640      	mov	r0, r8
 80034f8:	4649      	mov	r1, r9
 80034fa:	f7fd f87d 	bl	80005f8 <__aeabi_dmul>
 80034fe:	4602      	mov	r2, r0
 8003500:	460b      	mov	r3, r1
 8003502:	4610      	mov	r0, r2
 8003504:	4619      	mov	r1, r3
 8003506:	f04f 0200 	mov.w	r2, #0
 800350a:	4b31      	ldr	r3, [pc, #196]	; (80035d0 <SimulatePulling+0x7d0>)
 800350c:	f7fd f874 	bl	80005f8 <__aeabi_dmul>
 8003510:	4602      	mov	r2, r0
 8003512:	460b      	mov	r3, r1
 8003514:	4690      	mov	r8, r2
 8003516:	4699      	mov	r9, r3
 8003518:	4b25      	ldr	r3, [pc, #148]	; (80035b0 <SimulatePulling+0x7b0>)
 800351a:	681b      	ldr	r3, [r3, #0]
 800351c:	4618      	mov	r0, r3
 800351e:	f7fd f813 	bl	8000548 <__aeabi_f2d>
 8003522:	4602      	mov	r2, r0
 8003524:	460b      	mov	r3, r1
 8003526:	4640      	mov	r0, r8
 8003528:	4649      	mov	r1, r9
 800352a:	f7fd f98f 	bl	800084c <__aeabi_ddiv>
 800352e:	4602      	mov	r2, r0
 8003530:	460b      	mov	r3, r1
 8003532:	4620      	mov	r0, r4
 8003534:	4629      	mov	r1, r5
 8003536:	f7fc fea9 	bl	800028c <__adddf3>
 800353a:	4602      	mov	r2, r0
 800353c:	460b      	mov	r3, r1
 800353e:	4610      	mov	r0, r2
 8003540:	4619      	mov	r1, r3
 8003542:	f7fd fb51 	bl	8000be8 <__aeabi_d2f>
 8003546:	4603      	mov	r3, r0
 8003548:	4a1f      	ldr	r2, [pc, #124]	; (80035c8 <SimulatePulling+0x7c8>)
 800354a:	6013      	str	r3, [r2, #0]
			//			if (InnerObjRefSpeed >= 0)
			//				InnerObjRefSpeed = 0;
			//			if (SpeedCmd <=  InnerObjRefSpeed)
			//				SpeedCmd = InnerObjRefSpeed;

						if (SpeedCmd != 0)
 800354c:	4b1e      	ldr	r3, [pc, #120]	; (80035c8 <SimulatePulling+0x7c8>)
 800354e:	edd3 7a00 	vldr	s15, [r3]
 8003552:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003556:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800355a:	d010      	beq.n	800357e <SimulatePulling+0x77e>
						{
							// Calculate Timer3CountPeriod to generate pulse
							Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800355c:	4b1d      	ldr	r3, [pc, #116]	; (80035d4 <SimulatePulling+0x7d4>)
 800355e:	781b      	ldrb	r3, [r3, #0]
 8003560:	4a19      	ldr	r2, [pc, #100]	; (80035c8 <SimulatePulling+0x7c8>)
 8003562:	edd2 7a00 	vldr	s15, [r2]
 8003566:	eeb0 0a67 	vmov.f32	s0, s15
 800356a:	4618      	mov	r0, r3
 800356c:	f7fe faa4 	bl	8001ab8 <CalculateTimer3Period>
 8003570:	4603      	mov	r3, r0
 8003572:	b29a      	uxth	r2, r3
 8003574:	4b18      	ldr	r3, [pc, #96]	; (80035d8 <SimulatePulling+0x7d8>)
 8003576:	801a      	strh	r2, [r3, #0]
							PulseGenerationFlag = true;
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <SimulatePulling+0x7a0>)
 800357a:	2201      	movs	r2, #1
 800357c:	701a      	strb	r2, [r3, #0]
						}
						return false;
 800357e:	2300      	movs	r3, #0
 8003580:	e0d4      	b.n	800372c <SimulatePulling+0x92c>
 8003582:	bf00      	nop
 8003584:	f3af 8000 	nop.w
 8003588:	51eb851f 	.word	0x51eb851f
 800358c:	40191eb8 	.word	0x40191eb8
 8003590:	d2f1a9fc 	.word	0xd2f1a9fc
 8003594:	3f50624d 	.word	0x3f50624d
 8003598:	20000445 	.word	0x20000445
 800359c:	20000438 	.word	0x20000438
 80035a0:	20000436 	.word	0x20000436
 80035a4:	20000446 	.word	0x20000446
 80035a8:	2000000a 	.word	0x2000000a
 80035ac:	200004a0 	.word	0x200004a0
 80035b0:	20000464 	.word	0x20000464
 80035b4:	200004b0 	.word	0x200004b0
 80035b8:	2000044c 	.word	0x2000044c
 80035bc:	c11ccccd 	.word	0xc11ccccd
 80035c0:	20000488 	.word	0x20000488
 80035c4:	20000010 	.word	0x20000010
 80035c8:	20000518 	.word	0x20000518
 80035cc:	20000468 	.word	0x20000468
 80035d0:	40240000 	.word	0x40240000
 80035d4:	20000003 	.word	0x20000003
 80035d8:	20000454 	.word	0x20000454
 80035dc:	20000447 	.word	0x20000447
 80035e0:	2000048c 	.word	0x2000048c
		}

		if (PullStep6) //Final deceleration
 80035e4:	4b56      	ldr	r3, [pc, #344]	; (8003740 <SimulatePulling+0x940>)
 80035e6:	781b      	ldrb	r3, [r3, #0]
 80035e8:	2b00      	cmp	r3, #0
 80035ea:	f000 809e 	beq.w	800372a <SimulatePulling+0x92a>
		{
			if(SpeedCmd >= 0) // Finish deceleration
 80035ee:	4b55      	ldr	r3, [pc, #340]	; (8003744 <SimulatePulling+0x944>)
 80035f0:	edd3 7a00 	vldr	s15, [r3]
 80035f4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80035f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80035fc:	db29      	blt.n	8003652 <SimulatePulling+0x852>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 80035fe:	4b52      	ldr	r3, [pc, #328]	; (8003748 <SimulatePulling+0x948>)
 8003600:	2200      	movs	r2, #0
 8003602:	701a      	strb	r2, [r3, #0]
				PullStep6 = false;
 8003604:	4b4e      	ldr	r3, [pc, #312]	; (8003740 <SimulatePulling+0x940>)
 8003606:	2200      	movs	r2, #0
 8003608:	701a      	strb	r2, [r3, #0]
				SpeedCmd = 0;
 800360a:	4b4e      	ldr	r3, [pc, #312]	; (8003744 <SimulatePulling+0x944>)
 800360c:	f04f 0200 	mov.w	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

				TotalPullingPulse = abs(PulseSimuCount);
 8003612:	4b4e      	ldr	r3, [pc, #312]	; (800374c <SimulatePulling+0x94c>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	2b00      	cmp	r3, #0
 8003618:	bfb8      	it	lt
 800361a:	425b      	neglt	r3, r3
 800361c:	461a      	mov	r2, r3
 800361e:	4b4c      	ldr	r3, [pc, #304]	; (8003750 <SimulatePulling+0x950>)
 8003620:	601a      	str	r2, [r3, #0]
				PulseSimuCount = 0;
 8003622:	4b4a      	ldr	r3, [pc, #296]	; (800374c <SimulatePulling+0x94c>)
 8003624:	2200      	movs	r2, #0
 8003626:	601a      	str	r2, [r3, #0]
				TargetPosition = 0;
 8003628:	4b4a      	ldr	r3, [pc, #296]	; (8003754 <SimulatePulling+0x954>)
 800362a:	2200      	movs	r2, #0
 800362c:	601a      	str	r2, [r3, #0]
				IsReachTargetPosition = false;
 800362e:	4b4a      	ldr	r3, [pc, #296]	; (8003758 <SimulatePulling+0x958>)
 8003630:	2200      	movs	r2, #0
 8003632:	701a      	strb	r2, [r3, #0]

				CompletePulling = true;
 8003634:	4b49      	ldr	r3, [pc, #292]	; (800375c <SimulatePulling+0x95c>)
 8003636:	2201      	movs	r2, #1
 8003638:	701a      	strb	r2, [r3, #0]

				if(ExperimentMode == 3) // Simulate pulling and dropping
 800363a:	4b49      	ldr	r3, [pc, #292]	; (8003760 <SimulatePulling+0x960>)
 800363c:	781b      	ldrb	r3, [r3, #0]
 800363e:	2b03      	cmp	r3, #3
 8003640:	d102      	bne.n	8003648 <SimulatePulling+0x848>
				{
					InitializeSimulating(1); // Init Simulate Dropping
 8003642:	2001      	movs	r0, #1
 8003644:	f7fe fd24 	bl	8002090 <InitializeSimulating>
				}
				AccRef = GravityConst;
 8003648:	4a46      	ldr	r2, [pc, #280]	; (8003764 <SimulatePulling+0x964>)
 800364a:	4b47      	ldr	r3, [pc, #284]	; (8003768 <SimulatePulling+0x968>)
 800364c:	601a      	str	r2, [r3, #0]
				return true;
 800364e:	2301      	movs	r3, #1
 8003650:	e06c      	b.n	800372c <SimulatePulling+0x92c>
			}
			AccRef = GravityConst + PullingAcc5;
 8003652:	ed9f 7a46 	vldr	s14, [pc, #280]	; 800376c <SimulatePulling+0x96c>
 8003656:	4b46      	ldr	r3, [pc, #280]	; (8003770 <SimulatePulling+0x970>)
 8003658:	edd3 7a00 	vldr	s15, [r3]
 800365c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003660:	4b41      	ldr	r3, [pc, #260]	; (8003768 <SimulatePulling+0x968>)
 8003662:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(PullingAcc5)*10/DrumRadius; //
 8003666:	4b37      	ldr	r3, [pc, #220]	; (8003744 <SimulatePulling+0x944>)
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	4618      	mov	r0, r3
 800366c:	f7fc ff6c 	bl	8000548 <__aeabi_f2d>
 8003670:	4604      	mov	r4, r0
 8003672:	460d      	mov	r5, r1
 8003674:	4b3f      	ldr	r3, [pc, #252]	; (8003774 <SimulatePulling+0x974>)
 8003676:	781b      	ldrb	r3, [r3, #0]
 8003678:	4618      	mov	r0, r3
 800367a:	f7fc ff53 	bl	8000524 <__aeabi_i2d>
 800367e:	a32e      	add	r3, pc, #184	; (adr r3, 8003738 <SimulatePulling+0x938>)
 8003680:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003684:	f7fc ffb8 	bl	80005f8 <__aeabi_dmul>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4690      	mov	r8, r2
 800368e:	4699      	mov	r9, r3
 8003690:	4b37      	ldr	r3, [pc, #220]	; (8003770 <SimulatePulling+0x970>)
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	4618      	mov	r0, r3
 8003696:	f7fc ff57 	bl	8000548 <__aeabi_f2d>
 800369a:	4602      	mov	r2, r0
 800369c:	460b      	mov	r3, r1
 800369e:	4640      	mov	r0, r8
 80036a0:	4649      	mov	r1, r9
 80036a2:	f7fc ffa9 	bl	80005f8 <__aeabi_dmul>
 80036a6:	4602      	mov	r2, r0
 80036a8:	460b      	mov	r3, r1
 80036aa:	4610      	mov	r0, r2
 80036ac:	4619      	mov	r1, r3
 80036ae:	f04f 0200 	mov.w	r2, #0
 80036b2:	4b31      	ldr	r3, [pc, #196]	; (8003778 <SimulatePulling+0x978>)
 80036b4:	f7fc ffa0 	bl	80005f8 <__aeabi_dmul>
 80036b8:	4602      	mov	r2, r0
 80036ba:	460b      	mov	r3, r1
 80036bc:	4690      	mov	r8, r2
 80036be:	4699      	mov	r9, r3
 80036c0:	4b2e      	ldr	r3, [pc, #184]	; (800377c <SimulatePulling+0x97c>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	4618      	mov	r0, r3
 80036c6:	f7fc ff3f 	bl	8000548 <__aeabi_f2d>
 80036ca:	4602      	mov	r2, r0
 80036cc:	460b      	mov	r3, r1
 80036ce:	4640      	mov	r0, r8
 80036d0:	4649      	mov	r1, r9
 80036d2:	f7fd f8bb 	bl	800084c <__aeabi_ddiv>
 80036d6:	4602      	mov	r2, r0
 80036d8:	460b      	mov	r3, r1
 80036da:	4620      	mov	r0, r4
 80036dc:	4629      	mov	r1, r5
 80036de:	f7fc fdd5 	bl	800028c <__adddf3>
 80036e2:	4602      	mov	r2, r0
 80036e4:	460b      	mov	r3, r1
 80036e6:	4610      	mov	r0, r2
 80036e8:	4619      	mov	r1, r3
 80036ea:	f7fd fa7d 	bl	8000be8 <__aeabi_d2f>
 80036ee:	4603      	mov	r3, r0
 80036f0:	4a14      	ldr	r2, [pc, #80]	; (8003744 <SimulatePulling+0x944>)
 80036f2:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 80036f4:	4b13      	ldr	r3, [pc, #76]	; (8003744 <SimulatePulling+0x944>)
 80036f6:	edd3 7a00 	vldr	s15, [r3]
 80036fa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80036fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003702:	d010      	beq.n	8003726 <SimulatePulling+0x926>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003704:	4b1e      	ldr	r3, [pc, #120]	; (8003780 <SimulatePulling+0x980>)
 8003706:	781b      	ldrb	r3, [r3, #0]
 8003708:	4a0e      	ldr	r2, [pc, #56]	; (8003744 <SimulatePulling+0x944>)
 800370a:	edd2 7a00 	vldr	s15, [r2]
 800370e:	eeb0 0a67 	vmov.f32	s0, s15
 8003712:	4618      	mov	r0, r3
 8003714:	f7fe f9d0 	bl	8001ab8 <CalculateTimer3Period>
 8003718:	4603      	mov	r3, r0
 800371a:	b29a      	uxth	r2, r3
 800371c:	4b19      	ldr	r3, [pc, #100]	; (8003784 <SimulatePulling+0x984>)
 800371e:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003720:	4b09      	ldr	r3, [pc, #36]	; (8003748 <SimulatePulling+0x948>)
 8003722:	2201      	movs	r2, #1
 8003724:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003726:	2300      	movs	r3, #0
 8003728:	e000      	b.n	800372c <SimulatePulling+0x92c>
		}
	}
	return false;
 800372a:	2300      	movs	r3, #0
}
 800372c:	4618      	mov	r0, r3
 800372e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003732:	bf00      	nop
 8003734:	f3af 8000 	nop.w
 8003738:	d2f1a9fc 	.word	0xd2f1a9fc
 800373c:	3f50624d 	.word	0x3f50624d
 8003740:	20000447 	.word	0x20000447
 8003744:	20000518 	.word	0x20000518
 8003748:	20000436 	.word	0x20000436
 800374c:	200004b4 	.word	0x200004b4
 8003750:	2000045c 	.word	0x2000045c
 8003754:	200004b0 	.word	0x200004b0
 8003758:	20000438 	.word	0x20000438
 800375c:	2000043b 	.word	0x2000043b
 8003760:	20000005 	.word	0x20000005
 8003764:	c11ccccd 	.word	0xc11ccccd
 8003768:	20000010 	.word	0x20000010
 800376c:	c11ccccd 	.word	0xc11ccccd
 8003770:	20000490 	.word	0x20000490
 8003774:	20000468 	.word	0x20000468
 8003778:	40240000 	.word	0x40240000
 800377c:	20000464 	.word	0x20000464
 8003780:	20000003 	.word	0x20000003
 8003784:	20000454 	.word	0x20000454

08003788 <SimulateDropping>:
bool SimulateDropping() // Dropping Program
// return true if finishing, else return false while running
{
 8003788:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800378c:	af00      	add	r7, sp, #0
	if (CompleteDropping)
 800378e:	4bba      	ldr	r3, [pc, #744]	; (8003a78 <SimulateDropping+0x2f0>)
 8003790:	781b      	ldrb	r3, [r3, #0]
 8003792:	2b00      	cmp	r3, #0
 8003794:	d001      	beq.n	800379a <SimulateDropping+0x12>
	{
		return true;
 8003796:	2301      	movs	r3, #1
 8003798:	e2d8      	b.n	8003d4c <SimulateDropping+0x5c4>
	}
	else
	{
		if(DropStep1) // 2nd spd curve Accelerating
 800379a:	4bb8      	ldr	r3, [pc, #736]	; (8003a7c <SimulateDropping+0x2f4>)
 800379c:	781b      	ldrb	r3, [r3, #0]
 800379e:	2b00      	cmp	r3, #0
 80037a0:	f000 80d2 	beq.w	8003948 <SimulateDropping+0x1c0>
		{
			if (AccRef >= GravityConst+DroppingAccel) // Switch to step 2
 80037a4:	ed9f 7ab6 	vldr	s14, [pc, #728]	; 8003a80 <SimulateDropping+0x2f8>
 80037a8:	4bb6      	ldr	r3, [pc, #728]	; (8003a84 <SimulateDropping+0x2fc>)
 80037aa:	edd3 7a00 	vldr	s15, [r3]
 80037ae:	ee37 7a27 	vadd.f32	s14, s14, s15
 80037b2:	4bb5      	ldr	r3, [pc, #724]	; (8003a88 <SimulateDropping+0x300>)
 80037b4:	edd3 7a00 	vldr	s15, [r3]
 80037b8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037c0:	d842      	bhi.n	8003848 <SimulateDropping+0xc0>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 80037c2:	4bb2      	ldr	r3, [pc, #712]	; (8003a8c <SimulateDropping+0x304>)
 80037c4:	2200      	movs	r2, #0
 80037c6:	701a      	strb	r2, [r3, #0]
				TargetPosition = (int)(PulseSimuCount + DroppingAccelDistance*EncoderResolution/(2*3.14*DrumRadius));
 80037c8:	4bb1      	ldr	r3, [pc, #708]	; (8003a90 <SimulateDropping+0x308>)
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4618      	mov	r0, r3
 80037ce:	f7fc fea9 	bl	8000524 <__aeabi_i2d>
 80037d2:	4604      	mov	r4, r0
 80037d4:	460d      	mov	r5, r1
 80037d6:	4baf      	ldr	r3, [pc, #700]	; (8003a94 <SimulateDropping+0x30c>)
 80037d8:	881b      	ldrh	r3, [r3, #0]
 80037da:	ee07 3a90 	vmov	s15, r3
 80037de:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80037e2:	4bad      	ldr	r3, [pc, #692]	; (8003a98 <SimulateDropping+0x310>)
 80037e4:	edd3 7a00 	vldr	s15, [r3]
 80037e8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80037ec:	ee17 0a90 	vmov	r0, s15
 80037f0:	f7fc feaa 	bl	8000548 <__aeabi_f2d>
 80037f4:	4680      	mov	r8, r0
 80037f6:	4689      	mov	r9, r1
 80037f8:	4ba8      	ldr	r3, [pc, #672]	; (8003a9c <SimulateDropping+0x314>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fc fea3 	bl	8000548 <__aeabi_f2d>
 8003802:	a399      	add	r3, pc, #612	; (adr r3, 8003a68 <SimulateDropping+0x2e0>)
 8003804:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003808:	f7fc fef6 	bl	80005f8 <__aeabi_dmul>
 800380c:	4602      	mov	r2, r0
 800380e:	460b      	mov	r3, r1
 8003810:	4640      	mov	r0, r8
 8003812:	4649      	mov	r1, r9
 8003814:	f7fd f81a 	bl	800084c <__aeabi_ddiv>
 8003818:	4602      	mov	r2, r0
 800381a:	460b      	mov	r3, r1
 800381c:	4620      	mov	r0, r4
 800381e:	4629      	mov	r1, r5
 8003820:	f7fc fd34 	bl	800028c <__adddf3>
 8003824:	4602      	mov	r2, r0
 8003826:	460b      	mov	r3, r1
 8003828:	4610      	mov	r0, r2
 800382a:	4619      	mov	r1, r3
 800382c:	f7fd f994 	bl	8000b58 <__aeabi_d2iz>
 8003830:	4603      	mov	r3, r0
 8003832:	4a9b      	ldr	r2, [pc, #620]	; (8003aa0 <SimulateDropping+0x318>)
 8003834:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; //ON pulse checking
 8003836:	4b9b      	ldr	r3, [pc, #620]	; (8003aa4 <SimulateDropping+0x31c>)
 8003838:	2201      	movs	r2, #1
 800383a:	701a      	strb	r2, [r3, #0]

				DropStep1 = false;
 800383c:	4b8f      	ldr	r3, [pc, #572]	; (8003a7c <SimulateDropping+0x2f4>)
 800383e:	2200      	movs	r2, #0
 8003840:	701a      	strb	r2, [r3, #0]
				DropStep2 = true; // Switch to Step 2
 8003842:	4b99      	ldr	r3, [pc, #612]	; (8003aa8 <SimulateDropping+0x320>)
 8003844:	2201      	movs	r2, #1
 8003846:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,DropAccelSlope,GravityConst+DroppingAccel);
 8003848:	4b98      	ldr	r3, [pc, #608]	; (8003aac <SimulateDropping+0x324>)
 800384a:	781b      	ldrb	r3, [r3, #0]
 800384c:	ee07 3a90 	vmov	s15, r3
 8003850:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003854:	eddf 6a8a 	vldr	s13, [pc, #552]	; 8003a80 <SimulateDropping+0x2f8>
 8003858:	4b8a      	ldr	r3, [pc, #552]	; (8003a84 <SimulateDropping+0x2fc>)
 800385a:	edd3 7a00 	vldr	s15, [r3]
 800385e:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003862:	eef0 0a67 	vmov.f32	s1, s15
 8003866:	eeb0 0a47 	vmov.f32	s0, s14
 800386a:	4887      	ldr	r0, [pc, #540]	; (8003a88 <SimulateDropping+0x300>)
 800386c:	f7fe f860 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003870:	4b8f      	ldr	r3, [pc, #572]	; (8003ab0 <SimulateDropping+0x328>)
 8003872:	681b      	ldr	r3, [r3, #0]
 8003874:	4618      	mov	r0, r3
 8003876:	f7fc fe67 	bl	8000548 <__aeabi_f2d>
 800387a:	4604      	mov	r4, r0
 800387c:	460d      	mov	r5, r1
 800387e:	4b8d      	ldr	r3, [pc, #564]	; (8003ab4 <SimulateDropping+0x32c>)
 8003880:	781b      	ldrb	r3, [r3, #0]
 8003882:	4618      	mov	r0, r3
 8003884:	f7fc fe4e 	bl	8000524 <__aeabi_i2d>
 8003888:	a379      	add	r3, pc, #484	; (adr r3, 8003a70 <SimulateDropping+0x2e8>)
 800388a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800388e:	f7fc feb3 	bl	80005f8 <__aeabi_dmul>
 8003892:	4602      	mov	r2, r0
 8003894:	460b      	mov	r3, r1
 8003896:	4690      	mov	r8, r2
 8003898:	4699      	mov	r9, r3
 800389a:	4b7b      	ldr	r3, [pc, #492]	; (8003a88 <SimulateDropping+0x300>)
 800389c:	edd3 7a00 	vldr	s15, [r3]
 80038a0:	ed9f 7a77 	vldr	s14, [pc, #476]	; 8003a80 <SimulateDropping+0x2f8>
 80038a4:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80038a8:	ee17 0a90 	vmov	r0, s15
 80038ac:	f7fc fe4c 	bl	8000548 <__aeabi_f2d>
 80038b0:	4602      	mov	r2, r0
 80038b2:	460b      	mov	r3, r1
 80038b4:	4640      	mov	r0, r8
 80038b6:	4649      	mov	r1, r9
 80038b8:	f7fc fe9e 	bl	80005f8 <__aeabi_dmul>
 80038bc:	4602      	mov	r2, r0
 80038be:	460b      	mov	r3, r1
 80038c0:	4610      	mov	r0, r2
 80038c2:	4619      	mov	r1, r3
 80038c4:	f04f 0200 	mov.w	r2, #0
 80038c8:	4b7b      	ldr	r3, [pc, #492]	; (8003ab8 <SimulateDropping+0x330>)
 80038ca:	f7fc fe95 	bl	80005f8 <__aeabi_dmul>
 80038ce:	4602      	mov	r2, r0
 80038d0:	460b      	mov	r3, r1
 80038d2:	4690      	mov	r8, r2
 80038d4:	4699      	mov	r9, r3
 80038d6:	4b71      	ldr	r3, [pc, #452]	; (8003a9c <SimulateDropping+0x314>)
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	4618      	mov	r0, r3
 80038dc:	f7fc fe34 	bl	8000548 <__aeabi_f2d>
 80038e0:	4602      	mov	r2, r0
 80038e2:	460b      	mov	r3, r1
 80038e4:	4640      	mov	r0, r8
 80038e6:	4649      	mov	r1, r9
 80038e8:	f7fc ffb0 	bl	800084c <__aeabi_ddiv>
 80038ec:	4602      	mov	r2, r0
 80038ee:	460b      	mov	r3, r1
 80038f0:	4620      	mov	r0, r4
 80038f2:	4629      	mov	r1, r5
 80038f4:	f7fc fcca 	bl	800028c <__adddf3>
 80038f8:	4602      	mov	r2, r0
 80038fa:	460b      	mov	r3, r1
 80038fc:	4610      	mov	r0, r2
 80038fe:	4619      	mov	r1, r3
 8003900:	f7fd f972 	bl	8000be8 <__aeabi_d2f>
 8003904:	4603      	mov	r3, r0
 8003906:	4a6a      	ldr	r2, [pc, #424]	; (8003ab0 <SimulateDropping+0x328>)
 8003908:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 800390a:	4b69      	ldr	r3, [pc, #420]	; (8003ab0 <SimulateDropping+0x328>)
 800390c:	edd3 7a00 	vldr	s15, [r3]
 8003910:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003914:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003918:	d011      	beq.n	800393e <SimulateDropping+0x1b6>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800391a:	4b68      	ldr	r3, [pc, #416]	; (8003abc <SimulateDropping+0x334>)
 800391c:	781b      	ldrb	r3, [r3, #0]
 800391e:	4a64      	ldr	r2, [pc, #400]	; (8003ab0 <SimulateDropping+0x328>)
 8003920:	edd2 7a00 	vldr	s15, [r2]
 8003924:	eeb0 0a67 	vmov.f32	s0, s15
 8003928:	4618      	mov	r0, r3
 800392a:	f7fe f8c5 	bl	8001ab8 <CalculateTimer3Period>
 800392e:	4603      	mov	r3, r0
 8003930:	b29a      	uxth	r2, r3
 8003932:	4b63      	ldr	r3, [pc, #396]	; (8003ac0 <SimulateDropping+0x338>)
 8003934:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003936:	4b55      	ldr	r3, [pc, #340]	; (8003a8c <SimulateDropping+0x304>)
 8003938:	2201      	movs	r2, #1
 800393a:	701a      	strb	r2, [r3, #0]
 800393c:	e002      	b.n	8003944 <SimulateDropping+0x1bc>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 800393e:	4b53      	ldr	r3, [pc, #332]	; (8003a8c <SimulateDropping+0x304>)
 8003940:	2200      	movs	r2, #0
 8003942:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003944:	2300      	movs	r3, #0
 8003946:	e201      	b.n	8003d4c <SimulateDropping+0x5c4>
		}
		if (DropStep2)
 8003948:	4b57      	ldr	r3, [pc, #348]	; (8003aa8 <SimulateDropping+0x320>)
 800394a:	781b      	ldrb	r3, [r3, #0]
 800394c:	2b00      	cmp	r3, #0
 800394e:	f000 80bd 	beq.w	8003acc <SimulateDropping+0x344>
		{
			if (IsReachTargetPosition) // Switch to Step 2
 8003952:	4b5c      	ldr	r3, [pc, #368]	; (8003ac4 <SimulateDropping+0x33c>)
 8003954:	781b      	ldrb	r3, [r3, #0]
 8003956:	b2db      	uxtb	r3, r3
 8003958:	2b00      	cmp	r3, #0
 800395a:	d00e      	beq.n	800397a <SimulateDropping+0x1f2>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 800395c:	4b4b      	ldr	r3, [pc, #300]	; (8003a8c <SimulateDropping+0x304>)
 800395e:	2200      	movs	r2, #0
 8003960:	701a      	strb	r2, [r3, #0]

				DropStep2 = false;
 8003962:	4b51      	ldr	r3, [pc, #324]	; (8003aa8 <SimulateDropping+0x320>)
 8003964:	2200      	movs	r2, #0
 8003966:	701a      	strb	r2, [r3, #0]
				DropStep3 = true; // Switch to Step 3
 8003968:	4b57      	ldr	r3, [pc, #348]	; (8003ac8 <SimulateDropping+0x340>)
 800396a:	2201      	movs	r2, #1
 800396c:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false; // Off Pulse checking
 800396e:	4b4d      	ldr	r3, [pc, #308]	; (8003aa4 <SimulateDropping+0x31c>)
 8003970:	2200      	movs	r2, #0
 8003972:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8003974:	4b53      	ldr	r3, [pc, #332]	; (8003ac4 <SimulateDropping+0x33c>)
 8003976:	2200      	movs	r2, #0
 8003978:	701a      	strb	r2, [r3, #0]
			}

			AccRef = GravityConst+DroppingAccel;
 800397a:	ed9f 7a41 	vldr	s14, [pc, #260]	; 8003a80 <SimulateDropping+0x2f8>
 800397e:	4b41      	ldr	r3, [pc, #260]	; (8003a84 <SimulateDropping+0x2fc>)
 8003980:	edd3 7a00 	vldr	s15, [r3]
 8003984:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003988:	4b3f      	ldr	r3, [pc, #252]	; (8003a88 <SimulateDropping+0x300>)
 800398a:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 800398e:	4b48      	ldr	r3, [pc, #288]	; (8003ab0 <SimulateDropping+0x328>)
 8003990:	681b      	ldr	r3, [r3, #0]
 8003992:	4618      	mov	r0, r3
 8003994:	f7fc fdd8 	bl	8000548 <__aeabi_f2d>
 8003998:	4604      	mov	r4, r0
 800399a:	460d      	mov	r5, r1
 800399c:	4b45      	ldr	r3, [pc, #276]	; (8003ab4 <SimulateDropping+0x32c>)
 800399e:	781b      	ldrb	r3, [r3, #0]
 80039a0:	4618      	mov	r0, r3
 80039a2:	f7fc fdbf 	bl	8000524 <__aeabi_i2d>
 80039a6:	a332      	add	r3, pc, #200	; (adr r3, 8003a70 <SimulateDropping+0x2e8>)
 80039a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039ac:	f7fc fe24 	bl	80005f8 <__aeabi_dmul>
 80039b0:	4602      	mov	r2, r0
 80039b2:	460b      	mov	r3, r1
 80039b4:	4690      	mov	r8, r2
 80039b6:	4699      	mov	r9, r3
 80039b8:	4b33      	ldr	r3, [pc, #204]	; (8003a88 <SimulateDropping+0x300>)
 80039ba:	edd3 7a00 	vldr	s15, [r3]
 80039be:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003a80 <SimulateDropping+0x2f8>
 80039c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80039c6:	ee17 0a90 	vmov	r0, s15
 80039ca:	f7fc fdbd 	bl	8000548 <__aeabi_f2d>
 80039ce:	4602      	mov	r2, r0
 80039d0:	460b      	mov	r3, r1
 80039d2:	4640      	mov	r0, r8
 80039d4:	4649      	mov	r1, r9
 80039d6:	f7fc fe0f 	bl	80005f8 <__aeabi_dmul>
 80039da:	4602      	mov	r2, r0
 80039dc:	460b      	mov	r3, r1
 80039de:	4610      	mov	r0, r2
 80039e0:	4619      	mov	r1, r3
 80039e2:	f04f 0200 	mov.w	r2, #0
 80039e6:	4b34      	ldr	r3, [pc, #208]	; (8003ab8 <SimulateDropping+0x330>)
 80039e8:	f7fc fe06 	bl	80005f8 <__aeabi_dmul>
 80039ec:	4602      	mov	r2, r0
 80039ee:	460b      	mov	r3, r1
 80039f0:	4690      	mov	r8, r2
 80039f2:	4699      	mov	r9, r3
 80039f4:	4b29      	ldr	r3, [pc, #164]	; (8003a9c <SimulateDropping+0x314>)
 80039f6:	681b      	ldr	r3, [r3, #0]
 80039f8:	4618      	mov	r0, r3
 80039fa:	f7fc fda5 	bl	8000548 <__aeabi_f2d>
 80039fe:	4602      	mov	r2, r0
 8003a00:	460b      	mov	r3, r1
 8003a02:	4640      	mov	r0, r8
 8003a04:	4649      	mov	r1, r9
 8003a06:	f7fc ff21 	bl	800084c <__aeabi_ddiv>
 8003a0a:	4602      	mov	r2, r0
 8003a0c:	460b      	mov	r3, r1
 8003a0e:	4620      	mov	r0, r4
 8003a10:	4629      	mov	r1, r5
 8003a12:	f7fc fc3b 	bl	800028c <__adddf3>
 8003a16:	4602      	mov	r2, r0
 8003a18:	460b      	mov	r3, r1
 8003a1a:	4610      	mov	r0, r2
 8003a1c:	4619      	mov	r1, r3
 8003a1e:	f7fd f8e3 	bl	8000be8 <__aeabi_d2f>
 8003a22:	4603      	mov	r3, r0
 8003a24:	4a22      	ldr	r2, [pc, #136]	; (8003ab0 <SimulateDropping+0x328>)
 8003a26:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 8003a28:	4b21      	ldr	r3, [pc, #132]	; (8003ab0 <SimulateDropping+0x328>)
 8003a2a:	edd3 7a00 	vldr	s15, [r3]
 8003a2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003a32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003a36:	d011      	beq.n	8003a5c <SimulateDropping+0x2d4>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003a38:	4b20      	ldr	r3, [pc, #128]	; (8003abc <SimulateDropping+0x334>)
 8003a3a:	781b      	ldrb	r3, [r3, #0]
 8003a3c:	4a1c      	ldr	r2, [pc, #112]	; (8003ab0 <SimulateDropping+0x328>)
 8003a3e:	edd2 7a00 	vldr	s15, [r2]
 8003a42:	eeb0 0a67 	vmov.f32	s0, s15
 8003a46:	4618      	mov	r0, r3
 8003a48:	f7fe f836 	bl	8001ab8 <CalculateTimer3Period>
 8003a4c:	4603      	mov	r3, r0
 8003a4e:	b29a      	uxth	r2, r3
 8003a50:	4b1b      	ldr	r3, [pc, #108]	; (8003ac0 <SimulateDropping+0x338>)
 8003a52:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003a54:	4b0d      	ldr	r3, [pc, #52]	; (8003a8c <SimulateDropping+0x304>)
 8003a56:	2201      	movs	r2, #1
 8003a58:	701a      	strb	r2, [r3, #0]
 8003a5a:	e002      	b.n	8003a62 <SimulateDropping+0x2da>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8003a5c:	4b0b      	ldr	r3, [pc, #44]	; (8003a8c <SimulateDropping+0x304>)
 8003a5e:	2200      	movs	r2, #0
 8003a60:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003a62:	2300      	movs	r3, #0
 8003a64:	e172      	b.n	8003d4c <SimulateDropping+0x5c4>
 8003a66:	bf00      	nop
 8003a68:	51eb851f 	.word	0x51eb851f
 8003a6c:	40191eb8 	.word	0x40191eb8
 8003a70:	d2f1a9fc 	.word	0xd2f1a9fc
 8003a74:	3f50624d 	.word	0x3f50624d
 8003a78:	2000043a 	.word	0x2000043a
 8003a7c:	20000448 	.word	0x20000448
 8003a80:	c11ccccd 	.word	0xc11ccccd
 8003a84:	20000470 	.word	0x20000470
 8003a88:	20000010 	.word	0x20000010
 8003a8c:	20000436 	.word	0x20000436
 8003a90:	200004b4 	.word	0x200004b4
 8003a94:	2000000a 	.word	0x2000000a
 8003a98:	20000478 	.word	0x20000478
 8003a9c:	20000464 	.word	0x20000464
 8003aa0:	200004b0 	.word	0x200004b0
 8003aa4:	2000044c 	.word	0x2000044c
 8003aa8:	20000449 	.word	0x20000449
 8003aac:	20000541 	.word	0x20000541
 8003ab0:	20000518 	.word	0x20000518
 8003ab4:	20000468 	.word	0x20000468
 8003ab8:	40240000 	.word	0x40240000
 8003abc:	20000003 	.word	0x20000003
 8003ac0:	20000454 	.word	0x20000454
 8003ac4:	20000438 	.word	0x20000438
 8003ac8:	2000044a 	.word	0x2000044a
		}
		if (DropStep3)
 8003acc:	4ba4      	ldr	r3, [pc, #656]	; (8003d60 <SimulateDropping+0x5d8>)
 8003ace:	781b      	ldrb	r3, [r3, #0]
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	f000 8099 	beq.w	8003c08 <SimulateDropping+0x480>
		{
			if (AccRef <= GravityConst-DroppingDecel) // Switch to step 2
 8003ad6:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 8003d64 <SimulateDropping+0x5dc>
 8003ada:	4ba3      	ldr	r3, [pc, #652]	; (8003d68 <SimulateDropping+0x5e0>)
 8003adc:	edd3 7a00 	vldr	s15, [r3]
 8003ae0:	ee37 7a67 	vsub.f32	s14, s14, s15
 8003ae4:	4ba1      	ldr	r3, [pc, #644]	; (8003d6c <SimulateDropping+0x5e4>)
 8003ae6:	edd3 7a00 	vldr	s15, [r3]
 8003aea:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003aee:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003af2:	db08      	blt.n	8003b06 <SimulateDropping+0x37e>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003af4:	4b9e      	ldr	r3, [pc, #632]	; (8003d70 <SimulateDropping+0x5e8>)
 8003af6:	2200      	movs	r2, #0
 8003af8:	701a      	strb	r2, [r3, #0]

				DropStep3 = false;
 8003afa:	4b99      	ldr	r3, [pc, #612]	; (8003d60 <SimulateDropping+0x5d8>)
 8003afc:	2200      	movs	r2, #0
 8003afe:	701a      	strb	r2, [r3, #0]
				DropStep4 = true; // Switch to Step 4
 8003b00:	4b9c      	ldr	r3, [pc, #624]	; (8003d74 <SimulateDropping+0x5ec>)
 8003b02:	2201      	movs	r2, #1
 8003b04:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,-DropDecelSlope,GravityConst-DroppingDecel);
 8003b06:	4b9c      	ldr	r3, [pc, #624]	; (8003d78 <SimulateDropping+0x5f0>)
 8003b08:	781b      	ldrb	r3, [r3, #0]
 8003b0a:	425b      	negs	r3, r3
 8003b0c:	ee07 3a90 	vmov	s15, r3
 8003b10:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003b14:	eddf 6a93 	vldr	s13, [pc, #588]	; 8003d64 <SimulateDropping+0x5dc>
 8003b18:	4b93      	ldr	r3, [pc, #588]	; (8003d68 <SimulateDropping+0x5e0>)
 8003b1a:	edd3 7a00 	vldr	s15, [r3]
 8003b1e:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8003b22:	eef0 0a67 	vmov.f32	s1, s15
 8003b26:	eeb0 0a47 	vmov.f32	s0, s14
 8003b2a:	4890      	ldr	r0, [pc, #576]	; (8003d6c <SimulateDropping+0x5e4>)
 8003b2c:	f7fd ff00 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003b30:	4b92      	ldr	r3, [pc, #584]	; (8003d7c <SimulateDropping+0x5f4>)
 8003b32:	681b      	ldr	r3, [r3, #0]
 8003b34:	4618      	mov	r0, r3
 8003b36:	f7fc fd07 	bl	8000548 <__aeabi_f2d>
 8003b3a:	4604      	mov	r4, r0
 8003b3c:	460d      	mov	r5, r1
 8003b3e:	4b90      	ldr	r3, [pc, #576]	; (8003d80 <SimulateDropping+0x5f8>)
 8003b40:	781b      	ldrb	r3, [r3, #0]
 8003b42:	4618      	mov	r0, r3
 8003b44:	f7fc fcee 	bl	8000524 <__aeabi_i2d>
 8003b48:	a383      	add	r3, pc, #524	; (adr r3, 8003d58 <SimulateDropping+0x5d0>)
 8003b4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b4e:	f7fc fd53 	bl	80005f8 <__aeabi_dmul>
 8003b52:	4602      	mov	r2, r0
 8003b54:	460b      	mov	r3, r1
 8003b56:	4690      	mov	r8, r2
 8003b58:	4699      	mov	r9, r3
 8003b5a:	4b84      	ldr	r3, [pc, #528]	; (8003d6c <SimulateDropping+0x5e4>)
 8003b5c:	edd3 7a00 	vldr	s15, [r3]
 8003b60:	ed9f 7a80 	vldr	s14, [pc, #512]	; 8003d64 <SimulateDropping+0x5dc>
 8003b64:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003b68:	ee17 0a90 	vmov	r0, s15
 8003b6c:	f7fc fcec 	bl	8000548 <__aeabi_f2d>
 8003b70:	4602      	mov	r2, r0
 8003b72:	460b      	mov	r3, r1
 8003b74:	4640      	mov	r0, r8
 8003b76:	4649      	mov	r1, r9
 8003b78:	f7fc fd3e 	bl	80005f8 <__aeabi_dmul>
 8003b7c:	4602      	mov	r2, r0
 8003b7e:	460b      	mov	r3, r1
 8003b80:	4610      	mov	r0, r2
 8003b82:	4619      	mov	r1, r3
 8003b84:	f04f 0200 	mov.w	r2, #0
 8003b88:	4b7e      	ldr	r3, [pc, #504]	; (8003d84 <SimulateDropping+0x5fc>)
 8003b8a:	f7fc fd35 	bl	80005f8 <__aeabi_dmul>
 8003b8e:	4602      	mov	r2, r0
 8003b90:	460b      	mov	r3, r1
 8003b92:	4690      	mov	r8, r2
 8003b94:	4699      	mov	r9, r3
 8003b96:	4b7c      	ldr	r3, [pc, #496]	; (8003d88 <SimulateDropping+0x600>)
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	4618      	mov	r0, r3
 8003b9c:	f7fc fcd4 	bl	8000548 <__aeabi_f2d>
 8003ba0:	4602      	mov	r2, r0
 8003ba2:	460b      	mov	r3, r1
 8003ba4:	4640      	mov	r0, r8
 8003ba6:	4649      	mov	r1, r9
 8003ba8:	f7fc fe50 	bl	800084c <__aeabi_ddiv>
 8003bac:	4602      	mov	r2, r0
 8003bae:	460b      	mov	r3, r1
 8003bb0:	4620      	mov	r0, r4
 8003bb2:	4629      	mov	r1, r5
 8003bb4:	f7fc fb6a 	bl	800028c <__adddf3>
 8003bb8:	4602      	mov	r2, r0
 8003bba:	460b      	mov	r3, r1
 8003bbc:	4610      	mov	r0, r2
 8003bbe:	4619      	mov	r1, r3
 8003bc0:	f7fd f812 	bl	8000be8 <__aeabi_d2f>
 8003bc4:	4603      	mov	r3, r0
 8003bc6:	4a6d      	ldr	r2, [pc, #436]	; (8003d7c <SimulateDropping+0x5f4>)
 8003bc8:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 8003bca:	4b6c      	ldr	r3, [pc, #432]	; (8003d7c <SimulateDropping+0x5f4>)
 8003bcc:	edd3 7a00 	vldr	s15, [r3]
 8003bd0:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003bd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003bd8:	d011      	beq.n	8003bfe <SimulateDropping+0x476>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003bda:	4b6c      	ldr	r3, [pc, #432]	; (8003d8c <SimulateDropping+0x604>)
 8003bdc:	781b      	ldrb	r3, [r3, #0]
 8003bde:	4a67      	ldr	r2, [pc, #412]	; (8003d7c <SimulateDropping+0x5f4>)
 8003be0:	edd2 7a00 	vldr	s15, [r2]
 8003be4:	eeb0 0a67 	vmov.f32	s0, s15
 8003be8:	4618      	mov	r0, r3
 8003bea:	f7fd ff65 	bl	8001ab8 <CalculateTimer3Period>
 8003bee:	4603      	mov	r3, r0
 8003bf0:	b29a      	uxth	r2, r3
 8003bf2:	4b67      	ldr	r3, [pc, #412]	; (8003d90 <SimulateDropping+0x608>)
 8003bf4:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003bf6:	4b5e      	ldr	r3, [pc, #376]	; (8003d70 <SimulateDropping+0x5e8>)
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	701a      	strb	r2, [r3, #0]
 8003bfc:	e002      	b.n	8003c04 <SimulateDropping+0x47c>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8003bfe:	4b5c      	ldr	r3, [pc, #368]	; (8003d70 <SimulateDropping+0x5e8>)
 8003c00:	2200      	movs	r2, #0
 8003c02:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003c04:	2300      	movs	r3, #0
 8003c06:	e0a1      	b.n	8003d4c <SimulateDropping+0x5c4>
		}
		if (DropStep4)
 8003c08:	4b5a      	ldr	r3, [pc, #360]	; (8003d74 <SimulateDropping+0x5ec>)
 8003c0a:	781b      	ldrb	r3, [r3, #0]
 8003c0c:	2b00      	cmp	r3, #0
 8003c0e:	f000 809c 	beq.w	8003d4a <SimulateDropping+0x5c2>
		{
			if (SpeedCmd <= 5) // finish the Dropping
 8003c12:	4b5a      	ldr	r3, [pc, #360]	; (8003d7c <SimulateDropping+0x5f4>)
 8003c14:	edd3 7a00 	vldr	s15, [r3]
 8003c18:	eeb1 7a04 	vmov.f32	s14, #20	; 0x40a00000  5.0
 8003c1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003c20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003c24:	d815      	bhi.n	8003c52 <SimulateDropping+0x4ca>
			{
				StopPulseGenerating();
 8003c26:	f7fd fee1 	bl	80019ec <StopPulseGenerating>
				TotalDroppingPulse = PulseSimuCount;
 8003c2a:	4b5a      	ldr	r3, [pc, #360]	; (8003d94 <SimulateDropping+0x60c>)
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	461a      	mov	r2, r3
 8003c30:	4b59      	ldr	r3, [pc, #356]	; (8003d98 <SimulateDropping+0x610>)
 8003c32:	601a      	str	r2, [r3, #0]
				SpeedCmd = 0;
 8003c34:	4b51      	ldr	r3, [pc, #324]	; (8003d7c <SimulateDropping+0x5f4>)
 8003c36:	f04f 0200 	mov.w	r2, #0
 8003c3a:	601a      	str	r2, [r3, #0]
				CompleteDropping = true;
 8003c3c:	4b57      	ldr	r3, [pc, #348]	; (8003d9c <SimulateDropping+0x614>)
 8003c3e:	2201      	movs	r2, #1
 8003c40:	701a      	strb	r2, [r3, #0]
				DropStep4 = false;
 8003c42:	4b4c      	ldr	r3, [pc, #304]	; (8003d74 <SimulateDropping+0x5ec>)
 8003c44:	2200      	movs	r2, #0
 8003c46:	701a      	strb	r2, [r3, #0]

				AccRef = GravityConst;
 8003c48:	4a55      	ldr	r2, [pc, #340]	; (8003da0 <SimulateDropping+0x618>)
 8003c4a:	4b48      	ldr	r3, [pc, #288]	; (8003d6c <SimulateDropping+0x5e4>)
 8003c4c:	601a      	str	r2, [r3, #0]
				return true;
 8003c4e:	2301      	movs	r3, #1
 8003c50:	e07c      	b.n	8003d4c <SimulateDropping+0x5c4>
			}
			AccRef = GravityConst-DroppingDecel;
 8003c52:	ed9f 7a44 	vldr	s14, [pc, #272]	; 8003d64 <SimulateDropping+0x5dc>
 8003c56:	4b44      	ldr	r3, [pc, #272]	; (8003d68 <SimulateDropping+0x5e0>)
 8003c58:	edd3 7a00 	vldr	s15, [r3]
 8003c5c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8003c60:	4b42      	ldr	r3, [pc, #264]	; (8003d6c <SimulateDropping+0x5e4>)
 8003c62:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003c66:	4b45      	ldr	r3, [pc, #276]	; (8003d7c <SimulateDropping+0x5f4>)
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4618      	mov	r0, r3
 8003c6c:	f7fc fc6c 	bl	8000548 <__aeabi_f2d>
 8003c70:	4604      	mov	r4, r0
 8003c72:	460d      	mov	r5, r1
 8003c74:	4b42      	ldr	r3, [pc, #264]	; (8003d80 <SimulateDropping+0x5f8>)
 8003c76:	781b      	ldrb	r3, [r3, #0]
 8003c78:	4618      	mov	r0, r3
 8003c7a:	f7fc fc53 	bl	8000524 <__aeabi_i2d>
 8003c7e:	a336      	add	r3, pc, #216	; (adr r3, 8003d58 <SimulateDropping+0x5d0>)
 8003c80:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c84:	f7fc fcb8 	bl	80005f8 <__aeabi_dmul>
 8003c88:	4602      	mov	r2, r0
 8003c8a:	460b      	mov	r3, r1
 8003c8c:	4690      	mov	r8, r2
 8003c8e:	4699      	mov	r9, r3
 8003c90:	4b36      	ldr	r3, [pc, #216]	; (8003d6c <SimulateDropping+0x5e4>)
 8003c92:	edd3 7a00 	vldr	s15, [r3]
 8003c96:	ed9f 7a33 	vldr	s14, [pc, #204]	; 8003d64 <SimulateDropping+0x5dc>
 8003c9a:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003c9e:	ee17 0a90 	vmov	r0, s15
 8003ca2:	f7fc fc51 	bl	8000548 <__aeabi_f2d>
 8003ca6:	4602      	mov	r2, r0
 8003ca8:	460b      	mov	r3, r1
 8003caa:	4640      	mov	r0, r8
 8003cac:	4649      	mov	r1, r9
 8003cae:	f7fc fca3 	bl	80005f8 <__aeabi_dmul>
 8003cb2:	4602      	mov	r2, r0
 8003cb4:	460b      	mov	r3, r1
 8003cb6:	4610      	mov	r0, r2
 8003cb8:	4619      	mov	r1, r3
 8003cba:	f04f 0200 	mov.w	r2, #0
 8003cbe:	4b31      	ldr	r3, [pc, #196]	; (8003d84 <SimulateDropping+0x5fc>)
 8003cc0:	f7fc fc9a 	bl	80005f8 <__aeabi_dmul>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4690      	mov	r8, r2
 8003cca:	4699      	mov	r9, r3
 8003ccc:	4b2e      	ldr	r3, [pc, #184]	; (8003d88 <SimulateDropping+0x600>)
 8003cce:	681b      	ldr	r3, [r3, #0]
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	f7fc fc39 	bl	8000548 <__aeabi_f2d>
 8003cd6:	4602      	mov	r2, r0
 8003cd8:	460b      	mov	r3, r1
 8003cda:	4640      	mov	r0, r8
 8003cdc:	4649      	mov	r1, r9
 8003cde:	f7fc fdb5 	bl	800084c <__aeabi_ddiv>
 8003ce2:	4602      	mov	r2, r0
 8003ce4:	460b      	mov	r3, r1
 8003ce6:	4620      	mov	r0, r4
 8003ce8:	4629      	mov	r1, r5
 8003cea:	f7fc facf 	bl	800028c <__adddf3>
 8003cee:	4602      	mov	r2, r0
 8003cf0:	460b      	mov	r3, r1
 8003cf2:	4610      	mov	r0, r2
 8003cf4:	4619      	mov	r1, r3
 8003cf6:	f7fc ff77 	bl	8000be8 <__aeabi_d2f>
 8003cfa:	4603      	mov	r3, r0
 8003cfc:	4a1f      	ldr	r2, [pc, #124]	; (8003d7c <SimulateDropping+0x5f4>)
 8003cfe:	6013      	str	r3, [r2, #0]
			if (SpeedCmd <= 0)
 8003d00:	4b1e      	ldr	r3, [pc, #120]	; (8003d7c <SimulateDropping+0x5f4>)
 8003d02:	edd3 7a00 	vldr	s15, [r3]
 8003d06:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003d0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d0e:	d803      	bhi.n	8003d18 <SimulateDropping+0x590>
				SpeedCmd = 0;
 8003d10:	4b1a      	ldr	r3, [pc, #104]	; (8003d7c <SimulateDropping+0x5f4>)
 8003d12:	f04f 0200 	mov.w	r2, #0
 8003d16:	601a      	str	r2, [r3, #0]

			if (SpeedCmd != 0)
 8003d18:	4b18      	ldr	r3, [pc, #96]	; (8003d7c <SimulateDropping+0x5f4>)
 8003d1a:	edd3 7a00 	vldr	s15, [r3]
 8003d1e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003d22:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003d26:	d010      	beq.n	8003d4a <SimulateDropping+0x5c2>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003d28:	4b18      	ldr	r3, [pc, #96]	; (8003d8c <SimulateDropping+0x604>)
 8003d2a:	781b      	ldrb	r3, [r3, #0]
 8003d2c:	4a13      	ldr	r2, [pc, #76]	; (8003d7c <SimulateDropping+0x5f4>)
 8003d2e:	edd2 7a00 	vldr	s15, [r2]
 8003d32:	eeb0 0a67 	vmov.f32	s0, s15
 8003d36:	4618      	mov	r0, r3
 8003d38:	f7fd febe 	bl	8001ab8 <CalculateTimer3Period>
 8003d3c:	4603      	mov	r3, r0
 8003d3e:	b29a      	uxth	r2, r3
 8003d40:	4b13      	ldr	r3, [pc, #76]	; (8003d90 <SimulateDropping+0x608>)
 8003d42:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003d44:	4b0a      	ldr	r3, [pc, #40]	; (8003d70 <SimulateDropping+0x5e8>)
 8003d46:	2201      	movs	r2, #1
 8003d48:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return false;
 8003d4a:	2300      	movs	r3, #0
}
 8003d4c:	4618      	mov	r0, r3
 8003d4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003d52:	bf00      	nop
 8003d54:	f3af 8000 	nop.w
 8003d58:	d2f1a9fc 	.word	0xd2f1a9fc
 8003d5c:	3f50624d 	.word	0x3f50624d
 8003d60:	2000044a 	.word	0x2000044a
 8003d64:	c11ccccd 	.word	0xc11ccccd
 8003d68:	20000474 	.word	0x20000474
 8003d6c:	20000010 	.word	0x20000010
 8003d70:	20000436 	.word	0x20000436
 8003d74:	2000044b 	.word	0x2000044b
 8003d78:	20000540 	.word	0x20000540
 8003d7c:	20000518 	.word	0x20000518
 8003d80:	20000468 	.word	0x20000468
 8003d84:	40240000 	.word	0x40240000
 8003d88:	20000464 	.word	0x20000464
 8003d8c:	20000003 	.word	0x20000003
 8003d90:	20000454 	.word	0x20000454
 8003d94:	200004b4 	.word	0x200004b4
 8003d98:	20000460 	.word	0x20000460
 8003d9c:	2000043a 	.word	0x2000043a
 8003da0:	c11ccccd 	.word	0xc11ccccd

08003da4 <SimulatePullAndDrop>:
bool SimulatePullAndDrop ()
{
 8003da4:	b580      	push	{r7, lr}
 8003da6:	af00      	add	r7, sp, #0
	if (CompleteDropping)
 8003da8:	4b0a      	ldr	r3, [pc, #40]	; (8003dd4 <SimulatePullAndDrop+0x30>)
 8003daa:	781b      	ldrb	r3, [r3, #0]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	d001      	beq.n	8003db4 <SimulatePullAndDrop+0x10>
	{
		return true;
 8003db0:	2301      	movs	r3, #1
 8003db2:	e00c      	b.n	8003dce <SimulatePullAndDrop+0x2a>
	}
	if (SimulatePulling()) // If finish pulling
 8003db4:	f7ff f824 	bl	8002e00 <SimulatePulling>
 8003db8:	4603      	mov	r3, r0
 8003dba:	2b00      	cmp	r3, #0
 8003dbc:	d006      	beq.n	8003dcc <SimulatePullAndDrop+0x28>
	{
		if (SimulateDropping()) // finish Dropping
 8003dbe:	f7ff fce3 	bl	8003788 <SimulateDropping>
 8003dc2:	4603      	mov	r3, r0
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d001      	beq.n	8003dcc <SimulatePullAndDrop+0x28>
			return true;
 8003dc8:	2301      	movs	r3, #1
 8003dca:	e000      	b.n	8003dce <SimulatePullAndDrop+0x2a>
	}
	return false;
 8003dcc:	2300      	movs	r3, #0
}
 8003dce:	4618      	mov	r0, r3
 8003dd0:	bd80      	pop	{r7, pc}
 8003dd2:	bf00      	nop
 8003dd4:	2000043a 	.word	0x2000043a

08003dd8 <Dropping>:
bool Dropping ()
{
 8003dd8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003ddc:	af00      	add	r7, sp, #0
	if (CompleteDropping)
 8003dde:	4bb8      	ldr	r3, [pc, #736]	; (80040c0 <Dropping+0x2e8>)
 8003de0:	781b      	ldrb	r3, [r3, #0]
 8003de2:	2b00      	cmp	r3, #0
 8003de4:	d001      	beq.n	8003dea <Dropping+0x12>
	{
		return true;
 8003de6:	2301      	movs	r3, #1
 8003de8:	e2d5      	b.n	8004396 <Dropping+0x5be>
	}
	else
	{
		if(DropStep1) // 2nd spd curve Accelerating
 8003dea:	4bb6      	ldr	r3, [pc, #728]	; (80040c4 <Dropping+0x2ec>)
 8003dec:	781b      	ldrb	r3, [r3, #0]
 8003dee:	2b00      	cmp	r3, #0
 8003df0:	f000 80cb 	beq.w	8003f8a <Dropping+0x1b2>
		{
			if (AccRef >= GravityConst+DroppingAccel) // Switch to step 2
 8003df4:	ed9f 7ab4 	vldr	s14, [pc, #720]	; 80040c8 <Dropping+0x2f0>
 8003df8:	4bb4      	ldr	r3, [pc, #720]	; (80040cc <Dropping+0x2f4>)
 8003dfa:	edd3 7a00 	vldr	s15, [r3]
 8003dfe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8003e02:	4bb3      	ldr	r3, [pc, #716]	; (80040d0 <Dropping+0x2f8>)
 8003e04:	edd3 7a00 	vldr	s15, [r3]
 8003e08:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003e0c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003e10:	d838      	bhi.n	8003e84 <Dropping+0xac>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003e12:	4bb0      	ldr	r3, [pc, #704]	; (80040d4 <Dropping+0x2fc>)
 8003e14:	2200      	movs	r2, #0
 8003e16:	701a      	strb	r2, [r3, #0]
				PositionPulseCmd = 0;
 8003e18:	4baf      	ldr	r3, [pc, #700]	; (80040d8 <Dropping+0x300>)
 8003e1a:	2200      	movs	r2, #0
 8003e1c:	601a      	str	r2, [r3, #0]
				TargetPosition = (int)(DroppingAccelDistance*EncoderResolution/(2*3.14*DrumRadius));
 8003e1e:	4baf      	ldr	r3, [pc, #700]	; (80040dc <Dropping+0x304>)
 8003e20:	881b      	ldrh	r3, [r3, #0]
 8003e22:	ee07 3a90 	vmov	s15, r3
 8003e26:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003e2a:	4bad      	ldr	r3, [pc, #692]	; (80040e0 <Dropping+0x308>)
 8003e2c:	edd3 7a00 	vldr	s15, [r3]
 8003e30:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003e34:	ee17 0a90 	vmov	r0, s15
 8003e38:	f7fc fb86 	bl	8000548 <__aeabi_f2d>
 8003e3c:	4604      	mov	r4, r0
 8003e3e:	460d      	mov	r5, r1
 8003e40:	4ba8      	ldr	r3, [pc, #672]	; (80040e4 <Dropping+0x30c>)
 8003e42:	681b      	ldr	r3, [r3, #0]
 8003e44:	4618      	mov	r0, r3
 8003e46:	f7fc fb7f 	bl	8000548 <__aeabi_f2d>
 8003e4a:	a399      	add	r3, pc, #612	; (adr r3, 80040b0 <Dropping+0x2d8>)
 8003e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e50:	f7fc fbd2 	bl	80005f8 <__aeabi_dmul>
 8003e54:	4602      	mov	r2, r0
 8003e56:	460b      	mov	r3, r1
 8003e58:	4620      	mov	r0, r4
 8003e5a:	4629      	mov	r1, r5
 8003e5c:	f7fc fcf6 	bl	800084c <__aeabi_ddiv>
 8003e60:	4602      	mov	r2, r0
 8003e62:	460b      	mov	r3, r1
 8003e64:	4610      	mov	r0, r2
 8003e66:	4619      	mov	r1, r3
 8003e68:	f7fc fe76 	bl	8000b58 <__aeabi_d2iz>
 8003e6c:	4603      	mov	r3, r0
 8003e6e:	4a9e      	ldr	r2, [pc, #632]	; (80040e8 <Dropping+0x310>)
 8003e70:	6013      	str	r3, [r2, #0]
				IsPulseCheck = true; // On pulse checking
 8003e72:	4b9e      	ldr	r3, [pc, #632]	; (80040ec <Dropping+0x314>)
 8003e74:	2201      	movs	r2, #1
 8003e76:	701a      	strb	r2, [r3, #0]

				DropStep1 = false;
 8003e78:	4b92      	ldr	r3, [pc, #584]	; (80040c4 <Dropping+0x2ec>)
 8003e7a:	2200      	movs	r2, #0
 8003e7c:	701a      	strb	r2, [r3, #0]
				DropStep2 = true; // Switch to Step 2
 8003e7e:	4b9c      	ldr	r3, [pc, #624]	; (80040f0 <Dropping+0x318>)
 8003e80:	2201      	movs	r2, #1
 8003e82:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,DropAccelSlope,GravityConst+DroppingAccel);
 8003e84:	4b9b      	ldr	r3, [pc, #620]	; (80040f4 <Dropping+0x31c>)
 8003e86:	781b      	ldrb	r3, [r3, #0]
 8003e88:	ee07 3a90 	vmov	s15, r3
 8003e8c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003e90:	eddf 6a8d 	vldr	s13, [pc, #564]	; 80040c8 <Dropping+0x2f0>
 8003e94:	4b8d      	ldr	r3, [pc, #564]	; (80040cc <Dropping+0x2f4>)
 8003e96:	edd3 7a00 	vldr	s15, [r3]
 8003e9a:	ee76 7aa7 	vadd.f32	s15, s13, s15
 8003e9e:	eef0 0a67 	vmov.f32	s1, s15
 8003ea2:	eeb0 0a47 	vmov.f32	s0, s14
 8003ea6:	488a      	ldr	r0, [pc, #552]	; (80040d0 <Dropping+0x2f8>)
 8003ea8:	f7fd fd42 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003eac:	4b92      	ldr	r3, [pc, #584]	; (80040f8 <Dropping+0x320>)
 8003eae:	681b      	ldr	r3, [r3, #0]
 8003eb0:	4618      	mov	r0, r3
 8003eb2:	f7fc fb49 	bl	8000548 <__aeabi_f2d>
 8003eb6:	4604      	mov	r4, r0
 8003eb8:	460d      	mov	r5, r1
 8003eba:	4b90      	ldr	r3, [pc, #576]	; (80040fc <Dropping+0x324>)
 8003ebc:	781b      	ldrb	r3, [r3, #0]
 8003ebe:	4618      	mov	r0, r3
 8003ec0:	f7fc fb30 	bl	8000524 <__aeabi_i2d>
 8003ec4:	a37c      	add	r3, pc, #496	; (adr r3, 80040b8 <Dropping+0x2e0>)
 8003ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003eca:	f7fc fb95 	bl	80005f8 <__aeabi_dmul>
 8003ece:	4602      	mov	r2, r0
 8003ed0:	460b      	mov	r3, r1
 8003ed2:	4690      	mov	r8, r2
 8003ed4:	4699      	mov	r9, r3
 8003ed6:	4b7e      	ldr	r3, [pc, #504]	; (80040d0 <Dropping+0x2f8>)
 8003ed8:	edd3 7a00 	vldr	s15, [r3]
 8003edc:	ed9f 7a7a 	vldr	s14, [pc, #488]	; 80040c8 <Dropping+0x2f0>
 8003ee0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8003ee4:	ee17 0a90 	vmov	r0, s15
 8003ee8:	f7fc fb2e 	bl	8000548 <__aeabi_f2d>
 8003eec:	4602      	mov	r2, r0
 8003eee:	460b      	mov	r3, r1
 8003ef0:	4640      	mov	r0, r8
 8003ef2:	4649      	mov	r1, r9
 8003ef4:	f7fc fb80 	bl	80005f8 <__aeabi_dmul>
 8003ef8:	4602      	mov	r2, r0
 8003efa:	460b      	mov	r3, r1
 8003efc:	4610      	mov	r0, r2
 8003efe:	4619      	mov	r1, r3
 8003f00:	f04f 0200 	mov.w	r2, #0
 8003f04:	4b7e      	ldr	r3, [pc, #504]	; (8004100 <Dropping+0x328>)
 8003f06:	f7fc fb77 	bl	80005f8 <__aeabi_dmul>
 8003f0a:	4602      	mov	r2, r0
 8003f0c:	460b      	mov	r3, r1
 8003f0e:	4690      	mov	r8, r2
 8003f10:	4699      	mov	r9, r3
 8003f12:	4b74      	ldr	r3, [pc, #464]	; (80040e4 <Dropping+0x30c>)
 8003f14:	681b      	ldr	r3, [r3, #0]
 8003f16:	4618      	mov	r0, r3
 8003f18:	f7fc fb16 	bl	8000548 <__aeabi_f2d>
 8003f1c:	4602      	mov	r2, r0
 8003f1e:	460b      	mov	r3, r1
 8003f20:	4640      	mov	r0, r8
 8003f22:	4649      	mov	r1, r9
 8003f24:	f7fc fc92 	bl	800084c <__aeabi_ddiv>
 8003f28:	4602      	mov	r2, r0
 8003f2a:	460b      	mov	r3, r1
 8003f2c:	4620      	mov	r0, r4
 8003f2e:	4629      	mov	r1, r5
 8003f30:	f7fc f9ac 	bl	800028c <__adddf3>
 8003f34:	4602      	mov	r2, r0
 8003f36:	460b      	mov	r3, r1
 8003f38:	4610      	mov	r0, r2
 8003f3a:	4619      	mov	r1, r3
 8003f3c:	f7fc fe54 	bl	8000be8 <__aeabi_d2f>
 8003f40:	4603      	mov	r3, r0
 8003f42:	4a6d      	ldr	r2, [pc, #436]	; (80040f8 <Dropping+0x320>)
 8003f44:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 8003f46:	4b6c      	ldr	r3, [pc, #432]	; (80040f8 <Dropping+0x320>)
 8003f48:	edd3 7a00 	vldr	s15, [r3]
 8003f4c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003f50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003f54:	d014      	beq.n	8003f80 <Dropping+0x1a8>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003f56:	4b6b      	ldr	r3, [pc, #428]	; (8004104 <Dropping+0x32c>)
 8003f58:	781b      	ldrb	r3, [r3, #0]
 8003f5a:	4a67      	ldr	r2, [pc, #412]	; (80040f8 <Dropping+0x320>)
 8003f5c:	edd2 7a00 	vldr	s15, [r2]
 8003f60:	eeb0 0a67 	vmov.f32	s0, s15
 8003f64:	4618      	mov	r0, r3
 8003f66:	f7fd fda7 	bl	8001ab8 <CalculateTimer3Period>
 8003f6a:	4603      	mov	r3, r0
 8003f6c:	b29a      	uxth	r2, r3
 8003f6e:	4b66      	ldr	r3, [pc, #408]	; (8004108 <Dropping+0x330>)
 8003f70:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;// Enable PositionCmd Count
 8003f72:	4b66      	ldr	r3, [pc, #408]	; (800410c <Dropping+0x334>)
 8003f74:	2201      	movs	r2, #1
 8003f76:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8003f78:	4b56      	ldr	r3, [pc, #344]	; (80040d4 <Dropping+0x2fc>)
 8003f7a:	2201      	movs	r2, #1
 8003f7c:	701a      	strb	r2, [r3, #0]
 8003f7e:	e002      	b.n	8003f86 <Dropping+0x1ae>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8003f80:	4b54      	ldr	r3, [pc, #336]	; (80040d4 <Dropping+0x2fc>)
 8003f82:	2200      	movs	r2, #0
 8003f84:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8003f86:	2300      	movs	r3, #0
 8003f88:	e205      	b.n	8004396 <Dropping+0x5be>
		}
		if (DropStep2)
 8003f8a:	4b59      	ldr	r3, [pc, #356]	; (80040f0 <Dropping+0x318>)
 8003f8c:	781b      	ldrb	r3, [r3, #0]
 8003f8e:	2b00      	cmp	r3, #0
 8003f90:	f000 80c2 	beq.w	8004118 <Dropping+0x340>
		{
			if (IsReachTargetPosition) // Switch to Step 2
 8003f94:	4b5e      	ldr	r3, [pc, #376]	; (8004110 <Dropping+0x338>)
 8003f96:	781b      	ldrb	r3, [r3, #0]
 8003f98:	b2db      	uxtb	r3, r3
 8003f9a:	2b00      	cmp	r3, #0
 8003f9c:	d00e      	beq.n	8003fbc <Dropping+0x1e4>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8003f9e:	4b4d      	ldr	r3, [pc, #308]	; (80040d4 <Dropping+0x2fc>)
 8003fa0:	2200      	movs	r2, #0
 8003fa2:	701a      	strb	r2, [r3, #0]

				DropStep2 = false;
 8003fa4:	4b52      	ldr	r3, [pc, #328]	; (80040f0 <Dropping+0x318>)
 8003fa6:	2200      	movs	r2, #0
 8003fa8:	701a      	strb	r2, [r3, #0]
				DropStep3 = true; // Switch to Step 3
 8003faa:	4b5a      	ldr	r3, [pc, #360]	; (8004114 <Dropping+0x33c>)
 8003fac:	2201      	movs	r2, #1
 8003fae:	701a      	strb	r2, [r3, #0]

				IsReachTargetPosition = false; // Reset the flag
 8003fb0:	4b57      	ldr	r3, [pc, #348]	; (8004110 <Dropping+0x338>)
 8003fb2:	2200      	movs	r2, #0
 8003fb4:	701a      	strb	r2, [r3, #0]
				IsPulseCheck = false; // OFF pulse checking
 8003fb6:	4b4d      	ldr	r3, [pc, #308]	; (80040ec <Dropping+0x314>)
 8003fb8:	2200      	movs	r2, #0
 8003fba:	701a      	strb	r2, [r3, #0]
			}

			AccRef = GravityConst+DroppingAccel;
 8003fbc:	ed9f 7a42 	vldr	s14, [pc, #264]	; 80040c8 <Dropping+0x2f0>
 8003fc0:	4b42      	ldr	r3, [pc, #264]	; (80040cc <Dropping+0x2f4>)
 8003fc2:	edd3 7a00 	vldr	s15, [r3]
 8003fc6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003fca:	4b41      	ldr	r3, [pc, #260]	; (80040d0 <Dropping+0x2f8>)
 8003fcc:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 8003fd0:	4b49      	ldr	r3, [pc, #292]	; (80040f8 <Dropping+0x320>)
 8003fd2:	681b      	ldr	r3, [r3, #0]
 8003fd4:	4618      	mov	r0, r3
 8003fd6:	f7fc fab7 	bl	8000548 <__aeabi_f2d>
 8003fda:	4604      	mov	r4, r0
 8003fdc:	460d      	mov	r5, r1
 8003fde:	4b47      	ldr	r3, [pc, #284]	; (80040fc <Dropping+0x324>)
 8003fe0:	781b      	ldrb	r3, [r3, #0]
 8003fe2:	4618      	mov	r0, r3
 8003fe4:	f7fc fa9e 	bl	8000524 <__aeabi_i2d>
 8003fe8:	a333      	add	r3, pc, #204	; (adr r3, 80040b8 <Dropping+0x2e0>)
 8003fea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fee:	f7fc fb03 	bl	80005f8 <__aeabi_dmul>
 8003ff2:	4602      	mov	r2, r0
 8003ff4:	460b      	mov	r3, r1
 8003ff6:	4690      	mov	r8, r2
 8003ff8:	4699      	mov	r9, r3
 8003ffa:	4b35      	ldr	r3, [pc, #212]	; (80040d0 <Dropping+0x2f8>)
 8003ffc:	edd3 7a00 	vldr	s15, [r3]
 8004000:	ed9f 7a31 	vldr	s14, [pc, #196]	; 80040c8 <Dropping+0x2f0>
 8004004:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8004008:	ee17 0a90 	vmov	r0, s15
 800400c:	f7fc fa9c 	bl	8000548 <__aeabi_f2d>
 8004010:	4602      	mov	r2, r0
 8004012:	460b      	mov	r3, r1
 8004014:	4640      	mov	r0, r8
 8004016:	4649      	mov	r1, r9
 8004018:	f7fc faee 	bl	80005f8 <__aeabi_dmul>
 800401c:	4602      	mov	r2, r0
 800401e:	460b      	mov	r3, r1
 8004020:	4610      	mov	r0, r2
 8004022:	4619      	mov	r1, r3
 8004024:	f04f 0200 	mov.w	r2, #0
 8004028:	4b35      	ldr	r3, [pc, #212]	; (8004100 <Dropping+0x328>)
 800402a:	f7fc fae5 	bl	80005f8 <__aeabi_dmul>
 800402e:	4602      	mov	r2, r0
 8004030:	460b      	mov	r3, r1
 8004032:	4690      	mov	r8, r2
 8004034:	4699      	mov	r9, r3
 8004036:	4b2b      	ldr	r3, [pc, #172]	; (80040e4 <Dropping+0x30c>)
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	4618      	mov	r0, r3
 800403c:	f7fc fa84 	bl	8000548 <__aeabi_f2d>
 8004040:	4602      	mov	r2, r0
 8004042:	460b      	mov	r3, r1
 8004044:	4640      	mov	r0, r8
 8004046:	4649      	mov	r1, r9
 8004048:	f7fc fc00 	bl	800084c <__aeabi_ddiv>
 800404c:	4602      	mov	r2, r0
 800404e:	460b      	mov	r3, r1
 8004050:	4620      	mov	r0, r4
 8004052:	4629      	mov	r1, r5
 8004054:	f7fc f91a 	bl	800028c <__adddf3>
 8004058:	4602      	mov	r2, r0
 800405a:	460b      	mov	r3, r1
 800405c:	4610      	mov	r0, r2
 800405e:	4619      	mov	r1, r3
 8004060:	f7fc fdc2 	bl	8000be8 <__aeabi_d2f>
 8004064:	4603      	mov	r3, r0
 8004066:	4a24      	ldr	r2, [pc, #144]	; (80040f8 <Dropping+0x320>)
 8004068:	6013      	str	r3, [r2, #0]
			if (SpeedCmd != 0)
 800406a:	4b23      	ldr	r3, [pc, #140]	; (80040f8 <Dropping+0x320>)
 800406c:	edd3 7a00 	vldr	s15, [r3]
 8004070:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004074:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004078:	d014      	beq.n	80040a4 <Dropping+0x2cc>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800407a:	4b22      	ldr	r3, [pc, #136]	; (8004104 <Dropping+0x32c>)
 800407c:	781b      	ldrb	r3, [r3, #0]
 800407e:	4a1e      	ldr	r2, [pc, #120]	; (80040f8 <Dropping+0x320>)
 8004080:	edd2 7a00 	vldr	s15, [r2]
 8004084:	eeb0 0a67 	vmov.f32	s0, s15
 8004088:	4618      	mov	r0, r3
 800408a:	f7fd fd15 	bl	8001ab8 <CalculateTimer3Period>
 800408e:	4603      	mov	r3, r0
 8004090:	b29a      	uxth	r2, r3
 8004092:	4b1d      	ldr	r3, [pc, #116]	; (8004108 <Dropping+0x330>)
 8004094:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8004096:	4b1d      	ldr	r3, [pc, #116]	; (800410c <Dropping+0x334>)
 8004098:	2201      	movs	r2, #1
 800409a:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 800409c:	4b0d      	ldr	r3, [pc, #52]	; (80040d4 <Dropping+0x2fc>)
 800409e:	2201      	movs	r2, #1
 80040a0:	701a      	strb	r2, [r3, #0]
 80040a2:	e002      	b.n	80040aa <Dropping+0x2d2>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 80040a4:	4b0b      	ldr	r3, [pc, #44]	; (80040d4 <Dropping+0x2fc>)
 80040a6:	2200      	movs	r2, #0
 80040a8:	701a      	strb	r2, [r3, #0]
			}
			return false;
 80040aa:	2300      	movs	r3, #0
 80040ac:	e173      	b.n	8004396 <Dropping+0x5be>
 80040ae:	bf00      	nop
 80040b0:	51eb851f 	.word	0x51eb851f
 80040b4:	40191eb8 	.word	0x40191eb8
 80040b8:	d2f1a9fc 	.word	0xd2f1a9fc
 80040bc:	3f50624d 	.word	0x3f50624d
 80040c0:	2000043a 	.word	0x2000043a
 80040c4:	20000448 	.word	0x20000448
 80040c8:	c11ccccd 	.word	0xc11ccccd
 80040cc:	20000470 	.word	0x20000470
 80040d0:	20000010 	.word	0x20000010
 80040d4:	20000436 	.word	0x20000436
 80040d8:	200004b8 	.word	0x200004b8
 80040dc:	2000000a 	.word	0x2000000a
 80040e0:	20000478 	.word	0x20000478
 80040e4:	20000464 	.word	0x20000464
 80040e8:	200004b0 	.word	0x200004b0
 80040ec:	2000044c 	.word	0x2000044c
 80040f0:	20000449 	.word	0x20000449
 80040f4:	20000541 	.word	0x20000541
 80040f8:	20000518 	.word	0x20000518
 80040fc:	20000468 	.word	0x20000468
 8004100:	40240000 	.word	0x40240000
 8004104:	20000003 	.word	0x20000003
 8004108:	20000454 	.word	0x20000454
 800410c:	20000440 	.word	0x20000440
 8004110:	20000438 	.word	0x20000438
 8004114:	2000044a 	.word	0x2000044a
		}
		if (DropStep3)
 8004118:	4ba3      	ldr	r3, [pc, #652]	; (80043a8 <Dropping+0x5d0>)
 800411a:	781b      	ldrb	r3, [r3, #0]
 800411c:	2b00      	cmp	r3, #0
 800411e:	f000 809c 	beq.w	800425a <Dropping+0x482>
		{
			if (AccRef <= GravityConst-DroppingDecel) // Switch to step 2
 8004122:	ed9f 7aa2 	vldr	s14, [pc, #648]	; 80043ac <Dropping+0x5d4>
 8004126:	4ba2      	ldr	r3, [pc, #648]	; (80043b0 <Dropping+0x5d8>)
 8004128:	edd3 7a00 	vldr	s15, [r3]
 800412c:	ee37 7a67 	vsub.f32	s14, s14, s15
 8004130:	4ba0      	ldr	r3, [pc, #640]	; (80043b4 <Dropping+0x5dc>)
 8004132:	edd3 7a00 	vldr	s15, [r3]
 8004136:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800413a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800413e:	db08      	blt.n	8004152 <Dropping+0x37a>
			{
				PulseGenerationFlag = false; // Disable Pulse out
 8004140:	4b9d      	ldr	r3, [pc, #628]	; (80043b8 <Dropping+0x5e0>)
 8004142:	2200      	movs	r2, #0
 8004144:	701a      	strb	r2, [r3, #0]

				DropStep3 = false;
 8004146:	4b98      	ldr	r3, [pc, #608]	; (80043a8 <Dropping+0x5d0>)
 8004148:	2200      	movs	r2, #0
 800414a:	701a      	strb	r2, [r3, #0]
				DropStep4 = true; // Switch to Step 4
 800414c:	4b9b      	ldr	r3, [pc, #620]	; (80043bc <Dropping+0x5e4>)
 800414e:	2201      	movs	r2, #1
 8004150:	701a      	strb	r2, [r3, #0]
			}

			LinearGeneration(&AccRef,-DropDecelSlope,GravityConst-DroppingDecel);
 8004152:	4b9b      	ldr	r3, [pc, #620]	; (80043c0 <Dropping+0x5e8>)
 8004154:	781b      	ldrb	r3, [r3, #0]
 8004156:	425b      	negs	r3, r3
 8004158:	ee07 3a90 	vmov	s15, r3
 800415c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8004160:	eddf 6a92 	vldr	s13, [pc, #584]	; 80043ac <Dropping+0x5d4>
 8004164:	4b92      	ldr	r3, [pc, #584]	; (80043b0 <Dropping+0x5d8>)
 8004166:	edd3 7a00 	vldr	s15, [r3]
 800416a:	ee76 7ae7 	vsub.f32	s15, s13, s15
 800416e:	eef0 0a67 	vmov.f32	s1, s15
 8004172:	eeb0 0a47 	vmov.f32	s0, s14
 8004176:	488f      	ldr	r0, [pc, #572]	; (80043b4 <Dropping+0x5dc>)
 8004178:	f7fd fbda 	bl	8001930 <LinearGeneration>

			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 800417c:	4b91      	ldr	r3, [pc, #580]	; (80043c4 <Dropping+0x5ec>)
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	4618      	mov	r0, r3
 8004182:	f7fc f9e1 	bl	8000548 <__aeabi_f2d>
 8004186:	4604      	mov	r4, r0
 8004188:	460d      	mov	r5, r1
 800418a:	4b8f      	ldr	r3, [pc, #572]	; (80043c8 <Dropping+0x5f0>)
 800418c:	781b      	ldrb	r3, [r3, #0]
 800418e:	4618      	mov	r0, r3
 8004190:	f7fc f9c8 	bl	8000524 <__aeabi_i2d>
 8004194:	a382      	add	r3, pc, #520	; (adr r3, 80043a0 <Dropping+0x5c8>)
 8004196:	e9d3 2300 	ldrd	r2, r3, [r3]
 800419a:	f7fc fa2d 	bl	80005f8 <__aeabi_dmul>
 800419e:	4602      	mov	r2, r0
 80041a0:	460b      	mov	r3, r1
 80041a2:	4690      	mov	r8, r2
 80041a4:	4699      	mov	r9, r3
 80041a6:	4b83      	ldr	r3, [pc, #524]	; (80043b4 <Dropping+0x5dc>)
 80041a8:	edd3 7a00 	vldr	s15, [r3]
 80041ac:	ed9f 7a7f 	vldr	s14, [pc, #508]	; 80043ac <Dropping+0x5d4>
 80041b0:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80041b4:	ee17 0a90 	vmov	r0, s15
 80041b8:	f7fc f9c6 	bl	8000548 <__aeabi_f2d>
 80041bc:	4602      	mov	r2, r0
 80041be:	460b      	mov	r3, r1
 80041c0:	4640      	mov	r0, r8
 80041c2:	4649      	mov	r1, r9
 80041c4:	f7fc fa18 	bl	80005f8 <__aeabi_dmul>
 80041c8:	4602      	mov	r2, r0
 80041ca:	460b      	mov	r3, r1
 80041cc:	4610      	mov	r0, r2
 80041ce:	4619      	mov	r1, r3
 80041d0:	f04f 0200 	mov.w	r2, #0
 80041d4:	4b7d      	ldr	r3, [pc, #500]	; (80043cc <Dropping+0x5f4>)
 80041d6:	f7fc fa0f 	bl	80005f8 <__aeabi_dmul>
 80041da:	4602      	mov	r2, r0
 80041dc:	460b      	mov	r3, r1
 80041de:	4690      	mov	r8, r2
 80041e0:	4699      	mov	r9, r3
 80041e2:	4b7b      	ldr	r3, [pc, #492]	; (80043d0 <Dropping+0x5f8>)
 80041e4:	681b      	ldr	r3, [r3, #0]
 80041e6:	4618      	mov	r0, r3
 80041e8:	f7fc f9ae 	bl	8000548 <__aeabi_f2d>
 80041ec:	4602      	mov	r2, r0
 80041ee:	460b      	mov	r3, r1
 80041f0:	4640      	mov	r0, r8
 80041f2:	4649      	mov	r1, r9
 80041f4:	f7fc fb2a 	bl	800084c <__aeabi_ddiv>
 80041f8:	4602      	mov	r2, r0
 80041fa:	460b      	mov	r3, r1
 80041fc:	4620      	mov	r0, r4
 80041fe:	4629      	mov	r1, r5
 8004200:	f7fc f844 	bl	800028c <__adddf3>
 8004204:	4602      	mov	r2, r0
 8004206:	460b      	mov	r3, r1
 8004208:	4610      	mov	r0, r2
 800420a:	4619      	mov	r1, r3
 800420c:	f7fc fcec 	bl	8000be8 <__aeabi_d2f>
 8004210:	4603      	mov	r3, r0
 8004212:	4a6c      	ldr	r2, [pc, #432]	; (80043c4 <Dropping+0x5ec>)
 8004214:	6013      	str	r3, [r2, #0]

			if (SpeedCmd != 0)
 8004216:	4b6b      	ldr	r3, [pc, #428]	; (80043c4 <Dropping+0x5ec>)
 8004218:	edd3 7a00 	vldr	s15, [r3]
 800421c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004224:	d014      	beq.n	8004250 <Dropping+0x478>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8004226:	4b6b      	ldr	r3, [pc, #428]	; (80043d4 <Dropping+0x5fc>)
 8004228:	781b      	ldrb	r3, [r3, #0]
 800422a:	4a66      	ldr	r2, [pc, #408]	; (80043c4 <Dropping+0x5ec>)
 800422c:	edd2 7a00 	vldr	s15, [r2]
 8004230:	eeb0 0a67 	vmov.f32	s0, s15
 8004234:	4618      	mov	r0, r3
 8004236:	f7fd fc3f 	bl	8001ab8 <CalculateTimer3Period>
 800423a:	4603      	mov	r3, r0
 800423c:	b29a      	uxth	r2, r3
 800423e:	4b66      	ldr	r3, [pc, #408]	; (80043d8 <Dropping+0x600>)
 8004240:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8004242:	4b66      	ldr	r3, [pc, #408]	; (80043dc <Dropping+0x604>)
 8004244:	2201      	movs	r2, #1
 8004246:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 8004248:	4b5b      	ldr	r3, [pc, #364]	; (80043b8 <Dropping+0x5e0>)
 800424a:	2201      	movs	r2, #1
 800424c:	701a      	strb	r2, [r3, #0]
 800424e:	e002      	b.n	8004256 <Dropping+0x47e>
			}
			else
			{
				PulseGenerationFlag = false; // disable Pulse out
 8004250:	4b59      	ldr	r3, [pc, #356]	; (80043b8 <Dropping+0x5e0>)
 8004252:	2200      	movs	r2, #0
 8004254:	701a      	strb	r2, [r3, #0]
			}
			return false;
 8004256:	2300      	movs	r3, #0
 8004258:	e09d      	b.n	8004396 <Dropping+0x5be>
		}
		if (DropStep4)
 800425a:	4b58      	ldr	r3, [pc, #352]	; (80043bc <Dropping+0x5e4>)
 800425c:	781b      	ldrb	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	f000 8098 	beq.w	8004394 <Dropping+0x5bc>
		{
			if (SpeedCmd <= 0) // finish the Dropping
 8004264:	4b57      	ldr	r3, [pc, #348]	; (80043c4 <Dropping+0x5ec>)
 8004266:	edd3 7a00 	vldr	s15, [r3]
 800426a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800426e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004272:	d810      	bhi.n	8004296 <Dropping+0x4be>
			{
				StopPulseGenerating();
 8004274:	f7fd fbba 	bl	80019ec <StopPulseGenerating>
				SpeedCmd = 0;
 8004278:	4b52      	ldr	r3, [pc, #328]	; (80043c4 <Dropping+0x5ec>)
 800427a:	f04f 0200 	mov.w	r2, #0
 800427e:	601a      	str	r2, [r3, #0]
				CompleteDropping = true;
 8004280:	4b57      	ldr	r3, [pc, #348]	; (80043e0 <Dropping+0x608>)
 8004282:	2201      	movs	r2, #1
 8004284:	701a      	strb	r2, [r3, #0]
				DropStep4 = false;
 8004286:	4b4d      	ldr	r3, [pc, #308]	; (80043bc <Dropping+0x5e4>)
 8004288:	2200      	movs	r2, #0
 800428a:	701a      	strb	r2, [r3, #0]

				AccRef = GravityConst;
 800428c:	4a55      	ldr	r2, [pc, #340]	; (80043e4 <Dropping+0x60c>)
 800428e:	4b49      	ldr	r3, [pc, #292]	; (80043b4 <Dropping+0x5dc>)
 8004290:	601a      	str	r2, [r3, #0]
				return true;
 8004292:	2301      	movs	r3, #1
 8004294:	e07f      	b.n	8004396 <Dropping+0x5be>
			}
			AccRef = GravityConst-DroppingDecel;
 8004296:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80043ac <Dropping+0x5d4>
 800429a:	4b45      	ldr	r3, [pc, #276]	; (80043b0 <Dropping+0x5d8>)
 800429c:	edd3 7a00 	vldr	s15, [r3]
 80042a0:	ee77 7a67 	vsub.f32	s15, s14, s15
 80042a4:	4b43      	ldr	r3, [pc, #268]	; (80043b4 <Dropping+0x5dc>)
 80042a6:	edc3 7a00 	vstr	s15, [r3]
			SpeedCmd += SampleTime*0.001*(AccRef - GravityConst)*10/DrumRadius;
 80042aa:	4b46      	ldr	r3, [pc, #280]	; (80043c4 <Dropping+0x5ec>)
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	4618      	mov	r0, r3
 80042b0:	f7fc f94a 	bl	8000548 <__aeabi_f2d>
 80042b4:	4604      	mov	r4, r0
 80042b6:	460d      	mov	r5, r1
 80042b8:	4b43      	ldr	r3, [pc, #268]	; (80043c8 <Dropping+0x5f0>)
 80042ba:	781b      	ldrb	r3, [r3, #0]
 80042bc:	4618      	mov	r0, r3
 80042be:	f7fc f931 	bl	8000524 <__aeabi_i2d>
 80042c2:	a337      	add	r3, pc, #220	; (adr r3, 80043a0 <Dropping+0x5c8>)
 80042c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80042c8:	f7fc f996 	bl	80005f8 <__aeabi_dmul>
 80042cc:	4602      	mov	r2, r0
 80042ce:	460b      	mov	r3, r1
 80042d0:	4690      	mov	r8, r2
 80042d2:	4699      	mov	r9, r3
 80042d4:	4b37      	ldr	r3, [pc, #220]	; (80043b4 <Dropping+0x5dc>)
 80042d6:	edd3 7a00 	vldr	s15, [r3]
 80042da:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80043ac <Dropping+0x5d4>
 80042de:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80042e2:	ee17 0a90 	vmov	r0, s15
 80042e6:	f7fc f92f 	bl	8000548 <__aeabi_f2d>
 80042ea:	4602      	mov	r2, r0
 80042ec:	460b      	mov	r3, r1
 80042ee:	4640      	mov	r0, r8
 80042f0:	4649      	mov	r1, r9
 80042f2:	f7fc f981 	bl	80005f8 <__aeabi_dmul>
 80042f6:	4602      	mov	r2, r0
 80042f8:	460b      	mov	r3, r1
 80042fa:	4610      	mov	r0, r2
 80042fc:	4619      	mov	r1, r3
 80042fe:	f04f 0200 	mov.w	r2, #0
 8004302:	4b32      	ldr	r3, [pc, #200]	; (80043cc <Dropping+0x5f4>)
 8004304:	f7fc f978 	bl	80005f8 <__aeabi_dmul>
 8004308:	4602      	mov	r2, r0
 800430a:	460b      	mov	r3, r1
 800430c:	4690      	mov	r8, r2
 800430e:	4699      	mov	r9, r3
 8004310:	4b2f      	ldr	r3, [pc, #188]	; (80043d0 <Dropping+0x5f8>)
 8004312:	681b      	ldr	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7fc f917 	bl	8000548 <__aeabi_f2d>
 800431a:	4602      	mov	r2, r0
 800431c:	460b      	mov	r3, r1
 800431e:	4640      	mov	r0, r8
 8004320:	4649      	mov	r1, r9
 8004322:	f7fc fa93 	bl	800084c <__aeabi_ddiv>
 8004326:	4602      	mov	r2, r0
 8004328:	460b      	mov	r3, r1
 800432a:	4620      	mov	r0, r4
 800432c:	4629      	mov	r1, r5
 800432e:	f7fb ffad 	bl	800028c <__adddf3>
 8004332:	4602      	mov	r2, r0
 8004334:	460b      	mov	r3, r1
 8004336:	4610      	mov	r0, r2
 8004338:	4619      	mov	r1, r3
 800433a:	f7fc fc55 	bl	8000be8 <__aeabi_d2f>
 800433e:	4603      	mov	r3, r0
 8004340:	4a20      	ldr	r2, [pc, #128]	; (80043c4 <Dropping+0x5ec>)
 8004342:	6013      	str	r3, [r2, #0]
			if (SpeedCmd <= 0)
 8004344:	4b1f      	ldr	r3, [pc, #124]	; (80043c4 <Dropping+0x5ec>)
 8004346:	edd3 7a00 	vldr	s15, [r3]
 800434a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800434e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004352:	d803      	bhi.n	800435c <Dropping+0x584>
				SpeedCmd = 0;
 8004354:	4b1b      	ldr	r3, [pc, #108]	; (80043c4 <Dropping+0x5ec>)
 8004356:	f04f 0200 	mov.w	r2, #0
 800435a:	601a      	str	r2, [r3, #0]

			if (SpeedCmd != 0)
 800435c:	4b19      	ldr	r3, [pc, #100]	; (80043c4 <Dropping+0x5ec>)
 800435e:	edd3 7a00 	vldr	s15, [r3]
 8004362:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004366:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800436a:	d013      	beq.n	8004394 <Dropping+0x5bc>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800436c:	4b19      	ldr	r3, [pc, #100]	; (80043d4 <Dropping+0x5fc>)
 800436e:	781b      	ldrb	r3, [r3, #0]
 8004370:	4a14      	ldr	r2, [pc, #80]	; (80043c4 <Dropping+0x5ec>)
 8004372:	edd2 7a00 	vldr	s15, [r2]
 8004376:	eeb0 0a67 	vmov.f32	s0, s15
 800437a:	4618      	mov	r0, r3
 800437c:	f7fd fb9c 	bl	8001ab8 <CalculateTimer3Period>
 8004380:	4603      	mov	r3, r0
 8004382:	b29a      	uxth	r2, r3
 8004384:	4b14      	ldr	r3, [pc, #80]	; (80043d8 <Dropping+0x600>)
 8004386:	801a      	strh	r2, [r3, #0]
				StartPositionCount = true;
 8004388:	4b14      	ldr	r3, [pc, #80]	; (80043dc <Dropping+0x604>)
 800438a:	2201      	movs	r2, #1
 800438c:	701a      	strb	r2, [r3, #0]
				PulseGenerationFlag = true; // Enable Pulse out
 800438e:	4b0a      	ldr	r3, [pc, #40]	; (80043b8 <Dropping+0x5e0>)
 8004390:	2201      	movs	r2, #1
 8004392:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return false;
 8004394:	2300      	movs	r3, #0
}
 8004396:	4618      	mov	r0, r3
 8004398:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800439c:	f3af 8000 	nop.w
 80043a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80043a4:	3f50624d 	.word	0x3f50624d
 80043a8:	2000044a 	.word	0x2000044a
 80043ac:	c11ccccd 	.word	0xc11ccccd
 80043b0:	20000474 	.word	0x20000474
 80043b4:	20000010 	.word	0x20000010
 80043b8:	20000436 	.word	0x20000436
 80043bc:	2000044b 	.word	0x2000044b
 80043c0:	20000540 	.word	0x20000540
 80043c4:	20000518 	.word	0x20000518
 80043c8:	20000468 	.word	0x20000468
 80043cc:	40240000 	.word	0x40240000
 80043d0:	20000464 	.word	0x20000464
 80043d4:	20000003 	.word	0x20000003
 80043d8:	20000454 	.word	0x20000454
 80043dc:	20000440 	.word	0x20000440
 80043e0:	2000043a 	.word	0x2000043a
 80043e4:	c11ccccd 	.word	0xc11ccccd

080043e8 <PullAndDrop>:
bool PullAndDrop ()
{
 80043e8:	b580      	push	{r7, lr}
 80043ea:	af00      	add	r7, sp, #0
	if (CompleteDropping)
 80043ec:	4b0a      	ldr	r3, [pc, #40]	; (8004418 <PullAndDrop+0x30>)
 80043ee:	781b      	ldrb	r3, [r3, #0]
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d001      	beq.n	80043f8 <PullAndDrop+0x10>
	{
		return true;
 80043f4:	2301      	movs	r3, #1
 80043f6:	e00c      	b.n	8004412 <PullAndDrop+0x2a>
	}
	if (PullingExperiment()) // If finish pulling
 80043f8:	f7fe f802 	bl	8002400 <PullingExperiment>
 80043fc:	4603      	mov	r3, r0
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d006      	beq.n	8004410 <PullAndDrop+0x28>
	{
		if (Dropping()) // finish Dropping
 8004402:	f7ff fce9 	bl	8003dd8 <Dropping>
 8004406:	4603      	mov	r3, r0
 8004408:	2b00      	cmp	r3, #0
 800440a:	d001      	beq.n	8004410 <PullAndDrop+0x28>
			return true;
 800440c:	2301      	movs	r3, #1
 800440e:	e000      	b.n	8004412 <PullAndDrop+0x2a>
	}
	return false;
 8004410:	2300      	movs	r3, #0
}
 8004412:	4618      	mov	r0, r3
 8004414:	bd80      	pop	{r7, pc}
 8004416:	bf00      	nop
 8004418:	2000043a 	.word	0x2000043a

0800441c <StopSimulating>:

void StopSimulating()
{
 800441c:	b580      	push	{r7, lr}
 800441e:	af00      	add	r7, sp, #0
	IsReachTargetPosition = false;
 8004420:	4b1b      	ldr	r3, [pc, #108]	; (8004490 <StopSimulating+0x74>)
 8004422:	2200      	movs	r2, #0
 8004424:	701a      	strb	r2, [r3, #0]

	// Reset all the flag and state
	StartRunning = false;
 8004426:	4b1b      	ldr	r3, [pc, #108]	; (8004494 <StopSimulating+0x78>)
 8004428:	2200      	movs	r2, #0
 800442a:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 800442c:	4b1a      	ldr	r3, [pc, #104]	; (8004498 <StopSimulating+0x7c>)
 800442e:	2200      	movs	r2, #0
 8004430:	701a      	strb	r2, [r3, #0]
	CompleteDropping = false;
 8004432:	4b1a      	ldr	r3, [pc, #104]	; (800449c <StopSimulating+0x80>)
 8004434:	2200      	movs	r2, #0
 8004436:	701a      	strb	r2, [r3, #0]
	CompletePulling = false;
 8004438:	4b19      	ldr	r3, [pc, #100]	; (80044a0 <StopSimulating+0x84>)
 800443a:	2200      	movs	r2, #0
 800443c:	701a      	strb	r2, [r3, #0]

	PullStep1 = false;
 800443e:	4b19      	ldr	r3, [pc, #100]	; (80044a4 <StopSimulating+0x88>)
 8004440:	2200      	movs	r2, #0
 8004442:	701a      	strb	r2, [r3, #0]
	PullStep2 = false;
 8004444:	4b18      	ldr	r3, [pc, #96]	; (80044a8 <StopSimulating+0x8c>)
 8004446:	2200      	movs	r2, #0
 8004448:	701a      	strb	r2, [r3, #0]
	PullStep3 = false;
 800444a:	4b18      	ldr	r3, [pc, #96]	; (80044ac <StopSimulating+0x90>)
 800444c:	2200      	movs	r2, #0
 800444e:	701a      	strb	r2, [r3, #0]
	PullStep4 = false;
 8004450:	4b17      	ldr	r3, [pc, #92]	; (80044b0 <StopSimulating+0x94>)
 8004452:	2200      	movs	r2, #0
 8004454:	701a      	strb	r2, [r3, #0]
	PullStep5 = false;
 8004456:	4b17      	ldr	r3, [pc, #92]	; (80044b4 <StopSimulating+0x98>)
 8004458:	2200      	movs	r2, #0
 800445a:	701a      	strb	r2, [r3, #0]

	DropStep1 = false;
 800445c:	4b16      	ldr	r3, [pc, #88]	; (80044b8 <StopSimulating+0x9c>)
 800445e:	2200      	movs	r2, #0
 8004460:	701a      	strb	r2, [r3, #0]
	DropStep2 = false;
 8004462:	4b16      	ldr	r3, [pc, #88]	; (80044bc <StopSimulating+0xa0>)
 8004464:	2200      	movs	r2, #0
 8004466:	701a      	strb	r2, [r3, #0]
	DropStep3 = false;
 8004468:	4b15      	ldr	r3, [pc, #84]	; (80044c0 <StopSimulating+0xa4>)
 800446a:	2200      	movs	r2, #0
 800446c:	701a      	strb	r2, [r3, #0]
	DropStep4 = false;
 800446e:	4b15      	ldr	r3, [pc, #84]	; (80044c4 <StopSimulating+0xa8>)
 8004470:	2200      	movs	r2, #0
 8004472:	701a      	strb	r2, [r3, #0]

	StopPulseGenerating(); // Stop pulse generation
 8004474:	f7fd faba 	bl	80019ec <StopPulseGenerating>
	Timer3CountPeriod = 0;
 8004478:	4b13      	ldr	r3, [pc, #76]	; (80044c8 <StopSimulating+0xac>)
 800447a:	2200      	movs	r2, #0
 800447c:	801a      	strh	r2, [r3, #0]
	SpeedCmd = 0;
 800447e:	4b13      	ldr	r3, [pc, #76]	; (80044cc <StopSimulating+0xb0>)
 8004480:	f04f 0200 	mov.w	r2, #0
 8004484:	601a      	str	r2, [r3, #0]
	PulseSimuCount = 0; // Reset PulseCmd
 8004486:	4b12      	ldr	r3, [pc, #72]	; (80044d0 <StopSimulating+0xb4>)
 8004488:	2200      	movs	r2, #0
 800448a:	601a      	str	r2, [r3, #0]
}
 800448c:	bf00      	nop
 800448e:	bd80      	pop	{r7, pc}
 8004490:	20000438 	.word	0x20000438
 8004494:	20000432 	.word	0x20000432
 8004498:	20000433 	.word	0x20000433
 800449c:	2000043a 	.word	0x2000043a
 80044a0:	2000043b 	.word	0x2000043b
 80044a4:	20000442 	.word	0x20000442
 80044a8:	20000443 	.word	0x20000443
 80044ac:	20000444 	.word	0x20000444
 80044b0:	20000445 	.word	0x20000445
 80044b4:	20000446 	.word	0x20000446
 80044b8:	20000448 	.word	0x20000448
 80044bc:	20000449 	.word	0x20000449
 80044c0:	2000044a 	.word	0x2000044a
 80044c4:	2000044b 	.word	0x2000044b
 80044c8:	20000454 	.word	0x20000454
 80044cc:	20000518 	.word	0x20000518
 80044d0:	200004b4 	.word	0x200004b4

080044d4 <StopExperiment>:
void StopExperiment ()
{
 80044d4:	b580      	push	{r7, lr}
 80044d6:	af00      	add	r7, sp, #0
	StopPulseGenerating(); // Stop pulse generation
 80044d8:	f7fd fa88 	bl	80019ec <StopPulseGenerating>
	IsReachTargetPosition = false;
 80044dc:	4b1a      	ldr	r3, [pc, #104]	; (8004548 <StopExperiment+0x74>)
 80044de:	2200      	movs	r2, #0
 80044e0:	701a      	strb	r2, [r3, #0]
	IsPulseCheck = false;
 80044e2:	4b1a      	ldr	r3, [pc, #104]	; (800454c <StopExperiment+0x78>)
 80044e4:	2200      	movs	r2, #0
 80044e6:	701a      	strb	r2, [r3, #0]

	// Reset all the flag and state
	StartRunning = false;
 80044e8:	4b19      	ldr	r3, [pc, #100]	; (8004550 <StopExperiment+0x7c>)
 80044ea:	2200      	movs	r2, #0
 80044ec:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 80044ee:	4b19      	ldr	r3, [pc, #100]	; (8004554 <StopExperiment+0x80>)
 80044f0:	2200      	movs	r2, #0
 80044f2:	701a      	strb	r2, [r3, #0]
	CompleteDropping = false;
 80044f4:	4b18      	ldr	r3, [pc, #96]	; (8004558 <StopExperiment+0x84>)
 80044f6:	2200      	movs	r2, #0
 80044f8:	701a      	strb	r2, [r3, #0]
	CompletePulling = false;
 80044fa:	4b18      	ldr	r3, [pc, #96]	; (800455c <StopExperiment+0x88>)
 80044fc:	2200      	movs	r2, #0
 80044fe:	701a      	strb	r2, [r3, #0]

	DropStep1 = false;
 8004500:	4b17      	ldr	r3, [pc, #92]	; (8004560 <StopExperiment+0x8c>)
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
	DropStep2 = false;
 8004506:	4b17      	ldr	r3, [pc, #92]	; (8004564 <StopExperiment+0x90>)
 8004508:	2200      	movs	r2, #0
 800450a:	701a      	strb	r2, [r3, #0]
	DropStep3 = false;
 800450c:	4b16      	ldr	r3, [pc, #88]	; (8004568 <StopExperiment+0x94>)
 800450e:	2200      	movs	r2, #0
 8004510:	701a      	strb	r2, [r3, #0]
	DropStep4 = false;
 8004512:	4b16      	ldr	r3, [pc, #88]	; (800456c <StopExperiment+0x98>)
 8004514:	2200      	movs	r2, #0
 8004516:	701a      	strb	r2, [r3, #0]

	PullStep1 = false;
 8004518:	4b15      	ldr	r3, [pc, #84]	; (8004570 <StopExperiment+0x9c>)
 800451a:	2200      	movs	r2, #0
 800451c:	701a      	strb	r2, [r3, #0]
	PullStep2 = false;
 800451e:	4b15      	ldr	r3, [pc, #84]	; (8004574 <StopExperiment+0xa0>)
 8004520:	2200      	movs	r2, #0
 8004522:	701a      	strb	r2, [r3, #0]
	PullStep3 = false;
 8004524:	4b14      	ldr	r3, [pc, #80]	; (8004578 <StopExperiment+0xa4>)
 8004526:	2200      	movs	r2, #0
 8004528:	701a      	strb	r2, [r3, #0]
	PullStep4 = false;
 800452a:	4b14      	ldr	r3, [pc, #80]	; (800457c <StopExperiment+0xa8>)
 800452c:	2200      	movs	r2, #0
 800452e:	701a      	strb	r2, [r3, #0]
	PullStep5 = false;
 8004530:	4b13      	ldr	r3, [pc, #76]	; (8004580 <StopExperiment+0xac>)
 8004532:	2200      	movs	r2, #0
 8004534:	701a      	strb	r2, [r3, #0]


	Timer3CountPeriod = 0;
 8004536:	4b13      	ldr	r3, [pc, #76]	; (8004584 <StopExperiment+0xb0>)
 8004538:	2200      	movs	r2, #0
 800453a:	801a      	strh	r2, [r3, #0]
	SpeedCmd = 0;
 800453c:	4b12      	ldr	r3, [pc, #72]	; (8004588 <StopExperiment+0xb4>)
 800453e:	f04f 0200 	mov.w	r2, #0
 8004542:	601a      	str	r2, [r3, #0]
}
 8004544:	bf00      	nop
 8004546:	bd80      	pop	{r7, pc}
 8004548:	20000438 	.word	0x20000438
 800454c:	2000044c 	.word	0x2000044c
 8004550:	20000432 	.word	0x20000432
 8004554:	20000433 	.word	0x20000433
 8004558:	2000043a 	.word	0x2000043a
 800455c:	2000043b 	.word	0x2000043b
 8004560:	20000448 	.word	0x20000448
 8004564:	20000449 	.word	0x20000449
 8004568:	2000044a 	.word	0x2000044a
 800456c:	2000044b 	.word	0x2000044b
 8004570:	20000442 	.word	0x20000442
 8004574:	20000443 	.word	0x20000443
 8004578:	20000444 	.word	0x20000444
 800457c:	20000445 	.word	0x20000445
 8004580:	20000446 	.word	0x20000446
 8004584:	20000454 	.word	0x20000454
 8004588:	20000518 	.word	0x20000518
 800458c:	00000000 	.word	0x00000000

08004590 <CalculateRunningSpec>:
void CalculateRunningSpec () // Calculate running parameters
{
 8004590:	b580      	push	{r7, lr}
 8004592:	af00      	add	r7, sp, #0
	GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8004594:	4b10      	ldr	r3, [pc, #64]	; (80045d8 <CalculateRunningSpec+0x48>)
 8004596:	781b      	ldrb	r3, [r3, #0]
 8004598:	4618      	mov	r0, r3
 800459a:	f7fb ffc3 	bl	8000524 <__aeabi_i2d>
 800459e:	a30c      	add	r3, pc, #48	; (adr r3, 80045d0 <CalculateRunningSpec+0x40>)
 80045a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80045a4:	f7fc f828 	bl	80005f8 <__aeabi_dmul>
 80045a8:	4602      	mov	r2, r0
 80045aa:	460b      	mov	r3, r1
 80045ac:	4610      	mov	r0, r2
 80045ae:	4619      	mov	r1, r3
 80045b0:	f04f 0200 	mov.w	r2, #0
 80045b4:	4b09      	ldr	r3, [pc, #36]	; (80045dc <CalculateRunningSpec+0x4c>)
 80045b6:	f7fc f949 	bl	800084c <__aeabi_ddiv>
 80045ba:	4602      	mov	r2, r0
 80045bc:	460b      	mov	r3, r1
 80045be:	4610      	mov	r0, r2
 80045c0:	4619      	mov	r1, r3
 80045c2:	f7fc fb11 	bl	8000be8 <__aeabi_d2f>
 80045c6:	4603      	mov	r3, r0
 80045c8:	4a05      	ldr	r2, [pc, #20]	; (80045e0 <CalculateRunningSpec+0x50>)
 80045ca:	6013      	str	r3, [r2, #0]
}
 80045cc:	bf00      	nop
 80045ce:	bd80      	pop	{r7, pc}
 80045d0:	9999999a 	.word	0x9999999a
 80045d4:	3fb99999 	.word	0x3fb99999
 80045d8:	20000469 	.word	0x20000469
 80045dc:	40080000 	.word	0x40080000
 80045e0:	2000046c 	.word	0x2000046c

080045e4 <InitParams>:
void InitParams ()
{
 80045e4:	b580      	push	{r7, lr}
 80045e6:	b082      	sub	sp, #8
 80045e8:	af00      	add	r7, sp, #0
	// Load Parameters from the memory
	LoadSavedParam(MemoryAddress,Params);
 80045ea:	493c      	ldr	r1, [pc, #240]	; (80046dc <InitParams+0xf8>)
 80045ec:	483c      	ldr	r0, [pc, #240]	; (80046e0 <InitParams+0xfc>)
 80045ee:	f7fd f857 	bl	80016a0 <LoadSavedParam>

	// General Params
	DrumRadius = Params[0];
 80045f2:	4b3a      	ldr	r3, [pc, #232]	; (80046dc <InitParams+0xf8>)
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	4a3b      	ldr	r2, [pc, #236]	; (80046e4 <InitParams+0x100>)
 80045f8:	6013      	str	r3, [r2, #0]
	PullingSpeed = Params[1];
 80045fa:	4b38      	ldr	r3, [pc, #224]	; (80046dc <InitParams+0xf8>)
 80045fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004600:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004604:	edc7 7a01 	vstr	s15, [r7, #4]
 8004608:	793b      	ldrb	r3, [r7, #4]
 800460a:	b2da      	uxtb	r2, r3
 800460c:	4b36      	ldr	r3, [pc, #216]	; (80046e8 <InitParams+0x104>)
 800460e:	701a      	strb	r2, [r3, #0]
	StoppingTime = Params[2];
 8004610:	4b32      	ldr	r3, [pc, #200]	; (80046dc <InitParams+0xf8>)
 8004612:	edd3 7a02 	vldr	s15, [r3, #8]
 8004616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800461a:	ee17 3a90 	vmov	r3, s15
 800461e:	b29a      	uxth	r2, r3
 8004620:	4b32      	ldr	r3, [pc, #200]	; (80046ec <InitParams+0x108>)
 8004622:	801a      	strh	r2, [r3, #0]
	SampleTime = Params[3];
 8004624:	4b2d      	ldr	r3, [pc, #180]	; (80046dc <InitParams+0xf8>)
 8004626:	edd3 7a03 	vldr	s15, [r3, #12]
 800462a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462e:	edc7 7a01 	vstr	s15, [r7, #4]
 8004632:	793b      	ldrb	r3, [r7, #4]
 8004634:	b2da      	uxtb	r2, r3
 8004636:	4b2e      	ldr	r3, [pc, #184]	; (80046f0 <InitParams+0x10c>)
 8004638:	701a      	strb	r2, [r3, #0]

	//
	PullingPoint1 = Params[4];
 800463a:	4b28      	ldr	r3, [pc, #160]	; (80046dc <InitParams+0xf8>)
 800463c:	691b      	ldr	r3, [r3, #16]
 800463e:	4a2d      	ldr	r2, [pc, #180]	; (80046f4 <InitParams+0x110>)
 8004640:	6013      	str	r3, [r2, #0]
	PullingPoint2  = Params[5];
 8004642:	4b26      	ldr	r3, [pc, #152]	; (80046dc <InitParams+0xf8>)
 8004644:	695b      	ldr	r3, [r3, #20]
 8004646:	4a2c      	ldr	r2, [pc, #176]	; (80046f8 <InitParams+0x114>)
 8004648:	6013      	str	r3, [r2, #0]
	PullingPoint3 = Params[6];
 800464a:	4b24      	ldr	r3, [pc, #144]	; (80046dc <InitParams+0xf8>)
 800464c:	699b      	ldr	r3, [r3, #24]
 800464e:	4a2b      	ldr	r2, [pc, #172]	; (80046fc <InitParams+0x118>)
 8004650:	6013      	str	r3, [r2, #0]
	PullingPoint4 = Params[7];
 8004652:	4b22      	ldr	r3, [pc, #136]	; (80046dc <InitParams+0xf8>)
 8004654:	69db      	ldr	r3, [r3, #28]
 8004656:	4a2a      	ldr	r2, [pc, #168]	; (8004700 <InitParams+0x11c>)
 8004658:	6013      	str	r3, [r2, #0]


	// Pulling Stage Params
	PullingAcc1 = Params[8];
 800465a:	4b20      	ldr	r3, [pc, #128]	; (80046dc <InitParams+0xf8>)
 800465c:	6a1b      	ldr	r3, [r3, #32]
 800465e:	4a29      	ldr	r2, [pc, #164]	; (8004704 <InitParams+0x120>)
 8004660:	6013      	str	r3, [r2, #0]
	PullingAcc2 = Params[9];
 8004662:	4b1e      	ldr	r3, [pc, #120]	; (80046dc <InitParams+0xf8>)
 8004664:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004666:	4a28      	ldr	r2, [pc, #160]	; (8004708 <InitParams+0x124>)
 8004668:	6013      	str	r3, [r2, #0]
	PullingAcc3 = Params[10];
 800466a:	4b1c      	ldr	r3, [pc, #112]	; (80046dc <InitParams+0xf8>)
 800466c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800466e:	4a27      	ldr	r2, [pc, #156]	; (800470c <InitParams+0x128>)
 8004670:	6013      	str	r3, [r2, #0]

	// PID Controller params
	PullingAcc4 = Params[11];
 8004672:	4b1a      	ldr	r3, [pc, #104]	; (80046dc <InitParams+0xf8>)
 8004674:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004676:	4a26      	ldr	r2, [pc, #152]	; (8004710 <InitParams+0x12c>)
 8004678:	6013      	str	r3, [r2, #0]
	PullingAcc5 = Params[12];
 800467a:	4b18      	ldr	r3, [pc, #96]	; (80046dc <InitParams+0xf8>)
 800467c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800467e:	4a25      	ldr	r2, [pc, #148]	; (8004714 <InitParams+0x130>)
 8004680:	6013      	str	r3, [r2, #0]

	DistCoeff = Params[13];
 8004682:	4b16      	ldr	r3, [pc, #88]	; (80046dc <InitParams+0xf8>)
 8004684:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004686:	4a24      	ldr	r2, [pc, #144]	; (8004718 <InitParams+0x134>)
 8004688:	6013      	str	r3, [r2, #0]

	DroppingAccel = Params[14];
 800468a:	4b14      	ldr	r3, [pc, #80]	; (80046dc <InitParams+0xf8>)
 800468c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800468e:	4a23      	ldr	r2, [pc, #140]	; (800471c <InitParams+0x138>)
 8004690:	6013      	str	r3, [r2, #0]
	DroppingAccelDistance = Params[15];
 8004692:	4b12      	ldr	r3, [pc, #72]	; (80046dc <InitParams+0xf8>)
 8004694:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004696:	4a22      	ldr	r2, [pc, #136]	; (8004720 <InitParams+0x13c>)
 8004698:	6013      	str	r3, [r2, #0]
	DropAccelSlope = Params[16];
 800469a:	4b10      	ldr	r3, [pc, #64]	; (80046dc <InitParams+0xf8>)
 800469c:	edd3 7a10 	vldr	s15, [r3, #64]	; 0x40
 80046a0:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046a4:	edc7 7a01 	vstr	s15, [r7, #4]
 80046a8:	793b      	ldrb	r3, [r7, #4]
 80046aa:	b2da      	uxtb	r2, r3
 80046ac:	4b1d      	ldr	r3, [pc, #116]	; (8004724 <InitParams+0x140>)
 80046ae:	701a      	strb	r2, [r3, #0]
	DroppingDecel = Params[17];
 80046b0:	4b0a      	ldr	r3, [pc, #40]	; (80046dc <InitParams+0xf8>)
 80046b2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80046b4:	4a1c      	ldr	r2, [pc, #112]	; (8004728 <InitParams+0x144>)
 80046b6:	6013      	str	r3, [r2, #0]
	DropDecelSlope = Params[18];
 80046b8:	4b08      	ldr	r3, [pc, #32]	; (80046dc <InitParams+0xf8>)
 80046ba:	edd3 7a12 	vldr	s15, [r3, #72]	; 0x48
 80046be:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80046c2:	edc7 7a01 	vstr	s15, [r7, #4]
 80046c6:	793b      	ldrb	r3, [r7, #4]
 80046c8:	b2da      	uxtb	r2, r3
 80046ca:	4b18      	ldr	r3, [pc, #96]	; (800472c <InitParams+0x148>)
 80046cc:	701a      	strb	r2, [r3, #0]


	CalculateRunningSpec ();
 80046ce:	f7ff ff5f 	bl	8004590 <CalculateRunningSpec>
}
 80046d2:	bf00      	nop
 80046d4:	3708      	adds	r7, #8
 80046d6:	46bd      	mov	sp, r7
 80046d8:	bd80      	pop	{r7, pc}
 80046da:	bf00      	nop
 80046dc:	200004bc 	.word	0x200004bc
 80046e0:	08040000 	.word	0x08040000
 80046e4:	20000464 	.word	0x20000464
 80046e8:	20000469 	.word	0x20000469
 80046ec:	20000008 	.word	0x20000008
 80046f0:	20000468 	.word	0x20000468
 80046f4:	20000494 	.word	0x20000494
 80046f8:	20000498 	.word	0x20000498
 80046fc:	2000049c 	.word	0x2000049c
 8004700:	200004a0 	.word	0x200004a0
 8004704:	20000480 	.word	0x20000480
 8004708:	20000484 	.word	0x20000484
 800470c:	20000488 	.word	0x20000488
 8004710:	2000048c 	.word	0x2000048c
 8004714:	20000490 	.word	0x20000490
 8004718:	2000053c 	.word	0x2000053c
 800471c:	20000470 	.word	0x20000470
 8004720:	20000478 	.word	0x20000478
 8004724:	20000541 	.word	0x20000541
 8004728:	20000474 	.word	0x20000474
 800472c:	20000540 	.word	0x20000540

08004730 <ProcessReceivedCommand>:

void ProcessReceivedCommand () // Proceed the command from the UI
{
 8004730:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004734:	b0bf      	sub	sp, #252	; 0xfc
 8004736:	af22      	add	r7, sp, #136	; 0x88
	//ExtractMotionCode(); // Extract data to MotionCode
	switch ((int)MotionCode[0])
 8004738:	4bb4      	ldr	r3, [pc, #720]	; (8004a0c <ProcessReceivedCommand+0x2dc>)
 800473a:	edd3 7a00 	vldr	s15, [r3]
 800473e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004742:	ee17 3a90 	vmov	r3, s15
 8004746:	3b01      	subs	r3, #1
 8004748:	2b35      	cmp	r3, #53	; 0x35
 800474a:	f201 804a 	bhi.w	80057e2 <ProcessReceivedCommand+0x10b2>
 800474e:	a201      	add	r2, pc, #4	; (adr r2, 8004754 <ProcessReceivedCommand+0x24>)
 8004750:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004754:	08004855 	.word	0x08004855
 8004758:	0800488f 	.word	0x0800488f
 800475c:	080048b9 	.word	0x080048b9
 8004760:	08004977 	.word	0x08004977
 8004764:	08004a51 	.word	0x08004a51
 8004768:	08004ac5 	.word	0x08004ac5
 800476c:	08004af3 	.word	0x08004af3
 8004770:	08004b31 	.word	0x08004b31
 8004774:	08004b57 	.word	0x08004b57
 8004778:	080057e3 	.word	0x080057e3
 800477c:	08004d5d 	.word	0x08004d5d
 8004780:	08004dbd 	.word	0x08004dbd
 8004784:	08004e89 	.word	0x08004e89
 8004788:	08004f17 	.word	0x08004f17
 800478c:	080055db 	.word	0x080055db
 8004790:	08004f5d 	.word	0x08004f5d
 8004794:	08004fcf 	.word	0x08004fcf
 8004798:	08004fd7 	.word	0x08004fd7
 800479c:	080057e3 	.word	0x080057e3
 80047a0:	080057e3 	.word	0x080057e3
 80047a4:	080057e3 	.word	0x080057e3
 80047a8:	080057e3 	.word	0x080057e3
 80047ac:	080057e3 	.word	0x080057e3
 80047b0:	080057e3 	.word	0x080057e3
 80047b4:	080057e3 	.word	0x080057e3
 80047b8:	080057e3 	.word	0x080057e3
 80047bc:	08005007 	.word	0x08005007
 80047c0:	08005065 	.word	0x08005065
 80047c4:	080057e3 	.word	0x080057e3
 80047c8:	080057e3 	.word	0x080057e3
 80047cc:	08005075 	.word	0x08005075
 80047d0:	080050c9 	.word	0x080050c9
 80047d4:	08005175 	.word	0x08005175
 80047d8:	08005793 	.word	0x08005793
 80047dc:	080051c7 	.word	0x080051c7
 80047e0:	08005219 	.word	0x08005219
 80047e4:	0800526b 	.word	0x0800526b
 80047e8:	080052bb 	.word	0x080052bb
 80047ec:	080052e1 	.word	0x080052e1
 80047f0:	080057e3 	.word	0x080057e3
 80047f4:	0800535b 	.word	0x0800535b
 80047f8:	080053ad 	.word	0x080053ad
 80047fc:	08005471 	.word	0x08005471
 8004800:	0800482d 	.word	0x0800482d
 8004804:	08004bf1 	.word	0x08004bf1
 8004808:	080054c3 	.word	0x080054c3
 800480c:	080054d9 	.word	0x080054d9
 8004810:	0800552b 	.word	0x0800552b
 8004814:	0800562d 	.word	0x0800562d
 8004818:	080057e3 	.word	0x080057e3
 800481c:	08005589 	.word	0x08005589
 8004820:	08005687 	.word	0x08005687
 8004824:	080057e3 	.word	0x080057e3
 8004828:	08005739 	.word	0x08005739
	{
		case 44: //Emergency Stop Change to 44 to avoid data confusion
			if ((int)MotionCode[1] == 0) // 44/0
 800482c:	4b77      	ldr	r3, [pc, #476]	; (8004a0c <ProcessReceivedCommand+0x2dc>)
 800482e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004832:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004836:	ee17 3a90 	vmov	r3, s15
 800483a:	2b00      	cmp	r3, #0
 800483c:	d106      	bne.n	800484c <ProcessReceivedCommand+0x11c>
			{
				Estop(); // Estop button on the UI
 800483e:	f7fc fd07 	bl	8001250 <Estop>
				PulseGenerationFlag = false; // Stop generating pulses
 8004842:	4b73      	ldr	r3, [pc, #460]	; (8004a10 <ProcessReceivedCommand+0x2e0>)
 8004844:	2200      	movs	r2, #0
 8004846:	701a      	strb	r2, [r3, #0]
				//EMO = true;
			}
			else {AlarmReset();}  // 44/1, alarm button
			break;
 8004848:	f001 b802 	b.w	8005850 <ProcessReceivedCommand+0x1120>
			else {AlarmReset();}  // 44/1, alarm button
 800484c:	f7fc fcda 	bl	8001204 <AlarmReset>
			break;
 8004850:	f000 bffe 	b.w	8005850 <ProcessReceivedCommand+0x1120>
		case 1: // Stop button;
			if ((int)MotionCode[1] == 1) // 1/1
 8004854:	4b6d      	ldr	r3, [pc, #436]	; (8004a0c <ProcessReceivedCommand+0x2dc>)
 8004856:	edd3 7a01 	vldr	s15, [r3, #4]
 800485a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800485e:	ee17 3a90 	vmov	r3, s15
 8004862:	2b01      	cmp	r3, #1
 8004864:	f040 87bf 	bne.w	80057e6 <ProcessReceivedCommand+0x10b6>
			{
				if (MotorDriver) // FDA 7000
 8004868:	4b6a      	ldr	r3, [pc, #424]	; (8004a14 <ProcessReceivedCommand+0x2e4>)
 800486a:	781b      	ldrb	r3, [r3, #0]
 800486c:	2b00      	cmp	r3, #0
 800486e:	d005      	beq.n	800487c <ProcessReceivedCommand+0x14c>
				{
					Stop();
 8004870:	f7fc fcb8 	bl	80011e4 <Stop>
					StopExperiment();
 8004874:	f7ff fe2e 	bl	80044d4 <StopExperiment>
					StopPulseGenerating();
					StopExperiment();
					IsHoming = false;
				}
			}
			break;
 8004878:	f000 bfb5 	b.w	80057e6 <ProcessReceivedCommand+0x10b6>
					StopPulseGenerating();
 800487c:	f7fd f8b6 	bl	80019ec <StopPulseGenerating>
					StopExperiment();
 8004880:	f7ff fe28 	bl	80044d4 <StopExperiment>
					IsHoming = false;
 8004884:	4b64      	ldr	r3, [pc, #400]	; (8004a18 <ProcessReceivedCommand+0x2e8>)
 8004886:	2200      	movs	r2, #0
 8004888:	701a      	strb	r2, [r3, #0]
			break;
 800488a:	f000 bfac 	b.w	80057e6 <ProcessReceivedCommand+0x10b6>
		case 2: // Set Control Mode, no use now
			if ((int)MotionCode[1] == 1) // 2/1 position mode
 800488e:	4b5f      	ldr	r3, [pc, #380]	; (8004a0c <ProcessReceivedCommand+0x2dc>)
 8004890:	edd3 7a01 	vldr	s15, [r3, #4]
 8004894:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004898:	ee17 3a90 	vmov	r3, s15
 800489c:	2b01      	cmp	r3, #1
 800489e:	d106      	bne.n	80048ae <ProcessReceivedCommand+0x17e>
					{
						PositionControlMode = true;
 80048a0:	4b5e      	ldr	r3, [pc, #376]	; (8004a1c <ProcessReceivedCommand+0x2ec>)
 80048a2:	2201      	movs	r2, #1
 80048a4:	701a      	strb	r2, [r3, #0]
						DriverInit(); // Init Position Mode
 80048a6:	f7fc fd13 	bl	80012d0 <DriverInit>
			else // 2/0 speed mode
					{
						PositionControlMode = false;
						//SetSpeedMode(); // Set to Speed Mode
					}
			break;
 80048aa:	f000 bfd1 	b.w	8005850 <ProcessReceivedCommand+0x1120>
						PositionControlMode = false;
 80048ae:	4b5b      	ldr	r3, [pc, #364]	; (8004a1c <ProcessReceivedCommand+0x2ec>)
 80048b0:	2200      	movs	r2, #0
 80048b2:	701a      	strb	r2, [r3, #0]
			break;
 80048b4:	f000 bfcc 	b.w	8005850 <ProcessReceivedCommand+0x1120>
		case 3: // Jog Control

			if ((int)MotionCode[1] == 1) // 3/1 move up button
 80048b8:	4b54      	ldr	r3, [pc, #336]	; (8004a0c <ProcessReceivedCommand+0x2dc>)
 80048ba:	edd3 7a01 	vldr	s15, [r3, #4]
 80048be:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80048c2:	ee17 3a90 	vmov	r3, s15
 80048c6:	2b01      	cmp	r3, #1
 80048c8:	d12a      	bne.n	8004920 <ProcessReceivedCommand+0x1f0>
			{
					if (PositionControlMode) // If the control Mode is Position Mode
 80048ca:	4b54      	ldr	r3, [pc, #336]	; (8004a1c <ProcessReceivedCommand+0x2ec>)
 80048cc:	781b      	ldrb	r3, [r3, #0]
 80048ce:	2b00      	cmp	r3, #0
 80048d0:	d022      	beq.n	8004918 <ProcessReceivedCommand+0x1e8>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80048d2:	4b50      	ldr	r3, [pc, #320]	; (8004a14 <ProcessReceivedCommand+0x2e4>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	4a52      	ldr	r2, [pc, #328]	; (8004a20 <ProcessReceivedCommand+0x2f0>)
 80048d8:	8812      	ldrh	r2, [r2, #0]
 80048da:	ee07 2a90 	vmov	s15, r2
 80048de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80048e2:	eeb0 0a67 	vmov.f32	s0, s15
 80048e6:	4618      	mov	r0, r3
 80048e8:	f7fd f8e6 	bl	8001ab8 <CalculateTimer3Period>
 80048ec:	4603      	mov	r3, r0
 80048ee:	b29a      	uxth	r2, r3
 80048f0:	4b4c      	ldr	r3, [pc, #304]	; (8004a24 <ProcessReceivedCommand+0x2f4>)
 80048f2:	801a      	strh	r2, [r3, #0]
						PRIsToggled = true; // PR phase is 90 deg late
 80048f4:	4b4c      	ldr	r3, [pc, #304]	; (8004a28 <ProcessReceivedCommand+0x2f8>)
 80048f6:	2201      	movs	r2, #1
 80048f8:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up
 80048fa:	4b4c      	ldr	r3, [pc, #304]	; (8004a2c <ProcessReceivedCommand+0x2fc>)
 80048fc:	2200      	movs	r2, #0
 80048fe:	701a      	strb	r2, [r3, #0]
						StartPositionCount = true;
 8004900:	4b4b      	ldr	r3, [pc, #300]	; (8004a30 <ProcessReceivedCommand+0x300>)
 8004902:	2201      	movs	r2, #1
 8004904:	701a      	strb	r2, [r3, #0]
						InitPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 8004906:	f7fd f895 	bl	8001a34 <InitPulseGenerating>
						PulseGenerationFlag = true;
 800490a:	4b41      	ldr	r3, [pc, #260]	; (8004a10 <ProcessReceivedCommand+0x2e0>)
 800490c:	2201      	movs	r2, #1
 800490e:	701a      	strb	r2, [r3, #0]
						DisableSTOP(); // Turn off STOP to run
 8004910:	f7fc fcaa 	bl	8001268 <DisableSTOP>
					else // Speed Mode
					{
						JogMoveDown(); // Disable the stop
					}
			}
			break;
 8004914:	f000 bf9c 	b.w	8005850 <ProcessReceivedCommand+0x1120>
						JogMoveUp(); // Disable the stop
 8004918:	f7fc fcb2 	bl	8001280 <JogMoveUp>
			break;
 800491c:	f000 bf98 	b.w	8005850 <ProcessReceivedCommand+0x1120>
					if (PositionControlMode) // If the control Mode is Position Mode
 8004920:	4b3e      	ldr	r3, [pc, #248]	; (8004a1c <ProcessReceivedCommand+0x2ec>)
 8004922:	781b      	ldrb	r3, [r3, #0]
 8004924:	2b00      	cmp	r3, #0
 8004926:	d022      	beq.n	800496e <ProcessReceivedCommand+0x23e>
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8004928:	4b3a      	ldr	r3, [pc, #232]	; (8004a14 <ProcessReceivedCommand+0x2e4>)
 800492a:	781b      	ldrb	r3, [r3, #0]
 800492c:	4a3c      	ldr	r2, [pc, #240]	; (8004a20 <ProcessReceivedCommand+0x2f0>)
 800492e:	8812      	ldrh	r2, [r2, #0]
 8004930:	ee07 2a90 	vmov	s15, r2
 8004934:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004938:	eeb0 0a67 	vmov.f32	s0, s15
 800493c:	4618      	mov	r0, r3
 800493e:	f7fd f8bb 	bl	8001ab8 <CalculateTimer3Period>
 8004942:	4603      	mov	r3, r0
 8004944:	b29a      	uxth	r2, r3
 8004946:	4b37      	ldr	r3, [pc, #220]	; (8004a24 <ProcessReceivedCommand+0x2f4>)
 8004948:	801a      	strh	r2, [r3, #0]
						PRIsToggled = false; //
 800494a:	4b37      	ldr	r3, [pc, #220]	; (8004a28 <ProcessReceivedCommand+0x2f8>)
 800494c:	2200      	movs	r2, #0
 800494e:	701a      	strb	r2, [r3, #0]
						Direction = true; // true = move down
 8004950:	4b36      	ldr	r3, [pc, #216]	; (8004a2c <ProcessReceivedCommand+0x2fc>)
 8004952:	2201      	movs	r2, #1
 8004954:	701a      	strb	r2, [r3, #0]
						StartPositionCount = true;// Enable PositionCmd Count
 8004956:	4b36      	ldr	r3, [pc, #216]	; (8004a30 <ProcessReceivedCommand+0x300>)
 8004958:	2201      	movs	r2, #1
 800495a:	701a      	strb	r2, [r3, #0]
						InitPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 800495c:	f7fd f86a 	bl	8001a34 <InitPulseGenerating>
						PulseGenerationFlag = true;
 8004960:	4b2b      	ldr	r3, [pc, #172]	; (8004a10 <ProcessReceivedCommand+0x2e0>)
 8004962:	2201      	movs	r2, #1
 8004964:	701a      	strb	r2, [r3, #0]
						DisableSTOP();	// Turn off STOP to run
 8004966:	f7fc fc7f 	bl	8001268 <DisableSTOP>
			break;
 800496a:	f000 bf71 	b.w	8005850 <ProcessReceivedCommand+0x1120>
						JogMoveDown(); // Disable the stop
 800496e:	f7fc fc9b 	bl	80012a8 <JogMoveDown>
			break;
 8004972:	f000 bf6d 	b.w	8005850 <ProcessReceivedCommand+0x1120>
		case 4: // Start Running Buton (Start Running Experiment)
			if ((int)MotionCode[1] == 1) // Start runing
 8004976:	4b25      	ldr	r3, [pc, #148]	; (8004a0c <ProcessReceivedCommand+0x2dc>)
 8004978:	edd3 7a01 	vldr	s15, [r3, #4]
 800497c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004980:	ee17 3a90 	vmov	r3, s15
 8004984:	2b01      	cmp	r3, #1
 8004986:	d13c      	bne.n	8004a02 <ProcessReceivedCommand+0x2d2>
				{
					if ( Initialized )
 8004988:	4b2a      	ldr	r3, [pc, #168]	; (8004a34 <ProcessReceivedCommand+0x304>)
 800498a:	781b      	ldrb	r3, [r3, #0]
 800498c:	2b00      	cmp	r3, #0
 800498e:	d01e      	beq.n	80049ce <ProcessReceivedCommand+0x29e>
					{
						TxPCLen = sprintf(ResponseMess,"g4/1e"); // Respond that the experiment started
 8004990:	4929      	ldr	r1, [pc, #164]	; (8004a38 <ProcessReceivedCommand+0x308>)
 8004992:	482a      	ldr	r0, [pc, #168]	; (8004a3c <ProcessReceivedCommand+0x30c>)
 8004994:	f007 f816 	bl	800b9c4 <siprintf>
 8004998:	4603      	mov	r3, r0
 800499a:	b2da      	uxtb	r2, r3
 800499c:	4b28      	ldr	r3, [pc, #160]	; (8004a40 <ProcessReceivedCommand+0x310>)
 800499e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80049a0:	4b27      	ldr	r3, [pc, #156]	; (8004a40 <ProcessReceivedCommand+0x310>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	b29a      	uxth	r2, r3
 80049a6:	23c8      	movs	r3, #200	; 0xc8
 80049a8:	4924      	ldr	r1, [pc, #144]	; (8004a3c <ProcessReceivedCommand+0x30c>)
 80049aa:	4826      	ldr	r0, [pc, #152]	; (8004a44 <ProcessReceivedCommand+0x314>)
 80049ac:	f005 f929 	bl	8009c02 <HAL_UART_Transmit>
						HAL_Delay(200);
 80049b0:	20c8      	movs	r0, #200	; 0xc8
 80049b2:	f002 ff03 	bl	80077bc <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 80049b6:	220f      	movs	r2, #15
 80049b8:	2100      	movs	r1, #0
 80049ba:	4820      	ldr	r0, [pc, #128]	; (8004a3c <ProcessReceivedCommand+0x30c>)
 80049bc:	f006 f97a 	bl	800acb4 <memset>

						InitializeRunning (ExperimentMode);
 80049c0:	4b21      	ldr	r3, [pc, #132]	; (8004a48 <ProcessReceivedCommand+0x318>)
 80049c2:	781b      	ldrb	r3, [r3, #0]
 80049c4:	4618      	mov	r0, r3
 80049c6:	f7fd fc77 	bl	80022b8 <InitializeRunning>
				}
			else // Stop running
				{
					StopExperiment();
				}
			break;
 80049ca:	f000 bf41 	b.w	8005850 <ProcessReceivedCommand+0x1120>
						TxPCLen = sprintf(ResponseMess,"g4/0e"); // Respond that the experiment can not start
 80049ce:	491f      	ldr	r1, [pc, #124]	; (8004a4c <ProcessReceivedCommand+0x31c>)
 80049d0:	481a      	ldr	r0, [pc, #104]	; (8004a3c <ProcessReceivedCommand+0x30c>)
 80049d2:	f006 fff7 	bl	800b9c4 <siprintf>
 80049d6:	4603      	mov	r3, r0
 80049d8:	b2da      	uxtb	r2, r3
 80049da:	4b19      	ldr	r3, [pc, #100]	; (8004a40 <ProcessReceivedCommand+0x310>)
 80049dc:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80049de:	4b18      	ldr	r3, [pc, #96]	; (8004a40 <ProcessReceivedCommand+0x310>)
 80049e0:	781b      	ldrb	r3, [r3, #0]
 80049e2:	b29a      	uxth	r2, r3
 80049e4:	23c8      	movs	r3, #200	; 0xc8
 80049e6:	4915      	ldr	r1, [pc, #84]	; (8004a3c <ProcessReceivedCommand+0x30c>)
 80049e8:	4816      	ldr	r0, [pc, #88]	; (8004a44 <ProcessReceivedCommand+0x314>)
 80049ea:	f005 f90a 	bl	8009c02 <HAL_UART_Transmit>
						HAL_Delay(200);
 80049ee:	20c8      	movs	r0, #200	; 0xc8
 80049f0:	f002 fee4 	bl	80077bc <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 80049f4:	220f      	movs	r2, #15
 80049f6:	2100      	movs	r1, #0
 80049f8:	4810      	ldr	r0, [pc, #64]	; (8004a3c <ProcessReceivedCommand+0x30c>)
 80049fa:	f006 f95b 	bl	800acb4 <memset>
			break;
 80049fe:	f000 bf27 	b.w	8005850 <ProcessReceivedCommand+0x1120>
					StopExperiment();
 8004a02:	f7ff fd67 	bl	80044d4 <StopExperiment>
			break;
 8004a06:	f000 bf23 	b.w	8005850 <ProcessReceivedCommand+0x1120>
 8004a0a:	bf00      	nop
 8004a0c:	2000051c 	.word	0x2000051c
 8004a10:	20000436 	.word	0x20000436
 8004a14:	20000003 	.word	0x20000003
 8004a18:	2000043c 	.word	0x2000043c
 8004a1c:	20000002 	.word	0x20000002
 8004a20:	20000006 	.word	0x20000006
 8004a24:	20000454 	.word	0x20000454
 8004a28:	2000043f 	.word	0x2000043f
 8004a2c:	20000434 	.word	0x20000434
 8004a30:	20000440 	.word	0x20000440
 8004a34:	2000043d 	.word	0x2000043d
 8004a38:	0800f6f4 	.word	0x0800f6f4
 8004a3c:	2000041c 	.word	0x2000041c
 8004a40:	20000414 	.word	0x20000414
 8004a44:	200002f8 	.word	0x200002f8
 8004a48:	20000005 	.word	0x20000005
 8004a4c:	0800f6fc 	.word	0x0800f6fc

		case 5: // Set Jog Speed
			if (PositionControlMode) // If it is the position control mode, then change the JogSpeed
 8004a50:	4b56      	ldr	r3, [pc, #344]	; (8004bac <ProcessReceivedCommand+0x47c>)
 8004a52:	781b      	ldrb	r3, [r3, #0]
 8004a54:	2b00      	cmp	r3, #0
 8004a56:	f000 86c8 	beq.w	80057ea <ProcessReceivedCommand+0x10ba>
			{
				JogSpeed = (int)(MotionCode[1]); // unit: rpm
 8004a5a:	4b55      	ldr	r3, [pc, #340]	; (8004bb0 <ProcessReceivedCommand+0x480>)
 8004a5c:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a60:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004a64:	ee17 3a90 	vmov	r3, s15
 8004a68:	b29a      	uxth	r2, r3
 8004a6a:	4b52      	ldr	r3, [pc, #328]	; (8004bb4 <ProcessReceivedCommand+0x484>)
 8004a6c:	801a      	strh	r2, [r3, #0]
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8004a6e:	4b52      	ldr	r3, [pc, #328]	; (8004bb8 <ProcessReceivedCommand+0x488>)
 8004a70:	781b      	ldrb	r3, [r3, #0]
 8004a72:	4a50      	ldr	r2, [pc, #320]	; (8004bb4 <ProcessReceivedCommand+0x484>)
 8004a74:	8812      	ldrh	r2, [r2, #0]
 8004a76:	ee07 2a90 	vmov	s15, r2
 8004a7a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004a7e:	eeb0 0a67 	vmov.f32	s0, s15
 8004a82:	4618      	mov	r0, r3
 8004a84:	f7fd f818 	bl	8001ab8 <CalculateTimer3Period>
 8004a88:	4603      	mov	r3, r0
 8004a8a:	b29a      	uxth	r2, r3
 8004a8c:	4b4b      	ldr	r3, [pc, #300]	; (8004bbc <ProcessReceivedCommand+0x48c>)
 8004a8e:	801a      	strh	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"j%de",JogSpeed);
 8004a90:	4b48      	ldr	r3, [pc, #288]	; (8004bb4 <ProcessReceivedCommand+0x484>)
 8004a92:	881b      	ldrh	r3, [r3, #0]
 8004a94:	461a      	mov	r2, r3
 8004a96:	494a      	ldr	r1, [pc, #296]	; (8004bc0 <ProcessReceivedCommand+0x490>)
 8004a98:	484a      	ldr	r0, [pc, #296]	; (8004bc4 <ProcessReceivedCommand+0x494>)
 8004a9a:	f006 ff93 	bl	800b9c4 <siprintf>
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	b2da      	uxtb	r2, r3
 8004aa2:	4b49      	ldr	r3, [pc, #292]	; (8004bc8 <ProcessReceivedCommand+0x498>)
 8004aa4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 8004aa6:	4b48      	ldr	r3, [pc, #288]	; (8004bc8 <ProcessReceivedCommand+0x498>)
 8004aa8:	781b      	ldrb	r3, [r3, #0]
 8004aaa:	b29a      	uxth	r2, r3
 8004aac:	23c8      	movs	r3, #200	; 0xc8
 8004aae:	4945      	ldr	r1, [pc, #276]	; (8004bc4 <ProcessReceivedCommand+0x494>)
 8004ab0:	4846      	ldr	r0, [pc, #280]	; (8004bcc <ProcessReceivedCommand+0x49c>)
 8004ab2:	f005 f8a6 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess)); // Clear the array
 8004ab6:	220f      	movs	r2, #15
 8004ab8:	2100      	movs	r1, #0
 8004aba:	4842      	ldr	r0, [pc, #264]	; (8004bc4 <ProcessReceivedCommand+0x494>)
 8004abc:	f006 f8fa 	bl	800acb4 <memset>

				// = (60*10e6)/(JogSpeed*EncoderRelsolution*Timer3Period)
				// Where JogSpeed in rpm; EcoderRelsolution in pulses, Timer3Period in us
				// Timer3 period in us = 2 us
			}
			break;
 8004ac0:	f000 be93 	b.w	80057ea <ProcessReceivedCommand+0x10ba>

		case 6: // 6 request driver data
			if((int)MotionCode[1] == 1)
 8004ac4:	4b3a      	ldr	r3, [pc, #232]	; (8004bb0 <ProcessReceivedCommand+0x480>)
 8004ac6:	edd3 7a01 	vldr	s15, [r3, #4]
 8004aca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004ace:	ee17 3a90 	vmov	r3, s15
 8004ad2:	2b01      	cmp	r3, #1
 8004ad4:	d108      	bne.n	8004ae8 <ProcessReceivedCommand+0x3b8>
			{
				UIDataRequest = true;
 8004ad6:	4b3e      	ldr	r3, [pc, #248]	; (8004bd0 <ProcessReceivedCommand+0x4a0>)
 8004ad8:	2201      	movs	r2, #1
 8004ada:	701a      	strb	r2, [r3, #0]
				ReadMultiRegister(StE03,5);
 8004adc:	2105      	movs	r1, #5
 8004ade:	200c      	movs	r0, #12
 8004ae0:	f7fc fd62 	bl	80015a8 <ReadMultiRegister>
			} // 6/1 If the UI request data
			else
			{
				UIDataRequest = false;
			}
			break;
 8004ae4:	f000 beb4 	b.w	8005850 <ProcessReceivedCommand+0x1120>
				UIDataRequest = false;
 8004ae8:	4b39      	ldr	r3, [pc, #228]	; (8004bd0 <ProcessReceivedCommand+0x4a0>)
 8004aea:	2200      	movs	r2, #0
 8004aec:	701a      	strb	r2, [r3, #0]
			break;
 8004aee:	f000 beaf 	b.w	8005850 <ProcessReceivedCommand+0x1120>

		case 7: // Save System Params
			// Save to the flash memory
			SaveSystemParams(&numofwords);
 8004af2:	4838      	ldr	r0, [pc, #224]	; (8004bd4 <ProcessReceivedCommand+0x4a4>)
 8004af4:	f7fc fe12 	bl	800171c <SaveSystemParams>
			HAL_Delay(500);
 8004af8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004afc:	f002 fe5e 	bl	80077bc <HAL_Delay>
			SaveSystemParams(&numofwords); // Do twice times
 8004b00:	4834      	ldr	r0, [pc, #208]	; (8004bd4 <ProcessReceivedCommand+0x4a4>)
 8004b02:	f7fc fe0b 	bl	800171c <SaveSystemParams>
			// Send back to the UI to notify
			char MessageBuffer[10];
			TxPCLen = sprintf(MessageBuffer,"r7/1e");
 8004b06:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8004b0a:	4933      	ldr	r1, [pc, #204]	; (8004bd8 <ProcessReceivedCommand+0x4a8>)
 8004b0c:	4618      	mov	r0, r3
 8004b0e:	f006 ff59 	bl	800b9c4 <siprintf>
 8004b12:	4603      	mov	r3, r0
 8004b14:	b2da      	uxtb	r2, r3
 8004b16:	4b2c      	ldr	r3, [pc, #176]	; (8004bc8 <ProcessReceivedCommand+0x498>)
 8004b18:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t *)MessageBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004b1a:	4b2b      	ldr	r3, [pc, #172]	; (8004bc8 <ProcessReceivedCommand+0x498>)
 8004b1c:	781b      	ldrb	r3, [r3, #0]
 8004b1e:	b29a      	uxth	r2, r3
 8004b20:	f107 0164 	add.w	r1, r7, #100	; 0x64
 8004b24:	2364      	movs	r3, #100	; 0x64
 8004b26:	4829      	ldr	r0, [pc, #164]	; (8004bcc <ProcessReceivedCommand+0x49c>)
 8004b28:	f005 f86b 	bl	8009c02 <HAL_UART_Transmit>
			break;
 8004b2c:	f000 be90 	b.w	8005850 <ProcessReceivedCommand+0x1120>

		case 8: // Request reading digital driver output
			if((int)MotionCode[1] == 1) {OutputDataRequest = true;} // 8/1 = request
 8004b30:	4b1f      	ldr	r3, [pc, #124]	; (8004bb0 <ProcessReceivedCommand+0x480>)
 8004b32:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004b3a:	ee17 3a90 	vmov	r3, s15
 8004b3e:	2b01      	cmp	r3, #1
 8004b40:	d104      	bne.n	8004b4c <ProcessReceivedCommand+0x41c>
 8004b42:	4b26      	ldr	r3, [pc, #152]	; (8004bdc <ProcessReceivedCommand+0x4ac>)
 8004b44:	2201      	movs	r2, #1
 8004b46:	701a      	strb	r2, [r3, #0]
			else OutputDataRequest = false; // 8/0 = stop request
			break;
 8004b48:	f000 be82 	b.w	8005850 <ProcessReceivedCommand+0x1120>
			else OutputDataRequest = false; // 8/0 = stop request
 8004b4c:	4b23      	ldr	r3, [pc, #140]	; (8004bdc <ProcessReceivedCommand+0x4ac>)
 8004b4e:	2200      	movs	r2, #0
 8004b50:	701a      	strb	r2, [r3, #0]
			break;
 8004b52:	f000 be7d 	b.w	8005850 <ProcessReceivedCommand+0x1120>
		case 9: // Set Pulling Point 4
			if (StartRunning) // Setting is not available while running
 8004b56:	4b22      	ldr	r3, [pc, #136]	; (8004be0 <ProcessReceivedCommand+0x4b0>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	f040 8647 	bne.w	80057ee <ProcessReceivedCommand+0x10be>
			{
				break;
			}
			else
			{
				PullingPoint4 = MotionCode[1];
 8004b60:	4b13      	ldr	r3, [pc, #76]	; (8004bb0 <ProcessReceivedCommand+0x480>)
 8004b62:	685b      	ldr	r3, [r3, #4]
 8004b64:	4a1f      	ldr	r2, [pc, #124]	; (8004be4 <ProcessReceivedCommand+0x4b4>)
 8004b66:	6013      	str	r3, [r2, #0]
				Initialized = false; // This required to re-initialize the system
 8004b68:	4b1f      	ldr	r3, [pc, #124]	; (8004be8 <ProcessReceivedCommand+0x4b8>)
 8004b6a:	2200      	movs	r2, #0
 8004b6c:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r9/%.2fe",PullingPoint4);
 8004b6e:	4b1d      	ldr	r3, [pc, #116]	; (8004be4 <ProcessReceivedCommand+0x4b4>)
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	4618      	mov	r0, r3
 8004b74:	f7fb fce8 	bl	8000548 <__aeabi_f2d>
 8004b78:	4602      	mov	r2, r0
 8004b7a:	460b      	mov	r3, r1
 8004b7c:	491b      	ldr	r1, [pc, #108]	; (8004bec <ProcessReceivedCommand+0x4bc>)
 8004b7e:	4811      	ldr	r0, [pc, #68]	; (8004bc4 <ProcessReceivedCommand+0x494>)
 8004b80:	f006 ff20 	bl	800b9c4 <siprintf>
 8004b84:	4603      	mov	r3, r0
 8004b86:	b2da      	uxtb	r2, r3
 8004b88:	4b0f      	ldr	r3, [pc, #60]	; (8004bc8 <ProcessReceivedCommand+0x498>)
 8004b8a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004b8c:	4b0e      	ldr	r3, [pc, #56]	; (8004bc8 <ProcessReceivedCommand+0x498>)
 8004b8e:	781b      	ldrb	r3, [r3, #0]
 8004b90:	b29a      	uxth	r2, r3
 8004b92:	2364      	movs	r3, #100	; 0x64
 8004b94:	490b      	ldr	r1, [pc, #44]	; (8004bc4 <ProcessReceivedCommand+0x494>)
 8004b96:	480d      	ldr	r0, [pc, #52]	; (8004bcc <ProcessReceivedCommand+0x49c>)
 8004b98:	f005 f833 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004b9c:	220f      	movs	r2, #15
 8004b9e:	2100      	movs	r1, #0
 8004ba0:	4808      	ldr	r0, [pc, #32]	; (8004bc4 <ProcessReceivedCommand+0x494>)
 8004ba2:	f006 f887 	bl	800acb4 <memset>
			}
			break;
 8004ba6:	f000 be53 	b.w	8005850 <ProcessReceivedCommand+0x1120>
 8004baa:	bf00      	nop
 8004bac:	20000002 	.word	0x20000002
 8004bb0:	2000051c 	.word	0x2000051c
 8004bb4:	20000006 	.word	0x20000006
 8004bb8:	20000003 	.word	0x20000003
 8004bbc:	20000454 	.word	0x20000454
 8004bc0:	0800f704 	.word	0x0800f704
 8004bc4:	2000041c 	.word	0x2000041c
 8004bc8:	20000414 	.word	0x20000414
 8004bcc:	200002f8 	.word	0x200002f8
 8004bd0:	20000435 	.word	0x20000435
 8004bd4:	2000000c 	.word	0x2000000c
 8004bd8:	0800f70c 	.word	0x0800f70c
 8004bdc:	20000001 	.word	0x20000001
 8004be0:	20000432 	.word	0x20000432
 8004be4:	200004a0 	.word	0x200004a0
 8004be8:	2000043d 	.word	0x2000043d
 8004bec:	0800f714 	.word	0x0800f714
//			DropDecelSlope = Params[18];

			// Send to the GUI


			TxPCLen = sprintf(TxPCBuff,"p%.2f/%d/%d/%d/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%.2f/%d/%.2f/%de"
 8004bf0:	4b87      	ldr	r3, [pc, #540]	; (8004e10 <ProcessReceivedCommand+0x6e0>)
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	4618      	mov	r0, r3
 8004bf6:	f7fb fca7 	bl	8000548 <__aeabi_f2d>
 8004bfa:	e9c7 0116 	strd	r0, r1, [r7, #88]	; 0x58
 8004bfe:	4b85      	ldr	r3, [pc, #532]	; (8004e14 <ProcessReceivedCommand+0x6e4>)
 8004c00:	781b      	ldrb	r3, [r3, #0]
 8004c02:	657b      	str	r3, [r7, #84]	; 0x54
 8004c04:	4b84      	ldr	r3, [pc, #528]	; (8004e18 <ProcessReceivedCommand+0x6e8>)
 8004c06:	881b      	ldrh	r3, [r3, #0]
 8004c08:	653b      	str	r3, [r7, #80]	; 0x50
 8004c0a:	4b84      	ldr	r3, [pc, #528]	; (8004e1c <ProcessReceivedCommand+0x6ec>)
 8004c0c:	781b      	ldrb	r3, [r3, #0]
 8004c0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004c10:	4b83      	ldr	r3, [pc, #524]	; (8004e20 <ProcessReceivedCommand+0x6f0>)
 8004c12:	681b      	ldr	r3, [r3, #0]
 8004c14:	4618      	mov	r0, r3
 8004c16:	f7fb fc97 	bl	8000548 <__aeabi_f2d>
 8004c1a:	e9c7 0110 	strd	r0, r1, [r7, #64]	; 0x40
 8004c1e:	4b81      	ldr	r3, [pc, #516]	; (8004e24 <ProcessReceivedCommand+0x6f4>)
 8004c20:	681b      	ldr	r3, [r3, #0]
 8004c22:	4618      	mov	r0, r3
 8004c24:	f7fb fc90 	bl	8000548 <__aeabi_f2d>
 8004c28:	e9c7 010e 	strd	r0, r1, [r7, #56]	; 0x38
 8004c2c:	4b7e      	ldr	r3, [pc, #504]	; (8004e28 <ProcessReceivedCommand+0x6f8>)
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	4618      	mov	r0, r3
 8004c32:	f7fb fc89 	bl	8000548 <__aeabi_f2d>
 8004c36:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8004c3a:	4b7c      	ldr	r3, [pc, #496]	; (8004e2c <ProcessReceivedCommand+0x6fc>)
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	4618      	mov	r0, r3
 8004c40:	f7fb fc82 	bl	8000548 <__aeabi_f2d>
 8004c44:	e9c7 010a 	strd	r0, r1, [r7, #40]	; 0x28
 8004c48:	4b79      	ldr	r3, [pc, #484]	; (8004e30 <ProcessReceivedCommand+0x700>)
 8004c4a:	681b      	ldr	r3, [r3, #0]
 8004c4c:	4618      	mov	r0, r3
 8004c4e:	f7fb fc7b 	bl	8000548 <__aeabi_f2d>
 8004c52:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8004c56:	4b77      	ldr	r3, [pc, #476]	; (8004e34 <ProcessReceivedCommand+0x704>)
 8004c58:	681b      	ldr	r3, [r3, #0]
 8004c5a:	4618      	mov	r0, r3
 8004c5c:	f7fb fc74 	bl	8000548 <__aeabi_f2d>
 8004c60:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8004c64:	4b74      	ldr	r3, [pc, #464]	; (8004e38 <ProcessReceivedCommand+0x708>)
 8004c66:	681b      	ldr	r3, [r3, #0]
 8004c68:	4618      	mov	r0, r3
 8004c6a:	f7fb fc6d 	bl	8000548 <__aeabi_f2d>
 8004c6e:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8004c72:	4b72      	ldr	r3, [pc, #456]	; (8004e3c <ProcessReceivedCommand+0x70c>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fb fc66 	bl	8000548 <__aeabi_f2d>
 8004c7c:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004c80:	4b6f      	ldr	r3, [pc, #444]	; (8004e40 <ProcessReceivedCommand+0x710>)
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	4618      	mov	r0, r3
 8004c86:	f7fb fc5f 	bl	8000548 <__aeabi_f2d>
 8004c8a:	e9c7 0100 	strd	r0, r1, [r7]
 8004c8e:	4b6d      	ldr	r3, [pc, #436]	; (8004e44 <ProcessReceivedCommand+0x714>)
 8004c90:	681b      	ldr	r3, [r3, #0]
 8004c92:	4618      	mov	r0, r3
 8004c94:	f7fb fc58 	bl	8000548 <__aeabi_f2d>
 8004c98:	4682      	mov	sl, r0
 8004c9a:	468b      	mov	fp, r1
 8004c9c:	4b6a      	ldr	r3, [pc, #424]	; (8004e48 <ProcessReceivedCommand+0x718>)
 8004c9e:	681b      	ldr	r3, [r3, #0]
 8004ca0:	4618      	mov	r0, r3
 8004ca2:	f7fb fc51 	bl	8000548 <__aeabi_f2d>
 8004ca6:	4680      	mov	r8, r0
 8004ca8:	4689      	mov	r9, r1
 8004caa:	4b68      	ldr	r3, [pc, #416]	; (8004e4c <ProcessReceivedCommand+0x71c>)
 8004cac:	681b      	ldr	r3, [r3, #0]
 8004cae:	4618      	mov	r0, r3
 8004cb0:	f7fb fc4a 	bl	8000548 <__aeabi_f2d>
 8004cb4:	4604      	mov	r4, r0
 8004cb6:	460d      	mov	r5, r1
 8004cb8:	4b65      	ldr	r3, [pc, #404]	; (8004e50 <ProcessReceivedCommand+0x720>)
 8004cba:	781b      	ldrb	r3, [r3, #0]
 8004cbc:	461e      	mov	r6, r3
 8004cbe:	4b65      	ldr	r3, [pc, #404]	; (8004e54 <ProcessReceivedCommand+0x724>)
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	4618      	mov	r0, r3
 8004cc4:	f7fb fc40 	bl	8000548 <__aeabi_f2d>
 8004cc8:	4b63      	ldr	r3, [pc, #396]	; (8004e58 <ProcessReceivedCommand+0x728>)
 8004cca:	781b      	ldrb	r3, [r3, #0]
 8004ccc:	9320      	str	r3, [sp, #128]	; 0x80
 8004cce:	e9cd 011e 	strd	r0, r1, [sp, #120]	; 0x78
 8004cd2:	961c      	str	r6, [sp, #112]	; 0x70
 8004cd4:	e9cd 451a 	strd	r4, r5, [sp, #104]	; 0x68
 8004cd8:	e9cd 8918 	strd	r8, r9, [sp, #96]	; 0x60
 8004cdc:	e9cd ab16 	strd	sl, fp, [sp, #88]	; 0x58
 8004ce0:	ed97 7b00 	vldr	d7, [r7]
 8004ce4:	ed8d 7b14 	vstr	d7, [sp, #80]	; 0x50
 8004ce8:	ed97 7b02 	vldr	d7, [r7, #8]
 8004cec:	ed8d 7b12 	vstr	d7, [sp, #72]	; 0x48
 8004cf0:	ed97 7b04 	vldr	d7, [r7, #16]
 8004cf4:	ed8d 7b10 	vstr	d7, [sp, #64]	; 0x40
 8004cf8:	ed97 7b06 	vldr	d7, [r7, #24]
 8004cfc:	ed8d 7b0e 	vstr	d7, [sp, #56]	; 0x38
 8004d00:	ed97 7b08 	vldr	d7, [r7, #32]
 8004d04:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8004d08:	ed97 7b0a 	vldr	d7, [r7, #40]	; 0x28
 8004d0c:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004d10:	ed97 7b0c 	vldr	d7, [r7, #48]	; 0x30
 8004d14:	ed8d 7b08 	vstr	d7, [sp, #32]
 8004d18:	ed97 7b0e 	vldr	d7, [r7, #56]	; 0x38
 8004d1c:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004d20:	ed97 7b10 	vldr	d7, [r7, #64]	; 0x40
 8004d24:	ed8d 7b04 	vstr	d7, [sp, #16]
 8004d28:	6cf9      	ldr	r1, [r7, #76]	; 0x4c
 8004d2a:	9102      	str	r1, [sp, #8]
 8004d2c:	6d39      	ldr	r1, [r7, #80]	; 0x50
 8004d2e:	9101      	str	r1, [sp, #4]
 8004d30:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8004d32:	9300      	str	r3, [sp, #0]
 8004d34:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004d38:	4948      	ldr	r1, [pc, #288]	; (8004e5c <ProcessReceivedCommand+0x72c>)
 8004d3a:	4849      	ldr	r0, [pc, #292]	; (8004e60 <ProcessReceivedCommand+0x730>)
 8004d3c:	f006 fe42 	bl	800b9c4 <siprintf>
 8004d40:	4603      	mov	r3, r0
 8004d42:	b2da      	uxtb	r2, r3
 8004d44:	4b47      	ldr	r3, [pc, #284]	; (8004e64 <ProcessReceivedCommand+0x734>)
 8004d46:	701a      	strb	r2, [r3, #0]
			                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
												 PullingPoint1, PullingPoint2, PullingPoint3, PullingPoint4,
		                     PullingAcc1, PullingAcc2, PullingAcc3,
							 PullingAcc4, PullingAcc5, DistCoeff,
							 DroppingAccel, DroppingAccelDistance, DropAccelSlope, DroppingDecel, DropDecelSlope); // Combine to a string
			HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004d48:	4b46      	ldr	r3, [pc, #280]	; (8004e64 <ProcessReceivedCommand+0x734>)
 8004d4a:	781b      	ldrb	r3, [r3, #0]
 8004d4c:	b29a      	uxth	r2, r3
 8004d4e:	23c8      	movs	r3, #200	; 0xc8
 8004d50:	4943      	ldr	r1, [pc, #268]	; (8004e60 <ProcessReceivedCommand+0x730>)
 8004d52:	4845      	ldr	r0, [pc, #276]	; (8004e68 <ProcessReceivedCommand+0x738>)
 8004d54:	f004 ff55 	bl	8009c02 <HAL_UART_Transmit>
			break;
 8004d58:	f000 bd7a 	b.w	8005850 <ProcessReceivedCommand+0x1120>

		case 11: // Set Drum Radius
			if (StartRunning) // Setting is not available while running
 8004d5c:	4b43      	ldr	r3, [pc, #268]	; (8004e6c <ProcessReceivedCommand+0x73c>)
 8004d5e:	781b      	ldrb	r3, [r3, #0]
 8004d60:	2b00      	cmp	r3, #0
 8004d62:	d006      	beq.n	8004d72 <ProcessReceivedCommand+0x642>
			{
				InitializeRunning (ExperimentMode);
 8004d64:	4b42      	ldr	r3, [pc, #264]	; (8004e70 <ProcessReceivedCommand+0x740>)
 8004d66:	781b      	ldrb	r3, [r3, #0]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f7fd faa5 	bl	80022b8 <InitializeRunning>
				break;
 8004d6e:	f000 bd6f 	b.w	8005850 <ProcessReceivedCommand+0x1120>
			}
			else
			{
				DrumRadius = MotionCode[1];
 8004d72:	4b40      	ldr	r3, [pc, #256]	; (8004e74 <ProcessReceivedCommand+0x744>)
 8004d74:	685b      	ldr	r3, [r3, #4]
 8004d76:	4a26      	ldr	r2, [pc, #152]	; (8004e10 <ProcessReceivedCommand+0x6e0>)
 8004d78:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8004d7a:	4b3f      	ldr	r3, [pc, #252]	; (8004e78 <ProcessReceivedCommand+0x748>)
 8004d7c:	2200      	movs	r2, #0
 8004d7e:	701a      	strb	r2, [r3, #0]
//				char DrumRadiusBuffer[10];
//				TxPCLen = sprintf(DrumRadiusBuffer,"r11/%.2fe",DrumRadius);
//				HAL_UART_Transmit(&huart6,(uint8_t *)DrumRadiusBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"r11/%.2fe",DrumRadius);
 8004d80:	4b23      	ldr	r3, [pc, #140]	; (8004e10 <ProcessReceivedCommand+0x6e0>)
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	4618      	mov	r0, r3
 8004d86:	f7fb fbdf 	bl	8000548 <__aeabi_f2d>
 8004d8a:	4602      	mov	r2, r0
 8004d8c:	460b      	mov	r3, r1
 8004d8e:	493b      	ldr	r1, [pc, #236]	; (8004e7c <ProcessReceivedCommand+0x74c>)
 8004d90:	483b      	ldr	r0, [pc, #236]	; (8004e80 <ProcessReceivedCommand+0x750>)
 8004d92:	f006 fe17 	bl	800b9c4 <siprintf>
 8004d96:	4603      	mov	r3, r0
 8004d98:	b2da      	uxtb	r2, r3
 8004d9a:	4b32      	ldr	r3, [pc, #200]	; (8004e64 <ProcessReceivedCommand+0x734>)
 8004d9c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 8004d9e:	4b31      	ldr	r3, [pc, #196]	; (8004e64 <ProcessReceivedCommand+0x734>)
 8004da0:	781b      	ldrb	r3, [r3, #0]
 8004da2:	b29a      	uxth	r2, r3
 8004da4:	23c8      	movs	r3, #200	; 0xc8
 8004da6:	4936      	ldr	r1, [pc, #216]	; (8004e80 <ProcessReceivedCommand+0x750>)
 8004da8:	482f      	ldr	r0, [pc, #188]	; (8004e68 <ProcessReceivedCommand+0x738>)
 8004daa:	f004 ff2a 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004dae:	220f      	movs	r2, #15
 8004db0:	2100      	movs	r1, #0
 8004db2:	4833      	ldr	r0, [pc, #204]	; (8004e80 <ProcessReceivedCommand+0x750>)
 8004db4:	f005 ff7e 	bl	800acb4 <memset>
				break;
 8004db8:	f000 bd4a 	b.w	8005850 <ProcessReceivedCommand+0x1120>
			}

		case 12: // Set DroppingAccelDistance
			if (StartRunning) // Setting is not available while running
 8004dbc:	4b2b      	ldr	r3, [pc, #172]	; (8004e6c <ProcessReceivedCommand+0x73c>)
 8004dbe:	781b      	ldrb	r3, [r3, #0]
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	f040 8516 	bne.w	80057f2 <ProcessReceivedCommand+0x10c2>
			{
				break;
			}
			else
			{
				DroppingAccelDistance = MotionCode[1];
 8004dc6:	4b2b      	ldr	r3, [pc, #172]	; (8004e74 <ProcessReceivedCommand+0x744>)
 8004dc8:	685b      	ldr	r3, [r3, #4]
 8004dca:	4a20      	ldr	r2, [pc, #128]	; (8004e4c <ProcessReceivedCommand+0x71c>)
 8004dcc:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8004dce:	4b2a      	ldr	r3, [pc, #168]	; (8004e78 <ProcessReceivedCommand+0x748>)
 8004dd0:	2200      	movs	r2, #0
 8004dd2:	701a      	strb	r2, [r3, #0]
//				char DroppingAccelDistanceBuffer[10];
//				TxPCLen = sprintf(DroppingAccelDistanceBuffer,"r12/%.1fe",DroppingAccelDistance);
//				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelDistanceBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"r12/%.1fe",DroppingAccelDistance);
 8004dd4:	4b1d      	ldr	r3, [pc, #116]	; (8004e4c <ProcessReceivedCommand+0x71c>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	4618      	mov	r0, r3
 8004dda:	f7fb fbb5 	bl	8000548 <__aeabi_f2d>
 8004dde:	4602      	mov	r2, r0
 8004de0:	460b      	mov	r3, r1
 8004de2:	4928      	ldr	r1, [pc, #160]	; (8004e84 <ProcessReceivedCommand+0x754>)
 8004de4:	4826      	ldr	r0, [pc, #152]	; (8004e80 <ProcessReceivedCommand+0x750>)
 8004de6:	f006 fded 	bl	800b9c4 <siprintf>
 8004dea:	4603      	mov	r3, r0
 8004dec:	b2da      	uxtb	r2, r3
 8004dee:	4b1d      	ldr	r3, [pc, #116]	; (8004e64 <ProcessReceivedCommand+0x734>)
 8004df0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004df2:	4b1c      	ldr	r3, [pc, #112]	; (8004e64 <ProcessReceivedCommand+0x734>)
 8004df4:	781b      	ldrb	r3, [r3, #0]
 8004df6:	b29a      	uxth	r2, r3
 8004df8:	23c8      	movs	r3, #200	; 0xc8
 8004dfa:	4921      	ldr	r1, [pc, #132]	; (8004e80 <ProcessReceivedCommand+0x750>)
 8004dfc:	481a      	ldr	r0, [pc, #104]	; (8004e68 <ProcessReceivedCommand+0x738>)
 8004dfe:	f004 ff00 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004e02:	220f      	movs	r2, #15
 8004e04:	2100      	movs	r1, #0
 8004e06:	481e      	ldr	r0, [pc, #120]	; (8004e80 <ProcessReceivedCommand+0x750>)
 8004e08:	f005 ff54 	bl	800acb4 <memset>
				break;
 8004e0c:	f000 bd20 	b.w	8005850 <ProcessReceivedCommand+0x1120>
 8004e10:	20000464 	.word	0x20000464
 8004e14:	20000469 	.word	0x20000469
 8004e18:	20000008 	.word	0x20000008
 8004e1c:	20000468 	.word	0x20000468
 8004e20:	20000494 	.word	0x20000494
 8004e24:	20000498 	.word	0x20000498
 8004e28:	2000049c 	.word	0x2000049c
 8004e2c:	200004a0 	.word	0x200004a0
 8004e30:	20000480 	.word	0x20000480
 8004e34:	20000484 	.word	0x20000484
 8004e38:	20000488 	.word	0x20000488
 8004e3c:	2000048c 	.word	0x2000048c
 8004e40:	20000490 	.word	0x20000490
 8004e44:	2000053c 	.word	0x2000053c
 8004e48:	20000470 	.word	0x20000470
 8004e4c:	20000478 	.word	0x20000478
 8004e50:	20000541 	.word	0x20000541
 8004e54:	20000474 	.word	0x20000474
 8004e58:	20000540 	.word	0x20000540
 8004e5c:	0800f720 	.word	0x0800f720
 8004e60:	200003b0 	.word	0x200003b0
 8004e64:	20000414 	.word	0x20000414
 8004e68:	200002f8 	.word	0x200002f8
 8004e6c:	20000432 	.word	0x20000432
 8004e70:	20000005 	.word	0x20000005
 8004e74:	2000051c 	.word	0x2000051c
 8004e78:	2000043d 	.word	0x2000043d
 8004e7c:	0800f778 	.word	0x0800f778
 8004e80:	2000041c 	.word	0x2000041c
 8004e84:	0800f784 	.word	0x0800f784
			}

		case 13: // Set PullingSpeed
			// PullingSpeed is the maximum speed when homing or going to the initial Posion
			if (StartRunning) // Setting is not available while running
 8004e88:	4ba7      	ldr	r3, [pc, #668]	; (8005128 <ProcessReceivedCommand+0x9f8>)
 8004e8a:	781b      	ldrb	r3, [r3, #0]
 8004e8c:	2b00      	cmp	r3, #0
 8004e8e:	f040 84b2 	bne.w	80057f6 <ProcessReceivedCommand+0x10c6>
			{
				break;
			}
			else
			{
				PullingSpeed = MotionCode[1];
 8004e92:	4ba6      	ldr	r3, [pc, #664]	; (800512c <ProcessReceivedCommand+0x9fc>)
 8004e94:	edd3 7a01 	vldr	s15, [r3, #4]
 8004e98:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004e9c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8004ea0:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8004ea4:	b2da      	uxtb	r2, r3
 8004ea6:	4ba2      	ldr	r3, [pc, #648]	; (8005130 <ProcessReceivedCommand+0xa00>)
 8004ea8:	701a      	strb	r2, [r3, #0]
				GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8004eaa:	4ba1      	ldr	r3, [pc, #644]	; (8005130 <ProcessReceivedCommand+0xa00>)
 8004eac:	781b      	ldrb	r3, [r3, #0]
 8004eae:	4618      	mov	r0, r3
 8004eb0:	f7fb fb38 	bl	8000524 <__aeabi_i2d>
 8004eb4:	a39a      	add	r3, pc, #616	; (adr r3, 8005120 <ProcessReceivedCommand+0x9f0>)
 8004eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004eba:	f7fb fb9d 	bl	80005f8 <__aeabi_dmul>
 8004ebe:	4602      	mov	r2, r0
 8004ec0:	460b      	mov	r3, r1
 8004ec2:	4610      	mov	r0, r2
 8004ec4:	4619      	mov	r1, r3
 8004ec6:	f04f 0200 	mov.w	r2, #0
 8004eca:	4b9a      	ldr	r3, [pc, #616]	; (8005134 <ProcessReceivedCommand+0xa04>)
 8004ecc:	f7fb fcbe 	bl	800084c <__aeabi_ddiv>
 8004ed0:	4602      	mov	r2, r0
 8004ed2:	460b      	mov	r3, r1
 8004ed4:	4610      	mov	r0, r2
 8004ed6:	4619      	mov	r1, r3
 8004ed8:	f7fb fe86 	bl	8000be8 <__aeabi_d2f>
 8004edc:	4603      	mov	r3, r0
 8004ede:	4a96      	ldr	r2, [pc, #600]	; (8005138 <ProcessReceivedCommand+0xa08>)
 8004ee0:	6013      	str	r3, [r2, #0]

				//char PullingSpeedBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r13/%de",PullingSpeed);
 8004ee2:	4b93      	ldr	r3, [pc, #588]	; (8005130 <ProcessReceivedCommand+0xa00>)
 8004ee4:	781b      	ldrb	r3, [r3, #0]
 8004ee6:	461a      	mov	r2, r3
 8004ee8:	4994      	ldr	r1, [pc, #592]	; (800513c <ProcessReceivedCommand+0xa0c>)
 8004eea:	4895      	ldr	r0, [pc, #596]	; (8005140 <ProcessReceivedCommand+0xa10>)
 8004eec:	f006 fd6a 	bl	800b9c4 <siprintf>
 8004ef0:	4603      	mov	r3, r0
 8004ef2:	b2da      	uxtb	r2, r3
 8004ef4:	4b93      	ldr	r3, [pc, #588]	; (8005144 <ProcessReceivedCommand+0xa14>)
 8004ef6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004ef8:	4b92      	ldr	r3, [pc, #584]	; (8005144 <ProcessReceivedCommand+0xa14>)
 8004efa:	781b      	ldrb	r3, [r3, #0]
 8004efc:	b29a      	uxth	r2, r3
 8004efe:	23c8      	movs	r3, #200	; 0xc8
 8004f00:	498f      	ldr	r1, [pc, #572]	; (8005140 <ProcessReceivedCommand+0xa10>)
 8004f02:	4891      	ldr	r0, [pc, #580]	; (8005148 <ProcessReceivedCommand+0xa18>)
 8004f04:	f004 fe7d 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004f08:	220f      	movs	r2, #15
 8004f0a:	2100      	movs	r1, #0
 8004f0c:	488c      	ldr	r0, [pc, #560]	; (8005140 <ProcessReceivedCommand+0xa10>)
 8004f0e:	f005 fed1 	bl	800acb4 <memset>
				break;
 8004f12:	f000 bc9d 	b.w	8005850 <ProcessReceivedCommand+0x1120>
			}

		case 14: // Start Simulating
			if (StartRunning) // Setting is not available while running
 8004f16:	4b84      	ldr	r3, [pc, #528]	; (8005128 <ProcessReceivedCommand+0x9f8>)
 8004f18:	781b      	ldrb	r3, [r3, #0]
 8004f1a:	2b00      	cmp	r3, #0
 8004f1c:	f040 846d 	bne.w	80057fa <ProcessReceivedCommand+0x10ca>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // Start Simulation
 8004f20:	4b82      	ldr	r3, [pc, #520]	; (800512c <ProcessReceivedCommand+0x9fc>)
 8004f22:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f26:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004f2a:	eef4 7a47 	vcmp.f32	s15, s14
 8004f2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f32:	d10f      	bne.n	8004f54 <ProcessReceivedCommand+0x824>
				{
					HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8004f34:	2200      	movs	r2, #0
 8004f36:	2110      	movs	r1, #16
 8004f38:	4884      	ldr	r0, [pc, #528]	; (800514c <ProcessReceivedCommand+0xa1c>)
 8004f3a:	f003 fab9 	bl	80084b0 <HAL_GPIO_WritePin>
					HAL_Delay(500);
 8004f3e:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004f42:	f002 fc3b 	bl	80077bc <HAL_Delay>
					InitializeSimulating (ExperimentMode);
 8004f46:	4b82      	ldr	r3, [pc, #520]	; (8005150 <ProcessReceivedCommand+0xa20>)
 8004f48:	781b      	ldrb	r3, [r3, #0]
 8004f4a:	4618      	mov	r0, r3
 8004f4c:	f7fd f8a0 	bl	8002090 <InitializeSimulating>
					break;
 8004f50:	f000 bc7e 	b.w	8005850 <ProcessReceivedCommand+0x1120>
				}
				else // Stop Simulation
				{
					StopSimulating();
 8004f54:	f7ff fa62 	bl	800441c <StopSimulating>
				}
			}
			break;
 8004f58:	f000 bc7a 	b.w	8005850 <ProcessReceivedCommand+0x1120>

		case 16: // Set SampleTime
			if (StartRunning) // When the experiment is running, disable this fcn
 8004f5c:	4b72      	ldr	r3, [pc, #456]	; (8005128 <ProcessReceivedCommand+0x9f8>)
 8004f5e:	781b      	ldrb	r3, [r3, #0]
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	f040 844c 	bne.w	80057fe <ProcessReceivedCommand+0x10ce>
			{
				break;
			}
			else
			{
				SampleTime = MotionCode[1];
 8004f66:	4b71      	ldr	r3, [pc, #452]	; (800512c <ProcessReceivedCommand+0x9fc>)
 8004f68:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f6c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004f70:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8004f74:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8004f78:	b2da      	uxtb	r2, r3
 8004f7a:	4b76      	ldr	r3, [pc, #472]	; (8005154 <ProcessReceivedCommand+0xa24>)
 8004f7c:	701a      	strb	r2, [r3, #0]
				if (SampleTime<= 2) // ms Set value range, 2:100ms
 8004f7e:	4b75      	ldr	r3, [pc, #468]	; (8005154 <ProcessReceivedCommand+0xa24>)
 8004f80:	781b      	ldrb	r3, [r3, #0]
 8004f82:	2b02      	cmp	r3, #2
 8004f84:	d802      	bhi.n	8004f8c <ProcessReceivedCommand+0x85c>
				{
					SampleTime = 2;
 8004f86:	4b73      	ldr	r3, [pc, #460]	; (8005154 <ProcessReceivedCommand+0xa24>)
 8004f88:	2202      	movs	r2, #2
 8004f8a:	701a      	strb	r2, [r3, #0]
				}
				if (SampleTime >= 100) // ms
 8004f8c:	4b71      	ldr	r3, [pc, #452]	; (8005154 <ProcessReceivedCommand+0xa24>)
 8004f8e:	781b      	ldrb	r3, [r3, #0]
 8004f90:	2b63      	cmp	r3, #99	; 0x63
 8004f92:	d902      	bls.n	8004f9a <ProcessReceivedCommand+0x86a>
				{
					SampleTime = 100;
 8004f94:	4b6f      	ldr	r3, [pc, #444]	; (8005154 <ProcessReceivedCommand+0xa24>)
 8004f96:	2264      	movs	r2, #100	; 0x64
 8004f98:	701a      	strb	r2, [r3, #0]
				}
				//char SammpleTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r16/%de",SampleTime);
 8004f9a:	4b6e      	ldr	r3, [pc, #440]	; (8005154 <ProcessReceivedCommand+0xa24>)
 8004f9c:	781b      	ldrb	r3, [r3, #0]
 8004f9e:	461a      	mov	r2, r3
 8004fa0:	496d      	ldr	r1, [pc, #436]	; (8005158 <ProcessReceivedCommand+0xa28>)
 8004fa2:	4867      	ldr	r0, [pc, #412]	; (8005140 <ProcessReceivedCommand+0xa10>)
 8004fa4:	f006 fd0e 	bl	800b9c4 <siprintf>
 8004fa8:	4603      	mov	r3, r0
 8004faa:	b2da      	uxtb	r2, r3
 8004fac:	4b65      	ldr	r3, [pc, #404]	; (8005144 <ProcessReceivedCommand+0xa14>)
 8004fae:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004fb0:	4b64      	ldr	r3, [pc, #400]	; (8005144 <ProcessReceivedCommand+0xa14>)
 8004fb2:	781b      	ldrb	r3, [r3, #0]
 8004fb4:	b29a      	uxth	r2, r3
 8004fb6:	23c8      	movs	r3, #200	; 0xc8
 8004fb8:	4961      	ldr	r1, [pc, #388]	; (8005140 <ProcessReceivedCommand+0xa10>)
 8004fba:	4863      	ldr	r0, [pc, #396]	; (8005148 <ProcessReceivedCommand+0xa18>)
 8004fbc:	f004 fe21 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004fc0:	220f      	movs	r2, #15
 8004fc2:	2100      	movs	r1, #0
 8004fc4:	485e      	ldr	r0, [pc, #376]	; (8005140 <ProcessReceivedCommand+0xa10>)
 8004fc6:	f005 fe75 	bl	800acb4 <memset>
				break;
 8004fca:	f000 bc41 	b.w	8005850 <ProcessReceivedCommand+0x1120>
			}

		case 17: // Reset MCU
			HAL_NVIC_SystemReset();
 8004fce:	f002 fd34 	bl	8007a3a <HAL_NVIC_SystemReset>
			break;
 8004fd2:	f000 bc3d 	b.w	8005850 <ProcessReceivedCommand+0x1120>
		case 18: // Servo Enable on/off
			if (MotionCode[1] == 1) // Servo Enable ON
 8004fd6:	4b55      	ldr	r3, [pc, #340]	; (800512c <ProcessReceivedCommand+0x9fc>)
 8004fd8:	edd3 7a01 	vldr	s15, [r3, #4]
 8004fdc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004fe0:	eef4 7a47 	vcmp.f32	s15, s14
 8004fe4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004fe8:	d106      	bne.n	8004ff8 <ProcessReceivedCommand+0x8c8>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Servo enable on
 8004fea:	2201      	movs	r2, #1
 8004fec:	2110      	movs	r1, #16
 8004fee:	4857      	ldr	r0, [pc, #348]	; (800514c <ProcessReceivedCommand+0xa1c>)
 8004ff0:	f003 fa5e 	bl	80084b0 <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
			break;
 8004ff4:	f000 bc2c 	b.w	8005850 <ProcessReceivedCommand+0x1120>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	2110      	movs	r1, #16
 8004ffc:	4853      	ldr	r0, [pc, #332]	; (800514c <ProcessReceivedCommand+0xa1c>)
 8004ffe:	f003 fa57 	bl	80084b0 <HAL_GPIO_WritePin>
			break;
 8005002:	f000 bc25 	b.w	8005850 <ProcessReceivedCommand+0x1120>
		case 20: // Set Step Pulse Cmd

			break; // unused

		case 27: // Set Running Mode
			if(StartRunning) // Setting is not available while running
 8005006:	4b48      	ldr	r3, [pc, #288]	; (8005128 <ProcessReceivedCommand+0x9f8>)
 8005008:	781b      	ldrb	r3, [r3, #0]
 800500a:	2b00      	cmp	r3, #0
 800500c:	f040 83f9 	bne.w	8005802 <ProcessReceivedCommand+0x10d2>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // RunningMode = true => Automatic Running
 8005010:	4b46      	ldr	r3, [pc, #280]	; (800512c <ProcessReceivedCommand+0x9fc>)
 8005012:	edd3 7a01 	vldr	s15, [r3, #4]
 8005016:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800501a:	eef4 7a47 	vcmp.f32	s15, s14
 800501e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005022:	d103      	bne.n	800502c <ProcessReceivedCommand+0x8fc>
				{
					RunningMode = true; // Automatic
 8005024:	4b4d      	ldr	r3, [pc, #308]	; (800515c <ProcessReceivedCommand+0xa2c>)
 8005026:	2201      	movs	r2, #1
 8005028:	701a      	strb	r2, [r3, #0]
 800502a:	e002      	b.n	8005032 <ProcessReceivedCommand+0x902>
				}
				else
				{
					RunningMode = false; // Manual
 800502c:	4b4b      	ldr	r3, [pc, #300]	; (800515c <ProcessReceivedCommand+0xa2c>)
 800502e:	2200      	movs	r2, #0
 8005030:	701a      	strb	r2, [r3, #0]
				}
				//char SammpleTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"g27/%de",RunningMode);
 8005032:	4b4a      	ldr	r3, [pc, #296]	; (800515c <ProcessReceivedCommand+0xa2c>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	461a      	mov	r2, r3
 8005038:	4949      	ldr	r1, [pc, #292]	; (8005160 <ProcessReceivedCommand+0xa30>)
 800503a:	4841      	ldr	r0, [pc, #260]	; (8005140 <ProcessReceivedCommand+0xa10>)
 800503c:	f006 fcc2 	bl	800b9c4 <siprintf>
 8005040:	4603      	mov	r3, r0
 8005042:	b2da      	uxtb	r2, r3
 8005044:	4b3f      	ldr	r3, [pc, #252]	; (8005144 <ProcessReceivedCommand+0xa14>)
 8005046:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8005048:	4b3e      	ldr	r3, [pc, #248]	; (8005144 <ProcessReceivedCommand+0xa14>)
 800504a:	781b      	ldrb	r3, [r3, #0]
 800504c:	b29a      	uxth	r2, r3
 800504e:	23c8      	movs	r3, #200	; 0xc8
 8005050:	493b      	ldr	r1, [pc, #236]	; (8005140 <ProcessReceivedCommand+0xa10>)
 8005052:	483d      	ldr	r0, [pc, #244]	; (8005148 <ProcessReceivedCommand+0xa18>)
 8005054:	f004 fdd5 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005058:	220f      	movs	r2, #15
 800505a:	2100      	movs	r1, #0
 800505c:	4838      	ldr	r0, [pc, #224]	; (8005140 <ProcessReceivedCommand+0xa10>)
 800505e:	f005 fe29 	bl	800acb4 <memset>
				break;
 8005062:	e3f5      	b.n	8005850 <ProcessReceivedCommand+0x1120>
			}

		case 28: // Stop jog move up/down in Position Jog control;
			if (StartRunning) // Setting is not available while running
 8005064:	4b30      	ldr	r3, [pc, #192]	; (8005128 <ProcessReceivedCommand+0x9f8>)
 8005066:	781b      	ldrb	r3, [r3, #0]
 8005068:	2b00      	cmp	r3, #0
 800506a:	f040 83cc 	bne.w	8005806 <ProcessReceivedCommand+0x10d6>
			{
				break;
			}
			else
			{
				StopPulseGenerating();
 800506e:	f7fc fcbd 	bl	80019ec <StopPulseGenerating>
				break;
 8005072:	e3ed      	b.n	8005850 <ProcessReceivedCommand+0x1120>
			}

		case 31: // Set Experiment Mode
			if (StartRunning) // Setting is not available while running
 8005074:	4b2c      	ldr	r3, [pc, #176]	; (8005128 <ProcessReceivedCommand+0x9f8>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	f040 83c6 	bne.w	800580a <ProcessReceivedCommand+0x10da>
			{
				break;
			}
			else
			{
				ExperimentMode = MotionCode[1]; // 1=Dropping Mode;2 = Pulling; 3= Pulling->Dropping
 800507e:	4b2b      	ldr	r3, [pc, #172]	; (800512c <ProcessReceivedCommand+0x9fc>)
 8005080:	edd3 7a01 	vldr	s15, [r3, #4]
 8005084:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005088:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 800508c:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8005090:	b2da      	uxtb	r2, r3
 8005092:	4b2f      	ldr	r3, [pc, #188]	; (8005150 <ProcessReceivedCommand+0xa20>)
 8005094:	701a      	strb	r2, [r3, #0]
				//char SetModeBuff[8];
				TxPCLen = sprintf(ResponseMess,"m%de",ExperimentMode);
 8005096:	4b2e      	ldr	r3, [pc, #184]	; (8005150 <ProcessReceivedCommand+0xa20>)
 8005098:	781b      	ldrb	r3, [r3, #0]
 800509a:	461a      	mov	r2, r3
 800509c:	4931      	ldr	r1, [pc, #196]	; (8005164 <ProcessReceivedCommand+0xa34>)
 800509e:	4828      	ldr	r0, [pc, #160]	; (8005140 <ProcessReceivedCommand+0xa10>)
 80050a0:	f006 fc90 	bl	800b9c4 <siprintf>
 80050a4:	4603      	mov	r3, r0
 80050a6:	b2da      	uxtb	r2, r3
 80050a8:	4b26      	ldr	r3, [pc, #152]	; (8005144 <ProcessReceivedCommand+0xa14>)
 80050aa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80050ac:	4b25      	ldr	r3, [pc, #148]	; (8005144 <ProcessReceivedCommand+0xa14>)
 80050ae:	781b      	ldrb	r3, [r3, #0]
 80050b0:	b29a      	uxth	r2, r3
 80050b2:	2364      	movs	r3, #100	; 0x64
 80050b4:	4922      	ldr	r1, [pc, #136]	; (8005140 <ProcessReceivedCommand+0xa10>)
 80050b6:	4824      	ldr	r0, [pc, #144]	; (8005148 <ProcessReceivedCommand+0xa18>)
 80050b8:	f004 fda3 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80050bc:	220f      	movs	r2, #15
 80050be:	2100      	movs	r1, #0
 80050c0:	481f      	ldr	r0, [pc, #124]	; (8005140 <ProcessReceivedCommand+0xa10>)
 80050c2:	f005 fdf7 	bl	800acb4 <memset>
				break;
 80050c6:	e3c3      	b.n	8005850 <ProcessReceivedCommand+0x1120>
			}

		case 32: // Set Pulling Accelerating Distance; Pulling Mode
			if (StartRunning) // Setting is not available while running
 80050c8:	4b17      	ldr	r3, [pc, #92]	; (8005128 <ProcessReceivedCommand+0x9f8>)
 80050ca:	781b      	ldrb	r3, [r3, #0]
 80050cc:	2b00      	cmp	r3, #0
 80050ce:	f040 839e 	bne.w	800580e <ProcessReceivedCommand+0x10de>
			{
				break;
			}
			else
			{
				PullingPoint1 = MotionCode[1];
 80050d2:	4b16      	ldr	r3, [pc, #88]	; (800512c <ProcessReceivedCommand+0x9fc>)
 80050d4:	685b      	ldr	r3, [r3, #4]
 80050d6:	4a24      	ldr	r2, [pc, #144]	; (8005168 <ProcessReceivedCommand+0xa38>)
 80050d8:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80050da:	4b24      	ldr	r3, [pc, #144]	; (800516c <ProcessReceivedCommand+0xa3c>)
 80050dc:	2200      	movs	r2, #0
 80050de:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"r32/%.1fe",PullingPoint1);
 80050e0:	4b21      	ldr	r3, [pc, #132]	; (8005168 <ProcessReceivedCommand+0xa38>)
 80050e2:	681b      	ldr	r3, [r3, #0]
 80050e4:	4618      	mov	r0, r3
 80050e6:	f7fb fa2f 	bl	8000548 <__aeabi_f2d>
 80050ea:	4602      	mov	r2, r0
 80050ec:	460b      	mov	r3, r1
 80050ee:	4920      	ldr	r1, [pc, #128]	; (8005170 <ProcessReceivedCommand+0xa40>)
 80050f0:	4813      	ldr	r0, [pc, #76]	; (8005140 <ProcessReceivedCommand+0xa10>)
 80050f2:	f006 fc67 	bl	800b9c4 <siprintf>
 80050f6:	4603      	mov	r3, r0
 80050f8:	b2da      	uxtb	r2, r3
 80050fa:	4b12      	ldr	r3, [pc, #72]	; (8005144 <ProcessReceivedCommand+0xa14>)
 80050fc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80050fe:	4b11      	ldr	r3, [pc, #68]	; (8005144 <ProcessReceivedCommand+0xa14>)
 8005100:	781b      	ldrb	r3, [r3, #0]
 8005102:	b29a      	uxth	r2, r3
 8005104:	2364      	movs	r3, #100	; 0x64
 8005106:	490e      	ldr	r1, [pc, #56]	; (8005140 <ProcessReceivedCommand+0xa10>)
 8005108:	480f      	ldr	r0, [pc, #60]	; (8005148 <ProcessReceivedCommand+0xa18>)
 800510a:	f004 fd7a 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800510e:	220f      	movs	r2, #15
 8005110:	2100      	movs	r1, #0
 8005112:	480b      	ldr	r0, [pc, #44]	; (8005140 <ProcessReceivedCommand+0xa10>)
 8005114:	f005 fdce 	bl	800acb4 <memset>
				break;
 8005118:	e39a      	b.n	8005850 <ProcessReceivedCommand+0x1120>
 800511a:	bf00      	nop
 800511c:	f3af 8000 	nop.w
 8005120:	9999999a 	.word	0x9999999a
 8005124:	3fb99999 	.word	0x3fb99999
 8005128:	20000432 	.word	0x20000432
 800512c:	2000051c 	.word	0x2000051c
 8005130:	20000469 	.word	0x20000469
 8005134:	40080000 	.word	0x40080000
 8005138:	2000046c 	.word	0x2000046c
 800513c:	0800f790 	.word	0x0800f790
 8005140:	2000041c 	.word	0x2000041c
 8005144:	20000414 	.word	0x20000414
 8005148:	200002f8 	.word	0x200002f8
 800514c:	40020800 	.word	0x40020800
 8005150:	20000005 	.word	0x20000005
 8005154:	20000468 	.word	0x20000468
 8005158:	0800f798 	.word	0x0800f798
 800515c:	2000043e 	.word	0x2000043e
 8005160:	0800f7a0 	.word	0x0800f7a0
 8005164:	0800f7a8 	.word	0x0800f7a8
 8005168:	20000494 	.word	0x20000494
 800516c:	2000043d 	.word	0x2000043d
 8005170:	0800f7b0 	.word	0x0800f7b0
			}

		case 33: // Set Pulling AccRef in Pulling Mode
			if (StartRunning)// Setting is not available while running
 8005174:	4ba4      	ldr	r3, [pc, #656]	; (8005408 <ProcessReceivedCommand+0xcd8>)
 8005176:	781b      	ldrb	r3, [r3, #0]
 8005178:	2b00      	cmp	r3, #0
 800517a:	f040 834a 	bne.w	8005812 <ProcessReceivedCommand+0x10e2>
			{
				break;
			}
			else
			{
				PullingPoint2 = MotionCode[1];
 800517e:	4ba3      	ldr	r3, [pc, #652]	; (800540c <ProcessReceivedCommand+0xcdc>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	4aa3      	ldr	r2, [pc, #652]	; (8005410 <ProcessReceivedCommand+0xce0>)
 8005184:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8005186:	4ba3      	ldr	r3, [pc, #652]	; (8005414 <ProcessReceivedCommand+0xce4>)
 8005188:	2200      	movs	r2, #0
 800518a:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r33/%.2fe",PullingPoint2);
 800518c:	4ba0      	ldr	r3, [pc, #640]	; (8005410 <ProcessReceivedCommand+0xce0>)
 800518e:	681b      	ldr	r3, [r3, #0]
 8005190:	4618      	mov	r0, r3
 8005192:	f7fb f9d9 	bl	8000548 <__aeabi_f2d>
 8005196:	4602      	mov	r2, r0
 8005198:	460b      	mov	r3, r1
 800519a:	499f      	ldr	r1, [pc, #636]	; (8005418 <ProcessReceivedCommand+0xce8>)
 800519c:	489f      	ldr	r0, [pc, #636]	; (800541c <ProcessReceivedCommand+0xcec>)
 800519e:	f006 fc11 	bl	800b9c4 <siprintf>
 80051a2:	4603      	mov	r3, r0
 80051a4:	b2da      	uxtb	r2, r3
 80051a6:	4b9e      	ldr	r3, [pc, #632]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 80051a8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80051aa:	4b9d      	ldr	r3, [pc, #628]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 80051ac:	781b      	ldrb	r3, [r3, #0]
 80051ae:	b29a      	uxth	r2, r3
 80051b0:	2364      	movs	r3, #100	; 0x64
 80051b2:	499a      	ldr	r1, [pc, #616]	; (800541c <ProcessReceivedCommand+0xcec>)
 80051b4:	489b      	ldr	r0, [pc, #620]	; (8005424 <ProcessReceivedCommand+0xcf4>)
 80051b6:	f004 fd24 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80051ba:	220f      	movs	r2, #15
 80051bc:	2100      	movs	r1, #0
 80051be:	4897      	ldr	r0, [pc, #604]	; (800541c <ProcessReceivedCommand+0xcec>)
 80051c0:	f005 fd78 	bl	800acb4 <memset>
				break;
 80051c4:	e344      	b.n	8005850 <ProcessReceivedCommand+0x1120>
			}

		case 35: // Set PullingPoint3
			if (StartRunning)// Setting is not available while running
 80051c6:	4b90      	ldr	r3, [pc, #576]	; (8005408 <ProcessReceivedCommand+0xcd8>)
 80051c8:	781b      	ldrb	r3, [r3, #0]
 80051ca:	2b00      	cmp	r3, #0
 80051cc:	f040 8323 	bne.w	8005816 <ProcessReceivedCommand+0x10e6>
			{
				break;
			}
			else
			{
				PullingPoint3 = MotionCode[1];
 80051d0:	4b8e      	ldr	r3, [pc, #568]	; (800540c <ProcessReceivedCommand+0xcdc>)
 80051d2:	685b      	ldr	r3, [r3, #4]
 80051d4:	4a94      	ldr	r2, [pc, #592]	; (8005428 <ProcessReceivedCommand+0xcf8>)
 80051d6:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80051d8:	4b8e      	ldr	r3, [pc, #568]	; (8005414 <ProcessReceivedCommand+0xce4>)
 80051da:	2200      	movs	r2, #0
 80051dc:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r35/%.2fe",PullingPoint3);
 80051de:	4b92      	ldr	r3, [pc, #584]	; (8005428 <ProcessReceivedCommand+0xcf8>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4618      	mov	r0, r3
 80051e4:	f7fb f9b0 	bl	8000548 <__aeabi_f2d>
 80051e8:	4602      	mov	r2, r0
 80051ea:	460b      	mov	r3, r1
 80051ec:	498f      	ldr	r1, [pc, #572]	; (800542c <ProcessReceivedCommand+0xcfc>)
 80051ee:	488b      	ldr	r0, [pc, #556]	; (800541c <ProcessReceivedCommand+0xcec>)
 80051f0:	f006 fbe8 	bl	800b9c4 <siprintf>
 80051f4:	4603      	mov	r3, r0
 80051f6:	b2da      	uxtb	r2, r3
 80051f8:	4b89      	ldr	r3, [pc, #548]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 80051fa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80051fc:	4b88      	ldr	r3, [pc, #544]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b29a      	uxth	r2, r3
 8005202:	2364      	movs	r3, #100	; 0x64
 8005204:	4985      	ldr	r1, [pc, #532]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005206:	4887      	ldr	r0, [pc, #540]	; (8005424 <ProcessReceivedCommand+0xcf4>)
 8005208:	f004 fcfb 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800520c:	220f      	movs	r2, #15
 800520e:	2100      	movs	r1, #0
 8005210:	4882      	ldr	r0, [pc, #520]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005212:	f005 fd4f 	bl	800acb4 <memset>
			}
			break;
 8005216:	e31b      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 36: // Set Pulling Acc1
			if (StartRunning)// Setting is not available while running
 8005218:	4b7b      	ldr	r3, [pc, #492]	; (8005408 <ProcessReceivedCommand+0xcd8>)
 800521a:	781b      	ldrb	r3, [r3, #0]
 800521c:	2b00      	cmp	r3, #0
 800521e:	f040 82fc 	bne.w	800581a <ProcessReceivedCommand+0x10ea>
			{
				break;
			}
			else
			{
				PullingAcc1 = MotionCode[1];
 8005222:	4b7a      	ldr	r3, [pc, #488]	; (800540c <ProcessReceivedCommand+0xcdc>)
 8005224:	685b      	ldr	r3, [r3, #4]
 8005226:	4a82      	ldr	r2, [pc, #520]	; (8005430 <ProcessReceivedCommand+0xd00>)
 8005228:	6013      	str	r3, [r2, #0]
				Initialized = false;
 800522a:	4b7a      	ldr	r3, [pc, #488]	; (8005414 <ProcessReceivedCommand+0xce4>)
 800522c:	2200      	movs	r2, #0
 800522e:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"r36/%.2fe",PullingAcc1);
 8005230:	4b7f      	ldr	r3, [pc, #508]	; (8005430 <ProcessReceivedCommand+0xd00>)
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	4618      	mov	r0, r3
 8005236:	f7fb f987 	bl	8000548 <__aeabi_f2d>
 800523a:	4602      	mov	r2, r0
 800523c:	460b      	mov	r3, r1
 800523e:	497d      	ldr	r1, [pc, #500]	; (8005434 <ProcessReceivedCommand+0xd04>)
 8005240:	4876      	ldr	r0, [pc, #472]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005242:	f006 fbbf 	bl	800b9c4 <siprintf>
 8005246:	4603      	mov	r3, r0
 8005248:	b2da      	uxtb	r2, r3
 800524a:	4b75      	ldr	r3, [pc, #468]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 800524c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 800524e:	4b74      	ldr	r3, [pc, #464]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 8005250:	781b      	ldrb	r3, [r3, #0]
 8005252:	b29a      	uxth	r2, r3
 8005254:	2364      	movs	r3, #100	; 0x64
 8005256:	4971      	ldr	r1, [pc, #452]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005258:	4872      	ldr	r0, [pc, #456]	; (8005424 <ProcessReceivedCommand+0xcf4>)
 800525a:	f004 fcd2 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800525e:	220f      	movs	r2, #15
 8005260:	2100      	movs	r1, #0
 8005262:	486e      	ldr	r0, [pc, #440]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005264:	f005 fd26 	bl	800acb4 <memset>
			}
			break;
 8005268:	e2f2      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 37: // Set Stopping Time
			if (StartRunning)// Setting is not available while running
 800526a:	4b67      	ldr	r3, [pc, #412]	; (8005408 <ProcessReceivedCommand+0xcd8>)
 800526c:	781b      	ldrb	r3, [r3, #0]
 800526e:	2b00      	cmp	r3, #0
 8005270:	f040 82d5 	bne.w	800581e <ProcessReceivedCommand+0x10ee>
			{
				break;
			}
			else
			{
				StoppingTime = MotionCode[1];
 8005274:	4b65      	ldr	r3, [pc, #404]	; (800540c <ProcessReceivedCommand+0xcdc>)
 8005276:	edd3 7a01 	vldr	s15, [r3, #4]
 800527a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800527e:	ee17 3a90 	vmov	r3, s15
 8005282:	b29a      	uxth	r2, r3
 8005284:	4b6c      	ldr	r3, [pc, #432]	; (8005438 <ProcessReceivedCommand+0xd08>)
 8005286:	801a      	strh	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r37/%de",StoppingTime);
 8005288:	4b6b      	ldr	r3, [pc, #428]	; (8005438 <ProcessReceivedCommand+0xd08>)
 800528a:	881b      	ldrh	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	496b      	ldr	r1, [pc, #428]	; (800543c <ProcessReceivedCommand+0xd0c>)
 8005290:	4862      	ldr	r0, [pc, #392]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005292:	f006 fb97 	bl	800b9c4 <siprintf>
 8005296:	4603      	mov	r3, r0
 8005298:	b2da      	uxtb	r2, r3
 800529a:	4b61      	ldr	r3, [pc, #388]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 800529c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800529e:	4b60      	ldr	r3, [pc, #384]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 80052a0:	781b      	ldrb	r3, [r3, #0]
 80052a2:	b29a      	uxth	r2, r3
 80052a4:	23c8      	movs	r3, #200	; 0xc8
 80052a6:	495d      	ldr	r1, [pc, #372]	; (800541c <ProcessReceivedCommand+0xcec>)
 80052a8:	485e      	ldr	r0, [pc, #376]	; (8005424 <ProcessReceivedCommand+0xcf4>)
 80052aa:	f004 fcaa 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80052ae:	220f      	movs	r2, #15
 80052b0:	2100      	movs	r1, #0
 80052b2:	485a      	ldr	r0, [pc, #360]	; (800541c <ProcessReceivedCommand+0xcec>)
 80052b4:	f005 fcfe 	bl	800acb4 <memset>
				break;
 80052b8:	e2ca      	b.n	8005850 <ProcessReceivedCommand+0x1120>
			}
		case 38: // Homing task
			if (StartRunning)// Setting is not available while running
 80052ba:	4b53      	ldr	r3, [pc, #332]	; (8005408 <ProcessReceivedCommand+0xcd8>)
 80052bc:	781b      	ldrb	r3, [r3, #0]
 80052be:	2b00      	cmp	r3, #0
 80052c0:	f040 82af 	bne.w	8005822 <ProcessReceivedCommand+0x10f2>
			{
				break;
			}
			else
			{
				IsHoming = true;
 80052c4:	4b5e      	ldr	r3, [pc, #376]	; (8005440 <ProcessReceivedCommand+0xd10>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	701a      	strb	r2, [r3, #0]
				Direction = false; // false = move up, true = move down
 80052ca:	4b5e      	ldr	r3, [pc, #376]	; (8005444 <ProcessReceivedCommand+0xd14>)
 80052cc:	2200      	movs	r2, #0
 80052ce:	701a      	strb	r2, [r3, #0]
				PRIsToggled = true; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 80052d0:	4b5d      	ldr	r3, [pc, #372]	; (8005448 <ProcessReceivedCommand+0xd18>)
 80052d2:	2201      	movs	r2, #1
 80052d4:	701a      	strb	r2, [r3, #0]
				DisableSTOP(); // Disable the stop
 80052d6:	f7fb ffc7 	bl	8001268 <DisableSTOP>
				InitPulseGenerating();
 80052da:	f7fc fbab 	bl	8001a34 <InitPulseGenerating>
			}
			break;
 80052de:	e2b7      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 39: // Set Driver type, FDA7000 or ASDA A3
			if (StartRunning)// Setting is not available while running
 80052e0:	4b49      	ldr	r3, [pc, #292]	; (8005408 <ProcessReceivedCommand+0xcd8>)
 80052e2:	781b      	ldrb	r3, [r3, #0]
 80052e4:	2b00      	cmp	r3, #0
 80052e6:	f040 829e 	bne.w	8005826 <ProcessReceivedCommand+0x10f6>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // FDA7000
 80052ea:	4b48      	ldr	r3, [pc, #288]	; (800540c <ProcessReceivedCommand+0xcdc>)
 80052ec:	edd3 7a01 	vldr	s15, [r3, #4]
 80052f0:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80052f4:	eef4 7a47 	vcmp.f32	s15, s14
 80052f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80052fc:	d10a      	bne.n	8005314 <ProcessReceivedCommand+0xbe4>
				{
					MotorDriver = true;
 80052fe:	4b53      	ldr	r3, [pc, #332]	; (800544c <ProcessReceivedCommand+0xd1c>)
 8005300:	2201      	movs	r2, #1
 8005302:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 29; // For FDA7000, read 5 register => receive 25 bytes
 8005304:	4b52      	ldr	r3, [pc, #328]	; (8005450 <ProcessReceivedCommand+0xd20>)
 8005306:	221d      	movs	r2, #29
 8005308:	701a      	strb	r2, [r3, #0]
					EncoderResolution = HigenEncoderResolution;
 800530a:	4b52      	ldr	r3, [pc, #328]	; (8005454 <ProcessReceivedCommand+0xd24>)
 800530c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8005310:	801a      	strh	r2, [r3, #0]
 8005312:	e009      	b.n	8005328 <ProcessReceivedCommand+0xbf8>
				}
				else // ASDA A3
				{
					MotorDriver = false;
 8005314:	4b4d      	ldr	r3, [pc, #308]	; (800544c <ProcessReceivedCommand+0xd1c>)
 8005316:	2200      	movs	r2, #0
 8005318:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 17;
 800531a:	4b4d      	ldr	r3, [pc, #308]	; (8005450 <ProcessReceivedCommand+0xd20>)
 800531c:	2211      	movs	r2, #17
 800531e:	701a      	strb	r2, [r3, #0]
					EncoderResolution = AsdaEncoderResolution;
 8005320:	4b4c      	ldr	r3, [pc, #304]	; (8005454 <ProcessReceivedCommand+0xd24>)
 8005322:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8005326:	801a      	strh	r2, [r3, #0]
					// For ASDA Drier, read 1 register => receive 9 bytes
					// read 2 registers => receive 13 bytes
				}
				TxPCLen = sprintf(ResponseMess,"g39/%de",MotorDriver);
 8005328:	4b48      	ldr	r3, [pc, #288]	; (800544c <ProcessReceivedCommand+0xd1c>)
 800532a:	781b      	ldrb	r3, [r3, #0]
 800532c:	461a      	mov	r2, r3
 800532e:	494a      	ldr	r1, [pc, #296]	; (8005458 <ProcessReceivedCommand+0xd28>)
 8005330:	483a      	ldr	r0, [pc, #232]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005332:	f006 fb47 	bl	800b9c4 <siprintf>
 8005336:	4603      	mov	r3, r0
 8005338:	b2da      	uxtb	r2, r3
 800533a:	4b39      	ldr	r3, [pc, #228]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 800533c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800533e:	4b38      	ldr	r3, [pc, #224]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	b29a      	uxth	r2, r3
 8005344:	23c8      	movs	r3, #200	; 0xc8
 8005346:	4935      	ldr	r1, [pc, #212]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005348:	4836      	ldr	r0, [pc, #216]	; (8005424 <ProcessReceivedCommand+0xcf4>)
 800534a:	f004 fc5a 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800534e:	220f      	movs	r2, #15
 8005350:	2100      	movs	r1, #0
 8005352:	4832      	ldr	r0, [pc, #200]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005354:	f005 fcae 	bl	800acb4 <memset>
			}
			break;
 8005358:	e27a      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 41: // Set Pulling Acc2
			if (StartRunning)// Setting is not available while running
 800535a:	4b2b      	ldr	r3, [pc, #172]	; (8005408 <ProcessReceivedCommand+0xcd8>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	2b00      	cmp	r3, #0
 8005360:	f040 8263 	bne.w	800582a <ProcessReceivedCommand+0x10fa>
			{
				break;
			}
			else
			{
				PullingAcc2 = MotionCode[1];
 8005364:	4b29      	ldr	r3, [pc, #164]	; (800540c <ProcessReceivedCommand+0xcdc>)
 8005366:	685b      	ldr	r3, [r3, #4]
 8005368:	4a3c      	ldr	r2, [pc, #240]	; (800545c <ProcessReceivedCommand+0xd2c>)
 800536a:	6013      	str	r3, [r2, #0]
				Initialized = false;
 800536c:	4b29      	ldr	r3, [pc, #164]	; (8005414 <ProcessReceivedCommand+0xce4>)
 800536e:	2200      	movs	r2, #0
 8005370:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r41/%.2fe",PullingAcc2);
 8005372:	4b3a      	ldr	r3, [pc, #232]	; (800545c <ProcessReceivedCommand+0xd2c>)
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	4618      	mov	r0, r3
 8005378:	f7fb f8e6 	bl	8000548 <__aeabi_f2d>
 800537c:	4602      	mov	r2, r0
 800537e:	460b      	mov	r3, r1
 8005380:	4937      	ldr	r1, [pc, #220]	; (8005460 <ProcessReceivedCommand+0xd30>)
 8005382:	4826      	ldr	r0, [pc, #152]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005384:	f006 fb1e 	bl	800b9c4 <siprintf>
 8005388:	4603      	mov	r3, r0
 800538a:	b2da      	uxtb	r2, r3
 800538c:	4b24      	ldr	r3, [pc, #144]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 800538e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005390:	4b23      	ldr	r3, [pc, #140]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 8005392:	781b      	ldrb	r3, [r3, #0]
 8005394:	b29a      	uxth	r2, r3
 8005396:	2364      	movs	r3, #100	; 0x64
 8005398:	4920      	ldr	r1, [pc, #128]	; (800541c <ProcessReceivedCommand+0xcec>)
 800539a:	4822      	ldr	r0, [pc, #136]	; (8005424 <ProcessReceivedCommand+0xcf4>)
 800539c:	f004 fc31 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80053a0:	220f      	movs	r2, #15
 80053a2:	2100      	movs	r1, #0
 80053a4:	481d      	ldr	r0, [pc, #116]	; (800541c <ProcessReceivedCommand+0xcec>)
 80053a6:	f005 fc85 	bl	800acb4 <memset>
			}
			break;
 80053aa:	e251      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 42: // Set Distance Coefficient
			if (StartRunning)// Setting is not available while running
 80053ac:	4b16      	ldr	r3, [pc, #88]	; (8005408 <ProcessReceivedCommand+0xcd8>)
 80053ae:	781b      	ldrb	r3, [r3, #0]
 80053b0:	2b00      	cmp	r3, #0
 80053b2:	d005      	beq.n	80053c0 <ProcessReceivedCommand+0xc90>
			{
				InitializeRunning(ExperimentMode);
 80053b4:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <ProcessReceivedCommand+0xd34>)
 80053b6:	781b      	ldrb	r3, [r3, #0]
 80053b8:	4618      	mov	r0, r3
 80053ba:	f7fc ff7d 	bl	80022b8 <InitializeRunning>

				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 80053be:	e247      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				DistCoeff = MotionCode[1];
 80053c0:	4b12      	ldr	r3, [pc, #72]	; (800540c <ProcessReceivedCommand+0xcdc>)
 80053c2:	685b      	ldr	r3, [r3, #4]
 80053c4:	4a28      	ldr	r2, [pc, #160]	; (8005468 <ProcessReceivedCommand+0xd38>)
 80053c6:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80053c8:	4b12      	ldr	r3, [pc, #72]	; (8005414 <ProcessReceivedCommand+0xce4>)
 80053ca:	2200      	movs	r2, #0
 80053cc:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
 80053ce:	4b26      	ldr	r3, [pc, #152]	; (8005468 <ProcessReceivedCommand+0xd38>)
 80053d0:	681b      	ldr	r3, [r3, #0]
 80053d2:	4618      	mov	r0, r3
 80053d4:	f7fb f8b8 	bl	8000548 <__aeabi_f2d>
 80053d8:	4602      	mov	r2, r0
 80053da:	460b      	mov	r3, r1
 80053dc:	4923      	ldr	r1, [pc, #140]	; (800546c <ProcessReceivedCommand+0xd3c>)
 80053de:	480f      	ldr	r0, [pc, #60]	; (800541c <ProcessReceivedCommand+0xcec>)
 80053e0:	f006 faf0 	bl	800b9c4 <siprintf>
 80053e4:	4603      	mov	r3, r0
 80053e6:	b2da      	uxtb	r2, r3
 80053e8:	4b0d      	ldr	r3, [pc, #52]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 80053ea:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80053ec:	4b0c      	ldr	r3, [pc, #48]	; (8005420 <ProcessReceivedCommand+0xcf0>)
 80053ee:	781b      	ldrb	r3, [r3, #0]
 80053f0:	b29a      	uxth	r2, r3
 80053f2:	2364      	movs	r3, #100	; 0x64
 80053f4:	4909      	ldr	r1, [pc, #36]	; (800541c <ProcessReceivedCommand+0xcec>)
 80053f6:	480b      	ldr	r0, [pc, #44]	; (8005424 <ProcessReceivedCommand+0xcf4>)
 80053f8:	f004 fc03 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80053fc:	220f      	movs	r2, #15
 80053fe:	2100      	movs	r1, #0
 8005400:	4806      	ldr	r0, [pc, #24]	; (800541c <ProcessReceivedCommand+0xcec>)
 8005402:	f005 fc57 	bl	800acb4 <memset>
			break;
 8005406:	e223      	b.n	8005850 <ProcessReceivedCommand+0x1120>
 8005408:	20000432 	.word	0x20000432
 800540c:	2000051c 	.word	0x2000051c
 8005410:	20000498 	.word	0x20000498
 8005414:	2000043d 	.word	0x2000043d
 8005418:	0800f7bc 	.word	0x0800f7bc
 800541c:	2000041c 	.word	0x2000041c
 8005420:	20000414 	.word	0x20000414
 8005424:	200002f8 	.word	0x200002f8
 8005428:	2000049c 	.word	0x2000049c
 800542c:	0800f7c8 	.word	0x0800f7c8
 8005430:	20000480 	.word	0x20000480
 8005434:	0800f7d4 	.word	0x0800f7d4
 8005438:	20000008 	.word	0x20000008
 800543c:	0800f7e0 	.word	0x0800f7e0
 8005440:	2000043c 	.word	0x2000043c
 8005444:	20000434 	.word	0x20000434
 8005448:	2000043f 	.word	0x2000043f
 800544c:	20000003 	.word	0x20000003
 8005450:	20000000 	.word	0x20000000
 8005454:	2000000a 	.word	0x2000000a
 8005458:	0800f7e8 	.word	0x0800f7e8
 800545c:	20000484 	.word	0x20000484
 8005460:	0800f7f0 	.word	0x0800f7f0
 8005464:	20000005 	.word	0x20000005
 8005468:	2000053c 	.word	0x2000053c
 800546c:	0800f7fc 	.word	0x0800f7fc

		case 43: //Set PullingAcc3
			if (StartRunning)// Setting is not available while running
 8005470:	4b99      	ldr	r3, [pc, #612]	; (80056d8 <ProcessReceivedCommand+0xfa8>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	2b00      	cmp	r3, #0
 8005476:	f040 81da 	bne.w	800582e <ProcessReceivedCommand+0x10fe>
			{
				break;
			}
			else
			{
				PullingAcc3 = MotionCode[1];
 800547a:	4b98      	ldr	r3, [pc, #608]	; (80056dc <ProcessReceivedCommand+0xfac>)
 800547c:	685b      	ldr	r3, [r3, #4]
 800547e:	4a98      	ldr	r2, [pc, #608]	; (80056e0 <ProcessReceivedCommand+0xfb0>)
 8005480:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8005482:	4b98      	ldr	r3, [pc, #608]	; (80056e4 <ProcessReceivedCommand+0xfb4>)
 8005484:	2200      	movs	r2, #0
 8005486:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r43/%.2fe",PullingAcc3);
 8005488:	4b95      	ldr	r3, [pc, #596]	; (80056e0 <ProcessReceivedCommand+0xfb0>)
 800548a:	681b      	ldr	r3, [r3, #0]
 800548c:	4618      	mov	r0, r3
 800548e:	f7fb f85b 	bl	8000548 <__aeabi_f2d>
 8005492:	4602      	mov	r2, r0
 8005494:	460b      	mov	r3, r1
 8005496:	4994      	ldr	r1, [pc, #592]	; (80056e8 <ProcessReceivedCommand+0xfb8>)
 8005498:	4894      	ldr	r0, [pc, #592]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 800549a:	f006 fa93 	bl	800b9c4 <siprintf>
 800549e:	4603      	mov	r3, r0
 80054a0:	b2da      	uxtb	r2, r3
 80054a2:	4b93      	ldr	r3, [pc, #588]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 80054a4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80054a6:	4b92      	ldr	r3, [pc, #584]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 80054a8:	781b      	ldrb	r3, [r3, #0]
 80054aa:	b29a      	uxth	r2, r3
 80054ac:	2364      	movs	r3, #100	; 0x64
 80054ae:	498f      	ldr	r1, [pc, #572]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 80054b0:	4890      	ldr	r0, [pc, #576]	; (80056f4 <ProcessReceivedCommand+0xfc4>)
 80054b2:	f004 fba6 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80054b6:	220f      	movs	r2, #15
 80054b8:	2100      	movs	r1, #0
 80054ba:	488c      	ldr	r0, [pc, #560]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 80054bc:	f005 fbfa 	bl	800acb4 <memset>
			}
			break;
 80054c0:	e1c6      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 46: // Set origin (home) position
			OriginPulse = MotorEncPulse;
 80054c2:	4b8d      	ldr	r3, [pc, #564]	; (80056f8 <ProcessReceivedCommand+0xfc8>)
 80054c4:	681b      	ldr	r3, [r3, #0]
 80054c6:	4a8d      	ldr	r2, [pc, #564]	; (80056fc <ProcessReceivedCommand+0xfcc>)
 80054c8:	6013      	str	r3, [r2, #0]
			PositionPulseCmd = 0;
 80054ca:	4b8d      	ldr	r3, [pc, #564]	; (8005700 <ProcessReceivedCommand+0xfd0>)
 80054cc:	2200      	movs	r2, #0
 80054ce:	601a      	str	r2, [r3, #0]
			PulseSimuCount = 0;
 80054d0:	4b8c      	ldr	r3, [pc, #560]	; (8005704 <ProcessReceivedCommand+0xfd4>)
 80054d2:	2200      	movs	r2, #0
 80054d4:	601a      	str	r2, [r3, #0]
			break;
 80054d6:	e1bb      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 47: // Set PullingAcc4
			if (StartRunning)// Setting is not available while running
 80054d8:	4b7f      	ldr	r3, [pc, #508]	; (80056d8 <ProcessReceivedCommand+0xfa8>)
 80054da:	781b      	ldrb	r3, [r3, #0]
 80054dc:	2b00      	cmp	r3, #0
 80054de:	f040 81a8 	bne.w	8005832 <ProcessReceivedCommand+0x1102>
			{
				break;
			}
			else
			{
				PullingAcc4 = MotionCode[1];
 80054e2:	4b7e      	ldr	r3, [pc, #504]	; (80056dc <ProcessReceivedCommand+0xfac>)
 80054e4:	685b      	ldr	r3, [r3, #4]
 80054e6:	4a88      	ldr	r2, [pc, #544]	; (8005708 <ProcessReceivedCommand+0xfd8>)
 80054e8:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80054ea:	4b7e      	ldr	r3, [pc, #504]	; (80056e4 <ProcessReceivedCommand+0xfb4>)
 80054ec:	2200      	movs	r2, #0
 80054ee:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r47/%.4fe",PullingAcc4);
 80054f0:	4b85      	ldr	r3, [pc, #532]	; (8005708 <ProcessReceivedCommand+0xfd8>)
 80054f2:	681b      	ldr	r3, [r3, #0]
 80054f4:	4618      	mov	r0, r3
 80054f6:	f7fb f827 	bl	8000548 <__aeabi_f2d>
 80054fa:	4602      	mov	r2, r0
 80054fc:	460b      	mov	r3, r1
 80054fe:	4983      	ldr	r1, [pc, #524]	; (800570c <ProcessReceivedCommand+0xfdc>)
 8005500:	487a      	ldr	r0, [pc, #488]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005502:	f006 fa5f 	bl	800b9c4 <siprintf>
 8005506:	4603      	mov	r3, r0
 8005508:	b2da      	uxtb	r2, r3
 800550a:	4b79      	ldr	r3, [pc, #484]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 800550c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 800550e:	4b78      	ldr	r3, [pc, #480]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 8005510:	781b      	ldrb	r3, [r3, #0]
 8005512:	b29a      	uxth	r2, r3
 8005514:	2364      	movs	r3, #100	; 0x64
 8005516:	4975      	ldr	r1, [pc, #468]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005518:	4876      	ldr	r0, [pc, #472]	; (80056f4 <ProcessReceivedCommand+0xfc4>)
 800551a:	f004 fb72 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800551e:	220f      	movs	r2, #15
 8005520:	2100      	movs	r1, #0
 8005522:	4872      	ldr	r0, [pc, #456]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005524:	f005 fbc6 	bl	800acb4 <memset>
			}
			break;
 8005528:	e192      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 48: // turn on/off the software upper limit
			if (StartRunning)// Setting is not available while running
 800552a:	4b6b      	ldr	r3, [pc, #428]	; (80056d8 <ProcessReceivedCommand+0xfa8>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b00      	cmp	r3, #0
 8005530:	f040 8181 	bne.w	8005836 <ProcessReceivedCommand+0x1106>
			{
				break;
			}
			else
			{
				if(MotionCode[1] == 1) // turn on software limit
 8005534:	4b69      	ldr	r3, [pc, #420]	; (80056dc <ProcessReceivedCommand+0xfac>)
 8005536:	edd3 7a01 	vldr	s15, [r3, #4]
 800553a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800553e:	eef4 7a47 	vcmp.f32	s15, s14
 8005542:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005546:	d103      	bne.n	8005550 <ProcessReceivedCommand+0xe20>
				{
					SoftWareLimit = true;
 8005548:	4b71      	ldr	r3, [pc, #452]	; (8005710 <ProcessReceivedCommand+0xfe0>)
 800554a:	2201      	movs	r2, #1
 800554c:	701a      	strb	r2, [r3, #0]
 800554e:	e002      	b.n	8005556 <ProcessReceivedCommand+0xe26>
				}
				else // Set to Open-Loop control
				{
					SoftWareLimit = false;
 8005550:	4b6f      	ldr	r3, [pc, #444]	; (8005710 <ProcessReceivedCommand+0xfe0>)
 8005552:	2200      	movs	r2, #0
 8005554:	701a      	strb	r2, [r3, #0]
				}
				TxPCLen = sprintf(ResponseMess,"g48/%de",SoftWareLimit);
 8005556:	4b6e      	ldr	r3, [pc, #440]	; (8005710 <ProcessReceivedCommand+0xfe0>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	461a      	mov	r2, r3
 800555c:	496d      	ldr	r1, [pc, #436]	; (8005714 <ProcessReceivedCommand+0xfe4>)
 800555e:	4863      	ldr	r0, [pc, #396]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005560:	f006 fa30 	bl	800b9c4 <siprintf>
 8005564:	4603      	mov	r3, r0
 8005566:	b2da      	uxtb	r2, r3
 8005568:	4b61      	ldr	r3, [pc, #388]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 800556a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 800556c:	4b60      	ldr	r3, [pc, #384]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 800556e:	781b      	ldrb	r3, [r3, #0]
 8005570:	b29a      	uxth	r2, r3
 8005572:	2364      	movs	r3, #100	; 0x64
 8005574:	495d      	ldr	r1, [pc, #372]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005576:	485f      	ldr	r0, [pc, #380]	; (80056f4 <ProcessReceivedCommand+0xfc4>)
 8005578:	f004 fb43 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800557c:	220f      	movs	r2, #15
 800557e:	2100      	movs	r1, #0
 8005580:	485a      	ldr	r0, [pc, #360]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005582:	f005 fb97 	bl	800acb4 <memset>
			}
			break;
 8005586:	e163      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 51: // Set PullingAcc5
			if (StartRunning)// Setting is not available while running
 8005588:	4b53      	ldr	r3, [pc, #332]	; (80056d8 <ProcessReceivedCommand+0xfa8>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	2b00      	cmp	r3, #0
 800558e:	f040 8154 	bne.w	800583a <ProcessReceivedCommand+0x110a>
			{
				break;
			}
			else
			{
				PullingAcc5 = MotionCode[1];
 8005592:	4b52      	ldr	r3, [pc, #328]	; (80056dc <ProcessReceivedCommand+0xfac>)
 8005594:	685b      	ldr	r3, [r3, #4]
 8005596:	4a60      	ldr	r2, [pc, #384]	; (8005718 <ProcessReceivedCommand+0xfe8>)
 8005598:	6013      	str	r3, [r2, #0]
				Initialized = false;
 800559a:	4b52      	ldr	r3, [pc, #328]	; (80056e4 <ProcessReceivedCommand+0xfb4>)
 800559c:	2200      	movs	r2, #0
 800559e:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r51/%.2fe",PullingAcc5);
 80055a0:	4b5d      	ldr	r3, [pc, #372]	; (8005718 <ProcessReceivedCommand+0xfe8>)
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	4618      	mov	r0, r3
 80055a6:	f7fa ffcf 	bl	8000548 <__aeabi_f2d>
 80055aa:	4602      	mov	r2, r0
 80055ac:	460b      	mov	r3, r1
 80055ae:	495b      	ldr	r1, [pc, #364]	; (800571c <ProcessReceivedCommand+0xfec>)
 80055b0:	484e      	ldr	r0, [pc, #312]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 80055b2:	f006 fa07 	bl	800b9c4 <siprintf>
 80055b6:	4603      	mov	r3, r0
 80055b8:	b2da      	uxtb	r2, r3
 80055ba:	4b4d      	ldr	r3, [pc, #308]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 80055bc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80055be:	4b4c      	ldr	r3, [pc, #304]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	b29a      	uxth	r2, r3
 80055c4:	2364      	movs	r3, #100	; 0x64
 80055c6:	4949      	ldr	r1, [pc, #292]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 80055c8:	484a      	ldr	r0, [pc, #296]	; (80056f4 <ProcessReceivedCommand+0xfc4>)
 80055ca:	f004 fb1a 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80055ce:	220f      	movs	r2, #15
 80055d0:	2100      	movs	r1, #0
 80055d2:	4846      	ldr	r0, [pc, #280]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 80055d4:	f005 fb6e 	bl	800acb4 <memset>
			}
			break;
 80055d8:	e13a      	b.n	8005850 <ProcessReceivedCommand+0x1120>

/// Set Dropping Params

		case 15: // Set DroppingAccel
			if (StartRunning)
 80055da:	4b3f      	ldr	r3, [pc, #252]	; (80056d8 <ProcessReceivedCommand+0xfa8>)
 80055dc:	781b      	ldrb	r3, [r3, #0]
 80055de:	2b00      	cmp	r3, #0
 80055e0:	f040 812d 	bne.w	800583e <ProcessReceivedCommand+0x110e>
			{
				break;
			}
			else
			{
				DroppingAccel = MotionCode[1];
 80055e4:	4b3d      	ldr	r3, [pc, #244]	; (80056dc <ProcessReceivedCommand+0xfac>)
 80055e6:	685b      	ldr	r3, [r3, #4]
 80055e8:	4a4d      	ldr	r2, [pc, #308]	; (8005720 <ProcessReceivedCommand+0xff0>)
 80055ea:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80055ec:	4b3d      	ldr	r3, [pc, #244]	; (80056e4 <ProcessReceivedCommand+0xfb4>)
 80055ee:	2200      	movs	r2, #0
 80055f0:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r15/%.3fe",DroppingAccel);
 80055f2:	4b4b      	ldr	r3, [pc, #300]	; (8005720 <ProcessReceivedCommand+0xff0>)
 80055f4:	681b      	ldr	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fa ffa6 	bl	8000548 <__aeabi_f2d>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4948      	ldr	r1, [pc, #288]	; (8005724 <ProcessReceivedCommand+0xff4>)
 8005602:	483a      	ldr	r0, [pc, #232]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005604:	f006 f9de 	bl	800b9c4 <siprintf>
 8005608:	4603      	mov	r3, r0
 800560a:	b2da      	uxtb	r2, r3
 800560c:	4b38      	ldr	r3, [pc, #224]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 800560e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8005610:	4b37      	ldr	r3, [pc, #220]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 8005612:	781b      	ldrb	r3, [r3, #0]
 8005614:	b29a      	uxth	r2, r3
 8005616:	23c8      	movs	r3, #200	; 0xc8
 8005618:	4934      	ldr	r1, [pc, #208]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 800561a:	4836      	ldr	r0, [pc, #216]	; (80056f4 <ProcessReceivedCommand+0xfc4>)
 800561c:	f004 faf1 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005620:	220f      	movs	r2, #15
 8005622:	2100      	movs	r1, #0
 8005624:	4831      	ldr	r0, [pc, #196]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005626:	f005 fb45 	bl	800acb4 <memset>
				break;
 800562a:	e111      	b.n	8005850 <ProcessReceivedCommand+0x1120>
			}
		case 49: // Set Dropping Accel Slope
			if (StartRunning)// Setting is not available while running
 800562c:	4b2a      	ldr	r3, [pc, #168]	; (80056d8 <ProcessReceivedCommand+0xfa8>)
 800562e:	781b      	ldrb	r3, [r3, #0]
 8005630:	2b00      	cmp	r3, #0
 8005632:	f040 8106 	bne.w	8005842 <ProcessReceivedCommand+0x1112>
			{
				break;
			}
			else
			{
				DropAccelSlope = (uint8_t)MotionCode[1];
 8005636:	4b29      	ldr	r3, [pc, #164]	; (80056dc <ProcessReceivedCommand+0xfac>)
 8005638:	edd3 7a01 	vldr	s15, [r3, #4]
 800563c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8005640:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8005644:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8005648:	b2da      	uxtb	r2, r3
 800564a:	4b37      	ldr	r3, [pc, #220]	; (8005728 <ProcessReceivedCommand+0xff8>)
 800564c:	701a      	strb	r2, [r3, #0]
				Initialized = false;
 800564e:	4b25      	ldr	r3, [pc, #148]	; (80056e4 <ProcessReceivedCommand+0xfb4>)
 8005650:	2200      	movs	r2, #0
 8005652:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r49/%de",DropAccelSlope);
 8005654:	4b34      	ldr	r3, [pc, #208]	; (8005728 <ProcessReceivedCommand+0xff8>)
 8005656:	781b      	ldrb	r3, [r3, #0]
 8005658:	461a      	mov	r2, r3
 800565a:	4934      	ldr	r1, [pc, #208]	; (800572c <ProcessReceivedCommand+0xffc>)
 800565c:	4823      	ldr	r0, [pc, #140]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 800565e:	f006 f9b1 	bl	800b9c4 <siprintf>
 8005662:	4603      	mov	r3, r0
 8005664:	b2da      	uxtb	r2, r3
 8005666:	4b22      	ldr	r3, [pc, #136]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 8005668:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 800566a:	4b21      	ldr	r3, [pc, #132]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 800566c:	781b      	ldrb	r3, [r3, #0]
 800566e:	b29a      	uxth	r2, r3
 8005670:	2364      	movs	r3, #100	; 0x64
 8005672:	491e      	ldr	r1, [pc, #120]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005674:	481f      	ldr	r0, [pc, #124]	; (80056f4 <ProcessReceivedCommand+0xfc4>)
 8005676:	f004 fac4 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800567a:	220f      	movs	r2, #15
 800567c:	2100      	movs	r1, #0
 800567e:	481b      	ldr	r0, [pc, #108]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 8005680:	f005 fb18 	bl	800acb4 <memset>
			}
			break;
 8005684:	e0e4      	b.n	8005850 <ProcessReceivedCommand+0x1120>

		case 52: // Set Dropping Acceleration Distance;
			if (StartRunning)// Setting is not available while running
 8005686:	4b14      	ldr	r3, [pc, #80]	; (80056d8 <ProcessReceivedCommand+0xfa8>)
 8005688:	781b      	ldrb	r3, [r3, #0]
 800568a:	2b00      	cmp	r3, #0
 800568c:	f040 80db 	bne.w	8005846 <ProcessReceivedCommand+0x1116>
			{
				break;
			}
			else
			{
				DroppingAccelDistance = MotionCode[1];
 8005690:	4b12      	ldr	r3, [pc, #72]	; (80056dc <ProcessReceivedCommand+0xfac>)
 8005692:	685b      	ldr	r3, [r3, #4]
 8005694:	4a26      	ldr	r2, [pc, #152]	; (8005730 <ProcessReceivedCommand+0x1000>)
 8005696:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8005698:	4b12      	ldr	r3, [pc, #72]	; (80056e4 <ProcessReceivedCommand+0xfb4>)
 800569a:	2200      	movs	r2, #0
 800569c:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r52/%.2fe",DroppingAccelDistance);
 800569e:	4b24      	ldr	r3, [pc, #144]	; (8005730 <ProcessReceivedCommand+0x1000>)
 80056a0:	681b      	ldr	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fa ff50 	bl	8000548 <__aeabi_f2d>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4921      	ldr	r1, [pc, #132]	; (8005734 <ProcessReceivedCommand+0x1004>)
 80056ae:	480f      	ldr	r0, [pc, #60]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 80056b0:	f006 f988 	bl	800b9c4 <siprintf>
 80056b4:	4603      	mov	r3, r0
 80056b6:	b2da      	uxtb	r2, r3
 80056b8:	4b0d      	ldr	r3, [pc, #52]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 80056ba:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80056bc:	4b0c      	ldr	r3, [pc, #48]	; (80056f0 <ProcessReceivedCommand+0xfc0>)
 80056be:	781b      	ldrb	r3, [r3, #0]
 80056c0:	b29a      	uxth	r2, r3
 80056c2:	2364      	movs	r3, #100	; 0x64
 80056c4:	4909      	ldr	r1, [pc, #36]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 80056c6:	480b      	ldr	r0, [pc, #44]	; (80056f4 <ProcessReceivedCommand+0xfc4>)
 80056c8:	f004 fa9b 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80056cc:	220f      	movs	r2, #15
 80056ce:	2100      	movs	r1, #0
 80056d0:	4806      	ldr	r0, [pc, #24]	; (80056ec <ProcessReceivedCommand+0xfbc>)
 80056d2:	f005 faef 	bl	800acb4 <memset>
			}
			break;
 80056d6:	e0bb      	b.n	8005850 <ProcessReceivedCommand+0x1120>
 80056d8:	20000432 	.word	0x20000432
 80056dc:	2000051c 	.word	0x2000051c
 80056e0:	20000488 	.word	0x20000488
 80056e4:	2000043d 	.word	0x2000043d
 80056e8:	0800f808 	.word	0x0800f808
 80056ec:	2000041c 	.word	0x2000041c
 80056f0:	20000414 	.word	0x20000414
 80056f4:	200002f8 	.word	0x200002f8
 80056f8:	20000510 	.word	0x20000510
 80056fc:	200004ac 	.word	0x200004ac
 8005700:	200004b8 	.word	0x200004b8
 8005704:	200004b4 	.word	0x200004b4
 8005708:	2000048c 	.word	0x2000048c
 800570c:	0800f814 	.word	0x0800f814
 8005710:	20000004 	.word	0x20000004
 8005714:	0800f820 	.word	0x0800f820
 8005718:	20000490 	.word	0x20000490
 800571c:	0800f828 	.word	0x0800f828
 8005720:	20000470 	.word	0x20000470
 8005724:	0800f834 	.word	0x0800f834
 8005728:	20000541 	.word	0x20000541
 800572c:	0800f840 	.word	0x0800f840
 8005730:	20000478 	.word	0x20000478
 8005734:	0800f848 	.word	0x0800f848

		case 54: // Set Dropping Decceleration Slope
			if (StartRunning)// Setting is not available while running
 8005738:	4b48      	ldr	r3, [pc, #288]	; (800585c <ProcessReceivedCommand+0x112c>)
 800573a:	781b      	ldrb	r3, [r3, #0]
 800573c:	2b00      	cmp	r3, #0
 800573e:	f040 8084 	bne.w	800584a <ProcessReceivedCommand+0x111a>
			{
				break;
			}
			else
			{
				DropDecelSlope = (uint8_t)MotionCode[1];
 8005742:	4b47      	ldr	r3, [pc, #284]	; (8005860 <ProcessReceivedCommand+0x1130>)
 8005744:	edd3 7a01 	vldr	s15, [r3, #4]
 8005748:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800574c:	edc7 7a16 	vstr	s15, [r7, #88]	; 0x58
 8005750:	f897 3058 	ldrb.w	r3, [r7, #88]	; 0x58
 8005754:	b2da      	uxtb	r2, r3
 8005756:	4b43      	ldr	r3, [pc, #268]	; (8005864 <ProcessReceivedCommand+0x1134>)
 8005758:	701a      	strb	r2, [r3, #0]
				Initialized = false;
 800575a:	4b43      	ldr	r3, [pc, #268]	; (8005868 <ProcessReceivedCommand+0x1138>)
 800575c:	2200      	movs	r2, #0
 800575e:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r54/%de",DropDecelSlope);
 8005760:	4b40      	ldr	r3, [pc, #256]	; (8005864 <ProcessReceivedCommand+0x1134>)
 8005762:	781b      	ldrb	r3, [r3, #0]
 8005764:	461a      	mov	r2, r3
 8005766:	4941      	ldr	r1, [pc, #260]	; (800586c <ProcessReceivedCommand+0x113c>)
 8005768:	4841      	ldr	r0, [pc, #260]	; (8005870 <ProcessReceivedCommand+0x1140>)
 800576a:	f006 f92b 	bl	800b9c4 <siprintf>
 800576e:	4603      	mov	r3, r0
 8005770:	b2da      	uxtb	r2, r3
 8005772:	4b40      	ldr	r3, [pc, #256]	; (8005874 <ProcessReceivedCommand+0x1144>)
 8005774:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005776:	4b3f      	ldr	r3, [pc, #252]	; (8005874 <ProcessReceivedCommand+0x1144>)
 8005778:	781b      	ldrb	r3, [r3, #0]
 800577a:	b29a      	uxth	r2, r3
 800577c:	2364      	movs	r3, #100	; 0x64
 800577e:	493c      	ldr	r1, [pc, #240]	; (8005870 <ProcessReceivedCommand+0x1140>)
 8005780:	483d      	ldr	r0, [pc, #244]	; (8005878 <ProcessReceivedCommand+0x1148>)
 8005782:	f004 fa3e 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005786:	220f      	movs	r2, #15
 8005788:	2100      	movs	r1, #0
 800578a:	4839      	ldr	r0, [pc, #228]	; (8005870 <ProcessReceivedCommand+0x1140>)
 800578c:	f005 fa92 	bl	800acb4 <memset>
			}
			break;
 8005790:	e05e      	b.n	8005850 <ProcessReceivedCommand+0x1120>
		case 34: // Set DroppingDecel, m/s2
			if (StartRunning)// Setting is not available while running
 8005792:	4b32      	ldr	r3, [pc, #200]	; (800585c <ProcessReceivedCommand+0x112c>)
 8005794:	781b      	ldrb	r3, [r3, #0]
 8005796:	2b00      	cmp	r3, #0
 8005798:	d159      	bne.n	800584e <ProcessReceivedCommand+0x111e>
			{
				break;
			}
			else
			{
				DroppingDecel = MotionCode[1];
 800579a:	4b31      	ldr	r3, [pc, #196]	; (8005860 <ProcessReceivedCommand+0x1130>)
 800579c:	685b      	ldr	r3, [r3, #4]
 800579e:	4a37      	ldr	r2, [pc, #220]	; (800587c <ProcessReceivedCommand+0x114c>)
 80057a0:	6013      	str	r3, [r2, #0]
				Initialized = false;
 80057a2:	4b31      	ldr	r3, [pc, #196]	; (8005868 <ProcessReceivedCommand+0x1138>)
 80057a4:	2200      	movs	r2, #0
 80057a6:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r34/%.2fe",DroppingDecel);
 80057a8:	4b34      	ldr	r3, [pc, #208]	; (800587c <ProcessReceivedCommand+0x114c>)
 80057aa:	681b      	ldr	r3, [r3, #0]
 80057ac:	4618      	mov	r0, r3
 80057ae:	f7fa fecb 	bl	8000548 <__aeabi_f2d>
 80057b2:	4602      	mov	r2, r0
 80057b4:	460b      	mov	r3, r1
 80057b6:	4932      	ldr	r1, [pc, #200]	; (8005880 <ProcessReceivedCommand+0x1150>)
 80057b8:	482d      	ldr	r0, [pc, #180]	; (8005870 <ProcessReceivedCommand+0x1140>)
 80057ba:	f006 f903 	bl	800b9c4 <siprintf>
 80057be:	4603      	mov	r3, r0
 80057c0:	b2da      	uxtb	r2, r3
 80057c2:	4b2c      	ldr	r3, [pc, #176]	; (8005874 <ProcessReceivedCommand+0x1144>)
 80057c4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 80057c6:	4b2b      	ldr	r3, [pc, #172]	; (8005874 <ProcessReceivedCommand+0x1144>)
 80057c8:	781b      	ldrb	r3, [r3, #0]
 80057ca:	b29a      	uxth	r2, r3
 80057cc:	2364      	movs	r3, #100	; 0x64
 80057ce:	4928      	ldr	r1, [pc, #160]	; (8005870 <ProcessReceivedCommand+0x1140>)
 80057d0:	4829      	ldr	r0, [pc, #164]	; (8005878 <ProcessReceivedCommand+0x1148>)
 80057d2:	f004 fa16 	bl	8009c02 <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80057d6:	220f      	movs	r2, #15
 80057d8:	2100      	movs	r1, #0
 80057da:	4825      	ldr	r0, [pc, #148]	; (8005870 <ProcessReceivedCommand+0x1140>)
 80057dc:	f005 fa6a 	bl	800acb4 <memset>
			}
			break;
 80057e0:	e036      	b.n	8005850 <ProcessReceivedCommand+0x1120>
		default:
			break;
 80057e2:	bf00      	nop
 80057e4:	e034      	b.n	8005850 <ProcessReceivedCommand+0x1120>
			break;
 80057e6:	bf00      	nop
 80057e8:	e032      	b.n	8005850 <ProcessReceivedCommand+0x1120>
			break;
 80057ea:	bf00      	nop
 80057ec:	e030      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 80057ee:	bf00      	nop
 80057f0:	e02e      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 80057f2:	bf00      	nop
 80057f4:	e02c      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 80057f6:	bf00      	nop
 80057f8:	e02a      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 80057fa:	bf00      	nop
 80057fc:	e028      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 80057fe:	bf00      	nop
 8005800:	e026      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005802:	bf00      	nop
 8005804:	e024      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005806:	bf00      	nop
 8005808:	e022      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800580a:	bf00      	nop
 800580c:	e020      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800580e:	bf00      	nop
 8005810:	e01e      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005812:	bf00      	nop
 8005814:	e01c      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005816:	bf00      	nop
 8005818:	e01a      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800581a:	bf00      	nop
 800581c:	e018      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800581e:	bf00      	nop
 8005820:	e016      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005822:	bf00      	nop
 8005824:	e014      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005826:	bf00      	nop
 8005828:	e012      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800582a:	bf00      	nop
 800582c:	e010      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800582e:	bf00      	nop
 8005830:	e00e      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005832:	bf00      	nop
 8005834:	e00c      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005836:	bf00      	nop
 8005838:	e00a      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800583a:	bf00      	nop
 800583c:	e008      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800583e:	bf00      	nop
 8005840:	e006      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005842:	bf00      	nop
 8005844:	e004      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 8005846:	bf00      	nop
 8005848:	e002      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800584a:	bf00      	nop
 800584c:	e000      	b.n	8005850 <ProcessReceivedCommand+0x1120>
				break;
 800584e:	bf00      	nop
	}
}
 8005850:	bf00      	nop
 8005852:	3774      	adds	r7, #116	; 0x74
 8005854:	46bd      	mov	sp, r7
 8005856:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800585a:	bf00      	nop
 800585c:	20000432 	.word	0x20000432
 8005860:	2000051c 	.word	0x2000051c
 8005864:	20000540 	.word	0x20000540
 8005868:	2000043d 	.word	0x2000043d
 800586c:	0800f854 	.word	0x0800f854
 8005870:	2000041c 	.word	0x2000041c
 8005874:	20000414 	.word	0x20000414
 8005878:	200002f8 	.word	0x200002f8
 800587c:	20000474 	.word	0x20000474
 8005880:	0800f85c 	.word	0x0800f85c

08005884 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback function when a receiving complete
{
 8005884:	b580      	push	{r7, lr}
 8005886:	b082      	sub	sp, #8
 8005888:	af00      	add	r7, sp, #0
 800588a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(huart);

	// BEGIN UART6 Receiving
		if (huart->Instance==USART6) // If it is uart6, UI communication
 800588c:	687b      	ldr	r3, [r7, #4]
 800588e:	681b      	ldr	r3, [r3, #0]
 8005890:	4a2f      	ldr	r2, [pc, #188]	; (8005950 <HAL_UART_RxCpltCallback+0xcc>)
 8005892:	4293      	cmp	r3, r2
 8005894:	d121      	bne.n	80058da <HAL_UART_RxCpltCallback+0x56>
		{
			if(RxPCData!=EndChar) // read up to the ending char
 8005896:	4b2f      	ldr	r3, [pc, #188]	; (8005954 <HAL_UART_RxCpltCallback+0xd0>)
 8005898:	781b      	ldrb	r3, [r3, #0]
 800589a:	2224      	movs	r2, #36	; 0x24
 800589c:	4293      	cmp	r3, r2
 800589e:	d016      	beq.n	80058ce <HAL_UART_RxCpltCallback+0x4a>
			{
				if (RxPCData != 0) // remove the null character
 80058a0:	4b2c      	ldr	r3, [pc, #176]	; (8005954 <HAL_UART_RxCpltCallback+0xd0>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d018      	beq.n	80058da <HAL_UART_RxCpltCallback+0x56>
				//if (RxPCData != NULL) // remove the null character
				{
					RxPCBuff[_rxPCIndex]=RxPCData;// Copy the data to buffer
 80058a8:	4b2b      	ldr	r3, [pc, #172]	; (8005958 <HAL_UART_RxCpltCallback+0xd4>)
 80058aa:	781b      	ldrb	r3, [r3, #0]
 80058ac:	461a      	mov	r2, r3
 80058ae:	4b29      	ldr	r3, [pc, #164]	; (8005954 <HAL_UART_RxCpltCallback+0xd0>)
 80058b0:	7819      	ldrb	r1, [r3, #0]
 80058b2:	4b2a      	ldr	r3, [pc, #168]	; (800595c <HAL_UART_RxCpltCallback+0xd8>)
 80058b4:	5499      	strb	r1, [r3, r2]
				  _rxPCIndex++;
 80058b6:	4b28      	ldr	r3, [pc, #160]	; (8005958 <HAL_UART_RxCpltCallback+0xd4>)
 80058b8:	781b      	ldrb	r3, [r3, #0]
 80058ba:	3301      	adds	r3, #1
 80058bc:	b2da      	uxtb	r2, r3
 80058be:	4b26      	ldr	r3, [pc, #152]	; (8005958 <HAL_UART_RxCpltCallback+0xd4>)
 80058c0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 80058c2:	2201      	movs	r2, #1
 80058c4:	4923      	ldr	r1, [pc, #140]	; (8005954 <HAL_UART_RxCpltCallback+0xd0>)
 80058c6:	4826      	ldr	r0, [pc, #152]	; (8005960 <HAL_UART_RxCpltCallback+0xdc>)
 80058c8:	f004 fa2d 	bl	8009d26 <HAL_UART_Receive_IT>
 80058cc:	e005      	b.n	80058da <HAL_UART_RxCpltCallback+0x56>
				}
			}
			else //if(RxPCData==EndChar)
			{
				_rxPCIndex=0;
 80058ce:	4b22      	ldr	r3, [pc, #136]	; (8005958 <HAL_UART_RxCpltCallback+0xd4>)
 80058d0:	2200      	movs	r2, #0
 80058d2:	701a      	strb	r2, [r3, #0]
				RxUart6_Cpl_Flag=true; // reading completed
 80058d4:	4b23      	ldr	r3, [pc, #140]	; (8005964 <HAL_UART_RxCpltCallback+0xe0>)
 80058d6:	2201      	movs	r2, #1
 80058d8:	701a      	strb	r2, [r3, #0]
		}
	// END UART6

		//BEGIN UART5 = HAL_UART_Receive_IT============================================
		/// Use this part
		if (huart->Instance==UART5) // If it is uart5, driver communication
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	681b      	ldr	r3, [r3, #0]
 80058de:	4a22      	ldr	r2, [pc, #136]	; (8005968 <HAL_UART_RxCpltCallback+0xe4>)
 80058e0:	4293      	cmp	r3, r2
 80058e2:	d130      	bne.n	8005946 <HAL_UART_RxCpltCallback+0xc2>
		{
			if (_rxDriverIndex >= NoOfBytes) //
 80058e4:	4b21      	ldr	r3, [pc, #132]	; (800596c <HAL_UART_RxCpltCallback+0xe8>)
 80058e6:	781a      	ldrb	r2, [r3, #0]
 80058e8:	4b21      	ldr	r3, [pc, #132]	; (8005970 <HAL_UART_RxCpltCallback+0xec>)
 80058ea:	781b      	ldrb	r3, [r3, #0]
 80058ec:	429a      	cmp	r2, r3
 80058ee:	d308      	bcc.n	8005902 <HAL_UART_RxCpltCallback+0x7e>
			{
				RxUart5_Cpl_Flag = true; // Complete Receiving
 80058f0:	4b20      	ldr	r3, [pc, #128]	; (8005974 <HAL_UART_RxCpltCallback+0xf0>)
 80058f2:	2201      	movs	r2, #1
 80058f4:	701a      	strb	r2, [r3, #0]
				StartReceiveDriverData = false;
 80058f6:	4b20      	ldr	r3, [pc, #128]	; (8005978 <HAL_UART_RxCpltCallback+0xf4>)
 80058f8:	2200      	movs	r2, #0
 80058fa:	701a      	strb	r2, [r3, #0]
				_rxDriverIndex = 0;
 80058fc:	4b1b      	ldr	r3, [pc, #108]	; (800596c <HAL_UART_RxCpltCallback+0xe8>)
 80058fe:	2200      	movs	r2, #0
 8005900:	701a      	strb	r2, [r3, #0]
			}
			if ((_rxDriverIndex == 0)&&(RxDriverData == DriverID)) // If byte 0 is the Driver ID
 8005902:	4b1a      	ldr	r3, [pc, #104]	; (800596c <HAL_UART_RxCpltCallback+0xe8>)
 8005904:	781b      	ldrb	r3, [r3, #0]
 8005906:	2b00      	cmp	r3, #0
 8005908:	d106      	bne.n	8005918 <HAL_UART_RxCpltCallback+0x94>
 800590a:	4b1c      	ldr	r3, [pc, #112]	; (800597c <HAL_UART_RxCpltCallback+0xf8>)
 800590c:	781b      	ldrb	r3, [r3, #0]
 800590e:	2b01      	cmp	r3, #1
 8005910:	d102      	bne.n	8005918 <HAL_UART_RxCpltCallback+0x94>
			{
				StartReceiveDriverData = true;
 8005912:	4b19      	ldr	r3, [pc, #100]	; (8005978 <HAL_UART_RxCpltCallback+0xf4>)
 8005914:	2201      	movs	r2, #1
 8005916:	701a      	strb	r2, [r3, #0]
			}
			if (StartReceiveDriverData) //
 8005918:	4b17      	ldr	r3, [pc, #92]	; (8005978 <HAL_UART_RxCpltCallback+0xf4>)
 800591a:	781b      	ldrb	r3, [r3, #0]
 800591c:	b2db      	uxtb	r3, r3
 800591e:	2b00      	cmp	r3, #0
 8005920:	d011      	beq.n	8005946 <HAL_UART_RxCpltCallback+0xc2>
			{
				RxDriverBuff[_rxDriverIndex]=RxDriverData;// Copy the data to buffer
 8005922:	4b12      	ldr	r3, [pc, #72]	; (800596c <HAL_UART_RxCpltCallback+0xe8>)
 8005924:	781b      	ldrb	r3, [r3, #0]
 8005926:	461a      	mov	r2, r3
 8005928:	4b14      	ldr	r3, [pc, #80]	; (800597c <HAL_UART_RxCpltCallback+0xf8>)
 800592a:	7819      	ldrb	r1, [r3, #0]
 800592c:	4b14      	ldr	r3, [pc, #80]	; (8005980 <HAL_UART_RxCpltCallback+0xfc>)
 800592e:	5499      	strb	r1, [r3, r2]
				_rxDriverIndex++;
 8005930:	4b0e      	ldr	r3, [pc, #56]	; (800596c <HAL_UART_RxCpltCallback+0xe8>)
 8005932:	781b      	ldrb	r3, [r3, #0]
 8005934:	3301      	adds	r3, #1
 8005936:	b2da      	uxtb	r2, r3
 8005938:	4b0c      	ldr	r3, [pc, #48]	; (800596c <HAL_UART_RxCpltCallback+0xe8>)
 800593a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time ///*/
 800593c:	2201      	movs	r2, #1
 800593e:	490f      	ldr	r1, [pc, #60]	; (800597c <HAL_UART_RxCpltCallback+0xf8>)
 8005940:	4810      	ldr	r0, [pc, #64]	; (8005984 <HAL_UART_RxCpltCallback+0x100>)
 8005942:	f004 f9f0 	bl	8009d26 <HAL_UART_Receive_IT>
			}
		}
		// END UART5
}
 8005946:	bf00      	nop
 8005948:	3708      	adds	r7, #8
 800594a:	46bd      	mov	sp, r7
 800594c:	bd80      	pop	{r7, pc}
 800594e:	bf00      	nop
 8005950:	40011400 	.word	0x40011400
 8005954:	200003ac 	.word	0x200003ac
 8005958:	2000042b 	.word	0x2000042b
 800595c:	2000033c 	.word	0x2000033c
 8005960:	200002f8 	.word	0x200002f8
 8005964:	2000042d 	.word	0x2000042d
 8005968:	40005000 	.word	0x40005000
 800596c:	2000042c 	.word	0x2000042c
 8005970:	20000000 	.word	0x20000000
 8005974:	2000042e 	.word	0x2000042e
 8005978:	2000042f 	.word	0x2000042f
 800597c:	200003ad 	.word	0x200003ad
 8005980:	20000364 	.word	0x20000364
 8005984:	200002b4 	.word	0x200002b4

08005988 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer 2 interrupt, 1ms
{
 8005988:	b580      	push	{r7, lr}
 800598a:	b082      	sub	sp, #8
 800598c:	af00      	add	r7, sp, #0
 800598e:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)	// TIMER 3 interrupt for pulse generation, period: 2us
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	4a7a      	ldr	r2, [pc, #488]	; (8005b80 <HAL_TIM_PeriodElapsedCallback+0x1f8>)
 8005996:	4293      	cmp	r3, r2
 8005998:	f040 80c7 	bne.w	8005b2a <HAL_TIM_PeriodElapsedCallback+0x1a2>
	{
		if (PulseGenerationFlag) // Only generating pulse when the flag is ON. Otherwise, do nothing
 800599c:	4b79      	ldr	r3, [pc, #484]	; (8005b84 <HAL_TIM_PeriodElapsedCallback+0x1fc>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	f000 80c2 	beq.w	8005b2a <HAL_TIM_PeriodElapsedCallback+0x1a2>
		{
				Timer3Count++;
 80059a6:	4b78      	ldr	r3, [pc, #480]	; (8005b88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80059a8:	881b      	ldrh	r3, [r3, #0]
 80059aa:	3301      	adds	r3, #1
 80059ac:	b29a      	uxth	r2, r3
 80059ae:	4b76      	ldr	r3, [pc, #472]	; (8005b88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80059b0:	801a      	strh	r2, [r3, #0]
				if (Timer3Count >= Timer3CountPeriod) // Generate pulse
 80059b2:	4b75      	ldr	r3, [pc, #468]	; (8005b88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80059b4:	881a      	ldrh	r2, [r3, #0]
 80059b6:	4b75      	ldr	r3, [pc, #468]	; (8005b8c <HAL_TIM_PeriodElapsedCallback+0x204>)
 80059b8:	881b      	ldrh	r3, [r3, #0]
 80059ba:	429a      	cmp	r2, r3
 80059bc:	f0c0 80b5 	bcc.w	8005b2a <HAL_TIM_PeriodElapsedCallback+0x1a2>
				{
					Timer3Count = 0;
 80059c0:	4b71      	ldr	r3, [pc, #452]	; (8005b88 <HAL_TIM_PeriodElapsedCallback+0x200>)
 80059c2:	2200      	movs	r2, #0
 80059c4:	801a      	strh	r2, [r3, #0]

					if(StartSimulating) // Check the no of pulse generated in Simulating
 80059c6:	4b72      	ldr	r3, [pc, #456]	; (8005b90 <HAL_TIM_PeriodElapsedCallback+0x208>)
 80059c8:	781b      	ldrb	r3, [r3, #0]
 80059ca:	2b00      	cmp	r3, #0
 80059cc:	d02b      	beq.n	8005a26 <HAL_TIM_PeriodElapsedCallback+0x9e>
					{
						if (IsPulseCheck) //
 80059ce:	4b71      	ldr	r3, [pc, #452]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 80059d0:	781b      	ldrb	r3, [r3, #0]
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	2b00      	cmp	r3, #0
 80059d6:	d026      	beq.n	8005a26 <HAL_TIM_PeriodElapsedCallback+0x9e>
						{
							if(MotorDriver) // HIGEN Driver
 80059d8:	4b6f      	ldr	r3, [pc, #444]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x210>)
 80059da:	781b      	ldrb	r3, [r3, #0]
 80059dc:	2b00      	cmp	r3, #0
 80059de:	d011      	beq.n	8005a04 <HAL_TIM_PeriodElapsedCallback+0x7c>
							{
								if ( abs(8*PulseSimuCount) >= abs(TargetPosition)) // 8 is th gear ratio
 80059e0:	4b6e      	ldr	r3, [pc, #440]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x214>)
 80059e2:	681b      	ldr	r3, [r3, #0]
 80059e4:	00db      	lsls	r3, r3, #3
 80059e6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80059ea:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80059ee:	4b6c      	ldr	r3, [pc, #432]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	bfb8      	it	lt
 80059f6:	425b      	neglt	r3, r3
 80059f8:	429a      	cmp	r2, r3
 80059fa:	db14      	blt.n	8005a26 <HAL_TIM_PeriodElapsedCallback+0x9e>
									{
										IsReachTargetPosition = true;
 80059fc:	4b69      	ldr	r3, [pc, #420]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 80059fe:	2201      	movs	r2, #1
 8005a00:	701a      	strb	r2, [r3, #0]
										return;
 8005a02:	e0b9      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
									}
							}
							else // ASDA Driver
							{
								if ( abs(PulseSimuCount) >= abs(TargetPosition))
 8005a04:	4b65      	ldr	r3, [pc, #404]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005a0c:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005a10:	4b63      	ldr	r3, [pc, #396]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005a12:	681b      	ldr	r3, [r3, #0]
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	bfb8      	it	lt
 8005a18:	425b      	neglt	r3, r3
 8005a1a:	429a      	cmp	r2, r3
 8005a1c:	db03      	blt.n	8005a26 <HAL_TIM_PeriodElapsedCallback+0x9e>
									{
										IsReachTargetPosition = true;
 8005a1e:	4b61      	ldr	r3, [pc, #388]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005a20:	2201      	movs	r2, #1
 8005a22:	701a      	strb	r2, [r3, #0]
										return;
 8005a24:	e0a8      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
									}
							}
						}
					}

					if (StartRunning)
 8005a26:	4b60      	ldr	r3, [pc, #384]	; (8005ba8 <HAL_TIM_PeriodElapsedCallback+0x220>)
 8005a28:	781b      	ldrb	r3, [r3, #0]
 8005a2a:	2b00      	cmp	r3, #0
 8005a2c:	d041      	beq.n	8005ab2 <HAL_TIM_PeriodElapsedCallback+0x12a>
					{
						if (IsPulseCheck)
 8005a2e:	4b59      	ldr	r3, [pc, #356]	; (8005b94 <HAL_TIM_PeriodElapsedCallback+0x20c>)
 8005a30:	781b      	ldrb	r3, [r3, #0]
 8005a32:	b2db      	uxtb	r3, r3
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d03c      	beq.n	8005ab2 <HAL_TIM_PeriodElapsedCallback+0x12a>
						{
							if(MotorDriver) // HIGEN Driver
 8005a38:	4b57      	ldr	r3, [pc, #348]	; (8005b98 <HAL_TIM_PeriodElapsedCallback+0x210>)
 8005a3a:	781b      	ldrb	r3, [r3, #0]
 8005a3c:	2b00      	cmp	r3, #0
 8005a3e:	d027      	beq.n	8005a90 <HAL_TIM_PeriodElapsedCallback+0x108>
							{
									if (Direction) // dropping down
 8005a40:	4b5a      	ldr	r3, [pc, #360]	; (8005bac <HAL_TIM_PeriodElapsedCallback+0x224>)
 8005a42:	781b      	ldrb	r3, [r3, #0]
 8005a44:	2b00      	cmp	r3, #0
 8005a46:	d011      	beq.n	8005a6c <HAL_TIM_PeriodElapsedCallback+0xe4>
									{
										if ( abs(8*PositionPulseCmd) >= abs(TargetPosition)) // 8 is th gear ratio
 8005a48:	4b59      	ldr	r3, [pc, #356]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	00db      	lsls	r3, r3, #3
 8005a4e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005a52:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005a56:	4b52      	ldr	r3, [pc, #328]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005a58:	681b      	ldr	r3, [r3, #0]
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	bfb8      	it	lt
 8005a5e:	425b      	neglt	r3, r3
 8005a60:	429a      	cmp	r2, r3
 8005a62:	db26      	blt.n	8005ab2 <HAL_TIM_PeriodElapsedCallback+0x12a>
											{
												IsReachTargetPosition = true;
 8005a64:	4b4f      	ldr	r3, [pc, #316]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005a66:	2201      	movs	r2, #1
 8005a68:	701a      	strb	r2, [r3, #0]
												return;
 8005a6a:	e085      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
											}
									}
									else // Pulling Up
									{
										if ( abs(8*PositionPulseCmd) < abs(TargetPosition)) // 8 is th gear ratio
 8005a6c:	4b50      	ldr	r3, [pc, #320]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005a6e:	681b      	ldr	r3, [r3, #0]
 8005a70:	00db      	lsls	r3, r3, #3
 8005a72:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005a76:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005a7a:	4b49      	ldr	r3, [pc, #292]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	2b00      	cmp	r3, #0
 8005a80:	bfb8      	it	lt
 8005a82:	425b      	neglt	r3, r3
 8005a84:	429a      	cmp	r2, r3
 8005a86:	da14      	bge.n	8005ab2 <HAL_TIM_PeriodElapsedCallback+0x12a>
											{
												IsReachTargetPosition = true;
 8005a88:	4b46      	ldr	r3, [pc, #280]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005a8a:	2201      	movs	r2, #1
 8005a8c:	701a      	strb	r2, [r3, #0]
												return;
 8005a8e:	e073      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
											}
									}
							}
							else // ASDA Driver
							{
								if ( abs(PositionPulseCmd) >= abs(TargetPosition)) // 8 is th gear ratio
 8005a90:	4b47      	ldr	r3, [pc, #284]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8005a98:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8005a9c:	4b40      	ldr	r3, [pc, #256]	; (8005ba0 <HAL_TIM_PeriodElapsedCallback+0x218>)
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	2b00      	cmp	r3, #0
 8005aa2:	bfb8      	it	lt
 8005aa4:	425b      	neglt	r3, r3
 8005aa6:	429a      	cmp	r2, r3
 8005aa8:	db03      	blt.n	8005ab2 <HAL_TIM_PeriodElapsedCallback+0x12a>
								{
									IsReachTargetPosition = true;
 8005aaa:	4b3e      	ldr	r3, [pc, #248]	; (8005ba4 <HAL_TIM_PeriodElapsedCallback+0x21c>)
 8005aac:	2201      	movs	r2, #1
 8005aae:	701a      	strb	r2, [r3, #0]
									return;
 8005ab0:	e062      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
							}
						}

					}

					if (PRIsToggled)
 8005ab2:	4b40      	ldr	r3, [pc, #256]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005ab4:	781b      	ldrb	r3, [r3, #0]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d01b      	beq.n	8005af2 <HAL_TIM_PeriodElapsedCallback+0x16a>
					{
						HAL_GPIO_TogglePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin); // Generate pulses on PF by tonggling this input
 8005aba:	f44f 7100 	mov.w	r1, #512	; 0x200
 8005abe:	483e      	ldr	r0, [pc, #248]	; (8005bb8 <HAL_TIM_PeriodElapsedCallback+0x230>)
 8005ac0:	f002 fd0f 	bl	80084e2 <HAL_GPIO_TogglePin>
						PRIsToggled = false;
 8005ac4:	4b3b      	ldr	r3, [pc, #236]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005ac6:	2200      	movs	r2, #0
 8005ac8:	701a      	strb	r2, [r3, #0]
						if (StartSimulating)
 8005aca:	4b31      	ldr	r3, [pc, #196]	; (8005b90 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8005acc:	781b      	ldrb	r3, [r3, #0]
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d005      	beq.n	8005ade <HAL_TIM_PeriodElapsedCallback+0x156>
						{
							PulseSimuCount++;
 8005ad2:	4b32      	ldr	r3, [pc, #200]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005ad4:	681b      	ldr	r3, [r3, #0]
 8005ad6:	3301      	adds	r3, #1
 8005ad8:	4a30      	ldr	r2, [pc, #192]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005ada:	6013      	str	r3, [r2, #0]
							return;
 8005adc:	e04c      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
						}
						if (StartPositionCount)
 8005ade:	4b37      	ldr	r3, [pc, #220]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005ae0:	781b      	ldrb	r3, [r3, #0]
 8005ae2:	2b00      	cmp	r3, #0
 8005ae4:	d021      	beq.n	8005b2a <HAL_TIM_PeriodElapsedCallback+0x1a2>
						{
							PositionPulseCmd++;
 8005ae6:	4b32      	ldr	r3, [pc, #200]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005ae8:	681b      	ldr	r3, [r3, #0]
 8005aea:	3301      	adds	r3, #1
 8005aec:	4a30      	ldr	r2, [pc, #192]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005aee:	6013      	str	r3, [r2, #0]
//							}
//							else // false: pulling up
//							{
//								PositionPulseCmd--; // Decrease the pulse cmd
//							}
							return; // exit the function
 8005af0:	e042      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
						}

					}
					else
					{
						HAL_GPIO_TogglePin(PC8_PR_GPIO_Port, PC8_PR_Pin); // Generate pulses on PF by tonggling this input
 8005af2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005af6:	4832      	ldr	r0, [pc, #200]	; (8005bc0 <HAL_TIM_PeriodElapsedCallback+0x238>)
 8005af8:	f002 fcf3 	bl	80084e2 <HAL_GPIO_TogglePin>
						PRIsToggled = true;
 8005afc:	4b2d      	ldr	r3, [pc, #180]	; (8005bb4 <HAL_TIM_PeriodElapsedCallback+0x22c>)
 8005afe:	2201      	movs	r2, #1
 8005b00:	701a      	strb	r2, [r3, #0]
						if (StartSimulating)
 8005b02:	4b23      	ldr	r3, [pc, #140]	; (8005b90 <HAL_TIM_PeriodElapsedCallback+0x208>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	2b00      	cmp	r3, #0
 8005b08:	d005      	beq.n	8005b16 <HAL_TIM_PeriodElapsedCallback+0x18e>
						{
							PulseSimuCount++;
 8005b0a:	4b24      	ldr	r3, [pc, #144]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	3301      	adds	r3, #1
 8005b10:	4a22      	ldr	r2, [pc, #136]	; (8005b9c <HAL_TIM_PeriodElapsedCallback+0x214>)
 8005b12:	6013      	str	r3, [r2, #0]
							return;
 8005b14:	e030      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
						}
						if(StartPositionCount)
 8005b16:	4b29      	ldr	r3, [pc, #164]	; (8005bbc <HAL_TIM_PeriodElapsedCallback+0x234>)
 8005b18:	781b      	ldrb	r3, [r3, #0]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d005      	beq.n	8005b2a <HAL_TIM_PeriodElapsedCallback+0x1a2>
						{
							PositionPulseCmd++;
 8005b1e:	4b24      	ldr	r3, [pc, #144]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	3301      	adds	r3, #1
 8005b24:	4a22      	ldr	r2, [pc, #136]	; (8005bb0 <HAL_TIM_PeriodElapsedCallback+0x228>)
 8005b26:	6013      	str	r3, [r2, #0]
//							}
//							else // false: pulling up
//							{
//								PositionPulseCmd--; // Decrease the pulse cmd
//							}
							return;
 8005b28:	e026      	b.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
					}
				}
		}
	}

	if (htim->Instance == TIM2) // Timer 2 interrupt, for the main control function, 1ms
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	681b      	ldr	r3, [r3, #0]
 8005b2e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b32:	d121      	bne.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
		{
				// To calculate PID controller
				Timer2SampleTimeControlCount++;
 8005b34:	4b23      	ldr	r3, [pc, #140]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	3301      	adds	r3, #1
 8005b3a:	b2da      	uxtb	r2, r3
 8005b3c:	4b21      	ldr	r3, [pc, #132]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005b3e:	701a      	strb	r2, [r3, #0]
				if (Timer2SampleTimeControlCount >= SampleTime) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 8005b40:	4b20      	ldr	r3, [pc, #128]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005b42:	781a      	ldrb	r2, [r3, #0]
 8005b44:	4b20      	ldr	r3, [pc, #128]	; (8005bc8 <HAL_TIM_PeriodElapsedCallback+0x240>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	429a      	cmp	r2, r3
 8005b4a:	d305      	bcc.n	8005b58 <HAL_TIM_PeriodElapsedCallback+0x1d0>
				{
					Timer2ControlInterrupt = true;
 8005b4c:	4b1f      	ldr	r3, [pc, #124]	; (8005bcc <HAL_TIM_PeriodElapsedCallback+0x244>)
 8005b4e:	2201      	movs	r2, #1
 8005b50:	701a      	strb	r2, [r3, #0]
					Timer2SampleTimeControlCount = 0;
 8005b52:	4b1c      	ldr	r3, [pc, #112]	; (8005bc4 <HAL_TIM_PeriodElapsedCallback+0x23c>)
 8005b54:	2200      	movs	r2, #0
 8005b56:	701a      	strb	r2, [r3, #0]
				}

				// To transmit the data each 50ms
				Timer2Count++;
 8005b58:	4b1d      	ldr	r3, [pc, #116]	; (8005bd0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b5a:	781b      	ldrb	r3, [r3, #0]
 8005b5c:	3301      	adds	r3, #1
 8005b5e:	b2da      	uxtb	r2, r3
 8005b60:	4b1b      	ldr	r3, [pc, #108]	; (8005bd0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b62:	701a      	strb	r2, [r3, #0]
				if (Timer2Count >= 50) // turn on the flag when the sample time reaches, fix the data sample time to 50
 8005b64:	4b1a      	ldr	r3, [pc, #104]	; (8005bd0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b66:	781b      	ldrb	r3, [r3, #0]
 8005b68:	2b31      	cmp	r3, #49	; 0x31
 8005b6a:	d905      	bls.n	8005b78 <HAL_TIM_PeriodElapsedCallback+0x1f0>
				{
					Timer2SampleTimeInterrupt = true;
 8005b6c:	4b19      	ldr	r3, [pc, #100]	; (8005bd4 <HAL_TIM_PeriodElapsedCallback+0x24c>)
 8005b6e:	2201      	movs	r2, #1
 8005b70:	701a      	strb	r2, [r3, #0]
					Timer2Count = 0;
 8005b72:	4b17      	ldr	r3, [pc, #92]	; (8005bd0 <HAL_TIM_PeriodElapsedCallback+0x248>)
 8005b74:	2200      	movs	r2, #0
 8005b76:	701a      	strb	r2, [r3, #0]
				}
		}
}
 8005b78:	3708      	adds	r7, #8
 8005b7a:	46bd      	mov	sp, r7
 8005b7c:	bd80      	pop	{r7, pc}
 8005b7e:	bf00      	nop
 8005b80:	40000400 	.word	0x40000400
 8005b84:	20000436 	.word	0x20000436
 8005b88:	20000456 	.word	0x20000456
 8005b8c:	20000454 	.word	0x20000454
 8005b90:	20000433 	.word	0x20000433
 8005b94:	2000044c 	.word	0x2000044c
 8005b98:	20000003 	.word	0x20000003
 8005b9c:	200004b4 	.word	0x200004b4
 8005ba0:	200004b0 	.word	0x200004b0
 8005ba4:	20000438 	.word	0x20000438
 8005ba8:	20000432 	.word	0x20000432
 8005bac:	20000434 	.word	0x20000434
 8005bb0:	200004b8 	.word	0x200004b8
 8005bb4:	2000043f 	.word	0x2000043f
 8005bb8:	40021000 	.word	0x40021000
 8005bbc:	20000440 	.word	0x20000440
 8005bc0:	40020800 	.word	0x40020800
 8005bc4:	2000044e 	.word	0x2000044e
 8005bc8:	20000468 	.word	0x20000468
 8005bcc:	20000431 	.word	0x20000431
 8005bd0:	2000044d 	.word	0x2000044d
 8005bd4:	20000430 	.word	0x20000430

08005bd8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005bd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005bdc:	b08b      	sub	sp, #44	; 0x2c
 8005bde:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8005be0:	f001 fd7a 	bl	80076d8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005be4:	f000 ffb8 	bl	8006b58 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8005be8:	f001 f956 	bl	8006e98 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005bec:	f001 f83a 	bl	8006c64 <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8005bf0:	f001 f928 	bl	8006e44 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8005bf4:	f001 f8b0 	bl	8006d58 <MX_TIM3_Init>
  MX_UART5_Init();
 8005bf8:	f001 f8fa 	bl	8006df0 <MX_UART5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005bfc:	f001 f816 	bl	8006c2c <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(PE15_RELAY1_GPIO_Port, PE15_RELAY1_Pin, GPIO_PIN_SET);
 8005c00:	2201      	movs	r2, #1
 8005c02:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005c06:	489e      	ldr	r0, [pc, #632]	; (8005e80 <main+0x2a8>)
 8005c08:	f002 fc52 	bl	80084b0 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8005c0c:	f241 3088 	movw	r0, #5000	; 0x1388
 8005c10:	f001 fdd4 	bl	80077bc <HAL_Delay>

	InitParams (); // Read the saved params from the flash memory
 8005c14:	f7fe fce6 	bl	80045e4 <InitParams>

	HAL_TIM_Base_Start_IT(&htim2); // Enable Timer 2 interrupt
 8005c18:	489a      	ldr	r0, [pc, #616]	; (8005e84 <main+0x2ac>)
 8005c1a:	f003 f925 	bl	8008e68 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8005c1e:	2201      	movs	r2, #1
 8005c20:	4999      	ldr	r1, [pc, #612]	; (8005e88 <main+0x2b0>)
 8005c22:	489a      	ldr	r0, [pc, #616]	; (8005e8c <main+0x2b4>)
 8005c24:	f004 f87f 	bl	8009d26 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart4,&RxESPData,1);
	DriverInit();
 8005c28:	f7fb fb52 	bl	80012d0 <DriverInit>
	ReadMultiRegister(StE03,5);
 8005c2c:	2105      	movs	r1, #5
 8005c2e:	200c      	movs	r0, #12
 8005c30:	f7fb fcba 	bl	80015a8 <ReadMultiRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Process Received Cmd from the GUI
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8005c34:	4b96      	ldr	r3, [pc, #600]	; (8005e90 <main+0x2b8>)
 8005c36:	781b      	ldrb	r3, [r3, #0]
 8005c38:	b2db      	uxtb	r3, r3
 8005c3a:	2b00      	cmp	r3, #0
 8005c3c:	d00b      	beq.n	8005c56 <main+0x7e>
			{
				ExtractMotionCode();
 8005c3e:	f7fb fc57 	bl	80014f0 <ExtractMotionCode>
				ProcessReceivedCommand (); // Proceed the command
 8005c42:	f7fe fd75 	bl	8004730 <ProcessReceivedCommand>
				RxUart6_Cpl_Flag=false;
 8005c46:	4b92      	ldr	r3, [pc, #584]	; (8005e90 <main+0x2b8>)
 8005c48:	2200      	movs	r2, #0
 8005c4a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8005c4c:	2201      	movs	r2, #1
 8005c4e:	498e      	ldr	r1, [pc, #568]	; (8005e88 <main+0x2b0>)
 8005c50:	488e      	ldr	r0, [pc, #568]	; (8005e8c <main+0x2b4>)
 8005c52:	f004 f868 	bl	8009d26 <HAL_UART_Receive_IT>
			}
		// END UART6 Process Cmd

		// Process Timer2 interrupt after a period of Sampletime
		if (Timer2ControlInterrupt)
 8005c56:	4b8f      	ldr	r3, [pc, #572]	; (8005e94 <main+0x2bc>)
 8005c58:	781b      	ldrb	r3, [r3, #0]
 8005c5a:	b2db      	uxtb	r3, r3
 8005c5c:	2b00      	cmp	r3, #0
 8005c5e:	f000 83c0 	beq.w	80063e2 <main+0x80a>
		{
			Timer2ControlInterrupt = false; // Reset the flag
 8005c62:	4b8c      	ldr	r3, [pc, #560]	; (8005e94 <main+0x2bc>)
 8005c64:	2200      	movs	r2, #0
 8005c66:	701a      	strb	r2, [r3, #0]
			// BEGIN running experiment
			if (StartRunning) // Process Running Experiment
 8005c68:	4b8b      	ldr	r3, [pc, #556]	; (8005e98 <main+0x2c0>)
 8005c6a:	781b      	ldrb	r3, [r3, #0]
 8005c6c:	2b00      	cmp	r3, #0
 8005c6e:	f000 809b 	beq.w	8005da8 <main+0x1d0>
			{
				switch (ExperimentMode)
 8005c72:	4b8a      	ldr	r3, [pc, #552]	; (8005e9c <main+0x2c4>)
 8005c74:	781b      	ldrb	r3, [r3, #0]
 8005c76:	2b03      	cmp	r3, #3
 8005c78:	d067      	beq.n	8005d4a <main+0x172>
 8005c7a:	2b03      	cmp	r3, #3
 8005c7c:	f300 8096 	bgt.w	8005dac <main+0x1d4>
 8005c80:	2b01      	cmp	r3, #1
 8005c82:	d002      	beq.n	8005c8a <main+0xb2>
 8005c84:	2b02      	cmp	r3, #2
 8005c86:	d031      	beq.n	8005cec <main+0x114>
								}
							}
						}
						break;
					default:
						break;
 8005c88:	e090      	b.n	8005dac <main+0x1d4>
						if (Dropping()) // Dropping() return true when it finishing
 8005c8a:	f7fe f8a5 	bl	8003dd8 <Dropping>
 8005c8e:	4603      	mov	r3, r0
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	f000 808d 	beq.w	8005db0 <main+0x1d8>
							if (!POSReach) // Check if position is reached or not
 8005c96:	4b82      	ldr	r3, [pc, #520]	; (8005ea0 <main+0x2c8>)
 8005c98:	781b      	ldrb	r3, [r3, #0]
 8005c9a:	f083 0301 	eor.w	r3, r3, #1
 8005c9e:	b2db      	uxtb	r3, r3
 8005ca0:	2b00      	cmp	r3, #0
 8005ca2:	f000 8085 	beq.w	8005db0 <main+0x1d8>
								if (WaitingMiliSecond(2000)) // Wait for 2 Seconds
 8005ca6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005caa:	f7fb fedd 	bl	8001a68 <WaitingMiliSecond>
 8005cae:	4603      	mov	r3, r0
 8005cb0:	2b00      	cmp	r3, #0
 8005cb2:	d07d      	beq.n	8005db0 <main+0x1d8>
									StopExperiment();
 8005cb4:	f7fe fc0e 	bl	80044d4 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8005cb8:	4b7a      	ldr	r3, [pc, #488]	; (8005ea4 <main+0x2cc>)
 8005cba:	781b      	ldrb	r3, [r3, #0]
 8005cbc:	2b00      	cmp	r3, #0
 8005cbe:	d077      	beq.n	8005db0 <main+0x1d8>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset/ clear the array
 8005cc0:	225a      	movs	r2, #90	; 0x5a
 8005cc2:	2100      	movs	r1, #0
 8005cc4:	4878      	ldr	r0, [pc, #480]	; (8005ea8 <main+0x2d0>)
 8005cc6:	f004 fff5 	bl	800acb4 <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8005cca:	4978      	ldr	r1, [pc, #480]	; (8005eac <main+0x2d4>)
 8005ccc:	4876      	ldr	r0, [pc, #472]	; (8005ea8 <main+0x2d0>)
 8005cce:	f005 fe79 	bl	800b9c4 <siprintf>
 8005cd2:	4603      	mov	r3, r0
 8005cd4:	b2da      	uxtb	r2, r3
 8005cd6:	4b76      	ldr	r3, [pc, #472]	; (8005eb0 <main+0x2d8>)
 8005cd8:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005cda:	4b75      	ldr	r3, [pc, #468]	; (8005eb0 <main+0x2d8>)
 8005cdc:	781b      	ldrb	r3, [r3, #0]
 8005cde:	b29a      	uxth	r2, r3
 8005ce0:	23c8      	movs	r3, #200	; 0xc8
 8005ce2:	4971      	ldr	r1, [pc, #452]	; (8005ea8 <main+0x2d0>)
 8005ce4:	4869      	ldr	r0, [pc, #420]	; (8005e8c <main+0x2b4>)
 8005ce6:	f003 ff8c 	bl	8009c02 <HAL_UART_Transmit>
						break;
 8005cea:	e061      	b.n	8005db0 <main+0x1d8>
						if (PullingExperiment()) // PullingExperiment() return true when it finishing
 8005cec:	f7fc fb88 	bl	8002400 <PullingExperiment>
 8005cf0:	4603      	mov	r3, r0
 8005cf2:	2b00      	cmp	r3, #0
 8005cf4:	d05e      	beq.n	8005db4 <main+0x1dc>
							if (!POSReach) // Check if position is reached or not
 8005cf6:	4b6a      	ldr	r3, [pc, #424]	; (8005ea0 <main+0x2c8>)
 8005cf8:	781b      	ldrb	r3, [r3, #0]
 8005cfa:	f083 0301 	eor.w	r3, r3, #1
 8005cfe:	b2db      	uxtb	r3, r3
 8005d00:	2b00      	cmp	r3, #0
 8005d02:	d057      	beq.n	8005db4 <main+0x1dc>
								if (WaitingMiliSecond(2000)) // Wait for 2 Seconds
 8005d04:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005d08:	f7fb feae 	bl	8001a68 <WaitingMiliSecond>
 8005d0c:	4603      	mov	r3, r0
 8005d0e:	2b00      	cmp	r3, #0
 8005d10:	d050      	beq.n	8005db4 <main+0x1dc>
									StopExperiment();
 8005d12:	f7fe fbdf 	bl	80044d4 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8005d16:	4b63      	ldr	r3, [pc, #396]	; (8005ea4 <main+0x2cc>)
 8005d18:	781b      	ldrb	r3, [r3, #0]
 8005d1a:	2b00      	cmp	r3, #0
 8005d1c:	d04a      	beq.n	8005db4 <main+0x1dc>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005d1e:	225a      	movs	r2, #90	; 0x5a
 8005d20:	2100      	movs	r1, #0
 8005d22:	4861      	ldr	r0, [pc, #388]	; (8005ea8 <main+0x2d0>)
 8005d24:	f004 ffc6 	bl	800acb4 <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8005d28:	4960      	ldr	r1, [pc, #384]	; (8005eac <main+0x2d4>)
 8005d2a:	485f      	ldr	r0, [pc, #380]	; (8005ea8 <main+0x2d0>)
 8005d2c:	f005 fe4a 	bl	800b9c4 <siprintf>
 8005d30:	4603      	mov	r3, r0
 8005d32:	b2da      	uxtb	r2, r3
 8005d34:	4b5e      	ldr	r3, [pc, #376]	; (8005eb0 <main+0x2d8>)
 8005d36:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005d38:	4b5d      	ldr	r3, [pc, #372]	; (8005eb0 <main+0x2d8>)
 8005d3a:	781b      	ldrb	r3, [r3, #0]
 8005d3c:	b29a      	uxth	r2, r3
 8005d3e:	23c8      	movs	r3, #200	; 0xc8
 8005d40:	4959      	ldr	r1, [pc, #356]	; (8005ea8 <main+0x2d0>)
 8005d42:	4852      	ldr	r0, [pc, #328]	; (8005e8c <main+0x2b4>)
 8005d44:	f003 ff5d 	bl	8009c02 <HAL_UART_Transmit>
						break;
 8005d48:	e034      	b.n	8005db4 <main+0x1dc>
						if (PullAndDrop()) // PullingExperiment() return true when it finishing
 8005d4a:	f7fe fb4d 	bl	80043e8 <PullAndDrop>
 8005d4e:	4603      	mov	r3, r0
 8005d50:	2b00      	cmp	r3, #0
 8005d52:	d031      	beq.n	8005db8 <main+0x1e0>
							if (!POSReach) // Check if position is reached or not
 8005d54:	4b52      	ldr	r3, [pc, #328]	; (8005ea0 <main+0x2c8>)
 8005d56:	781b      	ldrb	r3, [r3, #0]
 8005d58:	f083 0301 	eor.w	r3, r3, #1
 8005d5c:	b2db      	uxtb	r3, r3
 8005d5e:	2b00      	cmp	r3, #0
 8005d60:	d02a      	beq.n	8005db8 <main+0x1e0>
								if (WaitingMiliSecond(2000)) // Wait for 3 Seconds
 8005d62:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8005d66:	f7fb fe7f 	bl	8001a68 <WaitingMiliSecond>
 8005d6a:	4603      	mov	r3, r0
 8005d6c:	2b00      	cmp	r3, #0
 8005d6e:	d023      	beq.n	8005db8 <main+0x1e0>
									StopExperiment();
 8005d70:	f7fe fbb0 	bl	80044d4 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8005d74:	4b4b      	ldr	r3, [pc, #300]	; (8005ea4 <main+0x2cc>)
 8005d76:	781b      	ldrb	r3, [r3, #0]
 8005d78:	2b00      	cmp	r3, #0
 8005d7a:	d01d      	beq.n	8005db8 <main+0x1e0>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005d7c:	225a      	movs	r2, #90	; 0x5a
 8005d7e:	2100      	movs	r1, #0
 8005d80:	4849      	ldr	r0, [pc, #292]	; (8005ea8 <main+0x2d0>)
 8005d82:	f004 ff97 	bl	800acb4 <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8005d86:	4949      	ldr	r1, [pc, #292]	; (8005eac <main+0x2d4>)
 8005d88:	4847      	ldr	r0, [pc, #284]	; (8005ea8 <main+0x2d0>)
 8005d8a:	f005 fe1b 	bl	800b9c4 <siprintf>
 8005d8e:	4603      	mov	r3, r0
 8005d90:	b2da      	uxtb	r2, r3
 8005d92:	4b47      	ldr	r3, [pc, #284]	; (8005eb0 <main+0x2d8>)
 8005d94:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005d96:	4b46      	ldr	r3, [pc, #280]	; (8005eb0 <main+0x2d8>)
 8005d98:	781b      	ldrb	r3, [r3, #0]
 8005d9a:	b29a      	uxth	r2, r3
 8005d9c:	23c8      	movs	r3, #200	; 0xc8
 8005d9e:	4942      	ldr	r1, [pc, #264]	; (8005ea8 <main+0x2d0>)
 8005da0:	483a      	ldr	r0, [pc, #232]	; (8005e8c <main+0x2b4>)
 8005da2:	f003 ff2e 	bl	8009c02 <HAL_UART_Transmit>
						break;
 8005da6:	e007      	b.n	8005db8 <main+0x1e0>
				}
			}
 8005da8:	bf00      	nop
 8005daa:	e006      	b.n	8005dba <main+0x1e2>
						break;
 8005dac:	bf00      	nop
 8005dae:	e004      	b.n	8005dba <main+0x1e2>
						break;
 8005db0:	bf00      	nop
 8005db2:	e002      	b.n	8005dba <main+0x1e2>
						break;
 8005db4:	bf00      	nop
 8005db6:	e000      	b.n	8005dba <main+0x1e2>
						break;
 8005db8:	bf00      	nop
			// END Running Experiment

			// START SIMULATING EXPERIMENT
			if (StartSimulating) // Process Running Experiment
 8005dba:	4b3e      	ldr	r3, [pc, #248]	; (8005eb4 <main+0x2dc>)
 8005dbc:	781b      	ldrb	r3, [r3, #0]
 8005dbe:	2b00      	cmp	r3, #0
 8005dc0:	f000 830f 	beq.w	80063e2 <main+0x80a>
			{
				switch (ExperimentMode)
 8005dc4:	4b35      	ldr	r3, [pc, #212]	; (8005e9c <main+0x2c4>)
 8005dc6:	781b      	ldrb	r3, [r3, #0]
 8005dc8:	2b03      	cmp	r3, #3
 8005dca:	f000 8205 	beq.w	80061d8 <main+0x600>
 8005dce:	2b03      	cmp	r3, #3
 8005dd0:	f300 8309 	bgt.w	80063e6 <main+0x80e>
 8005dd4:	2b01      	cmp	r3, #1
 8005dd6:	d003      	beq.n	8005de0 <main+0x208>
 8005dd8:	2b02      	cmp	r3, #2
 8005dda:	f000 80d5 	beq.w	8005f88 <main+0x3b0>
							memset(ResponseMess, '\0', sizeof(ResponseMess));

						}
						break;
					default:
						break;
 8005dde:	e302      	b.n	80063e6 <main+0x80e>
						if (SimulateDropping()) // Dropping() return true when it finishing
 8005de0:	f7fd fcd2 	bl	8003788 <SimulateDropping>
 8005de4:	4603      	mov	r3, r0
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	f000 82ff 	beq.w	80063ea <main+0x812>
							Initialized = true;
 8005dec:	4b32      	ldr	r3, [pc, #200]	; (8005eb8 <main+0x2e0>)
 8005dee:	2201      	movs	r2, #1
 8005df0:	701a      	strb	r2, [r3, #0]
							if(MotorDriver) // HIGEN DRIVER, the pulse is multiplied by 8
 8005df2:	4b32      	ldr	r3, [pc, #200]	; (8005ebc <main+0x2e4>)
 8005df4:	781b      	ldrb	r3, [r3, #0]
 8005df6:	2b00      	cmp	r3, #0
 8005df8:	d06c      	beq.n	8005ed4 <main+0x2fc>
								DroppingTotalDistance = 2*3.14*DrumRadius*8*abs(TotalDroppingPulse)/EncoderResolution;
 8005dfa:	4b31      	ldr	r3, [pc, #196]	; (8005ec0 <main+0x2e8>)
 8005dfc:	681b      	ldr	r3, [r3, #0]
 8005dfe:	4618      	mov	r0, r3
 8005e00:	f7fa fba2 	bl	8000548 <__aeabi_f2d>
 8005e04:	a31c      	add	r3, pc, #112	; (adr r3, 8005e78 <main+0x2a0>)
 8005e06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005e0a:	f7fa fbf5 	bl	80005f8 <__aeabi_dmul>
 8005e0e:	4602      	mov	r2, r0
 8005e10:	460b      	mov	r3, r1
 8005e12:	4610      	mov	r0, r2
 8005e14:	4619      	mov	r1, r3
 8005e16:	f04f 0200 	mov.w	r2, #0
 8005e1a:	4b2a      	ldr	r3, [pc, #168]	; (8005ec4 <main+0x2ec>)
 8005e1c:	f7fa fbec 	bl	80005f8 <__aeabi_dmul>
 8005e20:	4602      	mov	r2, r0
 8005e22:	460b      	mov	r3, r1
 8005e24:	4614      	mov	r4, r2
 8005e26:	461d      	mov	r5, r3
 8005e28:	4b27      	ldr	r3, [pc, #156]	; (8005ec8 <main+0x2f0>)
 8005e2a:	681b      	ldr	r3, [r3, #0]
 8005e2c:	2b00      	cmp	r3, #0
 8005e2e:	bfb8      	it	lt
 8005e30:	425b      	neglt	r3, r3
 8005e32:	4618      	mov	r0, r3
 8005e34:	f7fa fb76 	bl	8000524 <__aeabi_i2d>
 8005e38:	4602      	mov	r2, r0
 8005e3a:	460b      	mov	r3, r1
 8005e3c:	4620      	mov	r0, r4
 8005e3e:	4629      	mov	r1, r5
 8005e40:	f7fa fbda 	bl	80005f8 <__aeabi_dmul>
 8005e44:	4602      	mov	r2, r0
 8005e46:	460b      	mov	r3, r1
 8005e48:	4614      	mov	r4, r2
 8005e4a:	461d      	mov	r5, r3
 8005e4c:	4b1f      	ldr	r3, [pc, #124]	; (8005ecc <main+0x2f4>)
 8005e4e:	881b      	ldrh	r3, [r3, #0]
 8005e50:	4618      	mov	r0, r3
 8005e52:	f7fa fb67 	bl	8000524 <__aeabi_i2d>
 8005e56:	4602      	mov	r2, r0
 8005e58:	460b      	mov	r3, r1
 8005e5a:	4620      	mov	r0, r4
 8005e5c:	4629      	mov	r1, r5
 8005e5e:	f7fa fcf5 	bl	800084c <__aeabi_ddiv>
 8005e62:	4602      	mov	r2, r0
 8005e64:	460b      	mov	r3, r1
 8005e66:	4610      	mov	r0, r2
 8005e68:	4619      	mov	r1, r3
 8005e6a:	f7fa febd 	bl	8000be8 <__aeabi_d2f>
 8005e6e:	4603      	mov	r3, r0
 8005e70:	4a17      	ldr	r2, [pc, #92]	; (8005ed0 <main+0x2f8>)
 8005e72:	6013      	str	r3, [r2, #0]
 8005e74:	e062      	b.n	8005f3c <main+0x364>
 8005e76:	bf00      	nop
 8005e78:	51eb851f 	.word	0x51eb851f
 8005e7c:	40191eb8 	.word	0x40191eb8
 8005e80:	40021000 	.word	0x40021000
 8005e84:	20000224 	.word	0x20000224
 8005e88:	200003ac 	.word	0x200003ac
 8005e8c:	200002f8 	.word	0x200002f8
 8005e90:	2000042d 	.word	0x2000042d
 8005e94:	20000431 	.word	0x20000431
 8005e98:	20000432 	.word	0x20000432
 8005e9c:	20000005 	.word	0x20000005
 8005ea0:	20000437 	.word	0x20000437
 8005ea4:	2000043e 	.word	0x2000043e
 8005ea8:	200003b0 	.word	0x200003b0
 8005eac:	0800f868 	.word	0x0800f868
 8005eb0:	20000414 	.word	0x20000414
 8005eb4:	20000433 	.word	0x20000433
 8005eb8:	2000043d 	.word	0x2000043d
 8005ebc:	20000003 	.word	0x20000003
 8005ec0:	20000464 	.word	0x20000464
 8005ec4:	40200000 	.word	0x40200000
 8005ec8:	20000460 	.word	0x20000460
 8005ecc:	2000000a 	.word	0x2000000a
 8005ed0:	2000047c 	.word	0x2000047c
								DroppingTotalDistance = 2*3.14*DrumRadius*abs(TotalDroppingPulse)/EncoderResolution;
 8005ed4:	4bae      	ldr	r3, [pc, #696]	; (8006190 <main+0x5b8>)
 8005ed6:	681b      	ldr	r3, [r3, #0]
 8005ed8:	4618      	mov	r0, r3
 8005eda:	f7fa fb35 	bl	8000548 <__aeabi_f2d>
 8005ede:	a3a8      	add	r3, pc, #672	; (adr r3, 8006180 <main+0x5a8>)
 8005ee0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ee4:	f7fa fb88 	bl	80005f8 <__aeabi_dmul>
 8005ee8:	4602      	mov	r2, r0
 8005eea:	460b      	mov	r3, r1
 8005eec:	4614      	mov	r4, r2
 8005eee:	461d      	mov	r5, r3
 8005ef0:	4ba8      	ldr	r3, [pc, #672]	; (8006194 <main+0x5bc>)
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	2b00      	cmp	r3, #0
 8005ef6:	bfb8      	it	lt
 8005ef8:	425b      	neglt	r3, r3
 8005efa:	4618      	mov	r0, r3
 8005efc:	f7fa fb12 	bl	8000524 <__aeabi_i2d>
 8005f00:	4602      	mov	r2, r0
 8005f02:	460b      	mov	r3, r1
 8005f04:	4620      	mov	r0, r4
 8005f06:	4629      	mov	r1, r5
 8005f08:	f7fa fb76 	bl	80005f8 <__aeabi_dmul>
 8005f0c:	4602      	mov	r2, r0
 8005f0e:	460b      	mov	r3, r1
 8005f10:	4614      	mov	r4, r2
 8005f12:	461d      	mov	r5, r3
 8005f14:	4ba0      	ldr	r3, [pc, #640]	; (8006198 <main+0x5c0>)
 8005f16:	881b      	ldrh	r3, [r3, #0]
 8005f18:	4618      	mov	r0, r3
 8005f1a:	f7fa fb03 	bl	8000524 <__aeabi_i2d>
 8005f1e:	4602      	mov	r2, r0
 8005f20:	460b      	mov	r3, r1
 8005f22:	4620      	mov	r0, r4
 8005f24:	4629      	mov	r1, r5
 8005f26:	f7fa fc91 	bl	800084c <__aeabi_ddiv>
 8005f2a:	4602      	mov	r2, r0
 8005f2c:	460b      	mov	r3, r1
 8005f2e:	4610      	mov	r0, r2
 8005f30:	4619      	mov	r1, r3
 8005f32:	f7fa fe59 	bl	8000be8 <__aeabi_d2f>
 8005f36:	4603      	mov	r3, r0
 8005f38:	4a98      	ldr	r2, [pc, #608]	; (800619c <main+0x5c4>)
 8005f3a:	6013      	str	r3, [r2, #0]
							TxPCLen = sprintf(ResponseMess,"g14/%.1fe",DroppingTotalDistance);
 8005f3c:	4b97      	ldr	r3, [pc, #604]	; (800619c <main+0x5c4>)
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	4618      	mov	r0, r3
 8005f42:	f7fa fb01 	bl	8000548 <__aeabi_f2d>
 8005f46:	4602      	mov	r2, r0
 8005f48:	460b      	mov	r3, r1
 8005f4a:	4995      	ldr	r1, [pc, #596]	; (80061a0 <main+0x5c8>)
 8005f4c:	4895      	ldr	r0, [pc, #596]	; (80061a4 <main+0x5cc>)
 8005f4e:	f005 fd39 	bl	800b9c4 <siprintf>
 8005f52:	4603      	mov	r3, r0
 8005f54:	b2da      	uxtb	r2, r3
 8005f56:	4b94      	ldr	r3, [pc, #592]	; (80061a8 <main+0x5d0>)
 8005f58:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8005f5a:	4b93      	ldr	r3, [pc, #588]	; (80061a8 <main+0x5d0>)
 8005f5c:	781b      	ldrb	r3, [r3, #0]
 8005f5e:	b29a      	uxth	r2, r3
 8005f60:	23c8      	movs	r3, #200	; 0xc8
 8005f62:	4990      	ldr	r1, [pc, #576]	; (80061a4 <main+0x5cc>)
 8005f64:	4891      	ldr	r0, [pc, #580]	; (80061ac <main+0x5d4>)
 8005f66:	f003 fe4c 	bl	8009c02 <HAL_UART_Transmit>
							HAL_Delay(10);
 8005f6a:	200a      	movs	r0, #10
 8005f6c:	f001 fc26 	bl	80077bc <HAL_Delay>
							memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005f70:	220f      	movs	r2, #15
 8005f72:	2100      	movs	r1, #0
 8005f74:	488b      	ldr	r0, [pc, #556]	; (80061a4 <main+0x5cc>)
 8005f76:	f004 fe9d 	bl	800acb4 <memset>
							PulseSimuCount = 0;
 8005f7a:	4b8d      	ldr	r3, [pc, #564]	; (80061b0 <main+0x5d8>)
 8005f7c:	2200      	movs	r2, #0
 8005f7e:	601a      	str	r2, [r3, #0]
							StartSimulating = false;
 8005f80:	4b8c      	ldr	r3, [pc, #560]	; (80061b4 <main+0x5dc>)
 8005f82:	2200      	movs	r2, #0
 8005f84:	701a      	strb	r2, [r3, #0]
						break;
 8005f86:	e230      	b.n	80063ea <main+0x812>
						if (SimulatePulling()) // PullingExperiment() return true when it finishing
 8005f88:	f7fc ff3a 	bl	8002e00 <SimulatePulling>
 8005f8c:	4603      	mov	r3, r0
 8005f8e:	2b00      	cmp	r3, #0
 8005f90:	f000 822d 	beq.w	80063ee <main+0x816>
							Initialized = true;
 8005f94:	4b88      	ldr	r3, [pc, #544]	; (80061b8 <main+0x5e0>)
 8005f96:	2201      	movs	r2, #1
 8005f98:	701a      	strb	r2, [r3, #0]
							StartSimulating = false;
 8005f9a:	4b86      	ldr	r3, [pc, #536]	; (80061b4 <main+0x5dc>)
 8005f9c:	2200      	movs	r2, #0
 8005f9e:	701a      	strb	r2, [r3, #0]
							if(MotorDriver) // HIGEN DRIVER, the pulse is multiplied by 8
 8005fa0:	4b86      	ldr	r3, [pc, #536]	; (80061bc <main+0x5e4>)
 8005fa2:	781b      	ldrb	r3, [r3, #0]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d068      	beq.n	800607a <main+0x4a2>
								PullingTotalDistance = DistCoeff*2*3.14*DrumRadius*8*abs(TotalPullingPulse)/EncoderResolution;
 8005fa8:	4b85      	ldr	r3, [pc, #532]	; (80061c0 <main+0x5e8>)
 8005faa:	edd3 7a00 	vldr	s15, [r3]
 8005fae:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8005fb2:	ee17 0a90 	vmov	r0, s15
 8005fb6:	f7fa fac7 	bl	8000548 <__aeabi_f2d>
 8005fba:	a373      	add	r3, pc, #460	; (adr r3, 8006188 <main+0x5b0>)
 8005fbc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fc0:	f7fa fb1a 	bl	80005f8 <__aeabi_dmul>
 8005fc4:	4602      	mov	r2, r0
 8005fc6:	460b      	mov	r3, r1
 8005fc8:	4614      	mov	r4, r2
 8005fca:	461d      	mov	r5, r3
 8005fcc:	4b70      	ldr	r3, [pc, #448]	; (8006190 <main+0x5b8>)
 8005fce:	681b      	ldr	r3, [r3, #0]
 8005fd0:	4618      	mov	r0, r3
 8005fd2:	f7fa fab9 	bl	8000548 <__aeabi_f2d>
 8005fd6:	4602      	mov	r2, r0
 8005fd8:	460b      	mov	r3, r1
 8005fda:	4620      	mov	r0, r4
 8005fdc:	4629      	mov	r1, r5
 8005fde:	f7fa fb0b 	bl	80005f8 <__aeabi_dmul>
 8005fe2:	4602      	mov	r2, r0
 8005fe4:	460b      	mov	r3, r1
 8005fe6:	4610      	mov	r0, r2
 8005fe8:	4619      	mov	r1, r3
 8005fea:	f04f 0200 	mov.w	r2, #0
 8005fee:	4b75      	ldr	r3, [pc, #468]	; (80061c4 <main+0x5ec>)
 8005ff0:	f7fa fb02 	bl	80005f8 <__aeabi_dmul>
 8005ff4:	4602      	mov	r2, r0
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	4614      	mov	r4, r2
 8005ffa:	461d      	mov	r5, r3
 8005ffc:	4b72      	ldr	r3, [pc, #456]	; (80061c8 <main+0x5f0>)
 8005ffe:	681b      	ldr	r3, [r3, #0]
 8006000:	2b00      	cmp	r3, #0
 8006002:	bfb8      	it	lt
 8006004:	425b      	neglt	r3, r3
 8006006:	4618      	mov	r0, r3
 8006008:	f7fa fa8c 	bl	8000524 <__aeabi_i2d>
 800600c:	4602      	mov	r2, r0
 800600e:	460b      	mov	r3, r1
 8006010:	4620      	mov	r0, r4
 8006012:	4629      	mov	r1, r5
 8006014:	f7fa faf0 	bl	80005f8 <__aeabi_dmul>
 8006018:	4602      	mov	r2, r0
 800601a:	460b      	mov	r3, r1
 800601c:	4614      	mov	r4, r2
 800601e:	461d      	mov	r5, r3
 8006020:	4b5d      	ldr	r3, [pc, #372]	; (8006198 <main+0x5c0>)
 8006022:	881b      	ldrh	r3, [r3, #0]
 8006024:	4618      	mov	r0, r3
 8006026:	f7fa fa7d 	bl	8000524 <__aeabi_i2d>
 800602a:	4602      	mov	r2, r0
 800602c:	460b      	mov	r3, r1
 800602e:	4620      	mov	r0, r4
 8006030:	4629      	mov	r1, r5
 8006032:	f7fa fc0b 	bl	800084c <__aeabi_ddiv>
 8006036:	4602      	mov	r2, r0
 8006038:	460b      	mov	r3, r1
 800603a:	4610      	mov	r0, r2
 800603c:	4619      	mov	r1, r3
 800603e:	f7fa fdd3 	bl	8000be8 <__aeabi_d2f>
 8006042:	4603      	mov	r3, r0
 8006044:	4a61      	ldr	r2, [pc, #388]	; (80061cc <main+0x5f4>)
 8006046:	6013      	str	r3, [r2, #0]
								PullingBotomPulseCmdPosition = DistCoeff*8*abs(TotalPullingPulse);
 8006048:	4b5d      	ldr	r3, [pc, #372]	; (80061c0 <main+0x5e8>)
 800604a:	edd3 7a00 	vldr	s15, [r3]
 800604e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 8006052:	ee27 7a87 	vmul.f32	s14, s15, s14
 8006056:	4b5c      	ldr	r3, [pc, #368]	; (80061c8 <main+0x5f0>)
 8006058:	681b      	ldr	r3, [r3, #0]
 800605a:	2b00      	cmp	r3, #0
 800605c:	bfb8      	it	lt
 800605e:	425b      	neglt	r3, r3
 8006060:	ee07 3a90 	vmov	s15, r3
 8006064:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8006068:	ee67 7a27 	vmul.f32	s15, s14, s15
 800606c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006070:	ee17 2a90 	vmov	r2, s15
 8006074:	4b56      	ldr	r3, [pc, #344]	; (80061d0 <main+0x5f8>)
 8006076:	601a      	str	r2, [r3, #0]
 8006078:	e05a      	b.n	8006130 <main+0x558>
								PullingTotalDistance = DistCoeff*2*3.14*DrumRadius*abs(TotalPullingPulse)/EncoderResolution;
 800607a:	4b51      	ldr	r3, [pc, #324]	; (80061c0 <main+0x5e8>)
 800607c:	edd3 7a00 	vldr	s15, [r3]
 8006080:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006084:	ee17 0a90 	vmov	r0, s15
 8006088:	f7fa fa5e 	bl	8000548 <__aeabi_f2d>
 800608c:	a33e      	add	r3, pc, #248	; (adr r3, 8006188 <main+0x5b0>)
 800608e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006092:	f7fa fab1 	bl	80005f8 <__aeabi_dmul>
 8006096:	4602      	mov	r2, r0
 8006098:	460b      	mov	r3, r1
 800609a:	4614      	mov	r4, r2
 800609c:	461d      	mov	r5, r3
 800609e:	4b3c      	ldr	r3, [pc, #240]	; (8006190 <main+0x5b8>)
 80060a0:	681b      	ldr	r3, [r3, #0]
 80060a2:	4618      	mov	r0, r3
 80060a4:	f7fa fa50 	bl	8000548 <__aeabi_f2d>
 80060a8:	4602      	mov	r2, r0
 80060aa:	460b      	mov	r3, r1
 80060ac:	4620      	mov	r0, r4
 80060ae:	4629      	mov	r1, r5
 80060b0:	f7fa faa2 	bl	80005f8 <__aeabi_dmul>
 80060b4:	4602      	mov	r2, r0
 80060b6:	460b      	mov	r3, r1
 80060b8:	4614      	mov	r4, r2
 80060ba:	461d      	mov	r5, r3
 80060bc:	4b42      	ldr	r3, [pc, #264]	; (80061c8 <main+0x5f0>)
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	2b00      	cmp	r3, #0
 80060c2:	bfb8      	it	lt
 80060c4:	425b      	neglt	r3, r3
 80060c6:	4618      	mov	r0, r3
 80060c8:	f7fa fa2c 	bl	8000524 <__aeabi_i2d>
 80060cc:	4602      	mov	r2, r0
 80060ce:	460b      	mov	r3, r1
 80060d0:	4620      	mov	r0, r4
 80060d2:	4629      	mov	r1, r5
 80060d4:	f7fa fa90 	bl	80005f8 <__aeabi_dmul>
 80060d8:	4602      	mov	r2, r0
 80060da:	460b      	mov	r3, r1
 80060dc:	4614      	mov	r4, r2
 80060de:	461d      	mov	r5, r3
 80060e0:	4b2d      	ldr	r3, [pc, #180]	; (8006198 <main+0x5c0>)
 80060e2:	881b      	ldrh	r3, [r3, #0]
 80060e4:	4618      	mov	r0, r3
 80060e6:	f7fa fa1d 	bl	8000524 <__aeabi_i2d>
 80060ea:	4602      	mov	r2, r0
 80060ec:	460b      	mov	r3, r1
 80060ee:	4620      	mov	r0, r4
 80060f0:	4629      	mov	r1, r5
 80060f2:	f7fa fbab 	bl	800084c <__aeabi_ddiv>
 80060f6:	4602      	mov	r2, r0
 80060f8:	460b      	mov	r3, r1
 80060fa:	4610      	mov	r0, r2
 80060fc:	4619      	mov	r1, r3
 80060fe:	f7fa fd73 	bl	8000be8 <__aeabi_d2f>
 8006102:	4603      	mov	r3, r0
 8006104:	4a31      	ldr	r2, [pc, #196]	; (80061cc <main+0x5f4>)
 8006106:	6013      	str	r3, [r2, #0]
								PullingBotomPulseCmdPosition = DistCoeff*abs(TotalPullingPulse);
 8006108:	4b2f      	ldr	r3, [pc, #188]	; (80061c8 <main+0x5f0>)
 800610a:	681b      	ldr	r3, [r3, #0]
 800610c:	2b00      	cmp	r3, #0
 800610e:	bfb8      	it	lt
 8006110:	425b      	neglt	r3, r3
 8006112:	ee07 3a90 	vmov	s15, r3
 8006116:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800611a:	4b29      	ldr	r3, [pc, #164]	; (80061c0 <main+0x5e8>)
 800611c:	edd3 7a00 	vldr	s15, [r3]
 8006120:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006124:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006128:	ee17 2a90 	vmov	r2, s15
 800612c:	4b28      	ldr	r3, [pc, #160]	; (80061d0 <main+0x5f8>)
 800612e:	601a      	str	r2, [r3, #0]
							TotalPullingPulse = 0;
 8006130:	4b25      	ldr	r3, [pc, #148]	; (80061c8 <main+0x5f0>)
 8006132:	2200      	movs	r2, #0
 8006134:	601a      	str	r2, [r3, #0]
							PulseSimuCount = 0;
 8006136:	4b1e      	ldr	r3, [pc, #120]	; (80061b0 <main+0x5d8>)
 8006138:	2200      	movs	r2, #0
 800613a:	601a      	str	r2, [r3, #0]
							TxPCLen = sprintf(ResponseMess,"g15/%.1fe",PullingTotalDistance);
 800613c:	4b23      	ldr	r3, [pc, #140]	; (80061cc <main+0x5f4>)
 800613e:	681b      	ldr	r3, [r3, #0]
 8006140:	4618      	mov	r0, r3
 8006142:	f7fa fa01 	bl	8000548 <__aeabi_f2d>
 8006146:	4602      	mov	r2, r0
 8006148:	460b      	mov	r3, r1
 800614a:	4922      	ldr	r1, [pc, #136]	; (80061d4 <main+0x5fc>)
 800614c:	4815      	ldr	r0, [pc, #84]	; (80061a4 <main+0x5cc>)
 800614e:	f005 fc39 	bl	800b9c4 <siprintf>
 8006152:	4603      	mov	r3, r0
 8006154:	b2da      	uxtb	r2, r3
 8006156:	4b14      	ldr	r3, [pc, #80]	; (80061a8 <main+0x5d0>)
 8006158:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800615a:	4b13      	ldr	r3, [pc, #76]	; (80061a8 <main+0x5d0>)
 800615c:	781b      	ldrb	r3, [r3, #0]
 800615e:	b29a      	uxth	r2, r3
 8006160:	23c8      	movs	r3, #200	; 0xc8
 8006162:	4910      	ldr	r1, [pc, #64]	; (80061a4 <main+0x5cc>)
 8006164:	4811      	ldr	r0, [pc, #68]	; (80061ac <main+0x5d4>)
 8006166:	f003 fd4c 	bl	8009c02 <HAL_UART_Transmit>
							HAL_Delay(10);
 800616a:	200a      	movs	r0, #10
 800616c:	f001 fb26 	bl	80077bc <HAL_Delay>
							memset(ResponseMess, '\0', sizeof(ResponseMess));
 8006170:	220f      	movs	r2, #15
 8006172:	2100      	movs	r1, #0
 8006174:	480b      	ldr	r0, [pc, #44]	; (80061a4 <main+0x5cc>)
 8006176:	f004 fd9d 	bl	800acb4 <memset>
						break;
 800617a:	e138      	b.n	80063ee <main+0x816>
 800617c:	f3af 8000 	nop.w
 8006180:	51eb851f 	.word	0x51eb851f
 8006184:	40191eb8 	.word	0x40191eb8
 8006188:	51eb851f 	.word	0x51eb851f
 800618c:	40091eb8 	.word	0x40091eb8
 8006190:	20000464 	.word	0x20000464
 8006194:	20000460 	.word	0x20000460
 8006198:	2000000a 	.word	0x2000000a
 800619c:	2000047c 	.word	0x2000047c
 80061a0:	0800f86c 	.word	0x0800f86c
 80061a4:	2000041c 	.word	0x2000041c
 80061a8:	20000414 	.word	0x20000414
 80061ac:	200002f8 	.word	0x200002f8
 80061b0:	200004b4 	.word	0x200004b4
 80061b4:	20000433 	.word	0x20000433
 80061b8:	2000043d 	.word	0x2000043d
 80061bc:	20000003 	.word	0x20000003
 80061c0:	2000053c 	.word	0x2000053c
 80061c4:	40200000 	.word	0x40200000
 80061c8:	2000045c 	.word	0x2000045c
 80061cc:	200004a4 	.word	0x200004a4
 80061d0:	200004a8 	.word	0x200004a8
 80061d4:	0800f878 	.word	0x0800f878
						if (SimulatePullAndDrop()) // finish initializing the Pull and Drop Exp
 80061d8:	f7fd fde4 	bl	8003da4 <SimulatePullAndDrop>
 80061dc:	4603      	mov	r3, r0
 80061de:	2b00      	cmp	r3, #0
 80061e0:	f000 8107 	beq.w	80063f2 <main+0x81a>
							Initialized = true;
 80061e4:	4ba6      	ldr	r3, [pc, #664]	; (8006480 <main+0x8a8>)
 80061e6:	2201      	movs	r2, #1
 80061e8:	701a      	strb	r2, [r3, #0]
							StartSimulating = false;
 80061ea:	4ba6      	ldr	r3, [pc, #664]	; (8006484 <main+0x8ac>)
 80061ec:	2200      	movs	r2, #0
 80061ee:	701a      	strb	r2, [r3, #0]
							if(MotorDriver) // HIGEN DRIVER, the pulse is multiplied by 8
 80061f0:	4ba5      	ldr	r3, [pc, #660]	; (8006488 <main+0x8b0>)
 80061f2:	781b      	ldrb	r3, [r3, #0]
 80061f4:	2b00      	cmp	r3, #0
 80061f6:	d068      	beq.n	80062ca <main+0x6f2>
								PullingTotalDistance = DistCoeff*2*3.14*DrumRadius*8*abs(TotalPullingPulse)/EncoderResolution;
 80061f8:	4ba4      	ldr	r3, [pc, #656]	; (800648c <main+0x8b4>)
 80061fa:	edd3 7a00 	vldr	s15, [r3]
 80061fe:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8006202:	ee17 0a90 	vmov	r0, s15
 8006206:	f7fa f99f 	bl	8000548 <__aeabi_f2d>
 800620a:	a39b      	add	r3, pc, #620	; (adr r3, 8006478 <main+0x8a0>)
 800620c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006210:	f7fa f9f2 	bl	80005f8 <__aeabi_dmul>
 8006214:	4602      	mov	r2, r0
 8006216:	460b      	mov	r3, r1
 8006218:	4614      	mov	r4, r2
 800621a:	461d      	mov	r5, r3
 800621c:	4b9c      	ldr	r3, [pc, #624]	; (8006490 <main+0x8b8>)
 800621e:	681b      	ldr	r3, [r3, #0]
 8006220:	4618      	mov	r0, r3
 8006222:	f7fa f991 	bl	8000548 <__aeabi_f2d>
 8006226:	4602      	mov	r2, r0
 8006228:	460b      	mov	r3, r1
 800622a:	4620      	mov	r0, r4
 800622c:	4629      	mov	r1, r5
 800622e:	f7fa f9e3 	bl	80005f8 <__aeabi_dmul>
 8006232:	4602      	mov	r2, r0
 8006234:	460b      	mov	r3, r1
 8006236:	4610      	mov	r0, r2
 8006238:	4619      	mov	r1, r3
 800623a:	f04f 0200 	mov.w	r2, #0
 800623e:	4b95      	ldr	r3, [pc, #596]	; (8006494 <main+0x8bc>)
 8006240:	f7fa f9da 	bl	80005f8 <__aeabi_dmul>
 8006244:	4602      	mov	r2, r0
 8006246:	460b      	mov	r3, r1
 8006248:	4614      	mov	r4, r2
 800624a:	461d      	mov	r5, r3
 800624c:	4b92      	ldr	r3, [pc, #584]	; (8006498 <main+0x8c0>)
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	2b00      	cmp	r3, #0
 8006252:	bfb8      	it	lt
 8006254:	425b      	neglt	r3, r3
 8006256:	4618      	mov	r0, r3
 8006258:	f7fa f964 	bl	8000524 <__aeabi_i2d>
 800625c:	4602      	mov	r2, r0
 800625e:	460b      	mov	r3, r1
 8006260:	4620      	mov	r0, r4
 8006262:	4629      	mov	r1, r5
 8006264:	f7fa f9c8 	bl	80005f8 <__aeabi_dmul>
 8006268:	4602      	mov	r2, r0
 800626a:	460b      	mov	r3, r1
 800626c:	4614      	mov	r4, r2
 800626e:	461d      	mov	r5, r3
 8006270:	4b8a      	ldr	r3, [pc, #552]	; (800649c <main+0x8c4>)
 8006272:	881b      	ldrh	r3, [r3, #0]
 8006274:	4618      	mov	r0, r3
 8006276:	f7fa f955 	bl	8000524 <__aeabi_i2d>
 800627a:	4602      	mov	r2, r0
 800627c:	460b      	mov	r3, r1
 800627e:	4620      	mov	r0, r4
 8006280:	4629      	mov	r1, r5
 8006282:	f7fa fae3 	bl	800084c <__aeabi_ddiv>
 8006286:	4602      	mov	r2, r0
 8006288:	460b      	mov	r3, r1
 800628a:	4610      	mov	r0, r2
 800628c:	4619      	mov	r1, r3
 800628e:	f7fa fcab 	bl	8000be8 <__aeabi_d2f>
 8006292:	4603      	mov	r3, r0
 8006294:	4a82      	ldr	r2, [pc, #520]	; (80064a0 <main+0x8c8>)
 8006296:	6013      	str	r3, [r2, #0]
								PullingBotomPulseCmdPosition = DistCoeff*8*abs(TotalPullingPulse);
 8006298:	4b7c      	ldr	r3, [pc, #496]	; (800648c <main+0x8b4>)
 800629a:	edd3 7a00 	vldr	s15, [r3]
 800629e:	eeb2 7a00 	vmov.f32	s14, #32	; 0x41000000  8.0
 80062a2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80062a6:	4b7c      	ldr	r3, [pc, #496]	; (8006498 <main+0x8c0>)
 80062a8:	681b      	ldr	r3, [r3, #0]
 80062aa:	2b00      	cmp	r3, #0
 80062ac:	bfb8      	it	lt
 80062ae:	425b      	neglt	r3, r3
 80062b0:	ee07 3a90 	vmov	s15, r3
 80062b4:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80062b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80062bc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80062c0:	ee17 2a90 	vmov	r2, s15
 80062c4:	4b77      	ldr	r3, [pc, #476]	; (80064a4 <main+0x8cc>)
 80062c6:	601a      	str	r2, [r3, #0]
 80062c8:	e05a      	b.n	8006380 <main+0x7a8>
								PullingTotalDistance = DistCoeff*2*3.14*DrumRadius*abs(TotalPullingPulse)/EncoderResolution;
 80062ca:	4b70      	ldr	r3, [pc, #448]	; (800648c <main+0x8b4>)
 80062cc:	edd3 7a00 	vldr	s15, [r3]
 80062d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80062d4:	ee17 0a90 	vmov	r0, s15
 80062d8:	f7fa f936 	bl	8000548 <__aeabi_f2d>
 80062dc:	a366      	add	r3, pc, #408	; (adr r3, 8006478 <main+0x8a0>)
 80062de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80062e2:	f7fa f989 	bl	80005f8 <__aeabi_dmul>
 80062e6:	4602      	mov	r2, r0
 80062e8:	460b      	mov	r3, r1
 80062ea:	4614      	mov	r4, r2
 80062ec:	461d      	mov	r5, r3
 80062ee:	4b68      	ldr	r3, [pc, #416]	; (8006490 <main+0x8b8>)
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	4618      	mov	r0, r3
 80062f4:	f7fa f928 	bl	8000548 <__aeabi_f2d>
 80062f8:	4602      	mov	r2, r0
 80062fa:	460b      	mov	r3, r1
 80062fc:	4620      	mov	r0, r4
 80062fe:	4629      	mov	r1, r5
 8006300:	f7fa f97a 	bl	80005f8 <__aeabi_dmul>
 8006304:	4602      	mov	r2, r0
 8006306:	460b      	mov	r3, r1
 8006308:	4614      	mov	r4, r2
 800630a:	461d      	mov	r5, r3
 800630c:	4b62      	ldr	r3, [pc, #392]	; (8006498 <main+0x8c0>)
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	2b00      	cmp	r3, #0
 8006312:	bfb8      	it	lt
 8006314:	425b      	neglt	r3, r3
 8006316:	4618      	mov	r0, r3
 8006318:	f7fa f904 	bl	8000524 <__aeabi_i2d>
 800631c:	4602      	mov	r2, r0
 800631e:	460b      	mov	r3, r1
 8006320:	4620      	mov	r0, r4
 8006322:	4629      	mov	r1, r5
 8006324:	f7fa f968 	bl	80005f8 <__aeabi_dmul>
 8006328:	4602      	mov	r2, r0
 800632a:	460b      	mov	r3, r1
 800632c:	4614      	mov	r4, r2
 800632e:	461d      	mov	r5, r3
 8006330:	4b5a      	ldr	r3, [pc, #360]	; (800649c <main+0x8c4>)
 8006332:	881b      	ldrh	r3, [r3, #0]
 8006334:	4618      	mov	r0, r3
 8006336:	f7fa f8f5 	bl	8000524 <__aeabi_i2d>
 800633a:	4602      	mov	r2, r0
 800633c:	460b      	mov	r3, r1
 800633e:	4620      	mov	r0, r4
 8006340:	4629      	mov	r1, r5
 8006342:	f7fa fa83 	bl	800084c <__aeabi_ddiv>
 8006346:	4602      	mov	r2, r0
 8006348:	460b      	mov	r3, r1
 800634a:	4610      	mov	r0, r2
 800634c:	4619      	mov	r1, r3
 800634e:	f7fa fc4b 	bl	8000be8 <__aeabi_d2f>
 8006352:	4603      	mov	r3, r0
 8006354:	4a52      	ldr	r2, [pc, #328]	; (80064a0 <main+0x8c8>)
 8006356:	6013      	str	r3, [r2, #0]
								PullingBotomPulseCmdPosition = DistCoeff*abs(TotalPullingPulse);
 8006358:	4b4f      	ldr	r3, [pc, #316]	; (8006498 <main+0x8c0>)
 800635a:	681b      	ldr	r3, [r3, #0]
 800635c:	2b00      	cmp	r3, #0
 800635e:	bfb8      	it	lt
 8006360:	425b      	neglt	r3, r3
 8006362:	ee07 3a90 	vmov	s15, r3
 8006366:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800636a:	4b48      	ldr	r3, [pc, #288]	; (800648c <main+0x8b4>)
 800636c:	edd3 7a00 	vldr	s15, [r3]
 8006370:	ee67 7a27 	vmul.f32	s15, s14, s15
 8006374:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8006378:	ee17 2a90 	vmov	r2, s15
 800637c:	4b49      	ldr	r3, [pc, #292]	; (80064a4 <main+0x8cc>)
 800637e:	601a      	str	r2, [r3, #0]
							TotalPullingPulse = 0;
 8006380:	4b45      	ldr	r3, [pc, #276]	; (8006498 <main+0x8c0>)
 8006382:	2200      	movs	r2, #0
 8006384:	601a      	str	r2, [r3, #0]
							PulseSimuCount = 0;
 8006386:	4b48      	ldr	r3, [pc, #288]	; (80064a8 <main+0x8d0>)
 8006388:	2200      	movs	r2, #0
 800638a:	601a      	str	r2, [r3, #0]
							TxPCLen = sprintf(ResponseMess,"g16/%.1f/%.1fe",PullingTotalDistance, DroppingTotalDistance);
 800638c:	4b44      	ldr	r3, [pc, #272]	; (80064a0 <main+0x8c8>)
 800638e:	681b      	ldr	r3, [r3, #0]
 8006390:	4618      	mov	r0, r3
 8006392:	f7fa f8d9 	bl	8000548 <__aeabi_f2d>
 8006396:	4604      	mov	r4, r0
 8006398:	460d      	mov	r5, r1
 800639a:	4b44      	ldr	r3, [pc, #272]	; (80064ac <main+0x8d4>)
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	4618      	mov	r0, r3
 80063a0:	f7fa f8d2 	bl	8000548 <__aeabi_f2d>
 80063a4:	4602      	mov	r2, r0
 80063a6:	460b      	mov	r3, r1
 80063a8:	e9cd 2300 	strd	r2, r3, [sp]
 80063ac:	4622      	mov	r2, r4
 80063ae:	462b      	mov	r3, r5
 80063b0:	493f      	ldr	r1, [pc, #252]	; (80064b0 <main+0x8d8>)
 80063b2:	4840      	ldr	r0, [pc, #256]	; (80064b4 <main+0x8dc>)
 80063b4:	f005 fb06 	bl	800b9c4 <siprintf>
 80063b8:	4603      	mov	r3, r0
 80063ba:	b2da      	uxtb	r2, r3
 80063bc:	4b3e      	ldr	r3, [pc, #248]	; (80064b8 <main+0x8e0>)
 80063be:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80063c0:	4b3d      	ldr	r3, [pc, #244]	; (80064b8 <main+0x8e0>)
 80063c2:	781b      	ldrb	r3, [r3, #0]
 80063c4:	b29a      	uxth	r2, r3
 80063c6:	23c8      	movs	r3, #200	; 0xc8
 80063c8:	493a      	ldr	r1, [pc, #232]	; (80064b4 <main+0x8dc>)
 80063ca:	483c      	ldr	r0, [pc, #240]	; (80064bc <main+0x8e4>)
 80063cc:	f003 fc19 	bl	8009c02 <HAL_UART_Transmit>
							HAL_Delay(10);
 80063d0:	200a      	movs	r0, #10
 80063d2:	f001 f9f3 	bl	80077bc <HAL_Delay>
							memset(ResponseMess, '\0', sizeof(ResponseMess));
 80063d6:	220f      	movs	r2, #15
 80063d8:	2100      	movs	r1, #0
 80063da:	4836      	ldr	r0, [pc, #216]	; (80064b4 <main+0x8dc>)
 80063dc:	f004 fc6a 	bl	800acb4 <memset>
						break;
 80063e0:	e007      	b.n	80063f2 <main+0x81a>
				}
			}
 80063e2:	bf00      	nop
 80063e4:	e006      	b.n	80063f4 <main+0x81c>
						break;
 80063e6:	bf00      	nop
 80063e8:	e004      	b.n	80063f4 <main+0x81c>
						break;
 80063ea:	bf00      	nop
 80063ec:	e002      	b.n	80063f4 <main+0x81c>
						break;
 80063ee:	bf00      	nop
 80063f0:	e000      	b.n	80063f4 <main+0x81c>
						break;
 80063f2:	bf00      	nop
		}

		// END Timer2ControlInterrupt

		// BEGIN Timer2 interrupt for sending the data
		if (Timer2SampleTimeInterrupt)
 80063f4:	4b32      	ldr	r3, [pc, #200]	; (80064c0 <main+0x8e8>)
 80063f6:	781b      	ldrb	r3, [r3, #0]
 80063f8:	b2db      	uxtb	r3, r3
 80063fa:	2b00      	cmp	r3, #0
 80063fc:	f000 8202 	beq.w	8006804 <main+0xc2c>
		{
			Timer2SampleTimeInterrupt = false;
 8006400:	4b2f      	ldr	r3, [pc, #188]	; (80064c0 <main+0x8e8>)
 8006402:	2200      	movs	r2, #0
 8006404:	701a      	strb	r2, [r3, #0]

			if (StartRunning)
 8006406:	4b2f      	ldr	r3, [pc, #188]	; (80064c4 <main+0x8ec>)
 8006408:	781b      	ldrb	r3, [r3, #0]
 800640a:	2b00      	cmp	r3, #0
 800640c:	d00d      	beq.n	800642a <main+0x852>
			{
				// Read CN1-22-RDY, Check if Servo Ready or not, or Servo ON of OFF.
				// If servo is not ready or not ON, then turn off all the functions
				//if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin) || HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin))
				if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin))
 800640e:	2104      	movs	r1, #4
 8006410:	482d      	ldr	r0, [pc, #180]	; (80064c8 <main+0x8f0>)
 8006412:	f002 f835 	bl	8008480 <HAL_GPIO_ReadPin>
 8006416:	4603      	mov	r3, r0
 8006418:	2b00      	cmp	r3, #0
 800641a:	d006      	beq.n	800642a <main+0x852>
				{
				// If the servo is not ON. Then stop all the running function
					StopPulseGenerating();
 800641c:	f7fb fae6 	bl	80019ec <StopPulseGenerating>
					StopExperiment();
 8006420:	f7fe f858 	bl	80044d4 <StopExperiment>
					IsHoming = false; // Disable Homming
 8006424:	4b29      	ldr	r3, [pc, #164]	; (80064cc <main+0x8f4>)
 8006426:	2200      	movs	r2, #0
 8006428:	701a      	strb	r2, [r3, #0]
				}
			}

			// BEGIN Software Limit ASDA Driver
			if (!MotorDriver) // Applied for ASDA-A3 Diver since the encoder pulse only can be cleared when cycle the driver
 800642a:	4b17      	ldr	r3, [pc, #92]	; (8006488 <main+0x8b0>)
 800642c:	781b      	ldrb	r3, [r3, #0]
 800642e:	f083 0301 	eor.w	r3, r3, #1
 8006432:	b2db      	uxtb	r3, r3
 8006434:	2b00      	cmp	r3, #0
 8006436:	d051      	beq.n	80064dc <main+0x904>
			{
				if (StartRunning) // Always turn on the software limit while running
 8006438:	4b22      	ldr	r3, [pc, #136]	; (80064c4 <main+0x8ec>)
 800643a:	781b      	ldrb	r3, [r3, #0]
 800643c:	2b00      	cmp	r3, #0
 800643e:	d00b      	beq.n	8006458 <main+0x880>
				{
					if (MotorEncPulse-OriginPulse <= -200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8006440:	4b23      	ldr	r3, [pc, #140]	; (80064d0 <main+0x8f8>)
 8006442:	681a      	ldr	r2, [r3, #0]
 8006444:	4b23      	ldr	r3, [pc, #140]	; (80064d4 <main+0x8fc>)
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	1ad3      	subs	r3, r2, r3
 800644a:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 800644e:	da03      	bge.n	8006458 <main+0x880>
					{
						StopPulseGenerating();
 8006450:	f7fb facc 	bl	80019ec <StopPulseGenerating>
						StopExperiment();
 8006454:	f7fe f83e 	bl	80044d4 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 8006458:	4b1f      	ldr	r3, [pc, #124]	; (80064d8 <main+0x900>)
 800645a:	781b      	ldrb	r3, [r3, #0]
 800645c:	2b00      	cmp	r3, #0
 800645e:	d05c      	beq.n	800651a <main+0x942>
				{
					if (MotorEncPulse-OriginPulse <= 0) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8006460:	4b1b      	ldr	r3, [pc, #108]	; (80064d0 <main+0x8f8>)
 8006462:	681a      	ldr	r2, [r3, #0]
 8006464:	4b1b      	ldr	r3, [pc, #108]	; (80064d4 <main+0x8fc>)
 8006466:	681b      	ldr	r3, [r3, #0]
 8006468:	1ad3      	subs	r3, r2, r3
 800646a:	2b00      	cmp	r3, #0
 800646c:	dc55      	bgt.n	800651a <main+0x942>
					{
						StopPulseGenerating();
 800646e:	f7fb fabd 	bl	80019ec <StopPulseGenerating>
						StopExperiment();
 8006472:	f7fe f82f 	bl	80044d4 <StopExperiment>
 8006476:	e050      	b.n	800651a <main+0x942>
 8006478:	51eb851f 	.word	0x51eb851f
 800647c:	40091eb8 	.word	0x40091eb8
 8006480:	2000043d 	.word	0x2000043d
 8006484:	20000433 	.word	0x20000433
 8006488:	20000003 	.word	0x20000003
 800648c:	2000053c 	.word	0x2000053c
 8006490:	20000464 	.word	0x20000464
 8006494:	40200000 	.word	0x40200000
 8006498:	2000045c 	.word	0x2000045c
 800649c:	2000000a 	.word	0x2000000a
 80064a0:	200004a4 	.word	0x200004a4
 80064a4:	200004a8 	.word	0x200004a8
 80064a8:	200004b4 	.word	0x200004b4
 80064ac:	2000047c 	.word	0x2000047c
 80064b0:	0800f884 	.word	0x0800f884
 80064b4:	2000041c 	.word	0x2000041c
 80064b8:	20000414 	.word	0x20000414
 80064bc:	200002f8 	.word	0x200002f8
 80064c0:	20000430 	.word	0x20000430
 80064c4:	20000432 	.word	0x20000432
 80064c8:	40021000 	.word	0x40021000
 80064cc:	2000043c 	.word	0x2000043c
 80064d0:	20000510 	.word	0x20000510
 80064d4:	200004ac 	.word	0x200004ac
 80064d8:	20000004 	.word	0x20000004
					}
				}
			}
			else // HIGEN FDA Driver, Software Limit Switch
			{
				if (StartRunning)// Always turn on the software limit while running
 80064dc:	4b62      	ldr	r3, [pc, #392]	; (8006668 <main+0xa90>)
 80064de:	781b      	ldrb	r3, [r3, #0]
 80064e0:	2b00      	cmp	r3, #0
 80064e2:	d00a      	beq.n	80064fa <main+0x922>
				{
					if (MotorEncPulse-OriginPulse <= 0) // Software Limit Switch based on actual motor position, 500/2048 pulses
 80064e4:	4b61      	ldr	r3, [pc, #388]	; (800666c <main+0xa94>)
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	4b61      	ldr	r3, [pc, #388]	; (8006670 <main+0xa98>)
 80064ea:	681b      	ldr	r3, [r3, #0]
 80064ec:	1ad3      	subs	r3, r2, r3
 80064ee:	2b00      	cmp	r3, #0
 80064f0:	dc03      	bgt.n	80064fa <main+0x922>
					{
						StopPulseGenerating();
 80064f2:	f7fb fa7b 	bl	80019ec <StopPulseGenerating>
						StopExperiment();
 80064f6:	f7fd ffed 	bl	80044d4 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 80064fa:	4b5e      	ldr	r3, [pc, #376]	; (8006674 <main+0xa9c>)
 80064fc:	781b      	ldrb	r3, [r3, #0]
 80064fe:	2b00      	cmp	r3, #0
 8006500:	d00b      	beq.n	800651a <main+0x942>
				{
					if (MotorEncPulse-OriginPulse <= 500) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8006502:	4b5a      	ldr	r3, [pc, #360]	; (800666c <main+0xa94>)
 8006504:	681a      	ldr	r2, [r3, #0]
 8006506:	4b5a      	ldr	r3, [pc, #360]	; (8006670 <main+0xa98>)
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	1ad3      	subs	r3, r2, r3
 800650c:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8006510:	dc03      	bgt.n	800651a <main+0x942>
					{
						StopPulseGenerating();
 8006512:	f7fb fa6b 	bl	80019ec <StopPulseGenerating>
						StopExperiment();
 8006516:	f7fd ffdd 	bl	80044d4 <StopExperiment>
					}
				}
			}
			// END Software Limit ASDA Driver
			//BEGIN Homing
			if (IsHoming)
 800651a:	4b57      	ldr	r3, [pc, #348]	; (8006678 <main+0xaa0>)
 800651c:	781b      	ldrb	r3, [r3, #0]
 800651e:	2b00      	cmp	r3, #0
 8006520:	d015      	beq.n	800654e <main+0x976>
			{
				if(CheckGoingToRefPosition(false, 100)) // false = go up, 0 = home position, 100 pulses
 8006522:	2164      	movs	r1, #100	; 0x64
 8006524:	2000      	movs	r0, #0
 8006526:	f7fb fb53 	bl	8001bd0 <CheckGoingToRefPosition>
 800652a:	4603      	mov	r3, r0
 800652c:	2b00      	cmp	r3, #0
 800652e:	d002      	beq.n	8006536 <main+0x95e>
				{
					IsHoming = false; // finish homing
 8006530:	4b51      	ldr	r3, [pc, #324]	; (8006678 <main+0xaa0>)
 8006532:	2200      	movs	r2, #0
 8006534:	701a      	strb	r2, [r3, #0]
				}

				if (MotorEncPulse-OriginPulse <= 0) // Software Limit
 8006536:	4b4d      	ldr	r3, [pc, #308]	; (800666c <main+0xa94>)
 8006538:	681a      	ldr	r2, [r3, #0]
 800653a:	4b4d      	ldr	r3, [pc, #308]	; (8006670 <main+0xa98>)
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	1ad3      	subs	r3, r2, r3
 8006540:	2b00      	cmp	r3, #0
 8006542:	dc04      	bgt.n	800654e <main+0x976>
				{
					StopPulseGenerating();
 8006544:	f7fb fa52 	bl	80019ec <StopPulseGenerating>
					IsHoming = false;
 8006548:	4b4b      	ldr	r3, [pc, #300]	; (8006678 <main+0xaa0>)
 800654a:	2200      	movs	r2, #0
 800654c:	701a      	strb	r2, [r3, #0]
				}
			}
			//END Homing

			// BEGIN Send data to the UI
			if (UIDataRequest)
 800654e:	4b4b      	ldr	r3, [pc, #300]	; (800667c <main+0xaa4>)
 8006550:	781b      	ldrb	r3, [r3, #0]
 8006552:	2b00      	cmp	r3, #0
 8006554:	f000 8127 	beq.w	80067a6 <main+0xbce>
			{
				if (MotorDriver) // FDA7000 Driver
 8006558:	4b49      	ldr	r3, [pc, #292]	; (8006680 <main+0xaa8>)
 800655a:	781b      	ldrb	r3, [r3, #0]
 800655c:	2b00      	cmp	r3, #0
 800655e:	f000 80ab 	beq.w	80066b8 <main+0xae0>
				{
					PositionCmd = 2*3.14*DrumRadius*8*PositionPulseCmd/EncoderResolution;
 8006562:	4b48      	ldr	r3, [pc, #288]	; (8006684 <main+0xaac>)
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	4618      	mov	r0, r3
 8006568:	f7f9 ffee 	bl	8000548 <__aeabi_f2d>
 800656c:	a33c      	add	r3, pc, #240	; (adr r3, 8006660 <main+0xa88>)
 800656e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006572:	f7fa f841 	bl	80005f8 <__aeabi_dmul>
 8006576:	4602      	mov	r2, r0
 8006578:	460b      	mov	r3, r1
 800657a:	4610      	mov	r0, r2
 800657c:	4619      	mov	r1, r3
 800657e:	f04f 0200 	mov.w	r2, #0
 8006582:	4b41      	ldr	r3, [pc, #260]	; (8006688 <main+0xab0>)
 8006584:	f7fa f838 	bl	80005f8 <__aeabi_dmul>
 8006588:	4602      	mov	r2, r0
 800658a:	460b      	mov	r3, r1
 800658c:	4614      	mov	r4, r2
 800658e:	461d      	mov	r5, r3
 8006590:	4b3e      	ldr	r3, [pc, #248]	; (800668c <main+0xab4>)
 8006592:	681b      	ldr	r3, [r3, #0]
 8006594:	4618      	mov	r0, r3
 8006596:	f7f9 ffc5 	bl	8000524 <__aeabi_i2d>
 800659a:	4602      	mov	r2, r0
 800659c:	460b      	mov	r3, r1
 800659e:	4620      	mov	r0, r4
 80065a0:	4629      	mov	r1, r5
 80065a2:	f7fa f829 	bl	80005f8 <__aeabi_dmul>
 80065a6:	4602      	mov	r2, r0
 80065a8:	460b      	mov	r3, r1
 80065aa:	4614      	mov	r4, r2
 80065ac:	461d      	mov	r5, r3
 80065ae:	4b38      	ldr	r3, [pc, #224]	; (8006690 <main+0xab8>)
 80065b0:	881b      	ldrh	r3, [r3, #0]
 80065b2:	4618      	mov	r0, r3
 80065b4:	f7f9 ffb6 	bl	8000524 <__aeabi_i2d>
 80065b8:	4602      	mov	r2, r0
 80065ba:	460b      	mov	r3, r1
 80065bc:	4620      	mov	r0, r4
 80065be:	4629      	mov	r1, r5
 80065c0:	f7fa f944 	bl	800084c <__aeabi_ddiv>
 80065c4:	4602      	mov	r2, r0
 80065c6:	460b      	mov	r3, r1
 80065c8:	4610      	mov	r0, r2
 80065ca:	4619      	mov	r1, r3
 80065cc:	f7fa fb0c 	bl	8000be8 <__aeabi_d2f>
 80065d0:	4603      	mov	r3, r0
 80065d2:	4a30      	ldr	r2, [pc, #192]	; (8006694 <main+0xabc>)
 80065d4:	6013      	str	r3, [r2, #0]
					TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,PositionCmd,AccRef);
 80065d6:	4b30      	ldr	r3, [pc, #192]	; (8006698 <main+0xac0>)
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	4618      	mov	r0, r3
 80065dc:	f7f9 ffb4 	bl	8000548 <__aeabi_f2d>
 80065e0:	e9c7 0100 	strd	r0, r1, [r7]
 80065e4:	4b2d      	ldr	r3, [pc, #180]	; (800669c <main+0xac4>)
 80065e6:	681b      	ldr	r3, [r3, #0]
 80065e8:	4618      	mov	r0, r3
 80065ea:	f7f9 ffad 	bl	8000548 <__aeabi_f2d>
 80065ee:	4604      	mov	r4, r0
 80065f0:	460d      	mov	r5, r1
 80065f2:	4b2b      	ldr	r3, [pc, #172]	; (80066a0 <main+0xac8>)
 80065f4:	681b      	ldr	r3, [r3, #0]
 80065f6:	4618      	mov	r0, r3
 80065f8:	f7f9 ffa6 	bl	8000548 <__aeabi_f2d>
 80065fc:	4680      	mov	r8, r0
 80065fe:	4689      	mov	r9, r1
 8006600:	4b24      	ldr	r3, [pc, #144]	; (8006694 <main+0xabc>)
 8006602:	681b      	ldr	r3, [r3, #0]
 8006604:	4618      	mov	r0, r3
 8006606:	f7f9 ff9f 	bl	8000548 <__aeabi_f2d>
 800660a:	4682      	mov	sl, r0
 800660c:	468b      	mov	fp, r1
 800660e:	4b25      	ldr	r3, [pc, #148]	; (80066a4 <main+0xacc>)
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	4618      	mov	r0, r3
 8006614:	f7f9 ff98 	bl	8000548 <__aeabi_f2d>
 8006618:	4602      	mov	r2, r0
 800661a:	460b      	mov	r3, r1
 800661c:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006620:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006624:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8006628:	e9cd 4500 	strd	r4, r5, [sp]
 800662c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006630:	491d      	ldr	r1, [pc, #116]	; (80066a8 <main+0xad0>)
 8006632:	481e      	ldr	r0, [pc, #120]	; (80066ac <main+0xad4>)
 8006634:	f005 f9c6 	bl	800b9c4 <siprintf>
 8006638:	4603      	mov	r3, r0
 800663a:	b2da      	uxtb	r2, r3
 800663c:	4b1c      	ldr	r3, [pc, #112]	; (80066b0 <main+0xad8>)
 800663e:	701a      	strb	r2, [r3, #0]
					//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef,PositionCmd);
					HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8006640:	4b1b      	ldr	r3, [pc, #108]	; (80066b0 <main+0xad8>)
 8006642:	781b      	ldrb	r3, [r3, #0]
 8006644:	b29a      	uxth	r2, r3
 8006646:	23c8      	movs	r3, #200	; 0xc8
 8006648:	4918      	ldr	r1, [pc, #96]	; (80066ac <main+0xad4>)
 800664a:	481a      	ldr	r0, [pc, #104]	; (80066b4 <main+0xadc>)
 800664c:	f003 fad9 	bl	8009c02 <HAL_UART_Transmit>
					ReadMultiRegister(StE03,6); // Read from StE03 -> StE08
 8006650:	2106      	movs	r1, #6
 8006652:	200c      	movs	r0, #12
 8006654:	f7fa ffa8 	bl	80015a8 <ReadMultiRegister>
 8006658:	e0a0      	b.n	800679c <main+0xbc4>
 800665a:	bf00      	nop
 800665c:	f3af 8000 	nop.w
 8006660:	51eb851f 	.word	0x51eb851f
 8006664:	40191eb8 	.word	0x40191eb8
 8006668:	20000432 	.word	0x20000432
 800666c:	20000510 	.word	0x20000510
 8006670:	200004ac 	.word	0x200004ac
 8006674:	20000004 	.word	0x20000004
 8006678:	2000043c 	.word	0x2000043c
 800667c:	20000435 	.word	0x20000435
 8006680:	20000003 	.word	0x20000003
 8006684:	20000464 	.word	0x20000464
 8006688:	40200000 	.word	0x40200000
 800668c:	200004b8 	.word	0x200004b8
 8006690:	2000000a 	.word	0x2000000a
 8006694:	20000514 	.word	0x20000514
 8006698:	20000508 	.word	0x20000508
 800669c:	20000518 	.word	0x20000518
 80066a0:	20000544 	.word	0x20000544
 80066a4:	20000010 	.word	0x20000010
 80066a8:	0800f894 	.word	0x0800f894
 80066ac:	200003b0 	.word	0x200003b0
 80066b0:	20000414 	.word	0x20000414
 80066b4:	200002f8 	.word	0x200002f8
				}
				else // ASDA-A3 Driver
				{
					PositionCmd = 2*3.14*DrumRadius*PositionPulseCmd/EncoderResolution;
 80066b8:	4b89      	ldr	r3, [pc, #548]	; (80068e0 <main+0xd08>)
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	4618      	mov	r0, r3
 80066be:	f7f9 ff43 	bl	8000548 <__aeabi_f2d>
 80066c2:	a385      	add	r3, pc, #532	; (adr r3, 80068d8 <main+0xd00>)
 80066c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80066c8:	f7f9 ff96 	bl	80005f8 <__aeabi_dmul>
 80066cc:	4602      	mov	r2, r0
 80066ce:	460b      	mov	r3, r1
 80066d0:	4614      	mov	r4, r2
 80066d2:	461d      	mov	r5, r3
 80066d4:	4b83      	ldr	r3, [pc, #524]	; (80068e4 <main+0xd0c>)
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	4618      	mov	r0, r3
 80066da:	f7f9 ff23 	bl	8000524 <__aeabi_i2d>
 80066de:	4602      	mov	r2, r0
 80066e0:	460b      	mov	r3, r1
 80066e2:	4620      	mov	r0, r4
 80066e4:	4629      	mov	r1, r5
 80066e6:	f7f9 ff87 	bl	80005f8 <__aeabi_dmul>
 80066ea:	4602      	mov	r2, r0
 80066ec:	460b      	mov	r3, r1
 80066ee:	4614      	mov	r4, r2
 80066f0:	461d      	mov	r5, r3
 80066f2:	4b7d      	ldr	r3, [pc, #500]	; (80068e8 <main+0xd10>)
 80066f4:	881b      	ldrh	r3, [r3, #0]
 80066f6:	4618      	mov	r0, r3
 80066f8:	f7f9 ff14 	bl	8000524 <__aeabi_i2d>
 80066fc:	4602      	mov	r2, r0
 80066fe:	460b      	mov	r3, r1
 8006700:	4620      	mov	r0, r4
 8006702:	4629      	mov	r1, r5
 8006704:	f7fa f8a2 	bl	800084c <__aeabi_ddiv>
 8006708:	4602      	mov	r2, r0
 800670a:	460b      	mov	r3, r1
 800670c:	4610      	mov	r0, r2
 800670e:	4619      	mov	r1, r3
 8006710:	f7fa fa6a 	bl	8000be8 <__aeabi_d2f>
 8006714:	4603      	mov	r3, r0
 8006716:	4a75      	ldr	r2, [pc, #468]	; (80068ec <main+0xd14>)
 8006718:	6013      	str	r3, [r2, #0]
					TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,PositionCmd,AccRef);
 800671a:	4b75      	ldr	r3, [pc, #468]	; (80068f0 <main+0xd18>)
 800671c:	681b      	ldr	r3, [r3, #0]
 800671e:	4618      	mov	r0, r3
 8006720:	f7f9 ff12 	bl	8000548 <__aeabi_f2d>
 8006724:	e9c7 0100 	strd	r0, r1, [r7]
 8006728:	4b72      	ldr	r3, [pc, #456]	; (80068f4 <main+0xd1c>)
 800672a:	681b      	ldr	r3, [r3, #0]
 800672c:	4618      	mov	r0, r3
 800672e:	f7f9 ff0b 	bl	8000548 <__aeabi_f2d>
 8006732:	4604      	mov	r4, r0
 8006734:	460d      	mov	r5, r1
 8006736:	4b70      	ldr	r3, [pc, #448]	; (80068f8 <main+0xd20>)
 8006738:	681b      	ldr	r3, [r3, #0]
 800673a:	4618      	mov	r0, r3
 800673c:	f7f9 ff04 	bl	8000548 <__aeabi_f2d>
 8006740:	4680      	mov	r8, r0
 8006742:	4689      	mov	r9, r1
 8006744:	4b69      	ldr	r3, [pc, #420]	; (80068ec <main+0xd14>)
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4618      	mov	r0, r3
 800674a:	f7f9 fefd 	bl	8000548 <__aeabi_f2d>
 800674e:	4682      	mov	sl, r0
 8006750:	468b      	mov	fp, r1
 8006752:	4b6a      	ldr	r3, [pc, #424]	; (80068fc <main+0xd24>)
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	4618      	mov	r0, r3
 8006758:	f7f9 fef6 	bl	8000548 <__aeabi_f2d>
 800675c:	4602      	mov	r2, r0
 800675e:	460b      	mov	r3, r1
 8006760:	e9cd 2306 	strd	r2, r3, [sp, #24]
 8006764:	e9cd ab04 	strd	sl, fp, [sp, #16]
 8006768:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800676c:	e9cd 4500 	strd	r4, r5, [sp]
 8006770:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006774:	4962      	ldr	r1, [pc, #392]	; (8006900 <main+0xd28>)
 8006776:	4863      	ldr	r0, [pc, #396]	; (8006904 <main+0xd2c>)
 8006778:	f005 f924 	bl	800b9c4 <siprintf>
 800677c:	4603      	mov	r3, r0
 800677e:	b2da      	uxtb	r2, r3
 8006780:	4b61      	ldr	r3, [pc, #388]	; (8006908 <main+0xd30>)
 8006782:	701a      	strb	r2, [r3, #0]
					//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef, PositionCmd);
					HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8006784:	4b60      	ldr	r3, [pc, #384]	; (8006908 <main+0xd30>)
 8006786:	781b      	ldrb	r3, [r3, #0]
 8006788:	b29a      	uxth	r2, r3
 800678a:	23c8      	movs	r3, #200	; 0xc8
 800678c:	495d      	ldr	r1, [pc, #372]	; (8006904 <main+0xd2c>)
 800678e:	485f      	ldr	r0, [pc, #380]	; (800690c <main+0xd34>)
 8006790:	f003 fa37 	bl	8009c02 <HAL_UART_Transmit>
					// Read 4 words start from 0x012 to 0x015
					// Encoder pulse: 0x012 + 0x013 (2 words)
					// Motor Speed: 0x014 + 0x015 (2 words)
					// Pulse Error: (2 word)
					// Total is 6 words, 1word = 4 bytes
					ReadMultiRegister(ASDA_MotorSpeed,6);
 8006794:	2106      	movs	r1, #6
 8006796:	2012      	movs	r0, #18
 8006798:	f7fa ff06 	bl	80015a8 <ReadMultiRegister>
				}
				memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 800679c:	225a      	movs	r2, #90	; 0x5a
 800679e:	2100      	movs	r1, #0
 80067a0:	4858      	ldr	r0, [pc, #352]	; (8006904 <main+0xd2c>)
 80067a2:	f004 fa87 	bl	800acb4 <memset>
			}
			if(OutputDataRequest)
 80067a6:	4b5a      	ldr	r3, [pc, #360]	; (8006910 <main+0xd38>)
 80067a8:	781b      	ldrb	r3, [r3, #0]
 80067aa:	2b00      	cmp	r3, #0
 80067ac:	d02a      	beq.n	8006804 <main+0xc2c>
				{
					CountTimerDriverOutput++;
 80067ae:	4b59      	ldr	r3, [pc, #356]	; (8006914 <main+0xd3c>)
 80067b0:	881b      	ldrh	r3, [r3, #0]
 80067b2:	3301      	adds	r3, #1
 80067b4:	b29a      	uxth	r2, r3
 80067b6:	4b57      	ldr	r3, [pc, #348]	; (8006914 <main+0xd3c>)
 80067b8:	801a      	strh	r2, [r3, #0]
					if (CountTimerDriverOutput >= 15) // 20*25=500 ms, timer 2 period is 1ms
 80067ba:	4b56      	ldr	r3, [pc, #344]	; (8006914 <main+0xd3c>)
 80067bc:	881b      	ldrh	r3, [r3, #0]
 80067be:	2b0e      	cmp	r3, #14
 80067c0:	d920      	bls.n	8006804 <main+0xc2c>
					{
						DriverOutput = ReadLogicF7000Out(); // Read Driver Output
 80067c2:	f7fa fdc5 	bl	8001350 <ReadLogicF7000Out>
 80067c6:	4603      	mov	r3, r0
 80067c8:	461a      	mov	r2, r3
 80067ca:	4b53      	ldr	r3, [pc, #332]	; (8006918 <main+0xd40>)
 80067cc:	801a      	strh	r2, [r3, #0]

						memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80067ce:	225a      	movs	r2, #90	; 0x5a
 80067d0:	2100      	movs	r1, #0
 80067d2:	484c      	ldr	r0, [pc, #304]	; (8006904 <main+0xd2c>)
 80067d4:	f004 fa6e 	bl	800acb4 <memset>
						TxPCLen = sprintf(TxPCBuff,"o%de",DriverOutput); // 1 means only the driver outputs
 80067d8:	4b4f      	ldr	r3, [pc, #316]	; (8006918 <main+0xd40>)
 80067da:	881b      	ldrh	r3, [r3, #0]
 80067dc:	461a      	mov	r2, r3
 80067de:	494f      	ldr	r1, [pc, #316]	; (800691c <main+0xd44>)
 80067e0:	4848      	ldr	r0, [pc, #288]	; (8006904 <main+0xd2c>)
 80067e2:	f005 f8ef 	bl	800b9c4 <siprintf>
 80067e6:	4603      	mov	r3, r0
 80067e8:	b2da      	uxtb	r2, r3
 80067ea:	4b47      	ldr	r3, [pc, #284]	; (8006908 <main+0xd30>)
 80067ec:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80067ee:	4b46      	ldr	r3, [pc, #280]	; (8006908 <main+0xd30>)
 80067f0:	781b      	ldrb	r3, [r3, #0]
 80067f2:	b29a      	uxth	r2, r3
 80067f4:	23c8      	movs	r3, #200	; 0xc8
 80067f6:	4943      	ldr	r1, [pc, #268]	; (8006904 <main+0xd2c>)
 80067f8:	4844      	ldr	r0, [pc, #272]	; (800690c <main+0xd34>)
 80067fa:	f003 fa02 	bl	8009c02 <HAL_UART_Transmit>

						CountTimerDriverOutput = 0;
 80067fe:	4b45      	ldr	r3, [pc, #276]	; (8006914 <main+0xd3c>)
 8006800:	2200      	movs	r2, #0
 8006802:	801a      	strh	r2, [r3, #0]
			// END Send data to the UI
		}
		// END 20ms period interrupt

		// BEGIN Process Driver Received Data
		if (RxUart5_Cpl_Flag) // Complete receive data from the driver
 8006804:	4b46      	ldr	r3, [pc, #280]	; (8006920 <main+0xd48>)
 8006806:	781b      	ldrb	r3, [r3, #0]
 8006808:	b2db      	uxtb	r3, r3
 800680a:	2b00      	cmp	r3, #0
 800680c:	f43f aa12 	beq.w	8005c34 <main+0x5c>
			{
				RxUart5_Cpl_Flag = false;
 8006810:	4b43      	ldr	r3, [pc, #268]	; (8006920 <main+0xd48>)
 8006812:	2200      	movs	r2, #0
 8006814:	701a      	strb	r2, [r3, #0]

				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8006816:	4b43      	ldr	r3, [pc, #268]	; (8006924 <main+0xd4c>)
 8006818:	2200      	movs	r2, #0
 800681a:	701a      	strb	r2, [r3, #0]
 800681c:	e13c      	b.n	8006a98 <main+0xec0>
				{
					if (RxDriverBuff[i] == DriverID)
 800681e:	4b41      	ldr	r3, [pc, #260]	; (8006924 <main+0xd4c>)
 8006820:	781b      	ldrb	r3, [r3, #0]
 8006822:	461a      	mov	r2, r3
 8006824:	4b40      	ldr	r3, [pc, #256]	; (8006928 <main+0xd50>)
 8006826:	5c9b      	ldrb	r3, [r3, r2]
 8006828:	b2db      	uxtb	r3, r3
 800682a:	2b01      	cmp	r3, #1
 800682c:	f040 812e 	bne.w	8006a8c <main+0xeb4>
					{
						if (RxDriverBuff[1+i] == 3)
 8006830:	4b3c      	ldr	r3, [pc, #240]	; (8006924 <main+0xd4c>)
 8006832:	781b      	ldrb	r3, [r3, #0]
 8006834:	3301      	adds	r3, #1
 8006836:	4a3c      	ldr	r2, [pc, #240]	; (8006928 <main+0xd50>)
 8006838:	5cd3      	ldrb	r3, [r2, r3]
 800683a:	b2db      	uxtb	r3, r3
 800683c:	2b03      	cmp	r3, #3
 800683e:	f040 80df 	bne.w	8006a00 <main+0xe28>
						{
							if (MotorDriver) // FDA7000
 8006842:	4b3a      	ldr	r3, [pc, #232]	; (800692c <main+0xd54>)
 8006844:	781b      	ldrb	r3, [r3, #0]
 8006846:	2b00      	cmp	r3, #0
 8006848:	d076      	beq.n	8006938 <main+0xd60>
							{
								SpeedValueRegion[0] = RxDriverBuff[6+i];
 800684a:	4b36      	ldr	r3, [pc, #216]	; (8006924 <main+0xd4c>)
 800684c:	781b      	ldrb	r3, [r3, #0]
 800684e:	3306      	adds	r3, #6
 8006850:	4a35      	ldr	r2, [pc, #212]	; (8006928 <main+0xd50>)
 8006852:	5cd3      	ldrb	r3, [r2, r3]
 8006854:	b2da      	uxtb	r2, r3
 8006856:	4b36      	ldr	r3, [pc, #216]	; (8006930 <main+0xd58>)
 8006858:	701a      	strb	r2, [r3, #0]
								SpeedValueRegion[1] = RxDriverBuff[5+i];
 800685a:	4b32      	ldr	r3, [pc, #200]	; (8006924 <main+0xd4c>)
 800685c:	781b      	ldrb	r3, [r3, #0]
 800685e:	3305      	adds	r3, #5
 8006860:	4a31      	ldr	r2, [pc, #196]	; (8006928 <main+0xd50>)
 8006862:	5cd3      	ldrb	r3, [r2, r3]
 8006864:	b2da      	uxtb	r2, r3
 8006866:	4b32      	ldr	r3, [pc, #200]	; (8006930 <main+0xd58>)
 8006868:	705a      	strb	r2, [r3, #1]
								SpeedValueRegion[2] = RxDriverBuff[4+i];
 800686a:	4b2e      	ldr	r3, [pc, #184]	; (8006924 <main+0xd4c>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	3304      	adds	r3, #4
 8006870:	4a2d      	ldr	r2, [pc, #180]	; (8006928 <main+0xd50>)
 8006872:	5cd3      	ldrb	r3, [r2, r3]
 8006874:	b2da      	uxtb	r2, r3
 8006876:	4b2e      	ldr	r3, [pc, #184]	; (8006930 <main+0xd58>)
 8006878:	709a      	strb	r2, [r3, #2]
								SpeedValueRegion[3] = RxDriverBuff[3+i];
 800687a:	4b2a      	ldr	r3, [pc, #168]	; (8006924 <main+0xd4c>)
 800687c:	781b      	ldrb	r3, [r3, #0]
 800687e:	3303      	adds	r3, #3
 8006880:	4a29      	ldr	r2, [pc, #164]	; (8006928 <main+0xd50>)
 8006882:	5cd3      	ldrb	r3, [r2, r3]
 8006884:	b2da      	uxtb	r2, r3
 8006886:	4b2a      	ldr	r3, [pc, #168]	; (8006930 <main+0xd58>)
 8006888:	70da      	strb	r2, [r3, #3]
 800688a:	4b29      	ldr	r3, [pc, #164]	; (8006930 <main+0xd58>)
 800688c:	681b      	ldr	r3, [r3, #0]

								memcpy(&MotorSpeed, SpeedValueRegion, 4);
 800688e:	4a18      	ldr	r2, [pc, #96]	; (80068f0 <main+0xd18>)
 8006890:	6013      	str	r3, [r2, #0]

								MotorEncPulse = (RxDriverBuff[19+i] << 24) | (RxDriverBuff[20+i] << 16) | (RxDriverBuff[21+i] << 8) | RxDriverBuff[22+i];
 8006892:	4b24      	ldr	r3, [pc, #144]	; (8006924 <main+0xd4c>)
 8006894:	781b      	ldrb	r3, [r3, #0]
 8006896:	3313      	adds	r3, #19
 8006898:	4a23      	ldr	r2, [pc, #140]	; (8006928 <main+0xd50>)
 800689a:	5cd3      	ldrb	r3, [r2, r3]
 800689c:	b2db      	uxtb	r3, r3
 800689e:	061a      	lsls	r2, r3, #24
 80068a0:	4b20      	ldr	r3, [pc, #128]	; (8006924 <main+0xd4c>)
 80068a2:	781b      	ldrb	r3, [r3, #0]
 80068a4:	3314      	adds	r3, #20
 80068a6:	4920      	ldr	r1, [pc, #128]	; (8006928 <main+0xd50>)
 80068a8:	5ccb      	ldrb	r3, [r1, r3]
 80068aa:	b2db      	uxtb	r3, r3
 80068ac:	041b      	lsls	r3, r3, #16
 80068ae:	431a      	orrs	r2, r3
 80068b0:	4b1c      	ldr	r3, [pc, #112]	; (8006924 <main+0xd4c>)
 80068b2:	781b      	ldrb	r3, [r3, #0]
 80068b4:	3315      	adds	r3, #21
 80068b6:	491c      	ldr	r1, [pc, #112]	; (8006928 <main+0xd50>)
 80068b8:	5ccb      	ldrb	r3, [r1, r3]
 80068ba:	b2db      	uxtb	r3, r3
 80068bc:	021b      	lsls	r3, r3, #8
 80068be:	4313      	orrs	r3, r2
 80068c0:	4a18      	ldr	r2, [pc, #96]	; (8006924 <main+0xd4c>)
 80068c2:	7812      	ldrb	r2, [r2, #0]
 80068c4:	3216      	adds	r2, #22
 80068c6:	4918      	ldr	r1, [pc, #96]	; (8006928 <main+0xd50>)
 80068c8:	5c8a      	ldrb	r2, [r1, r2]
 80068ca:	b2d2      	uxtb	r2, r2
 80068cc:	4313      	orrs	r3, r2
 80068ce:	4a19      	ldr	r2, [pc, #100]	; (8006934 <main+0xd5c>)
 80068d0:	6013      	str	r3, [r2, #0]
 80068d2:	e08b      	b.n	80069ec <main+0xe14>
 80068d4:	f3af 8000 	nop.w
 80068d8:	51eb851f 	.word	0x51eb851f
 80068dc:	40191eb8 	.word	0x40191eb8
 80068e0:	20000464 	.word	0x20000464
 80068e4:	200004b8 	.word	0x200004b8
 80068e8:	2000000a 	.word	0x2000000a
 80068ec:	20000514 	.word	0x20000514
 80068f0:	20000508 	.word	0x20000508
 80068f4:	20000518 	.word	0x20000518
 80068f8:	20000544 	.word	0x20000544
 80068fc:	20000010 	.word	0x20000010
 8006900:	0800f894 	.word	0x0800f894
 8006904:	200003b0 	.word	0x200003b0
 8006908:	20000414 	.word	0x20000414
 800690c:	200002f8 	.word	0x200002f8
 8006910:	20000001 	.word	0x20000001
 8006914:	20000450 	.word	0x20000450
 8006918:	20000452 	.word	0x20000452
 800691c:	0800f8b0 	.word	0x0800f8b0
 8006920:	2000042e 	.word	0x2000042e
 8006924:	20000415 	.word	0x20000415
 8006928:	20000364 	.word	0x20000364
 800692c:	20000003 	.word	0x20000003
 8006930:	20000418 	.word	0x20000418
 8006934:	20000510 	.word	0x20000510
							}
							else // ASDA-A3
							{
								MotorSpeedBuff = (float)((RxDriverBuff[5+i] << 24) | (RxDriverBuff[6+i] << 16) | (RxDriverBuff[3+i] << 8) | RxDriverBuff[4+i])/((float)-10.0); // Minus to Reverse
 8006938:	4b77      	ldr	r3, [pc, #476]	; (8006b18 <main+0xf40>)
 800693a:	781b      	ldrb	r3, [r3, #0]
 800693c:	3305      	adds	r3, #5
 800693e:	4a77      	ldr	r2, [pc, #476]	; (8006b1c <main+0xf44>)
 8006940:	5cd3      	ldrb	r3, [r2, r3]
 8006942:	b2db      	uxtb	r3, r3
 8006944:	061a      	lsls	r2, r3, #24
 8006946:	4b74      	ldr	r3, [pc, #464]	; (8006b18 <main+0xf40>)
 8006948:	781b      	ldrb	r3, [r3, #0]
 800694a:	3306      	adds	r3, #6
 800694c:	4973      	ldr	r1, [pc, #460]	; (8006b1c <main+0xf44>)
 800694e:	5ccb      	ldrb	r3, [r1, r3]
 8006950:	b2db      	uxtb	r3, r3
 8006952:	041b      	lsls	r3, r3, #16
 8006954:	431a      	orrs	r2, r3
 8006956:	4b70      	ldr	r3, [pc, #448]	; (8006b18 <main+0xf40>)
 8006958:	781b      	ldrb	r3, [r3, #0]
 800695a:	3303      	adds	r3, #3
 800695c:	496f      	ldr	r1, [pc, #444]	; (8006b1c <main+0xf44>)
 800695e:	5ccb      	ldrb	r3, [r1, r3]
 8006960:	b2db      	uxtb	r3, r3
 8006962:	021b      	lsls	r3, r3, #8
 8006964:	4313      	orrs	r3, r2
 8006966:	4a6c      	ldr	r2, [pc, #432]	; (8006b18 <main+0xf40>)
 8006968:	7812      	ldrb	r2, [r2, #0]
 800696a:	3204      	adds	r2, #4
 800696c:	496b      	ldr	r1, [pc, #428]	; (8006b1c <main+0xf44>)
 800696e:	5c8a      	ldrb	r2, [r1, r2]
 8006970:	b2d2      	uxtb	r2, r2
 8006972:	4313      	orrs	r3, r2
 8006974:	ee07 3a90 	vmov	s15, r3
 8006978:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800697c:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8006980:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8006984:	4b66      	ldr	r3, [pc, #408]	; (8006b20 <main+0xf48>)
 8006986:	edc3 7a00 	vstr	s15, [r3]

								if (fabs(MotorSpeedBuff) <= 2000)
 800698a:	4b65      	ldr	r3, [pc, #404]	; (8006b20 <main+0xf48>)
 800698c:	edd3 7a00 	vldr	s15, [r3]
 8006990:	eef0 7ae7 	vabs.f32	s15, s15
 8006994:	ed9f 7a63 	vldr	s14, [pc, #396]	; 8006b24 <main+0xf4c>
 8006998:	eef4 7ac7 	vcmpe.f32	s15, s14
 800699c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80069a0:	d803      	bhi.n	80069aa <main+0xdd2>
								{
									MotorSpeed = MotorSpeedBuff;
 80069a2:	4b5f      	ldr	r3, [pc, #380]	; (8006b20 <main+0xf48>)
 80069a4:	681b      	ldr	r3, [r3, #0]
 80069a6:	4a60      	ldr	r2, [pc, #384]	; (8006b28 <main+0xf50>)
 80069a8:	6013      	str	r3, [r2, #0]
								}

								MotorEncPulse = -((RxDriverBuff[9+i] << 24) | (RxDriverBuff[10+i] << 16) | (RxDriverBuff[7+i] << 8) | RxDriverBuff[8+i]); // Minus to Reverse
 80069aa:	4b5b      	ldr	r3, [pc, #364]	; (8006b18 <main+0xf40>)
 80069ac:	781b      	ldrb	r3, [r3, #0]
 80069ae:	3309      	adds	r3, #9
 80069b0:	4a5a      	ldr	r2, [pc, #360]	; (8006b1c <main+0xf44>)
 80069b2:	5cd3      	ldrb	r3, [r2, r3]
 80069b4:	b2db      	uxtb	r3, r3
 80069b6:	061a      	lsls	r2, r3, #24
 80069b8:	4b57      	ldr	r3, [pc, #348]	; (8006b18 <main+0xf40>)
 80069ba:	781b      	ldrb	r3, [r3, #0]
 80069bc:	330a      	adds	r3, #10
 80069be:	4957      	ldr	r1, [pc, #348]	; (8006b1c <main+0xf44>)
 80069c0:	5ccb      	ldrb	r3, [r1, r3]
 80069c2:	b2db      	uxtb	r3, r3
 80069c4:	041b      	lsls	r3, r3, #16
 80069c6:	431a      	orrs	r2, r3
 80069c8:	4b53      	ldr	r3, [pc, #332]	; (8006b18 <main+0xf40>)
 80069ca:	781b      	ldrb	r3, [r3, #0]
 80069cc:	3307      	adds	r3, #7
 80069ce:	4953      	ldr	r1, [pc, #332]	; (8006b1c <main+0xf44>)
 80069d0:	5ccb      	ldrb	r3, [r1, r3]
 80069d2:	b2db      	uxtb	r3, r3
 80069d4:	021b      	lsls	r3, r3, #8
 80069d6:	4313      	orrs	r3, r2
 80069d8:	4a4f      	ldr	r2, [pc, #316]	; (8006b18 <main+0xf40>)
 80069da:	7812      	ldrb	r2, [r2, #0]
 80069dc:	3208      	adds	r2, #8
 80069de:	494f      	ldr	r1, [pc, #316]	; (8006b1c <main+0xf44>)
 80069e0:	5c8a      	ldrb	r2, [r1, r2]
 80069e2:	b2d2      	uxtb	r2, r2
 80069e4:	4313      	orrs	r3, r2
 80069e6:	425b      	negs	r3, r3
 80069e8:	4a50      	ldr	r2, [pc, #320]	; (8006b2c <main+0xf54>)
 80069ea:	6013      	str	r3, [r2, #0]
							}

							memset (RxDriverBuff, '\0', sizeof (RxDriverBuff)); // reset buffer
 80069ec:	221e      	movs	r2, #30
 80069ee:	2100      	movs	r1, #0
 80069f0:	484a      	ldr	r0, [pc, #296]	; (8006b1c <main+0xf44>)
 80069f2:	f004 f95f 	bl	800acb4 <memset>
							HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte for the next time
 80069f6:	2201      	movs	r2, #1
 80069f8:	494d      	ldr	r1, [pc, #308]	; (8006b30 <main+0xf58>)
 80069fa:	484e      	ldr	r0, [pc, #312]	; (8006b34 <main+0xf5c>)
 80069fc:	f003 f993 	bl	8009d26 <HAL_UART_Receive_IT>
						}
						if (RxDriverBuff[1] == 6) // Writing to a register
 8006a00:	4b46      	ldr	r3, [pc, #280]	; (8006b1c <main+0xf44>)
 8006a02:	785b      	ldrb	r3, [r3, #1]
 8006a04:	b2db      	uxtb	r3, r3
 8006a06:	2b06      	cmp	r3, #6
 8006a08:	d140      	bne.n	8006a8c <main+0xeb4>
						{
							// Send to PC to check the writing result
							memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8006a0a:	225a      	movs	r2, #90	; 0x5a
 8006a0c:	2100      	movs	r1, #0
 8006a0e:	484a      	ldr	r0, [pc, #296]	; (8006b38 <main+0xf60>)
 8006a10:	f004 f950 	bl	800acb4 <memset>
							TxPCLen = sprintf(TxPCBuff,"w%d/%d/%d/%d/%d/%d/%d/%d/%d/e",RxDriverBuff[0],RxDriverBuff[1],RxDriverBuff[2],RxDriverBuff[3],RxDriverBuff[4],RxDriverBuff[5],RxDriverBuff[6],RxDriverBuff[7],RxDriverBuff[8]);
 8006a14:	4b41      	ldr	r3, [pc, #260]	; (8006b1c <main+0xf44>)
 8006a16:	781b      	ldrb	r3, [r3, #0]
 8006a18:	b2db      	uxtb	r3, r3
 8006a1a:	469c      	mov	ip, r3
 8006a1c:	4b3f      	ldr	r3, [pc, #252]	; (8006b1c <main+0xf44>)
 8006a1e:	785b      	ldrb	r3, [r3, #1]
 8006a20:	b2db      	uxtb	r3, r3
 8006a22:	469e      	mov	lr, r3
 8006a24:	4b3d      	ldr	r3, [pc, #244]	; (8006b1c <main+0xf44>)
 8006a26:	789b      	ldrb	r3, [r3, #2]
 8006a28:	b2db      	uxtb	r3, r3
 8006a2a:	461a      	mov	r2, r3
 8006a2c:	4b3b      	ldr	r3, [pc, #236]	; (8006b1c <main+0xf44>)
 8006a2e:	78db      	ldrb	r3, [r3, #3]
 8006a30:	b2db      	uxtb	r3, r3
 8006a32:	4619      	mov	r1, r3
 8006a34:	4b39      	ldr	r3, [pc, #228]	; (8006b1c <main+0xf44>)
 8006a36:	791b      	ldrb	r3, [r3, #4]
 8006a38:	b2db      	uxtb	r3, r3
 8006a3a:	4618      	mov	r0, r3
 8006a3c:	4b37      	ldr	r3, [pc, #220]	; (8006b1c <main+0xf44>)
 8006a3e:	795b      	ldrb	r3, [r3, #5]
 8006a40:	b2db      	uxtb	r3, r3
 8006a42:	461c      	mov	r4, r3
 8006a44:	4b35      	ldr	r3, [pc, #212]	; (8006b1c <main+0xf44>)
 8006a46:	799b      	ldrb	r3, [r3, #6]
 8006a48:	b2db      	uxtb	r3, r3
 8006a4a:	461d      	mov	r5, r3
 8006a4c:	4b33      	ldr	r3, [pc, #204]	; (8006b1c <main+0xf44>)
 8006a4e:	79db      	ldrb	r3, [r3, #7]
 8006a50:	b2db      	uxtb	r3, r3
 8006a52:	461e      	mov	r6, r3
 8006a54:	4b31      	ldr	r3, [pc, #196]	; (8006b1c <main+0xf44>)
 8006a56:	7a1b      	ldrb	r3, [r3, #8]
 8006a58:	b2db      	uxtb	r3, r3
 8006a5a:	9306      	str	r3, [sp, #24]
 8006a5c:	9605      	str	r6, [sp, #20]
 8006a5e:	9504      	str	r5, [sp, #16]
 8006a60:	9403      	str	r4, [sp, #12]
 8006a62:	9002      	str	r0, [sp, #8]
 8006a64:	9101      	str	r1, [sp, #4]
 8006a66:	9200      	str	r2, [sp, #0]
 8006a68:	4673      	mov	r3, lr
 8006a6a:	4662      	mov	r2, ip
 8006a6c:	4933      	ldr	r1, [pc, #204]	; (8006b3c <main+0xf64>)
 8006a6e:	4832      	ldr	r0, [pc, #200]	; (8006b38 <main+0xf60>)
 8006a70:	f004 ffa8 	bl	800b9c4 <siprintf>
 8006a74:	4603      	mov	r3, r0
 8006a76:	b2da      	uxtb	r2, r3
 8006a78:	4b31      	ldr	r3, [pc, #196]	; (8006b40 <main+0xf68>)
 8006a7a:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8006a7c:	4b30      	ldr	r3, [pc, #192]	; (8006b40 <main+0xf68>)
 8006a7e:	781b      	ldrb	r3, [r3, #0]
 8006a80:	b29a      	uxth	r2, r3
 8006a82:	23c8      	movs	r3, #200	; 0xc8
 8006a84:	492c      	ldr	r1, [pc, #176]	; (8006b38 <main+0xf60>)
 8006a86:	482f      	ldr	r0, [pc, #188]	; (8006b44 <main+0xf6c>)
 8006a88:	f003 f8bb 	bl	8009c02 <HAL_UART_Transmit>
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8006a8c:	4b22      	ldr	r3, [pc, #136]	; (8006b18 <main+0xf40>)
 8006a8e:	781b      	ldrb	r3, [r3, #0]
 8006a90:	3301      	adds	r3, #1
 8006a92:	b2da      	uxtb	r2, r3
 8006a94:	4b20      	ldr	r3, [pc, #128]	; (8006b18 <main+0xf40>)
 8006a96:	701a      	strb	r2, [r3, #0]
 8006a98:	4b1f      	ldr	r3, [pc, #124]	; (8006b18 <main+0xf40>)
 8006a9a:	781b      	ldrb	r3, [r3, #0]
 8006a9c:	2b1e      	cmp	r3, #30
 8006a9e:	f67f aebe 	bls.w	800681e <main+0xc46>
						}
						//break;
					}
				}
				ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/EncoderResolution; // Calculate Object Position in m
 8006aa2:	4b29      	ldr	r3, [pc, #164]	; (8006b48 <main+0xf70>)
 8006aa4:	681b      	ldr	r3, [r3, #0]
 8006aa6:	4618      	mov	r0, r3
 8006aa8:	f7f9 fd4e 	bl	8000548 <__aeabi_f2d>
 8006aac:	a318      	add	r3, pc, #96	; (adr r3, 8006b10 <main+0xf38>)
 8006aae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006ab2:	f7f9 fda1 	bl	80005f8 <__aeabi_dmul>
 8006ab6:	4602      	mov	r2, r0
 8006ab8:	460b      	mov	r3, r1
 8006aba:	4614      	mov	r4, r2
 8006abc:	461d      	mov	r5, r3
 8006abe:	4b1b      	ldr	r3, [pc, #108]	; (8006b2c <main+0xf54>)
 8006ac0:	681a      	ldr	r2, [r3, #0]
 8006ac2:	4b22      	ldr	r3, [pc, #136]	; (8006b4c <main+0xf74>)
 8006ac4:	681b      	ldr	r3, [r3, #0]
 8006ac6:	1ad3      	subs	r3, r2, r3
 8006ac8:	4618      	mov	r0, r3
 8006aca:	f7f9 fd2b 	bl	8000524 <__aeabi_i2d>
 8006ace:	4602      	mov	r2, r0
 8006ad0:	460b      	mov	r3, r1
 8006ad2:	4620      	mov	r0, r4
 8006ad4:	4629      	mov	r1, r5
 8006ad6:	f7f9 fd8f 	bl	80005f8 <__aeabi_dmul>
 8006ada:	4602      	mov	r2, r0
 8006adc:	460b      	mov	r3, r1
 8006ade:	4614      	mov	r4, r2
 8006ae0:	461d      	mov	r5, r3
 8006ae2:	4b1b      	ldr	r3, [pc, #108]	; (8006b50 <main+0xf78>)
 8006ae4:	881b      	ldrh	r3, [r3, #0]
 8006ae6:	4618      	mov	r0, r3
 8006ae8:	f7f9 fd1c 	bl	8000524 <__aeabi_i2d>
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	4620      	mov	r0, r4
 8006af2:	4629      	mov	r1, r5
 8006af4:	f7f9 feaa 	bl	800084c <__aeabi_ddiv>
 8006af8:	4602      	mov	r2, r0
 8006afa:	460b      	mov	r3, r1
 8006afc:	4610      	mov	r0, r2
 8006afe:	4619      	mov	r1, r3
 8006b00:	f7fa f872 	bl	8000be8 <__aeabi_d2f>
 8006b04:	4603      	mov	r3, r0
 8006b06:	4a13      	ldr	r2, [pc, #76]	; (8006b54 <main+0xf7c>)
 8006b08:	6013      	str	r3, [r2, #0]
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8006b0a:	f7ff b893 	b.w	8005c34 <main+0x5c>
 8006b0e:	bf00      	nop
 8006b10:	51eb851f 	.word	0x51eb851f
 8006b14:	40191eb8 	.word	0x40191eb8
 8006b18:	20000415 	.word	0x20000415
 8006b1c:	20000364 	.word	0x20000364
 8006b20:	2000050c 	.word	0x2000050c
 8006b24:	44fa0000 	.word	0x44fa0000
 8006b28:	20000508 	.word	0x20000508
 8006b2c:	20000510 	.word	0x20000510
 8006b30:	200003ad 	.word	0x200003ad
 8006b34:	200002b4 	.word	0x200002b4
 8006b38:	200003b0 	.word	0x200003b0
 8006b3c:	0800f8b8 	.word	0x0800f8b8
 8006b40:	20000414 	.word	0x20000414
 8006b44:	200002f8 	.word	0x200002f8
 8006b48:	20000464 	.word	0x20000464
 8006b4c:	200004ac 	.word	0x200004ac
 8006b50:	2000000a 	.word	0x2000000a
 8006b54:	20000544 	.word	0x20000544

08006b58 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8006b58:	b580      	push	{r7, lr}
 8006b5a:	b094      	sub	sp, #80	; 0x50
 8006b5c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8006b5e:	f107 0320 	add.w	r3, r7, #32
 8006b62:	2230      	movs	r2, #48	; 0x30
 8006b64:	2100      	movs	r1, #0
 8006b66:	4618      	mov	r0, r3
 8006b68:	f004 f8a4 	bl	800acb4 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8006b6c:	f107 030c 	add.w	r3, r7, #12
 8006b70:	2200      	movs	r2, #0
 8006b72:	601a      	str	r2, [r3, #0]
 8006b74:	605a      	str	r2, [r3, #4]
 8006b76:	609a      	str	r2, [r3, #8]
 8006b78:	60da      	str	r2, [r3, #12]
 8006b7a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8006b7c:	2300      	movs	r3, #0
 8006b7e:	60bb      	str	r3, [r7, #8]
 8006b80:	4b28      	ldr	r3, [pc, #160]	; (8006c24 <SystemClock_Config+0xcc>)
 8006b82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b84:	4a27      	ldr	r2, [pc, #156]	; (8006c24 <SystemClock_Config+0xcc>)
 8006b86:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b8a:	6413      	str	r3, [r2, #64]	; 0x40
 8006b8c:	4b25      	ldr	r3, [pc, #148]	; (8006c24 <SystemClock_Config+0xcc>)
 8006b8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b90:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b94:	60bb      	str	r3, [r7, #8]
 8006b96:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8006b98:	2300      	movs	r3, #0
 8006b9a:	607b      	str	r3, [r7, #4]
 8006b9c:	4b22      	ldr	r3, [pc, #136]	; (8006c28 <SystemClock_Config+0xd0>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a21      	ldr	r2, [pc, #132]	; (8006c28 <SystemClock_Config+0xd0>)
 8006ba2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006ba6:	6013      	str	r3, [r2, #0]
 8006ba8:	4b1f      	ldr	r3, [pc, #124]	; (8006c28 <SystemClock_Config+0xd0>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006bb0:	607b      	str	r3, [r7, #4]
 8006bb2:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8006bb4:	2301      	movs	r3, #1
 8006bb6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8006bb8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8006bbc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8006bbe:	2302      	movs	r3, #2
 8006bc0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8006bc2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8006bc6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8006bc8:	230c      	movs	r3, #12
 8006bca:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8006bcc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8006bd0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8006bd2:	2302      	movs	r3, #2
 8006bd4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8006bd6:	2304      	movs	r3, #4
 8006bd8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8006bda:	f107 0320 	add.w	r3, r7, #32
 8006bde:	4618      	mov	r0, r3
 8006be0:	f001 fc9a 	bl	8008518 <HAL_RCC_OscConfig>
 8006be4:	4603      	mov	r3, r0
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d001      	beq.n	8006bee <SystemClock_Config+0x96>
  {
    Error_Handler();
 8006bea:	f000 fad7 	bl	800719c <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8006bee:	230f      	movs	r3, #15
 8006bf0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8006bf2:	2302      	movs	r3, #2
 8006bf4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8006bf6:	2300      	movs	r3, #0
 8006bf8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8006bfa:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006bfe:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8006c00:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8006c04:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8006c06:	f107 030c 	add.w	r3, r7, #12
 8006c0a:	2105      	movs	r1, #5
 8006c0c:	4618      	mov	r0, r3
 8006c0e:	f001 fefb 	bl	8008a08 <HAL_RCC_ClockConfig>
 8006c12:	4603      	mov	r3, r0
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d001      	beq.n	8006c1c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8006c18:	f000 fac0 	bl	800719c <Error_Handler>
  }
}
 8006c1c:	bf00      	nop
 8006c1e:	3750      	adds	r7, #80	; 0x50
 8006c20:	46bd      	mov	sp, r7
 8006c22:	bd80      	pop	{r7, pc}
 8006c24:	40023800 	.word	0x40023800
 8006c28:	40007000 	.word	0x40007000

08006c2c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8006c30:	2200      	movs	r2, #0
 8006c32:	2100      	movs	r1, #0
 8006c34:	2047      	movs	r0, #71	; 0x47
 8006c36:	f000 fed6 	bl	80079e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8006c3a:	2047      	movs	r0, #71	; 0x47
 8006c3c:	f000 feef 	bl	8007a1e <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8006c40:	2200      	movs	r2, #0
 8006c42:	2102      	movs	r1, #2
 8006c44:	201d      	movs	r0, #29
 8006c46:	f000 fece 	bl	80079e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8006c4a:	201d      	movs	r0, #29
 8006c4c:	f000 fee7 	bl	8007a1e <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8006c50:	2200      	movs	r2, #0
 8006c52:	2103      	movs	r1, #3
 8006c54:	201c      	movs	r0, #28
 8006c56:	f000 fec6 	bl	80079e6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8006c5a:	201c      	movs	r0, #28
 8006c5c:	f000 fedf 	bl	8007a1e <HAL_NVIC_EnableIRQ>
}
 8006c60:	bf00      	nop
 8006c62:	bd80      	pop	{r7, pc}

08006c64 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8006c64:	b580      	push	{r7, lr}
 8006c66:	b08a      	sub	sp, #40	; 0x28
 8006c68:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006c6a:	f107 0318 	add.w	r3, r7, #24
 8006c6e:	2200      	movs	r2, #0
 8006c70:	601a      	str	r2, [r3, #0]
 8006c72:	605a      	str	r2, [r3, #4]
 8006c74:	609a      	str	r2, [r3, #8]
 8006c76:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006c78:	f107 0310 	add.w	r3, r7, #16
 8006c7c:	2200      	movs	r2, #0
 8006c7e:	601a      	str	r2, [r3, #0]
 8006c80:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8006c82:	463b      	mov	r3, r7
 8006c84:	2200      	movs	r2, #0
 8006c86:	601a      	str	r2, [r3, #0]
 8006c88:	605a      	str	r2, [r3, #4]
 8006c8a:	609a      	str	r2, [r3, #8]
 8006c8c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8006c8e:	4b31      	ldr	r3, [pc, #196]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006c90:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8006c94:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8006c96:	4b2f      	ldr	r3, [pc, #188]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006c98:	220a      	movs	r2, #10
 8006c9a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006c9c:	4b2d      	ldr	r3, [pc, #180]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006c9e:	2200      	movs	r2, #0
 8006ca0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8006ca2:	4b2c      	ldr	r3, [pc, #176]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006ca4:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8006ca8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006caa:	4b2a      	ldr	r3, [pc, #168]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006cac:	2200      	movs	r2, #0
 8006cae:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8006cb0:	4b28      	ldr	r3, [pc, #160]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006cb2:	2280      	movs	r2, #128	; 0x80
 8006cb4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8006cb6:	4827      	ldr	r0, [pc, #156]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006cb8:	f002 f886 	bl	8008dc8 <HAL_TIM_Base_Init>
 8006cbc:	4603      	mov	r3, r0
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d001      	beq.n	8006cc6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8006cc2:	f000 fa6b 	bl	800719c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006cc6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006cca:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8006ccc:	f107 0318 	add.w	r3, r7, #24
 8006cd0:	4619      	mov	r1, r3
 8006cd2:	4820      	ldr	r0, [pc, #128]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006cd4:	f002 fb64 	bl	80093a0 <HAL_TIM_ConfigClockSource>
 8006cd8:	4603      	mov	r3, r0
 8006cda:	2b00      	cmp	r3, #0
 8006cdc:	d001      	beq.n	8006ce2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8006cde:	f000 fa5d 	bl	800719c <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8006ce2:	481c      	ldr	r0, [pc, #112]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006ce4:	f002 f95f 	bl	8008fa6 <HAL_TIM_IC_Init>
 8006ce8:	4603      	mov	r3, r0
 8006cea:	2b00      	cmp	r3, #0
 8006cec:	d001      	beq.n	8006cf2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8006cee:	f000 fa55 	bl	800719c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8006cf2:	2320      	movs	r3, #32
 8006cf4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006cf6:	2300      	movs	r3, #0
 8006cf8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8006cfa:	f107 0310 	add.w	r3, r7, #16
 8006cfe:	4619      	mov	r1, r3
 8006d00:	4814      	ldr	r0, [pc, #80]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006d02:	f002 fea1 	bl	8009a48 <HAL_TIMEx_MasterConfigSynchronization>
 8006d06:	4603      	mov	r3, r0
 8006d08:	2b00      	cmp	r3, #0
 8006d0a:	d001      	beq.n	8006d10 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8006d0c:	f000 fa46 	bl	800719c <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8006d10:	2300      	movs	r3, #0
 8006d12:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8006d14:	2301      	movs	r3, #1
 8006d16:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8006d18:	2300      	movs	r3, #0
 8006d1a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8006d1c:	2300      	movs	r3, #0
 8006d1e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8006d20:	463b      	mov	r3, r7
 8006d22:	2200      	movs	r2, #0
 8006d24:	4619      	mov	r1, r3
 8006d26:	480b      	ldr	r0, [pc, #44]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006d28:	f002 fa9e 	bl	8009268 <HAL_TIM_IC_ConfigChannel>
 8006d2c:	4603      	mov	r3, r0
 8006d2e:	2b00      	cmp	r3, #0
 8006d30:	d001      	beq.n	8006d36 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8006d32:	f000 fa33 	bl	800719c <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8006d36:	463b      	mov	r3, r7
 8006d38:	2204      	movs	r2, #4
 8006d3a:	4619      	mov	r1, r3
 8006d3c:	4805      	ldr	r0, [pc, #20]	; (8006d54 <MX_TIM2_Init+0xf0>)
 8006d3e:	f002 fa93 	bl	8009268 <HAL_TIM_IC_ConfigChannel>
 8006d42:	4603      	mov	r3, r0
 8006d44:	2b00      	cmp	r3, #0
 8006d46:	d001      	beq.n	8006d4c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8006d48:	f000 fa28 	bl	800719c <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8006d4c:	bf00      	nop
 8006d4e:	3728      	adds	r7, #40	; 0x28
 8006d50:	46bd      	mov	sp, r7
 8006d52:	bd80      	pop	{r7, pc}
 8006d54:	20000224 	.word	0x20000224

08006d58 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8006d58:	b580      	push	{r7, lr}
 8006d5a:	b086      	sub	sp, #24
 8006d5c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8006d5e:	f107 0308 	add.w	r3, r7, #8
 8006d62:	2200      	movs	r2, #0
 8006d64:	601a      	str	r2, [r3, #0]
 8006d66:	605a      	str	r2, [r3, #4]
 8006d68:	609a      	str	r2, [r3, #8]
 8006d6a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8006d6c:	463b      	mov	r3, r7
 8006d6e:	2200      	movs	r2, #0
 8006d70:	601a      	str	r2, [r3, #0]
 8006d72:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8006d74:	4b1c      	ldr	r3, [pc, #112]	; (8006de8 <MX_TIM3_Init+0x90>)
 8006d76:	4a1d      	ldr	r2, [pc, #116]	; (8006dec <MX_TIM3_Init+0x94>)
 8006d78:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8006d7a:	4b1b      	ldr	r3, [pc, #108]	; (8006de8 <MX_TIM3_Init+0x90>)
 8006d7c:	2201      	movs	r2, #1
 8006d7e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8006d80:	4b19      	ldr	r3, [pc, #100]	; (8006de8 <MX_TIM3_Init+0x90>)
 8006d82:	2200      	movs	r2, #0
 8006d84:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168;
 8006d86:	4b18      	ldr	r3, [pc, #96]	; (8006de8 <MX_TIM3_Init+0x90>)
 8006d88:	22a8      	movs	r2, #168	; 0xa8
 8006d8a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8006d8c:	4b16      	ldr	r3, [pc, #88]	; (8006de8 <MX_TIM3_Init+0x90>)
 8006d8e:	2200      	movs	r2, #0
 8006d90:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8006d92:	4b15      	ldr	r3, [pc, #84]	; (8006de8 <MX_TIM3_Init+0x90>)
 8006d94:	2200      	movs	r2, #0
 8006d96:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8006d98:	4813      	ldr	r0, [pc, #76]	; (8006de8 <MX_TIM3_Init+0x90>)
 8006d9a:	f002 f815 	bl	8008dc8 <HAL_TIM_Base_Init>
 8006d9e:	4603      	mov	r3, r0
 8006da0:	2b00      	cmp	r3, #0
 8006da2:	d001      	beq.n	8006da8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8006da4:	f000 f9fa 	bl	800719c <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8006da8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8006dac:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8006dae:	f107 0308 	add.w	r3, r7, #8
 8006db2:	4619      	mov	r1, r3
 8006db4:	480c      	ldr	r0, [pc, #48]	; (8006de8 <MX_TIM3_Init+0x90>)
 8006db6:	f002 faf3 	bl	80093a0 <HAL_TIM_ConfigClockSource>
 8006dba:	4603      	mov	r3, r0
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d001      	beq.n	8006dc4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8006dc0:	f000 f9ec 	bl	800719c <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8006dc4:	2300      	movs	r3, #0
 8006dc6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8006dc8:	2300      	movs	r3, #0
 8006dca:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8006dcc:	463b      	mov	r3, r7
 8006dce:	4619      	mov	r1, r3
 8006dd0:	4805      	ldr	r0, [pc, #20]	; (8006de8 <MX_TIM3_Init+0x90>)
 8006dd2:	f002 fe39 	bl	8009a48 <HAL_TIMEx_MasterConfigSynchronization>
 8006dd6:	4603      	mov	r3, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	d001      	beq.n	8006de0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8006ddc:	f000 f9de 	bl	800719c <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8006de0:	bf00      	nop
 8006de2:	3718      	adds	r7, #24
 8006de4:	46bd      	mov	sp, r7
 8006de6:	bd80      	pop	{r7, pc}
 8006de8:	2000026c 	.word	0x2000026c
 8006dec:	40000400 	.word	0x40000400

08006df0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8006df0:	b580      	push	{r7, lr}
 8006df2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8006df4:	4b11      	ldr	r3, [pc, #68]	; (8006e3c <MX_UART5_Init+0x4c>)
 8006df6:	4a12      	ldr	r2, [pc, #72]	; (8006e40 <MX_UART5_Init+0x50>)
 8006df8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8006dfa:	4b10      	ldr	r3, [pc, #64]	; (8006e3c <MX_UART5_Init+0x4c>)
 8006dfc:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8006e00:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8006e02:	4b0e      	ldr	r3, [pc, #56]	; (8006e3c <MX_UART5_Init+0x4c>)
 8006e04:	2200      	movs	r2, #0
 8006e06:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006e08:	4b0c      	ldr	r3, [pc, #48]	; (8006e3c <MX_UART5_Init+0x4c>)
 8006e0a:	2200      	movs	r2, #0
 8006e0c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006e0e:	4b0b      	ldr	r3, [pc, #44]	; (8006e3c <MX_UART5_Init+0x4c>)
 8006e10:	2200      	movs	r2, #0
 8006e12:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8006e14:	4b09      	ldr	r3, [pc, #36]	; (8006e3c <MX_UART5_Init+0x4c>)
 8006e16:	220c      	movs	r2, #12
 8006e18:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e1a:	4b08      	ldr	r3, [pc, #32]	; (8006e3c <MX_UART5_Init+0x4c>)
 8006e1c:	2200      	movs	r2, #0
 8006e1e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e20:	4b06      	ldr	r3, [pc, #24]	; (8006e3c <MX_UART5_Init+0x4c>)
 8006e22:	2200      	movs	r2, #0
 8006e24:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8006e26:	4805      	ldr	r0, [pc, #20]	; (8006e3c <MX_UART5_Init+0x4c>)
 8006e28:	f002 fe9e 	bl	8009b68 <HAL_UART_Init>
 8006e2c:	4603      	mov	r3, r0
 8006e2e:	2b00      	cmp	r3, #0
 8006e30:	d001      	beq.n	8006e36 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8006e32:	f000 f9b3 	bl	800719c <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8006e36:	bf00      	nop
 8006e38:	bd80      	pop	{r7, pc}
 8006e3a:	bf00      	nop
 8006e3c:	200002b4 	.word	0x200002b4
 8006e40:	40005000 	.word	0x40005000

08006e44 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8006e44:	b580      	push	{r7, lr}
 8006e46:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8006e48:	4b11      	ldr	r3, [pc, #68]	; (8006e90 <MX_USART6_UART_Init+0x4c>)
 8006e4a:	4a12      	ldr	r2, [pc, #72]	; (8006e94 <MX_USART6_UART_Init+0x50>)
 8006e4c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8006e4e:	4b10      	ldr	r3, [pc, #64]	; (8006e90 <MX_USART6_UART_Init+0x4c>)
 8006e50:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8006e54:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8006e56:	4b0e      	ldr	r3, [pc, #56]	; (8006e90 <MX_USART6_UART_Init+0x4c>)
 8006e58:	2200      	movs	r2, #0
 8006e5a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8006e5c:	4b0c      	ldr	r3, [pc, #48]	; (8006e90 <MX_USART6_UART_Init+0x4c>)
 8006e5e:	2200      	movs	r2, #0
 8006e60:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8006e62:	4b0b      	ldr	r3, [pc, #44]	; (8006e90 <MX_USART6_UART_Init+0x4c>)
 8006e64:	2200      	movs	r2, #0
 8006e66:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8006e68:	4b09      	ldr	r3, [pc, #36]	; (8006e90 <MX_USART6_UART_Init+0x4c>)
 8006e6a:	220c      	movs	r2, #12
 8006e6c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006e6e:	4b08      	ldr	r3, [pc, #32]	; (8006e90 <MX_USART6_UART_Init+0x4c>)
 8006e70:	2200      	movs	r2, #0
 8006e72:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8006e74:	4b06      	ldr	r3, [pc, #24]	; (8006e90 <MX_USART6_UART_Init+0x4c>)
 8006e76:	2200      	movs	r2, #0
 8006e78:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8006e7a:	4805      	ldr	r0, [pc, #20]	; (8006e90 <MX_USART6_UART_Init+0x4c>)
 8006e7c:	f002 fe74 	bl	8009b68 <HAL_UART_Init>
 8006e80:	4603      	mov	r3, r0
 8006e82:	2b00      	cmp	r3, #0
 8006e84:	d001      	beq.n	8006e8a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8006e86:	f000 f989 	bl	800719c <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8006e8a:	bf00      	nop
 8006e8c:	bd80      	pop	{r7, pc}
 8006e8e:	bf00      	nop
 8006e90:	200002f8 	.word	0x200002f8
 8006e94:	40011400 	.word	0x40011400

08006e98 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006e98:	b580      	push	{r7, lr}
 8006e9a:	b08c      	sub	sp, #48	; 0x30
 8006e9c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006e9e:	f107 031c 	add.w	r3, r7, #28
 8006ea2:	2200      	movs	r2, #0
 8006ea4:	601a      	str	r2, [r3, #0]
 8006ea6:	605a      	str	r2, [r3, #4]
 8006ea8:	609a      	str	r2, [r3, #8]
 8006eaa:	60da      	str	r2, [r3, #12]
 8006eac:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8006eae:	2300      	movs	r3, #0
 8006eb0:	61bb      	str	r3, [r7, #24]
 8006eb2:	4bb4      	ldr	r3, [pc, #720]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006eb4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eb6:	4ab3      	ldr	r2, [pc, #716]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006eb8:	f043 0310 	orr.w	r3, r3, #16
 8006ebc:	6313      	str	r3, [r2, #48]	; 0x30
 8006ebe:	4bb1      	ldr	r3, [pc, #708]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006ec0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ec2:	f003 0310 	and.w	r3, r3, #16
 8006ec6:	61bb      	str	r3, [r7, #24]
 8006ec8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006eca:	2300      	movs	r3, #0
 8006ecc:	617b      	str	r3, [r7, #20]
 8006ece:	4bad      	ldr	r3, [pc, #692]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006ed0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ed2:	4aac      	ldr	r2, [pc, #688]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006ed4:	f043 0304 	orr.w	r3, r3, #4
 8006ed8:	6313      	str	r3, [r2, #48]	; 0x30
 8006eda:	4baa      	ldr	r3, [pc, #680]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006edc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ede:	f003 0304 	and.w	r3, r3, #4
 8006ee2:	617b      	str	r3, [r7, #20]
 8006ee4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	613b      	str	r3, [r7, #16]
 8006eea:	4ba6      	ldr	r3, [pc, #664]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006eec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006eee:	4aa5      	ldr	r2, [pc, #660]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006ef0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006ef4:	6313      	str	r3, [r2, #48]	; 0x30
 8006ef6:	4ba3      	ldr	r3, [pc, #652]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006ef8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006efa:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006efe:	613b      	str	r3, [r7, #16]
 8006f00:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006f02:	2300      	movs	r3, #0
 8006f04:	60fb      	str	r3, [r7, #12]
 8006f06:	4b9f      	ldr	r3, [pc, #636]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006f08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f0a:	4a9e      	ldr	r2, [pc, #632]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006f0c:	f043 0301 	orr.w	r3, r3, #1
 8006f10:	6313      	str	r3, [r2, #48]	; 0x30
 8006f12:	4b9c      	ldr	r3, [pc, #624]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006f14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f16:	f003 0301 	and.w	r3, r3, #1
 8006f1a:	60fb      	str	r3, [r7, #12]
 8006f1c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f1e:	2300      	movs	r3, #0
 8006f20:	60bb      	str	r3, [r7, #8]
 8006f22:	4b98      	ldr	r3, [pc, #608]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006f24:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f26:	4a97      	ldr	r2, [pc, #604]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006f28:	f043 0302 	orr.w	r3, r3, #2
 8006f2c:	6313      	str	r3, [r2, #48]	; 0x30
 8006f2e:	4b95      	ldr	r3, [pc, #596]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006f30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f32:	f003 0302 	and.w	r3, r3, #2
 8006f36:	60bb      	str	r3, [r7, #8]
 8006f38:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006f3a:	2300      	movs	r3, #0
 8006f3c:	607b      	str	r3, [r7, #4]
 8006f3e:	4b91      	ldr	r3, [pc, #580]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006f40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f42:	4a90      	ldr	r2, [pc, #576]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006f44:	f043 0308 	orr.w	r3, r3, #8
 8006f48:	6313      	str	r3, [r2, #48]	; 0x30
 8006f4a:	4b8e      	ldr	r3, [pc, #568]	; (8007184 <MX_GPIO_Init+0x2ec>)
 8006f4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006f4e:	f003 0308 	and.w	r3, r3, #8
 8006f52:	607b      	str	r3, [r7, #4]
 8006f54:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE4_ZIGBEE_PA_EN_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin|Speed1_not_PE13_41_Pin
 8006f56:	2200      	movs	r2, #0
 8006f58:	f24a 3113 	movw	r1, #41747	; 0xa313
 8006f5c:	488a      	ldr	r0, [pc, #552]	; (8007188 <MX_GPIO_Init+0x2f0>)
 8006f5e:	f001 faa7 	bl	80084b0 <HAL_GPIO_WritePin>
                          |PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_ZIGBEE_nRST_Pin|PC8_PR_Pin|PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin, GPIO_PIN_RESET);
 8006f62:	2200      	movs	r2, #0
 8006f64:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8006f68:	4888      	ldr	r0, [pc, #544]	; (800718c <MX_GPIO_Init+0x2f4>)
 8006f6a:	f001 faa1 	bl	80084b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8006f6e:	2200      	movs	r2, #0
 8006f70:	f649 5108 	movw	r1, #40200	; 0x9d08
 8006f74:	4886      	ldr	r0, [pc, #536]	; (8007190 <MX_GPIO_Init+0x2f8>)
 8006f76:	f001 fa9b 	bl	80084b0 <HAL_GPIO_WritePin>
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin, GPIO_PIN_SET);
 8006f7a:	2201      	movs	r2, #1
 8006f7c:	2130      	movs	r1, #48	; 0x30
 8006f7e:	4883      	ldr	r0, [pc, #524]	; (800718c <MX_GPIO_Init+0x2f4>)
 8006f80:	f001 fa96 	bl	80084b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EStop_Not_PB0_17_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin|PB14_POS_CMD_OPC_EN_Pin
 8006f84:	2200      	movs	r2, #0
 8006f86:	f246 0165 	movw	r1, #24677	; 0x6065
 8006f8a:	4882      	ldr	r0, [pc, #520]	; (8007194 <MX_GPIO_Init+0x2fc>)
 8006f8c:	f001 fa90 	bl	80084b0 <HAL_GPIO_WritePin>
                          |PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ArlarmRST_PB1_42_Pin|PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);
 8006f90:	2201      	movs	r2, #1
 8006f92:	f248 0102 	movw	r1, #32770	; 0x8002
 8006f96:	487f      	ldr	r0, [pc, #508]	; (8007194 <MX_GPIO_Init+0x2fc>)
 8006f98:	f001 fa8a 	bl	80084b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Speed2_Not_PE7_15_Pin|Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin
 8006f9c:	2201      	movs	r2, #1
 8006f9e:	f44f 41b9 	mov.w	r1, #23680	; 0x5c80
 8006fa2:	4879      	ldr	r0, [pc, #484]	; (8007188 <MX_GPIO_Init+0x2f0>)
 8006fa4:	f001 fa84 	bl	80084b0 <HAL_GPIO_WritePin>
                          |CWLIM_Not_PE14_13_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD10_ESP32_EN_GPIO_Port, PD10_ESP32_EN_Pin, GPIO_PIN_SET);
 8006fa8:	2201      	movs	r2, #1
 8006faa:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8006fae:	487a      	ldr	r0, [pc, #488]	; (8007198 <MX_GPIO_Init+0x300>)
 8006fb0:	f001 fa7e 	bl	80084b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin, GPIO_PIN_RESET);
 8006fb4:	2200      	movs	r2, #0
 8006fb6:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8006fba:	4877      	ldr	r0, [pc, #476]	; (8007198 <MX_GPIO_Init+0x300>)
 8006fbc:	f001 fa78 	bl	80084b0 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN1_22_RDY_Pin CN1_21_SPDOUT_TRQOUT_Pin PE5_BLE_GPIO_Pin CN1_48_BRAKE_Pin */
  GPIO_InitStruct.Pin = CN1_22_RDY_Pin|CN1_21_SPDOUT_TRQOUT_Pin|PE5_BLE_GPIO_Pin|CN1_48_BRAKE_Pin;
 8006fc0:	236c      	movs	r3, #108	; 0x6c
 8006fc2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006fc4:	2300      	movs	r3, #0
 8006fc6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fc8:	2300      	movs	r3, #0
 8006fca:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fcc:	f107 031c 	add.w	r3, r7, #28
 8006fd0:	4619      	mov	r1, r3
 8006fd2:	486d      	ldr	r0, [pc, #436]	; (8007188 <MX_GPIO_Init+0x2f0>)
 8006fd4:	f001 f8b8 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4_ZIGBEE_PA_EN_Pin Speed2_Not_PE7_15_Pin Type_Not_PE8_40_Pin PE9_TIM1_CH1_PFIN_Pin
                           Dir_Not_PE10_14_Pin SPDLIM_Not_PE11_38_Pin CCWLIM_Not_PE12_39_Pin Speed1_not_PE13_41_Pin
                           CWLIM_Not_PE14_13_Pin PE15_RELAY1_Pin PE0_485_MCU_DRV_DIR_Pin PE1_ZIGBEE_EN_Pin */
  GPIO_InitStruct.Pin = PE4_ZIGBEE_PA_EN_Pin|Speed2_Not_PE7_15_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin
 8006fd8:	f64f 7393 	movw	r3, #65427	; 0xff93
 8006fdc:	61fb      	str	r3, [r7, #28]
                          |Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin|Speed1_not_PE13_41_Pin
                          |CWLIM_Not_PE14_13_Pin|PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006fde:	2301      	movs	r3, #1
 8006fe0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006fe2:	2300      	movs	r3, #0
 8006fe4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006fe6:	2300      	movs	r3, #0
 8006fe8:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006fea:	f107 031c 	add.w	r3, r7, #28
 8006fee:	4619      	mov	r1, r3
 8006ff0:	4865      	ldr	r0, [pc, #404]	; (8007188 <MX_GPIO_Init+0x2f0>)
 8006ff2:	f001 f8a9 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_USER_BT_MID_Pin CN1_46_ALARM_Pin CN1_47_INSPD_INPOS_Pin CN1_45_NCWOUT_NTQOUT_Pin */
  GPIO_InitStruct.Pin = PC13_USER_BT_MID_Pin|CN1_46_ALARM_Pin|CN1_47_INSPD_INPOS_Pin|CN1_45_NCWOUT_NTQOUT_Pin;
 8006ff6:	f242 0307 	movw	r3, #8199	; 0x2007
 8006ffa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ffc:	2300      	movs	r3, #0
 8006ffe:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007000:	2300      	movs	r3, #0
 8007002:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007004:	f107 031c 	add.w	r3, r7, #28
 8007008:	4619      	mov	r1, r3
 800700a:	4860      	ldr	r0, [pc, #384]	; (800718c <MX_GPIO_Init+0x2f4>)
 800700c:	f001 f89c 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_ZIGBEE_nRST_Pin SerVoReset_PC4_18_Pin Stop_PC5_43_Pin PC8_PR_Pin
                           PC9_ZIGBEE_HGM_EN_Pin PC10_SPI3_SCK_SPARE_Pin */
  GPIO_InitStruct.Pin = PC3_ZIGBEE_nRST_Pin|SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin|PC8_PR_Pin
 8007010:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8007014:	61fb      	str	r3, [r7, #28]
                          |PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007016:	2301      	movs	r3, #1
 8007018:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800701a:	2300      	movs	r3, #0
 800701c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800701e:	2300      	movs	r3, #0
 8007020:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007022:	f107 031c 	add.w	r3, r7, #28
 8007026:	4619      	mov	r1, r3
 8007028:	4858      	ldr	r0, [pc, #352]	; (800718c <MX_GPIO_Init+0x2f4>)
 800702a:	f001 f88d 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_UART4_TX_ESP32_RX_Pin */
  GPIO_InitStruct.Pin = PA0_UART4_TX_ESP32_RX_Pin;
 800702e:	2301      	movs	r3, #1
 8007030:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007032:	2302      	movs	r3, #2
 8007034:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007036:	2300      	movs	r3, #0
 8007038:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800703a:	2303      	movs	r3, #3
 800703c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 800703e:	2308      	movs	r3, #8
 8007040:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PA0_UART4_TX_ESP32_RX_GPIO_Port, &GPIO_InitStruct);
 8007042:	f107 031c 	add.w	r3, r7, #28
 8007046:	4619      	mov	r1, r3
 8007048:	4851      	ldr	r0, [pc, #324]	; (8007190 <MX_GPIO_Init+0x2f8>)
 800704a:	f001 f87d 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_USER_BT_UP_Pin CN1_20_PCWOUT_PTQOUT_Pin CN1_23_TYPEOUT_Pin PA9_LINE_RECV_SELFTEST_Pin */
  GPIO_InitStruct.Pin = PA2_USER_BT_UP_Pin|CN1_20_PCWOUT_PTQOUT_Pin|CN1_23_TYPEOUT_Pin|PA9_LINE_RECV_SELFTEST_Pin;
 800704e:	f44f 7325 	mov.w	r3, #660	; 0x294
 8007052:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007054:	2300      	movs	r3, #0
 8007056:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007058:	2300      	movs	r3, #0
 800705a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800705c:	f107 031c 	add.w	r3, r7, #28
 8007060:	4619      	mov	r1, r3
 8007062:	484b      	ldr	r0, [pc, #300]	; (8007190 <MX_GPIO_Init+0x2f8>)
 8007064:	f001 f870 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_LCD_RST_Pin PA8_LINE_DRV_SELFTEST2_Pin PA10_LINE_DRV_SELFTEST1_Pin PA11_ENC_RECEIV_EN_Pin
                           PA12_LINE_DRV_EN_Pin PA15_SPI3_NSS_SPARE_Pin */
  GPIO_InitStruct.Pin = PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8007068:	f649 5308 	movw	r3, #40200	; 0x9d08
 800706c:	61fb      	str	r3, [r7, #28]
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800706e:	2301      	movs	r3, #1
 8007070:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007072:	2300      	movs	r3, #0
 8007074:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007076:	2300      	movs	r3, #0
 8007078:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800707a:	f107 031c 	add.w	r3, r7, #28
 800707e:	4619      	mov	r1, r3
 8007080:	4843      	ldr	r0, [pc, #268]	; (8007190 <MX_GPIO_Init+0x2f8>)
 8007082:	f001 f861 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : EStop_Not_PB0_17_Pin ArlarmRST_PB1_42_Pin Tor1_PB2_16_Pin PB13_Output_JP7_Pin
                           PB14_POS_CMD_OPC_EN_Pin PB15_485_MCU_PC_DIR_Pin PB5_SPI3_MOSI_SPARE_Pin PB6_RELAY2_Pin */
  GPIO_InitStruct.Pin = EStop_Not_PB0_17_Pin|ArlarmRST_PB1_42_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin
 8007086:	f24e 0367 	movw	r3, #57447	; 0xe067
 800708a:	61fb      	str	r3, [r7, #28]
                          |PB14_POS_CMD_OPC_EN_Pin|PB15_485_MCU_PC_DIR_Pin|PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800708c:	2301      	movs	r3, #1
 800708e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007090:	2300      	movs	r3, #0
 8007092:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007094:	2300      	movs	r3, #0
 8007096:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8007098:	f107 031c 	add.w	r3, r7, #28
 800709c:	4619      	mov	r1, r3
 800709e:	483d      	ldr	r0, [pc, #244]	; (8007194 <MX_GPIO_Init+0x2fc>)
 80070a0:	f001 f852 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10_I2C2_SCL_LCD_IOEXP_Pin PB11_I2C2_SDA_LCD_IOEXP_Pin */
  GPIO_InitStruct.Pin = PB10_I2C2_SCL_LCD_IOEXP_Pin|PB11_I2C2_SDA_LCD_IOEXP_Pin;
 80070a4:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 80070a8:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80070aa:	2312      	movs	r3, #18
 80070ac:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80070ae:	2301      	movs	r3, #1
 80070b0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070b2:	2303      	movs	r3, #3
 80070b4:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80070b6:	2304      	movs	r3, #4
 80070b8:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070ba:	f107 031c 	add.w	r3, r7, #28
 80070be:	4619      	mov	r1, r3
 80070c0:	4834      	ldr	r0, [pc, #208]	; (8007194 <MX_GPIO_Init+0x2fc>)
 80070c2:	f001 f841 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_RELAY3_Pin CN1_19_ZSPD_Pin PB4_SPI3_MISO_SPARE_Pin Input_JP7_Pin */
  GPIO_InitStruct.Pin = PB12_RELAY3_Pin|CN1_19_ZSPD_Pin|PB4_SPI3_MISO_SPARE_Pin|Input_JP7_Pin;
 80070c6:	f241 2318 	movw	r3, #4632	; 0x1218
 80070ca:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80070cc:	2300      	movs	r3, #0
 80070ce:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070d0:	2300      	movs	r3, #0
 80070d2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80070d4:	f107 031c 	add.w	r3, r7, #28
 80070d8:	4619      	mov	r1, r3
 80070da:	482e      	ldr	r0, [pc, #184]	; (8007194 <MX_GPIO_Init+0x2fc>)
 80070dc:	f001 f834 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80070e0:	f44f 7340 	mov.w	r3, #768	; 0x300
 80070e4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80070e6:	2302      	movs	r3, #2
 80070e8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80070ea:	2300      	movs	r3, #0
 80070ec:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80070ee:	2303      	movs	r3, #3
 80070f0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 80070f2:	2307      	movs	r3, #7
 80070f4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80070f6:	f107 031c 	add.w	r3, r7, #28
 80070fa:	4619      	mov	r1, r3
 80070fc:	4826      	ldr	r0, [pc, #152]	; (8007198 <MX_GPIO_Init+0x300>)
 80070fe:	f001 f823 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10_ESP32_EN_Pin */
  GPIO_InitStruct.Pin = PD10_ESP32_EN_Pin;
 8007102:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007106:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8007108:	2311      	movs	r3, #17
 800710a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800710c:	2300      	movs	r3, #0
 800710e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8007110:	2300      	movs	r3, #0
 8007112:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD10_ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 8007114:	f107 031c 	add.w	r3, r7, #28
 8007118:	4619      	mov	r1, r3
 800711a:	481f      	ldr	r0, [pc, #124]	; (8007198 <MX_GPIO_Init+0x300>)
 800711c:	f001 f814 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_ESP32_BOOT_SEL_Pin PD13_MON1_2_EN_Pin PD15_SPDIN_TRQIN_EN_Pin */
  GPIO_InitStruct.Pin = PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin;
 8007120:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8007124:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8007126:	2301      	movs	r3, #1
 8007128:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800712a:	2300      	movs	r3, #0
 800712c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800712e:	2300      	movs	r3, #0
 8007130:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8007132:	f107 031c 	add.w	r3, r7, #28
 8007136:	4619      	mov	r1, r3
 8007138:	4817      	ldr	r0, [pc, #92]	; (8007198 <MX_GPIO_Init+0x300>)
 800713a:	f001 f805 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12_Input_J6_Pin PD14_Input_J6_Pin Input0_J6_DAC_ADC_Pin Input1_J6_DAC_ADC_Pin
                           PD7_A_CODE2_Pin */
  GPIO_InitStruct.Pin = PD12_Input_J6_Pin|PD14_Input_J6_Pin|Input0_J6_DAC_ADC_Pin|Input1_J6_DAC_ADC_Pin
 800713e:	f245 0383 	movw	r3, #20611	; 0x5083
 8007142:	61fb      	str	r3, [r7, #28]
                          |PD7_A_CODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8007144:	2300      	movs	r3, #0
 8007146:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007148:	2300      	movs	r3, #0
 800714a:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800714c:	f107 031c 	add.w	r3, r7, #28
 8007150:	4619      	mov	r1, r3
 8007152:	4811      	ldr	r0, [pc, #68]	; (8007198 <MX_GPIO_Init+0x300>)
 8007154:	f000 fff8 	bl	8008148 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_I2C1_SDA_DAC_ADC_Pin PB8_I2C1_SCL_DAC_ADC_Pin */
  GPIO_InitStruct.Pin = PB7_I2C1_SDA_DAC_ADC_Pin|PB8_I2C1_SCL_DAC_ADC_Pin;
 8007158:	f44f 73c0 	mov.w	r3, #384	; 0x180
 800715c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800715e:	2312      	movs	r3, #18
 8007160:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8007162:	2301      	movs	r3, #1
 8007164:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007166:	2303      	movs	r3, #3
 8007168:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800716a:	2304      	movs	r3, #4
 800716c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800716e:	f107 031c 	add.w	r3, r7, #28
 8007172:	4619      	mov	r1, r3
 8007174:	4807      	ldr	r0, [pc, #28]	; (8007194 <MX_GPIO_Init+0x2fc>)
 8007176:	f000 ffe7 	bl	8008148 <HAL_GPIO_Init>

}
 800717a:	bf00      	nop
 800717c:	3730      	adds	r7, #48	; 0x30
 800717e:	46bd      	mov	sp, r7
 8007180:	bd80      	pop	{r7, pc}
 8007182:	bf00      	nop
 8007184:	40023800 	.word	0x40023800
 8007188:	40021000 	.word	0x40021000
 800718c:	40020800 	.word	0x40020800
 8007190:	40020000 	.word	0x40020000
 8007194:	40020400 	.word	0x40020400
 8007198:	40020c00 	.word	0x40020c00

0800719c <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 800719c:	b480      	push	{r7}
 800719e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80071a0:	e7fe      	b.n	80071a0 <Error_Handler+0x4>
	...

080071a4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80071a4:	b480      	push	{r7}
 80071a6:	b083      	sub	sp, #12
 80071a8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80071aa:	2300      	movs	r3, #0
 80071ac:	607b      	str	r3, [r7, #4]
 80071ae:	4b10      	ldr	r3, [pc, #64]	; (80071f0 <HAL_MspInit+0x4c>)
 80071b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071b2:	4a0f      	ldr	r2, [pc, #60]	; (80071f0 <HAL_MspInit+0x4c>)
 80071b4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80071b8:	6453      	str	r3, [r2, #68]	; 0x44
 80071ba:	4b0d      	ldr	r3, [pc, #52]	; (80071f0 <HAL_MspInit+0x4c>)
 80071bc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80071be:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80071c2:	607b      	str	r3, [r7, #4]
 80071c4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80071c6:	2300      	movs	r3, #0
 80071c8:	603b      	str	r3, [r7, #0]
 80071ca:	4b09      	ldr	r3, [pc, #36]	; (80071f0 <HAL_MspInit+0x4c>)
 80071cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071ce:	4a08      	ldr	r2, [pc, #32]	; (80071f0 <HAL_MspInit+0x4c>)
 80071d0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80071d4:	6413      	str	r3, [r2, #64]	; 0x40
 80071d6:	4b06      	ldr	r3, [pc, #24]	; (80071f0 <HAL_MspInit+0x4c>)
 80071d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80071da:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80071de:	603b      	str	r3, [r7, #0]
 80071e0:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80071e2:	bf00      	nop
 80071e4:	370c      	adds	r7, #12
 80071e6:	46bd      	mov	sp, r7
 80071e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071ec:	4770      	bx	lr
 80071ee:	bf00      	nop
 80071f0:	40023800 	.word	0x40023800

080071f4 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80071f4:	b580      	push	{r7, lr}
 80071f6:	b08c      	sub	sp, #48	; 0x30
 80071f8:	af00      	add	r7, sp, #0
 80071fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80071fc:	f107 031c 	add.w	r3, r7, #28
 8007200:	2200      	movs	r2, #0
 8007202:	601a      	str	r2, [r3, #0]
 8007204:	605a      	str	r2, [r3, #4]
 8007206:	609a      	str	r2, [r3, #8]
 8007208:	60da      	str	r2, [r3, #12]
 800720a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007214:	d12c      	bne.n	8007270 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8007216:	2300      	movs	r3, #0
 8007218:	61bb      	str	r3, [r7, #24]
 800721a:	4b30      	ldr	r3, [pc, #192]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 800721c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800721e:	4a2f      	ldr	r2, [pc, #188]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 8007220:	f043 0301 	orr.w	r3, r3, #1
 8007224:	6413      	str	r3, [r2, #64]	; 0x40
 8007226:	4b2d      	ldr	r3, [pc, #180]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 8007228:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800722a:	f003 0301 	and.w	r3, r3, #1
 800722e:	61bb      	str	r3, [r7, #24]
 8007230:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007232:	2300      	movs	r3, #0
 8007234:	617b      	str	r3, [r7, #20]
 8007236:	4b29      	ldr	r3, [pc, #164]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 8007238:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800723a:	4a28      	ldr	r2, [pc, #160]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 800723c:	f043 0301 	orr.w	r3, r3, #1
 8007240:	6313      	str	r3, [r2, #48]	; 0x30
 8007242:	4b26      	ldr	r3, [pc, #152]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 8007244:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007246:	f003 0301 	and.w	r3, r3, #1
 800724a:	617b      	str	r3, [r7, #20]
 800724c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PA1_TIM2_CH2_ENC_PBO_Pin|PA5_TIM2_CH1_ENC_PAO_Pin;
 800724e:	2322      	movs	r3, #34	; 0x22
 8007250:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007252:	2302      	movs	r3, #2
 8007254:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007256:	2300      	movs	r3, #0
 8007258:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800725a:	2300      	movs	r3, #0
 800725c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 800725e:	2301      	movs	r3, #1
 8007260:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8007262:	f107 031c 	add.w	r3, r7, #28
 8007266:	4619      	mov	r1, r3
 8007268:	481d      	ldr	r0, [pc, #116]	; (80072e0 <HAL_TIM_Base_MspInit+0xec>)
 800726a:	f000 ff6d 	bl	8008148 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800726e:	e030      	b.n	80072d2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	681b      	ldr	r3, [r3, #0]
 8007274:	4a1b      	ldr	r2, [pc, #108]	; (80072e4 <HAL_TIM_Base_MspInit+0xf0>)
 8007276:	4293      	cmp	r3, r2
 8007278:	d12b      	bne.n	80072d2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800727a:	2300      	movs	r3, #0
 800727c:	613b      	str	r3, [r7, #16]
 800727e:	4b17      	ldr	r3, [pc, #92]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 8007280:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007282:	4a16      	ldr	r2, [pc, #88]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 8007284:	f043 0302 	orr.w	r3, r3, #2
 8007288:	6413      	str	r3, [r2, #64]	; 0x40
 800728a:	4b14      	ldr	r3, [pc, #80]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 800728c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800728e:	f003 0302 	and.w	r3, r3, #2
 8007292:	613b      	str	r3, [r7, #16]
 8007294:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8007296:	2300      	movs	r3, #0
 8007298:	60fb      	str	r3, [r7, #12]
 800729a:	4b10      	ldr	r3, [pc, #64]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 800729c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800729e:	4a0f      	ldr	r2, [pc, #60]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 80072a0:	f043 0301 	orr.w	r3, r3, #1
 80072a4:	6313      	str	r3, [r2, #48]	; 0x30
 80072a6:	4b0d      	ldr	r3, [pc, #52]	; (80072dc <HAL_TIM_Base_MspInit+0xe8>)
 80072a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072aa:	f003 0301 	and.w	r3, r3, #1
 80072ae:	60fb      	str	r3, [r7, #12]
 80072b0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PA6_TIM3_CH1_ENC_PZO_Pin;
 80072b2:	2340      	movs	r3, #64	; 0x40
 80072b4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80072b6:	2302      	movs	r3, #2
 80072b8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80072ba:	2300      	movs	r3, #0
 80072bc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80072be:	2300      	movs	r3, #0
 80072c0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80072c2:	2302      	movs	r3, #2
 80072c4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PA6_TIM3_CH1_ENC_PZO_GPIO_Port, &GPIO_InitStruct);
 80072c6:	f107 031c 	add.w	r3, r7, #28
 80072ca:	4619      	mov	r1, r3
 80072cc:	4804      	ldr	r0, [pc, #16]	; (80072e0 <HAL_TIM_Base_MspInit+0xec>)
 80072ce:	f000 ff3b 	bl	8008148 <HAL_GPIO_Init>
}
 80072d2:	bf00      	nop
 80072d4:	3730      	adds	r7, #48	; 0x30
 80072d6:	46bd      	mov	sp, r7
 80072d8:	bd80      	pop	{r7, pc}
 80072da:	bf00      	nop
 80072dc:	40023800 	.word	0x40023800
 80072e0:	40020000 	.word	0x40020000
 80072e4:	40000400 	.word	0x40000400

080072e8 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80072e8:	b580      	push	{r7, lr}
 80072ea:	b08c      	sub	sp, #48	; 0x30
 80072ec:	af00      	add	r7, sp, #0
 80072ee:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80072f0:	f107 031c 	add.w	r3, r7, #28
 80072f4:	2200      	movs	r2, #0
 80072f6:	601a      	str	r2, [r3, #0]
 80072f8:	605a      	str	r2, [r3, #4]
 80072fa:	609a      	str	r2, [r3, #8]
 80072fc:	60da      	str	r2, [r3, #12]
 80072fe:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	4a45      	ldr	r2, [pc, #276]	; (800741c <HAL_UART_MspInit+0x134>)
 8007306:	4293      	cmp	r3, r2
 8007308:	d153      	bne.n	80073b2 <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 800730a:	2300      	movs	r3, #0
 800730c:	61bb      	str	r3, [r7, #24]
 800730e:	4b44      	ldr	r3, [pc, #272]	; (8007420 <HAL_UART_MspInit+0x138>)
 8007310:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007312:	4a43      	ldr	r2, [pc, #268]	; (8007420 <HAL_UART_MspInit+0x138>)
 8007314:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8007318:	6413      	str	r3, [r2, #64]	; 0x40
 800731a:	4b41      	ldr	r3, [pc, #260]	; (8007420 <HAL_UART_MspInit+0x138>)
 800731c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800731e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8007322:	61bb      	str	r3, [r7, #24]
 8007324:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8007326:	2300      	movs	r3, #0
 8007328:	617b      	str	r3, [r7, #20]
 800732a:	4b3d      	ldr	r3, [pc, #244]	; (8007420 <HAL_UART_MspInit+0x138>)
 800732c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800732e:	4a3c      	ldr	r2, [pc, #240]	; (8007420 <HAL_UART_MspInit+0x138>)
 8007330:	f043 0304 	orr.w	r3, r3, #4
 8007334:	6313      	str	r3, [r2, #48]	; 0x30
 8007336:	4b3a      	ldr	r3, [pc, #232]	; (8007420 <HAL_UART_MspInit+0x138>)
 8007338:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800733a:	f003 0304 	and.w	r3, r3, #4
 800733e:	617b      	str	r3, [r7, #20]
 8007340:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8007342:	2300      	movs	r3, #0
 8007344:	613b      	str	r3, [r7, #16]
 8007346:	4b36      	ldr	r3, [pc, #216]	; (8007420 <HAL_UART_MspInit+0x138>)
 8007348:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800734a:	4a35      	ldr	r2, [pc, #212]	; (8007420 <HAL_UART_MspInit+0x138>)
 800734c:	f043 0308 	orr.w	r3, r3, #8
 8007350:	6313      	str	r3, [r2, #48]	; 0x30
 8007352:	4b33      	ldr	r3, [pc, #204]	; (8007420 <HAL_UART_MspInit+0x138>)
 8007354:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007356:	f003 0308 	and.w	r3, r3, #8
 800735a:	613b      	str	r3, [r7, #16]
 800735c:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = PC12_UART5_TX_485_MCU_DRV_Pin;
 800735e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8007362:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007364:	2302      	movs	r3, #2
 8007366:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007368:	2300      	movs	r3, #0
 800736a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800736c:	2303      	movs	r3, #3
 800736e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007370:	2308      	movs	r3, #8
 8007372:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PC12_UART5_TX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8007374:	f107 031c 	add.w	r3, r7, #28
 8007378:	4619      	mov	r1, r3
 800737a:	482a      	ldr	r0, [pc, #168]	; (8007424 <HAL_UART_MspInit+0x13c>)
 800737c:	f000 fee4 	bl	8008148 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD2_UART5_RX_485_MCU_DRV_Pin;
 8007380:	2304      	movs	r3, #4
 8007382:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8007384:	2302      	movs	r3, #2
 8007386:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8007388:	2300      	movs	r3, #0
 800738a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800738c:	2303      	movs	r3, #3
 800738e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8007390:	2308      	movs	r3, #8
 8007392:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD2_UART5_RX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8007394:	f107 031c 	add.w	r3, r7, #28
 8007398:	4619      	mov	r1, r3
 800739a:	4823      	ldr	r0, [pc, #140]	; (8007428 <HAL_UART_MspInit+0x140>)
 800739c:	f000 fed4 	bl	8008148 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 80073a0:	2200      	movs	r2, #0
 80073a2:	2100      	movs	r1, #0
 80073a4:	2035      	movs	r0, #53	; 0x35
 80073a6:	f000 fb1e 	bl	80079e6 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 80073aa:	2035      	movs	r0, #53	; 0x35
 80073ac:	f000 fb37 	bl	8007a1e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80073b0:	e030      	b.n	8007414 <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 80073b2:	687b      	ldr	r3, [r7, #4]
 80073b4:	681b      	ldr	r3, [r3, #0]
 80073b6:	4a1d      	ldr	r2, [pc, #116]	; (800742c <HAL_UART_MspInit+0x144>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d12b      	bne.n	8007414 <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80073bc:	2300      	movs	r3, #0
 80073be:	60fb      	str	r3, [r7, #12]
 80073c0:	4b17      	ldr	r3, [pc, #92]	; (8007420 <HAL_UART_MspInit+0x138>)
 80073c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073c4:	4a16      	ldr	r2, [pc, #88]	; (8007420 <HAL_UART_MspInit+0x138>)
 80073c6:	f043 0320 	orr.w	r3, r3, #32
 80073ca:	6453      	str	r3, [r2, #68]	; 0x44
 80073cc:	4b14      	ldr	r3, [pc, #80]	; (8007420 <HAL_UART_MspInit+0x138>)
 80073ce:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80073d0:	f003 0320 	and.w	r3, r3, #32
 80073d4:	60fb      	str	r3, [r7, #12]
 80073d6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80073d8:	2300      	movs	r3, #0
 80073da:	60bb      	str	r3, [r7, #8]
 80073dc:	4b10      	ldr	r3, [pc, #64]	; (8007420 <HAL_UART_MspInit+0x138>)
 80073de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073e0:	4a0f      	ldr	r2, [pc, #60]	; (8007420 <HAL_UART_MspInit+0x138>)
 80073e2:	f043 0304 	orr.w	r3, r3, #4
 80073e6:	6313      	str	r3, [r2, #48]	; 0x30
 80073e8:	4b0d      	ldr	r3, [pc, #52]	; (8007420 <HAL_UART_MspInit+0x138>)
 80073ea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073ec:	f003 0304 	and.w	r3, r3, #4
 80073f0:	60bb      	str	r3, [r7, #8]
 80073f2:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80073f4:	23c0      	movs	r3, #192	; 0xc0
 80073f6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80073f8:	2302      	movs	r3, #2
 80073fa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80073fc:	2300      	movs	r3, #0
 80073fe:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8007400:	2303      	movs	r3, #3
 8007402:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8007404:	2308      	movs	r3, #8
 8007406:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8007408:	f107 031c 	add.w	r3, r7, #28
 800740c:	4619      	mov	r1, r3
 800740e:	4805      	ldr	r0, [pc, #20]	; (8007424 <HAL_UART_MspInit+0x13c>)
 8007410:	f000 fe9a 	bl	8008148 <HAL_GPIO_Init>
}
 8007414:	bf00      	nop
 8007416:	3730      	adds	r7, #48	; 0x30
 8007418:	46bd      	mov	sp, r7
 800741a:	bd80      	pop	{r7, pc}
 800741c:	40005000 	.word	0x40005000
 8007420:	40023800 	.word	0x40023800
 8007424:	40020800 	.word	0x40020800
 8007428:	40020c00 	.word	0x40020c00
 800742c:	40011400 	.word	0x40011400

08007430 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8007430:	b480      	push	{r7}
 8007432:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8007434:	e7fe      	b.n	8007434 <NMI_Handler+0x4>

08007436 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8007436:	b480      	push	{r7}
 8007438:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800743a:	e7fe      	b.n	800743a <HardFault_Handler+0x4>

0800743c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800743c:	b480      	push	{r7}
 800743e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8007440:	e7fe      	b.n	8007440 <MemManage_Handler+0x4>

08007442 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8007442:	b480      	push	{r7}
 8007444:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8007446:	e7fe      	b.n	8007446 <BusFault_Handler+0x4>

08007448 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8007448:	b480      	push	{r7}
 800744a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 800744c:	e7fe      	b.n	800744c <UsageFault_Handler+0x4>

0800744e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800744e:	b480      	push	{r7}
 8007450:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8007452:	bf00      	nop
 8007454:	46bd      	mov	sp, r7
 8007456:	f85d 7b04 	ldr.w	r7, [sp], #4
 800745a:	4770      	bx	lr

0800745c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800745c:	b480      	push	{r7}
 800745e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8007460:	bf00      	nop
 8007462:	46bd      	mov	sp, r7
 8007464:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007468:	4770      	bx	lr

0800746a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800746a:	b480      	push	{r7}
 800746c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800746e:	bf00      	nop
 8007470:	46bd      	mov	sp, r7
 8007472:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007476:	4770      	bx	lr

08007478 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8007478:	b580      	push	{r7, lr}
 800747a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800747c:	f000 f97e 	bl	800777c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8007480:	bf00      	nop
 8007482:	bd80      	pop	{r7, pc}

08007484 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8007488:	4802      	ldr	r0, [pc, #8]	; (8007494 <TIM2_IRQHandler+0x10>)
 800748a:	f001 fde5 	bl	8009058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800748e:	bf00      	nop
 8007490:	bd80      	pop	{r7, pc}
 8007492:	bf00      	nop
 8007494:	20000224 	.word	0x20000224

08007498 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8007498:	b580      	push	{r7, lr}
 800749a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 800749c:	4802      	ldr	r0, [pc, #8]	; (80074a8 <TIM3_IRQHandler+0x10>)
 800749e:	f001 fddb 	bl	8009058 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80074a2:	bf00      	nop
 80074a4:	bd80      	pop	{r7, pc}
 80074a6:	bf00      	nop
 80074a8:	2000026c 	.word	0x2000026c

080074ac <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 80074ac:	b580      	push	{r7, lr}
 80074ae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 80074b0:	4802      	ldr	r0, [pc, #8]	; (80074bc <UART5_IRQHandler+0x10>)
 80074b2:	f002 fc69 	bl	8009d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 80074b6:	bf00      	nop
 80074b8:	bd80      	pop	{r7, pc}
 80074ba:	bf00      	nop
 80074bc:	200002b4 	.word	0x200002b4

080074c0 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80074c0:	b580      	push	{r7, lr}
 80074c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80074c4:	4802      	ldr	r0, [pc, #8]	; (80074d0 <USART6_IRQHandler+0x10>)
 80074c6:	f002 fc5f 	bl	8009d88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80074ca:	bf00      	nop
 80074cc:	bd80      	pop	{r7, pc}
 80074ce:	bf00      	nop
 80074d0:	200002f8 	.word	0x200002f8

080074d4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80074d4:	b480      	push	{r7}
 80074d6:	af00      	add	r7, sp, #0
	return 1;
 80074d8:	2301      	movs	r3, #1
}
 80074da:	4618      	mov	r0, r3
 80074dc:	46bd      	mov	sp, r7
 80074de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80074e2:	4770      	bx	lr

080074e4 <_kill>:

int _kill(int pid, int sig)
{
 80074e4:	b580      	push	{r7, lr}
 80074e6:	b082      	sub	sp, #8
 80074e8:	af00      	add	r7, sp, #0
 80074ea:	6078      	str	r0, [r7, #4]
 80074ec:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80074ee:	f003 fbb7 	bl	800ac60 <__errno>
 80074f2:	4603      	mov	r3, r0
 80074f4:	2216      	movs	r2, #22
 80074f6:	601a      	str	r2, [r3, #0]
	return -1;
 80074f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80074fc:	4618      	mov	r0, r3
 80074fe:	3708      	adds	r7, #8
 8007500:	46bd      	mov	sp, r7
 8007502:	bd80      	pop	{r7, pc}

08007504 <_exit>:

void _exit (int status)
{
 8007504:	b580      	push	{r7, lr}
 8007506:	b082      	sub	sp, #8
 8007508:	af00      	add	r7, sp, #0
 800750a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800750c:	f04f 31ff 	mov.w	r1, #4294967295
 8007510:	6878      	ldr	r0, [r7, #4]
 8007512:	f7ff ffe7 	bl	80074e4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8007516:	e7fe      	b.n	8007516 <_exit+0x12>

08007518 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8007518:	b580      	push	{r7, lr}
 800751a:	b086      	sub	sp, #24
 800751c:	af00      	add	r7, sp, #0
 800751e:	60f8      	str	r0, [r7, #12]
 8007520:	60b9      	str	r1, [r7, #8]
 8007522:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007524:	2300      	movs	r3, #0
 8007526:	617b      	str	r3, [r7, #20]
 8007528:	e00a      	b.n	8007540 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 800752a:	f3af 8000 	nop.w
 800752e:	4601      	mov	r1, r0
 8007530:	68bb      	ldr	r3, [r7, #8]
 8007532:	1c5a      	adds	r2, r3, #1
 8007534:	60ba      	str	r2, [r7, #8]
 8007536:	b2ca      	uxtb	r2, r1
 8007538:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800753a:	697b      	ldr	r3, [r7, #20]
 800753c:	3301      	adds	r3, #1
 800753e:	617b      	str	r3, [r7, #20]
 8007540:	697a      	ldr	r2, [r7, #20]
 8007542:	687b      	ldr	r3, [r7, #4]
 8007544:	429a      	cmp	r2, r3
 8007546:	dbf0      	blt.n	800752a <_read+0x12>
	}

return len;
 8007548:	687b      	ldr	r3, [r7, #4]
}
 800754a:	4618      	mov	r0, r3
 800754c:	3718      	adds	r7, #24
 800754e:	46bd      	mov	sp, r7
 8007550:	bd80      	pop	{r7, pc}

08007552 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8007552:	b580      	push	{r7, lr}
 8007554:	b086      	sub	sp, #24
 8007556:	af00      	add	r7, sp, #0
 8007558:	60f8      	str	r0, [r7, #12]
 800755a:	60b9      	str	r1, [r7, #8]
 800755c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800755e:	2300      	movs	r3, #0
 8007560:	617b      	str	r3, [r7, #20]
 8007562:	e009      	b.n	8007578 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8007564:	68bb      	ldr	r3, [r7, #8]
 8007566:	1c5a      	adds	r2, r3, #1
 8007568:	60ba      	str	r2, [r7, #8]
 800756a:	781b      	ldrb	r3, [r3, #0]
 800756c:	4618      	mov	r0, r3
 800756e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8007572:	697b      	ldr	r3, [r7, #20]
 8007574:	3301      	adds	r3, #1
 8007576:	617b      	str	r3, [r7, #20]
 8007578:	697a      	ldr	r2, [r7, #20]
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	429a      	cmp	r2, r3
 800757e:	dbf1      	blt.n	8007564 <_write+0x12>
	}
	return len;
 8007580:	687b      	ldr	r3, [r7, #4]
}
 8007582:	4618      	mov	r0, r3
 8007584:	3718      	adds	r7, #24
 8007586:	46bd      	mov	sp, r7
 8007588:	bd80      	pop	{r7, pc}

0800758a <_close>:

int _close(int file)
{
 800758a:	b480      	push	{r7}
 800758c:	b083      	sub	sp, #12
 800758e:	af00      	add	r7, sp, #0
 8007590:	6078      	str	r0, [r7, #4]
	return -1;
 8007592:	f04f 33ff 	mov.w	r3, #4294967295
}
 8007596:	4618      	mov	r0, r3
 8007598:	370c      	adds	r7, #12
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr

080075a2 <_fstat>:


int _fstat(int file, struct stat *st)
{
 80075a2:	b480      	push	{r7}
 80075a4:	b083      	sub	sp, #12
 80075a6:	af00      	add	r7, sp, #0
 80075a8:	6078      	str	r0, [r7, #4]
 80075aa:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 80075ac:	683b      	ldr	r3, [r7, #0]
 80075ae:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80075b2:	605a      	str	r2, [r3, #4]
	return 0;
 80075b4:	2300      	movs	r3, #0
}
 80075b6:	4618      	mov	r0, r3
 80075b8:	370c      	adds	r7, #12
 80075ba:	46bd      	mov	sp, r7
 80075bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075c0:	4770      	bx	lr

080075c2 <_isatty>:

int _isatty(int file)
{
 80075c2:	b480      	push	{r7}
 80075c4:	b083      	sub	sp, #12
 80075c6:	af00      	add	r7, sp, #0
 80075c8:	6078      	str	r0, [r7, #4]
	return 1;
 80075ca:	2301      	movs	r3, #1
}
 80075cc:	4618      	mov	r0, r3
 80075ce:	370c      	adds	r7, #12
 80075d0:	46bd      	mov	sp, r7
 80075d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075d6:	4770      	bx	lr

080075d8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80075d8:	b480      	push	{r7}
 80075da:	b085      	sub	sp, #20
 80075dc:	af00      	add	r7, sp, #0
 80075de:	60f8      	str	r0, [r7, #12]
 80075e0:	60b9      	str	r1, [r7, #8]
 80075e2:	607a      	str	r2, [r7, #4]
	return 0;
 80075e4:	2300      	movs	r3, #0
}
 80075e6:	4618      	mov	r0, r3
 80075e8:	3714      	adds	r7, #20
 80075ea:	46bd      	mov	sp, r7
 80075ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075f0:	4770      	bx	lr
	...

080075f4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80075f4:	b580      	push	{r7, lr}
 80075f6:	b086      	sub	sp, #24
 80075f8:	af00      	add	r7, sp, #0
 80075fa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80075fc:	4a14      	ldr	r2, [pc, #80]	; (8007650 <_sbrk+0x5c>)
 80075fe:	4b15      	ldr	r3, [pc, #84]	; (8007654 <_sbrk+0x60>)
 8007600:	1ad3      	subs	r3, r2, r3
 8007602:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8007608:	4b13      	ldr	r3, [pc, #76]	; (8007658 <_sbrk+0x64>)
 800760a:	681b      	ldr	r3, [r3, #0]
 800760c:	2b00      	cmp	r3, #0
 800760e:	d102      	bne.n	8007616 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8007610:	4b11      	ldr	r3, [pc, #68]	; (8007658 <_sbrk+0x64>)
 8007612:	4a12      	ldr	r2, [pc, #72]	; (800765c <_sbrk+0x68>)
 8007614:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8007616:	4b10      	ldr	r3, [pc, #64]	; (8007658 <_sbrk+0x64>)
 8007618:	681a      	ldr	r2, [r3, #0]
 800761a:	687b      	ldr	r3, [r7, #4]
 800761c:	4413      	add	r3, r2
 800761e:	693a      	ldr	r2, [r7, #16]
 8007620:	429a      	cmp	r2, r3
 8007622:	d207      	bcs.n	8007634 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8007624:	f003 fb1c 	bl	800ac60 <__errno>
 8007628:	4603      	mov	r3, r0
 800762a:	220c      	movs	r2, #12
 800762c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800762e:	f04f 33ff 	mov.w	r3, #4294967295
 8007632:	e009      	b.n	8007648 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8007634:	4b08      	ldr	r3, [pc, #32]	; (8007658 <_sbrk+0x64>)
 8007636:	681b      	ldr	r3, [r3, #0]
 8007638:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800763a:	4b07      	ldr	r3, [pc, #28]	; (8007658 <_sbrk+0x64>)
 800763c:	681a      	ldr	r2, [r3, #0]
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	4413      	add	r3, r2
 8007642:	4a05      	ldr	r2, [pc, #20]	; (8007658 <_sbrk+0x64>)
 8007644:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8007646:	68fb      	ldr	r3, [r7, #12]
}
 8007648:	4618      	mov	r0, r3
 800764a:	3718      	adds	r7, #24
 800764c:	46bd      	mov	sp, r7
 800764e:	bd80      	pop	{r7, pc}
 8007650:	20020000 	.word	0x20020000
 8007654:	00000400 	.word	0x00000400
 8007658:	20000548 	.word	0x20000548
 800765c:	20000580 	.word	0x20000580

08007660 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8007660:	b480      	push	{r7}
 8007662:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8007664:	4b06      	ldr	r3, [pc, #24]	; (8007680 <SystemInit+0x20>)
 8007666:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800766a:	4a05      	ldr	r2, [pc, #20]	; (8007680 <SystemInit+0x20>)
 800766c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8007670:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8007674:	bf00      	nop
 8007676:	46bd      	mov	sp, r7
 8007678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800767c:	4770      	bx	lr
 800767e:	bf00      	nop
 8007680:	e000ed00 	.word	0xe000ed00

08007684 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8007684:	f8df d034 	ldr.w	sp, [pc, #52]	; 80076bc <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8007688:	480d      	ldr	r0, [pc, #52]	; (80076c0 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800768a:	490e      	ldr	r1, [pc, #56]	; (80076c4 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800768c:	4a0e      	ldr	r2, [pc, #56]	; (80076c8 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800768e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8007690:	e002      	b.n	8007698 <LoopCopyDataInit>

08007692 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8007692:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8007694:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8007696:	3304      	adds	r3, #4

08007698 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8007698:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800769a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800769c:	d3f9      	bcc.n	8007692 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800769e:	4a0b      	ldr	r2, [pc, #44]	; (80076cc <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 80076a0:	4c0b      	ldr	r4, [pc, #44]	; (80076d0 <LoopFillZerobss+0x26>)
  movs r3, #0
 80076a2:	2300      	movs	r3, #0
  b LoopFillZerobss
 80076a4:	e001      	b.n	80076aa <LoopFillZerobss>

080076a6 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80076a6:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80076a8:	3204      	adds	r2, #4

080076aa <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80076aa:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80076ac:	d3fb      	bcc.n	80076a6 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 80076ae:	f7ff ffd7 	bl	8007660 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 80076b2:	f003 fadb 	bl	800ac6c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80076b6:	f7fe fa8f 	bl	8005bd8 <main>
  bx  lr    
 80076ba:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80076bc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80076c0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80076c4:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 80076c8:	0800fe00 	.word	0x0800fe00
  ldr r2, =_sbss
 80076cc:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 80076d0:	20000580 	.word	0x20000580

080076d4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80076d4:	e7fe      	b.n	80076d4 <ADC_IRQHandler>
	...

080076d8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80076d8:	b580      	push	{r7, lr}
 80076da:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80076dc:	4b0e      	ldr	r3, [pc, #56]	; (8007718 <HAL_Init+0x40>)
 80076de:	681b      	ldr	r3, [r3, #0]
 80076e0:	4a0d      	ldr	r2, [pc, #52]	; (8007718 <HAL_Init+0x40>)
 80076e2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80076e6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80076e8:	4b0b      	ldr	r3, [pc, #44]	; (8007718 <HAL_Init+0x40>)
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	4a0a      	ldr	r2, [pc, #40]	; (8007718 <HAL_Init+0x40>)
 80076ee:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80076f2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80076f4:	4b08      	ldr	r3, [pc, #32]	; (8007718 <HAL_Init+0x40>)
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	4a07      	ldr	r2, [pc, #28]	; (8007718 <HAL_Init+0x40>)
 80076fa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80076fe:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8007700:	2003      	movs	r0, #3
 8007702:	f000 f965 	bl	80079d0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8007706:	2000      	movs	r0, #0
 8007708:	f000 f808 	bl	800771c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800770c:	f7ff fd4a 	bl	80071a4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8007710:	2300      	movs	r3, #0
}
 8007712:	4618      	mov	r0, r3
 8007714:	bd80      	pop	{r7, pc}
 8007716:	bf00      	nop
 8007718:	40023c00 	.word	0x40023c00

0800771c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800771c:	b580      	push	{r7, lr}
 800771e:	b082      	sub	sp, #8
 8007720:	af00      	add	r7, sp, #0
 8007722:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8007724:	4b12      	ldr	r3, [pc, #72]	; (8007770 <HAL_InitTick+0x54>)
 8007726:	681a      	ldr	r2, [r3, #0]
 8007728:	4b12      	ldr	r3, [pc, #72]	; (8007774 <HAL_InitTick+0x58>)
 800772a:	781b      	ldrb	r3, [r3, #0]
 800772c:	4619      	mov	r1, r3
 800772e:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8007732:	fbb3 f3f1 	udiv	r3, r3, r1
 8007736:	fbb2 f3f3 	udiv	r3, r2, r3
 800773a:	4618      	mov	r0, r3
 800773c:	f000 f981 	bl	8007a42 <HAL_SYSTICK_Config>
 8007740:	4603      	mov	r3, r0
 8007742:	2b00      	cmp	r3, #0
 8007744:	d001      	beq.n	800774a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8007746:	2301      	movs	r3, #1
 8007748:	e00e      	b.n	8007768 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	2b0f      	cmp	r3, #15
 800774e:	d80a      	bhi.n	8007766 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8007750:	2200      	movs	r2, #0
 8007752:	6879      	ldr	r1, [r7, #4]
 8007754:	f04f 30ff 	mov.w	r0, #4294967295
 8007758:	f000 f945 	bl	80079e6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800775c:	4a06      	ldr	r2, [pc, #24]	; (8007778 <HAL_InitTick+0x5c>)
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8007762:	2300      	movs	r3, #0
 8007764:	e000      	b.n	8007768 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8007766:	2301      	movs	r3, #1
}
 8007768:	4618      	mov	r0, r3
 800776a:	3708      	adds	r7, #8
 800776c:	46bd      	mov	sp, r7
 800776e:	bd80      	pop	{r7, pc}
 8007770:	20000014 	.word	0x20000014
 8007774:	2000001c 	.word	0x2000001c
 8007778:	20000018 	.word	0x20000018

0800777c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800777c:	b480      	push	{r7}
 800777e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8007780:	4b06      	ldr	r3, [pc, #24]	; (800779c <HAL_IncTick+0x20>)
 8007782:	781b      	ldrb	r3, [r3, #0]
 8007784:	461a      	mov	r2, r3
 8007786:	4b06      	ldr	r3, [pc, #24]	; (80077a0 <HAL_IncTick+0x24>)
 8007788:	681b      	ldr	r3, [r3, #0]
 800778a:	4413      	add	r3, r2
 800778c:	4a04      	ldr	r2, [pc, #16]	; (80077a0 <HAL_IncTick+0x24>)
 800778e:	6013      	str	r3, [r2, #0]
}
 8007790:	bf00      	nop
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr
 800779a:	bf00      	nop
 800779c:	2000001c 	.word	0x2000001c
 80077a0:	2000054c 	.word	0x2000054c

080077a4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80077a4:	b480      	push	{r7}
 80077a6:	af00      	add	r7, sp, #0
  return uwTick;
 80077a8:	4b03      	ldr	r3, [pc, #12]	; (80077b8 <HAL_GetTick+0x14>)
 80077aa:	681b      	ldr	r3, [r3, #0]
}
 80077ac:	4618      	mov	r0, r3
 80077ae:	46bd      	mov	sp, r7
 80077b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077b4:	4770      	bx	lr
 80077b6:	bf00      	nop
 80077b8:	2000054c 	.word	0x2000054c

080077bc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80077bc:	b580      	push	{r7, lr}
 80077be:	b084      	sub	sp, #16
 80077c0:	af00      	add	r7, sp, #0
 80077c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80077c4:	f7ff ffee 	bl	80077a4 <HAL_GetTick>
 80077c8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80077ce:	68fb      	ldr	r3, [r7, #12]
 80077d0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80077d4:	d005      	beq.n	80077e2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80077d6:	4b0a      	ldr	r3, [pc, #40]	; (8007800 <HAL_Delay+0x44>)
 80077d8:	781b      	ldrb	r3, [r3, #0]
 80077da:	461a      	mov	r2, r3
 80077dc:	68fb      	ldr	r3, [r7, #12]
 80077de:	4413      	add	r3, r2
 80077e0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80077e2:	bf00      	nop
 80077e4:	f7ff ffde 	bl	80077a4 <HAL_GetTick>
 80077e8:	4602      	mov	r2, r0
 80077ea:	68bb      	ldr	r3, [r7, #8]
 80077ec:	1ad3      	subs	r3, r2, r3
 80077ee:	68fa      	ldr	r2, [r7, #12]
 80077f0:	429a      	cmp	r2, r3
 80077f2:	d8f7      	bhi.n	80077e4 <HAL_Delay+0x28>
  {
  }
}
 80077f4:	bf00      	nop
 80077f6:	bf00      	nop
 80077f8:	3710      	adds	r7, #16
 80077fa:	46bd      	mov	sp, r7
 80077fc:	bd80      	pop	{r7, pc}
 80077fe:	bf00      	nop
 8007800:	2000001c 	.word	0x2000001c

08007804 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8007804:	b480      	push	{r7}
 8007806:	b085      	sub	sp, #20
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	f003 0307 	and.w	r3, r3, #7
 8007812:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8007814:	4b0c      	ldr	r3, [pc, #48]	; (8007848 <__NVIC_SetPriorityGrouping+0x44>)
 8007816:	68db      	ldr	r3, [r3, #12]
 8007818:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800781a:	68ba      	ldr	r2, [r7, #8]
 800781c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8007820:	4013      	ands	r3, r2
 8007822:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8007824:	68fb      	ldr	r3, [r7, #12]
 8007826:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8007828:	68bb      	ldr	r3, [r7, #8]
 800782a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800782c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8007830:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8007834:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8007836:	4a04      	ldr	r2, [pc, #16]	; (8007848 <__NVIC_SetPriorityGrouping+0x44>)
 8007838:	68bb      	ldr	r3, [r7, #8]
 800783a:	60d3      	str	r3, [r2, #12]
}
 800783c:	bf00      	nop
 800783e:	3714      	adds	r7, #20
 8007840:	46bd      	mov	sp, r7
 8007842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007846:	4770      	bx	lr
 8007848:	e000ed00 	.word	0xe000ed00

0800784c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800784c:	b480      	push	{r7}
 800784e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8007850:	4b04      	ldr	r3, [pc, #16]	; (8007864 <__NVIC_GetPriorityGrouping+0x18>)
 8007852:	68db      	ldr	r3, [r3, #12]
 8007854:	0a1b      	lsrs	r3, r3, #8
 8007856:	f003 0307 	and.w	r3, r3, #7
}
 800785a:	4618      	mov	r0, r3
 800785c:	46bd      	mov	sp, r7
 800785e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007862:	4770      	bx	lr
 8007864:	e000ed00 	.word	0xe000ed00

08007868 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007868:	b480      	push	{r7}
 800786a:	b083      	sub	sp, #12
 800786c:	af00      	add	r7, sp, #0
 800786e:	4603      	mov	r3, r0
 8007870:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8007872:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007876:	2b00      	cmp	r3, #0
 8007878:	db0b      	blt.n	8007892 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800787a:	79fb      	ldrb	r3, [r7, #7]
 800787c:	f003 021f 	and.w	r2, r3, #31
 8007880:	4907      	ldr	r1, [pc, #28]	; (80078a0 <__NVIC_EnableIRQ+0x38>)
 8007882:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007886:	095b      	lsrs	r3, r3, #5
 8007888:	2001      	movs	r0, #1
 800788a:	fa00 f202 	lsl.w	r2, r0, r2
 800788e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8007892:	bf00      	nop
 8007894:	370c      	adds	r7, #12
 8007896:	46bd      	mov	sp, r7
 8007898:	f85d 7b04 	ldr.w	r7, [sp], #4
 800789c:	4770      	bx	lr
 800789e:	bf00      	nop
 80078a0:	e000e100 	.word	0xe000e100

080078a4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 80078a4:	b480      	push	{r7}
 80078a6:	b083      	sub	sp, #12
 80078a8:	af00      	add	r7, sp, #0
 80078aa:	4603      	mov	r3, r0
 80078ac:	6039      	str	r1, [r7, #0]
 80078ae:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80078b0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078b4:	2b00      	cmp	r3, #0
 80078b6:	db0a      	blt.n	80078ce <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078b8:	683b      	ldr	r3, [r7, #0]
 80078ba:	b2da      	uxtb	r2, r3
 80078bc:	490c      	ldr	r1, [pc, #48]	; (80078f0 <__NVIC_SetPriority+0x4c>)
 80078be:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80078c2:	0112      	lsls	r2, r2, #4
 80078c4:	b2d2      	uxtb	r2, r2
 80078c6:	440b      	add	r3, r1
 80078c8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80078cc:	e00a      	b.n	80078e4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80078ce:	683b      	ldr	r3, [r7, #0]
 80078d0:	b2da      	uxtb	r2, r3
 80078d2:	4908      	ldr	r1, [pc, #32]	; (80078f4 <__NVIC_SetPriority+0x50>)
 80078d4:	79fb      	ldrb	r3, [r7, #7]
 80078d6:	f003 030f 	and.w	r3, r3, #15
 80078da:	3b04      	subs	r3, #4
 80078dc:	0112      	lsls	r2, r2, #4
 80078de:	b2d2      	uxtb	r2, r2
 80078e0:	440b      	add	r3, r1
 80078e2:	761a      	strb	r2, [r3, #24]
}
 80078e4:	bf00      	nop
 80078e6:	370c      	adds	r7, #12
 80078e8:	46bd      	mov	sp, r7
 80078ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80078ee:	4770      	bx	lr
 80078f0:	e000e100 	.word	0xe000e100
 80078f4:	e000ed00 	.word	0xe000ed00

080078f8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80078f8:	b480      	push	{r7}
 80078fa:	b089      	sub	sp, #36	; 0x24
 80078fc:	af00      	add	r7, sp, #0
 80078fe:	60f8      	str	r0, [r7, #12]
 8007900:	60b9      	str	r1, [r7, #8]
 8007902:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8007904:	68fb      	ldr	r3, [r7, #12]
 8007906:	f003 0307 	and.w	r3, r3, #7
 800790a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800790c:	69fb      	ldr	r3, [r7, #28]
 800790e:	f1c3 0307 	rsb	r3, r3, #7
 8007912:	2b04      	cmp	r3, #4
 8007914:	bf28      	it	cs
 8007916:	2304      	movcs	r3, #4
 8007918:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800791a:	69fb      	ldr	r3, [r7, #28]
 800791c:	3304      	adds	r3, #4
 800791e:	2b06      	cmp	r3, #6
 8007920:	d902      	bls.n	8007928 <NVIC_EncodePriority+0x30>
 8007922:	69fb      	ldr	r3, [r7, #28]
 8007924:	3b03      	subs	r3, #3
 8007926:	e000      	b.n	800792a <NVIC_EncodePriority+0x32>
 8007928:	2300      	movs	r3, #0
 800792a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800792c:	f04f 32ff 	mov.w	r2, #4294967295
 8007930:	69bb      	ldr	r3, [r7, #24]
 8007932:	fa02 f303 	lsl.w	r3, r2, r3
 8007936:	43da      	mvns	r2, r3
 8007938:	68bb      	ldr	r3, [r7, #8]
 800793a:	401a      	ands	r2, r3
 800793c:	697b      	ldr	r3, [r7, #20]
 800793e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8007940:	f04f 31ff 	mov.w	r1, #4294967295
 8007944:	697b      	ldr	r3, [r7, #20]
 8007946:	fa01 f303 	lsl.w	r3, r1, r3
 800794a:	43d9      	mvns	r1, r3
 800794c:	687b      	ldr	r3, [r7, #4]
 800794e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8007950:	4313      	orrs	r3, r2
         );
}
 8007952:	4618      	mov	r0, r3
 8007954:	3724      	adds	r7, #36	; 0x24
 8007956:	46bd      	mov	sp, r7
 8007958:	f85d 7b04 	ldr.w	r7, [sp], #4
 800795c:	4770      	bx	lr
	...

08007960 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8007960:	b480      	push	{r7}
 8007962:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8007964:	f3bf 8f4f 	dsb	sy
}
 8007968:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800796a:	4b06      	ldr	r3, [pc, #24]	; (8007984 <__NVIC_SystemReset+0x24>)
 800796c:	68db      	ldr	r3, [r3, #12]
 800796e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8007972:	4904      	ldr	r1, [pc, #16]	; (8007984 <__NVIC_SystemReset+0x24>)
 8007974:	4b04      	ldr	r3, [pc, #16]	; (8007988 <__NVIC_SystemReset+0x28>)
 8007976:	4313      	orrs	r3, r2
 8007978:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800797a:	f3bf 8f4f 	dsb	sy
}
 800797e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8007980:	bf00      	nop
 8007982:	e7fd      	b.n	8007980 <__NVIC_SystemReset+0x20>
 8007984:	e000ed00 	.word	0xe000ed00
 8007988:	05fa0004 	.word	0x05fa0004

0800798c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800798c:	b580      	push	{r7, lr}
 800798e:	b082      	sub	sp, #8
 8007990:	af00      	add	r7, sp, #0
 8007992:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	3b01      	subs	r3, #1
 8007998:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800799c:	d301      	bcc.n	80079a2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800799e:	2301      	movs	r3, #1
 80079a0:	e00f      	b.n	80079c2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80079a2:	4a0a      	ldr	r2, [pc, #40]	; (80079cc <SysTick_Config+0x40>)
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	3b01      	subs	r3, #1
 80079a8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80079aa:	210f      	movs	r1, #15
 80079ac:	f04f 30ff 	mov.w	r0, #4294967295
 80079b0:	f7ff ff78 	bl	80078a4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80079b4:	4b05      	ldr	r3, [pc, #20]	; (80079cc <SysTick_Config+0x40>)
 80079b6:	2200      	movs	r2, #0
 80079b8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80079ba:	4b04      	ldr	r3, [pc, #16]	; (80079cc <SysTick_Config+0x40>)
 80079bc:	2207      	movs	r2, #7
 80079be:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80079c0:	2300      	movs	r3, #0
}
 80079c2:	4618      	mov	r0, r3
 80079c4:	3708      	adds	r7, #8
 80079c6:	46bd      	mov	sp, r7
 80079c8:	bd80      	pop	{r7, pc}
 80079ca:	bf00      	nop
 80079cc:	e000e010 	.word	0xe000e010

080079d0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80079d0:	b580      	push	{r7, lr}
 80079d2:	b082      	sub	sp, #8
 80079d4:	af00      	add	r7, sp, #0
 80079d6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80079d8:	6878      	ldr	r0, [r7, #4]
 80079da:	f7ff ff13 	bl	8007804 <__NVIC_SetPriorityGrouping>
}
 80079de:	bf00      	nop
 80079e0:	3708      	adds	r7, #8
 80079e2:	46bd      	mov	sp, r7
 80079e4:	bd80      	pop	{r7, pc}

080079e6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80079e6:	b580      	push	{r7, lr}
 80079e8:	b086      	sub	sp, #24
 80079ea:	af00      	add	r7, sp, #0
 80079ec:	4603      	mov	r3, r0
 80079ee:	60b9      	str	r1, [r7, #8]
 80079f0:	607a      	str	r2, [r7, #4]
 80079f2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80079f4:	2300      	movs	r3, #0
 80079f6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80079f8:	f7ff ff28 	bl	800784c <__NVIC_GetPriorityGrouping>
 80079fc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80079fe:	687a      	ldr	r2, [r7, #4]
 8007a00:	68b9      	ldr	r1, [r7, #8]
 8007a02:	6978      	ldr	r0, [r7, #20]
 8007a04:	f7ff ff78 	bl	80078f8 <NVIC_EncodePriority>
 8007a08:	4602      	mov	r2, r0
 8007a0a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007a0e:	4611      	mov	r1, r2
 8007a10:	4618      	mov	r0, r3
 8007a12:	f7ff ff47 	bl	80078a4 <__NVIC_SetPriority>
}
 8007a16:	bf00      	nop
 8007a18:	3718      	adds	r7, #24
 8007a1a:	46bd      	mov	sp, r7
 8007a1c:	bd80      	pop	{r7, pc}

08007a1e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8007a1e:	b580      	push	{r7, lr}
 8007a20:	b082      	sub	sp, #8
 8007a22:	af00      	add	r7, sp, #0
 8007a24:	4603      	mov	r3, r0
 8007a26:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8007a28:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8007a2c:	4618      	mov	r0, r3
 8007a2e:	f7ff ff1b 	bl	8007868 <__NVIC_EnableIRQ>
}
 8007a32:	bf00      	nop
 8007a34:	3708      	adds	r7, #8
 8007a36:	46bd      	mov	sp, r7
 8007a38:	bd80      	pop	{r7, pc}

08007a3a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8007a3a:	b580      	push	{r7, lr}
 8007a3c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8007a3e:	f7ff ff8f 	bl	8007960 <__NVIC_SystemReset>

08007a42 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8007a42:	b580      	push	{r7, lr}
 8007a44:	b082      	sub	sp, #8
 8007a46:	af00      	add	r7, sp, #0
 8007a48:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f7ff ff9e 	bl	800798c <SysTick_Config>
 8007a50:	4603      	mov	r3, r0
}
 8007a52:	4618      	mov	r0, r3
 8007a54:	3708      	adds	r7, #8
 8007a56:	46bd      	mov	sp, r7
 8007a58:	bd80      	pop	{r7, pc}

08007a5a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8007a5a:	b580      	push	{r7, lr}
 8007a5c:	b084      	sub	sp, #16
 8007a5e:	af00      	add	r7, sp, #0
 8007a60:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8007a62:	687b      	ldr	r3, [r7, #4]
 8007a64:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8007a66:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8007a68:	f7ff fe9c 	bl	80077a4 <HAL_GetTick>
 8007a6c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007a74:	b2db      	uxtb	r3, r3
 8007a76:	2b02      	cmp	r3, #2
 8007a78:	d008      	beq.n	8007a8c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	2280      	movs	r2, #128	; 0x80
 8007a7e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007a80:	687b      	ldr	r3, [r7, #4]
 8007a82:	2200      	movs	r2, #0
 8007a84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8007a88:	2301      	movs	r3, #1
 8007a8a:	e052      	b.n	8007b32 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	681b      	ldr	r3, [r3, #0]
 8007a90:	681a      	ldr	r2, [r3, #0]
 8007a92:	687b      	ldr	r3, [r7, #4]
 8007a94:	681b      	ldr	r3, [r3, #0]
 8007a96:	f022 0216 	bic.w	r2, r2, #22
 8007a9a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	695a      	ldr	r2, [r3, #20]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007aaa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ab0:	2b00      	cmp	r3, #0
 8007ab2:	d103      	bne.n	8007abc <HAL_DMA_Abort+0x62>
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8007ab8:	2b00      	cmp	r3, #0
 8007aba:	d007      	beq.n	8007acc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	681a      	ldr	r2, [r3, #0]
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f022 0208 	bic.w	r2, r2, #8
 8007aca:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	681a      	ldr	r2, [r3, #0]
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0201 	bic.w	r2, r2, #1
 8007ada:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007adc:	e013      	b.n	8007b06 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8007ade:	f7ff fe61 	bl	80077a4 <HAL_GetTick>
 8007ae2:	4602      	mov	r2, r0
 8007ae4:	68bb      	ldr	r3, [r7, #8]
 8007ae6:	1ad3      	subs	r3, r2, r3
 8007ae8:	2b05      	cmp	r3, #5
 8007aea:	d90c      	bls.n	8007b06 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	2220      	movs	r2, #32
 8007af0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2203      	movs	r2, #3
 8007af6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2200      	movs	r2, #0
 8007afe:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8007b02:	2303      	movs	r3, #3
 8007b04:	e015      	b.n	8007b32 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8007b06:	687b      	ldr	r3, [r7, #4]
 8007b08:	681b      	ldr	r3, [r3, #0]
 8007b0a:	681b      	ldr	r3, [r3, #0]
 8007b0c:	f003 0301 	and.w	r3, r3, #1
 8007b10:	2b00      	cmp	r3, #0
 8007b12:	d1e4      	bne.n	8007ade <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8007b14:	687b      	ldr	r3, [r7, #4]
 8007b16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8007b18:	223f      	movs	r2, #63	; 0x3f
 8007b1a:	409a      	lsls	r2, r3
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8007b28:	687b      	ldr	r3, [r7, #4]
 8007b2a:	2200      	movs	r2, #0
 8007b2c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8007b30:	2300      	movs	r3, #0
}
 8007b32:	4618      	mov	r0, r3
 8007b34:	3710      	adds	r7, #16
 8007b36:	46bd      	mov	sp, r7
 8007b38:	bd80      	pop	{r7, pc}

08007b3a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8007b3a:	b480      	push	{r7}
 8007b3c:	b083      	sub	sp, #12
 8007b3e:	af00      	add	r7, sp, #0
 8007b40:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8007b42:	687b      	ldr	r3, [r7, #4]
 8007b44:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8007b48:	b2db      	uxtb	r3, r3
 8007b4a:	2b02      	cmp	r3, #2
 8007b4c:	d004      	beq.n	8007b58 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8007b4e:	687b      	ldr	r3, [r7, #4]
 8007b50:	2280      	movs	r2, #128	; 0x80
 8007b52:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8007b54:	2301      	movs	r3, #1
 8007b56:	e00c      	b.n	8007b72 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8007b58:	687b      	ldr	r3, [r7, #4]
 8007b5a:	2205      	movs	r2, #5
 8007b5c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	681a      	ldr	r2, [r3, #0]
 8007b66:	687b      	ldr	r3, [r7, #4]
 8007b68:	681b      	ldr	r3, [r3, #0]
 8007b6a:	f022 0201 	bic.w	r2, r2, #1
 8007b6e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8007b70:	2300      	movs	r3, #0
}
 8007b72:	4618      	mov	r0, r3
 8007b74:	370c      	adds	r7, #12
 8007b76:	46bd      	mov	sp, r7
 8007b78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b7c:	4770      	bx	lr
	...

08007b80 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8007b80:	b580      	push	{r7, lr}
 8007b82:	b086      	sub	sp, #24
 8007b84:	af00      	add	r7, sp, #0
 8007b86:	60f8      	str	r0, [r7, #12]
 8007b88:	60b9      	str	r1, [r7, #8]
 8007b8a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007b8e:	2301      	movs	r3, #1
 8007b90:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007b92:	4b23      	ldr	r3, [pc, #140]	; (8007c20 <HAL_FLASH_Program+0xa0>)
 8007b94:	7e1b      	ldrb	r3, [r3, #24]
 8007b96:	2b01      	cmp	r3, #1
 8007b98:	d101      	bne.n	8007b9e <HAL_FLASH_Program+0x1e>
 8007b9a:	2302      	movs	r3, #2
 8007b9c:	e03b      	b.n	8007c16 <HAL_FLASH_Program+0x96>
 8007b9e:	4b20      	ldr	r3, [pc, #128]	; (8007c20 <HAL_FLASH_Program+0xa0>)
 8007ba0:	2201      	movs	r2, #1
 8007ba2:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007ba4:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007ba8:	f000 f87c 	bl	8007ca4 <FLASH_WaitForLastOperation>
 8007bac:	4603      	mov	r3, r0
 8007bae:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8007bb0:	7dfb      	ldrb	r3, [r7, #23]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d12b      	bne.n	8007c0e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2b00      	cmp	r3, #0
 8007bba:	d105      	bne.n	8007bc8 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8007bbc:	783b      	ldrb	r3, [r7, #0]
 8007bbe:	4619      	mov	r1, r3
 8007bc0:	68b8      	ldr	r0, [r7, #8]
 8007bc2:	f000 f927 	bl	8007e14 <FLASH_Program_Byte>
 8007bc6:	e016      	b.n	8007bf6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8007bc8:	68fb      	ldr	r3, [r7, #12]
 8007bca:	2b01      	cmp	r3, #1
 8007bcc:	d105      	bne.n	8007bda <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8007bce:	883b      	ldrh	r3, [r7, #0]
 8007bd0:	4619      	mov	r1, r3
 8007bd2:	68b8      	ldr	r0, [r7, #8]
 8007bd4:	f000 f8fa 	bl	8007dcc <FLASH_Program_HalfWord>
 8007bd8:	e00d      	b.n	8007bf6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8007bda:	68fb      	ldr	r3, [r7, #12]
 8007bdc:	2b02      	cmp	r3, #2
 8007bde:	d105      	bne.n	8007bec <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8007be0:	683b      	ldr	r3, [r7, #0]
 8007be2:	4619      	mov	r1, r3
 8007be4:	68b8      	ldr	r0, [r7, #8]
 8007be6:	f000 f8cf 	bl	8007d88 <FLASH_Program_Word>
 8007bea:	e004      	b.n	8007bf6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8007bec:	e9d7 2300 	ldrd	r2, r3, [r7]
 8007bf0:	68b8      	ldr	r0, [r7, #8]
 8007bf2:	f000 f897 	bl	8007d24 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007bf6:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007bfa:	f000 f853 	bl	8007ca4 <FLASH_WaitForLastOperation>
 8007bfe:	4603      	mov	r3, r0
 8007c00:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8007c02:	4b08      	ldr	r3, [pc, #32]	; (8007c24 <HAL_FLASH_Program+0xa4>)
 8007c04:	691b      	ldr	r3, [r3, #16]
 8007c06:	4a07      	ldr	r2, [pc, #28]	; (8007c24 <HAL_FLASH_Program+0xa4>)
 8007c08:	f023 0301 	bic.w	r3, r3, #1
 8007c0c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007c0e:	4b04      	ldr	r3, [pc, #16]	; (8007c20 <HAL_FLASH_Program+0xa0>)
 8007c10:	2200      	movs	r2, #0
 8007c12:	761a      	strb	r2, [r3, #24]
  
  return status;
 8007c14:	7dfb      	ldrb	r3, [r7, #23]
}
 8007c16:	4618      	mov	r0, r3
 8007c18:	3718      	adds	r7, #24
 8007c1a:	46bd      	mov	sp, r7
 8007c1c:	bd80      	pop	{r7, pc}
 8007c1e:	bf00      	nop
 8007c20:	20000550 	.word	0x20000550
 8007c24:	40023c00 	.word	0x40023c00

08007c28 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8007c28:	b480      	push	{r7}
 8007c2a:	b083      	sub	sp, #12
 8007c2c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8007c2e:	2300      	movs	r3, #0
 8007c30:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007c32:	4b0b      	ldr	r3, [pc, #44]	; (8007c60 <HAL_FLASH_Unlock+0x38>)
 8007c34:	691b      	ldr	r3, [r3, #16]
 8007c36:	2b00      	cmp	r3, #0
 8007c38:	da0b      	bge.n	8007c52 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8007c3a:	4b09      	ldr	r3, [pc, #36]	; (8007c60 <HAL_FLASH_Unlock+0x38>)
 8007c3c:	4a09      	ldr	r2, [pc, #36]	; (8007c64 <HAL_FLASH_Unlock+0x3c>)
 8007c3e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8007c40:	4b07      	ldr	r3, [pc, #28]	; (8007c60 <HAL_FLASH_Unlock+0x38>)
 8007c42:	4a09      	ldr	r2, [pc, #36]	; (8007c68 <HAL_FLASH_Unlock+0x40>)
 8007c44:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8007c46:	4b06      	ldr	r3, [pc, #24]	; (8007c60 <HAL_FLASH_Unlock+0x38>)
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	2b00      	cmp	r3, #0
 8007c4c:	da01      	bge.n	8007c52 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8007c4e:	2301      	movs	r3, #1
 8007c50:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8007c52:	79fb      	ldrb	r3, [r7, #7]
}
 8007c54:	4618      	mov	r0, r3
 8007c56:	370c      	adds	r7, #12
 8007c58:	46bd      	mov	sp, r7
 8007c5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c5e:	4770      	bx	lr
 8007c60:	40023c00 	.word	0x40023c00
 8007c64:	45670123 	.word	0x45670123
 8007c68:	cdef89ab 	.word	0xcdef89ab

08007c6c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8007c70:	4b05      	ldr	r3, [pc, #20]	; (8007c88 <HAL_FLASH_Lock+0x1c>)
 8007c72:	691b      	ldr	r3, [r3, #16]
 8007c74:	4a04      	ldr	r2, [pc, #16]	; (8007c88 <HAL_FLASH_Lock+0x1c>)
 8007c76:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8007c7a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8007c7c:	2300      	movs	r3, #0
}
 8007c7e:	4618      	mov	r0, r3
 8007c80:	46bd      	mov	sp, r7
 8007c82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c86:	4770      	bx	lr
 8007c88:	40023c00 	.word	0x40023c00

08007c8c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8007c8c:	b480      	push	{r7}
 8007c8e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8007c90:	4b03      	ldr	r3, [pc, #12]	; (8007ca0 <HAL_FLASH_GetError+0x14>)
 8007c92:	69db      	ldr	r3, [r3, #28]
}  
 8007c94:	4618      	mov	r0, r3
 8007c96:	46bd      	mov	sp, r7
 8007c98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c9c:	4770      	bx	lr
 8007c9e:	bf00      	nop
 8007ca0:	20000550 	.word	0x20000550

08007ca4 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8007ca4:	b580      	push	{r7, lr}
 8007ca6:	b084      	sub	sp, #16
 8007ca8:	af00      	add	r7, sp, #0
 8007caa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8007cac:	2300      	movs	r3, #0
 8007cae:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8007cb0:	4b1a      	ldr	r3, [pc, #104]	; (8007d1c <FLASH_WaitForLastOperation+0x78>)
 8007cb2:	2200      	movs	r2, #0
 8007cb4:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8007cb6:	f7ff fd75 	bl	80077a4 <HAL_GetTick>
 8007cba:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007cbc:	e010      	b.n	8007ce0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007cc4:	d00c      	beq.n	8007ce0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	2b00      	cmp	r3, #0
 8007cca:	d007      	beq.n	8007cdc <FLASH_WaitForLastOperation+0x38>
 8007ccc:	f7ff fd6a 	bl	80077a4 <HAL_GetTick>
 8007cd0:	4602      	mov	r2, r0
 8007cd2:	68fb      	ldr	r3, [r7, #12]
 8007cd4:	1ad3      	subs	r3, r2, r3
 8007cd6:	687a      	ldr	r2, [r7, #4]
 8007cd8:	429a      	cmp	r2, r3
 8007cda:	d201      	bcs.n	8007ce0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8007cdc:	2303      	movs	r3, #3
 8007cde:	e019      	b.n	8007d14 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8007ce0:	4b0f      	ldr	r3, [pc, #60]	; (8007d20 <FLASH_WaitForLastOperation+0x7c>)
 8007ce2:	68db      	ldr	r3, [r3, #12]
 8007ce4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8007ce8:	2b00      	cmp	r3, #0
 8007cea:	d1e8      	bne.n	8007cbe <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8007cec:	4b0c      	ldr	r3, [pc, #48]	; (8007d20 <FLASH_WaitForLastOperation+0x7c>)
 8007cee:	68db      	ldr	r3, [r3, #12]
 8007cf0:	f003 0301 	and.w	r3, r3, #1
 8007cf4:	2b00      	cmp	r3, #0
 8007cf6:	d002      	beq.n	8007cfe <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8007cf8:	4b09      	ldr	r3, [pc, #36]	; (8007d20 <FLASH_WaitForLastOperation+0x7c>)
 8007cfa:	2201      	movs	r2, #1
 8007cfc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8007cfe:	4b08      	ldr	r3, [pc, #32]	; (8007d20 <FLASH_WaitForLastOperation+0x7c>)
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8007d06:	2b00      	cmp	r3, #0
 8007d08:	d003      	beq.n	8007d12 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8007d0a:	f000 f8a5 	bl	8007e58 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8007d0e:	2301      	movs	r3, #1
 8007d10:	e000      	b.n	8007d14 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8007d12:	2300      	movs	r3, #0
  
}  
 8007d14:	4618      	mov	r0, r3
 8007d16:	3710      	adds	r7, #16
 8007d18:	46bd      	mov	sp, r7
 8007d1a:	bd80      	pop	{r7, pc}
 8007d1c:	20000550 	.word	0x20000550
 8007d20:	40023c00 	.word	0x40023c00

08007d24 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8007d24:	b480      	push	{r7}
 8007d26:	b085      	sub	sp, #20
 8007d28:	af00      	add	r7, sp, #0
 8007d2a:	60f8      	str	r0, [r7, #12]
 8007d2c:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d30:	4b14      	ldr	r3, [pc, #80]	; (8007d84 <FLASH_Program_DoubleWord+0x60>)
 8007d32:	691b      	ldr	r3, [r3, #16]
 8007d34:	4a13      	ldr	r2, [pc, #76]	; (8007d84 <FLASH_Program_DoubleWord+0x60>)
 8007d36:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d3a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8007d3c:	4b11      	ldr	r3, [pc, #68]	; (8007d84 <FLASH_Program_DoubleWord+0x60>)
 8007d3e:	691b      	ldr	r3, [r3, #16]
 8007d40:	4a10      	ldr	r2, [pc, #64]	; (8007d84 <FLASH_Program_DoubleWord+0x60>)
 8007d42:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8007d46:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007d48:	4b0e      	ldr	r3, [pc, #56]	; (8007d84 <FLASH_Program_DoubleWord+0x60>)
 8007d4a:	691b      	ldr	r3, [r3, #16]
 8007d4c:	4a0d      	ldr	r2, [pc, #52]	; (8007d84 <FLASH_Program_DoubleWord+0x60>)
 8007d4e:	f043 0301 	orr.w	r3, r3, #1
 8007d52:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8007d54:	68fb      	ldr	r3, [r7, #12]
 8007d56:	683a      	ldr	r2, [r7, #0]
 8007d58:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007d5a:	f3bf 8f6f 	isb	sy
}
 8007d5e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007d60:	e9d7 0100 	ldrd	r0, r1, [r7]
 8007d64:	f04f 0200 	mov.w	r2, #0
 8007d68:	f04f 0300 	mov.w	r3, #0
 8007d6c:	000a      	movs	r2, r1
 8007d6e:	2300      	movs	r3, #0
 8007d70:	68f9      	ldr	r1, [r7, #12]
 8007d72:	3104      	adds	r1, #4
 8007d74:	4613      	mov	r3, r2
 8007d76:	600b      	str	r3, [r1, #0]
}
 8007d78:	bf00      	nop
 8007d7a:	3714      	adds	r7, #20
 8007d7c:	46bd      	mov	sp, r7
 8007d7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d82:	4770      	bx	lr
 8007d84:	40023c00 	.word	0x40023c00

08007d88 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007d88:	b480      	push	{r7}
 8007d8a:	b083      	sub	sp, #12
 8007d8c:	af00      	add	r7, sp, #0
 8007d8e:	6078      	str	r0, [r7, #4]
 8007d90:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007d92:	4b0d      	ldr	r3, [pc, #52]	; (8007dc8 <FLASH_Program_Word+0x40>)
 8007d94:	691b      	ldr	r3, [r3, #16]
 8007d96:	4a0c      	ldr	r2, [pc, #48]	; (8007dc8 <FLASH_Program_Word+0x40>)
 8007d98:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d9c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007d9e:	4b0a      	ldr	r3, [pc, #40]	; (8007dc8 <FLASH_Program_Word+0x40>)
 8007da0:	691b      	ldr	r3, [r3, #16]
 8007da2:	4a09      	ldr	r2, [pc, #36]	; (8007dc8 <FLASH_Program_Word+0x40>)
 8007da4:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007da8:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007daa:	4b07      	ldr	r3, [pc, #28]	; (8007dc8 <FLASH_Program_Word+0x40>)
 8007dac:	691b      	ldr	r3, [r3, #16]
 8007dae:	4a06      	ldr	r2, [pc, #24]	; (8007dc8 <FLASH_Program_Word+0x40>)
 8007db0:	f043 0301 	orr.w	r3, r3, #1
 8007db4:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8007db6:	687b      	ldr	r3, [r7, #4]
 8007db8:	683a      	ldr	r2, [r7, #0]
 8007dba:	601a      	str	r2, [r3, #0]
}
 8007dbc:	bf00      	nop
 8007dbe:	370c      	adds	r7, #12
 8007dc0:	46bd      	mov	sp, r7
 8007dc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dc6:	4770      	bx	lr
 8007dc8:	40023c00 	.word	0x40023c00

08007dcc <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007dcc:	b480      	push	{r7}
 8007dce:	b083      	sub	sp, #12
 8007dd0:	af00      	add	r7, sp, #0
 8007dd2:	6078      	str	r0, [r7, #4]
 8007dd4:	460b      	mov	r3, r1
 8007dd6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007dd8:	4b0d      	ldr	r3, [pc, #52]	; (8007e10 <FLASH_Program_HalfWord+0x44>)
 8007dda:	691b      	ldr	r3, [r3, #16]
 8007ddc:	4a0c      	ldr	r2, [pc, #48]	; (8007e10 <FLASH_Program_HalfWord+0x44>)
 8007dde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007de2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8007de4:	4b0a      	ldr	r3, [pc, #40]	; (8007e10 <FLASH_Program_HalfWord+0x44>)
 8007de6:	691b      	ldr	r3, [r3, #16]
 8007de8:	4a09      	ldr	r2, [pc, #36]	; (8007e10 <FLASH_Program_HalfWord+0x44>)
 8007dea:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007dee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007df0:	4b07      	ldr	r3, [pc, #28]	; (8007e10 <FLASH_Program_HalfWord+0x44>)
 8007df2:	691b      	ldr	r3, [r3, #16]
 8007df4:	4a06      	ldr	r2, [pc, #24]	; (8007e10 <FLASH_Program_HalfWord+0x44>)
 8007df6:	f043 0301 	orr.w	r3, r3, #1
 8007dfa:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8007dfc:	687b      	ldr	r3, [r7, #4]
 8007dfe:	887a      	ldrh	r2, [r7, #2]
 8007e00:	801a      	strh	r2, [r3, #0]
}
 8007e02:	bf00      	nop
 8007e04:	370c      	adds	r7, #12
 8007e06:	46bd      	mov	sp, r7
 8007e08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e0c:	4770      	bx	lr
 8007e0e:	bf00      	nop
 8007e10:	40023c00 	.word	0x40023c00

08007e14 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8007e14:	b480      	push	{r7}
 8007e16:	b083      	sub	sp, #12
 8007e18:	af00      	add	r7, sp, #0
 8007e1a:	6078      	str	r0, [r7, #4]
 8007e1c:	460b      	mov	r3, r1
 8007e1e:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007e20:	4b0c      	ldr	r3, [pc, #48]	; (8007e54 <FLASH_Program_Byte+0x40>)
 8007e22:	691b      	ldr	r3, [r3, #16]
 8007e24:	4a0b      	ldr	r2, [pc, #44]	; (8007e54 <FLASH_Program_Byte+0x40>)
 8007e26:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e2a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8007e2c:	4b09      	ldr	r3, [pc, #36]	; (8007e54 <FLASH_Program_Byte+0x40>)
 8007e2e:	4a09      	ldr	r2, [pc, #36]	; (8007e54 <FLASH_Program_Byte+0x40>)
 8007e30:	691b      	ldr	r3, [r3, #16]
 8007e32:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007e34:	4b07      	ldr	r3, [pc, #28]	; (8007e54 <FLASH_Program_Byte+0x40>)
 8007e36:	691b      	ldr	r3, [r3, #16]
 8007e38:	4a06      	ldr	r2, [pc, #24]	; (8007e54 <FLASH_Program_Byte+0x40>)
 8007e3a:	f043 0301 	orr.w	r3, r3, #1
 8007e3e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8007e40:	687b      	ldr	r3, [r7, #4]
 8007e42:	78fa      	ldrb	r2, [r7, #3]
 8007e44:	701a      	strb	r2, [r3, #0]
}
 8007e46:	bf00      	nop
 8007e48:	370c      	adds	r7, #12
 8007e4a:	46bd      	mov	sp, r7
 8007e4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e50:	4770      	bx	lr
 8007e52:	bf00      	nop
 8007e54:	40023c00 	.word	0x40023c00

08007e58 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007e58:	b480      	push	{r7}
 8007e5a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007e5c:	4b27      	ldr	r3, [pc, #156]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007e5e:	68db      	ldr	r3, [r3, #12]
 8007e60:	f003 0310 	and.w	r3, r3, #16
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d008      	beq.n	8007e7a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007e68:	4b25      	ldr	r3, [pc, #148]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007e6a:	69db      	ldr	r3, [r3, #28]
 8007e6c:	f043 0310 	orr.w	r3, r3, #16
 8007e70:	4a23      	ldr	r2, [pc, #140]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007e72:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8007e74:	4b21      	ldr	r3, [pc, #132]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007e76:	2210      	movs	r2, #16
 8007e78:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007e7a:	4b20      	ldr	r3, [pc, #128]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007e7c:	68db      	ldr	r3, [r3, #12]
 8007e7e:	f003 0320 	and.w	r3, r3, #32
 8007e82:	2b00      	cmp	r3, #0
 8007e84:	d008      	beq.n	8007e98 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8007e86:	4b1e      	ldr	r3, [pc, #120]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007e88:	69db      	ldr	r3, [r3, #28]
 8007e8a:	f043 0308 	orr.w	r3, r3, #8
 8007e8e:	4a1c      	ldr	r2, [pc, #112]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007e90:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8007e92:	4b1a      	ldr	r3, [pc, #104]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007e94:	2220      	movs	r2, #32
 8007e96:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007e98:	4b18      	ldr	r3, [pc, #96]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007e9a:	68db      	ldr	r3, [r3, #12]
 8007e9c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d008      	beq.n	8007eb6 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8007ea4:	4b16      	ldr	r3, [pc, #88]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007ea6:	69db      	ldr	r3, [r3, #28]
 8007ea8:	f043 0304 	orr.w	r3, r3, #4
 8007eac:	4a14      	ldr	r2, [pc, #80]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007eae:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007eb0:	4b12      	ldr	r3, [pc, #72]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007eb2:	2240      	movs	r2, #64	; 0x40
 8007eb4:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8007eb6:	4b11      	ldr	r3, [pc, #68]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007eb8:	68db      	ldr	r3, [r3, #12]
 8007eba:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007ebe:	2b00      	cmp	r3, #0
 8007ec0:	d008      	beq.n	8007ed4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8007ec2:	4b0f      	ldr	r3, [pc, #60]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007ec4:	69db      	ldr	r3, [r3, #28]
 8007ec6:	f043 0302 	orr.w	r3, r3, #2
 8007eca:	4a0d      	ldr	r2, [pc, #52]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007ecc:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007ece:	4b0b      	ldr	r3, [pc, #44]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007ed0:	2280      	movs	r2, #128	; 0x80
 8007ed2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8007ed4:	4b09      	ldr	r3, [pc, #36]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007ed6:	68db      	ldr	r3, [r3, #12]
 8007ed8:	f003 0302 	and.w	r3, r3, #2
 8007edc:	2b00      	cmp	r3, #0
 8007ede:	d008      	beq.n	8007ef2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007ee0:	4b07      	ldr	r3, [pc, #28]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007ee2:	69db      	ldr	r3, [r3, #28]
 8007ee4:	f043 0320 	orr.w	r3, r3, #32
 8007ee8:	4a05      	ldr	r2, [pc, #20]	; (8007f00 <FLASH_SetErrorCode+0xa8>)
 8007eea:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8007eec:	4b03      	ldr	r3, [pc, #12]	; (8007efc <FLASH_SetErrorCode+0xa4>)
 8007eee:	2202      	movs	r2, #2
 8007ef0:	60da      	str	r2, [r3, #12]
  }
}
 8007ef2:	bf00      	nop
 8007ef4:	46bd      	mov	sp, r7
 8007ef6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007efa:	4770      	bx	lr
 8007efc:	40023c00 	.word	0x40023c00
 8007f00:	20000550 	.word	0x20000550

08007f04 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8007f0e:	2301      	movs	r3, #1
 8007f10:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8007f12:	2300      	movs	r3, #0
 8007f14:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8007f16:	4b31      	ldr	r3, [pc, #196]	; (8007fdc <HAL_FLASHEx_Erase+0xd8>)
 8007f18:	7e1b      	ldrb	r3, [r3, #24]
 8007f1a:	2b01      	cmp	r3, #1
 8007f1c:	d101      	bne.n	8007f22 <HAL_FLASHEx_Erase+0x1e>
 8007f1e:	2302      	movs	r3, #2
 8007f20:	e058      	b.n	8007fd4 <HAL_FLASHEx_Erase+0xd0>
 8007f22:	4b2e      	ldr	r3, [pc, #184]	; (8007fdc <HAL_FLASHEx_Erase+0xd8>)
 8007f24:	2201      	movs	r2, #1
 8007f26:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007f28:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007f2c:	f7ff feba 	bl	8007ca4 <FLASH_WaitForLastOperation>
 8007f30:	4603      	mov	r3, r0
 8007f32:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8007f34:	7bfb      	ldrb	r3, [r7, #15]
 8007f36:	2b00      	cmp	r3, #0
 8007f38:	d148      	bne.n	8007fcc <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8007f3a:	683b      	ldr	r3, [r7, #0]
 8007f3c:	f04f 32ff 	mov.w	r2, #4294967295
 8007f40:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	681b      	ldr	r3, [r3, #0]
 8007f46:	2b01      	cmp	r3, #1
 8007f48:	d115      	bne.n	8007f76 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007f4a:	687b      	ldr	r3, [r7, #4]
 8007f4c:	691b      	ldr	r3, [r3, #16]
 8007f4e:	b2da      	uxtb	r2, r3
 8007f50:	687b      	ldr	r3, [r7, #4]
 8007f52:	685b      	ldr	r3, [r3, #4]
 8007f54:	4619      	mov	r1, r3
 8007f56:	4610      	mov	r0, r2
 8007f58:	f000 f844 	bl	8007fe4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007f5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007f60:	f7ff fea0 	bl	8007ca4 <FLASH_WaitForLastOperation>
 8007f64:	4603      	mov	r3, r0
 8007f66:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007f68:	4b1d      	ldr	r3, [pc, #116]	; (8007fe0 <HAL_FLASHEx_Erase+0xdc>)
 8007f6a:	691b      	ldr	r3, [r3, #16]
 8007f6c:	4a1c      	ldr	r2, [pc, #112]	; (8007fe0 <HAL_FLASHEx_Erase+0xdc>)
 8007f6e:	f023 0304 	bic.w	r3, r3, #4
 8007f72:	6113      	str	r3, [r2, #16]
 8007f74:	e028      	b.n	8007fc8 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	689b      	ldr	r3, [r3, #8]
 8007f7a:	60bb      	str	r3, [r7, #8]
 8007f7c:	e01c      	b.n	8007fb8 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	691b      	ldr	r3, [r3, #16]
 8007f82:	b2db      	uxtb	r3, r3
 8007f84:	4619      	mov	r1, r3
 8007f86:	68b8      	ldr	r0, [r7, #8]
 8007f88:	f000 f850 	bl	800802c <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007f8c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007f90:	f7ff fe88 	bl	8007ca4 <FLASH_WaitForLastOperation>
 8007f94:	4603      	mov	r3, r0
 8007f96:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007f98:	4b11      	ldr	r3, [pc, #68]	; (8007fe0 <HAL_FLASHEx_Erase+0xdc>)
 8007f9a:	691b      	ldr	r3, [r3, #16]
 8007f9c:	4a10      	ldr	r2, [pc, #64]	; (8007fe0 <HAL_FLASHEx_Erase+0xdc>)
 8007f9e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8007fa2:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8007fa4:	7bfb      	ldrb	r3, [r7, #15]
 8007fa6:	2b00      	cmp	r3, #0
 8007fa8:	d003      	beq.n	8007fb2 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007faa:	683b      	ldr	r3, [r7, #0]
 8007fac:	68ba      	ldr	r2, [r7, #8]
 8007fae:	601a      	str	r2, [r3, #0]
          break;
 8007fb0:	e00a      	b.n	8007fc8 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8007fb2:	68bb      	ldr	r3, [r7, #8]
 8007fb4:	3301      	adds	r3, #1
 8007fb6:	60bb      	str	r3, [r7, #8]
 8007fb8:	687b      	ldr	r3, [r7, #4]
 8007fba:	68da      	ldr	r2, [r3, #12]
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	689b      	ldr	r3, [r3, #8]
 8007fc0:	4413      	add	r3, r2
 8007fc2:	68ba      	ldr	r2, [r7, #8]
 8007fc4:	429a      	cmp	r2, r3
 8007fc6:	d3da      	bcc.n	8007f7e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007fc8:	f000 f878 	bl	80080bc <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007fcc:	4b03      	ldr	r3, [pc, #12]	; (8007fdc <HAL_FLASHEx_Erase+0xd8>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	761a      	strb	r2, [r3, #24]

  return status;
 8007fd2:	7bfb      	ldrb	r3, [r7, #15]
}
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	3710      	adds	r7, #16
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	bd80      	pop	{r7, pc}
 8007fdc:	20000550 	.word	0x20000550
 8007fe0:	40023c00 	.word	0x40023c00

08007fe4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b083      	sub	sp, #12
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	4603      	mov	r3, r0
 8007fec:	6039      	str	r1, [r7, #0]
 8007fee:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007ff0:	4b0d      	ldr	r3, [pc, #52]	; (8008028 <FLASH_MassErase+0x44>)
 8007ff2:	691b      	ldr	r3, [r3, #16]
 8007ff4:	4a0c      	ldr	r2, [pc, #48]	; (8008028 <FLASH_MassErase+0x44>)
 8007ff6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007ffa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8007ffc:	4b0a      	ldr	r3, [pc, #40]	; (8008028 <FLASH_MassErase+0x44>)
 8007ffe:	691b      	ldr	r3, [r3, #16]
 8008000:	4a09      	ldr	r2, [pc, #36]	; (8008028 <FLASH_MassErase+0x44>)
 8008002:	f043 0304 	orr.w	r3, r3, #4
 8008006:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8008008:	4b07      	ldr	r3, [pc, #28]	; (8008028 <FLASH_MassErase+0x44>)
 800800a:	691a      	ldr	r2, [r3, #16]
 800800c:	79fb      	ldrb	r3, [r7, #7]
 800800e:	021b      	lsls	r3, r3, #8
 8008010:	4313      	orrs	r3, r2
 8008012:	4a05      	ldr	r2, [pc, #20]	; (8008028 <FLASH_MassErase+0x44>)
 8008014:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008018:	6113      	str	r3, [r2, #16]
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr
 8008026:	bf00      	nop
 8008028:	40023c00 	.word	0x40023c00

0800802c <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 800802c:	b480      	push	{r7}
 800802e:	b085      	sub	sp, #20
 8008030:	af00      	add	r7, sp, #0
 8008032:	6078      	str	r0, [r7, #4]
 8008034:	460b      	mov	r3, r1
 8008036:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8008038:	2300      	movs	r3, #0
 800803a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 800803c:	78fb      	ldrb	r3, [r7, #3]
 800803e:	2b00      	cmp	r3, #0
 8008040:	d102      	bne.n	8008048 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8008042:	2300      	movs	r3, #0
 8008044:	60fb      	str	r3, [r7, #12]
 8008046:	e010      	b.n	800806a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8008048:	78fb      	ldrb	r3, [r7, #3]
 800804a:	2b01      	cmp	r3, #1
 800804c:	d103      	bne.n	8008056 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 800804e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8008052:	60fb      	str	r3, [r7, #12]
 8008054:	e009      	b.n	800806a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8008056:	78fb      	ldrb	r3, [r7, #3]
 8008058:	2b02      	cmp	r3, #2
 800805a:	d103      	bne.n	8008064 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 800805c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8008060:	60fb      	str	r3, [r7, #12]
 8008062:	e002      	b.n	800806a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8008064:	f44f 7340 	mov.w	r3, #768	; 0x300
 8008068:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800806a:	4b13      	ldr	r3, [pc, #76]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 800806c:	691b      	ldr	r3, [r3, #16]
 800806e:	4a12      	ldr	r2, [pc, #72]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 8008070:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008074:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8008076:	4b10      	ldr	r3, [pc, #64]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 8008078:	691a      	ldr	r2, [r3, #16]
 800807a:	490f      	ldr	r1, [pc, #60]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 800807c:	68fb      	ldr	r3, [r7, #12]
 800807e:	4313      	orrs	r3, r2
 8008080:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8008082:	4b0d      	ldr	r3, [pc, #52]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 8008084:	691b      	ldr	r3, [r3, #16]
 8008086:	4a0c      	ldr	r2, [pc, #48]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 8008088:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 800808c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 800808e:	4b0a      	ldr	r3, [pc, #40]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 8008090:	691a      	ldr	r2, [r3, #16]
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	00db      	lsls	r3, r3, #3
 8008096:	4313      	orrs	r3, r2
 8008098:	4a07      	ldr	r2, [pc, #28]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 800809a:	f043 0302 	orr.w	r3, r3, #2
 800809e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 80080a0:	4b05      	ldr	r3, [pc, #20]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 80080a2:	691b      	ldr	r3, [r3, #16]
 80080a4:	4a04      	ldr	r2, [pc, #16]	; (80080b8 <FLASH_Erase_Sector+0x8c>)
 80080a6:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80080aa:	6113      	str	r3, [r2, #16]
}
 80080ac:	bf00      	nop
 80080ae:	3714      	adds	r7, #20
 80080b0:	46bd      	mov	sp, r7
 80080b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080b6:	4770      	bx	lr
 80080b8:	40023c00 	.word	0x40023c00

080080bc <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 80080bc:	b480      	push	{r7}
 80080be:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 80080c0:	4b20      	ldr	r3, [pc, #128]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080c2:	681b      	ldr	r3, [r3, #0]
 80080c4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80080c8:	2b00      	cmp	r3, #0
 80080ca:	d017      	beq.n	80080fc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 80080cc:	4b1d      	ldr	r3, [pc, #116]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080ce:	681b      	ldr	r3, [r3, #0]
 80080d0:	4a1c      	ldr	r2, [pc, #112]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080d2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80080d6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 80080d8:	4b1a      	ldr	r3, [pc, #104]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080da:	681b      	ldr	r3, [r3, #0]
 80080dc:	4a19      	ldr	r2, [pc, #100]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080de:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80080e2:	6013      	str	r3, [r2, #0]
 80080e4:	4b17      	ldr	r3, [pc, #92]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080e6:	681b      	ldr	r3, [r3, #0]
 80080e8:	4a16      	ldr	r2, [pc, #88]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080ee:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80080f0:	4b14      	ldr	r3, [pc, #80]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080f2:	681b      	ldr	r3, [r3, #0]
 80080f4:	4a13      	ldr	r2, [pc, #76]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080f6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80080fa:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80080fc:	4b11      	ldr	r3, [pc, #68]	; (8008144 <FLASH_FlushCaches+0x88>)
 80080fe:	681b      	ldr	r3, [r3, #0]
 8008100:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8008104:	2b00      	cmp	r3, #0
 8008106:	d017      	beq.n	8008138 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8008108:	4b0e      	ldr	r3, [pc, #56]	; (8008144 <FLASH_FlushCaches+0x88>)
 800810a:	681b      	ldr	r3, [r3, #0]
 800810c:	4a0d      	ldr	r2, [pc, #52]	; (8008144 <FLASH_FlushCaches+0x88>)
 800810e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8008112:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8008114:	4b0b      	ldr	r3, [pc, #44]	; (8008144 <FLASH_FlushCaches+0x88>)
 8008116:	681b      	ldr	r3, [r3, #0]
 8008118:	4a0a      	ldr	r2, [pc, #40]	; (8008144 <FLASH_FlushCaches+0x88>)
 800811a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 800811e:	6013      	str	r3, [r2, #0]
 8008120:	4b08      	ldr	r3, [pc, #32]	; (8008144 <FLASH_FlushCaches+0x88>)
 8008122:	681b      	ldr	r3, [r3, #0]
 8008124:	4a07      	ldr	r2, [pc, #28]	; (8008144 <FLASH_FlushCaches+0x88>)
 8008126:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800812a:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 800812c:	4b05      	ldr	r3, [pc, #20]	; (8008144 <FLASH_FlushCaches+0x88>)
 800812e:	681b      	ldr	r3, [r3, #0]
 8008130:	4a04      	ldr	r2, [pc, #16]	; (8008144 <FLASH_FlushCaches+0x88>)
 8008132:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8008136:	6013      	str	r3, [r2, #0]
  }
}
 8008138:	bf00      	nop
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr
 8008142:	bf00      	nop
 8008144:	40023c00 	.word	0x40023c00

08008148 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8008148:	b480      	push	{r7}
 800814a:	b089      	sub	sp, #36	; 0x24
 800814c:	af00      	add	r7, sp, #0
 800814e:	6078      	str	r0, [r7, #4]
 8008150:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8008152:	2300      	movs	r3, #0
 8008154:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8008156:	2300      	movs	r3, #0
 8008158:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800815a:	2300      	movs	r3, #0
 800815c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800815e:	2300      	movs	r3, #0
 8008160:	61fb      	str	r3, [r7, #28]
 8008162:	e16b      	b.n	800843c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8008164:	2201      	movs	r2, #1
 8008166:	69fb      	ldr	r3, [r7, #28]
 8008168:	fa02 f303 	lsl.w	r3, r2, r3
 800816c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800816e:	683b      	ldr	r3, [r7, #0]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	697a      	ldr	r2, [r7, #20]
 8008174:	4013      	ands	r3, r2
 8008176:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8008178:	693a      	ldr	r2, [r7, #16]
 800817a:	697b      	ldr	r3, [r7, #20]
 800817c:	429a      	cmp	r2, r3
 800817e:	f040 815a 	bne.w	8008436 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008182:	683b      	ldr	r3, [r7, #0]
 8008184:	685b      	ldr	r3, [r3, #4]
 8008186:	f003 0303 	and.w	r3, r3, #3
 800818a:	2b01      	cmp	r3, #1
 800818c:	d005      	beq.n	800819a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800818e:	683b      	ldr	r3, [r7, #0]
 8008190:	685b      	ldr	r3, [r3, #4]
 8008192:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8008196:	2b02      	cmp	r3, #2
 8008198:	d130      	bne.n	80081fc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	689b      	ldr	r3, [r3, #8]
 800819e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80081a0:	69fb      	ldr	r3, [r7, #28]
 80081a2:	005b      	lsls	r3, r3, #1
 80081a4:	2203      	movs	r2, #3
 80081a6:	fa02 f303 	lsl.w	r3, r2, r3
 80081aa:	43db      	mvns	r3, r3
 80081ac:	69ba      	ldr	r2, [r7, #24]
 80081ae:	4013      	ands	r3, r2
 80081b0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80081b2:	683b      	ldr	r3, [r7, #0]
 80081b4:	68da      	ldr	r2, [r3, #12]
 80081b6:	69fb      	ldr	r3, [r7, #28]
 80081b8:	005b      	lsls	r3, r3, #1
 80081ba:	fa02 f303 	lsl.w	r3, r2, r3
 80081be:	69ba      	ldr	r2, [r7, #24]
 80081c0:	4313      	orrs	r3, r2
 80081c2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	69ba      	ldr	r2, [r7, #24]
 80081c8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80081d0:	2201      	movs	r2, #1
 80081d2:	69fb      	ldr	r3, [r7, #28]
 80081d4:	fa02 f303 	lsl.w	r3, r2, r3
 80081d8:	43db      	mvns	r3, r3
 80081da:	69ba      	ldr	r2, [r7, #24]
 80081dc:	4013      	ands	r3, r2
 80081de:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80081e0:	683b      	ldr	r3, [r7, #0]
 80081e2:	685b      	ldr	r3, [r3, #4]
 80081e4:	091b      	lsrs	r3, r3, #4
 80081e6:	f003 0201 	and.w	r2, r3, #1
 80081ea:	69fb      	ldr	r3, [r7, #28]
 80081ec:	fa02 f303 	lsl.w	r3, r2, r3
 80081f0:	69ba      	ldr	r2, [r7, #24]
 80081f2:	4313      	orrs	r3, r2
 80081f4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80081f6:	687b      	ldr	r3, [r7, #4]
 80081f8:	69ba      	ldr	r2, [r7, #24]
 80081fa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80081fc:	683b      	ldr	r3, [r7, #0]
 80081fe:	685b      	ldr	r3, [r3, #4]
 8008200:	f003 0303 	and.w	r3, r3, #3
 8008204:	2b03      	cmp	r3, #3
 8008206:	d017      	beq.n	8008238 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	68db      	ldr	r3, [r3, #12]
 800820c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800820e:	69fb      	ldr	r3, [r7, #28]
 8008210:	005b      	lsls	r3, r3, #1
 8008212:	2203      	movs	r2, #3
 8008214:	fa02 f303 	lsl.w	r3, r2, r3
 8008218:	43db      	mvns	r3, r3
 800821a:	69ba      	ldr	r2, [r7, #24]
 800821c:	4013      	ands	r3, r2
 800821e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8008220:	683b      	ldr	r3, [r7, #0]
 8008222:	689a      	ldr	r2, [r3, #8]
 8008224:	69fb      	ldr	r3, [r7, #28]
 8008226:	005b      	lsls	r3, r3, #1
 8008228:	fa02 f303 	lsl.w	r3, r2, r3
 800822c:	69ba      	ldr	r2, [r7, #24]
 800822e:	4313      	orrs	r3, r2
 8008230:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8008232:	687b      	ldr	r3, [r7, #4]
 8008234:	69ba      	ldr	r2, [r7, #24]
 8008236:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8008238:	683b      	ldr	r3, [r7, #0]
 800823a:	685b      	ldr	r3, [r3, #4]
 800823c:	f003 0303 	and.w	r3, r3, #3
 8008240:	2b02      	cmp	r3, #2
 8008242:	d123      	bne.n	800828c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8008244:	69fb      	ldr	r3, [r7, #28]
 8008246:	08da      	lsrs	r2, r3, #3
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	3208      	adds	r2, #8
 800824c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8008250:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8008252:	69fb      	ldr	r3, [r7, #28]
 8008254:	f003 0307 	and.w	r3, r3, #7
 8008258:	009b      	lsls	r3, r3, #2
 800825a:	220f      	movs	r2, #15
 800825c:	fa02 f303 	lsl.w	r3, r2, r3
 8008260:	43db      	mvns	r3, r3
 8008262:	69ba      	ldr	r2, [r7, #24]
 8008264:	4013      	ands	r3, r2
 8008266:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8008268:	683b      	ldr	r3, [r7, #0]
 800826a:	691a      	ldr	r2, [r3, #16]
 800826c:	69fb      	ldr	r3, [r7, #28]
 800826e:	f003 0307 	and.w	r3, r3, #7
 8008272:	009b      	lsls	r3, r3, #2
 8008274:	fa02 f303 	lsl.w	r3, r2, r3
 8008278:	69ba      	ldr	r2, [r7, #24]
 800827a:	4313      	orrs	r3, r2
 800827c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800827e:	69fb      	ldr	r3, [r7, #28]
 8008280:	08da      	lsrs	r2, r3, #3
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	3208      	adds	r2, #8
 8008286:	69b9      	ldr	r1, [r7, #24]
 8008288:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800828c:	687b      	ldr	r3, [r7, #4]
 800828e:	681b      	ldr	r3, [r3, #0]
 8008290:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8008292:	69fb      	ldr	r3, [r7, #28]
 8008294:	005b      	lsls	r3, r3, #1
 8008296:	2203      	movs	r2, #3
 8008298:	fa02 f303 	lsl.w	r3, r2, r3
 800829c:	43db      	mvns	r3, r3
 800829e:	69ba      	ldr	r2, [r7, #24]
 80082a0:	4013      	ands	r3, r2
 80082a2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80082a4:	683b      	ldr	r3, [r7, #0]
 80082a6:	685b      	ldr	r3, [r3, #4]
 80082a8:	f003 0203 	and.w	r2, r3, #3
 80082ac:	69fb      	ldr	r3, [r7, #28]
 80082ae:	005b      	lsls	r3, r3, #1
 80082b0:	fa02 f303 	lsl.w	r3, r2, r3
 80082b4:	69ba      	ldr	r2, [r7, #24]
 80082b6:	4313      	orrs	r3, r2
 80082b8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	69ba      	ldr	r2, [r7, #24]
 80082be:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 80082c0:	683b      	ldr	r3, [r7, #0]
 80082c2:	685b      	ldr	r3, [r3, #4]
 80082c4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 80082c8:	2b00      	cmp	r3, #0
 80082ca:	f000 80b4 	beq.w	8008436 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80082ce:	2300      	movs	r3, #0
 80082d0:	60fb      	str	r3, [r7, #12]
 80082d2:	4b60      	ldr	r3, [pc, #384]	; (8008454 <HAL_GPIO_Init+0x30c>)
 80082d4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082d6:	4a5f      	ldr	r2, [pc, #380]	; (8008454 <HAL_GPIO_Init+0x30c>)
 80082d8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80082dc:	6453      	str	r3, [r2, #68]	; 0x44
 80082de:	4b5d      	ldr	r3, [pc, #372]	; (8008454 <HAL_GPIO_Init+0x30c>)
 80082e0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80082e2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80082e6:	60fb      	str	r3, [r7, #12]
 80082e8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80082ea:	4a5b      	ldr	r2, [pc, #364]	; (8008458 <HAL_GPIO_Init+0x310>)
 80082ec:	69fb      	ldr	r3, [r7, #28]
 80082ee:	089b      	lsrs	r3, r3, #2
 80082f0:	3302      	adds	r3, #2
 80082f2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80082f6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80082f8:	69fb      	ldr	r3, [r7, #28]
 80082fa:	f003 0303 	and.w	r3, r3, #3
 80082fe:	009b      	lsls	r3, r3, #2
 8008300:	220f      	movs	r2, #15
 8008302:	fa02 f303 	lsl.w	r3, r2, r3
 8008306:	43db      	mvns	r3, r3
 8008308:	69ba      	ldr	r2, [r7, #24]
 800830a:	4013      	ands	r3, r2
 800830c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800830e:	687b      	ldr	r3, [r7, #4]
 8008310:	4a52      	ldr	r2, [pc, #328]	; (800845c <HAL_GPIO_Init+0x314>)
 8008312:	4293      	cmp	r3, r2
 8008314:	d02b      	beq.n	800836e <HAL_GPIO_Init+0x226>
 8008316:	687b      	ldr	r3, [r7, #4]
 8008318:	4a51      	ldr	r2, [pc, #324]	; (8008460 <HAL_GPIO_Init+0x318>)
 800831a:	4293      	cmp	r3, r2
 800831c:	d025      	beq.n	800836a <HAL_GPIO_Init+0x222>
 800831e:	687b      	ldr	r3, [r7, #4]
 8008320:	4a50      	ldr	r2, [pc, #320]	; (8008464 <HAL_GPIO_Init+0x31c>)
 8008322:	4293      	cmp	r3, r2
 8008324:	d01f      	beq.n	8008366 <HAL_GPIO_Init+0x21e>
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	4a4f      	ldr	r2, [pc, #316]	; (8008468 <HAL_GPIO_Init+0x320>)
 800832a:	4293      	cmp	r3, r2
 800832c:	d019      	beq.n	8008362 <HAL_GPIO_Init+0x21a>
 800832e:	687b      	ldr	r3, [r7, #4]
 8008330:	4a4e      	ldr	r2, [pc, #312]	; (800846c <HAL_GPIO_Init+0x324>)
 8008332:	4293      	cmp	r3, r2
 8008334:	d013      	beq.n	800835e <HAL_GPIO_Init+0x216>
 8008336:	687b      	ldr	r3, [r7, #4]
 8008338:	4a4d      	ldr	r2, [pc, #308]	; (8008470 <HAL_GPIO_Init+0x328>)
 800833a:	4293      	cmp	r3, r2
 800833c:	d00d      	beq.n	800835a <HAL_GPIO_Init+0x212>
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	4a4c      	ldr	r2, [pc, #304]	; (8008474 <HAL_GPIO_Init+0x32c>)
 8008342:	4293      	cmp	r3, r2
 8008344:	d007      	beq.n	8008356 <HAL_GPIO_Init+0x20e>
 8008346:	687b      	ldr	r3, [r7, #4]
 8008348:	4a4b      	ldr	r2, [pc, #300]	; (8008478 <HAL_GPIO_Init+0x330>)
 800834a:	4293      	cmp	r3, r2
 800834c:	d101      	bne.n	8008352 <HAL_GPIO_Init+0x20a>
 800834e:	2307      	movs	r3, #7
 8008350:	e00e      	b.n	8008370 <HAL_GPIO_Init+0x228>
 8008352:	2308      	movs	r3, #8
 8008354:	e00c      	b.n	8008370 <HAL_GPIO_Init+0x228>
 8008356:	2306      	movs	r3, #6
 8008358:	e00a      	b.n	8008370 <HAL_GPIO_Init+0x228>
 800835a:	2305      	movs	r3, #5
 800835c:	e008      	b.n	8008370 <HAL_GPIO_Init+0x228>
 800835e:	2304      	movs	r3, #4
 8008360:	e006      	b.n	8008370 <HAL_GPIO_Init+0x228>
 8008362:	2303      	movs	r3, #3
 8008364:	e004      	b.n	8008370 <HAL_GPIO_Init+0x228>
 8008366:	2302      	movs	r3, #2
 8008368:	e002      	b.n	8008370 <HAL_GPIO_Init+0x228>
 800836a:	2301      	movs	r3, #1
 800836c:	e000      	b.n	8008370 <HAL_GPIO_Init+0x228>
 800836e:	2300      	movs	r3, #0
 8008370:	69fa      	ldr	r2, [r7, #28]
 8008372:	f002 0203 	and.w	r2, r2, #3
 8008376:	0092      	lsls	r2, r2, #2
 8008378:	4093      	lsls	r3, r2
 800837a:	69ba      	ldr	r2, [r7, #24]
 800837c:	4313      	orrs	r3, r2
 800837e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8008380:	4935      	ldr	r1, [pc, #212]	; (8008458 <HAL_GPIO_Init+0x310>)
 8008382:	69fb      	ldr	r3, [r7, #28]
 8008384:	089b      	lsrs	r3, r3, #2
 8008386:	3302      	adds	r3, #2
 8008388:	69ba      	ldr	r2, [r7, #24]
 800838a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800838e:	4b3b      	ldr	r3, [pc, #236]	; (800847c <HAL_GPIO_Init+0x334>)
 8008390:	689b      	ldr	r3, [r3, #8]
 8008392:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008394:	693b      	ldr	r3, [r7, #16]
 8008396:	43db      	mvns	r3, r3
 8008398:	69ba      	ldr	r2, [r7, #24]
 800839a:	4013      	ands	r3, r2
 800839c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800839e:	683b      	ldr	r3, [r7, #0]
 80083a0:	685b      	ldr	r3, [r3, #4]
 80083a2:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80083a6:	2b00      	cmp	r3, #0
 80083a8:	d003      	beq.n	80083b2 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 80083aa:	69ba      	ldr	r2, [r7, #24]
 80083ac:	693b      	ldr	r3, [r7, #16]
 80083ae:	4313      	orrs	r3, r2
 80083b0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80083b2:	4a32      	ldr	r2, [pc, #200]	; (800847c <HAL_GPIO_Init+0x334>)
 80083b4:	69bb      	ldr	r3, [r7, #24]
 80083b6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80083b8:	4b30      	ldr	r3, [pc, #192]	; (800847c <HAL_GPIO_Init+0x334>)
 80083ba:	68db      	ldr	r3, [r3, #12]
 80083bc:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083be:	693b      	ldr	r3, [r7, #16]
 80083c0:	43db      	mvns	r3, r3
 80083c2:	69ba      	ldr	r2, [r7, #24]
 80083c4:	4013      	ands	r3, r2
 80083c6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80083c8:	683b      	ldr	r3, [r7, #0]
 80083ca:	685b      	ldr	r3, [r3, #4]
 80083cc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80083d0:	2b00      	cmp	r3, #0
 80083d2:	d003      	beq.n	80083dc <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80083d4:	69ba      	ldr	r2, [r7, #24]
 80083d6:	693b      	ldr	r3, [r7, #16]
 80083d8:	4313      	orrs	r3, r2
 80083da:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80083dc:	4a27      	ldr	r2, [pc, #156]	; (800847c <HAL_GPIO_Init+0x334>)
 80083de:	69bb      	ldr	r3, [r7, #24]
 80083e0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80083e2:	4b26      	ldr	r3, [pc, #152]	; (800847c <HAL_GPIO_Init+0x334>)
 80083e4:	685b      	ldr	r3, [r3, #4]
 80083e6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80083e8:	693b      	ldr	r3, [r7, #16]
 80083ea:	43db      	mvns	r3, r3
 80083ec:	69ba      	ldr	r2, [r7, #24]
 80083ee:	4013      	ands	r3, r2
 80083f0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80083f2:	683b      	ldr	r3, [r7, #0]
 80083f4:	685b      	ldr	r3, [r3, #4]
 80083f6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80083fa:	2b00      	cmp	r3, #0
 80083fc:	d003      	beq.n	8008406 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80083fe:	69ba      	ldr	r2, [r7, #24]
 8008400:	693b      	ldr	r3, [r7, #16]
 8008402:	4313      	orrs	r3, r2
 8008404:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8008406:	4a1d      	ldr	r2, [pc, #116]	; (800847c <HAL_GPIO_Init+0x334>)
 8008408:	69bb      	ldr	r3, [r7, #24]
 800840a:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800840c:	4b1b      	ldr	r3, [pc, #108]	; (800847c <HAL_GPIO_Init+0x334>)
 800840e:	681b      	ldr	r3, [r3, #0]
 8008410:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8008412:	693b      	ldr	r3, [r7, #16]
 8008414:	43db      	mvns	r3, r3
 8008416:	69ba      	ldr	r2, [r7, #24]
 8008418:	4013      	ands	r3, r2
 800841a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800841c:	683b      	ldr	r3, [r7, #0]
 800841e:	685b      	ldr	r3, [r3, #4]
 8008420:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8008424:	2b00      	cmp	r3, #0
 8008426:	d003      	beq.n	8008430 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8008428:	69ba      	ldr	r2, [r7, #24]
 800842a:	693b      	ldr	r3, [r7, #16]
 800842c:	4313      	orrs	r3, r2
 800842e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8008430:	4a12      	ldr	r2, [pc, #72]	; (800847c <HAL_GPIO_Init+0x334>)
 8008432:	69bb      	ldr	r3, [r7, #24]
 8008434:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8008436:	69fb      	ldr	r3, [r7, #28]
 8008438:	3301      	adds	r3, #1
 800843a:	61fb      	str	r3, [r7, #28]
 800843c:	69fb      	ldr	r3, [r7, #28]
 800843e:	2b0f      	cmp	r3, #15
 8008440:	f67f ae90 	bls.w	8008164 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8008444:	bf00      	nop
 8008446:	bf00      	nop
 8008448:	3724      	adds	r7, #36	; 0x24
 800844a:	46bd      	mov	sp, r7
 800844c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008450:	4770      	bx	lr
 8008452:	bf00      	nop
 8008454:	40023800 	.word	0x40023800
 8008458:	40013800 	.word	0x40013800
 800845c:	40020000 	.word	0x40020000
 8008460:	40020400 	.word	0x40020400
 8008464:	40020800 	.word	0x40020800
 8008468:	40020c00 	.word	0x40020c00
 800846c:	40021000 	.word	0x40021000
 8008470:	40021400 	.word	0x40021400
 8008474:	40021800 	.word	0x40021800
 8008478:	40021c00 	.word	0x40021c00
 800847c:	40013c00 	.word	0x40013c00

08008480 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8008480:	b480      	push	{r7}
 8008482:	b085      	sub	sp, #20
 8008484:	af00      	add	r7, sp, #0
 8008486:	6078      	str	r0, [r7, #4]
 8008488:	460b      	mov	r3, r1
 800848a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	691a      	ldr	r2, [r3, #16]
 8008490:	887b      	ldrh	r3, [r7, #2]
 8008492:	4013      	ands	r3, r2
 8008494:	2b00      	cmp	r3, #0
 8008496:	d002      	beq.n	800849e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8008498:	2301      	movs	r3, #1
 800849a:	73fb      	strb	r3, [r7, #15]
 800849c:	e001      	b.n	80084a2 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800849e:	2300      	movs	r3, #0
 80084a0:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 80084a2:	7bfb      	ldrb	r3, [r7, #15]
}
 80084a4:	4618      	mov	r0, r3
 80084a6:	3714      	adds	r7, #20
 80084a8:	46bd      	mov	sp, r7
 80084aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084ae:	4770      	bx	lr

080084b0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80084b0:	b480      	push	{r7}
 80084b2:	b083      	sub	sp, #12
 80084b4:	af00      	add	r7, sp, #0
 80084b6:	6078      	str	r0, [r7, #4]
 80084b8:	460b      	mov	r3, r1
 80084ba:	807b      	strh	r3, [r7, #2]
 80084bc:	4613      	mov	r3, r2
 80084be:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80084c0:	787b      	ldrb	r3, [r7, #1]
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d003      	beq.n	80084ce <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80084c6:	887a      	ldrh	r2, [r7, #2]
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80084cc:	e003      	b.n	80084d6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80084ce:	887b      	ldrh	r3, [r7, #2]
 80084d0:	041a      	lsls	r2, r3, #16
 80084d2:	687b      	ldr	r3, [r7, #4]
 80084d4:	619a      	str	r2, [r3, #24]
}
 80084d6:	bf00      	nop
 80084d8:	370c      	adds	r7, #12
 80084da:	46bd      	mov	sp, r7
 80084dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e0:	4770      	bx	lr

080084e2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80084e2:	b480      	push	{r7}
 80084e4:	b085      	sub	sp, #20
 80084e6:	af00      	add	r7, sp, #0
 80084e8:	6078      	str	r0, [r7, #4]
 80084ea:	460b      	mov	r3, r1
 80084ec:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80084ee:	687b      	ldr	r3, [r7, #4]
 80084f0:	695b      	ldr	r3, [r3, #20]
 80084f2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80084f4:	887a      	ldrh	r2, [r7, #2]
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	4013      	ands	r3, r2
 80084fa:	041a      	lsls	r2, r3, #16
 80084fc:	68fb      	ldr	r3, [r7, #12]
 80084fe:	43d9      	mvns	r1, r3
 8008500:	887b      	ldrh	r3, [r7, #2]
 8008502:	400b      	ands	r3, r1
 8008504:	431a      	orrs	r2, r3
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	619a      	str	r2, [r3, #24]
}
 800850a:	bf00      	nop
 800850c:	3714      	adds	r7, #20
 800850e:	46bd      	mov	sp, r7
 8008510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008514:	4770      	bx	lr
	...

08008518 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8008518:	b580      	push	{r7, lr}
 800851a:	b086      	sub	sp, #24
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8008520:	687b      	ldr	r3, [r7, #4]
 8008522:	2b00      	cmp	r3, #0
 8008524:	d101      	bne.n	800852a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8008526:	2301      	movs	r3, #1
 8008528:	e267      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	f003 0301 	and.w	r3, r3, #1
 8008532:	2b00      	cmp	r3, #0
 8008534:	d075      	beq.n	8008622 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8008536:	4b88      	ldr	r3, [pc, #544]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008538:	689b      	ldr	r3, [r3, #8]
 800853a:	f003 030c 	and.w	r3, r3, #12
 800853e:	2b04      	cmp	r3, #4
 8008540:	d00c      	beq.n	800855c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8008542:	4b85      	ldr	r3, [pc, #532]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008544:	689b      	ldr	r3, [r3, #8]
 8008546:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800854a:	2b08      	cmp	r3, #8
 800854c:	d112      	bne.n	8008574 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800854e:	4b82      	ldr	r3, [pc, #520]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008550:	685b      	ldr	r3, [r3, #4]
 8008552:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008556:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800855a:	d10b      	bne.n	8008574 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800855c:	4b7e      	ldr	r3, [pc, #504]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 800855e:	681b      	ldr	r3, [r3, #0]
 8008560:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008564:	2b00      	cmp	r3, #0
 8008566:	d05b      	beq.n	8008620 <HAL_RCC_OscConfig+0x108>
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	685b      	ldr	r3, [r3, #4]
 800856c:	2b00      	cmp	r3, #0
 800856e:	d157      	bne.n	8008620 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8008570:	2301      	movs	r3, #1
 8008572:	e242      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	685b      	ldr	r3, [r3, #4]
 8008578:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800857c:	d106      	bne.n	800858c <HAL_RCC_OscConfig+0x74>
 800857e:	4b76      	ldr	r3, [pc, #472]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a75      	ldr	r2, [pc, #468]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008584:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8008588:	6013      	str	r3, [r2, #0]
 800858a:	e01d      	b.n	80085c8 <HAL_RCC_OscConfig+0xb0>
 800858c:	687b      	ldr	r3, [r7, #4]
 800858e:	685b      	ldr	r3, [r3, #4]
 8008590:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8008594:	d10c      	bne.n	80085b0 <HAL_RCC_OscConfig+0x98>
 8008596:	4b70      	ldr	r3, [pc, #448]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008598:	681b      	ldr	r3, [r3, #0]
 800859a:	4a6f      	ldr	r2, [pc, #444]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 800859c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80085a0:	6013      	str	r3, [r2, #0]
 80085a2:	4b6d      	ldr	r3, [pc, #436]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80085a4:	681b      	ldr	r3, [r3, #0]
 80085a6:	4a6c      	ldr	r2, [pc, #432]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80085a8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80085ac:	6013      	str	r3, [r2, #0]
 80085ae:	e00b      	b.n	80085c8 <HAL_RCC_OscConfig+0xb0>
 80085b0:	4b69      	ldr	r3, [pc, #420]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a68      	ldr	r2, [pc, #416]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80085b6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80085ba:	6013      	str	r3, [r2, #0]
 80085bc:	4b66      	ldr	r3, [pc, #408]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80085be:	681b      	ldr	r3, [r3, #0]
 80085c0:	4a65      	ldr	r2, [pc, #404]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80085c2:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80085c6:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	685b      	ldr	r3, [r3, #4]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d013      	beq.n	80085f8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085d0:	f7ff f8e8 	bl	80077a4 <HAL_GetTick>
 80085d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085d6:	e008      	b.n	80085ea <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80085d8:	f7ff f8e4 	bl	80077a4 <HAL_GetTick>
 80085dc:	4602      	mov	r2, r0
 80085de:	693b      	ldr	r3, [r7, #16]
 80085e0:	1ad3      	subs	r3, r2, r3
 80085e2:	2b64      	cmp	r3, #100	; 0x64
 80085e4:	d901      	bls.n	80085ea <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80085e6:	2303      	movs	r3, #3
 80085e8:	e207      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80085ea:	4b5b      	ldr	r3, [pc, #364]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80085ec:	681b      	ldr	r3, [r3, #0]
 80085ee:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80085f2:	2b00      	cmp	r3, #0
 80085f4:	d0f0      	beq.n	80085d8 <HAL_RCC_OscConfig+0xc0>
 80085f6:	e014      	b.n	8008622 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80085f8:	f7ff f8d4 	bl	80077a4 <HAL_GetTick>
 80085fc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80085fe:	e008      	b.n	8008612 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8008600:	f7ff f8d0 	bl	80077a4 <HAL_GetTick>
 8008604:	4602      	mov	r2, r0
 8008606:	693b      	ldr	r3, [r7, #16]
 8008608:	1ad3      	subs	r3, r2, r3
 800860a:	2b64      	cmp	r3, #100	; 0x64
 800860c:	d901      	bls.n	8008612 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800860e:	2303      	movs	r3, #3
 8008610:	e1f3      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8008612:	4b51      	ldr	r3, [pc, #324]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008614:	681b      	ldr	r3, [r3, #0]
 8008616:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800861a:	2b00      	cmp	r3, #0
 800861c:	d1f0      	bne.n	8008600 <HAL_RCC_OscConfig+0xe8>
 800861e:	e000      	b.n	8008622 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8008620:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f003 0302 	and.w	r3, r3, #2
 800862a:	2b00      	cmp	r3, #0
 800862c:	d063      	beq.n	80086f6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800862e:	4b4a      	ldr	r3, [pc, #296]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008630:	689b      	ldr	r3, [r3, #8]
 8008632:	f003 030c 	and.w	r3, r3, #12
 8008636:	2b00      	cmp	r3, #0
 8008638:	d00b      	beq.n	8008652 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800863a:	4b47      	ldr	r3, [pc, #284]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 800863c:	689b      	ldr	r3, [r3, #8]
 800863e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8008642:	2b08      	cmp	r3, #8
 8008644:	d11c      	bne.n	8008680 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8008646:	4b44      	ldr	r3, [pc, #272]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008648:	685b      	ldr	r3, [r3, #4]
 800864a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800864e:	2b00      	cmp	r3, #0
 8008650:	d116      	bne.n	8008680 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8008652:	4b41      	ldr	r3, [pc, #260]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	f003 0302 	and.w	r3, r3, #2
 800865a:	2b00      	cmp	r3, #0
 800865c:	d005      	beq.n	800866a <HAL_RCC_OscConfig+0x152>
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	68db      	ldr	r3, [r3, #12]
 8008662:	2b01      	cmp	r3, #1
 8008664:	d001      	beq.n	800866a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8008666:	2301      	movs	r3, #1
 8008668:	e1c7      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800866a:	4b3b      	ldr	r3, [pc, #236]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 800866c:	681b      	ldr	r3, [r3, #0]
 800866e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	691b      	ldr	r3, [r3, #16]
 8008676:	00db      	lsls	r3, r3, #3
 8008678:	4937      	ldr	r1, [pc, #220]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 800867a:	4313      	orrs	r3, r2
 800867c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800867e:	e03a      	b.n	80086f6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	68db      	ldr	r3, [r3, #12]
 8008684:	2b00      	cmp	r3, #0
 8008686:	d020      	beq.n	80086ca <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8008688:	4b34      	ldr	r3, [pc, #208]	; (800875c <HAL_RCC_OscConfig+0x244>)
 800868a:	2201      	movs	r2, #1
 800868c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800868e:	f7ff f889 	bl	80077a4 <HAL_GetTick>
 8008692:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008694:	e008      	b.n	80086a8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8008696:	f7ff f885 	bl	80077a4 <HAL_GetTick>
 800869a:	4602      	mov	r2, r0
 800869c:	693b      	ldr	r3, [r7, #16]
 800869e:	1ad3      	subs	r3, r2, r3
 80086a0:	2b02      	cmp	r3, #2
 80086a2:	d901      	bls.n	80086a8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80086a4:	2303      	movs	r3, #3
 80086a6:	e1a8      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80086a8:	4b2b      	ldr	r3, [pc, #172]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f003 0302 	and.w	r3, r3, #2
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d0f0      	beq.n	8008696 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80086b4:	4b28      	ldr	r3, [pc, #160]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80086b6:	681b      	ldr	r3, [r3, #0]
 80086b8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	691b      	ldr	r3, [r3, #16]
 80086c0:	00db      	lsls	r3, r3, #3
 80086c2:	4925      	ldr	r1, [pc, #148]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80086c4:	4313      	orrs	r3, r2
 80086c6:	600b      	str	r3, [r1, #0]
 80086c8:	e015      	b.n	80086f6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80086ca:	4b24      	ldr	r3, [pc, #144]	; (800875c <HAL_RCC_OscConfig+0x244>)
 80086cc:	2200      	movs	r2, #0
 80086ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80086d0:	f7ff f868 	bl	80077a4 <HAL_GetTick>
 80086d4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086d6:	e008      	b.n	80086ea <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80086d8:	f7ff f864 	bl	80077a4 <HAL_GetTick>
 80086dc:	4602      	mov	r2, r0
 80086de:	693b      	ldr	r3, [r7, #16]
 80086e0:	1ad3      	subs	r3, r2, r3
 80086e2:	2b02      	cmp	r3, #2
 80086e4:	d901      	bls.n	80086ea <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80086e6:	2303      	movs	r3, #3
 80086e8:	e187      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80086ea:	4b1b      	ldr	r3, [pc, #108]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 80086ec:	681b      	ldr	r3, [r3, #0]
 80086ee:	f003 0302 	and.w	r3, r3, #2
 80086f2:	2b00      	cmp	r3, #0
 80086f4:	d1f0      	bne.n	80086d8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80086f6:	687b      	ldr	r3, [r7, #4]
 80086f8:	681b      	ldr	r3, [r3, #0]
 80086fa:	f003 0308 	and.w	r3, r3, #8
 80086fe:	2b00      	cmp	r3, #0
 8008700:	d036      	beq.n	8008770 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	695b      	ldr	r3, [r3, #20]
 8008706:	2b00      	cmp	r3, #0
 8008708:	d016      	beq.n	8008738 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800870a:	4b15      	ldr	r3, [pc, #84]	; (8008760 <HAL_RCC_OscConfig+0x248>)
 800870c:	2201      	movs	r2, #1
 800870e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008710:	f7ff f848 	bl	80077a4 <HAL_GetTick>
 8008714:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8008716:	e008      	b.n	800872a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008718:	f7ff f844 	bl	80077a4 <HAL_GetTick>
 800871c:	4602      	mov	r2, r0
 800871e:	693b      	ldr	r3, [r7, #16]
 8008720:	1ad3      	subs	r3, r2, r3
 8008722:	2b02      	cmp	r3, #2
 8008724:	d901      	bls.n	800872a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8008726:	2303      	movs	r3, #3
 8008728:	e167      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800872a:	4b0b      	ldr	r3, [pc, #44]	; (8008758 <HAL_RCC_OscConfig+0x240>)
 800872c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800872e:	f003 0302 	and.w	r3, r3, #2
 8008732:	2b00      	cmp	r3, #0
 8008734:	d0f0      	beq.n	8008718 <HAL_RCC_OscConfig+0x200>
 8008736:	e01b      	b.n	8008770 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8008738:	4b09      	ldr	r3, [pc, #36]	; (8008760 <HAL_RCC_OscConfig+0x248>)
 800873a:	2200      	movs	r2, #0
 800873c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800873e:	f7ff f831 	bl	80077a4 <HAL_GetTick>
 8008742:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008744:	e00e      	b.n	8008764 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8008746:	f7ff f82d 	bl	80077a4 <HAL_GetTick>
 800874a:	4602      	mov	r2, r0
 800874c:	693b      	ldr	r3, [r7, #16]
 800874e:	1ad3      	subs	r3, r2, r3
 8008750:	2b02      	cmp	r3, #2
 8008752:	d907      	bls.n	8008764 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8008754:	2303      	movs	r3, #3
 8008756:	e150      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
 8008758:	40023800 	.word	0x40023800
 800875c:	42470000 	.word	0x42470000
 8008760:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8008764:	4b88      	ldr	r3, [pc, #544]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008766:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8008768:	f003 0302 	and.w	r3, r3, #2
 800876c:	2b00      	cmp	r3, #0
 800876e:	d1ea      	bne.n	8008746 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f003 0304 	and.w	r3, r3, #4
 8008778:	2b00      	cmp	r3, #0
 800877a:	f000 8097 	beq.w	80088ac <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800877e:	2300      	movs	r3, #0
 8008780:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8008782:	4b81      	ldr	r3, [pc, #516]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008784:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008786:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800878a:	2b00      	cmp	r3, #0
 800878c:	d10f      	bne.n	80087ae <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800878e:	2300      	movs	r3, #0
 8008790:	60bb      	str	r3, [r7, #8]
 8008792:	4b7d      	ldr	r3, [pc, #500]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008794:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008796:	4a7c      	ldr	r2, [pc, #496]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008798:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800879c:	6413      	str	r3, [r2, #64]	; 0x40
 800879e:	4b7a      	ldr	r3, [pc, #488]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 80087a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80087a2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80087a6:	60bb      	str	r3, [r7, #8]
 80087a8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80087aa:	2301      	movs	r3, #1
 80087ac:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087ae:	4b77      	ldr	r3, [pc, #476]	; (800898c <HAL_RCC_OscConfig+0x474>)
 80087b0:	681b      	ldr	r3, [r3, #0]
 80087b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087b6:	2b00      	cmp	r3, #0
 80087b8:	d118      	bne.n	80087ec <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80087ba:	4b74      	ldr	r3, [pc, #464]	; (800898c <HAL_RCC_OscConfig+0x474>)
 80087bc:	681b      	ldr	r3, [r3, #0]
 80087be:	4a73      	ldr	r2, [pc, #460]	; (800898c <HAL_RCC_OscConfig+0x474>)
 80087c0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80087c4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80087c6:	f7fe ffed 	bl	80077a4 <HAL_GetTick>
 80087ca:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087cc:	e008      	b.n	80087e0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80087ce:	f7fe ffe9 	bl	80077a4 <HAL_GetTick>
 80087d2:	4602      	mov	r2, r0
 80087d4:	693b      	ldr	r3, [r7, #16]
 80087d6:	1ad3      	subs	r3, r2, r3
 80087d8:	2b02      	cmp	r3, #2
 80087da:	d901      	bls.n	80087e0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e10c      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80087e0:	4b6a      	ldr	r3, [pc, #424]	; (800898c <HAL_RCC_OscConfig+0x474>)
 80087e2:	681b      	ldr	r3, [r3, #0]
 80087e4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d0f0      	beq.n	80087ce <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80087ec:	687b      	ldr	r3, [r7, #4]
 80087ee:	689b      	ldr	r3, [r3, #8]
 80087f0:	2b01      	cmp	r3, #1
 80087f2:	d106      	bne.n	8008802 <HAL_RCC_OscConfig+0x2ea>
 80087f4:	4b64      	ldr	r3, [pc, #400]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 80087f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80087f8:	4a63      	ldr	r2, [pc, #396]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 80087fa:	f043 0301 	orr.w	r3, r3, #1
 80087fe:	6713      	str	r3, [r2, #112]	; 0x70
 8008800:	e01c      	b.n	800883c <HAL_RCC_OscConfig+0x324>
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	689b      	ldr	r3, [r3, #8]
 8008806:	2b05      	cmp	r3, #5
 8008808:	d10c      	bne.n	8008824 <HAL_RCC_OscConfig+0x30c>
 800880a:	4b5f      	ldr	r3, [pc, #380]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 800880c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800880e:	4a5e      	ldr	r2, [pc, #376]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008810:	f043 0304 	orr.w	r3, r3, #4
 8008814:	6713      	str	r3, [r2, #112]	; 0x70
 8008816:	4b5c      	ldr	r3, [pc, #368]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008818:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800881a:	4a5b      	ldr	r2, [pc, #364]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 800881c:	f043 0301 	orr.w	r3, r3, #1
 8008820:	6713      	str	r3, [r2, #112]	; 0x70
 8008822:	e00b      	b.n	800883c <HAL_RCC_OscConfig+0x324>
 8008824:	4b58      	ldr	r3, [pc, #352]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008826:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008828:	4a57      	ldr	r2, [pc, #348]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 800882a:	f023 0301 	bic.w	r3, r3, #1
 800882e:	6713      	str	r3, [r2, #112]	; 0x70
 8008830:	4b55      	ldr	r3, [pc, #340]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008832:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008834:	4a54      	ldr	r2, [pc, #336]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008836:	f023 0304 	bic.w	r3, r3, #4
 800883a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	689b      	ldr	r3, [r3, #8]
 8008840:	2b00      	cmp	r3, #0
 8008842:	d015      	beq.n	8008870 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8008844:	f7fe ffae 	bl	80077a4 <HAL_GetTick>
 8008848:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800884a:	e00a      	b.n	8008862 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800884c:	f7fe ffaa 	bl	80077a4 <HAL_GetTick>
 8008850:	4602      	mov	r2, r0
 8008852:	693b      	ldr	r3, [r7, #16]
 8008854:	1ad3      	subs	r3, r2, r3
 8008856:	f241 3288 	movw	r2, #5000	; 0x1388
 800885a:	4293      	cmp	r3, r2
 800885c:	d901      	bls.n	8008862 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800885e:	2303      	movs	r3, #3
 8008860:	e0cb      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8008862:	4b49      	ldr	r3, [pc, #292]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008864:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008866:	f003 0302 	and.w	r3, r3, #2
 800886a:	2b00      	cmp	r3, #0
 800886c:	d0ee      	beq.n	800884c <HAL_RCC_OscConfig+0x334>
 800886e:	e014      	b.n	800889a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8008870:	f7fe ff98 	bl	80077a4 <HAL_GetTick>
 8008874:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8008876:	e00a      	b.n	800888e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8008878:	f7fe ff94 	bl	80077a4 <HAL_GetTick>
 800887c:	4602      	mov	r2, r0
 800887e:	693b      	ldr	r3, [r7, #16]
 8008880:	1ad3      	subs	r3, r2, r3
 8008882:	f241 3288 	movw	r2, #5000	; 0x1388
 8008886:	4293      	cmp	r3, r2
 8008888:	d901      	bls.n	800888e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800888a:	2303      	movs	r3, #3
 800888c:	e0b5      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800888e:	4b3e      	ldr	r3, [pc, #248]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008890:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8008892:	f003 0302 	and.w	r3, r3, #2
 8008896:	2b00      	cmp	r3, #0
 8008898:	d1ee      	bne.n	8008878 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800889a:	7dfb      	ldrb	r3, [r7, #23]
 800889c:	2b01      	cmp	r3, #1
 800889e:	d105      	bne.n	80088ac <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80088a0:	4b39      	ldr	r3, [pc, #228]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 80088a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088a4:	4a38      	ldr	r2, [pc, #224]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 80088a6:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80088aa:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80088ac:	687b      	ldr	r3, [r7, #4]
 80088ae:	699b      	ldr	r3, [r3, #24]
 80088b0:	2b00      	cmp	r3, #0
 80088b2:	f000 80a1 	beq.w	80089f8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80088b6:	4b34      	ldr	r3, [pc, #208]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 80088b8:	689b      	ldr	r3, [r3, #8]
 80088ba:	f003 030c 	and.w	r3, r3, #12
 80088be:	2b08      	cmp	r3, #8
 80088c0:	d05c      	beq.n	800897c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	699b      	ldr	r3, [r3, #24]
 80088c6:	2b02      	cmp	r3, #2
 80088c8:	d141      	bne.n	800894e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80088ca:	4b31      	ldr	r3, [pc, #196]	; (8008990 <HAL_RCC_OscConfig+0x478>)
 80088cc:	2200      	movs	r2, #0
 80088ce:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80088d0:	f7fe ff68 	bl	80077a4 <HAL_GetTick>
 80088d4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088d6:	e008      	b.n	80088ea <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80088d8:	f7fe ff64 	bl	80077a4 <HAL_GetTick>
 80088dc:	4602      	mov	r2, r0
 80088de:	693b      	ldr	r3, [r7, #16]
 80088e0:	1ad3      	subs	r3, r2, r3
 80088e2:	2b02      	cmp	r3, #2
 80088e4:	d901      	bls.n	80088ea <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80088e6:	2303      	movs	r3, #3
 80088e8:	e087      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80088ea:	4b27      	ldr	r3, [pc, #156]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 80088ec:	681b      	ldr	r3, [r3, #0]
 80088ee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80088f2:	2b00      	cmp	r3, #0
 80088f4:	d1f0      	bne.n	80088d8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80088f6:	687b      	ldr	r3, [r7, #4]
 80088f8:	69da      	ldr	r2, [r3, #28]
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6a1b      	ldr	r3, [r3, #32]
 80088fe:	431a      	orrs	r2, r3
 8008900:	687b      	ldr	r3, [r7, #4]
 8008902:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8008904:	019b      	lsls	r3, r3, #6
 8008906:	431a      	orrs	r2, r3
 8008908:	687b      	ldr	r3, [r7, #4]
 800890a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800890c:	085b      	lsrs	r3, r3, #1
 800890e:	3b01      	subs	r3, #1
 8008910:	041b      	lsls	r3, r3, #16
 8008912:	431a      	orrs	r2, r3
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008918:	061b      	lsls	r3, r3, #24
 800891a:	491b      	ldr	r1, [pc, #108]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 800891c:	4313      	orrs	r3, r2
 800891e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8008920:	4b1b      	ldr	r3, [pc, #108]	; (8008990 <HAL_RCC_OscConfig+0x478>)
 8008922:	2201      	movs	r2, #1
 8008924:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008926:	f7fe ff3d 	bl	80077a4 <HAL_GetTick>
 800892a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800892c:	e008      	b.n	8008940 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800892e:	f7fe ff39 	bl	80077a4 <HAL_GetTick>
 8008932:	4602      	mov	r2, r0
 8008934:	693b      	ldr	r3, [r7, #16]
 8008936:	1ad3      	subs	r3, r2, r3
 8008938:	2b02      	cmp	r3, #2
 800893a:	d901      	bls.n	8008940 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800893c:	2303      	movs	r3, #3
 800893e:	e05c      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008940:	4b11      	ldr	r3, [pc, #68]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008948:	2b00      	cmp	r3, #0
 800894a:	d0f0      	beq.n	800892e <HAL_RCC_OscConfig+0x416>
 800894c:	e054      	b.n	80089f8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800894e:	4b10      	ldr	r3, [pc, #64]	; (8008990 <HAL_RCC_OscConfig+0x478>)
 8008950:	2200      	movs	r2, #0
 8008952:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8008954:	f7fe ff26 	bl	80077a4 <HAL_GetTick>
 8008958:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800895a:	e008      	b.n	800896e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800895c:	f7fe ff22 	bl	80077a4 <HAL_GetTick>
 8008960:	4602      	mov	r2, r0
 8008962:	693b      	ldr	r3, [r7, #16]
 8008964:	1ad3      	subs	r3, r2, r3
 8008966:	2b02      	cmp	r3, #2
 8008968:	d901      	bls.n	800896e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800896a:	2303      	movs	r3, #3
 800896c:	e045      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800896e:	4b06      	ldr	r3, [pc, #24]	; (8008988 <HAL_RCC_OscConfig+0x470>)
 8008970:	681b      	ldr	r3, [r3, #0]
 8008972:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008976:	2b00      	cmp	r3, #0
 8008978:	d1f0      	bne.n	800895c <HAL_RCC_OscConfig+0x444>
 800897a:	e03d      	b.n	80089f8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	699b      	ldr	r3, [r3, #24]
 8008980:	2b01      	cmp	r3, #1
 8008982:	d107      	bne.n	8008994 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8008984:	2301      	movs	r3, #1
 8008986:	e038      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
 8008988:	40023800 	.word	0x40023800
 800898c:	40007000 	.word	0x40007000
 8008990:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8008994:	4b1b      	ldr	r3, [pc, #108]	; (8008a04 <HAL_RCC_OscConfig+0x4ec>)
 8008996:	685b      	ldr	r3, [r3, #4]
 8008998:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800899a:	687b      	ldr	r3, [r7, #4]
 800899c:	699b      	ldr	r3, [r3, #24]
 800899e:	2b01      	cmp	r3, #1
 80089a0:	d028      	beq.n	80089f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089a2:	68fb      	ldr	r3, [r7, #12]
 80089a4:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80089a8:	687b      	ldr	r3, [r7, #4]
 80089aa:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80089ac:	429a      	cmp	r2, r3
 80089ae:	d121      	bne.n	80089f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089b0:	68fb      	ldr	r3, [r7, #12]
 80089b2:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80089b6:	687b      	ldr	r3, [r7, #4]
 80089b8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80089ba:	429a      	cmp	r2, r3
 80089bc:	d11a      	bne.n	80089f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089be:	68fa      	ldr	r2, [r7, #12]
 80089c0:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80089c4:	4013      	ands	r3, r2
 80089c6:	687a      	ldr	r2, [r7, #4]
 80089c8:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80089ca:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80089cc:	4293      	cmp	r3, r2
 80089ce:	d111      	bne.n	80089f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80089d6:	687b      	ldr	r3, [r7, #4]
 80089d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80089da:	085b      	lsrs	r3, r3, #1
 80089dc:	3b01      	subs	r3, #1
 80089de:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80089e0:	429a      	cmp	r2, r3
 80089e2:	d107      	bne.n	80089f4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80089e4:	68fb      	ldr	r3, [r7, #12]
 80089e6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80089ee:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80089f0:	429a      	cmp	r2, r3
 80089f2:	d001      	beq.n	80089f8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80089f4:	2301      	movs	r3, #1
 80089f6:	e000      	b.n	80089fa <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80089f8:	2300      	movs	r3, #0
}
 80089fa:	4618      	mov	r0, r3
 80089fc:	3718      	adds	r7, #24
 80089fe:	46bd      	mov	sp, r7
 8008a00:	bd80      	pop	{r7, pc}
 8008a02:	bf00      	nop
 8008a04:	40023800 	.word	0x40023800

08008a08 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8008a08:	b580      	push	{r7, lr}
 8008a0a:	b084      	sub	sp, #16
 8008a0c:	af00      	add	r7, sp, #0
 8008a0e:	6078      	str	r0, [r7, #4]
 8008a10:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8008a12:	687b      	ldr	r3, [r7, #4]
 8008a14:	2b00      	cmp	r3, #0
 8008a16:	d101      	bne.n	8008a1c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8008a18:	2301      	movs	r3, #1
 8008a1a:	e0cc      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8008a1c:	4b68      	ldr	r3, [pc, #416]	; (8008bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f003 0307 	and.w	r3, r3, #7
 8008a24:	683a      	ldr	r2, [r7, #0]
 8008a26:	429a      	cmp	r2, r3
 8008a28:	d90c      	bls.n	8008a44 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008a2a:	4b65      	ldr	r3, [pc, #404]	; (8008bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a2c:	683a      	ldr	r2, [r7, #0]
 8008a2e:	b2d2      	uxtb	r2, r2
 8008a30:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008a32:	4b63      	ldr	r3, [pc, #396]	; (8008bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	f003 0307 	and.w	r3, r3, #7
 8008a3a:	683a      	ldr	r2, [r7, #0]
 8008a3c:	429a      	cmp	r2, r3
 8008a3e:	d001      	beq.n	8008a44 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8008a40:	2301      	movs	r3, #1
 8008a42:	e0b8      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8008a44:	687b      	ldr	r3, [r7, #4]
 8008a46:	681b      	ldr	r3, [r3, #0]
 8008a48:	f003 0302 	and.w	r3, r3, #2
 8008a4c:	2b00      	cmp	r3, #0
 8008a4e:	d020      	beq.n	8008a92 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008a50:	687b      	ldr	r3, [r7, #4]
 8008a52:	681b      	ldr	r3, [r3, #0]
 8008a54:	f003 0304 	and.w	r3, r3, #4
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	d005      	beq.n	8008a68 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8008a5c:	4b59      	ldr	r3, [pc, #356]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a5e:	689b      	ldr	r3, [r3, #8]
 8008a60:	4a58      	ldr	r2, [pc, #352]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a62:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8008a66:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008a68:	687b      	ldr	r3, [r7, #4]
 8008a6a:	681b      	ldr	r3, [r3, #0]
 8008a6c:	f003 0308 	and.w	r3, r3, #8
 8008a70:	2b00      	cmp	r3, #0
 8008a72:	d005      	beq.n	8008a80 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8008a74:	4b53      	ldr	r3, [pc, #332]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a76:	689b      	ldr	r3, [r3, #8]
 8008a78:	4a52      	ldr	r2, [pc, #328]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a7a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8008a7e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8008a80:	4b50      	ldr	r3, [pc, #320]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a82:	689b      	ldr	r3, [r3, #8]
 8008a84:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8008a88:	687b      	ldr	r3, [r7, #4]
 8008a8a:	689b      	ldr	r3, [r3, #8]
 8008a8c:	494d      	ldr	r1, [pc, #308]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008a8e:	4313      	orrs	r3, r2
 8008a90:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8008a92:	687b      	ldr	r3, [r7, #4]
 8008a94:	681b      	ldr	r3, [r3, #0]
 8008a96:	f003 0301 	and.w	r3, r3, #1
 8008a9a:	2b00      	cmp	r3, #0
 8008a9c:	d044      	beq.n	8008b28 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8008a9e:	687b      	ldr	r3, [r7, #4]
 8008aa0:	685b      	ldr	r3, [r3, #4]
 8008aa2:	2b01      	cmp	r3, #1
 8008aa4:	d107      	bne.n	8008ab6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8008aa6:	4b47      	ldr	r3, [pc, #284]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8008aae:	2b00      	cmp	r3, #0
 8008ab0:	d119      	bne.n	8008ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ab2:	2301      	movs	r3, #1
 8008ab4:	e07f      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	685b      	ldr	r3, [r3, #4]
 8008aba:	2b02      	cmp	r3, #2
 8008abc:	d003      	beq.n	8008ac6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8008abe:	687b      	ldr	r3, [r7, #4]
 8008ac0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8008ac2:	2b03      	cmp	r3, #3
 8008ac4:	d107      	bne.n	8008ad6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8008ac6:	4b3f      	ldr	r3, [pc, #252]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ac8:	681b      	ldr	r3, [r3, #0]
 8008aca:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8008ace:	2b00      	cmp	r3, #0
 8008ad0:	d109      	bne.n	8008ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ad2:	2301      	movs	r3, #1
 8008ad4:	e06f      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8008ad6:	4b3b      	ldr	r3, [pc, #236]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ad8:	681b      	ldr	r3, [r3, #0]
 8008ada:	f003 0302 	and.w	r3, r3, #2
 8008ade:	2b00      	cmp	r3, #0
 8008ae0:	d101      	bne.n	8008ae6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8008ae2:	2301      	movs	r3, #1
 8008ae4:	e067      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8008ae6:	4b37      	ldr	r3, [pc, #220]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008ae8:	689b      	ldr	r3, [r3, #8]
 8008aea:	f023 0203 	bic.w	r2, r3, #3
 8008aee:	687b      	ldr	r3, [r7, #4]
 8008af0:	685b      	ldr	r3, [r3, #4]
 8008af2:	4934      	ldr	r1, [pc, #208]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008af4:	4313      	orrs	r3, r2
 8008af6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8008af8:	f7fe fe54 	bl	80077a4 <HAL_GetTick>
 8008afc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008afe:	e00a      	b.n	8008b16 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8008b00:	f7fe fe50 	bl	80077a4 <HAL_GetTick>
 8008b04:	4602      	mov	r2, r0
 8008b06:	68fb      	ldr	r3, [r7, #12]
 8008b08:	1ad3      	subs	r3, r2, r3
 8008b0a:	f241 3288 	movw	r2, #5000	; 0x1388
 8008b0e:	4293      	cmp	r3, r2
 8008b10:	d901      	bls.n	8008b16 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8008b12:	2303      	movs	r3, #3
 8008b14:	e04f      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8008b16:	4b2b      	ldr	r3, [pc, #172]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b18:	689b      	ldr	r3, [r3, #8]
 8008b1a:	f003 020c 	and.w	r2, r3, #12
 8008b1e:	687b      	ldr	r3, [r7, #4]
 8008b20:	685b      	ldr	r3, [r3, #4]
 8008b22:	009b      	lsls	r3, r3, #2
 8008b24:	429a      	cmp	r2, r3
 8008b26:	d1eb      	bne.n	8008b00 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8008b28:	4b25      	ldr	r3, [pc, #148]	; (8008bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f003 0307 	and.w	r3, r3, #7
 8008b30:	683a      	ldr	r2, [r7, #0]
 8008b32:	429a      	cmp	r2, r3
 8008b34:	d20c      	bcs.n	8008b50 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8008b36:	4b22      	ldr	r3, [pc, #136]	; (8008bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b38:	683a      	ldr	r2, [r7, #0]
 8008b3a:	b2d2      	uxtb	r2, r2
 8008b3c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8008b3e:	4b20      	ldr	r3, [pc, #128]	; (8008bc0 <HAL_RCC_ClockConfig+0x1b8>)
 8008b40:	681b      	ldr	r3, [r3, #0]
 8008b42:	f003 0307 	and.w	r3, r3, #7
 8008b46:	683a      	ldr	r2, [r7, #0]
 8008b48:	429a      	cmp	r2, r3
 8008b4a:	d001      	beq.n	8008b50 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8008b4c:	2301      	movs	r3, #1
 8008b4e:	e032      	b.n	8008bb6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	f003 0304 	and.w	r3, r3, #4
 8008b58:	2b00      	cmp	r3, #0
 8008b5a:	d008      	beq.n	8008b6e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8008b5c:	4b19      	ldr	r3, [pc, #100]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b5e:	689b      	ldr	r3, [r3, #8]
 8008b60:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	68db      	ldr	r3, [r3, #12]
 8008b68:	4916      	ldr	r1, [pc, #88]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	f003 0308 	and.w	r3, r3, #8
 8008b76:	2b00      	cmp	r3, #0
 8008b78:	d009      	beq.n	8008b8e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8008b7a:	4b12      	ldr	r3, [pc, #72]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b7c:	689b      	ldr	r3, [r3, #8]
 8008b7e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	691b      	ldr	r3, [r3, #16]
 8008b86:	00db      	lsls	r3, r3, #3
 8008b88:	490e      	ldr	r1, [pc, #56]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b8a:	4313      	orrs	r3, r2
 8008b8c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8008b8e:	f000 f821 	bl	8008bd4 <HAL_RCC_GetSysClockFreq>
 8008b92:	4602      	mov	r2, r0
 8008b94:	4b0b      	ldr	r3, [pc, #44]	; (8008bc4 <HAL_RCC_ClockConfig+0x1bc>)
 8008b96:	689b      	ldr	r3, [r3, #8]
 8008b98:	091b      	lsrs	r3, r3, #4
 8008b9a:	f003 030f 	and.w	r3, r3, #15
 8008b9e:	490a      	ldr	r1, [pc, #40]	; (8008bc8 <HAL_RCC_ClockConfig+0x1c0>)
 8008ba0:	5ccb      	ldrb	r3, [r1, r3]
 8008ba2:	fa22 f303 	lsr.w	r3, r2, r3
 8008ba6:	4a09      	ldr	r2, [pc, #36]	; (8008bcc <HAL_RCC_ClockConfig+0x1c4>)
 8008ba8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8008baa:	4b09      	ldr	r3, [pc, #36]	; (8008bd0 <HAL_RCC_ClockConfig+0x1c8>)
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	4618      	mov	r0, r3
 8008bb0:	f7fe fdb4 	bl	800771c <HAL_InitTick>

  return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
}
 8008bb6:	4618      	mov	r0, r3
 8008bb8:	3710      	adds	r7, #16
 8008bba:	46bd      	mov	sp, r7
 8008bbc:	bd80      	pop	{r7, pc}
 8008bbe:	bf00      	nop
 8008bc0:	40023c00 	.word	0x40023c00
 8008bc4:	40023800 	.word	0x40023800
 8008bc8:	0800f8d8 	.word	0x0800f8d8
 8008bcc:	20000014 	.word	0x20000014
 8008bd0:	20000018 	.word	0x20000018

08008bd4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8008bd4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8008bd8:	b090      	sub	sp, #64	; 0x40
 8008bda:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8008bdc:	2300      	movs	r3, #0
 8008bde:	637b      	str	r3, [r7, #52]	; 0x34
 8008be0:	2300      	movs	r3, #0
 8008be2:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008be4:	2300      	movs	r3, #0
 8008be6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8008be8:	2300      	movs	r3, #0
 8008bea:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8008bec:	4b59      	ldr	r3, [pc, #356]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8008bee:	689b      	ldr	r3, [r3, #8]
 8008bf0:	f003 030c 	and.w	r3, r3, #12
 8008bf4:	2b08      	cmp	r3, #8
 8008bf6:	d00d      	beq.n	8008c14 <HAL_RCC_GetSysClockFreq+0x40>
 8008bf8:	2b08      	cmp	r3, #8
 8008bfa:	f200 80a1 	bhi.w	8008d40 <HAL_RCC_GetSysClockFreq+0x16c>
 8008bfe:	2b00      	cmp	r3, #0
 8008c00:	d002      	beq.n	8008c08 <HAL_RCC_GetSysClockFreq+0x34>
 8008c02:	2b04      	cmp	r3, #4
 8008c04:	d003      	beq.n	8008c0e <HAL_RCC_GetSysClockFreq+0x3a>
 8008c06:	e09b      	b.n	8008d40 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8008c08:	4b53      	ldr	r3, [pc, #332]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8008c0a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8008c0c:	e09b      	b.n	8008d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8008c0e:	4b53      	ldr	r3, [pc, #332]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8008c10:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008c12:	e098      	b.n	8008d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8008c14:	4b4f      	ldr	r3, [pc, #316]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c16:	685b      	ldr	r3, [r3, #4]
 8008c18:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8008c1c:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8008c1e:	4b4d      	ldr	r3, [pc, #308]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c20:	685b      	ldr	r3, [r3, #4]
 8008c22:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8008c26:	2b00      	cmp	r3, #0
 8008c28:	d028      	beq.n	8008c7c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c2a:	4b4a      	ldr	r3, [pc, #296]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	099b      	lsrs	r3, r3, #6
 8008c30:	2200      	movs	r2, #0
 8008c32:	623b      	str	r3, [r7, #32]
 8008c34:	627a      	str	r2, [r7, #36]	; 0x24
 8008c36:	6a3b      	ldr	r3, [r7, #32]
 8008c38:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8008c3c:	2100      	movs	r1, #0
 8008c3e:	4b47      	ldr	r3, [pc, #284]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8008c40:	fb03 f201 	mul.w	r2, r3, r1
 8008c44:	2300      	movs	r3, #0
 8008c46:	fb00 f303 	mul.w	r3, r0, r3
 8008c4a:	4413      	add	r3, r2
 8008c4c:	4a43      	ldr	r2, [pc, #268]	; (8008d5c <HAL_RCC_GetSysClockFreq+0x188>)
 8008c4e:	fba0 1202 	umull	r1, r2, r0, r2
 8008c52:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008c54:	460a      	mov	r2, r1
 8008c56:	62ba      	str	r2, [r7, #40]	; 0x28
 8008c58:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008c5a:	4413      	add	r3, r2
 8008c5c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008c5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c60:	2200      	movs	r2, #0
 8008c62:	61bb      	str	r3, [r7, #24]
 8008c64:	61fa      	str	r2, [r7, #28]
 8008c66:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008c6a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8008c6e:	f7f8 f80b 	bl	8000c88 <__aeabi_uldivmod>
 8008c72:	4602      	mov	r2, r0
 8008c74:	460b      	mov	r3, r1
 8008c76:	4613      	mov	r3, r2
 8008c78:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008c7a:	e053      	b.n	8008d24 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8008c7c:	4b35      	ldr	r3, [pc, #212]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8008c7e:	685b      	ldr	r3, [r3, #4]
 8008c80:	099b      	lsrs	r3, r3, #6
 8008c82:	2200      	movs	r2, #0
 8008c84:	613b      	str	r3, [r7, #16]
 8008c86:	617a      	str	r2, [r7, #20]
 8008c88:	693b      	ldr	r3, [r7, #16]
 8008c8a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8008c8e:	f04f 0b00 	mov.w	fp, #0
 8008c92:	4652      	mov	r2, sl
 8008c94:	465b      	mov	r3, fp
 8008c96:	f04f 0000 	mov.w	r0, #0
 8008c9a:	f04f 0100 	mov.w	r1, #0
 8008c9e:	0159      	lsls	r1, r3, #5
 8008ca0:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8008ca4:	0150      	lsls	r0, r2, #5
 8008ca6:	4602      	mov	r2, r0
 8008ca8:	460b      	mov	r3, r1
 8008caa:	ebb2 080a 	subs.w	r8, r2, sl
 8008cae:	eb63 090b 	sbc.w	r9, r3, fp
 8008cb2:	f04f 0200 	mov.w	r2, #0
 8008cb6:	f04f 0300 	mov.w	r3, #0
 8008cba:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8008cbe:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8008cc2:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8008cc6:	ebb2 0408 	subs.w	r4, r2, r8
 8008cca:	eb63 0509 	sbc.w	r5, r3, r9
 8008cce:	f04f 0200 	mov.w	r2, #0
 8008cd2:	f04f 0300 	mov.w	r3, #0
 8008cd6:	00eb      	lsls	r3, r5, #3
 8008cd8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8008cdc:	00e2      	lsls	r2, r4, #3
 8008cde:	4614      	mov	r4, r2
 8008ce0:	461d      	mov	r5, r3
 8008ce2:	eb14 030a 	adds.w	r3, r4, sl
 8008ce6:	603b      	str	r3, [r7, #0]
 8008ce8:	eb45 030b 	adc.w	r3, r5, fp
 8008cec:	607b      	str	r3, [r7, #4]
 8008cee:	f04f 0200 	mov.w	r2, #0
 8008cf2:	f04f 0300 	mov.w	r3, #0
 8008cf6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8008cfa:	4629      	mov	r1, r5
 8008cfc:	028b      	lsls	r3, r1, #10
 8008cfe:	4621      	mov	r1, r4
 8008d00:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8008d04:	4621      	mov	r1, r4
 8008d06:	028a      	lsls	r2, r1, #10
 8008d08:	4610      	mov	r0, r2
 8008d0a:	4619      	mov	r1, r3
 8008d0c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d0e:	2200      	movs	r2, #0
 8008d10:	60bb      	str	r3, [r7, #8]
 8008d12:	60fa      	str	r2, [r7, #12]
 8008d14:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008d18:	f7f7 ffb6 	bl	8000c88 <__aeabi_uldivmod>
 8008d1c:	4602      	mov	r2, r0
 8008d1e:	460b      	mov	r3, r1
 8008d20:	4613      	mov	r3, r2
 8008d22:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8008d24:	4b0b      	ldr	r3, [pc, #44]	; (8008d54 <HAL_RCC_GetSysClockFreq+0x180>)
 8008d26:	685b      	ldr	r3, [r3, #4]
 8008d28:	0c1b      	lsrs	r3, r3, #16
 8008d2a:	f003 0303 	and.w	r3, r3, #3
 8008d2e:	3301      	adds	r3, #1
 8008d30:	005b      	lsls	r3, r3, #1
 8008d32:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8008d34:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008d36:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008d38:	fbb2 f3f3 	udiv	r3, r2, r3
 8008d3c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008d3e:	e002      	b.n	8008d46 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8008d40:	4b05      	ldr	r3, [pc, #20]	; (8008d58 <HAL_RCC_GetSysClockFreq+0x184>)
 8008d42:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8008d44:	bf00      	nop
    }
  }
  return sysclockfreq;
 8008d46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008d48:	4618      	mov	r0, r3
 8008d4a:	3740      	adds	r7, #64	; 0x40
 8008d4c:	46bd      	mov	sp, r7
 8008d4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8008d52:	bf00      	nop
 8008d54:	40023800 	.word	0x40023800
 8008d58:	00f42400 	.word	0x00f42400
 8008d5c:	00b71b00 	.word	0x00b71b00

08008d60 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008d60:	b480      	push	{r7}
 8008d62:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8008d64:	4b03      	ldr	r3, [pc, #12]	; (8008d74 <HAL_RCC_GetHCLKFreq+0x14>)
 8008d66:	681b      	ldr	r3, [r3, #0]
}
 8008d68:	4618      	mov	r0, r3
 8008d6a:	46bd      	mov	sp, r7
 8008d6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d70:	4770      	bx	lr
 8008d72:	bf00      	nop
 8008d74:	20000014 	.word	0x20000014

08008d78 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008d78:	b580      	push	{r7, lr}
 8008d7a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008d7c:	f7ff fff0 	bl	8008d60 <HAL_RCC_GetHCLKFreq>
 8008d80:	4602      	mov	r2, r0
 8008d82:	4b05      	ldr	r3, [pc, #20]	; (8008d98 <HAL_RCC_GetPCLK1Freq+0x20>)
 8008d84:	689b      	ldr	r3, [r3, #8]
 8008d86:	0a9b      	lsrs	r3, r3, #10
 8008d88:	f003 0307 	and.w	r3, r3, #7
 8008d8c:	4903      	ldr	r1, [pc, #12]	; (8008d9c <HAL_RCC_GetPCLK1Freq+0x24>)
 8008d8e:	5ccb      	ldrb	r3, [r1, r3]
 8008d90:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008d94:	4618      	mov	r0, r3
 8008d96:	bd80      	pop	{r7, pc}
 8008d98:	40023800 	.word	0x40023800
 8008d9c:	0800f8e8 	.word	0x0800f8e8

08008da0 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008da0:	b580      	push	{r7, lr}
 8008da2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8008da4:	f7ff ffdc 	bl	8008d60 <HAL_RCC_GetHCLKFreq>
 8008da8:	4602      	mov	r2, r0
 8008daa:	4b05      	ldr	r3, [pc, #20]	; (8008dc0 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008dac:	689b      	ldr	r3, [r3, #8]
 8008dae:	0b5b      	lsrs	r3, r3, #13
 8008db0:	f003 0307 	and.w	r3, r3, #7
 8008db4:	4903      	ldr	r1, [pc, #12]	; (8008dc4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8008db6:	5ccb      	ldrb	r3, [r1, r3]
 8008db8:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008dbc:	4618      	mov	r0, r3
 8008dbe:	bd80      	pop	{r7, pc}
 8008dc0:	40023800 	.word	0x40023800
 8008dc4:	0800f8e8 	.word	0x0800f8e8

08008dc8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008dc8:	b580      	push	{r7, lr}
 8008dca:	b082      	sub	sp, #8
 8008dcc:	af00      	add	r7, sp, #0
 8008dce:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008dd0:	687b      	ldr	r3, [r7, #4]
 8008dd2:	2b00      	cmp	r3, #0
 8008dd4:	d101      	bne.n	8008dda <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8008dd6:	2301      	movs	r3, #1
 8008dd8:	e041      	b.n	8008e5e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008dda:	687b      	ldr	r3, [r7, #4]
 8008ddc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008de0:	b2db      	uxtb	r3, r3
 8008de2:	2b00      	cmp	r3, #0
 8008de4:	d106      	bne.n	8008df4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008de6:	687b      	ldr	r3, [r7, #4]
 8008de8:	2200      	movs	r2, #0
 8008dea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8008dee:	6878      	ldr	r0, [r7, #4]
 8008df0:	f7fe fa00 	bl	80071f4 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008df4:	687b      	ldr	r3, [r7, #4]
 8008df6:	2202      	movs	r2, #2
 8008df8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008dfc:	687b      	ldr	r3, [r7, #4]
 8008dfe:	681a      	ldr	r2, [r3, #0]
 8008e00:	687b      	ldr	r3, [r7, #4]
 8008e02:	3304      	adds	r3, #4
 8008e04:	4619      	mov	r1, r3
 8008e06:	4610      	mov	r0, r2
 8008e08:	f000 fbba 	bl	8009580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008e0c:	687b      	ldr	r3, [r7, #4]
 8008e0e:	2201      	movs	r2, #1
 8008e10:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e14:	687b      	ldr	r3, [r7, #4]
 8008e16:	2201      	movs	r2, #1
 8008e18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008e1c:	687b      	ldr	r3, [r7, #4]
 8008e1e:	2201      	movs	r2, #1
 8008e20:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8008e24:	687b      	ldr	r3, [r7, #4]
 8008e26:	2201      	movs	r2, #1
 8008e28:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	2201      	movs	r2, #1
 8008e30:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008e34:	687b      	ldr	r3, [r7, #4]
 8008e36:	2201      	movs	r2, #1
 8008e38:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8008e3c:	687b      	ldr	r3, [r7, #4]
 8008e3e:	2201      	movs	r2, #1
 8008e40:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	2201      	movs	r2, #1
 8008e48:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2201      	movs	r2, #1
 8008e50:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	2201      	movs	r2, #1
 8008e58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008e5c:	2300      	movs	r3, #0
}
 8008e5e:	4618      	mov	r0, r3
 8008e60:	3708      	adds	r7, #8
 8008e62:	46bd      	mov	sp, r7
 8008e64:	bd80      	pop	{r7, pc}
	...

08008e68 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008e68:	b480      	push	{r7}
 8008e6a:	b085      	sub	sp, #20
 8008e6c:	af00      	add	r7, sp, #0
 8008e6e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e76:	b2db      	uxtb	r3, r3
 8008e78:	2b01      	cmp	r3, #1
 8008e7a:	d001      	beq.n	8008e80 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008e7c:	2301      	movs	r3, #1
 8008e7e:	e04e      	b.n	8008f1e <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	2202      	movs	r2, #2
 8008e84:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008e88:	687b      	ldr	r3, [r7, #4]
 8008e8a:	681b      	ldr	r3, [r3, #0]
 8008e8c:	68da      	ldr	r2, [r3, #12]
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	681b      	ldr	r3, [r3, #0]
 8008e92:	f042 0201 	orr.w	r2, r2, #1
 8008e96:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	681b      	ldr	r3, [r3, #0]
 8008e9c:	4a23      	ldr	r2, [pc, #140]	; (8008f2c <HAL_TIM_Base_Start_IT+0xc4>)
 8008e9e:	4293      	cmp	r3, r2
 8008ea0:	d022      	beq.n	8008ee8 <HAL_TIM_Base_Start_IT+0x80>
 8008ea2:	687b      	ldr	r3, [r7, #4]
 8008ea4:	681b      	ldr	r3, [r3, #0]
 8008ea6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008eaa:	d01d      	beq.n	8008ee8 <HAL_TIM_Base_Start_IT+0x80>
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	4a1f      	ldr	r2, [pc, #124]	; (8008f30 <HAL_TIM_Base_Start_IT+0xc8>)
 8008eb2:	4293      	cmp	r3, r2
 8008eb4:	d018      	beq.n	8008ee8 <HAL_TIM_Base_Start_IT+0x80>
 8008eb6:	687b      	ldr	r3, [r7, #4]
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a1e      	ldr	r2, [pc, #120]	; (8008f34 <HAL_TIM_Base_Start_IT+0xcc>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d013      	beq.n	8008ee8 <HAL_TIM_Base_Start_IT+0x80>
 8008ec0:	687b      	ldr	r3, [r7, #4]
 8008ec2:	681b      	ldr	r3, [r3, #0]
 8008ec4:	4a1c      	ldr	r2, [pc, #112]	; (8008f38 <HAL_TIM_Base_Start_IT+0xd0>)
 8008ec6:	4293      	cmp	r3, r2
 8008ec8:	d00e      	beq.n	8008ee8 <HAL_TIM_Base_Start_IT+0x80>
 8008eca:	687b      	ldr	r3, [r7, #4]
 8008ecc:	681b      	ldr	r3, [r3, #0]
 8008ece:	4a1b      	ldr	r2, [pc, #108]	; (8008f3c <HAL_TIM_Base_Start_IT+0xd4>)
 8008ed0:	4293      	cmp	r3, r2
 8008ed2:	d009      	beq.n	8008ee8 <HAL_TIM_Base_Start_IT+0x80>
 8008ed4:	687b      	ldr	r3, [r7, #4]
 8008ed6:	681b      	ldr	r3, [r3, #0]
 8008ed8:	4a19      	ldr	r2, [pc, #100]	; (8008f40 <HAL_TIM_Base_Start_IT+0xd8>)
 8008eda:	4293      	cmp	r3, r2
 8008edc:	d004      	beq.n	8008ee8 <HAL_TIM_Base_Start_IT+0x80>
 8008ede:	687b      	ldr	r3, [r7, #4]
 8008ee0:	681b      	ldr	r3, [r3, #0]
 8008ee2:	4a18      	ldr	r2, [pc, #96]	; (8008f44 <HAL_TIM_Base_Start_IT+0xdc>)
 8008ee4:	4293      	cmp	r3, r2
 8008ee6:	d111      	bne.n	8008f0c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8008ee8:	687b      	ldr	r3, [r7, #4]
 8008eea:	681b      	ldr	r3, [r3, #0]
 8008eec:	689b      	ldr	r3, [r3, #8]
 8008eee:	f003 0307 	and.w	r3, r3, #7
 8008ef2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008ef4:	68fb      	ldr	r3, [r7, #12]
 8008ef6:	2b06      	cmp	r3, #6
 8008ef8:	d010      	beq.n	8008f1c <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8008efa:	687b      	ldr	r3, [r7, #4]
 8008efc:	681b      	ldr	r3, [r3, #0]
 8008efe:	681a      	ldr	r2, [r3, #0]
 8008f00:	687b      	ldr	r3, [r7, #4]
 8008f02:	681b      	ldr	r3, [r3, #0]
 8008f04:	f042 0201 	orr.w	r2, r2, #1
 8008f08:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8008f0a:	e007      	b.n	8008f1c <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	681a      	ldr	r2, [r3, #0]
 8008f12:	687b      	ldr	r3, [r7, #4]
 8008f14:	681b      	ldr	r3, [r3, #0]
 8008f16:	f042 0201 	orr.w	r2, r2, #1
 8008f1a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8008f1c:	2300      	movs	r3, #0
}
 8008f1e:	4618      	mov	r0, r3
 8008f20:	3714      	adds	r7, #20
 8008f22:	46bd      	mov	sp, r7
 8008f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f28:	4770      	bx	lr
 8008f2a:	bf00      	nop
 8008f2c:	40010000 	.word	0x40010000
 8008f30:	40000400 	.word	0x40000400
 8008f34:	40000800 	.word	0x40000800
 8008f38:	40000c00 	.word	0x40000c00
 8008f3c:	40010400 	.word	0x40010400
 8008f40:	40014000 	.word	0x40014000
 8008f44:	40001800 	.word	0x40001800

08008f48 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008f48:	b480      	push	{r7}
 8008f4a:	b083      	sub	sp, #12
 8008f4c:	af00      	add	r7, sp, #0
 8008f4e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008f50:	687b      	ldr	r3, [r7, #4]
 8008f52:	681b      	ldr	r3, [r3, #0]
 8008f54:	68da      	ldr	r2, [r3, #12]
 8008f56:	687b      	ldr	r3, [r7, #4]
 8008f58:	681b      	ldr	r3, [r3, #0]
 8008f5a:	f022 0201 	bic.w	r2, r2, #1
 8008f5e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008f60:	687b      	ldr	r3, [r7, #4]
 8008f62:	681b      	ldr	r3, [r3, #0]
 8008f64:	6a1a      	ldr	r2, [r3, #32]
 8008f66:	f241 1311 	movw	r3, #4369	; 0x1111
 8008f6a:	4013      	ands	r3, r2
 8008f6c:	2b00      	cmp	r3, #0
 8008f6e:	d10f      	bne.n	8008f90 <HAL_TIM_Base_Stop_IT+0x48>
 8008f70:	687b      	ldr	r3, [r7, #4]
 8008f72:	681b      	ldr	r3, [r3, #0]
 8008f74:	6a1a      	ldr	r2, [r3, #32]
 8008f76:	f240 4344 	movw	r3, #1092	; 0x444
 8008f7a:	4013      	ands	r3, r2
 8008f7c:	2b00      	cmp	r3, #0
 8008f7e:	d107      	bne.n	8008f90 <HAL_TIM_Base_Stop_IT+0x48>
 8008f80:	687b      	ldr	r3, [r7, #4]
 8008f82:	681b      	ldr	r3, [r3, #0]
 8008f84:	681a      	ldr	r2, [r3, #0]
 8008f86:	687b      	ldr	r3, [r7, #4]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	f022 0201 	bic.w	r2, r2, #1
 8008f8e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008f90:	687b      	ldr	r3, [r7, #4]
 8008f92:	2201      	movs	r2, #1
 8008f94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008f98:	2300      	movs	r3, #0
}
 8008f9a:	4618      	mov	r0, r3
 8008f9c:	370c      	adds	r7, #12
 8008f9e:	46bd      	mov	sp, r7
 8008fa0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fa4:	4770      	bx	lr

08008fa6 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8008fa6:	b580      	push	{r7, lr}
 8008fa8:	b082      	sub	sp, #8
 8008faa:	af00      	add	r7, sp, #0
 8008fac:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008fae:	687b      	ldr	r3, [r7, #4]
 8008fb0:	2b00      	cmp	r3, #0
 8008fb2:	d101      	bne.n	8008fb8 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8008fb4:	2301      	movs	r3, #1
 8008fb6:	e041      	b.n	800903c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008fbe:	b2db      	uxtb	r3, r3
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d106      	bne.n	8008fd2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8008fc4:	687b      	ldr	r3, [r7, #4]
 8008fc6:	2200      	movs	r2, #0
 8008fc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008fcc:	6878      	ldr	r0, [r7, #4]
 8008fce:	f000 f839 	bl	8009044 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	2202      	movs	r2, #2
 8008fd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008fda:	687b      	ldr	r3, [r7, #4]
 8008fdc:	681a      	ldr	r2, [r3, #0]
 8008fde:	687b      	ldr	r3, [r7, #4]
 8008fe0:	3304      	adds	r3, #4
 8008fe2:	4619      	mov	r1, r3
 8008fe4:	4610      	mov	r0, r2
 8008fe6:	f000 facb 	bl	8009580 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8008fea:	687b      	ldr	r3, [r7, #4]
 8008fec:	2201      	movs	r2, #1
 8008fee:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8008ff2:	687b      	ldr	r3, [r7, #4]
 8008ff4:	2201      	movs	r2, #1
 8008ff6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	2201      	movs	r2, #1
 8008ffe:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8009002:	687b      	ldr	r3, [r7, #4]
 8009004:	2201      	movs	r2, #1
 8009006:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800900a:	687b      	ldr	r3, [r7, #4]
 800900c:	2201      	movs	r2, #1
 800900e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8009012:	687b      	ldr	r3, [r7, #4]
 8009014:	2201      	movs	r2, #1
 8009016:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800901a:	687b      	ldr	r3, [r7, #4]
 800901c:	2201      	movs	r2, #1
 800901e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8009022:	687b      	ldr	r3, [r7, #4]
 8009024:	2201      	movs	r2, #1
 8009026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800902a:	687b      	ldr	r3, [r7, #4]
 800902c:	2201      	movs	r2, #1
 800902e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8009032:	687b      	ldr	r3, [r7, #4]
 8009034:	2201      	movs	r2, #1
 8009036:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800903a:	2300      	movs	r3, #0
}
 800903c:	4618      	mov	r0, r3
 800903e:	3708      	adds	r7, #8
 8009040:	46bd      	mov	sp, r7
 8009042:	bd80      	pop	{r7, pc}

08009044 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8009044:	b480      	push	{r7}
 8009046:	b083      	sub	sp, #12
 8009048:	af00      	add	r7, sp, #0
 800904a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 800904c:	bf00      	nop
 800904e:	370c      	adds	r7, #12
 8009050:	46bd      	mov	sp, r7
 8009052:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009056:	4770      	bx	lr

08009058 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8009058:	b580      	push	{r7, lr}
 800905a:	b082      	sub	sp, #8
 800905c:	af00      	add	r7, sp, #0
 800905e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	691b      	ldr	r3, [r3, #16]
 8009066:	f003 0302 	and.w	r3, r3, #2
 800906a:	2b02      	cmp	r3, #2
 800906c:	d122      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800906e:	687b      	ldr	r3, [r7, #4]
 8009070:	681b      	ldr	r3, [r3, #0]
 8009072:	68db      	ldr	r3, [r3, #12]
 8009074:	f003 0302 	and.w	r3, r3, #2
 8009078:	2b02      	cmp	r3, #2
 800907a:	d11b      	bne.n	80090b4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800907c:	687b      	ldr	r3, [r7, #4]
 800907e:	681b      	ldr	r3, [r3, #0]
 8009080:	f06f 0202 	mvn.w	r2, #2
 8009084:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8009086:	687b      	ldr	r3, [r7, #4]
 8009088:	2201      	movs	r2, #1
 800908a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800908c:	687b      	ldr	r3, [r7, #4]
 800908e:	681b      	ldr	r3, [r3, #0]
 8009090:	699b      	ldr	r3, [r3, #24]
 8009092:	f003 0303 	and.w	r3, r3, #3
 8009096:	2b00      	cmp	r3, #0
 8009098:	d003      	beq.n	80090a2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800909a:	6878      	ldr	r0, [r7, #4]
 800909c:	f000 fa51 	bl	8009542 <HAL_TIM_IC_CaptureCallback>
 80090a0:	e005      	b.n	80090ae <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 80090a2:	6878      	ldr	r0, [r7, #4]
 80090a4:	f000 fa43 	bl	800952e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090a8:	6878      	ldr	r0, [r7, #4]
 80090aa:	f000 fa54 	bl	8009556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80090ae:	687b      	ldr	r3, [r7, #4]
 80090b0:	2200      	movs	r2, #0
 80090b2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 80090b4:	687b      	ldr	r3, [r7, #4]
 80090b6:	681b      	ldr	r3, [r3, #0]
 80090b8:	691b      	ldr	r3, [r3, #16]
 80090ba:	f003 0304 	and.w	r3, r3, #4
 80090be:	2b04      	cmp	r3, #4
 80090c0:	d122      	bne.n	8009108 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80090c2:	687b      	ldr	r3, [r7, #4]
 80090c4:	681b      	ldr	r3, [r3, #0]
 80090c6:	68db      	ldr	r3, [r3, #12]
 80090c8:	f003 0304 	and.w	r3, r3, #4
 80090cc:	2b04      	cmp	r3, #4
 80090ce:	d11b      	bne.n	8009108 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	681b      	ldr	r3, [r3, #0]
 80090d4:	f06f 0204 	mvn.w	r2, #4
 80090d8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80090da:	687b      	ldr	r3, [r7, #4]
 80090dc:	2202      	movs	r2, #2
 80090de:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80090e0:	687b      	ldr	r3, [r7, #4]
 80090e2:	681b      	ldr	r3, [r3, #0]
 80090e4:	699b      	ldr	r3, [r3, #24]
 80090e6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80090ea:	2b00      	cmp	r3, #0
 80090ec:	d003      	beq.n	80090f6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80090ee:	6878      	ldr	r0, [r7, #4]
 80090f0:	f000 fa27 	bl	8009542 <HAL_TIM_IC_CaptureCallback>
 80090f4:	e005      	b.n	8009102 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80090f6:	6878      	ldr	r0, [r7, #4]
 80090f8:	f000 fa19 	bl	800952e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80090fc:	6878      	ldr	r0, [r7, #4]
 80090fe:	f000 fa2a 	bl	8009556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009102:	687b      	ldr	r3, [r7, #4]
 8009104:	2200      	movs	r2, #0
 8009106:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8009108:	687b      	ldr	r3, [r7, #4]
 800910a:	681b      	ldr	r3, [r3, #0]
 800910c:	691b      	ldr	r3, [r3, #16]
 800910e:	f003 0308 	and.w	r3, r3, #8
 8009112:	2b08      	cmp	r3, #8
 8009114:	d122      	bne.n	800915c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8009116:	687b      	ldr	r3, [r7, #4]
 8009118:	681b      	ldr	r3, [r3, #0]
 800911a:	68db      	ldr	r3, [r3, #12]
 800911c:	f003 0308 	and.w	r3, r3, #8
 8009120:	2b08      	cmp	r3, #8
 8009122:	d11b      	bne.n	800915c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8009124:	687b      	ldr	r3, [r7, #4]
 8009126:	681b      	ldr	r3, [r3, #0]
 8009128:	f06f 0208 	mvn.w	r2, #8
 800912c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	2204      	movs	r2, #4
 8009132:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8009134:	687b      	ldr	r3, [r7, #4]
 8009136:	681b      	ldr	r3, [r3, #0]
 8009138:	69db      	ldr	r3, [r3, #28]
 800913a:	f003 0303 	and.w	r3, r3, #3
 800913e:	2b00      	cmp	r3, #0
 8009140:	d003      	beq.n	800914a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009142:	6878      	ldr	r0, [r7, #4]
 8009144:	f000 f9fd 	bl	8009542 <HAL_TIM_IC_CaptureCallback>
 8009148:	e005      	b.n	8009156 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800914a:	6878      	ldr	r0, [r7, #4]
 800914c:	f000 f9ef 	bl	800952e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8009150:	6878      	ldr	r0, [r7, #4]
 8009152:	f000 fa00 	bl	8009556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	2200      	movs	r2, #0
 800915a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	681b      	ldr	r3, [r3, #0]
 8009160:	691b      	ldr	r3, [r3, #16]
 8009162:	f003 0310 	and.w	r3, r3, #16
 8009166:	2b10      	cmp	r3, #16
 8009168:	d122      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	681b      	ldr	r3, [r3, #0]
 800916e:	68db      	ldr	r3, [r3, #12]
 8009170:	f003 0310 	and.w	r3, r3, #16
 8009174:	2b10      	cmp	r3, #16
 8009176:	d11b      	bne.n	80091b0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8009178:	687b      	ldr	r3, [r7, #4]
 800917a:	681b      	ldr	r3, [r3, #0]
 800917c:	f06f 0210 	mvn.w	r2, #16
 8009180:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8009182:	687b      	ldr	r3, [r7, #4]
 8009184:	2208      	movs	r2, #8
 8009186:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8009188:	687b      	ldr	r3, [r7, #4]
 800918a:	681b      	ldr	r3, [r3, #0]
 800918c:	69db      	ldr	r3, [r3, #28]
 800918e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8009192:	2b00      	cmp	r3, #0
 8009194:	d003      	beq.n	800919e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8009196:	6878      	ldr	r0, [r7, #4]
 8009198:	f000 f9d3 	bl	8009542 <HAL_TIM_IC_CaptureCallback>
 800919c:	e005      	b.n	80091aa <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800919e:	6878      	ldr	r0, [r7, #4]
 80091a0:	f000 f9c5 	bl	800952e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80091a4:	6878      	ldr	r0, [r7, #4]
 80091a6:	f000 f9d6 	bl	8009556 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80091aa:	687b      	ldr	r3, [r7, #4]
 80091ac:	2200      	movs	r2, #0
 80091ae:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 80091b0:	687b      	ldr	r3, [r7, #4]
 80091b2:	681b      	ldr	r3, [r3, #0]
 80091b4:	691b      	ldr	r3, [r3, #16]
 80091b6:	f003 0301 	and.w	r3, r3, #1
 80091ba:	2b01      	cmp	r3, #1
 80091bc:	d10e      	bne.n	80091dc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80091be:	687b      	ldr	r3, [r7, #4]
 80091c0:	681b      	ldr	r3, [r3, #0]
 80091c2:	68db      	ldr	r3, [r3, #12]
 80091c4:	f003 0301 	and.w	r3, r3, #1
 80091c8:	2b01      	cmp	r3, #1
 80091ca:	d107      	bne.n	80091dc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	681b      	ldr	r3, [r3, #0]
 80091d0:	f06f 0201 	mvn.w	r2, #1
 80091d4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80091d6:	6878      	ldr	r0, [r7, #4]
 80091d8:	f7fc fbd6 	bl	8005988 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	681b      	ldr	r3, [r3, #0]
 80091e0:	691b      	ldr	r3, [r3, #16]
 80091e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091e6:	2b80      	cmp	r3, #128	; 0x80
 80091e8:	d10e      	bne.n	8009208 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80091ea:	687b      	ldr	r3, [r7, #4]
 80091ec:	681b      	ldr	r3, [r3, #0]
 80091ee:	68db      	ldr	r3, [r3, #12]
 80091f0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80091f4:	2b80      	cmp	r3, #128	; 0x80
 80091f6:	d107      	bne.n	8009208 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80091f8:	687b      	ldr	r3, [r7, #4]
 80091fa:	681b      	ldr	r3, [r3, #0]
 80091fc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8009200:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8009202:	6878      	ldr	r0, [r7, #4]
 8009204:	f000 fca6 	bl	8009b54 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	691b      	ldr	r3, [r3, #16]
 800920e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009212:	2b40      	cmp	r3, #64	; 0x40
 8009214:	d10e      	bne.n	8009234 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	681b      	ldr	r3, [r3, #0]
 800921a:	68db      	ldr	r3, [r3, #12]
 800921c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009220:	2b40      	cmp	r3, #64	; 0x40
 8009222:	d107      	bne.n	8009234 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8009224:	687b      	ldr	r3, [r7, #4]
 8009226:	681b      	ldr	r3, [r3, #0]
 8009228:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800922c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800922e:	6878      	ldr	r0, [r7, #4]
 8009230:	f000 f99b 	bl	800956a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	691b      	ldr	r3, [r3, #16]
 800923a:	f003 0320 	and.w	r3, r3, #32
 800923e:	2b20      	cmp	r3, #32
 8009240:	d10e      	bne.n	8009260 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8009242:	687b      	ldr	r3, [r7, #4]
 8009244:	681b      	ldr	r3, [r3, #0]
 8009246:	68db      	ldr	r3, [r3, #12]
 8009248:	f003 0320 	and.w	r3, r3, #32
 800924c:	2b20      	cmp	r3, #32
 800924e:	d107      	bne.n	8009260 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8009250:	687b      	ldr	r3, [r7, #4]
 8009252:	681b      	ldr	r3, [r3, #0]
 8009254:	f06f 0220 	mvn.w	r2, #32
 8009258:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 fc70 	bl	8009b40 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8009260:	bf00      	nop
 8009262:	3708      	adds	r7, #8
 8009264:	46bd      	mov	sp, r7
 8009266:	bd80      	pop	{r7, pc}

08009268 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8009268:	b580      	push	{r7, lr}
 800926a:	b086      	sub	sp, #24
 800926c:	af00      	add	r7, sp, #0
 800926e:	60f8      	str	r0, [r7, #12]
 8009270:	60b9      	str	r1, [r7, #8]
 8009272:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8009274:	2300      	movs	r3, #0
 8009276:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8009278:	68fb      	ldr	r3, [r7, #12]
 800927a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800927e:	2b01      	cmp	r3, #1
 8009280:	d101      	bne.n	8009286 <HAL_TIM_IC_ConfigChannel+0x1e>
 8009282:	2302      	movs	r3, #2
 8009284:	e088      	b.n	8009398 <HAL_TIM_IC_ConfigChannel+0x130>
 8009286:	68fb      	ldr	r3, [r7, #12]
 8009288:	2201      	movs	r2, #1
 800928a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 800928e:	687b      	ldr	r3, [r7, #4]
 8009290:	2b00      	cmp	r3, #0
 8009292:	d11b      	bne.n	80092cc <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8009294:	68fb      	ldr	r3, [r7, #12]
 8009296:	6818      	ldr	r0, [r3, #0]
 8009298:	68bb      	ldr	r3, [r7, #8]
 800929a:	6819      	ldr	r1, [r3, #0]
 800929c:	68bb      	ldr	r3, [r7, #8]
 800929e:	685a      	ldr	r2, [r3, #4]
 80092a0:	68bb      	ldr	r3, [r7, #8]
 80092a2:	68db      	ldr	r3, [r3, #12]
 80092a4:	f000 fa0c 	bl	80096c0 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 80092a8:	68fb      	ldr	r3, [r7, #12]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	699a      	ldr	r2, [r3, #24]
 80092ae:	68fb      	ldr	r3, [r7, #12]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	f022 020c 	bic.w	r2, r2, #12
 80092b6:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 80092b8:	68fb      	ldr	r3, [r7, #12]
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	6999      	ldr	r1, [r3, #24]
 80092be:	68bb      	ldr	r3, [r7, #8]
 80092c0:	689a      	ldr	r2, [r3, #8]
 80092c2:	68fb      	ldr	r3, [r7, #12]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	430a      	orrs	r2, r1
 80092c8:	619a      	str	r2, [r3, #24]
 80092ca:	e060      	b.n	800938e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	2b04      	cmp	r3, #4
 80092d0:	d11c      	bne.n	800930c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 80092d2:	68fb      	ldr	r3, [r7, #12]
 80092d4:	6818      	ldr	r0, [r3, #0]
 80092d6:	68bb      	ldr	r3, [r7, #8]
 80092d8:	6819      	ldr	r1, [r3, #0]
 80092da:	68bb      	ldr	r3, [r7, #8]
 80092dc:	685a      	ldr	r2, [r3, #4]
 80092de:	68bb      	ldr	r3, [r7, #8]
 80092e0:	68db      	ldr	r3, [r3, #12]
 80092e2:	f000 fa90 	bl	8009806 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 80092e6:	68fb      	ldr	r3, [r7, #12]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	699a      	ldr	r2, [r3, #24]
 80092ec:	68fb      	ldr	r3, [r7, #12]
 80092ee:	681b      	ldr	r3, [r3, #0]
 80092f0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80092f4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80092f6:	68fb      	ldr	r3, [r7, #12]
 80092f8:	681b      	ldr	r3, [r3, #0]
 80092fa:	6999      	ldr	r1, [r3, #24]
 80092fc:	68bb      	ldr	r3, [r7, #8]
 80092fe:	689b      	ldr	r3, [r3, #8]
 8009300:	021a      	lsls	r2, r3, #8
 8009302:	68fb      	ldr	r3, [r7, #12]
 8009304:	681b      	ldr	r3, [r3, #0]
 8009306:	430a      	orrs	r2, r1
 8009308:	619a      	str	r2, [r3, #24]
 800930a:	e040      	b.n	800938e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 800930c:	687b      	ldr	r3, [r7, #4]
 800930e:	2b08      	cmp	r3, #8
 8009310:	d11b      	bne.n	800934a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8009312:	68fb      	ldr	r3, [r7, #12]
 8009314:	6818      	ldr	r0, [r3, #0]
 8009316:	68bb      	ldr	r3, [r7, #8]
 8009318:	6819      	ldr	r1, [r3, #0]
 800931a:	68bb      	ldr	r3, [r7, #8]
 800931c:	685a      	ldr	r2, [r3, #4]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	68db      	ldr	r3, [r3, #12]
 8009322:	f000 fadd 	bl	80098e0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8009326:	68fb      	ldr	r3, [r7, #12]
 8009328:	681b      	ldr	r3, [r3, #0]
 800932a:	69da      	ldr	r2, [r3, #28]
 800932c:	68fb      	ldr	r3, [r7, #12]
 800932e:	681b      	ldr	r3, [r3, #0]
 8009330:	f022 020c 	bic.w	r2, r2, #12
 8009334:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8009336:	68fb      	ldr	r3, [r7, #12]
 8009338:	681b      	ldr	r3, [r3, #0]
 800933a:	69d9      	ldr	r1, [r3, #28]
 800933c:	68bb      	ldr	r3, [r7, #8]
 800933e:	689a      	ldr	r2, [r3, #8]
 8009340:	68fb      	ldr	r3, [r7, #12]
 8009342:	681b      	ldr	r3, [r3, #0]
 8009344:	430a      	orrs	r2, r1
 8009346:	61da      	str	r2, [r3, #28]
 8009348:	e021      	b.n	800938e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 800934a:	687b      	ldr	r3, [r7, #4]
 800934c:	2b0c      	cmp	r3, #12
 800934e:	d11c      	bne.n	800938a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8009350:	68fb      	ldr	r3, [r7, #12]
 8009352:	6818      	ldr	r0, [r3, #0]
 8009354:	68bb      	ldr	r3, [r7, #8]
 8009356:	6819      	ldr	r1, [r3, #0]
 8009358:	68bb      	ldr	r3, [r7, #8]
 800935a:	685a      	ldr	r2, [r3, #4]
 800935c:	68bb      	ldr	r3, [r7, #8]
 800935e:	68db      	ldr	r3, [r3, #12]
 8009360:	f000 fafa 	bl	8009958 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8009364:	68fb      	ldr	r3, [r7, #12]
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	69da      	ldr	r2, [r3, #28]
 800936a:	68fb      	ldr	r3, [r7, #12]
 800936c:	681b      	ldr	r3, [r3, #0]
 800936e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8009372:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8009374:	68fb      	ldr	r3, [r7, #12]
 8009376:	681b      	ldr	r3, [r3, #0]
 8009378:	69d9      	ldr	r1, [r3, #28]
 800937a:	68bb      	ldr	r3, [r7, #8]
 800937c:	689b      	ldr	r3, [r3, #8]
 800937e:	021a      	lsls	r2, r3, #8
 8009380:	68fb      	ldr	r3, [r7, #12]
 8009382:	681b      	ldr	r3, [r3, #0]
 8009384:	430a      	orrs	r2, r1
 8009386:	61da      	str	r2, [r3, #28]
 8009388:	e001      	b.n	800938e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 800938a:	2301      	movs	r3, #1
 800938c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 800938e:	68fb      	ldr	r3, [r7, #12]
 8009390:	2200      	movs	r2, #0
 8009392:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009396:	7dfb      	ldrb	r3, [r7, #23]
}
 8009398:	4618      	mov	r0, r3
 800939a:	3718      	adds	r7, #24
 800939c:	46bd      	mov	sp, r7
 800939e:	bd80      	pop	{r7, pc}

080093a0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80093a0:	b580      	push	{r7, lr}
 80093a2:	b084      	sub	sp, #16
 80093a4:	af00      	add	r7, sp, #0
 80093a6:	6078      	str	r0, [r7, #4]
 80093a8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80093aa:	2300      	movs	r3, #0
 80093ac:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80093ae:	687b      	ldr	r3, [r7, #4]
 80093b0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80093b4:	2b01      	cmp	r3, #1
 80093b6:	d101      	bne.n	80093bc <HAL_TIM_ConfigClockSource+0x1c>
 80093b8:	2302      	movs	r3, #2
 80093ba:	e0b4      	b.n	8009526 <HAL_TIM_ConfigClockSource+0x186>
 80093bc:	687b      	ldr	r3, [r7, #4]
 80093be:	2201      	movs	r2, #1
 80093c0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80093c4:	687b      	ldr	r3, [r7, #4]
 80093c6:	2202      	movs	r2, #2
 80093c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80093cc:	687b      	ldr	r3, [r7, #4]
 80093ce:	681b      	ldr	r3, [r3, #0]
 80093d0:	689b      	ldr	r3, [r3, #8]
 80093d2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80093d4:	68bb      	ldr	r3, [r7, #8]
 80093d6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80093da:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80093dc:	68bb      	ldr	r3, [r7, #8]
 80093de:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80093e2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80093e4:	687b      	ldr	r3, [r7, #4]
 80093e6:	681b      	ldr	r3, [r3, #0]
 80093e8:	68ba      	ldr	r2, [r7, #8]
 80093ea:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80093ec:	683b      	ldr	r3, [r7, #0]
 80093ee:	681b      	ldr	r3, [r3, #0]
 80093f0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093f4:	d03e      	beq.n	8009474 <HAL_TIM_ConfigClockSource+0xd4>
 80093f6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80093fa:	f200 8087 	bhi.w	800950c <HAL_TIM_ConfigClockSource+0x16c>
 80093fe:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009402:	f000 8086 	beq.w	8009512 <HAL_TIM_ConfigClockSource+0x172>
 8009406:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800940a:	d87f      	bhi.n	800950c <HAL_TIM_ConfigClockSource+0x16c>
 800940c:	2b70      	cmp	r3, #112	; 0x70
 800940e:	d01a      	beq.n	8009446 <HAL_TIM_ConfigClockSource+0xa6>
 8009410:	2b70      	cmp	r3, #112	; 0x70
 8009412:	d87b      	bhi.n	800950c <HAL_TIM_ConfigClockSource+0x16c>
 8009414:	2b60      	cmp	r3, #96	; 0x60
 8009416:	d050      	beq.n	80094ba <HAL_TIM_ConfigClockSource+0x11a>
 8009418:	2b60      	cmp	r3, #96	; 0x60
 800941a:	d877      	bhi.n	800950c <HAL_TIM_ConfigClockSource+0x16c>
 800941c:	2b50      	cmp	r3, #80	; 0x50
 800941e:	d03c      	beq.n	800949a <HAL_TIM_ConfigClockSource+0xfa>
 8009420:	2b50      	cmp	r3, #80	; 0x50
 8009422:	d873      	bhi.n	800950c <HAL_TIM_ConfigClockSource+0x16c>
 8009424:	2b40      	cmp	r3, #64	; 0x40
 8009426:	d058      	beq.n	80094da <HAL_TIM_ConfigClockSource+0x13a>
 8009428:	2b40      	cmp	r3, #64	; 0x40
 800942a:	d86f      	bhi.n	800950c <HAL_TIM_ConfigClockSource+0x16c>
 800942c:	2b30      	cmp	r3, #48	; 0x30
 800942e:	d064      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x15a>
 8009430:	2b30      	cmp	r3, #48	; 0x30
 8009432:	d86b      	bhi.n	800950c <HAL_TIM_ConfigClockSource+0x16c>
 8009434:	2b20      	cmp	r3, #32
 8009436:	d060      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x15a>
 8009438:	2b20      	cmp	r3, #32
 800943a:	d867      	bhi.n	800950c <HAL_TIM_ConfigClockSource+0x16c>
 800943c:	2b00      	cmp	r3, #0
 800943e:	d05c      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x15a>
 8009440:	2b10      	cmp	r3, #16
 8009442:	d05a      	beq.n	80094fa <HAL_TIM_ConfigClockSource+0x15a>
 8009444:	e062      	b.n	800950c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	6818      	ldr	r0, [r3, #0]
 800944a:	683b      	ldr	r3, [r7, #0]
 800944c:	6899      	ldr	r1, [r3, #8]
 800944e:	683b      	ldr	r3, [r7, #0]
 8009450:	685a      	ldr	r2, [r3, #4]
 8009452:	683b      	ldr	r3, [r7, #0]
 8009454:	68db      	ldr	r3, [r3, #12]
 8009456:	f000 fad7 	bl	8009a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800945a:	687b      	ldr	r3, [r7, #4]
 800945c:	681b      	ldr	r3, [r3, #0]
 800945e:	689b      	ldr	r3, [r3, #8]
 8009460:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8009462:	68bb      	ldr	r3, [r7, #8]
 8009464:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8009468:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800946a:	687b      	ldr	r3, [r7, #4]
 800946c:	681b      	ldr	r3, [r3, #0]
 800946e:	68ba      	ldr	r2, [r7, #8]
 8009470:	609a      	str	r2, [r3, #8]
      break;
 8009472:	e04f      	b.n	8009514 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8009474:	687b      	ldr	r3, [r7, #4]
 8009476:	6818      	ldr	r0, [r3, #0]
 8009478:	683b      	ldr	r3, [r7, #0]
 800947a:	6899      	ldr	r1, [r3, #8]
 800947c:	683b      	ldr	r3, [r7, #0]
 800947e:	685a      	ldr	r2, [r3, #4]
 8009480:	683b      	ldr	r3, [r7, #0]
 8009482:	68db      	ldr	r3, [r3, #12]
 8009484:	f000 fac0 	bl	8009a08 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8009488:	687b      	ldr	r3, [r7, #4]
 800948a:	681b      	ldr	r3, [r3, #0]
 800948c:	689a      	ldr	r2, [r3, #8]
 800948e:	687b      	ldr	r3, [r7, #4]
 8009490:	681b      	ldr	r3, [r3, #0]
 8009492:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8009496:	609a      	str	r2, [r3, #8]
      break;
 8009498:	e03c      	b.n	8009514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800949a:	687b      	ldr	r3, [r7, #4]
 800949c:	6818      	ldr	r0, [r3, #0]
 800949e:	683b      	ldr	r3, [r7, #0]
 80094a0:	6859      	ldr	r1, [r3, #4]
 80094a2:	683b      	ldr	r3, [r7, #0]
 80094a4:	68db      	ldr	r3, [r3, #12]
 80094a6:	461a      	mov	r2, r3
 80094a8:	f000 f97e 	bl	80097a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80094ac:	687b      	ldr	r3, [r7, #4]
 80094ae:	681b      	ldr	r3, [r3, #0]
 80094b0:	2150      	movs	r1, #80	; 0x50
 80094b2:	4618      	mov	r0, r3
 80094b4:	f000 fa8d 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 80094b8:	e02c      	b.n	8009514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80094ba:	687b      	ldr	r3, [r7, #4]
 80094bc:	6818      	ldr	r0, [r3, #0]
 80094be:	683b      	ldr	r3, [r7, #0]
 80094c0:	6859      	ldr	r1, [r3, #4]
 80094c2:	683b      	ldr	r3, [r7, #0]
 80094c4:	68db      	ldr	r3, [r3, #12]
 80094c6:	461a      	mov	r2, r3
 80094c8:	f000 f9da 	bl	8009880 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80094cc:	687b      	ldr	r3, [r7, #4]
 80094ce:	681b      	ldr	r3, [r3, #0]
 80094d0:	2160      	movs	r1, #96	; 0x60
 80094d2:	4618      	mov	r0, r3
 80094d4:	f000 fa7d 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 80094d8:	e01c      	b.n	8009514 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80094da:	687b      	ldr	r3, [r7, #4]
 80094dc:	6818      	ldr	r0, [r3, #0]
 80094de:	683b      	ldr	r3, [r7, #0]
 80094e0:	6859      	ldr	r1, [r3, #4]
 80094e2:	683b      	ldr	r3, [r7, #0]
 80094e4:	68db      	ldr	r3, [r3, #12]
 80094e6:	461a      	mov	r2, r3
 80094e8:	f000 f95e 	bl	80097a8 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80094ec:	687b      	ldr	r3, [r7, #4]
 80094ee:	681b      	ldr	r3, [r3, #0]
 80094f0:	2140      	movs	r1, #64	; 0x40
 80094f2:	4618      	mov	r0, r3
 80094f4:	f000 fa6d 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 80094f8:	e00c      	b.n	8009514 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80094fa:	687b      	ldr	r3, [r7, #4]
 80094fc:	681a      	ldr	r2, [r3, #0]
 80094fe:	683b      	ldr	r3, [r7, #0]
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	4619      	mov	r1, r3
 8009504:	4610      	mov	r0, r2
 8009506:	f000 fa64 	bl	80099d2 <TIM_ITRx_SetConfig>
      break;
 800950a:	e003      	b.n	8009514 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800950c:	2301      	movs	r3, #1
 800950e:	73fb      	strb	r3, [r7, #15]
      break;
 8009510:	e000      	b.n	8009514 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8009512:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8009514:	687b      	ldr	r3, [r7, #4]
 8009516:	2201      	movs	r2, #1
 8009518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800951c:	687b      	ldr	r3, [r7, #4]
 800951e:	2200      	movs	r2, #0
 8009520:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8009524:	7bfb      	ldrb	r3, [r7, #15]
}
 8009526:	4618      	mov	r0, r3
 8009528:	3710      	adds	r7, #16
 800952a:	46bd      	mov	sp, r7
 800952c:	bd80      	pop	{r7, pc}

0800952e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800952e:	b480      	push	{r7}
 8009530:	b083      	sub	sp, #12
 8009532:	af00      	add	r7, sp, #0
 8009534:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8009536:	bf00      	nop
 8009538:	370c      	adds	r7, #12
 800953a:	46bd      	mov	sp, r7
 800953c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009540:	4770      	bx	lr

08009542 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8009542:	b480      	push	{r7}
 8009544:	b083      	sub	sp, #12
 8009546:	af00      	add	r7, sp, #0
 8009548:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800954a:	bf00      	nop
 800954c:	370c      	adds	r7, #12
 800954e:	46bd      	mov	sp, r7
 8009550:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009554:	4770      	bx	lr

08009556 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8009556:	b480      	push	{r7}
 8009558:	b083      	sub	sp, #12
 800955a:	af00      	add	r7, sp, #0
 800955c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800955e:	bf00      	nop
 8009560:	370c      	adds	r7, #12
 8009562:	46bd      	mov	sp, r7
 8009564:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009568:	4770      	bx	lr

0800956a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800956a:	b480      	push	{r7}
 800956c:	b083      	sub	sp, #12
 800956e:	af00      	add	r7, sp, #0
 8009570:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8009572:	bf00      	nop
 8009574:	370c      	adds	r7, #12
 8009576:	46bd      	mov	sp, r7
 8009578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800957c:	4770      	bx	lr
	...

08009580 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8009580:	b480      	push	{r7}
 8009582:	b085      	sub	sp, #20
 8009584:	af00      	add	r7, sp, #0
 8009586:	6078      	str	r0, [r7, #4]
 8009588:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800958a:	687b      	ldr	r3, [r7, #4]
 800958c:	681b      	ldr	r3, [r3, #0]
 800958e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8009590:	687b      	ldr	r3, [r7, #4]
 8009592:	4a40      	ldr	r2, [pc, #256]	; (8009694 <TIM_Base_SetConfig+0x114>)
 8009594:	4293      	cmp	r3, r2
 8009596:	d013      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 8009598:	687b      	ldr	r3, [r7, #4]
 800959a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800959e:	d00f      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 80095a0:	687b      	ldr	r3, [r7, #4]
 80095a2:	4a3d      	ldr	r2, [pc, #244]	; (8009698 <TIM_Base_SetConfig+0x118>)
 80095a4:	4293      	cmp	r3, r2
 80095a6:	d00b      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 80095a8:	687b      	ldr	r3, [r7, #4]
 80095aa:	4a3c      	ldr	r2, [pc, #240]	; (800969c <TIM_Base_SetConfig+0x11c>)
 80095ac:	4293      	cmp	r3, r2
 80095ae:	d007      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 80095b0:	687b      	ldr	r3, [r7, #4]
 80095b2:	4a3b      	ldr	r2, [pc, #236]	; (80096a0 <TIM_Base_SetConfig+0x120>)
 80095b4:	4293      	cmp	r3, r2
 80095b6:	d003      	beq.n	80095c0 <TIM_Base_SetConfig+0x40>
 80095b8:	687b      	ldr	r3, [r7, #4]
 80095ba:	4a3a      	ldr	r2, [pc, #232]	; (80096a4 <TIM_Base_SetConfig+0x124>)
 80095bc:	4293      	cmp	r3, r2
 80095be:	d108      	bne.n	80095d2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80095c0:	68fb      	ldr	r3, [r7, #12]
 80095c2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80095c6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80095c8:	683b      	ldr	r3, [r7, #0]
 80095ca:	685b      	ldr	r3, [r3, #4]
 80095cc:	68fa      	ldr	r2, [r7, #12]
 80095ce:	4313      	orrs	r3, r2
 80095d0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80095d2:	687b      	ldr	r3, [r7, #4]
 80095d4:	4a2f      	ldr	r2, [pc, #188]	; (8009694 <TIM_Base_SetConfig+0x114>)
 80095d6:	4293      	cmp	r3, r2
 80095d8:	d02b      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80095e0:	d027      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 80095e2:	687b      	ldr	r3, [r7, #4]
 80095e4:	4a2c      	ldr	r2, [pc, #176]	; (8009698 <TIM_Base_SetConfig+0x118>)
 80095e6:	4293      	cmp	r3, r2
 80095e8:	d023      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	4a2b      	ldr	r2, [pc, #172]	; (800969c <TIM_Base_SetConfig+0x11c>)
 80095ee:	4293      	cmp	r3, r2
 80095f0:	d01f      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 80095f2:	687b      	ldr	r3, [r7, #4]
 80095f4:	4a2a      	ldr	r2, [pc, #168]	; (80096a0 <TIM_Base_SetConfig+0x120>)
 80095f6:	4293      	cmp	r3, r2
 80095f8:	d01b      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 80095fa:	687b      	ldr	r3, [r7, #4]
 80095fc:	4a29      	ldr	r2, [pc, #164]	; (80096a4 <TIM_Base_SetConfig+0x124>)
 80095fe:	4293      	cmp	r3, r2
 8009600:	d017      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 8009602:	687b      	ldr	r3, [r7, #4]
 8009604:	4a28      	ldr	r2, [pc, #160]	; (80096a8 <TIM_Base_SetConfig+0x128>)
 8009606:	4293      	cmp	r3, r2
 8009608:	d013      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 800960a:	687b      	ldr	r3, [r7, #4]
 800960c:	4a27      	ldr	r2, [pc, #156]	; (80096ac <TIM_Base_SetConfig+0x12c>)
 800960e:	4293      	cmp	r3, r2
 8009610:	d00f      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 8009612:	687b      	ldr	r3, [r7, #4]
 8009614:	4a26      	ldr	r2, [pc, #152]	; (80096b0 <TIM_Base_SetConfig+0x130>)
 8009616:	4293      	cmp	r3, r2
 8009618:	d00b      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 800961a:	687b      	ldr	r3, [r7, #4]
 800961c:	4a25      	ldr	r2, [pc, #148]	; (80096b4 <TIM_Base_SetConfig+0x134>)
 800961e:	4293      	cmp	r3, r2
 8009620:	d007      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 8009622:	687b      	ldr	r3, [r7, #4]
 8009624:	4a24      	ldr	r2, [pc, #144]	; (80096b8 <TIM_Base_SetConfig+0x138>)
 8009626:	4293      	cmp	r3, r2
 8009628:	d003      	beq.n	8009632 <TIM_Base_SetConfig+0xb2>
 800962a:	687b      	ldr	r3, [r7, #4]
 800962c:	4a23      	ldr	r2, [pc, #140]	; (80096bc <TIM_Base_SetConfig+0x13c>)
 800962e:	4293      	cmp	r3, r2
 8009630:	d108      	bne.n	8009644 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8009632:	68fb      	ldr	r3, [r7, #12]
 8009634:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009638:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800963a:	683b      	ldr	r3, [r7, #0]
 800963c:	68db      	ldr	r3, [r3, #12]
 800963e:	68fa      	ldr	r2, [r7, #12]
 8009640:	4313      	orrs	r3, r2
 8009642:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800964a:	683b      	ldr	r3, [r7, #0]
 800964c:	695b      	ldr	r3, [r3, #20]
 800964e:	4313      	orrs	r3, r2
 8009650:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8009652:	687b      	ldr	r3, [r7, #4]
 8009654:	68fa      	ldr	r2, [r7, #12]
 8009656:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8009658:	683b      	ldr	r3, [r7, #0]
 800965a:	689a      	ldr	r2, [r3, #8]
 800965c:	687b      	ldr	r3, [r7, #4]
 800965e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8009660:	683b      	ldr	r3, [r7, #0]
 8009662:	681a      	ldr	r2, [r3, #0]
 8009664:	687b      	ldr	r3, [r7, #4]
 8009666:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8009668:	687b      	ldr	r3, [r7, #4]
 800966a:	4a0a      	ldr	r2, [pc, #40]	; (8009694 <TIM_Base_SetConfig+0x114>)
 800966c:	4293      	cmp	r3, r2
 800966e:	d003      	beq.n	8009678 <TIM_Base_SetConfig+0xf8>
 8009670:	687b      	ldr	r3, [r7, #4]
 8009672:	4a0c      	ldr	r2, [pc, #48]	; (80096a4 <TIM_Base_SetConfig+0x124>)
 8009674:	4293      	cmp	r3, r2
 8009676:	d103      	bne.n	8009680 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8009678:	683b      	ldr	r3, [r7, #0]
 800967a:	691a      	ldr	r2, [r3, #16]
 800967c:	687b      	ldr	r3, [r7, #4]
 800967e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8009680:	687b      	ldr	r3, [r7, #4]
 8009682:	2201      	movs	r2, #1
 8009684:	615a      	str	r2, [r3, #20]
}
 8009686:	bf00      	nop
 8009688:	3714      	adds	r7, #20
 800968a:	46bd      	mov	sp, r7
 800968c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009690:	4770      	bx	lr
 8009692:	bf00      	nop
 8009694:	40010000 	.word	0x40010000
 8009698:	40000400 	.word	0x40000400
 800969c:	40000800 	.word	0x40000800
 80096a0:	40000c00 	.word	0x40000c00
 80096a4:	40010400 	.word	0x40010400
 80096a8:	40014000 	.word	0x40014000
 80096ac:	40014400 	.word	0x40014400
 80096b0:	40014800 	.word	0x40014800
 80096b4:	40001800 	.word	0x40001800
 80096b8:	40001c00 	.word	0x40001c00
 80096bc:	40002000 	.word	0x40002000

080096c0 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80096c0:	b480      	push	{r7}
 80096c2:	b087      	sub	sp, #28
 80096c4:	af00      	add	r7, sp, #0
 80096c6:	60f8      	str	r0, [r7, #12]
 80096c8:	60b9      	str	r1, [r7, #8]
 80096ca:	607a      	str	r2, [r7, #4]
 80096cc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	6a1b      	ldr	r3, [r3, #32]
 80096d2:	f023 0201 	bic.w	r2, r3, #1
 80096d6:	68fb      	ldr	r3, [r7, #12]
 80096d8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80096da:	68fb      	ldr	r3, [r7, #12]
 80096dc:	699b      	ldr	r3, [r3, #24]
 80096de:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80096e0:	68fb      	ldr	r3, [r7, #12]
 80096e2:	6a1b      	ldr	r3, [r3, #32]
 80096e4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80096e6:	68fb      	ldr	r3, [r7, #12]
 80096e8:	4a28      	ldr	r2, [pc, #160]	; (800978c <TIM_TI1_SetConfig+0xcc>)
 80096ea:	4293      	cmp	r3, r2
 80096ec:	d01b      	beq.n	8009726 <TIM_TI1_SetConfig+0x66>
 80096ee:	68fb      	ldr	r3, [r7, #12]
 80096f0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80096f4:	d017      	beq.n	8009726 <TIM_TI1_SetConfig+0x66>
 80096f6:	68fb      	ldr	r3, [r7, #12]
 80096f8:	4a25      	ldr	r2, [pc, #148]	; (8009790 <TIM_TI1_SetConfig+0xd0>)
 80096fa:	4293      	cmp	r3, r2
 80096fc:	d013      	beq.n	8009726 <TIM_TI1_SetConfig+0x66>
 80096fe:	68fb      	ldr	r3, [r7, #12]
 8009700:	4a24      	ldr	r2, [pc, #144]	; (8009794 <TIM_TI1_SetConfig+0xd4>)
 8009702:	4293      	cmp	r3, r2
 8009704:	d00f      	beq.n	8009726 <TIM_TI1_SetConfig+0x66>
 8009706:	68fb      	ldr	r3, [r7, #12]
 8009708:	4a23      	ldr	r2, [pc, #140]	; (8009798 <TIM_TI1_SetConfig+0xd8>)
 800970a:	4293      	cmp	r3, r2
 800970c:	d00b      	beq.n	8009726 <TIM_TI1_SetConfig+0x66>
 800970e:	68fb      	ldr	r3, [r7, #12]
 8009710:	4a22      	ldr	r2, [pc, #136]	; (800979c <TIM_TI1_SetConfig+0xdc>)
 8009712:	4293      	cmp	r3, r2
 8009714:	d007      	beq.n	8009726 <TIM_TI1_SetConfig+0x66>
 8009716:	68fb      	ldr	r3, [r7, #12]
 8009718:	4a21      	ldr	r2, [pc, #132]	; (80097a0 <TIM_TI1_SetConfig+0xe0>)
 800971a:	4293      	cmp	r3, r2
 800971c:	d003      	beq.n	8009726 <TIM_TI1_SetConfig+0x66>
 800971e:	68fb      	ldr	r3, [r7, #12]
 8009720:	4a20      	ldr	r2, [pc, #128]	; (80097a4 <TIM_TI1_SetConfig+0xe4>)
 8009722:	4293      	cmp	r3, r2
 8009724:	d101      	bne.n	800972a <TIM_TI1_SetConfig+0x6a>
 8009726:	2301      	movs	r3, #1
 8009728:	e000      	b.n	800972c <TIM_TI1_SetConfig+0x6c>
 800972a:	2300      	movs	r3, #0
 800972c:	2b00      	cmp	r3, #0
 800972e:	d008      	beq.n	8009742 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8009730:	697b      	ldr	r3, [r7, #20]
 8009732:	f023 0303 	bic.w	r3, r3, #3
 8009736:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8009738:	697a      	ldr	r2, [r7, #20]
 800973a:	687b      	ldr	r3, [r7, #4]
 800973c:	4313      	orrs	r3, r2
 800973e:	617b      	str	r3, [r7, #20]
 8009740:	e003      	b.n	800974a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8009742:	697b      	ldr	r3, [r7, #20]
 8009744:	f043 0301 	orr.w	r3, r3, #1
 8009748:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800974a:	697b      	ldr	r3, [r7, #20]
 800974c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8009750:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8009752:	683b      	ldr	r3, [r7, #0]
 8009754:	011b      	lsls	r3, r3, #4
 8009756:	b2db      	uxtb	r3, r3
 8009758:	697a      	ldr	r2, [r7, #20]
 800975a:	4313      	orrs	r3, r2
 800975c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800975e:	693b      	ldr	r3, [r7, #16]
 8009760:	f023 030a 	bic.w	r3, r3, #10
 8009764:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8009766:	68bb      	ldr	r3, [r7, #8]
 8009768:	f003 030a 	and.w	r3, r3, #10
 800976c:	693a      	ldr	r2, [r7, #16]
 800976e:	4313      	orrs	r3, r2
 8009770:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8009772:	68fb      	ldr	r3, [r7, #12]
 8009774:	697a      	ldr	r2, [r7, #20]
 8009776:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8009778:	68fb      	ldr	r3, [r7, #12]
 800977a:	693a      	ldr	r2, [r7, #16]
 800977c:	621a      	str	r2, [r3, #32]
}
 800977e:	bf00      	nop
 8009780:	371c      	adds	r7, #28
 8009782:	46bd      	mov	sp, r7
 8009784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009788:	4770      	bx	lr
 800978a:	bf00      	nop
 800978c:	40010000 	.word	0x40010000
 8009790:	40000400 	.word	0x40000400
 8009794:	40000800 	.word	0x40000800
 8009798:	40000c00 	.word	0x40000c00
 800979c:	40010400 	.word	0x40010400
 80097a0:	40014000 	.word	0x40014000
 80097a4:	40001800 	.word	0x40001800

080097a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80097a8:	b480      	push	{r7}
 80097aa:	b087      	sub	sp, #28
 80097ac:	af00      	add	r7, sp, #0
 80097ae:	60f8      	str	r0, [r7, #12]
 80097b0:	60b9      	str	r1, [r7, #8]
 80097b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80097b4:	68fb      	ldr	r3, [r7, #12]
 80097b6:	6a1b      	ldr	r3, [r3, #32]
 80097b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80097ba:	68fb      	ldr	r3, [r7, #12]
 80097bc:	6a1b      	ldr	r3, [r3, #32]
 80097be:	f023 0201 	bic.w	r2, r3, #1
 80097c2:	68fb      	ldr	r3, [r7, #12]
 80097c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	699b      	ldr	r3, [r3, #24]
 80097ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80097cc:	693b      	ldr	r3, [r7, #16]
 80097ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80097d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80097d4:	687b      	ldr	r3, [r7, #4]
 80097d6:	011b      	lsls	r3, r3, #4
 80097d8:	693a      	ldr	r2, [r7, #16]
 80097da:	4313      	orrs	r3, r2
 80097dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80097de:	697b      	ldr	r3, [r7, #20]
 80097e0:	f023 030a 	bic.w	r3, r3, #10
 80097e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80097e6:	697a      	ldr	r2, [r7, #20]
 80097e8:	68bb      	ldr	r3, [r7, #8]
 80097ea:	4313      	orrs	r3, r2
 80097ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	693a      	ldr	r2, [r7, #16]
 80097f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80097f4:	68fb      	ldr	r3, [r7, #12]
 80097f6:	697a      	ldr	r2, [r7, #20]
 80097f8:	621a      	str	r2, [r3, #32]
}
 80097fa:	bf00      	nop
 80097fc:	371c      	adds	r7, #28
 80097fe:	46bd      	mov	sp, r7
 8009800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009804:	4770      	bx	lr

08009806 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009806:	b480      	push	{r7}
 8009808:	b087      	sub	sp, #28
 800980a:	af00      	add	r7, sp, #0
 800980c:	60f8      	str	r0, [r7, #12]
 800980e:	60b9      	str	r1, [r7, #8]
 8009810:	607a      	str	r2, [r7, #4]
 8009812:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8009814:	68fb      	ldr	r3, [r7, #12]
 8009816:	6a1b      	ldr	r3, [r3, #32]
 8009818:	f023 0210 	bic.w	r2, r3, #16
 800981c:	68fb      	ldr	r3, [r7, #12]
 800981e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009820:	68fb      	ldr	r3, [r7, #12]
 8009822:	699b      	ldr	r3, [r3, #24]
 8009824:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009826:	68fb      	ldr	r3, [r7, #12]
 8009828:	6a1b      	ldr	r3, [r3, #32]
 800982a:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 800982c:	697b      	ldr	r3, [r7, #20]
 800982e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009832:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	021b      	lsls	r3, r3, #8
 8009838:	697a      	ldr	r2, [r7, #20]
 800983a:	4313      	orrs	r3, r2
 800983c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800983e:	697b      	ldr	r3, [r7, #20]
 8009840:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009844:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8009846:	683b      	ldr	r3, [r7, #0]
 8009848:	031b      	lsls	r3, r3, #12
 800984a:	b29b      	uxth	r3, r3
 800984c:	697a      	ldr	r2, [r7, #20]
 800984e:	4313      	orrs	r3, r2
 8009850:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8009852:	693b      	ldr	r3, [r7, #16]
 8009854:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8009858:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800985a:	68bb      	ldr	r3, [r7, #8]
 800985c:	011b      	lsls	r3, r3, #4
 800985e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8009862:	693a      	ldr	r2, [r7, #16]
 8009864:	4313      	orrs	r3, r2
 8009866:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8009868:	68fb      	ldr	r3, [r7, #12]
 800986a:	697a      	ldr	r2, [r7, #20]
 800986c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800986e:	68fb      	ldr	r3, [r7, #12]
 8009870:	693a      	ldr	r2, [r7, #16]
 8009872:	621a      	str	r2, [r3, #32]
}
 8009874:	bf00      	nop
 8009876:	371c      	adds	r7, #28
 8009878:	46bd      	mov	sp, r7
 800987a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800987e:	4770      	bx	lr

08009880 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8009880:	b480      	push	{r7}
 8009882:	b087      	sub	sp, #28
 8009884:	af00      	add	r7, sp, #0
 8009886:	60f8      	str	r0, [r7, #12]
 8009888:	60b9      	str	r1, [r7, #8]
 800988a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800988c:	68fb      	ldr	r3, [r7, #12]
 800988e:	6a1b      	ldr	r3, [r3, #32]
 8009890:	f023 0210 	bic.w	r2, r3, #16
 8009894:	68fb      	ldr	r3, [r7, #12]
 8009896:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8009898:	68fb      	ldr	r3, [r7, #12]
 800989a:	699b      	ldr	r3, [r3, #24]
 800989c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800989e:	68fb      	ldr	r3, [r7, #12]
 80098a0:	6a1b      	ldr	r3, [r3, #32]
 80098a2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80098a4:	697b      	ldr	r3, [r7, #20]
 80098a6:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80098aa:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80098ac:	687b      	ldr	r3, [r7, #4]
 80098ae:	031b      	lsls	r3, r3, #12
 80098b0:	697a      	ldr	r2, [r7, #20]
 80098b2:	4313      	orrs	r3, r2
 80098b4:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80098b6:	693b      	ldr	r3, [r7, #16]
 80098b8:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80098bc:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80098be:	68bb      	ldr	r3, [r7, #8]
 80098c0:	011b      	lsls	r3, r3, #4
 80098c2:	693a      	ldr	r2, [r7, #16]
 80098c4:	4313      	orrs	r3, r2
 80098c6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80098c8:	68fb      	ldr	r3, [r7, #12]
 80098ca:	697a      	ldr	r2, [r7, #20]
 80098cc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	693a      	ldr	r2, [r7, #16]
 80098d2:	621a      	str	r2, [r3, #32]
}
 80098d4:	bf00      	nop
 80098d6:	371c      	adds	r7, #28
 80098d8:	46bd      	mov	sp, r7
 80098da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80098de:	4770      	bx	lr

080098e0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80098e0:	b480      	push	{r7}
 80098e2:	b087      	sub	sp, #28
 80098e4:	af00      	add	r7, sp, #0
 80098e6:	60f8      	str	r0, [r7, #12]
 80098e8:	60b9      	str	r1, [r7, #8]
 80098ea:	607a      	str	r2, [r7, #4]
 80098ec:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80098ee:	68fb      	ldr	r3, [r7, #12]
 80098f0:	6a1b      	ldr	r3, [r3, #32]
 80098f2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80098f6:	68fb      	ldr	r3, [r7, #12]
 80098f8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80098fa:	68fb      	ldr	r3, [r7, #12]
 80098fc:	69db      	ldr	r3, [r3, #28]
 80098fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009900:	68fb      	ldr	r3, [r7, #12]
 8009902:	6a1b      	ldr	r3, [r3, #32]
 8009904:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8009906:	697b      	ldr	r3, [r7, #20]
 8009908:	f023 0303 	bic.w	r3, r3, #3
 800990c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800990e:	697a      	ldr	r2, [r7, #20]
 8009910:	687b      	ldr	r3, [r7, #4]
 8009912:	4313      	orrs	r3, r2
 8009914:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8009916:	697b      	ldr	r3, [r7, #20]
 8009918:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800991c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 800991e:	683b      	ldr	r3, [r7, #0]
 8009920:	011b      	lsls	r3, r3, #4
 8009922:	b2db      	uxtb	r3, r3
 8009924:	697a      	ldr	r2, [r7, #20]
 8009926:	4313      	orrs	r3, r2
 8009928:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 800992a:	693b      	ldr	r3, [r7, #16]
 800992c:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8009930:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8009932:	68bb      	ldr	r3, [r7, #8]
 8009934:	021b      	lsls	r3, r3, #8
 8009936:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800993a:	693a      	ldr	r2, [r7, #16]
 800993c:	4313      	orrs	r3, r2
 800993e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8009940:	68fb      	ldr	r3, [r7, #12]
 8009942:	697a      	ldr	r2, [r7, #20]
 8009944:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8009946:	68fb      	ldr	r3, [r7, #12]
 8009948:	693a      	ldr	r2, [r7, #16]
 800994a:	621a      	str	r2, [r3, #32]
}
 800994c:	bf00      	nop
 800994e:	371c      	adds	r7, #28
 8009950:	46bd      	mov	sp, r7
 8009952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009956:	4770      	bx	lr

08009958 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8009958:	b480      	push	{r7}
 800995a:	b087      	sub	sp, #28
 800995c:	af00      	add	r7, sp, #0
 800995e:	60f8      	str	r0, [r7, #12]
 8009960:	60b9      	str	r1, [r7, #8]
 8009962:	607a      	str	r2, [r7, #4]
 8009964:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8009966:	68fb      	ldr	r3, [r7, #12]
 8009968:	6a1b      	ldr	r3, [r3, #32]
 800996a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800996e:	68fb      	ldr	r3, [r7, #12]
 8009970:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	69db      	ldr	r3, [r3, #28]
 8009976:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8009978:	68fb      	ldr	r3, [r7, #12]
 800997a:	6a1b      	ldr	r3, [r3, #32]
 800997c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800997e:	697b      	ldr	r3, [r7, #20]
 8009980:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8009984:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8009986:	687b      	ldr	r3, [r7, #4]
 8009988:	021b      	lsls	r3, r3, #8
 800998a:	697a      	ldr	r2, [r7, #20]
 800998c:	4313      	orrs	r3, r2
 800998e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8009990:	697b      	ldr	r3, [r7, #20]
 8009992:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8009996:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8009998:	683b      	ldr	r3, [r7, #0]
 800999a:	031b      	lsls	r3, r3, #12
 800999c:	b29b      	uxth	r3, r3
 800999e:	697a      	ldr	r2, [r7, #20]
 80099a0:	4313      	orrs	r3, r2
 80099a2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 80099a4:	693b      	ldr	r3, [r7, #16]
 80099a6:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 80099aa:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 80099ac:	68bb      	ldr	r3, [r7, #8]
 80099ae:	031b      	lsls	r3, r3, #12
 80099b0:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 80099b4:	693a      	ldr	r2, [r7, #16]
 80099b6:	4313      	orrs	r3, r2
 80099b8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80099ba:	68fb      	ldr	r3, [r7, #12]
 80099bc:	697a      	ldr	r2, [r7, #20]
 80099be:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80099c0:	68fb      	ldr	r3, [r7, #12]
 80099c2:	693a      	ldr	r2, [r7, #16]
 80099c4:	621a      	str	r2, [r3, #32]
}
 80099c6:	bf00      	nop
 80099c8:	371c      	adds	r7, #28
 80099ca:	46bd      	mov	sp, r7
 80099cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80099d0:	4770      	bx	lr

080099d2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80099d2:	b480      	push	{r7}
 80099d4:	b085      	sub	sp, #20
 80099d6:	af00      	add	r7, sp, #0
 80099d8:	6078      	str	r0, [r7, #4]
 80099da:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80099dc:	687b      	ldr	r3, [r7, #4]
 80099de:	689b      	ldr	r3, [r3, #8]
 80099e0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80099e2:	68fb      	ldr	r3, [r7, #12]
 80099e4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80099e8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80099ea:	683a      	ldr	r2, [r7, #0]
 80099ec:	68fb      	ldr	r3, [r7, #12]
 80099ee:	4313      	orrs	r3, r2
 80099f0:	f043 0307 	orr.w	r3, r3, #7
 80099f4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80099f6:	687b      	ldr	r3, [r7, #4]
 80099f8:	68fa      	ldr	r2, [r7, #12]
 80099fa:	609a      	str	r2, [r3, #8]
}
 80099fc:	bf00      	nop
 80099fe:	3714      	adds	r7, #20
 8009a00:	46bd      	mov	sp, r7
 8009a02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a06:	4770      	bx	lr

08009a08 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8009a08:	b480      	push	{r7}
 8009a0a:	b087      	sub	sp, #28
 8009a0c:	af00      	add	r7, sp, #0
 8009a0e:	60f8      	str	r0, [r7, #12]
 8009a10:	60b9      	str	r1, [r7, #8]
 8009a12:	607a      	str	r2, [r7, #4]
 8009a14:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8009a16:	68fb      	ldr	r3, [r7, #12]
 8009a18:	689b      	ldr	r3, [r3, #8]
 8009a1a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8009a1c:	697b      	ldr	r3, [r7, #20]
 8009a1e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8009a22:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8009a24:	683b      	ldr	r3, [r7, #0]
 8009a26:	021a      	lsls	r2, r3, #8
 8009a28:	687b      	ldr	r3, [r7, #4]
 8009a2a:	431a      	orrs	r2, r3
 8009a2c:	68bb      	ldr	r3, [r7, #8]
 8009a2e:	4313      	orrs	r3, r2
 8009a30:	697a      	ldr	r2, [r7, #20]
 8009a32:	4313      	orrs	r3, r2
 8009a34:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8009a36:	68fb      	ldr	r3, [r7, #12]
 8009a38:	697a      	ldr	r2, [r7, #20]
 8009a3a:	609a      	str	r2, [r3, #8]
}
 8009a3c:	bf00      	nop
 8009a3e:	371c      	adds	r7, #28
 8009a40:	46bd      	mov	sp, r7
 8009a42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009a46:	4770      	bx	lr

08009a48 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8009a48:	b480      	push	{r7}
 8009a4a:	b085      	sub	sp, #20
 8009a4c:	af00      	add	r7, sp, #0
 8009a4e:	6078      	str	r0, [r7, #4]
 8009a50:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8009a52:	687b      	ldr	r3, [r7, #4]
 8009a54:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009a58:	2b01      	cmp	r3, #1
 8009a5a:	d101      	bne.n	8009a60 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8009a5c:	2302      	movs	r3, #2
 8009a5e:	e05a      	b.n	8009b16 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8009a60:	687b      	ldr	r3, [r7, #4]
 8009a62:	2201      	movs	r2, #1
 8009a64:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8009a68:	687b      	ldr	r3, [r7, #4]
 8009a6a:	2202      	movs	r2, #2
 8009a6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8009a70:	687b      	ldr	r3, [r7, #4]
 8009a72:	681b      	ldr	r3, [r3, #0]
 8009a74:	685b      	ldr	r3, [r3, #4]
 8009a76:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8009a78:	687b      	ldr	r3, [r7, #4]
 8009a7a:	681b      	ldr	r3, [r3, #0]
 8009a7c:	689b      	ldr	r3, [r3, #8]
 8009a7e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8009a80:	68fb      	ldr	r3, [r7, #12]
 8009a82:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8009a86:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8009a88:	683b      	ldr	r3, [r7, #0]
 8009a8a:	681b      	ldr	r3, [r3, #0]
 8009a8c:	68fa      	ldr	r2, [r7, #12]
 8009a8e:	4313      	orrs	r3, r2
 8009a90:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8009a92:	687b      	ldr	r3, [r7, #4]
 8009a94:	681b      	ldr	r3, [r3, #0]
 8009a96:	68fa      	ldr	r2, [r7, #12]
 8009a98:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8009a9a:	687b      	ldr	r3, [r7, #4]
 8009a9c:	681b      	ldr	r3, [r3, #0]
 8009a9e:	4a21      	ldr	r2, [pc, #132]	; (8009b24 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8009aa0:	4293      	cmp	r3, r2
 8009aa2:	d022      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aa4:	687b      	ldr	r3, [r7, #4]
 8009aa6:	681b      	ldr	r3, [r3, #0]
 8009aa8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8009aac:	d01d      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009aae:	687b      	ldr	r3, [r7, #4]
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	4a1d      	ldr	r2, [pc, #116]	; (8009b28 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8009ab4:	4293      	cmp	r3, r2
 8009ab6:	d018      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ab8:	687b      	ldr	r3, [r7, #4]
 8009aba:	681b      	ldr	r3, [r3, #0]
 8009abc:	4a1b      	ldr	r2, [pc, #108]	; (8009b2c <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8009abe:	4293      	cmp	r3, r2
 8009ac0:	d013      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ac2:	687b      	ldr	r3, [r7, #4]
 8009ac4:	681b      	ldr	r3, [r3, #0]
 8009ac6:	4a1a      	ldr	r2, [pc, #104]	; (8009b30 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8009ac8:	4293      	cmp	r3, r2
 8009aca:	d00e      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009acc:	687b      	ldr	r3, [r7, #4]
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	4a18      	ldr	r2, [pc, #96]	; (8009b34 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8009ad2:	4293      	cmp	r3, r2
 8009ad4:	d009      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ad6:	687b      	ldr	r3, [r7, #4]
 8009ad8:	681b      	ldr	r3, [r3, #0]
 8009ada:	4a17      	ldr	r2, [pc, #92]	; (8009b38 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8009adc:	4293      	cmp	r3, r2
 8009ade:	d004      	beq.n	8009aea <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8009ae0:	687b      	ldr	r3, [r7, #4]
 8009ae2:	681b      	ldr	r3, [r3, #0]
 8009ae4:	4a15      	ldr	r2, [pc, #84]	; (8009b3c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8009ae6:	4293      	cmp	r3, r2
 8009ae8:	d10c      	bne.n	8009b04 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8009af0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8009af2:	683b      	ldr	r3, [r7, #0]
 8009af4:	685b      	ldr	r3, [r3, #4]
 8009af6:	68ba      	ldr	r2, [r7, #8]
 8009af8:	4313      	orrs	r3, r2
 8009afa:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8009afc:	687b      	ldr	r3, [r7, #4]
 8009afe:	681b      	ldr	r3, [r3, #0]
 8009b00:	68ba      	ldr	r2, [r7, #8]
 8009b02:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8009b04:	687b      	ldr	r3, [r7, #4]
 8009b06:	2201      	movs	r2, #1
 8009b08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8009b0c:	687b      	ldr	r3, [r7, #4]
 8009b0e:	2200      	movs	r2, #0
 8009b10:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8009b14:	2300      	movs	r3, #0
}
 8009b16:	4618      	mov	r0, r3
 8009b18:	3714      	adds	r7, #20
 8009b1a:	46bd      	mov	sp, r7
 8009b1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b20:	4770      	bx	lr
 8009b22:	bf00      	nop
 8009b24:	40010000 	.word	0x40010000
 8009b28:	40000400 	.word	0x40000400
 8009b2c:	40000800 	.word	0x40000800
 8009b30:	40000c00 	.word	0x40000c00
 8009b34:	40010400 	.word	0x40010400
 8009b38:	40014000 	.word	0x40014000
 8009b3c:	40001800 	.word	0x40001800

08009b40 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8009b40:	b480      	push	{r7}
 8009b42:	b083      	sub	sp, #12
 8009b44:	af00      	add	r7, sp, #0
 8009b46:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8009b48:	bf00      	nop
 8009b4a:	370c      	adds	r7, #12
 8009b4c:	46bd      	mov	sp, r7
 8009b4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b52:	4770      	bx	lr

08009b54 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8009b54:	b480      	push	{r7}
 8009b56:	b083      	sub	sp, #12
 8009b58:	af00      	add	r7, sp, #0
 8009b5a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8009b5c:	bf00      	nop
 8009b5e:	370c      	adds	r7, #12
 8009b60:	46bd      	mov	sp, r7
 8009b62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009b66:	4770      	bx	lr

08009b68 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8009b68:	b580      	push	{r7, lr}
 8009b6a:	b082      	sub	sp, #8
 8009b6c:	af00      	add	r7, sp, #0
 8009b6e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8009b70:	687b      	ldr	r3, [r7, #4]
 8009b72:	2b00      	cmp	r3, #0
 8009b74:	d101      	bne.n	8009b7a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8009b76:	2301      	movs	r3, #1
 8009b78:	e03f      	b.n	8009bfa <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8009b7a:	687b      	ldr	r3, [r7, #4]
 8009b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009b80:	b2db      	uxtb	r3, r3
 8009b82:	2b00      	cmp	r3, #0
 8009b84:	d106      	bne.n	8009b94 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8009b86:	687b      	ldr	r3, [r7, #4]
 8009b88:	2200      	movs	r2, #0
 8009b8a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8009b8e:	6878      	ldr	r0, [r7, #4]
 8009b90:	f7fd fbaa 	bl	80072e8 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8009b94:	687b      	ldr	r3, [r7, #4]
 8009b96:	2224      	movs	r2, #36	; 0x24
 8009b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8009b9c:	687b      	ldr	r3, [r7, #4]
 8009b9e:	681b      	ldr	r3, [r3, #0]
 8009ba0:	68da      	ldr	r2, [r3, #12]
 8009ba2:	687b      	ldr	r3, [r7, #4]
 8009ba4:	681b      	ldr	r3, [r3, #0]
 8009ba6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8009baa:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8009bac:	6878      	ldr	r0, [r7, #4]
 8009bae:	f000 fddf 	bl	800a770 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8009bb2:	687b      	ldr	r3, [r7, #4]
 8009bb4:	681b      	ldr	r3, [r3, #0]
 8009bb6:	691a      	ldr	r2, [r3, #16]
 8009bb8:	687b      	ldr	r3, [r7, #4]
 8009bba:	681b      	ldr	r3, [r3, #0]
 8009bbc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8009bc0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	681b      	ldr	r3, [r3, #0]
 8009bc6:	695a      	ldr	r2, [r3, #20]
 8009bc8:	687b      	ldr	r3, [r7, #4]
 8009bca:	681b      	ldr	r3, [r3, #0]
 8009bcc:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8009bd0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8009bd2:	687b      	ldr	r3, [r7, #4]
 8009bd4:	681b      	ldr	r3, [r3, #0]
 8009bd6:	68da      	ldr	r2, [r3, #12]
 8009bd8:	687b      	ldr	r3, [r7, #4]
 8009bda:	681b      	ldr	r3, [r3, #0]
 8009bdc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8009be0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009be2:	687b      	ldr	r3, [r7, #4]
 8009be4:	2200      	movs	r2, #0
 8009be6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8009be8:	687b      	ldr	r3, [r7, #4]
 8009bea:	2220      	movs	r2, #32
 8009bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8009bf0:	687b      	ldr	r3, [r7, #4]
 8009bf2:	2220      	movs	r2, #32
 8009bf4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8009bf8:	2300      	movs	r3, #0
}
 8009bfa:	4618      	mov	r0, r3
 8009bfc:	3708      	adds	r7, #8
 8009bfe:	46bd      	mov	sp, r7
 8009c00:	bd80      	pop	{r7, pc}

08009c02 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8009c02:	b580      	push	{r7, lr}
 8009c04:	b08a      	sub	sp, #40	; 0x28
 8009c06:	af02      	add	r7, sp, #8
 8009c08:	60f8      	str	r0, [r7, #12]
 8009c0a:	60b9      	str	r1, [r7, #8]
 8009c0c:	603b      	str	r3, [r7, #0]
 8009c0e:	4613      	mov	r3, r2
 8009c10:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8009c12:	2300      	movs	r3, #0
 8009c14:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8009c16:	68fb      	ldr	r3, [r7, #12]
 8009c18:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009c1c:	b2db      	uxtb	r3, r3
 8009c1e:	2b20      	cmp	r3, #32
 8009c20:	d17c      	bne.n	8009d1c <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8009c22:	68bb      	ldr	r3, [r7, #8]
 8009c24:	2b00      	cmp	r3, #0
 8009c26:	d002      	beq.n	8009c2e <HAL_UART_Transmit+0x2c>
 8009c28:	88fb      	ldrh	r3, [r7, #6]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d101      	bne.n	8009c32 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8009c2e:	2301      	movs	r3, #1
 8009c30:	e075      	b.n	8009d1e <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009c32:	68fb      	ldr	r3, [r7, #12]
 8009c34:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009c38:	2b01      	cmp	r3, #1
 8009c3a:	d101      	bne.n	8009c40 <HAL_UART_Transmit+0x3e>
 8009c3c:	2302      	movs	r3, #2
 8009c3e:	e06e      	b.n	8009d1e <HAL_UART_Transmit+0x11c>
 8009c40:	68fb      	ldr	r3, [r7, #12]
 8009c42:	2201      	movs	r2, #1
 8009c44:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009c48:	68fb      	ldr	r3, [r7, #12]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8009c4e:	68fb      	ldr	r3, [r7, #12]
 8009c50:	2221      	movs	r2, #33	; 0x21
 8009c52:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8009c56:	f7fd fda5 	bl	80077a4 <HAL_GetTick>
 8009c5a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8009c5c:	68fb      	ldr	r3, [r7, #12]
 8009c5e:	88fa      	ldrh	r2, [r7, #6]
 8009c60:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8009c62:	68fb      	ldr	r3, [r7, #12]
 8009c64:	88fa      	ldrh	r2, [r7, #6]
 8009c66:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009c68:	68fb      	ldr	r3, [r7, #12]
 8009c6a:	689b      	ldr	r3, [r3, #8]
 8009c6c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009c70:	d108      	bne.n	8009c84 <HAL_UART_Transmit+0x82>
 8009c72:	68fb      	ldr	r3, [r7, #12]
 8009c74:	691b      	ldr	r3, [r3, #16]
 8009c76:	2b00      	cmp	r3, #0
 8009c78:	d104      	bne.n	8009c84 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8009c7a:	2300      	movs	r3, #0
 8009c7c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8009c7e:	68bb      	ldr	r3, [r7, #8]
 8009c80:	61bb      	str	r3, [r7, #24]
 8009c82:	e003      	b.n	8009c8c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8009c84:	68bb      	ldr	r3, [r7, #8]
 8009c86:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8009c88:	2300      	movs	r3, #0
 8009c8a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8009c8c:	68fb      	ldr	r3, [r7, #12]
 8009c8e:	2200      	movs	r2, #0
 8009c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8009c94:	e02a      	b.n	8009cec <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8009c96:	683b      	ldr	r3, [r7, #0]
 8009c98:	9300      	str	r3, [sp, #0]
 8009c9a:	697b      	ldr	r3, [r7, #20]
 8009c9c:	2200      	movs	r2, #0
 8009c9e:	2180      	movs	r1, #128	; 0x80
 8009ca0:	68f8      	ldr	r0, [r7, #12]
 8009ca2:	f000 fb1f 	bl	800a2e4 <UART_WaitOnFlagUntilTimeout>
 8009ca6:	4603      	mov	r3, r0
 8009ca8:	2b00      	cmp	r3, #0
 8009caa:	d001      	beq.n	8009cb0 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8009cac:	2303      	movs	r3, #3
 8009cae:	e036      	b.n	8009d1e <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8009cb0:	69fb      	ldr	r3, [r7, #28]
 8009cb2:	2b00      	cmp	r3, #0
 8009cb4:	d10b      	bne.n	8009cce <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8009cb6:	69bb      	ldr	r3, [r7, #24]
 8009cb8:	881b      	ldrh	r3, [r3, #0]
 8009cba:	461a      	mov	r2, r3
 8009cbc:	68fb      	ldr	r3, [r7, #12]
 8009cbe:	681b      	ldr	r3, [r3, #0]
 8009cc0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009cc4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8009cc6:	69bb      	ldr	r3, [r7, #24]
 8009cc8:	3302      	adds	r3, #2
 8009cca:	61bb      	str	r3, [r7, #24]
 8009ccc:	e007      	b.n	8009cde <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8009cce:	69fb      	ldr	r3, [r7, #28]
 8009cd0:	781a      	ldrb	r2, [r3, #0]
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	681b      	ldr	r3, [r3, #0]
 8009cd6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8009cd8:	69fb      	ldr	r3, [r7, #28]
 8009cda:	3301      	adds	r3, #1
 8009cdc:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8009cde:	68fb      	ldr	r3, [r7, #12]
 8009ce0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009ce2:	b29b      	uxth	r3, r3
 8009ce4:	3b01      	subs	r3, #1
 8009ce6:	b29a      	uxth	r2, r3
 8009ce8:	68fb      	ldr	r3, [r7, #12]
 8009cea:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009cf0:	b29b      	uxth	r3, r3
 8009cf2:	2b00      	cmp	r3, #0
 8009cf4:	d1cf      	bne.n	8009c96 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8009cf6:	683b      	ldr	r3, [r7, #0]
 8009cf8:	9300      	str	r3, [sp, #0]
 8009cfa:	697b      	ldr	r3, [r7, #20]
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	2140      	movs	r1, #64	; 0x40
 8009d00:	68f8      	ldr	r0, [r7, #12]
 8009d02:	f000 faef 	bl	800a2e4 <UART_WaitOnFlagUntilTimeout>
 8009d06:	4603      	mov	r3, r0
 8009d08:	2b00      	cmp	r3, #0
 8009d0a:	d001      	beq.n	8009d10 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8009d0c:	2303      	movs	r3, #3
 8009d0e:	e006      	b.n	8009d1e <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8009d10:	68fb      	ldr	r3, [r7, #12]
 8009d12:	2220      	movs	r2, #32
 8009d14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8009d18:	2300      	movs	r3, #0
 8009d1a:	e000      	b.n	8009d1e <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8009d1c:	2302      	movs	r3, #2
  }
}
 8009d1e:	4618      	mov	r0, r3
 8009d20:	3720      	adds	r7, #32
 8009d22:	46bd      	mov	sp, r7
 8009d24:	bd80      	pop	{r7, pc}

08009d26 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009d26:	b580      	push	{r7, lr}
 8009d28:	b084      	sub	sp, #16
 8009d2a:	af00      	add	r7, sp, #0
 8009d2c:	60f8      	str	r0, [r7, #12]
 8009d2e:	60b9      	str	r1, [r7, #8]
 8009d30:	4613      	mov	r3, r2
 8009d32:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8009d34:	68fb      	ldr	r3, [r7, #12]
 8009d36:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009d3a:	b2db      	uxtb	r3, r3
 8009d3c:	2b20      	cmp	r3, #32
 8009d3e:	d11d      	bne.n	8009d7c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8009d40:	68bb      	ldr	r3, [r7, #8]
 8009d42:	2b00      	cmp	r3, #0
 8009d44:	d002      	beq.n	8009d4c <HAL_UART_Receive_IT+0x26>
 8009d46:	88fb      	ldrh	r3, [r7, #6]
 8009d48:	2b00      	cmp	r3, #0
 8009d4a:	d101      	bne.n	8009d50 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009d4c:	2301      	movs	r3, #1
 8009d4e:	e016      	b.n	8009d7e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009d50:	68fb      	ldr	r3, [r7, #12]
 8009d52:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8009d56:	2b01      	cmp	r3, #1
 8009d58:	d101      	bne.n	8009d5e <HAL_UART_Receive_IT+0x38>
 8009d5a:	2302      	movs	r3, #2
 8009d5c:	e00f      	b.n	8009d7e <HAL_UART_Receive_IT+0x58>
 8009d5e:	68fb      	ldr	r3, [r7, #12]
 8009d60:	2201      	movs	r2, #1
 8009d62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009d66:	68fb      	ldr	r3, [r7, #12]
 8009d68:	2200      	movs	r2, #0
 8009d6a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009d6c:	88fb      	ldrh	r3, [r7, #6]
 8009d6e:	461a      	mov	r2, r3
 8009d70:	68b9      	ldr	r1, [r7, #8]
 8009d72:	68f8      	ldr	r0, [r7, #12]
 8009d74:	f000 fb24 	bl	800a3c0 <UART_Start_Receive_IT>
 8009d78:	4603      	mov	r3, r0
 8009d7a:	e000      	b.n	8009d7e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009d7c:	2302      	movs	r3, #2
  }
}
 8009d7e:	4618      	mov	r0, r3
 8009d80:	3710      	adds	r7, #16
 8009d82:	46bd      	mov	sp, r7
 8009d84:	bd80      	pop	{r7, pc}
	...

08009d88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009d88:	b580      	push	{r7, lr}
 8009d8a:	b0ba      	sub	sp, #232	; 0xe8
 8009d8c:	af00      	add	r7, sp, #0
 8009d8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009d90:	687b      	ldr	r3, [r7, #4]
 8009d92:	681b      	ldr	r3, [r3, #0]
 8009d94:	681b      	ldr	r3, [r3, #0]
 8009d96:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009d9a:	687b      	ldr	r3, [r7, #4]
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	68db      	ldr	r3, [r3, #12]
 8009da0:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8009da4:	687b      	ldr	r3, [r7, #4]
 8009da6:	681b      	ldr	r3, [r3, #0]
 8009da8:	695b      	ldr	r3, [r3, #20]
 8009daa:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009dae:	2300      	movs	r3, #0
 8009db0:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8009db4:	2300      	movs	r3, #0
 8009db6:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009dba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dbe:	f003 030f 	and.w	r3, r3, #15
 8009dc2:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8009dc6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	d10f      	bne.n	8009dee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009dce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009dd2:	f003 0320 	and.w	r3, r3, #32
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	d009      	beq.n	8009dee <HAL_UART_IRQHandler+0x66>
 8009dda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009dde:	f003 0320 	and.w	r3, r3, #32
 8009de2:	2b00      	cmp	r3, #0
 8009de4:	d003      	beq.n	8009dee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8009de6:	6878      	ldr	r0, [r7, #4]
 8009de8:	f000 fc07 	bl	800a5fa <UART_Receive_IT>
      return;
 8009dec:	e256      	b.n	800a29c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8009dee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009df2:	2b00      	cmp	r3, #0
 8009df4:	f000 80de 	beq.w	8009fb4 <HAL_UART_IRQHandler+0x22c>
 8009df8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009dfc:	f003 0301 	and.w	r3, r3, #1
 8009e00:	2b00      	cmp	r3, #0
 8009e02:	d106      	bne.n	8009e12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8009e04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e08:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8009e0c:	2b00      	cmp	r3, #0
 8009e0e:	f000 80d1 	beq.w	8009fb4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8009e12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e16:	f003 0301 	and.w	r3, r3, #1
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	d00b      	beq.n	8009e36 <HAL_UART_IRQHandler+0xae>
 8009e1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e22:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8009e26:	2b00      	cmp	r3, #0
 8009e28:	d005      	beq.n	8009e36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8009e2a:	687b      	ldr	r3, [r7, #4]
 8009e2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e2e:	f043 0201 	orr.w	r2, r3, #1
 8009e32:	687b      	ldr	r3, [r7, #4]
 8009e34:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e3a:	f003 0304 	and.w	r3, r3, #4
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	d00b      	beq.n	8009e5a <HAL_UART_IRQHandler+0xd2>
 8009e42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e46:	f003 0301 	and.w	r3, r3, #1
 8009e4a:	2b00      	cmp	r3, #0
 8009e4c:	d005      	beq.n	8009e5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009e4e:	687b      	ldr	r3, [r7, #4]
 8009e50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e52:	f043 0202 	orr.w	r2, r3, #2
 8009e56:	687b      	ldr	r3, [r7, #4]
 8009e58:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009e5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e5e:	f003 0302 	and.w	r3, r3, #2
 8009e62:	2b00      	cmp	r3, #0
 8009e64:	d00b      	beq.n	8009e7e <HAL_UART_IRQHandler+0xf6>
 8009e66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e6a:	f003 0301 	and.w	r3, r3, #1
 8009e6e:	2b00      	cmp	r3, #0
 8009e70:	d005      	beq.n	8009e7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8009e72:	687b      	ldr	r3, [r7, #4]
 8009e74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009e76:	f043 0204 	orr.w	r2, r3, #4
 8009e7a:	687b      	ldr	r3, [r7, #4]
 8009e7c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009e7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009e82:	f003 0308 	and.w	r3, r3, #8
 8009e86:	2b00      	cmp	r3, #0
 8009e88:	d011      	beq.n	8009eae <HAL_UART_IRQHandler+0x126>
 8009e8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009e8e:	f003 0320 	and.w	r3, r3, #32
 8009e92:	2b00      	cmp	r3, #0
 8009e94:	d105      	bne.n	8009ea2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8009e96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009e9a:	f003 0301 	and.w	r3, r3, #1
 8009e9e:	2b00      	cmp	r3, #0
 8009ea0:	d005      	beq.n	8009eae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8009ea2:	687b      	ldr	r3, [r7, #4]
 8009ea4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ea6:	f043 0208 	orr.w	r2, r3, #8
 8009eaa:	687b      	ldr	r3, [r7, #4]
 8009eac:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009eb2:	2b00      	cmp	r3, #0
 8009eb4:	f000 81ed 	beq.w	800a292 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009eb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009ebc:	f003 0320 	and.w	r3, r3, #32
 8009ec0:	2b00      	cmp	r3, #0
 8009ec2:	d008      	beq.n	8009ed6 <HAL_UART_IRQHandler+0x14e>
 8009ec4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009ec8:	f003 0320 	and.w	r3, r3, #32
 8009ecc:	2b00      	cmp	r3, #0
 8009ece:	d002      	beq.n	8009ed6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009ed0:	6878      	ldr	r0, [r7, #4]
 8009ed2:	f000 fb92 	bl	800a5fa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8009ed6:	687b      	ldr	r3, [r7, #4]
 8009ed8:	681b      	ldr	r3, [r3, #0]
 8009eda:	695b      	ldr	r3, [r3, #20]
 8009edc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ee0:	2b40      	cmp	r3, #64	; 0x40
 8009ee2:	bf0c      	ite	eq
 8009ee4:	2301      	moveq	r3, #1
 8009ee6:	2300      	movne	r3, #0
 8009ee8:	b2db      	uxtb	r3, r3
 8009eea:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8009eee:	687b      	ldr	r3, [r7, #4]
 8009ef0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8009ef2:	f003 0308 	and.w	r3, r3, #8
 8009ef6:	2b00      	cmp	r3, #0
 8009ef8:	d103      	bne.n	8009f02 <HAL_UART_IRQHandler+0x17a>
 8009efa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8009efe:	2b00      	cmp	r3, #0
 8009f00:	d04f      	beq.n	8009fa2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8009f02:	6878      	ldr	r0, [r7, #4]
 8009f04:	f000 fa9a 	bl	800a43c <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f08:	687b      	ldr	r3, [r7, #4]
 8009f0a:	681b      	ldr	r3, [r3, #0]
 8009f0c:	695b      	ldr	r3, [r3, #20]
 8009f0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009f12:	2b40      	cmp	r3, #64	; 0x40
 8009f14:	d141      	bne.n	8009f9a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8009f16:	687b      	ldr	r3, [r7, #4]
 8009f18:	681b      	ldr	r3, [r3, #0]
 8009f1a:	3314      	adds	r3, #20
 8009f1c:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009f20:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8009f24:	e853 3f00 	ldrex	r3, [r3]
 8009f28:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8009f2c:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8009f30:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009f34:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009f38:	687b      	ldr	r3, [r7, #4]
 8009f3a:	681b      	ldr	r3, [r3, #0]
 8009f3c:	3314      	adds	r3, #20
 8009f3e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8009f42:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8009f46:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009f4a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009f4e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8009f52:	e841 2300 	strex	r3, r2, [r1]
 8009f56:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009f5a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009f5e:	2b00      	cmp	r3, #0
 8009f60:	d1d9      	bne.n	8009f16 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f66:	2b00      	cmp	r3, #0
 8009f68:	d013      	beq.n	8009f92 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009f6a:	687b      	ldr	r3, [r7, #4]
 8009f6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f6e:	4a7d      	ldr	r2, [pc, #500]	; (800a164 <HAL_UART_IRQHandler+0x3dc>)
 8009f70:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8009f72:	687b      	ldr	r3, [r7, #4]
 8009f74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f76:	4618      	mov	r0, r3
 8009f78:	f7fd fddf 	bl	8007b3a <HAL_DMA_Abort_IT>
 8009f7c:	4603      	mov	r3, r0
 8009f7e:	2b00      	cmp	r3, #0
 8009f80:	d016      	beq.n	8009fb0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8009f82:	687b      	ldr	r3, [r7, #4]
 8009f84:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009f86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009f88:	687a      	ldr	r2, [r7, #4]
 8009f8a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009f8c:	4610      	mov	r0, r2
 8009f8e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f90:	e00e      	b.n	8009fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8009f92:	6878      	ldr	r0, [r7, #4]
 8009f94:	f000 f990 	bl	800a2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009f98:	e00a      	b.n	8009fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009f9a:	6878      	ldr	r0, [r7, #4]
 8009f9c:	f000 f98c 	bl	800a2b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fa0:	e006      	b.n	8009fb0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8009fa2:	6878      	ldr	r0, [r7, #4]
 8009fa4:	f000 f988 	bl	800a2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009fa8:	687b      	ldr	r3, [r7, #4]
 8009faa:	2200      	movs	r2, #0
 8009fac:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009fae:	e170      	b.n	800a292 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009fb0:	bf00      	nop
    return;
 8009fb2:	e16e      	b.n	800a292 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009fb4:	687b      	ldr	r3, [r7, #4]
 8009fb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009fb8:	2b01      	cmp	r3, #1
 8009fba:	f040 814a 	bne.w	800a252 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009fbe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009fc2:	f003 0310 	and.w	r3, r3, #16
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	f000 8143 	beq.w	800a252 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009fcc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009fd0:	f003 0310 	and.w	r3, r3, #16
 8009fd4:	2b00      	cmp	r3, #0
 8009fd6:	f000 813c 	beq.w	800a252 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009fda:	2300      	movs	r3, #0
 8009fdc:	60bb      	str	r3, [r7, #8]
 8009fde:	687b      	ldr	r3, [r7, #4]
 8009fe0:	681b      	ldr	r3, [r3, #0]
 8009fe2:	681b      	ldr	r3, [r3, #0]
 8009fe4:	60bb      	str	r3, [r7, #8]
 8009fe6:	687b      	ldr	r3, [r7, #4]
 8009fe8:	681b      	ldr	r3, [r3, #0]
 8009fea:	685b      	ldr	r3, [r3, #4]
 8009fec:	60bb      	str	r3, [r7, #8]
 8009fee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009ff0:	687b      	ldr	r3, [r7, #4]
 8009ff2:	681b      	ldr	r3, [r3, #0]
 8009ff4:	695b      	ldr	r3, [r3, #20]
 8009ff6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009ffa:	2b40      	cmp	r3, #64	; 0x40
 8009ffc:	f040 80b4 	bne.w	800a168 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800a000:	687b      	ldr	r3, [r7, #4]
 800a002:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a004:	681b      	ldr	r3, [r3, #0]
 800a006:	685b      	ldr	r3, [r3, #4]
 800a008:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 800a00c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 800a010:	2b00      	cmp	r3, #0
 800a012:	f000 8140 	beq.w	800a296 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800a016:	687b      	ldr	r3, [r7, #4]
 800a018:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a01a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a01e:	429a      	cmp	r2, r3
 800a020:	f080 8139 	bcs.w	800a296 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800a024:	687b      	ldr	r3, [r7, #4]
 800a026:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 800a02a:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800a02c:	687b      	ldr	r3, [r7, #4]
 800a02e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a030:	69db      	ldr	r3, [r3, #28]
 800a032:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800a036:	f000 8088 	beq.w	800a14a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800a03a:	687b      	ldr	r3, [r7, #4]
 800a03c:	681b      	ldr	r3, [r3, #0]
 800a03e:	330c      	adds	r3, #12
 800a040:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a044:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 800a048:	e853 3f00 	ldrex	r3, [r3]
 800a04c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 800a050:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800a054:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a058:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a05c:	687b      	ldr	r3, [r7, #4]
 800a05e:	681b      	ldr	r3, [r3, #0]
 800a060:	330c      	adds	r3, #12
 800a062:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800a066:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800a06a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a06e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800a072:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800a076:	e841 2300 	strex	r3, r2, [r1]
 800a07a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 800a07e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800a082:	2b00      	cmp	r3, #0
 800a084:	d1d9      	bne.n	800a03a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a086:	687b      	ldr	r3, [r7, #4]
 800a088:	681b      	ldr	r3, [r3, #0]
 800a08a:	3314      	adds	r3, #20
 800a08c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a08e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800a090:	e853 3f00 	ldrex	r3, [r3]
 800a094:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800a096:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800a098:	f023 0301 	bic.w	r3, r3, #1
 800a09c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a0a0:	687b      	ldr	r3, [r7, #4]
 800a0a2:	681b      	ldr	r3, [r3, #0]
 800a0a4:	3314      	adds	r3, #20
 800a0a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 800a0aa:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 800a0ae:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0b0:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800a0b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800a0b6:	e841 2300 	strex	r3, r2, [r1]
 800a0ba:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 800a0bc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	d1e1      	bne.n	800a086 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800a0c2:	687b      	ldr	r3, [r7, #4]
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	3314      	adds	r3, #20
 800a0c8:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a0ca:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 800a0cc:	e853 3f00 	ldrex	r3, [r3]
 800a0d0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800a0d2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800a0d4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 800a0d8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a0dc:	687b      	ldr	r3, [r7, #4]
 800a0de:	681b      	ldr	r3, [r3, #0]
 800a0e0:	3314      	adds	r3, #20
 800a0e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800a0e6:	66fa      	str	r2, [r7, #108]	; 0x6c
 800a0e8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a0ea:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 800a0ec:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 800a0ee:	e841 2300 	strex	r3, r2, [r1]
 800a0f2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 800a0f4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 800a0f6:	2b00      	cmp	r3, #0
 800a0f8:	d1e3      	bne.n	800a0c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800a0fa:	687b      	ldr	r3, [r7, #4]
 800a0fc:	2220      	movs	r2, #32
 800a0fe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a102:	687b      	ldr	r3, [r7, #4]
 800a104:	2200      	movs	r2, #0
 800a106:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a108:	687b      	ldr	r3, [r7, #4]
 800a10a:	681b      	ldr	r3, [r3, #0]
 800a10c:	330c      	adds	r3, #12
 800a10e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a110:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 800a112:	e853 3f00 	ldrex	r3, [r3]
 800a116:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 800a118:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a11a:	f023 0310 	bic.w	r3, r3, #16
 800a11e:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 800a122:	687b      	ldr	r3, [r7, #4]
 800a124:	681b      	ldr	r3, [r3, #0]
 800a126:	330c      	adds	r3, #12
 800a128:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 800a12c:	65ba      	str	r2, [r7, #88]	; 0x58
 800a12e:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a130:	6d79      	ldr	r1, [r7, #84]	; 0x54
 800a132:	6dba      	ldr	r2, [r7, #88]	; 0x58
 800a134:	e841 2300 	strex	r3, r2, [r1]
 800a138:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 800a13a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 800a13c:	2b00      	cmp	r3, #0
 800a13e:	d1e3      	bne.n	800a108 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800a140:	687b      	ldr	r3, [r7, #4]
 800a142:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a144:	4618      	mov	r0, r3
 800a146:	f7fd fc88 	bl	8007a5a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800a14a:	687b      	ldr	r3, [r7, #4]
 800a14c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a14e:	687b      	ldr	r3, [r7, #4]
 800a150:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a152:	b29b      	uxth	r3, r3
 800a154:	1ad3      	subs	r3, r2, r3
 800a156:	b29b      	uxth	r3, r3
 800a158:	4619      	mov	r1, r3
 800a15a:	6878      	ldr	r0, [r7, #4]
 800a15c:	f000 f8b6 	bl	800a2cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a160:	e099      	b.n	800a296 <HAL_UART_IRQHandler+0x50e>
 800a162:	bf00      	nop
 800a164:	0800a503 	.word	0x0800a503
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800a168:	687b      	ldr	r3, [r7, #4]
 800a16a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800a16c:	687b      	ldr	r3, [r7, #4]
 800a16e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a170:	b29b      	uxth	r3, r3
 800a172:	1ad3      	subs	r3, r2, r3
 800a174:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 800a178:	687b      	ldr	r3, [r7, #4]
 800a17a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a17c:	b29b      	uxth	r3, r3
 800a17e:	2b00      	cmp	r3, #0
 800a180:	f000 808b 	beq.w	800a29a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800a184:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a188:	2b00      	cmp	r3, #0
 800a18a:	f000 8086 	beq.w	800a29a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a18e:	687b      	ldr	r3, [r7, #4]
 800a190:	681b      	ldr	r3, [r3, #0]
 800a192:	330c      	adds	r3, #12
 800a194:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a196:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a198:	e853 3f00 	ldrex	r3, [r3]
 800a19c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 800a19e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a1a0:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a1a4:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a1a8:	687b      	ldr	r3, [r7, #4]
 800a1aa:	681b      	ldr	r3, [r3, #0]
 800a1ac:	330c      	adds	r3, #12
 800a1ae:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800a1b2:	647a      	str	r2, [r7, #68]	; 0x44
 800a1b4:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1b6:	6c39      	ldr	r1, [r7, #64]	; 0x40
 800a1b8:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a1ba:	e841 2300 	strex	r3, r2, [r1]
 800a1be:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 800a1c0:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800a1c2:	2b00      	cmp	r3, #0
 800a1c4:	d1e3      	bne.n	800a18e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a1c6:	687b      	ldr	r3, [r7, #4]
 800a1c8:	681b      	ldr	r3, [r3, #0]
 800a1ca:	3314      	adds	r3, #20
 800a1cc:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a1ce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a1d0:	e853 3f00 	ldrex	r3, [r3]
 800a1d4:	623b      	str	r3, [r7, #32]
   return(result);
 800a1d6:	6a3b      	ldr	r3, [r7, #32]
 800a1d8:	f023 0301 	bic.w	r3, r3, #1
 800a1dc:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 800a1e0:	687b      	ldr	r3, [r7, #4]
 800a1e2:	681b      	ldr	r3, [r3, #0]
 800a1e4:	3314      	adds	r3, #20
 800a1e6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 800a1ea:	633a      	str	r2, [r7, #48]	; 0x30
 800a1ec:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a1ee:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800a1f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 800a1f2:	e841 2300 	strex	r3, r2, [r1]
 800a1f6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 800a1f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a1fa:	2b00      	cmp	r3, #0
 800a1fc:	d1e3      	bne.n	800a1c6 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800a1fe:	687b      	ldr	r3, [r7, #4]
 800a200:	2220      	movs	r2, #32
 800a202:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a206:	687b      	ldr	r3, [r7, #4]
 800a208:	2200      	movs	r2, #0
 800a20a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a20c:	687b      	ldr	r3, [r7, #4]
 800a20e:	681b      	ldr	r3, [r3, #0]
 800a210:	330c      	adds	r3, #12
 800a212:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a214:	693b      	ldr	r3, [r7, #16]
 800a216:	e853 3f00 	ldrex	r3, [r3]
 800a21a:	60fb      	str	r3, [r7, #12]
   return(result);
 800a21c:	68fb      	ldr	r3, [r7, #12]
 800a21e:	f023 0310 	bic.w	r3, r3, #16
 800a222:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a226:	687b      	ldr	r3, [r7, #4]
 800a228:	681b      	ldr	r3, [r3, #0]
 800a22a:	330c      	adds	r3, #12
 800a22c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 800a230:	61fa      	str	r2, [r7, #28]
 800a232:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a234:	69b9      	ldr	r1, [r7, #24]
 800a236:	69fa      	ldr	r2, [r7, #28]
 800a238:	e841 2300 	strex	r3, r2, [r1]
 800a23c:	617b      	str	r3, [r7, #20]
   return(result);
 800a23e:	697b      	ldr	r3, [r7, #20]
 800a240:	2b00      	cmp	r3, #0
 800a242:	d1e3      	bne.n	800a20c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800a244:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 800a248:	4619      	mov	r1, r3
 800a24a:	6878      	ldr	r0, [r7, #4]
 800a24c:	f000 f83e 	bl	800a2cc <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800a250:	e023      	b.n	800a29a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800a252:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a256:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a25a:	2b00      	cmp	r3, #0
 800a25c:	d009      	beq.n	800a272 <HAL_UART_IRQHandler+0x4ea>
 800a25e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a262:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800a266:	2b00      	cmp	r3, #0
 800a268:	d003      	beq.n	800a272 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 800a26a:	6878      	ldr	r0, [r7, #4]
 800a26c:	f000 f95d 	bl	800a52a <UART_Transmit_IT>
    return;
 800a270:	e014      	b.n	800a29c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800a272:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800a276:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a27a:	2b00      	cmp	r3, #0
 800a27c:	d00e      	beq.n	800a29c <HAL_UART_IRQHandler+0x514>
 800a27e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800a282:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800a286:	2b00      	cmp	r3, #0
 800a288:	d008      	beq.n	800a29c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 800a28a:	6878      	ldr	r0, [r7, #4]
 800a28c:	f000 f99d 	bl	800a5ca <UART_EndTransmit_IT>
    return;
 800a290:	e004      	b.n	800a29c <HAL_UART_IRQHandler+0x514>
    return;
 800a292:	bf00      	nop
 800a294:	e002      	b.n	800a29c <HAL_UART_IRQHandler+0x514>
      return;
 800a296:	bf00      	nop
 800a298:	e000      	b.n	800a29c <HAL_UART_IRQHandler+0x514>
      return;
 800a29a:	bf00      	nop
  }
}
 800a29c:	37e8      	adds	r7, #232	; 0xe8
 800a29e:	46bd      	mov	sp, r7
 800a2a0:	bd80      	pop	{r7, pc}
 800a2a2:	bf00      	nop

0800a2a4 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800a2a4:	b480      	push	{r7}
 800a2a6:	b083      	sub	sp, #12
 800a2a8:	af00      	add	r7, sp, #0
 800a2aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800a2ac:	bf00      	nop
 800a2ae:	370c      	adds	r7, #12
 800a2b0:	46bd      	mov	sp, r7
 800a2b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2b6:	4770      	bx	lr

0800a2b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800a2b8:	b480      	push	{r7}
 800a2ba:	b083      	sub	sp, #12
 800a2bc:	af00      	add	r7, sp, #0
 800a2be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800a2c0:	bf00      	nop
 800a2c2:	370c      	adds	r7, #12
 800a2c4:	46bd      	mov	sp, r7
 800a2c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2ca:	4770      	bx	lr

0800a2cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800a2cc:	b480      	push	{r7}
 800a2ce:	b083      	sub	sp, #12
 800a2d0:	af00      	add	r7, sp, #0
 800a2d2:	6078      	str	r0, [r7, #4]
 800a2d4:	460b      	mov	r3, r1
 800a2d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800a2d8:	bf00      	nop
 800a2da:	370c      	adds	r7, #12
 800a2dc:	46bd      	mov	sp, r7
 800a2de:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a2e2:	4770      	bx	lr

0800a2e4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800a2e4:	b580      	push	{r7, lr}
 800a2e6:	b090      	sub	sp, #64	; 0x40
 800a2e8:	af00      	add	r7, sp, #0
 800a2ea:	60f8      	str	r0, [r7, #12]
 800a2ec:	60b9      	str	r1, [r7, #8]
 800a2ee:	603b      	str	r3, [r7, #0]
 800a2f0:	4613      	mov	r3, r2
 800a2f2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a2f4:	e050      	b.n	800a398 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800a2f6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a2f8:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a2fc:	d04c      	beq.n	800a398 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 800a2fe:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 800a300:	2b00      	cmp	r3, #0
 800a302:	d007      	beq.n	800a314 <UART_WaitOnFlagUntilTimeout+0x30>
 800a304:	f7fd fa4e 	bl	80077a4 <HAL_GetTick>
 800a308:	4602      	mov	r2, r0
 800a30a:	683b      	ldr	r3, [r7, #0]
 800a30c:	1ad3      	subs	r3, r2, r3
 800a30e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a310:	429a      	cmp	r2, r3
 800a312:	d241      	bcs.n	800a398 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 800a314:	68fb      	ldr	r3, [r7, #12]
 800a316:	681b      	ldr	r3, [r3, #0]
 800a318:	330c      	adds	r3, #12
 800a31a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a31c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a31e:	e853 3f00 	ldrex	r3, [r3]
 800a322:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a324:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a326:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 800a32a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a32c:	68fb      	ldr	r3, [r7, #12]
 800a32e:	681b      	ldr	r3, [r3, #0]
 800a330:	330c      	adds	r3, #12
 800a332:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800a334:	637a      	str	r2, [r7, #52]	; 0x34
 800a336:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a338:	6b39      	ldr	r1, [r7, #48]	; 0x30
 800a33a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 800a33c:	e841 2300 	strex	r3, r2, [r1]
 800a340:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800a342:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a344:	2b00      	cmp	r3, #0
 800a346:	d1e5      	bne.n	800a314 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a348:	68fb      	ldr	r3, [r7, #12]
 800a34a:	681b      	ldr	r3, [r3, #0]
 800a34c:	3314      	adds	r3, #20
 800a34e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a350:	697b      	ldr	r3, [r7, #20]
 800a352:	e853 3f00 	ldrex	r3, [r3]
 800a356:	613b      	str	r3, [r7, #16]
   return(result);
 800a358:	693b      	ldr	r3, [r7, #16]
 800a35a:	f023 0301 	bic.w	r3, r3, #1
 800a35e:	63bb      	str	r3, [r7, #56]	; 0x38
 800a360:	68fb      	ldr	r3, [r7, #12]
 800a362:	681b      	ldr	r3, [r3, #0]
 800a364:	3314      	adds	r3, #20
 800a366:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800a368:	623a      	str	r2, [r7, #32]
 800a36a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a36c:	69f9      	ldr	r1, [r7, #28]
 800a36e:	6a3a      	ldr	r2, [r7, #32]
 800a370:	e841 2300 	strex	r3, r2, [r1]
 800a374:	61bb      	str	r3, [r7, #24]
   return(result);
 800a376:	69bb      	ldr	r3, [r7, #24]
 800a378:	2b00      	cmp	r3, #0
 800a37a:	d1e5      	bne.n	800a348 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 800a37c:	68fb      	ldr	r3, [r7, #12]
 800a37e:	2220      	movs	r2, #32
 800a380:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800a384:	68fb      	ldr	r3, [r7, #12]
 800a386:	2220      	movs	r2, #32
 800a388:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 800a38c:	68fb      	ldr	r3, [r7, #12]
 800a38e:	2200      	movs	r2, #0
 800a390:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800a394:	2303      	movs	r3, #3
 800a396:	e00f      	b.n	800a3b8 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 800a398:	68fb      	ldr	r3, [r7, #12]
 800a39a:	681b      	ldr	r3, [r3, #0]
 800a39c:	681a      	ldr	r2, [r3, #0]
 800a39e:	68bb      	ldr	r3, [r7, #8]
 800a3a0:	4013      	ands	r3, r2
 800a3a2:	68ba      	ldr	r2, [r7, #8]
 800a3a4:	429a      	cmp	r2, r3
 800a3a6:	bf0c      	ite	eq
 800a3a8:	2301      	moveq	r3, #1
 800a3aa:	2300      	movne	r3, #0
 800a3ac:	b2db      	uxtb	r3, r3
 800a3ae:	461a      	mov	r2, r3
 800a3b0:	79fb      	ldrb	r3, [r7, #7]
 800a3b2:	429a      	cmp	r2, r3
 800a3b4:	d09f      	beq.n	800a2f6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800a3b6:	2300      	movs	r3, #0
}
 800a3b8:	4618      	mov	r0, r3
 800a3ba:	3740      	adds	r7, #64	; 0x40
 800a3bc:	46bd      	mov	sp, r7
 800a3be:	bd80      	pop	{r7, pc}

0800a3c0 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800a3c0:	b480      	push	{r7}
 800a3c2:	b085      	sub	sp, #20
 800a3c4:	af00      	add	r7, sp, #0
 800a3c6:	60f8      	str	r0, [r7, #12]
 800a3c8:	60b9      	str	r1, [r7, #8]
 800a3ca:	4613      	mov	r3, r2
 800a3cc:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 800a3ce:	68fb      	ldr	r3, [r7, #12]
 800a3d0:	68ba      	ldr	r2, [r7, #8]
 800a3d2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800a3d4:	68fb      	ldr	r3, [r7, #12]
 800a3d6:	88fa      	ldrh	r2, [r7, #6]
 800a3d8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 800a3da:	68fb      	ldr	r3, [r7, #12]
 800a3dc:	88fa      	ldrh	r2, [r7, #6]
 800a3de:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800a3e0:	68fb      	ldr	r3, [r7, #12]
 800a3e2:	2200      	movs	r2, #0
 800a3e4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800a3e6:	68fb      	ldr	r3, [r7, #12]
 800a3e8:	2222      	movs	r2, #34	; 0x22
 800a3ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800a3ee:	68fb      	ldr	r3, [r7, #12]
 800a3f0:	2200      	movs	r2, #0
 800a3f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 800a3f6:	68fb      	ldr	r3, [r7, #12]
 800a3f8:	691b      	ldr	r3, [r3, #16]
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d007      	beq.n	800a40e <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 800a3fe:	68fb      	ldr	r3, [r7, #12]
 800a400:	681b      	ldr	r3, [r3, #0]
 800a402:	68da      	ldr	r2, [r3, #12]
 800a404:	68fb      	ldr	r3, [r7, #12]
 800a406:	681b      	ldr	r3, [r3, #0]
 800a408:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800a40c:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 800a40e:	68fb      	ldr	r3, [r7, #12]
 800a410:	681b      	ldr	r3, [r3, #0]
 800a412:	695a      	ldr	r2, [r3, #20]
 800a414:	68fb      	ldr	r3, [r7, #12]
 800a416:	681b      	ldr	r3, [r3, #0]
 800a418:	f042 0201 	orr.w	r2, r2, #1
 800a41c:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 800a41e:	68fb      	ldr	r3, [r7, #12]
 800a420:	681b      	ldr	r3, [r3, #0]
 800a422:	68da      	ldr	r2, [r3, #12]
 800a424:	68fb      	ldr	r3, [r7, #12]
 800a426:	681b      	ldr	r3, [r3, #0]
 800a428:	f042 0220 	orr.w	r2, r2, #32
 800a42c:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 800a42e:	2300      	movs	r3, #0
}
 800a430:	4618      	mov	r0, r3
 800a432:	3714      	adds	r7, #20
 800a434:	46bd      	mov	sp, r7
 800a436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a43a:	4770      	bx	lr

0800a43c <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800a43c:	b480      	push	{r7}
 800a43e:	b095      	sub	sp, #84	; 0x54
 800a440:	af00      	add	r7, sp, #0
 800a442:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800a444:	687b      	ldr	r3, [r7, #4]
 800a446:	681b      	ldr	r3, [r3, #0]
 800a448:	330c      	adds	r3, #12
 800a44a:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a44c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800a44e:	e853 3f00 	ldrex	r3, [r3]
 800a452:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800a454:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800a456:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800a45a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a45c:	687b      	ldr	r3, [r7, #4]
 800a45e:	681b      	ldr	r3, [r3, #0]
 800a460:	330c      	adds	r3, #12
 800a462:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800a464:	643a      	str	r2, [r7, #64]	; 0x40
 800a466:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a468:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800a46a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800a46c:	e841 2300 	strex	r3, r2, [r1]
 800a470:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800a472:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800a474:	2b00      	cmp	r3, #0
 800a476:	d1e5      	bne.n	800a444 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800a478:	687b      	ldr	r3, [r7, #4]
 800a47a:	681b      	ldr	r3, [r3, #0]
 800a47c:	3314      	adds	r3, #20
 800a47e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a480:	6a3b      	ldr	r3, [r7, #32]
 800a482:	e853 3f00 	ldrex	r3, [r3]
 800a486:	61fb      	str	r3, [r7, #28]
   return(result);
 800a488:	69fb      	ldr	r3, [r7, #28]
 800a48a:	f023 0301 	bic.w	r3, r3, #1
 800a48e:	64bb      	str	r3, [r7, #72]	; 0x48
 800a490:	687b      	ldr	r3, [r7, #4]
 800a492:	681b      	ldr	r3, [r3, #0]
 800a494:	3314      	adds	r3, #20
 800a496:	6cba      	ldr	r2, [r7, #72]	; 0x48
 800a498:	62fa      	str	r2, [r7, #44]	; 0x2c
 800a49a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a49c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800a49e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800a4a0:	e841 2300 	strex	r3, r2, [r1]
 800a4a4:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800a4a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d1e5      	bne.n	800a478 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a4ac:	687b      	ldr	r3, [r7, #4]
 800a4ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a4b0:	2b01      	cmp	r3, #1
 800a4b2:	d119      	bne.n	800a4e8 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a4b4:	687b      	ldr	r3, [r7, #4]
 800a4b6:	681b      	ldr	r3, [r3, #0]
 800a4b8:	330c      	adds	r3, #12
 800a4ba:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a4bc:	68fb      	ldr	r3, [r7, #12]
 800a4be:	e853 3f00 	ldrex	r3, [r3]
 800a4c2:	60bb      	str	r3, [r7, #8]
   return(result);
 800a4c4:	68bb      	ldr	r3, [r7, #8]
 800a4c6:	f023 0310 	bic.w	r3, r3, #16
 800a4ca:	647b      	str	r3, [r7, #68]	; 0x44
 800a4cc:	687b      	ldr	r3, [r7, #4]
 800a4ce:	681b      	ldr	r3, [r3, #0]
 800a4d0:	330c      	adds	r3, #12
 800a4d2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800a4d4:	61ba      	str	r2, [r7, #24]
 800a4d6:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a4d8:	6979      	ldr	r1, [r7, #20]
 800a4da:	69ba      	ldr	r2, [r7, #24]
 800a4dc:	e841 2300 	strex	r3, r2, [r1]
 800a4e0:	613b      	str	r3, [r7, #16]
   return(result);
 800a4e2:	693b      	ldr	r3, [r7, #16]
 800a4e4:	2b00      	cmp	r3, #0
 800a4e6:	d1e5      	bne.n	800a4b4 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	2220      	movs	r2, #32
 800a4ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a4f0:	687b      	ldr	r3, [r7, #4]
 800a4f2:	2200      	movs	r2, #0
 800a4f4:	631a      	str	r2, [r3, #48]	; 0x30
}
 800a4f6:	bf00      	nop
 800a4f8:	3754      	adds	r7, #84	; 0x54
 800a4fa:	46bd      	mov	sp, r7
 800a4fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a500:	4770      	bx	lr

0800a502 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800a502:	b580      	push	{r7, lr}
 800a504:	b084      	sub	sp, #16
 800a506:	af00      	add	r7, sp, #0
 800a508:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800a50a:	687b      	ldr	r3, [r7, #4]
 800a50c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800a50e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 800a510:	68fb      	ldr	r3, [r7, #12]
 800a512:	2200      	movs	r2, #0
 800a514:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800a516:	68fb      	ldr	r3, [r7, #12]
 800a518:	2200      	movs	r2, #0
 800a51a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800a51c:	68f8      	ldr	r0, [r7, #12]
 800a51e:	f7ff fecb 	bl	800a2b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800a522:	bf00      	nop
 800a524:	3710      	adds	r7, #16
 800a526:	46bd      	mov	sp, r7
 800a528:	bd80      	pop	{r7, pc}

0800a52a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800a52a:	b480      	push	{r7}
 800a52c:	b085      	sub	sp, #20
 800a52e:	af00      	add	r7, sp, #0
 800a530:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800a532:	687b      	ldr	r3, [r7, #4]
 800a534:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800a538:	b2db      	uxtb	r3, r3
 800a53a:	2b21      	cmp	r3, #33	; 0x21
 800a53c:	d13e      	bne.n	800a5bc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a53e:	687b      	ldr	r3, [r7, #4]
 800a540:	689b      	ldr	r3, [r3, #8]
 800a542:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a546:	d114      	bne.n	800a572 <UART_Transmit_IT+0x48>
 800a548:	687b      	ldr	r3, [r7, #4]
 800a54a:	691b      	ldr	r3, [r3, #16]
 800a54c:	2b00      	cmp	r3, #0
 800a54e:	d110      	bne.n	800a572 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800a550:	687b      	ldr	r3, [r7, #4]
 800a552:	6a1b      	ldr	r3, [r3, #32]
 800a554:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800a556:	68fb      	ldr	r3, [r7, #12]
 800a558:	881b      	ldrh	r3, [r3, #0]
 800a55a:	461a      	mov	r2, r3
 800a55c:	687b      	ldr	r3, [r7, #4]
 800a55e:	681b      	ldr	r3, [r3, #0]
 800a560:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800a564:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	6a1b      	ldr	r3, [r3, #32]
 800a56a:	1c9a      	adds	r2, r3, #2
 800a56c:	687b      	ldr	r3, [r7, #4]
 800a56e:	621a      	str	r2, [r3, #32]
 800a570:	e008      	b.n	800a584 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800a572:	687b      	ldr	r3, [r7, #4]
 800a574:	6a1b      	ldr	r3, [r3, #32]
 800a576:	1c59      	adds	r1, r3, #1
 800a578:	687a      	ldr	r2, [r7, #4]
 800a57a:	6211      	str	r1, [r2, #32]
 800a57c:	781a      	ldrb	r2, [r3, #0]
 800a57e:	687b      	ldr	r3, [r7, #4]
 800a580:	681b      	ldr	r3, [r3, #0]
 800a582:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800a584:	687b      	ldr	r3, [r7, #4]
 800a586:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 800a588:	b29b      	uxth	r3, r3
 800a58a:	3b01      	subs	r3, #1
 800a58c:	b29b      	uxth	r3, r3
 800a58e:	687a      	ldr	r2, [r7, #4]
 800a590:	4619      	mov	r1, r3
 800a592:	84d1      	strh	r1, [r2, #38]	; 0x26
 800a594:	2b00      	cmp	r3, #0
 800a596:	d10f      	bne.n	800a5b8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800a598:	687b      	ldr	r3, [r7, #4]
 800a59a:	681b      	ldr	r3, [r3, #0]
 800a59c:	68da      	ldr	r2, [r3, #12]
 800a59e:	687b      	ldr	r3, [r7, #4]
 800a5a0:	681b      	ldr	r3, [r3, #0]
 800a5a2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a5a6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681b      	ldr	r3, [r3, #0]
 800a5ac:	68da      	ldr	r2, [r3, #12]
 800a5ae:	687b      	ldr	r3, [r7, #4]
 800a5b0:	681b      	ldr	r3, [r3, #0]
 800a5b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800a5b6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800a5b8:	2300      	movs	r3, #0
 800a5ba:	e000      	b.n	800a5be <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800a5bc:	2302      	movs	r3, #2
  }
}
 800a5be:	4618      	mov	r0, r3
 800a5c0:	3714      	adds	r7, #20
 800a5c2:	46bd      	mov	sp, r7
 800a5c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800a5c8:	4770      	bx	lr

0800a5ca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800a5ca:	b580      	push	{r7, lr}
 800a5cc:	b082      	sub	sp, #8
 800a5ce:	af00      	add	r7, sp, #0
 800a5d0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800a5d2:	687b      	ldr	r3, [r7, #4]
 800a5d4:	681b      	ldr	r3, [r3, #0]
 800a5d6:	68da      	ldr	r2, [r3, #12]
 800a5d8:	687b      	ldr	r3, [r7, #4]
 800a5da:	681b      	ldr	r3, [r3, #0]
 800a5dc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800a5e0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800a5e2:	687b      	ldr	r3, [r7, #4]
 800a5e4:	2220      	movs	r2, #32
 800a5e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800a5ea:	6878      	ldr	r0, [r7, #4]
 800a5ec:	f7ff fe5a 	bl	800a2a4 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800a5f0:	2300      	movs	r3, #0
}
 800a5f2:	4618      	mov	r0, r3
 800a5f4:	3708      	adds	r7, #8
 800a5f6:	46bd      	mov	sp, r7
 800a5f8:	bd80      	pop	{r7, pc}

0800a5fa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 800a5fa:	b580      	push	{r7, lr}
 800a5fc:	b08c      	sub	sp, #48	; 0x30
 800a5fe:	af00      	add	r7, sp, #0
 800a600:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800a602:	687b      	ldr	r3, [r7, #4]
 800a604:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800a608:	b2db      	uxtb	r3, r3
 800a60a:	2b22      	cmp	r3, #34	; 0x22
 800a60c:	f040 80ab 	bne.w	800a766 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800a610:	687b      	ldr	r3, [r7, #4]
 800a612:	689b      	ldr	r3, [r3, #8]
 800a614:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a618:	d117      	bne.n	800a64a <UART_Receive_IT+0x50>
 800a61a:	687b      	ldr	r3, [r7, #4]
 800a61c:	691b      	ldr	r3, [r3, #16]
 800a61e:	2b00      	cmp	r3, #0
 800a620:	d113      	bne.n	800a64a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800a622:	2300      	movs	r3, #0
 800a624:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800a626:	687b      	ldr	r3, [r7, #4]
 800a628:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a62a:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800a62c:	687b      	ldr	r3, [r7, #4]
 800a62e:	681b      	ldr	r3, [r3, #0]
 800a630:	685b      	ldr	r3, [r3, #4]
 800a632:	b29b      	uxth	r3, r3
 800a634:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800a638:	b29a      	uxth	r2, r3
 800a63a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800a63c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800a63e:	687b      	ldr	r3, [r7, #4]
 800a640:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a642:	1c9a      	adds	r2, r3, #2
 800a644:	687b      	ldr	r3, [r7, #4]
 800a646:	629a      	str	r2, [r3, #40]	; 0x28
 800a648:	e026      	b.n	800a698 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800a64a:	687b      	ldr	r3, [r7, #4]
 800a64c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a64e:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 800a650:	2300      	movs	r3, #0
 800a652:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800a654:	687b      	ldr	r3, [r7, #4]
 800a656:	689b      	ldr	r3, [r3, #8]
 800a658:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800a65c:	d007      	beq.n	800a66e <UART_Receive_IT+0x74>
 800a65e:	687b      	ldr	r3, [r7, #4]
 800a660:	689b      	ldr	r3, [r3, #8]
 800a662:	2b00      	cmp	r3, #0
 800a664:	d10a      	bne.n	800a67c <UART_Receive_IT+0x82>
 800a666:	687b      	ldr	r3, [r7, #4]
 800a668:	691b      	ldr	r3, [r3, #16]
 800a66a:	2b00      	cmp	r3, #0
 800a66c:	d106      	bne.n	800a67c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800a66e:	687b      	ldr	r3, [r7, #4]
 800a670:	681b      	ldr	r3, [r3, #0]
 800a672:	685b      	ldr	r3, [r3, #4]
 800a674:	b2da      	uxtb	r2, r3
 800a676:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a678:	701a      	strb	r2, [r3, #0]
 800a67a:	e008      	b.n	800a68e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	681b      	ldr	r3, [r3, #0]
 800a680:	685b      	ldr	r3, [r3, #4]
 800a682:	b2db      	uxtb	r3, r3
 800a684:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 800a688:	b2da      	uxtb	r2, r3
 800a68a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800a68c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800a68e:	687b      	ldr	r3, [r7, #4]
 800a690:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800a692:	1c5a      	adds	r2, r3, #1
 800a694:	687b      	ldr	r3, [r7, #4]
 800a696:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 800a698:	687b      	ldr	r3, [r7, #4]
 800a69a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800a69c:	b29b      	uxth	r3, r3
 800a69e:	3b01      	subs	r3, #1
 800a6a0:	b29b      	uxth	r3, r3
 800a6a2:	687a      	ldr	r2, [r7, #4]
 800a6a4:	4619      	mov	r1, r3
 800a6a6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 800a6a8:	2b00      	cmp	r3, #0
 800a6aa:	d15a      	bne.n	800a762 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800a6ac:	687b      	ldr	r3, [r7, #4]
 800a6ae:	681b      	ldr	r3, [r3, #0]
 800a6b0:	68da      	ldr	r2, [r3, #12]
 800a6b2:	687b      	ldr	r3, [r7, #4]
 800a6b4:	681b      	ldr	r3, [r3, #0]
 800a6b6:	f022 0220 	bic.w	r2, r2, #32
 800a6ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800a6bc:	687b      	ldr	r3, [r7, #4]
 800a6be:	681b      	ldr	r3, [r3, #0]
 800a6c0:	68da      	ldr	r2, [r3, #12]
 800a6c2:	687b      	ldr	r3, [r7, #4]
 800a6c4:	681b      	ldr	r3, [r3, #0]
 800a6c6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800a6ca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800a6cc:	687b      	ldr	r3, [r7, #4]
 800a6ce:	681b      	ldr	r3, [r3, #0]
 800a6d0:	695a      	ldr	r2, [r3, #20]
 800a6d2:	687b      	ldr	r3, [r7, #4]
 800a6d4:	681b      	ldr	r3, [r3, #0]
 800a6d6:	f022 0201 	bic.w	r2, r2, #1
 800a6da:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800a6dc:	687b      	ldr	r3, [r7, #4]
 800a6de:	2220      	movs	r2, #32
 800a6e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800a6e4:	687b      	ldr	r3, [r7, #4]
 800a6e6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800a6e8:	2b01      	cmp	r3, #1
 800a6ea:	d135      	bne.n	800a758 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800a6ec:	687b      	ldr	r3, [r7, #4]
 800a6ee:	2200      	movs	r2, #0
 800a6f0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800a6f2:	687b      	ldr	r3, [r7, #4]
 800a6f4:	681b      	ldr	r3, [r3, #0]
 800a6f6:	330c      	adds	r3, #12
 800a6f8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800a6fa:	697b      	ldr	r3, [r7, #20]
 800a6fc:	e853 3f00 	ldrex	r3, [r3]
 800a700:	613b      	str	r3, [r7, #16]
   return(result);
 800a702:	693b      	ldr	r3, [r7, #16]
 800a704:	f023 0310 	bic.w	r3, r3, #16
 800a708:	627b      	str	r3, [r7, #36]	; 0x24
 800a70a:	687b      	ldr	r3, [r7, #4]
 800a70c:	681b      	ldr	r3, [r3, #0]
 800a70e:	330c      	adds	r3, #12
 800a710:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800a712:	623a      	str	r2, [r7, #32]
 800a714:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800a716:	69f9      	ldr	r1, [r7, #28]
 800a718:	6a3a      	ldr	r2, [r7, #32]
 800a71a:	e841 2300 	strex	r3, r2, [r1]
 800a71e:	61bb      	str	r3, [r7, #24]
   return(result);
 800a720:	69bb      	ldr	r3, [r7, #24]
 800a722:	2b00      	cmp	r3, #0
 800a724:	d1e5      	bne.n	800a6f2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800a726:	687b      	ldr	r3, [r7, #4]
 800a728:	681b      	ldr	r3, [r3, #0]
 800a72a:	681b      	ldr	r3, [r3, #0]
 800a72c:	f003 0310 	and.w	r3, r3, #16
 800a730:	2b10      	cmp	r3, #16
 800a732:	d10a      	bne.n	800a74a <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800a734:	2300      	movs	r3, #0
 800a736:	60fb      	str	r3, [r7, #12]
 800a738:	687b      	ldr	r3, [r7, #4]
 800a73a:	681b      	ldr	r3, [r3, #0]
 800a73c:	681b      	ldr	r3, [r3, #0]
 800a73e:	60fb      	str	r3, [r7, #12]
 800a740:	687b      	ldr	r3, [r7, #4]
 800a742:	681b      	ldr	r3, [r3, #0]
 800a744:	685b      	ldr	r3, [r3, #4]
 800a746:	60fb      	str	r3, [r7, #12]
 800a748:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800a74a:	687b      	ldr	r3, [r7, #4]
 800a74c:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800a74e:	4619      	mov	r1, r3
 800a750:	6878      	ldr	r0, [r7, #4]
 800a752:	f7ff fdbb 	bl	800a2cc <HAL_UARTEx_RxEventCallback>
 800a756:	e002      	b.n	800a75e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800a758:	6878      	ldr	r0, [r7, #4]
 800a75a:	f7fb f893 	bl	8005884 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800a75e:	2300      	movs	r3, #0
 800a760:	e002      	b.n	800a768 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800a762:	2300      	movs	r3, #0
 800a764:	e000      	b.n	800a768 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800a766:	2302      	movs	r3, #2
  }
}
 800a768:	4618      	mov	r0, r3
 800a76a:	3730      	adds	r7, #48	; 0x30
 800a76c:	46bd      	mov	sp, r7
 800a76e:	bd80      	pop	{r7, pc}

0800a770 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800a770:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800a774:	b0c0      	sub	sp, #256	; 0x100
 800a776:	af00      	add	r7, sp, #0
 800a778:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 800a77c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a780:	681b      	ldr	r3, [r3, #0]
 800a782:	691b      	ldr	r3, [r3, #16]
 800a784:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800a788:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a78c:	68d9      	ldr	r1, [r3, #12]
 800a78e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a792:	681a      	ldr	r2, [r3, #0]
 800a794:	ea40 0301 	orr.w	r3, r0, r1
 800a798:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800a79a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a79e:	689a      	ldr	r2, [r3, #8]
 800a7a0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7a4:	691b      	ldr	r3, [r3, #16]
 800a7a6:	431a      	orrs	r2, r3
 800a7a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ac:	695b      	ldr	r3, [r3, #20]
 800a7ae:	431a      	orrs	r2, r3
 800a7b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7b4:	69db      	ldr	r3, [r3, #28]
 800a7b6:	4313      	orrs	r3, r2
 800a7b8:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 800a7bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	68db      	ldr	r3, [r3, #12]
 800a7c4:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800a7c8:	f021 010c 	bic.w	r1, r1, #12
 800a7cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7d0:	681a      	ldr	r2, [r3, #0]
 800a7d2:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800a7d6:	430b      	orrs	r3, r1
 800a7d8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800a7da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7de:	681b      	ldr	r3, [r3, #0]
 800a7e0:	695b      	ldr	r3, [r3, #20]
 800a7e2:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800a7e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7ea:	6999      	ldr	r1, [r3, #24]
 800a7ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7f0:	681a      	ldr	r2, [r3, #0]
 800a7f2:	ea40 0301 	orr.w	r3, r0, r1
 800a7f6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800a7f8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a7fc:	681a      	ldr	r2, [r3, #0]
 800a7fe:	4b8f      	ldr	r3, [pc, #572]	; (800aa3c <UART_SetConfig+0x2cc>)
 800a800:	429a      	cmp	r2, r3
 800a802:	d005      	beq.n	800a810 <UART_SetConfig+0xa0>
 800a804:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a808:	681a      	ldr	r2, [r3, #0]
 800a80a:	4b8d      	ldr	r3, [pc, #564]	; (800aa40 <UART_SetConfig+0x2d0>)
 800a80c:	429a      	cmp	r2, r3
 800a80e:	d104      	bne.n	800a81a <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 800a810:	f7fe fac6 	bl	8008da0 <HAL_RCC_GetPCLK2Freq>
 800a814:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 800a818:	e003      	b.n	800a822 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800a81a:	f7fe faad 	bl	8008d78 <HAL_RCC_GetPCLK1Freq>
 800a81e:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800a822:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a826:	69db      	ldr	r3, [r3, #28]
 800a828:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800a82c:	f040 810c 	bne.w	800aa48 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800a830:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a834:	2200      	movs	r2, #0
 800a836:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 800a83a:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 800a83e:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800a842:	4622      	mov	r2, r4
 800a844:	462b      	mov	r3, r5
 800a846:	1891      	adds	r1, r2, r2
 800a848:	65b9      	str	r1, [r7, #88]	; 0x58
 800a84a:	415b      	adcs	r3, r3
 800a84c:	65fb      	str	r3, [r7, #92]	; 0x5c
 800a84e:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800a852:	4621      	mov	r1, r4
 800a854:	eb12 0801 	adds.w	r8, r2, r1
 800a858:	4629      	mov	r1, r5
 800a85a:	eb43 0901 	adc.w	r9, r3, r1
 800a85e:	f04f 0200 	mov.w	r2, #0
 800a862:	f04f 0300 	mov.w	r3, #0
 800a866:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 800a86a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800a86e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800a872:	4690      	mov	r8, r2
 800a874:	4699      	mov	r9, r3
 800a876:	4623      	mov	r3, r4
 800a878:	eb18 0303 	adds.w	r3, r8, r3
 800a87c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 800a880:	462b      	mov	r3, r5
 800a882:	eb49 0303 	adc.w	r3, r9, r3
 800a886:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 800a88a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a88e:	685b      	ldr	r3, [r3, #4]
 800a890:	2200      	movs	r2, #0
 800a892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800a896:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 800a89a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 800a89e:	460b      	mov	r3, r1
 800a8a0:	18db      	adds	r3, r3, r3
 800a8a2:	653b      	str	r3, [r7, #80]	; 0x50
 800a8a4:	4613      	mov	r3, r2
 800a8a6:	eb42 0303 	adc.w	r3, r2, r3
 800a8aa:	657b      	str	r3, [r7, #84]	; 0x54
 800a8ac:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800a8b0:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800a8b4:	f7f6 f9e8 	bl	8000c88 <__aeabi_uldivmod>
 800a8b8:	4602      	mov	r2, r0
 800a8ba:	460b      	mov	r3, r1
 800a8bc:	4b61      	ldr	r3, [pc, #388]	; (800aa44 <UART_SetConfig+0x2d4>)
 800a8be:	fba3 2302 	umull	r2, r3, r3, r2
 800a8c2:	095b      	lsrs	r3, r3, #5
 800a8c4:	011c      	lsls	r4, r3, #4
 800a8c6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a8ca:	2200      	movs	r2, #0
 800a8cc:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 800a8d0:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800a8d4:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 800a8d8:	4642      	mov	r2, r8
 800a8da:	464b      	mov	r3, r9
 800a8dc:	1891      	adds	r1, r2, r2
 800a8de:	64b9      	str	r1, [r7, #72]	; 0x48
 800a8e0:	415b      	adcs	r3, r3
 800a8e2:	64fb      	str	r3, [r7, #76]	; 0x4c
 800a8e4:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800a8e8:	4641      	mov	r1, r8
 800a8ea:	eb12 0a01 	adds.w	sl, r2, r1
 800a8ee:	4649      	mov	r1, r9
 800a8f0:	eb43 0b01 	adc.w	fp, r3, r1
 800a8f4:	f04f 0200 	mov.w	r2, #0
 800a8f8:	f04f 0300 	mov.w	r3, #0
 800a8fc:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 800a900:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800a904:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 800a908:	4692      	mov	sl, r2
 800a90a:	469b      	mov	fp, r3
 800a90c:	4643      	mov	r3, r8
 800a90e:	eb1a 0303 	adds.w	r3, sl, r3
 800a912:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800a916:	464b      	mov	r3, r9
 800a918:	eb4b 0303 	adc.w	r3, fp, r3
 800a91c:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800a920:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a924:	685b      	ldr	r3, [r3, #4]
 800a926:	2200      	movs	r2, #0
 800a928:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 800a92c:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 800a930:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800a934:	460b      	mov	r3, r1
 800a936:	18db      	adds	r3, r3, r3
 800a938:	643b      	str	r3, [r7, #64]	; 0x40
 800a93a:	4613      	mov	r3, r2
 800a93c:	eb42 0303 	adc.w	r3, r2, r3
 800a940:	647b      	str	r3, [r7, #68]	; 0x44
 800a942:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800a946:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 800a94a:	f7f6 f99d 	bl	8000c88 <__aeabi_uldivmod>
 800a94e:	4602      	mov	r2, r0
 800a950:	460b      	mov	r3, r1
 800a952:	4611      	mov	r1, r2
 800a954:	4b3b      	ldr	r3, [pc, #236]	; (800aa44 <UART_SetConfig+0x2d4>)
 800a956:	fba3 2301 	umull	r2, r3, r3, r1
 800a95a:	095b      	lsrs	r3, r3, #5
 800a95c:	2264      	movs	r2, #100	; 0x64
 800a95e:	fb02 f303 	mul.w	r3, r2, r3
 800a962:	1acb      	subs	r3, r1, r3
 800a964:	00db      	lsls	r3, r3, #3
 800a966:	f103 0232 	add.w	r2, r3, #50	; 0x32
 800a96a:	4b36      	ldr	r3, [pc, #216]	; (800aa44 <UART_SetConfig+0x2d4>)
 800a96c:	fba3 2302 	umull	r2, r3, r3, r2
 800a970:	095b      	lsrs	r3, r3, #5
 800a972:	005b      	lsls	r3, r3, #1
 800a974:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 800a978:	441c      	add	r4, r3
 800a97a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800a97e:	2200      	movs	r2, #0
 800a980:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800a984:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 800a988:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 800a98c:	4642      	mov	r2, r8
 800a98e:	464b      	mov	r3, r9
 800a990:	1891      	adds	r1, r2, r2
 800a992:	63b9      	str	r1, [r7, #56]	; 0x38
 800a994:	415b      	adcs	r3, r3
 800a996:	63fb      	str	r3, [r7, #60]	; 0x3c
 800a998:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 800a99c:	4641      	mov	r1, r8
 800a99e:	1851      	adds	r1, r2, r1
 800a9a0:	6339      	str	r1, [r7, #48]	; 0x30
 800a9a2:	4649      	mov	r1, r9
 800a9a4:	414b      	adcs	r3, r1
 800a9a6:	637b      	str	r3, [r7, #52]	; 0x34
 800a9a8:	f04f 0200 	mov.w	r2, #0
 800a9ac:	f04f 0300 	mov.w	r3, #0
 800a9b0:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800a9b4:	4659      	mov	r1, fp
 800a9b6:	00cb      	lsls	r3, r1, #3
 800a9b8:	4651      	mov	r1, sl
 800a9ba:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800a9be:	4651      	mov	r1, sl
 800a9c0:	00ca      	lsls	r2, r1, #3
 800a9c2:	4610      	mov	r0, r2
 800a9c4:	4619      	mov	r1, r3
 800a9c6:	4603      	mov	r3, r0
 800a9c8:	4642      	mov	r2, r8
 800a9ca:	189b      	adds	r3, r3, r2
 800a9cc:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 800a9d0:	464b      	mov	r3, r9
 800a9d2:	460a      	mov	r2, r1
 800a9d4:	eb42 0303 	adc.w	r3, r2, r3
 800a9d8:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 800a9dc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800a9e0:	685b      	ldr	r3, [r3, #4]
 800a9e2:	2200      	movs	r2, #0
 800a9e4:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 800a9e8:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 800a9ec:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 800a9f0:	460b      	mov	r3, r1
 800a9f2:	18db      	adds	r3, r3, r3
 800a9f4:	62bb      	str	r3, [r7, #40]	; 0x28
 800a9f6:	4613      	mov	r3, r2
 800a9f8:	eb42 0303 	adc.w	r3, r2, r3
 800a9fc:	62fb      	str	r3, [r7, #44]	; 0x2c
 800a9fe:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800aa02:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800aa06:	f7f6 f93f 	bl	8000c88 <__aeabi_uldivmod>
 800aa0a:	4602      	mov	r2, r0
 800aa0c:	460b      	mov	r3, r1
 800aa0e:	4b0d      	ldr	r3, [pc, #52]	; (800aa44 <UART_SetConfig+0x2d4>)
 800aa10:	fba3 1302 	umull	r1, r3, r3, r2
 800aa14:	095b      	lsrs	r3, r3, #5
 800aa16:	2164      	movs	r1, #100	; 0x64
 800aa18:	fb01 f303 	mul.w	r3, r1, r3
 800aa1c:	1ad3      	subs	r3, r2, r3
 800aa1e:	00db      	lsls	r3, r3, #3
 800aa20:	3332      	adds	r3, #50	; 0x32
 800aa22:	4a08      	ldr	r2, [pc, #32]	; (800aa44 <UART_SetConfig+0x2d4>)
 800aa24:	fba2 2303 	umull	r2, r3, r2, r3
 800aa28:	095b      	lsrs	r3, r3, #5
 800aa2a:	f003 0207 	and.w	r2, r3, #7
 800aa2e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa32:	681b      	ldr	r3, [r3, #0]
 800aa34:	4422      	add	r2, r4
 800aa36:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800aa38:	e105      	b.n	800ac46 <UART_SetConfig+0x4d6>
 800aa3a:	bf00      	nop
 800aa3c:	40011000 	.word	0x40011000
 800aa40:	40011400 	.word	0x40011400
 800aa44:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800aa48:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aa4c:	2200      	movs	r2, #0
 800aa4e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800aa52:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800aa56:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 800aa5a:	4642      	mov	r2, r8
 800aa5c:	464b      	mov	r3, r9
 800aa5e:	1891      	adds	r1, r2, r2
 800aa60:	6239      	str	r1, [r7, #32]
 800aa62:	415b      	adcs	r3, r3
 800aa64:	627b      	str	r3, [r7, #36]	; 0x24
 800aa66:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 800aa6a:	4641      	mov	r1, r8
 800aa6c:	1854      	adds	r4, r2, r1
 800aa6e:	4649      	mov	r1, r9
 800aa70:	eb43 0501 	adc.w	r5, r3, r1
 800aa74:	f04f 0200 	mov.w	r2, #0
 800aa78:	f04f 0300 	mov.w	r3, #0
 800aa7c:	00eb      	lsls	r3, r5, #3
 800aa7e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800aa82:	00e2      	lsls	r2, r4, #3
 800aa84:	4614      	mov	r4, r2
 800aa86:	461d      	mov	r5, r3
 800aa88:	4643      	mov	r3, r8
 800aa8a:	18e3      	adds	r3, r4, r3
 800aa8c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 800aa90:	464b      	mov	r3, r9
 800aa92:	eb45 0303 	adc.w	r3, r5, r3
 800aa96:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 800aa9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800aa9e:	685b      	ldr	r3, [r3, #4]
 800aaa0:	2200      	movs	r2, #0
 800aaa2:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800aaa6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 800aaaa:	f04f 0200 	mov.w	r2, #0
 800aaae:	f04f 0300 	mov.w	r3, #0
 800aab2:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800aab6:	4629      	mov	r1, r5
 800aab8:	008b      	lsls	r3, r1, #2
 800aaba:	4621      	mov	r1, r4
 800aabc:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800aac0:	4621      	mov	r1, r4
 800aac2:	008a      	lsls	r2, r1, #2
 800aac4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 800aac8:	f7f6 f8de 	bl	8000c88 <__aeabi_uldivmod>
 800aacc:	4602      	mov	r2, r0
 800aace:	460b      	mov	r3, r1
 800aad0:	4b60      	ldr	r3, [pc, #384]	; (800ac54 <UART_SetConfig+0x4e4>)
 800aad2:	fba3 2302 	umull	r2, r3, r3, r2
 800aad6:	095b      	lsrs	r3, r3, #5
 800aad8:	011c      	lsls	r4, r3, #4
 800aada:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800aade:	2200      	movs	r2, #0
 800aae0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800aae4:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 800aae8:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 800aaec:	4642      	mov	r2, r8
 800aaee:	464b      	mov	r3, r9
 800aaf0:	1891      	adds	r1, r2, r2
 800aaf2:	61b9      	str	r1, [r7, #24]
 800aaf4:	415b      	adcs	r3, r3
 800aaf6:	61fb      	str	r3, [r7, #28]
 800aaf8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800aafc:	4641      	mov	r1, r8
 800aafe:	1851      	adds	r1, r2, r1
 800ab00:	6139      	str	r1, [r7, #16]
 800ab02:	4649      	mov	r1, r9
 800ab04:	414b      	adcs	r3, r1
 800ab06:	617b      	str	r3, [r7, #20]
 800ab08:	f04f 0200 	mov.w	r2, #0
 800ab0c:	f04f 0300 	mov.w	r3, #0
 800ab10:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800ab14:	4659      	mov	r1, fp
 800ab16:	00cb      	lsls	r3, r1, #3
 800ab18:	4651      	mov	r1, sl
 800ab1a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800ab1e:	4651      	mov	r1, sl
 800ab20:	00ca      	lsls	r2, r1, #3
 800ab22:	4610      	mov	r0, r2
 800ab24:	4619      	mov	r1, r3
 800ab26:	4603      	mov	r3, r0
 800ab28:	4642      	mov	r2, r8
 800ab2a:	189b      	adds	r3, r3, r2
 800ab2c:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 800ab30:	464b      	mov	r3, r9
 800ab32:	460a      	mov	r2, r1
 800ab34:	eb42 0303 	adc.w	r3, r2, r3
 800ab38:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 800ab3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ab40:	685b      	ldr	r3, [r3, #4]
 800ab42:	2200      	movs	r2, #0
 800ab44:	67bb      	str	r3, [r7, #120]	; 0x78
 800ab46:	67fa      	str	r2, [r7, #124]	; 0x7c
 800ab48:	f04f 0200 	mov.w	r2, #0
 800ab4c:	f04f 0300 	mov.w	r3, #0
 800ab50:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800ab54:	4649      	mov	r1, r9
 800ab56:	008b      	lsls	r3, r1, #2
 800ab58:	4641      	mov	r1, r8
 800ab5a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ab5e:	4641      	mov	r1, r8
 800ab60:	008a      	lsls	r2, r1, #2
 800ab62:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800ab66:	f7f6 f88f 	bl	8000c88 <__aeabi_uldivmod>
 800ab6a:	4602      	mov	r2, r0
 800ab6c:	460b      	mov	r3, r1
 800ab6e:	4b39      	ldr	r3, [pc, #228]	; (800ac54 <UART_SetConfig+0x4e4>)
 800ab70:	fba3 1302 	umull	r1, r3, r3, r2
 800ab74:	095b      	lsrs	r3, r3, #5
 800ab76:	2164      	movs	r1, #100	; 0x64
 800ab78:	fb01 f303 	mul.w	r3, r1, r3
 800ab7c:	1ad3      	subs	r3, r2, r3
 800ab7e:	011b      	lsls	r3, r3, #4
 800ab80:	3332      	adds	r3, #50	; 0x32
 800ab82:	4a34      	ldr	r2, [pc, #208]	; (800ac54 <UART_SetConfig+0x4e4>)
 800ab84:	fba2 2303 	umull	r2, r3, r2, r3
 800ab88:	095b      	lsrs	r3, r3, #5
 800ab8a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab8e:	441c      	add	r4, r3
 800ab90:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800ab94:	2200      	movs	r2, #0
 800ab96:	673b      	str	r3, [r7, #112]	; 0x70
 800ab98:	677a      	str	r2, [r7, #116]	; 0x74
 800ab9a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 800ab9e:	4642      	mov	r2, r8
 800aba0:	464b      	mov	r3, r9
 800aba2:	1891      	adds	r1, r2, r2
 800aba4:	60b9      	str	r1, [r7, #8]
 800aba6:	415b      	adcs	r3, r3
 800aba8:	60fb      	str	r3, [r7, #12]
 800abaa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800abae:	4641      	mov	r1, r8
 800abb0:	1851      	adds	r1, r2, r1
 800abb2:	6039      	str	r1, [r7, #0]
 800abb4:	4649      	mov	r1, r9
 800abb6:	414b      	adcs	r3, r1
 800abb8:	607b      	str	r3, [r7, #4]
 800abba:	f04f 0200 	mov.w	r2, #0
 800abbe:	f04f 0300 	mov.w	r3, #0
 800abc2:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800abc6:	4659      	mov	r1, fp
 800abc8:	00cb      	lsls	r3, r1, #3
 800abca:	4651      	mov	r1, sl
 800abcc:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800abd0:	4651      	mov	r1, sl
 800abd2:	00ca      	lsls	r2, r1, #3
 800abd4:	4610      	mov	r0, r2
 800abd6:	4619      	mov	r1, r3
 800abd8:	4603      	mov	r3, r0
 800abda:	4642      	mov	r2, r8
 800abdc:	189b      	adds	r3, r3, r2
 800abde:	66bb      	str	r3, [r7, #104]	; 0x68
 800abe0:	464b      	mov	r3, r9
 800abe2:	460a      	mov	r2, r1
 800abe4:	eb42 0303 	adc.w	r3, r2, r3
 800abe8:	66fb      	str	r3, [r7, #108]	; 0x6c
 800abea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800abee:	685b      	ldr	r3, [r3, #4]
 800abf0:	2200      	movs	r2, #0
 800abf2:	663b      	str	r3, [r7, #96]	; 0x60
 800abf4:	667a      	str	r2, [r7, #100]	; 0x64
 800abf6:	f04f 0200 	mov.w	r2, #0
 800abfa:	f04f 0300 	mov.w	r3, #0
 800abfe:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800ac02:	4649      	mov	r1, r9
 800ac04:	008b      	lsls	r3, r1, #2
 800ac06:	4641      	mov	r1, r8
 800ac08:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 800ac0c:	4641      	mov	r1, r8
 800ac0e:	008a      	lsls	r2, r1, #2
 800ac10:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800ac14:	f7f6 f838 	bl	8000c88 <__aeabi_uldivmod>
 800ac18:	4602      	mov	r2, r0
 800ac1a:	460b      	mov	r3, r1
 800ac1c:	4b0d      	ldr	r3, [pc, #52]	; (800ac54 <UART_SetConfig+0x4e4>)
 800ac1e:	fba3 1302 	umull	r1, r3, r3, r2
 800ac22:	095b      	lsrs	r3, r3, #5
 800ac24:	2164      	movs	r1, #100	; 0x64
 800ac26:	fb01 f303 	mul.w	r3, r1, r3
 800ac2a:	1ad3      	subs	r3, r2, r3
 800ac2c:	011b      	lsls	r3, r3, #4
 800ac2e:	3332      	adds	r3, #50	; 0x32
 800ac30:	4a08      	ldr	r2, [pc, #32]	; (800ac54 <UART_SetConfig+0x4e4>)
 800ac32:	fba2 2303 	umull	r2, r3, r2, r3
 800ac36:	095b      	lsrs	r3, r3, #5
 800ac38:	f003 020f 	and.w	r2, r3, #15
 800ac3c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800ac40:	681b      	ldr	r3, [r3, #0]
 800ac42:	4422      	add	r2, r4
 800ac44:	609a      	str	r2, [r3, #8]
}
 800ac46:	bf00      	nop
 800ac48:	f507 7780 	add.w	r7, r7, #256	; 0x100
 800ac4c:	46bd      	mov	sp, r7
 800ac4e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800ac52:	bf00      	nop
 800ac54:	51eb851f 	.word	0x51eb851f

0800ac58 <atof>:
 800ac58:	2100      	movs	r1, #0
 800ac5a:	f001 bcfd 	b.w	800c658 <strtod>
	...

0800ac60 <__errno>:
 800ac60:	4b01      	ldr	r3, [pc, #4]	; (800ac68 <__errno+0x8>)
 800ac62:	6818      	ldr	r0, [r3, #0]
 800ac64:	4770      	bx	lr
 800ac66:	bf00      	nop
 800ac68:	20000020 	.word	0x20000020

0800ac6c <__libc_init_array>:
 800ac6c:	b570      	push	{r4, r5, r6, lr}
 800ac6e:	4d0d      	ldr	r5, [pc, #52]	; (800aca4 <__libc_init_array+0x38>)
 800ac70:	4c0d      	ldr	r4, [pc, #52]	; (800aca8 <__libc_init_array+0x3c>)
 800ac72:	1b64      	subs	r4, r4, r5
 800ac74:	10a4      	asrs	r4, r4, #2
 800ac76:	2600      	movs	r6, #0
 800ac78:	42a6      	cmp	r6, r4
 800ac7a:	d109      	bne.n	800ac90 <__libc_init_array+0x24>
 800ac7c:	4d0b      	ldr	r5, [pc, #44]	; (800acac <__libc_init_array+0x40>)
 800ac7e:	4c0c      	ldr	r4, [pc, #48]	; (800acb0 <__libc_init_array+0x44>)
 800ac80:	f004 fcfe 	bl	800f680 <_init>
 800ac84:	1b64      	subs	r4, r4, r5
 800ac86:	10a4      	asrs	r4, r4, #2
 800ac88:	2600      	movs	r6, #0
 800ac8a:	42a6      	cmp	r6, r4
 800ac8c:	d105      	bne.n	800ac9a <__libc_init_array+0x2e>
 800ac8e:	bd70      	pop	{r4, r5, r6, pc}
 800ac90:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac94:	4798      	blx	r3
 800ac96:	3601      	adds	r6, #1
 800ac98:	e7ee      	b.n	800ac78 <__libc_init_array+0xc>
 800ac9a:	f855 3b04 	ldr.w	r3, [r5], #4
 800ac9e:	4798      	blx	r3
 800aca0:	3601      	adds	r6, #1
 800aca2:	e7f2      	b.n	800ac8a <__libc_init_array+0x1e>
 800aca4:	0800fdf8 	.word	0x0800fdf8
 800aca8:	0800fdf8 	.word	0x0800fdf8
 800acac:	0800fdf8 	.word	0x0800fdf8
 800acb0:	0800fdfc 	.word	0x0800fdfc

0800acb4 <memset>:
 800acb4:	4402      	add	r2, r0
 800acb6:	4603      	mov	r3, r0
 800acb8:	4293      	cmp	r3, r2
 800acba:	d100      	bne.n	800acbe <memset+0xa>
 800acbc:	4770      	bx	lr
 800acbe:	f803 1b01 	strb.w	r1, [r3], #1
 800acc2:	e7f9      	b.n	800acb8 <memset+0x4>

0800acc4 <__cvt>:
 800acc4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800acc8:	ec55 4b10 	vmov	r4, r5, d0
 800accc:	2d00      	cmp	r5, #0
 800acce:	460e      	mov	r6, r1
 800acd0:	4619      	mov	r1, r3
 800acd2:	462b      	mov	r3, r5
 800acd4:	bfbb      	ittet	lt
 800acd6:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 800acda:	461d      	movlt	r5, r3
 800acdc:	2300      	movge	r3, #0
 800acde:	232d      	movlt	r3, #45	; 0x2d
 800ace0:	700b      	strb	r3, [r1, #0]
 800ace2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800ace4:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 800ace8:	4691      	mov	r9, r2
 800acea:	f023 0820 	bic.w	r8, r3, #32
 800acee:	bfbc      	itt	lt
 800acf0:	4622      	movlt	r2, r4
 800acf2:	4614      	movlt	r4, r2
 800acf4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800acf8:	d005      	beq.n	800ad06 <__cvt+0x42>
 800acfa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 800acfe:	d100      	bne.n	800ad02 <__cvt+0x3e>
 800ad00:	3601      	adds	r6, #1
 800ad02:	2102      	movs	r1, #2
 800ad04:	e000      	b.n	800ad08 <__cvt+0x44>
 800ad06:	2103      	movs	r1, #3
 800ad08:	ab03      	add	r3, sp, #12
 800ad0a:	9301      	str	r3, [sp, #4]
 800ad0c:	ab02      	add	r3, sp, #8
 800ad0e:	9300      	str	r3, [sp, #0]
 800ad10:	ec45 4b10 	vmov	d0, r4, r5
 800ad14:	4653      	mov	r3, sl
 800ad16:	4632      	mov	r2, r6
 800ad18:	f001 fe36 	bl	800c988 <_dtoa_r>
 800ad1c:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 800ad20:	4607      	mov	r7, r0
 800ad22:	d102      	bne.n	800ad2a <__cvt+0x66>
 800ad24:	f019 0f01 	tst.w	r9, #1
 800ad28:	d022      	beq.n	800ad70 <__cvt+0xac>
 800ad2a:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800ad2e:	eb07 0906 	add.w	r9, r7, r6
 800ad32:	d110      	bne.n	800ad56 <__cvt+0x92>
 800ad34:	783b      	ldrb	r3, [r7, #0]
 800ad36:	2b30      	cmp	r3, #48	; 0x30
 800ad38:	d10a      	bne.n	800ad50 <__cvt+0x8c>
 800ad3a:	2200      	movs	r2, #0
 800ad3c:	2300      	movs	r3, #0
 800ad3e:	4620      	mov	r0, r4
 800ad40:	4629      	mov	r1, r5
 800ad42:	f7f5 fec1 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad46:	b918      	cbnz	r0, 800ad50 <__cvt+0x8c>
 800ad48:	f1c6 0601 	rsb	r6, r6, #1
 800ad4c:	f8ca 6000 	str.w	r6, [sl]
 800ad50:	f8da 3000 	ldr.w	r3, [sl]
 800ad54:	4499      	add	r9, r3
 800ad56:	2200      	movs	r2, #0
 800ad58:	2300      	movs	r3, #0
 800ad5a:	4620      	mov	r0, r4
 800ad5c:	4629      	mov	r1, r5
 800ad5e:	f7f5 feb3 	bl	8000ac8 <__aeabi_dcmpeq>
 800ad62:	b108      	cbz	r0, 800ad68 <__cvt+0xa4>
 800ad64:	f8cd 900c 	str.w	r9, [sp, #12]
 800ad68:	2230      	movs	r2, #48	; 0x30
 800ad6a:	9b03      	ldr	r3, [sp, #12]
 800ad6c:	454b      	cmp	r3, r9
 800ad6e:	d307      	bcc.n	800ad80 <__cvt+0xbc>
 800ad70:	9b03      	ldr	r3, [sp, #12]
 800ad72:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800ad74:	1bdb      	subs	r3, r3, r7
 800ad76:	4638      	mov	r0, r7
 800ad78:	6013      	str	r3, [r2, #0]
 800ad7a:	b004      	add	sp, #16
 800ad7c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ad80:	1c59      	adds	r1, r3, #1
 800ad82:	9103      	str	r1, [sp, #12]
 800ad84:	701a      	strb	r2, [r3, #0]
 800ad86:	e7f0      	b.n	800ad6a <__cvt+0xa6>

0800ad88 <__exponent>:
 800ad88:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ad8a:	4603      	mov	r3, r0
 800ad8c:	2900      	cmp	r1, #0
 800ad8e:	bfb8      	it	lt
 800ad90:	4249      	neglt	r1, r1
 800ad92:	f803 2b02 	strb.w	r2, [r3], #2
 800ad96:	bfb4      	ite	lt
 800ad98:	222d      	movlt	r2, #45	; 0x2d
 800ad9a:	222b      	movge	r2, #43	; 0x2b
 800ad9c:	2909      	cmp	r1, #9
 800ad9e:	7042      	strb	r2, [r0, #1]
 800ada0:	dd2a      	ble.n	800adf8 <__exponent+0x70>
 800ada2:	f10d 0407 	add.w	r4, sp, #7
 800ada6:	46a4      	mov	ip, r4
 800ada8:	270a      	movs	r7, #10
 800adaa:	46a6      	mov	lr, r4
 800adac:	460a      	mov	r2, r1
 800adae:	fb91 f6f7 	sdiv	r6, r1, r7
 800adb2:	fb07 1516 	mls	r5, r7, r6, r1
 800adb6:	3530      	adds	r5, #48	; 0x30
 800adb8:	2a63      	cmp	r2, #99	; 0x63
 800adba:	f104 34ff 	add.w	r4, r4, #4294967295
 800adbe:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800adc2:	4631      	mov	r1, r6
 800adc4:	dcf1      	bgt.n	800adaa <__exponent+0x22>
 800adc6:	3130      	adds	r1, #48	; 0x30
 800adc8:	f1ae 0502 	sub.w	r5, lr, #2
 800adcc:	f804 1c01 	strb.w	r1, [r4, #-1]
 800add0:	1c44      	adds	r4, r0, #1
 800add2:	4629      	mov	r1, r5
 800add4:	4561      	cmp	r1, ip
 800add6:	d30a      	bcc.n	800adee <__exponent+0x66>
 800add8:	f10d 0209 	add.w	r2, sp, #9
 800addc:	eba2 020e 	sub.w	r2, r2, lr
 800ade0:	4565      	cmp	r5, ip
 800ade2:	bf88      	it	hi
 800ade4:	2200      	movhi	r2, #0
 800ade6:	4413      	add	r3, r2
 800ade8:	1a18      	subs	r0, r3, r0
 800adea:	b003      	add	sp, #12
 800adec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800adee:	f811 2b01 	ldrb.w	r2, [r1], #1
 800adf2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800adf6:	e7ed      	b.n	800add4 <__exponent+0x4c>
 800adf8:	2330      	movs	r3, #48	; 0x30
 800adfa:	3130      	adds	r1, #48	; 0x30
 800adfc:	7083      	strb	r3, [r0, #2]
 800adfe:	70c1      	strb	r1, [r0, #3]
 800ae00:	1d03      	adds	r3, r0, #4
 800ae02:	e7f1      	b.n	800ade8 <__exponent+0x60>

0800ae04 <_printf_float>:
 800ae04:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ae08:	ed2d 8b02 	vpush	{d8}
 800ae0c:	b08d      	sub	sp, #52	; 0x34
 800ae0e:	460c      	mov	r4, r1
 800ae10:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800ae14:	4616      	mov	r6, r2
 800ae16:	461f      	mov	r7, r3
 800ae18:	4605      	mov	r5, r0
 800ae1a:	f002 ff25 	bl	800dc68 <_localeconv_r>
 800ae1e:	f8d0 a000 	ldr.w	sl, [r0]
 800ae22:	4650      	mov	r0, sl
 800ae24:	f7f5 f9d4 	bl	80001d0 <strlen>
 800ae28:	2300      	movs	r3, #0
 800ae2a:	930a      	str	r3, [sp, #40]	; 0x28
 800ae2c:	6823      	ldr	r3, [r4, #0]
 800ae2e:	9305      	str	r3, [sp, #20]
 800ae30:	f8d8 3000 	ldr.w	r3, [r8]
 800ae34:	f894 b018 	ldrb.w	fp, [r4, #24]
 800ae38:	3307      	adds	r3, #7
 800ae3a:	f023 0307 	bic.w	r3, r3, #7
 800ae3e:	f103 0208 	add.w	r2, r3, #8
 800ae42:	f8c8 2000 	str.w	r2, [r8]
 800ae46:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ae4a:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800ae4e:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800ae52:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800ae56:	9307      	str	r3, [sp, #28]
 800ae58:	f8cd 8018 	str.w	r8, [sp, #24]
 800ae5c:	ee08 0a10 	vmov	s16, r0
 800ae60:	4b9f      	ldr	r3, [pc, #636]	; (800b0e0 <_printf_float+0x2dc>)
 800ae62:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae66:	f04f 32ff 	mov.w	r2, #4294967295
 800ae6a:	f7f5 fe5f 	bl	8000b2c <__aeabi_dcmpun>
 800ae6e:	bb88      	cbnz	r0, 800aed4 <_printf_float+0xd0>
 800ae70:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800ae74:	4b9a      	ldr	r3, [pc, #616]	; (800b0e0 <_printf_float+0x2dc>)
 800ae76:	f04f 32ff 	mov.w	r2, #4294967295
 800ae7a:	f7f5 fe39 	bl	8000af0 <__aeabi_dcmple>
 800ae7e:	bb48      	cbnz	r0, 800aed4 <_printf_float+0xd0>
 800ae80:	2200      	movs	r2, #0
 800ae82:	2300      	movs	r3, #0
 800ae84:	4640      	mov	r0, r8
 800ae86:	4649      	mov	r1, r9
 800ae88:	f7f5 fe28 	bl	8000adc <__aeabi_dcmplt>
 800ae8c:	b110      	cbz	r0, 800ae94 <_printf_float+0x90>
 800ae8e:	232d      	movs	r3, #45	; 0x2d
 800ae90:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800ae94:	4b93      	ldr	r3, [pc, #588]	; (800b0e4 <_printf_float+0x2e0>)
 800ae96:	4894      	ldr	r0, [pc, #592]	; (800b0e8 <_printf_float+0x2e4>)
 800ae98:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800ae9c:	bf94      	ite	ls
 800ae9e:	4698      	movls	r8, r3
 800aea0:	4680      	movhi	r8, r0
 800aea2:	2303      	movs	r3, #3
 800aea4:	6123      	str	r3, [r4, #16]
 800aea6:	9b05      	ldr	r3, [sp, #20]
 800aea8:	f023 0204 	bic.w	r2, r3, #4
 800aeac:	6022      	str	r2, [r4, #0]
 800aeae:	f04f 0900 	mov.w	r9, #0
 800aeb2:	9700      	str	r7, [sp, #0]
 800aeb4:	4633      	mov	r3, r6
 800aeb6:	aa0b      	add	r2, sp, #44	; 0x2c
 800aeb8:	4621      	mov	r1, r4
 800aeba:	4628      	mov	r0, r5
 800aebc:	f000 f9d8 	bl	800b270 <_printf_common>
 800aec0:	3001      	adds	r0, #1
 800aec2:	f040 8090 	bne.w	800afe6 <_printf_float+0x1e2>
 800aec6:	f04f 30ff 	mov.w	r0, #4294967295
 800aeca:	b00d      	add	sp, #52	; 0x34
 800aecc:	ecbd 8b02 	vpop	{d8}
 800aed0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aed4:	4642      	mov	r2, r8
 800aed6:	464b      	mov	r3, r9
 800aed8:	4640      	mov	r0, r8
 800aeda:	4649      	mov	r1, r9
 800aedc:	f7f5 fe26 	bl	8000b2c <__aeabi_dcmpun>
 800aee0:	b140      	cbz	r0, 800aef4 <_printf_float+0xf0>
 800aee2:	464b      	mov	r3, r9
 800aee4:	2b00      	cmp	r3, #0
 800aee6:	bfbc      	itt	lt
 800aee8:	232d      	movlt	r3, #45	; 0x2d
 800aeea:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800aeee:	487f      	ldr	r0, [pc, #508]	; (800b0ec <_printf_float+0x2e8>)
 800aef0:	4b7f      	ldr	r3, [pc, #508]	; (800b0f0 <_printf_float+0x2ec>)
 800aef2:	e7d1      	b.n	800ae98 <_printf_float+0x94>
 800aef4:	6863      	ldr	r3, [r4, #4]
 800aef6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800aefa:	9206      	str	r2, [sp, #24]
 800aefc:	1c5a      	adds	r2, r3, #1
 800aefe:	d13f      	bne.n	800af80 <_printf_float+0x17c>
 800af00:	2306      	movs	r3, #6
 800af02:	6063      	str	r3, [r4, #4]
 800af04:	9b05      	ldr	r3, [sp, #20]
 800af06:	6861      	ldr	r1, [r4, #4]
 800af08:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800af0c:	2300      	movs	r3, #0
 800af0e:	9303      	str	r3, [sp, #12]
 800af10:	ab0a      	add	r3, sp, #40	; 0x28
 800af12:	e9cd b301 	strd	fp, r3, [sp, #4]
 800af16:	ab09      	add	r3, sp, #36	; 0x24
 800af18:	ec49 8b10 	vmov	d0, r8, r9
 800af1c:	9300      	str	r3, [sp, #0]
 800af1e:	6022      	str	r2, [r4, #0]
 800af20:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800af24:	4628      	mov	r0, r5
 800af26:	f7ff fecd 	bl	800acc4 <__cvt>
 800af2a:	9b06      	ldr	r3, [sp, #24]
 800af2c:	9909      	ldr	r1, [sp, #36]	; 0x24
 800af2e:	2b47      	cmp	r3, #71	; 0x47
 800af30:	4680      	mov	r8, r0
 800af32:	d108      	bne.n	800af46 <_printf_float+0x142>
 800af34:	1cc8      	adds	r0, r1, #3
 800af36:	db02      	blt.n	800af3e <_printf_float+0x13a>
 800af38:	6863      	ldr	r3, [r4, #4]
 800af3a:	4299      	cmp	r1, r3
 800af3c:	dd41      	ble.n	800afc2 <_printf_float+0x1be>
 800af3e:	f1ab 0b02 	sub.w	fp, fp, #2
 800af42:	fa5f fb8b 	uxtb.w	fp, fp
 800af46:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800af4a:	d820      	bhi.n	800af8e <_printf_float+0x18a>
 800af4c:	3901      	subs	r1, #1
 800af4e:	465a      	mov	r2, fp
 800af50:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800af54:	9109      	str	r1, [sp, #36]	; 0x24
 800af56:	f7ff ff17 	bl	800ad88 <__exponent>
 800af5a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800af5c:	1813      	adds	r3, r2, r0
 800af5e:	2a01      	cmp	r2, #1
 800af60:	4681      	mov	r9, r0
 800af62:	6123      	str	r3, [r4, #16]
 800af64:	dc02      	bgt.n	800af6c <_printf_float+0x168>
 800af66:	6822      	ldr	r2, [r4, #0]
 800af68:	07d2      	lsls	r2, r2, #31
 800af6a:	d501      	bpl.n	800af70 <_printf_float+0x16c>
 800af6c:	3301      	adds	r3, #1
 800af6e:	6123      	str	r3, [r4, #16]
 800af70:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800af74:	2b00      	cmp	r3, #0
 800af76:	d09c      	beq.n	800aeb2 <_printf_float+0xae>
 800af78:	232d      	movs	r3, #45	; 0x2d
 800af7a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800af7e:	e798      	b.n	800aeb2 <_printf_float+0xae>
 800af80:	9a06      	ldr	r2, [sp, #24]
 800af82:	2a47      	cmp	r2, #71	; 0x47
 800af84:	d1be      	bne.n	800af04 <_printf_float+0x100>
 800af86:	2b00      	cmp	r3, #0
 800af88:	d1bc      	bne.n	800af04 <_printf_float+0x100>
 800af8a:	2301      	movs	r3, #1
 800af8c:	e7b9      	b.n	800af02 <_printf_float+0xfe>
 800af8e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800af92:	d118      	bne.n	800afc6 <_printf_float+0x1c2>
 800af94:	2900      	cmp	r1, #0
 800af96:	6863      	ldr	r3, [r4, #4]
 800af98:	dd0b      	ble.n	800afb2 <_printf_float+0x1ae>
 800af9a:	6121      	str	r1, [r4, #16]
 800af9c:	b913      	cbnz	r3, 800afa4 <_printf_float+0x1a0>
 800af9e:	6822      	ldr	r2, [r4, #0]
 800afa0:	07d0      	lsls	r0, r2, #31
 800afa2:	d502      	bpl.n	800afaa <_printf_float+0x1a6>
 800afa4:	3301      	adds	r3, #1
 800afa6:	440b      	add	r3, r1
 800afa8:	6123      	str	r3, [r4, #16]
 800afaa:	65a1      	str	r1, [r4, #88]	; 0x58
 800afac:	f04f 0900 	mov.w	r9, #0
 800afb0:	e7de      	b.n	800af70 <_printf_float+0x16c>
 800afb2:	b913      	cbnz	r3, 800afba <_printf_float+0x1b6>
 800afb4:	6822      	ldr	r2, [r4, #0]
 800afb6:	07d2      	lsls	r2, r2, #31
 800afb8:	d501      	bpl.n	800afbe <_printf_float+0x1ba>
 800afba:	3302      	adds	r3, #2
 800afbc:	e7f4      	b.n	800afa8 <_printf_float+0x1a4>
 800afbe:	2301      	movs	r3, #1
 800afc0:	e7f2      	b.n	800afa8 <_printf_float+0x1a4>
 800afc2:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800afc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800afc8:	4299      	cmp	r1, r3
 800afca:	db05      	blt.n	800afd8 <_printf_float+0x1d4>
 800afcc:	6823      	ldr	r3, [r4, #0]
 800afce:	6121      	str	r1, [r4, #16]
 800afd0:	07d8      	lsls	r0, r3, #31
 800afd2:	d5ea      	bpl.n	800afaa <_printf_float+0x1a6>
 800afd4:	1c4b      	adds	r3, r1, #1
 800afd6:	e7e7      	b.n	800afa8 <_printf_float+0x1a4>
 800afd8:	2900      	cmp	r1, #0
 800afda:	bfd4      	ite	le
 800afdc:	f1c1 0202 	rsble	r2, r1, #2
 800afe0:	2201      	movgt	r2, #1
 800afe2:	4413      	add	r3, r2
 800afe4:	e7e0      	b.n	800afa8 <_printf_float+0x1a4>
 800afe6:	6823      	ldr	r3, [r4, #0]
 800afe8:	055a      	lsls	r2, r3, #21
 800afea:	d407      	bmi.n	800affc <_printf_float+0x1f8>
 800afec:	6923      	ldr	r3, [r4, #16]
 800afee:	4642      	mov	r2, r8
 800aff0:	4631      	mov	r1, r6
 800aff2:	4628      	mov	r0, r5
 800aff4:	47b8      	blx	r7
 800aff6:	3001      	adds	r0, #1
 800aff8:	d12c      	bne.n	800b054 <_printf_float+0x250>
 800affa:	e764      	b.n	800aec6 <_printf_float+0xc2>
 800affc:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800b000:	f240 80e0 	bls.w	800b1c4 <_printf_float+0x3c0>
 800b004:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b008:	2200      	movs	r2, #0
 800b00a:	2300      	movs	r3, #0
 800b00c:	f7f5 fd5c 	bl	8000ac8 <__aeabi_dcmpeq>
 800b010:	2800      	cmp	r0, #0
 800b012:	d034      	beq.n	800b07e <_printf_float+0x27a>
 800b014:	4a37      	ldr	r2, [pc, #220]	; (800b0f4 <_printf_float+0x2f0>)
 800b016:	2301      	movs	r3, #1
 800b018:	4631      	mov	r1, r6
 800b01a:	4628      	mov	r0, r5
 800b01c:	47b8      	blx	r7
 800b01e:	3001      	adds	r0, #1
 800b020:	f43f af51 	beq.w	800aec6 <_printf_float+0xc2>
 800b024:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b028:	429a      	cmp	r2, r3
 800b02a:	db02      	blt.n	800b032 <_printf_float+0x22e>
 800b02c:	6823      	ldr	r3, [r4, #0]
 800b02e:	07d8      	lsls	r0, r3, #31
 800b030:	d510      	bpl.n	800b054 <_printf_float+0x250>
 800b032:	ee18 3a10 	vmov	r3, s16
 800b036:	4652      	mov	r2, sl
 800b038:	4631      	mov	r1, r6
 800b03a:	4628      	mov	r0, r5
 800b03c:	47b8      	blx	r7
 800b03e:	3001      	adds	r0, #1
 800b040:	f43f af41 	beq.w	800aec6 <_printf_float+0xc2>
 800b044:	f04f 0800 	mov.w	r8, #0
 800b048:	f104 091a 	add.w	r9, r4, #26
 800b04c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b04e:	3b01      	subs	r3, #1
 800b050:	4543      	cmp	r3, r8
 800b052:	dc09      	bgt.n	800b068 <_printf_float+0x264>
 800b054:	6823      	ldr	r3, [r4, #0]
 800b056:	079b      	lsls	r3, r3, #30
 800b058:	f100 8105 	bmi.w	800b266 <_printf_float+0x462>
 800b05c:	68e0      	ldr	r0, [r4, #12]
 800b05e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b060:	4298      	cmp	r0, r3
 800b062:	bfb8      	it	lt
 800b064:	4618      	movlt	r0, r3
 800b066:	e730      	b.n	800aeca <_printf_float+0xc6>
 800b068:	2301      	movs	r3, #1
 800b06a:	464a      	mov	r2, r9
 800b06c:	4631      	mov	r1, r6
 800b06e:	4628      	mov	r0, r5
 800b070:	47b8      	blx	r7
 800b072:	3001      	adds	r0, #1
 800b074:	f43f af27 	beq.w	800aec6 <_printf_float+0xc2>
 800b078:	f108 0801 	add.w	r8, r8, #1
 800b07c:	e7e6      	b.n	800b04c <_printf_float+0x248>
 800b07e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b080:	2b00      	cmp	r3, #0
 800b082:	dc39      	bgt.n	800b0f8 <_printf_float+0x2f4>
 800b084:	4a1b      	ldr	r2, [pc, #108]	; (800b0f4 <_printf_float+0x2f0>)
 800b086:	2301      	movs	r3, #1
 800b088:	4631      	mov	r1, r6
 800b08a:	4628      	mov	r0, r5
 800b08c:	47b8      	blx	r7
 800b08e:	3001      	adds	r0, #1
 800b090:	f43f af19 	beq.w	800aec6 <_printf_float+0xc2>
 800b094:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b098:	4313      	orrs	r3, r2
 800b09a:	d102      	bne.n	800b0a2 <_printf_float+0x29e>
 800b09c:	6823      	ldr	r3, [r4, #0]
 800b09e:	07d9      	lsls	r1, r3, #31
 800b0a0:	d5d8      	bpl.n	800b054 <_printf_float+0x250>
 800b0a2:	ee18 3a10 	vmov	r3, s16
 800b0a6:	4652      	mov	r2, sl
 800b0a8:	4631      	mov	r1, r6
 800b0aa:	4628      	mov	r0, r5
 800b0ac:	47b8      	blx	r7
 800b0ae:	3001      	adds	r0, #1
 800b0b0:	f43f af09 	beq.w	800aec6 <_printf_float+0xc2>
 800b0b4:	f04f 0900 	mov.w	r9, #0
 800b0b8:	f104 0a1a 	add.w	sl, r4, #26
 800b0bc:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b0be:	425b      	negs	r3, r3
 800b0c0:	454b      	cmp	r3, r9
 800b0c2:	dc01      	bgt.n	800b0c8 <_printf_float+0x2c4>
 800b0c4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b0c6:	e792      	b.n	800afee <_printf_float+0x1ea>
 800b0c8:	2301      	movs	r3, #1
 800b0ca:	4652      	mov	r2, sl
 800b0cc:	4631      	mov	r1, r6
 800b0ce:	4628      	mov	r0, r5
 800b0d0:	47b8      	blx	r7
 800b0d2:	3001      	adds	r0, #1
 800b0d4:	f43f aef7 	beq.w	800aec6 <_printf_float+0xc2>
 800b0d8:	f109 0901 	add.w	r9, r9, #1
 800b0dc:	e7ee      	b.n	800b0bc <_printf_float+0x2b8>
 800b0de:	bf00      	nop
 800b0e0:	7fefffff 	.word	0x7fefffff
 800b0e4:	0800f8f4 	.word	0x0800f8f4
 800b0e8:	0800f8f8 	.word	0x0800f8f8
 800b0ec:	0800f900 	.word	0x0800f900
 800b0f0:	0800f8fc 	.word	0x0800f8fc
 800b0f4:	0800f904 	.word	0x0800f904
 800b0f8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b0fa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b0fc:	429a      	cmp	r2, r3
 800b0fe:	bfa8      	it	ge
 800b100:	461a      	movge	r2, r3
 800b102:	2a00      	cmp	r2, #0
 800b104:	4691      	mov	r9, r2
 800b106:	dc37      	bgt.n	800b178 <_printf_float+0x374>
 800b108:	f04f 0b00 	mov.w	fp, #0
 800b10c:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b110:	f104 021a 	add.w	r2, r4, #26
 800b114:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800b116:	9305      	str	r3, [sp, #20]
 800b118:	eba3 0309 	sub.w	r3, r3, r9
 800b11c:	455b      	cmp	r3, fp
 800b11e:	dc33      	bgt.n	800b188 <_printf_float+0x384>
 800b120:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b124:	429a      	cmp	r2, r3
 800b126:	db3b      	blt.n	800b1a0 <_printf_float+0x39c>
 800b128:	6823      	ldr	r3, [r4, #0]
 800b12a:	07da      	lsls	r2, r3, #31
 800b12c:	d438      	bmi.n	800b1a0 <_printf_float+0x39c>
 800b12e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b130:	9a05      	ldr	r2, [sp, #20]
 800b132:	9909      	ldr	r1, [sp, #36]	; 0x24
 800b134:	1a9a      	subs	r2, r3, r2
 800b136:	eba3 0901 	sub.w	r9, r3, r1
 800b13a:	4591      	cmp	r9, r2
 800b13c:	bfa8      	it	ge
 800b13e:	4691      	movge	r9, r2
 800b140:	f1b9 0f00 	cmp.w	r9, #0
 800b144:	dc35      	bgt.n	800b1b2 <_printf_float+0x3ae>
 800b146:	f04f 0800 	mov.w	r8, #0
 800b14a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800b14e:	f104 0a1a 	add.w	sl, r4, #26
 800b152:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800b156:	1a9b      	subs	r3, r3, r2
 800b158:	eba3 0309 	sub.w	r3, r3, r9
 800b15c:	4543      	cmp	r3, r8
 800b15e:	f77f af79 	ble.w	800b054 <_printf_float+0x250>
 800b162:	2301      	movs	r3, #1
 800b164:	4652      	mov	r2, sl
 800b166:	4631      	mov	r1, r6
 800b168:	4628      	mov	r0, r5
 800b16a:	47b8      	blx	r7
 800b16c:	3001      	adds	r0, #1
 800b16e:	f43f aeaa 	beq.w	800aec6 <_printf_float+0xc2>
 800b172:	f108 0801 	add.w	r8, r8, #1
 800b176:	e7ec      	b.n	800b152 <_printf_float+0x34e>
 800b178:	4613      	mov	r3, r2
 800b17a:	4631      	mov	r1, r6
 800b17c:	4642      	mov	r2, r8
 800b17e:	4628      	mov	r0, r5
 800b180:	47b8      	blx	r7
 800b182:	3001      	adds	r0, #1
 800b184:	d1c0      	bne.n	800b108 <_printf_float+0x304>
 800b186:	e69e      	b.n	800aec6 <_printf_float+0xc2>
 800b188:	2301      	movs	r3, #1
 800b18a:	4631      	mov	r1, r6
 800b18c:	4628      	mov	r0, r5
 800b18e:	9205      	str	r2, [sp, #20]
 800b190:	47b8      	blx	r7
 800b192:	3001      	adds	r0, #1
 800b194:	f43f ae97 	beq.w	800aec6 <_printf_float+0xc2>
 800b198:	9a05      	ldr	r2, [sp, #20]
 800b19a:	f10b 0b01 	add.w	fp, fp, #1
 800b19e:	e7b9      	b.n	800b114 <_printf_float+0x310>
 800b1a0:	ee18 3a10 	vmov	r3, s16
 800b1a4:	4652      	mov	r2, sl
 800b1a6:	4631      	mov	r1, r6
 800b1a8:	4628      	mov	r0, r5
 800b1aa:	47b8      	blx	r7
 800b1ac:	3001      	adds	r0, #1
 800b1ae:	d1be      	bne.n	800b12e <_printf_float+0x32a>
 800b1b0:	e689      	b.n	800aec6 <_printf_float+0xc2>
 800b1b2:	9a05      	ldr	r2, [sp, #20]
 800b1b4:	464b      	mov	r3, r9
 800b1b6:	4442      	add	r2, r8
 800b1b8:	4631      	mov	r1, r6
 800b1ba:	4628      	mov	r0, r5
 800b1bc:	47b8      	blx	r7
 800b1be:	3001      	adds	r0, #1
 800b1c0:	d1c1      	bne.n	800b146 <_printf_float+0x342>
 800b1c2:	e680      	b.n	800aec6 <_printf_float+0xc2>
 800b1c4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800b1c6:	2a01      	cmp	r2, #1
 800b1c8:	dc01      	bgt.n	800b1ce <_printf_float+0x3ca>
 800b1ca:	07db      	lsls	r3, r3, #31
 800b1cc:	d538      	bpl.n	800b240 <_printf_float+0x43c>
 800b1ce:	2301      	movs	r3, #1
 800b1d0:	4642      	mov	r2, r8
 800b1d2:	4631      	mov	r1, r6
 800b1d4:	4628      	mov	r0, r5
 800b1d6:	47b8      	blx	r7
 800b1d8:	3001      	adds	r0, #1
 800b1da:	f43f ae74 	beq.w	800aec6 <_printf_float+0xc2>
 800b1de:	ee18 3a10 	vmov	r3, s16
 800b1e2:	4652      	mov	r2, sl
 800b1e4:	4631      	mov	r1, r6
 800b1e6:	4628      	mov	r0, r5
 800b1e8:	47b8      	blx	r7
 800b1ea:	3001      	adds	r0, #1
 800b1ec:	f43f ae6b 	beq.w	800aec6 <_printf_float+0xc2>
 800b1f0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800b1f4:	2200      	movs	r2, #0
 800b1f6:	2300      	movs	r3, #0
 800b1f8:	f7f5 fc66 	bl	8000ac8 <__aeabi_dcmpeq>
 800b1fc:	b9d8      	cbnz	r0, 800b236 <_printf_float+0x432>
 800b1fe:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b200:	f108 0201 	add.w	r2, r8, #1
 800b204:	3b01      	subs	r3, #1
 800b206:	4631      	mov	r1, r6
 800b208:	4628      	mov	r0, r5
 800b20a:	47b8      	blx	r7
 800b20c:	3001      	adds	r0, #1
 800b20e:	d10e      	bne.n	800b22e <_printf_float+0x42a>
 800b210:	e659      	b.n	800aec6 <_printf_float+0xc2>
 800b212:	2301      	movs	r3, #1
 800b214:	4652      	mov	r2, sl
 800b216:	4631      	mov	r1, r6
 800b218:	4628      	mov	r0, r5
 800b21a:	47b8      	blx	r7
 800b21c:	3001      	adds	r0, #1
 800b21e:	f43f ae52 	beq.w	800aec6 <_printf_float+0xc2>
 800b222:	f108 0801 	add.w	r8, r8, #1
 800b226:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b228:	3b01      	subs	r3, #1
 800b22a:	4543      	cmp	r3, r8
 800b22c:	dcf1      	bgt.n	800b212 <_printf_float+0x40e>
 800b22e:	464b      	mov	r3, r9
 800b230:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800b234:	e6dc      	b.n	800aff0 <_printf_float+0x1ec>
 800b236:	f04f 0800 	mov.w	r8, #0
 800b23a:	f104 0a1a 	add.w	sl, r4, #26
 800b23e:	e7f2      	b.n	800b226 <_printf_float+0x422>
 800b240:	2301      	movs	r3, #1
 800b242:	4642      	mov	r2, r8
 800b244:	e7df      	b.n	800b206 <_printf_float+0x402>
 800b246:	2301      	movs	r3, #1
 800b248:	464a      	mov	r2, r9
 800b24a:	4631      	mov	r1, r6
 800b24c:	4628      	mov	r0, r5
 800b24e:	47b8      	blx	r7
 800b250:	3001      	adds	r0, #1
 800b252:	f43f ae38 	beq.w	800aec6 <_printf_float+0xc2>
 800b256:	f108 0801 	add.w	r8, r8, #1
 800b25a:	68e3      	ldr	r3, [r4, #12]
 800b25c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800b25e:	1a5b      	subs	r3, r3, r1
 800b260:	4543      	cmp	r3, r8
 800b262:	dcf0      	bgt.n	800b246 <_printf_float+0x442>
 800b264:	e6fa      	b.n	800b05c <_printf_float+0x258>
 800b266:	f04f 0800 	mov.w	r8, #0
 800b26a:	f104 0919 	add.w	r9, r4, #25
 800b26e:	e7f4      	b.n	800b25a <_printf_float+0x456>

0800b270 <_printf_common>:
 800b270:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b274:	4616      	mov	r6, r2
 800b276:	4699      	mov	r9, r3
 800b278:	688a      	ldr	r2, [r1, #8]
 800b27a:	690b      	ldr	r3, [r1, #16]
 800b27c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800b280:	4293      	cmp	r3, r2
 800b282:	bfb8      	it	lt
 800b284:	4613      	movlt	r3, r2
 800b286:	6033      	str	r3, [r6, #0]
 800b288:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800b28c:	4607      	mov	r7, r0
 800b28e:	460c      	mov	r4, r1
 800b290:	b10a      	cbz	r2, 800b296 <_printf_common+0x26>
 800b292:	3301      	adds	r3, #1
 800b294:	6033      	str	r3, [r6, #0]
 800b296:	6823      	ldr	r3, [r4, #0]
 800b298:	0699      	lsls	r1, r3, #26
 800b29a:	bf42      	ittt	mi
 800b29c:	6833      	ldrmi	r3, [r6, #0]
 800b29e:	3302      	addmi	r3, #2
 800b2a0:	6033      	strmi	r3, [r6, #0]
 800b2a2:	6825      	ldr	r5, [r4, #0]
 800b2a4:	f015 0506 	ands.w	r5, r5, #6
 800b2a8:	d106      	bne.n	800b2b8 <_printf_common+0x48>
 800b2aa:	f104 0a19 	add.w	sl, r4, #25
 800b2ae:	68e3      	ldr	r3, [r4, #12]
 800b2b0:	6832      	ldr	r2, [r6, #0]
 800b2b2:	1a9b      	subs	r3, r3, r2
 800b2b4:	42ab      	cmp	r3, r5
 800b2b6:	dc26      	bgt.n	800b306 <_printf_common+0x96>
 800b2b8:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800b2bc:	1e13      	subs	r3, r2, #0
 800b2be:	6822      	ldr	r2, [r4, #0]
 800b2c0:	bf18      	it	ne
 800b2c2:	2301      	movne	r3, #1
 800b2c4:	0692      	lsls	r2, r2, #26
 800b2c6:	d42b      	bmi.n	800b320 <_printf_common+0xb0>
 800b2c8:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800b2cc:	4649      	mov	r1, r9
 800b2ce:	4638      	mov	r0, r7
 800b2d0:	47c0      	blx	r8
 800b2d2:	3001      	adds	r0, #1
 800b2d4:	d01e      	beq.n	800b314 <_printf_common+0xa4>
 800b2d6:	6823      	ldr	r3, [r4, #0]
 800b2d8:	68e5      	ldr	r5, [r4, #12]
 800b2da:	6832      	ldr	r2, [r6, #0]
 800b2dc:	f003 0306 	and.w	r3, r3, #6
 800b2e0:	2b04      	cmp	r3, #4
 800b2e2:	bf08      	it	eq
 800b2e4:	1aad      	subeq	r5, r5, r2
 800b2e6:	68a3      	ldr	r3, [r4, #8]
 800b2e8:	6922      	ldr	r2, [r4, #16]
 800b2ea:	bf0c      	ite	eq
 800b2ec:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800b2f0:	2500      	movne	r5, #0
 800b2f2:	4293      	cmp	r3, r2
 800b2f4:	bfc4      	itt	gt
 800b2f6:	1a9b      	subgt	r3, r3, r2
 800b2f8:	18ed      	addgt	r5, r5, r3
 800b2fa:	2600      	movs	r6, #0
 800b2fc:	341a      	adds	r4, #26
 800b2fe:	42b5      	cmp	r5, r6
 800b300:	d11a      	bne.n	800b338 <_printf_common+0xc8>
 800b302:	2000      	movs	r0, #0
 800b304:	e008      	b.n	800b318 <_printf_common+0xa8>
 800b306:	2301      	movs	r3, #1
 800b308:	4652      	mov	r2, sl
 800b30a:	4649      	mov	r1, r9
 800b30c:	4638      	mov	r0, r7
 800b30e:	47c0      	blx	r8
 800b310:	3001      	adds	r0, #1
 800b312:	d103      	bne.n	800b31c <_printf_common+0xac>
 800b314:	f04f 30ff 	mov.w	r0, #4294967295
 800b318:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b31c:	3501      	adds	r5, #1
 800b31e:	e7c6      	b.n	800b2ae <_printf_common+0x3e>
 800b320:	18e1      	adds	r1, r4, r3
 800b322:	1c5a      	adds	r2, r3, #1
 800b324:	2030      	movs	r0, #48	; 0x30
 800b326:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800b32a:	4422      	add	r2, r4
 800b32c:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800b330:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800b334:	3302      	adds	r3, #2
 800b336:	e7c7      	b.n	800b2c8 <_printf_common+0x58>
 800b338:	2301      	movs	r3, #1
 800b33a:	4622      	mov	r2, r4
 800b33c:	4649      	mov	r1, r9
 800b33e:	4638      	mov	r0, r7
 800b340:	47c0      	blx	r8
 800b342:	3001      	adds	r0, #1
 800b344:	d0e6      	beq.n	800b314 <_printf_common+0xa4>
 800b346:	3601      	adds	r6, #1
 800b348:	e7d9      	b.n	800b2fe <_printf_common+0x8e>
	...

0800b34c <_printf_i>:
 800b34c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800b350:	7e0f      	ldrb	r7, [r1, #24]
 800b352:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800b354:	2f78      	cmp	r7, #120	; 0x78
 800b356:	4691      	mov	r9, r2
 800b358:	4680      	mov	r8, r0
 800b35a:	460c      	mov	r4, r1
 800b35c:	469a      	mov	sl, r3
 800b35e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800b362:	d807      	bhi.n	800b374 <_printf_i+0x28>
 800b364:	2f62      	cmp	r7, #98	; 0x62
 800b366:	d80a      	bhi.n	800b37e <_printf_i+0x32>
 800b368:	2f00      	cmp	r7, #0
 800b36a:	f000 80d8 	beq.w	800b51e <_printf_i+0x1d2>
 800b36e:	2f58      	cmp	r7, #88	; 0x58
 800b370:	f000 80a3 	beq.w	800b4ba <_printf_i+0x16e>
 800b374:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b378:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800b37c:	e03a      	b.n	800b3f4 <_printf_i+0xa8>
 800b37e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800b382:	2b15      	cmp	r3, #21
 800b384:	d8f6      	bhi.n	800b374 <_printf_i+0x28>
 800b386:	a101      	add	r1, pc, #4	; (adr r1, 800b38c <_printf_i+0x40>)
 800b388:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800b38c:	0800b3e5 	.word	0x0800b3e5
 800b390:	0800b3f9 	.word	0x0800b3f9
 800b394:	0800b375 	.word	0x0800b375
 800b398:	0800b375 	.word	0x0800b375
 800b39c:	0800b375 	.word	0x0800b375
 800b3a0:	0800b375 	.word	0x0800b375
 800b3a4:	0800b3f9 	.word	0x0800b3f9
 800b3a8:	0800b375 	.word	0x0800b375
 800b3ac:	0800b375 	.word	0x0800b375
 800b3b0:	0800b375 	.word	0x0800b375
 800b3b4:	0800b375 	.word	0x0800b375
 800b3b8:	0800b505 	.word	0x0800b505
 800b3bc:	0800b429 	.word	0x0800b429
 800b3c0:	0800b4e7 	.word	0x0800b4e7
 800b3c4:	0800b375 	.word	0x0800b375
 800b3c8:	0800b375 	.word	0x0800b375
 800b3cc:	0800b527 	.word	0x0800b527
 800b3d0:	0800b375 	.word	0x0800b375
 800b3d4:	0800b429 	.word	0x0800b429
 800b3d8:	0800b375 	.word	0x0800b375
 800b3dc:	0800b375 	.word	0x0800b375
 800b3e0:	0800b4ef 	.word	0x0800b4ef
 800b3e4:	682b      	ldr	r3, [r5, #0]
 800b3e6:	1d1a      	adds	r2, r3, #4
 800b3e8:	681b      	ldr	r3, [r3, #0]
 800b3ea:	602a      	str	r2, [r5, #0]
 800b3ec:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800b3f0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800b3f4:	2301      	movs	r3, #1
 800b3f6:	e0a3      	b.n	800b540 <_printf_i+0x1f4>
 800b3f8:	6820      	ldr	r0, [r4, #0]
 800b3fa:	6829      	ldr	r1, [r5, #0]
 800b3fc:	0606      	lsls	r6, r0, #24
 800b3fe:	f101 0304 	add.w	r3, r1, #4
 800b402:	d50a      	bpl.n	800b41a <_printf_i+0xce>
 800b404:	680e      	ldr	r6, [r1, #0]
 800b406:	602b      	str	r3, [r5, #0]
 800b408:	2e00      	cmp	r6, #0
 800b40a:	da03      	bge.n	800b414 <_printf_i+0xc8>
 800b40c:	232d      	movs	r3, #45	; 0x2d
 800b40e:	4276      	negs	r6, r6
 800b410:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b414:	485e      	ldr	r0, [pc, #376]	; (800b590 <_printf_i+0x244>)
 800b416:	230a      	movs	r3, #10
 800b418:	e019      	b.n	800b44e <_printf_i+0x102>
 800b41a:	680e      	ldr	r6, [r1, #0]
 800b41c:	602b      	str	r3, [r5, #0]
 800b41e:	f010 0f40 	tst.w	r0, #64	; 0x40
 800b422:	bf18      	it	ne
 800b424:	b236      	sxthne	r6, r6
 800b426:	e7ef      	b.n	800b408 <_printf_i+0xbc>
 800b428:	682b      	ldr	r3, [r5, #0]
 800b42a:	6820      	ldr	r0, [r4, #0]
 800b42c:	1d19      	adds	r1, r3, #4
 800b42e:	6029      	str	r1, [r5, #0]
 800b430:	0601      	lsls	r1, r0, #24
 800b432:	d501      	bpl.n	800b438 <_printf_i+0xec>
 800b434:	681e      	ldr	r6, [r3, #0]
 800b436:	e002      	b.n	800b43e <_printf_i+0xf2>
 800b438:	0646      	lsls	r6, r0, #25
 800b43a:	d5fb      	bpl.n	800b434 <_printf_i+0xe8>
 800b43c:	881e      	ldrh	r6, [r3, #0]
 800b43e:	4854      	ldr	r0, [pc, #336]	; (800b590 <_printf_i+0x244>)
 800b440:	2f6f      	cmp	r7, #111	; 0x6f
 800b442:	bf0c      	ite	eq
 800b444:	2308      	moveq	r3, #8
 800b446:	230a      	movne	r3, #10
 800b448:	2100      	movs	r1, #0
 800b44a:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800b44e:	6865      	ldr	r5, [r4, #4]
 800b450:	60a5      	str	r5, [r4, #8]
 800b452:	2d00      	cmp	r5, #0
 800b454:	bfa2      	ittt	ge
 800b456:	6821      	ldrge	r1, [r4, #0]
 800b458:	f021 0104 	bicge.w	r1, r1, #4
 800b45c:	6021      	strge	r1, [r4, #0]
 800b45e:	b90e      	cbnz	r6, 800b464 <_printf_i+0x118>
 800b460:	2d00      	cmp	r5, #0
 800b462:	d04d      	beq.n	800b500 <_printf_i+0x1b4>
 800b464:	4615      	mov	r5, r2
 800b466:	fbb6 f1f3 	udiv	r1, r6, r3
 800b46a:	fb03 6711 	mls	r7, r3, r1, r6
 800b46e:	5dc7      	ldrb	r7, [r0, r7]
 800b470:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800b474:	4637      	mov	r7, r6
 800b476:	42bb      	cmp	r3, r7
 800b478:	460e      	mov	r6, r1
 800b47a:	d9f4      	bls.n	800b466 <_printf_i+0x11a>
 800b47c:	2b08      	cmp	r3, #8
 800b47e:	d10b      	bne.n	800b498 <_printf_i+0x14c>
 800b480:	6823      	ldr	r3, [r4, #0]
 800b482:	07de      	lsls	r6, r3, #31
 800b484:	d508      	bpl.n	800b498 <_printf_i+0x14c>
 800b486:	6923      	ldr	r3, [r4, #16]
 800b488:	6861      	ldr	r1, [r4, #4]
 800b48a:	4299      	cmp	r1, r3
 800b48c:	bfde      	ittt	le
 800b48e:	2330      	movle	r3, #48	; 0x30
 800b490:	f805 3c01 	strble.w	r3, [r5, #-1]
 800b494:	f105 35ff 	addle.w	r5, r5, #4294967295
 800b498:	1b52      	subs	r2, r2, r5
 800b49a:	6122      	str	r2, [r4, #16]
 800b49c:	f8cd a000 	str.w	sl, [sp]
 800b4a0:	464b      	mov	r3, r9
 800b4a2:	aa03      	add	r2, sp, #12
 800b4a4:	4621      	mov	r1, r4
 800b4a6:	4640      	mov	r0, r8
 800b4a8:	f7ff fee2 	bl	800b270 <_printf_common>
 800b4ac:	3001      	adds	r0, #1
 800b4ae:	d14c      	bne.n	800b54a <_printf_i+0x1fe>
 800b4b0:	f04f 30ff 	mov.w	r0, #4294967295
 800b4b4:	b004      	add	sp, #16
 800b4b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b4ba:	4835      	ldr	r0, [pc, #212]	; (800b590 <_printf_i+0x244>)
 800b4bc:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800b4c0:	6829      	ldr	r1, [r5, #0]
 800b4c2:	6823      	ldr	r3, [r4, #0]
 800b4c4:	f851 6b04 	ldr.w	r6, [r1], #4
 800b4c8:	6029      	str	r1, [r5, #0]
 800b4ca:	061d      	lsls	r5, r3, #24
 800b4cc:	d514      	bpl.n	800b4f8 <_printf_i+0x1ac>
 800b4ce:	07df      	lsls	r7, r3, #31
 800b4d0:	bf44      	itt	mi
 800b4d2:	f043 0320 	orrmi.w	r3, r3, #32
 800b4d6:	6023      	strmi	r3, [r4, #0]
 800b4d8:	b91e      	cbnz	r6, 800b4e2 <_printf_i+0x196>
 800b4da:	6823      	ldr	r3, [r4, #0]
 800b4dc:	f023 0320 	bic.w	r3, r3, #32
 800b4e0:	6023      	str	r3, [r4, #0]
 800b4e2:	2310      	movs	r3, #16
 800b4e4:	e7b0      	b.n	800b448 <_printf_i+0xfc>
 800b4e6:	6823      	ldr	r3, [r4, #0]
 800b4e8:	f043 0320 	orr.w	r3, r3, #32
 800b4ec:	6023      	str	r3, [r4, #0]
 800b4ee:	2378      	movs	r3, #120	; 0x78
 800b4f0:	4828      	ldr	r0, [pc, #160]	; (800b594 <_printf_i+0x248>)
 800b4f2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800b4f6:	e7e3      	b.n	800b4c0 <_printf_i+0x174>
 800b4f8:	0659      	lsls	r1, r3, #25
 800b4fa:	bf48      	it	mi
 800b4fc:	b2b6      	uxthmi	r6, r6
 800b4fe:	e7e6      	b.n	800b4ce <_printf_i+0x182>
 800b500:	4615      	mov	r5, r2
 800b502:	e7bb      	b.n	800b47c <_printf_i+0x130>
 800b504:	682b      	ldr	r3, [r5, #0]
 800b506:	6826      	ldr	r6, [r4, #0]
 800b508:	6961      	ldr	r1, [r4, #20]
 800b50a:	1d18      	adds	r0, r3, #4
 800b50c:	6028      	str	r0, [r5, #0]
 800b50e:	0635      	lsls	r5, r6, #24
 800b510:	681b      	ldr	r3, [r3, #0]
 800b512:	d501      	bpl.n	800b518 <_printf_i+0x1cc>
 800b514:	6019      	str	r1, [r3, #0]
 800b516:	e002      	b.n	800b51e <_printf_i+0x1d2>
 800b518:	0670      	lsls	r0, r6, #25
 800b51a:	d5fb      	bpl.n	800b514 <_printf_i+0x1c8>
 800b51c:	8019      	strh	r1, [r3, #0]
 800b51e:	2300      	movs	r3, #0
 800b520:	6123      	str	r3, [r4, #16]
 800b522:	4615      	mov	r5, r2
 800b524:	e7ba      	b.n	800b49c <_printf_i+0x150>
 800b526:	682b      	ldr	r3, [r5, #0]
 800b528:	1d1a      	adds	r2, r3, #4
 800b52a:	602a      	str	r2, [r5, #0]
 800b52c:	681d      	ldr	r5, [r3, #0]
 800b52e:	6862      	ldr	r2, [r4, #4]
 800b530:	2100      	movs	r1, #0
 800b532:	4628      	mov	r0, r5
 800b534:	f7f4 fe54 	bl	80001e0 <memchr>
 800b538:	b108      	cbz	r0, 800b53e <_printf_i+0x1f2>
 800b53a:	1b40      	subs	r0, r0, r5
 800b53c:	6060      	str	r0, [r4, #4]
 800b53e:	6863      	ldr	r3, [r4, #4]
 800b540:	6123      	str	r3, [r4, #16]
 800b542:	2300      	movs	r3, #0
 800b544:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800b548:	e7a8      	b.n	800b49c <_printf_i+0x150>
 800b54a:	6923      	ldr	r3, [r4, #16]
 800b54c:	462a      	mov	r2, r5
 800b54e:	4649      	mov	r1, r9
 800b550:	4640      	mov	r0, r8
 800b552:	47d0      	blx	sl
 800b554:	3001      	adds	r0, #1
 800b556:	d0ab      	beq.n	800b4b0 <_printf_i+0x164>
 800b558:	6823      	ldr	r3, [r4, #0]
 800b55a:	079b      	lsls	r3, r3, #30
 800b55c:	d413      	bmi.n	800b586 <_printf_i+0x23a>
 800b55e:	68e0      	ldr	r0, [r4, #12]
 800b560:	9b03      	ldr	r3, [sp, #12]
 800b562:	4298      	cmp	r0, r3
 800b564:	bfb8      	it	lt
 800b566:	4618      	movlt	r0, r3
 800b568:	e7a4      	b.n	800b4b4 <_printf_i+0x168>
 800b56a:	2301      	movs	r3, #1
 800b56c:	4632      	mov	r2, r6
 800b56e:	4649      	mov	r1, r9
 800b570:	4640      	mov	r0, r8
 800b572:	47d0      	blx	sl
 800b574:	3001      	adds	r0, #1
 800b576:	d09b      	beq.n	800b4b0 <_printf_i+0x164>
 800b578:	3501      	adds	r5, #1
 800b57a:	68e3      	ldr	r3, [r4, #12]
 800b57c:	9903      	ldr	r1, [sp, #12]
 800b57e:	1a5b      	subs	r3, r3, r1
 800b580:	42ab      	cmp	r3, r5
 800b582:	dcf2      	bgt.n	800b56a <_printf_i+0x21e>
 800b584:	e7eb      	b.n	800b55e <_printf_i+0x212>
 800b586:	2500      	movs	r5, #0
 800b588:	f104 0619 	add.w	r6, r4, #25
 800b58c:	e7f5      	b.n	800b57a <_printf_i+0x22e>
 800b58e:	bf00      	nop
 800b590:	0800f906 	.word	0x0800f906
 800b594:	0800f917 	.word	0x0800f917

0800b598 <_scanf_float>:
 800b598:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b59c:	b087      	sub	sp, #28
 800b59e:	4617      	mov	r7, r2
 800b5a0:	9303      	str	r3, [sp, #12]
 800b5a2:	688b      	ldr	r3, [r1, #8]
 800b5a4:	1e5a      	subs	r2, r3, #1
 800b5a6:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800b5aa:	bf83      	ittte	hi
 800b5ac:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800b5b0:	195b      	addhi	r3, r3, r5
 800b5b2:	9302      	strhi	r3, [sp, #8]
 800b5b4:	2300      	movls	r3, #0
 800b5b6:	bf86      	itte	hi
 800b5b8:	f240 135d 	movwhi	r3, #349	; 0x15d
 800b5bc:	608b      	strhi	r3, [r1, #8]
 800b5be:	9302      	strls	r3, [sp, #8]
 800b5c0:	680b      	ldr	r3, [r1, #0]
 800b5c2:	468b      	mov	fp, r1
 800b5c4:	2500      	movs	r5, #0
 800b5c6:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800b5ca:	f84b 3b1c 	str.w	r3, [fp], #28
 800b5ce:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800b5d2:	4680      	mov	r8, r0
 800b5d4:	460c      	mov	r4, r1
 800b5d6:	465e      	mov	r6, fp
 800b5d8:	46aa      	mov	sl, r5
 800b5da:	46a9      	mov	r9, r5
 800b5dc:	9501      	str	r5, [sp, #4]
 800b5de:	68a2      	ldr	r2, [r4, #8]
 800b5e0:	b152      	cbz	r2, 800b5f8 <_scanf_float+0x60>
 800b5e2:	683b      	ldr	r3, [r7, #0]
 800b5e4:	781b      	ldrb	r3, [r3, #0]
 800b5e6:	2b4e      	cmp	r3, #78	; 0x4e
 800b5e8:	d864      	bhi.n	800b6b4 <_scanf_float+0x11c>
 800b5ea:	2b40      	cmp	r3, #64	; 0x40
 800b5ec:	d83c      	bhi.n	800b668 <_scanf_float+0xd0>
 800b5ee:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800b5f2:	b2c8      	uxtb	r0, r1
 800b5f4:	280e      	cmp	r0, #14
 800b5f6:	d93a      	bls.n	800b66e <_scanf_float+0xd6>
 800b5f8:	f1b9 0f00 	cmp.w	r9, #0
 800b5fc:	d003      	beq.n	800b606 <_scanf_float+0x6e>
 800b5fe:	6823      	ldr	r3, [r4, #0]
 800b600:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800b604:	6023      	str	r3, [r4, #0]
 800b606:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b60a:	f1ba 0f01 	cmp.w	sl, #1
 800b60e:	f200 8113 	bhi.w	800b838 <_scanf_float+0x2a0>
 800b612:	455e      	cmp	r6, fp
 800b614:	f200 8105 	bhi.w	800b822 <_scanf_float+0x28a>
 800b618:	2501      	movs	r5, #1
 800b61a:	4628      	mov	r0, r5
 800b61c:	b007      	add	sp, #28
 800b61e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b622:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800b626:	2a0d      	cmp	r2, #13
 800b628:	d8e6      	bhi.n	800b5f8 <_scanf_float+0x60>
 800b62a:	a101      	add	r1, pc, #4	; (adr r1, 800b630 <_scanf_float+0x98>)
 800b62c:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800b630:	0800b76f 	.word	0x0800b76f
 800b634:	0800b5f9 	.word	0x0800b5f9
 800b638:	0800b5f9 	.word	0x0800b5f9
 800b63c:	0800b5f9 	.word	0x0800b5f9
 800b640:	0800b7cf 	.word	0x0800b7cf
 800b644:	0800b7a7 	.word	0x0800b7a7
 800b648:	0800b5f9 	.word	0x0800b5f9
 800b64c:	0800b5f9 	.word	0x0800b5f9
 800b650:	0800b77d 	.word	0x0800b77d
 800b654:	0800b5f9 	.word	0x0800b5f9
 800b658:	0800b5f9 	.word	0x0800b5f9
 800b65c:	0800b5f9 	.word	0x0800b5f9
 800b660:	0800b5f9 	.word	0x0800b5f9
 800b664:	0800b735 	.word	0x0800b735
 800b668:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800b66c:	e7db      	b.n	800b626 <_scanf_float+0x8e>
 800b66e:	290e      	cmp	r1, #14
 800b670:	d8c2      	bhi.n	800b5f8 <_scanf_float+0x60>
 800b672:	a001      	add	r0, pc, #4	; (adr r0, 800b678 <_scanf_float+0xe0>)
 800b674:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800b678:	0800b727 	.word	0x0800b727
 800b67c:	0800b5f9 	.word	0x0800b5f9
 800b680:	0800b727 	.word	0x0800b727
 800b684:	0800b7bb 	.word	0x0800b7bb
 800b688:	0800b5f9 	.word	0x0800b5f9
 800b68c:	0800b6d5 	.word	0x0800b6d5
 800b690:	0800b711 	.word	0x0800b711
 800b694:	0800b711 	.word	0x0800b711
 800b698:	0800b711 	.word	0x0800b711
 800b69c:	0800b711 	.word	0x0800b711
 800b6a0:	0800b711 	.word	0x0800b711
 800b6a4:	0800b711 	.word	0x0800b711
 800b6a8:	0800b711 	.word	0x0800b711
 800b6ac:	0800b711 	.word	0x0800b711
 800b6b0:	0800b711 	.word	0x0800b711
 800b6b4:	2b6e      	cmp	r3, #110	; 0x6e
 800b6b6:	d809      	bhi.n	800b6cc <_scanf_float+0x134>
 800b6b8:	2b60      	cmp	r3, #96	; 0x60
 800b6ba:	d8b2      	bhi.n	800b622 <_scanf_float+0x8a>
 800b6bc:	2b54      	cmp	r3, #84	; 0x54
 800b6be:	d077      	beq.n	800b7b0 <_scanf_float+0x218>
 800b6c0:	2b59      	cmp	r3, #89	; 0x59
 800b6c2:	d199      	bne.n	800b5f8 <_scanf_float+0x60>
 800b6c4:	2d07      	cmp	r5, #7
 800b6c6:	d197      	bne.n	800b5f8 <_scanf_float+0x60>
 800b6c8:	2508      	movs	r5, #8
 800b6ca:	e029      	b.n	800b720 <_scanf_float+0x188>
 800b6cc:	2b74      	cmp	r3, #116	; 0x74
 800b6ce:	d06f      	beq.n	800b7b0 <_scanf_float+0x218>
 800b6d0:	2b79      	cmp	r3, #121	; 0x79
 800b6d2:	e7f6      	b.n	800b6c2 <_scanf_float+0x12a>
 800b6d4:	6821      	ldr	r1, [r4, #0]
 800b6d6:	05c8      	lsls	r0, r1, #23
 800b6d8:	d51a      	bpl.n	800b710 <_scanf_float+0x178>
 800b6da:	9b02      	ldr	r3, [sp, #8]
 800b6dc:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800b6e0:	6021      	str	r1, [r4, #0]
 800b6e2:	f109 0901 	add.w	r9, r9, #1
 800b6e6:	b11b      	cbz	r3, 800b6f0 <_scanf_float+0x158>
 800b6e8:	3b01      	subs	r3, #1
 800b6ea:	3201      	adds	r2, #1
 800b6ec:	9302      	str	r3, [sp, #8]
 800b6ee:	60a2      	str	r2, [r4, #8]
 800b6f0:	68a3      	ldr	r3, [r4, #8]
 800b6f2:	3b01      	subs	r3, #1
 800b6f4:	60a3      	str	r3, [r4, #8]
 800b6f6:	6923      	ldr	r3, [r4, #16]
 800b6f8:	3301      	adds	r3, #1
 800b6fa:	6123      	str	r3, [r4, #16]
 800b6fc:	687b      	ldr	r3, [r7, #4]
 800b6fe:	3b01      	subs	r3, #1
 800b700:	2b00      	cmp	r3, #0
 800b702:	607b      	str	r3, [r7, #4]
 800b704:	f340 8084 	ble.w	800b810 <_scanf_float+0x278>
 800b708:	683b      	ldr	r3, [r7, #0]
 800b70a:	3301      	adds	r3, #1
 800b70c:	603b      	str	r3, [r7, #0]
 800b70e:	e766      	b.n	800b5de <_scanf_float+0x46>
 800b710:	eb1a 0f05 	cmn.w	sl, r5
 800b714:	f47f af70 	bne.w	800b5f8 <_scanf_float+0x60>
 800b718:	6822      	ldr	r2, [r4, #0]
 800b71a:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800b71e:	6022      	str	r2, [r4, #0]
 800b720:	f806 3b01 	strb.w	r3, [r6], #1
 800b724:	e7e4      	b.n	800b6f0 <_scanf_float+0x158>
 800b726:	6822      	ldr	r2, [r4, #0]
 800b728:	0610      	lsls	r0, r2, #24
 800b72a:	f57f af65 	bpl.w	800b5f8 <_scanf_float+0x60>
 800b72e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800b732:	e7f4      	b.n	800b71e <_scanf_float+0x186>
 800b734:	f1ba 0f00 	cmp.w	sl, #0
 800b738:	d10e      	bne.n	800b758 <_scanf_float+0x1c0>
 800b73a:	f1b9 0f00 	cmp.w	r9, #0
 800b73e:	d10e      	bne.n	800b75e <_scanf_float+0x1c6>
 800b740:	6822      	ldr	r2, [r4, #0]
 800b742:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b746:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b74a:	d108      	bne.n	800b75e <_scanf_float+0x1c6>
 800b74c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b750:	6022      	str	r2, [r4, #0]
 800b752:	f04f 0a01 	mov.w	sl, #1
 800b756:	e7e3      	b.n	800b720 <_scanf_float+0x188>
 800b758:	f1ba 0f02 	cmp.w	sl, #2
 800b75c:	d055      	beq.n	800b80a <_scanf_float+0x272>
 800b75e:	2d01      	cmp	r5, #1
 800b760:	d002      	beq.n	800b768 <_scanf_float+0x1d0>
 800b762:	2d04      	cmp	r5, #4
 800b764:	f47f af48 	bne.w	800b5f8 <_scanf_float+0x60>
 800b768:	3501      	adds	r5, #1
 800b76a:	b2ed      	uxtb	r5, r5
 800b76c:	e7d8      	b.n	800b720 <_scanf_float+0x188>
 800b76e:	f1ba 0f01 	cmp.w	sl, #1
 800b772:	f47f af41 	bne.w	800b5f8 <_scanf_float+0x60>
 800b776:	f04f 0a02 	mov.w	sl, #2
 800b77a:	e7d1      	b.n	800b720 <_scanf_float+0x188>
 800b77c:	b97d      	cbnz	r5, 800b79e <_scanf_float+0x206>
 800b77e:	f1b9 0f00 	cmp.w	r9, #0
 800b782:	f47f af3c 	bne.w	800b5fe <_scanf_float+0x66>
 800b786:	6822      	ldr	r2, [r4, #0]
 800b788:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800b78c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800b790:	f47f af39 	bne.w	800b606 <_scanf_float+0x6e>
 800b794:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b798:	6022      	str	r2, [r4, #0]
 800b79a:	2501      	movs	r5, #1
 800b79c:	e7c0      	b.n	800b720 <_scanf_float+0x188>
 800b79e:	2d03      	cmp	r5, #3
 800b7a0:	d0e2      	beq.n	800b768 <_scanf_float+0x1d0>
 800b7a2:	2d05      	cmp	r5, #5
 800b7a4:	e7de      	b.n	800b764 <_scanf_float+0x1cc>
 800b7a6:	2d02      	cmp	r5, #2
 800b7a8:	f47f af26 	bne.w	800b5f8 <_scanf_float+0x60>
 800b7ac:	2503      	movs	r5, #3
 800b7ae:	e7b7      	b.n	800b720 <_scanf_float+0x188>
 800b7b0:	2d06      	cmp	r5, #6
 800b7b2:	f47f af21 	bne.w	800b5f8 <_scanf_float+0x60>
 800b7b6:	2507      	movs	r5, #7
 800b7b8:	e7b2      	b.n	800b720 <_scanf_float+0x188>
 800b7ba:	6822      	ldr	r2, [r4, #0]
 800b7bc:	0591      	lsls	r1, r2, #22
 800b7be:	f57f af1b 	bpl.w	800b5f8 <_scanf_float+0x60>
 800b7c2:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800b7c6:	6022      	str	r2, [r4, #0]
 800b7c8:	f8cd 9004 	str.w	r9, [sp, #4]
 800b7cc:	e7a8      	b.n	800b720 <_scanf_float+0x188>
 800b7ce:	6822      	ldr	r2, [r4, #0]
 800b7d0:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800b7d4:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800b7d8:	d006      	beq.n	800b7e8 <_scanf_float+0x250>
 800b7da:	0550      	lsls	r0, r2, #21
 800b7dc:	f57f af0c 	bpl.w	800b5f8 <_scanf_float+0x60>
 800b7e0:	f1b9 0f00 	cmp.w	r9, #0
 800b7e4:	f43f af0f 	beq.w	800b606 <_scanf_float+0x6e>
 800b7e8:	0591      	lsls	r1, r2, #22
 800b7ea:	bf58      	it	pl
 800b7ec:	9901      	ldrpl	r1, [sp, #4]
 800b7ee:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800b7f2:	bf58      	it	pl
 800b7f4:	eba9 0101 	subpl.w	r1, r9, r1
 800b7f8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800b7fc:	bf58      	it	pl
 800b7fe:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800b802:	6022      	str	r2, [r4, #0]
 800b804:	f04f 0900 	mov.w	r9, #0
 800b808:	e78a      	b.n	800b720 <_scanf_float+0x188>
 800b80a:	f04f 0a03 	mov.w	sl, #3
 800b80e:	e787      	b.n	800b720 <_scanf_float+0x188>
 800b810:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800b814:	4639      	mov	r1, r7
 800b816:	4640      	mov	r0, r8
 800b818:	4798      	blx	r3
 800b81a:	2800      	cmp	r0, #0
 800b81c:	f43f aedf 	beq.w	800b5de <_scanf_float+0x46>
 800b820:	e6ea      	b.n	800b5f8 <_scanf_float+0x60>
 800b822:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b826:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b82a:	463a      	mov	r2, r7
 800b82c:	4640      	mov	r0, r8
 800b82e:	4798      	blx	r3
 800b830:	6923      	ldr	r3, [r4, #16]
 800b832:	3b01      	subs	r3, #1
 800b834:	6123      	str	r3, [r4, #16]
 800b836:	e6ec      	b.n	800b612 <_scanf_float+0x7a>
 800b838:	1e6b      	subs	r3, r5, #1
 800b83a:	2b06      	cmp	r3, #6
 800b83c:	d825      	bhi.n	800b88a <_scanf_float+0x2f2>
 800b83e:	2d02      	cmp	r5, #2
 800b840:	d836      	bhi.n	800b8b0 <_scanf_float+0x318>
 800b842:	455e      	cmp	r6, fp
 800b844:	f67f aee8 	bls.w	800b618 <_scanf_float+0x80>
 800b848:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b84c:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b850:	463a      	mov	r2, r7
 800b852:	4640      	mov	r0, r8
 800b854:	4798      	blx	r3
 800b856:	6923      	ldr	r3, [r4, #16]
 800b858:	3b01      	subs	r3, #1
 800b85a:	6123      	str	r3, [r4, #16]
 800b85c:	e7f1      	b.n	800b842 <_scanf_float+0x2aa>
 800b85e:	9802      	ldr	r0, [sp, #8]
 800b860:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b864:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800b868:	9002      	str	r0, [sp, #8]
 800b86a:	463a      	mov	r2, r7
 800b86c:	4640      	mov	r0, r8
 800b86e:	4798      	blx	r3
 800b870:	6923      	ldr	r3, [r4, #16]
 800b872:	3b01      	subs	r3, #1
 800b874:	6123      	str	r3, [r4, #16]
 800b876:	f10a 3aff 	add.w	sl, sl, #4294967295
 800b87a:	fa5f fa8a 	uxtb.w	sl, sl
 800b87e:	f1ba 0f02 	cmp.w	sl, #2
 800b882:	d1ec      	bne.n	800b85e <_scanf_float+0x2c6>
 800b884:	3d03      	subs	r5, #3
 800b886:	b2ed      	uxtb	r5, r5
 800b888:	1b76      	subs	r6, r6, r5
 800b88a:	6823      	ldr	r3, [r4, #0]
 800b88c:	05da      	lsls	r2, r3, #23
 800b88e:	d52f      	bpl.n	800b8f0 <_scanf_float+0x358>
 800b890:	055b      	lsls	r3, r3, #21
 800b892:	d510      	bpl.n	800b8b6 <_scanf_float+0x31e>
 800b894:	455e      	cmp	r6, fp
 800b896:	f67f aebf 	bls.w	800b618 <_scanf_float+0x80>
 800b89a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b89e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800b8a2:	463a      	mov	r2, r7
 800b8a4:	4640      	mov	r0, r8
 800b8a6:	4798      	blx	r3
 800b8a8:	6923      	ldr	r3, [r4, #16]
 800b8aa:	3b01      	subs	r3, #1
 800b8ac:	6123      	str	r3, [r4, #16]
 800b8ae:	e7f1      	b.n	800b894 <_scanf_float+0x2fc>
 800b8b0:	46aa      	mov	sl, r5
 800b8b2:	9602      	str	r6, [sp, #8]
 800b8b4:	e7df      	b.n	800b876 <_scanf_float+0x2de>
 800b8b6:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800b8ba:	6923      	ldr	r3, [r4, #16]
 800b8bc:	2965      	cmp	r1, #101	; 0x65
 800b8be:	f103 33ff 	add.w	r3, r3, #4294967295
 800b8c2:	f106 35ff 	add.w	r5, r6, #4294967295
 800b8c6:	6123      	str	r3, [r4, #16]
 800b8c8:	d00c      	beq.n	800b8e4 <_scanf_float+0x34c>
 800b8ca:	2945      	cmp	r1, #69	; 0x45
 800b8cc:	d00a      	beq.n	800b8e4 <_scanf_float+0x34c>
 800b8ce:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8d2:	463a      	mov	r2, r7
 800b8d4:	4640      	mov	r0, r8
 800b8d6:	4798      	blx	r3
 800b8d8:	6923      	ldr	r3, [r4, #16]
 800b8da:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800b8de:	3b01      	subs	r3, #1
 800b8e0:	1eb5      	subs	r5, r6, #2
 800b8e2:	6123      	str	r3, [r4, #16]
 800b8e4:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800b8e8:	463a      	mov	r2, r7
 800b8ea:	4640      	mov	r0, r8
 800b8ec:	4798      	blx	r3
 800b8ee:	462e      	mov	r6, r5
 800b8f0:	6825      	ldr	r5, [r4, #0]
 800b8f2:	f015 0510 	ands.w	r5, r5, #16
 800b8f6:	d159      	bne.n	800b9ac <_scanf_float+0x414>
 800b8f8:	7035      	strb	r5, [r6, #0]
 800b8fa:	6823      	ldr	r3, [r4, #0]
 800b8fc:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800b900:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800b904:	d11b      	bne.n	800b93e <_scanf_float+0x3a6>
 800b906:	9b01      	ldr	r3, [sp, #4]
 800b908:	454b      	cmp	r3, r9
 800b90a:	eba3 0209 	sub.w	r2, r3, r9
 800b90e:	d123      	bne.n	800b958 <_scanf_float+0x3c0>
 800b910:	2200      	movs	r2, #0
 800b912:	4659      	mov	r1, fp
 800b914:	4640      	mov	r0, r8
 800b916:	f000 fe99 	bl	800c64c <_strtod_r>
 800b91a:	6822      	ldr	r2, [r4, #0]
 800b91c:	9b03      	ldr	r3, [sp, #12]
 800b91e:	f012 0f02 	tst.w	r2, #2
 800b922:	ec57 6b10 	vmov	r6, r7, d0
 800b926:	681b      	ldr	r3, [r3, #0]
 800b928:	d021      	beq.n	800b96e <_scanf_float+0x3d6>
 800b92a:	9903      	ldr	r1, [sp, #12]
 800b92c:	1d1a      	adds	r2, r3, #4
 800b92e:	600a      	str	r2, [r1, #0]
 800b930:	681b      	ldr	r3, [r3, #0]
 800b932:	e9c3 6700 	strd	r6, r7, [r3]
 800b936:	68e3      	ldr	r3, [r4, #12]
 800b938:	3301      	adds	r3, #1
 800b93a:	60e3      	str	r3, [r4, #12]
 800b93c:	e66d      	b.n	800b61a <_scanf_float+0x82>
 800b93e:	9b04      	ldr	r3, [sp, #16]
 800b940:	2b00      	cmp	r3, #0
 800b942:	d0e5      	beq.n	800b910 <_scanf_float+0x378>
 800b944:	9905      	ldr	r1, [sp, #20]
 800b946:	230a      	movs	r3, #10
 800b948:	462a      	mov	r2, r5
 800b94a:	3101      	adds	r1, #1
 800b94c:	4640      	mov	r0, r8
 800b94e:	f000 ff6d 	bl	800c82c <_strtol_r>
 800b952:	9b04      	ldr	r3, [sp, #16]
 800b954:	9e05      	ldr	r6, [sp, #20]
 800b956:	1ac2      	subs	r2, r0, r3
 800b958:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800b95c:	429e      	cmp	r6, r3
 800b95e:	bf28      	it	cs
 800b960:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800b964:	4912      	ldr	r1, [pc, #72]	; (800b9b0 <_scanf_float+0x418>)
 800b966:	4630      	mov	r0, r6
 800b968:	f000 f82c 	bl	800b9c4 <siprintf>
 800b96c:	e7d0      	b.n	800b910 <_scanf_float+0x378>
 800b96e:	9903      	ldr	r1, [sp, #12]
 800b970:	f012 0f04 	tst.w	r2, #4
 800b974:	f103 0204 	add.w	r2, r3, #4
 800b978:	600a      	str	r2, [r1, #0]
 800b97a:	d1d9      	bne.n	800b930 <_scanf_float+0x398>
 800b97c:	f8d3 8000 	ldr.w	r8, [r3]
 800b980:	ee10 2a10 	vmov	r2, s0
 800b984:	ee10 0a10 	vmov	r0, s0
 800b988:	463b      	mov	r3, r7
 800b98a:	4639      	mov	r1, r7
 800b98c:	f7f5 f8ce 	bl	8000b2c <__aeabi_dcmpun>
 800b990:	b128      	cbz	r0, 800b99e <_scanf_float+0x406>
 800b992:	4808      	ldr	r0, [pc, #32]	; (800b9b4 <_scanf_float+0x41c>)
 800b994:	f000 f810 	bl	800b9b8 <nanf>
 800b998:	ed88 0a00 	vstr	s0, [r8]
 800b99c:	e7cb      	b.n	800b936 <_scanf_float+0x39e>
 800b99e:	4630      	mov	r0, r6
 800b9a0:	4639      	mov	r1, r7
 800b9a2:	f7f5 f921 	bl	8000be8 <__aeabi_d2f>
 800b9a6:	f8c8 0000 	str.w	r0, [r8]
 800b9aa:	e7c4      	b.n	800b936 <_scanf_float+0x39e>
 800b9ac:	2500      	movs	r5, #0
 800b9ae:	e634      	b.n	800b61a <_scanf_float+0x82>
 800b9b0:	0800f928 	.word	0x0800f928
 800b9b4:	0800fa2f 	.word	0x0800fa2f

0800b9b8 <nanf>:
 800b9b8:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800b9c0 <nanf+0x8>
 800b9bc:	4770      	bx	lr
 800b9be:	bf00      	nop
 800b9c0:	7fc00000 	.word	0x7fc00000

0800b9c4 <siprintf>:
 800b9c4:	b40e      	push	{r1, r2, r3}
 800b9c6:	b500      	push	{lr}
 800b9c8:	b09c      	sub	sp, #112	; 0x70
 800b9ca:	ab1d      	add	r3, sp, #116	; 0x74
 800b9cc:	9002      	str	r0, [sp, #8]
 800b9ce:	9006      	str	r0, [sp, #24]
 800b9d0:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800b9d4:	4809      	ldr	r0, [pc, #36]	; (800b9fc <siprintf+0x38>)
 800b9d6:	9107      	str	r1, [sp, #28]
 800b9d8:	9104      	str	r1, [sp, #16]
 800b9da:	4909      	ldr	r1, [pc, #36]	; (800ba00 <siprintf+0x3c>)
 800b9dc:	f853 2b04 	ldr.w	r2, [r3], #4
 800b9e0:	9105      	str	r1, [sp, #20]
 800b9e2:	6800      	ldr	r0, [r0, #0]
 800b9e4:	9301      	str	r3, [sp, #4]
 800b9e6:	a902      	add	r1, sp, #8
 800b9e8:	f002 ff7e 	bl	800e8e8 <_svfiprintf_r>
 800b9ec:	9b02      	ldr	r3, [sp, #8]
 800b9ee:	2200      	movs	r2, #0
 800b9f0:	701a      	strb	r2, [r3, #0]
 800b9f2:	b01c      	add	sp, #112	; 0x70
 800b9f4:	f85d eb04 	ldr.w	lr, [sp], #4
 800b9f8:	b003      	add	sp, #12
 800b9fa:	4770      	bx	lr
 800b9fc:	20000020 	.word	0x20000020
 800ba00:	ffff0208 	.word	0xffff0208

0800ba04 <sulp>:
 800ba04:	b570      	push	{r4, r5, r6, lr}
 800ba06:	4604      	mov	r4, r0
 800ba08:	460d      	mov	r5, r1
 800ba0a:	ec45 4b10 	vmov	d0, r4, r5
 800ba0e:	4616      	mov	r6, r2
 800ba10:	f002 fcc8 	bl	800e3a4 <__ulp>
 800ba14:	ec51 0b10 	vmov	r0, r1, d0
 800ba18:	b17e      	cbz	r6, 800ba3a <sulp+0x36>
 800ba1a:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800ba1e:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800ba22:	2b00      	cmp	r3, #0
 800ba24:	dd09      	ble.n	800ba3a <sulp+0x36>
 800ba26:	051b      	lsls	r3, r3, #20
 800ba28:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800ba2c:	2400      	movs	r4, #0
 800ba2e:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ba32:	4622      	mov	r2, r4
 800ba34:	462b      	mov	r3, r5
 800ba36:	f7f4 fddf 	bl	80005f8 <__aeabi_dmul>
 800ba3a:	bd70      	pop	{r4, r5, r6, pc}
 800ba3c:	0000      	movs	r0, r0
	...

0800ba40 <_strtod_l>:
 800ba40:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ba44:	ed2d 8b02 	vpush	{d8}
 800ba48:	b09d      	sub	sp, #116	; 0x74
 800ba4a:	461f      	mov	r7, r3
 800ba4c:	2300      	movs	r3, #0
 800ba4e:	9318      	str	r3, [sp, #96]	; 0x60
 800ba50:	4ba2      	ldr	r3, [pc, #648]	; (800bcdc <_strtod_l+0x29c>)
 800ba52:	9213      	str	r2, [sp, #76]	; 0x4c
 800ba54:	681b      	ldr	r3, [r3, #0]
 800ba56:	9305      	str	r3, [sp, #20]
 800ba58:	4604      	mov	r4, r0
 800ba5a:	4618      	mov	r0, r3
 800ba5c:	4688      	mov	r8, r1
 800ba5e:	f7f4 fbb7 	bl	80001d0 <strlen>
 800ba62:	f04f 0a00 	mov.w	sl, #0
 800ba66:	4605      	mov	r5, r0
 800ba68:	f04f 0b00 	mov.w	fp, #0
 800ba6c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ba70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ba72:	781a      	ldrb	r2, [r3, #0]
 800ba74:	2a2b      	cmp	r2, #43	; 0x2b
 800ba76:	d04e      	beq.n	800bb16 <_strtod_l+0xd6>
 800ba78:	d83b      	bhi.n	800baf2 <_strtod_l+0xb2>
 800ba7a:	2a0d      	cmp	r2, #13
 800ba7c:	d834      	bhi.n	800bae8 <_strtod_l+0xa8>
 800ba7e:	2a08      	cmp	r2, #8
 800ba80:	d834      	bhi.n	800baec <_strtod_l+0xac>
 800ba82:	2a00      	cmp	r2, #0
 800ba84:	d03e      	beq.n	800bb04 <_strtod_l+0xc4>
 800ba86:	2300      	movs	r3, #0
 800ba88:	930a      	str	r3, [sp, #40]	; 0x28
 800ba8a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ba8c:	7833      	ldrb	r3, [r6, #0]
 800ba8e:	2b30      	cmp	r3, #48	; 0x30
 800ba90:	f040 80b0 	bne.w	800bbf4 <_strtod_l+0x1b4>
 800ba94:	7873      	ldrb	r3, [r6, #1]
 800ba96:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ba9a:	2b58      	cmp	r3, #88	; 0x58
 800ba9c:	d168      	bne.n	800bb70 <_strtod_l+0x130>
 800ba9e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800baa0:	9301      	str	r3, [sp, #4]
 800baa2:	ab18      	add	r3, sp, #96	; 0x60
 800baa4:	9702      	str	r7, [sp, #8]
 800baa6:	9300      	str	r3, [sp, #0]
 800baa8:	4a8d      	ldr	r2, [pc, #564]	; (800bce0 <_strtod_l+0x2a0>)
 800baaa:	ab19      	add	r3, sp, #100	; 0x64
 800baac:	a917      	add	r1, sp, #92	; 0x5c
 800baae:	4620      	mov	r0, r4
 800bab0:	f001 fdd2 	bl	800d658 <__gethex>
 800bab4:	f010 0707 	ands.w	r7, r0, #7
 800bab8:	4605      	mov	r5, r0
 800baba:	d005      	beq.n	800bac8 <_strtod_l+0x88>
 800babc:	2f06      	cmp	r7, #6
 800babe:	d12c      	bne.n	800bb1a <_strtod_l+0xda>
 800bac0:	3601      	adds	r6, #1
 800bac2:	2300      	movs	r3, #0
 800bac4:	9617      	str	r6, [sp, #92]	; 0x5c
 800bac6:	930a      	str	r3, [sp, #40]	; 0x28
 800bac8:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800baca:	2b00      	cmp	r3, #0
 800bacc:	f040 8590 	bne.w	800c5f0 <_strtod_l+0xbb0>
 800bad0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800bad2:	b1eb      	cbz	r3, 800bb10 <_strtod_l+0xd0>
 800bad4:	4652      	mov	r2, sl
 800bad6:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800bada:	ec43 2b10 	vmov	d0, r2, r3
 800bade:	b01d      	add	sp, #116	; 0x74
 800bae0:	ecbd 8b02 	vpop	{d8}
 800bae4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bae8:	2a20      	cmp	r2, #32
 800baea:	d1cc      	bne.n	800ba86 <_strtod_l+0x46>
 800baec:	3301      	adds	r3, #1
 800baee:	9317      	str	r3, [sp, #92]	; 0x5c
 800baf0:	e7be      	b.n	800ba70 <_strtod_l+0x30>
 800baf2:	2a2d      	cmp	r2, #45	; 0x2d
 800baf4:	d1c7      	bne.n	800ba86 <_strtod_l+0x46>
 800baf6:	2201      	movs	r2, #1
 800baf8:	920a      	str	r2, [sp, #40]	; 0x28
 800bafa:	1c5a      	adds	r2, r3, #1
 800bafc:	9217      	str	r2, [sp, #92]	; 0x5c
 800bafe:	785b      	ldrb	r3, [r3, #1]
 800bb00:	2b00      	cmp	r3, #0
 800bb02:	d1c2      	bne.n	800ba8a <_strtod_l+0x4a>
 800bb04:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800bb06:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bb0a:	2b00      	cmp	r3, #0
 800bb0c:	f040 856e 	bne.w	800c5ec <_strtod_l+0xbac>
 800bb10:	4652      	mov	r2, sl
 800bb12:	465b      	mov	r3, fp
 800bb14:	e7e1      	b.n	800bada <_strtod_l+0x9a>
 800bb16:	2200      	movs	r2, #0
 800bb18:	e7ee      	b.n	800baf8 <_strtod_l+0xb8>
 800bb1a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800bb1c:	b13a      	cbz	r2, 800bb2e <_strtod_l+0xee>
 800bb1e:	2135      	movs	r1, #53	; 0x35
 800bb20:	a81a      	add	r0, sp, #104	; 0x68
 800bb22:	f002 fd4a 	bl	800e5ba <__copybits>
 800bb26:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bb28:	4620      	mov	r0, r4
 800bb2a:	f002 f909 	bl	800dd40 <_Bfree>
 800bb2e:	3f01      	subs	r7, #1
 800bb30:	2f04      	cmp	r7, #4
 800bb32:	d806      	bhi.n	800bb42 <_strtod_l+0x102>
 800bb34:	e8df f007 	tbb	[pc, r7]
 800bb38:	1714030a 	.word	0x1714030a
 800bb3c:	0a          	.byte	0x0a
 800bb3d:	00          	.byte	0x00
 800bb3e:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800bb42:	0728      	lsls	r0, r5, #28
 800bb44:	d5c0      	bpl.n	800bac8 <_strtod_l+0x88>
 800bb46:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800bb4a:	e7bd      	b.n	800bac8 <_strtod_l+0x88>
 800bb4c:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800bb50:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800bb52:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800bb56:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800bb5a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800bb5e:	e7f0      	b.n	800bb42 <_strtod_l+0x102>
 800bb60:	f8df b180 	ldr.w	fp, [pc, #384]	; 800bce4 <_strtod_l+0x2a4>
 800bb64:	e7ed      	b.n	800bb42 <_strtod_l+0x102>
 800bb66:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800bb6a:	f04f 3aff 	mov.w	sl, #4294967295
 800bb6e:	e7e8      	b.n	800bb42 <_strtod_l+0x102>
 800bb70:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb72:	1c5a      	adds	r2, r3, #1
 800bb74:	9217      	str	r2, [sp, #92]	; 0x5c
 800bb76:	785b      	ldrb	r3, [r3, #1]
 800bb78:	2b30      	cmp	r3, #48	; 0x30
 800bb7a:	d0f9      	beq.n	800bb70 <_strtod_l+0x130>
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	d0a3      	beq.n	800bac8 <_strtod_l+0x88>
 800bb80:	2301      	movs	r3, #1
 800bb82:	f04f 0900 	mov.w	r9, #0
 800bb86:	9304      	str	r3, [sp, #16]
 800bb88:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bb8a:	9308      	str	r3, [sp, #32]
 800bb8c:	f8cd 901c 	str.w	r9, [sp, #28]
 800bb90:	464f      	mov	r7, r9
 800bb92:	220a      	movs	r2, #10
 800bb94:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800bb96:	7806      	ldrb	r6, [r0, #0]
 800bb98:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800bb9c:	b2d9      	uxtb	r1, r3
 800bb9e:	2909      	cmp	r1, #9
 800bba0:	d92a      	bls.n	800bbf8 <_strtod_l+0x1b8>
 800bba2:	9905      	ldr	r1, [sp, #20]
 800bba4:	462a      	mov	r2, r5
 800bba6:	f003 f913 	bl	800edd0 <strncmp>
 800bbaa:	b398      	cbz	r0, 800bc14 <_strtod_l+0x1d4>
 800bbac:	2000      	movs	r0, #0
 800bbae:	4632      	mov	r2, r6
 800bbb0:	463d      	mov	r5, r7
 800bbb2:	9005      	str	r0, [sp, #20]
 800bbb4:	4603      	mov	r3, r0
 800bbb6:	2a65      	cmp	r2, #101	; 0x65
 800bbb8:	d001      	beq.n	800bbbe <_strtod_l+0x17e>
 800bbba:	2a45      	cmp	r2, #69	; 0x45
 800bbbc:	d118      	bne.n	800bbf0 <_strtod_l+0x1b0>
 800bbbe:	b91d      	cbnz	r5, 800bbc8 <_strtod_l+0x188>
 800bbc0:	9a04      	ldr	r2, [sp, #16]
 800bbc2:	4302      	orrs	r2, r0
 800bbc4:	d09e      	beq.n	800bb04 <_strtod_l+0xc4>
 800bbc6:	2500      	movs	r5, #0
 800bbc8:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800bbcc:	f108 0201 	add.w	r2, r8, #1
 800bbd0:	9217      	str	r2, [sp, #92]	; 0x5c
 800bbd2:	f898 2001 	ldrb.w	r2, [r8, #1]
 800bbd6:	2a2b      	cmp	r2, #43	; 0x2b
 800bbd8:	d075      	beq.n	800bcc6 <_strtod_l+0x286>
 800bbda:	2a2d      	cmp	r2, #45	; 0x2d
 800bbdc:	d07b      	beq.n	800bcd6 <_strtod_l+0x296>
 800bbde:	f04f 0c00 	mov.w	ip, #0
 800bbe2:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800bbe6:	2909      	cmp	r1, #9
 800bbe8:	f240 8082 	bls.w	800bcf0 <_strtod_l+0x2b0>
 800bbec:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800bbf0:	2600      	movs	r6, #0
 800bbf2:	e09d      	b.n	800bd30 <_strtod_l+0x2f0>
 800bbf4:	2300      	movs	r3, #0
 800bbf6:	e7c4      	b.n	800bb82 <_strtod_l+0x142>
 800bbf8:	2f08      	cmp	r7, #8
 800bbfa:	bfd8      	it	le
 800bbfc:	9907      	ldrle	r1, [sp, #28]
 800bbfe:	f100 0001 	add.w	r0, r0, #1
 800bc02:	bfda      	itte	le
 800bc04:	fb02 3301 	mlale	r3, r2, r1, r3
 800bc08:	9307      	strle	r3, [sp, #28]
 800bc0a:	fb02 3909 	mlagt	r9, r2, r9, r3
 800bc0e:	3701      	adds	r7, #1
 800bc10:	9017      	str	r0, [sp, #92]	; 0x5c
 800bc12:	e7bf      	b.n	800bb94 <_strtod_l+0x154>
 800bc14:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc16:	195a      	adds	r2, r3, r5
 800bc18:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc1a:	5d5a      	ldrb	r2, [r3, r5]
 800bc1c:	2f00      	cmp	r7, #0
 800bc1e:	d037      	beq.n	800bc90 <_strtod_l+0x250>
 800bc20:	9005      	str	r0, [sp, #20]
 800bc22:	463d      	mov	r5, r7
 800bc24:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800bc28:	2b09      	cmp	r3, #9
 800bc2a:	d912      	bls.n	800bc52 <_strtod_l+0x212>
 800bc2c:	2301      	movs	r3, #1
 800bc2e:	e7c2      	b.n	800bbb6 <_strtod_l+0x176>
 800bc30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc32:	1c5a      	adds	r2, r3, #1
 800bc34:	9217      	str	r2, [sp, #92]	; 0x5c
 800bc36:	785a      	ldrb	r2, [r3, #1]
 800bc38:	3001      	adds	r0, #1
 800bc3a:	2a30      	cmp	r2, #48	; 0x30
 800bc3c:	d0f8      	beq.n	800bc30 <_strtod_l+0x1f0>
 800bc3e:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800bc42:	2b08      	cmp	r3, #8
 800bc44:	f200 84d9 	bhi.w	800c5fa <_strtod_l+0xbba>
 800bc48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bc4a:	9005      	str	r0, [sp, #20]
 800bc4c:	2000      	movs	r0, #0
 800bc4e:	9308      	str	r3, [sp, #32]
 800bc50:	4605      	mov	r5, r0
 800bc52:	3a30      	subs	r2, #48	; 0x30
 800bc54:	f100 0301 	add.w	r3, r0, #1
 800bc58:	d014      	beq.n	800bc84 <_strtod_l+0x244>
 800bc5a:	9905      	ldr	r1, [sp, #20]
 800bc5c:	4419      	add	r1, r3
 800bc5e:	9105      	str	r1, [sp, #20]
 800bc60:	462b      	mov	r3, r5
 800bc62:	eb00 0e05 	add.w	lr, r0, r5
 800bc66:	210a      	movs	r1, #10
 800bc68:	4573      	cmp	r3, lr
 800bc6a:	d113      	bne.n	800bc94 <_strtod_l+0x254>
 800bc6c:	182b      	adds	r3, r5, r0
 800bc6e:	2b08      	cmp	r3, #8
 800bc70:	f105 0501 	add.w	r5, r5, #1
 800bc74:	4405      	add	r5, r0
 800bc76:	dc1c      	bgt.n	800bcb2 <_strtod_l+0x272>
 800bc78:	9907      	ldr	r1, [sp, #28]
 800bc7a:	230a      	movs	r3, #10
 800bc7c:	fb03 2301 	mla	r3, r3, r1, r2
 800bc80:	9307      	str	r3, [sp, #28]
 800bc82:	2300      	movs	r3, #0
 800bc84:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bc86:	1c51      	adds	r1, r2, #1
 800bc88:	9117      	str	r1, [sp, #92]	; 0x5c
 800bc8a:	7852      	ldrb	r2, [r2, #1]
 800bc8c:	4618      	mov	r0, r3
 800bc8e:	e7c9      	b.n	800bc24 <_strtod_l+0x1e4>
 800bc90:	4638      	mov	r0, r7
 800bc92:	e7d2      	b.n	800bc3a <_strtod_l+0x1fa>
 800bc94:	2b08      	cmp	r3, #8
 800bc96:	dc04      	bgt.n	800bca2 <_strtod_l+0x262>
 800bc98:	9e07      	ldr	r6, [sp, #28]
 800bc9a:	434e      	muls	r6, r1
 800bc9c:	9607      	str	r6, [sp, #28]
 800bc9e:	3301      	adds	r3, #1
 800bca0:	e7e2      	b.n	800bc68 <_strtod_l+0x228>
 800bca2:	f103 0c01 	add.w	ip, r3, #1
 800bca6:	f1bc 0f10 	cmp.w	ip, #16
 800bcaa:	bfd8      	it	le
 800bcac:	fb01 f909 	mulle.w	r9, r1, r9
 800bcb0:	e7f5      	b.n	800bc9e <_strtod_l+0x25e>
 800bcb2:	2d10      	cmp	r5, #16
 800bcb4:	bfdc      	itt	le
 800bcb6:	230a      	movle	r3, #10
 800bcb8:	fb03 2909 	mlale	r9, r3, r9, r2
 800bcbc:	e7e1      	b.n	800bc82 <_strtod_l+0x242>
 800bcbe:	2300      	movs	r3, #0
 800bcc0:	9305      	str	r3, [sp, #20]
 800bcc2:	2301      	movs	r3, #1
 800bcc4:	e77c      	b.n	800bbc0 <_strtod_l+0x180>
 800bcc6:	f04f 0c00 	mov.w	ip, #0
 800bcca:	f108 0202 	add.w	r2, r8, #2
 800bcce:	9217      	str	r2, [sp, #92]	; 0x5c
 800bcd0:	f898 2002 	ldrb.w	r2, [r8, #2]
 800bcd4:	e785      	b.n	800bbe2 <_strtod_l+0x1a2>
 800bcd6:	f04f 0c01 	mov.w	ip, #1
 800bcda:	e7f6      	b.n	800bcca <_strtod_l+0x28a>
 800bcdc:	0800fc10 	.word	0x0800fc10
 800bce0:	0800f930 	.word	0x0800f930
 800bce4:	7ff00000 	.word	0x7ff00000
 800bce8:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bcea:	1c51      	adds	r1, r2, #1
 800bcec:	9117      	str	r1, [sp, #92]	; 0x5c
 800bcee:	7852      	ldrb	r2, [r2, #1]
 800bcf0:	2a30      	cmp	r2, #48	; 0x30
 800bcf2:	d0f9      	beq.n	800bce8 <_strtod_l+0x2a8>
 800bcf4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800bcf8:	2908      	cmp	r1, #8
 800bcfa:	f63f af79 	bhi.w	800bbf0 <_strtod_l+0x1b0>
 800bcfe:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800bd02:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd04:	9206      	str	r2, [sp, #24]
 800bd06:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800bd08:	1c51      	adds	r1, r2, #1
 800bd0a:	9117      	str	r1, [sp, #92]	; 0x5c
 800bd0c:	7852      	ldrb	r2, [r2, #1]
 800bd0e:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800bd12:	2e09      	cmp	r6, #9
 800bd14:	d937      	bls.n	800bd86 <_strtod_l+0x346>
 800bd16:	9e06      	ldr	r6, [sp, #24]
 800bd18:	1b89      	subs	r1, r1, r6
 800bd1a:	2908      	cmp	r1, #8
 800bd1c:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800bd20:	dc02      	bgt.n	800bd28 <_strtod_l+0x2e8>
 800bd22:	4576      	cmp	r6, lr
 800bd24:	bfa8      	it	ge
 800bd26:	4676      	movge	r6, lr
 800bd28:	f1bc 0f00 	cmp.w	ip, #0
 800bd2c:	d000      	beq.n	800bd30 <_strtod_l+0x2f0>
 800bd2e:	4276      	negs	r6, r6
 800bd30:	2d00      	cmp	r5, #0
 800bd32:	d14d      	bne.n	800bdd0 <_strtod_l+0x390>
 800bd34:	9904      	ldr	r1, [sp, #16]
 800bd36:	4301      	orrs	r1, r0
 800bd38:	f47f aec6 	bne.w	800bac8 <_strtod_l+0x88>
 800bd3c:	2b00      	cmp	r3, #0
 800bd3e:	f47f aee1 	bne.w	800bb04 <_strtod_l+0xc4>
 800bd42:	2a69      	cmp	r2, #105	; 0x69
 800bd44:	d027      	beq.n	800bd96 <_strtod_l+0x356>
 800bd46:	dc24      	bgt.n	800bd92 <_strtod_l+0x352>
 800bd48:	2a49      	cmp	r2, #73	; 0x49
 800bd4a:	d024      	beq.n	800bd96 <_strtod_l+0x356>
 800bd4c:	2a4e      	cmp	r2, #78	; 0x4e
 800bd4e:	f47f aed9 	bne.w	800bb04 <_strtod_l+0xc4>
 800bd52:	499f      	ldr	r1, [pc, #636]	; (800bfd0 <_strtod_l+0x590>)
 800bd54:	a817      	add	r0, sp, #92	; 0x5c
 800bd56:	f001 fed7 	bl	800db08 <__match>
 800bd5a:	2800      	cmp	r0, #0
 800bd5c:	f43f aed2 	beq.w	800bb04 <_strtod_l+0xc4>
 800bd60:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bd62:	781b      	ldrb	r3, [r3, #0]
 800bd64:	2b28      	cmp	r3, #40	; 0x28
 800bd66:	d12d      	bne.n	800bdc4 <_strtod_l+0x384>
 800bd68:	499a      	ldr	r1, [pc, #616]	; (800bfd4 <_strtod_l+0x594>)
 800bd6a:	aa1a      	add	r2, sp, #104	; 0x68
 800bd6c:	a817      	add	r0, sp, #92	; 0x5c
 800bd6e:	f001 fedf 	bl	800db30 <__hexnan>
 800bd72:	2805      	cmp	r0, #5
 800bd74:	d126      	bne.n	800bdc4 <_strtod_l+0x384>
 800bd76:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800bd78:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800bd7c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800bd80:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800bd84:	e6a0      	b.n	800bac8 <_strtod_l+0x88>
 800bd86:	210a      	movs	r1, #10
 800bd88:	fb01 2e0e 	mla	lr, r1, lr, r2
 800bd8c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800bd90:	e7b9      	b.n	800bd06 <_strtod_l+0x2c6>
 800bd92:	2a6e      	cmp	r2, #110	; 0x6e
 800bd94:	e7db      	b.n	800bd4e <_strtod_l+0x30e>
 800bd96:	4990      	ldr	r1, [pc, #576]	; (800bfd8 <_strtod_l+0x598>)
 800bd98:	a817      	add	r0, sp, #92	; 0x5c
 800bd9a:	f001 feb5 	bl	800db08 <__match>
 800bd9e:	2800      	cmp	r0, #0
 800bda0:	f43f aeb0 	beq.w	800bb04 <_strtod_l+0xc4>
 800bda4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bda6:	498d      	ldr	r1, [pc, #564]	; (800bfdc <_strtod_l+0x59c>)
 800bda8:	3b01      	subs	r3, #1
 800bdaa:	a817      	add	r0, sp, #92	; 0x5c
 800bdac:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdae:	f001 feab 	bl	800db08 <__match>
 800bdb2:	b910      	cbnz	r0, 800bdba <_strtod_l+0x37a>
 800bdb4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800bdb6:	3301      	adds	r3, #1
 800bdb8:	9317      	str	r3, [sp, #92]	; 0x5c
 800bdba:	f8df b230 	ldr.w	fp, [pc, #560]	; 800bfec <_strtod_l+0x5ac>
 800bdbe:	f04f 0a00 	mov.w	sl, #0
 800bdc2:	e681      	b.n	800bac8 <_strtod_l+0x88>
 800bdc4:	4886      	ldr	r0, [pc, #536]	; (800bfe0 <_strtod_l+0x5a0>)
 800bdc6:	f002 ffeb 	bl	800eda0 <nan>
 800bdca:	ec5b ab10 	vmov	sl, fp, d0
 800bdce:	e67b      	b.n	800bac8 <_strtod_l+0x88>
 800bdd0:	9b05      	ldr	r3, [sp, #20]
 800bdd2:	9807      	ldr	r0, [sp, #28]
 800bdd4:	1af3      	subs	r3, r6, r3
 800bdd6:	2f00      	cmp	r7, #0
 800bdd8:	bf08      	it	eq
 800bdda:	462f      	moveq	r7, r5
 800bddc:	2d10      	cmp	r5, #16
 800bdde:	9306      	str	r3, [sp, #24]
 800bde0:	46a8      	mov	r8, r5
 800bde2:	bfa8      	it	ge
 800bde4:	f04f 0810 	movge.w	r8, #16
 800bde8:	f7f4 fb8c 	bl	8000504 <__aeabi_ui2d>
 800bdec:	2d09      	cmp	r5, #9
 800bdee:	4682      	mov	sl, r0
 800bdf0:	468b      	mov	fp, r1
 800bdf2:	dd13      	ble.n	800be1c <_strtod_l+0x3dc>
 800bdf4:	4b7b      	ldr	r3, [pc, #492]	; (800bfe4 <_strtod_l+0x5a4>)
 800bdf6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800bdfa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800bdfe:	f7f4 fbfb 	bl	80005f8 <__aeabi_dmul>
 800be02:	4682      	mov	sl, r0
 800be04:	4648      	mov	r0, r9
 800be06:	468b      	mov	fp, r1
 800be08:	f7f4 fb7c 	bl	8000504 <__aeabi_ui2d>
 800be0c:	4602      	mov	r2, r0
 800be0e:	460b      	mov	r3, r1
 800be10:	4650      	mov	r0, sl
 800be12:	4659      	mov	r1, fp
 800be14:	f7f4 fa3a 	bl	800028c <__adddf3>
 800be18:	4682      	mov	sl, r0
 800be1a:	468b      	mov	fp, r1
 800be1c:	2d0f      	cmp	r5, #15
 800be1e:	dc38      	bgt.n	800be92 <_strtod_l+0x452>
 800be20:	9b06      	ldr	r3, [sp, #24]
 800be22:	2b00      	cmp	r3, #0
 800be24:	f43f ae50 	beq.w	800bac8 <_strtod_l+0x88>
 800be28:	dd24      	ble.n	800be74 <_strtod_l+0x434>
 800be2a:	2b16      	cmp	r3, #22
 800be2c:	dc0b      	bgt.n	800be46 <_strtod_l+0x406>
 800be2e:	496d      	ldr	r1, [pc, #436]	; (800bfe4 <_strtod_l+0x5a4>)
 800be30:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800be34:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be38:	4652      	mov	r2, sl
 800be3a:	465b      	mov	r3, fp
 800be3c:	f7f4 fbdc 	bl	80005f8 <__aeabi_dmul>
 800be40:	4682      	mov	sl, r0
 800be42:	468b      	mov	fp, r1
 800be44:	e640      	b.n	800bac8 <_strtod_l+0x88>
 800be46:	9a06      	ldr	r2, [sp, #24]
 800be48:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800be4c:	4293      	cmp	r3, r2
 800be4e:	db20      	blt.n	800be92 <_strtod_l+0x452>
 800be50:	4c64      	ldr	r4, [pc, #400]	; (800bfe4 <_strtod_l+0x5a4>)
 800be52:	f1c5 050f 	rsb	r5, r5, #15
 800be56:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800be5a:	4652      	mov	r2, sl
 800be5c:	465b      	mov	r3, fp
 800be5e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800be62:	f7f4 fbc9 	bl	80005f8 <__aeabi_dmul>
 800be66:	9b06      	ldr	r3, [sp, #24]
 800be68:	1b5d      	subs	r5, r3, r5
 800be6a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800be6e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800be72:	e7e3      	b.n	800be3c <_strtod_l+0x3fc>
 800be74:	9b06      	ldr	r3, [sp, #24]
 800be76:	3316      	adds	r3, #22
 800be78:	db0b      	blt.n	800be92 <_strtod_l+0x452>
 800be7a:	9b05      	ldr	r3, [sp, #20]
 800be7c:	1b9e      	subs	r6, r3, r6
 800be7e:	4b59      	ldr	r3, [pc, #356]	; (800bfe4 <_strtod_l+0x5a4>)
 800be80:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800be84:	e9d6 2300 	ldrd	r2, r3, [r6]
 800be88:	4650      	mov	r0, sl
 800be8a:	4659      	mov	r1, fp
 800be8c:	f7f4 fcde 	bl	800084c <__aeabi_ddiv>
 800be90:	e7d6      	b.n	800be40 <_strtod_l+0x400>
 800be92:	9b06      	ldr	r3, [sp, #24]
 800be94:	eba5 0808 	sub.w	r8, r5, r8
 800be98:	4498      	add	r8, r3
 800be9a:	f1b8 0f00 	cmp.w	r8, #0
 800be9e:	dd74      	ble.n	800bf8a <_strtod_l+0x54a>
 800bea0:	f018 030f 	ands.w	r3, r8, #15
 800bea4:	d00a      	beq.n	800bebc <_strtod_l+0x47c>
 800bea6:	494f      	ldr	r1, [pc, #316]	; (800bfe4 <_strtod_l+0x5a4>)
 800bea8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800beac:	4652      	mov	r2, sl
 800beae:	465b      	mov	r3, fp
 800beb0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800beb4:	f7f4 fba0 	bl	80005f8 <__aeabi_dmul>
 800beb8:	4682      	mov	sl, r0
 800beba:	468b      	mov	fp, r1
 800bebc:	f038 080f 	bics.w	r8, r8, #15
 800bec0:	d04f      	beq.n	800bf62 <_strtod_l+0x522>
 800bec2:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800bec6:	dd22      	ble.n	800bf0e <_strtod_l+0x4ce>
 800bec8:	2500      	movs	r5, #0
 800beca:	462e      	mov	r6, r5
 800becc:	9507      	str	r5, [sp, #28]
 800bece:	9505      	str	r5, [sp, #20]
 800bed0:	2322      	movs	r3, #34	; 0x22
 800bed2:	f8df b118 	ldr.w	fp, [pc, #280]	; 800bfec <_strtod_l+0x5ac>
 800bed6:	6023      	str	r3, [r4, #0]
 800bed8:	f04f 0a00 	mov.w	sl, #0
 800bedc:	9b07      	ldr	r3, [sp, #28]
 800bede:	2b00      	cmp	r3, #0
 800bee0:	f43f adf2 	beq.w	800bac8 <_strtod_l+0x88>
 800bee4:	9918      	ldr	r1, [sp, #96]	; 0x60
 800bee6:	4620      	mov	r0, r4
 800bee8:	f001 ff2a 	bl	800dd40 <_Bfree>
 800beec:	9905      	ldr	r1, [sp, #20]
 800beee:	4620      	mov	r0, r4
 800bef0:	f001 ff26 	bl	800dd40 <_Bfree>
 800bef4:	4631      	mov	r1, r6
 800bef6:	4620      	mov	r0, r4
 800bef8:	f001 ff22 	bl	800dd40 <_Bfree>
 800befc:	9907      	ldr	r1, [sp, #28]
 800befe:	4620      	mov	r0, r4
 800bf00:	f001 ff1e 	bl	800dd40 <_Bfree>
 800bf04:	4629      	mov	r1, r5
 800bf06:	4620      	mov	r0, r4
 800bf08:	f001 ff1a 	bl	800dd40 <_Bfree>
 800bf0c:	e5dc      	b.n	800bac8 <_strtod_l+0x88>
 800bf0e:	4b36      	ldr	r3, [pc, #216]	; (800bfe8 <_strtod_l+0x5a8>)
 800bf10:	9304      	str	r3, [sp, #16]
 800bf12:	2300      	movs	r3, #0
 800bf14:	ea4f 1828 	mov.w	r8, r8, asr #4
 800bf18:	4650      	mov	r0, sl
 800bf1a:	4659      	mov	r1, fp
 800bf1c:	4699      	mov	r9, r3
 800bf1e:	f1b8 0f01 	cmp.w	r8, #1
 800bf22:	dc21      	bgt.n	800bf68 <_strtod_l+0x528>
 800bf24:	b10b      	cbz	r3, 800bf2a <_strtod_l+0x4ea>
 800bf26:	4682      	mov	sl, r0
 800bf28:	468b      	mov	fp, r1
 800bf2a:	4b2f      	ldr	r3, [pc, #188]	; (800bfe8 <_strtod_l+0x5a8>)
 800bf2c:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800bf30:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800bf34:	4652      	mov	r2, sl
 800bf36:	465b      	mov	r3, fp
 800bf38:	e9d9 0100 	ldrd	r0, r1, [r9]
 800bf3c:	f7f4 fb5c 	bl	80005f8 <__aeabi_dmul>
 800bf40:	4b2a      	ldr	r3, [pc, #168]	; (800bfec <_strtod_l+0x5ac>)
 800bf42:	460a      	mov	r2, r1
 800bf44:	400b      	ands	r3, r1
 800bf46:	492a      	ldr	r1, [pc, #168]	; (800bff0 <_strtod_l+0x5b0>)
 800bf48:	428b      	cmp	r3, r1
 800bf4a:	4682      	mov	sl, r0
 800bf4c:	d8bc      	bhi.n	800bec8 <_strtod_l+0x488>
 800bf4e:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800bf52:	428b      	cmp	r3, r1
 800bf54:	bf86      	itte	hi
 800bf56:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800bff4 <_strtod_l+0x5b4>
 800bf5a:	f04f 3aff 	movhi.w	sl, #4294967295
 800bf5e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800bf62:	2300      	movs	r3, #0
 800bf64:	9304      	str	r3, [sp, #16]
 800bf66:	e084      	b.n	800c072 <_strtod_l+0x632>
 800bf68:	f018 0f01 	tst.w	r8, #1
 800bf6c:	d005      	beq.n	800bf7a <_strtod_l+0x53a>
 800bf6e:	9b04      	ldr	r3, [sp, #16]
 800bf70:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bf74:	f7f4 fb40 	bl	80005f8 <__aeabi_dmul>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	9a04      	ldr	r2, [sp, #16]
 800bf7c:	3208      	adds	r2, #8
 800bf7e:	f109 0901 	add.w	r9, r9, #1
 800bf82:	ea4f 0868 	mov.w	r8, r8, asr #1
 800bf86:	9204      	str	r2, [sp, #16]
 800bf88:	e7c9      	b.n	800bf1e <_strtod_l+0x4de>
 800bf8a:	d0ea      	beq.n	800bf62 <_strtod_l+0x522>
 800bf8c:	f1c8 0800 	rsb	r8, r8, #0
 800bf90:	f018 020f 	ands.w	r2, r8, #15
 800bf94:	d00a      	beq.n	800bfac <_strtod_l+0x56c>
 800bf96:	4b13      	ldr	r3, [pc, #76]	; (800bfe4 <_strtod_l+0x5a4>)
 800bf98:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bf9c:	4650      	mov	r0, sl
 800bf9e:	4659      	mov	r1, fp
 800bfa0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bfa4:	f7f4 fc52 	bl	800084c <__aeabi_ddiv>
 800bfa8:	4682      	mov	sl, r0
 800bfaa:	468b      	mov	fp, r1
 800bfac:	ea5f 1828 	movs.w	r8, r8, asr #4
 800bfb0:	d0d7      	beq.n	800bf62 <_strtod_l+0x522>
 800bfb2:	f1b8 0f1f 	cmp.w	r8, #31
 800bfb6:	dd1f      	ble.n	800bff8 <_strtod_l+0x5b8>
 800bfb8:	2500      	movs	r5, #0
 800bfba:	462e      	mov	r6, r5
 800bfbc:	9507      	str	r5, [sp, #28]
 800bfbe:	9505      	str	r5, [sp, #20]
 800bfc0:	2322      	movs	r3, #34	; 0x22
 800bfc2:	f04f 0a00 	mov.w	sl, #0
 800bfc6:	f04f 0b00 	mov.w	fp, #0
 800bfca:	6023      	str	r3, [r4, #0]
 800bfcc:	e786      	b.n	800bedc <_strtod_l+0x49c>
 800bfce:	bf00      	nop
 800bfd0:	0800f901 	.word	0x0800f901
 800bfd4:	0800f944 	.word	0x0800f944
 800bfd8:	0800f8f9 	.word	0x0800f8f9
 800bfdc:	0800fb34 	.word	0x0800fb34
 800bfe0:	0800fa2f 	.word	0x0800fa2f
 800bfe4:	0800fca8 	.word	0x0800fca8
 800bfe8:	0800fc80 	.word	0x0800fc80
 800bfec:	7ff00000 	.word	0x7ff00000
 800bff0:	7ca00000 	.word	0x7ca00000
 800bff4:	7fefffff 	.word	0x7fefffff
 800bff8:	f018 0310 	ands.w	r3, r8, #16
 800bffc:	bf18      	it	ne
 800bffe:	236a      	movne	r3, #106	; 0x6a
 800c000:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800c3b0 <_strtod_l+0x970>
 800c004:	9304      	str	r3, [sp, #16]
 800c006:	4650      	mov	r0, sl
 800c008:	4659      	mov	r1, fp
 800c00a:	2300      	movs	r3, #0
 800c00c:	f018 0f01 	tst.w	r8, #1
 800c010:	d004      	beq.n	800c01c <_strtod_l+0x5dc>
 800c012:	e9d9 2300 	ldrd	r2, r3, [r9]
 800c016:	f7f4 faef 	bl	80005f8 <__aeabi_dmul>
 800c01a:	2301      	movs	r3, #1
 800c01c:	ea5f 0868 	movs.w	r8, r8, asr #1
 800c020:	f109 0908 	add.w	r9, r9, #8
 800c024:	d1f2      	bne.n	800c00c <_strtod_l+0x5cc>
 800c026:	b10b      	cbz	r3, 800c02c <_strtod_l+0x5ec>
 800c028:	4682      	mov	sl, r0
 800c02a:	468b      	mov	fp, r1
 800c02c:	9b04      	ldr	r3, [sp, #16]
 800c02e:	b1c3      	cbz	r3, 800c062 <_strtod_l+0x622>
 800c030:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800c034:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800c038:	2b00      	cmp	r3, #0
 800c03a:	4659      	mov	r1, fp
 800c03c:	dd11      	ble.n	800c062 <_strtod_l+0x622>
 800c03e:	2b1f      	cmp	r3, #31
 800c040:	f340 8124 	ble.w	800c28c <_strtod_l+0x84c>
 800c044:	2b34      	cmp	r3, #52	; 0x34
 800c046:	bfde      	ittt	le
 800c048:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800c04c:	f04f 33ff 	movle.w	r3, #4294967295
 800c050:	fa03 f202 	lslle.w	r2, r3, r2
 800c054:	f04f 0a00 	mov.w	sl, #0
 800c058:	bfcc      	ite	gt
 800c05a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800c05e:	ea02 0b01 	andle.w	fp, r2, r1
 800c062:	2200      	movs	r2, #0
 800c064:	2300      	movs	r3, #0
 800c066:	4650      	mov	r0, sl
 800c068:	4659      	mov	r1, fp
 800c06a:	f7f4 fd2d 	bl	8000ac8 <__aeabi_dcmpeq>
 800c06e:	2800      	cmp	r0, #0
 800c070:	d1a2      	bne.n	800bfb8 <_strtod_l+0x578>
 800c072:	9b07      	ldr	r3, [sp, #28]
 800c074:	9300      	str	r3, [sp, #0]
 800c076:	9908      	ldr	r1, [sp, #32]
 800c078:	462b      	mov	r3, r5
 800c07a:	463a      	mov	r2, r7
 800c07c:	4620      	mov	r0, r4
 800c07e:	f001 fec7 	bl	800de10 <__s2b>
 800c082:	9007      	str	r0, [sp, #28]
 800c084:	2800      	cmp	r0, #0
 800c086:	f43f af1f 	beq.w	800bec8 <_strtod_l+0x488>
 800c08a:	9b05      	ldr	r3, [sp, #20]
 800c08c:	1b9e      	subs	r6, r3, r6
 800c08e:	9b06      	ldr	r3, [sp, #24]
 800c090:	2b00      	cmp	r3, #0
 800c092:	bfb4      	ite	lt
 800c094:	4633      	movlt	r3, r6
 800c096:	2300      	movge	r3, #0
 800c098:	930c      	str	r3, [sp, #48]	; 0x30
 800c09a:	9b06      	ldr	r3, [sp, #24]
 800c09c:	2500      	movs	r5, #0
 800c09e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800c0a2:	9312      	str	r3, [sp, #72]	; 0x48
 800c0a4:	462e      	mov	r6, r5
 800c0a6:	9b07      	ldr	r3, [sp, #28]
 800c0a8:	4620      	mov	r0, r4
 800c0aa:	6859      	ldr	r1, [r3, #4]
 800c0ac:	f001 fe08 	bl	800dcc0 <_Balloc>
 800c0b0:	9005      	str	r0, [sp, #20]
 800c0b2:	2800      	cmp	r0, #0
 800c0b4:	f43f af0c 	beq.w	800bed0 <_strtod_l+0x490>
 800c0b8:	9b07      	ldr	r3, [sp, #28]
 800c0ba:	691a      	ldr	r2, [r3, #16]
 800c0bc:	3202      	adds	r2, #2
 800c0be:	f103 010c 	add.w	r1, r3, #12
 800c0c2:	0092      	lsls	r2, r2, #2
 800c0c4:	300c      	adds	r0, #12
 800c0c6:	f001 fded 	bl	800dca4 <memcpy>
 800c0ca:	ec4b ab10 	vmov	d0, sl, fp
 800c0ce:	aa1a      	add	r2, sp, #104	; 0x68
 800c0d0:	a919      	add	r1, sp, #100	; 0x64
 800c0d2:	4620      	mov	r0, r4
 800c0d4:	f002 f9e2 	bl	800e49c <__d2b>
 800c0d8:	ec4b ab18 	vmov	d8, sl, fp
 800c0dc:	9018      	str	r0, [sp, #96]	; 0x60
 800c0de:	2800      	cmp	r0, #0
 800c0e0:	f43f aef6 	beq.w	800bed0 <_strtod_l+0x490>
 800c0e4:	2101      	movs	r1, #1
 800c0e6:	4620      	mov	r0, r4
 800c0e8:	f001 ff2c 	bl	800df44 <__i2b>
 800c0ec:	4606      	mov	r6, r0
 800c0ee:	2800      	cmp	r0, #0
 800c0f0:	f43f aeee 	beq.w	800bed0 <_strtod_l+0x490>
 800c0f4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800c0f6:	9904      	ldr	r1, [sp, #16]
 800c0f8:	2b00      	cmp	r3, #0
 800c0fa:	bfab      	itete	ge
 800c0fc:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800c0fe:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800c100:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800c102:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800c106:	bfac      	ite	ge
 800c108:	eb03 0902 	addge.w	r9, r3, r2
 800c10c:	1ad7      	sublt	r7, r2, r3
 800c10e:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800c110:	eba3 0801 	sub.w	r8, r3, r1
 800c114:	4490      	add	r8, r2
 800c116:	4ba1      	ldr	r3, [pc, #644]	; (800c39c <_strtod_l+0x95c>)
 800c118:	f108 38ff 	add.w	r8, r8, #4294967295
 800c11c:	4598      	cmp	r8, r3
 800c11e:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800c122:	f280 80c7 	bge.w	800c2b4 <_strtod_l+0x874>
 800c126:	eba3 0308 	sub.w	r3, r3, r8
 800c12a:	2b1f      	cmp	r3, #31
 800c12c:	eba2 0203 	sub.w	r2, r2, r3
 800c130:	f04f 0101 	mov.w	r1, #1
 800c134:	f300 80b1 	bgt.w	800c29a <_strtod_l+0x85a>
 800c138:	fa01 f303 	lsl.w	r3, r1, r3
 800c13c:	930d      	str	r3, [sp, #52]	; 0x34
 800c13e:	2300      	movs	r3, #0
 800c140:	9308      	str	r3, [sp, #32]
 800c142:	eb09 0802 	add.w	r8, r9, r2
 800c146:	9b04      	ldr	r3, [sp, #16]
 800c148:	45c1      	cmp	r9, r8
 800c14a:	4417      	add	r7, r2
 800c14c:	441f      	add	r7, r3
 800c14e:	464b      	mov	r3, r9
 800c150:	bfa8      	it	ge
 800c152:	4643      	movge	r3, r8
 800c154:	42bb      	cmp	r3, r7
 800c156:	bfa8      	it	ge
 800c158:	463b      	movge	r3, r7
 800c15a:	2b00      	cmp	r3, #0
 800c15c:	bfc2      	ittt	gt
 800c15e:	eba8 0803 	subgt.w	r8, r8, r3
 800c162:	1aff      	subgt	r7, r7, r3
 800c164:	eba9 0903 	subgt.w	r9, r9, r3
 800c168:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c16a:	2b00      	cmp	r3, #0
 800c16c:	dd17      	ble.n	800c19e <_strtod_l+0x75e>
 800c16e:	4631      	mov	r1, r6
 800c170:	461a      	mov	r2, r3
 800c172:	4620      	mov	r0, r4
 800c174:	f001 ffa6 	bl	800e0c4 <__pow5mult>
 800c178:	4606      	mov	r6, r0
 800c17a:	2800      	cmp	r0, #0
 800c17c:	f43f aea8 	beq.w	800bed0 <_strtod_l+0x490>
 800c180:	4601      	mov	r1, r0
 800c182:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800c184:	4620      	mov	r0, r4
 800c186:	f001 fef3 	bl	800df70 <__multiply>
 800c18a:	900b      	str	r0, [sp, #44]	; 0x2c
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f43f ae9f 	beq.w	800bed0 <_strtod_l+0x490>
 800c192:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c194:	4620      	mov	r0, r4
 800c196:	f001 fdd3 	bl	800dd40 <_Bfree>
 800c19a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c19c:	9318      	str	r3, [sp, #96]	; 0x60
 800c19e:	f1b8 0f00 	cmp.w	r8, #0
 800c1a2:	f300 808c 	bgt.w	800c2be <_strtod_l+0x87e>
 800c1a6:	9b06      	ldr	r3, [sp, #24]
 800c1a8:	2b00      	cmp	r3, #0
 800c1aa:	dd08      	ble.n	800c1be <_strtod_l+0x77e>
 800c1ac:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800c1ae:	9905      	ldr	r1, [sp, #20]
 800c1b0:	4620      	mov	r0, r4
 800c1b2:	f001 ff87 	bl	800e0c4 <__pow5mult>
 800c1b6:	9005      	str	r0, [sp, #20]
 800c1b8:	2800      	cmp	r0, #0
 800c1ba:	f43f ae89 	beq.w	800bed0 <_strtod_l+0x490>
 800c1be:	2f00      	cmp	r7, #0
 800c1c0:	dd08      	ble.n	800c1d4 <_strtod_l+0x794>
 800c1c2:	9905      	ldr	r1, [sp, #20]
 800c1c4:	463a      	mov	r2, r7
 800c1c6:	4620      	mov	r0, r4
 800c1c8:	f001 ffd6 	bl	800e178 <__lshift>
 800c1cc:	9005      	str	r0, [sp, #20]
 800c1ce:	2800      	cmp	r0, #0
 800c1d0:	f43f ae7e 	beq.w	800bed0 <_strtod_l+0x490>
 800c1d4:	f1b9 0f00 	cmp.w	r9, #0
 800c1d8:	dd08      	ble.n	800c1ec <_strtod_l+0x7ac>
 800c1da:	4631      	mov	r1, r6
 800c1dc:	464a      	mov	r2, r9
 800c1de:	4620      	mov	r0, r4
 800c1e0:	f001 ffca 	bl	800e178 <__lshift>
 800c1e4:	4606      	mov	r6, r0
 800c1e6:	2800      	cmp	r0, #0
 800c1e8:	f43f ae72 	beq.w	800bed0 <_strtod_l+0x490>
 800c1ec:	9a05      	ldr	r2, [sp, #20]
 800c1ee:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c1f0:	4620      	mov	r0, r4
 800c1f2:	f002 f84d 	bl	800e290 <__mdiff>
 800c1f6:	4605      	mov	r5, r0
 800c1f8:	2800      	cmp	r0, #0
 800c1fa:	f43f ae69 	beq.w	800bed0 <_strtod_l+0x490>
 800c1fe:	68c3      	ldr	r3, [r0, #12]
 800c200:	930b      	str	r3, [sp, #44]	; 0x2c
 800c202:	2300      	movs	r3, #0
 800c204:	60c3      	str	r3, [r0, #12]
 800c206:	4631      	mov	r1, r6
 800c208:	f002 f826 	bl	800e258 <__mcmp>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	da60      	bge.n	800c2d2 <_strtod_l+0x892>
 800c210:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c212:	ea53 030a 	orrs.w	r3, r3, sl
 800c216:	f040 8082 	bne.w	800c31e <_strtod_l+0x8de>
 800c21a:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c21e:	2b00      	cmp	r3, #0
 800c220:	d17d      	bne.n	800c31e <_strtod_l+0x8de>
 800c222:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c226:	0d1b      	lsrs	r3, r3, #20
 800c228:	051b      	lsls	r3, r3, #20
 800c22a:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800c22e:	d976      	bls.n	800c31e <_strtod_l+0x8de>
 800c230:	696b      	ldr	r3, [r5, #20]
 800c232:	b913      	cbnz	r3, 800c23a <_strtod_l+0x7fa>
 800c234:	692b      	ldr	r3, [r5, #16]
 800c236:	2b01      	cmp	r3, #1
 800c238:	dd71      	ble.n	800c31e <_strtod_l+0x8de>
 800c23a:	4629      	mov	r1, r5
 800c23c:	2201      	movs	r2, #1
 800c23e:	4620      	mov	r0, r4
 800c240:	f001 ff9a 	bl	800e178 <__lshift>
 800c244:	4631      	mov	r1, r6
 800c246:	4605      	mov	r5, r0
 800c248:	f002 f806 	bl	800e258 <__mcmp>
 800c24c:	2800      	cmp	r0, #0
 800c24e:	dd66      	ble.n	800c31e <_strtod_l+0x8de>
 800c250:	9904      	ldr	r1, [sp, #16]
 800c252:	4a53      	ldr	r2, [pc, #332]	; (800c3a0 <_strtod_l+0x960>)
 800c254:	465b      	mov	r3, fp
 800c256:	2900      	cmp	r1, #0
 800c258:	f000 8081 	beq.w	800c35e <_strtod_l+0x91e>
 800c25c:	ea02 010b 	and.w	r1, r2, fp
 800c260:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800c264:	dc7b      	bgt.n	800c35e <_strtod_l+0x91e>
 800c266:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800c26a:	f77f aea9 	ble.w	800bfc0 <_strtod_l+0x580>
 800c26e:	4b4d      	ldr	r3, [pc, #308]	; (800c3a4 <_strtod_l+0x964>)
 800c270:	4650      	mov	r0, sl
 800c272:	4659      	mov	r1, fp
 800c274:	2200      	movs	r2, #0
 800c276:	f7f4 f9bf 	bl	80005f8 <__aeabi_dmul>
 800c27a:	460b      	mov	r3, r1
 800c27c:	4303      	orrs	r3, r0
 800c27e:	bf08      	it	eq
 800c280:	2322      	moveq	r3, #34	; 0x22
 800c282:	4682      	mov	sl, r0
 800c284:	468b      	mov	fp, r1
 800c286:	bf08      	it	eq
 800c288:	6023      	streq	r3, [r4, #0]
 800c28a:	e62b      	b.n	800bee4 <_strtod_l+0x4a4>
 800c28c:	f04f 32ff 	mov.w	r2, #4294967295
 800c290:	fa02 f303 	lsl.w	r3, r2, r3
 800c294:	ea03 0a0a 	and.w	sl, r3, sl
 800c298:	e6e3      	b.n	800c062 <_strtod_l+0x622>
 800c29a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800c29e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800c2a2:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800c2a6:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800c2aa:	fa01 f308 	lsl.w	r3, r1, r8
 800c2ae:	9308      	str	r3, [sp, #32]
 800c2b0:	910d      	str	r1, [sp, #52]	; 0x34
 800c2b2:	e746      	b.n	800c142 <_strtod_l+0x702>
 800c2b4:	2300      	movs	r3, #0
 800c2b6:	9308      	str	r3, [sp, #32]
 800c2b8:	2301      	movs	r3, #1
 800c2ba:	930d      	str	r3, [sp, #52]	; 0x34
 800c2bc:	e741      	b.n	800c142 <_strtod_l+0x702>
 800c2be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c2c0:	4642      	mov	r2, r8
 800c2c2:	4620      	mov	r0, r4
 800c2c4:	f001 ff58 	bl	800e178 <__lshift>
 800c2c8:	9018      	str	r0, [sp, #96]	; 0x60
 800c2ca:	2800      	cmp	r0, #0
 800c2cc:	f47f af6b 	bne.w	800c1a6 <_strtod_l+0x766>
 800c2d0:	e5fe      	b.n	800bed0 <_strtod_l+0x490>
 800c2d2:	465f      	mov	r7, fp
 800c2d4:	d16e      	bne.n	800c3b4 <_strtod_l+0x974>
 800c2d6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c2d8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c2dc:	b342      	cbz	r2, 800c330 <_strtod_l+0x8f0>
 800c2de:	4a32      	ldr	r2, [pc, #200]	; (800c3a8 <_strtod_l+0x968>)
 800c2e0:	4293      	cmp	r3, r2
 800c2e2:	d128      	bne.n	800c336 <_strtod_l+0x8f6>
 800c2e4:	9b04      	ldr	r3, [sp, #16]
 800c2e6:	4651      	mov	r1, sl
 800c2e8:	b1eb      	cbz	r3, 800c326 <_strtod_l+0x8e6>
 800c2ea:	4b2d      	ldr	r3, [pc, #180]	; (800c3a0 <_strtod_l+0x960>)
 800c2ec:	403b      	ands	r3, r7
 800c2ee:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c2f2:	f04f 32ff 	mov.w	r2, #4294967295
 800c2f6:	d819      	bhi.n	800c32c <_strtod_l+0x8ec>
 800c2f8:	0d1b      	lsrs	r3, r3, #20
 800c2fa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800c2fe:	fa02 f303 	lsl.w	r3, r2, r3
 800c302:	4299      	cmp	r1, r3
 800c304:	d117      	bne.n	800c336 <_strtod_l+0x8f6>
 800c306:	4b29      	ldr	r3, [pc, #164]	; (800c3ac <_strtod_l+0x96c>)
 800c308:	429f      	cmp	r7, r3
 800c30a:	d102      	bne.n	800c312 <_strtod_l+0x8d2>
 800c30c:	3101      	adds	r1, #1
 800c30e:	f43f addf 	beq.w	800bed0 <_strtod_l+0x490>
 800c312:	4b23      	ldr	r3, [pc, #140]	; (800c3a0 <_strtod_l+0x960>)
 800c314:	403b      	ands	r3, r7
 800c316:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800c31a:	f04f 0a00 	mov.w	sl, #0
 800c31e:	9b04      	ldr	r3, [sp, #16]
 800c320:	2b00      	cmp	r3, #0
 800c322:	d1a4      	bne.n	800c26e <_strtod_l+0x82e>
 800c324:	e5de      	b.n	800bee4 <_strtod_l+0x4a4>
 800c326:	f04f 33ff 	mov.w	r3, #4294967295
 800c32a:	e7ea      	b.n	800c302 <_strtod_l+0x8c2>
 800c32c:	4613      	mov	r3, r2
 800c32e:	e7e8      	b.n	800c302 <_strtod_l+0x8c2>
 800c330:	ea53 030a 	orrs.w	r3, r3, sl
 800c334:	d08c      	beq.n	800c250 <_strtod_l+0x810>
 800c336:	9b08      	ldr	r3, [sp, #32]
 800c338:	b1db      	cbz	r3, 800c372 <_strtod_l+0x932>
 800c33a:	423b      	tst	r3, r7
 800c33c:	d0ef      	beq.n	800c31e <_strtod_l+0x8de>
 800c33e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c340:	9a04      	ldr	r2, [sp, #16]
 800c342:	4650      	mov	r0, sl
 800c344:	4659      	mov	r1, fp
 800c346:	b1c3      	cbz	r3, 800c37a <_strtod_l+0x93a>
 800c348:	f7ff fb5c 	bl	800ba04 <sulp>
 800c34c:	4602      	mov	r2, r0
 800c34e:	460b      	mov	r3, r1
 800c350:	ec51 0b18 	vmov	r0, r1, d8
 800c354:	f7f3 ff9a 	bl	800028c <__adddf3>
 800c358:	4682      	mov	sl, r0
 800c35a:	468b      	mov	fp, r1
 800c35c:	e7df      	b.n	800c31e <_strtod_l+0x8de>
 800c35e:	4013      	ands	r3, r2
 800c360:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800c364:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800c368:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800c36c:	f04f 3aff 	mov.w	sl, #4294967295
 800c370:	e7d5      	b.n	800c31e <_strtod_l+0x8de>
 800c372:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c374:	ea13 0f0a 	tst.w	r3, sl
 800c378:	e7e0      	b.n	800c33c <_strtod_l+0x8fc>
 800c37a:	f7ff fb43 	bl	800ba04 <sulp>
 800c37e:	4602      	mov	r2, r0
 800c380:	460b      	mov	r3, r1
 800c382:	ec51 0b18 	vmov	r0, r1, d8
 800c386:	f7f3 ff7f 	bl	8000288 <__aeabi_dsub>
 800c38a:	2200      	movs	r2, #0
 800c38c:	2300      	movs	r3, #0
 800c38e:	4682      	mov	sl, r0
 800c390:	468b      	mov	fp, r1
 800c392:	f7f4 fb99 	bl	8000ac8 <__aeabi_dcmpeq>
 800c396:	2800      	cmp	r0, #0
 800c398:	d0c1      	beq.n	800c31e <_strtod_l+0x8de>
 800c39a:	e611      	b.n	800bfc0 <_strtod_l+0x580>
 800c39c:	fffffc02 	.word	0xfffffc02
 800c3a0:	7ff00000 	.word	0x7ff00000
 800c3a4:	39500000 	.word	0x39500000
 800c3a8:	000fffff 	.word	0x000fffff
 800c3ac:	7fefffff 	.word	0x7fefffff
 800c3b0:	0800f958 	.word	0x0800f958
 800c3b4:	4631      	mov	r1, r6
 800c3b6:	4628      	mov	r0, r5
 800c3b8:	f002 f8cc 	bl	800e554 <__ratio>
 800c3bc:	ec59 8b10 	vmov	r8, r9, d0
 800c3c0:	ee10 0a10 	vmov	r0, s0
 800c3c4:	2200      	movs	r2, #0
 800c3c6:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800c3ca:	4649      	mov	r1, r9
 800c3cc:	f7f4 fb90 	bl	8000af0 <__aeabi_dcmple>
 800c3d0:	2800      	cmp	r0, #0
 800c3d2:	d07a      	beq.n	800c4ca <_strtod_l+0xa8a>
 800c3d4:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c3d6:	2b00      	cmp	r3, #0
 800c3d8:	d04a      	beq.n	800c470 <_strtod_l+0xa30>
 800c3da:	4b95      	ldr	r3, [pc, #596]	; (800c630 <_strtod_l+0xbf0>)
 800c3dc:	2200      	movs	r2, #0
 800c3de:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c3e2:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800c630 <_strtod_l+0xbf0>
 800c3e6:	f04f 0800 	mov.w	r8, #0
 800c3ea:	4b92      	ldr	r3, [pc, #584]	; (800c634 <_strtod_l+0xbf4>)
 800c3ec:	403b      	ands	r3, r7
 800c3ee:	930d      	str	r3, [sp, #52]	; 0x34
 800c3f0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c3f2:	4b91      	ldr	r3, [pc, #580]	; (800c638 <_strtod_l+0xbf8>)
 800c3f4:	429a      	cmp	r2, r3
 800c3f6:	f040 80b0 	bne.w	800c55a <_strtod_l+0xb1a>
 800c3fa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c3fe:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800c402:	ec4b ab10 	vmov	d0, sl, fp
 800c406:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c40a:	f001 ffcb 	bl	800e3a4 <__ulp>
 800c40e:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c412:	ec53 2b10 	vmov	r2, r3, d0
 800c416:	f7f4 f8ef 	bl	80005f8 <__aeabi_dmul>
 800c41a:	4652      	mov	r2, sl
 800c41c:	465b      	mov	r3, fp
 800c41e:	f7f3 ff35 	bl	800028c <__adddf3>
 800c422:	460b      	mov	r3, r1
 800c424:	4983      	ldr	r1, [pc, #524]	; (800c634 <_strtod_l+0xbf4>)
 800c426:	4a85      	ldr	r2, [pc, #532]	; (800c63c <_strtod_l+0xbfc>)
 800c428:	4019      	ands	r1, r3
 800c42a:	4291      	cmp	r1, r2
 800c42c:	4682      	mov	sl, r0
 800c42e:	d960      	bls.n	800c4f2 <_strtod_l+0xab2>
 800c430:	ee18 3a90 	vmov	r3, s17
 800c434:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800c438:	4293      	cmp	r3, r2
 800c43a:	d104      	bne.n	800c446 <_strtod_l+0xa06>
 800c43c:	ee18 3a10 	vmov	r3, s16
 800c440:	3301      	adds	r3, #1
 800c442:	f43f ad45 	beq.w	800bed0 <_strtod_l+0x490>
 800c446:	f8df b200 	ldr.w	fp, [pc, #512]	; 800c648 <_strtod_l+0xc08>
 800c44a:	f04f 3aff 	mov.w	sl, #4294967295
 800c44e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800c450:	4620      	mov	r0, r4
 800c452:	f001 fc75 	bl	800dd40 <_Bfree>
 800c456:	9905      	ldr	r1, [sp, #20]
 800c458:	4620      	mov	r0, r4
 800c45a:	f001 fc71 	bl	800dd40 <_Bfree>
 800c45e:	4631      	mov	r1, r6
 800c460:	4620      	mov	r0, r4
 800c462:	f001 fc6d 	bl	800dd40 <_Bfree>
 800c466:	4629      	mov	r1, r5
 800c468:	4620      	mov	r0, r4
 800c46a:	f001 fc69 	bl	800dd40 <_Bfree>
 800c46e:	e61a      	b.n	800c0a6 <_strtod_l+0x666>
 800c470:	f1ba 0f00 	cmp.w	sl, #0
 800c474:	d11b      	bne.n	800c4ae <_strtod_l+0xa6e>
 800c476:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c47a:	b9f3      	cbnz	r3, 800c4ba <_strtod_l+0xa7a>
 800c47c:	4b6c      	ldr	r3, [pc, #432]	; (800c630 <_strtod_l+0xbf0>)
 800c47e:	2200      	movs	r2, #0
 800c480:	4640      	mov	r0, r8
 800c482:	4649      	mov	r1, r9
 800c484:	f7f4 fb2a 	bl	8000adc <__aeabi_dcmplt>
 800c488:	b9d0      	cbnz	r0, 800c4c0 <_strtod_l+0xa80>
 800c48a:	4640      	mov	r0, r8
 800c48c:	4649      	mov	r1, r9
 800c48e:	4b6c      	ldr	r3, [pc, #432]	; (800c640 <_strtod_l+0xc00>)
 800c490:	2200      	movs	r2, #0
 800c492:	f7f4 f8b1 	bl	80005f8 <__aeabi_dmul>
 800c496:	4680      	mov	r8, r0
 800c498:	4689      	mov	r9, r1
 800c49a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800c49e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800c4a2:	9315      	str	r3, [sp, #84]	; 0x54
 800c4a4:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800c4a8:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c4ac:	e79d      	b.n	800c3ea <_strtod_l+0x9aa>
 800c4ae:	f1ba 0f01 	cmp.w	sl, #1
 800c4b2:	d102      	bne.n	800c4ba <_strtod_l+0xa7a>
 800c4b4:	2f00      	cmp	r7, #0
 800c4b6:	f43f ad83 	beq.w	800bfc0 <_strtod_l+0x580>
 800c4ba:	4b62      	ldr	r3, [pc, #392]	; (800c644 <_strtod_l+0xc04>)
 800c4bc:	2200      	movs	r2, #0
 800c4be:	e78e      	b.n	800c3de <_strtod_l+0x99e>
 800c4c0:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800c640 <_strtod_l+0xc00>
 800c4c4:	f04f 0800 	mov.w	r8, #0
 800c4c8:	e7e7      	b.n	800c49a <_strtod_l+0xa5a>
 800c4ca:	4b5d      	ldr	r3, [pc, #372]	; (800c640 <_strtod_l+0xc00>)
 800c4cc:	4640      	mov	r0, r8
 800c4ce:	4649      	mov	r1, r9
 800c4d0:	2200      	movs	r2, #0
 800c4d2:	f7f4 f891 	bl	80005f8 <__aeabi_dmul>
 800c4d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c4d8:	4680      	mov	r8, r0
 800c4da:	4689      	mov	r9, r1
 800c4dc:	b933      	cbnz	r3, 800c4ec <_strtod_l+0xaac>
 800c4de:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c4e2:	900e      	str	r0, [sp, #56]	; 0x38
 800c4e4:	930f      	str	r3, [sp, #60]	; 0x3c
 800c4e6:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800c4ea:	e7dd      	b.n	800c4a8 <_strtod_l+0xa68>
 800c4ec:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800c4f0:	e7f9      	b.n	800c4e6 <_strtod_l+0xaa6>
 800c4f2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800c4f6:	9b04      	ldr	r3, [sp, #16]
 800c4f8:	2b00      	cmp	r3, #0
 800c4fa:	d1a8      	bne.n	800c44e <_strtod_l+0xa0e>
 800c4fc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c500:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c502:	0d1b      	lsrs	r3, r3, #20
 800c504:	051b      	lsls	r3, r3, #20
 800c506:	429a      	cmp	r2, r3
 800c508:	d1a1      	bne.n	800c44e <_strtod_l+0xa0e>
 800c50a:	4640      	mov	r0, r8
 800c50c:	4649      	mov	r1, r9
 800c50e:	f7f4 fbd3 	bl	8000cb8 <__aeabi_d2lz>
 800c512:	f7f4 f843 	bl	800059c <__aeabi_l2d>
 800c516:	4602      	mov	r2, r0
 800c518:	460b      	mov	r3, r1
 800c51a:	4640      	mov	r0, r8
 800c51c:	4649      	mov	r1, r9
 800c51e:	f7f3 feb3 	bl	8000288 <__aeabi_dsub>
 800c522:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800c524:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c528:	ea43 030a 	orr.w	r3, r3, sl
 800c52c:	4313      	orrs	r3, r2
 800c52e:	4680      	mov	r8, r0
 800c530:	4689      	mov	r9, r1
 800c532:	d055      	beq.n	800c5e0 <_strtod_l+0xba0>
 800c534:	a336      	add	r3, pc, #216	; (adr r3, 800c610 <_strtod_l+0xbd0>)
 800c536:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c53a:	f7f4 facf 	bl	8000adc <__aeabi_dcmplt>
 800c53e:	2800      	cmp	r0, #0
 800c540:	f47f acd0 	bne.w	800bee4 <_strtod_l+0x4a4>
 800c544:	a334      	add	r3, pc, #208	; (adr r3, 800c618 <_strtod_l+0xbd8>)
 800c546:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c54a:	4640      	mov	r0, r8
 800c54c:	4649      	mov	r1, r9
 800c54e:	f7f4 fae3 	bl	8000b18 <__aeabi_dcmpgt>
 800c552:	2800      	cmp	r0, #0
 800c554:	f43f af7b 	beq.w	800c44e <_strtod_l+0xa0e>
 800c558:	e4c4      	b.n	800bee4 <_strtod_l+0x4a4>
 800c55a:	9b04      	ldr	r3, [sp, #16]
 800c55c:	b333      	cbz	r3, 800c5ac <_strtod_l+0xb6c>
 800c55e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c560:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800c564:	d822      	bhi.n	800c5ac <_strtod_l+0xb6c>
 800c566:	a32e      	add	r3, pc, #184	; (adr r3, 800c620 <_strtod_l+0xbe0>)
 800c568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c56c:	4640      	mov	r0, r8
 800c56e:	4649      	mov	r1, r9
 800c570:	f7f4 fabe 	bl	8000af0 <__aeabi_dcmple>
 800c574:	b1a0      	cbz	r0, 800c5a0 <_strtod_l+0xb60>
 800c576:	4649      	mov	r1, r9
 800c578:	4640      	mov	r0, r8
 800c57a:	f7f4 fb15 	bl	8000ba8 <__aeabi_d2uiz>
 800c57e:	2801      	cmp	r0, #1
 800c580:	bf38      	it	cc
 800c582:	2001      	movcc	r0, #1
 800c584:	f7f3 ffbe 	bl	8000504 <__aeabi_ui2d>
 800c588:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c58a:	4680      	mov	r8, r0
 800c58c:	4689      	mov	r9, r1
 800c58e:	bb23      	cbnz	r3, 800c5da <_strtod_l+0xb9a>
 800c590:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800c594:	9010      	str	r0, [sp, #64]	; 0x40
 800c596:	9311      	str	r3, [sp, #68]	; 0x44
 800c598:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800c59c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800c5a0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c5a2:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800c5a4:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800c5a8:	1a9b      	subs	r3, r3, r2
 800c5aa:	9309      	str	r3, [sp, #36]	; 0x24
 800c5ac:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5b0:	eeb0 0a48 	vmov.f32	s0, s16
 800c5b4:	eef0 0a68 	vmov.f32	s1, s17
 800c5b8:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800c5bc:	f001 fef2 	bl	800e3a4 <__ulp>
 800c5c0:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800c5c4:	ec53 2b10 	vmov	r2, r3, d0
 800c5c8:	f7f4 f816 	bl	80005f8 <__aeabi_dmul>
 800c5cc:	ec53 2b18 	vmov	r2, r3, d8
 800c5d0:	f7f3 fe5c 	bl	800028c <__adddf3>
 800c5d4:	4682      	mov	sl, r0
 800c5d6:	468b      	mov	fp, r1
 800c5d8:	e78d      	b.n	800c4f6 <_strtod_l+0xab6>
 800c5da:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800c5de:	e7db      	b.n	800c598 <_strtod_l+0xb58>
 800c5e0:	a311      	add	r3, pc, #68	; (adr r3, 800c628 <_strtod_l+0xbe8>)
 800c5e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800c5e6:	f7f4 fa79 	bl	8000adc <__aeabi_dcmplt>
 800c5ea:	e7b2      	b.n	800c552 <_strtod_l+0xb12>
 800c5ec:	2300      	movs	r3, #0
 800c5ee:	930a      	str	r3, [sp, #40]	; 0x28
 800c5f0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800c5f2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800c5f4:	6013      	str	r3, [r2, #0]
 800c5f6:	f7ff ba6b 	b.w	800bad0 <_strtod_l+0x90>
 800c5fa:	2a65      	cmp	r2, #101	; 0x65
 800c5fc:	f43f ab5f 	beq.w	800bcbe <_strtod_l+0x27e>
 800c600:	2a45      	cmp	r2, #69	; 0x45
 800c602:	f43f ab5c 	beq.w	800bcbe <_strtod_l+0x27e>
 800c606:	2301      	movs	r3, #1
 800c608:	f7ff bb94 	b.w	800bd34 <_strtod_l+0x2f4>
 800c60c:	f3af 8000 	nop.w
 800c610:	94a03595 	.word	0x94a03595
 800c614:	3fdfffff 	.word	0x3fdfffff
 800c618:	35afe535 	.word	0x35afe535
 800c61c:	3fe00000 	.word	0x3fe00000
 800c620:	ffc00000 	.word	0xffc00000
 800c624:	41dfffff 	.word	0x41dfffff
 800c628:	94a03595 	.word	0x94a03595
 800c62c:	3fcfffff 	.word	0x3fcfffff
 800c630:	3ff00000 	.word	0x3ff00000
 800c634:	7ff00000 	.word	0x7ff00000
 800c638:	7fe00000 	.word	0x7fe00000
 800c63c:	7c9fffff 	.word	0x7c9fffff
 800c640:	3fe00000 	.word	0x3fe00000
 800c644:	bff00000 	.word	0xbff00000
 800c648:	7fefffff 	.word	0x7fefffff

0800c64c <_strtod_r>:
 800c64c:	4b01      	ldr	r3, [pc, #4]	; (800c654 <_strtod_r+0x8>)
 800c64e:	f7ff b9f7 	b.w	800ba40 <_strtod_l>
 800c652:	bf00      	nop
 800c654:	20000088 	.word	0x20000088

0800c658 <strtod>:
 800c658:	460a      	mov	r2, r1
 800c65a:	4601      	mov	r1, r0
 800c65c:	4802      	ldr	r0, [pc, #8]	; (800c668 <strtod+0x10>)
 800c65e:	4b03      	ldr	r3, [pc, #12]	; (800c66c <strtod+0x14>)
 800c660:	6800      	ldr	r0, [r0, #0]
 800c662:	f7ff b9ed 	b.w	800ba40 <_strtod_l>
 800c666:	bf00      	nop
 800c668:	20000020 	.word	0x20000020
 800c66c:	20000088 	.word	0x20000088

0800c670 <strtok>:
 800c670:	4b16      	ldr	r3, [pc, #88]	; (800c6cc <strtok+0x5c>)
 800c672:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c674:	681e      	ldr	r6, [r3, #0]
 800c676:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800c678:	4605      	mov	r5, r0
 800c67a:	b9fc      	cbnz	r4, 800c6bc <strtok+0x4c>
 800c67c:	2050      	movs	r0, #80	; 0x50
 800c67e:	9101      	str	r1, [sp, #4]
 800c680:	f001 faf6 	bl	800dc70 <malloc>
 800c684:	9901      	ldr	r1, [sp, #4]
 800c686:	65b0      	str	r0, [r6, #88]	; 0x58
 800c688:	4602      	mov	r2, r0
 800c68a:	b920      	cbnz	r0, 800c696 <strtok+0x26>
 800c68c:	4b10      	ldr	r3, [pc, #64]	; (800c6d0 <strtok+0x60>)
 800c68e:	4811      	ldr	r0, [pc, #68]	; (800c6d4 <strtok+0x64>)
 800c690:	2157      	movs	r1, #87	; 0x57
 800c692:	f000 f8cd 	bl	800c830 <__assert_func>
 800c696:	e9c0 4400 	strd	r4, r4, [r0]
 800c69a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800c69e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800c6a2:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800c6a6:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800c6aa:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800c6ae:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800c6b2:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800c6b6:	6184      	str	r4, [r0, #24]
 800c6b8:	7704      	strb	r4, [r0, #28]
 800c6ba:	6244      	str	r4, [r0, #36]	; 0x24
 800c6bc:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800c6be:	2301      	movs	r3, #1
 800c6c0:	4628      	mov	r0, r5
 800c6c2:	b002      	add	sp, #8
 800c6c4:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800c6c8:	f000 b806 	b.w	800c6d8 <__strtok_r>
 800c6cc:	20000020 	.word	0x20000020
 800c6d0:	0800f980 	.word	0x0800f980
 800c6d4:	0800f997 	.word	0x0800f997

0800c6d8 <__strtok_r>:
 800c6d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 800c6da:	b908      	cbnz	r0, 800c6e0 <__strtok_r+0x8>
 800c6dc:	6810      	ldr	r0, [r2, #0]
 800c6de:	b188      	cbz	r0, 800c704 <__strtok_r+0x2c>
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	4620      	mov	r0, r4
 800c6e4:	f814 5b01 	ldrb.w	r5, [r4], #1
 800c6e8:	460f      	mov	r7, r1
 800c6ea:	f817 6b01 	ldrb.w	r6, [r7], #1
 800c6ee:	b91e      	cbnz	r6, 800c6f8 <__strtok_r+0x20>
 800c6f0:	b965      	cbnz	r5, 800c70c <__strtok_r+0x34>
 800c6f2:	6015      	str	r5, [r2, #0]
 800c6f4:	4628      	mov	r0, r5
 800c6f6:	e005      	b.n	800c704 <__strtok_r+0x2c>
 800c6f8:	42b5      	cmp	r5, r6
 800c6fa:	d1f6      	bne.n	800c6ea <__strtok_r+0x12>
 800c6fc:	2b00      	cmp	r3, #0
 800c6fe:	d1f0      	bne.n	800c6e2 <__strtok_r+0xa>
 800c700:	6014      	str	r4, [r2, #0]
 800c702:	7003      	strb	r3, [r0, #0]
 800c704:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800c706:	461c      	mov	r4, r3
 800c708:	e00c      	b.n	800c724 <__strtok_r+0x4c>
 800c70a:	b915      	cbnz	r5, 800c712 <__strtok_r+0x3a>
 800c70c:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c710:	460e      	mov	r6, r1
 800c712:	f816 5b01 	ldrb.w	r5, [r6], #1
 800c716:	42ab      	cmp	r3, r5
 800c718:	d1f7      	bne.n	800c70a <__strtok_r+0x32>
 800c71a:	2b00      	cmp	r3, #0
 800c71c:	d0f3      	beq.n	800c706 <__strtok_r+0x2e>
 800c71e:	2300      	movs	r3, #0
 800c720:	f804 3c01 	strb.w	r3, [r4, #-1]
 800c724:	6014      	str	r4, [r2, #0]
 800c726:	e7ed      	b.n	800c704 <__strtok_r+0x2c>

0800c728 <_strtol_l.constprop.0>:
 800c728:	2b01      	cmp	r3, #1
 800c72a:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c72e:	d001      	beq.n	800c734 <_strtol_l.constprop.0+0xc>
 800c730:	2b24      	cmp	r3, #36	; 0x24
 800c732:	d906      	bls.n	800c742 <_strtol_l.constprop.0+0x1a>
 800c734:	f7fe fa94 	bl	800ac60 <__errno>
 800c738:	2316      	movs	r3, #22
 800c73a:	6003      	str	r3, [r0, #0]
 800c73c:	2000      	movs	r0, #0
 800c73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c742:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800c828 <_strtol_l.constprop.0+0x100>
 800c746:	460d      	mov	r5, r1
 800c748:	462e      	mov	r6, r5
 800c74a:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c74e:	f814 700c 	ldrb.w	r7, [r4, ip]
 800c752:	f017 0708 	ands.w	r7, r7, #8
 800c756:	d1f7      	bne.n	800c748 <_strtol_l.constprop.0+0x20>
 800c758:	2c2d      	cmp	r4, #45	; 0x2d
 800c75a:	d132      	bne.n	800c7c2 <_strtol_l.constprop.0+0x9a>
 800c75c:	782c      	ldrb	r4, [r5, #0]
 800c75e:	2701      	movs	r7, #1
 800c760:	1cb5      	adds	r5, r6, #2
 800c762:	2b00      	cmp	r3, #0
 800c764:	d05b      	beq.n	800c81e <_strtol_l.constprop.0+0xf6>
 800c766:	2b10      	cmp	r3, #16
 800c768:	d109      	bne.n	800c77e <_strtol_l.constprop.0+0x56>
 800c76a:	2c30      	cmp	r4, #48	; 0x30
 800c76c:	d107      	bne.n	800c77e <_strtol_l.constprop.0+0x56>
 800c76e:	782c      	ldrb	r4, [r5, #0]
 800c770:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800c774:	2c58      	cmp	r4, #88	; 0x58
 800c776:	d14d      	bne.n	800c814 <_strtol_l.constprop.0+0xec>
 800c778:	786c      	ldrb	r4, [r5, #1]
 800c77a:	2310      	movs	r3, #16
 800c77c:	3502      	adds	r5, #2
 800c77e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800c782:	f108 38ff 	add.w	r8, r8, #4294967295
 800c786:	f04f 0c00 	mov.w	ip, #0
 800c78a:	fbb8 f9f3 	udiv	r9, r8, r3
 800c78e:	4666      	mov	r6, ip
 800c790:	fb03 8a19 	mls	sl, r3, r9, r8
 800c794:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800c798:	f1be 0f09 	cmp.w	lr, #9
 800c79c:	d816      	bhi.n	800c7cc <_strtol_l.constprop.0+0xa4>
 800c79e:	4674      	mov	r4, lr
 800c7a0:	42a3      	cmp	r3, r4
 800c7a2:	dd24      	ble.n	800c7ee <_strtol_l.constprop.0+0xc6>
 800c7a4:	f1bc 0f00 	cmp.w	ip, #0
 800c7a8:	db1e      	blt.n	800c7e8 <_strtol_l.constprop.0+0xc0>
 800c7aa:	45b1      	cmp	r9, r6
 800c7ac:	d31c      	bcc.n	800c7e8 <_strtol_l.constprop.0+0xc0>
 800c7ae:	d101      	bne.n	800c7b4 <_strtol_l.constprop.0+0x8c>
 800c7b0:	45a2      	cmp	sl, r4
 800c7b2:	db19      	blt.n	800c7e8 <_strtol_l.constprop.0+0xc0>
 800c7b4:	fb06 4603 	mla	r6, r6, r3, r4
 800c7b8:	f04f 0c01 	mov.w	ip, #1
 800c7bc:	f815 4b01 	ldrb.w	r4, [r5], #1
 800c7c0:	e7e8      	b.n	800c794 <_strtol_l.constprop.0+0x6c>
 800c7c2:	2c2b      	cmp	r4, #43	; 0x2b
 800c7c4:	bf04      	itt	eq
 800c7c6:	782c      	ldrbeq	r4, [r5, #0]
 800c7c8:	1cb5      	addeq	r5, r6, #2
 800c7ca:	e7ca      	b.n	800c762 <_strtol_l.constprop.0+0x3a>
 800c7cc:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800c7d0:	f1be 0f19 	cmp.w	lr, #25
 800c7d4:	d801      	bhi.n	800c7da <_strtol_l.constprop.0+0xb2>
 800c7d6:	3c37      	subs	r4, #55	; 0x37
 800c7d8:	e7e2      	b.n	800c7a0 <_strtol_l.constprop.0+0x78>
 800c7da:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800c7de:	f1be 0f19 	cmp.w	lr, #25
 800c7e2:	d804      	bhi.n	800c7ee <_strtol_l.constprop.0+0xc6>
 800c7e4:	3c57      	subs	r4, #87	; 0x57
 800c7e6:	e7db      	b.n	800c7a0 <_strtol_l.constprop.0+0x78>
 800c7e8:	f04f 3cff 	mov.w	ip, #4294967295
 800c7ec:	e7e6      	b.n	800c7bc <_strtol_l.constprop.0+0x94>
 800c7ee:	f1bc 0f00 	cmp.w	ip, #0
 800c7f2:	da05      	bge.n	800c800 <_strtol_l.constprop.0+0xd8>
 800c7f4:	2322      	movs	r3, #34	; 0x22
 800c7f6:	6003      	str	r3, [r0, #0]
 800c7f8:	4646      	mov	r6, r8
 800c7fa:	b942      	cbnz	r2, 800c80e <_strtol_l.constprop.0+0xe6>
 800c7fc:	4630      	mov	r0, r6
 800c7fe:	e79e      	b.n	800c73e <_strtol_l.constprop.0+0x16>
 800c800:	b107      	cbz	r7, 800c804 <_strtol_l.constprop.0+0xdc>
 800c802:	4276      	negs	r6, r6
 800c804:	2a00      	cmp	r2, #0
 800c806:	d0f9      	beq.n	800c7fc <_strtol_l.constprop.0+0xd4>
 800c808:	f1bc 0f00 	cmp.w	ip, #0
 800c80c:	d000      	beq.n	800c810 <_strtol_l.constprop.0+0xe8>
 800c80e:	1e69      	subs	r1, r5, #1
 800c810:	6011      	str	r1, [r2, #0]
 800c812:	e7f3      	b.n	800c7fc <_strtol_l.constprop.0+0xd4>
 800c814:	2430      	movs	r4, #48	; 0x30
 800c816:	2b00      	cmp	r3, #0
 800c818:	d1b1      	bne.n	800c77e <_strtol_l.constprop.0+0x56>
 800c81a:	2308      	movs	r3, #8
 800c81c:	e7af      	b.n	800c77e <_strtol_l.constprop.0+0x56>
 800c81e:	2c30      	cmp	r4, #48	; 0x30
 800c820:	d0a5      	beq.n	800c76e <_strtol_l.constprop.0+0x46>
 800c822:	230a      	movs	r3, #10
 800c824:	e7ab      	b.n	800c77e <_strtol_l.constprop.0+0x56>
 800c826:	bf00      	nop
 800c828:	0800fa31 	.word	0x0800fa31

0800c82c <_strtol_r>:
 800c82c:	f7ff bf7c 	b.w	800c728 <_strtol_l.constprop.0>

0800c830 <__assert_func>:
 800c830:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800c832:	4614      	mov	r4, r2
 800c834:	461a      	mov	r2, r3
 800c836:	4b09      	ldr	r3, [pc, #36]	; (800c85c <__assert_func+0x2c>)
 800c838:	681b      	ldr	r3, [r3, #0]
 800c83a:	4605      	mov	r5, r0
 800c83c:	68d8      	ldr	r0, [r3, #12]
 800c83e:	b14c      	cbz	r4, 800c854 <__assert_func+0x24>
 800c840:	4b07      	ldr	r3, [pc, #28]	; (800c860 <__assert_func+0x30>)
 800c842:	9100      	str	r1, [sp, #0]
 800c844:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800c848:	4906      	ldr	r1, [pc, #24]	; (800c864 <__assert_func+0x34>)
 800c84a:	462b      	mov	r3, r5
 800c84c:	f000 fe8a 	bl	800d564 <fiprintf>
 800c850:	f002 fba0 	bl	800ef94 <abort>
 800c854:	4b04      	ldr	r3, [pc, #16]	; (800c868 <__assert_func+0x38>)
 800c856:	461c      	mov	r4, r3
 800c858:	e7f3      	b.n	800c842 <__assert_func+0x12>
 800c85a:	bf00      	nop
 800c85c:	20000020 	.word	0x20000020
 800c860:	0800f9f4 	.word	0x0800f9f4
 800c864:	0800fa01 	.word	0x0800fa01
 800c868:	0800fa2f 	.word	0x0800fa2f

0800c86c <quorem>:
 800c86c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c870:	6903      	ldr	r3, [r0, #16]
 800c872:	690c      	ldr	r4, [r1, #16]
 800c874:	42a3      	cmp	r3, r4
 800c876:	4607      	mov	r7, r0
 800c878:	f2c0 8081 	blt.w	800c97e <quorem+0x112>
 800c87c:	3c01      	subs	r4, #1
 800c87e:	f101 0814 	add.w	r8, r1, #20
 800c882:	f100 0514 	add.w	r5, r0, #20
 800c886:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c88a:	9301      	str	r3, [sp, #4]
 800c88c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800c890:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c894:	3301      	adds	r3, #1
 800c896:	429a      	cmp	r2, r3
 800c898:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800c89c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800c8a0:	fbb2 f6f3 	udiv	r6, r2, r3
 800c8a4:	d331      	bcc.n	800c90a <quorem+0x9e>
 800c8a6:	f04f 0e00 	mov.w	lr, #0
 800c8aa:	4640      	mov	r0, r8
 800c8ac:	46ac      	mov	ip, r5
 800c8ae:	46f2      	mov	sl, lr
 800c8b0:	f850 2b04 	ldr.w	r2, [r0], #4
 800c8b4:	b293      	uxth	r3, r2
 800c8b6:	fb06 e303 	mla	r3, r6, r3, lr
 800c8ba:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800c8be:	b29b      	uxth	r3, r3
 800c8c0:	ebaa 0303 	sub.w	r3, sl, r3
 800c8c4:	f8dc a000 	ldr.w	sl, [ip]
 800c8c8:	0c12      	lsrs	r2, r2, #16
 800c8ca:	fa13 f38a 	uxtah	r3, r3, sl
 800c8ce:	fb06 e202 	mla	r2, r6, r2, lr
 800c8d2:	9300      	str	r3, [sp, #0]
 800c8d4:	9b00      	ldr	r3, [sp, #0]
 800c8d6:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800c8da:	b292      	uxth	r2, r2
 800c8dc:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800c8e0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c8e4:	f8bd 3000 	ldrh.w	r3, [sp]
 800c8e8:	4581      	cmp	r9, r0
 800c8ea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c8ee:	f84c 3b04 	str.w	r3, [ip], #4
 800c8f2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800c8f6:	d2db      	bcs.n	800c8b0 <quorem+0x44>
 800c8f8:	f855 300b 	ldr.w	r3, [r5, fp]
 800c8fc:	b92b      	cbnz	r3, 800c90a <quorem+0x9e>
 800c8fe:	9b01      	ldr	r3, [sp, #4]
 800c900:	3b04      	subs	r3, #4
 800c902:	429d      	cmp	r5, r3
 800c904:	461a      	mov	r2, r3
 800c906:	d32e      	bcc.n	800c966 <quorem+0xfa>
 800c908:	613c      	str	r4, [r7, #16]
 800c90a:	4638      	mov	r0, r7
 800c90c:	f001 fca4 	bl	800e258 <__mcmp>
 800c910:	2800      	cmp	r0, #0
 800c912:	db24      	blt.n	800c95e <quorem+0xf2>
 800c914:	3601      	adds	r6, #1
 800c916:	4628      	mov	r0, r5
 800c918:	f04f 0c00 	mov.w	ip, #0
 800c91c:	f858 2b04 	ldr.w	r2, [r8], #4
 800c920:	f8d0 e000 	ldr.w	lr, [r0]
 800c924:	b293      	uxth	r3, r2
 800c926:	ebac 0303 	sub.w	r3, ip, r3
 800c92a:	0c12      	lsrs	r2, r2, #16
 800c92c:	fa13 f38e 	uxtah	r3, r3, lr
 800c930:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800c934:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800c938:	b29b      	uxth	r3, r3
 800c93a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800c93e:	45c1      	cmp	r9, r8
 800c940:	f840 3b04 	str.w	r3, [r0], #4
 800c944:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800c948:	d2e8      	bcs.n	800c91c <quorem+0xb0>
 800c94a:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800c94e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800c952:	b922      	cbnz	r2, 800c95e <quorem+0xf2>
 800c954:	3b04      	subs	r3, #4
 800c956:	429d      	cmp	r5, r3
 800c958:	461a      	mov	r2, r3
 800c95a:	d30a      	bcc.n	800c972 <quorem+0x106>
 800c95c:	613c      	str	r4, [r7, #16]
 800c95e:	4630      	mov	r0, r6
 800c960:	b003      	add	sp, #12
 800c962:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c966:	6812      	ldr	r2, [r2, #0]
 800c968:	3b04      	subs	r3, #4
 800c96a:	2a00      	cmp	r2, #0
 800c96c:	d1cc      	bne.n	800c908 <quorem+0x9c>
 800c96e:	3c01      	subs	r4, #1
 800c970:	e7c7      	b.n	800c902 <quorem+0x96>
 800c972:	6812      	ldr	r2, [r2, #0]
 800c974:	3b04      	subs	r3, #4
 800c976:	2a00      	cmp	r2, #0
 800c978:	d1f0      	bne.n	800c95c <quorem+0xf0>
 800c97a:	3c01      	subs	r4, #1
 800c97c:	e7eb      	b.n	800c956 <quorem+0xea>
 800c97e:	2000      	movs	r0, #0
 800c980:	e7ee      	b.n	800c960 <quorem+0xf4>
 800c982:	0000      	movs	r0, r0
 800c984:	0000      	movs	r0, r0
	...

0800c988 <_dtoa_r>:
 800c988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c98c:	ed2d 8b04 	vpush	{d8-d9}
 800c990:	ec57 6b10 	vmov	r6, r7, d0
 800c994:	b093      	sub	sp, #76	; 0x4c
 800c996:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800c998:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800c99c:	9106      	str	r1, [sp, #24]
 800c99e:	ee10 aa10 	vmov	sl, s0
 800c9a2:	4604      	mov	r4, r0
 800c9a4:	9209      	str	r2, [sp, #36]	; 0x24
 800c9a6:	930c      	str	r3, [sp, #48]	; 0x30
 800c9a8:	46bb      	mov	fp, r7
 800c9aa:	b975      	cbnz	r5, 800c9ca <_dtoa_r+0x42>
 800c9ac:	2010      	movs	r0, #16
 800c9ae:	f001 f95f 	bl	800dc70 <malloc>
 800c9b2:	4602      	mov	r2, r0
 800c9b4:	6260      	str	r0, [r4, #36]	; 0x24
 800c9b6:	b920      	cbnz	r0, 800c9c2 <_dtoa_r+0x3a>
 800c9b8:	4ba7      	ldr	r3, [pc, #668]	; (800cc58 <_dtoa_r+0x2d0>)
 800c9ba:	21ea      	movs	r1, #234	; 0xea
 800c9bc:	48a7      	ldr	r0, [pc, #668]	; (800cc5c <_dtoa_r+0x2d4>)
 800c9be:	f7ff ff37 	bl	800c830 <__assert_func>
 800c9c2:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800c9c6:	6005      	str	r5, [r0, #0]
 800c9c8:	60c5      	str	r5, [r0, #12]
 800c9ca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9cc:	6819      	ldr	r1, [r3, #0]
 800c9ce:	b151      	cbz	r1, 800c9e6 <_dtoa_r+0x5e>
 800c9d0:	685a      	ldr	r2, [r3, #4]
 800c9d2:	604a      	str	r2, [r1, #4]
 800c9d4:	2301      	movs	r3, #1
 800c9d6:	4093      	lsls	r3, r2
 800c9d8:	608b      	str	r3, [r1, #8]
 800c9da:	4620      	mov	r0, r4
 800c9dc:	f001 f9b0 	bl	800dd40 <_Bfree>
 800c9e0:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c9e2:	2200      	movs	r2, #0
 800c9e4:	601a      	str	r2, [r3, #0]
 800c9e6:	1e3b      	subs	r3, r7, #0
 800c9e8:	bfaa      	itet	ge
 800c9ea:	2300      	movge	r3, #0
 800c9ec:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800c9f0:	f8c8 3000 	strge.w	r3, [r8]
 800c9f4:	4b9a      	ldr	r3, [pc, #616]	; (800cc60 <_dtoa_r+0x2d8>)
 800c9f6:	bfbc      	itt	lt
 800c9f8:	2201      	movlt	r2, #1
 800c9fa:	f8c8 2000 	strlt.w	r2, [r8]
 800c9fe:	ea33 030b 	bics.w	r3, r3, fp
 800ca02:	d11b      	bne.n	800ca3c <_dtoa_r+0xb4>
 800ca04:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca06:	f242 730f 	movw	r3, #9999	; 0x270f
 800ca0a:	6013      	str	r3, [r2, #0]
 800ca0c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ca10:	4333      	orrs	r3, r6
 800ca12:	f000 8592 	beq.w	800d53a <_dtoa_r+0xbb2>
 800ca16:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca18:	b963      	cbnz	r3, 800ca34 <_dtoa_r+0xac>
 800ca1a:	4b92      	ldr	r3, [pc, #584]	; (800cc64 <_dtoa_r+0x2dc>)
 800ca1c:	e022      	b.n	800ca64 <_dtoa_r+0xdc>
 800ca1e:	4b92      	ldr	r3, [pc, #584]	; (800cc68 <_dtoa_r+0x2e0>)
 800ca20:	9301      	str	r3, [sp, #4]
 800ca22:	3308      	adds	r3, #8
 800ca24:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800ca26:	6013      	str	r3, [r2, #0]
 800ca28:	9801      	ldr	r0, [sp, #4]
 800ca2a:	b013      	add	sp, #76	; 0x4c
 800ca2c:	ecbd 8b04 	vpop	{d8-d9}
 800ca30:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca34:	4b8b      	ldr	r3, [pc, #556]	; (800cc64 <_dtoa_r+0x2dc>)
 800ca36:	9301      	str	r3, [sp, #4]
 800ca38:	3303      	adds	r3, #3
 800ca3a:	e7f3      	b.n	800ca24 <_dtoa_r+0x9c>
 800ca3c:	2200      	movs	r2, #0
 800ca3e:	2300      	movs	r3, #0
 800ca40:	4650      	mov	r0, sl
 800ca42:	4659      	mov	r1, fp
 800ca44:	f7f4 f840 	bl	8000ac8 <__aeabi_dcmpeq>
 800ca48:	ec4b ab19 	vmov	d9, sl, fp
 800ca4c:	4680      	mov	r8, r0
 800ca4e:	b158      	cbz	r0, 800ca68 <_dtoa_r+0xe0>
 800ca50:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800ca52:	2301      	movs	r3, #1
 800ca54:	6013      	str	r3, [r2, #0]
 800ca56:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800ca58:	2b00      	cmp	r3, #0
 800ca5a:	f000 856b 	beq.w	800d534 <_dtoa_r+0xbac>
 800ca5e:	4883      	ldr	r0, [pc, #524]	; (800cc6c <_dtoa_r+0x2e4>)
 800ca60:	6018      	str	r0, [r3, #0]
 800ca62:	1e43      	subs	r3, r0, #1
 800ca64:	9301      	str	r3, [sp, #4]
 800ca66:	e7df      	b.n	800ca28 <_dtoa_r+0xa0>
 800ca68:	ec4b ab10 	vmov	d0, sl, fp
 800ca6c:	aa10      	add	r2, sp, #64	; 0x40
 800ca6e:	a911      	add	r1, sp, #68	; 0x44
 800ca70:	4620      	mov	r0, r4
 800ca72:	f001 fd13 	bl	800e49c <__d2b>
 800ca76:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800ca7a:	ee08 0a10 	vmov	s16, r0
 800ca7e:	2d00      	cmp	r5, #0
 800ca80:	f000 8084 	beq.w	800cb8c <_dtoa_r+0x204>
 800ca84:	ee19 3a90 	vmov	r3, s19
 800ca88:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800ca8c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800ca90:	4656      	mov	r6, sl
 800ca92:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800ca96:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800ca9a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800ca9e:	4b74      	ldr	r3, [pc, #464]	; (800cc70 <_dtoa_r+0x2e8>)
 800caa0:	2200      	movs	r2, #0
 800caa2:	4630      	mov	r0, r6
 800caa4:	4639      	mov	r1, r7
 800caa6:	f7f3 fbef 	bl	8000288 <__aeabi_dsub>
 800caaa:	a365      	add	r3, pc, #404	; (adr r3, 800cc40 <_dtoa_r+0x2b8>)
 800caac:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cab0:	f7f3 fda2 	bl	80005f8 <__aeabi_dmul>
 800cab4:	a364      	add	r3, pc, #400	; (adr r3, 800cc48 <_dtoa_r+0x2c0>)
 800cab6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800caba:	f7f3 fbe7 	bl	800028c <__adddf3>
 800cabe:	4606      	mov	r6, r0
 800cac0:	4628      	mov	r0, r5
 800cac2:	460f      	mov	r7, r1
 800cac4:	f7f3 fd2e 	bl	8000524 <__aeabi_i2d>
 800cac8:	a361      	add	r3, pc, #388	; (adr r3, 800cc50 <_dtoa_r+0x2c8>)
 800caca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cace:	f7f3 fd93 	bl	80005f8 <__aeabi_dmul>
 800cad2:	4602      	mov	r2, r0
 800cad4:	460b      	mov	r3, r1
 800cad6:	4630      	mov	r0, r6
 800cad8:	4639      	mov	r1, r7
 800cada:	f7f3 fbd7 	bl	800028c <__adddf3>
 800cade:	4606      	mov	r6, r0
 800cae0:	460f      	mov	r7, r1
 800cae2:	f7f4 f839 	bl	8000b58 <__aeabi_d2iz>
 800cae6:	2200      	movs	r2, #0
 800cae8:	9000      	str	r0, [sp, #0]
 800caea:	2300      	movs	r3, #0
 800caec:	4630      	mov	r0, r6
 800caee:	4639      	mov	r1, r7
 800caf0:	f7f3 fff4 	bl	8000adc <__aeabi_dcmplt>
 800caf4:	b150      	cbz	r0, 800cb0c <_dtoa_r+0x184>
 800caf6:	9800      	ldr	r0, [sp, #0]
 800caf8:	f7f3 fd14 	bl	8000524 <__aeabi_i2d>
 800cafc:	4632      	mov	r2, r6
 800cafe:	463b      	mov	r3, r7
 800cb00:	f7f3 ffe2 	bl	8000ac8 <__aeabi_dcmpeq>
 800cb04:	b910      	cbnz	r0, 800cb0c <_dtoa_r+0x184>
 800cb06:	9b00      	ldr	r3, [sp, #0]
 800cb08:	3b01      	subs	r3, #1
 800cb0a:	9300      	str	r3, [sp, #0]
 800cb0c:	9b00      	ldr	r3, [sp, #0]
 800cb0e:	2b16      	cmp	r3, #22
 800cb10:	d85a      	bhi.n	800cbc8 <_dtoa_r+0x240>
 800cb12:	9a00      	ldr	r2, [sp, #0]
 800cb14:	4b57      	ldr	r3, [pc, #348]	; (800cc74 <_dtoa_r+0x2ec>)
 800cb16:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cb1a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cb1e:	ec51 0b19 	vmov	r0, r1, d9
 800cb22:	f7f3 ffdb 	bl	8000adc <__aeabi_dcmplt>
 800cb26:	2800      	cmp	r0, #0
 800cb28:	d050      	beq.n	800cbcc <_dtoa_r+0x244>
 800cb2a:	9b00      	ldr	r3, [sp, #0]
 800cb2c:	3b01      	subs	r3, #1
 800cb2e:	9300      	str	r3, [sp, #0]
 800cb30:	2300      	movs	r3, #0
 800cb32:	930b      	str	r3, [sp, #44]	; 0x2c
 800cb34:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800cb36:	1b5d      	subs	r5, r3, r5
 800cb38:	1e6b      	subs	r3, r5, #1
 800cb3a:	9305      	str	r3, [sp, #20]
 800cb3c:	bf45      	ittet	mi
 800cb3e:	f1c5 0301 	rsbmi	r3, r5, #1
 800cb42:	9304      	strmi	r3, [sp, #16]
 800cb44:	2300      	movpl	r3, #0
 800cb46:	2300      	movmi	r3, #0
 800cb48:	bf4c      	ite	mi
 800cb4a:	9305      	strmi	r3, [sp, #20]
 800cb4c:	9304      	strpl	r3, [sp, #16]
 800cb4e:	9b00      	ldr	r3, [sp, #0]
 800cb50:	2b00      	cmp	r3, #0
 800cb52:	db3d      	blt.n	800cbd0 <_dtoa_r+0x248>
 800cb54:	9b05      	ldr	r3, [sp, #20]
 800cb56:	9a00      	ldr	r2, [sp, #0]
 800cb58:	920a      	str	r2, [sp, #40]	; 0x28
 800cb5a:	4413      	add	r3, r2
 800cb5c:	9305      	str	r3, [sp, #20]
 800cb5e:	2300      	movs	r3, #0
 800cb60:	9307      	str	r3, [sp, #28]
 800cb62:	9b06      	ldr	r3, [sp, #24]
 800cb64:	2b09      	cmp	r3, #9
 800cb66:	f200 8089 	bhi.w	800cc7c <_dtoa_r+0x2f4>
 800cb6a:	2b05      	cmp	r3, #5
 800cb6c:	bfc4      	itt	gt
 800cb6e:	3b04      	subgt	r3, #4
 800cb70:	9306      	strgt	r3, [sp, #24]
 800cb72:	9b06      	ldr	r3, [sp, #24]
 800cb74:	f1a3 0302 	sub.w	r3, r3, #2
 800cb78:	bfcc      	ite	gt
 800cb7a:	2500      	movgt	r5, #0
 800cb7c:	2501      	movle	r5, #1
 800cb7e:	2b03      	cmp	r3, #3
 800cb80:	f200 8087 	bhi.w	800cc92 <_dtoa_r+0x30a>
 800cb84:	e8df f003 	tbb	[pc, r3]
 800cb88:	59383a2d 	.word	0x59383a2d
 800cb8c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800cb90:	441d      	add	r5, r3
 800cb92:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800cb96:	2b20      	cmp	r3, #32
 800cb98:	bfc1      	itttt	gt
 800cb9a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800cb9e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800cba2:	fa0b f303 	lslgt.w	r3, fp, r3
 800cba6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800cbaa:	bfda      	itte	le
 800cbac:	f1c3 0320 	rsble	r3, r3, #32
 800cbb0:	fa06 f003 	lslle.w	r0, r6, r3
 800cbb4:	4318      	orrgt	r0, r3
 800cbb6:	f7f3 fca5 	bl	8000504 <__aeabi_ui2d>
 800cbba:	2301      	movs	r3, #1
 800cbbc:	4606      	mov	r6, r0
 800cbbe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800cbc2:	3d01      	subs	r5, #1
 800cbc4:	930e      	str	r3, [sp, #56]	; 0x38
 800cbc6:	e76a      	b.n	800ca9e <_dtoa_r+0x116>
 800cbc8:	2301      	movs	r3, #1
 800cbca:	e7b2      	b.n	800cb32 <_dtoa_r+0x1aa>
 800cbcc:	900b      	str	r0, [sp, #44]	; 0x2c
 800cbce:	e7b1      	b.n	800cb34 <_dtoa_r+0x1ac>
 800cbd0:	9b04      	ldr	r3, [sp, #16]
 800cbd2:	9a00      	ldr	r2, [sp, #0]
 800cbd4:	1a9b      	subs	r3, r3, r2
 800cbd6:	9304      	str	r3, [sp, #16]
 800cbd8:	4253      	negs	r3, r2
 800cbda:	9307      	str	r3, [sp, #28]
 800cbdc:	2300      	movs	r3, #0
 800cbde:	930a      	str	r3, [sp, #40]	; 0x28
 800cbe0:	e7bf      	b.n	800cb62 <_dtoa_r+0x1da>
 800cbe2:	2300      	movs	r3, #0
 800cbe4:	9308      	str	r3, [sp, #32]
 800cbe6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cbe8:	2b00      	cmp	r3, #0
 800cbea:	dc55      	bgt.n	800cc98 <_dtoa_r+0x310>
 800cbec:	2301      	movs	r3, #1
 800cbee:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cbf2:	461a      	mov	r2, r3
 800cbf4:	9209      	str	r2, [sp, #36]	; 0x24
 800cbf6:	e00c      	b.n	800cc12 <_dtoa_r+0x28a>
 800cbf8:	2301      	movs	r3, #1
 800cbfa:	e7f3      	b.n	800cbe4 <_dtoa_r+0x25c>
 800cbfc:	2300      	movs	r3, #0
 800cbfe:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cc00:	9308      	str	r3, [sp, #32]
 800cc02:	9b00      	ldr	r3, [sp, #0]
 800cc04:	4413      	add	r3, r2
 800cc06:	9302      	str	r3, [sp, #8]
 800cc08:	3301      	adds	r3, #1
 800cc0a:	2b01      	cmp	r3, #1
 800cc0c:	9303      	str	r3, [sp, #12]
 800cc0e:	bfb8      	it	lt
 800cc10:	2301      	movlt	r3, #1
 800cc12:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800cc14:	2200      	movs	r2, #0
 800cc16:	6042      	str	r2, [r0, #4]
 800cc18:	2204      	movs	r2, #4
 800cc1a:	f102 0614 	add.w	r6, r2, #20
 800cc1e:	429e      	cmp	r6, r3
 800cc20:	6841      	ldr	r1, [r0, #4]
 800cc22:	d93d      	bls.n	800cca0 <_dtoa_r+0x318>
 800cc24:	4620      	mov	r0, r4
 800cc26:	f001 f84b 	bl	800dcc0 <_Balloc>
 800cc2a:	9001      	str	r0, [sp, #4]
 800cc2c:	2800      	cmp	r0, #0
 800cc2e:	d13b      	bne.n	800cca8 <_dtoa_r+0x320>
 800cc30:	4b11      	ldr	r3, [pc, #68]	; (800cc78 <_dtoa_r+0x2f0>)
 800cc32:	4602      	mov	r2, r0
 800cc34:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800cc38:	e6c0      	b.n	800c9bc <_dtoa_r+0x34>
 800cc3a:	2301      	movs	r3, #1
 800cc3c:	e7df      	b.n	800cbfe <_dtoa_r+0x276>
 800cc3e:	bf00      	nop
 800cc40:	636f4361 	.word	0x636f4361
 800cc44:	3fd287a7 	.word	0x3fd287a7
 800cc48:	8b60c8b3 	.word	0x8b60c8b3
 800cc4c:	3fc68a28 	.word	0x3fc68a28
 800cc50:	509f79fb 	.word	0x509f79fb
 800cc54:	3fd34413 	.word	0x3fd34413
 800cc58:	0800f980 	.word	0x0800f980
 800cc5c:	0800fb3e 	.word	0x0800fb3e
 800cc60:	7ff00000 	.word	0x7ff00000
 800cc64:	0800fb3a 	.word	0x0800fb3a
 800cc68:	0800fb31 	.word	0x0800fb31
 800cc6c:	0800f905 	.word	0x0800f905
 800cc70:	3ff80000 	.word	0x3ff80000
 800cc74:	0800fca8 	.word	0x0800fca8
 800cc78:	0800fb99 	.word	0x0800fb99
 800cc7c:	2501      	movs	r5, #1
 800cc7e:	2300      	movs	r3, #0
 800cc80:	9306      	str	r3, [sp, #24]
 800cc82:	9508      	str	r5, [sp, #32]
 800cc84:	f04f 33ff 	mov.w	r3, #4294967295
 800cc88:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cc8c:	2200      	movs	r2, #0
 800cc8e:	2312      	movs	r3, #18
 800cc90:	e7b0      	b.n	800cbf4 <_dtoa_r+0x26c>
 800cc92:	2301      	movs	r3, #1
 800cc94:	9308      	str	r3, [sp, #32]
 800cc96:	e7f5      	b.n	800cc84 <_dtoa_r+0x2fc>
 800cc98:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cc9a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800cc9e:	e7b8      	b.n	800cc12 <_dtoa_r+0x28a>
 800cca0:	3101      	adds	r1, #1
 800cca2:	6041      	str	r1, [r0, #4]
 800cca4:	0052      	lsls	r2, r2, #1
 800cca6:	e7b8      	b.n	800cc1a <_dtoa_r+0x292>
 800cca8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800ccaa:	9a01      	ldr	r2, [sp, #4]
 800ccac:	601a      	str	r2, [r3, #0]
 800ccae:	9b03      	ldr	r3, [sp, #12]
 800ccb0:	2b0e      	cmp	r3, #14
 800ccb2:	f200 809d 	bhi.w	800cdf0 <_dtoa_r+0x468>
 800ccb6:	2d00      	cmp	r5, #0
 800ccb8:	f000 809a 	beq.w	800cdf0 <_dtoa_r+0x468>
 800ccbc:	9b00      	ldr	r3, [sp, #0]
 800ccbe:	2b00      	cmp	r3, #0
 800ccc0:	dd32      	ble.n	800cd28 <_dtoa_r+0x3a0>
 800ccc2:	4ab7      	ldr	r2, [pc, #732]	; (800cfa0 <_dtoa_r+0x618>)
 800ccc4:	f003 030f 	and.w	r3, r3, #15
 800ccc8:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800cccc:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ccd0:	9b00      	ldr	r3, [sp, #0]
 800ccd2:	05d8      	lsls	r0, r3, #23
 800ccd4:	ea4f 1723 	mov.w	r7, r3, asr #4
 800ccd8:	d516      	bpl.n	800cd08 <_dtoa_r+0x380>
 800ccda:	4bb2      	ldr	r3, [pc, #712]	; (800cfa4 <_dtoa_r+0x61c>)
 800ccdc:	ec51 0b19 	vmov	r0, r1, d9
 800cce0:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800cce4:	f7f3 fdb2 	bl	800084c <__aeabi_ddiv>
 800cce8:	f007 070f 	and.w	r7, r7, #15
 800ccec:	4682      	mov	sl, r0
 800ccee:	468b      	mov	fp, r1
 800ccf0:	2503      	movs	r5, #3
 800ccf2:	4eac      	ldr	r6, [pc, #688]	; (800cfa4 <_dtoa_r+0x61c>)
 800ccf4:	b957      	cbnz	r7, 800cd0c <_dtoa_r+0x384>
 800ccf6:	4642      	mov	r2, r8
 800ccf8:	464b      	mov	r3, r9
 800ccfa:	4650      	mov	r0, sl
 800ccfc:	4659      	mov	r1, fp
 800ccfe:	f7f3 fda5 	bl	800084c <__aeabi_ddiv>
 800cd02:	4682      	mov	sl, r0
 800cd04:	468b      	mov	fp, r1
 800cd06:	e028      	b.n	800cd5a <_dtoa_r+0x3d2>
 800cd08:	2502      	movs	r5, #2
 800cd0a:	e7f2      	b.n	800ccf2 <_dtoa_r+0x36a>
 800cd0c:	07f9      	lsls	r1, r7, #31
 800cd0e:	d508      	bpl.n	800cd22 <_dtoa_r+0x39a>
 800cd10:	4640      	mov	r0, r8
 800cd12:	4649      	mov	r1, r9
 800cd14:	e9d6 2300 	ldrd	r2, r3, [r6]
 800cd18:	f7f3 fc6e 	bl	80005f8 <__aeabi_dmul>
 800cd1c:	3501      	adds	r5, #1
 800cd1e:	4680      	mov	r8, r0
 800cd20:	4689      	mov	r9, r1
 800cd22:	107f      	asrs	r7, r7, #1
 800cd24:	3608      	adds	r6, #8
 800cd26:	e7e5      	b.n	800ccf4 <_dtoa_r+0x36c>
 800cd28:	f000 809b 	beq.w	800ce62 <_dtoa_r+0x4da>
 800cd2c:	9b00      	ldr	r3, [sp, #0]
 800cd2e:	4f9d      	ldr	r7, [pc, #628]	; (800cfa4 <_dtoa_r+0x61c>)
 800cd30:	425e      	negs	r6, r3
 800cd32:	4b9b      	ldr	r3, [pc, #620]	; (800cfa0 <_dtoa_r+0x618>)
 800cd34:	f006 020f 	and.w	r2, r6, #15
 800cd38:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800cd3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800cd40:	ec51 0b19 	vmov	r0, r1, d9
 800cd44:	f7f3 fc58 	bl	80005f8 <__aeabi_dmul>
 800cd48:	1136      	asrs	r6, r6, #4
 800cd4a:	4682      	mov	sl, r0
 800cd4c:	468b      	mov	fp, r1
 800cd4e:	2300      	movs	r3, #0
 800cd50:	2502      	movs	r5, #2
 800cd52:	2e00      	cmp	r6, #0
 800cd54:	d17a      	bne.n	800ce4c <_dtoa_r+0x4c4>
 800cd56:	2b00      	cmp	r3, #0
 800cd58:	d1d3      	bne.n	800cd02 <_dtoa_r+0x37a>
 800cd5a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800cd5c:	2b00      	cmp	r3, #0
 800cd5e:	f000 8082 	beq.w	800ce66 <_dtoa_r+0x4de>
 800cd62:	4b91      	ldr	r3, [pc, #580]	; (800cfa8 <_dtoa_r+0x620>)
 800cd64:	2200      	movs	r2, #0
 800cd66:	4650      	mov	r0, sl
 800cd68:	4659      	mov	r1, fp
 800cd6a:	f7f3 feb7 	bl	8000adc <__aeabi_dcmplt>
 800cd6e:	2800      	cmp	r0, #0
 800cd70:	d079      	beq.n	800ce66 <_dtoa_r+0x4de>
 800cd72:	9b03      	ldr	r3, [sp, #12]
 800cd74:	2b00      	cmp	r3, #0
 800cd76:	d076      	beq.n	800ce66 <_dtoa_r+0x4de>
 800cd78:	9b02      	ldr	r3, [sp, #8]
 800cd7a:	2b00      	cmp	r3, #0
 800cd7c:	dd36      	ble.n	800cdec <_dtoa_r+0x464>
 800cd7e:	9b00      	ldr	r3, [sp, #0]
 800cd80:	4650      	mov	r0, sl
 800cd82:	4659      	mov	r1, fp
 800cd84:	1e5f      	subs	r7, r3, #1
 800cd86:	2200      	movs	r2, #0
 800cd88:	4b88      	ldr	r3, [pc, #544]	; (800cfac <_dtoa_r+0x624>)
 800cd8a:	f7f3 fc35 	bl	80005f8 <__aeabi_dmul>
 800cd8e:	9e02      	ldr	r6, [sp, #8]
 800cd90:	4682      	mov	sl, r0
 800cd92:	468b      	mov	fp, r1
 800cd94:	3501      	adds	r5, #1
 800cd96:	4628      	mov	r0, r5
 800cd98:	f7f3 fbc4 	bl	8000524 <__aeabi_i2d>
 800cd9c:	4652      	mov	r2, sl
 800cd9e:	465b      	mov	r3, fp
 800cda0:	f7f3 fc2a 	bl	80005f8 <__aeabi_dmul>
 800cda4:	4b82      	ldr	r3, [pc, #520]	; (800cfb0 <_dtoa_r+0x628>)
 800cda6:	2200      	movs	r2, #0
 800cda8:	f7f3 fa70 	bl	800028c <__adddf3>
 800cdac:	46d0      	mov	r8, sl
 800cdae:	46d9      	mov	r9, fp
 800cdb0:	4682      	mov	sl, r0
 800cdb2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800cdb6:	2e00      	cmp	r6, #0
 800cdb8:	d158      	bne.n	800ce6c <_dtoa_r+0x4e4>
 800cdba:	4b7e      	ldr	r3, [pc, #504]	; (800cfb4 <_dtoa_r+0x62c>)
 800cdbc:	2200      	movs	r2, #0
 800cdbe:	4640      	mov	r0, r8
 800cdc0:	4649      	mov	r1, r9
 800cdc2:	f7f3 fa61 	bl	8000288 <__aeabi_dsub>
 800cdc6:	4652      	mov	r2, sl
 800cdc8:	465b      	mov	r3, fp
 800cdca:	4680      	mov	r8, r0
 800cdcc:	4689      	mov	r9, r1
 800cdce:	f7f3 fea3 	bl	8000b18 <__aeabi_dcmpgt>
 800cdd2:	2800      	cmp	r0, #0
 800cdd4:	f040 8295 	bne.w	800d302 <_dtoa_r+0x97a>
 800cdd8:	4652      	mov	r2, sl
 800cdda:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800cdde:	4640      	mov	r0, r8
 800cde0:	4649      	mov	r1, r9
 800cde2:	f7f3 fe7b 	bl	8000adc <__aeabi_dcmplt>
 800cde6:	2800      	cmp	r0, #0
 800cde8:	f040 8289 	bne.w	800d2fe <_dtoa_r+0x976>
 800cdec:	ec5b ab19 	vmov	sl, fp, d9
 800cdf0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800cdf2:	2b00      	cmp	r3, #0
 800cdf4:	f2c0 8148 	blt.w	800d088 <_dtoa_r+0x700>
 800cdf8:	9a00      	ldr	r2, [sp, #0]
 800cdfa:	2a0e      	cmp	r2, #14
 800cdfc:	f300 8144 	bgt.w	800d088 <_dtoa_r+0x700>
 800ce00:	4b67      	ldr	r3, [pc, #412]	; (800cfa0 <_dtoa_r+0x618>)
 800ce02:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800ce06:	e9d3 8900 	ldrd	r8, r9, [r3]
 800ce0a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ce0c:	2b00      	cmp	r3, #0
 800ce0e:	f280 80d5 	bge.w	800cfbc <_dtoa_r+0x634>
 800ce12:	9b03      	ldr	r3, [sp, #12]
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	f300 80d1 	bgt.w	800cfbc <_dtoa_r+0x634>
 800ce1a:	f040 826f 	bne.w	800d2fc <_dtoa_r+0x974>
 800ce1e:	4b65      	ldr	r3, [pc, #404]	; (800cfb4 <_dtoa_r+0x62c>)
 800ce20:	2200      	movs	r2, #0
 800ce22:	4640      	mov	r0, r8
 800ce24:	4649      	mov	r1, r9
 800ce26:	f7f3 fbe7 	bl	80005f8 <__aeabi_dmul>
 800ce2a:	4652      	mov	r2, sl
 800ce2c:	465b      	mov	r3, fp
 800ce2e:	f7f3 fe69 	bl	8000b04 <__aeabi_dcmpge>
 800ce32:	9e03      	ldr	r6, [sp, #12]
 800ce34:	4637      	mov	r7, r6
 800ce36:	2800      	cmp	r0, #0
 800ce38:	f040 8245 	bne.w	800d2c6 <_dtoa_r+0x93e>
 800ce3c:	9d01      	ldr	r5, [sp, #4]
 800ce3e:	2331      	movs	r3, #49	; 0x31
 800ce40:	f805 3b01 	strb.w	r3, [r5], #1
 800ce44:	9b00      	ldr	r3, [sp, #0]
 800ce46:	3301      	adds	r3, #1
 800ce48:	9300      	str	r3, [sp, #0]
 800ce4a:	e240      	b.n	800d2ce <_dtoa_r+0x946>
 800ce4c:	07f2      	lsls	r2, r6, #31
 800ce4e:	d505      	bpl.n	800ce5c <_dtoa_r+0x4d4>
 800ce50:	e9d7 2300 	ldrd	r2, r3, [r7]
 800ce54:	f7f3 fbd0 	bl	80005f8 <__aeabi_dmul>
 800ce58:	3501      	adds	r5, #1
 800ce5a:	2301      	movs	r3, #1
 800ce5c:	1076      	asrs	r6, r6, #1
 800ce5e:	3708      	adds	r7, #8
 800ce60:	e777      	b.n	800cd52 <_dtoa_r+0x3ca>
 800ce62:	2502      	movs	r5, #2
 800ce64:	e779      	b.n	800cd5a <_dtoa_r+0x3d2>
 800ce66:	9f00      	ldr	r7, [sp, #0]
 800ce68:	9e03      	ldr	r6, [sp, #12]
 800ce6a:	e794      	b.n	800cd96 <_dtoa_r+0x40e>
 800ce6c:	9901      	ldr	r1, [sp, #4]
 800ce6e:	4b4c      	ldr	r3, [pc, #304]	; (800cfa0 <_dtoa_r+0x618>)
 800ce70:	4431      	add	r1, r6
 800ce72:	910d      	str	r1, [sp, #52]	; 0x34
 800ce74:	9908      	ldr	r1, [sp, #32]
 800ce76:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800ce7a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800ce7e:	2900      	cmp	r1, #0
 800ce80:	d043      	beq.n	800cf0a <_dtoa_r+0x582>
 800ce82:	494d      	ldr	r1, [pc, #308]	; (800cfb8 <_dtoa_r+0x630>)
 800ce84:	2000      	movs	r0, #0
 800ce86:	f7f3 fce1 	bl	800084c <__aeabi_ddiv>
 800ce8a:	4652      	mov	r2, sl
 800ce8c:	465b      	mov	r3, fp
 800ce8e:	f7f3 f9fb 	bl	8000288 <__aeabi_dsub>
 800ce92:	9d01      	ldr	r5, [sp, #4]
 800ce94:	4682      	mov	sl, r0
 800ce96:	468b      	mov	fp, r1
 800ce98:	4649      	mov	r1, r9
 800ce9a:	4640      	mov	r0, r8
 800ce9c:	f7f3 fe5c 	bl	8000b58 <__aeabi_d2iz>
 800cea0:	4606      	mov	r6, r0
 800cea2:	f7f3 fb3f 	bl	8000524 <__aeabi_i2d>
 800cea6:	4602      	mov	r2, r0
 800cea8:	460b      	mov	r3, r1
 800ceaa:	4640      	mov	r0, r8
 800ceac:	4649      	mov	r1, r9
 800ceae:	f7f3 f9eb 	bl	8000288 <__aeabi_dsub>
 800ceb2:	3630      	adds	r6, #48	; 0x30
 800ceb4:	f805 6b01 	strb.w	r6, [r5], #1
 800ceb8:	4652      	mov	r2, sl
 800ceba:	465b      	mov	r3, fp
 800cebc:	4680      	mov	r8, r0
 800cebe:	4689      	mov	r9, r1
 800cec0:	f7f3 fe0c 	bl	8000adc <__aeabi_dcmplt>
 800cec4:	2800      	cmp	r0, #0
 800cec6:	d163      	bne.n	800cf90 <_dtoa_r+0x608>
 800cec8:	4642      	mov	r2, r8
 800ceca:	464b      	mov	r3, r9
 800cecc:	4936      	ldr	r1, [pc, #216]	; (800cfa8 <_dtoa_r+0x620>)
 800cece:	2000      	movs	r0, #0
 800ced0:	f7f3 f9da 	bl	8000288 <__aeabi_dsub>
 800ced4:	4652      	mov	r2, sl
 800ced6:	465b      	mov	r3, fp
 800ced8:	f7f3 fe00 	bl	8000adc <__aeabi_dcmplt>
 800cedc:	2800      	cmp	r0, #0
 800cede:	f040 80b5 	bne.w	800d04c <_dtoa_r+0x6c4>
 800cee2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cee4:	429d      	cmp	r5, r3
 800cee6:	d081      	beq.n	800cdec <_dtoa_r+0x464>
 800cee8:	4b30      	ldr	r3, [pc, #192]	; (800cfac <_dtoa_r+0x624>)
 800ceea:	2200      	movs	r2, #0
 800ceec:	4650      	mov	r0, sl
 800ceee:	4659      	mov	r1, fp
 800cef0:	f7f3 fb82 	bl	80005f8 <__aeabi_dmul>
 800cef4:	4b2d      	ldr	r3, [pc, #180]	; (800cfac <_dtoa_r+0x624>)
 800cef6:	4682      	mov	sl, r0
 800cef8:	468b      	mov	fp, r1
 800cefa:	4640      	mov	r0, r8
 800cefc:	4649      	mov	r1, r9
 800cefe:	2200      	movs	r2, #0
 800cf00:	f7f3 fb7a 	bl	80005f8 <__aeabi_dmul>
 800cf04:	4680      	mov	r8, r0
 800cf06:	4689      	mov	r9, r1
 800cf08:	e7c6      	b.n	800ce98 <_dtoa_r+0x510>
 800cf0a:	4650      	mov	r0, sl
 800cf0c:	4659      	mov	r1, fp
 800cf0e:	f7f3 fb73 	bl	80005f8 <__aeabi_dmul>
 800cf12:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf14:	9d01      	ldr	r5, [sp, #4]
 800cf16:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf18:	4682      	mov	sl, r0
 800cf1a:	468b      	mov	fp, r1
 800cf1c:	4649      	mov	r1, r9
 800cf1e:	4640      	mov	r0, r8
 800cf20:	f7f3 fe1a 	bl	8000b58 <__aeabi_d2iz>
 800cf24:	4606      	mov	r6, r0
 800cf26:	f7f3 fafd 	bl	8000524 <__aeabi_i2d>
 800cf2a:	3630      	adds	r6, #48	; 0x30
 800cf2c:	4602      	mov	r2, r0
 800cf2e:	460b      	mov	r3, r1
 800cf30:	4640      	mov	r0, r8
 800cf32:	4649      	mov	r1, r9
 800cf34:	f7f3 f9a8 	bl	8000288 <__aeabi_dsub>
 800cf38:	f805 6b01 	strb.w	r6, [r5], #1
 800cf3c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800cf3e:	429d      	cmp	r5, r3
 800cf40:	4680      	mov	r8, r0
 800cf42:	4689      	mov	r9, r1
 800cf44:	f04f 0200 	mov.w	r2, #0
 800cf48:	d124      	bne.n	800cf94 <_dtoa_r+0x60c>
 800cf4a:	4b1b      	ldr	r3, [pc, #108]	; (800cfb8 <_dtoa_r+0x630>)
 800cf4c:	4650      	mov	r0, sl
 800cf4e:	4659      	mov	r1, fp
 800cf50:	f7f3 f99c 	bl	800028c <__adddf3>
 800cf54:	4602      	mov	r2, r0
 800cf56:	460b      	mov	r3, r1
 800cf58:	4640      	mov	r0, r8
 800cf5a:	4649      	mov	r1, r9
 800cf5c:	f7f3 fddc 	bl	8000b18 <__aeabi_dcmpgt>
 800cf60:	2800      	cmp	r0, #0
 800cf62:	d173      	bne.n	800d04c <_dtoa_r+0x6c4>
 800cf64:	4652      	mov	r2, sl
 800cf66:	465b      	mov	r3, fp
 800cf68:	4913      	ldr	r1, [pc, #76]	; (800cfb8 <_dtoa_r+0x630>)
 800cf6a:	2000      	movs	r0, #0
 800cf6c:	f7f3 f98c 	bl	8000288 <__aeabi_dsub>
 800cf70:	4602      	mov	r2, r0
 800cf72:	460b      	mov	r3, r1
 800cf74:	4640      	mov	r0, r8
 800cf76:	4649      	mov	r1, r9
 800cf78:	f7f3 fdb0 	bl	8000adc <__aeabi_dcmplt>
 800cf7c:	2800      	cmp	r0, #0
 800cf7e:	f43f af35 	beq.w	800cdec <_dtoa_r+0x464>
 800cf82:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800cf84:	1e6b      	subs	r3, r5, #1
 800cf86:	930f      	str	r3, [sp, #60]	; 0x3c
 800cf88:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800cf8c:	2b30      	cmp	r3, #48	; 0x30
 800cf8e:	d0f8      	beq.n	800cf82 <_dtoa_r+0x5fa>
 800cf90:	9700      	str	r7, [sp, #0]
 800cf92:	e049      	b.n	800d028 <_dtoa_r+0x6a0>
 800cf94:	4b05      	ldr	r3, [pc, #20]	; (800cfac <_dtoa_r+0x624>)
 800cf96:	f7f3 fb2f 	bl	80005f8 <__aeabi_dmul>
 800cf9a:	4680      	mov	r8, r0
 800cf9c:	4689      	mov	r9, r1
 800cf9e:	e7bd      	b.n	800cf1c <_dtoa_r+0x594>
 800cfa0:	0800fca8 	.word	0x0800fca8
 800cfa4:	0800fc80 	.word	0x0800fc80
 800cfa8:	3ff00000 	.word	0x3ff00000
 800cfac:	40240000 	.word	0x40240000
 800cfb0:	401c0000 	.word	0x401c0000
 800cfb4:	40140000 	.word	0x40140000
 800cfb8:	3fe00000 	.word	0x3fe00000
 800cfbc:	9d01      	ldr	r5, [sp, #4]
 800cfbe:	4656      	mov	r6, sl
 800cfc0:	465f      	mov	r7, fp
 800cfc2:	4642      	mov	r2, r8
 800cfc4:	464b      	mov	r3, r9
 800cfc6:	4630      	mov	r0, r6
 800cfc8:	4639      	mov	r1, r7
 800cfca:	f7f3 fc3f 	bl	800084c <__aeabi_ddiv>
 800cfce:	f7f3 fdc3 	bl	8000b58 <__aeabi_d2iz>
 800cfd2:	4682      	mov	sl, r0
 800cfd4:	f7f3 faa6 	bl	8000524 <__aeabi_i2d>
 800cfd8:	4642      	mov	r2, r8
 800cfda:	464b      	mov	r3, r9
 800cfdc:	f7f3 fb0c 	bl	80005f8 <__aeabi_dmul>
 800cfe0:	4602      	mov	r2, r0
 800cfe2:	460b      	mov	r3, r1
 800cfe4:	4630      	mov	r0, r6
 800cfe6:	4639      	mov	r1, r7
 800cfe8:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800cfec:	f7f3 f94c 	bl	8000288 <__aeabi_dsub>
 800cff0:	f805 6b01 	strb.w	r6, [r5], #1
 800cff4:	9e01      	ldr	r6, [sp, #4]
 800cff6:	9f03      	ldr	r7, [sp, #12]
 800cff8:	1bae      	subs	r6, r5, r6
 800cffa:	42b7      	cmp	r7, r6
 800cffc:	4602      	mov	r2, r0
 800cffe:	460b      	mov	r3, r1
 800d000:	d135      	bne.n	800d06e <_dtoa_r+0x6e6>
 800d002:	f7f3 f943 	bl	800028c <__adddf3>
 800d006:	4642      	mov	r2, r8
 800d008:	464b      	mov	r3, r9
 800d00a:	4606      	mov	r6, r0
 800d00c:	460f      	mov	r7, r1
 800d00e:	f7f3 fd83 	bl	8000b18 <__aeabi_dcmpgt>
 800d012:	b9d0      	cbnz	r0, 800d04a <_dtoa_r+0x6c2>
 800d014:	4642      	mov	r2, r8
 800d016:	464b      	mov	r3, r9
 800d018:	4630      	mov	r0, r6
 800d01a:	4639      	mov	r1, r7
 800d01c:	f7f3 fd54 	bl	8000ac8 <__aeabi_dcmpeq>
 800d020:	b110      	cbz	r0, 800d028 <_dtoa_r+0x6a0>
 800d022:	f01a 0f01 	tst.w	sl, #1
 800d026:	d110      	bne.n	800d04a <_dtoa_r+0x6c2>
 800d028:	4620      	mov	r0, r4
 800d02a:	ee18 1a10 	vmov	r1, s16
 800d02e:	f000 fe87 	bl	800dd40 <_Bfree>
 800d032:	2300      	movs	r3, #0
 800d034:	9800      	ldr	r0, [sp, #0]
 800d036:	702b      	strb	r3, [r5, #0]
 800d038:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800d03a:	3001      	adds	r0, #1
 800d03c:	6018      	str	r0, [r3, #0]
 800d03e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d040:	2b00      	cmp	r3, #0
 800d042:	f43f acf1 	beq.w	800ca28 <_dtoa_r+0xa0>
 800d046:	601d      	str	r5, [r3, #0]
 800d048:	e4ee      	b.n	800ca28 <_dtoa_r+0xa0>
 800d04a:	9f00      	ldr	r7, [sp, #0]
 800d04c:	462b      	mov	r3, r5
 800d04e:	461d      	mov	r5, r3
 800d050:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d054:	2a39      	cmp	r2, #57	; 0x39
 800d056:	d106      	bne.n	800d066 <_dtoa_r+0x6de>
 800d058:	9a01      	ldr	r2, [sp, #4]
 800d05a:	429a      	cmp	r2, r3
 800d05c:	d1f7      	bne.n	800d04e <_dtoa_r+0x6c6>
 800d05e:	9901      	ldr	r1, [sp, #4]
 800d060:	2230      	movs	r2, #48	; 0x30
 800d062:	3701      	adds	r7, #1
 800d064:	700a      	strb	r2, [r1, #0]
 800d066:	781a      	ldrb	r2, [r3, #0]
 800d068:	3201      	adds	r2, #1
 800d06a:	701a      	strb	r2, [r3, #0]
 800d06c:	e790      	b.n	800cf90 <_dtoa_r+0x608>
 800d06e:	4ba6      	ldr	r3, [pc, #664]	; (800d308 <_dtoa_r+0x980>)
 800d070:	2200      	movs	r2, #0
 800d072:	f7f3 fac1 	bl	80005f8 <__aeabi_dmul>
 800d076:	2200      	movs	r2, #0
 800d078:	2300      	movs	r3, #0
 800d07a:	4606      	mov	r6, r0
 800d07c:	460f      	mov	r7, r1
 800d07e:	f7f3 fd23 	bl	8000ac8 <__aeabi_dcmpeq>
 800d082:	2800      	cmp	r0, #0
 800d084:	d09d      	beq.n	800cfc2 <_dtoa_r+0x63a>
 800d086:	e7cf      	b.n	800d028 <_dtoa_r+0x6a0>
 800d088:	9a08      	ldr	r2, [sp, #32]
 800d08a:	2a00      	cmp	r2, #0
 800d08c:	f000 80d7 	beq.w	800d23e <_dtoa_r+0x8b6>
 800d090:	9a06      	ldr	r2, [sp, #24]
 800d092:	2a01      	cmp	r2, #1
 800d094:	f300 80ba 	bgt.w	800d20c <_dtoa_r+0x884>
 800d098:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800d09a:	2a00      	cmp	r2, #0
 800d09c:	f000 80b2 	beq.w	800d204 <_dtoa_r+0x87c>
 800d0a0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800d0a4:	9e07      	ldr	r6, [sp, #28]
 800d0a6:	9d04      	ldr	r5, [sp, #16]
 800d0a8:	9a04      	ldr	r2, [sp, #16]
 800d0aa:	441a      	add	r2, r3
 800d0ac:	9204      	str	r2, [sp, #16]
 800d0ae:	9a05      	ldr	r2, [sp, #20]
 800d0b0:	2101      	movs	r1, #1
 800d0b2:	441a      	add	r2, r3
 800d0b4:	4620      	mov	r0, r4
 800d0b6:	9205      	str	r2, [sp, #20]
 800d0b8:	f000 ff44 	bl	800df44 <__i2b>
 800d0bc:	4607      	mov	r7, r0
 800d0be:	2d00      	cmp	r5, #0
 800d0c0:	dd0c      	ble.n	800d0dc <_dtoa_r+0x754>
 800d0c2:	9b05      	ldr	r3, [sp, #20]
 800d0c4:	2b00      	cmp	r3, #0
 800d0c6:	dd09      	ble.n	800d0dc <_dtoa_r+0x754>
 800d0c8:	42ab      	cmp	r3, r5
 800d0ca:	9a04      	ldr	r2, [sp, #16]
 800d0cc:	bfa8      	it	ge
 800d0ce:	462b      	movge	r3, r5
 800d0d0:	1ad2      	subs	r2, r2, r3
 800d0d2:	9204      	str	r2, [sp, #16]
 800d0d4:	9a05      	ldr	r2, [sp, #20]
 800d0d6:	1aed      	subs	r5, r5, r3
 800d0d8:	1ad3      	subs	r3, r2, r3
 800d0da:	9305      	str	r3, [sp, #20]
 800d0dc:	9b07      	ldr	r3, [sp, #28]
 800d0de:	b31b      	cbz	r3, 800d128 <_dtoa_r+0x7a0>
 800d0e0:	9b08      	ldr	r3, [sp, #32]
 800d0e2:	2b00      	cmp	r3, #0
 800d0e4:	f000 80af 	beq.w	800d246 <_dtoa_r+0x8be>
 800d0e8:	2e00      	cmp	r6, #0
 800d0ea:	dd13      	ble.n	800d114 <_dtoa_r+0x78c>
 800d0ec:	4639      	mov	r1, r7
 800d0ee:	4632      	mov	r2, r6
 800d0f0:	4620      	mov	r0, r4
 800d0f2:	f000 ffe7 	bl	800e0c4 <__pow5mult>
 800d0f6:	ee18 2a10 	vmov	r2, s16
 800d0fa:	4601      	mov	r1, r0
 800d0fc:	4607      	mov	r7, r0
 800d0fe:	4620      	mov	r0, r4
 800d100:	f000 ff36 	bl	800df70 <__multiply>
 800d104:	ee18 1a10 	vmov	r1, s16
 800d108:	4680      	mov	r8, r0
 800d10a:	4620      	mov	r0, r4
 800d10c:	f000 fe18 	bl	800dd40 <_Bfree>
 800d110:	ee08 8a10 	vmov	s16, r8
 800d114:	9b07      	ldr	r3, [sp, #28]
 800d116:	1b9a      	subs	r2, r3, r6
 800d118:	d006      	beq.n	800d128 <_dtoa_r+0x7a0>
 800d11a:	ee18 1a10 	vmov	r1, s16
 800d11e:	4620      	mov	r0, r4
 800d120:	f000 ffd0 	bl	800e0c4 <__pow5mult>
 800d124:	ee08 0a10 	vmov	s16, r0
 800d128:	2101      	movs	r1, #1
 800d12a:	4620      	mov	r0, r4
 800d12c:	f000 ff0a 	bl	800df44 <__i2b>
 800d130:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d132:	2b00      	cmp	r3, #0
 800d134:	4606      	mov	r6, r0
 800d136:	f340 8088 	ble.w	800d24a <_dtoa_r+0x8c2>
 800d13a:	461a      	mov	r2, r3
 800d13c:	4601      	mov	r1, r0
 800d13e:	4620      	mov	r0, r4
 800d140:	f000 ffc0 	bl	800e0c4 <__pow5mult>
 800d144:	9b06      	ldr	r3, [sp, #24]
 800d146:	2b01      	cmp	r3, #1
 800d148:	4606      	mov	r6, r0
 800d14a:	f340 8081 	ble.w	800d250 <_dtoa_r+0x8c8>
 800d14e:	f04f 0800 	mov.w	r8, #0
 800d152:	6933      	ldr	r3, [r6, #16]
 800d154:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800d158:	6918      	ldr	r0, [r3, #16]
 800d15a:	f000 fea3 	bl	800dea4 <__hi0bits>
 800d15e:	f1c0 0020 	rsb	r0, r0, #32
 800d162:	9b05      	ldr	r3, [sp, #20]
 800d164:	4418      	add	r0, r3
 800d166:	f010 001f 	ands.w	r0, r0, #31
 800d16a:	f000 8092 	beq.w	800d292 <_dtoa_r+0x90a>
 800d16e:	f1c0 0320 	rsb	r3, r0, #32
 800d172:	2b04      	cmp	r3, #4
 800d174:	f340 808a 	ble.w	800d28c <_dtoa_r+0x904>
 800d178:	f1c0 001c 	rsb	r0, r0, #28
 800d17c:	9b04      	ldr	r3, [sp, #16]
 800d17e:	4403      	add	r3, r0
 800d180:	9304      	str	r3, [sp, #16]
 800d182:	9b05      	ldr	r3, [sp, #20]
 800d184:	4403      	add	r3, r0
 800d186:	4405      	add	r5, r0
 800d188:	9305      	str	r3, [sp, #20]
 800d18a:	9b04      	ldr	r3, [sp, #16]
 800d18c:	2b00      	cmp	r3, #0
 800d18e:	dd07      	ble.n	800d1a0 <_dtoa_r+0x818>
 800d190:	ee18 1a10 	vmov	r1, s16
 800d194:	461a      	mov	r2, r3
 800d196:	4620      	mov	r0, r4
 800d198:	f000 ffee 	bl	800e178 <__lshift>
 800d19c:	ee08 0a10 	vmov	s16, r0
 800d1a0:	9b05      	ldr	r3, [sp, #20]
 800d1a2:	2b00      	cmp	r3, #0
 800d1a4:	dd05      	ble.n	800d1b2 <_dtoa_r+0x82a>
 800d1a6:	4631      	mov	r1, r6
 800d1a8:	461a      	mov	r2, r3
 800d1aa:	4620      	mov	r0, r4
 800d1ac:	f000 ffe4 	bl	800e178 <__lshift>
 800d1b0:	4606      	mov	r6, r0
 800d1b2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800d1b4:	2b00      	cmp	r3, #0
 800d1b6:	d06e      	beq.n	800d296 <_dtoa_r+0x90e>
 800d1b8:	ee18 0a10 	vmov	r0, s16
 800d1bc:	4631      	mov	r1, r6
 800d1be:	f001 f84b 	bl	800e258 <__mcmp>
 800d1c2:	2800      	cmp	r0, #0
 800d1c4:	da67      	bge.n	800d296 <_dtoa_r+0x90e>
 800d1c6:	9b00      	ldr	r3, [sp, #0]
 800d1c8:	3b01      	subs	r3, #1
 800d1ca:	ee18 1a10 	vmov	r1, s16
 800d1ce:	9300      	str	r3, [sp, #0]
 800d1d0:	220a      	movs	r2, #10
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	4620      	mov	r0, r4
 800d1d6:	f000 fdd5 	bl	800dd84 <__multadd>
 800d1da:	9b08      	ldr	r3, [sp, #32]
 800d1dc:	ee08 0a10 	vmov	s16, r0
 800d1e0:	2b00      	cmp	r3, #0
 800d1e2:	f000 81b1 	beq.w	800d548 <_dtoa_r+0xbc0>
 800d1e6:	2300      	movs	r3, #0
 800d1e8:	4639      	mov	r1, r7
 800d1ea:	220a      	movs	r2, #10
 800d1ec:	4620      	mov	r0, r4
 800d1ee:	f000 fdc9 	bl	800dd84 <__multadd>
 800d1f2:	9b02      	ldr	r3, [sp, #8]
 800d1f4:	2b00      	cmp	r3, #0
 800d1f6:	4607      	mov	r7, r0
 800d1f8:	f300 808e 	bgt.w	800d318 <_dtoa_r+0x990>
 800d1fc:	9b06      	ldr	r3, [sp, #24]
 800d1fe:	2b02      	cmp	r3, #2
 800d200:	dc51      	bgt.n	800d2a6 <_dtoa_r+0x91e>
 800d202:	e089      	b.n	800d318 <_dtoa_r+0x990>
 800d204:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800d206:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800d20a:	e74b      	b.n	800d0a4 <_dtoa_r+0x71c>
 800d20c:	9b03      	ldr	r3, [sp, #12]
 800d20e:	1e5e      	subs	r6, r3, #1
 800d210:	9b07      	ldr	r3, [sp, #28]
 800d212:	42b3      	cmp	r3, r6
 800d214:	bfbf      	itttt	lt
 800d216:	9b07      	ldrlt	r3, [sp, #28]
 800d218:	9607      	strlt	r6, [sp, #28]
 800d21a:	1af2      	sublt	r2, r6, r3
 800d21c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800d21e:	bfb6      	itet	lt
 800d220:	189b      	addlt	r3, r3, r2
 800d222:	1b9e      	subge	r6, r3, r6
 800d224:	930a      	strlt	r3, [sp, #40]	; 0x28
 800d226:	9b03      	ldr	r3, [sp, #12]
 800d228:	bfb8      	it	lt
 800d22a:	2600      	movlt	r6, #0
 800d22c:	2b00      	cmp	r3, #0
 800d22e:	bfb7      	itett	lt
 800d230:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800d234:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800d238:	1a9d      	sublt	r5, r3, r2
 800d23a:	2300      	movlt	r3, #0
 800d23c:	e734      	b.n	800d0a8 <_dtoa_r+0x720>
 800d23e:	9e07      	ldr	r6, [sp, #28]
 800d240:	9d04      	ldr	r5, [sp, #16]
 800d242:	9f08      	ldr	r7, [sp, #32]
 800d244:	e73b      	b.n	800d0be <_dtoa_r+0x736>
 800d246:	9a07      	ldr	r2, [sp, #28]
 800d248:	e767      	b.n	800d11a <_dtoa_r+0x792>
 800d24a:	9b06      	ldr	r3, [sp, #24]
 800d24c:	2b01      	cmp	r3, #1
 800d24e:	dc18      	bgt.n	800d282 <_dtoa_r+0x8fa>
 800d250:	f1ba 0f00 	cmp.w	sl, #0
 800d254:	d115      	bne.n	800d282 <_dtoa_r+0x8fa>
 800d256:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800d25a:	b993      	cbnz	r3, 800d282 <_dtoa_r+0x8fa>
 800d25c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800d260:	0d1b      	lsrs	r3, r3, #20
 800d262:	051b      	lsls	r3, r3, #20
 800d264:	b183      	cbz	r3, 800d288 <_dtoa_r+0x900>
 800d266:	9b04      	ldr	r3, [sp, #16]
 800d268:	3301      	adds	r3, #1
 800d26a:	9304      	str	r3, [sp, #16]
 800d26c:	9b05      	ldr	r3, [sp, #20]
 800d26e:	3301      	adds	r3, #1
 800d270:	9305      	str	r3, [sp, #20]
 800d272:	f04f 0801 	mov.w	r8, #1
 800d276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800d278:	2b00      	cmp	r3, #0
 800d27a:	f47f af6a 	bne.w	800d152 <_dtoa_r+0x7ca>
 800d27e:	2001      	movs	r0, #1
 800d280:	e76f      	b.n	800d162 <_dtoa_r+0x7da>
 800d282:	f04f 0800 	mov.w	r8, #0
 800d286:	e7f6      	b.n	800d276 <_dtoa_r+0x8ee>
 800d288:	4698      	mov	r8, r3
 800d28a:	e7f4      	b.n	800d276 <_dtoa_r+0x8ee>
 800d28c:	f43f af7d 	beq.w	800d18a <_dtoa_r+0x802>
 800d290:	4618      	mov	r0, r3
 800d292:	301c      	adds	r0, #28
 800d294:	e772      	b.n	800d17c <_dtoa_r+0x7f4>
 800d296:	9b03      	ldr	r3, [sp, #12]
 800d298:	2b00      	cmp	r3, #0
 800d29a:	dc37      	bgt.n	800d30c <_dtoa_r+0x984>
 800d29c:	9b06      	ldr	r3, [sp, #24]
 800d29e:	2b02      	cmp	r3, #2
 800d2a0:	dd34      	ble.n	800d30c <_dtoa_r+0x984>
 800d2a2:	9b03      	ldr	r3, [sp, #12]
 800d2a4:	9302      	str	r3, [sp, #8]
 800d2a6:	9b02      	ldr	r3, [sp, #8]
 800d2a8:	b96b      	cbnz	r3, 800d2c6 <_dtoa_r+0x93e>
 800d2aa:	4631      	mov	r1, r6
 800d2ac:	2205      	movs	r2, #5
 800d2ae:	4620      	mov	r0, r4
 800d2b0:	f000 fd68 	bl	800dd84 <__multadd>
 800d2b4:	4601      	mov	r1, r0
 800d2b6:	4606      	mov	r6, r0
 800d2b8:	ee18 0a10 	vmov	r0, s16
 800d2bc:	f000 ffcc 	bl	800e258 <__mcmp>
 800d2c0:	2800      	cmp	r0, #0
 800d2c2:	f73f adbb 	bgt.w	800ce3c <_dtoa_r+0x4b4>
 800d2c6:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d2c8:	9d01      	ldr	r5, [sp, #4]
 800d2ca:	43db      	mvns	r3, r3
 800d2cc:	9300      	str	r3, [sp, #0]
 800d2ce:	f04f 0800 	mov.w	r8, #0
 800d2d2:	4631      	mov	r1, r6
 800d2d4:	4620      	mov	r0, r4
 800d2d6:	f000 fd33 	bl	800dd40 <_Bfree>
 800d2da:	2f00      	cmp	r7, #0
 800d2dc:	f43f aea4 	beq.w	800d028 <_dtoa_r+0x6a0>
 800d2e0:	f1b8 0f00 	cmp.w	r8, #0
 800d2e4:	d005      	beq.n	800d2f2 <_dtoa_r+0x96a>
 800d2e6:	45b8      	cmp	r8, r7
 800d2e8:	d003      	beq.n	800d2f2 <_dtoa_r+0x96a>
 800d2ea:	4641      	mov	r1, r8
 800d2ec:	4620      	mov	r0, r4
 800d2ee:	f000 fd27 	bl	800dd40 <_Bfree>
 800d2f2:	4639      	mov	r1, r7
 800d2f4:	4620      	mov	r0, r4
 800d2f6:	f000 fd23 	bl	800dd40 <_Bfree>
 800d2fa:	e695      	b.n	800d028 <_dtoa_r+0x6a0>
 800d2fc:	2600      	movs	r6, #0
 800d2fe:	4637      	mov	r7, r6
 800d300:	e7e1      	b.n	800d2c6 <_dtoa_r+0x93e>
 800d302:	9700      	str	r7, [sp, #0]
 800d304:	4637      	mov	r7, r6
 800d306:	e599      	b.n	800ce3c <_dtoa_r+0x4b4>
 800d308:	40240000 	.word	0x40240000
 800d30c:	9b08      	ldr	r3, [sp, #32]
 800d30e:	2b00      	cmp	r3, #0
 800d310:	f000 80ca 	beq.w	800d4a8 <_dtoa_r+0xb20>
 800d314:	9b03      	ldr	r3, [sp, #12]
 800d316:	9302      	str	r3, [sp, #8]
 800d318:	2d00      	cmp	r5, #0
 800d31a:	dd05      	ble.n	800d328 <_dtoa_r+0x9a0>
 800d31c:	4639      	mov	r1, r7
 800d31e:	462a      	mov	r2, r5
 800d320:	4620      	mov	r0, r4
 800d322:	f000 ff29 	bl	800e178 <__lshift>
 800d326:	4607      	mov	r7, r0
 800d328:	f1b8 0f00 	cmp.w	r8, #0
 800d32c:	d05b      	beq.n	800d3e6 <_dtoa_r+0xa5e>
 800d32e:	6879      	ldr	r1, [r7, #4]
 800d330:	4620      	mov	r0, r4
 800d332:	f000 fcc5 	bl	800dcc0 <_Balloc>
 800d336:	4605      	mov	r5, r0
 800d338:	b928      	cbnz	r0, 800d346 <_dtoa_r+0x9be>
 800d33a:	4b87      	ldr	r3, [pc, #540]	; (800d558 <_dtoa_r+0xbd0>)
 800d33c:	4602      	mov	r2, r0
 800d33e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800d342:	f7ff bb3b 	b.w	800c9bc <_dtoa_r+0x34>
 800d346:	693a      	ldr	r2, [r7, #16]
 800d348:	3202      	adds	r2, #2
 800d34a:	0092      	lsls	r2, r2, #2
 800d34c:	f107 010c 	add.w	r1, r7, #12
 800d350:	300c      	adds	r0, #12
 800d352:	f000 fca7 	bl	800dca4 <memcpy>
 800d356:	2201      	movs	r2, #1
 800d358:	4629      	mov	r1, r5
 800d35a:	4620      	mov	r0, r4
 800d35c:	f000 ff0c 	bl	800e178 <__lshift>
 800d360:	9b01      	ldr	r3, [sp, #4]
 800d362:	f103 0901 	add.w	r9, r3, #1
 800d366:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800d36a:	4413      	add	r3, r2
 800d36c:	9305      	str	r3, [sp, #20]
 800d36e:	f00a 0301 	and.w	r3, sl, #1
 800d372:	46b8      	mov	r8, r7
 800d374:	9304      	str	r3, [sp, #16]
 800d376:	4607      	mov	r7, r0
 800d378:	4631      	mov	r1, r6
 800d37a:	ee18 0a10 	vmov	r0, s16
 800d37e:	f7ff fa75 	bl	800c86c <quorem>
 800d382:	4641      	mov	r1, r8
 800d384:	9002      	str	r0, [sp, #8]
 800d386:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d38a:	ee18 0a10 	vmov	r0, s16
 800d38e:	f000 ff63 	bl	800e258 <__mcmp>
 800d392:	463a      	mov	r2, r7
 800d394:	9003      	str	r0, [sp, #12]
 800d396:	4631      	mov	r1, r6
 800d398:	4620      	mov	r0, r4
 800d39a:	f000 ff79 	bl	800e290 <__mdiff>
 800d39e:	68c2      	ldr	r2, [r0, #12]
 800d3a0:	f109 3bff 	add.w	fp, r9, #4294967295
 800d3a4:	4605      	mov	r5, r0
 800d3a6:	bb02      	cbnz	r2, 800d3ea <_dtoa_r+0xa62>
 800d3a8:	4601      	mov	r1, r0
 800d3aa:	ee18 0a10 	vmov	r0, s16
 800d3ae:	f000 ff53 	bl	800e258 <__mcmp>
 800d3b2:	4602      	mov	r2, r0
 800d3b4:	4629      	mov	r1, r5
 800d3b6:	4620      	mov	r0, r4
 800d3b8:	9207      	str	r2, [sp, #28]
 800d3ba:	f000 fcc1 	bl	800dd40 <_Bfree>
 800d3be:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800d3c2:	ea43 0102 	orr.w	r1, r3, r2
 800d3c6:	9b04      	ldr	r3, [sp, #16]
 800d3c8:	430b      	orrs	r3, r1
 800d3ca:	464d      	mov	r5, r9
 800d3cc:	d10f      	bne.n	800d3ee <_dtoa_r+0xa66>
 800d3ce:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d3d2:	d02a      	beq.n	800d42a <_dtoa_r+0xaa2>
 800d3d4:	9b03      	ldr	r3, [sp, #12]
 800d3d6:	2b00      	cmp	r3, #0
 800d3d8:	dd02      	ble.n	800d3e0 <_dtoa_r+0xa58>
 800d3da:	9b02      	ldr	r3, [sp, #8]
 800d3dc:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800d3e0:	f88b a000 	strb.w	sl, [fp]
 800d3e4:	e775      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d3e6:	4638      	mov	r0, r7
 800d3e8:	e7ba      	b.n	800d360 <_dtoa_r+0x9d8>
 800d3ea:	2201      	movs	r2, #1
 800d3ec:	e7e2      	b.n	800d3b4 <_dtoa_r+0xa2c>
 800d3ee:	9b03      	ldr	r3, [sp, #12]
 800d3f0:	2b00      	cmp	r3, #0
 800d3f2:	db04      	blt.n	800d3fe <_dtoa_r+0xa76>
 800d3f4:	9906      	ldr	r1, [sp, #24]
 800d3f6:	430b      	orrs	r3, r1
 800d3f8:	9904      	ldr	r1, [sp, #16]
 800d3fa:	430b      	orrs	r3, r1
 800d3fc:	d122      	bne.n	800d444 <_dtoa_r+0xabc>
 800d3fe:	2a00      	cmp	r2, #0
 800d400:	ddee      	ble.n	800d3e0 <_dtoa_r+0xa58>
 800d402:	ee18 1a10 	vmov	r1, s16
 800d406:	2201      	movs	r2, #1
 800d408:	4620      	mov	r0, r4
 800d40a:	f000 feb5 	bl	800e178 <__lshift>
 800d40e:	4631      	mov	r1, r6
 800d410:	ee08 0a10 	vmov	s16, r0
 800d414:	f000 ff20 	bl	800e258 <__mcmp>
 800d418:	2800      	cmp	r0, #0
 800d41a:	dc03      	bgt.n	800d424 <_dtoa_r+0xa9c>
 800d41c:	d1e0      	bne.n	800d3e0 <_dtoa_r+0xa58>
 800d41e:	f01a 0f01 	tst.w	sl, #1
 800d422:	d0dd      	beq.n	800d3e0 <_dtoa_r+0xa58>
 800d424:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d428:	d1d7      	bne.n	800d3da <_dtoa_r+0xa52>
 800d42a:	2339      	movs	r3, #57	; 0x39
 800d42c:	f88b 3000 	strb.w	r3, [fp]
 800d430:	462b      	mov	r3, r5
 800d432:	461d      	mov	r5, r3
 800d434:	3b01      	subs	r3, #1
 800d436:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800d43a:	2a39      	cmp	r2, #57	; 0x39
 800d43c:	d071      	beq.n	800d522 <_dtoa_r+0xb9a>
 800d43e:	3201      	adds	r2, #1
 800d440:	701a      	strb	r2, [r3, #0]
 800d442:	e746      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d444:	2a00      	cmp	r2, #0
 800d446:	dd07      	ble.n	800d458 <_dtoa_r+0xad0>
 800d448:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800d44c:	d0ed      	beq.n	800d42a <_dtoa_r+0xaa2>
 800d44e:	f10a 0301 	add.w	r3, sl, #1
 800d452:	f88b 3000 	strb.w	r3, [fp]
 800d456:	e73c      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d458:	9b05      	ldr	r3, [sp, #20]
 800d45a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800d45e:	4599      	cmp	r9, r3
 800d460:	d047      	beq.n	800d4f2 <_dtoa_r+0xb6a>
 800d462:	ee18 1a10 	vmov	r1, s16
 800d466:	2300      	movs	r3, #0
 800d468:	220a      	movs	r2, #10
 800d46a:	4620      	mov	r0, r4
 800d46c:	f000 fc8a 	bl	800dd84 <__multadd>
 800d470:	45b8      	cmp	r8, r7
 800d472:	ee08 0a10 	vmov	s16, r0
 800d476:	f04f 0300 	mov.w	r3, #0
 800d47a:	f04f 020a 	mov.w	r2, #10
 800d47e:	4641      	mov	r1, r8
 800d480:	4620      	mov	r0, r4
 800d482:	d106      	bne.n	800d492 <_dtoa_r+0xb0a>
 800d484:	f000 fc7e 	bl	800dd84 <__multadd>
 800d488:	4680      	mov	r8, r0
 800d48a:	4607      	mov	r7, r0
 800d48c:	f109 0901 	add.w	r9, r9, #1
 800d490:	e772      	b.n	800d378 <_dtoa_r+0x9f0>
 800d492:	f000 fc77 	bl	800dd84 <__multadd>
 800d496:	4639      	mov	r1, r7
 800d498:	4680      	mov	r8, r0
 800d49a:	2300      	movs	r3, #0
 800d49c:	220a      	movs	r2, #10
 800d49e:	4620      	mov	r0, r4
 800d4a0:	f000 fc70 	bl	800dd84 <__multadd>
 800d4a4:	4607      	mov	r7, r0
 800d4a6:	e7f1      	b.n	800d48c <_dtoa_r+0xb04>
 800d4a8:	9b03      	ldr	r3, [sp, #12]
 800d4aa:	9302      	str	r3, [sp, #8]
 800d4ac:	9d01      	ldr	r5, [sp, #4]
 800d4ae:	ee18 0a10 	vmov	r0, s16
 800d4b2:	4631      	mov	r1, r6
 800d4b4:	f7ff f9da 	bl	800c86c <quorem>
 800d4b8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800d4bc:	9b01      	ldr	r3, [sp, #4]
 800d4be:	f805 ab01 	strb.w	sl, [r5], #1
 800d4c2:	1aea      	subs	r2, r5, r3
 800d4c4:	9b02      	ldr	r3, [sp, #8]
 800d4c6:	4293      	cmp	r3, r2
 800d4c8:	dd09      	ble.n	800d4de <_dtoa_r+0xb56>
 800d4ca:	ee18 1a10 	vmov	r1, s16
 800d4ce:	2300      	movs	r3, #0
 800d4d0:	220a      	movs	r2, #10
 800d4d2:	4620      	mov	r0, r4
 800d4d4:	f000 fc56 	bl	800dd84 <__multadd>
 800d4d8:	ee08 0a10 	vmov	s16, r0
 800d4dc:	e7e7      	b.n	800d4ae <_dtoa_r+0xb26>
 800d4de:	9b02      	ldr	r3, [sp, #8]
 800d4e0:	2b00      	cmp	r3, #0
 800d4e2:	bfc8      	it	gt
 800d4e4:	461d      	movgt	r5, r3
 800d4e6:	9b01      	ldr	r3, [sp, #4]
 800d4e8:	bfd8      	it	le
 800d4ea:	2501      	movle	r5, #1
 800d4ec:	441d      	add	r5, r3
 800d4ee:	f04f 0800 	mov.w	r8, #0
 800d4f2:	ee18 1a10 	vmov	r1, s16
 800d4f6:	2201      	movs	r2, #1
 800d4f8:	4620      	mov	r0, r4
 800d4fa:	f000 fe3d 	bl	800e178 <__lshift>
 800d4fe:	4631      	mov	r1, r6
 800d500:	ee08 0a10 	vmov	s16, r0
 800d504:	f000 fea8 	bl	800e258 <__mcmp>
 800d508:	2800      	cmp	r0, #0
 800d50a:	dc91      	bgt.n	800d430 <_dtoa_r+0xaa8>
 800d50c:	d102      	bne.n	800d514 <_dtoa_r+0xb8c>
 800d50e:	f01a 0f01 	tst.w	sl, #1
 800d512:	d18d      	bne.n	800d430 <_dtoa_r+0xaa8>
 800d514:	462b      	mov	r3, r5
 800d516:	461d      	mov	r5, r3
 800d518:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800d51c:	2a30      	cmp	r2, #48	; 0x30
 800d51e:	d0fa      	beq.n	800d516 <_dtoa_r+0xb8e>
 800d520:	e6d7      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d522:	9a01      	ldr	r2, [sp, #4]
 800d524:	429a      	cmp	r2, r3
 800d526:	d184      	bne.n	800d432 <_dtoa_r+0xaaa>
 800d528:	9b00      	ldr	r3, [sp, #0]
 800d52a:	3301      	adds	r3, #1
 800d52c:	9300      	str	r3, [sp, #0]
 800d52e:	2331      	movs	r3, #49	; 0x31
 800d530:	7013      	strb	r3, [r2, #0]
 800d532:	e6ce      	b.n	800d2d2 <_dtoa_r+0x94a>
 800d534:	4b09      	ldr	r3, [pc, #36]	; (800d55c <_dtoa_r+0xbd4>)
 800d536:	f7ff ba95 	b.w	800ca64 <_dtoa_r+0xdc>
 800d53a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800d53c:	2b00      	cmp	r3, #0
 800d53e:	f47f aa6e 	bne.w	800ca1e <_dtoa_r+0x96>
 800d542:	4b07      	ldr	r3, [pc, #28]	; (800d560 <_dtoa_r+0xbd8>)
 800d544:	f7ff ba8e 	b.w	800ca64 <_dtoa_r+0xdc>
 800d548:	9b02      	ldr	r3, [sp, #8]
 800d54a:	2b00      	cmp	r3, #0
 800d54c:	dcae      	bgt.n	800d4ac <_dtoa_r+0xb24>
 800d54e:	9b06      	ldr	r3, [sp, #24]
 800d550:	2b02      	cmp	r3, #2
 800d552:	f73f aea8 	bgt.w	800d2a6 <_dtoa_r+0x91e>
 800d556:	e7a9      	b.n	800d4ac <_dtoa_r+0xb24>
 800d558:	0800fb99 	.word	0x0800fb99
 800d55c:	0800f904 	.word	0x0800f904
 800d560:	0800fb31 	.word	0x0800fb31

0800d564 <fiprintf>:
 800d564:	b40e      	push	{r1, r2, r3}
 800d566:	b503      	push	{r0, r1, lr}
 800d568:	4601      	mov	r1, r0
 800d56a:	ab03      	add	r3, sp, #12
 800d56c:	4805      	ldr	r0, [pc, #20]	; (800d584 <fiprintf+0x20>)
 800d56e:	f853 2b04 	ldr.w	r2, [r3], #4
 800d572:	6800      	ldr	r0, [r0, #0]
 800d574:	9301      	str	r3, [sp, #4]
 800d576:	f001 fae1 	bl	800eb3c <_vfiprintf_r>
 800d57a:	b002      	add	sp, #8
 800d57c:	f85d eb04 	ldr.w	lr, [sp], #4
 800d580:	b003      	add	sp, #12
 800d582:	4770      	bx	lr
 800d584:	20000020 	.word	0x20000020

0800d588 <rshift>:
 800d588:	6903      	ldr	r3, [r0, #16]
 800d58a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800d58e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800d592:	ea4f 1261 	mov.w	r2, r1, asr #5
 800d596:	f100 0414 	add.w	r4, r0, #20
 800d59a:	dd45      	ble.n	800d628 <rshift+0xa0>
 800d59c:	f011 011f 	ands.w	r1, r1, #31
 800d5a0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800d5a4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800d5a8:	d10c      	bne.n	800d5c4 <rshift+0x3c>
 800d5aa:	f100 0710 	add.w	r7, r0, #16
 800d5ae:	4629      	mov	r1, r5
 800d5b0:	42b1      	cmp	r1, r6
 800d5b2:	d334      	bcc.n	800d61e <rshift+0x96>
 800d5b4:	1a9b      	subs	r3, r3, r2
 800d5b6:	009b      	lsls	r3, r3, #2
 800d5b8:	1eea      	subs	r2, r5, #3
 800d5ba:	4296      	cmp	r6, r2
 800d5bc:	bf38      	it	cc
 800d5be:	2300      	movcc	r3, #0
 800d5c0:	4423      	add	r3, r4
 800d5c2:	e015      	b.n	800d5f0 <rshift+0x68>
 800d5c4:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800d5c8:	f1c1 0820 	rsb	r8, r1, #32
 800d5cc:	40cf      	lsrs	r7, r1
 800d5ce:	f105 0e04 	add.w	lr, r5, #4
 800d5d2:	46a1      	mov	r9, r4
 800d5d4:	4576      	cmp	r6, lr
 800d5d6:	46f4      	mov	ip, lr
 800d5d8:	d815      	bhi.n	800d606 <rshift+0x7e>
 800d5da:	1a9a      	subs	r2, r3, r2
 800d5dc:	0092      	lsls	r2, r2, #2
 800d5de:	3a04      	subs	r2, #4
 800d5e0:	3501      	adds	r5, #1
 800d5e2:	42ae      	cmp	r6, r5
 800d5e4:	bf38      	it	cc
 800d5e6:	2200      	movcc	r2, #0
 800d5e8:	18a3      	adds	r3, r4, r2
 800d5ea:	50a7      	str	r7, [r4, r2]
 800d5ec:	b107      	cbz	r7, 800d5f0 <rshift+0x68>
 800d5ee:	3304      	adds	r3, #4
 800d5f0:	1b1a      	subs	r2, r3, r4
 800d5f2:	42a3      	cmp	r3, r4
 800d5f4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800d5f8:	bf08      	it	eq
 800d5fa:	2300      	moveq	r3, #0
 800d5fc:	6102      	str	r2, [r0, #16]
 800d5fe:	bf08      	it	eq
 800d600:	6143      	streq	r3, [r0, #20]
 800d602:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d606:	f8dc c000 	ldr.w	ip, [ip]
 800d60a:	fa0c fc08 	lsl.w	ip, ip, r8
 800d60e:	ea4c 0707 	orr.w	r7, ip, r7
 800d612:	f849 7b04 	str.w	r7, [r9], #4
 800d616:	f85e 7b04 	ldr.w	r7, [lr], #4
 800d61a:	40cf      	lsrs	r7, r1
 800d61c:	e7da      	b.n	800d5d4 <rshift+0x4c>
 800d61e:	f851 cb04 	ldr.w	ip, [r1], #4
 800d622:	f847 cf04 	str.w	ip, [r7, #4]!
 800d626:	e7c3      	b.n	800d5b0 <rshift+0x28>
 800d628:	4623      	mov	r3, r4
 800d62a:	e7e1      	b.n	800d5f0 <rshift+0x68>

0800d62c <__hexdig_fun>:
 800d62c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800d630:	2b09      	cmp	r3, #9
 800d632:	d802      	bhi.n	800d63a <__hexdig_fun+0xe>
 800d634:	3820      	subs	r0, #32
 800d636:	b2c0      	uxtb	r0, r0
 800d638:	4770      	bx	lr
 800d63a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800d63e:	2b05      	cmp	r3, #5
 800d640:	d801      	bhi.n	800d646 <__hexdig_fun+0x1a>
 800d642:	3847      	subs	r0, #71	; 0x47
 800d644:	e7f7      	b.n	800d636 <__hexdig_fun+0xa>
 800d646:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800d64a:	2b05      	cmp	r3, #5
 800d64c:	d801      	bhi.n	800d652 <__hexdig_fun+0x26>
 800d64e:	3827      	subs	r0, #39	; 0x27
 800d650:	e7f1      	b.n	800d636 <__hexdig_fun+0xa>
 800d652:	2000      	movs	r0, #0
 800d654:	4770      	bx	lr
	...

0800d658 <__gethex>:
 800d658:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d65c:	ed2d 8b02 	vpush	{d8}
 800d660:	b089      	sub	sp, #36	; 0x24
 800d662:	ee08 0a10 	vmov	s16, r0
 800d666:	9304      	str	r3, [sp, #16]
 800d668:	4bb4      	ldr	r3, [pc, #720]	; (800d93c <__gethex+0x2e4>)
 800d66a:	681b      	ldr	r3, [r3, #0]
 800d66c:	9301      	str	r3, [sp, #4]
 800d66e:	4618      	mov	r0, r3
 800d670:	468b      	mov	fp, r1
 800d672:	4690      	mov	r8, r2
 800d674:	f7f2 fdac 	bl	80001d0 <strlen>
 800d678:	9b01      	ldr	r3, [sp, #4]
 800d67a:	f8db 2000 	ldr.w	r2, [fp]
 800d67e:	4403      	add	r3, r0
 800d680:	4682      	mov	sl, r0
 800d682:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800d686:	9305      	str	r3, [sp, #20]
 800d688:	1c93      	adds	r3, r2, #2
 800d68a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800d68e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800d692:	32fe      	adds	r2, #254	; 0xfe
 800d694:	18d1      	adds	r1, r2, r3
 800d696:	461f      	mov	r7, r3
 800d698:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d69c:	9100      	str	r1, [sp, #0]
 800d69e:	2830      	cmp	r0, #48	; 0x30
 800d6a0:	d0f8      	beq.n	800d694 <__gethex+0x3c>
 800d6a2:	f7ff ffc3 	bl	800d62c <__hexdig_fun>
 800d6a6:	4604      	mov	r4, r0
 800d6a8:	2800      	cmp	r0, #0
 800d6aa:	d13a      	bne.n	800d722 <__gethex+0xca>
 800d6ac:	9901      	ldr	r1, [sp, #4]
 800d6ae:	4652      	mov	r2, sl
 800d6b0:	4638      	mov	r0, r7
 800d6b2:	f001 fb8d 	bl	800edd0 <strncmp>
 800d6b6:	4605      	mov	r5, r0
 800d6b8:	2800      	cmp	r0, #0
 800d6ba:	d168      	bne.n	800d78e <__gethex+0x136>
 800d6bc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800d6c0:	eb07 060a 	add.w	r6, r7, sl
 800d6c4:	f7ff ffb2 	bl	800d62c <__hexdig_fun>
 800d6c8:	2800      	cmp	r0, #0
 800d6ca:	d062      	beq.n	800d792 <__gethex+0x13a>
 800d6cc:	4633      	mov	r3, r6
 800d6ce:	7818      	ldrb	r0, [r3, #0]
 800d6d0:	2830      	cmp	r0, #48	; 0x30
 800d6d2:	461f      	mov	r7, r3
 800d6d4:	f103 0301 	add.w	r3, r3, #1
 800d6d8:	d0f9      	beq.n	800d6ce <__gethex+0x76>
 800d6da:	f7ff ffa7 	bl	800d62c <__hexdig_fun>
 800d6de:	2301      	movs	r3, #1
 800d6e0:	fab0 f480 	clz	r4, r0
 800d6e4:	0964      	lsrs	r4, r4, #5
 800d6e6:	4635      	mov	r5, r6
 800d6e8:	9300      	str	r3, [sp, #0]
 800d6ea:	463a      	mov	r2, r7
 800d6ec:	4616      	mov	r6, r2
 800d6ee:	3201      	adds	r2, #1
 800d6f0:	7830      	ldrb	r0, [r6, #0]
 800d6f2:	f7ff ff9b 	bl	800d62c <__hexdig_fun>
 800d6f6:	2800      	cmp	r0, #0
 800d6f8:	d1f8      	bne.n	800d6ec <__gethex+0x94>
 800d6fa:	9901      	ldr	r1, [sp, #4]
 800d6fc:	4652      	mov	r2, sl
 800d6fe:	4630      	mov	r0, r6
 800d700:	f001 fb66 	bl	800edd0 <strncmp>
 800d704:	b980      	cbnz	r0, 800d728 <__gethex+0xd0>
 800d706:	b94d      	cbnz	r5, 800d71c <__gethex+0xc4>
 800d708:	eb06 050a 	add.w	r5, r6, sl
 800d70c:	462a      	mov	r2, r5
 800d70e:	4616      	mov	r6, r2
 800d710:	3201      	adds	r2, #1
 800d712:	7830      	ldrb	r0, [r6, #0]
 800d714:	f7ff ff8a 	bl	800d62c <__hexdig_fun>
 800d718:	2800      	cmp	r0, #0
 800d71a:	d1f8      	bne.n	800d70e <__gethex+0xb6>
 800d71c:	1bad      	subs	r5, r5, r6
 800d71e:	00ad      	lsls	r5, r5, #2
 800d720:	e004      	b.n	800d72c <__gethex+0xd4>
 800d722:	2400      	movs	r4, #0
 800d724:	4625      	mov	r5, r4
 800d726:	e7e0      	b.n	800d6ea <__gethex+0x92>
 800d728:	2d00      	cmp	r5, #0
 800d72a:	d1f7      	bne.n	800d71c <__gethex+0xc4>
 800d72c:	7833      	ldrb	r3, [r6, #0]
 800d72e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800d732:	2b50      	cmp	r3, #80	; 0x50
 800d734:	d13b      	bne.n	800d7ae <__gethex+0x156>
 800d736:	7873      	ldrb	r3, [r6, #1]
 800d738:	2b2b      	cmp	r3, #43	; 0x2b
 800d73a:	d02c      	beq.n	800d796 <__gethex+0x13e>
 800d73c:	2b2d      	cmp	r3, #45	; 0x2d
 800d73e:	d02e      	beq.n	800d79e <__gethex+0x146>
 800d740:	1c71      	adds	r1, r6, #1
 800d742:	f04f 0900 	mov.w	r9, #0
 800d746:	7808      	ldrb	r0, [r1, #0]
 800d748:	f7ff ff70 	bl	800d62c <__hexdig_fun>
 800d74c:	1e43      	subs	r3, r0, #1
 800d74e:	b2db      	uxtb	r3, r3
 800d750:	2b18      	cmp	r3, #24
 800d752:	d82c      	bhi.n	800d7ae <__gethex+0x156>
 800d754:	f1a0 0210 	sub.w	r2, r0, #16
 800d758:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800d75c:	f7ff ff66 	bl	800d62c <__hexdig_fun>
 800d760:	1e43      	subs	r3, r0, #1
 800d762:	b2db      	uxtb	r3, r3
 800d764:	2b18      	cmp	r3, #24
 800d766:	d91d      	bls.n	800d7a4 <__gethex+0x14c>
 800d768:	f1b9 0f00 	cmp.w	r9, #0
 800d76c:	d000      	beq.n	800d770 <__gethex+0x118>
 800d76e:	4252      	negs	r2, r2
 800d770:	4415      	add	r5, r2
 800d772:	f8cb 1000 	str.w	r1, [fp]
 800d776:	b1e4      	cbz	r4, 800d7b2 <__gethex+0x15a>
 800d778:	9b00      	ldr	r3, [sp, #0]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	bf14      	ite	ne
 800d77e:	2700      	movne	r7, #0
 800d780:	2706      	moveq	r7, #6
 800d782:	4638      	mov	r0, r7
 800d784:	b009      	add	sp, #36	; 0x24
 800d786:	ecbd 8b02 	vpop	{d8}
 800d78a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d78e:	463e      	mov	r6, r7
 800d790:	4625      	mov	r5, r4
 800d792:	2401      	movs	r4, #1
 800d794:	e7ca      	b.n	800d72c <__gethex+0xd4>
 800d796:	f04f 0900 	mov.w	r9, #0
 800d79a:	1cb1      	adds	r1, r6, #2
 800d79c:	e7d3      	b.n	800d746 <__gethex+0xee>
 800d79e:	f04f 0901 	mov.w	r9, #1
 800d7a2:	e7fa      	b.n	800d79a <__gethex+0x142>
 800d7a4:	230a      	movs	r3, #10
 800d7a6:	fb03 0202 	mla	r2, r3, r2, r0
 800d7aa:	3a10      	subs	r2, #16
 800d7ac:	e7d4      	b.n	800d758 <__gethex+0x100>
 800d7ae:	4631      	mov	r1, r6
 800d7b0:	e7df      	b.n	800d772 <__gethex+0x11a>
 800d7b2:	1bf3      	subs	r3, r6, r7
 800d7b4:	3b01      	subs	r3, #1
 800d7b6:	4621      	mov	r1, r4
 800d7b8:	2b07      	cmp	r3, #7
 800d7ba:	dc0b      	bgt.n	800d7d4 <__gethex+0x17c>
 800d7bc:	ee18 0a10 	vmov	r0, s16
 800d7c0:	f000 fa7e 	bl	800dcc0 <_Balloc>
 800d7c4:	4604      	mov	r4, r0
 800d7c6:	b940      	cbnz	r0, 800d7da <__gethex+0x182>
 800d7c8:	4b5d      	ldr	r3, [pc, #372]	; (800d940 <__gethex+0x2e8>)
 800d7ca:	4602      	mov	r2, r0
 800d7cc:	21de      	movs	r1, #222	; 0xde
 800d7ce:	485d      	ldr	r0, [pc, #372]	; (800d944 <__gethex+0x2ec>)
 800d7d0:	f7ff f82e 	bl	800c830 <__assert_func>
 800d7d4:	3101      	adds	r1, #1
 800d7d6:	105b      	asrs	r3, r3, #1
 800d7d8:	e7ee      	b.n	800d7b8 <__gethex+0x160>
 800d7da:	f100 0914 	add.w	r9, r0, #20
 800d7de:	f04f 0b00 	mov.w	fp, #0
 800d7e2:	f1ca 0301 	rsb	r3, sl, #1
 800d7e6:	f8cd 9008 	str.w	r9, [sp, #8]
 800d7ea:	f8cd b000 	str.w	fp, [sp]
 800d7ee:	9306      	str	r3, [sp, #24]
 800d7f0:	42b7      	cmp	r7, r6
 800d7f2:	d340      	bcc.n	800d876 <__gethex+0x21e>
 800d7f4:	9802      	ldr	r0, [sp, #8]
 800d7f6:	9b00      	ldr	r3, [sp, #0]
 800d7f8:	f840 3b04 	str.w	r3, [r0], #4
 800d7fc:	eba0 0009 	sub.w	r0, r0, r9
 800d800:	1080      	asrs	r0, r0, #2
 800d802:	0146      	lsls	r6, r0, #5
 800d804:	6120      	str	r0, [r4, #16]
 800d806:	4618      	mov	r0, r3
 800d808:	f000 fb4c 	bl	800dea4 <__hi0bits>
 800d80c:	1a30      	subs	r0, r6, r0
 800d80e:	f8d8 6000 	ldr.w	r6, [r8]
 800d812:	42b0      	cmp	r0, r6
 800d814:	dd63      	ble.n	800d8de <__gethex+0x286>
 800d816:	1b87      	subs	r7, r0, r6
 800d818:	4639      	mov	r1, r7
 800d81a:	4620      	mov	r0, r4
 800d81c:	f000 fef0 	bl	800e600 <__any_on>
 800d820:	4682      	mov	sl, r0
 800d822:	b1a8      	cbz	r0, 800d850 <__gethex+0x1f8>
 800d824:	1e7b      	subs	r3, r7, #1
 800d826:	1159      	asrs	r1, r3, #5
 800d828:	f003 021f 	and.w	r2, r3, #31
 800d82c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800d830:	f04f 0a01 	mov.w	sl, #1
 800d834:	fa0a f202 	lsl.w	r2, sl, r2
 800d838:	420a      	tst	r2, r1
 800d83a:	d009      	beq.n	800d850 <__gethex+0x1f8>
 800d83c:	4553      	cmp	r3, sl
 800d83e:	dd05      	ble.n	800d84c <__gethex+0x1f4>
 800d840:	1eb9      	subs	r1, r7, #2
 800d842:	4620      	mov	r0, r4
 800d844:	f000 fedc 	bl	800e600 <__any_on>
 800d848:	2800      	cmp	r0, #0
 800d84a:	d145      	bne.n	800d8d8 <__gethex+0x280>
 800d84c:	f04f 0a02 	mov.w	sl, #2
 800d850:	4639      	mov	r1, r7
 800d852:	4620      	mov	r0, r4
 800d854:	f7ff fe98 	bl	800d588 <rshift>
 800d858:	443d      	add	r5, r7
 800d85a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800d85e:	42ab      	cmp	r3, r5
 800d860:	da4c      	bge.n	800d8fc <__gethex+0x2a4>
 800d862:	ee18 0a10 	vmov	r0, s16
 800d866:	4621      	mov	r1, r4
 800d868:	f000 fa6a 	bl	800dd40 <_Bfree>
 800d86c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d86e:	2300      	movs	r3, #0
 800d870:	6013      	str	r3, [r2, #0]
 800d872:	27a3      	movs	r7, #163	; 0xa3
 800d874:	e785      	b.n	800d782 <__gethex+0x12a>
 800d876:	1e73      	subs	r3, r6, #1
 800d878:	9a05      	ldr	r2, [sp, #20]
 800d87a:	9303      	str	r3, [sp, #12]
 800d87c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800d880:	4293      	cmp	r3, r2
 800d882:	d019      	beq.n	800d8b8 <__gethex+0x260>
 800d884:	f1bb 0f20 	cmp.w	fp, #32
 800d888:	d107      	bne.n	800d89a <__gethex+0x242>
 800d88a:	9b02      	ldr	r3, [sp, #8]
 800d88c:	9a00      	ldr	r2, [sp, #0]
 800d88e:	f843 2b04 	str.w	r2, [r3], #4
 800d892:	9302      	str	r3, [sp, #8]
 800d894:	2300      	movs	r3, #0
 800d896:	9300      	str	r3, [sp, #0]
 800d898:	469b      	mov	fp, r3
 800d89a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800d89e:	f7ff fec5 	bl	800d62c <__hexdig_fun>
 800d8a2:	9b00      	ldr	r3, [sp, #0]
 800d8a4:	f000 000f 	and.w	r0, r0, #15
 800d8a8:	fa00 f00b 	lsl.w	r0, r0, fp
 800d8ac:	4303      	orrs	r3, r0
 800d8ae:	9300      	str	r3, [sp, #0]
 800d8b0:	f10b 0b04 	add.w	fp, fp, #4
 800d8b4:	9b03      	ldr	r3, [sp, #12]
 800d8b6:	e00d      	b.n	800d8d4 <__gethex+0x27c>
 800d8b8:	9b03      	ldr	r3, [sp, #12]
 800d8ba:	9a06      	ldr	r2, [sp, #24]
 800d8bc:	4413      	add	r3, r2
 800d8be:	42bb      	cmp	r3, r7
 800d8c0:	d3e0      	bcc.n	800d884 <__gethex+0x22c>
 800d8c2:	4618      	mov	r0, r3
 800d8c4:	9901      	ldr	r1, [sp, #4]
 800d8c6:	9307      	str	r3, [sp, #28]
 800d8c8:	4652      	mov	r2, sl
 800d8ca:	f001 fa81 	bl	800edd0 <strncmp>
 800d8ce:	9b07      	ldr	r3, [sp, #28]
 800d8d0:	2800      	cmp	r0, #0
 800d8d2:	d1d7      	bne.n	800d884 <__gethex+0x22c>
 800d8d4:	461e      	mov	r6, r3
 800d8d6:	e78b      	b.n	800d7f0 <__gethex+0x198>
 800d8d8:	f04f 0a03 	mov.w	sl, #3
 800d8dc:	e7b8      	b.n	800d850 <__gethex+0x1f8>
 800d8de:	da0a      	bge.n	800d8f6 <__gethex+0x29e>
 800d8e0:	1a37      	subs	r7, r6, r0
 800d8e2:	4621      	mov	r1, r4
 800d8e4:	ee18 0a10 	vmov	r0, s16
 800d8e8:	463a      	mov	r2, r7
 800d8ea:	f000 fc45 	bl	800e178 <__lshift>
 800d8ee:	1bed      	subs	r5, r5, r7
 800d8f0:	4604      	mov	r4, r0
 800d8f2:	f100 0914 	add.w	r9, r0, #20
 800d8f6:	f04f 0a00 	mov.w	sl, #0
 800d8fa:	e7ae      	b.n	800d85a <__gethex+0x202>
 800d8fc:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800d900:	42a8      	cmp	r0, r5
 800d902:	dd72      	ble.n	800d9ea <__gethex+0x392>
 800d904:	1b45      	subs	r5, r0, r5
 800d906:	42ae      	cmp	r6, r5
 800d908:	dc36      	bgt.n	800d978 <__gethex+0x320>
 800d90a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d90e:	2b02      	cmp	r3, #2
 800d910:	d02a      	beq.n	800d968 <__gethex+0x310>
 800d912:	2b03      	cmp	r3, #3
 800d914:	d02c      	beq.n	800d970 <__gethex+0x318>
 800d916:	2b01      	cmp	r3, #1
 800d918:	d11c      	bne.n	800d954 <__gethex+0x2fc>
 800d91a:	42ae      	cmp	r6, r5
 800d91c:	d11a      	bne.n	800d954 <__gethex+0x2fc>
 800d91e:	2e01      	cmp	r6, #1
 800d920:	d112      	bne.n	800d948 <__gethex+0x2f0>
 800d922:	9a04      	ldr	r2, [sp, #16]
 800d924:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800d928:	6013      	str	r3, [r2, #0]
 800d92a:	2301      	movs	r3, #1
 800d92c:	6123      	str	r3, [r4, #16]
 800d92e:	f8c9 3000 	str.w	r3, [r9]
 800d932:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800d934:	2762      	movs	r7, #98	; 0x62
 800d936:	601c      	str	r4, [r3, #0]
 800d938:	e723      	b.n	800d782 <__gethex+0x12a>
 800d93a:	bf00      	nop
 800d93c:	0800fc10 	.word	0x0800fc10
 800d940:	0800fb99 	.word	0x0800fb99
 800d944:	0800fbaa 	.word	0x0800fbaa
 800d948:	1e71      	subs	r1, r6, #1
 800d94a:	4620      	mov	r0, r4
 800d94c:	f000 fe58 	bl	800e600 <__any_on>
 800d950:	2800      	cmp	r0, #0
 800d952:	d1e6      	bne.n	800d922 <__gethex+0x2ca>
 800d954:	ee18 0a10 	vmov	r0, s16
 800d958:	4621      	mov	r1, r4
 800d95a:	f000 f9f1 	bl	800dd40 <_Bfree>
 800d95e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800d960:	2300      	movs	r3, #0
 800d962:	6013      	str	r3, [r2, #0]
 800d964:	2750      	movs	r7, #80	; 0x50
 800d966:	e70c      	b.n	800d782 <__gethex+0x12a>
 800d968:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d96a:	2b00      	cmp	r3, #0
 800d96c:	d1f2      	bne.n	800d954 <__gethex+0x2fc>
 800d96e:	e7d8      	b.n	800d922 <__gethex+0x2ca>
 800d970:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d972:	2b00      	cmp	r3, #0
 800d974:	d1d5      	bne.n	800d922 <__gethex+0x2ca>
 800d976:	e7ed      	b.n	800d954 <__gethex+0x2fc>
 800d978:	1e6f      	subs	r7, r5, #1
 800d97a:	f1ba 0f00 	cmp.w	sl, #0
 800d97e:	d131      	bne.n	800d9e4 <__gethex+0x38c>
 800d980:	b127      	cbz	r7, 800d98c <__gethex+0x334>
 800d982:	4639      	mov	r1, r7
 800d984:	4620      	mov	r0, r4
 800d986:	f000 fe3b 	bl	800e600 <__any_on>
 800d98a:	4682      	mov	sl, r0
 800d98c:	117b      	asrs	r3, r7, #5
 800d98e:	2101      	movs	r1, #1
 800d990:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800d994:	f007 071f 	and.w	r7, r7, #31
 800d998:	fa01 f707 	lsl.w	r7, r1, r7
 800d99c:	421f      	tst	r7, r3
 800d99e:	4629      	mov	r1, r5
 800d9a0:	4620      	mov	r0, r4
 800d9a2:	bf18      	it	ne
 800d9a4:	f04a 0a02 	orrne.w	sl, sl, #2
 800d9a8:	1b76      	subs	r6, r6, r5
 800d9aa:	f7ff fded 	bl	800d588 <rshift>
 800d9ae:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800d9b2:	2702      	movs	r7, #2
 800d9b4:	f1ba 0f00 	cmp.w	sl, #0
 800d9b8:	d048      	beq.n	800da4c <__gethex+0x3f4>
 800d9ba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800d9be:	2b02      	cmp	r3, #2
 800d9c0:	d015      	beq.n	800d9ee <__gethex+0x396>
 800d9c2:	2b03      	cmp	r3, #3
 800d9c4:	d017      	beq.n	800d9f6 <__gethex+0x39e>
 800d9c6:	2b01      	cmp	r3, #1
 800d9c8:	d109      	bne.n	800d9de <__gethex+0x386>
 800d9ca:	f01a 0f02 	tst.w	sl, #2
 800d9ce:	d006      	beq.n	800d9de <__gethex+0x386>
 800d9d0:	f8d9 0000 	ldr.w	r0, [r9]
 800d9d4:	ea4a 0a00 	orr.w	sl, sl, r0
 800d9d8:	f01a 0f01 	tst.w	sl, #1
 800d9dc:	d10e      	bne.n	800d9fc <__gethex+0x3a4>
 800d9de:	f047 0710 	orr.w	r7, r7, #16
 800d9e2:	e033      	b.n	800da4c <__gethex+0x3f4>
 800d9e4:	f04f 0a01 	mov.w	sl, #1
 800d9e8:	e7d0      	b.n	800d98c <__gethex+0x334>
 800d9ea:	2701      	movs	r7, #1
 800d9ec:	e7e2      	b.n	800d9b4 <__gethex+0x35c>
 800d9ee:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9f0:	f1c3 0301 	rsb	r3, r3, #1
 800d9f4:	9315      	str	r3, [sp, #84]	; 0x54
 800d9f6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800d9f8:	2b00      	cmp	r3, #0
 800d9fa:	d0f0      	beq.n	800d9de <__gethex+0x386>
 800d9fc:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800da00:	f104 0314 	add.w	r3, r4, #20
 800da04:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800da08:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800da0c:	f04f 0c00 	mov.w	ip, #0
 800da10:	4618      	mov	r0, r3
 800da12:	f853 2b04 	ldr.w	r2, [r3], #4
 800da16:	f1b2 3fff 	cmp.w	r2, #4294967295
 800da1a:	d01c      	beq.n	800da56 <__gethex+0x3fe>
 800da1c:	3201      	adds	r2, #1
 800da1e:	6002      	str	r2, [r0, #0]
 800da20:	2f02      	cmp	r7, #2
 800da22:	f104 0314 	add.w	r3, r4, #20
 800da26:	d13f      	bne.n	800daa8 <__gethex+0x450>
 800da28:	f8d8 2000 	ldr.w	r2, [r8]
 800da2c:	3a01      	subs	r2, #1
 800da2e:	42b2      	cmp	r2, r6
 800da30:	d10a      	bne.n	800da48 <__gethex+0x3f0>
 800da32:	1171      	asrs	r1, r6, #5
 800da34:	2201      	movs	r2, #1
 800da36:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800da3a:	f006 061f 	and.w	r6, r6, #31
 800da3e:	fa02 f606 	lsl.w	r6, r2, r6
 800da42:	421e      	tst	r6, r3
 800da44:	bf18      	it	ne
 800da46:	4617      	movne	r7, r2
 800da48:	f047 0720 	orr.w	r7, r7, #32
 800da4c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800da4e:	601c      	str	r4, [r3, #0]
 800da50:	9b04      	ldr	r3, [sp, #16]
 800da52:	601d      	str	r5, [r3, #0]
 800da54:	e695      	b.n	800d782 <__gethex+0x12a>
 800da56:	4299      	cmp	r1, r3
 800da58:	f843 cc04 	str.w	ip, [r3, #-4]
 800da5c:	d8d8      	bhi.n	800da10 <__gethex+0x3b8>
 800da5e:	68a3      	ldr	r3, [r4, #8]
 800da60:	459b      	cmp	fp, r3
 800da62:	db19      	blt.n	800da98 <__gethex+0x440>
 800da64:	6861      	ldr	r1, [r4, #4]
 800da66:	ee18 0a10 	vmov	r0, s16
 800da6a:	3101      	adds	r1, #1
 800da6c:	f000 f928 	bl	800dcc0 <_Balloc>
 800da70:	4681      	mov	r9, r0
 800da72:	b918      	cbnz	r0, 800da7c <__gethex+0x424>
 800da74:	4b1a      	ldr	r3, [pc, #104]	; (800dae0 <__gethex+0x488>)
 800da76:	4602      	mov	r2, r0
 800da78:	2184      	movs	r1, #132	; 0x84
 800da7a:	e6a8      	b.n	800d7ce <__gethex+0x176>
 800da7c:	6922      	ldr	r2, [r4, #16]
 800da7e:	3202      	adds	r2, #2
 800da80:	f104 010c 	add.w	r1, r4, #12
 800da84:	0092      	lsls	r2, r2, #2
 800da86:	300c      	adds	r0, #12
 800da88:	f000 f90c 	bl	800dca4 <memcpy>
 800da8c:	4621      	mov	r1, r4
 800da8e:	ee18 0a10 	vmov	r0, s16
 800da92:	f000 f955 	bl	800dd40 <_Bfree>
 800da96:	464c      	mov	r4, r9
 800da98:	6923      	ldr	r3, [r4, #16]
 800da9a:	1c5a      	adds	r2, r3, #1
 800da9c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800daa0:	6122      	str	r2, [r4, #16]
 800daa2:	2201      	movs	r2, #1
 800daa4:	615a      	str	r2, [r3, #20]
 800daa6:	e7bb      	b.n	800da20 <__gethex+0x3c8>
 800daa8:	6922      	ldr	r2, [r4, #16]
 800daaa:	455a      	cmp	r2, fp
 800daac:	dd0b      	ble.n	800dac6 <__gethex+0x46e>
 800daae:	2101      	movs	r1, #1
 800dab0:	4620      	mov	r0, r4
 800dab2:	f7ff fd69 	bl	800d588 <rshift>
 800dab6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800daba:	3501      	adds	r5, #1
 800dabc:	42ab      	cmp	r3, r5
 800dabe:	f6ff aed0 	blt.w	800d862 <__gethex+0x20a>
 800dac2:	2701      	movs	r7, #1
 800dac4:	e7c0      	b.n	800da48 <__gethex+0x3f0>
 800dac6:	f016 061f 	ands.w	r6, r6, #31
 800daca:	d0fa      	beq.n	800dac2 <__gethex+0x46a>
 800dacc:	4453      	add	r3, sl
 800dace:	f1c6 0620 	rsb	r6, r6, #32
 800dad2:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800dad6:	f000 f9e5 	bl	800dea4 <__hi0bits>
 800dada:	42b0      	cmp	r0, r6
 800dadc:	dbe7      	blt.n	800daae <__gethex+0x456>
 800dade:	e7f0      	b.n	800dac2 <__gethex+0x46a>
 800dae0:	0800fb99 	.word	0x0800fb99

0800dae4 <L_shift>:
 800dae4:	f1c2 0208 	rsb	r2, r2, #8
 800dae8:	0092      	lsls	r2, r2, #2
 800daea:	b570      	push	{r4, r5, r6, lr}
 800daec:	f1c2 0620 	rsb	r6, r2, #32
 800daf0:	6843      	ldr	r3, [r0, #4]
 800daf2:	6804      	ldr	r4, [r0, #0]
 800daf4:	fa03 f506 	lsl.w	r5, r3, r6
 800daf8:	432c      	orrs	r4, r5
 800dafa:	40d3      	lsrs	r3, r2
 800dafc:	6004      	str	r4, [r0, #0]
 800dafe:	f840 3f04 	str.w	r3, [r0, #4]!
 800db02:	4288      	cmp	r0, r1
 800db04:	d3f4      	bcc.n	800daf0 <L_shift+0xc>
 800db06:	bd70      	pop	{r4, r5, r6, pc}

0800db08 <__match>:
 800db08:	b530      	push	{r4, r5, lr}
 800db0a:	6803      	ldr	r3, [r0, #0]
 800db0c:	3301      	adds	r3, #1
 800db0e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800db12:	b914      	cbnz	r4, 800db1a <__match+0x12>
 800db14:	6003      	str	r3, [r0, #0]
 800db16:	2001      	movs	r0, #1
 800db18:	bd30      	pop	{r4, r5, pc}
 800db1a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800db1e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800db22:	2d19      	cmp	r5, #25
 800db24:	bf98      	it	ls
 800db26:	3220      	addls	r2, #32
 800db28:	42a2      	cmp	r2, r4
 800db2a:	d0f0      	beq.n	800db0e <__match+0x6>
 800db2c:	2000      	movs	r0, #0
 800db2e:	e7f3      	b.n	800db18 <__match+0x10>

0800db30 <__hexnan>:
 800db30:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db34:	680b      	ldr	r3, [r1, #0]
 800db36:	115e      	asrs	r6, r3, #5
 800db38:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800db3c:	f013 031f 	ands.w	r3, r3, #31
 800db40:	b087      	sub	sp, #28
 800db42:	bf18      	it	ne
 800db44:	3604      	addne	r6, #4
 800db46:	2500      	movs	r5, #0
 800db48:	1f37      	subs	r7, r6, #4
 800db4a:	4690      	mov	r8, r2
 800db4c:	6802      	ldr	r2, [r0, #0]
 800db4e:	9301      	str	r3, [sp, #4]
 800db50:	4682      	mov	sl, r0
 800db52:	f846 5c04 	str.w	r5, [r6, #-4]
 800db56:	46b9      	mov	r9, r7
 800db58:	463c      	mov	r4, r7
 800db5a:	9502      	str	r5, [sp, #8]
 800db5c:	46ab      	mov	fp, r5
 800db5e:	7851      	ldrb	r1, [r2, #1]
 800db60:	1c53      	adds	r3, r2, #1
 800db62:	9303      	str	r3, [sp, #12]
 800db64:	b341      	cbz	r1, 800dbb8 <__hexnan+0x88>
 800db66:	4608      	mov	r0, r1
 800db68:	9205      	str	r2, [sp, #20]
 800db6a:	9104      	str	r1, [sp, #16]
 800db6c:	f7ff fd5e 	bl	800d62c <__hexdig_fun>
 800db70:	2800      	cmp	r0, #0
 800db72:	d14f      	bne.n	800dc14 <__hexnan+0xe4>
 800db74:	9904      	ldr	r1, [sp, #16]
 800db76:	9a05      	ldr	r2, [sp, #20]
 800db78:	2920      	cmp	r1, #32
 800db7a:	d818      	bhi.n	800dbae <__hexnan+0x7e>
 800db7c:	9b02      	ldr	r3, [sp, #8]
 800db7e:	459b      	cmp	fp, r3
 800db80:	dd13      	ble.n	800dbaa <__hexnan+0x7a>
 800db82:	454c      	cmp	r4, r9
 800db84:	d206      	bcs.n	800db94 <__hexnan+0x64>
 800db86:	2d07      	cmp	r5, #7
 800db88:	dc04      	bgt.n	800db94 <__hexnan+0x64>
 800db8a:	462a      	mov	r2, r5
 800db8c:	4649      	mov	r1, r9
 800db8e:	4620      	mov	r0, r4
 800db90:	f7ff ffa8 	bl	800dae4 <L_shift>
 800db94:	4544      	cmp	r4, r8
 800db96:	d950      	bls.n	800dc3a <__hexnan+0x10a>
 800db98:	2300      	movs	r3, #0
 800db9a:	f1a4 0904 	sub.w	r9, r4, #4
 800db9e:	f844 3c04 	str.w	r3, [r4, #-4]
 800dba2:	f8cd b008 	str.w	fp, [sp, #8]
 800dba6:	464c      	mov	r4, r9
 800dba8:	461d      	mov	r5, r3
 800dbaa:	9a03      	ldr	r2, [sp, #12]
 800dbac:	e7d7      	b.n	800db5e <__hexnan+0x2e>
 800dbae:	2929      	cmp	r1, #41	; 0x29
 800dbb0:	d156      	bne.n	800dc60 <__hexnan+0x130>
 800dbb2:	3202      	adds	r2, #2
 800dbb4:	f8ca 2000 	str.w	r2, [sl]
 800dbb8:	f1bb 0f00 	cmp.w	fp, #0
 800dbbc:	d050      	beq.n	800dc60 <__hexnan+0x130>
 800dbbe:	454c      	cmp	r4, r9
 800dbc0:	d206      	bcs.n	800dbd0 <__hexnan+0xa0>
 800dbc2:	2d07      	cmp	r5, #7
 800dbc4:	dc04      	bgt.n	800dbd0 <__hexnan+0xa0>
 800dbc6:	462a      	mov	r2, r5
 800dbc8:	4649      	mov	r1, r9
 800dbca:	4620      	mov	r0, r4
 800dbcc:	f7ff ff8a 	bl	800dae4 <L_shift>
 800dbd0:	4544      	cmp	r4, r8
 800dbd2:	d934      	bls.n	800dc3e <__hexnan+0x10e>
 800dbd4:	f1a8 0204 	sub.w	r2, r8, #4
 800dbd8:	4623      	mov	r3, r4
 800dbda:	f853 1b04 	ldr.w	r1, [r3], #4
 800dbde:	f842 1f04 	str.w	r1, [r2, #4]!
 800dbe2:	429f      	cmp	r7, r3
 800dbe4:	d2f9      	bcs.n	800dbda <__hexnan+0xaa>
 800dbe6:	1b3b      	subs	r3, r7, r4
 800dbe8:	f023 0303 	bic.w	r3, r3, #3
 800dbec:	3304      	adds	r3, #4
 800dbee:	3401      	adds	r4, #1
 800dbf0:	3e03      	subs	r6, #3
 800dbf2:	42b4      	cmp	r4, r6
 800dbf4:	bf88      	it	hi
 800dbf6:	2304      	movhi	r3, #4
 800dbf8:	4443      	add	r3, r8
 800dbfa:	2200      	movs	r2, #0
 800dbfc:	f843 2b04 	str.w	r2, [r3], #4
 800dc00:	429f      	cmp	r7, r3
 800dc02:	d2fb      	bcs.n	800dbfc <__hexnan+0xcc>
 800dc04:	683b      	ldr	r3, [r7, #0]
 800dc06:	b91b      	cbnz	r3, 800dc10 <__hexnan+0xe0>
 800dc08:	4547      	cmp	r7, r8
 800dc0a:	d127      	bne.n	800dc5c <__hexnan+0x12c>
 800dc0c:	2301      	movs	r3, #1
 800dc0e:	603b      	str	r3, [r7, #0]
 800dc10:	2005      	movs	r0, #5
 800dc12:	e026      	b.n	800dc62 <__hexnan+0x132>
 800dc14:	3501      	adds	r5, #1
 800dc16:	2d08      	cmp	r5, #8
 800dc18:	f10b 0b01 	add.w	fp, fp, #1
 800dc1c:	dd06      	ble.n	800dc2c <__hexnan+0xfc>
 800dc1e:	4544      	cmp	r4, r8
 800dc20:	d9c3      	bls.n	800dbaa <__hexnan+0x7a>
 800dc22:	2300      	movs	r3, #0
 800dc24:	f844 3c04 	str.w	r3, [r4, #-4]
 800dc28:	2501      	movs	r5, #1
 800dc2a:	3c04      	subs	r4, #4
 800dc2c:	6822      	ldr	r2, [r4, #0]
 800dc2e:	f000 000f 	and.w	r0, r0, #15
 800dc32:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800dc36:	6022      	str	r2, [r4, #0]
 800dc38:	e7b7      	b.n	800dbaa <__hexnan+0x7a>
 800dc3a:	2508      	movs	r5, #8
 800dc3c:	e7b5      	b.n	800dbaa <__hexnan+0x7a>
 800dc3e:	9b01      	ldr	r3, [sp, #4]
 800dc40:	2b00      	cmp	r3, #0
 800dc42:	d0df      	beq.n	800dc04 <__hexnan+0xd4>
 800dc44:	f04f 32ff 	mov.w	r2, #4294967295
 800dc48:	f1c3 0320 	rsb	r3, r3, #32
 800dc4c:	fa22 f303 	lsr.w	r3, r2, r3
 800dc50:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800dc54:	401a      	ands	r2, r3
 800dc56:	f846 2c04 	str.w	r2, [r6, #-4]
 800dc5a:	e7d3      	b.n	800dc04 <__hexnan+0xd4>
 800dc5c:	3f04      	subs	r7, #4
 800dc5e:	e7d1      	b.n	800dc04 <__hexnan+0xd4>
 800dc60:	2004      	movs	r0, #4
 800dc62:	b007      	add	sp, #28
 800dc64:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800dc68 <_localeconv_r>:
 800dc68:	4800      	ldr	r0, [pc, #0]	; (800dc6c <_localeconv_r+0x4>)
 800dc6a:	4770      	bx	lr
 800dc6c:	20000178 	.word	0x20000178

0800dc70 <malloc>:
 800dc70:	4b02      	ldr	r3, [pc, #8]	; (800dc7c <malloc+0xc>)
 800dc72:	4601      	mov	r1, r0
 800dc74:	6818      	ldr	r0, [r3, #0]
 800dc76:	f000 bd67 	b.w	800e748 <_malloc_r>
 800dc7a:	bf00      	nop
 800dc7c:	20000020 	.word	0x20000020

0800dc80 <__ascii_mbtowc>:
 800dc80:	b082      	sub	sp, #8
 800dc82:	b901      	cbnz	r1, 800dc86 <__ascii_mbtowc+0x6>
 800dc84:	a901      	add	r1, sp, #4
 800dc86:	b142      	cbz	r2, 800dc9a <__ascii_mbtowc+0x1a>
 800dc88:	b14b      	cbz	r3, 800dc9e <__ascii_mbtowc+0x1e>
 800dc8a:	7813      	ldrb	r3, [r2, #0]
 800dc8c:	600b      	str	r3, [r1, #0]
 800dc8e:	7812      	ldrb	r2, [r2, #0]
 800dc90:	1e10      	subs	r0, r2, #0
 800dc92:	bf18      	it	ne
 800dc94:	2001      	movne	r0, #1
 800dc96:	b002      	add	sp, #8
 800dc98:	4770      	bx	lr
 800dc9a:	4610      	mov	r0, r2
 800dc9c:	e7fb      	b.n	800dc96 <__ascii_mbtowc+0x16>
 800dc9e:	f06f 0001 	mvn.w	r0, #1
 800dca2:	e7f8      	b.n	800dc96 <__ascii_mbtowc+0x16>

0800dca4 <memcpy>:
 800dca4:	440a      	add	r2, r1
 800dca6:	4291      	cmp	r1, r2
 800dca8:	f100 33ff 	add.w	r3, r0, #4294967295
 800dcac:	d100      	bne.n	800dcb0 <memcpy+0xc>
 800dcae:	4770      	bx	lr
 800dcb0:	b510      	push	{r4, lr}
 800dcb2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800dcb6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800dcba:	4291      	cmp	r1, r2
 800dcbc:	d1f9      	bne.n	800dcb2 <memcpy+0xe>
 800dcbe:	bd10      	pop	{r4, pc}

0800dcc0 <_Balloc>:
 800dcc0:	b570      	push	{r4, r5, r6, lr}
 800dcc2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dcc4:	4604      	mov	r4, r0
 800dcc6:	460d      	mov	r5, r1
 800dcc8:	b976      	cbnz	r6, 800dce8 <_Balloc+0x28>
 800dcca:	2010      	movs	r0, #16
 800dccc:	f7ff ffd0 	bl	800dc70 <malloc>
 800dcd0:	4602      	mov	r2, r0
 800dcd2:	6260      	str	r0, [r4, #36]	; 0x24
 800dcd4:	b920      	cbnz	r0, 800dce0 <_Balloc+0x20>
 800dcd6:	4b18      	ldr	r3, [pc, #96]	; (800dd38 <_Balloc+0x78>)
 800dcd8:	4818      	ldr	r0, [pc, #96]	; (800dd3c <_Balloc+0x7c>)
 800dcda:	2166      	movs	r1, #102	; 0x66
 800dcdc:	f7fe fda8 	bl	800c830 <__assert_func>
 800dce0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dce4:	6006      	str	r6, [r0, #0]
 800dce6:	60c6      	str	r6, [r0, #12]
 800dce8:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800dcea:	68f3      	ldr	r3, [r6, #12]
 800dcec:	b183      	cbz	r3, 800dd10 <_Balloc+0x50>
 800dcee:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dcf0:	68db      	ldr	r3, [r3, #12]
 800dcf2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800dcf6:	b9b8      	cbnz	r0, 800dd28 <_Balloc+0x68>
 800dcf8:	2101      	movs	r1, #1
 800dcfa:	fa01 f605 	lsl.w	r6, r1, r5
 800dcfe:	1d72      	adds	r2, r6, #5
 800dd00:	0092      	lsls	r2, r2, #2
 800dd02:	4620      	mov	r0, r4
 800dd04:	f000 fc9d 	bl	800e642 <_calloc_r>
 800dd08:	b160      	cbz	r0, 800dd24 <_Balloc+0x64>
 800dd0a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800dd0e:	e00e      	b.n	800dd2e <_Balloc+0x6e>
 800dd10:	2221      	movs	r2, #33	; 0x21
 800dd12:	2104      	movs	r1, #4
 800dd14:	4620      	mov	r0, r4
 800dd16:	f000 fc94 	bl	800e642 <_calloc_r>
 800dd1a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800dd1c:	60f0      	str	r0, [r6, #12]
 800dd1e:	68db      	ldr	r3, [r3, #12]
 800dd20:	2b00      	cmp	r3, #0
 800dd22:	d1e4      	bne.n	800dcee <_Balloc+0x2e>
 800dd24:	2000      	movs	r0, #0
 800dd26:	bd70      	pop	{r4, r5, r6, pc}
 800dd28:	6802      	ldr	r2, [r0, #0]
 800dd2a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800dd2e:	2300      	movs	r3, #0
 800dd30:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800dd34:	e7f7      	b.n	800dd26 <_Balloc+0x66>
 800dd36:	bf00      	nop
 800dd38:	0800f980 	.word	0x0800f980
 800dd3c:	0800fc24 	.word	0x0800fc24

0800dd40 <_Bfree>:
 800dd40:	b570      	push	{r4, r5, r6, lr}
 800dd42:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800dd44:	4605      	mov	r5, r0
 800dd46:	460c      	mov	r4, r1
 800dd48:	b976      	cbnz	r6, 800dd68 <_Bfree+0x28>
 800dd4a:	2010      	movs	r0, #16
 800dd4c:	f7ff ff90 	bl	800dc70 <malloc>
 800dd50:	4602      	mov	r2, r0
 800dd52:	6268      	str	r0, [r5, #36]	; 0x24
 800dd54:	b920      	cbnz	r0, 800dd60 <_Bfree+0x20>
 800dd56:	4b09      	ldr	r3, [pc, #36]	; (800dd7c <_Bfree+0x3c>)
 800dd58:	4809      	ldr	r0, [pc, #36]	; (800dd80 <_Bfree+0x40>)
 800dd5a:	218a      	movs	r1, #138	; 0x8a
 800dd5c:	f7fe fd68 	bl	800c830 <__assert_func>
 800dd60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800dd64:	6006      	str	r6, [r0, #0]
 800dd66:	60c6      	str	r6, [r0, #12]
 800dd68:	b13c      	cbz	r4, 800dd7a <_Bfree+0x3a>
 800dd6a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800dd6c:	6862      	ldr	r2, [r4, #4]
 800dd6e:	68db      	ldr	r3, [r3, #12]
 800dd70:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800dd74:	6021      	str	r1, [r4, #0]
 800dd76:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800dd7a:	bd70      	pop	{r4, r5, r6, pc}
 800dd7c:	0800f980 	.word	0x0800f980
 800dd80:	0800fc24 	.word	0x0800fc24

0800dd84 <__multadd>:
 800dd84:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd88:	690d      	ldr	r5, [r1, #16]
 800dd8a:	4607      	mov	r7, r0
 800dd8c:	460c      	mov	r4, r1
 800dd8e:	461e      	mov	r6, r3
 800dd90:	f101 0c14 	add.w	ip, r1, #20
 800dd94:	2000      	movs	r0, #0
 800dd96:	f8dc 3000 	ldr.w	r3, [ip]
 800dd9a:	b299      	uxth	r1, r3
 800dd9c:	fb02 6101 	mla	r1, r2, r1, r6
 800dda0:	0c1e      	lsrs	r6, r3, #16
 800dda2:	0c0b      	lsrs	r3, r1, #16
 800dda4:	fb02 3306 	mla	r3, r2, r6, r3
 800dda8:	b289      	uxth	r1, r1
 800ddaa:	3001      	adds	r0, #1
 800ddac:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800ddb0:	4285      	cmp	r5, r0
 800ddb2:	f84c 1b04 	str.w	r1, [ip], #4
 800ddb6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800ddba:	dcec      	bgt.n	800dd96 <__multadd+0x12>
 800ddbc:	b30e      	cbz	r6, 800de02 <__multadd+0x7e>
 800ddbe:	68a3      	ldr	r3, [r4, #8]
 800ddc0:	42ab      	cmp	r3, r5
 800ddc2:	dc19      	bgt.n	800ddf8 <__multadd+0x74>
 800ddc4:	6861      	ldr	r1, [r4, #4]
 800ddc6:	4638      	mov	r0, r7
 800ddc8:	3101      	adds	r1, #1
 800ddca:	f7ff ff79 	bl	800dcc0 <_Balloc>
 800ddce:	4680      	mov	r8, r0
 800ddd0:	b928      	cbnz	r0, 800ddde <__multadd+0x5a>
 800ddd2:	4602      	mov	r2, r0
 800ddd4:	4b0c      	ldr	r3, [pc, #48]	; (800de08 <__multadd+0x84>)
 800ddd6:	480d      	ldr	r0, [pc, #52]	; (800de0c <__multadd+0x88>)
 800ddd8:	21b5      	movs	r1, #181	; 0xb5
 800ddda:	f7fe fd29 	bl	800c830 <__assert_func>
 800ddde:	6922      	ldr	r2, [r4, #16]
 800dde0:	3202      	adds	r2, #2
 800dde2:	f104 010c 	add.w	r1, r4, #12
 800dde6:	0092      	lsls	r2, r2, #2
 800dde8:	300c      	adds	r0, #12
 800ddea:	f7ff ff5b 	bl	800dca4 <memcpy>
 800ddee:	4621      	mov	r1, r4
 800ddf0:	4638      	mov	r0, r7
 800ddf2:	f7ff ffa5 	bl	800dd40 <_Bfree>
 800ddf6:	4644      	mov	r4, r8
 800ddf8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800ddfc:	3501      	adds	r5, #1
 800ddfe:	615e      	str	r6, [r3, #20]
 800de00:	6125      	str	r5, [r4, #16]
 800de02:	4620      	mov	r0, r4
 800de04:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800de08:	0800fb99 	.word	0x0800fb99
 800de0c:	0800fc24 	.word	0x0800fc24

0800de10 <__s2b>:
 800de10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800de14:	460c      	mov	r4, r1
 800de16:	4615      	mov	r5, r2
 800de18:	461f      	mov	r7, r3
 800de1a:	2209      	movs	r2, #9
 800de1c:	3308      	adds	r3, #8
 800de1e:	4606      	mov	r6, r0
 800de20:	fb93 f3f2 	sdiv	r3, r3, r2
 800de24:	2100      	movs	r1, #0
 800de26:	2201      	movs	r2, #1
 800de28:	429a      	cmp	r2, r3
 800de2a:	db09      	blt.n	800de40 <__s2b+0x30>
 800de2c:	4630      	mov	r0, r6
 800de2e:	f7ff ff47 	bl	800dcc0 <_Balloc>
 800de32:	b940      	cbnz	r0, 800de46 <__s2b+0x36>
 800de34:	4602      	mov	r2, r0
 800de36:	4b19      	ldr	r3, [pc, #100]	; (800de9c <__s2b+0x8c>)
 800de38:	4819      	ldr	r0, [pc, #100]	; (800dea0 <__s2b+0x90>)
 800de3a:	21ce      	movs	r1, #206	; 0xce
 800de3c:	f7fe fcf8 	bl	800c830 <__assert_func>
 800de40:	0052      	lsls	r2, r2, #1
 800de42:	3101      	adds	r1, #1
 800de44:	e7f0      	b.n	800de28 <__s2b+0x18>
 800de46:	9b08      	ldr	r3, [sp, #32]
 800de48:	6143      	str	r3, [r0, #20]
 800de4a:	2d09      	cmp	r5, #9
 800de4c:	f04f 0301 	mov.w	r3, #1
 800de50:	6103      	str	r3, [r0, #16]
 800de52:	dd16      	ble.n	800de82 <__s2b+0x72>
 800de54:	f104 0909 	add.w	r9, r4, #9
 800de58:	46c8      	mov	r8, r9
 800de5a:	442c      	add	r4, r5
 800de5c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800de60:	4601      	mov	r1, r0
 800de62:	3b30      	subs	r3, #48	; 0x30
 800de64:	220a      	movs	r2, #10
 800de66:	4630      	mov	r0, r6
 800de68:	f7ff ff8c 	bl	800dd84 <__multadd>
 800de6c:	45a0      	cmp	r8, r4
 800de6e:	d1f5      	bne.n	800de5c <__s2b+0x4c>
 800de70:	f1a5 0408 	sub.w	r4, r5, #8
 800de74:	444c      	add	r4, r9
 800de76:	1b2d      	subs	r5, r5, r4
 800de78:	1963      	adds	r3, r4, r5
 800de7a:	42bb      	cmp	r3, r7
 800de7c:	db04      	blt.n	800de88 <__s2b+0x78>
 800de7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800de82:	340a      	adds	r4, #10
 800de84:	2509      	movs	r5, #9
 800de86:	e7f6      	b.n	800de76 <__s2b+0x66>
 800de88:	f814 3b01 	ldrb.w	r3, [r4], #1
 800de8c:	4601      	mov	r1, r0
 800de8e:	3b30      	subs	r3, #48	; 0x30
 800de90:	220a      	movs	r2, #10
 800de92:	4630      	mov	r0, r6
 800de94:	f7ff ff76 	bl	800dd84 <__multadd>
 800de98:	e7ee      	b.n	800de78 <__s2b+0x68>
 800de9a:	bf00      	nop
 800de9c:	0800fb99 	.word	0x0800fb99
 800dea0:	0800fc24 	.word	0x0800fc24

0800dea4 <__hi0bits>:
 800dea4:	0c03      	lsrs	r3, r0, #16
 800dea6:	041b      	lsls	r3, r3, #16
 800dea8:	b9d3      	cbnz	r3, 800dee0 <__hi0bits+0x3c>
 800deaa:	0400      	lsls	r0, r0, #16
 800deac:	2310      	movs	r3, #16
 800deae:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800deb2:	bf04      	itt	eq
 800deb4:	0200      	lsleq	r0, r0, #8
 800deb6:	3308      	addeq	r3, #8
 800deb8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800debc:	bf04      	itt	eq
 800debe:	0100      	lsleq	r0, r0, #4
 800dec0:	3304      	addeq	r3, #4
 800dec2:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800dec6:	bf04      	itt	eq
 800dec8:	0080      	lsleq	r0, r0, #2
 800deca:	3302      	addeq	r3, #2
 800decc:	2800      	cmp	r0, #0
 800dece:	db05      	blt.n	800dedc <__hi0bits+0x38>
 800ded0:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800ded4:	f103 0301 	add.w	r3, r3, #1
 800ded8:	bf08      	it	eq
 800deda:	2320      	moveq	r3, #32
 800dedc:	4618      	mov	r0, r3
 800dede:	4770      	bx	lr
 800dee0:	2300      	movs	r3, #0
 800dee2:	e7e4      	b.n	800deae <__hi0bits+0xa>

0800dee4 <__lo0bits>:
 800dee4:	6803      	ldr	r3, [r0, #0]
 800dee6:	f013 0207 	ands.w	r2, r3, #7
 800deea:	4601      	mov	r1, r0
 800deec:	d00b      	beq.n	800df06 <__lo0bits+0x22>
 800deee:	07da      	lsls	r2, r3, #31
 800def0:	d423      	bmi.n	800df3a <__lo0bits+0x56>
 800def2:	0798      	lsls	r0, r3, #30
 800def4:	bf49      	itett	mi
 800def6:	085b      	lsrmi	r3, r3, #1
 800def8:	089b      	lsrpl	r3, r3, #2
 800defa:	2001      	movmi	r0, #1
 800defc:	600b      	strmi	r3, [r1, #0]
 800defe:	bf5c      	itt	pl
 800df00:	600b      	strpl	r3, [r1, #0]
 800df02:	2002      	movpl	r0, #2
 800df04:	4770      	bx	lr
 800df06:	b298      	uxth	r0, r3
 800df08:	b9a8      	cbnz	r0, 800df36 <__lo0bits+0x52>
 800df0a:	0c1b      	lsrs	r3, r3, #16
 800df0c:	2010      	movs	r0, #16
 800df0e:	b2da      	uxtb	r2, r3
 800df10:	b90a      	cbnz	r2, 800df16 <__lo0bits+0x32>
 800df12:	3008      	adds	r0, #8
 800df14:	0a1b      	lsrs	r3, r3, #8
 800df16:	071a      	lsls	r2, r3, #28
 800df18:	bf04      	itt	eq
 800df1a:	091b      	lsreq	r3, r3, #4
 800df1c:	3004      	addeq	r0, #4
 800df1e:	079a      	lsls	r2, r3, #30
 800df20:	bf04      	itt	eq
 800df22:	089b      	lsreq	r3, r3, #2
 800df24:	3002      	addeq	r0, #2
 800df26:	07da      	lsls	r2, r3, #31
 800df28:	d403      	bmi.n	800df32 <__lo0bits+0x4e>
 800df2a:	085b      	lsrs	r3, r3, #1
 800df2c:	f100 0001 	add.w	r0, r0, #1
 800df30:	d005      	beq.n	800df3e <__lo0bits+0x5a>
 800df32:	600b      	str	r3, [r1, #0]
 800df34:	4770      	bx	lr
 800df36:	4610      	mov	r0, r2
 800df38:	e7e9      	b.n	800df0e <__lo0bits+0x2a>
 800df3a:	2000      	movs	r0, #0
 800df3c:	4770      	bx	lr
 800df3e:	2020      	movs	r0, #32
 800df40:	4770      	bx	lr
	...

0800df44 <__i2b>:
 800df44:	b510      	push	{r4, lr}
 800df46:	460c      	mov	r4, r1
 800df48:	2101      	movs	r1, #1
 800df4a:	f7ff feb9 	bl	800dcc0 <_Balloc>
 800df4e:	4602      	mov	r2, r0
 800df50:	b928      	cbnz	r0, 800df5e <__i2b+0x1a>
 800df52:	4b05      	ldr	r3, [pc, #20]	; (800df68 <__i2b+0x24>)
 800df54:	4805      	ldr	r0, [pc, #20]	; (800df6c <__i2b+0x28>)
 800df56:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800df5a:	f7fe fc69 	bl	800c830 <__assert_func>
 800df5e:	2301      	movs	r3, #1
 800df60:	6144      	str	r4, [r0, #20]
 800df62:	6103      	str	r3, [r0, #16]
 800df64:	bd10      	pop	{r4, pc}
 800df66:	bf00      	nop
 800df68:	0800fb99 	.word	0x0800fb99
 800df6c:	0800fc24 	.word	0x0800fc24

0800df70 <__multiply>:
 800df70:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800df74:	4691      	mov	r9, r2
 800df76:	690a      	ldr	r2, [r1, #16]
 800df78:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800df7c:	429a      	cmp	r2, r3
 800df7e:	bfb8      	it	lt
 800df80:	460b      	movlt	r3, r1
 800df82:	460c      	mov	r4, r1
 800df84:	bfbc      	itt	lt
 800df86:	464c      	movlt	r4, r9
 800df88:	4699      	movlt	r9, r3
 800df8a:	6927      	ldr	r7, [r4, #16]
 800df8c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800df90:	68a3      	ldr	r3, [r4, #8]
 800df92:	6861      	ldr	r1, [r4, #4]
 800df94:	eb07 060a 	add.w	r6, r7, sl
 800df98:	42b3      	cmp	r3, r6
 800df9a:	b085      	sub	sp, #20
 800df9c:	bfb8      	it	lt
 800df9e:	3101      	addlt	r1, #1
 800dfa0:	f7ff fe8e 	bl	800dcc0 <_Balloc>
 800dfa4:	b930      	cbnz	r0, 800dfb4 <__multiply+0x44>
 800dfa6:	4602      	mov	r2, r0
 800dfa8:	4b44      	ldr	r3, [pc, #272]	; (800e0bc <__multiply+0x14c>)
 800dfaa:	4845      	ldr	r0, [pc, #276]	; (800e0c0 <__multiply+0x150>)
 800dfac:	f240 115d 	movw	r1, #349	; 0x15d
 800dfb0:	f7fe fc3e 	bl	800c830 <__assert_func>
 800dfb4:	f100 0514 	add.w	r5, r0, #20
 800dfb8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800dfbc:	462b      	mov	r3, r5
 800dfbe:	2200      	movs	r2, #0
 800dfc0:	4543      	cmp	r3, r8
 800dfc2:	d321      	bcc.n	800e008 <__multiply+0x98>
 800dfc4:	f104 0314 	add.w	r3, r4, #20
 800dfc8:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800dfcc:	f109 0314 	add.w	r3, r9, #20
 800dfd0:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800dfd4:	9202      	str	r2, [sp, #8]
 800dfd6:	1b3a      	subs	r2, r7, r4
 800dfd8:	3a15      	subs	r2, #21
 800dfda:	f022 0203 	bic.w	r2, r2, #3
 800dfde:	3204      	adds	r2, #4
 800dfe0:	f104 0115 	add.w	r1, r4, #21
 800dfe4:	428f      	cmp	r7, r1
 800dfe6:	bf38      	it	cc
 800dfe8:	2204      	movcc	r2, #4
 800dfea:	9201      	str	r2, [sp, #4]
 800dfec:	9a02      	ldr	r2, [sp, #8]
 800dfee:	9303      	str	r3, [sp, #12]
 800dff0:	429a      	cmp	r2, r3
 800dff2:	d80c      	bhi.n	800e00e <__multiply+0x9e>
 800dff4:	2e00      	cmp	r6, #0
 800dff6:	dd03      	ble.n	800e000 <__multiply+0x90>
 800dff8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800dffc:	2b00      	cmp	r3, #0
 800dffe:	d05a      	beq.n	800e0b6 <__multiply+0x146>
 800e000:	6106      	str	r6, [r0, #16]
 800e002:	b005      	add	sp, #20
 800e004:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e008:	f843 2b04 	str.w	r2, [r3], #4
 800e00c:	e7d8      	b.n	800dfc0 <__multiply+0x50>
 800e00e:	f8b3 a000 	ldrh.w	sl, [r3]
 800e012:	f1ba 0f00 	cmp.w	sl, #0
 800e016:	d024      	beq.n	800e062 <__multiply+0xf2>
 800e018:	f104 0e14 	add.w	lr, r4, #20
 800e01c:	46a9      	mov	r9, r5
 800e01e:	f04f 0c00 	mov.w	ip, #0
 800e022:	f85e 2b04 	ldr.w	r2, [lr], #4
 800e026:	f8d9 1000 	ldr.w	r1, [r9]
 800e02a:	fa1f fb82 	uxth.w	fp, r2
 800e02e:	b289      	uxth	r1, r1
 800e030:	fb0a 110b 	mla	r1, sl, fp, r1
 800e034:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800e038:	f8d9 2000 	ldr.w	r2, [r9]
 800e03c:	4461      	add	r1, ip
 800e03e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e042:	fb0a c20b 	mla	r2, sl, fp, ip
 800e046:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800e04a:	b289      	uxth	r1, r1
 800e04c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800e050:	4577      	cmp	r7, lr
 800e052:	f849 1b04 	str.w	r1, [r9], #4
 800e056:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800e05a:	d8e2      	bhi.n	800e022 <__multiply+0xb2>
 800e05c:	9a01      	ldr	r2, [sp, #4]
 800e05e:	f845 c002 	str.w	ip, [r5, r2]
 800e062:	9a03      	ldr	r2, [sp, #12]
 800e064:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800e068:	3304      	adds	r3, #4
 800e06a:	f1b9 0f00 	cmp.w	r9, #0
 800e06e:	d020      	beq.n	800e0b2 <__multiply+0x142>
 800e070:	6829      	ldr	r1, [r5, #0]
 800e072:	f104 0c14 	add.w	ip, r4, #20
 800e076:	46ae      	mov	lr, r5
 800e078:	f04f 0a00 	mov.w	sl, #0
 800e07c:	f8bc b000 	ldrh.w	fp, [ip]
 800e080:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800e084:	fb09 220b 	mla	r2, r9, fp, r2
 800e088:	4492      	add	sl, r2
 800e08a:	b289      	uxth	r1, r1
 800e08c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800e090:	f84e 1b04 	str.w	r1, [lr], #4
 800e094:	f85c 2b04 	ldr.w	r2, [ip], #4
 800e098:	f8be 1000 	ldrh.w	r1, [lr]
 800e09c:	0c12      	lsrs	r2, r2, #16
 800e09e:	fb09 1102 	mla	r1, r9, r2, r1
 800e0a2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800e0a6:	4567      	cmp	r7, ip
 800e0a8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800e0ac:	d8e6      	bhi.n	800e07c <__multiply+0x10c>
 800e0ae:	9a01      	ldr	r2, [sp, #4]
 800e0b0:	50a9      	str	r1, [r5, r2]
 800e0b2:	3504      	adds	r5, #4
 800e0b4:	e79a      	b.n	800dfec <__multiply+0x7c>
 800e0b6:	3e01      	subs	r6, #1
 800e0b8:	e79c      	b.n	800dff4 <__multiply+0x84>
 800e0ba:	bf00      	nop
 800e0bc:	0800fb99 	.word	0x0800fb99
 800e0c0:	0800fc24 	.word	0x0800fc24

0800e0c4 <__pow5mult>:
 800e0c4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e0c8:	4615      	mov	r5, r2
 800e0ca:	f012 0203 	ands.w	r2, r2, #3
 800e0ce:	4606      	mov	r6, r0
 800e0d0:	460f      	mov	r7, r1
 800e0d2:	d007      	beq.n	800e0e4 <__pow5mult+0x20>
 800e0d4:	4c25      	ldr	r4, [pc, #148]	; (800e16c <__pow5mult+0xa8>)
 800e0d6:	3a01      	subs	r2, #1
 800e0d8:	2300      	movs	r3, #0
 800e0da:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800e0de:	f7ff fe51 	bl	800dd84 <__multadd>
 800e0e2:	4607      	mov	r7, r0
 800e0e4:	10ad      	asrs	r5, r5, #2
 800e0e6:	d03d      	beq.n	800e164 <__pow5mult+0xa0>
 800e0e8:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800e0ea:	b97c      	cbnz	r4, 800e10c <__pow5mult+0x48>
 800e0ec:	2010      	movs	r0, #16
 800e0ee:	f7ff fdbf 	bl	800dc70 <malloc>
 800e0f2:	4602      	mov	r2, r0
 800e0f4:	6270      	str	r0, [r6, #36]	; 0x24
 800e0f6:	b928      	cbnz	r0, 800e104 <__pow5mult+0x40>
 800e0f8:	4b1d      	ldr	r3, [pc, #116]	; (800e170 <__pow5mult+0xac>)
 800e0fa:	481e      	ldr	r0, [pc, #120]	; (800e174 <__pow5mult+0xb0>)
 800e0fc:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800e100:	f7fe fb96 	bl	800c830 <__assert_func>
 800e104:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800e108:	6004      	str	r4, [r0, #0]
 800e10a:	60c4      	str	r4, [r0, #12]
 800e10c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800e110:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800e114:	b94c      	cbnz	r4, 800e12a <__pow5mult+0x66>
 800e116:	f240 2171 	movw	r1, #625	; 0x271
 800e11a:	4630      	mov	r0, r6
 800e11c:	f7ff ff12 	bl	800df44 <__i2b>
 800e120:	2300      	movs	r3, #0
 800e122:	f8c8 0008 	str.w	r0, [r8, #8]
 800e126:	4604      	mov	r4, r0
 800e128:	6003      	str	r3, [r0, #0]
 800e12a:	f04f 0900 	mov.w	r9, #0
 800e12e:	07eb      	lsls	r3, r5, #31
 800e130:	d50a      	bpl.n	800e148 <__pow5mult+0x84>
 800e132:	4639      	mov	r1, r7
 800e134:	4622      	mov	r2, r4
 800e136:	4630      	mov	r0, r6
 800e138:	f7ff ff1a 	bl	800df70 <__multiply>
 800e13c:	4639      	mov	r1, r7
 800e13e:	4680      	mov	r8, r0
 800e140:	4630      	mov	r0, r6
 800e142:	f7ff fdfd 	bl	800dd40 <_Bfree>
 800e146:	4647      	mov	r7, r8
 800e148:	106d      	asrs	r5, r5, #1
 800e14a:	d00b      	beq.n	800e164 <__pow5mult+0xa0>
 800e14c:	6820      	ldr	r0, [r4, #0]
 800e14e:	b938      	cbnz	r0, 800e160 <__pow5mult+0x9c>
 800e150:	4622      	mov	r2, r4
 800e152:	4621      	mov	r1, r4
 800e154:	4630      	mov	r0, r6
 800e156:	f7ff ff0b 	bl	800df70 <__multiply>
 800e15a:	6020      	str	r0, [r4, #0]
 800e15c:	f8c0 9000 	str.w	r9, [r0]
 800e160:	4604      	mov	r4, r0
 800e162:	e7e4      	b.n	800e12e <__pow5mult+0x6a>
 800e164:	4638      	mov	r0, r7
 800e166:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e16a:	bf00      	nop
 800e16c:	0800fd70 	.word	0x0800fd70
 800e170:	0800f980 	.word	0x0800f980
 800e174:	0800fc24 	.word	0x0800fc24

0800e178 <__lshift>:
 800e178:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e17c:	460c      	mov	r4, r1
 800e17e:	6849      	ldr	r1, [r1, #4]
 800e180:	6923      	ldr	r3, [r4, #16]
 800e182:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800e186:	68a3      	ldr	r3, [r4, #8]
 800e188:	4607      	mov	r7, r0
 800e18a:	4691      	mov	r9, r2
 800e18c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800e190:	f108 0601 	add.w	r6, r8, #1
 800e194:	42b3      	cmp	r3, r6
 800e196:	db0b      	blt.n	800e1b0 <__lshift+0x38>
 800e198:	4638      	mov	r0, r7
 800e19a:	f7ff fd91 	bl	800dcc0 <_Balloc>
 800e19e:	4605      	mov	r5, r0
 800e1a0:	b948      	cbnz	r0, 800e1b6 <__lshift+0x3e>
 800e1a2:	4602      	mov	r2, r0
 800e1a4:	4b2a      	ldr	r3, [pc, #168]	; (800e250 <__lshift+0xd8>)
 800e1a6:	482b      	ldr	r0, [pc, #172]	; (800e254 <__lshift+0xdc>)
 800e1a8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800e1ac:	f7fe fb40 	bl	800c830 <__assert_func>
 800e1b0:	3101      	adds	r1, #1
 800e1b2:	005b      	lsls	r3, r3, #1
 800e1b4:	e7ee      	b.n	800e194 <__lshift+0x1c>
 800e1b6:	2300      	movs	r3, #0
 800e1b8:	f100 0114 	add.w	r1, r0, #20
 800e1bc:	f100 0210 	add.w	r2, r0, #16
 800e1c0:	4618      	mov	r0, r3
 800e1c2:	4553      	cmp	r3, sl
 800e1c4:	db37      	blt.n	800e236 <__lshift+0xbe>
 800e1c6:	6920      	ldr	r0, [r4, #16]
 800e1c8:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800e1cc:	f104 0314 	add.w	r3, r4, #20
 800e1d0:	f019 091f 	ands.w	r9, r9, #31
 800e1d4:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800e1d8:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800e1dc:	d02f      	beq.n	800e23e <__lshift+0xc6>
 800e1de:	f1c9 0e20 	rsb	lr, r9, #32
 800e1e2:	468a      	mov	sl, r1
 800e1e4:	f04f 0c00 	mov.w	ip, #0
 800e1e8:	681a      	ldr	r2, [r3, #0]
 800e1ea:	fa02 f209 	lsl.w	r2, r2, r9
 800e1ee:	ea42 020c 	orr.w	r2, r2, ip
 800e1f2:	f84a 2b04 	str.w	r2, [sl], #4
 800e1f6:	f853 2b04 	ldr.w	r2, [r3], #4
 800e1fa:	4298      	cmp	r0, r3
 800e1fc:	fa22 fc0e 	lsr.w	ip, r2, lr
 800e200:	d8f2      	bhi.n	800e1e8 <__lshift+0x70>
 800e202:	1b03      	subs	r3, r0, r4
 800e204:	3b15      	subs	r3, #21
 800e206:	f023 0303 	bic.w	r3, r3, #3
 800e20a:	3304      	adds	r3, #4
 800e20c:	f104 0215 	add.w	r2, r4, #21
 800e210:	4290      	cmp	r0, r2
 800e212:	bf38      	it	cc
 800e214:	2304      	movcc	r3, #4
 800e216:	f841 c003 	str.w	ip, [r1, r3]
 800e21a:	f1bc 0f00 	cmp.w	ip, #0
 800e21e:	d001      	beq.n	800e224 <__lshift+0xac>
 800e220:	f108 0602 	add.w	r6, r8, #2
 800e224:	3e01      	subs	r6, #1
 800e226:	4638      	mov	r0, r7
 800e228:	612e      	str	r6, [r5, #16]
 800e22a:	4621      	mov	r1, r4
 800e22c:	f7ff fd88 	bl	800dd40 <_Bfree>
 800e230:	4628      	mov	r0, r5
 800e232:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e236:	f842 0f04 	str.w	r0, [r2, #4]!
 800e23a:	3301      	adds	r3, #1
 800e23c:	e7c1      	b.n	800e1c2 <__lshift+0x4a>
 800e23e:	3904      	subs	r1, #4
 800e240:	f853 2b04 	ldr.w	r2, [r3], #4
 800e244:	f841 2f04 	str.w	r2, [r1, #4]!
 800e248:	4298      	cmp	r0, r3
 800e24a:	d8f9      	bhi.n	800e240 <__lshift+0xc8>
 800e24c:	e7ea      	b.n	800e224 <__lshift+0xac>
 800e24e:	bf00      	nop
 800e250:	0800fb99 	.word	0x0800fb99
 800e254:	0800fc24 	.word	0x0800fc24

0800e258 <__mcmp>:
 800e258:	b530      	push	{r4, r5, lr}
 800e25a:	6902      	ldr	r2, [r0, #16]
 800e25c:	690c      	ldr	r4, [r1, #16]
 800e25e:	1b12      	subs	r2, r2, r4
 800e260:	d10e      	bne.n	800e280 <__mcmp+0x28>
 800e262:	f100 0314 	add.w	r3, r0, #20
 800e266:	3114      	adds	r1, #20
 800e268:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800e26c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800e270:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800e274:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800e278:	42a5      	cmp	r5, r4
 800e27a:	d003      	beq.n	800e284 <__mcmp+0x2c>
 800e27c:	d305      	bcc.n	800e28a <__mcmp+0x32>
 800e27e:	2201      	movs	r2, #1
 800e280:	4610      	mov	r0, r2
 800e282:	bd30      	pop	{r4, r5, pc}
 800e284:	4283      	cmp	r3, r0
 800e286:	d3f3      	bcc.n	800e270 <__mcmp+0x18>
 800e288:	e7fa      	b.n	800e280 <__mcmp+0x28>
 800e28a:	f04f 32ff 	mov.w	r2, #4294967295
 800e28e:	e7f7      	b.n	800e280 <__mcmp+0x28>

0800e290 <__mdiff>:
 800e290:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e294:	460c      	mov	r4, r1
 800e296:	4606      	mov	r6, r0
 800e298:	4611      	mov	r1, r2
 800e29a:	4620      	mov	r0, r4
 800e29c:	4690      	mov	r8, r2
 800e29e:	f7ff ffdb 	bl	800e258 <__mcmp>
 800e2a2:	1e05      	subs	r5, r0, #0
 800e2a4:	d110      	bne.n	800e2c8 <__mdiff+0x38>
 800e2a6:	4629      	mov	r1, r5
 800e2a8:	4630      	mov	r0, r6
 800e2aa:	f7ff fd09 	bl	800dcc0 <_Balloc>
 800e2ae:	b930      	cbnz	r0, 800e2be <__mdiff+0x2e>
 800e2b0:	4b3a      	ldr	r3, [pc, #232]	; (800e39c <__mdiff+0x10c>)
 800e2b2:	4602      	mov	r2, r0
 800e2b4:	f240 2132 	movw	r1, #562	; 0x232
 800e2b8:	4839      	ldr	r0, [pc, #228]	; (800e3a0 <__mdiff+0x110>)
 800e2ba:	f7fe fab9 	bl	800c830 <__assert_func>
 800e2be:	2301      	movs	r3, #1
 800e2c0:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800e2c4:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800e2c8:	bfa4      	itt	ge
 800e2ca:	4643      	movge	r3, r8
 800e2cc:	46a0      	movge	r8, r4
 800e2ce:	4630      	mov	r0, r6
 800e2d0:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800e2d4:	bfa6      	itte	ge
 800e2d6:	461c      	movge	r4, r3
 800e2d8:	2500      	movge	r5, #0
 800e2da:	2501      	movlt	r5, #1
 800e2dc:	f7ff fcf0 	bl	800dcc0 <_Balloc>
 800e2e0:	b920      	cbnz	r0, 800e2ec <__mdiff+0x5c>
 800e2e2:	4b2e      	ldr	r3, [pc, #184]	; (800e39c <__mdiff+0x10c>)
 800e2e4:	4602      	mov	r2, r0
 800e2e6:	f44f 7110 	mov.w	r1, #576	; 0x240
 800e2ea:	e7e5      	b.n	800e2b8 <__mdiff+0x28>
 800e2ec:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800e2f0:	6926      	ldr	r6, [r4, #16]
 800e2f2:	60c5      	str	r5, [r0, #12]
 800e2f4:	f104 0914 	add.w	r9, r4, #20
 800e2f8:	f108 0514 	add.w	r5, r8, #20
 800e2fc:	f100 0e14 	add.w	lr, r0, #20
 800e300:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800e304:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800e308:	f108 0210 	add.w	r2, r8, #16
 800e30c:	46f2      	mov	sl, lr
 800e30e:	2100      	movs	r1, #0
 800e310:	f859 3b04 	ldr.w	r3, [r9], #4
 800e314:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800e318:	fa1f f883 	uxth.w	r8, r3
 800e31c:	fa11 f18b 	uxtah	r1, r1, fp
 800e320:	0c1b      	lsrs	r3, r3, #16
 800e322:	eba1 0808 	sub.w	r8, r1, r8
 800e326:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800e32a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800e32e:	fa1f f888 	uxth.w	r8, r8
 800e332:	1419      	asrs	r1, r3, #16
 800e334:	454e      	cmp	r6, r9
 800e336:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800e33a:	f84a 3b04 	str.w	r3, [sl], #4
 800e33e:	d8e7      	bhi.n	800e310 <__mdiff+0x80>
 800e340:	1b33      	subs	r3, r6, r4
 800e342:	3b15      	subs	r3, #21
 800e344:	f023 0303 	bic.w	r3, r3, #3
 800e348:	3304      	adds	r3, #4
 800e34a:	3415      	adds	r4, #21
 800e34c:	42a6      	cmp	r6, r4
 800e34e:	bf38      	it	cc
 800e350:	2304      	movcc	r3, #4
 800e352:	441d      	add	r5, r3
 800e354:	4473      	add	r3, lr
 800e356:	469e      	mov	lr, r3
 800e358:	462e      	mov	r6, r5
 800e35a:	4566      	cmp	r6, ip
 800e35c:	d30e      	bcc.n	800e37c <__mdiff+0xec>
 800e35e:	f10c 0203 	add.w	r2, ip, #3
 800e362:	1b52      	subs	r2, r2, r5
 800e364:	f022 0203 	bic.w	r2, r2, #3
 800e368:	3d03      	subs	r5, #3
 800e36a:	45ac      	cmp	ip, r5
 800e36c:	bf38      	it	cc
 800e36e:	2200      	movcc	r2, #0
 800e370:	441a      	add	r2, r3
 800e372:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800e376:	b17b      	cbz	r3, 800e398 <__mdiff+0x108>
 800e378:	6107      	str	r7, [r0, #16]
 800e37a:	e7a3      	b.n	800e2c4 <__mdiff+0x34>
 800e37c:	f856 8b04 	ldr.w	r8, [r6], #4
 800e380:	fa11 f288 	uxtah	r2, r1, r8
 800e384:	1414      	asrs	r4, r2, #16
 800e386:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800e38a:	b292      	uxth	r2, r2
 800e38c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800e390:	f84e 2b04 	str.w	r2, [lr], #4
 800e394:	1421      	asrs	r1, r4, #16
 800e396:	e7e0      	b.n	800e35a <__mdiff+0xca>
 800e398:	3f01      	subs	r7, #1
 800e39a:	e7ea      	b.n	800e372 <__mdiff+0xe2>
 800e39c:	0800fb99 	.word	0x0800fb99
 800e3a0:	0800fc24 	.word	0x0800fc24

0800e3a4 <__ulp>:
 800e3a4:	b082      	sub	sp, #8
 800e3a6:	ed8d 0b00 	vstr	d0, [sp]
 800e3aa:	9b01      	ldr	r3, [sp, #4]
 800e3ac:	4912      	ldr	r1, [pc, #72]	; (800e3f8 <__ulp+0x54>)
 800e3ae:	4019      	ands	r1, r3
 800e3b0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800e3b4:	2900      	cmp	r1, #0
 800e3b6:	dd05      	ble.n	800e3c4 <__ulp+0x20>
 800e3b8:	2200      	movs	r2, #0
 800e3ba:	460b      	mov	r3, r1
 800e3bc:	ec43 2b10 	vmov	d0, r2, r3
 800e3c0:	b002      	add	sp, #8
 800e3c2:	4770      	bx	lr
 800e3c4:	4249      	negs	r1, r1
 800e3c6:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800e3ca:	ea4f 5021 	mov.w	r0, r1, asr #20
 800e3ce:	f04f 0200 	mov.w	r2, #0
 800e3d2:	f04f 0300 	mov.w	r3, #0
 800e3d6:	da04      	bge.n	800e3e2 <__ulp+0x3e>
 800e3d8:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800e3dc:	fa41 f300 	asr.w	r3, r1, r0
 800e3e0:	e7ec      	b.n	800e3bc <__ulp+0x18>
 800e3e2:	f1a0 0114 	sub.w	r1, r0, #20
 800e3e6:	291e      	cmp	r1, #30
 800e3e8:	bfda      	itte	le
 800e3ea:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800e3ee:	fa20 f101 	lsrle.w	r1, r0, r1
 800e3f2:	2101      	movgt	r1, #1
 800e3f4:	460a      	mov	r2, r1
 800e3f6:	e7e1      	b.n	800e3bc <__ulp+0x18>
 800e3f8:	7ff00000 	.word	0x7ff00000

0800e3fc <__b2d>:
 800e3fc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e3fe:	6905      	ldr	r5, [r0, #16]
 800e400:	f100 0714 	add.w	r7, r0, #20
 800e404:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800e408:	1f2e      	subs	r6, r5, #4
 800e40a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800e40e:	4620      	mov	r0, r4
 800e410:	f7ff fd48 	bl	800dea4 <__hi0bits>
 800e414:	f1c0 0320 	rsb	r3, r0, #32
 800e418:	280a      	cmp	r0, #10
 800e41a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800e498 <__b2d+0x9c>
 800e41e:	600b      	str	r3, [r1, #0]
 800e420:	dc14      	bgt.n	800e44c <__b2d+0x50>
 800e422:	f1c0 0e0b 	rsb	lr, r0, #11
 800e426:	fa24 f10e 	lsr.w	r1, r4, lr
 800e42a:	42b7      	cmp	r7, r6
 800e42c:	ea41 030c 	orr.w	r3, r1, ip
 800e430:	bf34      	ite	cc
 800e432:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e436:	2100      	movcs	r1, #0
 800e438:	3015      	adds	r0, #21
 800e43a:	fa04 f000 	lsl.w	r0, r4, r0
 800e43e:	fa21 f10e 	lsr.w	r1, r1, lr
 800e442:	ea40 0201 	orr.w	r2, r0, r1
 800e446:	ec43 2b10 	vmov	d0, r2, r3
 800e44a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e44c:	42b7      	cmp	r7, r6
 800e44e:	bf3a      	itte	cc
 800e450:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800e454:	f1a5 0608 	subcc.w	r6, r5, #8
 800e458:	2100      	movcs	r1, #0
 800e45a:	380b      	subs	r0, #11
 800e45c:	d017      	beq.n	800e48e <__b2d+0x92>
 800e45e:	f1c0 0c20 	rsb	ip, r0, #32
 800e462:	fa04 f500 	lsl.w	r5, r4, r0
 800e466:	42be      	cmp	r6, r7
 800e468:	fa21 f40c 	lsr.w	r4, r1, ip
 800e46c:	ea45 0504 	orr.w	r5, r5, r4
 800e470:	bf8c      	ite	hi
 800e472:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800e476:	2400      	movls	r4, #0
 800e478:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800e47c:	fa01 f000 	lsl.w	r0, r1, r0
 800e480:	fa24 f40c 	lsr.w	r4, r4, ip
 800e484:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800e488:	ea40 0204 	orr.w	r2, r0, r4
 800e48c:	e7db      	b.n	800e446 <__b2d+0x4a>
 800e48e:	ea44 030c 	orr.w	r3, r4, ip
 800e492:	460a      	mov	r2, r1
 800e494:	e7d7      	b.n	800e446 <__b2d+0x4a>
 800e496:	bf00      	nop
 800e498:	3ff00000 	.word	0x3ff00000

0800e49c <__d2b>:
 800e49c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800e4a0:	4689      	mov	r9, r1
 800e4a2:	2101      	movs	r1, #1
 800e4a4:	ec57 6b10 	vmov	r6, r7, d0
 800e4a8:	4690      	mov	r8, r2
 800e4aa:	f7ff fc09 	bl	800dcc0 <_Balloc>
 800e4ae:	4604      	mov	r4, r0
 800e4b0:	b930      	cbnz	r0, 800e4c0 <__d2b+0x24>
 800e4b2:	4602      	mov	r2, r0
 800e4b4:	4b25      	ldr	r3, [pc, #148]	; (800e54c <__d2b+0xb0>)
 800e4b6:	4826      	ldr	r0, [pc, #152]	; (800e550 <__d2b+0xb4>)
 800e4b8:	f240 310a 	movw	r1, #778	; 0x30a
 800e4bc:	f7fe f9b8 	bl	800c830 <__assert_func>
 800e4c0:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800e4c4:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800e4c8:	bb35      	cbnz	r5, 800e518 <__d2b+0x7c>
 800e4ca:	2e00      	cmp	r6, #0
 800e4cc:	9301      	str	r3, [sp, #4]
 800e4ce:	d028      	beq.n	800e522 <__d2b+0x86>
 800e4d0:	4668      	mov	r0, sp
 800e4d2:	9600      	str	r6, [sp, #0]
 800e4d4:	f7ff fd06 	bl	800dee4 <__lo0bits>
 800e4d8:	9900      	ldr	r1, [sp, #0]
 800e4da:	b300      	cbz	r0, 800e51e <__d2b+0x82>
 800e4dc:	9a01      	ldr	r2, [sp, #4]
 800e4de:	f1c0 0320 	rsb	r3, r0, #32
 800e4e2:	fa02 f303 	lsl.w	r3, r2, r3
 800e4e6:	430b      	orrs	r3, r1
 800e4e8:	40c2      	lsrs	r2, r0
 800e4ea:	6163      	str	r3, [r4, #20]
 800e4ec:	9201      	str	r2, [sp, #4]
 800e4ee:	9b01      	ldr	r3, [sp, #4]
 800e4f0:	61a3      	str	r3, [r4, #24]
 800e4f2:	2b00      	cmp	r3, #0
 800e4f4:	bf14      	ite	ne
 800e4f6:	2202      	movne	r2, #2
 800e4f8:	2201      	moveq	r2, #1
 800e4fa:	6122      	str	r2, [r4, #16]
 800e4fc:	b1d5      	cbz	r5, 800e534 <__d2b+0x98>
 800e4fe:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800e502:	4405      	add	r5, r0
 800e504:	f8c9 5000 	str.w	r5, [r9]
 800e508:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800e50c:	f8c8 0000 	str.w	r0, [r8]
 800e510:	4620      	mov	r0, r4
 800e512:	b003      	add	sp, #12
 800e514:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800e518:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800e51c:	e7d5      	b.n	800e4ca <__d2b+0x2e>
 800e51e:	6161      	str	r1, [r4, #20]
 800e520:	e7e5      	b.n	800e4ee <__d2b+0x52>
 800e522:	a801      	add	r0, sp, #4
 800e524:	f7ff fcde 	bl	800dee4 <__lo0bits>
 800e528:	9b01      	ldr	r3, [sp, #4]
 800e52a:	6163      	str	r3, [r4, #20]
 800e52c:	2201      	movs	r2, #1
 800e52e:	6122      	str	r2, [r4, #16]
 800e530:	3020      	adds	r0, #32
 800e532:	e7e3      	b.n	800e4fc <__d2b+0x60>
 800e534:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800e538:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800e53c:	f8c9 0000 	str.w	r0, [r9]
 800e540:	6918      	ldr	r0, [r3, #16]
 800e542:	f7ff fcaf 	bl	800dea4 <__hi0bits>
 800e546:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800e54a:	e7df      	b.n	800e50c <__d2b+0x70>
 800e54c:	0800fb99 	.word	0x0800fb99
 800e550:	0800fc24 	.word	0x0800fc24

0800e554 <__ratio>:
 800e554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e558:	4688      	mov	r8, r1
 800e55a:	4669      	mov	r1, sp
 800e55c:	4681      	mov	r9, r0
 800e55e:	f7ff ff4d 	bl	800e3fc <__b2d>
 800e562:	a901      	add	r1, sp, #4
 800e564:	4640      	mov	r0, r8
 800e566:	ec55 4b10 	vmov	r4, r5, d0
 800e56a:	f7ff ff47 	bl	800e3fc <__b2d>
 800e56e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800e572:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800e576:	eba3 0c02 	sub.w	ip, r3, r2
 800e57a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800e57e:	1a9b      	subs	r3, r3, r2
 800e580:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800e584:	ec51 0b10 	vmov	r0, r1, d0
 800e588:	2b00      	cmp	r3, #0
 800e58a:	bfd6      	itet	le
 800e58c:	460a      	movle	r2, r1
 800e58e:	462a      	movgt	r2, r5
 800e590:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800e594:	468b      	mov	fp, r1
 800e596:	462f      	mov	r7, r5
 800e598:	bfd4      	ite	le
 800e59a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800e59e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800e5a2:	4620      	mov	r0, r4
 800e5a4:	ee10 2a10 	vmov	r2, s0
 800e5a8:	465b      	mov	r3, fp
 800e5aa:	4639      	mov	r1, r7
 800e5ac:	f7f2 f94e 	bl	800084c <__aeabi_ddiv>
 800e5b0:	ec41 0b10 	vmov	d0, r0, r1
 800e5b4:	b003      	add	sp, #12
 800e5b6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800e5ba <__copybits>:
 800e5ba:	3901      	subs	r1, #1
 800e5bc:	b570      	push	{r4, r5, r6, lr}
 800e5be:	1149      	asrs	r1, r1, #5
 800e5c0:	6914      	ldr	r4, [r2, #16]
 800e5c2:	3101      	adds	r1, #1
 800e5c4:	f102 0314 	add.w	r3, r2, #20
 800e5c8:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800e5cc:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800e5d0:	1f05      	subs	r5, r0, #4
 800e5d2:	42a3      	cmp	r3, r4
 800e5d4:	d30c      	bcc.n	800e5f0 <__copybits+0x36>
 800e5d6:	1aa3      	subs	r3, r4, r2
 800e5d8:	3b11      	subs	r3, #17
 800e5da:	f023 0303 	bic.w	r3, r3, #3
 800e5de:	3211      	adds	r2, #17
 800e5e0:	42a2      	cmp	r2, r4
 800e5e2:	bf88      	it	hi
 800e5e4:	2300      	movhi	r3, #0
 800e5e6:	4418      	add	r0, r3
 800e5e8:	2300      	movs	r3, #0
 800e5ea:	4288      	cmp	r0, r1
 800e5ec:	d305      	bcc.n	800e5fa <__copybits+0x40>
 800e5ee:	bd70      	pop	{r4, r5, r6, pc}
 800e5f0:	f853 6b04 	ldr.w	r6, [r3], #4
 800e5f4:	f845 6f04 	str.w	r6, [r5, #4]!
 800e5f8:	e7eb      	b.n	800e5d2 <__copybits+0x18>
 800e5fa:	f840 3b04 	str.w	r3, [r0], #4
 800e5fe:	e7f4      	b.n	800e5ea <__copybits+0x30>

0800e600 <__any_on>:
 800e600:	f100 0214 	add.w	r2, r0, #20
 800e604:	6900      	ldr	r0, [r0, #16]
 800e606:	114b      	asrs	r3, r1, #5
 800e608:	4298      	cmp	r0, r3
 800e60a:	b510      	push	{r4, lr}
 800e60c:	db11      	blt.n	800e632 <__any_on+0x32>
 800e60e:	dd0a      	ble.n	800e626 <__any_on+0x26>
 800e610:	f011 011f 	ands.w	r1, r1, #31
 800e614:	d007      	beq.n	800e626 <__any_on+0x26>
 800e616:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800e61a:	fa24 f001 	lsr.w	r0, r4, r1
 800e61e:	fa00 f101 	lsl.w	r1, r0, r1
 800e622:	428c      	cmp	r4, r1
 800e624:	d10b      	bne.n	800e63e <__any_on+0x3e>
 800e626:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800e62a:	4293      	cmp	r3, r2
 800e62c:	d803      	bhi.n	800e636 <__any_on+0x36>
 800e62e:	2000      	movs	r0, #0
 800e630:	bd10      	pop	{r4, pc}
 800e632:	4603      	mov	r3, r0
 800e634:	e7f7      	b.n	800e626 <__any_on+0x26>
 800e636:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800e63a:	2900      	cmp	r1, #0
 800e63c:	d0f5      	beq.n	800e62a <__any_on+0x2a>
 800e63e:	2001      	movs	r0, #1
 800e640:	e7f6      	b.n	800e630 <__any_on+0x30>

0800e642 <_calloc_r>:
 800e642:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e644:	fba1 2402 	umull	r2, r4, r1, r2
 800e648:	b94c      	cbnz	r4, 800e65e <_calloc_r+0x1c>
 800e64a:	4611      	mov	r1, r2
 800e64c:	9201      	str	r2, [sp, #4]
 800e64e:	f000 f87b 	bl	800e748 <_malloc_r>
 800e652:	9a01      	ldr	r2, [sp, #4]
 800e654:	4605      	mov	r5, r0
 800e656:	b930      	cbnz	r0, 800e666 <_calloc_r+0x24>
 800e658:	4628      	mov	r0, r5
 800e65a:	b003      	add	sp, #12
 800e65c:	bd30      	pop	{r4, r5, pc}
 800e65e:	220c      	movs	r2, #12
 800e660:	6002      	str	r2, [r0, #0]
 800e662:	2500      	movs	r5, #0
 800e664:	e7f8      	b.n	800e658 <_calloc_r+0x16>
 800e666:	4621      	mov	r1, r4
 800e668:	f7fc fb24 	bl	800acb4 <memset>
 800e66c:	e7f4      	b.n	800e658 <_calloc_r+0x16>
	...

0800e670 <_free_r>:
 800e670:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800e672:	2900      	cmp	r1, #0
 800e674:	d044      	beq.n	800e700 <_free_r+0x90>
 800e676:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e67a:	9001      	str	r0, [sp, #4]
 800e67c:	2b00      	cmp	r3, #0
 800e67e:	f1a1 0404 	sub.w	r4, r1, #4
 800e682:	bfb8      	it	lt
 800e684:	18e4      	addlt	r4, r4, r3
 800e686:	f000 fec7 	bl	800f418 <__malloc_lock>
 800e68a:	4a1e      	ldr	r2, [pc, #120]	; (800e704 <_free_r+0x94>)
 800e68c:	9801      	ldr	r0, [sp, #4]
 800e68e:	6813      	ldr	r3, [r2, #0]
 800e690:	b933      	cbnz	r3, 800e6a0 <_free_r+0x30>
 800e692:	6063      	str	r3, [r4, #4]
 800e694:	6014      	str	r4, [r2, #0]
 800e696:	b003      	add	sp, #12
 800e698:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800e69c:	f000 bec2 	b.w	800f424 <__malloc_unlock>
 800e6a0:	42a3      	cmp	r3, r4
 800e6a2:	d908      	bls.n	800e6b6 <_free_r+0x46>
 800e6a4:	6825      	ldr	r5, [r4, #0]
 800e6a6:	1961      	adds	r1, r4, r5
 800e6a8:	428b      	cmp	r3, r1
 800e6aa:	bf01      	itttt	eq
 800e6ac:	6819      	ldreq	r1, [r3, #0]
 800e6ae:	685b      	ldreq	r3, [r3, #4]
 800e6b0:	1949      	addeq	r1, r1, r5
 800e6b2:	6021      	streq	r1, [r4, #0]
 800e6b4:	e7ed      	b.n	800e692 <_free_r+0x22>
 800e6b6:	461a      	mov	r2, r3
 800e6b8:	685b      	ldr	r3, [r3, #4]
 800e6ba:	b10b      	cbz	r3, 800e6c0 <_free_r+0x50>
 800e6bc:	42a3      	cmp	r3, r4
 800e6be:	d9fa      	bls.n	800e6b6 <_free_r+0x46>
 800e6c0:	6811      	ldr	r1, [r2, #0]
 800e6c2:	1855      	adds	r5, r2, r1
 800e6c4:	42a5      	cmp	r5, r4
 800e6c6:	d10b      	bne.n	800e6e0 <_free_r+0x70>
 800e6c8:	6824      	ldr	r4, [r4, #0]
 800e6ca:	4421      	add	r1, r4
 800e6cc:	1854      	adds	r4, r2, r1
 800e6ce:	42a3      	cmp	r3, r4
 800e6d0:	6011      	str	r1, [r2, #0]
 800e6d2:	d1e0      	bne.n	800e696 <_free_r+0x26>
 800e6d4:	681c      	ldr	r4, [r3, #0]
 800e6d6:	685b      	ldr	r3, [r3, #4]
 800e6d8:	6053      	str	r3, [r2, #4]
 800e6da:	4421      	add	r1, r4
 800e6dc:	6011      	str	r1, [r2, #0]
 800e6de:	e7da      	b.n	800e696 <_free_r+0x26>
 800e6e0:	d902      	bls.n	800e6e8 <_free_r+0x78>
 800e6e2:	230c      	movs	r3, #12
 800e6e4:	6003      	str	r3, [r0, #0]
 800e6e6:	e7d6      	b.n	800e696 <_free_r+0x26>
 800e6e8:	6825      	ldr	r5, [r4, #0]
 800e6ea:	1961      	adds	r1, r4, r5
 800e6ec:	428b      	cmp	r3, r1
 800e6ee:	bf04      	itt	eq
 800e6f0:	6819      	ldreq	r1, [r3, #0]
 800e6f2:	685b      	ldreq	r3, [r3, #4]
 800e6f4:	6063      	str	r3, [r4, #4]
 800e6f6:	bf04      	itt	eq
 800e6f8:	1949      	addeq	r1, r1, r5
 800e6fa:	6021      	streq	r1, [r4, #0]
 800e6fc:	6054      	str	r4, [r2, #4]
 800e6fe:	e7ca      	b.n	800e696 <_free_r+0x26>
 800e700:	b003      	add	sp, #12
 800e702:	bd30      	pop	{r4, r5, pc}
 800e704:	20000570 	.word	0x20000570

0800e708 <sbrk_aligned>:
 800e708:	b570      	push	{r4, r5, r6, lr}
 800e70a:	4e0e      	ldr	r6, [pc, #56]	; (800e744 <sbrk_aligned+0x3c>)
 800e70c:	460c      	mov	r4, r1
 800e70e:	6831      	ldr	r1, [r6, #0]
 800e710:	4605      	mov	r5, r0
 800e712:	b911      	cbnz	r1, 800e71a <sbrk_aligned+0x12>
 800e714:	f000 fb4c 	bl	800edb0 <_sbrk_r>
 800e718:	6030      	str	r0, [r6, #0]
 800e71a:	4621      	mov	r1, r4
 800e71c:	4628      	mov	r0, r5
 800e71e:	f000 fb47 	bl	800edb0 <_sbrk_r>
 800e722:	1c43      	adds	r3, r0, #1
 800e724:	d00a      	beq.n	800e73c <sbrk_aligned+0x34>
 800e726:	1cc4      	adds	r4, r0, #3
 800e728:	f024 0403 	bic.w	r4, r4, #3
 800e72c:	42a0      	cmp	r0, r4
 800e72e:	d007      	beq.n	800e740 <sbrk_aligned+0x38>
 800e730:	1a21      	subs	r1, r4, r0
 800e732:	4628      	mov	r0, r5
 800e734:	f000 fb3c 	bl	800edb0 <_sbrk_r>
 800e738:	3001      	adds	r0, #1
 800e73a:	d101      	bne.n	800e740 <sbrk_aligned+0x38>
 800e73c:	f04f 34ff 	mov.w	r4, #4294967295
 800e740:	4620      	mov	r0, r4
 800e742:	bd70      	pop	{r4, r5, r6, pc}
 800e744:	20000574 	.word	0x20000574

0800e748 <_malloc_r>:
 800e748:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e74c:	1ccd      	adds	r5, r1, #3
 800e74e:	f025 0503 	bic.w	r5, r5, #3
 800e752:	3508      	adds	r5, #8
 800e754:	2d0c      	cmp	r5, #12
 800e756:	bf38      	it	cc
 800e758:	250c      	movcc	r5, #12
 800e75a:	2d00      	cmp	r5, #0
 800e75c:	4607      	mov	r7, r0
 800e75e:	db01      	blt.n	800e764 <_malloc_r+0x1c>
 800e760:	42a9      	cmp	r1, r5
 800e762:	d905      	bls.n	800e770 <_malloc_r+0x28>
 800e764:	230c      	movs	r3, #12
 800e766:	603b      	str	r3, [r7, #0]
 800e768:	2600      	movs	r6, #0
 800e76a:	4630      	mov	r0, r6
 800e76c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e770:	4e2e      	ldr	r6, [pc, #184]	; (800e82c <_malloc_r+0xe4>)
 800e772:	f000 fe51 	bl	800f418 <__malloc_lock>
 800e776:	6833      	ldr	r3, [r6, #0]
 800e778:	461c      	mov	r4, r3
 800e77a:	bb34      	cbnz	r4, 800e7ca <_malloc_r+0x82>
 800e77c:	4629      	mov	r1, r5
 800e77e:	4638      	mov	r0, r7
 800e780:	f7ff ffc2 	bl	800e708 <sbrk_aligned>
 800e784:	1c43      	adds	r3, r0, #1
 800e786:	4604      	mov	r4, r0
 800e788:	d14d      	bne.n	800e826 <_malloc_r+0xde>
 800e78a:	6834      	ldr	r4, [r6, #0]
 800e78c:	4626      	mov	r6, r4
 800e78e:	2e00      	cmp	r6, #0
 800e790:	d140      	bne.n	800e814 <_malloc_r+0xcc>
 800e792:	6823      	ldr	r3, [r4, #0]
 800e794:	4631      	mov	r1, r6
 800e796:	4638      	mov	r0, r7
 800e798:	eb04 0803 	add.w	r8, r4, r3
 800e79c:	f000 fb08 	bl	800edb0 <_sbrk_r>
 800e7a0:	4580      	cmp	r8, r0
 800e7a2:	d13a      	bne.n	800e81a <_malloc_r+0xd2>
 800e7a4:	6821      	ldr	r1, [r4, #0]
 800e7a6:	3503      	adds	r5, #3
 800e7a8:	1a6d      	subs	r5, r5, r1
 800e7aa:	f025 0503 	bic.w	r5, r5, #3
 800e7ae:	3508      	adds	r5, #8
 800e7b0:	2d0c      	cmp	r5, #12
 800e7b2:	bf38      	it	cc
 800e7b4:	250c      	movcc	r5, #12
 800e7b6:	4629      	mov	r1, r5
 800e7b8:	4638      	mov	r0, r7
 800e7ba:	f7ff ffa5 	bl	800e708 <sbrk_aligned>
 800e7be:	3001      	adds	r0, #1
 800e7c0:	d02b      	beq.n	800e81a <_malloc_r+0xd2>
 800e7c2:	6823      	ldr	r3, [r4, #0]
 800e7c4:	442b      	add	r3, r5
 800e7c6:	6023      	str	r3, [r4, #0]
 800e7c8:	e00e      	b.n	800e7e8 <_malloc_r+0xa0>
 800e7ca:	6822      	ldr	r2, [r4, #0]
 800e7cc:	1b52      	subs	r2, r2, r5
 800e7ce:	d41e      	bmi.n	800e80e <_malloc_r+0xc6>
 800e7d0:	2a0b      	cmp	r2, #11
 800e7d2:	d916      	bls.n	800e802 <_malloc_r+0xba>
 800e7d4:	1961      	adds	r1, r4, r5
 800e7d6:	42a3      	cmp	r3, r4
 800e7d8:	6025      	str	r5, [r4, #0]
 800e7da:	bf18      	it	ne
 800e7dc:	6059      	strne	r1, [r3, #4]
 800e7de:	6863      	ldr	r3, [r4, #4]
 800e7e0:	bf08      	it	eq
 800e7e2:	6031      	streq	r1, [r6, #0]
 800e7e4:	5162      	str	r2, [r4, r5]
 800e7e6:	604b      	str	r3, [r1, #4]
 800e7e8:	4638      	mov	r0, r7
 800e7ea:	f104 060b 	add.w	r6, r4, #11
 800e7ee:	f000 fe19 	bl	800f424 <__malloc_unlock>
 800e7f2:	f026 0607 	bic.w	r6, r6, #7
 800e7f6:	1d23      	adds	r3, r4, #4
 800e7f8:	1af2      	subs	r2, r6, r3
 800e7fa:	d0b6      	beq.n	800e76a <_malloc_r+0x22>
 800e7fc:	1b9b      	subs	r3, r3, r6
 800e7fe:	50a3      	str	r3, [r4, r2]
 800e800:	e7b3      	b.n	800e76a <_malloc_r+0x22>
 800e802:	6862      	ldr	r2, [r4, #4]
 800e804:	42a3      	cmp	r3, r4
 800e806:	bf0c      	ite	eq
 800e808:	6032      	streq	r2, [r6, #0]
 800e80a:	605a      	strne	r2, [r3, #4]
 800e80c:	e7ec      	b.n	800e7e8 <_malloc_r+0xa0>
 800e80e:	4623      	mov	r3, r4
 800e810:	6864      	ldr	r4, [r4, #4]
 800e812:	e7b2      	b.n	800e77a <_malloc_r+0x32>
 800e814:	4634      	mov	r4, r6
 800e816:	6876      	ldr	r6, [r6, #4]
 800e818:	e7b9      	b.n	800e78e <_malloc_r+0x46>
 800e81a:	230c      	movs	r3, #12
 800e81c:	603b      	str	r3, [r7, #0]
 800e81e:	4638      	mov	r0, r7
 800e820:	f000 fe00 	bl	800f424 <__malloc_unlock>
 800e824:	e7a1      	b.n	800e76a <_malloc_r+0x22>
 800e826:	6025      	str	r5, [r4, #0]
 800e828:	e7de      	b.n	800e7e8 <_malloc_r+0xa0>
 800e82a:	bf00      	nop
 800e82c:	20000570 	.word	0x20000570

0800e830 <__ssputs_r>:
 800e830:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800e834:	688e      	ldr	r6, [r1, #8]
 800e836:	429e      	cmp	r6, r3
 800e838:	4682      	mov	sl, r0
 800e83a:	460c      	mov	r4, r1
 800e83c:	4690      	mov	r8, r2
 800e83e:	461f      	mov	r7, r3
 800e840:	d838      	bhi.n	800e8b4 <__ssputs_r+0x84>
 800e842:	898a      	ldrh	r2, [r1, #12]
 800e844:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800e848:	d032      	beq.n	800e8b0 <__ssputs_r+0x80>
 800e84a:	6825      	ldr	r5, [r4, #0]
 800e84c:	6909      	ldr	r1, [r1, #16]
 800e84e:	eba5 0901 	sub.w	r9, r5, r1
 800e852:	6965      	ldr	r5, [r4, #20]
 800e854:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800e858:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800e85c:	3301      	adds	r3, #1
 800e85e:	444b      	add	r3, r9
 800e860:	106d      	asrs	r5, r5, #1
 800e862:	429d      	cmp	r5, r3
 800e864:	bf38      	it	cc
 800e866:	461d      	movcc	r5, r3
 800e868:	0553      	lsls	r3, r2, #21
 800e86a:	d531      	bpl.n	800e8d0 <__ssputs_r+0xa0>
 800e86c:	4629      	mov	r1, r5
 800e86e:	f7ff ff6b 	bl	800e748 <_malloc_r>
 800e872:	4606      	mov	r6, r0
 800e874:	b950      	cbnz	r0, 800e88c <__ssputs_r+0x5c>
 800e876:	230c      	movs	r3, #12
 800e878:	f8ca 3000 	str.w	r3, [sl]
 800e87c:	89a3      	ldrh	r3, [r4, #12]
 800e87e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e882:	81a3      	strh	r3, [r4, #12]
 800e884:	f04f 30ff 	mov.w	r0, #4294967295
 800e888:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800e88c:	6921      	ldr	r1, [r4, #16]
 800e88e:	464a      	mov	r2, r9
 800e890:	f7ff fa08 	bl	800dca4 <memcpy>
 800e894:	89a3      	ldrh	r3, [r4, #12]
 800e896:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800e89a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e89e:	81a3      	strh	r3, [r4, #12]
 800e8a0:	6126      	str	r6, [r4, #16]
 800e8a2:	6165      	str	r5, [r4, #20]
 800e8a4:	444e      	add	r6, r9
 800e8a6:	eba5 0509 	sub.w	r5, r5, r9
 800e8aa:	6026      	str	r6, [r4, #0]
 800e8ac:	60a5      	str	r5, [r4, #8]
 800e8ae:	463e      	mov	r6, r7
 800e8b0:	42be      	cmp	r6, r7
 800e8b2:	d900      	bls.n	800e8b6 <__ssputs_r+0x86>
 800e8b4:	463e      	mov	r6, r7
 800e8b6:	6820      	ldr	r0, [r4, #0]
 800e8b8:	4632      	mov	r2, r6
 800e8ba:	4641      	mov	r1, r8
 800e8bc:	f000 fd92 	bl	800f3e4 <memmove>
 800e8c0:	68a3      	ldr	r3, [r4, #8]
 800e8c2:	1b9b      	subs	r3, r3, r6
 800e8c4:	60a3      	str	r3, [r4, #8]
 800e8c6:	6823      	ldr	r3, [r4, #0]
 800e8c8:	4433      	add	r3, r6
 800e8ca:	6023      	str	r3, [r4, #0]
 800e8cc:	2000      	movs	r0, #0
 800e8ce:	e7db      	b.n	800e888 <__ssputs_r+0x58>
 800e8d0:	462a      	mov	r2, r5
 800e8d2:	f000 fdad 	bl	800f430 <_realloc_r>
 800e8d6:	4606      	mov	r6, r0
 800e8d8:	2800      	cmp	r0, #0
 800e8da:	d1e1      	bne.n	800e8a0 <__ssputs_r+0x70>
 800e8dc:	6921      	ldr	r1, [r4, #16]
 800e8de:	4650      	mov	r0, sl
 800e8e0:	f7ff fec6 	bl	800e670 <_free_r>
 800e8e4:	e7c7      	b.n	800e876 <__ssputs_r+0x46>
	...

0800e8e8 <_svfiprintf_r>:
 800e8e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800e8ec:	4698      	mov	r8, r3
 800e8ee:	898b      	ldrh	r3, [r1, #12]
 800e8f0:	061b      	lsls	r3, r3, #24
 800e8f2:	b09d      	sub	sp, #116	; 0x74
 800e8f4:	4607      	mov	r7, r0
 800e8f6:	460d      	mov	r5, r1
 800e8f8:	4614      	mov	r4, r2
 800e8fa:	d50e      	bpl.n	800e91a <_svfiprintf_r+0x32>
 800e8fc:	690b      	ldr	r3, [r1, #16]
 800e8fe:	b963      	cbnz	r3, 800e91a <_svfiprintf_r+0x32>
 800e900:	2140      	movs	r1, #64	; 0x40
 800e902:	f7ff ff21 	bl	800e748 <_malloc_r>
 800e906:	6028      	str	r0, [r5, #0]
 800e908:	6128      	str	r0, [r5, #16]
 800e90a:	b920      	cbnz	r0, 800e916 <_svfiprintf_r+0x2e>
 800e90c:	230c      	movs	r3, #12
 800e90e:	603b      	str	r3, [r7, #0]
 800e910:	f04f 30ff 	mov.w	r0, #4294967295
 800e914:	e0d1      	b.n	800eaba <_svfiprintf_r+0x1d2>
 800e916:	2340      	movs	r3, #64	; 0x40
 800e918:	616b      	str	r3, [r5, #20]
 800e91a:	2300      	movs	r3, #0
 800e91c:	9309      	str	r3, [sp, #36]	; 0x24
 800e91e:	2320      	movs	r3, #32
 800e920:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800e924:	f8cd 800c 	str.w	r8, [sp, #12]
 800e928:	2330      	movs	r3, #48	; 0x30
 800e92a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800ead4 <_svfiprintf_r+0x1ec>
 800e92e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800e932:	f04f 0901 	mov.w	r9, #1
 800e936:	4623      	mov	r3, r4
 800e938:	469a      	mov	sl, r3
 800e93a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800e93e:	b10a      	cbz	r2, 800e944 <_svfiprintf_r+0x5c>
 800e940:	2a25      	cmp	r2, #37	; 0x25
 800e942:	d1f9      	bne.n	800e938 <_svfiprintf_r+0x50>
 800e944:	ebba 0b04 	subs.w	fp, sl, r4
 800e948:	d00b      	beq.n	800e962 <_svfiprintf_r+0x7a>
 800e94a:	465b      	mov	r3, fp
 800e94c:	4622      	mov	r2, r4
 800e94e:	4629      	mov	r1, r5
 800e950:	4638      	mov	r0, r7
 800e952:	f7ff ff6d 	bl	800e830 <__ssputs_r>
 800e956:	3001      	adds	r0, #1
 800e958:	f000 80aa 	beq.w	800eab0 <_svfiprintf_r+0x1c8>
 800e95c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800e95e:	445a      	add	r2, fp
 800e960:	9209      	str	r2, [sp, #36]	; 0x24
 800e962:	f89a 3000 	ldrb.w	r3, [sl]
 800e966:	2b00      	cmp	r3, #0
 800e968:	f000 80a2 	beq.w	800eab0 <_svfiprintf_r+0x1c8>
 800e96c:	2300      	movs	r3, #0
 800e96e:	f04f 32ff 	mov.w	r2, #4294967295
 800e972:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800e976:	f10a 0a01 	add.w	sl, sl, #1
 800e97a:	9304      	str	r3, [sp, #16]
 800e97c:	9307      	str	r3, [sp, #28]
 800e97e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800e982:	931a      	str	r3, [sp, #104]	; 0x68
 800e984:	4654      	mov	r4, sl
 800e986:	2205      	movs	r2, #5
 800e988:	f814 1b01 	ldrb.w	r1, [r4], #1
 800e98c:	4851      	ldr	r0, [pc, #324]	; (800ead4 <_svfiprintf_r+0x1ec>)
 800e98e:	f7f1 fc27 	bl	80001e0 <memchr>
 800e992:	9a04      	ldr	r2, [sp, #16]
 800e994:	b9d8      	cbnz	r0, 800e9ce <_svfiprintf_r+0xe6>
 800e996:	06d0      	lsls	r0, r2, #27
 800e998:	bf44      	itt	mi
 800e99a:	2320      	movmi	r3, #32
 800e99c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9a0:	0711      	lsls	r1, r2, #28
 800e9a2:	bf44      	itt	mi
 800e9a4:	232b      	movmi	r3, #43	; 0x2b
 800e9a6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800e9aa:	f89a 3000 	ldrb.w	r3, [sl]
 800e9ae:	2b2a      	cmp	r3, #42	; 0x2a
 800e9b0:	d015      	beq.n	800e9de <_svfiprintf_r+0xf6>
 800e9b2:	9a07      	ldr	r2, [sp, #28]
 800e9b4:	4654      	mov	r4, sl
 800e9b6:	2000      	movs	r0, #0
 800e9b8:	f04f 0c0a 	mov.w	ip, #10
 800e9bc:	4621      	mov	r1, r4
 800e9be:	f811 3b01 	ldrb.w	r3, [r1], #1
 800e9c2:	3b30      	subs	r3, #48	; 0x30
 800e9c4:	2b09      	cmp	r3, #9
 800e9c6:	d94e      	bls.n	800ea66 <_svfiprintf_r+0x17e>
 800e9c8:	b1b0      	cbz	r0, 800e9f8 <_svfiprintf_r+0x110>
 800e9ca:	9207      	str	r2, [sp, #28]
 800e9cc:	e014      	b.n	800e9f8 <_svfiprintf_r+0x110>
 800e9ce:	eba0 0308 	sub.w	r3, r0, r8
 800e9d2:	fa09 f303 	lsl.w	r3, r9, r3
 800e9d6:	4313      	orrs	r3, r2
 800e9d8:	9304      	str	r3, [sp, #16]
 800e9da:	46a2      	mov	sl, r4
 800e9dc:	e7d2      	b.n	800e984 <_svfiprintf_r+0x9c>
 800e9de:	9b03      	ldr	r3, [sp, #12]
 800e9e0:	1d19      	adds	r1, r3, #4
 800e9e2:	681b      	ldr	r3, [r3, #0]
 800e9e4:	9103      	str	r1, [sp, #12]
 800e9e6:	2b00      	cmp	r3, #0
 800e9e8:	bfbb      	ittet	lt
 800e9ea:	425b      	neglt	r3, r3
 800e9ec:	f042 0202 	orrlt.w	r2, r2, #2
 800e9f0:	9307      	strge	r3, [sp, #28]
 800e9f2:	9307      	strlt	r3, [sp, #28]
 800e9f4:	bfb8      	it	lt
 800e9f6:	9204      	strlt	r2, [sp, #16]
 800e9f8:	7823      	ldrb	r3, [r4, #0]
 800e9fa:	2b2e      	cmp	r3, #46	; 0x2e
 800e9fc:	d10c      	bne.n	800ea18 <_svfiprintf_r+0x130>
 800e9fe:	7863      	ldrb	r3, [r4, #1]
 800ea00:	2b2a      	cmp	r3, #42	; 0x2a
 800ea02:	d135      	bne.n	800ea70 <_svfiprintf_r+0x188>
 800ea04:	9b03      	ldr	r3, [sp, #12]
 800ea06:	1d1a      	adds	r2, r3, #4
 800ea08:	681b      	ldr	r3, [r3, #0]
 800ea0a:	9203      	str	r2, [sp, #12]
 800ea0c:	2b00      	cmp	r3, #0
 800ea0e:	bfb8      	it	lt
 800ea10:	f04f 33ff 	movlt.w	r3, #4294967295
 800ea14:	3402      	adds	r4, #2
 800ea16:	9305      	str	r3, [sp, #20]
 800ea18:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800eae4 <_svfiprintf_r+0x1fc>
 800ea1c:	7821      	ldrb	r1, [r4, #0]
 800ea1e:	2203      	movs	r2, #3
 800ea20:	4650      	mov	r0, sl
 800ea22:	f7f1 fbdd 	bl	80001e0 <memchr>
 800ea26:	b140      	cbz	r0, 800ea3a <_svfiprintf_r+0x152>
 800ea28:	2340      	movs	r3, #64	; 0x40
 800ea2a:	eba0 000a 	sub.w	r0, r0, sl
 800ea2e:	fa03 f000 	lsl.w	r0, r3, r0
 800ea32:	9b04      	ldr	r3, [sp, #16]
 800ea34:	4303      	orrs	r3, r0
 800ea36:	3401      	adds	r4, #1
 800ea38:	9304      	str	r3, [sp, #16]
 800ea3a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ea3e:	4826      	ldr	r0, [pc, #152]	; (800ead8 <_svfiprintf_r+0x1f0>)
 800ea40:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ea44:	2206      	movs	r2, #6
 800ea46:	f7f1 fbcb 	bl	80001e0 <memchr>
 800ea4a:	2800      	cmp	r0, #0
 800ea4c:	d038      	beq.n	800eac0 <_svfiprintf_r+0x1d8>
 800ea4e:	4b23      	ldr	r3, [pc, #140]	; (800eadc <_svfiprintf_r+0x1f4>)
 800ea50:	bb1b      	cbnz	r3, 800ea9a <_svfiprintf_r+0x1b2>
 800ea52:	9b03      	ldr	r3, [sp, #12]
 800ea54:	3307      	adds	r3, #7
 800ea56:	f023 0307 	bic.w	r3, r3, #7
 800ea5a:	3308      	adds	r3, #8
 800ea5c:	9303      	str	r3, [sp, #12]
 800ea5e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ea60:	4433      	add	r3, r6
 800ea62:	9309      	str	r3, [sp, #36]	; 0x24
 800ea64:	e767      	b.n	800e936 <_svfiprintf_r+0x4e>
 800ea66:	fb0c 3202 	mla	r2, ip, r2, r3
 800ea6a:	460c      	mov	r4, r1
 800ea6c:	2001      	movs	r0, #1
 800ea6e:	e7a5      	b.n	800e9bc <_svfiprintf_r+0xd4>
 800ea70:	2300      	movs	r3, #0
 800ea72:	3401      	adds	r4, #1
 800ea74:	9305      	str	r3, [sp, #20]
 800ea76:	4619      	mov	r1, r3
 800ea78:	f04f 0c0a 	mov.w	ip, #10
 800ea7c:	4620      	mov	r0, r4
 800ea7e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ea82:	3a30      	subs	r2, #48	; 0x30
 800ea84:	2a09      	cmp	r2, #9
 800ea86:	d903      	bls.n	800ea90 <_svfiprintf_r+0x1a8>
 800ea88:	2b00      	cmp	r3, #0
 800ea8a:	d0c5      	beq.n	800ea18 <_svfiprintf_r+0x130>
 800ea8c:	9105      	str	r1, [sp, #20]
 800ea8e:	e7c3      	b.n	800ea18 <_svfiprintf_r+0x130>
 800ea90:	fb0c 2101 	mla	r1, ip, r1, r2
 800ea94:	4604      	mov	r4, r0
 800ea96:	2301      	movs	r3, #1
 800ea98:	e7f0      	b.n	800ea7c <_svfiprintf_r+0x194>
 800ea9a:	ab03      	add	r3, sp, #12
 800ea9c:	9300      	str	r3, [sp, #0]
 800ea9e:	462a      	mov	r2, r5
 800eaa0:	4b0f      	ldr	r3, [pc, #60]	; (800eae0 <_svfiprintf_r+0x1f8>)
 800eaa2:	a904      	add	r1, sp, #16
 800eaa4:	4638      	mov	r0, r7
 800eaa6:	f7fc f9ad 	bl	800ae04 <_printf_float>
 800eaaa:	1c42      	adds	r2, r0, #1
 800eaac:	4606      	mov	r6, r0
 800eaae:	d1d6      	bne.n	800ea5e <_svfiprintf_r+0x176>
 800eab0:	89ab      	ldrh	r3, [r5, #12]
 800eab2:	065b      	lsls	r3, r3, #25
 800eab4:	f53f af2c 	bmi.w	800e910 <_svfiprintf_r+0x28>
 800eab8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800eaba:	b01d      	add	sp, #116	; 0x74
 800eabc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eac0:	ab03      	add	r3, sp, #12
 800eac2:	9300      	str	r3, [sp, #0]
 800eac4:	462a      	mov	r2, r5
 800eac6:	4b06      	ldr	r3, [pc, #24]	; (800eae0 <_svfiprintf_r+0x1f8>)
 800eac8:	a904      	add	r1, sp, #16
 800eaca:	4638      	mov	r0, r7
 800eacc:	f7fc fc3e 	bl	800b34c <_printf_i>
 800ead0:	e7eb      	b.n	800eaaa <_svfiprintf_r+0x1c2>
 800ead2:	bf00      	nop
 800ead4:	0800fd7c 	.word	0x0800fd7c
 800ead8:	0800fd86 	.word	0x0800fd86
 800eadc:	0800ae05 	.word	0x0800ae05
 800eae0:	0800e831 	.word	0x0800e831
 800eae4:	0800fd82 	.word	0x0800fd82

0800eae8 <__sfputc_r>:
 800eae8:	6893      	ldr	r3, [r2, #8]
 800eaea:	3b01      	subs	r3, #1
 800eaec:	2b00      	cmp	r3, #0
 800eaee:	b410      	push	{r4}
 800eaf0:	6093      	str	r3, [r2, #8]
 800eaf2:	da08      	bge.n	800eb06 <__sfputc_r+0x1e>
 800eaf4:	6994      	ldr	r4, [r2, #24]
 800eaf6:	42a3      	cmp	r3, r4
 800eaf8:	db01      	blt.n	800eafe <__sfputc_r+0x16>
 800eafa:	290a      	cmp	r1, #10
 800eafc:	d103      	bne.n	800eb06 <__sfputc_r+0x1e>
 800eafe:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb02:	f000 b979 	b.w	800edf8 <__swbuf_r>
 800eb06:	6813      	ldr	r3, [r2, #0]
 800eb08:	1c58      	adds	r0, r3, #1
 800eb0a:	6010      	str	r0, [r2, #0]
 800eb0c:	7019      	strb	r1, [r3, #0]
 800eb0e:	4608      	mov	r0, r1
 800eb10:	f85d 4b04 	ldr.w	r4, [sp], #4
 800eb14:	4770      	bx	lr

0800eb16 <__sfputs_r>:
 800eb16:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800eb18:	4606      	mov	r6, r0
 800eb1a:	460f      	mov	r7, r1
 800eb1c:	4614      	mov	r4, r2
 800eb1e:	18d5      	adds	r5, r2, r3
 800eb20:	42ac      	cmp	r4, r5
 800eb22:	d101      	bne.n	800eb28 <__sfputs_r+0x12>
 800eb24:	2000      	movs	r0, #0
 800eb26:	e007      	b.n	800eb38 <__sfputs_r+0x22>
 800eb28:	f814 1b01 	ldrb.w	r1, [r4], #1
 800eb2c:	463a      	mov	r2, r7
 800eb2e:	4630      	mov	r0, r6
 800eb30:	f7ff ffda 	bl	800eae8 <__sfputc_r>
 800eb34:	1c43      	adds	r3, r0, #1
 800eb36:	d1f3      	bne.n	800eb20 <__sfputs_r+0xa>
 800eb38:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800eb3c <_vfiprintf_r>:
 800eb3c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800eb40:	460d      	mov	r5, r1
 800eb42:	b09d      	sub	sp, #116	; 0x74
 800eb44:	4614      	mov	r4, r2
 800eb46:	4698      	mov	r8, r3
 800eb48:	4606      	mov	r6, r0
 800eb4a:	b118      	cbz	r0, 800eb54 <_vfiprintf_r+0x18>
 800eb4c:	6983      	ldr	r3, [r0, #24]
 800eb4e:	b90b      	cbnz	r3, 800eb54 <_vfiprintf_r+0x18>
 800eb50:	f000 fb42 	bl	800f1d8 <__sinit>
 800eb54:	4b89      	ldr	r3, [pc, #548]	; (800ed7c <_vfiprintf_r+0x240>)
 800eb56:	429d      	cmp	r5, r3
 800eb58:	d11b      	bne.n	800eb92 <_vfiprintf_r+0x56>
 800eb5a:	6875      	ldr	r5, [r6, #4]
 800eb5c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb5e:	07d9      	lsls	r1, r3, #31
 800eb60:	d405      	bmi.n	800eb6e <_vfiprintf_r+0x32>
 800eb62:	89ab      	ldrh	r3, [r5, #12]
 800eb64:	059a      	lsls	r2, r3, #22
 800eb66:	d402      	bmi.n	800eb6e <_vfiprintf_r+0x32>
 800eb68:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800eb6a:	f000 fbd3 	bl	800f314 <__retarget_lock_acquire_recursive>
 800eb6e:	89ab      	ldrh	r3, [r5, #12]
 800eb70:	071b      	lsls	r3, r3, #28
 800eb72:	d501      	bpl.n	800eb78 <_vfiprintf_r+0x3c>
 800eb74:	692b      	ldr	r3, [r5, #16]
 800eb76:	b9eb      	cbnz	r3, 800ebb4 <_vfiprintf_r+0x78>
 800eb78:	4629      	mov	r1, r5
 800eb7a:	4630      	mov	r0, r6
 800eb7c:	f000 f99c 	bl	800eeb8 <__swsetup_r>
 800eb80:	b1c0      	cbz	r0, 800ebb4 <_vfiprintf_r+0x78>
 800eb82:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800eb84:	07dc      	lsls	r4, r3, #31
 800eb86:	d50e      	bpl.n	800eba6 <_vfiprintf_r+0x6a>
 800eb88:	f04f 30ff 	mov.w	r0, #4294967295
 800eb8c:	b01d      	add	sp, #116	; 0x74
 800eb8e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eb92:	4b7b      	ldr	r3, [pc, #492]	; (800ed80 <_vfiprintf_r+0x244>)
 800eb94:	429d      	cmp	r5, r3
 800eb96:	d101      	bne.n	800eb9c <_vfiprintf_r+0x60>
 800eb98:	68b5      	ldr	r5, [r6, #8]
 800eb9a:	e7df      	b.n	800eb5c <_vfiprintf_r+0x20>
 800eb9c:	4b79      	ldr	r3, [pc, #484]	; (800ed84 <_vfiprintf_r+0x248>)
 800eb9e:	429d      	cmp	r5, r3
 800eba0:	bf08      	it	eq
 800eba2:	68f5      	ldreq	r5, [r6, #12]
 800eba4:	e7da      	b.n	800eb5c <_vfiprintf_r+0x20>
 800eba6:	89ab      	ldrh	r3, [r5, #12]
 800eba8:	0598      	lsls	r0, r3, #22
 800ebaa:	d4ed      	bmi.n	800eb88 <_vfiprintf_r+0x4c>
 800ebac:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ebae:	f000 fbb2 	bl	800f316 <__retarget_lock_release_recursive>
 800ebb2:	e7e9      	b.n	800eb88 <_vfiprintf_r+0x4c>
 800ebb4:	2300      	movs	r3, #0
 800ebb6:	9309      	str	r3, [sp, #36]	; 0x24
 800ebb8:	2320      	movs	r3, #32
 800ebba:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800ebbe:	f8cd 800c 	str.w	r8, [sp, #12]
 800ebc2:	2330      	movs	r3, #48	; 0x30
 800ebc4:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ed88 <_vfiprintf_r+0x24c>
 800ebc8:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ebcc:	f04f 0901 	mov.w	r9, #1
 800ebd0:	4623      	mov	r3, r4
 800ebd2:	469a      	mov	sl, r3
 800ebd4:	f813 2b01 	ldrb.w	r2, [r3], #1
 800ebd8:	b10a      	cbz	r2, 800ebde <_vfiprintf_r+0xa2>
 800ebda:	2a25      	cmp	r2, #37	; 0x25
 800ebdc:	d1f9      	bne.n	800ebd2 <_vfiprintf_r+0x96>
 800ebde:	ebba 0b04 	subs.w	fp, sl, r4
 800ebe2:	d00b      	beq.n	800ebfc <_vfiprintf_r+0xc0>
 800ebe4:	465b      	mov	r3, fp
 800ebe6:	4622      	mov	r2, r4
 800ebe8:	4629      	mov	r1, r5
 800ebea:	4630      	mov	r0, r6
 800ebec:	f7ff ff93 	bl	800eb16 <__sfputs_r>
 800ebf0:	3001      	adds	r0, #1
 800ebf2:	f000 80aa 	beq.w	800ed4a <_vfiprintf_r+0x20e>
 800ebf6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800ebf8:	445a      	add	r2, fp
 800ebfa:	9209      	str	r2, [sp, #36]	; 0x24
 800ebfc:	f89a 3000 	ldrb.w	r3, [sl]
 800ec00:	2b00      	cmp	r3, #0
 800ec02:	f000 80a2 	beq.w	800ed4a <_vfiprintf_r+0x20e>
 800ec06:	2300      	movs	r3, #0
 800ec08:	f04f 32ff 	mov.w	r2, #4294967295
 800ec0c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800ec10:	f10a 0a01 	add.w	sl, sl, #1
 800ec14:	9304      	str	r3, [sp, #16]
 800ec16:	9307      	str	r3, [sp, #28]
 800ec18:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800ec1c:	931a      	str	r3, [sp, #104]	; 0x68
 800ec1e:	4654      	mov	r4, sl
 800ec20:	2205      	movs	r2, #5
 800ec22:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ec26:	4858      	ldr	r0, [pc, #352]	; (800ed88 <_vfiprintf_r+0x24c>)
 800ec28:	f7f1 fada 	bl	80001e0 <memchr>
 800ec2c:	9a04      	ldr	r2, [sp, #16]
 800ec2e:	b9d8      	cbnz	r0, 800ec68 <_vfiprintf_r+0x12c>
 800ec30:	06d1      	lsls	r1, r2, #27
 800ec32:	bf44      	itt	mi
 800ec34:	2320      	movmi	r3, #32
 800ec36:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec3a:	0713      	lsls	r3, r2, #28
 800ec3c:	bf44      	itt	mi
 800ec3e:	232b      	movmi	r3, #43	; 0x2b
 800ec40:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800ec44:	f89a 3000 	ldrb.w	r3, [sl]
 800ec48:	2b2a      	cmp	r3, #42	; 0x2a
 800ec4a:	d015      	beq.n	800ec78 <_vfiprintf_r+0x13c>
 800ec4c:	9a07      	ldr	r2, [sp, #28]
 800ec4e:	4654      	mov	r4, sl
 800ec50:	2000      	movs	r0, #0
 800ec52:	f04f 0c0a 	mov.w	ip, #10
 800ec56:	4621      	mov	r1, r4
 800ec58:	f811 3b01 	ldrb.w	r3, [r1], #1
 800ec5c:	3b30      	subs	r3, #48	; 0x30
 800ec5e:	2b09      	cmp	r3, #9
 800ec60:	d94e      	bls.n	800ed00 <_vfiprintf_r+0x1c4>
 800ec62:	b1b0      	cbz	r0, 800ec92 <_vfiprintf_r+0x156>
 800ec64:	9207      	str	r2, [sp, #28]
 800ec66:	e014      	b.n	800ec92 <_vfiprintf_r+0x156>
 800ec68:	eba0 0308 	sub.w	r3, r0, r8
 800ec6c:	fa09 f303 	lsl.w	r3, r9, r3
 800ec70:	4313      	orrs	r3, r2
 800ec72:	9304      	str	r3, [sp, #16]
 800ec74:	46a2      	mov	sl, r4
 800ec76:	e7d2      	b.n	800ec1e <_vfiprintf_r+0xe2>
 800ec78:	9b03      	ldr	r3, [sp, #12]
 800ec7a:	1d19      	adds	r1, r3, #4
 800ec7c:	681b      	ldr	r3, [r3, #0]
 800ec7e:	9103      	str	r1, [sp, #12]
 800ec80:	2b00      	cmp	r3, #0
 800ec82:	bfbb      	ittet	lt
 800ec84:	425b      	neglt	r3, r3
 800ec86:	f042 0202 	orrlt.w	r2, r2, #2
 800ec8a:	9307      	strge	r3, [sp, #28]
 800ec8c:	9307      	strlt	r3, [sp, #28]
 800ec8e:	bfb8      	it	lt
 800ec90:	9204      	strlt	r2, [sp, #16]
 800ec92:	7823      	ldrb	r3, [r4, #0]
 800ec94:	2b2e      	cmp	r3, #46	; 0x2e
 800ec96:	d10c      	bne.n	800ecb2 <_vfiprintf_r+0x176>
 800ec98:	7863      	ldrb	r3, [r4, #1]
 800ec9a:	2b2a      	cmp	r3, #42	; 0x2a
 800ec9c:	d135      	bne.n	800ed0a <_vfiprintf_r+0x1ce>
 800ec9e:	9b03      	ldr	r3, [sp, #12]
 800eca0:	1d1a      	adds	r2, r3, #4
 800eca2:	681b      	ldr	r3, [r3, #0]
 800eca4:	9203      	str	r2, [sp, #12]
 800eca6:	2b00      	cmp	r3, #0
 800eca8:	bfb8      	it	lt
 800ecaa:	f04f 33ff 	movlt.w	r3, #4294967295
 800ecae:	3402      	adds	r4, #2
 800ecb0:	9305      	str	r3, [sp, #20]
 800ecb2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ed98 <_vfiprintf_r+0x25c>
 800ecb6:	7821      	ldrb	r1, [r4, #0]
 800ecb8:	2203      	movs	r2, #3
 800ecba:	4650      	mov	r0, sl
 800ecbc:	f7f1 fa90 	bl	80001e0 <memchr>
 800ecc0:	b140      	cbz	r0, 800ecd4 <_vfiprintf_r+0x198>
 800ecc2:	2340      	movs	r3, #64	; 0x40
 800ecc4:	eba0 000a 	sub.w	r0, r0, sl
 800ecc8:	fa03 f000 	lsl.w	r0, r3, r0
 800eccc:	9b04      	ldr	r3, [sp, #16]
 800ecce:	4303      	orrs	r3, r0
 800ecd0:	3401      	adds	r4, #1
 800ecd2:	9304      	str	r3, [sp, #16]
 800ecd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ecd8:	482c      	ldr	r0, [pc, #176]	; (800ed8c <_vfiprintf_r+0x250>)
 800ecda:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800ecde:	2206      	movs	r2, #6
 800ece0:	f7f1 fa7e 	bl	80001e0 <memchr>
 800ece4:	2800      	cmp	r0, #0
 800ece6:	d03f      	beq.n	800ed68 <_vfiprintf_r+0x22c>
 800ece8:	4b29      	ldr	r3, [pc, #164]	; (800ed90 <_vfiprintf_r+0x254>)
 800ecea:	bb1b      	cbnz	r3, 800ed34 <_vfiprintf_r+0x1f8>
 800ecec:	9b03      	ldr	r3, [sp, #12]
 800ecee:	3307      	adds	r3, #7
 800ecf0:	f023 0307 	bic.w	r3, r3, #7
 800ecf4:	3308      	adds	r3, #8
 800ecf6:	9303      	str	r3, [sp, #12]
 800ecf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ecfa:	443b      	add	r3, r7
 800ecfc:	9309      	str	r3, [sp, #36]	; 0x24
 800ecfe:	e767      	b.n	800ebd0 <_vfiprintf_r+0x94>
 800ed00:	fb0c 3202 	mla	r2, ip, r2, r3
 800ed04:	460c      	mov	r4, r1
 800ed06:	2001      	movs	r0, #1
 800ed08:	e7a5      	b.n	800ec56 <_vfiprintf_r+0x11a>
 800ed0a:	2300      	movs	r3, #0
 800ed0c:	3401      	adds	r4, #1
 800ed0e:	9305      	str	r3, [sp, #20]
 800ed10:	4619      	mov	r1, r3
 800ed12:	f04f 0c0a 	mov.w	ip, #10
 800ed16:	4620      	mov	r0, r4
 800ed18:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ed1c:	3a30      	subs	r2, #48	; 0x30
 800ed1e:	2a09      	cmp	r2, #9
 800ed20:	d903      	bls.n	800ed2a <_vfiprintf_r+0x1ee>
 800ed22:	2b00      	cmp	r3, #0
 800ed24:	d0c5      	beq.n	800ecb2 <_vfiprintf_r+0x176>
 800ed26:	9105      	str	r1, [sp, #20]
 800ed28:	e7c3      	b.n	800ecb2 <_vfiprintf_r+0x176>
 800ed2a:	fb0c 2101 	mla	r1, ip, r1, r2
 800ed2e:	4604      	mov	r4, r0
 800ed30:	2301      	movs	r3, #1
 800ed32:	e7f0      	b.n	800ed16 <_vfiprintf_r+0x1da>
 800ed34:	ab03      	add	r3, sp, #12
 800ed36:	9300      	str	r3, [sp, #0]
 800ed38:	462a      	mov	r2, r5
 800ed3a:	4b16      	ldr	r3, [pc, #88]	; (800ed94 <_vfiprintf_r+0x258>)
 800ed3c:	a904      	add	r1, sp, #16
 800ed3e:	4630      	mov	r0, r6
 800ed40:	f7fc f860 	bl	800ae04 <_printf_float>
 800ed44:	4607      	mov	r7, r0
 800ed46:	1c78      	adds	r0, r7, #1
 800ed48:	d1d6      	bne.n	800ecf8 <_vfiprintf_r+0x1bc>
 800ed4a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ed4c:	07d9      	lsls	r1, r3, #31
 800ed4e:	d405      	bmi.n	800ed5c <_vfiprintf_r+0x220>
 800ed50:	89ab      	ldrh	r3, [r5, #12]
 800ed52:	059a      	lsls	r2, r3, #22
 800ed54:	d402      	bmi.n	800ed5c <_vfiprintf_r+0x220>
 800ed56:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ed58:	f000 fadd 	bl	800f316 <__retarget_lock_release_recursive>
 800ed5c:	89ab      	ldrh	r3, [r5, #12]
 800ed5e:	065b      	lsls	r3, r3, #25
 800ed60:	f53f af12 	bmi.w	800eb88 <_vfiprintf_r+0x4c>
 800ed64:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ed66:	e711      	b.n	800eb8c <_vfiprintf_r+0x50>
 800ed68:	ab03      	add	r3, sp, #12
 800ed6a:	9300      	str	r3, [sp, #0]
 800ed6c:	462a      	mov	r2, r5
 800ed6e:	4b09      	ldr	r3, [pc, #36]	; (800ed94 <_vfiprintf_r+0x258>)
 800ed70:	a904      	add	r1, sp, #16
 800ed72:	4630      	mov	r0, r6
 800ed74:	f7fc faea 	bl	800b34c <_printf_i>
 800ed78:	e7e4      	b.n	800ed44 <_vfiprintf_r+0x208>
 800ed7a:	bf00      	nop
 800ed7c:	0800fdb0 	.word	0x0800fdb0
 800ed80:	0800fdd0 	.word	0x0800fdd0
 800ed84:	0800fd90 	.word	0x0800fd90
 800ed88:	0800fd7c 	.word	0x0800fd7c
 800ed8c:	0800fd86 	.word	0x0800fd86
 800ed90:	0800ae05 	.word	0x0800ae05
 800ed94:	0800eb17 	.word	0x0800eb17
 800ed98:	0800fd82 	.word	0x0800fd82
 800ed9c:	00000000 	.word	0x00000000

0800eda0 <nan>:
 800eda0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800eda8 <nan+0x8>
 800eda4:	4770      	bx	lr
 800eda6:	bf00      	nop
 800eda8:	00000000 	.word	0x00000000
 800edac:	7ff80000 	.word	0x7ff80000

0800edb0 <_sbrk_r>:
 800edb0:	b538      	push	{r3, r4, r5, lr}
 800edb2:	4d06      	ldr	r5, [pc, #24]	; (800edcc <_sbrk_r+0x1c>)
 800edb4:	2300      	movs	r3, #0
 800edb6:	4604      	mov	r4, r0
 800edb8:	4608      	mov	r0, r1
 800edba:	602b      	str	r3, [r5, #0]
 800edbc:	f7f8 fc1a 	bl	80075f4 <_sbrk>
 800edc0:	1c43      	adds	r3, r0, #1
 800edc2:	d102      	bne.n	800edca <_sbrk_r+0x1a>
 800edc4:	682b      	ldr	r3, [r5, #0]
 800edc6:	b103      	cbz	r3, 800edca <_sbrk_r+0x1a>
 800edc8:	6023      	str	r3, [r4, #0]
 800edca:	bd38      	pop	{r3, r4, r5, pc}
 800edcc:	2000057c 	.word	0x2000057c

0800edd0 <strncmp>:
 800edd0:	b510      	push	{r4, lr}
 800edd2:	b17a      	cbz	r2, 800edf4 <strncmp+0x24>
 800edd4:	4603      	mov	r3, r0
 800edd6:	3901      	subs	r1, #1
 800edd8:	1884      	adds	r4, r0, r2
 800edda:	f813 0b01 	ldrb.w	r0, [r3], #1
 800edde:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800ede2:	4290      	cmp	r0, r2
 800ede4:	d101      	bne.n	800edea <strncmp+0x1a>
 800ede6:	42a3      	cmp	r3, r4
 800ede8:	d101      	bne.n	800edee <strncmp+0x1e>
 800edea:	1a80      	subs	r0, r0, r2
 800edec:	bd10      	pop	{r4, pc}
 800edee:	2800      	cmp	r0, #0
 800edf0:	d1f3      	bne.n	800edda <strncmp+0xa>
 800edf2:	e7fa      	b.n	800edea <strncmp+0x1a>
 800edf4:	4610      	mov	r0, r2
 800edf6:	e7f9      	b.n	800edec <strncmp+0x1c>

0800edf8 <__swbuf_r>:
 800edf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800edfa:	460e      	mov	r6, r1
 800edfc:	4614      	mov	r4, r2
 800edfe:	4605      	mov	r5, r0
 800ee00:	b118      	cbz	r0, 800ee0a <__swbuf_r+0x12>
 800ee02:	6983      	ldr	r3, [r0, #24]
 800ee04:	b90b      	cbnz	r3, 800ee0a <__swbuf_r+0x12>
 800ee06:	f000 f9e7 	bl	800f1d8 <__sinit>
 800ee0a:	4b21      	ldr	r3, [pc, #132]	; (800ee90 <__swbuf_r+0x98>)
 800ee0c:	429c      	cmp	r4, r3
 800ee0e:	d12b      	bne.n	800ee68 <__swbuf_r+0x70>
 800ee10:	686c      	ldr	r4, [r5, #4]
 800ee12:	69a3      	ldr	r3, [r4, #24]
 800ee14:	60a3      	str	r3, [r4, #8]
 800ee16:	89a3      	ldrh	r3, [r4, #12]
 800ee18:	071a      	lsls	r2, r3, #28
 800ee1a:	d52f      	bpl.n	800ee7c <__swbuf_r+0x84>
 800ee1c:	6923      	ldr	r3, [r4, #16]
 800ee1e:	b36b      	cbz	r3, 800ee7c <__swbuf_r+0x84>
 800ee20:	6923      	ldr	r3, [r4, #16]
 800ee22:	6820      	ldr	r0, [r4, #0]
 800ee24:	1ac0      	subs	r0, r0, r3
 800ee26:	6963      	ldr	r3, [r4, #20]
 800ee28:	b2f6      	uxtb	r6, r6
 800ee2a:	4283      	cmp	r3, r0
 800ee2c:	4637      	mov	r7, r6
 800ee2e:	dc04      	bgt.n	800ee3a <__swbuf_r+0x42>
 800ee30:	4621      	mov	r1, r4
 800ee32:	4628      	mov	r0, r5
 800ee34:	f000 f93c 	bl	800f0b0 <_fflush_r>
 800ee38:	bb30      	cbnz	r0, 800ee88 <__swbuf_r+0x90>
 800ee3a:	68a3      	ldr	r3, [r4, #8]
 800ee3c:	3b01      	subs	r3, #1
 800ee3e:	60a3      	str	r3, [r4, #8]
 800ee40:	6823      	ldr	r3, [r4, #0]
 800ee42:	1c5a      	adds	r2, r3, #1
 800ee44:	6022      	str	r2, [r4, #0]
 800ee46:	701e      	strb	r6, [r3, #0]
 800ee48:	6963      	ldr	r3, [r4, #20]
 800ee4a:	3001      	adds	r0, #1
 800ee4c:	4283      	cmp	r3, r0
 800ee4e:	d004      	beq.n	800ee5a <__swbuf_r+0x62>
 800ee50:	89a3      	ldrh	r3, [r4, #12]
 800ee52:	07db      	lsls	r3, r3, #31
 800ee54:	d506      	bpl.n	800ee64 <__swbuf_r+0x6c>
 800ee56:	2e0a      	cmp	r6, #10
 800ee58:	d104      	bne.n	800ee64 <__swbuf_r+0x6c>
 800ee5a:	4621      	mov	r1, r4
 800ee5c:	4628      	mov	r0, r5
 800ee5e:	f000 f927 	bl	800f0b0 <_fflush_r>
 800ee62:	b988      	cbnz	r0, 800ee88 <__swbuf_r+0x90>
 800ee64:	4638      	mov	r0, r7
 800ee66:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ee68:	4b0a      	ldr	r3, [pc, #40]	; (800ee94 <__swbuf_r+0x9c>)
 800ee6a:	429c      	cmp	r4, r3
 800ee6c:	d101      	bne.n	800ee72 <__swbuf_r+0x7a>
 800ee6e:	68ac      	ldr	r4, [r5, #8]
 800ee70:	e7cf      	b.n	800ee12 <__swbuf_r+0x1a>
 800ee72:	4b09      	ldr	r3, [pc, #36]	; (800ee98 <__swbuf_r+0xa0>)
 800ee74:	429c      	cmp	r4, r3
 800ee76:	bf08      	it	eq
 800ee78:	68ec      	ldreq	r4, [r5, #12]
 800ee7a:	e7ca      	b.n	800ee12 <__swbuf_r+0x1a>
 800ee7c:	4621      	mov	r1, r4
 800ee7e:	4628      	mov	r0, r5
 800ee80:	f000 f81a 	bl	800eeb8 <__swsetup_r>
 800ee84:	2800      	cmp	r0, #0
 800ee86:	d0cb      	beq.n	800ee20 <__swbuf_r+0x28>
 800ee88:	f04f 37ff 	mov.w	r7, #4294967295
 800ee8c:	e7ea      	b.n	800ee64 <__swbuf_r+0x6c>
 800ee8e:	bf00      	nop
 800ee90:	0800fdb0 	.word	0x0800fdb0
 800ee94:	0800fdd0 	.word	0x0800fdd0
 800ee98:	0800fd90 	.word	0x0800fd90

0800ee9c <__ascii_wctomb>:
 800ee9c:	b149      	cbz	r1, 800eeb2 <__ascii_wctomb+0x16>
 800ee9e:	2aff      	cmp	r2, #255	; 0xff
 800eea0:	bf85      	ittet	hi
 800eea2:	238a      	movhi	r3, #138	; 0x8a
 800eea4:	6003      	strhi	r3, [r0, #0]
 800eea6:	700a      	strbls	r2, [r1, #0]
 800eea8:	f04f 30ff 	movhi.w	r0, #4294967295
 800eeac:	bf98      	it	ls
 800eeae:	2001      	movls	r0, #1
 800eeb0:	4770      	bx	lr
 800eeb2:	4608      	mov	r0, r1
 800eeb4:	4770      	bx	lr
	...

0800eeb8 <__swsetup_r>:
 800eeb8:	4b32      	ldr	r3, [pc, #200]	; (800ef84 <__swsetup_r+0xcc>)
 800eeba:	b570      	push	{r4, r5, r6, lr}
 800eebc:	681d      	ldr	r5, [r3, #0]
 800eebe:	4606      	mov	r6, r0
 800eec0:	460c      	mov	r4, r1
 800eec2:	b125      	cbz	r5, 800eece <__swsetup_r+0x16>
 800eec4:	69ab      	ldr	r3, [r5, #24]
 800eec6:	b913      	cbnz	r3, 800eece <__swsetup_r+0x16>
 800eec8:	4628      	mov	r0, r5
 800eeca:	f000 f985 	bl	800f1d8 <__sinit>
 800eece:	4b2e      	ldr	r3, [pc, #184]	; (800ef88 <__swsetup_r+0xd0>)
 800eed0:	429c      	cmp	r4, r3
 800eed2:	d10f      	bne.n	800eef4 <__swsetup_r+0x3c>
 800eed4:	686c      	ldr	r4, [r5, #4]
 800eed6:	89a3      	ldrh	r3, [r4, #12]
 800eed8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800eedc:	0719      	lsls	r1, r3, #28
 800eede:	d42c      	bmi.n	800ef3a <__swsetup_r+0x82>
 800eee0:	06dd      	lsls	r5, r3, #27
 800eee2:	d411      	bmi.n	800ef08 <__swsetup_r+0x50>
 800eee4:	2309      	movs	r3, #9
 800eee6:	6033      	str	r3, [r6, #0]
 800eee8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800eeec:	81a3      	strh	r3, [r4, #12]
 800eeee:	f04f 30ff 	mov.w	r0, #4294967295
 800eef2:	e03e      	b.n	800ef72 <__swsetup_r+0xba>
 800eef4:	4b25      	ldr	r3, [pc, #148]	; (800ef8c <__swsetup_r+0xd4>)
 800eef6:	429c      	cmp	r4, r3
 800eef8:	d101      	bne.n	800eefe <__swsetup_r+0x46>
 800eefa:	68ac      	ldr	r4, [r5, #8]
 800eefc:	e7eb      	b.n	800eed6 <__swsetup_r+0x1e>
 800eefe:	4b24      	ldr	r3, [pc, #144]	; (800ef90 <__swsetup_r+0xd8>)
 800ef00:	429c      	cmp	r4, r3
 800ef02:	bf08      	it	eq
 800ef04:	68ec      	ldreq	r4, [r5, #12]
 800ef06:	e7e6      	b.n	800eed6 <__swsetup_r+0x1e>
 800ef08:	0758      	lsls	r0, r3, #29
 800ef0a:	d512      	bpl.n	800ef32 <__swsetup_r+0x7a>
 800ef0c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800ef0e:	b141      	cbz	r1, 800ef22 <__swsetup_r+0x6a>
 800ef10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800ef14:	4299      	cmp	r1, r3
 800ef16:	d002      	beq.n	800ef1e <__swsetup_r+0x66>
 800ef18:	4630      	mov	r0, r6
 800ef1a:	f7ff fba9 	bl	800e670 <_free_r>
 800ef1e:	2300      	movs	r3, #0
 800ef20:	6363      	str	r3, [r4, #52]	; 0x34
 800ef22:	89a3      	ldrh	r3, [r4, #12]
 800ef24:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800ef28:	81a3      	strh	r3, [r4, #12]
 800ef2a:	2300      	movs	r3, #0
 800ef2c:	6063      	str	r3, [r4, #4]
 800ef2e:	6923      	ldr	r3, [r4, #16]
 800ef30:	6023      	str	r3, [r4, #0]
 800ef32:	89a3      	ldrh	r3, [r4, #12]
 800ef34:	f043 0308 	orr.w	r3, r3, #8
 800ef38:	81a3      	strh	r3, [r4, #12]
 800ef3a:	6923      	ldr	r3, [r4, #16]
 800ef3c:	b94b      	cbnz	r3, 800ef52 <__swsetup_r+0x9a>
 800ef3e:	89a3      	ldrh	r3, [r4, #12]
 800ef40:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800ef44:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800ef48:	d003      	beq.n	800ef52 <__swsetup_r+0x9a>
 800ef4a:	4621      	mov	r1, r4
 800ef4c:	4630      	mov	r0, r6
 800ef4e:	f000 fa09 	bl	800f364 <__smakebuf_r>
 800ef52:	89a0      	ldrh	r0, [r4, #12]
 800ef54:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800ef58:	f010 0301 	ands.w	r3, r0, #1
 800ef5c:	d00a      	beq.n	800ef74 <__swsetup_r+0xbc>
 800ef5e:	2300      	movs	r3, #0
 800ef60:	60a3      	str	r3, [r4, #8]
 800ef62:	6963      	ldr	r3, [r4, #20]
 800ef64:	425b      	negs	r3, r3
 800ef66:	61a3      	str	r3, [r4, #24]
 800ef68:	6923      	ldr	r3, [r4, #16]
 800ef6a:	b943      	cbnz	r3, 800ef7e <__swsetup_r+0xc6>
 800ef6c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800ef70:	d1ba      	bne.n	800eee8 <__swsetup_r+0x30>
 800ef72:	bd70      	pop	{r4, r5, r6, pc}
 800ef74:	0781      	lsls	r1, r0, #30
 800ef76:	bf58      	it	pl
 800ef78:	6963      	ldrpl	r3, [r4, #20]
 800ef7a:	60a3      	str	r3, [r4, #8]
 800ef7c:	e7f4      	b.n	800ef68 <__swsetup_r+0xb0>
 800ef7e:	2000      	movs	r0, #0
 800ef80:	e7f7      	b.n	800ef72 <__swsetup_r+0xba>
 800ef82:	bf00      	nop
 800ef84:	20000020 	.word	0x20000020
 800ef88:	0800fdb0 	.word	0x0800fdb0
 800ef8c:	0800fdd0 	.word	0x0800fdd0
 800ef90:	0800fd90 	.word	0x0800fd90

0800ef94 <abort>:
 800ef94:	b508      	push	{r3, lr}
 800ef96:	2006      	movs	r0, #6
 800ef98:	f000 faa2 	bl	800f4e0 <raise>
 800ef9c:	2001      	movs	r0, #1
 800ef9e:	f7f8 fab1 	bl	8007504 <_exit>
	...

0800efa4 <__sflush_r>:
 800efa4:	898a      	ldrh	r2, [r1, #12]
 800efa6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800efaa:	4605      	mov	r5, r0
 800efac:	0710      	lsls	r0, r2, #28
 800efae:	460c      	mov	r4, r1
 800efb0:	d458      	bmi.n	800f064 <__sflush_r+0xc0>
 800efb2:	684b      	ldr	r3, [r1, #4]
 800efb4:	2b00      	cmp	r3, #0
 800efb6:	dc05      	bgt.n	800efc4 <__sflush_r+0x20>
 800efb8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800efba:	2b00      	cmp	r3, #0
 800efbc:	dc02      	bgt.n	800efc4 <__sflush_r+0x20>
 800efbe:	2000      	movs	r0, #0
 800efc0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800efc4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800efc6:	2e00      	cmp	r6, #0
 800efc8:	d0f9      	beq.n	800efbe <__sflush_r+0x1a>
 800efca:	2300      	movs	r3, #0
 800efcc:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800efd0:	682f      	ldr	r7, [r5, #0]
 800efd2:	602b      	str	r3, [r5, #0]
 800efd4:	d032      	beq.n	800f03c <__sflush_r+0x98>
 800efd6:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800efd8:	89a3      	ldrh	r3, [r4, #12]
 800efda:	075a      	lsls	r2, r3, #29
 800efdc:	d505      	bpl.n	800efea <__sflush_r+0x46>
 800efde:	6863      	ldr	r3, [r4, #4]
 800efe0:	1ac0      	subs	r0, r0, r3
 800efe2:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800efe4:	b10b      	cbz	r3, 800efea <__sflush_r+0x46>
 800efe6:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800efe8:	1ac0      	subs	r0, r0, r3
 800efea:	2300      	movs	r3, #0
 800efec:	4602      	mov	r2, r0
 800efee:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800eff0:	6a21      	ldr	r1, [r4, #32]
 800eff2:	4628      	mov	r0, r5
 800eff4:	47b0      	blx	r6
 800eff6:	1c43      	adds	r3, r0, #1
 800eff8:	89a3      	ldrh	r3, [r4, #12]
 800effa:	d106      	bne.n	800f00a <__sflush_r+0x66>
 800effc:	6829      	ldr	r1, [r5, #0]
 800effe:	291d      	cmp	r1, #29
 800f000:	d82c      	bhi.n	800f05c <__sflush_r+0xb8>
 800f002:	4a2a      	ldr	r2, [pc, #168]	; (800f0ac <__sflush_r+0x108>)
 800f004:	40ca      	lsrs	r2, r1
 800f006:	07d6      	lsls	r6, r2, #31
 800f008:	d528      	bpl.n	800f05c <__sflush_r+0xb8>
 800f00a:	2200      	movs	r2, #0
 800f00c:	6062      	str	r2, [r4, #4]
 800f00e:	04d9      	lsls	r1, r3, #19
 800f010:	6922      	ldr	r2, [r4, #16]
 800f012:	6022      	str	r2, [r4, #0]
 800f014:	d504      	bpl.n	800f020 <__sflush_r+0x7c>
 800f016:	1c42      	adds	r2, r0, #1
 800f018:	d101      	bne.n	800f01e <__sflush_r+0x7a>
 800f01a:	682b      	ldr	r3, [r5, #0]
 800f01c:	b903      	cbnz	r3, 800f020 <__sflush_r+0x7c>
 800f01e:	6560      	str	r0, [r4, #84]	; 0x54
 800f020:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800f022:	602f      	str	r7, [r5, #0]
 800f024:	2900      	cmp	r1, #0
 800f026:	d0ca      	beq.n	800efbe <__sflush_r+0x1a>
 800f028:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800f02c:	4299      	cmp	r1, r3
 800f02e:	d002      	beq.n	800f036 <__sflush_r+0x92>
 800f030:	4628      	mov	r0, r5
 800f032:	f7ff fb1d 	bl	800e670 <_free_r>
 800f036:	2000      	movs	r0, #0
 800f038:	6360      	str	r0, [r4, #52]	; 0x34
 800f03a:	e7c1      	b.n	800efc0 <__sflush_r+0x1c>
 800f03c:	6a21      	ldr	r1, [r4, #32]
 800f03e:	2301      	movs	r3, #1
 800f040:	4628      	mov	r0, r5
 800f042:	47b0      	blx	r6
 800f044:	1c41      	adds	r1, r0, #1
 800f046:	d1c7      	bne.n	800efd8 <__sflush_r+0x34>
 800f048:	682b      	ldr	r3, [r5, #0]
 800f04a:	2b00      	cmp	r3, #0
 800f04c:	d0c4      	beq.n	800efd8 <__sflush_r+0x34>
 800f04e:	2b1d      	cmp	r3, #29
 800f050:	d001      	beq.n	800f056 <__sflush_r+0xb2>
 800f052:	2b16      	cmp	r3, #22
 800f054:	d101      	bne.n	800f05a <__sflush_r+0xb6>
 800f056:	602f      	str	r7, [r5, #0]
 800f058:	e7b1      	b.n	800efbe <__sflush_r+0x1a>
 800f05a:	89a3      	ldrh	r3, [r4, #12]
 800f05c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f060:	81a3      	strh	r3, [r4, #12]
 800f062:	e7ad      	b.n	800efc0 <__sflush_r+0x1c>
 800f064:	690f      	ldr	r7, [r1, #16]
 800f066:	2f00      	cmp	r7, #0
 800f068:	d0a9      	beq.n	800efbe <__sflush_r+0x1a>
 800f06a:	0793      	lsls	r3, r2, #30
 800f06c:	680e      	ldr	r6, [r1, #0]
 800f06e:	bf08      	it	eq
 800f070:	694b      	ldreq	r3, [r1, #20]
 800f072:	600f      	str	r7, [r1, #0]
 800f074:	bf18      	it	ne
 800f076:	2300      	movne	r3, #0
 800f078:	eba6 0807 	sub.w	r8, r6, r7
 800f07c:	608b      	str	r3, [r1, #8]
 800f07e:	f1b8 0f00 	cmp.w	r8, #0
 800f082:	dd9c      	ble.n	800efbe <__sflush_r+0x1a>
 800f084:	6a21      	ldr	r1, [r4, #32]
 800f086:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800f088:	4643      	mov	r3, r8
 800f08a:	463a      	mov	r2, r7
 800f08c:	4628      	mov	r0, r5
 800f08e:	47b0      	blx	r6
 800f090:	2800      	cmp	r0, #0
 800f092:	dc06      	bgt.n	800f0a2 <__sflush_r+0xfe>
 800f094:	89a3      	ldrh	r3, [r4, #12]
 800f096:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800f09a:	81a3      	strh	r3, [r4, #12]
 800f09c:	f04f 30ff 	mov.w	r0, #4294967295
 800f0a0:	e78e      	b.n	800efc0 <__sflush_r+0x1c>
 800f0a2:	4407      	add	r7, r0
 800f0a4:	eba8 0800 	sub.w	r8, r8, r0
 800f0a8:	e7e9      	b.n	800f07e <__sflush_r+0xda>
 800f0aa:	bf00      	nop
 800f0ac:	20400001 	.word	0x20400001

0800f0b0 <_fflush_r>:
 800f0b0:	b538      	push	{r3, r4, r5, lr}
 800f0b2:	690b      	ldr	r3, [r1, #16]
 800f0b4:	4605      	mov	r5, r0
 800f0b6:	460c      	mov	r4, r1
 800f0b8:	b913      	cbnz	r3, 800f0c0 <_fflush_r+0x10>
 800f0ba:	2500      	movs	r5, #0
 800f0bc:	4628      	mov	r0, r5
 800f0be:	bd38      	pop	{r3, r4, r5, pc}
 800f0c0:	b118      	cbz	r0, 800f0ca <_fflush_r+0x1a>
 800f0c2:	6983      	ldr	r3, [r0, #24]
 800f0c4:	b90b      	cbnz	r3, 800f0ca <_fflush_r+0x1a>
 800f0c6:	f000 f887 	bl	800f1d8 <__sinit>
 800f0ca:	4b14      	ldr	r3, [pc, #80]	; (800f11c <_fflush_r+0x6c>)
 800f0cc:	429c      	cmp	r4, r3
 800f0ce:	d11b      	bne.n	800f108 <_fflush_r+0x58>
 800f0d0:	686c      	ldr	r4, [r5, #4]
 800f0d2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f0d6:	2b00      	cmp	r3, #0
 800f0d8:	d0ef      	beq.n	800f0ba <_fflush_r+0xa>
 800f0da:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800f0dc:	07d0      	lsls	r0, r2, #31
 800f0de:	d404      	bmi.n	800f0ea <_fflush_r+0x3a>
 800f0e0:	0599      	lsls	r1, r3, #22
 800f0e2:	d402      	bmi.n	800f0ea <_fflush_r+0x3a>
 800f0e4:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f0e6:	f000 f915 	bl	800f314 <__retarget_lock_acquire_recursive>
 800f0ea:	4628      	mov	r0, r5
 800f0ec:	4621      	mov	r1, r4
 800f0ee:	f7ff ff59 	bl	800efa4 <__sflush_r>
 800f0f2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800f0f4:	07da      	lsls	r2, r3, #31
 800f0f6:	4605      	mov	r5, r0
 800f0f8:	d4e0      	bmi.n	800f0bc <_fflush_r+0xc>
 800f0fa:	89a3      	ldrh	r3, [r4, #12]
 800f0fc:	059b      	lsls	r3, r3, #22
 800f0fe:	d4dd      	bmi.n	800f0bc <_fflush_r+0xc>
 800f100:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800f102:	f000 f908 	bl	800f316 <__retarget_lock_release_recursive>
 800f106:	e7d9      	b.n	800f0bc <_fflush_r+0xc>
 800f108:	4b05      	ldr	r3, [pc, #20]	; (800f120 <_fflush_r+0x70>)
 800f10a:	429c      	cmp	r4, r3
 800f10c:	d101      	bne.n	800f112 <_fflush_r+0x62>
 800f10e:	68ac      	ldr	r4, [r5, #8]
 800f110:	e7df      	b.n	800f0d2 <_fflush_r+0x22>
 800f112:	4b04      	ldr	r3, [pc, #16]	; (800f124 <_fflush_r+0x74>)
 800f114:	429c      	cmp	r4, r3
 800f116:	bf08      	it	eq
 800f118:	68ec      	ldreq	r4, [r5, #12]
 800f11a:	e7da      	b.n	800f0d2 <_fflush_r+0x22>
 800f11c:	0800fdb0 	.word	0x0800fdb0
 800f120:	0800fdd0 	.word	0x0800fdd0
 800f124:	0800fd90 	.word	0x0800fd90

0800f128 <std>:
 800f128:	2300      	movs	r3, #0
 800f12a:	b510      	push	{r4, lr}
 800f12c:	4604      	mov	r4, r0
 800f12e:	e9c0 3300 	strd	r3, r3, [r0]
 800f132:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800f136:	6083      	str	r3, [r0, #8]
 800f138:	8181      	strh	r1, [r0, #12]
 800f13a:	6643      	str	r3, [r0, #100]	; 0x64
 800f13c:	81c2      	strh	r2, [r0, #14]
 800f13e:	6183      	str	r3, [r0, #24]
 800f140:	4619      	mov	r1, r3
 800f142:	2208      	movs	r2, #8
 800f144:	305c      	adds	r0, #92	; 0x5c
 800f146:	f7fb fdb5 	bl	800acb4 <memset>
 800f14a:	4b05      	ldr	r3, [pc, #20]	; (800f160 <std+0x38>)
 800f14c:	6263      	str	r3, [r4, #36]	; 0x24
 800f14e:	4b05      	ldr	r3, [pc, #20]	; (800f164 <std+0x3c>)
 800f150:	62a3      	str	r3, [r4, #40]	; 0x28
 800f152:	4b05      	ldr	r3, [pc, #20]	; (800f168 <std+0x40>)
 800f154:	62e3      	str	r3, [r4, #44]	; 0x2c
 800f156:	4b05      	ldr	r3, [pc, #20]	; (800f16c <std+0x44>)
 800f158:	6224      	str	r4, [r4, #32]
 800f15a:	6323      	str	r3, [r4, #48]	; 0x30
 800f15c:	bd10      	pop	{r4, pc}
 800f15e:	bf00      	nop
 800f160:	0800f519 	.word	0x0800f519
 800f164:	0800f53b 	.word	0x0800f53b
 800f168:	0800f573 	.word	0x0800f573
 800f16c:	0800f597 	.word	0x0800f597

0800f170 <_cleanup_r>:
 800f170:	4901      	ldr	r1, [pc, #4]	; (800f178 <_cleanup_r+0x8>)
 800f172:	f000 b8af 	b.w	800f2d4 <_fwalk_reent>
 800f176:	bf00      	nop
 800f178:	0800f0b1 	.word	0x0800f0b1

0800f17c <__sfmoreglue>:
 800f17c:	b570      	push	{r4, r5, r6, lr}
 800f17e:	2268      	movs	r2, #104	; 0x68
 800f180:	1e4d      	subs	r5, r1, #1
 800f182:	4355      	muls	r5, r2
 800f184:	460e      	mov	r6, r1
 800f186:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800f18a:	f7ff fadd 	bl	800e748 <_malloc_r>
 800f18e:	4604      	mov	r4, r0
 800f190:	b140      	cbz	r0, 800f1a4 <__sfmoreglue+0x28>
 800f192:	2100      	movs	r1, #0
 800f194:	e9c0 1600 	strd	r1, r6, [r0]
 800f198:	300c      	adds	r0, #12
 800f19a:	60a0      	str	r0, [r4, #8]
 800f19c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800f1a0:	f7fb fd88 	bl	800acb4 <memset>
 800f1a4:	4620      	mov	r0, r4
 800f1a6:	bd70      	pop	{r4, r5, r6, pc}

0800f1a8 <__sfp_lock_acquire>:
 800f1a8:	4801      	ldr	r0, [pc, #4]	; (800f1b0 <__sfp_lock_acquire+0x8>)
 800f1aa:	f000 b8b3 	b.w	800f314 <__retarget_lock_acquire_recursive>
 800f1ae:	bf00      	nop
 800f1b0:	20000579 	.word	0x20000579

0800f1b4 <__sfp_lock_release>:
 800f1b4:	4801      	ldr	r0, [pc, #4]	; (800f1bc <__sfp_lock_release+0x8>)
 800f1b6:	f000 b8ae 	b.w	800f316 <__retarget_lock_release_recursive>
 800f1ba:	bf00      	nop
 800f1bc:	20000579 	.word	0x20000579

0800f1c0 <__sinit_lock_acquire>:
 800f1c0:	4801      	ldr	r0, [pc, #4]	; (800f1c8 <__sinit_lock_acquire+0x8>)
 800f1c2:	f000 b8a7 	b.w	800f314 <__retarget_lock_acquire_recursive>
 800f1c6:	bf00      	nop
 800f1c8:	2000057a 	.word	0x2000057a

0800f1cc <__sinit_lock_release>:
 800f1cc:	4801      	ldr	r0, [pc, #4]	; (800f1d4 <__sinit_lock_release+0x8>)
 800f1ce:	f000 b8a2 	b.w	800f316 <__retarget_lock_release_recursive>
 800f1d2:	bf00      	nop
 800f1d4:	2000057a 	.word	0x2000057a

0800f1d8 <__sinit>:
 800f1d8:	b510      	push	{r4, lr}
 800f1da:	4604      	mov	r4, r0
 800f1dc:	f7ff fff0 	bl	800f1c0 <__sinit_lock_acquire>
 800f1e0:	69a3      	ldr	r3, [r4, #24]
 800f1e2:	b11b      	cbz	r3, 800f1ec <__sinit+0x14>
 800f1e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800f1e8:	f7ff bff0 	b.w	800f1cc <__sinit_lock_release>
 800f1ec:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800f1f0:	6523      	str	r3, [r4, #80]	; 0x50
 800f1f2:	4b13      	ldr	r3, [pc, #76]	; (800f240 <__sinit+0x68>)
 800f1f4:	4a13      	ldr	r2, [pc, #76]	; (800f244 <__sinit+0x6c>)
 800f1f6:	681b      	ldr	r3, [r3, #0]
 800f1f8:	62a2      	str	r2, [r4, #40]	; 0x28
 800f1fa:	42a3      	cmp	r3, r4
 800f1fc:	bf04      	itt	eq
 800f1fe:	2301      	moveq	r3, #1
 800f200:	61a3      	streq	r3, [r4, #24]
 800f202:	4620      	mov	r0, r4
 800f204:	f000 f820 	bl	800f248 <__sfp>
 800f208:	6060      	str	r0, [r4, #4]
 800f20a:	4620      	mov	r0, r4
 800f20c:	f000 f81c 	bl	800f248 <__sfp>
 800f210:	60a0      	str	r0, [r4, #8]
 800f212:	4620      	mov	r0, r4
 800f214:	f000 f818 	bl	800f248 <__sfp>
 800f218:	2200      	movs	r2, #0
 800f21a:	60e0      	str	r0, [r4, #12]
 800f21c:	2104      	movs	r1, #4
 800f21e:	6860      	ldr	r0, [r4, #4]
 800f220:	f7ff ff82 	bl	800f128 <std>
 800f224:	68a0      	ldr	r0, [r4, #8]
 800f226:	2201      	movs	r2, #1
 800f228:	2109      	movs	r1, #9
 800f22a:	f7ff ff7d 	bl	800f128 <std>
 800f22e:	68e0      	ldr	r0, [r4, #12]
 800f230:	2202      	movs	r2, #2
 800f232:	2112      	movs	r1, #18
 800f234:	f7ff ff78 	bl	800f128 <std>
 800f238:	2301      	movs	r3, #1
 800f23a:	61a3      	str	r3, [r4, #24]
 800f23c:	e7d2      	b.n	800f1e4 <__sinit+0xc>
 800f23e:	bf00      	nop
 800f240:	0800f8f0 	.word	0x0800f8f0
 800f244:	0800f171 	.word	0x0800f171

0800f248 <__sfp>:
 800f248:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f24a:	4607      	mov	r7, r0
 800f24c:	f7ff ffac 	bl	800f1a8 <__sfp_lock_acquire>
 800f250:	4b1e      	ldr	r3, [pc, #120]	; (800f2cc <__sfp+0x84>)
 800f252:	681e      	ldr	r6, [r3, #0]
 800f254:	69b3      	ldr	r3, [r6, #24]
 800f256:	b913      	cbnz	r3, 800f25e <__sfp+0x16>
 800f258:	4630      	mov	r0, r6
 800f25a:	f7ff ffbd 	bl	800f1d8 <__sinit>
 800f25e:	3648      	adds	r6, #72	; 0x48
 800f260:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800f264:	3b01      	subs	r3, #1
 800f266:	d503      	bpl.n	800f270 <__sfp+0x28>
 800f268:	6833      	ldr	r3, [r6, #0]
 800f26a:	b30b      	cbz	r3, 800f2b0 <__sfp+0x68>
 800f26c:	6836      	ldr	r6, [r6, #0]
 800f26e:	e7f7      	b.n	800f260 <__sfp+0x18>
 800f270:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800f274:	b9d5      	cbnz	r5, 800f2ac <__sfp+0x64>
 800f276:	4b16      	ldr	r3, [pc, #88]	; (800f2d0 <__sfp+0x88>)
 800f278:	60e3      	str	r3, [r4, #12]
 800f27a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800f27e:	6665      	str	r5, [r4, #100]	; 0x64
 800f280:	f000 f847 	bl	800f312 <__retarget_lock_init_recursive>
 800f284:	f7ff ff96 	bl	800f1b4 <__sfp_lock_release>
 800f288:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800f28c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800f290:	6025      	str	r5, [r4, #0]
 800f292:	61a5      	str	r5, [r4, #24]
 800f294:	2208      	movs	r2, #8
 800f296:	4629      	mov	r1, r5
 800f298:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800f29c:	f7fb fd0a 	bl	800acb4 <memset>
 800f2a0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800f2a4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800f2a8:	4620      	mov	r0, r4
 800f2aa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800f2ac:	3468      	adds	r4, #104	; 0x68
 800f2ae:	e7d9      	b.n	800f264 <__sfp+0x1c>
 800f2b0:	2104      	movs	r1, #4
 800f2b2:	4638      	mov	r0, r7
 800f2b4:	f7ff ff62 	bl	800f17c <__sfmoreglue>
 800f2b8:	4604      	mov	r4, r0
 800f2ba:	6030      	str	r0, [r6, #0]
 800f2bc:	2800      	cmp	r0, #0
 800f2be:	d1d5      	bne.n	800f26c <__sfp+0x24>
 800f2c0:	f7ff ff78 	bl	800f1b4 <__sfp_lock_release>
 800f2c4:	230c      	movs	r3, #12
 800f2c6:	603b      	str	r3, [r7, #0]
 800f2c8:	e7ee      	b.n	800f2a8 <__sfp+0x60>
 800f2ca:	bf00      	nop
 800f2cc:	0800f8f0 	.word	0x0800f8f0
 800f2d0:	ffff0001 	.word	0xffff0001

0800f2d4 <_fwalk_reent>:
 800f2d4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800f2d8:	4606      	mov	r6, r0
 800f2da:	4688      	mov	r8, r1
 800f2dc:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800f2e0:	2700      	movs	r7, #0
 800f2e2:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800f2e6:	f1b9 0901 	subs.w	r9, r9, #1
 800f2ea:	d505      	bpl.n	800f2f8 <_fwalk_reent+0x24>
 800f2ec:	6824      	ldr	r4, [r4, #0]
 800f2ee:	2c00      	cmp	r4, #0
 800f2f0:	d1f7      	bne.n	800f2e2 <_fwalk_reent+0xe>
 800f2f2:	4638      	mov	r0, r7
 800f2f4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800f2f8:	89ab      	ldrh	r3, [r5, #12]
 800f2fa:	2b01      	cmp	r3, #1
 800f2fc:	d907      	bls.n	800f30e <_fwalk_reent+0x3a>
 800f2fe:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800f302:	3301      	adds	r3, #1
 800f304:	d003      	beq.n	800f30e <_fwalk_reent+0x3a>
 800f306:	4629      	mov	r1, r5
 800f308:	4630      	mov	r0, r6
 800f30a:	47c0      	blx	r8
 800f30c:	4307      	orrs	r7, r0
 800f30e:	3568      	adds	r5, #104	; 0x68
 800f310:	e7e9      	b.n	800f2e6 <_fwalk_reent+0x12>

0800f312 <__retarget_lock_init_recursive>:
 800f312:	4770      	bx	lr

0800f314 <__retarget_lock_acquire_recursive>:
 800f314:	4770      	bx	lr

0800f316 <__retarget_lock_release_recursive>:
 800f316:	4770      	bx	lr

0800f318 <__swhatbuf_r>:
 800f318:	b570      	push	{r4, r5, r6, lr}
 800f31a:	460e      	mov	r6, r1
 800f31c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f320:	2900      	cmp	r1, #0
 800f322:	b096      	sub	sp, #88	; 0x58
 800f324:	4614      	mov	r4, r2
 800f326:	461d      	mov	r5, r3
 800f328:	da08      	bge.n	800f33c <__swhatbuf_r+0x24>
 800f32a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800f32e:	2200      	movs	r2, #0
 800f330:	602a      	str	r2, [r5, #0]
 800f332:	061a      	lsls	r2, r3, #24
 800f334:	d410      	bmi.n	800f358 <__swhatbuf_r+0x40>
 800f336:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800f33a:	e00e      	b.n	800f35a <__swhatbuf_r+0x42>
 800f33c:	466a      	mov	r2, sp
 800f33e:	f000 f951 	bl	800f5e4 <_fstat_r>
 800f342:	2800      	cmp	r0, #0
 800f344:	dbf1      	blt.n	800f32a <__swhatbuf_r+0x12>
 800f346:	9a01      	ldr	r2, [sp, #4]
 800f348:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800f34c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800f350:	425a      	negs	r2, r3
 800f352:	415a      	adcs	r2, r3
 800f354:	602a      	str	r2, [r5, #0]
 800f356:	e7ee      	b.n	800f336 <__swhatbuf_r+0x1e>
 800f358:	2340      	movs	r3, #64	; 0x40
 800f35a:	2000      	movs	r0, #0
 800f35c:	6023      	str	r3, [r4, #0]
 800f35e:	b016      	add	sp, #88	; 0x58
 800f360:	bd70      	pop	{r4, r5, r6, pc}
	...

0800f364 <__smakebuf_r>:
 800f364:	898b      	ldrh	r3, [r1, #12]
 800f366:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800f368:	079d      	lsls	r5, r3, #30
 800f36a:	4606      	mov	r6, r0
 800f36c:	460c      	mov	r4, r1
 800f36e:	d507      	bpl.n	800f380 <__smakebuf_r+0x1c>
 800f370:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800f374:	6023      	str	r3, [r4, #0]
 800f376:	6123      	str	r3, [r4, #16]
 800f378:	2301      	movs	r3, #1
 800f37a:	6163      	str	r3, [r4, #20]
 800f37c:	b002      	add	sp, #8
 800f37e:	bd70      	pop	{r4, r5, r6, pc}
 800f380:	ab01      	add	r3, sp, #4
 800f382:	466a      	mov	r2, sp
 800f384:	f7ff ffc8 	bl	800f318 <__swhatbuf_r>
 800f388:	9900      	ldr	r1, [sp, #0]
 800f38a:	4605      	mov	r5, r0
 800f38c:	4630      	mov	r0, r6
 800f38e:	f7ff f9db 	bl	800e748 <_malloc_r>
 800f392:	b948      	cbnz	r0, 800f3a8 <__smakebuf_r+0x44>
 800f394:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800f398:	059a      	lsls	r2, r3, #22
 800f39a:	d4ef      	bmi.n	800f37c <__smakebuf_r+0x18>
 800f39c:	f023 0303 	bic.w	r3, r3, #3
 800f3a0:	f043 0302 	orr.w	r3, r3, #2
 800f3a4:	81a3      	strh	r3, [r4, #12]
 800f3a6:	e7e3      	b.n	800f370 <__smakebuf_r+0xc>
 800f3a8:	4b0d      	ldr	r3, [pc, #52]	; (800f3e0 <__smakebuf_r+0x7c>)
 800f3aa:	62b3      	str	r3, [r6, #40]	; 0x28
 800f3ac:	89a3      	ldrh	r3, [r4, #12]
 800f3ae:	6020      	str	r0, [r4, #0]
 800f3b0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800f3b4:	81a3      	strh	r3, [r4, #12]
 800f3b6:	9b00      	ldr	r3, [sp, #0]
 800f3b8:	6163      	str	r3, [r4, #20]
 800f3ba:	9b01      	ldr	r3, [sp, #4]
 800f3bc:	6120      	str	r0, [r4, #16]
 800f3be:	b15b      	cbz	r3, 800f3d8 <__smakebuf_r+0x74>
 800f3c0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f3c4:	4630      	mov	r0, r6
 800f3c6:	f000 f91f 	bl	800f608 <_isatty_r>
 800f3ca:	b128      	cbz	r0, 800f3d8 <__smakebuf_r+0x74>
 800f3cc:	89a3      	ldrh	r3, [r4, #12]
 800f3ce:	f023 0303 	bic.w	r3, r3, #3
 800f3d2:	f043 0301 	orr.w	r3, r3, #1
 800f3d6:	81a3      	strh	r3, [r4, #12]
 800f3d8:	89a0      	ldrh	r0, [r4, #12]
 800f3da:	4305      	orrs	r5, r0
 800f3dc:	81a5      	strh	r5, [r4, #12]
 800f3de:	e7cd      	b.n	800f37c <__smakebuf_r+0x18>
 800f3e0:	0800f171 	.word	0x0800f171

0800f3e4 <memmove>:
 800f3e4:	4288      	cmp	r0, r1
 800f3e6:	b510      	push	{r4, lr}
 800f3e8:	eb01 0402 	add.w	r4, r1, r2
 800f3ec:	d902      	bls.n	800f3f4 <memmove+0x10>
 800f3ee:	4284      	cmp	r4, r0
 800f3f0:	4623      	mov	r3, r4
 800f3f2:	d807      	bhi.n	800f404 <memmove+0x20>
 800f3f4:	1e43      	subs	r3, r0, #1
 800f3f6:	42a1      	cmp	r1, r4
 800f3f8:	d008      	beq.n	800f40c <memmove+0x28>
 800f3fa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800f3fe:	f803 2f01 	strb.w	r2, [r3, #1]!
 800f402:	e7f8      	b.n	800f3f6 <memmove+0x12>
 800f404:	4402      	add	r2, r0
 800f406:	4601      	mov	r1, r0
 800f408:	428a      	cmp	r2, r1
 800f40a:	d100      	bne.n	800f40e <memmove+0x2a>
 800f40c:	bd10      	pop	{r4, pc}
 800f40e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800f412:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800f416:	e7f7      	b.n	800f408 <memmove+0x24>

0800f418 <__malloc_lock>:
 800f418:	4801      	ldr	r0, [pc, #4]	; (800f420 <__malloc_lock+0x8>)
 800f41a:	f7ff bf7b 	b.w	800f314 <__retarget_lock_acquire_recursive>
 800f41e:	bf00      	nop
 800f420:	20000578 	.word	0x20000578

0800f424 <__malloc_unlock>:
 800f424:	4801      	ldr	r0, [pc, #4]	; (800f42c <__malloc_unlock+0x8>)
 800f426:	f7ff bf76 	b.w	800f316 <__retarget_lock_release_recursive>
 800f42a:	bf00      	nop
 800f42c:	20000578 	.word	0x20000578

0800f430 <_realloc_r>:
 800f430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f434:	4680      	mov	r8, r0
 800f436:	4614      	mov	r4, r2
 800f438:	460e      	mov	r6, r1
 800f43a:	b921      	cbnz	r1, 800f446 <_realloc_r+0x16>
 800f43c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f440:	4611      	mov	r1, r2
 800f442:	f7ff b981 	b.w	800e748 <_malloc_r>
 800f446:	b92a      	cbnz	r2, 800f454 <_realloc_r+0x24>
 800f448:	f7ff f912 	bl	800e670 <_free_r>
 800f44c:	4625      	mov	r5, r4
 800f44e:	4628      	mov	r0, r5
 800f450:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f454:	f000 f8fa 	bl	800f64c <_malloc_usable_size_r>
 800f458:	4284      	cmp	r4, r0
 800f45a:	4607      	mov	r7, r0
 800f45c:	d802      	bhi.n	800f464 <_realloc_r+0x34>
 800f45e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800f462:	d812      	bhi.n	800f48a <_realloc_r+0x5a>
 800f464:	4621      	mov	r1, r4
 800f466:	4640      	mov	r0, r8
 800f468:	f7ff f96e 	bl	800e748 <_malloc_r>
 800f46c:	4605      	mov	r5, r0
 800f46e:	2800      	cmp	r0, #0
 800f470:	d0ed      	beq.n	800f44e <_realloc_r+0x1e>
 800f472:	42bc      	cmp	r4, r7
 800f474:	4622      	mov	r2, r4
 800f476:	4631      	mov	r1, r6
 800f478:	bf28      	it	cs
 800f47a:	463a      	movcs	r2, r7
 800f47c:	f7fe fc12 	bl	800dca4 <memcpy>
 800f480:	4631      	mov	r1, r6
 800f482:	4640      	mov	r0, r8
 800f484:	f7ff f8f4 	bl	800e670 <_free_r>
 800f488:	e7e1      	b.n	800f44e <_realloc_r+0x1e>
 800f48a:	4635      	mov	r5, r6
 800f48c:	e7df      	b.n	800f44e <_realloc_r+0x1e>

0800f48e <_raise_r>:
 800f48e:	291f      	cmp	r1, #31
 800f490:	b538      	push	{r3, r4, r5, lr}
 800f492:	4604      	mov	r4, r0
 800f494:	460d      	mov	r5, r1
 800f496:	d904      	bls.n	800f4a2 <_raise_r+0x14>
 800f498:	2316      	movs	r3, #22
 800f49a:	6003      	str	r3, [r0, #0]
 800f49c:	f04f 30ff 	mov.w	r0, #4294967295
 800f4a0:	bd38      	pop	{r3, r4, r5, pc}
 800f4a2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800f4a4:	b112      	cbz	r2, 800f4ac <_raise_r+0x1e>
 800f4a6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800f4aa:	b94b      	cbnz	r3, 800f4c0 <_raise_r+0x32>
 800f4ac:	4620      	mov	r0, r4
 800f4ae:	f000 f831 	bl	800f514 <_getpid_r>
 800f4b2:	462a      	mov	r2, r5
 800f4b4:	4601      	mov	r1, r0
 800f4b6:	4620      	mov	r0, r4
 800f4b8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800f4bc:	f000 b818 	b.w	800f4f0 <_kill_r>
 800f4c0:	2b01      	cmp	r3, #1
 800f4c2:	d00a      	beq.n	800f4da <_raise_r+0x4c>
 800f4c4:	1c59      	adds	r1, r3, #1
 800f4c6:	d103      	bne.n	800f4d0 <_raise_r+0x42>
 800f4c8:	2316      	movs	r3, #22
 800f4ca:	6003      	str	r3, [r0, #0]
 800f4cc:	2001      	movs	r0, #1
 800f4ce:	e7e7      	b.n	800f4a0 <_raise_r+0x12>
 800f4d0:	2400      	movs	r4, #0
 800f4d2:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800f4d6:	4628      	mov	r0, r5
 800f4d8:	4798      	blx	r3
 800f4da:	2000      	movs	r0, #0
 800f4dc:	e7e0      	b.n	800f4a0 <_raise_r+0x12>
	...

0800f4e0 <raise>:
 800f4e0:	4b02      	ldr	r3, [pc, #8]	; (800f4ec <raise+0xc>)
 800f4e2:	4601      	mov	r1, r0
 800f4e4:	6818      	ldr	r0, [r3, #0]
 800f4e6:	f7ff bfd2 	b.w	800f48e <_raise_r>
 800f4ea:	bf00      	nop
 800f4ec:	20000020 	.word	0x20000020

0800f4f0 <_kill_r>:
 800f4f0:	b538      	push	{r3, r4, r5, lr}
 800f4f2:	4d07      	ldr	r5, [pc, #28]	; (800f510 <_kill_r+0x20>)
 800f4f4:	2300      	movs	r3, #0
 800f4f6:	4604      	mov	r4, r0
 800f4f8:	4608      	mov	r0, r1
 800f4fa:	4611      	mov	r1, r2
 800f4fc:	602b      	str	r3, [r5, #0]
 800f4fe:	f7f7 fff1 	bl	80074e4 <_kill>
 800f502:	1c43      	adds	r3, r0, #1
 800f504:	d102      	bne.n	800f50c <_kill_r+0x1c>
 800f506:	682b      	ldr	r3, [r5, #0]
 800f508:	b103      	cbz	r3, 800f50c <_kill_r+0x1c>
 800f50a:	6023      	str	r3, [r4, #0]
 800f50c:	bd38      	pop	{r3, r4, r5, pc}
 800f50e:	bf00      	nop
 800f510:	2000057c 	.word	0x2000057c

0800f514 <_getpid_r>:
 800f514:	f7f7 bfde 	b.w	80074d4 <_getpid>

0800f518 <__sread>:
 800f518:	b510      	push	{r4, lr}
 800f51a:	460c      	mov	r4, r1
 800f51c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f520:	f000 f89c 	bl	800f65c <_read_r>
 800f524:	2800      	cmp	r0, #0
 800f526:	bfab      	itete	ge
 800f528:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800f52a:	89a3      	ldrhlt	r3, [r4, #12]
 800f52c:	181b      	addge	r3, r3, r0
 800f52e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800f532:	bfac      	ite	ge
 800f534:	6563      	strge	r3, [r4, #84]	; 0x54
 800f536:	81a3      	strhlt	r3, [r4, #12]
 800f538:	bd10      	pop	{r4, pc}

0800f53a <__swrite>:
 800f53a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f53e:	461f      	mov	r7, r3
 800f540:	898b      	ldrh	r3, [r1, #12]
 800f542:	05db      	lsls	r3, r3, #23
 800f544:	4605      	mov	r5, r0
 800f546:	460c      	mov	r4, r1
 800f548:	4616      	mov	r6, r2
 800f54a:	d505      	bpl.n	800f558 <__swrite+0x1e>
 800f54c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f550:	2302      	movs	r3, #2
 800f552:	2200      	movs	r2, #0
 800f554:	f000 f868 	bl	800f628 <_lseek_r>
 800f558:	89a3      	ldrh	r3, [r4, #12]
 800f55a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800f55e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800f562:	81a3      	strh	r3, [r4, #12]
 800f564:	4632      	mov	r2, r6
 800f566:	463b      	mov	r3, r7
 800f568:	4628      	mov	r0, r5
 800f56a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800f56e:	f000 b817 	b.w	800f5a0 <_write_r>

0800f572 <__sseek>:
 800f572:	b510      	push	{r4, lr}
 800f574:	460c      	mov	r4, r1
 800f576:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f57a:	f000 f855 	bl	800f628 <_lseek_r>
 800f57e:	1c43      	adds	r3, r0, #1
 800f580:	89a3      	ldrh	r3, [r4, #12]
 800f582:	bf15      	itete	ne
 800f584:	6560      	strne	r0, [r4, #84]	; 0x54
 800f586:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800f58a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800f58e:	81a3      	strheq	r3, [r4, #12]
 800f590:	bf18      	it	ne
 800f592:	81a3      	strhne	r3, [r4, #12]
 800f594:	bd10      	pop	{r4, pc}

0800f596 <__sclose>:
 800f596:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800f59a:	f000 b813 	b.w	800f5c4 <_close_r>
	...

0800f5a0 <_write_r>:
 800f5a0:	b538      	push	{r3, r4, r5, lr}
 800f5a2:	4d07      	ldr	r5, [pc, #28]	; (800f5c0 <_write_r+0x20>)
 800f5a4:	4604      	mov	r4, r0
 800f5a6:	4608      	mov	r0, r1
 800f5a8:	4611      	mov	r1, r2
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	602a      	str	r2, [r5, #0]
 800f5ae:	461a      	mov	r2, r3
 800f5b0:	f7f7 ffcf 	bl	8007552 <_write>
 800f5b4:	1c43      	adds	r3, r0, #1
 800f5b6:	d102      	bne.n	800f5be <_write_r+0x1e>
 800f5b8:	682b      	ldr	r3, [r5, #0]
 800f5ba:	b103      	cbz	r3, 800f5be <_write_r+0x1e>
 800f5bc:	6023      	str	r3, [r4, #0]
 800f5be:	bd38      	pop	{r3, r4, r5, pc}
 800f5c0:	2000057c 	.word	0x2000057c

0800f5c4 <_close_r>:
 800f5c4:	b538      	push	{r3, r4, r5, lr}
 800f5c6:	4d06      	ldr	r5, [pc, #24]	; (800f5e0 <_close_r+0x1c>)
 800f5c8:	2300      	movs	r3, #0
 800f5ca:	4604      	mov	r4, r0
 800f5cc:	4608      	mov	r0, r1
 800f5ce:	602b      	str	r3, [r5, #0]
 800f5d0:	f7f7 ffdb 	bl	800758a <_close>
 800f5d4:	1c43      	adds	r3, r0, #1
 800f5d6:	d102      	bne.n	800f5de <_close_r+0x1a>
 800f5d8:	682b      	ldr	r3, [r5, #0]
 800f5da:	b103      	cbz	r3, 800f5de <_close_r+0x1a>
 800f5dc:	6023      	str	r3, [r4, #0]
 800f5de:	bd38      	pop	{r3, r4, r5, pc}
 800f5e0:	2000057c 	.word	0x2000057c

0800f5e4 <_fstat_r>:
 800f5e4:	b538      	push	{r3, r4, r5, lr}
 800f5e6:	4d07      	ldr	r5, [pc, #28]	; (800f604 <_fstat_r+0x20>)
 800f5e8:	2300      	movs	r3, #0
 800f5ea:	4604      	mov	r4, r0
 800f5ec:	4608      	mov	r0, r1
 800f5ee:	4611      	mov	r1, r2
 800f5f0:	602b      	str	r3, [r5, #0]
 800f5f2:	f7f7 ffd6 	bl	80075a2 <_fstat>
 800f5f6:	1c43      	adds	r3, r0, #1
 800f5f8:	d102      	bne.n	800f600 <_fstat_r+0x1c>
 800f5fa:	682b      	ldr	r3, [r5, #0]
 800f5fc:	b103      	cbz	r3, 800f600 <_fstat_r+0x1c>
 800f5fe:	6023      	str	r3, [r4, #0]
 800f600:	bd38      	pop	{r3, r4, r5, pc}
 800f602:	bf00      	nop
 800f604:	2000057c 	.word	0x2000057c

0800f608 <_isatty_r>:
 800f608:	b538      	push	{r3, r4, r5, lr}
 800f60a:	4d06      	ldr	r5, [pc, #24]	; (800f624 <_isatty_r+0x1c>)
 800f60c:	2300      	movs	r3, #0
 800f60e:	4604      	mov	r4, r0
 800f610:	4608      	mov	r0, r1
 800f612:	602b      	str	r3, [r5, #0]
 800f614:	f7f7 ffd5 	bl	80075c2 <_isatty>
 800f618:	1c43      	adds	r3, r0, #1
 800f61a:	d102      	bne.n	800f622 <_isatty_r+0x1a>
 800f61c:	682b      	ldr	r3, [r5, #0]
 800f61e:	b103      	cbz	r3, 800f622 <_isatty_r+0x1a>
 800f620:	6023      	str	r3, [r4, #0]
 800f622:	bd38      	pop	{r3, r4, r5, pc}
 800f624:	2000057c 	.word	0x2000057c

0800f628 <_lseek_r>:
 800f628:	b538      	push	{r3, r4, r5, lr}
 800f62a:	4d07      	ldr	r5, [pc, #28]	; (800f648 <_lseek_r+0x20>)
 800f62c:	4604      	mov	r4, r0
 800f62e:	4608      	mov	r0, r1
 800f630:	4611      	mov	r1, r2
 800f632:	2200      	movs	r2, #0
 800f634:	602a      	str	r2, [r5, #0]
 800f636:	461a      	mov	r2, r3
 800f638:	f7f7 ffce 	bl	80075d8 <_lseek>
 800f63c:	1c43      	adds	r3, r0, #1
 800f63e:	d102      	bne.n	800f646 <_lseek_r+0x1e>
 800f640:	682b      	ldr	r3, [r5, #0]
 800f642:	b103      	cbz	r3, 800f646 <_lseek_r+0x1e>
 800f644:	6023      	str	r3, [r4, #0]
 800f646:	bd38      	pop	{r3, r4, r5, pc}
 800f648:	2000057c 	.word	0x2000057c

0800f64c <_malloc_usable_size_r>:
 800f64c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800f650:	1f18      	subs	r0, r3, #4
 800f652:	2b00      	cmp	r3, #0
 800f654:	bfbc      	itt	lt
 800f656:	580b      	ldrlt	r3, [r1, r0]
 800f658:	18c0      	addlt	r0, r0, r3
 800f65a:	4770      	bx	lr

0800f65c <_read_r>:
 800f65c:	b538      	push	{r3, r4, r5, lr}
 800f65e:	4d07      	ldr	r5, [pc, #28]	; (800f67c <_read_r+0x20>)
 800f660:	4604      	mov	r4, r0
 800f662:	4608      	mov	r0, r1
 800f664:	4611      	mov	r1, r2
 800f666:	2200      	movs	r2, #0
 800f668:	602a      	str	r2, [r5, #0]
 800f66a:	461a      	mov	r2, r3
 800f66c:	f7f7 ff54 	bl	8007518 <_read>
 800f670:	1c43      	adds	r3, r0, #1
 800f672:	d102      	bne.n	800f67a <_read_r+0x1e>
 800f674:	682b      	ldr	r3, [r5, #0]
 800f676:	b103      	cbz	r3, 800f67a <_read_r+0x1e>
 800f678:	6023      	str	r3, [r4, #0]
 800f67a:	bd38      	pop	{r3, r4, r5, pc}
 800f67c:	2000057c 	.word	0x2000057c

0800f680 <_init>:
 800f680:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f682:	bf00      	nop
 800f684:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f686:	bc08      	pop	{r3}
 800f688:	469e      	mov	lr, r3
 800f68a:	4770      	bx	lr

0800f68c <_fini>:
 800f68c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f68e:	bf00      	nop
 800f690:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f692:	bc08      	pop	{r3}
 800f694:	469e      	mov	lr, r3
 800f696:	4770      	bx	lr
