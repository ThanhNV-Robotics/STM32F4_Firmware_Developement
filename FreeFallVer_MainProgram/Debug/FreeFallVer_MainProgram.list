
FreeFallVer_MainProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000c1f0  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000600  0800c380  0800c380  0001c380  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800c980  0800c980  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800c980  0800c980  0001c980  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800c988  0800c988  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800c988  0800c988  0001c988  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800c98c  0800c98c  0001c98c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800c990  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00006108  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  200062f8  200062f8  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000103c9  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000273d  00000000  00000000  000305e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa0  00000000  00000000  00032d28  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000ea8  00000000  00000000  00033cc8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022c08  00000000  00000000  00034b70  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00011f04  00000000  00000000  00057778  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ced7c  00000000  00000000  0006967c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  001383f8  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000570c  00000000  00000000  00138448  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800c368 	.word	0x0800c368

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800c368 	.word	0x0800c368

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <GetSector+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x22>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001012:	d302      	bcc.n	800101a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e04b      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <GetSector+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <GetSector+0x38>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <GetSector+0xd0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e040      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <GetSector+0xd4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d806      	bhi.n	8001046 <GetSector+0x4e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <GetSector+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d302      	bcc.n	8001046 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e035      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GetSector+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x64>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GetSector+0xe0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d302      	bcc.n	800105c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001056:	2303      	movs	r3, #3
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e02a      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GetSector+0xe4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0x7a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <GetSector+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800106c:	2304      	movs	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e01f      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GetSector+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d206      	bcs.n	8001088 <GetSector+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <GetSector+0xe4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d902      	bls.n	8001088 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001082:	2305      	movs	r3, #5
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e014      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GetSector+0xec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d206      	bcs.n	800109e <GetSector+0xa6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <GetSector+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d902      	bls.n	800109e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001098:	2306      	movs	r3, #6
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e009      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GetSector+0xf0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d205      	bcs.n	80010b2 <GetSector+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <GetSector+0xec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	08003ffe 	.word	0x08003ffe
 80010c4:	08007ffe 	.word	0x08007ffe
 80010c8:	08004000 	.word	0x08004000
 80010cc:	0800bffe 	.word	0x0800bffe
 80010d0:	08008000 	.word	0x08008000
 80010d4:	0800ffff 	.word	0x0800ffff
 80010d8:	0800c000 	.word	0x0800c000
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff
 80010e8:	0807ffff 	.word	0x0807ffff

080010ec <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f003 fc07 	bl	8004910 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff78 	bl	8000ff8 <GetSector>
 8001108:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001116:	69f8      	ldr	r0, [r7, #28]
 8001118:	f7ff ff6e 	bl	8000ff8 <GetSector>
 800111c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001126:	2202      	movs	r2, #2
 8001128:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Flash_Write_Data+0xb8>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	3301      	adds	r3, #1
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Flash_Write_Data+0xb8>)
 800113a:	60d3      	str	r3, [r2, #12]
	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001144:	f003 fd52 	bl	8004bec <HAL_FLASHEx_Erase>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800114e:	f003 fc11 	bl	8004974 <HAL_FLASH_GetError>
 8001152:	4603      	mov	r3, r0
 8001154:	e022      	b.n	800119c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	461c      	mov	r4, r3
 8001164:	4615      	mov	r5, r2
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2002      	movs	r0, #2
 800116e:	f003 fb7b 	bl	8004868 <HAL_FLASH_Program>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3304      	adds	r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e003      	b.n	800118e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001186:	f003 fbf5 	bl	8004974 <HAL_FLASH_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	e006      	b.n	800119c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	429a      	cmp	r2, r3
 8001194:	dbdf      	blt.n	8001156 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001196:	f003 fbdd 	bl	8004954 <HAL_FLASH_Lock>

	   return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	2000020c 	.word	0x2000020c

080011a8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	80fa      	strh	r2, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d000      	beq.n	80011d6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011d4:	e7ef      	b.n	80011b6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Stop>:
#include "stdbool.h"
#include <math.h>
//#include <FLASH_SECTOR_F4.h>
extern bool POSReach;
void Stop() // Stop motor function
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <Stop+0x1c>)
 80011ee:	f003 ffd3 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Disable Servo Enable
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <Stop+0x1c>)
 80011f8:	f003 ffce 	bl	8005198 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020800 	.word	0x40020800

08001204 <AlarmReset>:

void AlarmReset() // reset alarm function
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	  	HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_SET);//Pull Estop pin to 1 (24V)
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <AlarmReset+0x44>)
 800120e:	f003 ffc3 	bl	8005198 <HAL_GPIO_WritePin>

		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_RESET); // trig Alarm Reset Pin
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <AlarmReset+0x44>)
 8001218:	f003 ffbe 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f003 f940 	bl	80044a4 <HAL_Delay>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <AlarmReset+0x44>)
 800122a:	f003 ffb5 	bl	8005198 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 800122e:	2201      	movs	r2, #1
 8001230:	2120      	movs	r1, #32
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <AlarmReset+0x48>)
 8001234:	f003 ffb0 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Enable Servo Enable 
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <AlarmReset+0x48>)
 800123e:	f003 ffab 	bl	8005198 <HAL_GPIO_WritePin>
		// Turn on the brake
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800

08001250 <Estop>:

void Estop() // Estop function
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);//Pull Estop pin to GND
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Estop+0x14>)
 800125a:	f003 ff9d 	bl	8005198 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <DisableSTOP>:

void DisableSTOP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DisableSTOP+0x14>)
 8001272:	f003 ff91 	bl	8005198 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800

08001280 <JogMoveUp>:

void JogMoveUp() // Move up by pressing the JOG button on the UI
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_SET); // Choose the direction
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <JogMoveUp+0x20>)
 800128c:	f003 ff84 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <JogMoveUp+0x24>)
 8001296:	f003 ff7f 	bl	8005198 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800

080012a8 <JogMoveDown>:

void JogMoveDown()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // Choose the direction
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <JogMoveDown+0x20>)
 80012b4:	f003 ff70 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <JogMoveDown+0x24>)
 80012be:	f003 ff6b 	bl	8005198 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800

080012d0 <DriverInit>:
{
	HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // Speed Mode
}

bool DriverInit()
{	
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // CN1-14 - PLSCLR	
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <DriverInit+0x70>)
 80012dc:	f003 ff5c 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port,Speed2_Not_PE7_15_Pin,GPIO_PIN_RESET);//CN1-15 SPDLIM/TLIM
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <DriverInit+0x70>)
 80012e6:	f003 ff57 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CCWLIM_Not_PE12_39_GPIO_Port,CCWLIM_Not_PE12_39_Pin,GPIO_PIN_RESET);//CN1-39 PLSINH
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <DriverInit+0x70>)
 80012f2:	f003 ff51 	bl	8005198 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET);// CN-38 - CWLIM
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4810      	ldr	r0, [pc, #64]	; (8001340 <DriverInit+0x70>)
 80012fe:	f003 ff4b 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CWLIM_Not_PE14_13_GPIO_Port,CWLIM_Not_PE14_13_Pin,GPIO_PIN_SET);//CN1-13 CCWLIM
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <DriverInit+0x70>)
 800130a:	f003 ff45 	bl	8005198 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);// First, the driver will be in Emergency Stop
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <DriverInit+0x74>)
 8001314:	f003 ff40 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <DriverInit+0x78>)
 800131e:	f003 ff3b 	bl	8005198 <HAL_GPIO_WritePin>
		
		HAL_GPIO_WritePin(PA12_LINE_DRV_EN_GPIO_Port, PA12_LINE_DRV_EN_Pin, GPIO_PIN_RESET);// Enable U14 DriveLine IC for generating pulses
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <DriverInit+0x7c>)
 800132a:	f003 ff35 	bl	8005198 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // DIR	
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DriverInit+0x70>)
 8001336:	f003 ff2f 	bl	8005198 <HAL_GPIO_WritePin>
	
		return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <ReadLogicF7000Out>:
uint16_t ReadLogicF7000Out(void)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint16_t OuputState = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
	uint8_t i=0;
 800135a:	2300      	movs	r3, #0
 800135c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_23_TYPEOUT_GPIO_Port,CN1_23_TYPEOUT_Pin)) // Read CN1-23-TYPEOUT
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	485e      	ldr	r0, [pc, #376]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001362:	f003 ff01 	bl	8005168 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <ReadLogicF7000Out+0x30>
	{
		OuputState = OuputState | (1 << i); // Set ith bit		
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	3301      	adds	r3, #1
 8001384:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin)) // Read CN1-48-BRAKE
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4855      	ldr	r0, [pc, #340]	; (80014e0 <ReadLogicF7000Out+0x190>)
 800138a:	f003 feed 	bl	8005168 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <ReadLogicF7000Out+0x58>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	3301      	adds	r3, #1
 80013ac:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin)) // Read CN1-22-RDY
 80013ae:	2104      	movs	r1, #4
 80013b0:	484b      	ldr	r0, [pc, #300]	; (80014e0 <ReadLogicF7000Out+0x190>)
 80013b2:	f003 fed9 	bl	8005168 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <ReadLogicF7000Out+0x80>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	3301      	adds	r3, #1
 80013d4:	717b      	strb	r3, [r7, #5]
	POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);	// Check if the position is reached or not
 80013d6:	2102      	movs	r1, #2
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <ReadLogicF7000Out+0x194>)
 80013da:	f003 fec5 	bl	8005168 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013ec:	701a      	strb	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin)) // Read CN1-47
	if(POSReach)
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <ReadLogicF7000Out+0xba>
	{		
		OuputState = OuputState | (1 << i); // Set ith bit
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3301      	adds	r3, #1
 800140e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_21_SPDOUT_TRQOUT_GPIO_Port,CN1_21_SPDOUT_TRQOUT_Pin)) // Read CN1-21
 8001410:	2108      	movs	r1, #8
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <ReadLogicF7000Out+0x190>)
 8001414:	f003 fea8 	bl	8005168 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <ReadLogicF7000Out+0xe2>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_46_ALARM_GPIO_Port,CN1_46_ALARM_Pin)) // Read CN1-22-
 8001438:	2101      	movs	r1, #1
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800143c:	f003 fe94 	bl	8005168 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <ReadLogicF7000Out+0x10a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	3301      	adds	r3, #1
 800145e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_20_PCWOUT_PTQOUT_GPIO_Port,CN1_20_PCWOUT_PTQOUT_Pin)) // Read CN1-20
 8001460:	2110      	movs	r1, #16
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001464:	f003 fe80 	bl	8005168 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <ReadLogicF7000Out+0x132>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001482:	797b      	ldrb	r3, [r7, #5]
 8001484:	3301      	adds	r3, #1
 8001486:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_45_NCWOUT_NTQOUT_GPIO_Port,CN1_45_NCWOUT_NTQOUT_Pin)) // Read CN1-45
 8001488:	2104      	movs	r1, #4
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800148c:	f003 fe6c 	bl	8005168 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <ReadLogicF7000Out+0x15a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	3301      	adds	r3, #1
 80014ae:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_19_ZSPD_GPIO_Port,CN1_19_ZSPD_Pin)) // Read CN1-19-ZSPD
 80014b0:	2108      	movs	r1, #8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <ReadLogicF7000Out+0x19c>)
 80014b4:	f003 fe58 	bl	8005168 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <ReadLogicF7000Out+0x182>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	80fb      	strh	r3, [r7, #6]
	}	
	return OuputState;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	20000434 	.word	0x20000434
 80014ec:	40020400 	.word	0x40020400

080014f0 <ExtractMotionCode>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

void ExtractMotionCode () // Extract command from the UI
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	memset (MotionCode, '\0', sizeof (MotionCode)); // reset MotionCode
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <ExtractMotionCode+0xa8>)
 80014fc:	f006 fa4e 	bl	800799c <memset>
	memset (DataRegion, '\0', sizeof (DataRegion)); // reset DataRegion
 8001500:	2228      	movs	r2, #40	; 0x28
 8001502:	2100      	movs	r1, #0
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <ExtractMotionCode+0xac>)
 8001506:	f006 fa49 	bl	800799c <memset>
	uint8_t j = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 800150e:	2300      	movs	r3, #0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	e012      	b.n	800153a <ExtractMotionCode+0x4a>
	{
		if (RxPCBuff[i] != 0) // coppy the command from UI to another array, remove the null character at the beginning
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <ExtractMotionCode+0x44>
		{
			DataRegion[j] = RxPCBuff[i]; // coppy to DataRegion
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	491e      	ldr	r1, [pc, #120]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001526:	5c8a      	ldrb	r2, [r1, r2]
 8001528:	b2d1      	uxtb	r1, r2
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <ExtractMotionCode+0xac>)
 800152c:	54d1      	strb	r1, [r2, r3]
			j++;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	3301      	adds	r3, #1
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	2b27      	cmp	r3, #39	; 0x27
 800153e:	d9e9      	bls.n	8001514 <ExtractMotionCode+0x24>
		}
	}
	j = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
	char *token;
	token = strtok((char *)DataRegion, "/");	// Split the command ~ remove the / character
 8001544:	4917      	ldr	r1, [pc, #92]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <ExtractMotionCode+0xac>)
 8001548:	f007 ff06 	bl	8009358 <strtok>
 800154c:	6038      	str	r0, [r7, #0]
	while (token != NULL)
 800154e:	e016      	b.n	800157e <ExtractMotionCode+0x8e>
    {
				MotionCode[j] = (atof(token)); // covert to float type
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f006 f9f5 	bl	8007940 <atof>
 8001556:	ec53 2b10 	vmov	r2, r3, d0
 800155a:	79fc      	ldrb	r4, [r7, #7]
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb42 	bl	8000be8 <__aeabi_d2f>
 8001564:	4602      	mov	r2, r0
 8001566:	490c      	ldr	r1, [pc, #48]	; (8001598 <ExtractMotionCode+0xa8>)
 8001568:	00a3      	lsls	r3, r4, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
			  //MotionCode[j] = (atoi(token)); // covert to int type
        token = strtok(NULL, "/");
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001570:	2000      	movs	r0, #0
 8001572:	f007 fef1 	bl	8009358 <strtok>
 8001576:	6038      	str	r0, [r7, #0]
				j++;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3301      	adds	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
	while (token != NULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e5      	bne.n	8001550 <ExtractMotionCode+0x60>
    }
	memset (RxPCBuff, '\0', sizeof (RxPCBuff)); // reset
 8001584:	2228      	movs	r2, #40	; 0x28
 8001586:	2100      	movs	r1, #0
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <ExtractMotionCode+0xb0>)
 800158a:	f006 fa07 	bl	800799c <memset>
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	20006298 	.word	0x20006298
 800159c:	20000380 	.word	0x20000380
 80015a0:	20000338 	.word	0x20000338
 80015a4:	0800c380 	.word	0x0800c380

080015a8 <ReadMultiRegister>:


void ReadMultiRegister(uint16_t StartingAddress, uint8_t NoOfRegister) // Read data from the Driver
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b086      	sub	sp, #24
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	717b      	strb	r3, [r7, #5]
	// Prepare data frame -- BEGIN
	// Data preparation
	TxDataToDriver[0] = DriverID;//SerialID = 1 of the driver
 80015b8:	4b35      	ldr	r3, [pc, #212]	; (8001690 <ReadMultiRegister+0xe8>)
 80015ba:	2201      	movs	r2, #1
 80015bc:	701a      	strb	r2, [r3, #0]
	TxDataToDriver[1] = 3;//Read Regis, function code
 80015be:	4b34      	ldr	r3, [pc, #208]	; (8001690 <ReadMultiRegister+0xe8>)
 80015c0:	2203      	movs	r2, #3
 80015c2:	705a      	strb	r2, [r3, #1]
	TxDataToDriver[2] = StartingAddress / 256; // Register Address High byte
 80015c4:	88fb      	ldrh	r3, [r7, #6]
 80015c6:	0a1b      	lsrs	r3, r3, #8
 80015c8:	b29b      	uxth	r3, r3
 80015ca:	b2da      	uxtb	r2, r3
 80015cc:	4b30      	ldr	r3, [pc, #192]	; (8001690 <ReadMultiRegister+0xe8>)
 80015ce:	709a      	strb	r2, [r3, #2]
    TxDataToDriver[3] = StartingAddress % 256; // Register Address LOW byte
 80015d0:	88fb      	ldrh	r3, [r7, #6]
 80015d2:	b2da      	uxtb	r2, r3
 80015d4:	4b2e      	ldr	r3, [pc, #184]	; (8001690 <ReadMultiRegister+0xe8>)
 80015d6:	70da      	strb	r2, [r3, #3]
	TxDataToDriver[4] = 0; // Number of Register HIGH byte
 80015d8:	4b2d      	ldr	r3, [pc, #180]	; (8001690 <ReadMultiRegister+0xe8>)
 80015da:	2200      	movs	r2, #0
 80015dc:	711a      	strb	r2, [r3, #4]
	TxDataToDriver[5] = NoOfRegister; // Number of Register LOW byte
 80015de:	4a2c      	ldr	r2, [pc, #176]	; (8001690 <ReadMultiRegister+0xe8>)
 80015e0:	797b      	ldrb	r3, [r7, #5]
 80015e2:	7153      	strb	r3, [r2, #5]

	//CRC BEGIN=======
				uint16_t crc = 0xFFFF;
 80015e4:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015e8:	82fb      	strh	r3, [r7, #22]
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	e026      	b.n	800163e <ReadMultiRegister+0x96>
				{	crc ^= (uint16_t)TxDataToDriver[pos];          // XOR byte into least sig. byte of crc
 80015f0:	4a27      	ldr	r2, [pc, #156]	; (8001690 <ReadMultiRegister+0xe8>)
 80015f2:	693b      	ldr	r3, [r7, #16]
 80015f4:	4413      	add	r3, r2
 80015f6:	781b      	ldrb	r3, [r3, #0]
 80015f8:	b29a      	uxth	r2, r3
 80015fa:	8afb      	ldrh	r3, [r7, #22]
 80015fc:	4053      	eors	r3, r2
 80015fe:	82fb      	strh	r3, [r7, #22]
					for (int i = 8; i != 0; i--)
 8001600:	2308      	movs	r3, #8
 8001602:	60fb      	str	r3, [r7, #12]
 8001604:	e015      	b.n	8001632 <ReadMultiRegister+0x8a>
					{    // Loop over each bit
						if ((crc & 0x0001) != 0)
 8001606:	8afb      	ldrh	r3, [r7, #22]
 8001608:	f003 0301 	and.w	r3, r3, #1
 800160c:	2b00      	cmp	r3, #0
 800160e:	d00a      	beq.n	8001626 <ReadMultiRegister+0x7e>
						{      // If the LSB is set
							crc >>= 1;                    // Shift right and XOR 0xA001
 8001610:	8afb      	ldrh	r3, [r7, #22]
 8001612:	085b      	lsrs	r3, r3, #1
 8001614:	82fb      	strh	r3, [r7, #22]
							crc ^= 0xA001;
 8001616:	8afb      	ldrh	r3, [r7, #22]
 8001618:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 800161c:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001620:	43db      	mvns	r3, r3
 8001622:	82fb      	strh	r3, [r7, #22]
 8001624:	e002      	b.n	800162c <ReadMultiRegister+0x84>
						}
						else                            // Else LSB is not set
							crc >>= 1;                    // Just shift right
 8001626:	8afb      	ldrh	r3, [r7, #22]
 8001628:	085b      	lsrs	r3, r3, #1
 800162a:	82fb      	strh	r3, [r7, #22]
					for (int i = 8; i != 0; i--)
 800162c:	68fb      	ldr	r3, [r7, #12]
 800162e:	3b01      	subs	r3, #1
 8001630:	60fb      	str	r3, [r7, #12]
 8001632:	68fb      	ldr	r3, [r7, #12]
 8001634:	2b00      	cmp	r3, #0
 8001636:	d1e6      	bne.n	8001606 <ReadMultiRegister+0x5e>
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 8001638:	693b      	ldr	r3, [r7, #16]
 800163a:	3301      	adds	r3, #1
 800163c:	613b      	str	r3, [r7, #16]
 800163e:	693b      	ldr	r3, [r7, #16]
 8001640:	2b05      	cmp	r3, #5
 8001642:	ddd5      	ble.n	80015f0 <ReadMultiRegister+0x48>
					}
				}
	TxDataToDriver[6]= (uint8_t)(crc&0x00FF);;//(uint8_t)(TemDat16&0xFF);
 8001644:	8afb      	ldrh	r3, [r7, #22]
 8001646:	b2da      	uxtb	r2, r3
 8001648:	4b11      	ldr	r3, [pc, #68]	; (8001690 <ReadMultiRegister+0xe8>)
 800164a:	719a      	strb	r2, [r3, #6]
	TxDataToDriver[7]=(uint8_t)((crc>>8)&0x00FF);
 800164c:	8afb      	ldrh	r3, [r7, #22]
 800164e:	0a1b      	lsrs	r3, r3, #8
 8001650:	b29b      	uxth	r3, r3
 8001652:	b2da      	uxtb	r2, r3
 8001654:	4b0e      	ldr	r3, [pc, #56]	; (8001690 <ReadMultiRegister+0xe8>)
 8001656:	71da      	strb	r2, [r3, #7]
	//CRC=====END/
	// Prepare data frame -- END
	// Send data use UART5
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
 8001658:	2200      	movs	r2, #0
 800165a:	2101      	movs	r1, #1
 800165c:	480d      	ldr	r0, [pc, #52]	; (8001694 <ReadMultiRegister+0xec>)
 800165e:	f003 fd9b 	bl	8005198 <HAL_GPIO_WritePin>
	HAL_Delay(1);
 8001662:	2001      	movs	r0, #1
 8001664:	f002 ff1e 	bl	80044a4 <HAL_Delay>
	HAL_UART_Transmit(&huart5,TxDataToDriver,8,200); // use UART5 to send
 8001668:	23c8      	movs	r3, #200	; 0xc8
 800166a:	2208      	movs	r2, #8
 800166c:	4908      	ldr	r1, [pc, #32]	; (8001690 <ReadMultiRegister+0xe8>)
 800166e:	480a      	ldr	r0, [pc, #40]	; (8001698 <ReadMultiRegister+0xf0>)
 8001670:	f005 f93b 	bl	80068ea <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
 8001674:	2201      	movs	r2, #1
 8001676:	2101      	movs	r1, #1
 8001678:	4806      	ldr	r0, [pc, #24]	; (8001694 <ReadMultiRegister+0xec>)
 800167a:	f003 fd8d 	bl	8005198 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
 800167e:	2201      	movs	r2, #1
 8001680:	4906      	ldr	r1, [pc, #24]	; (800169c <ReadMultiRegister+0xf4>)
 8001682:	4805      	ldr	r0, [pc, #20]	; (8001698 <ReadMultiRegister+0xf0>)
 8001684:	f005 f9c3 	bl	8006a0e <HAL_UART_Receive_IT>
}
 8001688:	bf00      	nop
 800168a:	3718      	adds	r7, #24
 800168c:	46bd      	mov	sp, r7
 800168e:	bd80      	pop	{r7, pc}
 8001690:	20000408 	.word	0x20000408
 8001694:	40021000 	.word	0x40021000
 8001698:	200002b0 	.word	0x200002b0
 800169c:	200003a9 	.word	0x200003a9

080016a0 <LoadSavedParam>:
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
}


void LoadSavedParam (uint32_t StartSectorAddress, float *_Param)
{
 80016a0:	b590      	push	{r4, r7, lr}
 80016a2:	b09f      	sub	sp, #124	; 0x7c
 80016a4:	af00      	add	r7, sp, #0
 80016a6:	6078      	str	r0, [r7, #4]
 80016a8:	6039      	str	r1, [r7, #0]
	uint8_t LoadDataBuff[100];

	Flash_Read_Data(StartSectorAddress, (uint32_t *)LoadDataBuff, numofwords);
 80016aa:	4b1a      	ldr	r3, [pc, #104]	; (8001714 <LoadSavedParam+0x74>)
 80016ac:	781b      	ldrb	r3, [r3, #0]
 80016ae:	b29a      	uxth	r2, r3
 80016b0:	f107 030c 	add.w	r3, r7, #12
 80016b4:	4619      	mov	r1, r3
 80016b6:	6878      	ldr	r0, [r7, #4]
 80016b8:	f7ff fd76 	bl	80011a8 <Flash_Read_Data>

	uint8_t	j = 0;
 80016bc:	2300      	movs	r3, #0
 80016be:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char *token;
	token = strtok((char *)LoadDataBuff, "/");	// Split the command ~ remove the / character
 80016c2:	f107 030c 	add.w	r3, r7, #12
 80016c6:	4914      	ldr	r1, [pc, #80]	; (8001718 <LoadSavedParam+0x78>)
 80016c8:	4618      	mov	r0, r3
 80016ca:	f007 fe45 	bl	8009358 <strtok>
 80016ce:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL)
 80016d0:	e017      	b.n	8001702 <LoadSavedParam+0x62>
    {
		_Param[j] = (atof(token)); // covert to float type
 80016d2:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80016d4:	f006 f934 	bl	8007940 <atof>
 80016d8:	ec51 0b10 	vmov	r0, r1, d0
 80016dc:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016e0:	009b      	lsls	r3, r3, #2
 80016e2:	683a      	ldr	r2, [r7, #0]
 80016e4:	18d4      	adds	r4, r2, r3
 80016e6:	f7ff fa7f 	bl	8000be8 <__aeabi_d2f>
 80016ea:	4603      	mov	r3, r0
 80016ec:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, "/");
 80016ee:	490a      	ldr	r1, [pc, #40]	; (8001718 <LoadSavedParam+0x78>)
 80016f0:	2000      	movs	r0, #0
 80016f2:	f007 fe31 	bl	8009358 <strtok>
 80016f6:	6738      	str	r0, [r7, #112]	; 0x70
		j++;
 80016f8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016fc:	3301      	adds	r3, #1
 80016fe:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (token != NULL)
 8001702:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001704:	2b00      	cmp	r3, #0
 8001706:	d1e4      	bne.n	80016d2 <LoadSavedParam+0x32>
    }
}
 8001708:	bf00      	nop
 800170a:	bf00      	nop
 800170c:	377c      	adds	r7, #124	; 0x7c
 800170e:	46bd      	mov	sp, r7
 8001710:	bd90      	pop	{r4, r7, pc}
 8001712:	bf00      	nop
 8001714:	2000000c 	.word	0x2000000c
 8001718:	0800c380 	.word	0x0800c380

0800171c <SaveSystemParams>:

void SaveSystemParams (uint8_t *NoOfWords)
{
 800171c:	b5b0      	push	{r4, r5, r7, lr}
 800171e:	b09a      	sub	sp, #104	; 0x68
 8001720:	af04      	add	r7, sp, #16
 8001722:	6078      	str	r0, [r7, #4]
	char SaveBuffer[80];
	TxPCLen = sprintf(SaveBuffer,"%.2f/%d/%d/%d"
 8001724:	4b20      	ldr	r3, [pc, #128]	; (80017a8 <SaveSystemParams+0x8c>)
 8001726:	681b      	ldr	r3, [r3, #0]
 8001728:	4618      	mov	r0, r3
 800172a:	f7fe ff0d 	bl	8000548 <__aeabi_f2d>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	491e      	ldr	r1, [pc, #120]	; (80017ac <SaveSystemParams+0x90>)
 8001734:	7809      	ldrb	r1, [r1, #0]
 8001736:	460c      	mov	r4, r1
 8001738:	491d      	ldr	r1, [pc, #116]	; (80017b0 <SaveSystemParams+0x94>)
 800173a:	8809      	ldrh	r1, [r1, #0]
 800173c:	460d      	mov	r5, r1
 800173e:	491d      	ldr	r1, [pc, #116]	; (80017b4 <SaveSystemParams+0x98>)
 8001740:	7809      	ldrb	r1, [r1, #0]
 8001742:	f107 0008 	add.w	r0, r7, #8
 8001746:	9102      	str	r1, [sp, #8]
 8001748:	9501      	str	r5, [sp, #4]
 800174a:	9400      	str	r4, [sp, #0]
 800174c:	491a      	ldr	r1, [pc, #104]	; (80017b8 <SaveSystemParams+0x9c>)
 800174e:	f006 ffad 	bl	80086ac <siprintf>
 8001752:	4603      	mov	r3, r0
 8001754:	b2da      	uxtb	r2, r3
 8001756:	4b19      	ldr	r3, [pc, #100]	; (80017bc <SaveSystemParams+0xa0>)
 8001758:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime); // Combine to a string
	*NoOfWords = (strlen(SaveBuffer)/4)+((strlen(SaveBuffer)%4)!=0);
 800175a:	f107 0308 	add.w	r3, r7, #8
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fd36 	bl	80001d0 <strlen>
 8001764:	4603      	mov	r3, r0
 8001766:	089b      	lsrs	r3, r3, #2
 8001768:	b2dc      	uxtb	r4, r3
 800176a:	f107 0308 	add.w	r3, r7, #8
 800176e:	4618      	mov	r0, r3
 8001770:	f7fe fd2e 	bl	80001d0 <strlen>
 8001774:	4603      	mov	r3, r0
 8001776:	f003 0303 	and.w	r3, r3, #3
 800177a:	2b00      	cmp	r3, #0
 800177c:	bf14      	ite	ne
 800177e:	2301      	movne	r3, #1
 8001780:	2300      	moveq	r3, #0
 8001782:	b2db      	uxtb	r3, r3
 8001784:	4423      	add	r3, r4
 8001786:	b2da      	uxtb	r2, r3
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	701a      	strb	r2, [r3, #0]
	Flash_Write_Data(MemoryAddress , (uint32_t *)SaveBuffer, *NoOfWords);
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	b29a      	uxth	r2, r3
 8001792:	f107 0308 	add.w	r3, r7, #8
 8001796:	4619      	mov	r1, r3
 8001798:	4809      	ldr	r0, [pc, #36]	; (80017c0 <SaveSystemParams+0xa4>)
 800179a:	f7ff fca7 	bl	80010ec <Flash_Write_Data>
}
 800179e:	bf00      	nop
 80017a0:	3758      	adds	r7, #88	; 0x58
 80017a2:	46bd      	mov	sp, r7
 80017a4:	bdb0      	pop	{r4, r5, r7, pc}
 80017a6:	bf00      	nop
 80017a8:	20006210 	.word	0x20006210
 80017ac:	20006215 	.word	0x20006215
 80017b0:	20000008 	.word	0x20000008
 80017b4:	20006214 	.word	0x20006214
 80017b8:	0800c384 	.word	0x0800c384
 80017bc:	20000410 	.word	0x20000410
 80017c0:	08040000 	.word	0x08040000
 80017c4:	00000000 	.word	0x00000000

080017c8 <LinearGeneration>:

void LinearGeneration (float *var, float slope, float Amplitude)
// Amplitude is the limit of the value
{
 80017c8:	b5b0      	push	{r4, r5, r7, lr}
 80017ca:	b084      	sub	sp, #16
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	60f8      	str	r0, [r7, #12]
 80017d0:	ed87 0a02 	vstr	s0, [r7, #8]
 80017d4:	edc7 0a01 	vstr	s1, [r7, #4]

//	float ReturnValue;
//	ReturnValue = (InitialValue + (float)(slope*Time*0.001)); //
	if (slope >= 0)
 80017d8:	edd7 7a02 	vldr	s15, [r7, #8]
 80017dc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80017e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017e4:	db0d      	blt.n	8001802 <LinearGeneration+0x3a>
	{
		if (*var >= Amplitude)
 80017e6:	68fb      	ldr	r3, [r7, #12]
 80017e8:	edd3 7a00 	vldr	s15, [r3]
 80017ec:	ed97 7a01 	vldr	s14, [r7, #4]
 80017f0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80017f4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017f8:	d811      	bhi.n	800181e <LinearGeneration+0x56>
			{
				*var = Amplitude;
 80017fa:	68fb      	ldr	r3, [r7, #12]
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	601a      	str	r2, [r3, #0]
				return;
 8001800:	e036      	b.n	8001870 <LinearGeneration+0xa8>
			}
	}
	else
	{
		if (*var <= Amplitude)
 8001802:	68fb      	ldr	r3, [r7, #12]
 8001804:	edd3 7a00 	vldr	s15, [r3]
 8001808:	ed97 7a01 	vldr	s14, [r7, #4]
 800180c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001810:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001814:	db03      	blt.n	800181e <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001816:	68fb      	ldr	r3, [r7, #12]
 8001818:	687a      	ldr	r2, [r7, #4]
 800181a:	601a      	str	r2, [r3, #0]
				return;
 800181c:	e028      	b.n	8001870 <LinearGeneration+0xa8>
			}
	}
	*var += slope*SampleTime*0.001; // *0.001 to convert to second
 800181e:	68fb      	ldr	r3, [r7, #12]
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	4618      	mov	r0, r3
 8001824:	f7fe fe90 	bl	8000548 <__aeabi_f2d>
 8001828:	4604      	mov	r4, r0
 800182a:	460d      	mov	r5, r1
 800182c:	4b14      	ldr	r3, [pc, #80]	; (8001880 <LinearGeneration+0xb8>)
 800182e:	781b      	ldrb	r3, [r3, #0]
 8001830:	ee07 3a90 	vmov	s15, r3
 8001834:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001838:	edd7 7a02 	vldr	s15, [r7, #8]
 800183c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001840:	ee17 0a90 	vmov	r0, s15
 8001844:	f7fe fe80 	bl	8000548 <__aeabi_f2d>
 8001848:	a30b      	add	r3, pc, #44	; (adr r3, 8001878 <LinearGeneration+0xb0>)
 800184a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800184e:	f7fe fed3 	bl	80005f8 <__aeabi_dmul>
 8001852:	4602      	mov	r2, r0
 8001854:	460b      	mov	r3, r1
 8001856:	4620      	mov	r0, r4
 8001858:	4629      	mov	r1, r5
 800185a:	f7fe fd17 	bl	800028c <__adddf3>
 800185e:	4602      	mov	r2, r0
 8001860:	460b      	mov	r3, r1
 8001862:	4610      	mov	r0, r2
 8001864:	4619      	mov	r1, r3
 8001866:	f7ff f9bf 	bl	8000be8 <__aeabi_d2f>
 800186a:	4602      	mov	r2, r0
 800186c:	68fb      	ldr	r3, [r7, #12]
 800186e:	601a      	str	r2, [r3, #0]
}
 8001870:	3710      	adds	r7, #16
 8001872:	46bd      	mov	sp, r7
 8001874:	bdb0      	pop	{r4, r5, r7, pc}
 8001876:	bf00      	nop
 8001878:	d2f1a9fc 	.word	0xd2f1a9fc
 800187c:	3f50624d 	.word	0x3f50624d
 8001880:	20006214 	.word	0x20006214

08001884 <StopPulseGenerating>:


void StopPulseGenerating()
{
 8001884:	b580      	push	{r7, lr}
 8001886:	af00      	add	r7, sp, #0
	PulseGenerationFlag = false; //
 8001888:	4b09      	ldr	r3, [pc, #36]	; (80018b0 <StopPulseGenerating+0x2c>)
 800188a:	2200      	movs	r2, #0
 800188c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 800188e:	4809      	ldr	r0, [pc, #36]	; (80018b4 <StopPulseGenerating+0x30>)
 8001890:	f004 f9ce 	bl	8005c30 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_RESET);//Reset Pin status
 8001894:	2200      	movs	r2, #0
 8001896:	f44f 7100 	mov.w	r1, #512	; 0x200
 800189a:	4807      	ldr	r0, [pc, #28]	; (80018b8 <StopPulseGenerating+0x34>)
 800189c:	f003 fc7c 	bl	8005198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port,PC8_PR_Pin, GPIO_PIN_RESET);//Reset Pin status
 80018a0:	2200      	movs	r2, #0
 80018a2:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018a6:	4805      	ldr	r0, [pc, #20]	; (80018bc <StopPulseGenerating+0x38>)
 80018a8:	f003 fc76 	bl	8005198 <HAL_GPIO_WritePin>
}
 80018ac:	bf00      	nop
 80018ae:	bd80      	pop	{r7, pc}
 80018b0:	20000433 	.word	0x20000433
 80018b4:	20000268 	.word	0x20000268
 80018b8:	40021000 	.word	0x40021000
 80018bc:	40020800 	.word	0x40020800

080018c0 <InitPulseGenerating>:
void InitPulseGenerating(bool _Direction)
{
 80018c0:	b580      	push	{r7, lr}
 80018c2:	b082      	sub	sp, #8
 80018c4:	af00      	add	r7, sp, #0
 80018c6:	4603      	mov	r3, r0
 80018c8:	71fb      	strb	r3, [r7, #7]
	if(_Direction)
 80018ca:	79fb      	ldrb	r3, [r7, #7]
 80018cc:	2b00      	cmp	r3, #0
 80018ce:	d003      	beq.n	80018d8 <InitPulseGenerating+0x18>
	{
		PRIsToggled = true; // go up
 80018d0:	4b0c      	ldr	r3, [pc, #48]	; (8001904 <InitPulseGenerating+0x44>)
 80018d2:	2201      	movs	r2, #1
 80018d4:	701a      	strb	r2, [r3, #0]
 80018d6:	e002      	b.n	80018de <InitPulseGenerating+0x1e>
	}
	else
	{
		PRIsToggled = false; // go down
 80018d8:	4b0a      	ldr	r3, [pc, #40]	; (8001904 <InitPulseGenerating+0x44>)
 80018da:	2200      	movs	r2, #0
 80018dc:	701a      	strb	r2, [r3, #0]
	}
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); //
 80018de:	2201      	movs	r2, #1
 80018e0:	f44f 7180 	mov.w	r1, #256	; 0x100
 80018e4:	4808      	ldr	r0, [pc, #32]	; (8001908 <InitPulseGenerating+0x48>)
 80018e6:	f003 fc57 	bl	8005198 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 80018ea:	2201      	movs	r2, #1
 80018ec:	f44f 7100 	mov.w	r1, #512	; 0x200
 80018f0:	4806      	ldr	r0, [pc, #24]	; (800190c <InitPulseGenerating+0x4c>)
 80018f2:	f003 fc51 	bl	8005198 <HAL_GPIO_WritePin>
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3
 80018f6:	4806      	ldr	r0, [pc, #24]	; (8001910 <InitPulseGenerating+0x50>)
 80018f8:	f004 f92a 	bl	8005b50 <HAL_TIM_Base_Start_IT>
}
 80018fc:	bf00      	nop
 80018fe:	3708      	adds	r7, #8
 8001900:	46bd      	mov	sp, r7
 8001902:	bd80      	pop	{r7, pc}
 8001904:	2000043b 	.word	0x2000043b
 8001908:	40020800 	.word	0x40020800
 800190c:	40021000 	.word	0x40021000
 8001910:	20000268 	.word	0x20000268

08001914 <WaitingMiliSecond>:
bool WaitingMiliSecond(uint16_t TimeInMiliSecond)
{
 8001914:	b480      	push	{r7}
 8001916:	b083      	sub	sp, #12
 8001918:	af00      	add	r7, sp, #0
 800191a:	4603      	mov	r3, r0
 800191c:	80fb      	strh	r3, [r7, #6]
	StoppingTimeCount++;
 800191e:	4b0e      	ldr	r3, [pc, #56]	; (8001958 <WaitingMiliSecond+0x44>)
 8001920:	881b      	ldrh	r3, [r3, #0]
 8001922:	3301      	adds	r3, #1
 8001924:	b29a      	uxth	r2, r3
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <WaitingMiliSecond+0x44>)
 8001928:	801a      	strh	r2, [r3, #0]
	if (StoppingTimeCount >= (uint16_t)(TimeInMiliSecond/SampleTime))
 800192a:	88fb      	ldrh	r3, [r7, #6]
 800192c:	4a0b      	ldr	r2, [pc, #44]	; (800195c <WaitingMiliSecond+0x48>)
 800192e:	7812      	ldrb	r2, [r2, #0]
 8001930:	fb93 f3f2 	sdiv	r3, r3, r2
 8001934:	b29a      	uxth	r2, r3
 8001936:	4b08      	ldr	r3, [pc, #32]	; (8001958 <WaitingMiliSecond+0x44>)
 8001938:	881b      	ldrh	r3, [r3, #0]
 800193a:	429a      	cmp	r2, r3
 800193c:	d804      	bhi.n	8001948 <WaitingMiliSecond+0x34>
	{
		StoppingTimeCount = 0;
 800193e:	4b06      	ldr	r3, [pc, #24]	; (8001958 <WaitingMiliSecond+0x44>)
 8001940:	2200      	movs	r2, #0
 8001942:	801a      	strh	r2, [r3, #0]
		return true;
 8001944:	2301      	movs	r3, #1
 8001946:	e000      	b.n	800194a <WaitingMiliSecond+0x36>
	}
	return false;
 8001948:	2300      	movs	r3, #0
}
 800194a:	4618      	mov	r0, r3
 800194c:	370c      	adds	r7, #12
 800194e:	46bd      	mov	sp, r7
 8001950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001954:	4770      	bx	lr
 8001956:	bf00      	nop
 8001958:	2000620c 	.word	0x2000620c
 800195c:	20006214 	.word	0x20006214

08001960 <CalculateTimer3Period>:

int CalculateTimer3Period (bool DriverType, float speed)
{
 8001960:	b5b0      	push	{r4, r5, r7, lr}
 8001962:	b082      	sub	sp, #8
 8001964:	af00      	add	r7, sp, #0
 8001966:	4603      	mov	r3, r0
 8001968:	ed87 0a00 	vstr	s0, [r7]
 800196c:	71fb      	strb	r3, [r7, #7]
	// DriverType = true ->  Higen FDA7000 Driver
	// DriverType = false -> ASDA A3 Driver
	// Speed in rpm
	if (DriverType) // Higen FDA7000 Driver
 800196e:	79fb      	ldrb	r3, [r7, #7]
 8001970:	2b00      	cmp	r3, #0
 8001972:	d037      	beq.n	80019e4 <CalculateTimer3Period+0x84>
	{
		return (int)((float)(120000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001974:	edd7 7a00 	vldr	s15, [r7]
 8001978:	eef0 7ae7 	vabs.f32	s15, s15
 800197c:	ee17 0a90 	vmov	r0, s15
 8001980:	f7fe fde2 	bl	8000548 <__aeabi_f2d>
 8001984:	4604      	mov	r4, r0
 8001986:	460d      	mov	r5, r1
 8001988:	4b39      	ldr	r3, [pc, #228]	; (8001a70 <CalculateTimer3Period+0x110>)
 800198a:	881b      	ldrh	r3, [r3, #0]
 800198c:	ee07 3a90 	vmov	s15, r3
 8001990:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001994:	ee17 0a90 	vmov	r0, s15
 8001998:	f7fe fdd6 	bl	8000548 <__aeabi_f2d>
 800199c:	4602      	mov	r2, r0
 800199e:	460b      	mov	r3, r1
 80019a0:	4620      	mov	r0, r4
 80019a2:	4629      	mov	r1, r5
 80019a4:	f7fe fe28 	bl	80005f8 <__aeabi_dmul>
 80019a8:	4602      	mov	r2, r0
 80019aa:	460b      	mov	r3, r1
 80019ac:	a12c      	add	r1, pc, #176	; (adr r1, 8001a60 <CalculateTimer3Period+0x100>)
 80019ae:	e9d1 0100 	ldrd	r0, r1, [r1]
 80019b2:	f7fe ff4b 	bl	800084c <__aeabi_ddiv>
 80019b6:	4602      	mov	r2, r0
 80019b8:	460b      	mov	r3, r1
 80019ba:	4610      	mov	r0, r2
 80019bc:	4619      	mov	r1, r3
 80019be:	f7ff f913 	bl	8000be8 <__aeabi_d2f>
 80019c2:	4603      	mov	r3, r0
 80019c4:	4618      	mov	r0, r3
 80019c6:	f7fe fdbf 	bl	8000548 <__aeabi_f2d>
 80019ca:	f04f 0200 	mov.w	r2, #0
 80019ce:	4b29      	ldr	r3, [pc, #164]	; (8001a74 <CalculateTimer3Period+0x114>)
 80019d0:	f7fe fc5c 	bl	800028c <__adddf3>
 80019d4:	4602      	mov	r2, r0
 80019d6:	460b      	mov	r3, r1
 80019d8:	4610      	mov	r0, r2
 80019da:	4619      	mov	r1, r3
 80019dc:	f7ff f8bc 	bl	8000b58 <__aeabi_d2iz>
 80019e0:	4603      	mov	r3, r0
 80019e2:	e036      	b.n	8001a52 <CalculateTimer3Period+0xf2>
	}
	else
	{
		return (int)((float)(15000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 80019e4:	edd7 7a00 	vldr	s15, [r7]
 80019e8:	eef0 7ae7 	vabs.f32	s15, s15
 80019ec:	ee17 0a90 	vmov	r0, s15
 80019f0:	f7fe fdaa 	bl	8000548 <__aeabi_f2d>
 80019f4:	4604      	mov	r4, r0
 80019f6:	460d      	mov	r5, r1
 80019f8:	4b1d      	ldr	r3, [pc, #116]	; (8001a70 <CalculateTimer3Period+0x110>)
 80019fa:	881b      	ldrh	r3, [r3, #0]
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a04:	ee17 0a90 	vmov	r0, s15
 8001a08:	f7fe fd9e 	bl	8000548 <__aeabi_f2d>
 8001a0c:	4602      	mov	r2, r0
 8001a0e:	460b      	mov	r3, r1
 8001a10:	4620      	mov	r0, r4
 8001a12:	4629      	mov	r1, r5
 8001a14:	f7fe fdf0 	bl	80005f8 <__aeabi_dmul>
 8001a18:	4602      	mov	r2, r0
 8001a1a:	460b      	mov	r3, r1
 8001a1c:	a112      	add	r1, pc, #72	; (adr r1, 8001a68 <CalculateTimer3Period+0x108>)
 8001a1e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a22:	f7fe ff13 	bl	800084c <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f8db 	bl	8000be8 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	4618      	mov	r0, r3
 8001a36:	f7fe fd87 	bl	8000548 <__aeabi_f2d>
 8001a3a:	f04f 0200 	mov.w	r2, #0
 8001a3e:	4b0d      	ldr	r3, [pc, #52]	; (8001a74 <CalculateTimer3Period+0x114>)
 8001a40:	f7fe fc24 	bl	800028c <__adddf3>
 8001a44:	4602      	mov	r2, r0
 8001a46:	460b      	mov	r3, r1
 8001a48:	4610      	mov	r0, r2
 8001a4a:	4619      	mov	r1, r3
 8001a4c:	f7ff f884 	bl	8000b58 <__aeabi_d2iz>
 8001a50:	4603      	mov	r3, r0
	}
}
 8001a52:	4618      	mov	r0, r3
 8001a54:	3708      	adds	r7, #8
 8001a56:	46bd      	mov	sp, r7
 8001a58:	bdb0      	pop	{r4, r5, r7, pc}
 8001a5a:	bf00      	nop
 8001a5c:	f3af 8000 	nop.w
 8001a60:	00000000 	.word	0x00000000
 8001a64:	419c9c38 	.word	0x419c9c38
 8001a68:	00000000 	.word	0x00000000
 8001a6c:	416c9c38 	.word	0x416c9c38
 8001a70:	2000000a 	.word	0x2000000a
 8001a74:	3fe00000 	.word	0x3fe00000

08001a78 <PulseGenerating>:

void PulseGenerating(int DeltaPulse, uint8_t PulseCountPeriod)
{
 8001a78:	b580      	push	{r7, lr}
 8001a7a:	b082      	sub	sp, #8
 8001a7c:	af00      	add	r7, sp, #0
 8001a7e:	6078      	str	r0, [r7, #4]
 8001a80:	460b      	mov	r3, r1
 8001a82:	70fb      	strb	r3, [r7, #3]
	if (DeltaPulse == 0)
 8001a84:	687b      	ldr	r3, [r7, #4]
 8001a86:	2b00      	cmp	r3, #0
 8001a88:	d109      	bne.n	8001a9e <PulseGenerating+0x26>
	{
		HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 8001a8a:	482f      	ldr	r0, [pc, #188]	; (8001b48 <PulseGenerating+0xd0>)
 8001a8c:	f004 f8d0 	bl	8005c30 <HAL_TIM_Base_Stop_IT>
		PulseGenerationFlag = false;
 8001a90:	4b2e      	ldr	r3, [pc, #184]	; (8001b4c <PulseGenerating+0xd4>)
 8001a92:	2200      	movs	r2, #0
 8001a94:	701a      	strb	r2, [r3, #0]
		Timer3Count = 0;
 8001a96:	4b2e      	ldr	r3, [pc, #184]	; (8001b50 <PulseGenerating+0xd8>)
 8001a98:	2200      	movs	r2, #0
 8001a9a:	801a      	strh	r2, [r3, #0]
		return;
 8001a9c:	e051      	b.n	8001b42 <PulseGenerating+0xca>
	}

	TargetPosition = DeltaPulse; // Relative Position value
 8001a9e:	4a2d      	ldr	r2, [pc, #180]	; (8001b54 <PulseGenerating+0xdc>)
 8001aa0:	687b      	ldr	r3, [r7, #4]
 8001aa2:	6013      	str	r3, [r2, #0]

	if(StartSimulating)
 8001aa4:	4b2c      	ldr	r3, [pc, #176]	; (8001b58 <PulseGenerating+0xe0>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	2b00      	cmp	r3, #0
 8001aaa:	d00d      	beq.n	8001ac8 <PulseGenerating+0x50>
	{
		if (DeltaPulse < 0) // Move up
 8001aac:	687b      	ldr	r3, [r7, #4]
 8001aae:	2b00      	cmp	r3, #0
 8001ab0:	da03      	bge.n	8001aba <PulseGenerating+0x42>
		{
			Direction = false;
 8001ab2:	4b2a      	ldr	r3, [pc, #168]	; (8001b5c <PulseGenerating+0xe4>)
 8001ab4:	2200      	movs	r2, #0
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e036      	b.n	8001b28 <PulseGenerating+0xb0>
		}
		else
		{
			if (DeltaPulse > 0) // Move down
 8001aba:	687b      	ldr	r3, [r7, #4]
 8001abc:	2b00      	cmp	r3, #0
 8001abe:	dd33      	ble.n	8001b28 <PulseGenerating+0xb0>
			{
				Direction = true;
 8001ac0:	4b26      	ldr	r3, [pc, #152]	; (8001b5c <PulseGenerating+0xe4>)
 8001ac2:	2201      	movs	r2, #1
 8001ac4:	701a      	strb	r2, [r3, #0]
 8001ac6:	e02f      	b.n	8001b28 <PulseGenerating+0xb0>
			}
		}
	}
	else // Running
	{
		if (DeltaPulse < 0) // Move up
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	2b00      	cmp	r3, #0
 8001acc:	da13      	bge.n	8001af6 <PulseGenerating+0x7e>
		{
			if(Direction) //false = move up, true = move down
 8001ace:	4b23      	ldr	r3, [pc, #140]	; (8001b5c <PulseGenerating+0xe4>)
 8001ad0:	781b      	ldrb	r3, [r3, #0]
 8001ad2:	2b00      	cmp	r3, #0
 8001ad4:	d028      	beq.n	8001b28 <PulseGenerating+0xb0>
			{
				PRIsToggled = !PRIsToggled;
 8001ad6:	4b22      	ldr	r3, [pc, #136]	; (8001b60 <PulseGenerating+0xe8>)
 8001ad8:	781b      	ldrb	r3, [r3, #0]
 8001ada:	2b00      	cmp	r3, #0
 8001adc:	bf14      	ite	ne
 8001ade:	2301      	movne	r3, #1
 8001ae0:	2300      	moveq	r3, #0
 8001ae2:	b2db      	uxtb	r3, r3
 8001ae4:	f083 0301 	eor.w	r3, r3, #1
 8001ae8:	b2db      	uxtb	r3, r3
 8001aea:	f003 0301 	and.w	r3, r3, #1
 8001aee:	b2da      	uxtb	r2, r3
 8001af0:	4b1b      	ldr	r3, [pc, #108]	; (8001b60 <PulseGenerating+0xe8>)
 8001af2:	701a      	strb	r2, [r3, #0]
 8001af4:	e018      	b.n	8001b28 <PulseGenerating+0xb0>
			}
		}
		else
		{
			if (DeltaPulse > 0) // Move down
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	2b00      	cmp	r3, #0
 8001afa:	dd15      	ble.n	8001b28 <PulseGenerating+0xb0>
			{
				if(!Direction) //false = move up, true = move down
 8001afc:	4b17      	ldr	r3, [pc, #92]	; (8001b5c <PulseGenerating+0xe4>)
 8001afe:	781b      	ldrb	r3, [r3, #0]
 8001b00:	f083 0301 	eor.w	r3, r3, #1
 8001b04:	b2db      	uxtb	r3, r3
 8001b06:	2b00      	cmp	r3, #0
 8001b08:	d00e      	beq.n	8001b28 <PulseGenerating+0xb0>
				{
					PRIsToggled = !PRIsToggled;
 8001b0a:	4b15      	ldr	r3, [pc, #84]	; (8001b60 <PulseGenerating+0xe8>)
 8001b0c:	781b      	ldrb	r3, [r3, #0]
 8001b0e:	2b00      	cmp	r3, #0
 8001b10:	bf14      	ite	ne
 8001b12:	2301      	movne	r3, #1
 8001b14:	2300      	moveq	r3, #0
 8001b16:	b2db      	uxtb	r3, r3
 8001b18:	f083 0301 	eor.w	r3, r3, #1
 8001b1c:	b2db      	uxtb	r3, r3
 8001b1e:	f003 0301 	and.w	r3, r3, #1
 8001b22:	b2da      	uxtb	r2, r3
 8001b24:	4b0e      	ldr	r3, [pc, #56]	; (8001b60 <PulseGenerating+0xe8>)
 8001b26:	701a      	strb	r2, [r3, #0]
			}
		}
	}


	Timer3CountPeriod = PulseCountPeriod;
 8001b28:	78fb      	ldrb	r3, [r7, #3]
 8001b2a:	b29a      	uxth	r2, r3
 8001b2c:	4b0d      	ldr	r3, [pc, #52]	; (8001b64 <PulseGenerating+0xec>)
 8001b2e:	801a      	strh	r2, [r3, #0]
	IsReachTargetPosition = false;
 8001b30:	4b0d      	ldr	r3, [pc, #52]	; (8001b68 <PulseGenerating+0xf0>)
 8001b32:	2200      	movs	r2, #0
 8001b34:	701a      	strb	r2, [r3, #0]
	PulseGenerationFlag = true; //Enable Pulse Generation
 8001b36:	4b05      	ldr	r3, [pc, #20]	; (8001b4c <PulseGenerating+0xd4>)
 8001b38:	2201      	movs	r2, #1
 8001b3a:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3
 8001b3c:	4802      	ldr	r0, [pc, #8]	; (8001b48 <PulseGenerating+0xd0>)
 8001b3e:	f004 f807 	bl	8005b50 <HAL_TIM_Base_Start_IT>
}
 8001b42:	3708      	adds	r7, #8
 8001b44:	46bd      	mov	sp, r7
 8001b46:	bd80      	pop	{r7, pc}
 8001b48:	20000268 	.word	0x20000268
 8001b4c:	20000433 	.word	0x20000433
 8001b50:	2000620a 	.word	0x2000620a
 8001b54:	20006228 	.word	0x20006228
 8001b58:	20000430 	.word	0x20000430
 8001b5c:	20000431 	.word	0x20000431
 8001b60:	2000043b 	.word	0x2000043b
 8001b64:	20006208 	.word	0x20006208
 8001b68:	20000435 	.word	0x20000435
 8001b6c:	00000000 	.word	0x00000000

08001b70 <GoingToRefPosition>:

bool GoingToRefPosition(int RefDeltaPulse) // return true when finish going down, else return false;
{
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
	if (RefDeltaPulse == 0)
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	2b00      	cmp	r3, #0
 8001b7c:	d101      	bne.n	8001b82 <GoingToRefPosition+0x12>
		return true;
 8001b7e:	2301      	movs	r3, #1
 8001b80:	e1d4      	b.n	8001f2c <GoingToRefPosition+0x3bc>

	if (IsReachTargetPosition)
 8001b82:	4bad      	ldr	r3, [pc, #692]	; (8001e38 <GoingToRefPosition+0x2c8>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2b00      	cmp	r3, #0
 8001b8a:	d00a      	beq.n	8001ba2 <GoingToRefPosition+0x32>
	{
		Timer3CountPeriod = 0;
 8001b8c:	4bab      	ldr	r3, [pc, #684]	; (8001e3c <GoingToRefPosition+0x2cc>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	801a      	strh	r2, [r3, #0]
		SpeedCmd = 0;
 8001b92:	4bab      	ldr	r3, [pc, #684]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001b94:	f04f 0200 	mov.w	r2, #0
 8001b98:	601a      	str	r2, [r3, #0]
		StopPulseGenerating();
 8001b9a:	f7ff fe73 	bl	8001884 <StopPulseGenerating>
		return true;
 8001b9e:	2301      	movs	r3, #1
 8001ba0:	e1c4      	b.n	8001f2c <GoingToRefPosition+0x3bc>
	}

	if (MotorDriver) // FDA7000 Driver, PosCmd based
 8001ba2:	4ba8      	ldr	r3, [pc, #672]	; (8001e44 <GoingToRefPosition+0x2d4>)
 8001ba4:	781b      	ldrb	r3, [r3, #0]
 8001ba6:	2b00      	cmp	r3, #0
 8001ba8:	f000 80d0 	beq.w	8001d4c <GoingToRefPosition+0x1dc>
	{
		// Start reducing the speed
		if (abs(AbsoluteTargetMotorPosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/60))
 8001bac:	4ba6      	ldr	r3, [pc, #664]	; (8001e48 <GoingToRefPosition+0x2d8>)
 8001bae:	681a      	ldr	r2, [r3, #0]
 8001bb0:	4ba6      	ldr	r3, [pc, #664]	; (8001e4c <GoingToRefPosition+0x2dc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	1ad2      	subs	r2, r2, r3
 8001bb6:	4ba6      	ldr	r3, [pc, #664]	; (8001e50 <GoingToRefPosition+0x2e0>)
 8001bb8:	681b      	ldr	r3, [r3, #0]
 8001bba:	4413      	add	r3, r2
 8001bbc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001bc0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001bc4:	4ba3      	ldr	r3, [pc, #652]	; (8001e54 <GoingToRefPosition+0x2e4>)
 8001bc6:	881b      	ldrh	r3, [r3, #0]
 8001bc8:	4619      	mov	r1, r3
 8001bca:	4ba3      	ldr	r3, [pc, #652]	; (8001e58 <GoingToRefPosition+0x2e8>)
 8001bcc:	781b      	ldrb	r3, [r3, #0]
 8001bce:	fb01 f303 	mul.w	r3, r1, r3
 8001bd2:	49a2      	ldr	r1, [pc, #648]	; (8001e5c <GoingToRefPosition+0x2ec>)
 8001bd4:	fb81 0103 	smull	r0, r1, r1, r3
 8001bd8:	10c9      	asrs	r1, r1, #3
 8001bda:	17db      	asrs	r3, r3, #31
 8001bdc:	1acb      	subs	r3, r1, r3
 8001bde:	429a      	cmp	r2, r3
 8001be0:	dc53      	bgt.n	8001c8a <GoingToRefPosition+0x11a>
		{
			if (RefDeltaPulse > 0) // go down
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	2b00      	cmp	r3, #0
 8001be6:	dd1d      	ble.n	8001c24 <GoingToRefPosition+0xb4>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*9.549,20); //-EpsilonPulling means the spd is negative
 8001be8:	4b9d      	ldr	r3, [pc, #628]	; (8001e60 <GoingToRefPosition+0x2f0>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	eef1 7a67 	vneg.f32	s15, s15
 8001bf2:	ee17 3a90 	vmov	r3, s15
 8001bf6:	4618      	mov	r0, r3
 8001bf8:	f7fe fca6 	bl	8000548 <__aeabi_f2d>
 8001bfc:	a38c      	add	r3, pc, #560	; (adr r3, 8001e30 <GoingToRefPosition+0x2c0>)
 8001bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c02:	f7fe fcf9 	bl	80005f8 <__aeabi_dmul>
 8001c06:	4602      	mov	r2, r0
 8001c08:	460b      	mov	r3, r1
 8001c0a:	4610      	mov	r0, r2
 8001c0c:	4619      	mov	r1, r3
 8001c0e:	f7fe ffeb 	bl	8000be8 <__aeabi_d2f>
 8001c12:	4603      	mov	r3, r0
 8001c14:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001c18:	ee00 3a10 	vmov	s0, r3
 8001c1c:	4888      	ldr	r0, [pc, #544]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001c1e:	f7ff fdd3 	bl	80017c8 <LinearGeneration>
 8001c22:	e017      	b.n	8001c54 <GoingToRefPosition+0xe4>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*9.549,-20); //-EpsilonPulling means the spd is negative
 8001c24:	4b8e      	ldr	r3, [pc, #568]	; (8001e60 <GoingToRefPosition+0x2f0>)
 8001c26:	681b      	ldr	r3, [r3, #0]
 8001c28:	4618      	mov	r0, r3
 8001c2a:	f7fe fc8d 	bl	8000548 <__aeabi_f2d>
 8001c2e:	a380      	add	r3, pc, #512	; (adr r3, 8001e30 <GoingToRefPosition+0x2c0>)
 8001c30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c34:	f7fe fce0 	bl	80005f8 <__aeabi_dmul>
 8001c38:	4602      	mov	r2, r0
 8001c3a:	460b      	mov	r3, r1
 8001c3c:	4610      	mov	r0, r2
 8001c3e:	4619      	mov	r1, r3
 8001c40:	f7fe ffd2 	bl	8000be8 <__aeabi_d2f>
 8001c44:	4603      	mov	r3, r0
 8001c46:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001c4a:	ee00 3a10 	vmov	s0, r3
 8001c4e:	487c      	ldr	r0, [pc, #496]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001c50:	f7ff fdba 	bl	80017c8 <LinearGeneration>
			}
			if (SpeedCmd != 0)
 8001c54:	4b7a      	ldr	r3, [pc, #488]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001c56:	edd3 7a00 	vldr	s15, [r3]
 8001c5a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c5e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c62:	f000 8162 	beq.w	8001f2a <GoingToRefPosition+0x3ba>
			{
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001c66:	4b77      	ldr	r3, [pc, #476]	; (8001e44 <GoingToRefPosition+0x2d4>)
 8001c68:	781b      	ldrb	r3, [r3, #0]
 8001c6a:	4a75      	ldr	r2, [pc, #468]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001c6c:	edd2 7a00 	vldr	s15, [r2]
 8001c70:	eeb0 0a67 	vmov.f32	s0, s15
 8001c74:	4618      	mov	r0, r3
 8001c76:	f7ff fe73 	bl	8001960 <CalculateTimer3Period>
 8001c7a:	4603      	mov	r3, r0
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b6f      	ldr	r3, [pc, #444]	; (8001e3c <GoingToRefPosition+0x2cc>)
 8001c80:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001c82:	4b78      	ldr	r3, [pc, #480]	; (8001e64 <GoingToRefPosition+0x2f4>)
 8001c84:	2201      	movs	r2, #1
 8001c86:	701a      	strb	r2, [r3, #0]
 8001c88:	e14f      	b.n	8001f2a <GoingToRefPosition+0x3ba>
			}
		}
		else // Acclerate going
		{
			// Ramping the speed cmd
			if (RefDeltaPulse > 0) // go down
 8001c8a:	687b      	ldr	r3, [r7, #4]
 8001c8c:	2b00      	cmp	r3, #0
 8001c8e:	dd1e      	ble.n	8001cce <GoingToRefPosition+0x15e>
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*9.549,PullingSpeed);
 8001c90:	4b73      	ldr	r3, [pc, #460]	; (8001e60 <GoingToRefPosition+0x2f0>)
 8001c92:	681b      	ldr	r3, [r3, #0]
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc57 	bl	8000548 <__aeabi_f2d>
 8001c9a:	a365      	add	r3, pc, #404	; (adr r3, 8001e30 <GoingToRefPosition+0x2c0>)
 8001c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ca0:	f7fe fcaa 	bl	80005f8 <__aeabi_dmul>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ff9c 	bl	8000be8 <__aeabi_d2f>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	4b69      	ldr	r3, [pc, #420]	; (8001e58 <GoingToRefPosition+0x2e8>)
 8001cb4:	781b      	ldrb	r3, [r3, #0]
 8001cb6:	ee07 3a90 	vmov	s15, r3
 8001cba:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001cbe:	eef0 0a67 	vmov.f32	s1, s15
 8001cc2:	ee00 2a10 	vmov	s0, r2
 8001cc6:	485e      	ldr	r0, [pc, #376]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001cc8:	f7ff fd7e 	bl	80017c8 <LinearGeneration>
 8001ccc:	e023      	b.n	8001d16 <GoingToRefPosition+0x1a6>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*9.549,-PullingSpeed); //-EpsilonPulling means the spd is negative
 8001cce:	4b64      	ldr	r3, [pc, #400]	; (8001e60 <GoingToRefPosition+0x2f0>)
 8001cd0:	edd3 7a00 	vldr	s15, [r3]
 8001cd4:	eef1 7a67 	vneg.f32	s15, s15
 8001cd8:	ee17 3a90 	vmov	r3, s15
 8001cdc:	4618      	mov	r0, r3
 8001cde:	f7fe fc33 	bl	8000548 <__aeabi_f2d>
 8001ce2:	a353      	add	r3, pc, #332	; (adr r3, 8001e30 <GoingToRefPosition+0x2c0>)
 8001ce4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ce8:	f7fe fc86 	bl	80005f8 <__aeabi_dmul>
 8001cec:	4602      	mov	r2, r0
 8001cee:	460b      	mov	r3, r1
 8001cf0:	4610      	mov	r0, r2
 8001cf2:	4619      	mov	r1, r3
 8001cf4:	f7fe ff78 	bl	8000be8 <__aeabi_d2f>
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	4b57      	ldr	r3, [pc, #348]	; (8001e58 <GoingToRefPosition+0x2e8>)
 8001cfc:	781b      	ldrb	r3, [r3, #0]
 8001cfe:	425b      	negs	r3, r3
 8001d00:	ee07 3a90 	vmov	s15, r3
 8001d04:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d08:	eef0 0a67 	vmov.f32	s1, s15
 8001d0c:	ee00 2a10 	vmov	s0, r2
 8001d10:	484b      	ldr	r0, [pc, #300]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001d12:	f7ff fd59 	bl	80017c8 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001d16:	4b4a      	ldr	r3, [pc, #296]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001d18:	edd3 7a00 	vldr	s15, [r3]
 8001d1c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d24:	f000 8101 	beq.w	8001f2a <GoingToRefPosition+0x3ba>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001d28:	4b46      	ldr	r3, [pc, #280]	; (8001e44 <GoingToRefPosition+0x2d4>)
 8001d2a:	781b      	ldrb	r3, [r3, #0]
 8001d2c:	4a44      	ldr	r2, [pc, #272]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001d2e:	edd2 7a00 	vldr	s15, [r2]
 8001d32:	eeb0 0a67 	vmov.f32	s0, s15
 8001d36:	4618      	mov	r0, r3
 8001d38:	f7ff fe12 	bl	8001960 <CalculateTimer3Period>
 8001d3c:	4603      	mov	r3, r0
 8001d3e:	b29a      	uxth	r2, r3
 8001d40:	4b3e      	ldr	r3, [pc, #248]	; (8001e3c <GoingToRefPosition+0x2cc>)
 8001d42:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001d44:	4b47      	ldr	r3, [pc, #284]	; (8001e64 <GoingToRefPosition+0x2f4>)
 8001d46:	2201      	movs	r2, #1
 8001d48:	701a      	strb	r2, [r3, #0]
 8001d4a:	e0ee      	b.n	8001f2a <GoingToRefPosition+0x3ba>
			}
		}
	}
	else // ASDA A3, Actual Encoder based
	{
		if (abs(AbsoluteTargetMotorPosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/90)) // Start reducing the speed
 8001d4c:	4b3e      	ldr	r3, [pc, #248]	; (8001e48 <GoingToRefPosition+0x2d8>)
 8001d4e:	681a      	ldr	r2, [r3, #0]
 8001d50:	4b3e      	ldr	r3, [pc, #248]	; (8001e4c <GoingToRefPosition+0x2dc>)
 8001d52:	681b      	ldr	r3, [r3, #0]
 8001d54:	1ad2      	subs	r2, r2, r3
 8001d56:	4b3e      	ldr	r3, [pc, #248]	; (8001e50 <GoingToRefPosition+0x2e0>)
 8001d58:	681b      	ldr	r3, [r3, #0]
 8001d5a:	4413      	add	r3, r2
 8001d5c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001d60:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001d64:	4b3b      	ldr	r3, [pc, #236]	; (8001e54 <GoingToRefPosition+0x2e4>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	4619      	mov	r1, r3
 8001d6a:	4b3b      	ldr	r3, [pc, #236]	; (8001e58 <GoingToRefPosition+0x2e8>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	fb01 f303 	mul.w	r3, r1, r3
 8001d72:	493d      	ldr	r1, [pc, #244]	; (8001e68 <GoingToRefPosition+0x2f8>)
 8001d74:	fb81 0103 	smull	r0, r1, r1, r3
 8001d78:	4419      	add	r1, r3
 8001d7a:	1109      	asrs	r1, r1, #4
 8001d7c:	17db      	asrs	r3, r3, #31
 8001d7e:	1acb      	subs	r3, r1, r3
 8001d80:	429a      	cmp	r2, r3
 8001d82:	dc73      	bgt.n	8001e6c <GoingToRefPosition+0x2fc>
		{
			//RunningTime2 += SampleTime;
			if (RefDeltaPulse > 0) // go down
 8001d84:	687b      	ldr	r3, [r7, #4]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	dd1d      	ble.n	8001dc6 <GoingToRefPosition+0x256>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*9.549,20);
 8001d8a:	4b35      	ldr	r3, [pc, #212]	; (8001e60 <GoingToRefPosition+0x2f0>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eef1 7a67 	vneg.f32	s15, s15
 8001d94:	ee17 3a90 	vmov	r3, s15
 8001d98:	4618      	mov	r0, r3
 8001d9a:	f7fe fbd5 	bl	8000548 <__aeabi_f2d>
 8001d9e:	a324      	add	r3, pc, #144	; (adr r3, 8001e30 <GoingToRefPosition+0x2c0>)
 8001da0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001da4:	f7fe fc28 	bl	80005f8 <__aeabi_dmul>
 8001da8:	4602      	mov	r2, r0
 8001daa:	460b      	mov	r3, r1
 8001dac:	4610      	mov	r0, r2
 8001dae:	4619      	mov	r1, r3
 8001db0:	f7fe ff1a 	bl	8000be8 <__aeabi_d2f>
 8001db4:	4603      	mov	r3, r0
 8001db6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001dba:	ee00 3a10 	vmov	s0, r3
 8001dbe:	4820      	ldr	r0, [pc, #128]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001dc0:	f7ff fd02 	bl	80017c8 <LinearGeneration>
 8001dc4:	e017      	b.n	8001df6 <GoingToRefPosition+0x286>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*9.549,-20);
 8001dc6:	4b26      	ldr	r3, [pc, #152]	; (8001e60 <GoingToRefPosition+0x2f0>)
 8001dc8:	681b      	ldr	r3, [r3, #0]
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7fe fbbc 	bl	8000548 <__aeabi_f2d>
 8001dd0:	a317      	add	r3, pc, #92	; (adr r3, 8001e30 <GoingToRefPosition+0x2c0>)
 8001dd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001dd6:	f7fe fc0f 	bl	80005f8 <__aeabi_dmul>
 8001dda:	4602      	mov	r2, r0
 8001ddc:	460b      	mov	r3, r1
 8001dde:	4610      	mov	r0, r2
 8001de0:	4619      	mov	r1, r3
 8001de2:	f7fe ff01 	bl	8000be8 <__aeabi_d2f>
 8001de6:	4603      	mov	r3, r0
 8001de8:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001dec:	ee00 3a10 	vmov	s0, r3
 8001df0:	4813      	ldr	r0, [pc, #76]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001df2:	f7ff fce9 	bl	80017c8 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001df6:	4b12      	ldr	r3, [pc, #72]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001df8:	edd3 7a00 	vldr	s15, [r3]
 8001dfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001e00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e04:	f000 8091 	beq.w	8001f2a <GoingToRefPosition+0x3ba>
			{
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001e08:	4b0e      	ldr	r3, [pc, #56]	; (8001e44 <GoingToRefPosition+0x2d4>)
 8001e0a:	781b      	ldrb	r3, [r3, #0]
 8001e0c:	4a0c      	ldr	r2, [pc, #48]	; (8001e40 <GoingToRefPosition+0x2d0>)
 8001e0e:	edd2 7a00 	vldr	s15, [r2]
 8001e12:	eeb0 0a67 	vmov.f32	s0, s15
 8001e16:	4618      	mov	r0, r3
 8001e18:	f7ff fda2 	bl	8001960 <CalculateTimer3Period>
 8001e1c:	4603      	mov	r3, r0
 8001e1e:	b29a      	uxth	r2, r3
 8001e20:	4b06      	ldr	r3, [pc, #24]	; (8001e3c <GoingToRefPosition+0x2cc>)
 8001e22:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001e24:	4b0f      	ldr	r3, [pc, #60]	; (8001e64 <GoingToRefPosition+0x2f4>)
 8001e26:	2201      	movs	r2, #1
 8001e28:	701a      	strb	r2, [r3, #0]
 8001e2a:	e07e      	b.n	8001f2a <GoingToRefPosition+0x3ba>
 8001e2c:	f3af 8000 	nop.w
 8001e30:	872b020c 	.word	0x872b020c
 8001e34:	40231916 	.word	0x40231916
 8001e38:	20000435 	.word	0x20000435
 8001e3c:	20006208 	.word	0x20006208
 8001e40:	20006294 	.word	0x20006294
 8001e44:	20000003 	.word	0x20000003
 8001e48:	20006224 	.word	0x20006224
 8001e4c:	2000628c 	.word	0x2000628c
 8001e50:	20006220 	.word	0x20006220
 8001e54:	2000000a 	.word	0x2000000a
 8001e58:	20006215 	.word	0x20006215
 8001e5c:	66666667 	.word	0x66666667
 8001e60:	20006218 	.word	0x20006218
 8001e64:	20000433 	.word	0x20000433
 8001e68:	88888889 	.word	0x88888889
		}

		else
		{
			// Ramping the speed cmd
			if (RefDeltaPulse > 0) // go down
 8001e6c:	687b      	ldr	r3, [r7, #4]
 8001e6e:	2b00      	cmp	r3, #0
 8001e70:	dd1e      	ble.n	8001eb0 <GoingToRefPosition+0x340>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*9.549,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*9.549,PullingSpeed);
 8001e72:	4b33      	ldr	r3, [pc, #204]	; (8001f40 <GoingToRefPosition+0x3d0>)
 8001e74:	681b      	ldr	r3, [r3, #0]
 8001e76:	4618      	mov	r0, r3
 8001e78:	f7fe fb66 	bl	8000548 <__aeabi_f2d>
 8001e7c:	a32e      	add	r3, pc, #184	; (adr r3, 8001f38 <GoingToRefPosition+0x3c8>)
 8001e7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001e82:	f7fe fbb9 	bl	80005f8 <__aeabi_dmul>
 8001e86:	4602      	mov	r2, r0
 8001e88:	460b      	mov	r3, r1
 8001e8a:	4610      	mov	r0, r2
 8001e8c:	4619      	mov	r1, r3
 8001e8e:	f7fe feab 	bl	8000be8 <__aeabi_d2f>
 8001e92:	4602      	mov	r2, r0
 8001e94:	4b2b      	ldr	r3, [pc, #172]	; (8001f44 <GoingToRefPosition+0x3d4>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	ee07 3a90 	vmov	s15, r3
 8001e9c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001ea0:	eef0 0a67 	vmov.f32	s1, s15
 8001ea4:	ee00 2a10 	vmov	s0, r2
 8001ea8:	4827      	ldr	r0, [pc, #156]	; (8001f48 <GoingToRefPosition+0x3d8>)
 8001eaa:	f7ff fc8d 	bl	80017c8 <LinearGeneration>
 8001eae:	e023      	b.n	8001ef8 <GoingToRefPosition+0x388>
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*9.549,-PullingSpeed);
 8001eb0:	4b23      	ldr	r3, [pc, #140]	; (8001f40 <GoingToRefPosition+0x3d0>)
 8001eb2:	edd3 7a00 	vldr	s15, [r3]
 8001eb6:	eef1 7a67 	vneg.f32	s15, s15
 8001eba:	ee17 3a90 	vmov	r3, s15
 8001ebe:	4618      	mov	r0, r3
 8001ec0:	f7fe fb42 	bl	8000548 <__aeabi_f2d>
 8001ec4:	a31c      	add	r3, pc, #112	; (adr r3, 8001f38 <GoingToRefPosition+0x3c8>)
 8001ec6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001eca:	f7fe fb95 	bl	80005f8 <__aeabi_dmul>
 8001ece:	4602      	mov	r2, r0
 8001ed0:	460b      	mov	r3, r1
 8001ed2:	4610      	mov	r0, r2
 8001ed4:	4619      	mov	r1, r3
 8001ed6:	f7fe fe87 	bl	8000be8 <__aeabi_d2f>
 8001eda:	4602      	mov	r2, r0
 8001edc:	4b19      	ldr	r3, [pc, #100]	; (8001f44 <GoingToRefPosition+0x3d4>)
 8001ede:	781b      	ldrb	r3, [r3, #0]
 8001ee0:	425b      	negs	r3, r3
 8001ee2:	ee07 3a90 	vmov	s15, r3
 8001ee6:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001eea:	eef0 0a67 	vmov.f32	s1, s15
 8001eee:	ee00 2a10 	vmov	s0, r2
 8001ef2:	4815      	ldr	r0, [pc, #84]	; (8001f48 <GoingToRefPosition+0x3d8>)
 8001ef4:	f7ff fc68 	bl	80017c8 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001ef8:	4b13      	ldr	r3, [pc, #76]	; (8001f48 <GoingToRefPosition+0x3d8>)
 8001efa:	edd3 7a00 	vldr	s15, [r3]
 8001efe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f02:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f06:	d010      	beq.n	8001f2a <GoingToRefPosition+0x3ba>
			{
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001f08:	4b10      	ldr	r3, [pc, #64]	; (8001f4c <GoingToRefPosition+0x3dc>)
 8001f0a:	781b      	ldrb	r3, [r3, #0]
 8001f0c:	4a0e      	ldr	r2, [pc, #56]	; (8001f48 <GoingToRefPosition+0x3d8>)
 8001f0e:	edd2 7a00 	vldr	s15, [r2]
 8001f12:	eeb0 0a67 	vmov.f32	s0, s15
 8001f16:	4618      	mov	r0, r3
 8001f18:	f7ff fd22 	bl	8001960 <CalculateTimer3Period>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	b29a      	uxth	r2, r3
 8001f20:	4b0b      	ldr	r3, [pc, #44]	; (8001f50 <GoingToRefPosition+0x3e0>)
 8001f22:	801a      	strh	r2, [r3, #0]
				PulseGenerationFlag = true;
 8001f24:	4b0b      	ldr	r3, [pc, #44]	; (8001f54 <GoingToRefPosition+0x3e4>)
 8001f26:	2201      	movs	r2, #1
 8001f28:	701a      	strb	r2, [r3, #0]
			}
		}
	}
	return false;
 8001f2a:	2300      	movs	r3, #0
}
 8001f2c:	4618      	mov	r0, r3
 8001f2e:	3708      	adds	r7, #8
 8001f30:	46bd      	mov	sp, r7
 8001f32:	bd80      	pop	{r7, pc}
 8001f34:	f3af 8000 	nop.w
 8001f38:	872b020c 	.word	0x872b020c
 8001f3c:	40231916 	.word	0x40231916
 8001f40:	20006218 	.word	0x20006218
 8001f44:	20006215 	.word	0x20006215
 8001f48:	20006294 	.word	0x20006294
 8001f4c:	20000003 	.word	0x20000003
 8001f50:	20006208 	.word	0x20006208
 8001f54:	20000433 	.word	0x20000433

08001f58 <InitializeRunning>:


// Init variable for running
void InitializeRunning (uint8_t Mode)
{
 8001f58:	b580      	push	{r7, lr}
 8001f5a:	b082      	sub	sp, #8
 8001f5c:	af00      	add	r7, sp, #0
 8001f5e:	4603      	mov	r3, r0
 8001f60:	71fb      	strb	r3, [r7, #7]
	switch (Mode)
 8001f62:	79fb      	ldrb	r3, [r7, #7]
 8001f64:	2b03      	cmp	r3, #3
 8001f66:	d01f      	beq.n	8001fa8 <InitializeRunning+0x50>
 8001f68:	2b03      	cmp	r3, #3
 8001f6a:	dc2e      	bgt.n	8001fca <InitializeRunning+0x72>
 8001f6c:	2b01      	cmp	r3, #1
 8001f6e:	d002      	beq.n	8001f76 <InitializeRunning+0x1e>
 8001f70:	2b02      	cmp	r3, #2
 8001f72:	d008      	beq.n	8001f86 <InitializeRunning+0x2e>
			break;
		case 3: // Pull and Drop, go to bottom position first
			TargetPosition = PullingBotomPulseCmdPosition*EgearRatio - MotorEncPulse + OriginPulse;
			break;
		default:
			break;
 8001f74:	e029      	b.n	8001fca <InitializeRunning+0x72>
			TargetPosition = 0 - MotorEncPulse + OriginPulse; // 0 means home position;
 8001f76:	4b32      	ldr	r3, [pc, #200]	; (8002040 <InitializeRunning+0xe8>)
 8001f78:	681a      	ldr	r2, [r3, #0]
 8001f7a:	4b32      	ldr	r3, [pc, #200]	; (8002044 <InitializeRunning+0xec>)
 8001f7c:	681b      	ldr	r3, [r3, #0]
 8001f7e:	1ad3      	subs	r3, r2, r3
 8001f80:	4a31      	ldr	r2, [pc, #196]	; (8002048 <InitializeRunning+0xf0>)
 8001f82:	6013      	str	r3, [r2, #0]
			break;
 8001f84:	e022      	b.n	8001fcc <InitializeRunning+0x74>
			TargetPosition = PullingBotomPulseCmdPosition*EgearRatio - MotorEncPulse + OriginPulse;
 8001f86:	4b31      	ldr	r3, [pc, #196]	; (800204c <InitializeRunning+0xf4>)
 8001f88:	781b      	ldrb	r3, [r3, #0]
 8001f8a:	461a      	mov	r2, r3
 8001f8c:	4b30      	ldr	r3, [pc, #192]	; (8002050 <InitializeRunning+0xf8>)
 8001f8e:	681b      	ldr	r3, [r3, #0]
 8001f90:	fb02 f303 	mul.w	r3, r2, r3
 8001f94:	4a2b      	ldr	r2, [pc, #172]	; (8002044 <InitializeRunning+0xec>)
 8001f96:	6812      	ldr	r2, [r2, #0]
 8001f98:	1a9b      	subs	r3, r3, r2
 8001f9a:	4a29      	ldr	r2, [pc, #164]	; (8002040 <InitializeRunning+0xe8>)
 8001f9c:	6812      	ldr	r2, [r2, #0]
 8001f9e:	4413      	add	r3, r2
 8001fa0:	461a      	mov	r2, r3
 8001fa2:	4b29      	ldr	r3, [pc, #164]	; (8002048 <InitializeRunning+0xf0>)
 8001fa4:	601a      	str	r2, [r3, #0]
			break;
 8001fa6:	e011      	b.n	8001fcc <InitializeRunning+0x74>
			TargetPosition = PullingBotomPulseCmdPosition*EgearRatio - MotorEncPulse + OriginPulse;
 8001fa8:	4b28      	ldr	r3, [pc, #160]	; (800204c <InitializeRunning+0xf4>)
 8001faa:	781b      	ldrb	r3, [r3, #0]
 8001fac:	461a      	mov	r2, r3
 8001fae:	4b28      	ldr	r3, [pc, #160]	; (8002050 <InitializeRunning+0xf8>)
 8001fb0:	681b      	ldr	r3, [r3, #0]
 8001fb2:	fb02 f303 	mul.w	r3, r2, r3
 8001fb6:	4a23      	ldr	r2, [pc, #140]	; (8002044 <InitializeRunning+0xec>)
 8001fb8:	6812      	ldr	r2, [r2, #0]
 8001fba:	1a9b      	subs	r3, r3, r2
 8001fbc:	4a20      	ldr	r2, [pc, #128]	; (8002040 <InitializeRunning+0xe8>)
 8001fbe:	6812      	ldr	r2, [r2, #0]
 8001fc0:	4413      	add	r3, r2
 8001fc2:	461a      	mov	r2, r3
 8001fc4:	4b20      	ldr	r3, [pc, #128]	; (8002048 <InitializeRunning+0xf0>)
 8001fc6:	601a      	str	r2, [r3, #0]
			break;
 8001fc8:	e000      	b.n	8001fcc <InitializeRunning+0x74>
			break;
 8001fca:	bf00      	nop
	}

	if (TargetPosition > 0) // Go down
 8001fcc:	4b1e      	ldr	r3, [pc, #120]	; (8002048 <InitializeRunning+0xf0>)
 8001fce:	681b      	ldr	r3, [r3, #0]
 8001fd0:	2b00      	cmp	r3, #0
 8001fd2:	dd02      	ble.n	8001fda <InitializeRunning+0x82>
	{
		InitPulseGenerating(false);
 8001fd4:	2000      	movs	r0, #0
 8001fd6:	f7ff fc73 	bl	80018c0 <InitPulseGenerating>
	}
	if (TargetPosition < 0) // Go up
 8001fda:	4b1b      	ldr	r3, [pc, #108]	; (8002048 <InitializeRunning+0xf0>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	2b00      	cmp	r3, #0
 8001fe0:	da02      	bge.n	8001fe8 <InitializeRunning+0x90>
	{
		InitPulseGenerating(true);
 8001fe2:	2001      	movs	r0, #1
 8001fe4:	f7ff fc6c 	bl	80018c0 <InitPulseGenerating>
	}
	AbsoluteTargetMotorPosition = TargetPosition + MotorEncPulse - OriginPulse;
 8001fe8:	4b17      	ldr	r3, [pc, #92]	; (8002048 <InitializeRunning+0xf0>)
 8001fea:	681a      	ldr	r2, [r3, #0]
 8001fec:	4b15      	ldr	r3, [pc, #84]	; (8002044 <InitializeRunning+0xec>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	441a      	add	r2, r3
 8001ff2:	4b13      	ldr	r3, [pc, #76]	; (8002040 <InitializeRunning+0xe8>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	1ad3      	subs	r3, r2, r3
 8001ff8:	4a16      	ldr	r2, [pc, #88]	; (8002054 <InitializeRunning+0xfc>)
 8001ffa:	6013      	str	r3, [r2, #0]
	TargetPosition = TargetPosition/EgearRatio;
 8001ffc:	4b12      	ldr	r3, [pc, #72]	; (8002048 <InitializeRunning+0xf0>)
 8001ffe:	681b      	ldr	r3, [r3, #0]
 8002000:	4a12      	ldr	r2, [pc, #72]	; (800204c <InitializeRunning+0xf4>)
 8002002:	7812      	ldrb	r2, [r2, #0]
 8002004:	fb93 f3f2 	sdiv	r3, r3, r2
 8002008:	4a0f      	ldr	r2, [pc, #60]	; (8002048 <InitializeRunning+0xf0>)
 800200a:	6013      	str	r3, [r2, #0]
	// TargetPosition is the number of pulses generated from the controller
	// the actual pulses received by the driver is gained by the EgearRatio.

	IsGoingToInitPoint = true; // go to init poit first
 800200c:	4b12      	ldr	r3, [pc, #72]	; (8002058 <InitializeRunning+0x100>)
 800200e:	2201      	movs	r2, #1
 8002010:	701a      	strb	r2, [r3, #0]
	StartRunning = true; //
 8002012:	4b12      	ldr	r3, [pc, #72]	; (800205c <InitializeRunning+0x104>)
 8002014:	2201      	movs	r2, #1
 8002016:	701a      	strb	r2, [r3, #0]
	StartMainRun = false;
 8002018:	4b11      	ldr	r3, [pc, #68]	; (8002060 <InitializeRunning+0x108>)
 800201a:	2200      	movs	r2, #0
 800201c:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 800201e:	4b11      	ldr	r3, [pc, #68]	; (8002064 <InitializeRunning+0x10c>)
 8002020:	2200      	movs	r2, #0
 8002022:	701a      	strb	r2, [r3, #0]

	Timer3CountPeriod = 0;
 8002024:	4b10      	ldr	r3, [pc, #64]	; (8002068 <InitializeRunning+0x110>)
 8002026:	2200      	movs	r2, #0
 8002028:	801a      	strh	r2, [r3, #0]
	PositionPulseCmd = 0;
 800202a:	4b10      	ldr	r3, [pc, #64]	; (800206c <InitializeRunning+0x114>)
 800202c:	2200      	movs	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
	Index = 0;
 8002030:	4b0f      	ldr	r3, [pc, #60]	; (8002070 <InitializeRunning+0x118>)
 8002032:	2200      	movs	r2, #0
 8002034:	801a      	strh	r2, [r3, #0]
}
 8002036:	bf00      	nop
 8002038:	3708      	adds	r7, #8
 800203a:	46bd      	mov	sp, r7
 800203c:	bd80      	pop	{r7, pc}
 800203e:	bf00      	nop
 8002040:	20006220 	.word	0x20006220
 8002044:	2000628c 	.word	0x2000628c
 8002048:	20006228 	.word	0x20006228
 800204c:	20000006 	.word	0x20000006
 8002050:	2000621c 	.word	0x2000621c
 8002054:	20006224 	.word	0x20006224
 8002058:	2000043d 	.word	0x2000043d
 800205c:	2000042e 	.word	0x2000042e
 8002060:	2000042f 	.word	0x2000042f
 8002064:	20000430 	.word	0x20000430
 8002068:	20006208 	.word	0x20006208
 800206c:	20006230 	.word	0x20006230
 8002070:	2000620e 	.word	0x2000620e

08002074 <StopExperiment>:

void StopExperiment ()
{
 8002074:	b580      	push	{r7, lr}
 8002076:	af00      	add	r7, sp, #0
	StopPulseGenerating(); // Stop pulse generation
 8002078:	f7ff fc04 	bl	8001884 <StopPulseGenerating>
	IsReachTargetPosition = false;
 800207c:	4b13      	ldr	r3, [pc, #76]	; (80020cc <StopExperiment+0x58>)
 800207e:	2200      	movs	r2, #0
 8002080:	701a      	strb	r2, [r3, #0]
	IsPulseCheck = false;
 8002082:	4b13      	ldr	r3, [pc, #76]	; (80020d0 <StopExperiment+0x5c>)
 8002084:	2200      	movs	r2, #0
 8002086:	701a      	strb	r2, [r3, #0]

	// Reset all the flag and state
	StartRunning = false;
 8002088:	4b12      	ldr	r3, [pc, #72]	; (80020d4 <StopExperiment+0x60>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 800208e:	4b12      	ldr	r3, [pc, #72]	; (80020d8 <StopExperiment+0x64>)
 8002090:	2200      	movs	r2, #0
 8002092:	701a      	strb	r2, [r3, #0]
	StartMainRun = false;
 8002094:	4b11      	ldr	r3, [pc, #68]	; (80020dc <StopExperiment+0x68>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
	CompleteDropping = false;
 800209a:	4b11      	ldr	r3, [pc, #68]	; (80020e0 <StopExperiment+0x6c>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
	CompletePulling = false;
 80020a0:	4b10      	ldr	r3, [pc, #64]	; (80020e4 <StopExperiment+0x70>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]

	TargetPosition = 0;
 80020a6:	4b10      	ldr	r3, [pc, #64]	; (80020e8 <StopExperiment+0x74>)
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
	Index = 0;
 80020ac:	4b0f      	ldr	r3, [pc, #60]	; (80020ec <StopExperiment+0x78>)
 80020ae:	2200      	movs	r2, #0
 80020b0:	801a      	strh	r2, [r3, #0]
	Timer3CountPeriod = 0;
 80020b2:	4b0f      	ldr	r3, [pc, #60]	; (80020f0 <StopExperiment+0x7c>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	801a      	strh	r2, [r3, #0]
	PositionPulseCmd = 0;
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <StopExperiment+0x80>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	601a      	str	r2, [r3, #0]
	SpeedCmd = 0;
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <StopExperiment+0x84>)
 80020c0:	f04f 0200 	mov.w	r2, #0
 80020c4:	601a      	str	r2, [r3, #0]
}
 80020c6:	bf00      	nop
 80020c8:	bd80      	pop	{r7, pc}
 80020ca:	bf00      	nop
 80020cc:	20000435 	.word	0x20000435
 80020d0:	2000043c 	.word	0x2000043c
 80020d4:	2000042e 	.word	0x2000042e
 80020d8:	20000430 	.word	0x20000430
 80020dc:	2000042f 	.word	0x2000042f
 80020e0:	20000436 	.word	0x20000436
 80020e4:	20000437 	.word	0x20000437
 80020e8:	20006228 	.word	0x20006228
 80020ec:	2000620e 	.word	0x2000620e
 80020f0:	20006208 	.word	0x20006208
 80020f4:	20006230 	.word	0x20006230
 80020f8:	20006294 	.word	0x20006294
 80020fc:	00000000 	.word	0x00000000

08002100 <CalculateRunningSpec>:
void CalculateRunningSpec () // Calculate running parameters
{
 8002100:	b580      	push	{r7, lr}
 8002102:	af00      	add	r7, sp, #0
	GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8002104:	4b10      	ldr	r3, [pc, #64]	; (8002148 <CalculateRunningSpec+0x48>)
 8002106:	781b      	ldrb	r3, [r3, #0]
 8002108:	4618      	mov	r0, r3
 800210a:	f7fe fa0b 	bl	8000524 <__aeabi_i2d>
 800210e:	a30c      	add	r3, pc, #48	; (adr r3, 8002140 <CalculateRunningSpec+0x40>)
 8002110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002114:	f7fe fa70 	bl	80005f8 <__aeabi_dmul>
 8002118:	4602      	mov	r2, r0
 800211a:	460b      	mov	r3, r1
 800211c:	4610      	mov	r0, r2
 800211e:	4619      	mov	r1, r3
 8002120:	f04f 0200 	mov.w	r2, #0
 8002124:	4b09      	ldr	r3, [pc, #36]	; (800214c <CalculateRunningSpec+0x4c>)
 8002126:	f7fe fb91 	bl	800084c <__aeabi_ddiv>
 800212a:	4602      	mov	r2, r0
 800212c:	460b      	mov	r3, r1
 800212e:	4610      	mov	r0, r2
 8002130:	4619      	mov	r1, r3
 8002132:	f7fe fd59 	bl	8000be8 <__aeabi_d2f>
 8002136:	4603      	mov	r3, r0
 8002138:	4a05      	ldr	r2, [pc, #20]	; (8002150 <CalculateRunningSpec+0x50>)
 800213a:	6013      	str	r3, [r2, #0]
}
 800213c:	bf00      	nop
 800213e:	bd80      	pop	{r7, pc}
 8002140:	9999999a 	.word	0x9999999a
 8002144:	3fb99999 	.word	0x3fb99999
 8002148:	20006215 	.word	0x20006215
 800214c:	40080000 	.word	0x40080000
 8002150:	20006218 	.word	0x20006218

08002154 <InitParams>:


void InitParams ()
{
 8002154:	b580      	push	{r7, lr}
 8002156:	b082      	sub	sp, #8
 8002158:	af00      	add	r7, sp, #0
	// Load Parameters from the memory
	LoadSavedParam(MemoryAddress,Params);
 800215a:	4917      	ldr	r1, [pc, #92]	; (80021b8 <InitParams+0x64>)
 800215c:	4817      	ldr	r0, [pc, #92]	; (80021bc <InitParams+0x68>)
 800215e:	f7ff fa9f 	bl	80016a0 <LoadSavedParam>

	// General Params
	DrumRadius = Params[0];
 8002162:	4b15      	ldr	r3, [pc, #84]	; (80021b8 <InitParams+0x64>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4a16      	ldr	r2, [pc, #88]	; (80021c0 <InitParams+0x6c>)
 8002168:	6013      	str	r3, [r2, #0]
	PullingSpeed = Params[1];
 800216a:	4b13      	ldr	r3, [pc, #76]	; (80021b8 <InitParams+0x64>)
 800216c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002170:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002174:	edc7 7a01 	vstr	s15, [r7, #4]
 8002178:	793b      	ldrb	r3, [r7, #4]
 800217a:	b2da      	uxtb	r2, r3
 800217c:	4b11      	ldr	r3, [pc, #68]	; (80021c4 <InitParams+0x70>)
 800217e:	701a      	strb	r2, [r3, #0]
	StoppingTime = Params[2];
 8002180:	4b0d      	ldr	r3, [pc, #52]	; (80021b8 <InitParams+0x64>)
 8002182:	edd3 7a02 	vldr	s15, [r3, #8]
 8002186:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800218a:	ee17 3a90 	vmov	r3, s15
 800218e:	b29a      	uxth	r2, r3
 8002190:	4b0d      	ldr	r3, [pc, #52]	; (80021c8 <InitParams+0x74>)
 8002192:	801a      	strh	r2, [r3, #0]
	SampleTime = Params[3];
 8002194:	4b08      	ldr	r3, [pc, #32]	; (80021b8 <InitParams+0x64>)
 8002196:	edd3 7a03 	vldr	s15, [r3, #12]
 800219a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800219e:	edc7 7a01 	vstr	s15, [r7, #4]
 80021a2:	793b      	ldrb	r3, [r7, #4]
 80021a4:	b2da      	uxtb	r2, r3
 80021a6:	4b09      	ldr	r3, [pc, #36]	; (80021cc <InitParams+0x78>)
 80021a8:	701a      	strb	r2, [r3, #0]

	//DistCoeff = Params[13];

	CalculateRunningSpec ();
 80021aa:	f7ff ffa9 	bl	8002100 <CalculateRunningSpec>
}
 80021ae:	bf00      	nop
 80021b0:	3708      	adds	r7, #8
 80021b2:	46bd      	mov	sp, r7
 80021b4:	bd80      	pop	{r7, pc}
 80021b6:	bf00      	nop
 80021b8:	20006238 	.word	0x20006238
 80021bc:	08040000 	.word	0x08040000
 80021c0:	20006210 	.word	0x20006210
 80021c4:	20006215 	.word	0x20006215
 80021c8:	20000008 	.word	0x20000008
 80021cc:	20006214 	.word	0x20006214

080021d0 <InitSimulating>:
void InitSimulating()
{
 80021d0:	b480      	push	{r7}
 80021d2:	af00      	add	r7, sp, #0
	StartSimulating = true;
 80021d4:	4b09      	ldr	r3, [pc, #36]	; (80021fc <InitSimulating+0x2c>)
 80021d6:	2201      	movs	r2, #1
 80021d8:	701a      	strb	r2, [r3, #0]
	PulseSimuCount = 0;
 80021da:	4b09      	ldr	r3, [pc, #36]	; (8002200 <InitSimulating+0x30>)
 80021dc:	2200      	movs	r2, #0
 80021de:	601a      	str	r2, [r3, #0]
	TargetPosition = 0;
 80021e0:	4b08      	ldr	r3, [pc, #32]	; (8002204 <InitSimulating+0x34>)
 80021e2:	2200      	movs	r2, #0
 80021e4:	601a      	str	r2, [r3, #0]
	Timer3CountPeriod = 0;
 80021e6:	4b08      	ldr	r3, [pc, #32]	; (8002208 <InitSimulating+0x38>)
 80021e8:	2200      	movs	r2, #0
 80021ea:	801a      	strh	r2, [r3, #0]
	//HAL_TIM_Base_Start_IT(&htim3);
	Index = 0;
 80021ec:	4b07      	ldr	r3, [pc, #28]	; (800220c <InitSimulating+0x3c>)
 80021ee:	2200      	movs	r2, #0
 80021f0:	801a      	strh	r2, [r3, #0]
}
 80021f2:	bf00      	nop
 80021f4:	46bd      	mov	sp, r7
 80021f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021fa:	4770      	bx	lr
 80021fc:	20000430 	.word	0x20000430
 8002200:	2000622c 	.word	0x2000622c
 8002204:	20006228 	.word	0x20006228
 8002208:	20006208 	.word	0x20006208
 800220c:	2000620e 	.word	0x2000620e

08002210 <StopSimulating>:
void StopSimulating()
{
 8002210:	b580      	push	{r7, lr}
 8002212:	af00      	add	r7, sp, #0
	IsReachTargetPosition = false;
 8002214:	4b0a      	ldr	r3, [pc, #40]	; (8002240 <StopSimulating+0x30>)
 8002216:	2200      	movs	r2, #0
 8002218:	701a      	strb	r2, [r3, #0]

	StartSimulating = false;
 800221a:	4b0a      	ldr	r3, [pc, #40]	; (8002244 <StopSimulating+0x34>)
 800221c:	2200      	movs	r2, #0
 800221e:	701a      	strb	r2, [r3, #0]
	StopPulseGenerating(); // Stop pulse generation
 8002220:	f7ff fb30 	bl	8001884 <StopPulseGenerating>

	Index = 0;
 8002224:	4b08      	ldr	r3, [pc, #32]	; (8002248 <StopSimulating+0x38>)
 8002226:	2200      	movs	r2, #0
 8002228:	801a      	strh	r2, [r3, #0]
	Timer3CountPeriod = 0;
 800222a:	4b08      	ldr	r3, [pc, #32]	; (800224c <StopSimulating+0x3c>)
 800222c:	2200      	movs	r2, #0
 800222e:	801a      	strh	r2, [r3, #0]
	PulseSimuCount = 0; // Reset PulseCmd
 8002230:	4b07      	ldr	r3, [pc, #28]	; (8002250 <StopSimulating+0x40>)
 8002232:	2200      	movs	r2, #0
 8002234:	601a      	str	r2, [r3, #0]
	PositionSimCmd = 0;
 8002236:	4b07      	ldr	r3, [pc, #28]	; (8002254 <StopSimulating+0x44>)
 8002238:	2200      	movs	r2, #0
 800223a:	601a      	str	r2, [r3, #0]
}
 800223c:	bf00      	nop
 800223e:	bd80      	pop	{r7, pc}
 8002240:	20000435 	.word	0x20000435
 8002244:	20000430 	.word	0x20000430
 8002248:	2000620e 	.word	0x2000620e
 800224c:	20006208 	.word	0x20006208
 8002250:	2000622c 	.word	0x2000622c
 8002254:	20006234 	.word	0x20006234

08002258 <Simulating>:

void Simulating()
{
 8002258:	b580      	push	{r7, lr}
 800225a:	af00      	add	r7, sp, #0
	if (Index >= DropCurveDataIndex)
 800225c:	4b19      	ldr	r3, [pc, #100]	; (80022c4 <Simulating+0x6c>)
 800225e:	881a      	ldrh	r2, [r3, #0]
 8002260:	4b19      	ldr	r3, [pc, #100]	; (80022c8 <Simulating+0x70>)
 8002262:	881b      	ldrh	r3, [r3, #0]
 8002264:	429a      	cmp	r2, r3
 8002266:	d305      	bcc.n	8002274 <Simulating+0x1c>
	{
		StopSimulating();
 8002268:	f7ff ffd2 	bl	8002210 <StopSimulating>
		Initialized = true;
 800226c:	4b17      	ldr	r3, [pc, #92]	; (80022cc <Simulating+0x74>)
 800226e:	2201      	movs	r2, #1
 8002270:	701a      	strb	r2, [r3, #0]
		return;
 8002272:	e026      	b.n	80022c2 <Simulating+0x6a>
	}
	if(DropRefPosDeltaPulse[Index] > 0) // Move down
 8002274:	4b13      	ldr	r3, [pc, #76]	; (80022c4 <Simulating+0x6c>)
 8002276:	881b      	ldrh	r3, [r3, #0]
 8002278:	461a      	mov	r2, r3
 800227a:	4b15      	ldr	r3, [pc, #84]	; (80022d0 <Simulating+0x78>)
 800227c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002280:	2b00      	cmp	r3, #0
 8002282:	dd03      	ble.n	800228c <Simulating+0x34>
	{
		 Direction = true;
 8002284:	4b13      	ldr	r3, [pc, #76]	; (80022d4 <Simulating+0x7c>)
 8002286:	2201      	movs	r2, #1
 8002288:	701a      	strb	r2, [r3, #0]
 800228a:	e00a      	b.n	80022a2 <Simulating+0x4a>
	}
	else
	{
		if(DropRefPosDeltaPulse[Index] > 0) // Move up
 800228c:	4b0d      	ldr	r3, [pc, #52]	; (80022c4 <Simulating+0x6c>)
 800228e:	881b      	ldrh	r3, [r3, #0]
 8002290:	461a      	mov	r2, r3
 8002292:	4b0f      	ldr	r3, [pc, #60]	; (80022d0 <Simulating+0x78>)
 8002294:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002298:	2b00      	cmp	r3, #0
 800229a:	dd02      	ble.n	80022a2 <Simulating+0x4a>
		{
			 Direction = false;
 800229c:	4b0d      	ldr	r3, [pc, #52]	; (80022d4 <Simulating+0x7c>)
 800229e:	2200      	movs	r2, #0
 80022a0:	701a      	strb	r2, [r3, #0]
		}
	}
	PulseGenerating(DropRefPosDeltaPulse[Index], 4);
 80022a2:	4b08      	ldr	r3, [pc, #32]	; (80022c4 <Simulating+0x6c>)
 80022a4:	881b      	ldrh	r3, [r3, #0]
 80022a6:	461a      	mov	r2, r3
 80022a8:	4b09      	ldr	r3, [pc, #36]	; (80022d0 <Simulating+0x78>)
 80022aa:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80022ae:	2104      	movs	r1, #4
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7ff fbe1 	bl	8001a78 <PulseGenerating>
	// 4 is a fixed value to ensure generating enough pulse during the SampleTime
	// The smaller value, the faster of the pulse generating
	Index++;
 80022b6:	4b03      	ldr	r3, [pc, #12]	; (80022c4 <Simulating+0x6c>)
 80022b8:	881b      	ldrh	r3, [r3, #0]
 80022ba:	3301      	adds	r3, #1
 80022bc:	b29a      	uxth	r2, r3
 80022be:	4b01      	ldr	r3, [pc, #4]	; (80022c4 <Simulating+0x6c>)
 80022c0:	801a      	strh	r2, [r3, #0]
}
 80022c2:	bd80      	pop	{r7, pc}
 80022c4:	2000620e 	.word	0x2000620e
 80022c8:	2000043e 	.word	0x2000043e
 80022cc:	20000439 	.word	0x20000439
 80022d0:	20000440 	.word	0x20000440
 80022d4:	20000431 	.word	0x20000431

080022d8 <RunningExperiment>:

void RunningExperiment()
{
 80022d8:	b580      	push	{r7, lr}
 80022da:	af00      	add	r7, sp, #0
	if (IsGoingToInitPoint)
 80022dc:	4b3b      	ldr	r3, [pc, #236]	; (80023cc <RunningExperiment+0xf4>)
 80022de:	781b      	ldrb	r3, [r3, #0]
 80022e0:	b2db      	uxtb	r3, r3
 80022e2:	2b00      	cmp	r3, #0
 80022e4:	d039      	beq.n	800235a <RunningExperiment+0x82>
	{
		if (GoingToRefPosition(TargetPosition))
 80022e6:	4b3a      	ldr	r3, [pc, #232]	; (80023d0 <RunningExperiment+0xf8>)
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	4618      	mov	r0, r3
 80022ec:	f7ff fc40 	bl	8001b70 <GoingToRefPosition>
 80022f0:	4603      	mov	r3, r0
 80022f2:	2b00      	cmp	r3, #0
 80022f4:	d065      	beq.n	80023c2 <RunningExperiment+0xea>
		{
			if(WaitingMiliSecond(StoppingTime))
 80022f6:	4b37      	ldr	r3, [pc, #220]	; (80023d4 <RunningExperiment+0xfc>)
 80022f8:	881b      	ldrh	r3, [r3, #0]
 80022fa:	4618      	mov	r0, r3
 80022fc:	f7ff fb0a 	bl	8001914 <WaitingMiliSecond>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d05f      	beq.n	80023c6 <RunningExperiment+0xee>
			{
				IsGoingToInitPoint = false;
 8002306:	4b31      	ldr	r3, [pc, #196]	; (80023cc <RunningExperiment+0xf4>)
 8002308:	2200      	movs	r2, #0
 800230a:	701a      	strb	r2, [r3, #0]
				StartMainRun = true;
 800230c:	4b32      	ldr	r3, [pc, #200]	; (80023d8 <RunningExperiment+0x100>)
 800230e:	2201      	movs	r2, #1
 8002310:	701a      	strb	r2, [r3, #0]
				PositionPulseCmd = 0;
 8002312:	4b32      	ldr	r3, [pc, #200]	; (80023dc <RunningExperiment+0x104>)
 8002314:	2200      	movs	r2, #0
 8002316:	601a      	str	r2, [r3, #0]
				TargetPosition = 0;
 8002318:	4b2d      	ldr	r3, [pc, #180]	; (80023d0 <RunningExperiment+0xf8>)
 800231a:	2200      	movs	r2, #0
 800231c:	601a      	str	r2, [r3, #0]
				switch (ExperimentMode)
 800231e:	4b30      	ldr	r3, [pc, #192]	; (80023e0 <RunningExperiment+0x108>)
 8002320:	781b      	ldrb	r3, [r3, #0]
 8002322:	2b03      	cmp	r3, #3
 8002324:	d011      	beq.n	800234a <RunningExperiment+0x72>
 8002326:	2b03      	cmp	r3, #3
 8002328:	dc16      	bgt.n	8002358 <RunningExperiment+0x80>
 800232a:	2b01      	cmp	r3, #1
 800232c:	d002      	beq.n	8002334 <RunningExperiment+0x5c>
 800232e:	2b02      	cmp	r3, #2
 8002330:	d004      	beq.n	800233c <RunningExperiment+0x64>
					case 3: //Pull and Drop
						PRIsToggled = true; // go up
						Direction = false; //up
						break;
					default:
						break;
 8002332:	e011      	b.n	8002358 <RunningExperiment+0x80>
						PRIsToggled = false; // go down
 8002334:	4b2b      	ldr	r3, [pc, #172]	; (80023e4 <RunningExperiment+0x10c>)
 8002336:	2200      	movs	r2, #0
 8002338:	701a      	strb	r2, [r3, #0]
						break;
 800233a:	e00e      	b.n	800235a <RunningExperiment+0x82>
						PRIsToggled = true; // go up
 800233c:	4b29      	ldr	r3, [pc, #164]	; (80023e4 <RunningExperiment+0x10c>)
 800233e:	2201      	movs	r2, #1
 8002340:	701a      	strb	r2, [r3, #0]
						Direction = false; //up
 8002342:	4b29      	ldr	r3, [pc, #164]	; (80023e8 <RunningExperiment+0x110>)
 8002344:	2200      	movs	r2, #0
 8002346:	701a      	strb	r2, [r3, #0]
						break;
 8002348:	e007      	b.n	800235a <RunningExperiment+0x82>
						PRIsToggled = true; // go up
 800234a:	4b26      	ldr	r3, [pc, #152]	; (80023e4 <RunningExperiment+0x10c>)
 800234c:	2201      	movs	r2, #1
 800234e:	701a      	strb	r2, [r3, #0]
						Direction = false; //up
 8002350:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <RunningExperiment+0x110>)
 8002352:	2200      	movs	r2, #0
 8002354:	701a      	strb	r2, [r3, #0]
						break;
 8002356:	e000      	b.n	800235a <RunningExperiment+0x82>
						break;
 8002358:	bf00      	nop
		{
			return;
		}
	}

	if (StartMainRun)
 800235a:	4b1f      	ldr	r3, [pc, #124]	; (80023d8 <RunningExperiment+0x100>)
 800235c:	781b      	ldrb	r3, [r3, #0]
 800235e:	2b00      	cmp	r3, #0
 8002360:	d032      	beq.n	80023c8 <RunningExperiment+0xf0>
	{
		if (Index > DropCurveDataIndex)
 8002362:	4b22      	ldr	r3, [pc, #136]	; (80023ec <RunningExperiment+0x114>)
 8002364:	881a      	ldrh	r2, [r3, #0]
 8002366:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <RunningExperiment+0x118>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	429a      	cmp	r2, r3
 800236c:	d902      	bls.n	8002374 <RunningExperiment+0x9c>
		{
			StopExperiment();
 800236e:	f7ff fe81 	bl	8002074 <StopExperiment>
			return;
 8002372:	e029      	b.n	80023c8 <RunningExperiment+0xf0>
		}
		PulseGenerating(DropRefPosDeltaPulse[Index],4);
 8002374:	4b1d      	ldr	r3, [pc, #116]	; (80023ec <RunningExperiment+0x114>)
 8002376:	881b      	ldrh	r3, [r3, #0]
 8002378:	461a      	mov	r2, r3
 800237a:	4b1e      	ldr	r3, [pc, #120]	; (80023f4 <RunningExperiment+0x11c>)
 800237c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002380:	2104      	movs	r1, #4
 8002382:	4618      	mov	r0, r3
 8002384:	f7ff fb78 	bl	8001a78 <PulseGenerating>
		if(DropRefPosDeltaPulse[Index] > 0) // move down
 8002388:	4b18      	ldr	r3, [pc, #96]	; (80023ec <RunningExperiment+0x114>)
 800238a:	881b      	ldrh	r3, [r3, #0]
 800238c:	461a      	mov	r2, r3
 800238e:	4b19      	ldr	r3, [pc, #100]	; (80023f4 <RunningExperiment+0x11c>)
 8002390:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002394:	2b00      	cmp	r3, #0
 8002396:	dd02      	ble.n	800239e <RunningExperiment+0xc6>
		{
			Direction = true; //down
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <RunningExperiment+0x110>)
 800239a:	2201      	movs	r2, #1
 800239c:	701a      	strb	r2, [r3, #0]
		}
		if(DropRefPosDeltaPulse[Index] < 0) // move up
 800239e:	4b13      	ldr	r3, [pc, #76]	; (80023ec <RunningExperiment+0x114>)
 80023a0:	881b      	ldrh	r3, [r3, #0]
 80023a2:	461a      	mov	r2, r3
 80023a4:	4b13      	ldr	r3, [pc, #76]	; (80023f4 <RunningExperiment+0x11c>)
 80023a6:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023aa:	2b00      	cmp	r3, #0
 80023ac:	da02      	bge.n	80023b4 <RunningExperiment+0xdc>
		{
			Direction = false; //up
 80023ae:	4b0e      	ldr	r3, [pc, #56]	; (80023e8 <RunningExperiment+0x110>)
 80023b0:	2200      	movs	r2, #0
 80023b2:	701a      	strb	r2, [r3, #0]
		}
		Index++;
 80023b4:	4b0d      	ldr	r3, [pc, #52]	; (80023ec <RunningExperiment+0x114>)
 80023b6:	881b      	ldrh	r3, [r3, #0]
 80023b8:	3301      	adds	r3, #1
 80023ba:	b29a      	uxth	r2, r3
 80023bc:	4b0b      	ldr	r3, [pc, #44]	; (80023ec <RunningExperiment+0x114>)
 80023be:	801a      	strh	r2, [r3, #0]
 80023c0:	e002      	b.n	80023c8 <RunningExperiment+0xf0>
			return;
 80023c2:	bf00      	nop
 80023c4:	e000      	b.n	80023c8 <RunningExperiment+0xf0>
				return;
 80023c6:	bf00      	nop
	}
}
 80023c8:	bd80      	pop	{r7, pc}
 80023ca:	bf00      	nop
 80023cc:	2000043d 	.word	0x2000043d
 80023d0:	20006228 	.word	0x20006228
 80023d4:	20000008 	.word	0x20000008
 80023d8:	2000042f 	.word	0x2000042f
 80023dc:	20006230 	.word	0x20006230
 80023e0:	20006200 	.word	0x20006200
 80023e4:	2000043b 	.word	0x2000043b
 80023e8:	20000431 	.word	0x20000431
 80023ec:	2000620e 	.word	0x2000620e
 80023f0:	2000043e 	.word	0x2000043e
 80023f4:	20000440 	.word	0x20000440

080023f8 <ProcessReceivedCommand>:

void ProcessReceivedCommand () // Proceed the command from the UI
{
 80023f8:	b590      	push	{r4, r7, lr}
 80023fa:	b08b      	sub	sp, #44	; 0x2c
 80023fc:	af04      	add	r7, sp, #16
	switch ((int)MotionCode[0])
 80023fe:	4ba8      	ldr	r3, [pc, #672]	; (80026a0 <ProcessReceivedCommand+0x2a8>)
 8002400:	edd3 7a00 	vldr	s15, [r3]
 8002404:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002408:	ee17 3a90 	vmov	r3, s15
 800240c:	3b01      	subs	r3, #1
 800240e:	2b2d      	cmp	r3, #45	; 0x2d
 8002410:	f200 8493 	bhi.w	8002d3a <ProcessReceivedCommand+0x942>
 8002414:	a201      	add	r2, pc, #4	; (adr r2, 800241c <ProcessReceivedCommand+0x24>)
 8002416:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800241a:	bf00      	nop
 800241c:	080024fb 	.word	0x080024fb
 8002420:	0800253f 	.word	0x0800253f
 8002424:	0800256f 	.word	0x0800256f
 8002428:	08002611 	.word	0x08002611
 800242c:	080026e5 	.word	0x080026e5
 8002430:	08002757 	.word	0x08002757
 8002434:	08002781 	.word	0x08002781
 8002438:	080027bd 	.word	0x080027bd
 800243c:	080027df 	.word	0x080027df
 8002440:	080027f3 	.word	0x080027f3
 8002444:	08002851 	.word	0x08002851
 8002448:	08002d3b 	.word	0x08002d3b
 800244c:	080028ad 	.word	0x080028ad
 8002450:	08002937 	.word	0x08002937
 8002454:	08002d3b 	.word	0x08002d3b
 8002458:	08002a49 	.word	0x08002a49
 800245c:	08002acf 	.word	0x08002acf
 8002460:	08002ad5 	.word	0x08002ad5
 8002464:	08002d3b 	.word	0x08002d3b
 8002468:	08002d3b 	.word	0x08002d3b
 800246c:	08002d3b 	.word	0x08002d3b
 8002470:	08002d3b 	.word	0x08002d3b
 8002474:	08002d3b 	.word	0x08002d3b
 8002478:	08002d3b 	.word	0x08002d3b
 800247c:	08002d3b 	.word	0x08002d3b
 8002480:	08002d3b 	.word	0x08002d3b
 8002484:	08002d3b 	.word	0x08002d3b
 8002488:	08002b01 	.word	0x08002b01
 800248c:	08002d3b 	.word	0x08002d3b
 8002490:	08002d3b 	.word	0x08002d3b
 8002494:	08002b11 	.word	0x08002b11
 8002498:	08002d3b 	.word	0x08002d3b
 800249c:	08002d3b 	.word	0x08002d3b
 80024a0:	08002d3b 	.word	0x08002d3b
 80024a4:	08002d3b 	.word	0x08002d3b
 80024a8:	08002d3b 	.word	0x08002d3b
 80024ac:	08002b63 	.word	0x08002b63
 80024b0:	08002bb3 	.word	0x08002bb3
 80024b4:	08002bdb 	.word	0x08002bdb
 80024b8:	08002d3b 	.word	0x08002d3b
 80024bc:	08002d3b 	.word	0x08002d3b
 80024c0:	08002c61 	.word	0x08002c61
 80024c4:	08002d3b 	.word	0x08002d3b
 80024c8:	080024d5 	.word	0x080024d5
 80024cc:	0800280b 	.word	0x0800280b
 80024d0:	08002d25 	.word	0x08002d25
	{
		case 44: //Emergency Stop Change to 44 to avoid data confusion
			if ((int)MotionCode[1] == 0) // 44/0
 80024d4:	4b72      	ldr	r3, [pc, #456]	; (80026a0 <ProcessReceivedCommand+0x2a8>)
 80024d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80024da:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80024de:	ee17 3a90 	vmov	r3, s15
 80024e2:	2b00      	cmp	r3, #0
 80024e4:	d105      	bne.n	80024f2 <ProcessReceivedCommand+0xfa>
			{
				Estop(); // Estop button on the UI
 80024e6:	f7fe feb3 	bl	8001250 <Estop>
				StopPulseGenerating();
 80024ea:	f7ff f9cb 	bl	8001884 <StopPulseGenerating>
				//EMO = true;
			}
			else {AlarmReset();}  // 44/1, alarm button
			break;
 80024ee:	f000 bc39 	b.w	8002d64 <ProcessReceivedCommand+0x96c>
			else {AlarmReset();}  // 44/1, alarm button
 80024f2:	f7fe fe87 	bl	8001204 <AlarmReset>
			break;
 80024f6:	f000 bc35 	b.w	8002d64 <ProcessReceivedCommand+0x96c>
		case 1: // Stop button;
			if ((int)MotionCode[1] == 1) // 1/1
 80024fa:	4b69      	ldr	r3, [pc, #420]	; (80026a0 <ProcessReceivedCommand+0x2a8>)
 80024fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8002500:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002504:	ee17 3a90 	vmov	r3, s15
 8002508:	2b01      	cmp	r3, #1
 800250a:	f040 8418 	bne.w	8002d3e <ProcessReceivedCommand+0x946>
			{
				if (MotorDriver) // FDA 7000
 800250e:	4b65      	ldr	r3, [pc, #404]	; (80026a4 <ProcessReceivedCommand+0x2ac>)
 8002510:	781b      	ldrb	r3, [r3, #0]
 8002512:	2b00      	cmp	r3, #0
 8002514:	d00a      	beq.n	800252c <ProcessReceivedCommand+0x134>
				{
					Stop();
 8002516:	f7fe fe65 	bl	80011e4 <Stop>
					StopExperiment();
 800251a:	f7ff fdab 	bl	8002074 <StopExperiment>
					StopPulseGenerating();
 800251e:	f7ff f9b1 	bl	8001884 <StopPulseGenerating>
					IsHoming = false;
 8002522:	4b61      	ldr	r3, [pc, #388]	; (80026a8 <ProcessReceivedCommand+0x2b0>)
 8002524:	2200      	movs	r2, #0
 8002526:	701a      	strb	r2, [r3, #0]
					StopPulseGenerating();
					StopExperiment();
					IsHoming = false;
				}
			}
			break;
 8002528:	f000 bc09 	b.w	8002d3e <ProcessReceivedCommand+0x946>
					StopPulseGenerating();
 800252c:	f7ff f9aa 	bl	8001884 <StopPulseGenerating>
					StopExperiment();
 8002530:	f7ff fda0 	bl	8002074 <StopExperiment>
					IsHoming = false;
 8002534:	4b5c      	ldr	r3, [pc, #368]	; (80026a8 <ProcessReceivedCommand+0x2b0>)
 8002536:	2200      	movs	r2, #0
 8002538:	701a      	strb	r2, [r3, #0]
			break;
 800253a:	f000 bc00 	b.w	8002d3e <ProcessReceivedCommand+0x946>
		case 2: // Receive Position Data
			DropCurveDataIndex = (uint16_t)MotionCode[1];
 800253e:	4b58      	ldr	r3, [pc, #352]	; (80026a0 <ProcessReceivedCommand+0x2a8>)
 8002540:	edd3 7a01 	vldr	s15, [r3, #4]
 8002544:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002548:	ee17 3a90 	vmov	r3, s15
 800254c:	b29a      	uxth	r2, r3
 800254e:	4b57      	ldr	r3, [pc, #348]	; (80026ac <ProcessReceivedCommand+0x2b4>)
 8002550:	801a      	strh	r2, [r3, #0]
			DropRefPosDeltaPulse[DropCurveDataIndex] = (int)MotionCode[2];
 8002552:	4b53      	ldr	r3, [pc, #332]	; (80026a0 <ProcessReceivedCommand+0x2a8>)
 8002554:	edd3 7a02 	vldr	s15, [r3, #8]
 8002558:	4b54      	ldr	r3, [pc, #336]	; (80026ac <ProcessReceivedCommand+0x2b4>)
 800255a:	881b      	ldrh	r3, [r3, #0]
 800255c:	461a      	mov	r2, r3
 800255e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002562:	ee17 1a90 	vmov	r1, s15
 8002566:	4b52      	ldr	r3, [pc, #328]	; (80026b0 <ProcessReceivedCommand+0x2b8>)
 8002568:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
			break;
 800256c:	e3fa      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 3: // Jog Control

			if ((int)MotionCode[1] == 1) // 3/1 move up button
 800256e:	4b4c      	ldr	r3, [pc, #304]	; (80026a0 <ProcessReceivedCommand+0x2a8>)
 8002570:	edd3 7a01 	vldr	s15, [r3, #4]
 8002574:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002578:	ee17 3a90 	vmov	r3, s15
 800257c:	2b01      	cmp	r3, #1
 800257e:	d123      	bne.n	80025c8 <ProcessReceivedCommand+0x1d0>
			{
					if (PositionControlMode) // If the control Mode is Position Mode
 8002580:	4b4c      	ldr	r3, [pc, #304]	; (80026b4 <ProcessReceivedCommand+0x2bc>)
 8002582:	781b      	ldrb	r3, [r3, #0]
 8002584:	2b00      	cmp	r3, #0
 8002586:	d01c      	beq.n	80025c2 <ProcessReceivedCommand+0x1ca>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8002588:	4b46      	ldr	r3, [pc, #280]	; (80026a4 <ProcessReceivedCommand+0x2ac>)
 800258a:	781b      	ldrb	r3, [r3, #0]
 800258c:	4a4a      	ldr	r2, [pc, #296]	; (80026b8 <ProcessReceivedCommand+0x2c0>)
 800258e:	8812      	ldrh	r2, [r2, #0]
 8002590:	ee07 2a90 	vmov	s15, r2
 8002594:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002598:	eeb0 0a67 	vmov.f32	s0, s15
 800259c:	4618      	mov	r0, r3
 800259e:	f7ff f9df 	bl	8001960 <CalculateTimer3Period>
 80025a2:	4603      	mov	r3, r0
 80025a4:	b29a      	uxth	r2, r3
 80025a6:	4b45      	ldr	r3, [pc, #276]	; (80026bc <ProcessReceivedCommand+0x2c4>)
 80025a8:	801a      	strh	r2, [r3, #0]
						PRIsToggled = true; // PR phase is 90 deg late
 80025aa:	4b45      	ldr	r3, [pc, #276]	; (80026c0 <ProcessReceivedCommand+0x2c8>)
 80025ac:	2201      	movs	r2, #1
 80025ae:	701a      	strb	r2, [r3, #0]

						InitPulseGenerating(true); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 80025b0:	2001      	movs	r0, #1
 80025b2:	f7ff f985 	bl	80018c0 <InitPulseGenerating>
						PulseGenerationFlag = true;
 80025b6:	4b43      	ldr	r3, [pc, #268]	; (80026c4 <ProcessReceivedCommand+0x2cc>)
 80025b8:	2201      	movs	r2, #1
 80025ba:	701a      	strb	r2, [r3, #0]
						DisableSTOP(); // Turn off STOP to run
 80025bc:	f7fe fe54 	bl	8001268 <DisableSTOP>
					else // Speed Mode
					{
						JogMoveDown(); // Disable the stop
					}
			}
			break;
 80025c0:	e3d0      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
						JogMoveUp(); // Disable the stop
 80025c2:	f7fe fe5d 	bl	8001280 <JogMoveUp>
			break;
 80025c6:	e3cd      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
					if (PositionControlMode) // If the control Mode is Position Mode
 80025c8:	4b3a      	ldr	r3, [pc, #232]	; (80026b4 <ProcessReceivedCommand+0x2bc>)
 80025ca:	781b      	ldrb	r3, [r3, #0]
 80025cc:	2b00      	cmp	r3, #0
 80025ce:	d01c      	beq.n	800260a <ProcessReceivedCommand+0x212>
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80025d0:	4b34      	ldr	r3, [pc, #208]	; (80026a4 <ProcessReceivedCommand+0x2ac>)
 80025d2:	781b      	ldrb	r3, [r3, #0]
 80025d4:	4a38      	ldr	r2, [pc, #224]	; (80026b8 <ProcessReceivedCommand+0x2c0>)
 80025d6:	8812      	ldrh	r2, [r2, #0]
 80025d8:	ee07 2a90 	vmov	s15, r2
 80025dc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80025e0:	eeb0 0a67 	vmov.f32	s0, s15
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7ff f9bb 	bl	8001960 <CalculateTimer3Period>
 80025ea:	4603      	mov	r3, r0
 80025ec:	b29a      	uxth	r2, r3
 80025ee:	4b33      	ldr	r3, [pc, #204]	; (80026bc <ProcessReceivedCommand+0x2c4>)
 80025f0:	801a      	strh	r2, [r3, #0]
						PRIsToggled = false; //
 80025f2:	4b33      	ldr	r3, [pc, #204]	; (80026c0 <ProcessReceivedCommand+0x2c8>)
 80025f4:	2200      	movs	r2, #0
 80025f6:	701a      	strb	r2, [r3, #0]
						InitPulseGenerating(false); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 80025f8:	2000      	movs	r0, #0
 80025fa:	f7ff f961 	bl	80018c0 <InitPulseGenerating>
						PulseGenerationFlag = true;
 80025fe:	4b31      	ldr	r3, [pc, #196]	; (80026c4 <ProcessReceivedCommand+0x2cc>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
						DisableSTOP();	// Turn off STOP to run
 8002604:	f7fe fe30 	bl	8001268 <DisableSTOP>
			break;
 8002608:	e3ac      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
						JogMoveDown(); // Disable the stop
 800260a:	f7fe fe4d 	bl	80012a8 <JogMoveDown>
			break;
 800260e:	e3a9      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
		case 4: // Start Running Buton (Start Running Experiment)
			if ((int)MotionCode[1] == 1) // Start runing
 8002610:	4b23      	ldr	r3, [pc, #140]	; (80026a0 <ProcessReceivedCommand+0x2a8>)
 8002612:	edd3 7a01 	vldr	s15, [r3, #4]
 8002616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261a:	ee17 3a90 	vmov	r3, s15
 800261e:	2b01      	cmp	r3, #1
 8002620:	d13a      	bne.n	8002698 <ProcessReceivedCommand+0x2a0>
				{
					if ( Initialized )
 8002622:	4b29      	ldr	r3, [pc, #164]	; (80026c8 <ProcessReceivedCommand+0x2d0>)
 8002624:	781b      	ldrb	r3, [r3, #0]
 8002626:	2b00      	cmp	r3, #0
 8002628:	d01d      	beq.n	8002666 <ProcessReceivedCommand+0x26e>
					{
						TxPCLen = sprintf(ResponseMess,"g4/1e"); // Respond that the experiment started
 800262a:	4928      	ldr	r1, [pc, #160]	; (80026cc <ProcessReceivedCommand+0x2d4>)
 800262c:	4828      	ldr	r0, [pc, #160]	; (80026d0 <ProcessReceivedCommand+0x2d8>)
 800262e:	f006 f83d 	bl	80086ac <siprintf>
 8002632:	4603      	mov	r3, r0
 8002634:	b2da      	uxtb	r2, r3
 8002636:	4b27      	ldr	r3, [pc, #156]	; (80026d4 <ProcessReceivedCommand+0x2dc>)
 8002638:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800263a:	4b26      	ldr	r3, [pc, #152]	; (80026d4 <ProcessReceivedCommand+0x2dc>)
 800263c:	781b      	ldrb	r3, [r3, #0]
 800263e:	b29a      	uxth	r2, r3
 8002640:	23c8      	movs	r3, #200	; 0xc8
 8002642:	4923      	ldr	r1, [pc, #140]	; (80026d0 <ProcessReceivedCommand+0x2d8>)
 8002644:	4824      	ldr	r0, [pc, #144]	; (80026d8 <ProcessReceivedCommand+0x2e0>)
 8002646:	f004 f950 	bl	80068ea <HAL_UART_Transmit>
						HAL_Delay(200);
 800264a:	20c8      	movs	r0, #200	; 0xc8
 800264c:	f001 ff2a 	bl	80044a4 <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002650:	220f      	movs	r2, #15
 8002652:	2100      	movs	r1, #0
 8002654:	481e      	ldr	r0, [pc, #120]	; (80026d0 <ProcessReceivedCommand+0x2d8>)
 8002656:	f005 f9a1 	bl	800799c <memset>

						InitializeRunning (ExperimentMode);
 800265a:	4b20      	ldr	r3, [pc, #128]	; (80026dc <ProcessReceivedCommand+0x2e4>)
 800265c:	781b      	ldrb	r3, [r3, #0]
 800265e:	4618      	mov	r0, r3
 8002660:	f7ff fc7a 	bl	8001f58 <InitializeRunning>
				}
			else // Stop running
				{
					StopExperiment();
				}
			break;
 8002664:	e37e      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
						TxPCLen = sprintf(ResponseMess,"g4/0e"); // Respond that the experiment can not start
 8002666:	491e      	ldr	r1, [pc, #120]	; (80026e0 <ProcessReceivedCommand+0x2e8>)
 8002668:	4819      	ldr	r0, [pc, #100]	; (80026d0 <ProcessReceivedCommand+0x2d8>)
 800266a:	f006 f81f 	bl	80086ac <siprintf>
 800266e:	4603      	mov	r3, r0
 8002670:	b2da      	uxtb	r2, r3
 8002672:	4b18      	ldr	r3, [pc, #96]	; (80026d4 <ProcessReceivedCommand+0x2dc>)
 8002674:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8002676:	4b17      	ldr	r3, [pc, #92]	; (80026d4 <ProcessReceivedCommand+0x2dc>)
 8002678:	781b      	ldrb	r3, [r3, #0]
 800267a:	b29a      	uxth	r2, r3
 800267c:	23c8      	movs	r3, #200	; 0xc8
 800267e:	4914      	ldr	r1, [pc, #80]	; (80026d0 <ProcessReceivedCommand+0x2d8>)
 8002680:	4815      	ldr	r0, [pc, #84]	; (80026d8 <ProcessReceivedCommand+0x2e0>)
 8002682:	f004 f932 	bl	80068ea <HAL_UART_Transmit>
						HAL_Delay(200);
 8002686:	20c8      	movs	r0, #200	; 0xc8
 8002688:	f001 ff0c 	bl	80044a4 <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 800268c:	220f      	movs	r2, #15
 800268e:	2100      	movs	r1, #0
 8002690:	480f      	ldr	r0, [pc, #60]	; (80026d0 <ProcessReceivedCommand+0x2d8>)
 8002692:	f005 f983 	bl	800799c <memset>
			break;
 8002696:	e365      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
					StopExperiment();
 8002698:	f7ff fcec 	bl	8002074 <StopExperiment>
			break;
 800269c:	e362      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
 800269e:	bf00      	nop
 80026a0:	20006298 	.word	0x20006298
 80026a4:	20000003 	.word	0x20000003
 80026a8:	20000438 	.word	0x20000438
 80026ac:	2000043e 	.word	0x2000043e
 80026b0:	20000440 	.word	0x20000440
 80026b4:	20000002 	.word	0x20000002
 80026b8:	20000004 	.word	0x20000004
 80026bc:	20006208 	.word	0x20006208
 80026c0:	2000043b 	.word	0x2000043b
 80026c4:	20000433 	.word	0x20000433
 80026c8:	20000439 	.word	0x20000439
 80026cc:	0800c394 	.word	0x0800c394
 80026d0:	20000418 	.word	0x20000418
 80026d4:	20000410 	.word	0x20000410
 80026d8:	200002f4 	.word	0x200002f4
 80026dc:	20006200 	.word	0x20006200
 80026e0:	0800c39c 	.word	0x0800c39c

		case 5: // Set Jog Speed
			if (PositionControlMode) // If it is the position control mode, then change the JogSpeed
 80026e4:	4bac      	ldr	r3, [pc, #688]	; (8002998 <ProcessReceivedCommand+0x5a0>)
 80026e6:	781b      	ldrb	r3, [r3, #0]
 80026e8:	2b00      	cmp	r3, #0
 80026ea:	f000 832a 	beq.w	8002d42 <ProcessReceivedCommand+0x94a>
			{
				JogSpeed = (int)(MotionCode[1]); // unit: rpm
 80026ee:	4bab      	ldr	r3, [pc, #684]	; (800299c <ProcessReceivedCommand+0x5a4>)
 80026f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026f4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80026f8:	ee17 3a90 	vmov	r3, s15
 80026fc:	b29a      	uxth	r2, r3
 80026fe:	4ba8      	ldr	r3, [pc, #672]	; (80029a0 <ProcessReceivedCommand+0x5a8>)
 8002700:	801a      	strh	r2, [r3, #0]
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8002702:	4ba8      	ldr	r3, [pc, #672]	; (80029a4 <ProcessReceivedCommand+0x5ac>)
 8002704:	781b      	ldrb	r3, [r3, #0]
 8002706:	4aa6      	ldr	r2, [pc, #664]	; (80029a0 <ProcessReceivedCommand+0x5a8>)
 8002708:	8812      	ldrh	r2, [r2, #0]
 800270a:	ee07 2a90 	vmov	s15, r2
 800270e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002712:	eeb0 0a67 	vmov.f32	s0, s15
 8002716:	4618      	mov	r0, r3
 8002718:	f7ff f922 	bl	8001960 <CalculateTimer3Period>
 800271c:	4603      	mov	r3, r0
 800271e:	b29a      	uxth	r2, r3
 8002720:	4ba1      	ldr	r3, [pc, #644]	; (80029a8 <ProcessReceivedCommand+0x5b0>)
 8002722:	801a      	strh	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"j%de",JogSpeed);
 8002724:	4b9e      	ldr	r3, [pc, #632]	; (80029a0 <ProcessReceivedCommand+0x5a8>)
 8002726:	881b      	ldrh	r3, [r3, #0]
 8002728:	461a      	mov	r2, r3
 800272a:	49a0      	ldr	r1, [pc, #640]	; (80029ac <ProcessReceivedCommand+0x5b4>)
 800272c:	48a0      	ldr	r0, [pc, #640]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 800272e:	f005 ffbd 	bl	80086ac <siprintf>
 8002732:	4603      	mov	r3, r0
 8002734:	b2da      	uxtb	r2, r3
 8002736:	4b9f      	ldr	r3, [pc, #636]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 8002738:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 800273a:	4b9e      	ldr	r3, [pc, #632]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 800273c:	781b      	ldrb	r3, [r3, #0]
 800273e:	b29a      	uxth	r2, r3
 8002740:	23c8      	movs	r3, #200	; 0xc8
 8002742:	499b      	ldr	r1, [pc, #620]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 8002744:	489c      	ldr	r0, [pc, #624]	; (80029b8 <ProcessReceivedCommand+0x5c0>)
 8002746:	f004 f8d0 	bl	80068ea <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess)); // Clear the array
 800274a:	220f      	movs	r2, #15
 800274c:	2100      	movs	r1, #0
 800274e:	4898      	ldr	r0, [pc, #608]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 8002750:	f005 f924 	bl	800799c <memset>
			}
			break;
 8002754:	e2f5      	b.n	8002d42 <ProcessReceivedCommand+0x94a>

		case 6: // 6 request driver data
			if((int)MotionCode[1] == 1)
 8002756:	4b91      	ldr	r3, [pc, #580]	; (800299c <ProcessReceivedCommand+0x5a4>)
 8002758:	edd3 7a01 	vldr	s15, [r3, #4]
 800275c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002760:	ee17 3a90 	vmov	r3, s15
 8002764:	2b01      	cmp	r3, #1
 8002766:	d107      	bne.n	8002778 <ProcessReceivedCommand+0x380>
			{
				UIDataRequest = true;
 8002768:	4b94      	ldr	r3, [pc, #592]	; (80029bc <ProcessReceivedCommand+0x5c4>)
 800276a:	2201      	movs	r2, #1
 800276c:	701a      	strb	r2, [r3, #0]
				ReadMultiRegister(StE03,5);
 800276e:	2105      	movs	r1, #5
 8002770:	200c      	movs	r0, #12
 8002772:	f7fe ff19 	bl	80015a8 <ReadMultiRegister>
			} // 6/1 If the UI request data
			else
			{
				UIDataRequest = false;
			}
			break;
 8002776:	e2f5      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				UIDataRequest = false;
 8002778:	4b90      	ldr	r3, [pc, #576]	; (80029bc <ProcessReceivedCommand+0x5c4>)
 800277a:	2200      	movs	r2, #0
 800277c:	701a      	strb	r2, [r3, #0]
			break;
 800277e:	e2f1      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 7: // Save System Params
			// Save to the flash memory
			SaveSystemParams(&numofwords);
 8002780:	488f      	ldr	r0, [pc, #572]	; (80029c0 <ProcessReceivedCommand+0x5c8>)
 8002782:	f7fe ffcb 	bl	800171c <SaveSystemParams>
			HAL_Delay(500);
 8002786:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800278a:	f001 fe8b 	bl	80044a4 <HAL_Delay>
			SaveSystemParams(&numofwords); // Do twice times
 800278e:	488c      	ldr	r0, [pc, #560]	; (80029c0 <ProcessReceivedCommand+0x5c8>)
 8002790:	f7fe ffc4 	bl	800171c <SaveSystemParams>
			// Send back to the UI to notify
			char MessageBuffer[10];
			TxPCLen = sprintf(MessageBuffer,"r7/1e");
 8002794:	f107 030c 	add.w	r3, r7, #12
 8002798:	498a      	ldr	r1, [pc, #552]	; (80029c4 <ProcessReceivedCommand+0x5cc>)
 800279a:	4618      	mov	r0, r3
 800279c:	f005 ff86 	bl	80086ac <siprintf>
 80027a0:	4603      	mov	r3, r0
 80027a2:	b2da      	uxtb	r2, r3
 80027a4:	4b83      	ldr	r3, [pc, #524]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 80027a6:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t *)MessageBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 80027a8:	4b82      	ldr	r3, [pc, #520]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 80027aa:	781b      	ldrb	r3, [r3, #0]
 80027ac:	b29a      	uxth	r2, r3
 80027ae:	f107 010c 	add.w	r1, r7, #12
 80027b2:	2364      	movs	r3, #100	; 0x64
 80027b4:	4880      	ldr	r0, [pc, #512]	; (80029b8 <ProcessReceivedCommand+0x5c0>)
 80027b6:	f004 f898 	bl	80068ea <HAL_UART_Transmit>
			break;
 80027ba:	e2d3      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 8: // Request reading digital driver output
			if((int)MotionCode[1] == 1) {OutputDataRequest = true;} // 8/1 = request
 80027bc:	4b77      	ldr	r3, [pc, #476]	; (800299c <ProcessReceivedCommand+0x5a4>)
 80027be:	edd3 7a01 	vldr	s15, [r3, #4]
 80027c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027c6:	ee17 3a90 	vmov	r3, s15
 80027ca:	2b01      	cmp	r3, #1
 80027cc:	d103      	bne.n	80027d6 <ProcessReceivedCommand+0x3de>
 80027ce:	4b7e      	ldr	r3, [pc, #504]	; (80029c8 <ProcessReceivedCommand+0x5d0>)
 80027d0:	2201      	movs	r2, #1
 80027d2:	701a      	strb	r2, [r3, #0]
			else OutputDataRequest = false; // 8/0 = stop request
			break;
 80027d4:	e2c6      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			else OutputDataRequest = false; // 8/0 = stop request
 80027d6:	4b7c      	ldr	r3, [pc, #496]	; (80029c8 <ProcessReceivedCommand+0x5d0>)
 80027d8:	2200      	movs	r2, #0
 80027da:	701a      	strb	r2, [r3, #0]
			break;
 80027dc:	e2c2      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 9: // Get Total Pulling Pull
			PullingBotomPulseCmdPosition = (uint32_t)(MotionCode[1]);
 80027de:	4b6f      	ldr	r3, [pc, #444]	; (800299c <ProcessReceivedCommand+0x5a4>)
 80027e0:	edd3 7a01 	vldr	s15, [r3, #4]
 80027e4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027e8:	ee17 2a90 	vmov	r2, s15
 80027ec:	4b77      	ldr	r3, [pc, #476]	; (80029cc <ProcessReceivedCommand+0x5d4>)
 80027ee:	601a      	str	r2, [r3, #0]
			break;
 80027f0:	e2b8      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 10: // Get Running Mode
			ExperimentMode = (uint8_t)(MotionCode[1]);
 80027f2:	4b6a      	ldr	r3, [pc, #424]	; (800299c <ProcessReceivedCommand+0x5a4>)
 80027f4:	edd3 7a01 	vldr	s15, [r3, #4]
 80027f8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80027fc:	edc7 7a01 	vstr	s15, [r7, #4]
 8002800:	793b      	ldrb	r3, [r7, #4]
 8002802:	b2da      	uxtb	r2, r3
 8002804:	4b72      	ldr	r3, [pc, #456]	; (80029d0 <ProcessReceivedCommand+0x5d8>)
 8002806:	701a      	strb	r2, [r3, #0]
			break;
 8002808:	e2ac      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 45: // Load saved parameters

			// Send to the GUI
			TxPCLen = sprintf(TxPCBuff,"p%.2f/%d/%d/%de"
 800280a:	4b72      	ldr	r3, [pc, #456]	; (80029d4 <ProcessReceivedCommand+0x5dc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe9a 	bl	8000548 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	496f      	ldr	r1, [pc, #444]	; (80029d8 <ProcessReceivedCommand+0x5e0>)
 800281a:	7809      	ldrb	r1, [r1, #0]
 800281c:	4608      	mov	r0, r1
 800281e:	496f      	ldr	r1, [pc, #444]	; (80029dc <ProcessReceivedCommand+0x5e4>)
 8002820:	7809      	ldrb	r1, [r1, #0]
 8002822:	460c      	mov	r4, r1
 8002824:	496e      	ldr	r1, [pc, #440]	; (80029e0 <ProcessReceivedCommand+0x5e8>)
 8002826:	8809      	ldrh	r1, [r1, #0]
 8002828:	9102      	str	r1, [sp, #8]
 800282a:	9401      	str	r4, [sp, #4]
 800282c:	9000      	str	r0, [sp, #0]
 800282e:	496d      	ldr	r1, [pc, #436]	; (80029e4 <ProcessReceivedCommand+0x5ec>)
 8002830:	486d      	ldr	r0, [pc, #436]	; (80029e8 <ProcessReceivedCommand+0x5f0>)
 8002832:	f005 ff3b 	bl	80086ac <siprintf>
 8002836:	4603      	mov	r3, r0
 8002838:	b2da      	uxtb	r2, r3
 800283a:	4b5e      	ldr	r3, [pc, #376]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 800283c:	701a      	strb	r2, [r3, #0]
			                   ,DrumRadius, SampleTime, PullingSpeed,StoppingTime); // Combine to a string
			HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // Send to uart6 to check the params are set or not
 800283e:	4b5d      	ldr	r3, [pc, #372]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	b29a      	uxth	r2, r3
 8002844:	23c8      	movs	r3, #200	; 0xc8
 8002846:	4968      	ldr	r1, [pc, #416]	; (80029e8 <ProcessReceivedCommand+0x5f0>)
 8002848:	485b      	ldr	r0, [pc, #364]	; (80029b8 <ProcessReceivedCommand+0x5c0>)
 800284a:	f004 f84e 	bl	80068ea <HAL_UART_Transmit>
			break;
 800284e:	e289      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 11: // Set Drum Radius
			if (StartRunning) // Setting is not available while running
 8002850:	4b66      	ldr	r3, [pc, #408]	; (80029ec <ProcessReceivedCommand+0x5f4>)
 8002852:	781b      	ldrb	r3, [r3, #0]
 8002854:	2b00      	cmp	r3, #0
 8002856:	d005      	beq.n	8002864 <ProcessReceivedCommand+0x46c>
			{
				InitializeRunning (ExperimentMode);
 8002858:	4b5d      	ldr	r3, [pc, #372]	; (80029d0 <ProcessReceivedCommand+0x5d8>)
 800285a:	781b      	ldrb	r3, [r3, #0]
 800285c:	4618      	mov	r0, r3
 800285e:	f7ff fb7b 	bl	8001f58 <InitializeRunning>
				break;
 8002862:	e27f      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			}
			else
			{
				DrumRadius = MotionCode[1];
 8002864:	4b4d      	ldr	r3, [pc, #308]	; (800299c <ProcessReceivedCommand+0x5a4>)
 8002866:	685b      	ldr	r3, [r3, #4]
 8002868:	4a5a      	ldr	r2, [pc, #360]	; (80029d4 <ProcessReceivedCommand+0x5dc>)
 800286a:	6013      	str	r3, [r2, #0]
				Initialized = false;
 800286c:	4b60      	ldr	r3, [pc, #384]	; (80029f0 <ProcessReceivedCommand+0x5f8>)
 800286e:	2200      	movs	r2, #0
 8002870:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r11/%.2fe",DrumRadius);
 8002872:	4b58      	ldr	r3, [pc, #352]	; (80029d4 <ProcessReceivedCommand+0x5dc>)
 8002874:	681b      	ldr	r3, [r3, #0]
 8002876:	4618      	mov	r0, r3
 8002878:	f7fd fe66 	bl	8000548 <__aeabi_f2d>
 800287c:	4602      	mov	r2, r0
 800287e:	460b      	mov	r3, r1
 8002880:	495c      	ldr	r1, [pc, #368]	; (80029f4 <ProcessReceivedCommand+0x5fc>)
 8002882:	484b      	ldr	r0, [pc, #300]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 8002884:	f005 ff12 	bl	80086ac <siprintf>
 8002888:	4603      	mov	r3, r0
 800288a:	b2da      	uxtb	r2, r3
 800288c:	4b49      	ldr	r3, [pc, #292]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 800288e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 8002890:	4b48      	ldr	r3, [pc, #288]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 8002892:	781b      	ldrb	r3, [r3, #0]
 8002894:	b29a      	uxth	r2, r3
 8002896:	23c8      	movs	r3, #200	; 0xc8
 8002898:	4945      	ldr	r1, [pc, #276]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 800289a:	4847      	ldr	r0, [pc, #284]	; (80029b8 <ProcessReceivedCommand+0x5c0>)
 800289c:	f004 f825 	bl	80068ea <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80028a0:	220f      	movs	r2, #15
 80028a2:	2100      	movs	r1, #0
 80028a4:	4842      	ldr	r0, [pc, #264]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 80028a6:	f005 f879 	bl	800799c <memset>
				break;
 80028aa:	e25b      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			}
			break;

		case 13: // Set Going Speed
			if (StartRunning) // Setting is not available while running
 80028ac:	4b4f      	ldr	r3, [pc, #316]	; (80029ec <ProcessReceivedCommand+0x5f4>)
 80028ae:	781b      	ldrb	r3, [r3, #0]
 80028b0:	2b00      	cmp	r3, #0
 80028b2:	f040 8248 	bne.w	8002d46 <ProcessReceivedCommand+0x94e>
			{
				break;
			}
			else
			{
				PullingSpeed = MotionCode[1];
 80028b6:	4b39      	ldr	r3, [pc, #228]	; (800299c <ProcessReceivedCommand+0x5a4>)
 80028b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80028bc:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80028c0:	edc7 7a01 	vstr	s15, [r7, #4]
 80028c4:	793b      	ldrb	r3, [r7, #4]
 80028c6:	b2da      	uxtb	r2, r3
 80028c8:	4b44      	ldr	r3, [pc, #272]	; (80029dc <ProcessReceivedCommand+0x5e4>)
 80028ca:	701a      	strb	r2, [r3, #0]
				GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 80028cc:	4b43      	ldr	r3, [pc, #268]	; (80029dc <ProcessReceivedCommand+0x5e4>)
 80028ce:	781b      	ldrb	r3, [r3, #0]
 80028d0:	4618      	mov	r0, r3
 80028d2:	f7fd fe27 	bl	8000524 <__aeabi_i2d>
 80028d6:	a32e      	add	r3, pc, #184	; (adr r3, 8002990 <ProcessReceivedCommand+0x598>)
 80028d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028dc:	f7fd fe8c 	bl	80005f8 <__aeabi_dmul>
 80028e0:	4602      	mov	r2, r0
 80028e2:	460b      	mov	r3, r1
 80028e4:	4610      	mov	r0, r2
 80028e6:	4619      	mov	r1, r3
 80028e8:	f04f 0200 	mov.w	r2, #0
 80028ec:	4b42      	ldr	r3, [pc, #264]	; (80029f8 <ProcessReceivedCommand+0x600>)
 80028ee:	f7fd ffad 	bl	800084c <__aeabi_ddiv>
 80028f2:	4602      	mov	r2, r0
 80028f4:	460b      	mov	r3, r1
 80028f6:	4610      	mov	r0, r2
 80028f8:	4619      	mov	r1, r3
 80028fa:	f7fe f975 	bl	8000be8 <__aeabi_d2f>
 80028fe:	4603      	mov	r3, r0
 8002900:	4a3e      	ldr	r2, [pc, #248]	; (80029fc <ProcessReceivedCommand+0x604>)
 8002902:	6013      	str	r3, [r2, #0]

				//char PullingSpeedBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r13/%de",PullingSpeed);
 8002904:	4b35      	ldr	r3, [pc, #212]	; (80029dc <ProcessReceivedCommand+0x5e4>)
 8002906:	781b      	ldrb	r3, [r3, #0]
 8002908:	461a      	mov	r2, r3
 800290a:	493d      	ldr	r1, [pc, #244]	; (8002a00 <ProcessReceivedCommand+0x608>)
 800290c:	4828      	ldr	r0, [pc, #160]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 800290e:	f005 fecd 	bl	80086ac <siprintf>
 8002912:	4603      	mov	r3, r0
 8002914:	b2da      	uxtb	r2, r3
 8002916:	4b27      	ldr	r3, [pc, #156]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 8002918:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800291a:	4b26      	ldr	r3, [pc, #152]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 800291c:	781b      	ldrb	r3, [r3, #0]
 800291e:	b29a      	uxth	r2, r3
 8002920:	23c8      	movs	r3, #200	; 0xc8
 8002922:	4923      	ldr	r1, [pc, #140]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 8002924:	4824      	ldr	r0, [pc, #144]	; (80029b8 <ProcessReceivedCommand+0x5c0>)
 8002926:	f003 ffe0 	bl	80068ea <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800292a:	220f      	movs	r2, #15
 800292c:	2100      	movs	r1, #0
 800292e:	4820      	ldr	r0, [pc, #128]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 8002930:	f005 f834 	bl	800799c <memset>
				break;
 8002934:	e216      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			}

		case 14: // Start Simulating
			if (StartRunning) // Setting is not available while running
 8002936:	4b2d      	ldr	r3, [pc, #180]	; (80029ec <ProcessReceivedCommand+0x5f4>)
 8002938:	781b      	ldrb	r3, [r3, #0]
 800293a:	2b00      	cmp	r3, #0
 800293c:	f040 8205 	bne.w	8002d4a <ProcessReceivedCommand+0x952>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // Start Simulation
 8002940:	4b16      	ldr	r3, [pc, #88]	; (800299c <ProcessReceivedCommand+0x5a4>)
 8002942:	edd3 7a01 	vldr	s15, [r3, #4]
 8002946:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800294a:	eef4 7a47 	vcmp.f32	s15, s14
 800294e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002952:	d176      	bne.n	8002a42 <ProcessReceivedCommand+0x64a>
				{
					if (DropCurveDataIndex == 0) // There is no data
 8002954:	4b2b      	ldr	r3, [pc, #172]	; (8002a04 <ProcessReceivedCommand+0x60c>)
 8002956:	881b      	ldrh	r3, [r3, #0]
 8002958:	2b00      	cmp	r3, #0
 800295a:	d157      	bne.n	8002a0c <ProcessReceivedCommand+0x614>
					{
						TxPCLen = sprintf(ResponseMess,"g14/0e"); // Respond that the experiment can not start
 800295c:	492a      	ldr	r1, [pc, #168]	; (8002a08 <ProcessReceivedCommand+0x610>)
 800295e:	4814      	ldr	r0, [pc, #80]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 8002960:	f005 fea4 	bl	80086ac <siprintf>
 8002964:	4603      	mov	r3, r0
 8002966:	b2da      	uxtb	r2, r3
 8002968:	4b12      	ldr	r3, [pc, #72]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 800296a:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800296c:	4b11      	ldr	r3, [pc, #68]	; (80029b4 <ProcessReceivedCommand+0x5bc>)
 800296e:	781b      	ldrb	r3, [r3, #0]
 8002970:	b29a      	uxth	r2, r3
 8002972:	23c8      	movs	r3, #200	; 0xc8
 8002974:	490e      	ldr	r1, [pc, #56]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 8002976:	4810      	ldr	r0, [pc, #64]	; (80029b8 <ProcessReceivedCommand+0x5c0>)
 8002978:	f003 ffb7 	bl	80068ea <HAL_UART_Transmit>
						HAL_Delay(200);
 800297c:	20c8      	movs	r0, #200	; 0xc8
 800297e:	f001 fd91 	bl	80044a4 <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002982:	220f      	movs	r2, #15
 8002984:	2100      	movs	r1, #0
 8002986:	480a      	ldr	r0, [pc, #40]	; (80029b0 <ProcessReceivedCommand+0x5b8>)
 8002988:	f005 f808 	bl	800799c <memset>
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
						HAL_Delay(200);
						memset(ResponseMess, '\0', sizeof(ResponseMess));
					}

					break;
 800298c:	e1ea      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
 800298e:	bf00      	nop
 8002990:	9999999a 	.word	0x9999999a
 8002994:	3fb99999 	.word	0x3fb99999
 8002998:	20000002 	.word	0x20000002
 800299c:	20006298 	.word	0x20006298
 80029a0:	20000004 	.word	0x20000004
 80029a4:	20000003 	.word	0x20000003
 80029a8:	20006208 	.word	0x20006208
 80029ac:	0800c3a4 	.word	0x0800c3a4
 80029b0:	20000418 	.word	0x20000418
 80029b4:	20000410 	.word	0x20000410
 80029b8:	200002f4 	.word	0x200002f4
 80029bc:	20000432 	.word	0x20000432
 80029c0:	2000000c 	.word	0x2000000c
 80029c4:	0800c3ac 	.word	0x0800c3ac
 80029c8:	20000001 	.word	0x20000001
 80029cc:	2000621c 	.word	0x2000621c
 80029d0:	20006200 	.word	0x20006200
 80029d4:	20006210 	.word	0x20006210
 80029d8:	20006214 	.word	0x20006214
 80029dc:	20006215 	.word	0x20006215
 80029e0:	20000008 	.word	0x20000008
 80029e4:	0800c3b4 	.word	0x0800c3b4
 80029e8:	200003ac 	.word	0x200003ac
 80029ec:	2000042e 	.word	0x2000042e
 80029f0:	20000439 	.word	0x20000439
 80029f4:	0800c3c4 	.word	0x0800c3c4
 80029f8:	40080000 	.word	0x40080000
 80029fc:	20006218 	.word	0x20006218
 8002a00:	0800c3d0 	.word	0x0800c3d0
 8002a04:	2000043e 	.word	0x2000043e
 8002a08:	0800c3d8 	.word	0x0800c3d8
						InitSimulating();
 8002a0c:	f7ff fbe0 	bl	80021d0 <InitSimulating>
						TxPCLen = sprintf(ResponseMess,"g14/1e"); // Respond that the experiment can not start
 8002a10:	49aa      	ldr	r1, [pc, #680]	; (8002cbc <ProcessReceivedCommand+0x8c4>)
 8002a12:	48ab      	ldr	r0, [pc, #684]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002a14:	f005 fe4a 	bl	80086ac <siprintf>
 8002a18:	4603      	mov	r3, r0
 8002a1a:	b2da      	uxtb	r2, r3
 8002a1c:	4ba9      	ldr	r3, [pc, #676]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002a1e:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8002a20:	4ba8      	ldr	r3, [pc, #672]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002a22:	781b      	ldrb	r3, [r3, #0]
 8002a24:	b29a      	uxth	r2, r3
 8002a26:	23c8      	movs	r3, #200	; 0xc8
 8002a28:	49a5      	ldr	r1, [pc, #660]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002a2a:	48a7      	ldr	r0, [pc, #668]	; (8002cc8 <ProcessReceivedCommand+0x8d0>)
 8002a2c:	f003 ff5d 	bl	80068ea <HAL_UART_Transmit>
						HAL_Delay(200);
 8002a30:	20c8      	movs	r0, #200	; 0xc8
 8002a32:	f001 fd37 	bl	80044a4 <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002a36:	220f      	movs	r2, #15
 8002a38:	2100      	movs	r1, #0
 8002a3a:	48a1      	ldr	r0, [pc, #644]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002a3c:	f004 ffae 	bl	800799c <memset>
					break;
 8002a40:	e190      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				}
				else // Stop Simulation
				{
					StopSimulating();
 8002a42:	f7ff fbe5 	bl	8002210 <StopSimulating>
				}
			}
			break;
 8002a46:	e18d      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 16: // Set SampleTime
			if (StartRunning) // When the experiment is running, disable this fcn
 8002a48:	4ba0      	ldr	r3, [pc, #640]	; (8002ccc <ProcessReceivedCommand+0x8d4>)
 8002a4a:	781b      	ldrb	r3, [r3, #0]
 8002a4c:	2b00      	cmp	r3, #0
 8002a4e:	f040 817e 	bne.w	8002d4e <ProcessReceivedCommand+0x956>
			{
				break;
			}
			else
			{
				SampleTime = MotionCode[1];
 8002a52:	4b9f      	ldr	r3, [pc, #636]	; (8002cd0 <ProcessReceivedCommand+0x8d8>)
 8002a54:	edd3 7a01 	vldr	s15, [r3, #4]
 8002a58:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002a5c:	edc7 7a01 	vstr	s15, [r7, #4]
 8002a60:	793b      	ldrb	r3, [r7, #4]
 8002a62:	b2da      	uxtb	r2, r3
 8002a64:	4b9b      	ldr	r3, [pc, #620]	; (8002cd4 <ProcessReceivedCommand+0x8dc>)
 8002a66:	701a      	strb	r2, [r3, #0]
				if (SampleTime<= 0) // ms Set value range, 1:100ms
 8002a68:	4b9a      	ldr	r3, [pc, #616]	; (8002cd4 <ProcessReceivedCommand+0x8dc>)
 8002a6a:	781b      	ldrb	r3, [r3, #0]
 8002a6c:	2b00      	cmp	r3, #0
 8002a6e:	d102      	bne.n	8002a76 <ProcessReceivedCommand+0x67e>
				{
					SampleTime = 1;
 8002a70:	4b98      	ldr	r3, [pc, #608]	; (8002cd4 <ProcessReceivedCommand+0x8dc>)
 8002a72:	2201      	movs	r2, #1
 8002a74:	701a      	strb	r2, [r3, #0]
				}
				if (SampleTime >= 100) // ms
 8002a76:	4b97      	ldr	r3, [pc, #604]	; (8002cd4 <ProcessReceivedCommand+0x8dc>)
 8002a78:	781b      	ldrb	r3, [r3, #0]
 8002a7a:	2b63      	cmp	r3, #99	; 0x63
 8002a7c:	d902      	bls.n	8002a84 <ProcessReceivedCommand+0x68c>
				{
					SampleTime = 100;
 8002a7e:	4b95      	ldr	r3, [pc, #596]	; (8002cd4 <ProcessReceivedCommand+0x8dc>)
 8002a80:	2264      	movs	r2, #100	; 0x64
 8002a82:	701a      	strb	r2, [r3, #0]
				}
				// Reset the Input data for safety
				DropCurveDataIndex = 0;
 8002a84:	4b94      	ldr	r3, [pc, #592]	; (8002cd8 <ProcessReceivedCommand+0x8e0>)
 8002a86:	2200      	movs	r2, #0
 8002a88:	801a      	strh	r2, [r3, #0]
				memset(DropRefPosDeltaPulse, 0, sizeof(DropRefPosDeltaPulse));
 8002a8a:	f645 52c0 	movw	r2, #24000	; 0x5dc0
 8002a8e:	2100      	movs	r1, #0
 8002a90:	4892      	ldr	r0, [pc, #584]	; (8002cdc <ProcessReceivedCommand+0x8e4>)
 8002a92:	f004 ff83 	bl	800799c <memset>
				Initialized = false; // Request to initializing again
 8002a96:	4b92      	ldr	r3, [pc, #584]	; (8002ce0 <ProcessReceivedCommand+0x8e8>)
 8002a98:	2200      	movs	r2, #0
 8002a9a:	701a      	strb	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r16/%de",SampleTime);
 8002a9c:	4b8d      	ldr	r3, [pc, #564]	; (8002cd4 <ProcessReceivedCommand+0x8dc>)
 8002a9e:	781b      	ldrb	r3, [r3, #0]
 8002aa0:	461a      	mov	r2, r3
 8002aa2:	4990      	ldr	r1, [pc, #576]	; (8002ce4 <ProcessReceivedCommand+0x8ec>)
 8002aa4:	4886      	ldr	r0, [pc, #536]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002aa6:	f005 fe01 	bl	80086ac <siprintf>
 8002aaa:	4603      	mov	r3, r0
 8002aac:	b2da      	uxtb	r2, r3
 8002aae:	4b85      	ldr	r3, [pc, #532]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002ab0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8002ab2:	4b84      	ldr	r3, [pc, #528]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002ab4:	781b      	ldrb	r3, [r3, #0]
 8002ab6:	b29a      	uxth	r2, r3
 8002ab8:	23c8      	movs	r3, #200	; 0xc8
 8002aba:	4981      	ldr	r1, [pc, #516]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002abc:	4882      	ldr	r0, [pc, #520]	; (8002cc8 <ProcessReceivedCommand+0x8d0>)
 8002abe:	f003 ff14 	bl	80068ea <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002ac2:	220f      	movs	r2, #15
 8002ac4:	2100      	movs	r1, #0
 8002ac6:	487e      	ldr	r0, [pc, #504]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002ac8:	f004 ff68 	bl	800799c <memset>
				break;
 8002acc:	e14a      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			}

		case 17: // Reset MCU
			HAL_NVIC_SystemReset();
 8002ace:	f001 fe28 	bl	8004722 <HAL_NVIC_SystemReset>
			break;
 8002ad2:	e147      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
		case 18: // Servo Enable on/off
			if (MotionCode[1] == 1) // Servo Enable ON
 8002ad4:	4b7e      	ldr	r3, [pc, #504]	; (8002cd0 <ProcessReceivedCommand+0x8d8>)
 8002ad6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002ada:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002ade:	eef4 7a47 	vcmp.f32	s15, s14
 8002ae2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae6:	d105      	bne.n	8002af4 <ProcessReceivedCommand+0x6fc>
			{
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Servo enable on
 8002ae8:	2201      	movs	r2, #1
 8002aea:	2110      	movs	r1, #16
 8002aec:	487e      	ldr	r0, [pc, #504]	; (8002ce8 <ProcessReceivedCommand+0x8f0>)
 8002aee:	f002 fb53 	bl	8005198 <HAL_GPIO_WritePin>
				//HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_RESET); // SPD LIM OFF
			}

			else
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
			break;
 8002af2:	e137      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8002af4:	2200      	movs	r2, #0
 8002af6:	2110      	movs	r1, #16
 8002af8:	487b      	ldr	r0, [pc, #492]	; (8002ce8 <ProcessReceivedCommand+0x8f0>)
 8002afa:	f002 fb4d 	bl	8005198 <HAL_GPIO_WritePin>
			break;
 8002afe:	e131      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 28: // Stop jog move up/down in Position Jog control;
			if (StartRunning) // Setting is not available while running
 8002b00:	4b72      	ldr	r3, [pc, #456]	; (8002ccc <ProcessReceivedCommand+0x8d4>)
 8002b02:	781b      	ldrb	r3, [r3, #0]
 8002b04:	2b00      	cmp	r3, #0
 8002b06:	f040 8124 	bne.w	8002d52 <ProcessReceivedCommand+0x95a>
			{
				break;
			}
			else
			{
				StopPulseGenerating();
 8002b0a:	f7fe febb 	bl	8001884 <StopPulseGenerating>
				break;
 8002b0e:	e129      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			}

		case 31: // Set Experiment Mode Pulling/Dropping/PaD
			if (StartRunning) // Setting is not available while running
 8002b10:	4b6e      	ldr	r3, [pc, #440]	; (8002ccc <ProcessReceivedCommand+0x8d4>)
 8002b12:	781b      	ldrb	r3, [r3, #0]
 8002b14:	2b00      	cmp	r3, #0
 8002b16:	f040 811e 	bne.w	8002d56 <ProcessReceivedCommand+0x95e>
			{
				break;
			}
			else
			{
				ExperimentMode = MotionCode[1]; // 1=Dropping Mode;2 = Pulling; 3= Pulling->Dropping
 8002b1a:	4b6d      	ldr	r3, [pc, #436]	; (8002cd0 <ProcessReceivedCommand+0x8d8>)
 8002b1c:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b20:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b24:	edc7 7a01 	vstr	s15, [r7, #4]
 8002b28:	793b      	ldrb	r3, [r7, #4]
 8002b2a:	b2da      	uxtb	r2, r3
 8002b2c:	4b6f      	ldr	r3, [pc, #444]	; (8002cec <ProcessReceivedCommand+0x8f4>)
 8002b2e:	701a      	strb	r2, [r3, #0]
				//char SetModeBuff[8];
				TxPCLen = sprintf(ResponseMess,"m%de",ExperimentMode);
 8002b30:	4b6e      	ldr	r3, [pc, #440]	; (8002cec <ProcessReceivedCommand+0x8f4>)
 8002b32:	781b      	ldrb	r3, [r3, #0]
 8002b34:	461a      	mov	r2, r3
 8002b36:	496e      	ldr	r1, [pc, #440]	; (8002cf0 <ProcessReceivedCommand+0x8f8>)
 8002b38:	4861      	ldr	r0, [pc, #388]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002b3a:	f005 fdb7 	bl	80086ac <siprintf>
 8002b3e:	4603      	mov	r3, r0
 8002b40:	b2da      	uxtb	r2, r3
 8002b42:	4b60      	ldr	r3, [pc, #384]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002b44:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002b48:	781b      	ldrb	r3, [r3, #0]
 8002b4a:	b29a      	uxth	r2, r3
 8002b4c:	2364      	movs	r3, #100	; 0x64
 8002b4e:	495c      	ldr	r1, [pc, #368]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002b50:	485d      	ldr	r0, [pc, #372]	; (8002cc8 <ProcessReceivedCommand+0x8d0>)
 8002b52:	f003 feca 	bl	80068ea <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002b56:	220f      	movs	r2, #15
 8002b58:	2100      	movs	r1, #0
 8002b5a:	4859      	ldr	r0, [pc, #356]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002b5c:	f004 ff1e 	bl	800799c <memset>
				break;
 8002b60:	e100      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			}

		case 37: // Set Stopping Time
			if (StartRunning)// Setting is not available while running
 8002b62:	4b5a      	ldr	r3, [pc, #360]	; (8002ccc <ProcessReceivedCommand+0x8d4>)
 8002b64:	781b      	ldrb	r3, [r3, #0]
 8002b66:	2b00      	cmp	r3, #0
 8002b68:	f040 80f7 	bne.w	8002d5a <ProcessReceivedCommand+0x962>
			{
				break;
			}
			else
			{
				StoppingTime = MotionCode[1];
 8002b6c:	4b58      	ldr	r3, [pc, #352]	; (8002cd0 <ProcessReceivedCommand+0x8d8>)
 8002b6e:	edd3 7a01 	vldr	s15, [r3, #4]
 8002b72:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002b76:	ee17 3a90 	vmov	r3, s15
 8002b7a:	b29a      	uxth	r2, r3
 8002b7c:	4b5d      	ldr	r3, [pc, #372]	; (8002cf4 <ProcessReceivedCommand+0x8fc>)
 8002b7e:	801a      	strh	r2, [r3, #0]

				TxPCLen = sprintf(ResponseMess,"r37/%de",StoppingTime);
 8002b80:	4b5c      	ldr	r3, [pc, #368]	; (8002cf4 <ProcessReceivedCommand+0x8fc>)
 8002b82:	881b      	ldrh	r3, [r3, #0]
 8002b84:	461a      	mov	r2, r3
 8002b86:	495c      	ldr	r1, [pc, #368]	; (8002cf8 <ProcessReceivedCommand+0x900>)
 8002b88:	484d      	ldr	r0, [pc, #308]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002b8a:	f005 fd8f 	bl	80086ac <siprintf>
 8002b8e:	4603      	mov	r3, r0
 8002b90:	b2da      	uxtb	r2, r3
 8002b92:	4b4c      	ldr	r3, [pc, #304]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002b94:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8002b96:	4b4b      	ldr	r3, [pc, #300]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002b98:	781b      	ldrb	r3, [r3, #0]
 8002b9a:	b29a      	uxth	r2, r3
 8002b9c:	23c8      	movs	r3, #200	; 0xc8
 8002b9e:	4948      	ldr	r1, [pc, #288]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002ba0:	4849      	ldr	r0, [pc, #292]	; (8002cc8 <ProcessReceivedCommand+0x8d0>)
 8002ba2:	f003 fea2 	bl	80068ea <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002ba6:	220f      	movs	r2, #15
 8002ba8:	2100      	movs	r1, #0
 8002baa:	4845      	ldr	r0, [pc, #276]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002bac:	f004 fef6 	bl	800799c <memset>
				break;
 8002bb0:	e0d8      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			}
		case 38: // Homing task
			if (StartRunning)// Setting is not available while running
 8002bb2:	4b46      	ldr	r3, [pc, #280]	; (8002ccc <ProcessReceivedCommand+0x8d4>)
 8002bb4:	781b      	ldrb	r3, [r3, #0]
 8002bb6:	2b00      	cmp	r3, #0
 8002bb8:	f040 80d1 	bne.w	8002d5e <ProcessReceivedCommand+0x966>
			{
				break;
			}
			else
			{
				IsHoming = true;
 8002bbc:	4b4f      	ldr	r3, [pc, #316]	; (8002cfc <ProcessReceivedCommand+0x904>)
 8002bbe:	2201      	movs	r2, #1
 8002bc0:	701a      	strb	r2, [r3, #0]
				Direction = false; // false = move up, true = move down
 8002bc2:	4b4f      	ldr	r3, [pc, #316]	; (8002d00 <ProcessReceivedCommand+0x908>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
				PRIsToggled = true; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002bc8:	4b4e      	ldr	r3, [pc, #312]	; (8002d04 <ProcessReceivedCommand+0x90c>)
 8002bca:	2201      	movs	r2, #1
 8002bcc:	701a      	strb	r2, [r3, #0]
				DisableSTOP(); // Disable the stop
 8002bce:	f7fe fb4b 	bl	8001268 <DisableSTOP>
				InitPulseGenerating(true);
 8002bd2:	2001      	movs	r0, #1
 8002bd4:	f7fe fe74 	bl	80018c0 <InitPulseGenerating>
			}
			break;
 8002bd8:	e0c4      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 39: // Set Driver type, FDA7000 or ASDA A3
			if (StartRunning)// Setting is not available while running
 8002bda:	4b3c      	ldr	r3, [pc, #240]	; (8002ccc <ProcessReceivedCommand+0x8d4>)
 8002bdc:	781b      	ldrb	r3, [r3, #0]
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	f040 80bf 	bne.w	8002d62 <ProcessReceivedCommand+0x96a>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // FDA7000
 8002be4:	4b3a      	ldr	r3, [pc, #232]	; (8002cd0 <ProcessReceivedCommand+0x8d8>)
 8002be6:	edd3 7a01 	vldr	s15, [r3, #4]
 8002bea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8002bee:	eef4 7a47 	vcmp.f32	s15, s14
 8002bf2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf6:	d10d      	bne.n	8002c14 <ProcessReceivedCommand+0x81c>
				{
					MotorDriver = true;
 8002bf8:	4b43      	ldr	r3, [pc, #268]	; (8002d08 <ProcessReceivedCommand+0x910>)
 8002bfa:	2201      	movs	r2, #1
 8002bfc:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 29; // For FDA7000, read 5 register => receive 25 bytes
 8002bfe:	4b43      	ldr	r3, [pc, #268]	; (8002d0c <ProcessReceivedCommand+0x914>)
 8002c00:	221d      	movs	r2, #29
 8002c02:	701a      	strb	r2, [r3, #0]
					EncoderResolution = HigenEncoderResolution;
 8002c04:	4b42      	ldr	r3, [pc, #264]	; (8002d10 <ProcessReceivedCommand+0x918>)
 8002c06:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002c0a:	801a      	strh	r2, [r3, #0]
					EgearRatio = 8; // Depend on the driver setting, change this value when driver setting change
 8002c0c:	4b41      	ldr	r3, [pc, #260]	; (8002d14 <ProcessReceivedCommand+0x91c>)
 8002c0e:	2208      	movs	r2, #8
 8002c10:	701a      	strb	r2, [r3, #0]
 8002c12:	e00c      	b.n	8002c2e <ProcessReceivedCommand+0x836>
				}
				else // ASDA A3
				{
					EgearRatio = 1;
 8002c14:	4b3f      	ldr	r3, [pc, #252]	; (8002d14 <ProcessReceivedCommand+0x91c>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
					MotorDriver = false;
 8002c1a:	4b3b      	ldr	r3, [pc, #236]	; (8002d08 <ProcessReceivedCommand+0x910>)
 8002c1c:	2200      	movs	r2, #0
 8002c1e:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 17;
 8002c20:	4b3a      	ldr	r3, [pc, #232]	; (8002d0c <ProcessReceivedCommand+0x914>)
 8002c22:	2211      	movs	r2, #17
 8002c24:	701a      	strb	r2, [r3, #0]
					EncoderResolution = AsdaEncoderResolution;
 8002c26:	4b3a      	ldr	r3, [pc, #232]	; (8002d10 <ProcessReceivedCommand+0x918>)
 8002c28:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002c2c:	801a      	strh	r2, [r3, #0]
					// For ASDA Drier, read 1 register => receive 9 bytes
					// read 2 registers => receive 13 bytes
				}
				TxPCLen = sprintf(ResponseMess,"g39/%de",MotorDriver);
 8002c2e:	4b36      	ldr	r3, [pc, #216]	; (8002d08 <ProcessReceivedCommand+0x910>)
 8002c30:	781b      	ldrb	r3, [r3, #0]
 8002c32:	461a      	mov	r2, r3
 8002c34:	4938      	ldr	r1, [pc, #224]	; (8002d18 <ProcessReceivedCommand+0x920>)
 8002c36:	4822      	ldr	r0, [pc, #136]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002c38:	f005 fd38 	bl	80086ac <siprintf>
 8002c3c:	4603      	mov	r3, r0
 8002c3e:	b2da      	uxtb	r2, r3
 8002c40:	4b20      	ldr	r3, [pc, #128]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002c42:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8002c44:	4b1f      	ldr	r3, [pc, #124]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002c46:	781b      	ldrb	r3, [r3, #0]
 8002c48:	b29a      	uxth	r2, r3
 8002c4a:	23c8      	movs	r3, #200	; 0xc8
 8002c4c:	491c      	ldr	r1, [pc, #112]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002c4e:	481e      	ldr	r0, [pc, #120]	; (8002cc8 <ProcessReceivedCommand+0x8d0>)
 8002c50:	f003 fe4b 	bl	80068ea <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002c54:	220f      	movs	r2, #15
 8002c56:	2100      	movs	r1, #0
 8002c58:	4819      	ldr	r0, [pc, #100]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002c5a:	f004 fe9f 	bl	800799c <memset>
			}
			break;
 8002c5e:	e081      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		case 42: // Set Distance Coefficient
			if (StartRunning)// Setting is not available while running
 8002c60:	4b1a      	ldr	r3, [pc, #104]	; (8002ccc <ProcessReceivedCommand+0x8d4>)
 8002c62:	781b      	ldrb	r3, [r3, #0]
 8002c64:	2b00      	cmp	r3, #0
 8002c66:	d005      	beq.n	8002c74 <ProcessReceivedCommand+0x87c>
			{
				InitializeRunning(ExperimentMode);
 8002c68:	4b20      	ldr	r3, [pc, #128]	; (8002cec <ProcessReceivedCommand+0x8f4>)
 8002c6a:	781b      	ldrb	r3, [r3, #0]
 8002c6c:	4618      	mov	r0, r3
 8002c6e:	f7ff f973 	bl	8001f58 <InitializeRunning>

				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 8002c72:	e077      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				DistCoeff = MotionCode[1];
 8002c74:	4b16      	ldr	r3, [pc, #88]	; (8002cd0 <ProcessReceivedCommand+0x8d8>)
 8002c76:	685b      	ldr	r3, [r3, #4]
 8002c78:	4a28      	ldr	r2, [pc, #160]	; (8002d1c <ProcessReceivedCommand+0x924>)
 8002c7a:	6013      	str	r3, [r2, #0]
				Initialized = false;
 8002c7c:	4b18      	ldr	r3, [pc, #96]	; (8002ce0 <ProcessReceivedCommand+0x8e8>)
 8002c7e:	2200      	movs	r2, #0
 8002c80:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
 8002c82:	4b26      	ldr	r3, [pc, #152]	; (8002d1c <ProcessReceivedCommand+0x924>)
 8002c84:	681b      	ldr	r3, [r3, #0]
 8002c86:	4618      	mov	r0, r3
 8002c88:	f7fd fc5e 	bl	8000548 <__aeabi_f2d>
 8002c8c:	4602      	mov	r2, r0
 8002c8e:	460b      	mov	r3, r1
 8002c90:	4923      	ldr	r1, [pc, #140]	; (8002d20 <ProcessReceivedCommand+0x928>)
 8002c92:	480b      	ldr	r0, [pc, #44]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002c94:	f005 fd0a 	bl	80086ac <siprintf>
 8002c98:	4603      	mov	r3, r0
 8002c9a:	b2da      	uxtb	r2, r3
 8002c9c:	4b09      	ldr	r3, [pc, #36]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002c9e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8002ca0:	4b08      	ldr	r3, [pc, #32]	; (8002cc4 <ProcessReceivedCommand+0x8cc>)
 8002ca2:	781b      	ldrb	r3, [r3, #0]
 8002ca4:	b29a      	uxth	r2, r3
 8002ca6:	2364      	movs	r3, #100	; 0x64
 8002ca8:	4905      	ldr	r1, [pc, #20]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002caa:	4807      	ldr	r0, [pc, #28]	; (8002cc8 <ProcessReceivedCommand+0x8d0>)
 8002cac:	f003 fe1d 	bl	80068ea <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8002cb0:	220f      	movs	r2, #15
 8002cb2:	2100      	movs	r1, #0
 8002cb4:	4802      	ldr	r0, [pc, #8]	; (8002cc0 <ProcessReceivedCommand+0x8c8>)
 8002cb6:	f004 fe71 	bl	800799c <memset>
			break;
 8002cba:	e053      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
 8002cbc:	0800c3e0 	.word	0x0800c3e0
 8002cc0:	20000418 	.word	0x20000418
 8002cc4:	20000410 	.word	0x20000410
 8002cc8:	200002f4 	.word	0x200002f4
 8002ccc:	2000042e 	.word	0x2000042e
 8002cd0:	20006298 	.word	0x20006298
 8002cd4:	20006214 	.word	0x20006214
 8002cd8:	2000043e 	.word	0x2000043e
 8002cdc:	20000440 	.word	0x20000440
 8002ce0:	20000439 	.word	0x20000439
 8002ce4:	0800c3e8 	.word	0x0800c3e8
 8002ce8:	40020800 	.word	0x40020800
 8002cec:	20006200 	.word	0x20006200
 8002cf0:	0800c3f0 	.word	0x0800c3f0
 8002cf4:	20000008 	.word	0x20000008
 8002cf8:	0800c3f8 	.word	0x0800c3f8
 8002cfc:	20000438 	.word	0x20000438
 8002d00:	20000431 	.word	0x20000431
 8002d04:	2000043b 	.word	0x2000043b
 8002d08:	20000003 	.word	0x20000003
 8002d0c:	20000000 	.word	0x20000000
 8002d10:	2000000a 	.word	0x2000000a
 8002d14:	20000006 	.word	0x20000006
 8002d18:	0800c400 	.word	0x0800c400
 8002d1c:	200062b8 	.word	0x200062b8
 8002d20:	0800c408 	.word	0x0800c408

		case 46: // Set origin (home) position
			OriginPulse = MotorEncPulse;
 8002d24:	4b11      	ldr	r3, [pc, #68]	; (8002d6c <ProcessReceivedCommand+0x974>)
 8002d26:	681b      	ldr	r3, [r3, #0]
 8002d28:	4a11      	ldr	r2, [pc, #68]	; (8002d70 <ProcessReceivedCommand+0x978>)
 8002d2a:	6013      	str	r3, [r2, #0]
			PositionPulseCmd = 0;
 8002d2c:	4b11      	ldr	r3, [pc, #68]	; (8002d74 <ProcessReceivedCommand+0x97c>)
 8002d2e:	2200      	movs	r2, #0
 8002d30:	601a      	str	r2, [r3, #0]
			PulseSimuCount = 0;
 8002d32:	4b11      	ldr	r3, [pc, #68]	; (8002d78 <ProcessReceivedCommand+0x980>)
 8002d34:	2200      	movs	r2, #0
 8002d36:	601a      	str	r2, [r3, #0]
			//PulseClear();
			break;
 8002d38:	e014      	b.n	8002d64 <ProcessReceivedCommand+0x96c>

		default:
			break;
 8002d3a:	bf00      	nop
 8002d3c:	e012      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			break;
 8002d3e:	bf00      	nop
 8002d40:	e010      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
			break;
 8002d42:	bf00      	nop
 8002d44:	e00e      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				break;
 8002d46:	bf00      	nop
 8002d48:	e00c      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				break;
 8002d4a:	bf00      	nop
 8002d4c:	e00a      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				break;
 8002d4e:	bf00      	nop
 8002d50:	e008      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				break;
 8002d52:	bf00      	nop
 8002d54:	e006      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				break;
 8002d56:	bf00      	nop
 8002d58:	e004      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				break;
 8002d5a:	bf00      	nop
 8002d5c:	e002      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				break;
 8002d5e:	bf00      	nop
 8002d60:	e000      	b.n	8002d64 <ProcessReceivedCommand+0x96c>
				break;
 8002d62:	bf00      	nop
	}
}
 8002d64:	bf00      	nop
 8002d66:	371c      	adds	r7, #28
 8002d68:	46bd      	mov	sp, r7
 8002d6a:	bd90      	pop	{r4, r7, pc}
 8002d6c:	2000628c 	.word	0x2000628c
 8002d70:	20006220 	.word	0x20006220
 8002d74:	20006230 	.word	0x20006230
 8002d78:	2000622c 	.word	0x2000622c

08002d7c <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback function when a receiving complete
{
 8002d7c:	b580      	push	{r7, lr}
 8002d7e:	b082      	sub	sp, #8
 8002d80:	af00      	add	r7, sp, #0
 8002d82:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(huart);

	// BEGIN UART6 Receiving
		if (huart->Instance==USART6) // If it is uart6, UI communication
 8002d84:	687b      	ldr	r3, [r7, #4]
 8002d86:	681b      	ldr	r3, [r3, #0]
 8002d88:	4a2f      	ldr	r2, [pc, #188]	; (8002e48 <HAL_UART_RxCpltCallback+0xcc>)
 8002d8a:	4293      	cmp	r3, r2
 8002d8c:	d121      	bne.n	8002dd2 <HAL_UART_RxCpltCallback+0x56>
		{
			if(RxPCData!=EndChar) // read up to the ending char
 8002d8e:	4b2f      	ldr	r3, [pc, #188]	; (8002e4c <HAL_UART_RxCpltCallback+0xd0>)
 8002d90:	781b      	ldrb	r3, [r3, #0]
 8002d92:	2224      	movs	r2, #36	; 0x24
 8002d94:	4293      	cmp	r3, r2
 8002d96:	d016      	beq.n	8002dc6 <HAL_UART_RxCpltCallback+0x4a>
			{
				if (RxPCData != 0) // remove the null character
 8002d98:	4b2c      	ldr	r3, [pc, #176]	; (8002e4c <HAL_UART_RxCpltCallback+0xd0>)
 8002d9a:	781b      	ldrb	r3, [r3, #0]
 8002d9c:	2b00      	cmp	r3, #0
 8002d9e:	d018      	beq.n	8002dd2 <HAL_UART_RxCpltCallback+0x56>
				//if (RxPCData != NULL) // remove the null character
				{
					RxPCBuff[_rxPCIndex]=RxPCData;// Copy the data to buffer
 8002da0:	4b2b      	ldr	r3, [pc, #172]	; (8002e50 <HAL_UART_RxCpltCallback+0xd4>)
 8002da2:	781b      	ldrb	r3, [r3, #0]
 8002da4:	461a      	mov	r2, r3
 8002da6:	4b29      	ldr	r3, [pc, #164]	; (8002e4c <HAL_UART_RxCpltCallback+0xd0>)
 8002da8:	7819      	ldrb	r1, [r3, #0]
 8002daa:	4b2a      	ldr	r3, [pc, #168]	; (8002e54 <HAL_UART_RxCpltCallback+0xd8>)
 8002dac:	5499      	strb	r1, [r3, r2]
				  _rxPCIndex++;
 8002dae:	4b28      	ldr	r3, [pc, #160]	; (8002e50 <HAL_UART_RxCpltCallback+0xd4>)
 8002db0:	781b      	ldrb	r3, [r3, #0]
 8002db2:	3301      	adds	r3, #1
 8002db4:	b2da      	uxtb	r2, r3
 8002db6:	4b26      	ldr	r3, [pc, #152]	; (8002e50 <HAL_UART_RxCpltCallback+0xd4>)
 8002db8:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8002dba:	2201      	movs	r2, #1
 8002dbc:	4923      	ldr	r1, [pc, #140]	; (8002e4c <HAL_UART_RxCpltCallback+0xd0>)
 8002dbe:	4826      	ldr	r0, [pc, #152]	; (8002e58 <HAL_UART_RxCpltCallback+0xdc>)
 8002dc0:	f003 fe25 	bl	8006a0e <HAL_UART_Receive_IT>
 8002dc4:	e005      	b.n	8002dd2 <HAL_UART_RxCpltCallback+0x56>
				}
			}
			else //if(RxPCData==EndChar)
			{
				_rxPCIndex=0;
 8002dc6:	4b22      	ldr	r3, [pc, #136]	; (8002e50 <HAL_UART_RxCpltCallback+0xd4>)
 8002dc8:	2200      	movs	r2, #0
 8002dca:	701a      	strb	r2, [r3, #0]
				RxUart6_Cpl_Flag=true; // reading completed
 8002dcc:	4b23      	ldr	r3, [pc, #140]	; (8002e5c <HAL_UART_RxCpltCallback+0xe0>)
 8002dce:	2201      	movs	r2, #1
 8002dd0:	701a      	strb	r2, [r3, #0]
		}
	// END UART6

		//BEGIN UART5 = HAL_UART_Receive_IT============================================
		/// Use this part
		if (huart->Instance==UART5) // If it is uart5, driver communication
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4a22      	ldr	r2, [pc, #136]	; (8002e60 <HAL_UART_RxCpltCallback+0xe4>)
 8002dd8:	4293      	cmp	r3, r2
 8002dda:	d130      	bne.n	8002e3e <HAL_UART_RxCpltCallback+0xc2>
		{
			if (_rxDriverIndex >= NoOfBytes) //
 8002ddc:	4b21      	ldr	r3, [pc, #132]	; (8002e64 <HAL_UART_RxCpltCallback+0xe8>)
 8002dde:	781a      	ldrb	r2, [r3, #0]
 8002de0:	4b21      	ldr	r3, [pc, #132]	; (8002e68 <HAL_UART_RxCpltCallback+0xec>)
 8002de2:	781b      	ldrb	r3, [r3, #0]
 8002de4:	429a      	cmp	r2, r3
 8002de6:	d308      	bcc.n	8002dfa <HAL_UART_RxCpltCallback+0x7e>
			{
				RxUart5_Cpl_Flag = true; // Complete Receiving
 8002de8:	4b20      	ldr	r3, [pc, #128]	; (8002e6c <HAL_UART_RxCpltCallback+0xf0>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
				StartReceiveDriverData = false;
 8002dee:	4b20      	ldr	r3, [pc, #128]	; (8002e70 <HAL_UART_RxCpltCallback+0xf4>)
 8002df0:	2200      	movs	r2, #0
 8002df2:	701a      	strb	r2, [r3, #0]
				_rxDriverIndex = 0;
 8002df4:	4b1b      	ldr	r3, [pc, #108]	; (8002e64 <HAL_UART_RxCpltCallback+0xe8>)
 8002df6:	2200      	movs	r2, #0
 8002df8:	701a      	strb	r2, [r3, #0]
			}
			if ((_rxDriverIndex == 0)&&(RxDriverData == DriverID)) // If byte 0 is the Driver ID
 8002dfa:	4b1a      	ldr	r3, [pc, #104]	; (8002e64 <HAL_UART_RxCpltCallback+0xe8>)
 8002dfc:	781b      	ldrb	r3, [r3, #0]
 8002dfe:	2b00      	cmp	r3, #0
 8002e00:	d106      	bne.n	8002e10 <HAL_UART_RxCpltCallback+0x94>
 8002e02:	4b1c      	ldr	r3, [pc, #112]	; (8002e74 <HAL_UART_RxCpltCallback+0xf8>)
 8002e04:	781b      	ldrb	r3, [r3, #0]
 8002e06:	2b01      	cmp	r3, #1
 8002e08:	d102      	bne.n	8002e10 <HAL_UART_RxCpltCallback+0x94>
			{
				StartReceiveDriverData = true;
 8002e0a:	4b19      	ldr	r3, [pc, #100]	; (8002e70 <HAL_UART_RxCpltCallback+0xf4>)
 8002e0c:	2201      	movs	r2, #1
 8002e0e:	701a      	strb	r2, [r3, #0]
			}
			if (StartReceiveDriverData) //
 8002e10:	4b17      	ldr	r3, [pc, #92]	; (8002e70 <HAL_UART_RxCpltCallback+0xf4>)
 8002e12:	781b      	ldrb	r3, [r3, #0]
 8002e14:	b2db      	uxtb	r3, r3
 8002e16:	2b00      	cmp	r3, #0
 8002e18:	d011      	beq.n	8002e3e <HAL_UART_RxCpltCallback+0xc2>
			{
				RxDriverBuff[_rxDriverIndex]=RxDriverData;// Copy the data to buffer
 8002e1a:	4b12      	ldr	r3, [pc, #72]	; (8002e64 <HAL_UART_RxCpltCallback+0xe8>)
 8002e1c:	781b      	ldrb	r3, [r3, #0]
 8002e1e:	461a      	mov	r2, r3
 8002e20:	4b14      	ldr	r3, [pc, #80]	; (8002e74 <HAL_UART_RxCpltCallback+0xf8>)
 8002e22:	7819      	ldrb	r1, [r3, #0]
 8002e24:	4b14      	ldr	r3, [pc, #80]	; (8002e78 <HAL_UART_RxCpltCallback+0xfc>)
 8002e26:	5499      	strb	r1, [r3, r2]
				_rxDriverIndex++;
 8002e28:	4b0e      	ldr	r3, [pc, #56]	; (8002e64 <HAL_UART_RxCpltCallback+0xe8>)
 8002e2a:	781b      	ldrb	r3, [r3, #0]
 8002e2c:	3301      	adds	r3, #1
 8002e2e:	b2da      	uxtb	r2, r3
 8002e30:	4b0c      	ldr	r3, [pc, #48]	; (8002e64 <HAL_UART_RxCpltCallback+0xe8>)
 8002e32:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time ///*/
 8002e34:	2201      	movs	r2, #1
 8002e36:	490f      	ldr	r1, [pc, #60]	; (8002e74 <HAL_UART_RxCpltCallback+0xf8>)
 8002e38:	4810      	ldr	r0, [pc, #64]	; (8002e7c <HAL_UART_RxCpltCallback+0x100>)
 8002e3a:	f003 fde8 	bl	8006a0e <HAL_UART_Receive_IT>
			}
		}
		// END UART5
}
 8002e3e:	bf00      	nop
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	40011400 	.word	0x40011400
 8002e4c:	200003a8 	.word	0x200003a8
 8002e50:	20000427 	.word	0x20000427
 8002e54:	20000338 	.word	0x20000338
 8002e58:	200002f4 	.word	0x200002f4
 8002e5c:	20000429 	.word	0x20000429
 8002e60:	40005000 	.word	0x40005000
 8002e64:	20000428 	.word	0x20000428
 8002e68:	20000000 	.word	0x20000000
 8002e6c:	2000042a 	.word	0x2000042a
 8002e70:	2000042b 	.word	0x2000042b
 8002e74:	200003a9 	.word	0x200003a9
 8002e78:	20000360 	.word	0x20000360
 8002e7c:	200002b0 	.word	0x200002b0

08002e80 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer 2 interrupt, 1ms
{
 8002e80:	b580      	push	{r7, lr}
 8002e82:	b082      	sub	sp, #8
 8002e84:	af00      	add	r7, sp, #0
 8002e86:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)	// TIMER 3 interrupt for pulse generation, period: 2us
 8002e88:	687b      	ldr	r3, [r7, #4]
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4a60      	ldr	r2, [pc, #384]	; (8003010 <HAL_TIM_PeriodElapsedCallback+0x190>)
 8002e8e:	4293      	cmp	r3, r2
 8002e90:	f040 8086 	bne.w	8002fa0 <HAL_TIM_PeriodElapsedCallback+0x120>
	{
		if (PulseGenerationFlag) // Only generating pulse when the flag is ON. Otherwise, do nothing
 8002e94:	4b5f      	ldr	r3, [pc, #380]	; (8003014 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8002e96:	781b      	ldrb	r3, [r3, #0]
 8002e98:	2b00      	cmp	r3, #0
 8002e9a:	f000 8081 	beq.w	8002fa0 <HAL_TIM_PeriodElapsedCallback+0x120>
		{
				Timer3Count++;
 8002e9e:	4b5e      	ldr	r3, [pc, #376]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002ea0:	881b      	ldrh	r3, [r3, #0]
 8002ea2:	3301      	adds	r3, #1
 8002ea4:	b29a      	uxth	r2, r3
 8002ea6:	4b5c      	ldr	r3, [pc, #368]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002ea8:	801a      	strh	r2, [r3, #0]
				if (Timer3Count >= Timer3CountPeriod) // Generate pulse
 8002eaa:	4b5b      	ldr	r3, [pc, #364]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002eac:	881a      	ldrh	r2, [r3, #0]
 8002eae:	4b5b      	ldr	r3, [pc, #364]	; (800301c <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8002eb0:	881b      	ldrh	r3, [r3, #0]
 8002eb2:	429a      	cmp	r2, r3
 8002eb4:	d374      	bcc.n	8002fa0 <HAL_TIM_PeriodElapsedCallback+0x120>
				{
					Timer3Count = 0;
 8002eb6:	4b58      	ldr	r3, [pc, #352]	; (8003018 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8002eb8:	2200      	movs	r2, #0
 8002eba:	801a      	strh	r2, [r3, #0]

					if(StartSimulating) // Check the no of pulse generated in Simulating
 8002ebc:	4b58      	ldr	r3, [pc, #352]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002ebe:	781b      	ldrb	r3, [r3, #0]
 8002ec0:	2b00      	cmp	r3, #0
 8002ec2:	d030      	beq.n	8002f26 <HAL_TIM_PeriodElapsedCallback+0xa6>
					{
						if (IsReachTargetPosition)
 8002ec4:	4b57      	ldr	r3, [pc, #348]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002ec6:	781b      	ldrb	r3, [r3, #0]
 8002ec8:	b2db      	uxtb	r3, r3
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	f040 8099 	bne.w	8003002 <HAL_TIM_PeriodElapsedCallback+0x182>
						{
							return;
						}
						if ( abs(PulseSimuCount) >= abs(TargetPosition))
 8002ed0:	4b55      	ldr	r3, [pc, #340]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002ed2:	681b      	ldr	r3, [r3, #0]
 8002ed4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002ed8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002edc:	4b53      	ldr	r3, [pc, #332]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	2b00      	cmp	r3, #0
 8002ee2:	bfb8      	it	lt
 8002ee4:	425b      	neglt	r3, r3
 8002ee6:	429a      	cmp	r2, r3
 8002ee8:	db0d      	blt.n	8002f06 <HAL_TIM_PeriodElapsedCallback+0x86>
						{
							IsReachTargetPosition = true;
 8002eea:	4b4e      	ldr	r3, [pc, #312]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002eec:	2201      	movs	r2, #1
 8002eee:	701a      	strb	r2, [r3, #0]
							PositionSimCmd += PulseSimuCount;
 8002ef0:	4b4d      	ldr	r3, [pc, #308]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002ef2:	681a      	ldr	r2, [r3, #0]
 8002ef4:	4b4e      	ldr	r3, [pc, #312]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002ef6:	681b      	ldr	r3, [r3, #0]
 8002ef8:	4413      	add	r3, r2
 8002efa:	4a4d      	ldr	r2, [pc, #308]	; (8003030 <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8002efc:	6013      	str	r3, [r2, #0]
							PulseSimuCount = 0;
 8002efe:	4b4a      	ldr	r3, [pc, #296]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002f00:	2200      	movs	r2, #0
 8002f02:	601a      	str	r2, [r3, #0]
							return;
 8002f04:	e080      	b.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
						}
						if (Direction) // go down
 8002f06:	4b4b      	ldr	r3, [pc, #300]	; (8003034 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8002f08:	781b      	ldrb	r3, [r3, #0]
 8002f0a:	2b00      	cmp	r3, #0
 8002f0c:	d005      	beq.n	8002f1a <HAL_TIM_PeriodElapsedCallback+0x9a>
						{
							PulseSimuCount++;
 8002f0e:	4b46      	ldr	r3, [pc, #280]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	3301      	adds	r3, #1
 8002f14:	4a44      	ldr	r2, [pc, #272]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002f16:	6013      	str	r3, [r2, #0]
						}
						else // move up
						{
							PulseSimuCount--;
						}
						return;
 8002f18:	e076      	b.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
							PulseSimuCount--;
 8002f1a:	4b43      	ldr	r3, [pc, #268]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002f1c:	681b      	ldr	r3, [r3, #0]
 8002f1e:	3b01      	subs	r3, #1
 8002f20:	4a41      	ldr	r2, [pc, #260]	; (8003028 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8002f22:	6013      	str	r3, [r2, #0]
						return;
 8002f24:	e070      	b.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
					}

					if (StartRunning)
 8002f26:	4b44      	ldr	r3, [pc, #272]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002f28:	781b      	ldrb	r3, [r3, #0]
 8002f2a:	2b00      	cmp	r3, #0
 8002f2c:	d018      	beq.n	8002f60 <HAL_TIM_PeriodElapsedCallback+0xe0>
					{
						if (IsReachTargetPosition)
 8002f2e:	4b3d      	ldr	r3, [pc, #244]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002f30:	781b      	ldrb	r3, [r3, #0]
 8002f32:	b2db      	uxtb	r3, r3
 8002f34:	2b00      	cmp	r3, #0
 8002f36:	d166      	bne.n	8003006 <HAL_TIM_PeriodElapsedCallback+0x186>
						{
							return;
						}
						if ( abs(PositionPulseCmd) >= abs(TargetPosition))
 8002f38:	4b40      	ldr	r3, [pc, #256]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002f3a:	681b      	ldr	r3, [r3, #0]
 8002f3c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002f40:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002f44:	4b39      	ldr	r3, [pc, #228]	; (800302c <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8002f46:	681b      	ldr	r3, [r3, #0]
 8002f48:	2b00      	cmp	r3, #0
 8002f4a:	bfb8      	it	lt
 8002f4c:	425b      	neglt	r3, r3
 8002f4e:	429a      	cmp	r2, r3
 8002f50:	db06      	blt.n	8002f60 <HAL_TIM_PeriodElapsedCallback+0xe0>
						{
							PositionPulseCmd = 0;
 8002f52:	4b3a      	ldr	r3, [pc, #232]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002f54:	2200      	movs	r2, #0
 8002f56:	601a      	str	r2, [r3, #0]
							IsReachTargetPosition = true;
 8002f58:	4b32      	ldr	r3, [pc, #200]	; (8003024 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8002f5a:	2201      	movs	r2, #1
 8002f5c:	701a      	strb	r2, [r3, #0]
							return;
 8002f5e:	e053      	b.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
						}
					}

					if (PRIsToggled)
 8002f60:	4b37      	ldr	r3, [pc, #220]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002f62:	781b      	ldrb	r3, [r3, #0]
 8002f64:	2b00      	cmp	r3, #0
 8002f66:	d00d      	beq.n	8002f84 <HAL_TIM_PeriodElapsedCallback+0x104>
					{
						HAL_GPIO_TogglePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin); // Generate pulses on PF by tonggling this input
 8002f68:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002f6c:	4835      	ldr	r0, [pc, #212]	; (8003044 <HAL_TIM_PeriodElapsedCallback+0x1c4>)
 8002f6e:	f002 f92c 	bl	80051ca <HAL_GPIO_TogglePin>
						PRIsToggled = false;
 8002f72:	4b33      	ldr	r3, [pc, #204]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002f74:	2200      	movs	r2, #0
 8002f76:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd++;
 8002f78:	4b30      	ldr	r3, [pc, #192]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002f7a:	681b      	ldr	r3, [r3, #0]
 8002f7c:	3301      	adds	r3, #1
 8002f7e:	4a2f      	ldr	r2, [pc, #188]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002f80:	6013      	str	r3, [r2, #0]
						return; // exit the function
 8002f82:	e041      	b.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
					}
					else
					{
						HAL_GPIO_TogglePin(PC8_PR_GPIO_Port, PC8_PR_Pin); // Generate pulses on PF by tonggling this input
 8002f84:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002f88:	482f      	ldr	r0, [pc, #188]	; (8003048 <HAL_TIM_PeriodElapsedCallback+0x1c8>)
 8002f8a:	f002 f91e 	bl	80051ca <HAL_GPIO_TogglePin>
						PRIsToggled = true;
 8002f8e:	4b2c      	ldr	r3, [pc, #176]	; (8003040 <HAL_TIM_PeriodElapsedCallback+0x1c0>)
 8002f90:	2201      	movs	r2, #1
 8002f92:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd++;
 8002f94:	4b29      	ldr	r3, [pc, #164]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	3301      	adds	r3, #1
 8002f9a:	4a28      	ldr	r2, [pc, #160]	; (800303c <HAL_TIM_PeriodElapsedCallback+0x1bc>)
 8002f9c:	6013      	str	r3, [r2, #0]
						return;
 8002f9e:	e033      	b.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
					}
				}
		}
	}

	if (htim->Instance == TIM2) // Timer 2 interrupt, for the main control function, 1ms
 8002fa0:	687b      	ldr	r3, [r7, #4]
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002fa8:	d12e      	bne.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
		{
				Timer2SampleTimeControlCount++;
 8002faa:	4b28      	ldr	r3, [pc, #160]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002fac:	781b      	ldrb	r3, [r3, #0]
 8002fae:	3301      	adds	r3, #1
 8002fb0:	b2da      	uxtb	r2, r3
 8002fb2:	4b26      	ldr	r3, [pc, #152]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002fb4:	701a      	strb	r2, [r3, #0]
				if (Timer2SampleTimeControlCount >= SampleTime) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 8002fb6:	4b25      	ldr	r3, [pc, #148]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002fb8:	781a      	ldrb	r2, [r3, #0]
 8002fba:	4b25      	ldr	r3, [pc, #148]	; (8003050 <HAL_TIM_PeriodElapsedCallback+0x1d0>)
 8002fbc:	781b      	ldrb	r3, [r3, #0]
 8002fbe:	429a      	cmp	r2, r3
 8002fc0:	d30e      	bcc.n	8002fe0 <HAL_TIM_PeriodElapsedCallback+0x160>
				{
					if (StartSimulating)
 8002fc2:	4b17      	ldr	r3, [pc, #92]	; (8003020 <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8002fc4:	781b      	ldrb	r3, [r3, #0]
 8002fc6:	2b00      	cmp	r3, #0
 8002fc8:	d001      	beq.n	8002fce <HAL_TIM_PeriodElapsedCallback+0x14e>
					{
						Simulating();
 8002fca:	f7ff f945 	bl	8002258 <Simulating>
					}
					if (StartRunning)
 8002fce:	4b1a      	ldr	r3, [pc, #104]	; (8003038 <HAL_TIM_PeriodElapsedCallback+0x1b8>)
 8002fd0:	781b      	ldrb	r3, [r3, #0]
 8002fd2:	2b00      	cmp	r3, #0
 8002fd4:	d001      	beq.n	8002fda <HAL_TIM_PeriodElapsedCallback+0x15a>
					{
						RunningExperiment();
 8002fd6:	f7ff f97f 	bl	80022d8 <RunningExperiment>
					}
					Timer2SampleTimeControlCount = 0;
 8002fda:	4b1c      	ldr	r3, [pc, #112]	; (800304c <HAL_TIM_PeriodElapsedCallback+0x1cc>)
 8002fdc:	2200      	movs	r2, #0
 8002fde:	701a      	strb	r2, [r3, #0]
				}

				// To transmit the data each 50ms
				Timer2Count++;
 8002fe0:	4b1c      	ldr	r3, [pc, #112]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002fe2:	781b      	ldrb	r3, [r3, #0]
 8002fe4:	3301      	adds	r3, #1
 8002fe6:	b2da      	uxtb	r2, r3
 8002fe8:	4b1a      	ldr	r3, [pc, #104]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002fea:	701a      	strb	r2, [r3, #0]
				if (Timer2Count >= 25) // turn on the flag when the sample time reaches, fix the data sample time to 50
 8002fec:	4b19      	ldr	r3, [pc, #100]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002fee:	781b      	ldrb	r3, [r3, #0]
 8002ff0:	2b18      	cmp	r3, #24
 8002ff2:	d909      	bls.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
				{
					Timer2SampleTimeInterrupt = true;
 8002ff4:	4b18      	ldr	r3, [pc, #96]	; (8003058 <HAL_TIM_PeriodElapsedCallback+0x1d8>)
 8002ff6:	2201      	movs	r2, #1
 8002ff8:	701a      	strb	r2, [r3, #0]
					Timer2Count = 0;
 8002ffa:	4b16      	ldr	r3, [pc, #88]	; (8003054 <HAL_TIM_PeriodElapsedCallback+0x1d4>)
 8002ffc:	2200      	movs	r2, #0
 8002ffe:	701a      	strb	r2, [r3, #0]
 8003000:	e002      	b.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
							return;
 8003002:	bf00      	nop
 8003004:	e000      	b.n	8003008 <HAL_TIM_PeriodElapsedCallback+0x188>
							return;
 8003006:	bf00      	nop
				}
		}
}
 8003008:	3708      	adds	r7, #8
 800300a:	46bd      	mov	sp, r7
 800300c:	bd80      	pop	{r7, pc}
 800300e:	bf00      	nop
 8003010:	40000400 	.word	0x40000400
 8003014:	20000433 	.word	0x20000433
 8003018:	2000620a 	.word	0x2000620a
 800301c:	20006208 	.word	0x20006208
 8003020:	20000430 	.word	0x20000430
 8003024:	20000435 	.word	0x20000435
 8003028:	2000622c 	.word	0x2000622c
 800302c:	20006228 	.word	0x20006228
 8003030:	20006234 	.word	0x20006234
 8003034:	20000431 	.word	0x20000431
 8003038:	2000042e 	.word	0x2000042e
 800303c:	20006230 	.word	0x20006230
 8003040:	2000043b 	.word	0x2000043b
 8003044:	40021000 	.word	0x40021000
 8003048:	40020800 	.word	0x40020800
 800304c:	20006202 	.word	0x20006202
 8003050:	20006214 	.word	0x20006214
 8003054:	20006201 	.word	0x20006201
 8003058:	2000042c 	.word	0x2000042c
 800305c:	00000000 	.word	0x00000000

08003060 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8003060:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8003064:	b089      	sub	sp, #36	; 0x24
 8003066:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8003068:	f001 f9aa 	bl	80043c0 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800306c:	f000 fbe8 	bl	8003840 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8003070:	f000 fd86 	bl	8003b80 <MX_GPIO_Init>
  MX_TIM2_Init();
 8003074:	f000 fc6a 	bl	800394c <MX_TIM2_Init>
  MX_USART6_UART_Init();
 8003078:	f000 fd58 	bl	8003b2c <MX_USART6_UART_Init>
  MX_TIM3_Init();
 800307c:	f000 fce0 	bl	8003a40 <MX_TIM3_Init>
  MX_UART5_Init();
 8003080:	f000 fd2a 	bl	8003ad8 <MX_UART5_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8003084:	f000 fc46 	bl	8003914 <MX_NVIC_Init>

  	//HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET); // SPD LIM OFF
  	//HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port, Speed2_Not_PE7_15_Pin, GPIO_PIN_SET); // SPD LIM OFF
  	//DisableSTOP();

	HAL_GPIO_WritePin(PE15_RELAY1_GPIO_Port, PE15_RELAY1_Pin, GPIO_PIN_SET);
 8003088:	2201      	movs	r2, #1
 800308a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800308e:	489a      	ldr	r0, [pc, #616]	; (80032f8 <main+0x298>)
 8003090:	f002 f882 	bl	8005198 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8003094:	f241 3088 	movw	r0, #5000	; 0x1388
 8003098:	f001 fa04 	bl	80044a4 <HAL_Delay>

	InitParams (); // Read the saved params from the flash memory
 800309c:	f7ff f85a 	bl	8002154 <InitParams>

	HAL_TIM_Base_Start_IT(&htim2); // Enable Timer 2 interrupt
 80030a0:	4896      	ldr	r0, [pc, #600]	; (80032fc <main+0x29c>)
 80030a2:	f002 fd55 	bl	8005b50 <HAL_TIM_Base_Start_IT>

	HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 80030a6:	2201      	movs	r2, #1
 80030a8:	4995      	ldr	r1, [pc, #596]	; (8003300 <main+0x2a0>)
 80030aa:	4896      	ldr	r0, [pc, #600]	; (8003304 <main+0x2a4>)
 80030ac:	f003 fcaf 	bl	8006a0e <HAL_UART_Receive_IT>

	DriverInit();
 80030b0:	f7fe f90e 	bl	80012d0 <DriverInit>
	ReadMultiRegister(StE03,5);
 80030b4:	2105      	movs	r1, #5
 80030b6:	200c      	movs	r0, #12
 80030b8:	f7fe fa76 	bl	80015a8 <ReadMultiRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Process Received Cmd from the GUI
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 80030bc:	4b92      	ldr	r3, [pc, #584]	; (8003308 <main+0x2a8>)
 80030be:	781b      	ldrb	r3, [r3, #0]
 80030c0:	b2db      	uxtb	r3, r3
 80030c2:	2b00      	cmp	r3, #0
 80030c4:	d00b      	beq.n	80030de <main+0x7e>
			{
				ExtractMotionCode();
 80030c6:	f7fe fa13 	bl	80014f0 <ExtractMotionCode>
				ProcessReceivedCommand (); // Proceed the command
 80030ca:	f7ff f995 	bl	80023f8 <ProcessReceivedCommand>
				RxUart6_Cpl_Flag=false;
 80030ce:	4b8e      	ldr	r3, [pc, #568]	; (8003308 <main+0x2a8>)
 80030d0:	2200      	movs	r2, #0
 80030d2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 80030d4:	2201      	movs	r2, #1
 80030d6:	498a      	ldr	r1, [pc, #552]	; (8003300 <main+0x2a0>)
 80030d8:	488a      	ldr	r0, [pc, #552]	; (8003304 <main+0x2a4>)
 80030da:	f003 fc98 	bl	8006a0e <HAL_UART_Receive_IT>
			}
		// END UART6 Process Cmd

		// Process Timer2 interrupt after a period of Sampletime
		if (Timer2ControlInterrupt)
 80030de:	4b8b      	ldr	r3, [pc, #556]	; (800330c <main+0x2ac>)
 80030e0:	781b      	ldrb	r3, [r3, #0]
 80030e2:	b2db      	uxtb	r3, r3
 80030e4:	2b00      	cmp	r3, #0
 80030e6:	d002      	beq.n	80030ee <main+0x8e>
		{
			Timer2ControlInterrupt = false; // Reset the flag
 80030e8:	4b88      	ldr	r3, [pc, #544]	; (800330c <main+0x2ac>)
 80030ea:	2200      	movs	r2, #0
 80030ec:	701a      	strb	r2, [r3, #0]

		}
		// END Timer2ControlInterrupt

		// Process Emergency Stop
		if (StartRunning)
 80030ee:	4b88      	ldr	r3, [pc, #544]	; (8003310 <main+0x2b0>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d00d      	beq.n	8003112 <main+0xb2>
		{
			// Read CN1-22-RDY, Check if Servo Ready or not, or Servo ON of OFF.
			// If servo is not ready or not ON, then turn off all the functions
			//if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin) || HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin))
			if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin))
 80030f6:	2104      	movs	r1, #4
 80030f8:	487f      	ldr	r0, [pc, #508]	; (80032f8 <main+0x298>)
 80030fa:	f002 f835 	bl	8005168 <HAL_GPIO_ReadPin>
 80030fe:	4603      	mov	r3, r0
 8003100:	2b00      	cmp	r3, #0
 8003102:	d006      	beq.n	8003112 <main+0xb2>
			{
			// If the servo is not ON. Then stop all the running function
				StopPulseGenerating();
 8003104:	f7fe fbbe 	bl	8001884 <StopPulseGenerating>
				StopExperiment();
 8003108:	f7fe ffb4 	bl	8002074 <StopExperiment>
				IsHoming = false; // Disable Homming
 800310c:	4b81      	ldr	r3, [pc, #516]	; (8003314 <main+0x2b4>)
 800310e:	2200      	movs	r2, #0
 8003110:	701a      	strb	r2, [r3, #0]
			}
		}
		// END Process Emergency Stop

		// BEGIN Timer2 interrupt for sending the data
		if (Timer2SampleTimeInterrupt)
 8003112:	4b81      	ldr	r3, [pc, #516]	; (8003318 <main+0x2b8>)
 8003114:	781b      	ldrb	r3, [r3, #0]
 8003116:	b2db      	uxtb	r3, r3
 8003118:	2b00      	cmp	r3, #0
 800311a:	f000 81e8 	beq.w	80034ee <main+0x48e>
		{
			Timer2SampleTimeInterrupt = false;
 800311e:	4b7e      	ldr	r3, [pc, #504]	; (8003318 <main+0x2b8>)
 8003120:	2200      	movs	r2, #0
 8003122:	701a      	strb	r2, [r3, #0]

			// BEGIN Software Limit ASDA Driver
			if (!MotorDriver) // Applied for ASDA-A3 Diver since the encoder pulse only can be cleared when cycle the driver
 8003124:	4b7d      	ldr	r3, [pc, #500]	; (800331c <main+0x2bc>)
 8003126:	781b      	ldrb	r3, [r3, #0]
 8003128:	f083 0301 	eor.w	r3, r3, #1
 800312c:	b2db      	uxtb	r3, r3
 800312e:	2b00      	cmp	r3, #0
 8003130:	d020      	beq.n	8003174 <main+0x114>
			{
				if (StartRunning) // Always turn on the software limit while running
 8003132:	4b77      	ldr	r3, [pc, #476]	; (8003310 <main+0x2b0>)
 8003134:	781b      	ldrb	r3, [r3, #0]
 8003136:	2b00      	cmp	r3, #0
 8003138:	d00b      	beq.n	8003152 <main+0xf2>
				{
					if (MotorEncPulse-OriginPulse <= -200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 800313a:	4b79      	ldr	r3, [pc, #484]	; (8003320 <main+0x2c0>)
 800313c:	681a      	ldr	r2, [r3, #0]
 800313e:	4b79      	ldr	r3, [pc, #484]	; (8003324 <main+0x2c4>)
 8003140:	681b      	ldr	r3, [r3, #0]
 8003142:	1ad3      	subs	r3, r2, r3
 8003144:	f113 0fc7 	cmn.w	r3, #199	; 0xc7
 8003148:	da03      	bge.n	8003152 <main+0xf2>
					{
						StopPulseGenerating();
 800314a:	f7fe fb9b 	bl	8001884 <StopPulseGenerating>
						StopExperiment();
 800314e:	f7fe ff91 	bl	8002074 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 8003152:	4b75      	ldr	r3, [pc, #468]	; (8003328 <main+0x2c8>)
 8003154:	781b      	ldrb	r3, [r3, #0]
 8003156:	2b00      	cmp	r3, #0
 8003158:	d02b      	beq.n	80031b2 <main+0x152>
				{
					if (MotorEncPulse-OriginPulse <= -100) // Software Limit Switch based on actual motor position, 500/2048 pulses
 800315a:	4b71      	ldr	r3, [pc, #452]	; (8003320 <main+0x2c0>)
 800315c:	681a      	ldr	r2, [r3, #0]
 800315e:	4b71      	ldr	r3, [pc, #452]	; (8003324 <main+0x2c4>)
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	1ad3      	subs	r3, r2, r3
 8003164:	f113 0f63 	cmn.w	r3, #99	; 0x63
 8003168:	da23      	bge.n	80031b2 <main+0x152>
					{
						StopPulseGenerating();
 800316a:	f7fe fb8b 	bl	8001884 <StopPulseGenerating>
						StopExperiment();
 800316e:	f7fe ff81 	bl	8002074 <StopExperiment>
 8003172:	e01e      	b.n	80031b2 <main+0x152>
					}
				}
			}
			else // HIGEN FDA Driver, Software Limit Switch
			{
				if (StartRunning)// Always turn on the software limit while running
 8003174:	4b66      	ldr	r3, [pc, #408]	; (8003310 <main+0x2b0>)
 8003176:	781b      	ldrb	r3, [r3, #0]
 8003178:	2b00      	cmp	r3, #0
 800317a:	d00a      	beq.n	8003192 <main+0x132>
				{
					if (MotorEncPulse-OriginPulse <= 0) // Software Limit Switch based on actual motor position, 500/2048 pulses
 800317c:	4b68      	ldr	r3, [pc, #416]	; (8003320 <main+0x2c0>)
 800317e:	681a      	ldr	r2, [r3, #0]
 8003180:	4b68      	ldr	r3, [pc, #416]	; (8003324 <main+0x2c4>)
 8003182:	681b      	ldr	r3, [r3, #0]
 8003184:	1ad3      	subs	r3, r2, r3
 8003186:	2b00      	cmp	r3, #0
 8003188:	dc03      	bgt.n	8003192 <main+0x132>
					{
						StopPulseGenerating();
 800318a:	f7fe fb7b 	bl	8001884 <StopPulseGenerating>
						StopExperiment();
 800318e:	f7fe ff71 	bl	8002074 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 8003192:	4b65      	ldr	r3, [pc, #404]	; (8003328 <main+0x2c8>)
 8003194:	781b      	ldrb	r3, [r3, #0]
 8003196:	2b00      	cmp	r3, #0
 8003198:	d00b      	beq.n	80031b2 <main+0x152>
				{
					if (MotorEncPulse-OriginPulse <= -2000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 800319a:	4b61      	ldr	r3, [pc, #388]	; (8003320 <main+0x2c0>)
 800319c:	681a      	ldr	r2, [r3, #0]
 800319e:	4b61      	ldr	r3, [pc, #388]	; (8003324 <main+0x2c4>)
 80031a0:	681b      	ldr	r3, [r3, #0]
 80031a2:	1ad3      	subs	r3, r2, r3
 80031a4:	f513 6ffa 	cmn.w	r3, #2000	; 0x7d0
 80031a8:	dc03      	bgt.n	80031b2 <main+0x152>
					{
						StopPulseGenerating();
 80031aa:	f7fe fb6b 	bl	8001884 <StopPulseGenerating>
						StopExperiment();
 80031ae:	f7fe ff61 	bl	8002074 <StopExperiment>
//				}
//			}
			//END Homing

			// BEGIN Send data to the UI
			if (UIDataRequest)
 80031b2:	4b5e      	ldr	r3, [pc, #376]	; (800332c <main+0x2cc>)
 80031b4:	781b      	ldrb	r3, [r3, #0]
 80031b6:	2b00      	cmp	r3, #0
 80031b8:	f000 816a 	beq.w	8003490 <main+0x430>
			{
				if (MotorDriver) // FDA7000 Driver
 80031bc:	4b57      	ldr	r3, [pc, #348]	; (800331c <main+0x2bc>)
 80031be:	781b      	ldrb	r3, [r3, #0]
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	f000 80cb 	beq.w	800335c <main+0x2fc>
				{
					if (StartSimulating)
 80031c6:	4b5a      	ldr	r3, [pc, #360]	; (8003330 <main+0x2d0>)
 80031c8:	781b      	ldrb	r3, [r3, #0]
 80031ca:	2b00      	cmp	r3, #0
 80031cc:	d05d      	beq.n	800328a <main+0x22a>
					{
						PositionCmd = (float)(8*PositionSimCmd*2*3.14*DrumRadius/EncoderResolution);
 80031ce:	4b59      	ldr	r3, [pc, #356]	; (8003334 <main+0x2d4>)
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	011b      	lsls	r3, r3, #4
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f9a5 	bl	8000524 <__aeabi_i2d>
 80031da:	a345      	add	r3, pc, #276	; (adr r3, 80032f0 <main+0x290>)
 80031dc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e0:	f7fd fa0a 	bl	80005f8 <__aeabi_dmul>
 80031e4:	4602      	mov	r2, r0
 80031e6:	460b      	mov	r3, r1
 80031e8:	4614      	mov	r4, r2
 80031ea:	461d      	mov	r5, r3
 80031ec:	4b52      	ldr	r3, [pc, #328]	; (8003338 <main+0x2d8>)
 80031ee:	681b      	ldr	r3, [r3, #0]
 80031f0:	4618      	mov	r0, r3
 80031f2:	f7fd f9a9 	bl	8000548 <__aeabi_f2d>
 80031f6:	4602      	mov	r2, r0
 80031f8:	460b      	mov	r3, r1
 80031fa:	4620      	mov	r0, r4
 80031fc:	4629      	mov	r1, r5
 80031fe:	f7fd f9fb 	bl	80005f8 <__aeabi_dmul>
 8003202:	4602      	mov	r2, r0
 8003204:	460b      	mov	r3, r1
 8003206:	4614      	mov	r4, r2
 8003208:	461d      	mov	r5, r3
 800320a:	4b4c      	ldr	r3, [pc, #304]	; (800333c <main+0x2dc>)
 800320c:	881b      	ldrh	r3, [r3, #0]
 800320e:	4618      	mov	r0, r3
 8003210:	f7fd f988 	bl	8000524 <__aeabi_i2d>
 8003214:	4602      	mov	r2, r0
 8003216:	460b      	mov	r3, r1
 8003218:	4620      	mov	r0, r4
 800321a:	4629      	mov	r1, r5
 800321c:	f7fd fb16 	bl	800084c <__aeabi_ddiv>
 8003220:	4602      	mov	r2, r0
 8003222:	460b      	mov	r3, r1
 8003224:	4610      	mov	r0, r2
 8003226:	4619      	mov	r1, r3
 8003228:	f7fd fcde 	bl	8000be8 <__aeabi_d2f>
 800322c:	4603      	mov	r3, r0
 800322e:	4a44      	ldr	r2, [pc, #272]	; (8003340 <main+0x2e0>)
 8003230:	6013      	str	r3, [r2, #0]
						TxPCLen = sprintf(TxPCBuff,"t%.1f/%.1f/%.1fe",MotorSpeed,ObjectPosition,PositionCmd);
 8003232:	4b44      	ldr	r3, [pc, #272]	; (8003344 <main+0x2e4>)
 8003234:	681b      	ldr	r3, [r3, #0]
 8003236:	4618      	mov	r0, r3
 8003238:	f7fd f986 	bl	8000548 <__aeabi_f2d>
 800323c:	4680      	mov	r8, r0
 800323e:	4689      	mov	r9, r1
 8003240:	4b41      	ldr	r3, [pc, #260]	; (8003348 <main+0x2e8>)
 8003242:	681b      	ldr	r3, [r3, #0]
 8003244:	4618      	mov	r0, r3
 8003246:	f7fd f97f 	bl	8000548 <__aeabi_f2d>
 800324a:	4604      	mov	r4, r0
 800324c:	460d      	mov	r5, r1
 800324e:	4b3c      	ldr	r3, [pc, #240]	; (8003340 <main+0x2e0>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd f978 	bl	8000548 <__aeabi_f2d>
 8003258:	4602      	mov	r2, r0
 800325a:	460b      	mov	r3, r1
 800325c:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003260:	e9cd 4500 	strd	r4, r5, [sp]
 8003264:	4642      	mov	r2, r8
 8003266:	464b      	mov	r3, r9
 8003268:	4938      	ldr	r1, [pc, #224]	; (800334c <main+0x2ec>)
 800326a:	4839      	ldr	r0, [pc, #228]	; (8003350 <main+0x2f0>)
 800326c:	f005 fa1e 	bl	80086ac <siprintf>
 8003270:	4603      	mov	r3, r0
 8003272:	b2da      	uxtb	r2, r3
 8003274:	4b37      	ldr	r3, [pc, #220]	; (8003354 <main+0x2f4>)
 8003276:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8003278:	4b36      	ldr	r3, [pc, #216]	; (8003354 <main+0x2f4>)
 800327a:	781b      	ldrb	r3, [r3, #0]
 800327c:	b29a      	uxth	r2, r3
 800327e:	23c8      	movs	r3, #200	; 0xc8
 8003280:	4933      	ldr	r1, [pc, #204]	; (8003350 <main+0x2f0>)
 8003282:	4820      	ldr	r0, [pc, #128]	; (8003304 <main+0x2a4>)
 8003284:	f003 fb31 	bl	80068ea <HAL_UART_Transmit>
 8003288:	e0fd      	b.n	8003486 <main+0x426>
					}
					else
					{
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1fe",MotorSpeed,ObjectPosition,PositionCmd);
 800328a:	4b2e      	ldr	r3, [pc, #184]	; (8003344 <main+0x2e4>)
 800328c:	681b      	ldr	r3, [r3, #0]
 800328e:	4618      	mov	r0, r3
 8003290:	f7fd f95a 	bl	8000548 <__aeabi_f2d>
 8003294:	4680      	mov	r8, r0
 8003296:	4689      	mov	r9, r1
 8003298:	4b2b      	ldr	r3, [pc, #172]	; (8003348 <main+0x2e8>)
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	4618      	mov	r0, r3
 800329e:	f7fd f953 	bl	8000548 <__aeabi_f2d>
 80032a2:	4604      	mov	r4, r0
 80032a4:	460d      	mov	r5, r1
 80032a6:	4b26      	ldr	r3, [pc, #152]	; (8003340 <main+0x2e0>)
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	4618      	mov	r0, r3
 80032ac:	f7fd f94c 	bl	8000548 <__aeabi_f2d>
 80032b0:	4602      	mov	r2, r0
 80032b2:	460b      	mov	r3, r1
 80032b4:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80032b8:	e9cd 4500 	strd	r4, r5, [sp]
 80032bc:	4642      	mov	r2, r8
 80032be:	464b      	mov	r3, r9
 80032c0:	4925      	ldr	r1, [pc, #148]	; (8003358 <main+0x2f8>)
 80032c2:	4823      	ldr	r0, [pc, #140]	; (8003350 <main+0x2f0>)
 80032c4:	f005 f9f2 	bl	80086ac <siprintf>
 80032c8:	4603      	mov	r3, r0
 80032ca:	b2da      	uxtb	r2, r3
 80032cc:	4b21      	ldr	r3, [pc, #132]	; (8003354 <main+0x2f4>)
 80032ce:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef,PositionCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80032d0:	4b20      	ldr	r3, [pc, #128]	; (8003354 <main+0x2f4>)
 80032d2:	781b      	ldrb	r3, [r3, #0]
 80032d4:	b29a      	uxth	r2, r3
 80032d6:	23c8      	movs	r3, #200	; 0xc8
 80032d8:	491d      	ldr	r1, [pc, #116]	; (8003350 <main+0x2f0>)
 80032da:	480a      	ldr	r0, [pc, #40]	; (8003304 <main+0x2a4>)
 80032dc:	f003 fb05 	bl	80068ea <HAL_UART_Transmit>
						ReadMultiRegister(StE03,6); // Read from StE03 -> StE08
 80032e0:	2106      	movs	r1, #6
 80032e2:	200c      	movs	r0, #12
 80032e4:	f7fe f960 	bl	80015a8 <ReadMultiRegister>
 80032e8:	e0cd      	b.n	8003486 <main+0x426>
 80032ea:	bf00      	nop
 80032ec:	f3af 8000 	nop.w
 80032f0:	51eb851f 	.word	0x51eb851f
 80032f4:	40091eb8 	.word	0x40091eb8
 80032f8:	40021000 	.word	0x40021000
 80032fc:	20000220 	.word	0x20000220
 8003300:	200003a8 	.word	0x200003a8
 8003304:	200002f4 	.word	0x200002f4
 8003308:	20000429 	.word	0x20000429
 800330c:	2000042d 	.word	0x2000042d
 8003310:	2000042e 	.word	0x2000042e
 8003314:	20000438 	.word	0x20000438
 8003318:	2000042c 	.word	0x2000042c
 800331c:	20000003 	.word	0x20000003
 8003320:	2000628c 	.word	0x2000628c
 8003324:	20006220 	.word	0x20006220
 8003328:	2000043a 	.word	0x2000043a
 800332c:	20000432 	.word	0x20000432
 8003330:	20000430 	.word	0x20000430
 8003334:	20006234 	.word	0x20006234
 8003338:	20006210 	.word	0x20006210
 800333c:	2000000a 	.word	0x2000000a
 8003340:	20006290 	.word	0x20006290
 8003344:	20006284 	.word	0x20006284
 8003348:	200062bc 	.word	0x200062bc
 800334c:	0800c414 	.word	0x0800c414
 8003350:	200003ac 	.word	0x200003ac
 8003354:	20000410 	.word	0x20000410
 8003358:	0800c428 	.word	0x0800c428
					}
				}
				else // ASDA-A3 Driver
				{
					if (StartSimulating)
 800335c:	4b9a      	ldr	r3, [pc, #616]	; (80035c8 <main+0x568>)
 800335e:	781b      	ldrb	r3, [r3, #0]
 8003360:	2b00      	cmp	r3, #0
 8003362:	d061      	beq.n	8003428 <main+0x3c8>
					{
						PositionCmd = (float)(PositionSimCmd*2*3.14*DrumRadius/EncoderResolution);
 8003364:	4b99      	ldr	r3, [pc, #612]	; (80035cc <main+0x56c>)
 8003366:	681b      	ldr	r3, [r3, #0]
 8003368:	005b      	lsls	r3, r3, #1
 800336a:	4618      	mov	r0, r3
 800336c:	f7fd f8da 	bl	8000524 <__aeabi_i2d>
 8003370:	a393      	add	r3, pc, #588	; (adr r3, 80035c0 <main+0x560>)
 8003372:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003376:	f7fd f93f 	bl	80005f8 <__aeabi_dmul>
 800337a:	4602      	mov	r2, r0
 800337c:	460b      	mov	r3, r1
 800337e:	4614      	mov	r4, r2
 8003380:	461d      	mov	r5, r3
 8003382:	4b93      	ldr	r3, [pc, #588]	; (80035d0 <main+0x570>)
 8003384:	681b      	ldr	r3, [r3, #0]
 8003386:	4618      	mov	r0, r3
 8003388:	f7fd f8de 	bl	8000548 <__aeabi_f2d>
 800338c:	4602      	mov	r2, r0
 800338e:	460b      	mov	r3, r1
 8003390:	4620      	mov	r0, r4
 8003392:	4629      	mov	r1, r5
 8003394:	f7fd f930 	bl	80005f8 <__aeabi_dmul>
 8003398:	4602      	mov	r2, r0
 800339a:	460b      	mov	r3, r1
 800339c:	4614      	mov	r4, r2
 800339e:	461d      	mov	r5, r3
 80033a0:	4b8c      	ldr	r3, [pc, #560]	; (80035d4 <main+0x574>)
 80033a2:	881b      	ldrh	r3, [r3, #0]
 80033a4:	4618      	mov	r0, r3
 80033a6:	f7fd f8bd 	bl	8000524 <__aeabi_i2d>
 80033aa:	4602      	mov	r2, r0
 80033ac:	460b      	mov	r3, r1
 80033ae:	4620      	mov	r0, r4
 80033b0:	4629      	mov	r1, r5
 80033b2:	f7fd fa4b 	bl	800084c <__aeabi_ddiv>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4610      	mov	r0, r2
 80033bc:	4619      	mov	r1, r3
 80033be:	f7fd fc13 	bl	8000be8 <__aeabi_d2f>
 80033c2:	4603      	mov	r3, r0
 80033c4:	4a84      	ldr	r2, [pc, #528]	; (80035d8 <main+0x578>)
 80033c6:	6013      	str	r3, [r2, #0]
						TxPCLen = sprintf(TxPCBuff,"t%.1f/%.1f/%.1fe",MotorSpeed,ObjectPosition,PositionCmd);
 80033c8:	4b84      	ldr	r3, [pc, #528]	; (80035dc <main+0x57c>)
 80033ca:	681b      	ldr	r3, [r3, #0]
 80033cc:	4618      	mov	r0, r3
 80033ce:	f7fd f8bb 	bl	8000548 <__aeabi_f2d>
 80033d2:	4680      	mov	r8, r0
 80033d4:	4689      	mov	r9, r1
 80033d6:	4b82      	ldr	r3, [pc, #520]	; (80035e0 <main+0x580>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f8b4 	bl	8000548 <__aeabi_f2d>
 80033e0:	4604      	mov	r4, r0
 80033e2:	460d      	mov	r5, r1
 80033e4:	4b7c      	ldr	r3, [pc, #496]	; (80035d8 <main+0x578>)
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	4618      	mov	r0, r3
 80033ea:	f7fd f8ad 	bl	8000548 <__aeabi_f2d>
 80033ee:	4602      	mov	r2, r0
 80033f0:	460b      	mov	r3, r1
 80033f2:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80033f6:	e9cd 4500 	strd	r4, r5, [sp]
 80033fa:	4642      	mov	r2, r8
 80033fc:	464b      	mov	r3, r9
 80033fe:	4979      	ldr	r1, [pc, #484]	; (80035e4 <main+0x584>)
 8003400:	4879      	ldr	r0, [pc, #484]	; (80035e8 <main+0x588>)
 8003402:	f005 f953 	bl	80086ac <siprintf>
 8003406:	4603      	mov	r3, r0
 8003408:	b2da      	uxtb	r2, r3
 800340a:	4b78      	ldr	r3, [pc, #480]	; (80035ec <main+0x58c>)
 800340c:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef, PositionCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 800340e:	4b77      	ldr	r3, [pc, #476]	; (80035ec <main+0x58c>)
 8003410:	781b      	ldrb	r3, [r3, #0]
 8003412:	b29a      	uxth	r2, r3
 8003414:	23c8      	movs	r3, #200	; 0xc8
 8003416:	4974      	ldr	r1, [pc, #464]	; (80035e8 <main+0x588>)
 8003418:	4875      	ldr	r0, [pc, #468]	; (80035f0 <main+0x590>)
 800341a:	f003 fa66 	bl	80068ea <HAL_UART_Transmit>
						// Read 4 words start from 0x012 to 0x015
						// Encoder pulse: 0x012 + 0x013 (2 words)
						// Motor Speed: 0x014 + 0x015 (2 words)
						// Pulse Error: (2 word)
						// Total is 6 words, 1word = 4 bytes
						ReadMultiRegister(ASDA_MotorSpeed,6);
 800341e:	2106      	movs	r1, #6
 8003420:	2012      	movs	r0, #18
 8003422:	f7fe f8c1 	bl	80015a8 <ReadMultiRegister>
 8003426:	e02e      	b.n	8003486 <main+0x426>
					}
					else
					{
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1fe",MotorSpeed,ObjectPosition,PositionCmd);
 8003428:	4b6c      	ldr	r3, [pc, #432]	; (80035dc <main+0x57c>)
 800342a:	681b      	ldr	r3, [r3, #0]
 800342c:	4618      	mov	r0, r3
 800342e:	f7fd f88b 	bl	8000548 <__aeabi_f2d>
 8003432:	4680      	mov	r8, r0
 8003434:	4689      	mov	r9, r1
 8003436:	4b6a      	ldr	r3, [pc, #424]	; (80035e0 <main+0x580>)
 8003438:	681b      	ldr	r3, [r3, #0]
 800343a:	4618      	mov	r0, r3
 800343c:	f7fd f884 	bl	8000548 <__aeabi_f2d>
 8003440:	4604      	mov	r4, r0
 8003442:	460d      	mov	r5, r1
 8003444:	4b64      	ldr	r3, [pc, #400]	; (80035d8 <main+0x578>)
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	4618      	mov	r0, r3
 800344a:	f7fd f87d 	bl	8000548 <__aeabi_f2d>
 800344e:	4602      	mov	r2, r0
 8003450:	460b      	mov	r3, r1
 8003452:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8003456:	e9cd 4500 	strd	r4, r5, [sp]
 800345a:	4642      	mov	r2, r8
 800345c:	464b      	mov	r3, r9
 800345e:	4965      	ldr	r1, [pc, #404]	; (80035f4 <main+0x594>)
 8003460:	4861      	ldr	r0, [pc, #388]	; (80035e8 <main+0x588>)
 8003462:	f005 f923 	bl	80086ac <siprintf>
 8003466:	4603      	mov	r3, r0
 8003468:	b2da      	uxtb	r2, r3
 800346a:	4b60      	ldr	r3, [pc, #384]	; (80035ec <main+0x58c>)
 800346c:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef, PositionCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 800346e:	4b5f      	ldr	r3, [pc, #380]	; (80035ec <main+0x58c>)
 8003470:	781b      	ldrb	r3, [r3, #0]
 8003472:	b29a      	uxth	r2, r3
 8003474:	23c8      	movs	r3, #200	; 0xc8
 8003476:	495c      	ldr	r1, [pc, #368]	; (80035e8 <main+0x588>)
 8003478:	485d      	ldr	r0, [pc, #372]	; (80035f0 <main+0x590>)
 800347a:	f003 fa36 	bl	80068ea <HAL_UART_Transmit>
						// Read 4 words start from 0x012 to 0x015
						// Encoder pulse: 0x012 + 0x013 (2 words)
						// Motor Speed: 0x014 + 0x015 (2 words)
						// Pulse Error: (2 word)
						// Total is 6 words, 1word = 4 bytes
						ReadMultiRegister(ASDA_MotorSpeed,6);
 800347e:	2106      	movs	r1, #6
 8003480:	2012      	movs	r0, #18
 8003482:	f7fe f891 	bl	80015a8 <ReadMultiRegister>
					}
				}
				memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8003486:	225a      	movs	r2, #90	; 0x5a
 8003488:	2100      	movs	r1, #0
 800348a:	4857      	ldr	r0, [pc, #348]	; (80035e8 <main+0x588>)
 800348c:	f004 fa86 	bl	800799c <memset>
			}
			if(OutputDataRequest)
 8003490:	4b59      	ldr	r3, [pc, #356]	; (80035f8 <main+0x598>)
 8003492:	781b      	ldrb	r3, [r3, #0]
 8003494:	2b00      	cmp	r3, #0
 8003496:	d02a      	beq.n	80034ee <main+0x48e>
				{
					CountTimerDriverOutput++;
 8003498:	4b58      	ldr	r3, [pc, #352]	; (80035fc <main+0x59c>)
 800349a:	881b      	ldrh	r3, [r3, #0]
 800349c:	3301      	adds	r3, #1
 800349e:	b29a      	uxth	r2, r3
 80034a0:	4b56      	ldr	r3, [pc, #344]	; (80035fc <main+0x59c>)
 80034a2:	801a      	strh	r2, [r3, #0]
					if (CountTimerDriverOutput >= 15) // 20*25=500 ms, timer 2 period is 1ms
 80034a4:	4b55      	ldr	r3, [pc, #340]	; (80035fc <main+0x59c>)
 80034a6:	881b      	ldrh	r3, [r3, #0]
 80034a8:	2b0e      	cmp	r3, #14
 80034aa:	d920      	bls.n	80034ee <main+0x48e>
					{
						DriverOutput = ReadLogicF7000Out(); // Read Driver Output
 80034ac:	f7fd ff50 	bl	8001350 <ReadLogicF7000Out>
 80034b0:	4603      	mov	r3, r0
 80034b2:	461a      	mov	r2, r3
 80034b4:	4b52      	ldr	r3, [pc, #328]	; (8003600 <main+0x5a0>)
 80034b6:	801a      	strh	r2, [r3, #0]

						memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80034b8:	225a      	movs	r2, #90	; 0x5a
 80034ba:	2100      	movs	r1, #0
 80034bc:	484a      	ldr	r0, [pc, #296]	; (80035e8 <main+0x588>)
 80034be:	f004 fa6d 	bl	800799c <memset>
						TxPCLen = sprintf(TxPCBuff,"o%de",DriverOutput); // 1 means only the driver outputs
 80034c2:	4b4f      	ldr	r3, [pc, #316]	; (8003600 <main+0x5a0>)
 80034c4:	881b      	ldrh	r3, [r3, #0]
 80034c6:	461a      	mov	r2, r3
 80034c8:	494e      	ldr	r1, [pc, #312]	; (8003604 <main+0x5a4>)
 80034ca:	4847      	ldr	r0, [pc, #284]	; (80035e8 <main+0x588>)
 80034cc:	f005 f8ee 	bl	80086ac <siprintf>
 80034d0:	4603      	mov	r3, r0
 80034d2:	b2da      	uxtb	r2, r3
 80034d4:	4b45      	ldr	r3, [pc, #276]	; (80035ec <main+0x58c>)
 80034d6:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80034d8:	4b44      	ldr	r3, [pc, #272]	; (80035ec <main+0x58c>)
 80034da:	781b      	ldrb	r3, [r3, #0]
 80034dc:	b29a      	uxth	r2, r3
 80034de:	23c8      	movs	r3, #200	; 0xc8
 80034e0:	4941      	ldr	r1, [pc, #260]	; (80035e8 <main+0x588>)
 80034e2:	4843      	ldr	r0, [pc, #268]	; (80035f0 <main+0x590>)
 80034e4:	f003 fa01 	bl	80068ea <HAL_UART_Transmit>

						CountTimerDriverOutput = 0;
 80034e8:	4b44      	ldr	r3, [pc, #272]	; (80035fc <main+0x59c>)
 80034ea:	2200      	movs	r2, #0
 80034ec:	801a      	strh	r2, [r3, #0]
			// END Send data to the UI
		}
		// END 20ms period interrupt

		// BEGIN Process Driver Received Data
		if (RxUart5_Cpl_Flag) // Complete receive data from the driver
 80034ee:	4b46      	ldr	r3, [pc, #280]	; (8003608 <main+0x5a8>)
 80034f0:	781b      	ldrb	r3, [r3, #0]
 80034f2:	b2db      	uxtb	r3, r3
 80034f4:	2b00      	cmp	r3, #0
 80034f6:	f43f ade1 	beq.w	80030bc <main+0x5c>
			{
				RxUart5_Cpl_Flag = false;
 80034fa:	4b43      	ldr	r3, [pc, #268]	; (8003608 <main+0x5a8>)
 80034fc:	2200      	movs	r2, #0
 80034fe:	701a      	strb	r2, [r3, #0]

				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8003500:	4b42      	ldr	r3, [pc, #264]	; (800360c <main+0x5ac>)
 8003502:	2200      	movs	r2, #0
 8003504:	701a      	strb	r2, [r3, #0]
 8003506:	e13b      	b.n	8003780 <main+0x720>
				{
					if (RxDriverBuff[i] == DriverID)
 8003508:	4b40      	ldr	r3, [pc, #256]	; (800360c <main+0x5ac>)
 800350a:	781b      	ldrb	r3, [r3, #0]
 800350c:	461a      	mov	r2, r3
 800350e:	4b40      	ldr	r3, [pc, #256]	; (8003610 <main+0x5b0>)
 8003510:	5c9b      	ldrb	r3, [r3, r2]
 8003512:	b2db      	uxtb	r3, r3
 8003514:	2b01      	cmp	r3, #1
 8003516:	f040 812d 	bne.w	8003774 <main+0x714>
					{
						if (RxDriverBuff[1+i] == 3)
 800351a:	4b3c      	ldr	r3, [pc, #240]	; (800360c <main+0x5ac>)
 800351c:	781b      	ldrb	r3, [r3, #0]
 800351e:	3301      	adds	r3, #1
 8003520:	4a3b      	ldr	r2, [pc, #236]	; (8003610 <main+0x5b0>)
 8003522:	5cd3      	ldrb	r3, [r2, r3]
 8003524:	b2db      	uxtb	r3, r3
 8003526:	2b03      	cmp	r3, #3
 8003528:	f040 80de 	bne.w	80036e8 <main+0x688>
						{
							if (MotorDriver) // FDA7000
 800352c:	4b39      	ldr	r3, [pc, #228]	; (8003614 <main+0x5b4>)
 800352e:	781b      	ldrb	r3, [r3, #0]
 8003530:	2b00      	cmp	r3, #0
 8003532:	d075      	beq.n	8003620 <main+0x5c0>
							{
								SpeedValueRegion[0] = RxDriverBuff[6+i];
 8003534:	4b35      	ldr	r3, [pc, #212]	; (800360c <main+0x5ac>)
 8003536:	781b      	ldrb	r3, [r3, #0]
 8003538:	3306      	adds	r3, #6
 800353a:	4a35      	ldr	r2, [pc, #212]	; (8003610 <main+0x5b0>)
 800353c:	5cd3      	ldrb	r3, [r2, r3]
 800353e:	b2da      	uxtb	r2, r3
 8003540:	4b35      	ldr	r3, [pc, #212]	; (8003618 <main+0x5b8>)
 8003542:	701a      	strb	r2, [r3, #0]
								SpeedValueRegion[1] = RxDriverBuff[5+i];
 8003544:	4b31      	ldr	r3, [pc, #196]	; (800360c <main+0x5ac>)
 8003546:	781b      	ldrb	r3, [r3, #0]
 8003548:	3305      	adds	r3, #5
 800354a:	4a31      	ldr	r2, [pc, #196]	; (8003610 <main+0x5b0>)
 800354c:	5cd3      	ldrb	r3, [r2, r3]
 800354e:	b2da      	uxtb	r2, r3
 8003550:	4b31      	ldr	r3, [pc, #196]	; (8003618 <main+0x5b8>)
 8003552:	705a      	strb	r2, [r3, #1]
								SpeedValueRegion[2] = RxDriverBuff[4+i];
 8003554:	4b2d      	ldr	r3, [pc, #180]	; (800360c <main+0x5ac>)
 8003556:	781b      	ldrb	r3, [r3, #0]
 8003558:	3304      	adds	r3, #4
 800355a:	4a2d      	ldr	r2, [pc, #180]	; (8003610 <main+0x5b0>)
 800355c:	5cd3      	ldrb	r3, [r2, r3]
 800355e:	b2da      	uxtb	r2, r3
 8003560:	4b2d      	ldr	r3, [pc, #180]	; (8003618 <main+0x5b8>)
 8003562:	709a      	strb	r2, [r3, #2]
								SpeedValueRegion[3] = RxDriverBuff[3+i];
 8003564:	4b29      	ldr	r3, [pc, #164]	; (800360c <main+0x5ac>)
 8003566:	781b      	ldrb	r3, [r3, #0]
 8003568:	3303      	adds	r3, #3
 800356a:	4a29      	ldr	r2, [pc, #164]	; (8003610 <main+0x5b0>)
 800356c:	5cd3      	ldrb	r3, [r2, r3]
 800356e:	b2da      	uxtb	r2, r3
 8003570:	4b29      	ldr	r3, [pc, #164]	; (8003618 <main+0x5b8>)
 8003572:	70da      	strb	r2, [r3, #3]
 8003574:	4b28      	ldr	r3, [pc, #160]	; (8003618 <main+0x5b8>)
 8003576:	681b      	ldr	r3, [r3, #0]

								memcpy(&MotorSpeed, SpeedValueRegion, 4);
 8003578:	4a18      	ldr	r2, [pc, #96]	; (80035dc <main+0x57c>)
 800357a:	6013      	str	r3, [r2, #0]

								MotorEncPulse = (RxDriverBuff[19+i] << 24) | (RxDriverBuff[20+i] << 16) | (RxDriverBuff[21+i] << 8) | RxDriverBuff[22+i];
 800357c:	4b23      	ldr	r3, [pc, #140]	; (800360c <main+0x5ac>)
 800357e:	781b      	ldrb	r3, [r3, #0]
 8003580:	3313      	adds	r3, #19
 8003582:	4a23      	ldr	r2, [pc, #140]	; (8003610 <main+0x5b0>)
 8003584:	5cd3      	ldrb	r3, [r2, r3]
 8003586:	b2db      	uxtb	r3, r3
 8003588:	061a      	lsls	r2, r3, #24
 800358a:	4b20      	ldr	r3, [pc, #128]	; (800360c <main+0x5ac>)
 800358c:	781b      	ldrb	r3, [r3, #0]
 800358e:	3314      	adds	r3, #20
 8003590:	491f      	ldr	r1, [pc, #124]	; (8003610 <main+0x5b0>)
 8003592:	5ccb      	ldrb	r3, [r1, r3]
 8003594:	b2db      	uxtb	r3, r3
 8003596:	041b      	lsls	r3, r3, #16
 8003598:	431a      	orrs	r2, r3
 800359a:	4b1c      	ldr	r3, [pc, #112]	; (800360c <main+0x5ac>)
 800359c:	781b      	ldrb	r3, [r3, #0]
 800359e:	3315      	adds	r3, #21
 80035a0:	491b      	ldr	r1, [pc, #108]	; (8003610 <main+0x5b0>)
 80035a2:	5ccb      	ldrb	r3, [r1, r3]
 80035a4:	b2db      	uxtb	r3, r3
 80035a6:	021b      	lsls	r3, r3, #8
 80035a8:	4313      	orrs	r3, r2
 80035aa:	4a18      	ldr	r2, [pc, #96]	; (800360c <main+0x5ac>)
 80035ac:	7812      	ldrb	r2, [r2, #0]
 80035ae:	3216      	adds	r2, #22
 80035b0:	4917      	ldr	r1, [pc, #92]	; (8003610 <main+0x5b0>)
 80035b2:	5c8a      	ldrb	r2, [r1, r2]
 80035b4:	b2d2      	uxtb	r2, r2
 80035b6:	4313      	orrs	r3, r2
 80035b8:	4a18      	ldr	r2, [pc, #96]	; (800361c <main+0x5bc>)
 80035ba:	6013      	str	r3, [r2, #0]
 80035bc:	e08a      	b.n	80036d4 <main+0x674>
 80035be:	bf00      	nop
 80035c0:	51eb851f 	.word	0x51eb851f
 80035c4:	40091eb8 	.word	0x40091eb8
 80035c8:	20000430 	.word	0x20000430
 80035cc:	20006234 	.word	0x20006234
 80035d0:	20006210 	.word	0x20006210
 80035d4:	2000000a 	.word	0x2000000a
 80035d8:	20006290 	.word	0x20006290
 80035dc:	20006284 	.word	0x20006284
 80035e0:	200062bc 	.word	0x200062bc
 80035e4:	0800c414 	.word	0x0800c414
 80035e8:	200003ac 	.word	0x200003ac
 80035ec:	20000410 	.word	0x20000410
 80035f0:	200002f4 	.word	0x200002f4
 80035f4:	0800c428 	.word	0x0800c428
 80035f8:	20000001 	.word	0x20000001
 80035fc:	20006204 	.word	0x20006204
 8003600:	20006206 	.word	0x20006206
 8003604:	0800c43c 	.word	0x0800c43c
 8003608:	2000042a 	.word	0x2000042a
 800360c:	20000411 	.word	0x20000411
 8003610:	20000360 	.word	0x20000360
 8003614:	20000003 	.word	0x20000003
 8003618:	20000414 	.word	0x20000414
 800361c:	2000628c 	.word	0x2000628c
								//MotorEncPulse = (RxDriverBuff[18+i] << 24) | (RxDriverBuff[19+i] << 16) | (RxDriverBuff[20+i] << 8) | RxDriverBuff[21+i];
							}
							else // ASDA-A3
							{
								MotorSpeedBuff = (float)((RxDriverBuff[5+i] << 24) | (RxDriverBuff[6+i] << 16) | (RxDriverBuff[3+i] << 8) | RxDriverBuff[4+i])/((float)-10.0); // Minus to Reverse
 8003620:	4b77      	ldr	r3, [pc, #476]	; (8003800 <main+0x7a0>)
 8003622:	781b      	ldrb	r3, [r3, #0]
 8003624:	3305      	adds	r3, #5
 8003626:	4a77      	ldr	r2, [pc, #476]	; (8003804 <main+0x7a4>)
 8003628:	5cd3      	ldrb	r3, [r2, r3]
 800362a:	b2db      	uxtb	r3, r3
 800362c:	061a      	lsls	r2, r3, #24
 800362e:	4b74      	ldr	r3, [pc, #464]	; (8003800 <main+0x7a0>)
 8003630:	781b      	ldrb	r3, [r3, #0]
 8003632:	3306      	adds	r3, #6
 8003634:	4973      	ldr	r1, [pc, #460]	; (8003804 <main+0x7a4>)
 8003636:	5ccb      	ldrb	r3, [r1, r3]
 8003638:	b2db      	uxtb	r3, r3
 800363a:	041b      	lsls	r3, r3, #16
 800363c:	431a      	orrs	r2, r3
 800363e:	4b70      	ldr	r3, [pc, #448]	; (8003800 <main+0x7a0>)
 8003640:	781b      	ldrb	r3, [r3, #0]
 8003642:	3303      	adds	r3, #3
 8003644:	496f      	ldr	r1, [pc, #444]	; (8003804 <main+0x7a4>)
 8003646:	5ccb      	ldrb	r3, [r1, r3]
 8003648:	b2db      	uxtb	r3, r3
 800364a:	021b      	lsls	r3, r3, #8
 800364c:	4313      	orrs	r3, r2
 800364e:	4a6c      	ldr	r2, [pc, #432]	; (8003800 <main+0x7a0>)
 8003650:	7812      	ldrb	r2, [r2, #0]
 8003652:	3204      	adds	r2, #4
 8003654:	496b      	ldr	r1, [pc, #428]	; (8003804 <main+0x7a4>)
 8003656:	5c8a      	ldrb	r2, [r1, r2]
 8003658:	b2d2      	uxtb	r2, r2
 800365a:	4313      	orrs	r3, r2
 800365c:	ee07 3a90 	vmov	s15, r3
 8003660:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003664:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8003668:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800366c:	4b66      	ldr	r3, [pc, #408]	; (8003808 <main+0x7a8>)
 800366e:	edc3 7a00 	vstr	s15, [r3]

								if (fabs(MotorSpeedBuff) <= 2000)
 8003672:	4b65      	ldr	r3, [pc, #404]	; (8003808 <main+0x7a8>)
 8003674:	edd3 7a00 	vldr	s15, [r3]
 8003678:	eef0 7ae7 	vabs.f32	s15, s15
 800367c:	ed9f 7a63 	vldr	s14, [pc, #396]	; 800380c <main+0x7ac>
 8003680:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003688:	d803      	bhi.n	8003692 <main+0x632>
								{
									MotorSpeed = MotorSpeedBuff;
 800368a:	4b5f      	ldr	r3, [pc, #380]	; (8003808 <main+0x7a8>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	4a60      	ldr	r2, [pc, #384]	; (8003810 <main+0x7b0>)
 8003690:	6013      	str	r3, [r2, #0]
								}

								MotorEncPulse = -((RxDriverBuff[9+i] << 24) | (RxDriverBuff[10+i] << 16) | (RxDriverBuff[7+i] << 8) | RxDriverBuff[8+i]); // Minus to Reverse
 8003692:	4b5b      	ldr	r3, [pc, #364]	; (8003800 <main+0x7a0>)
 8003694:	781b      	ldrb	r3, [r3, #0]
 8003696:	3309      	adds	r3, #9
 8003698:	4a5a      	ldr	r2, [pc, #360]	; (8003804 <main+0x7a4>)
 800369a:	5cd3      	ldrb	r3, [r2, r3]
 800369c:	b2db      	uxtb	r3, r3
 800369e:	061a      	lsls	r2, r3, #24
 80036a0:	4b57      	ldr	r3, [pc, #348]	; (8003800 <main+0x7a0>)
 80036a2:	781b      	ldrb	r3, [r3, #0]
 80036a4:	330a      	adds	r3, #10
 80036a6:	4957      	ldr	r1, [pc, #348]	; (8003804 <main+0x7a4>)
 80036a8:	5ccb      	ldrb	r3, [r1, r3]
 80036aa:	b2db      	uxtb	r3, r3
 80036ac:	041b      	lsls	r3, r3, #16
 80036ae:	431a      	orrs	r2, r3
 80036b0:	4b53      	ldr	r3, [pc, #332]	; (8003800 <main+0x7a0>)
 80036b2:	781b      	ldrb	r3, [r3, #0]
 80036b4:	3307      	adds	r3, #7
 80036b6:	4953      	ldr	r1, [pc, #332]	; (8003804 <main+0x7a4>)
 80036b8:	5ccb      	ldrb	r3, [r1, r3]
 80036ba:	b2db      	uxtb	r3, r3
 80036bc:	021b      	lsls	r3, r3, #8
 80036be:	4313      	orrs	r3, r2
 80036c0:	4a4f      	ldr	r2, [pc, #316]	; (8003800 <main+0x7a0>)
 80036c2:	7812      	ldrb	r2, [r2, #0]
 80036c4:	3208      	adds	r2, #8
 80036c6:	494f      	ldr	r1, [pc, #316]	; (8003804 <main+0x7a4>)
 80036c8:	5c8a      	ldrb	r2, [r1, r2]
 80036ca:	b2d2      	uxtb	r2, r2
 80036cc:	4313      	orrs	r3, r2
 80036ce:	425b      	negs	r3, r3
 80036d0:	4a50      	ldr	r2, [pc, #320]	; (8003814 <main+0x7b4>)
 80036d2:	6013      	str	r3, [r2, #0]
							}

							memset (RxDriverBuff, '\0', sizeof (RxDriverBuff)); // reset buffer
 80036d4:	221e      	movs	r2, #30
 80036d6:	2100      	movs	r1, #0
 80036d8:	484a      	ldr	r0, [pc, #296]	; (8003804 <main+0x7a4>)
 80036da:	f004 f95f 	bl	800799c <memset>
							HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte for the next time
 80036de:	2201      	movs	r2, #1
 80036e0:	494d      	ldr	r1, [pc, #308]	; (8003818 <main+0x7b8>)
 80036e2:	484e      	ldr	r0, [pc, #312]	; (800381c <main+0x7bc>)
 80036e4:	f003 f993 	bl	8006a0e <HAL_UART_Receive_IT>
						}
						if (RxDriverBuff[1] == 6) // Writing to a register
 80036e8:	4b46      	ldr	r3, [pc, #280]	; (8003804 <main+0x7a4>)
 80036ea:	785b      	ldrb	r3, [r3, #1]
 80036ec:	b2db      	uxtb	r3, r3
 80036ee:	2b06      	cmp	r3, #6
 80036f0:	d140      	bne.n	8003774 <main+0x714>
						{
							// Send to PC to check the writing result
							memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80036f2:	225a      	movs	r2, #90	; 0x5a
 80036f4:	2100      	movs	r1, #0
 80036f6:	484a      	ldr	r0, [pc, #296]	; (8003820 <main+0x7c0>)
 80036f8:	f004 f950 	bl	800799c <memset>
							TxPCLen = sprintf(TxPCBuff,"w%d/%d/%d/%d/%d/%d/%d/%d/%d/e",RxDriverBuff[0],RxDriverBuff[1],RxDriverBuff[2],RxDriverBuff[3],RxDriverBuff[4],RxDriverBuff[5],RxDriverBuff[6],RxDriverBuff[7],RxDriverBuff[8]);
 80036fc:	4b41      	ldr	r3, [pc, #260]	; (8003804 <main+0x7a4>)
 80036fe:	781b      	ldrb	r3, [r3, #0]
 8003700:	b2db      	uxtb	r3, r3
 8003702:	469c      	mov	ip, r3
 8003704:	4b3f      	ldr	r3, [pc, #252]	; (8003804 <main+0x7a4>)
 8003706:	785b      	ldrb	r3, [r3, #1]
 8003708:	b2db      	uxtb	r3, r3
 800370a:	469e      	mov	lr, r3
 800370c:	4b3d      	ldr	r3, [pc, #244]	; (8003804 <main+0x7a4>)
 800370e:	789b      	ldrb	r3, [r3, #2]
 8003710:	b2db      	uxtb	r3, r3
 8003712:	461a      	mov	r2, r3
 8003714:	4b3b      	ldr	r3, [pc, #236]	; (8003804 <main+0x7a4>)
 8003716:	78db      	ldrb	r3, [r3, #3]
 8003718:	b2db      	uxtb	r3, r3
 800371a:	4619      	mov	r1, r3
 800371c:	4b39      	ldr	r3, [pc, #228]	; (8003804 <main+0x7a4>)
 800371e:	791b      	ldrb	r3, [r3, #4]
 8003720:	b2db      	uxtb	r3, r3
 8003722:	4618      	mov	r0, r3
 8003724:	4b37      	ldr	r3, [pc, #220]	; (8003804 <main+0x7a4>)
 8003726:	795b      	ldrb	r3, [r3, #5]
 8003728:	b2db      	uxtb	r3, r3
 800372a:	461c      	mov	r4, r3
 800372c:	4b35      	ldr	r3, [pc, #212]	; (8003804 <main+0x7a4>)
 800372e:	799b      	ldrb	r3, [r3, #6]
 8003730:	b2db      	uxtb	r3, r3
 8003732:	461d      	mov	r5, r3
 8003734:	4b33      	ldr	r3, [pc, #204]	; (8003804 <main+0x7a4>)
 8003736:	79db      	ldrb	r3, [r3, #7]
 8003738:	b2db      	uxtb	r3, r3
 800373a:	461e      	mov	r6, r3
 800373c:	4b31      	ldr	r3, [pc, #196]	; (8003804 <main+0x7a4>)
 800373e:	7a1b      	ldrb	r3, [r3, #8]
 8003740:	b2db      	uxtb	r3, r3
 8003742:	9306      	str	r3, [sp, #24]
 8003744:	9605      	str	r6, [sp, #20]
 8003746:	9504      	str	r5, [sp, #16]
 8003748:	9403      	str	r4, [sp, #12]
 800374a:	9002      	str	r0, [sp, #8]
 800374c:	9101      	str	r1, [sp, #4]
 800374e:	9200      	str	r2, [sp, #0]
 8003750:	4673      	mov	r3, lr
 8003752:	4662      	mov	r2, ip
 8003754:	4933      	ldr	r1, [pc, #204]	; (8003824 <main+0x7c4>)
 8003756:	4832      	ldr	r0, [pc, #200]	; (8003820 <main+0x7c0>)
 8003758:	f004 ffa8 	bl	80086ac <siprintf>
 800375c:	4603      	mov	r3, r0
 800375e:	b2da      	uxtb	r2, r3
 8003760:	4b31      	ldr	r3, [pc, #196]	; (8003828 <main+0x7c8>)
 8003762:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8003764:	4b30      	ldr	r3, [pc, #192]	; (8003828 <main+0x7c8>)
 8003766:	781b      	ldrb	r3, [r3, #0]
 8003768:	b29a      	uxth	r2, r3
 800376a:	23c8      	movs	r3, #200	; 0xc8
 800376c:	492c      	ldr	r1, [pc, #176]	; (8003820 <main+0x7c0>)
 800376e:	482f      	ldr	r0, [pc, #188]	; (800382c <main+0x7cc>)
 8003770:	f003 f8bb 	bl	80068ea <HAL_UART_Transmit>
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8003774:	4b22      	ldr	r3, [pc, #136]	; (8003800 <main+0x7a0>)
 8003776:	781b      	ldrb	r3, [r3, #0]
 8003778:	3301      	adds	r3, #1
 800377a:	b2da      	uxtb	r2, r3
 800377c:	4b20      	ldr	r3, [pc, #128]	; (8003800 <main+0x7a0>)
 800377e:	701a      	strb	r2, [r3, #0]
 8003780:	4b1f      	ldr	r3, [pc, #124]	; (8003800 <main+0x7a0>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b1e      	cmp	r3, #30
 8003786:	f67f aebf 	bls.w	8003508 <main+0x4a8>
						}
						//break;
					}
				}
				ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/EncoderResolution; // Calculate Object Position in m
 800378a:	4b29      	ldr	r3, [pc, #164]	; (8003830 <main+0x7d0>)
 800378c:	681b      	ldr	r3, [r3, #0]
 800378e:	4618      	mov	r0, r3
 8003790:	f7fc feda 	bl	8000548 <__aeabi_f2d>
 8003794:	a318      	add	r3, pc, #96	; (adr r3, 80037f8 <main+0x798>)
 8003796:	e9d3 2300 	ldrd	r2, r3, [r3]
 800379a:	f7fc ff2d 	bl	80005f8 <__aeabi_dmul>
 800379e:	4602      	mov	r2, r0
 80037a0:	460b      	mov	r3, r1
 80037a2:	4614      	mov	r4, r2
 80037a4:	461d      	mov	r5, r3
 80037a6:	4b1b      	ldr	r3, [pc, #108]	; (8003814 <main+0x7b4>)
 80037a8:	681a      	ldr	r2, [r3, #0]
 80037aa:	4b22      	ldr	r3, [pc, #136]	; (8003834 <main+0x7d4>)
 80037ac:	681b      	ldr	r3, [r3, #0]
 80037ae:	1ad3      	subs	r3, r2, r3
 80037b0:	4618      	mov	r0, r3
 80037b2:	f7fc feb7 	bl	8000524 <__aeabi_i2d>
 80037b6:	4602      	mov	r2, r0
 80037b8:	460b      	mov	r3, r1
 80037ba:	4620      	mov	r0, r4
 80037bc:	4629      	mov	r1, r5
 80037be:	f7fc ff1b 	bl	80005f8 <__aeabi_dmul>
 80037c2:	4602      	mov	r2, r0
 80037c4:	460b      	mov	r3, r1
 80037c6:	4614      	mov	r4, r2
 80037c8:	461d      	mov	r5, r3
 80037ca:	4b1b      	ldr	r3, [pc, #108]	; (8003838 <main+0x7d8>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fc fea8 	bl	8000524 <__aeabi_i2d>
 80037d4:	4602      	mov	r2, r0
 80037d6:	460b      	mov	r3, r1
 80037d8:	4620      	mov	r0, r4
 80037da:	4629      	mov	r1, r5
 80037dc:	f7fd f836 	bl	800084c <__aeabi_ddiv>
 80037e0:	4602      	mov	r2, r0
 80037e2:	460b      	mov	r3, r1
 80037e4:	4610      	mov	r0, r2
 80037e6:	4619      	mov	r1, r3
 80037e8:	f7fd f9fe 	bl	8000be8 <__aeabi_d2f>
 80037ec:	4603      	mov	r3, r0
 80037ee:	4a13      	ldr	r2, [pc, #76]	; (800383c <main+0x7dc>)
 80037f0:	6013      	str	r3, [r2, #0]
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 80037f2:	e463      	b.n	80030bc <main+0x5c>
 80037f4:	f3af 8000 	nop.w
 80037f8:	51eb851f 	.word	0x51eb851f
 80037fc:	40191eb8 	.word	0x40191eb8
 8003800:	20000411 	.word	0x20000411
 8003804:	20000360 	.word	0x20000360
 8003808:	20006288 	.word	0x20006288
 800380c:	44fa0000 	.word	0x44fa0000
 8003810:	20006284 	.word	0x20006284
 8003814:	2000628c 	.word	0x2000628c
 8003818:	200003a9 	.word	0x200003a9
 800381c:	200002b0 	.word	0x200002b0
 8003820:	200003ac 	.word	0x200003ac
 8003824:	0800c444 	.word	0x0800c444
 8003828:	20000410 	.word	0x20000410
 800382c:	200002f4 	.word	0x200002f4
 8003830:	20006210 	.word	0x20006210
 8003834:	20006220 	.word	0x20006220
 8003838:	2000000a 	.word	0x2000000a
 800383c:	200062bc 	.word	0x200062bc

08003840 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8003840:	b580      	push	{r7, lr}
 8003842:	b094      	sub	sp, #80	; 0x50
 8003844:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8003846:	f107 0320 	add.w	r3, r7, #32
 800384a:	2230      	movs	r2, #48	; 0x30
 800384c:	2100      	movs	r1, #0
 800384e:	4618      	mov	r0, r3
 8003850:	f004 f8a4 	bl	800799c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8003854:	f107 030c 	add.w	r3, r7, #12
 8003858:	2200      	movs	r2, #0
 800385a:	601a      	str	r2, [r3, #0]
 800385c:	605a      	str	r2, [r3, #4]
 800385e:	609a      	str	r2, [r3, #8]
 8003860:	60da      	str	r2, [r3, #12]
 8003862:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8003864:	2300      	movs	r3, #0
 8003866:	60bb      	str	r3, [r7, #8]
 8003868:	4b28      	ldr	r3, [pc, #160]	; (800390c <SystemClock_Config+0xcc>)
 800386a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800386c:	4a27      	ldr	r2, [pc, #156]	; (800390c <SystemClock_Config+0xcc>)
 800386e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003872:	6413      	str	r3, [r2, #64]	; 0x40
 8003874:	4b25      	ldr	r3, [pc, #148]	; (800390c <SystemClock_Config+0xcc>)
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800387c:	60bb      	str	r3, [r7, #8]
 800387e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8003880:	2300      	movs	r3, #0
 8003882:	607b      	str	r3, [r7, #4]
 8003884:	4b22      	ldr	r3, [pc, #136]	; (8003910 <SystemClock_Config+0xd0>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	4a21      	ldr	r2, [pc, #132]	; (8003910 <SystemClock_Config+0xd0>)
 800388a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800388e:	6013      	str	r3, [r2, #0]
 8003890:	4b1f      	ldr	r3, [pc, #124]	; (8003910 <SystemClock_Config+0xd0>)
 8003892:	681b      	ldr	r3, [r3, #0]
 8003894:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003898:	607b      	str	r3, [r7, #4]
 800389a:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 800389c:	2301      	movs	r3, #1
 800389e:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80038a0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80038a4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80038a6:	2302      	movs	r3, #2
 80038a8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80038aa:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80038ae:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80038b0:	230c      	movs	r3, #12
 80038b2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80038b4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80038b8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80038ba:	2302      	movs	r3, #2
 80038bc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80038be:	2304      	movs	r3, #4
 80038c0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80038c2:	f107 0320 	add.w	r3, r7, #32
 80038c6:	4618      	mov	r0, r3
 80038c8:	f001 fc9a 	bl	8005200 <HAL_RCC_OscConfig>
 80038cc:	4603      	mov	r3, r0
 80038ce:	2b00      	cmp	r3, #0
 80038d0:	d001      	beq.n	80038d6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 80038d2:	f000 fad7 	bl	8003e84 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80038d6:	230f      	movs	r3, #15
 80038d8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80038da:	2302      	movs	r3, #2
 80038dc:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80038de:	2300      	movs	r3, #0
 80038e0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80038e2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038e6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80038e8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80038ec:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80038ee:	f107 030c 	add.w	r3, r7, #12
 80038f2:	2105      	movs	r1, #5
 80038f4:	4618      	mov	r0, r3
 80038f6:	f001 fefb 	bl	80056f0 <HAL_RCC_ClockConfig>
 80038fa:	4603      	mov	r3, r0
 80038fc:	2b00      	cmp	r3, #0
 80038fe:	d001      	beq.n	8003904 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8003900:	f000 fac0 	bl	8003e84 <Error_Handler>
  }
}
 8003904:	bf00      	nop
 8003906:	3750      	adds	r7, #80	; 0x50
 8003908:	46bd      	mov	sp, r7
 800390a:	bd80      	pop	{r7, pc}
 800390c:	40023800 	.word	0x40023800
 8003910:	40007000 	.word	0x40007000

08003914 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8003914:	b580      	push	{r7, lr}
 8003916:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8003918:	2200      	movs	r2, #0
 800391a:	2100      	movs	r1, #0
 800391c:	2047      	movs	r0, #71	; 0x47
 800391e:	f000 fed6 	bl	80046ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8003922:	2047      	movs	r0, #71	; 0x47
 8003924:	f000 feef 	bl	8004706 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8003928:	2200      	movs	r2, #0
 800392a:	2102      	movs	r1, #2
 800392c:	201d      	movs	r0, #29
 800392e:	f000 fece 	bl	80046ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003932:	201d      	movs	r0, #29
 8003934:	f000 fee7 	bl	8004706 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8003938:	2200      	movs	r2, #0
 800393a:	2103      	movs	r1, #3
 800393c:	201c      	movs	r0, #28
 800393e:	f000 fec6 	bl	80046ce <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003942:	201c      	movs	r0, #28
 8003944:	f000 fedf 	bl	8004706 <HAL_NVIC_EnableIRQ>
}
 8003948:	bf00      	nop
 800394a:	bd80      	pop	{r7, pc}

0800394c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b08a      	sub	sp, #40	; 0x28
 8003950:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003952:	f107 0318 	add.w	r3, r7, #24
 8003956:	2200      	movs	r2, #0
 8003958:	601a      	str	r2, [r3, #0]
 800395a:	605a      	str	r2, [r3, #4]
 800395c:	609a      	str	r2, [r3, #8]
 800395e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003960:	f107 0310 	add.w	r3, r7, #16
 8003964:	2200      	movs	r2, #0
 8003966:	601a      	str	r2, [r3, #0]
 8003968:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 800396a:	463b      	mov	r3, r7
 800396c:	2200      	movs	r2, #0
 800396e:	601a      	str	r2, [r3, #0]
 8003970:	605a      	str	r2, [r3, #4]
 8003972:	609a      	str	r2, [r3, #8]
 8003974:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8003976:	4b31      	ldr	r3, [pc, #196]	; (8003a3c <MX_TIM2_Init+0xf0>)
 8003978:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800397c:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10-1;
 800397e:	4b2f      	ldr	r3, [pc, #188]	; (8003a3c <MX_TIM2_Init+0xf0>)
 8003980:	2209      	movs	r2, #9
 8003982:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003984:	4b2d      	ldr	r3, [pc, #180]	; (8003a3c <MX_TIM2_Init+0xf0>)
 8003986:	2200      	movs	r2, #0
 8003988:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 800398a:	4b2c      	ldr	r3, [pc, #176]	; (8003a3c <MX_TIM2_Init+0xf0>)
 800398c:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8003990:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003992:	4b2a      	ldr	r3, [pc, #168]	; (8003a3c <MX_TIM2_Init+0xf0>)
 8003994:	2200      	movs	r2, #0
 8003996:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8003998:	4b28      	ldr	r3, [pc, #160]	; (8003a3c <MX_TIM2_Init+0xf0>)
 800399a:	2280      	movs	r2, #128	; 0x80
 800399c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800399e:	4827      	ldr	r0, [pc, #156]	; (8003a3c <MX_TIM2_Init+0xf0>)
 80039a0:	f002 f886 	bl	8005ab0 <HAL_TIM_Base_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80039aa:	f000 fa6b 	bl	8003e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80039ae:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80039b2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80039b4:	f107 0318 	add.w	r3, r7, #24
 80039b8:	4619      	mov	r1, r3
 80039ba:	4820      	ldr	r0, [pc, #128]	; (8003a3c <MX_TIM2_Init+0xf0>)
 80039bc:	f002 fb64 	bl	8006088 <HAL_TIM_ConfigClockSource>
 80039c0:	4603      	mov	r3, r0
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d001      	beq.n	80039ca <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80039c6:	f000 fa5d 	bl	8003e84 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80039ca:	481c      	ldr	r0, [pc, #112]	; (8003a3c <MX_TIM2_Init+0xf0>)
 80039cc:	f002 f95f 	bl	8005c8e <HAL_TIM_IC_Init>
 80039d0:	4603      	mov	r3, r0
 80039d2:	2b00      	cmp	r3, #0
 80039d4:	d001      	beq.n	80039da <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80039d6:	f000 fa55 	bl	8003e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80039da:	2320      	movs	r3, #32
 80039dc:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80039de:	2300      	movs	r3, #0
 80039e0:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80039e2:	f107 0310 	add.w	r3, r7, #16
 80039e6:	4619      	mov	r1, r3
 80039e8:	4814      	ldr	r0, [pc, #80]	; (8003a3c <MX_TIM2_Init+0xf0>)
 80039ea:	f002 fea1 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 80039ee:	4603      	mov	r3, r0
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d001      	beq.n	80039f8 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80039f4:	f000 fa46 	bl	8003e84 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 80039f8:	2300      	movs	r3, #0
 80039fa:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 80039fc:	2301      	movs	r3, #1
 80039fe:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8003a00:	2300      	movs	r3, #0
 8003a02:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8003a04:	2300      	movs	r3, #0
 8003a06:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8003a08:	463b      	mov	r3, r7
 8003a0a:	2200      	movs	r2, #0
 8003a0c:	4619      	mov	r1, r3
 8003a0e:	480b      	ldr	r0, [pc, #44]	; (8003a3c <MX_TIM2_Init+0xf0>)
 8003a10:	f002 fa9e 	bl	8005f50 <HAL_TIM_IC_ConfigChannel>
 8003a14:	4603      	mov	r3, r0
 8003a16:	2b00      	cmp	r3, #0
 8003a18:	d001      	beq.n	8003a1e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8003a1a:	f000 fa33 	bl	8003e84 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8003a1e:	463b      	mov	r3, r7
 8003a20:	2204      	movs	r2, #4
 8003a22:	4619      	mov	r1, r3
 8003a24:	4805      	ldr	r0, [pc, #20]	; (8003a3c <MX_TIM2_Init+0xf0>)
 8003a26:	f002 fa93 	bl	8005f50 <HAL_TIM_IC_ConfigChannel>
 8003a2a:	4603      	mov	r3, r0
 8003a2c:	2b00      	cmp	r3, #0
 8003a2e:	d001      	beq.n	8003a34 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8003a30:	f000 fa28 	bl	8003e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8003a34:	bf00      	nop
 8003a36:	3728      	adds	r7, #40	; 0x28
 8003a38:	46bd      	mov	sp, r7
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	20000220 	.word	0x20000220

08003a40 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	b086      	sub	sp, #24
 8003a44:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8003a46:	f107 0308 	add.w	r3, r7, #8
 8003a4a:	2200      	movs	r2, #0
 8003a4c:	601a      	str	r2, [r3, #0]
 8003a4e:	605a      	str	r2, [r3, #4]
 8003a50:	609a      	str	r2, [r3, #8]
 8003a52:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8003a54:	463b      	mov	r3, r7
 8003a56:	2200      	movs	r2, #0
 8003a58:	601a      	str	r2, [r3, #0]
 8003a5a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8003a5c:	4b1c      	ldr	r3, [pc, #112]	; (8003ad0 <MX_TIM3_Init+0x90>)
 8003a5e:	4a1d      	ldr	r2, [pc, #116]	; (8003ad4 <MX_TIM3_Init+0x94>)
 8003a60:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8003a62:	4b1b      	ldr	r3, [pc, #108]	; (8003ad0 <MX_TIM3_Init+0x90>)
 8003a64:	2201      	movs	r2, #1
 8003a66:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8003a68:	4b19      	ldr	r3, [pc, #100]	; (8003ad0 <MX_TIM3_Init+0x90>)
 8003a6a:	2200      	movs	r2, #0
 8003a6c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168;
 8003a6e:	4b18      	ldr	r3, [pc, #96]	; (8003ad0 <MX_TIM3_Init+0x90>)
 8003a70:	22a8      	movs	r2, #168	; 0xa8
 8003a72:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8003a74:	4b16      	ldr	r3, [pc, #88]	; (8003ad0 <MX_TIM3_Init+0x90>)
 8003a76:	2200      	movs	r2, #0
 8003a78:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8003a7a:	4b15      	ldr	r3, [pc, #84]	; (8003ad0 <MX_TIM3_Init+0x90>)
 8003a7c:	2200      	movs	r2, #0
 8003a7e:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8003a80:	4813      	ldr	r0, [pc, #76]	; (8003ad0 <MX_TIM3_Init+0x90>)
 8003a82:	f002 f815 	bl	8005ab0 <HAL_TIM_Base_Init>
 8003a86:	4603      	mov	r3, r0
 8003a88:	2b00      	cmp	r3, #0
 8003a8a:	d001      	beq.n	8003a90 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8003a8c:	f000 f9fa 	bl	8003e84 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8003a90:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8003a94:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8003a96:	f107 0308 	add.w	r3, r7, #8
 8003a9a:	4619      	mov	r1, r3
 8003a9c:	480c      	ldr	r0, [pc, #48]	; (8003ad0 <MX_TIM3_Init+0x90>)
 8003a9e:	f002 faf3 	bl	8006088 <HAL_TIM_ConfigClockSource>
 8003aa2:	4603      	mov	r3, r0
 8003aa4:	2b00      	cmp	r3, #0
 8003aa6:	d001      	beq.n	8003aac <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8003aa8:	f000 f9ec 	bl	8003e84 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8003aac:	2300      	movs	r3, #0
 8003aae:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8003ab0:	2300      	movs	r3, #0
 8003ab2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8003ab4:	463b      	mov	r3, r7
 8003ab6:	4619      	mov	r1, r3
 8003ab8:	4805      	ldr	r0, [pc, #20]	; (8003ad0 <MX_TIM3_Init+0x90>)
 8003aba:	f002 fe39 	bl	8006730 <HAL_TIMEx_MasterConfigSynchronization>
 8003abe:	4603      	mov	r3, r0
 8003ac0:	2b00      	cmp	r3, #0
 8003ac2:	d001      	beq.n	8003ac8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8003ac4:	f000 f9de 	bl	8003e84 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8003ac8:	bf00      	nop
 8003aca:	3718      	adds	r7, #24
 8003acc:	46bd      	mov	sp, r7
 8003ace:	bd80      	pop	{r7, pc}
 8003ad0:	20000268 	.word	0x20000268
 8003ad4:	40000400 	.word	0x40000400

08003ad8 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8003ad8:	b580      	push	{r7, lr}
 8003ada:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8003adc:	4b11      	ldr	r3, [pc, #68]	; (8003b24 <MX_UART5_Init+0x4c>)
 8003ade:	4a12      	ldr	r2, [pc, #72]	; (8003b28 <MX_UART5_Init+0x50>)
 8003ae0:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 57600;
 8003ae2:	4b10      	ldr	r3, [pc, #64]	; (8003b24 <MX_UART5_Init+0x4c>)
 8003ae4:	f44f 4261 	mov.w	r2, #57600	; 0xe100
 8003ae8:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8003aea:	4b0e      	ldr	r3, [pc, #56]	; (8003b24 <MX_UART5_Init+0x4c>)
 8003aec:	2200      	movs	r2, #0
 8003aee:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8003af0:	4b0c      	ldr	r3, [pc, #48]	; (8003b24 <MX_UART5_Init+0x4c>)
 8003af2:	2200      	movs	r2, #0
 8003af4:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8003af6:	4b0b      	ldr	r3, [pc, #44]	; (8003b24 <MX_UART5_Init+0x4c>)
 8003af8:	2200      	movs	r2, #0
 8003afa:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8003afc:	4b09      	ldr	r3, [pc, #36]	; (8003b24 <MX_UART5_Init+0x4c>)
 8003afe:	220c      	movs	r2, #12
 8003b00:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b02:	4b08      	ldr	r3, [pc, #32]	; (8003b24 <MX_UART5_Init+0x4c>)
 8003b04:	2200      	movs	r2, #0
 8003b06:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b08:	4b06      	ldr	r3, [pc, #24]	; (8003b24 <MX_UART5_Init+0x4c>)
 8003b0a:	2200      	movs	r2, #0
 8003b0c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8003b0e:	4805      	ldr	r0, [pc, #20]	; (8003b24 <MX_UART5_Init+0x4c>)
 8003b10:	f002 fe9e 	bl	8006850 <HAL_UART_Init>
 8003b14:	4603      	mov	r3, r0
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d001      	beq.n	8003b1e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8003b1a:	f000 f9b3 	bl	8003e84 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8003b1e:	bf00      	nop
 8003b20:	bd80      	pop	{r7, pc}
 8003b22:	bf00      	nop
 8003b24:	200002b0 	.word	0x200002b0
 8003b28:	40005000 	.word	0x40005000

08003b2c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8003b2c:	b580      	push	{r7, lr}
 8003b2e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8003b30:	4b11      	ldr	r3, [pc, #68]	; (8003b78 <MX_USART6_UART_Init+0x4c>)
 8003b32:	4a12      	ldr	r2, [pc, #72]	; (8003b7c <MX_USART6_UART_Init+0x50>)
 8003b34:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8003b36:	4b10      	ldr	r3, [pc, #64]	; (8003b78 <MX_USART6_UART_Init+0x4c>)
 8003b38:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8003b3c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8003b3e:	4b0e      	ldr	r3, [pc, #56]	; (8003b78 <MX_USART6_UART_Init+0x4c>)
 8003b40:	2200      	movs	r2, #0
 8003b42:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8003b44:	4b0c      	ldr	r3, [pc, #48]	; (8003b78 <MX_USART6_UART_Init+0x4c>)
 8003b46:	2200      	movs	r2, #0
 8003b48:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8003b4a:	4b0b      	ldr	r3, [pc, #44]	; (8003b78 <MX_USART6_UART_Init+0x4c>)
 8003b4c:	2200      	movs	r2, #0
 8003b4e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8003b50:	4b09      	ldr	r3, [pc, #36]	; (8003b78 <MX_USART6_UART_Init+0x4c>)
 8003b52:	220c      	movs	r2, #12
 8003b54:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8003b56:	4b08      	ldr	r3, [pc, #32]	; (8003b78 <MX_USART6_UART_Init+0x4c>)
 8003b58:	2200      	movs	r2, #0
 8003b5a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8003b5c:	4b06      	ldr	r3, [pc, #24]	; (8003b78 <MX_USART6_UART_Init+0x4c>)
 8003b5e:	2200      	movs	r2, #0
 8003b60:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8003b62:	4805      	ldr	r0, [pc, #20]	; (8003b78 <MX_USART6_UART_Init+0x4c>)
 8003b64:	f002 fe74 	bl	8006850 <HAL_UART_Init>
 8003b68:	4603      	mov	r3, r0
 8003b6a:	2b00      	cmp	r3, #0
 8003b6c:	d001      	beq.n	8003b72 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8003b6e:	f000 f989 	bl	8003e84 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8003b72:	bf00      	nop
 8003b74:	bd80      	pop	{r7, pc}
 8003b76:	bf00      	nop
 8003b78:	200002f4 	.word	0x200002f4
 8003b7c:	40011400 	.word	0x40011400

08003b80 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8003b80:	b580      	push	{r7, lr}
 8003b82:	b08c      	sub	sp, #48	; 0x30
 8003b84:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003b86:	f107 031c 	add.w	r3, r7, #28
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	601a      	str	r2, [r3, #0]
 8003b8e:	605a      	str	r2, [r3, #4]
 8003b90:	609a      	str	r2, [r3, #8]
 8003b92:	60da      	str	r2, [r3, #12]
 8003b94:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8003b96:	2300      	movs	r3, #0
 8003b98:	61bb      	str	r3, [r7, #24]
 8003b9a:	4bb4      	ldr	r3, [pc, #720]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003b9c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b9e:	4ab3      	ldr	r2, [pc, #716]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003ba0:	f043 0310 	orr.w	r3, r3, #16
 8003ba4:	6313      	str	r3, [r2, #48]	; 0x30
 8003ba6:	4bb1      	ldr	r3, [pc, #708]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003ba8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003baa:	f003 0310 	and.w	r3, r3, #16
 8003bae:	61bb      	str	r3, [r7, #24]
 8003bb0:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8003bb2:	2300      	movs	r3, #0
 8003bb4:	617b      	str	r3, [r7, #20]
 8003bb6:	4bad      	ldr	r3, [pc, #692]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bb8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bba:	4aac      	ldr	r2, [pc, #688]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bbc:	f043 0304 	orr.w	r3, r3, #4
 8003bc0:	6313      	str	r3, [r2, #48]	; 0x30
 8003bc2:	4baa      	ldr	r3, [pc, #680]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bc4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bc6:	f003 0304 	and.w	r3, r3, #4
 8003bca:	617b      	str	r3, [r7, #20]
 8003bcc:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8003bce:	2300      	movs	r3, #0
 8003bd0:	613b      	str	r3, [r7, #16]
 8003bd2:	4ba6      	ldr	r3, [pc, #664]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bd4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bd6:	4aa5      	ldr	r2, [pc, #660]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bd8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8003bdc:	6313      	str	r3, [r2, #48]	; 0x30
 8003bde:	4ba3      	ldr	r3, [pc, #652]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003be0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003be2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003be6:	613b      	str	r3, [r7, #16]
 8003be8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8003bea:	2300      	movs	r3, #0
 8003bec:	60fb      	str	r3, [r7, #12]
 8003bee:	4b9f      	ldr	r3, [pc, #636]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bf0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bf2:	4a9e      	ldr	r2, [pc, #632]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bf4:	f043 0301 	orr.w	r3, r3, #1
 8003bf8:	6313      	str	r3, [r2, #48]	; 0x30
 8003bfa:	4b9c      	ldr	r3, [pc, #624]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003bfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003bfe:	f003 0301 	and.w	r3, r3, #1
 8003c02:	60fb      	str	r3, [r7, #12]
 8003c04:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8003c06:	2300      	movs	r3, #0
 8003c08:	60bb      	str	r3, [r7, #8]
 8003c0a:	4b98      	ldr	r3, [pc, #608]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0e:	4a97      	ldr	r2, [pc, #604]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c10:	f043 0302 	orr.w	r3, r3, #2
 8003c14:	6313      	str	r3, [r2, #48]	; 0x30
 8003c16:	4b95      	ldr	r3, [pc, #596]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c1a:	f003 0302 	and.w	r3, r3, #2
 8003c1e:	60bb      	str	r3, [r7, #8]
 8003c20:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8003c22:	2300      	movs	r3, #0
 8003c24:	607b      	str	r3, [r7, #4]
 8003c26:	4b91      	ldr	r3, [pc, #580]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c28:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c2a:	4a90      	ldr	r2, [pc, #576]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c2c:	f043 0308 	orr.w	r3, r3, #8
 8003c30:	6313      	str	r3, [r2, #48]	; 0x30
 8003c32:	4b8e      	ldr	r3, [pc, #568]	; (8003e6c <MX_GPIO_Init+0x2ec>)
 8003c34:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c36:	f003 0308 	and.w	r3, r3, #8
 8003c3a:	607b      	str	r3, [r7, #4]
 8003c3c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE4_ZIGBEE_PA_EN_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin|Speed1_not_PE13_41_Pin
 8003c3e:	2200      	movs	r2, #0
 8003c40:	f24a 3113 	movw	r1, #41747	; 0xa313
 8003c44:	488a      	ldr	r0, [pc, #552]	; (8003e70 <MX_GPIO_Init+0x2f0>)
 8003c46:	f001 faa7 	bl	8005198 <HAL_GPIO_WritePin>
                          |PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_ZIGBEE_nRST_Pin|PC8_PR_Pin|PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin, GPIO_PIN_RESET);
 8003c4a:	2200      	movs	r2, #0
 8003c4c:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8003c50:	4888      	ldr	r0, [pc, #544]	; (8003e74 <MX_GPIO_Init+0x2f4>)
 8003c52:	f001 faa1 	bl	8005198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8003c56:	2200      	movs	r2, #0
 8003c58:	f649 5108 	movw	r1, #40200	; 0x9d08
 8003c5c:	4886      	ldr	r0, [pc, #536]	; (8003e78 <MX_GPIO_Init+0x2f8>)
 8003c5e:	f001 fa9b 	bl	8005198 <HAL_GPIO_WritePin>
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin, GPIO_PIN_SET);
 8003c62:	2201      	movs	r2, #1
 8003c64:	2130      	movs	r1, #48	; 0x30
 8003c66:	4883      	ldr	r0, [pc, #524]	; (8003e74 <MX_GPIO_Init+0x2f4>)
 8003c68:	f001 fa96 	bl	8005198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EStop_Not_PB0_17_Pin|CN1_16_PulseCCLR_Pin|PB13_Output_JP7_Pin|PB14_POS_CMD_OPC_EN_Pin
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	f246 0165 	movw	r1, #24677	; 0x6065
 8003c72:	4882      	ldr	r0, [pc, #520]	; (8003e7c <MX_GPIO_Init+0x2fc>)
 8003c74:	f001 fa90 	bl	8005198 <HAL_GPIO_WritePin>
                          |PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ArlarmRST_PB1_42_Pin|PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);
 8003c78:	2201      	movs	r2, #1
 8003c7a:	f248 0102 	movw	r1, #32770	; 0x8002
 8003c7e:	487f      	ldr	r0, [pc, #508]	; (8003e7c <MX_GPIO_Init+0x2fc>)
 8003c80:	f001 fa8a 	bl	8005198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Speed2_Not_PE7_15_Pin|Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin
 8003c84:	2201      	movs	r2, #1
 8003c86:	f44f 41b9 	mov.w	r1, #23680	; 0x5c80
 8003c8a:	4879      	ldr	r0, [pc, #484]	; (8003e70 <MX_GPIO_Init+0x2f0>)
 8003c8c:	f001 fa84 	bl	8005198 <HAL_GPIO_WritePin>
                          |CWLIM_Not_PE14_13_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD10_ESP32_EN_GPIO_Port, PD10_ESP32_EN_Pin, GPIO_PIN_SET);
 8003c90:	2201      	movs	r2, #1
 8003c92:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8003c96:	487a      	ldr	r0, [pc, #488]	; (8003e80 <MX_GPIO_Init+0x300>)
 8003c98:	f001 fa7e 	bl	8005198 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin, GPIO_PIN_RESET);
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8003ca2:	4877      	ldr	r0, [pc, #476]	; (8003e80 <MX_GPIO_Init+0x300>)
 8003ca4:	f001 fa78 	bl	8005198 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN1_22_RDY_Pin CN1_21_SPDOUT_TRQOUT_Pin PE5_BLE_GPIO_Pin CN1_48_BRAKE_Pin */
  GPIO_InitStruct.Pin = CN1_22_RDY_Pin|CN1_21_SPDOUT_TRQOUT_Pin|PE5_BLE_GPIO_Pin|CN1_48_BRAKE_Pin;
 8003ca8:	236c      	movs	r3, #108	; 0x6c
 8003caa:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003cac:	2300      	movs	r3, #0
 8003cae:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cb0:	2300      	movs	r3, #0
 8003cb2:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cb4:	f107 031c 	add.w	r3, r7, #28
 8003cb8:	4619      	mov	r1, r3
 8003cba:	486d      	ldr	r0, [pc, #436]	; (8003e70 <MX_GPIO_Init+0x2f0>)
 8003cbc:	f001 f8b8 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4_ZIGBEE_PA_EN_Pin Speed2_Not_PE7_15_Pin Type_Not_PE8_40_Pin PE9_TIM1_CH1_PFIN_Pin
                           Dir_Not_PE10_14_Pin SPDLIM_Not_PE11_38_Pin CCWLIM_Not_PE12_39_Pin Speed1_not_PE13_41_Pin
                           CWLIM_Not_PE14_13_Pin PE15_RELAY1_Pin PE0_485_MCU_DRV_DIR_Pin PE1_ZIGBEE_EN_Pin */
  GPIO_InitStruct.Pin = PE4_ZIGBEE_PA_EN_Pin|Speed2_Not_PE7_15_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin
 8003cc0:	f64f 7393 	movw	r3, #65427	; 0xff93
 8003cc4:	61fb      	str	r3, [r7, #28]
                          |Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin|Speed1_not_PE13_41_Pin
                          |CWLIM_Not_PE14_13_Pin|PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cc6:	2301      	movs	r3, #1
 8003cc8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003cce:	2300      	movs	r3, #0
 8003cd0:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8003cd2:	f107 031c 	add.w	r3, r7, #28
 8003cd6:	4619      	mov	r1, r3
 8003cd8:	4865      	ldr	r0, [pc, #404]	; (8003e70 <MX_GPIO_Init+0x2f0>)
 8003cda:	f001 f8a9 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_USER_BT_MID_Pin CN1_46_ALARM_Pin CN1_47_INSPD_INPOS_Pin CN1_45_NCWOUT_NTQOUT_Pin */
  GPIO_InitStruct.Pin = PC13_USER_BT_MID_Pin|CN1_46_ALARM_Pin|CN1_47_INSPD_INPOS_Pin|CN1_45_NCWOUT_NTQOUT_Pin;
 8003cde:	f242 0307 	movw	r3, #8199	; 0x2007
 8003ce2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003ce4:	2300      	movs	r3, #0
 8003ce6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003cec:	f107 031c 	add.w	r3, r7, #28
 8003cf0:	4619      	mov	r1, r3
 8003cf2:	4860      	ldr	r0, [pc, #384]	; (8003e74 <MX_GPIO_Init+0x2f4>)
 8003cf4:	f001 f89c 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_ZIGBEE_nRST_Pin SerVoReset_PC4_18_Pin Stop_PC5_43_Pin PC8_PR_Pin
                           PC9_ZIGBEE_HGM_EN_Pin PC10_SPI3_SCK_SPARE_Pin */
  GPIO_InitStruct.Pin = PC3_ZIGBEE_nRST_Pin|SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin|PC8_PR_Pin
 8003cf8:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8003cfc:	61fb      	str	r3, [r7, #28]
                          |PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003cfe:	2301      	movs	r3, #1
 8003d00:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d02:	2300      	movs	r3, #0
 8003d04:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d06:	2300      	movs	r3, #0
 8003d08:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003d0a:	f107 031c 	add.w	r3, r7, #28
 8003d0e:	4619      	mov	r1, r3
 8003d10:	4858      	ldr	r0, [pc, #352]	; (8003e74 <MX_GPIO_Init+0x2f4>)
 8003d12:	f001 f88d 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_UART4_TX_ESP32_RX_Pin */
  GPIO_InitStruct.Pin = PA0_UART4_TX_ESP32_RX_Pin;
 8003d16:	2301      	movs	r3, #1
 8003d18:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003d1a:	2302      	movs	r3, #2
 8003d1c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d1e:	2300      	movs	r3, #0
 8003d20:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d22:	2303      	movs	r3, #3
 8003d24:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8003d26:	2308      	movs	r3, #8
 8003d28:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PA0_UART4_TX_ESP32_RX_GPIO_Port, &GPIO_InitStruct);
 8003d2a:	f107 031c 	add.w	r3, r7, #28
 8003d2e:	4619      	mov	r1, r3
 8003d30:	4851      	ldr	r0, [pc, #324]	; (8003e78 <MX_GPIO_Init+0x2f8>)
 8003d32:	f001 f87d 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_USER_BT_UP_Pin CN1_20_PCWOUT_PTQOUT_Pin CN1_23_TYPEOUT_Pin PA9_LINE_RECV_SELFTEST_Pin */
  GPIO_InitStruct.Pin = PA2_USER_BT_UP_Pin|CN1_20_PCWOUT_PTQOUT_Pin|CN1_23_TYPEOUT_Pin|PA9_LINE_RECV_SELFTEST_Pin;
 8003d36:	f44f 7325 	mov.w	r3, #660	; 0x294
 8003d3a:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003d3c:	2300      	movs	r3, #0
 8003d3e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d40:	2300      	movs	r3, #0
 8003d42:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d44:	f107 031c 	add.w	r3, r7, #28
 8003d48:	4619      	mov	r1, r3
 8003d4a:	484b      	ldr	r0, [pc, #300]	; (8003e78 <MX_GPIO_Init+0x2f8>)
 8003d4c:	f001 f870 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_LCD_RST_Pin PA8_LINE_DRV_SELFTEST2_Pin PA10_LINE_DRV_SELFTEST1_Pin PA11_ENC_RECEIV_EN_Pin
                           PA12_LINE_DRV_EN_Pin PA15_SPI3_NSS_SPARE_Pin */
  GPIO_InitStruct.Pin = PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8003d50:	f649 5308 	movw	r3, #40200	; 0x9d08
 8003d54:	61fb      	str	r3, [r7, #28]
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d56:	2301      	movs	r3, #1
 8003d58:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d5a:	2300      	movs	r3, #0
 8003d5c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d5e:	2300      	movs	r3, #0
 8003d60:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003d62:	f107 031c 	add.w	r3, r7, #28
 8003d66:	4619      	mov	r1, r3
 8003d68:	4843      	ldr	r0, [pc, #268]	; (8003e78 <MX_GPIO_Init+0x2f8>)
 8003d6a:	f001 f861 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : EStop_Not_PB0_17_Pin ArlarmRST_PB1_42_Pin CN1_16_PulseCCLR_Pin PB13_Output_JP7_Pin
                           PB14_POS_CMD_OPC_EN_Pin PB15_485_MCU_PC_DIR_Pin PB5_SPI3_MOSI_SPARE_Pin PB6_RELAY2_Pin */
  GPIO_InitStruct.Pin = EStop_Not_PB0_17_Pin|ArlarmRST_PB1_42_Pin|CN1_16_PulseCCLR_Pin|PB13_Output_JP7_Pin
 8003d6e:	f24e 0367 	movw	r3, #57447	; 0xe067
 8003d72:	61fb      	str	r3, [r7, #28]
                          |PB14_POS_CMD_OPC_EN_Pin|PB15_485_MCU_PC_DIR_Pin|PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003d74:	2301      	movs	r3, #1
 8003d76:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003d78:	2300      	movs	r3, #0
 8003d7a:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003d7c:	2300      	movs	r3, #0
 8003d7e:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003d80:	f107 031c 	add.w	r3, r7, #28
 8003d84:	4619      	mov	r1, r3
 8003d86:	483d      	ldr	r0, [pc, #244]	; (8003e7c <MX_GPIO_Init+0x2fc>)
 8003d88:	f001 f852 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10_I2C2_SCL_LCD_IOEXP_Pin PB11_I2C2_SDA_LCD_IOEXP_Pin */
  GPIO_InitStruct.Pin = PB10_I2C2_SCL_LCD_IOEXP_Pin|PB11_I2C2_SDA_LCD_IOEXP_Pin;
 8003d8c:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8003d90:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003d92:	2312      	movs	r3, #18
 8003d94:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003d96:	2301      	movs	r3, #1
 8003d98:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003d9a:	2303      	movs	r3, #3
 8003d9c:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8003d9e:	2304      	movs	r3, #4
 8003da0:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003da2:	f107 031c 	add.w	r3, r7, #28
 8003da6:	4619      	mov	r1, r3
 8003da8:	4834      	ldr	r0, [pc, #208]	; (8003e7c <MX_GPIO_Init+0x2fc>)
 8003daa:	f001 f841 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_RELAY3_Pin CN1_19_ZSPD_Pin PB4_SPI3_MISO_SPARE_Pin Input_JP7_Pin */
  GPIO_InitStruct.Pin = PB12_RELAY3_Pin|CN1_19_ZSPD_Pin|PB4_SPI3_MISO_SPARE_Pin|Input_JP7_Pin;
 8003dae:	f241 2318 	movw	r3, #4632	; 0x1218
 8003db2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003db4:	2300      	movs	r3, #0
 8003db6:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003db8:	2300      	movs	r3, #0
 8003dba:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003dbc:	f107 031c 	add.w	r3, r7, #28
 8003dc0:	4619      	mov	r1, r3
 8003dc2:	482e      	ldr	r0, [pc, #184]	; (8003e7c <MX_GPIO_Init+0x2fc>)
 8003dc4:	f001 f834 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD8 PD9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003dc8:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003dcc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003dce:	2302      	movs	r3, #2
 8003dd0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003dd2:	2300      	movs	r3, #0
 8003dd4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003dd6:	2303      	movs	r3, #3
 8003dd8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8003dda:	2307      	movs	r3, #7
 8003ddc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003dde:	f107 031c 	add.w	r3, r7, #28
 8003de2:	4619      	mov	r1, r3
 8003de4:	4826      	ldr	r0, [pc, #152]	; (8003e80 <MX_GPIO_Init+0x300>)
 8003de6:	f001 f823 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10_ESP32_EN_Pin */
  GPIO_InitStruct.Pin = PD10_ESP32_EN_Pin;
 8003dea:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8003dee:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8003df0:	2311      	movs	r3, #17
 8003df2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003df4:	2300      	movs	r3, #0
 8003df6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003df8:	2300      	movs	r3, #0
 8003dfa:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD10_ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 8003dfc:	f107 031c 	add.w	r3, r7, #28
 8003e00:	4619      	mov	r1, r3
 8003e02:	481f      	ldr	r0, [pc, #124]	; (8003e80 <MX_GPIO_Init+0x300>)
 8003e04:	f001 f814 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_ESP32_BOOT_SEL_Pin PD13_MON1_2_EN_Pin PD15_SPDIN_TRQIN_EN_Pin */
  GPIO_InitStruct.Pin = PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin;
 8003e08:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8003e0c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8003e0e:	2301      	movs	r3, #1
 8003e10:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e12:	2300      	movs	r3, #0
 8003e14:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003e16:	2300      	movs	r3, #0
 8003e18:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e1a:	f107 031c 	add.w	r3, r7, #28
 8003e1e:	4619      	mov	r1, r3
 8003e20:	4817      	ldr	r0, [pc, #92]	; (8003e80 <MX_GPIO_Init+0x300>)
 8003e22:	f001 f805 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12_Input_J6_Pin PD14_Input_J6_Pin Input0_J6_DAC_ADC_Pin Input1_J6_DAC_ADC_Pin
                           PD7_A_CODE2_Pin */
  GPIO_InitStruct.Pin = PD12_Input_J6_Pin|PD14_Input_J6_Pin|Input0_J6_DAC_ADC_Pin|Input1_J6_DAC_ADC_Pin
 8003e26:	f245 0383 	movw	r3, #20611	; 0x5083
 8003e2a:	61fb      	str	r3, [r7, #28]
                          |PD7_A_CODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8003e2c:	2300      	movs	r3, #0
 8003e2e:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003e30:	2300      	movs	r3, #0
 8003e32:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8003e34:	f107 031c 	add.w	r3, r7, #28
 8003e38:	4619      	mov	r1, r3
 8003e3a:	4811      	ldr	r0, [pc, #68]	; (8003e80 <MX_GPIO_Init+0x300>)
 8003e3c:	f000 fff8 	bl	8004e30 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_I2C1_SDA_DAC_ADC_Pin PB8_I2C1_SCL_DAC_ADC_Pin */
  GPIO_InitStruct.Pin = PB7_I2C1_SDA_DAC_ADC_Pin|PB8_I2C1_SCL_DAC_ADC_Pin;
 8003e40:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8003e44:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8003e46:	2312      	movs	r3, #18
 8003e48:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003e4a:	2301      	movs	r3, #1
 8003e4c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003e4e:	2303      	movs	r3, #3
 8003e50:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003e52:	2304      	movs	r3, #4
 8003e54:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8003e56:	f107 031c 	add.w	r3, r7, #28
 8003e5a:	4619      	mov	r1, r3
 8003e5c:	4807      	ldr	r0, [pc, #28]	; (8003e7c <MX_GPIO_Init+0x2fc>)
 8003e5e:	f000 ffe7 	bl	8004e30 <HAL_GPIO_Init>

}
 8003e62:	bf00      	nop
 8003e64:	3730      	adds	r7, #48	; 0x30
 8003e66:	46bd      	mov	sp, r7
 8003e68:	bd80      	pop	{r7, pc}
 8003e6a:	bf00      	nop
 8003e6c:	40023800 	.word	0x40023800
 8003e70:	40021000 	.word	0x40021000
 8003e74:	40020800 	.word	0x40020800
 8003e78:	40020000 	.word	0x40020000
 8003e7c:	40020400 	.word	0x40020400
 8003e80:	40020c00 	.word	0x40020c00

08003e84 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003e84:	b480      	push	{r7}
 8003e86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8003e88:	e7fe      	b.n	8003e88 <Error_Handler+0x4>
	...

08003e8c <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003e8c:	b480      	push	{r7}
 8003e8e:	b083      	sub	sp, #12
 8003e90:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003e92:	2300      	movs	r3, #0
 8003e94:	607b      	str	r3, [r7, #4]
 8003e96:	4b10      	ldr	r3, [pc, #64]	; (8003ed8 <HAL_MspInit+0x4c>)
 8003e98:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003e9a:	4a0f      	ldr	r2, [pc, #60]	; (8003ed8 <HAL_MspInit+0x4c>)
 8003e9c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003ea0:	6453      	str	r3, [r2, #68]	; 0x44
 8003ea2:	4b0d      	ldr	r3, [pc, #52]	; (8003ed8 <HAL_MspInit+0x4c>)
 8003ea4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003ea6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003eaa:	607b      	str	r3, [r7, #4]
 8003eac:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003eae:	2300      	movs	r3, #0
 8003eb0:	603b      	str	r3, [r7, #0]
 8003eb2:	4b09      	ldr	r3, [pc, #36]	; (8003ed8 <HAL_MspInit+0x4c>)
 8003eb4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003eb6:	4a08      	ldr	r2, [pc, #32]	; (8003ed8 <HAL_MspInit+0x4c>)
 8003eb8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003ebc:	6413      	str	r3, [r2, #64]	; 0x40
 8003ebe:	4b06      	ldr	r3, [pc, #24]	; (8003ed8 <HAL_MspInit+0x4c>)
 8003ec0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ec2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003ec6:	603b      	str	r3, [r7, #0]
 8003ec8:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003eca:	bf00      	nop
 8003ecc:	370c      	adds	r7, #12
 8003ece:	46bd      	mov	sp, r7
 8003ed0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ed4:	4770      	bx	lr
 8003ed6:	bf00      	nop
 8003ed8:	40023800 	.word	0x40023800

08003edc <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003edc:	b580      	push	{r7, lr}
 8003ede:	b08c      	sub	sp, #48	; 0x30
 8003ee0:	af00      	add	r7, sp, #0
 8003ee2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003ee4:	f107 031c 	add.w	r3, r7, #28
 8003ee8:	2200      	movs	r2, #0
 8003eea:	601a      	str	r2, [r3, #0]
 8003eec:	605a      	str	r2, [r3, #4]
 8003eee:	609a      	str	r2, [r3, #8]
 8003ef0:	60da      	str	r2, [r3, #12]
 8003ef2:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003efc:	d12c      	bne.n	8003f58 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8003efe:	2300      	movs	r3, #0
 8003f00:	61bb      	str	r3, [r7, #24]
 8003f02:	4b30      	ldr	r3, [pc, #192]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f06:	4a2f      	ldr	r2, [pc, #188]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f08:	f043 0301 	orr.w	r3, r3, #1
 8003f0c:	6413      	str	r3, [r2, #64]	; 0x40
 8003f0e:	4b2d      	ldr	r3, [pc, #180]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f12:	f003 0301 	and.w	r3, r3, #1
 8003f16:	61bb      	str	r3, [r7, #24]
 8003f18:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f1a:	2300      	movs	r3, #0
 8003f1c:	617b      	str	r3, [r7, #20]
 8003f1e:	4b29      	ldr	r3, [pc, #164]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f22:	4a28      	ldr	r2, [pc, #160]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f24:	f043 0301 	orr.w	r3, r3, #1
 8003f28:	6313      	str	r3, [r2, #48]	; 0x30
 8003f2a:	4b26      	ldr	r3, [pc, #152]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f2c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f2e:	f003 0301 	and.w	r3, r3, #1
 8003f32:	617b      	str	r3, [r7, #20]
 8003f34:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PA1_TIM2_CH2_ENC_PBO_Pin|PA5_TIM2_CH1_ENC_PAO_Pin;
 8003f36:	2322      	movs	r3, #34	; 0x22
 8003f38:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f3a:	2302      	movs	r3, #2
 8003f3c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003f3e:	2300      	movs	r3, #0
 8003f40:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003f42:	2300      	movs	r3, #0
 8003f44:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8003f46:	2301      	movs	r3, #1
 8003f48:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003f4a:	f107 031c 	add.w	r3, r7, #28
 8003f4e:	4619      	mov	r1, r3
 8003f50:	481d      	ldr	r0, [pc, #116]	; (8003fc8 <HAL_TIM_Base_MspInit+0xec>)
 8003f52:	f000 ff6d 	bl	8004e30 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003f56:	e030      	b.n	8003fba <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	4a1b      	ldr	r2, [pc, #108]	; (8003fcc <HAL_TIM_Base_MspInit+0xf0>)
 8003f5e:	4293      	cmp	r3, r2
 8003f60:	d12b      	bne.n	8003fba <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003f62:	2300      	movs	r3, #0
 8003f64:	613b      	str	r3, [r7, #16]
 8003f66:	4b17      	ldr	r3, [pc, #92]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f6a:	4a16      	ldr	r2, [pc, #88]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f6c:	f043 0302 	orr.w	r3, r3, #2
 8003f70:	6413      	str	r3, [r2, #64]	; 0x40
 8003f72:	4b14      	ldr	r3, [pc, #80]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f76:	f003 0302 	and.w	r3, r3, #2
 8003f7a:	613b      	str	r3, [r7, #16]
 8003f7c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003f7e:	2300      	movs	r3, #0
 8003f80:	60fb      	str	r3, [r7, #12]
 8003f82:	4b10      	ldr	r3, [pc, #64]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f86:	4a0f      	ldr	r2, [pc, #60]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f88:	f043 0301 	orr.w	r3, r3, #1
 8003f8c:	6313      	str	r3, [r2, #48]	; 0x30
 8003f8e:	4b0d      	ldr	r3, [pc, #52]	; (8003fc4 <HAL_TIM_Base_MspInit+0xe8>)
 8003f90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003f92:	f003 0301 	and.w	r3, r3, #1
 8003f96:	60fb      	str	r3, [r7, #12]
 8003f98:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PA6_TIM3_CH1_ENC_PZO_Pin;
 8003f9a:	2340      	movs	r3, #64	; 0x40
 8003f9c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003f9e:	2302      	movs	r3, #2
 8003fa0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003fa2:	2300      	movs	r3, #0
 8003fa4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003fa6:	2300      	movs	r3, #0
 8003fa8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8003faa:	2302      	movs	r3, #2
 8003fac:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PA6_TIM3_CH1_ENC_PZO_GPIO_Port, &GPIO_InitStruct);
 8003fae:	f107 031c 	add.w	r3, r7, #28
 8003fb2:	4619      	mov	r1, r3
 8003fb4:	4804      	ldr	r0, [pc, #16]	; (8003fc8 <HAL_TIM_Base_MspInit+0xec>)
 8003fb6:	f000 ff3b 	bl	8004e30 <HAL_GPIO_Init>
}
 8003fba:	bf00      	nop
 8003fbc:	3730      	adds	r7, #48	; 0x30
 8003fbe:	46bd      	mov	sp, r7
 8003fc0:	bd80      	pop	{r7, pc}
 8003fc2:	bf00      	nop
 8003fc4:	40023800 	.word	0x40023800
 8003fc8:	40020000 	.word	0x40020000
 8003fcc:	40000400 	.word	0x40000400

08003fd0 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003fd0:	b580      	push	{r7, lr}
 8003fd2:	b08c      	sub	sp, #48	; 0x30
 8003fd4:	af00      	add	r7, sp, #0
 8003fd6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003fd8:	f107 031c 	add.w	r3, r7, #28
 8003fdc:	2200      	movs	r2, #0
 8003fde:	601a      	str	r2, [r3, #0]
 8003fe0:	605a      	str	r2, [r3, #4]
 8003fe2:	609a      	str	r2, [r3, #8]
 8003fe4:	60da      	str	r2, [r3, #12]
 8003fe6:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	4a45      	ldr	r2, [pc, #276]	; (8004104 <HAL_UART_MspInit+0x134>)
 8003fee:	4293      	cmp	r3, r2
 8003ff0:	d153      	bne.n	800409a <HAL_UART_MspInit+0xca>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8003ff2:	2300      	movs	r3, #0
 8003ff4:	61bb      	str	r3, [r7, #24]
 8003ff6:	4b44      	ldr	r3, [pc, #272]	; (8004108 <HAL_UART_MspInit+0x138>)
 8003ff8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003ffa:	4a43      	ldr	r2, [pc, #268]	; (8004108 <HAL_UART_MspInit+0x138>)
 8003ffc:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8004000:	6413      	str	r3, [r2, #64]	; 0x40
 8004002:	4b41      	ldr	r3, [pc, #260]	; (8004108 <HAL_UART_MspInit+0x138>)
 8004004:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004006:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800400a:	61bb      	str	r3, [r7, #24]
 800400c:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800400e:	2300      	movs	r3, #0
 8004010:	617b      	str	r3, [r7, #20]
 8004012:	4b3d      	ldr	r3, [pc, #244]	; (8004108 <HAL_UART_MspInit+0x138>)
 8004014:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004016:	4a3c      	ldr	r2, [pc, #240]	; (8004108 <HAL_UART_MspInit+0x138>)
 8004018:	f043 0304 	orr.w	r3, r3, #4
 800401c:	6313      	str	r3, [r2, #48]	; 0x30
 800401e:	4b3a      	ldr	r3, [pc, #232]	; (8004108 <HAL_UART_MspInit+0x138>)
 8004020:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004022:	f003 0304 	and.w	r3, r3, #4
 8004026:	617b      	str	r3, [r7, #20]
 8004028:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800402a:	2300      	movs	r3, #0
 800402c:	613b      	str	r3, [r7, #16]
 800402e:	4b36      	ldr	r3, [pc, #216]	; (8004108 <HAL_UART_MspInit+0x138>)
 8004030:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004032:	4a35      	ldr	r2, [pc, #212]	; (8004108 <HAL_UART_MspInit+0x138>)
 8004034:	f043 0308 	orr.w	r3, r3, #8
 8004038:	6313      	str	r3, [r2, #48]	; 0x30
 800403a:	4b33      	ldr	r3, [pc, #204]	; (8004108 <HAL_UART_MspInit+0x138>)
 800403c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800403e:	f003 0308 	and.w	r3, r3, #8
 8004042:	613b      	str	r3, [r7, #16]
 8004044:	693b      	ldr	r3, [r7, #16]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = PC12_UART5_TX_485_MCU_DRV_Pin;
 8004046:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800404a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800404c:	2302      	movs	r3, #2
 800404e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004050:	2300      	movs	r3, #0
 8004052:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004054:	2303      	movs	r3, #3
 8004056:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004058:	2308      	movs	r3, #8
 800405a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PC12_UART5_TX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 800405c:	f107 031c 	add.w	r3, r7, #28
 8004060:	4619      	mov	r1, r3
 8004062:	482a      	ldr	r0, [pc, #168]	; (800410c <HAL_UART_MspInit+0x13c>)
 8004064:	f000 fee4 	bl	8004e30 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD2_UART5_RX_485_MCU_DRV_Pin;
 8004068:	2304      	movs	r3, #4
 800406a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800406c:	2302      	movs	r3, #2
 800406e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8004070:	2300      	movs	r3, #0
 8004072:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8004074:	2303      	movs	r3, #3
 8004076:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8004078:	2308      	movs	r3, #8
 800407a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PD2_UART5_RX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 800407c:	f107 031c 	add.w	r3, r7, #28
 8004080:	4619      	mov	r1, r3
 8004082:	4823      	ldr	r0, [pc, #140]	; (8004110 <HAL_UART_MspInit+0x140>)
 8004084:	f000 fed4 	bl	8004e30 <HAL_GPIO_Init>

    /* UART5 interrupt Init */
    HAL_NVIC_SetPriority(UART5_IRQn, 0, 0);
 8004088:	2200      	movs	r2, #0
 800408a:	2100      	movs	r1, #0
 800408c:	2035      	movs	r0, #53	; 0x35
 800408e:	f000 fb1e 	bl	80046ce <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(UART5_IRQn);
 8004092:	2035      	movs	r0, #53	; 0x35
 8004094:	f000 fb37 	bl	8004706 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8004098:	e030      	b.n	80040fc <HAL_UART_MspInit+0x12c>
  else if(huart->Instance==USART6)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	4a1d      	ldr	r2, [pc, #116]	; (8004114 <HAL_UART_MspInit+0x144>)
 80040a0:	4293      	cmp	r3, r2
 80040a2:	d12b      	bne.n	80040fc <HAL_UART_MspInit+0x12c>
    __HAL_RCC_USART6_CLK_ENABLE();
 80040a4:	2300      	movs	r3, #0
 80040a6:	60fb      	str	r3, [r7, #12]
 80040a8:	4b17      	ldr	r3, [pc, #92]	; (8004108 <HAL_UART_MspInit+0x138>)
 80040aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040ac:	4a16      	ldr	r2, [pc, #88]	; (8004108 <HAL_UART_MspInit+0x138>)
 80040ae:	f043 0320 	orr.w	r3, r3, #32
 80040b2:	6453      	str	r3, [r2, #68]	; 0x44
 80040b4:	4b14      	ldr	r3, [pc, #80]	; (8004108 <HAL_UART_MspInit+0x138>)
 80040b6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b8:	f003 0320 	and.w	r3, r3, #32
 80040bc:	60fb      	str	r3, [r7, #12]
 80040be:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80040c0:	2300      	movs	r3, #0
 80040c2:	60bb      	str	r3, [r7, #8]
 80040c4:	4b10      	ldr	r3, [pc, #64]	; (8004108 <HAL_UART_MspInit+0x138>)
 80040c6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040c8:	4a0f      	ldr	r2, [pc, #60]	; (8004108 <HAL_UART_MspInit+0x138>)
 80040ca:	f043 0304 	orr.w	r3, r3, #4
 80040ce:	6313      	str	r3, [r2, #48]	; 0x30
 80040d0:	4b0d      	ldr	r3, [pc, #52]	; (8004108 <HAL_UART_MspInit+0x138>)
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	f003 0304 	and.w	r3, r3, #4
 80040d8:	60bb      	str	r3, [r7, #8]
 80040da:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80040dc:	23c0      	movs	r3, #192	; 0xc0
 80040de:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80040e0:	2302      	movs	r3, #2
 80040e2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80040e4:	2300      	movs	r3, #0
 80040e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80040e8:	2303      	movs	r3, #3
 80040ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80040ec:	2308      	movs	r3, #8
 80040ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80040f0:	f107 031c 	add.w	r3, r7, #28
 80040f4:	4619      	mov	r1, r3
 80040f6:	4805      	ldr	r0, [pc, #20]	; (800410c <HAL_UART_MspInit+0x13c>)
 80040f8:	f000 fe9a 	bl	8004e30 <HAL_GPIO_Init>
}
 80040fc:	bf00      	nop
 80040fe:	3730      	adds	r7, #48	; 0x30
 8004100:	46bd      	mov	sp, r7
 8004102:	bd80      	pop	{r7, pc}
 8004104:	40005000 	.word	0x40005000
 8004108:	40023800 	.word	0x40023800
 800410c:	40020800 	.word	0x40020800
 8004110:	40020c00 	.word	0x40020c00
 8004114:	40011400 	.word	0x40011400

08004118 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8004118:	b480      	push	{r7}
 800411a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 800411c:	e7fe      	b.n	800411c <NMI_Handler+0x4>

0800411e <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800411e:	b480      	push	{r7}
 8004120:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8004122:	e7fe      	b.n	8004122 <HardFault_Handler+0x4>

08004124 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8004124:	b480      	push	{r7}
 8004126:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8004128:	e7fe      	b.n	8004128 <MemManage_Handler+0x4>

0800412a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800412a:	b480      	push	{r7}
 800412c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800412e:	e7fe      	b.n	800412e <BusFault_Handler+0x4>

08004130 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8004130:	b480      	push	{r7}
 8004132:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8004134:	e7fe      	b.n	8004134 <UsageFault_Handler+0x4>

08004136 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8004136:	b480      	push	{r7}
 8004138:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800413a:	bf00      	nop
 800413c:	46bd      	mov	sp, r7
 800413e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004142:	4770      	bx	lr

08004144 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8004144:	b480      	push	{r7}
 8004146:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8004148:	bf00      	nop
 800414a:	46bd      	mov	sp, r7
 800414c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004150:	4770      	bx	lr

08004152 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8004152:	b480      	push	{r7}
 8004154:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8004156:	bf00      	nop
 8004158:	46bd      	mov	sp, r7
 800415a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800415e:	4770      	bx	lr

08004160 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8004160:	b580      	push	{r7, lr}
 8004162:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8004164:	f000 f97e 	bl	8004464 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8004168:	bf00      	nop
 800416a:	bd80      	pop	{r7, pc}

0800416c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 800416c:	b580      	push	{r7, lr}
 800416e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8004170:	4802      	ldr	r0, [pc, #8]	; (800417c <TIM2_IRQHandler+0x10>)
 8004172:	f001 fde5 	bl	8005d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8004176:	bf00      	nop
 8004178:	bd80      	pop	{r7, pc}
 800417a:	bf00      	nop
 800417c:	20000220 	.word	0x20000220

08004180 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8004180:	b580      	push	{r7, lr}
 8004182:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8004184:	4802      	ldr	r0, [pc, #8]	; (8004190 <TIM3_IRQHandler+0x10>)
 8004186:	f001 fddb 	bl	8005d40 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800418a:	bf00      	nop
 800418c:	bd80      	pop	{r7, pc}
 800418e:	bf00      	nop
 8004190:	20000268 	.word	0x20000268

08004194 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8004194:	b580      	push	{r7, lr}
 8004196:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8004198:	4802      	ldr	r0, [pc, #8]	; (80041a4 <UART5_IRQHandler+0x10>)
 800419a:	f002 fc69 	bl	8006a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800419e:	bf00      	nop
 80041a0:	bd80      	pop	{r7, pc}
 80041a2:	bf00      	nop
 80041a4:	200002b0 	.word	0x200002b0

080041a8 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 80041a8:	b580      	push	{r7, lr}
 80041aa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 80041ac:	4802      	ldr	r0, [pc, #8]	; (80041b8 <USART6_IRQHandler+0x10>)
 80041ae:	f002 fc5f 	bl	8006a70 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 80041b2:	bf00      	nop
 80041b4:	bd80      	pop	{r7, pc}
 80041b6:	bf00      	nop
 80041b8:	200002f4 	.word	0x200002f4

080041bc <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80041bc:	b480      	push	{r7}
 80041be:	af00      	add	r7, sp, #0
	return 1;
 80041c0:	2301      	movs	r3, #1
}
 80041c2:	4618      	mov	r0, r3
 80041c4:	46bd      	mov	sp, r7
 80041c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ca:	4770      	bx	lr

080041cc <_kill>:

int _kill(int pid, int sig)
{
 80041cc:	b580      	push	{r7, lr}
 80041ce:	b082      	sub	sp, #8
 80041d0:	af00      	add	r7, sp, #0
 80041d2:	6078      	str	r0, [r7, #4]
 80041d4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80041d6:	f003 fbb7 	bl	8007948 <__errno>
 80041da:	4603      	mov	r3, r0
 80041dc:	2216      	movs	r2, #22
 80041de:	601a      	str	r2, [r3, #0]
	return -1;
 80041e0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80041e4:	4618      	mov	r0, r3
 80041e6:	3708      	adds	r7, #8
 80041e8:	46bd      	mov	sp, r7
 80041ea:	bd80      	pop	{r7, pc}

080041ec <_exit>:

void _exit (int status)
{
 80041ec:	b580      	push	{r7, lr}
 80041ee:	b082      	sub	sp, #8
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80041f4:	f04f 31ff 	mov.w	r1, #4294967295
 80041f8:	6878      	ldr	r0, [r7, #4]
 80041fa:	f7ff ffe7 	bl	80041cc <_kill>
	while (1) {}		/* Make sure we hang here */
 80041fe:	e7fe      	b.n	80041fe <_exit+0x12>

08004200 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b086      	sub	sp, #24
 8004204:	af00      	add	r7, sp, #0
 8004206:	60f8      	str	r0, [r7, #12]
 8004208:	60b9      	str	r1, [r7, #8]
 800420a:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]
 8004210:	e00a      	b.n	8004228 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8004212:	f3af 8000 	nop.w
 8004216:	4601      	mov	r1, r0
 8004218:	68bb      	ldr	r3, [r7, #8]
 800421a:	1c5a      	adds	r2, r3, #1
 800421c:	60ba      	str	r2, [r7, #8]
 800421e:	b2ca      	uxtb	r2, r1
 8004220:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004222:	697b      	ldr	r3, [r7, #20]
 8004224:	3301      	adds	r3, #1
 8004226:	617b      	str	r3, [r7, #20]
 8004228:	697a      	ldr	r2, [r7, #20]
 800422a:	687b      	ldr	r3, [r7, #4]
 800422c:	429a      	cmp	r2, r3
 800422e:	dbf0      	blt.n	8004212 <_read+0x12>
	}

return len;
 8004230:	687b      	ldr	r3, [r7, #4]
}
 8004232:	4618      	mov	r0, r3
 8004234:	3718      	adds	r7, #24
 8004236:	46bd      	mov	sp, r7
 8004238:	bd80      	pop	{r7, pc}

0800423a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800423a:	b580      	push	{r7, lr}
 800423c:	b086      	sub	sp, #24
 800423e:	af00      	add	r7, sp, #0
 8004240:	60f8      	str	r0, [r7, #12]
 8004242:	60b9      	str	r1, [r7, #8]
 8004244:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8004246:	2300      	movs	r3, #0
 8004248:	617b      	str	r3, [r7, #20]
 800424a:	e009      	b.n	8004260 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800424c:	68bb      	ldr	r3, [r7, #8]
 800424e:	1c5a      	adds	r2, r3, #1
 8004250:	60ba      	str	r2, [r7, #8]
 8004252:	781b      	ldrb	r3, [r3, #0]
 8004254:	4618      	mov	r0, r3
 8004256:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800425a:	697b      	ldr	r3, [r7, #20]
 800425c:	3301      	adds	r3, #1
 800425e:	617b      	str	r3, [r7, #20]
 8004260:	697a      	ldr	r2, [r7, #20]
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	429a      	cmp	r2, r3
 8004266:	dbf1      	blt.n	800424c <_write+0x12>
	}
	return len;
 8004268:	687b      	ldr	r3, [r7, #4]
}
 800426a:	4618      	mov	r0, r3
 800426c:	3718      	adds	r7, #24
 800426e:	46bd      	mov	sp, r7
 8004270:	bd80      	pop	{r7, pc}

08004272 <_close>:

int _close(int file)
{
 8004272:	b480      	push	{r7}
 8004274:	b083      	sub	sp, #12
 8004276:	af00      	add	r7, sp, #0
 8004278:	6078      	str	r0, [r7, #4]
	return -1;
 800427a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800427e:	4618      	mov	r0, r3
 8004280:	370c      	adds	r7, #12
 8004282:	46bd      	mov	sp, r7
 8004284:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004288:	4770      	bx	lr

0800428a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800428a:	b480      	push	{r7}
 800428c:	b083      	sub	sp, #12
 800428e:	af00      	add	r7, sp, #0
 8004290:	6078      	str	r0, [r7, #4]
 8004292:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8004294:	683b      	ldr	r3, [r7, #0]
 8004296:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800429a:	605a      	str	r2, [r3, #4]
	return 0;
 800429c:	2300      	movs	r3, #0
}
 800429e:	4618      	mov	r0, r3
 80042a0:	370c      	adds	r7, #12
 80042a2:	46bd      	mov	sp, r7
 80042a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042a8:	4770      	bx	lr

080042aa <_isatty>:

int _isatty(int file)
{
 80042aa:	b480      	push	{r7}
 80042ac:	b083      	sub	sp, #12
 80042ae:	af00      	add	r7, sp, #0
 80042b0:	6078      	str	r0, [r7, #4]
	return 1;
 80042b2:	2301      	movs	r3, #1
}
 80042b4:	4618      	mov	r0, r3
 80042b6:	370c      	adds	r7, #12
 80042b8:	46bd      	mov	sp, r7
 80042ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042be:	4770      	bx	lr

080042c0 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80042c0:	b480      	push	{r7}
 80042c2:	b085      	sub	sp, #20
 80042c4:	af00      	add	r7, sp, #0
 80042c6:	60f8      	str	r0, [r7, #12]
 80042c8:	60b9      	str	r1, [r7, #8]
 80042ca:	607a      	str	r2, [r7, #4]
	return 0;
 80042cc:	2300      	movs	r3, #0
}
 80042ce:	4618      	mov	r0, r3
 80042d0:	3714      	adds	r7, #20
 80042d2:	46bd      	mov	sp, r7
 80042d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042d8:	4770      	bx	lr
	...

080042dc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80042dc:	b580      	push	{r7, lr}
 80042de:	b086      	sub	sp, #24
 80042e0:	af00      	add	r7, sp, #0
 80042e2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80042e4:	4a14      	ldr	r2, [pc, #80]	; (8004338 <_sbrk+0x5c>)
 80042e6:	4b15      	ldr	r3, [pc, #84]	; (800433c <_sbrk+0x60>)
 80042e8:	1ad3      	subs	r3, r2, r3
 80042ea:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80042ec:	697b      	ldr	r3, [r7, #20]
 80042ee:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80042f0:	4b13      	ldr	r3, [pc, #76]	; (8004340 <_sbrk+0x64>)
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	2b00      	cmp	r3, #0
 80042f6:	d102      	bne.n	80042fe <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80042f8:	4b11      	ldr	r3, [pc, #68]	; (8004340 <_sbrk+0x64>)
 80042fa:	4a12      	ldr	r2, [pc, #72]	; (8004344 <_sbrk+0x68>)
 80042fc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80042fe:	4b10      	ldr	r3, [pc, #64]	; (8004340 <_sbrk+0x64>)
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	4413      	add	r3, r2
 8004306:	693a      	ldr	r2, [r7, #16]
 8004308:	429a      	cmp	r2, r3
 800430a:	d207      	bcs.n	800431c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800430c:	f003 fb1c 	bl	8007948 <__errno>
 8004310:	4603      	mov	r3, r0
 8004312:	220c      	movs	r2, #12
 8004314:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8004316:	f04f 33ff 	mov.w	r3, #4294967295
 800431a:	e009      	b.n	8004330 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800431c:	4b08      	ldr	r3, [pc, #32]	; (8004340 <_sbrk+0x64>)
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8004322:	4b07      	ldr	r3, [pc, #28]	; (8004340 <_sbrk+0x64>)
 8004324:	681a      	ldr	r2, [r3, #0]
 8004326:	687b      	ldr	r3, [r7, #4]
 8004328:	4413      	add	r3, r2
 800432a:	4a05      	ldr	r2, [pc, #20]	; (8004340 <_sbrk+0x64>)
 800432c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800432e:	68fb      	ldr	r3, [r7, #12]
}
 8004330:	4618      	mov	r0, r3
 8004332:	3718      	adds	r7, #24
 8004334:	46bd      	mov	sp, r7
 8004336:	bd80      	pop	{r7, pc}
 8004338:	20020000 	.word	0x20020000
 800433c:	00000400 	.word	0x00000400
 8004340:	200062c0 	.word	0x200062c0
 8004344:	200062f8 	.word	0x200062f8

08004348 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8004348:	b480      	push	{r7}
 800434a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800434c:	4b06      	ldr	r3, [pc, #24]	; (8004368 <SystemInit+0x20>)
 800434e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8004352:	4a05      	ldr	r2, [pc, #20]	; (8004368 <SystemInit+0x20>)
 8004354:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8004358:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800435c:	bf00      	nop
 800435e:	46bd      	mov	sp, r7
 8004360:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004364:	4770      	bx	lr
 8004366:	bf00      	nop
 8004368:	e000ed00 	.word	0xe000ed00

0800436c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800436c:	f8df d034 	ldr.w	sp, [pc, #52]	; 80043a4 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8004370:	480d      	ldr	r0, [pc, #52]	; (80043a8 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8004372:	490e      	ldr	r1, [pc, #56]	; (80043ac <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8004374:	4a0e      	ldr	r2, [pc, #56]	; (80043b0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8004376:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8004378:	e002      	b.n	8004380 <LoopCopyDataInit>

0800437a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800437a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800437c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800437e:	3304      	adds	r3, #4

08004380 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8004380:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8004382:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8004384:	d3f9      	bcc.n	800437a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8004386:	4a0b      	ldr	r2, [pc, #44]	; (80043b4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8004388:	4c0b      	ldr	r4, [pc, #44]	; (80043b8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800438a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800438c:	e001      	b.n	8004392 <LoopFillZerobss>

0800438e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800438e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8004390:	3204      	adds	r2, #4

08004392 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8004392:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8004394:	d3fb      	bcc.n	800438e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8004396:	f7ff ffd7 	bl	8004348 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800439a:	f003 fadb 	bl	8007954 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800439e:	f7fe fe5f 	bl	8003060 <main>
  bx  lr    
 80043a2:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 80043a4:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80043a8:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80043ac:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80043b0:	0800c990 	.word	0x0800c990
  ldr r2, =_sbss
 80043b4:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80043b8:	200062f8 	.word	0x200062f8

080043bc <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80043bc:	e7fe      	b.n	80043bc <ADC_IRQHandler>
	...

080043c0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80043c0:	b580      	push	{r7, lr}
 80043c2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80043c4:	4b0e      	ldr	r3, [pc, #56]	; (8004400 <HAL_Init+0x40>)
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	4a0d      	ldr	r2, [pc, #52]	; (8004400 <HAL_Init+0x40>)
 80043ca:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80043ce:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80043d0:	4b0b      	ldr	r3, [pc, #44]	; (8004400 <HAL_Init+0x40>)
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	4a0a      	ldr	r2, [pc, #40]	; (8004400 <HAL_Init+0x40>)
 80043d6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80043da:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80043dc:	4b08      	ldr	r3, [pc, #32]	; (8004400 <HAL_Init+0x40>)
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	4a07      	ldr	r2, [pc, #28]	; (8004400 <HAL_Init+0x40>)
 80043e2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80043e6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80043e8:	2003      	movs	r0, #3
 80043ea:	f000 f965 	bl	80046b8 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80043ee:	2000      	movs	r0, #0
 80043f0:	f000 f808 	bl	8004404 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80043f4:	f7ff fd4a 	bl	8003e8c <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80043f8:	2300      	movs	r3, #0
}
 80043fa:	4618      	mov	r0, r3
 80043fc:	bd80      	pop	{r7, pc}
 80043fe:	bf00      	nop
 8004400:	40023c00 	.word	0x40023c00

08004404 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8004404:	b580      	push	{r7, lr}
 8004406:	b082      	sub	sp, #8
 8004408:	af00      	add	r7, sp, #0
 800440a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800440c:	4b12      	ldr	r3, [pc, #72]	; (8004458 <HAL_InitTick+0x54>)
 800440e:	681a      	ldr	r2, [r3, #0]
 8004410:	4b12      	ldr	r3, [pc, #72]	; (800445c <HAL_InitTick+0x58>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	4619      	mov	r1, r3
 8004416:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800441a:	fbb3 f3f1 	udiv	r3, r3, r1
 800441e:	fbb2 f3f3 	udiv	r3, r2, r3
 8004422:	4618      	mov	r0, r3
 8004424:	f000 f981 	bl	800472a <HAL_SYSTICK_Config>
 8004428:	4603      	mov	r3, r0
 800442a:	2b00      	cmp	r3, #0
 800442c:	d001      	beq.n	8004432 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 800442e:	2301      	movs	r3, #1
 8004430:	e00e      	b.n	8004450 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8004432:	687b      	ldr	r3, [r7, #4]
 8004434:	2b0f      	cmp	r3, #15
 8004436:	d80a      	bhi.n	800444e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8004438:	2200      	movs	r2, #0
 800443a:	6879      	ldr	r1, [r7, #4]
 800443c:	f04f 30ff 	mov.w	r0, #4294967295
 8004440:	f000 f945 	bl	80046ce <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8004444:	4a06      	ldr	r2, [pc, #24]	; (8004460 <HAL_InitTick+0x5c>)
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800444a:	2300      	movs	r3, #0
 800444c:	e000      	b.n	8004450 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 800444e:	2301      	movs	r3, #1
}
 8004450:	4618      	mov	r0, r3
 8004452:	3708      	adds	r7, #8
 8004454:	46bd      	mov	sp, r7
 8004456:	bd80      	pop	{r7, pc}
 8004458:	20000010 	.word	0x20000010
 800445c:	20000018 	.word	0x20000018
 8004460:	20000014 	.word	0x20000014

08004464 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8004464:	b480      	push	{r7}
 8004466:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8004468:	4b06      	ldr	r3, [pc, #24]	; (8004484 <HAL_IncTick+0x20>)
 800446a:	781b      	ldrb	r3, [r3, #0]
 800446c:	461a      	mov	r2, r3
 800446e:	4b06      	ldr	r3, [pc, #24]	; (8004488 <HAL_IncTick+0x24>)
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	4413      	add	r3, r2
 8004474:	4a04      	ldr	r2, [pc, #16]	; (8004488 <HAL_IncTick+0x24>)
 8004476:	6013      	str	r3, [r2, #0]
}
 8004478:	bf00      	nop
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	20000018 	.word	0x20000018
 8004488:	200062c4 	.word	0x200062c4

0800448c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800448c:	b480      	push	{r7}
 800448e:	af00      	add	r7, sp, #0
  return uwTick;
 8004490:	4b03      	ldr	r3, [pc, #12]	; (80044a0 <HAL_GetTick+0x14>)
 8004492:	681b      	ldr	r3, [r3, #0]
}
 8004494:	4618      	mov	r0, r3
 8004496:	46bd      	mov	sp, r7
 8004498:	f85d 7b04 	ldr.w	r7, [sp], #4
 800449c:	4770      	bx	lr
 800449e:	bf00      	nop
 80044a0:	200062c4 	.word	0x200062c4

080044a4 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80044a4:	b580      	push	{r7, lr}
 80044a6:	b084      	sub	sp, #16
 80044a8:	af00      	add	r7, sp, #0
 80044aa:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80044ac:	f7ff ffee 	bl	800448c <HAL_GetTick>
 80044b0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80044b6:	68fb      	ldr	r3, [r7, #12]
 80044b8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80044bc:	d005      	beq.n	80044ca <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80044be:	4b0a      	ldr	r3, [pc, #40]	; (80044e8 <HAL_Delay+0x44>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	461a      	mov	r2, r3
 80044c4:	68fb      	ldr	r3, [r7, #12]
 80044c6:	4413      	add	r3, r2
 80044c8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80044ca:	bf00      	nop
 80044cc:	f7ff ffde 	bl	800448c <HAL_GetTick>
 80044d0:	4602      	mov	r2, r0
 80044d2:	68bb      	ldr	r3, [r7, #8]
 80044d4:	1ad3      	subs	r3, r2, r3
 80044d6:	68fa      	ldr	r2, [r7, #12]
 80044d8:	429a      	cmp	r2, r3
 80044da:	d8f7      	bhi.n	80044cc <HAL_Delay+0x28>
  {
  }
}
 80044dc:	bf00      	nop
 80044de:	bf00      	nop
 80044e0:	3710      	adds	r7, #16
 80044e2:	46bd      	mov	sp, r7
 80044e4:	bd80      	pop	{r7, pc}
 80044e6:	bf00      	nop
 80044e8:	20000018 	.word	0x20000018

080044ec <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80044ec:	b480      	push	{r7}
 80044ee:	b085      	sub	sp, #20
 80044f0:	af00      	add	r7, sp, #0
 80044f2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	f003 0307 	and.w	r3, r3, #7
 80044fa:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80044fc:	4b0c      	ldr	r3, [pc, #48]	; (8004530 <__NVIC_SetPriorityGrouping+0x44>)
 80044fe:	68db      	ldr	r3, [r3, #12]
 8004500:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8004502:	68ba      	ldr	r2, [r7, #8]
 8004504:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8004508:	4013      	ands	r3, r2
 800450a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800450c:	68fb      	ldr	r3, [r7, #12]
 800450e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8004510:	68bb      	ldr	r3, [r7, #8]
 8004512:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8004514:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8004518:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800451c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800451e:	4a04      	ldr	r2, [pc, #16]	; (8004530 <__NVIC_SetPriorityGrouping+0x44>)
 8004520:	68bb      	ldr	r3, [r7, #8]
 8004522:	60d3      	str	r3, [r2, #12]
}
 8004524:	bf00      	nop
 8004526:	3714      	adds	r7, #20
 8004528:	46bd      	mov	sp, r7
 800452a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800452e:	4770      	bx	lr
 8004530:	e000ed00 	.word	0xe000ed00

08004534 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8004534:	b480      	push	{r7}
 8004536:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8004538:	4b04      	ldr	r3, [pc, #16]	; (800454c <__NVIC_GetPriorityGrouping+0x18>)
 800453a:	68db      	ldr	r3, [r3, #12]
 800453c:	0a1b      	lsrs	r3, r3, #8
 800453e:	f003 0307 	and.w	r3, r3, #7
}
 8004542:	4618      	mov	r0, r3
 8004544:	46bd      	mov	sp, r7
 8004546:	f85d 7b04 	ldr.w	r7, [sp], #4
 800454a:	4770      	bx	lr
 800454c:	e000ed00 	.word	0xe000ed00

08004550 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004550:	b480      	push	{r7}
 8004552:	b083      	sub	sp, #12
 8004554:	af00      	add	r7, sp, #0
 8004556:	4603      	mov	r3, r0
 8004558:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 800455a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800455e:	2b00      	cmp	r3, #0
 8004560:	db0b      	blt.n	800457a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8004562:	79fb      	ldrb	r3, [r7, #7]
 8004564:	f003 021f 	and.w	r2, r3, #31
 8004568:	4907      	ldr	r1, [pc, #28]	; (8004588 <__NVIC_EnableIRQ+0x38>)
 800456a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800456e:	095b      	lsrs	r3, r3, #5
 8004570:	2001      	movs	r0, #1
 8004572:	fa00 f202 	lsl.w	r2, r0, r2
 8004576:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 800457a:	bf00      	nop
 800457c:	370c      	adds	r7, #12
 800457e:	46bd      	mov	sp, r7
 8004580:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004584:	4770      	bx	lr
 8004586:	bf00      	nop
 8004588:	e000e100 	.word	0xe000e100

0800458c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800458c:	b480      	push	{r7}
 800458e:	b083      	sub	sp, #12
 8004590:	af00      	add	r7, sp, #0
 8004592:	4603      	mov	r3, r0
 8004594:	6039      	str	r1, [r7, #0]
 8004596:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8004598:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800459c:	2b00      	cmp	r3, #0
 800459e:	db0a      	blt.n	80045b6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045a0:	683b      	ldr	r3, [r7, #0]
 80045a2:	b2da      	uxtb	r2, r3
 80045a4:	490c      	ldr	r1, [pc, #48]	; (80045d8 <__NVIC_SetPriority+0x4c>)
 80045a6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80045aa:	0112      	lsls	r2, r2, #4
 80045ac:	b2d2      	uxtb	r2, r2
 80045ae:	440b      	add	r3, r1
 80045b0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80045b4:	e00a      	b.n	80045cc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80045b6:	683b      	ldr	r3, [r7, #0]
 80045b8:	b2da      	uxtb	r2, r3
 80045ba:	4908      	ldr	r1, [pc, #32]	; (80045dc <__NVIC_SetPriority+0x50>)
 80045bc:	79fb      	ldrb	r3, [r7, #7]
 80045be:	f003 030f 	and.w	r3, r3, #15
 80045c2:	3b04      	subs	r3, #4
 80045c4:	0112      	lsls	r2, r2, #4
 80045c6:	b2d2      	uxtb	r2, r2
 80045c8:	440b      	add	r3, r1
 80045ca:	761a      	strb	r2, [r3, #24]
}
 80045cc:	bf00      	nop
 80045ce:	370c      	adds	r7, #12
 80045d0:	46bd      	mov	sp, r7
 80045d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045d6:	4770      	bx	lr
 80045d8:	e000e100 	.word	0xe000e100
 80045dc:	e000ed00 	.word	0xe000ed00

080045e0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80045e0:	b480      	push	{r7}
 80045e2:	b089      	sub	sp, #36	; 0x24
 80045e4:	af00      	add	r7, sp, #0
 80045e6:	60f8      	str	r0, [r7, #12]
 80045e8:	60b9      	str	r1, [r7, #8]
 80045ea:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80045ec:	68fb      	ldr	r3, [r7, #12]
 80045ee:	f003 0307 	and.w	r3, r3, #7
 80045f2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80045f4:	69fb      	ldr	r3, [r7, #28]
 80045f6:	f1c3 0307 	rsb	r3, r3, #7
 80045fa:	2b04      	cmp	r3, #4
 80045fc:	bf28      	it	cs
 80045fe:	2304      	movcs	r3, #4
 8004600:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8004602:	69fb      	ldr	r3, [r7, #28]
 8004604:	3304      	adds	r3, #4
 8004606:	2b06      	cmp	r3, #6
 8004608:	d902      	bls.n	8004610 <NVIC_EncodePriority+0x30>
 800460a:	69fb      	ldr	r3, [r7, #28]
 800460c:	3b03      	subs	r3, #3
 800460e:	e000      	b.n	8004612 <NVIC_EncodePriority+0x32>
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004614:	f04f 32ff 	mov.w	r2, #4294967295
 8004618:	69bb      	ldr	r3, [r7, #24]
 800461a:	fa02 f303 	lsl.w	r3, r2, r3
 800461e:	43da      	mvns	r2, r3
 8004620:	68bb      	ldr	r3, [r7, #8]
 8004622:	401a      	ands	r2, r3
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8004628:	f04f 31ff 	mov.w	r1, #4294967295
 800462c:	697b      	ldr	r3, [r7, #20]
 800462e:	fa01 f303 	lsl.w	r3, r1, r3
 8004632:	43d9      	mvns	r1, r3
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8004638:	4313      	orrs	r3, r2
         );
}
 800463a:	4618      	mov	r0, r3
 800463c:	3724      	adds	r7, #36	; 0x24
 800463e:	46bd      	mov	sp, r7
 8004640:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004644:	4770      	bx	lr
	...

08004648 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8004648:	b480      	push	{r7}
 800464a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 800464c:	f3bf 8f4f 	dsb	sy
}
 8004650:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8004652:	4b06      	ldr	r3, [pc, #24]	; (800466c <__NVIC_SystemReset+0x24>)
 8004654:	68db      	ldr	r3, [r3, #12]
 8004656:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 800465a:	4904      	ldr	r1, [pc, #16]	; (800466c <__NVIC_SystemReset+0x24>)
 800465c:	4b04      	ldr	r3, [pc, #16]	; (8004670 <__NVIC_SystemReset+0x28>)
 800465e:	4313      	orrs	r3, r2
 8004660:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8004662:	f3bf 8f4f 	dsb	sy
}
 8004666:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8004668:	bf00      	nop
 800466a:	e7fd      	b.n	8004668 <__NVIC_SystemReset+0x20>
 800466c:	e000ed00 	.word	0xe000ed00
 8004670:	05fa0004 	.word	0x05fa0004

08004674 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8004674:	b580      	push	{r7, lr}
 8004676:	b082      	sub	sp, #8
 8004678:	af00      	add	r7, sp, #0
 800467a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	3b01      	subs	r3, #1
 8004680:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8004684:	d301      	bcc.n	800468a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8004686:	2301      	movs	r3, #1
 8004688:	e00f      	b.n	80046aa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800468a:	4a0a      	ldr	r2, [pc, #40]	; (80046b4 <SysTick_Config+0x40>)
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	3b01      	subs	r3, #1
 8004690:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8004692:	210f      	movs	r1, #15
 8004694:	f04f 30ff 	mov.w	r0, #4294967295
 8004698:	f7ff ff78 	bl	800458c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800469c:	4b05      	ldr	r3, [pc, #20]	; (80046b4 <SysTick_Config+0x40>)
 800469e:	2200      	movs	r2, #0
 80046a0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80046a2:	4b04      	ldr	r3, [pc, #16]	; (80046b4 <SysTick_Config+0x40>)
 80046a4:	2207      	movs	r2, #7
 80046a6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80046a8:	2300      	movs	r3, #0
}
 80046aa:	4618      	mov	r0, r3
 80046ac:	3708      	adds	r7, #8
 80046ae:	46bd      	mov	sp, r7
 80046b0:	bd80      	pop	{r7, pc}
 80046b2:	bf00      	nop
 80046b4:	e000e010 	.word	0xe000e010

080046b8 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80046b8:	b580      	push	{r7, lr}
 80046ba:	b082      	sub	sp, #8
 80046bc:	af00      	add	r7, sp, #0
 80046be:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80046c0:	6878      	ldr	r0, [r7, #4]
 80046c2:	f7ff ff13 	bl	80044ec <__NVIC_SetPriorityGrouping>
}
 80046c6:	bf00      	nop
 80046c8:	3708      	adds	r7, #8
 80046ca:	46bd      	mov	sp, r7
 80046cc:	bd80      	pop	{r7, pc}

080046ce <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80046ce:	b580      	push	{r7, lr}
 80046d0:	b086      	sub	sp, #24
 80046d2:	af00      	add	r7, sp, #0
 80046d4:	4603      	mov	r3, r0
 80046d6:	60b9      	str	r1, [r7, #8]
 80046d8:	607a      	str	r2, [r7, #4]
 80046da:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80046dc:	2300      	movs	r3, #0
 80046de:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80046e0:	f7ff ff28 	bl	8004534 <__NVIC_GetPriorityGrouping>
 80046e4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80046e6:	687a      	ldr	r2, [r7, #4]
 80046e8:	68b9      	ldr	r1, [r7, #8]
 80046ea:	6978      	ldr	r0, [r7, #20]
 80046ec:	f7ff ff78 	bl	80045e0 <NVIC_EncodePriority>
 80046f0:	4602      	mov	r2, r0
 80046f2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80046f6:	4611      	mov	r1, r2
 80046f8:	4618      	mov	r0, r3
 80046fa:	f7ff ff47 	bl	800458c <__NVIC_SetPriority>
}
 80046fe:	bf00      	nop
 8004700:	3718      	adds	r7, #24
 8004702:	46bd      	mov	sp, r7
 8004704:	bd80      	pop	{r7, pc}

08004706 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8004706:	b580      	push	{r7, lr}
 8004708:	b082      	sub	sp, #8
 800470a:	af00      	add	r7, sp, #0
 800470c:	4603      	mov	r3, r0
 800470e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8004710:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8004714:	4618      	mov	r0, r3
 8004716:	f7ff ff1b 	bl	8004550 <__NVIC_EnableIRQ>
}
 800471a:	bf00      	nop
 800471c:	3708      	adds	r7, #8
 800471e:	46bd      	mov	sp, r7
 8004720:	bd80      	pop	{r7, pc}

08004722 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8004722:	b580      	push	{r7, lr}
 8004724:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8004726:	f7ff ff8f 	bl	8004648 <__NVIC_SystemReset>

0800472a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800472a:	b580      	push	{r7, lr}
 800472c:	b082      	sub	sp, #8
 800472e:	af00      	add	r7, sp, #0
 8004730:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8004732:	6878      	ldr	r0, [r7, #4]
 8004734:	f7ff ff9e 	bl	8004674 <SysTick_Config>
 8004738:	4603      	mov	r3, r0
}
 800473a:	4618      	mov	r0, r3
 800473c:	3708      	adds	r7, #8
 800473e:	46bd      	mov	sp, r7
 8004740:	bd80      	pop	{r7, pc}

08004742 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004742:	b580      	push	{r7, lr}
 8004744:	b084      	sub	sp, #16
 8004746:	af00      	add	r7, sp, #0
 8004748:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800474e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004750:	f7ff fe9c 	bl	800448c <HAL_GetTick>
 8004754:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800475c:	b2db      	uxtb	r3, r3
 800475e:	2b02      	cmp	r3, #2
 8004760:	d008      	beq.n	8004774 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	2280      	movs	r2, #128	; 0x80
 8004766:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004768:	687b      	ldr	r3, [r7, #4]
 800476a:	2200      	movs	r2, #0
 800476c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	e052      	b.n	800481a <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004774:	687b      	ldr	r3, [r7, #4]
 8004776:	681b      	ldr	r3, [r3, #0]
 8004778:	681a      	ldr	r2, [r3, #0]
 800477a:	687b      	ldr	r3, [r7, #4]
 800477c:	681b      	ldr	r3, [r3, #0]
 800477e:	f022 0216 	bic.w	r2, r2, #22
 8004782:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004784:	687b      	ldr	r3, [r7, #4]
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	695a      	ldr	r2, [r3, #20]
 800478a:	687b      	ldr	r3, [r7, #4]
 800478c:	681b      	ldr	r3, [r3, #0]
 800478e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004792:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004794:	687b      	ldr	r3, [r7, #4]
 8004796:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004798:	2b00      	cmp	r3, #0
 800479a:	d103      	bne.n	80047a4 <HAL_DMA_Abort+0x62>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80047a0:	2b00      	cmp	r3, #0
 80047a2:	d007      	beq.n	80047b4 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	681b      	ldr	r3, [r3, #0]
 80047a8:	681a      	ldr	r2, [r3, #0]
 80047aa:	687b      	ldr	r3, [r7, #4]
 80047ac:	681b      	ldr	r3, [r3, #0]
 80047ae:	f022 0208 	bic.w	r2, r2, #8
 80047b2:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	681a      	ldr	r2, [r3, #0]
 80047ba:	687b      	ldr	r3, [r7, #4]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f022 0201 	bic.w	r2, r2, #1
 80047c2:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047c4:	e013      	b.n	80047ee <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80047c6:	f7ff fe61 	bl	800448c <HAL_GetTick>
 80047ca:	4602      	mov	r2, r0
 80047cc:	68bb      	ldr	r3, [r7, #8]
 80047ce:	1ad3      	subs	r3, r2, r3
 80047d0:	2b05      	cmp	r3, #5
 80047d2:	d90c      	bls.n	80047ee <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80047d4:	687b      	ldr	r3, [r7, #4]
 80047d6:	2220      	movs	r2, #32
 80047d8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80047da:	687b      	ldr	r3, [r7, #4]
 80047dc:	2203      	movs	r2, #3
 80047de:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80047e2:	687b      	ldr	r3, [r7, #4]
 80047e4:	2200      	movs	r2, #0
 80047e6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80047ea:	2303      	movs	r3, #3
 80047ec:	e015      	b.n	800481a <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	681b      	ldr	r3, [r3, #0]
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	f003 0301 	and.w	r3, r3, #1
 80047f8:	2b00      	cmp	r3, #0
 80047fa:	d1e4      	bne.n	80047c6 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004800:	223f      	movs	r2, #63	; 0x3f
 8004802:	409a      	lsls	r2, r3
 8004804:	68fb      	ldr	r3, [r7, #12]
 8004806:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	2201      	movs	r2, #1
 800480c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004810:	687b      	ldr	r3, [r7, #4]
 8004812:	2200      	movs	r2, #0
 8004814:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8004818:	2300      	movs	r3, #0
}
 800481a:	4618      	mov	r0, r3
 800481c:	3710      	adds	r7, #16
 800481e:	46bd      	mov	sp, r7
 8004820:	bd80      	pop	{r7, pc}

08004822 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004822:	b480      	push	{r7}
 8004824:	b083      	sub	sp, #12
 8004826:	af00      	add	r7, sp, #0
 8004828:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800482a:	687b      	ldr	r3, [r7, #4]
 800482c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004830:	b2db      	uxtb	r3, r3
 8004832:	2b02      	cmp	r3, #2
 8004834:	d004      	beq.n	8004840 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	2280      	movs	r2, #128	; 0x80
 800483a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800483c:	2301      	movs	r3, #1
 800483e:	e00c      	b.n	800485a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004840:	687b      	ldr	r3, [r7, #4]
 8004842:	2205      	movs	r2, #5
 8004844:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004848:	687b      	ldr	r3, [r7, #4]
 800484a:	681b      	ldr	r3, [r3, #0]
 800484c:	681a      	ldr	r2, [r3, #0]
 800484e:	687b      	ldr	r3, [r7, #4]
 8004850:	681b      	ldr	r3, [r3, #0]
 8004852:	f022 0201 	bic.w	r2, r2, #1
 8004856:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	370c      	adds	r7, #12
 800485e:	46bd      	mov	sp, r7
 8004860:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004864:	4770      	bx	lr
	...

08004868 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8004868:	b580      	push	{r7, lr}
 800486a:	b086      	sub	sp, #24
 800486c:	af00      	add	r7, sp, #0
 800486e:	60f8      	str	r0, [r7, #12]
 8004870:	60b9      	str	r1, [r7, #8]
 8004872:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004876:	2301      	movs	r3, #1
 8004878:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800487a:	4b23      	ldr	r3, [pc, #140]	; (8004908 <HAL_FLASH_Program+0xa0>)
 800487c:	7e1b      	ldrb	r3, [r3, #24]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d101      	bne.n	8004886 <HAL_FLASH_Program+0x1e>
 8004882:	2302      	movs	r3, #2
 8004884:	e03b      	b.n	80048fe <HAL_FLASH_Program+0x96>
 8004886:	4b20      	ldr	r3, [pc, #128]	; (8004908 <HAL_FLASH_Program+0xa0>)
 8004888:	2201      	movs	r2, #1
 800488a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 800488c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004890:	f000 f87c 	bl	800498c <FLASH_WaitForLastOperation>
 8004894:	4603      	mov	r3, r0
 8004896:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8004898:	7dfb      	ldrb	r3, [r7, #23]
 800489a:	2b00      	cmp	r3, #0
 800489c:	d12b      	bne.n	80048f6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 800489e:	68fb      	ldr	r3, [r7, #12]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d105      	bne.n	80048b0 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 80048a4:	783b      	ldrb	r3, [r7, #0]
 80048a6:	4619      	mov	r1, r3
 80048a8:	68b8      	ldr	r0, [r7, #8]
 80048aa:	f000 f927 	bl	8004afc <FLASH_Program_Byte>
 80048ae:	e016      	b.n	80048de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	2b01      	cmp	r3, #1
 80048b4:	d105      	bne.n	80048c2 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 80048b6:	883b      	ldrh	r3, [r7, #0]
 80048b8:	4619      	mov	r1, r3
 80048ba:	68b8      	ldr	r0, [r7, #8]
 80048bc:	f000 f8fa 	bl	8004ab4 <FLASH_Program_HalfWord>
 80048c0:	e00d      	b.n	80048de <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80048c2:	68fb      	ldr	r3, [r7, #12]
 80048c4:	2b02      	cmp	r3, #2
 80048c6:	d105      	bne.n	80048d4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	4619      	mov	r1, r3
 80048cc:	68b8      	ldr	r0, [r7, #8]
 80048ce:	f000 f8cf 	bl	8004a70 <FLASH_Program_Word>
 80048d2:	e004      	b.n	80048de <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80048d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80048d8:	68b8      	ldr	r0, [r7, #8]
 80048da:	f000 f897 	bl	8004a0c <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80048de:	f24c 3050 	movw	r0, #50000	; 0xc350
 80048e2:	f000 f853 	bl	800498c <FLASH_WaitForLastOperation>
 80048e6:	4603      	mov	r3, r0
 80048e8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80048ea:	4b08      	ldr	r3, [pc, #32]	; (800490c <HAL_FLASH_Program+0xa4>)
 80048ec:	691b      	ldr	r3, [r3, #16]
 80048ee:	4a07      	ldr	r2, [pc, #28]	; (800490c <HAL_FLASH_Program+0xa4>)
 80048f0:	f023 0301 	bic.w	r3, r3, #1
 80048f4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80048f6:	4b04      	ldr	r3, [pc, #16]	; (8004908 <HAL_FLASH_Program+0xa0>)
 80048f8:	2200      	movs	r2, #0
 80048fa:	761a      	strb	r2, [r3, #24]
  
  return status;
 80048fc:	7dfb      	ldrb	r3, [r7, #23]
}
 80048fe:	4618      	mov	r0, r3
 8004900:	3718      	adds	r7, #24
 8004902:	46bd      	mov	sp, r7
 8004904:	bd80      	pop	{r7, pc}
 8004906:	bf00      	nop
 8004908:	200062c8 	.word	0x200062c8
 800490c:	40023c00 	.word	0x40023c00

08004910 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8004910:	b480      	push	{r7}
 8004912:	b083      	sub	sp, #12
 8004914:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8004916:	2300      	movs	r3, #0
 8004918:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800491a:	4b0b      	ldr	r3, [pc, #44]	; (8004948 <HAL_FLASH_Unlock+0x38>)
 800491c:	691b      	ldr	r3, [r3, #16]
 800491e:	2b00      	cmp	r3, #0
 8004920:	da0b      	bge.n	800493a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8004922:	4b09      	ldr	r3, [pc, #36]	; (8004948 <HAL_FLASH_Unlock+0x38>)
 8004924:	4a09      	ldr	r2, [pc, #36]	; (800494c <HAL_FLASH_Unlock+0x3c>)
 8004926:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8004928:	4b07      	ldr	r3, [pc, #28]	; (8004948 <HAL_FLASH_Unlock+0x38>)
 800492a:	4a09      	ldr	r2, [pc, #36]	; (8004950 <HAL_FLASH_Unlock+0x40>)
 800492c:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 800492e:	4b06      	ldr	r3, [pc, #24]	; (8004948 <HAL_FLASH_Unlock+0x38>)
 8004930:	691b      	ldr	r3, [r3, #16]
 8004932:	2b00      	cmp	r3, #0
 8004934:	da01      	bge.n	800493a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8004936:	2301      	movs	r3, #1
 8004938:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 800493a:	79fb      	ldrb	r3, [r7, #7]
}
 800493c:	4618      	mov	r0, r3
 800493e:	370c      	adds	r7, #12
 8004940:	46bd      	mov	sp, r7
 8004942:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004946:	4770      	bx	lr
 8004948:	40023c00 	.word	0x40023c00
 800494c:	45670123 	.word	0x45670123
 8004950:	cdef89ab 	.word	0xcdef89ab

08004954 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8004954:	b480      	push	{r7}
 8004956:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8004958:	4b05      	ldr	r3, [pc, #20]	; (8004970 <HAL_FLASH_Lock+0x1c>)
 800495a:	691b      	ldr	r3, [r3, #16]
 800495c:	4a04      	ldr	r2, [pc, #16]	; (8004970 <HAL_FLASH_Lock+0x1c>)
 800495e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8004962:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8004964:	2300      	movs	r3, #0
}
 8004966:	4618      	mov	r0, r3
 8004968:	46bd      	mov	sp, r7
 800496a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800496e:	4770      	bx	lr
 8004970:	40023c00 	.word	0x40023c00

08004974 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8004974:	b480      	push	{r7}
 8004976:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8004978:	4b03      	ldr	r3, [pc, #12]	; (8004988 <HAL_FLASH_GetError+0x14>)
 800497a:	69db      	ldr	r3, [r3, #28]
}  
 800497c:	4618      	mov	r0, r3
 800497e:	46bd      	mov	sp, r7
 8004980:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004984:	4770      	bx	lr
 8004986:	bf00      	nop
 8004988:	200062c8 	.word	0x200062c8

0800498c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 800498c:	b580      	push	{r7, lr}
 800498e:	b084      	sub	sp, #16
 8004990:	af00      	add	r7, sp, #0
 8004992:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8004994:	2300      	movs	r3, #0
 8004996:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8004998:	4b1a      	ldr	r3, [pc, #104]	; (8004a04 <FLASH_WaitForLastOperation+0x78>)
 800499a:	2200      	movs	r2, #0
 800499c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 800499e:	f7ff fd75 	bl	800448c <HAL_GetTick>
 80049a2:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80049a4:	e010      	b.n	80049c8 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 80049a6:	687b      	ldr	r3, [r7, #4]
 80049a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80049ac:	d00c      	beq.n	80049c8 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	2b00      	cmp	r3, #0
 80049b2:	d007      	beq.n	80049c4 <FLASH_WaitForLastOperation+0x38>
 80049b4:	f7ff fd6a 	bl	800448c <HAL_GetTick>
 80049b8:	4602      	mov	r2, r0
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	1ad3      	subs	r3, r2, r3
 80049be:	687a      	ldr	r2, [r7, #4]
 80049c0:	429a      	cmp	r2, r3
 80049c2:	d201      	bcs.n	80049c8 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80049c4:	2303      	movs	r3, #3
 80049c6:	e019      	b.n	80049fc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80049c8:	4b0f      	ldr	r3, [pc, #60]	; (8004a08 <FLASH_WaitForLastOperation+0x7c>)
 80049ca:	68db      	ldr	r3, [r3, #12]
 80049cc:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80049d0:	2b00      	cmp	r3, #0
 80049d2:	d1e8      	bne.n	80049a6 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80049d4:	4b0c      	ldr	r3, [pc, #48]	; (8004a08 <FLASH_WaitForLastOperation+0x7c>)
 80049d6:	68db      	ldr	r3, [r3, #12]
 80049d8:	f003 0301 	and.w	r3, r3, #1
 80049dc:	2b00      	cmp	r3, #0
 80049de:	d002      	beq.n	80049e6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80049e0:	4b09      	ldr	r3, [pc, #36]	; (8004a08 <FLASH_WaitForLastOperation+0x7c>)
 80049e2:	2201      	movs	r2, #1
 80049e4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80049e6:	4b08      	ldr	r3, [pc, #32]	; (8004a08 <FLASH_WaitForLastOperation+0x7c>)
 80049e8:	68db      	ldr	r3, [r3, #12]
 80049ea:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d003      	beq.n	80049fa <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80049f2:	f000 f8a5 	bl	8004b40 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80049f6:	2301      	movs	r3, #1
 80049f8:	e000      	b.n	80049fc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80049fa:	2300      	movs	r3, #0
  
}  
 80049fc:	4618      	mov	r0, r3
 80049fe:	3710      	adds	r7, #16
 8004a00:	46bd      	mov	sp, r7
 8004a02:	bd80      	pop	{r7, pc}
 8004a04:	200062c8 	.word	0x200062c8
 8004a08:	40023c00 	.word	0x40023c00

08004a0c <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8004a0c:	b480      	push	{r7}
 8004a0e:	b085      	sub	sp, #20
 8004a10:	af00      	add	r7, sp, #0
 8004a12:	60f8      	str	r0, [r7, #12]
 8004a14:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a18:	4b14      	ldr	r3, [pc, #80]	; (8004a6c <FLASH_Program_DoubleWord+0x60>)
 8004a1a:	691b      	ldr	r3, [r3, #16]
 8004a1c:	4a13      	ldr	r2, [pc, #76]	; (8004a6c <FLASH_Program_DoubleWord+0x60>)
 8004a1e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a22:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8004a24:	4b11      	ldr	r3, [pc, #68]	; (8004a6c <FLASH_Program_DoubleWord+0x60>)
 8004a26:	691b      	ldr	r3, [r3, #16]
 8004a28:	4a10      	ldr	r2, [pc, #64]	; (8004a6c <FLASH_Program_DoubleWord+0x60>)
 8004a2a:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8004a2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004a30:	4b0e      	ldr	r3, [pc, #56]	; (8004a6c <FLASH_Program_DoubleWord+0x60>)
 8004a32:	691b      	ldr	r3, [r3, #16]
 8004a34:	4a0d      	ldr	r2, [pc, #52]	; (8004a6c <FLASH_Program_DoubleWord+0x60>)
 8004a36:	f043 0301 	orr.w	r3, r3, #1
 8004a3a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8004a3c:	68fb      	ldr	r3, [r7, #12]
 8004a3e:	683a      	ldr	r2, [r7, #0]
 8004a40:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8004a42:	f3bf 8f6f 	isb	sy
}
 8004a46:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8004a48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8004a4c:	f04f 0200 	mov.w	r2, #0
 8004a50:	f04f 0300 	mov.w	r3, #0
 8004a54:	000a      	movs	r2, r1
 8004a56:	2300      	movs	r3, #0
 8004a58:	68f9      	ldr	r1, [r7, #12]
 8004a5a:	3104      	adds	r1, #4
 8004a5c:	4613      	mov	r3, r2
 8004a5e:	600b      	str	r3, [r1, #0]
}
 8004a60:	bf00      	nop
 8004a62:	3714      	adds	r7, #20
 8004a64:	46bd      	mov	sp, r7
 8004a66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a6a:	4770      	bx	lr
 8004a6c:	40023c00 	.word	0x40023c00

08004a70 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8004a70:	b480      	push	{r7}
 8004a72:	b083      	sub	sp, #12
 8004a74:	af00      	add	r7, sp, #0
 8004a76:	6078      	str	r0, [r7, #4]
 8004a78:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004a7a:	4b0d      	ldr	r3, [pc, #52]	; (8004ab0 <FLASH_Program_Word+0x40>)
 8004a7c:	691b      	ldr	r3, [r3, #16]
 8004a7e:	4a0c      	ldr	r2, [pc, #48]	; (8004ab0 <FLASH_Program_Word+0x40>)
 8004a80:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004a84:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8004a86:	4b0a      	ldr	r3, [pc, #40]	; (8004ab0 <FLASH_Program_Word+0x40>)
 8004a88:	691b      	ldr	r3, [r3, #16]
 8004a8a:	4a09      	ldr	r2, [pc, #36]	; (8004ab0 <FLASH_Program_Word+0x40>)
 8004a8c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004a90:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004a92:	4b07      	ldr	r3, [pc, #28]	; (8004ab0 <FLASH_Program_Word+0x40>)
 8004a94:	691b      	ldr	r3, [r3, #16]
 8004a96:	4a06      	ldr	r2, [pc, #24]	; (8004ab0 <FLASH_Program_Word+0x40>)
 8004a98:	f043 0301 	orr.w	r3, r3, #1
 8004a9c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	683a      	ldr	r2, [r7, #0]
 8004aa2:	601a      	str	r2, [r3, #0]
}
 8004aa4:	bf00      	nop
 8004aa6:	370c      	adds	r7, #12
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004aae:	4770      	bx	lr
 8004ab0:	40023c00 	.word	0x40023c00

08004ab4 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8004ab4:	b480      	push	{r7}
 8004ab6:	b083      	sub	sp, #12
 8004ab8:	af00      	add	r7, sp, #0
 8004aba:	6078      	str	r0, [r7, #4]
 8004abc:	460b      	mov	r3, r1
 8004abe:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004ac0:	4b0d      	ldr	r3, [pc, #52]	; (8004af8 <FLASH_Program_HalfWord+0x44>)
 8004ac2:	691b      	ldr	r3, [r3, #16]
 8004ac4:	4a0c      	ldr	r2, [pc, #48]	; (8004af8 <FLASH_Program_HalfWord+0x44>)
 8004ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004aca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8004acc:	4b0a      	ldr	r3, [pc, #40]	; (8004af8 <FLASH_Program_HalfWord+0x44>)
 8004ace:	691b      	ldr	r3, [r3, #16]
 8004ad0:	4a09      	ldr	r2, [pc, #36]	; (8004af8 <FLASH_Program_HalfWord+0x44>)
 8004ad2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8004ad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004ad8:	4b07      	ldr	r3, [pc, #28]	; (8004af8 <FLASH_Program_HalfWord+0x44>)
 8004ada:	691b      	ldr	r3, [r3, #16]
 8004adc:	4a06      	ldr	r2, [pc, #24]	; (8004af8 <FLASH_Program_HalfWord+0x44>)
 8004ade:	f043 0301 	orr.w	r3, r3, #1
 8004ae2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 8004ae4:	687b      	ldr	r3, [r7, #4]
 8004ae6:	887a      	ldrh	r2, [r7, #2]
 8004ae8:	801a      	strh	r2, [r3, #0]
}
 8004aea:	bf00      	nop
 8004aec:	370c      	adds	r7, #12
 8004aee:	46bd      	mov	sp, r7
 8004af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af4:	4770      	bx	lr
 8004af6:	bf00      	nop
 8004af8:	40023c00 	.word	0x40023c00

08004afc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 8004afc:	b480      	push	{r7}
 8004afe:	b083      	sub	sp, #12
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
 8004b04:	460b      	mov	r3, r1
 8004b06:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004b08:	4b0c      	ldr	r3, [pc, #48]	; (8004b3c <FLASH_Program_Byte+0x40>)
 8004b0a:	691b      	ldr	r3, [r3, #16]
 8004b0c:	4a0b      	ldr	r2, [pc, #44]	; (8004b3c <FLASH_Program_Byte+0x40>)
 8004b0e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004b12:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 8004b14:	4b09      	ldr	r3, [pc, #36]	; (8004b3c <FLASH_Program_Byte+0x40>)
 8004b16:	4a09      	ldr	r2, [pc, #36]	; (8004b3c <FLASH_Program_Byte+0x40>)
 8004b18:	691b      	ldr	r3, [r3, #16]
 8004b1a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8004b1c:	4b07      	ldr	r3, [pc, #28]	; (8004b3c <FLASH_Program_Byte+0x40>)
 8004b1e:	691b      	ldr	r3, [r3, #16]
 8004b20:	4a06      	ldr	r2, [pc, #24]	; (8004b3c <FLASH_Program_Byte+0x40>)
 8004b22:	f043 0301 	orr.w	r3, r3, #1
 8004b26:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	78fa      	ldrb	r2, [r7, #3]
 8004b2c:	701a      	strb	r2, [r3, #0]
}
 8004b2e:	bf00      	nop
 8004b30:	370c      	adds	r7, #12
 8004b32:	46bd      	mov	sp, r7
 8004b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b38:	4770      	bx	lr
 8004b3a:	bf00      	nop
 8004b3c:	40023c00 	.word	0x40023c00

08004b40 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8004b40:	b480      	push	{r7}
 8004b42:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8004b44:	4b27      	ldr	r3, [pc, #156]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004b46:	68db      	ldr	r3, [r3, #12]
 8004b48:	f003 0310 	and.w	r3, r3, #16
 8004b4c:	2b00      	cmp	r3, #0
 8004b4e:	d008      	beq.n	8004b62 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8004b50:	4b25      	ldr	r3, [pc, #148]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004b52:	69db      	ldr	r3, [r3, #28]
 8004b54:	f043 0310 	orr.w	r3, r3, #16
 8004b58:	4a23      	ldr	r2, [pc, #140]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004b5a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8004b5c:	4b21      	ldr	r3, [pc, #132]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004b5e:	2210      	movs	r2, #16
 8004b60:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8004b62:	4b20      	ldr	r3, [pc, #128]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004b64:	68db      	ldr	r3, [r3, #12]
 8004b66:	f003 0320 	and.w	r3, r3, #32
 8004b6a:	2b00      	cmp	r3, #0
 8004b6c:	d008      	beq.n	8004b80 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8004b6e:	4b1e      	ldr	r3, [pc, #120]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004b70:	69db      	ldr	r3, [r3, #28]
 8004b72:	f043 0308 	orr.w	r3, r3, #8
 8004b76:	4a1c      	ldr	r2, [pc, #112]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004b78:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8004b7a:	4b1a      	ldr	r3, [pc, #104]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004b7c:	2220      	movs	r2, #32
 8004b7e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8004b80:	4b18      	ldr	r3, [pc, #96]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004b82:	68db      	ldr	r3, [r3, #12]
 8004b84:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b88:	2b00      	cmp	r3, #0
 8004b8a:	d008      	beq.n	8004b9e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8004b8c:	4b16      	ldr	r3, [pc, #88]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004b8e:	69db      	ldr	r3, [r3, #28]
 8004b90:	f043 0304 	orr.w	r3, r3, #4
 8004b94:	4a14      	ldr	r2, [pc, #80]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004b96:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8004b98:	4b12      	ldr	r3, [pc, #72]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004b9a:	2240      	movs	r2, #64	; 0x40
 8004b9c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8004b9e:	4b11      	ldr	r3, [pc, #68]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004ba0:	68db      	ldr	r3, [r3, #12]
 8004ba2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ba6:	2b00      	cmp	r3, #0
 8004ba8:	d008      	beq.n	8004bbc <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8004baa:	4b0f      	ldr	r3, [pc, #60]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004bac:	69db      	ldr	r3, [r3, #28]
 8004bae:	f043 0302 	orr.w	r3, r3, #2
 8004bb2:	4a0d      	ldr	r2, [pc, #52]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004bb4:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8004bb6:	4b0b      	ldr	r3, [pc, #44]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004bb8:	2280      	movs	r2, #128	; 0x80
 8004bba:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8004bbc:	4b09      	ldr	r3, [pc, #36]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004bbe:	68db      	ldr	r3, [r3, #12]
 8004bc0:	f003 0302 	and.w	r3, r3, #2
 8004bc4:	2b00      	cmp	r3, #0
 8004bc6:	d008      	beq.n	8004bda <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8004bc8:	4b07      	ldr	r3, [pc, #28]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004bca:	69db      	ldr	r3, [r3, #28]
 8004bcc:	f043 0320 	orr.w	r3, r3, #32
 8004bd0:	4a05      	ldr	r2, [pc, #20]	; (8004be8 <FLASH_SetErrorCode+0xa8>)
 8004bd2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8004bd4:	4b03      	ldr	r3, [pc, #12]	; (8004be4 <FLASH_SetErrorCode+0xa4>)
 8004bd6:	2202      	movs	r2, #2
 8004bd8:	60da      	str	r2, [r3, #12]
  }
}
 8004bda:	bf00      	nop
 8004bdc:	46bd      	mov	sp, r7
 8004bde:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004be2:	4770      	bx	lr
 8004be4:	40023c00 	.word	0x40023c00
 8004be8:	200062c8 	.word	0x200062c8

08004bec <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8004bec:	b580      	push	{r7, lr}
 8004bee:	b084      	sub	sp, #16
 8004bf0:	af00      	add	r7, sp, #0
 8004bf2:	6078      	str	r0, [r7, #4]
 8004bf4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8004bf6:	2301      	movs	r3, #1
 8004bf8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8004bfa:	2300      	movs	r3, #0
 8004bfc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8004bfe:	4b31      	ldr	r3, [pc, #196]	; (8004cc4 <HAL_FLASHEx_Erase+0xd8>)
 8004c00:	7e1b      	ldrb	r3, [r3, #24]
 8004c02:	2b01      	cmp	r3, #1
 8004c04:	d101      	bne.n	8004c0a <HAL_FLASHEx_Erase+0x1e>
 8004c06:	2302      	movs	r3, #2
 8004c08:	e058      	b.n	8004cbc <HAL_FLASHEx_Erase+0xd0>
 8004c0a:	4b2e      	ldr	r3, [pc, #184]	; (8004cc4 <HAL_FLASHEx_Erase+0xd8>)
 8004c0c:	2201      	movs	r2, #1
 8004c0e:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c10:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c14:	f7ff feba 	bl	800498c <FLASH_WaitForLastOperation>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8004c1c:	7bfb      	ldrb	r3, [r7, #15]
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d148      	bne.n	8004cb4 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8004c22:	683b      	ldr	r3, [r7, #0]
 8004c24:	f04f 32ff 	mov.w	r2, #4294967295
 8004c28:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	2b01      	cmp	r3, #1
 8004c30:	d115      	bne.n	8004c5e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8004c32:	687b      	ldr	r3, [r7, #4]
 8004c34:	691b      	ldr	r3, [r3, #16]
 8004c36:	b2da      	uxtb	r2, r3
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	685b      	ldr	r3, [r3, #4]
 8004c3c:	4619      	mov	r1, r3
 8004c3e:	4610      	mov	r0, r2
 8004c40:	f000 f844 	bl	8004ccc <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c44:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c48:	f7ff fea0 	bl	800498c <FLASH_WaitForLastOperation>
 8004c4c:	4603      	mov	r3, r0
 8004c4e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8004c50:	4b1d      	ldr	r3, [pc, #116]	; (8004cc8 <HAL_FLASHEx_Erase+0xdc>)
 8004c52:	691b      	ldr	r3, [r3, #16]
 8004c54:	4a1c      	ldr	r2, [pc, #112]	; (8004cc8 <HAL_FLASHEx_Erase+0xdc>)
 8004c56:	f023 0304 	bic.w	r3, r3, #4
 8004c5a:	6113      	str	r3, [r2, #16]
 8004c5c:	e028      	b.n	8004cb0 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	60bb      	str	r3, [r7, #8]
 8004c64:	e01c      	b.n	8004ca0 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8004c66:	687b      	ldr	r3, [r7, #4]
 8004c68:	691b      	ldr	r3, [r3, #16]
 8004c6a:	b2db      	uxtb	r3, r3
 8004c6c:	4619      	mov	r1, r3
 8004c6e:	68b8      	ldr	r0, [r7, #8]
 8004c70:	f000 f850 	bl	8004d14 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8004c74:	f24c 3050 	movw	r0, #50000	; 0xc350
 8004c78:	f7ff fe88 	bl	800498c <FLASH_WaitForLastOperation>
 8004c7c:	4603      	mov	r3, r0
 8004c7e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8004c80:	4b11      	ldr	r3, [pc, #68]	; (8004cc8 <HAL_FLASHEx_Erase+0xdc>)
 8004c82:	691b      	ldr	r3, [r3, #16]
 8004c84:	4a10      	ldr	r2, [pc, #64]	; (8004cc8 <HAL_FLASHEx_Erase+0xdc>)
 8004c86:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8004c8a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8004c8c:	7bfb      	ldrb	r3, [r7, #15]
 8004c8e:	2b00      	cmp	r3, #0
 8004c90:	d003      	beq.n	8004c9a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8004c92:	683b      	ldr	r3, [r7, #0]
 8004c94:	68ba      	ldr	r2, [r7, #8]
 8004c96:	601a      	str	r2, [r3, #0]
          break;
 8004c98:	e00a      	b.n	8004cb0 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8004c9a:	68bb      	ldr	r3, [r7, #8]
 8004c9c:	3301      	adds	r3, #1
 8004c9e:	60bb      	str	r3, [r7, #8]
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	68da      	ldr	r2, [r3, #12]
 8004ca4:	687b      	ldr	r3, [r7, #4]
 8004ca6:	689b      	ldr	r3, [r3, #8]
 8004ca8:	4413      	add	r3, r2
 8004caa:	68ba      	ldr	r2, [r7, #8]
 8004cac:	429a      	cmp	r2, r3
 8004cae:	d3da      	bcc.n	8004c66 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8004cb0:	f000 f878 	bl	8004da4 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8004cb4:	4b03      	ldr	r3, [pc, #12]	; (8004cc4 <HAL_FLASHEx_Erase+0xd8>)
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	761a      	strb	r2, [r3, #24]

  return status;
 8004cba:	7bfb      	ldrb	r3, [r7, #15]
}
 8004cbc:	4618      	mov	r0, r3
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}
 8004cc4:	200062c8 	.word	0x200062c8
 8004cc8:	40023c00 	.word	0x40023c00

08004ccc <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8004ccc:	b480      	push	{r7}
 8004cce:	b083      	sub	sp, #12
 8004cd0:	af00      	add	r7, sp, #0
 8004cd2:	4603      	mov	r3, r0
 8004cd4:	6039      	str	r1, [r7, #0]
 8004cd6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004cd8:	4b0d      	ldr	r3, [pc, #52]	; (8004d10 <FLASH_MassErase+0x44>)
 8004cda:	691b      	ldr	r3, [r3, #16]
 8004cdc:	4a0c      	ldr	r2, [pc, #48]	; (8004d10 <FLASH_MassErase+0x44>)
 8004cde:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004ce2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8004ce4:	4b0a      	ldr	r3, [pc, #40]	; (8004d10 <FLASH_MassErase+0x44>)
 8004ce6:	691b      	ldr	r3, [r3, #16]
 8004ce8:	4a09      	ldr	r2, [pc, #36]	; (8004d10 <FLASH_MassErase+0x44>)
 8004cea:	f043 0304 	orr.w	r3, r3, #4
 8004cee:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8004cf0:	4b07      	ldr	r3, [pc, #28]	; (8004d10 <FLASH_MassErase+0x44>)
 8004cf2:	691a      	ldr	r2, [r3, #16]
 8004cf4:	79fb      	ldrb	r3, [r7, #7]
 8004cf6:	021b      	lsls	r3, r3, #8
 8004cf8:	4313      	orrs	r3, r2
 8004cfa:	4a05      	ldr	r2, [pc, #20]	; (8004d10 <FLASH_MassErase+0x44>)
 8004cfc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d00:	6113      	str	r3, [r2, #16]
}
 8004d02:	bf00      	nop
 8004d04:	370c      	adds	r7, #12
 8004d06:	46bd      	mov	sp, r7
 8004d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d0c:	4770      	bx	lr
 8004d0e:	bf00      	nop
 8004d10:	40023c00 	.word	0x40023c00

08004d14 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8004d14:	b480      	push	{r7}
 8004d16:	b085      	sub	sp, #20
 8004d18:	af00      	add	r7, sp, #0
 8004d1a:	6078      	str	r0, [r7, #4]
 8004d1c:	460b      	mov	r3, r1
 8004d1e:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8004d20:	2300      	movs	r3, #0
 8004d22:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8004d24:	78fb      	ldrb	r3, [r7, #3]
 8004d26:	2b00      	cmp	r3, #0
 8004d28:	d102      	bne.n	8004d30 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8004d2a:	2300      	movs	r3, #0
 8004d2c:	60fb      	str	r3, [r7, #12]
 8004d2e:	e010      	b.n	8004d52 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8004d30:	78fb      	ldrb	r3, [r7, #3]
 8004d32:	2b01      	cmp	r3, #1
 8004d34:	d103      	bne.n	8004d3e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8004d36:	f44f 7380 	mov.w	r3, #256	; 0x100
 8004d3a:	60fb      	str	r3, [r7, #12]
 8004d3c:	e009      	b.n	8004d52 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8004d3e:	78fb      	ldrb	r3, [r7, #3]
 8004d40:	2b02      	cmp	r3, #2
 8004d42:	d103      	bne.n	8004d4c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8004d44:	f44f 7300 	mov.w	r3, #512	; 0x200
 8004d48:	60fb      	str	r3, [r7, #12]
 8004d4a:	e002      	b.n	8004d52 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8004d4c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8004d50:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8004d52:	4b13      	ldr	r3, [pc, #76]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d54:	691b      	ldr	r3, [r3, #16]
 8004d56:	4a12      	ldr	r2, [pc, #72]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d58:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004d5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8004d5e:	4b10      	ldr	r3, [pc, #64]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d60:	691a      	ldr	r2, [r3, #16]
 8004d62:	490f      	ldr	r1, [pc, #60]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	4313      	orrs	r3, r2
 8004d68:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8004d6a:	4b0d      	ldr	r3, [pc, #52]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d6c:	691b      	ldr	r3, [r3, #16]
 8004d6e:	4a0c      	ldr	r2, [pc, #48]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d70:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8004d74:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8004d76:	4b0a      	ldr	r3, [pc, #40]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d78:	691a      	ldr	r2, [r3, #16]
 8004d7a:	687b      	ldr	r3, [r7, #4]
 8004d7c:	00db      	lsls	r3, r3, #3
 8004d7e:	4313      	orrs	r3, r2
 8004d80:	4a07      	ldr	r2, [pc, #28]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d82:	f043 0302 	orr.w	r3, r3, #2
 8004d86:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8004d88:	4b05      	ldr	r3, [pc, #20]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d8a:	691b      	ldr	r3, [r3, #16]
 8004d8c:	4a04      	ldr	r2, [pc, #16]	; (8004da0 <FLASH_Erase_Sector+0x8c>)
 8004d8e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004d92:	6113      	str	r3, [r2, #16]
}
 8004d94:	bf00      	nop
 8004d96:	3714      	adds	r7, #20
 8004d98:	46bd      	mov	sp, r7
 8004d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d9e:	4770      	bx	lr
 8004da0:	40023c00 	.word	0x40023c00

08004da4 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8004da4:	b480      	push	{r7}
 8004da6:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8004da8:	4b20      	ldr	r3, [pc, #128]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004daa:	681b      	ldr	r3, [r3, #0]
 8004dac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004db0:	2b00      	cmp	r3, #0
 8004db2:	d017      	beq.n	8004de4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8004db4:	4b1d      	ldr	r3, [pc, #116]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	4a1c      	ldr	r2, [pc, #112]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004dba:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004dbe:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8004dc0:	4b1a      	ldr	r3, [pc, #104]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004dc2:	681b      	ldr	r3, [r3, #0]
 8004dc4:	4a19      	ldr	r2, [pc, #100]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004dc6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8004dca:	6013      	str	r3, [r2, #0]
 8004dcc:	4b17      	ldr	r3, [pc, #92]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004dce:	681b      	ldr	r3, [r3, #0]
 8004dd0:	4a16      	ldr	r2, [pc, #88]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004dd2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004dd6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8004dd8:	4b14      	ldr	r3, [pc, #80]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	4a13      	ldr	r2, [pc, #76]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004dde:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8004de2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8004de4:	4b11      	ldr	r3, [pc, #68]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d017      	beq.n	8004e20 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8004df0:	4b0e      	ldr	r3, [pc, #56]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	4a0d      	ldr	r2, [pc, #52]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004df6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004dfa:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8004dfc:	4b0b      	ldr	r3, [pc, #44]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	4a0a      	ldr	r2, [pc, #40]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004e02:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8004e06:	6013      	str	r3, [r2, #0]
 8004e08:	4b08      	ldr	r3, [pc, #32]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	4a07      	ldr	r2, [pc, #28]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004e0e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004e12:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8004e14:	4b05      	ldr	r3, [pc, #20]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004e16:	681b      	ldr	r3, [r3, #0]
 8004e18:	4a04      	ldr	r2, [pc, #16]	; (8004e2c <FLASH_FlushCaches+0x88>)
 8004e1a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8004e1e:	6013      	str	r3, [r2, #0]
  }
}
 8004e20:	bf00      	nop
 8004e22:	46bd      	mov	sp, r7
 8004e24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e28:	4770      	bx	lr
 8004e2a:	bf00      	nop
 8004e2c:	40023c00 	.word	0x40023c00

08004e30 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004e30:	b480      	push	{r7}
 8004e32:	b089      	sub	sp, #36	; 0x24
 8004e34:	af00      	add	r7, sp, #0
 8004e36:	6078      	str	r0, [r7, #4]
 8004e38:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004e3a:	2300      	movs	r3, #0
 8004e3c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004e3e:	2300      	movs	r3, #0
 8004e40:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004e42:	2300      	movs	r3, #0
 8004e44:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004e46:	2300      	movs	r3, #0
 8004e48:	61fb      	str	r3, [r7, #28]
 8004e4a:	e16b      	b.n	8005124 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004e4c:	2201      	movs	r2, #1
 8004e4e:	69fb      	ldr	r3, [r7, #28]
 8004e50:	fa02 f303 	lsl.w	r3, r2, r3
 8004e54:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004e56:	683b      	ldr	r3, [r7, #0]
 8004e58:	681b      	ldr	r3, [r3, #0]
 8004e5a:	697a      	ldr	r2, [r7, #20]
 8004e5c:	4013      	ands	r3, r2
 8004e5e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004e60:	693a      	ldr	r2, [r7, #16]
 8004e62:	697b      	ldr	r3, [r7, #20]
 8004e64:	429a      	cmp	r2, r3
 8004e66:	f040 815a 	bne.w	800511e <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e6a:	683b      	ldr	r3, [r7, #0]
 8004e6c:	685b      	ldr	r3, [r3, #4]
 8004e6e:	f003 0303 	and.w	r3, r3, #3
 8004e72:	2b01      	cmp	r3, #1
 8004e74:	d005      	beq.n	8004e82 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004e76:	683b      	ldr	r3, [r7, #0]
 8004e78:	685b      	ldr	r3, [r3, #4]
 8004e7a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004e7e:	2b02      	cmp	r3, #2
 8004e80:	d130      	bne.n	8004ee4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	689b      	ldr	r3, [r3, #8]
 8004e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8004e88:	69fb      	ldr	r3, [r7, #28]
 8004e8a:	005b      	lsls	r3, r3, #1
 8004e8c:	2203      	movs	r2, #3
 8004e8e:	fa02 f303 	lsl.w	r3, r2, r3
 8004e92:	43db      	mvns	r3, r3
 8004e94:	69ba      	ldr	r2, [r7, #24]
 8004e96:	4013      	ands	r3, r2
 8004e98:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8004e9a:	683b      	ldr	r3, [r7, #0]
 8004e9c:	68da      	ldr	r2, [r3, #12]
 8004e9e:	69fb      	ldr	r3, [r7, #28]
 8004ea0:	005b      	lsls	r3, r3, #1
 8004ea2:	fa02 f303 	lsl.w	r3, r2, r3
 8004ea6:	69ba      	ldr	r2, [r7, #24]
 8004ea8:	4313      	orrs	r3, r2
 8004eaa:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	69ba      	ldr	r2, [r7, #24]
 8004eb0:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004eb2:	687b      	ldr	r3, [r7, #4]
 8004eb4:	685b      	ldr	r3, [r3, #4]
 8004eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8004eb8:	2201      	movs	r2, #1
 8004eba:	69fb      	ldr	r3, [r7, #28]
 8004ebc:	fa02 f303 	lsl.w	r3, r2, r3
 8004ec0:	43db      	mvns	r3, r3
 8004ec2:	69ba      	ldr	r2, [r7, #24]
 8004ec4:	4013      	ands	r3, r2
 8004ec6:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8004ec8:	683b      	ldr	r3, [r7, #0]
 8004eca:	685b      	ldr	r3, [r3, #4]
 8004ecc:	091b      	lsrs	r3, r3, #4
 8004ece:	f003 0201 	and.w	r2, r3, #1
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	fa02 f303 	lsl.w	r3, r2, r3
 8004ed8:	69ba      	ldr	r2, [r7, #24]
 8004eda:	4313      	orrs	r3, r2
 8004edc:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	69ba      	ldr	r2, [r7, #24]
 8004ee2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004ee4:	683b      	ldr	r3, [r7, #0]
 8004ee6:	685b      	ldr	r3, [r3, #4]
 8004ee8:	f003 0303 	and.w	r3, r3, #3
 8004eec:	2b03      	cmp	r3, #3
 8004eee:	d017      	beq.n	8004f20 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004ef0:	687b      	ldr	r3, [r7, #4]
 8004ef2:	68db      	ldr	r3, [r3, #12]
 8004ef4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004ef6:	69fb      	ldr	r3, [r7, #28]
 8004ef8:	005b      	lsls	r3, r3, #1
 8004efa:	2203      	movs	r2, #3
 8004efc:	fa02 f303 	lsl.w	r3, r2, r3
 8004f00:	43db      	mvns	r3, r3
 8004f02:	69ba      	ldr	r2, [r7, #24]
 8004f04:	4013      	ands	r3, r2
 8004f06:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004f08:	683b      	ldr	r3, [r7, #0]
 8004f0a:	689a      	ldr	r2, [r3, #8]
 8004f0c:	69fb      	ldr	r3, [r7, #28]
 8004f0e:	005b      	lsls	r3, r3, #1
 8004f10:	fa02 f303 	lsl.w	r3, r2, r3
 8004f14:	69ba      	ldr	r2, [r7, #24]
 8004f16:	4313      	orrs	r3, r2
 8004f18:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004f1a:	687b      	ldr	r3, [r7, #4]
 8004f1c:	69ba      	ldr	r2, [r7, #24]
 8004f1e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004f20:	683b      	ldr	r3, [r7, #0]
 8004f22:	685b      	ldr	r3, [r3, #4]
 8004f24:	f003 0303 	and.w	r3, r3, #3
 8004f28:	2b02      	cmp	r3, #2
 8004f2a:	d123      	bne.n	8004f74 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004f2c:	69fb      	ldr	r3, [r7, #28]
 8004f2e:	08da      	lsrs	r2, r3, #3
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	3208      	adds	r2, #8
 8004f34:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004f38:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004f3a:	69fb      	ldr	r3, [r7, #28]
 8004f3c:	f003 0307 	and.w	r3, r3, #7
 8004f40:	009b      	lsls	r3, r3, #2
 8004f42:	220f      	movs	r2, #15
 8004f44:	fa02 f303 	lsl.w	r3, r2, r3
 8004f48:	43db      	mvns	r3, r3
 8004f4a:	69ba      	ldr	r2, [r7, #24]
 8004f4c:	4013      	ands	r3, r2
 8004f4e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004f50:	683b      	ldr	r3, [r7, #0]
 8004f52:	691a      	ldr	r2, [r3, #16]
 8004f54:	69fb      	ldr	r3, [r7, #28]
 8004f56:	f003 0307 	and.w	r3, r3, #7
 8004f5a:	009b      	lsls	r3, r3, #2
 8004f5c:	fa02 f303 	lsl.w	r3, r2, r3
 8004f60:	69ba      	ldr	r2, [r7, #24]
 8004f62:	4313      	orrs	r3, r2
 8004f64:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004f66:	69fb      	ldr	r3, [r7, #28]
 8004f68:	08da      	lsrs	r2, r3, #3
 8004f6a:	687b      	ldr	r3, [r7, #4]
 8004f6c:	3208      	adds	r2, #8
 8004f6e:	69b9      	ldr	r1, [r7, #24]
 8004f70:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	681b      	ldr	r3, [r3, #0]
 8004f78:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8004f7a:	69fb      	ldr	r3, [r7, #28]
 8004f7c:	005b      	lsls	r3, r3, #1
 8004f7e:	2203      	movs	r2, #3
 8004f80:	fa02 f303 	lsl.w	r3, r2, r3
 8004f84:	43db      	mvns	r3, r3
 8004f86:	69ba      	ldr	r2, [r7, #24]
 8004f88:	4013      	ands	r3, r2
 8004f8a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004f8c:	683b      	ldr	r3, [r7, #0]
 8004f8e:	685b      	ldr	r3, [r3, #4]
 8004f90:	f003 0203 	and.w	r2, r3, #3
 8004f94:	69fb      	ldr	r3, [r7, #28]
 8004f96:	005b      	lsls	r3, r3, #1
 8004f98:	fa02 f303 	lsl.w	r3, r2, r3
 8004f9c:	69ba      	ldr	r2, [r7, #24]
 8004f9e:	4313      	orrs	r3, r2
 8004fa0:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004fa2:	687b      	ldr	r3, [r7, #4]
 8004fa4:	69ba      	ldr	r2, [r7, #24]
 8004fa6:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8004fa8:	683b      	ldr	r3, [r7, #0]
 8004faa:	685b      	ldr	r3, [r3, #4]
 8004fac:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	f000 80b4 	beq.w	800511e <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8004fb6:	2300      	movs	r3, #0
 8004fb8:	60fb      	str	r3, [r7, #12]
 8004fba:	4b60      	ldr	r3, [pc, #384]	; (800513c <HAL_GPIO_Init+0x30c>)
 8004fbc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fbe:	4a5f      	ldr	r2, [pc, #380]	; (800513c <HAL_GPIO_Init+0x30c>)
 8004fc0:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004fc4:	6453      	str	r3, [r2, #68]	; 0x44
 8004fc6:	4b5d      	ldr	r3, [pc, #372]	; (800513c <HAL_GPIO_Init+0x30c>)
 8004fc8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fca:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004fce:	60fb      	str	r3, [r7, #12]
 8004fd0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004fd2:	4a5b      	ldr	r2, [pc, #364]	; (8005140 <HAL_GPIO_Init+0x310>)
 8004fd4:	69fb      	ldr	r3, [r7, #28]
 8004fd6:	089b      	lsrs	r3, r3, #2
 8004fd8:	3302      	adds	r3, #2
 8004fda:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004fde:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004fe0:	69fb      	ldr	r3, [r7, #28]
 8004fe2:	f003 0303 	and.w	r3, r3, #3
 8004fe6:	009b      	lsls	r3, r3, #2
 8004fe8:	220f      	movs	r2, #15
 8004fea:	fa02 f303 	lsl.w	r3, r2, r3
 8004fee:	43db      	mvns	r3, r3
 8004ff0:	69ba      	ldr	r2, [r7, #24]
 8004ff2:	4013      	ands	r3, r2
 8004ff4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004ff6:	687b      	ldr	r3, [r7, #4]
 8004ff8:	4a52      	ldr	r2, [pc, #328]	; (8005144 <HAL_GPIO_Init+0x314>)
 8004ffa:	4293      	cmp	r3, r2
 8004ffc:	d02b      	beq.n	8005056 <HAL_GPIO_Init+0x226>
 8004ffe:	687b      	ldr	r3, [r7, #4]
 8005000:	4a51      	ldr	r2, [pc, #324]	; (8005148 <HAL_GPIO_Init+0x318>)
 8005002:	4293      	cmp	r3, r2
 8005004:	d025      	beq.n	8005052 <HAL_GPIO_Init+0x222>
 8005006:	687b      	ldr	r3, [r7, #4]
 8005008:	4a50      	ldr	r2, [pc, #320]	; (800514c <HAL_GPIO_Init+0x31c>)
 800500a:	4293      	cmp	r3, r2
 800500c:	d01f      	beq.n	800504e <HAL_GPIO_Init+0x21e>
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	4a4f      	ldr	r2, [pc, #316]	; (8005150 <HAL_GPIO_Init+0x320>)
 8005012:	4293      	cmp	r3, r2
 8005014:	d019      	beq.n	800504a <HAL_GPIO_Init+0x21a>
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	4a4e      	ldr	r2, [pc, #312]	; (8005154 <HAL_GPIO_Init+0x324>)
 800501a:	4293      	cmp	r3, r2
 800501c:	d013      	beq.n	8005046 <HAL_GPIO_Init+0x216>
 800501e:	687b      	ldr	r3, [r7, #4]
 8005020:	4a4d      	ldr	r2, [pc, #308]	; (8005158 <HAL_GPIO_Init+0x328>)
 8005022:	4293      	cmp	r3, r2
 8005024:	d00d      	beq.n	8005042 <HAL_GPIO_Init+0x212>
 8005026:	687b      	ldr	r3, [r7, #4]
 8005028:	4a4c      	ldr	r2, [pc, #304]	; (800515c <HAL_GPIO_Init+0x32c>)
 800502a:	4293      	cmp	r3, r2
 800502c:	d007      	beq.n	800503e <HAL_GPIO_Init+0x20e>
 800502e:	687b      	ldr	r3, [r7, #4]
 8005030:	4a4b      	ldr	r2, [pc, #300]	; (8005160 <HAL_GPIO_Init+0x330>)
 8005032:	4293      	cmp	r3, r2
 8005034:	d101      	bne.n	800503a <HAL_GPIO_Init+0x20a>
 8005036:	2307      	movs	r3, #7
 8005038:	e00e      	b.n	8005058 <HAL_GPIO_Init+0x228>
 800503a:	2308      	movs	r3, #8
 800503c:	e00c      	b.n	8005058 <HAL_GPIO_Init+0x228>
 800503e:	2306      	movs	r3, #6
 8005040:	e00a      	b.n	8005058 <HAL_GPIO_Init+0x228>
 8005042:	2305      	movs	r3, #5
 8005044:	e008      	b.n	8005058 <HAL_GPIO_Init+0x228>
 8005046:	2304      	movs	r3, #4
 8005048:	e006      	b.n	8005058 <HAL_GPIO_Init+0x228>
 800504a:	2303      	movs	r3, #3
 800504c:	e004      	b.n	8005058 <HAL_GPIO_Init+0x228>
 800504e:	2302      	movs	r3, #2
 8005050:	e002      	b.n	8005058 <HAL_GPIO_Init+0x228>
 8005052:	2301      	movs	r3, #1
 8005054:	e000      	b.n	8005058 <HAL_GPIO_Init+0x228>
 8005056:	2300      	movs	r3, #0
 8005058:	69fa      	ldr	r2, [r7, #28]
 800505a:	f002 0203 	and.w	r2, r2, #3
 800505e:	0092      	lsls	r2, r2, #2
 8005060:	4093      	lsls	r3, r2
 8005062:	69ba      	ldr	r2, [r7, #24]
 8005064:	4313      	orrs	r3, r2
 8005066:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8005068:	4935      	ldr	r1, [pc, #212]	; (8005140 <HAL_GPIO_Init+0x310>)
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	3302      	adds	r3, #2
 8005070:	69ba      	ldr	r2, [r7, #24]
 8005072:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8005076:	4b3b      	ldr	r3, [pc, #236]	; (8005164 <HAL_GPIO_Init+0x334>)
 8005078:	689b      	ldr	r3, [r3, #8]
 800507a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800507c:	693b      	ldr	r3, [r7, #16]
 800507e:	43db      	mvns	r3, r3
 8005080:	69ba      	ldr	r2, [r7, #24]
 8005082:	4013      	ands	r3, r2
 8005084:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8005086:	683b      	ldr	r3, [r7, #0]
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800508e:	2b00      	cmp	r3, #0
 8005090:	d003      	beq.n	800509a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8005092:	69ba      	ldr	r2, [r7, #24]
 8005094:	693b      	ldr	r3, [r7, #16]
 8005096:	4313      	orrs	r3, r2
 8005098:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800509a:	4a32      	ldr	r2, [pc, #200]	; (8005164 <HAL_GPIO_Init+0x334>)
 800509c:	69bb      	ldr	r3, [r7, #24]
 800509e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80050a0:	4b30      	ldr	r3, [pc, #192]	; (8005164 <HAL_GPIO_Init+0x334>)
 80050a2:	68db      	ldr	r3, [r3, #12]
 80050a4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050a6:	693b      	ldr	r3, [r7, #16]
 80050a8:	43db      	mvns	r3, r3
 80050aa:	69ba      	ldr	r2, [r7, #24]
 80050ac:	4013      	ands	r3, r2
 80050ae:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80050b0:	683b      	ldr	r3, [r7, #0]
 80050b2:	685b      	ldr	r3, [r3, #4]
 80050b4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80050b8:	2b00      	cmp	r3, #0
 80050ba:	d003      	beq.n	80050c4 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 80050bc:	69ba      	ldr	r2, [r7, #24]
 80050be:	693b      	ldr	r3, [r7, #16]
 80050c0:	4313      	orrs	r3, r2
 80050c2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80050c4:	4a27      	ldr	r2, [pc, #156]	; (8005164 <HAL_GPIO_Init+0x334>)
 80050c6:	69bb      	ldr	r3, [r7, #24]
 80050c8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 80050ca:	4b26      	ldr	r3, [pc, #152]	; (8005164 <HAL_GPIO_Init+0x334>)
 80050cc:	685b      	ldr	r3, [r3, #4]
 80050ce:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050d0:	693b      	ldr	r3, [r7, #16]
 80050d2:	43db      	mvns	r3, r3
 80050d4:	69ba      	ldr	r2, [r7, #24]
 80050d6:	4013      	ands	r3, r2
 80050d8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80050da:	683b      	ldr	r3, [r7, #0]
 80050dc:	685b      	ldr	r3, [r3, #4]
 80050de:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80050e2:	2b00      	cmp	r3, #0
 80050e4:	d003      	beq.n	80050ee <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80050e6:	69ba      	ldr	r2, [r7, #24]
 80050e8:	693b      	ldr	r3, [r7, #16]
 80050ea:	4313      	orrs	r3, r2
 80050ec:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80050ee:	4a1d      	ldr	r2, [pc, #116]	; (8005164 <HAL_GPIO_Init+0x334>)
 80050f0:	69bb      	ldr	r3, [r7, #24]
 80050f2:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80050f4:	4b1b      	ldr	r3, [pc, #108]	; (8005164 <HAL_GPIO_Init+0x334>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80050fa:	693b      	ldr	r3, [r7, #16]
 80050fc:	43db      	mvns	r3, r3
 80050fe:	69ba      	ldr	r2, [r7, #24]
 8005100:	4013      	ands	r3, r2
 8005102:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8005104:	683b      	ldr	r3, [r7, #0]
 8005106:	685b      	ldr	r3, [r3, #4]
 8005108:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800510c:	2b00      	cmp	r3, #0
 800510e:	d003      	beq.n	8005118 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8005110:	69ba      	ldr	r2, [r7, #24]
 8005112:	693b      	ldr	r3, [r7, #16]
 8005114:	4313      	orrs	r3, r2
 8005116:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8005118:	4a12      	ldr	r2, [pc, #72]	; (8005164 <HAL_GPIO_Init+0x334>)
 800511a:	69bb      	ldr	r3, [r7, #24]
 800511c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800511e:	69fb      	ldr	r3, [r7, #28]
 8005120:	3301      	adds	r3, #1
 8005122:	61fb      	str	r3, [r7, #28]
 8005124:	69fb      	ldr	r3, [r7, #28]
 8005126:	2b0f      	cmp	r3, #15
 8005128:	f67f ae90 	bls.w	8004e4c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800512c:	bf00      	nop
 800512e:	bf00      	nop
 8005130:	3724      	adds	r7, #36	; 0x24
 8005132:	46bd      	mov	sp, r7
 8005134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005138:	4770      	bx	lr
 800513a:	bf00      	nop
 800513c:	40023800 	.word	0x40023800
 8005140:	40013800 	.word	0x40013800
 8005144:	40020000 	.word	0x40020000
 8005148:	40020400 	.word	0x40020400
 800514c:	40020800 	.word	0x40020800
 8005150:	40020c00 	.word	0x40020c00
 8005154:	40021000 	.word	0x40021000
 8005158:	40021400 	.word	0x40021400
 800515c:	40021800 	.word	0x40021800
 8005160:	40021c00 	.word	0x40021c00
 8005164:	40013c00 	.word	0x40013c00

08005168 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8005168:	b480      	push	{r7}
 800516a:	b085      	sub	sp, #20
 800516c:	af00      	add	r7, sp, #0
 800516e:	6078      	str	r0, [r7, #4]
 8005170:	460b      	mov	r3, r1
 8005172:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8005174:	687b      	ldr	r3, [r7, #4]
 8005176:	691a      	ldr	r2, [r3, #16]
 8005178:	887b      	ldrh	r3, [r7, #2]
 800517a:	4013      	ands	r3, r2
 800517c:	2b00      	cmp	r3, #0
 800517e:	d002      	beq.n	8005186 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8005180:	2301      	movs	r3, #1
 8005182:	73fb      	strb	r3, [r7, #15]
 8005184:	e001      	b.n	800518a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8005186:	2300      	movs	r3, #0
 8005188:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800518a:	7bfb      	ldrb	r3, [r7, #15]
}
 800518c:	4618      	mov	r0, r3
 800518e:	3714      	adds	r7, #20
 8005190:	46bd      	mov	sp, r7
 8005192:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005196:	4770      	bx	lr

08005198 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8005198:	b480      	push	{r7}
 800519a:	b083      	sub	sp, #12
 800519c:	af00      	add	r7, sp, #0
 800519e:	6078      	str	r0, [r7, #4]
 80051a0:	460b      	mov	r3, r1
 80051a2:	807b      	strh	r3, [r7, #2]
 80051a4:	4613      	mov	r3, r2
 80051a6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80051a8:	787b      	ldrb	r3, [r7, #1]
 80051aa:	2b00      	cmp	r3, #0
 80051ac:	d003      	beq.n	80051b6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80051ae:	887a      	ldrh	r2, [r7, #2]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80051b4:	e003      	b.n	80051be <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80051b6:	887b      	ldrh	r3, [r7, #2]
 80051b8:	041a      	lsls	r2, r3, #16
 80051ba:	687b      	ldr	r3, [r7, #4]
 80051bc:	619a      	str	r2, [r3, #24]
}
 80051be:	bf00      	nop
 80051c0:	370c      	adds	r7, #12
 80051c2:	46bd      	mov	sp, r7
 80051c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c8:	4770      	bx	lr

080051ca <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 80051ca:	b480      	push	{r7}
 80051cc:	b085      	sub	sp, #20
 80051ce:	af00      	add	r7, sp, #0
 80051d0:	6078      	str	r0, [r7, #4]
 80051d2:	460b      	mov	r3, r1
 80051d4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Output Data Register value */
  odr = GPIOx->ODR;
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	695b      	ldr	r3, [r3, #20]
 80051da:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80051dc:	887a      	ldrh	r2, [r7, #2]
 80051de:	68fb      	ldr	r3, [r7, #12]
 80051e0:	4013      	ands	r3, r2
 80051e2:	041a      	lsls	r2, r3, #16
 80051e4:	68fb      	ldr	r3, [r7, #12]
 80051e6:	43d9      	mvns	r1, r3
 80051e8:	887b      	ldrh	r3, [r7, #2]
 80051ea:	400b      	ands	r3, r1
 80051ec:	431a      	orrs	r2, r3
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	619a      	str	r2, [r3, #24]
}
 80051f2:	bf00      	nop
 80051f4:	3714      	adds	r7, #20
 80051f6:	46bd      	mov	sp, r7
 80051f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051fc:	4770      	bx	lr
	...

08005200 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005200:	b580      	push	{r7, lr}
 8005202:	b086      	sub	sp, #24
 8005204:	af00      	add	r7, sp, #0
 8005206:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005208:	687b      	ldr	r3, [r7, #4]
 800520a:	2b00      	cmp	r3, #0
 800520c:	d101      	bne.n	8005212 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800520e:	2301      	movs	r3, #1
 8005210:	e267      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005212:	687b      	ldr	r3, [r7, #4]
 8005214:	681b      	ldr	r3, [r3, #0]
 8005216:	f003 0301 	and.w	r3, r3, #1
 800521a:	2b00      	cmp	r3, #0
 800521c:	d075      	beq.n	800530a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800521e:	4b88      	ldr	r3, [pc, #544]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005220:	689b      	ldr	r3, [r3, #8]
 8005222:	f003 030c 	and.w	r3, r3, #12
 8005226:	2b04      	cmp	r3, #4
 8005228:	d00c      	beq.n	8005244 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800522a:	4b85      	ldr	r3, [pc, #532]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800522c:	689b      	ldr	r3, [r3, #8]
 800522e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005232:	2b08      	cmp	r3, #8
 8005234:	d112      	bne.n	800525c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005236:	4b82      	ldr	r3, [pc, #520]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005238:	685b      	ldr	r3, [r3, #4]
 800523a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800523e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005242:	d10b      	bne.n	800525c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005244:	4b7e      	ldr	r3, [pc, #504]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005246:	681b      	ldr	r3, [r3, #0]
 8005248:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800524c:	2b00      	cmp	r3, #0
 800524e:	d05b      	beq.n	8005308 <HAL_RCC_OscConfig+0x108>
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	685b      	ldr	r3, [r3, #4]
 8005254:	2b00      	cmp	r3, #0
 8005256:	d157      	bne.n	8005308 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005258:	2301      	movs	r3, #1
 800525a:	e242      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800525c:	687b      	ldr	r3, [r7, #4]
 800525e:	685b      	ldr	r3, [r3, #4]
 8005260:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005264:	d106      	bne.n	8005274 <HAL_RCC_OscConfig+0x74>
 8005266:	4b76      	ldr	r3, [pc, #472]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	4a75      	ldr	r2, [pc, #468]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800526c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005270:	6013      	str	r3, [r2, #0]
 8005272:	e01d      	b.n	80052b0 <HAL_RCC_OscConfig+0xb0>
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	685b      	ldr	r3, [r3, #4]
 8005278:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800527c:	d10c      	bne.n	8005298 <HAL_RCC_OscConfig+0x98>
 800527e:	4b70      	ldr	r3, [pc, #448]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005280:	681b      	ldr	r3, [r3, #0]
 8005282:	4a6f      	ldr	r2, [pc, #444]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005284:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005288:	6013      	str	r3, [r2, #0]
 800528a:	4b6d      	ldr	r3, [pc, #436]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	4a6c      	ldr	r2, [pc, #432]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005290:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005294:	6013      	str	r3, [r2, #0]
 8005296:	e00b      	b.n	80052b0 <HAL_RCC_OscConfig+0xb0>
 8005298:	4b69      	ldr	r3, [pc, #420]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	4a68      	ldr	r2, [pc, #416]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800529e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80052a2:	6013      	str	r3, [r2, #0]
 80052a4:	4b66      	ldr	r3, [pc, #408]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80052a6:	681b      	ldr	r3, [r3, #0]
 80052a8:	4a65      	ldr	r2, [pc, #404]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80052aa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80052ae:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	685b      	ldr	r3, [r3, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d013      	beq.n	80052e0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052b8:	f7ff f8e8 	bl	800448c <HAL_GetTick>
 80052bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052be:	e008      	b.n	80052d2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052c0:	f7ff f8e4 	bl	800448c <HAL_GetTick>
 80052c4:	4602      	mov	r2, r0
 80052c6:	693b      	ldr	r3, [r7, #16]
 80052c8:	1ad3      	subs	r3, r2, r3
 80052ca:	2b64      	cmp	r3, #100	; 0x64
 80052cc:	d901      	bls.n	80052d2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80052ce:	2303      	movs	r3, #3
 80052d0:	e207      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80052d2:	4b5b      	ldr	r3, [pc, #364]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80052da:	2b00      	cmp	r3, #0
 80052dc:	d0f0      	beq.n	80052c0 <HAL_RCC_OscConfig+0xc0>
 80052de:	e014      	b.n	800530a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80052e0:	f7ff f8d4 	bl	800448c <HAL_GetTick>
 80052e4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052e6:	e008      	b.n	80052fa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80052e8:	f7ff f8d0 	bl	800448c <HAL_GetTick>
 80052ec:	4602      	mov	r2, r0
 80052ee:	693b      	ldr	r3, [r7, #16]
 80052f0:	1ad3      	subs	r3, r2, r3
 80052f2:	2b64      	cmp	r3, #100	; 0x64
 80052f4:	d901      	bls.n	80052fa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80052f6:	2303      	movs	r3, #3
 80052f8:	e1f3      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80052fa:	4b51      	ldr	r3, [pc, #324]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005302:	2b00      	cmp	r3, #0
 8005304:	d1f0      	bne.n	80052e8 <HAL_RCC_OscConfig+0xe8>
 8005306:	e000      	b.n	800530a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005308:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	681b      	ldr	r3, [r3, #0]
 800530e:	f003 0302 	and.w	r3, r3, #2
 8005312:	2b00      	cmp	r3, #0
 8005314:	d063      	beq.n	80053de <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005316:	4b4a      	ldr	r3, [pc, #296]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005318:	689b      	ldr	r3, [r3, #8]
 800531a:	f003 030c 	and.w	r3, r3, #12
 800531e:	2b00      	cmp	r3, #0
 8005320:	d00b      	beq.n	800533a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005322:	4b47      	ldr	r3, [pc, #284]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005324:	689b      	ldr	r3, [r3, #8]
 8005326:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800532a:	2b08      	cmp	r3, #8
 800532c:	d11c      	bne.n	8005368 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800532e:	4b44      	ldr	r3, [pc, #272]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005330:	685b      	ldr	r3, [r3, #4]
 8005332:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005336:	2b00      	cmp	r3, #0
 8005338:	d116      	bne.n	8005368 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800533a:	4b41      	ldr	r3, [pc, #260]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	f003 0302 	and.w	r3, r3, #2
 8005342:	2b00      	cmp	r3, #0
 8005344:	d005      	beq.n	8005352 <HAL_RCC_OscConfig+0x152>
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	68db      	ldr	r3, [r3, #12]
 800534a:	2b01      	cmp	r3, #1
 800534c:	d001      	beq.n	8005352 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800534e:	2301      	movs	r3, #1
 8005350:	e1c7      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005352:	4b3b      	ldr	r3, [pc, #236]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800535a:	687b      	ldr	r3, [r7, #4]
 800535c:	691b      	ldr	r3, [r3, #16]
 800535e:	00db      	lsls	r3, r3, #3
 8005360:	4937      	ldr	r1, [pc, #220]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005362:	4313      	orrs	r3, r2
 8005364:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005366:	e03a      	b.n	80053de <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	68db      	ldr	r3, [r3, #12]
 800536c:	2b00      	cmp	r3, #0
 800536e:	d020      	beq.n	80053b2 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005370:	4b34      	ldr	r3, [pc, #208]	; (8005444 <HAL_RCC_OscConfig+0x244>)
 8005372:	2201      	movs	r2, #1
 8005374:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005376:	f7ff f889 	bl	800448c <HAL_GetTick>
 800537a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800537c:	e008      	b.n	8005390 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800537e:	f7ff f885 	bl	800448c <HAL_GetTick>
 8005382:	4602      	mov	r2, r0
 8005384:	693b      	ldr	r3, [r7, #16]
 8005386:	1ad3      	subs	r3, r2, r3
 8005388:	2b02      	cmp	r3, #2
 800538a:	d901      	bls.n	8005390 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800538c:	2303      	movs	r3, #3
 800538e:	e1a8      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005390:	4b2b      	ldr	r3, [pc, #172]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005392:	681b      	ldr	r3, [r3, #0]
 8005394:	f003 0302 	and.w	r3, r3, #2
 8005398:	2b00      	cmp	r3, #0
 800539a:	d0f0      	beq.n	800537e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800539c:	4b28      	ldr	r3, [pc, #160]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	691b      	ldr	r3, [r3, #16]
 80053a8:	00db      	lsls	r3, r3, #3
 80053aa:	4925      	ldr	r1, [pc, #148]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80053ac:	4313      	orrs	r3, r2
 80053ae:	600b      	str	r3, [r1, #0]
 80053b0:	e015      	b.n	80053de <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80053b2:	4b24      	ldr	r3, [pc, #144]	; (8005444 <HAL_RCC_OscConfig+0x244>)
 80053b4:	2200      	movs	r2, #0
 80053b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80053b8:	f7ff f868 	bl	800448c <HAL_GetTick>
 80053bc:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053be:	e008      	b.n	80053d2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80053c0:	f7ff f864 	bl	800448c <HAL_GetTick>
 80053c4:	4602      	mov	r2, r0
 80053c6:	693b      	ldr	r3, [r7, #16]
 80053c8:	1ad3      	subs	r3, r2, r3
 80053ca:	2b02      	cmp	r3, #2
 80053cc:	d901      	bls.n	80053d2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80053ce:	2303      	movs	r3, #3
 80053d0:	e187      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80053d2:	4b1b      	ldr	r3, [pc, #108]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 80053d4:	681b      	ldr	r3, [r3, #0]
 80053d6:	f003 0302 	and.w	r3, r3, #2
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1f0      	bne.n	80053c0 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 0308 	and.w	r3, r3, #8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	d036      	beq.n	8005458 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	695b      	ldr	r3, [r3, #20]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	d016      	beq.n	8005420 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80053f2:	4b15      	ldr	r3, [pc, #84]	; (8005448 <HAL_RCC_OscConfig+0x248>)
 80053f4:	2201      	movs	r2, #1
 80053f6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80053f8:	f7ff f848 	bl	800448c <HAL_GetTick>
 80053fc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80053fe:	e008      	b.n	8005412 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005400:	f7ff f844 	bl	800448c <HAL_GetTick>
 8005404:	4602      	mov	r2, r0
 8005406:	693b      	ldr	r3, [r7, #16]
 8005408:	1ad3      	subs	r3, r2, r3
 800540a:	2b02      	cmp	r3, #2
 800540c:	d901      	bls.n	8005412 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800540e:	2303      	movs	r3, #3
 8005410:	e167      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005412:	4b0b      	ldr	r3, [pc, #44]	; (8005440 <HAL_RCC_OscConfig+0x240>)
 8005414:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005416:	f003 0302 	and.w	r3, r3, #2
 800541a:	2b00      	cmp	r3, #0
 800541c:	d0f0      	beq.n	8005400 <HAL_RCC_OscConfig+0x200>
 800541e:	e01b      	b.n	8005458 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005420:	4b09      	ldr	r3, [pc, #36]	; (8005448 <HAL_RCC_OscConfig+0x248>)
 8005422:	2200      	movs	r2, #0
 8005424:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005426:	f7ff f831 	bl	800448c <HAL_GetTick>
 800542a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800542c:	e00e      	b.n	800544c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800542e:	f7ff f82d 	bl	800448c <HAL_GetTick>
 8005432:	4602      	mov	r2, r0
 8005434:	693b      	ldr	r3, [r7, #16]
 8005436:	1ad3      	subs	r3, r2, r3
 8005438:	2b02      	cmp	r3, #2
 800543a:	d907      	bls.n	800544c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 800543c:	2303      	movs	r3, #3
 800543e:	e150      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
 8005440:	40023800 	.word	0x40023800
 8005444:	42470000 	.word	0x42470000
 8005448:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800544c:	4b88      	ldr	r3, [pc, #544]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800544e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005450:	f003 0302 	and.w	r3, r3, #2
 8005454:	2b00      	cmp	r3, #0
 8005456:	d1ea      	bne.n	800542e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	681b      	ldr	r3, [r3, #0]
 800545c:	f003 0304 	and.w	r3, r3, #4
 8005460:	2b00      	cmp	r3, #0
 8005462:	f000 8097 	beq.w	8005594 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005466:	2300      	movs	r3, #0
 8005468:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800546a:	4b81      	ldr	r3, [pc, #516]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800546c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800546e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005472:	2b00      	cmp	r3, #0
 8005474:	d10f      	bne.n	8005496 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005476:	2300      	movs	r3, #0
 8005478:	60bb      	str	r3, [r7, #8]
 800547a:	4b7d      	ldr	r3, [pc, #500]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800547c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800547e:	4a7c      	ldr	r2, [pc, #496]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005480:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005484:	6413      	str	r3, [r2, #64]	; 0x40
 8005486:	4b7a      	ldr	r3, [pc, #488]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005488:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800548a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800548e:	60bb      	str	r3, [r7, #8]
 8005490:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005492:	2301      	movs	r3, #1
 8005494:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005496:	4b77      	ldr	r3, [pc, #476]	; (8005674 <HAL_RCC_OscConfig+0x474>)
 8005498:	681b      	ldr	r3, [r3, #0]
 800549a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d118      	bne.n	80054d4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80054a2:	4b74      	ldr	r3, [pc, #464]	; (8005674 <HAL_RCC_OscConfig+0x474>)
 80054a4:	681b      	ldr	r3, [r3, #0]
 80054a6:	4a73      	ldr	r2, [pc, #460]	; (8005674 <HAL_RCC_OscConfig+0x474>)
 80054a8:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80054ac:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80054ae:	f7fe ffed 	bl	800448c <HAL_GetTick>
 80054b2:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054b4:	e008      	b.n	80054c8 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80054b6:	f7fe ffe9 	bl	800448c <HAL_GetTick>
 80054ba:	4602      	mov	r2, r0
 80054bc:	693b      	ldr	r3, [r7, #16]
 80054be:	1ad3      	subs	r3, r2, r3
 80054c0:	2b02      	cmp	r3, #2
 80054c2:	d901      	bls.n	80054c8 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80054c4:	2303      	movs	r3, #3
 80054c6:	e10c      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80054c8:	4b6a      	ldr	r3, [pc, #424]	; (8005674 <HAL_RCC_OscConfig+0x474>)
 80054ca:	681b      	ldr	r3, [r3, #0]
 80054cc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80054d0:	2b00      	cmp	r3, #0
 80054d2:	d0f0      	beq.n	80054b6 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80054d4:	687b      	ldr	r3, [r7, #4]
 80054d6:	689b      	ldr	r3, [r3, #8]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d106      	bne.n	80054ea <HAL_RCC_OscConfig+0x2ea>
 80054dc:	4b64      	ldr	r3, [pc, #400]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80054de:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054e0:	4a63      	ldr	r2, [pc, #396]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80054e2:	f043 0301 	orr.w	r3, r3, #1
 80054e6:	6713      	str	r3, [r2, #112]	; 0x70
 80054e8:	e01c      	b.n	8005524 <HAL_RCC_OscConfig+0x324>
 80054ea:	687b      	ldr	r3, [r7, #4]
 80054ec:	689b      	ldr	r3, [r3, #8]
 80054ee:	2b05      	cmp	r3, #5
 80054f0:	d10c      	bne.n	800550c <HAL_RCC_OscConfig+0x30c>
 80054f2:	4b5f      	ldr	r3, [pc, #380]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80054f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80054f6:	4a5e      	ldr	r2, [pc, #376]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80054f8:	f043 0304 	orr.w	r3, r3, #4
 80054fc:	6713      	str	r3, [r2, #112]	; 0x70
 80054fe:	4b5c      	ldr	r3, [pc, #368]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005500:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005502:	4a5b      	ldr	r2, [pc, #364]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005504:	f043 0301 	orr.w	r3, r3, #1
 8005508:	6713      	str	r3, [r2, #112]	; 0x70
 800550a:	e00b      	b.n	8005524 <HAL_RCC_OscConfig+0x324>
 800550c:	4b58      	ldr	r3, [pc, #352]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800550e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005510:	4a57      	ldr	r2, [pc, #348]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005512:	f023 0301 	bic.w	r3, r3, #1
 8005516:	6713      	str	r3, [r2, #112]	; 0x70
 8005518:	4b55      	ldr	r3, [pc, #340]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800551a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800551c:	4a54      	ldr	r2, [pc, #336]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800551e:	f023 0304 	bic.w	r3, r3, #4
 8005522:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005524:	687b      	ldr	r3, [r7, #4]
 8005526:	689b      	ldr	r3, [r3, #8]
 8005528:	2b00      	cmp	r3, #0
 800552a:	d015      	beq.n	8005558 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800552c:	f7fe ffae 	bl	800448c <HAL_GetTick>
 8005530:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005532:	e00a      	b.n	800554a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005534:	f7fe ffaa 	bl	800448c <HAL_GetTick>
 8005538:	4602      	mov	r2, r0
 800553a:	693b      	ldr	r3, [r7, #16]
 800553c:	1ad3      	subs	r3, r2, r3
 800553e:	f241 3288 	movw	r2, #5000	; 0x1388
 8005542:	4293      	cmp	r3, r2
 8005544:	d901      	bls.n	800554a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8005546:	2303      	movs	r3, #3
 8005548:	e0cb      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800554a:	4b49      	ldr	r3, [pc, #292]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800554c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800554e:	f003 0302 	and.w	r3, r3, #2
 8005552:	2b00      	cmp	r3, #0
 8005554:	d0ee      	beq.n	8005534 <HAL_RCC_OscConfig+0x334>
 8005556:	e014      	b.n	8005582 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005558:	f7fe ff98 	bl	800448c <HAL_GetTick>
 800555c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800555e:	e00a      	b.n	8005576 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005560:	f7fe ff94 	bl	800448c <HAL_GetTick>
 8005564:	4602      	mov	r2, r0
 8005566:	693b      	ldr	r3, [r7, #16]
 8005568:	1ad3      	subs	r3, r2, r3
 800556a:	f241 3288 	movw	r2, #5000	; 0x1388
 800556e:	4293      	cmp	r3, r2
 8005570:	d901      	bls.n	8005576 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8005572:	2303      	movs	r3, #3
 8005574:	e0b5      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005576:	4b3e      	ldr	r3, [pc, #248]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005578:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800557a:	f003 0302 	and.w	r3, r3, #2
 800557e:	2b00      	cmp	r3, #0
 8005580:	d1ee      	bne.n	8005560 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005582:	7dfb      	ldrb	r3, [r7, #23]
 8005584:	2b01      	cmp	r3, #1
 8005586:	d105      	bne.n	8005594 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005588:	4b39      	ldr	r3, [pc, #228]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800558a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800558c:	4a38      	ldr	r2, [pc, #224]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800558e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005592:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	699b      	ldr	r3, [r3, #24]
 8005598:	2b00      	cmp	r3, #0
 800559a:	f000 80a1 	beq.w	80056e0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800559e:	4b34      	ldr	r3, [pc, #208]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80055a0:	689b      	ldr	r3, [r3, #8]
 80055a2:	f003 030c 	and.w	r3, r3, #12
 80055a6:	2b08      	cmp	r3, #8
 80055a8:	d05c      	beq.n	8005664 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	699b      	ldr	r3, [r3, #24]
 80055ae:	2b02      	cmp	r3, #2
 80055b0:	d141      	bne.n	8005636 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80055b2:	4b31      	ldr	r3, [pc, #196]	; (8005678 <HAL_RCC_OscConfig+0x478>)
 80055b4:	2200      	movs	r2, #0
 80055b6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80055b8:	f7fe ff68 	bl	800448c <HAL_GetTick>
 80055bc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055be:	e008      	b.n	80055d2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80055c0:	f7fe ff64 	bl	800448c <HAL_GetTick>
 80055c4:	4602      	mov	r2, r0
 80055c6:	693b      	ldr	r3, [r7, #16]
 80055c8:	1ad3      	subs	r3, r2, r3
 80055ca:	2b02      	cmp	r3, #2
 80055cc:	d901      	bls.n	80055d2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80055ce:	2303      	movs	r3, #3
 80055d0:	e087      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055d2:	4b27      	ldr	r3, [pc, #156]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80055da:	2b00      	cmp	r3, #0
 80055dc:	d1f0      	bne.n	80055c0 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80055de:	687b      	ldr	r3, [r7, #4]
 80055e0:	69da      	ldr	r2, [r3, #28]
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	6a1b      	ldr	r3, [r3, #32]
 80055e6:	431a      	orrs	r2, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ec:	019b      	lsls	r3, r3, #6
 80055ee:	431a      	orrs	r2, r3
 80055f0:	687b      	ldr	r3, [r7, #4]
 80055f2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80055f4:	085b      	lsrs	r3, r3, #1
 80055f6:	3b01      	subs	r3, #1
 80055f8:	041b      	lsls	r3, r3, #16
 80055fa:	431a      	orrs	r2, r3
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005600:	061b      	lsls	r3, r3, #24
 8005602:	491b      	ldr	r1, [pc, #108]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005604:	4313      	orrs	r3, r2
 8005606:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8005608:	4b1b      	ldr	r3, [pc, #108]	; (8005678 <HAL_RCC_OscConfig+0x478>)
 800560a:	2201      	movs	r2, #1
 800560c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800560e:	f7fe ff3d 	bl	800448c <HAL_GetTick>
 8005612:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005614:	e008      	b.n	8005628 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005616:	f7fe ff39 	bl	800448c <HAL_GetTick>
 800561a:	4602      	mov	r2, r0
 800561c:	693b      	ldr	r3, [r7, #16]
 800561e:	1ad3      	subs	r3, r2, r3
 8005620:	2b02      	cmp	r3, #2
 8005622:	d901      	bls.n	8005628 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005624:	2303      	movs	r3, #3
 8005626:	e05c      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005628:	4b11      	ldr	r3, [pc, #68]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 800562a:	681b      	ldr	r3, [r3, #0]
 800562c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005630:	2b00      	cmp	r3, #0
 8005632:	d0f0      	beq.n	8005616 <HAL_RCC_OscConfig+0x416>
 8005634:	e054      	b.n	80056e0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005636:	4b10      	ldr	r3, [pc, #64]	; (8005678 <HAL_RCC_OscConfig+0x478>)
 8005638:	2200      	movs	r2, #0
 800563a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800563c:	f7fe ff26 	bl	800448c <HAL_GetTick>
 8005640:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005642:	e008      	b.n	8005656 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005644:	f7fe ff22 	bl	800448c <HAL_GetTick>
 8005648:	4602      	mov	r2, r0
 800564a:	693b      	ldr	r3, [r7, #16]
 800564c:	1ad3      	subs	r3, r2, r3
 800564e:	2b02      	cmp	r3, #2
 8005650:	d901      	bls.n	8005656 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8005652:	2303      	movs	r3, #3
 8005654:	e045      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005656:	4b06      	ldr	r3, [pc, #24]	; (8005670 <HAL_RCC_OscConfig+0x470>)
 8005658:	681b      	ldr	r3, [r3, #0]
 800565a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800565e:	2b00      	cmp	r3, #0
 8005660:	d1f0      	bne.n	8005644 <HAL_RCC_OscConfig+0x444>
 8005662:	e03d      	b.n	80056e0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	699b      	ldr	r3, [r3, #24]
 8005668:	2b01      	cmp	r3, #1
 800566a:	d107      	bne.n	800567c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 800566c:	2301      	movs	r3, #1
 800566e:	e038      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
 8005670:	40023800 	.word	0x40023800
 8005674:	40007000 	.word	0x40007000
 8005678:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800567c:	4b1b      	ldr	r3, [pc, #108]	; (80056ec <HAL_RCC_OscConfig+0x4ec>)
 800567e:	685b      	ldr	r3, [r3, #4]
 8005680:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	699b      	ldr	r3, [r3, #24]
 8005686:	2b01      	cmp	r3, #1
 8005688:	d028      	beq.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800568a:	68fb      	ldr	r3, [r7, #12]
 800568c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8005694:	429a      	cmp	r2, r3
 8005696:	d121      	bne.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005698:	68fb      	ldr	r3, [r7, #12]
 800569a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80056a2:	429a      	cmp	r2, r3
 80056a4:	d11a      	bne.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056a6:	68fa      	ldr	r2, [r7, #12]
 80056a8:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80056ac:	4013      	ands	r3, r2
 80056ae:	687a      	ldr	r2, [r7, #4]
 80056b0:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80056b2:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80056b4:	4293      	cmp	r3, r2
 80056b6:	d111      	bne.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056b8:	68fb      	ldr	r3, [r7, #12]
 80056ba:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80056c2:	085b      	lsrs	r3, r3, #1
 80056c4:	3b01      	subs	r3, #1
 80056c6:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80056c8:	429a      	cmp	r2, r3
 80056ca:	d107      	bne.n	80056dc <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80056cc:	68fb      	ldr	r3, [r7, #12]
 80056ce:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056d6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80056d8:	429a      	cmp	r2, r3
 80056da:	d001      	beq.n	80056e0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80056dc:	2301      	movs	r3, #1
 80056de:	e000      	b.n	80056e2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80056e0:	2300      	movs	r3, #0
}
 80056e2:	4618      	mov	r0, r3
 80056e4:	3718      	adds	r7, #24
 80056e6:	46bd      	mov	sp, r7
 80056e8:	bd80      	pop	{r7, pc}
 80056ea:	bf00      	nop
 80056ec:	40023800 	.word	0x40023800

080056f0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80056f0:	b580      	push	{r7, lr}
 80056f2:	b084      	sub	sp, #16
 80056f4:	af00      	add	r7, sp, #0
 80056f6:	6078      	str	r0, [r7, #4]
 80056f8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d101      	bne.n	8005704 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005700:	2301      	movs	r3, #1
 8005702:	e0cc      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005704:	4b68      	ldr	r3, [pc, #416]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005706:	681b      	ldr	r3, [r3, #0]
 8005708:	f003 0307 	and.w	r3, r3, #7
 800570c:	683a      	ldr	r2, [r7, #0]
 800570e:	429a      	cmp	r2, r3
 8005710:	d90c      	bls.n	800572c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005712:	4b65      	ldr	r3, [pc, #404]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005714:	683a      	ldr	r2, [r7, #0]
 8005716:	b2d2      	uxtb	r2, r2
 8005718:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800571a:	4b63      	ldr	r3, [pc, #396]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 800571c:	681b      	ldr	r3, [r3, #0]
 800571e:	f003 0307 	and.w	r3, r3, #7
 8005722:	683a      	ldr	r2, [r7, #0]
 8005724:	429a      	cmp	r2, r3
 8005726:	d001      	beq.n	800572c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005728:	2301      	movs	r3, #1
 800572a:	e0b8      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800572c:	687b      	ldr	r3, [r7, #4]
 800572e:	681b      	ldr	r3, [r3, #0]
 8005730:	f003 0302 	and.w	r3, r3, #2
 8005734:	2b00      	cmp	r3, #0
 8005736:	d020      	beq.n	800577a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005738:	687b      	ldr	r3, [r7, #4]
 800573a:	681b      	ldr	r3, [r3, #0]
 800573c:	f003 0304 	and.w	r3, r3, #4
 8005740:	2b00      	cmp	r3, #0
 8005742:	d005      	beq.n	8005750 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005744:	4b59      	ldr	r3, [pc, #356]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005746:	689b      	ldr	r3, [r3, #8]
 8005748:	4a58      	ldr	r2, [pc, #352]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 800574a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800574e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005750:	687b      	ldr	r3, [r7, #4]
 8005752:	681b      	ldr	r3, [r3, #0]
 8005754:	f003 0308 	and.w	r3, r3, #8
 8005758:	2b00      	cmp	r3, #0
 800575a:	d005      	beq.n	8005768 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800575c:	4b53      	ldr	r3, [pc, #332]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 800575e:	689b      	ldr	r3, [r3, #8]
 8005760:	4a52      	ldr	r2, [pc, #328]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005762:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8005766:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005768:	4b50      	ldr	r3, [pc, #320]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 800576a:	689b      	ldr	r3, [r3, #8]
 800576c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	689b      	ldr	r3, [r3, #8]
 8005774:	494d      	ldr	r1, [pc, #308]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005776:	4313      	orrs	r3, r2
 8005778:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0301 	and.w	r3, r3, #1
 8005782:	2b00      	cmp	r3, #0
 8005784:	d044      	beq.n	8005810 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8005786:	687b      	ldr	r3, [r7, #4]
 8005788:	685b      	ldr	r3, [r3, #4]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d107      	bne.n	800579e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800578e:	4b47      	ldr	r3, [pc, #284]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005790:	681b      	ldr	r3, [r3, #0]
 8005792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005796:	2b00      	cmp	r3, #0
 8005798:	d119      	bne.n	80057ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800579a:	2301      	movs	r3, #1
 800579c:	e07f      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800579e:	687b      	ldr	r3, [r7, #4]
 80057a0:	685b      	ldr	r3, [r3, #4]
 80057a2:	2b02      	cmp	r3, #2
 80057a4:	d003      	beq.n	80057ae <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80057a6:	687b      	ldr	r3, [r7, #4]
 80057a8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80057aa:	2b03      	cmp	r3, #3
 80057ac:	d107      	bne.n	80057be <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80057ae:	4b3f      	ldr	r3, [pc, #252]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80057b6:	2b00      	cmp	r3, #0
 80057b8:	d109      	bne.n	80057ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ba:	2301      	movs	r3, #1
 80057bc:	e06f      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80057be:	4b3b      	ldr	r3, [pc, #236]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f003 0302 	and.w	r3, r3, #2
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d101      	bne.n	80057ce <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80057ca:	2301      	movs	r3, #1
 80057cc:	e067      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80057ce:	4b37      	ldr	r3, [pc, #220]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 80057d0:	689b      	ldr	r3, [r3, #8]
 80057d2:	f023 0203 	bic.w	r2, r3, #3
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	685b      	ldr	r3, [r3, #4]
 80057da:	4934      	ldr	r1, [pc, #208]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 80057dc:	4313      	orrs	r3, r2
 80057de:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80057e0:	f7fe fe54 	bl	800448c <HAL_GetTick>
 80057e4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057e6:	e00a      	b.n	80057fe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80057e8:	f7fe fe50 	bl	800448c <HAL_GetTick>
 80057ec:	4602      	mov	r2, r0
 80057ee:	68fb      	ldr	r3, [r7, #12]
 80057f0:	1ad3      	subs	r3, r2, r3
 80057f2:	f241 3288 	movw	r2, #5000	; 0x1388
 80057f6:	4293      	cmp	r3, r2
 80057f8:	d901      	bls.n	80057fe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80057fa:	2303      	movs	r3, #3
 80057fc:	e04f      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80057fe:	4b2b      	ldr	r3, [pc, #172]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005800:	689b      	ldr	r3, [r3, #8]
 8005802:	f003 020c 	and.w	r2, r3, #12
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	685b      	ldr	r3, [r3, #4]
 800580a:	009b      	lsls	r3, r3, #2
 800580c:	429a      	cmp	r2, r3
 800580e:	d1eb      	bne.n	80057e8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005810:	4b25      	ldr	r3, [pc, #148]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f003 0307 	and.w	r3, r3, #7
 8005818:	683a      	ldr	r2, [r7, #0]
 800581a:	429a      	cmp	r2, r3
 800581c:	d20c      	bcs.n	8005838 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800581e:	4b22      	ldr	r3, [pc, #136]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005820:	683a      	ldr	r2, [r7, #0]
 8005822:	b2d2      	uxtb	r2, r2
 8005824:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005826:	4b20      	ldr	r3, [pc, #128]	; (80058a8 <HAL_RCC_ClockConfig+0x1b8>)
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	f003 0307 	and.w	r3, r3, #7
 800582e:	683a      	ldr	r2, [r7, #0]
 8005830:	429a      	cmp	r2, r3
 8005832:	d001      	beq.n	8005838 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005834:	2301      	movs	r3, #1
 8005836:	e032      	b.n	800589e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f003 0304 	and.w	r3, r3, #4
 8005840:	2b00      	cmp	r3, #0
 8005842:	d008      	beq.n	8005856 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005844:	4b19      	ldr	r3, [pc, #100]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005846:	689b      	ldr	r3, [r3, #8]
 8005848:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800584c:	687b      	ldr	r3, [r7, #4]
 800584e:	68db      	ldr	r3, [r3, #12]
 8005850:	4916      	ldr	r1, [pc, #88]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005852:	4313      	orrs	r3, r2
 8005854:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005856:	687b      	ldr	r3, [r7, #4]
 8005858:	681b      	ldr	r3, [r3, #0]
 800585a:	f003 0308 	and.w	r3, r3, #8
 800585e:	2b00      	cmp	r3, #0
 8005860:	d009      	beq.n	8005876 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8005862:	4b12      	ldr	r3, [pc, #72]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005864:	689b      	ldr	r3, [r3, #8]
 8005866:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	691b      	ldr	r3, [r3, #16]
 800586e:	00db      	lsls	r3, r3, #3
 8005870:	490e      	ldr	r1, [pc, #56]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 8005872:	4313      	orrs	r3, r2
 8005874:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8005876:	f000 f821 	bl	80058bc <HAL_RCC_GetSysClockFreq>
 800587a:	4602      	mov	r2, r0
 800587c:	4b0b      	ldr	r3, [pc, #44]	; (80058ac <HAL_RCC_ClockConfig+0x1bc>)
 800587e:	689b      	ldr	r3, [r3, #8]
 8005880:	091b      	lsrs	r3, r3, #4
 8005882:	f003 030f 	and.w	r3, r3, #15
 8005886:	490a      	ldr	r1, [pc, #40]	; (80058b0 <HAL_RCC_ClockConfig+0x1c0>)
 8005888:	5ccb      	ldrb	r3, [r1, r3]
 800588a:	fa22 f303 	lsr.w	r3, r2, r3
 800588e:	4a09      	ldr	r2, [pc, #36]	; (80058b4 <HAL_RCC_ClockConfig+0x1c4>)
 8005890:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8005892:	4b09      	ldr	r3, [pc, #36]	; (80058b8 <HAL_RCC_ClockConfig+0x1c8>)
 8005894:	681b      	ldr	r3, [r3, #0]
 8005896:	4618      	mov	r0, r3
 8005898:	f7fe fdb4 	bl	8004404 <HAL_InitTick>

  return HAL_OK;
 800589c:	2300      	movs	r3, #0
}
 800589e:	4618      	mov	r0, r3
 80058a0:	3710      	adds	r7, #16
 80058a2:	46bd      	mov	sp, r7
 80058a4:	bd80      	pop	{r7, pc}
 80058a6:	bf00      	nop
 80058a8:	40023c00 	.word	0x40023c00
 80058ac:	40023800 	.word	0x40023800
 80058b0:	0800c464 	.word	0x0800c464
 80058b4:	20000010 	.word	0x20000010
 80058b8:	20000014 	.word	0x20000014

080058bc <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80058bc:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80058c0:	b090      	sub	sp, #64	; 0x40
 80058c2:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80058c4:	2300      	movs	r3, #0
 80058c6:	637b      	str	r3, [r7, #52]	; 0x34
 80058c8:	2300      	movs	r3, #0
 80058ca:	63fb      	str	r3, [r7, #60]	; 0x3c
 80058cc:	2300      	movs	r3, #0
 80058ce:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80058d0:	2300      	movs	r3, #0
 80058d2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80058d4:	4b59      	ldr	r3, [pc, #356]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80058d6:	689b      	ldr	r3, [r3, #8]
 80058d8:	f003 030c 	and.w	r3, r3, #12
 80058dc:	2b08      	cmp	r3, #8
 80058de:	d00d      	beq.n	80058fc <HAL_RCC_GetSysClockFreq+0x40>
 80058e0:	2b08      	cmp	r3, #8
 80058e2:	f200 80a1 	bhi.w	8005a28 <HAL_RCC_GetSysClockFreq+0x16c>
 80058e6:	2b00      	cmp	r3, #0
 80058e8:	d002      	beq.n	80058f0 <HAL_RCC_GetSysClockFreq+0x34>
 80058ea:	2b04      	cmp	r3, #4
 80058ec:	d003      	beq.n	80058f6 <HAL_RCC_GetSysClockFreq+0x3a>
 80058ee:	e09b      	b.n	8005a28 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80058f0:	4b53      	ldr	r3, [pc, #332]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x184>)
 80058f2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80058f4:	e09b      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80058f6:	4b53      	ldr	r3, [pc, #332]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x188>)
 80058f8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80058fa:	e098      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80058fc:	4b4f      	ldr	r3, [pc, #316]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x180>)
 80058fe:	685b      	ldr	r3, [r3, #4]
 8005900:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005904:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005906:	4b4d      	ldr	r3, [pc, #308]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005908:	685b      	ldr	r3, [r3, #4]
 800590a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800590e:	2b00      	cmp	r3, #0
 8005910:	d028      	beq.n	8005964 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005912:	4b4a      	ldr	r3, [pc, #296]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005914:	685b      	ldr	r3, [r3, #4]
 8005916:	099b      	lsrs	r3, r3, #6
 8005918:	2200      	movs	r2, #0
 800591a:	623b      	str	r3, [r7, #32]
 800591c:	627a      	str	r2, [r7, #36]	; 0x24
 800591e:	6a3b      	ldr	r3, [r7, #32]
 8005920:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8005924:	2100      	movs	r1, #0
 8005926:	4b47      	ldr	r3, [pc, #284]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8005928:	fb03 f201 	mul.w	r2, r3, r1
 800592c:	2300      	movs	r3, #0
 800592e:	fb00 f303 	mul.w	r3, r0, r3
 8005932:	4413      	add	r3, r2
 8005934:	4a43      	ldr	r2, [pc, #268]	; (8005a44 <HAL_RCC_GetSysClockFreq+0x188>)
 8005936:	fba0 1202 	umull	r1, r2, r0, r2
 800593a:	62fa      	str	r2, [r7, #44]	; 0x2c
 800593c:	460a      	mov	r2, r1
 800593e:	62ba      	str	r2, [r7, #40]	; 0x28
 8005940:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8005942:	4413      	add	r3, r2
 8005944:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005946:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005948:	2200      	movs	r2, #0
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	61fa      	str	r2, [r7, #28]
 800594e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005952:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8005956:	f7fb f997 	bl	8000c88 <__aeabi_uldivmod>
 800595a:	4602      	mov	r2, r0
 800595c:	460b      	mov	r3, r1
 800595e:	4613      	mov	r3, r2
 8005960:	63fb      	str	r3, [r7, #60]	; 0x3c
 8005962:	e053      	b.n	8005a0c <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005964:	4b35      	ldr	r3, [pc, #212]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005966:	685b      	ldr	r3, [r3, #4]
 8005968:	099b      	lsrs	r3, r3, #6
 800596a:	2200      	movs	r2, #0
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	617a      	str	r2, [r7, #20]
 8005970:	693b      	ldr	r3, [r7, #16]
 8005972:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8005976:	f04f 0b00 	mov.w	fp, #0
 800597a:	4652      	mov	r2, sl
 800597c:	465b      	mov	r3, fp
 800597e:	f04f 0000 	mov.w	r0, #0
 8005982:	f04f 0100 	mov.w	r1, #0
 8005986:	0159      	lsls	r1, r3, #5
 8005988:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800598c:	0150      	lsls	r0, r2, #5
 800598e:	4602      	mov	r2, r0
 8005990:	460b      	mov	r3, r1
 8005992:	ebb2 080a 	subs.w	r8, r2, sl
 8005996:	eb63 090b 	sbc.w	r9, r3, fp
 800599a:	f04f 0200 	mov.w	r2, #0
 800599e:	f04f 0300 	mov.w	r3, #0
 80059a2:	ea4f 1389 	mov.w	r3, r9, lsl #6
 80059a6:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 80059aa:	ea4f 1288 	mov.w	r2, r8, lsl #6
 80059ae:	ebb2 0408 	subs.w	r4, r2, r8
 80059b2:	eb63 0509 	sbc.w	r5, r3, r9
 80059b6:	f04f 0200 	mov.w	r2, #0
 80059ba:	f04f 0300 	mov.w	r3, #0
 80059be:	00eb      	lsls	r3, r5, #3
 80059c0:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80059c4:	00e2      	lsls	r2, r4, #3
 80059c6:	4614      	mov	r4, r2
 80059c8:	461d      	mov	r5, r3
 80059ca:	eb14 030a 	adds.w	r3, r4, sl
 80059ce:	603b      	str	r3, [r7, #0]
 80059d0:	eb45 030b 	adc.w	r3, r5, fp
 80059d4:	607b      	str	r3, [r7, #4]
 80059d6:	f04f 0200 	mov.w	r2, #0
 80059da:	f04f 0300 	mov.w	r3, #0
 80059de:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059e2:	4629      	mov	r1, r5
 80059e4:	028b      	lsls	r3, r1, #10
 80059e6:	4621      	mov	r1, r4
 80059e8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059ec:	4621      	mov	r1, r4
 80059ee:	028a      	lsls	r2, r1, #10
 80059f0:	4610      	mov	r0, r2
 80059f2:	4619      	mov	r1, r3
 80059f4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80059f6:	2200      	movs	r2, #0
 80059f8:	60bb      	str	r3, [r7, #8]
 80059fa:	60fa      	str	r2, [r7, #12]
 80059fc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005a00:	f7fb f942 	bl	8000c88 <__aeabi_uldivmod>
 8005a04:	4602      	mov	r2, r0
 8005a06:	460b      	mov	r3, r1
 8005a08:	4613      	mov	r3, r2
 8005a0a:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005a0c:	4b0b      	ldr	r3, [pc, #44]	; (8005a3c <HAL_RCC_GetSysClockFreq+0x180>)
 8005a0e:	685b      	ldr	r3, [r3, #4]
 8005a10:	0c1b      	lsrs	r3, r3, #16
 8005a12:	f003 0303 	and.w	r3, r3, #3
 8005a16:	3301      	adds	r3, #1
 8005a18:	005b      	lsls	r3, r3, #1
 8005a1a:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8005a1c:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8005a1e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a20:	fbb2 f3f3 	udiv	r3, r2, r3
 8005a24:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a26:	e002      	b.n	8005a2e <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005a28:	4b05      	ldr	r3, [pc, #20]	; (8005a40 <HAL_RCC_GetSysClockFreq+0x184>)
 8005a2a:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8005a2c:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a2e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8005a30:	4618      	mov	r0, r3
 8005a32:	3740      	adds	r7, #64	; 0x40
 8005a34:	46bd      	mov	sp, r7
 8005a36:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a3a:	bf00      	nop
 8005a3c:	40023800 	.word	0x40023800
 8005a40:	00f42400 	.word	0x00f42400
 8005a44:	00b71b00 	.word	0x00b71b00

08005a48 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a48:	b480      	push	{r7}
 8005a4a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a4c:	4b03      	ldr	r3, [pc, #12]	; (8005a5c <HAL_RCC_GetHCLKFreq+0x14>)
 8005a4e:	681b      	ldr	r3, [r3, #0]
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	46bd      	mov	sp, r7
 8005a54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a58:	4770      	bx	lr
 8005a5a:	bf00      	nop
 8005a5c:	20000010 	.word	0x20000010

08005a60 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a60:	b580      	push	{r7, lr}
 8005a62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005a64:	f7ff fff0 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a68:	4602      	mov	r2, r0
 8005a6a:	4b05      	ldr	r3, [pc, #20]	; (8005a80 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a6c:	689b      	ldr	r3, [r3, #8]
 8005a6e:	0a9b      	lsrs	r3, r3, #10
 8005a70:	f003 0307 	and.w	r3, r3, #7
 8005a74:	4903      	ldr	r1, [pc, #12]	; (8005a84 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a76:	5ccb      	ldrb	r3, [r1, r3]
 8005a78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a7c:	4618      	mov	r0, r3
 8005a7e:	bd80      	pop	{r7, pc}
 8005a80:	40023800 	.word	0x40023800
 8005a84:	0800c474 	.word	0x0800c474

08005a88 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a88:	b580      	push	{r7, lr}
 8005a8a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005a8c:	f7ff ffdc 	bl	8005a48 <HAL_RCC_GetHCLKFreq>
 8005a90:	4602      	mov	r2, r0
 8005a92:	4b05      	ldr	r3, [pc, #20]	; (8005aa8 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a94:	689b      	ldr	r3, [r3, #8]
 8005a96:	0b5b      	lsrs	r3, r3, #13
 8005a98:	f003 0307 	and.w	r3, r3, #7
 8005a9c:	4903      	ldr	r1, [pc, #12]	; (8005aac <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a9e:	5ccb      	ldrb	r3, [r1, r3]
 8005aa0:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005aa4:	4618      	mov	r0, r3
 8005aa6:	bd80      	pop	{r7, pc}
 8005aa8:	40023800 	.word	0x40023800
 8005aac:	0800c474 	.word	0x0800c474

08005ab0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005ab0:	b580      	push	{r7, lr}
 8005ab2:	b082      	sub	sp, #8
 8005ab4:	af00      	add	r7, sp, #0
 8005ab6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	2b00      	cmp	r3, #0
 8005abc:	d101      	bne.n	8005ac2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005abe:	2301      	movs	r3, #1
 8005ac0:	e041      	b.n	8005b46 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fe fa00 	bl	8003edc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	3304      	adds	r3, #4
 8005aec:	4619      	mov	r1, r3
 8005aee:	4610      	mov	r0, r2
 8005af0:	f000 fbba 	bl	8006268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	2201      	movs	r2, #1
 8005af8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	2201      	movs	r2, #1
 8005b00:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	2201      	movs	r2, #1
 8005b08:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	2201      	movs	r2, #1
 8005b10:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	2201      	movs	r2, #1
 8005b18:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	2201      	movs	r2, #1
 8005b20:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	2201      	movs	r2, #1
 8005b28:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005b2c:	687b      	ldr	r3, [r7, #4]
 8005b2e:	2201      	movs	r2, #1
 8005b30:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	2201      	movs	r2, #1
 8005b38:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	2201      	movs	r2, #1
 8005b40:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005b44:	2300      	movs	r3, #0
}
 8005b46:	4618      	mov	r0, r3
 8005b48:	3708      	adds	r7, #8
 8005b4a:	46bd      	mov	sp, r7
 8005b4c:	bd80      	pop	{r7, pc}
	...

08005b50 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005b50:	b480      	push	{r7}
 8005b52:	b085      	sub	sp, #20
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b5e:	b2db      	uxtb	r3, r3
 8005b60:	2b01      	cmp	r3, #1
 8005b62:	d001      	beq.n	8005b68 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005b64:	2301      	movs	r3, #1
 8005b66:	e04e      	b.n	8005c06 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b68:	687b      	ldr	r3, [r7, #4]
 8005b6a:	2202      	movs	r2, #2
 8005b6c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0201 	orr.w	r2, r2, #1
 8005b7e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005b80:	687b      	ldr	r3, [r7, #4]
 8005b82:	681b      	ldr	r3, [r3, #0]
 8005b84:	4a23      	ldr	r2, [pc, #140]	; (8005c14 <HAL_TIM_Base_Start_IT+0xc4>)
 8005b86:	4293      	cmp	r3, r2
 8005b88:	d022      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005b8a:	687b      	ldr	r3, [r7, #4]
 8005b8c:	681b      	ldr	r3, [r3, #0]
 8005b8e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005b92:	d01d      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	4a1f      	ldr	r2, [pc, #124]	; (8005c18 <HAL_TIM_Base_Start_IT+0xc8>)
 8005b9a:	4293      	cmp	r3, r2
 8005b9c:	d018      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	4a1e      	ldr	r2, [pc, #120]	; (8005c1c <HAL_TIM_Base_Start_IT+0xcc>)
 8005ba4:	4293      	cmp	r3, r2
 8005ba6:	d013      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	681b      	ldr	r3, [r3, #0]
 8005bac:	4a1c      	ldr	r2, [pc, #112]	; (8005c20 <HAL_TIM_Base_Start_IT+0xd0>)
 8005bae:	4293      	cmp	r3, r2
 8005bb0:	d00e      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	4a1b      	ldr	r2, [pc, #108]	; (8005c24 <HAL_TIM_Base_Start_IT+0xd4>)
 8005bb8:	4293      	cmp	r3, r2
 8005bba:	d009      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	4a19      	ldr	r2, [pc, #100]	; (8005c28 <HAL_TIM_Base_Start_IT+0xd8>)
 8005bc2:	4293      	cmp	r3, r2
 8005bc4:	d004      	beq.n	8005bd0 <HAL_TIM_Base_Start_IT+0x80>
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	681b      	ldr	r3, [r3, #0]
 8005bca:	4a18      	ldr	r2, [pc, #96]	; (8005c2c <HAL_TIM_Base_Start_IT+0xdc>)
 8005bcc:	4293      	cmp	r3, r2
 8005bce:	d111      	bne.n	8005bf4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	689b      	ldr	r3, [r3, #8]
 8005bd6:	f003 0307 	and.w	r3, r3, #7
 8005bda:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bdc:	68fb      	ldr	r3, [r7, #12]
 8005bde:	2b06      	cmp	r3, #6
 8005be0:	d010      	beq.n	8005c04 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	681a      	ldr	r2, [r3, #0]
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	681b      	ldr	r3, [r3, #0]
 8005bec:	f042 0201 	orr.w	r2, r2, #1
 8005bf0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005bf2:	e007      	b.n	8005c04 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005bf4:	687b      	ldr	r3, [r7, #4]
 8005bf6:	681b      	ldr	r3, [r3, #0]
 8005bf8:	681a      	ldr	r2, [r3, #0]
 8005bfa:	687b      	ldr	r3, [r7, #4]
 8005bfc:	681b      	ldr	r3, [r3, #0]
 8005bfe:	f042 0201 	orr.w	r2, r2, #1
 8005c02:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005c04:	2300      	movs	r3, #0
}
 8005c06:	4618      	mov	r0, r3
 8005c08:	3714      	adds	r7, #20
 8005c0a:	46bd      	mov	sp, r7
 8005c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c10:	4770      	bx	lr
 8005c12:	bf00      	nop
 8005c14:	40010000 	.word	0x40010000
 8005c18:	40000400 	.word	0x40000400
 8005c1c:	40000800 	.word	0x40000800
 8005c20:	40000c00 	.word	0x40000c00
 8005c24:	40010400 	.word	0x40010400
 8005c28:	40014000 	.word	0x40014000
 8005c2c:	40001800 	.word	0x40001800

08005c30 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8005c30:	b480      	push	{r7}
 8005c32:	b083      	sub	sp, #12
 8005c34:	af00      	add	r7, sp, #0
 8005c36:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8005c38:	687b      	ldr	r3, [r7, #4]
 8005c3a:	681b      	ldr	r3, [r3, #0]
 8005c3c:	68da      	ldr	r2, [r3, #12]
 8005c3e:	687b      	ldr	r3, [r7, #4]
 8005c40:	681b      	ldr	r3, [r3, #0]
 8005c42:	f022 0201 	bic.w	r2, r2, #1
 8005c46:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	6a1a      	ldr	r2, [r3, #32]
 8005c4e:	f241 1311 	movw	r3, #4369	; 0x1111
 8005c52:	4013      	ands	r3, r2
 8005c54:	2b00      	cmp	r3, #0
 8005c56:	d10f      	bne.n	8005c78 <HAL_TIM_Base_Stop_IT+0x48>
 8005c58:	687b      	ldr	r3, [r7, #4]
 8005c5a:	681b      	ldr	r3, [r3, #0]
 8005c5c:	6a1a      	ldr	r2, [r3, #32]
 8005c5e:	f240 4344 	movw	r3, #1092	; 0x444
 8005c62:	4013      	ands	r3, r2
 8005c64:	2b00      	cmp	r3, #0
 8005c66:	d107      	bne.n	8005c78 <HAL_TIM_Base_Stop_IT+0x48>
 8005c68:	687b      	ldr	r3, [r7, #4]
 8005c6a:	681b      	ldr	r3, [r3, #0]
 8005c6c:	681a      	ldr	r2, [r3, #0]
 8005c6e:	687b      	ldr	r3, [r7, #4]
 8005c70:	681b      	ldr	r3, [r3, #0]
 8005c72:	f022 0201 	bic.w	r2, r2, #1
 8005c76:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8005c78:	687b      	ldr	r3, [r7, #4]
 8005c7a:	2201      	movs	r2, #1
 8005c7c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005c80:	2300      	movs	r3, #0
}
 8005c82:	4618      	mov	r0, r3
 8005c84:	370c      	adds	r7, #12
 8005c86:	46bd      	mov	sp, r7
 8005c88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c8c:	4770      	bx	lr

08005c8e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8005c8e:	b580      	push	{r7, lr}
 8005c90:	b082      	sub	sp, #8
 8005c92:	af00      	add	r7, sp, #0
 8005c94:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005c96:	687b      	ldr	r3, [r7, #4]
 8005c98:	2b00      	cmp	r3, #0
 8005c9a:	d101      	bne.n	8005ca0 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8005c9c:	2301      	movs	r3, #1
 8005c9e:	e041      	b.n	8005d24 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ca6:	b2db      	uxtb	r3, r3
 8005ca8:	2b00      	cmp	r3, #0
 8005caa:	d106      	bne.n	8005cba <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	2200      	movs	r2, #0
 8005cb0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8005cb4:	6878      	ldr	r0, [r7, #4]
 8005cb6:	f000 f839 	bl	8005d2c <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005cba:	687b      	ldr	r3, [r7, #4]
 8005cbc:	2202      	movs	r2, #2
 8005cbe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	3304      	adds	r3, #4
 8005cca:	4619      	mov	r1, r3
 8005ccc:	4610      	mov	r0, r2
 8005cce:	f000 facb 	bl	8006268 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	2201      	movs	r2, #1
 8005cd6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	2201      	movs	r2, #1
 8005cde:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ce2:	687b      	ldr	r3, [r7, #4]
 8005ce4:	2201      	movs	r2, #1
 8005ce6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	2201      	movs	r2, #1
 8005cee:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005cf2:	687b      	ldr	r3, [r7, #4]
 8005cf4:	2201      	movs	r2, #1
 8005cf6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2201      	movs	r2, #1
 8005cfe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	2201      	movs	r2, #1
 8005d06:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005d0a:	687b      	ldr	r3, [r7, #4]
 8005d0c:	2201      	movs	r2, #1
 8005d0e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	2201      	movs	r2, #1
 8005d16:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	2201      	movs	r2, #1
 8005d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005d22:	2300      	movs	r3, #0
}
 8005d24:	4618      	mov	r0, r3
 8005d26:	3708      	adds	r7, #8
 8005d28:	46bd      	mov	sp, r7
 8005d2a:	bd80      	pop	{r7, pc}

08005d2c <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8005d2c:	b480      	push	{r7}
 8005d2e:	b083      	sub	sp, #12
 8005d30:	af00      	add	r7, sp, #0
 8005d32:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8005d34:	bf00      	nop
 8005d36:	370c      	adds	r7, #12
 8005d38:	46bd      	mov	sp, r7
 8005d3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d3e:	4770      	bx	lr

08005d40 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005d40:	b580      	push	{r7, lr}
 8005d42:	b082      	sub	sp, #8
 8005d44:	af00      	add	r7, sp, #0
 8005d46:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005d48:	687b      	ldr	r3, [r7, #4]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	691b      	ldr	r3, [r3, #16]
 8005d4e:	f003 0302 	and.w	r3, r3, #2
 8005d52:	2b02      	cmp	r3, #2
 8005d54:	d122      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	681b      	ldr	r3, [r3, #0]
 8005d5a:	68db      	ldr	r3, [r3, #12]
 8005d5c:	f003 0302 	and.w	r3, r3, #2
 8005d60:	2b02      	cmp	r3, #2
 8005d62:	d11b      	bne.n	8005d9c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	f06f 0202 	mvn.w	r2, #2
 8005d6c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2201      	movs	r2, #1
 8005d72:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	699b      	ldr	r3, [r3, #24]
 8005d7a:	f003 0303 	and.w	r3, r3, #3
 8005d7e:	2b00      	cmp	r3, #0
 8005d80:	d003      	beq.n	8005d8a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005d82:	6878      	ldr	r0, [r7, #4]
 8005d84:	f000 fa51 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005d88:	e005      	b.n	8005d96 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005d8a:	6878      	ldr	r0, [r7, #4]
 8005d8c:	f000 fa43 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005d90:	6878      	ldr	r0, [r7, #4]
 8005d92:	f000 fa54 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	2200      	movs	r2, #0
 8005d9a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	681b      	ldr	r3, [r3, #0]
 8005da0:	691b      	ldr	r3, [r3, #16]
 8005da2:	f003 0304 	and.w	r3, r3, #4
 8005da6:	2b04      	cmp	r3, #4
 8005da8:	d122      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	68db      	ldr	r3, [r3, #12]
 8005db0:	f003 0304 	and.w	r3, r3, #4
 8005db4:	2b04      	cmp	r3, #4
 8005db6:	d11b      	bne.n	8005df0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	f06f 0204 	mvn.w	r2, #4
 8005dc0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005dc2:	687b      	ldr	r3, [r7, #4]
 8005dc4:	2202      	movs	r2, #2
 8005dc6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	681b      	ldr	r3, [r3, #0]
 8005dcc:	699b      	ldr	r3, [r3, #24]
 8005dce:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005dd2:	2b00      	cmp	r3, #0
 8005dd4:	d003      	beq.n	8005dde <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005dd6:	6878      	ldr	r0, [r7, #4]
 8005dd8:	f000 fa27 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005ddc:	e005      	b.n	8005dea <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005dde:	6878      	ldr	r0, [r7, #4]
 8005de0:	f000 fa19 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005de4:	6878      	ldr	r0, [r7, #4]
 8005de6:	f000 fa2a 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	2200      	movs	r2, #0
 8005dee:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005df0:	687b      	ldr	r3, [r7, #4]
 8005df2:	681b      	ldr	r3, [r3, #0]
 8005df4:	691b      	ldr	r3, [r3, #16]
 8005df6:	f003 0308 	and.w	r3, r3, #8
 8005dfa:	2b08      	cmp	r3, #8
 8005dfc:	d122      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68db      	ldr	r3, [r3, #12]
 8005e04:	f003 0308 	and.w	r3, r3, #8
 8005e08:	2b08      	cmp	r3, #8
 8005e0a:	d11b      	bne.n	8005e44 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005e0c:	687b      	ldr	r3, [r7, #4]
 8005e0e:	681b      	ldr	r3, [r3, #0]
 8005e10:	f06f 0208 	mvn.w	r2, #8
 8005e14:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	2204      	movs	r2, #4
 8005e1a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	681b      	ldr	r3, [r3, #0]
 8005e20:	69db      	ldr	r3, [r3, #28]
 8005e22:	f003 0303 	and.w	r3, r3, #3
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e2a:	6878      	ldr	r0, [r7, #4]
 8005e2c:	f000 f9fd 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005e30:	e005      	b.n	8005e3e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e32:	6878      	ldr	r0, [r7, #4]
 8005e34:	f000 f9ef 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e38:	6878      	ldr	r0, [r7, #4]
 8005e3a:	f000 fa00 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e3e:	687b      	ldr	r3, [r7, #4]
 8005e40:	2200      	movs	r2, #0
 8005e42:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	691b      	ldr	r3, [r3, #16]
 8005e4a:	f003 0310 	and.w	r3, r3, #16
 8005e4e:	2b10      	cmp	r3, #16
 8005e50:	d122      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005e52:	687b      	ldr	r3, [r7, #4]
 8005e54:	681b      	ldr	r3, [r3, #0]
 8005e56:	68db      	ldr	r3, [r3, #12]
 8005e58:	f003 0310 	and.w	r3, r3, #16
 8005e5c:	2b10      	cmp	r3, #16
 8005e5e:	d11b      	bne.n	8005e98 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005e60:	687b      	ldr	r3, [r7, #4]
 8005e62:	681b      	ldr	r3, [r3, #0]
 8005e64:	f06f 0210 	mvn.w	r2, #16
 8005e68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005e6a:	687b      	ldr	r3, [r7, #4]
 8005e6c:	2208      	movs	r2, #8
 8005e6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	69db      	ldr	r3, [r3, #28]
 8005e76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005e7e:	6878      	ldr	r0, [r7, #4]
 8005e80:	f000 f9d3 	bl	800622a <HAL_TIM_IC_CaptureCallback>
 8005e84:	e005      	b.n	8005e92 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005e86:	6878      	ldr	r0, [r7, #4]
 8005e88:	f000 f9c5 	bl	8006216 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005e8c:	6878      	ldr	r0, [r7, #4]
 8005e8e:	f000 f9d6 	bl	800623e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	2200      	movs	r2, #0
 8005e96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	691b      	ldr	r3, [r3, #16]
 8005e9e:	f003 0301 	and.w	r3, r3, #1
 8005ea2:	2b01      	cmp	r3, #1
 8005ea4:	d10e      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005ea6:	687b      	ldr	r3, [r7, #4]
 8005ea8:	681b      	ldr	r3, [r3, #0]
 8005eaa:	68db      	ldr	r3, [r3, #12]
 8005eac:	f003 0301 	and.w	r3, r3, #1
 8005eb0:	2b01      	cmp	r3, #1
 8005eb2:	d107      	bne.n	8005ec4 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005eb4:	687b      	ldr	r3, [r7, #4]
 8005eb6:	681b      	ldr	r3, [r3, #0]
 8005eb8:	f06f 0201 	mvn.w	r2, #1
 8005ebc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005ebe:	6878      	ldr	r0, [r7, #4]
 8005ec0:	f7fc ffde 	bl	8002e80 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005ec4:	687b      	ldr	r3, [r7, #4]
 8005ec6:	681b      	ldr	r3, [r3, #0]
 8005ec8:	691b      	ldr	r3, [r3, #16]
 8005eca:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005ece:	2b80      	cmp	r3, #128	; 0x80
 8005ed0:	d10e      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	681b      	ldr	r3, [r3, #0]
 8005ed6:	68db      	ldr	r3, [r3, #12]
 8005ed8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005edc:	2b80      	cmp	r3, #128	; 0x80
 8005ede:	d107      	bne.n	8005ef0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005ee8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005eea:	6878      	ldr	r0, [r7, #4]
 8005eec:	f000 fca6 	bl	800683c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	681b      	ldr	r3, [r3, #0]
 8005ef4:	691b      	ldr	r3, [r3, #16]
 8005ef6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005efa:	2b40      	cmp	r3, #64	; 0x40
 8005efc:	d10e      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	681b      	ldr	r3, [r3, #0]
 8005f02:	68db      	ldr	r3, [r3, #12]
 8005f04:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005f08:	2b40      	cmp	r3, #64	; 0x40
 8005f0a:	d107      	bne.n	8005f1c <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005f0c:	687b      	ldr	r3, [r7, #4]
 8005f0e:	681b      	ldr	r3, [r3, #0]
 8005f10:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005f14:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005f16:	6878      	ldr	r0, [r7, #4]
 8005f18:	f000 f99b 	bl	8006252 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005f1c:	687b      	ldr	r3, [r7, #4]
 8005f1e:	681b      	ldr	r3, [r3, #0]
 8005f20:	691b      	ldr	r3, [r3, #16]
 8005f22:	f003 0320 	and.w	r3, r3, #32
 8005f26:	2b20      	cmp	r3, #32
 8005f28:	d10e      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005f2a:	687b      	ldr	r3, [r7, #4]
 8005f2c:	681b      	ldr	r3, [r3, #0]
 8005f2e:	68db      	ldr	r3, [r3, #12]
 8005f30:	f003 0320 	and.w	r3, r3, #32
 8005f34:	2b20      	cmp	r3, #32
 8005f36:	d107      	bne.n	8005f48 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005f38:	687b      	ldr	r3, [r7, #4]
 8005f3a:	681b      	ldr	r3, [r3, #0]
 8005f3c:	f06f 0220 	mvn.w	r2, #32
 8005f40:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005f42:	6878      	ldr	r0, [r7, #4]
 8005f44:	f000 fc70 	bl	8006828 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005f48:	bf00      	nop
 8005f4a:	3708      	adds	r7, #8
 8005f4c:	46bd      	mov	sp, r7
 8005f4e:	bd80      	pop	{r7, pc}

08005f50 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8005f50:	b580      	push	{r7, lr}
 8005f52:	b086      	sub	sp, #24
 8005f54:	af00      	add	r7, sp, #0
 8005f56:	60f8      	str	r0, [r7, #12]
 8005f58:	60b9      	str	r1, [r7, #8]
 8005f5a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8005f5c:	2300      	movs	r3, #0
 8005f5e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005f60:	68fb      	ldr	r3, [r7, #12]
 8005f62:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005f66:	2b01      	cmp	r3, #1
 8005f68:	d101      	bne.n	8005f6e <HAL_TIM_IC_ConfigChannel+0x1e>
 8005f6a:	2302      	movs	r3, #2
 8005f6c:	e088      	b.n	8006080 <HAL_TIM_IC_ConfigChannel+0x130>
 8005f6e:	68fb      	ldr	r3, [r7, #12]
 8005f70:	2201      	movs	r2, #1
 8005f72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8005f76:	687b      	ldr	r3, [r7, #4]
 8005f78:	2b00      	cmp	r3, #0
 8005f7a:	d11b      	bne.n	8005fb4 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8005f7c:	68fb      	ldr	r3, [r7, #12]
 8005f7e:	6818      	ldr	r0, [r3, #0]
 8005f80:	68bb      	ldr	r3, [r7, #8]
 8005f82:	6819      	ldr	r1, [r3, #0]
 8005f84:	68bb      	ldr	r3, [r7, #8]
 8005f86:	685a      	ldr	r2, [r3, #4]
 8005f88:	68bb      	ldr	r3, [r7, #8]
 8005f8a:	68db      	ldr	r3, [r3, #12]
 8005f8c:	f000 fa0c 	bl	80063a8 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8005f90:	68fb      	ldr	r3, [r7, #12]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	699a      	ldr	r2, [r3, #24]
 8005f96:	68fb      	ldr	r3, [r7, #12]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f022 020c 	bic.w	r2, r2, #12
 8005f9e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8005fa0:	68fb      	ldr	r3, [r7, #12]
 8005fa2:	681b      	ldr	r3, [r3, #0]
 8005fa4:	6999      	ldr	r1, [r3, #24]
 8005fa6:	68bb      	ldr	r3, [r7, #8]
 8005fa8:	689a      	ldr	r2, [r3, #8]
 8005faa:	68fb      	ldr	r3, [r7, #12]
 8005fac:	681b      	ldr	r3, [r3, #0]
 8005fae:	430a      	orrs	r2, r1
 8005fb0:	619a      	str	r2, [r3, #24]
 8005fb2:	e060      	b.n	8006076 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8005fb4:	687b      	ldr	r3, [r7, #4]
 8005fb6:	2b04      	cmp	r3, #4
 8005fb8:	d11c      	bne.n	8005ff4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8005fba:	68fb      	ldr	r3, [r7, #12]
 8005fbc:	6818      	ldr	r0, [r3, #0]
 8005fbe:	68bb      	ldr	r3, [r7, #8]
 8005fc0:	6819      	ldr	r1, [r3, #0]
 8005fc2:	68bb      	ldr	r3, [r7, #8]
 8005fc4:	685a      	ldr	r2, [r3, #4]
 8005fc6:	68bb      	ldr	r3, [r7, #8]
 8005fc8:	68db      	ldr	r3, [r3, #12]
 8005fca:	f000 fa90 	bl	80064ee <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8005fce:	68fb      	ldr	r3, [r7, #12]
 8005fd0:	681b      	ldr	r3, [r3, #0]
 8005fd2:	699a      	ldr	r2, [r3, #24]
 8005fd4:	68fb      	ldr	r3, [r7, #12]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8005fdc:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8005fde:	68fb      	ldr	r3, [r7, #12]
 8005fe0:	681b      	ldr	r3, [r3, #0]
 8005fe2:	6999      	ldr	r1, [r3, #24]
 8005fe4:	68bb      	ldr	r3, [r7, #8]
 8005fe6:	689b      	ldr	r3, [r3, #8]
 8005fe8:	021a      	lsls	r2, r3, #8
 8005fea:	68fb      	ldr	r3, [r7, #12]
 8005fec:	681b      	ldr	r3, [r3, #0]
 8005fee:	430a      	orrs	r2, r1
 8005ff0:	619a      	str	r2, [r3, #24]
 8005ff2:	e040      	b.n	8006076 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8005ff4:	687b      	ldr	r3, [r7, #4]
 8005ff6:	2b08      	cmp	r3, #8
 8005ff8:	d11b      	bne.n	8006032 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8005ffa:	68fb      	ldr	r3, [r7, #12]
 8005ffc:	6818      	ldr	r0, [r3, #0]
 8005ffe:	68bb      	ldr	r3, [r7, #8]
 8006000:	6819      	ldr	r1, [r3, #0]
 8006002:	68bb      	ldr	r3, [r7, #8]
 8006004:	685a      	ldr	r2, [r3, #4]
 8006006:	68bb      	ldr	r3, [r7, #8]
 8006008:	68db      	ldr	r3, [r3, #12]
 800600a:	f000 fadd 	bl	80065c8 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 800600e:	68fb      	ldr	r3, [r7, #12]
 8006010:	681b      	ldr	r3, [r3, #0]
 8006012:	69da      	ldr	r2, [r3, #28]
 8006014:	68fb      	ldr	r3, [r7, #12]
 8006016:	681b      	ldr	r3, [r3, #0]
 8006018:	f022 020c 	bic.w	r2, r2, #12
 800601c:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 800601e:	68fb      	ldr	r3, [r7, #12]
 8006020:	681b      	ldr	r3, [r3, #0]
 8006022:	69d9      	ldr	r1, [r3, #28]
 8006024:	68bb      	ldr	r3, [r7, #8]
 8006026:	689a      	ldr	r2, [r3, #8]
 8006028:	68fb      	ldr	r3, [r7, #12]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	430a      	orrs	r2, r1
 800602e:	61da      	str	r2, [r3, #28]
 8006030:	e021      	b.n	8006076 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8006032:	687b      	ldr	r3, [r7, #4]
 8006034:	2b0c      	cmp	r3, #12
 8006036:	d11c      	bne.n	8006072 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8006038:	68fb      	ldr	r3, [r7, #12]
 800603a:	6818      	ldr	r0, [r3, #0]
 800603c:	68bb      	ldr	r3, [r7, #8]
 800603e:	6819      	ldr	r1, [r3, #0]
 8006040:	68bb      	ldr	r3, [r7, #8]
 8006042:	685a      	ldr	r2, [r3, #4]
 8006044:	68bb      	ldr	r3, [r7, #8]
 8006046:	68db      	ldr	r3, [r3, #12]
 8006048:	f000 fafa 	bl	8006640 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800604c:	68fb      	ldr	r3, [r7, #12]
 800604e:	681b      	ldr	r3, [r3, #0]
 8006050:	69da      	ldr	r2, [r3, #28]
 8006052:	68fb      	ldr	r3, [r7, #12]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800605a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800605c:	68fb      	ldr	r3, [r7, #12]
 800605e:	681b      	ldr	r3, [r3, #0]
 8006060:	69d9      	ldr	r1, [r3, #28]
 8006062:	68bb      	ldr	r3, [r7, #8]
 8006064:	689b      	ldr	r3, [r3, #8]
 8006066:	021a      	lsls	r2, r3, #8
 8006068:	68fb      	ldr	r3, [r7, #12]
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	430a      	orrs	r2, r1
 800606e:	61da      	str	r2, [r3, #28]
 8006070:	e001      	b.n	8006076 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8006072:	2301      	movs	r3, #1
 8006074:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8006076:	68fb      	ldr	r3, [r7, #12]
 8006078:	2200      	movs	r2, #0
 800607a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800607e:	7dfb      	ldrb	r3, [r7, #23]
}
 8006080:	4618      	mov	r0, r3
 8006082:	3718      	adds	r7, #24
 8006084:	46bd      	mov	sp, r7
 8006086:	bd80      	pop	{r7, pc}

08006088 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006088:	b580      	push	{r7, lr}
 800608a:	b084      	sub	sp, #16
 800608c:	af00      	add	r7, sp, #0
 800608e:	6078      	str	r0, [r7, #4]
 8006090:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8006092:	2300      	movs	r3, #0
 8006094:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800609c:	2b01      	cmp	r3, #1
 800609e:	d101      	bne.n	80060a4 <HAL_TIM_ConfigClockSource+0x1c>
 80060a0:	2302      	movs	r3, #2
 80060a2:	e0b4      	b.n	800620e <HAL_TIM_ConfigClockSource+0x186>
 80060a4:	687b      	ldr	r3, [r7, #4]
 80060a6:	2201      	movs	r2, #1
 80060a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80060ac:	687b      	ldr	r3, [r7, #4]
 80060ae:	2202      	movs	r2, #2
 80060b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	681b      	ldr	r3, [r3, #0]
 80060b8:	689b      	ldr	r3, [r3, #8]
 80060ba:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80060bc:	68bb      	ldr	r3, [r7, #8]
 80060be:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80060c2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80060c4:	68bb      	ldr	r3, [r7, #8]
 80060c6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80060ca:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 80060cc:	687b      	ldr	r3, [r7, #4]
 80060ce:	681b      	ldr	r3, [r3, #0]
 80060d0:	68ba      	ldr	r2, [r7, #8]
 80060d2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060dc:	d03e      	beq.n	800615c <HAL_TIM_ConfigClockSource+0xd4>
 80060de:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80060e2:	f200 8087 	bhi.w	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060e6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060ea:	f000 8086 	beq.w	80061fa <HAL_TIM_ConfigClockSource+0x172>
 80060ee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80060f2:	d87f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060f4:	2b70      	cmp	r3, #112	; 0x70
 80060f6:	d01a      	beq.n	800612e <HAL_TIM_ConfigClockSource+0xa6>
 80060f8:	2b70      	cmp	r3, #112	; 0x70
 80060fa:	d87b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 80060fc:	2b60      	cmp	r3, #96	; 0x60
 80060fe:	d050      	beq.n	80061a2 <HAL_TIM_ConfigClockSource+0x11a>
 8006100:	2b60      	cmp	r3, #96	; 0x60
 8006102:	d877      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006104:	2b50      	cmp	r3, #80	; 0x50
 8006106:	d03c      	beq.n	8006182 <HAL_TIM_ConfigClockSource+0xfa>
 8006108:	2b50      	cmp	r3, #80	; 0x50
 800610a:	d873      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 800610c:	2b40      	cmp	r3, #64	; 0x40
 800610e:	d058      	beq.n	80061c2 <HAL_TIM_ConfigClockSource+0x13a>
 8006110:	2b40      	cmp	r3, #64	; 0x40
 8006112:	d86f      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006114:	2b30      	cmp	r3, #48	; 0x30
 8006116:	d064      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006118:	2b30      	cmp	r3, #48	; 0x30
 800611a:	d86b      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 800611c:	2b20      	cmp	r3, #32
 800611e:	d060      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006120:	2b20      	cmp	r3, #32
 8006122:	d867      	bhi.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
 8006124:	2b00      	cmp	r3, #0
 8006126:	d05c      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 8006128:	2b10      	cmp	r3, #16
 800612a:	d05a      	beq.n	80061e2 <HAL_TIM_ConfigClockSource+0x15a>
 800612c:	e062      	b.n	80061f4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6818      	ldr	r0, [r3, #0]
 8006132:	683b      	ldr	r3, [r7, #0]
 8006134:	6899      	ldr	r1, [r3, #8]
 8006136:	683b      	ldr	r3, [r7, #0]
 8006138:	685a      	ldr	r2, [r3, #4]
 800613a:	683b      	ldr	r3, [r7, #0]
 800613c:	68db      	ldr	r3, [r3, #12]
 800613e:	f000 fad7 	bl	80066f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	681b      	ldr	r3, [r3, #0]
 8006146:	689b      	ldr	r3, [r3, #8]
 8006148:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800614a:	68bb      	ldr	r3, [r7, #8]
 800614c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8006150:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	681b      	ldr	r3, [r3, #0]
 8006156:	68ba      	ldr	r2, [r7, #8]
 8006158:	609a      	str	r2, [r3, #8]
      break;
 800615a:	e04f      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	6818      	ldr	r0, [r3, #0]
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	6899      	ldr	r1, [r3, #8]
 8006164:	683b      	ldr	r3, [r7, #0]
 8006166:	685a      	ldr	r2, [r3, #4]
 8006168:	683b      	ldr	r3, [r7, #0]
 800616a:	68db      	ldr	r3, [r3, #12]
 800616c:	f000 fac0 	bl	80066f0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	681b      	ldr	r3, [r3, #0]
 8006174:	689a      	ldr	r2, [r3, #8]
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800617e:	609a      	str	r2, [r3, #8]
      break;
 8006180:	e03c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8006182:	687b      	ldr	r3, [r7, #4]
 8006184:	6818      	ldr	r0, [r3, #0]
 8006186:	683b      	ldr	r3, [r7, #0]
 8006188:	6859      	ldr	r1, [r3, #4]
 800618a:	683b      	ldr	r3, [r7, #0]
 800618c:	68db      	ldr	r3, [r3, #12]
 800618e:	461a      	mov	r2, r3
 8006190:	f000 f97e 	bl	8006490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	681b      	ldr	r3, [r3, #0]
 8006198:	2150      	movs	r1, #80	; 0x50
 800619a:	4618      	mov	r0, r3
 800619c:	f000 fa8d 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 80061a0:	e02c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80061a2:	687b      	ldr	r3, [r7, #4]
 80061a4:	6818      	ldr	r0, [r3, #0]
 80061a6:	683b      	ldr	r3, [r7, #0]
 80061a8:	6859      	ldr	r1, [r3, #4]
 80061aa:	683b      	ldr	r3, [r7, #0]
 80061ac:	68db      	ldr	r3, [r3, #12]
 80061ae:	461a      	mov	r2, r3
 80061b0:	f000 f9da 	bl	8006568 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	2160      	movs	r1, #96	; 0x60
 80061ba:	4618      	mov	r0, r3
 80061bc:	f000 fa7d 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 80061c0:	e01c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	6818      	ldr	r0, [r3, #0]
 80061c6:	683b      	ldr	r3, [r7, #0]
 80061c8:	6859      	ldr	r1, [r3, #4]
 80061ca:	683b      	ldr	r3, [r7, #0]
 80061cc:	68db      	ldr	r3, [r3, #12]
 80061ce:	461a      	mov	r2, r3
 80061d0:	f000 f95e 	bl	8006490 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	2140      	movs	r1, #64	; 0x40
 80061da:	4618      	mov	r0, r3
 80061dc:	f000 fa6d 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 80061e0:	e00c      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80061e2:	687b      	ldr	r3, [r7, #4]
 80061e4:	681a      	ldr	r2, [r3, #0]
 80061e6:	683b      	ldr	r3, [r7, #0]
 80061e8:	681b      	ldr	r3, [r3, #0]
 80061ea:	4619      	mov	r1, r3
 80061ec:	4610      	mov	r0, r2
 80061ee:	f000 fa64 	bl	80066ba <TIM_ITRx_SetConfig>
      break;
 80061f2:	e003      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80061f4:	2301      	movs	r3, #1
 80061f6:	73fb      	strb	r3, [r7, #15]
      break;
 80061f8:	e000      	b.n	80061fc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80061fa:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80061fc:	687b      	ldr	r3, [r7, #4]
 80061fe:	2201      	movs	r2, #1
 8006200:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800620c:	7bfb      	ldrb	r3, [r7, #15]
}
 800620e:	4618      	mov	r0, r3
 8006210:	3710      	adds	r7, #16
 8006212:	46bd      	mov	sp, r7
 8006214:	bd80      	pop	{r7, pc}

08006216 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8006216:	b480      	push	{r7}
 8006218:	b083      	sub	sp, #12
 800621a:	af00      	add	r7, sp, #0
 800621c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 800621e:	bf00      	nop
 8006220:	370c      	adds	r7, #12
 8006222:	46bd      	mov	sp, r7
 8006224:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006228:	4770      	bx	lr

0800622a <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 800622a:	b480      	push	{r7}
 800622c:	b083      	sub	sp, #12
 800622e:	af00      	add	r7, sp, #0
 8006230:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8006232:	bf00      	nop
 8006234:	370c      	adds	r7, #12
 8006236:	46bd      	mov	sp, r7
 8006238:	f85d 7b04 	ldr.w	r7, [sp], #4
 800623c:	4770      	bx	lr

0800623e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800623e:	b480      	push	{r7}
 8006240:	b083      	sub	sp, #12
 8006242:	af00      	add	r7, sp, #0
 8006244:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006246:	bf00      	nop
 8006248:	370c      	adds	r7, #12
 800624a:	46bd      	mov	sp, r7
 800624c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006250:	4770      	bx	lr

08006252 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8006252:	b480      	push	{r7}
 8006254:	b083      	sub	sp, #12
 8006256:	af00      	add	r7, sp, #0
 8006258:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800625a:	bf00      	nop
 800625c:	370c      	adds	r7, #12
 800625e:	46bd      	mov	sp, r7
 8006260:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006264:	4770      	bx	lr
	...

08006268 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006268:	b480      	push	{r7}
 800626a:	b085      	sub	sp, #20
 800626c:	af00      	add	r7, sp, #0
 800626e:	6078      	str	r0, [r7, #4]
 8006270:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8006272:	687b      	ldr	r3, [r7, #4]
 8006274:	681b      	ldr	r3, [r3, #0]
 8006276:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006278:	687b      	ldr	r3, [r7, #4]
 800627a:	4a40      	ldr	r2, [pc, #256]	; (800637c <TIM_Base_SetConfig+0x114>)
 800627c:	4293      	cmp	r3, r2
 800627e:	d013      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 8006280:	687b      	ldr	r3, [r7, #4]
 8006282:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006286:	d00f      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 8006288:	687b      	ldr	r3, [r7, #4]
 800628a:	4a3d      	ldr	r2, [pc, #244]	; (8006380 <TIM_Base_SetConfig+0x118>)
 800628c:	4293      	cmp	r3, r2
 800628e:	d00b      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	4a3c      	ldr	r2, [pc, #240]	; (8006384 <TIM_Base_SetConfig+0x11c>)
 8006294:	4293      	cmp	r3, r2
 8006296:	d007      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 8006298:	687b      	ldr	r3, [r7, #4]
 800629a:	4a3b      	ldr	r2, [pc, #236]	; (8006388 <TIM_Base_SetConfig+0x120>)
 800629c:	4293      	cmp	r3, r2
 800629e:	d003      	beq.n	80062a8 <TIM_Base_SetConfig+0x40>
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	4a3a      	ldr	r2, [pc, #232]	; (800638c <TIM_Base_SetConfig+0x124>)
 80062a4:	4293      	cmp	r3, r2
 80062a6:	d108      	bne.n	80062ba <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80062a8:	68fb      	ldr	r3, [r7, #12]
 80062aa:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80062ae:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80062b0:	683b      	ldr	r3, [r7, #0]
 80062b2:	685b      	ldr	r3, [r3, #4]
 80062b4:	68fa      	ldr	r2, [r7, #12]
 80062b6:	4313      	orrs	r3, r2
 80062b8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	4a2f      	ldr	r2, [pc, #188]	; (800637c <TIM_Base_SetConfig+0x114>)
 80062be:	4293      	cmp	r3, r2
 80062c0:	d02b      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80062c8:	d027      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062ca:	687b      	ldr	r3, [r7, #4]
 80062cc:	4a2c      	ldr	r2, [pc, #176]	; (8006380 <TIM_Base_SetConfig+0x118>)
 80062ce:	4293      	cmp	r3, r2
 80062d0:	d023      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	4a2b      	ldr	r2, [pc, #172]	; (8006384 <TIM_Base_SetConfig+0x11c>)
 80062d6:	4293      	cmp	r3, r2
 80062d8:	d01f      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	4a2a      	ldr	r2, [pc, #168]	; (8006388 <TIM_Base_SetConfig+0x120>)
 80062de:	4293      	cmp	r3, r2
 80062e0:	d01b      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	4a29      	ldr	r2, [pc, #164]	; (800638c <TIM_Base_SetConfig+0x124>)
 80062e6:	4293      	cmp	r3, r2
 80062e8:	d017      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	4a28      	ldr	r2, [pc, #160]	; (8006390 <TIM_Base_SetConfig+0x128>)
 80062ee:	4293      	cmp	r3, r2
 80062f0:	d013      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062f2:	687b      	ldr	r3, [r7, #4]
 80062f4:	4a27      	ldr	r2, [pc, #156]	; (8006394 <TIM_Base_SetConfig+0x12c>)
 80062f6:	4293      	cmp	r3, r2
 80062f8:	d00f      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	4a26      	ldr	r2, [pc, #152]	; (8006398 <TIM_Base_SetConfig+0x130>)
 80062fe:	4293      	cmp	r3, r2
 8006300:	d00b      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	4a25      	ldr	r2, [pc, #148]	; (800639c <TIM_Base_SetConfig+0x134>)
 8006306:	4293      	cmp	r3, r2
 8006308:	d007      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 800630a:	687b      	ldr	r3, [r7, #4]
 800630c:	4a24      	ldr	r2, [pc, #144]	; (80063a0 <TIM_Base_SetConfig+0x138>)
 800630e:	4293      	cmp	r3, r2
 8006310:	d003      	beq.n	800631a <TIM_Base_SetConfig+0xb2>
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	4a23      	ldr	r2, [pc, #140]	; (80063a4 <TIM_Base_SetConfig+0x13c>)
 8006316:	4293      	cmp	r3, r2
 8006318:	d108      	bne.n	800632c <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800631a:	68fb      	ldr	r3, [r7, #12]
 800631c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006320:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8006322:	683b      	ldr	r3, [r7, #0]
 8006324:	68db      	ldr	r3, [r3, #12]
 8006326:	68fa      	ldr	r2, [r7, #12]
 8006328:	4313      	orrs	r3, r2
 800632a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800632c:	68fb      	ldr	r3, [r7, #12]
 800632e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8006332:	683b      	ldr	r3, [r7, #0]
 8006334:	695b      	ldr	r3, [r3, #20]
 8006336:	4313      	orrs	r3, r2
 8006338:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	68fa      	ldr	r2, [r7, #12]
 800633e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8006340:	683b      	ldr	r3, [r7, #0]
 8006342:	689a      	ldr	r2, [r3, #8]
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006348:	683b      	ldr	r3, [r7, #0]
 800634a:	681a      	ldr	r2, [r3, #0]
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	4a0a      	ldr	r2, [pc, #40]	; (800637c <TIM_Base_SetConfig+0x114>)
 8006354:	4293      	cmp	r3, r2
 8006356:	d003      	beq.n	8006360 <TIM_Base_SetConfig+0xf8>
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	4a0c      	ldr	r2, [pc, #48]	; (800638c <TIM_Base_SetConfig+0x124>)
 800635c:	4293      	cmp	r3, r2
 800635e:	d103      	bne.n	8006368 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006360:	683b      	ldr	r3, [r7, #0]
 8006362:	691a      	ldr	r2, [r3, #16]
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006368:	687b      	ldr	r3, [r7, #4]
 800636a:	2201      	movs	r2, #1
 800636c:	615a      	str	r2, [r3, #20]
}
 800636e:	bf00      	nop
 8006370:	3714      	adds	r7, #20
 8006372:	46bd      	mov	sp, r7
 8006374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006378:	4770      	bx	lr
 800637a:	bf00      	nop
 800637c:	40010000 	.word	0x40010000
 8006380:	40000400 	.word	0x40000400
 8006384:	40000800 	.word	0x40000800
 8006388:	40000c00 	.word	0x40000c00
 800638c:	40010400 	.word	0x40010400
 8006390:	40014000 	.word	0x40014000
 8006394:	40014400 	.word	0x40014400
 8006398:	40014800 	.word	0x40014800
 800639c:	40001800 	.word	0x40001800
 80063a0:	40001c00 	.word	0x40001c00
 80063a4:	40002000 	.word	0x40002000

080063a8 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 80063a8:	b480      	push	{r7}
 80063aa:	b087      	sub	sp, #28
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	60f8      	str	r0, [r7, #12]
 80063b0:	60b9      	str	r1, [r7, #8]
 80063b2:	607a      	str	r2, [r7, #4]
 80063b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80063b6:	68fb      	ldr	r3, [r7, #12]
 80063b8:	6a1b      	ldr	r3, [r3, #32]
 80063ba:	f023 0201 	bic.w	r2, r3, #1
 80063be:	68fb      	ldr	r3, [r7, #12]
 80063c0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063c2:	68fb      	ldr	r3, [r7, #12]
 80063c4:	699b      	ldr	r3, [r3, #24]
 80063c6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063c8:	68fb      	ldr	r3, [r7, #12]
 80063ca:	6a1b      	ldr	r3, [r3, #32]
 80063cc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80063ce:	68fb      	ldr	r3, [r7, #12]
 80063d0:	4a28      	ldr	r2, [pc, #160]	; (8006474 <TIM_TI1_SetConfig+0xcc>)
 80063d2:	4293      	cmp	r3, r2
 80063d4:	d01b      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063d6:	68fb      	ldr	r3, [r7, #12]
 80063d8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80063dc:	d017      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	4a25      	ldr	r2, [pc, #148]	; (8006478 <TIM_TI1_SetConfig+0xd0>)
 80063e2:	4293      	cmp	r3, r2
 80063e4:	d013      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	4a24      	ldr	r2, [pc, #144]	; (800647c <TIM_TI1_SetConfig+0xd4>)
 80063ea:	4293      	cmp	r3, r2
 80063ec:	d00f      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063ee:	68fb      	ldr	r3, [r7, #12]
 80063f0:	4a23      	ldr	r2, [pc, #140]	; (8006480 <TIM_TI1_SetConfig+0xd8>)
 80063f2:	4293      	cmp	r3, r2
 80063f4:	d00b      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	4a22      	ldr	r2, [pc, #136]	; (8006484 <TIM_TI1_SetConfig+0xdc>)
 80063fa:	4293      	cmp	r3, r2
 80063fc:	d007      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 80063fe:	68fb      	ldr	r3, [r7, #12]
 8006400:	4a21      	ldr	r2, [pc, #132]	; (8006488 <TIM_TI1_SetConfig+0xe0>)
 8006402:	4293      	cmp	r3, r2
 8006404:	d003      	beq.n	800640e <TIM_TI1_SetConfig+0x66>
 8006406:	68fb      	ldr	r3, [r7, #12]
 8006408:	4a20      	ldr	r2, [pc, #128]	; (800648c <TIM_TI1_SetConfig+0xe4>)
 800640a:	4293      	cmp	r3, r2
 800640c:	d101      	bne.n	8006412 <TIM_TI1_SetConfig+0x6a>
 800640e:	2301      	movs	r3, #1
 8006410:	e000      	b.n	8006414 <TIM_TI1_SetConfig+0x6c>
 8006412:	2300      	movs	r3, #0
 8006414:	2b00      	cmp	r3, #0
 8006416:	d008      	beq.n	800642a <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8006418:	697b      	ldr	r3, [r7, #20]
 800641a:	f023 0303 	bic.w	r3, r3, #3
 800641e:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8006420:	697a      	ldr	r2, [r7, #20]
 8006422:	687b      	ldr	r3, [r7, #4]
 8006424:	4313      	orrs	r3, r2
 8006426:	617b      	str	r3, [r7, #20]
 8006428:	e003      	b.n	8006432 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 800642a:	697b      	ldr	r3, [r7, #20]
 800642c:	f043 0301 	orr.w	r3, r3, #1
 8006430:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006432:	697b      	ldr	r3, [r7, #20]
 8006434:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006438:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 800643a:	683b      	ldr	r3, [r7, #0]
 800643c:	011b      	lsls	r3, r3, #4
 800643e:	b2db      	uxtb	r3, r3
 8006440:	697a      	ldr	r2, [r7, #20]
 8006442:	4313      	orrs	r3, r2
 8006444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8006446:	693b      	ldr	r3, [r7, #16]
 8006448:	f023 030a 	bic.w	r3, r3, #10
 800644c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 800644e:	68bb      	ldr	r3, [r7, #8]
 8006450:	f003 030a 	and.w	r3, r3, #10
 8006454:	693a      	ldr	r2, [r7, #16]
 8006456:	4313      	orrs	r3, r2
 8006458:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	697a      	ldr	r2, [r7, #20]
 800645e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006460:	68fb      	ldr	r3, [r7, #12]
 8006462:	693a      	ldr	r2, [r7, #16]
 8006464:	621a      	str	r2, [r3, #32]
}
 8006466:	bf00      	nop
 8006468:	371c      	adds	r7, #28
 800646a:	46bd      	mov	sp, r7
 800646c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006470:	4770      	bx	lr
 8006472:	bf00      	nop
 8006474:	40010000 	.word	0x40010000
 8006478:	40000400 	.word	0x40000400
 800647c:	40000800 	.word	0x40000800
 8006480:	40000c00 	.word	0x40000c00
 8006484:	40010400 	.word	0x40010400
 8006488:	40014000 	.word	0x40014000
 800648c:	40001800 	.word	0x40001800

08006490 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006490:	b480      	push	{r7}
 8006492:	b087      	sub	sp, #28
 8006494:	af00      	add	r7, sp, #0
 8006496:	60f8      	str	r0, [r7, #12]
 8006498:	60b9      	str	r1, [r7, #8]
 800649a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800649c:	68fb      	ldr	r3, [r7, #12]
 800649e:	6a1b      	ldr	r3, [r3, #32]
 80064a0:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80064a2:	68fb      	ldr	r3, [r7, #12]
 80064a4:	6a1b      	ldr	r3, [r3, #32]
 80064a6:	f023 0201 	bic.w	r2, r3, #1
 80064aa:	68fb      	ldr	r3, [r7, #12]
 80064ac:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80064ae:	68fb      	ldr	r3, [r7, #12]
 80064b0:	699b      	ldr	r3, [r3, #24]
 80064b2:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80064b4:	693b      	ldr	r3, [r7, #16]
 80064b6:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80064ba:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80064bc:	687b      	ldr	r3, [r7, #4]
 80064be:	011b      	lsls	r3, r3, #4
 80064c0:	693a      	ldr	r2, [r7, #16]
 80064c2:	4313      	orrs	r3, r2
 80064c4:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	f023 030a 	bic.w	r3, r3, #10
 80064cc:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80064ce:	697a      	ldr	r2, [r7, #20]
 80064d0:	68bb      	ldr	r3, [r7, #8]
 80064d2:	4313      	orrs	r3, r2
 80064d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	693a      	ldr	r2, [r7, #16]
 80064da:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	697a      	ldr	r2, [r7, #20]
 80064e0:	621a      	str	r2, [r3, #32]
}
 80064e2:	bf00      	nop
 80064e4:	371c      	adds	r7, #28
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr

080064ee <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80064ee:	b480      	push	{r7}
 80064f0:	b087      	sub	sp, #28
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	60f8      	str	r0, [r7, #12]
 80064f6:	60b9      	str	r1, [r7, #8]
 80064f8:	607a      	str	r2, [r7, #4]
 80064fa:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80064fc:	68fb      	ldr	r3, [r7, #12]
 80064fe:	6a1b      	ldr	r3, [r3, #32]
 8006500:	f023 0210 	bic.w	r2, r3, #16
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006508:	68fb      	ldr	r3, [r7, #12]
 800650a:	699b      	ldr	r3, [r3, #24]
 800650c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800650e:	68fb      	ldr	r3, [r7, #12]
 8006510:	6a1b      	ldr	r3, [r3, #32]
 8006512:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8006514:	697b      	ldr	r3, [r7, #20]
 8006516:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800651a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	021b      	lsls	r3, r3, #8
 8006520:	697a      	ldr	r2, [r7, #20]
 8006522:	4313      	orrs	r3, r2
 8006524:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8006526:	697b      	ldr	r3, [r7, #20]
 8006528:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800652c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 800652e:	683b      	ldr	r3, [r7, #0]
 8006530:	031b      	lsls	r3, r3, #12
 8006532:	b29b      	uxth	r3, r3
 8006534:	697a      	ldr	r2, [r7, #20]
 8006536:	4313      	orrs	r3, r2
 8006538:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800653a:	693b      	ldr	r3, [r7, #16]
 800653c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8006540:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8006542:	68bb      	ldr	r3, [r7, #8]
 8006544:	011b      	lsls	r3, r3, #4
 8006546:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 800654a:	693a      	ldr	r2, [r7, #16]
 800654c:	4313      	orrs	r3, r2
 800654e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	697a      	ldr	r2, [r7, #20]
 8006554:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	693a      	ldr	r2, [r7, #16]
 800655a:	621a      	str	r2, [r3, #32]
}
 800655c:	bf00      	nop
 800655e:	371c      	adds	r7, #28
 8006560:	46bd      	mov	sp, r7
 8006562:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006566:	4770      	bx	lr

08006568 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006568:	b480      	push	{r7}
 800656a:	b087      	sub	sp, #28
 800656c:	af00      	add	r7, sp, #0
 800656e:	60f8      	str	r0, [r7, #12]
 8006570:	60b9      	str	r1, [r7, #8]
 8006572:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006574:	68fb      	ldr	r3, [r7, #12]
 8006576:	6a1b      	ldr	r3, [r3, #32]
 8006578:	f023 0210 	bic.w	r2, r3, #16
 800657c:	68fb      	ldr	r3, [r7, #12]
 800657e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006580:	68fb      	ldr	r3, [r7, #12]
 8006582:	699b      	ldr	r3, [r3, #24]
 8006584:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006586:	68fb      	ldr	r3, [r7, #12]
 8006588:	6a1b      	ldr	r3, [r3, #32]
 800658a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800658c:	697b      	ldr	r3, [r7, #20]
 800658e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006592:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	031b      	lsls	r3, r3, #12
 8006598:	697a      	ldr	r2, [r7, #20]
 800659a:	4313      	orrs	r3, r2
 800659c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800659e:	693b      	ldr	r3, [r7, #16]
 80065a0:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80065a4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80065a6:	68bb      	ldr	r3, [r7, #8]
 80065a8:	011b      	lsls	r3, r3, #4
 80065aa:	693a      	ldr	r2, [r7, #16]
 80065ac:	4313      	orrs	r3, r2
 80065ae:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80065b0:	68fb      	ldr	r3, [r7, #12]
 80065b2:	697a      	ldr	r2, [r7, #20]
 80065b4:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80065b6:	68fb      	ldr	r3, [r7, #12]
 80065b8:	693a      	ldr	r2, [r7, #16]
 80065ba:	621a      	str	r2, [r3, #32]
}
 80065bc:	bf00      	nop
 80065be:	371c      	adds	r7, #28
 80065c0:	46bd      	mov	sp, r7
 80065c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065c6:	4770      	bx	lr

080065c8 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80065c8:	b480      	push	{r7}
 80065ca:	b087      	sub	sp, #28
 80065cc:	af00      	add	r7, sp, #0
 80065ce:	60f8      	str	r0, [r7, #12]
 80065d0:	60b9      	str	r1, [r7, #8]
 80065d2:	607a      	str	r2, [r7, #4]
 80065d4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80065d6:	68fb      	ldr	r3, [r7, #12]
 80065d8:	6a1b      	ldr	r3, [r3, #32]
 80065da:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80065de:	68fb      	ldr	r3, [r7, #12]
 80065e0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80065e2:	68fb      	ldr	r3, [r7, #12]
 80065e4:	69db      	ldr	r3, [r3, #28]
 80065e6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	6a1b      	ldr	r3, [r3, #32]
 80065ec:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	f023 0303 	bic.w	r3, r3, #3
 80065f4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80065f6:	697a      	ldr	r2, [r7, #20]
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	4313      	orrs	r3, r2
 80065fc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006604:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8006606:	683b      	ldr	r3, [r7, #0]
 8006608:	011b      	lsls	r3, r3, #4
 800660a:	b2db      	uxtb	r3, r3
 800660c:	697a      	ldr	r2, [r7, #20]
 800660e:	4313      	orrs	r3, r2
 8006610:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8006612:	693b      	ldr	r3, [r7, #16]
 8006614:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8006618:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 800661a:	68bb      	ldr	r3, [r7, #8]
 800661c:	021b      	lsls	r3, r3, #8
 800661e:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8006622:	693a      	ldr	r2, [r7, #16]
 8006624:	4313      	orrs	r3, r2
 8006626:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8006628:	68fb      	ldr	r3, [r7, #12]
 800662a:	697a      	ldr	r2, [r7, #20]
 800662c:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 800662e:	68fb      	ldr	r3, [r7, #12]
 8006630:	693a      	ldr	r2, [r7, #16]
 8006632:	621a      	str	r2, [r3, #32]
}
 8006634:	bf00      	nop
 8006636:	371c      	adds	r7, #28
 8006638:	46bd      	mov	sp, r7
 800663a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800663e:	4770      	bx	lr

08006640 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8006640:	b480      	push	{r7}
 8006642:	b087      	sub	sp, #28
 8006644:	af00      	add	r7, sp, #0
 8006646:	60f8      	str	r0, [r7, #12]
 8006648:	60b9      	str	r1, [r7, #8]
 800664a:	607a      	str	r2, [r7, #4]
 800664c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800664e:	68fb      	ldr	r3, [r7, #12]
 8006650:	6a1b      	ldr	r3, [r3, #32]
 8006652:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8006656:	68fb      	ldr	r3, [r7, #12]
 8006658:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800665a:	68fb      	ldr	r3, [r7, #12]
 800665c:	69db      	ldr	r3, [r3, #28]
 800665e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	6a1b      	ldr	r3, [r3, #32]
 8006664:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8006666:	697b      	ldr	r3, [r7, #20]
 8006668:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800666c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	021b      	lsls	r3, r3, #8
 8006672:	697a      	ldr	r2, [r7, #20]
 8006674:	4313      	orrs	r3, r2
 8006676:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800667e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8006680:	683b      	ldr	r3, [r7, #0]
 8006682:	031b      	lsls	r3, r3, #12
 8006684:	b29b      	uxth	r3, r3
 8006686:	697a      	ldr	r2, [r7, #20]
 8006688:	4313      	orrs	r3, r2
 800668a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 800668c:	693b      	ldr	r3, [r7, #16]
 800668e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8006692:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8006694:	68bb      	ldr	r3, [r7, #8]
 8006696:	031b      	lsls	r3, r3, #12
 8006698:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 800669c:	693a      	ldr	r2, [r7, #16]
 800669e:	4313      	orrs	r3, r2
 80066a0:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80066a2:	68fb      	ldr	r3, [r7, #12]
 80066a4:	697a      	ldr	r2, [r7, #20]
 80066a6:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 80066a8:	68fb      	ldr	r3, [r7, #12]
 80066aa:	693a      	ldr	r2, [r7, #16]
 80066ac:	621a      	str	r2, [r3, #32]
}
 80066ae:	bf00      	nop
 80066b0:	371c      	adds	r7, #28
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr

080066ba <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80066ba:	b480      	push	{r7}
 80066bc:	b085      	sub	sp, #20
 80066be:	af00      	add	r7, sp, #0
 80066c0:	6078      	str	r0, [r7, #4]
 80066c2:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	689b      	ldr	r3, [r3, #8]
 80066c8:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80066ca:	68fb      	ldr	r3, [r7, #12]
 80066cc:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80066d0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80066d2:	683a      	ldr	r2, [r7, #0]
 80066d4:	68fb      	ldr	r3, [r7, #12]
 80066d6:	4313      	orrs	r3, r2
 80066d8:	f043 0307 	orr.w	r3, r3, #7
 80066dc:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	68fa      	ldr	r2, [r7, #12]
 80066e2:	609a      	str	r2, [r3, #8]
}
 80066e4:	bf00      	nop
 80066e6:	3714      	adds	r7, #20
 80066e8:	46bd      	mov	sp, r7
 80066ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066ee:	4770      	bx	lr

080066f0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b087      	sub	sp, #28
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	60f8      	str	r0, [r7, #12]
 80066f8:	60b9      	str	r1, [r7, #8]
 80066fa:	607a      	str	r2, [r7, #4]
 80066fc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80066fe:	68fb      	ldr	r3, [r7, #12]
 8006700:	689b      	ldr	r3, [r3, #8]
 8006702:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006704:	697b      	ldr	r3, [r7, #20]
 8006706:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800670a:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 800670c:	683b      	ldr	r3, [r7, #0]
 800670e:	021a      	lsls	r2, r3, #8
 8006710:	687b      	ldr	r3, [r7, #4]
 8006712:	431a      	orrs	r2, r3
 8006714:	68bb      	ldr	r3, [r7, #8]
 8006716:	4313      	orrs	r3, r2
 8006718:	697a      	ldr	r2, [r7, #20]
 800671a:	4313      	orrs	r3, r2
 800671c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800671e:	68fb      	ldr	r3, [r7, #12]
 8006720:	697a      	ldr	r2, [r7, #20]
 8006722:	609a      	str	r2, [r3, #8]
}
 8006724:	bf00      	nop
 8006726:	371c      	adds	r7, #28
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr

08006730 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006730:	b480      	push	{r7}
 8006732:	b085      	sub	sp, #20
 8006734:	af00      	add	r7, sp, #0
 8006736:	6078      	str	r0, [r7, #4]
 8006738:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006740:	2b01      	cmp	r3, #1
 8006742:	d101      	bne.n	8006748 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006744:	2302      	movs	r3, #2
 8006746:	e05a      	b.n	80067fe <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8006748:	687b      	ldr	r3, [r7, #4]
 800674a:	2201      	movs	r2, #1
 800674c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006750:	687b      	ldr	r3, [r7, #4]
 8006752:	2202      	movs	r2, #2
 8006754:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	685b      	ldr	r3, [r3, #4]
 800675e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006760:	687b      	ldr	r3, [r7, #4]
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	689b      	ldr	r3, [r3, #8]
 8006766:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006768:	68fb      	ldr	r3, [r7, #12]
 800676a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800676e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	68fa      	ldr	r2, [r7, #12]
 8006776:	4313      	orrs	r3, r2
 8006778:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	681b      	ldr	r3, [r3, #0]
 800677e:	68fa      	ldr	r2, [r7, #12]
 8006780:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	4a21      	ldr	r2, [pc, #132]	; (800680c <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8006788:	4293      	cmp	r3, r2
 800678a:	d022      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800678c:	687b      	ldr	r3, [r7, #4]
 800678e:	681b      	ldr	r3, [r3, #0]
 8006790:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006794:	d01d      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	681b      	ldr	r3, [r3, #0]
 800679a:	4a1d      	ldr	r2, [pc, #116]	; (8006810 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 800679c:	4293      	cmp	r3, r2
 800679e:	d018      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067a0:	687b      	ldr	r3, [r7, #4]
 80067a2:	681b      	ldr	r3, [r3, #0]
 80067a4:	4a1b      	ldr	r2, [pc, #108]	; (8006814 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 80067a6:	4293      	cmp	r3, r2
 80067a8:	d013      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	4a1a      	ldr	r2, [pc, #104]	; (8006818 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 80067b0:	4293      	cmp	r3, r2
 80067b2:	d00e      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067b4:	687b      	ldr	r3, [r7, #4]
 80067b6:	681b      	ldr	r3, [r3, #0]
 80067b8:	4a18      	ldr	r2, [pc, #96]	; (800681c <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80067ba:	4293      	cmp	r3, r2
 80067bc:	d009      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067be:	687b      	ldr	r3, [r7, #4]
 80067c0:	681b      	ldr	r3, [r3, #0]
 80067c2:	4a17      	ldr	r2, [pc, #92]	; (8006820 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80067c4:	4293      	cmp	r3, r2
 80067c6:	d004      	beq.n	80067d2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80067c8:	687b      	ldr	r3, [r7, #4]
 80067ca:	681b      	ldr	r3, [r3, #0]
 80067cc:	4a15      	ldr	r2, [pc, #84]	; (8006824 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80067ce:	4293      	cmp	r3, r2
 80067d0:	d10c      	bne.n	80067ec <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80067d2:	68bb      	ldr	r3, [r7, #8]
 80067d4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80067d8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80067da:	683b      	ldr	r3, [r7, #0]
 80067dc:	685b      	ldr	r3, [r3, #4]
 80067de:	68ba      	ldr	r2, [r7, #8]
 80067e0:	4313      	orrs	r3, r2
 80067e2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681b      	ldr	r3, [r3, #0]
 80067e8:	68ba      	ldr	r2, [r7, #8]
 80067ea:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80067ec:	687b      	ldr	r3, [r7, #4]
 80067ee:	2201      	movs	r2, #1
 80067f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2200      	movs	r2, #0
 80067f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80067fc:	2300      	movs	r3, #0
}
 80067fe:	4618      	mov	r0, r3
 8006800:	3714      	adds	r7, #20
 8006802:	46bd      	mov	sp, r7
 8006804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006808:	4770      	bx	lr
 800680a:	bf00      	nop
 800680c:	40010000 	.word	0x40010000
 8006810:	40000400 	.word	0x40000400
 8006814:	40000800 	.word	0x40000800
 8006818:	40000c00 	.word	0x40000c00
 800681c:	40010400 	.word	0x40010400
 8006820:	40014000 	.word	0x40014000
 8006824:	40001800 	.word	0x40001800

08006828 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006828:	b480      	push	{r7}
 800682a:	b083      	sub	sp, #12
 800682c:	af00      	add	r7, sp, #0
 800682e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006830:	bf00      	nop
 8006832:	370c      	adds	r7, #12
 8006834:	46bd      	mov	sp, r7
 8006836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800683a:	4770      	bx	lr

0800683c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 800683c:	b480      	push	{r7}
 800683e:	b083      	sub	sp, #12
 8006840:	af00      	add	r7, sp, #0
 8006842:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006844:	bf00      	nop
 8006846:	370c      	adds	r7, #12
 8006848:	46bd      	mov	sp, r7
 800684a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800684e:	4770      	bx	lr

08006850 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006850:	b580      	push	{r7, lr}
 8006852:	b082      	sub	sp, #8
 8006854:	af00      	add	r7, sp, #0
 8006856:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006858:	687b      	ldr	r3, [r7, #4]
 800685a:	2b00      	cmp	r3, #0
 800685c:	d101      	bne.n	8006862 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e03f      	b.n	80068e2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006868:	b2db      	uxtb	r3, r3
 800686a:	2b00      	cmp	r3, #0
 800686c:	d106      	bne.n	800687c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800686e:	687b      	ldr	r3, [r7, #4]
 8006870:	2200      	movs	r2, #0
 8006872:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006876:	6878      	ldr	r0, [r7, #4]
 8006878:	f7fd fbaa 	bl	8003fd0 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800687c:	687b      	ldr	r3, [r7, #4]
 800687e:	2224      	movs	r2, #36	; 0x24
 8006880:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	681b      	ldr	r3, [r3, #0]
 8006888:	68da      	ldr	r2, [r3, #12]
 800688a:	687b      	ldr	r3, [r7, #4]
 800688c:	681b      	ldr	r3, [r3, #0]
 800688e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006892:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006894:	6878      	ldr	r0, [r7, #4]
 8006896:	f000 fddf 	bl	8007458 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	691a      	ldr	r2, [r3, #16]
 80068a0:	687b      	ldr	r3, [r7, #4]
 80068a2:	681b      	ldr	r3, [r3, #0]
 80068a4:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80068a8:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80068aa:	687b      	ldr	r3, [r7, #4]
 80068ac:	681b      	ldr	r3, [r3, #0]
 80068ae:	695a      	ldr	r2, [r3, #20]
 80068b0:	687b      	ldr	r3, [r7, #4]
 80068b2:	681b      	ldr	r3, [r3, #0]
 80068b4:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80068b8:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	681b      	ldr	r3, [r3, #0]
 80068be:	68da      	ldr	r2, [r3, #12]
 80068c0:	687b      	ldr	r3, [r7, #4]
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80068c8:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	2200      	movs	r2, #0
 80068ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80068d0:	687b      	ldr	r3, [r7, #4]
 80068d2:	2220      	movs	r2, #32
 80068d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80068d8:	687b      	ldr	r3, [r7, #4]
 80068da:	2220      	movs	r2, #32
 80068dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80068e0:	2300      	movs	r3, #0
}
 80068e2:	4618      	mov	r0, r3
 80068e4:	3708      	adds	r7, #8
 80068e6:	46bd      	mov	sp, r7
 80068e8:	bd80      	pop	{r7, pc}

080068ea <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80068ea:	b580      	push	{r7, lr}
 80068ec:	b08a      	sub	sp, #40	; 0x28
 80068ee:	af02      	add	r7, sp, #8
 80068f0:	60f8      	str	r0, [r7, #12]
 80068f2:	60b9      	str	r1, [r7, #8]
 80068f4:	603b      	str	r3, [r7, #0]
 80068f6:	4613      	mov	r3, r2
 80068f8:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80068fa:	2300      	movs	r3, #0
 80068fc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80068fe:	68fb      	ldr	r3, [r7, #12]
 8006900:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006904:	b2db      	uxtb	r3, r3
 8006906:	2b20      	cmp	r3, #32
 8006908:	d17c      	bne.n	8006a04 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 800690a:	68bb      	ldr	r3, [r7, #8]
 800690c:	2b00      	cmp	r3, #0
 800690e:	d002      	beq.n	8006916 <HAL_UART_Transmit+0x2c>
 8006910:	88fb      	ldrh	r3, [r7, #6]
 8006912:	2b00      	cmp	r3, #0
 8006914:	d101      	bne.n	800691a <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8006916:	2301      	movs	r3, #1
 8006918:	e075      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 800691a:	68fb      	ldr	r3, [r7, #12]
 800691c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006920:	2b01      	cmp	r3, #1
 8006922:	d101      	bne.n	8006928 <HAL_UART_Transmit+0x3e>
 8006924:	2302      	movs	r3, #2
 8006926:	e06e      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
 8006928:	68fb      	ldr	r3, [r7, #12]
 800692a:	2201      	movs	r2, #1
 800692c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006930:	68fb      	ldr	r3, [r7, #12]
 8006932:	2200      	movs	r2, #0
 8006934:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8006936:	68fb      	ldr	r3, [r7, #12]
 8006938:	2221      	movs	r2, #33	; 0x21
 800693a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 800693e:	f7fd fda5 	bl	800448c <HAL_GetTick>
 8006942:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8006944:	68fb      	ldr	r3, [r7, #12]
 8006946:	88fa      	ldrh	r2, [r7, #6]
 8006948:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 800694a:	68fb      	ldr	r3, [r7, #12]
 800694c:	88fa      	ldrh	r2, [r7, #6]
 800694e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006950:	68fb      	ldr	r3, [r7, #12]
 8006952:	689b      	ldr	r3, [r3, #8]
 8006954:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8006958:	d108      	bne.n	800696c <HAL_UART_Transmit+0x82>
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	691b      	ldr	r3, [r3, #16]
 800695e:	2b00      	cmp	r3, #0
 8006960:	d104      	bne.n	800696c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8006962:	2300      	movs	r3, #0
 8006964:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8006966:	68bb      	ldr	r3, [r7, #8]
 8006968:	61bb      	str	r3, [r7, #24]
 800696a:	e003      	b.n	8006974 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 800696c:	68bb      	ldr	r3, [r7, #8]
 800696e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8006970:	2300      	movs	r3, #0
 8006972:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8006974:	68fb      	ldr	r3, [r7, #12]
 8006976:	2200      	movs	r2, #0
 8006978:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 800697c:	e02a      	b.n	80069d4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800697e:	683b      	ldr	r3, [r7, #0]
 8006980:	9300      	str	r3, [sp, #0]
 8006982:	697b      	ldr	r3, [r7, #20]
 8006984:	2200      	movs	r2, #0
 8006986:	2180      	movs	r1, #128	; 0x80
 8006988:	68f8      	ldr	r0, [r7, #12]
 800698a:	f000 fb1f 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 800698e:	4603      	mov	r3, r0
 8006990:	2b00      	cmp	r3, #0
 8006992:	d001      	beq.n	8006998 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8006994:	2303      	movs	r3, #3
 8006996:	e036      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8006998:	69fb      	ldr	r3, [r7, #28]
 800699a:	2b00      	cmp	r3, #0
 800699c:	d10b      	bne.n	80069b6 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 800699e:	69bb      	ldr	r3, [r7, #24]
 80069a0:	881b      	ldrh	r3, [r3, #0]
 80069a2:	461a      	mov	r2, r3
 80069a4:	68fb      	ldr	r3, [r7, #12]
 80069a6:	681b      	ldr	r3, [r3, #0]
 80069a8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80069ac:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80069ae:	69bb      	ldr	r3, [r7, #24]
 80069b0:	3302      	adds	r3, #2
 80069b2:	61bb      	str	r3, [r7, #24]
 80069b4:	e007      	b.n	80069c6 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80069b6:	69fb      	ldr	r3, [r7, #28]
 80069b8:	781a      	ldrb	r2, [r3, #0]
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80069c0:	69fb      	ldr	r3, [r7, #28]
 80069c2:	3301      	adds	r3, #1
 80069c4:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80069c6:	68fb      	ldr	r3, [r7, #12]
 80069c8:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069ca:	b29b      	uxth	r3, r3
 80069cc:	3b01      	subs	r3, #1
 80069ce:	b29a      	uxth	r2, r3
 80069d0:	68fb      	ldr	r3, [r7, #12]
 80069d2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80069d4:	68fb      	ldr	r3, [r7, #12]
 80069d6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80069d8:	b29b      	uxth	r3, r3
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1cf      	bne.n	800697e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80069de:	683b      	ldr	r3, [r7, #0]
 80069e0:	9300      	str	r3, [sp, #0]
 80069e2:	697b      	ldr	r3, [r7, #20]
 80069e4:	2200      	movs	r2, #0
 80069e6:	2140      	movs	r1, #64	; 0x40
 80069e8:	68f8      	ldr	r0, [r7, #12]
 80069ea:	f000 faef 	bl	8006fcc <UART_WaitOnFlagUntilTimeout>
 80069ee:	4603      	mov	r3, r0
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d001      	beq.n	80069f8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80069f4:	2303      	movs	r3, #3
 80069f6:	e006      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80069f8:	68fb      	ldr	r3, [r7, #12]
 80069fa:	2220      	movs	r2, #32
 80069fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8006a00:	2300      	movs	r3, #0
 8006a02:	e000      	b.n	8006a06 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8006a04:	2302      	movs	r3, #2
  }
}
 8006a06:	4618      	mov	r0, r3
 8006a08:	3720      	adds	r7, #32
 8006a0a:	46bd      	mov	sp, r7
 8006a0c:	bd80      	pop	{r7, pc}

08006a0e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8006a0e:	b580      	push	{r7, lr}
 8006a10:	b084      	sub	sp, #16
 8006a12:	af00      	add	r7, sp, #0
 8006a14:	60f8      	str	r0, [r7, #12]
 8006a16:	60b9      	str	r1, [r7, #8]
 8006a18:	4613      	mov	r3, r2
 8006a1a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8006a1c:	68fb      	ldr	r3, [r7, #12]
 8006a1e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006a22:	b2db      	uxtb	r3, r3
 8006a24:	2b20      	cmp	r3, #32
 8006a26:	d11d      	bne.n	8006a64 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8006a28:	68bb      	ldr	r3, [r7, #8]
 8006a2a:	2b00      	cmp	r3, #0
 8006a2c:	d002      	beq.n	8006a34 <HAL_UART_Receive_IT+0x26>
 8006a2e:	88fb      	ldrh	r3, [r7, #6]
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d101      	bne.n	8006a38 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8006a34:	2301      	movs	r3, #1
 8006a36:	e016      	b.n	8006a66 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8006a38:	68fb      	ldr	r3, [r7, #12]
 8006a3a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006a3e:	2b01      	cmp	r3, #1
 8006a40:	d101      	bne.n	8006a46 <HAL_UART_Receive_IT+0x38>
 8006a42:	2302      	movs	r3, #2
 8006a44:	e00f      	b.n	8006a66 <HAL_UART_Receive_IT+0x58>
 8006a46:	68fb      	ldr	r3, [r7, #12]
 8006a48:	2201      	movs	r2, #1
 8006a4a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006a4e:	68fb      	ldr	r3, [r7, #12]
 8006a50:	2200      	movs	r2, #0
 8006a52:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8006a54:	88fb      	ldrh	r3, [r7, #6]
 8006a56:	461a      	mov	r2, r3
 8006a58:	68b9      	ldr	r1, [r7, #8]
 8006a5a:	68f8      	ldr	r0, [r7, #12]
 8006a5c:	f000 fb24 	bl	80070a8 <UART_Start_Receive_IT>
 8006a60:	4603      	mov	r3, r0
 8006a62:	e000      	b.n	8006a66 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8006a64:	2302      	movs	r3, #2
  }
}
 8006a66:	4618      	mov	r0, r3
 8006a68:	3710      	adds	r7, #16
 8006a6a:	46bd      	mov	sp, r7
 8006a6c:	bd80      	pop	{r7, pc}
	...

08006a70 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8006a70:	b580      	push	{r7, lr}
 8006a72:	b0ba      	sub	sp, #232	; 0xe8
 8006a74:	af00      	add	r7, sp, #0
 8006a76:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8006a78:	687b      	ldr	r3, [r7, #4]
 8006a7a:	681b      	ldr	r3, [r3, #0]
 8006a7c:	681b      	ldr	r3, [r3, #0]
 8006a7e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	681b      	ldr	r3, [r3, #0]
 8006a86:	68db      	ldr	r3, [r3, #12]
 8006a88:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	681b      	ldr	r3, [r3, #0]
 8006a90:	695b      	ldr	r3, [r3, #20]
 8006a92:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8006a96:	2300      	movs	r3, #0
 8006a98:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8006a9c:	2300      	movs	r3, #0
 8006a9e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8006aa2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aa6:	f003 030f 	and.w	r3, r3, #15
 8006aaa:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8006aae:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ab2:	2b00      	cmp	r3, #0
 8006ab4:	d10f      	bne.n	8006ad6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ab6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006aba:	f003 0320 	and.w	r3, r3, #32
 8006abe:	2b00      	cmp	r3, #0
 8006ac0:	d009      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x66>
 8006ac2:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006ac6:	f003 0320 	and.w	r3, r3, #32
 8006aca:	2b00      	cmp	r3, #0
 8006acc:	d003      	beq.n	8006ad6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8006ace:	6878      	ldr	r0, [r7, #4]
 8006ad0:	f000 fc07 	bl	80072e2 <UART_Receive_IT>
      return;
 8006ad4:	e256      	b.n	8006f84 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8006ad6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	f000 80de 	beq.w	8006c9c <HAL_UART_IRQHandler+0x22c>
 8006ae0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006ae4:	f003 0301 	and.w	r3, r3, #1
 8006ae8:	2b00      	cmp	r3, #0
 8006aea:	d106      	bne.n	8006afa <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8006aec:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006af0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	f000 80d1 	beq.w	8006c9c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8006afa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006afe:	f003 0301 	and.w	r3, r3, #1
 8006b02:	2b00      	cmp	r3, #0
 8006b04:	d00b      	beq.n	8006b1e <HAL_UART_IRQHandler+0xae>
 8006b06:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b0a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d005      	beq.n	8006b1e <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b16:	f043 0201 	orr.w	r2, r3, #1
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b1e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b22:	f003 0304 	and.w	r3, r3, #4
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d00b      	beq.n	8006b42 <HAL_UART_IRQHandler+0xd2>
 8006b2a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b2e:	f003 0301 	and.w	r3, r3, #1
 8006b32:	2b00      	cmp	r3, #0
 8006b34:	d005      	beq.n	8006b42 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8006b36:	687b      	ldr	r3, [r7, #4]
 8006b38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3a:	f043 0202 	orr.w	r2, r3, #2
 8006b3e:	687b      	ldr	r3, [r7, #4]
 8006b40:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8006b42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b46:	f003 0302 	and.w	r3, r3, #2
 8006b4a:	2b00      	cmp	r3, #0
 8006b4c:	d00b      	beq.n	8006b66 <HAL_UART_IRQHandler+0xf6>
 8006b4e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b52:	f003 0301 	and.w	r3, r3, #1
 8006b56:	2b00      	cmp	r3, #0
 8006b58:	d005      	beq.n	8006b66 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8006b5a:	687b      	ldr	r3, [r7, #4]
 8006b5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b5e:	f043 0204 	orr.w	r2, r3, #4
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8006b66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b6a:	f003 0308 	and.w	r3, r3, #8
 8006b6e:	2b00      	cmp	r3, #0
 8006b70:	d011      	beq.n	8006b96 <HAL_UART_IRQHandler+0x126>
 8006b72:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006b76:	f003 0320 	and.w	r3, r3, #32
 8006b7a:	2b00      	cmp	r3, #0
 8006b7c:	d105      	bne.n	8006b8a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8006b7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8006b82:	f003 0301 	and.w	r3, r3, #1
 8006b86:	2b00      	cmp	r3, #0
 8006b88:	d005      	beq.n	8006b96 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8006b8a:	687b      	ldr	r3, [r7, #4]
 8006b8c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b8e:	f043 0208 	orr.w	r2, r3, #8
 8006b92:	687b      	ldr	r3, [r7, #4]
 8006b94:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8006b96:	687b      	ldr	r3, [r7, #4]
 8006b98:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	f000 81ed 	beq.w	8006f7a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8006ba0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ba4:	f003 0320 	and.w	r3, r3, #32
 8006ba8:	2b00      	cmp	r3, #0
 8006baa:	d008      	beq.n	8006bbe <HAL_UART_IRQHandler+0x14e>
 8006bac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006bb0:	f003 0320 	and.w	r3, r3, #32
 8006bb4:	2b00      	cmp	r3, #0
 8006bb6:	d002      	beq.n	8006bbe <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8006bb8:	6878      	ldr	r0, [r7, #4]
 8006bba:	f000 fb92 	bl	80072e2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	681b      	ldr	r3, [r3, #0]
 8006bc2:	695b      	ldr	r3, [r3, #20]
 8006bc4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bc8:	2b40      	cmp	r3, #64	; 0x40
 8006bca:	bf0c      	ite	eq
 8006bcc:	2301      	moveq	r3, #1
 8006bce:	2300      	movne	r3, #0
 8006bd0:	b2db      	uxtb	r3, r3
 8006bd2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8006bd6:	687b      	ldr	r3, [r7, #4]
 8006bd8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006bda:	f003 0308 	and.w	r3, r3, #8
 8006bde:	2b00      	cmp	r3, #0
 8006be0:	d103      	bne.n	8006bea <HAL_UART_IRQHandler+0x17a>
 8006be2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d04f      	beq.n	8006c8a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8006bea:	6878      	ldr	r0, [r7, #4]
 8006bec:	f000 fa9a 	bl	8007124 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	695b      	ldr	r3, [r3, #20]
 8006bf6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006bfa:	2b40      	cmp	r3, #64	; 0x40
 8006bfc:	d141      	bne.n	8006c82 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006bfe:	687b      	ldr	r3, [r7, #4]
 8006c00:	681b      	ldr	r3, [r3, #0]
 8006c02:	3314      	adds	r3, #20
 8006c04:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006c08:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8006c0c:	e853 3f00 	ldrex	r3, [r3]
 8006c10:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8006c14:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8006c18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006c1c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	681b      	ldr	r3, [r3, #0]
 8006c24:	3314      	adds	r3, #20
 8006c26:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8006c2a:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8006c2e:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006c32:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8006c36:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8006c3a:	e841 2300 	strex	r3, r2, [r1]
 8006c3e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8006c42:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8006c46:	2b00      	cmp	r3, #0
 8006c48:	d1d9      	bne.n	8006bfe <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8006c4a:	687b      	ldr	r3, [r7, #4]
 8006c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c4e:	2b00      	cmp	r3, #0
 8006c50:	d013      	beq.n	8006c7a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8006c52:	687b      	ldr	r3, [r7, #4]
 8006c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c56:	4a7d      	ldr	r2, [pc, #500]	; (8006e4c <HAL_UART_IRQHandler+0x3dc>)
 8006c58:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c5e:	4618      	mov	r0, r3
 8006c60:	f7fd fddf 	bl	8004822 <HAL_DMA_Abort_IT>
 8006c64:	4603      	mov	r3, r0
 8006c66:	2b00      	cmp	r3, #0
 8006c68:	d016      	beq.n	8006c98 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006c6e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006c70:	687a      	ldr	r2, [r7, #4]
 8006c72:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006c74:	4610      	mov	r0, r2
 8006c76:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c78:	e00e      	b.n	8006c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8006c7a:	6878      	ldr	r0, [r7, #4]
 8006c7c:	f000 f990 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c80:	e00a      	b.n	8006c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8006c82:	6878      	ldr	r0, [r7, #4]
 8006c84:	f000 f98c 	bl	8006fa0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c88:	e006      	b.n	8006c98 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8006c8a:	6878      	ldr	r0, [r7, #4]
 8006c8c:	f000 f988 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c90:	687b      	ldr	r3, [r7, #4]
 8006c92:	2200      	movs	r2, #0
 8006c94:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8006c96:	e170      	b.n	8006f7a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006c98:	bf00      	nop
    return;
 8006c9a:	e16e      	b.n	8006f7a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006c9c:	687b      	ldr	r3, [r7, #4]
 8006c9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006ca0:	2b01      	cmp	r3, #1
 8006ca2:	f040 814a 	bne.w	8006f3a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8006ca6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006caa:	f003 0310 	and.w	r3, r3, #16
 8006cae:	2b00      	cmp	r3, #0
 8006cb0:	f000 8143 	beq.w	8006f3a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8006cb4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006cb8:	f003 0310 	and.w	r3, r3, #16
 8006cbc:	2b00      	cmp	r3, #0
 8006cbe:	f000 813c 	beq.w	8006f3a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006cc2:	2300      	movs	r3, #0
 8006cc4:	60bb      	str	r3, [r7, #8]
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	681b      	ldr	r3, [r3, #0]
 8006cca:	681b      	ldr	r3, [r3, #0]
 8006ccc:	60bb      	str	r3, [r7, #8]
 8006cce:	687b      	ldr	r3, [r7, #4]
 8006cd0:	681b      	ldr	r3, [r3, #0]
 8006cd2:	685b      	ldr	r3, [r3, #4]
 8006cd4:	60bb      	str	r3, [r7, #8]
 8006cd6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	681b      	ldr	r3, [r3, #0]
 8006cdc:	695b      	ldr	r3, [r3, #20]
 8006cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006ce2:	2b40      	cmp	r3, #64	; 0x40
 8006ce4:	f040 80b4 	bne.w	8006e50 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8006ce8:	687b      	ldr	r3, [r7, #4]
 8006cea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	685b      	ldr	r3, [r3, #4]
 8006cf0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006cf4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8006cf8:	2b00      	cmp	r3, #0
 8006cfa:	f000 8140 	beq.w	8006f7e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006cfe:	687b      	ldr	r3, [r7, #4]
 8006d00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8006d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d06:	429a      	cmp	r2, r3
 8006d08:	f080 8139 	bcs.w	8006f7e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006d0c:	687b      	ldr	r3, [r7, #4]
 8006d0e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8006d12:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006d14:	687b      	ldr	r3, [r7, #4]
 8006d16:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006d18:	69db      	ldr	r3, [r3, #28]
 8006d1a:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8006d1e:	f000 8088 	beq.w	8006e32 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006d22:	687b      	ldr	r3, [r7, #4]
 8006d24:	681b      	ldr	r3, [r3, #0]
 8006d26:	330c      	adds	r3, #12
 8006d28:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d2c:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8006d30:	e853 3f00 	ldrex	r3, [r3]
 8006d34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8006d38:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8006d3c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8006d40:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	330c      	adds	r3, #12
 8006d4a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8006d4e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8006d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d56:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8006d5a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8006d5e:	e841 2300 	strex	r3, r2, [r1]
 8006d62:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8006d66:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d1d9      	bne.n	8006d22 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006d6e:	687b      	ldr	r3, [r7, #4]
 8006d70:	681b      	ldr	r3, [r3, #0]
 8006d72:	3314      	adds	r3, #20
 8006d74:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006d76:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d78:	e853 3f00 	ldrex	r3, [r3]
 8006d7c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8006d7e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006d80:	f023 0301 	bic.w	r3, r3, #1
 8006d84:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006d88:	687b      	ldr	r3, [r7, #4]
 8006d8a:	681b      	ldr	r3, [r3, #0]
 8006d8c:	3314      	adds	r3, #20
 8006d8e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8006d92:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8006d96:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006d98:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8006d9a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8006d9e:	e841 2300 	strex	r3, r2, [r1]
 8006da2:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8006da4:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8006da6:	2b00      	cmp	r3, #0
 8006da8:	d1e1      	bne.n	8006d6e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	681b      	ldr	r3, [r3, #0]
 8006dae:	3314      	adds	r3, #20
 8006db0:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006db2:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8006db4:	e853 3f00 	ldrex	r3, [r3]
 8006db8:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8006dba:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8006dbc:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006dc0:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	3314      	adds	r3, #20
 8006dca:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8006dce:	66fa      	str	r2, [r7, #108]	; 0x6c
 8006dd0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006dd2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8006dd4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8006dd6:	e841 2300 	strex	r3, r2, [r1]
 8006dda:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8006ddc:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8006dde:	2b00      	cmp	r3, #0
 8006de0:	d1e3      	bne.n	8006daa <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	2220      	movs	r2, #32
 8006de6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	2200      	movs	r2, #0
 8006dee:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006df0:	687b      	ldr	r3, [r7, #4]
 8006df2:	681b      	ldr	r3, [r3, #0]
 8006df4:	330c      	adds	r3, #12
 8006df6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006df8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8006dfa:	e853 3f00 	ldrex	r3, [r3]
 8006dfe:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8006e00:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006e02:	f023 0310 	bic.w	r3, r3, #16
 8006e06:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006e0a:	687b      	ldr	r3, [r7, #4]
 8006e0c:	681b      	ldr	r3, [r3, #0]
 8006e0e:	330c      	adds	r3, #12
 8006e10:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8006e14:	65ba      	str	r2, [r7, #88]	; 0x58
 8006e16:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e18:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8006e1a:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8006e1c:	e841 2300 	strex	r3, r2, [r1]
 8006e20:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8006e22:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8006e24:	2b00      	cmp	r3, #0
 8006e26:	d1e3      	bne.n	8006df0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8006e28:	687b      	ldr	r3, [r7, #4]
 8006e2a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006e2c:	4618      	mov	r0, r3
 8006e2e:	f7fd fc88 	bl	8004742 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8006e32:	687b      	ldr	r3, [r7, #4]
 8006e34:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e36:	687b      	ldr	r3, [r7, #4]
 8006e38:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e3a:	b29b      	uxth	r3, r3
 8006e3c:	1ad3      	subs	r3, r2, r3
 8006e3e:	b29b      	uxth	r3, r3
 8006e40:	4619      	mov	r1, r3
 8006e42:	6878      	ldr	r0, [r7, #4]
 8006e44:	f000 f8b6 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006e48:	e099      	b.n	8006f7e <HAL_UART_IRQHandler+0x50e>
 8006e4a:	bf00      	nop
 8006e4c:	080071eb 	.word	0x080071eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8006e50:	687b      	ldr	r3, [r7, #4]
 8006e52:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e58:	b29b      	uxth	r3, r3
 8006e5a:	1ad3      	subs	r3, r2, r3
 8006e5c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8006e60:	687b      	ldr	r3, [r7, #4]
 8006e62:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8006e64:	b29b      	uxth	r3, r3
 8006e66:	2b00      	cmp	r3, #0
 8006e68:	f000 808b 	beq.w	8006f82 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8006e6c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	f000 8086 	beq.w	8006f82 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006e76:	687b      	ldr	r3, [r7, #4]
 8006e78:	681b      	ldr	r3, [r3, #0]
 8006e7a:	330c      	adds	r3, #12
 8006e7c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006e7e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006e80:	e853 3f00 	ldrex	r3, [r3]
 8006e84:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8006e86:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006e88:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8006e8c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8006e90:	687b      	ldr	r3, [r7, #4]
 8006e92:	681b      	ldr	r3, [r3, #0]
 8006e94:	330c      	adds	r3, #12
 8006e96:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8006e9a:	647a      	str	r2, [r7, #68]	; 0x44
 8006e9c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006e9e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8006ea0:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8006ea2:	e841 2300 	strex	r3, r2, [r1]
 8006ea6:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8006ea8:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8006eaa:	2b00      	cmp	r3, #0
 8006eac:	d1e3      	bne.n	8006e76 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	681b      	ldr	r3, [r3, #0]
 8006eb2:	3314      	adds	r3, #20
 8006eb4:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006eb6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006eb8:	e853 3f00 	ldrex	r3, [r3]
 8006ebc:	623b      	str	r3, [r7, #32]
   return(result);
 8006ebe:	6a3b      	ldr	r3, [r7, #32]
 8006ec0:	f023 0301 	bic.w	r3, r3, #1
 8006ec4:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006ec8:	687b      	ldr	r3, [r7, #4]
 8006eca:	681b      	ldr	r3, [r3, #0]
 8006ecc:	3314      	adds	r3, #20
 8006ece:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8006ed2:	633a      	str	r2, [r7, #48]	; 0x30
 8006ed4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006ed6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8006ed8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8006eda:	e841 2300 	strex	r3, r2, [r1]
 8006ede:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8006ee0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ee2:	2b00      	cmp	r3, #0
 8006ee4:	d1e3      	bne.n	8006eae <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8006ee6:	687b      	ldr	r3, [r7, #4]
 8006ee8:	2220      	movs	r2, #32
 8006eea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006eee:	687b      	ldr	r3, [r7, #4]
 8006ef0:	2200      	movs	r2, #0
 8006ef2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006ef4:	687b      	ldr	r3, [r7, #4]
 8006ef6:	681b      	ldr	r3, [r3, #0]
 8006ef8:	330c      	adds	r3, #12
 8006efa:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006efc:	693b      	ldr	r3, [r7, #16]
 8006efe:	e853 3f00 	ldrex	r3, [r3]
 8006f02:	60fb      	str	r3, [r7, #12]
   return(result);
 8006f04:	68fb      	ldr	r3, [r7, #12]
 8006f06:	f023 0310 	bic.w	r3, r3, #16
 8006f0a:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8006f0e:	687b      	ldr	r3, [r7, #4]
 8006f10:	681b      	ldr	r3, [r3, #0]
 8006f12:	330c      	adds	r3, #12
 8006f14:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8006f18:	61fa      	str	r2, [r7, #28]
 8006f1a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006f1c:	69b9      	ldr	r1, [r7, #24]
 8006f1e:	69fa      	ldr	r2, [r7, #28]
 8006f20:	e841 2300 	strex	r3, r2, [r1]
 8006f24:	617b      	str	r3, [r7, #20]
   return(result);
 8006f26:	697b      	ldr	r3, [r7, #20]
 8006f28:	2b00      	cmp	r3, #0
 8006f2a:	d1e3      	bne.n	8006ef4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8006f2c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8006f30:	4619      	mov	r1, r3
 8006f32:	6878      	ldr	r0, [r7, #4]
 8006f34:	f000 f83e 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8006f38:	e023      	b.n	8006f82 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8006f3a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f42:	2b00      	cmp	r3, #0
 8006f44:	d009      	beq.n	8006f5a <HAL_UART_IRQHandler+0x4ea>
 8006f46:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006f4e:	2b00      	cmp	r3, #0
 8006f50:	d003      	beq.n	8006f5a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8006f52:	6878      	ldr	r0, [r7, #4]
 8006f54:	f000 f95d 	bl	8007212 <UART_Transmit_IT>
    return;
 8006f58:	e014      	b.n	8006f84 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8006f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006f5e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f62:	2b00      	cmp	r3, #0
 8006f64:	d00e      	beq.n	8006f84 <HAL_UART_IRQHandler+0x514>
 8006f66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8006f6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006f6e:	2b00      	cmp	r3, #0
 8006f70:	d008      	beq.n	8006f84 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8006f72:	6878      	ldr	r0, [r7, #4]
 8006f74:	f000 f99d 	bl	80072b2 <UART_EndTransmit_IT>
    return;
 8006f78:	e004      	b.n	8006f84 <HAL_UART_IRQHandler+0x514>
    return;
 8006f7a:	bf00      	nop
 8006f7c:	e002      	b.n	8006f84 <HAL_UART_IRQHandler+0x514>
      return;
 8006f7e:	bf00      	nop
 8006f80:	e000      	b.n	8006f84 <HAL_UART_IRQHandler+0x514>
      return;
 8006f82:	bf00      	nop
  }
}
 8006f84:	37e8      	adds	r7, #232	; 0xe8
 8006f86:	46bd      	mov	sp, r7
 8006f88:	bd80      	pop	{r7, pc}
 8006f8a:	bf00      	nop

08006f8c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006f8c:	b480      	push	{r7}
 8006f8e:	b083      	sub	sp, #12
 8006f90:	af00      	add	r7, sp, #0
 8006f92:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006f94:	bf00      	nop
 8006f96:	370c      	adds	r7, #12
 8006f98:	46bd      	mov	sp, r7
 8006f9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f9e:	4770      	bx	lr

08006fa0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8006fa0:	b480      	push	{r7}
 8006fa2:	b083      	sub	sp, #12
 8006fa4:	af00      	add	r7, sp, #0
 8006fa6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006fa8:	bf00      	nop
 8006faa:	370c      	adds	r7, #12
 8006fac:	46bd      	mov	sp, r7
 8006fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb2:	4770      	bx	lr

08006fb4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006fb4:	b480      	push	{r7}
 8006fb6:	b083      	sub	sp, #12
 8006fb8:	af00      	add	r7, sp, #0
 8006fba:	6078      	str	r0, [r7, #4]
 8006fbc:	460b      	mov	r3, r1
 8006fbe:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8006fc0:	bf00      	nop
 8006fc2:	370c      	adds	r7, #12
 8006fc4:	46bd      	mov	sp, r7
 8006fc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fca:	4770      	bx	lr

08006fcc <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006fcc:	b580      	push	{r7, lr}
 8006fce:	b090      	sub	sp, #64	; 0x40
 8006fd0:	af00      	add	r7, sp, #0
 8006fd2:	60f8      	str	r0, [r7, #12]
 8006fd4:	60b9      	str	r1, [r7, #8]
 8006fd6:	603b      	str	r3, [r7, #0]
 8006fd8:	4613      	mov	r3, r2
 8006fda:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006fdc:	e050      	b.n	8007080 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8006fde:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006fe4:	d04c      	beq.n	8007080 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8006fe6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8006fe8:	2b00      	cmp	r3, #0
 8006fea:	d007      	beq.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x30>
 8006fec:	f7fd fa4e 	bl	800448c <HAL_GetTick>
 8006ff0:	4602      	mov	r2, r0
 8006ff2:	683b      	ldr	r3, [r7, #0]
 8006ff4:	1ad3      	subs	r3, r2, r3
 8006ff6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8006ff8:	429a      	cmp	r2, r3
 8006ffa:	d241      	bcs.n	8007080 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8006ffc:	68fb      	ldr	r3, [r7, #12]
 8006ffe:	681b      	ldr	r3, [r3, #0]
 8007000:	330c      	adds	r3, #12
 8007002:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007004:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007006:	e853 3f00 	ldrex	r3, [r3]
 800700a:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800700c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800700e:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8007012:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007014:	68fb      	ldr	r3, [r7, #12]
 8007016:	681b      	ldr	r3, [r3, #0]
 8007018:	330c      	adds	r3, #12
 800701a:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 800701c:	637a      	str	r2, [r7, #52]	; 0x34
 800701e:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007020:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8007022:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8007024:	e841 2300 	strex	r3, r2, [r1]
 8007028:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	2b00      	cmp	r3, #0
 800702e:	d1e5      	bne.n	8006ffc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007030:	68fb      	ldr	r3, [r7, #12]
 8007032:	681b      	ldr	r3, [r3, #0]
 8007034:	3314      	adds	r3, #20
 8007036:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007038:	697b      	ldr	r3, [r7, #20]
 800703a:	e853 3f00 	ldrex	r3, [r3]
 800703e:	613b      	str	r3, [r7, #16]
   return(result);
 8007040:	693b      	ldr	r3, [r7, #16]
 8007042:	f023 0301 	bic.w	r3, r3, #1
 8007046:	63bb      	str	r3, [r7, #56]	; 0x38
 8007048:	68fb      	ldr	r3, [r7, #12]
 800704a:	681b      	ldr	r3, [r3, #0]
 800704c:	3314      	adds	r3, #20
 800704e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8007050:	623a      	str	r2, [r7, #32]
 8007052:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007054:	69f9      	ldr	r1, [r7, #28]
 8007056:	6a3a      	ldr	r2, [r7, #32]
 8007058:	e841 2300 	strex	r3, r2, [r1]
 800705c:	61bb      	str	r3, [r7, #24]
   return(result);
 800705e:	69bb      	ldr	r3, [r7, #24]
 8007060:	2b00      	cmp	r3, #0
 8007062:	d1e5      	bne.n	8007030 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8007064:	68fb      	ldr	r3, [r7, #12]
 8007066:	2220      	movs	r2, #32
 8007068:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800706c:	68fb      	ldr	r3, [r7, #12]
 800706e:	2220      	movs	r2, #32
 8007070:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8007074:	68fb      	ldr	r3, [r7, #12]
 8007076:	2200      	movs	r2, #0
 8007078:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800707c:	2303      	movs	r3, #3
 800707e:	e00f      	b.n	80070a0 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8007080:	68fb      	ldr	r3, [r7, #12]
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	681a      	ldr	r2, [r3, #0]
 8007086:	68bb      	ldr	r3, [r7, #8]
 8007088:	4013      	ands	r3, r2
 800708a:	68ba      	ldr	r2, [r7, #8]
 800708c:	429a      	cmp	r2, r3
 800708e:	bf0c      	ite	eq
 8007090:	2301      	moveq	r3, #1
 8007092:	2300      	movne	r3, #0
 8007094:	b2db      	uxtb	r3, r3
 8007096:	461a      	mov	r2, r3
 8007098:	79fb      	ldrb	r3, [r7, #7]
 800709a:	429a      	cmp	r2, r3
 800709c:	d09f      	beq.n	8006fde <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800709e:	2300      	movs	r3, #0
}
 80070a0:	4618      	mov	r0, r3
 80070a2:	3740      	adds	r7, #64	; 0x40
 80070a4:	46bd      	mov	sp, r7
 80070a6:	bd80      	pop	{r7, pc}

080070a8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80070a8:	b480      	push	{r7}
 80070aa:	b085      	sub	sp, #20
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	60f8      	str	r0, [r7, #12]
 80070b0:	60b9      	str	r1, [r7, #8]
 80070b2:	4613      	mov	r3, r2
 80070b4:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80070b6:	68fb      	ldr	r3, [r7, #12]
 80070b8:	68ba      	ldr	r2, [r7, #8]
 80070ba:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80070bc:	68fb      	ldr	r3, [r7, #12]
 80070be:	88fa      	ldrh	r2, [r7, #6]
 80070c0:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 80070c2:	68fb      	ldr	r3, [r7, #12]
 80070c4:	88fa      	ldrh	r2, [r7, #6]
 80070c6:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80070c8:	68fb      	ldr	r3, [r7, #12]
 80070ca:	2200      	movs	r2, #0
 80070cc:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80070ce:	68fb      	ldr	r3, [r7, #12]
 80070d0:	2222      	movs	r2, #34	; 0x22
 80070d2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80070d6:	68fb      	ldr	r3, [r7, #12]
 80070d8:	2200      	movs	r2, #0
 80070da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (huart->Init.Parity != UART_PARITY_NONE)
 80070de:	68fb      	ldr	r3, [r7, #12]
 80070e0:	691b      	ldr	r3, [r3, #16]
 80070e2:	2b00      	cmp	r3, #0
 80070e4:	d007      	beq.n	80070f6 <UART_Start_Receive_IT+0x4e>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80070e6:	68fb      	ldr	r3, [r7, #12]
 80070e8:	681b      	ldr	r3, [r3, #0]
 80070ea:	68da      	ldr	r2, [r3, #12]
 80070ec:	68fb      	ldr	r3, [r7, #12]
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80070f4:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80070f6:	68fb      	ldr	r3, [r7, #12]
 80070f8:	681b      	ldr	r3, [r3, #0]
 80070fa:	695a      	ldr	r2, [r3, #20]
 80070fc:	68fb      	ldr	r3, [r7, #12]
 80070fe:	681b      	ldr	r3, [r3, #0]
 8007100:	f042 0201 	orr.w	r2, r2, #1
 8007104:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8007106:	68fb      	ldr	r3, [r7, #12]
 8007108:	681b      	ldr	r3, [r3, #0]
 800710a:	68da      	ldr	r2, [r3, #12]
 800710c:	68fb      	ldr	r3, [r7, #12]
 800710e:	681b      	ldr	r3, [r3, #0]
 8007110:	f042 0220 	orr.w	r2, r2, #32
 8007114:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8007116:	2300      	movs	r3, #0
}
 8007118:	4618      	mov	r0, r3
 800711a:	3714      	adds	r7, #20
 800711c:	46bd      	mov	sp, r7
 800711e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007122:	4770      	bx	lr

08007124 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8007124:	b480      	push	{r7}
 8007126:	b095      	sub	sp, #84	; 0x54
 8007128:	af00      	add	r7, sp, #0
 800712a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	681b      	ldr	r3, [r3, #0]
 8007130:	330c      	adds	r3, #12
 8007132:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007134:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007136:	e853 3f00 	ldrex	r3, [r3]
 800713a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 800713c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8007142:	64fb      	str	r3, [r7, #76]	; 0x4c
 8007144:	687b      	ldr	r3, [r7, #4]
 8007146:	681b      	ldr	r3, [r3, #0]
 8007148:	330c      	adds	r3, #12
 800714a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 800714c:	643a      	str	r2, [r7, #64]	; 0x40
 800714e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007150:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8007152:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8007154:	e841 2300 	strex	r3, r2, [r1]
 8007158:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 800715a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800715c:	2b00      	cmp	r3, #0
 800715e:	d1e5      	bne.n	800712c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007160:	687b      	ldr	r3, [r7, #4]
 8007162:	681b      	ldr	r3, [r3, #0]
 8007164:	3314      	adds	r3, #20
 8007166:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8007168:	6a3b      	ldr	r3, [r7, #32]
 800716a:	e853 3f00 	ldrex	r3, [r3]
 800716e:	61fb      	str	r3, [r7, #28]
   return(result);
 8007170:	69fb      	ldr	r3, [r7, #28]
 8007172:	f023 0301 	bic.w	r3, r3, #1
 8007176:	64bb      	str	r3, [r7, #72]	; 0x48
 8007178:	687b      	ldr	r3, [r7, #4]
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	3314      	adds	r3, #20
 800717e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8007180:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007182:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8007184:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8007186:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007188:	e841 2300 	strex	r3, r2, [r1]
 800718c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800718e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007190:	2b00      	cmp	r3, #0
 8007192:	d1e5      	bne.n	8007160 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007198:	2b01      	cmp	r3, #1
 800719a:	d119      	bne.n	80071d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800719c:	687b      	ldr	r3, [r7, #4]
 800719e:	681b      	ldr	r3, [r3, #0]
 80071a0:	330c      	adds	r3, #12
 80071a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80071a4:	68fb      	ldr	r3, [r7, #12]
 80071a6:	e853 3f00 	ldrex	r3, [r3]
 80071aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80071ac:	68bb      	ldr	r3, [r7, #8]
 80071ae:	f023 0310 	bic.w	r3, r3, #16
 80071b2:	647b      	str	r3, [r7, #68]	; 0x44
 80071b4:	687b      	ldr	r3, [r7, #4]
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	330c      	adds	r3, #12
 80071ba:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80071bc:	61ba      	str	r2, [r7, #24]
 80071be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80071c0:	6979      	ldr	r1, [r7, #20]
 80071c2:	69ba      	ldr	r2, [r7, #24]
 80071c4:	e841 2300 	strex	r3, r2, [r1]
 80071c8:	613b      	str	r3, [r7, #16]
   return(result);
 80071ca:	693b      	ldr	r3, [r7, #16]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d1e5      	bne.n	800719c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2220      	movs	r2, #32
 80071d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80071d8:	687b      	ldr	r3, [r7, #4]
 80071da:	2200      	movs	r2, #0
 80071dc:	631a      	str	r2, [r3, #48]	; 0x30
}
 80071de:	bf00      	nop
 80071e0:	3754      	adds	r7, #84	; 0x54
 80071e2:	46bd      	mov	sp, r7
 80071e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071e8:	4770      	bx	lr

080071ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80071ea:	b580      	push	{r7, lr}
 80071ec:	b084      	sub	sp, #16
 80071ee:	af00      	add	r7, sp, #0
 80071f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80071f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80071f8:	68fb      	ldr	r3, [r7, #12]
 80071fa:	2200      	movs	r2, #0
 80071fc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80071fe:	68fb      	ldr	r3, [r7, #12]
 8007200:	2200      	movs	r2, #0
 8007202:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007204:	68f8      	ldr	r0, [r7, #12]
 8007206:	f7ff fecb 	bl	8006fa0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800720a:	bf00      	nop
 800720c:	3710      	adds	r7, #16
 800720e:	46bd      	mov	sp, r7
 8007210:	bd80      	pop	{r7, pc}

08007212 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8007212:	b480      	push	{r7}
 8007214:	b085      	sub	sp, #20
 8007216:	af00      	add	r7, sp, #0
 8007218:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800721a:	687b      	ldr	r3, [r7, #4]
 800721c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007220:	b2db      	uxtb	r3, r3
 8007222:	2b21      	cmp	r3, #33	; 0x21
 8007224:	d13e      	bne.n	80072a4 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8007226:	687b      	ldr	r3, [r7, #4]
 8007228:	689b      	ldr	r3, [r3, #8]
 800722a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800722e:	d114      	bne.n	800725a <UART_Transmit_IT+0x48>
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	691b      	ldr	r3, [r3, #16]
 8007234:	2b00      	cmp	r3, #0
 8007236:	d110      	bne.n	800725a <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	6a1b      	ldr	r3, [r3, #32]
 800723c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800723e:	68fb      	ldr	r3, [r7, #12]
 8007240:	881b      	ldrh	r3, [r3, #0]
 8007242:	461a      	mov	r2, r3
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800724c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800724e:	687b      	ldr	r3, [r7, #4]
 8007250:	6a1b      	ldr	r3, [r3, #32]
 8007252:	1c9a      	adds	r2, r3, #2
 8007254:	687b      	ldr	r3, [r7, #4]
 8007256:	621a      	str	r2, [r3, #32]
 8007258:	e008      	b.n	800726c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800725a:	687b      	ldr	r3, [r7, #4]
 800725c:	6a1b      	ldr	r3, [r3, #32]
 800725e:	1c59      	adds	r1, r3, #1
 8007260:	687a      	ldr	r2, [r7, #4]
 8007262:	6211      	str	r1, [r2, #32]
 8007264:	781a      	ldrb	r2, [r3, #0]
 8007266:	687b      	ldr	r3, [r7, #4]
 8007268:	681b      	ldr	r3, [r3, #0]
 800726a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800726c:	687b      	ldr	r3, [r7, #4]
 800726e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8007270:	b29b      	uxth	r3, r3
 8007272:	3b01      	subs	r3, #1
 8007274:	b29b      	uxth	r3, r3
 8007276:	687a      	ldr	r2, [r7, #4]
 8007278:	4619      	mov	r1, r3
 800727a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800727c:	2b00      	cmp	r3, #0
 800727e:	d10f      	bne.n	80072a0 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	681b      	ldr	r3, [r3, #0]
 8007284:	68da      	ldr	r2, [r3, #12]
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800728e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	68da      	ldr	r2, [r3, #12]
 8007296:	687b      	ldr	r3, [r7, #4]
 8007298:	681b      	ldr	r3, [r3, #0]
 800729a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800729e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80072a0:	2300      	movs	r3, #0
 80072a2:	e000      	b.n	80072a6 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80072a4:	2302      	movs	r3, #2
  }
}
 80072a6:	4618      	mov	r0, r3
 80072a8:	3714      	adds	r7, #20
 80072aa:	46bd      	mov	sp, r7
 80072ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072b0:	4770      	bx	lr

080072b2 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80072b2:	b580      	push	{r7, lr}
 80072b4:	b082      	sub	sp, #8
 80072b6:	af00      	add	r7, sp, #0
 80072b8:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80072ba:	687b      	ldr	r3, [r7, #4]
 80072bc:	681b      	ldr	r3, [r3, #0]
 80072be:	68da      	ldr	r2, [r3, #12]
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681b      	ldr	r3, [r3, #0]
 80072c4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80072c8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80072ca:	687b      	ldr	r3, [r7, #4]
 80072cc:	2220      	movs	r2, #32
 80072ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80072d2:	6878      	ldr	r0, [r7, #4]
 80072d4:	f7ff fe5a 	bl	8006f8c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3708      	adds	r7, #8
 80072de:	46bd      	mov	sp, r7
 80072e0:	bd80      	pop	{r7, pc}

080072e2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80072e2:	b580      	push	{r7, lr}
 80072e4:	b08c      	sub	sp, #48	; 0x30
 80072e6:	af00      	add	r7, sp, #0
 80072e8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80072ea:	687b      	ldr	r3, [r7, #4]
 80072ec:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80072f0:	b2db      	uxtb	r3, r3
 80072f2:	2b22      	cmp	r3, #34	; 0x22
 80072f4:	f040 80ab 	bne.w	800744e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	689b      	ldr	r3, [r3, #8]
 80072fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007300:	d117      	bne.n	8007332 <UART_Receive_IT+0x50>
 8007302:	687b      	ldr	r3, [r7, #4]
 8007304:	691b      	ldr	r3, [r3, #16]
 8007306:	2b00      	cmp	r3, #0
 8007308:	d113      	bne.n	8007332 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 800730a:	2300      	movs	r3, #0
 800730c:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 800730e:	687b      	ldr	r3, [r7, #4]
 8007310:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007312:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	685b      	ldr	r3, [r3, #4]
 800731a:	b29b      	uxth	r3, r3
 800731c:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8007320:	b29a      	uxth	r2, r3
 8007322:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007324:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8007326:	687b      	ldr	r3, [r7, #4]
 8007328:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800732a:	1c9a      	adds	r2, r3, #2
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	629a      	str	r2, [r3, #40]	; 0x28
 8007330:	e026      	b.n	8007380 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007336:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8007338:	2300      	movs	r3, #0
 800733a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800733c:	687b      	ldr	r3, [r7, #4]
 800733e:	689b      	ldr	r3, [r3, #8]
 8007340:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007344:	d007      	beq.n	8007356 <UART_Receive_IT+0x74>
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	689b      	ldr	r3, [r3, #8]
 800734a:	2b00      	cmp	r3, #0
 800734c:	d10a      	bne.n	8007364 <UART_Receive_IT+0x82>
 800734e:	687b      	ldr	r3, [r7, #4]
 8007350:	691b      	ldr	r3, [r3, #16]
 8007352:	2b00      	cmp	r3, #0
 8007354:	d106      	bne.n	8007364 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	685b      	ldr	r3, [r3, #4]
 800735c:	b2da      	uxtb	r2, r3
 800735e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007360:	701a      	strb	r2, [r3, #0]
 8007362:	e008      	b.n	8007376 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8007364:	687b      	ldr	r3, [r7, #4]
 8007366:	681b      	ldr	r3, [r3, #0]
 8007368:	685b      	ldr	r3, [r3, #4]
 800736a:	b2db      	uxtb	r3, r3
 800736c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8007370:	b2da      	uxtb	r2, r3
 8007372:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007374:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8007376:	687b      	ldr	r3, [r7, #4]
 8007378:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800737a:	1c5a      	adds	r2, r3, #1
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007384:	b29b      	uxth	r3, r3
 8007386:	3b01      	subs	r3, #1
 8007388:	b29b      	uxth	r3, r3
 800738a:	687a      	ldr	r2, [r7, #4]
 800738c:	4619      	mov	r1, r3
 800738e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8007390:	2b00      	cmp	r3, #0
 8007392:	d15a      	bne.n	800744a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8007394:	687b      	ldr	r3, [r7, #4]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	68da      	ldr	r2, [r3, #12]
 800739a:	687b      	ldr	r3, [r7, #4]
 800739c:	681b      	ldr	r3, [r3, #0]
 800739e:	f022 0220 	bic.w	r2, r2, #32
 80073a2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80073a4:	687b      	ldr	r3, [r7, #4]
 80073a6:	681b      	ldr	r3, [r3, #0]
 80073a8:	68da      	ldr	r2, [r3, #12]
 80073aa:	687b      	ldr	r3, [r7, #4]
 80073ac:	681b      	ldr	r3, [r3, #0]
 80073ae:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80073b2:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	695a      	ldr	r2, [r3, #20]
 80073ba:	687b      	ldr	r3, [r7, #4]
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f022 0201 	bic.w	r2, r2, #1
 80073c2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80073c4:	687b      	ldr	r3, [r7, #4]
 80073c6:	2220      	movs	r2, #32
 80073c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80073d0:	2b01      	cmp	r3, #1
 80073d2:	d135      	bne.n	8007440 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	2200      	movs	r2, #0
 80073d8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	681b      	ldr	r3, [r3, #0]
 80073de:	330c      	adds	r3, #12
 80073e0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80073e2:	697b      	ldr	r3, [r7, #20]
 80073e4:	e853 3f00 	ldrex	r3, [r3]
 80073e8:	613b      	str	r3, [r7, #16]
   return(result);
 80073ea:	693b      	ldr	r3, [r7, #16]
 80073ec:	f023 0310 	bic.w	r3, r3, #16
 80073f0:	627b      	str	r3, [r7, #36]	; 0x24
 80073f2:	687b      	ldr	r3, [r7, #4]
 80073f4:	681b      	ldr	r3, [r3, #0]
 80073f6:	330c      	adds	r3, #12
 80073f8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80073fa:	623a      	str	r2, [r7, #32]
 80073fc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80073fe:	69f9      	ldr	r1, [r7, #28]
 8007400:	6a3a      	ldr	r2, [r7, #32]
 8007402:	e841 2300 	strex	r3, r2, [r1]
 8007406:	61bb      	str	r3, [r7, #24]
   return(result);
 8007408:	69bb      	ldr	r3, [r7, #24]
 800740a:	2b00      	cmp	r3, #0
 800740c:	d1e5      	bne.n	80073da <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	681b      	ldr	r3, [r3, #0]
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 0310 	and.w	r3, r3, #16
 8007418:	2b10      	cmp	r3, #16
 800741a:	d10a      	bne.n	8007432 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 800741c:	2300      	movs	r3, #0
 800741e:	60fb      	str	r3, [r7, #12]
 8007420:	687b      	ldr	r3, [r7, #4]
 8007422:	681b      	ldr	r3, [r3, #0]
 8007424:	681b      	ldr	r3, [r3, #0]
 8007426:	60fb      	str	r3, [r7, #12]
 8007428:	687b      	ldr	r3, [r7, #4]
 800742a:	681b      	ldr	r3, [r3, #0]
 800742c:	685b      	ldr	r3, [r3, #4]
 800742e:	60fb      	str	r3, [r7, #12]
 8007430:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007436:	4619      	mov	r1, r3
 8007438:	6878      	ldr	r0, [r7, #4]
 800743a:	f7ff fdbb 	bl	8006fb4 <HAL_UARTEx_RxEventCallback>
 800743e:	e002      	b.n	8007446 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8007440:	6878      	ldr	r0, [r7, #4]
 8007442:	f7fb fc9b 	bl	8002d7c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8007446:	2300      	movs	r3, #0
 8007448:	e002      	b.n	8007450 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800744a:	2300      	movs	r3, #0
 800744c:	e000      	b.n	8007450 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800744e:	2302      	movs	r3, #2
  }
}
 8007450:	4618      	mov	r0, r3
 8007452:	3730      	adds	r7, #48	; 0x30
 8007454:	46bd      	mov	sp, r7
 8007456:	bd80      	pop	{r7, pc}

08007458 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8007458:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800745c:	b0c0      	sub	sp, #256	; 0x100
 800745e:	af00      	add	r7, sp, #0
 8007460:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8007464:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	691b      	ldr	r3, [r3, #16]
 800746c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8007470:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007474:	68d9      	ldr	r1, [r3, #12]
 8007476:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800747a:	681a      	ldr	r2, [r3, #0]
 800747c:	ea40 0301 	orr.w	r3, r0, r1
 8007480:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8007482:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007486:	689a      	ldr	r2, [r3, #8]
 8007488:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800748c:	691b      	ldr	r3, [r3, #16]
 800748e:	431a      	orrs	r2, r3
 8007490:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007494:	695b      	ldr	r3, [r3, #20]
 8007496:	431a      	orrs	r2, r3
 8007498:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800749c:	69db      	ldr	r3, [r3, #28]
 800749e:	4313      	orrs	r3, r2
 80074a0:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 80074a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074a8:	681b      	ldr	r3, [r3, #0]
 80074aa:	68db      	ldr	r3, [r3, #12]
 80074ac:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80074b0:	f021 010c 	bic.w	r1, r1, #12
 80074b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074b8:	681a      	ldr	r2, [r3, #0]
 80074ba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 80074be:	430b      	orrs	r3, r1
 80074c0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80074c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074c6:	681b      	ldr	r3, [r3, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80074ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d2:	6999      	ldr	r1, [r3, #24]
 80074d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074d8:	681a      	ldr	r2, [r3, #0]
 80074da:	ea40 0301 	orr.w	r3, r0, r1
 80074de:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80074e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074e4:	681a      	ldr	r2, [r3, #0]
 80074e6:	4b8f      	ldr	r3, [pc, #572]	; (8007724 <UART_SetConfig+0x2cc>)
 80074e8:	429a      	cmp	r2, r3
 80074ea:	d005      	beq.n	80074f8 <UART_SetConfig+0xa0>
 80074ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80074f0:	681a      	ldr	r2, [r3, #0]
 80074f2:	4b8d      	ldr	r3, [pc, #564]	; (8007728 <UART_SetConfig+0x2d0>)
 80074f4:	429a      	cmp	r2, r3
 80074f6:	d104      	bne.n	8007502 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80074f8:	f7fe fac6 	bl	8005a88 <HAL_RCC_GetPCLK2Freq>
 80074fc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8007500:	e003      	b.n	800750a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8007502:	f7fe faad 	bl	8005a60 <HAL_RCC_GetPCLK1Freq>
 8007506:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800750a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800750e:	69db      	ldr	r3, [r3, #28]
 8007510:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8007514:	f040 810c 	bne.w	8007730 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8007518:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800751c:	2200      	movs	r2, #0
 800751e:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8007522:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8007526:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800752a:	4622      	mov	r2, r4
 800752c:	462b      	mov	r3, r5
 800752e:	1891      	adds	r1, r2, r2
 8007530:	65b9      	str	r1, [r7, #88]	; 0x58
 8007532:	415b      	adcs	r3, r3
 8007534:	65fb      	str	r3, [r7, #92]	; 0x5c
 8007536:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800753a:	4621      	mov	r1, r4
 800753c:	eb12 0801 	adds.w	r8, r2, r1
 8007540:	4629      	mov	r1, r5
 8007542:	eb43 0901 	adc.w	r9, r3, r1
 8007546:	f04f 0200 	mov.w	r2, #0
 800754a:	f04f 0300 	mov.w	r3, #0
 800754e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8007552:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8007556:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800755a:	4690      	mov	r8, r2
 800755c:	4699      	mov	r9, r3
 800755e:	4623      	mov	r3, r4
 8007560:	eb18 0303 	adds.w	r3, r8, r3
 8007564:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8007568:	462b      	mov	r3, r5
 800756a:	eb49 0303 	adc.w	r3, r9, r3
 800756e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8007572:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007576:	685b      	ldr	r3, [r3, #4]
 8007578:	2200      	movs	r2, #0
 800757a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800757e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8007582:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8007586:	460b      	mov	r3, r1
 8007588:	18db      	adds	r3, r3, r3
 800758a:	653b      	str	r3, [r7, #80]	; 0x50
 800758c:	4613      	mov	r3, r2
 800758e:	eb42 0303 	adc.w	r3, r2, r3
 8007592:	657b      	str	r3, [r7, #84]	; 0x54
 8007594:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8007598:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800759c:	f7f9 fb74 	bl	8000c88 <__aeabi_uldivmod>
 80075a0:	4602      	mov	r2, r0
 80075a2:	460b      	mov	r3, r1
 80075a4:	4b61      	ldr	r3, [pc, #388]	; (800772c <UART_SetConfig+0x2d4>)
 80075a6:	fba3 2302 	umull	r2, r3, r3, r2
 80075aa:	095b      	lsrs	r3, r3, #5
 80075ac:	011c      	lsls	r4, r3, #4
 80075ae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80075b2:	2200      	movs	r2, #0
 80075b4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80075b8:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 80075bc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80075c0:	4642      	mov	r2, r8
 80075c2:	464b      	mov	r3, r9
 80075c4:	1891      	adds	r1, r2, r2
 80075c6:	64b9      	str	r1, [r7, #72]	; 0x48
 80075c8:	415b      	adcs	r3, r3
 80075ca:	64fb      	str	r3, [r7, #76]	; 0x4c
 80075cc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80075d0:	4641      	mov	r1, r8
 80075d2:	eb12 0a01 	adds.w	sl, r2, r1
 80075d6:	4649      	mov	r1, r9
 80075d8:	eb43 0b01 	adc.w	fp, r3, r1
 80075dc:	f04f 0200 	mov.w	r2, #0
 80075e0:	f04f 0300 	mov.w	r3, #0
 80075e4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80075e8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80075ec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80075f0:	4692      	mov	sl, r2
 80075f2:	469b      	mov	fp, r3
 80075f4:	4643      	mov	r3, r8
 80075f6:	eb1a 0303 	adds.w	r3, sl, r3
 80075fa:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80075fe:	464b      	mov	r3, r9
 8007600:	eb4b 0303 	adc.w	r3, fp, r3
 8007604:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8007608:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800760c:	685b      	ldr	r3, [r3, #4]
 800760e:	2200      	movs	r2, #0
 8007610:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8007614:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8007618:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 800761c:	460b      	mov	r3, r1
 800761e:	18db      	adds	r3, r3, r3
 8007620:	643b      	str	r3, [r7, #64]	; 0x40
 8007622:	4613      	mov	r3, r2
 8007624:	eb42 0303 	adc.w	r3, r2, r3
 8007628:	647b      	str	r3, [r7, #68]	; 0x44
 800762a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800762e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8007632:	f7f9 fb29 	bl	8000c88 <__aeabi_uldivmod>
 8007636:	4602      	mov	r2, r0
 8007638:	460b      	mov	r3, r1
 800763a:	4611      	mov	r1, r2
 800763c:	4b3b      	ldr	r3, [pc, #236]	; (800772c <UART_SetConfig+0x2d4>)
 800763e:	fba3 2301 	umull	r2, r3, r3, r1
 8007642:	095b      	lsrs	r3, r3, #5
 8007644:	2264      	movs	r2, #100	; 0x64
 8007646:	fb02 f303 	mul.w	r3, r2, r3
 800764a:	1acb      	subs	r3, r1, r3
 800764c:	00db      	lsls	r3, r3, #3
 800764e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8007652:	4b36      	ldr	r3, [pc, #216]	; (800772c <UART_SetConfig+0x2d4>)
 8007654:	fba3 2302 	umull	r2, r3, r3, r2
 8007658:	095b      	lsrs	r3, r3, #5
 800765a:	005b      	lsls	r3, r3, #1
 800765c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8007660:	441c      	add	r4, r3
 8007662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007666:	2200      	movs	r2, #0
 8007668:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800766c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8007670:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8007674:	4642      	mov	r2, r8
 8007676:	464b      	mov	r3, r9
 8007678:	1891      	adds	r1, r2, r2
 800767a:	63b9      	str	r1, [r7, #56]	; 0x38
 800767c:	415b      	adcs	r3, r3
 800767e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007680:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8007684:	4641      	mov	r1, r8
 8007686:	1851      	adds	r1, r2, r1
 8007688:	6339      	str	r1, [r7, #48]	; 0x30
 800768a:	4649      	mov	r1, r9
 800768c:	414b      	adcs	r3, r1
 800768e:	637b      	str	r3, [r7, #52]	; 0x34
 8007690:	f04f 0200 	mov.w	r2, #0
 8007694:	f04f 0300 	mov.w	r3, #0
 8007698:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800769c:	4659      	mov	r1, fp
 800769e:	00cb      	lsls	r3, r1, #3
 80076a0:	4651      	mov	r1, sl
 80076a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80076a6:	4651      	mov	r1, sl
 80076a8:	00ca      	lsls	r2, r1, #3
 80076aa:	4610      	mov	r0, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	4603      	mov	r3, r0
 80076b0:	4642      	mov	r2, r8
 80076b2:	189b      	adds	r3, r3, r2
 80076b4:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 80076b8:	464b      	mov	r3, r9
 80076ba:	460a      	mov	r2, r1
 80076bc:	eb42 0303 	adc.w	r3, r2, r3
 80076c0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80076c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80076c8:	685b      	ldr	r3, [r3, #4]
 80076ca:	2200      	movs	r2, #0
 80076cc:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80076d0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80076d4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80076d8:	460b      	mov	r3, r1
 80076da:	18db      	adds	r3, r3, r3
 80076dc:	62bb      	str	r3, [r7, #40]	; 0x28
 80076de:	4613      	mov	r3, r2
 80076e0:	eb42 0303 	adc.w	r3, r2, r3
 80076e4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80076e6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80076ea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80076ee:	f7f9 facb 	bl	8000c88 <__aeabi_uldivmod>
 80076f2:	4602      	mov	r2, r0
 80076f4:	460b      	mov	r3, r1
 80076f6:	4b0d      	ldr	r3, [pc, #52]	; (800772c <UART_SetConfig+0x2d4>)
 80076f8:	fba3 1302 	umull	r1, r3, r3, r2
 80076fc:	095b      	lsrs	r3, r3, #5
 80076fe:	2164      	movs	r1, #100	; 0x64
 8007700:	fb01 f303 	mul.w	r3, r1, r3
 8007704:	1ad3      	subs	r3, r2, r3
 8007706:	00db      	lsls	r3, r3, #3
 8007708:	3332      	adds	r3, #50	; 0x32
 800770a:	4a08      	ldr	r2, [pc, #32]	; (800772c <UART_SetConfig+0x2d4>)
 800770c:	fba2 2303 	umull	r2, r3, r2, r3
 8007710:	095b      	lsrs	r3, r3, #5
 8007712:	f003 0207 	and.w	r2, r3, #7
 8007716:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800771a:	681b      	ldr	r3, [r3, #0]
 800771c:	4422      	add	r2, r4
 800771e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8007720:	e105      	b.n	800792e <UART_SetConfig+0x4d6>
 8007722:	bf00      	nop
 8007724:	40011000 	.word	0x40011000
 8007728:	40011400 	.word	0x40011400
 800772c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8007730:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8007734:	2200      	movs	r2, #0
 8007736:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800773a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800773e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8007742:	4642      	mov	r2, r8
 8007744:	464b      	mov	r3, r9
 8007746:	1891      	adds	r1, r2, r2
 8007748:	6239      	str	r1, [r7, #32]
 800774a:	415b      	adcs	r3, r3
 800774c:	627b      	str	r3, [r7, #36]	; 0x24
 800774e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8007752:	4641      	mov	r1, r8
 8007754:	1854      	adds	r4, r2, r1
 8007756:	4649      	mov	r1, r9
 8007758:	eb43 0501 	adc.w	r5, r3, r1
 800775c:	f04f 0200 	mov.w	r2, #0
 8007760:	f04f 0300 	mov.w	r3, #0
 8007764:	00eb      	lsls	r3, r5, #3
 8007766:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800776a:	00e2      	lsls	r2, r4, #3
 800776c:	4614      	mov	r4, r2
 800776e:	461d      	mov	r5, r3
 8007770:	4643      	mov	r3, r8
 8007772:	18e3      	adds	r3, r4, r3
 8007774:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8007778:	464b      	mov	r3, r9
 800777a:	eb45 0303 	adc.w	r3, r5, r3
 800777e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8007782:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007786:	685b      	ldr	r3, [r3, #4]
 8007788:	2200      	movs	r2, #0
 800778a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800778e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8007792:	f04f 0200 	mov.w	r2, #0
 8007796:	f04f 0300 	mov.w	r3, #0
 800779a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800779e:	4629      	mov	r1, r5
 80077a0:	008b      	lsls	r3, r1, #2
 80077a2:	4621      	mov	r1, r4
 80077a4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80077a8:	4621      	mov	r1, r4
 80077aa:	008a      	lsls	r2, r1, #2
 80077ac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 80077b0:	f7f9 fa6a 	bl	8000c88 <__aeabi_uldivmod>
 80077b4:	4602      	mov	r2, r0
 80077b6:	460b      	mov	r3, r1
 80077b8:	4b60      	ldr	r3, [pc, #384]	; (800793c <UART_SetConfig+0x4e4>)
 80077ba:	fba3 2302 	umull	r2, r3, r3, r2
 80077be:	095b      	lsrs	r3, r3, #5
 80077c0:	011c      	lsls	r4, r3, #4
 80077c2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80077c6:	2200      	movs	r2, #0
 80077c8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80077cc:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80077d0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80077d4:	4642      	mov	r2, r8
 80077d6:	464b      	mov	r3, r9
 80077d8:	1891      	adds	r1, r2, r2
 80077da:	61b9      	str	r1, [r7, #24]
 80077dc:	415b      	adcs	r3, r3
 80077de:	61fb      	str	r3, [r7, #28]
 80077e0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077e4:	4641      	mov	r1, r8
 80077e6:	1851      	adds	r1, r2, r1
 80077e8:	6139      	str	r1, [r7, #16]
 80077ea:	4649      	mov	r1, r9
 80077ec:	414b      	adcs	r3, r1
 80077ee:	617b      	str	r3, [r7, #20]
 80077f0:	f04f 0200 	mov.w	r2, #0
 80077f4:	f04f 0300 	mov.w	r3, #0
 80077f8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80077fc:	4659      	mov	r1, fp
 80077fe:	00cb      	lsls	r3, r1, #3
 8007800:	4651      	mov	r1, sl
 8007802:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8007806:	4651      	mov	r1, sl
 8007808:	00ca      	lsls	r2, r1, #3
 800780a:	4610      	mov	r0, r2
 800780c:	4619      	mov	r1, r3
 800780e:	4603      	mov	r3, r0
 8007810:	4642      	mov	r2, r8
 8007812:	189b      	adds	r3, r3, r2
 8007814:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8007818:	464b      	mov	r3, r9
 800781a:	460a      	mov	r2, r1
 800781c:	eb42 0303 	adc.w	r3, r2, r3
 8007820:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8007824:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007828:	685b      	ldr	r3, [r3, #4]
 800782a:	2200      	movs	r2, #0
 800782c:	67bb      	str	r3, [r7, #120]	; 0x78
 800782e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8007830:	f04f 0200 	mov.w	r2, #0
 8007834:	f04f 0300 	mov.w	r3, #0
 8007838:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800783c:	4649      	mov	r1, r9
 800783e:	008b      	lsls	r3, r1, #2
 8007840:	4641      	mov	r1, r8
 8007842:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8007846:	4641      	mov	r1, r8
 8007848:	008a      	lsls	r2, r1, #2
 800784a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800784e:	f7f9 fa1b 	bl	8000c88 <__aeabi_uldivmod>
 8007852:	4602      	mov	r2, r0
 8007854:	460b      	mov	r3, r1
 8007856:	4b39      	ldr	r3, [pc, #228]	; (800793c <UART_SetConfig+0x4e4>)
 8007858:	fba3 1302 	umull	r1, r3, r3, r2
 800785c:	095b      	lsrs	r3, r3, #5
 800785e:	2164      	movs	r1, #100	; 0x64
 8007860:	fb01 f303 	mul.w	r3, r1, r3
 8007864:	1ad3      	subs	r3, r2, r3
 8007866:	011b      	lsls	r3, r3, #4
 8007868:	3332      	adds	r3, #50	; 0x32
 800786a:	4a34      	ldr	r2, [pc, #208]	; (800793c <UART_SetConfig+0x4e4>)
 800786c:	fba2 2303 	umull	r2, r3, r2, r3
 8007870:	095b      	lsrs	r3, r3, #5
 8007872:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8007876:	441c      	add	r4, r3
 8007878:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800787c:	2200      	movs	r2, #0
 800787e:	673b      	str	r3, [r7, #112]	; 0x70
 8007880:	677a      	str	r2, [r7, #116]	; 0x74
 8007882:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8007886:	4642      	mov	r2, r8
 8007888:	464b      	mov	r3, r9
 800788a:	1891      	adds	r1, r2, r2
 800788c:	60b9      	str	r1, [r7, #8]
 800788e:	415b      	adcs	r3, r3
 8007890:	60fb      	str	r3, [r7, #12]
 8007892:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007896:	4641      	mov	r1, r8
 8007898:	1851      	adds	r1, r2, r1
 800789a:	6039      	str	r1, [r7, #0]
 800789c:	4649      	mov	r1, r9
 800789e:	414b      	adcs	r3, r1
 80078a0:	607b      	str	r3, [r7, #4]
 80078a2:	f04f 0200 	mov.w	r2, #0
 80078a6:	f04f 0300 	mov.w	r3, #0
 80078aa:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80078ae:	4659      	mov	r1, fp
 80078b0:	00cb      	lsls	r3, r1, #3
 80078b2:	4651      	mov	r1, sl
 80078b4:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80078b8:	4651      	mov	r1, sl
 80078ba:	00ca      	lsls	r2, r1, #3
 80078bc:	4610      	mov	r0, r2
 80078be:	4619      	mov	r1, r3
 80078c0:	4603      	mov	r3, r0
 80078c2:	4642      	mov	r2, r8
 80078c4:	189b      	adds	r3, r3, r2
 80078c6:	66bb      	str	r3, [r7, #104]	; 0x68
 80078c8:	464b      	mov	r3, r9
 80078ca:	460a      	mov	r2, r1
 80078cc:	eb42 0303 	adc.w	r3, r2, r3
 80078d0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80078d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80078d6:	685b      	ldr	r3, [r3, #4]
 80078d8:	2200      	movs	r2, #0
 80078da:	663b      	str	r3, [r7, #96]	; 0x60
 80078dc:	667a      	str	r2, [r7, #100]	; 0x64
 80078de:	f04f 0200 	mov.w	r2, #0
 80078e2:	f04f 0300 	mov.w	r3, #0
 80078e6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80078ea:	4649      	mov	r1, r9
 80078ec:	008b      	lsls	r3, r1, #2
 80078ee:	4641      	mov	r1, r8
 80078f0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80078f4:	4641      	mov	r1, r8
 80078f6:	008a      	lsls	r2, r1, #2
 80078f8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80078fc:	f7f9 f9c4 	bl	8000c88 <__aeabi_uldivmod>
 8007900:	4602      	mov	r2, r0
 8007902:	460b      	mov	r3, r1
 8007904:	4b0d      	ldr	r3, [pc, #52]	; (800793c <UART_SetConfig+0x4e4>)
 8007906:	fba3 1302 	umull	r1, r3, r3, r2
 800790a:	095b      	lsrs	r3, r3, #5
 800790c:	2164      	movs	r1, #100	; 0x64
 800790e:	fb01 f303 	mul.w	r3, r1, r3
 8007912:	1ad3      	subs	r3, r2, r3
 8007914:	011b      	lsls	r3, r3, #4
 8007916:	3332      	adds	r3, #50	; 0x32
 8007918:	4a08      	ldr	r2, [pc, #32]	; (800793c <UART_SetConfig+0x4e4>)
 800791a:	fba2 2303 	umull	r2, r3, r2, r3
 800791e:	095b      	lsrs	r3, r3, #5
 8007920:	f003 020f 	and.w	r2, r3, #15
 8007924:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8007928:	681b      	ldr	r3, [r3, #0]
 800792a:	4422      	add	r2, r4
 800792c:	609a      	str	r2, [r3, #8]
}
 800792e:	bf00      	nop
 8007930:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8007934:	46bd      	mov	sp, r7
 8007936:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800793a:	bf00      	nop
 800793c:	51eb851f 	.word	0x51eb851f

08007940 <atof>:
 8007940:	2100      	movs	r1, #0
 8007942:	f001 bcfd 	b.w	8009340 <strtod>
	...

08007948 <__errno>:
 8007948:	4b01      	ldr	r3, [pc, #4]	; (8007950 <__errno+0x8>)
 800794a:	6818      	ldr	r0, [r3, #0]
 800794c:	4770      	bx	lr
 800794e:	bf00      	nop
 8007950:	2000001c 	.word	0x2000001c

08007954 <__libc_init_array>:
 8007954:	b570      	push	{r4, r5, r6, lr}
 8007956:	4d0d      	ldr	r5, [pc, #52]	; (800798c <__libc_init_array+0x38>)
 8007958:	4c0d      	ldr	r4, [pc, #52]	; (8007990 <__libc_init_array+0x3c>)
 800795a:	1b64      	subs	r4, r4, r5
 800795c:	10a4      	asrs	r4, r4, #2
 800795e:	2600      	movs	r6, #0
 8007960:	42a6      	cmp	r6, r4
 8007962:	d109      	bne.n	8007978 <__libc_init_array+0x24>
 8007964:	4d0b      	ldr	r5, [pc, #44]	; (8007994 <__libc_init_array+0x40>)
 8007966:	4c0c      	ldr	r4, [pc, #48]	; (8007998 <__libc_init_array+0x44>)
 8007968:	f004 fcfe 	bl	800c368 <_init>
 800796c:	1b64      	subs	r4, r4, r5
 800796e:	10a4      	asrs	r4, r4, #2
 8007970:	2600      	movs	r6, #0
 8007972:	42a6      	cmp	r6, r4
 8007974:	d105      	bne.n	8007982 <__libc_init_array+0x2e>
 8007976:	bd70      	pop	{r4, r5, r6, pc}
 8007978:	f855 3b04 	ldr.w	r3, [r5], #4
 800797c:	4798      	blx	r3
 800797e:	3601      	adds	r6, #1
 8007980:	e7ee      	b.n	8007960 <__libc_init_array+0xc>
 8007982:	f855 3b04 	ldr.w	r3, [r5], #4
 8007986:	4798      	blx	r3
 8007988:	3601      	adds	r6, #1
 800798a:	e7f2      	b.n	8007972 <__libc_init_array+0x1e>
 800798c:	0800c988 	.word	0x0800c988
 8007990:	0800c988 	.word	0x0800c988
 8007994:	0800c988 	.word	0x0800c988
 8007998:	0800c98c 	.word	0x0800c98c

0800799c <memset>:
 800799c:	4402      	add	r2, r0
 800799e:	4603      	mov	r3, r0
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d100      	bne.n	80079a6 <memset+0xa>
 80079a4:	4770      	bx	lr
 80079a6:	f803 1b01 	strb.w	r1, [r3], #1
 80079aa:	e7f9      	b.n	80079a0 <memset+0x4>

080079ac <__cvt>:
 80079ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80079b0:	ec55 4b10 	vmov	r4, r5, d0
 80079b4:	2d00      	cmp	r5, #0
 80079b6:	460e      	mov	r6, r1
 80079b8:	4619      	mov	r1, r3
 80079ba:	462b      	mov	r3, r5
 80079bc:	bfbb      	ittet	lt
 80079be:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80079c2:	461d      	movlt	r5, r3
 80079c4:	2300      	movge	r3, #0
 80079c6:	232d      	movlt	r3, #45	; 0x2d
 80079c8:	700b      	strb	r3, [r1, #0]
 80079ca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80079cc:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80079d0:	4691      	mov	r9, r2
 80079d2:	f023 0820 	bic.w	r8, r3, #32
 80079d6:	bfbc      	itt	lt
 80079d8:	4622      	movlt	r2, r4
 80079da:	4614      	movlt	r4, r2
 80079dc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80079e0:	d005      	beq.n	80079ee <__cvt+0x42>
 80079e2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80079e6:	d100      	bne.n	80079ea <__cvt+0x3e>
 80079e8:	3601      	adds	r6, #1
 80079ea:	2102      	movs	r1, #2
 80079ec:	e000      	b.n	80079f0 <__cvt+0x44>
 80079ee:	2103      	movs	r1, #3
 80079f0:	ab03      	add	r3, sp, #12
 80079f2:	9301      	str	r3, [sp, #4]
 80079f4:	ab02      	add	r3, sp, #8
 80079f6:	9300      	str	r3, [sp, #0]
 80079f8:	ec45 4b10 	vmov	d0, r4, r5
 80079fc:	4653      	mov	r3, sl
 80079fe:	4632      	mov	r2, r6
 8007a00:	f001 fe36 	bl	8009670 <_dtoa_r>
 8007a04:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8007a08:	4607      	mov	r7, r0
 8007a0a:	d102      	bne.n	8007a12 <__cvt+0x66>
 8007a0c:	f019 0f01 	tst.w	r9, #1
 8007a10:	d022      	beq.n	8007a58 <__cvt+0xac>
 8007a12:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8007a16:	eb07 0906 	add.w	r9, r7, r6
 8007a1a:	d110      	bne.n	8007a3e <__cvt+0x92>
 8007a1c:	783b      	ldrb	r3, [r7, #0]
 8007a1e:	2b30      	cmp	r3, #48	; 0x30
 8007a20:	d10a      	bne.n	8007a38 <__cvt+0x8c>
 8007a22:	2200      	movs	r2, #0
 8007a24:	2300      	movs	r3, #0
 8007a26:	4620      	mov	r0, r4
 8007a28:	4629      	mov	r1, r5
 8007a2a:	f7f9 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a2e:	b918      	cbnz	r0, 8007a38 <__cvt+0x8c>
 8007a30:	f1c6 0601 	rsb	r6, r6, #1
 8007a34:	f8ca 6000 	str.w	r6, [sl]
 8007a38:	f8da 3000 	ldr.w	r3, [sl]
 8007a3c:	4499      	add	r9, r3
 8007a3e:	2200      	movs	r2, #0
 8007a40:	2300      	movs	r3, #0
 8007a42:	4620      	mov	r0, r4
 8007a44:	4629      	mov	r1, r5
 8007a46:	f7f9 f83f 	bl	8000ac8 <__aeabi_dcmpeq>
 8007a4a:	b108      	cbz	r0, 8007a50 <__cvt+0xa4>
 8007a4c:	f8cd 900c 	str.w	r9, [sp, #12]
 8007a50:	2230      	movs	r2, #48	; 0x30
 8007a52:	9b03      	ldr	r3, [sp, #12]
 8007a54:	454b      	cmp	r3, r9
 8007a56:	d307      	bcc.n	8007a68 <__cvt+0xbc>
 8007a58:	9b03      	ldr	r3, [sp, #12]
 8007a5a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8007a5c:	1bdb      	subs	r3, r3, r7
 8007a5e:	4638      	mov	r0, r7
 8007a60:	6013      	str	r3, [r2, #0]
 8007a62:	b004      	add	sp, #16
 8007a64:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007a68:	1c59      	adds	r1, r3, #1
 8007a6a:	9103      	str	r1, [sp, #12]
 8007a6c:	701a      	strb	r2, [r3, #0]
 8007a6e:	e7f0      	b.n	8007a52 <__cvt+0xa6>

08007a70 <__exponent>:
 8007a70:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007a72:	4603      	mov	r3, r0
 8007a74:	2900      	cmp	r1, #0
 8007a76:	bfb8      	it	lt
 8007a78:	4249      	neglt	r1, r1
 8007a7a:	f803 2b02 	strb.w	r2, [r3], #2
 8007a7e:	bfb4      	ite	lt
 8007a80:	222d      	movlt	r2, #45	; 0x2d
 8007a82:	222b      	movge	r2, #43	; 0x2b
 8007a84:	2909      	cmp	r1, #9
 8007a86:	7042      	strb	r2, [r0, #1]
 8007a88:	dd2a      	ble.n	8007ae0 <__exponent+0x70>
 8007a8a:	f10d 0407 	add.w	r4, sp, #7
 8007a8e:	46a4      	mov	ip, r4
 8007a90:	270a      	movs	r7, #10
 8007a92:	46a6      	mov	lr, r4
 8007a94:	460a      	mov	r2, r1
 8007a96:	fb91 f6f7 	sdiv	r6, r1, r7
 8007a9a:	fb07 1516 	mls	r5, r7, r6, r1
 8007a9e:	3530      	adds	r5, #48	; 0x30
 8007aa0:	2a63      	cmp	r2, #99	; 0x63
 8007aa2:	f104 34ff 	add.w	r4, r4, #4294967295
 8007aa6:	f80e 5c01 	strb.w	r5, [lr, #-1]
 8007aaa:	4631      	mov	r1, r6
 8007aac:	dcf1      	bgt.n	8007a92 <__exponent+0x22>
 8007aae:	3130      	adds	r1, #48	; 0x30
 8007ab0:	f1ae 0502 	sub.w	r5, lr, #2
 8007ab4:	f804 1c01 	strb.w	r1, [r4, #-1]
 8007ab8:	1c44      	adds	r4, r0, #1
 8007aba:	4629      	mov	r1, r5
 8007abc:	4561      	cmp	r1, ip
 8007abe:	d30a      	bcc.n	8007ad6 <__exponent+0x66>
 8007ac0:	f10d 0209 	add.w	r2, sp, #9
 8007ac4:	eba2 020e 	sub.w	r2, r2, lr
 8007ac8:	4565      	cmp	r5, ip
 8007aca:	bf88      	it	hi
 8007acc:	2200      	movhi	r2, #0
 8007ace:	4413      	add	r3, r2
 8007ad0:	1a18      	subs	r0, r3, r0
 8007ad2:	b003      	add	sp, #12
 8007ad4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007ad6:	f811 2b01 	ldrb.w	r2, [r1], #1
 8007ada:	f804 2f01 	strb.w	r2, [r4, #1]!
 8007ade:	e7ed      	b.n	8007abc <__exponent+0x4c>
 8007ae0:	2330      	movs	r3, #48	; 0x30
 8007ae2:	3130      	adds	r1, #48	; 0x30
 8007ae4:	7083      	strb	r3, [r0, #2]
 8007ae6:	70c1      	strb	r1, [r0, #3]
 8007ae8:	1d03      	adds	r3, r0, #4
 8007aea:	e7f1      	b.n	8007ad0 <__exponent+0x60>

08007aec <_printf_float>:
 8007aec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007af0:	ed2d 8b02 	vpush	{d8}
 8007af4:	b08d      	sub	sp, #52	; 0x34
 8007af6:	460c      	mov	r4, r1
 8007af8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 8007afc:	4616      	mov	r6, r2
 8007afe:	461f      	mov	r7, r3
 8007b00:	4605      	mov	r5, r0
 8007b02:	f002 ff25 	bl	800a950 <_localeconv_r>
 8007b06:	f8d0 a000 	ldr.w	sl, [r0]
 8007b0a:	4650      	mov	r0, sl
 8007b0c:	f7f8 fb60 	bl	80001d0 <strlen>
 8007b10:	2300      	movs	r3, #0
 8007b12:	930a      	str	r3, [sp, #40]	; 0x28
 8007b14:	6823      	ldr	r3, [r4, #0]
 8007b16:	9305      	str	r3, [sp, #20]
 8007b18:	f8d8 3000 	ldr.w	r3, [r8]
 8007b1c:	f894 b018 	ldrb.w	fp, [r4, #24]
 8007b20:	3307      	adds	r3, #7
 8007b22:	f023 0307 	bic.w	r3, r3, #7
 8007b26:	f103 0208 	add.w	r2, r3, #8
 8007b2a:	f8c8 2000 	str.w	r2, [r8]
 8007b2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b32:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8007b36:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 8007b3a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 8007b3e:	9307      	str	r3, [sp, #28]
 8007b40:	f8cd 8018 	str.w	r8, [sp, #24]
 8007b44:	ee08 0a10 	vmov	s16, r0
 8007b48:	4b9f      	ldr	r3, [pc, #636]	; (8007dc8 <_printf_float+0x2dc>)
 8007b4a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b4e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b52:	f7f8 ffeb 	bl	8000b2c <__aeabi_dcmpun>
 8007b56:	bb88      	cbnz	r0, 8007bbc <_printf_float+0xd0>
 8007b58:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007b5c:	4b9a      	ldr	r3, [pc, #616]	; (8007dc8 <_printf_float+0x2dc>)
 8007b5e:	f04f 32ff 	mov.w	r2, #4294967295
 8007b62:	f7f8 ffc5 	bl	8000af0 <__aeabi_dcmple>
 8007b66:	bb48      	cbnz	r0, 8007bbc <_printf_float+0xd0>
 8007b68:	2200      	movs	r2, #0
 8007b6a:	2300      	movs	r3, #0
 8007b6c:	4640      	mov	r0, r8
 8007b6e:	4649      	mov	r1, r9
 8007b70:	f7f8 ffb4 	bl	8000adc <__aeabi_dcmplt>
 8007b74:	b110      	cbz	r0, 8007b7c <_printf_float+0x90>
 8007b76:	232d      	movs	r3, #45	; 0x2d
 8007b78:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007b7c:	4b93      	ldr	r3, [pc, #588]	; (8007dcc <_printf_float+0x2e0>)
 8007b7e:	4894      	ldr	r0, [pc, #592]	; (8007dd0 <_printf_float+0x2e4>)
 8007b80:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8007b84:	bf94      	ite	ls
 8007b86:	4698      	movls	r8, r3
 8007b88:	4680      	movhi	r8, r0
 8007b8a:	2303      	movs	r3, #3
 8007b8c:	6123      	str	r3, [r4, #16]
 8007b8e:	9b05      	ldr	r3, [sp, #20]
 8007b90:	f023 0204 	bic.w	r2, r3, #4
 8007b94:	6022      	str	r2, [r4, #0]
 8007b96:	f04f 0900 	mov.w	r9, #0
 8007b9a:	9700      	str	r7, [sp, #0]
 8007b9c:	4633      	mov	r3, r6
 8007b9e:	aa0b      	add	r2, sp, #44	; 0x2c
 8007ba0:	4621      	mov	r1, r4
 8007ba2:	4628      	mov	r0, r5
 8007ba4:	f000 f9d8 	bl	8007f58 <_printf_common>
 8007ba8:	3001      	adds	r0, #1
 8007baa:	f040 8090 	bne.w	8007cce <_printf_float+0x1e2>
 8007bae:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb2:	b00d      	add	sp, #52	; 0x34
 8007bb4:	ecbd 8b02 	vpop	{d8}
 8007bb8:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bbc:	4642      	mov	r2, r8
 8007bbe:	464b      	mov	r3, r9
 8007bc0:	4640      	mov	r0, r8
 8007bc2:	4649      	mov	r1, r9
 8007bc4:	f7f8 ffb2 	bl	8000b2c <__aeabi_dcmpun>
 8007bc8:	b140      	cbz	r0, 8007bdc <_printf_float+0xf0>
 8007bca:	464b      	mov	r3, r9
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	bfbc      	itt	lt
 8007bd0:	232d      	movlt	r3, #45	; 0x2d
 8007bd2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8007bd6:	487f      	ldr	r0, [pc, #508]	; (8007dd4 <_printf_float+0x2e8>)
 8007bd8:	4b7f      	ldr	r3, [pc, #508]	; (8007dd8 <_printf_float+0x2ec>)
 8007bda:	e7d1      	b.n	8007b80 <_printf_float+0x94>
 8007bdc:	6863      	ldr	r3, [r4, #4]
 8007bde:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8007be2:	9206      	str	r2, [sp, #24]
 8007be4:	1c5a      	adds	r2, r3, #1
 8007be6:	d13f      	bne.n	8007c68 <_printf_float+0x17c>
 8007be8:	2306      	movs	r3, #6
 8007bea:	6063      	str	r3, [r4, #4]
 8007bec:	9b05      	ldr	r3, [sp, #20]
 8007bee:	6861      	ldr	r1, [r4, #4]
 8007bf0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8007bf4:	2300      	movs	r3, #0
 8007bf6:	9303      	str	r3, [sp, #12]
 8007bf8:	ab0a      	add	r3, sp, #40	; 0x28
 8007bfa:	e9cd b301 	strd	fp, r3, [sp, #4]
 8007bfe:	ab09      	add	r3, sp, #36	; 0x24
 8007c00:	ec49 8b10 	vmov	d0, r8, r9
 8007c04:	9300      	str	r3, [sp, #0]
 8007c06:	6022      	str	r2, [r4, #0]
 8007c08:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8007c0c:	4628      	mov	r0, r5
 8007c0e:	f7ff fecd 	bl	80079ac <__cvt>
 8007c12:	9b06      	ldr	r3, [sp, #24]
 8007c14:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007c16:	2b47      	cmp	r3, #71	; 0x47
 8007c18:	4680      	mov	r8, r0
 8007c1a:	d108      	bne.n	8007c2e <_printf_float+0x142>
 8007c1c:	1cc8      	adds	r0, r1, #3
 8007c1e:	db02      	blt.n	8007c26 <_printf_float+0x13a>
 8007c20:	6863      	ldr	r3, [r4, #4]
 8007c22:	4299      	cmp	r1, r3
 8007c24:	dd41      	ble.n	8007caa <_printf_float+0x1be>
 8007c26:	f1ab 0b02 	sub.w	fp, fp, #2
 8007c2a:	fa5f fb8b 	uxtb.w	fp, fp
 8007c2e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007c32:	d820      	bhi.n	8007c76 <_printf_float+0x18a>
 8007c34:	3901      	subs	r1, #1
 8007c36:	465a      	mov	r2, fp
 8007c38:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8007c3c:	9109      	str	r1, [sp, #36]	; 0x24
 8007c3e:	f7ff ff17 	bl	8007a70 <__exponent>
 8007c42:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007c44:	1813      	adds	r3, r2, r0
 8007c46:	2a01      	cmp	r2, #1
 8007c48:	4681      	mov	r9, r0
 8007c4a:	6123      	str	r3, [r4, #16]
 8007c4c:	dc02      	bgt.n	8007c54 <_printf_float+0x168>
 8007c4e:	6822      	ldr	r2, [r4, #0]
 8007c50:	07d2      	lsls	r2, r2, #31
 8007c52:	d501      	bpl.n	8007c58 <_printf_float+0x16c>
 8007c54:	3301      	adds	r3, #1
 8007c56:	6123      	str	r3, [r4, #16]
 8007c58:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8007c5c:	2b00      	cmp	r3, #0
 8007c5e:	d09c      	beq.n	8007b9a <_printf_float+0xae>
 8007c60:	232d      	movs	r3, #45	; 0x2d
 8007c62:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8007c66:	e798      	b.n	8007b9a <_printf_float+0xae>
 8007c68:	9a06      	ldr	r2, [sp, #24]
 8007c6a:	2a47      	cmp	r2, #71	; 0x47
 8007c6c:	d1be      	bne.n	8007bec <_printf_float+0x100>
 8007c6e:	2b00      	cmp	r3, #0
 8007c70:	d1bc      	bne.n	8007bec <_printf_float+0x100>
 8007c72:	2301      	movs	r3, #1
 8007c74:	e7b9      	b.n	8007bea <_printf_float+0xfe>
 8007c76:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8007c7a:	d118      	bne.n	8007cae <_printf_float+0x1c2>
 8007c7c:	2900      	cmp	r1, #0
 8007c7e:	6863      	ldr	r3, [r4, #4]
 8007c80:	dd0b      	ble.n	8007c9a <_printf_float+0x1ae>
 8007c82:	6121      	str	r1, [r4, #16]
 8007c84:	b913      	cbnz	r3, 8007c8c <_printf_float+0x1a0>
 8007c86:	6822      	ldr	r2, [r4, #0]
 8007c88:	07d0      	lsls	r0, r2, #31
 8007c8a:	d502      	bpl.n	8007c92 <_printf_float+0x1a6>
 8007c8c:	3301      	adds	r3, #1
 8007c8e:	440b      	add	r3, r1
 8007c90:	6123      	str	r3, [r4, #16]
 8007c92:	65a1      	str	r1, [r4, #88]	; 0x58
 8007c94:	f04f 0900 	mov.w	r9, #0
 8007c98:	e7de      	b.n	8007c58 <_printf_float+0x16c>
 8007c9a:	b913      	cbnz	r3, 8007ca2 <_printf_float+0x1b6>
 8007c9c:	6822      	ldr	r2, [r4, #0]
 8007c9e:	07d2      	lsls	r2, r2, #31
 8007ca0:	d501      	bpl.n	8007ca6 <_printf_float+0x1ba>
 8007ca2:	3302      	adds	r3, #2
 8007ca4:	e7f4      	b.n	8007c90 <_printf_float+0x1a4>
 8007ca6:	2301      	movs	r3, #1
 8007ca8:	e7f2      	b.n	8007c90 <_printf_float+0x1a4>
 8007caa:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8007cae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007cb0:	4299      	cmp	r1, r3
 8007cb2:	db05      	blt.n	8007cc0 <_printf_float+0x1d4>
 8007cb4:	6823      	ldr	r3, [r4, #0]
 8007cb6:	6121      	str	r1, [r4, #16]
 8007cb8:	07d8      	lsls	r0, r3, #31
 8007cba:	d5ea      	bpl.n	8007c92 <_printf_float+0x1a6>
 8007cbc:	1c4b      	adds	r3, r1, #1
 8007cbe:	e7e7      	b.n	8007c90 <_printf_float+0x1a4>
 8007cc0:	2900      	cmp	r1, #0
 8007cc2:	bfd4      	ite	le
 8007cc4:	f1c1 0202 	rsble	r2, r1, #2
 8007cc8:	2201      	movgt	r2, #1
 8007cca:	4413      	add	r3, r2
 8007ccc:	e7e0      	b.n	8007c90 <_printf_float+0x1a4>
 8007cce:	6823      	ldr	r3, [r4, #0]
 8007cd0:	055a      	lsls	r2, r3, #21
 8007cd2:	d407      	bmi.n	8007ce4 <_printf_float+0x1f8>
 8007cd4:	6923      	ldr	r3, [r4, #16]
 8007cd6:	4642      	mov	r2, r8
 8007cd8:	4631      	mov	r1, r6
 8007cda:	4628      	mov	r0, r5
 8007cdc:	47b8      	blx	r7
 8007cde:	3001      	adds	r0, #1
 8007ce0:	d12c      	bne.n	8007d3c <_printf_float+0x250>
 8007ce2:	e764      	b.n	8007bae <_printf_float+0xc2>
 8007ce4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8007ce8:	f240 80e0 	bls.w	8007eac <_printf_float+0x3c0>
 8007cec:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007cf0:	2200      	movs	r2, #0
 8007cf2:	2300      	movs	r3, #0
 8007cf4:	f7f8 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 8007cf8:	2800      	cmp	r0, #0
 8007cfa:	d034      	beq.n	8007d66 <_printf_float+0x27a>
 8007cfc:	4a37      	ldr	r2, [pc, #220]	; (8007ddc <_printf_float+0x2f0>)
 8007cfe:	2301      	movs	r3, #1
 8007d00:	4631      	mov	r1, r6
 8007d02:	4628      	mov	r0, r5
 8007d04:	47b8      	blx	r7
 8007d06:	3001      	adds	r0, #1
 8007d08:	f43f af51 	beq.w	8007bae <_printf_float+0xc2>
 8007d0c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d10:	429a      	cmp	r2, r3
 8007d12:	db02      	blt.n	8007d1a <_printf_float+0x22e>
 8007d14:	6823      	ldr	r3, [r4, #0]
 8007d16:	07d8      	lsls	r0, r3, #31
 8007d18:	d510      	bpl.n	8007d3c <_printf_float+0x250>
 8007d1a:	ee18 3a10 	vmov	r3, s16
 8007d1e:	4652      	mov	r2, sl
 8007d20:	4631      	mov	r1, r6
 8007d22:	4628      	mov	r0, r5
 8007d24:	47b8      	blx	r7
 8007d26:	3001      	adds	r0, #1
 8007d28:	f43f af41 	beq.w	8007bae <_printf_float+0xc2>
 8007d2c:	f04f 0800 	mov.w	r8, #0
 8007d30:	f104 091a 	add.w	r9, r4, #26
 8007d34:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007d36:	3b01      	subs	r3, #1
 8007d38:	4543      	cmp	r3, r8
 8007d3a:	dc09      	bgt.n	8007d50 <_printf_float+0x264>
 8007d3c:	6823      	ldr	r3, [r4, #0]
 8007d3e:	079b      	lsls	r3, r3, #30
 8007d40:	f100 8105 	bmi.w	8007f4e <_printf_float+0x462>
 8007d44:	68e0      	ldr	r0, [r4, #12]
 8007d46:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8007d48:	4298      	cmp	r0, r3
 8007d4a:	bfb8      	it	lt
 8007d4c:	4618      	movlt	r0, r3
 8007d4e:	e730      	b.n	8007bb2 <_printf_float+0xc6>
 8007d50:	2301      	movs	r3, #1
 8007d52:	464a      	mov	r2, r9
 8007d54:	4631      	mov	r1, r6
 8007d56:	4628      	mov	r0, r5
 8007d58:	47b8      	blx	r7
 8007d5a:	3001      	adds	r0, #1
 8007d5c:	f43f af27 	beq.w	8007bae <_printf_float+0xc2>
 8007d60:	f108 0801 	add.w	r8, r8, #1
 8007d64:	e7e6      	b.n	8007d34 <_printf_float+0x248>
 8007d66:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007d68:	2b00      	cmp	r3, #0
 8007d6a:	dc39      	bgt.n	8007de0 <_printf_float+0x2f4>
 8007d6c:	4a1b      	ldr	r2, [pc, #108]	; (8007ddc <_printf_float+0x2f0>)
 8007d6e:	2301      	movs	r3, #1
 8007d70:	4631      	mov	r1, r6
 8007d72:	4628      	mov	r0, r5
 8007d74:	47b8      	blx	r7
 8007d76:	3001      	adds	r0, #1
 8007d78:	f43f af19 	beq.w	8007bae <_printf_float+0xc2>
 8007d7c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007d80:	4313      	orrs	r3, r2
 8007d82:	d102      	bne.n	8007d8a <_printf_float+0x29e>
 8007d84:	6823      	ldr	r3, [r4, #0]
 8007d86:	07d9      	lsls	r1, r3, #31
 8007d88:	d5d8      	bpl.n	8007d3c <_printf_float+0x250>
 8007d8a:	ee18 3a10 	vmov	r3, s16
 8007d8e:	4652      	mov	r2, sl
 8007d90:	4631      	mov	r1, r6
 8007d92:	4628      	mov	r0, r5
 8007d94:	47b8      	blx	r7
 8007d96:	3001      	adds	r0, #1
 8007d98:	f43f af09 	beq.w	8007bae <_printf_float+0xc2>
 8007d9c:	f04f 0900 	mov.w	r9, #0
 8007da0:	f104 0a1a 	add.w	sl, r4, #26
 8007da4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8007da6:	425b      	negs	r3, r3
 8007da8:	454b      	cmp	r3, r9
 8007daa:	dc01      	bgt.n	8007db0 <_printf_float+0x2c4>
 8007dac:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007dae:	e792      	b.n	8007cd6 <_printf_float+0x1ea>
 8007db0:	2301      	movs	r3, #1
 8007db2:	4652      	mov	r2, sl
 8007db4:	4631      	mov	r1, r6
 8007db6:	4628      	mov	r0, r5
 8007db8:	47b8      	blx	r7
 8007dba:	3001      	adds	r0, #1
 8007dbc:	f43f aef7 	beq.w	8007bae <_printf_float+0xc2>
 8007dc0:	f109 0901 	add.w	r9, r9, #1
 8007dc4:	e7ee      	b.n	8007da4 <_printf_float+0x2b8>
 8007dc6:	bf00      	nop
 8007dc8:	7fefffff 	.word	0x7fefffff
 8007dcc:	0800c480 	.word	0x0800c480
 8007dd0:	0800c484 	.word	0x0800c484
 8007dd4:	0800c48c 	.word	0x0800c48c
 8007dd8:	0800c488 	.word	0x0800c488
 8007ddc:	0800c490 	.word	0x0800c490
 8007de0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007de2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007de4:	429a      	cmp	r2, r3
 8007de6:	bfa8      	it	ge
 8007de8:	461a      	movge	r2, r3
 8007dea:	2a00      	cmp	r2, #0
 8007dec:	4691      	mov	r9, r2
 8007dee:	dc37      	bgt.n	8007e60 <_printf_float+0x374>
 8007df0:	f04f 0b00 	mov.w	fp, #0
 8007df4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007df8:	f104 021a 	add.w	r2, r4, #26
 8007dfc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8007dfe:	9305      	str	r3, [sp, #20]
 8007e00:	eba3 0309 	sub.w	r3, r3, r9
 8007e04:	455b      	cmp	r3, fp
 8007e06:	dc33      	bgt.n	8007e70 <_printf_float+0x384>
 8007e08:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e0c:	429a      	cmp	r2, r3
 8007e0e:	db3b      	blt.n	8007e88 <_printf_float+0x39c>
 8007e10:	6823      	ldr	r3, [r4, #0]
 8007e12:	07da      	lsls	r2, r3, #31
 8007e14:	d438      	bmi.n	8007e88 <_printf_float+0x39c>
 8007e16:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007e18:	9a05      	ldr	r2, [sp, #20]
 8007e1a:	9909      	ldr	r1, [sp, #36]	; 0x24
 8007e1c:	1a9a      	subs	r2, r3, r2
 8007e1e:	eba3 0901 	sub.w	r9, r3, r1
 8007e22:	4591      	cmp	r9, r2
 8007e24:	bfa8      	it	ge
 8007e26:	4691      	movge	r9, r2
 8007e28:	f1b9 0f00 	cmp.w	r9, #0
 8007e2c:	dc35      	bgt.n	8007e9a <_printf_float+0x3ae>
 8007e2e:	f04f 0800 	mov.w	r8, #0
 8007e32:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8007e36:	f104 0a1a 	add.w	sl, r4, #26
 8007e3a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8007e3e:	1a9b      	subs	r3, r3, r2
 8007e40:	eba3 0309 	sub.w	r3, r3, r9
 8007e44:	4543      	cmp	r3, r8
 8007e46:	f77f af79 	ble.w	8007d3c <_printf_float+0x250>
 8007e4a:	2301      	movs	r3, #1
 8007e4c:	4652      	mov	r2, sl
 8007e4e:	4631      	mov	r1, r6
 8007e50:	4628      	mov	r0, r5
 8007e52:	47b8      	blx	r7
 8007e54:	3001      	adds	r0, #1
 8007e56:	f43f aeaa 	beq.w	8007bae <_printf_float+0xc2>
 8007e5a:	f108 0801 	add.w	r8, r8, #1
 8007e5e:	e7ec      	b.n	8007e3a <_printf_float+0x34e>
 8007e60:	4613      	mov	r3, r2
 8007e62:	4631      	mov	r1, r6
 8007e64:	4642      	mov	r2, r8
 8007e66:	4628      	mov	r0, r5
 8007e68:	47b8      	blx	r7
 8007e6a:	3001      	adds	r0, #1
 8007e6c:	d1c0      	bne.n	8007df0 <_printf_float+0x304>
 8007e6e:	e69e      	b.n	8007bae <_printf_float+0xc2>
 8007e70:	2301      	movs	r3, #1
 8007e72:	4631      	mov	r1, r6
 8007e74:	4628      	mov	r0, r5
 8007e76:	9205      	str	r2, [sp, #20]
 8007e78:	47b8      	blx	r7
 8007e7a:	3001      	adds	r0, #1
 8007e7c:	f43f ae97 	beq.w	8007bae <_printf_float+0xc2>
 8007e80:	9a05      	ldr	r2, [sp, #20]
 8007e82:	f10b 0b01 	add.w	fp, fp, #1
 8007e86:	e7b9      	b.n	8007dfc <_printf_float+0x310>
 8007e88:	ee18 3a10 	vmov	r3, s16
 8007e8c:	4652      	mov	r2, sl
 8007e8e:	4631      	mov	r1, r6
 8007e90:	4628      	mov	r0, r5
 8007e92:	47b8      	blx	r7
 8007e94:	3001      	adds	r0, #1
 8007e96:	d1be      	bne.n	8007e16 <_printf_float+0x32a>
 8007e98:	e689      	b.n	8007bae <_printf_float+0xc2>
 8007e9a:	9a05      	ldr	r2, [sp, #20]
 8007e9c:	464b      	mov	r3, r9
 8007e9e:	4442      	add	r2, r8
 8007ea0:	4631      	mov	r1, r6
 8007ea2:	4628      	mov	r0, r5
 8007ea4:	47b8      	blx	r7
 8007ea6:	3001      	adds	r0, #1
 8007ea8:	d1c1      	bne.n	8007e2e <_printf_float+0x342>
 8007eaa:	e680      	b.n	8007bae <_printf_float+0xc2>
 8007eac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007eae:	2a01      	cmp	r2, #1
 8007eb0:	dc01      	bgt.n	8007eb6 <_printf_float+0x3ca>
 8007eb2:	07db      	lsls	r3, r3, #31
 8007eb4:	d538      	bpl.n	8007f28 <_printf_float+0x43c>
 8007eb6:	2301      	movs	r3, #1
 8007eb8:	4642      	mov	r2, r8
 8007eba:	4631      	mov	r1, r6
 8007ebc:	4628      	mov	r0, r5
 8007ebe:	47b8      	blx	r7
 8007ec0:	3001      	adds	r0, #1
 8007ec2:	f43f ae74 	beq.w	8007bae <_printf_float+0xc2>
 8007ec6:	ee18 3a10 	vmov	r3, s16
 8007eca:	4652      	mov	r2, sl
 8007ecc:	4631      	mov	r1, r6
 8007ece:	4628      	mov	r0, r5
 8007ed0:	47b8      	blx	r7
 8007ed2:	3001      	adds	r0, #1
 8007ed4:	f43f ae6b 	beq.w	8007bae <_printf_float+0xc2>
 8007ed8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8007edc:	2200      	movs	r2, #0
 8007ede:	2300      	movs	r3, #0
 8007ee0:	f7f8 fdf2 	bl	8000ac8 <__aeabi_dcmpeq>
 8007ee4:	b9d8      	cbnz	r0, 8007f1e <_printf_float+0x432>
 8007ee6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007ee8:	f108 0201 	add.w	r2, r8, #1
 8007eec:	3b01      	subs	r3, #1
 8007eee:	4631      	mov	r1, r6
 8007ef0:	4628      	mov	r0, r5
 8007ef2:	47b8      	blx	r7
 8007ef4:	3001      	adds	r0, #1
 8007ef6:	d10e      	bne.n	8007f16 <_printf_float+0x42a>
 8007ef8:	e659      	b.n	8007bae <_printf_float+0xc2>
 8007efa:	2301      	movs	r3, #1
 8007efc:	4652      	mov	r2, sl
 8007efe:	4631      	mov	r1, r6
 8007f00:	4628      	mov	r0, r5
 8007f02:	47b8      	blx	r7
 8007f04:	3001      	adds	r0, #1
 8007f06:	f43f ae52 	beq.w	8007bae <_printf_float+0xc2>
 8007f0a:	f108 0801 	add.w	r8, r8, #1
 8007f0e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8007f10:	3b01      	subs	r3, #1
 8007f12:	4543      	cmp	r3, r8
 8007f14:	dcf1      	bgt.n	8007efa <_printf_float+0x40e>
 8007f16:	464b      	mov	r3, r9
 8007f18:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8007f1c:	e6dc      	b.n	8007cd8 <_printf_float+0x1ec>
 8007f1e:	f04f 0800 	mov.w	r8, #0
 8007f22:	f104 0a1a 	add.w	sl, r4, #26
 8007f26:	e7f2      	b.n	8007f0e <_printf_float+0x422>
 8007f28:	2301      	movs	r3, #1
 8007f2a:	4642      	mov	r2, r8
 8007f2c:	e7df      	b.n	8007eee <_printf_float+0x402>
 8007f2e:	2301      	movs	r3, #1
 8007f30:	464a      	mov	r2, r9
 8007f32:	4631      	mov	r1, r6
 8007f34:	4628      	mov	r0, r5
 8007f36:	47b8      	blx	r7
 8007f38:	3001      	adds	r0, #1
 8007f3a:	f43f ae38 	beq.w	8007bae <_printf_float+0xc2>
 8007f3e:	f108 0801 	add.w	r8, r8, #1
 8007f42:	68e3      	ldr	r3, [r4, #12]
 8007f44:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8007f46:	1a5b      	subs	r3, r3, r1
 8007f48:	4543      	cmp	r3, r8
 8007f4a:	dcf0      	bgt.n	8007f2e <_printf_float+0x442>
 8007f4c:	e6fa      	b.n	8007d44 <_printf_float+0x258>
 8007f4e:	f04f 0800 	mov.w	r8, #0
 8007f52:	f104 0919 	add.w	r9, r4, #25
 8007f56:	e7f4      	b.n	8007f42 <_printf_float+0x456>

08007f58 <_printf_common>:
 8007f58:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007f5c:	4616      	mov	r6, r2
 8007f5e:	4699      	mov	r9, r3
 8007f60:	688a      	ldr	r2, [r1, #8]
 8007f62:	690b      	ldr	r3, [r1, #16]
 8007f64:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8007f68:	4293      	cmp	r3, r2
 8007f6a:	bfb8      	it	lt
 8007f6c:	4613      	movlt	r3, r2
 8007f6e:	6033      	str	r3, [r6, #0]
 8007f70:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8007f74:	4607      	mov	r7, r0
 8007f76:	460c      	mov	r4, r1
 8007f78:	b10a      	cbz	r2, 8007f7e <_printf_common+0x26>
 8007f7a:	3301      	adds	r3, #1
 8007f7c:	6033      	str	r3, [r6, #0]
 8007f7e:	6823      	ldr	r3, [r4, #0]
 8007f80:	0699      	lsls	r1, r3, #26
 8007f82:	bf42      	ittt	mi
 8007f84:	6833      	ldrmi	r3, [r6, #0]
 8007f86:	3302      	addmi	r3, #2
 8007f88:	6033      	strmi	r3, [r6, #0]
 8007f8a:	6825      	ldr	r5, [r4, #0]
 8007f8c:	f015 0506 	ands.w	r5, r5, #6
 8007f90:	d106      	bne.n	8007fa0 <_printf_common+0x48>
 8007f92:	f104 0a19 	add.w	sl, r4, #25
 8007f96:	68e3      	ldr	r3, [r4, #12]
 8007f98:	6832      	ldr	r2, [r6, #0]
 8007f9a:	1a9b      	subs	r3, r3, r2
 8007f9c:	42ab      	cmp	r3, r5
 8007f9e:	dc26      	bgt.n	8007fee <_printf_common+0x96>
 8007fa0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8007fa4:	1e13      	subs	r3, r2, #0
 8007fa6:	6822      	ldr	r2, [r4, #0]
 8007fa8:	bf18      	it	ne
 8007faa:	2301      	movne	r3, #1
 8007fac:	0692      	lsls	r2, r2, #26
 8007fae:	d42b      	bmi.n	8008008 <_printf_common+0xb0>
 8007fb0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8007fb4:	4649      	mov	r1, r9
 8007fb6:	4638      	mov	r0, r7
 8007fb8:	47c0      	blx	r8
 8007fba:	3001      	adds	r0, #1
 8007fbc:	d01e      	beq.n	8007ffc <_printf_common+0xa4>
 8007fbe:	6823      	ldr	r3, [r4, #0]
 8007fc0:	68e5      	ldr	r5, [r4, #12]
 8007fc2:	6832      	ldr	r2, [r6, #0]
 8007fc4:	f003 0306 	and.w	r3, r3, #6
 8007fc8:	2b04      	cmp	r3, #4
 8007fca:	bf08      	it	eq
 8007fcc:	1aad      	subeq	r5, r5, r2
 8007fce:	68a3      	ldr	r3, [r4, #8]
 8007fd0:	6922      	ldr	r2, [r4, #16]
 8007fd2:	bf0c      	ite	eq
 8007fd4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007fd8:	2500      	movne	r5, #0
 8007fda:	4293      	cmp	r3, r2
 8007fdc:	bfc4      	itt	gt
 8007fde:	1a9b      	subgt	r3, r3, r2
 8007fe0:	18ed      	addgt	r5, r5, r3
 8007fe2:	2600      	movs	r6, #0
 8007fe4:	341a      	adds	r4, #26
 8007fe6:	42b5      	cmp	r5, r6
 8007fe8:	d11a      	bne.n	8008020 <_printf_common+0xc8>
 8007fea:	2000      	movs	r0, #0
 8007fec:	e008      	b.n	8008000 <_printf_common+0xa8>
 8007fee:	2301      	movs	r3, #1
 8007ff0:	4652      	mov	r2, sl
 8007ff2:	4649      	mov	r1, r9
 8007ff4:	4638      	mov	r0, r7
 8007ff6:	47c0      	blx	r8
 8007ff8:	3001      	adds	r0, #1
 8007ffa:	d103      	bne.n	8008004 <_printf_common+0xac>
 8007ffc:	f04f 30ff 	mov.w	r0, #4294967295
 8008000:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008004:	3501      	adds	r5, #1
 8008006:	e7c6      	b.n	8007f96 <_printf_common+0x3e>
 8008008:	18e1      	adds	r1, r4, r3
 800800a:	1c5a      	adds	r2, r3, #1
 800800c:	2030      	movs	r0, #48	; 0x30
 800800e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8008012:	4422      	add	r2, r4
 8008014:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8008018:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800801c:	3302      	adds	r3, #2
 800801e:	e7c7      	b.n	8007fb0 <_printf_common+0x58>
 8008020:	2301      	movs	r3, #1
 8008022:	4622      	mov	r2, r4
 8008024:	4649      	mov	r1, r9
 8008026:	4638      	mov	r0, r7
 8008028:	47c0      	blx	r8
 800802a:	3001      	adds	r0, #1
 800802c:	d0e6      	beq.n	8007ffc <_printf_common+0xa4>
 800802e:	3601      	adds	r6, #1
 8008030:	e7d9      	b.n	8007fe6 <_printf_common+0x8e>
	...

08008034 <_printf_i>:
 8008034:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8008038:	7e0f      	ldrb	r7, [r1, #24]
 800803a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800803c:	2f78      	cmp	r7, #120	; 0x78
 800803e:	4691      	mov	r9, r2
 8008040:	4680      	mov	r8, r0
 8008042:	460c      	mov	r4, r1
 8008044:	469a      	mov	sl, r3
 8008046:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800804a:	d807      	bhi.n	800805c <_printf_i+0x28>
 800804c:	2f62      	cmp	r7, #98	; 0x62
 800804e:	d80a      	bhi.n	8008066 <_printf_i+0x32>
 8008050:	2f00      	cmp	r7, #0
 8008052:	f000 80d8 	beq.w	8008206 <_printf_i+0x1d2>
 8008056:	2f58      	cmp	r7, #88	; 0x58
 8008058:	f000 80a3 	beq.w	80081a2 <_printf_i+0x16e>
 800805c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8008060:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8008064:	e03a      	b.n	80080dc <_printf_i+0xa8>
 8008066:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800806a:	2b15      	cmp	r3, #21
 800806c:	d8f6      	bhi.n	800805c <_printf_i+0x28>
 800806e:	a101      	add	r1, pc, #4	; (adr r1, 8008074 <_printf_i+0x40>)
 8008070:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8008074:	080080cd 	.word	0x080080cd
 8008078:	080080e1 	.word	0x080080e1
 800807c:	0800805d 	.word	0x0800805d
 8008080:	0800805d 	.word	0x0800805d
 8008084:	0800805d 	.word	0x0800805d
 8008088:	0800805d 	.word	0x0800805d
 800808c:	080080e1 	.word	0x080080e1
 8008090:	0800805d 	.word	0x0800805d
 8008094:	0800805d 	.word	0x0800805d
 8008098:	0800805d 	.word	0x0800805d
 800809c:	0800805d 	.word	0x0800805d
 80080a0:	080081ed 	.word	0x080081ed
 80080a4:	08008111 	.word	0x08008111
 80080a8:	080081cf 	.word	0x080081cf
 80080ac:	0800805d 	.word	0x0800805d
 80080b0:	0800805d 	.word	0x0800805d
 80080b4:	0800820f 	.word	0x0800820f
 80080b8:	0800805d 	.word	0x0800805d
 80080bc:	08008111 	.word	0x08008111
 80080c0:	0800805d 	.word	0x0800805d
 80080c4:	0800805d 	.word	0x0800805d
 80080c8:	080081d7 	.word	0x080081d7
 80080cc:	682b      	ldr	r3, [r5, #0]
 80080ce:	1d1a      	adds	r2, r3, #4
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	602a      	str	r2, [r5, #0]
 80080d4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80080d8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80080dc:	2301      	movs	r3, #1
 80080de:	e0a3      	b.n	8008228 <_printf_i+0x1f4>
 80080e0:	6820      	ldr	r0, [r4, #0]
 80080e2:	6829      	ldr	r1, [r5, #0]
 80080e4:	0606      	lsls	r6, r0, #24
 80080e6:	f101 0304 	add.w	r3, r1, #4
 80080ea:	d50a      	bpl.n	8008102 <_printf_i+0xce>
 80080ec:	680e      	ldr	r6, [r1, #0]
 80080ee:	602b      	str	r3, [r5, #0]
 80080f0:	2e00      	cmp	r6, #0
 80080f2:	da03      	bge.n	80080fc <_printf_i+0xc8>
 80080f4:	232d      	movs	r3, #45	; 0x2d
 80080f6:	4276      	negs	r6, r6
 80080f8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80080fc:	485e      	ldr	r0, [pc, #376]	; (8008278 <_printf_i+0x244>)
 80080fe:	230a      	movs	r3, #10
 8008100:	e019      	b.n	8008136 <_printf_i+0x102>
 8008102:	680e      	ldr	r6, [r1, #0]
 8008104:	602b      	str	r3, [r5, #0]
 8008106:	f010 0f40 	tst.w	r0, #64	; 0x40
 800810a:	bf18      	it	ne
 800810c:	b236      	sxthne	r6, r6
 800810e:	e7ef      	b.n	80080f0 <_printf_i+0xbc>
 8008110:	682b      	ldr	r3, [r5, #0]
 8008112:	6820      	ldr	r0, [r4, #0]
 8008114:	1d19      	adds	r1, r3, #4
 8008116:	6029      	str	r1, [r5, #0]
 8008118:	0601      	lsls	r1, r0, #24
 800811a:	d501      	bpl.n	8008120 <_printf_i+0xec>
 800811c:	681e      	ldr	r6, [r3, #0]
 800811e:	e002      	b.n	8008126 <_printf_i+0xf2>
 8008120:	0646      	lsls	r6, r0, #25
 8008122:	d5fb      	bpl.n	800811c <_printf_i+0xe8>
 8008124:	881e      	ldrh	r6, [r3, #0]
 8008126:	4854      	ldr	r0, [pc, #336]	; (8008278 <_printf_i+0x244>)
 8008128:	2f6f      	cmp	r7, #111	; 0x6f
 800812a:	bf0c      	ite	eq
 800812c:	2308      	moveq	r3, #8
 800812e:	230a      	movne	r3, #10
 8008130:	2100      	movs	r1, #0
 8008132:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8008136:	6865      	ldr	r5, [r4, #4]
 8008138:	60a5      	str	r5, [r4, #8]
 800813a:	2d00      	cmp	r5, #0
 800813c:	bfa2      	ittt	ge
 800813e:	6821      	ldrge	r1, [r4, #0]
 8008140:	f021 0104 	bicge.w	r1, r1, #4
 8008144:	6021      	strge	r1, [r4, #0]
 8008146:	b90e      	cbnz	r6, 800814c <_printf_i+0x118>
 8008148:	2d00      	cmp	r5, #0
 800814a:	d04d      	beq.n	80081e8 <_printf_i+0x1b4>
 800814c:	4615      	mov	r5, r2
 800814e:	fbb6 f1f3 	udiv	r1, r6, r3
 8008152:	fb03 6711 	mls	r7, r3, r1, r6
 8008156:	5dc7      	ldrb	r7, [r0, r7]
 8008158:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800815c:	4637      	mov	r7, r6
 800815e:	42bb      	cmp	r3, r7
 8008160:	460e      	mov	r6, r1
 8008162:	d9f4      	bls.n	800814e <_printf_i+0x11a>
 8008164:	2b08      	cmp	r3, #8
 8008166:	d10b      	bne.n	8008180 <_printf_i+0x14c>
 8008168:	6823      	ldr	r3, [r4, #0]
 800816a:	07de      	lsls	r6, r3, #31
 800816c:	d508      	bpl.n	8008180 <_printf_i+0x14c>
 800816e:	6923      	ldr	r3, [r4, #16]
 8008170:	6861      	ldr	r1, [r4, #4]
 8008172:	4299      	cmp	r1, r3
 8008174:	bfde      	ittt	le
 8008176:	2330      	movle	r3, #48	; 0x30
 8008178:	f805 3c01 	strble.w	r3, [r5, #-1]
 800817c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8008180:	1b52      	subs	r2, r2, r5
 8008182:	6122      	str	r2, [r4, #16]
 8008184:	f8cd a000 	str.w	sl, [sp]
 8008188:	464b      	mov	r3, r9
 800818a:	aa03      	add	r2, sp, #12
 800818c:	4621      	mov	r1, r4
 800818e:	4640      	mov	r0, r8
 8008190:	f7ff fee2 	bl	8007f58 <_printf_common>
 8008194:	3001      	adds	r0, #1
 8008196:	d14c      	bne.n	8008232 <_printf_i+0x1fe>
 8008198:	f04f 30ff 	mov.w	r0, #4294967295
 800819c:	b004      	add	sp, #16
 800819e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80081a2:	4835      	ldr	r0, [pc, #212]	; (8008278 <_printf_i+0x244>)
 80081a4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 80081a8:	6829      	ldr	r1, [r5, #0]
 80081aa:	6823      	ldr	r3, [r4, #0]
 80081ac:	f851 6b04 	ldr.w	r6, [r1], #4
 80081b0:	6029      	str	r1, [r5, #0]
 80081b2:	061d      	lsls	r5, r3, #24
 80081b4:	d514      	bpl.n	80081e0 <_printf_i+0x1ac>
 80081b6:	07df      	lsls	r7, r3, #31
 80081b8:	bf44      	itt	mi
 80081ba:	f043 0320 	orrmi.w	r3, r3, #32
 80081be:	6023      	strmi	r3, [r4, #0]
 80081c0:	b91e      	cbnz	r6, 80081ca <_printf_i+0x196>
 80081c2:	6823      	ldr	r3, [r4, #0]
 80081c4:	f023 0320 	bic.w	r3, r3, #32
 80081c8:	6023      	str	r3, [r4, #0]
 80081ca:	2310      	movs	r3, #16
 80081cc:	e7b0      	b.n	8008130 <_printf_i+0xfc>
 80081ce:	6823      	ldr	r3, [r4, #0]
 80081d0:	f043 0320 	orr.w	r3, r3, #32
 80081d4:	6023      	str	r3, [r4, #0]
 80081d6:	2378      	movs	r3, #120	; 0x78
 80081d8:	4828      	ldr	r0, [pc, #160]	; (800827c <_printf_i+0x248>)
 80081da:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 80081de:	e7e3      	b.n	80081a8 <_printf_i+0x174>
 80081e0:	0659      	lsls	r1, r3, #25
 80081e2:	bf48      	it	mi
 80081e4:	b2b6      	uxthmi	r6, r6
 80081e6:	e7e6      	b.n	80081b6 <_printf_i+0x182>
 80081e8:	4615      	mov	r5, r2
 80081ea:	e7bb      	b.n	8008164 <_printf_i+0x130>
 80081ec:	682b      	ldr	r3, [r5, #0]
 80081ee:	6826      	ldr	r6, [r4, #0]
 80081f0:	6961      	ldr	r1, [r4, #20]
 80081f2:	1d18      	adds	r0, r3, #4
 80081f4:	6028      	str	r0, [r5, #0]
 80081f6:	0635      	lsls	r5, r6, #24
 80081f8:	681b      	ldr	r3, [r3, #0]
 80081fa:	d501      	bpl.n	8008200 <_printf_i+0x1cc>
 80081fc:	6019      	str	r1, [r3, #0]
 80081fe:	e002      	b.n	8008206 <_printf_i+0x1d2>
 8008200:	0670      	lsls	r0, r6, #25
 8008202:	d5fb      	bpl.n	80081fc <_printf_i+0x1c8>
 8008204:	8019      	strh	r1, [r3, #0]
 8008206:	2300      	movs	r3, #0
 8008208:	6123      	str	r3, [r4, #16]
 800820a:	4615      	mov	r5, r2
 800820c:	e7ba      	b.n	8008184 <_printf_i+0x150>
 800820e:	682b      	ldr	r3, [r5, #0]
 8008210:	1d1a      	adds	r2, r3, #4
 8008212:	602a      	str	r2, [r5, #0]
 8008214:	681d      	ldr	r5, [r3, #0]
 8008216:	6862      	ldr	r2, [r4, #4]
 8008218:	2100      	movs	r1, #0
 800821a:	4628      	mov	r0, r5
 800821c:	f7f7 ffe0 	bl	80001e0 <memchr>
 8008220:	b108      	cbz	r0, 8008226 <_printf_i+0x1f2>
 8008222:	1b40      	subs	r0, r0, r5
 8008224:	6060      	str	r0, [r4, #4]
 8008226:	6863      	ldr	r3, [r4, #4]
 8008228:	6123      	str	r3, [r4, #16]
 800822a:	2300      	movs	r3, #0
 800822c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8008230:	e7a8      	b.n	8008184 <_printf_i+0x150>
 8008232:	6923      	ldr	r3, [r4, #16]
 8008234:	462a      	mov	r2, r5
 8008236:	4649      	mov	r1, r9
 8008238:	4640      	mov	r0, r8
 800823a:	47d0      	blx	sl
 800823c:	3001      	adds	r0, #1
 800823e:	d0ab      	beq.n	8008198 <_printf_i+0x164>
 8008240:	6823      	ldr	r3, [r4, #0]
 8008242:	079b      	lsls	r3, r3, #30
 8008244:	d413      	bmi.n	800826e <_printf_i+0x23a>
 8008246:	68e0      	ldr	r0, [r4, #12]
 8008248:	9b03      	ldr	r3, [sp, #12]
 800824a:	4298      	cmp	r0, r3
 800824c:	bfb8      	it	lt
 800824e:	4618      	movlt	r0, r3
 8008250:	e7a4      	b.n	800819c <_printf_i+0x168>
 8008252:	2301      	movs	r3, #1
 8008254:	4632      	mov	r2, r6
 8008256:	4649      	mov	r1, r9
 8008258:	4640      	mov	r0, r8
 800825a:	47d0      	blx	sl
 800825c:	3001      	adds	r0, #1
 800825e:	d09b      	beq.n	8008198 <_printf_i+0x164>
 8008260:	3501      	adds	r5, #1
 8008262:	68e3      	ldr	r3, [r4, #12]
 8008264:	9903      	ldr	r1, [sp, #12]
 8008266:	1a5b      	subs	r3, r3, r1
 8008268:	42ab      	cmp	r3, r5
 800826a:	dcf2      	bgt.n	8008252 <_printf_i+0x21e>
 800826c:	e7eb      	b.n	8008246 <_printf_i+0x212>
 800826e:	2500      	movs	r5, #0
 8008270:	f104 0619 	add.w	r6, r4, #25
 8008274:	e7f5      	b.n	8008262 <_printf_i+0x22e>
 8008276:	bf00      	nop
 8008278:	0800c492 	.word	0x0800c492
 800827c:	0800c4a3 	.word	0x0800c4a3

08008280 <_scanf_float>:
 8008280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008284:	b087      	sub	sp, #28
 8008286:	4617      	mov	r7, r2
 8008288:	9303      	str	r3, [sp, #12]
 800828a:	688b      	ldr	r3, [r1, #8]
 800828c:	1e5a      	subs	r2, r3, #1
 800828e:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 8008292:	bf83      	ittte	hi
 8008294:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 8008298:	195b      	addhi	r3, r3, r5
 800829a:	9302      	strhi	r3, [sp, #8]
 800829c:	2300      	movls	r3, #0
 800829e:	bf86      	itte	hi
 80082a0:	f240 135d 	movwhi	r3, #349	; 0x15d
 80082a4:	608b      	strhi	r3, [r1, #8]
 80082a6:	9302      	strls	r3, [sp, #8]
 80082a8:	680b      	ldr	r3, [r1, #0]
 80082aa:	468b      	mov	fp, r1
 80082ac:	2500      	movs	r5, #0
 80082ae:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 80082b2:	f84b 3b1c 	str.w	r3, [fp], #28
 80082b6:	e9cd 5504 	strd	r5, r5, [sp, #16]
 80082ba:	4680      	mov	r8, r0
 80082bc:	460c      	mov	r4, r1
 80082be:	465e      	mov	r6, fp
 80082c0:	46aa      	mov	sl, r5
 80082c2:	46a9      	mov	r9, r5
 80082c4:	9501      	str	r5, [sp, #4]
 80082c6:	68a2      	ldr	r2, [r4, #8]
 80082c8:	b152      	cbz	r2, 80082e0 <_scanf_float+0x60>
 80082ca:	683b      	ldr	r3, [r7, #0]
 80082cc:	781b      	ldrb	r3, [r3, #0]
 80082ce:	2b4e      	cmp	r3, #78	; 0x4e
 80082d0:	d864      	bhi.n	800839c <_scanf_float+0x11c>
 80082d2:	2b40      	cmp	r3, #64	; 0x40
 80082d4:	d83c      	bhi.n	8008350 <_scanf_float+0xd0>
 80082d6:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 80082da:	b2c8      	uxtb	r0, r1
 80082dc:	280e      	cmp	r0, #14
 80082de:	d93a      	bls.n	8008356 <_scanf_float+0xd6>
 80082e0:	f1b9 0f00 	cmp.w	r9, #0
 80082e4:	d003      	beq.n	80082ee <_scanf_float+0x6e>
 80082e6:	6823      	ldr	r3, [r4, #0]
 80082e8:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80082ec:	6023      	str	r3, [r4, #0]
 80082ee:	f10a 3aff 	add.w	sl, sl, #4294967295
 80082f2:	f1ba 0f01 	cmp.w	sl, #1
 80082f6:	f200 8113 	bhi.w	8008520 <_scanf_float+0x2a0>
 80082fa:	455e      	cmp	r6, fp
 80082fc:	f200 8105 	bhi.w	800850a <_scanf_float+0x28a>
 8008300:	2501      	movs	r5, #1
 8008302:	4628      	mov	r0, r5
 8008304:	b007      	add	sp, #28
 8008306:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800830a:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800830e:	2a0d      	cmp	r2, #13
 8008310:	d8e6      	bhi.n	80082e0 <_scanf_float+0x60>
 8008312:	a101      	add	r1, pc, #4	; (adr r1, 8008318 <_scanf_float+0x98>)
 8008314:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8008318:	08008457 	.word	0x08008457
 800831c:	080082e1 	.word	0x080082e1
 8008320:	080082e1 	.word	0x080082e1
 8008324:	080082e1 	.word	0x080082e1
 8008328:	080084b7 	.word	0x080084b7
 800832c:	0800848f 	.word	0x0800848f
 8008330:	080082e1 	.word	0x080082e1
 8008334:	080082e1 	.word	0x080082e1
 8008338:	08008465 	.word	0x08008465
 800833c:	080082e1 	.word	0x080082e1
 8008340:	080082e1 	.word	0x080082e1
 8008344:	080082e1 	.word	0x080082e1
 8008348:	080082e1 	.word	0x080082e1
 800834c:	0800841d 	.word	0x0800841d
 8008350:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 8008354:	e7db      	b.n	800830e <_scanf_float+0x8e>
 8008356:	290e      	cmp	r1, #14
 8008358:	d8c2      	bhi.n	80082e0 <_scanf_float+0x60>
 800835a:	a001      	add	r0, pc, #4	; (adr r0, 8008360 <_scanf_float+0xe0>)
 800835c:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8008360:	0800840f 	.word	0x0800840f
 8008364:	080082e1 	.word	0x080082e1
 8008368:	0800840f 	.word	0x0800840f
 800836c:	080084a3 	.word	0x080084a3
 8008370:	080082e1 	.word	0x080082e1
 8008374:	080083bd 	.word	0x080083bd
 8008378:	080083f9 	.word	0x080083f9
 800837c:	080083f9 	.word	0x080083f9
 8008380:	080083f9 	.word	0x080083f9
 8008384:	080083f9 	.word	0x080083f9
 8008388:	080083f9 	.word	0x080083f9
 800838c:	080083f9 	.word	0x080083f9
 8008390:	080083f9 	.word	0x080083f9
 8008394:	080083f9 	.word	0x080083f9
 8008398:	080083f9 	.word	0x080083f9
 800839c:	2b6e      	cmp	r3, #110	; 0x6e
 800839e:	d809      	bhi.n	80083b4 <_scanf_float+0x134>
 80083a0:	2b60      	cmp	r3, #96	; 0x60
 80083a2:	d8b2      	bhi.n	800830a <_scanf_float+0x8a>
 80083a4:	2b54      	cmp	r3, #84	; 0x54
 80083a6:	d077      	beq.n	8008498 <_scanf_float+0x218>
 80083a8:	2b59      	cmp	r3, #89	; 0x59
 80083aa:	d199      	bne.n	80082e0 <_scanf_float+0x60>
 80083ac:	2d07      	cmp	r5, #7
 80083ae:	d197      	bne.n	80082e0 <_scanf_float+0x60>
 80083b0:	2508      	movs	r5, #8
 80083b2:	e029      	b.n	8008408 <_scanf_float+0x188>
 80083b4:	2b74      	cmp	r3, #116	; 0x74
 80083b6:	d06f      	beq.n	8008498 <_scanf_float+0x218>
 80083b8:	2b79      	cmp	r3, #121	; 0x79
 80083ba:	e7f6      	b.n	80083aa <_scanf_float+0x12a>
 80083bc:	6821      	ldr	r1, [r4, #0]
 80083be:	05c8      	lsls	r0, r1, #23
 80083c0:	d51a      	bpl.n	80083f8 <_scanf_float+0x178>
 80083c2:	9b02      	ldr	r3, [sp, #8]
 80083c4:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 80083c8:	6021      	str	r1, [r4, #0]
 80083ca:	f109 0901 	add.w	r9, r9, #1
 80083ce:	b11b      	cbz	r3, 80083d8 <_scanf_float+0x158>
 80083d0:	3b01      	subs	r3, #1
 80083d2:	3201      	adds	r2, #1
 80083d4:	9302      	str	r3, [sp, #8]
 80083d6:	60a2      	str	r2, [r4, #8]
 80083d8:	68a3      	ldr	r3, [r4, #8]
 80083da:	3b01      	subs	r3, #1
 80083dc:	60a3      	str	r3, [r4, #8]
 80083de:	6923      	ldr	r3, [r4, #16]
 80083e0:	3301      	adds	r3, #1
 80083e2:	6123      	str	r3, [r4, #16]
 80083e4:	687b      	ldr	r3, [r7, #4]
 80083e6:	3b01      	subs	r3, #1
 80083e8:	2b00      	cmp	r3, #0
 80083ea:	607b      	str	r3, [r7, #4]
 80083ec:	f340 8084 	ble.w	80084f8 <_scanf_float+0x278>
 80083f0:	683b      	ldr	r3, [r7, #0]
 80083f2:	3301      	adds	r3, #1
 80083f4:	603b      	str	r3, [r7, #0]
 80083f6:	e766      	b.n	80082c6 <_scanf_float+0x46>
 80083f8:	eb1a 0f05 	cmn.w	sl, r5
 80083fc:	f47f af70 	bne.w	80082e0 <_scanf_float+0x60>
 8008400:	6822      	ldr	r2, [r4, #0]
 8008402:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 8008406:	6022      	str	r2, [r4, #0]
 8008408:	f806 3b01 	strb.w	r3, [r6], #1
 800840c:	e7e4      	b.n	80083d8 <_scanf_float+0x158>
 800840e:	6822      	ldr	r2, [r4, #0]
 8008410:	0610      	lsls	r0, r2, #24
 8008412:	f57f af65 	bpl.w	80082e0 <_scanf_float+0x60>
 8008416:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800841a:	e7f4      	b.n	8008406 <_scanf_float+0x186>
 800841c:	f1ba 0f00 	cmp.w	sl, #0
 8008420:	d10e      	bne.n	8008440 <_scanf_float+0x1c0>
 8008422:	f1b9 0f00 	cmp.w	r9, #0
 8008426:	d10e      	bne.n	8008446 <_scanf_float+0x1c6>
 8008428:	6822      	ldr	r2, [r4, #0]
 800842a:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800842e:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008432:	d108      	bne.n	8008446 <_scanf_float+0x1c6>
 8008434:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008438:	6022      	str	r2, [r4, #0]
 800843a:	f04f 0a01 	mov.w	sl, #1
 800843e:	e7e3      	b.n	8008408 <_scanf_float+0x188>
 8008440:	f1ba 0f02 	cmp.w	sl, #2
 8008444:	d055      	beq.n	80084f2 <_scanf_float+0x272>
 8008446:	2d01      	cmp	r5, #1
 8008448:	d002      	beq.n	8008450 <_scanf_float+0x1d0>
 800844a:	2d04      	cmp	r5, #4
 800844c:	f47f af48 	bne.w	80082e0 <_scanf_float+0x60>
 8008450:	3501      	adds	r5, #1
 8008452:	b2ed      	uxtb	r5, r5
 8008454:	e7d8      	b.n	8008408 <_scanf_float+0x188>
 8008456:	f1ba 0f01 	cmp.w	sl, #1
 800845a:	f47f af41 	bne.w	80082e0 <_scanf_float+0x60>
 800845e:	f04f 0a02 	mov.w	sl, #2
 8008462:	e7d1      	b.n	8008408 <_scanf_float+0x188>
 8008464:	b97d      	cbnz	r5, 8008486 <_scanf_float+0x206>
 8008466:	f1b9 0f00 	cmp.w	r9, #0
 800846a:	f47f af3c 	bne.w	80082e6 <_scanf_float+0x66>
 800846e:	6822      	ldr	r2, [r4, #0]
 8008470:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 8008474:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 8008478:	f47f af39 	bne.w	80082ee <_scanf_float+0x6e>
 800847c:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 8008480:	6022      	str	r2, [r4, #0]
 8008482:	2501      	movs	r5, #1
 8008484:	e7c0      	b.n	8008408 <_scanf_float+0x188>
 8008486:	2d03      	cmp	r5, #3
 8008488:	d0e2      	beq.n	8008450 <_scanf_float+0x1d0>
 800848a:	2d05      	cmp	r5, #5
 800848c:	e7de      	b.n	800844c <_scanf_float+0x1cc>
 800848e:	2d02      	cmp	r5, #2
 8008490:	f47f af26 	bne.w	80082e0 <_scanf_float+0x60>
 8008494:	2503      	movs	r5, #3
 8008496:	e7b7      	b.n	8008408 <_scanf_float+0x188>
 8008498:	2d06      	cmp	r5, #6
 800849a:	f47f af21 	bne.w	80082e0 <_scanf_float+0x60>
 800849e:	2507      	movs	r5, #7
 80084a0:	e7b2      	b.n	8008408 <_scanf_float+0x188>
 80084a2:	6822      	ldr	r2, [r4, #0]
 80084a4:	0591      	lsls	r1, r2, #22
 80084a6:	f57f af1b 	bpl.w	80082e0 <_scanf_float+0x60>
 80084aa:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 80084ae:	6022      	str	r2, [r4, #0]
 80084b0:	f8cd 9004 	str.w	r9, [sp, #4]
 80084b4:	e7a8      	b.n	8008408 <_scanf_float+0x188>
 80084b6:	6822      	ldr	r2, [r4, #0]
 80084b8:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 80084bc:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 80084c0:	d006      	beq.n	80084d0 <_scanf_float+0x250>
 80084c2:	0550      	lsls	r0, r2, #21
 80084c4:	f57f af0c 	bpl.w	80082e0 <_scanf_float+0x60>
 80084c8:	f1b9 0f00 	cmp.w	r9, #0
 80084cc:	f43f af0f 	beq.w	80082ee <_scanf_float+0x6e>
 80084d0:	0591      	lsls	r1, r2, #22
 80084d2:	bf58      	it	pl
 80084d4:	9901      	ldrpl	r1, [sp, #4]
 80084d6:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 80084da:	bf58      	it	pl
 80084dc:	eba9 0101 	subpl.w	r1, r9, r1
 80084e0:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 80084e4:	bf58      	it	pl
 80084e6:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 80084ea:	6022      	str	r2, [r4, #0]
 80084ec:	f04f 0900 	mov.w	r9, #0
 80084f0:	e78a      	b.n	8008408 <_scanf_float+0x188>
 80084f2:	f04f 0a03 	mov.w	sl, #3
 80084f6:	e787      	b.n	8008408 <_scanf_float+0x188>
 80084f8:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 80084fc:	4639      	mov	r1, r7
 80084fe:	4640      	mov	r0, r8
 8008500:	4798      	blx	r3
 8008502:	2800      	cmp	r0, #0
 8008504:	f43f aedf 	beq.w	80082c6 <_scanf_float+0x46>
 8008508:	e6ea      	b.n	80082e0 <_scanf_float+0x60>
 800850a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800850e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008512:	463a      	mov	r2, r7
 8008514:	4640      	mov	r0, r8
 8008516:	4798      	blx	r3
 8008518:	6923      	ldr	r3, [r4, #16]
 800851a:	3b01      	subs	r3, #1
 800851c:	6123      	str	r3, [r4, #16]
 800851e:	e6ec      	b.n	80082fa <_scanf_float+0x7a>
 8008520:	1e6b      	subs	r3, r5, #1
 8008522:	2b06      	cmp	r3, #6
 8008524:	d825      	bhi.n	8008572 <_scanf_float+0x2f2>
 8008526:	2d02      	cmp	r5, #2
 8008528:	d836      	bhi.n	8008598 <_scanf_float+0x318>
 800852a:	455e      	cmp	r6, fp
 800852c:	f67f aee8 	bls.w	8008300 <_scanf_float+0x80>
 8008530:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008534:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8008538:	463a      	mov	r2, r7
 800853a:	4640      	mov	r0, r8
 800853c:	4798      	blx	r3
 800853e:	6923      	ldr	r3, [r4, #16]
 8008540:	3b01      	subs	r3, #1
 8008542:	6123      	str	r3, [r4, #16]
 8008544:	e7f1      	b.n	800852a <_scanf_float+0x2aa>
 8008546:	9802      	ldr	r0, [sp, #8]
 8008548:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800854c:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 8008550:	9002      	str	r0, [sp, #8]
 8008552:	463a      	mov	r2, r7
 8008554:	4640      	mov	r0, r8
 8008556:	4798      	blx	r3
 8008558:	6923      	ldr	r3, [r4, #16]
 800855a:	3b01      	subs	r3, #1
 800855c:	6123      	str	r3, [r4, #16]
 800855e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8008562:	fa5f fa8a 	uxtb.w	sl, sl
 8008566:	f1ba 0f02 	cmp.w	sl, #2
 800856a:	d1ec      	bne.n	8008546 <_scanf_float+0x2c6>
 800856c:	3d03      	subs	r5, #3
 800856e:	b2ed      	uxtb	r5, r5
 8008570:	1b76      	subs	r6, r6, r5
 8008572:	6823      	ldr	r3, [r4, #0]
 8008574:	05da      	lsls	r2, r3, #23
 8008576:	d52f      	bpl.n	80085d8 <_scanf_float+0x358>
 8008578:	055b      	lsls	r3, r3, #21
 800857a:	d510      	bpl.n	800859e <_scanf_float+0x31e>
 800857c:	455e      	cmp	r6, fp
 800857e:	f67f aebf 	bls.w	8008300 <_scanf_float+0x80>
 8008582:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 8008586:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800858a:	463a      	mov	r2, r7
 800858c:	4640      	mov	r0, r8
 800858e:	4798      	blx	r3
 8008590:	6923      	ldr	r3, [r4, #16]
 8008592:	3b01      	subs	r3, #1
 8008594:	6123      	str	r3, [r4, #16]
 8008596:	e7f1      	b.n	800857c <_scanf_float+0x2fc>
 8008598:	46aa      	mov	sl, r5
 800859a:	9602      	str	r6, [sp, #8]
 800859c:	e7df      	b.n	800855e <_scanf_float+0x2de>
 800859e:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 80085a2:	6923      	ldr	r3, [r4, #16]
 80085a4:	2965      	cmp	r1, #101	; 0x65
 80085a6:	f103 33ff 	add.w	r3, r3, #4294967295
 80085aa:	f106 35ff 	add.w	r5, r6, #4294967295
 80085ae:	6123      	str	r3, [r4, #16]
 80085b0:	d00c      	beq.n	80085cc <_scanf_float+0x34c>
 80085b2:	2945      	cmp	r1, #69	; 0x45
 80085b4:	d00a      	beq.n	80085cc <_scanf_float+0x34c>
 80085b6:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085ba:	463a      	mov	r2, r7
 80085bc:	4640      	mov	r0, r8
 80085be:	4798      	blx	r3
 80085c0:	6923      	ldr	r3, [r4, #16]
 80085c2:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 80085c6:	3b01      	subs	r3, #1
 80085c8:	1eb5      	subs	r5, r6, #2
 80085ca:	6123      	str	r3, [r4, #16]
 80085cc:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 80085d0:	463a      	mov	r2, r7
 80085d2:	4640      	mov	r0, r8
 80085d4:	4798      	blx	r3
 80085d6:	462e      	mov	r6, r5
 80085d8:	6825      	ldr	r5, [r4, #0]
 80085da:	f015 0510 	ands.w	r5, r5, #16
 80085de:	d159      	bne.n	8008694 <_scanf_float+0x414>
 80085e0:	7035      	strb	r5, [r6, #0]
 80085e2:	6823      	ldr	r3, [r4, #0]
 80085e4:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 80085e8:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80085ec:	d11b      	bne.n	8008626 <_scanf_float+0x3a6>
 80085ee:	9b01      	ldr	r3, [sp, #4]
 80085f0:	454b      	cmp	r3, r9
 80085f2:	eba3 0209 	sub.w	r2, r3, r9
 80085f6:	d123      	bne.n	8008640 <_scanf_float+0x3c0>
 80085f8:	2200      	movs	r2, #0
 80085fa:	4659      	mov	r1, fp
 80085fc:	4640      	mov	r0, r8
 80085fe:	f000 fe99 	bl	8009334 <_strtod_r>
 8008602:	6822      	ldr	r2, [r4, #0]
 8008604:	9b03      	ldr	r3, [sp, #12]
 8008606:	f012 0f02 	tst.w	r2, #2
 800860a:	ec57 6b10 	vmov	r6, r7, d0
 800860e:	681b      	ldr	r3, [r3, #0]
 8008610:	d021      	beq.n	8008656 <_scanf_float+0x3d6>
 8008612:	9903      	ldr	r1, [sp, #12]
 8008614:	1d1a      	adds	r2, r3, #4
 8008616:	600a      	str	r2, [r1, #0]
 8008618:	681b      	ldr	r3, [r3, #0]
 800861a:	e9c3 6700 	strd	r6, r7, [r3]
 800861e:	68e3      	ldr	r3, [r4, #12]
 8008620:	3301      	adds	r3, #1
 8008622:	60e3      	str	r3, [r4, #12]
 8008624:	e66d      	b.n	8008302 <_scanf_float+0x82>
 8008626:	9b04      	ldr	r3, [sp, #16]
 8008628:	2b00      	cmp	r3, #0
 800862a:	d0e5      	beq.n	80085f8 <_scanf_float+0x378>
 800862c:	9905      	ldr	r1, [sp, #20]
 800862e:	230a      	movs	r3, #10
 8008630:	462a      	mov	r2, r5
 8008632:	3101      	adds	r1, #1
 8008634:	4640      	mov	r0, r8
 8008636:	f000 ff6d 	bl	8009514 <_strtol_r>
 800863a:	9b04      	ldr	r3, [sp, #16]
 800863c:	9e05      	ldr	r6, [sp, #20]
 800863e:	1ac2      	subs	r2, r0, r3
 8008640:	f204 136f 	addw	r3, r4, #367	; 0x16f
 8008644:	429e      	cmp	r6, r3
 8008646:	bf28      	it	cs
 8008648:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800864c:	4912      	ldr	r1, [pc, #72]	; (8008698 <_scanf_float+0x418>)
 800864e:	4630      	mov	r0, r6
 8008650:	f000 f82c 	bl	80086ac <siprintf>
 8008654:	e7d0      	b.n	80085f8 <_scanf_float+0x378>
 8008656:	9903      	ldr	r1, [sp, #12]
 8008658:	f012 0f04 	tst.w	r2, #4
 800865c:	f103 0204 	add.w	r2, r3, #4
 8008660:	600a      	str	r2, [r1, #0]
 8008662:	d1d9      	bne.n	8008618 <_scanf_float+0x398>
 8008664:	f8d3 8000 	ldr.w	r8, [r3]
 8008668:	ee10 2a10 	vmov	r2, s0
 800866c:	ee10 0a10 	vmov	r0, s0
 8008670:	463b      	mov	r3, r7
 8008672:	4639      	mov	r1, r7
 8008674:	f7f8 fa5a 	bl	8000b2c <__aeabi_dcmpun>
 8008678:	b128      	cbz	r0, 8008686 <_scanf_float+0x406>
 800867a:	4808      	ldr	r0, [pc, #32]	; (800869c <_scanf_float+0x41c>)
 800867c:	f000 f810 	bl	80086a0 <nanf>
 8008680:	ed88 0a00 	vstr	s0, [r8]
 8008684:	e7cb      	b.n	800861e <_scanf_float+0x39e>
 8008686:	4630      	mov	r0, r6
 8008688:	4639      	mov	r1, r7
 800868a:	f7f8 faad 	bl	8000be8 <__aeabi_d2f>
 800868e:	f8c8 0000 	str.w	r0, [r8]
 8008692:	e7c4      	b.n	800861e <_scanf_float+0x39e>
 8008694:	2500      	movs	r5, #0
 8008696:	e634      	b.n	8008302 <_scanf_float+0x82>
 8008698:	0800c4b4 	.word	0x0800c4b4
 800869c:	0800c5bf 	.word	0x0800c5bf

080086a0 <nanf>:
 80086a0:	ed9f 0a01 	vldr	s0, [pc, #4]	; 80086a8 <nanf+0x8>
 80086a4:	4770      	bx	lr
 80086a6:	bf00      	nop
 80086a8:	7fc00000 	.word	0x7fc00000

080086ac <siprintf>:
 80086ac:	b40e      	push	{r1, r2, r3}
 80086ae:	b500      	push	{lr}
 80086b0:	b09c      	sub	sp, #112	; 0x70
 80086b2:	ab1d      	add	r3, sp, #116	; 0x74
 80086b4:	9002      	str	r0, [sp, #8]
 80086b6:	9006      	str	r0, [sp, #24]
 80086b8:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 80086bc:	4809      	ldr	r0, [pc, #36]	; (80086e4 <siprintf+0x38>)
 80086be:	9107      	str	r1, [sp, #28]
 80086c0:	9104      	str	r1, [sp, #16]
 80086c2:	4909      	ldr	r1, [pc, #36]	; (80086e8 <siprintf+0x3c>)
 80086c4:	f853 2b04 	ldr.w	r2, [r3], #4
 80086c8:	9105      	str	r1, [sp, #20]
 80086ca:	6800      	ldr	r0, [r0, #0]
 80086cc:	9301      	str	r3, [sp, #4]
 80086ce:	a902      	add	r1, sp, #8
 80086d0:	f002 ff7e 	bl	800b5d0 <_svfiprintf_r>
 80086d4:	9b02      	ldr	r3, [sp, #8]
 80086d6:	2200      	movs	r2, #0
 80086d8:	701a      	strb	r2, [r3, #0]
 80086da:	b01c      	add	sp, #112	; 0x70
 80086dc:	f85d eb04 	ldr.w	lr, [sp], #4
 80086e0:	b003      	add	sp, #12
 80086e2:	4770      	bx	lr
 80086e4:	2000001c 	.word	0x2000001c
 80086e8:	ffff0208 	.word	0xffff0208

080086ec <sulp>:
 80086ec:	b570      	push	{r4, r5, r6, lr}
 80086ee:	4604      	mov	r4, r0
 80086f0:	460d      	mov	r5, r1
 80086f2:	ec45 4b10 	vmov	d0, r4, r5
 80086f6:	4616      	mov	r6, r2
 80086f8:	f002 fcc8 	bl	800b08c <__ulp>
 80086fc:	ec51 0b10 	vmov	r0, r1, d0
 8008700:	b17e      	cbz	r6, 8008722 <sulp+0x36>
 8008702:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008706:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800870a:	2b00      	cmp	r3, #0
 800870c:	dd09      	ble.n	8008722 <sulp+0x36>
 800870e:	051b      	lsls	r3, r3, #20
 8008710:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 8008714:	2400      	movs	r4, #0
 8008716:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800871a:	4622      	mov	r2, r4
 800871c:	462b      	mov	r3, r5
 800871e:	f7f7 ff6b 	bl	80005f8 <__aeabi_dmul>
 8008722:	bd70      	pop	{r4, r5, r6, pc}
 8008724:	0000      	movs	r0, r0
	...

08008728 <_strtod_l>:
 8008728:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800872c:	ed2d 8b02 	vpush	{d8}
 8008730:	b09d      	sub	sp, #116	; 0x74
 8008732:	461f      	mov	r7, r3
 8008734:	2300      	movs	r3, #0
 8008736:	9318      	str	r3, [sp, #96]	; 0x60
 8008738:	4ba2      	ldr	r3, [pc, #648]	; (80089c4 <_strtod_l+0x29c>)
 800873a:	9213      	str	r2, [sp, #76]	; 0x4c
 800873c:	681b      	ldr	r3, [r3, #0]
 800873e:	9305      	str	r3, [sp, #20]
 8008740:	4604      	mov	r4, r0
 8008742:	4618      	mov	r0, r3
 8008744:	4688      	mov	r8, r1
 8008746:	f7f7 fd43 	bl	80001d0 <strlen>
 800874a:	f04f 0a00 	mov.w	sl, #0
 800874e:	4605      	mov	r5, r0
 8008750:	f04f 0b00 	mov.w	fp, #0
 8008754:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 8008758:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800875a:	781a      	ldrb	r2, [r3, #0]
 800875c:	2a2b      	cmp	r2, #43	; 0x2b
 800875e:	d04e      	beq.n	80087fe <_strtod_l+0xd6>
 8008760:	d83b      	bhi.n	80087da <_strtod_l+0xb2>
 8008762:	2a0d      	cmp	r2, #13
 8008764:	d834      	bhi.n	80087d0 <_strtod_l+0xa8>
 8008766:	2a08      	cmp	r2, #8
 8008768:	d834      	bhi.n	80087d4 <_strtod_l+0xac>
 800876a:	2a00      	cmp	r2, #0
 800876c:	d03e      	beq.n	80087ec <_strtod_l+0xc4>
 800876e:	2300      	movs	r3, #0
 8008770:	930a      	str	r3, [sp, #40]	; 0x28
 8008772:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 8008774:	7833      	ldrb	r3, [r6, #0]
 8008776:	2b30      	cmp	r3, #48	; 0x30
 8008778:	f040 80b0 	bne.w	80088dc <_strtod_l+0x1b4>
 800877c:	7873      	ldrb	r3, [r6, #1]
 800877e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 8008782:	2b58      	cmp	r3, #88	; 0x58
 8008784:	d168      	bne.n	8008858 <_strtod_l+0x130>
 8008786:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8008788:	9301      	str	r3, [sp, #4]
 800878a:	ab18      	add	r3, sp, #96	; 0x60
 800878c:	9702      	str	r7, [sp, #8]
 800878e:	9300      	str	r3, [sp, #0]
 8008790:	4a8d      	ldr	r2, [pc, #564]	; (80089c8 <_strtod_l+0x2a0>)
 8008792:	ab19      	add	r3, sp, #100	; 0x64
 8008794:	a917      	add	r1, sp, #92	; 0x5c
 8008796:	4620      	mov	r0, r4
 8008798:	f001 fdd2 	bl	800a340 <__gethex>
 800879c:	f010 0707 	ands.w	r7, r0, #7
 80087a0:	4605      	mov	r5, r0
 80087a2:	d005      	beq.n	80087b0 <_strtod_l+0x88>
 80087a4:	2f06      	cmp	r7, #6
 80087a6:	d12c      	bne.n	8008802 <_strtod_l+0xda>
 80087a8:	3601      	adds	r6, #1
 80087aa:	2300      	movs	r3, #0
 80087ac:	9617      	str	r6, [sp, #92]	; 0x5c
 80087ae:	930a      	str	r3, [sp, #40]	; 0x28
 80087b0:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087b2:	2b00      	cmp	r3, #0
 80087b4:	f040 8590 	bne.w	80092d8 <_strtod_l+0xbb0>
 80087b8:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80087ba:	b1eb      	cbz	r3, 80087f8 <_strtod_l+0xd0>
 80087bc:	4652      	mov	r2, sl
 80087be:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 80087c2:	ec43 2b10 	vmov	d0, r2, r3
 80087c6:	b01d      	add	sp, #116	; 0x74
 80087c8:	ecbd 8b02 	vpop	{d8}
 80087cc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80087d0:	2a20      	cmp	r2, #32
 80087d2:	d1cc      	bne.n	800876e <_strtod_l+0x46>
 80087d4:	3301      	adds	r3, #1
 80087d6:	9317      	str	r3, [sp, #92]	; 0x5c
 80087d8:	e7be      	b.n	8008758 <_strtod_l+0x30>
 80087da:	2a2d      	cmp	r2, #45	; 0x2d
 80087dc:	d1c7      	bne.n	800876e <_strtod_l+0x46>
 80087de:	2201      	movs	r2, #1
 80087e0:	920a      	str	r2, [sp, #40]	; 0x28
 80087e2:	1c5a      	adds	r2, r3, #1
 80087e4:	9217      	str	r2, [sp, #92]	; 0x5c
 80087e6:	785b      	ldrb	r3, [r3, #1]
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	d1c2      	bne.n	8008772 <_strtod_l+0x4a>
 80087ec:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 80087ee:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80087f2:	2b00      	cmp	r3, #0
 80087f4:	f040 856e 	bne.w	80092d4 <_strtod_l+0xbac>
 80087f8:	4652      	mov	r2, sl
 80087fa:	465b      	mov	r3, fp
 80087fc:	e7e1      	b.n	80087c2 <_strtod_l+0x9a>
 80087fe:	2200      	movs	r2, #0
 8008800:	e7ee      	b.n	80087e0 <_strtod_l+0xb8>
 8008802:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008804:	b13a      	cbz	r2, 8008816 <_strtod_l+0xee>
 8008806:	2135      	movs	r1, #53	; 0x35
 8008808:	a81a      	add	r0, sp, #104	; 0x68
 800880a:	f002 fd4a 	bl	800b2a2 <__copybits>
 800880e:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008810:	4620      	mov	r0, r4
 8008812:	f002 f909 	bl	800aa28 <_Bfree>
 8008816:	3f01      	subs	r7, #1
 8008818:	2f04      	cmp	r7, #4
 800881a:	d806      	bhi.n	800882a <_strtod_l+0x102>
 800881c:	e8df f007 	tbb	[pc, r7]
 8008820:	1714030a 	.word	0x1714030a
 8008824:	0a          	.byte	0x0a
 8008825:	00          	.byte	0x00
 8008826:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800882a:	0728      	lsls	r0, r5, #28
 800882c:	d5c0      	bpl.n	80087b0 <_strtod_l+0x88>
 800882e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 8008832:	e7bd      	b.n	80087b0 <_strtod_l+0x88>
 8008834:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 8008838:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800883a:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800883e:	f202 4233 	addw	r2, r2, #1075	; 0x433
 8008842:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8008846:	e7f0      	b.n	800882a <_strtod_l+0x102>
 8008848:	f8df b180 	ldr.w	fp, [pc, #384]	; 80089cc <_strtod_l+0x2a4>
 800884c:	e7ed      	b.n	800882a <_strtod_l+0x102>
 800884e:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 8008852:	f04f 3aff 	mov.w	sl, #4294967295
 8008856:	e7e8      	b.n	800882a <_strtod_l+0x102>
 8008858:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800885a:	1c5a      	adds	r2, r3, #1
 800885c:	9217      	str	r2, [sp, #92]	; 0x5c
 800885e:	785b      	ldrb	r3, [r3, #1]
 8008860:	2b30      	cmp	r3, #48	; 0x30
 8008862:	d0f9      	beq.n	8008858 <_strtod_l+0x130>
 8008864:	2b00      	cmp	r3, #0
 8008866:	d0a3      	beq.n	80087b0 <_strtod_l+0x88>
 8008868:	2301      	movs	r3, #1
 800886a:	f04f 0900 	mov.w	r9, #0
 800886e:	9304      	str	r3, [sp, #16]
 8008870:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008872:	9308      	str	r3, [sp, #32]
 8008874:	f8cd 901c 	str.w	r9, [sp, #28]
 8008878:	464f      	mov	r7, r9
 800887a:	220a      	movs	r2, #10
 800887c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800887e:	7806      	ldrb	r6, [r0, #0]
 8008880:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 8008884:	b2d9      	uxtb	r1, r3
 8008886:	2909      	cmp	r1, #9
 8008888:	d92a      	bls.n	80088e0 <_strtod_l+0x1b8>
 800888a:	9905      	ldr	r1, [sp, #20]
 800888c:	462a      	mov	r2, r5
 800888e:	f003 f913 	bl	800bab8 <strncmp>
 8008892:	b398      	cbz	r0, 80088fc <_strtod_l+0x1d4>
 8008894:	2000      	movs	r0, #0
 8008896:	4632      	mov	r2, r6
 8008898:	463d      	mov	r5, r7
 800889a:	9005      	str	r0, [sp, #20]
 800889c:	4603      	mov	r3, r0
 800889e:	2a65      	cmp	r2, #101	; 0x65
 80088a0:	d001      	beq.n	80088a6 <_strtod_l+0x17e>
 80088a2:	2a45      	cmp	r2, #69	; 0x45
 80088a4:	d118      	bne.n	80088d8 <_strtod_l+0x1b0>
 80088a6:	b91d      	cbnz	r5, 80088b0 <_strtod_l+0x188>
 80088a8:	9a04      	ldr	r2, [sp, #16]
 80088aa:	4302      	orrs	r2, r0
 80088ac:	d09e      	beq.n	80087ec <_strtod_l+0xc4>
 80088ae:	2500      	movs	r5, #0
 80088b0:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 80088b4:	f108 0201 	add.w	r2, r8, #1
 80088b8:	9217      	str	r2, [sp, #92]	; 0x5c
 80088ba:	f898 2001 	ldrb.w	r2, [r8, #1]
 80088be:	2a2b      	cmp	r2, #43	; 0x2b
 80088c0:	d075      	beq.n	80089ae <_strtod_l+0x286>
 80088c2:	2a2d      	cmp	r2, #45	; 0x2d
 80088c4:	d07b      	beq.n	80089be <_strtod_l+0x296>
 80088c6:	f04f 0c00 	mov.w	ip, #0
 80088ca:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 80088ce:	2909      	cmp	r1, #9
 80088d0:	f240 8082 	bls.w	80089d8 <_strtod_l+0x2b0>
 80088d4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 80088d8:	2600      	movs	r6, #0
 80088da:	e09d      	b.n	8008a18 <_strtod_l+0x2f0>
 80088dc:	2300      	movs	r3, #0
 80088de:	e7c4      	b.n	800886a <_strtod_l+0x142>
 80088e0:	2f08      	cmp	r7, #8
 80088e2:	bfd8      	it	le
 80088e4:	9907      	ldrle	r1, [sp, #28]
 80088e6:	f100 0001 	add.w	r0, r0, #1
 80088ea:	bfda      	itte	le
 80088ec:	fb02 3301 	mlale	r3, r2, r1, r3
 80088f0:	9307      	strle	r3, [sp, #28]
 80088f2:	fb02 3909 	mlagt	r9, r2, r9, r3
 80088f6:	3701      	adds	r7, #1
 80088f8:	9017      	str	r0, [sp, #92]	; 0x5c
 80088fa:	e7bf      	b.n	800887c <_strtod_l+0x154>
 80088fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80088fe:	195a      	adds	r2, r3, r5
 8008900:	9217      	str	r2, [sp, #92]	; 0x5c
 8008902:	5d5a      	ldrb	r2, [r3, r5]
 8008904:	2f00      	cmp	r7, #0
 8008906:	d037      	beq.n	8008978 <_strtod_l+0x250>
 8008908:	9005      	str	r0, [sp, #20]
 800890a:	463d      	mov	r5, r7
 800890c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 8008910:	2b09      	cmp	r3, #9
 8008912:	d912      	bls.n	800893a <_strtod_l+0x212>
 8008914:	2301      	movs	r3, #1
 8008916:	e7c2      	b.n	800889e <_strtod_l+0x176>
 8008918:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800891a:	1c5a      	adds	r2, r3, #1
 800891c:	9217      	str	r2, [sp, #92]	; 0x5c
 800891e:	785a      	ldrb	r2, [r3, #1]
 8008920:	3001      	adds	r0, #1
 8008922:	2a30      	cmp	r2, #48	; 0x30
 8008924:	d0f8      	beq.n	8008918 <_strtod_l+0x1f0>
 8008926:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800892a:	2b08      	cmp	r3, #8
 800892c:	f200 84d9 	bhi.w	80092e2 <_strtod_l+0xbba>
 8008930:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008932:	9005      	str	r0, [sp, #20]
 8008934:	2000      	movs	r0, #0
 8008936:	9308      	str	r3, [sp, #32]
 8008938:	4605      	mov	r5, r0
 800893a:	3a30      	subs	r2, #48	; 0x30
 800893c:	f100 0301 	add.w	r3, r0, #1
 8008940:	d014      	beq.n	800896c <_strtod_l+0x244>
 8008942:	9905      	ldr	r1, [sp, #20]
 8008944:	4419      	add	r1, r3
 8008946:	9105      	str	r1, [sp, #20]
 8008948:	462b      	mov	r3, r5
 800894a:	eb00 0e05 	add.w	lr, r0, r5
 800894e:	210a      	movs	r1, #10
 8008950:	4573      	cmp	r3, lr
 8008952:	d113      	bne.n	800897c <_strtod_l+0x254>
 8008954:	182b      	adds	r3, r5, r0
 8008956:	2b08      	cmp	r3, #8
 8008958:	f105 0501 	add.w	r5, r5, #1
 800895c:	4405      	add	r5, r0
 800895e:	dc1c      	bgt.n	800899a <_strtod_l+0x272>
 8008960:	9907      	ldr	r1, [sp, #28]
 8008962:	230a      	movs	r3, #10
 8008964:	fb03 2301 	mla	r3, r3, r1, r2
 8008968:	9307      	str	r3, [sp, #28]
 800896a:	2300      	movs	r3, #0
 800896c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800896e:	1c51      	adds	r1, r2, #1
 8008970:	9117      	str	r1, [sp, #92]	; 0x5c
 8008972:	7852      	ldrb	r2, [r2, #1]
 8008974:	4618      	mov	r0, r3
 8008976:	e7c9      	b.n	800890c <_strtod_l+0x1e4>
 8008978:	4638      	mov	r0, r7
 800897a:	e7d2      	b.n	8008922 <_strtod_l+0x1fa>
 800897c:	2b08      	cmp	r3, #8
 800897e:	dc04      	bgt.n	800898a <_strtod_l+0x262>
 8008980:	9e07      	ldr	r6, [sp, #28]
 8008982:	434e      	muls	r6, r1
 8008984:	9607      	str	r6, [sp, #28]
 8008986:	3301      	adds	r3, #1
 8008988:	e7e2      	b.n	8008950 <_strtod_l+0x228>
 800898a:	f103 0c01 	add.w	ip, r3, #1
 800898e:	f1bc 0f10 	cmp.w	ip, #16
 8008992:	bfd8      	it	le
 8008994:	fb01 f909 	mulle.w	r9, r1, r9
 8008998:	e7f5      	b.n	8008986 <_strtod_l+0x25e>
 800899a:	2d10      	cmp	r5, #16
 800899c:	bfdc      	itt	le
 800899e:	230a      	movle	r3, #10
 80089a0:	fb03 2909 	mlale	r9, r3, r9, r2
 80089a4:	e7e1      	b.n	800896a <_strtod_l+0x242>
 80089a6:	2300      	movs	r3, #0
 80089a8:	9305      	str	r3, [sp, #20]
 80089aa:	2301      	movs	r3, #1
 80089ac:	e77c      	b.n	80088a8 <_strtod_l+0x180>
 80089ae:	f04f 0c00 	mov.w	ip, #0
 80089b2:	f108 0202 	add.w	r2, r8, #2
 80089b6:	9217      	str	r2, [sp, #92]	; 0x5c
 80089b8:	f898 2002 	ldrb.w	r2, [r8, #2]
 80089bc:	e785      	b.n	80088ca <_strtod_l+0x1a2>
 80089be:	f04f 0c01 	mov.w	ip, #1
 80089c2:	e7f6      	b.n	80089b2 <_strtod_l+0x28a>
 80089c4:	0800c7a0 	.word	0x0800c7a0
 80089c8:	0800c4bc 	.word	0x0800c4bc
 80089cc:	7ff00000 	.word	0x7ff00000
 80089d0:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089d2:	1c51      	adds	r1, r2, #1
 80089d4:	9117      	str	r1, [sp, #92]	; 0x5c
 80089d6:	7852      	ldrb	r2, [r2, #1]
 80089d8:	2a30      	cmp	r2, #48	; 0x30
 80089da:	d0f9      	beq.n	80089d0 <_strtod_l+0x2a8>
 80089dc:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 80089e0:	2908      	cmp	r1, #8
 80089e2:	f63f af79 	bhi.w	80088d8 <_strtod_l+0x1b0>
 80089e6:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 80089ea:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089ec:	9206      	str	r2, [sp, #24]
 80089ee:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 80089f0:	1c51      	adds	r1, r2, #1
 80089f2:	9117      	str	r1, [sp, #92]	; 0x5c
 80089f4:	7852      	ldrb	r2, [r2, #1]
 80089f6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 80089fa:	2e09      	cmp	r6, #9
 80089fc:	d937      	bls.n	8008a6e <_strtod_l+0x346>
 80089fe:	9e06      	ldr	r6, [sp, #24]
 8008a00:	1b89      	subs	r1, r1, r6
 8008a02:	2908      	cmp	r1, #8
 8008a04:	f644 661f 	movw	r6, #19999	; 0x4e1f
 8008a08:	dc02      	bgt.n	8008a10 <_strtod_l+0x2e8>
 8008a0a:	4576      	cmp	r6, lr
 8008a0c:	bfa8      	it	ge
 8008a0e:	4676      	movge	r6, lr
 8008a10:	f1bc 0f00 	cmp.w	ip, #0
 8008a14:	d000      	beq.n	8008a18 <_strtod_l+0x2f0>
 8008a16:	4276      	negs	r6, r6
 8008a18:	2d00      	cmp	r5, #0
 8008a1a:	d14d      	bne.n	8008ab8 <_strtod_l+0x390>
 8008a1c:	9904      	ldr	r1, [sp, #16]
 8008a1e:	4301      	orrs	r1, r0
 8008a20:	f47f aec6 	bne.w	80087b0 <_strtod_l+0x88>
 8008a24:	2b00      	cmp	r3, #0
 8008a26:	f47f aee1 	bne.w	80087ec <_strtod_l+0xc4>
 8008a2a:	2a69      	cmp	r2, #105	; 0x69
 8008a2c:	d027      	beq.n	8008a7e <_strtod_l+0x356>
 8008a2e:	dc24      	bgt.n	8008a7a <_strtod_l+0x352>
 8008a30:	2a49      	cmp	r2, #73	; 0x49
 8008a32:	d024      	beq.n	8008a7e <_strtod_l+0x356>
 8008a34:	2a4e      	cmp	r2, #78	; 0x4e
 8008a36:	f47f aed9 	bne.w	80087ec <_strtod_l+0xc4>
 8008a3a:	499f      	ldr	r1, [pc, #636]	; (8008cb8 <_strtod_l+0x590>)
 8008a3c:	a817      	add	r0, sp, #92	; 0x5c
 8008a3e:	f001 fed7 	bl	800a7f0 <__match>
 8008a42:	2800      	cmp	r0, #0
 8008a44:	f43f aed2 	beq.w	80087ec <_strtod_l+0xc4>
 8008a48:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a4a:	781b      	ldrb	r3, [r3, #0]
 8008a4c:	2b28      	cmp	r3, #40	; 0x28
 8008a4e:	d12d      	bne.n	8008aac <_strtod_l+0x384>
 8008a50:	499a      	ldr	r1, [pc, #616]	; (8008cbc <_strtod_l+0x594>)
 8008a52:	aa1a      	add	r2, sp, #104	; 0x68
 8008a54:	a817      	add	r0, sp, #92	; 0x5c
 8008a56:	f001 fedf 	bl	800a818 <__hexnan>
 8008a5a:	2805      	cmp	r0, #5
 8008a5c:	d126      	bne.n	8008aac <_strtod_l+0x384>
 8008a5e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 8008a60:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 8008a64:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 8008a68:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 8008a6c:	e6a0      	b.n	80087b0 <_strtod_l+0x88>
 8008a6e:	210a      	movs	r1, #10
 8008a70:	fb01 2e0e 	mla	lr, r1, lr, r2
 8008a74:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 8008a78:	e7b9      	b.n	80089ee <_strtod_l+0x2c6>
 8008a7a:	2a6e      	cmp	r2, #110	; 0x6e
 8008a7c:	e7db      	b.n	8008a36 <_strtod_l+0x30e>
 8008a7e:	4990      	ldr	r1, [pc, #576]	; (8008cc0 <_strtod_l+0x598>)
 8008a80:	a817      	add	r0, sp, #92	; 0x5c
 8008a82:	f001 feb5 	bl	800a7f0 <__match>
 8008a86:	2800      	cmp	r0, #0
 8008a88:	f43f aeb0 	beq.w	80087ec <_strtod_l+0xc4>
 8008a8c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a8e:	498d      	ldr	r1, [pc, #564]	; (8008cc4 <_strtod_l+0x59c>)
 8008a90:	3b01      	subs	r3, #1
 8008a92:	a817      	add	r0, sp, #92	; 0x5c
 8008a94:	9317      	str	r3, [sp, #92]	; 0x5c
 8008a96:	f001 feab 	bl	800a7f0 <__match>
 8008a9a:	b910      	cbnz	r0, 8008aa2 <_strtod_l+0x37a>
 8008a9c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 8008a9e:	3301      	adds	r3, #1
 8008aa0:	9317      	str	r3, [sp, #92]	; 0x5c
 8008aa2:	f8df b230 	ldr.w	fp, [pc, #560]	; 8008cd4 <_strtod_l+0x5ac>
 8008aa6:	f04f 0a00 	mov.w	sl, #0
 8008aaa:	e681      	b.n	80087b0 <_strtod_l+0x88>
 8008aac:	4886      	ldr	r0, [pc, #536]	; (8008cc8 <_strtod_l+0x5a0>)
 8008aae:	f002 ffeb 	bl	800ba88 <nan>
 8008ab2:	ec5b ab10 	vmov	sl, fp, d0
 8008ab6:	e67b      	b.n	80087b0 <_strtod_l+0x88>
 8008ab8:	9b05      	ldr	r3, [sp, #20]
 8008aba:	9807      	ldr	r0, [sp, #28]
 8008abc:	1af3      	subs	r3, r6, r3
 8008abe:	2f00      	cmp	r7, #0
 8008ac0:	bf08      	it	eq
 8008ac2:	462f      	moveq	r7, r5
 8008ac4:	2d10      	cmp	r5, #16
 8008ac6:	9306      	str	r3, [sp, #24]
 8008ac8:	46a8      	mov	r8, r5
 8008aca:	bfa8      	it	ge
 8008acc:	f04f 0810 	movge.w	r8, #16
 8008ad0:	f7f7 fd18 	bl	8000504 <__aeabi_ui2d>
 8008ad4:	2d09      	cmp	r5, #9
 8008ad6:	4682      	mov	sl, r0
 8008ad8:	468b      	mov	fp, r1
 8008ada:	dd13      	ble.n	8008b04 <_strtod_l+0x3dc>
 8008adc:	4b7b      	ldr	r3, [pc, #492]	; (8008ccc <_strtod_l+0x5a4>)
 8008ade:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 8008ae2:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 8008ae6:	f7f7 fd87 	bl	80005f8 <__aeabi_dmul>
 8008aea:	4682      	mov	sl, r0
 8008aec:	4648      	mov	r0, r9
 8008aee:	468b      	mov	fp, r1
 8008af0:	f7f7 fd08 	bl	8000504 <__aeabi_ui2d>
 8008af4:	4602      	mov	r2, r0
 8008af6:	460b      	mov	r3, r1
 8008af8:	4650      	mov	r0, sl
 8008afa:	4659      	mov	r1, fp
 8008afc:	f7f7 fbc6 	bl	800028c <__adddf3>
 8008b00:	4682      	mov	sl, r0
 8008b02:	468b      	mov	fp, r1
 8008b04:	2d0f      	cmp	r5, #15
 8008b06:	dc38      	bgt.n	8008b7a <_strtod_l+0x452>
 8008b08:	9b06      	ldr	r3, [sp, #24]
 8008b0a:	2b00      	cmp	r3, #0
 8008b0c:	f43f ae50 	beq.w	80087b0 <_strtod_l+0x88>
 8008b10:	dd24      	ble.n	8008b5c <_strtod_l+0x434>
 8008b12:	2b16      	cmp	r3, #22
 8008b14:	dc0b      	bgt.n	8008b2e <_strtod_l+0x406>
 8008b16:	496d      	ldr	r1, [pc, #436]	; (8008ccc <_strtod_l+0x5a4>)
 8008b18:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b1c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b20:	4652      	mov	r2, sl
 8008b22:	465b      	mov	r3, fp
 8008b24:	f7f7 fd68 	bl	80005f8 <__aeabi_dmul>
 8008b28:	4682      	mov	sl, r0
 8008b2a:	468b      	mov	fp, r1
 8008b2c:	e640      	b.n	80087b0 <_strtod_l+0x88>
 8008b2e:	9a06      	ldr	r2, [sp, #24]
 8008b30:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 8008b34:	4293      	cmp	r3, r2
 8008b36:	db20      	blt.n	8008b7a <_strtod_l+0x452>
 8008b38:	4c64      	ldr	r4, [pc, #400]	; (8008ccc <_strtod_l+0x5a4>)
 8008b3a:	f1c5 050f 	rsb	r5, r5, #15
 8008b3e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8008b42:	4652      	mov	r2, sl
 8008b44:	465b      	mov	r3, fp
 8008b46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b4a:	f7f7 fd55 	bl	80005f8 <__aeabi_dmul>
 8008b4e:	9b06      	ldr	r3, [sp, #24]
 8008b50:	1b5d      	subs	r5, r3, r5
 8008b52:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8008b56:	e9d4 2300 	ldrd	r2, r3, [r4]
 8008b5a:	e7e3      	b.n	8008b24 <_strtod_l+0x3fc>
 8008b5c:	9b06      	ldr	r3, [sp, #24]
 8008b5e:	3316      	adds	r3, #22
 8008b60:	db0b      	blt.n	8008b7a <_strtod_l+0x452>
 8008b62:	9b05      	ldr	r3, [sp, #20]
 8008b64:	1b9e      	subs	r6, r3, r6
 8008b66:	4b59      	ldr	r3, [pc, #356]	; (8008ccc <_strtod_l+0x5a4>)
 8008b68:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 8008b6c:	e9d6 2300 	ldrd	r2, r3, [r6]
 8008b70:	4650      	mov	r0, sl
 8008b72:	4659      	mov	r1, fp
 8008b74:	f7f7 fe6a 	bl	800084c <__aeabi_ddiv>
 8008b78:	e7d6      	b.n	8008b28 <_strtod_l+0x400>
 8008b7a:	9b06      	ldr	r3, [sp, #24]
 8008b7c:	eba5 0808 	sub.w	r8, r5, r8
 8008b80:	4498      	add	r8, r3
 8008b82:	f1b8 0f00 	cmp.w	r8, #0
 8008b86:	dd74      	ble.n	8008c72 <_strtod_l+0x54a>
 8008b88:	f018 030f 	ands.w	r3, r8, #15
 8008b8c:	d00a      	beq.n	8008ba4 <_strtod_l+0x47c>
 8008b8e:	494f      	ldr	r1, [pc, #316]	; (8008ccc <_strtod_l+0x5a4>)
 8008b90:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8008b94:	4652      	mov	r2, sl
 8008b96:	465b      	mov	r3, fp
 8008b98:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008b9c:	f7f7 fd2c 	bl	80005f8 <__aeabi_dmul>
 8008ba0:	4682      	mov	sl, r0
 8008ba2:	468b      	mov	fp, r1
 8008ba4:	f038 080f 	bics.w	r8, r8, #15
 8008ba8:	d04f      	beq.n	8008c4a <_strtod_l+0x522>
 8008baa:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 8008bae:	dd22      	ble.n	8008bf6 <_strtod_l+0x4ce>
 8008bb0:	2500      	movs	r5, #0
 8008bb2:	462e      	mov	r6, r5
 8008bb4:	9507      	str	r5, [sp, #28]
 8008bb6:	9505      	str	r5, [sp, #20]
 8008bb8:	2322      	movs	r3, #34	; 0x22
 8008bba:	f8df b118 	ldr.w	fp, [pc, #280]	; 8008cd4 <_strtod_l+0x5ac>
 8008bbe:	6023      	str	r3, [r4, #0]
 8008bc0:	f04f 0a00 	mov.w	sl, #0
 8008bc4:	9b07      	ldr	r3, [sp, #28]
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	f43f adf2 	beq.w	80087b0 <_strtod_l+0x88>
 8008bcc:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008bce:	4620      	mov	r0, r4
 8008bd0:	f001 ff2a 	bl	800aa28 <_Bfree>
 8008bd4:	9905      	ldr	r1, [sp, #20]
 8008bd6:	4620      	mov	r0, r4
 8008bd8:	f001 ff26 	bl	800aa28 <_Bfree>
 8008bdc:	4631      	mov	r1, r6
 8008bde:	4620      	mov	r0, r4
 8008be0:	f001 ff22 	bl	800aa28 <_Bfree>
 8008be4:	9907      	ldr	r1, [sp, #28]
 8008be6:	4620      	mov	r0, r4
 8008be8:	f001 ff1e 	bl	800aa28 <_Bfree>
 8008bec:	4629      	mov	r1, r5
 8008bee:	4620      	mov	r0, r4
 8008bf0:	f001 ff1a 	bl	800aa28 <_Bfree>
 8008bf4:	e5dc      	b.n	80087b0 <_strtod_l+0x88>
 8008bf6:	4b36      	ldr	r3, [pc, #216]	; (8008cd0 <_strtod_l+0x5a8>)
 8008bf8:	9304      	str	r3, [sp, #16]
 8008bfa:	2300      	movs	r3, #0
 8008bfc:	ea4f 1828 	mov.w	r8, r8, asr #4
 8008c00:	4650      	mov	r0, sl
 8008c02:	4659      	mov	r1, fp
 8008c04:	4699      	mov	r9, r3
 8008c06:	f1b8 0f01 	cmp.w	r8, #1
 8008c0a:	dc21      	bgt.n	8008c50 <_strtod_l+0x528>
 8008c0c:	b10b      	cbz	r3, 8008c12 <_strtod_l+0x4ea>
 8008c0e:	4682      	mov	sl, r0
 8008c10:	468b      	mov	fp, r1
 8008c12:	4b2f      	ldr	r3, [pc, #188]	; (8008cd0 <_strtod_l+0x5a8>)
 8008c14:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 8008c18:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 8008c1c:	4652      	mov	r2, sl
 8008c1e:	465b      	mov	r3, fp
 8008c20:	e9d9 0100 	ldrd	r0, r1, [r9]
 8008c24:	f7f7 fce8 	bl	80005f8 <__aeabi_dmul>
 8008c28:	4b2a      	ldr	r3, [pc, #168]	; (8008cd4 <_strtod_l+0x5ac>)
 8008c2a:	460a      	mov	r2, r1
 8008c2c:	400b      	ands	r3, r1
 8008c2e:	492a      	ldr	r1, [pc, #168]	; (8008cd8 <_strtod_l+0x5b0>)
 8008c30:	428b      	cmp	r3, r1
 8008c32:	4682      	mov	sl, r0
 8008c34:	d8bc      	bhi.n	8008bb0 <_strtod_l+0x488>
 8008c36:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 8008c3a:	428b      	cmp	r3, r1
 8008c3c:	bf86      	itte	hi
 8008c3e:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 8008cdc <_strtod_l+0x5b4>
 8008c42:	f04f 3aff 	movhi.w	sl, #4294967295
 8008c46:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 8008c4a:	2300      	movs	r3, #0
 8008c4c:	9304      	str	r3, [sp, #16]
 8008c4e:	e084      	b.n	8008d5a <_strtod_l+0x632>
 8008c50:	f018 0f01 	tst.w	r8, #1
 8008c54:	d005      	beq.n	8008c62 <_strtod_l+0x53a>
 8008c56:	9b04      	ldr	r3, [sp, #16]
 8008c58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c5c:	f7f7 fccc 	bl	80005f8 <__aeabi_dmul>
 8008c60:	2301      	movs	r3, #1
 8008c62:	9a04      	ldr	r2, [sp, #16]
 8008c64:	3208      	adds	r2, #8
 8008c66:	f109 0901 	add.w	r9, r9, #1
 8008c6a:	ea4f 0868 	mov.w	r8, r8, asr #1
 8008c6e:	9204      	str	r2, [sp, #16]
 8008c70:	e7c9      	b.n	8008c06 <_strtod_l+0x4de>
 8008c72:	d0ea      	beq.n	8008c4a <_strtod_l+0x522>
 8008c74:	f1c8 0800 	rsb	r8, r8, #0
 8008c78:	f018 020f 	ands.w	r2, r8, #15
 8008c7c:	d00a      	beq.n	8008c94 <_strtod_l+0x56c>
 8008c7e:	4b13      	ldr	r3, [pc, #76]	; (8008ccc <_strtod_l+0x5a4>)
 8008c80:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8008c84:	4650      	mov	r0, sl
 8008c86:	4659      	mov	r1, fp
 8008c88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c8c:	f7f7 fdde 	bl	800084c <__aeabi_ddiv>
 8008c90:	4682      	mov	sl, r0
 8008c92:	468b      	mov	fp, r1
 8008c94:	ea5f 1828 	movs.w	r8, r8, asr #4
 8008c98:	d0d7      	beq.n	8008c4a <_strtod_l+0x522>
 8008c9a:	f1b8 0f1f 	cmp.w	r8, #31
 8008c9e:	dd1f      	ble.n	8008ce0 <_strtod_l+0x5b8>
 8008ca0:	2500      	movs	r5, #0
 8008ca2:	462e      	mov	r6, r5
 8008ca4:	9507      	str	r5, [sp, #28]
 8008ca6:	9505      	str	r5, [sp, #20]
 8008ca8:	2322      	movs	r3, #34	; 0x22
 8008caa:	f04f 0a00 	mov.w	sl, #0
 8008cae:	f04f 0b00 	mov.w	fp, #0
 8008cb2:	6023      	str	r3, [r4, #0]
 8008cb4:	e786      	b.n	8008bc4 <_strtod_l+0x49c>
 8008cb6:	bf00      	nop
 8008cb8:	0800c48d 	.word	0x0800c48d
 8008cbc:	0800c4d0 	.word	0x0800c4d0
 8008cc0:	0800c485 	.word	0x0800c485
 8008cc4:	0800c6c4 	.word	0x0800c6c4
 8008cc8:	0800c5bf 	.word	0x0800c5bf
 8008ccc:	0800c838 	.word	0x0800c838
 8008cd0:	0800c810 	.word	0x0800c810
 8008cd4:	7ff00000 	.word	0x7ff00000
 8008cd8:	7ca00000 	.word	0x7ca00000
 8008cdc:	7fefffff 	.word	0x7fefffff
 8008ce0:	f018 0310 	ands.w	r3, r8, #16
 8008ce4:	bf18      	it	ne
 8008ce6:	236a      	movne	r3, #106	; 0x6a
 8008ce8:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 8009098 <_strtod_l+0x970>
 8008cec:	9304      	str	r3, [sp, #16]
 8008cee:	4650      	mov	r0, sl
 8008cf0:	4659      	mov	r1, fp
 8008cf2:	2300      	movs	r3, #0
 8008cf4:	f018 0f01 	tst.w	r8, #1
 8008cf8:	d004      	beq.n	8008d04 <_strtod_l+0x5dc>
 8008cfa:	e9d9 2300 	ldrd	r2, r3, [r9]
 8008cfe:	f7f7 fc7b 	bl	80005f8 <__aeabi_dmul>
 8008d02:	2301      	movs	r3, #1
 8008d04:	ea5f 0868 	movs.w	r8, r8, asr #1
 8008d08:	f109 0908 	add.w	r9, r9, #8
 8008d0c:	d1f2      	bne.n	8008cf4 <_strtod_l+0x5cc>
 8008d0e:	b10b      	cbz	r3, 8008d14 <_strtod_l+0x5ec>
 8008d10:	4682      	mov	sl, r0
 8008d12:	468b      	mov	fp, r1
 8008d14:	9b04      	ldr	r3, [sp, #16]
 8008d16:	b1c3      	cbz	r3, 8008d4a <_strtod_l+0x622>
 8008d18:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8008d1c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 8008d20:	2b00      	cmp	r3, #0
 8008d22:	4659      	mov	r1, fp
 8008d24:	dd11      	ble.n	8008d4a <_strtod_l+0x622>
 8008d26:	2b1f      	cmp	r3, #31
 8008d28:	f340 8124 	ble.w	8008f74 <_strtod_l+0x84c>
 8008d2c:	2b34      	cmp	r3, #52	; 0x34
 8008d2e:	bfde      	ittt	le
 8008d30:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 8008d34:	f04f 33ff 	movle.w	r3, #4294967295
 8008d38:	fa03 f202 	lslle.w	r2, r3, r2
 8008d3c:	f04f 0a00 	mov.w	sl, #0
 8008d40:	bfcc      	ite	gt
 8008d42:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 8008d46:	ea02 0b01 	andle.w	fp, r2, r1
 8008d4a:	2200      	movs	r2, #0
 8008d4c:	2300      	movs	r3, #0
 8008d4e:	4650      	mov	r0, sl
 8008d50:	4659      	mov	r1, fp
 8008d52:	f7f7 feb9 	bl	8000ac8 <__aeabi_dcmpeq>
 8008d56:	2800      	cmp	r0, #0
 8008d58:	d1a2      	bne.n	8008ca0 <_strtod_l+0x578>
 8008d5a:	9b07      	ldr	r3, [sp, #28]
 8008d5c:	9300      	str	r3, [sp, #0]
 8008d5e:	9908      	ldr	r1, [sp, #32]
 8008d60:	462b      	mov	r3, r5
 8008d62:	463a      	mov	r2, r7
 8008d64:	4620      	mov	r0, r4
 8008d66:	f001 fec7 	bl	800aaf8 <__s2b>
 8008d6a:	9007      	str	r0, [sp, #28]
 8008d6c:	2800      	cmp	r0, #0
 8008d6e:	f43f af1f 	beq.w	8008bb0 <_strtod_l+0x488>
 8008d72:	9b05      	ldr	r3, [sp, #20]
 8008d74:	1b9e      	subs	r6, r3, r6
 8008d76:	9b06      	ldr	r3, [sp, #24]
 8008d78:	2b00      	cmp	r3, #0
 8008d7a:	bfb4      	ite	lt
 8008d7c:	4633      	movlt	r3, r6
 8008d7e:	2300      	movge	r3, #0
 8008d80:	930c      	str	r3, [sp, #48]	; 0x30
 8008d82:	9b06      	ldr	r3, [sp, #24]
 8008d84:	2500      	movs	r5, #0
 8008d86:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 8008d8a:	9312      	str	r3, [sp, #72]	; 0x48
 8008d8c:	462e      	mov	r6, r5
 8008d8e:	9b07      	ldr	r3, [sp, #28]
 8008d90:	4620      	mov	r0, r4
 8008d92:	6859      	ldr	r1, [r3, #4]
 8008d94:	f001 fe08 	bl	800a9a8 <_Balloc>
 8008d98:	9005      	str	r0, [sp, #20]
 8008d9a:	2800      	cmp	r0, #0
 8008d9c:	f43f af0c 	beq.w	8008bb8 <_strtod_l+0x490>
 8008da0:	9b07      	ldr	r3, [sp, #28]
 8008da2:	691a      	ldr	r2, [r3, #16]
 8008da4:	3202      	adds	r2, #2
 8008da6:	f103 010c 	add.w	r1, r3, #12
 8008daa:	0092      	lsls	r2, r2, #2
 8008dac:	300c      	adds	r0, #12
 8008dae:	f001 fded 	bl	800a98c <memcpy>
 8008db2:	ec4b ab10 	vmov	d0, sl, fp
 8008db6:	aa1a      	add	r2, sp, #104	; 0x68
 8008db8:	a919      	add	r1, sp, #100	; 0x64
 8008dba:	4620      	mov	r0, r4
 8008dbc:	f002 f9e2 	bl	800b184 <__d2b>
 8008dc0:	ec4b ab18 	vmov	d8, sl, fp
 8008dc4:	9018      	str	r0, [sp, #96]	; 0x60
 8008dc6:	2800      	cmp	r0, #0
 8008dc8:	f43f aef6 	beq.w	8008bb8 <_strtod_l+0x490>
 8008dcc:	2101      	movs	r1, #1
 8008dce:	4620      	mov	r0, r4
 8008dd0:	f001 ff2c 	bl	800ac2c <__i2b>
 8008dd4:	4606      	mov	r6, r0
 8008dd6:	2800      	cmp	r0, #0
 8008dd8:	f43f aeee 	beq.w	8008bb8 <_strtod_l+0x490>
 8008ddc:	9b19      	ldr	r3, [sp, #100]	; 0x64
 8008dde:	9904      	ldr	r1, [sp, #16]
 8008de0:	2b00      	cmp	r3, #0
 8008de2:	bfab      	itete	ge
 8008de4:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 8008de6:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 8008de8:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 8008dea:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 8008dee:	bfac      	ite	ge
 8008df0:	eb03 0902 	addge.w	r9, r3, r2
 8008df4:	1ad7      	sublt	r7, r2, r3
 8008df6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 8008df8:	eba3 0801 	sub.w	r8, r3, r1
 8008dfc:	4490      	add	r8, r2
 8008dfe:	4ba1      	ldr	r3, [pc, #644]	; (8009084 <_strtod_l+0x95c>)
 8008e00:	f108 38ff 	add.w	r8, r8, #4294967295
 8008e04:	4598      	cmp	r8, r3
 8008e06:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 8008e0a:	f280 80c7 	bge.w	8008f9c <_strtod_l+0x874>
 8008e0e:	eba3 0308 	sub.w	r3, r3, r8
 8008e12:	2b1f      	cmp	r3, #31
 8008e14:	eba2 0203 	sub.w	r2, r2, r3
 8008e18:	f04f 0101 	mov.w	r1, #1
 8008e1c:	f300 80b1 	bgt.w	8008f82 <_strtod_l+0x85a>
 8008e20:	fa01 f303 	lsl.w	r3, r1, r3
 8008e24:	930d      	str	r3, [sp, #52]	; 0x34
 8008e26:	2300      	movs	r3, #0
 8008e28:	9308      	str	r3, [sp, #32]
 8008e2a:	eb09 0802 	add.w	r8, r9, r2
 8008e2e:	9b04      	ldr	r3, [sp, #16]
 8008e30:	45c1      	cmp	r9, r8
 8008e32:	4417      	add	r7, r2
 8008e34:	441f      	add	r7, r3
 8008e36:	464b      	mov	r3, r9
 8008e38:	bfa8      	it	ge
 8008e3a:	4643      	movge	r3, r8
 8008e3c:	42bb      	cmp	r3, r7
 8008e3e:	bfa8      	it	ge
 8008e40:	463b      	movge	r3, r7
 8008e42:	2b00      	cmp	r3, #0
 8008e44:	bfc2      	ittt	gt
 8008e46:	eba8 0803 	subgt.w	r8, r8, r3
 8008e4a:	1aff      	subgt	r7, r7, r3
 8008e4c:	eba9 0903 	subgt.w	r9, r9, r3
 8008e50:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8008e52:	2b00      	cmp	r3, #0
 8008e54:	dd17      	ble.n	8008e86 <_strtod_l+0x75e>
 8008e56:	4631      	mov	r1, r6
 8008e58:	461a      	mov	r2, r3
 8008e5a:	4620      	mov	r0, r4
 8008e5c:	f001 ffa6 	bl	800adac <__pow5mult>
 8008e60:	4606      	mov	r6, r0
 8008e62:	2800      	cmp	r0, #0
 8008e64:	f43f aea8 	beq.w	8008bb8 <_strtod_l+0x490>
 8008e68:	4601      	mov	r1, r0
 8008e6a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 8008e6c:	4620      	mov	r0, r4
 8008e6e:	f001 fef3 	bl	800ac58 <__multiply>
 8008e72:	900b      	str	r0, [sp, #44]	; 0x2c
 8008e74:	2800      	cmp	r0, #0
 8008e76:	f43f ae9f 	beq.w	8008bb8 <_strtod_l+0x490>
 8008e7a:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008e7c:	4620      	mov	r0, r4
 8008e7e:	f001 fdd3 	bl	800aa28 <_Bfree>
 8008e82:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008e84:	9318      	str	r3, [sp, #96]	; 0x60
 8008e86:	f1b8 0f00 	cmp.w	r8, #0
 8008e8a:	f300 808c 	bgt.w	8008fa6 <_strtod_l+0x87e>
 8008e8e:	9b06      	ldr	r3, [sp, #24]
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	dd08      	ble.n	8008ea6 <_strtod_l+0x77e>
 8008e94:	9a12      	ldr	r2, [sp, #72]	; 0x48
 8008e96:	9905      	ldr	r1, [sp, #20]
 8008e98:	4620      	mov	r0, r4
 8008e9a:	f001 ff87 	bl	800adac <__pow5mult>
 8008e9e:	9005      	str	r0, [sp, #20]
 8008ea0:	2800      	cmp	r0, #0
 8008ea2:	f43f ae89 	beq.w	8008bb8 <_strtod_l+0x490>
 8008ea6:	2f00      	cmp	r7, #0
 8008ea8:	dd08      	ble.n	8008ebc <_strtod_l+0x794>
 8008eaa:	9905      	ldr	r1, [sp, #20]
 8008eac:	463a      	mov	r2, r7
 8008eae:	4620      	mov	r0, r4
 8008eb0:	f001 ffd6 	bl	800ae60 <__lshift>
 8008eb4:	9005      	str	r0, [sp, #20]
 8008eb6:	2800      	cmp	r0, #0
 8008eb8:	f43f ae7e 	beq.w	8008bb8 <_strtod_l+0x490>
 8008ebc:	f1b9 0f00 	cmp.w	r9, #0
 8008ec0:	dd08      	ble.n	8008ed4 <_strtod_l+0x7ac>
 8008ec2:	4631      	mov	r1, r6
 8008ec4:	464a      	mov	r2, r9
 8008ec6:	4620      	mov	r0, r4
 8008ec8:	f001 ffca 	bl	800ae60 <__lshift>
 8008ecc:	4606      	mov	r6, r0
 8008ece:	2800      	cmp	r0, #0
 8008ed0:	f43f ae72 	beq.w	8008bb8 <_strtod_l+0x490>
 8008ed4:	9a05      	ldr	r2, [sp, #20]
 8008ed6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008ed8:	4620      	mov	r0, r4
 8008eda:	f002 f84d 	bl	800af78 <__mdiff>
 8008ede:	4605      	mov	r5, r0
 8008ee0:	2800      	cmp	r0, #0
 8008ee2:	f43f ae69 	beq.w	8008bb8 <_strtod_l+0x490>
 8008ee6:	68c3      	ldr	r3, [r0, #12]
 8008ee8:	930b      	str	r3, [sp, #44]	; 0x2c
 8008eea:	2300      	movs	r3, #0
 8008eec:	60c3      	str	r3, [r0, #12]
 8008eee:	4631      	mov	r1, r6
 8008ef0:	f002 f826 	bl	800af40 <__mcmp>
 8008ef4:	2800      	cmp	r0, #0
 8008ef6:	da60      	bge.n	8008fba <_strtod_l+0x892>
 8008ef8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8008efa:	ea53 030a 	orrs.w	r3, r3, sl
 8008efe:	f040 8082 	bne.w	8009006 <_strtod_l+0x8de>
 8008f02:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008f06:	2b00      	cmp	r3, #0
 8008f08:	d17d      	bne.n	8009006 <_strtod_l+0x8de>
 8008f0a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8008f0e:	0d1b      	lsrs	r3, r3, #20
 8008f10:	051b      	lsls	r3, r3, #20
 8008f12:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 8008f16:	d976      	bls.n	8009006 <_strtod_l+0x8de>
 8008f18:	696b      	ldr	r3, [r5, #20]
 8008f1a:	b913      	cbnz	r3, 8008f22 <_strtod_l+0x7fa>
 8008f1c:	692b      	ldr	r3, [r5, #16]
 8008f1e:	2b01      	cmp	r3, #1
 8008f20:	dd71      	ble.n	8009006 <_strtod_l+0x8de>
 8008f22:	4629      	mov	r1, r5
 8008f24:	2201      	movs	r2, #1
 8008f26:	4620      	mov	r0, r4
 8008f28:	f001 ff9a 	bl	800ae60 <__lshift>
 8008f2c:	4631      	mov	r1, r6
 8008f2e:	4605      	mov	r5, r0
 8008f30:	f002 f806 	bl	800af40 <__mcmp>
 8008f34:	2800      	cmp	r0, #0
 8008f36:	dd66      	ble.n	8009006 <_strtod_l+0x8de>
 8008f38:	9904      	ldr	r1, [sp, #16]
 8008f3a:	4a53      	ldr	r2, [pc, #332]	; (8009088 <_strtod_l+0x960>)
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	2900      	cmp	r1, #0
 8008f40:	f000 8081 	beq.w	8009046 <_strtod_l+0x91e>
 8008f44:	ea02 010b 	and.w	r1, r2, fp
 8008f48:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 8008f4c:	dc7b      	bgt.n	8009046 <_strtod_l+0x91e>
 8008f4e:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 8008f52:	f77f aea9 	ble.w	8008ca8 <_strtod_l+0x580>
 8008f56:	4b4d      	ldr	r3, [pc, #308]	; (800908c <_strtod_l+0x964>)
 8008f58:	4650      	mov	r0, sl
 8008f5a:	4659      	mov	r1, fp
 8008f5c:	2200      	movs	r2, #0
 8008f5e:	f7f7 fb4b 	bl	80005f8 <__aeabi_dmul>
 8008f62:	460b      	mov	r3, r1
 8008f64:	4303      	orrs	r3, r0
 8008f66:	bf08      	it	eq
 8008f68:	2322      	moveq	r3, #34	; 0x22
 8008f6a:	4682      	mov	sl, r0
 8008f6c:	468b      	mov	fp, r1
 8008f6e:	bf08      	it	eq
 8008f70:	6023      	streq	r3, [r4, #0]
 8008f72:	e62b      	b.n	8008bcc <_strtod_l+0x4a4>
 8008f74:	f04f 32ff 	mov.w	r2, #4294967295
 8008f78:	fa02 f303 	lsl.w	r3, r2, r3
 8008f7c:	ea03 0a0a 	and.w	sl, r3, sl
 8008f80:	e6e3      	b.n	8008d4a <_strtod_l+0x622>
 8008f82:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 8008f86:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 8008f8a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 8008f8e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 8008f92:	fa01 f308 	lsl.w	r3, r1, r8
 8008f96:	9308      	str	r3, [sp, #32]
 8008f98:	910d      	str	r1, [sp, #52]	; 0x34
 8008f9a:	e746      	b.n	8008e2a <_strtod_l+0x702>
 8008f9c:	2300      	movs	r3, #0
 8008f9e:	9308      	str	r3, [sp, #32]
 8008fa0:	2301      	movs	r3, #1
 8008fa2:	930d      	str	r3, [sp, #52]	; 0x34
 8008fa4:	e741      	b.n	8008e2a <_strtod_l+0x702>
 8008fa6:	9918      	ldr	r1, [sp, #96]	; 0x60
 8008fa8:	4642      	mov	r2, r8
 8008faa:	4620      	mov	r0, r4
 8008fac:	f001 ff58 	bl	800ae60 <__lshift>
 8008fb0:	9018      	str	r0, [sp, #96]	; 0x60
 8008fb2:	2800      	cmp	r0, #0
 8008fb4:	f47f af6b 	bne.w	8008e8e <_strtod_l+0x766>
 8008fb8:	e5fe      	b.n	8008bb8 <_strtod_l+0x490>
 8008fba:	465f      	mov	r7, fp
 8008fbc:	d16e      	bne.n	800909c <_strtod_l+0x974>
 8008fbe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8008fc0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8008fc4:	b342      	cbz	r2, 8009018 <_strtod_l+0x8f0>
 8008fc6:	4a32      	ldr	r2, [pc, #200]	; (8009090 <_strtod_l+0x968>)
 8008fc8:	4293      	cmp	r3, r2
 8008fca:	d128      	bne.n	800901e <_strtod_l+0x8f6>
 8008fcc:	9b04      	ldr	r3, [sp, #16]
 8008fce:	4651      	mov	r1, sl
 8008fd0:	b1eb      	cbz	r3, 800900e <_strtod_l+0x8e6>
 8008fd2:	4b2d      	ldr	r3, [pc, #180]	; (8009088 <_strtod_l+0x960>)
 8008fd4:	403b      	ands	r3, r7
 8008fd6:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 8008fda:	f04f 32ff 	mov.w	r2, #4294967295
 8008fde:	d819      	bhi.n	8009014 <_strtod_l+0x8ec>
 8008fe0:	0d1b      	lsrs	r3, r3, #20
 8008fe2:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 8008fe6:	fa02 f303 	lsl.w	r3, r2, r3
 8008fea:	4299      	cmp	r1, r3
 8008fec:	d117      	bne.n	800901e <_strtod_l+0x8f6>
 8008fee:	4b29      	ldr	r3, [pc, #164]	; (8009094 <_strtod_l+0x96c>)
 8008ff0:	429f      	cmp	r7, r3
 8008ff2:	d102      	bne.n	8008ffa <_strtod_l+0x8d2>
 8008ff4:	3101      	adds	r1, #1
 8008ff6:	f43f addf 	beq.w	8008bb8 <_strtod_l+0x490>
 8008ffa:	4b23      	ldr	r3, [pc, #140]	; (8009088 <_strtod_l+0x960>)
 8008ffc:	403b      	ands	r3, r7
 8008ffe:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 8009002:	f04f 0a00 	mov.w	sl, #0
 8009006:	9b04      	ldr	r3, [sp, #16]
 8009008:	2b00      	cmp	r3, #0
 800900a:	d1a4      	bne.n	8008f56 <_strtod_l+0x82e>
 800900c:	e5de      	b.n	8008bcc <_strtod_l+0x4a4>
 800900e:	f04f 33ff 	mov.w	r3, #4294967295
 8009012:	e7ea      	b.n	8008fea <_strtod_l+0x8c2>
 8009014:	4613      	mov	r3, r2
 8009016:	e7e8      	b.n	8008fea <_strtod_l+0x8c2>
 8009018:	ea53 030a 	orrs.w	r3, r3, sl
 800901c:	d08c      	beq.n	8008f38 <_strtod_l+0x810>
 800901e:	9b08      	ldr	r3, [sp, #32]
 8009020:	b1db      	cbz	r3, 800905a <_strtod_l+0x932>
 8009022:	423b      	tst	r3, r7
 8009024:	d0ef      	beq.n	8009006 <_strtod_l+0x8de>
 8009026:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009028:	9a04      	ldr	r2, [sp, #16]
 800902a:	4650      	mov	r0, sl
 800902c:	4659      	mov	r1, fp
 800902e:	b1c3      	cbz	r3, 8009062 <_strtod_l+0x93a>
 8009030:	f7ff fb5c 	bl	80086ec <sulp>
 8009034:	4602      	mov	r2, r0
 8009036:	460b      	mov	r3, r1
 8009038:	ec51 0b18 	vmov	r0, r1, d8
 800903c:	f7f7 f926 	bl	800028c <__adddf3>
 8009040:	4682      	mov	sl, r0
 8009042:	468b      	mov	fp, r1
 8009044:	e7df      	b.n	8009006 <_strtod_l+0x8de>
 8009046:	4013      	ands	r3, r2
 8009048:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800904c:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 8009050:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 8009054:	f04f 3aff 	mov.w	sl, #4294967295
 8009058:	e7d5      	b.n	8009006 <_strtod_l+0x8de>
 800905a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800905c:	ea13 0f0a 	tst.w	r3, sl
 8009060:	e7e0      	b.n	8009024 <_strtod_l+0x8fc>
 8009062:	f7ff fb43 	bl	80086ec <sulp>
 8009066:	4602      	mov	r2, r0
 8009068:	460b      	mov	r3, r1
 800906a:	ec51 0b18 	vmov	r0, r1, d8
 800906e:	f7f7 f90b 	bl	8000288 <__aeabi_dsub>
 8009072:	2200      	movs	r2, #0
 8009074:	2300      	movs	r3, #0
 8009076:	4682      	mov	sl, r0
 8009078:	468b      	mov	fp, r1
 800907a:	f7f7 fd25 	bl	8000ac8 <__aeabi_dcmpeq>
 800907e:	2800      	cmp	r0, #0
 8009080:	d0c1      	beq.n	8009006 <_strtod_l+0x8de>
 8009082:	e611      	b.n	8008ca8 <_strtod_l+0x580>
 8009084:	fffffc02 	.word	0xfffffc02
 8009088:	7ff00000 	.word	0x7ff00000
 800908c:	39500000 	.word	0x39500000
 8009090:	000fffff 	.word	0x000fffff
 8009094:	7fefffff 	.word	0x7fefffff
 8009098:	0800c4e8 	.word	0x0800c4e8
 800909c:	4631      	mov	r1, r6
 800909e:	4628      	mov	r0, r5
 80090a0:	f002 f8cc 	bl	800b23c <__ratio>
 80090a4:	ec59 8b10 	vmov	r8, r9, d0
 80090a8:	ee10 0a10 	vmov	r0, s0
 80090ac:	2200      	movs	r2, #0
 80090ae:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 80090b2:	4649      	mov	r1, r9
 80090b4:	f7f7 fd1c 	bl	8000af0 <__aeabi_dcmple>
 80090b8:	2800      	cmp	r0, #0
 80090ba:	d07a      	beq.n	80091b2 <_strtod_l+0xa8a>
 80090bc:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80090be:	2b00      	cmp	r3, #0
 80090c0:	d04a      	beq.n	8009158 <_strtod_l+0xa30>
 80090c2:	4b95      	ldr	r3, [pc, #596]	; (8009318 <_strtod_l+0xbf0>)
 80090c4:	2200      	movs	r2, #0
 80090c6:	e9cd 2308 	strd	r2, r3, [sp, #32]
 80090ca:	f8df 924c 	ldr.w	r9, [pc, #588]	; 8009318 <_strtod_l+0xbf0>
 80090ce:	f04f 0800 	mov.w	r8, #0
 80090d2:	4b92      	ldr	r3, [pc, #584]	; (800931c <_strtod_l+0xbf4>)
 80090d4:	403b      	ands	r3, r7
 80090d6:	930d      	str	r3, [sp, #52]	; 0x34
 80090d8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80090da:	4b91      	ldr	r3, [pc, #580]	; (8009320 <_strtod_l+0xbf8>)
 80090dc:	429a      	cmp	r2, r3
 80090de:	f040 80b0 	bne.w	8009242 <_strtod_l+0xb1a>
 80090e2:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80090e6:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 80090ea:	ec4b ab10 	vmov	d0, sl, fp
 80090ee:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80090f2:	f001 ffcb 	bl	800b08c <__ulp>
 80090f6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80090fa:	ec53 2b10 	vmov	r2, r3, d0
 80090fe:	f7f7 fa7b 	bl	80005f8 <__aeabi_dmul>
 8009102:	4652      	mov	r2, sl
 8009104:	465b      	mov	r3, fp
 8009106:	f7f7 f8c1 	bl	800028c <__adddf3>
 800910a:	460b      	mov	r3, r1
 800910c:	4983      	ldr	r1, [pc, #524]	; (800931c <_strtod_l+0xbf4>)
 800910e:	4a85      	ldr	r2, [pc, #532]	; (8009324 <_strtod_l+0xbfc>)
 8009110:	4019      	ands	r1, r3
 8009112:	4291      	cmp	r1, r2
 8009114:	4682      	mov	sl, r0
 8009116:	d960      	bls.n	80091da <_strtod_l+0xab2>
 8009118:	ee18 3a90 	vmov	r3, s17
 800911c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 8009120:	4293      	cmp	r3, r2
 8009122:	d104      	bne.n	800912e <_strtod_l+0xa06>
 8009124:	ee18 3a10 	vmov	r3, s16
 8009128:	3301      	adds	r3, #1
 800912a:	f43f ad45 	beq.w	8008bb8 <_strtod_l+0x490>
 800912e:	f8df b200 	ldr.w	fp, [pc, #512]	; 8009330 <_strtod_l+0xc08>
 8009132:	f04f 3aff 	mov.w	sl, #4294967295
 8009136:	9918      	ldr	r1, [sp, #96]	; 0x60
 8009138:	4620      	mov	r0, r4
 800913a:	f001 fc75 	bl	800aa28 <_Bfree>
 800913e:	9905      	ldr	r1, [sp, #20]
 8009140:	4620      	mov	r0, r4
 8009142:	f001 fc71 	bl	800aa28 <_Bfree>
 8009146:	4631      	mov	r1, r6
 8009148:	4620      	mov	r0, r4
 800914a:	f001 fc6d 	bl	800aa28 <_Bfree>
 800914e:	4629      	mov	r1, r5
 8009150:	4620      	mov	r0, r4
 8009152:	f001 fc69 	bl	800aa28 <_Bfree>
 8009156:	e61a      	b.n	8008d8e <_strtod_l+0x666>
 8009158:	f1ba 0f00 	cmp.w	sl, #0
 800915c:	d11b      	bne.n	8009196 <_strtod_l+0xa6e>
 800915e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009162:	b9f3      	cbnz	r3, 80091a2 <_strtod_l+0xa7a>
 8009164:	4b6c      	ldr	r3, [pc, #432]	; (8009318 <_strtod_l+0xbf0>)
 8009166:	2200      	movs	r2, #0
 8009168:	4640      	mov	r0, r8
 800916a:	4649      	mov	r1, r9
 800916c:	f7f7 fcb6 	bl	8000adc <__aeabi_dcmplt>
 8009170:	b9d0      	cbnz	r0, 80091a8 <_strtod_l+0xa80>
 8009172:	4640      	mov	r0, r8
 8009174:	4649      	mov	r1, r9
 8009176:	4b6c      	ldr	r3, [pc, #432]	; (8009328 <_strtod_l+0xc00>)
 8009178:	2200      	movs	r2, #0
 800917a:	f7f7 fa3d 	bl	80005f8 <__aeabi_dmul>
 800917e:	4680      	mov	r8, r0
 8009180:	4689      	mov	r9, r1
 8009182:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 8009186:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800918a:	9315      	str	r3, [sp, #84]	; 0x54
 800918c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 8009190:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009194:	e79d      	b.n	80090d2 <_strtod_l+0x9aa>
 8009196:	f1ba 0f01 	cmp.w	sl, #1
 800919a:	d102      	bne.n	80091a2 <_strtod_l+0xa7a>
 800919c:	2f00      	cmp	r7, #0
 800919e:	f43f ad83 	beq.w	8008ca8 <_strtod_l+0x580>
 80091a2:	4b62      	ldr	r3, [pc, #392]	; (800932c <_strtod_l+0xc04>)
 80091a4:	2200      	movs	r2, #0
 80091a6:	e78e      	b.n	80090c6 <_strtod_l+0x99e>
 80091a8:	f8df 917c 	ldr.w	r9, [pc, #380]	; 8009328 <_strtod_l+0xc00>
 80091ac:	f04f 0800 	mov.w	r8, #0
 80091b0:	e7e7      	b.n	8009182 <_strtod_l+0xa5a>
 80091b2:	4b5d      	ldr	r3, [pc, #372]	; (8009328 <_strtod_l+0xc00>)
 80091b4:	4640      	mov	r0, r8
 80091b6:	4649      	mov	r1, r9
 80091b8:	2200      	movs	r2, #0
 80091ba:	f7f7 fa1d 	bl	80005f8 <__aeabi_dmul>
 80091be:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80091c0:	4680      	mov	r8, r0
 80091c2:	4689      	mov	r9, r1
 80091c4:	b933      	cbnz	r3, 80091d4 <_strtod_l+0xaac>
 80091c6:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80091ca:	900e      	str	r0, [sp, #56]	; 0x38
 80091cc:	930f      	str	r3, [sp, #60]	; 0x3c
 80091ce:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 80091d2:	e7dd      	b.n	8009190 <_strtod_l+0xa68>
 80091d4:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 80091d8:	e7f9      	b.n	80091ce <_strtod_l+0xaa6>
 80091da:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 80091de:	9b04      	ldr	r3, [sp, #16]
 80091e0:	2b00      	cmp	r3, #0
 80091e2:	d1a8      	bne.n	8009136 <_strtod_l+0xa0e>
 80091e4:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80091e8:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 80091ea:	0d1b      	lsrs	r3, r3, #20
 80091ec:	051b      	lsls	r3, r3, #20
 80091ee:	429a      	cmp	r2, r3
 80091f0:	d1a1      	bne.n	8009136 <_strtod_l+0xa0e>
 80091f2:	4640      	mov	r0, r8
 80091f4:	4649      	mov	r1, r9
 80091f6:	f7f7 fd5f 	bl	8000cb8 <__aeabi_d2lz>
 80091fa:	f7f7 f9cf 	bl	800059c <__aeabi_l2d>
 80091fe:	4602      	mov	r2, r0
 8009200:	460b      	mov	r3, r1
 8009202:	4640      	mov	r0, r8
 8009204:	4649      	mov	r1, r9
 8009206:	f7f7 f83f 	bl	8000288 <__aeabi_dsub>
 800920a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800920c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009210:	ea43 030a 	orr.w	r3, r3, sl
 8009214:	4313      	orrs	r3, r2
 8009216:	4680      	mov	r8, r0
 8009218:	4689      	mov	r9, r1
 800921a:	d055      	beq.n	80092c8 <_strtod_l+0xba0>
 800921c:	a336      	add	r3, pc, #216	; (adr r3, 80092f8 <_strtod_l+0xbd0>)
 800921e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009222:	f7f7 fc5b 	bl	8000adc <__aeabi_dcmplt>
 8009226:	2800      	cmp	r0, #0
 8009228:	f47f acd0 	bne.w	8008bcc <_strtod_l+0x4a4>
 800922c:	a334      	add	r3, pc, #208	; (adr r3, 8009300 <_strtod_l+0xbd8>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	4640      	mov	r0, r8
 8009234:	4649      	mov	r1, r9
 8009236:	f7f7 fc6f 	bl	8000b18 <__aeabi_dcmpgt>
 800923a:	2800      	cmp	r0, #0
 800923c:	f43f af7b 	beq.w	8009136 <_strtod_l+0xa0e>
 8009240:	e4c4      	b.n	8008bcc <_strtod_l+0x4a4>
 8009242:	9b04      	ldr	r3, [sp, #16]
 8009244:	b333      	cbz	r3, 8009294 <_strtod_l+0xb6c>
 8009246:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009248:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800924c:	d822      	bhi.n	8009294 <_strtod_l+0xb6c>
 800924e:	a32e      	add	r3, pc, #184	; (adr r3, 8009308 <_strtod_l+0xbe0>)
 8009250:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009254:	4640      	mov	r0, r8
 8009256:	4649      	mov	r1, r9
 8009258:	f7f7 fc4a 	bl	8000af0 <__aeabi_dcmple>
 800925c:	b1a0      	cbz	r0, 8009288 <_strtod_l+0xb60>
 800925e:	4649      	mov	r1, r9
 8009260:	4640      	mov	r0, r8
 8009262:	f7f7 fca1 	bl	8000ba8 <__aeabi_d2uiz>
 8009266:	2801      	cmp	r0, #1
 8009268:	bf38      	it	cc
 800926a:	2001      	movcc	r0, #1
 800926c:	f7f7 f94a 	bl	8000504 <__aeabi_ui2d>
 8009270:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009272:	4680      	mov	r8, r0
 8009274:	4689      	mov	r9, r1
 8009276:	bb23      	cbnz	r3, 80092c2 <_strtod_l+0xb9a>
 8009278:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800927c:	9010      	str	r0, [sp, #64]	; 0x40
 800927e:	9311      	str	r3, [sp, #68]	; 0x44
 8009280:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8009284:	e9cd 2308 	strd	r2, r3, [sp, #32]
 8009288:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800928a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800928c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 8009290:	1a9b      	subs	r3, r3, r2
 8009292:	9309      	str	r3, [sp, #36]	; 0x24
 8009294:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 8009298:	eeb0 0a48 	vmov.f32	s0, s16
 800929c:	eef0 0a68 	vmov.f32	s1, s17
 80092a0:	e9cd 0108 	strd	r0, r1, [sp, #32]
 80092a4:	f001 fef2 	bl	800b08c <__ulp>
 80092a8:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 80092ac:	ec53 2b10 	vmov	r2, r3, d0
 80092b0:	f7f7 f9a2 	bl	80005f8 <__aeabi_dmul>
 80092b4:	ec53 2b18 	vmov	r2, r3, d8
 80092b8:	f7f6 ffe8 	bl	800028c <__adddf3>
 80092bc:	4682      	mov	sl, r0
 80092be:	468b      	mov	fp, r1
 80092c0:	e78d      	b.n	80091de <_strtod_l+0xab6>
 80092c2:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80092c6:	e7db      	b.n	8009280 <_strtod_l+0xb58>
 80092c8:	a311      	add	r3, pc, #68	; (adr r3, 8009310 <_strtod_l+0xbe8>)
 80092ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80092ce:	f7f7 fc05 	bl	8000adc <__aeabi_dcmplt>
 80092d2:	e7b2      	b.n	800923a <_strtod_l+0xb12>
 80092d4:	2300      	movs	r3, #0
 80092d6:	930a      	str	r3, [sp, #40]	; 0x28
 80092d8:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 80092da:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80092dc:	6013      	str	r3, [r2, #0]
 80092de:	f7ff ba6b 	b.w	80087b8 <_strtod_l+0x90>
 80092e2:	2a65      	cmp	r2, #101	; 0x65
 80092e4:	f43f ab5f 	beq.w	80089a6 <_strtod_l+0x27e>
 80092e8:	2a45      	cmp	r2, #69	; 0x45
 80092ea:	f43f ab5c 	beq.w	80089a6 <_strtod_l+0x27e>
 80092ee:	2301      	movs	r3, #1
 80092f0:	f7ff bb94 	b.w	8008a1c <_strtod_l+0x2f4>
 80092f4:	f3af 8000 	nop.w
 80092f8:	94a03595 	.word	0x94a03595
 80092fc:	3fdfffff 	.word	0x3fdfffff
 8009300:	35afe535 	.word	0x35afe535
 8009304:	3fe00000 	.word	0x3fe00000
 8009308:	ffc00000 	.word	0xffc00000
 800930c:	41dfffff 	.word	0x41dfffff
 8009310:	94a03595 	.word	0x94a03595
 8009314:	3fcfffff 	.word	0x3fcfffff
 8009318:	3ff00000 	.word	0x3ff00000
 800931c:	7ff00000 	.word	0x7ff00000
 8009320:	7fe00000 	.word	0x7fe00000
 8009324:	7c9fffff 	.word	0x7c9fffff
 8009328:	3fe00000 	.word	0x3fe00000
 800932c:	bff00000 	.word	0xbff00000
 8009330:	7fefffff 	.word	0x7fefffff

08009334 <_strtod_r>:
 8009334:	4b01      	ldr	r3, [pc, #4]	; (800933c <_strtod_r+0x8>)
 8009336:	f7ff b9f7 	b.w	8008728 <_strtod_l>
 800933a:	bf00      	nop
 800933c:	20000084 	.word	0x20000084

08009340 <strtod>:
 8009340:	460a      	mov	r2, r1
 8009342:	4601      	mov	r1, r0
 8009344:	4802      	ldr	r0, [pc, #8]	; (8009350 <strtod+0x10>)
 8009346:	4b03      	ldr	r3, [pc, #12]	; (8009354 <strtod+0x14>)
 8009348:	6800      	ldr	r0, [r0, #0]
 800934a:	f7ff b9ed 	b.w	8008728 <_strtod_l>
 800934e:	bf00      	nop
 8009350:	2000001c 	.word	0x2000001c
 8009354:	20000084 	.word	0x20000084

08009358 <strtok>:
 8009358:	4b16      	ldr	r3, [pc, #88]	; (80093b4 <strtok+0x5c>)
 800935a:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800935c:	681e      	ldr	r6, [r3, #0]
 800935e:	6db4      	ldr	r4, [r6, #88]	; 0x58
 8009360:	4605      	mov	r5, r0
 8009362:	b9fc      	cbnz	r4, 80093a4 <strtok+0x4c>
 8009364:	2050      	movs	r0, #80	; 0x50
 8009366:	9101      	str	r1, [sp, #4]
 8009368:	f001 faf6 	bl	800a958 <malloc>
 800936c:	9901      	ldr	r1, [sp, #4]
 800936e:	65b0      	str	r0, [r6, #88]	; 0x58
 8009370:	4602      	mov	r2, r0
 8009372:	b920      	cbnz	r0, 800937e <strtok+0x26>
 8009374:	4b10      	ldr	r3, [pc, #64]	; (80093b8 <strtok+0x60>)
 8009376:	4811      	ldr	r0, [pc, #68]	; (80093bc <strtok+0x64>)
 8009378:	2157      	movs	r1, #87	; 0x57
 800937a:	f000 f8cd 	bl	8009518 <__assert_func>
 800937e:	e9c0 4400 	strd	r4, r4, [r0]
 8009382:	e9c0 4402 	strd	r4, r4, [r0, #8]
 8009386:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800938a:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800938e:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 8009392:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 8009396:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800939a:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800939e:	6184      	str	r4, [r0, #24]
 80093a0:	7704      	strb	r4, [r0, #28]
 80093a2:	6244      	str	r4, [r0, #36]	; 0x24
 80093a4:	6db2      	ldr	r2, [r6, #88]	; 0x58
 80093a6:	2301      	movs	r3, #1
 80093a8:	4628      	mov	r0, r5
 80093aa:	b002      	add	sp, #8
 80093ac:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 80093b0:	f000 b806 	b.w	80093c0 <__strtok_r>
 80093b4:	2000001c 	.word	0x2000001c
 80093b8:	0800c510 	.word	0x0800c510
 80093bc:	0800c527 	.word	0x0800c527

080093c0 <__strtok_r>:
 80093c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80093c2:	b908      	cbnz	r0, 80093c8 <__strtok_r+0x8>
 80093c4:	6810      	ldr	r0, [r2, #0]
 80093c6:	b188      	cbz	r0, 80093ec <__strtok_r+0x2c>
 80093c8:	4604      	mov	r4, r0
 80093ca:	4620      	mov	r0, r4
 80093cc:	f814 5b01 	ldrb.w	r5, [r4], #1
 80093d0:	460f      	mov	r7, r1
 80093d2:	f817 6b01 	ldrb.w	r6, [r7], #1
 80093d6:	b91e      	cbnz	r6, 80093e0 <__strtok_r+0x20>
 80093d8:	b965      	cbnz	r5, 80093f4 <__strtok_r+0x34>
 80093da:	6015      	str	r5, [r2, #0]
 80093dc:	4628      	mov	r0, r5
 80093de:	e005      	b.n	80093ec <__strtok_r+0x2c>
 80093e0:	42b5      	cmp	r5, r6
 80093e2:	d1f6      	bne.n	80093d2 <__strtok_r+0x12>
 80093e4:	2b00      	cmp	r3, #0
 80093e6:	d1f0      	bne.n	80093ca <__strtok_r+0xa>
 80093e8:	6014      	str	r4, [r2, #0]
 80093ea:	7003      	strb	r3, [r0, #0]
 80093ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80093ee:	461c      	mov	r4, r3
 80093f0:	e00c      	b.n	800940c <__strtok_r+0x4c>
 80093f2:	b915      	cbnz	r5, 80093fa <__strtok_r+0x3a>
 80093f4:	f814 3b01 	ldrb.w	r3, [r4], #1
 80093f8:	460e      	mov	r6, r1
 80093fa:	f816 5b01 	ldrb.w	r5, [r6], #1
 80093fe:	42ab      	cmp	r3, r5
 8009400:	d1f7      	bne.n	80093f2 <__strtok_r+0x32>
 8009402:	2b00      	cmp	r3, #0
 8009404:	d0f3      	beq.n	80093ee <__strtok_r+0x2e>
 8009406:	2300      	movs	r3, #0
 8009408:	f804 3c01 	strb.w	r3, [r4, #-1]
 800940c:	6014      	str	r4, [r2, #0]
 800940e:	e7ed      	b.n	80093ec <__strtok_r+0x2c>

08009410 <_strtol_l.constprop.0>:
 8009410:	2b01      	cmp	r3, #1
 8009412:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009416:	d001      	beq.n	800941c <_strtol_l.constprop.0+0xc>
 8009418:	2b24      	cmp	r3, #36	; 0x24
 800941a:	d906      	bls.n	800942a <_strtol_l.constprop.0+0x1a>
 800941c:	f7fe fa94 	bl	8007948 <__errno>
 8009420:	2316      	movs	r3, #22
 8009422:	6003      	str	r3, [r0, #0]
 8009424:	2000      	movs	r0, #0
 8009426:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800942a:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 8009510 <_strtol_l.constprop.0+0x100>
 800942e:	460d      	mov	r5, r1
 8009430:	462e      	mov	r6, r5
 8009432:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009436:	f814 700c 	ldrb.w	r7, [r4, ip]
 800943a:	f017 0708 	ands.w	r7, r7, #8
 800943e:	d1f7      	bne.n	8009430 <_strtol_l.constprop.0+0x20>
 8009440:	2c2d      	cmp	r4, #45	; 0x2d
 8009442:	d132      	bne.n	80094aa <_strtol_l.constprop.0+0x9a>
 8009444:	782c      	ldrb	r4, [r5, #0]
 8009446:	2701      	movs	r7, #1
 8009448:	1cb5      	adds	r5, r6, #2
 800944a:	2b00      	cmp	r3, #0
 800944c:	d05b      	beq.n	8009506 <_strtol_l.constprop.0+0xf6>
 800944e:	2b10      	cmp	r3, #16
 8009450:	d109      	bne.n	8009466 <_strtol_l.constprop.0+0x56>
 8009452:	2c30      	cmp	r4, #48	; 0x30
 8009454:	d107      	bne.n	8009466 <_strtol_l.constprop.0+0x56>
 8009456:	782c      	ldrb	r4, [r5, #0]
 8009458:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800945c:	2c58      	cmp	r4, #88	; 0x58
 800945e:	d14d      	bne.n	80094fc <_strtol_l.constprop.0+0xec>
 8009460:	786c      	ldrb	r4, [r5, #1]
 8009462:	2310      	movs	r3, #16
 8009464:	3502      	adds	r5, #2
 8009466:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800946a:	f108 38ff 	add.w	r8, r8, #4294967295
 800946e:	f04f 0c00 	mov.w	ip, #0
 8009472:	fbb8 f9f3 	udiv	r9, r8, r3
 8009476:	4666      	mov	r6, ip
 8009478:	fb03 8a19 	mls	sl, r3, r9, r8
 800947c:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 8009480:	f1be 0f09 	cmp.w	lr, #9
 8009484:	d816      	bhi.n	80094b4 <_strtol_l.constprop.0+0xa4>
 8009486:	4674      	mov	r4, lr
 8009488:	42a3      	cmp	r3, r4
 800948a:	dd24      	ble.n	80094d6 <_strtol_l.constprop.0+0xc6>
 800948c:	f1bc 0f00 	cmp.w	ip, #0
 8009490:	db1e      	blt.n	80094d0 <_strtol_l.constprop.0+0xc0>
 8009492:	45b1      	cmp	r9, r6
 8009494:	d31c      	bcc.n	80094d0 <_strtol_l.constprop.0+0xc0>
 8009496:	d101      	bne.n	800949c <_strtol_l.constprop.0+0x8c>
 8009498:	45a2      	cmp	sl, r4
 800949a:	db19      	blt.n	80094d0 <_strtol_l.constprop.0+0xc0>
 800949c:	fb06 4603 	mla	r6, r6, r3, r4
 80094a0:	f04f 0c01 	mov.w	ip, #1
 80094a4:	f815 4b01 	ldrb.w	r4, [r5], #1
 80094a8:	e7e8      	b.n	800947c <_strtol_l.constprop.0+0x6c>
 80094aa:	2c2b      	cmp	r4, #43	; 0x2b
 80094ac:	bf04      	itt	eq
 80094ae:	782c      	ldrbeq	r4, [r5, #0]
 80094b0:	1cb5      	addeq	r5, r6, #2
 80094b2:	e7ca      	b.n	800944a <_strtol_l.constprop.0+0x3a>
 80094b4:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 80094b8:	f1be 0f19 	cmp.w	lr, #25
 80094bc:	d801      	bhi.n	80094c2 <_strtol_l.constprop.0+0xb2>
 80094be:	3c37      	subs	r4, #55	; 0x37
 80094c0:	e7e2      	b.n	8009488 <_strtol_l.constprop.0+0x78>
 80094c2:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 80094c6:	f1be 0f19 	cmp.w	lr, #25
 80094ca:	d804      	bhi.n	80094d6 <_strtol_l.constprop.0+0xc6>
 80094cc:	3c57      	subs	r4, #87	; 0x57
 80094ce:	e7db      	b.n	8009488 <_strtol_l.constprop.0+0x78>
 80094d0:	f04f 3cff 	mov.w	ip, #4294967295
 80094d4:	e7e6      	b.n	80094a4 <_strtol_l.constprop.0+0x94>
 80094d6:	f1bc 0f00 	cmp.w	ip, #0
 80094da:	da05      	bge.n	80094e8 <_strtol_l.constprop.0+0xd8>
 80094dc:	2322      	movs	r3, #34	; 0x22
 80094de:	6003      	str	r3, [r0, #0]
 80094e0:	4646      	mov	r6, r8
 80094e2:	b942      	cbnz	r2, 80094f6 <_strtol_l.constprop.0+0xe6>
 80094e4:	4630      	mov	r0, r6
 80094e6:	e79e      	b.n	8009426 <_strtol_l.constprop.0+0x16>
 80094e8:	b107      	cbz	r7, 80094ec <_strtol_l.constprop.0+0xdc>
 80094ea:	4276      	negs	r6, r6
 80094ec:	2a00      	cmp	r2, #0
 80094ee:	d0f9      	beq.n	80094e4 <_strtol_l.constprop.0+0xd4>
 80094f0:	f1bc 0f00 	cmp.w	ip, #0
 80094f4:	d000      	beq.n	80094f8 <_strtol_l.constprop.0+0xe8>
 80094f6:	1e69      	subs	r1, r5, #1
 80094f8:	6011      	str	r1, [r2, #0]
 80094fa:	e7f3      	b.n	80094e4 <_strtol_l.constprop.0+0xd4>
 80094fc:	2430      	movs	r4, #48	; 0x30
 80094fe:	2b00      	cmp	r3, #0
 8009500:	d1b1      	bne.n	8009466 <_strtol_l.constprop.0+0x56>
 8009502:	2308      	movs	r3, #8
 8009504:	e7af      	b.n	8009466 <_strtol_l.constprop.0+0x56>
 8009506:	2c30      	cmp	r4, #48	; 0x30
 8009508:	d0a5      	beq.n	8009456 <_strtol_l.constprop.0+0x46>
 800950a:	230a      	movs	r3, #10
 800950c:	e7ab      	b.n	8009466 <_strtol_l.constprop.0+0x56>
 800950e:	bf00      	nop
 8009510:	0800c5c1 	.word	0x0800c5c1

08009514 <_strtol_r>:
 8009514:	f7ff bf7c 	b.w	8009410 <_strtol_l.constprop.0>

08009518 <__assert_func>:
 8009518:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800951a:	4614      	mov	r4, r2
 800951c:	461a      	mov	r2, r3
 800951e:	4b09      	ldr	r3, [pc, #36]	; (8009544 <__assert_func+0x2c>)
 8009520:	681b      	ldr	r3, [r3, #0]
 8009522:	4605      	mov	r5, r0
 8009524:	68d8      	ldr	r0, [r3, #12]
 8009526:	b14c      	cbz	r4, 800953c <__assert_func+0x24>
 8009528:	4b07      	ldr	r3, [pc, #28]	; (8009548 <__assert_func+0x30>)
 800952a:	9100      	str	r1, [sp, #0]
 800952c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8009530:	4906      	ldr	r1, [pc, #24]	; (800954c <__assert_func+0x34>)
 8009532:	462b      	mov	r3, r5
 8009534:	f000 fe8a 	bl	800a24c <fiprintf>
 8009538:	f002 fba0 	bl	800bc7c <abort>
 800953c:	4b04      	ldr	r3, [pc, #16]	; (8009550 <__assert_func+0x38>)
 800953e:	461c      	mov	r4, r3
 8009540:	e7f3      	b.n	800952a <__assert_func+0x12>
 8009542:	bf00      	nop
 8009544:	2000001c 	.word	0x2000001c
 8009548:	0800c584 	.word	0x0800c584
 800954c:	0800c591 	.word	0x0800c591
 8009550:	0800c5bf 	.word	0x0800c5bf

08009554 <quorem>:
 8009554:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009558:	6903      	ldr	r3, [r0, #16]
 800955a:	690c      	ldr	r4, [r1, #16]
 800955c:	42a3      	cmp	r3, r4
 800955e:	4607      	mov	r7, r0
 8009560:	f2c0 8081 	blt.w	8009666 <quorem+0x112>
 8009564:	3c01      	subs	r4, #1
 8009566:	f101 0814 	add.w	r8, r1, #20
 800956a:	f100 0514 	add.w	r5, r0, #20
 800956e:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8009572:	9301      	str	r3, [sp, #4]
 8009574:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8009578:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800957c:	3301      	adds	r3, #1
 800957e:	429a      	cmp	r2, r3
 8009580:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 8009584:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8009588:	fbb2 f6f3 	udiv	r6, r2, r3
 800958c:	d331      	bcc.n	80095f2 <quorem+0x9e>
 800958e:	f04f 0e00 	mov.w	lr, #0
 8009592:	4640      	mov	r0, r8
 8009594:	46ac      	mov	ip, r5
 8009596:	46f2      	mov	sl, lr
 8009598:	f850 2b04 	ldr.w	r2, [r0], #4
 800959c:	b293      	uxth	r3, r2
 800959e:	fb06 e303 	mla	r3, r6, r3, lr
 80095a2:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 80095a6:	b29b      	uxth	r3, r3
 80095a8:	ebaa 0303 	sub.w	r3, sl, r3
 80095ac:	f8dc a000 	ldr.w	sl, [ip]
 80095b0:	0c12      	lsrs	r2, r2, #16
 80095b2:	fa13 f38a 	uxtah	r3, r3, sl
 80095b6:	fb06 e202 	mla	r2, r6, r2, lr
 80095ba:	9300      	str	r3, [sp, #0]
 80095bc:	9b00      	ldr	r3, [sp, #0]
 80095be:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 80095c2:	b292      	uxth	r2, r2
 80095c4:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80095c8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80095cc:	f8bd 3000 	ldrh.w	r3, [sp]
 80095d0:	4581      	cmp	r9, r0
 80095d2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80095d6:	f84c 3b04 	str.w	r3, [ip], #4
 80095da:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80095de:	d2db      	bcs.n	8009598 <quorem+0x44>
 80095e0:	f855 300b 	ldr.w	r3, [r5, fp]
 80095e4:	b92b      	cbnz	r3, 80095f2 <quorem+0x9e>
 80095e6:	9b01      	ldr	r3, [sp, #4]
 80095e8:	3b04      	subs	r3, #4
 80095ea:	429d      	cmp	r5, r3
 80095ec:	461a      	mov	r2, r3
 80095ee:	d32e      	bcc.n	800964e <quorem+0xfa>
 80095f0:	613c      	str	r4, [r7, #16]
 80095f2:	4638      	mov	r0, r7
 80095f4:	f001 fca4 	bl	800af40 <__mcmp>
 80095f8:	2800      	cmp	r0, #0
 80095fa:	db24      	blt.n	8009646 <quorem+0xf2>
 80095fc:	3601      	adds	r6, #1
 80095fe:	4628      	mov	r0, r5
 8009600:	f04f 0c00 	mov.w	ip, #0
 8009604:	f858 2b04 	ldr.w	r2, [r8], #4
 8009608:	f8d0 e000 	ldr.w	lr, [r0]
 800960c:	b293      	uxth	r3, r2
 800960e:	ebac 0303 	sub.w	r3, ip, r3
 8009612:	0c12      	lsrs	r2, r2, #16
 8009614:	fa13 f38e 	uxtah	r3, r3, lr
 8009618:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800961c:	eb02 4223 	add.w	r2, r2, r3, asr #16
 8009620:	b29b      	uxth	r3, r3
 8009622:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009626:	45c1      	cmp	r9, r8
 8009628:	f840 3b04 	str.w	r3, [r0], #4
 800962c:	ea4f 4c22 	mov.w	ip, r2, asr #16
 8009630:	d2e8      	bcs.n	8009604 <quorem+0xb0>
 8009632:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8009636:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800963a:	b922      	cbnz	r2, 8009646 <quorem+0xf2>
 800963c:	3b04      	subs	r3, #4
 800963e:	429d      	cmp	r5, r3
 8009640:	461a      	mov	r2, r3
 8009642:	d30a      	bcc.n	800965a <quorem+0x106>
 8009644:	613c      	str	r4, [r7, #16]
 8009646:	4630      	mov	r0, r6
 8009648:	b003      	add	sp, #12
 800964a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800964e:	6812      	ldr	r2, [r2, #0]
 8009650:	3b04      	subs	r3, #4
 8009652:	2a00      	cmp	r2, #0
 8009654:	d1cc      	bne.n	80095f0 <quorem+0x9c>
 8009656:	3c01      	subs	r4, #1
 8009658:	e7c7      	b.n	80095ea <quorem+0x96>
 800965a:	6812      	ldr	r2, [r2, #0]
 800965c:	3b04      	subs	r3, #4
 800965e:	2a00      	cmp	r2, #0
 8009660:	d1f0      	bne.n	8009644 <quorem+0xf0>
 8009662:	3c01      	subs	r4, #1
 8009664:	e7eb      	b.n	800963e <quorem+0xea>
 8009666:	2000      	movs	r0, #0
 8009668:	e7ee      	b.n	8009648 <quorem+0xf4>
 800966a:	0000      	movs	r0, r0
 800966c:	0000      	movs	r0, r0
	...

08009670 <_dtoa_r>:
 8009670:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009674:	ed2d 8b04 	vpush	{d8-d9}
 8009678:	ec57 6b10 	vmov	r6, r7, d0
 800967c:	b093      	sub	sp, #76	; 0x4c
 800967e:	6a45      	ldr	r5, [r0, #36]	; 0x24
 8009680:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 8009684:	9106      	str	r1, [sp, #24]
 8009686:	ee10 aa10 	vmov	sl, s0
 800968a:	4604      	mov	r4, r0
 800968c:	9209      	str	r2, [sp, #36]	; 0x24
 800968e:	930c      	str	r3, [sp, #48]	; 0x30
 8009690:	46bb      	mov	fp, r7
 8009692:	b975      	cbnz	r5, 80096b2 <_dtoa_r+0x42>
 8009694:	2010      	movs	r0, #16
 8009696:	f001 f95f 	bl	800a958 <malloc>
 800969a:	4602      	mov	r2, r0
 800969c:	6260      	str	r0, [r4, #36]	; 0x24
 800969e:	b920      	cbnz	r0, 80096aa <_dtoa_r+0x3a>
 80096a0:	4ba7      	ldr	r3, [pc, #668]	; (8009940 <_dtoa_r+0x2d0>)
 80096a2:	21ea      	movs	r1, #234	; 0xea
 80096a4:	48a7      	ldr	r0, [pc, #668]	; (8009944 <_dtoa_r+0x2d4>)
 80096a6:	f7ff ff37 	bl	8009518 <__assert_func>
 80096aa:	e9c0 5501 	strd	r5, r5, [r0, #4]
 80096ae:	6005      	str	r5, [r0, #0]
 80096b0:	60c5      	str	r5, [r0, #12]
 80096b2:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096b4:	6819      	ldr	r1, [r3, #0]
 80096b6:	b151      	cbz	r1, 80096ce <_dtoa_r+0x5e>
 80096b8:	685a      	ldr	r2, [r3, #4]
 80096ba:	604a      	str	r2, [r1, #4]
 80096bc:	2301      	movs	r3, #1
 80096be:	4093      	lsls	r3, r2
 80096c0:	608b      	str	r3, [r1, #8]
 80096c2:	4620      	mov	r0, r4
 80096c4:	f001 f9b0 	bl	800aa28 <_Bfree>
 80096c8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 80096ca:	2200      	movs	r2, #0
 80096cc:	601a      	str	r2, [r3, #0]
 80096ce:	1e3b      	subs	r3, r7, #0
 80096d0:	bfaa      	itet	ge
 80096d2:	2300      	movge	r3, #0
 80096d4:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 80096d8:	f8c8 3000 	strge.w	r3, [r8]
 80096dc:	4b9a      	ldr	r3, [pc, #616]	; (8009948 <_dtoa_r+0x2d8>)
 80096de:	bfbc      	itt	lt
 80096e0:	2201      	movlt	r2, #1
 80096e2:	f8c8 2000 	strlt.w	r2, [r8]
 80096e6:	ea33 030b 	bics.w	r3, r3, fp
 80096ea:	d11b      	bne.n	8009724 <_dtoa_r+0xb4>
 80096ec:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 80096ee:	f242 730f 	movw	r3, #9999	; 0x270f
 80096f2:	6013      	str	r3, [r2, #0]
 80096f4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80096f8:	4333      	orrs	r3, r6
 80096fa:	f000 8592 	beq.w	800a222 <_dtoa_r+0xbb2>
 80096fe:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009700:	b963      	cbnz	r3, 800971c <_dtoa_r+0xac>
 8009702:	4b92      	ldr	r3, [pc, #584]	; (800994c <_dtoa_r+0x2dc>)
 8009704:	e022      	b.n	800974c <_dtoa_r+0xdc>
 8009706:	4b92      	ldr	r3, [pc, #584]	; (8009950 <_dtoa_r+0x2e0>)
 8009708:	9301      	str	r3, [sp, #4]
 800970a:	3308      	adds	r3, #8
 800970c:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800970e:	6013      	str	r3, [r2, #0]
 8009710:	9801      	ldr	r0, [sp, #4]
 8009712:	b013      	add	sp, #76	; 0x4c
 8009714:	ecbd 8b04 	vpop	{d8-d9}
 8009718:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800971c:	4b8b      	ldr	r3, [pc, #556]	; (800994c <_dtoa_r+0x2dc>)
 800971e:	9301      	str	r3, [sp, #4]
 8009720:	3303      	adds	r3, #3
 8009722:	e7f3      	b.n	800970c <_dtoa_r+0x9c>
 8009724:	2200      	movs	r2, #0
 8009726:	2300      	movs	r3, #0
 8009728:	4650      	mov	r0, sl
 800972a:	4659      	mov	r1, fp
 800972c:	f7f7 f9cc 	bl	8000ac8 <__aeabi_dcmpeq>
 8009730:	ec4b ab19 	vmov	d9, sl, fp
 8009734:	4680      	mov	r8, r0
 8009736:	b158      	cbz	r0, 8009750 <_dtoa_r+0xe0>
 8009738:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800973a:	2301      	movs	r3, #1
 800973c:	6013      	str	r3, [r2, #0]
 800973e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009740:	2b00      	cmp	r3, #0
 8009742:	f000 856b 	beq.w	800a21c <_dtoa_r+0xbac>
 8009746:	4883      	ldr	r0, [pc, #524]	; (8009954 <_dtoa_r+0x2e4>)
 8009748:	6018      	str	r0, [r3, #0]
 800974a:	1e43      	subs	r3, r0, #1
 800974c:	9301      	str	r3, [sp, #4]
 800974e:	e7df      	b.n	8009710 <_dtoa_r+0xa0>
 8009750:	ec4b ab10 	vmov	d0, sl, fp
 8009754:	aa10      	add	r2, sp, #64	; 0x40
 8009756:	a911      	add	r1, sp, #68	; 0x44
 8009758:	4620      	mov	r0, r4
 800975a:	f001 fd13 	bl	800b184 <__d2b>
 800975e:	f3cb 550a 	ubfx	r5, fp, #20, #11
 8009762:	ee08 0a10 	vmov	s16, r0
 8009766:	2d00      	cmp	r5, #0
 8009768:	f000 8084 	beq.w	8009874 <_dtoa_r+0x204>
 800976c:	ee19 3a90 	vmov	r3, s19
 8009770:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009774:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 8009778:	4656      	mov	r6, sl
 800977a:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800977e:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 8009782:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 8009786:	4b74      	ldr	r3, [pc, #464]	; (8009958 <_dtoa_r+0x2e8>)
 8009788:	2200      	movs	r2, #0
 800978a:	4630      	mov	r0, r6
 800978c:	4639      	mov	r1, r7
 800978e:	f7f6 fd7b 	bl	8000288 <__aeabi_dsub>
 8009792:	a365      	add	r3, pc, #404	; (adr r3, 8009928 <_dtoa_r+0x2b8>)
 8009794:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009798:	f7f6 ff2e 	bl	80005f8 <__aeabi_dmul>
 800979c:	a364      	add	r3, pc, #400	; (adr r3, 8009930 <_dtoa_r+0x2c0>)
 800979e:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097a2:	f7f6 fd73 	bl	800028c <__adddf3>
 80097a6:	4606      	mov	r6, r0
 80097a8:	4628      	mov	r0, r5
 80097aa:	460f      	mov	r7, r1
 80097ac:	f7f6 feba 	bl	8000524 <__aeabi_i2d>
 80097b0:	a361      	add	r3, pc, #388	; (adr r3, 8009938 <_dtoa_r+0x2c8>)
 80097b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b6:	f7f6 ff1f 	bl	80005f8 <__aeabi_dmul>
 80097ba:	4602      	mov	r2, r0
 80097bc:	460b      	mov	r3, r1
 80097be:	4630      	mov	r0, r6
 80097c0:	4639      	mov	r1, r7
 80097c2:	f7f6 fd63 	bl	800028c <__adddf3>
 80097c6:	4606      	mov	r6, r0
 80097c8:	460f      	mov	r7, r1
 80097ca:	f7f7 f9c5 	bl	8000b58 <__aeabi_d2iz>
 80097ce:	2200      	movs	r2, #0
 80097d0:	9000      	str	r0, [sp, #0]
 80097d2:	2300      	movs	r3, #0
 80097d4:	4630      	mov	r0, r6
 80097d6:	4639      	mov	r1, r7
 80097d8:	f7f7 f980 	bl	8000adc <__aeabi_dcmplt>
 80097dc:	b150      	cbz	r0, 80097f4 <_dtoa_r+0x184>
 80097de:	9800      	ldr	r0, [sp, #0]
 80097e0:	f7f6 fea0 	bl	8000524 <__aeabi_i2d>
 80097e4:	4632      	mov	r2, r6
 80097e6:	463b      	mov	r3, r7
 80097e8:	f7f7 f96e 	bl	8000ac8 <__aeabi_dcmpeq>
 80097ec:	b910      	cbnz	r0, 80097f4 <_dtoa_r+0x184>
 80097ee:	9b00      	ldr	r3, [sp, #0]
 80097f0:	3b01      	subs	r3, #1
 80097f2:	9300      	str	r3, [sp, #0]
 80097f4:	9b00      	ldr	r3, [sp, #0]
 80097f6:	2b16      	cmp	r3, #22
 80097f8:	d85a      	bhi.n	80098b0 <_dtoa_r+0x240>
 80097fa:	9a00      	ldr	r2, [sp, #0]
 80097fc:	4b57      	ldr	r3, [pc, #348]	; (800995c <_dtoa_r+0x2ec>)
 80097fe:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009802:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009806:	ec51 0b19 	vmov	r0, r1, d9
 800980a:	f7f7 f967 	bl	8000adc <__aeabi_dcmplt>
 800980e:	2800      	cmp	r0, #0
 8009810:	d050      	beq.n	80098b4 <_dtoa_r+0x244>
 8009812:	9b00      	ldr	r3, [sp, #0]
 8009814:	3b01      	subs	r3, #1
 8009816:	9300      	str	r3, [sp, #0]
 8009818:	2300      	movs	r3, #0
 800981a:	930b      	str	r3, [sp, #44]	; 0x2c
 800981c:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800981e:	1b5d      	subs	r5, r3, r5
 8009820:	1e6b      	subs	r3, r5, #1
 8009822:	9305      	str	r3, [sp, #20]
 8009824:	bf45      	ittet	mi
 8009826:	f1c5 0301 	rsbmi	r3, r5, #1
 800982a:	9304      	strmi	r3, [sp, #16]
 800982c:	2300      	movpl	r3, #0
 800982e:	2300      	movmi	r3, #0
 8009830:	bf4c      	ite	mi
 8009832:	9305      	strmi	r3, [sp, #20]
 8009834:	9304      	strpl	r3, [sp, #16]
 8009836:	9b00      	ldr	r3, [sp, #0]
 8009838:	2b00      	cmp	r3, #0
 800983a:	db3d      	blt.n	80098b8 <_dtoa_r+0x248>
 800983c:	9b05      	ldr	r3, [sp, #20]
 800983e:	9a00      	ldr	r2, [sp, #0]
 8009840:	920a      	str	r2, [sp, #40]	; 0x28
 8009842:	4413      	add	r3, r2
 8009844:	9305      	str	r3, [sp, #20]
 8009846:	2300      	movs	r3, #0
 8009848:	9307      	str	r3, [sp, #28]
 800984a:	9b06      	ldr	r3, [sp, #24]
 800984c:	2b09      	cmp	r3, #9
 800984e:	f200 8089 	bhi.w	8009964 <_dtoa_r+0x2f4>
 8009852:	2b05      	cmp	r3, #5
 8009854:	bfc4      	itt	gt
 8009856:	3b04      	subgt	r3, #4
 8009858:	9306      	strgt	r3, [sp, #24]
 800985a:	9b06      	ldr	r3, [sp, #24]
 800985c:	f1a3 0302 	sub.w	r3, r3, #2
 8009860:	bfcc      	ite	gt
 8009862:	2500      	movgt	r5, #0
 8009864:	2501      	movle	r5, #1
 8009866:	2b03      	cmp	r3, #3
 8009868:	f200 8087 	bhi.w	800997a <_dtoa_r+0x30a>
 800986c:	e8df f003 	tbb	[pc, r3]
 8009870:	59383a2d 	.word	0x59383a2d
 8009874:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 8009878:	441d      	add	r5, r3
 800987a:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800987e:	2b20      	cmp	r3, #32
 8009880:	bfc1      	itttt	gt
 8009882:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 8009886:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800988a:	fa0b f303 	lslgt.w	r3, fp, r3
 800988e:	fa26 f000 	lsrgt.w	r0, r6, r0
 8009892:	bfda      	itte	le
 8009894:	f1c3 0320 	rsble	r3, r3, #32
 8009898:	fa06 f003 	lslle.w	r0, r6, r3
 800989c:	4318      	orrgt	r0, r3
 800989e:	f7f6 fe31 	bl	8000504 <__aeabi_ui2d>
 80098a2:	2301      	movs	r3, #1
 80098a4:	4606      	mov	r6, r0
 80098a6:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 80098aa:	3d01      	subs	r5, #1
 80098ac:	930e      	str	r3, [sp, #56]	; 0x38
 80098ae:	e76a      	b.n	8009786 <_dtoa_r+0x116>
 80098b0:	2301      	movs	r3, #1
 80098b2:	e7b2      	b.n	800981a <_dtoa_r+0x1aa>
 80098b4:	900b      	str	r0, [sp, #44]	; 0x2c
 80098b6:	e7b1      	b.n	800981c <_dtoa_r+0x1ac>
 80098b8:	9b04      	ldr	r3, [sp, #16]
 80098ba:	9a00      	ldr	r2, [sp, #0]
 80098bc:	1a9b      	subs	r3, r3, r2
 80098be:	9304      	str	r3, [sp, #16]
 80098c0:	4253      	negs	r3, r2
 80098c2:	9307      	str	r3, [sp, #28]
 80098c4:	2300      	movs	r3, #0
 80098c6:	930a      	str	r3, [sp, #40]	; 0x28
 80098c8:	e7bf      	b.n	800984a <_dtoa_r+0x1da>
 80098ca:	2300      	movs	r3, #0
 80098cc:	9308      	str	r3, [sp, #32]
 80098ce:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	dc55      	bgt.n	8009980 <_dtoa_r+0x310>
 80098d4:	2301      	movs	r3, #1
 80098d6:	e9cd 3302 	strd	r3, r3, [sp, #8]
 80098da:	461a      	mov	r2, r3
 80098dc:	9209      	str	r2, [sp, #36]	; 0x24
 80098de:	e00c      	b.n	80098fa <_dtoa_r+0x28a>
 80098e0:	2301      	movs	r3, #1
 80098e2:	e7f3      	b.n	80098cc <_dtoa_r+0x25c>
 80098e4:	2300      	movs	r3, #0
 80098e6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80098e8:	9308      	str	r3, [sp, #32]
 80098ea:	9b00      	ldr	r3, [sp, #0]
 80098ec:	4413      	add	r3, r2
 80098ee:	9302      	str	r3, [sp, #8]
 80098f0:	3301      	adds	r3, #1
 80098f2:	2b01      	cmp	r3, #1
 80098f4:	9303      	str	r3, [sp, #12]
 80098f6:	bfb8      	it	lt
 80098f8:	2301      	movlt	r3, #1
 80098fa:	6a60      	ldr	r0, [r4, #36]	; 0x24
 80098fc:	2200      	movs	r2, #0
 80098fe:	6042      	str	r2, [r0, #4]
 8009900:	2204      	movs	r2, #4
 8009902:	f102 0614 	add.w	r6, r2, #20
 8009906:	429e      	cmp	r6, r3
 8009908:	6841      	ldr	r1, [r0, #4]
 800990a:	d93d      	bls.n	8009988 <_dtoa_r+0x318>
 800990c:	4620      	mov	r0, r4
 800990e:	f001 f84b 	bl	800a9a8 <_Balloc>
 8009912:	9001      	str	r0, [sp, #4]
 8009914:	2800      	cmp	r0, #0
 8009916:	d13b      	bne.n	8009990 <_dtoa_r+0x320>
 8009918:	4b11      	ldr	r3, [pc, #68]	; (8009960 <_dtoa_r+0x2f0>)
 800991a:	4602      	mov	r2, r0
 800991c:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 8009920:	e6c0      	b.n	80096a4 <_dtoa_r+0x34>
 8009922:	2301      	movs	r3, #1
 8009924:	e7df      	b.n	80098e6 <_dtoa_r+0x276>
 8009926:	bf00      	nop
 8009928:	636f4361 	.word	0x636f4361
 800992c:	3fd287a7 	.word	0x3fd287a7
 8009930:	8b60c8b3 	.word	0x8b60c8b3
 8009934:	3fc68a28 	.word	0x3fc68a28
 8009938:	509f79fb 	.word	0x509f79fb
 800993c:	3fd34413 	.word	0x3fd34413
 8009940:	0800c510 	.word	0x0800c510
 8009944:	0800c6ce 	.word	0x0800c6ce
 8009948:	7ff00000 	.word	0x7ff00000
 800994c:	0800c6ca 	.word	0x0800c6ca
 8009950:	0800c6c1 	.word	0x0800c6c1
 8009954:	0800c491 	.word	0x0800c491
 8009958:	3ff80000 	.word	0x3ff80000
 800995c:	0800c838 	.word	0x0800c838
 8009960:	0800c729 	.word	0x0800c729
 8009964:	2501      	movs	r5, #1
 8009966:	2300      	movs	r3, #0
 8009968:	9306      	str	r3, [sp, #24]
 800996a:	9508      	str	r5, [sp, #32]
 800996c:	f04f 33ff 	mov.w	r3, #4294967295
 8009970:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009974:	2200      	movs	r2, #0
 8009976:	2312      	movs	r3, #18
 8009978:	e7b0      	b.n	80098dc <_dtoa_r+0x26c>
 800997a:	2301      	movs	r3, #1
 800997c:	9308      	str	r3, [sp, #32]
 800997e:	e7f5      	b.n	800996c <_dtoa_r+0x2fc>
 8009980:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009982:	e9cd 3302 	strd	r3, r3, [sp, #8]
 8009986:	e7b8      	b.n	80098fa <_dtoa_r+0x28a>
 8009988:	3101      	adds	r1, #1
 800998a:	6041      	str	r1, [r0, #4]
 800998c:	0052      	lsls	r2, r2, #1
 800998e:	e7b8      	b.n	8009902 <_dtoa_r+0x292>
 8009990:	6a63      	ldr	r3, [r4, #36]	; 0x24
 8009992:	9a01      	ldr	r2, [sp, #4]
 8009994:	601a      	str	r2, [r3, #0]
 8009996:	9b03      	ldr	r3, [sp, #12]
 8009998:	2b0e      	cmp	r3, #14
 800999a:	f200 809d 	bhi.w	8009ad8 <_dtoa_r+0x468>
 800999e:	2d00      	cmp	r5, #0
 80099a0:	f000 809a 	beq.w	8009ad8 <_dtoa_r+0x468>
 80099a4:	9b00      	ldr	r3, [sp, #0]
 80099a6:	2b00      	cmp	r3, #0
 80099a8:	dd32      	ble.n	8009a10 <_dtoa_r+0x3a0>
 80099aa:	4ab7      	ldr	r2, [pc, #732]	; (8009c88 <_dtoa_r+0x618>)
 80099ac:	f003 030f 	and.w	r3, r3, #15
 80099b0:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 80099b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80099b8:	9b00      	ldr	r3, [sp, #0]
 80099ba:	05d8      	lsls	r0, r3, #23
 80099bc:	ea4f 1723 	mov.w	r7, r3, asr #4
 80099c0:	d516      	bpl.n	80099f0 <_dtoa_r+0x380>
 80099c2:	4bb2      	ldr	r3, [pc, #712]	; (8009c8c <_dtoa_r+0x61c>)
 80099c4:	ec51 0b19 	vmov	r0, r1, d9
 80099c8:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80099cc:	f7f6 ff3e 	bl	800084c <__aeabi_ddiv>
 80099d0:	f007 070f 	and.w	r7, r7, #15
 80099d4:	4682      	mov	sl, r0
 80099d6:	468b      	mov	fp, r1
 80099d8:	2503      	movs	r5, #3
 80099da:	4eac      	ldr	r6, [pc, #688]	; (8009c8c <_dtoa_r+0x61c>)
 80099dc:	b957      	cbnz	r7, 80099f4 <_dtoa_r+0x384>
 80099de:	4642      	mov	r2, r8
 80099e0:	464b      	mov	r3, r9
 80099e2:	4650      	mov	r0, sl
 80099e4:	4659      	mov	r1, fp
 80099e6:	f7f6 ff31 	bl	800084c <__aeabi_ddiv>
 80099ea:	4682      	mov	sl, r0
 80099ec:	468b      	mov	fp, r1
 80099ee:	e028      	b.n	8009a42 <_dtoa_r+0x3d2>
 80099f0:	2502      	movs	r5, #2
 80099f2:	e7f2      	b.n	80099da <_dtoa_r+0x36a>
 80099f4:	07f9      	lsls	r1, r7, #31
 80099f6:	d508      	bpl.n	8009a0a <_dtoa_r+0x39a>
 80099f8:	4640      	mov	r0, r8
 80099fa:	4649      	mov	r1, r9
 80099fc:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009a00:	f7f6 fdfa 	bl	80005f8 <__aeabi_dmul>
 8009a04:	3501      	adds	r5, #1
 8009a06:	4680      	mov	r8, r0
 8009a08:	4689      	mov	r9, r1
 8009a0a:	107f      	asrs	r7, r7, #1
 8009a0c:	3608      	adds	r6, #8
 8009a0e:	e7e5      	b.n	80099dc <_dtoa_r+0x36c>
 8009a10:	f000 809b 	beq.w	8009b4a <_dtoa_r+0x4da>
 8009a14:	9b00      	ldr	r3, [sp, #0]
 8009a16:	4f9d      	ldr	r7, [pc, #628]	; (8009c8c <_dtoa_r+0x61c>)
 8009a18:	425e      	negs	r6, r3
 8009a1a:	4b9b      	ldr	r3, [pc, #620]	; (8009c88 <_dtoa_r+0x618>)
 8009a1c:	f006 020f 	and.w	r2, r6, #15
 8009a20:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009a24:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a28:	ec51 0b19 	vmov	r0, r1, d9
 8009a2c:	f7f6 fde4 	bl	80005f8 <__aeabi_dmul>
 8009a30:	1136      	asrs	r6, r6, #4
 8009a32:	4682      	mov	sl, r0
 8009a34:	468b      	mov	fp, r1
 8009a36:	2300      	movs	r3, #0
 8009a38:	2502      	movs	r5, #2
 8009a3a:	2e00      	cmp	r6, #0
 8009a3c:	d17a      	bne.n	8009b34 <_dtoa_r+0x4c4>
 8009a3e:	2b00      	cmp	r3, #0
 8009a40:	d1d3      	bne.n	80099ea <_dtoa_r+0x37a>
 8009a42:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009a44:	2b00      	cmp	r3, #0
 8009a46:	f000 8082 	beq.w	8009b4e <_dtoa_r+0x4de>
 8009a4a:	4b91      	ldr	r3, [pc, #580]	; (8009c90 <_dtoa_r+0x620>)
 8009a4c:	2200      	movs	r2, #0
 8009a4e:	4650      	mov	r0, sl
 8009a50:	4659      	mov	r1, fp
 8009a52:	f7f7 f843 	bl	8000adc <__aeabi_dcmplt>
 8009a56:	2800      	cmp	r0, #0
 8009a58:	d079      	beq.n	8009b4e <_dtoa_r+0x4de>
 8009a5a:	9b03      	ldr	r3, [sp, #12]
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	d076      	beq.n	8009b4e <_dtoa_r+0x4de>
 8009a60:	9b02      	ldr	r3, [sp, #8]
 8009a62:	2b00      	cmp	r3, #0
 8009a64:	dd36      	ble.n	8009ad4 <_dtoa_r+0x464>
 8009a66:	9b00      	ldr	r3, [sp, #0]
 8009a68:	4650      	mov	r0, sl
 8009a6a:	4659      	mov	r1, fp
 8009a6c:	1e5f      	subs	r7, r3, #1
 8009a6e:	2200      	movs	r2, #0
 8009a70:	4b88      	ldr	r3, [pc, #544]	; (8009c94 <_dtoa_r+0x624>)
 8009a72:	f7f6 fdc1 	bl	80005f8 <__aeabi_dmul>
 8009a76:	9e02      	ldr	r6, [sp, #8]
 8009a78:	4682      	mov	sl, r0
 8009a7a:	468b      	mov	fp, r1
 8009a7c:	3501      	adds	r5, #1
 8009a7e:	4628      	mov	r0, r5
 8009a80:	f7f6 fd50 	bl	8000524 <__aeabi_i2d>
 8009a84:	4652      	mov	r2, sl
 8009a86:	465b      	mov	r3, fp
 8009a88:	f7f6 fdb6 	bl	80005f8 <__aeabi_dmul>
 8009a8c:	4b82      	ldr	r3, [pc, #520]	; (8009c98 <_dtoa_r+0x628>)
 8009a8e:	2200      	movs	r2, #0
 8009a90:	f7f6 fbfc 	bl	800028c <__adddf3>
 8009a94:	46d0      	mov	r8, sl
 8009a96:	46d9      	mov	r9, fp
 8009a98:	4682      	mov	sl, r0
 8009a9a:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 8009a9e:	2e00      	cmp	r6, #0
 8009aa0:	d158      	bne.n	8009b54 <_dtoa_r+0x4e4>
 8009aa2:	4b7e      	ldr	r3, [pc, #504]	; (8009c9c <_dtoa_r+0x62c>)
 8009aa4:	2200      	movs	r2, #0
 8009aa6:	4640      	mov	r0, r8
 8009aa8:	4649      	mov	r1, r9
 8009aaa:	f7f6 fbed 	bl	8000288 <__aeabi_dsub>
 8009aae:	4652      	mov	r2, sl
 8009ab0:	465b      	mov	r3, fp
 8009ab2:	4680      	mov	r8, r0
 8009ab4:	4689      	mov	r9, r1
 8009ab6:	f7f7 f82f 	bl	8000b18 <__aeabi_dcmpgt>
 8009aba:	2800      	cmp	r0, #0
 8009abc:	f040 8295 	bne.w	8009fea <_dtoa_r+0x97a>
 8009ac0:	4652      	mov	r2, sl
 8009ac2:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 8009ac6:	4640      	mov	r0, r8
 8009ac8:	4649      	mov	r1, r9
 8009aca:	f7f7 f807 	bl	8000adc <__aeabi_dcmplt>
 8009ace:	2800      	cmp	r0, #0
 8009ad0:	f040 8289 	bne.w	8009fe6 <_dtoa_r+0x976>
 8009ad4:	ec5b ab19 	vmov	sl, fp, d9
 8009ad8:	9b11      	ldr	r3, [sp, #68]	; 0x44
 8009ada:	2b00      	cmp	r3, #0
 8009adc:	f2c0 8148 	blt.w	8009d70 <_dtoa_r+0x700>
 8009ae0:	9a00      	ldr	r2, [sp, #0]
 8009ae2:	2a0e      	cmp	r2, #14
 8009ae4:	f300 8144 	bgt.w	8009d70 <_dtoa_r+0x700>
 8009ae8:	4b67      	ldr	r3, [pc, #412]	; (8009c88 <_dtoa_r+0x618>)
 8009aea:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009aee:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009af2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009af4:	2b00      	cmp	r3, #0
 8009af6:	f280 80d5 	bge.w	8009ca4 <_dtoa_r+0x634>
 8009afa:	9b03      	ldr	r3, [sp, #12]
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	f300 80d1 	bgt.w	8009ca4 <_dtoa_r+0x634>
 8009b02:	f040 826f 	bne.w	8009fe4 <_dtoa_r+0x974>
 8009b06:	4b65      	ldr	r3, [pc, #404]	; (8009c9c <_dtoa_r+0x62c>)
 8009b08:	2200      	movs	r2, #0
 8009b0a:	4640      	mov	r0, r8
 8009b0c:	4649      	mov	r1, r9
 8009b0e:	f7f6 fd73 	bl	80005f8 <__aeabi_dmul>
 8009b12:	4652      	mov	r2, sl
 8009b14:	465b      	mov	r3, fp
 8009b16:	f7f6 fff5 	bl	8000b04 <__aeabi_dcmpge>
 8009b1a:	9e03      	ldr	r6, [sp, #12]
 8009b1c:	4637      	mov	r7, r6
 8009b1e:	2800      	cmp	r0, #0
 8009b20:	f040 8245 	bne.w	8009fae <_dtoa_r+0x93e>
 8009b24:	9d01      	ldr	r5, [sp, #4]
 8009b26:	2331      	movs	r3, #49	; 0x31
 8009b28:	f805 3b01 	strb.w	r3, [r5], #1
 8009b2c:	9b00      	ldr	r3, [sp, #0]
 8009b2e:	3301      	adds	r3, #1
 8009b30:	9300      	str	r3, [sp, #0]
 8009b32:	e240      	b.n	8009fb6 <_dtoa_r+0x946>
 8009b34:	07f2      	lsls	r2, r6, #31
 8009b36:	d505      	bpl.n	8009b44 <_dtoa_r+0x4d4>
 8009b38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009b3c:	f7f6 fd5c 	bl	80005f8 <__aeabi_dmul>
 8009b40:	3501      	adds	r5, #1
 8009b42:	2301      	movs	r3, #1
 8009b44:	1076      	asrs	r6, r6, #1
 8009b46:	3708      	adds	r7, #8
 8009b48:	e777      	b.n	8009a3a <_dtoa_r+0x3ca>
 8009b4a:	2502      	movs	r5, #2
 8009b4c:	e779      	b.n	8009a42 <_dtoa_r+0x3d2>
 8009b4e:	9f00      	ldr	r7, [sp, #0]
 8009b50:	9e03      	ldr	r6, [sp, #12]
 8009b52:	e794      	b.n	8009a7e <_dtoa_r+0x40e>
 8009b54:	9901      	ldr	r1, [sp, #4]
 8009b56:	4b4c      	ldr	r3, [pc, #304]	; (8009c88 <_dtoa_r+0x618>)
 8009b58:	4431      	add	r1, r6
 8009b5a:	910d      	str	r1, [sp, #52]	; 0x34
 8009b5c:	9908      	ldr	r1, [sp, #32]
 8009b5e:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 8009b62:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8009b66:	2900      	cmp	r1, #0
 8009b68:	d043      	beq.n	8009bf2 <_dtoa_r+0x582>
 8009b6a:	494d      	ldr	r1, [pc, #308]	; (8009ca0 <_dtoa_r+0x630>)
 8009b6c:	2000      	movs	r0, #0
 8009b6e:	f7f6 fe6d 	bl	800084c <__aeabi_ddiv>
 8009b72:	4652      	mov	r2, sl
 8009b74:	465b      	mov	r3, fp
 8009b76:	f7f6 fb87 	bl	8000288 <__aeabi_dsub>
 8009b7a:	9d01      	ldr	r5, [sp, #4]
 8009b7c:	4682      	mov	sl, r0
 8009b7e:	468b      	mov	fp, r1
 8009b80:	4649      	mov	r1, r9
 8009b82:	4640      	mov	r0, r8
 8009b84:	f7f6 ffe8 	bl	8000b58 <__aeabi_d2iz>
 8009b88:	4606      	mov	r6, r0
 8009b8a:	f7f6 fccb 	bl	8000524 <__aeabi_i2d>
 8009b8e:	4602      	mov	r2, r0
 8009b90:	460b      	mov	r3, r1
 8009b92:	4640      	mov	r0, r8
 8009b94:	4649      	mov	r1, r9
 8009b96:	f7f6 fb77 	bl	8000288 <__aeabi_dsub>
 8009b9a:	3630      	adds	r6, #48	; 0x30
 8009b9c:	f805 6b01 	strb.w	r6, [r5], #1
 8009ba0:	4652      	mov	r2, sl
 8009ba2:	465b      	mov	r3, fp
 8009ba4:	4680      	mov	r8, r0
 8009ba6:	4689      	mov	r9, r1
 8009ba8:	f7f6 ff98 	bl	8000adc <__aeabi_dcmplt>
 8009bac:	2800      	cmp	r0, #0
 8009bae:	d163      	bne.n	8009c78 <_dtoa_r+0x608>
 8009bb0:	4642      	mov	r2, r8
 8009bb2:	464b      	mov	r3, r9
 8009bb4:	4936      	ldr	r1, [pc, #216]	; (8009c90 <_dtoa_r+0x620>)
 8009bb6:	2000      	movs	r0, #0
 8009bb8:	f7f6 fb66 	bl	8000288 <__aeabi_dsub>
 8009bbc:	4652      	mov	r2, sl
 8009bbe:	465b      	mov	r3, fp
 8009bc0:	f7f6 ff8c 	bl	8000adc <__aeabi_dcmplt>
 8009bc4:	2800      	cmp	r0, #0
 8009bc6:	f040 80b5 	bne.w	8009d34 <_dtoa_r+0x6c4>
 8009bca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bcc:	429d      	cmp	r5, r3
 8009bce:	d081      	beq.n	8009ad4 <_dtoa_r+0x464>
 8009bd0:	4b30      	ldr	r3, [pc, #192]	; (8009c94 <_dtoa_r+0x624>)
 8009bd2:	2200      	movs	r2, #0
 8009bd4:	4650      	mov	r0, sl
 8009bd6:	4659      	mov	r1, fp
 8009bd8:	f7f6 fd0e 	bl	80005f8 <__aeabi_dmul>
 8009bdc:	4b2d      	ldr	r3, [pc, #180]	; (8009c94 <_dtoa_r+0x624>)
 8009bde:	4682      	mov	sl, r0
 8009be0:	468b      	mov	fp, r1
 8009be2:	4640      	mov	r0, r8
 8009be4:	4649      	mov	r1, r9
 8009be6:	2200      	movs	r2, #0
 8009be8:	f7f6 fd06 	bl	80005f8 <__aeabi_dmul>
 8009bec:	4680      	mov	r8, r0
 8009bee:	4689      	mov	r9, r1
 8009bf0:	e7c6      	b.n	8009b80 <_dtoa_r+0x510>
 8009bf2:	4650      	mov	r0, sl
 8009bf4:	4659      	mov	r1, fp
 8009bf6:	f7f6 fcff 	bl	80005f8 <__aeabi_dmul>
 8009bfa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009bfc:	9d01      	ldr	r5, [sp, #4]
 8009bfe:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c00:	4682      	mov	sl, r0
 8009c02:	468b      	mov	fp, r1
 8009c04:	4649      	mov	r1, r9
 8009c06:	4640      	mov	r0, r8
 8009c08:	f7f6 ffa6 	bl	8000b58 <__aeabi_d2iz>
 8009c0c:	4606      	mov	r6, r0
 8009c0e:	f7f6 fc89 	bl	8000524 <__aeabi_i2d>
 8009c12:	3630      	adds	r6, #48	; 0x30
 8009c14:	4602      	mov	r2, r0
 8009c16:	460b      	mov	r3, r1
 8009c18:	4640      	mov	r0, r8
 8009c1a:	4649      	mov	r1, r9
 8009c1c:	f7f6 fb34 	bl	8000288 <__aeabi_dsub>
 8009c20:	f805 6b01 	strb.w	r6, [r5], #1
 8009c24:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009c26:	429d      	cmp	r5, r3
 8009c28:	4680      	mov	r8, r0
 8009c2a:	4689      	mov	r9, r1
 8009c2c:	f04f 0200 	mov.w	r2, #0
 8009c30:	d124      	bne.n	8009c7c <_dtoa_r+0x60c>
 8009c32:	4b1b      	ldr	r3, [pc, #108]	; (8009ca0 <_dtoa_r+0x630>)
 8009c34:	4650      	mov	r0, sl
 8009c36:	4659      	mov	r1, fp
 8009c38:	f7f6 fb28 	bl	800028c <__adddf3>
 8009c3c:	4602      	mov	r2, r0
 8009c3e:	460b      	mov	r3, r1
 8009c40:	4640      	mov	r0, r8
 8009c42:	4649      	mov	r1, r9
 8009c44:	f7f6 ff68 	bl	8000b18 <__aeabi_dcmpgt>
 8009c48:	2800      	cmp	r0, #0
 8009c4a:	d173      	bne.n	8009d34 <_dtoa_r+0x6c4>
 8009c4c:	4652      	mov	r2, sl
 8009c4e:	465b      	mov	r3, fp
 8009c50:	4913      	ldr	r1, [pc, #76]	; (8009ca0 <_dtoa_r+0x630>)
 8009c52:	2000      	movs	r0, #0
 8009c54:	f7f6 fb18 	bl	8000288 <__aeabi_dsub>
 8009c58:	4602      	mov	r2, r0
 8009c5a:	460b      	mov	r3, r1
 8009c5c:	4640      	mov	r0, r8
 8009c5e:	4649      	mov	r1, r9
 8009c60:	f7f6 ff3c 	bl	8000adc <__aeabi_dcmplt>
 8009c64:	2800      	cmp	r0, #0
 8009c66:	f43f af35 	beq.w	8009ad4 <_dtoa_r+0x464>
 8009c6a:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 8009c6c:	1e6b      	subs	r3, r5, #1
 8009c6e:	930f      	str	r3, [sp, #60]	; 0x3c
 8009c70:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 8009c74:	2b30      	cmp	r3, #48	; 0x30
 8009c76:	d0f8      	beq.n	8009c6a <_dtoa_r+0x5fa>
 8009c78:	9700      	str	r7, [sp, #0]
 8009c7a:	e049      	b.n	8009d10 <_dtoa_r+0x6a0>
 8009c7c:	4b05      	ldr	r3, [pc, #20]	; (8009c94 <_dtoa_r+0x624>)
 8009c7e:	f7f6 fcbb 	bl	80005f8 <__aeabi_dmul>
 8009c82:	4680      	mov	r8, r0
 8009c84:	4689      	mov	r9, r1
 8009c86:	e7bd      	b.n	8009c04 <_dtoa_r+0x594>
 8009c88:	0800c838 	.word	0x0800c838
 8009c8c:	0800c810 	.word	0x0800c810
 8009c90:	3ff00000 	.word	0x3ff00000
 8009c94:	40240000 	.word	0x40240000
 8009c98:	401c0000 	.word	0x401c0000
 8009c9c:	40140000 	.word	0x40140000
 8009ca0:	3fe00000 	.word	0x3fe00000
 8009ca4:	9d01      	ldr	r5, [sp, #4]
 8009ca6:	4656      	mov	r6, sl
 8009ca8:	465f      	mov	r7, fp
 8009caa:	4642      	mov	r2, r8
 8009cac:	464b      	mov	r3, r9
 8009cae:	4630      	mov	r0, r6
 8009cb0:	4639      	mov	r1, r7
 8009cb2:	f7f6 fdcb 	bl	800084c <__aeabi_ddiv>
 8009cb6:	f7f6 ff4f 	bl	8000b58 <__aeabi_d2iz>
 8009cba:	4682      	mov	sl, r0
 8009cbc:	f7f6 fc32 	bl	8000524 <__aeabi_i2d>
 8009cc0:	4642      	mov	r2, r8
 8009cc2:	464b      	mov	r3, r9
 8009cc4:	f7f6 fc98 	bl	80005f8 <__aeabi_dmul>
 8009cc8:	4602      	mov	r2, r0
 8009cca:	460b      	mov	r3, r1
 8009ccc:	4630      	mov	r0, r6
 8009cce:	4639      	mov	r1, r7
 8009cd0:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 8009cd4:	f7f6 fad8 	bl	8000288 <__aeabi_dsub>
 8009cd8:	f805 6b01 	strb.w	r6, [r5], #1
 8009cdc:	9e01      	ldr	r6, [sp, #4]
 8009cde:	9f03      	ldr	r7, [sp, #12]
 8009ce0:	1bae      	subs	r6, r5, r6
 8009ce2:	42b7      	cmp	r7, r6
 8009ce4:	4602      	mov	r2, r0
 8009ce6:	460b      	mov	r3, r1
 8009ce8:	d135      	bne.n	8009d56 <_dtoa_r+0x6e6>
 8009cea:	f7f6 facf 	bl	800028c <__adddf3>
 8009cee:	4642      	mov	r2, r8
 8009cf0:	464b      	mov	r3, r9
 8009cf2:	4606      	mov	r6, r0
 8009cf4:	460f      	mov	r7, r1
 8009cf6:	f7f6 ff0f 	bl	8000b18 <__aeabi_dcmpgt>
 8009cfa:	b9d0      	cbnz	r0, 8009d32 <_dtoa_r+0x6c2>
 8009cfc:	4642      	mov	r2, r8
 8009cfe:	464b      	mov	r3, r9
 8009d00:	4630      	mov	r0, r6
 8009d02:	4639      	mov	r1, r7
 8009d04:	f7f6 fee0 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d08:	b110      	cbz	r0, 8009d10 <_dtoa_r+0x6a0>
 8009d0a:	f01a 0f01 	tst.w	sl, #1
 8009d0e:	d110      	bne.n	8009d32 <_dtoa_r+0x6c2>
 8009d10:	4620      	mov	r0, r4
 8009d12:	ee18 1a10 	vmov	r1, s16
 8009d16:	f000 fe87 	bl	800aa28 <_Bfree>
 8009d1a:	2300      	movs	r3, #0
 8009d1c:	9800      	ldr	r0, [sp, #0]
 8009d1e:	702b      	strb	r3, [r5, #0]
 8009d20:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 8009d22:	3001      	adds	r0, #1
 8009d24:	6018      	str	r0, [r3, #0]
 8009d26:	9b21      	ldr	r3, [sp, #132]	; 0x84
 8009d28:	2b00      	cmp	r3, #0
 8009d2a:	f43f acf1 	beq.w	8009710 <_dtoa_r+0xa0>
 8009d2e:	601d      	str	r5, [r3, #0]
 8009d30:	e4ee      	b.n	8009710 <_dtoa_r+0xa0>
 8009d32:	9f00      	ldr	r7, [sp, #0]
 8009d34:	462b      	mov	r3, r5
 8009d36:	461d      	mov	r5, r3
 8009d38:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8009d3c:	2a39      	cmp	r2, #57	; 0x39
 8009d3e:	d106      	bne.n	8009d4e <_dtoa_r+0x6de>
 8009d40:	9a01      	ldr	r2, [sp, #4]
 8009d42:	429a      	cmp	r2, r3
 8009d44:	d1f7      	bne.n	8009d36 <_dtoa_r+0x6c6>
 8009d46:	9901      	ldr	r1, [sp, #4]
 8009d48:	2230      	movs	r2, #48	; 0x30
 8009d4a:	3701      	adds	r7, #1
 8009d4c:	700a      	strb	r2, [r1, #0]
 8009d4e:	781a      	ldrb	r2, [r3, #0]
 8009d50:	3201      	adds	r2, #1
 8009d52:	701a      	strb	r2, [r3, #0]
 8009d54:	e790      	b.n	8009c78 <_dtoa_r+0x608>
 8009d56:	4ba6      	ldr	r3, [pc, #664]	; (8009ff0 <_dtoa_r+0x980>)
 8009d58:	2200      	movs	r2, #0
 8009d5a:	f7f6 fc4d 	bl	80005f8 <__aeabi_dmul>
 8009d5e:	2200      	movs	r2, #0
 8009d60:	2300      	movs	r3, #0
 8009d62:	4606      	mov	r6, r0
 8009d64:	460f      	mov	r7, r1
 8009d66:	f7f6 feaf 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d6a:	2800      	cmp	r0, #0
 8009d6c:	d09d      	beq.n	8009caa <_dtoa_r+0x63a>
 8009d6e:	e7cf      	b.n	8009d10 <_dtoa_r+0x6a0>
 8009d70:	9a08      	ldr	r2, [sp, #32]
 8009d72:	2a00      	cmp	r2, #0
 8009d74:	f000 80d7 	beq.w	8009f26 <_dtoa_r+0x8b6>
 8009d78:	9a06      	ldr	r2, [sp, #24]
 8009d7a:	2a01      	cmp	r2, #1
 8009d7c:	f300 80ba 	bgt.w	8009ef4 <_dtoa_r+0x884>
 8009d80:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8009d82:	2a00      	cmp	r2, #0
 8009d84:	f000 80b2 	beq.w	8009eec <_dtoa_r+0x87c>
 8009d88:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8009d8c:	9e07      	ldr	r6, [sp, #28]
 8009d8e:	9d04      	ldr	r5, [sp, #16]
 8009d90:	9a04      	ldr	r2, [sp, #16]
 8009d92:	441a      	add	r2, r3
 8009d94:	9204      	str	r2, [sp, #16]
 8009d96:	9a05      	ldr	r2, [sp, #20]
 8009d98:	2101      	movs	r1, #1
 8009d9a:	441a      	add	r2, r3
 8009d9c:	4620      	mov	r0, r4
 8009d9e:	9205      	str	r2, [sp, #20]
 8009da0:	f000 ff44 	bl	800ac2c <__i2b>
 8009da4:	4607      	mov	r7, r0
 8009da6:	2d00      	cmp	r5, #0
 8009da8:	dd0c      	ble.n	8009dc4 <_dtoa_r+0x754>
 8009daa:	9b05      	ldr	r3, [sp, #20]
 8009dac:	2b00      	cmp	r3, #0
 8009dae:	dd09      	ble.n	8009dc4 <_dtoa_r+0x754>
 8009db0:	42ab      	cmp	r3, r5
 8009db2:	9a04      	ldr	r2, [sp, #16]
 8009db4:	bfa8      	it	ge
 8009db6:	462b      	movge	r3, r5
 8009db8:	1ad2      	subs	r2, r2, r3
 8009dba:	9204      	str	r2, [sp, #16]
 8009dbc:	9a05      	ldr	r2, [sp, #20]
 8009dbe:	1aed      	subs	r5, r5, r3
 8009dc0:	1ad3      	subs	r3, r2, r3
 8009dc2:	9305      	str	r3, [sp, #20]
 8009dc4:	9b07      	ldr	r3, [sp, #28]
 8009dc6:	b31b      	cbz	r3, 8009e10 <_dtoa_r+0x7a0>
 8009dc8:	9b08      	ldr	r3, [sp, #32]
 8009dca:	2b00      	cmp	r3, #0
 8009dcc:	f000 80af 	beq.w	8009f2e <_dtoa_r+0x8be>
 8009dd0:	2e00      	cmp	r6, #0
 8009dd2:	dd13      	ble.n	8009dfc <_dtoa_r+0x78c>
 8009dd4:	4639      	mov	r1, r7
 8009dd6:	4632      	mov	r2, r6
 8009dd8:	4620      	mov	r0, r4
 8009dda:	f000 ffe7 	bl	800adac <__pow5mult>
 8009dde:	ee18 2a10 	vmov	r2, s16
 8009de2:	4601      	mov	r1, r0
 8009de4:	4607      	mov	r7, r0
 8009de6:	4620      	mov	r0, r4
 8009de8:	f000 ff36 	bl	800ac58 <__multiply>
 8009dec:	ee18 1a10 	vmov	r1, s16
 8009df0:	4680      	mov	r8, r0
 8009df2:	4620      	mov	r0, r4
 8009df4:	f000 fe18 	bl	800aa28 <_Bfree>
 8009df8:	ee08 8a10 	vmov	s16, r8
 8009dfc:	9b07      	ldr	r3, [sp, #28]
 8009dfe:	1b9a      	subs	r2, r3, r6
 8009e00:	d006      	beq.n	8009e10 <_dtoa_r+0x7a0>
 8009e02:	ee18 1a10 	vmov	r1, s16
 8009e06:	4620      	mov	r0, r4
 8009e08:	f000 ffd0 	bl	800adac <__pow5mult>
 8009e0c:	ee08 0a10 	vmov	s16, r0
 8009e10:	2101      	movs	r1, #1
 8009e12:	4620      	mov	r0, r4
 8009e14:	f000 ff0a 	bl	800ac2c <__i2b>
 8009e18:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009e1a:	2b00      	cmp	r3, #0
 8009e1c:	4606      	mov	r6, r0
 8009e1e:	f340 8088 	ble.w	8009f32 <_dtoa_r+0x8c2>
 8009e22:	461a      	mov	r2, r3
 8009e24:	4601      	mov	r1, r0
 8009e26:	4620      	mov	r0, r4
 8009e28:	f000 ffc0 	bl	800adac <__pow5mult>
 8009e2c:	9b06      	ldr	r3, [sp, #24]
 8009e2e:	2b01      	cmp	r3, #1
 8009e30:	4606      	mov	r6, r0
 8009e32:	f340 8081 	ble.w	8009f38 <_dtoa_r+0x8c8>
 8009e36:	f04f 0800 	mov.w	r8, #0
 8009e3a:	6933      	ldr	r3, [r6, #16]
 8009e3c:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 8009e40:	6918      	ldr	r0, [r3, #16]
 8009e42:	f000 fea3 	bl	800ab8c <__hi0bits>
 8009e46:	f1c0 0020 	rsb	r0, r0, #32
 8009e4a:	9b05      	ldr	r3, [sp, #20]
 8009e4c:	4418      	add	r0, r3
 8009e4e:	f010 001f 	ands.w	r0, r0, #31
 8009e52:	f000 8092 	beq.w	8009f7a <_dtoa_r+0x90a>
 8009e56:	f1c0 0320 	rsb	r3, r0, #32
 8009e5a:	2b04      	cmp	r3, #4
 8009e5c:	f340 808a 	ble.w	8009f74 <_dtoa_r+0x904>
 8009e60:	f1c0 001c 	rsb	r0, r0, #28
 8009e64:	9b04      	ldr	r3, [sp, #16]
 8009e66:	4403      	add	r3, r0
 8009e68:	9304      	str	r3, [sp, #16]
 8009e6a:	9b05      	ldr	r3, [sp, #20]
 8009e6c:	4403      	add	r3, r0
 8009e6e:	4405      	add	r5, r0
 8009e70:	9305      	str	r3, [sp, #20]
 8009e72:	9b04      	ldr	r3, [sp, #16]
 8009e74:	2b00      	cmp	r3, #0
 8009e76:	dd07      	ble.n	8009e88 <_dtoa_r+0x818>
 8009e78:	ee18 1a10 	vmov	r1, s16
 8009e7c:	461a      	mov	r2, r3
 8009e7e:	4620      	mov	r0, r4
 8009e80:	f000 ffee 	bl	800ae60 <__lshift>
 8009e84:	ee08 0a10 	vmov	s16, r0
 8009e88:	9b05      	ldr	r3, [sp, #20]
 8009e8a:	2b00      	cmp	r3, #0
 8009e8c:	dd05      	ble.n	8009e9a <_dtoa_r+0x82a>
 8009e8e:	4631      	mov	r1, r6
 8009e90:	461a      	mov	r2, r3
 8009e92:	4620      	mov	r0, r4
 8009e94:	f000 ffe4 	bl	800ae60 <__lshift>
 8009e98:	4606      	mov	r6, r0
 8009e9a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009e9c:	2b00      	cmp	r3, #0
 8009e9e:	d06e      	beq.n	8009f7e <_dtoa_r+0x90e>
 8009ea0:	ee18 0a10 	vmov	r0, s16
 8009ea4:	4631      	mov	r1, r6
 8009ea6:	f001 f84b 	bl	800af40 <__mcmp>
 8009eaa:	2800      	cmp	r0, #0
 8009eac:	da67      	bge.n	8009f7e <_dtoa_r+0x90e>
 8009eae:	9b00      	ldr	r3, [sp, #0]
 8009eb0:	3b01      	subs	r3, #1
 8009eb2:	ee18 1a10 	vmov	r1, s16
 8009eb6:	9300      	str	r3, [sp, #0]
 8009eb8:	220a      	movs	r2, #10
 8009eba:	2300      	movs	r3, #0
 8009ebc:	4620      	mov	r0, r4
 8009ebe:	f000 fdd5 	bl	800aa6c <__multadd>
 8009ec2:	9b08      	ldr	r3, [sp, #32]
 8009ec4:	ee08 0a10 	vmov	s16, r0
 8009ec8:	2b00      	cmp	r3, #0
 8009eca:	f000 81b1 	beq.w	800a230 <_dtoa_r+0xbc0>
 8009ece:	2300      	movs	r3, #0
 8009ed0:	4639      	mov	r1, r7
 8009ed2:	220a      	movs	r2, #10
 8009ed4:	4620      	mov	r0, r4
 8009ed6:	f000 fdc9 	bl	800aa6c <__multadd>
 8009eda:	9b02      	ldr	r3, [sp, #8]
 8009edc:	2b00      	cmp	r3, #0
 8009ede:	4607      	mov	r7, r0
 8009ee0:	f300 808e 	bgt.w	800a000 <_dtoa_r+0x990>
 8009ee4:	9b06      	ldr	r3, [sp, #24]
 8009ee6:	2b02      	cmp	r3, #2
 8009ee8:	dc51      	bgt.n	8009f8e <_dtoa_r+0x91e>
 8009eea:	e089      	b.n	800a000 <_dtoa_r+0x990>
 8009eec:	9b10      	ldr	r3, [sp, #64]	; 0x40
 8009eee:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8009ef2:	e74b      	b.n	8009d8c <_dtoa_r+0x71c>
 8009ef4:	9b03      	ldr	r3, [sp, #12]
 8009ef6:	1e5e      	subs	r6, r3, #1
 8009ef8:	9b07      	ldr	r3, [sp, #28]
 8009efa:	42b3      	cmp	r3, r6
 8009efc:	bfbf      	itttt	lt
 8009efe:	9b07      	ldrlt	r3, [sp, #28]
 8009f00:	9607      	strlt	r6, [sp, #28]
 8009f02:	1af2      	sublt	r2, r6, r3
 8009f04:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8009f06:	bfb6      	itet	lt
 8009f08:	189b      	addlt	r3, r3, r2
 8009f0a:	1b9e      	subge	r6, r3, r6
 8009f0c:	930a      	strlt	r3, [sp, #40]	; 0x28
 8009f0e:	9b03      	ldr	r3, [sp, #12]
 8009f10:	bfb8      	it	lt
 8009f12:	2600      	movlt	r6, #0
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	bfb7      	itett	lt
 8009f18:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 8009f1c:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 8009f20:	1a9d      	sublt	r5, r3, r2
 8009f22:	2300      	movlt	r3, #0
 8009f24:	e734      	b.n	8009d90 <_dtoa_r+0x720>
 8009f26:	9e07      	ldr	r6, [sp, #28]
 8009f28:	9d04      	ldr	r5, [sp, #16]
 8009f2a:	9f08      	ldr	r7, [sp, #32]
 8009f2c:	e73b      	b.n	8009da6 <_dtoa_r+0x736>
 8009f2e:	9a07      	ldr	r2, [sp, #28]
 8009f30:	e767      	b.n	8009e02 <_dtoa_r+0x792>
 8009f32:	9b06      	ldr	r3, [sp, #24]
 8009f34:	2b01      	cmp	r3, #1
 8009f36:	dc18      	bgt.n	8009f6a <_dtoa_r+0x8fa>
 8009f38:	f1ba 0f00 	cmp.w	sl, #0
 8009f3c:	d115      	bne.n	8009f6a <_dtoa_r+0x8fa>
 8009f3e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009f42:	b993      	cbnz	r3, 8009f6a <_dtoa_r+0x8fa>
 8009f44:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009f48:	0d1b      	lsrs	r3, r3, #20
 8009f4a:	051b      	lsls	r3, r3, #20
 8009f4c:	b183      	cbz	r3, 8009f70 <_dtoa_r+0x900>
 8009f4e:	9b04      	ldr	r3, [sp, #16]
 8009f50:	3301      	adds	r3, #1
 8009f52:	9304      	str	r3, [sp, #16]
 8009f54:	9b05      	ldr	r3, [sp, #20]
 8009f56:	3301      	adds	r3, #1
 8009f58:	9305      	str	r3, [sp, #20]
 8009f5a:	f04f 0801 	mov.w	r8, #1
 8009f5e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009f60:	2b00      	cmp	r3, #0
 8009f62:	f47f af6a 	bne.w	8009e3a <_dtoa_r+0x7ca>
 8009f66:	2001      	movs	r0, #1
 8009f68:	e76f      	b.n	8009e4a <_dtoa_r+0x7da>
 8009f6a:	f04f 0800 	mov.w	r8, #0
 8009f6e:	e7f6      	b.n	8009f5e <_dtoa_r+0x8ee>
 8009f70:	4698      	mov	r8, r3
 8009f72:	e7f4      	b.n	8009f5e <_dtoa_r+0x8ee>
 8009f74:	f43f af7d 	beq.w	8009e72 <_dtoa_r+0x802>
 8009f78:	4618      	mov	r0, r3
 8009f7a:	301c      	adds	r0, #28
 8009f7c:	e772      	b.n	8009e64 <_dtoa_r+0x7f4>
 8009f7e:	9b03      	ldr	r3, [sp, #12]
 8009f80:	2b00      	cmp	r3, #0
 8009f82:	dc37      	bgt.n	8009ff4 <_dtoa_r+0x984>
 8009f84:	9b06      	ldr	r3, [sp, #24]
 8009f86:	2b02      	cmp	r3, #2
 8009f88:	dd34      	ble.n	8009ff4 <_dtoa_r+0x984>
 8009f8a:	9b03      	ldr	r3, [sp, #12]
 8009f8c:	9302      	str	r3, [sp, #8]
 8009f8e:	9b02      	ldr	r3, [sp, #8]
 8009f90:	b96b      	cbnz	r3, 8009fae <_dtoa_r+0x93e>
 8009f92:	4631      	mov	r1, r6
 8009f94:	2205      	movs	r2, #5
 8009f96:	4620      	mov	r0, r4
 8009f98:	f000 fd68 	bl	800aa6c <__multadd>
 8009f9c:	4601      	mov	r1, r0
 8009f9e:	4606      	mov	r6, r0
 8009fa0:	ee18 0a10 	vmov	r0, s16
 8009fa4:	f000 ffcc 	bl	800af40 <__mcmp>
 8009fa8:	2800      	cmp	r0, #0
 8009faa:	f73f adbb 	bgt.w	8009b24 <_dtoa_r+0x4b4>
 8009fae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009fb0:	9d01      	ldr	r5, [sp, #4]
 8009fb2:	43db      	mvns	r3, r3
 8009fb4:	9300      	str	r3, [sp, #0]
 8009fb6:	f04f 0800 	mov.w	r8, #0
 8009fba:	4631      	mov	r1, r6
 8009fbc:	4620      	mov	r0, r4
 8009fbe:	f000 fd33 	bl	800aa28 <_Bfree>
 8009fc2:	2f00      	cmp	r7, #0
 8009fc4:	f43f aea4 	beq.w	8009d10 <_dtoa_r+0x6a0>
 8009fc8:	f1b8 0f00 	cmp.w	r8, #0
 8009fcc:	d005      	beq.n	8009fda <_dtoa_r+0x96a>
 8009fce:	45b8      	cmp	r8, r7
 8009fd0:	d003      	beq.n	8009fda <_dtoa_r+0x96a>
 8009fd2:	4641      	mov	r1, r8
 8009fd4:	4620      	mov	r0, r4
 8009fd6:	f000 fd27 	bl	800aa28 <_Bfree>
 8009fda:	4639      	mov	r1, r7
 8009fdc:	4620      	mov	r0, r4
 8009fde:	f000 fd23 	bl	800aa28 <_Bfree>
 8009fe2:	e695      	b.n	8009d10 <_dtoa_r+0x6a0>
 8009fe4:	2600      	movs	r6, #0
 8009fe6:	4637      	mov	r7, r6
 8009fe8:	e7e1      	b.n	8009fae <_dtoa_r+0x93e>
 8009fea:	9700      	str	r7, [sp, #0]
 8009fec:	4637      	mov	r7, r6
 8009fee:	e599      	b.n	8009b24 <_dtoa_r+0x4b4>
 8009ff0:	40240000 	.word	0x40240000
 8009ff4:	9b08      	ldr	r3, [sp, #32]
 8009ff6:	2b00      	cmp	r3, #0
 8009ff8:	f000 80ca 	beq.w	800a190 <_dtoa_r+0xb20>
 8009ffc:	9b03      	ldr	r3, [sp, #12]
 8009ffe:	9302      	str	r3, [sp, #8]
 800a000:	2d00      	cmp	r5, #0
 800a002:	dd05      	ble.n	800a010 <_dtoa_r+0x9a0>
 800a004:	4639      	mov	r1, r7
 800a006:	462a      	mov	r2, r5
 800a008:	4620      	mov	r0, r4
 800a00a:	f000 ff29 	bl	800ae60 <__lshift>
 800a00e:	4607      	mov	r7, r0
 800a010:	f1b8 0f00 	cmp.w	r8, #0
 800a014:	d05b      	beq.n	800a0ce <_dtoa_r+0xa5e>
 800a016:	6879      	ldr	r1, [r7, #4]
 800a018:	4620      	mov	r0, r4
 800a01a:	f000 fcc5 	bl	800a9a8 <_Balloc>
 800a01e:	4605      	mov	r5, r0
 800a020:	b928      	cbnz	r0, 800a02e <_dtoa_r+0x9be>
 800a022:	4b87      	ldr	r3, [pc, #540]	; (800a240 <_dtoa_r+0xbd0>)
 800a024:	4602      	mov	r2, r0
 800a026:	f240 21ea 	movw	r1, #746	; 0x2ea
 800a02a:	f7ff bb3b 	b.w	80096a4 <_dtoa_r+0x34>
 800a02e:	693a      	ldr	r2, [r7, #16]
 800a030:	3202      	adds	r2, #2
 800a032:	0092      	lsls	r2, r2, #2
 800a034:	f107 010c 	add.w	r1, r7, #12
 800a038:	300c      	adds	r0, #12
 800a03a:	f000 fca7 	bl	800a98c <memcpy>
 800a03e:	2201      	movs	r2, #1
 800a040:	4629      	mov	r1, r5
 800a042:	4620      	mov	r0, r4
 800a044:	f000 ff0c 	bl	800ae60 <__lshift>
 800a048:	9b01      	ldr	r3, [sp, #4]
 800a04a:	f103 0901 	add.w	r9, r3, #1
 800a04e:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800a052:	4413      	add	r3, r2
 800a054:	9305      	str	r3, [sp, #20]
 800a056:	f00a 0301 	and.w	r3, sl, #1
 800a05a:	46b8      	mov	r8, r7
 800a05c:	9304      	str	r3, [sp, #16]
 800a05e:	4607      	mov	r7, r0
 800a060:	4631      	mov	r1, r6
 800a062:	ee18 0a10 	vmov	r0, s16
 800a066:	f7ff fa75 	bl	8009554 <quorem>
 800a06a:	4641      	mov	r1, r8
 800a06c:	9002      	str	r0, [sp, #8]
 800a06e:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a072:	ee18 0a10 	vmov	r0, s16
 800a076:	f000 ff63 	bl	800af40 <__mcmp>
 800a07a:	463a      	mov	r2, r7
 800a07c:	9003      	str	r0, [sp, #12]
 800a07e:	4631      	mov	r1, r6
 800a080:	4620      	mov	r0, r4
 800a082:	f000 ff79 	bl	800af78 <__mdiff>
 800a086:	68c2      	ldr	r2, [r0, #12]
 800a088:	f109 3bff 	add.w	fp, r9, #4294967295
 800a08c:	4605      	mov	r5, r0
 800a08e:	bb02      	cbnz	r2, 800a0d2 <_dtoa_r+0xa62>
 800a090:	4601      	mov	r1, r0
 800a092:	ee18 0a10 	vmov	r0, s16
 800a096:	f000 ff53 	bl	800af40 <__mcmp>
 800a09a:	4602      	mov	r2, r0
 800a09c:	4629      	mov	r1, r5
 800a09e:	4620      	mov	r0, r4
 800a0a0:	9207      	str	r2, [sp, #28]
 800a0a2:	f000 fcc1 	bl	800aa28 <_Bfree>
 800a0a6:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800a0aa:	ea43 0102 	orr.w	r1, r3, r2
 800a0ae:	9b04      	ldr	r3, [sp, #16]
 800a0b0:	430b      	orrs	r3, r1
 800a0b2:	464d      	mov	r5, r9
 800a0b4:	d10f      	bne.n	800a0d6 <_dtoa_r+0xa66>
 800a0b6:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a0ba:	d02a      	beq.n	800a112 <_dtoa_r+0xaa2>
 800a0bc:	9b03      	ldr	r3, [sp, #12]
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	dd02      	ble.n	800a0c8 <_dtoa_r+0xa58>
 800a0c2:	9b02      	ldr	r3, [sp, #8]
 800a0c4:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800a0c8:	f88b a000 	strb.w	sl, [fp]
 800a0cc:	e775      	b.n	8009fba <_dtoa_r+0x94a>
 800a0ce:	4638      	mov	r0, r7
 800a0d0:	e7ba      	b.n	800a048 <_dtoa_r+0x9d8>
 800a0d2:	2201      	movs	r2, #1
 800a0d4:	e7e2      	b.n	800a09c <_dtoa_r+0xa2c>
 800a0d6:	9b03      	ldr	r3, [sp, #12]
 800a0d8:	2b00      	cmp	r3, #0
 800a0da:	db04      	blt.n	800a0e6 <_dtoa_r+0xa76>
 800a0dc:	9906      	ldr	r1, [sp, #24]
 800a0de:	430b      	orrs	r3, r1
 800a0e0:	9904      	ldr	r1, [sp, #16]
 800a0e2:	430b      	orrs	r3, r1
 800a0e4:	d122      	bne.n	800a12c <_dtoa_r+0xabc>
 800a0e6:	2a00      	cmp	r2, #0
 800a0e8:	ddee      	ble.n	800a0c8 <_dtoa_r+0xa58>
 800a0ea:	ee18 1a10 	vmov	r1, s16
 800a0ee:	2201      	movs	r2, #1
 800a0f0:	4620      	mov	r0, r4
 800a0f2:	f000 feb5 	bl	800ae60 <__lshift>
 800a0f6:	4631      	mov	r1, r6
 800a0f8:	ee08 0a10 	vmov	s16, r0
 800a0fc:	f000 ff20 	bl	800af40 <__mcmp>
 800a100:	2800      	cmp	r0, #0
 800a102:	dc03      	bgt.n	800a10c <_dtoa_r+0xa9c>
 800a104:	d1e0      	bne.n	800a0c8 <_dtoa_r+0xa58>
 800a106:	f01a 0f01 	tst.w	sl, #1
 800a10a:	d0dd      	beq.n	800a0c8 <_dtoa_r+0xa58>
 800a10c:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a110:	d1d7      	bne.n	800a0c2 <_dtoa_r+0xa52>
 800a112:	2339      	movs	r3, #57	; 0x39
 800a114:	f88b 3000 	strb.w	r3, [fp]
 800a118:	462b      	mov	r3, r5
 800a11a:	461d      	mov	r5, r3
 800a11c:	3b01      	subs	r3, #1
 800a11e:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800a122:	2a39      	cmp	r2, #57	; 0x39
 800a124:	d071      	beq.n	800a20a <_dtoa_r+0xb9a>
 800a126:	3201      	adds	r2, #1
 800a128:	701a      	strb	r2, [r3, #0]
 800a12a:	e746      	b.n	8009fba <_dtoa_r+0x94a>
 800a12c:	2a00      	cmp	r2, #0
 800a12e:	dd07      	ble.n	800a140 <_dtoa_r+0xad0>
 800a130:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800a134:	d0ed      	beq.n	800a112 <_dtoa_r+0xaa2>
 800a136:	f10a 0301 	add.w	r3, sl, #1
 800a13a:	f88b 3000 	strb.w	r3, [fp]
 800a13e:	e73c      	b.n	8009fba <_dtoa_r+0x94a>
 800a140:	9b05      	ldr	r3, [sp, #20]
 800a142:	f809 ac01 	strb.w	sl, [r9, #-1]
 800a146:	4599      	cmp	r9, r3
 800a148:	d047      	beq.n	800a1da <_dtoa_r+0xb6a>
 800a14a:	ee18 1a10 	vmov	r1, s16
 800a14e:	2300      	movs	r3, #0
 800a150:	220a      	movs	r2, #10
 800a152:	4620      	mov	r0, r4
 800a154:	f000 fc8a 	bl	800aa6c <__multadd>
 800a158:	45b8      	cmp	r8, r7
 800a15a:	ee08 0a10 	vmov	s16, r0
 800a15e:	f04f 0300 	mov.w	r3, #0
 800a162:	f04f 020a 	mov.w	r2, #10
 800a166:	4641      	mov	r1, r8
 800a168:	4620      	mov	r0, r4
 800a16a:	d106      	bne.n	800a17a <_dtoa_r+0xb0a>
 800a16c:	f000 fc7e 	bl	800aa6c <__multadd>
 800a170:	4680      	mov	r8, r0
 800a172:	4607      	mov	r7, r0
 800a174:	f109 0901 	add.w	r9, r9, #1
 800a178:	e772      	b.n	800a060 <_dtoa_r+0x9f0>
 800a17a:	f000 fc77 	bl	800aa6c <__multadd>
 800a17e:	4639      	mov	r1, r7
 800a180:	4680      	mov	r8, r0
 800a182:	2300      	movs	r3, #0
 800a184:	220a      	movs	r2, #10
 800a186:	4620      	mov	r0, r4
 800a188:	f000 fc70 	bl	800aa6c <__multadd>
 800a18c:	4607      	mov	r7, r0
 800a18e:	e7f1      	b.n	800a174 <_dtoa_r+0xb04>
 800a190:	9b03      	ldr	r3, [sp, #12]
 800a192:	9302      	str	r3, [sp, #8]
 800a194:	9d01      	ldr	r5, [sp, #4]
 800a196:	ee18 0a10 	vmov	r0, s16
 800a19a:	4631      	mov	r1, r6
 800a19c:	f7ff f9da 	bl	8009554 <quorem>
 800a1a0:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800a1a4:	9b01      	ldr	r3, [sp, #4]
 800a1a6:	f805 ab01 	strb.w	sl, [r5], #1
 800a1aa:	1aea      	subs	r2, r5, r3
 800a1ac:	9b02      	ldr	r3, [sp, #8]
 800a1ae:	4293      	cmp	r3, r2
 800a1b0:	dd09      	ble.n	800a1c6 <_dtoa_r+0xb56>
 800a1b2:	ee18 1a10 	vmov	r1, s16
 800a1b6:	2300      	movs	r3, #0
 800a1b8:	220a      	movs	r2, #10
 800a1ba:	4620      	mov	r0, r4
 800a1bc:	f000 fc56 	bl	800aa6c <__multadd>
 800a1c0:	ee08 0a10 	vmov	s16, r0
 800a1c4:	e7e7      	b.n	800a196 <_dtoa_r+0xb26>
 800a1c6:	9b02      	ldr	r3, [sp, #8]
 800a1c8:	2b00      	cmp	r3, #0
 800a1ca:	bfc8      	it	gt
 800a1cc:	461d      	movgt	r5, r3
 800a1ce:	9b01      	ldr	r3, [sp, #4]
 800a1d0:	bfd8      	it	le
 800a1d2:	2501      	movle	r5, #1
 800a1d4:	441d      	add	r5, r3
 800a1d6:	f04f 0800 	mov.w	r8, #0
 800a1da:	ee18 1a10 	vmov	r1, s16
 800a1de:	2201      	movs	r2, #1
 800a1e0:	4620      	mov	r0, r4
 800a1e2:	f000 fe3d 	bl	800ae60 <__lshift>
 800a1e6:	4631      	mov	r1, r6
 800a1e8:	ee08 0a10 	vmov	s16, r0
 800a1ec:	f000 fea8 	bl	800af40 <__mcmp>
 800a1f0:	2800      	cmp	r0, #0
 800a1f2:	dc91      	bgt.n	800a118 <_dtoa_r+0xaa8>
 800a1f4:	d102      	bne.n	800a1fc <_dtoa_r+0xb8c>
 800a1f6:	f01a 0f01 	tst.w	sl, #1
 800a1fa:	d18d      	bne.n	800a118 <_dtoa_r+0xaa8>
 800a1fc:	462b      	mov	r3, r5
 800a1fe:	461d      	mov	r5, r3
 800a200:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800a204:	2a30      	cmp	r2, #48	; 0x30
 800a206:	d0fa      	beq.n	800a1fe <_dtoa_r+0xb8e>
 800a208:	e6d7      	b.n	8009fba <_dtoa_r+0x94a>
 800a20a:	9a01      	ldr	r2, [sp, #4]
 800a20c:	429a      	cmp	r2, r3
 800a20e:	d184      	bne.n	800a11a <_dtoa_r+0xaaa>
 800a210:	9b00      	ldr	r3, [sp, #0]
 800a212:	3301      	adds	r3, #1
 800a214:	9300      	str	r3, [sp, #0]
 800a216:	2331      	movs	r3, #49	; 0x31
 800a218:	7013      	strb	r3, [r2, #0]
 800a21a:	e6ce      	b.n	8009fba <_dtoa_r+0x94a>
 800a21c:	4b09      	ldr	r3, [pc, #36]	; (800a244 <_dtoa_r+0xbd4>)
 800a21e:	f7ff ba95 	b.w	800974c <_dtoa_r+0xdc>
 800a222:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800a224:	2b00      	cmp	r3, #0
 800a226:	f47f aa6e 	bne.w	8009706 <_dtoa_r+0x96>
 800a22a:	4b07      	ldr	r3, [pc, #28]	; (800a248 <_dtoa_r+0xbd8>)
 800a22c:	f7ff ba8e 	b.w	800974c <_dtoa_r+0xdc>
 800a230:	9b02      	ldr	r3, [sp, #8]
 800a232:	2b00      	cmp	r3, #0
 800a234:	dcae      	bgt.n	800a194 <_dtoa_r+0xb24>
 800a236:	9b06      	ldr	r3, [sp, #24]
 800a238:	2b02      	cmp	r3, #2
 800a23a:	f73f aea8 	bgt.w	8009f8e <_dtoa_r+0x91e>
 800a23e:	e7a9      	b.n	800a194 <_dtoa_r+0xb24>
 800a240:	0800c729 	.word	0x0800c729
 800a244:	0800c490 	.word	0x0800c490
 800a248:	0800c6c1 	.word	0x0800c6c1

0800a24c <fiprintf>:
 800a24c:	b40e      	push	{r1, r2, r3}
 800a24e:	b503      	push	{r0, r1, lr}
 800a250:	4601      	mov	r1, r0
 800a252:	ab03      	add	r3, sp, #12
 800a254:	4805      	ldr	r0, [pc, #20]	; (800a26c <fiprintf+0x20>)
 800a256:	f853 2b04 	ldr.w	r2, [r3], #4
 800a25a:	6800      	ldr	r0, [r0, #0]
 800a25c:	9301      	str	r3, [sp, #4]
 800a25e:	f001 fae1 	bl	800b824 <_vfiprintf_r>
 800a262:	b002      	add	sp, #8
 800a264:	f85d eb04 	ldr.w	lr, [sp], #4
 800a268:	b003      	add	sp, #12
 800a26a:	4770      	bx	lr
 800a26c:	2000001c 	.word	0x2000001c

0800a270 <rshift>:
 800a270:	6903      	ldr	r3, [r0, #16]
 800a272:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a276:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a27a:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a27e:	f100 0414 	add.w	r4, r0, #20
 800a282:	dd45      	ble.n	800a310 <rshift+0xa0>
 800a284:	f011 011f 	ands.w	r1, r1, #31
 800a288:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a28c:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a290:	d10c      	bne.n	800a2ac <rshift+0x3c>
 800a292:	f100 0710 	add.w	r7, r0, #16
 800a296:	4629      	mov	r1, r5
 800a298:	42b1      	cmp	r1, r6
 800a29a:	d334      	bcc.n	800a306 <rshift+0x96>
 800a29c:	1a9b      	subs	r3, r3, r2
 800a29e:	009b      	lsls	r3, r3, #2
 800a2a0:	1eea      	subs	r2, r5, #3
 800a2a2:	4296      	cmp	r6, r2
 800a2a4:	bf38      	it	cc
 800a2a6:	2300      	movcc	r3, #0
 800a2a8:	4423      	add	r3, r4
 800a2aa:	e015      	b.n	800a2d8 <rshift+0x68>
 800a2ac:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a2b0:	f1c1 0820 	rsb	r8, r1, #32
 800a2b4:	40cf      	lsrs	r7, r1
 800a2b6:	f105 0e04 	add.w	lr, r5, #4
 800a2ba:	46a1      	mov	r9, r4
 800a2bc:	4576      	cmp	r6, lr
 800a2be:	46f4      	mov	ip, lr
 800a2c0:	d815      	bhi.n	800a2ee <rshift+0x7e>
 800a2c2:	1a9a      	subs	r2, r3, r2
 800a2c4:	0092      	lsls	r2, r2, #2
 800a2c6:	3a04      	subs	r2, #4
 800a2c8:	3501      	adds	r5, #1
 800a2ca:	42ae      	cmp	r6, r5
 800a2cc:	bf38      	it	cc
 800a2ce:	2200      	movcc	r2, #0
 800a2d0:	18a3      	adds	r3, r4, r2
 800a2d2:	50a7      	str	r7, [r4, r2]
 800a2d4:	b107      	cbz	r7, 800a2d8 <rshift+0x68>
 800a2d6:	3304      	adds	r3, #4
 800a2d8:	1b1a      	subs	r2, r3, r4
 800a2da:	42a3      	cmp	r3, r4
 800a2dc:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a2e0:	bf08      	it	eq
 800a2e2:	2300      	moveq	r3, #0
 800a2e4:	6102      	str	r2, [r0, #16]
 800a2e6:	bf08      	it	eq
 800a2e8:	6143      	streq	r3, [r0, #20]
 800a2ea:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a2ee:	f8dc c000 	ldr.w	ip, [ip]
 800a2f2:	fa0c fc08 	lsl.w	ip, ip, r8
 800a2f6:	ea4c 0707 	orr.w	r7, ip, r7
 800a2fa:	f849 7b04 	str.w	r7, [r9], #4
 800a2fe:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a302:	40cf      	lsrs	r7, r1
 800a304:	e7da      	b.n	800a2bc <rshift+0x4c>
 800a306:	f851 cb04 	ldr.w	ip, [r1], #4
 800a30a:	f847 cf04 	str.w	ip, [r7, #4]!
 800a30e:	e7c3      	b.n	800a298 <rshift+0x28>
 800a310:	4623      	mov	r3, r4
 800a312:	e7e1      	b.n	800a2d8 <rshift+0x68>

0800a314 <__hexdig_fun>:
 800a314:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800a318:	2b09      	cmp	r3, #9
 800a31a:	d802      	bhi.n	800a322 <__hexdig_fun+0xe>
 800a31c:	3820      	subs	r0, #32
 800a31e:	b2c0      	uxtb	r0, r0
 800a320:	4770      	bx	lr
 800a322:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800a326:	2b05      	cmp	r3, #5
 800a328:	d801      	bhi.n	800a32e <__hexdig_fun+0x1a>
 800a32a:	3847      	subs	r0, #71	; 0x47
 800a32c:	e7f7      	b.n	800a31e <__hexdig_fun+0xa>
 800a32e:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800a332:	2b05      	cmp	r3, #5
 800a334:	d801      	bhi.n	800a33a <__hexdig_fun+0x26>
 800a336:	3827      	subs	r0, #39	; 0x27
 800a338:	e7f1      	b.n	800a31e <__hexdig_fun+0xa>
 800a33a:	2000      	movs	r0, #0
 800a33c:	4770      	bx	lr
	...

0800a340 <__gethex>:
 800a340:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a344:	ed2d 8b02 	vpush	{d8}
 800a348:	b089      	sub	sp, #36	; 0x24
 800a34a:	ee08 0a10 	vmov	s16, r0
 800a34e:	9304      	str	r3, [sp, #16]
 800a350:	4bb4      	ldr	r3, [pc, #720]	; (800a624 <__gethex+0x2e4>)
 800a352:	681b      	ldr	r3, [r3, #0]
 800a354:	9301      	str	r3, [sp, #4]
 800a356:	4618      	mov	r0, r3
 800a358:	468b      	mov	fp, r1
 800a35a:	4690      	mov	r8, r2
 800a35c:	f7f5 ff38 	bl	80001d0 <strlen>
 800a360:	9b01      	ldr	r3, [sp, #4]
 800a362:	f8db 2000 	ldr.w	r2, [fp]
 800a366:	4403      	add	r3, r0
 800a368:	4682      	mov	sl, r0
 800a36a:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800a36e:	9305      	str	r3, [sp, #20]
 800a370:	1c93      	adds	r3, r2, #2
 800a372:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800a376:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800a37a:	32fe      	adds	r2, #254	; 0xfe
 800a37c:	18d1      	adds	r1, r2, r3
 800a37e:	461f      	mov	r7, r3
 800a380:	f813 0b01 	ldrb.w	r0, [r3], #1
 800a384:	9100      	str	r1, [sp, #0]
 800a386:	2830      	cmp	r0, #48	; 0x30
 800a388:	d0f8      	beq.n	800a37c <__gethex+0x3c>
 800a38a:	f7ff ffc3 	bl	800a314 <__hexdig_fun>
 800a38e:	4604      	mov	r4, r0
 800a390:	2800      	cmp	r0, #0
 800a392:	d13a      	bne.n	800a40a <__gethex+0xca>
 800a394:	9901      	ldr	r1, [sp, #4]
 800a396:	4652      	mov	r2, sl
 800a398:	4638      	mov	r0, r7
 800a39a:	f001 fb8d 	bl	800bab8 <strncmp>
 800a39e:	4605      	mov	r5, r0
 800a3a0:	2800      	cmp	r0, #0
 800a3a2:	d168      	bne.n	800a476 <__gethex+0x136>
 800a3a4:	f817 000a 	ldrb.w	r0, [r7, sl]
 800a3a8:	eb07 060a 	add.w	r6, r7, sl
 800a3ac:	f7ff ffb2 	bl	800a314 <__hexdig_fun>
 800a3b0:	2800      	cmp	r0, #0
 800a3b2:	d062      	beq.n	800a47a <__gethex+0x13a>
 800a3b4:	4633      	mov	r3, r6
 800a3b6:	7818      	ldrb	r0, [r3, #0]
 800a3b8:	2830      	cmp	r0, #48	; 0x30
 800a3ba:	461f      	mov	r7, r3
 800a3bc:	f103 0301 	add.w	r3, r3, #1
 800a3c0:	d0f9      	beq.n	800a3b6 <__gethex+0x76>
 800a3c2:	f7ff ffa7 	bl	800a314 <__hexdig_fun>
 800a3c6:	2301      	movs	r3, #1
 800a3c8:	fab0 f480 	clz	r4, r0
 800a3cc:	0964      	lsrs	r4, r4, #5
 800a3ce:	4635      	mov	r5, r6
 800a3d0:	9300      	str	r3, [sp, #0]
 800a3d2:	463a      	mov	r2, r7
 800a3d4:	4616      	mov	r6, r2
 800a3d6:	3201      	adds	r2, #1
 800a3d8:	7830      	ldrb	r0, [r6, #0]
 800a3da:	f7ff ff9b 	bl	800a314 <__hexdig_fun>
 800a3de:	2800      	cmp	r0, #0
 800a3e0:	d1f8      	bne.n	800a3d4 <__gethex+0x94>
 800a3e2:	9901      	ldr	r1, [sp, #4]
 800a3e4:	4652      	mov	r2, sl
 800a3e6:	4630      	mov	r0, r6
 800a3e8:	f001 fb66 	bl	800bab8 <strncmp>
 800a3ec:	b980      	cbnz	r0, 800a410 <__gethex+0xd0>
 800a3ee:	b94d      	cbnz	r5, 800a404 <__gethex+0xc4>
 800a3f0:	eb06 050a 	add.w	r5, r6, sl
 800a3f4:	462a      	mov	r2, r5
 800a3f6:	4616      	mov	r6, r2
 800a3f8:	3201      	adds	r2, #1
 800a3fa:	7830      	ldrb	r0, [r6, #0]
 800a3fc:	f7ff ff8a 	bl	800a314 <__hexdig_fun>
 800a400:	2800      	cmp	r0, #0
 800a402:	d1f8      	bne.n	800a3f6 <__gethex+0xb6>
 800a404:	1bad      	subs	r5, r5, r6
 800a406:	00ad      	lsls	r5, r5, #2
 800a408:	e004      	b.n	800a414 <__gethex+0xd4>
 800a40a:	2400      	movs	r4, #0
 800a40c:	4625      	mov	r5, r4
 800a40e:	e7e0      	b.n	800a3d2 <__gethex+0x92>
 800a410:	2d00      	cmp	r5, #0
 800a412:	d1f7      	bne.n	800a404 <__gethex+0xc4>
 800a414:	7833      	ldrb	r3, [r6, #0]
 800a416:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a41a:	2b50      	cmp	r3, #80	; 0x50
 800a41c:	d13b      	bne.n	800a496 <__gethex+0x156>
 800a41e:	7873      	ldrb	r3, [r6, #1]
 800a420:	2b2b      	cmp	r3, #43	; 0x2b
 800a422:	d02c      	beq.n	800a47e <__gethex+0x13e>
 800a424:	2b2d      	cmp	r3, #45	; 0x2d
 800a426:	d02e      	beq.n	800a486 <__gethex+0x146>
 800a428:	1c71      	adds	r1, r6, #1
 800a42a:	f04f 0900 	mov.w	r9, #0
 800a42e:	7808      	ldrb	r0, [r1, #0]
 800a430:	f7ff ff70 	bl	800a314 <__hexdig_fun>
 800a434:	1e43      	subs	r3, r0, #1
 800a436:	b2db      	uxtb	r3, r3
 800a438:	2b18      	cmp	r3, #24
 800a43a:	d82c      	bhi.n	800a496 <__gethex+0x156>
 800a43c:	f1a0 0210 	sub.w	r2, r0, #16
 800a440:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a444:	f7ff ff66 	bl	800a314 <__hexdig_fun>
 800a448:	1e43      	subs	r3, r0, #1
 800a44a:	b2db      	uxtb	r3, r3
 800a44c:	2b18      	cmp	r3, #24
 800a44e:	d91d      	bls.n	800a48c <__gethex+0x14c>
 800a450:	f1b9 0f00 	cmp.w	r9, #0
 800a454:	d000      	beq.n	800a458 <__gethex+0x118>
 800a456:	4252      	negs	r2, r2
 800a458:	4415      	add	r5, r2
 800a45a:	f8cb 1000 	str.w	r1, [fp]
 800a45e:	b1e4      	cbz	r4, 800a49a <__gethex+0x15a>
 800a460:	9b00      	ldr	r3, [sp, #0]
 800a462:	2b00      	cmp	r3, #0
 800a464:	bf14      	ite	ne
 800a466:	2700      	movne	r7, #0
 800a468:	2706      	moveq	r7, #6
 800a46a:	4638      	mov	r0, r7
 800a46c:	b009      	add	sp, #36	; 0x24
 800a46e:	ecbd 8b02 	vpop	{d8}
 800a472:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a476:	463e      	mov	r6, r7
 800a478:	4625      	mov	r5, r4
 800a47a:	2401      	movs	r4, #1
 800a47c:	e7ca      	b.n	800a414 <__gethex+0xd4>
 800a47e:	f04f 0900 	mov.w	r9, #0
 800a482:	1cb1      	adds	r1, r6, #2
 800a484:	e7d3      	b.n	800a42e <__gethex+0xee>
 800a486:	f04f 0901 	mov.w	r9, #1
 800a48a:	e7fa      	b.n	800a482 <__gethex+0x142>
 800a48c:	230a      	movs	r3, #10
 800a48e:	fb03 0202 	mla	r2, r3, r2, r0
 800a492:	3a10      	subs	r2, #16
 800a494:	e7d4      	b.n	800a440 <__gethex+0x100>
 800a496:	4631      	mov	r1, r6
 800a498:	e7df      	b.n	800a45a <__gethex+0x11a>
 800a49a:	1bf3      	subs	r3, r6, r7
 800a49c:	3b01      	subs	r3, #1
 800a49e:	4621      	mov	r1, r4
 800a4a0:	2b07      	cmp	r3, #7
 800a4a2:	dc0b      	bgt.n	800a4bc <__gethex+0x17c>
 800a4a4:	ee18 0a10 	vmov	r0, s16
 800a4a8:	f000 fa7e 	bl	800a9a8 <_Balloc>
 800a4ac:	4604      	mov	r4, r0
 800a4ae:	b940      	cbnz	r0, 800a4c2 <__gethex+0x182>
 800a4b0:	4b5d      	ldr	r3, [pc, #372]	; (800a628 <__gethex+0x2e8>)
 800a4b2:	4602      	mov	r2, r0
 800a4b4:	21de      	movs	r1, #222	; 0xde
 800a4b6:	485d      	ldr	r0, [pc, #372]	; (800a62c <__gethex+0x2ec>)
 800a4b8:	f7ff f82e 	bl	8009518 <__assert_func>
 800a4bc:	3101      	adds	r1, #1
 800a4be:	105b      	asrs	r3, r3, #1
 800a4c0:	e7ee      	b.n	800a4a0 <__gethex+0x160>
 800a4c2:	f100 0914 	add.w	r9, r0, #20
 800a4c6:	f04f 0b00 	mov.w	fp, #0
 800a4ca:	f1ca 0301 	rsb	r3, sl, #1
 800a4ce:	f8cd 9008 	str.w	r9, [sp, #8]
 800a4d2:	f8cd b000 	str.w	fp, [sp]
 800a4d6:	9306      	str	r3, [sp, #24]
 800a4d8:	42b7      	cmp	r7, r6
 800a4da:	d340      	bcc.n	800a55e <__gethex+0x21e>
 800a4dc:	9802      	ldr	r0, [sp, #8]
 800a4de:	9b00      	ldr	r3, [sp, #0]
 800a4e0:	f840 3b04 	str.w	r3, [r0], #4
 800a4e4:	eba0 0009 	sub.w	r0, r0, r9
 800a4e8:	1080      	asrs	r0, r0, #2
 800a4ea:	0146      	lsls	r6, r0, #5
 800a4ec:	6120      	str	r0, [r4, #16]
 800a4ee:	4618      	mov	r0, r3
 800a4f0:	f000 fb4c 	bl	800ab8c <__hi0bits>
 800a4f4:	1a30      	subs	r0, r6, r0
 800a4f6:	f8d8 6000 	ldr.w	r6, [r8]
 800a4fa:	42b0      	cmp	r0, r6
 800a4fc:	dd63      	ble.n	800a5c6 <__gethex+0x286>
 800a4fe:	1b87      	subs	r7, r0, r6
 800a500:	4639      	mov	r1, r7
 800a502:	4620      	mov	r0, r4
 800a504:	f000 fef0 	bl	800b2e8 <__any_on>
 800a508:	4682      	mov	sl, r0
 800a50a:	b1a8      	cbz	r0, 800a538 <__gethex+0x1f8>
 800a50c:	1e7b      	subs	r3, r7, #1
 800a50e:	1159      	asrs	r1, r3, #5
 800a510:	f003 021f 	and.w	r2, r3, #31
 800a514:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800a518:	f04f 0a01 	mov.w	sl, #1
 800a51c:	fa0a f202 	lsl.w	r2, sl, r2
 800a520:	420a      	tst	r2, r1
 800a522:	d009      	beq.n	800a538 <__gethex+0x1f8>
 800a524:	4553      	cmp	r3, sl
 800a526:	dd05      	ble.n	800a534 <__gethex+0x1f4>
 800a528:	1eb9      	subs	r1, r7, #2
 800a52a:	4620      	mov	r0, r4
 800a52c:	f000 fedc 	bl	800b2e8 <__any_on>
 800a530:	2800      	cmp	r0, #0
 800a532:	d145      	bne.n	800a5c0 <__gethex+0x280>
 800a534:	f04f 0a02 	mov.w	sl, #2
 800a538:	4639      	mov	r1, r7
 800a53a:	4620      	mov	r0, r4
 800a53c:	f7ff fe98 	bl	800a270 <rshift>
 800a540:	443d      	add	r5, r7
 800a542:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a546:	42ab      	cmp	r3, r5
 800a548:	da4c      	bge.n	800a5e4 <__gethex+0x2a4>
 800a54a:	ee18 0a10 	vmov	r0, s16
 800a54e:	4621      	mov	r1, r4
 800a550:	f000 fa6a 	bl	800aa28 <_Bfree>
 800a554:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a556:	2300      	movs	r3, #0
 800a558:	6013      	str	r3, [r2, #0]
 800a55a:	27a3      	movs	r7, #163	; 0xa3
 800a55c:	e785      	b.n	800a46a <__gethex+0x12a>
 800a55e:	1e73      	subs	r3, r6, #1
 800a560:	9a05      	ldr	r2, [sp, #20]
 800a562:	9303      	str	r3, [sp, #12]
 800a564:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800a568:	4293      	cmp	r3, r2
 800a56a:	d019      	beq.n	800a5a0 <__gethex+0x260>
 800a56c:	f1bb 0f20 	cmp.w	fp, #32
 800a570:	d107      	bne.n	800a582 <__gethex+0x242>
 800a572:	9b02      	ldr	r3, [sp, #8]
 800a574:	9a00      	ldr	r2, [sp, #0]
 800a576:	f843 2b04 	str.w	r2, [r3], #4
 800a57a:	9302      	str	r3, [sp, #8]
 800a57c:	2300      	movs	r3, #0
 800a57e:	9300      	str	r3, [sp, #0]
 800a580:	469b      	mov	fp, r3
 800a582:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800a586:	f7ff fec5 	bl	800a314 <__hexdig_fun>
 800a58a:	9b00      	ldr	r3, [sp, #0]
 800a58c:	f000 000f 	and.w	r0, r0, #15
 800a590:	fa00 f00b 	lsl.w	r0, r0, fp
 800a594:	4303      	orrs	r3, r0
 800a596:	9300      	str	r3, [sp, #0]
 800a598:	f10b 0b04 	add.w	fp, fp, #4
 800a59c:	9b03      	ldr	r3, [sp, #12]
 800a59e:	e00d      	b.n	800a5bc <__gethex+0x27c>
 800a5a0:	9b03      	ldr	r3, [sp, #12]
 800a5a2:	9a06      	ldr	r2, [sp, #24]
 800a5a4:	4413      	add	r3, r2
 800a5a6:	42bb      	cmp	r3, r7
 800a5a8:	d3e0      	bcc.n	800a56c <__gethex+0x22c>
 800a5aa:	4618      	mov	r0, r3
 800a5ac:	9901      	ldr	r1, [sp, #4]
 800a5ae:	9307      	str	r3, [sp, #28]
 800a5b0:	4652      	mov	r2, sl
 800a5b2:	f001 fa81 	bl	800bab8 <strncmp>
 800a5b6:	9b07      	ldr	r3, [sp, #28]
 800a5b8:	2800      	cmp	r0, #0
 800a5ba:	d1d7      	bne.n	800a56c <__gethex+0x22c>
 800a5bc:	461e      	mov	r6, r3
 800a5be:	e78b      	b.n	800a4d8 <__gethex+0x198>
 800a5c0:	f04f 0a03 	mov.w	sl, #3
 800a5c4:	e7b8      	b.n	800a538 <__gethex+0x1f8>
 800a5c6:	da0a      	bge.n	800a5de <__gethex+0x29e>
 800a5c8:	1a37      	subs	r7, r6, r0
 800a5ca:	4621      	mov	r1, r4
 800a5cc:	ee18 0a10 	vmov	r0, s16
 800a5d0:	463a      	mov	r2, r7
 800a5d2:	f000 fc45 	bl	800ae60 <__lshift>
 800a5d6:	1bed      	subs	r5, r5, r7
 800a5d8:	4604      	mov	r4, r0
 800a5da:	f100 0914 	add.w	r9, r0, #20
 800a5de:	f04f 0a00 	mov.w	sl, #0
 800a5e2:	e7ae      	b.n	800a542 <__gethex+0x202>
 800a5e4:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800a5e8:	42a8      	cmp	r0, r5
 800a5ea:	dd72      	ble.n	800a6d2 <__gethex+0x392>
 800a5ec:	1b45      	subs	r5, r0, r5
 800a5ee:	42ae      	cmp	r6, r5
 800a5f0:	dc36      	bgt.n	800a660 <__gethex+0x320>
 800a5f2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a5f6:	2b02      	cmp	r3, #2
 800a5f8:	d02a      	beq.n	800a650 <__gethex+0x310>
 800a5fa:	2b03      	cmp	r3, #3
 800a5fc:	d02c      	beq.n	800a658 <__gethex+0x318>
 800a5fe:	2b01      	cmp	r3, #1
 800a600:	d11c      	bne.n	800a63c <__gethex+0x2fc>
 800a602:	42ae      	cmp	r6, r5
 800a604:	d11a      	bne.n	800a63c <__gethex+0x2fc>
 800a606:	2e01      	cmp	r6, #1
 800a608:	d112      	bne.n	800a630 <__gethex+0x2f0>
 800a60a:	9a04      	ldr	r2, [sp, #16]
 800a60c:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a610:	6013      	str	r3, [r2, #0]
 800a612:	2301      	movs	r3, #1
 800a614:	6123      	str	r3, [r4, #16]
 800a616:	f8c9 3000 	str.w	r3, [r9]
 800a61a:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a61c:	2762      	movs	r7, #98	; 0x62
 800a61e:	601c      	str	r4, [r3, #0]
 800a620:	e723      	b.n	800a46a <__gethex+0x12a>
 800a622:	bf00      	nop
 800a624:	0800c7a0 	.word	0x0800c7a0
 800a628:	0800c729 	.word	0x0800c729
 800a62c:	0800c73a 	.word	0x0800c73a
 800a630:	1e71      	subs	r1, r6, #1
 800a632:	4620      	mov	r0, r4
 800a634:	f000 fe58 	bl	800b2e8 <__any_on>
 800a638:	2800      	cmp	r0, #0
 800a63a:	d1e6      	bne.n	800a60a <__gethex+0x2ca>
 800a63c:	ee18 0a10 	vmov	r0, s16
 800a640:	4621      	mov	r1, r4
 800a642:	f000 f9f1 	bl	800aa28 <_Bfree>
 800a646:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800a648:	2300      	movs	r3, #0
 800a64a:	6013      	str	r3, [r2, #0]
 800a64c:	2750      	movs	r7, #80	; 0x50
 800a64e:	e70c      	b.n	800a46a <__gethex+0x12a>
 800a650:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a652:	2b00      	cmp	r3, #0
 800a654:	d1f2      	bne.n	800a63c <__gethex+0x2fc>
 800a656:	e7d8      	b.n	800a60a <__gethex+0x2ca>
 800a658:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a65a:	2b00      	cmp	r3, #0
 800a65c:	d1d5      	bne.n	800a60a <__gethex+0x2ca>
 800a65e:	e7ed      	b.n	800a63c <__gethex+0x2fc>
 800a660:	1e6f      	subs	r7, r5, #1
 800a662:	f1ba 0f00 	cmp.w	sl, #0
 800a666:	d131      	bne.n	800a6cc <__gethex+0x38c>
 800a668:	b127      	cbz	r7, 800a674 <__gethex+0x334>
 800a66a:	4639      	mov	r1, r7
 800a66c:	4620      	mov	r0, r4
 800a66e:	f000 fe3b 	bl	800b2e8 <__any_on>
 800a672:	4682      	mov	sl, r0
 800a674:	117b      	asrs	r3, r7, #5
 800a676:	2101      	movs	r1, #1
 800a678:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800a67c:	f007 071f 	and.w	r7, r7, #31
 800a680:	fa01 f707 	lsl.w	r7, r1, r7
 800a684:	421f      	tst	r7, r3
 800a686:	4629      	mov	r1, r5
 800a688:	4620      	mov	r0, r4
 800a68a:	bf18      	it	ne
 800a68c:	f04a 0a02 	orrne.w	sl, sl, #2
 800a690:	1b76      	subs	r6, r6, r5
 800a692:	f7ff fded 	bl	800a270 <rshift>
 800a696:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a69a:	2702      	movs	r7, #2
 800a69c:	f1ba 0f00 	cmp.w	sl, #0
 800a6a0:	d048      	beq.n	800a734 <__gethex+0x3f4>
 800a6a2:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a6a6:	2b02      	cmp	r3, #2
 800a6a8:	d015      	beq.n	800a6d6 <__gethex+0x396>
 800a6aa:	2b03      	cmp	r3, #3
 800a6ac:	d017      	beq.n	800a6de <__gethex+0x39e>
 800a6ae:	2b01      	cmp	r3, #1
 800a6b0:	d109      	bne.n	800a6c6 <__gethex+0x386>
 800a6b2:	f01a 0f02 	tst.w	sl, #2
 800a6b6:	d006      	beq.n	800a6c6 <__gethex+0x386>
 800a6b8:	f8d9 0000 	ldr.w	r0, [r9]
 800a6bc:	ea4a 0a00 	orr.w	sl, sl, r0
 800a6c0:	f01a 0f01 	tst.w	sl, #1
 800a6c4:	d10e      	bne.n	800a6e4 <__gethex+0x3a4>
 800a6c6:	f047 0710 	orr.w	r7, r7, #16
 800a6ca:	e033      	b.n	800a734 <__gethex+0x3f4>
 800a6cc:	f04f 0a01 	mov.w	sl, #1
 800a6d0:	e7d0      	b.n	800a674 <__gethex+0x334>
 800a6d2:	2701      	movs	r7, #1
 800a6d4:	e7e2      	b.n	800a69c <__gethex+0x35c>
 800a6d6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6d8:	f1c3 0301 	rsb	r3, r3, #1
 800a6dc:	9315      	str	r3, [sp, #84]	; 0x54
 800a6de:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800a6e0:	2b00      	cmp	r3, #0
 800a6e2:	d0f0      	beq.n	800a6c6 <__gethex+0x386>
 800a6e4:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a6e8:	f104 0314 	add.w	r3, r4, #20
 800a6ec:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a6f0:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a6f4:	f04f 0c00 	mov.w	ip, #0
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	f853 2b04 	ldr.w	r2, [r3], #4
 800a6fe:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a702:	d01c      	beq.n	800a73e <__gethex+0x3fe>
 800a704:	3201      	adds	r2, #1
 800a706:	6002      	str	r2, [r0, #0]
 800a708:	2f02      	cmp	r7, #2
 800a70a:	f104 0314 	add.w	r3, r4, #20
 800a70e:	d13f      	bne.n	800a790 <__gethex+0x450>
 800a710:	f8d8 2000 	ldr.w	r2, [r8]
 800a714:	3a01      	subs	r2, #1
 800a716:	42b2      	cmp	r2, r6
 800a718:	d10a      	bne.n	800a730 <__gethex+0x3f0>
 800a71a:	1171      	asrs	r1, r6, #5
 800a71c:	2201      	movs	r2, #1
 800a71e:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a722:	f006 061f 	and.w	r6, r6, #31
 800a726:	fa02 f606 	lsl.w	r6, r2, r6
 800a72a:	421e      	tst	r6, r3
 800a72c:	bf18      	it	ne
 800a72e:	4617      	movne	r7, r2
 800a730:	f047 0720 	orr.w	r7, r7, #32
 800a734:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800a736:	601c      	str	r4, [r3, #0]
 800a738:	9b04      	ldr	r3, [sp, #16]
 800a73a:	601d      	str	r5, [r3, #0]
 800a73c:	e695      	b.n	800a46a <__gethex+0x12a>
 800a73e:	4299      	cmp	r1, r3
 800a740:	f843 cc04 	str.w	ip, [r3, #-4]
 800a744:	d8d8      	bhi.n	800a6f8 <__gethex+0x3b8>
 800a746:	68a3      	ldr	r3, [r4, #8]
 800a748:	459b      	cmp	fp, r3
 800a74a:	db19      	blt.n	800a780 <__gethex+0x440>
 800a74c:	6861      	ldr	r1, [r4, #4]
 800a74e:	ee18 0a10 	vmov	r0, s16
 800a752:	3101      	adds	r1, #1
 800a754:	f000 f928 	bl	800a9a8 <_Balloc>
 800a758:	4681      	mov	r9, r0
 800a75a:	b918      	cbnz	r0, 800a764 <__gethex+0x424>
 800a75c:	4b1a      	ldr	r3, [pc, #104]	; (800a7c8 <__gethex+0x488>)
 800a75e:	4602      	mov	r2, r0
 800a760:	2184      	movs	r1, #132	; 0x84
 800a762:	e6a8      	b.n	800a4b6 <__gethex+0x176>
 800a764:	6922      	ldr	r2, [r4, #16]
 800a766:	3202      	adds	r2, #2
 800a768:	f104 010c 	add.w	r1, r4, #12
 800a76c:	0092      	lsls	r2, r2, #2
 800a76e:	300c      	adds	r0, #12
 800a770:	f000 f90c 	bl	800a98c <memcpy>
 800a774:	4621      	mov	r1, r4
 800a776:	ee18 0a10 	vmov	r0, s16
 800a77a:	f000 f955 	bl	800aa28 <_Bfree>
 800a77e:	464c      	mov	r4, r9
 800a780:	6923      	ldr	r3, [r4, #16]
 800a782:	1c5a      	adds	r2, r3, #1
 800a784:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a788:	6122      	str	r2, [r4, #16]
 800a78a:	2201      	movs	r2, #1
 800a78c:	615a      	str	r2, [r3, #20]
 800a78e:	e7bb      	b.n	800a708 <__gethex+0x3c8>
 800a790:	6922      	ldr	r2, [r4, #16]
 800a792:	455a      	cmp	r2, fp
 800a794:	dd0b      	ble.n	800a7ae <__gethex+0x46e>
 800a796:	2101      	movs	r1, #1
 800a798:	4620      	mov	r0, r4
 800a79a:	f7ff fd69 	bl	800a270 <rshift>
 800a79e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7a2:	3501      	adds	r5, #1
 800a7a4:	42ab      	cmp	r3, r5
 800a7a6:	f6ff aed0 	blt.w	800a54a <__gethex+0x20a>
 800a7aa:	2701      	movs	r7, #1
 800a7ac:	e7c0      	b.n	800a730 <__gethex+0x3f0>
 800a7ae:	f016 061f 	ands.w	r6, r6, #31
 800a7b2:	d0fa      	beq.n	800a7aa <__gethex+0x46a>
 800a7b4:	4453      	add	r3, sl
 800a7b6:	f1c6 0620 	rsb	r6, r6, #32
 800a7ba:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800a7be:	f000 f9e5 	bl	800ab8c <__hi0bits>
 800a7c2:	42b0      	cmp	r0, r6
 800a7c4:	dbe7      	blt.n	800a796 <__gethex+0x456>
 800a7c6:	e7f0      	b.n	800a7aa <__gethex+0x46a>
 800a7c8:	0800c729 	.word	0x0800c729

0800a7cc <L_shift>:
 800a7cc:	f1c2 0208 	rsb	r2, r2, #8
 800a7d0:	0092      	lsls	r2, r2, #2
 800a7d2:	b570      	push	{r4, r5, r6, lr}
 800a7d4:	f1c2 0620 	rsb	r6, r2, #32
 800a7d8:	6843      	ldr	r3, [r0, #4]
 800a7da:	6804      	ldr	r4, [r0, #0]
 800a7dc:	fa03 f506 	lsl.w	r5, r3, r6
 800a7e0:	432c      	orrs	r4, r5
 800a7e2:	40d3      	lsrs	r3, r2
 800a7e4:	6004      	str	r4, [r0, #0]
 800a7e6:	f840 3f04 	str.w	r3, [r0, #4]!
 800a7ea:	4288      	cmp	r0, r1
 800a7ec:	d3f4      	bcc.n	800a7d8 <L_shift+0xc>
 800a7ee:	bd70      	pop	{r4, r5, r6, pc}

0800a7f0 <__match>:
 800a7f0:	b530      	push	{r4, r5, lr}
 800a7f2:	6803      	ldr	r3, [r0, #0]
 800a7f4:	3301      	adds	r3, #1
 800a7f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a7fa:	b914      	cbnz	r4, 800a802 <__match+0x12>
 800a7fc:	6003      	str	r3, [r0, #0]
 800a7fe:	2001      	movs	r0, #1
 800a800:	bd30      	pop	{r4, r5, pc}
 800a802:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a806:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800a80a:	2d19      	cmp	r5, #25
 800a80c:	bf98      	it	ls
 800a80e:	3220      	addls	r2, #32
 800a810:	42a2      	cmp	r2, r4
 800a812:	d0f0      	beq.n	800a7f6 <__match+0x6>
 800a814:	2000      	movs	r0, #0
 800a816:	e7f3      	b.n	800a800 <__match+0x10>

0800a818 <__hexnan>:
 800a818:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a81c:	680b      	ldr	r3, [r1, #0]
 800a81e:	115e      	asrs	r6, r3, #5
 800a820:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800a824:	f013 031f 	ands.w	r3, r3, #31
 800a828:	b087      	sub	sp, #28
 800a82a:	bf18      	it	ne
 800a82c:	3604      	addne	r6, #4
 800a82e:	2500      	movs	r5, #0
 800a830:	1f37      	subs	r7, r6, #4
 800a832:	4690      	mov	r8, r2
 800a834:	6802      	ldr	r2, [r0, #0]
 800a836:	9301      	str	r3, [sp, #4]
 800a838:	4682      	mov	sl, r0
 800a83a:	f846 5c04 	str.w	r5, [r6, #-4]
 800a83e:	46b9      	mov	r9, r7
 800a840:	463c      	mov	r4, r7
 800a842:	9502      	str	r5, [sp, #8]
 800a844:	46ab      	mov	fp, r5
 800a846:	7851      	ldrb	r1, [r2, #1]
 800a848:	1c53      	adds	r3, r2, #1
 800a84a:	9303      	str	r3, [sp, #12]
 800a84c:	b341      	cbz	r1, 800a8a0 <__hexnan+0x88>
 800a84e:	4608      	mov	r0, r1
 800a850:	9205      	str	r2, [sp, #20]
 800a852:	9104      	str	r1, [sp, #16]
 800a854:	f7ff fd5e 	bl	800a314 <__hexdig_fun>
 800a858:	2800      	cmp	r0, #0
 800a85a:	d14f      	bne.n	800a8fc <__hexnan+0xe4>
 800a85c:	9904      	ldr	r1, [sp, #16]
 800a85e:	9a05      	ldr	r2, [sp, #20]
 800a860:	2920      	cmp	r1, #32
 800a862:	d818      	bhi.n	800a896 <__hexnan+0x7e>
 800a864:	9b02      	ldr	r3, [sp, #8]
 800a866:	459b      	cmp	fp, r3
 800a868:	dd13      	ble.n	800a892 <__hexnan+0x7a>
 800a86a:	454c      	cmp	r4, r9
 800a86c:	d206      	bcs.n	800a87c <__hexnan+0x64>
 800a86e:	2d07      	cmp	r5, #7
 800a870:	dc04      	bgt.n	800a87c <__hexnan+0x64>
 800a872:	462a      	mov	r2, r5
 800a874:	4649      	mov	r1, r9
 800a876:	4620      	mov	r0, r4
 800a878:	f7ff ffa8 	bl	800a7cc <L_shift>
 800a87c:	4544      	cmp	r4, r8
 800a87e:	d950      	bls.n	800a922 <__hexnan+0x10a>
 800a880:	2300      	movs	r3, #0
 800a882:	f1a4 0904 	sub.w	r9, r4, #4
 800a886:	f844 3c04 	str.w	r3, [r4, #-4]
 800a88a:	f8cd b008 	str.w	fp, [sp, #8]
 800a88e:	464c      	mov	r4, r9
 800a890:	461d      	mov	r5, r3
 800a892:	9a03      	ldr	r2, [sp, #12]
 800a894:	e7d7      	b.n	800a846 <__hexnan+0x2e>
 800a896:	2929      	cmp	r1, #41	; 0x29
 800a898:	d156      	bne.n	800a948 <__hexnan+0x130>
 800a89a:	3202      	adds	r2, #2
 800a89c:	f8ca 2000 	str.w	r2, [sl]
 800a8a0:	f1bb 0f00 	cmp.w	fp, #0
 800a8a4:	d050      	beq.n	800a948 <__hexnan+0x130>
 800a8a6:	454c      	cmp	r4, r9
 800a8a8:	d206      	bcs.n	800a8b8 <__hexnan+0xa0>
 800a8aa:	2d07      	cmp	r5, #7
 800a8ac:	dc04      	bgt.n	800a8b8 <__hexnan+0xa0>
 800a8ae:	462a      	mov	r2, r5
 800a8b0:	4649      	mov	r1, r9
 800a8b2:	4620      	mov	r0, r4
 800a8b4:	f7ff ff8a 	bl	800a7cc <L_shift>
 800a8b8:	4544      	cmp	r4, r8
 800a8ba:	d934      	bls.n	800a926 <__hexnan+0x10e>
 800a8bc:	f1a8 0204 	sub.w	r2, r8, #4
 800a8c0:	4623      	mov	r3, r4
 800a8c2:	f853 1b04 	ldr.w	r1, [r3], #4
 800a8c6:	f842 1f04 	str.w	r1, [r2, #4]!
 800a8ca:	429f      	cmp	r7, r3
 800a8cc:	d2f9      	bcs.n	800a8c2 <__hexnan+0xaa>
 800a8ce:	1b3b      	subs	r3, r7, r4
 800a8d0:	f023 0303 	bic.w	r3, r3, #3
 800a8d4:	3304      	adds	r3, #4
 800a8d6:	3401      	adds	r4, #1
 800a8d8:	3e03      	subs	r6, #3
 800a8da:	42b4      	cmp	r4, r6
 800a8dc:	bf88      	it	hi
 800a8de:	2304      	movhi	r3, #4
 800a8e0:	4443      	add	r3, r8
 800a8e2:	2200      	movs	r2, #0
 800a8e4:	f843 2b04 	str.w	r2, [r3], #4
 800a8e8:	429f      	cmp	r7, r3
 800a8ea:	d2fb      	bcs.n	800a8e4 <__hexnan+0xcc>
 800a8ec:	683b      	ldr	r3, [r7, #0]
 800a8ee:	b91b      	cbnz	r3, 800a8f8 <__hexnan+0xe0>
 800a8f0:	4547      	cmp	r7, r8
 800a8f2:	d127      	bne.n	800a944 <__hexnan+0x12c>
 800a8f4:	2301      	movs	r3, #1
 800a8f6:	603b      	str	r3, [r7, #0]
 800a8f8:	2005      	movs	r0, #5
 800a8fa:	e026      	b.n	800a94a <__hexnan+0x132>
 800a8fc:	3501      	adds	r5, #1
 800a8fe:	2d08      	cmp	r5, #8
 800a900:	f10b 0b01 	add.w	fp, fp, #1
 800a904:	dd06      	ble.n	800a914 <__hexnan+0xfc>
 800a906:	4544      	cmp	r4, r8
 800a908:	d9c3      	bls.n	800a892 <__hexnan+0x7a>
 800a90a:	2300      	movs	r3, #0
 800a90c:	f844 3c04 	str.w	r3, [r4, #-4]
 800a910:	2501      	movs	r5, #1
 800a912:	3c04      	subs	r4, #4
 800a914:	6822      	ldr	r2, [r4, #0]
 800a916:	f000 000f 	and.w	r0, r0, #15
 800a91a:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800a91e:	6022      	str	r2, [r4, #0]
 800a920:	e7b7      	b.n	800a892 <__hexnan+0x7a>
 800a922:	2508      	movs	r5, #8
 800a924:	e7b5      	b.n	800a892 <__hexnan+0x7a>
 800a926:	9b01      	ldr	r3, [sp, #4]
 800a928:	2b00      	cmp	r3, #0
 800a92a:	d0df      	beq.n	800a8ec <__hexnan+0xd4>
 800a92c:	f04f 32ff 	mov.w	r2, #4294967295
 800a930:	f1c3 0320 	rsb	r3, r3, #32
 800a934:	fa22 f303 	lsr.w	r3, r2, r3
 800a938:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800a93c:	401a      	ands	r2, r3
 800a93e:	f846 2c04 	str.w	r2, [r6, #-4]
 800a942:	e7d3      	b.n	800a8ec <__hexnan+0xd4>
 800a944:	3f04      	subs	r7, #4
 800a946:	e7d1      	b.n	800a8ec <__hexnan+0xd4>
 800a948:	2004      	movs	r0, #4
 800a94a:	b007      	add	sp, #28
 800a94c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800a950 <_localeconv_r>:
 800a950:	4800      	ldr	r0, [pc, #0]	; (800a954 <_localeconv_r+0x4>)
 800a952:	4770      	bx	lr
 800a954:	20000174 	.word	0x20000174

0800a958 <malloc>:
 800a958:	4b02      	ldr	r3, [pc, #8]	; (800a964 <malloc+0xc>)
 800a95a:	4601      	mov	r1, r0
 800a95c:	6818      	ldr	r0, [r3, #0]
 800a95e:	f000 bd67 	b.w	800b430 <_malloc_r>
 800a962:	bf00      	nop
 800a964:	2000001c 	.word	0x2000001c

0800a968 <__ascii_mbtowc>:
 800a968:	b082      	sub	sp, #8
 800a96a:	b901      	cbnz	r1, 800a96e <__ascii_mbtowc+0x6>
 800a96c:	a901      	add	r1, sp, #4
 800a96e:	b142      	cbz	r2, 800a982 <__ascii_mbtowc+0x1a>
 800a970:	b14b      	cbz	r3, 800a986 <__ascii_mbtowc+0x1e>
 800a972:	7813      	ldrb	r3, [r2, #0]
 800a974:	600b      	str	r3, [r1, #0]
 800a976:	7812      	ldrb	r2, [r2, #0]
 800a978:	1e10      	subs	r0, r2, #0
 800a97a:	bf18      	it	ne
 800a97c:	2001      	movne	r0, #1
 800a97e:	b002      	add	sp, #8
 800a980:	4770      	bx	lr
 800a982:	4610      	mov	r0, r2
 800a984:	e7fb      	b.n	800a97e <__ascii_mbtowc+0x16>
 800a986:	f06f 0001 	mvn.w	r0, #1
 800a98a:	e7f8      	b.n	800a97e <__ascii_mbtowc+0x16>

0800a98c <memcpy>:
 800a98c:	440a      	add	r2, r1
 800a98e:	4291      	cmp	r1, r2
 800a990:	f100 33ff 	add.w	r3, r0, #4294967295
 800a994:	d100      	bne.n	800a998 <memcpy+0xc>
 800a996:	4770      	bx	lr
 800a998:	b510      	push	{r4, lr}
 800a99a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a99e:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a9a2:	4291      	cmp	r1, r2
 800a9a4:	d1f9      	bne.n	800a99a <memcpy+0xe>
 800a9a6:	bd10      	pop	{r4, pc}

0800a9a8 <_Balloc>:
 800a9a8:	b570      	push	{r4, r5, r6, lr}
 800a9aa:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800a9ac:	4604      	mov	r4, r0
 800a9ae:	460d      	mov	r5, r1
 800a9b0:	b976      	cbnz	r6, 800a9d0 <_Balloc+0x28>
 800a9b2:	2010      	movs	r0, #16
 800a9b4:	f7ff ffd0 	bl	800a958 <malloc>
 800a9b8:	4602      	mov	r2, r0
 800a9ba:	6260      	str	r0, [r4, #36]	; 0x24
 800a9bc:	b920      	cbnz	r0, 800a9c8 <_Balloc+0x20>
 800a9be:	4b18      	ldr	r3, [pc, #96]	; (800aa20 <_Balloc+0x78>)
 800a9c0:	4818      	ldr	r0, [pc, #96]	; (800aa24 <_Balloc+0x7c>)
 800a9c2:	2166      	movs	r1, #102	; 0x66
 800a9c4:	f7fe fda8 	bl	8009518 <__assert_func>
 800a9c8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800a9cc:	6006      	str	r6, [r0, #0]
 800a9ce:	60c6      	str	r6, [r0, #12]
 800a9d0:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800a9d2:	68f3      	ldr	r3, [r6, #12]
 800a9d4:	b183      	cbz	r3, 800a9f8 <_Balloc+0x50>
 800a9d6:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800a9d8:	68db      	ldr	r3, [r3, #12]
 800a9da:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800a9de:	b9b8      	cbnz	r0, 800aa10 <_Balloc+0x68>
 800a9e0:	2101      	movs	r1, #1
 800a9e2:	fa01 f605 	lsl.w	r6, r1, r5
 800a9e6:	1d72      	adds	r2, r6, #5
 800a9e8:	0092      	lsls	r2, r2, #2
 800a9ea:	4620      	mov	r0, r4
 800a9ec:	f000 fc9d 	bl	800b32a <_calloc_r>
 800a9f0:	b160      	cbz	r0, 800aa0c <_Balloc+0x64>
 800a9f2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800a9f6:	e00e      	b.n	800aa16 <_Balloc+0x6e>
 800a9f8:	2221      	movs	r2, #33	; 0x21
 800a9fa:	2104      	movs	r1, #4
 800a9fc:	4620      	mov	r0, r4
 800a9fe:	f000 fc94 	bl	800b32a <_calloc_r>
 800aa02:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800aa04:	60f0      	str	r0, [r6, #12]
 800aa06:	68db      	ldr	r3, [r3, #12]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d1e4      	bne.n	800a9d6 <_Balloc+0x2e>
 800aa0c:	2000      	movs	r0, #0
 800aa0e:	bd70      	pop	{r4, r5, r6, pc}
 800aa10:	6802      	ldr	r2, [r0, #0]
 800aa12:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800aa16:	2300      	movs	r3, #0
 800aa18:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800aa1c:	e7f7      	b.n	800aa0e <_Balloc+0x66>
 800aa1e:	bf00      	nop
 800aa20:	0800c510 	.word	0x0800c510
 800aa24:	0800c7b4 	.word	0x0800c7b4

0800aa28 <_Bfree>:
 800aa28:	b570      	push	{r4, r5, r6, lr}
 800aa2a:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800aa2c:	4605      	mov	r5, r0
 800aa2e:	460c      	mov	r4, r1
 800aa30:	b976      	cbnz	r6, 800aa50 <_Bfree+0x28>
 800aa32:	2010      	movs	r0, #16
 800aa34:	f7ff ff90 	bl	800a958 <malloc>
 800aa38:	4602      	mov	r2, r0
 800aa3a:	6268      	str	r0, [r5, #36]	; 0x24
 800aa3c:	b920      	cbnz	r0, 800aa48 <_Bfree+0x20>
 800aa3e:	4b09      	ldr	r3, [pc, #36]	; (800aa64 <_Bfree+0x3c>)
 800aa40:	4809      	ldr	r0, [pc, #36]	; (800aa68 <_Bfree+0x40>)
 800aa42:	218a      	movs	r1, #138	; 0x8a
 800aa44:	f7fe fd68 	bl	8009518 <__assert_func>
 800aa48:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800aa4c:	6006      	str	r6, [r0, #0]
 800aa4e:	60c6      	str	r6, [r0, #12]
 800aa50:	b13c      	cbz	r4, 800aa62 <_Bfree+0x3a>
 800aa52:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800aa54:	6862      	ldr	r2, [r4, #4]
 800aa56:	68db      	ldr	r3, [r3, #12]
 800aa58:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800aa5c:	6021      	str	r1, [r4, #0]
 800aa5e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800aa62:	bd70      	pop	{r4, r5, r6, pc}
 800aa64:	0800c510 	.word	0x0800c510
 800aa68:	0800c7b4 	.word	0x0800c7b4

0800aa6c <__multadd>:
 800aa6c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800aa70:	690d      	ldr	r5, [r1, #16]
 800aa72:	4607      	mov	r7, r0
 800aa74:	460c      	mov	r4, r1
 800aa76:	461e      	mov	r6, r3
 800aa78:	f101 0c14 	add.w	ip, r1, #20
 800aa7c:	2000      	movs	r0, #0
 800aa7e:	f8dc 3000 	ldr.w	r3, [ip]
 800aa82:	b299      	uxth	r1, r3
 800aa84:	fb02 6101 	mla	r1, r2, r1, r6
 800aa88:	0c1e      	lsrs	r6, r3, #16
 800aa8a:	0c0b      	lsrs	r3, r1, #16
 800aa8c:	fb02 3306 	mla	r3, r2, r6, r3
 800aa90:	b289      	uxth	r1, r1
 800aa92:	3001      	adds	r0, #1
 800aa94:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800aa98:	4285      	cmp	r5, r0
 800aa9a:	f84c 1b04 	str.w	r1, [ip], #4
 800aa9e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800aaa2:	dcec      	bgt.n	800aa7e <__multadd+0x12>
 800aaa4:	b30e      	cbz	r6, 800aaea <__multadd+0x7e>
 800aaa6:	68a3      	ldr	r3, [r4, #8]
 800aaa8:	42ab      	cmp	r3, r5
 800aaaa:	dc19      	bgt.n	800aae0 <__multadd+0x74>
 800aaac:	6861      	ldr	r1, [r4, #4]
 800aaae:	4638      	mov	r0, r7
 800aab0:	3101      	adds	r1, #1
 800aab2:	f7ff ff79 	bl	800a9a8 <_Balloc>
 800aab6:	4680      	mov	r8, r0
 800aab8:	b928      	cbnz	r0, 800aac6 <__multadd+0x5a>
 800aaba:	4602      	mov	r2, r0
 800aabc:	4b0c      	ldr	r3, [pc, #48]	; (800aaf0 <__multadd+0x84>)
 800aabe:	480d      	ldr	r0, [pc, #52]	; (800aaf4 <__multadd+0x88>)
 800aac0:	21b5      	movs	r1, #181	; 0xb5
 800aac2:	f7fe fd29 	bl	8009518 <__assert_func>
 800aac6:	6922      	ldr	r2, [r4, #16]
 800aac8:	3202      	adds	r2, #2
 800aaca:	f104 010c 	add.w	r1, r4, #12
 800aace:	0092      	lsls	r2, r2, #2
 800aad0:	300c      	adds	r0, #12
 800aad2:	f7ff ff5b 	bl	800a98c <memcpy>
 800aad6:	4621      	mov	r1, r4
 800aad8:	4638      	mov	r0, r7
 800aada:	f7ff ffa5 	bl	800aa28 <_Bfree>
 800aade:	4644      	mov	r4, r8
 800aae0:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800aae4:	3501      	adds	r5, #1
 800aae6:	615e      	str	r6, [r3, #20]
 800aae8:	6125      	str	r5, [r4, #16]
 800aaea:	4620      	mov	r0, r4
 800aaec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aaf0:	0800c729 	.word	0x0800c729
 800aaf4:	0800c7b4 	.word	0x0800c7b4

0800aaf8 <__s2b>:
 800aaf8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800aafc:	460c      	mov	r4, r1
 800aafe:	4615      	mov	r5, r2
 800ab00:	461f      	mov	r7, r3
 800ab02:	2209      	movs	r2, #9
 800ab04:	3308      	adds	r3, #8
 800ab06:	4606      	mov	r6, r0
 800ab08:	fb93 f3f2 	sdiv	r3, r3, r2
 800ab0c:	2100      	movs	r1, #0
 800ab0e:	2201      	movs	r2, #1
 800ab10:	429a      	cmp	r2, r3
 800ab12:	db09      	blt.n	800ab28 <__s2b+0x30>
 800ab14:	4630      	mov	r0, r6
 800ab16:	f7ff ff47 	bl	800a9a8 <_Balloc>
 800ab1a:	b940      	cbnz	r0, 800ab2e <__s2b+0x36>
 800ab1c:	4602      	mov	r2, r0
 800ab1e:	4b19      	ldr	r3, [pc, #100]	; (800ab84 <__s2b+0x8c>)
 800ab20:	4819      	ldr	r0, [pc, #100]	; (800ab88 <__s2b+0x90>)
 800ab22:	21ce      	movs	r1, #206	; 0xce
 800ab24:	f7fe fcf8 	bl	8009518 <__assert_func>
 800ab28:	0052      	lsls	r2, r2, #1
 800ab2a:	3101      	adds	r1, #1
 800ab2c:	e7f0      	b.n	800ab10 <__s2b+0x18>
 800ab2e:	9b08      	ldr	r3, [sp, #32]
 800ab30:	6143      	str	r3, [r0, #20]
 800ab32:	2d09      	cmp	r5, #9
 800ab34:	f04f 0301 	mov.w	r3, #1
 800ab38:	6103      	str	r3, [r0, #16]
 800ab3a:	dd16      	ble.n	800ab6a <__s2b+0x72>
 800ab3c:	f104 0909 	add.w	r9, r4, #9
 800ab40:	46c8      	mov	r8, r9
 800ab42:	442c      	add	r4, r5
 800ab44:	f818 3b01 	ldrb.w	r3, [r8], #1
 800ab48:	4601      	mov	r1, r0
 800ab4a:	3b30      	subs	r3, #48	; 0x30
 800ab4c:	220a      	movs	r2, #10
 800ab4e:	4630      	mov	r0, r6
 800ab50:	f7ff ff8c 	bl	800aa6c <__multadd>
 800ab54:	45a0      	cmp	r8, r4
 800ab56:	d1f5      	bne.n	800ab44 <__s2b+0x4c>
 800ab58:	f1a5 0408 	sub.w	r4, r5, #8
 800ab5c:	444c      	add	r4, r9
 800ab5e:	1b2d      	subs	r5, r5, r4
 800ab60:	1963      	adds	r3, r4, r5
 800ab62:	42bb      	cmp	r3, r7
 800ab64:	db04      	blt.n	800ab70 <__s2b+0x78>
 800ab66:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ab6a:	340a      	adds	r4, #10
 800ab6c:	2509      	movs	r5, #9
 800ab6e:	e7f6      	b.n	800ab5e <__s2b+0x66>
 800ab70:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ab74:	4601      	mov	r1, r0
 800ab76:	3b30      	subs	r3, #48	; 0x30
 800ab78:	220a      	movs	r2, #10
 800ab7a:	4630      	mov	r0, r6
 800ab7c:	f7ff ff76 	bl	800aa6c <__multadd>
 800ab80:	e7ee      	b.n	800ab60 <__s2b+0x68>
 800ab82:	bf00      	nop
 800ab84:	0800c729 	.word	0x0800c729
 800ab88:	0800c7b4 	.word	0x0800c7b4

0800ab8c <__hi0bits>:
 800ab8c:	0c03      	lsrs	r3, r0, #16
 800ab8e:	041b      	lsls	r3, r3, #16
 800ab90:	b9d3      	cbnz	r3, 800abc8 <__hi0bits+0x3c>
 800ab92:	0400      	lsls	r0, r0, #16
 800ab94:	2310      	movs	r3, #16
 800ab96:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800ab9a:	bf04      	itt	eq
 800ab9c:	0200      	lsleq	r0, r0, #8
 800ab9e:	3308      	addeq	r3, #8
 800aba0:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800aba4:	bf04      	itt	eq
 800aba6:	0100      	lsleq	r0, r0, #4
 800aba8:	3304      	addeq	r3, #4
 800abaa:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800abae:	bf04      	itt	eq
 800abb0:	0080      	lsleq	r0, r0, #2
 800abb2:	3302      	addeq	r3, #2
 800abb4:	2800      	cmp	r0, #0
 800abb6:	db05      	blt.n	800abc4 <__hi0bits+0x38>
 800abb8:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800abbc:	f103 0301 	add.w	r3, r3, #1
 800abc0:	bf08      	it	eq
 800abc2:	2320      	moveq	r3, #32
 800abc4:	4618      	mov	r0, r3
 800abc6:	4770      	bx	lr
 800abc8:	2300      	movs	r3, #0
 800abca:	e7e4      	b.n	800ab96 <__hi0bits+0xa>

0800abcc <__lo0bits>:
 800abcc:	6803      	ldr	r3, [r0, #0]
 800abce:	f013 0207 	ands.w	r2, r3, #7
 800abd2:	4601      	mov	r1, r0
 800abd4:	d00b      	beq.n	800abee <__lo0bits+0x22>
 800abd6:	07da      	lsls	r2, r3, #31
 800abd8:	d423      	bmi.n	800ac22 <__lo0bits+0x56>
 800abda:	0798      	lsls	r0, r3, #30
 800abdc:	bf49      	itett	mi
 800abde:	085b      	lsrmi	r3, r3, #1
 800abe0:	089b      	lsrpl	r3, r3, #2
 800abe2:	2001      	movmi	r0, #1
 800abe4:	600b      	strmi	r3, [r1, #0]
 800abe6:	bf5c      	itt	pl
 800abe8:	600b      	strpl	r3, [r1, #0]
 800abea:	2002      	movpl	r0, #2
 800abec:	4770      	bx	lr
 800abee:	b298      	uxth	r0, r3
 800abf0:	b9a8      	cbnz	r0, 800ac1e <__lo0bits+0x52>
 800abf2:	0c1b      	lsrs	r3, r3, #16
 800abf4:	2010      	movs	r0, #16
 800abf6:	b2da      	uxtb	r2, r3
 800abf8:	b90a      	cbnz	r2, 800abfe <__lo0bits+0x32>
 800abfa:	3008      	adds	r0, #8
 800abfc:	0a1b      	lsrs	r3, r3, #8
 800abfe:	071a      	lsls	r2, r3, #28
 800ac00:	bf04      	itt	eq
 800ac02:	091b      	lsreq	r3, r3, #4
 800ac04:	3004      	addeq	r0, #4
 800ac06:	079a      	lsls	r2, r3, #30
 800ac08:	bf04      	itt	eq
 800ac0a:	089b      	lsreq	r3, r3, #2
 800ac0c:	3002      	addeq	r0, #2
 800ac0e:	07da      	lsls	r2, r3, #31
 800ac10:	d403      	bmi.n	800ac1a <__lo0bits+0x4e>
 800ac12:	085b      	lsrs	r3, r3, #1
 800ac14:	f100 0001 	add.w	r0, r0, #1
 800ac18:	d005      	beq.n	800ac26 <__lo0bits+0x5a>
 800ac1a:	600b      	str	r3, [r1, #0]
 800ac1c:	4770      	bx	lr
 800ac1e:	4610      	mov	r0, r2
 800ac20:	e7e9      	b.n	800abf6 <__lo0bits+0x2a>
 800ac22:	2000      	movs	r0, #0
 800ac24:	4770      	bx	lr
 800ac26:	2020      	movs	r0, #32
 800ac28:	4770      	bx	lr
	...

0800ac2c <__i2b>:
 800ac2c:	b510      	push	{r4, lr}
 800ac2e:	460c      	mov	r4, r1
 800ac30:	2101      	movs	r1, #1
 800ac32:	f7ff feb9 	bl	800a9a8 <_Balloc>
 800ac36:	4602      	mov	r2, r0
 800ac38:	b928      	cbnz	r0, 800ac46 <__i2b+0x1a>
 800ac3a:	4b05      	ldr	r3, [pc, #20]	; (800ac50 <__i2b+0x24>)
 800ac3c:	4805      	ldr	r0, [pc, #20]	; (800ac54 <__i2b+0x28>)
 800ac3e:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800ac42:	f7fe fc69 	bl	8009518 <__assert_func>
 800ac46:	2301      	movs	r3, #1
 800ac48:	6144      	str	r4, [r0, #20]
 800ac4a:	6103      	str	r3, [r0, #16]
 800ac4c:	bd10      	pop	{r4, pc}
 800ac4e:	bf00      	nop
 800ac50:	0800c729 	.word	0x0800c729
 800ac54:	0800c7b4 	.word	0x0800c7b4

0800ac58 <__multiply>:
 800ac58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ac5c:	4691      	mov	r9, r2
 800ac5e:	690a      	ldr	r2, [r1, #16]
 800ac60:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800ac64:	429a      	cmp	r2, r3
 800ac66:	bfb8      	it	lt
 800ac68:	460b      	movlt	r3, r1
 800ac6a:	460c      	mov	r4, r1
 800ac6c:	bfbc      	itt	lt
 800ac6e:	464c      	movlt	r4, r9
 800ac70:	4699      	movlt	r9, r3
 800ac72:	6927      	ldr	r7, [r4, #16]
 800ac74:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800ac78:	68a3      	ldr	r3, [r4, #8]
 800ac7a:	6861      	ldr	r1, [r4, #4]
 800ac7c:	eb07 060a 	add.w	r6, r7, sl
 800ac80:	42b3      	cmp	r3, r6
 800ac82:	b085      	sub	sp, #20
 800ac84:	bfb8      	it	lt
 800ac86:	3101      	addlt	r1, #1
 800ac88:	f7ff fe8e 	bl	800a9a8 <_Balloc>
 800ac8c:	b930      	cbnz	r0, 800ac9c <__multiply+0x44>
 800ac8e:	4602      	mov	r2, r0
 800ac90:	4b44      	ldr	r3, [pc, #272]	; (800ada4 <__multiply+0x14c>)
 800ac92:	4845      	ldr	r0, [pc, #276]	; (800ada8 <__multiply+0x150>)
 800ac94:	f240 115d 	movw	r1, #349	; 0x15d
 800ac98:	f7fe fc3e 	bl	8009518 <__assert_func>
 800ac9c:	f100 0514 	add.w	r5, r0, #20
 800aca0:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800aca4:	462b      	mov	r3, r5
 800aca6:	2200      	movs	r2, #0
 800aca8:	4543      	cmp	r3, r8
 800acaa:	d321      	bcc.n	800acf0 <__multiply+0x98>
 800acac:	f104 0314 	add.w	r3, r4, #20
 800acb0:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800acb4:	f109 0314 	add.w	r3, r9, #20
 800acb8:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800acbc:	9202      	str	r2, [sp, #8]
 800acbe:	1b3a      	subs	r2, r7, r4
 800acc0:	3a15      	subs	r2, #21
 800acc2:	f022 0203 	bic.w	r2, r2, #3
 800acc6:	3204      	adds	r2, #4
 800acc8:	f104 0115 	add.w	r1, r4, #21
 800accc:	428f      	cmp	r7, r1
 800acce:	bf38      	it	cc
 800acd0:	2204      	movcc	r2, #4
 800acd2:	9201      	str	r2, [sp, #4]
 800acd4:	9a02      	ldr	r2, [sp, #8]
 800acd6:	9303      	str	r3, [sp, #12]
 800acd8:	429a      	cmp	r2, r3
 800acda:	d80c      	bhi.n	800acf6 <__multiply+0x9e>
 800acdc:	2e00      	cmp	r6, #0
 800acde:	dd03      	ble.n	800ace8 <__multiply+0x90>
 800ace0:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800ace4:	2b00      	cmp	r3, #0
 800ace6:	d05a      	beq.n	800ad9e <__multiply+0x146>
 800ace8:	6106      	str	r6, [r0, #16]
 800acea:	b005      	add	sp, #20
 800acec:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800acf0:	f843 2b04 	str.w	r2, [r3], #4
 800acf4:	e7d8      	b.n	800aca8 <__multiply+0x50>
 800acf6:	f8b3 a000 	ldrh.w	sl, [r3]
 800acfa:	f1ba 0f00 	cmp.w	sl, #0
 800acfe:	d024      	beq.n	800ad4a <__multiply+0xf2>
 800ad00:	f104 0e14 	add.w	lr, r4, #20
 800ad04:	46a9      	mov	r9, r5
 800ad06:	f04f 0c00 	mov.w	ip, #0
 800ad0a:	f85e 2b04 	ldr.w	r2, [lr], #4
 800ad0e:	f8d9 1000 	ldr.w	r1, [r9]
 800ad12:	fa1f fb82 	uxth.w	fp, r2
 800ad16:	b289      	uxth	r1, r1
 800ad18:	fb0a 110b 	mla	r1, sl, fp, r1
 800ad1c:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800ad20:	f8d9 2000 	ldr.w	r2, [r9]
 800ad24:	4461      	add	r1, ip
 800ad26:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad2a:	fb0a c20b 	mla	r2, sl, fp, ip
 800ad2e:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800ad32:	b289      	uxth	r1, r1
 800ad34:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800ad38:	4577      	cmp	r7, lr
 800ad3a:	f849 1b04 	str.w	r1, [r9], #4
 800ad3e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800ad42:	d8e2      	bhi.n	800ad0a <__multiply+0xb2>
 800ad44:	9a01      	ldr	r2, [sp, #4]
 800ad46:	f845 c002 	str.w	ip, [r5, r2]
 800ad4a:	9a03      	ldr	r2, [sp, #12]
 800ad4c:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800ad50:	3304      	adds	r3, #4
 800ad52:	f1b9 0f00 	cmp.w	r9, #0
 800ad56:	d020      	beq.n	800ad9a <__multiply+0x142>
 800ad58:	6829      	ldr	r1, [r5, #0]
 800ad5a:	f104 0c14 	add.w	ip, r4, #20
 800ad5e:	46ae      	mov	lr, r5
 800ad60:	f04f 0a00 	mov.w	sl, #0
 800ad64:	f8bc b000 	ldrh.w	fp, [ip]
 800ad68:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800ad6c:	fb09 220b 	mla	r2, r9, fp, r2
 800ad70:	4492      	add	sl, r2
 800ad72:	b289      	uxth	r1, r1
 800ad74:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800ad78:	f84e 1b04 	str.w	r1, [lr], #4
 800ad7c:	f85c 2b04 	ldr.w	r2, [ip], #4
 800ad80:	f8be 1000 	ldrh.w	r1, [lr]
 800ad84:	0c12      	lsrs	r2, r2, #16
 800ad86:	fb09 1102 	mla	r1, r9, r2, r1
 800ad8a:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800ad8e:	4567      	cmp	r7, ip
 800ad90:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800ad94:	d8e6      	bhi.n	800ad64 <__multiply+0x10c>
 800ad96:	9a01      	ldr	r2, [sp, #4]
 800ad98:	50a9      	str	r1, [r5, r2]
 800ad9a:	3504      	adds	r5, #4
 800ad9c:	e79a      	b.n	800acd4 <__multiply+0x7c>
 800ad9e:	3e01      	subs	r6, #1
 800ada0:	e79c      	b.n	800acdc <__multiply+0x84>
 800ada2:	bf00      	nop
 800ada4:	0800c729 	.word	0x0800c729
 800ada8:	0800c7b4 	.word	0x0800c7b4

0800adac <__pow5mult>:
 800adac:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800adb0:	4615      	mov	r5, r2
 800adb2:	f012 0203 	ands.w	r2, r2, #3
 800adb6:	4606      	mov	r6, r0
 800adb8:	460f      	mov	r7, r1
 800adba:	d007      	beq.n	800adcc <__pow5mult+0x20>
 800adbc:	4c25      	ldr	r4, [pc, #148]	; (800ae54 <__pow5mult+0xa8>)
 800adbe:	3a01      	subs	r2, #1
 800adc0:	2300      	movs	r3, #0
 800adc2:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800adc6:	f7ff fe51 	bl	800aa6c <__multadd>
 800adca:	4607      	mov	r7, r0
 800adcc:	10ad      	asrs	r5, r5, #2
 800adce:	d03d      	beq.n	800ae4c <__pow5mult+0xa0>
 800add0:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800add2:	b97c      	cbnz	r4, 800adf4 <__pow5mult+0x48>
 800add4:	2010      	movs	r0, #16
 800add6:	f7ff fdbf 	bl	800a958 <malloc>
 800adda:	4602      	mov	r2, r0
 800addc:	6270      	str	r0, [r6, #36]	; 0x24
 800adde:	b928      	cbnz	r0, 800adec <__pow5mult+0x40>
 800ade0:	4b1d      	ldr	r3, [pc, #116]	; (800ae58 <__pow5mult+0xac>)
 800ade2:	481e      	ldr	r0, [pc, #120]	; (800ae5c <__pow5mult+0xb0>)
 800ade4:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800ade8:	f7fe fb96 	bl	8009518 <__assert_func>
 800adec:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800adf0:	6004      	str	r4, [r0, #0]
 800adf2:	60c4      	str	r4, [r0, #12]
 800adf4:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800adf8:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800adfc:	b94c      	cbnz	r4, 800ae12 <__pow5mult+0x66>
 800adfe:	f240 2171 	movw	r1, #625	; 0x271
 800ae02:	4630      	mov	r0, r6
 800ae04:	f7ff ff12 	bl	800ac2c <__i2b>
 800ae08:	2300      	movs	r3, #0
 800ae0a:	f8c8 0008 	str.w	r0, [r8, #8]
 800ae0e:	4604      	mov	r4, r0
 800ae10:	6003      	str	r3, [r0, #0]
 800ae12:	f04f 0900 	mov.w	r9, #0
 800ae16:	07eb      	lsls	r3, r5, #31
 800ae18:	d50a      	bpl.n	800ae30 <__pow5mult+0x84>
 800ae1a:	4639      	mov	r1, r7
 800ae1c:	4622      	mov	r2, r4
 800ae1e:	4630      	mov	r0, r6
 800ae20:	f7ff ff1a 	bl	800ac58 <__multiply>
 800ae24:	4639      	mov	r1, r7
 800ae26:	4680      	mov	r8, r0
 800ae28:	4630      	mov	r0, r6
 800ae2a:	f7ff fdfd 	bl	800aa28 <_Bfree>
 800ae2e:	4647      	mov	r7, r8
 800ae30:	106d      	asrs	r5, r5, #1
 800ae32:	d00b      	beq.n	800ae4c <__pow5mult+0xa0>
 800ae34:	6820      	ldr	r0, [r4, #0]
 800ae36:	b938      	cbnz	r0, 800ae48 <__pow5mult+0x9c>
 800ae38:	4622      	mov	r2, r4
 800ae3a:	4621      	mov	r1, r4
 800ae3c:	4630      	mov	r0, r6
 800ae3e:	f7ff ff0b 	bl	800ac58 <__multiply>
 800ae42:	6020      	str	r0, [r4, #0]
 800ae44:	f8c0 9000 	str.w	r9, [r0]
 800ae48:	4604      	mov	r4, r0
 800ae4a:	e7e4      	b.n	800ae16 <__pow5mult+0x6a>
 800ae4c:	4638      	mov	r0, r7
 800ae4e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800ae52:	bf00      	nop
 800ae54:	0800c900 	.word	0x0800c900
 800ae58:	0800c510 	.word	0x0800c510
 800ae5c:	0800c7b4 	.word	0x0800c7b4

0800ae60 <__lshift>:
 800ae60:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ae64:	460c      	mov	r4, r1
 800ae66:	6849      	ldr	r1, [r1, #4]
 800ae68:	6923      	ldr	r3, [r4, #16]
 800ae6a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800ae6e:	68a3      	ldr	r3, [r4, #8]
 800ae70:	4607      	mov	r7, r0
 800ae72:	4691      	mov	r9, r2
 800ae74:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800ae78:	f108 0601 	add.w	r6, r8, #1
 800ae7c:	42b3      	cmp	r3, r6
 800ae7e:	db0b      	blt.n	800ae98 <__lshift+0x38>
 800ae80:	4638      	mov	r0, r7
 800ae82:	f7ff fd91 	bl	800a9a8 <_Balloc>
 800ae86:	4605      	mov	r5, r0
 800ae88:	b948      	cbnz	r0, 800ae9e <__lshift+0x3e>
 800ae8a:	4602      	mov	r2, r0
 800ae8c:	4b2a      	ldr	r3, [pc, #168]	; (800af38 <__lshift+0xd8>)
 800ae8e:	482b      	ldr	r0, [pc, #172]	; (800af3c <__lshift+0xdc>)
 800ae90:	f240 11d9 	movw	r1, #473	; 0x1d9
 800ae94:	f7fe fb40 	bl	8009518 <__assert_func>
 800ae98:	3101      	adds	r1, #1
 800ae9a:	005b      	lsls	r3, r3, #1
 800ae9c:	e7ee      	b.n	800ae7c <__lshift+0x1c>
 800ae9e:	2300      	movs	r3, #0
 800aea0:	f100 0114 	add.w	r1, r0, #20
 800aea4:	f100 0210 	add.w	r2, r0, #16
 800aea8:	4618      	mov	r0, r3
 800aeaa:	4553      	cmp	r3, sl
 800aeac:	db37      	blt.n	800af1e <__lshift+0xbe>
 800aeae:	6920      	ldr	r0, [r4, #16]
 800aeb0:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800aeb4:	f104 0314 	add.w	r3, r4, #20
 800aeb8:	f019 091f 	ands.w	r9, r9, #31
 800aebc:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800aec0:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800aec4:	d02f      	beq.n	800af26 <__lshift+0xc6>
 800aec6:	f1c9 0e20 	rsb	lr, r9, #32
 800aeca:	468a      	mov	sl, r1
 800aecc:	f04f 0c00 	mov.w	ip, #0
 800aed0:	681a      	ldr	r2, [r3, #0]
 800aed2:	fa02 f209 	lsl.w	r2, r2, r9
 800aed6:	ea42 020c 	orr.w	r2, r2, ip
 800aeda:	f84a 2b04 	str.w	r2, [sl], #4
 800aede:	f853 2b04 	ldr.w	r2, [r3], #4
 800aee2:	4298      	cmp	r0, r3
 800aee4:	fa22 fc0e 	lsr.w	ip, r2, lr
 800aee8:	d8f2      	bhi.n	800aed0 <__lshift+0x70>
 800aeea:	1b03      	subs	r3, r0, r4
 800aeec:	3b15      	subs	r3, #21
 800aeee:	f023 0303 	bic.w	r3, r3, #3
 800aef2:	3304      	adds	r3, #4
 800aef4:	f104 0215 	add.w	r2, r4, #21
 800aef8:	4290      	cmp	r0, r2
 800aefa:	bf38      	it	cc
 800aefc:	2304      	movcc	r3, #4
 800aefe:	f841 c003 	str.w	ip, [r1, r3]
 800af02:	f1bc 0f00 	cmp.w	ip, #0
 800af06:	d001      	beq.n	800af0c <__lshift+0xac>
 800af08:	f108 0602 	add.w	r6, r8, #2
 800af0c:	3e01      	subs	r6, #1
 800af0e:	4638      	mov	r0, r7
 800af10:	612e      	str	r6, [r5, #16]
 800af12:	4621      	mov	r1, r4
 800af14:	f7ff fd88 	bl	800aa28 <_Bfree>
 800af18:	4628      	mov	r0, r5
 800af1a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800af1e:	f842 0f04 	str.w	r0, [r2, #4]!
 800af22:	3301      	adds	r3, #1
 800af24:	e7c1      	b.n	800aeaa <__lshift+0x4a>
 800af26:	3904      	subs	r1, #4
 800af28:	f853 2b04 	ldr.w	r2, [r3], #4
 800af2c:	f841 2f04 	str.w	r2, [r1, #4]!
 800af30:	4298      	cmp	r0, r3
 800af32:	d8f9      	bhi.n	800af28 <__lshift+0xc8>
 800af34:	e7ea      	b.n	800af0c <__lshift+0xac>
 800af36:	bf00      	nop
 800af38:	0800c729 	.word	0x0800c729
 800af3c:	0800c7b4 	.word	0x0800c7b4

0800af40 <__mcmp>:
 800af40:	b530      	push	{r4, r5, lr}
 800af42:	6902      	ldr	r2, [r0, #16]
 800af44:	690c      	ldr	r4, [r1, #16]
 800af46:	1b12      	subs	r2, r2, r4
 800af48:	d10e      	bne.n	800af68 <__mcmp+0x28>
 800af4a:	f100 0314 	add.w	r3, r0, #20
 800af4e:	3114      	adds	r1, #20
 800af50:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800af54:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800af58:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800af5c:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800af60:	42a5      	cmp	r5, r4
 800af62:	d003      	beq.n	800af6c <__mcmp+0x2c>
 800af64:	d305      	bcc.n	800af72 <__mcmp+0x32>
 800af66:	2201      	movs	r2, #1
 800af68:	4610      	mov	r0, r2
 800af6a:	bd30      	pop	{r4, r5, pc}
 800af6c:	4283      	cmp	r3, r0
 800af6e:	d3f3      	bcc.n	800af58 <__mcmp+0x18>
 800af70:	e7fa      	b.n	800af68 <__mcmp+0x28>
 800af72:	f04f 32ff 	mov.w	r2, #4294967295
 800af76:	e7f7      	b.n	800af68 <__mcmp+0x28>

0800af78 <__mdiff>:
 800af78:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af7c:	460c      	mov	r4, r1
 800af7e:	4606      	mov	r6, r0
 800af80:	4611      	mov	r1, r2
 800af82:	4620      	mov	r0, r4
 800af84:	4690      	mov	r8, r2
 800af86:	f7ff ffdb 	bl	800af40 <__mcmp>
 800af8a:	1e05      	subs	r5, r0, #0
 800af8c:	d110      	bne.n	800afb0 <__mdiff+0x38>
 800af8e:	4629      	mov	r1, r5
 800af90:	4630      	mov	r0, r6
 800af92:	f7ff fd09 	bl	800a9a8 <_Balloc>
 800af96:	b930      	cbnz	r0, 800afa6 <__mdiff+0x2e>
 800af98:	4b3a      	ldr	r3, [pc, #232]	; (800b084 <__mdiff+0x10c>)
 800af9a:	4602      	mov	r2, r0
 800af9c:	f240 2132 	movw	r1, #562	; 0x232
 800afa0:	4839      	ldr	r0, [pc, #228]	; (800b088 <__mdiff+0x110>)
 800afa2:	f7fe fab9 	bl	8009518 <__assert_func>
 800afa6:	2301      	movs	r3, #1
 800afa8:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800afac:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb0:	bfa4      	itt	ge
 800afb2:	4643      	movge	r3, r8
 800afb4:	46a0      	movge	r8, r4
 800afb6:	4630      	mov	r0, r6
 800afb8:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800afbc:	bfa6      	itte	ge
 800afbe:	461c      	movge	r4, r3
 800afc0:	2500      	movge	r5, #0
 800afc2:	2501      	movlt	r5, #1
 800afc4:	f7ff fcf0 	bl	800a9a8 <_Balloc>
 800afc8:	b920      	cbnz	r0, 800afd4 <__mdiff+0x5c>
 800afca:	4b2e      	ldr	r3, [pc, #184]	; (800b084 <__mdiff+0x10c>)
 800afcc:	4602      	mov	r2, r0
 800afce:	f44f 7110 	mov.w	r1, #576	; 0x240
 800afd2:	e7e5      	b.n	800afa0 <__mdiff+0x28>
 800afd4:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800afd8:	6926      	ldr	r6, [r4, #16]
 800afda:	60c5      	str	r5, [r0, #12]
 800afdc:	f104 0914 	add.w	r9, r4, #20
 800afe0:	f108 0514 	add.w	r5, r8, #20
 800afe4:	f100 0e14 	add.w	lr, r0, #20
 800afe8:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800afec:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800aff0:	f108 0210 	add.w	r2, r8, #16
 800aff4:	46f2      	mov	sl, lr
 800aff6:	2100      	movs	r1, #0
 800aff8:	f859 3b04 	ldr.w	r3, [r9], #4
 800affc:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800b000:	fa1f f883 	uxth.w	r8, r3
 800b004:	fa11 f18b 	uxtah	r1, r1, fp
 800b008:	0c1b      	lsrs	r3, r3, #16
 800b00a:	eba1 0808 	sub.w	r8, r1, r8
 800b00e:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800b012:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800b016:	fa1f f888 	uxth.w	r8, r8
 800b01a:	1419      	asrs	r1, r3, #16
 800b01c:	454e      	cmp	r6, r9
 800b01e:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800b022:	f84a 3b04 	str.w	r3, [sl], #4
 800b026:	d8e7      	bhi.n	800aff8 <__mdiff+0x80>
 800b028:	1b33      	subs	r3, r6, r4
 800b02a:	3b15      	subs	r3, #21
 800b02c:	f023 0303 	bic.w	r3, r3, #3
 800b030:	3304      	adds	r3, #4
 800b032:	3415      	adds	r4, #21
 800b034:	42a6      	cmp	r6, r4
 800b036:	bf38      	it	cc
 800b038:	2304      	movcc	r3, #4
 800b03a:	441d      	add	r5, r3
 800b03c:	4473      	add	r3, lr
 800b03e:	469e      	mov	lr, r3
 800b040:	462e      	mov	r6, r5
 800b042:	4566      	cmp	r6, ip
 800b044:	d30e      	bcc.n	800b064 <__mdiff+0xec>
 800b046:	f10c 0203 	add.w	r2, ip, #3
 800b04a:	1b52      	subs	r2, r2, r5
 800b04c:	f022 0203 	bic.w	r2, r2, #3
 800b050:	3d03      	subs	r5, #3
 800b052:	45ac      	cmp	ip, r5
 800b054:	bf38      	it	cc
 800b056:	2200      	movcc	r2, #0
 800b058:	441a      	add	r2, r3
 800b05a:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800b05e:	b17b      	cbz	r3, 800b080 <__mdiff+0x108>
 800b060:	6107      	str	r7, [r0, #16]
 800b062:	e7a3      	b.n	800afac <__mdiff+0x34>
 800b064:	f856 8b04 	ldr.w	r8, [r6], #4
 800b068:	fa11 f288 	uxtah	r2, r1, r8
 800b06c:	1414      	asrs	r4, r2, #16
 800b06e:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800b072:	b292      	uxth	r2, r2
 800b074:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800b078:	f84e 2b04 	str.w	r2, [lr], #4
 800b07c:	1421      	asrs	r1, r4, #16
 800b07e:	e7e0      	b.n	800b042 <__mdiff+0xca>
 800b080:	3f01      	subs	r7, #1
 800b082:	e7ea      	b.n	800b05a <__mdiff+0xe2>
 800b084:	0800c729 	.word	0x0800c729
 800b088:	0800c7b4 	.word	0x0800c7b4

0800b08c <__ulp>:
 800b08c:	b082      	sub	sp, #8
 800b08e:	ed8d 0b00 	vstr	d0, [sp]
 800b092:	9b01      	ldr	r3, [sp, #4]
 800b094:	4912      	ldr	r1, [pc, #72]	; (800b0e0 <__ulp+0x54>)
 800b096:	4019      	ands	r1, r3
 800b098:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800b09c:	2900      	cmp	r1, #0
 800b09e:	dd05      	ble.n	800b0ac <__ulp+0x20>
 800b0a0:	2200      	movs	r2, #0
 800b0a2:	460b      	mov	r3, r1
 800b0a4:	ec43 2b10 	vmov	d0, r2, r3
 800b0a8:	b002      	add	sp, #8
 800b0aa:	4770      	bx	lr
 800b0ac:	4249      	negs	r1, r1
 800b0ae:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800b0b2:	ea4f 5021 	mov.w	r0, r1, asr #20
 800b0b6:	f04f 0200 	mov.w	r2, #0
 800b0ba:	f04f 0300 	mov.w	r3, #0
 800b0be:	da04      	bge.n	800b0ca <__ulp+0x3e>
 800b0c0:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800b0c4:	fa41 f300 	asr.w	r3, r1, r0
 800b0c8:	e7ec      	b.n	800b0a4 <__ulp+0x18>
 800b0ca:	f1a0 0114 	sub.w	r1, r0, #20
 800b0ce:	291e      	cmp	r1, #30
 800b0d0:	bfda      	itte	le
 800b0d2:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800b0d6:	fa20 f101 	lsrle.w	r1, r0, r1
 800b0da:	2101      	movgt	r1, #1
 800b0dc:	460a      	mov	r2, r1
 800b0de:	e7e1      	b.n	800b0a4 <__ulp+0x18>
 800b0e0:	7ff00000 	.word	0x7ff00000

0800b0e4 <__b2d>:
 800b0e4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b0e6:	6905      	ldr	r5, [r0, #16]
 800b0e8:	f100 0714 	add.w	r7, r0, #20
 800b0ec:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800b0f0:	1f2e      	subs	r6, r5, #4
 800b0f2:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800b0f6:	4620      	mov	r0, r4
 800b0f8:	f7ff fd48 	bl	800ab8c <__hi0bits>
 800b0fc:	f1c0 0320 	rsb	r3, r0, #32
 800b100:	280a      	cmp	r0, #10
 800b102:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800b180 <__b2d+0x9c>
 800b106:	600b      	str	r3, [r1, #0]
 800b108:	dc14      	bgt.n	800b134 <__b2d+0x50>
 800b10a:	f1c0 0e0b 	rsb	lr, r0, #11
 800b10e:	fa24 f10e 	lsr.w	r1, r4, lr
 800b112:	42b7      	cmp	r7, r6
 800b114:	ea41 030c 	orr.w	r3, r1, ip
 800b118:	bf34      	ite	cc
 800b11a:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b11e:	2100      	movcs	r1, #0
 800b120:	3015      	adds	r0, #21
 800b122:	fa04 f000 	lsl.w	r0, r4, r0
 800b126:	fa21 f10e 	lsr.w	r1, r1, lr
 800b12a:	ea40 0201 	orr.w	r2, r0, r1
 800b12e:	ec43 2b10 	vmov	d0, r2, r3
 800b132:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800b134:	42b7      	cmp	r7, r6
 800b136:	bf3a      	itte	cc
 800b138:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800b13c:	f1a5 0608 	subcc.w	r6, r5, #8
 800b140:	2100      	movcs	r1, #0
 800b142:	380b      	subs	r0, #11
 800b144:	d017      	beq.n	800b176 <__b2d+0x92>
 800b146:	f1c0 0c20 	rsb	ip, r0, #32
 800b14a:	fa04 f500 	lsl.w	r5, r4, r0
 800b14e:	42be      	cmp	r6, r7
 800b150:	fa21 f40c 	lsr.w	r4, r1, ip
 800b154:	ea45 0504 	orr.w	r5, r5, r4
 800b158:	bf8c      	ite	hi
 800b15a:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800b15e:	2400      	movls	r4, #0
 800b160:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800b164:	fa01 f000 	lsl.w	r0, r1, r0
 800b168:	fa24 f40c 	lsr.w	r4, r4, ip
 800b16c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800b170:	ea40 0204 	orr.w	r2, r0, r4
 800b174:	e7db      	b.n	800b12e <__b2d+0x4a>
 800b176:	ea44 030c 	orr.w	r3, r4, ip
 800b17a:	460a      	mov	r2, r1
 800b17c:	e7d7      	b.n	800b12e <__b2d+0x4a>
 800b17e:	bf00      	nop
 800b180:	3ff00000 	.word	0x3ff00000

0800b184 <__d2b>:
 800b184:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800b188:	4689      	mov	r9, r1
 800b18a:	2101      	movs	r1, #1
 800b18c:	ec57 6b10 	vmov	r6, r7, d0
 800b190:	4690      	mov	r8, r2
 800b192:	f7ff fc09 	bl	800a9a8 <_Balloc>
 800b196:	4604      	mov	r4, r0
 800b198:	b930      	cbnz	r0, 800b1a8 <__d2b+0x24>
 800b19a:	4602      	mov	r2, r0
 800b19c:	4b25      	ldr	r3, [pc, #148]	; (800b234 <__d2b+0xb0>)
 800b19e:	4826      	ldr	r0, [pc, #152]	; (800b238 <__d2b+0xb4>)
 800b1a0:	f240 310a 	movw	r1, #778	; 0x30a
 800b1a4:	f7fe f9b8 	bl	8009518 <__assert_func>
 800b1a8:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800b1ac:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800b1b0:	bb35      	cbnz	r5, 800b200 <__d2b+0x7c>
 800b1b2:	2e00      	cmp	r6, #0
 800b1b4:	9301      	str	r3, [sp, #4]
 800b1b6:	d028      	beq.n	800b20a <__d2b+0x86>
 800b1b8:	4668      	mov	r0, sp
 800b1ba:	9600      	str	r6, [sp, #0]
 800b1bc:	f7ff fd06 	bl	800abcc <__lo0bits>
 800b1c0:	9900      	ldr	r1, [sp, #0]
 800b1c2:	b300      	cbz	r0, 800b206 <__d2b+0x82>
 800b1c4:	9a01      	ldr	r2, [sp, #4]
 800b1c6:	f1c0 0320 	rsb	r3, r0, #32
 800b1ca:	fa02 f303 	lsl.w	r3, r2, r3
 800b1ce:	430b      	orrs	r3, r1
 800b1d0:	40c2      	lsrs	r2, r0
 800b1d2:	6163      	str	r3, [r4, #20]
 800b1d4:	9201      	str	r2, [sp, #4]
 800b1d6:	9b01      	ldr	r3, [sp, #4]
 800b1d8:	61a3      	str	r3, [r4, #24]
 800b1da:	2b00      	cmp	r3, #0
 800b1dc:	bf14      	ite	ne
 800b1de:	2202      	movne	r2, #2
 800b1e0:	2201      	moveq	r2, #1
 800b1e2:	6122      	str	r2, [r4, #16]
 800b1e4:	b1d5      	cbz	r5, 800b21c <__d2b+0x98>
 800b1e6:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800b1ea:	4405      	add	r5, r0
 800b1ec:	f8c9 5000 	str.w	r5, [r9]
 800b1f0:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800b1f4:	f8c8 0000 	str.w	r0, [r8]
 800b1f8:	4620      	mov	r0, r4
 800b1fa:	b003      	add	sp, #12
 800b1fc:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800b200:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800b204:	e7d5      	b.n	800b1b2 <__d2b+0x2e>
 800b206:	6161      	str	r1, [r4, #20]
 800b208:	e7e5      	b.n	800b1d6 <__d2b+0x52>
 800b20a:	a801      	add	r0, sp, #4
 800b20c:	f7ff fcde 	bl	800abcc <__lo0bits>
 800b210:	9b01      	ldr	r3, [sp, #4]
 800b212:	6163      	str	r3, [r4, #20]
 800b214:	2201      	movs	r2, #1
 800b216:	6122      	str	r2, [r4, #16]
 800b218:	3020      	adds	r0, #32
 800b21a:	e7e3      	b.n	800b1e4 <__d2b+0x60>
 800b21c:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800b220:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800b224:	f8c9 0000 	str.w	r0, [r9]
 800b228:	6918      	ldr	r0, [r3, #16]
 800b22a:	f7ff fcaf 	bl	800ab8c <__hi0bits>
 800b22e:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800b232:	e7df      	b.n	800b1f4 <__d2b+0x70>
 800b234:	0800c729 	.word	0x0800c729
 800b238:	0800c7b4 	.word	0x0800c7b4

0800b23c <__ratio>:
 800b23c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b240:	4688      	mov	r8, r1
 800b242:	4669      	mov	r1, sp
 800b244:	4681      	mov	r9, r0
 800b246:	f7ff ff4d 	bl	800b0e4 <__b2d>
 800b24a:	a901      	add	r1, sp, #4
 800b24c:	4640      	mov	r0, r8
 800b24e:	ec55 4b10 	vmov	r4, r5, d0
 800b252:	f7ff ff47 	bl	800b0e4 <__b2d>
 800b256:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800b25a:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800b25e:	eba3 0c02 	sub.w	ip, r3, r2
 800b262:	e9dd 3200 	ldrd	r3, r2, [sp]
 800b266:	1a9b      	subs	r3, r3, r2
 800b268:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800b26c:	ec51 0b10 	vmov	r0, r1, d0
 800b270:	2b00      	cmp	r3, #0
 800b272:	bfd6      	itet	le
 800b274:	460a      	movle	r2, r1
 800b276:	462a      	movgt	r2, r5
 800b278:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800b27c:	468b      	mov	fp, r1
 800b27e:	462f      	mov	r7, r5
 800b280:	bfd4      	ite	le
 800b282:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800b286:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800b28a:	4620      	mov	r0, r4
 800b28c:	ee10 2a10 	vmov	r2, s0
 800b290:	465b      	mov	r3, fp
 800b292:	4639      	mov	r1, r7
 800b294:	f7f5 fada 	bl	800084c <__aeabi_ddiv>
 800b298:	ec41 0b10 	vmov	d0, r0, r1
 800b29c:	b003      	add	sp, #12
 800b29e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800b2a2 <__copybits>:
 800b2a2:	3901      	subs	r1, #1
 800b2a4:	b570      	push	{r4, r5, r6, lr}
 800b2a6:	1149      	asrs	r1, r1, #5
 800b2a8:	6914      	ldr	r4, [r2, #16]
 800b2aa:	3101      	adds	r1, #1
 800b2ac:	f102 0314 	add.w	r3, r2, #20
 800b2b0:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800b2b4:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800b2b8:	1f05      	subs	r5, r0, #4
 800b2ba:	42a3      	cmp	r3, r4
 800b2bc:	d30c      	bcc.n	800b2d8 <__copybits+0x36>
 800b2be:	1aa3      	subs	r3, r4, r2
 800b2c0:	3b11      	subs	r3, #17
 800b2c2:	f023 0303 	bic.w	r3, r3, #3
 800b2c6:	3211      	adds	r2, #17
 800b2c8:	42a2      	cmp	r2, r4
 800b2ca:	bf88      	it	hi
 800b2cc:	2300      	movhi	r3, #0
 800b2ce:	4418      	add	r0, r3
 800b2d0:	2300      	movs	r3, #0
 800b2d2:	4288      	cmp	r0, r1
 800b2d4:	d305      	bcc.n	800b2e2 <__copybits+0x40>
 800b2d6:	bd70      	pop	{r4, r5, r6, pc}
 800b2d8:	f853 6b04 	ldr.w	r6, [r3], #4
 800b2dc:	f845 6f04 	str.w	r6, [r5, #4]!
 800b2e0:	e7eb      	b.n	800b2ba <__copybits+0x18>
 800b2e2:	f840 3b04 	str.w	r3, [r0], #4
 800b2e6:	e7f4      	b.n	800b2d2 <__copybits+0x30>

0800b2e8 <__any_on>:
 800b2e8:	f100 0214 	add.w	r2, r0, #20
 800b2ec:	6900      	ldr	r0, [r0, #16]
 800b2ee:	114b      	asrs	r3, r1, #5
 800b2f0:	4298      	cmp	r0, r3
 800b2f2:	b510      	push	{r4, lr}
 800b2f4:	db11      	blt.n	800b31a <__any_on+0x32>
 800b2f6:	dd0a      	ble.n	800b30e <__any_on+0x26>
 800b2f8:	f011 011f 	ands.w	r1, r1, #31
 800b2fc:	d007      	beq.n	800b30e <__any_on+0x26>
 800b2fe:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800b302:	fa24 f001 	lsr.w	r0, r4, r1
 800b306:	fa00 f101 	lsl.w	r1, r0, r1
 800b30a:	428c      	cmp	r4, r1
 800b30c:	d10b      	bne.n	800b326 <__any_on+0x3e>
 800b30e:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800b312:	4293      	cmp	r3, r2
 800b314:	d803      	bhi.n	800b31e <__any_on+0x36>
 800b316:	2000      	movs	r0, #0
 800b318:	bd10      	pop	{r4, pc}
 800b31a:	4603      	mov	r3, r0
 800b31c:	e7f7      	b.n	800b30e <__any_on+0x26>
 800b31e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800b322:	2900      	cmp	r1, #0
 800b324:	d0f5      	beq.n	800b312 <__any_on+0x2a>
 800b326:	2001      	movs	r0, #1
 800b328:	e7f6      	b.n	800b318 <__any_on+0x30>

0800b32a <_calloc_r>:
 800b32a:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b32c:	fba1 2402 	umull	r2, r4, r1, r2
 800b330:	b94c      	cbnz	r4, 800b346 <_calloc_r+0x1c>
 800b332:	4611      	mov	r1, r2
 800b334:	9201      	str	r2, [sp, #4]
 800b336:	f000 f87b 	bl	800b430 <_malloc_r>
 800b33a:	9a01      	ldr	r2, [sp, #4]
 800b33c:	4605      	mov	r5, r0
 800b33e:	b930      	cbnz	r0, 800b34e <_calloc_r+0x24>
 800b340:	4628      	mov	r0, r5
 800b342:	b003      	add	sp, #12
 800b344:	bd30      	pop	{r4, r5, pc}
 800b346:	220c      	movs	r2, #12
 800b348:	6002      	str	r2, [r0, #0]
 800b34a:	2500      	movs	r5, #0
 800b34c:	e7f8      	b.n	800b340 <_calloc_r+0x16>
 800b34e:	4621      	mov	r1, r4
 800b350:	f7fc fb24 	bl	800799c <memset>
 800b354:	e7f4      	b.n	800b340 <_calloc_r+0x16>
	...

0800b358 <_free_r>:
 800b358:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800b35a:	2900      	cmp	r1, #0
 800b35c:	d044      	beq.n	800b3e8 <_free_r+0x90>
 800b35e:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b362:	9001      	str	r0, [sp, #4]
 800b364:	2b00      	cmp	r3, #0
 800b366:	f1a1 0404 	sub.w	r4, r1, #4
 800b36a:	bfb8      	it	lt
 800b36c:	18e4      	addlt	r4, r4, r3
 800b36e:	f000 fec7 	bl	800c100 <__malloc_lock>
 800b372:	4a1e      	ldr	r2, [pc, #120]	; (800b3ec <_free_r+0x94>)
 800b374:	9801      	ldr	r0, [sp, #4]
 800b376:	6813      	ldr	r3, [r2, #0]
 800b378:	b933      	cbnz	r3, 800b388 <_free_r+0x30>
 800b37a:	6063      	str	r3, [r4, #4]
 800b37c:	6014      	str	r4, [r2, #0]
 800b37e:	b003      	add	sp, #12
 800b380:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800b384:	f000 bec2 	b.w	800c10c <__malloc_unlock>
 800b388:	42a3      	cmp	r3, r4
 800b38a:	d908      	bls.n	800b39e <_free_r+0x46>
 800b38c:	6825      	ldr	r5, [r4, #0]
 800b38e:	1961      	adds	r1, r4, r5
 800b390:	428b      	cmp	r3, r1
 800b392:	bf01      	itttt	eq
 800b394:	6819      	ldreq	r1, [r3, #0]
 800b396:	685b      	ldreq	r3, [r3, #4]
 800b398:	1949      	addeq	r1, r1, r5
 800b39a:	6021      	streq	r1, [r4, #0]
 800b39c:	e7ed      	b.n	800b37a <_free_r+0x22>
 800b39e:	461a      	mov	r2, r3
 800b3a0:	685b      	ldr	r3, [r3, #4]
 800b3a2:	b10b      	cbz	r3, 800b3a8 <_free_r+0x50>
 800b3a4:	42a3      	cmp	r3, r4
 800b3a6:	d9fa      	bls.n	800b39e <_free_r+0x46>
 800b3a8:	6811      	ldr	r1, [r2, #0]
 800b3aa:	1855      	adds	r5, r2, r1
 800b3ac:	42a5      	cmp	r5, r4
 800b3ae:	d10b      	bne.n	800b3c8 <_free_r+0x70>
 800b3b0:	6824      	ldr	r4, [r4, #0]
 800b3b2:	4421      	add	r1, r4
 800b3b4:	1854      	adds	r4, r2, r1
 800b3b6:	42a3      	cmp	r3, r4
 800b3b8:	6011      	str	r1, [r2, #0]
 800b3ba:	d1e0      	bne.n	800b37e <_free_r+0x26>
 800b3bc:	681c      	ldr	r4, [r3, #0]
 800b3be:	685b      	ldr	r3, [r3, #4]
 800b3c0:	6053      	str	r3, [r2, #4]
 800b3c2:	4421      	add	r1, r4
 800b3c4:	6011      	str	r1, [r2, #0]
 800b3c6:	e7da      	b.n	800b37e <_free_r+0x26>
 800b3c8:	d902      	bls.n	800b3d0 <_free_r+0x78>
 800b3ca:	230c      	movs	r3, #12
 800b3cc:	6003      	str	r3, [r0, #0]
 800b3ce:	e7d6      	b.n	800b37e <_free_r+0x26>
 800b3d0:	6825      	ldr	r5, [r4, #0]
 800b3d2:	1961      	adds	r1, r4, r5
 800b3d4:	428b      	cmp	r3, r1
 800b3d6:	bf04      	itt	eq
 800b3d8:	6819      	ldreq	r1, [r3, #0]
 800b3da:	685b      	ldreq	r3, [r3, #4]
 800b3dc:	6063      	str	r3, [r4, #4]
 800b3de:	bf04      	itt	eq
 800b3e0:	1949      	addeq	r1, r1, r5
 800b3e2:	6021      	streq	r1, [r4, #0]
 800b3e4:	6054      	str	r4, [r2, #4]
 800b3e6:	e7ca      	b.n	800b37e <_free_r+0x26>
 800b3e8:	b003      	add	sp, #12
 800b3ea:	bd30      	pop	{r4, r5, pc}
 800b3ec:	200062e8 	.word	0x200062e8

0800b3f0 <sbrk_aligned>:
 800b3f0:	b570      	push	{r4, r5, r6, lr}
 800b3f2:	4e0e      	ldr	r6, [pc, #56]	; (800b42c <sbrk_aligned+0x3c>)
 800b3f4:	460c      	mov	r4, r1
 800b3f6:	6831      	ldr	r1, [r6, #0]
 800b3f8:	4605      	mov	r5, r0
 800b3fa:	b911      	cbnz	r1, 800b402 <sbrk_aligned+0x12>
 800b3fc:	f000 fb4c 	bl	800ba98 <_sbrk_r>
 800b400:	6030      	str	r0, [r6, #0]
 800b402:	4621      	mov	r1, r4
 800b404:	4628      	mov	r0, r5
 800b406:	f000 fb47 	bl	800ba98 <_sbrk_r>
 800b40a:	1c43      	adds	r3, r0, #1
 800b40c:	d00a      	beq.n	800b424 <sbrk_aligned+0x34>
 800b40e:	1cc4      	adds	r4, r0, #3
 800b410:	f024 0403 	bic.w	r4, r4, #3
 800b414:	42a0      	cmp	r0, r4
 800b416:	d007      	beq.n	800b428 <sbrk_aligned+0x38>
 800b418:	1a21      	subs	r1, r4, r0
 800b41a:	4628      	mov	r0, r5
 800b41c:	f000 fb3c 	bl	800ba98 <_sbrk_r>
 800b420:	3001      	adds	r0, #1
 800b422:	d101      	bne.n	800b428 <sbrk_aligned+0x38>
 800b424:	f04f 34ff 	mov.w	r4, #4294967295
 800b428:	4620      	mov	r0, r4
 800b42a:	bd70      	pop	{r4, r5, r6, pc}
 800b42c:	200062ec 	.word	0x200062ec

0800b430 <_malloc_r>:
 800b430:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b434:	1ccd      	adds	r5, r1, #3
 800b436:	f025 0503 	bic.w	r5, r5, #3
 800b43a:	3508      	adds	r5, #8
 800b43c:	2d0c      	cmp	r5, #12
 800b43e:	bf38      	it	cc
 800b440:	250c      	movcc	r5, #12
 800b442:	2d00      	cmp	r5, #0
 800b444:	4607      	mov	r7, r0
 800b446:	db01      	blt.n	800b44c <_malloc_r+0x1c>
 800b448:	42a9      	cmp	r1, r5
 800b44a:	d905      	bls.n	800b458 <_malloc_r+0x28>
 800b44c:	230c      	movs	r3, #12
 800b44e:	603b      	str	r3, [r7, #0]
 800b450:	2600      	movs	r6, #0
 800b452:	4630      	mov	r0, r6
 800b454:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b458:	4e2e      	ldr	r6, [pc, #184]	; (800b514 <_malloc_r+0xe4>)
 800b45a:	f000 fe51 	bl	800c100 <__malloc_lock>
 800b45e:	6833      	ldr	r3, [r6, #0]
 800b460:	461c      	mov	r4, r3
 800b462:	bb34      	cbnz	r4, 800b4b2 <_malloc_r+0x82>
 800b464:	4629      	mov	r1, r5
 800b466:	4638      	mov	r0, r7
 800b468:	f7ff ffc2 	bl	800b3f0 <sbrk_aligned>
 800b46c:	1c43      	adds	r3, r0, #1
 800b46e:	4604      	mov	r4, r0
 800b470:	d14d      	bne.n	800b50e <_malloc_r+0xde>
 800b472:	6834      	ldr	r4, [r6, #0]
 800b474:	4626      	mov	r6, r4
 800b476:	2e00      	cmp	r6, #0
 800b478:	d140      	bne.n	800b4fc <_malloc_r+0xcc>
 800b47a:	6823      	ldr	r3, [r4, #0]
 800b47c:	4631      	mov	r1, r6
 800b47e:	4638      	mov	r0, r7
 800b480:	eb04 0803 	add.w	r8, r4, r3
 800b484:	f000 fb08 	bl	800ba98 <_sbrk_r>
 800b488:	4580      	cmp	r8, r0
 800b48a:	d13a      	bne.n	800b502 <_malloc_r+0xd2>
 800b48c:	6821      	ldr	r1, [r4, #0]
 800b48e:	3503      	adds	r5, #3
 800b490:	1a6d      	subs	r5, r5, r1
 800b492:	f025 0503 	bic.w	r5, r5, #3
 800b496:	3508      	adds	r5, #8
 800b498:	2d0c      	cmp	r5, #12
 800b49a:	bf38      	it	cc
 800b49c:	250c      	movcc	r5, #12
 800b49e:	4629      	mov	r1, r5
 800b4a0:	4638      	mov	r0, r7
 800b4a2:	f7ff ffa5 	bl	800b3f0 <sbrk_aligned>
 800b4a6:	3001      	adds	r0, #1
 800b4a8:	d02b      	beq.n	800b502 <_malloc_r+0xd2>
 800b4aa:	6823      	ldr	r3, [r4, #0]
 800b4ac:	442b      	add	r3, r5
 800b4ae:	6023      	str	r3, [r4, #0]
 800b4b0:	e00e      	b.n	800b4d0 <_malloc_r+0xa0>
 800b4b2:	6822      	ldr	r2, [r4, #0]
 800b4b4:	1b52      	subs	r2, r2, r5
 800b4b6:	d41e      	bmi.n	800b4f6 <_malloc_r+0xc6>
 800b4b8:	2a0b      	cmp	r2, #11
 800b4ba:	d916      	bls.n	800b4ea <_malloc_r+0xba>
 800b4bc:	1961      	adds	r1, r4, r5
 800b4be:	42a3      	cmp	r3, r4
 800b4c0:	6025      	str	r5, [r4, #0]
 800b4c2:	bf18      	it	ne
 800b4c4:	6059      	strne	r1, [r3, #4]
 800b4c6:	6863      	ldr	r3, [r4, #4]
 800b4c8:	bf08      	it	eq
 800b4ca:	6031      	streq	r1, [r6, #0]
 800b4cc:	5162      	str	r2, [r4, r5]
 800b4ce:	604b      	str	r3, [r1, #4]
 800b4d0:	4638      	mov	r0, r7
 800b4d2:	f104 060b 	add.w	r6, r4, #11
 800b4d6:	f000 fe19 	bl	800c10c <__malloc_unlock>
 800b4da:	f026 0607 	bic.w	r6, r6, #7
 800b4de:	1d23      	adds	r3, r4, #4
 800b4e0:	1af2      	subs	r2, r6, r3
 800b4e2:	d0b6      	beq.n	800b452 <_malloc_r+0x22>
 800b4e4:	1b9b      	subs	r3, r3, r6
 800b4e6:	50a3      	str	r3, [r4, r2]
 800b4e8:	e7b3      	b.n	800b452 <_malloc_r+0x22>
 800b4ea:	6862      	ldr	r2, [r4, #4]
 800b4ec:	42a3      	cmp	r3, r4
 800b4ee:	bf0c      	ite	eq
 800b4f0:	6032      	streq	r2, [r6, #0]
 800b4f2:	605a      	strne	r2, [r3, #4]
 800b4f4:	e7ec      	b.n	800b4d0 <_malloc_r+0xa0>
 800b4f6:	4623      	mov	r3, r4
 800b4f8:	6864      	ldr	r4, [r4, #4]
 800b4fa:	e7b2      	b.n	800b462 <_malloc_r+0x32>
 800b4fc:	4634      	mov	r4, r6
 800b4fe:	6876      	ldr	r6, [r6, #4]
 800b500:	e7b9      	b.n	800b476 <_malloc_r+0x46>
 800b502:	230c      	movs	r3, #12
 800b504:	603b      	str	r3, [r7, #0]
 800b506:	4638      	mov	r0, r7
 800b508:	f000 fe00 	bl	800c10c <__malloc_unlock>
 800b50c:	e7a1      	b.n	800b452 <_malloc_r+0x22>
 800b50e:	6025      	str	r5, [r4, #0]
 800b510:	e7de      	b.n	800b4d0 <_malloc_r+0xa0>
 800b512:	bf00      	nop
 800b514:	200062e8 	.word	0x200062e8

0800b518 <__ssputs_r>:
 800b518:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b51c:	688e      	ldr	r6, [r1, #8]
 800b51e:	429e      	cmp	r6, r3
 800b520:	4682      	mov	sl, r0
 800b522:	460c      	mov	r4, r1
 800b524:	4690      	mov	r8, r2
 800b526:	461f      	mov	r7, r3
 800b528:	d838      	bhi.n	800b59c <__ssputs_r+0x84>
 800b52a:	898a      	ldrh	r2, [r1, #12]
 800b52c:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800b530:	d032      	beq.n	800b598 <__ssputs_r+0x80>
 800b532:	6825      	ldr	r5, [r4, #0]
 800b534:	6909      	ldr	r1, [r1, #16]
 800b536:	eba5 0901 	sub.w	r9, r5, r1
 800b53a:	6965      	ldr	r5, [r4, #20]
 800b53c:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800b540:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800b544:	3301      	adds	r3, #1
 800b546:	444b      	add	r3, r9
 800b548:	106d      	asrs	r5, r5, #1
 800b54a:	429d      	cmp	r5, r3
 800b54c:	bf38      	it	cc
 800b54e:	461d      	movcc	r5, r3
 800b550:	0553      	lsls	r3, r2, #21
 800b552:	d531      	bpl.n	800b5b8 <__ssputs_r+0xa0>
 800b554:	4629      	mov	r1, r5
 800b556:	f7ff ff6b 	bl	800b430 <_malloc_r>
 800b55a:	4606      	mov	r6, r0
 800b55c:	b950      	cbnz	r0, 800b574 <__ssputs_r+0x5c>
 800b55e:	230c      	movs	r3, #12
 800b560:	f8ca 3000 	str.w	r3, [sl]
 800b564:	89a3      	ldrh	r3, [r4, #12]
 800b566:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800b56a:	81a3      	strh	r3, [r4, #12]
 800b56c:	f04f 30ff 	mov.w	r0, #4294967295
 800b570:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b574:	6921      	ldr	r1, [r4, #16]
 800b576:	464a      	mov	r2, r9
 800b578:	f7ff fa08 	bl	800a98c <memcpy>
 800b57c:	89a3      	ldrh	r3, [r4, #12]
 800b57e:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800b582:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800b586:	81a3      	strh	r3, [r4, #12]
 800b588:	6126      	str	r6, [r4, #16]
 800b58a:	6165      	str	r5, [r4, #20]
 800b58c:	444e      	add	r6, r9
 800b58e:	eba5 0509 	sub.w	r5, r5, r9
 800b592:	6026      	str	r6, [r4, #0]
 800b594:	60a5      	str	r5, [r4, #8]
 800b596:	463e      	mov	r6, r7
 800b598:	42be      	cmp	r6, r7
 800b59a:	d900      	bls.n	800b59e <__ssputs_r+0x86>
 800b59c:	463e      	mov	r6, r7
 800b59e:	6820      	ldr	r0, [r4, #0]
 800b5a0:	4632      	mov	r2, r6
 800b5a2:	4641      	mov	r1, r8
 800b5a4:	f000 fd92 	bl	800c0cc <memmove>
 800b5a8:	68a3      	ldr	r3, [r4, #8]
 800b5aa:	1b9b      	subs	r3, r3, r6
 800b5ac:	60a3      	str	r3, [r4, #8]
 800b5ae:	6823      	ldr	r3, [r4, #0]
 800b5b0:	4433      	add	r3, r6
 800b5b2:	6023      	str	r3, [r4, #0]
 800b5b4:	2000      	movs	r0, #0
 800b5b6:	e7db      	b.n	800b570 <__ssputs_r+0x58>
 800b5b8:	462a      	mov	r2, r5
 800b5ba:	f000 fdad 	bl	800c118 <_realloc_r>
 800b5be:	4606      	mov	r6, r0
 800b5c0:	2800      	cmp	r0, #0
 800b5c2:	d1e1      	bne.n	800b588 <__ssputs_r+0x70>
 800b5c4:	6921      	ldr	r1, [r4, #16]
 800b5c6:	4650      	mov	r0, sl
 800b5c8:	f7ff fec6 	bl	800b358 <_free_r>
 800b5cc:	e7c7      	b.n	800b55e <__ssputs_r+0x46>
	...

0800b5d0 <_svfiprintf_r>:
 800b5d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b5d4:	4698      	mov	r8, r3
 800b5d6:	898b      	ldrh	r3, [r1, #12]
 800b5d8:	061b      	lsls	r3, r3, #24
 800b5da:	b09d      	sub	sp, #116	; 0x74
 800b5dc:	4607      	mov	r7, r0
 800b5de:	460d      	mov	r5, r1
 800b5e0:	4614      	mov	r4, r2
 800b5e2:	d50e      	bpl.n	800b602 <_svfiprintf_r+0x32>
 800b5e4:	690b      	ldr	r3, [r1, #16]
 800b5e6:	b963      	cbnz	r3, 800b602 <_svfiprintf_r+0x32>
 800b5e8:	2140      	movs	r1, #64	; 0x40
 800b5ea:	f7ff ff21 	bl	800b430 <_malloc_r>
 800b5ee:	6028      	str	r0, [r5, #0]
 800b5f0:	6128      	str	r0, [r5, #16]
 800b5f2:	b920      	cbnz	r0, 800b5fe <_svfiprintf_r+0x2e>
 800b5f4:	230c      	movs	r3, #12
 800b5f6:	603b      	str	r3, [r7, #0]
 800b5f8:	f04f 30ff 	mov.w	r0, #4294967295
 800b5fc:	e0d1      	b.n	800b7a2 <_svfiprintf_r+0x1d2>
 800b5fe:	2340      	movs	r3, #64	; 0x40
 800b600:	616b      	str	r3, [r5, #20]
 800b602:	2300      	movs	r3, #0
 800b604:	9309      	str	r3, [sp, #36]	; 0x24
 800b606:	2320      	movs	r3, #32
 800b608:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b60c:	f8cd 800c 	str.w	r8, [sp, #12]
 800b610:	2330      	movs	r3, #48	; 0x30
 800b612:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800b7bc <_svfiprintf_r+0x1ec>
 800b616:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b61a:	f04f 0901 	mov.w	r9, #1
 800b61e:	4623      	mov	r3, r4
 800b620:	469a      	mov	sl, r3
 800b622:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b626:	b10a      	cbz	r2, 800b62c <_svfiprintf_r+0x5c>
 800b628:	2a25      	cmp	r2, #37	; 0x25
 800b62a:	d1f9      	bne.n	800b620 <_svfiprintf_r+0x50>
 800b62c:	ebba 0b04 	subs.w	fp, sl, r4
 800b630:	d00b      	beq.n	800b64a <_svfiprintf_r+0x7a>
 800b632:	465b      	mov	r3, fp
 800b634:	4622      	mov	r2, r4
 800b636:	4629      	mov	r1, r5
 800b638:	4638      	mov	r0, r7
 800b63a:	f7ff ff6d 	bl	800b518 <__ssputs_r>
 800b63e:	3001      	adds	r0, #1
 800b640:	f000 80aa 	beq.w	800b798 <_svfiprintf_r+0x1c8>
 800b644:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b646:	445a      	add	r2, fp
 800b648:	9209      	str	r2, [sp, #36]	; 0x24
 800b64a:	f89a 3000 	ldrb.w	r3, [sl]
 800b64e:	2b00      	cmp	r3, #0
 800b650:	f000 80a2 	beq.w	800b798 <_svfiprintf_r+0x1c8>
 800b654:	2300      	movs	r3, #0
 800b656:	f04f 32ff 	mov.w	r2, #4294967295
 800b65a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b65e:	f10a 0a01 	add.w	sl, sl, #1
 800b662:	9304      	str	r3, [sp, #16]
 800b664:	9307      	str	r3, [sp, #28]
 800b666:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b66a:	931a      	str	r3, [sp, #104]	; 0x68
 800b66c:	4654      	mov	r4, sl
 800b66e:	2205      	movs	r2, #5
 800b670:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b674:	4851      	ldr	r0, [pc, #324]	; (800b7bc <_svfiprintf_r+0x1ec>)
 800b676:	f7f4 fdb3 	bl	80001e0 <memchr>
 800b67a:	9a04      	ldr	r2, [sp, #16]
 800b67c:	b9d8      	cbnz	r0, 800b6b6 <_svfiprintf_r+0xe6>
 800b67e:	06d0      	lsls	r0, r2, #27
 800b680:	bf44      	itt	mi
 800b682:	2320      	movmi	r3, #32
 800b684:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b688:	0711      	lsls	r1, r2, #28
 800b68a:	bf44      	itt	mi
 800b68c:	232b      	movmi	r3, #43	; 0x2b
 800b68e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b692:	f89a 3000 	ldrb.w	r3, [sl]
 800b696:	2b2a      	cmp	r3, #42	; 0x2a
 800b698:	d015      	beq.n	800b6c6 <_svfiprintf_r+0xf6>
 800b69a:	9a07      	ldr	r2, [sp, #28]
 800b69c:	4654      	mov	r4, sl
 800b69e:	2000      	movs	r0, #0
 800b6a0:	f04f 0c0a 	mov.w	ip, #10
 800b6a4:	4621      	mov	r1, r4
 800b6a6:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b6aa:	3b30      	subs	r3, #48	; 0x30
 800b6ac:	2b09      	cmp	r3, #9
 800b6ae:	d94e      	bls.n	800b74e <_svfiprintf_r+0x17e>
 800b6b0:	b1b0      	cbz	r0, 800b6e0 <_svfiprintf_r+0x110>
 800b6b2:	9207      	str	r2, [sp, #28]
 800b6b4:	e014      	b.n	800b6e0 <_svfiprintf_r+0x110>
 800b6b6:	eba0 0308 	sub.w	r3, r0, r8
 800b6ba:	fa09 f303 	lsl.w	r3, r9, r3
 800b6be:	4313      	orrs	r3, r2
 800b6c0:	9304      	str	r3, [sp, #16]
 800b6c2:	46a2      	mov	sl, r4
 800b6c4:	e7d2      	b.n	800b66c <_svfiprintf_r+0x9c>
 800b6c6:	9b03      	ldr	r3, [sp, #12]
 800b6c8:	1d19      	adds	r1, r3, #4
 800b6ca:	681b      	ldr	r3, [r3, #0]
 800b6cc:	9103      	str	r1, [sp, #12]
 800b6ce:	2b00      	cmp	r3, #0
 800b6d0:	bfbb      	ittet	lt
 800b6d2:	425b      	neglt	r3, r3
 800b6d4:	f042 0202 	orrlt.w	r2, r2, #2
 800b6d8:	9307      	strge	r3, [sp, #28]
 800b6da:	9307      	strlt	r3, [sp, #28]
 800b6dc:	bfb8      	it	lt
 800b6de:	9204      	strlt	r2, [sp, #16]
 800b6e0:	7823      	ldrb	r3, [r4, #0]
 800b6e2:	2b2e      	cmp	r3, #46	; 0x2e
 800b6e4:	d10c      	bne.n	800b700 <_svfiprintf_r+0x130>
 800b6e6:	7863      	ldrb	r3, [r4, #1]
 800b6e8:	2b2a      	cmp	r3, #42	; 0x2a
 800b6ea:	d135      	bne.n	800b758 <_svfiprintf_r+0x188>
 800b6ec:	9b03      	ldr	r3, [sp, #12]
 800b6ee:	1d1a      	adds	r2, r3, #4
 800b6f0:	681b      	ldr	r3, [r3, #0]
 800b6f2:	9203      	str	r2, [sp, #12]
 800b6f4:	2b00      	cmp	r3, #0
 800b6f6:	bfb8      	it	lt
 800b6f8:	f04f 33ff 	movlt.w	r3, #4294967295
 800b6fc:	3402      	adds	r4, #2
 800b6fe:	9305      	str	r3, [sp, #20]
 800b700:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800b7cc <_svfiprintf_r+0x1fc>
 800b704:	7821      	ldrb	r1, [r4, #0]
 800b706:	2203      	movs	r2, #3
 800b708:	4650      	mov	r0, sl
 800b70a:	f7f4 fd69 	bl	80001e0 <memchr>
 800b70e:	b140      	cbz	r0, 800b722 <_svfiprintf_r+0x152>
 800b710:	2340      	movs	r3, #64	; 0x40
 800b712:	eba0 000a 	sub.w	r0, r0, sl
 800b716:	fa03 f000 	lsl.w	r0, r3, r0
 800b71a:	9b04      	ldr	r3, [sp, #16]
 800b71c:	4303      	orrs	r3, r0
 800b71e:	3401      	adds	r4, #1
 800b720:	9304      	str	r3, [sp, #16]
 800b722:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b726:	4826      	ldr	r0, [pc, #152]	; (800b7c0 <_svfiprintf_r+0x1f0>)
 800b728:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b72c:	2206      	movs	r2, #6
 800b72e:	f7f4 fd57 	bl	80001e0 <memchr>
 800b732:	2800      	cmp	r0, #0
 800b734:	d038      	beq.n	800b7a8 <_svfiprintf_r+0x1d8>
 800b736:	4b23      	ldr	r3, [pc, #140]	; (800b7c4 <_svfiprintf_r+0x1f4>)
 800b738:	bb1b      	cbnz	r3, 800b782 <_svfiprintf_r+0x1b2>
 800b73a:	9b03      	ldr	r3, [sp, #12]
 800b73c:	3307      	adds	r3, #7
 800b73e:	f023 0307 	bic.w	r3, r3, #7
 800b742:	3308      	adds	r3, #8
 800b744:	9303      	str	r3, [sp, #12]
 800b746:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b748:	4433      	add	r3, r6
 800b74a:	9309      	str	r3, [sp, #36]	; 0x24
 800b74c:	e767      	b.n	800b61e <_svfiprintf_r+0x4e>
 800b74e:	fb0c 3202 	mla	r2, ip, r2, r3
 800b752:	460c      	mov	r4, r1
 800b754:	2001      	movs	r0, #1
 800b756:	e7a5      	b.n	800b6a4 <_svfiprintf_r+0xd4>
 800b758:	2300      	movs	r3, #0
 800b75a:	3401      	adds	r4, #1
 800b75c:	9305      	str	r3, [sp, #20]
 800b75e:	4619      	mov	r1, r3
 800b760:	f04f 0c0a 	mov.w	ip, #10
 800b764:	4620      	mov	r0, r4
 800b766:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b76a:	3a30      	subs	r2, #48	; 0x30
 800b76c:	2a09      	cmp	r2, #9
 800b76e:	d903      	bls.n	800b778 <_svfiprintf_r+0x1a8>
 800b770:	2b00      	cmp	r3, #0
 800b772:	d0c5      	beq.n	800b700 <_svfiprintf_r+0x130>
 800b774:	9105      	str	r1, [sp, #20]
 800b776:	e7c3      	b.n	800b700 <_svfiprintf_r+0x130>
 800b778:	fb0c 2101 	mla	r1, ip, r1, r2
 800b77c:	4604      	mov	r4, r0
 800b77e:	2301      	movs	r3, #1
 800b780:	e7f0      	b.n	800b764 <_svfiprintf_r+0x194>
 800b782:	ab03      	add	r3, sp, #12
 800b784:	9300      	str	r3, [sp, #0]
 800b786:	462a      	mov	r2, r5
 800b788:	4b0f      	ldr	r3, [pc, #60]	; (800b7c8 <_svfiprintf_r+0x1f8>)
 800b78a:	a904      	add	r1, sp, #16
 800b78c:	4638      	mov	r0, r7
 800b78e:	f7fc f9ad 	bl	8007aec <_printf_float>
 800b792:	1c42      	adds	r2, r0, #1
 800b794:	4606      	mov	r6, r0
 800b796:	d1d6      	bne.n	800b746 <_svfiprintf_r+0x176>
 800b798:	89ab      	ldrh	r3, [r5, #12]
 800b79a:	065b      	lsls	r3, r3, #25
 800b79c:	f53f af2c 	bmi.w	800b5f8 <_svfiprintf_r+0x28>
 800b7a0:	9809      	ldr	r0, [sp, #36]	; 0x24
 800b7a2:	b01d      	add	sp, #116	; 0x74
 800b7a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b7a8:	ab03      	add	r3, sp, #12
 800b7aa:	9300      	str	r3, [sp, #0]
 800b7ac:	462a      	mov	r2, r5
 800b7ae:	4b06      	ldr	r3, [pc, #24]	; (800b7c8 <_svfiprintf_r+0x1f8>)
 800b7b0:	a904      	add	r1, sp, #16
 800b7b2:	4638      	mov	r0, r7
 800b7b4:	f7fc fc3e 	bl	8008034 <_printf_i>
 800b7b8:	e7eb      	b.n	800b792 <_svfiprintf_r+0x1c2>
 800b7ba:	bf00      	nop
 800b7bc:	0800c90c 	.word	0x0800c90c
 800b7c0:	0800c916 	.word	0x0800c916
 800b7c4:	08007aed 	.word	0x08007aed
 800b7c8:	0800b519 	.word	0x0800b519
 800b7cc:	0800c912 	.word	0x0800c912

0800b7d0 <__sfputc_r>:
 800b7d0:	6893      	ldr	r3, [r2, #8]
 800b7d2:	3b01      	subs	r3, #1
 800b7d4:	2b00      	cmp	r3, #0
 800b7d6:	b410      	push	{r4}
 800b7d8:	6093      	str	r3, [r2, #8]
 800b7da:	da08      	bge.n	800b7ee <__sfputc_r+0x1e>
 800b7dc:	6994      	ldr	r4, [r2, #24]
 800b7de:	42a3      	cmp	r3, r4
 800b7e0:	db01      	blt.n	800b7e6 <__sfputc_r+0x16>
 800b7e2:	290a      	cmp	r1, #10
 800b7e4:	d103      	bne.n	800b7ee <__sfputc_r+0x1e>
 800b7e6:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7ea:	f000 b979 	b.w	800bae0 <__swbuf_r>
 800b7ee:	6813      	ldr	r3, [r2, #0]
 800b7f0:	1c58      	adds	r0, r3, #1
 800b7f2:	6010      	str	r0, [r2, #0]
 800b7f4:	7019      	strb	r1, [r3, #0]
 800b7f6:	4608      	mov	r0, r1
 800b7f8:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b7fc:	4770      	bx	lr

0800b7fe <__sfputs_r>:
 800b7fe:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b800:	4606      	mov	r6, r0
 800b802:	460f      	mov	r7, r1
 800b804:	4614      	mov	r4, r2
 800b806:	18d5      	adds	r5, r2, r3
 800b808:	42ac      	cmp	r4, r5
 800b80a:	d101      	bne.n	800b810 <__sfputs_r+0x12>
 800b80c:	2000      	movs	r0, #0
 800b80e:	e007      	b.n	800b820 <__sfputs_r+0x22>
 800b810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b814:	463a      	mov	r2, r7
 800b816:	4630      	mov	r0, r6
 800b818:	f7ff ffda 	bl	800b7d0 <__sfputc_r>
 800b81c:	1c43      	adds	r3, r0, #1
 800b81e:	d1f3      	bne.n	800b808 <__sfputs_r+0xa>
 800b820:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800b824 <_vfiprintf_r>:
 800b824:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b828:	460d      	mov	r5, r1
 800b82a:	b09d      	sub	sp, #116	; 0x74
 800b82c:	4614      	mov	r4, r2
 800b82e:	4698      	mov	r8, r3
 800b830:	4606      	mov	r6, r0
 800b832:	b118      	cbz	r0, 800b83c <_vfiprintf_r+0x18>
 800b834:	6983      	ldr	r3, [r0, #24]
 800b836:	b90b      	cbnz	r3, 800b83c <_vfiprintf_r+0x18>
 800b838:	f000 fb42 	bl	800bec0 <__sinit>
 800b83c:	4b89      	ldr	r3, [pc, #548]	; (800ba64 <_vfiprintf_r+0x240>)
 800b83e:	429d      	cmp	r5, r3
 800b840:	d11b      	bne.n	800b87a <_vfiprintf_r+0x56>
 800b842:	6875      	ldr	r5, [r6, #4]
 800b844:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b846:	07d9      	lsls	r1, r3, #31
 800b848:	d405      	bmi.n	800b856 <_vfiprintf_r+0x32>
 800b84a:	89ab      	ldrh	r3, [r5, #12]
 800b84c:	059a      	lsls	r2, r3, #22
 800b84e:	d402      	bmi.n	800b856 <_vfiprintf_r+0x32>
 800b850:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b852:	f000 fbd3 	bl	800bffc <__retarget_lock_acquire_recursive>
 800b856:	89ab      	ldrh	r3, [r5, #12]
 800b858:	071b      	lsls	r3, r3, #28
 800b85a:	d501      	bpl.n	800b860 <_vfiprintf_r+0x3c>
 800b85c:	692b      	ldr	r3, [r5, #16]
 800b85e:	b9eb      	cbnz	r3, 800b89c <_vfiprintf_r+0x78>
 800b860:	4629      	mov	r1, r5
 800b862:	4630      	mov	r0, r6
 800b864:	f000 f99c 	bl	800bba0 <__swsetup_r>
 800b868:	b1c0      	cbz	r0, 800b89c <_vfiprintf_r+0x78>
 800b86a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800b86c:	07dc      	lsls	r4, r3, #31
 800b86e:	d50e      	bpl.n	800b88e <_vfiprintf_r+0x6a>
 800b870:	f04f 30ff 	mov.w	r0, #4294967295
 800b874:	b01d      	add	sp, #116	; 0x74
 800b876:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b87a:	4b7b      	ldr	r3, [pc, #492]	; (800ba68 <_vfiprintf_r+0x244>)
 800b87c:	429d      	cmp	r5, r3
 800b87e:	d101      	bne.n	800b884 <_vfiprintf_r+0x60>
 800b880:	68b5      	ldr	r5, [r6, #8]
 800b882:	e7df      	b.n	800b844 <_vfiprintf_r+0x20>
 800b884:	4b79      	ldr	r3, [pc, #484]	; (800ba6c <_vfiprintf_r+0x248>)
 800b886:	429d      	cmp	r5, r3
 800b888:	bf08      	it	eq
 800b88a:	68f5      	ldreq	r5, [r6, #12]
 800b88c:	e7da      	b.n	800b844 <_vfiprintf_r+0x20>
 800b88e:	89ab      	ldrh	r3, [r5, #12]
 800b890:	0598      	lsls	r0, r3, #22
 800b892:	d4ed      	bmi.n	800b870 <_vfiprintf_r+0x4c>
 800b894:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800b896:	f000 fbb2 	bl	800bffe <__retarget_lock_release_recursive>
 800b89a:	e7e9      	b.n	800b870 <_vfiprintf_r+0x4c>
 800b89c:	2300      	movs	r3, #0
 800b89e:	9309      	str	r3, [sp, #36]	; 0x24
 800b8a0:	2320      	movs	r3, #32
 800b8a2:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800b8a6:	f8cd 800c 	str.w	r8, [sp, #12]
 800b8aa:	2330      	movs	r3, #48	; 0x30
 800b8ac:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800ba70 <_vfiprintf_r+0x24c>
 800b8b0:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800b8b4:	f04f 0901 	mov.w	r9, #1
 800b8b8:	4623      	mov	r3, r4
 800b8ba:	469a      	mov	sl, r3
 800b8bc:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b8c0:	b10a      	cbz	r2, 800b8c6 <_vfiprintf_r+0xa2>
 800b8c2:	2a25      	cmp	r2, #37	; 0x25
 800b8c4:	d1f9      	bne.n	800b8ba <_vfiprintf_r+0x96>
 800b8c6:	ebba 0b04 	subs.w	fp, sl, r4
 800b8ca:	d00b      	beq.n	800b8e4 <_vfiprintf_r+0xc0>
 800b8cc:	465b      	mov	r3, fp
 800b8ce:	4622      	mov	r2, r4
 800b8d0:	4629      	mov	r1, r5
 800b8d2:	4630      	mov	r0, r6
 800b8d4:	f7ff ff93 	bl	800b7fe <__sfputs_r>
 800b8d8:	3001      	adds	r0, #1
 800b8da:	f000 80aa 	beq.w	800ba32 <_vfiprintf_r+0x20e>
 800b8de:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b8e0:	445a      	add	r2, fp
 800b8e2:	9209      	str	r2, [sp, #36]	; 0x24
 800b8e4:	f89a 3000 	ldrb.w	r3, [sl]
 800b8e8:	2b00      	cmp	r3, #0
 800b8ea:	f000 80a2 	beq.w	800ba32 <_vfiprintf_r+0x20e>
 800b8ee:	2300      	movs	r3, #0
 800b8f0:	f04f 32ff 	mov.w	r2, #4294967295
 800b8f4:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b8f8:	f10a 0a01 	add.w	sl, sl, #1
 800b8fc:	9304      	str	r3, [sp, #16]
 800b8fe:	9307      	str	r3, [sp, #28]
 800b900:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800b904:	931a      	str	r3, [sp, #104]	; 0x68
 800b906:	4654      	mov	r4, sl
 800b908:	2205      	movs	r2, #5
 800b90a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b90e:	4858      	ldr	r0, [pc, #352]	; (800ba70 <_vfiprintf_r+0x24c>)
 800b910:	f7f4 fc66 	bl	80001e0 <memchr>
 800b914:	9a04      	ldr	r2, [sp, #16]
 800b916:	b9d8      	cbnz	r0, 800b950 <_vfiprintf_r+0x12c>
 800b918:	06d1      	lsls	r1, r2, #27
 800b91a:	bf44      	itt	mi
 800b91c:	2320      	movmi	r3, #32
 800b91e:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b922:	0713      	lsls	r3, r2, #28
 800b924:	bf44      	itt	mi
 800b926:	232b      	movmi	r3, #43	; 0x2b
 800b928:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800b92c:	f89a 3000 	ldrb.w	r3, [sl]
 800b930:	2b2a      	cmp	r3, #42	; 0x2a
 800b932:	d015      	beq.n	800b960 <_vfiprintf_r+0x13c>
 800b934:	9a07      	ldr	r2, [sp, #28]
 800b936:	4654      	mov	r4, sl
 800b938:	2000      	movs	r0, #0
 800b93a:	f04f 0c0a 	mov.w	ip, #10
 800b93e:	4621      	mov	r1, r4
 800b940:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b944:	3b30      	subs	r3, #48	; 0x30
 800b946:	2b09      	cmp	r3, #9
 800b948:	d94e      	bls.n	800b9e8 <_vfiprintf_r+0x1c4>
 800b94a:	b1b0      	cbz	r0, 800b97a <_vfiprintf_r+0x156>
 800b94c:	9207      	str	r2, [sp, #28]
 800b94e:	e014      	b.n	800b97a <_vfiprintf_r+0x156>
 800b950:	eba0 0308 	sub.w	r3, r0, r8
 800b954:	fa09 f303 	lsl.w	r3, r9, r3
 800b958:	4313      	orrs	r3, r2
 800b95a:	9304      	str	r3, [sp, #16]
 800b95c:	46a2      	mov	sl, r4
 800b95e:	e7d2      	b.n	800b906 <_vfiprintf_r+0xe2>
 800b960:	9b03      	ldr	r3, [sp, #12]
 800b962:	1d19      	adds	r1, r3, #4
 800b964:	681b      	ldr	r3, [r3, #0]
 800b966:	9103      	str	r1, [sp, #12]
 800b968:	2b00      	cmp	r3, #0
 800b96a:	bfbb      	ittet	lt
 800b96c:	425b      	neglt	r3, r3
 800b96e:	f042 0202 	orrlt.w	r2, r2, #2
 800b972:	9307      	strge	r3, [sp, #28]
 800b974:	9307      	strlt	r3, [sp, #28]
 800b976:	bfb8      	it	lt
 800b978:	9204      	strlt	r2, [sp, #16]
 800b97a:	7823      	ldrb	r3, [r4, #0]
 800b97c:	2b2e      	cmp	r3, #46	; 0x2e
 800b97e:	d10c      	bne.n	800b99a <_vfiprintf_r+0x176>
 800b980:	7863      	ldrb	r3, [r4, #1]
 800b982:	2b2a      	cmp	r3, #42	; 0x2a
 800b984:	d135      	bne.n	800b9f2 <_vfiprintf_r+0x1ce>
 800b986:	9b03      	ldr	r3, [sp, #12]
 800b988:	1d1a      	adds	r2, r3, #4
 800b98a:	681b      	ldr	r3, [r3, #0]
 800b98c:	9203      	str	r2, [sp, #12]
 800b98e:	2b00      	cmp	r3, #0
 800b990:	bfb8      	it	lt
 800b992:	f04f 33ff 	movlt.w	r3, #4294967295
 800b996:	3402      	adds	r4, #2
 800b998:	9305      	str	r3, [sp, #20]
 800b99a:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800ba80 <_vfiprintf_r+0x25c>
 800b99e:	7821      	ldrb	r1, [r4, #0]
 800b9a0:	2203      	movs	r2, #3
 800b9a2:	4650      	mov	r0, sl
 800b9a4:	f7f4 fc1c 	bl	80001e0 <memchr>
 800b9a8:	b140      	cbz	r0, 800b9bc <_vfiprintf_r+0x198>
 800b9aa:	2340      	movs	r3, #64	; 0x40
 800b9ac:	eba0 000a 	sub.w	r0, r0, sl
 800b9b0:	fa03 f000 	lsl.w	r0, r3, r0
 800b9b4:	9b04      	ldr	r3, [sp, #16]
 800b9b6:	4303      	orrs	r3, r0
 800b9b8:	3401      	adds	r4, #1
 800b9ba:	9304      	str	r3, [sp, #16]
 800b9bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b9c0:	482c      	ldr	r0, [pc, #176]	; (800ba74 <_vfiprintf_r+0x250>)
 800b9c2:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800b9c6:	2206      	movs	r2, #6
 800b9c8:	f7f4 fc0a 	bl	80001e0 <memchr>
 800b9cc:	2800      	cmp	r0, #0
 800b9ce:	d03f      	beq.n	800ba50 <_vfiprintf_r+0x22c>
 800b9d0:	4b29      	ldr	r3, [pc, #164]	; (800ba78 <_vfiprintf_r+0x254>)
 800b9d2:	bb1b      	cbnz	r3, 800ba1c <_vfiprintf_r+0x1f8>
 800b9d4:	9b03      	ldr	r3, [sp, #12]
 800b9d6:	3307      	adds	r3, #7
 800b9d8:	f023 0307 	bic.w	r3, r3, #7
 800b9dc:	3308      	adds	r3, #8
 800b9de:	9303      	str	r3, [sp, #12]
 800b9e0:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b9e2:	443b      	add	r3, r7
 800b9e4:	9309      	str	r3, [sp, #36]	; 0x24
 800b9e6:	e767      	b.n	800b8b8 <_vfiprintf_r+0x94>
 800b9e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800b9ec:	460c      	mov	r4, r1
 800b9ee:	2001      	movs	r0, #1
 800b9f0:	e7a5      	b.n	800b93e <_vfiprintf_r+0x11a>
 800b9f2:	2300      	movs	r3, #0
 800b9f4:	3401      	adds	r4, #1
 800b9f6:	9305      	str	r3, [sp, #20]
 800b9f8:	4619      	mov	r1, r3
 800b9fa:	f04f 0c0a 	mov.w	ip, #10
 800b9fe:	4620      	mov	r0, r4
 800ba00:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ba04:	3a30      	subs	r2, #48	; 0x30
 800ba06:	2a09      	cmp	r2, #9
 800ba08:	d903      	bls.n	800ba12 <_vfiprintf_r+0x1ee>
 800ba0a:	2b00      	cmp	r3, #0
 800ba0c:	d0c5      	beq.n	800b99a <_vfiprintf_r+0x176>
 800ba0e:	9105      	str	r1, [sp, #20]
 800ba10:	e7c3      	b.n	800b99a <_vfiprintf_r+0x176>
 800ba12:	fb0c 2101 	mla	r1, ip, r1, r2
 800ba16:	4604      	mov	r4, r0
 800ba18:	2301      	movs	r3, #1
 800ba1a:	e7f0      	b.n	800b9fe <_vfiprintf_r+0x1da>
 800ba1c:	ab03      	add	r3, sp, #12
 800ba1e:	9300      	str	r3, [sp, #0]
 800ba20:	462a      	mov	r2, r5
 800ba22:	4b16      	ldr	r3, [pc, #88]	; (800ba7c <_vfiprintf_r+0x258>)
 800ba24:	a904      	add	r1, sp, #16
 800ba26:	4630      	mov	r0, r6
 800ba28:	f7fc f860 	bl	8007aec <_printf_float>
 800ba2c:	4607      	mov	r7, r0
 800ba2e:	1c78      	adds	r0, r7, #1
 800ba30:	d1d6      	bne.n	800b9e0 <_vfiprintf_r+0x1bc>
 800ba32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800ba34:	07d9      	lsls	r1, r3, #31
 800ba36:	d405      	bmi.n	800ba44 <_vfiprintf_r+0x220>
 800ba38:	89ab      	ldrh	r3, [r5, #12]
 800ba3a:	059a      	lsls	r2, r3, #22
 800ba3c:	d402      	bmi.n	800ba44 <_vfiprintf_r+0x220>
 800ba3e:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800ba40:	f000 fadd 	bl	800bffe <__retarget_lock_release_recursive>
 800ba44:	89ab      	ldrh	r3, [r5, #12]
 800ba46:	065b      	lsls	r3, r3, #25
 800ba48:	f53f af12 	bmi.w	800b870 <_vfiprintf_r+0x4c>
 800ba4c:	9809      	ldr	r0, [sp, #36]	; 0x24
 800ba4e:	e711      	b.n	800b874 <_vfiprintf_r+0x50>
 800ba50:	ab03      	add	r3, sp, #12
 800ba52:	9300      	str	r3, [sp, #0]
 800ba54:	462a      	mov	r2, r5
 800ba56:	4b09      	ldr	r3, [pc, #36]	; (800ba7c <_vfiprintf_r+0x258>)
 800ba58:	a904      	add	r1, sp, #16
 800ba5a:	4630      	mov	r0, r6
 800ba5c:	f7fc faea 	bl	8008034 <_printf_i>
 800ba60:	e7e4      	b.n	800ba2c <_vfiprintf_r+0x208>
 800ba62:	bf00      	nop
 800ba64:	0800c940 	.word	0x0800c940
 800ba68:	0800c960 	.word	0x0800c960
 800ba6c:	0800c920 	.word	0x0800c920
 800ba70:	0800c90c 	.word	0x0800c90c
 800ba74:	0800c916 	.word	0x0800c916
 800ba78:	08007aed 	.word	0x08007aed
 800ba7c:	0800b7ff 	.word	0x0800b7ff
 800ba80:	0800c912 	.word	0x0800c912
 800ba84:	00000000 	.word	0x00000000

0800ba88 <nan>:
 800ba88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800ba90 <nan+0x8>
 800ba8c:	4770      	bx	lr
 800ba8e:	bf00      	nop
 800ba90:	00000000 	.word	0x00000000
 800ba94:	7ff80000 	.word	0x7ff80000

0800ba98 <_sbrk_r>:
 800ba98:	b538      	push	{r3, r4, r5, lr}
 800ba9a:	4d06      	ldr	r5, [pc, #24]	; (800bab4 <_sbrk_r+0x1c>)
 800ba9c:	2300      	movs	r3, #0
 800ba9e:	4604      	mov	r4, r0
 800baa0:	4608      	mov	r0, r1
 800baa2:	602b      	str	r3, [r5, #0]
 800baa4:	f7f8 fc1a 	bl	80042dc <_sbrk>
 800baa8:	1c43      	adds	r3, r0, #1
 800baaa:	d102      	bne.n	800bab2 <_sbrk_r+0x1a>
 800baac:	682b      	ldr	r3, [r5, #0]
 800baae:	b103      	cbz	r3, 800bab2 <_sbrk_r+0x1a>
 800bab0:	6023      	str	r3, [r4, #0]
 800bab2:	bd38      	pop	{r3, r4, r5, pc}
 800bab4:	200062f4 	.word	0x200062f4

0800bab8 <strncmp>:
 800bab8:	b510      	push	{r4, lr}
 800baba:	b17a      	cbz	r2, 800badc <strncmp+0x24>
 800babc:	4603      	mov	r3, r0
 800babe:	3901      	subs	r1, #1
 800bac0:	1884      	adds	r4, r0, r2
 800bac2:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bac6:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800baca:	4290      	cmp	r0, r2
 800bacc:	d101      	bne.n	800bad2 <strncmp+0x1a>
 800bace:	42a3      	cmp	r3, r4
 800bad0:	d101      	bne.n	800bad6 <strncmp+0x1e>
 800bad2:	1a80      	subs	r0, r0, r2
 800bad4:	bd10      	pop	{r4, pc}
 800bad6:	2800      	cmp	r0, #0
 800bad8:	d1f3      	bne.n	800bac2 <strncmp+0xa>
 800bada:	e7fa      	b.n	800bad2 <strncmp+0x1a>
 800badc:	4610      	mov	r0, r2
 800bade:	e7f9      	b.n	800bad4 <strncmp+0x1c>

0800bae0 <__swbuf_r>:
 800bae0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bae2:	460e      	mov	r6, r1
 800bae4:	4614      	mov	r4, r2
 800bae6:	4605      	mov	r5, r0
 800bae8:	b118      	cbz	r0, 800baf2 <__swbuf_r+0x12>
 800baea:	6983      	ldr	r3, [r0, #24]
 800baec:	b90b      	cbnz	r3, 800baf2 <__swbuf_r+0x12>
 800baee:	f000 f9e7 	bl	800bec0 <__sinit>
 800baf2:	4b21      	ldr	r3, [pc, #132]	; (800bb78 <__swbuf_r+0x98>)
 800baf4:	429c      	cmp	r4, r3
 800baf6:	d12b      	bne.n	800bb50 <__swbuf_r+0x70>
 800baf8:	686c      	ldr	r4, [r5, #4]
 800bafa:	69a3      	ldr	r3, [r4, #24]
 800bafc:	60a3      	str	r3, [r4, #8]
 800bafe:	89a3      	ldrh	r3, [r4, #12]
 800bb00:	071a      	lsls	r2, r3, #28
 800bb02:	d52f      	bpl.n	800bb64 <__swbuf_r+0x84>
 800bb04:	6923      	ldr	r3, [r4, #16]
 800bb06:	b36b      	cbz	r3, 800bb64 <__swbuf_r+0x84>
 800bb08:	6923      	ldr	r3, [r4, #16]
 800bb0a:	6820      	ldr	r0, [r4, #0]
 800bb0c:	1ac0      	subs	r0, r0, r3
 800bb0e:	6963      	ldr	r3, [r4, #20]
 800bb10:	b2f6      	uxtb	r6, r6
 800bb12:	4283      	cmp	r3, r0
 800bb14:	4637      	mov	r7, r6
 800bb16:	dc04      	bgt.n	800bb22 <__swbuf_r+0x42>
 800bb18:	4621      	mov	r1, r4
 800bb1a:	4628      	mov	r0, r5
 800bb1c:	f000 f93c 	bl	800bd98 <_fflush_r>
 800bb20:	bb30      	cbnz	r0, 800bb70 <__swbuf_r+0x90>
 800bb22:	68a3      	ldr	r3, [r4, #8]
 800bb24:	3b01      	subs	r3, #1
 800bb26:	60a3      	str	r3, [r4, #8]
 800bb28:	6823      	ldr	r3, [r4, #0]
 800bb2a:	1c5a      	adds	r2, r3, #1
 800bb2c:	6022      	str	r2, [r4, #0]
 800bb2e:	701e      	strb	r6, [r3, #0]
 800bb30:	6963      	ldr	r3, [r4, #20]
 800bb32:	3001      	adds	r0, #1
 800bb34:	4283      	cmp	r3, r0
 800bb36:	d004      	beq.n	800bb42 <__swbuf_r+0x62>
 800bb38:	89a3      	ldrh	r3, [r4, #12]
 800bb3a:	07db      	lsls	r3, r3, #31
 800bb3c:	d506      	bpl.n	800bb4c <__swbuf_r+0x6c>
 800bb3e:	2e0a      	cmp	r6, #10
 800bb40:	d104      	bne.n	800bb4c <__swbuf_r+0x6c>
 800bb42:	4621      	mov	r1, r4
 800bb44:	4628      	mov	r0, r5
 800bb46:	f000 f927 	bl	800bd98 <_fflush_r>
 800bb4a:	b988      	cbnz	r0, 800bb70 <__swbuf_r+0x90>
 800bb4c:	4638      	mov	r0, r7
 800bb4e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bb50:	4b0a      	ldr	r3, [pc, #40]	; (800bb7c <__swbuf_r+0x9c>)
 800bb52:	429c      	cmp	r4, r3
 800bb54:	d101      	bne.n	800bb5a <__swbuf_r+0x7a>
 800bb56:	68ac      	ldr	r4, [r5, #8]
 800bb58:	e7cf      	b.n	800bafa <__swbuf_r+0x1a>
 800bb5a:	4b09      	ldr	r3, [pc, #36]	; (800bb80 <__swbuf_r+0xa0>)
 800bb5c:	429c      	cmp	r4, r3
 800bb5e:	bf08      	it	eq
 800bb60:	68ec      	ldreq	r4, [r5, #12]
 800bb62:	e7ca      	b.n	800bafa <__swbuf_r+0x1a>
 800bb64:	4621      	mov	r1, r4
 800bb66:	4628      	mov	r0, r5
 800bb68:	f000 f81a 	bl	800bba0 <__swsetup_r>
 800bb6c:	2800      	cmp	r0, #0
 800bb6e:	d0cb      	beq.n	800bb08 <__swbuf_r+0x28>
 800bb70:	f04f 37ff 	mov.w	r7, #4294967295
 800bb74:	e7ea      	b.n	800bb4c <__swbuf_r+0x6c>
 800bb76:	bf00      	nop
 800bb78:	0800c940 	.word	0x0800c940
 800bb7c:	0800c960 	.word	0x0800c960
 800bb80:	0800c920 	.word	0x0800c920

0800bb84 <__ascii_wctomb>:
 800bb84:	b149      	cbz	r1, 800bb9a <__ascii_wctomb+0x16>
 800bb86:	2aff      	cmp	r2, #255	; 0xff
 800bb88:	bf85      	ittet	hi
 800bb8a:	238a      	movhi	r3, #138	; 0x8a
 800bb8c:	6003      	strhi	r3, [r0, #0]
 800bb8e:	700a      	strbls	r2, [r1, #0]
 800bb90:	f04f 30ff 	movhi.w	r0, #4294967295
 800bb94:	bf98      	it	ls
 800bb96:	2001      	movls	r0, #1
 800bb98:	4770      	bx	lr
 800bb9a:	4608      	mov	r0, r1
 800bb9c:	4770      	bx	lr
	...

0800bba0 <__swsetup_r>:
 800bba0:	4b32      	ldr	r3, [pc, #200]	; (800bc6c <__swsetup_r+0xcc>)
 800bba2:	b570      	push	{r4, r5, r6, lr}
 800bba4:	681d      	ldr	r5, [r3, #0]
 800bba6:	4606      	mov	r6, r0
 800bba8:	460c      	mov	r4, r1
 800bbaa:	b125      	cbz	r5, 800bbb6 <__swsetup_r+0x16>
 800bbac:	69ab      	ldr	r3, [r5, #24]
 800bbae:	b913      	cbnz	r3, 800bbb6 <__swsetup_r+0x16>
 800bbb0:	4628      	mov	r0, r5
 800bbb2:	f000 f985 	bl	800bec0 <__sinit>
 800bbb6:	4b2e      	ldr	r3, [pc, #184]	; (800bc70 <__swsetup_r+0xd0>)
 800bbb8:	429c      	cmp	r4, r3
 800bbba:	d10f      	bne.n	800bbdc <__swsetup_r+0x3c>
 800bbbc:	686c      	ldr	r4, [r5, #4]
 800bbbe:	89a3      	ldrh	r3, [r4, #12]
 800bbc0:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bbc4:	0719      	lsls	r1, r3, #28
 800bbc6:	d42c      	bmi.n	800bc22 <__swsetup_r+0x82>
 800bbc8:	06dd      	lsls	r5, r3, #27
 800bbca:	d411      	bmi.n	800bbf0 <__swsetup_r+0x50>
 800bbcc:	2309      	movs	r3, #9
 800bbce:	6033      	str	r3, [r6, #0]
 800bbd0:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800bbd4:	81a3      	strh	r3, [r4, #12]
 800bbd6:	f04f 30ff 	mov.w	r0, #4294967295
 800bbda:	e03e      	b.n	800bc5a <__swsetup_r+0xba>
 800bbdc:	4b25      	ldr	r3, [pc, #148]	; (800bc74 <__swsetup_r+0xd4>)
 800bbde:	429c      	cmp	r4, r3
 800bbe0:	d101      	bne.n	800bbe6 <__swsetup_r+0x46>
 800bbe2:	68ac      	ldr	r4, [r5, #8]
 800bbe4:	e7eb      	b.n	800bbbe <__swsetup_r+0x1e>
 800bbe6:	4b24      	ldr	r3, [pc, #144]	; (800bc78 <__swsetup_r+0xd8>)
 800bbe8:	429c      	cmp	r4, r3
 800bbea:	bf08      	it	eq
 800bbec:	68ec      	ldreq	r4, [r5, #12]
 800bbee:	e7e6      	b.n	800bbbe <__swsetup_r+0x1e>
 800bbf0:	0758      	lsls	r0, r3, #29
 800bbf2:	d512      	bpl.n	800bc1a <__swsetup_r+0x7a>
 800bbf4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bbf6:	b141      	cbz	r1, 800bc0a <__swsetup_r+0x6a>
 800bbf8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bbfc:	4299      	cmp	r1, r3
 800bbfe:	d002      	beq.n	800bc06 <__swsetup_r+0x66>
 800bc00:	4630      	mov	r0, r6
 800bc02:	f7ff fba9 	bl	800b358 <_free_r>
 800bc06:	2300      	movs	r3, #0
 800bc08:	6363      	str	r3, [r4, #52]	; 0x34
 800bc0a:	89a3      	ldrh	r3, [r4, #12]
 800bc0c:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800bc10:	81a3      	strh	r3, [r4, #12]
 800bc12:	2300      	movs	r3, #0
 800bc14:	6063      	str	r3, [r4, #4]
 800bc16:	6923      	ldr	r3, [r4, #16]
 800bc18:	6023      	str	r3, [r4, #0]
 800bc1a:	89a3      	ldrh	r3, [r4, #12]
 800bc1c:	f043 0308 	orr.w	r3, r3, #8
 800bc20:	81a3      	strh	r3, [r4, #12]
 800bc22:	6923      	ldr	r3, [r4, #16]
 800bc24:	b94b      	cbnz	r3, 800bc3a <__swsetup_r+0x9a>
 800bc26:	89a3      	ldrh	r3, [r4, #12]
 800bc28:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800bc2c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800bc30:	d003      	beq.n	800bc3a <__swsetup_r+0x9a>
 800bc32:	4621      	mov	r1, r4
 800bc34:	4630      	mov	r0, r6
 800bc36:	f000 fa09 	bl	800c04c <__smakebuf_r>
 800bc3a:	89a0      	ldrh	r0, [r4, #12]
 800bc3c:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800bc40:	f010 0301 	ands.w	r3, r0, #1
 800bc44:	d00a      	beq.n	800bc5c <__swsetup_r+0xbc>
 800bc46:	2300      	movs	r3, #0
 800bc48:	60a3      	str	r3, [r4, #8]
 800bc4a:	6963      	ldr	r3, [r4, #20]
 800bc4c:	425b      	negs	r3, r3
 800bc4e:	61a3      	str	r3, [r4, #24]
 800bc50:	6923      	ldr	r3, [r4, #16]
 800bc52:	b943      	cbnz	r3, 800bc66 <__swsetup_r+0xc6>
 800bc54:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800bc58:	d1ba      	bne.n	800bbd0 <__swsetup_r+0x30>
 800bc5a:	bd70      	pop	{r4, r5, r6, pc}
 800bc5c:	0781      	lsls	r1, r0, #30
 800bc5e:	bf58      	it	pl
 800bc60:	6963      	ldrpl	r3, [r4, #20]
 800bc62:	60a3      	str	r3, [r4, #8]
 800bc64:	e7f4      	b.n	800bc50 <__swsetup_r+0xb0>
 800bc66:	2000      	movs	r0, #0
 800bc68:	e7f7      	b.n	800bc5a <__swsetup_r+0xba>
 800bc6a:	bf00      	nop
 800bc6c:	2000001c 	.word	0x2000001c
 800bc70:	0800c940 	.word	0x0800c940
 800bc74:	0800c960 	.word	0x0800c960
 800bc78:	0800c920 	.word	0x0800c920

0800bc7c <abort>:
 800bc7c:	b508      	push	{r3, lr}
 800bc7e:	2006      	movs	r0, #6
 800bc80:	f000 faa2 	bl	800c1c8 <raise>
 800bc84:	2001      	movs	r0, #1
 800bc86:	f7f8 fab1 	bl	80041ec <_exit>
	...

0800bc8c <__sflush_r>:
 800bc8c:	898a      	ldrh	r2, [r1, #12]
 800bc8e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800bc92:	4605      	mov	r5, r0
 800bc94:	0710      	lsls	r0, r2, #28
 800bc96:	460c      	mov	r4, r1
 800bc98:	d458      	bmi.n	800bd4c <__sflush_r+0xc0>
 800bc9a:	684b      	ldr	r3, [r1, #4]
 800bc9c:	2b00      	cmp	r3, #0
 800bc9e:	dc05      	bgt.n	800bcac <__sflush_r+0x20>
 800bca0:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800bca2:	2b00      	cmp	r3, #0
 800bca4:	dc02      	bgt.n	800bcac <__sflush_r+0x20>
 800bca6:	2000      	movs	r0, #0
 800bca8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800bcac:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcae:	2e00      	cmp	r6, #0
 800bcb0:	d0f9      	beq.n	800bca6 <__sflush_r+0x1a>
 800bcb2:	2300      	movs	r3, #0
 800bcb4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800bcb8:	682f      	ldr	r7, [r5, #0]
 800bcba:	602b      	str	r3, [r5, #0]
 800bcbc:	d032      	beq.n	800bd24 <__sflush_r+0x98>
 800bcbe:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800bcc0:	89a3      	ldrh	r3, [r4, #12]
 800bcc2:	075a      	lsls	r2, r3, #29
 800bcc4:	d505      	bpl.n	800bcd2 <__sflush_r+0x46>
 800bcc6:	6863      	ldr	r3, [r4, #4]
 800bcc8:	1ac0      	subs	r0, r0, r3
 800bcca:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800bccc:	b10b      	cbz	r3, 800bcd2 <__sflush_r+0x46>
 800bcce:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800bcd0:	1ac0      	subs	r0, r0, r3
 800bcd2:	2300      	movs	r3, #0
 800bcd4:	4602      	mov	r2, r0
 800bcd6:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800bcd8:	6a21      	ldr	r1, [r4, #32]
 800bcda:	4628      	mov	r0, r5
 800bcdc:	47b0      	blx	r6
 800bcde:	1c43      	adds	r3, r0, #1
 800bce0:	89a3      	ldrh	r3, [r4, #12]
 800bce2:	d106      	bne.n	800bcf2 <__sflush_r+0x66>
 800bce4:	6829      	ldr	r1, [r5, #0]
 800bce6:	291d      	cmp	r1, #29
 800bce8:	d82c      	bhi.n	800bd44 <__sflush_r+0xb8>
 800bcea:	4a2a      	ldr	r2, [pc, #168]	; (800bd94 <__sflush_r+0x108>)
 800bcec:	40ca      	lsrs	r2, r1
 800bcee:	07d6      	lsls	r6, r2, #31
 800bcf0:	d528      	bpl.n	800bd44 <__sflush_r+0xb8>
 800bcf2:	2200      	movs	r2, #0
 800bcf4:	6062      	str	r2, [r4, #4]
 800bcf6:	04d9      	lsls	r1, r3, #19
 800bcf8:	6922      	ldr	r2, [r4, #16]
 800bcfa:	6022      	str	r2, [r4, #0]
 800bcfc:	d504      	bpl.n	800bd08 <__sflush_r+0x7c>
 800bcfe:	1c42      	adds	r2, r0, #1
 800bd00:	d101      	bne.n	800bd06 <__sflush_r+0x7a>
 800bd02:	682b      	ldr	r3, [r5, #0]
 800bd04:	b903      	cbnz	r3, 800bd08 <__sflush_r+0x7c>
 800bd06:	6560      	str	r0, [r4, #84]	; 0x54
 800bd08:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800bd0a:	602f      	str	r7, [r5, #0]
 800bd0c:	2900      	cmp	r1, #0
 800bd0e:	d0ca      	beq.n	800bca6 <__sflush_r+0x1a>
 800bd10:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800bd14:	4299      	cmp	r1, r3
 800bd16:	d002      	beq.n	800bd1e <__sflush_r+0x92>
 800bd18:	4628      	mov	r0, r5
 800bd1a:	f7ff fb1d 	bl	800b358 <_free_r>
 800bd1e:	2000      	movs	r0, #0
 800bd20:	6360      	str	r0, [r4, #52]	; 0x34
 800bd22:	e7c1      	b.n	800bca8 <__sflush_r+0x1c>
 800bd24:	6a21      	ldr	r1, [r4, #32]
 800bd26:	2301      	movs	r3, #1
 800bd28:	4628      	mov	r0, r5
 800bd2a:	47b0      	blx	r6
 800bd2c:	1c41      	adds	r1, r0, #1
 800bd2e:	d1c7      	bne.n	800bcc0 <__sflush_r+0x34>
 800bd30:	682b      	ldr	r3, [r5, #0]
 800bd32:	2b00      	cmp	r3, #0
 800bd34:	d0c4      	beq.n	800bcc0 <__sflush_r+0x34>
 800bd36:	2b1d      	cmp	r3, #29
 800bd38:	d001      	beq.n	800bd3e <__sflush_r+0xb2>
 800bd3a:	2b16      	cmp	r3, #22
 800bd3c:	d101      	bne.n	800bd42 <__sflush_r+0xb6>
 800bd3e:	602f      	str	r7, [r5, #0]
 800bd40:	e7b1      	b.n	800bca6 <__sflush_r+0x1a>
 800bd42:	89a3      	ldrh	r3, [r4, #12]
 800bd44:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd48:	81a3      	strh	r3, [r4, #12]
 800bd4a:	e7ad      	b.n	800bca8 <__sflush_r+0x1c>
 800bd4c:	690f      	ldr	r7, [r1, #16]
 800bd4e:	2f00      	cmp	r7, #0
 800bd50:	d0a9      	beq.n	800bca6 <__sflush_r+0x1a>
 800bd52:	0793      	lsls	r3, r2, #30
 800bd54:	680e      	ldr	r6, [r1, #0]
 800bd56:	bf08      	it	eq
 800bd58:	694b      	ldreq	r3, [r1, #20]
 800bd5a:	600f      	str	r7, [r1, #0]
 800bd5c:	bf18      	it	ne
 800bd5e:	2300      	movne	r3, #0
 800bd60:	eba6 0807 	sub.w	r8, r6, r7
 800bd64:	608b      	str	r3, [r1, #8]
 800bd66:	f1b8 0f00 	cmp.w	r8, #0
 800bd6a:	dd9c      	ble.n	800bca6 <__sflush_r+0x1a>
 800bd6c:	6a21      	ldr	r1, [r4, #32]
 800bd6e:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800bd70:	4643      	mov	r3, r8
 800bd72:	463a      	mov	r2, r7
 800bd74:	4628      	mov	r0, r5
 800bd76:	47b0      	blx	r6
 800bd78:	2800      	cmp	r0, #0
 800bd7a:	dc06      	bgt.n	800bd8a <__sflush_r+0xfe>
 800bd7c:	89a3      	ldrh	r3, [r4, #12]
 800bd7e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800bd82:	81a3      	strh	r3, [r4, #12]
 800bd84:	f04f 30ff 	mov.w	r0, #4294967295
 800bd88:	e78e      	b.n	800bca8 <__sflush_r+0x1c>
 800bd8a:	4407      	add	r7, r0
 800bd8c:	eba8 0800 	sub.w	r8, r8, r0
 800bd90:	e7e9      	b.n	800bd66 <__sflush_r+0xda>
 800bd92:	bf00      	nop
 800bd94:	20400001 	.word	0x20400001

0800bd98 <_fflush_r>:
 800bd98:	b538      	push	{r3, r4, r5, lr}
 800bd9a:	690b      	ldr	r3, [r1, #16]
 800bd9c:	4605      	mov	r5, r0
 800bd9e:	460c      	mov	r4, r1
 800bda0:	b913      	cbnz	r3, 800bda8 <_fflush_r+0x10>
 800bda2:	2500      	movs	r5, #0
 800bda4:	4628      	mov	r0, r5
 800bda6:	bd38      	pop	{r3, r4, r5, pc}
 800bda8:	b118      	cbz	r0, 800bdb2 <_fflush_r+0x1a>
 800bdaa:	6983      	ldr	r3, [r0, #24]
 800bdac:	b90b      	cbnz	r3, 800bdb2 <_fflush_r+0x1a>
 800bdae:	f000 f887 	bl	800bec0 <__sinit>
 800bdb2:	4b14      	ldr	r3, [pc, #80]	; (800be04 <_fflush_r+0x6c>)
 800bdb4:	429c      	cmp	r4, r3
 800bdb6:	d11b      	bne.n	800bdf0 <_fflush_r+0x58>
 800bdb8:	686c      	ldr	r4, [r5, #4]
 800bdba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800bdbe:	2b00      	cmp	r3, #0
 800bdc0:	d0ef      	beq.n	800bda2 <_fflush_r+0xa>
 800bdc2:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800bdc4:	07d0      	lsls	r0, r2, #31
 800bdc6:	d404      	bmi.n	800bdd2 <_fflush_r+0x3a>
 800bdc8:	0599      	lsls	r1, r3, #22
 800bdca:	d402      	bmi.n	800bdd2 <_fflush_r+0x3a>
 800bdcc:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdce:	f000 f915 	bl	800bffc <__retarget_lock_acquire_recursive>
 800bdd2:	4628      	mov	r0, r5
 800bdd4:	4621      	mov	r1, r4
 800bdd6:	f7ff ff59 	bl	800bc8c <__sflush_r>
 800bdda:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800bddc:	07da      	lsls	r2, r3, #31
 800bdde:	4605      	mov	r5, r0
 800bde0:	d4e0      	bmi.n	800bda4 <_fflush_r+0xc>
 800bde2:	89a3      	ldrh	r3, [r4, #12]
 800bde4:	059b      	lsls	r3, r3, #22
 800bde6:	d4dd      	bmi.n	800bda4 <_fflush_r+0xc>
 800bde8:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800bdea:	f000 f908 	bl	800bffe <__retarget_lock_release_recursive>
 800bdee:	e7d9      	b.n	800bda4 <_fflush_r+0xc>
 800bdf0:	4b05      	ldr	r3, [pc, #20]	; (800be08 <_fflush_r+0x70>)
 800bdf2:	429c      	cmp	r4, r3
 800bdf4:	d101      	bne.n	800bdfa <_fflush_r+0x62>
 800bdf6:	68ac      	ldr	r4, [r5, #8]
 800bdf8:	e7df      	b.n	800bdba <_fflush_r+0x22>
 800bdfa:	4b04      	ldr	r3, [pc, #16]	; (800be0c <_fflush_r+0x74>)
 800bdfc:	429c      	cmp	r4, r3
 800bdfe:	bf08      	it	eq
 800be00:	68ec      	ldreq	r4, [r5, #12]
 800be02:	e7da      	b.n	800bdba <_fflush_r+0x22>
 800be04:	0800c940 	.word	0x0800c940
 800be08:	0800c960 	.word	0x0800c960
 800be0c:	0800c920 	.word	0x0800c920

0800be10 <std>:
 800be10:	2300      	movs	r3, #0
 800be12:	b510      	push	{r4, lr}
 800be14:	4604      	mov	r4, r0
 800be16:	e9c0 3300 	strd	r3, r3, [r0]
 800be1a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800be1e:	6083      	str	r3, [r0, #8]
 800be20:	8181      	strh	r1, [r0, #12]
 800be22:	6643      	str	r3, [r0, #100]	; 0x64
 800be24:	81c2      	strh	r2, [r0, #14]
 800be26:	6183      	str	r3, [r0, #24]
 800be28:	4619      	mov	r1, r3
 800be2a:	2208      	movs	r2, #8
 800be2c:	305c      	adds	r0, #92	; 0x5c
 800be2e:	f7fb fdb5 	bl	800799c <memset>
 800be32:	4b05      	ldr	r3, [pc, #20]	; (800be48 <std+0x38>)
 800be34:	6263      	str	r3, [r4, #36]	; 0x24
 800be36:	4b05      	ldr	r3, [pc, #20]	; (800be4c <std+0x3c>)
 800be38:	62a3      	str	r3, [r4, #40]	; 0x28
 800be3a:	4b05      	ldr	r3, [pc, #20]	; (800be50 <std+0x40>)
 800be3c:	62e3      	str	r3, [r4, #44]	; 0x2c
 800be3e:	4b05      	ldr	r3, [pc, #20]	; (800be54 <std+0x44>)
 800be40:	6224      	str	r4, [r4, #32]
 800be42:	6323      	str	r3, [r4, #48]	; 0x30
 800be44:	bd10      	pop	{r4, pc}
 800be46:	bf00      	nop
 800be48:	0800c201 	.word	0x0800c201
 800be4c:	0800c223 	.word	0x0800c223
 800be50:	0800c25b 	.word	0x0800c25b
 800be54:	0800c27f 	.word	0x0800c27f

0800be58 <_cleanup_r>:
 800be58:	4901      	ldr	r1, [pc, #4]	; (800be60 <_cleanup_r+0x8>)
 800be5a:	f000 b8af 	b.w	800bfbc <_fwalk_reent>
 800be5e:	bf00      	nop
 800be60:	0800bd99 	.word	0x0800bd99

0800be64 <__sfmoreglue>:
 800be64:	b570      	push	{r4, r5, r6, lr}
 800be66:	2268      	movs	r2, #104	; 0x68
 800be68:	1e4d      	subs	r5, r1, #1
 800be6a:	4355      	muls	r5, r2
 800be6c:	460e      	mov	r6, r1
 800be6e:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800be72:	f7ff fadd 	bl	800b430 <_malloc_r>
 800be76:	4604      	mov	r4, r0
 800be78:	b140      	cbz	r0, 800be8c <__sfmoreglue+0x28>
 800be7a:	2100      	movs	r1, #0
 800be7c:	e9c0 1600 	strd	r1, r6, [r0]
 800be80:	300c      	adds	r0, #12
 800be82:	60a0      	str	r0, [r4, #8]
 800be84:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800be88:	f7fb fd88 	bl	800799c <memset>
 800be8c:	4620      	mov	r0, r4
 800be8e:	bd70      	pop	{r4, r5, r6, pc}

0800be90 <__sfp_lock_acquire>:
 800be90:	4801      	ldr	r0, [pc, #4]	; (800be98 <__sfp_lock_acquire+0x8>)
 800be92:	f000 b8b3 	b.w	800bffc <__retarget_lock_acquire_recursive>
 800be96:	bf00      	nop
 800be98:	200062f1 	.word	0x200062f1

0800be9c <__sfp_lock_release>:
 800be9c:	4801      	ldr	r0, [pc, #4]	; (800bea4 <__sfp_lock_release+0x8>)
 800be9e:	f000 b8ae 	b.w	800bffe <__retarget_lock_release_recursive>
 800bea2:	bf00      	nop
 800bea4:	200062f1 	.word	0x200062f1

0800bea8 <__sinit_lock_acquire>:
 800bea8:	4801      	ldr	r0, [pc, #4]	; (800beb0 <__sinit_lock_acquire+0x8>)
 800beaa:	f000 b8a7 	b.w	800bffc <__retarget_lock_acquire_recursive>
 800beae:	bf00      	nop
 800beb0:	200062f2 	.word	0x200062f2

0800beb4 <__sinit_lock_release>:
 800beb4:	4801      	ldr	r0, [pc, #4]	; (800bebc <__sinit_lock_release+0x8>)
 800beb6:	f000 b8a2 	b.w	800bffe <__retarget_lock_release_recursive>
 800beba:	bf00      	nop
 800bebc:	200062f2 	.word	0x200062f2

0800bec0 <__sinit>:
 800bec0:	b510      	push	{r4, lr}
 800bec2:	4604      	mov	r4, r0
 800bec4:	f7ff fff0 	bl	800bea8 <__sinit_lock_acquire>
 800bec8:	69a3      	ldr	r3, [r4, #24]
 800beca:	b11b      	cbz	r3, 800bed4 <__sinit+0x14>
 800becc:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800bed0:	f7ff bff0 	b.w	800beb4 <__sinit_lock_release>
 800bed4:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800bed8:	6523      	str	r3, [r4, #80]	; 0x50
 800beda:	4b13      	ldr	r3, [pc, #76]	; (800bf28 <__sinit+0x68>)
 800bedc:	4a13      	ldr	r2, [pc, #76]	; (800bf2c <__sinit+0x6c>)
 800bede:	681b      	ldr	r3, [r3, #0]
 800bee0:	62a2      	str	r2, [r4, #40]	; 0x28
 800bee2:	42a3      	cmp	r3, r4
 800bee4:	bf04      	itt	eq
 800bee6:	2301      	moveq	r3, #1
 800bee8:	61a3      	streq	r3, [r4, #24]
 800beea:	4620      	mov	r0, r4
 800beec:	f000 f820 	bl	800bf30 <__sfp>
 800bef0:	6060      	str	r0, [r4, #4]
 800bef2:	4620      	mov	r0, r4
 800bef4:	f000 f81c 	bl	800bf30 <__sfp>
 800bef8:	60a0      	str	r0, [r4, #8]
 800befa:	4620      	mov	r0, r4
 800befc:	f000 f818 	bl	800bf30 <__sfp>
 800bf00:	2200      	movs	r2, #0
 800bf02:	60e0      	str	r0, [r4, #12]
 800bf04:	2104      	movs	r1, #4
 800bf06:	6860      	ldr	r0, [r4, #4]
 800bf08:	f7ff ff82 	bl	800be10 <std>
 800bf0c:	68a0      	ldr	r0, [r4, #8]
 800bf0e:	2201      	movs	r2, #1
 800bf10:	2109      	movs	r1, #9
 800bf12:	f7ff ff7d 	bl	800be10 <std>
 800bf16:	68e0      	ldr	r0, [r4, #12]
 800bf18:	2202      	movs	r2, #2
 800bf1a:	2112      	movs	r1, #18
 800bf1c:	f7ff ff78 	bl	800be10 <std>
 800bf20:	2301      	movs	r3, #1
 800bf22:	61a3      	str	r3, [r4, #24]
 800bf24:	e7d2      	b.n	800becc <__sinit+0xc>
 800bf26:	bf00      	nop
 800bf28:	0800c47c 	.word	0x0800c47c
 800bf2c:	0800be59 	.word	0x0800be59

0800bf30 <__sfp>:
 800bf30:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800bf32:	4607      	mov	r7, r0
 800bf34:	f7ff ffac 	bl	800be90 <__sfp_lock_acquire>
 800bf38:	4b1e      	ldr	r3, [pc, #120]	; (800bfb4 <__sfp+0x84>)
 800bf3a:	681e      	ldr	r6, [r3, #0]
 800bf3c:	69b3      	ldr	r3, [r6, #24]
 800bf3e:	b913      	cbnz	r3, 800bf46 <__sfp+0x16>
 800bf40:	4630      	mov	r0, r6
 800bf42:	f7ff ffbd 	bl	800bec0 <__sinit>
 800bf46:	3648      	adds	r6, #72	; 0x48
 800bf48:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800bf4c:	3b01      	subs	r3, #1
 800bf4e:	d503      	bpl.n	800bf58 <__sfp+0x28>
 800bf50:	6833      	ldr	r3, [r6, #0]
 800bf52:	b30b      	cbz	r3, 800bf98 <__sfp+0x68>
 800bf54:	6836      	ldr	r6, [r6, #0]
 800bf56:	e7f7      	b.n	800bf48 <__sfp+0x18>
 800bf58:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800bf5c:	b9d5      	cbnz	r5, 800bf94 <__sfp+0x64>
 800bf5e:	4b16      	ldr	r3, [pc, #88]	; (800bfb8 <__sfp+0x88>)
 800bf60:	60e3      	str	r3, [r4, #12]
 800bf62:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800bf66:	6665      	str	r5, [r4, #100]	; 0x64
 800bf68:	f000 f847 	bl	800bffa <__retarget_lock_init_recursive>
 800bf6c:	f7ff ff96 	bl	800be9c <__sfp_lock_release>
 800bf70:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800bf74:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800bf78:	6025      	str	r5, [r4, #0]
 800bf7a:	61a5      	str	r5, [r4, #24]
 800bf7c:	2208      	movs	r2, #8
 800bf7e:	4629      	mov	r1, r5
 800bf80:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800bf84:	f7fb fd0a 	bl	800799c <memset>
 800bf88:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800bf8c:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800bf90:	4620      	mov	r0, r4
 800bf92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800bf94:	3468      	adds	r4, #104	; 0x68
 800bf96:	e7d9      	b.n	800bf4c <__sfp+0x1c>
 800bf98:	2104      	movs	r1, #4
 800bf9a:	4638      	mov	r0, r7
 800bf9c:	f7ff ff62 	bl	800be64 <__sfmoreglue>
 800bfa0:	4604      	mov	r4, r0
 800bfa2:	6030      	str	r0, [r6, #0]
 800bfa4:	2800      	cmp	r0, #0
 800bfa6:	d1d5      	bne.n	800bf54 <__sfp+0x24>
 800bfa8:	f7ff ff78 	bl	800be9c <__sfp_lock_release>
 800bfac:	230c      	movs	r3, #12
 800bfae:	603b      	str	r3, [r7, #0]
 800bfb0:	e7ee      	b.n	800bf90 <__sfp+0x60>
 800bfb2:	bf00      	nop
 800bfb4:	0800c47c 	.word	0x0800c47c
 800bfb8:	ffff0001 	.word	0xffff0001

0800bfbc <_fwalk_reent>:
 800bfbc:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800bfc0:	4606      	mov	r6, r0
 800bfc2:	4688      	mov	r8, r1
 800bfc4:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800bfc8:	2700      	movs	r7, #0
 800bfca:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800bfce:	f1b9 0901 	subs.w	r9, r9, #1
 800bfd2:	d505      	bpl.n	800bfe0 <_fwalk_reent+0x24>
 800bfd4:	6824      	ldr	r4, [r4, #0]
 800bfd6:	2c00      	cmp	r4, #0
 800bfd8:	d1f7      	bne.n	800bfca <_fwalk_reent+0xe>
 800bfda:	4638      	mov	r0, r7
 800bfdc:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800bfe0:	89ab      	ldrh	r3, [r5, #12]
 800bfe2:	2b01      	cmp	r3, #1
 800bfe4:	d907      	bls.n	800bff6 <_fwalk_reent+0x3a>
 800bfe6:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800bfea:	3301      	adds	r3, #1
 800bfec:	d003      	beq.n	800bff6 <_fwalk_reent+0x3a>
 800bfee:	4629      	mov	r1, r5
 800bff0:	4630      	mov	r0, r6
 800bff2:	47c0      	blx	r8
 800bff4:	4307      	orrs	r7, r0
 800bff6:	3568      	adds	r5, #104	; 0x68
 800bff8:	e7e9      	b.n	800bfce <_fwalk_reent+0x12>

0800bffa <__retarget_lock_init_recursive>:
 800bffa:	4770      	bx	lr

0800bffc <__retarget_lock_acquire_recursive>:
 800bffc:	4770      	bx	lr

0800bffe <__retarget_lock_release_recursive>:
 800bffe:	4770      	bx	lr

0800c000 <__swhatbuf_r>:
 800c000:	b570      	push	{r4, r5, r6, lr}
 800c002:	460e      	mov	r6, r1
 800c004:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c008:	2900      	cmp	r1, #0
 800c00a:	b096      	sub	sp, #88	; 0x58
 800c00c:	4614      	mov	r4, r2
 800c00e:	461d      	mov	r5, r3
 800c010:	da08      	bge.n	800c024 <__swhatbuf_r+0x24>
 800c012:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800c016:	2200      	movs	r2, #0
 800c018:	602a      	str	r2, [r5, #0]
 800c01a:	061a      	lsls	r2, r3, #24
 800c01c:	d410      	bmi.n	800c040 <__swhatbuf_r+0x40>
 800c01e:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800c022:	e00e      	b.n	800c042 <__swhatbuf_r+0x42>
 800c024:	466a      	mov	r2, sp
 800c026:	f000 f951 	bl	800c2cc <_fstat_r>
 800c02a:	2800      	cmp	r0, #0
 800c02c:	dbf1      	blt.n	800c012 <__swhatbuf_r+0x12>
 800c02e:	9a01      	ldr	r2, [sp, #4]
 800c030:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800c034:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800c038:	425a      	negs	r2, r3
 800c03a:	415a      	adcs	r2, r3
 800c03c:	602a      	str	r2, [r5, #0]
 800c03e:	e7ee      	b.n	800c01e <__swhatbuf_r+0x1e>
 800c040:	2340      	movs	r3, #64	; 0x40
 800c042:	2000      	movs	r0, #0
 800c044:	6023      	str	r3, [r4, #0]
 800c046:	b016      	add	sp, #88	; 0x58
 800c048:	bd70      	pop	{r4, r5, r6, pc}
	...

0800c04c <__smakebuf_r>:
 800c04c:	898b      	ldrh	r3, [r1, #12]
 800c04e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800c050:	079d      	lsls	r5, r3, #30
 800c052:	4606      	mov	r6, r0
 800c054:	460c      	mov	r4, r1
 800c056:	d507      	bpl.n	800c068 <__smakebuf_r+0x1c>
 800c058:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800c05c:	6023      	str	r3, [r4, #0]
 800c05e:	6123      	str	r3, [r4, #16]
 800c060:	2301      	movs	r3, #1
 800c062:	6163      	str	r3, [r4, #20]
 800c064:	b002      	add	sp, #8
 800c066:	bd70      	pop	{r4, r5, r6, pc}
 800c068:	ab01      	add	r3, sp, #4
 800c06a:	466a      	mov	r2, sp
 800c06c:	f7ff ffc8 	bl	800c000 <__swhatbuf_r>
 800c070:	9900      	ldr	r1, [sp, #0]
 800c072:	4605      	mov	r5, r0
 800c074:	4630      	mov	r0, r6
 800c076:	f7ff f9db 	bl	800b430 <_malloc_r>
 800c07a:	b948      	cbnz	r0, 800c090 <__smakebuf_r+0x44>
 800c07c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800c080:	059a      	lsls	r2, r3, #22
 800c082:	d4ef      	bmi.n	800c064 <__smakebuf_r+0x18>
 800c084:	f023 0303 	bic.w	r3, r3, #3
 800c088:	f043 0302 	orr.w	r3, r3, #2
 800c08c:	81a3      	strh	r3, [r4, #12]
 800c08e:	e7e3      	b.n	800c058 <__smakebuf_r+0xc>
 800c090:	4b0d      	ldr	r3, [pc, #52]	; (800c0c8 <__smakebuf_r+0x7c>)
 800c092:	62b3      	str	r3, [r6, #40]	; 0x28
 800c094:	89a3      	ldrh	r3, [r4, #12]
 800c096:	6020      	str	r0, [r4, #0]
 800c098:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800c09c:	81a3      	strh	r3, [r4, #12]
 800c09e:	9b00      	ldr	r3, [sp, #0]
 800c0a0:	6163      	str	r3, [r4, #20]
 800c0a2:	9b01      	ldr	r3, [sp, #4]
 800c0a4:	6120      	str	r0, [r4, #16]
 800c0a6:	b15b      	cbz	r3, 800c0c0 <__smakebuf_r+0x74>
 800c0a8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c0ac:	4630      	mov	r0, r6
 800c0ae:	f000 f91f 	bl	800c2f0 <_isatty_r>
 800c0b2:	b128      	cbz	r0, 800c0c0 <__smakebuf_r+0x74>
 800c0b4:	89a3      	ldrh	r3, [r4, #12]
 800c0b6:	f023 0303 	bic.w	r3, r3, #3
 800c0ba:	f043 0301 	orr.w	r3, r3, #1
 800c0be:	81a3      	strh	r3, [r4, #12]
 800c0c0:	89a0      	ldrh	r0, [r4, #12]
 800c0c2:	4305      	orrs	r5, r0
 800c0c4:	81a5      	strh	r5, [r4, #12]
 800c0c6:	e7cd      	b.n	800c064 <__smakebuf_r+0x18>
 800c0c8:	0800be59 	.word	0x0800be59

0800c0cc <memmove>:
 800c0cc:	4288      	cmp	r0, r1
 800c0ce:	b510      	push	{r4, lr}
 800c0d0:	eb01 0402 	add.w	r4, r1, r2
 800c0d4:	d902      	bls.n	800c0dc <memmove+0x10>
 800c0d6:	4284      	cmp	r4, r0
 800c0d8:	4623      	mov	r3, r4
 800c0da:	d807      	bhi.n	800c0ec <memmove+0x20>
 800c0dc:	1e43      	subs	r3, r0, #1
 800c0de:	42a1      	cmp	r1, r4
 800c0e0:	d008      	beq.n	800c0f4 <memmove+0x28>
 800c0e2:	f811 2b01 	ldrb.w	r2, [r1], #1
 800c0e6:	f803 2f01 	strb.w	r2, [r3, #1]!
 800c0ea:	e7f8      	b.n	800c0de <memmove+0x12>
 800c0ec:	4402      	add	r2, r0
 800c0ee:	4601      	mov	r1, r0
 800c0f0:	428a      	cmp	r2, r1
 800c0f2:	d100      	bne.n	800c0f6 <memmove+0x2a>
 800c0f4:	bd10      	pop	{r4, pc}
 800c0f6:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800c0fa:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800c0fe:	e7f7      	b.n	800c0f0 <memmove+0x24>

0800c100 <__malloc_lock>:
 800c100:	4801      	ldr	r0, [pc, #4]	; (800c108 <__malloc_lock+0x8>)
 800c102:	f7ff bf7b 	b.w	800bffc <__retarget_lock_acquire_recursive>
 800c106:	bf00      	nop
 800c108:	200062f0 	.word	0x200062f0

0800c10c <__malloc_unlock>:
 800c10c:	4801      	ldr	r0, [pc, #4]	; (800c114 <__malloc_unlock+0x8>)
 800c10e:	f7ff bf76 	b.w	800bffe <__retarget_lock_release_recursive>
 800c112:	bf00      	nop
 800c114:	200062f0 	.word	0x200062f0

0800c118 <_realloc_r>:
 800c118:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c11c:	4680      	mov	r8, r0
 800c11e:	4614      	mov	r4, r2
 800c120:	460e      	mov	r6, r1
 800c122:	b921      	cbnz	r1, 800c12e <_realloc_r+0x16>
 800c124:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c128:	4611      	mov	r1, r2
 800c12a:	f7ff b981 	b.w	800b430 <_malloc_r>
 800c12e:	b92a      	cbnz	r2, 800c13c <_realloc_r+0x24>
 800c130:	f7ff f912 	bl	800b358 <_free_r>
 800c134:	4625      	mov	r5, r4
 800c136:	4628      	mov	r0, r5
 800c138:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c13c:	f000 f8fa 	bl	800c334 <_malloc_usable_size_r>
 800c140:	4284      	cmp	r4, r0
 800c142:	4607      	mov	r7, r0
 800c144:	d802      	bhi.n	800c14c <_realloc_r+0x34>
 800c146:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800c14a:	d812      	bhi.n	800c172 <_realloc_r+0x5a>
 800c14c:	4621      	mov	r1, r4
 800c14e:	4640      	mov	r0, r8
 800c150:	f7ff f96e 	bl	800b430 <_malloc_r>
 800c154:	4605      	mov	r5, r0
 800c156:	2800      	cmp	r0, #0
 800c158:	d0ed      	beq.n	800c136 <_realloc_r+0x1e>
 800c15a:	42bc      	cmp	r4, r7
 800c15c:	4622      	mov	r2, r4
 800c15e:	4631      	mov	r1, r6
 800c160:	bf28      	it	cs
 800c162:	463a      	movcs	r2, r7
 800c164:	f7fe fc12 	bl	800a98c <memcpy>
 800c168:	4631      	mov	r1, r6
 800c16a:	4640      	mov	r0, r8
 800c16c:	f7ff f8f4 	bl	800b358 <_free_r>
 800c170:	e7e1      	b.n	800c136 <_realloc_r+0x1e>
 800c172:	4635      	mov	r5, r6
 800c174:	e7df      	b.n	800c136 <_realloc_r+0x1e>

0800c176 <_raise_r>:
 800c176:	291f      	cmp	r1, #31
 800c178:	b538      	push	{r3, r4, r5, lr}
 800c17a:	4604      	mov	r4, r0
 800c17c:	460d      	mov	r5, r1
 800c17e:	d904      	bls.n	800c18a <_raise_r+0x14>
 800c180:	2316      	movs	r3, #22
 800c182:	6003      	str	r3, [r0, #0]
 800c184:	f04f 30ff 	mov.w	r0, #4294967295
 800c188:	bd38      	pop	{r3, r4, r5, pc}
 800c18a:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800c18c:	b112      	cbz	r2, 800c194 <_raise_r+0x1e>
 800c18e:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800c192:	b94b      	cbnz	r3, 800c1a8 <_raise_r+0x32>
 800c194:	4620      	mov	r0, r4
 800c196:	f000 f831 	bl	800c1fc <_getpid_r>
 800c19a:	462a      	mov	r2, r5
 800c19c:	4601      	mov	r1, r0
 800c19e:	4620      	mov	r0, r4
 800c1a0:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800c1a4:	f000 b818 	b.w	800c1d8 <_kill_r>
 800c1a8:	2b01      	cmp	r3, #1
 800c1aa:	d00a      	beq.n	800c1c2 <_raise_r+0x4c>
 800c1ac:	1c59      	adds	r1, r3, #1
 800c1ae:	d103      	bne.n	800c1b8 <_raise_r+0x42>
 800c1b0:	2316      	movs	r3, #22
 800c1b2:	6003      	str	r3, [r0, #0]
 800c1b4:	2001      	movs	r0, #1
 800c1b6:	e7e7      	b.n	800c188 <_raise_r+0x12>
 800c1b8:	2400      	movs	r4, #0
 800c1ba:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800c1be:	4628      	mov	r0, r5
 800c1c0:	4798      	blx	r3
 800c1c2:	2000      	movs	r0, #0
 800c1c4:	e7e0      	b.n	800c188 <_raise_r+0x12>
	...

0800c1c8 <raise>:
 800c1c8:	4b02      	ldr	r3, [pc, #8]	; (800c1d4 <raise+0xc>)
 800c1ca:	4601      	mov	r1, r0
 800c1cc:	6818      	ldr	r0, [r3, #0]
 800c1ce:	f7ff bfd2 	b.w	800c176 <_raise_r>
 800c1d2:	bf00      	nop
 800c1d4:	2000001c 	.word	0x2000001c

0800c1d8 <_kill_r>:
 800c1d8:	b538      	push	{r3, r4, r5, lr}
 800c1da:	4d07      	ldr	r5, [pc, #28]	; (800c1f8 <_kill_r+0x20>)
 800c1dc:	2300      	movs	r3, #0
 800c1de:	4604      	mov	r4, r0
 800c1e0:	4608      	mov	r0, r1
 800c1e2:	4611      	mov	r1, r2
 800c1e4:	602b      	str	r3, [r5, #0]
 800c1e6:	f7f7 fff1 	bl	80041cc <_kill>
 800c1ea:	1c43      	adds	r3, r0, #1
 800c1ec:	d102      	bne.n	800c1f4 <_kill_r+0x1c>
 800c1ee:	682b      	ldr	r3, [r5, #0]
 800c1f0:	b103      	cbz	r3, 800c1f4 <_kill_r+0x1c>
 800c1f2:	6023      	str	r3, [r4, #0]
 800c1f4:	bd38      	pop	{r3, r4, r5, pc}
 800c1f6:	bf00      	nop
 800c1f8:	200062f4 	.word	0x200062f4

0800c1fc <_getpid_r>:
 800c1fc:	f7f7 bfde 	b.w	80041bc <_getpid>

0800c200 <__sread>:
 800c200:	b510      	push	{r4, lr}
 800c202:	460c      	mov	r4, r1
 800c204:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c208:	f000 f89c 	bl	800c344 <_read_r>
 800c20c:	2800      	cmp	r0, #0
 800c20e:	bfab      	itete	ge
 800c210:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800c212:	89a3      	ldrhlt	r3, [r4, #12]
 800c214:	181b      	addge	r3, r3, r0
 800c216:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800c21a:	bfac      	ite	ge
 800c21c:	6563      	strge	r3, [r4, #84]	; 0x54
 800c21e:	81a3      	strhlt	r3, [r4, #12]
 800c220:	bd10      	pop	{r4, pc}

0800c222 <__swrite>:
 800c222:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c226:	461f      	mov	r7, r3
 800c228:	898b      	ldrh	r3, [r1, #12]
 800c22a:	05db      	lsls	r3, r3, #23
 800c22c:	4605      	mov	r5, r0
 800c22e:	460c      	mov	r4, r1
 800c230:	4616      	mov	r6, r2
 800c232:	d505      	bpl.n	800c240 <__swrite+0x1e>
 800c234:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c238:	2302      	movs	r3, #2
 800c23a:	2200      	movs	r2, #0
 800c23c:	f000 f868 	bl	800c310 <_lseek_r>
 800c240:	89a3      	ldrh	r3, [r4, #12]
 800c242:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800c246:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800c24a:	81a3      	strh	r3, [r4, #12]
 800c24c:	4632      	mov	r2, r6
 800c24e:	463b      	mov	r3, r7
 800c250:	4628      	mov	r0, r5
 800c252:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800c256:	f000 b817 	b.w	800c288 <_write_r>

0800c25a <__sseek>:
 800c25a:	b510      	push	{r4, lr}
 800c25c:	460c      	mov	r4, r1
 800c25e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c262:	f000 f855 	bl	800c310 <_lseek_r>
 800c266:	1c43      	adds	r3, r0, #1
 800c268:	89a3      	ldrh	r3, [r4, #12]
 800c26a:	bf15      	itete	ne
 800c26c:	6560      	strne	r0, [r4, #84]	; 0x54
 800c26e:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800c272:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800c276:	81a3      	strheq	r3, [r4, #12]
 800c278:	bf18      	it	ne
 800c27a:	81a3      	strhne	r3, [r4, #12]
 800c27c:	bd10      	pop	{r4, pc}

0800c27e <__sclose>:
 800c27e:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800c282:	f000 b813 	b.w	800c2ac <_close_r>
	...

0800c288 <_write_r>:
 800c288:	b538      	push	{r3, r4, r5, lr}
 800c28a:	4d07      	ldr	r5, [pc, #28]	; (800c2a8 <_write_r+0x20>)
 800c28c:	4604      	mov	r4, r0
 800c28e:	4608      	mov	r0, r1
 800c290:	4611      	mov	r1, r2
 800c292:	2200      	movs	r2, #0
 800c294:	602a      	str	r2, [r5, #0]
 800c296:	461a      	mov	r2, r3
 800c298:	f7f7 ffcf 	bl	800423a <_write>
 800c29c:	1c43      	adds	r3, r0, #1
 800c29e:	d102      	bne.n	800c2a6 <_write_r+0x1e>
 800c2a0:	682b      	ldr	r3, [r5, #0]
 800c2a2:	b103      	cbz	r3, 800c2a6 <_write_r+0x1e>
 800c2a4:	6023      	str	r3, [r4, #0]
 800c2a6:	bd38      	pop	{r3, r4, r5, pc}
 800c2a8:	200062f4 	.word	0x200062f4

0800c2ac <_close_r>:
 800c2ac:	b538      	push	{r3, r4, r5, lr}
 800c2ae:	4d06      	ldr	r5, [pc, #24]	; (800c2c8 <_close_r+0x1c>)
 800c2b0:	2300      	movs	r3, #0
 800c2b2:	4604      	mov	r4, r0
 800c2b4:	4608      	mov	r0, r1
 800c2b6:	602b      	str	r3, [r5, #0]
 800c2b8:	f7f7 ffdb 	bl	8004272 <_close>
 800c2bc:	1c43      	adds	r3, r0, #1
 800c2be:	d102      	bne.n	800c2c6 <_close_r+0x1a>
 800c2c0:	682b      	ldr	r3, [r5, #0]
 800c2c2:	b103      	cbz	r3, 800c2c6 <_close_r+0x1a>
 800c2c4:	6023      	str	r3, [r4, #0]
 800c2c6:	bd38      	pop	{r3, r4, r5, pc}
 800c2c8:	200062f4 	.word	0x200062f4

0800c2cc <_fstat_r>:
 800c2cc:	b538      	push	{r3, r4, r5, lr}
 800c2ce:	4d07      	ldr	r5, [pc, #28]	; (800c2ec <_fstat_r+0x20>)
 800c2d0:	2300      	movs	r3, #0
 800c2d2:	4604      	mov	r4, r0
 800c2d4:	4608      	mov	r0, r1
 800c2d6:	4611      	mov	r1, r2
 800c2d8:	602b      	str	r3, [r5, #0]
 800c2da:	f7f7 ffd6 	bl	800428a <_fstat>
 800c2de:	1c43      	adds	r3, r0, #1
 800c2e0:	d102      	bne.n	800c2e8 <_fstat_r+0x1c>
 800c2e2:	682b      	ldr	r3, [r5, #0]
 800c2e4:	b103      	cbz	r3, 800c2e8 <_fstat_r+0x1c>
 800c2e6:	6023      	str	r3, [r4, #0]
 800c2e8:	bd38      	pop	{r3, r4, r5, pc}
 800c2ea:	bf00      	nop
 800c2ec:	200062f4 	.word	0x200062f4

0800c2f0 <_isatty_r>:
 800c2f0:	b538      	push	{r3, r4, r5, lr}
 800c2f2:	4d06      	ldr	r5, [pc, #24]	; (800c30c <_isatty_r+0x1c>)
 800c2f4:	2300      	movs	r3, #0
 800c2f6:	4604      	mov	r4, r0
 800c2f8:	4608      	mov	r0, r1
 800c2fa:	602b      	str	r3, [r5, #0]
 800c2fc:	f7f7 ffd5 	bl	80042aa <_isatty>
 800c300:	1c43      	adds	r3, r0, #1
 800c302:	d102      	bne.n	800c30a <_isatty_r+0x1a>
 800c304:	682b      	ldr	r3, [r5, #0]
 800c306:	b103      	cbz	r3, 800c30a <_isatty_r+0x1a>
 800c308:	6023      	str	r3, [r4, #0]
 800c30a:	bd38      	pop	{r3, r4, r5, pc}
 800c30c:	200062f4 	.word	0x200062f4

0800c310 <_lseek_r>:
 800c310:	b538      	push	{r3, r4, r5, lr}
 800c312:	4d07      	ldr	r5, [pc, #28]	; (800c330 <_lseek_r+0x20>)
 800c314:	4604      	mov	r4, r0
 800c316:	4608      	mov	r0, r1
 800c318:	4611      	mov	r1, r2
 800c31a:	2200      	movs	r2, #0
 800c31c:	602a      	str	r2, [r5, #0]
 800c31e:	461a      	mov	r2, r3
 800c320:	f7f7 ffce 	bl	80042c0 <_lseek>
 800c324:	1c43      	adds	r3, r0, #1
 800c326:	d102      	bne.n	800c32e <_lseek_r+0x1e>
 800c328:	682b      	ldr	r3, [r5, #0]
 800c32a:	b103      	cbz	r3, 800c32e <_lseek_r+0x1e>
 800c32c:	6023      	str	r3, [r4, #0]
 800c32e:	bd38      	pop	{r3, r4, r5, pc}
 800c330:	200062f4 	.word	0x200062f4

0800c334 <_malloc_usable_size_r>:
 800c334:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800c338:	1f18      	subs	r0, r3, #4
 800c33a:	2b00      	cmp	r3, #0
 800c33c:	bfbc      	itt	lt
 800c33e:	580b      	ldrlt	r3, [r1, r0]
 800c340:	18c0      	addlt	r0, r0, r3
 800c342:	4770      	bx	lr

0800c344 <_read_r>:
 800c344:	b538      	push	{r3, r4, r5, lr}
 800c346:	4d07      	ldr	r5, [pc, #28]	; (800c364 <_read_r+0x20>)
 800c348:	4604      	mov	r4, r0
 800c34a:	4608      	mov	r0, r1
 800c34c:	4611      	mov	r1, r2
 800c34e:	2200      	movs	r2, #0
 800c350:	602a      	str	r2, [r5, #0]
 800c352:	461a      	mov	r2, r3
 800c354:	f7f7 ff54 	bl	8004200 <_read>
 800c358:	1c43      	adds	r3, r0, #1
 800c35a:	d102      	bne.n	800c362 <_read_r+0x1e>
 800c35c:	682b      	ldr	r3, [r5, #0]
 800c35e:	b103      	cbz	r3, 800c362 <_read_r+0x1e>
 800c360:	6023      	str	r3, [r4, #0]
 800c362:	bd38      	pop	{r3, r4, r5, pc}
 800c364:	200062f4 	.word	0x200062f4

0800c368 <_init>:
 800c368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c36a:	bf00      	nop
 800c36c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c36e:	bc08      	pop	{r3}
 800c370:	469e      	mov	lr, r3
 800c372:	4770      	bx	lr

0800c374 <_fini>:
 800c374:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c376:	bf00      	nop
 800c378:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800c37a:	bc08      	pop	{r3}
 800c37c:	469e      	mov	lr, r3
 800c37e:	4770      	bx	lr
