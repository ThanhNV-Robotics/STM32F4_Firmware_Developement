
FreeFallVer_MainProgram.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000f644  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000700  0800f7d8  0800f7d8  0001f7d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800fed8  0800fed8  000201f4  2**0
                  CONTENTS
  4 .ARM          00000008  0800fed8  0800fed8  0001fed8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800fee0  0800fee0  000201f4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800fee0  0800fee0  0001fee0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800fee4  0800fee4  0001fee4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f4  20000000  0800fee8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f4  2**0
                  CONTENTS
 10 .bss          00000384  200001f4  200001f4  000201f4  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  20000578  20000578  000201f4  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f4  2**0
                  CONTENTS, READONLY
 13 .debug_info   00010591  00000000  00000000  00020224  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00002714  00000000  00000000  000307b5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00032ed0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00033e78  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bb2  00000000  00000000  00034d28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   00012893  00000000  00000000  000578da  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000ced44  00000000  00000000  0006a16d  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  00138eb1  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005a84  00000000  00000000  00138f04  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f4 	.word	0x200001f4
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800f7bc 	.word	0x0800f7bc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f8 	.word	0x200001f8
 80001cc:	0800f7bc 	.word	0x0800f7bc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <GetSector+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x22>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001012:	d302      	bcc.n	800101a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e04b      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <GetSector+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <GetSector+0x38>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <GetSector+0xd0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e040      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <GetSector+0xd4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d806      	bhi.n	8001046 <GetSector+0x4e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <GetSector+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d302      	bcc.n	8001046 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e035      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GetSector+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x64>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GetSector+0xe0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d302      	bcc.n	800105c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001056:	2303      	movs	r3, #3
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e02a      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GetSector+0xe4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0x7a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <GetSector+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800106c:	2304      	movs	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e01f      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GetSector+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d206      	bcs.n	8001088 <GetSector+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <GetSector+0xe4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d902      	bls.n	8001088 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001082:	2305      	movs	r3, #5
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e014      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GetSector+0xec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d206      	bcs.n	800109e <GetSector+0xa6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <GetSector+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d902      	bls.n	800109e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001098:	2306      	movs	r3, #6
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e009      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GetSector+0xf0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d205      	bcs.n	80010b2 <GetSector+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <GetSector+0xec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	08003ffe 	.word	0x08003ffe
 80010c4:	08007ffe 	.word	0x08007ffe
 80010c8:	08004000 	.word	0x08004000
 80010cc:	0800bffe 	.word	0x0800bffe
 80010d0:	08008000 	.word	0x08008000
 80010d4:	0800ffff 	.word	0x0800ffff
 80010d8:	0800c000 	.word	0x0800c000
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff
 80010e8:	0807ffff 	.word	0x0807ffff

080010ec <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f005 feef 	bl	8006ee0 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff78 	bl	8000ff8 <GetSector>
 8001108:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001116:	69f8      	ldr	r0, [r7, #28]
 8001118:	f7ff ff6e 	bl	8000ff8 <GetSector>
 800111c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001126:	2202      	movs	r2, #2
 8001128:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Flash_Write_Data+0xb8>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	3301      	adds	r3, #1
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Flash_Write_Data+0xb8>)
 800113a:	60d3      	str	r3, [r2, #12]
	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001144:	f006 f83a 	bl	80071bc <HAL_FLASHEx_Erase>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800114e:	f005 fef9 	bl	8006f44 <HAL_FLASH_GetError>
 8001152:	4603      	mov	r3, r0
 8001154:	e022      	b.n	800119c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	461c      	mov	r4, r3
 8001164:	4615      	mov	r5, r2
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2002      	movs	r0, #2
 800116e:	f005 fe63 	bl	8006e38 <HAL_FLASH_Program>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3304      	adds	r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e003      	b.n	800118e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001186:	f005 fedd 	bl	8006f44 <HAL_FLASH_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	e006      	b.n	800119c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	429a      	cmp	r2, r3
 8001194:	dbdf      	blt.n	8001156 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001196:	f005 fec5 	bl	8006f24 <HAL_FLASH_Lock>

	   return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	20000210 	.word	0x20000210

080011a8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	80fa      	strh	r2, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d000      	beq.n	80011d6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011d4:	e7ef      	b.n	80011b6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Stop>:
#include "stdbool.h"
#include <math.h>
//#include <FLASH_SECTOR_F4.h>
extern bool POSReach;
void Stop() // Stop motor function
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <Stop+0x1c>)
 80011ee:	f006 fabb 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Disable Servo Enable
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <Stop+0x1c>)
 80011f8:	f006 fab6 	bl	8007768 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020800 	.word	0x40020800

08001204 <AlarmReset>:

void AlarmReset() // reset alarm function
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_SET);//Pull Estop pin to 1 (24V)
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <AlarmReset+0x44>)
 800120e:	f006 faab 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_RESET); // trig Alarm Reset Pin
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <AlarmReset+0x44>)
 8001218:	f006 faa6 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f005 fc28 	bl	8006a74 <HAL_Delay>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <AlarmReset+0x44>)
 800122a:	f006 fa9d 	bl	8007768 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 800122e:	2201      	movs	r2, #1
 8001230:	2120      	movs	r1, #32
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <AlarmReset+0x48>)
 8001234:	f006 fa98 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Enable Servo Enable 
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <AlarmReset+0x48>)
 800123e:	f006 fa93 	bl	8007768 <HAL_GPIO_WritePin>
		// Turn on the brake
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800

08001250 <Estop>:

void Estop() // Estop function
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);//Pull Estop pin to GND
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Estop+0x14>)
 800125a:	f006 fa85 	bl	8007768 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <DisableSTOP>:

void DisableSTOP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DisableSTOP+0x14>)
 8001272:	f006 fa79 	bl	8007768 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800

08001280 <JogMoveUp>:

void JogMoveUp() // Move up by pressing the JOG button on the UI
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_SET); // Choose the direction
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <JogMoveUp+0x20>)
 800128c:	f006 fa6c 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <JogMoveUp+0x24>)
 8001296:	f006 fa67 	bl	8007768 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800

080012a8 <JogMoveDown>:

void JogMoveDown()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // Choose the direction
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <JogMoveDown+0x20>)
 80012b4:	f006 fa58 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <JogMoveDown+0x24>)
 80012be:	f006 fa53 	bl	8007768 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800

080012d0 <DriverInit>:
{
	HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // Speed Mode
}

bool DriverInit()
{	
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // CN1-14 - PLSCLR	
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <DriverInit+0x70>)
 80012dc:	f006 fa44 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port,Speed2_Not_PE7_15_Pin,GPIO_PIN_RESET);//CN1-15 SPDLIM/TLIM
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <DriverInit+0x70>)
 80012e6:	f006 fa3f 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CCWLIM_Not_PE12_39_GPIO_Port,CCWLIM_Not_PE12_39_Pin,GPIO_PIN_RESET);//CN1-39 PLSINH
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <DriverInit+0x70>)
 80012f2:	f006 fa39 	bl	8007768 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET);// CN-38 - CWLIM
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4810      	ldr	r0, [pc, #64]	; (8001340 <DriverInit+0x70>)
 80012fe:	f006 fa33 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CWLIM_Not_PE14_13_GPIO_Port,CWLIM_Not_PE14_13_Pin,GPIO_PIN_SET);//CN1-13 CCWLIM
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <DriverInit+0x70>)
 800130a:	f006 fa2d 	bl	8007768 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);// First, the driver will be in Emergency Stop
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <DriverInit+0x74>)
 8001314:	f006 fa28 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <DriverInit+0x78>)
 800131e:	f006 fa23 	bl	8007768 <HAL_GPIO_WritePin>
		
		HAL_GPIO_WritePin(PA12_LINE_DRV_EN_GPIO_Port, PA12_LINE_DRV_EN_Pin, GPIO_PIN_RESET);// Enable U14 DriveLine IC for generating pulses
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <DriverInit+0x7c>)
 800132a:	f006 fa1d 	bl	8007768 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // DIR	
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DriverInit+0x70>)
 8001336:	f006 fa17 	bl	8007768 <HAL_GPIO_WritePin>
	
		return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <ReadLogicF7000Out>:
uint16_t ReadLogicF7000Out(void)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint16_t OuputState = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
	uint8_t i=0;
 800135a:	2300      	movs	r3, #0
 800135c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_23_TYPEOUT_GPIO_Port,CN1_23_TYPEOUT_Pin)) // Read CN1-23-TYPEOUT
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	485e      	ldr	r0, [pc, #376]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001362:	f006 f9e9 	bl	8007738 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <ReadLogicF7000Out+0x30>
	{
		OuputState = OuputState | (1 << i); // Set ith bit		
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	3301      	adds	r3, #1
 8001384:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin)) // Read CN1-48-BRAKE
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4855      	ldr	r0, [pc, #340]	; (80014e0 <ReadLogicF7000Out+0x190>)
 800138a:	f006 f9d5 	bl	8007738 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <ReadLogicF7000Out+0x58>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	3301      	adds	r3, #1
 80013ac:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin)) // Read CN1-22-RDY
 80013ae:	2104      	movs	r1, #4
 80013b0:	484b      	ldr	r0, [pc, #300]	; (80014e0 <ReadLogicF7000Out+0x190>)
 80013b2:	f006 f9c1 	bl	8007738 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <ReadLogicF7000Out+0x80>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	3301      	adds	r3, #1
 80013d4:	717b      	strb	r3, [r7, #5]
	POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);	// Check if the position is reached or not
 80013d6:	2102      	movs	r1, #2
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <ReadLogicF7000Out+0x194>)
 80013da:	f006 f9ad 	bl	8007738 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013ec:	701a      	strb	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin)) // Read CN1-47
	if(POSReach)
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <ReadLogicF7000Out+0xba>
	{		
		OuputState = OuputState | (1 << i); // Set ith bit
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3301      	adds	r3, #1
 800140e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_21_SPDOUT_TRQOUT_GPIO_Port,CN1_21_SPDOUT_TRQOUT_Pin)) // Read CN1-21
 8001410:	2108      	movs	r1, #8
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <ReadLogicF7000Out+0x190>)
 8001414:	f006 f990 	bl	8007738 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <ReadLogicF7000Out+0xe2>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_46_ALARM_GPIO_Port,CN1_46_ALARM_Pin)) // Read CN1-22-
 8001438:	2101      	movs	r1, #1
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800143c:	f006 f97c 	bl	8007738 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <ReadLogicF7000Out+0x10a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	3301      	adds	r3, #1
 800145e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_20_PCWOUT_PTQOUT_GPIO_Port,CN1_20_PCWOUT_PTQOUT_Pin)) // Read CN1-20
 8001460:	2110      	movs	r1, #16
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001464:	f006 f968 	bl	8007738 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <ReadLogicF7000Out+0x132>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001482:	797b      	ldrb	r3, [r7, #5]
 8001484:	3301      	adds	r3, #1
 8001486:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_45_NCWOUT_NTQOUT_GPIO_Port,CN1_45_NCWOUT_NTQOUT_Pin)) // Read CN1-45
 8001488:	2104      	movs	r1, #4
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800148c:	f006 f954 	bl	8007738 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <ReadLogicF7000Out+0x15a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	3301      	adds	r3, #1
 80014ae:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_19_ZSPD_GPIO_Port,CN1_19_ZSPD_Pin)) // Read CN1-19-ZSPD
 80014b0:	2108      	movs	r1, #8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <ReadLogicF7000Out+0x19c>)
 80014b4:	f006 f940 	bl	8007738 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <ReadLogicF7000Out+0x182>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	80fb      	strh	r3, [r7, #6]
	}	
	return OuputState;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	20000438 	.word	0x20000438
 80014ec:	40020400 	.word	0x40020400

080014f0 <ExtractMotionCode>:
//	PreError = 0;
//	AccRef = -9.6;
//}

void ExtractMotionCode () // Extract command from the UI
{
 80014f0:	b590      	push	{r4, r7, lr}
 80014f2:	b083      	sub	sp, #12
 80014f4:	af00      	add	r7, sp, #0
	memset (MotionCode, '\0', sizeof (MotionCode)); // reset MotionCode
 80014f6:	2220      	movs	r2, #32
 80014f8:	2100      	movs	r1, #0
 80014fa:	4827      	ldr	r0, [pc, #156]	; (8001598 <ExtractMotionCode+0xa8>)
 80014fc:	f008 fd32 	bl	8009f64 <memset>
	memset (DataRegion, '\0', sizeof (DataRegion)); // reset DataRegion
 8001500:	2228      	movs	r2, #40	; 0x28
 8001502:	2100      	movs	r1, #0
 8001504:	4825      	ldr	r0, [pc, #148]	; (800159c <ExtractMotionCode+0xac>)
 8001506:	f008 fd2d 	bl	8009f64 <memset>
	uint8_t j = 0;
 800150a:	2300      	movs	r3, #0
 800150c:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 800150e:	2300      	movs	r3, #0
 8001510:	71bb      	strb	r3, [r7, #6]
 8001512:	e012      	b.n	800153a <ExtractMotionCode+0x4a>
	{
		if (RxPCBuff[i] != 0) // coppy the command from UI to another array, remove the null character at the beginning
 8001514:	79bb      	ldrb	r3, [r7, #6]
 8001516:	4a22      	ldr	r2, [pc, #136]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001518:	5cd3      	ldrb	r3, [r2, r3]
 800151a:	b2db      	uxtb	r3, r3
 800151c:	2b00      	cmp	r3, #0
 800151e:	d009      	beq.n	8001534 <ExtractMotionCode+0x44>
		{
			DataRegion[j] = RxPCBuff[i]; // coppy to DataRegion
 8001520:	79ba      	ldrb	r2, [r7, #6]
 8001522:	79fb      	ldrb	r3, [r7, #7]
 8001524:	491e      	ldr	r1, [pc, #120]	; (80015a0 <ExtractMotionCode+0xb0>)
 8001526:	5c8a      	ldrb	r2, [r1, r2]
 8001528:	b2d1      	uxtb	r1, r2
 800152a:	4a1c      	ldr	r2, [pc, #112]	; (800159c <ExtractMotionCode+0xac>)
 800152c:	54d1      	strb	r1, [r2, r3]
			j++;
 800152e:	79fb      	ldrb	r3, [r7, #7]
 8001530:	3301      	adds	r3, #1
 8001532:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 8001534:	79bb      	ldrb	r3, [r7, #6]
 8001536:	3301      	adds	r3, #1
 8001538:	71bb      	strb	r3, [r7, #6]
 800153a:	79bb      	ldrb	r3, [r7, #6]
 800153c:	2b27      	cmp	r3, #39	; 0x27
 800153e:	d9e9      	bls.n	8001514 <ExtractMotionCode+0x24>
		}
	}
	j = 0;
 8001540:	2300      	movs	r3, #0
 8001542:	71fb      	strb	r3, [r7, #7]
	char *token;
	token = strtok((char *)DataRegion, "/");	// Split the command ~ remove the / character
 8001544:	4917      	ldr	r1, [pc, #92]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001546:	4815      	ldr	r0, [pc, #84]	; (800159c <ExtractMotionCode+0xac>)
 8001548:	f00a f9ea 	bl	800b920 <strtok>
 800154c:	6038      	str	r0, [r7, #0]
	while (token != NULL)
 800154e:	e016      	b.n	800157e <ExtractMotionCode+0x8e>
    {
				MotionCode[j] = (atof(token)); // covert to float type
 8001550:	6838      	ldr	r0, [r7, #0]
 8001552:	f008 fcd9 	bl	8009f08 <atof>
 8001556:	ec53 2b10 	vmov	r2, r3, d0
 800155a:	79fc      	ldrb	r4, [r7, #7]
 800155c:	4610      	mov	r0, r2
 800155e:	4619      	mov	r1, r3
 8001560:	f7ff fb42 	bl	8000be8 <__aeabi_d2f>
 8001564:	4602      	mov	r2, r0
 8001566:	490c      	ldr	r1, [pc, #48]	; (8001598 <ExtractMotionCode+0xa8>)
 8001568:	00a3      	lsls	r3, r4, #2
 800156a:	440b      	add	r3, r1
 800156c:	601a      	str	r2, [r3, #0]
			  //MotionCode[j] = (atoi(token)); // covert to int type
        token = strtok(NULL, "/");
 800156e:	490d      	ldr	r1, [pc, #52]	; (80015a4 <ExtractMotionCode+0xb4>)
 8001570:	2000      	movs	r0, #0
 8001572:	f00a f9d5 	bl	800b920 <strtok>
 8001576:	6038      	str	r0, [r7, #0]
				j++;
 8001578:	79fb      	ldrb	r3, [r7, #7]
 800157a:	3301      	adds	r3, #1
 800157c:	71fb      	strb	r3, [r7, #7]
	while (token != NULL)
 800157e:	683b      	ldr	r3, [r7, #0]
 8001580:	2b00      	cmp	r3, #0
 8001582:	d1e5      	bne.n	8001550 <ExtractMotionCode+0x60>
    }
	memset (RxPCBuff, '\0', sizeof (RxPCBuff)); // reset
 8001584:	2228      	movs	r2, #40	; 0x28
 8001586:	2100      	movs	r1, #0
 8001588:	4805      	ldr	r0, [pc, #20]	; (80015a0 <ExtractMotionCode+0xb0>)
 800158a:	f008 fceb 	bl	8009f64 <memset>
}
 800158e:	bf00      	nop
 8001590:	370c      	adds	r7, #12
 8001592:	46bd      	mov	sp, r7
 8001594:	bd90      	pop	{r4, r7, pc}
 8001596:	bf00      	nop
 8001598:	20000504 	.word	0x20000504
 800159c:	200003c8 	.word	0x200003c8
 80015a0:	20000380 	.word	0x20000380
 80015a4:	0800f7d8 	.word	0x0800f7d8

080015a8 <ReadMultiRegister>:
//	}
//}


void ReadMultiRegister(uint16_t StartingAddress, uint8_t NoOfRegister) // Read data from the Driver
{
 80015a8:	b580      	push	{r7, lr}
 80015aa:	b088      	sub	sp, #32
 80015ac:	af00      	add	r7, sp, #0
 80015ae:	4603      	mov	r3, r0
 80015b0:	460a      	mov	r2, r1
 80015b2:	80fb      	strh	r3, [r7, #6]
 80015b4:	4613      	mov	r3, r2
 80015b6:	717b      	strb	r3, [r7, #5]
	// Prepare data frame -- BEGIN
	uint8_t TxDataToDriver[8]; // 8 bytes of data frame

	// Data preparation
	TxDataToDriver[0] = DriverID;//SerialID = 1 of the driver
 80015b8:	2301      	movs	r3, #1
 80015ba:	733b      	strb	r3, [r7, #12]
	TxDataToDriver[1] = 3;//Read Regis, function code
 80015bc:	2303      	movs	r3, #3
 80015be:	737b      	strb	r3, [r7, #13]
	TxDataToDriver[2] = StartingAddress / 256; // Register Address High byte
 80015c0:	88fb      	ldrh	r3, [r7, #6]
 80015c2:	0a1b      	lsrs	r3, r3, #8
 80015c4:	b29b      	uxth	r3, r3
 80015c6:	b2db      	uxtb	r3, r3
 80015c8:	73bb      	strb	r3, [r7, #14]
    TxDataToDriver[3] = StartingAddress % 256; // Register Address LOW byte
 80015ca:	88fb      	ldrh	r3, [r7, #6]
 80015cc:	b2db      	uxtb	r3, r3
 80015ce:	73fb      	strb	r3, [r7, #15]
	TxDataToDriver[4] = 0; // Number of Register HIGH byte
 80015d0:	2300      	movs	r3, #0
 80015d2:	743b      	strb	r3, [r7, #16]
	TxDataToDriver[5] = NoOfRegister; // Number of Register LOW byte
 80015d4:	797b      	ldrb	r3, [r7, #5]
 80015d6:	747b      	strb	r3, [r7, #17]

	//CRC BEGIN=======
				uint16_t crc = 0xFFFF;
 80015d8:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80015dc:	83fb      	strh	r3, [r7, #30]
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 80015de:	2300      	movs	r3, #0
 80015e0:	61bb      	str	r3, [r7, #24]
 80015e2:	e027      	b.n	8001634 <ReadMultiRegister+0x8c>
				{	crc ^= (uint16_t)TxDataToDriver[pos];          // XOR byte into least sig. byte of crc
 80015e4:	f107 020c 	add.w	r2, r7, #12
 80015e8:	69bb      	ldr	r3, [r7, #24]
 80015ea:	4413      	add	r3, r2
 80015ec:	781b      	ldrb	r3, [r3, #0]
 80015ee:	b29a      	uxth	r2, r3
 80015f0:	8bfb      	ldrh	r3, [r7, #30]
 80015f2:	4053      	eors	r3, r2
 80015f4:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--)
 80015f6:	2308      	movs	r3, #8
 80015f8:	617b      	str	r3, [r7, #20]
 80015fa:	e015      	b.n	8001628 <ReadMultiRegister+0x80>
					{    // Loop over each bit
						if ((crc & 0x0001) != 0)
 80015fc:	8bfb      	ldrh	r3, [r7, #30]
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	2b00      	cmp	r3, #0
 8001604:	d00a      	beq.n	800161c <ReadMultiRegister+0x74>
						{      // If the LSB is set
							crc >>= 1;                    // Shift right and XOR 0xA001
 8001606:	8bfb      	ldrh	r3, [r7, #30]
 8001608:	085b      	lsrs	r3, r3, #1
 800160a:	83fb      	strh	r3, [r7, #30]
							crc ^= 0xA001;
 800160c:	8bfb      	ldrh	r3, [r7, #30]
 800160e:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 8001612:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 8001616:	43db      	mvns	r3, r3
 8001618:	83fb      	strh	r3, [r7, #30]
 800161a:	e002      	b.n	8001622 <ReadMultiRegister+0x7a>
						}
						else                            // Else LSB is not set
							crc >>= 1;                    // Just shift right
 800161c:	8bfb      	ldrh	r3, [r7, #30]
 800161e:	085b      	lsrs	r3, r3, #1
 8001620:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--)
 8001622:	697b      	ldr	r3, [r7, #20]
 8001624:	3b01      	subs	r3, #1
 8001626:	617b      	str	r3, [r7, #20]
 8001628:	697b      	ldr	r3, [r7, #20]
 800162a:	2b00      	cmp	r3, #0
 800162c:	d1e6      	bne.n	80015fc <ReadMultiRegister+0x54>
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++)
 800162e:	69bb      	ldr	r3, [r7, #24]
 8001630:	3301      	adds	r3, #1
 8001632:	61bb      	str	r3, [r7, #24]
 8001634:	69bb      	ldr	r3, [r7, #24]
 8001636:	2b05      	cmp	r3, #5
 8001638:	ddd4      	ble.n	80015e4 <ReadMultiRegister+0x3c>
					}
				}
	TxDataToDriver[6]= (uint8_t)(crc&0x00FF);;//(uint8_t)(TemDat16&0xFF);
 800163a:	8bfb      	ldrh	r3, [r7, #30]
 800163c:	b2db      	uxtb	r3, r3
 800163e:	74bb      	strb	r3, [r7, #18]
	TxDataToDriver[7]=(uint8_t)((crc>>8)&0x00FF);
 8001640:	8bfb      	ldrh	r3, [r7, #30]
 8001642:	0a1b      	lsrs	r3, r3, #8
 8001644:	b29b      	uxth	r3, r3
 8001646:	b2db      	uxtb	r3, r3
 8001648:	74fb      	strb	r3, [r7, #19]
	//CRC=====END/
	// Prepare data frame -- END
	// Send data use UART5
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
 800164a:	2200      	movs	r2, #0
 800164c:	2101      	movs	r1, #1
 800164e:	480c      	ldr	r0, [pc, #48]	; (8001680 <ReadMultiRegister+0xd8>)
 8001650:	f006 f88a 	bl	8007768 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_UART_Transmit(&huart5,TxDataToDriver,sizeof(TxDataToDriver),200); // use UART5 to send
 8001654:	f107 010c 	add.w	r1, r7, #12
 8001658:	23c8      	movs	r3, #200	; 0xc8
 800165a:	2208      	movs	r2, #8
 800165c:	4809      	ldr	r0, [pc, #36]	; (8001684 <ReadMultiRegister+0xdc>)
 800165e:	f007 fc2c 	bl	8008eba <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
 8001662:	2201      	movs	r2, #1
 8001664:	2101      	movs	r1, #1
 8001666:	4806      	ldr	r0, [pc, #24]	; (8001680 <ReadMultiRegister+0xd8>)
 8001668:	f006 f87e 	bl	8007768 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
 800166c:	2201      	movs	r2, #1
 800166e:	4906      	ldr	r1, [pc, #24]	; (8001688 <ReadMultiRegister+0xe0>)
 8001670:	4804      	ldr	r0, [pc, #16]	; (8001684 <ReadMultiRegister+0xdc>)
 8001672:	f007 fcb4 	bl	8008fde <HAL_UART_Receive_IT>

	/// For debug only, should be comment out latter
	//uint8_t u8_TxPCBuff[20]="< Read Data";
	//HAL_UART_Transmit(&huart6,u8_TxPCBuff,sizeof(u8_TxPCBuff),1000);
	/// Dubug END
}
 8001676:	bf00      	nop
 8001678:	3720      	adds	r7, #32
 800167a:	46bd      	mov	sp, r7
 800167c:	bd80      	pop	{r7, pc}
 800167e:	bf00      	nop
 8001680:	40021000 	.word	0x40021000
 8001684:	200002b4 	.word	0x200002b4
 8001688:	200003f1 	.word	0x200003f1

0800168c <LoadSavedParam>:



void LoadSavedParam (uint32_t StartSectorAddress, float *_Param)
{
 800168c:	b590      	push	{r4, r7, lr}
 800168e:	b09f      	sub	sp, #124	; 0x7c
 8001690:	af00      	add	r7, sp, #0
 8001692:	6078      	str	r0, [r7, #4]
 8001694:	6039      	str	r1, [r7, #0]
	uint8_t LoadDataBuff[100];

	Flash_Read_Data(StartSectorAddress, (uint32_t *)LoadDataBuff, numofwords);
 8001696:	4b1a      	ldr	r3, [pc, #104]	; (8001700 <LoadSavedParam+0x74>)
 8001698:	781b      	ldrb	r3, [r3, #0]
 800169a:	b29a      	uxth	r2, r3
 800169c:	f107 030c 	add.w	r3, r7, #12
 80016a0:	4619      	mov	r1, r3
 80016a2:	6878      	ldr	r0, [r7, #4]
 80016a4:	f7ff fd80 	bl	80011a8 <Flash_Read_Data>

	uint8_t	j = 0;
 80016a8:	2300      	movs	r3, #0
 80016aa:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char *token;
	token = strtok((char *)LoadDataBuff, "/");	// Split the command ~ remove the / character
 80016ae:	f107 030c 	add.w	r3, r7, #12
 80016b2:	4914      	ldr	r1, [pc, #80]	; (8001704 <LoadSavedParam+0x78>)
 80016b4:	4618      	mov	r0, r3
 80016b6:	f00a f933 	bl	800b920 <strtok>
 80016ba:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL)
 80016bc:	e017      	b.n	80016ee <LoadSavedParam+0x62>
    {
				_Param[j] = (atof(token)); // covert to float type
 80016be:	6f38      	ldr	r0, [r7, #112]	; 0x70
 80016c0:	f008 fc22 	bl	8009f08 <atof>
 80016c4:	ec51 0b10 	vmov	r0, r1, d0
 80016c8:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016cc:	009b      	lsls	r3, r3, #2
 80016ce:	683a      	ldr	r2, [r7, #0]
 80016d0:	18d4      	adds	r4, r2, r3
 80016d2:	f7ff fa89 	bl	8000be8 <__aeabi_d2f>
 80016d6:	4603      	mov	r3, r0
 80016d8:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, "/");
 80016da:	490a      	ldr	r1, [pc, #40]	; (8001704 <LoadSavedParam+0x78>)
 80016dc:	2000      	movs	r0, #0
 80016de:	f00a f91f 	bl	800b920 <strtok>
 80016e2:	6738      	str	r0, [r7, #112]	; 0x70
				j++;
 80016e4:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 80016e8:	3301      	adds	r3, #1
 80016ea:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (token != NULL)
 80016ee:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	d1e4      	bne.n	80016be <LoadSavedParam+0x32>
    }
}
 80016f4:	bf00      	nop
 80016f6:	bf00      	nop
 80016f8:	377c      	adds	r7, #124	; 0x7c
 80016fa:	46bd      	mov	sp, r7
 80016fc:	bd90      	pop	{r4, r7, pc}
 80016fe:	bf00      	nop
 8001700:	2000000c 	.word	0x2000000c
 8001704:	0800f7d8 	.word	0x0800f7d8

08001708 <SaveSystemParams>:

void SaveSystemParams ()
{
 8001708:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800170c:	b0b9      	sub	sp, #228	; 0xe4
 800170e:	af16      	add	r7, sp, #88	; 0x58
	char SaveBuffer[80];
	TxPCLen = sprintf(SaveBuffer,"%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4f"
 8001710:	4b50      	ldr	r3, [pc, #320]	; (8001854 <SaveSystemParams+0x14c>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	4618      	mov	r0, r3
 8001716:	f7fe ff17 	bl	8000548 <__aeabi_f2d>
 800171a:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 800171e:	4b4e      	ldr	r3, [pc, #312]	; (8001858 <SaveSystemParams+0x150>)
 8001720:	781b      	ldrb	r3, [r3, #0]
 8001722:	461e      	mov	r6, r3
 8001724:	4b4d      	ldr	r3, [pc, #308]	; (800185c <SaveSystemParams+0x154>)
 8001726:	881b      	ldrh	r3, [r3, #0]
 8001728:	62fb      	str	r3, [r7, #44]	; 0x2c
 800172a:	4b4d      	ldr	r3, [pc, #308]	; (8001860 <SaveSystemParams+0x158>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	62bb      	str	r3, [r7, #40]	; 0x28
 8001730:	4b4c      	ldr	r3, [pc, #304]	; (8001864 <SaveSystemParams+0x15c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4618      	mov	r0, r3
 8001736:	f7fe ff07 	bl	8000548 <__aeabi_f2d>
 800173a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800173e:	4b4a      	ldr	r3, [pc, #296]	; (8001868 <SaveSystemParams+0x160>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	4618      	mov	r0, r3
 8001744:	f7fe ff00 	bl	8000548 <__aeabi_f2d>
 8001748:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800174c:	4b47      	ldr	r3, [pc, #284]	; (800186c <SaveSystemParams+0x164>)
 800174e:	681b      	ldr	r3, [r3, #0]
 8001750:	4618      	mov	r0, r3
 8001752:	f7fe fef9 	bl	8000548 <__aeabi_f2d>
 8001756:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800175a:	4b45      	ldr	r3, [pc, #276]	; (8001870 <SaveSystemParams+0x168>)
 800175c:	681b      	ldr	r3, [r3, #0]
 800175e:	4618      	mov	r0, r3
 8001760:	f7fe fef2 	bl	8000548 <__aeabi_f2d>
 8001764:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8001768:	4b42      	ldr	r3, [pc, #264]	; (8001874 <SaveSystemParams+0x16c>)
 800176a:	681b      	ldr	r3, [r3, #0]
 800176c:	4618      	mov	r0, r3
 800176e:	f7fe feeb 	bl	8000548 <__aeabi_f2d>
 8001772:	e9c7 0100 	strd	r0, r1, [r7]
 8001776:	4b40      	ldr	r3, [pc, #256]	; (8001878 <SaveSystemParams+0x170>)
 8001778:	681b      	ldr	r3, [r3, #0]
 800177a:	4618      	mov	r0, r3
 800177c:	f7fe fee4 	bl	8000548 <__aeabi_f2d>
 8001780:	4682      	mov	sl, r0
 8001782:	468b      	mov	fp, r1
 8001784:	4b3d      	ldr	r3, [pc, #244]	; (800187c <SaveSystemParams+0x174>)
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	4618      	mov	r0, r3
 800178a:	f7fe fedd 	bl	8000548 <__aeabi_f2d>
 800178e:	4680      	mov	r8, r0
 8001790:	4689      	mov	r9, r1
 8001792:	4b3b      	ldr	r3, [pc, #236]	; (8001880 <SaveSystemParams+0x178>)
 8001794:	681b      	ldr	r3, [r3, #0]
 8001796:	4618      	mov	r0, r3
 8001798:	f7fe fed6 	bl	8000548 <__aeabi_f2d>
 800179c:	4604      	mov	r4, r0
 800179e:	460d      	mov	r5, r1
 80017a0:	4b38      	ldr	r3, [pc, #224]	; (8001884 <SaveSystemParams+0x17c>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	4618      	mov	r0, r3
 80017a6:	f7fe fecf 	bl	8000548 <__aeabi_f2d>
 80017aa:	4602      	mov	r2, r0
 80017ac:	460b      	mov	r3, r1
 80017ae:	f107 0038 	add.w	r0, r7, #56	; 0x38
 80017b2:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 80017b6:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 80017ba:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 80017be:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80017c2:	ed97 7b00 	vldr	d7, [r7]
 80017c6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80017ca:	ed97 7b02 	vldr	d7, [r7, #8]
 80017ce:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80017d2:	ed97 7b04 	vldr	d7, [r7, #16]
 80017d6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80017da:	ed97 7b06 	vldr	d7, [r7, #24]
 80017de:	ed8d 7b06 	vstr	d7, [sp, #24]
 80017e2:	ed97 7b08 	vldr	d7, [r7, #32]
 80017e6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80017ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80017ec:	9102      	str	r1, [sp, #8]
 80017ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80017f0:	9301      	str	r3, [sp, #4]
 80017f2:	9600      	str	r6, [sp, #0]
 80017f4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80017f8:	4923      	ldr	r1, [pc, #140]	; (8001888 <SaveSystemParams+0x180>)
 80017fa:	f009 fa3b 	bl	800ac74 <siprintf>
 80017fe:	4603      	mov	r3, r0
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b22      	ldr	r3, [pc, #136]	; (800188c <SaveSystemParams+0x184>)
 8001804:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
					 FlyAccSlope, DistCoeff, BrakeAccSlope); // Combine to a string
	numofwords = (strlen(SaveBuffer)/4)+((strlen(SaveBuffer)%4)!=0);
 8001806:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800180a:	4618      	mov	r0, r3
 800180c:	f7fe fce0 	bl	80001d0 <strlen>
 8001810:	4603      	mov	r3, r0
 8001812:	089b      	lsrs	r3, r3, #2
 8001814:	b2dc      	uxtb	r4, r3
 8001816:	f107 0338 	add.w	r3, r7, #56	; 0x38
 800181a:	4618      	mov	r0, r3
 800181c:	f7fe fcd8 	bl	80001d0 <strlen>
 8001820:	4603      	mov	r3, r0
 8001822:	f003 0303 	and.w	r3, r3, #3
 8001826:	2b00      	cmp	r3, #0
 8001828:	bf14      	ite	ne
 800182a:	2301      	movne	r3, #1
 800182c:	2300      	moveq	r3, #0
 800182e:	b2db      	uxtb	r3, r3
 8001830:	4423      	add	r3, r4
 8001832:	b2da      	uxtb	r2, r3
 8001834:	4b16      	ldr	r3, [pc, #88]	; (8001890 <SaveSystemParams+0x188>)
 8001836:	701a      	strb	r2, [r3, #0]
	Flash_Write_Data(MemoryAddress , (uint32_t *)SaveBuffer, numofwords);
 8001838:	4b15      	ldr	r3, [pc, #84]	; (8001890 <SaveSystemParams+0x188>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	b29a      	uxth	r2, r3
 800183e:	f107 0338 	add.w	r3, r7, #56	; 0x38
 8001842:	4619      	mov	r1, r3
 8001844:	4813      	ldr	r0, [pc, #76]	; (8001894 <SaveSystemParams+0x18c>)
 8001846:	f7ff fc51 	bl	80010ec <Flash_Write_Data>
}
 800184a:	bf00      	nop
 800184c:	378c      	adds	r7, #140	; 0x8c
 800184e:	46bd      	mov	sp, r7
 8001850:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8001854:	20000454 	.word	0x20000454
 8001858:	20000459 	.word	0x20000459
 800185c:	2000045a 	.word	0x2000045a
 8001860:	20000458 	.word	0x20000458
 8001864:	2000047c 	.word	0x2000047c
 8001868:	20000460 	.word	0x20000460
 800186c:	20000464 	.word	0x20000464
 8001870:	200004a0 	.word	0x200004a0
 8001874:	20000484 	.word	0x20000484
 8001878:	20000488 	.word	0x20000488
 800187c:	2000052c 	.word	0x2000052c
 8001880:	20000524 	.word	0x20000524
 8001884:	20000528 	.word	0x20000528
 8001888:	0800f7dc 	.word	0x0800f7dc
 800188c:	20000412 	.word	0x20000412
 8001890:	2000000c 	.word	0x2000000c
 8001894:	08040000 	.word	0x08040000

08001898 <LinearGeneration>:

void LinearGeneration (float *var, float slope, float Amplitude)
// Amplitude is the limit of the value
{
 8001898:	b5b0      	push	{r4, r5, r7, lr}
 800189a:	b084      	sub	sp, #16
 800189c:	af00      	add	r7, sp, #0
 800189e:	60f8      	str	r0, [r7, #12]
 80018a0:	ed87 0a02 	vstr	s0, [r7, #8]
 80018a4:	edc7 0a01 	vstr	s1, [r7, #4]

//	float ReturnValue;
//	ReturnValue = (InitialValue + (float)(slope*Time*0.001)); //
	if (slope >= 0)
 80018a8:	edd7 7a02 	vldr	s15, [r7, #8]
 80018ac:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80018b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018b4:	db0d      	blt.n	80018d2 <LinearGeneration+0x3a>
	{
		if (*var >= Amplitude)
 80018b6:	68fb      	ldr	r3, [r7, #12]
 80018b8:	edd3 7a00 	vldr	s15, [r3]
 80018bc:	ed97 7a01 	vldr	s14, [r7, #4]
 80018c0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018c8:	d811      	bhi.n	80018ee <LinearGeneration+0x56>
			{
				*var = Amplitude;
 80018ca:	68fb      	ldr	r3, [r7, #12]
 80018cc:	687a      	ldr	r2, [r7, #4]
 80018ce:	601a      	str	r2, [r3, #0]
				return;
 80018d0:	e036      	b.n	8001940 <LinearGeneration+0xa8>
			}
	}
	else
	{
		if (*var <= Amplitude)
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	edd3 7a00 	vldr	s15, [r3]
 80018d8:	ed97 7a01 	vldr	s14, [r7, #4]
 80018dc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80018e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80018e4:	db03      	blt.n	80018ee <LinearGeneration+0x56>
			{
				*var = Amplitude;
 80018e6:	68fb      	ldr	r3, [r7, #12]
 80018e8:	687a      	ldr	r2, [r7, #4]
 80018ea:	601a      	str	r2, [r3, #0]
				return;
 80018ec:	e028      	b.n	8001940 <LinearGeneration+0xa8>
			}
	}
	*var += slope*SampleTime*0.001; // *0.001 to convert to second
 80018ee:	68fb      	ldr	r3, [r7, #12]
 80018f0:	681b      	ldr	r3, [r3, #0]
 80018f2:	4618      	mov	r0, r3
 80018f4:	f7fe fe28 	bl	8000548 <__aeabi_f2d>
 80018f8:	4604      	mov	r4, r0
 80018fa:	460d      	mov	r5, r1
 80018fc:	4b14      	ldr	r3, [pc, #80]	; (8001950 <LinearGeneration+0xb8>)
 80018fe:	781b      	ldrb	r3, [r3, #0]
 8001900:	ee07 3a90 	vmov	s15, r3
 8001904:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001908:	edd7 7a02 	vldr	s15, [r7, #8]
 800190c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001910:	ee17 0a90 	vmov	r0, s15
 8001914:	f7fe fe18 	bl	8000548 <__aeabi_f2d>
 8001918:	a30b      	add	r3, pc, #44	; (adr r3, 8001948 <LinearGeneration+0xb0>)
 800191a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191e:	f7fe fe6b 	bl	80005f8 <__aeabi_dmul>
 8001922:	4602      	mov	r2, r0
 8001924:	460b      	mov	r3, r1
 8001926:	4620      	mov	r0, r4
 8001928:	4629      	mov	r1, r5
 800192a:	f7fe fcaf 	bl	800028c <__adddf3>
 800192e:	4602      	mov	r2, r0
 8001930:	460b      	mov	r3, r1
 8001932:	4610      	mov	r0, r2
 8001934:	4619      	mov	r1, r3
 8001936:	f7ff f957 	bl	8000be8 <__aeabi_d2f>
 800193a:	4602      	mov	r2, r0
 800193c:	68fb      	ldr	r3, [r7, #12]
 800193e:	601a      	str	r2, [r3, #0]
}
 8001940:	3710      	adds	r7, #16
 8001942:	46bd      	mov	sp, r7
 8001944:	bdb0      	pop	{r4, r5, r7, pc}
 8001946:	bf00      	nop
 8001948:	d2f1a9fc 	.word	0xd2f1a9fc
 800194c:	3f50624d 	.word	0x3f50624d
 8001950:	20000458 	.word	0x20000458

08001954 <StopPulseGenerating>:


void StopPulseGenerating()
{
 8001954:	b580      	push	{r7, lr}
 8001956:	af00      	add	r7, sp, #0
	PulseGenerationFlag = false; //
 8001958:	4b09      	ldr	r3, [pc, #36]	; (8001980 <StopPulseGenerating+0x2c>)
 800195a:	2200      	movs	r2, #0
 800195c:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 800195e:	4809      	ldr	r0, [pc, #36]	; (8001984 <StopPulseGenerating+0x30>)
 8001960:	f006 fc4e 	bl	8008200 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_RESET);//Reset Pin status
 8001964:	2200      	movs	r2, #0
 8001966:	f44f 7100 	mov.w	r1, #512	; 0x200
 800196a:	4807      	ldr	r0, [pc, #28]	; (8001988 <StopPulseGenerating+0x34>)
 800196c:	f005 fefc 	bl	8007768 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port,PC8_PR_Pin, GPIO_PIN_RESET);//Reset Pin status
 8001970:	2200      	movs	r2, #0
 8001972:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001976:	4805      	ldr	r0, [pc, #20]	; (800198c <StopPulseGenerating+0x38>)
 8001978:	f005 fef6 	bl	8007768 <HAL_GPIO_WritePin>
}
 800197c:	bf00      	nop
 800197e:	bd80      	pop	{r7, pc}
 8001980:	20000436 	.word	0x20000436
 8001984:	2000026c 	.word	0x2000026c
 8001988:	40021000 	.word	0x40021000
 800198c:	40020800 	.word	0x40020800

08001990 <StartPulseGenerating>:
void StartPulseGenerating()
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); // Set CW direction
 8001994:	2201      	movs	r2, #1
 8001996:	f44f 7180 	mov.w	r1, #256	; 0x100
 800199a:	4808      	ldr	r0, [pc, #32]	; (80019bc <StartPulseGenerating+0x2c>)
 800199c:	f005 fee4 	bl	8007768 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 80019a0:	2201      	movs	r2, #1
 80019a2:	f44f 7100 	mov.w	r1, #512	; 0x200
 80019a6:	4806      	ldr	r0, [pc, #24]	; (80019c0 <StartPulseGenerating+0x30>)
 80019a8:	f005 fede 	bl	8007768 <HAL_GPIO_WritePin>
	PulseGenerationFlag = true;
 80019ac:	4b05      	ldr	r3, [pc, #20]	; (80019c4 <StartPulseGenerating+0x34>)
 80019ae:	2201      	movs	r2, #1
 80019b0:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3
 80019b2:	4805      	ldr	r0, [pc, #20]	; (80019c8 <StartPulseGenerating+0x38>)
 80019b4:	f006 fbb4 	bl	8008120 <HAL_TIM_Base_Start_IT>
}
 80019b8:	bf00      	nop
 80019ba:	bd80      	pop	{r7, pc}
 80019bc:	40020800 	.word	0x40020800
 80019c0:	40021000 	.word	0x40021000
 80019c4:	20000436 	.word	0x20000436
 80019c8:	2000026c 	.word	0x2000026c

080019cc <WaitingMiliSecond>:
bool WaitingMiliSecond(uint16_t TimeInMiliSecond)
{
 80019cc:	b480      	push	{r7}
 80019ce:	b083      	sub	sp, #12
 80019d0:	af00      	add	r7, sp, #0
 80019d2:	4603      	mov	r3, r0
 80019d4:	80fb      	strh	r3, [r7, #6]
	StoppingTimeCount++;
 80019d6:	4b0e      	ldr	r3, [pc, #56]	; (8001a10 <WaitingMiliSecond+0x44>)
 80019d8:	881b      	ldrh	r3, [r3, #0]
 80019da:	3301      	adds	r3, #1
 80019dc:	b29a      	uxth	r2, r3
 80019de:	4b0c      	ldr	r3, [pc, #48]	; (8001a10 <WaitingMiliSecond+0x44>)
 80019e0:	801a      	strh	r2, [r3, #0]
	if (StoppingTimeCount >= (uint16_t)(TimeInMiliSecond/SampleTime))
 80019e2:	88fb      	ldrh	r3, [r7, #6]
 80019e4:	4a0b      	ldr	r2, [pc, #44]	; (8001a14 <WaitingMiliSecond+0x48>)
 80019e6:	7812      	ldrb	r2, [r2, #0]
 80019e8:	fb93 f3f2 	sdiv	r3, r3, r2
 80019ec:	b29a      	uxth	r2, r3
 80019ee:	4b08      	ldr	r3, [pc, #32]	; (8001a10 <WaitingMiliSecond+0x44>)
 80019f0:	881b      	ldrh	r3, [r3, #0]
 80019f2:	429a      	cmp	r2, r3
 80019f4:	d804      	bhi.n	8001a00 <WaitingMiliSecond+0x34>
	{
		StoppingTimeCount = 0;
 80019f6:	4b06      	ldr	r3, [pc, #24]	; (8001a10 <WaitingMiliSecond+0x44>)
 80019f8:	2200      	movs	r2, #0
 80019fa:	801a      	strh	r2, [r3, #0]
		return true;
 80019fc:	2301      	movs	r3, #1
 80019fe:	e000      	b.n	8001a02 <WaitingMiliSecond+0x36>
	}
	return false;
 8001a00:	2300      	movs	r3, #0
}
 8001a02:	4618      	mov	r0, r3
 8001a04:	370c      	adds	r7, #12
 8001a06:	46bd      	mov	sp, r7
 8001a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a0c:	4770      	bx	lr
 8001a0e:	bf00      	nop
 8001a10:	2000044e 	.word	0x2000044e
 8001a14:	20000458 	.word	0x20000458

08001a18 <CalculateTimer3Period>:

int CalculateTimer3Period (bool DriverType, float speed)
{
 8001a18:	b5b0      	push	{r4, r5, r7, lr}
 8001a1a:	b082      	sub	sp, #8
 8001a1c:	af00      	add	r7, sp, #0
 8001a1e:	4603      	mov	r3, r0
 8001a20:	ed87 0a00 	vstr	s0, [r7]
 8001a24:	71fb      	strb	r3, [r7, #7]
	// DriverType = true ->  Higen FDA7000 Driver
	// DriverType = false -> ASDA A3 Driver
	// Speed in rpm
	if (DriverType) // Higen FDA7000 Driver
 8001a26:	79fb      	ldrb	r3, [r7, #7]
 8001a28:	2b00      	cmp	r3, #0
 8001a2a:	d037      	beq.n	8001a9c <CalculateTimer3Period+0x84>
	{
		return (int)((float)(120000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001a2c:	edd7 7a00 	vldr	s15, [r7]
 8001a30:	eef0 7ae7 	vabs.f32	s15, s15
 8001a34:	ee17 0a90 	vmov	r0, s15
 8001a38:	f7fe fd86 	bl	8000548 <__aeabi_f2d>
 8001a3c:	4604      	mov	r4, r0
 8001a3e:	460d      	mov	r5, r1
 8001a40:	4b39      	ldr	r3, [pc, #228]	; (8001b28 <CalculateTimer3Period+0x110>)
 8001a42:	881b      	ldrh	r3, [r3, #0]
 8001a44:	ee07 3a90 	vmov	s15, r3
 8001a48:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001a4c:	ee17 0a90 	vmov	r0, s15
 8001a50:	f7fe fd7a 	bl	8000548 <__aeabi_f2d>
 8001a54:	4602      	mov	r2, r0
 8001a56:	460b      	mov	r3, r1
 8001a58:	4620      	mov	r0, r4
 8001a5a:	4629      	mov	r1, r5
 8001a5c:	f7fe fdcc 	bl	80005f8 <__aeabi_dmul>
 8001a60:	4602      	mov	r2, r0
 8001a62:	460b      	mov	r3, r1
 8001a64:	a12c      	add	r1, pc, #176	; (adr r1, 8001b18 <CalculateTimer3Period+0x100>)
 8001a66:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001a6a:	f7fe feef 	bl	800084c <__aeabi_ddiv>
 8001a6e:	4602      	mov	r2, r0
 8001a70:	460b      	mov	r3, r1
 8001a72:	4610      	mov	r0, r2
 8001a74:	4619      	mov	r1, r3
 8001a76:	f7ff f8b7 	bl	8000be8 <__aeabi_d2f>
 8001a7a:	4603      	mov	r3, r0
 8001a7c:	4618      	mov	r0, r3
 8001a7e:	f7fe fd63 	bl	8000548 <__aeabi_f2d>
 8001a82:	f04f 0200 	mov.w	r2, #0
 8001a86:	4b29      	ldr	r3, [pc, #164]	; (8001b2c <CalculateTimer3Period+0x114>)
 8001a88:	f7fe fc00 	bl	800028c <__adddf3>
 8001a8c:	4602      	mov	r2, r0
 8001a8e:	460b      	mov	r3, r1
 8001a90:	4610      	mov	r0, r2
 8001a92:	4619      	mov	r1, r3
 8001a94:	f7ff f860 	bl	8000b58 <__aeabi_d2iz>
 8001a98:	4603      	mov	r3, r0
 8001a9a:	e036      	b.n	8001b0a <CalculateTimer3Period+0xf2>
	}
	else
	{
		return (int)((float)(15000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001a9c:	edd7 7a00 	vldr	s15, [r7]
 8001aa0:	eef0 7ae7 	vabs.f32	s15, s15
 8001aa4:	ee17 0a90 	vmov	r0, s15
 8001aa8:	f7fe fd4e 	bl	8000548 <__aeabi_f2d>
 8001aac:	4604      	mov	r4, r0
 8001aae:	460d      	mov	r5, r1
 8001ab0:	4b1d      	ldr	r3, [pc, #116]	; (8001b28 <CalculateTimer3Period+0x110>)
 8001ab2:	881b      	ldrh	r3, [r3, #0]
 8001ab4:	ee07 3a90 	vmov	s15, r3
 8001ab8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001abc:	ee17 0a90 	vmov	r0, s15
 8001ac0:	f7fe fd42 	bl	8000548 <__aeabi_f2d>
 8001ac4:	4602      	mov	r2, r0
 8001ac6:	460b      	mov	r3, r1
 8001ac8:	4620      	mov	r0, r4
 8001aca:	4629      	mov	r1, r5
 8001acc:	f7fe fd94 	bl	80005f8 <__aeabi_dmul>
 8001ad0:	4602      	mov	r2, r0
 8001ad2:	460b      	mov	r3, r1
 8001ad4:	a112      	add	r1, pc, #72	; (adr r1, 8001b20 <CalculateTimer3Period+0x108>)
 8001ad6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001ada:	f7fe feb7 	bl	800084c <__aeabi_ddiv>
 8001ade:	4602      	mov	r2, r0
 8001ae0:	460b      	mov	r3, r1
 8001ae2:	4610      	mov	r0, r2
 8001ae4:	4619      	mov	r1, r3
 8001ae6:	f7ff f87f 	bl	8000be8 <__aeabi_d2f>
 8001aea:	4603      	mov	r3, r0
 8001aec:	4618      	mov	r0, r3
 8001aee:	f7fe fd2b 	bl	8000548 <__aeabi_f2d>
 8001af2:	f04f 0200 	mov.w	r2, #0
 8001af6:	4b0d      	ldr	r3, [pc, #52]	; (8001b2c <CalculateTimer3Period+0x114>)
 8001af8:	f7fe fbc8 	bl	800028c <__adddf3>
 8001afc:	4602      	mov	r2, r0
 8001afe:	460b      	mov	r3, r1
 8001b00:	4610      	mov	r0, r2
 8001b02:	4619      	mov	r1, r3
 8001b04:	f7ff f828 	bl	8000b58 <__aeabi_d2iz>
 8001b08:	4603      	mov	r3, r0
	}
}
 8001b0a:	4618      	mov	r0, r3
 8001b0c:	3708      	adds	r7, #8
 8001b0e:	46bd      	mov	sp, r7
 8001b10:	bdb0      	pop	{r4, r5, r7, pc}
 8001b12:	bf00      	nop
 8001b14:	f3af 8000 	nop.w
 8001b18:	00000000 	.word	0x00000000
 8001b1c:	419c9c38 	.word	0x419c9c38
 8001b20:	00000000 	.word	0x00000000
 8001b24:	416c9c38 	.word	0x416c9c38
 8001b28:	2000000a 	.word	0x2000000a
 8001b2c:	3fe00000 	.word	0x3fe00000

08001b30 <CheckGoingToRefPosition>:

bool CheckGoingToRefPosition(bool _direction, int RefPulsePosition) // return true when finish going down, else return false;
// direction = true => go down, false => go up
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b082      	sub	sp, #8
 8001b34:	af00      	add	r7, sp, #0
 8001b36:	4603      	mov	r3, r0
 8001b38:	6039      	str	r1, [r7, #0]
 8001b3a:	71fb      	strb	r3, [r7, #7]
	if (MotorDriver) // FDA7000 Driver, PosCmd based
 8001b3c:	4bb4      	ldr	r3, [pc, #720]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001b3e:	781b      	ldrb	r3, [r3, #0]
 8001b40:	2b00      	cmp	r3, #0
 8001b42:	f000 80b1 	beq.w	8001ca8 <CheckGoingToRefPosition+0x178>
	{
		//if (abs(RefPulsePosition - EgearRatio*PositionPulseCmd) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/120)) // Start reducing the speed
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/60))
 8001b46:	4bb3      	ldr	r3, [pc, #716]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001b48:	681b      	ldr	r3, [r3, #0]
 8001b4a:	683a      	ldr	r2, [r7, #0]
 8001b4c:	1ad2      	subs	r2, r2, r3
 8001b4e:	4bb2      	ldr	r3, [pc, #712]	; (8001e18 <CheckGoingToRefPosition+0x2e8>)
 8001b50:	681b      	ldr	r3, [r3, #0]
 8001b52:	4413      	add	r3, r2
 8001b54:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001b58:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001b5c:	4baf      	ldr	r3, [pc, #700]	; (8001e1c <CheckGoingToRefPosition+0x2ec>)
 8001b5e:	881b      	ldrh	r3, [r3, #0]
 8001b60:	4619      	mov	r1, r3
 8001b62:	4baf      	ldr	r3, [pc, #700]	; (8001e20 <CheckGoingToRefPosition+0x2f0>)
 8001b64:	781b      	ldrb	r3, [r3, #0]
 8001b66:	fb01 f303 	mul.w	r3, r1, r3
 8001b6a:	49ae      	ldr	r1, [pc, #696]	; (8001e24 <CheckGoingToRefPosition+0x2f4>)
 8001b6c:	fb81 0103 	smull	r0, r1, r1, r3
 8001b70:	10c9      	asrs	r1, r1, #3
 8001b72:	17db      	asrs	r3, r3, #31
 8001b74:	1acb      	subs	r3, r1, r3
 8001b76:	429a      	cmp	r2, r3
 8001b78:	dc30      	bgt.n	8001bdc <CheckGoingToRefPosition+0xac>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001b7a:	79fb      	ldrb	r3, [r7, #7]
 8001b7c:	2b00      	cmp	r3, #0
 8001b7e:	d010      	beq.n	8001ba2 <CheckGoingToRefPosition+0x72>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20); //-EpsilonPulling means the spd is negative
 8001b80:	4ba9      	ldr	r3, [pc, #676]	; (8001e28 <CheckGoingToRefPosition+0x2f8>)
 8001b82:	edd3 7a00 	vldr	s15, [r3]
 8001b86:	eef1 7a67 	vneg.f32	s15, s15
 8001b8a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001b8e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b92:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001b96:	eeb0 0a67 	vmov.f32	s0, s15
 8001b9a:	48a4      	ldr	r0, [pc, #656]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001b9c:	f7ff fe7c 	bl	8001898 <LinearGeneration>
 8001ba0:	e00d      	b.n	8001bbe <CheckGoingToRefPosition+0x8e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10,PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20); //-EpsilonPulling means the spd is negative
 8001ba2:	4ba1      	ldr	r3, [pc, #644]	; (8001e28 <CheckGoingToRefPosition+0x2f8>)
 8001ba4:	edd3 7a00 	vldr	s15, [r3]
 8001ba8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bac:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bb0:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001bb4:	eeb0 0a67 	vmov.f32	s0, s15
 8001bb8:	489c      	ldr	r0, [pc, #624]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001bba:	f7ff fe6d 	bl	8001898 <LinearGeneration>
			}
			Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001bbe:	4b94      	ldr	r3, [pc, #592]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001bc0:	781b      	ldrb	r3, [r3, #0]
 8001bc2:	4a9a      	ldr	r2, [pc, #616]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001bc4:	edd2 7a00 	vldr	s15, [r2]
 8001bc8:	eeb0 0a67 	vmov.f32	s0, s15
 8001bcc:	4618      	mov	r0, r3
 8001bce:	f7ff ff23 	bl	8001a18 <CalculateTimer3Period>
 8001bd2:	4603      	mov	r3, r0
 8001bd4:	b29a      	uxth	r2, r3
 8001bd6:	4b96      	ldr	r3, [pc, #600]	; (8001e30 <CheckGoingToRefPosition+0x300>)
 8001bd8:	801a      	strh	r2, [r3, #0]
 8001bda:	e044      	b.n	8001c66 <CheckGoingToRefPosition+0x136>
		}
		else // Acclerate going
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001bdc:	79fb      	ldrb	r3, [r7, #7]
 8001bde:	2b00      	cmp	r3, #0
 8001be0:	d014      	beq.n	8001c0c <CheckGoingToRefPosition+0xdc>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001be2:	4b91      	ldr	r3, [pc, #580]	; (8001e28 <CheckGoingToRefPosition+0x2f8>)
 8001be4:	edd3 7a00 	vldr	s15, [r3]
 8001be8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001bec:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf0:	4b8b      	ldr	r3, [pc, #556]	; (8001e20 <CheckGoingToRefPosition+0x2f0>)
 8001bf2:	781b      	ldrb	r3, [r3, #0]
 8001bf4:	ee07 3a10 	vmov	s14, r3
 8001bf8:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001bfc:	eef0 0a47 	vmov.f32	s1, s14
 8001c00:	eeb0 0a67 	vmov.f32	s0, s15
 8001c04:	4889      	ldr	r0, [pc, #548]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001c06:	f7ff fe47 	bl	8001898 <LinearGeneration>
 8001c0a:	e016      	b.n	8001c3a <CheckGoingToRefPosition+0x10a>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed); //-EpsilonPulling means the spd is negative
 8001c0c:	4b86      	ldr	r3, [pc, #536]	; (8001e28 <CheckGoingToRefPosition+0x2f8>)
 8001c0e:	edd3 7a00 	vldr	s15, [r3]
 8001c12:	eef1 7a67 	vneg.f32	s15, s15
 8001c16:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001c1a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001c1e:	4b80      	ldr	r3, [pc, #512]	; (8001e20 <CheckGoingToRefPosition+0x2f0>)
 8001c20:	781b      	ldrb	r3, [r3, #0]
 8001c22:	425b      	negs	r3, r3
 8001c24:	ee07 3a10 	vmov	s14, r3
 8001c28:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001c2c:	eef0 0a47 	vmov.f32	s1, s14
 8001c30:	eeb0 0a67 	vmov.f32	s0, s15
 8001c34:	487d      	ldr	r0, [pc, #500]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001c36:	f7ff fe2f 	bl	8001898 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001c3a:	4b7c      	ldr	r3, [pc, #496]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001c44:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c48:	d00d      	beq.n	8001c66 <CheckGoingToRefPosition+0x136>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001c4a:	4b71      	ldr	r3, [pc, #452]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001c4c:	781b      	ldrb	r3, [r3, #0]
 8001c4e:	4a77      	ldr	r2, [pc, #476]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001c50:	edd2 7a00 	vldr	s15, [r2]
 8001c54:	eeb0 0a67 	vmov.f32	s0, s15
 8001c58:	4618      	mov	r0, r3
 8001c5a:	f7ff fedd 	bl	8001a18 <CalculateTimer3Period>
 8001c5e:	4603      	mov	r3, r0
 8001c60:	b29a      	uxth	r2, r3
 8001c62:	4b73      	ldr	r3, [pc, #460]	; (8001e30 <CheckGoingToRefPosition+0x300>)
 8001c64:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
			}
			//PrePullingSpeed = SpeedCmd;
		}
		if ( abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 1000) // Reach the ref position
 8001c66:	4b6b      	ldr	r3, [pc, #428]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001c68:	681b      	ldr	r3, [r3, #0]
 8001c6a:	683a      	ldr	r2, [r7, #0]
 8001c6c:	1ad2      	subs	r2, r2, r3
 8001c6e:	4b6a      	ldr	r3, [pc, #424]	; (8001e18 <CheckGoingToRefPosition+0x2e8>)
 8001c70:	681b      	ldr	r3, [r3, #0]
 8001c72:	4413      	add	r3, r2
 8001c74:	f513 7f7a 	cmn.w	r3, #1000	; 0x3e8
 8001c78:	f2c0 80c5 	blt.w	8001e06 <CheckGoingToRefPosition+0x2d6>
 8001c7c:	4b65      	ldr	r3, [pc, #404]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001c7e:	681b      	ldr	r3, [r3, #0]
 8001c80:	683a      	ldr	r2, [r7, #0]
 8001c82:	1ad2      	subs	r2, r2, r3
 8001c84:	4b64      	ldr	r3, [pc, #400]	; (8001e18 <CheckGoingToRefPosition+0x2e8>)
 8001c86:	681b      	ldr	r3, [r3, #0]
 8001c88:	4413      	add	r3, r2
 8001c8a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001c8e:	f300 80ba 	bgt.w	8001e06 <CheckGoingToRefPosition+0x2d6>
		{
//			RunningTime = 0;
//			RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001c92:	4b67      	ldr	r3, [pc, #412]	; (8001e30 <CheckGoingToRefPosition+0x300>)
 8001c94:	2200      	movs	r2, #0
 8001c96:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001c98:	4b64      	ldr	r3, [pc, #400]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();
 8001ca0:	f7ff fe58 	bl	8001954 <StopPulseGenerating>
			return true;
 8001ca4:	2301      	movs	r3, #1
 8001ca6:	e0af      	b.n	8001e08 <CheckGoingToRefPosition+0x2d8>
		}
	}
	else // ASDA A3, Actual Encoder based
	{
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/90)) // Start reducing the speed
 8001ca8:	4b5a      	ldr	r3, [pc, #360]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001caa:	681b      	ldr	r3, [r3, #0]
 8001cac:	683a      	ldr	r2, [r7, #0]
 8001cae:	1ad2      	subs	r2, r2, r3
 8001cb0:	4b59      	ldr	r3, [pc, #356]	; (8001e18 <CheckGoingToRefPosition+0x2e8>)
 8001cb2:	681b      	ldr	r3, [r3, #0]
 8001cb4:	4413      	add	r3, r2
 8001cb6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001cba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001cbe:	4b57      	ldr	r3, [pc, #348]	; (8001e1c <CheckGoingToRefPosition+0x2ec>)
 8001cc0:	881b      	ldrh	r3, [r3, #0]
 8001cc2:	4619      	mov	r1, r3
 8001cc4:	4b56      	ldr	r3, [pc, #344]	; (8001e20 <CheckGoingToRefPosition+0x2f0>)
 8001cc6:	781b      	ldrb	r3, [r3, #0]
 8001cc8:	fb01 f303 	mul.w	r3, r1, r3
 8001ccc:	4959      	ldr	r1, [pc, #356]	; (8001e34 <CheckGoingToRefPosition+0x304>)
 8001cce:	fb81 0103 	smull	r0, r1, r1, r3
 8001cd2:	4419      	add	r1, r3
 8001cd4:	1109      	asrs	r1, r1, #4
 8001cd6:	17db      	asrs	r3, r3, #31
 8001cd8:	1acb      	subs	r3, r1, r3
 8001cda:	429a      	cmp	r2, r3
 8001cdc:	dc30      	bgt.n	8001d40 <CheckGoingToRefPosition+0x210>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001cde:	79fb      	ldrb	r3, [r7, #7]
 8001ce0:	2b00      	cmp	r3, #0
 8001ce2:	d010      	beq.n	8001d06 <CheckGoingToRefPosition+0x1d6>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20);
 8001ce4:	4b50      	ldr	r3, [pc, #320]	; (8001e28 <CheckGoingToRefPosition+0x2f8>)
 8001ce6:	edd3 7a00 	vldr	s15, [r3]
 8001cea:	eef1 7a67 	vneg.f32	s15, s15
 8001cee:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001cf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001cf6:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001cfa:	eeb0 0a67 	vmov.f32	s0, s15
 8001cfe:	484b      	ldr	r0, [pc, #300]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001d00:	f7ff fdca 	bl	8001898 <LinearGeneration>
 8001d04:	e00d      	b.n	8001d22 <CheckGoingToRefPosition+0x1f2>
				//SpeedCmd = LinearGeneration(RunningTime2,-GoingAcceleration*10,PrePullingSpeed,20,PullingSpeed); //-EpsilonPulling means the spd is negative
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20);
 8001d06:	4b48      	ldr	r3, [pc, #288]	; (8001e28 <CheckGoingToRefPosition+0x2f8>)
 8001d08:	edd3 7a00 	vldr	s15, [r3]
 8001d0c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d10:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d14:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001d18:	eeb0 0a67 	vmov.f32	s0, s15
 8001d1c:	4843      	ldr	r0, [pc, #268]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001d1e:	f7ff fdbb 	bl	8001898 <LinearGeneration>
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10, PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
			}
			Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001d22:	4b3b      	ldr	r3, [pc, #236]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001d24:	781b      	ldrb	r3, [r3, #0]
 8001d26:	4a41      	ldr	r2, [pc, #260]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001d28:	edd2 7a00 	vldr	s15, [r2]
 8001d2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d30:	4618      	mov	r0, r3
 8001d32:	f7ff fe71 	bl	8001a18 <CalculateTimer3Period>
 8001d36:	4603      	mov	r3, r0
 8001d38:	b29a      	uxth	r2, r3
 8001d3a:	4b3d      	ldr	r3, [pc, #244]	; (8001e30 <CheckGoingToRefPosition+0x300>)
 8001d3c:	801a      	strh	r2, [r3, #0]
 8001d3e:	e044      	b.n	8001dca <CheckGoingToRefPosition+0x29a>

		else
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001d40:	79fb      	ldrb	r3, [r7, #7]
 8001d42:	2b00      	cmp	r3, #0
 8001d44:	d014      	beq.n	8001d70 <CheckGoingToRefPosition+0x240>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001d46:	4b38      	ldr	r3, [pc, #224]	; (8001e28 <CheckGoingToRefPosition+0x2f8>)
 8001d48:	edd3 7a00 	vldr	s15, [r3]
 8001d4c:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d50:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d54:	4b32      	ldr	r3, [pc, #200]	; (8001e20 <CheckGoingToRefPosition+0x2f0>)
 8001d56:	781b      	ldrb	r3, [r3, #0]
 8001d58:	ee07 3a10 	vmov	s14, r3
 8001d5c:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001d60:	eef0 0a47 	vmov.f32	s1, s14
 8001d64:	eeb0 0a67 	vmov.f32	s0, s15
 8001d68:	4830      	ldr	r0, [pc, #192]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001d6a:	f7ff fd95 	bl	8001898 <LinearGeneration>
 8001d6e:	e016      	b.n	8001d9e <CheckGoingToRefPosition+0x26e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration*10,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed);
 8001d70:	4b2d      	ldr	r3, [pc, #180]	; (8001e28 <CheckGoingToRefPosition+0x2f8>)
 8001d72:	edd3 7a00 	vldr	s15, [r3]
 8001d76:	eef1 7a67 	vneg.f32	s15, s15
 8001d7a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d7e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d82:	4b27      	ldr	r3, [pc, #156]	; (8001e20 <CheckGoingToRefPosition+0x2f0>)
 8001d84:	781b      	ldrb	r3, [r3, #0]
 8001d86:	425b      	negs	r3, r3
 8001d88:	ee07 3a10 	vmov	s14, r3
 8001d8c:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001d90:	eef0 0a47 	vmov.f32	s1, s14
 8001d94:	eeb0 0a67 	vmov.f32	s0, s15
 8001d98:	4824      	ldr	r0, [pc, #144]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001d9a:	f7ff fd7d 	bl	8001898 <LinearGeneration>
			}

			if (SpeedCmd != 0)
 8001d9e:	4b23      	ldr	r3, [pc, #140]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001da0:	edd3 7a00 	vldr	s15, [r3]
 8001da4:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001da8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dac:	d00d      	beq.n	8001dca <CheckGoingToRefPosition+0x29a>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8001dae:	4b18      	ldr	r3, [pc, #96]	; (8001e10 <CheckGoingToRefPosition+0x2e0>)
 8001db0:	781b      	ldrb	r3, [r3, #0]
 8001db2:	4a1e      	ldr	r2, [pc, #120]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001db4:	edd2 7a00 	vldr	s15, [r2]
 8001db8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dbc:	4618      	mov	r0, r3
 8001dbe:	f7ff fe2b 	bl	8001a18 <CalculateTimer3Period>
 8001dc2:	4603      	mov	r3, r0
 8001dc4:	b29a      	uxth	r2, r3
 8001dc6:	4b1a      	ldr	r3, [pc, #104]	; (8001e30 <CheckGoingToRefPosition+0x300>)
 8001dc8:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
			}
			//PrePullingSpeed = SpeedCmd;
		}

		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 100) // Reach the bottom position
 8001dca:	4b12      	ldr	r3, [pc, #72]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001dcc:	681b      	ldr	r3, [r3, #0]
 8001dce:	683a      	ldr	r2, [r7, #0]
 8001dd0:	1ad2      	subs	r2, r2, r3
 8001dd2:	4b11      	ldr	r3, [pc, #68]	; (8001e18 <CheckGoingToRefPosition+0x2e8>)
 8001dd4:	681b      	ldr	r3, [r3, #0]
 8001dd6:	4413      	add	r3, r2
 8001dd8:	f113 0f64 	cmn.w	r3, #100	; 0x64
 8001ddc:	db13      	blt.n	8001e06 <CheckGoingToRefPosition+0x2d6>
 8001dde:	4b0d      	ldr	r3, [pc, #52]	; (8001e14 <CheckGoingToRefPosition+0x2e4>)
 8001de0:	681b      	ldr	r3, [r3, #0]
 8001de2:	683a      	ldr	r2, [r7, #0]
 8001de4:	1ad2      	subs	r2, r2, r3
 8001de6:	4b0c      	ldr	r3, [pc, #48]	; (8001e18 <CheckGoingToRefPosition+0x2e8>)
 8001de8:	681b      	ldr	r3, [r3, #0]
 8001dea:	4413      	add	r3, r2
 8001dec:	2b64      	cmp	r3, #100	; 0x64
 8001dee:	dc0a      	bgt.n	8001e06 <CheckGoingToRefPosition+0x2d6>
		{
			//RunningTime = 0;
			//RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001df0:	4b0f      	ldr	r3, [pc, #60]	; (8001e30 <CheckGoingToRefPosition+0x300>)
 8001df2:	2200      	movs	r2, #0
 8001df4:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001df6:	4b0d      	ldr	r3, [pc, #52]	; (8001e2c <CheckGoingToRefPosition+0x2fc>)
 8001df8:	f04f 0200 	mov.w	r2, #0
 8001dfc:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();
 8001dfe:	f7ff fda9 	bl	8001954 <StopPulseGenerating>
			return true;
 8001e02:	2301      	movs	r3, #1
 8001e04:	e000      	b.n	8001e08 <CheckGoingToRefPosition+0x2d8>
		}
	}
	return false;
 8001e06:	2300      	movs	r3, #0
}
 8001e08:	4618      	mov	r0, r3
 8001e0a:	3708      	adds	r7, #8
 8001e0c:	46bd      	mov	sp, r7
 8001e0e:	bd80      	pop	{r7, pc}
 8001e10:	20000003 	.word	0x20000003
 8001e14:	200004fc 	.word	0x200004fc
 8001e18:	200004b4 	.word	0x200004b4
 8001e1c:	2000000a 	.word	0x2000000a
 8001e20:	20000459 	.word	0x20000459
 8001e24:	66666667 	.word	0x66666667
 8001e28:	2000045c 	.word	0x2000045c
 8001e2c:	20000500 	.word	0x20000500
 8001e30:	2000044a 	.word	0x2000044a
 8001e34:	88888889 	.word	0x88888889

08001e38 <InitGoingToStartingPosition>:

void InitGoingToStartingPosition ()
{
 8001e38:	b580      	push	{r7, lr}
 8001e3a:	af00      	add	r7, sp, #0
	if (MotorDriver) // HIGEN FDA7000
 8001e3c:	4b48      	ldr	r3, [pc, #288]	; (8001f60 <InitGoingToStartingPosition+0x128>)
 8001e3e:	781b      	ldrb	r3, [r3, #0]
 8001e40:	2b00      	cmp	r3, #0
 8001e42:	d045      	beq.n	8001ed0 <InitGoingToStartingPosition+0x98>
	{
		//if (PositionPulseCmd*EgearRatio < PullingBotomPulseCmdPosition) // Then going down to the bottom
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition)
 8001e44:	4b47      	ldr	r3, [pc, #284]	; (8001f64 <InitGoingToStartingPosition+0x12c>)
 8001e46:	681a      	ldr	r2, [r3, #0]
 8001e48:	4b47      	ldr	r3, [pc, #284]	; (8001f68 <InitGoingToStartingPosition+0x130>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	1ad2      	subs	r2, r2, r3
 8001e4e:	4b47      	ldr	r3, [pc, #284]	; (8001f6c <InitGoingToStartingPosition+0x134>)
 8001e50:	681b      	ldr	r3, [r3, #0]
 8001e52:	429a      	cmp	r2, r3
 8001e54:	da0c      	bge.n	8001e70 <InitGoingToStartingPosition+0x38>
		{
			StartAccleratePulling = false;
 8001e56:	4b46      	ldr	r3, [pc, #280]	; (8001f70 <InitGoingToStartingPosition+0x138>)
 8001e58:	2200      	movs	r2, #0
 8001e5a:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001e5c:	4b45      	ldr	r3, [pc, #276]	; (8001f74 <InitGoingToStartingPosition+0x13c>)
 8001e5e:	2201      	movs	r2, #1
 8001e60:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = false; // false = Dropping Down
 8001e62:	4b45      	ldr	r3, [pc, #276]	; (8001f78 <InitGoingToStartingPosition+0x140>)
 8001e64:	2200      	movs	r2, #0
 8001e66:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001e68:	f7ff f9fe 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			StartPulseGenerating();
 8001e6c:	f7ff fd90 	bl	8001990 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001e70:	4b3c      	ldr	r3, [pc, #240]	; (8001f64 <InitGoingToStartingPosition+0x12c>)
 8001e72:	681a      	ldr	r2, [r3, #0]
 8001e74:	4b3c      	ldr	r3, [pc, #240]	; (8001f68 <InitGoingToStartingPosition+0x130>)
 8001e76:	681b      	ldr	r3, [r3, #0]
 8001e78:	1ad2      	subs	r2, r2, r3
 8001e7a:	4b3c      	ldr	r3, [pc, #240]	; (8001f6c <InitGoingToStartingPosition+0x134>)
 8001e7c:	681b      	ldr	r3, [r3, #0]
 8001e7e:	429a      	cmp	r2, r3
 8001e80:	dd0c      	ble.n	8001e9c <InitGoingToStartingPosition+0x64>
		{
			StartAccleratePulling = false;
 8001e82:	4b3b      	ldr	r3, [pc, #236]	; (8001f70 <InitGoingToStartingPosition+0x138>)
 8001e84:	2200      	movs	r2, #0
 8001e86:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8001e88:	4b3a      	ldr	r3, [pc, #232]	; (8001f74 <InitGoingToStartingPosition+0x13c>)
 8001e8a:	2200      	movs	r2, #0
 8001e8c:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8001e8e:	4b3a      	ldr	r3, [pc, #232]	; (8001f78 <InitGoingToStartingPosition+0x140>)
 8001e90:	2201      	movs	r2, #1
 8001e92:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001e94:	f7ff f9e8 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			StartPulseGenerating();
 8001e98:	f7ff fd7a 	bl	8001990 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8001e9c:	4b31      	ldr	r3, [pc, #196]	; (8001f64 <InitGoingToStartingPosition+0x12c>)
 8001e9e:	681a      	ldr	r2, [r3, #0]
 8001ea0:	4b31      	ldr	r3, [pc, #196]	; (8001f68 <InitGoingToStartingPosition+0x130>)
 8001ea2:	681b      	ldr	r3, [r3, #0]
 8001ea4:	1ad2      	subs	r2, r2, r3
 8001ea6:	4b31      	ldr	r3, [pc, #196]	; (8001f6c <InitGoingToStartingPosition+0x134>)
 8001ea8:	681b      	ldr	r3, [r3, #0]
 8001eaa:	429a      	cmp	r2, r3
 8001eac:	d155      	bne.n	8001f5a <InitGoingToStartingPosition+0x122>
		{
			StartAccleratePulling = true;
 8001eae:	4b30      	ldr	r3, [pc, #192]	; (8001f70 <InitGoingToStartingPosition+0x138>)
 8001eb0:	2201      	movs	r2, #1
 8001eb2:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage
 8001eb4:	4b31      	ldr	r3, [pc, #196]	; (8001f7c <InitGoingToStartingPosition+0x144>)
 8001eb6:	2200      	movs	r2, #0
 8001eb8:	701a      	strb	r2, [r3, #0]
			Direction = false;
 8001eba:	4b2e      	ldr	r3, [pc, #184]	; (8001f74 <InitGoingToStartingPosition+0x13c>)
 8001ebc:	2200      	movs	r2, #0
 8001ebe:	701a      	strb	r2, [r3, #0]

			PRIsToggled = true; // true = pulling up.
 8001ec0:	4b2d      	ldr	r3, [pc, #180]	; (8001f78 <InitGoingToStartingPosition+0x140>)
 8001ec2:	2201      	movs	r2, #1
 8001ec4:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001ec6:	f7ff f9cf 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001eca:	f7ff fd61 	bl	8001990 <StartPulseGenerating>
			PRIsToggled = true; // true = pulling up.
			DisableSTOP(); // Disable the stop
			StartPulseGenerating();
		}
	}
}
 8001ece:	e044      	b.n	8001f5a <InitGoingToStartingPosition+0x122>
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition) // Then going down to the bottom
 8001ed0:	4b24      	ldr	r3, [pc, #144]	; (8001f64 <InitGoingToStartingPosition+0x12c>)
 8001ed2:	681a      	ldr	r2, [r3, #0]
 8001ed4:	4b24      	ldr	r3, [pc, #144]	; (8001f68 <InitGoingToStartingPosition+0x130>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	1ad2      	subs	r2, r2, r3
 8001eda:	4b24      	ldr	r3, [pc, #144]	; (8001f6c <InitGoingToStartingPosition+0x134>)
 8001edc:	681b      	ldr	r3, [r3, #0]
 8001ede:	429a      	cmp	r2, r3
 8001ee0:	da0c      	bge.n	8001efc <InitGoingToStartingPosition+0xc4>
			StartAccleratePulling = false;
 8001ee2:	4b23      	ldr	r3, [pc, #140]	; (8001f70 <InitGoingToStartingPosition+0x138>)
 8001ee4:	2200      	movs	r2, #0
 8001ee6:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001ee8:	4b22      	ldr	r3, [pc, #136]	; (8001f74 <InitGoingToStartingPosition+0x13c>)
 8001eea:	2201      	movs	r2, #1
 8001eec:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down
 8001eee:	4b22      	ldr	r3, [pc, #136]	; (8001f78 <InitGoingToStartingPosition+0x140>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001ef4:	f7ff f9b8 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001ef8:	f7ff fd4a 	bl	8001990 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001efc:	4b19      	ldr	r3, [pc, #100]	; (8001f64 <InitGoingToStartingPosition+0x12c>)
 8001efe:	681a      	ldr	r2, [r3, #0]
 8001f00:	4b19      	ldr	r3, [pc, #100]	; (8001f68 <InitGoingToStartingPosition+0x130>)
 8001f02:	681b      	ldr	r3, [r3, #0]
 8001f04:	1ad2      	subs	r2, r2, r3
 8001f06:	4b19      	ldr	r3, [pc, #100]	; (8001f6c <InitGoingToStartingPosition+0x134>)
 8001f08:	681b      	ldr	r3, [r3, #0]
 8001f0a:	429a      	cmp	r2, r3
 8001f0c:	dd0c      	ble.n	8001f28 <InitGoingToStartingPosition+0xf0>
			StartAccleratePulling = false;
 8001f0e:	4b18      	ldr	r3, [pc, #96]	; (8001f70 <InitGoingToStartingPosition+0x138>)
 8001f10:	2200      	movs	r2, #0
 8001f12:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8001f14:	4b17      	ldr	r3, [pc, #92]	; (8001f74 <InitGoingToStartingPosition+0x13c>)
 8001f16:	2200      	movs	r2, #0
 8001f18:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // false = Dropping Down, true = Going up
 8001f1a:	4b17      	ldr	r3, [pc, #92]	; (8001f78 <InitGoingToStartingPosition+0x140>)
 8001f1c:	2201      	movs	r2, #1
 8001f1e:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001f20:	f7ff f9a2 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001f24:	f7ff fd34 	bl	8001990 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8001f28:	4b0e      	ldr	r3, [pc, #56]	; (8001f64 <InitGoingToStartingPosition+0x12c>)
 8001f2a:	681a      	ldr	r2, [r3, #0]
 8001f2c:	4b0e      	ldr	r3, [pc, #56]	; (8001f68 <InitGoingToStartingPosition+0x130>)
 8001f2e:	681b      	ldr	r3, [r3, #0]
 8001f30:	1ad2      	subs	r2, r2, r3
 8001f32:	4b0e      	ldr	r3, [pc, #56]	; (8001f6c <InitGoingToStartingPosition+0x134>)
 8001f34:	681b      	ldr	r3, [r3, #0]
 8001f36:	429a      	cmp	r2, r3
 8001f38:	d10f      	bne.n	8001f5a <InitGoingToStartingPosition+0x122>
			StartAccleratePulling = true;
 8001f3a:	4b0d      	ldr	r3, [pc, #52]	; (8001f70 <InitGoingToStartingPosition+0x138>)
 8001f3c:	2201      	movs	r2, #1
 8001f3e:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage
 8001f40:	4b0e      	ldr	r3, [pc, #56]	; (8001f7c <InitGoingToStartingPosition+0x144>)
 8001f42:	2200      	movs	r2, #0
 8001f44:	701a      	strb	r2, [r3, #0]
			Direction = false;
 8001f46:	4b0b      	ldr	r3, [pc, #44]	; (8001f74 <InitGoingToStartingPosition+0x13c>)
 8001f48:	2200      	movs	r2, #0
 8001f4a:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 8001f4c:	4b0a      	ldr	r3, [pc, #40]	; (8001f78 <InitGoingToStartingPosition+0x140>)
 8001f4e:	2201      	movs	r2, #1
 8001f50:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001f52:	f7ff f989 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001f56:	f7ff fd1b 	bl	8001990 <StartPulseGenerating>
}
 8001f5a:	bf00      	nop
 8001f5c:	bd80      	pop	{r7, pc}
 8001f5e:	bf00      	nop
 8001f60:	20000003 	.word	0x20000003
 8001f64:	200004fc 	.word	0x200004fc
 8001f68:	200004b4 	.word	0x200004b4
 8001f6c:	200004a8 	.word	0x200004a8
 8001f70:	2000043b 	.word	0x2000043b
 8001f74:	20000432 	.word	0x20000432
 8001f78:	20000441 	.word	0x20000441
 8001f7c:	20000435 	.word	0x20000435

08001f80 <InitializeSimulating>:
void InitializeSimulating (uint8_t Mode)
{
 8001f80:	b580      	push	{r7, lr}
 8001f82:	b082      	sub	sp, #8
 8001f84:	af00      	add	r7, sp, #0
 8001f86:	4603      	mov	r3, r0
 8001f88:	71fb      	strb	r3, [r7, #7]
	switch (Mode)
 8001f8a:	79fb      	ldrb	r3, [r7, #7]
 8001f8c:	2b03      	cmp	r3, #3
 8001f8e:	d032      	beq.n	8001ff6 <InitializeSimulating+0x76>
 8001f90:	2b03      	cmp	r3, #3
 8001f92:	dc40      	bgt.n	8002016 <InitializeSimulating+0x96>
 8001f94:	2b01      	cmp	r3, #1
 8001f96:	d002      	beq.n	8001f9e <InitializeSimulating+0x1e>
 8001f98:	2b02      	cmp	r3, #2
 8001f9a:	d01d      	beq.n	8001fd8 <InitializeSimulating+0x58>
			StartPulling = true; // Pulling Stage First
			StartDropping = false;
			StartPulseCmdCounting = false;
			break;
		default:
			break;
 8001f9c:	e03b      	b.n	8002016 <InitializeSimulating+0x96>
			StartSimulating = true;
 8001f9e:	4b20      	ldr	r3, [pc, #128]	; (8002020 <InitializeSimulating+0xa0>)
 8001fa0:	2201      	movs	r2, #1
 8001fa2:	701a      	strb	r2, [r3, #0]
			StartDropping = true;
 8001fa4:	4b1f      	ldr	r3, [pc, #124]	; (8002024 <InitializeSimulating+0xa4>)
 8001fa6:	2201      	movs	r2, #1
 8001fa8:	701a      	strb	r2, [r3, #0]
			StartBraking = false;
 8001faa:	4b1f      	ldr	r3, [pc, #124]	; (8002028 <InitializeSimulating+0xa8>)
 8001fac:	2200      	movs	r2, #0
 8001fae:	701a      	strb	r2, [r3, #0]
			Direction = true; // variable to show the direction, false = move up, true = move down
 8001fb0:	4b1e      	ldr	r3, [pc, #120]	; (800202c <InitializeSimulating+0xac>)
 8001fb2:	2201      	movs	r2, #1
 8001fb4:	701a      	strb	r2, [r3, #0]
			StartPulling = false;
 8001fb6:	4b1e      	ldr	r3, [pc, #120]	; (8002030 <InitializeSimulating+0xb0>)
 8001fb8:	2200      	movs	r2, #0
 8001fba:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8001fbc:	4b1d      	ldr	r3, [pc, #116]	; (8002034 <InitializeSimulating+0xb4>)
 8001fbe:	2200      	movs	r2, #0
 8001fc0:	701a      	strb	r2, [r3, #0]
			StartPulseCmdCounting = false;
 8001fc2:	4b1d      	ldr	r3, [pc, #116]	; (8002038 <InitializeSimulating+0xb8>)
 8001fc4:	2200      	movs	r2, #0
 8001fc6:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8001fc8:	4b1c      	ldr	r3, [pc, #112]	; (800203c <InitializeSimulating+0xbc>)
 8001fca:	2200      	movs	r2, #0
 8001fcc:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001fce:	f7ff f94b 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8001fd2:	f7ff fcdd 	bl	8001990 <StartPulseGenerating>
			break;
 8001fd6:	e01f      	b.n	8002018 <InitializeSimulating+0x98>
			StartSimulating = true;
 8001fd8:	4b11      	ldr	r3, [pc, #68]	; (8002020 <InitializeSimulating+0xa0>)
 8001fda:	2201      	movs	r2, #1
 8001fdc:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 8001fde:	4b11      	ldr	r3, [pc, #68]	; (8002024 <InitializeSimulating+0xa4>)
 8001fe0:	2200      	movs	r2, #0
 8001fe2:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8001fe4:	4b13      	ldr	r3, [pc, #76]	; (8002034 <InitializeSimulating+0xb4>)
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	701a      	strb	r2, [r3, #0]
			PositionPulseCmd = 0;
 8001fea:	4b15      	ldr	r3, [pc, #84]	; (8002040 <InitializeSimulating+0xc0>)
 8001fec:	2200      	movs	r2, #0
 8001fee:	601a      	str	r2, [r3, #0]
			InitGoingToStartingPosition ();
 8001ff0:	f7ff ff22 	bl	8001e38 <InitGoingToStartingPosition>
			break;
 8001ff4:	e010      	b.n	8002018 <InitializeSimulating+0x98>
			StartSimulating = true;
 8001ff6:	4b0a      	ldr	r3, [pc, #40]	; (8002020 <InitializeSimulating+0xa0>)
 8001ff8:	2201      	movs	r2, #1
 8001ffa:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8001ffc:	4b0d      	ldr	r3, [pc, #52]	; (8002034 <InitializeSimulating+0xb4>)
 8001ffe:	2200      	movs	r2, #0
 8002000:	701a      	strb	r2, [r3, #0]
			StartPulling = true; // Pulling Stage First
 8002002:	4b0b      	ldr	r3, [pc, #44]	; (8002030 <InitializeSimulating+0xb0>)
 8002004:	2201      	movs	r2, #1
 8002006:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 8002008:	4b06      	ldr	r3, [pc, #24]	; (8002024 <InitializeSimulating+0xa4>)
 800200a:	2200      	movs	r2, #0
 800200c:	701a      	strb	r2, [r3, #0]
			StartPulseCmdCounting = false;
 800200e:	4b0a      	ldr	r3, [pc, #40]	; (8002038 <InitializeSimulating+0xb8>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
			break;
 8002014:	e000      	b.n	8002018 <InitializeSimulating+0x98>
			break;
 8002016:	bf00      	nop
	}
}
 8002018:	bf00      	nop
 800201a:	3708      	adds	r7, #8
 800201c:	46bd      	mov	sp, r7
 800201e:	bd80      	pop	{r7, pc}
 8002020:	20000431 	.word	0x20000431
 8002024:	2000042f 	.word	0x2000042f
 8002028:	20000435 	.word	0x20000435
 800202c:	20000432 	.word	0x20000432
 8002030:	20000434 	.word	0x20000434
 8002034:	2000043c 	.word	0x2000043c
 8002038:	2000042e 	.word	0x2000042e
 800203c:	20000441 	.word	0x20000441
 8002040:	200004bc 	.word	0x200004bc

08002044 <InitializeRunning>:
// Init variable for running
void InitializeRunning (uint8_t Mode)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	4603      	mov	r3, r0
 800204c:	71fb      	strb	r3, [r7, #7]
	switch (Mode)
 800204e:	79fb      	ldrb	r3, [r7, #7]
 8002050:	2b03      	cmp	r3, #3
 8002052:	d032      	beq.n	80020ba <InitializeRunning+0x76>
 8002054:	2b03      	cmp	r3, #3
 8002056:	dc42      	bgt.n	80020de <InitializeRunning+0x9a>
 8002058:	2b01      	cmp	r3, #1
 800205a:	d002      	beq.n	8002062 <InitializeRunning+0x1e>
 800205c:	2b02      	cmp	r3, #2
 800205e:	d01d      	beq.n	800209c <InitializeRunning+0x58>
			StartDropping = false;
			StartPulseCmdCounting = false;
			InitGoingToStartingPosition ();
			break;
		default:
			break;
 8002060:	e03d      	b.n	80020de <InitializeRunning+0x9a>
			StartRunning = true;
 8002062:	4b21      	ldr	r3, [pc, #132]	; (80020e8 <InitializeRunning+0xa4>)
 8002064:	2201      	movs	r2, #1
 8002066:	701a      	strb	r2, [r3, #0]
			StartDropping = true;
 8002068:	4b20      	ldr	r3, [pc, #128]	; (80020ec <InitializeRunning+0xa8>)
 800206a:	2201      	movs	r2, #1
 800206c:	701a      	strb	r2, [r3, #0]
			StartBraking = false;
 800206e:	4b20      	ldr	r3, [pc, #128]	; (80020f0 <InitializeRunning+0xac>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			Direction = true; // variable to show the direction, false = move up, true = move down
 8002074:	4b1f      	ldr	r3, [pc, #124]	; (80020f4 <InitializeRunning+0xb0>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
			StartPulling = false;
 800207a:	4b1f      	ldr	r3, [pc, #124]	; (80020f8 <InitializeRunning+0xb4>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8002080:	4b1e      	ldr	r3, [pc, #120]	; (80020fc <InitializeRunning+0xb8>)
 8002082:	2200      	movs	r2, #0
 8002084:	701a      	strb	r2, [r3, #0]
			StartPulseCmdCounting = false;
 8002086:	4b1e      	ldr	r3, [pc, #120]	; (8002100 <InitializeRunning+0xbc>)
 8002088:	2200      	movs	r2, #0
 800208a:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 800208c:	4b1d      	ldr	r3, [pc, #116]	; (8002104 <InitializeRunning+0xc0>)
 800208e:	2200      	movs	r2, #0
 8002090:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002092:	f7ff f8e9 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8002096:	f7ff fc7b 	bl	8001990 <StartPulseGenerating>
			break;
 800209a:	e021      	b.n	80020e0 <InitializeRunning+0x9c>
			StartRunning = true;
 800209c:	4b12      	ldr	r3, [pc, #72]	; (80020e8 <InitializeRunning+0xa4>)
 800209e:	2201      	movs	r2, #1
 80020a0:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 80020a2:	4b12      	ldr	r3, [pc, #72]	; (80020ec <InitializeRunning+0xa8>)
 80020a4:	2200      	movs	r2, #0
 80020a6:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 80020a8:	4b14      	ldr	r3, [pc, #80]	; (80020fc <InitializeRunning+0xb8>)
 80020aa:	2200      	movs	r2, #0
 80020ac:	701a      	strb	r2, [r3, #0]
			PositionPulseCmd = 0;
 80020ae:	4b16      	ldr	r3, [pc, #88]	; (8002108 <InitializeRunning+0xc4>)
 80020b0:	2200      	movs	r2, #0
 80020b2:	601a      	str	r2, [r3, #0]
			InitGoingToStartingPosition ();
 80020b4:	f7ff fec0 	bl	8001e38 <InitGoingToStartingPosition>
			break;
 80020b8:	e012      	b.n	80020e0 <InitializeRunning+0x9c>
			StartRunning = true;
 80020ba:	4b0b      	ldr	r3, [pc, #44]	; (80020e8 <InitializeRunning+0xa4>)
 80020bc:	2201      	movs	r2, #1
 80020be:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 80020c0:	4b0e      	ldr	r3, [pc, #56]	; (80020fc <InitializeRunning+0xb8>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
			StartPulling = true; // Pulling Stage Firse
 80020c6:	4b0c      	ldr	r3, [pc, #48]	; (80020f8 <InitializeRunning+0xb4>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 80020cc:	4b07      	ldr	r3, [pc, #28]	; (80020ec <InitializeRunning+0xa8>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
			StartPulseCmdCounting = false;
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <InitializeRunning+0xbc>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();
 80020d8:	f7ff feae 	bl	8001e38 <InitGoingToStartingPosition>
			break;
 80020dc:	e000      	b.n	80020e0 <InitializeRunning+0x9c>
			break;
 80020de:	bf00      	nop
	}
}
 80020e0:	bf00      	nop
 80020e2:	3708      	adds	r7, #8
 80020e4:	46bd      	mov	sp, r7
 80020e6:	bd80      	pop	{r7, pc}
 80020e8:	20000430 	.word	0x20000430
 80020ec:	2000042f 	.word	0x2000042f
 80020f0:	20000435 	.word	0x20000435
 80020f4:	20000432 	.word	0x20000432
 80020f8:	20000434 	.word	0x20000434
 80020fc:	2000043c 	.word	0x2000043c
 8002100:	2000042e 	.word	0x2000042e
 8002104:	20000441 	.word	0x20000441
 8002108:	200004bc 	.word	0x200004bc
 800210c:	00000000 	.word	0x00000000

08002110 <PullingExperiment>:

bool PullingExperiment ()
{
 8002110:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002114:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 8002116:	4b9a      	ldr	r3, [pc, #616]	; (8002380 <PullingExperiment+0x270>)
 8002118:	781b      	ldrb	r3, [r3, #0]
 800211a:	2b00      	cmp	r3, #0
 800211c:	d001      	beq.n	8002122 <PullingExperiment+0x12>
	{
		return true;
 800211e:	2301      	movs	r3, #1
 8002120:	e224      	b.n	800256c <PullingExperiment+0x45c>
	}
	else
	{
		if (!StartAccleratePulling)
 8002122:	4b98      	ldr	r3, [pc, #608]	; (8002384 <PullingExperiment+0x274>)
 8002124:	781b      	ldrb	r3, [r3, #0]
 8002126:	f083 0301 	eor.w	r3, r3, #1
 800212a:	b2db      	uxtb	r3, r3
 800212c:	2b00      	cmp	r3, #0
 800212e:	d02c      	beq.n	800218a <PullingExperiment+0x7a>
		{
			if (CheckGoingToRefPosition(true, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 8002130:	4b95      	ldr	r3, [pc, #596]	; (8002388 <PullingExperiment+0x278>)
 8002132:	681b      	ldr	r3, [r3, #0]
 8002134:	4619      	mov	r1, r3
 8002136:	2001      	movs	r0, #1
 8002138:	f7ff fcfa 	bl	8001b30 <CheckGoingToRefPosition>
 800213c:	4603      	mov	r3, r0
 800213e:	2b00      	cmp	r3, #0
 8002140:	d021      	beq.n	8002186 <PullingExperiment+0x76>
			{
				if (WaitingMiliSecond(5000)) // Wait for 5 seconds = 5000ms
 8002142:	f241 3088 	movw	r0, #5000	; 0x1388
 8002146:	f7ff fc41 	bl	80019cc <WaitingMiliSecond>
 800214a:	4603      	mov	r3, r0
 800214c:	2b00      	cmp	r3, #0
 800214e:	d018      	beq.n	8002182 <PullingExperiment+0x72>
				{
					StartAccleratePulling = true; // turn on flag to start acclerating pulling
 8002150:	4b8c      	ldr	r3, [pc, #560]	; (8002384 <PullingExperiment+0x274>)
 8002152:	2201      	movs	r2, #1
 8002154:	701a      	strb	r2, [r3, #0]
					Direction = false;
 8002156:	4b8d      	ldr	r3, [pc, #564]	; (800238c <PullingExperiment+0x27c>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 800215c:	4b8c      	ldr	r3, [pc, #560]	; (8002390 <PullingExperiment+0x280>)
 800215e:	2200      	movs	r2, #0
 8002160:	701a      	strb	r2, [r3, #0]

					PRIsToggled = true; // true = pulling up.
 8002162:	4b8c      	ldr	r3, [pc, #560]	; (8002394 <PullingExperiment+0x284>)
 8002164:	2201      	movs	r2, #1
 8002166:	701a      	strb	r2, [r3, #0]
					DisableSTOP(); // Disable the stop
 8002168:	f7ff f87e 	bl	8001268 <DisableSTOP>
					StartPulseGenerating();
 800216c:	f7ff fc10 	bl	8001990 <StartPulseGenerating>
					PreAccRef = AccRef;
 8002170:	4b89      	ldr	r3, [pc, #548]	; (8002398 <PullingExperiment+0x288>)
 8002172:	681b      	ldr	r3, [r3, #0]
 8002174:	4a89      	ldr	r2, [pc, #548]	; (800239c <PullingExperiment+0x28c>)
 8002176:	6013      	str	r3, [r2, #0]

					TargetPosition = FlyingPosPulseCmd; // First, go to max-speed point
 8002178:	4b89      	ldr	r3, [pc, #548]	; (80023a0 <PullingExperiment+0x290>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4a89      	ldr	r2, [pc, #548]	; (80023a4 <PullingExperiment+0x294>)
 800217e:	6013      	str	r3, [r2, #0]
 8002180:	e1f3      	b.n	800256a <PullingExperiment+0x45a>

					//RunningTime = 0;
				}
				else return false;
 8002182:	2300      	movs	r3, #0
 8002184:	e1f2      	b.n	800256c <PullingExperiment+0x45c>
			}
			else return false;
 8002186:	2300      	movs	r3, #0
 8002188:	e1f0      	b.n	800256c <PullingExperiment+0x45c>
		}
		else // Start accelerate pulling
		{
			if (!StartBraking) // Accelerating Stage
 800218a:	4b81      	ldr	r3, [pc, #516]	; (8002390 <PullingExperiment+0x280>)
 800218c:	781b      	ldrb	r3, [r3, #0]
 800218e:	f083 0301 	eor.w	r3, r3, #1
 8002192:	b2db      	uxtb	r3, r3
 8002194:	2b00      	cmp	r3, #0
 8002196:	f000 8123 	beq.w	80023e0 <PullingExperiment+0x2d0>
			{
				if (IsReachTargetPosition)
 800219a:	4b83      	ldr	r3, [pc, #524]	; (80023a8 <PullingExperiment+0x298>)
 800219c:	781b      	ldrb	r3, [r3, #0]
 800219e:	2b00      	cmp	r3, #0
 80021a0:	d039      	beq.n	8002216 <PullingExperiment+0x106>
				{
					StartBraking = true;
 80021a2:	4b7b      	ldr	r3, [pc, #492]	; (8002390 <PullingExperiment+0x280>)
 80021a4:	2201      	movs	r2, #1
 80021a6:	701a      	strb	r2, [r3, #0]
					PreAccRef = AccRef;
 80021a8:	4b7b      	ldr	r3, [pc, #492]	; (8002398 <PullingExperiment+0x288>)
 80021aa:	681b      	ldr	r3, [r3, #0]
 80021ac:	4a7b      	ldr	r2, [pc, #492]	; (800239c <PullingExperiment+0x28c>)
 80021ae:	6013      	str	r3, [r2, #0]

					StartPulseCmdCounting = false;
 80021b0:	4b7e      	ldr	r3, [pc, #504]	; (80023ac <PullingExperiment+0x29c>)
 80021b2:	2200      	movs	r2, #0
 80021b4:	701a      	strb	r2, [r3, #0]

					PositionPulseCmd = 0; // Reset the pulse count variable
 80021b6:	4b7e      	ldr	r3, [pc, #504]	; (80023b0 <PullingExperiment+0x2a0>)
 80021b8:	2200      	movs	r2, #0
 80021ba:	601a      	str	r2, [r3, #0]
					TargetPosition = (int)(EncoderResolution*PullingDecelDistance/(2*3.14*DrumRadius));
 80021bc:	4b7d      	ldr	r3, [pc, #500]	; (80023b4 <PullingExperiment+0x2a4>)
 80021be:	881b      	ldrh	r3, [r3, #0]
 80021c0:	ee07 3a90 	vmov	s15, r3
 80021c4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80021c8:	4b7b      	ldr	r3, [pc, #492]	; (80023b8 <PullingExperiment+0x2a8>)
 80021ca:	edd3 7a00 	vldr	s15, [r3]
 80021ce:	ee67 7a27 	vmul.f32	s15, s14, s15
 80021d2:	ee17 0a90 	vmov	r0, s15
 80021d6:	f7fe f9b7 	bl	8000548 <__aeabi_f2d>
 80021da:	4604      	mov	r4, r0
 80021dc:	460d      	mov	r5, r1
 80021de:	4b77      	ldr	r3, [pc, #476]	; (80023bc <PullingExperiment+0x2ac>)
 80021e0:	681b      	ldr	r3, [r3, #0]
 80021e2:	4618      	mov	r0, r3
 80021e4:	f7fe f9b0 	bl	8000548 <__aeabi_f2d>
 80021e8:	a35d      	add	r3, pc, #372	; (adr r3, 8002360 <PullingExperiment+0x250>)
 80021ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80021ee:	f7fe fa03 	bl	80005f8 <__aeabi_dmul>
 80021f2:	4602      	mov	r2, r0
 80021f4:	460b      	mov	r3, r1
 80021f6:	4620      	mov	r0, r4
 80021f8:	4629      	mov	r1, r5
 80021fa:	f7fe fb27 	bl	800084c <__aeabi_ddiv>
 80021fe:	4602      	mov	r2, r0
 8002200:	460b      	mov	r3, r1
 8002202:	4610      	mov	r0, r2
 8002204:	4619      	mov	r1, r3
 8002206:	f7fe fca7 	bl	8000b58 <__aeabi_d2iz>
 800220a:	4603      	mov	r3, r0
 800220c:	4a65      	ldr	r2, [pc, #404]	; (80023a4 <PullingExperiment+0x294>)
 800220e:	6013      	str	r3, [r2, #0]

					IsReachTargetPosition = false; // Reset the flag
 8002210:	4b65      	ldr	r3, [pc, #404]	; (80023a8 <PullingExperiment+0x298>)
 8002212:	2200      	movs	r2, #0
 8002214:	701a      	strb	r2, [r3, #0]
				}
				//RunningTime += SampleTime;

				//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-PullingAccel, PreAccRef); // ramping the reference signal
				//LinearGeneration(&AccRef,-8,-9.6-PullingAccel); // ramping the reference signal
				AccRef = -9.6-PullingAccel;
 8002216:	4b6a      	ldr	r3, [pc, #424]	; (80023c0 <PullingExperiment+0x2b0>)
 8002218:	681b      	ldr	r3, [r3, #0]
 800221a:	4618      	mov	r0, r3
 800221c:	f7fe f994 	bl	8000548 <__aeabi_f2d>
 8002220:	4602      	mov	r2, r0
 8002222:	460b      	mov	r3, r1
 8002224:	a150      	add	r1, pc, #320	; (adr r1, 8002368 <PullingExperiment+0x258>)
 8002226:	e9d1 0100 	ldrd	r0, r1, [r1]
 800222a:	f7fe f82d 	bl	8000288 <__aeabi_dsub>
 800222e:	4602      	mov	r2, r0
 8002230:	460b      	mov	r3, r1
 8002232:	4610      	mov	r0, r2
 8002234:	4619      	mov	r1, r3
 8002236:	f7fe fcd7 	bl	8000be8 <__aeabi_d2f>
 800223a:	4603      	mov	r3, r0
 800223c:	4a56      	ldr	r2, [pc, #344]	; (8002398 <PullingExperiment+0x288>)
 800223e:	6013      	str	r3, [r2, #0]
				// Calculate speed cmd


				if (IsOpenLoopControl) // Use open-loop control
 8002240:	4b60      	ldr	r3, [pc, #384]	; (80023c4 <PullingExperiment+0x2b4>)
 8002242:	781b      	ldrb	r3, [r3, #0]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d073      	beq.n	8002330 <PullingExperiment+0x220>
				{
					//SpeedCmd = LinearGeneration(RunningTime,-PullingEpsilonAcc*10,0,-PullingMaxSpeed,0);// Feedforward term
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term

					//LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);
					SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 8002248:	4b5f      	ldr	r3, [pc, #380]	; (80023c8 <PullingExperiment+0x2b8>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f97b 	bl	8000548 <__aeabi_f2d>
 8002252:	4604      	mov	r4, r0
 8002254:	460d      	mov	r5, r1
 8002256:	4b5d      	ldr	r3, [pc, #372]	; (80023cc <PullingExperiment+0x2bc>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	4618      	mov	r0, r3
 800225c:	f7fe f962 	bl	8000524 <__aeabi_i2d>
 8002260:	a343      	add	r3, pc, #268	; (adr r3, 8002370 <PullingExperiment+0x260>)
 8002262:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002266:	f7fe f9c7 	bl	80005f8 <__aeabi_dmul>
 800226a:	4602      	mov	r2, r0
 800226c:	460b      	mov	r3, r1
 800226e:	4690      	mov	r8, r2
 8002270:	4699      	mov	r9, r3
 8002272:	4b49      	ldr	r3, [pc, #292]	; (8002398 <PullingExperiment+0x288>)
 8002274:	681b      	ldr	r3, [r3, #0]
 8002276:	4618      	mov	r0, r3
 8002278:	f7fe f966 	bl	8000548 <__aeabi_f2d>
 800227c:	a33e      	add	r3, pc, #248	; (adr r3, 8002378 <PullingExperiment+0x268>)
 800227e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002282:	f7fe f803 	bl	800028c <__adddf3>
 8002286:	4602      	mov	r2, r0
 8002288:	460b      	mov	r3, r1
 800228a:	4640      	mov	r0, r8
 800228c:	4649      	mov	r1, r9
 800228e:	f7fe f9b3 	bl	80005f8 <__aeabi_dmul>
 8002292:	4602      	mov	r2, r0
 8002294:	460b      	mov	r3, r1
 8002296:	4610      	mov	r0, r2
 8002298:	4619      	mov	r1, r3
 800229a:	f04f 0200 	mov.w	r2, #0
 800229e:	4b4c      	ldr	r3, [pc, #304]	; (80023d0 <PullingExperiment+0x2c0>)
 80022a0:	f7fe f9aa 	bl	80005f8 <__aeabi_dmul>
 80022a4:	4602      	mov	r2, r0
 80022a6:	460b      	mov	r3, r1
 80022a8:	4690      	mov	r8, r2
 80022aa:	4699      	mov	r9, r3
 80022ac:	4b43      	ldr	r3, [pc, #268]	; (80023bc <PullingExperiment+0x2ac>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	4618      	mov	r0, r3
 80022b2:	f7fe f949 	bl	8000548 <__aeabi_f2d>
 80022b6:	4602      	mov	r2, r0
 80022b8:	460b      	mov	r3, r1
 80022ba:	4640      	mov	r0, r8
 80022bc:	4649      	mov	r1, r9
 80022be:	f7fe fac5 	bl	800084c <__aeabi_ddiv>
 80022c2:	4602      	mov	r2, r0
 80022c4:	460b      	mov	r3, r1
 80022c6:	4620      	mov	r0, r4
 80022c8:	4629      	mov	r1, r5
 80022ca:	f7fd ffdf 	bl	800028c <__adddf3>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	4610      	mov	r0, r2
 80022d4:	4619      	mov	r1, r3
 80022d6:	f7fe fc87 	bl	8000be8 <__aeabi_d2f>
 80022da:	4603      	mov	r3, r0
 80022dc:	4a3a      	ldr	r2, [pc, #232]	; (80023c8 <PullingExperiment+0x2b8>)
 80022de:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -PullingMaxSpeed)
 80022e0:	4b3c      	ldr	r3, [pc, #240]	; (80023d4 <PullingExperiment+0x2c4>)
 80022e2:	881b      	ldrh	r3, [r3, #0]
 80022e4:	425b      	negs	r3, r3
 80022e6:	ee07 3a90 	vmov	s15, r3
 80022ea:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80022ee:	4b36      	ldr	r3, [pc, #216]	; (80023c8 <PullingExperiment+0x2b8>)
 80022f0:	edd3 7a00 	vldr	s15, [r3]
 80022f4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80022f8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80022fc:	db09      	blt.n	8002312 <PullingExperiment+0x202>
						SpeedCmd = -PullingMaxSpeed;
 80022fe:	4b35      	ldr	r3, [pc, #212]	; (80023d4 <PullingExperiment+0x2c4>)
 8002300:	881b      	ldrh	r3, [r3, #0]
 8002302:	425b      	negs	r3, r3
 8002304:	ee07 3a90 	vmov	s15, r3
 8002308:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800230c:	4b2e      	ldr	r3, [pc, #184]	; (80023c8 <PullingExperiment+0x2b8>)
 800230e:	edc3 7a00 	vstr	s15, [r3]
					if (SpeedCmd >= 0)
 8002312:	4b2d      	ldr	r3, [pc, #180]	; (80023c8 <PullingExperiment+0x2b8>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800231c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002320:	db03      	blt.n	800232a <PullingExperiment+0x21a>
						SpeedCmd = 0;
 8002322:	4b29      	ldr	r3, [pc, #164]	; (80023c8 <PullingExperiment+0x2b8>)
 8002324:	f04f 0200 	mov.w	r2, #0
 8002328:	601a      	str	r2, [r3, #0]
					StartPulseCmdCounting = true;
 800232a:	4b20      	ldr	r3, [pc, #128]	; (80023ac <PullingExperiment+0x29c>)
 800232c:	2201      	movs	r2, #1
 800232e:	701a      	strb	r2, [r3, #0]
//					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,-PullingMaxSpeed,0); // Feedforwad
//					//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term
//					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,-PullingMaxSpeed);// Feedforward term
//				}

				if (SpeedCmd != 0)
 8002330:	4b25      	ldr	r3, [pc, #148]	; (80023c8 <PullingExperiment+0x2b8>)
 8002332:	edd3 7a00 	vldr	s15, [r3]
 8002336:	eef5 7a40 	vcmp.f32	s15, #0.0
 800233a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800233e:	f000 8114 	beq.w	800256a <PullingExperiment+0x45a>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8002342:	4b25      	ldr	r3, [pc, #148]	; (80023d8 <PullingExperiment+0x2c8>)
 8002344:	781b      	ldrb	r3, [r3, #0]
 8002346:	4a20      	ldr	r2, [pc, #128]	; (80023c8 <PullingExperiment+0x2b8>)
 8002348:	edd2 7a00 	vldr	s15, [r2]
 800234c:	eeb0 0a67 	vmov.f32	s0, s15
 8002350:	4618      	mov	r0, r3
 8002352:	f7ff fb61 	bl	8001a18 <CalculateTimer3Period>
 8002356:	4603      	mov	r3, r0
 8002358:	b29a      	uxth	r2, r3
 800235a:	4b20      	ldr	r3, [pc, #128]	; (80023dc <PullingExperiment+0x2cc>)
 800235c:	801a      	strh	r2, [r3, #0]
 800235e:	e104      	b.n	800256a <PullingExperiment+0x45a>
 8002360:	51eb851f 	.word	0x51eb851f
 8002364:	40191eb8 	.word	0x40191eb8
 8002368:	33333333 	.word	0x33333333
 800236c:	c0233333 	.word	0xc0233333
 8002370:	d2f1a9fc 	.word	0xd2f1a9fc
 8002374:	3f50624d 	.word	0x3f50624d
 8002378:	33333333 	.word	0x33333333
 800237c:	40233333 	.word	0x40233333
 8002380:	2000043c 	.word	0x2000043c
 8002384:	2000043b 	.word	0x2000043b
 8002388:	200004a8 	.word	0x200004a8
 800238c:	20000432 	.word	0x20000432
 8002390:	20000435 	.word	0x20000435
 8002394:	20000441 	.word	0x20000441
 8002398:	20000010 	.word	0x20000010
 800239c:	20000534 	.word	0x20000534
 80023a0:	200004ac 	.word	0x200004ac
 80023a4:	200004b8 	.word	0x200004b8
 80023a8:	2000043a 	.word	0x2000043a
 80023ac:	2000042e 	.word	0x2000042e
 80023b0:	200004bc 	.word	0x200004bc
 80023b4:	2000000a 	.word	0x2000000a
 80023b8:	2000049c 	.word	0x2000049c
 80023bc:	20000454 	.word	0x20000454
 80023c0:	20000484 	.word	0x20000484
 80023c4:	20000004 	.word	0x20000004
 80023c8:	20000500 	.word	0x20000500
 80023cc:	20000458 	.word	0x20000458
 80023d0:	40240000 	.word	0x40240000
 80023d4:	20000498 	.word	0x20000498
 80023d8:	20000003 	.word	0x20000003
 80023dc:	2000044a 	.word	0x2000044a
			else // Braking Stage
			{
				//RunningTime += SampleTime;
				//AccRef = LinearGeneration(RunningTime,8,PreAccRef, PreAccRef, -9.6+PullingDecel); // ramping the reference signal
				//LinearGeneration(&AccRef,60,-9.6+PullingDecel); // ramping the reference signal
				AccRef = -9.6+PullingDecel;
 80023e0:	4b69      	ldr	r3, [pc, #420]	; (8002588 <PullingExperiment+0x478>)
 80023e2:	681b      	ldr	r3, [r3, #0]
 80023e4:	4618      	mov	r0, r3
 80023e6:	f7fe f8af 	bl	8000548 <__aeabi_f2d>
 80023ea:	a363      	add	r3, pc, #396	; (adr r3, 8002578 <PullingExperiment+0x468>)
 80023ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f0:	f7fd ff4a 	bl	8000288 <__aeabi_dsub>
 80023f4:	4602      	mov	r2, r0
 80023f6:	460b      	mov	r3, r1
 80023f8:	4610      	mov	r0, r2
 80023fa:	4619      	mov	r1, r3
 80023fc:	f7fe fbf4 	bl	8000be8 <__aeabi_d2f>
 8002400:	4603      	mov	r3, r0
 8002402:	4a62      	ldr	r2, [pc, #392]	; (800258c <PullingExperiment+0x47c>)
 8002404:	6013      	str	r3, [r2, #0]
				if (IsOpenLoopControl)
 8002406:	4b62      	ldr	r3, [pc, #392]	; (8002590 <PullingExperiment+0x480>)
 8002408:	781b      	ldrb	r3, [r3, #0]
 800240a:	2b00      	cmp	r3, #0
 800240c:	d070      	beq.n	80024f0 <PullingExperiment+0x3e0>
				{
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,TransitionSpeed,TransitionSpeed,0);
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 800240e:	4b61      	ldr	r3, [pc, #388]	; (8002594 <PullingExperiment+0x484>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f898 	bl	8000548 <__aeabi_f2d>
 8002418:	4604      	mov	r4, r0
 800241a:	460d      	mov	r5, r1
 800241c:	4b5e      	ldr	r3, [pc, #376]	; (8002598 <PullingExperiment+0x488>)
 800241e:	781b      	ldrb	r3, [r3, #0]
 8002420:	4618      	mov	r0, r3
 8002422:	f7fe f87f 	bl	8000524 <__aeabi_i2d>
 8002426:	a356      	add	r3, pc, #344	; (adr r3, 8002580 <PullingExperiment+0x470>)
 8002428:	e9d3 2300 	ldrd	r2, r3, [r3]
 800242c:	f7fe f8e4 	bl	80005f8 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4690      	mov	r8, r2
 8002436:	4699      	mov	r9, r3
 8002438:	4b54      	ldr	r3, [pc, #336]	; (800258c <PullingExperiment+0x47c>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f883 	bl	8000548 <__aeabi_f2d>
 8002442:	a34d      	add	r3, pc, #308	; (adr r3, 8002578 <PullingExperiment+0x468>)
 8002444:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002448:	f7fd ff20 	bl	800028c <__adddf3>
 800244c:	4602      	mov	r2, r0
 800244e:	460b      	mov	r3, r1
 8002450:	4640      	mov	r0, r8
 8002452:	4649      	mov	r1, r9
 8002454:	f7fe f8d0 	bl	80005f8 <__aeabi_dmul>
 8002458:	4602      	mov	r2, r0
 800245a:	460b      	mov	r3, r1
 800245c:	4610      	mov	r0, r2
 800245e:	4619      	mov	r1, r3
 8002460:	f04f 0200 	mov.w	r2, #0
 8002464:	4b4d      	ldr	r3, [pc, #308]	; (800259c <PullingExperiment+0x48c>)
 8002466:	f7fe f8c7 	bl	80005f8 <__aeabi_dmul>
 800246a:	4602      	mov	r2, r0
 800246c:	460b      	mov	r3, r1
 800246e:	4690      	mov	r8, r2
 8002470:	4699      	mov	r9, r3
 8002472:	4b4b      	ldr	r3, [pc, #300]	; (80025a0 <PullingExperiment+0x490>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f866 	bl	8000548 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	4640      	mov	r0, r8
 8002482:	4649      	mov	r1, r9
 8002484:	f7fe f9e2 	bl	800084c <__aeabi_ddiv>
 8002488:	4602      	mov	r2, r0
 800248a:	460b      	mov	r3, r1
 800248c:	4620      	mov	r0, r4
 800248e:	4629      	mov	r1, r5
 8002490:	f7fd fefc 	bl	800028c <__adddf3>
 8002494:	4602      	mov	r2, r0
 8002496:	460b      	mov	r3, r1
 8002498:	4610      	mov	r0, r2
 800249a:	4619      	mov	r1, r3
 800249c:	f7fe fba4 	bl	8000be8 <__aeabi_d2f>
 80024a0:	4603      	mov	r3, r0
 80024a2:	4a3c      	ldr	r2, [pc, #240]	; (8002594 <PullingExperiment+0x484>)
 80024a4:	6013      	str	r3, [r2, #0]

					if (SpeedCmd <= -PullingMaxSpeed)
 80024a6:	4b3f      	ldr	r3, [pc, #252]	; (80025a4 <PullingExperiment+0x494>)
 80024a8:	881b      	ldrh	r3, [r3, #0]
 80024aa:	425b      	negs	r3, r3
 80024ac:	ee07 3a90 	vmov	s15, r3
 80024b0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80024b4:	4b37      	ldr	r3, [pc, #220]	; (8002594 <PullingExperiment+0x484>)
 80024b6:	edd3 7a00 	vldr	s15, [r3]
 80024ba:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80024be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c2:	db09      	blt.n	80024d8 <PullingExperiment+0x3c8>
						SpeedCmd = -PullingMaxSpeed;
 80024c4:	4b37      	ldr	r3, [pc, #220]	; (80025a4 <PullingExperiment+0x494>)
 80024c6:	881b      	ldrh	r3, [r3, #0]
 80024c8:	425b      	negs	r3, r3
 80024ca:	ee07 3a90 	vmov	s15, r3
 80024ce:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80024d2:	4b30      	ldr	r3, [pc, #192]	; (8002594 <PullingExperiment+0x484>)
 80024d4:	edc3 7a00 	vstr	s15, [r3]
					if (SpeedCmd >= 0)
 80024d8:	4b2e      	ldr	r3, [pc, #184]	; (8002594 <PullingExperiment+0x484>)
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80024e2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e6:	db03      	blt.n	80024f0 <PullingExperiment+0x3e0>
						SpeedCmd = 0;
 80024e8:	4b2a      	ldr	r3, [pc, #168]	; (8002594 <PullingExperiment+0x484>)
 80024ea:	f04f 0200 	mov.w	r2, #0
 80024ee:	601a      	str	r2, [r3, #0]
//					SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
//					if (SpeedCmd >= 0)
//						SpeedCmd = 0;
//				}

				if (SpeedCmd != 0)
 80024f0:	4b28      	ldr	r3, [pc, #160]	; (8002594 <PullingExperiment+0x484>)
 80024f2:	edd3 7a00 	vldr	s15, [r3]
 80024f6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	d010      	beq.n	8002522 <PullingExperiment+0x412>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 8002500:	4b29      	ldr	r3, [pc, #164]	; (80025a8 <PullingExperiment+0x498>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	4a23      	ldr	r2, [pc, #140]	; (8002594 <PullingExperiment+0x484>)
 8002506:	edd2 7a00 	vldr	s15, [r2]
 800250a:	eeb0 0a67 	vmov.f32	s0, s15
 800250e:	4618      	mov	r0, r3
 8002510:	f7ff fa82 	bl	8001a18 <CalculateTimer3Period>
 8002514:	4603      	mov	r3, r0
 8002516:	b29a      	uxth	r2, r3
 8002518:	4b24      	ldr	r3, [pc, #144]	; (80025ac <PullingExperiment+0x49c>)
 800251a:	801a      	strh	r2, [r3, #0]
					StartPulseCmdCounting = true;
 800251c:	4b24      	ldr	r3, [pc, #144]	; (80025b0 <PullingExperiment+0x4a0>)
 800251e:	2201      	movs	r2, #1
 8002520:	701a      	strb	r2, [r3, #0]
				}
//				else
//				{
//					StopPulseGenerating();
//				}
				if (IsReachTargetPosition) // Reach the top position
 8002522:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <PullingExperiment+0x4a4>)
 8002524:	781b      	ldrb	r3, [r3, #0]
 8002526:	2b00      	cmp	r3, #0
 8002528:	d01f      	beq.n	800256a <PullingExperiment+0x45a>
				{
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 800252a:	4b1a      	ldr	r3, [pc, #104]	; (8002594 <PullingExperiment+0x484>)
 800252c:	f04f 0200 	mov.w	r2, #0
 8002530:	601a      	str	r2, [r3, #0]

					AccRef = - 9.8;
 8002532:	4b16      	ldr	r3, [pc, #88]	; (800258c <PullingExperiment+0x47c>)
 8002534:	4a20      	ldr	r2, [pc, #128]	; (80025b8 <PullingExperiment+0x4a8>)
 8002536:	601a      	str	r2, [r3, #0]

					StartBraking = false;
 8002538:	4b20      	ldr	r3, [pc, #128]	; (80025bc <PullingExperiment+0x4ac>)
 800253a:	2200      	movs	r2, #0
 800253c:	701a      	strb	r2, [r3, #0]
					StartAccleratePulling = false;
 800253e:	4b20      	ldr	r3, [pc, #128]	; (80025c0 <PullingExperiment+0x4b0>)
 8002540:	2200      	movs	r2, #0
 8002542:	701a      	strb	r2, [r3, #0]
					StopPulseGenerating();
 8002544:	f7ff fa06 	bl	8001954 <StopPulseGenerating>
					CompleteRunning = true; // Set this flag to return true in the next time
 8002548:	4b1e      	ldr	r3, [pc, #120]	; (80025c4 <PullingExperiment+0x4b4>)
 800254a:	2201      	movs	r2, #1
 800254c:	701a      	strb	r2, [r3, #0]

					StartPulseCmdCounting = false;
 800254e:	4b18      	ldr	r3, [pc, #96]	; (80025b0 <PullingExperiment+0x4a0>)
 8002550:	2200      	movs	r2, #0
 8002552:	701a      	strb	r2, [r3, #0]
					PositionPulseCmd = 0;
 8002554:	4b1c      	ldr	r3, [pc, #112]	; (80025c8 <PullingExperiment+0x4b8>)
 8002556:	2200      	movs	r2, #0
 8002558:	601a      	str	r2, [r3, #0]
					TargetPosition = 0;
 800255a:	4b1c      	ldr	r3, [pc, #112]	; (80025cc <PullingExperiment+0x4bc>)
 800255c:	2200      	movs	r2, #0
 800255e:	601a      	str	r2, [r3, #0]
					IsReachTargetPosition = false;
 8002560:	4b14      	ldr	r3, [pc, #80]	; (80025b4 <PullingExperiment+0x4a4>)
 8002562:	2200      	movs	r2, #0
 8002564:	701a      	strb	r2, [r3, #0]
					return true;
 8002566:	2301      	movs	r3, #1
 8002568:	e000      	b.n	800256c <PullingExperiment+0x45c>
				}
			}
		}
		return false;
 800256a:	2300      	movs	r3, #0
	}
}
 800256c:	4618      	mov	r0, r3
 800256e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002572:	bf00      	nop
 8002574:	f3af 8000 	nop.w
 8002578:	33333333 	.word	0x33333333
 800257c:	40233333 	.word	0x40233333
 8002580:	d2f1a9fc 	.word	0xd2f1a9fc
 8002584:	3f50624d 	.word	0x3f50624d
 8002588:	20000488 	.word	0x20000488
 800258c:	20000010 	.word	0x20000010
 8002590:	20000004 	.word	0x20000004
 8002594:	20000500 	.word	0x20000500
 8002598:	20000458 	.word	0x20000458
 800259c:	40240000 	.word	0x40240000
 80025a0:	20000454 	.word	0x20000454
 80025a4:	20000498 	.word	0x20000498
 80025a8:	20000003 	.word	0x20000003
 80025ac:	2000044a 	.word	0x2000044a
 80025b0:	2000042e 	.word	0x2000042e
 80025b4:	2000043a 	.word	0x2000043a
 80025b8:	c11ccccd 	.word	0xc11ccccd
 80025bc:	20000435 	.word	0x20000435
 80025c0:	2000043b 	.word	0x2000043b
 80025c4:	2000043c 	.word	0x2000043c
 80025c8:	200004bc 	.word	0x200004bc
 80025cc:	200004b8 	.word	0x200004b8

080025d0 <SimulatePullAndDrop>:
bool SimulatePullAndDrop ()
{
 80025d0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80025d4:	ed2d 8b02 	vpush	{d8}
 80025d8:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 80025da:	4b77      	ldr	r3, [pc, #476]	; (80027b8 <SimulatePullAndDrop+0x1e8>)
 80025dc:	781b      	ldrb	r3, [r3, #0]
 80025de:	2b00      	cmp	r3, #0
 80025e0:	d001      	beq.n	80025e6 <SimulatePullAndDrop+0x16>
	{
		return true;
 80025e2:	2301      	movs	r3, #1
 80025e4:	e3cf      	b.n	8002d86 <SimulatePullAndDrop+0x7b6>
	}
	else
	{
		// BEGIN PULLING UP
		if (StartPulling) // Pulling Task
 80025e6:	4b75      	ldr	r3, [pc, #468]	; (80027bc <SimulatePullAndDrop+0x1ec>)
 80025e8:	781b      	ldrb	r3, [r3, #0]
 80025ea:	2b00      	cmp	r3, #0
 80025ec:	f000 81d4 	beq.w	8002998 <SimulatePullAndDrop+0x3c8>
		{
			// First Pulling up including going to the initial position
			if (!StartAccleratePulling)
 80025f0:	4b73      	ldr	r3, [pc, #460]	; (80027c0 <SimulatePullAndDrop+0x1f0>)
 80025f2:	781b      	ldrb	r3, [r3, #0]
 80025f4:	f083 0301 	eor.w	r3, r3, #1
 80025f8:	b2db      	uxtb	r3, r3
 80025fa:	2b00      	cmp	r3, #0
 80025fc:	d016      	beq.n	800262c <SimulatePullAndDrop+0x5c>
			{
				StartAccleratePulling = true; // turn on flag to start acclerating pulling
 80025fe:	4b70      	ldr	r3, [pc, #448]	; (80027c0 <SimulatePullAndDrop+0x1f0>)
 8002600:	2201      	movs	r2, #1
 8002602:	701a      	strb	r2, [r3, #0]
				Direction = false; // false = move up to count the position pulse cmd
 8002604:	4b6f      	ldr	r3, [pc, #444]	; (80027c4 <SimulatePullAndDrop+0x1f4>)
 8002606:	2200      	movs	r2, #0
 8002608:	701a      	strb	r2, [r3, #0]
				StartBraking = false;
 800260a:	4b6f      	ldr	r3, [pc, #444]	; (80027c8 <SimulatePullAndDrop+0x1f8>)
 800260c:	2200      	movs	r2, #0
 800260e:	701a      	strb	r2, [r3, #0]

				PreAccRef = AccRef;
 8002610:	4b6e      	ldr	r3, [pc, #440]	; (80027cc <SimulatePullAndDrop+0x1fc>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4a6e      	ldr	r2, [pc, #440]	; (80027d0 <SimulatePullAndDrop+0x200>)
 8002616:	6013      	str	r3, [r2, #0]

				PRIsToggled = true; // true = pulling up.
 8002618:	4b6e      	ldr	r3, [pc, #440]	; (80027d4 <SimulatePullAndDrop+0x204>)
 800261a:	2201      	movs	r2, #1
 800261c:	701a      	strb	r2, [r3, #0]
				StartPulseGenerating();
 800261e:	f7ff f9b7 	bl	8001990 <StartPulseGenerating>

				TargetPosition = FlyingPosPulseCmd; // First, go to max-speed point
 8002622:	4b6d      	ldr	r3, [pc, #436]	; (80027d8 <SimulatePullAndDrop+0x208>)
 8002624:	681b      	ldr	r3, [r3, #0]
 8002626:	4a6d      	ldr	r2, [pc, #436]	; (80027dc <SimulatePullAndDrop+0x20c>)
 8002628:	6013      	str	r3, [r2, #0]
 800262a:	e1b3      	b.n	8002994 <SimulatePullAndDrop+0x3c4>
			}
			else // Start accelerated pulling
			{
				if (!StartBraking) // Accelerating Stage
 800262c:	4b66      	ldr	r3, [pc, #408]	; (80027c8 <SimulatePullAndDrop+0x1f8>)
 800262e:	781b      	ldrb	r3, [r3, #0]
 8002630:	f083 0301 	eor.w	r3, r3, #1
 8002634:	b2db      	uxtb	r3, r3
 8002636:	2b00      	cmp	r3, #0
 8002638:	f000 80e6 	beq.w	8002808 <SimulatePullAndDrop+0x238>
				{
					if(MotorDriver) // HIGEN Driver
 800263c:	4b68      	ldr	r3, [pc, #416]	; (80027e0 <SimulatePullAndDrop+0x210>)
 800263e:	781b      	ldrb	r3, [r3, #0]
 8002640:	2b00      	cmp	r3, #0
 8002642:	d011      	beq.n	8002668 <SimulatePullAndDrop+0x98>
					{
						if ( abs(8*PositionPulseCmd) > abs(TargetPosition)) // 8 is th gear ratio
 8002644:	4b67      	ldr	r3, [pc, #412]	; (80027e4 <SimulatePullAndDrop+0x214>)
 8002646:	681b      	ldr	r3, [r3, #0]
 8002648:	00db      	lsls	r3, r3, #3
 800264a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800264e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002652:	4b62      	ldr	r3, [pc, #392]	; (80027dc <SimulatePullAndDrop+0x20c>)
 8002654:	681b      	ldr	r3, [r3, #0]
 8002656:	2b00      	cmp	r3, #0
 8002658:	bfb8      	it	lt
 800265a:	425b      	neglt	r3, r3
 800265c:	429a      	cmp	r2, r3
 800265e:	dd13      	ble.n	8002688 <SimulatePullAndDrop+0xb8>
							{
								IsReachTargetPosition = true;
 8002660:	4b61      	ldr	r3, [pc, #388]	; (80027e8 <SimulatePullAndDrop+0x218>)
 8002662:	2201      	movs	r2, #1
 8002664:	701a      	strb	r2, [r3, #0]
 8002666:	e00f      	b.n	8002688 <SimulatePullAndDrop+0xb8>
							}
					}
					else // ASDA Driver
					{
						if ( abs(PositionPulseCmd) > abs(TargetPosition))
 8002668:	4b5e      	ldr	r3, [pc, #376]	; (80027e4 <SimulatePullAndDrop+0x214>)
 800266a:	681b      	ldr	r3, [r3, #0]
 800266c:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002670:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002674:	4b59      	ldr	r3, [pc, #356]	; (80027dc <SimulatePullAndDrop+0x20c>)
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	2b00      	cmp	r3, #0
 800267a:	bfb8      	it	lt
 800267c:	425b      	neglt	r3, r3
 800267e:	429a      	cmp	r2, r3
 8002680:	dd02      	ble.n	8002688 <SimulatePullAndDrop+0xb8>
							{
								IsReachTargetPosition = true;
 8002682:	4b59      	ldr	r3, [pc, #356]	; (80027e8 <SimulatePullAndDrop+0x218>)
 8002684:	2201      	movs	r2, #1
 8002686:	701a      	strb	r2, [r3, #0]
							}
					}
					if (IsReachTargetPosition) // Flag to switch stage
 8002688:	4b57      	ldr	r3, [pc, #348]	; (80027e8 <SimulatePullAndDrop+0x218>)
 800268a:	781b      	ldrb	r3, [r3, #0]
 800268c:	2b00      	cmp	r3, #0
 800268e:	d009      	beq.n	80026a4 <SimulatePullAndDrop+0xd4>
					{
						StartBraking = true;
 8002690:	4b4d      	ldr	r3, [pc, #308]	; (80027c8 <SimulatePullAndDrop+0x1f8>)
 8002692:	2201      	movs	r2, #1
 8002694:	701a      	strb	r2, [r3, #0]
						PreAccRef = AccRef;
 8002696:	4b4d      	ldr	r3, [pc, #308]	; (80027cc <SimulatePullAndDrop+0x1fc>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4a4d      	ldr	r2, [pc, #308]	; (80027d0 <SimulatePullAndDrop+0x200>)
 800269c:	6013      	str	r3, [r2, #0]
						IsReachTargetPosition = false; // Reset the flag
 800269e:	4b52      	ldr	r3, [pc, #328]	; (80027e8 <SimulatePullAndDrop+0x218>)
 80026a0:	2200      	movs	r2, #0
 80026a2:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6-PullingAccel;
 80026a4:	4b51      	ldr	r3, [pc, #324]	; (80027ec <SimulatePullAndDrop+0x21c>)
 80026a6:	681b      	ldr	r3, [r3, #0]
 80026a8:	4618      	mov	r0, r3
 80026aa:	f7fd ff4d 	bl	8000548 <__aeabi_f2d>
 80026ae:	4602      	mov	r2, r0
 80026b0:	460b      	mov	r3, r1
 80026b2:	a13b      	add	r1, pc, #236	; (adr r1, 80027a0 <SimulatePullAndDrop+0x1d0>)
 80026b4:	e9d1 0100 	ldrd	r0, r1, [r1]
 80026b8:	f7fd fde6 	bl	8000288 <__aeabi_dsub>
 80026bc:	4602      	mov	r2, r0
 80026be:	460b      	mov	r3, r1
 80026c0:	4610      	mov	r0, r2
 80026c2:	4619      	mov	r1, r3
 80026c4:	f7fe fa90 	bl	8000be8 <__aeabi_d2f>
 80026c8:	4603      	mov	r3, r0
 80026ca:	4a40      	ldr	r2, [pc, #256]	; (80027cc <SimulatePullAndDrop+0x1fc>)
 80026cc:	6013      	str	r3, [r2, #0]

					//LinearGeneration(&AccRef,-16,-9.6-PullingAccel); // ramping the reference signal

					SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 80026ce:	4b48      	ldr	r3, [pc, #288]	; (80027f0 <SimulatePullAndDrop+0x220>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd ff38 	bl	8000548 <__aeabi_f2d>
 80026d8:	4604      	mov	r4, r0
 80026da:	460d      	mov	r5, r1
 80026dc:	4b45      	ldr	r3, [pc, #276]	; (80027f4 <SimulatePullAndDrop+0x224>)
 80026de:	781b      	ldrb	r3, [r3, #0]
 80026e0:	4618      	mov	r0, r3
 80026e2:	f7fd ff1f 	bl	8000524 <__aeabi_i2d>
 80026e6:	a330      	add	r3, pc, #192	; (adr r3, 80027a8 <SimulatePullAndDrop+0x1d8>)
 80026e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026ec:	f7fd ff84 	bl	80005f8 <__aeabi_dmul>
 80026f0:	4602      	mov	r2, r0
 80026f2:	460b      	mov	r3, r1
 80026f4:	4690      	mov	r8, r2
 80026f6:	4699      	mov	r9, r3
 80026f8:	4b34      	ldr	r3, [pc, #208]	; (80027cc <SimulatePullAndDrop+0x1fc>)
 80026fa:	681b      	ldr	r3, [r3, #0]
 80026fc:	4618      	mov	r0, r3
 80026fe:	f7fd ff23 	bl	8000548 <__aeabi_f2d>
 8002702:	a32b      	add	r3, pc, #172	; (adr r3, 80027b0 <SimulatePullAndDrop+0x1e0>)
 8002704:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002708:	f7fd fdc0 	bl	800028c <__adddf3>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4640      	mov	r0, r8
 8002712:	4649      	mov	r1, r9
 8002714:	f7fd ff70 	bl	80005f8 <__aeabi_dmul>
 8002718:	4602      	mov	r2, r0
 800271a:	460b      	mov	r3, r1
 800271c:	4610      	mov	r0, r2
 800271e:	4619      	mov	r1, r3
 8002720:	f04f 0200 	mov.w	r2, #0
 8002724:	4b34      	ldr	r3, [pc, #208]	; (80027f8 <SimulatePullAndDrop+0x228>)
 8002726:	f7fd ff67 	bl	80005f8 <__aeabi_dmul>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	4690      	mov	r8, r2
 8002730:	4699      	mov	r9, r3
 8002732:	4b32      	ldr	r3, [pc, #200]	; (80027fc <SimulatePullAndDrop+0x22c>)
 8002734:	681b      	ldr	r3, [r3, #0]
 8002736:	4618      	mov	r0, r3
 8002738:	f7fd ff06 	bl	8000548 <__aeabi_f2d>
 800273c:	4602      	mov	r2, r0
 800273e:	460b      	mov	r3, r1
 8002740:	4640      	mov	r0, r8
 8002742:	4649      	mov	r1, r9
 8002744:	f7fe f882 	bl	800084c <__aeabi_ddiv>
 8002748:	4602      	mov	r2, r0
 800274a:	460b      	mov	r3, r1
 800274c:	4620      	mov	r0, r4
 800274e:	4629      	mov	r1, r5
 8002750:	f7fd fd9c 	bl	800028c <__adddf3>
 8002754:	4602      	mov	r2, r0
 8002756:	460b      	mov	r3, r1
 8002758:	4610      	mov	r0, r2
 800275a:	4619      	mov	r1, r3
 800275c:	f7fe fa44 	bl	8000be8 <__aeabi_d2f>
 8002760:	4603      	mov	r3, r0
 8002762:	4a23      	ldr	r2, [pc, #140]	; (80027f0 <SimulatePullAndDrop+0x220>)
 8002764:	6013      	str	r3, [r2, #0]
//					if (SpeedCmd <= -PullingMaxSpeed)
//						SpeedCmd = -PullingMaxSpeed;


					if (SpeedCmd != 0)
 8002766:	4b22      	ldr	r3, [pc, #136]	; (80027f0 <SimulatePullAndDrop+0x220>)
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002770:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002774:	f000 810e 	beq.w	8002994 <SimulatePullAndDrop+0x3c4>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002778:	4b19      	ldr	r3, [pc, #100]	; (80027e0 <SimulatePullAndDrop+0x210>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	4a1c      	ldr	r2, [pc, #112]	; (80027f0 <SimulatePullAndDrop+0x220>)
 800277e:	edd2 7a00 	vldr	s15, [r2]
 8002782:	eeb0 0a67 	vmov.f32	s0, s15
 8002786:	4618      	mov	r0, r3
 8002788:	f7ff f946 	bl	8001a18 <CalculateTimer3Period>
 800278c:	4603      	mov	r3, r0
 800278e:	b29a      	uxth	r2, r3
 8002790:	4b1b      	ldr	r3, [pc, #108]	; (8002800 <SimulatePullAndDrop+0x230>)
 8002792:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 8002794:	4b1b      	ldr	r3, [pc, #108]	; (8002804 <SimulatePullAndDrop+0x234>)
 8002796:	2201      	movs	r2, #1
 8002798:	701a      	strb	r2, [r3, #0]
 800279a:	e0fb      	b.n	8002994 <SimulatePullAndDrop+0x3c4>
 800279c:	f3af 8000 	nop.w
 80027a0:	33333333 	.word	0x33333333
 80027a4:	c0233333 	.word	0xc0233333
 80027a8:	d2f1a9fc 	.word	0xd2f1a9fc
 80027ac:	3f50624d 	.word	0x3f50624d
 80027b0:	33333333 	.word	0x33333333
 80027b4:	40233333 	.word	0x40233333
 80027b8:	2000043c 	.word	0x2000043c
 80027bc:	20000434 	.word	0x20000434
 80027c0:	2000043b 	.word	0x2000043b
 80027c4:	20000432 	.word	0x20000432
 80027c8:	20000435 	.word	0x20000435
 80027cc:	20000010 	.word	0x20000010
 80027d0:	20000534 	.word	0x20000534
 80027d4:	20000441 	.word	0x20000441
 80027d8:	200004ac 	.word	0x200004ac
 80027dc:	200004b8 	.word	0x200004b8
 80027e0:	20000003 	.word	0x20000003
 80027e4:	200004bc 	.word	0x200004bc
 80027e8:	2000043a 	.word	0x2000043a
 80027ec:	20000484 	.word	0x20000484
 80027f0:	20000500 	.word	0x20000500
 80027f4:	20000458 	.word	0x20000458
 80027f8:	40240000 	.word	0x40240000
 80027fc:	20000454 	.word	0x20000454
 8002800:	2000044a 	.word	0x2000044a
 8002804:	2000042e 	.word	0x2000042e
				}
				else // Braking Stage
				{
					//AccRef =  = -9.8+PullingDecel;

					LinearGeneration(&AccRef,FlyAccSlope,-9.6+PullingDecel);
 8002808:	4b91      	ldr	r3, [pc, #580]	; (8002a50 <SimulatePullAndDrop+0x480>)
 800280a:	ed93 8a00 	vldr	s16, [r3]
 800280e:	4b91      	ldr	r3, [pc, #580]	; (8002a54 <SimulatePullAndDrop+0x484>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	4618      	mov	r0, r3
 8002814:	f7fd fe98 	bl	8000548 <__aeabi_f2d>
 8002818:	a389      	add	r3, pc, #548	; (adr r3, 8002a40 <SimulatePullAndDrop+0x470>)
 800281a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800281e:	f7fd fd33 	bl	8000288 <__aeabi_dsub>
 8002822:	4602      	mov	r2, r0
 8002824:	460b      	mov	r3, r1
 8002826:	4610      	mov	r0, r2
 8002828:	4619      	mov	r1, r3
 800282a:	f7fe f9dd 	bl	8000be8 <__aeabi_d2f>
 800282e:	4603      	mov	r3, r0
 8002830:	ee00 3a90 	vmov	s1, r3
 8002834:	eeb0 0a48 	vmov.f32	s0, s16
 8002838:	4887      	ldr	r0, [pc, #540]	; (8002a58 <SimulatePullAndDrop+0x488>)
 800283a:	f7ff f82d 	bl	8001898 <LinearGeneration>

					if (IsOpenLoopControl) // Use open-loop control
 800283e:	4b87      	ldr	r3, [pc, #540]	; (8002a5c <SimulatePullAndDrop+0x48c>)
 8002840:	781b      	ldrb	r3, [r3, #0]
 8002842:	2b00      	cmp	r3, #0
 8002844:	d064      	beq.n	8002910 <SimulatePullAndDrop+0x340>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,PullingEpsilonDec,TransitionSpeed,-PullingMaxSpeed,0); // Feedforward term
						//LinearGeneration(&SpeedCmd,(AccRef + 9.6)*10/DrumRadius,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 8002846:	4b86      	ldr	r3, [pc, #536]	; (8002a60 <SimulatePullAndDrop+0x490>)
 8002848:	681b      	ldr	r3, [r3, #0]
 800284a:	4618      	mov	r0, r3
 800284c:	f7fd fe7c 	bl	8000548 <__aeabi_f2d>
 8002850:	4604      	mov	r4, r0
 8002852:	460d      	mov	r5, r1
 8002854:	4b83      	ldr	r3, [pc, #524]	; (8002a64 <SimulatePullAndDrop+0x494>)
 8002856:	781b      	ldrb	r3, [r3, #0]
 8002858:	4618      	mov	r0, r3
 800285a:	f7fd fe63 	bl	8000524 <__aeabi_i2d>
 800285e:	a37a      	add	r3, pc, #488	; (adr r3, 8002a48 <SimulatePullAndDrop+0x478>)
 8002860:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002864:	f7fd fec8 	bl	80005f8 <__aeabi_dmul>
 8002868:	4602      	mov	r2, r0
 800286a:	460b      	mov	r3, r1
 800286c:	4690      	mov	r8, r2
 800286e:	4699      	mov	r9, r3
 8002870:	4b79      	ldr	r3, [pc, #484]	; (8002a58 <SimulatePullAndDrop+0x488>)
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	4618      	mov	r0, r3
 8002876:	f7fd fe67 	bl	8000548 <__aeabi_f2d>
 800287a:	a371      	add	r3, pc, #452	; (adr r3, 8002a40 <SimulatePullAndDrop+0x470>)
 800287c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002880:	f7fd fd04 	bl	800028c <__adddf3>
 8002884:	4602      	mov	r2, r0
 8002886:	460b      	mov	r3, r1
 8002888:	4640      	mov	r0, r8
 800288a:	4649      	mov	r1, r9
 800288c:	f7fd feb4 	bl	80005f8 <__aeabi_dmul>
 8002890:	4602      	mov	r2, r0
 8002892:	460b      	mov	r3, r1
 8002894:	4610      	mov	r0, r2
 8002896:	4619      	mov	r1, r3
 8002898:	f04f 0200 	mov.w	r2, #0
 800289c:	4b72      	ldr	r3, [pc, #456]	; (8002a68 <SimulatePullAndDrop+0x498>)
 800289e:	f7fd feab 	bl	80005f8 <__aeabi_dmul>
 80028a2:	4602      	mov	r2, r0
 80028a4:	460b      	mov	r3, r1
 80028a6:	4690      	mov	r8, r2
 80028a8:	4699      	mov	r9, r3
 80028aa:	4b70      	ldr	r3, [pc, #448]	; (8002a6c <SimulatePullAndDrop+0x49c>)
 80028ac:	681b      	ldr	r3, [r3, #0]
 80028ae:	4618      	mov	r0, r3
 80028b0:	f7fd fe4a 	bl	8000548 <__aeabi_f2d>
 80028b4:	4602      	mov	r2, r0
 80028b6:	460b      	mov	r3, r1
 80028b8:	4640      	mov	r0, r8
 80028ba:	4649      	mov	r1, r9
 80028bc:	f7fd ffc6 	bl	800084c <__aeabi_ddiv>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4620      	mov	r0, r4
 80028c6:	4629      	mov	r1, r5
 80028c8:	f7fd fce0 	bl	800028c <__adddf3>
 80028cc:	4602      	mov	r2, r0
 80028ce:	460b      	mov	r3, r1
 80028d0:	4610      	mov	r0, r2
 80028d2:	4619      	mov	r1, r3
 80028d4:	f7fe f988 	bl	8000be8 <__aeabi_d2f>
 80028d8:	4603      	mov	r3, r0
 80028da:	4a61      	ldr	r2, [pc, #388]	; (8002a60 <SimulatePullAndDrop+0x490>)
 80028dc:	6013      	str	r3, [r2, #0]
						if (SpeedCmd <= -810)
 80028de:	4b60      	ldr	r3, [pc, #384]	; (8002a60 <SimulatePullAndDrop+0x490>)
 80028e0:	edd3 7a00 	vldr	s15, [r3]
 80028e4:	ed9f 7a62 	vldr	s14, [pc, #392]	; 8002a70 <SimulatePullAndDrop+0x4a0>
 80028e8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80028ec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028f0:	d802      	bhi.n	80028f8 <SimulatePullAndDrop+0x328>
							SpeedCmd = -810;
 80028f2:	4b5b      	ldr	r3, [pc, #364]	; (8002a60 <SimulatePullAndDrop+0x490>)
 80028f4:	4a5f      	ldr	r2, [pc, #380]	; (8002a74 <SimulatePullAndDrop+0x4a4>)
 80028f6:	601a      	str	r2, [r3, #0]
						if (SpeedCmd >= 0)
 80028f8:	4b59      	ldr	r3, [pc, #356]	; (8002a60 <SimulatePullAndDrop+0x490>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002902:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002906:	db03      	blt.n	8002910 <SimulatePullAndDrop+0x340>
							SpeedCmd = 0;
 8002908:	4b55      	ldr	r3, [pc, #340]	; (8002a60 <SimulatePullAndDrop+0x490>)
 800290a:	f04f 0200 	mov.w	r2, #0
 800290e:	601a      	str	r2, [r3, #0]
					}
					if (SpeedCmd >= 0)
 8002910:	4b53      	ldr	r3, [pc, #332]	; (8002a60 <SimulatePullAndDrop+0x490>)
 8002912:	edd3 7a00 	vldr	s15, [r3]
 8002916:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800291a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800291e:	db20      	blt.n	8002962 <SimulatePullAndDrop+0x392>
					{
						StopPulseGenerating();
 8002920:	f7ff f818 	bl	8001954 <StopPulseGenerating>

						TotalPullingPulse = abs(PositionPulseCmd);
 8002924:	4b54      	ldr	r3, [pc, #336]	; (8002a78 <SimulatePullAndDrop+0x4a8>)
 8002926:	681b      	ldr	r3, [r3, #0]
 8002928:	2b00      	cmp	r3, #0
 800292a:	bfb8      	it	lt
 800292c:	425b      	neglt	r3, r3
 800292e:	b29a      	uxth	r2, r3
 8002930:	4b52      	ldr	r3, [pc, #328]	; (8002a7c <SimulatePullAndDrop+0x4ac>)
 8002932:	801a      	strh	r2, [r3, #0]

						PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002934:	4b52      	ldr	r3, [pc, #328]	; (8002a80 <SimulatePullAndDrop+0x4b0>)
 8002936:	2200      	movs	r2, #0
 8002938:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd = 0;
 800293a:	4b4f      	ldr	r3, [pc, #316]	; (8002a78 <SimulatePullAndDrop+0x4a8>)
 800293c:	2200      	movs	r2, #0
 800293e:	601a      	str	r2, [r3, #0]
						TargetPosition = BottomFreeDropPulseCmd; // First, go to max-speed point
 8002940:	4b50      	ldr	r3, [pc, #320]	; (8002a84 <SimulatePullAndDrop+0x4b4>)
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a50      	ldr	r2, [pc, #320]	; (8002a88 <SimulatePullAndDrop+0x4b8>)
 8002946:	6013      	str	r3, [r2, #0]
						IsReachTargetPosition = false;
 8002948:	4b50      	ldr	r3, [pc, #320]	; (8002a8c <SimulatePullAndDrop+0x4bc>)
 800294a:	2200      	movs	r2, #0
 800294c:	701a      	strb	r2, [r3, #0]

						SpeedCmd = 0; // reset/ stop
 800294e:	4b44      	ldr	r3, [pc, #272]	; (8002a60 <SimulatePullAndDrop+0x490>)
 8002950:	f04f 0200 	mov.w	r2, #0
 8002954:	601a      	str	r2, [r3, #0]

						StartPulling = false; // flag to finish Pulling Stage
 8002956:	4b4e      	ldr	r3, [pc, #312]	; (8002a90 <SimulatePullAndDrop+0x4c0>)
 8002958:	2200      	movs	r2, #0
 800295a:	701a      	strb	r2, [r3, #0]

						StartWaiting = true; // Switch to waiting stage
 800295c:	4b4d      	ldr	r3, [pc, #308]	; (8002a94 <SimulatePullAndDrop+0x4c4>)
 800295e:	2201      	movs	r2, #1
 8002960:	701a      	strb	r2, [r3, #0]
					}
					if (SpeedCmd != 0)
 8002962:	4b3f      	ldr	r3, [pc, #252]	; (8002a60 <SimulatePullAndDrop+0x490>)
 8002964:	edd3 7a00 	vldr	s15, [r3]
 8002968:	eef5 7a40 	vcmp.f32	s15, #0.0
 800296c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002970:	d010      	beq.n	8002994 <SimulatePullAndDrop+0x3c4>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002972:	4b49      	ldr	r3, [pc, #292]	; (8002a98 <SimulatePullAndDrop+0x4c8>)
 8002974:	781b      	ldrb	r3, [r3, #0]
 8002976:	4a3a      	ldr	r2, [pc, #232]	; (8002a60 <SimulatePullAndDrop+0x490>)
 8002978:	edd2 7a00 	vldr	s15, [r2]
 800297c:	eeb0 0a67 	vmov.f32	s0, s15
 8002980:	4618      	mov	r0, r3
 8002982:	f7ff f849 	bl	8001a18 <CalculateTimer3Period>
 8002986:	4603      	mov	r3, r0
 8002988:	b29a      	uxth	r2, r3
 800298a:	4b44      	ldr	r3, [pc, #272]	; (8002a9c <SimulatePullAndDrop+0x4cc>)
 800298c:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 800298e:	4b44      	ldr	r3, [pc, #272]	; (8002aa0 <SimulatePullAndDrop+0x4d0>)
 8002990:	2201      	movs	r2, #1
 8002992:	701a      	strb	r2, [r3, #0]
						// Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
					}
				}
			}
			return false;
 8002994:	2300      	movs	r3, #0
 8002996:	e1f6      	b.n	8002d86 <SimulatePullAndDrop+0x7b6>
//		// Wait for some time before dropping

// BEGIN Delay before dropping

//
		if (StartWaiting)
 8002998:	4b3e      	ldr	r3, [pc, #248]	; (8002a94 <SimulatePullAndDrop+0x4c4>)
 800299a:	781b      	ldrb	r3, [r3, #0]
 800299c:	2b00      	cmp	r3, #0
 800299e:	d02c      	beq.n	80029fa <SimulatePullAndDrop+0x42a>
		{
			if (WaitingMiliSecond(StoppingTime))
 80029a0:	4b40      	ldr	r3, [pc, #256]	; (8002aa4 <SimulatePullAndDrop+0x4d4>)
 80029a2:	881b      	ldrh	r3, [r3, #0]
 80029a4:	4618      	mov	r0, r3
 80029a6:	f7ff f811 	bl	80019cc <WaitingMiliSecond>
 80029aa:	4603      	mov	r3, r0
 80029ac:	2b00      	cmp	r3, #0
 80029ae:	d022      	beq.n	80029f6 <SimulatePullAndDrop+0x426>
			{
				StartWaiting = false;
 80029b0:	4b38      	ldr	r3, [pc, #224]	; (8002a94 <SimulatePullAndDrop+0x4c4>)
 80029b2:	2200      	movs	r2, #0
 80029b4:	701a      	strb	r2, [r3, #0]

				PreAccRef = AccRef;
 80029b6:	4b28      	ldr	r3, [pc, #160]	; (8002a58 <SimulatePullAndDrop+0x488>)
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	4a3b      	ldr	r2, [pc, #236]	; (8002aa8 <SimulatePullAndDrop+0x4d8>)
 80029bc:	6013      	str	r3, [r2, #0]

				StartDropping = true;
 80029be:	4b3b      	ldr	r3, [pc, #236]	; (8002aac <SimulatePullAndDrop+0x4dc>)
 80029c0:	2201      	movs	r2, #1
 80029c2:	701a      	strb	r2, [r3, #0]
				StartBraking = false;
 80029c4:	4b3a      	ldr	r3, [pc, #232]	; (8002ab0 <SimulatePullAndDrop+0x4e0>)
 80029c6:	2200      	movs	r2, #0
 80029c8:	701a      	strb	r2, [r3, #0]

				Direction = true; // variable to show the direction, false = move up, true = move down
 80029ca:	4b3a      	ldr	r3, [pc, #232]	; (8002ab4 <SimulatePullAndDrop+0x4e4>)
 80029cc:	2201      	movs	r2, #1
 80029ce:	701a      	strb	r2, [r3, #0]
				StartPulling = false;
 80029d0:	4b2f      	ldr	r3, [pc, #188]	; (8002a90 <SimulatePullAndDrop+0x4c0>)
 80029d2:	2200      	movs	r2, #0
 80029d4:	701a      	strb	r2, [r3, #0]
				PositionPulseCmd = 0;
 80029d6:	4b28      	ldr	r3, [pc, #160]	; (8002a78 <SimulatePullAndDrop+0x4a8>)
 80029d8:	2200      	movs	r2, #0
 80029da:	601a      	str	r2, [r3, #0]
				StartPulseCmdCounting = false;
 80029dc:	4b30      	ldr	r3, [pc, #192]	; (8002aa0 <SimulatePullAndDrop+0x4d0>)
 80029de:	2200      	movs	r2, #0
 80029e0:	701a      	strb	r2, [r3, #0]
				PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 80029e2:	4b27      	ldr	r3, [pc, #156]	; (8002a80 <SimulatePullAndDrop+0x4b0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]

				//InitializeRunning(DroppingMode);

				TargetPosition = BottomFreeDropPulseCmd; //
 80029e8:	4b26      	ldr	r3, [pc, #152]	; (8002a84 <SimulatePullAndDrop+0x4b4>)
 80029ea:	681b      	ldr	r3, [r3, #0]
 80029ec:	4a26      	ldr	r2, [pc, #152]	; (8002a88 <SimulatePullAndDrop+0x4b8>)
 80029ee:	6013      	str	r3, [r2, #0]
				StartPulseGenerating();
 80029f0:	f7fe ffce 	bl	8001990 <StartPulseGenerating>
 80029f4:	e001      	b.n	80029fa <SimulatePullAndDrop+0x42a>
				//return false;
			}
			else return false;
 80029f6:	2300      	movs	r3, #0
 80029f8:	e1c5      	b.n	8002d86 <SimulatePullAndDrop+0x7b6>
		}

// END WAITING

		// BEGIN DROPPING TASK
		if (StartDropping)
 80029fa:	4b2c      	ldr	r3, [pc, #176]	; (8002aac <SimulatePullAndDrop+0x4dc>)
 80029fc:	781b      	ldrb	r3, [r3, #0]
 80029fe:	2b00      	cmp	r3, #0
 8002a00:	f000 81c0 	beq.w	8002d84 <SimulatePullAndDrop+0x7b4>
		{
				// ACCLERATING DROPPING STAGE
				if (!StartBraking) // Accelerating Stage
 8002a04:	4b2a      	ldr	r3, [pc, #168]	; (8002ab0 <SimulatePullAndDrop+0x4e0>)
 8002a06:	781b      	ldrb	r3, [r3, #0]
 8002a08:	f083 0301 	eor.w	r3, r3, #1
 8002a0c:	b2db      	uxtb	r3, r3
 8002a0e:	2b00      	cmp	r3, #0
 8002a10:	f000 8104 	beq.w	8002c1c <SimulatePullAndDrop+0x64c>
				{
					if(MotorDriver) // HIGEN Driver
 8002a14:	4b20      	ldr	r3, [pc, #128]	; (8002a98 <SimulatePullAndDrop+0x4c8>)
 8002a16:	781b      	ldrb	r3, [r3, #0]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d04d      	beq.n	8002ab8 <SimulatePullAndDrop+0x4e8>
					{
						if ( abs(8*PositionPulseCmd) > abs(TargetPosition)) // 8 is th gear ratio
 8002a1c:	4b16      	ldr	r3, [pc, #88]	; (8002a78 <SimulatePullAndDrop+0x4a8>)
 8002a1e:	681b      	ldr	r3, [r3, #0]
 8002a20:	00db      	lsls	r3, r3, #3
 8002a22:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002a26:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002a2a:	4b17      	ldr	r3, [pc, #92]	; (8002a88 <SimulatePullAndDrop+0x4b8>)
 8002a2c:	681b      	ldr	r3, [r3, #0]
 8002a2e:	2b00      	cmp	r3, #0
 8002a30:	bfb8      	it	lt
 8002a32:	425b      	neglt	r3, r3
 8002a34:	429a      	cmp	r2, r3
 8002a36:	dd4f      	ble.n	8002ad8 <SimulatePullAndDrop+0x508>
						{
							IsReachTargetPosition = true;
 8002a38:	4b14      	ldr	r3, [pc, #80]	; (8002a8c <SimulatePullAndDrop+0x4bc>)
 8002a3a:	2201      	movs	r2, #1
 8002a3c:	701a      	strb	r2, [r3, #0]
 8002a3e:	e04b      	b.n	8002ad8 <SimulatePullAndDrop+0x508>
 8002a40:	33333333 	.word	0x33333333
 8002a44:	40233333 	.word	0x40233333
 8002a48:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a4c:	3f50624d 	.word	0x3f50624d
 8002a50:	2000052c 	.word	0x2000052c
 8002a54:	20000488 	.word	0x20000488
 8002a58:	20000010 	.word	0x20000010
 8002a5c:	20000004 	.word	0x20000004
 8002a60:	20000500 	.word	0x20000500
 8002a64:	20000458 	.word	0x20000458
 8002a68:	40240000 	.word	0x40240000
 8002a6c:	20000454 	.word	0x20000454
 8002a70:	c44a8000 	.word	0xc44a8000
 8002a74:	c44a8000 	.word	0xc44a8000
 8002a78:	200004bc 	.word	0x200004bc
 8002a7c:	20000450 	.word	0x20000450
 8002a80:	20000441 	.word	0x20000441
 8002a84:	200004b0 	.word	0x200004b0
 8002a88:	200004b8 	.word	0x200004b8
 8002a8c:	2000043a 	.word	0x2000043a
 8002a90:	20000434 	.word	0x20000434
 8002a94:	20000439 	.word	0x20000439
 8002a98:	20000003 	.word	0x20000003
 8002a9c:	2000044a 	.word	0x2000044a
 8002aa0:	2000042e 	.word	0x2000042e
 8002aa4:	2000045a 	.word	0x2000045a
 8002aa8:	20000534 	.word	0x20000534
 8002aac:	2000042f 	.word	0x2000042f
 8002ab0:	20000435 	.word	0x20000435
 8002ab4:	20000432 	.word	0x20000432
						}
					}
					else // ASDA Driver
					{
						if ( abs(PositionPulseCmd) > abs(TargetPosition))
 8002ab8:	4bbd      	ldr	r3, [pc, #756]	; (8002db0 <SimulatePullAndDrop+0x7e0>)
 8002aba:	681b      	ldr	r3, [r3, #0]
 8002abc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002ac0:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002ac4:	4bbb      	ldr	r3, [pc, #748]	; (8002db4 <SimulatePullAndDrop+0x7e4>)
 8002ac6:	681b      	ldr	r3, [r3, #0]
 8002ac8:	2b00      	cmp	r3, #0
 8002aca:	bfb8      	it	lt
 8002acc:	425b      	neglt	r3, r3
 8002ace:	429a      	cmp	r2, r3
 8002ad0:	dd02      	ble.n	8002ad8 <SimulatePullAndDrop+0x508>
						{
							IsReachTargetPosition = true;
 8002ad2:	4bb9      	ldr	r3, [pc, #740]	; (8002db8 <SimulatePullAndDrop+0x7e8>)
 8002ad4:	2201      	movs	r2, #1
 8002ad6:	701a      	strb	r2, [r3, #0]
						}
					}
					if (IsReachTargetPosition) // Reach dropping distance
 8002ad8:	4bb7      	ldr	r3, [pc, #732]	; (8002db8 <SimulatePullAndDrop+0x7e8>)
 8002ada:	781b      	ldrb	r3, [r3, #0]
 8002adc:	2b00      	cmp	r3, #0
 8002ade:	d008      	beq.n	8002af2 <SimulatePullAndDrop+0x522>
					{
						StartBraking = true;
 8002ae0:	4bb6      	ldr	r3, [pc, #728]	; (8002dbc <SimulatePullAndDrop+0x7ec>)
 8002ae2:	2201      	movs	r2, #1
 8002ae4:	701a      	strb	r2, [r3, #0]

						StartPulseCmdCounting = false;
 8002ae6:	4bb6      	ldr	r3, [pc, #728]	; (8002dc0 <SimulatePullAndDrop+0x7f0>)
 8002ae8:	2200      	movs	r2, #0
 8002aea:	701a      	strb	r2, [r3, #0]

						//PositionPulseCmd = 0; //????
						//TargetPosition = 0;

						//TargetPosition = DroppingDecelPulseCmd;
						IsReachTargetPosition = false;
 8002aec:	4bb2      	ldr	r3, [pc, #712]	; (8002db8 <SimulatePullAndDrop+0x7e8>)
 8002aee:	2200      	movs	r2, #0
 8002af0:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6+DroppingAccel;
 8002af2:	4bb4      	ldr	r3, [pc, #720]	; (8002dc4 <SimulatePullAndDrop+0x7f4>)
 8002af4:	681b      	ldr	r3, [r3, #0]
 8002af6:	4618      	mov	r0, r3
 8002af8:	f7fd fd26 	bl	8000548 <__aeabi_f2d>
 8002afc:	a3a6      	add	r3, pc, #664	; (adr r3, 8002d98 <SimulatePullAndDrop+0x7c8>)
 8002afe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b02:	f7fd fbc1 	bl	8000288 <__aeabi_dsub>
 8002b06:	4602      	mov	r2, r0
 8002b08:	460b      	mov	r3, r1
 8002b0a:	4610      	mov	r0, r2
 8002b0c:	4619      	mov	r1, r3
 8002b0e:	f7fe f86b 	bl	8000be8 <__aeabi_d2f>
 8002b12:	4603      	mov	r3, r0
 8002b14:	4aac      	ldr	r2, [pc, #688]	; (8002dc8 <SimulatePullAndDrop+0x7f8>)
 8002b16:	6013      	str	r3, [r2, #0]

					if (IsOpenLoopControl) // Use open-loop control
 8002b18:	4bac      	ldr	r3, [pc, #688]	; (8002dcc <SimulatePullAndDrop+0x7fc>)
 8002b1a:	781b      	ldrb	r3, [r3, #0]
 8002b1c:	2b00      	cmp	r3, #0
 8002b1e:	d062      	beq.n	8002be6 <SimulatePullAndDrop+0x616>
					{
						SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8002b20:	4bab      	ldr	r3, [pc, #684]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002b22:	681b      	ldr	r3, [r3, #0]
 8002b24:	4618      	mov	r0, r3
 8002b26:	f7fd fd0f 	bl	8000548 <__aeabi_f2d>
 8002b2a:	4604      	mov	r4, r0
 8002b2c:	460d      	mov	r5, r1
 8002b2e:	4ba9      	ldr	r3, [pc, #676]	; (8002dd4 <SimulatePullAndDrop+0x804>)
 8002b30:	781b      	ldrb	r3, [r3, #0]
 8002b32:	4618      	mov	r0, r3
 8002b34:	f7fd fcf6 	bl	8000524 <__aeabi_i2d>
 8002b38:	a399      	add	r3, pc, #612	; (adr r3, 8002da0 <SimulatePullAndDrop+0x7d0>)
 8002b3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b3e:	f7fd fd5b 	bl	80005f8 <__aeabi_dmul>
 8002b42:	4602      	mov	r2, r0
 8002b44:	460b      	mov	r3, r1
 8002b46:	4690      	mov	r8, r2
 8002b48:	4699      	mov	r9, r3
 8002b4a:	4b9f      	ldr	r3, [pc, #636]	; (8002dc8 <SimulatePullAndDrop+0x7f8>)
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	4618      	mov	r0, r3
 8002b50:	f7fd fcfa 	bl	8000548 <__aeabi_f2d>
 8002b54:	a390      	add	r3, pc, #576	; (adr r3, 8002d98 <SimulatePullAndDrop+0x7c8>)
 8002b56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b5a:	f7fd fb97 	bl	800028c <__adddf3>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4640      	mov	r0, r8
 8002b64:	4649      	mov	r1, r9
 8002b66:	f7fd fd47 	bl	80005f8 <__aeabi_dmul>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f04f 0200 	mov.w	r2, #0
 8002b76:	4b98      	ldr	r3, [pc, #608]	; (8002dd8 <SimulatePullAndDrop+0x808>)
 8002b78:	f7fd fd3e 	bl	80005f8 <__aeabi_dmul>
 8002b7c:	4602      	mov	r2, r0
 8002b7e:	460b      	mov	r3, r1
 8002b80:	4690      	mov	r8, r2
 8002b82:	4699      	mov	r9, r3
 8002b84:	4b95      	ldr	r3, [pc, #596]	; (8002ddc <SimulatePullAndDrop+0x80c>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4618      	mov	r0, r3
 8002b8a:	f7fd fcdd 	bl	8000548 <__aeabi_f2d>
 8002b8e:	4602      	mov	r2, r0
 8002b90:	460b      	mov	r3, r1
 8002b92:	4640      	mov	r0, r8
 8002b94:	4649      	mov	r1, r9
 8002b96:	f7fd fe59 	bl	800084c <__aeabi_ddiv>
 8002b9a:	4602      	mov	r2, r0
 8002b9c:	460b      	mov	r3, r1
 8002b9e:	4620      	mov	r0, r4
 8002ba0:	4629      	mov	r1, r5
 8002ba2:	f7fd fb73 	bl	800028c <__adddf3>
 8002ba6:	4602      	mov	r2, r0
 8002ba8:	460b      	mov	r3, r1
 8002baa:	4610      	mov	r0, r2
 8002bac:	4619      	mov	r1, r3
 8002bae:	f7fe f81b 	bl	8000be8 <__aeabi_d2f>
 8002bb2:	4603      	mov	r3, r0
 8002bb4:	4a86      	ldr	r2, [pc, #536]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002bb6:	6013      	str	r3, [r2, #0]
						if (SpeedCmd >= DroppingMaxSpeed) // Saturation
 8002bb8:	4b89      	ldr	r3, [pc, #548]	; (8002de0 <SimulatePullAndDrop+0x810>)
 8002bba:	881b      	ldrh	r3, [r3, #0]
 8002bbc:	ee07 3a90 	vmov	s15, r3
 8002bc0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002bc4:	4b82      	ldr	r3, [pc, #520]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002bc6:	edd3 7a00 	vldr	s15, [r3]
 8002bca:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002bce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bd2:	d808      	bhi.n	8002be6 <SimulatePullAndDrop+0x616>
							SpeedCmd = DroppingMaxSpeed;
 8002bd4:	4b82      	ldr	r3, [pc, #520]	; (8002de0 <SimulatePullAndDrop+0x810>)
 8002bd6:	881b      	ldrh	r3, [r3, #0]
 8002bd8:	ee07 3a90 	vmov	s15, r3
 8002bdc:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002be0:	4b7b      	ldr	r3, [pc, #492]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002be2:	edc3 7a00 	vstr	s15, [r3]
					}

					if (SpeedCmd != 0)
 8002be6:	4b7a      	ldr	r3, [pc, #488]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002be8:	edd3 7a00 	vldr	s15, [r3]
 8002bec:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bf0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf4:	f000 80c6 	beq.w	8002d84 <SimulatePullAndDrop+0x7b4>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002bf8:	4b7a      	ldr	r3, [pc, #488]	; (8002de4 <SimulatePullAndDrop+0x814>)
 8002bfa:	781b      	ldrb	r3, [r3, #0]
 8002bfc:	4a74      	ldr	r2, [pc, #464]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002bfe:	edd2 7a00 	vldr	s15, [r2]
 8002c02:	eeb0 0a67 	vmov.f32	s0, s15
 8002c06:	4618      	mov	r0, r3
 8002c08:	f7fe ff06 	bl	8001a18 <CalculateTimer3Period>
 8002c0c:	4603      	mov	r3, r0
 8002c0e:	b29a      	uxth	r2, r3
 8002c10:	4b75      	ldr	r3, [pc, #468]	; (8002de8 <SimulatePullAndDrop+0x818>)
 8002c12:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 8002c14:	4b6a      	ldr	r3, [pc, #424]	; (8002dc0 <SimulatePullAndDrop+0x7f0>)
 8002c16:	2201      	movs	r2, #1
 8002c18:	701a      	strb	r2, [r3, #0]
 8002c1a:	e0b3      	b.n	8002d84 <SimulatePullAndDrop+0x7b4>

				// BEGIN BRAKING STAGE
				else
				{

					AccRef = -9.6-DroppingDecel;
 8002c1c:	4b73      	ldr	r3, [pc, #460]	; (8002dec <SimulatePullAndDrop+0x81c>)
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	4618      	mov	r0, r3
 8002c22:	f7fd fc91 	bl	8000548 <__aeabi_f2d>
 8002c26:	4602      	mov	r2, r0
 8002c28:	460b      	mov	r3, r1
 8002c2a:	a15f      	add	r1, pc, #380	; (adr r1, 8002da8 <SimulatePullAndDrop+0x7d8>)
 8002c2c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002c30:	f7fd fb2a 	bl	8000288 <__aeabi_dsub>
 8002c34:	4602      	mov	r2, r0
 8002c36:	460b      	mov	r3, r1
 8002c38:	4610      	mov	r0, r2
 8002c3a:	4619      	mov	r1, r3
 8002c3c:	f7fd ffd4 	bl	8000be8 <__aeabi_d2f>
 8002c40:	4603      	mov	r3, r0
 8002c42:	4a61      	ldr	r2, [pc, #388]	; (8002dc8 <SimulatePullAndDrop+0x7f8>)
 8002c44:	6013      	str	r3, [r2, #0]
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8002c46:	4b62      	ldr	r3, [pc, #392]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002c48:	681b      	ldr	r3, [r3, #0]
 8002c4a:	4618      	mov	r0, r3
 8002c4c:	f7fd fc7c 	bl	8000548 <__aeabi_f2d>
 8002c50:	4604      	mov	r4, r0
 8002c52:	460d      	mov	r5, r1
 8002c54:	4b5f      	ldr	r3, [pc, #380]	; (8002dd4 <SimulatePullAndDrop+0x804>)
 8002c56:	781b      	ldrb	r3, [r3, #0]
 8002c58:	4618      	mov	r0, r3
 8002c5a:	f7fd fc63 	bl	8000524 <__aeabi_i2d>
 8002c5e:	a350      	add	r3, pc, #320	; (adr r3, 8002da0 <SimulatePullAndDrop+0x7d0>)
 8002c60:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c64:	f7fd fcc8 	bl	80005f8 <__aeabi_dmul>
 8002c68:	4602      	mov	r2, r0
 8002c6a:	460b      	mov	r3, r1
 8002c6c:	4690      	mov	r8, r2
 8002c6e:	4699      	mov	r9, r3
 8002c70:	4b55      	ldr	r3, [pc, #340]	; (8002dc8 <SimulatePullAndDrop+0x7f8>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4618      	mov	r0, r3
 8002c76:	f7fd fc67 	bl	8000548 <__aeabi_f2d>
 8002c7a:	a347      	add	r3, pc, #284	; (adr r3, 8002d98 <SimulatePullAndDrop+0x7c8>)
 8002c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002c80:	f7fd fb04 	bl	800028c <__adddf3>
 8002c84:	4602      	mov	r2, r0
 8002c86:	460b      	mov	r3, r1
 8002c88:	4640      	mov	r0, r8
 8002c8a:	4649      	mov	r1, r9
 8002c8c:	f7fd fcb4 	bl	80005f8 <__aeabi_dmul>
 8002c90:	4602      	mov	r2, r0
 8002c92:	460b      	mov	r3, r1
 8002c94:	4610      	mov	r0, r2
 8002c96:	4619      	mov	r1, r3
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	4b4e      	ldr	r3, [pc, #312]	; (8002dd8 <SimulatePullAndDrop+0x808>)
 8002c9e:	f7fd fcab 	bl	80005f8 <__aeabi_dmul>
 8002ca2:	4602      	mov	r2, r0
 8002ca4:	460b      	mov	r3, r1
 8002ca6:	4690      	mov	r8, r2
 8002ca8:	4699      	mov	r9, r3
 8002caa:	4b4c      	ldr	r3, [pc, #304]	; (8002ddc <SimulatePullAndDrop+0x80c>)
 8002cac:	681b      	ldr	r3, [r3, #0]
 8002cae:	4618      	mov	r0, r3
 8002cb0:	f7fd fc4a 	bl	8000548 <__aeabi_f2d>
 8002cb4:	4602      	mov	r2, r0
 8002cb6:	460b      	mov	r3, r1
 8002cb8:	4640      	mov	r0, r8
 8002cba:	4649      	mov	r1, r9
 8002cbc:	f7fd fdc6 	bl	800084c <__aeabi_ddiv>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4620      	mov	r0, r4
 8002cc6:	4629      	mov	r1, r5
 8002cc8:	f7fd fae0 	bl	800028c <__adddf3>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4610      	mov	r0, r2
 8002cd2:	4619      	mov	r1, r3
 8002cd4:	f7fd ff88 	bl	8000be8 <__aeabi_d2f>
 8002cd8:	4603      	mov	r3, r0
 8002cda:	4a3d      	ldr	r2, [pc, #244]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002cdc:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= 0)
 8002cde:	4b3c      	ldr	r3, [pc, #240]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002ce0:	edd3 7a00 	vldr	s15, [r3]
 8002ce4:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ce8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cec:	d803      	bhi.n	8002cf6 <SimulatePullAndDrop+0x726>
						SpeedCmd = 0;
 8002cee:	4b38      	ldr	r3, [pc, #224]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002cf0:	f04f 0200 	mov.w	r2, #0
 8002cf4:	601a      	str	r2, [r3, #0]

					if (SpeedCmd != 0)
 8002cf6:	4b36      	ldr	r3, [pc, #216]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002cf8:	edd3 7a00 	vldr	s15, [r3]
 8002cfc:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002d00:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d04:	d010      	beq.n	8002d28 <SimulatePullAndDrop+0x758>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002d06:	4b37      	ldr	r3, [pc, #220]	; (8002de4 <SimulatePullAndDrop+0x814>)
 8002d08:	781b      	ldrb	r3, [r3, #0]
 8002d0a:	4a31      	ldr	r2, [pc, #196]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002d0c:	edd2 7a00 	vldr	s15, [r2]
 8002d10:	eeb0 0a67 	vmov.f32	s0, s15
 8002d14:	4618      	mov	r0, r3
 8002d16:	f7fe fe7f 	bl	8001a18 <CalculateTimer3Period>
 8002d1a:	4603      	mov	r3, r0
 8002d1c:	b29a      	uxth	r2, r3
 8002d1e:	4b32      	ldr	r3, [pc, #200]	; (8002de8 <SimulatePullAndDrop+0x818>)
 8002d20:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 8002d22:	4b27      	ldr	r3, [pc, #156]	; (8002dc0 <SimulatePullAndDrop+0x7f0>)
 8002d24:	2201      	movs	r2, #1
 8002d26:	701a      	strb	r2, [r3, #0]
					}

					if (SpeedCmd <= 0 || IsReachTargetPosition) // Stop braking
 8002d28:	4b29      	ldr	r3, [pc, #164]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002d2a:	edd3 7a00 	vldr	s15, [r3]
 8002d2e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002d32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d36:	d903      	bls.n	8002d40 <SimulatePullAndDrop+0x770>
 8002d38:	4b1f      	ldr	r3, [pc, #124]	; (8002db8 <SimulatePullAndDrop+0x7e8>)
 8002d3a:	781b      	ldrb	r3, [r3, #0]
 8002d3c:	2b00      	cmp	r3, #0
 8002d3e:	d021      	beq.n	8002d84 <SimulatePullAndDrop+0x7b4>
					{
						//RunningTime = 0;
						SpeedCmd = 0; // reset/ stop
 8002d40:	4b23      	ldr	r3, [pc, #140]	; (8002dd0 <SimulatePullAndDrop+0x800>)
 8002d42:	f04f 0200 	mov.w	r2, #0
 8002d46:	601a      	str	r2, [r3, #0]
						StartPulseCmdCounting = false;
 8002d48:	4b1d      	ldr	r3, [pc, #116]	; (8002dc0 <SimulatePullAndDrop+0x7f0>)
 8002d4a:	2200      	movs	r2, #0
 8002d4c:	701a      	strb	r2, [r3, #0]

						TotalDroppingPulse = abs(PositionPulseCmd);
 8002d4e:	4b18      	ldr	r3, [pc, #96]	; (8002db0 <SimulatePullAndDrop+0x7e0>)
 8002d50:	681b      	ldr	r3, [r3, #0]
 8002d52:	2b00      	cmp	r3, #0
 8002d54:	bfb8      	it	lt
 8002d56:	425b      	neglt	r3, r3
 8002d58:	b29a      	uxth	r2, r3
 8002d5a:	4b25      	ldr	r3, [pc, #148]	; (8002df0 <SimulatePullAndDrop+0x820>)
 8002d5c:	801a      	strh	r2, [r3, #0]
						PositionPulseCmd = 0;
 8002d5e:	4b14      	ldr	r3, [pc, #80]	; (8002db0 <SimulatePullAndDrop+0x7e0>)
 8002d60:	2200      	movs	r2, #0
 8002d62:	601a      	str	r2, [r3, #0]

						AccRef = - 9.6;
 8002d64:	4b18      	ldr	r3, [pc, #96]	; (8002dc8 <SimulatePullAndDrop+0x7f8>)
 8002d66:	4a23      	ldr	r2, [pc, #140]	; (8002df4 <SimulatePullAndDrop+0x824>)
 8002d68:	601a      	str	r2, [r3, #0]

						StartDropping = false; // finish dropping
 8002d6a:	4b23      	ldr	r3, [pc, #140]	; (8002df8 <SimulatePullAndDrop+0x828>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <SimulatePullAndDrop+0x7ec>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	701a      	strb	r2, [r3, #0]
						StopPulseGenerating();
 8002d76:	f7fe fded 	bl	8001954 <StopPulseGenerating>
						CompleteRunning = true;
 8002d7a:	4b20      	ldr	r3, [pc, #128]	; (8002dfc <SimulatePullAndDrop+0x82c>)
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	701a      	strb	r2, [r3, #0]
						return true;
 8002d80:	2301      	movs	r3, #1
 8002d82:	e000      	b.n	8002d86 <SimulatePullAndDrop+0x7b6>
					}
				}
				// END BRAKING STAGE
		}
		// END DROPPING TASK.
		return false;
 8002d84:	2300      	movs	r3, #0
	}
}
 8002d86:	4618      	mov	r0, r3
 8002d88:	46bd      	mov	sp, r7
 8002d8a:	ecbd 8b02 	vpop	{d8}
 8002d8e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002d92:	bf00      	nop
 8002d94:	f3af 8000 	nop.w
 8002d98:	33333333 	.word	0x33333333
 8002d9c:	40233333 	.word	0x40233333
 8002da0:	d2f1a9fc 	.word	0xd2f1a9fc
 8002da4:	3f50624d 	.word	0x3f50624d
 8002da8:	33333333 	.word	0x33333333
 8002dac:	c0233333 	.word	0xc0233333
 8002db0:	200004bc 	.word	0x200004bc
 8002db4:	200004b8 	.word	0x200004b8
 8002db8:	2000043a 	.word	0x2000043a
 8002dbc:	20000435 	.word	0x20000435
 8002dc0:	2000042e 	.word	0x2000042e
 8002dc4:	20000460 	.word	0x20000460
 8002dc8:	20000010 	.word	0x20000010
 8002dcc:	20000004 	.word	0x20000004
 8002dd0:	20000500 	.word	0x20000500
 8002dd4:	20000458 	.word	0x20000458
 8002dd8:	40240000 	.word	0x40240000
 8002ddc:	20000454 	.word	0x20000454
 8002de0:	20000478 	.word	0x20000478
 8002de4:	20000003 	.word	0x20000003
 8002de8:	2000044a 	.word	0x2000044a
 8002dec:	20000464 	.word	0x20000464
 8002df0:	20000452 	.word	0x20000452
 8002df4:	c119999a 	.word	0xc119999a
 8002df8:	2000042f 	.word	0x2000042f
 8002dfc:	2000043c 	.word	0x2000043c

08002e00 <PullAndDrop>:
bool PullAndDrop ()
{
 8002e00:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002e04:	ed2d 8b02 	vpush	{d8}
 8002e08:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 8002e0a:	4bb1      	ldr	r3, [pc, #708]	; (80030d0 <PullAndDrop+0x2d0>)
 8002e0c:	781b      	ldrb	r3, [r3, #0]
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d002      	beq.n	8002e18 <PullAndDrop+0x18>
	{
		return true;
 8002e12:	2301      	movs	r3, #1
 8002e14:	f000 bc4a 	b.w	80036ac <PullAndDrop+0x8ac>
	}
	else
	{
		// BEGIN PULLING UP
		if (StartPulling && !StartDropping) // Pulling Task
 8002e18:	4bae      	ldr	r3, [pc, #696]	; (80030d4 <PullAndDrop+0x2d4>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	2b00      	cmp	r3, #0
 8002e1e:	f000 8250 	beq.w	80032c2 <PullAndDrop+0x4c2>
 8002e22:	4bad      	ldr	r3, [pc, #692]	; (80030d8 <PullAndDrop+0x2d8>)
 8002e24:	781b      	ldrb	r3, [r3, #0]
 8002e26:	f083 0301 	eor.w	r3, r3, #1
 8002e2a:	b2db      	uxtb	r3, r3
 8002e2c:	2b00      	cmp	r3, #0
 8002e2e:	f000 8248 	beq.w	80032c2 <PullAndDrop+0x4c2>
		{
			// First Pulling up including going to the initial position
			if (!StartAccleratePulling)
 8002e32:	4baa      	ldr	r3, [pc, #680]	; (80030dc <PullAndDrop+0x2dc>)
 8002e34:	781b      	ldrb	r3, [r3, #0]
 8002e36:	f083 0301 	eor.w	r3, r3, #1
 8002e3a:	b2db      	uxtb	r3, r3
 8002e3c:	2b00      	cmp	r3, #0
 8002e3e:	d030      	beq.n	8002ea2 <PullAndDrop+0xa2>
			{
				// Going to the initial position first
				// Direction = true => going down
				// Direction = false => Going up
				if (CheckGoingToRefPosition(Direction, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 8002e40:	4ba7      	ldr	r3, [pc, #668]	; (80030e0 <PullAndDrop+0x2e0>)
 8002e42:	781b      	ldrb	r3, [r3, #0]
 8002e44:	4aa7      	ldr	r2, [pc, #668]	; (80030e4 <PullAndDrop+0x2e4>)
 8002e46:	6812      	ldr	r2, [r2, #0]
 8002e48:	4611      	mov	r1, r2
 8002e4a:	4618      	mov	r0, r3
 8002e4c:	f7fe fe70 	bl	8001b30 <CheckGoingToRefPosition>
 8002e50:	4603      	mov	r3, r0
 8002e52:	2b00      	cmp	r3, #0
 8002e54:	d022      	beq.n	8002e9c <PullAndDrop+0x9c>
				{
					//BottomPosition = ObjectPosition;
					if (WaitingMiliSecond(5000)) // Wait for 5 seconds = 5000ms
 8002e56:	f241 3088 	movw	r0, #5000	; 0x1388
 8002e5a:	f7fe fdb7 	bl	80019cc <WaitingMiliSecond>
 8002e5e:	4603      	mov	r3, r0
 8002e60:	2b00      	cmp	r3, #0
 8002e62:	d018      	beq.n	8002e96 <PullAndDrop+0x96>
					{
						StartAccleratePulling = true; // turn on flag to start acclerating pulling
 8002e64:	4b9d      	ldr	r3, [pc, #628]	; (80030dc <PullAndDrop+0x2dc>)
 8002e66:	2201      	movs	r2, #1
 8002e68:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up to count the position pulse cmd
 8002e6a:	4b9d      	ldr	r3, [pc, #628]	; (80030e0 <PullAndDrop+0x2e0>)
 8002e6c:	2200      	movs	r2, #0
 8002e6e:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 8002e70:	4b9d      	ldr	r3, [pc, #628]	; (80030e8 <PullAndDrop+0x2e8>)
 8002e72:	2200      	movs	r2, #0
 8002e74:	701a      	strb	r2, [r3, #0]

						PreAccRef = AccRef;
 8002e76:	4b9d      	ldr	r3, [pc, #628]	; (80030ec <PullAndDrop+0x2ec>)
 8002e78:	681b      	ldr	r3, [r3, #0]
 8002e7a:	4a9d      	ldr	r2, [pc, #628]	; (80030f0 <PullAndDrop+0x2f0>)
 8002e7c:	6013      	str	r3, [r2, #0]

						PRIsToggled = true; // true = pulling up.
 8002e7e:	4b9d      	ldr	r3, [pc, #628]	; (80030f4 <PullAndDrop+0x2f4>)
 8002e80:	2201      	movs	r2, #1
 8002e82:	701a      	strb	r2, [r3, #0]
						DisableSTOP(); // Disable the stop
 8002e84:	f7fe f9f0 	bl	8001268 <DisableSTOP>
						StartPulseGenerating();
 8002e88:	f7fe fd82 	bl	8001990 <StartPulseGenerating>

						TargetPosition = FlyingPosPulseCmd; // First, go to max-speed point
 8002e8c:	4b9a      	ldr	r3, [pc, #616]	; (80030f8 <PullAndDrop+0x2f8>)
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	4a9a      	ldr	r2, [pc, #616]	; (80030fc <PullAndDrop+0x2fc>)
 8002e92:	6013      	str	r3, [r2, #0]
 8002e94:	e215      	b.n	80032c2 <PullAndDrop+0x4c2>
					}
					else return false;
 8002e96:	2300      	movs	r3, #0
 8002e98:	f000 bc08 	b.w	80036ac <PullAndDrop+0x8ac>
				}
				else return false;
 8002e9c:	2300      	movs	r3, #0
 8002e9e:	f000 bc05 	b.w	80036ac <PullAndDrop+0x8ac>
			}
			else // Start accelerated pulling
			{
				if (!StartBraking) // Accelerating Stage
 8002ea2:	4b91      	ldr	r3, [pc, #580]	; (80030e8 <PullAndDrop+0x2e8>)
 8002ea4:	781b      	ldrb	r3, [r3, #0]
 8002ea6:	f083 0301 	eor.w	r3, r3, #1
 8002eaa:	b2db      	uxtb	r3, r3
 8002eac:	2b00      	cmp	r3, #0
 8002eae:	f000 8143 	beq.w	8003138 <PullAndDrop+0x338>
				{
					if(MotorDriver) // HIGEN Driver
 8002eb2:	4b93      	ldr	r3, [pc, #588]	; (8003100 <PullAndDrop+0x300>)
 8002eb4:	781b      	ldrb	r3, [r3, #0]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	d011      	beq.n	8002ede <PullAndDrop+0xde>
					{
						if ( abs(8*PositionPulseCmd) > abs(TargetPosition)) // 8 is th gear ratio
 8002eba:	4b92      	ldr	r3, [pc, #584]	; (8003104 <PullAndDrop+0x304>)
 8002ebc:	681b      	ldr	r3, [r3, #0]
 8002ebe:	00db      	lsls	r3, r3, #3
 8002ec0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002ec4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002ec8:	4b8c      	ldr	r3, [pc, #560]	; (80030fc <PullAndDrop+0x2fc>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	2b00      	cmp	r3, #0
 8002ece:	bfb8      	it	lt
 8002ed0:	425b      	neglt	r3, r3
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	dd13      	ble.n	8002efe <PullAndDrop+0xfe>
							{
								IsReachTargetPosition = true;
 8002ed6:	4b8c      	ldr	r3, [pc, #560]	; (8003108 <PullAndDrop+0x308>)
 8002ed8:	2201      	movs	r2, #1
 8002eda:	701a      	strb	r2, [r3, #0]
 8002edc:	e00f      	b.n	8002efe <PullAndDrop+0xfe>
							}
					}
					else // ASDA Driver
					{
						if ( abs(PositionPulseCmd) > abs(TargetPosition))
 8002ede:	4b89      	ldr	r3, [pc, #548]	; (8003104 <PullAndDrop+0x304>)
 8002ee0:	681b      	ldr	r3, [r3, #0]
 8002ee2:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002ee6:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002eea:	4b84      	ldr	r3, [pc, #528]	; (80030fc <PullAndDrop+0x2fc>)
 8002eec:	681b      	ldr	r3, [r3, #0]
 8002eee:	2b00      	cmp	r3, #0
 8002ef0:	bfb8      	it	lt
 8002ef2:	425b      	neglt	r3, r3
 8002ef4:	429a      	cmp	r2, r3
 8002ef6:	dd02      	ble.n	8002efe <PullAndDrop+0xfe>
							{
								IsReachTargetPosition = true;
 8002ef8:	4b83      	ldr	r3, [pc, #524]	; (8003108 <PullAndDrop+0x308>)
 8002efa:	2201      	movs	r2, #1
 8002efc:	701a      	strb	r2, [r3, #0]
							}
					}
					if (IsReachTargetPosition)
 8002efe:	4b82      	ldr	r3, [pc, #520]	; (8003108 <PullAndDrop+0x308>)
 8002f00:	781b      	ldrb	r3, [r3, #0]
 8002f02:	2b00      	cmp	r3, #0
 8002f04:	d03e      	beq.n	8002f84 <PullAndDrop+0x184>
					{
						StartBraking = true;
 8002f06:	4b78      	ldr	r3, [pc, #480]	; (80030e8 <PullAndDrop+0x2e8>)
 8002f08:	2201      	movs	r2, #1
 8002f0a:	701a      	strb	r2, [r3, #0]
						PreAccRef = AccRef;
 8002f0c:	4b77      	ldr	r3, [pc, #476]	; (80030ec <PullAndDrop+0x2ec>)
 8002f0e:	681b      	ldr	r3, [r3, #0]
 8002f10:	4a77      	ldr	r2, [pc, #476]	; (80030f0 <PullAndDrop+0x2f0>)
 8002f12:	6013      	str	r3, [r2, #0]

						StartPulseCmdCounting = false;
 8002f14:	4b7d      	ldr	r3, [pc, #500]	; (800310c <PullAndDrop+0x30c>)
 8002f16:	2200      	movs	r2, #0
 8002f18:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd = 0; // Reset the pulse count variable
 8002f1a:	4b7a      	ldr	r3, [pc, #488]	; (8003104 <PullAndDrop+0x304>)
 8002f1c:	2200      	movs	r2, #0
 8002f1e:	601a      	str	r2, [r3, #0]

						TargetPosition = (int)(EncoderResolution*(PullingTotalDistance-PullingDecelDistance)/(2*3.14*DrumRadius)); // Stop at the top point of the flying (zero-speed point)
 8002f20:	4b7b      	ldr	r3, [pc, #492]	; (8003110 <PullAndDrop+0x310>)
 8002f22:	881b      	ldrh	r3, [r3, #0]
 8002f24:	ee07 3a90 	vmov	s15, r3
 8002f28:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002f2c:	4b79      	ldr	r3, [pc, #484]	; (8003114 <PullAndDrop+0x314>)
 8002f2e:	edd3 6a00 	vldr	s13, [r3]
 8002f32:	4b79      	ldr	r3, [pc, #484]	; (8003118 <PullAndDrop+0x318>)
 8002f34:	edd3 7a00 	vldr	s15, [r3]
 8002f38:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002f3c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f40:	ee17 0a90 	vmov	r0, s15
 8002f44:	f7fd fb00 	bl	8000548 <__aeabi_f2d>
 8002f48:	4604      	mov	r4, r0
 8002f4a:	460d      	mov	r5, r1
 8002f4c:	4b73      	ldr	r3, [pc, #460]	; (800311c <PullAndDrop+0x31c>)
 8002f4e:	681b      	ldr	r3, [r3, #0]
 8002f50:	4618      	mov	r0, r3
 8002f52:	f7fd faf9 	bl	8000548 <__aeabi_f2d>
 8002f56:	a356      	add	r3, pc, #344	; (adr r3, 80030b0 <PullAndDrop+0x2b0>)
 8002f58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f5c:	f7fd fb4c 	bl	80005f8 <__aeabi_dmul>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4620      	mov	r0, r4
 8002f66:	4629      	mov	r1, r5
 8002f68:	f7fd fc70 	bl	800084c <__aeabi_ddiv>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7fd fdf0 	bl	8000b58 <__aeabi_d2iz>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4a60      	ldr	r2, [pc, #384]	; (80030fc <PullAndDrop+0x2fc>)
 8002f7c:	6013      	str	r3, [r2, #0]

						IsReachTargetPosition = false; // Reset the flag
 8002f7e:	4b62      	ldr	r3, [pc, #392]	; (8003108 <PullAndDrop+0x308>)
 8002f80:	2200      	movs	r2, #0
 8002f82:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6-PullingAccel;
 8002f84:	4b66      	ldr	r3, [pc, #408]	; (8003120 <PullAndDrop+0x320>)
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	4618      	mov	r0, r3
 8002f8a:	f7fd fadd 	bl	8000548 <__aeabi_f2d>
 8002f8e:	4602      	mov	r2, r0
 8002f90:	460b      	mov	r3, r1
 8002f92:	a149      	add	r1, pc, #292	; (adr r1, 80030b8 <PullAndDrop+0x2b8>)
 8002f94:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f98:	f7fd f976 	bl	8000288 <__aeabi_dsub>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4610      	mov	r0, r2
 8002fa2:	4619      	mov	r1, r3
 8002fa4:	f7fd fe20 	bl	8000be8 <__aeabi_d2f>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	4a50      	ldr	r2, [pc, #320]	; (80030ec <PullAndDrop+0x2ec>)
 8002fac:	6013      	str	r3, [r2, #0]

					//LinearGeneration(&AccRef,-16,-9.6-PullingAccel); // ramping the reference signal

					//LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);

					SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 8002fae:	4b5d      	ldr	r3, [pc, #372]	; (8003124 <PullAndDrop+0x324>)
 8002fb0:	681b      	ldr	r3, [r3, #0]
 8002fb2:	4618      	mov	r0, r3
 8002fb4:	f7fd fac8 	bl	8000548 <__aeabi_f2d>
 8002fb8:	4604      	mov	r4, r0
 8002fba:	460d      	mov	r5, r1
 8002fbc:	4b5a      	ldr	r3, [pc, #360]	; (8003128 <PullAndDrop+0x328>)
 8002fbe:	781b      	ldrb	r3, [r3, #0]
 8002fc0:	4618      	mov	r0, r3
 8002fc2:	f7fd faaf 	bl	8000524 <__aeabi_i2d>
 8002fc6:	a33e      	add	r3, pc, #248	; (adr r3, 80030c0 <PullAndDrop+0x2c0>)
 8002fc8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fcc:	f7fd fb14 	bl	80005f8 <__aeabi_dmul>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4690      	mov	r8, r2
 8002fd6:	4699      	mov	r9, r3
 8002fd8:	4b44      	ldr	r3, [pc, #272]	; (80030ec <PullAndDrop+0x2ec>)
 8002fda:	681b      	ldr	r3, [r3, #0]
 8002fdc:	4618      	mov	r0, r3
 8002fde:	f7fd fab3 	bl	8000548 <__aeabi_f2d>
 8002fe2:	a339      	add	r3, pc, #228	; (adr r3, 80030c8 <PullAndDrop+0x2c8>)
 8002fe4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002fe8:	f7fd f950 	bl	800028c <__adddf3>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4640      	mov	r0, r8
 8002ff2:	4649      	mov	r1, r9
 8002ff4:	f7fd fb00 	bl	80005f8 <__aeabi_dmul>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f04f 0200 	mov.w	r2, #0
 8003004:	4b49      	ldr	r3, [pc, #292]	; (800312c <PullAndDrop+0x32c>)
 8003006:	f7fd faf7 	bl	80005f8 <__aeabi_dmul>
 800300a:	4602      	mov	r2, r0
 800300c:	460b      	mov	r3, r1
 800300e:	4690      	mov	r8, r2
 8003010:	4699      	mov	r9, r3
 8003012:	4b42      	ldr	r3, [pc, #264]	; (800311c <PullAndDrop+0x31c>)
 8003014:	681b      	ldr	r3, [r3, #0]
 8003016:	4618      	mov	r0, r3
 8003018:	f7fd fa96 	bl	8000548 <__aeabi_f2d>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4640      	mov	r0, r8
 8003022:	4649      	mov	r1, r9
 8003024:	f7fd fc12 	bl	800084c <__aeabi_ddiv>
 8003028:	4602      	mov	r2, r0
 800302a:	460b      	mov	r3, r1
 800302c:	4620      	mov	r0, r4
 800302e:	4629      	mov	r1, r5
 8003030:	f7fd f92c 	bl	800028c <__adddf3>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	4610      	mov	r0, r2
 800303a:	4619      	mov	r1, r3
 800303c:	f7fd fdd4 	bl	8000be8 <__aeabi_d2f>
 8003040:	4603      	mov	r3, r0
 8003042:	4a38      	ldr	r2, [pc, #224]	; (8003124 <PullAndDrop+0x324>)
 8003044:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -PullingMaxSpeed)
 8003046:	4b3a      	ldr	r3, [pc, #232]	; (8003130 <PullAndDrop+0x330>)
 8003048:	881b      	ldrh	r3, [r3, #0]
 800304a:	425b      	negs	r3, r3
 800304c:	ee07 3a90 	vmov	s15, r3
 8003050:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003054:	4b33      	ldr	r3, [pc, #204]	; (8003124 <PullAndDrop+0x324>)
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003062:	db09      	blt.n	8003078 <PullAndDrop+0x278>
						SpeedCmd = -PullingMaxSpeed;
 8003064:	4b32      	ldr	r3, [pc, #200]	; (8003130 <PullAndDrop+0x330>)
 8003066:	881b      	ldrh	r3, [r3, #0]
 8003068:	425b      	negs	r3, r3
 800306a:	ee07 3a90 	vmov	s15, r3
 800306e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8003072:	4b2c      	ldr	r3, [pc, #176]	; (8003124 <PullAndDrop+0x324>)
 8003074:	edc3 7a00 	vstr	s15, [r3]
					StartPulseCmdCounting = true;
 8003078:	4b24      	ldr	r3, [pc, #144]	; (800310c <PullAndDrop+0x30c>)
 800307a:	2201      	movs	r2, #1
 800307c:	701a      	strb	r2, [r3, #0]

					if (SpeedCmd != 0)
 800307e:	4b29      	ldr	r3, [pc, #164]	; (8003124 <PullAndDrop+0x324>)
 8003080:	edd3 7a00 	vldr	s15, [r3]
 8003084:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003088:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800308c:	f000 8119 	beq.w	80032c2 <PullAndDrop+0x4c2>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003090:	4b1b      	ldr	r3, [pc, #108]	; (8003100 <PullAndDrop+0x300>)
 8003092:	781b      	ldrb	r3, [r3, #0]
 8003094:	4a23      	ldr	r2, [pc, #140]	; (8003124 <PullAndDrop+0x324>)
 8003096:	edd2 7a00 	vldr	s15, [r2]
 800309a:	eeb0 0a67 	vmov.f32	s0, s15
 800309e:	4618      	mov	r0, r3
 80030a0:	f7fe fcba 	bl	8001a18 <CalculateTimer3Period>
 80030a4:	4603      	mov	r3, r0
 80030a6:	b29a      	uxth	r2, r3
 80030a8:	4b22      	ldr	r3, [pc, #136]	; (8003134 <PullAndDrop+0x334>)
 80030aa:	801a      	strh	r2, [r3, #0]
 80030ac:	e109      	b.n	80032c2 <PullAndDrop+0x4c2>
 80030ae:	bf00      	nop
 80030b0:	51eb851f 	.word	0x51eb851f
 80030b4:	40191eb8 	.word	0x40191eb8
 80030b8:	33333333 	.word	0x33333333
 80030bc:	c0233333 	.word	0xc0233333
 80030c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80030c4:	3f50624d 	.word	0x3f50624d
 80030c8:	33333333 	.word	0x33333333
 80030cc:	40233333 	.word	0x40233333
 80030d0:	2000043c 	.word	0x2000043c
 80030d4:	20000434 	.word	0x20000434
 80030d8:	2000042f 	.word	0x2000042f
 80030dc:	2000043b 	.word	0x2000043b
 80030e0:	20000432 	.word	0x20000432
 80030e4:	200004a8 	.word	0x200004a8
 80030e8:	20000435 	.word	0x20000435
 80030ec:	20000010 	.word	0x20000010
 80030f0:	20000534 	.word	0x20000534
 80030f4:	20000441 	.word	0x20000441
 80030f8:	200004ac 	.word	0x200004ac
 80030fc:	200004b8 	.word	0x200004b8
 8003100:	20000003 	.word	0x20000003
 8003104:	200004bc 	.word	0x200004bc
 8003108:	2000043a 	.word	0x2000043a
 800310c:	2000042e 	.word	0x2000042e
 8003110:	2000000a 	.word	0x2000000a
 8003114:	200004a4 	.word	0x200004a4
 8003118:	2000049c 	.word	0x2000049c
 800311c:	20000454 	.word	0x20000454
 8003120:	20000484 	.word	0x20000484
 8003124:	20000500 	.word	0x20000500
 8003128:	20000458 	.word	0x20000458
 800312c:	40240000 	.word	0x40240000
 8003130:	20000498 	.word	0x20000498
 8003134:	2000044a 	.word	0x2000044a
				}
				else // Braking Stage
				{
					//AccRef =  = -9.8+PullingDecel;

					if (SpeedCmd == 0 || IsReachTargetPosition)
 8003138:	4b93      	ldr	r3, [pc, #588]	; (8003388 <PullAndDrop+0x588>)
 800313a:	edd3 7a00 	vldr	s15, [r3]
 800313e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003142:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003146:	d003      	beq.n	8003150 <PullAndDrop+0x350>
 8003148:	4b90      	ldr	r3, [pc, #576]	; (800338c <PullAndDrop+0x58c>)
 800314a:	781b      	ldrb	r3, [r3, #0]
 800314c:	2b00      	cmp	r3, #0
 800314e:	d01b      	beq.n	8003188 <PullAndDrop+0x388>
					{
						StopPulseGenerating();
 8003150:	f7fe fc00 	bl	8001954 <StopPulseGenerating>

						StartPulseCmdCounting = false;
 8003154:	4b8e      	ldr	r3, [pc, #568]	; (8003390 <PullAndDrop+0x590>)
 8003156:	2200      	movs	r2, #0
 8003158:	701a      	strb	r2, [r3, #0]
						PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 800315a:	4b8e      	ldr	r3, [pc, #568]	; (8003394 <PullAndDrop+0x594>)
 800315c:	2200      	movs	r2, #0
 800315e:	701a      	strb	r2, [r3, #0]
//						if (StartSimulating)
//						{
//							TotalPullingPulse = PositionPulseCmd;
//						}

						PositionPulseCmd = 0;
 8003160:	4b8d      	ldr	r3, [pc, #564]	; (8003398 <PullAndDrop+0x598>)
 8003162:	2200      	movs	r2, #0
 8003164:	601a      	str	r2, [r3, #0]
						TargetPosition = BottomFreeDropPulseCmd; // First, go to max-speed point
 8003166:	4b8d      	ldr	r3, [pc, #564]	; (800339c <PullAndDrop+0x59c>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4a8d      	ldr	r2, [pc, #564]	; (80033a0 <PullAndDrop+0x5a0>)
 800316c:	6013      	str	r3, [r2, #0]
						IsReachTargetPosition = false;
 800316e:	4b87      	ldr	r3, [pc, #540]	; (800338c <PullAndDrop+0x58c>)
 8003170:	2200      	movs	r2, #0
 8003172:	701a      	strb	r2, [r3, #0]

						SpeedCmd = 0; // reset/ stop
 8003174:	4b84      	ldr	r3, [pc, #528]	; (8003388 <PullAndDrop+0x588>)
 8003176:	f04f 0200 	mov.w	r2, #0
 800317a:	601a      	str	r2, [r3, #0]

						StartPulling = false; // flag to finish Pulling Stage
 800317c:	4b89      	ldr	r3, [pc, #548]	; (80033a4 <PullAndDrop+0x5a4>)
 800317e:	2200      	movs	r2, #0
 8003180:	701a      	strb	r2, [r3, #0]

						StartWaiting = true; // Switch to waiting stage
 8003182:	4b89      	ldr	r3, [pc, #548]	; (80033a8 <PullAndDrop+0x5a8>)
 8003184:	2201      	movs	r2, #1
 8003186:	701a      	strb	r2, [r3, #0]
					}

					//AccRef = -9.6+PullingDecel;

					LinearGeneration(&AccRef,FlyAccSlope,-9.6+PullingDecel);
 8003188:	4b88      	ldr	r3, [pc, #544]	; (80033ac <PullAndDrop+0x5ac>)
 800318a:	ed93 8a00 	vldr	s16, [r3]
 800318e:	4b88      	ldr	r3, [pc, #544]	; (80033b0 <PullAndDrop+0x5b0>)
 8003190:	681b      	ldr	r3, [r3, #0]
 8003192:	4618      	mov	r0, r3
 8003194:	f7fd f9d8 	bl	8000548 <__aeabi_f2d>
 8003198:	a377      	add	r3, pc, #476	; (adr r3, 8003378 <PullAndDrop+0x578>)
 800319a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800319e:	f7fd f873 	bl	8000288 <__aeabi_dsub>
 80031a2:	4602      	mov	r2, r0
 80031a4:	460b      	mov	r3, r1
 80031a6:	4610      	mov	r0, r2
 80031a8:	4619      	mov	r1, r3
 80031aa:	f7fd fd1d 	bl	8000be8 <__aeabi_d2f>
 80031ae:	4603      	mov	r3, r0
 80031b0:	ee00 3a90 	vmov	s1, r3
 80031b4:	eeb0 0a48 	vmov.f32	s0, s16
 80031b8:	487e      	ldr	r0, [pc, #504]	; (80033b4 <PullAndDrop+0x5b4>)
 80031ba:	f7fe fb6d 	bl	8001898 <LinearGeneration>

					if (IsOpenLoopControl) // Use open-loop control
 80031be:	4b7e      	ldr	r3, [pc, #504]	; (80033b8 <PullAndDrop+0x5b8>)
 80031c0:	781b      	ldrb	r3, [r3, #0]
 80031c2:	2b00      	cmp	r3, #0
 80031c4:	d064      	beq.n	8003290 <PullAndDrop+0x490>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,PullingEpsilonDec,TransitionSpeed,-PullingMaxSpeed,0); // Feedforward term
						//LinearGeneration(&SpeedCmd,(AccRef + 9.6)*10/DrumRadius,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 80031c6:	4b70      	ldr	r3, [pc, #448]	; (8003388 <PullAndDrop+0x588>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f9bc 	bl	8000548 <__aeabi_f2d>
 80031d0:	4604      	mov	r4, r0
 80031d2:	460d      	mov	r5, r1
 80031d4:	4b79      	ldr	r3, [pc, #484]	; (80033bc <PullAndDrop+0x5bc>)
 80031d6:	781b      	ldrb	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9a3 	bl	8000524 <__aeabi_i2d>
 80031de:	a368      	add	r3, pc, #416	; (adr r3, 8003380 <PullAndDrop+0x580>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd fa08 	bl	80005f8 <__aeabi_dmul>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4690      	mov	r8, r2
 80031ee:	4699      	mov	r9, r3
 80031f0:	4b70      	ldr	r3, [pc, #448]	; (80033b4 <PullAndDrop+0x5b4>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f9a7 	bl	8000548 <__aeabi_f2d>
 80031fa:	a35f      	add	r3, pc, #380	; (adr r3, 8003378 <PullAndDrop+0x578>)
 80031fc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003200:	f7fd f844 	bl	800028c <__adddf3>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4640      	mov	r0, r8
 800320a:	4649      	mov	r1, r9
 800320c:	f7fd f9f4 	bl	80005f8 <__aeabi_dmul>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4610      	mov	r0, r2
 8003216:	4619      	mov	r1, r3
 8003218:	f04f 0200 	mov.w	r2, #0
 800321c:	4b68      	ldr	r3, [pc, #416]	; (80033c0 <PullAndDrop+0x5c0>)
 800321e:	f7fd f9eb 	bl	80005f8 <__aeabi_dmul>
 8003222:	4602      	mov	r2, r0
 8003224:	460b      	mov	r3, r1
 8003226:	4690      	mov	r8, r2
 8003228:	4699      	mov	r9, r3
 800322a:	4b66      	ldr	r3, [pc, #408]	; (80033c4 <PullAndDrop+0x5c4>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	4618      	mov	r0, r3
 8003230:	f7fd f98a 	bl	8000548 <__aeabi_f2d>
 8003234:	4602      	mov	r2, r0
 8003236:	460b      	mov	r3, r1
 8003238:	4640      	mov	r0, r8
 800323a:	4649      	mov	r1, r9
 800323c:	f7fd fb06 	bl	800084c <__aeabi_ddiv>
 8003240:	4602      	mov	r2, r0
 8003242:	460b      	mov	r3, r1
 8003244:	4620      	mov	r0, r4
 8003246:	4629      	mov	r1, r5
 8003248:	f7fd f820 	bl	800028c <__adddf3>
 800324c:	4602      	mov	r2, r0
 800324e:	460b      	mov	r3, r1
 8003250:	4610      	mov	r0, r2
 8003252:	4619      	mov	r1, r3
 8003254:	f7fd fcc8 	bl	8000be8 <__aeabi_d2f>
 8003258:	4603      	mov	r3, r0
 800325a:	4a4b      	ldr	r2, [pc, #300]	; (8003388 <PullAndDrop+0x588>)
 800325c:	6013      	str	r3, [r2, #0]
						if (SpeedCmd <= -810)
 800325e:	4b4a      	ldr	r3, [pc, #296]	; (8003388 <PullAndDrop+0x588>)
 8003260:	edd3 7a00 	vldr	s15, [r3]
 8003264:	ed9f 7a58 	vldr	s14, [pc, #352]	; 80033c8 <PullAndDrop+0x5c8>
 8003268:	eef4 7ac7 	vcmpe.f32	s15, s14
 800326c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003270:	d802      	bhi.n	8003278 <PullAndDrop+0x478>
							SpeedCmd = -810;
 8003272:	4b45      	ldr	r3, [pc, #276]	; (8003388 <PullAndDrop+0x588>)
 8003274:	4a55      	ldr	r2, [pc, #340]	; (80033cc <PullAndDrop+0x5cc>)
 8003276:	601a      	str	r2, [r3, #0]
						if (SpeedCmd >= 0)
 8003278:	4b43      	ldr	r3, [pc, #268]	; (8003388 <PullAndDrop+0x588>)
 800327a:	edd3 7a00 	vldr	s15, [r3]
 800327e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003282:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003286:	db03      	blt.n	8003290 <PullAndDrop+0x490>
							SpeedCmd = 0;
 8003288:	4b3f      	ldr	r3, [pc, #252]	; (8003388 <PullAndDrop+0x588>)
 800328a:	f04f 0200 	mov.w	r2, #0
 800328e:	601a      	str	r2, [r3, #0]
//						SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
//						if (SpeedCmd >= 0)
//							SpeedCmd = 0;
//					}

					if (SpeedCmd != 0)
 8003290:	4b3d      	ldr	r3, [pc, #244]	; (8003388 <PullAndDrop+0x588>)
 8003292:	edd3 7a00 	vldr	s15, [r3]
 8003296:	eef5 7a40 	vcmp.f32	s15, #0.0
 800329a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800329e:	d010      	beq.n	80032c2 <PullAndDrop+0x4c2>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80032a0:	4b4b      	ldr	r3, [pc, #300]	; (80033d0 <PullAndDrop+0x5d0>)
 80032a2:	781b      	ldrb	r3, [r3, #0]
 80032a4:	4a38      	ldr	r2, [pc, #224]	; (8003388 <PullAndDrop+0x588>)
 80032a6:	edd2 7a00 	vldr	s15, [r2]
 80032aa:	eeb0 0a67 	vmov.f32	s0, s15
 80032ae:	4618      	mov	r0, r3
 80032b0:	f7fe fbb2 	bl	8001a18 <CalculateTimer3Period>
 80032b4:	4603      	mov	r3, r0
 80032b6:	b29a      	uxth	r2, r3
 80032b8:	4b46      	ldr	r3, [pc, #280]	; (80033d4 <PullAndDrop+0x5d4>)
 80032ba:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 80032bc:	4b34      	ldr	r3, [pc, #208]	; (8003390 <PullAndDrop+0x590>)
 80032be:	2201      	movs	r2, #1
 80032c0:	701a      	strb	r2, [r3, #0]
//		// Wait for some time before dropping

// BEGIN Delay before dropping

//
		if (StartWaiting)
 80032c2:	4b39      	ldr	r3, [pc, #228]	; (80033a8 <PullAndDrop+0x5a8>)
 80032c4:	781b      	ldrb	r3, [r3, #0]
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d029      	beq.n	800331e <PullAndDrop+0x51e>
		{
			if (WaitingMiliSecond(StoppingTime))
 80032ca:	4b43      	ldr	r3, [pc, #268]	; (80033d8 <PullAndDrop+0x5d8>)
 80032cc:	881b      	ldrh	r3, [r3, #0]
 80032ce:	4618      	mov	r0, r3
 80032d0:	f7fe fb7c 	bl	80019cc <WaitingMiliSecond>
 80032d4:	4603      	mov	r3, r0
 80032d6:	2b00      	cmp	r3, #0
 80032d8:	d021      	beq.n	800331e <PullAndDrop+0x51e>
			{
				StartWaiting = false;
 80032da:	4b33      	ldr	r3, [pc, #204]	; (80033a8 <PullAndDrop+0x5a8>)
 80032dc:	2200      	movs	r2, #0
 80032de:	701a      	strb	r2, [r3, #0]

				PreAccRef = AccRef;
 80032e0:	4b34      	ldr	r3, [pc, #208]	; (80033b4 <PullAndDrop+0x5b4>)
 80032e2:	681b      	ldr	r3, [r3, #0]
 80032e4:	4a3d      	ldr	r2, [pc, #244]	; (80033dc <PullAndDrop+0x5dc>)
 80032e6:	6013      	str	r3, [r2, #0]

				StartDropping = true;
 80032e8:	4b3d      	ldr	r3, [pc, #244]	; (80033e0 <PullAndDrop+0x5e0>)
 80032ea:	2201      	movs	r2, #1
 80032ec:	701a      	strb	r2, [r3, #0]
				StartBraking = false;
 80032ee:	4b3d      	ldr	r3, [pc, #244]	; (80033e4 <PullAndDrop+0x5e4>)
 80032f0:	2200      	movs	r2, #0
 80032f2:	701a      	strb	r2, [r3, #0]
				Direction = true; // variable to show the direction, false = move up, true = move down
 80032f4:	4b3c      	ldr	r3, [pc, #240]	; (80033e8 <PullAndDrop+0x5e8>)
 80032f6:	2201      	movs	r2, #1
 80032f8:	701a      	strb	r2, [r3, #0]
				StartPulling = false;
 80032fa:	4b2a      	ldr	r3, [pc, #168]	; (80033a4 <PullAndDrop+0x5a4>)
 80032fc:	2200      	movs	r2, #0
 80032fe:	701a      	strb	r2, [r3, #0]
				PositionPulseCmd = 0;
 8003300:	4b25      	ldr	r3, [pc, #148]	; (8003398 <PullAndDrop+0x598>)
 8003302:	2200      	movs	r2, #0
 8003304:	601a      	str	r2, [r3, #0]
				StartPulseCmdCounting = false;
 8003306:	4b22      	ldr	r3, [pc, #136]	; (8003390 <PullAndDrop+0x590>)
 8003308:	2200      	movs	r2, #0
 800330a:	701a      	strb	r2, [r3, #0]
				PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 800330c:	4b21      	ldr	r3, [pc, #132]	; (8003394 <PullAndDrop+0x594>)
 800330e:	2200      	movs	r2, #0
 8003310:	701a      	strb	r2, [r3, #0]

				//InitializeRunning(DroppingMode);

				TargetPosition = BottomFreeDropPulseCmd; // First, go to max-speed point
 8003312:	4b22      	ldr	r3, [pc, #136]	; (800339c <PullAndDrop+0x59c>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	4a22      	ldr	r2, [pc, #136]	; (80033a0 <PullAndDrop+0x5a0>)
 8003318:	6013      	str	r3, [r2, #0]
				StartPulseGenerating();
 800331a:	f7fe fb39 	bl	8001990 <StartPulseGenerating>
		}

// END WAITING

		// BEGIN DROPPING TASK
		if (StartDropping && !StartPulling)
 800331e:	4b30      	ldr	r3, [pc, #192]	; (80033e0 <PullAndDrop+0x5e0>)
 8003320:	781b      	ldrb	r3, [r3, #0]
 8003322:	2b00      	cmp	r3, #0
 8003324:	f000 81c1 	beq.w	80036aa <PullAndDrop+0x8aa>
 8003328:	4b1e      	ldr	r3, [pc, #120]	; (80033a4 <PullAndDrop+0x5a4>)
 800332a:	781b      	ldrb	r3, [r3, #0]
 800332c:	f083 0301 	eor.w	r3, r3, #1
 8003330:	b2db      	uxtb	r3, r3
 8003332:	2b00      	cmp	r3, #0
 8003334:	f000 81b9 	beq.w	80036aa <PullAndDrop+0x8aa>
		{
				// ACCLERATING DROPPING STAGE
				if (!StartBraking) // Accelerating Stage
 8003338:	4b2a      	ldr	r3, [pc, #168]	; (80033e4 <PullAndDrop+0x5e4>)
 800333a:	781b      	ldrb	r3, [r3, #0]
 800333c:	f083 0301 	eor.w	r3, r3, #1
 8003340:	b2db      	uxtb	r3, r3
 8003342:	2b00      	cmp	r3, #0
 8003344:	f000 810b 	beq.w	800355e <PullAndDrop+0x75e>
				{
					if(MotorDriver) // HIGEN Driver
 8003348:	4b21      	ldr	r3, [pc, #132]	; (80033d0 <PullAndDrop+0x5d0>)
 800334a:	781b      	ldrb	r3, [r3, #0]
 800334c:	2b00      	cmp	r3, #0
 800334e:	d04d      	beq.n	80033ec <PullAndDrop+0x5ec>
					{
						if ( abs(8*PositionPulseCmd) > abs(TargetPosition)) // 8 is th gear ratio
 8003350:	4b11      	ldr	r3, [pc, #68]	; (8003398 <PullAndDrop+0x598>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	00db      	lsls	r3, r3, #3
 8003356:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800335a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800335e:	4b10      	ldr	r3, [pc, #64]	; (80033a0 <PullAndDrop+0x5a0>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	2b00      	cmp	r3, #0
 8003364:	bfb8      	it	lt
 8003366:	425b      	neglt	r3, r3
 8003368:	429a      	cmp	r2, r3
 800336a:	dd4f      	ble.n	800340c <PullAndDrop+0x60c>
						{
							IsReachTargetPosition = true;
 800336c:	4b07      	ldr	r3, [pc, #28]	; (800338c <PullAndDrop+0x58c>)
 800336e:	2201      	movs	r2, #1
 8003370:	701a      	strb	r2, [r3, #0]
 8003372:	e04b      	b.n	800340c <PullAndDrop+0x60c>
 8003374:	f3af 8000 	nop.w
 8003378:	33333333 	.word	0x33333333
 800337c:	40233333 	.word	0x40233333
 8003380:	d2f1a9fc 	.word	0xd2f1a9fc
 8003384:	3f50624d 	.word	0x3f50624d
 8003388:	20000500 	.word	0x20000500
 800338c:	2000043a 	.word	0x2000043a
 8003390:	2000042e 	.word	0x2000042e
 8003394:	20000441 	.word	0x20000441
 8003398:	200004bc 	.word	0x200004bc
 800339c:	200004b0 	.word	0x200004b0
 80033a0:	200004b8 	.word	0x200004b8
 80033a4:	20000434 	.word	0x20000434
 80033a8:	20000439 	.word	0x20000439
 80033ac:	2000052c 	.word	0x2000052c
 80033b0:	20000488 	.word	0x20000488
 80033b4:	20000010 	.word	0x20000010
 80033b8:	20000004 	.word	0x20000004
 80033bc:	20000458 	.word	0x20000458
 80033c0:	40240000 	.word	0x40240000
 80033c4:	20000454 	.word	0x20000454
 80033c8:	c44a8000 	.word	0xc44a8000
 80033cc:	c44a8000 	.word	0xc44a8000
 80033d0:	20000003 	.word	0x20000003
 80033d4:	2000044a 	.word	0x2000044a
 80033d8:	2000045a 	.word	0x2000045a
 80033dc:	20000534 	.word	0x20000534
 80033e0:	2000042f 	.word	0x2000042f
 80033e4:	20000435 	.word	0x20000435
 80033e8:	20000432 	.word	0x20000432
						}
					}
					else // ASDA Driver
					{
						if ( abs(PositionPulseCmd) > abs(TargetPosition))
 80033ec:	4bb8      	ldr	r3, [pc, #736]	; (80036d0 <PullAndDrop+0x8d0>)
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80033f4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80033f8:	4bb6      	ldr	r3, [pc, #728]	; (80036d4 <PullAndDrop+0x8d4>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	2b00      	cmp	r3, #0
 80033fe:	bfb8      	it	lt
 8003400:	425b      	neglt	r3, r3
 8003402:	429a      	cmp	r2, r3
 8003404:	dd02      	ble.n	800340c <PullAndDrop+0x60c>
						{
							IsReachTargetPosition = true;
 8003406:	4bb4      	ldr	r3, [pc, #720]	; (80036d8 <PullAndDrop+0x8d8>)
 8003408:	2201      	movs	r2, #1
 800340a:	701a      	strb	r2, [r3, #0]
						}
					}
					if (IsReachTargetPosition) // Reach dropping distance
 800340c:	4bb2      	ldr	r3, [pc, #712]	; (80036d8 <PullAndDrop+0x8d8>)
 800340e:	781b      	ldrb	r3, [r3, #0]
 8003410:	2b00      	cmp	r3, #0
 8003412:	d00f      	beq.n	8003434 <PullAndDrop+0x634>
					{
						StartBraking = true;
 8003414:	4bb1      	ldr	r3, [pc, #708]	; (80036dc <PullAndDrop+0x8dc>)
 8003416:	2201      	movs	r2, #1
 8003418:	701a      	strb	r2, [r3, #0]

						StartPulseCmdCounting = false;
 800341a:	4bb1      	ldr	r3, [pc, #708]	; (80036e0 <PullAndDrop+0x8e0>)
 800341c:	2200      	movs	r2, #0
 800341e:	701a      	strb	r2, [r3, #0]
						PositionPulseCmd = 0;
 8003420:	4bab      	ldr	r3, [pc, #684]	; (80036d0 <PullAndDrop+0x8d0>)
 8003422:	2200      	movs	r2, #0
 8003424:	601a      	str	r2, [r3, #0]
						//TargetPosition = 0;

						TargetPosition = DroppingDecelPulseCmd;
 8003426:	4baf      	ldr	r3, [pc, #700]	; (80036e4 <PullAndDrop+0x8e4>)
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	4aaa      	ldr	r2, [pc, #680]	; (80036d4 <PullAndDrop+0x8d4>)
 800342c:	6013      	str	r3, [r2, #0]
						IsReachTargetPosition = false;
 800342e:	4baa      	ldr	r3, [pc, #680]	; (80036d8 <PullAndDrop+0x8d8>)
 8003430:	2200      	movs	r2, #0
 8003432:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6+DroppingAccel;
 8003434:	4bac      	ldr	r3, [pc, #688]	; (80036e8 <PullAndDrop+0x8e8>)
 8003436:	681b      	ldr	r3, [r3, #0]
 8003438:	4618      	mov	r0, r3
 800343a:	f7fd f885 	bl	8000548 <__aeabi_f2d>
 800343e:	a39e      	add	r3, pc, #632	; (adr r3, 80036b8 <PullAndDrop+0x8b8>)
 8003440:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003444:	f7fc ff20 	bl	8000288 <__aeabi_dsub>
 8003448:	4602      	mov	r2, r0
 800344a:	460b      	mov	r3, r1
 800344c:	4610      	mov	r0, r2
 800344e:	4619      	mov	r1, r3
 8003450:	f7fd fbca 	bl	8000be8 <__aeabi_d2f>
 8003454:	4603      	mov	r3, r0
 8003456:	4aa5      	ldr	r2, [pc, #660]	; (80036ec <PullAndDrop+0x8ec>)
 8003458:	6013      	str	r3, [r2, #0]

					if (IsOpenLoopControl) // Use open-loop control
 800345a:	4ba5      	ldr	r3, [pc, #660]	; (80036f0 <PullAndDrop+0x8f0>)
 800345c:	781b      	ldrb	r3, [r3, #0]
 800345e:	2b00      	cmp	r3, #0
 8003460:	d062      	beq.n	8003528 <PullAndDrop+0x728>
					{
						SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8003462:	4ba4      	ldr	r3, [pc, #656]	; (80036f4 <PullAndDrop+0x8f4>)
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	4618      	mov	r0, r3
 8003468:	f7fd f86e 	bl	8000548 <__aeabi_f2d>
 800346c:	4604      	mov	r4, r0
 800346e:	460d      	mov	r5, r1
 8003470:	4ba1      	ldr	r3, [pc, #644]	; (80036f8 <PullAndDrop+0x8f8>)
 8003472:	781b      	ldrb	r3, [r3, #0]
 8003474:	4618      	mov	r0, r3
 8003476:	f7fd f855 	bl	8000524 <__aeabi_i2d>
 800347a:	a391      	add	r3, pc, #580	; (adr r3, 80036c0 <PullAndDrop+0x8c0>)
 800347c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003480:	f7fd f8ba 	bl	80005f8 <__aeabi_dmul>
 8003484:	4602      	mov	r2, r0
 8003486:	460b      	mov	r3, r1
 8003488:	4690      	mov	r8, r2
 800348a:	4699      	mov	r9, r3
 800348c:	4b97      	ldr	r3, [pc, #604]	; (80036ec <PullAndDrop+0x8ec>)
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	4618      	mov	r0, r3
 8003492:	f7fd f859 	bl	8000548 <__aeabi_f2d>
 8003496:	a388      	add	r3, pc, #544	; (adr r3, 80036b8 <PullAndDrop+0x8b8>)
 8003498:	e9d3 2300 	ldrd	r2, r3, [r3]
 800349c:	f7fc fef6 	bl	800028c <__adddf3>
 80034a0:	4602      	mov	r2, r0
 80034a2:	460b      	mov	r3, r1
 80034a4:	4640      	mov	r0, r8
 80034a6:	4649      	mov	r1, r9
 80034a8:	f7fd f8a6 	bl	80005f8 <__aeabi_dmul>
 80034ac:	4602      	mov	r2, r0
 80034ae:	460b      	mov	r3, r1
 80034b0:	4610      	mov	r0, r2
 80034b2:	4619      	mov	r1, r3
 80034b4:	f04f 0200 	mov.w	r2, #0
 80034b8:	4b90      	ldr	r3, [pc, #576]	; (80036fc <PullAndDrop+0x8fc>)
 80034ba:	f7fd f89d 	bl	80005f8 <__aeabi_dmul>
 80034be:	4602      	mov	r2, r0
 80034c0:	460b      	mov	r3, r1
 80034c2:	4690      	mov	r8, r2
 80034c4:	4699      	mov	r9, r3
 80034c6:	4b8e      	ldr	r3, [pc, #568]	; (8003700 <PullAndDrop+0x900>)
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	4618      	mov	r0, r3
 80034cc:	f7fd f83c 	bl	8000548 <__aeabi_f2d>
 80034d0:	4602      	mov	r2, r0
 80034d2:	460b      	mov	r3, r1
 80034d4:	4640      	mov	r0, r8
 80034d6:	4649      	mov	r1, r9
 80034d8:	f7fd f9b8 	bl	800084c <__aeabi_ddiv>
 80034dc:	4602      	mov	r2, r0
 80034de:	460b      	mov	r3, r1
 80034e0:	4620      	mov	r0, r4
 80034e2:	4629      	mov	r1, r5
 80034e4:	f7fc fed2 	bl	800028c <__adddf3>
 80034e8:	4602      	mov	r2, r0
 80034ea:	460b      	mov	r3, r1
 80034ec:	4610      	mov	r0, r2
 80034ee:	4619      	mov	r1, r3
 80034f0:	f7fd fb7a 	bl	8000be8 <__aeabi_d2f>
 80034f4:	4603      	mov	r3, r0
 80034f6:	4a7f      	ldr	r2, [pc, #508]	; (80036f4 <PullAndDrop+0x8f4>)
 80034f8:	6013      	str	r3, [r2, #0]
						if (SpeedCmd >= DroppingMaxSpeed) // Saturation
 80034fa:	4b82      	ldr	r3, [pc, #520]	; (8003704 <PullAndDrop+0x904>)
 80034fc:	881b      	ldrh	r3, [r3, #0]
 80034fe:	ee07 3a90 	vmov	s15, r3
 8003502:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003506:	4b7b      	ldr	r3, [pc, #492]	; (80036f4 <PullAndDrop+0x8f4>)
 8003508:	edd3 7a00 	vldr	s15, [r3]
 800350c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003510:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003514:	d808      	bhi.n	8003528 <PullAndDrop+0x728>
							SpeedCmd = DroppingMaxSpeed;
 8003516:	4b7b      	ldr	r3, [pc, #492]	; (8003704 <PullAndDrop+0x904>)
 8003518:	881b      	ldrh	r3, [r3, #0]
 800351a:	ee07 3a90 	vmov	s15, r3
 800351e:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003522:	4b74      	ldr	r3, [pc, #464]	; (80036f4 <PullAndDrop+0x8f4>)
 8003524:	edc3 7a00 	vstr	s15, [r3]
//						if (SpeedCmd >= DroppingMaxSpeed) // Saturation
//							SpeedCmd = DroppingMaxSpeed;
//						StartPulseCmdCounting = true;
//					}

					if (SpeedCmd != 0)
 8003528:	4b72      	ldr	r3, [pc, #456]	; (80036f4 <PullAndDrop+0x8f4>)
 800352a:	edd3 7a00 	vldr	s15, [r3]
 800352e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003532:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003536:	f000 80b8 	beq.w	80036aa <PullAndDrop+0x8aa>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800353a:	4b73      	ldr	r3, [pc, #460]	; (8003708 <PullAndDrop+0x908>)
 800353c:	781b      	ldrb	r3, [r3, #0]
 800353e:	4a6d      	ldr	r2, [pc, #436]	; (80036f4 <PullAndDrop+0x8f4>)
 8003540:	edd2 7a00 	vldr	s15, [r2]
 8003544:	eeb0 0a67 	vmov.f32	s0, s15
 8003548:	4618      	mov	r0, r3
 800354a:	f7fe fa65 	bl	8001a18 <CalculateTimer3Period>
 800354e:	4603      	mov	r3, r0
 8003550:	b29a      	uxth	r2, r3
 8003552:	4b6e      	ldr	r3, [pc, #440]	; (800370c <PullAndDrop+0x90c>)
 8003554:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 8003556:	4b62      	ldr	r3, [pc, #392]	; (80036e0 <PullAndDrop+0x8e0>)
 8003558:	2201      	movs	r2, #1
 800355a:	701a      	strb	r2, [r3, #0]
 800355c:	e0a5      	b.n	80036aa <PullAndDrop+0x8aa>

				// BEGIN BRAKING STAGE
				else
				{

					AccRef = -9.6-DroppingDecel;
 800355e:	4b6c      	ldr	r3, [pc, #432]	; (8003710 <PullAndDrop+0x910>)
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	4618      	mov	r0, r3
 8003564:	f7fc fff0 	bl	8000548 <__aeabi_f2d>
 8003568:	4602      	mov	r2, r0
 800356a:	460b      	mov	r3, r1
 800356c:	a156      	add	r1, pc, #344	; (adr r1, 80036c8 <PullAndDrop+0x8c8>)
 800356e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003572:	f7fc fe89 	bl	8000288 <__aeabi_dsub>
 8003576:	4602      	mov	r2, r0
 8003578:	460b      	mov	r3, r1
 800357a:	4610      	mov	r0, r2
 800357c:	4619      	mov	r1, r3
 800357e:	f7fd fb33 	bl	8000be8 <__aeabi_d2f>
 8003582:	4603      	mov	r3, r0
 8003584:	4a59      	ldr	r2, [pc, #356]	; (80036ec <PullAndDrop+0x8ec>)
 8003586:	6013      	str	r3, [r2, #0]
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8003588:	4b5a      	ldr	r3, [pc, #360]	; (80036f4 <PullAndDrop+0x8f4>)
 800358a:	681b      	ldr	r3, [r3, #0]
 800358c:	4618      	mov	r0, r3
 800358e:	f7fc ffdb 	bl	8000548 <__aeabi_f2d>
 8003592:	4604      	mov	r4, r0
 8003594:	460d      	mov	r5, r1
 8003596:	4b58      	ldr	r3, [pc, #352]	; (80036f8 <PullAndDrop+0x8f8>)
 8003598:	781b      	ldrb	r3, [r3, #0]
 800359a:	4618      	mov	r0, r3
 800359c:	f7fc ffc2 	bl	8000524 <__aeabi_i2d>
 80035a0:	a347      	add	r3, pc, #284	; (adr r3, 80036c0 <PullAndDrop+0x8c0>)
 80035a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035a6:	f7fd f827 	bl	80005f8 <__aeabi_dmul>
 80035aa:	4602      	mov	r2, r0
 80035ac:	460b      	mov	r3, r1
 80035ae:	4690      	mov	r8, r2
 80035b0:	4699      	mov	r9, r3
 80035b2:	4b4e      	ldr	r3, [pc, #312]	; (80036ec <PullAndDrop+0x8ec>)
 80035b4:	681b      	ldr	r3, [r3, #0]
 80035b6:	4618      	mov	r0, r3
 80035b8:	f7fc ffc6 	bl	8000548 <__aeabi_f2d>
 80035bc:	a33e      	add	r3, pc, #248	; (adr r3, 80036b8 <PullAndDrop+0x8b8>)
 80035be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035c2:	f7fc fe63 	bl	800028c <__adddf3>
 80035c6:	4602      	mov	r2, r0
 80035c8:	460b      	mov	r3, r1
 80035ca:	4640      	mov	r0, r8
 80035cc:	4649      	mov	r1, r9
 80035ce:	f7fd f813 	bl	80005f8 <__aeabi_dmul>
 80035d2:	4602      	mov	r2, r0
 80035d4:	460b      	mov	r3, r1
 80035d6:	4610      	mov	r0, r2
 80035d8:	4619      	mov	r1, r3
 80035da:	f04f 0200 	mov.w	r2, #0
 80035de:	4b47      	ldr	r3, [pc, #284]	; (80036fc <PullAndDrop+0x8fc>)
 80035e0:	f7fd f80a 	bl	80005f8 <__aeabi_dmul>
 80035e4:	4602      	mov	r2, r0
 80035e6:	460b      	mov	r3, r1
 80035e8:	4690      	mov	r8, r2
 80035ea:	4699      	mov	r9, r3
 80035ec:	4b44      	ldr	r3, [pc, #272]	; (8003700 <PullAndDrop+0x900>)
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	4618      	mov	r0, r3
 80035f2:	f7fc ffa9 	bl	8000548 <__aeabi_f2d>
 80035f6:	4602      	mov	r2, r0
 80035f8:	460b      	mov	r3, r1
 80035fa:	4640      	mov	r0, r8
 80035fc:	4649      	mov	r1, r9
 80035fe:	f7fd f925 	bl	800084c <__aeabi_ddiv>
 8003602:	4602      	mov	r2, r0
 8003604:	460b      	mov	r3, r1
 8003606:	4620      	mov	r0, r4
 8003608:	4629      	mov	r1, r5
 800360a:	f7fc fe3f 	bl	800028c <__adddf3>
 800360e:	4602      	mov	r2, r0
 8003610:	460b      	mov	r3, r1
 8003612:	4610      	mov	r0, r2
 8003614:	4619      	mov	r1, r3
 8003616:	f7fd fae7 	bl	8000be8 <__aeabi_d2f>
 800361a:	4603      	mov	r3, r0
 800361c:	4a35      	ldr	r2, [pc, #212]	; (80036f4 <PullAndDrop+0x8f4>)
 800361e:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= 0)
 8003620:	4b34      	ldr	r3, [pc, #208]	; (80036f4 <PullAndDrop+0x8f4>)
 8003622:	edd3 7a00 	vldr	s15, [r3]
 8003626:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800362a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800362e:	d803      	bhi.n	8003638 <PullAndDrop+0x838>
						SpeedCmd = 0;
 8003630:	4b30      	ldr	r3, [pc, #192]	; (80036f4 <PullAndDrop+0x8f4>)
 8003632:	f04f 0200 	mov.w	r2, #0
 8003636:	601a      	str	r2, [r3, #0]

					if (SpeedCmd != 0)
 8003638:	4b2e      	ldr	r3, [pc, #184]	; (80036f4 <PullAndDrop+0x8f4>)
 800363a:	edd3 7a00 	vldr	s15, [r3]
 800363e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003642:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003646:	d010      	beq.n	800366a <PullAndDrop+0x86a>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003648:	4b2f      	ldr	r3, [pc, #188]	; (8003708 <PullAndDrop+0x908>)
 800364a:	781b      	ldrb	r3, [r3, #0]
 800364c:	4a29      	ldr	r2, [pc, #164]	; (80036f4 <PullAndDrop+0x8f4>)
 800364e:	edd2 7a00 	vldr	s15, [r2]
 8003652:	eeb0 0a67 	vmov.f32	s0, s15
 8003656:	4618      	mov	r0, r3
 8003658:	f7fe f9de 	bl	8001a18 <CalculateTimer3Period>
 800365c:	4603      	mov	r3, r0
 800365e:	b29a      	uxth	r2, r3
 8003660:	4b2a      	ldr	r3, [pc, #168]	; (800370c <PullAndDrop+0x90c>)
 8003662:	801a      	strh	r2, [r3, #0]
						StartPulseCmdCounting = true;
 8003664:	4b1e      	ldr	r3, [pc, #120]	; (80036e0 <PullAndDrop+0x8e0>)
 8003666:	2201      	movs	r2, #1
 8003668:	701a      	strb	r2, [r3, #0]
					}

					if (SpeedCmd <= 0 || IsReachTargetPosition) // Stop braking
 800366a:	4b22      	ldr	r3, [pc, #136]	; (80036f4 <PullAndDrop+0x8f4>)
 800366c:	edd3 7a00 	vldr	s15, [r3]
 8003670:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003674:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003678:	d903      	bls.n	8003682 <PullAndDrop+0x882>
 800367a:	4b17      	ldr	r3, [pc, #92]	; (80036d8 <PullAndDrop+0x8d8>)
 800367c:	781b      	ldrb	r3, [r3, #0]
 800367e:	2b00      	cmp	r3, #0
 8003680:	d013      	beq.n	80036aa <PullAndDrop+0x8aa>
					{
						//RunningTime = 0;
						SpeedCmd = 0; // reset/ stop
 8003682:	4b1c      	ldr	r3, [pc, #112]	; (80036f4 <PullAndDrop+0x8f4>)
 8003684:	f04f 0200 	mov.w	r2, #0
 8003688:	601a      	str	r2, [r3, #0]

						AccRef = - 9.6;
 800368a:	4b18      	ldr	r3, [pc, #96]	; (80036ec <PullAndDrop+0x8ec>)
 800368c:	4a21      	ldr	r2, [pc, #132]	; (8003714 <PullAndDrop+0x914>)
 800368e:	601a      	str	r2, [r3, #0]

						StartDropping = false; //
 8003690:	4b21      	ldr	r3, [pc, #132]	; (8003718 <PullAndDrop+0x918>)
 8003692:	2200      	movs	r2, #0
 8003694:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 8003696:	4b11      	ldr	r3, [pc, #68]	; (80036dc <PullAndDrop+0x8dc>)
 8003698:	2200      	movs	r2, #0
 800369a:	701a      	strb	r2, [r3, #0]
						StopPulseGenerating();
 800369c:	f7fe f95a 	bl	8001954 <StopPulseGenerating>
						CompleteRunning = true;
 80036a0:	4b1e      	ldr	r3, [pc, #120]	; (800371c <PullAndDrop+0x91c>)
 80036a2:	2201      	movs	r2, #1
 80036a4:	701a      	strb	r2, [r3, #0]
						return true;
 80036a6:	2301      	movs	r3, #1
 80036a8:	e000      	b.n	80036ac <PullAndDrop+0x8ac>
					}
				}
				// END BRAKING STAGE
		}
		// END DROPPING TASK.
		return false;
 80036aa:	2300      	movs	r3, #0
	}
}
 80036ac:	4618      	mov	r0, r3
 80036ae:	46bd      	mov	sp, r7
 80036b0:	ecbd 8b02 	vpop	{d8}
 80036b4:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80036b8:	33333333 	.word	0x33333333
 80036bc:	40233333 	.word	0x40233333
 80036c0:	d2f1a9fc 	.word	0xd2f1a9fc
 80036c4:	3f50624d 	.word	0x3f50624d
 80036c8:	33333333 	.word	0x33333333
 80036cc:	c0233333 	.word	0xc0233333
 80036d0:	200004bc 	.word	0x200004bc
 80036d4:	200004b8 	.word	0x200004b8
 80036d8:	2000043a 	.word	0x2000043a
 80036dc:	20000435 	.word	0x20000435
 80036e0:	2000042e 	.word	0x2000042e
 80036e4:	20000474 	.word	0x20000474
 80036e8:	20000460 	.word	0x20000460
 80036ec:	20000010 	.word	0x20000010
 80036f0:	20000004 	.word	0x20000004
 80036f4:	20000500 	.word	0x20000500
 80036f8:	20000458 	.word	0x20000458
 80036fc:	40240000 	.word	0x40240000
 8003700:	20000454 	.word	0x20000454
 8003704:	20000478 	.word	0x20000478
 8003708:	20000003 	.word	0x20000003
 800370c:	2000044a 	.word	0x2000044a
 8003710:	20000464 	.word	0x20000464
 8003714:	c119999a 	.word	0xc119999a
 8003718:	2000042f 	.word	0x2000042f
 800371c:	2000043c 	.word	0x2000043c

08003720 <Dropping>:
bool Dropping() // Dropping Program
// Mode = false -> Manual Running
// Mode = true -> Automatic Running
// return true if finishing, else return false while running
// StoppingDelayTime (ms): the time duration of stopping before pulling
{
 8003720:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003724:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 8003726:	4bb6      	ldr	r3, [pc, #728]	; (8003a00 <Dropping+0x2e0>)
 8003728:	781b      	ldrb	r3, [r3, #0]
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <Dropping+0x12>
	{
		return true;
 800372e:	2301      	movs	r3, #1
 8003730:	e1aa      	b.n	8003a88 <Dropping+0x368>
	}
	else
	{
		if (StartDropping && !StartPulling) // Dropping Stage
 8003732:	4bb4      	ldr	r3, [pc, #720]	; (8003a04 <Dropping+0x2e4>)
 8003734:	781b      	ldrb	r3, [r3, #0]
 8003736:	2b00      	cmp	r3, #0
 8003738:	f000 8112 	beq.w	8003960 <Dropping+0x240>
 800373c:	4bb2      	ldr	r3, [pc, #712]	; (8003a08 <Dropping+0x2e8>)
 800373e:	781b      	ldrb	r3, [r3, #0]
 8003740:	f083 0301 	eor.w	r3, r3, #1
 8003744:	b2db      	uxtb	r3, r3
 8003746:	2b00      	cmp	r3, #0
 8003748:	f000 810a 	beq.w	8003960 <Dropping+0x240>
		{
			if (!StartBraking) // Accelerating Stage
 800374c:	4baf      	ldr	r3, [pc, #700]	; (8003a0c <Dropping+0x2ec>)
 800374e:	781b      	ldrb	r3, [r3, #0]
 8003750:	f083 0301 	eor.w	r3, r3, #1
 8003754:	b2db      	uxtb	r3, r3
 8003756:	2b00      	cmp	r3, #0
 8003758:	d05b      	beq.n	8003812 <Dropping+0xf2>
				// Calculate speed cmd
				//RunningTime += SampleTime;

				// Ramping the reference signal
				// LinearGeneration(&AccRef,8,-9.6+DroppingAccel);
				AccRef = -9.6+DroppingAccel;
 800375a:	4bad      	ldr	r3, [pc, #692]	; (8003a10 <Dropping+0x2f0>)
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	4618      	mov	r0, r3
 8003760:	f7fc fef2 	bl	8000548 <__aeabi_f2d>
 8003764:	a3a0      	add	r3, pc, #640	; (adr r3, 80039e8 <Dropping+0x2c8>)
 8003766:	e9d3 2300 	ldrd	r2, r3, [r3]
 800376a:	f7fc fd8d 	bl	8000288 <__aeabi_dsub>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4610      	mov	r0, r2
 8003774:	4619      	mov	r1, r3
 8003776:	f7fd fa37 	bl	8000be8 <__aeabi_d2f>
 800377a:	4603      	mov	r3, r0
 800377c:	4aa5      	ldr	r2, [pc, #660]	; (8003a14 <Dropping+0x2f4>)
 800377e:	6013      	str	r3, [r2, #0]
				if (IsOpenLoopControl) // Use open-loop control
 8003780:	4ba5      	ldr	r3, [pc, #660]	; (8003a18 <Dropping+0x2f8>)
 8003782:	781b      	ldrb	r3, [r3, #0]
 8003784:	2b00      	cmp	r3, #0
 8003786:	d013      	beq.n	80037b0 <Dropping+0x90>
				{
					//SpeedCmd = LinearSpeedGeneration(RunningTime,DroppingEpsilonAcc,0,0,DroppingMaxSpeed); // Feedforward term
					LinearGeneration(&SpeedCmd,DroppingEpsilonAcc*10,DroppingMaxSpeed); // Feedforward term
 8003788:	4ba4      	ldr	r3, [pc, #656]	; (8003a1c <Dropping+0x2fc>)
 800378a:	edd3 7a00 	vldr	s15, [r3]
 800378e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003792:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003796:	4ba2      	ldr	r3, [pc, #648]	; (8003a20 <Dropping+0x300>)
 8003798:	881b      	ldrh	r3, [r3, #0]
 800379a:	ee07 3a10 	vmov	s14, r3
 800379e:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 80037a2:	eef0 0a47 	vmov.f32	s1, s14
 80037a6:	eeb0 0a67 	vmov.f32	s0, s15
 80037aa:	489e      	ldr	r0, [pc, #632]	; (8003a24 <Dropping+0x304>)
 80037ac:	f7fe f874 	bl	8001898 <LinearGeneration>
//					AccSet = AccSet + AccRef + 9.6;
//					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
//					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,DroppingMaxSpeed); // Feedforward term
//				}

				if (SpeedCmd != 0)
 80037b0:	4b9c      	ldr	r3, [pc, #624]	; (8003a24 <Dropping+0x304>)
 80037b2:	edd3 7a00 	vldr	s15, [r3]
 80037b6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80037ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037be:	d00e      	beq.n	80037de <Dropping+0xbe>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80037c0:	4b99      	ldr	r3, [pc, #612]	; (8003a28 <Dropping+0x308>)
 80037c2:	781b      	ldrb	r3, [r3, #0]
 80037c4:	4a97      	ldr	r2, [pc, #604]	; (8003a24 <Dropping+0x304>)
 80037c6:	edd2 7a00 	vldr	s15, [r2]
 80037ca:	eeb0 0a67 	vmov.f32	s0, s15
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fe f922 	bl	8001a18 <CalculateTimer3Period>
 80037d4:	4603      	mov	r3, r0
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	4b94      	ldr	r3, [pc, #592]	; (8003a2c <Dropping+0x30c>)
 80037da:	801a      	strh	r2, [r3, #0]
 80037dc:	e001      	b.n	80037e2 <Dropping+0xc2>
					//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else
				{
					StopPulseGenerating();
 80037de:	f7fe f8b9 	bl	8001954 <StopPulseGenerating>
				}
				//if (SpeedCmd >= DroppingMaxSpeed || fabs(ObjectPosition) >= DroppingAccelDistance )
				if (ObjectPosition >= DroppingAccelDistance)
 80037e2:	4b93      	ldr	r3, [pc, #588]	; (8003a30 <Dropping+0x310>)
 80037e4:	ed93 7a00 	vldr	s14, [r3]
 80037e8:	4b92      	ldr	r3, [pc, #584]	; (8003a34 <Dropping+0x314>)
 80037ea:	edd3 7a00 	vldr	s15, [r3]
 80037ee:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80037f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80037f6:	f2c0 80b3 	blt.w	8003960 <Dropping+0x240>
				{
					//RunningTime = 0;
					StartBraking = true;
 80037fa:	4b84      	ldr	r3, [pc, #528]	; (8003a0c <Dropping+0x2ec>)
 80037fc:	2201      	movs	r2, #1
 80037fe:	701a      	strb	r2, [r3, #0]
					IntergraError = 0;
 8003800:	4b8d      	ldr	r3, [pc, #564]	; (8003a38 <Dropping+0x318>)
 8003802:	f04f 0200 	mov.w	r2, #0
 8003806:	601a      	str	r2, [r3, #0]
					PreError = 0;
 8003808:	4b8c      	ldr	r3, [pc, #560]	; (8003a3c <Dropping+0x31c>)
 800380a:	f04f 0200 	mov.w	r2, #0
 800380e:	601a      	str	r2, [r3, #0]
 8003810:	e0a6      	b.n	8003960 <Dropping+0x240>
			}
			else // Braking Stage
			{
				//RunningTime += SampleTime;

				AccRef = -9.8-DroppingDecel;
 8003812:	4b8b      	ldr	r3, [pc, #556]	; (8003a40 <Dropping+0x320>)
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	4618      	mov	r0, r3
 8003818:	f7fc fe96 	bl	8000548 <__aeabi_f2d>
 800381c:	4602      	mov	r2, r0
 800381e:	460b      	mov	r3, r1
 8003820:	a173      	add	r1, pc, #460	; (adr r1, 80039f0 <Dropping+0x2d0>)
 8003822:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003826:	f7fc fd2f 	bl	8000288 <__aeabi_dsub>
 800382a:	4602      	mov	r2, r0
 800382c:	460b      	mov	r3, r1
 800382e:	4610      	mov	r0, r2
 8003830:	4619      	mov	r1, r3
 8003832:	f7fd f9d9 	bl	8000be8 <__aeabi_d2f>
 8003836:	4603      	mov	r3, r0
 8003838:	4a76      	ldr	r2, [pc, #472]	; (8003a14 <Dropping+0x2f4>)
 800383a:	6013      	str	r3, [r2, #0]
//				FeedFWSpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,DroppingMaxSpeed,0,DroppingMaxSpeed);
//				PIDSpeedCmd = PIDCalculate(AccRef,AccZ,-850,850, true); // PID term

				//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,TransitionSpeed,0,TransitionSpeed);
				//SpeedCmd = LinearGeneration(RunningTime,-DroppingEpsilonDec*10,TransitionSpeed,0,TransitionSpeed);
				SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 800383c:	4b79      	ldr	r3, [pc, #484]	; (8003a24 <Dropping+0x304>)
 800383e:	681b      	ldr	r3, [r3, #0]
 8003840:	4618      	mov	r0, r3
 8003842:	f7fc fe81 	bl	8000548 <__aeabi_f2d>
 8003846:	4604      	mov	r4, r0
 8003848:	460d      	mov	r5, r1
 800384a:	4b7e      	ldr	r3, [pc, #504]	; (8003a44 <Dropping+0x324>)
 800384c:	781b      	ldrb	r3, [r3, #0]
 800384e:	4618      	mov	r0, r3
 8003850:	f7fc fe68 	bl	8000524 <__aeabi_i2d>
 8003854:	a368      	add	r3, pc, #416	; (adr r3, 80039f8 <Dropping+0x2d8>)
 8003856:	e9d3 2300 	ldrd	r2, r3, [r3]
 800385a:	f7fc fecd 	bl	80005f8 <__aeabi_dmul>
 800385e:	4602      	mov	r2, r0
 8003860:	460b      	mov	r3, r1
 8003862:	4690      	mov	r8, r2
 8003864:	4699      	mov	r9, r3
 8003866:	4b6b      	ldr	r3, [pc, #428]	; (8003a14 <Dropping+0x2f4>)
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	4618      	mov	r0, r3
 800386c:	f7fc fe6c 	bl	8000548 <__aeabi_f2d>
 8003870:	a35d      	add	r3, pc, #372	; (adr r3, 80039e8 <Dropping+0x2c8>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f7fc fd09 	bl	800028c <__adddf3>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4640      	mov	r0, r8
 8003880:	4649      	mov	r1, r9
 8003882:	f7fc feb9 	bl	80005f8 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f04f 0200 	mov.w	r2, #0
 8003892:	4b6d      	ldr	r3, [pc, #436]	; (8003a48 <Dropping+0x328>)
 8003894:	f7fc feb0 	bl	80005f8 <__aeabi_dmul>
 8003898:	4602      	mov	r2, r0
 800389a:	460b      	mov	r3, r1
 800389c:	4690      	mov	r8, r2
 800389e:	4699      	mov	r9, r3
 80038a0:	4b6a      	ldr	r3, [pc, #424]	; (8003a4c <Dropping+0x32c>)
 80038a2:	681b      	ldr	r3, [r3, #0]
 80038a4:	4618      	mov	r0, r3
 80038a6:	f7fc fe4f 	bl	8000548 <__aeabi_f2d>
 80038aa:	4602      	mov	r2, r0
 80038ac:	460b      	mov	r3, r1
 80038ae:	4640      	mov	r0, r8
 80038b0:	4649      	mov	r1, r9
 80038b2:	f7fc ffcb 	bl	800084c <__aeabi_ddiv>
 80038b6:	4602      	mov	r2, r0
 80038b8:	460b      	mov	r3, r1
 80038ba:	4620      	mov	r0, r4
 80038bc:	4629      	mov	r1, r5
 80038be:	f7fc fce5 	bl	800028c <__adddf3>
 80038c2:	4602      	mov	r2, r0
 80038c4:	460b      	mov	r3, r1
 80038c6:	4610      	mov	r0, r2
 80038c8:	4619      	mov	r1, r3
 80038ca:	f7fd f98d 	bl	8000be8 <__aeabi_d2f>
 80038ce:	4603      	mov	r3, r0
 80038d0:	4a54      	ldr	r2, [pc, #336]	; (8003a24 <Dropping+0x304>)
 80038d2:	6013      	str	r3, [r2, #0]
				if (SpeedCmd <= 0)
 80038d4:	4b53      	ldr	r3, [pc, #332]	; (8003a24 <Dropping+0x304>)
 80038d6:	edd3 7a00 	vldr	s15, [r3]
 80038da:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80038de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038e2:	d803      	bhi.n	80038ec <Dropping+0x1cc>
					SpeedCmd = 0;
 80038e4:	4b4f      	ldr	r3, [pc, #316]	; (8003a24 <Dropping+0x304>)
 80038e6:	f04f 0200 	mov.w	r2, #0
 80038ea:	601a      	str	r2, [r3, #0]
				if (SpeedCmd >= 810)
 80038ec:	4b4d      	ldr	r3, [pc, #308]	; (8003a24 <Dropping+0x304>)
 80038ee:	edd3 7a00 	vldr	s15, [r3]
 80038f2:	ed9f 7a57 	vldr	s14, [pc, #348]	; 8003a50 <Dropping+0x330>
 80038f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80038fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80038fe:	db02      	blt.n	8003906 <Dropping+0x1e6>
					SpeedCmd = 810;
 8003900:	4b48      	ldr	r3, [pc, #288]	; (8003a24 <Dropping+0x304>)
 8003902:	4a54      	ldr	r2, [pc, #336]	; (8003a54 <Dropping+0x334>)
 8003904:	601a      	str	r2, [r3, #0]

				if (SpeedCmd != 0)
 8003906:	4b47      	ldr	r3, [pc, #284]	; (8003a24 <Dropping+0x304>)
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003910:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003914:	d00e      	beq.n	8003934 <Dropping+0x214>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003916:	4b44      	ldr	r3, [pc, #272]	; (8003a28 <Dropping+0x308>)
 8003918:	781b      	ldrb	r3, [r3, #0]
 800391a:	4a42      	ldr	r2, [pc, #264]	; (8003a24 <Dropping+0x304>)
 800391c:	edd2 7a00 	vldr	s15, [r2]
 8003920:	eeb0 0a67 	vmov.f32	s0, s15
 8003924:	4618      	mov	r0, r3
 8003926:	f7fe f877 	bl	8001a18 <CalculateTimer3Period>
 800392a:	4603      	mov	r3, r0
 800392c:	b29a      	uxth	r2, r3
 800392e:	4b3f      	ldr	r3, [pc, #252]	; (8003a2c <Dropping+0x30c>)
 8003930:	801a      	strh	r2, [r3, #0]
 8003932:	e001      	b.n	8003938 <Dropping+0x218>
					// Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else
				{
					StopPulseGenerating();
 8003934:	f7fe f80e 	bl	8001954 <StopPulseGenerating>
				}
				if (SpeedCmd <= 0) // Stop braking
 8003938:	4b3a      	ldr	r3, [pc, #232]	; (8003a24 <Dropping+0x304>)
 800393a:	edd3 7a00 	vldr	s15, [r3]
 800393e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003942:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003946:	d80b      	bhi.n	8003960 <Dropping+0x240>
				{
					StopPulseGenerating();
 8003948:	f7fe f804 	bl	8001954 <StopPulseGenerating>
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 800394c:	4b35      	ldr	r3, [pc, #212]	; (8003a24 <Dropping+0x304>)
 800394e:	f04f 0200 	mov.w	r2, #0
 8003952:	601a      	str	r2, [r3, #0]
					//AccRef = - 9.8;

					StartDropping = false; //
 8003954:	4b2b      	ldr	r3, [pc, #172]	; (8003a04 <Dropping+0x2e4>)
 8003956:	2200      	movs	r2, #0
 8003958:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 800395a:	4b2c      	ldr	r3, [pc, #176]	; (8003a0c <Dropping+0x2ec>)
 800395c:	2200      	movs	r2, #0
 800395e:	701a      	strb	r2, [r3, #0]
				}
			}
		}
		if (!StartDropping && !StartPulling) // Waiting for some seconds before pulling up
 8003960:	4b28      	ldr	r3, [pc, #160]	; (8003a04 <Dropping+0x2e4>)
 8003962:	781b      	ldrb	r3, [r3, #0]
 8003964:	f083 0301 	eor.w	r3, r3, #1
 8003968:	b2db      	uxtb	r3, r3
 800396a:	2b00      	cmp	r3, #0
 800396c:	d019      	beq.n	80039a2 <Dropping+0x282>
 800396e:	4b26      	ldr	r3, [pc, #152]	; (8003a08 <Dropping+0x2e8>)
 8003970:	781b      	ldrb	r3, [r3, #0]
 8003972:	f083 0301 	eor.w	r3, r3, #1
 8003976:	b2db      	uxtb	r3, r3
 8003978:	2b00      	cmp	r3, #0
 800397a:	d012      	beq.n	80039a2 <Dropping+0x282>
		{
	//		POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);
	//		if (POSReach) // Check if position is reached or not
	//		{

				if (WaitingMiliSecond(StoppingTime)) // Wait some second
 800397c:	4b36      	ldr	r3, [pc, #216]	; (8003a58 <Dropping+0x338>)
 800397e:	881b      	ldrh	r3, [r3, #0]
 8003980:	4618      	mov	r0, r3
 8003982:	f7fe f823 	bl	80019cc <WaitingMiliSecond>
 8003986:	4603      	mov	r3, r0
 8003988:	2b00      	cmp	r3, #0
 800398a:	d00a      	beq.n	80039a2 <Dropping+0x282>
				{
					// Change to pulling stage
					StartPulling = true;
 800398c:	4b1e      	ldr	r3, [pc, #120]	; (8003a08 <Dropping+0x2e8>)
 800398e:	2201      	movs	r2, #1
 8003990:	701a      	strb	r2, [r3, #0]
					//Timer3CountPeriod = CalculateTimer3Period(MotorDriver, PullingSpeed);
					// Timer3CountPeriod = (int)((float)(120000000.0/((float)PullingSpeed*(float)EncoderResolution)) + 0.5);
					// Start pulling to the home position
	//				StepPulseCmd = (int)MotorEncPulse/8; // calculate # of pulse cmd to return to the top postion
	//				IsStepPulseCmd = true;
					PRIsToggled = true;	// true = Pulling
 8003992:	4b32      	ldr	r3, [pc, #200]	; (8003a5c <Dropping+0x33c>)
 8003994:	2201      	movs	r2, #1
 8003996:	701a      	strb	r2, [r3, #0]

					//Start Running
					Direction = false; // pulling up direction
 8003998:	4b31      	ldr	r3, [pc, #196]	; (8003a60 <Dropping+0x340>)
 800399a:	2200      	movs	r2, #0
 800399c:	701a      	strb	r2, [r3, #0]
					StartPulseGenerating();
 800399e:	f7fd fff7 	bl	8001990 <StartPulseGenerating>
	//				DisableSTOP();
				}
	//		}
		}

		if (!StartDropping && StartPulling) // Pulling Stage
 80039a2:	4b18      	ldr	r3, [pc, #96]	; (8003a04 <Dropping+0x2e4>)
 80039a4:	781b      	ldrb	r3, [r3, #0]
 80039a6:	f083 0301 	eor.w	r3, r3, #1
 80039aa:	b2db      	uxtb	r3, r3
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d06a      	beq.n	8003a86 <Dropping+0x366>
 80039b0:	4b15      	ldr	r3, [pc, #84]	; (8003a08 <Dropping+0x2e8>)
 80039b2:	781b      	ldrb	r3, [r3, #0]
 80039b4:	2b00      	cmp	r3, #0
 80039b6:	d066      	beq.n	8003a86 <Dropping+0x366>
		{
			if (MotorDriver) // FDA7000, big model
 80039b8:	4b1b      	ldr	r3, [pc, #108]	; (8003a28 <Dropping+0x308>)
 80039ba:	781b      	ldrb	r3, [r3, #0]
 80039bc:	2b00      	cmp	r3, #0
 80039be:	d051      	beq.n	8003a64 <Dropping+0x344>
			{
				if (CheckGoingToRefPosition(false, 0))
 80039c0:	2100      	movs	r1, #0
 80039c2:	2000      	movs	r0, #0
 80039c4:	f7fe f8b4 	bl	8001b30 <CheckGoingToRefPosition>
 80039c8:	4603      	mov	r3, r0
 80039ca:	2b00      	cmp	r3, #0
 80039cc:	d05b      	beq.n	8003a86 <Dropping+0x366>
				{
		//			POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);
		//			if (POSReach) // Reaching to the top/home postion
		//			{
						StartPulling = false;
 80039ce:	4b0e      	ldr	r3, [pc, #56]	; (8003a08 <Dropping+0x2e8>)
 80039d0:	2200      	movs	r2, #0
 80039d2:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <Dropping+0x2e0>)
 80039d6:	2201      	movs	r2, #1
 80039d8:	701a      	strb	r2, [r3, #0]

						StopPulseGenerating();
 80039da:	f7fd ffbb 	bl	8001954 <StopPulseGenerating>
						return true;
 80039de:	2301      	movs	r3, #1
 80039e0:	e052      	b.n	8003a88 <Dropping+0x368>
 80039e2:	bf00      	nop
 80039e4:	f3af 8000 	nop.w
 80039e8:	33333333 	.word	0x33333333
 80039ec:	40233333 	.word	0x40233333
 80039f0:	9999999a 	.word	0x9999999a
 80039f4:	c0239999 	.word	0xc0239999
 80039f8:	d2f1a9fc 	.word	0xd2f1a9fc
 80039fc:	3f50624d 	.word	0x3f50624d
 8003a00:	2000043c 	.word	0x2000043c
 8003a04:	2000042f 	.word	0x2000042f
 8003a08:	20000434 	.word	0x20000434
 8003a0c:	20000435 	.word	0x20000435
 8003a10:	20000460 	.word	0x20000460
 8003a14:	20000010 	.word	0x20000010
 8003a18:	20000004 	.word	0x20000004
 8003a1c:	20000468 	.word	0x20000468
 8003a20:	20000478 	.word	0x20000478
 8003a24:	20000500 	.word	0x20000500
 8003a28:	20000003 	.word	0x20000003
 8003a2c:	2000044a 	.word	0x2000044a
 8003a30:	2000053c 	.word	0x2000053c
 8003a34:	2000047c 	.word	0x2000047c
 8003a38:	20000530 	.word	0x20000530
 8003a3c:	20000538 	.word	0x20000538
 8003a40:	20000464 	.word	0x20000464
 8003a44:	20000458 	.word	0x20000458
 8003a48:	40240000 	.word	0x40240000
 8003a4c:	20000454 	.word	0x20000454
 8003a50:	444a8000 	.word	0x444a8000
 8003a54:	444a8000 	.word	0x444a8000
 8003a58:	2000045a 	.word	0x2000045a
 8003a5c:	20000441 	.word	0x20000441
 8003a60:	20000432 	.word	0x20000432
		//			}
				}
			}
			else // ASDA A3
			{
				if (CheckGoingToRefPosition(false, 0))
 8003a64:	2100      	movs	r1, #0
 8003a66:	2000      	movs	r0, #0
 8003a68:	f7fe f862 	bl	8001b30 <CheckGoingToRefPosition>
 8003a6c:	4603      	mov	r3, r0
 8003a6e:	2b00      	cmp	r3, #0
 8003a70:	d009      	beq.n	8003a86 <Dropping+0x366>
				{
						StartPulling = false;
 8003a72:	4b07      	ldr	r3, [pc, #28]	; (8003a90 <Dropping+0x370>)
 8003a74:	2200      	movs	r2, #0
 8003a76:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 8003a78:	4b06      	ldr	r3, [pc, #24]	; (8003a94 <Dropping+0x374>)
 8003a7a:	2201      	movs	r2, #1
 8003a7c:	701a      	strb	r2, [r3, #0]

						StopPulseGenerating();
 8003a7e:	f7fd ff69 	bl	8001954 <StopPulseGenerating>
						return true;
 8003a82:	2301      	movs	r3, #1
 8003a84:	e000      	b.n	8003a88 <Dropping+0x368>
				}
			}
		}
		return false;
 8003a86:	2300      	movs	r3, #0
	}
}
 8003a88:	4618      	mov	r0, r3
 8003a8a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003a8e:	bf00      	nop
 8003a90:	20000434 	.word	0x20000434
 8003a94:	2000043c 	.word	0x2000043c

08003a98 <StopExperiment>:

void StopExperiment ()
{
 8003a98:	b580      	push	{r7, lr}
 8003a9a:	af00      	add	r7, sp, #0
	TargetPosition = 0;
 8003a9c:	4b14      	ldr	r3, [pc, #80]	; (8003af0 <StopExperiment+0x58>)
 8003a9e:	2200      	movs	r2, #0
 8003aa0:	601a      	str	r2, [r3, #0]
	PositionPulseCmd = 0;
 8003aa2:	4b14      	ldr	r3, [pc, #80]	; (8003af4 <StopExperiment+0x5c>)
 8003aa4:	2200      	movs	r2, #0
 8003aa6:	601a      	str	r2, [r3, #0]
	StartPulseCmdCounting = false;
 8003aa8:	4b13      	ldr	r3, [pc, #76]	; (8003af8 <StopExperiment+0x60>)
 8003aaa:	2200      	movs	r2, #0
 8003aac:	701a      	strb	r2, [r3, #0]
	IsReachTargetPosition = false;
 8003aae:	4b13      	ldr	r3, [pc, #76]	; (8003afc <StopExperiment+0x64>)
 8003ab0:	2200      	movs	r2, #0
 8003ab2:	701a      	strb	r2, [r3, #0]

	// Reset all the flag and state
	StartRunning = false;
 8003ab4:	4b12      	ldr	r3, [pc, #72]	; (8003b00 <StopExperiment+0x68>)
 8003ab6:	2200      	movs	r2, #0
 8003ab8:	701a      	strb	r2, [r3, #0]
	StartSimulating = false;
 8003aba:	4b12      	ldr	r3, [pc, #72]	; (8003b04 <StopExperiment+0x6c>)
 8003abc:	2200      	movs	r2, #0
 8003abe:	701a      	strb	r2, [r3, #0]
	StartDropping = false;
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <StopExperiment+0x70>)
 8003ac2:	2200      	movs	r2, #0
 8003ac4:	701a      	strb	r2, [r3, #0]
	StartPulling = false;
 8003ac6:	4b11      	ldr	r3, [pc, #68]	; (8003b0c <StopExperiment+0x74>)
 8003ac8:	2200      	movs	r2, #0
 8003aca:	701a      	strb	r2, [r3, #0]
	StartBraking = false;
 8003acc:	4b10      	ldr	r3, [pc, #64]	; (8003b10 <StopExperiment+0x78>)
 8003ace:	2200      	movs	r2, #0
 8003ad0:	701a      	strb	r2, [r3, #0]
	StartAccleratePulling = false;
 8003ad2:	4b10      	ldr	r3, [pc, #64]	; (8003b14 <StopExperiment+0x7c>)
 8003ad4:	2200      	movs	r2, #0
 8003ad6:	701a      	strb	r2, [r3, #0]
	StopPulseGenerating(); // Stop pulse generation
 8003ad8:	f7fd ff3c 	bl	8001954 <StopPulseGenerating>
	Timer3CountPeriod = 0;
 8003adc:	4b0e      	ldr	r3, [pc, #56]	; (8003b18 <StopExperiment+0x80>)
 8003ade:	2200      	movs	r2, #0
 8003ae0:	801a      	strh	r2, [r3, #0]
	SpeedCmd = 0;
 8003ae2:	4b0e      	ldr	r3, [pc, #56]	; (8003b1c <StopExperiment+0x84>)
 8003ae4:	f04f 0200 	mov.w	r2, #0
 8003ae8:	601a      	str	r2, [r3, #0]
}
 8003aea:	bf00      	nop
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	bf00      	nop
 8003af0:	200004b8 	.word	0x200004b8
 8003af4:	200004bc 	.word	0x200004bc
 8003af8:	2000042e 	.word	0x2000042e
 8003afc:	2000043a 	.word	0x2000043a
 8003b00:	20000430 	.word	0x20000430
 8003b04:	20000431 	.word	0x20000431
 8003b08:	2000042f 	.word	0x2000042f
 8003b0c:	20000434 	.word	0x20000434
 8003b10:	20000435 	.word	0x20000435
 8003b14:	2000043b 	.word	0x2000043b
 8003b18:	2000044a 	.word	0x2000044a
 8003b1c:	20000500 	.word	0x20000500

08003b20 <CalculateRunningSpec>:
void CalculateRunningSpec () // Calculate running parameters
{
 8003b20:	b5b0      	push	{r4, r5, r7, lr}
 8003b22:	af00      	add	r7, sp, #0
	GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8003b24:	4bd4      	ldr	r3, [pc, #848]	; (8003e78 <CalculateRunningSpec+0x358>)
 8003b26:	781b      	ldrb	r3, [r3, #0]
 8003b28:	4618      	mov	r0, r3
 8003b2a:	f7fc fcfb 	bl	8000524 <__aeabi_i2d>
 8003b2e:	a3c8      	add	r3, pc, #800	; (adr r3, 8003e50 <CalculateRunningSpec+0x330>)
 8003b30:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003b34:	f7fc fd60 	bl	80005f8 <__aeabi_dmul>
 8003b38:	4602      	mov	r2, r0
 8003b3a:	460b      	mov	r3, r1
 8003b3c:	4610      	mov	r0, r2
 8003b3e:	4619      	mov	r1, r3
 8003b40:	f04f 0200 	mov.w	r2, #0
 8003b44:	4bcd      	ldr	r3, [pc, #820]	; (8003e7c <CalculateRunningSpec+0x35c>)
 8003b46:	f7fc fe81 	bl	800084c <__aeabi_ddiv>
 8003b4a:	4602      	mov	r2, r0
 8003b4c:	460b      	mov	r3, r1
 8003b4e:	4610      	mov	r0, r2
 8003b50:	4619      	mov	r1, r3
 8003b52:	f7fd f849 	bl	8000be8 <__aeabi_d2f>
 8003b56:	4603      	mov	r3, r0
 8003b58:	4ac9      	ldr	r2, [pc, #804]	; (8003e80 <CalculateRunningSpec+0x360>)
 8003b5a:	6013      	str	r3, [r2, #0]

	// Dropping Stage Calculations
	DroppingMaxSpeed = (uint16_t)(10*sqrt(2*DroppingAccel*DroppingAccelDistance)/(DrumRadius)); // in rpm; 10~60/2pi
 8003b5c:	4bc9      	ldr	r3, [pc, #804]	; (8003e84 <CalculateRunningSpec+0x364>)
 8003b5e:	edd3 7a00 	vldr	s15, [r3]
 8003b62:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003b66:	4bc8      	ldr	r3, [pc, #800]	; (8003e88 <CalculateRunningSpec+0x368>)
 8003b68:	edd3 7a00 	vldr	s15, [r3]
 8003b6c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003b70:	ee17 0a90 	vmov	r0, s15
 8003b74:	f7fc fce8 	bl	8000548 <__aeabi_f2d>
 8003b78:	4602      	mov	r2, r0
 8003b7a:	460b      	mov	r3, r1
 8003b7c:	ec43 2b10 	vmov	d0, r2, r3
 8003b80:	f00a ff46 	bl	800ea10 <sqrt>
 8003b84:	ec51 0b10 	vmov	r0, r1, d0
 8003b88:	f04f 0200 	mov.w	r2, #0
 8003b8c:	4bbf      	ldr	r3, [pc, #764]	; (8003e8c <CalculateRunningSpec+0x36c>)
 8003b8e:	f7fc fd33 	bl	80005f8 <__aeabi_dmul>
 8003b92:	4602      	mov	r2, r0
 8003b94:	460b      	mov	r3, r1
 8003b96:	4614      	mov	r4, r2
 8003b98:	461d      	mov	r5, r3
 8003b9a:	4bbd      	ldr	r3, [pc, #756]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4618      	mov	r0, r3
 8003ba0:	f7fc fcd2 	bl	8000548 <__aeabi_f2d>
 8003ba4:	4602      	mov	r2, r0
 8003ba6:	460b      	mov	r3, r1
 8003ba8:	4620      	mov	r0, r4
 8003baa:	4629      	mov	r1, r5
 8003bac:	f7fc fe4e 	bl	800084c <__aeabi_ddiv>
 8003bb0:	4602      	mov	r2, r0
 8003bb2:	460b      	mov	r3, r1
 8003bb4:	4610      	mov	r0, r2
 8003bb6:	4619      	mov	r1, r3
 8003bb8:	f7fc fff6 	bl	8000ba8 <__aeabi_d2uiz>
 8003bbc:	4603      	mov	r3, r0
 8003bbe:	b29a      	uxth	r2, r3
 8003bc0:	4bb4      	ldr	r3, [pc, #720]	; (8003e94 <CalculateRunningSpec+0x374>)
 8003bc2:	801a      	strh	r2, [r3, #0]
	DroppingEpsilonAcc = DroppingAccel/DrumRadius;
 8003bc4:	4baf      	ldr	r3, [pc, #700]	; (8003e84 <CalculateRunningSpec+0x364>)
 8003bc6:	edd3 6a00 	vldr	s13, [r3]
 8003bca:	4bb1      	ldr	r3, [pc, #708]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003bcc:	ed93 7a00 	vldr	s14, [r3]
 8003bd0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bd4:	4bb0      	ldr	r3, [pc, #704]	; (8003e98 <CalculateRunningSpec+0x378>)
 8003bd6:	edc3 7a00 	vstr	s15, [r3]
	DroppingEpsilonDec = DroppingDecel/DrumRadius;
 8003bda:	4bb0      	ldr	r3, [pc, #704]	; (8003e9c <CalculateRunningSpec+0x37c>)
 8003bdc:	edd3 6a00 	vldr	s13, [r3]
 8003be0:	4bab      	ldr	r3, [pc, #684]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003be2:	ed93 7a00 	vldr	s14, [r3]
 8003be6:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003bea:	4bad      	ldr	r3, [pc, #692]	; (8003ea0 <CalculateRunningSpec+0x380>)
 8003bec:	edc3 7a00 	vstr	s15, [r3]

	DroppingDecelDistance = (pow(DroppingMaxSpeed*2*3.14*DrumRadius/60,2))/(2*DroppingDecel); // unit: m
 8003bf0:	4ba8      	ldr	r3, [pc, #672]	; (8003e94 <CalculateRunningSpec+0x374>)
 8003bf2:	881b      	ldrh	r3, [r3, #0]
 8003bf4:	005b      	lsls	r3, r3, #1
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	f7fc fc94 	bl	8000524 <__aeabi_i2d>
 8003bfc:	a396      	add	r3, pc, #600	; (adr r3, 8003e58 <CalculateRunningSpec+0x338>)
 8003bfe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003c02:	f7fc fcf9 	bl	80005f8 <__aeabi_dmul>
 8003c06:	4602      	mov	r2, r0
 8003c08:	460b      	mov	r3, r1
 8003c0a:	4614      	mov	r4, r2
 8003c0c:	461d      	mov	r5, r3
 8003c0e:	4ba0      	ldr	r3, [pc, #640]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003c10:	681b      	ldr	r3, [r3, #0]
 8003c12:	4618      	mov	r0, r3
 8003c14:	f7fc fc98 	bl	8000548 <__aeabi_f2d>
 8003c18:	4602      	mov	r2, r0
 8003c1a:	460b      	mov	r3, r1
 8003c1c:	4620      	mov	r0, r4
 8003c1e:	4629      	mov	r1, r5
 8003c20:	f7fc fcea 	bl	80005f8 <__aeabi_dmul>
 8003c24:	4602      	mov	r2, r0
 8003c26:	460b      	mov	r3, r1
 8003c28:	4610      	mov	r0, r2
 8003c2a:	4619      	mov	r1, r3
 8003c2c:	f04f 0200 	mov.w	r2, #0
 8003c30:	4b9c      	ldr	r3, [pc, #624]	; (8003ea4 <CalculateRunningSpec+0x384>)
 8003c32:	f7fc fe0b 	bl	800084c <__aeabi_ddiv>
 8003c36:	4602      	mov	r2, r0
 8003c38:	460b      	mov	r3, r1
 8003c3a:	ec43 2b17 	vmov	d7, r2, r3
 8003c3e:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8003e60 <CalculateRunningSpec+0x340>
 8003c42:	eeb0 0a47 	vmov.f32	s0, s14
 8003c46:	eef0 0a67 	vmov.f32	s1, s15
 8003c4a:	f00a fe71 	bl	800e930 <pow>
 8003c4e:	ec55 4b10 	vmov	r4, r5, d0
 8003c52:	4b92      	ldr	r3, [pc, #584]	; (8003e9c <CalculateRunningSpec+0x37c>)
 8003c54:	edd3 7a00 	vldr	s15, [r3]
 8003c58:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003c5c:	ee17 0a90 	vmov	r0, s15
 8003c60:	f7fc fc72 	bl	8000548 <__aeabi_f2d>
 8003c64:	4602      	mov	r2, r0
 8003c66:	460b      	mov	r3, r1
 8003c68:	4620      	mov	r0, r4
 8003c6a:	4629      	mov	r1, r5
 8003c6c:	f7fc fdee 	bl	800084c <__aeabi_ddiv>
 8003c70:	4602      	mov	r2, r0
 8003c72:	460b      	mov	r3, r1
 8003c74:	4610      	mov	r0, r2
 8003c76:	4619      	mov	r1, r3
 8003c78:	f7fc ffb6 	bl	8000be8 <__aeabi_d2f>
 8003c7c:	4603      	mov	r3, r0
 8003c7e:	4a8a      	ldr	r2, [pc, #552]	; (8003ea8 <CalculateRunningSpec+0x388>)
 8003c80:	6013      	str	r3, [r2, #0]
	DroppingDecelPulseCmd = ((int)(EncoderResolution*DroppingDecelDistance/(2*3.14*DrumRadius))); // unit: pulses
 8003c82:	4b8a      	ldr	r3, [pc, #552]	; (8003eac <CalculateRunningSpec+0x38c>)
 8003c84:	881b      	ldrh	r3, [r3, #0]
 8003c86:	ee07 3a90 	vmov	s15, r3
 8003c8a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003c8e:	4b86      	ldr	r3, [pc, #536]	; (8003ea8 <CalculateRunningSpec+0x388>)
 8003c90:	edd3 7a00 	vldr	s15, [r3]
 8003c94:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003c98:	ee17 0a90 	vmov	r0, s15
 8003c9c:	f7fc fc54 	bl	8000548 <__aeabi_f2d>
 8003ca0:	4604      	mov	r4, r0
 8003ca2:	460d      	mov	r5, r1
 8003ca4:	4b7a      	ldr	r3, [pc, #488]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003ca6:	681b      	ldr	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fc fc4d 	bl	8000548 <__aeabi_f2d>
 8003cae:	a36e      	add	r3, pc, #440	; (adr r3, 8003e68 <CalculateRunningSpec+0x348>)
 8003cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003cb4:	f7fc fca0 	bl	80005f8 <__aeabi_dmul>
 8003cb8:	4602      	mov	r2, r0
 8003cba:	460b      	mov	r3, r1
 8003cbc:	4620      	mov	r0, r4
 8003cbe:	4629      	mov	r1, r5
 8003cc0:	f7fc fdc4 	bl	800084c <__aeabi_ddiv>
 8003cc4:	4602      	mov	r2, r0
 8003cc6:	460b      	mov	r3, r1
 8003cc8:	4610      	mov	r0, r2
 8003cca:	4619      	mov	r1, r3
 8003ccc:	f7fc ff44 	bl	8000b58 <__aeabi_d2iz>
 8003cd0:	4603      	mov	r3, r0
 8003cd2:	4a77      	ldr	r2, [pc, #476]	; (8003eb0 <CalculateRunningSpec+0x390>)
 8003cd4:	6013      	str	r3, [r2, #0]

	BottomFreeDropPulseCmd = ((int)(EncoderResolution*DroppingAccelDistance/(2*3.14*DrumRadius)));
 8003cd6:	4b75      	ldr	r3, [pc, #468]	; (8003eac <CalculateRunningSpec+0x38c>)
 8003cd8:	881b      	ldrh	r3, [r3, #0]
 8003cda:	ee07 3a90 	vmov	s15, r3
 8003cde:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003ce2:	4b69      	ldr	r3, [pc, #420]	; (8003e88 <CalculateRunningSpec+0x368>)
 8003ce4:	edd3 7a00 	vldr	s15, [r3]
 8003ce8:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003cec:	ee17 0a90 	vmov	r0, s15
 8003cf0:	f7fc fc2a 	bl	8000548 <__aeabi_f2d>
 8003cf4:	4604      	mov	r4, r0
 8003cf6:	460d      	mov	r5, r1
 8003cf8:	4b65      	ldr	r3, [pc, #404]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003cfa:	681b      	ldr	r3, [r3, #0]
 8003cfc:	4618      	mov	r0, r3
 8003cfe:	f7fc fc23 	bl	8000548 <__aeabi_f2d>
 8003d02:	a359      	add	r3, pc, #356	; (adr r3, 8003e68 <CalculateRunningSpec+0x348>)
 8003d04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003d08:	f7fc fc76 	bl	80005f8 <__aeabi_dmul>
 8003d0c:	4602      	mov	r2, r0
 8003d0e:	460b      	mov	r3, r1
 8003d10:	4620      	mov	r0, r4
 8003d12:	4629      	mov	r1, r5
 8003d14:	f7fc fd9a 	bl	800084c <__aeabi_ddiv>
 8003d18:	4602      	mov	r2, r0
 8003d1a:	460b      	mov	r3, r1
 8003d1c:	4610      	mov	r0, r2
 8003d1e:	4619      	mov	r1, r3
 8003d20:	f7fc ff1a 	bl	8000b58 <__aeabi_d2iz>
 8003d24:	4603      	mov	r3, r0
 8003d26:	4a63      	ldr	r2, [pc, #396]	; (8003eb4 <CalculateRunningSpec+0x394>)
 8003d28:	6013      	str	r3, [r2, #0]

	// Pulling Stage Calculations
	PullingMaxSpeed = (uint16_t)(9.5*sqrt(2*PullingAccel*PullingAccelDistance)/(DrumRadius)); // in rpm
 8003d2a:	4b63      	ldr	r3, [pc, #396]	; (8003eb8 <CalculateRunningSpec+0x398>)
 8003d2c:	edd3 7a00 	vldr	s15, [r3]
 8003d30:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003d34:	4b61      	ldr	r3, [pc, #388]	; (8003ebc <CalculateRunningSpec+0x39c>)
 8003d36:	edd3 7a00 	vldr	s15, [r3]
 8003d3a:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003d3e:	ee17 0a90 	vmov	r0, s15
 8003d42:	f7fc fc01 	bl	8000548 <__aeabi_f2d>
 8003d46:	4602      	mov	r2, r0
 8003d48:	460b      	mov	r3, r1
 8003d4a:	ec43 2b10 	vmov	d0, r2, r3
 8003d4e:	f00a fe5f 	bl	800ea10 <sqrt>
 8003d52:	ec51 0b10 	vmov	r0, r1, d0
 8003d56:	f04f 0200 	mov.w	r2, #0
 8003d5a:	4b59      	ldr	r3, [pc, #356]	; (8003ec0 <CalculateRunningSpec+0x3a0>)
 8003d5c:	f7fc fc4c 	bl	80005f8 <__aeabi_dmul>
 8003d60:	4602      	mov	r2, r0
 8003d62:	460b      	mov	r3, r1
 8003d64:	4614      	mov	r4, r2
 8003d66:	461d      	mov	r5, r3
 8003d68:	4b49      	ldr	r3, [pc, #292]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003d6a:	681b      	ldr	r3, [r3, #0]
 8003d6c:	4618      	mov	r0, r3
 8003d6e:	f7fc fbeb 	bl	8000548 <__aeabi_f2d>
 8003d72:	4602      	mov	r2, r0
 8003d74:	460b      	mov	r3, r1
 8003d76:	4620      	mov	r0, r4
 8003d78:	4629      	mov	r1, r5
 8003d7a:	f7fc fd67 	bl	800084c <__aeabi_ddiv>
 8003d7e:	4602      	mov	r2, r0
 8003d80:	460b      	mov	r3, r1
 8003d82:	4610      	mov	r0, r2
 8003d84:	4619      	mov	r1, r3
 8003d86:	f7fc ff0f 	bl	8000ba8 <__aeabi_d2uiz>
 8003d8a:	4603      	mov	r3, r0
 8003d8c:	b29a      	uxth	r2, r3
 8003d8e:	4b4d      	ldr	r3, [pc, #308]	; (8003ec4 <CalculateRunningSpec+0x3a4>)
 8003d90:	801a      	strh	r2, [r3, #0]
	PullingEpsilonAcc = PullingAccel/DrumRadius;
 8003d92:	4b49      	ldr	r3, [pc, #292]	; (8003eb8 <CalculateRunningSpec+0x398>)
 8003d94:	edd3 6a00 	vldr	s13, [r3]
 8003d98:	4b3d      	ldr	r3, [pc, #244]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003d9a:	ed93 7a00 	vldr	s14, [r3]
 8003d9e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003da2:	4b49      	ldr	r3, [pc, #292]	; (8003ec8 <CalculateRunningSpec+0x3a8>)
 8003da4:	edc3 7a00 	vstr	s15, [r3]
	PullingEpsilonDec = PullingDecel/DrumRadius;
 8003da8:	4b48      	ldr	r3, [pc, #288]	; (8003ecc <CalculateRunningSpec+0x3ac>)
 8003daa:	edd3 6a00 	vldr	s13, [r3]
 8003dae:	4b38      	ldr	r3, [pc, #224]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003db0:	ed93 7a00 	vldr	s14, [r3]
 8003db4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003db8:	4b45      	ldr	r3, [pc, #276]	; (8003ed0 <CalculateRunningSpec+0x3b0>)
 8003dba:	edc3 7a00 	vstr	s15, [r3]

	PullingDecelTime = (PullingMaxSpeed * (2*3.14/60) * DrumRadius) / PullingDecel; //Motor Deceleration time
 8003dbe:	4b41      	ldr	r3, [pc, #260]	; (8003ec4 <CalculateRunningSpec+0x3a4>)
 8003dc0:	881b      	ldrh	r3, [r3, #0]
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f7fc fbae 	bl	8000524 <__aeabi_i2d>
 8003dc8:	a329      	add	r3, pc, #164	; (adr r3, 8003e70 <CalculateRunningSpec+0x350>)
 8003dca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003dce:	f7fc fc13 	bl	80005f8 <__aeabi_dmul>
 8003dd2:	4602      	mov	r2, r0
 8003dd4:	460b      	mov	r3, r1
 8003dd6:	4614      	mov	r4, r2
 8003dd8:	461d      	mov	r5, r3
 8003dda:	4b2d      	ldr	r3, [pc, #180]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003ddc:	681b      	ldr	r3, [r3, #0]
 8003dde:	4618      	mov	r0, r3
 8003de0:	f7fc fbb2 	bl	8000548 <__aeabi_f2d>
 8003de4:	4602      	mov	r2, r0
 8003de6:	460b      	mov	r3, r1
 8003de8:	4620      	mov	r0, r4
 8003dea:	4629      	mov	r1, r5
 8003dec:	f7fc fc04 	bl	80005f8 <__aeabi_dmul>
 8003df0:	4602      	mov	r2, r0
 8003df2:	460b      	mov	r3, r1
 8003df4:	4614      	mov	r4, r2
 8003df6:	461d      	mov	r5, r3
 8003df8:	4b34      	ldr	r3, [pc, #208]	; (8003ecc <CalculateRunningSpec+0x3ac>)
 8003dfa:	681b      	ldr	r3, [r3, #0]
 8003dfc:	4618      	mov	r0, r3
 8003dfe:	f7fc fba3 	bl	8000548 <__aeabi_f2d>
 8003e02:	4602      	mov	r2, r0
 8003e04:	460b      	mov	r3, r1
 8003e06:	4620      	mov	r0, r4
 8003e08:	4629      	mov	r1, r5
 8003e0a:	f7fc fd1f 	bl	800084c <__aeabi_ddiv>
 8003e0e:	4602      	mov	r2, r0
 8003e10:	460b      	mov	r3, r1
 8003e12:	4610      	mov	r0, r2
 8003e14:	4619      	mov	r1, r3
 8003e16:	f7fc fee7 	bl	8000be8 <__aeabi_d2f>
 8003e1a:	4603      	mov	r3, r0
 8003e1c:	4a2d      	ldr	r2, [pc, #180]	; (8003ed4 <CalculateRunningSpec+0x3b4>)
 8003e1e:	6013      	str	r3, [r2, #0]

	//PullingDecelDistance = 0.5*PullingMaxSpeed*(2*3.14/60)*DrumRadius*PullingDecelTime;

	//PullingDecelDistance = (pow(PullingMaxSpeed*2*3.14*DrumRadius/60,2))/(2*9.8); // Object flying distance
	PullingDecelDistance = (pow(PullingMaxSpeed*2*3.14*DrumRadius/60,2))/(2*PullingDecel); // Object flying distance
 8003e20:	4b28      	ldr	r3, [pc, #160]	; (8003ec4 <CalculateRunningSpec+0x3a4>)
 8003e22:	881b      	ldrh	r3, [r3, #0]
 8003e24:	005b      	lsls	r3, r3, #1
 8003e26:	4618      	mov	r0, r3
 8003e28:	f7fc fb7c 	bl	8000524 <__aeabi_i2d>
 8003e2c:	a30a      	add	r3, pc, #40	; (adr r3, 8003e58 <CalculateRunningSpec+0x338>)
 8003e2e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003e32:	f7fc fbe1 	bl	80005f8 <__aeabi_dmul>
 8003e36:	4602      	mov	r2, r0
 8003e38:	460b      	mov	r3, r1
 8003e3a:	4614      	mov	r4, r2
 8003e3c:	461d      	mov	r5, r3
 8003e3e:	4b14      	ldr	r3, [pc, #80]	; (8003e90 <CalculateRunningSpec+0x370>)
 8003e40:	681b      	ldr	r3, [r3, #0]
 8003e42:	4618      	mov	r0, r3
 8003e44:	f7fc fb80 	bl	8000548 <__aeabi_f2d>
 8003e48:	e046      	b.n	8003ed8 <CalculateRunningSpec+0x3b8>
 8003e4a:	bf00      	nop
 8003e4c:	f3af 8000 	nop.w
 8003e50:	9999999a 	.word	0x9999999a
 8003e54:	3fb99999 	.word	0x3fb99999
 8003e58:	51eb851f 	.word	0x51eb851f
 8003e5c:	40091eb8 	.word	0x40091eb8
 8003e60:	00000000 	.word	0x00000000
 8003e64:	40000000 	.word	0x40000000
 8003e68:	51eb851f 	.word	0x51eb851f
 8003e6c:	40191eb8 	.word	0x40191eb8
 8003e70:	46508dff 	.word	0x46508dff
 8003e74:	3fbacb6f 	.word	0x3fbacb6f
 8003e78:	20000459 	.word	0x20000459
 8003e7c:	40080000 	.word	0x40080000
 8003e80:	2000045c 	.word	0x2000045c
 8003e84:	20000460 	.word	0x20000460
 8003e88:	2000047c 	.word	0x2000047c
 8003e8c:	40240000 	.word	0x40240000
 8003e90:	20000454 	.word	0x20000454
 8003e94:	20000478 	.word	0x20000478
 8003e98:	20000468 	.word	0x20000468
 8003e9c:	20000464 	.word	0x20000464
 8003ea0:	2000046c 	.word	0x2000046c
 8003ea4:	404e0000 	.word	0x404e0000
 8003ea8:	20000470 	.word	0x20000470
 8003eac:	2000000a 	.word	0x2000000a
 8003eb0:	20000474 	.word	0x20000474
 8003eb4:	200004b0 	.word	0x200004b0
 8003eb8:	20000484 	.word	0x20000484
 8003ebc:	200004a0 	.word	0x200004a0
 8003ec0:	40230000 	.word	0x40230000
 8003ec4:	20000498 	.word	0x20000498
 8003ec8:	2000048c 	.word	0x2000048c
 8003ecc:	20000488 	.word	0x20000488
 8003ed0:	20000490 	.word	0x20000490
 8003ed4:	20000494 	.word	0x20000494
 8003ed8:	4602      	mov	r2, r0
 8003eda:	460b      	mov	r3, r1
 8003edc:	4620      	mov	r0, r4
 8003ede:	4629      	mov	r1, r5
 8003ee0:	f7fc fb8a 	bl	80005f8 <__aeabi_dmul>
 8003ee4:	4602      	mov	r2, r0
 8003ee6:	460b      	mov	r3, r1
 8003ee8:	4610      	mov	r0, r2
 8003eea:	4619      	mov	r1, r3
 8003eec:	f04f 0200 	mov.w	r2, #0
 8003ef0:	4b5f      	ldr	r3, [pc, #380]	; (8004070 <CalculateRunningSpec+0x550>)
 8003ef2:	f7fc fcab 	bl	800084c <__aeabi_ddiv>
 8003ef6:	4602      	mov	r2, r0
 8003ef8:	460b      	mov	r3, r1
 8003efa:	ec43 2b17 	vmov	d7, r2, r3
 8003efe:	ed9f 1b52 	vldr	d1, [pc, #328]	; 8004048 <CalculateRunningSpec+0x528>
 8003f02:	eeb0 0a47 	vmov.f32	s0, s14
 8003f06:	eef0 0a67 	vmov.f32	s1, s15
 8003f0a:	f00a fd11 	bl	800e930 <pow>
 8003f0e:	ec55 4b10 	vmov	r4, r5, d0
 8003f12:	4b58      	ldr	r3, [pc, #352]	; (8004074 <CalculateRunningSpec+0x554>)
 8003f14:	edd3 7a00 	vldr	s15, [r3]
 8003f18:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8003f1c:	ee17 0a90 	vmov	r0, s15
 8003f20:	f7fc fb12 	bl	8000548 <__aeabi_f2d>
 8003f24:	4602      	mov	r2, r0
 8003f26:	460b      	mov	r3, r1
 8003f28:	4620      	mov	r0, r4
 8003f2a:	4629      	mov	r1, r5
 8003f2c:	f7fc fc8e 	bl	800084c <__aeabi_ddiv>
 8003f30:	4602      	mov	r2, r0
 8003f32:	460b      	mov	r3, r1
 8003f34:	4610      	mov	r0, r2
 8003f36:	4619      	mov	r1, r3
 8003f38:	f7fc fe56 	bl	8000be8 <__aeabi_d2f>
 8003f3c:	4603      	mov	r3, r0
 8003f3e:	4a4e      	ldr	r2, [pc, #312]	; (8004078 <CalculateRunningSpec+0x558>)
 8003f40:	6013      	str	r3, [r2, #0]

//	PullingTotalDistance = ((float)PullingAccelDistance + (float)PullingDecelDistance)*DistCoeff;
//	PullingBotomPulseCmdPosition = (int)((float)EncoderResolution*(float)PullingTotalDistance/((float)(2*3.14*DrumRadius))); // unit: pulses

	FlyingPosPulseCmd = ((int)(EncoderResolution*PullingAccelDistance/(2*3.14*DrumRadius)));
 8003f42:	4b4e      	ldr	r3, [pc, #312]	; (800407c <CalculateRunningSpec+0x55c>)
 8003f44:	881b      	ldrh	r3, [r3, #0]
 8003f46:	ee07 3a90 	vmov	s15, r3
 8003f4a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003f4e:	4b4c      	ldr	r3, [pc, #304]	; (8004080 <CalculateRunningSpec+0x560>)
 8003f50:	edd3 7a00 	vldr	s15, [r3]
 8003f54:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003f58:	ee17 0a90 	vmov	r0, s15
 8003f5c:	f7fc faf4 	bl	8000548 <__aeabi_f2d>
 8003f60:	4604      	mov	r4, r0
 8003f62:	460d      	mov	r5, r1
 8003f64:	4b47      	ldr	r3, [pc, #284]	; (8004084 <CalculateRunningSpec+0x564>)
 8003f66:	681b      	ldr	r3, [r3, #0]
 8003f68:	4618      	mov	r0, r3
 8003f6a:	f7fc faed 	bl	8000548 <__aeabi_f2d>
 8003f6e:	a338      	add	r3, pc, #224	; (adr r3, 8004050 <CalculateRunningSpec+0x530>)
 8003f70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003f74:	f7fc fb40 	bl	80005f8 <__aeabi_dmul>
 8003f78:	4602      	mov	r2, r0
 8003f7a:	460b      	mov	r3, r1
 8003f7c:	4620      	mov	r0, r4
 8003f7e:	4629      	mov	r1, r5
 8003f80:	f7fc fc64 	bl	800084c <__aeabi_ddiv>
 8003f84:	4602      	mov	r2, r0
 8003f86:	460b      	mov	r3, r1
 8003f88:	4610      	mov	r0, r2
 8003f8a:	4619      	mov	r1, r3
 8003f8c:	f7fc fde4 	bl	8000b58 <__aeabi_d2iz>
 8003f90:	4603      	mov	r3, r0
 8003f92:	4a3d      	ldr	r2, [pc, #244]	; (8004088 <CalculateRunningSpec+0x568>)
 8003f94:	6013      	str	r3, [r2, #0]


	WaitingTime = (uint16_t)(((PullingMaxSpeed*(2*3.14/60)*DrumRadius)/9.8 - PullingDecelTime)*1000*2*0.7); // *1000 to convert to ms; *2 for both flying up and dropping down
 8003f96:	4b3d      	ldr	r3, [pc, #244]	; (800408c <CalculateRunningSpec+0x56c>)
 8003f98:	881b      	ldrh	r3, [r3, #0]
 8003f9a:	4618      	mov	r0, r3
 8003f9c:	f7fc fac2 	bl	8000524 <__aeabi_i2d>
 8003fa0:	a32d      	add	r3, pc, #180	; (adr r3, 8004058 <CalculateRunningSpec+0x538>)
 8003fa2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fa6:	f7fc fb27 	bl	80005f8 <__aeabi_dmul>
 8003faa:	4602      	mov	r2, r0
 8003fac:	460b      	mov	r3, r1
 8003fae:	4614      	mov	r4, r2
 8003fb0:	461d      	mov	r5, r3
 8003fb2:	4b34      	ldr	r3, [pc, #208]	; (8004084 <CalculateRunningSpec+0x564>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4618      	mov	r0, r3
 8003fb8:	f7fc fac6 	bl	8000548 <__aeabi_f2d>
 8003fbc:	4602      	mov	r2, r0
 8003fbe:	460b      	mov	r3, r1
 8003fc0:	4620      	mov	r0, r4
 8003fc2:	4629      	mov	r1, r5
 8003fc4:	f7fc fb18 	bl	80005f8 <__aeabi_dmul>
 8003fc8:	4602      	mov	r2, r0
 8003fca:	460b      	mov	r3, r1
 8003fcc:	4610      	mov	r0, r2
 8003fce:	4619      	mov	r1, r3
 8003fd0:	a323      	add	r3, pc, #140	; (adr r3, 8004060 <CalculateRunningSpec+0x540>)
 8003fd2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003fd6:	f7fc fc39 	bl	800084c <__aeabi_ddiv>
 8003fda:	4602      	mov	r2, r0
 8003fdc:	460b      	mov	r3, r1
 8003fde:	4614      	mov	r4, r2
 8003fe0:	461d      	mov	r5, r3
 8003fe2:	4b2b      	ldr	r3, [pc, #172]	; (8004090 <CalculateRunningSpec+0x570>)
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	4618      	mov	r0, r3
 8003fe8:	f7fc faae 	bl	8000548 <__aeabi_f2d>
 8003fec:	4602      	mov	r2, r0
 8003fee:	460b      	mov	r3, r1
 8003ff0:	4620      	mov	r0, r4
 8003ff2:	4629      	mov	r1, r5
 8003ff4:	f7fc f948 	bl	8000288 <__aeabi_dsub>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	460b      	mov	r3, r1
 8003ffc:	4610      	mov	r0, r2
 8003ffe:	4619      	mov	r1, r3
 8004000:	f04f 0200 	mov.w	r2, #0
 8004004:	4b23      	ldr	r3, [pc, #140]	; (8004094 <CalculateRunningSpec+0x574>)
 8004006:	f7fc faf7 	bl	80005f8 <__aeabi_dmul>
 800400a:	4602      	mov	r2, r0
 800400c:	460b      	mov	r3, r1
 800400e:	4610      	mov	r0, r2
 8004010:	4619      	mov	r1, r3
 8004012:	4602      	mov	r2, r0
 8004014:	460b      	mov	r3, r1
 8004016:	f7fc f939 	bl	800028c <__adddf3>
 800401a:	4602      	mov	r2, r0
 800401c:	460b      	mov	r3, r1
 800401e:	4610      	mov	r0, r2
 8004020:	4619      	mov	r1, r3
 8004022:	a311      	add	r3, pc, #68	; (adr r3, 8004068 <CalculateRunningSpec+0x548>)
 8004024:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004028:	f7fc fae6 	bl	80005f8 <__aeabi_dmul>
 800402c:	4602      	mov	r2, r0
 800402e:	460b      	mov	r3, r1
 8004030:	4610      	mov	r0, r2
 8004032:	4619      	mov	r1, r3
 8004034:	f7fc fdb8 	bl	8000ba8 <__aeabi_d2uiz>
 8004038:	4603      	mov	r3, r0
 800403a:	b29a      	uxth	r2, r3
 800403c:	4b16      	ldr	r3, [pc, #88]	; (8004098 <CalculateRunningSpec+0x578>)
 800403e:	801a      	strh	r2, [r3, #0]
}
 8004040:	bf00      	nop
 8004042:	bdb0      	pop	{r4, r5, r7, pc}
 8004044:	f3af 8000 	nop.w
 8004048:	00000000 	.word	0x00000000
 800404c:	40000000 	.word	0x40000000
 8004050:	51eb851f 	.word	0x51eb851f
 8004054:	40191eb8 	.word	0x40191eb8
 8004058:	46508dff 	.word	0x46508dff
 800405c:	3fbacb6f 	.word	0x3fbacb6f
 8004060:	9999999a 	.word	0x9999999a
 8004064:	40239999 	.word	0x40239999
 8004068:	66666666 	.word	0x66666666
 800406c:	3fe66666 	.word	0x3fe66666
 8004070:	404e0000 	.word	0x404e0000
 8004074:	20000488 	.word	0x20000488
 8004078:	2000049c 	.word	0x2000049c
 800407c:	2000000a 	.word	0x2000000a
 8004080:	200004a0 	.word	0x200004a0
 8004084:	20000454 	.word	0x20000454
 8004088:	200004ac 	.word	0x200004ac
 800408c:	20000498 	.word	0x20000498
 8004090:	20000494 	.word	0x20000494
 8004094:	408f4000 	.word	0x408f4000
 8004098:	20000444 	.word	0x20000444

0800409c <InitParams>:
void InitParams ()
{
 800409c:	b580      	push	{r7, lr}
 800409e:	b082      	sub	sp, #8
 80040a0:	af00      	add	r7, sp, #0
	// Load Parameters from the memory
	LoadSavedParam(MemoryAddress,Params);
 80040a2:	4929      	ldr	r1, [pc, #164]	; (8004148 <InitParams+0xac>)
 80040a4:	4829      	ldr	r0, [pc, #164]	; (800414c <InitParams+0xb0>)
 80040a6:	f7fd faf1 	bl	800168c <LoadSavedParam>

	// General Params
	DrumRadius = Params[0];
 80040aa:	4b27      	ldr	r3, [pc, #156]	; (8004148 <InitParams+0xac>)
 80040ac:	681b      	ldr	r3, [r3, #0]
 80040ae:	4a28      	ldr	r2, [pc, #160]	; (8004150 <InitParams+0xb4>)
 80040b0:	6013      	str	r3, [r2, #0]
	PullingSpeed = Params[1];
 80040b2:	4b25      	ldr	r3, [pc, #148]	; (8004148 <InitParams+0xac>)
 80040b4:	edd3 7a01 	vldr	s15, [r3, #4]
 80040b8:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040bc:	edc7 7a01 	vstr	s15, [r7, #4]
 80040c0:	793b      	ldrb	r3, [r7, #4]
 80040c2:	b2da      	uxtb	r2, r3
 80040c4:	4b23      	ldr	r3, [pc, #140]	; (8004154 <InitParams+0xb8>)
 80040c6:	701a      	strb	r2, [r3, #0]
	StoppingTime = Params[2];
 80040c8:	4b1f      	ldr	r3, [pc, #124]	; (8004148 <InitParams+0xac>)
 80040ca:	edd3 7a02 	vldr	s15, [r3, #8]
 80040ce:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040d2:	ee17 3a90 	vmov	r3, s15
 80040d6:	b29a      	uxth	r2, r3
 80040d8:	4b1f      	ldr	r3, [pc, #124]	; (8004158 <InitParams+0xbc>)
 80040da:	801a      	strh	r2, [r3, #0]
	SampleTime = Params[3];
 80040dc:	4b1a      	ldr	r3, [pc, #104]	; (8004148 <InitParams+0xac>)
 80040de:	edd3 7a03 	vldr	s15, [r3, #12]
 80040e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e6:	edc7 7a01 	vstr	s15, [r7, #4]
 80040ea:	793b      	ldrb	r3, [r7, #4]
 80040ec:	b2da      	uxtb	r2, r3
 80040ee:	4b1b      	ldr	r3, [pc, #108]	; (800415c <InitParams+0xc0>)
 80040f0:	701a      	strb	r2, [r3, #0]

	// Dropping Stage Params
	DroppingAccelDistance = Params[4];
 80040f2:	4b15      	ldr	r3, [pc, #84]	; (8004148 <InitParams+0xac>)
 80040f4:	691b      	ldr	r3, [r3, #16]
 80040f6:	4a1a      	ldr	r2, [pc, #104]	; (8004160 <InitParams+0xc4>)
 80040f8:	6013      	str	r3, [r2, #0]
	DroppingAccel  = Params[5];
 80040fa:	4b13      	ldr	r3, [pc, #76]	; (8004148 <InitParams+0xac>)
 80040fc:	695b      	ldr	r3, [r3, #20]
 80040fe:	4a19      	ldr	r2, [pc, #100]	; (8004164 <InitParams+0xc8>)
 8004100:	6013      	str	r3, [r2, #0]
	DroppingDecel = Params[6];
 8004102:	4b11      	ldr	r3, [pc, #68]	; (8004148 <InitParams+0xac>)
 8004104:	699b      	ldr	r3, [r3, #24]
 8004106:	4a18      	ldr	r2, [pc, #96]	; (8004168 <InitParams+0xcc>)
 8004108:	6013      	str	r3, [r2, #0]


	// Pulling Stage Params
	PullingAccelDistance = Params[7];
 800410a:	4b0f      	ldr	r3, [pc, #60]	; (8004148 <InitParams+0xac>)
 800410c:	69db      	ldr	r3, [r3, #28]
 800410e:	4a17      	ldr	r2, [pc, #92]	; (800416c <InitParams+0xd0>)
 8004110:	6013      	str	r3, [r2, #0]
	PullingAccel = Params[8];
 8004112:	4b0d      	ldr	r3, [pc, #52]	; (8004148 <InitParams+0xac>)
 8004114:	6a1b      	ldr	r3, [r3, #32]
 8004116:	4a16      	ldr	r2, [pc, #88]	; (8004170 <InitParams+0xd4>)
 8004118:	6013      	str	r3, [r2, #0]
	PullingDecel = Params[9];
 800411a:	4b0b      	ldr	r3, [pc, #44]	; (8004148 <InitParams+0xac>)
 800411c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800411e:	4a15      	ldr	r2, [pc, #84]	; (8004174 <InitParams+0xd8>)
 8004120:	6013      	str	r3, [r2, #0]

	// PID Controller params
	FlyAccSlope = Params[10];
 8004122:	4b09      	ldr	r3, [pc, #36]	; (8004148 <InitParams+0xac>)
 8004124:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004126:	4a14      	ldr	r2, [pc, #80]	; (8004178 <InitParams+0xdc>)
 8004128:	6013      	str	r3, [r2, #0]
	DistCoeff = Params[11];
 800412a:	4b07      	ldr	r3, [pc, #28]	; (8004148 <InitParams+0xac>)
 800412c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800412e:	4a13      	ldr	r2, [pc, #76]	; (800417c <InitParams+0xe0>)
 8004130:	6013      	str	r3, [r2, #0]
	BrakeAccSlope = Params[12];
 8004132:	4b05      	ldr	r3, [pc, #20]	; (8004148 <InitParams+0xac>)
 8004134:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004136:	4a12      	ldr	r2, [pc, #72]	; (8004180 <InitParams+0xe4>)
 8004138:	6013      	str	r3, [r2, #0]

	CalculateRunningSpec ();
 800413a:	f7ff fcf1 	bl	8003b20 <CalculateRunningSpec>
}
 800413e:	bf00      	nop
 8004140:	3708      	adds	r7, #8
 8004142:	46bd      	mov	sp, r7
 8004144:	bd80      	pop	{r7, pc}
 8004146:	bf00      	nop
 8004148:	200004c0 	.word	0x200004c0
 800414c:	08040000 	.word	0x08040000
 8004150:	20000454 	.word	0x20000454
 8004154:	20000459 	.word	0x20000459
 8004158:	2000045a 	.word	0x2000045a
 800415c:	20000458 	.word	0x20000458
 8004160:	2000047c 	.word	0x2000047c
 8004164:	20000460 	.word	0x20000460
 8004168:	20000464 	.word	0x20000464
 800416c:	200004a0 	.word	0x200004a0
 8004170:	20000484 	.word	0x20000484
 8004174:	20000488 	.word	0x20000488
 8004178:	2000052c 	.word	0x2000052c
 800417c:	20000524 	.word	0x20000524
 8004180:	20000528 	.word	0x20000528
 8004184:	00000000 	.word	0x00000000

08004188 <ProcessReceivedCommand>:

void ProcessReceivedCommand () // Proceed the command from the UI
{
 8004188:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800418c:	b0b7      	sub	sp, #220	; 0xdc
 800418e:	af16      	add	r7, sp, #88	; 0x58
	//ExtractMotionCode(); // Extract data to MotionCode
	switch ((int)MotionCode[0])
 8004190:	4bb3      	ldr	r3, [pc, #716]	; (8004460 <ProcessReceivedCommand+0x2d8>)
 8004192:	edd3 7a00 	vldr	s15, [r3]
 8004196:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800419a:	ee17 3a90 	vmov	r3, s15
 800419e:	3b01      	subs	r3, #1
 80041a0:	2b2f      	cmp	r3, #47	; 0x2f
 80041a2:	f200 874f 	bhi.w	8005044 <ProcessReceivedCommand+0xebc>
 80041a6:	a201      	add	r2, pc, #4	; (adr r2, 80041ac <ProcessReceivedCommand+0x24>)
 80041a8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80041ac:	080042a1 	.word	0x080042a1
 80041b0:	080042e7 	.word	0x080042e7
 80041b4:	08004311 	.word	0x08004311
 80041b8:	080043bd 	.word	0x080043bd
 80041bc:	080044b5 	.word	0x080044b5
 80041c0:	08004529 	.word	0x08004529
 80041c4:	08004557 	.word	0x08004557
 80041c8:	08004591 	.word	0x08004591
 80041cc:	08005045 	.word	0x08005045
 80041d0:	08005045 	.word	0x08005045
 80041d4:	08004791 	.word	0x08004791
 80041d8:	080047ef 	.word	0x080047ef
 80041dc:	0800484d 	.word	0x0800484d
 80041e0:	08004947 	.word	0x08004947
 80041e4:	080049a1 	.word	0x080049a1
 80041e8:	080049f1 	.word	0x080049f1
 80041ec:	08004a61 	.word	0x08004a61
 80041f0:	08004a67 	.word	0x08004a67
 80041f4:	08005045 	.word	0x08005045
 80041f8:	08005059 	.word	0x08005059
 80041fc:	08005045 	.word	0x08005045
 8004200:	08005045 	.word	0x08005045
 8004204:	08005045 	.word	0x08005045
 8004208:	08005045 	.word	0x08005045
 800420c:	08005045 	.word	0x08005045
 8004210:	08005045 	.word	0x08005045
 8004214:	08004a93 	.word	0x08004a93
 8004218:	08004af1 	.word	0x08004af1
 800421c:	08005045 	.word	0x08005045
 8004220:	08005045 	.word	0x08005045
 8004224:	08004b07 	.word	0x08004b07
 8004228:	08004bbd 	.word	0x08004bbd
 800422c:	08004c0d 	.word	0x08004c0d
 8004230:	08004c5d 	.word	0x08004c5d
 8004234:	08004cad 	.word	0x08004cad
 8004238:	08005059 	.word	0x08005059
 800423c:	08004cfd 	.word	0x08004cfd
 8004240:	08004d4d 	.word	0x08004d4d
 8004244:	08004d79 	.word	0x08004d79
 8004248:	08005045 	.word	0x08005045
 800424c:	08004dfb 	.word	0x08004dfb
 8004250:	08004eb9 	.word	0x08004eb9
 8004254:	08004f13 	.word	0x08004f13
 8004258:	0800426d 	.word	0x0800426d
 800425c:	080045e9 	.word	0x080045e9
 8004260:	08004f69 	.word	0x08004f69
 8004264:	08004f79 	.word	0x08004f79
 8004268:	08004fdd 	.word	0x08004fdd
	{
		case 44: //Emergency Stop Change to 44 to avoid data confusion
			if ((int)MotionCode[1] == 0) // 44/0
 800426c:	4b7c      	ldr	r3, [pc, #496]	; (8004460 <ProcessReceivedCommand+0x2d8>)
 800426e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004272:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004276:	ee17 3a90 	vmov	r3, s15
 800427a:	2b00      	cmp	r3, #0
 800427c:	d10c      	bne.n	8004298 <ProcessReceivedCommand+0x110>
			{
				Estop(); // Estop button on the UI
 800427e:	f7fc ffe7 	bl	8001250 <Estop>
				PulseGenerationFlag = false; // Stop generating pulses
 8004282:	4b78      	ldr	r3, [pc, #480]	; (8004464 <ProcessReceivedCommand+0x2dc>)
 8004284:	2200      	movs	r2, #0
 8004286:	701a      	strb	r2, [r3, #0]
				StartDropping = false;
 8004288:	4b77      	ldr	r3, [pc, #476]	; (8004468 <ProcessReceivedCommand+0x2e0>)
 800428a:	2200      	movs	r2, #0
 800428c:	701a      	strb	r2, [r3, #0]
				StartPulling = false;
 800428e:	4b77      	ldr	r3, [pc, #476]	; (800446c <ProcessReceivedCommand+0x2e4>)
 8004290:	2200      	movs	r2, #0
 8004292:	701a      	strb	r2, [r3, #0]
				//EMO = true;
			}
			else {AlarmReset();}  // 44/1, alarm button
			break;
 8004294:	f000 beff 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
			else {AlarmReset();}  // 44/1, alarm button
 8004298:	f7fc ffb4 	bl	8001204 <AlarmReset>
			break;
 800429c:	f000 befb 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
		case 1: // Stop button;
			if ((int)MotionCode[1] == 1) // 1/1
 80042a0:	4b6f      	ldr	r3, [pc, #444]	; (8004460 <ProcessReceivedCommand+0x2d8>)
 80042a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80042a6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042aa:	ee17 3a90 	vmov	r3, s15
 80042ae:	2b01      	cmp	r3, #1
 80042b0:	f040 86d4 	bne.w	800505c <ProcessReceivedCommand+0xed4>
			{
				if (MotorDriver) // FDA 7000
 80042b4:	4b6e      	ldr	r3, [pc, #440]	; (8004470 <ProcessReceivedCommand+0x2e8>)
 80042b6:	781b      	ldrb	r3, [r3, #0]
 80042b8:	2b00      	cmp	r3, #0
 80042ba:	d005      	beq.n	80042c8 <ProcessReceivedCommand+0x140>
				{
					Stop();
 80042bc:	f7fc ff92 	bl	80011e4 <Stop>
					StopExperiment();
 80042c0:	f7ff fbea 	bl	8003a98 <StopExperiment>
					IsHoming = false;
					IsStepPulseCmd = false;
					JoggingMoveUp = false;
				}
			}
			break;
 80042c4:	f000 beca 	b.w	800505c <ProcessReceivedCommand+0xed4>
					StopPulseGenerating();
 80042c8:	f7fd fb44 	bl	8001954 <StopPulseGenerating>
					StopExperiment();
 80042cc:	f7ff fbe4 	bl	8003a98 <StopExperiment>
					IsHoming = false;
 80042d0:	4b68      	ldr	r3, [pc, #416]	; (8004474 <ProcessReceivedCommand+0x2ec>)
 80042d2:	2200      	movs	r2, #0
 80042d4:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = false;
 80042d6:	4b68      	ldr	r3, [pc, #416]	; (8004478 <ProcessReceivedCommand+0x2f0>)
 80042d8:	2200      	movs	r2, #0
 80042da:	701a      	strb	r2, [r3, #0]
					JoggingMoveUp = false;
 80042dc:	4b67      	ldr	r3, [pc, #412]	; (800447c <ProcessReceivedCommand+0x2f4>)
 80042de:	2200      	movs	r2, #0
 80042e0:	701a      	strb	r2, [r3, #0]
			break;
 80042e2:	f000 bebb 	b.w	800505c <ProcessReceivedCommand+0xed4>
		case 2: // Set Control Mode
			if ((int)MotionCode[1] == 1) // 2/1 position mode
 80042e6:	4b5e      	ldr	r3, [pc, #376]	; (8004460 <ProcessReceivedCommand+0x2d8>)
 80042e8:	edd3 7a01 	vldr	s15, [r3, #4]
 80042ec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80042f0:	ee17 3a90 	vmov	r3, s15
 80042f4:	2b01      	cmp	r3, #1
 80042f6:	d106      	bne.n	8004306 <ProcessReceivedCommand+0x17e>
					{
						PositionControlMode = true;
 80042f8:	4b61      	ldr	r3, [pc, #388]	; (8004480 <ProcessReceivedCommand+0x2f8>)
 80042fa:	2201      	movs	r2, #1
 80042fc:	701a      	strb	r2, [r3, #0]
						DriverInit(); // Init Position Mode
 80042fe:	f7fc ffe7 	bl	80012d0 <DriverInit>
			else // 2/0 speed mode
					{
						PositionControlMode = false;
						//SetSpeedMode(); // Set to Speed Mode
					}
			break;
 8004302:	f000 bec8 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
						PositionControlMode = false;
 8004306:	4b5e      	ldr	r3, [pc, #376]	; (8004480 <ProcessReceivedCommand+0x2f8>)
 8004308:	2200      	movs	r2, #0
 800430a:	701a      	strb	r2, [r3, #0]
			break;
 800430c:	f000 bec3 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
		case 3: // Jog Control

			if ((int)MotionCode[1] == 1) // 3/1 move up button
 8004310:	4b53      	ldr	r3, [pc, #332]	; (8004460 <ProcessReceivedCommand+0x2d8>)
 8004312:	edd3 7a01 	vldr	s15, [r3, #4]
 8004316:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800431a:	ee17 3a90 	vmov	r3, s15
 800431e:	2b01      	cmp	r3, #1
 8004320:	d127      	bne.n	8004372 <ProcessReceivedCommand+0x1ea>
			{
					JoggingMoveUp = true;
 8004322:	4b56      	ldr	r3, [pc, #344]	; (800447c <ProcessReceivedCommand+0x2f4>)
 8004324:	2201      	movs	r2, #1
 8004326:	701a      	strb	r2, [r3, #0]
					if (PositionControlMode) // If the control Mode is Position Mode
 8004328:	4b55      	ldr	r3, [pc, #340]	; (8004480 <ProcessReceivedCommand+0x2f8>)
 800432a:	781b      	ldrb	r3, [r3, #0]
 800432c:	2b00      	cmp	r3, #0
 800432e:	d01c      	beq.n	800436a <ProcessReceivedCommand+0x1e2>
//							{
//								break;
//							}
						}
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8004330:	4b4f      	ldr	r3, [pc, #316]	; (8004470 <ProcessReceivedCommand+0x2e8>)
 8004332:	781b      	ldrb	r3, [r3, #0]
 8004334:	4a53      	ldr	r2, [pc, #332]	; (8004484 <ProcessReceivedCommand+0x2fc>)
 8004336:	8812      	ldrh	r2, [r2, #0]
 8004338:	ee07 2a90 	vmov	s15, r2
 800433c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004340:	eeb0 0a67 	vmov.f32	s0, s15
 8004344:	4618      	mov	r0, r3
 8004346:	f7fd fb67 	bl	8001a18 <CalculateTimer3Period>
 800434a:	4603      	mov	r3, r0
 800434c:	b29a      	uxth	r2, r3
 800434e:	4b4e      	ldr	r3, [pc, #312]	; (8004488 <ProcessReceivedCommand+0x300>)
 8004350:	801a      	strh	r2, [r3, #0]
						//Timer3CountPeriod = (int)((float)(120000000.0/((float)JogSpeed*(float)EncoderResolution)) + 0.5);
						PRIsToggled = true; // PR phase is 90 deg late
 8004352:	4b4e      	ldr	r3, [pc, #312]	; (800448c <ProcessReceivedCommand+0x304>)
 8004354:	2201      	movs	r2, #1
 8004356:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up
 8004358:	4b4d      	ldr	r3, [pc, #308]	; (8004490 <ProcessReceivedCommand+0x308>)
 800435a:	2200      	movs	r2, #0
 800435c:	701a      	strb	r2, [r3, #0]
						StartPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 800435e:	f7fd fb17 	bl	8001990 <StartPulseGenerating>
						DisableSTOP(); // Turn off STOP to run
 8004362:	f7fc ff81 	bl	8001268 <DisableSTOP>
					else // Speed Mode
					{
						JogMoveDown(); // Disable the stop
					}
			}
			break;
 8004366:	f000 be96 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
						JogMoveUp(); // Disable the stop
 800436a:	f7fc ff89 	bl	8001280 <JogMoveUp>
			break;
 800436e:	f000 be92 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
					if (PositionControlMode) // If the control Mode is Position Mode
 8004372:	4b43      	ldr	r3, [pc, #268]	; (8004480 <ProcessReceivedCommand+0x2f8>)
 8004374:	781b      	ldrb	r3, [r3, #0]
 8004376:	2b00      	cmp	r3, #0
 8004378:	d01c      	beq.n	80043b4 <ProcessReceivedCommand+0x22c>
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 800437a:	4b3d      	ldr	r3, [pc, #244]	; (8004470 <ProcessReceivedCommand+0x2e8>)
 800437c:	781b      	ldrb	r3, [r3, #0]
 800437e:	4a41      	ldr	r2, [pc, #260]	; (8004484 <ProcessReceivedCommand+0x2fc>)
 8004380:	8812      	ldrh	r2, [r2, #0]
 8004382:	ee07 2a90 	vmov	s15, r2
 8004386:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800438a:	eeb0 0a67 	vmov.f32	s0, s15
 800438e:	4618      	mov	r0, r3
 8004390:	f7fd fb42 	bl	8001a18 <CalculateTimer3Period>
 8004394:	4603      	mov	r3, r0
 8004396:	b29a      	uxth	r2, r3
 8004398:	4b3b      	ldr	r3, [pc, #236]	; (8004488 <ProcessReceivedCommand+0x300>)
 800439a:	801a      	strh	r2, [r3, #0]
						PRIsToggled = false; //
 800439c:	4b3b      	ldr	r3, [pc, #236]	; (800448c <ProcessReceivedCommand+0x304>)
 800439e:	2200      	movs	r2, #0
 80043a0:	701a      	strb	r2, [r3, #0]
						Direction = true; // true = move down
 80043a2:	4b3b      	ldr	r3, [pc, #236]	; (8004490 <ProcessReceivedCommand+0x308>)
 80043a4:	2201      	movs	r2, #1
 80043a6:	701a      	strb	r2, [r3, #0]
						StartPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 80043a8:	f7fd faf2 	bl	8001990 <StartPulseGenerating>
						DisableSTOP();	// Turn off STOP to run
 80043ac:	f7fc ff5c 	bl	8001268 <DisableSTOP>
			break;
 80043b0:	f000 be71 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
						JogMoveDown(); // Disable the stop
 80043b4:	f7fc ff78 	bl	80012a8 <JogMoveDown>
			break;
 80043b8:	f000 be6d 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
		case 4: // Start Running Buton (Start Running Experiment)
			if ((int)MotionCode[1] == 1) // Start runing
 80043bc:	4b28      	ldr	r3, [pc, #160]	; (8004460 <ProcessReceivedCommand+0x2d8>)
 80043be:	edd3 7a01 	vldr	s15, [r3, #4]
 80043c2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043c6:	ee17 3a90 	vmov	r3, s15
 80043ca:	2b01      	cmp	r3, #1
 80043cc:	d143      	bne.n	8004456 <ProcessReceivedCommand+0x2ce>
				{
					if (Initialized || (PullingTotalDistance <= 2)) //
 80043ce:	4b31      	ldr	r3, [pc, #196]	; (8004494 <ProcessReceivedCommand+0x30c>)
 80043d0:	781b      	ldrb	r3, [r3, #0]
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d109      	bne.n	80043ea <ProcessReceivedCommand+0x262>
 80043d6:	4b30      	ldr	r3, [pc, #192]	; (8004498 <ProcessReceivedCommand+0x310>)
 80043d8:	edd3 7a00 	vldr	s15, [r3]
 80043dc:	eeb0 7a00 	vmov.f32	s14, #0	; 0x40000000  2.0
 80043e0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d81e      	bhi.n	8004428 <ProcessReceivedCommand+0x2a0>
					{
						TxPCLen = sprintf(ResponseMess,"g4/1e"); // Respond that the experiment started
 80043ea:	492c      	ldr	r1, [pc, #176]	; (800449c <ProcessReceivedCommand+0x314>)
 80043ec:	482c      	ldr	r0, [pc, #176]	; (80044a0 <ProcessReceivedCommand+0x318>)
 80043ee:	f006 fc41 	bl	800ac74 <siprintf>
 80043f2:	4603      	mov	r3, r0
 80043f4:	b2da      	uxtb	r2, r3
 80043f6:	4b2b      	ldr	r3, [pc, #172]	; (80044a4 <ProcessReceivedCommand+0x31c>)
 80043f8:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80043fa:	4b2a      	ldr	r3, [pc, #168]	; (80044a4 <ProcessReceivedCommand+0x31c>)
 80043fc:	781b      	ldrb	r3, [r3, #0]
 80043fe:	b29a      	uxth	r2, r3
 8004400:	23c8      	movs	r3, #200	; 0xc8
 8004402:	4927      	ldr	r1, [pc, #156]	; (80044a0 <ProcessReceivedCommand+0x318>)
 8004404:	4828      	ldr	r0, [pc, #160]	; (80044a8 <ProcessReceivedCommand+0x320>)
 8004406:	f004 fd58 	bl	8008eba <HAL_UART_Transmit>
						HAL_Delay(200);
 800440a:	20c8      	movs	r0, #200	; 0xc8
 800440c:	f002 fb32 	bl	8006a74 <HAL_Delay>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004410:	220f      	movs	r2, #15
 8004412:	2100      	movs	r1, #0
 8004414:	4822      	ldr	r0, [pc, #136]	; (80044a0 <ProcessReceivedCommand+0x318>)
 8004416:	f005 fda5 	bl	8009f64 <memset>

						InitializeRunning (ExperimentMode);
 800441a:	4b24      	ldr	r3, [pc, #144]	; (80044ac <ProcessReceivedCommand+0x324>)
 800441c:	781b      	ldrb	r3, [r3, #0]
 800441e:	4618      	mov	r0, r3
 8004420:	f7fd fe10 	bl	8002044 <InitializeRunning>
				}
			else // Stop running
				{
					StopExperiment();
				}
			break;
 8004424:	f000 be37 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
						TxPCLen = sprintf(ResponseMess,"g4/0e"); // Respond that the experiment can not start
 8004428:	4921      	ldr	r1, [pc, #132]	; (80044b0 <ProcessReceivedCommand+0x328>)
 800442a:	481d      	ldr	r0, [pc, #116]	; (80044a0 <ProcessReceivedCommand+0x318>)
 800442c:	f006 fc22 	bl	800ac74 <siprintf>
 8004430:	4603      	mov	r3, r0
 8004432:	b2da      	uxtb	r2, r3
 8004434:	4b1b      	ldr	r3, [pc, #108]	; (80044a4 <ProcessReceivedCommand+0x31c>)
 8004436:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004438:	4b1a      	ldr	r3, [pc, #104]	; (80044a4 <ProcessReceivedCommand+0x31c>)
 800443a:	781b      	ldrb	r3, [r3, #0]
 800443c:	b29a      	uxth	r2, r3
 800443e:	23c8      	movs	r3, #200	; 0xc8
 8004440:	4917      	ldr	r1, [pc, #92]	; (80044a0 <ProcessReceivedCommand+0x318>)
 8004442:	4819      	ldr	r0, [pc, #100]	; (80044a8 <ProcessReceivedCommand+0x320>)
 8004444:	f004 fd39 	bl	8008eba <HAL_UART_Transmit>
						memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004448:	220f      	movs	r2, #15
 800444a:	2100      	movs	r1, #0
 800444c:	4814      	ldr	r0, [pc, #80]	; (80044a0 <ProcessReceivedCommand+0x318>)
 800444e:	f005 fd89 	bl	8009f64 <memset>
			break;
 8004452:	f000 be20 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
					StopExperiment();
 8004456:	f7ff fb1f 	bl	8003a98 <StopExperiment>
			break;
 800445a:	f000 be1c 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
 800445e:	bf00      	nop
 8004460:	20000504 	.word	0x20000504
 8004464:	20000436 	.word	0x20000436
 8004468:	2000042f 	.word	0x2000042f
 800446c:	20000434 	.word	0x20000434
 8004470:	20000003 	.word	0x20000003
 8004474:	2000043e 	.word	0x2000043e
 8004478:	20000437 	.word	0x20000437
 800447c:	2000043d 	.word	0x2000043d
 8004480:	20000002 	.word	0x20000002
 8004484:	20000008 	.word	0x20000008
 8004488:	2000044a 	.word	0x2000044a
 800448c:	20000441 	.word	0x20000441
 8004490:	20000432 	.word	0x20000432
 8004494:	2000043f 	.word	0x2000043f
 8004498:	200004a4 	.word	0x200004a4
 800449c:	0800f818 	.word	0x0800f818
 80044a0:	20000418 	.word	0x20000418
 80044a4:	20000412 	.word	0x20000412
 80044a8:	2000033c 	.word	0x2000033c
 80044ac:	20000006 	.word	0x20000006
 80044b0:	0800f820 	.word	0x0800f820

		case 5: // Set Jog Speed
			if (PositionControlMode) // If it is the position control mode, then change the JogSpeed
 80044b4:	4b40      	ldr	r3, [pc, #256]	; (80045b8 <ProcessReceivedCommand+0x430>)
 80044b6:	781b      	ldrb	r3, [r3, #0]
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	f000 85d1 	beq.w	8005060 <ProcessReceivedCommand+0xed8>
			{
				JogSpeed = (int)(MotionCode[1]); // unit: rpm
 80044be:	4b3f      	ldr	r3, [pc, #252]	; (80045bc <ProcessReceivedCommand+0x434>)
 80044c0:	edd3 7a01 	vldr	s15, [r3, #4]
 80044c4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80044c8:	ee17 3a90 	vmov	r3, s15
 80044cc:	b29a      	uxth	r2, r3
 80044ce:	4b3c      	ldr	r3, [pc, #240]	; (80045c0 <ProcessReceivedCommand+0x438>)
 80044d0:	801a      	strh	r2, [r3, #0]
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80044d2:	4b3c      	ldr	r3, [pc, #240]	; (80045c4 <ProcessReceivedCommand+0x43c>)
 80044d4:	781b      	ldrb	r3, [r3, #0]
 80044d6:	4a3a      	ldr	r2, [pc, #232]	; (80045c0 <ProcessReceivedCommand+0x438>)
 80044d8:	8812      	ldrh	r2, [r2, #0]
 80044da:	ee07 2a90 	vmov	s15, r2
 80044de:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80044e2:	eeb0 0a67 	vmov.f32	s0, s15
 80044e6:	4618      	mov	r0, r3
 80044e8:	f7fd fa96 	bl	8001a18 <CalculateTimer3Period>
 80044ec:	4603      	mov	r3, r0
 80044ee:	b29a      	uxth	r2, r3
 80044f0:	4b35      	ldr	r3, [pc, #212]	; (80045c8 <ProcessReceivedCommand+0x440>)
 80044f2:	801a      	strh	r2, [r3, #0]
//				char JogSpeedBuff[10];
//				TxPCLen = sprintf(JogSpeedBuff,"j%.de",JogSpeed);
//				HAL_UART_Transmit(&huart6,(uint8_t *)JogSpeedBuff,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"j%.de",JogSpeed);
 80044f4:	4b32      	ldr	r3, [pc, #200]	; (80045c0 <ProcessReceivedCommand+0x438>)
 80044f6:	881b      	ldrh	r3, [r3, #0]
 80044f8:	461a      	mov	r2, r3
 80044fa:	4934      	ldr	r1, [pc, #208]	; (80045cc <ProcessReceivedCommand+0x444>)
 80044fc:	4834      	ldr	r0, [pc, #208]	; (80045d0 <ProcessReceivedCommand+0x448>)
 80044fe:	f006 fbb9 	bl	800ac74 <siprintf>
 8004502:	4603      	mov	r3, r0
 8004504:	b2da      	uxtb	r2, r3
 8004506:	4b33      	ldr	r3, [pc, #204]	; (80045d4 <ProcessReceivedCommand+0x44c>)
 8004508:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 800450a:	4b32      	ldr	r3, [pc, #200]	; (80045d4 <ProcessReceivedCommand+0x44c>)
 800450c:	781b      	ldrb	r3, [r3, #0]
 800450e:	b29a      	uxth	r2, r3
 8004510:	23c8      	movs	r3, #200	; 0xc8
 8004512:	492f      	ldr	r1, [pc, #188]	; (80045d0 <ProcessReceivedCommand+0x448>)
 8004514:	4830      	ldr	r0, [pc, #192]	; (80045d8 <ProcessReceivedCommand+0x450>)
 8004516:	f004 fcd0 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess)); // Clear the array
 800451a:	220f      	movs	r2, #15
 800451c:	2100      	movs	r1, #0
 800451e:	482c      	ldr	r0, [pc, #176]	; (80045d0 <ProcessReceivedCommand+0x448>)
 8004520:	f005 fd20 	bl	8009f64 <memset>

				// = (60*10e6)/(JogSpeed*EncoderRelsolution*Timer3Period)
				// Where JogSpeed in rpm; EcoderRelsolution in pulses, Timer3Period in us
				// Timer3 period in us = 2 us
			}
			break;
 8004524:	f000 bd9c 	b.w	8005060 <ProcessReceivedCommand+0xed8>

		case 6: // 6 request driver data
			if((int)MotionCode[1] == 1)
 8004528:	4b24      	ldr	r3, [pc, #144]	; (80045bc <ProcessReceivedCommand+0x434>)
 800452a:	edd3 7a01 	vldr	s15, [r3, #4]
 800452e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004532:	ee17 3a90 	vmov	r3, s15
 8004536:	2b01      	cmp	r3, #1
 8004538:	d108      	bne.n	800454c <ProcessReceivedCommand+0x3c4>
			{
				UIDataRequest = true;
 800453a:	4b28      	ldr	r3, [pc, #160]	; (80045dc <ProcessReceivedCommand+0x454>)
 800453c:	2201      	movs	r2, #1
 800453e:	701a      	strb	r2, [r3, #0]
				ReadMultiRegister(StE03,5);
 8004540:	2105      	movs	r1, #5
 8004542:	200c      	movs	r0, #12
 8004544:	f7fd f830 	bl	80015a8 <ReadMultiRegister>
			} // 6/1 If the UI request data
			else
			{
				UIDataRequest = false;
			}
			break;
 8004548:	f000 bda5 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
				UIDataRequest = false;
 800454c:	4b23      	ldr	r3, [pc, #140]	; (80045dc <ProcessReceivedCommand+0x454>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
			break;
 8004552:	f000 bda0 	b.w	8005096 <ProcessReceivedCommand+0xf0e>

		case 7: // Save System Params
			// Save to the flash memory
			SaveSystemParams();
 8004556:	f7fd f8d7 	bl	8001708 <SaveSystemParams>
			HAL_Delay(500);
 800455a:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 800455e:	f002 fa89 	bl	8006a74 <HAL_Delay>
			SaveSystemParams(); // Do twice times
 8004562:	f7fd f8d1 	bl	8001708 <SaveSystemParams>
			// Send back to the UI to notify
			char MessageBuffer[10];
			TxPCLen = sprintf(MessageBuffer,"r7/1e");
 8004566:	f107 0374 	add.w	r3, r7, #116	; 0x74
 800456a:	491d      	ldr	r1, [pc, #116]	; (80045e0 <ProcessReceivedCommand+0x458>)
 800456c:	4618      	mov	r0, r3
 800456e:	f006 fb81 	bl	800ac74 <siprintf>
 8004572:	4603      	mov	r3, r0
 8004574:	b2da      	uxtb	r2, r3
 8004576:	4b17      	ldr	r3, [pc, #92]	; (80045d4 <ProcessReceivedCommand+0x44c>)
 8004578:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t *)MessageBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 800457a:	4b16      	ldr	r3, [pc, #88]	; (80045d4 <ProcessReceivedCommand+0x44c>)
 800457c:	781b      	ldrb	r3, [r3, #0]
 800457e:	b29a      	uxth	r2, r3
 8004580:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004584:	2364      	movs	r3, #100	; 0x64
 8004586:	4814      	ldr	r0, [pc, #80]	; (80045d8 <ProcessReceivedCommand+0x450>)
 8004588:	f004 fc97 	bl	8008eba <HAL_UART_Transmit>
			break;
 800458c:	f000 bd83 	b.w	8005096 <ProcessReceivedCommand+0xf0e>

		case 8: // Request reading digital driver output
			if((int)MotionCode[1] == 1) {OutputDataRequest = true;} // 8/1 = request
 8004590:	4b0a      	ldr	r3, [pc, #40]	; (80045bc <ProcessReceivedCommand+0x434>)
 8004592:	edd3 7a01 	vldr	s15, [r3, #4]
 8004596:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800459a:	ee17 3a90 	vmov	r3, s15
 800459e:	2b01      	cmp	r3, #1
 80045a0:	d104      	bne.n	80045ac <ProcessReceivedCommand+0x424>
 80045a2:	4b10      	ldr	r3, [pc, #64]	; (80045e4 <ProcessReceivedCommand+0x45c>)
 80045a4:	2201      	movs	r2, #1
 80045a6:	701a      	strb	r2, [r3, #0]
			else OutputDataRequest = false; // 8/0 = stop request
			break;
 80045a8:	f000 bd75 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
			else OutputDataRequest = false; // 8/0 = stop request
 80045ac:	4b0d      	ldr	r3, [pc, #52]	; (80045e4 <ProcessReceivedCommand+0x45c>)
 80045ae:	2200      	movs	r2, #0
 80045b0:	701a      	strb	r2, [r3, #0]
			break;
 80045b2:	f000 bd70 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
 80045b6:	bf00      	nop
 80045b8:	20000002 	.word	0x20000002
 80045bc:	20000504 	.word	0x20000504
 80045c0:	20000008 	.word	0x20000008
 80045c4:	20000003 	.word	0x20000003
 80045c8:	2000044a 	.word	0x2000044a
 80045cc:	0800f828 	.word	0x0800f828
 80045d0:	20000418 	.word	0x20000418
 80045d4:	20000412 	.word	0x20000412
 80045d8:	2000033c 	.word	0x2000033c
 80045dc:	20000433 	.word	0x20000433
 80045e0:	0800f830 	.word	0x0800f830
 80045e4:	20000001 	.word	0x20000001

		case 45: // Load saved parameters
			LoadSavedParam(MemoryAddress,Params);
 80045e8:	499e      	ldr	r1, [pc, #632]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 80045ea:	489f      	ldr	r0, [pc, #636]	; (8004868 <ProcessReceivedCommand+0x6e0>)
 80045ec:	f7fd f84e 	bl	800168c <LoadSavedParam>

			// General Params
			DrumRadius = Params[0];
 80045f0:	4b9c      	ldr	r3, [pc, #624]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 80045f2:	681b      	ldr	r3, [r3, #0]
 80045f4:	4a9d      	ldr	r2, [pc, #628]	; (800486c <ProcessReceivedCommand+0x6e4>)
 80045f6:	6013      	str	r3, [r2, #0]
			PullingSpeed = Params[1];
 80045f8:	4b9a      	ldr	r3, [pc, #616]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 80045fa:	edd3 7a01 	vldr	s15, [r3, #4]
 80045fe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004602:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004606:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800460a:	b2da      	uxtb	r2, r3
 800460c:	4b98      	ldr	r3, [pc, #608]	; (8004870 <ProcessReceivedCommand+0x6e8>)
 800460e:	701a      	strb	r2, [r3, #0]
			StoppingTime = Params[2];
 8004610:	4b94      	ldr	r3, [pc, #592]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 8004612:	edd3 7a02 	vldr	s15, [r3, #8]
 8004616:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800461a:	ee17 3a90 	vmov	r3, s15
 800461e:	b29a      	uxth	r2, r3
 8004620:	4b94      	ldr	r3, [pc, #592]	; (8004874 <ProcessReceivedCommand+0x6ec>)
 8004622:	801a      	strh	r2, [r3, #0]
			SampleTime = Params[3];
 8004624:	4b8f      	ldr	r3, [pc, #572]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 8004626:	edd3 7a03 	vldr	s15, [r3, #12]
 800462a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800462e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004632:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004636:	b2da      	uxtb	r2, r3
 8004638:	4b8f      	ldr	r3, [pc, #572]	; (8004878 <ProcessReceivedCommand+0x6f0>)
 800463a:	701a      	strb	r2, [r3, #0]

			// Dropping Stage Params
			DroppingAccelDistance = Params[4];
 800463c:	4b89      	ldr	r3, [pc, #548]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 800463e:	691b      	ldr	r3, [r3, #16]
 8004640:	4a8e      	ldr	r2, [pc, #568]	; (800487c <ProcessReceivedCommand+0x6f4>)
 8004642:	6013      	str	r3, [r2, #0]
			DroppingAccel  = Params[5];
 8004644:	4b87      	ldr	r3, [pc, #540]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 8004646:	695b      	ldr	r3, [r3, #20]
 8004648:	4a8d      	ldr	r2, [pc, #564]	; (8004880 <ProcessReceivedCommand+0x6f8>)
 800464a:	6013      	str	r3, [r2, #0]
			DroppingDecel = Params[6];
 800464c:	4b85      	ldr	r3, [pc, #532]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 800464e:	699b      	ldr	r3, [r3, #24]
 8004650:	4a8c      	ldr	r2, [pc, #560]	; (8004884 <ProcessReceivedCommand+0x6fc>)
 8004652:	6013      	str	r3, [r2, #0]


			// Pulling Stage Params
			PullingAccelDistance = Params[7];
 8004654:	4b83      	ldr	r3, [pc, #524]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 8004656:	69db      	ldr	r3, [r3, #28]
 8004658:	4a8b      	ldr	r2, [pc, #556]	; (8004888 <ProcessReceivedCommand+0x700>)
 800465a:	6013      	str	r3, [r2, #0]
			PullingAccel = Params[8];
 800465c:	4b81      	ldr	r3, [pc, #516]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 800465e:	6a1b      	ldr	r3, [r3, #32]
 8004660:	4a8a      	ldr	r2, [pc, #552]	; (800488c <ProcessReceivedCommand+0x704>)
 8004662:	6013      	str	r3, [r2, #0]
			PullingDecel = Params[9];
 8004664:	4b7f      	ldr	r3, [pc, #508]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	4a89      	ldr	r2, [pc, #548]	; (8004890 <ProcessReceivedCommand+0x708>)
 800466a:	6013      	str	r3, [r2, #0]

			FlyAccSlope = Params[10];
 800466c:	4b7d      	ldr	r3, [pc, #500]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 800466e:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004670:	4a88      	ldr	r2, [pc, #544]	; (8004894 <ProcessReceivedCommand+0x70c>)
 8004672:	6013      	str	r3, [r2, #0]
			DistCoeff = Params[11];
 8004674:	4b7b      	ldr	r3, [pc, #492]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 8004676:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004678:	4a87      	ldr	r2, [pc, #540]	; (8004898 <ProcessReceivedCommand+0x710>)
 800467a:	6013      	str	r3, [r2, #0]
			BrakeAccSlope = Params[12];
 800467c:	4b79      	ldr	r3, [pc, #484]	; (8004864 <ProcessReceivedCommand+0x6dc>)
 800467e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004680:	4a86      	ldr	r2, [pc, #536]	; (800489c <ProcessReceivedCommand+0x714>)
 8004682:	6013      	str	r3, [r2, #0]
			// Send to the GUI
			char ParamBuffer[60];
			TxPCLen = sprintf(ParamBuffer,"p%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4fe"
 8004684:	4b79      	ldr	r3, [pc, #484]	; (800486c <ProcessReceivedCommand+0x6e4>)
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	4618      	mov	r0, r3
 800468a:	f7fb ff5d 	bl	8000548 <__aeabi_f2d>
 800468e:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8004692:	4b77      	ldr	r3, [pc, #476]	; (8004870 <ProcessReceivedCommand+0x6e8>)
 8004694:	781b      	ldrb	r3, [r3, #0]
 8004696:	461e      	mov	r6, r3
 8004698:	4b76      	ldr	r3, [pc, #472]	; (8004874 <ProcessReceivedCommand+0x6ec>)
 800469a:	881b      	ldrh	r3, [r3, #0]
 800469c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800469e:	4b76      	ldr	r3, [pc, #472]	; (8004878 <ProcessReceivedCommand+0x6f0>)
 80046a0:	781b      	ldrb	r3, [r3, #0]
 80046a2:	62bb      	str	r3, [r7, #40]	; 0x28
 80046a4:	4b75      	ldr	r3, [pc, #468]	; (800487c <ProcessReceivedCommand+0x6f4>)
 80046a6:	681b      	ldr	r3, [r3, #0]
 80046a8:	4618      	mov	r0, r3
 80046aa:	f7fb ff4d 	bl	8000548 <__aeabi_f2d>
 80046ae:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80046b2:	4b73      	ldr	r3, [pc, #460]	; (8004880 <ProcessReceivedCommand+0x6f8>)
 80046b4:	681b      	ldr	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fb ff46 	bl	8000548 <__aeabi_f2d>
 80046bc:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80046c0:	4b70      	ldr	r3, [pc, #448]	; (8004884 <ProcessReceivedCommand+0x6fc>)
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	4618      	mov	r0, r3
 80046c6:	f7fb ff3f 	bl	8000548 <__aeabi_f2d>
 80046ca:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80046ce:	4b6e      	ldr	r3, [pc, #440]	; (8004888 <ProcessReceivedCommand+0x700>)
 80046d0:	681b      	ldr	r3, [r3, #0]
 80046d2:	4618      	mov	r0, r3
 80046d4:	f7fb ff38 	bl	8000548 <__aeabi_f2d>
 80046d8:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80046dc:	4b6b      	ldr	r3, [pc, #428]	; (800488c <ProcessReceivedCommand+0x704>)
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	4618      	mov	r0, r3
 80046e2:	f7fb ff31 	bl	8000548 <__aeabi_f2d>
 80046e6:	e9c7 0100 	strd	r0, r1, [r7]
 80046ea:	4b69      	ldr	r3, [pc, #420]	; (8004890 <ProcessReceivedCommand+0x708>)
 80046ec:	681b      	ldr	r3, [r3, #0]
 80046ee:	4618      	mov	r0, r3
 80046f0:	f7fb ff2a 	bl	8000548 <__aeabi_f2d>
 80046f4:	4682      	mov	sl, r0
 80046f6:	468b      	mov	fp, r1
 80046f8:	4b66      	ldr	r3, [pc, #408]	; (8004894 <ProcessReceivedCommand+0x70c>)
 80046fa:	681b      	ldr	r3, [r3, #0]
 80046fc:	4618      	mov	r0, r3
 80046fe:	f7fb ff23 	bl	8000548 <__aeabi_f2d>
 8004702:	4680      	mov	r8, r0
 8004704:	4689      	mov	r9, r1
 8004706:	4b64      	ldr	r3, [pc, #400]	; (8004898 <ProcessReceivedCommand+0x710>)
 8004708:	681b      	ldr	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fb ff1c 	bl	8000548 <__aeabi_f2d>
 8004710:	4604      	mov	r4, r0
 8004712:	460d      	mov	r5, r1
 8004714:	4b61      	ldr	r3, [pc, #388]	; (800489c <ProcessReceivedCommand+0x714>)
 8004716:	681b      	ldr	r3, [r3, #0]
 8004718:	4618      	mov	r0, r3
 800471a:	f7fb ff15 	bl	8000548 <__aeabi_f2d>
 800471e:	4602      	mov	r2, r0
 8004720:	460b      	mov	r3, r1
 8004722:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004726:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800472a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800472e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8004732:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8004736:	ed97 7b00 	vldr	d7, [r7]
 800473a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800473e:	ed97 7b02 	vldr	d7, [r7, #8]
 8004742:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8004746:	ed97 7b04 	vldr	d7, [r7, #16]
 800474a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800474e:	ed97 7b06 	vldr	d7, [r7, #24]
 8004752:	ed8d 7b06 	vstr	d7, [sp, #24]
 8004756:	ed97 7b08 	vldr	d7, [r7, #32]
 800475a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800475e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8004760:	9102      	str	r1, [sp, #8]
 8004762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004764:	9301      	str	r3, [sp, #4]
 8004766:	9600      	str	r6, [sp, #0]
 8004768:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800476c:	494c      	ldr	r1, [pc, #304]	; (80048a0 <ProcessReceivedCommand+0x718>)
 800476e:	f006 fa81 	bl	800ac74 <siprintf>
 8004772:	4603      	mov	r3, r0
 8004774:	b2da      	uxtb	r2, r3
 8004776:	4b4b      	ldr	r3, [pc, #300]	; (80048a4 <ProcessReceivedCommand+0x71c>)
 8004778:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
					 FlyAccSlope, DistCoeff, BrakeAccSlope); // Combine to a string
			HAL_UART_Transmit(&huart6,(uint8_t *)ParamBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 800477a:	4b4a      	ldr	r3, [pc, #296]	; (80048a4 <ProcessReceivedCommand+0x71c>)
 800477c:	781b      	ldrb	r3, [r3, #0]
 800477e:	b29a      	uxth	r2, r3
 8004780:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8004784:	23c8      	movs	r3, #200	; 0xc8
 8004786:	4848      	ldr	r0, [pc, #288]	; (80048a8 <ProcessReceivedCommand+0x720>)
 8004788:	f004 fb97 	bl	8008eba <HAL_UART_Transmit>
			break;
 800478c:	f000 bc83 	b.w	8005096 <ProcessReceivedCommand+0xf0e>

		case 11: // Set Drum Radius
			if (StartRunning) // Setting is not available while running
 8004790:	4b46      	ldr	r3, [pc, #280]	; (80048ac <ProcessReceivedCommand+0x724>)
 8004792:	781b      	ldrb	r3, [r3, #0]
 8004794:	2b00      	cmp	r3, #0
 8004796:	d006      	beq.n	80047a6 <ProcessReceivedCommand+0x61e>
			{
				InitializeRunning (ExperimentMode);
 8004798:	4b45      	ldr	r3, [pc, #276]	; (80048b0 <ProcessReceivedCommand+0x728>)
 800479a:	781b      	ldrb	r3, [r3, #0]
 800479c:	4618      	mov	r0, r3
 800479e:	f7fd fc51 	bl	8002044 <InitializeRunning>
				break;
 80047a2:	f000 bc78 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
			}
			else
			{
				DrumRadius = MotionCode[1];
 80047a6:	4b43      	ldr	r3, [pc, #268]	; (80048b4 <ProcessReceivedCommand+0x72c>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a30      	ldr	r2, [pc, #192]	; (800486c <ProcessReceivedCommand+0x6e4>)
 80047ac:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 80047ae:	f7ff f9b7 	bl	8003b20 <CalculateRunningSpec>

//				char DrumRadiusBuffer[10];
//				TxPCLen = sprintf(DrumRadiusBuffer,"r11/%.2fe",DrumRadius);
//				HAL_UART_Transmit(&huart6,(uint8_t *)DrumRadiusBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"r11/%.2fe",DrumRadius);
 80047b2:	4b2e      	ldr	r3, [pc, #184]	; (800486c <ProcessReceivedCommand+0x6e4>)
 80047b4:	681b      	ldr	r3, [r3, #0]
 80047b6:	4618      	mov	r0, r3
 80047b8:	f7fb fec6 	bl	8000548 <__aeabi_f2d>
 80047bc:	4602      	mov	r2, r0
 80047be:	460b      	mov	r3, r1
 80047c0:	493d      	ldr	r1, [pc, #244]	; (80048b8 <ProcessReceivedCommand+0x730>)
 80047c2:	483e      	ldr	r0, [pc, #248]	; (80048bc <ProcessReceivedCommand+0x734>)
 80047c4:	f006 fa56 	bl	800ac74 <siprintf>
 80047c8:	4603      	mov	r3, r0
 80047ca:	b2da      	uxtb	r2, r3
 80047cc:	4b35      	ldr	r3, [pc, #212]	; (80048a4 <ProcessReceivedCommand+0x71c>)
 80047ce:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200);
 80047d0:	4b34      	ldr	r3, [pc, #208]	; (80048a4 <ProcessReceivedCommand+0x71c>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	b29a      	uxth	r2, r3
 80047d6:	23c8      	movs	r3, #200	; 0xc8
 80047d8:	4938      	ldr	r1, [pc, #224]	; (80048bc <ProcessReceivedCommand+0x734>)
 80047da:	4833      	ldr	r0, [pc, #204]	; (80048a8 <ProcessReceivedCommand+0x720>)
 80047dc:	f004 fb6d 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80047e0:	220f      	movs	r2, #15
 80047e2:	2100      	movs	r1, #0
 80047e4:	4835      	ldr	r0, [pc, #212]	; (80048bc <ProcessReceivedCommand+0x734>)
 80047e6:	f005 fbbd 	bl	8009f64 <memset>
				break;
 80047ea:	f000 bc54 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
			}

		case 12: // Set DroppingAccelDistance
			if (StartRunning) // Setting is not available while running
 80047ee:	4b2f      	ldr	r3, [pc, #188]	; (80048ac <ProcessReceivedCommand+0x724>)
 80047f0:	781b      	ldrb	r3, [r3, #0]
 80047f2:	2b00      	cmp	r3, #0
 80047f4:	d006      	beq.n	8004804 <ProcessReceivedCommand+0x67c>
			{
				InitializeRunning (ExperimentMode);
 80047f6:	4b2e      	ldr	r3, [pc, #184]	; (80048b0 <ProcessReceivedCommand+0x728>)
 80047f8:	781b      	ldrb	r3, [r3, #0]
 80047fa:	4618      	mov	r0, r3
 80047fc:	f7fd fc22 	bl	8002044 <InitializeRunning>
				break;
 8004800:	f000 bc49 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
			}
			else
			{
				DroppingAccelDistance = MotionCode[1];
 8004804:	4b2b      	ldr	r3, [pc, #172]	; (80048b4 <ProcessReceivedCommand+0x72c>)
 8004806:	685b      	ldr	r3, [r3, #4]
 8004808:	4a1c      	ldr	r2, [pc, #112]	; (800487c <ProcessReceivedCommand+0x6f4>)
 800480a:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 800480c:	f7ff f988 	bl	8003b20 <CalculateRunningSpec>

//				char DroppingAccelDistanceBuffer[10];
//				TxPCLen = sprintf(DroppingAccelDistanceBuffer,"r12/%.1fe",DroppingAccelDistance);
//				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelDistanceBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not

				TxPCLen = sprintf(ResponseMess,"r12/%.1fe",DroppingAccelDistance);
 8004810:	4b1a      	ldr	r3, [pc, #104]	; (800487c <ProcessReceivedCommand+0x6f4>)
 8004812:	681b      	ldr	r3, [r3, #0]
 8004814:	4618      	mov	r0, r3
 8004816:	f7fb fe97 	bl	8000548 <__aeabi_f2d>
 800481a:	4602      	mov	r2, r0
 800481c:	460b      	mov	r3, r1
 800481e:	4928      	ldr	r1, [pc, #160]	; (80048c0 <ProcessReceivedCommand+0x738>)
 8004820:	4826      	ldr	r0, [pc, #152]	; (80048bc <ProcessReceivedCommand+0x734>)
 8004822:	f006 fa27 	bl	800ac74 <siprintf>
 8004826:	4603      	mov	r3, r0
 8004828:	b2da      	uxtb	r2, r3
 800482a:	4b1e      	ldr	r3, [pc, #120]	; (80048a4 <ProcessReceivedCommand+0x71c>)
 800482c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800482e:	4b1d      	ldr	r3, [pc, #116]	; (80048a4 <ProcessReceivedCommand+0x71c>)
 8004830:	781b      	ldrb	r3, [r3, #0]
 8004832:	b29a      	uxth	r2, r3
 8004834:	23c8      	movs	r3, #200	; 0xc8
 8004836:	4921      	ldr	r1, [pc, #132]	; (80048bc <ProcessReceivedCommand+0x734>)
 8004838:	481b      	ldr	r0, [pc, #108]	; (80048a8 <ProcessReceivedCommand+0x720>)
 800483a:	f004 fb3e 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800483e:	220f      	movs	r2, #15
 8004840:	2100      	movs	r1, #0
 8004842:	481e      	ldr	r0, [pc, #120]	; (80048bc <ProcessReceivedCommand+0x734>)
 8004844:	f005 fb8e 	bl	8009f64 <memset>
				break;
 8004848:	f000 bc25 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
			}

		case 13: // Set PullingSpeed
			// PullingSpeed is the maximum speed when homing or going to the initial Posion
			if (StartRunning) // Setting is not available while running
 800484c:	4b17      	ldr	r3, [pc, #92]	; (80048ac <ProcessReceivedCommand+0x724>)
 800484e:	781b      	ldrb	r3, [r3, #0]
 8004850:	2b00      	cmp	r3, #0
 8004852:	d037      	beq.n	80048c4 <ProcessReceivedCommand+0x73c>
			{
				InitializeRunning (ExperimentMode);
 8004854:	4b16      	ldr	r3, [pc, #88]	; (80048b0 <ProcessReceivedCommand+0x728>)
 8004856:	781b      	ldrb	r3, [r3, #0]
 8004858:	4618      	mov	r0, r3
 800485a:	f7fd fbf3 	bl	8002044 <InitializeRunning>
				break;
 800485e:	f000 bc1a 	b.w	8005096 <ProcessReceivedCommand+0xf0e>
 8004862:	bf00      	nop
 8004864:	200004c0 	.word	0x200004c0
 8004868:	08040000 	.word	0x08040000
 800486c:	20000454 	.word	0x20000454
 8004870:	20000459 	.word	0x20000459
 8004874:	2000045a 	.word	0x2000045a
 8004878:	20000458 	.word	0x20000458
 800487c:	2000047c 	.word	0x2000047c
 8004880:	20000460 	.word	0x20000460
 8004884:	20000464 	.word	0x20000464
 8004888:	200004a0 	.word	0x200004a0
 800488c:	20000484 	.word	0x20000484
 8004890:	20000488 	.word	0x20000488
 8004894:	2000052c 	.word	0x2000052c
 8004898:	20000524 	.word	0x20000524
 800489c:	20000528 	.word	0x20000528
 80048a0:	0800f838 	.word	0x0800f838
 80048a4:	20000412 	.word	0x20000412
 80048a8:	2000033c 	.word	0x2000033c
 80048ac:	20000430 	.word	0x20000430
 80048b0:	20000006 	.word	0x20000006
 80048b4:	20000504 	.word	0x20000504
 80048b8:	0800f878 	.word	0x0800f878
 80048bc:	20000418 	.word	0x20000418
 80048c0:	0800f884 	.word	0x0800f884
			}
			else
			{
				PullingSpeed = MotionCode[1];
 80048c4:	4ba8      	ldr	r3, [pc, #672]	; (8004b68 <ProcessReceivedCommand+0x9e0>)
 80048c6:	edd3 7a01 	vldr	s15, [r3, #4]
 80048ca:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80048ce:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80048d2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80048d6:	b2da      	uxtb	r2, r3
 80048d8:	4ba4      	ldr	r3, [pc, #656]	; (8004b6c <ProcessReceivedCommand+0x9e4>)
 80048da:	701a      	strb	r2, [r3, #0]
				GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 80048dc:	4ba3      	ldr	r3, [pc, #652]	; (8004b6c <ProcessReceivedCommand+0x9e4>)
 80048de:	781b      	ldrb	r3, [r3, #0]
 80048e0:	4618      	mov	r0, r3
 80048e2:	f7fb fe1f 	bl	8000524 <__aeabi_i2d>
 80048e6:	a39e      	add	r3, pc, #632	; (adr r3, 8004b60 <ProcessReceivedCommand+0x9d8>)
 80048e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80048ec:	f7fb fe84 	bl	80005f8 <__aeabi_dmul>
 80048f0:	4602      	mov	r2, r0
 80048f2:	460b      	mov	r3, r1
 80048f4:	4610      	mov	r0, r2
 80048f6:	4619      	mov	r1, r3
 80048f8:	f04f 0200 	mov.w	r2, #0
 80048fc:	4b9c      	ldr	r3, [pc, #624]	; (8004b70 <ProcessReceivedCommand+0x9e8>)
 80048fe:	f7fb ffa5 	bl	800084c <__aeabi_ddiv>
 8004902:	4602      	mov	r2, r0
 8004904:	460b      	mov	r3, r1
 8004906:	4610      	mov	r0, r2
 8004908:	4619      	mov	r1, r3
 800490a:	f7fc f96d 	bl	8000be8 <__aeabi_d2f>
 800490e:	4603      	mov	r3, r0
 8004910:	4a98      	ldr	r2, [pc, #608]	; (8004b74 <ProcessReceivedCommand+0x9ec>)
 8004912:	6013      	str	r3, [r2, #0]

				//char PullingSpeedBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r13/%de",PullingSpeed);
 8004914:	4b95      	ldr	r3, [pc, #596]	; (8004b6c <ProcessReceivedCommand+0x9e4>)
 8004916:	781b      	ldrb	r3, [r3, #0]
 8004918:	461a      	mov	r2, r3
 800491a:	4997      	ldr	r1, [pc, #604]	; (8004b78 <ProcessReceivedCommand+0x9f0>)
 800491c:	4897      	ldr	r0, [pc, #604]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 800491e:	f006 f9a9 	bl	800ac74 <siprintf>
 8004922:	4603      	mov	r3, r0
 8004924:	b2da      	uxtb	r2, r3
 8004926:	4b96      	ldr	r3, [pc, #600]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 8004928:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800492a:	4b95      	ldr	r3, [pc, #596]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 800492c:	781b      	ldrb	r3, [r3, #0]
 800492e:	b29a      	uxth	r2, r3
 8004930:	23c8      	movs	r3, #200	; 0xc8
 8004932:	4992      	ldr	r1, [pc, #584]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004934:	4893      	ldr	r0, [pc, #588]	; (8004b84 <ProcessReceivedCommand+0x9fc>)
 8004936:	f004 fac0 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 800493a:	220f      	movs	r2, #15
 800493c:	2100      	movs	r1, #0
 800493e:	488f      	ldr	r0, [pc, #572]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004940:	f005 fb10 	bl	8009f64 <memset>
				break;
 8004944:	e3a7      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}

		case 14: // Start Simulating
			if (StartRunning || StartSimulating) // Setting is not available while running
 8004946:	4b90      	ldr	r3, [pc, #576]	; (8004b88 <ProcessReceivedCommand+0xa00>)
 8004948:	781b      	ldrb	r3, [r3, #0]
 800494a:	2b00      	cmp	r3, #0
 800494c:	d103      	bne.n	8004956 <ProcessReceivedCommand+0x7ce>
 800494e:	4b8f      	ldr	r3, [pc, #572]	; (8004b8c <ProcessReceivedCommand+0xa04>)
 8004950:	781b      	ldrb	r3, [r3, #0]
 8004952:	2b00      	cmp	r3, #0
 8004954:	d015      	beq.n	8004982 <ProcessReceivedCommand+0x7fa>
			{
				TxPCLen = sprintf(ResponseMess,"g14/0e"); // Respond that can not Start the experiment
 8004956:	498e      	ldr	r1, [pc, #568]	; (8004b90 <ProcessReceivedCommand+0xa08>)
 8004958:	4888      	ldr	r0, [pc, #544]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 800495a:	f006 f98b 	bl	800ac74 <siprintf>
 800495e:	4603      	mov	r3, r0
 8004960:	b2da      	uxtb	r2, r3
 8004962:	4b87      	ldr	r3, [pc, #540]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 8004964:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004966:	4b86      	ldr	r3, [pc, #536]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 8004968:	781b      	ldrb	r3, [r3, #0]
 800496a:	b29a      	uxth	r2, r3
 800496c:	23c8      	movs	r3, #200	; 0xc8
 800496e:	4983      	ldr	r1, [pc, #524]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004970:	4884      	ldr	r0, [pc, #528]	; (8004b84 <ProcessReceivedCommand+0x9fc>)
 8004972:	f004 faa2 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004976:	220f      	movs	r2, #15
 8004978:	2100      	movs	r1, #0
 800497a:	4880      	ldr	r0, [pc, #512]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 800497c:	f005 faf2 	bl	8009f64 <memset>
				break;
 8004980:	e389      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}
			else
			{
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8004982:	2200      	movs	r2, #0
 8004984:	2110      	movs	r1, #16
 8004986:	4883      	ldr	r0, [pc, #524]	; (8004b94 <ProcessReceivedCommand+0xa0c>)
 8004988:	f002 feee 	bl	8007768 <HAL_GPIO_WritePin>
				HAL_Delay(500);
 800498c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8004990:	f002 f870 	bl	8006a74 <HAL_Delay>
				InitializeSimulating (ExperimentMode);
 8004994:	4b80      	ldr	r3, [pc, #512]	; (8004b98 <ProcessReceivedCommand+0xa10>)
 8004996:	781b      	ldrb	r3, [r3, #0]
 8004998:	4618      	mov	r0, r3
 800499a:	f7fd faf1 	bl	8001f80 <InitializeSimulating>
				break;
 800499e:	e37a      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}
		case 15: // Set DroppingAccel
			if (StartRunning)
 80049a0:	4b79      	ldr	r3, [pc, #484]	; (8004b88 <ProcessReceivedCommand+0xa00>)
 80049a2:	781b      	ldrb	r3, [r3, #0]
 80049a4:	2b00      	cmp	r3, #0
 80049a6:	f040 835d 	bne.w	8005064 <ProcessReceivedCommand+0xedc>
			{
				break;
			}
			else
			{
				DroppingAccel = MotionCode[1];
 80049aa:	4b6f      	ldr	r3, [pc, #444]	; (8004b68 <ProcessReceivedCommand+0x9e0>)
 80049ac:	685b      	ldr	r3, [r3, #4]
 80049ae:	4a7b      	ldr	r2, [pc, #492]	; (8004b9c <ProcessReceivedCommand+0xa14>)
 80049b0:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 80049b2:	f7ff f8b5 	bl	8003b20 <CalculateRunningSpec>

				//char DroppingAccelBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r15/%.3fe",DroppingAccel);
 80049b6:	4b79      	ldr	r3, [pc, #484]	; (8004b9c <ProcessReceivedCommand+0xa14>)
 80049b8:	681b      	ldr	r3, [r3, #0]
 80049ba:	4618      	mov	r0, r3
 80049bc:	f7fb fdc4 	bl	8000548 <__aeabi_f2d>
 80049c0:	4602      	mov	r2, r0
 80049c2:	460b      	mov	r3, r1
 80049c4:	4976      	ldr	r1, [pc, #472]	; (8004ba0 <ProcessReceivedCommand+0xa18>)
 80049c6:	486d      	ldr	r0, [pc, #436]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 80049c8:	f006 f954 	bl	800ac74 <siprintf>
 80049cc:	4603      	mov	r3, r0
 80049ce:	b2da      	uxtb	r2, r3
 80049d0:	4b6b      	ldr	r3, [pc, #428]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 80049d2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 80049d4:	4b6a      	ldr	r3, [pc, #424]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 80049d6:	781b      	ldrb	r3, [r3, #0]
 80049d8:	b29a      	uxth	r2, r3
 80049da:	23c8      	movs	r3, #200	; 0xc8
 80049dc:	4967      	ldr	r1, [pc, #412]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 80049de:	4869      	ldr	r0, [pc, #420]	; (8004b84 <ProcessReceivedCommand+0x9fc>)
 80049e0:	f004 fa6b 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 80049e4:	220f      	movs	r2, #15
 80049e6:	2100      	movs	r1, #0
 80049e8:	4864      	ldr	r0, [pc, #400]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 80049ea:	f005 fabb 	bl	8009f64 <memset>
				break;
 80049ee:	e352      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}
		case 16: // Set SampleTime
			if (StartRunning) // When the experiment is running, disable this fcn
 80049f0:	4b65      	ldr	r3, [pc, #404]	; (8004b88 <ProcessReceivedCommand+0xa00>)
 80049f2:	781b      	ldrb	r3, [r3, #0]
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	f040 8337 	bne.w	8005068 <ProcessReceivedCommand+0xee0>
			{
				break;
			}
			else
			{
				SampleTime = MotionCode[1];
 80049fa:	4b5b      	ldr	r3, [pc, #364]	; (8004b68 <ProcessReceivedCommand+0x9e0>)
 80049fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a00:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004a04:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004a08:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004a0c:	b2da      	uxtb	r2, r3
 8004a0e:	4b65      	ldr	r3, [pc, #404]	; (8004ba4 <ProcessReceivedCommand+0xa1c>)
 8004a10:	701a      	strb	r2, [r3, #0]
				if (SampleTime<= 20) // ms Set value range, 20:100ms
 8004a12:	4b64      	ldr	r3, [pc, #400]	; (8004ba4 <ProcessReceivedCommand+0xa1c>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b14      	cmp	r3, #20
 8004a18:	d802      	bhi.n	8004a20 <ProcessReceivedCommand+0x898>
				{
					SampleTime = 20;
 8004a1a:	4b62      	ldr	r3, [pc, #392]	; (8004ba4 <ProcessReceivedCommand+0xa1c>)
 8004a1c:	2214      	movs	r2, #20
 8004a1e:	701a      	strb	r2, [r3, #0]
				}
				if (SampleTime >= 100) // ms
 8004a20:	4b60      	ldr	r3, [pc, #384]	; (8004ba4 <ProcessReceivedCommand+0xa1c>)
 8004a22:	781b      	ldrb	r3, [r3, #0]
 8004a24:	2b63      	cmp	r3, #99	; 0x63
 8004a26:	d902      	bls.n	8004a2e <ProcessReceivedCommand+0x8a6>
				{
					SampleTime = 100;
 8004a28:	4b5e      	ldr	r3, [pc, #376]	; (8004ba4 <ProcessReceivedCommand+0xa1c>)
 8004a2a:	2264      	movs	r2, #100	; 0x64
 8004a2c:	701a      	strb	r2, [r3, #0]
				}
				//char SammpleTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r16/%de",SampleTime);
 8004a2e:	4b5d      	ldr	r3, [pc, #372]	; (8004ba4 <ProcessReceivedCommand+0xa1c>)
 8004a30:	781b      	ldrb	r3, [r3, #0]
 8004a32:	461a      	mov	r2, r3
 8004a34:	495c      	ldr	r1, [pc, #368]	; (8004ba8 <ProcessReceivedCommand+0xa20>)
 8004a36:	4851      	ldr	r0, [pc, #324]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004a38:	f006 f91c 	bl	800ac74 <siprintf>
 8004a3c:	4603      	mov	r3, r0
 8004a3e:	b2da      	uxtb	r2, r3
 8004a40:	4b4f      	ldr	r3, [pc, #316]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 8004a42:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004a44:	4b4e      	ldr	r3, [pc, #312]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 8004a46:	781b      	ldrb	r3, [r3, #0]
 8004a48:	b29a      	uxth	r2, r3
 8004a4a:	23c8      	movs	r3, #200	; 0xc8
 8004a4c:	494b      	ldr	r1, [pc, #300]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004a4e:	484d      	ldr	r0, [pc, #308]	; (8004b84 <ProcessReceivedCommand+0x9fc>)
 8004a50:	f004 fa33 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004a54:	220f      	movs	r2, #15
 8004a56:	2100      	movs	r1, #0
 8004a58:	4848      	ldr	r0, [pc, #288]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004a5a:	f005 fa83 	bl	8009f64 <memset>
				break;
 8004a5e:	e31a      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}

		case 17: // Reset MCU
			HAL_NVIC_SystemReset();
 8004a60:	f002 f947 	bl	8006cf2 <HAL_NVIC_SystemReset>
			break;
 8004a64:	e317      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
		case 18: // Servo Enable on/off
			if (MotionCode[1] == 1) // Servo Enable ON
 8004a66:	4b40      	ldr	r3, [pc, #256]	; (8004b68 <ProcessReceivedCommand+0x9e0>)
 8004a68:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a6c:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a70:	eef4 7a47 	vcmp.f32	s15, s14
 8004a74:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a78:	d105      	bne.n	8004a86 <ProcessReceivedCommand+0x8fe>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Servo enable on
 8004a7a:	2201      	movs	r2, #1
 8004a7c:	2110      	movs	r1, #16
 8004a7e:	4845      	ldr	r0, [pc, #276]	; (8004b94 <ProcessReceivedCommand+0xa0c>)
 8004a80:	f002 fe72 	bl	8007768 <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
			break;
 8004a84:	e307      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8004a86:	2200      	movs	r2, #0
 8004a88:	2110      	movs	r1, #16
 8004a8a:	4842      	ldr	r0, [pc, #264]	; (8004b94 <ProcessReceivedCommand+0xa0c>)
 8004a8c:	f002 fe6c 	bl	8007768 <HAL_GPIO_WritePin>
			break;
 8004a90:	e301      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
//					DisableSTOP();
//				}
//				break;
//			}
		case 27: // Set Running Mode
			if(StartRunning) // Setting is not available while running
 8004a92:	4b3d      	ldr	r3, [pc, #244]	; (8004b88 <ProcessReceivedCommand+0xa00>)
 8004a94:	781b      	ldrb	r3, [r3, #0]
 8004a96:	2b00      	cmp	r3, #0
 8004a98:	f040 82e8 	bne.w	800506c <ProcessReceivedCommand+0xee4>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // RunningMode = true => Automatic Running
 8004a9c:	4b32      	ldr	r3, [pc, #200]	; (8004b68 <ProcessReceivedCommand+0x9e0>)
 8004a9e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004aa2:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004aa6:	eef4 7a47 	vcmp.f32	s15, s14
 8004aaa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004aae:	d103      	bne.n	8004ab8 <ProcessReceivedCommand+0x930>
				{
					RunningMode = true; // Automatic
 8004ab0:	4b3e      	ldr	r3, [pc, #248]	; (8004bac <ProcessReceivedCommand+0xa24>)
 8004ab2:	2201      	movs	r2, #1
 8004ab4:	701a      	strb	r2, [r3, #0]
 8004ab6:	e002      	b.n	8004abe <ProcessReceivedCommand+0x936>
				}
				else
				{
					RunningMode = false; // Manual
 8004ab8:	4b3c      	ldr	r3, [pc, #240]	; (8004bac <ProcessReceivedCommand+0xa24>)
 8004aba:	2200      	movs	r2, #0
 8004abc:	701a      	strb	r2, [r3, #0]
				}
				//char SammpleTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"g27/%de",RunningMode);
 8004abe:	4b3b      	ldr	r3, [pc, #236]	; (8004bac <ProcessReceivedCommand+0xa24>)
 8004ac0:	781b      	ldrb	r3, [r3, #0]
 8004ac2:	461a      	mov	r2, r3
 8004ac4:	493a      	ldr	r1, [pc, #232]	; (8004bb0 <ProcessReceivedCommand+0xa28>)
 8004ac6:	482d      	ldr	r0, [pc, #180]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004ac8:	f006 f8d4 	bl	800ac74 <siprintf>
 8004acc:	4603      	mov	r3, r0
 8004ace:	b2da      	uxtb	r2, r3
 8004ad0:	4b2b      	ldr	r3, [pc, #172]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 8004ad2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004ad4:	4b2a      	ldr	r3, [pc, #168]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 8004ad6:	781b      	ldrb	r3, [r3, #0]
 8004ad8:	b29a      	uxth	r2, r3
 8004ada:	23c8      	movs	r3, #200	; 0xc8
 8004adc:	4927      	ldr	r1, [pc, #156]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004ade:	4829      	ldr	r0, [pc, #164]	; (8004b84 <ProcessReceivedCommand+0x9fc>)
 8004ae0:	f004 f9eb 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004ae4:	220f      	movs	r2, #15
 8004ae6:	2100      	movs	r1, #0
 8004ae8:	4824      	ldr	r0, [pc, #144]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004aea:	f005 fa3b 	bl	8009f64 <memset>
				break;
 8004aee:	e2d2      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}

		case 28: // Stop jog move up/down in Position Jog control;
			if (StartRunning) // Setting is not available while running
 8004af0:	4b25      	ldr	r3, [pc, #148]	; (8004b88 <ProcessReceivedCommand+0xa00>)
 8004af2:	781b      	ldrb	r3, [r3, #0]
 8004af4:	2b00      	cmp	r3, #0
 8004af6:	f040 82bb 	bne.w	8005070 <ProcessReceivedCommand+0xee8>
			{
				break;
			}
			else
			{
				StopPulseGenerating();
 8004afa:	f7fc ff2b 	bl	8001954 <StopPulseGenerating>
				JoggingMoveUp = false;
 8004afe:	4b2d      	ldr	r3, [pc, #180]	; (8004bb4 <ProcessReceivedCommand+0xa2c>)
 8004b00:	2200      	movs	r2, #0
 8004b02:	701a      	strb	r2, [r3, #0]
				//HAL_TIM_IC_Stop()
				break;
 8004b04:	e2c7      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
//				}
//				break;
//			}

		case 31: // Set Experiment Mode
			if (StartRunning) // Setting is not available while running
 8004b06:	4b20      	ldr	r3, [pc, #128]	; (8004b88 <ProcessReceivedCommand+0xa00>)
 8004b08:	781b      	ldrb	r3, [r3, #0]
 8004b0a:	2b00      	cmp	r3, #0
 8004b0c:	f040 82b2 	bne.w	8005074 <ProcessReceivedCommand+0xeec>
			{
				break;
			}
			else
			{
				ExperimentMode = MotionCode[1]; // 1=Dropping Mode;2 = Pulling; 3= Pulling->Dropping
 8004b10:	4b15      	ldr	r3, [pc, #84]	; (8004b68 <ProcessReceivedCommand+0x9e0>)
 8004b12:	edd3 7a01 	vldr	s15, [r3, #4]
 8004b16:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004b1a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004b1e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004b22:	b2da      	uxtb	r2, r3
 8004b24:	4b1c      	ldr	r3, [pc, #112]	; (8004b98 <ProcessReceivedCommand+0xa10>)
 8004b26:	701a      	strb	r2, [r3, #0]
				//char SetModeBuff[8];
				TxPCLen = sprintf(ResponseMess,"m%de",ExperimentMode);
 8004b28:	4b1b      	ldr	r3, [pc, #108]	; (8004b98 <ProcessReceivedCommand+0xa10>)
 8004b2a:	781b      	ldrb	r3, [r3, #0]
 8004b2c:	461a      	mov	r2, r3
 8004b2e:	4922      	ldr	r1, [pc, #136]	; (8004bb8 <ProcessReceivedCommand+0xa30>)
 8004b30:	4812      	ldr	r0, [pc, #72]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004b32:	f006 f89f 	bl	800ac74 <siprintf>
 8004b36:	4603      	mov	r3, r0
 8004b38:	b2da      	uxtb	r2, r3
 8004b3a:	4b11      	ldr	r3, [pc, #68]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 8004b3c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004b3e:	4b10      	ldr	r3, [pc, #64]	; (8004b80 <ProcessReceivedCommand+0x9f8>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	b29a      	uxth	r2, r3
 8004b44:	2364      	movs	r3, #100	; 0x64
 8004b46:	490d      	ldr	r1, [pc, #52]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004b48:	480e      	ldr	r0, [pc, #56]	; (8004b84 <ProcessReceivedCommand+0x9fc>)
 8004b4a:	f004 f9b6 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004b4e:	220f      	movs	r2, #15
 8004b50:	2100      	movs	r1, #0
 8004b52:	480a      	ldr	r0, [pc, #40]	; (8004b7c <ProcessReceivedCommand+0x9f4>)
 8004b54:	f005 fa06 	bl	8009f64 <memset>
				break;
 8004b58:	e29d      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
 8004b5a:	bf00      	nop
 8004b5c:	f3af 8000 	nop.w
 8004b60:	9999999a 	.word	0x9999999a
 8004b64:	3fb99999 	.word	0x3fb99999
 8004b68:	20000504 	.word	0x20000504
 8004b6c:	20000459 	.word	0x20000459
 8004b70:	40080000 	.word	0x40080000
 8004b74:	2000045c 	.word	0x2000045c
 8004b78:	0800f890 	.word	0x0800f890
 8004b7c:	20000418 	.word	0x20000418
 8004b80:	20000412 	.word	0x20000412
 8004b84:	2000033c 	.word	0x2000033c
 8004b88:	20000430 	.word	0x20000430
 8004b8c:	20000431 	.word	0x20000431
 8004b90:	0800f898 	.word	0x0800f898
 8004b94:	40020800 	.word	0x40020800
 8004b98:	20000006 	.word	0x20000006
 8004b9c:	20000460 	.word	0x20000460
 8004ba0:	0800f8a0 	.word	0x0800f8a0
 8004ba4:	20000458 	.word	0x20000458
 8004ba8:	0800f8ac 	.word	0x0800f8ac
 8004bac:	20000440 	.word	0x20000440
 8004bb0:	0800f8b4 	.word	0x0800f8b4
 8004bb4:	2000043d 	.word	0x2000043d
 8004bb8:	0800f8bc 	.word	0x0800f8bc
			}

		case 32: // Set Pulling Accelerating Distance; Pulling Mode
			if (StartRunning) // Setting is not available while running
 8004bbc:	4ba4      	ldr	r3, [pc, #656]	; (8004e50 <ProcessReceivedCommand+0xcc8>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	f040 8259 	bne.w	8005078 <ProcessReceivedCommand+0xef0>
			{
				break;
			}
			else
			{
				PullingAccelDistance = MotionCode[1];
 8004bc6:	4ba3      	ldr	r3, [pc, #652]	; (8004e54 <ProcessReceivedCommand+0xccc>)
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	4aa3      	ldr	r2, [pc, #652]	; (8004e58 <ProcessReceivedCommand+0xcd0>)
 8004bcc:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 8004bce:	f7fe ffa7 	bl	8003b20 <CalculateRunningSpec>

				//char PullingDistanceBuffer[10];
				TxPCLen = sprintf(ResponseMess,"r32/%.1fe",PullingAccelDistance);
 8004bd2:	4ba1      	ldr	r3, [pc, #644]	; (8004e58 <ProcessReceivedCommand+0xcd0>)
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	4618      	mov	r0, r3
 8004bd8:	f7fb fcb6 	bl	8000548 <__aeabi_f2d>
 8004bdc:	4602      	mov	r2, r0
 8004bde:	460b      	mov	r3, r1
 8004be0:	499e      	ldr	r1, [pc, #632]	; (8004e5c <ProcessReceivedCommand+0xcd4>)
 8004be2:	489f      	ldr	r0, [pc, #636]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004be4:	f006 f846 	bl	800ac74 <siprintf>
 8004be8:	4603      	mov	r3, r0
 8004bea:	b2da      	uxtb	r2, r3
 8004bec:	4b9d      	ldr	r3, [pc, #628]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004bee:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004bf0:	4b9c      	ldr	r3, [pc, #624]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004bf2:	781b      	ldrb	r3, [r3, #0]
 8004bf4:	b29a      	uxth	r2, r3
 8004bf6:	2364      	movs	r3, #100	; 0x64
 8004bf8:	4999      	ldr	r1, [pc, #612]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004bfa:	489b      	ldr	r0, [pc, #620]	; (8004e68 <ProcessReceivedCommand+0xce0>)
 8004bfc:	f004 f95d 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004c00:	220f      	movs	r2, #15
 8004c02:	2100      	movs	r1, #0
 8004c04:	4896      	ldr	r0, [pc, #600]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004c06:	f005 f9ad 	bl	8009f64 <memset>
				break;
 8004c0a:	e244      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}

		case 33: // Set Pulling AccRef in Pulling Mode
			if (StartRunning)// Setting is not available while running
 8004c0c:	4b90      	ldr	r3, [pc, #576]	; (8004e50 <ProcessReceivedCommand+0xcc8>)
 8004c0e:	781b      	ldrb	r3, [r3, #0]
 8004c10:	2b00      	cmp	r3, #0
 8004c12:	f040 8233 	bne.w	800507c <ProcessReceivedCommand+0xef4>
			{
				break;
			}
			else
			{
				PullingAccel = MotionCode[1];
 8004c16:	4b8f      	ldr	r3, [pc, #572]	; (8004e54 <ProcessReceivedCommand+0xccc>)
 8004c18:	685b      	ldr	r3, [r3, #4]
 8004c1a:	4a94      	ldr	r2, [pc, #592]	; (8004e6c <ProcessReceivedCommand+0xce4>)
 8004c1c:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 8004c1e:	f7fe ff7f 	bl	8003b20 <CalculateRunningSpec>

				//char AccRefPullingBuffer[10];
				TxPCLen = sprintf(ResponseMess,"r33/%.2fe",PullingAccel);
 8004c22:	4b92      	ldr	r3, [pc, #584]	; (8004e6c <ProcessReceivedCommand+0xce4>)
 8004c24:	681b      	ldr	r3, [r3, #0]
 8004c26:	4618      	mov	r0, r3
 8004c28:	f7fb fc8e 	bl	8000548 <__aeabi_f2d>
 8004c2c:	4602      	mov	r2, r0
 8004c2e:	460b      	mov	r3, r1
 8004c30:	498f      	ldr	r1, [pc, #572]	; (8004e70 <ProcessReceivedCommand+0xce8>)
 8004c32:	488b      	ldr	r0, [pc, #556]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004c34:	f006 f81e 	bl	800ac74 <siprintf>
 8004c38:	4603      	mov	r3, r0
 8004c3a:	b2da      	uxtb	r2, r3
 8004c3c:	4b89      	ldr	r3, [pc, #548]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004c3e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004c40:	4b88      	ldr	r3, [pc, #544]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	b29a      	uxth	r2, r3
 8004c46:	2364      	movs	r3, #100	; 0x64
 8004c48:	4985      	ldr	r1, [pc, #532]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004c4a:	4887      	ldr	r0, [pc, #540]	; (8004e68 <ProcessReceivedCommand+0xce0>)
 8004c4c:	f004 f935 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004c50:	220f      	movs	r2, #15
 8004c52:	2100      	movs	r1, #0
 8004c54:	4882      	ldr	r0, [pc, #520]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004c56:	f005 f985 	bl	8009f64 <memset>
				break;
 8004c5a:	e21c      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}

		case 34: // Set DroppingDecel, m/s2
			if (StartRunning)// Setting is not available while running
 8004c5c:	4b7c      	ldr	r3, [pc, #496]	; (8004e50 <ProcessReceivedCommand+0xcc8>)
 8004c5e:	781b      	ldrb	r3, [r3, #0]
 8004c60:	2b00      	cmp	r3, #0
 8004c62:	f040 820d 	bne.w	8005080 <ProcessReceivedCommand+0xef8>
			{
				break;
			}
			else
			{
				DroppingDecel = MotionCode[1];
 8004c66:	4b7b      	ldr	r3, [pc, #492]	; (8004e54 <ProcessReceivedCommand+0xccc>)
 8004c68:	685b      	ldr	r3, [r3, #4]
 8004c6a:	4a82      	ldr	r2, [pc, #520]	; (8004e74 <ProcessReceivedCommand+0xcec>)
 8004c6c:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 8004c6e:	f7fe ff57 	bl	8003b20 <CalculateRunningSpec>

				//char DroppingDecelBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r34/%.2fe",DroppingDecel);
 8004c72:	4b80      	ldr	r3, [pc, #512]	; (8004e74 <ProcessReceivedCommand+0xcec>)
 8004c74:	681b      	ldr	r3, [r3, #0]
 8004c76:	4618      	mov	r0, r3
 8004c78:	f7fb fc66 	bl	8000548 <__aeabi_f2d>
 8004c7c:	4602      	mov	r2, r0
 8004c7e:	460b      	mov	r3, r1
 8004c80:	497d      	ldr	r1, [pc, #500]	; (8004e78 <ProcessReceivedCommand+0xcf0>)
 8004c82:	4877      	ldr	r0, [pc, #476]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004c84:	f005 fff6 	bl	800ac74 <siprintf>
 8004c88:	4603      	mov	r3, r0
 8004c8a:	b2da      	uxtb	r2, r3
 8004c8c:	4b75      	ldr	r3, [pc, #468]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004c8e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004c90:	4b74      	ldr	r3, [pc, #464]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004c92:	781b      	ldrb	r3, [r3, #0]
 8004c94:	b29a      	uxth	r2, r3
 8004c96:	2364      	movs	r3, #100	; 0x64
 8004c98:	4971      	ldr	r1, [pc, #452]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004c9a:	4873      	ldr	r0, [pc, #460]	; (8004e68 <ProcessReceivedCommand+0xce0>)
 8004c9c:	f004 f90d 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004ca0:	220f      	movs	r2, #15
 8004ca2:	2100      	movs	r1, #0
 8004ca4:	486e      	ldr	r0, [pc, #440]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004ca6:	f005 f95d 	bl	8009f64 <memset>
			}
			break;
 8004caa:	e1f4      	b.n	8005096 <ProcessReceivedCommand+0xf0e>

		case 35: // Set Pulling Deceleration in m/s2
			if (StartRunning)// Setting is not available while running
 8004cac:	4b68      	ldr	r3, [pc, #416]	; (8004e50 <ProcessReceivedCommand+0xcc8>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f040 81e7 	bne.w	8005084 <ProcessReceivedCommand+0xefc>
			{
				break;
			}
			else
			{
				PullingDecel = MotionCode[1];
 8004cb6:	4b67      	ldr	r3, [pc, #412]	; (8004e54 <ProcessReceivedCommand+0xccc>)
 8004cb8:	685b      	ldr	r3, [r3, #4]
 8004cba:	4a70      	ldr	r2, [pc, #448]	; (8004e7c <ProcessReceivedCommand+0xcf4>)
 8004cbc:	6013      	str	r3, [r2, #0]

				CalculateRunningSpec();
 8004cbe:	f7fe ff2f 	bl	8003b20 <CalculateRunningSpec>

				//char PullingDecelBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r35/%.2fe",PullingDecel);
 8004cc2:	4b6e      	ldr	r3, [pc, #440]	; (8004e7c <ProcessReceivedCommand+0xcf4>)
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	4618      	mov	r0, r3
 8004cc8:	f7fb fc3e 	bl	8000548 <__aeabi_f2d>
 8004ccc:	4602      	mov	r2, r0
 8004cce:	460b      	mov	r3, r1
 8004cd0:	496b      	ldr	r1, [pc, #428]	; (8004e80 <ProcessReceivedCommand+0xcf8>)
 8004cd2:	4863      	ldr	r0, [pc, #396]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004cd4:	f005 ffce 	bl	800ac74 <siprintf>
 8004cd8:	4603      	mov	r3, r0
 8004cda:	b2da      	uxtb	r2, r3
 8004cdc:	4b61      	ldr	r3, [pc, #388]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004cde:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004ce0:	4b60      	ldr	r3, [pc, #384]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004ce2:	781b      	ldrb	r3, [r3, #0]
 8004ce4:	b29a      	uxth	r2, r3
 8004ce6:	2364      	movs	r3, #100	; 0x64
 8004ce8:	495d      	ldr	r1, [pc, #372]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004cea:	485f      	ldr	r0, [pc, #380]	; (8004e68 <ProcessReceivedCommand+0xce0>)
 8004cec:	f004 f8e5 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004cf0:	220f      	movs	r2, #15
 8004cf2:	2100      	movs	r1, #0
 8004cf4:	485a      	ldr	r0, [pc, #360]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004cf6:	f005 f935 	bl	8009f64 <memset>
			}
			break;
 8004cfa:	e1cc      	b.n	8005096 <ProcessReceivedCommand+0xf0e>

		case 36: // Resource
			break;

		case 37: // Set Stopping Time
			if (StartRunning)// Setting is not available while running
 8004cfc:	4b54      	ldr	r3, [pc, #336]	; (8004e50 <ProcessReceivedCommand+0xcc8>)
 8004cfe:	781b      	ldrb	r3, [r3, #0]
 8004d00:	2b00      	cmp	r3, #0
 8004d02:	f040 81c1 	bne.w	8005088 <ProcessReceivedCommand+0xf00>
			{
				break;
			}
			else
			{
				StoppingTime = MotionCode[1];
 8004d06:	4b53      	ldr	r3, [pc, #332]	; (8004e54 <ProcessReceivedCommand+0xccc>)
 8004d08:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d0c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004d10:	ee17 3a90 	vmov	r3, s15
 8004d14:	b29a      	uxth	r2, r3
 8004d16:	4b5b      	ldr	r3, [pc, #364]	; (8004e84 <ProcessReceivedCommand+0xcfc>)
 8004d18:	801a      	strh	r2, [r3, #0]
//				{
//					StoppingTime = 10000; // max = 10000 ms
//				}
				//char StoppingTimeBuffer[10];

				TxPCLen = sprintf(ResponseMess,"r37/%de",StoppingTime);
 8004d1a:	4b5a      	ldr	r3, [pc, #360]	; (8004e84 <ProcessReceivedCommand+0xcfc>)
 8004d1c:	881b      	ldrh	r3, [r3, #0]
 8004d1e:	461a      	mov	r2, r3
 8004d20:	4959      	ldr	r1, [pc, #356]	; (8004e88 <ProcessReceivedCommand+0xd00>)
 8004d22:	484f      	ldr	r0, [pc, #316]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004d24:	f005 ffa6 	bl	800ac74 <siprintf>
 8004d28:	4603      	mov	r3, r0
 8004d2a:	b2da      	uxtb	r2, r3
 8004d2c:	4b4d      	ldr	r3, [pc, #308]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004d2e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004d30:	4b4c      	ldr	r3, [pc, #304]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004d32:	781b      	ldrb	r3, [r3, #0]
 8004d34:	b29a      	uxth	r2, r3
 8004d36:	23c8      	movs	r3, #200	; 0xc8
 8004d38:	4949      	ldr	r1, [pc, #292]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004d3a:	484b      	ldr	r0, [pc, #300]	; (8004e68 <ProcessReceivedCommand+0xce0>)
 8004d3c:	f004 f8bd 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004d40:	220f      	movs	r2, #15
 8004d42:	2100      	movs	r1, #0
 8004d44:	4846      	ldr	r0, [pc, #280]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004d46:	f005 f90d 	bl	8009f64 <memset>
				break;
 8004d4a:	e1a4      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}
		case 38: // Homing task
			if (StartRunning)// Setting is not available while running
 8004d4c:	4b40      	ldr	r3, [pc, #256]	; (8004e50 <ProcessReceivedCommand+0xcc8>)
 8004d4e:	781b      	ldrb	r3, [r3, #0]
 8004d50:	2b00      	cmp	r3, #0
 8004d52:	f040 819b 	bne.w	800508c <ProcessReceivedCommand+0xf04>
			{
				break;
			}
			else
			{
				IsHoming = true;
 8004d56:	4b4d      	ldr	r3, [pc, #308]	; (8004e8c <ProcessReceivedCommand+0xd04>)
 8004d58:	2201      	movs	r2, #1
 8004d5a:	701a      	strb	r2, [r3, #0]
				//Timer3CountPeriod = CalculateTimer3Period(MotorDriver,PullingSpeed);
				//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
				Direction = false; // false = move up, true = move down
 8004d5c:	4b4c      	ldr	r3, [pc, #304]	; (8004e90 <ProcessReceivedCommand+0xd08>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
				PRIsToggled = true; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8004d62:	4b4c      	ldr	r3, [pc, #304]	; (8004e94 <ProcessReceivedCommand+0xd0c>)
 8004d64:	2201      	movs	r2, #1
 8004d66:	701a      	strb	r2, [r3, #0]
				JoggingMoveUp = true;
 8004d68:	4b4b      	ldr	r3, [pc, #300]	; (8004e98 <ProcessReceivedCommand+0xd10>)
 8004d6a:	2201      	movs	r2, #1
 8004d6c:	701a      	strb	r2, [r3, #0]
				DisableSTOP(); // Disable the stop
 8004d6e:	f7fc fa7b 	bl	8001268 <DisableSTOP>
				StartPulseGenerating();
 8004d72:	f7fc fe0d 	bl	8001990 <StartPulseGenerating>
			}
			break;
 8004d76:	e18e      	b.n	8005096 <ProcessReceivedCommand+0xf0e>

		case 39: // Set Driver type, FDA7000 or ASDA A3
			if (StartRunning)// Setting is not available while running
 8004d78:	4b35      	ldr	r3, [pc, #212]	; (8004e50 <ProcessReceivedCommand+0xcc8>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	2b00      	cmp	r3, #0
 8004d7e:	f040 8187 	bne.w	8005090 <ProcessReceivedCommand+0xf08>
			{
				break;
			}
			else
			{
				if (MotionCode[1] == 1) // FDA7000
 8004d82:	4b34      	ldr	r3, [pc, #208]	; (8004e54 <ProcessReceivedCommand+0xccc>)
 8004d84:	edd3 7a01 	vldr	s15, [r3, #4]
 8004d88:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004d8c:	eef4 7a47 	vcmp.f32	s15, s14
 8004d90:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004d94:	d10c      	bne.n	8004db0 <ProcessReceivedCommand+0xc28>
				{
					MotorDriver = true;
 8004d96:	4b41      	ldr	r3, [pc, #260]	; (8004e9c <ProcessReceivedCommand+0xd14>)
 8004d98:	2201      	movs	r2, #1
 8004d9a:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 29; // For FDA7000, read 5 register => receive 25 bytes
 8004d9c:	4b40      	ldr	r3, [pc, #256]	; (8004ea0 <ProcessReceivedCommand+0xd18>)
 8004d9e:	221d      	movs	r2, #29
 8004da0:	701a      	strb	r2, [r3, #0]
					EncoderResolution = HigenEncoderResolution;
 8004da2:	4b40      	ldr	r3, [pc, #256]	; (8004ea4 <ProcessReceivedCommand+0xd1c>)
 8004da4:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004da8:	801a      	strh	r2, [r3, #0]
					InitParams ();
 8004daa:	f7ff f977 	bl	800409c <InitParams>
 8004dae:	e00b      	b.n	8004dc8 <ProcessReceivedCommand+0xc40>
				}
				else // ASDA A3
				{
					MotorDriver = false;
 8004db0:	4b3a      	ldr	r3, [pc, #232]	; (8004e9c <ProcessReceivedCommand+0xd14>)
 8004db2:	2200      	movs	r2, #0
 8004db4:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 17;
 8004db6:	4b3a      	ldr	r3, [pc, #232]	; (8004ea0 <ProcessReceivedCommand+0xd18>)
 8004db8:	2211      	movs	r2, #17
 8004dba:	701a      	strb	r2, [r3, #0]
					EncoderResolution = AsdaEncoderResolution;
 8004dbc:	4b39      	ldr	r3, [pc, #228]	; (8004ea4 <ProcessReceivedCommand+0xd1c>)
 8004dbe:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004dc2:	801a      	strh	r2, [r3, #0]
					InitParams ();
 8004dc4:	f7ff f96a 	bl	800409c <InitParams>
					// For ASDA Drier, read 1 register => receive 9 bytes
					// read 2 registers => receive 13 bytes
				}
				//char DriverTypeBuffer[10];
				TxPCLen = sprintf(ResponseMess,"g39/%de",MotorDriver);
 8004dc8:	4b34      	ldr	r3, [pc, #208]	; (8004e9c <ProcessReceivedCommand+0xd14>)
 8004dca:	781b      	ldrb	r3, [r3, #0]
 8004dcc:	461a      	mov	r2, r3
 8004dce:	4936      	ldr	r1, [pc, #216]	; (8004ea8 <ProcessReceivedCommand+0xd20>)
 8004dd0:	4823      	ldr	r0, [pc, #140]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004dd2:	f005 ff4f 	bl	800ac74 <siprintf>
 8004dd6:	4603      	mov	r3, r0
 8004dd8:	b2da      	uxtb	r2, r3
 8004dda:	4b22      	ldr	r3, [pc, #136]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004ddc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004dde:	4b21      	ldr	r3, [pc, #132]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004de0:	781b      	ldrb	r3, [r3, #0]
 8004de2:	b29a      	uxth	r2, r3
 8004de4:	23c8      	movs	r3, #200	; 0xc8
 8004de6:	491e      	ldr	r1, [pc, #120]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004de8:	481f      	ldr	r0, [pc, #124]	; (8004e68 <ProcessReceivedCommand+0xce0>)
 8004dea:	f004 f866 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004dee:	220f      	movs	r2, #15
 8004df0:	2100      	movs	r1, #0
 8004df2:	481b      	ldr	r0, [pc, #108]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004df4:	f005 f8b6 	bl	8009f64 <memset>
			}
			break;
 8004df8:	e14d      	b.n	8005096 <ProcessReceivedCommand+0xf0e>

		case 41: // Set Fly Acc slope
			if (StartRunning)// Setting is not available while running
 8004dfa:	4b15      	ldr	r3, [pc, #84]	; (8004e50 <ProcessReceivedCommand+0xcc8>)
 8004dfc:	781b      	ldrb	r3, [r3, #0]
 8004dfe:	2b00      	cmp	r3, #0
 8004e00:	d005      	beq.n	8004e0e <ProcessReceivedCommand+0xc86>
			{
				InitializeRunning(ExperimentMode);
 8004e02:	4b2a      	ldr	r3, [pc, #168]	; (8004eac <ProcessReceivedCommand+0xd24>)
 8004e04:	781b      	ldrb	r3, [r3, #0]
 8004e06:	4618      	mov	r0, r3
 8004e08:	f7fd f91c 	bl	8002044 <InitializeRunning>
				TxPCLen = sprintf(ResponseMess,"r41/%.3fe",FlyAccSlope);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}

			break;
 8004e0c:	e143      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				FlyAccSlope = MotionCode[1];
 8004e0e:	4b11      	ldr	r3, [pc, #68]	; (8004e54 <ProcessReceivedCommand+0xccc>)
 8004e10:	685b      	ldr	r3, [r3, #4]
 8004e12:	4a27      	ldr	r2, [pc, #156]	; (8004eb0 <ProcessReceivedCommand+0xd28>)
 8004e14:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(ResponseMess,"r41/%.3fe",FlyAccSlope);
 8004e16:	4b26      	ldr	r3, [pc, #152]	; (8004eb0 <ProcessReceivedCommand+0xd28>)
 8004e18:	681b      	ldr	r3, [r3, #0]
 8004e1a:	4618      	mov	r0, r3
 8004e1c:	f7fb fb94 	bl	8000548 <__aeabi_f2d>
 8004e20:	4602      	mov	r2, r0
 8004e22:	460b      	mov	r3, r1
 8004e24:	4923      	ldr	r1, [pc, #140]	; (8004eb4 <ProcessReceivedCommand+0xd2c>)
 8004e26:	480e      	ldr	r0, [pc, #56]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004e28:	f005 ff24 	bl	800ac74 <siprintf>
 8004e2c:	4603      	mov	r3, r0
 8004e2e:	b2da      	uxtb	r2, r3
 8004e30:	4b0c      	ldr	r3, [pc, #48]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004e32:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004e34:	4b0b      	ldr	r3, [pc, #44]	; (8004e64 <ProcessReceivedCommand+0xcdc>)
 8004e36:	781b      	ldrb	r3, [r3, #0]
 8004e38:	b29a      	uxth	r2, r3
 8004e3a:	2364      	movs	r3, #100	; 0x64
 8004e3c:	4908      	ldr	r1, [pc, #32]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004e3e:	480a      	ldr	r0, [pc, #40]	; (8004e68 <ProcessReceivedCommand+0xce0>)
 8004e40:	f004 f83b 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004e44:	220f      	movs	r2, #15
 8004e46:	2100      	movs	r1, #0
 8004e48:	4805      	ldr	r0, [pc, #20]	; (8004e60 <ProcessReceivedCommand+0xcd8>)
 8004e4a:	f005 f88b 	bl	8009f64 <memset>
			break;
 8004e4e:	e122      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
 8004e50:	20000430 	.word	0x20000430
 8004e54:	20000504 	.word	0x20000504
 8004e58:	200004a0 	.word	0x200004a0
 8004e5c:	0800f8c4 	.word	0x0800f8c4
 8004e60:	20000418 	.word	0x20000418
 8004e64:	20000412 	.word	0x20000412
 8004e68:	2000033c 	.word	0x2000033c
 8004e6c:	20000484 	.word	0x20000484
 8004e70:	0800f8d0 	.word	0x0800f8d0
 8004e74:	20000464 	.word	0x20000464
 8004e78:	0800f8dc 	.word	0x0800f8dc
 8004e7c:	20000488 	.word	0x20000488
 8004e80:	0800f8e8 	.word	0x0800f8e8
 8004e84:	2000045a 	.word	0x2000045a
 8004e88:	0800f8f4 	.word	0x0800f8f4
 8004e8c:	2000043e 	.word	0x2000043e
 8004e90:	20000432 	.word	0x20000432
 8004e94:	20000441 	.word	0x20000441
 8004e98:	2000043d 	.word	0x2000043d
 8004e9c:	20000003 	.word	0x20000003
 8004ea0:	20000000 	.word	0x20000000
 8004ea4:	2000000a 	.word	0x2000000a
 8004ea8:	0800f8fc 	.word	0x0800f8fc
 8004eac:	20000006 	.word	0x20000006
 8004eb0:	2000052c 	.word	0x2000052c
 8004eb4:	0800f904 	.word	0x0800f904

		case 42: // Set Distance Coefficient
			if (StartRunning)// Setting is not available while running
 8004eb8:	4b79      	ldr	r3, [pc, #484]	; (80050a0 <ProcessReceivedCommand+0xf18>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2b00      	cmp	r3, #0
 8004ebe:	d005      	beq.n	8004ecc <ProcessReceivedCommand+0xd44>
			{
				InitializeRunning(ExperimentMode);
 8004ec0:	4b78      	ldr	r3, [pc, #480]	; (80050a4 <ProcessReceivedCommand+0xf1c>)
 8004ec2:	781b      	ldrb	r3, [r3, #0]
 8004ec4:	4618      	mov	r0, r3
 8004ec6:	f7fd f8bd 	bl	8002044 <InitializeRunning>
				//char DistCoeffBuffer[10];
				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 8004eca:	e0e4      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				DistCoeff = MotionCode[1];
 8004ecc:	4b76      	ldr	r3, [pc, #472]	; (80050a8 <ProcessReceivedCommand+0xf20>)
 8004ece:	685b      	ldr	r3, [r3, #4]
 8004ed0:	4a76      	ldr	r2, [pc, #472]	; (80050ac <ProcessReceivedCommand+0xf24>)
 8004ed2:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 8004ed4:	f7fe fe24 	bl	8003b20 <CalculateRunningSpec>
				TxPCLen = sprintf(ResponseMess,"r42/%.2fe",DistCoeff);
 8004ed8:	4b74      	ldr	r3, [pc, #464]	; (80050ac <ProcessReceivedCommand+0xf24>)
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	4618      	mov	r0, r3
 8004ede:	f7fb fb33 	bl	8000548 <__aeabi_f2d>
 8004ee2:	4602      	mov	r2, r0
 8004ee4:	460b      	mov	r3, r1
 8004ee6:	4972      	ldr	r1, [pc, #456]	; (80050b0 <ProcessReceivedCommand+0xf28>)
 8004ee8:	4872      	ldr	r0, [pc, #456]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8004eea:	f005 fec3 	bl	800ac74 <siprintf>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	b2da      	uxtb	r2, r3
 8004ef2:	4b71      	ldr	r3, [pc, #452]	; (80050b8 <ProcessReceivedCommand+0xf30>)
 8004ef4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004ef6:	4b70      	ldr	r3, [pc, #448]	; (80050b8 <ProcessReceivedCommand+0xf30>)
 8004ef8:	781b      	ldrb	r3, [r3, #0]
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	2364      	movs	r3, #100	; 0x64
 8004efe:	496d      	ldr	r1, [pc, #436]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8004f00:	486e      	ldr	r0, [pc, #440]	; (80050bc <ProcessReceivedCommand+0xf34>)
 8004f02:	f003 ffda 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004f06:	220f      	movs	r2, #15
 8004f08:	2100      	movs	r1, #0
 8004f0a:	486a      	ldr	r0, [pc, #424]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8004f0c:	f005 f82a 	bl	8009f64 <memset>
			break;
 8004f10:	e0c1      	b.n	8005096 <ProcessReceivedCommand+0xf0e>

		case 43: //
			if (StartRunning)// Setting is not available while running
 8004f12:	4b63      	ldr	r3, [pc, #396]	; (80050a0 <ProcessReceivedCommand+0xf18>)
 8004f14:	781b      	ldrb	r3, [r3, #0]
 8004f16:	2b00      	cmp	r3, #0
 8004f18:	d005      	beq.n	8004f26 <ProcessReceivedCommand+0xd9e>
			{
				InitializeRunning(ExperimentMode);
 8004f1a:	4b62      	ldr	r3, [pc, #392]	; (80050a4 <ProcessReceivedCommand+0xf1c>)
 8004f1c:	781b      	ldrb	r3, [r3, #0]
 8004f1e:	4618      	mov	r0, r3
 8004f20:	f7fd f890 	bl	8002044 <InitializeRunning>

				TxPCLen = sprintf(ResponseMess,"r43/%.4fe",BrakeAccSlope);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 8004f24:	e0b7      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				BrakeAccSlope = MotionCode[1];
 8004f26:	4b60      	ldr	r3, [pc, #384]	; (80050a8 <ProcessReceivedCommand+0xf20>)
 8004f28:	685b      	ldr	r3, [r3, #4]
 8004f2a:	4a65      	ldr	r2, [pc, #404]	; (80050c0 <ProcessReceivedCommand+0xf38>)
 8004f2c:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(ResponseMess,"r43/%.4fe",BrakeAccSlope);
 8004f2e:	4b64      	ldr	r3, [pc, #400]	; (80050c0 <ProcessReceivedCommand+0xf38>)
 8004f30:	681b      	ldr	r3, [r3, #0]
 8004f32:	4618      	mov	r0, r3
 8004f34:	f7fb fb08 	bl	8000548 <__aeabi_f2d>
 8004f38:	4602      	mov	r2, r0
 8004f3a:	460b      	mov	r3, r1
 8004f3c:	4961      	ldr	r1, [pc, #388]	; (80050c4 <ProcessReceivedCommand+0xf3c>)
 8004f3e:	485d      	ldr	r0, [pc, #372]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8004f40:	f005 fe98 	bl	800ac74 <siprintf>
 8004f44:	4603      	mov	r3, r0
 8004f46:	b2da      	uxtb	r2, r3
 8004f48:	4b5b      	ldr	r3, [pc, #364]	; (80050b8 <ProcessReceivedCommand+0xf30>)
 8004f4a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004f4c:	4b5a      	ldr	r3, [pc, #360]	; (80050b8 <ProcessReceivedCommand+0xf30>)
 8004f4e:	781b      	ldrb	r3, [r3, #0]
 8004f50:	b29a      	uxth	r2, r3
 8004f52:	2364      	movs	r3, #100	; 0x64
 8004f54:	4957      	ldr	r1, [pc, #348]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8004f56:	4859      	ldr	r0, [pc, #356]	; (80050bc <ProcessReceivedCommand+0xf34>)
 8004f58:	f003 ffaf 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004f5c:	220f      	movs	r2, #15
 8004f5e:	2100      	movs	r1, #0
 8004f60:	4854      	ldr	r0, [pc, #336]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8004f62:	f004 ffff 	bl	8009f64 <memset>
			break;
 8004f66:	e096      	b.n	8005096 <ProcessReceivedCommand+0xf0e>

		case 46: // Set origin (home) position
			OriginPulse = MotorEncPulse;
 8004f68:	4b57      	ldr	r3, [pc, #348]	; (80050c8 <ProcessReceivedCommand+0xf40>)
 8004f6a:	681b      	ldr	r3, [r3, #0]
 8004f6c:	4a57      	ldr	r2, [pc, #348]	; (80050cc <ProcessReceivedCommand+0xf44>)
 8004f6e:	6013      	str	r3, [r2, #0]
			PositionPulseCmd = 0;
 8004f70:	4b57      	ldr	r3, [pc, #348]	; (80050d0 <ProcessReceivedCommand+0xf48>)
 8004f72:	2200      	movs	r2, #0
 8004f74:	601a      	str	r2, [r3, #0]
			break;
 8004f76:	e08e      	b.n	8005096 <ProcessReceivedCommand+0xf0e>

		case 47: // Set open/Closed loop control Mode
			if (StartRunning)// Setting is not available while running
 8004f78:	4b49      	ldr	r3, [pc, #292]	; (80050a0 <ProcessReceivedCommand+0xf18>)
 8004f7a:	781b      	ldrb	r3, [r3, #0]
 8004f7c:	2b00      	cmp	r3, #0
 8004f7e:	d005      	beq.n	8004f8c <ProcessReceivedCommand+0xe04>
			{
				InitializeRunning(ExperimentMode);
 8004f80:	4b48      	ldr	r3, [pc, #288]	; (80050a4 <ProcessReceivedCommand+0xf1c>)
 8004f82:	781b      	ldrb	r3, [r3, #0]
 8004f84:	4618      	mov	r0, r3
 8004f86:	f7fd f85d 	bl	8002044 <InitializeRunning>
				//char ControlLoopBuffer[10];
				TxPCLen = sprintf(ResponseMess,"g47/%de",IsOpenLoopControl);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 8004f8a:	e084      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				if(MotionCode[1] == 0) // Set to Closed loop control
 8004f8c:	4b46      	ldr	r3, [pc, #280]	; (80050a8 <ProcessReceivedCommand+0xf20>)
 8004f8e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004f92:	eef5 7a40 	vcmp.f32	s15, #0.0
 8004f96:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004f9a:	d103      	bne.n	8004fa4 <ProcessReceivedCommand+0xe1c>
					IsOpenLoopControl = false;
 8004f9c:	4b4d      	ldr	r3, [pc, #308]	; (80050d4 <ProcessReceivedCommand+0xf4c>)
 8004f9e:	2200      	movs	r2, #0
 8004fa0:	701a      	strb	r2, [r3, #0]
 8004fa2:	e002      	b.n	8004faa <ProcessReceivedCommand+0xe22>
					IsOpenLoopControl = true;
 8004fa4:	4b4b      	ldr	r3, [pc, #300]	; (80050d4 <ProcessReceivedCommand+0xf4c>)
 8004fa6:	2201      	movs	r2, #1
 8004fa8:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"g47/%de",IsOpenLoopControl);
 8004faa:	4b4a      	ldr	r3, [pc, #296]	; (80050d4 <ProcessReceivedCommand+0xf4c>)
 8004fac:	781b      	ldrb	r3, [r3, #0]
 8004fae:	461a      	mov	r2, r3
 8004fb0:	4949      	ldr	r1, [pc, #292]	; (80050d8 <ProcessReceivedCommand+0xf50>)
 8004fb2:	4840      	ldr	r0, [pc, #256]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8004fb4:	f005 fe5e 	bl	800ac74 <siprintf>
 8004fb8:	4603      	mov	r3, r0
 8004fba:	b2da      	uxtb	r2, r3
 8004fbc:	4b3e      	ldr	r3, [pc, #248]	; (80050b8 <ProcessReceivedCommand+0xf30>)
 8004fbe:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004fc0:	4b3d      	ldr	r3, [pc, #244]	; (80050b8 <ProcessReceivedCommand+0xf30>)
 8004fc2:	781b      	ldrb	r3, [r3, #0]
 8004fc4:	b29a      	uxth	r2, r3
 8004fc6:	2364      	movs	r3, #100	; 0x64
 8004fc8:	493a      	ldr	r1, [pc, #232]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8004fca:	483c      	ldr	r0, [pc, #240]	; (80050bc <ProcessReceivedCommand+0xf34>)
 8004fcc:	f003 ff75 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8004fd0:	220f      	movs	r2, #15
 8004fd2:	2100      	movs	r1, #0
 8004fd4:	4837      	ldr	r0, [pc, #220]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8004fd6:	f004 ffc5 	bl	8009f64 <memset>
			break;
 8004fda:	e05c      	b.n	8005096 <ProcessReceivedCommand+0xf0e>

		case 48: // turn on/off the software upper limit
			if (StartRunning)// Setting is not available while running
 8004fdc:	4b30      	ldr	r3, [pc, #192]	; (80050a0 <ProcessReceivedCommand+0xf18>)
 8004fde:	781b      	ldrb	r3, [r3, #0]
 8004fe0:	2b00      	cmp	r3, #0
 8004fe2:	d005      	beq.n	8004ff0 <ProcessReceivedCommand+0xe68>
			{
				InitializeRunning(ExperimentMode);
 8004fe4:	4b2f      	ldr	r3, [pc, #188]	; (80050a4 <ProcessReceivedCommand+0xf1c>)
 8004fe6:	781b      	ldrb	r3, [r3, #0]
 8004fe8:	4618      	mov	r0, r3
 8004fea:	f7fd f82b 	bl	8002044 <InitializeRunning>
				//char SoftWareLimitBuffer[10];
				TxPCLen = sprintf(ResponseMess,"g48/%de",SoftWareLimit);
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
				memset(ResponseMess, '\0', sizeof(ResponseMess));
			}
			break;
 8004fee:	e052      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				if(MotionCode[1] == 1) // turn on software limit
 8004ff0:	4b2d      	ldr	r3, [pc, #180]	; (80050a8 <ProcessReceivedCommand+0xf20>)
 8004ff2:	edd3 7a01 	vldr	s15, [r3, #4]
 8004ff6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004ffa:	eef4 7a47 	vcmp.f32	s15, s14
 8004ffe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005002:	d103      	bne.n	800500c <ProcessReceivedCommand+0xe84>
					SoftWareLimit = true;
 8005004:	4b35      	ldr	r3, [pc, #212]	; (80050dc <ProcessReceivedCommand+0xf54>)
 8005006:	2201      	movs	r2, #1
 8005008:	701a      	strb	r2, [r3, #0]
 800500a:	e002      	b.n	8005012 <ProcessReceivedCommand+0xe8a>
					SoftWareLimit = false;
 800500c:	4b33      	ldr	r3, [pc, #204]	; (80050dc <ProcessReceivedCommand+0xf54>)
 800500e:	2200      	movs	r2, #0
 8005010:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ResponseMess,"g48/%de",SoftWareLimit);
 8005012:	4b32      	ldr	r3, [pc, #200]	; (80050dc <ProcessReceivedCommand+0xf54>)
 8005014:	781b      	ldrb	r3, [r3, #0]
 8005016:	461a      	mov	r2, r3
 8005018:	4931      	ldr	r1, [pc, #196]	; (80050e0 <ProcessReceivedCommand+0xf58>)
 800501a:	4826      	ldr	r0, [pc, #152]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 800501c:	f005 fe2a 	bl	800ac74 <siprintf>
 8005020:	4603      	mov	r3, r0
 8005022:	b2da      	uxtb	r2, r3
 8005024:	4b24      	ldr	r3, [pc, #144]	; (80050b8 <ProcessReceivedCommand+0xf30>)
 8005026:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,100); // Send to uart6 to check the params are set or not
 8005028:	4b23      	ldr	r3, [pc, #140]	; (80050b8 <ProcessReceivedCommand+0xf30>)
 800502a:	781b      	ldrb	r3, [r3, #0]
 800502c:	b29a      	uxth	r2, r3
 800502e:	2364      	movs	r3, #100	; 0x64
 8005030:	4920      	ldr	r1, [pc, #128]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 8005032:	4822      	ldr	r0, [pc, #136]	; (80050bc <ProcessReceivedCommand+0xf34>)
 8005034:	f003 ff41 	bl	8008eba <HAL_UART_Transmit>
				memset(ResponseMess, '\0', sizeof(ResponseMess));
 8005038:	220f      	movs	r2, #15
 800503a:	2100      	movs	r1, #0
 800503c:	481d      	ldr	r0, [pc, #116]	; (80050b4 <ProcessReceivedCommand+0xf2c>)
 800503e:	f004 ff91 	bl	8009f64 <memset>
			break;
 8005042:	e028      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
		default:
			if (StartRunning)// Keep running
 8005044:	4b16      	ldr	r3, [pc, #88]	; (80050a0 <ProcessReceivedCommand+0xf18>)
 8005046:	781b      	ldrb	r3, [r3, #0]
 8005048:	2b00      	cmp	r3, #0
 800504a:	d023      	beq.n	8005094 <ProcessReceivedCommand+0xf0c>
			{
				InitializeRunning(ExperimentMode);
 800504c:	4b15      	ldr	r3, [pc, #84]	; (80050a4 <ProcessReceivedCommand+0xf1c>)
 800504e:	781b      	ldrb	r3, [r3, #0]
 8005050:	4618      	mov	r0, r3
 8005052:	f7fc fff7 	bl	8002044 <InitializeRunning>
				break;
 8005056:	e01e      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			break; // unused
 8005058:	bf00      	nop
 800505a:	e01c      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			break;
 800505c:	bf00      	nop
 800505e:	e01a      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			break;
 8005060:	bf00      	nop
 8005062:	e018      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 8005064:	bf00      	nop
 8005066:	e016      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 8005068:	bf00      	nop
 800506a:	e014      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 800506c:	bf00      	nop
 800506e:	e012      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 8005070:	bf00      	nop
 8005072:	e010      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 8005074:	bf00      	nop
 8005076:	e00e      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 8005078:	bf00      	nop
 800507a:	e00c      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 800507c:	bf00      	nop
 800507e:	e00a      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 8005080:	bf00      	nop
 8005082:	e008      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 8005084:	bf00      	nop
 8005086:	e006      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 8005088:	bf00      	nop
 800508a:	e004      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 800508c:	bf00      	nop
 800508e:	e002      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
				break;
 8005090:	bf00      	nop
 8005092:	e000      	b.n	8005096 <ProcessReceivedCommand+0xf0e>
			}
			else
			{
				break;
 8005094:	bf00      	nop
			}
	}
}
 8005096:	bf00      	nop
 8005098:	3784      	adds	r7, #132	; 0x84
 800509a:	46bd      	mov	sp, r7
 800509c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80050a0:	20000430 	.word	0x20000430
 80050a4:	20000006 	.word	0x20000006
 80050a8:	20000504 	.word	0x20000504
 80050ac:	20000524 	.word	0x20000524
 80050b0:	0800f910 	.word	0x0800f910
 80050b4:	20000418 	.word	0x20000418
 80050b8:	20000412 	.word	0x20000412
 80050bc:	2000033c 	.word	0x2000033c
 80050c0:	20000528 	.word	0x20000528
 80050c4:	0800f91c 	.word	0x0800f91c
 80050c8:	200004fc 	.word	0x200004fc
 80050cc:	200004b4 	.word	0x200004b4
 80050d0:	200004bc 	.word	0x200004bc
 80050d4:	20000004 	.word	0x20000004
 80050d8:	0800f928 	.word	0x0800f928
 80050dc:	20000005 	.word	0x20000005
 80050e0:	0800f930 	.word	0x0800f930

080050e4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback function when a receiving complete
{
 80050e4:	b580      	push	{r7, lr}
 80050e6:	b082      	sub	sp, #8
 80050e8:	af00      	add	r7, sp, #0
 80050ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(huart);

	// BEGIN UART6 Receiving
		if (huart->Instance==USART6) // If it is uart6, UI communication
 80050ec:	687b      	ldr	r3, [r7, #4]
 80050ee:	681b      	ldr	r3, [r3, #0]
 80050f0:	4a2f      	ldr	r2, [pc, #188]	; (80051b0 <HAL_UART_RxCpltCallback+0xcc>)
 80050f2:	4293      	cmp	r3, r2
 80050f4:	d121      	bne.n	800513a <HAL_UART_RxCpltCallback+0x56>
		{
			if(RxPCData!=EndChar) // read up to the ending char
 80050f6:	4b2f      	ldr	r3, [pc, #188]	; (80051b4 <HAL_UART_RxCpltCallback+0xd0>)
 80050f8:	781b      	ldrb	r3, [r3, #0]
 80050fa:	2224      	movs	r2, #36	; 0x24
 80050fc:	4293      	cmp	r3, r2
 80050fe:	d016      	beq.n	800512e <HAL_UART_RxCpltCallback+0x4a>
			{
				if (RxPCData != 0) // remove the null character
 8005100:	4b2c      	ldr	r3, [pc, #176]	; (80051b4 <HAL_UART_RxCpltCallback+0xd0>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d018      	beq.n	800513a <HAL_UART_RxCpltCallback+0x56>
				//if (RxPCData != NULL) // remove the null character
				{
					RxPCBuff[_rxPCIndex]=RxPCData;// Copy the data to buffer
 8005108:	4b2b      	ldr	r3, [pc, #172]	; (80051b8 <HAL_UART_RxCpltCallback+0xd4>)
 800510a:	781b      	ldrb	r3, [r3, #0]
 800510c:	461a      	mov	r2, r3
 800510e:	4b29      	ldr	r3, [pc, #164]	; (80051b4 <HAL_UART_RxCpltCallback+0xd0>)
 8005110:	7819      	ldrb	r1, [r3, #0]
 8005112:	4b2a      	ldr	r3, [pc, #168]	; (80051bc <HAL_UART_RxCpltCallback+0xd8>)
 8005114:	5499      	strb	r1, [r3, r2]
				  _rxPCIndex++;
 8005116:	4b28      	ldr	r3, [pc, #160]	; (80051b8 <HAL_UART_RxCpltCallback+0xd4>)
 8005118:	781b      	ldrb	r3, [r3, #0]
 800511a:	3301      	adds	r3, #1
 800511c:	b2da      	uxtb	r2, r3
 800511e:	4b26      	ldr	r3, [pc, #152]	; (80051b8 <HAL_UART_RxCpltCallback+0xd4>)
 8005120:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8005122:	2201      	movs	r2, #1
 8005124:	4923      	ldr	r1, [pc, #140]	; (80051b4 <HAL_UART_RxCpltCallback+0xd0>)
 8005126:	4826      	ldr	r0, [pc, #152]	; (80051c0 <HAL_UART_RxCpltCallback+0xdc>)
 8005128:	f003 ff59 	bl	8008fde <HAL_UART_Receive_IT>
 800512c:	e005      	b.n	800513a <HAL_UART_RxCpltCallback+0x56>
				}
			}
			else //if(RxPCData==EndChar)
			{
				_rxPCIndex=0;
 800512e:	4b22      	ldr	r3, [pc, #136]	; (80051b8 <HAL_UART_RxCpltCallback+0xd4>)
 8005130:	2200      	movs	r2, #0
 8005132:	701a      	strb	r2, [r3, #0]
				RxUart6_Cpl_Flag=true; // reading completed
 8005134:	4b23      	ldr	r3, [pc, #140]	; (80051c4 <HAL_UART_RxCpltCallback+0xe0>)
 8005136:	2201      	movs	r2, #1
 8005138:	701a      	strb	r2, [r3, #0]
		}
	// END UART6

		//BEGIN UART5 = HAL_UART_Receive_IT============================================
		/// Use this part
		if (huart->Instance==UART5) // If it is uart5, driver communication
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	4a22      	ldr	r2, [pc, #136]	; (80051c8 <HAL_UART_RxCpltCallback+0xe4>)
 8005140:	4293      	cmp	r3, r2
 8005142:	d130      	bne.n	80051a6 <HAL_UART_RxCpltCallback+0xc2>
		{
			if (_rxDriverIndex >= NoOfBytes) //
 8005144:	4b21      	ldr	r3, [pc, #132]	; (80051cc <HAL_UART_RxCpltCallback+0xe8>)
 8005146:	781a      	ldrb	r2, [r3, #0]
 8005148:	4b21      	ldr	r3, [pc, #132]	; (80051d0 <HAL_UART_RxCpltCallback+0xec>)
 800514a:	781b      	ldrb	r3, [r3, #0]
 800514c:	429a      	cmp	r2, r3
 800514e:	d308      	bcc.n	8005162 <HAL_UART_RxCpltCallback+0x7e>
			{
				RxUart5_Cpl_Flag = true; // Complete Receiving
 8005150:	4b20      	ldr	r3, [pc, #128]	; (80051d4 <HAL_UART_RxCpltCallback+0xf0>)
 8005152:	2201      	movs	r2, #1
 8005154:	701a      	strb	r2, [r3, #0]
				StartReceiveDriverData = false;
 8005156:	4b20      	ldr	r3, [pc, #128]	; (80051d8 <HAL_UART_RxCpltCallback+0xf4>)
 8005158:	2200      	movs	r2, #0
 800515a:	701a      	strb	r2, [r3, #0]
				_rxDriverIndex = 0;
 800515c:	4b1b      	ldr	r3, [pc, #108]	; (80051cc <HAL_UART_RxCpltCallback+0xe8>)
 800515e:	2200      	movs	r2, #0
 8005160:	701a      	strb	r2, [r3, #0]
			}
			if ((_rxDriverIndex == 0)&&(RxDriverData == DriverID)) // If byte 0 is the Driver ID
 8005162:	4b1a      	ldr	r3, [pc, #104]	; (80051cc <HAL_UART_RxCpltCallback+0xe8>)
 8005164:	781b      	ldrb	r3, [r3, #0]
 8005166:	2b00      	cmp	r3, #0
 8005168:	d106      	bne.n	8005178 <HAL_UART_RxCpltCallback+0x94>
 800516a:	4b1c      	ldr	r3, [pc, #112]	; (80051dc <HAL_UART_RxCpltCallback+0xf8>)
 800516c:	781b      	ldrb	r3, [r3, #0]
 800516e:	2b01      	cmp	r3, #1
 8005170:	d102      	bne.n	8005178 <HAL_UART_RxCpltCallback+0x94>
			{
				StartReceiveDriverData = true;
 8005172:	4b19      	ldr	r3, [pc, #100]	; (80051d8 <HAL_UART_RxCpltCallback+0xf4>)
 8005174:	2201      	movs	r2, #1
 8005176:	701a      	strb	r2, [r3, #0]
			}
			if (StartReceiveDriverData) //
 8005178:	4b17      	ldr	r3, [pc, #92]	; (80051d8 <HAL_UART_RxCpltCallback+0xf4>)
 800517a:	781b      	ldrb	r3, [r3, #0]
 800517c:	b2db      	uxtb	r3, r3
 800517e:	2b00      	cmp	r3, #0
 8005180:	d011      	beq.n	80051a6 <HAL_UART_RxCpltCallback+0xc2>
			{
				RxDriverBuff[_rxDriverIndex]=RxDriverData;// Copy the data to buffer
 8005182:	4b12      	ldr	r3, [pc, #72]	; (80051cc <HAL_UART_RxCpltCallback+0xe8>)
 8005184:	781b      	ldrb	r3, [r3, #0]
 8005186:	461a      	mov	r2, r3
 8005188:	4b14      	ldr	r3, [pc, #80]	; (80051dc <HAL_UART_RxCpltCallback+0xf8>)
 800518a:	7819      	ldrb	r1, [r3, #0]
 800518c:	4b14      	ldr	r3, [pc, #80]	; (80051e0 <HAL_UART_RxCpltCallback+0xfc>)
 800518e:	5499      	strb	r1, [r3, r2]
				_rxDriverIndex++;
 8005190:	4b0e      	ldr	r3, [pc, #56]	; (80051cc <HAL_UART_RxCpltCallback+0xe8>)
 8005192:	781b      	ldrb	r3, [r3, #0]
 8005194:	3301      	adds	r3, #1
 8005196:	b2da      	uxtb	r2, r3
 8005198:	4b0c      	ldr	r3, [pc, #48]	; (80051cc <HAL_UART_RxCpltCallback+0xe8>)
 800519a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time ///*/
 800519c:	2201      	movs	r2, #1
 800519e:	490f      	ldr	r1, [pc, #60]	; (80051dc <HAL_UART_RxCpltCallback+0xf8>)
 80051a0:	4810      	ldr	r0, [pc, #64]	; (80051e4 <HAL_UART_RxCpltCallback+0x100>)
 80051a2:	f003 ff1c 	bl	8008fde <HAL_UART_Receive_IT>
//				RxESP_Cpl_Flag=true; // reading completed
//			}
//			HAL_UART_Receive_IT(&huart4,&RxESPData,1);
//		}
//		// END UART4
}
 80051a6:	bf00      	nop
 80051a8:	3708      	adds	r7, #8
 80051aa:	46bd      	mov	sp, r7
 80051ac:	bd80      	pop	{r7, pc}
 80051ae:	bf00      	nop
 80051b0:	40011400 	.word	0x40011400
 80051b4:	200003f0 	.word	0x200003f0
 80051b8:	20000427 	.word	0x20000427
 80051bc:	20000380 	.word	0x20000380
 80051c0:	2000033c 	.word	0x2000033c
 80051c4:	20000429 	.word	0x20000429
 80051c8:	40005000 	.word	0x40005000
 80051cc:	20000428 	.word	0x20000428
 80051d0:	20000000 	.word	0x20000000
 80051d4:	2000042a 	.word	0x2000042a
 80051d8:	2000042b 	.word	0x2000042b
 80051dc:	200003f1 	.word	0x200003f1
 80051e0:	200003a8 	.word	0x200003a8
 80051e4:	200002b4 	.word	0x200002b4

080051e8 <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer 2 interrupt, 1ms
{
 80051e8:	b580      	push	{r7, lr}
 80051ea:	b082      	sub	sp, #8
 80051ec:	af00      	add	r7, sp, #0
 80051ee:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)	// TIMER 3 interrupt for pulse generation, period: 2us
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	681b      	ldr	r3, [r3, #0]
 80051f4:	4a40      	ldr	r2, [pc, #256]	; (80052f8 <HAL_TIM_PeriodElapsedCallback+0x110>)
 80051f6:	4293      	cmp	r3, r2
 80051f8:	d150      	bne.n	800529c <HAL_TIM_PeriodElapsedCallback+0xb4>
	{
		if (PulseGenerationFlag) // Only generating pulse when the flag is ON. Otherwise, do nothing
 80051fa:	4b40      	ldr	r3, [pc, #256]	; (80052fc <HAL_TIM_PeriodElapsedCallback+0x114>)
 80051fc:	781b      	ldrb	r3, [r3, #0]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d04c      	beq.n	800529c <HAL_TIM_PeriodElapsedCallback+0xb4>
		{
				Timer3Count++;
 8005202:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005204:	881b      	ldrh	r3, [r3, #0]
 8005206:	3301      	adds	r3, #1
 8005208:	b29a      	uxth	r2, r3
 800520a:	4b3d      	ldr	r3, [pc, #244]	; (8005300 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800520c:	801a      	strh	r2, [r3, #0]
				if (Timer3Count >= Timer3CountPeriod) // Generate pulse
 800520e:	4b3c      	ldr	r3, [pc, #240]	; (8005300 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8005210:	881a      	ldrh	r2, [r3, #0]
 8005212:	4b3c      	ldr	r3, [pc, #240]	; (8005304 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8005214:	881b      	ldrh	r3, [r3, #0]
 8005216:	429a      	cmp	r2, r3
 8005218:	d340      	bcc.n	800529c <HAL_TIM_PeriodElapsedCallback+0xb4>
				{
					Timer3Count = 0;
 800521a:	4b39      	ldr	r3, [pc, #228]	; (8005300 <HAL_TIM_PeriodElapsedCallback+0x118>)
 800521c:	2200      	movs	r2, #0
 800521e:	801a      	strh	r2, [r3, #0]
//							IsReachTargetPosition = true;
//							return;
//						}
//					}

					if (PRIsToggled)
 8005220:	4b39      	ldr	r3, [pc, #228]	; (8005308 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005222:	781b      	ldrb	r3, [r3, #0]
 8005224:	2b00      	cmp	r3, #0
 8005226:	d01c      	beq.n	8005262 <HAL_TIM_PeriodElapsedCallback+0x7a>
					{
						HAL_GPIO_TogglePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin); // Generate pulses on PF by tonggling this input
 8005228:	f44f 7100 	mov.w	r1, #512	; 0x200
 800522c:	4837      	ldr	r0, [pc, #220]	; (800530c <HAL_TIM_PeriodElapsedCallback+0x124>)
 800522e:	f002 fab4 	bl	800779a <HAL_GPIO_TogglePin>
						PRIsToggled = false;
 8005232:	4b35      	ldr	r3, [pc, #212]	; (8005308 <HAL_TIM_PeriodElapsedCallback+0x120>)
 8005234:	2200      	movs	r2, #0
 8005236:	701a      	strb	r2, [r3, #0]

						if (StartPulseCmdCounting) // Only counting the pulse cmd while running
 8005238:	4b35      	ldr	r3, [pc, #212]	; (8005310 <HAL_TIM_PeriodElapsedCallback+0x128>)
 800523a:	781b      	ldrb	r3, [r3, #0]
 800523c:	b2db      	uxtb	r3, r3
 800523e:	2b00      	cmp	r3, #0
 8005240:	d054      	beq.n	80052ec <HAL_TIM_PeriodElapsedCallback+0x104>
						{
							if (Direction) // Direction = true: dropping down
 8005242:	4b34      	ldr	r3, [pc, #208]	; (8005314 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 8005244:	781b      	ldrb	r3, [r3, #0]
 8005246:	2b00      	cmp	r3, #0
 8005248:	d005      	beq.n	8005256 <HAL_TIM_PeriodElapsedCallback+0x6e>
							{
								PositionPulseCmd++; // Increase the pulse cmd
 800524a:	4b33      	ldr	r3, [pc, #204]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	3301      	adds	r3, #1
 8005250:	4a31      	ldr	r2, [pc, #196]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005252:	6013      	str	r3, [r2, #0]
							{
								PositionPulseCmd--; // Decrease the pulse cmd
							}
						}

						return; // exit the function
 8005254:	e04a      	b.n	80052ec <HAL_TIM_PeriodElapsedCallback+0x104>
								PositionPulseCmd--; // Decrease the pulse cmd
 8005256:	4b30      	ldr	r3, [pc, #192]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	3b01      	subs	r3, #1
 800525c:	4a2e      	ldr	r2, [pc, #184]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800525e:	6013      	str	r3, [r2, #0]
						return; // exit the function
 8005260:	e044      	b.n	80052ec <HAL_TIM_PeriodElapsedCallback+0x104>
					}
					else
					{
						HAL_GPIO_TogglePin(PC8_PR_GPIO_Port, PC8_PR_Pin); // Generate pulses on PF by tonggling this input
 8005262:	f44f 7180 	mov.w	r1, #256	; 0x100
 8005266:	482d      	ldr	r0, [pc, #180]	; (800531c <HAL_TIM_PeriodElapsedCallback+0x134>)
 8005268:	f002 fa97 	bl	800779a <HAL_GPIO_TogglePin>
						PRIsToggled = true;
 800526c:	4b26      	ldr	r3, [pc, #152]	; (8005308 <HAL_TIM_PeriodElapsedCallback+0x120>)
 800526e:	2201      	movs	r2, #1
 8005270:	701a      	strb	r2, [r3, #0]

						if (StartPulseCmdCounting) // Only counting the pulse cmd while running
 8005272:	4b27      	ldr	r3, [pc, #156]	; (8005310 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8005274:	781b      	ldrb	r3, [r3, #0]
 8005276:	b2db      	uxtb	r3, r3
 8005278:	2b00      	cmp	r3, #0
 800527a:	d039      	beq.n	80052f0 <HAL_TIM_PeriodElapsedCallback+0x108>
						{
							if (Direction) // Direction = true: dropping down
 800527c:	4b25      	ldr	r3, [pc, #148]	; (8005314 <HAL_TIM_PeriodElapsedCallback+0x12c>)
 800527e:	781b      	ldrb	r3, [r3, #0]
 8005280:	2b00      	cmp	r3, #0
 8005282:	d005      	beq.n	8005290 <HAL_TIM_PeriodElapsedCallback+0xa8>
							{
								PositionPulseCmd++; // Increase the pulse cmd
 8005284:	4b24      	ldr	r3, [pc, #144]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	3301      	adds	r3, #1
 800528a:	4a23      	ldr	r2, [pc, #140]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x130>)
 800528c:	6013      	str	r3, [r2, #0]
							else // false: pulling up
							{
								PositionPulseCmd--; // Decrease the pulse cmd
							}
						}
						return;
 800528e:	e02f      	b.n	80052f0 <HAL_TIM_PeriodElapsedCallback+0x108>
								PositionPulseCmd--; // Decrease the pulse cmd
 8005290:	4b21      	ldr	r3, [pc, #132]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005292:	681b      	ldr	r3, [r3, #0]
 8005294:	3b01      	subs	r3, #1
 8005296:	4a20      	ldr	r2, [pc, #128]	; (8005318 <HAL_TIM_PeriodElapsedCallback+0x130>)
 8005298:	6013      	str	r3, [r2, #0]
						return;
 800529a:	e029      	b.n	80052f0 <HAL_TIM_PeriodElapsedCallback+0x108>
					}
				}
		}
	}

	if (htim->Instance == TIM2) // Timer 2 interrupt, for the main control function, 1ms
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80052a4:	d125      	bne.n	80052f2 <HAL_TIM_PeriodElapsedCallback+0x10a>
		{
				// To calculate PID controller
				Timer2SampleTimeControlCount++;
 80052a6:	4b1e      	ldr	r3, [pc, #120]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80052a8:	781b      	ldrb	r3, [r3, #0]
 80052aa:	3301      	adds	r3, #1
 80052ac:	b2da      	uxtb	r2, r3
 80052ae:	4b1c      	ldr	r3, [pc, #112]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80052b0:	701a      	strb	r2, [r3, #0]
				if (Timer2SampleTimeControlCount >= SampleTime) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 80052b2:	4b1b      	ldr	r3, [pc, #108]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80052b4:	781a      	ldrb	r2, [r3, #0]
 80052b6:	4b1b      	ldr	r3, [pc, #108]	; (8005324 <HAL_TIM_PeriodElapsedCallback+0x13c>)
 80052b8:	781b      	ldrb	r3, [r3, #0]
 80052ba:	429a      	cmp	r2, r3
 80052bc:	d305      	bcc.n	80052ca <HAL_TIM_PeriodElapsedCallback+0xe2>
				{
					Timer2ControlInterrupt = true;
 80052be:	4b1a      	ldr	r3, [pc, #104]	; (8005328 <HAL_TIM_PeriodElapsedCallback+0x140>)
 80052c0:	2201      	movs	r2, #1
 80052c2:	701a      	strb	r2, [r3, #0]
					Timer2SampleTimeControlCount = 0;
 80052c4:	4b16      	ldr	r3, [pc, #88]	; (8005320 <HAL_TIM_PeriodElapsedCallback+0x138>)
 80052c6:	2200      	movs	r2, #0
 80052c8:	701a      	strb	r2, [r3, #0]
				}

				// To transmit the data each 50ms
				Timer2Count++;
 80052ca:	4b18      	ldr	r3, [pc, #96]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	3301      	adds	r3, #1
 80052d0:	b2da      	uxtb	r2, r3
 80052d2:	4b16      	ldr	r3, [pc, #88]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80052d4:	701a      	strb	r2, [r3, #0]
				if (Timer2Count >= 50) // turn on the flag when the sample time reaches, fix the data sample time to 40ms
 80052d6:	4b15      	ldr	r3, [pc, #84]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80052d8:	781b      	ldrb	r3, [r3, #0]
 80052da:	2b31      	cmp	r3, #49	; 0x31
 80052dc:	d909      	bls.n	80052f2 <HAL_TIM_PeriodElapsedCallback+0x10a>
				{
					Timer2SampleTimeInterrupt = true;
 80052de:	4b14      	ldr	r3, [pc, #80]	; (8005330 <HAL_TIM_PeriodElapsedCallback+0x148>)
 80052e0:	2201      	movs	r2, #1
 80052e2:	701a      	strb	r2, [r3, #0]
					Timer2Count = 0;
 80052e4:	4b11      	ldr	r3, [pc, #68]	; (800532c <HAL_TIM_PeriodElapsedCallback+0x144>)
 80052e6:	2200      	movs	r2, #0
 80052e8:	701a      	strb	r2, [r3, #0]
 80052ea:	e002      	b.n	80052f2 <HAL_TIM_PeriodElapsedCallback+0x10a>
						return; // exit the function
 80052ec:	bf00      	nop
 80052ee:	e000      	b.n	80052f2 <HAL_TIM_PeriodElapsedCallback+0x10a>
						return;
 80052f0:	bf00      	nop
				}
		}
}
 80052f2:	3708      	adds	r7, #8
 80052f4:	46bd      	mov	sp, r7
 80052f6:	bd80      	pop	{r7, pc}
 80052f8:	40000400 	.word	0x40000400
 80052fc:	20000436 	.word	0x20000436
 8005300:	2000044c 	.word	0x2000044c
 8005304:	2000044a 	.word	0x2000044a
 8005308:	20000441 	.word	0x20000441
 800530c:	40021000 	.word	0x40021000
 8005310:	2000042e 	.word	0x2000042e
 8005314:	20000432 	.word	0x20000432
 8005318:	200004bc 	.word	0x200004bc
 800531c:	40020800 	.word	0x40020800
 8005320:	20000443 	.word	0x20000443
 8005324:	20000458 	.word	0x20000458
 8005328:	2000042d 	.word	0x2000042d
 800532c:	20000442 	.word	0x20000442
 8005330:	2000042c 	.word	0x2000042c
 8005334:	00000000 	.word	0x00000000

08005338 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8005338:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800533c:	ed2d 8b02 	vpush	{d8}
 8005340:	b089      	sub	sp, #36	; 0x24
 8005342:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8005344:	f001 fb24 	bl	8006990 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8005348:	f000 fd02 	bl	8005d50 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800534c:	f000 feda 	bl	8006104 <MX_GPIO_Init>
  MX_TIM2_Init();
 8005350:	f000 fd94 	bl	8005e7c <MX_TIM2_Init>
  MX_UART5_Init();
 8005354:	f000 fe58 	bl	8006008 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8005358:	f000 feaa 	bl	80060b0 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 800535c:	f000 fe08 	bl	8005f70 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8005360:	f000 fe7c 	bl	800605c <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8005364:	f000 fd5e 	bl	8005e24 <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(PE15_RELAY1_GPIO_Port, PE15_RELAY1_Pin, GPIO_PIN_SET);
 8005368:	2201      	movs	r2, #1
 800536a:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 800536e:	487b      	ldr	r0, [pc, #492]	; (800555c <main+0x224>)
 8005370:	f002 f9fa 	bl	8007768 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8005374:	f241 3088 	movw	r0, #5000	; 0x1388
 8005378:	f001 fb7c 	bl	8006a74 <HAL_Delay>

	InitParams (); // Read the saved params from the flash memory
 800537c:	f7fe fe8e 	bl	800409c <InitParams>

	HAL_GPIO_WritePin(PB15_485_MCU_PC_DIR_GPIO_Port, PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET); // Set Uart3 to receive Mode
 8005380:	2201      	movs	r2, #1
 8005382:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8005386:	4876      	ldr	r0, [pc, #472]	; (8005560 <main+0x228>)
 8005388:	f002 f9ee 	bl	8007768 <HAL_GPIO_WritePin>

//	HAL_UART_Receive_IT(&huart3,&RxUart3Data,1); // Enable Interrupt

	HAL_TIM_Base_Start_IT(&htim2); // Enable Timer 2 interrupt
 800538c:	4875      	ldr	r0, [pc, #468]	; (8005564 <main+0x22c>)
 800538e:	f002 fec7 	bl	8008120 <HAL_TIM_Base_Start_IT>
// Not turn on timer3 at the start
//	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer 3 interrupt
	HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8005392:	2201      	movs	r2, #1
 8005394:	4974      	ldr	r1, [pc, #464]	; (8005568 <main+0x230>)
 8005396:	4875      	ldr	r0, [pc, #468]	; (800556c <main+0x234>)
 8005398:	f003 fe21 	bl	8008fde <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart4,&RxESPData,1);
	DriverInit();
 800539c:	f7fb ff98 	bl	80012d0 <DriverInit>
	ReadMultiRegister(StE03,5);
 80053a0:	2105      	movs	r1, #5
 80053a2:	200c      	movs	r0, #12
 80053a4:	f7fc f900 	bl	80015a8 <ReadMultiRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		// Process Received Cmd from the GUI
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 80053a8:	4b71      	ldr	r3, [pc, #452]	; (8005570 <main+0x238>)
 80053aa:	781b      	ldrb	r3, [r3, #0]
 80053ac:	b2db      	uxtb	r3, r3
 80053ae:	2b00      	cmp	r3, #0
 80053b0:	d00b      	beq.n	80053ca <main+0x92>
			{
				ExtractMotionCode();
 80053b2:	f7fc f89d 	bl	80014f0 <ExtractMotionCode>
				ProcessReceivedCommand (); // Proceed the command
 80053b6:	f7fe fee7 	bl	8004188 <ProcessReceivedCommand>
				RxUart6_Cpl_Flag=false;
 80053ba:	4b6d      	ldr	r3, [pc, #436]	; (8005570 <main+0x238>)
 80053bc:	2200      	movs	r2, #0
 80053be:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 80053c0:	2201      	movs	r2, #1
 80053c2:	4969      	ldr	r1, [pc, #420]	; (8005568 <main+0x230>)
 80053c4:	4869      	ldr	r0, [pc, #420]	; (800556c <main+0x234>)
 80053c6:	f003 fe0a 	bl	8008fde <HAL_UART_Receive_IT>
			}
		// END UART6 Process Cmd

		// Process Timer2 interrupt after a period of Sampletime
		if (Timer2ControlInterrupt)
 80053ca:	4b6a      	ldr	r3, [pc, #424]	; (8005574 <main+0x23c>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	b2db      	uxtb	r3, r3
 80053d0:	2b00      	cmp	r3, #0
 80053d2:	f000 81a8 	beq.w	8005726 <main+0x3ee>
		{
			Timer2ControlInterrupt = false; // Reset the flag
 80053d6:	4b67      	ldr	r3, [pc, #412]	; (8005574 <main+0x23c>)
 80053d8:	2200      	movs	r2, #0
 80053da:	701a      	strb	r2, [r3, #0]
			// BEGIN running experiment
			if (StartRunning) // Process Running Experiment
 80053dc:	4b66      	ldr	r3, [pc, #408]	; (8005578 <main+0x240>)
 80053de:	781b      	ldrb	r3, [r3, #0]
 80053e0:	2b00      	cmp	r3, #0
 80053e2:	f000 809b 	beq.w	800551c <main+0x1e4>
			{
				switch (ExperimentMode)
 80053e6:	4b65      	ldr	r3, [pc, #404]	; (800557c <main+0x244>)
 80053e8:	781b      	ldrb	r3, [r3, #0]
 80053ea:	2b03      	cmp	r3, #3
 80053ec:	d067      	beq.n	80054be <main+0x186>
 80053ee:	2b03      	cmp	r3, #3
 80053f0:	f300 8096 	bgt.w	8005520 <main+0x1e8>
 80053f4:	2b01      	cmp	r3, #1
 80053f6:	d002      	beq.n	80053fe <main+0xc6>
 80053f8:	2b02      	cmp	r3, #2
 80053fa:	d031      	beq.n	8005460 <main+0x128>
								}
							}
						}
						break;
					default:
						break;
 80053fc:	e090      	b.n	8005520 <main+0x1e8>
						if (Dropping()) // Dropping() return true when it finishing
 80053fe:	f7fe f98f 	bl	8003720 <Dropping>
 8005402:	4603      	mov	r3, r0
 8005404:	2b00      	cmp	r3, #0
 8005406:	f000 808d 	beq.w	8005524 <main+0x1ec>
							if (!POSReach) // Check if position is reached or not
 800540a:	4b5d      	ldr	r3, [pc, #372]	; (8005580 <main+0x248>)
 800540c:	781b      	ldrb	r3, [r3, #0]
 800540e:	f083 0301 	eor.w	r3, r3, #1
 8005412:	b2db      	uxtb	r3, r3
 8005414:	2b00      	cmp	r3, #0
 8005416:	f000 8085 	beq.w	8005524 <main+0x1ec>
								if (WaitingMiliSecond(2000)) // Wait for 2 Seconds
 800541a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800541e:	f7fc fad5 	bl	80019cc <WaitingMiliSecond>
 8005422:	4603      	mov	r3, r0
 8005424:	2b00      	cmp	r3, #0
 8005426:	d07d      	beq.n	8005524 <main+0x1ec>
									StopExperiment();
 8005428:	f7fe fb36 	bl	8003a98 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 800542c:	4b55      	ldr	r3, [pc, #340]	; (8005584 <main+0x24c>)
 800542e:	781b      	ldrb	r3, [r3, #0]
 8005430:	2b00      	cmp	r3, #0
 8005432:	d077      	beq.n	8005524 <main+0x1ec>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset/ clear the array
 8005434:	221e      	movs	r2, #30
 8005436:	2100      	movs	r1, #0
 8005438:	4853      	ldr	r0, [pc, #332]	; (8005588 <main+0x250>)
 800543a:	f004 fd93 	bl	8009f64 <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 800543e:	4953      	ldr	r1, [pc, #332]	; (800558c <main+0x254>)
 8005440:	4851      	ldr	r0, [pc, #324]	; (8005588 <main+0x250>)
 8005442:	f005 fc17 	bl	800ac74 <siprintf>
 8005446:	4603      	mov	r3, r0
 8005448:	b2da      	uxtb	r2, r3
 800544a:	4b51      	ldr	r3, [pc, #324]	; (8005590 <main+0x258>)
 800544c:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 800544e:	4b50      	ldr	r3, [pc, #320]	; (8005590 <main+0x258>)
 8005450:	781b      	ldrb	r3, [r3, #0]
 8005452:	b29a      	uxth	r2, r3
 8005454:	23c8      	movs	r3, #200	; 0xc8
 8005456:	494c      	ldr	r1, [pc, #304]	; (8005588 <main+0x250>)
 8005458:	4844      	ldr	r0, [pc, #272]	; (800556c <main+0x234>)
 800545a:	f003 fd2e 	bl	8008eba <HAL_UART_Transmit>
						break;
 800545e:	e061      	b.n	8005524 <main+0x1ec>
						if (PullingExperiment()) // PullingExperiment() return true when it finishing
 8005460:	f7fc fe56 	bl	8002110 <PullingExperiment>
 8005464:	4603      	mov	r3, r0
 8005466:	2b00      	cmp	r3, #0
 8005468:	d05e      	beq.n	8005528 <main+0x1f0>
							if (!POSReach) // Check if position is reached or not
 800546a:	4b45      	ldr	r3, [pc, #276]	; (8005580 <main+0x248>)
 800546c:	781b      	ldrb	r3, [r3, #0]
 800546e:	f083 0301 	eor.w	r3, r3, #1
 8005472:	b2db      	uxtb	r3, r3
 8005474:	2b00      	cmp	r3, #0
 8005476:	d057      	beq.n	8005528 <main+0x1f0>
								if (WaitingMiliSecond(2000)) // Wait for 2 Seconds
 8005478:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800547c:	f7fc faa6 	bl	80019cc <WaitingMiliSecond>
 8005480:	4603      	mov	r3, r0
 8005482:	2b00      	cmp	r3, #0
 8005484:	d050      	beq.n	8005528 <main+0x1f0>
									StopExperiment();
 8005486:	f7fe fb07 	bl	8003a98 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 800548a:	4b3e      	ldr	r3, [pc, #248]	; (8005584 <main+0x24c>)
 800548c:	781b      	ldrb	r3, [r3, #0]
 800548e:	2b00      	cmp	r3, #0
 8005490:	d04a      	beq.n	8005528 <main+0x1f0>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005492:	221e      	movs	r2, #30
 8005494:	2100      	movs	r1, #0
 8005496:	483c      	ldr	r0, [pc, #240]	; (8005588 <main+0x250>)
 8005498:	f004 fd64 	bl	8009f64 <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 800549c:	493b      	ldr	r1, [pc, #236]	; (800558c <main+0x254>)
 800549e:	483a      	ldr	r0, [pc, #232]	; (8005588 <main+0x250>)
 80054a0:	f005 fbe8 	bl	800ac74 <siprintf>
 80054a4:	4603      	mov	r3, r0
 80054a6:	b2da      	uxtb	r2, r3
 80054a8:	4b39      	ldr	r3, [pc, #228]	; (8005590 <main+0x258>)
 80054aa:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80054ac:	4b38      	ldr	r3, [pc, #224]	; (8005590 <main+0x258>)
 80054ae:	781b      	ldrb	r3, [r3, #0]
 80054b0:	b29a      	uxth	r2, r3
 80054b2:	23c8      	movs	r3, #200	; 0xc8
 80054b4:	4934      	ldr	r1, [pc, #208]	; (8005588 <main+0x250>)
 80054b6:	482d      	ldr	r0, [pc, #180]	; (800556c <main+0x234>)
 80054b8:	f003 fcff 	bl	8008eba <HAL_UART_Transmit>
						break;
 80054bc:	e034      	b.n	8005528 <main+0x1f0>
						if (PullAndDrop()) // PullingExperiment() return true when it finishing
 80054be:	f7fd fc9f 	bl	8002e00 <PullAndDrop>
 80054c2:	4603      	mov	r3, r0
 80054c4:	2b00      	cmp	r3, #0
 80054c6:	d031      	beq.n	800552c <main+0x1f4>
							if (!POSReach) // Check if position is reached or not
 80054c8:	4b2d      	ldr	r3, [pc, #180]	; (8005580 <main+0x248>)
 80054ca:	781b      	ldrb	r3, [r3, #0]
 80054cc:	f083 0301 	eor.w	r3, r3, #1
 80054d0:	b2db      	uxtb	r3, r3
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d02a      	beq.n	800552c <main+0x1f4>
								if (WaitingMiliSecond(2000)) // Wait for 3 Seconds
 80054d6:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 80054da:	f7fc fa77 	bl	80019cc <WaitingMiliSecond>
 80054de:	4603      	mov	r3, r0
 80054e0:	2b00      	cmp	r3, #0
 80054e2:	d023      	beq.n	800552c <main+0x1f4>
									StopExperiment();
 80054e4:	f7fe fad8 	bl	8003a98 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 80054e8:	4b26      	ldr	r3, [pc, #152]	; (8005584 <main+0x24c>)
 80054ea:	781b      	ldrb	r3, [r3, #0]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	d01d      	beq.n	800552c <main+0x1f4>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80054f0:	221e      	movs	r2, #30
 80054f2:	2100      	movs	r1, #0
 80054f4:	4824      	ldr	r0, [pc, #144]	; (8005588 <main+0x250>)
 80054f6:	f004 fd35 	bl	8009f64 <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 80054fa:	4924      	ldr	r1, [pc, #144]	; (800558c <main+0x254>)
 80054fc:	4822      	ldr	r0, [pc, #136]	; (8005588 <main+0x250>)
 80054fe:	f005 fbb9 	bl	800ac74 <siprintf>
 8005502:	4603      	mov	r3, r0
 8005504:	b2da      	uxtb	r2, r3
 8005506:	4b22      	ldr	r3, [pc, #136]	; (8005590 <main+0x258>)
 8005508:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 800550a:	4b21      	ldr	r3, [pc, #132]	; (8005590 <main+0x258>)
 800550c:	781b      	ldrb	r3, [r3, #0]
 800550e:	b29a      	uxth	r2, r3
 8005510:	23c8      	movs	r3, #200	; 0xc8
 8005512:	491d      	ldr	r1, [pc, #116]	; (8005588 <main+0x250>)
 8005514:	4815      	ldr	r0, [pc, #84]	; (800556c <main+0x234>)
 8005516:	f003 fcd0 	bl	8008eba <HAL_UART_Transmit>
						break;
 800551a:	e007      	b.n	800552c <main+0x1f4>
				}
			}
 800551c:	bf00      	nop
 800551e:	e006      	b.n	800552e <main+0x1f6>
						break;
 8005520:	bf00      	nop
 8005522:	e004      	b.n	800552e <main+0x1f6>
						break;
 8005524:	bf00      	nop
 8005526:	e002      	b.n	800552e <main+0x1f6>
						break;
 8005528:	bf00      	nop
 800552a:	e000      	b.n	800552e <main+0x1f6>
						break;
 800552c:	bf00      	nop
			// END Running Experiment

			// START SIMULATING EXPERIMENT
			if (StartSimulating) // Process Running Experiment
 800552e:	4b19      	ldr	r3, [pc, #100]	; (8005594 <main+0x25c>)
 8005530:	781b      	ldrb	r3, [r3, #0]
 8005532:	2b00      	cmp	r3, #0
 8005534:	f000 80f7 	beq.w	8005726 <main+0x3ee>
			{
				switch (ExperimentMode)
 8005538:	4b10      	ldr	r3, [pc, #64]	; (800557c <main+0x244>)
 800553a:	781b      	ldrb	r3, [r3, #0]
 800553c:	2b03      	cmp	r3, #3
 800553e:	d02b      	beq.n	8005598 <main+0x260>
 8005540:	2b03      	cmp	r3, #3
 8005542:	f300 80f2 	bgt.w	800572a <main+0x3f2>
 8005546:	2b01      	cmp	r3, #1
 8005548:	d002      	beq.n	8005550 <main+0x218>
 800554a:	2b02      	cmp	r3, #2
 800554c:	d003      	beq.n	8005556 <main+0x21e>
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
							memset(ResponseMess, '\0', sizeof(ResponseMess));
						}
						break;
					default:
						break;
 800554e:	e0ec      	b.n	800572a <main+0x3f2>
						if (Dropping()) // Dropping() return true when it finishing
 8005550:	f7fe f8e6 	bl	8003720 <Dropping>
						break;
 8005554:	e0ec      	b.n	8005730 <main+0x3f8>
						if (PullingExperiment()) // PullingExperiment() return true when it finishing
 8005556:	f7fc fddb 	bl	8002110 <PullingExperiment>
						break;
 800555a:	e0e9      	b.n	8005730 <main+0x3f8>
 800555c:	40021000 	.word	0x40021000
 8005560:	40020400 	.word	0x40020400
 8005564:	20000224 	.word	0x20000224
 8005568:	200003f0 	.word	0x200003f0
 800556c:	2000033c 	.word	0x2000033c
 8005570:	20000429 	.word	0x20000429
 8005574:	2000042d 	.word	0x2000042d
 8005578:	20000430 	.word	0x20000430
 800557c:	20000006 	.word	0x20000006
 8005580:	20000438 	.word	0x20000438
 8005584:	20000440 	.word	0x20000440
 8005588:	200003f4 	.word	0x200003f4
 800558c:	0800f938 	.word	0x0800f938
 8005590:	20000412 	.word	0x20000412
 8005594:	20000431 	.word	0x20000431
						if (SimulatePullAndDrop()) // finish initializing the Pull and Drop Exp
 8005598:	f7fd f81a 	bl	80025d0 <SimulatePullAndDrop>
 800559c:	4603      	mov	r3, r0
 800559e:	2b00      	cmp	r3, #0
 80055a0:	f000 80c5 	beq.w	800572e <main+0x3f6>
							Initialized = true;
 80055a4:	4b8c      	ldr	r3, [pc, #560]	; (80057d8 <main+0x4a0>)
 80055a6:	2201      	movs	r2, #1
 80055a8:	701a      	strb	r2, [r3, #0]
							StartSimulating = false;
 80055aa:	4b8c      	ldr	r3, [pc, #560]	; (80057dc <main+0x4a4>)
 80055ac:	2200      	movs	r2, #0
 80055ae:	701a      	strb	r2, [r3, #0]
							PullingTotalDistance = DistCoeff*2*3.14*DrumRadius*abs(TotalPullingPulse)/EncoderResolution;
 80055b0:	4b8b      	ldr	r3, [pc, #556]	; (80057e0 <main+0x4a8>)
 80055b2:	edd3 7a00 	vldr	s15, [r3]
 80055b6:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80055ba:	ee17 0a90 	vmov	r0, s15
 80055be:	f7fa ffc3 	bl	8000548 <__aeabi_f2d>
 80055c2:	a381      	add	r3, pc, #516	; (adr r3, 80057c8 <main+0x490>)
 80055c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055c8:	f7fb f816 	bl	80005f8 <__aeabi_dmul>
 80055cc:	4602      	mov	r2, r0
 80055ce:	460b      	mov	r3, r1
 80055d0:	4614      	mov	r4, r2
 80055d2:	461d      	mov	r5, r3
 80055d4:	4b83      	ldr	r3, [pc, #524]	; (80057e4 <main+0x4ac>)
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	4618      	mov	r0, r3
 80055da:	f7fa ffb5 	bl	8000548 <__aeabi_f2d>
 80055de:	4602      	mov	r2, r0
 80055e0:	460b      	mov	r3, r1
 80055e2:	4620      	mov	r0, r4
 80055e4:	4629      	mov	r1, r5
 80055e6:	f7fb f807 	bl	80005f8 <__aeabi_dmul>
 80055ea:	4602      	mov	r2, r0
 80055ec:	460b      	mov	r3, r1
 80055ee:	4614      	mov	r4, r2
 80055f0:	461d      	mov	r5, r3
 80055f2:	4b7d      	ldr	r3, [pc, #500]	; (80057e8 <main+0x4b0>)
 80055f4:	881b      	ldrh	r3, [r3, #0]
 80055f6:	4618      	mov	r0, r3
 80055f8:	f7fa ff94 	bl	8000524 <__aeabi_i2d>
 80055fc:	4602      	mov	r2, r0
 80055fe:	460b      	mov	r3, r1
 8005600:	4620      	mov	r0, r4
 8005602:	4629      	mov	r1, r5
 8005604:	f7fa fff8 	bl	80005f8 <__aeabi_dmul>
 8005608:	4602      	mov	r2, r0
 800560a:	460b      	mov	r3, r1
 800560c:	4614      	mov	r4, r2
 800560e:	461d      	mov	r5, r3
 8005610:	4b76      	ldr	r3, [pc, #472]	; (80057ec <main+0x4b4>)
 8005612:	881b      	ldrh	r3, [r3, #0]
 8005614:	4618      	mov	r0, r3
 8005616:	f7fa ff85 	bl	8000524 <__aeabi_i2d>
 800561a:	4602      	mov	r2, r0
 800561c:	460b      	mov	r3, r1
 800561e:	4620      	mov	r0, r4
 8005620:	4629      	mov	r1, r5
 8005622:	f7fb f913 	bl	800084c <__aeabi_ddiv>
 8005626:	4602      	mov	r2, r0
 8005628:	460b      	mov	r3, r1
 800562a:	4610      	mov	r0, r2
 800562c:	4619      	mov	r1, r3
 800562e:	f7fb fadb 	bl	8000be8 <__aeabi_d2f>
 8005632:	4603      	mov	r3, r0
 8005634:	4a6e      	ldr	r2, [pc, #440]	; (80057f0 <main+0x4b8>)
 8005636:	6013      	str	r3, [r2, #0]
							PullingBotomPulseCmdPosition = (int)((float)EncoderResolution*(float)PullingTotalDistance/((float)(2*3.14*DrumRadius))); // unit: pulses
 8005638:	4b6c      	ldr	r3, [pc, #432]	; (80057ec <main+0x4b4>)
 800563a:	881b      	ldrh	r3, [r3, #0]
 800563c:	ee07 3a90 	vmov	s15, r3
 8005640:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8005644:	4b6a      	ldr	r3, [pc, #424]	; (80057f0 <main+0x4b8>)
 8005646:	edd3 7a00 	vldr	s15, [r3]
 800564a:	ee27 8a27 	vmul.f32	s16, s14, s15
 800564e:	4b65      	ldr	r3, [pc, #404]	; (80057e4 <main+0x4ac>)
 8005650:	681b      	ldr	r3, [r3, #0]
 8005652:	4618      	mov	r0, r3
 8005654:	f7fa ff78 	bl	8000548 <__aeabi_f2d>
 8005658:	a35d      	add	r3, pc, #372	; (adr r3, 80057d0 <main+0x498>)
 800565a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800565e:	f7fa ffcb 	bl	80005f8 <__aeabi_dmul>
 8005662:	4602      	mov	r2, r0
 8005664:	460b      	mov	r3, r1
 8005666:	4610      	mov	r0, r2
 8005668:	4619      	mov	r1, r3
 800566a:	f7fb fabd 	bl	8000be8 <__aeabi_d2f>
 800566e:	ee07 0a10 	vmov	s14, r0
 8005672:	eec8 7a07 	vdiv.f32	s15, s16, s14
 8005676:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800567a:	ee17 2a90 	vmov	r2, s15
 800567e:	4b5d      	ldr	r3, [pc, #372]	; (80057f4 <main+0x4bc>)
 8005680:	601a      	str	r2, [r3, #0]
							DroppingTotalDistance = 2*3.14*DrumRadius*abs(TotalDroppingPulse)/EncoderResolution;
 8005682:	4b58      	ldr	r3, [pc, #352]	; (80057e4 <main+0x4ac>)
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	4618      	mov	r0, r3
 8005688:	f7fa ff5e 	bl	8000548 <__aeabi_f2d>
 800568c:	a350      	add	r3, pc, #320	; (adr r3, 80057d0 <main+0x498>)
 800568e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005692:	f7fa ffb1 	bl	80005f8 <__aeabi_dmul>
 8005696:	4602      	mov	r2, r0
 8005698:	460b      	mov	r3, r1
 800569a:	4614      	mov	r4, r2
 800569c:	461d      	mov	r5, r3
 800569e:	4b56      	ldr	r3, [pc, #344]	; (80057f8 <main+0x4c0>)
 80056a0:	881b      	ldrh	r3, [r3, #0]
 80056a2:	4618      	mov	r0, r3
 80056a4:	f7fa ff3e 	bl	8000524 <__aeabi_i2d>
 80056a8:	4602      	mov	r2, r0
 80056aa:	460b      	mov	r3, r1
 80056ac:	4620      	mov	r0, r4
 80056ae:	4629      	mov	r1, r5
 80056b0:	f7fa ffa2 	bl	80005f8 <__aeabi_dmul>
 80056b4:	4602      	mov	r2, r0
 80056b6:	460b      	mov	r3, r1
 80056b8:	4614      	mov	r4, r2
 80056ba:	461d      	mov	r5, r3
 80056bc:	4b4b      	ldr	r3, [pc, #300]	; (80057ec <main+0x4b4>)
 80056be:	881b      	ldrh	r3, [r3, #0]
 80056c0:	4618      	mov	r0, r3
 80056c2:	f7fa ff2f 	bl	8000524 <__aeabi_i2d>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4620      	mov	r0, r4
 80056cc:	4629      	mov	r1, r5
 80056ce:	f7fb f8bd 	bl	800084c <__aeabi_ddiv>
 80056d2:	4602      	mov	r2, r0
 80056d4:	460b      	mov	r3, r1
 80056d6:	4610      	mov	r0, r2
 80056d8:	4619      	mov	r1, r3
 80056da:	f7fb fa65 	bl	8000ba8 <__aeabi_d2uiz>
 80056de:	4603      	mov	r3, r0
 80056e0:	b2da      	uxtb	r2, r3
 80056e2:	4b46      	ldr	r3, [pc, #280]	; (80057fc <main+0x4c4>)
 80056e4:	701a      	strb	r2, [r3, #0]
							TxPCLen = sprintf(ResponseMess,"g14/%.1f/%.1fe",PullingTotalDistance, DroppingTotalDistance);
 80056e6:	4b42      	ldr	r3, [pc, #264]	; (80057f0 <main+0x4b8>)
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	4618      	mov	r0, r3
 80056ec:	f7fa ff2c 	bl	8000548 <__aeabi_f2d>
 80056f0:	4602      	mov	r2, r0
 80056f2:	460b      	mov	r3, r1
 80056f4:	4941      	ldr	r1, [pc, #260]	; (80057fc <main+0x4c4>)
 80056f6:	7809      	ldrb	r1, [r1, #0]
 80056f8:	9100      	str	r1, [sp, #0]
 80056fa:	4941      	ldr	r1, [pc, #260]	; (8005800 <main+0x4c8>)
 80056fc:	4841      	ldr	r0, [pc, #260]	; (8005804 <main+0x4cc>)
 80056fe:	f005 fab9 	bl	800ac74 <siprintf>
 8005702:	4603      	mov	r3, r0
 8005704:	b2da      	uxtb	r2, r3
 8005706:	4b40      	ldr	r3, [pc, #256]	; (8005808 <main+0x4d0>)
 8005708:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)ResponseMess,TxPCLen,200); // Send to uart6 to check the params are set or not
 800570a:	4b3f      	ldr	r3, [pc, #252]	; (8005808 <main+0x4d0>)
 800570c:	781b      	ldrb	r3, [r3, #0]
 800570e:	b29a      	uxth	r2, r3
 8005710:	23c8      	movs	r3, #200	; 0xc8
 8005712:	493c      	ldr	r1, [pc, #240]	; (8005804 <main+0x4cc>)
 8005714:	483d      	ldr	r0, [pc, #244]	; (800580c <main+0x4d4>)
 8005716:	f003 fbd0 	bl	8008eba <HAL_UART_Transmit>
							memset(ResponseMess, '\0', sizeof(ResponseMess));
 800571a:	220f      	movs	r2, #15
 800571c:	2100      	movs	r1, #0
 800571e:	4839      	ldr	r0, [pc, #228]	; (8005804 <main+0x4cc>)
 8005720:	f004 fc20 	bl	8009f64 <memset>
						break;
 8005724:	e003      	b.n	800572e <main+0x3f6>
				}
			}
 8005726:	bf00      	nop
 8005728:	e002      	b.n	8005730 <main+0x3f8>
						break;
 800572a:	bf00      	nop
 800572c:	e000      	b.n	8005730 <main+0x3f8>
						break;
 800572e:	bf00      	nop
		}

		// END Timer2ControlInterrupt

		// BEGIN Timer2 interrupt for sending the data
		if (Timer2SampleTimeInterrupt)
 8005730:	4b37      	ldr	r3, [pc, #220]	; (8005810 <main+0x4d8>)
 8005732:	781b      	ldrb	r3, [r3, #0]
 8005734:	b2db      	uxtb	r3, r3
 8005736:	2b00      	cmp	r3, #0
 8005738:	f000 815f 	beq.w	80059fa <main+0x6c2>
		{
			Timer2SampleTimeInterrupt = false;
 800573c:	4b34      	ldr	r3, [pc, #208]	; (8005810 <main+0x4d8>)
 800573e:	2200      	movs	r2, #0
 8005740:	701a      	strb	r2, [r3, #0]

			if (StartRunning)
 8005742:	4b34      	ldr	r3, [pc, #208]	; (8005814 <main+0x4dc>)
 8005744:	781b      	ldrb	r3, [r3, #0]
 8005746:	2b00      	cmp	r3, #0
 8005748:	d014      	beq.n	8005774 <main+0x43c>
			{
				// Read CN1-22-RDY, Check if Servo Ready or not, or Servo ON of OFF.
				// If servo is not ready or not ON, then turn off all the functions
				if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin) || HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin))
 800574a:	2104      	movs	r1, #4
 800574c:	4832      	ldr	r0, [pc, #200]	; (8005818 <main+0x4e0>)
 800574e:	f001 fff3 	bl	8007738 <HAL_GPIO_ReadPin>
 8005752:	4603      	mov	r3, r0
 8005754:	2b00      	cmp	r3, #0
 8005756:	d106      	bne.n	8005766 <main+0x42e>
 8005758:	2140      	movs	r1, #64	; 0x40
 800575a:	482f      	ldr	r0, [pc, #188]	; (8005818 <main+0x4e0>)
 800575c:	f001 ffec 	bl	8007738 <HAL_GPIO_ReadPin>
 8005760:	4603      	mov	r3, r0
 8005762:	2b00      	cmp	r3, #0
 8005764:	d006      	beq.n	8005774 <main+0x43c>
				{
				// If the servo is not ON. Then stop all the running function
					StopPulseGenerating();
 8005766:	f7fc f8f5 	bl	8001954 <StopPulseGenerating>
					StopExperiment();
 800576a:	f7fe f995 	bl	8003a98 <StopExperiment>
					IsHoming = false; // Disable Homming
 800576e:	4b2b      	ldr	r3, [pc, #172]	; (800581c <main+0x4e4>)
 8005770:	2200      	movs	r2, #0
 8005772:	701a      	strb	r2, [r3, #0]
				}
			}

			// BEGIN Software Limit ASDA Driver
			if (!MotorDriver) // Applied for ASDA-A3 Diver since the encoder pulse only can be cleared when cycle the driver
 8005774:	4b2a      	ldr	r3, [pc, #168]	; (8005820 <main+0x4e8>)
 8005776:	781b      	ldrb	r3, [r3, #0]
 8005778:	f083 0301 	eor.w	r3, r3, #1
 800577c:	b2db      	uxtb	r3, r3
 800577e:	2b00      	cmp	r3, #0
 8005780:	d058      	beq.n	8005834 <main+0x4fc>
			{
				if (StartRunning && StartAccleratePulling) // Always turn on the software limit while running
 8005782:	4b24      	ldr	r3, [pc, #144]	; (8005814 <main+0x4dc>)
 8005784:	781b      	ldrb	r3, [r3, #0]
 8005786:	2b00      	cmp	r3, #0
 8005788:	d00e      	beq.n	80057a8 <main+0x470>
 800578a:	4b26      	ldr	r3, [pc, #152]	; (8005824 <main+0x4ec>)
 800578c:	781b      	ldrb	r3, [r3, #0]
 800578e:	2b00      	cmp	r3, #0
 8005790:	d00a      	beq.n	80057a8 <main+0x470>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8005792:	4b25      	ldr	r3, [pc, #148]	; (8005828 <main+0x4f0>)
 8005794:	681a      	ldr	r2, [r3, #0]
 8005796:	4b25      	ldr	r3, [pc, #148]	; (800582c <main+0x4f4>)
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	2bc8      	cmp	r3, #200	; 0xc8
 800579e:	dc03      	bgt.n	80057a8 <main+0x470>
					{
						StopPulseGenerating();
 80057a0:	f7fc f8d8 	bl	8001954 <StopPulseGenerating>
						StopExperiment();
 80057a4:	f7fe f978 	bl	8003a98 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 80057a8:	4b21      	ldr	r3, [pc, #132]	; (8005830 <main+0x4f8>)
 80057aa:	781b      	ldrb	r3, [r3, #0]
 80057ac:	2b00      	cmp	r3, #0
 80057ae:	d065      	beq.n	800587c <main+0x544>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 80057b0:	4b1d      	ldr	r3, [pc, #116]	; (8005828 <main+0x4f0>)
 80057b2:	681a      	ldr	r2, [r3, #0]
 80057b4:	4b1d      	ldr	r3, [pc, #116]	; (800582c <main+0x4f4>)
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	1ad3      	subs	r3, r2, r3
 80057ba:	2bc8      	cmp	r3, #200	; 0xc8
 80057bc:	dc5e      	bgt.n	800587c <main+0x544>
					{
						StopPulseGenerating();
 80057be:	f7fc f8c9 	bl	8001954 <StopPulseGenerating>
						StopExperiment();
 80057c2:	f7fe f969 	bl	8003a98 <StopExperiment>
 80057c6:	e059      	b.n	800587c <main+0x544>
 80057c8:	51eb851f 	.word	0x51eb851f
 80057cc:	40091eb8 	.word	0x40091eb8
 80057d0:	51eb851f 	.word	0x51eb851f
 80057d4:	40191eb8 	.word	0x40191eb8
 80057d8:	2000043f 	.word	0x2000043f
 80057dc:	20000431 	.word	0x20000431
 80057e0:	20000524 	.word	0x20000524
 80057e4:	20000454 	.word	0x20000454
 80057e8:	20000450 	.word	0x20000450
 80057ec:	2000000a 	.word	0x2000000a
 80057f0:	200004a4 	.word	0x200004a4
 80057f4:	200004a8 	.word	0x200004a8
 80057f8:	20000452 	.word	0x20000452
 80057fc:	20000480 	.word	0x20000480
 8005800:	0800f93c 	.word	0x0800f93c
 8005804:	20000418 	.word	0x20000418
 8005808:	20000412 	.word	0x20000412
 800580c:	2000033c 	.word	0x2000033c
 8005810:	2000042c 	.word	0x2000042c
 8005814:	20000430 	.word	0x20000430
 8005818:	40021000 	.word	0x40021000
 800581c:	2000043e 	.word	0x2000043e
 8005820:	20000003 	.word	0x20000003
 8005824:	2000043b 	.word	0x2000043b
 8005828:	200004fc 	.word	0x200004fc
 800582c:	200004b4 	.word	0x200004b4
 8005830:	20000005 	.word	0x20000005
					}
				}
			}
			else // HIGEN FDA Driver, Software Limit Switch
			{
				if (StartRunning && StartAccleratePulling)// Always turn on the software limit while running
 8005834:	4b77      	ldr	r3, [pc, #476]	; (8005a14 <main+0x6dc>)
 8005836:	781b      	ldrb	r3, [r3, #0]
 8005838:	2b00      	cmp	r3, #0
 800583a:	d00f      	beq.n	800585c <main+0x524>
 800583c:	4b76      	ldr	r3, [pc, #472]	; (8005a18 <main+0x6e0>)
 800583e:	781b      	ldrb	r3, [r3, #0]
 8005840:	2b00      	cmp	r3, #0
 8005842:	d00b      	beq.n	800585c <main+0x524>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8005844:	4b75      	ldr	r3, [pc, #468]	; (8005a1c <main+0x6e4>)
 8005846:	681a      	ldr	r2, [r3, #0]
 8005848:	4b75      	ldr	r3, [pc, #468]	; (8005a20 <main+0x6e8>)
 800584a:	681b      	ldr	r3, [r3, #0]
 800584c:	1ad3      	subs	r3, r2, r3
 800584e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005852:	dc03      	bgt.n	800585c <main+0x524>
					{
						StopPulseGenerating();
 8005854:	f7fc f87e 	bl	8001954 <StopPulseGenerating>
						StopExperiment();
 8005858:	f7fe f91e 	bl	8003a98 <StopExperiment>
					}
				}
				if (SoftWareLimit) // Software limit is on
 800585c:	4b71      	ldr	r3, [pc, #452]	; (8005a24 <main+0x6ec>)
 800585e:	781b      	ldrb	r3, [r3, #0]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d00b      	beq.n	800587c <main+0x544>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8005864:	4b6d      	ldr	r3, [pc, #436]	; (8005a1c <main+0x6e4>)
 8005866:	681a      	ldr	r2, [r3, #0]
 8005868:	4b6d      	ldr	r3, [pc, #436]	; (8005a20 <main+0x6e8>)
 800586a:	681b      	ldr	r3, [r3, #0]
 800586c:	1ad3      	subs	r3, r2, r3
 800586e:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8005872:	dc03      	bgt.n	800587c <main+0x544>
					{
						StopPulseGenerating();
 8005874:	f7fc f86e 	bl	8001954 <StopPulseGenerating>
						StopExperiment();
 8005878:	f7fe f90e 	bl	8003a98 <StopExperiment>
					}
				}
			}
			// END Software Limit ASDA Driver
			//BEGIN Homing
			if (IsHoming)
 800587c:	4b6a      	ldr	r3, [pc, #424]	; (8005a28 <main+0x6f0>)
 800587e:	781b      	ldrb	r3, [r3, #0]
 8005880:	2b00      	cmp	r3, #0
 8005882:	d009      	beq.n	8005898 <main+0x560>
			{
				if(CheckGoingToRefPosition(false, 100)) // false = go up, 0 = home position
 8005884:	2164      	movs	r1, #100	; 0x64
 8005886:	2000      	movs	r0, #0
 8005888:	f7fc f952 	bl	8001b30 <CheckGoingToRefPosition>
 800588c:	4603      	mov	r3, r0
 800588e:	2b00      	cmp	r3, #0
 8005890:	d002      	beq.n	8005898 <main+0x560>
				{
					IsHoming = false; // finish homing
 8005892:	4b65      	ldr	r3, [pc, #404]	; (8005a28 <main+0x6f0>)
 8005894:	2200      	movs	r2, #0
 8005896:	701a      	strb	r2, [r3, #0]
				}
			}
			//END Homing

			// BEGIN Send data to the UI
			if (UIDataRequest)
 8005898:	4b64      	ldr	r3, [pc, #400]	; (8005a2c <main+0x6f4>)
 800589a:	781b      	ldrb	r3, [r3, #0]
 800589c:	2b00      	cmp	r3, #0
 800589e:	d07d      	beq.n	800599c <main+0x664>
			{
				if (PositionControlMode) // Position Mode, read both Position and Speed, Send both Position and Speed
 80058a0:	4b63      	ldr	r3, [pc, #396]	; (8005a30 <main+0x6f8>)
 80058a2:	781b      	ldrb	r3, [r3, #0]
 80058a4:	2b00      	cmp	r3, #0
 80058a6:	d079      	beq.n	800599c <main+0x664>
				{
					memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80058a8:	221e      	movs	r2, #30
 80058aa:	2100      	movs	r1, #0
 80058ac:	4861      	ldr	r0, [pc, #388]	; (8005a34 <main+0x6fc>)
 80058ae:	f004 fb59 	bl	8009f64 <memset>
					if (MotorDriver) // FDA7000 Driver
 80058b2:	4b61      	ldr	r3, [pc, #388]	; (8005a38 <main+0x700>)
 80058b4:	781b      	ldrb	r3, [r3, #0]
 80058b6:	2b00      	cmp	r3, #0
 80058b8:	d038      	beq.n	800592c <main+0x5f4>
					{

						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PositionPulseCmd*EgearRatio); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError);
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 80058ba:	4b60      	ldr	r3, [pc, #384]	; (8005a3c <main+0x704>)
 80058bc:	681b      	ldr	r3, [r3, #0]
 80058be:	4618      	mov	r0, r3
 80058c0:	f7fa fe42 	bl	8000548 <__aeabi_f2d>
 80058c4:	4682      	mov	sl, r0
 80058c6:	468b      	mov	fp, r1
 80058c8:	4b5d      	ldr	r3, [pc, #372]	; (8005a40 <main+0x708>)
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	4618      	mov	r0, r3
 80058ce:	f7fa fe3b 	bl	8000548 <__aeabi_f2d>
 80058d2:	4604      	mov	r4, r0
 80058d4:	460d      	mov	r5, r1
 80058d6:	4b5b      	ldr	r3, [pc, #364]	; (8005a44 <main+0x70c>)
 80058d8:	681b      	ldr	r3, [r3, #0]
 80058da:	4618      	mov	r0, r3
 80058dc:	f7fa fe34 	bl	8000548 <__aeabi_f2d>
 80058e0:	4680      	mov	r8, r0
 80058e2:	4689      	mov	r9, r1
 80058e4:	4b58      	ldr	r3, [pc, #352]	; (8005a48 <main+0x710>)
 80058e6:	681b      	ldr	r3, [r3, #0]
 80058e8:	4618      	mov	r0, r3
 80058ea:	f7fa fe2d 	bl	8000548 <__aeabi_f2d>
 80058ee:	4602      	mov	r2, r0
 80058f0:	460b      	mov	r3, r1
 80058f2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80058f6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80058fa:	e9cd 4500 	strd	r4, r5, [sp]
 80058fe:	4652      	mov	r2, sl
 8005900:	465b      	mov	r3, fp
 8005902:	4952      	ldr	r1, [pc, #328]	; (8005a4c <main+0x714>)
 8005904:	484b      	ldr	r0, [pc, #300]	; (8005a34 <main+0x6fc>)
 8005906:	f005 f9b5 	bl	800ac74 <siprintf>
 800590a:	4603      	mov	r3, r0
 800590c:	b2da      	uxtb	r2, r3
 800590e:	4b50      	ldr	r3, [pc, #320]	; (8005a50 <main+0x718>)
 8005910:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005912:	4b4f      	ldr	r3, [pc, #316]	; (8005a50 <main+0x718>)
 8005914:	781b      	ldrb	r3, [r3, #0]
 8005916:	b29a      	uxth	r2, r3
 8005918:	23c8      	movs	r3, #200	; 0xc8
 800591a:	4946      	ldr	r1, [pc, #280]	; (8005a34 <main+0x6fc>)
 800591c:	484d      	ldr	r0, [pc, #308]	; (8005a54 <main+0x71c>)
 800591e:	f003 facc 	bl	8008eba <HAL_UART_Transmit>
						ReadMultiRegister(StE03,6); // Read from StE03 -> StE08
 8005922:	2106      	movs	r1, #6
 8005924:	200c      	movs	r0, #12
 8005926:	f7fb fe3f 	bl	80015a8 <ReadMultiRegister>
 800592a:	e037      	b.n	800599c <main+0x664>
					}
					else // ASDA-A3 Driver
					{
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%d/%.1f/%.1fe",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError,AccZ,AccRef); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 800592c:	4b43      	ldr	r3, [pc, #268]	; (8005a3c <main+0x704>)
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	4618      	mov	r0, r3
 8005932:	f7fa fe09 	bl	8000548 <__aeabi_f2d>
 8005936:	4682      	mov	sl, r0
 8005938:	468b      	mov	fp, r1
 800593a:	4b41      	ldr	r3, [pc, #260]	; (8005a40 <main+0x708>)
 800593c:	681b      	ldr	r3, [r3, #0]
 800593e:	4618      	mov	r0, r3
 8005940:	f7fa fe02 	bl	8000548 <__aeabi_f2d>
 8005944:	4604      	mov	r4, r0
 8005946:	460d      	mov	r5, r1
 8005948:	4b3e      	ldr	r3, [pc, #248]	; (8005a44 <main+0x70c>)
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	4618      	mov	r0, r3
 800594e:	f7fa fdfb 	bl	8000548 <__aeabi_f2d>
 8005952:	4680      	mov	r8, r0
 8005954:	4689      	mov	r9, r1
 8005956:	4b3c      	ldr	r3, [pc, #240]	; (8005a48 <main+0x710>)
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	4618      	mov	r0, r3
 800595c:	f7fa fdf4 	bl	8000548 <__aeabi_f2d>
 8005960:	4602      	mov	r2, r0
 8005962:	460b      	mov	r3, r1
 8005964:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005968:	e9cd 8902 	strd	r8, r9, [sp, #8]
 800596c:	e9cd 4500 	strd	r4, r5, [sp]
 8005970:	4652      	mov	r2, sl
 8005972:	465b      	mov	r3, fp
 8005974:	4935      	ldr	r1, [pc, #212]	; (8005a4c <main+0x714>)
 8005976:	482f      	ldr	r0, [pc, #188]	; (8005a34 <main+0x6fc>)
 8005978:	f005 f97c 	bl	800ac74 <siprintf>
 800597c:	4603      	mov	r3, r0
 800597e:	b2da      	uxtb	r2, r3
 8005980:	4b33      	ldr	r3, [pc, #204]	; (8005a50 <main+0x718>)
 8005982:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005984:	4b32      	ldr	r3, [pc, #200]	; (8005a50 <main+0x718>)
 8005986:	781b      	ldrb	r3, [r3, #0]
 8005988:	b29a      	uxth	r2, r3
 800598a:	23c8      	movs	r3, #200	; 0xc8
 800598c:	4929      	ldr	r1, [pc, #164]	; (8005a34 <main+0x6fc>)
 800598e:	4831      	ldr	r0, [pc, #196]	; (8005a54 <main+0x71c>)
 8005990:	f003 fa93 	bl	8008eba <HAL_UART_Transmit>
						// Read 4 words start from 0x012 to 0x015
						// Encoder pulse: 0x012 + 0x013 (2 words)
						// Motor Speed: 0x014 + 0x015 (2 words)
						// Pulse Error: (2 word)
						// Total is 6 words, 1word = 4 bytes
						ReadMultiRegister(ASDA_MotorSpeed,6);
 8005994:	2106      	movs	r1, #6
 8005996:	2012      	movs	r0, #18
 8005998:	f7fb fe06 	bl	80015a8 <ReadMultiRegister>
					}
				}
			}
			if(OutputDataRequest)
 800599c:	4b2e      	ldr	r3, [pc, #184]	; (8005a58 <main+0x720>)
 800599e:	781b      	ldrb	r3, [r3, #0]
 80059a0:	2b00      	cmp	r3, #0
 80059a2:	d02a      	beq.n	80059fa <main+0x6c2>
				{
					CountTimerDriverOutput++;
 80059a4:	4b2d      	ldr	r3, [pc, #180]	; (8005a5c <main+0x724>)
 80059a6:	881b      	ldrh	r3, [r3, #0]
 80059a8:	3301      	adds	r3, #1
 80059aa:	b29a      	uxth	r2, r3
 80059ac:	4b2b      	ldr	r3, [pc, #172]	; (8005a5c <main+0x724>)
 80059ae:	801a      	strh	r2, [r3, #0]
					if (CountTimerDriverOutput >= 15) // 20*25=500 ms, timer 2 period is 1ms
 80059b0:	4b2a      	ldr	r3, [pc, #168]	; (8005a5c <main+0x724>)
 80059b2:	881b      	ldrh	r3, [r3, #0]
 80059b4:	2b0e      	cmp	r3, #14
 80059b6:	d920      	bls.n	80059fa <main+0x6c2>
					{
						DriverOutput = ReadLogicF7000Out(); // Read Driver Output
 80059b8:	f7fb fcca 	bl	8001350 <ReadLogicF7000Out>
 80059bc:	4603      	mov	r3, r0
 80059be:	461a      	mov	r2, r3
 80059c0:	4b27      	ldr	r3, [pc, #156]	; (8005a60 <main+0x728>)
 80059c2:	801a      	strh	r2, [r3, #0]

						memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80059c4:	221e      	movs	r2, #30
 80059c6:	2100      	movs	r1, #0
 80059c8:	481a      	ldr	r0, [pc, #104]	; (8005a34 <main+0x6fc>)
 80059ca:	f004 facb 	bl	8009f64 <memset>
						TxPCLen = sprintf(TxPCBuff,"o%de",DriverOutput); // 1 means only the driver outputs
 80059ce:	4b24      	ldr	r3, [pc, #144]	; (8005a60 <main+0x728>)
 80059d0:	881b      	ldrh	r3, [r3, #0]
 80059d2:	461a      	mov	r2, r3
 80059d4:	4923      	ldr	r1, [pc, #140]	; (8005a64 <main+0x72c>)
 80059d6:	4817      	ldr	r0, [pc, #92]	; (8005a34 <main+0x6fc>)
 80059d8:	f005 f94c 	bl	800ac74 <siprintf>
 80059dc:	4603      	mov	r3, r0
 80059de:	b2da      	uxtb	r2, r3
 80059e0:	4b1b      	ldr	r3, [pc, #108]	; (8005a50 <main+0x718>)
 80059e2:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80059e4:	4b1a      	ldr	r3, [pc, #104]	; (8005a50 <main+0x718>)
 80059e6:	781b      	ldrb	r3, [r3, #0]
 80059e8:	b29a      	uxth	r2, r3
 80059ea:	23c8      	movs	r3, #200	; 0xc8
 80059ec:	4911      	ldr	r1, [pc, #68]	; (8005a34 <main+0x6fc>)
 80059ee:	4819      	ldr	r0, [pc, #100]	; (8005a54 <main+0x71c>)
 80059f0:	f003 fa63 	bl	8008eba <HAL_UART_Transmit>

						CountTimerDriverOutput = 0;
 80059f4:	4b19      	ldr	r3, [pc, #100]	; (8005a5c <main+0x724>)
 80059f6:	2200      	movs	r2, #0
 80059f8:	801a      	strh	r2, [r3, #0]
			// END Send data to the UI
		}
		// END 50ms period interrupt

		// BEGIN Process Driver Received Data
		if (RxUart5_Cpl_Flag) // Complete receive data from the driver
 80059fa:	4b1b      	ldr	r3, [pc, #108]	; (8005a68 <main+0x730>)
 80059fc:	781b      	ldrb	r3, [r3, #0]
 80059fe:	b2db      	uxtb	r3, r3
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	f43f acd1 	beq.w	80053a8 <main+0x70>
			{
				RxUart5_Cpl_Flag = false;
 8005a06:	4b18      	ldr	r3, [pc, #96]	; (8005a68 <main+0x730>)
 8005a08:	2200      	movs	r2, #0
 8005a0a:	701a      	strb	r2, [r3, #0]

				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8005a0c:	4b17      	ldr	r3, [pc, #92]	; (8005a6c <main+0x734>)
 8005a0e:	2200      	movs	r2, #0
 8005a10:	701a      	strb	r2, [r3, #0]
 8005a12:	e138      	b.n	8005c86 <main+0x94e>
 8005a14:	20000430 	.word	0x20000430
 8005a18:	2000043b 	.word	0x2000043b
 8005a1c:	200004fc 	.word	0x200004fc
 8005a20:	200004b4 	.word	0x200004b4
 8005a24:	20000005 	.word	0x20000005
 8005a28:	2000043e 	.word	0x2000043e
 8005a2c:	20000433 	.word	0x20000433
 8005a30:	20000002 	.word	0x20000002
 8005a34:	200003f4 	.word	0x200003f4
 8005a38:	20000003 	.word	0x20000003
 8005a3c:	200004f4 	.word	0x200004f4
 8005a40:	20000500 	.word	0x20000500
 8005a44:	2000053c 	.word	0x2000053c
 8005a48:	20000010 	.word	0x20000010
 8005a4c:	0800f94c 	.word	0x0800f94c
 8005a50:	20000412 	.word	0x20000412
 8005a54:	2000033c 	.word	0x2000033c
 8005a58:	20000001 	.word	0x20000001
 8005a5c:	20000446 	.word	0x20000446
 8005a60:	20000448 	.word	0x20000448
 8005a64:	0800f964 	.word	0x0800f964
 8005a68:	2000042a 	.word	0x2000042a
 8005a6c:	20000413 	.word	0x20000413
				{
					if (RxDriverBuff[i] == DriverID)
 8005a70:	4ba5      	ldr	r3, [pc, #660]	; (8005d08 <main+0x9d0>)
 8005a72:	781b      	ldrb	r3, [r3, #0]
 8005a74:	461a      	mov	r2, r3
 8005a76:	4ba5      	ldr	r3, [pc, #660]	; (8005d0c <main+0x9d4>)
 8005a78:	5c9b      	ldrb	r3, [r3, r2]
 8005a7a:	b2db      	uxtb	r3, r3
 8005a7c:	2b01      	cmp	r3, #1
 8005a7e:	f040 80fc 	bne.w	8005c7a <main+0x942>
					{
						if (RxDriverBuff[1+i] == 3)
 8005a82:	4ba1      	ldr	r3, [pc, #644]	; (8005d08 <main+0x9d0>)
 8005a84:	781b      	ldrb	r3, [r3, #0]
 8005a86:	3301      	adds	r3, #1
 8005a88:	4aa0      	ldr	r2, [pc, #640]	; (8005d0c <main+0x9d4>)
 8005a8a:	5cd3      	ldrb	r3, [r2, r3]
 8005a8c:	b2db      	uxtb	r3, r3
 8005a8e:	2b03      	cmp	r3, #3
 8005a90:	f040 80ad 	bne.w	8005bee <main+0x8b6>
						{
							if (MotorDriver) // FDA7000
 8005a94:	4b9e      	ldr	r3, [pc, #632]	; (8005d10 <main+0x9d8>)
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d044      	beq.n	8005b26 <main+0x7ee>
							{
								SpeedValueRegion[0] = RxDriverBuff[6+i];
 8005a9c:	4b9a      	ldr	r3, [pc, #616]	; (8005d08 <main+0x9d0>)
 8005a9e:	781b      	ldrb	r3, [r3, #0]
 8005aa0:	3306      	adds	r3, #6
 8005aa2:	4a9a      	ldr	r2, [pc, #616]	; (8005d0c <main+0x9d4>)
 8005aa4:	5cd3      	ldrb	r3, [r2, r3]
 8005aa6:	b2da      	uxtb	r2, r3
 8005aa8:	4b9a      	ldr	r3, [pc, #616]	; (8005d14 <main+0x9dc>)
 8005aaa:	701a      	strb	r2, [r3, #0]
								SpeedValueRegion[1] = RxDriverBuff[5+i];
 8005aac:	4b96      	ldr	r3, [pc, #600]	; (8005d08 <main+0x9d0>)
 8005aae:	781b      	ldrb	r3, [r3, #0]
 8005ab0:	3305      	adds	r3, #5
 8005ab2:	4a96      	ldr	r2, [pc, #600]	; (8005d0c <main+0x9d4>)
 8005ab4:	5cd3      	ldrb	r3, [r2, r3]
 8005ab6:	b2da      	uxtb	r2, r3
 8005ab8:	4b96      	ldr	r3, [pc, #600]	; (8005d14 <main+0x9dc>)
 8005aba:	705a      	strb	r2, [r3, #1]
								SpeedValueRegion[2] = RxDriverBuff[4+i];
 8005abc:	4b92      	ldr	r3, [pc, #584]	; (8005d08 <main+0x9d0>)
 8005abe:	781b      	ldrb	r3, [r3, #0]
 8005ac0:	3304      	adds	r3, #4
 8005ac2:	4a92      	ldr	r2, [pc, #584]	; (8005d0c <main+0x9d4>)
 8005ac4:	5cd3      	ldrb	r3, [r2, r3]
 8005ac6:	b2da      	uxtb	r2, r3
 8005ac8:	4b92      	ldr	r3, [pc, #584]	; (8005d14 <main+0x9dc>)
 8005aca:	709a      	strb	r2, [r3, #2]
								SpeedValueRegion[3] = RxDriverBuff[3+i];
 8005acc:	4b8e      	ldr	r3, [pc, #568]	; (8005d08 <main+0x9d0>)
 8005ace:	781b      	ldrb	r3, [r3, #0]
 8005ad0:	3303      	adds	r3, #3
 8005ad2:	4a8e      	ldr	r2, [pc, #568]	; (8005d0c <main+0x9d4>)
 8005ad4:	5cd3      	ldrb	r3, [r2, r3]
 8005ad6:	b2da      	uxtb	r2, r3
 8005ad8:	4b8e      	ldr	r3, [pc, #568]	; (8005d14 <main+0x9dc>)
 8005ada:	70da      	strb	r2, [r3, #3]
 8005adc:	4b8d      	ldr	r3, [pc, #564]	; (8005d14 <main+0x9dc>)
 8005ade:	681b      	ldr	r3, [r3, #0]

								memcpy(&MotorSpeed, SpeedValueRegion, 4);
 8005ae0:	4a8d      	ldr	r2, [pc, #564]	; (8005d18 <main+0x9e0>)
 8005ae2:	6013      	str	r3, [r2, #0]
//								{
//									MotorSpeed = MotorSpeedBuff;
//								}


								MotorEncPulse = (RxDriverBuff[19+i] << 24) | (RxDriverBuff[20+i] << 16) | (RxDriverBuff[21+i] << 8) | RxDriverBuff[22+i];
 8005ae4:	4b88      	ldr	r3, [pc, #544]	; (8005d08 <main+0x9d0>)
 8005ae6:	781b      	ldrb	r3, [r3, #0]
 8005ae8:	3313      	adds	r3, #19
 8005aea:	4a88      	ldr	r2, [pc, #544]	; (8005d0c <main+0x9d4>)
 8005aec:	5cd3      	ldrb	r3, [r2, r3]
 8005aee:	b2db      	uxtb	r3, r3
 8005af0:	061a      	lsls	r2, r3, #24
 8005af2:	4b85      	ldr	r3, [pc, #532]	; (8005d08 <main+0x9d0>)
 8005af4:	781b      	ldrb	r3, [r3, #0]
 8005af6:	3314      	adds	r3, #20
 8005af8:	4984      	ldr	r1, [pc, #528]	; (8005d0c <main+0x9d4>)
 8005afa:	5ccb      	ldrb	r3, [r1, r3]
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	041b      	lsls	r3, r3, #16
 8005b00:	431a      	orrs	r2, r3
 8005b02:	4b81      	ldr	r3, [pc, #516]	; (8005d08 <main+0x9d0>)
 8005b04:	781b      	ldrb	r3, [r3, #0]
 8005b06:	3315      	adds	r3, #21
 8005b08:	4980      	ldr	r1, [pc, #512]	; (8005d0c <main+0x9d4>)
 8005b0a:	5ccb      	ldrb	r3, [r1, r3]
 8005b0c:	b2db      	uxtb	r3, r3
 8005b0e:	021b      	lsls	r3, r3, #8
 8005b10:	4313      	orrs	r3, r2
 8005b12:	4a7d      	ldr	r2, [pc, #500]	; (8005d08 <main+0x9d0>)
 8005b14:	7812      	ldrb	r2, [r2, #0]
 8005b16:	3216      	adds	r2, #22
 8005b18:	497c      	ldr	r1, [pc, #496]	; (8005d0c <main+0x9d4>)
 8005b1a:	5c8a      	ldrb	r2, [r1, r2]
 8005b1c:	b2d2      	uxtb	r2, r2
 8005b1e:	4313      	orrs	r3, r2
 8005b20:	4a7e      	ldr	r2, [pc, #504]	; (8005d1c <main+0x9e4>)
 8005b22:	6013      	str	r3, [r2, #0]
 8005b24:	e059      	b.n	8005bda <main+0x8a2>

								//PulseError = (RxDriverBuff[23+i] << 24) | (RxDriverBuff[24+i] << 16) | (RxDriverBuff[25+i] << 8) | RxDriverBuff[26+i];
							}
							else // ASDA-A3
							{
								MotorSpeedBuff = (float)((RxDriverBuff[5+i] << 24) | (RxDriverBuff[6+i] << 16) | (RxDriverBuff[3+i] << 8) | RxDriverBuff[4+i])/((float)-10.0); // Minus to Reverse
 8005b26:	4b78      	ldr	r3, [pc, #480]	; (8005d08 <main+0x9d0>)
 8005b28:	781b      	ldrb	r3, [r3, #0]
 8005b2a:	3305      	adds	r3, #5
 8005b2c:	4a77      	ldr	r2, [pc, #476]	; (8005d0c <main+0x9d4>)
 8005b2e:	5cd3      	ldrb	r3, [r2, r3]
 8005b30:	b2db      	uxtb	r3, r3
 8005b32:	061a      	lsls	r2, r3, #24
 8005b34:	4b74      	ldr	r3, [pc, #464]	; (8005d08 <main+0x9d0>)
 8005b36:	781b      	ldrb	r3, [r3, #0]
 8005b38:	3306      	adds	r3, #6
 8005b3a:	4974      	ldr	r1, [pc, #464]	; (8005d0c <main+0x9d4>)
 8005b3c:	5ccb      	ldrb	r3, [r1, r3]
 8005b3e:	b2db      	uxtb	r3, r3
 8005b40:	041b      	lsls	r3, r3, #16
 8005b42:	431a      	orrs	r2, r3
 8005b44:	4b70      	ldr	r3, [pc, #448]	; (8005d08 <main+0x9d0>)
 8005b46:	781b      	ldrb	r3, [r3, #0]
 8005b48:	3303      	adds	r3, #3
 8005b4a:	4970      	ldr	r1, [pc, #448]	; (8005d0c <main+0x9d4>)
 8005b4c:	5ccb      	ldrb	r3, [r1, r3]
 8005b4e:	b2db      	uxtb	r3, r3
 8005b50:	021b      	lsls	r3, r3, #8
 8005b52:	4313      	orrs	r3, r2
 8005b54:	4a6c      	ldr	r2, [pc, #432]	; (8005d08 <main+0x9d0>)
 8005b56:	7812      	ldrb	r2, [r2, #0]
 8005b58:	3204      	adds	r2, #4
 8005b5a:	496c      	ldr	r1, [pc, #432]	; (8005d0c <main+0x9d4>)
 8005b5c:	5c8a      	ldrb	r2, [r1, r2]
 8005b5e:	b2d2      	uxtb	r2, r2
 8005b60:	4313      	orrs	r3, r2
 8005b62:	ee07 3a90 	vmov	s15, r3
 8005b66:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005b6a:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8005b6e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8005b72:	4b6b      	ldr	r3, [pc, #428]	; (8005d20 <main+0x9e8>)
 8005b74:	edc3 7a00 	vstr	s15, [r3]

								if (fabs(MotorSpeedBuff) <= 2000)
 8005b78:	4b69      	ldr	r3, [pc, #420]	; (8005d20 <main+0x9e8>)
 8005b7a:	edd3 7a00 	vldr	s15, [r3]
 8005b7e:	eef0 7ae7 	vabs.f32	s15, s15
 8005b82:	ed9f 7a68 	vldr	s14, [pc, #416]	; 8005d24 <main+0x9ec>
 8005b86:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005b8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005b8e:	d803      	bhi.n	8005b98 <main+0x860>
								{
									MotorSpeed = MotorSpeedBuff;
 8005b90:	4b63      	ldr	r3, [pc, #396]	; (8005d20 <main+0x9e8>)
 8005b92:	681b      	ldr	r3, [r3, #0]
 8005b94:	4a60      	ldr	r2, [pc, #384]	; (8005d18 <main+0x9e0>)
 8005b96:	6013      	str	r3, [r2, #0]
								}

								MotorEncPulse = -((RxDriverBuff[9+i] << 24) | (RxDriverBuff[10+i] << 16) | (RxDriverBuff[7+i] << 8) | RxDriverBuff[8+i]); // Minus to Reverse
 8005b98:	4b5b      	ldr	r3, [pc, #364]	; (8005d08 <main+0x9d0>)
 8005b9a:	781b      	ldrb	r3, [r3, #0]
 8005b9c:	3309      	adds	r3, #9
 8005b9e:	4a5b      	ldr	r2, [pc, #364]	; (8005d0c <main+0x9d4>)
 8005ba0:	5cd3      	ldrb	r3, [r2, r3]
 8005ba2:	b2db      	uxtb	r3, r3
 8005ba4:	061a      	lsls	r2, r3, #24
 8005ba6:	4b58      	ldr	r3, [pc, #352]	; (8005d08 <main+0x9d0>)
 8005ba8:	781b      	ldrb	r3, [r3, #0]
 8005baa:	330a      	adds	r3, #10
 8005bac:	4957      	ldr	r1, [pc, #348]	; (8005d0c <main+0x9d4>)
 8005bae:	5ccb      	ldrb	r3, [r1, r3]
 8005bb0:	b2db      	uxtb	r3, r3
 8005bb2:	041b      	lsls	r3, r3, #16
 8005bb4:	431a      	orrs	r2, r3
 8005bb6:	4b54      	ldr	r3, [pc, #336]	; (8005d08 <main+0x9d0>)
 8005bb8:	781b      	ldrb	r3, [r3, #0]
 8005bba:	3307      	adds	r3, #7
 8005bbc:	4953      	ldr	r1, [pc, #332]	; (8005d0c <main+0x9d4>)
 8005bbe:	5ccb      	ldrb	r3, [r1, r3]
 8005bc0:	b2db      	uxtb	r3, r3
 8005bc2:	021b      	lsls	r3, r3, #8
 8005bc4:	4313      	orrs	r3, r2
 8005bc6:	4a50      	ldr	r2, [pc, #320]	; (8005d08 <main+0x9d0>)
 8005bc8:	7812      	ldrb	r2, [r2, #0]
 8005bca:	3208      	adds	r2, #8
 8005bcc:	494f      	ldr	r1, [pc, #316]	; (8005d0c <main+0x9d4>)
 8005bce:	5c8a      	ldrb	r2, [r1, r2]
 8005bd0:	b2d2      	uxtb	r2, r2
 8005bd2:	4313      	orrs	r3, r2
 8005bd4:	425b      	negs	r3, r3
 8005bd6:	4a51      	ldr	r2, [pc, #324]	; (8005d1c <main+0x9e4>)
 8005bd8:	6013      	str	r3, [r2, #0]
								//PulseError = ((RxDriverBuff[13+i] << 24) | (RxDriverBuff[14+i] << 16) | (RxDriverBuff[11+i] << 8) | RxDriverBuff[12+i]);

								//ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/AsdaEncoderResolution; // Calculate Object Position in m
							}

							memset (RxDriverBuff, '\0', sizeof (RxDriverBuff)); // reset buffer
 8005bda:	221e      	movs	r2, #30
 8005bdc:	2100      	movs	r1, #0
 8005bde:	484b      	ldr	r0, [pc, #300]	; (8005d0c <main+0x9d4>)
 8005be0:	f004 f9c0 	bl	8009f64 <memset>
							HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte for the next time
 8005be4:	2201      	movs	r2, #1
 8005be6:	4950      	ldr	r1, [pc, #320]	; (8005d28 <main+0x9f0>)
 8005be8:	4850      	ldr	r0, [pc, #320]	; (8005d2c <main+0x9f4>)
 8005bea:	f003 f9f8 	bl	8008fde <HAL_UART_Receive_IT>
						}
						if (RxDriverBuff[1] == 6) // Writing to a register
 8005bee:	4b47      	ldr	r3, [pc, #284]	; (8005d0c <main+0x9d4>)
 8005bf0:	785b      	ldrb	r3, [r3, #1]
 8005bf2:	b2db      	uxtb	r3, r3
 8005bf4:	2b06      	cmp	r3, #6
 8005bf6:	d140      	bne.n	8005c7a <main+0x942>
						{
							// Send to PC to check the writing result
							memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005bf8:	221e      	movs	r2, #30
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	484c      	ldr	r0, [pc, #304]	; (8005d30 <main+0x9f8>)
 8005bfe:	f004 f9b1 	bl	8009f64 <memset>
							TxPCLen = sprintf(TxPCBuff,"w%d/%d/%d/%d/%d/%d/%d/%d/%d/e",RxDriverBuff[0],RxDriverBuff[1],RxDriverBuff[2],RxDriverBuff[3],RxDriverBuff[4],RxDriverBuff[5],RxDriverBuff[6],RxDriverBuff[7],RxDriverBuff[8]);
 8005c02:	4b42      	ldr	r3, [pc, #264]	; (8005d0c <main+0x9d4>)
 8005c04:	781b      	ldrb	r3, [r3, #0]
 8005c06:	b2db      	uxtb	r3, r3
 8005c08:	469c      	mov	ip, r3
 8005c0a:	4b40      	ldr	r3, [pc, #256]	; (8005d0c <main+0x9d4>)
 8005c0c:	785b      	ldrb	r3, [r3, #1]
 8005c0e:	b2db      	uxtb	r3, r3
 8005c10:	469e      	mov	lr, r3
 8005c12:	4b3e      	ldr	r3, [pc, #248]	; (8005d0c <main+0x9d4>)
 8005c14:	789b      	ldrb	r3, [r3, #2]
 8005c16:	b2db      	uxtb	r3, r3
 8005c18:	461a      	mov	r2, r3
 8005c1a:	4b3c      	ldr	r3, [pc, #240]	; (8005d0c <main+0x9d4>)
 8005c1c:	78db      	ldrb	r3, [r3, #3]
 8005c1e:	b2db      	uxtb	r3, r3
 8005c20:	4619      	mov	r1, r3
 8005c22:	4b3a      	ldr	r3, [pc, #232]	; (8005d0c <main+0x9d4>)
 8005c24:	791b      	ldrb	r3, [r3, #4]
 8005c26:	b2db      	uxtb	r3, r3
 8005c28:	4618      	mov	r0, r3
 8005c2a:	4b38      	ldr	r3, [pc, #224]	; (8005d0c <main+0x9d4>)
 8005c2c:	795b      	ldrb	r3, [r3, #5]
 8005c2e:	b2db      	uxtb	r3, r3
 8005c30:	461c      	mov	r4, r3
 8005c32:	4b36      	ldr	r3, [pc, #216]	; (8005d0c <main+0x9d4>)
 8005c34:	799b      	ldrb	r3, [r3, #6]
 8005c36:	b2db      	uxtb	r3, r3
 8005c38:	461d      	mov	r5, r3
 8005c3a:	4b34      	ldr	r3, [pc, #208]	; (8005d0c <main+0x9d4>)
 8005c3c:	79db      	ldrb	r3, [r3, #7]
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	461e      	mov	r6, r3
 8005c42:	4b32      	ldr	r3, [pc, #200]	; (8005d0c <main+0x9d4>)
 8005c44:	7a1b      	ldrb	r3, [r3, #8]
 8005c46:	b2db      	uxtb	r3, r3
 8005c48:	9306      	str	r3, [sp, #24]
 8005c4a:	9605      	str	r6, [sp, #20]
 8005c4c:	9504      	str	r5, [sp, #16]
 8005c4e:	9403      	str	r4, [sp, #12]
 8005c50:	9002      	str	r0, [sp, #8]
 8005c52:	9101      	str	r1, [sp, #4]
 8005c54:	9200      	str	r2, [sp, #0]
 8005c56:	4673      	mov	r3, lr
 8005c58:	4662      	mov	r2, ip
 8005c5a:	4936      	ldr	r1, [pc, #216]	; (8005d34 <main+0x9fc>)
 8005c5c:	4834      	ldr	r0, [pc, #208]	; (8005d30 <main+0x9f8>)
 8005c5e:	f005 f809 	bl	800ac74 <siprintf>
 8005c62:	4603      	mov	r3, r0
 8005c64:	b2da      	uxtb	r2, r3
 8005c66:	4b34      	ldr	r3, [pc, #208]	; (8005d38 <main+0xa00>)
 8005c68:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005c6a:	4b33      	ldr	r3, [pc, #204]	; (8005d38 <main+0xa00>)
 8005c6c:	781b      	ldrb	r3, [r3, #0]
 8005c6e:	b29a      	uxth	r2, r3
 8005c70:	23c8      	movs	r3, #200	; 0xc8
 8005c72:	492f      	ldr	r1, [pc, #188]	; (8005d30 <main+0x9f8>)
 8005c74:	4831      	ldr	r0, [pc, #196]	; (8005d3c <main+0xa04>)
 8005c76:	f003 f920 	bl	8008eba <HAL_UART_Transmit>
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8005c7a:	4b23      	ldr	r3, [pc, #140]	; (8005d08 <main+0x9d0>)
 8005c7c:	781b      	ldrb	r3, [r3, #0]
 8005c7e:	3301      	adds	r3, #1
 8005c80:	b2da      	uxtb	r2, r3
 8005c82:	4b21      	ldr	r3, [pc, #132]	; (8005d08 <main+0x9d0>)
 8005c84:	701a      	strb	r2, [r3, #0]
 8005c86:	4b20      	ldr	r3, [pc, #128]	; (8005d08 <main+0x9d0>)
 8005c88:	781b      	ldrb	r3, [r3, #0]
 8005c8a:	2b1e      	cmp	r3, #30
 8005c8c:	f67f aef0 	bls.w	8005a70 <main+0x738>
						}
						//break;
					}
				}
				ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/EncoderResolution; // Calculate Object Position in m
 8005c90:	4b2b      	ldr	r3, [pc, #172]	; (8005d40 <main+0xa08>)
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	4618      	mov	r0, r3
 8005c96:	f7fa fc57 	bl	8000548 <__aeabi_f2d>
 8005c9a:	a319      	add	r3, pc, #100	; (adr r3, 8005d00 <main+0x9c8>)
 8005c9c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ca0:	f7fa fcaa 	bl	80005f8 <__aeabi_dmul>
 8005ca4:	4602      	mov	r2, r0
 8005ca6:	460b      	mov	r3, r1
 8005ca8:	4614      	mov	r4, r2
 8005caa:	461d      	mov	r5, r3
 8005cac:	4b1b      	ldr	r3, [pc, #108]	; (8005d1c <main+0x9e4>)
 8005cae:	681a      	ldr	r2, [r3, #0]
 8005cb0:	4b24      	ldr	r3, [pc, #144]	; (8005d44 <main+0xa0c>)
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	1ad3      	subs	r3, r2, r3
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f7fa fc34 	bl	8000524 <__aeabi_i2d>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	4620      	mov	r0, r4
 8005cc2:	4629      	mov	r1, r5
 8005cc4:	f7fa fc98 	bl	80005f8 <__aeabi_dmul>
 8005cc8:	4602      	mov	r2, r0
 8005cca:	460b      	mov	r3, r1
 8005ccc:	4614      	mov	r4, r2
 8005cce:	461d      	mov	r5, r3
 8005cd0:	4b1d      	ldr	r3, [pc, #116]	; (8005d48 <main+0xa10>)
 8005cd2:	881b      	ldrh	r3, [r3, #0]
 8005cd4:	4618      	mov	r0, r3
 8005cd6:	f7fa fc25 	bl	8000524 <__aeabi_i2d>
 8005cda:	4602      	mov	r2, r0
 8005cdc:	460b      	mov	r3, r1
 8005cde:	4620      	mov	r0, r4
 8005ce0:	4629      	mov	r1, r5
 8005ce2:	f7fa fdb3 	bl	800084c <__aeabi_ddiv>
 8005ce6:	4602      	mov	r2, r0
 8005ce8:	460b      	mov	r3, r1
 8005cea:	4610      	mov	r0, r2
 8005cec:	4619      	mov	r1, r3
 8005cee:	f7fa ff7b 	bl	8000be8 <__aeabi_d2f>
 8005cf2:	4603      	mov	r3, r0
 8005cf4:	4a15      	ldr	r2, [pc, #84]	; (8005d4c <main+0xa14>)
 8005cf6:	6013      	str	r3, [r2, #0]
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8005cf8:	f7ff bb56 	b.w	80053a8 <main+0x70>
 8005cfc:	f3af 8000 	nop.w
 8005d00:	51eb851f 	.word	0x51eb851f
 8005d04:	40191eb8 	.word	0x40191eb8
 8005d08:	20000413 	.word	0x20000413
 8005d0c:	200003a8 	.word	0x200003a8
 8005d10:	20000003 	.word	0x20000003
 8005d14:	20000414 	.word	0x20000414
 8005d18:	200004f4 	.word	0x200004f4
 8005d1c:	200004fc 	.word	0x200004fc
 8005d20:	200004f8 	.word	0x200004f8
 8005d24:	44fa0000 	.word	0x44fa0000
 8005d28:	200003f1 	.word	0x200003f1
 8005d2c:	200002b4 	.word	0x200002b4
 8005d30:	200003f4 	.word	0x200003f4
 8005d34:	0800f96c 	.word	0x0800f96c
 8005d38:	20000412 	.word	0x20000412
 8005d3c:	2000033c 	.word	0x2000033c
 8005d40:	20000454 	.word	0x20000454
 8005d44:	200004b4 	.word	0x200004b4
 8005d48:	2000000a 	.word	0x2000000a
 8005d4c:	2000053c 	.word	0x2000053c

08005d50 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005d50:	b580      	push	{r7, lr}
 8005d52:	b094      	sub	sp, #80	; 0x50
 8005d54:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8005d56:	f107 0320 	add.w	r3, r7, #32
 8005d5a:	2230      	movs	r2, #48	; 0x30
 8005d5c:	2100      	movs	r1, #0
 8005d5e:	4618      	mov	r0, r3
 8005d60:	f004 f900 	bl	8009f64 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8005d64:	f107 030c 	add.w	r3, r7, #12
 8005d68:	2200      	movs	r2, #0
 8005d6a:	601a      	str	r2, [r3, #0]
 8005d6c:	605a      	str	r2, [r3, #4]
 8005d6e:	609a      	str	r2, [r3, #8]
 8005d70:	60da      	str	r2, [r3, #12]
 8005d72:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8005d74:	2300      	movs	r3, #0
 8005d76:	60bb      	str	r3, [r7, #8]
 8005d78:	4b28      	ldr	r3, [pc, #160]	; (8005e1c <SystemClock_Config+0xcc>)
 8005d7a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7c:	4a27      	ldr	r2, [pc, #156]	; (8005e1c <SystemClock_Config+0xcc>)
 8005d7e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005d82:	6413      	str	r3, [r2, #64]	; 0x40
 8005d84:	4b25      	ldr	r3, [pc, #148]	; (8005e1c <SystemClock_Config+0xcc>)
 8005d86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d88:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005d8c:	60bb      	str	r3, [r7, #8]
 8005d8e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005d90:	2300      	movs	r3, #0
 8005d92:	607b      	str	r3, [r7, #4]
 8005d94:	4b22      	ldr	r3, [pc, #136]	; (8005e20 <SystemClock_Config+0xd0>)
 8005d96:	681b      	ldr	r3, [r3, #0]
 8005d98:	4a21      	ldr	r2, [pc, #132]	; (8005e20 <SystemClock_Config+0xd0>)
 8005d9a:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005d9e:	6013      	str	r3, [r2, #0]
 8005da0:	4b1f      	ldr	r3, [pc, #124]	; (8005e20 <SystemClock_Config+0xd0>)
 8005da2:	681b      	ldr	r3, [r3, #0]
 8005da4:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005da8:	607b      	str	r3, [r7, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005dac:	2301      	movs	r3, #1
 8005dae:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005db0:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8005db4:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8005db6:	2302      	movs	r3, #2
 8005db8:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005dba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005dbe:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005dc0:	230c      	movs	r3, #12
 8005dc2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 8005dc4:	f44f 73a8 	mov.w	r3, #336	; 0x150
 8005dc8:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8005dca:	2302      	movs	r3, #2
 8005dcc:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8005dce:	2304      	movs	r3, #4
 8005dd0:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8005dd2:	f107 0320 	add.w	r3, r7, #32
 8005dd6:	4618      	mov	r0, r3
 8005dd8:	f001 fcfa 	bl	80077d0 <HAL_RCC_OscConfig>
 8005ddc:	4603      	mov	r3, r0
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	d001      	beq.n	8005de6 <SystemClock_Config+0x96>
  {
    Error_Handler();
 8005de2:	f000 faff 	bl	80063e4 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8005de6:	230f      	movs	r3, #15
 8005de8:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005dea:	2302      	movs	r3, #2
 8005dec:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005dee:	2300      	movs	r3, #0
 8005df0:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8005df2:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005df6:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8005df8:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005dfc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005dfe:	f107 030c 	add.w	r3, r7, #12
 8005e02:	2105      	movs	r1, #5
 8005e04:	4618      	mov	r0, r3
 8005e06:	f001 ff5b 	bl	8007cc0 <HAL_RCC_ClockConfig>
 8005e0a:	4603      	mov	r3, r0
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d001      	beq.n	8005e14 <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005e10:	f000 fae8 	bl	80063e4 <Error_Handler>
  }
}
 8005e14:	bf00      	nop
 8005e16:	3750      	adds	r7, #80	; 0x50
 8005e18:	46bd      	mov	sp, r7
 8005e1a:	bd80      	pop	{r7, pc}
 8005e1c:	40023800 	.word	0x40023800
 8005e20:	40007000 	.word	0x40007000

08005e24 <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 8005e24:	b580      	push	{r7, lr}
 8005e26:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005e28:	2200      	movs	r2, #0
 8005e2a:	2100      	movs	r1, #0
 8005e2c:	2047      	movs	r0, #71	; 0x47
 8005e2e:	f000 ff36 	bl	8006c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 8005e32:	2047      	movs	r0, #71	; 0x47
 8005e34:	f000 ff4f 	bl	8006cd6 <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005e38:	2200      	movs	r2, #0
 8005e3a:	2101      	movs	r1, #1
 8005e3c:	2027      	movs	r0, #39	; 0x27
 8005e3e:	f000 ff2e 	bl	8006c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 8005e42:	2027      	movs	r0, #39	; 0x27
 8005e44:	f000 ff47 	bl	8006cd6 <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8005e48:	2200      	movs	r2, #0
 8005e4a:	2102      	movs	r1, #2
 8005e4c:	201d      	movs	r0, #29
 8005e4e:	f000 ff26 	bl	8006c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8005e52:	201d      	movs	r0, #29
 8005e54:	f000 ff3f 	bl	8006cd6 <HAL_NVIC_EnableIRQ>
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 4, 0);
 8005e58:	2200      	movs	r2, #0
 8005e5a:	2104      	movs	r1, #4
 8005e5c:	2035      	movs	r0, #53	; 0x35
 8005e5e:	f000 ff1e 	bl	8006c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 8005e62:	2035      	movs	r0, #53	; 0x35
 8005e64:	f000 ff37 	bl	8006cd6 <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8005e68:	2200      	movs	r2, #0
 8005e6a:	2103      	movs	r1, #3
 8005e6c:	201c      	movs	r0, #28
 8005e6e:	f000 ff16 	bl	8006c9e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8005e72:	201c      	movs	r0, #28
 8005e74:	f000 ff2f 	bl	8006cd6 <HAL_NVIC_EnableIRQ>
}
 8005e78:	bf00      	nop
 8005e7a:	bd80      	pop	{r7, pc}

08005e7c <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005e7c:	b580      	push	{r7, lr}
 8005e7e:	b08a      	sub	sp, #40	; 0x28
 8005e80:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005e82:	f107 0318 	add.w	r3, r7, #24
 8005e86:	2200      	movs	r2, #0
 8005e88:	601a      	str	r2, [r3, #0]
 8005e8a:	605a      	str	r2, [r3, #4]
 8005e8c:	609a      	str	r2, [r3, #8]
 8005e8e:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005e90:	f107 0310 	add.w	r3, r7, #16
 8005e94:	2200      	movs	r2, #0
 8005e96:	601a      	str	r2, [r3, #0]
 8005e98:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005e9a:	463b      	mov	r3, r7
 8005e9c:	2200      	movs	r2, #0
 8005e9e:	601a      	str	r2, [r3, #0]
 8005ea0:	605a      	str	r2, [r3, #4]
 8005ea2:	609a      	str	r2, [r3, #8]
 8005ea4:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8005ea6:	4b31      	ldr	r3, [pc, #196]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005ea8:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005eac:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8005eae:	4b2f      	ldr	r3, [pc, #188]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005eb0:	220a      	movs	r2, #10
 8005eb2:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005eb4:	4b2d      	ldr	r3, [pc, #180]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005eb6:	2200      	movs	r2, #0
 8005eb8:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8005eba:	4b2c      	ldr	r3, [pc, #176]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005ebc:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8005ec0:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005ec2:	4b2a      	ldr	r3, [pc, #168]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005ec4:	2200      	movs	r2, #0
 8005ec6:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 8005ec8:	4b28      	ldr	r3, [pc, #160]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005eca:	2280      	movs	r2, #128	; 0x80
 8005ecc:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8005ece:	4827      	ldr	r0, [pc, #156]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005ed0:	f002 f8d6 	bl	8008080 <HAL_TIM_Base_Init>
 8005ed4:	4603      	mov	r3, r0
 8005ed6:	2b00      	cmp	r3, #0
 8005ed8:	d001      	beq.n	8005ede <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 8005eda:	f000 fa83 	bl	80063e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005ede:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005ee2:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8005ee4:	f107 0318 	add.w	r3, r7, #24
 8005ee8:	4619      	mov	r1, r3
 8005eea:	4820      	ldr	r0, [pc, #128]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005eec:	f002 fbb4 	bl	8008658 <HAL_TIM_ConfigClockSource>
 8005ef0:	4603      	mov	r3, r0
 8005ef2:	2b00      	cmp	r3, #0
 8005ef4:	d001      	beq.n	8005efa <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 8005ef6:	f000 fa75 	bl	80063e4 <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005efa:	481c      	ldr	r0, [pc, #112]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005efc:	f002 f9af 	bl	800825e <HAL_TIM_IC_Init>
 8005f00:	4603      	mov	r3, r0
 8005f02:	2b00      	cmp	r3, #0
 8005f04:	d001      	beq.n	8005f0a <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 8005f06:	f000 fa6d 	bl	80063e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005f0a:	2320      	movs	r3, #32
 8005f0c:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8005f12:	f107 0310 	add.w	r3, r7, #16
 8005f16:	4619      	mov	r1, r3
 8005f18:	4814      	ldr	r0, [pc, #80]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005f1a:	f002 fef1 	bl	8008d00 <HAL_TIMEx_MasterConfigSynchronization>
 8005f1e:	4603      	mov	r3, r0
 8005f20:	2b00      	cmp	r3, #0
 8005f22:	d001      	beq.n	8005f28 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 8005f24:	f000 fa5e 	bl	80063e4 <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005f28:	2300      	movs	r3, #0
 8005f2a:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005f2c:	2301      	movs	r3, #1
 8005f2e:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005f30:	2300      	movs	r3, #0
 8005f32:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 8005f34:	2300      	movs	r3, #0
 8005f36:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005f38:	463b      	mov	r3, r7
 8005f3a:	2200      	movs	r2, #0
 8005f3c:	4619      	mov	r1, r3
 8005f3e:	480b      	ldr	r0, [pc, #44]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005f40:	f002 faee 	bl	8008520 <HAL_TIM_IC_ConfigChannel>
 8005f44:	4603      	mov	r3, r0
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d001      	beq.n	8005f4e <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8005f4a:	f000 fa4b 	bl	80063e4 <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005f4e:	463b      	mov	r3, r7
 8005f50:	2204      	movs	r2, #4
 8005f52:	4619      	mov	r1, r3
 8005f54:	4805      	ldr	r0, [pc, #20]	; (8005f6c <MX_TIM2_Init+0xf0>)
 8005f56:	f002 fae3 	bl	8008520 <HAL_TIM_IC_ConfigChannel>
 8005f5a:	4603      	mov	r3, r0
 8005f5c:	2b00      	cmp	r3, #0
 8005f5e:	d001      	beq.n	8005f64 <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8005f60:	f000 fa40 	bl	80063e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 8005f64:	bf00      	nop
 8005f66:	3728      	adds	r7, #40	; 0x28
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}
 8005f6c:	20000224 	.word	0x20000224

08005f70 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005f70:	b580      	push	{r7, lr}
 8005f72:	b086      	sub	sp, #24
 8005f74:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8005f76:	f107 0308 	add.w	r3, r7, #8
 8005f7a:	2200      	movs	r2, #0
 8005f7c:	601a      	str	r2, [r3, #0]
 8005f7e:	605a      	str	r2, [r3, #4]
 8005f80:	609a      	str	r2, [r3, #8]
 8005f82:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005f84:	463b      	mov	r3, r7
 8005f86:	2200      	movs	r2, #0
 8005f88:	601a      	str	r2, [r3, #0]
 8005f8a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005f8c:	4b1c      	ldr	r3, [pc, #112]	; (8006000 <MX_TIM3_Init+0x90>)
 8005f8e:	4a1d      	ldr	r2, [pc, #116]	; (8006004 <MX_TIM3_Init+0x94>)
 8005f90:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 8005f92:	4b1b      	ldr	r3, [pc, #108]	; (8006000 <MX_TIM3_Init+0x90>)
 8005f94:	2201      	movs	r2, #1
 8005f96:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005f98:	4b19      	ldr	r3, [pc, #100]	; (8006000 <MX_TIM3_Init+0x90>)
 8005f9a:	2200      	movs	r2, #0
 8005f9c:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168;
 8005f9e:	4b18      	ldr	r3, [pc, #96]	; (8006000 <MX_TIM3_Init+0x90>)
 8005fa0:	22a8      	movs	r2, #168	; 0xa8
 8005fa2:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8005fa4:	4b16      	ldr	r3, [pc, #88]	; (8006000 <MX_TIM3_Init+0x90>)
 8005fa6:	2200      	movs	r2, #0
 8005fa8:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005faa:	4b15      	ldr	r3, [pc, #84]	; (8006000 <MX_TIM3_Init+0x90>)
 8005fac:	2200      	movs	r2, #0
 8005fae:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005fb0:	4813      	ldr	r0, [pc, #76]	; (8006000 <MX_TIM3_Init+0x90>)
 8005fb2:	f002 f865 	bl	8008080 <HAL_TIM_Base_Init>
 8005fb6:	4603      	mov	r3, r0
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d001      	beq.n	8005fc0 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8005fbc:	f000 fa12 	bl	80063e4 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005fc0:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005fc4:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8005fc6:	f107 0308 	add.w	r3, r7, #8
 8005fca:	4619      	mov	r1, r3
 8005fcc:	480c      	ldr	r0, [pc, #48]	; (8006000 <MX_TIM3_Init+0x90>)
 8005fce:	f002 fb43 	bl	8008658 <HAL_TIM_ConfigClockSource>
 8005fd2:	4603      	mov	r3, r0
 8005fd4:	2b00      	cmp	r3, #0
 8005fd6:	d001      	beq.n	8005fdc <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 8005fd8:	f000 fa04 	bl	80063e4 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8005fdc:	2300      	movs	r3, #0
 8005fde:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005fe0:	2300      	movs	r3, #0
 8005fe2:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8005fe4:	463b      	mov	r3, r7
 8005fe6:	4619      	mov	r1, r3
 8005fe8:	4805      	ldr	r0, [pc, #20]	; (8006000 <MX_TIM3_Init+0x90>)
 8005fea:	f002 fe89 	bl	8008d00 <HAL_TIMEx_MasterConfigSynchronization>
 8005fee:	4603      	mov	r3, r0
 8005ff0:	2b00      	cmp	r3, #0
 8005ff2:	d001      	beq.n	8005ff8 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 8005ff4:	f000 f9f6 	bl	80063e4 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005ff8:	bf00      	nop
 8005ffa:	3718      	adds	r7, #24
 8005ffc:	46bd      	mov	sp, r7
 8005ffe:	bd80      	pop	{r7, pc}
 8006000:	2000026c 	.word	0x2000026c
 8006004:	40000400 	.word	0x40000400

08006008 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8006008:	b580      	push	{r7, lr}
 800600a:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 800600c:	4b11      	ldr	r3, [pc, #68]	; (8006054 <MX_UART5_Init+0x4c>)
 800600e:	4a12      	ldr	r2, [pc, #72]	; (8006058 <MX_UART5_Init+0x50>)
 8006010:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 8006012:	4b10      	ldr	r3, [pc, #64]	; (8006054 <MX_UART5_Init+0x4c>)
 8006014:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8006018:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 800601a:	4b0e      	ldr	r3, [pc, #56]	; (8006054 <MX_UART5_Init+0x4c>)
 800601c:	2200      	movs	r2, #0
 800601e:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8006020:	4b0c      	ldr	r3, [pc, #48]	; (8006054 <MX_UART5_Init+0x4c>)
 8006022:	2200      	movs	r2, #0
 8006024:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 8006026:	4b0b      	ldr	r3, [pc, #44]	; (8006054 <MX_UART5_Init+0x4c>)
 8006028:	2200      	movs	r2, #0
 800602a:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 800602c:	4b09      	ldr	r3, [pc, #36]	; (8006054 <MX_UART5_Init+0x4c>)
 800602e:	220c      	movs	r2, #12
 8006030:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006032:	4b08      	ldr	r3, [pc, #32]	; (8006054 <MX_UART5_Init+0x4c>)
 8006034:	2200      	movs	r2, #0
 8006036:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8006038:	4b06      	ldr	r3, [pc, #24]	; (8006054 <MX_UART5_Init+0x4c>)
 800603a:	2200      	movs	r2, #0
 800603c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 800603e:	4805      	ldr	r0, [pc, #20]	; (8006054 <MX_UART5_Init+0x4c>)
 8006040:	f002 feee 	bl	8008e20 <HAL_UART_Init>
 8006044:	4603      	mov	r3, r0
 8006046:	2b00      	cmp	r3, #0
 8006048:	d001      	beq.n	800604e <MX_UART5_Init+0x46>
  {
    Error_Handler();
 800604a:	f000 f9cb 	bl	80063e4 <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 800604e:	bf00      	nop
 8006050:	bd80      	pop	{r7, pc}
 8006052:	bf00      	nop
 8006054:	200002b4 	.word	0x200002b4
 8006058:	40005000 	.word	0x40005000

0800605c <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 800605c:	b580      	push	{r7, lr}
 800605e:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8006060:	4b11      	ldr	r3, [pc, #68]	; (80060a8 <MX_USART3_UART_Init+0x4c>)
 8006062:	4a12      	ldr	r2, [pc, #72]	; (80060ac <MX_USART3_UART_Init+0x50>)
 8006064:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 8006066:	4b10      	ldr	r3, [pc, #64]	; (80060a8 <MX_USART3_UART_Init+0x4c>)
 8006068:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 800606c:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 800606e:	4b0e      	ldr	r3, [pc, #56]	; (80060a8 <MX_USART3_UART_Init+0x4c>)
 8006070:	2200      	movs	r2, #0
 8006072:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 8006074:	4b0c      	ldr	r3, [pc, #48]	; (80060a8 <MX_USART3_UART_Init+0x4c>)
 8006076:	2200      	movs	r2, #0
 8006078:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 800607a:	4b0b      	ldr	r3, [pc, #44]	; (80060a8 <MX_USART3_UART_Init+0x4c>)
 800607c:	2200      	movs	r2, #0
 800607e:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8006080:	4b09      	ldr	r3, [pc, #36]	; (80060a8 <MX_USART3_UART_Init+0x4c>)
 8006082:	220c      	movs	r2, #12
 8006084:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8006086:	4b08      	ldr	r3, [pc, #32]	; (80060a8 <MX_USART3_UART_Init+0x4c>)
 8006088:	2200      	movs	r2, #0
 800608a:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 800608c:	4b06      	ldr	r3, [pc, #24]	; (80060a8 <MX_USART3_UART_Init+0x4c>)
 800608e:	2200      	movs	r2, #0
 8006090:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 8006092:	4805      	ldr	r0, [pc, #20]	; (80060a8 <MX_USART3_UART_Init+0x4c>)
 8006094:	f002 fec4 	bl	8008e20 <HAL_UART_Init>
 8006098:	4603      	mov	r3, r0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d001      	beq.n	80060a2 <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 800609e:	f000 f9a1 	bl	80063e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80060a2:	bf00      	nop
 80060a4:	bd80      	pop	{r7, pc}
 80060a6:	bf00      	nop
 80060a8:	200002f8 	.word	0x200002f8
 80060ac:	40004800 	.word	0x40004800

080060b0 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80060b0:	b580      	push	{r7, lr}
 80060b2:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80060b4:	4b11      	ldr	r3, [pc, #68]	; (80060fc <MX_USART6_UART_Init+0x4c>)
 80060b6:	4a12      	ldr	r2, [pc, #72]	; (8006100 <MX_USART6_UART_Init+0x50>)
 80060b8:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 80060ba:	4b10      	ldr	r3, [pc, #64]	; (80060fc <MX_USART6_UART_Init+0x4c>)
 80060bc:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80060c0:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80060c2:	4b0e      	ldr	r3, [pc, #56]	; (80060fc <MX_USART6_UART_Init+0x4c>)
 80060c4:	2200      	movs	r2, #0
 80060c6:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80060c8:	4b0c      	ldr	r3, [pc, #48]	; (80060fc <MX_USART6_UART_Init+0x4c>)
 80060ca:	2200      	movs	r2, #0
 80060cc:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80060ce:	4b0b      	ldr	r3, [pc, #44]	; (80060fc <MX_USART6_UART_Init+0x4c>)
 80060d0:	2200      	movs	r2, #0
 80060d2:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80060d4:	4b09      	ldr	r3, [pc, #36]	; (80060fc <MX_USART6_UART_Init+0x4c>)
 80060d6:	220c      	movs	r2, #12
 80060d8:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80060da:	4b08      	ldr	r3, [pc, #32]	; (80060fc <MX_USART6_UART_Init+0x4c>)
 80060dc:	2200      	movs	r2, #0
 80060de:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80060e0:	4b06      	ldr	r3, [pc, #24]	; (80060fc <MX_USART6_UART_Init+0x4c>)
 80060e2:	2200      	movs	r2, #0
 80060e4:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80060e6:	4805      	ldr	r0, [pc, #20]	; (80060fc <MX_USART6_UART_Init+0x4c>)
 80060e8:	f002 fe9a 	bl	8008e20 <HAL_UART_Init>
 80060ec:	4603      	mov	r3, r0
 80060ee:	2b00      	cmp	r3, #0
 80060f0:	d001      	beq.n	80060f6 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80060f2:	f000 f977 	bl	80063e4 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80060f6:	bf00      	nop
 80060f8:	bd80      	pop	{r7, pc}
 80060fa:	bf00      	nop
 80060fc:	2000033c 	.word	0x2000033c
 8006100:	40011400 	.word	0x40011400

08006104 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8006104:	b580      	push	{r7, lr}
 8006106:	b08c      	sub	sp, #48	; 0x30
 8006108:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800610a:	f107 031c 	add.w	r3, r7, #28
 800610e:	2200      	movs	r2, #0
 8006110:	601a      	str	r2, [r3, #0]
 8006112:	605a      	str	r2, [r3, #4]
 8006114:	609a      	str	r2, [r3, #8]
 8006116:	60da      	str	r2, [r3, #12]
 8006118:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800611a:	2300      	movs	r3, #0
 800611c:	61bb      	str	r3, [r7, #24]
 800611e:	4bab      	ldr	r3, [pc, #684]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006120:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006122:	4aaa      	ldr	r2, [pc, #680]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006124:	f043 0310 	orr.w	r3, r3, #16
 8006128:	6313      	str	r3, [r2, #48]	; 0x30
 800612a:	4ba8      	ldr	r3, [pc, #672]	; (80063cc <MX_GPIO_Init+0x2c8>)
 800612c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800612e:	f003 0310 	and.w	r3, r3, #16
 8006132:	61bb      	str	r3, [r7, #24]
 8006134:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006136:	2300      	movs	r3, #0
 8006138:	617b      	str	r3, [r7, #20]
 800613a:	4ba4      	ldr	r3, [pc, #656]	; (80063cc <MX_GPIO_Init+0x2c8>)
 800613c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800613e:	4aa3      	ldr	r2, [pc, #652]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006140:	f043 0304 	orr.w	r3, r3, #4
 8006144:	6313      	str	r3, [r2, #48]	; 0x30
 8006146:	4ba1      	ldr	r3, [pc, #644]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006148:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800614a:	f003 0304 	and.w	r3, r3, #4
 800614e:	617b      	str	r3, [r7, #20]
 8006150:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8006152:	2300      	movs	r3, #0
 8006154:	613b      	str	r3, [r7, #16]
 8006156:	4b9d      	ldr	r3, [pc, #628]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006158:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800615a:	4a9c      	ldr	r2, [pc, #624]	; (80063cc <MX_GPIO_Init+0x2c8>)
 800615c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006160:	6313      	str	r3, [r2, #48]	; 0x30
 8006162:	4b9a      	ldr	r3, [pc, #616]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006164:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006166:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800616a:	613b      	str	r3, [r7, #16]
 800616c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800616e:	2300      	movs	r3, #0
 8006170:	60fb      	str	r3, [r7, #12]
 8006172:	4b96      	ldr	r3, [pc, #600]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006174:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006176:	4a95      	ldr	r2, [pc, #596]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006178:	f043 0301 	orr.w	r3, r3, #1
 800617c:	6313      	str	r3, [r2, #48]	; 0x30
 800617e:	4b93      	ldr	r3, [pc, #588]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006180:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006182:	f003 0301 	and.w	r3, r3, #1
 8006186:	60fb      	str	r3, [r7, #12]
 8006188:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800618a:	2300      	movs	r3, #0
 800618c:	60bb      	str	r3, [r7, #8]
 800618e:	4b8f      	ldr	r3, [pc, #572]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006190:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006192:	4a8e      	ldr	r2, [pc, #568]	; (80063cc <MX_GPIO_Init+0x2c8>)
 8006194:	f043 0302 	orr.w	r3, r3, #2
 8006198:	6313      	str	r3, [r2, #48]	; 0x30
 800619a:	4b8c      	ldr	r3, [pc, #560]	; (80063cc <MX_GPIO_Init+0x2c8>)
 800619c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800619e:	f003 0302 	and.w	r3, r3, #2
 80061a2:	60bb      	str	r3, [r7, #8]
 80061a4:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80061a6:	2300      	movs	r3, #0
 80061a8:	607b      	str	r3, [r7, #4]
 80061aa:	4b88      	ldr	r3, [pc, #544]	; (80063cc <MX_GPIO_Init+0x2c8>)
 80061ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ae:	4a87      	ldr	r2, [pc, #540]	; (80063cc <MX_GPIO_Init+0x2c8>)
 80061b0:	f043 0308 	orr.w	r3, r3, #8
 80061b4:	6313      	str	r3, [r2, #48]	; 0x30
 80061b6:	4b85      	ldr	r3, [pc, #532]	; (80063cc <MX_GPIO_Init+0x2c8>)
 80061b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80061ba:	f003 0308 	and.w	r3, r3, #8
 80061be:	607b      	str	r3, [r7, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE4_ZIGBEE_PA_EN_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin|Speed1_not_PE13_41_Pin
 80061c2:	2200      	movs	r2, #0
 80061c4:	f24a 3113 	movw	r1, #41747	; 0xa313
 80061c8:	4881      	ldr	r0, [pc, #516]	; (80063d0 <MX_GPIO_Init+0x2cc>)
 80061ca:	f001 facd 	bl	8007768 <HAL_GPIO_WritePin>
                          |PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_ZIGBEE_nRST_Pin|PC8_PR_Pin|PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin, GPIO_PIN_RESET);
 80061ce:	2200      	movs	r2, #0
 80061d0:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80061d4:	487f      	ldr	r0, [pc, #508]	; (80063d4 <MX_GPIO_Init+0x2d0>)
 80061d6:	f001 fac7 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 80061da:	2200      	movs	r2, #0
 80061dc:	f649 5108 	movw	r1, #40200	; 0x9d08
 80061e0:	487d      	ldr	r0, [pc, #500]	; (80063d8 <MX_GPIO_Init+0x2d4>)
 80061e2:	f001 fac1 	bl	8007768 <HAL_GPIO_WritePin>
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin, GPIO_PIN_SET);
 80061e6:	2201      	movs	r2, #1
 80061e8:	2130      	movs	r1, #48	; 0x30
 80061ea:	487a      	ldr	r0, [pc, #488]	; (80063d4 <MX_GPIO_Init+0x2d0>)
 80061ec:	f001 fabc 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EStop_Not_PB0_17_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin|PB14_POS_CMD_OPC_EN_Pin
 80061f0:	2200      	movs	r2, #0
 80061f2:	f246 0165 	movw	r1, #24677	; 0x6065
 80061f6:	4879      	ldr	r0, [pc, #484]	; (80063dc <MX_GPIO_Init+0x2d8>)
 80061f8:	f001 fab6 	bl	8007768 <HAL_GPIO_WritePin>
                          |PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ArlarmRST_PB1_42_Pin|PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);
 80061fc:	2201      	movs	r2, #1
 80061fe:	f248 0102 	movw	r1, #32770	; 0x8002
 8006202:	4876      	ldr	r0, [pc, #472]	; (80063dc <MX_GPIO_Init+0x2d8>)
 8006204:	f001 fab0 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Speed2_Not_PE7_15_Pin|Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin
 8006208:	2201      	movs	r2, #1
 800620a:	f44f 41b9 	mov.w	r1, #23680	; 0x5c80
 800620e:	4870      	ldr	r0, [pc, #448]	; (80063d0 <MX_GPIO_Init+0x2cc>)
 8006210:	f001 faaa 	bl	8007768 <HAL_GPIO_WritePin>
                          |CWLIM_Not_PE14_13_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD10_ESP32_EN_GPIO_Port, PD10_ESP32_EN_Pin, GPIO_PIN_SET);
 8006214:	2201      	movs	r2, #1
 8006216:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800621a:	4871      	ldr	r0, [pc, #452]	; (80063e0 <MX_GPIO_Init+0x2dc>)
 800621c:	f001 faa4 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin, GPIO_PIN_RESET);
 8006220:	2200      	movs	r2, #0
 8006222:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8006226:	486e      	ldr	r0, [pc, #440]	; (80063e0 <MX_GPIO_Init+0x2dc>)
 8006228:	f001 fa9e 	bl	8007768 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN1_22_RDY_Pin CN1_21_SPDOUT_TRQOUT_Pin PE5_BLE_GPIO_Pin CN1_48_BRAKE_Pin */
  GPIO_InitStruct.Pin = CN1_22_RDY_Pin|CN1_21_SPDOUT_TRQOUT_Pin|PE5_BLE_GPIO_Pin|CN1_48_BRAKE_Pin;
 800622c:	236c      	movs	r3, #108	; 0x6c
 800622e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006230:	2300      	movs	r3, #0
 8006232:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006234:	2300      	movs	r3, #0
 8006236:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006238:	f107 031c 	add.w	r3, r7, #28
 800623c:	4619      	mov	r1, r3
 800623e:	4864      	ldr	r0, [pc, #400]	; (80063d0 <MX_GPIO_Init+0x2cc>)
 8006240:	f001 f8de 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4_ZIGBEE_PA_EN_Pin Speed2_Not_PE7_15_Pin Type_Not_PE8_40_Pin PE9_TIM1_CH1_PFIN_Pin
                           Dir_Not_PE10_14_Pin SPDLIM_Not_PE11_38_Pin CCWLIM_Not_PE12_39_Pin Speed1_not_PE13_41_Pin
                           CWLIM_Not_PE14_13_Pin PE15_RELAY1_Pin PE0_485_MCU_DRV_DIR_Pin PE1_ZIGBEE_EN_Pin */
  GPIO_InitStruct.Pin = PE4_ZIGBEE_PA_EN_Pin|Speed2_Not_PE7_15_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin
 8006244:	f64f 7393 	movw	r3, #65427	; 0xff93
 8006248:	61fb      	str	r3, [r7, #28]
                          |Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin|Speed1_not_PE13_41_Pin
                          |CWLIM_Not_PE14_13_Pin|PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800624a:	2301      	movs	r3, #1
 800624c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800624e:	2300      	movs	r3, #0
 8006250:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006252:	2300      	movs	r3, #0
 8006254:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8006256:	f107 031c 	add.w	r3, r7, #28
 800625a:	4619      	mov	r1, r3
 800625c:	485c      	ldr	r0, [pc, #368]	; (80063d0 <MX_GPIO_Init+0x2cc>)
 800625e:	f001 f8cf 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_USER_BT_MID_Pin CN1_46_ALARM_Pin CN1_47_INSPD_INPOS_Pin CN1_45_NCWOUT_NTQOUT_Pin */
  GPIO_InitStruct.Pin = PC13_USER_BT_MID_Pin|CN1_46_ALARM_Pin|CN1_47_INSPD_INPOS_Pin|CN1_45_NCWOUT_NTQOUT_Pin;
 8006262:	f242 0307 	movw	r3, #8199	; 0x2007
 8006266:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006268:	2300      	movs	r3, #0
 800626a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800626c:	2300      	movs	r3, #0
 800626e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006270:	f107 031c 	add.w	r3, r7, #28
 8006274:	4619      	mov	r1, r3
 8006276:	4857      	ldr	r0, [pc, #348]	; (80063d4 <MX_GPIO_Init+0x2d0>)
 8006278:	f001 f8c2 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_ZIGBEE_nRST_Pin SerVoReset_PC4_18_Pin Stop_PC5_43_Pin PC8_PR_Pin
                           PC9_ZIGBEE_HGM_EN_Pin PC10_SPI3_SCK_SPARE_Pin */
  GPIO_InitStruct.Pin = PC3_ZIGBEE_nRST_Pin|SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin|PC8_PR_Pin
 800627c:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8006280:	61fb      	str	r3, [r7, #28]
                          |PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006282:	2301      	movs	r3, #1
 8006284:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006286:	2300      	movs	r3, #0
 8006288:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800628a:	2300      	movs	r3, #0
 800628c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800628e:	f107 031c 	add.w	r3, r7, #28
 8006292:	4619      	mov	r1, r3
 8006294:	484f      	ldr	r0, [pc, #316]	; (80063d4 <MX_GPIO_Init+0x2d0>)
 8006296:	f001 f8b3 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_UART4_TX_ESP32_RX_Pin */
  GPIO_InitStruct.Pin = PA0_UART4_TX_ESP32_RX_Pin;
 800629a:	2301      	movs	r3, #1
 800629c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800629e:	2302      	movs	r3, #2
 80062a0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062a2:	2300      	movs	r3, #0
 80062a4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80062a6:	2303      	movs	r3, #3
 80062a8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 80062aa:	2308      	movs	r3, #8
 80062ac:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PA0_UART4_TX_ESP32_RX_GPIO_Port, &GPIO_InitStruct);
 80062ae:	f107 031c 	add.w	r3, r7, #28
 80062b2:	4619      	mov	r1, r3
 80062b4:	4848      	ldr	r0, [pc, #288]	; (80063d8 <MX_GPIO_Init+0x2d4>)
 80062b6:	f001 f8a3 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_USER_BT_UP_Pin CN1_20_PCWOUT_PTQOUT_Pin CN1_23_TYPEOUT_Pin PA9_LINE_RECV_SELFTEST_Pin */
  GPIO_InitStruct.Pin = PA2_USER_BT_UP_Pin|CN1_20_PCWOUT_PTQOUT_Pin|CN1_23_TYPEOUT_Pin|PA9_LINE_RECV_SELFTEST_Pin;
 80062ba:	f44f 7325 	mov.w	r3, #660	; 0x294
 80062be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 80062c0:	2300      	movs	r3, #0
 80062c2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062c4:	2300      	movs	r3, #0
 80062c6:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062c8:	f107 031c 	add.w	r3, r7, #28
 80062cc:	4619      	mov	r1, r3
 80062ce:	4842      	ldr	r0, [pc, #264]	; (80063d8 <MX_GPIO_Init+0x2d4>)
 80062d0:	f001 f896 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_LCD_RST_Pin PA8_LINE_DRV_SELFTEST2_Pin PA10_LINE_DRV_SELFTEST1_Pin PA11_ENC_RECEIV_EN_Pin
                           PA12_LINE_DRV_EN_Pin PA15_SPI3_NSS_SPARE_Pin */
  GPIO_InitStruct.Pin = PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 80062d4:	f649 5308 	movw	r3, #40200	; 0x9d08
 80062d8:	61fb      	str	r3, [r7, #28]
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062da:	2301      	movs	r3, #1
 80062dc:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062de:	2300      	movs	r3, #0
 80062e0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80062e2:	2300      	movs	r3, #0
 80062e4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80062e6:	f107 031c 	add.w	r3, r7, #28
 80062ea:	4619      	mov	r1, r3
 80062ec:	483a      	ldr	r0, [pc, #232]	; (80063d8 <MX_GPIO_Init+0x2d4>)
 80062ee:	f001 f887 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : EStop_Not_PB0_17_Pin ArlarmRST_PB1_42_Pin Tor1_PB2_16_Pin PB13_Output_JP7_Pin
                           PB14_POS_CMD_OPC_EN_Pin PB15_485_MCU_PC_DIR_Pin PB5_SPI3_MOSI_SPARE_Pin PB6_RELAY2_Pin */
  GPIO_InitStruct.Pin = EStop_Not_PB0_17_Pin|ArlarmRST_PB1_42_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin
 80062f2:	f24e 0367 	movw	r3, #57447	; 0xe067
 80062f6:	61fb      	str	r3, [r7, #28]
                          |PB14_POS_CMD_OPC_EN_Pin|PB15_485_MCU_PC_DIR_Pin|PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80062f8:	2301      	movs	r3, #1
 80062fa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80062fc:	2300      	movs	r3, #0
 80062fe:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006300:	2300      	movs	r3, #0
 8006302:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006304:	f107 031c 	add.w	r3, r7, #28
 8006308:	4619      	mov	r1, r3
 800630a:	4834      	ldr	r0, [pc, #208]	; (80063dc <MX_GPIO_Init+0x2d8>)
 800630c:	f001 f878 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10_I2C2_SCL_LCD_IOEXP_Pin PB11_I2C2_SDA_LCD_IOEXP_Pin */
  GPIO_InitStruct.Pin = PB10_I2C2_SCL_LCD_IOEXP_Pin|PB11_I2C2_SDA_LCD_IOEXP_Pin;
 8006310:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8006314:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006316:	2312      	movs	r3, #18
 8006318:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800631a:	2301      	movs	r3, #1
 800631c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800631e:	2303      	movs	r3, #3
 8006320:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8006322:	2304      	movs	r3, #4
 8006324:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006326:	f107 031c 	add.w	r3, r7, #28
 800632a:	4619      	mov	r1, r3
 800632c:	482b      	ldr	r0, [pc, #172]	; (80063dc <MX_GPIO_Init+0x2d8>)
 800632e:	f001 f867 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_RELAY3_Pin CN1_19_ZSPD_Pin PB4_SPI3_MISO_SPARE_Pin Input_JP7_Pin */
  GPIO_InitStruct.Pin = PB12_RELAY3_Pin|CN1_19_ZSPD_Pin|PB4_SPI3_MISO_SPARE_Pin|Input_JP7_Pin;
 8006332:	f241 2318 	movw	r3, #4632	; 0x1218
 8006336:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006338:	2300      	movs	r3, #0
 800633a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800633c:	2300      	movs	r3, #0
 800633e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006340:	f107 031c 	add.w	r3, r7, #28
 8006344:	4619      	mov	r1, r3
 8006346:	4825      	ldr	r0, [pc, #148]	; (80063dc <MX_GPIO_Init+0x2d8>)
 8006348:	f001 f85a 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10_ESP32_EN_Pin */
  GPIO_InitStruct.Pin = PD10_ESP32_EN_Pin;
 800634c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8006350:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8006352:	2311      	movs	r3, #17
 8006354:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006356:	2300      	movs	r3, #0
 8006358:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800635a:	2300      	movs	r3, #0
 800635c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD10_ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 800635e:	f107 031c 	add.w	r3, r7, #28
 8006362:	4619      	mov	r1, r3
 8006364:	481e      	ldr	r0, [pc, #120]	; (80063e0 <MX_GPIO_Init+0x2dc>)
 8006366:	f001 f84b 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_ESP32_BOOT_SEL_Pin PD13_MON1_2_EN_Pin PD15_SPDIN_TRQIN_EN_Pin */
  GPIO_InitStruct.Pin = PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin;
 800636a:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 800636e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006370:	2301      	movs	r3, #1
 8006372:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006374:	2300      	movs	r3, #0
 8006376:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006378:	2300      	movs	r3, #0
 800637a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800637c:	f107 031c 	add.w	r3, r7, #28
 8006380:	4619      	mov	r1, r3
 8006382:	4817      	ldr	r0, [pc, #92]	; (80063e0 <MX_GPIO_Init+0x2dc>)
 8006384:	f001 f83c 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12_Input_J6_Pin PD14_Input_J6_Pin Input0_J6_DAC_ADC_Pin Input1_J6_DAC_ADC_Pin
                           PD7_A_CODE2_Pin */
  GPIO_InitStruct.Pin = PD12_Input_J6_Pin|PD14_Input_J6_Pin|Input0_J6_DAC_ADC_Pin|Input1_J6_DAC_ADC_Pin
 8006388:	f245 0383 	movw	r3, #20611	; 0x5083
 800638c:	61fb      	str	r3, [r7, #28]
                          |PD7_A_CODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 800638e:	2300      	movs	r3, #0
 8006390:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006392:	2300      	movs	r3, #0
 8006394:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006396:	f107 031c 	add.w	r3, r7, #28
 800639a:	4619      	mov	r1, r3
 800639c:	4810      	ldr	r0, [pc, #64]	; (80063e0 <MX_GPIO_Init+0x2dc>)
 800639e:	f001 f82f 	bl	8007400 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_I2C1_SDA_DAC_ADC_Pin PB8_I2C1_SCL_DAC_ADC_Pin */
  GPIO_InitStruct.Pin = PB7_I2C1_SDA_DAC_ADC_Pin|PB8_I2C1_SCL_DAC_ADC_Pin;
 80063a2:	f44f 73c0 	mov.w	r3, #384	; 0x180
 80063a6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80063a8:	2312      	movs	r3, #18
 80063aa:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80063ac:	2301      	movs	r3, #1
 80063ae:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80063b0:	2303      	movs	r3, #3
 80063b2:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80063b4:	2304      	movs	r3, #4
 80063b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80063b8:	f107 031c 	add.w	r3, r7, #28
 80063bc:	4619      	mov	r1, r3
 80063be:	4807      	ldr	r0, [pc, #28]	; (80063dc <MX_GPIO_Init+0x2d8>)
 80063c0:	f001 f81e 	bl	8007400 <HAL_GPIO_Init>

}
 80063c4:	bf00      	nop
 80063c6:	3730      	adds	r7, #48	; 0x30
 80063c8:	46bd      	mov	sp, r7
 80063ca:	bd80      	pop	{r7, pc}
 80063cc:	40023800 	.word	0x40023800
 80063d0:	40021000 	.word	0x40021000
 80063d4:	40020800 	.word	0x40020800
 80063d8:	40020000 	.word	0x40020000
 80063dc:	40020400 	.word	0x40020400
 80063e0:	40020c00 	.word	0x40020c00

080063e4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80063e4:	b480      	push	{r7}
 80063e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 80063e8:	e7fe      	b.n	80063e8 <Error_Handler+0x4>
	...

080063ec <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80063ec:	b480      	push	{r7}
 80063ee:	b083      	sub	sp, #12
 80063f0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80063f2:	2300      	movs	r3, #0
 80063f4:	607b      	str	r3, [r7, #4]
 80063f6:	4b10      	ldr	r3, [pc, #64]	; (8006438 <HAL_MspInit+0x4c>)
 80063f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80063fa:	4a0f      	ldr	r2, [pc, #60]	; (8006438 <HAL_MspInit+0x4c>)
 80063fc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006400:	6453      	str	r3, [r2, #68]	; 0x44
 8006402:	4b0d      	ldr	r3, [pc, #52]	; (8006438 <HAL_MspInit+0x4c>)
 8006404:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006406:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800640a:	607b      	str	r3, [r7, #4]
 800640c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800640e:	2300      	movs	r3, #0
 8006410:	603b      	str	r3, [r7, #0]
 8006412:	4b09      	ldr	r3, [pc, #36]	; (8006438 <HAL_MspInit+0x4c>)
 8006414:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006416:	4a08      	ldr	r2, [pc, #32]	; (8006438 <HAL_MspInit+0x4c>)
 8006418:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800641c:	6413      	str	r3, [r2, #64]	; 0x40
 800641e:	4b06      	ldr	r3, [pc, #24]	; (8006438 <HAL_MspInit+0x4c>)
 8006420:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006422:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006426:	603b      	str	r3, [r7, #0]
 8006428:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800642a:	bf00      	nop
 800642c:	370c      	adds	r7, #12
 800642e:	46bd      	mov	sp, r7
 8006430:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006434:	4770      	bx	lr
 8006436:	bf00      	nop
 8006438:	40023800 	.word	0x40023800

0800643c <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 800643c:	b580      	push	{r7, lr}
 800643e:	b08c      	sub	sp, #48	; 0x30
 8006440:	af00      	add	r7, sp, #0
 8006442:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006444:	f107 031c 	add.w	r3, r7, #28
 8006448:	2200      	movs	r2, #0
 800644a:	601a      	str	r2, [r3, #0]
 800644c:	605a      	str	r2, [r3, #4]
 800644e:	609a      	str	r2, [r3, #8]
 8006450:	60da      	str	r2, [r3, #12]
 8006452:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8006454:	687b      	ldr	r3, [r7, #4]
 8006456:	681b      	ldr	r3, [r3, #0]
 8006458:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800645c:	d12c      	bne.n	80064b8 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800645e:	2300      	movs	r3, #0
 8006460:	61bb      	str	r3, [r7, #24]
 8006462:	4b30      	ldr	r3, [pc, #192]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 8006464:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006466:	4a2f      	ldr	r2, [pc, #188]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 8006468:	f043 0301 	orr.w	r3, r3, #1
 800646c:	6413      	str	r3, [r2, #64]	; 0x40
 800646e:	4b2d      	ldr	r3, [pc, #180]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 8006470:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006472:	f003 0301 	and.w	r3, r3, #1
 8006476:	61bb      	str	r3, [r7, #24]
 8006478:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800647a:	2300      	movs	r3, #0
 800647c:	617b      	str	r3, [r7, #20]
 800647e:	4b29      	ldr	r3, [pc, #164]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 8006480:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006482:	4a28      	ldr	r2, [pc, #160]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 8006484:	f043 0301 	orr.w	r3, r3, #1
 8006488:	6313      	str	r3, [r2, #48]	; 0x30
 800648a:	4b26      	ldr	r3, [pc, #152]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 800648c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800648e:	f003 0301 	and.w	r3, r3, #1
 8006492:	617b      	str	r3, [r7, #20]
 8006494:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PA1_TIM2_CH2_ENC_PBO_Pin|PA5_TIM2_CH1_ENC_PAO_Pin;
 8006496:	2322      	movs	r3, #34	; 0x22
 8006498:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800649a:	2302      	movs	r3, #2
 800649c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800649e:	2300      	movs	r3, #0
 80064a0:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80064a2:	2300      	movs	r3, #0
 80064a4:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 80064a6:	2301      	movs	r3, #1
 80064a8:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80064aa:	f107 031c 	add.w	r3, r7, #28
 80064ae:	4619      	mov	r1, r3
 80064b0:	481d      	ldr	r0, [pc, #116]	; (8006528 <HAL_TIM_Base_MspInit+0xec>)
 80064b2:	f000 ffa5 	bl	8007400 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80064b6:	e030      	b.n	800651a <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 80064b8:	687b      	ldr	r3, [r7, #4]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	4a1b      	ldr	r2, [pc, #108]	; (800652c <HAL_TIM_Base_MspInit+0xf0>)
 80064be:	4293      	cmp	r3, r2
 80064c0:	d12b      	bne.n	800651a <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80064c2:	2300      	movs	r3, #0
 80064c4:	613b      	str	r3, [r7, #16]
 80064c6:	4b17      	ldr	r3, [pc, #92]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 80064c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064ca:	4a16      	ldr	r2, [pc, #88]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 80064cc:	f043 0302 	orr.w	r3, r3, #2
 80064d0:	6413      	str	r3, [r2, #64]	; 0x40
 80064d2:	4b14      	ldr	r3, [pc, #80]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 80064d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80064d6:	f003 0302 	and.w	r3, r3, #2
 80064da:	613b      	str	r3, [r7, #16]
 80064dc:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 80064de:	2300      	movs	r3, #0
 80064e0:	60fb      	str	r3, [r7, #12]
 80064e2:	4b10      	ldr	r3, [pc, #64]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 80064e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064e6:	4a0f      	ldr	r2, [pc, #60]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 80064e8:	f043 0301 	orr.w	r3, r3, #1
 80064ec:	6313      	str	r3, [r2, #48]	; 0x30
 80064ee:	4b0d      	ldr	r3, [pc, #52]	; (8006524 <HAL_TIM_Base_MspInit+0xe8>)
 80064f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80064f2:	f003 0301 	and.w	r3, r3, #1
 80064f6:	60fb      	str	r3, [r7, #12]
 80064f8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PA6_TIM3_CH1_ENC_PZO_Pin;
 80064fa:	2340      	movs	r3, #64	; 0x40
 80064fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80064fe:	2302      	movs	r3, #2
 8006500:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006502:	2300      	movs	r3, #0
 8006504:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006506:	2300      	movs	r3, #0
 8006508:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800650a:	2302      	movs	r3, #2
 800650c:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PA6_TIM3_CH1_ENC_PZO_GPIO_Port, &GPIO_InitStruct);
 800650e:	f107 031c 	add.w	r3, r7, #28
 8006512:	4619      	mov	r1, r3
 8006514:	4804      	ldr	r0, [pc, #16]	; (8006528 <HAL_TIM_Base_MspInit+0xec>)
 8006516:	f000 ff73 	bl	8007400 <HAL_GPIO_Init>
}
 800651a:	bf00      	nop
 800651c:	3730      	adds	r7, #48	; 0x30
 800651e:	46bd      	mov	sp, r7
 8006520:	bd80      	pop	{r7, pc}
 8006522:	bf00      	nop
 8006524:	40023800 	.word	0x40023800
 8006528:	40020000 	.word	0x40020000
 800652c:	40000400 	.word	0x40000400

08006530 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8006530:	b580      	push	{r7, lr}
 8006532:	b08e      	sub	sp, #56	; 0x38
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006538:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800653c:	2200      	movs	r2, #0
 800653e:	601a      	str	r2, [r3, #0]
 8006540:	605a      	str	r2, [r3, #4]
 8006542:	609a      	str	r2, [r3, #8]
 8006544:	60da      	str	r2, [r3, #12]
 8006546:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	681b      	ldr	r3, [r3, #0]
 800654c:	4a5b      	ldr	r2, [pc, #364]	; (80066bc <HAL_UART_MspInit+0x18c>)
 800654e:	4293      	cmp	r3, r2
 8006550:	d14b      	bne.n	80065ea <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8006552:	2300      	movs	r3, #0
 8006554:	623b      	str	r3, [r7, #32]
 8006556:	4b5a      	ldr	r3, [pc, #360]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006558:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800655a:	4a59      	ldr	r2, [pc, #356]	; (80066c0 <HAL_UART_MspInit+0x190>)
 800655c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8006560:	6413      	str	r3, [r2, #64]	; 0x40
 8006562:	4b57      	ldr	r3, [pc, #348]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006564:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006566:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800656a:	623b      	str	r3, [r7, #32]
 800656c:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800656e:	2300      	movs	r3, #0
 8006570:	61fb      	str	r3, [r7, #28]
 8006572:	4b53      	ldr	r3, [pc, #332]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006574:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006576:	4a52      	ldr	r2, [pc, #328]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006578:	f043 0304 	orr.w	r3, r3, #4
 800657c:	6313      	str	r3, [r2, #48]	; 0x30
 800657e:	4b50      	ldr	r3, [pc, #320]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006580:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006582:	f003 0304 	and.w	r3, r3, #4
 8006586:	61fb      	str	r3, [r7, #28]
 8006588:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 800658a:	2300      	movs	r3, #0
 800658c:	61bb      	str	r3, [r7, #24]
 800658e:	4b4c      	ldr	r3, [pc, #304]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006592:	4a4b      	ldr	r2, [pc, #300]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006594:	f043 0308 	orr.w	r3, r3, #8
 8006598:	6313      	str	r3, [r2, #48]	; 0x30
 800659a:	4b49      	ldr	r3, [pc, #292]	; (80066c0 <HAL_UART_MspInit+0x190>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800659e:	f003 0308 	and.w	r3, r3, #8
 80065a2:	61bb      	str	r3, [r7, #24]
 80065a4:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = PC12_UART5_TX_485_MCU_DRV_Pin;
 80065a6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80065aa:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065ac:	2302      	movs	r3, #2
 80065ae:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065b0:	2300      	movs	r3, #0
 80065b2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065b4:	2303      	movs	r3, #3
 80065b6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80065b8:	2308      	movs	r3, #8
 80065ba:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PC12_UART5_TX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 80065bc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065c0:	4619      	mov	r1, r3
 80065c2:	4840      	ldr	r0, [pc, #256]	; (80066c4 <HAL_UART_MspInit+0x194>)
 80065c4:	f000 ff1c 	bl	8007400 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD2_UART5_RX_485_MCU_DRV_Pin;
 80065c8:	2304      	movs	r3, #4
 80065ca:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80065cc:	2302      	movs	r3, #2
 80065ce:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80065d0:	2300      	movs	r3, #0
 80065d2:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80065d4:	2303      	movs	r3, #3
 80065d6:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 80065d8:	2308      	movs	r3, #8
 80065da:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PD2_UART5_RX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 80065dc:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80065e0:	4619      	mov	r1, r3
 80065e2:	4839      	ldr	r0, [pc, #228]	; (80066c8 <HAL_UART_MspInit+0x198>)
 80065e4:	f000 ff0c 	bl	8007400 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80065e8:	e063      	b.n	80066b2 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 80065ea:	687b      	ldr	r3, [r7, #4]
 80065ec:	681b      	ldr	r3, [r3, #0]
 80065ee:	4a37      	ldr	r2, [pc, #220]	; (80066cc <HAL_UART_MspInit+0x19c>)
 80065f0:	4293      	cmp	r3, r2
 80065f2:	d12d      	bne.n	8006650 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART3_CLK_ENABLE();
 80065f4:	2300      	movs	r3, #0
 80065f6:	617b      	str	r3, [r7, #20]
 80065f8:	4b31      	ldr	r3, [pc, #196]	; (80066c0 <HAL_UART_MspInit+0x190>)
 80065fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065fc:	4a30      	ldr	r2, [pc, #192]	; (80066c0 <HAL_UART_MspInit+0x190>)
 80065fe:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006602:	6413      	str	r3, [r2, #64]	; 0x40
 8006604:	4b2e      	ldr	r3, [pc, #184]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006606:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006608:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800660c:	617b      	str	r3, [r7, #20]
 800660e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8006610:	2300      	movs	r3, #0
 8006612:	613b      	str	r3, [r7, #16]
 8006614:	4b2a      	ldr	r3, [pc, #168]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006616:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006618:	4a29      	ldr	r2, [pc, #164]	; (80066c0 <HAL_UART_MspInit+0x190>)
 800661a:	f043 0308 	orr.w	r3, r3, #8
 800661e:	6313      	str	r3, [r2, #48]	; 0x30
 8006620:	4b27      	ldr	r3, [pc, #156]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006622:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006624:	f003 0308 	and.w	r3, r3, #8
 8006628:	613b      	str	r3, [r7, #16]
 800662a:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 800662c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006630:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006632:	2302      	movs	r3, #2
 8006634:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006636:	2300      	movs	r3, #0
 8006638:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800663a:	2303      	movs	r3, #3
 800663c:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 800663e:	2307      	movs	r3, #7
 8006640:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8006642:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8006646:	4619      	mov	r1, r3
 8006648:	481f      	ldr	r0, [pc, #124]	; (80066c8 <HAL_UART_MspInit+0x198>)
 800664a:	f000 fed9 	bl	8007400 <HAL_GPIO_Init>
}
 800664e:	e030      	b.n	80066b2 <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART6)
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	681b      	ldr	r3, [r3, #0]
 8006654:	4a1e      	ldr	r2, [pc, #120]	; (80066d0 <HAL_UART_MspInit+0x1a0>)
 8006656:	4293      	cmp	r3, r2
 8006658:	d12b      	bne.n	80066b2 <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART6_CLK_ENABLE();
 800665a:	2300      	movs	r3, #0
 800665c:	60fb      	str	r3, [r7, #12]
 800665e:	4b18      	ldr	r3, [pc, #96]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006660:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006662:	4a17      	ldr	r2, [pc, #92]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006664:	f043 0320 	orr.w	r3, r3, #32
 8006668:	6453      	str	r3, [r2, #68]	; 0x44
 800666a:	4b15      	ldr	r3, [pc, #84]	; (80066c0 <HAL_UART_MspInit+0x190>)
 800666c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800666e:	f003 0320 	and.w	r3, r3, #32
 8006672:	60fb      	str	r3, [r7, #12]
 8006674:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8006676:	2300      	movs	r3, #0
 8006678:	60bb      	str	r3, [r7, #8]
 800667a:	4b11      	ldr	r3, [pc, #68]	; (80066c0 <HAL_UART_MspInit+0x190>)
 800667c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800667e:	4a10      	ldr	r2, [pc, #64]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006680:	f043 0304 	orr.w	r3, r3, #4
 8006684:	6313      	str	r3, [r2, #48]	; 0x30
 8006686:	4b0e      	ldr	r3, [pc, #56]	; (80066c0 <HAL_UART_MspInit+0x190>)
 8006688:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800668a:	f003 0304 	and.w	r3, r3, #4
 800668e:	60bb      	str	r3, [r7, #8]
 8006690:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006692:	23c0      	movs	r3, #192	; 0xc0
 8006694:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006696:	2302      	movs	r3, #2
 8006698:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800669a:	2300      	movs	r3, #0
 800669c:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800669e:	2303      	movs	r3, #3
 80066a0:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 80066a2:	2308      	movs	r3, #8
 80066a4:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80066a6:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80066aa:	4619      	mov	r1, r3
 80066ac:	4805      	ldr	r0, [pc, #20]	; (80066c4 <HAL_UART_MspInit+0x194>)
 80066ae:	f000 fea7 	bl	8007400 <HAL_GPIO_Init>
}
 80066b2:	bf00      	nop
 80066b4:	3738      	adds	r7, #56	; 0x38
 80066b6:	46bd      	mov	sp, r7
 80066b8:	bd80      	pop	{r7, pc}
 80066ba:	bf00      	nop
 80066bc:	40005000 	.word	0x40005000
 80066c0:	40023800 	.word	0x40023800
 80066c4:	40020800 	.word	0x40020800
 80066c8:	40020c00 	.word	0x40020c00
 80066cc:	40004800 	.word	0x40004800
 80066d0:	40011400 	.word	0x40011400

080066d4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80066d4:	b480      	push	{r7}
 80066d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80066d8:	e7fe      	b.n	80066d8 <NMI_Handler+0x4>

080066da <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80066da:	b480      	push	{r7}
 80066dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80066de:	e7fe      	b.n	80066de <HardFault_Handler+0x4>

080066e0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80066e0:	b480      	push	{r7}
 80066e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80066e4:	e7fe      	b.n	80066e4 <MemManage_Handler+0x4>

080066e6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80066e6:	b480      	push	{r7}
 80066e8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80066ea:	e7fe      	b.n	80066ea <BusFault_Handler+0x4>

080066ec <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80066ec:	b480      	push	{r7}
 80066ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80066f0:	e7fe      	b.n	80066f0 <UsageFault_Handler+0x4>

080066f2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80066f2:	b480      	push	{r7}
 80066f4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80066f6:	bf00      	nop
 80066f8:	46bd      	mov	sp, r7
 80066fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066fe:	4770      	bx	lr

08006700 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8006700:	b480      	push	{r7}
 8006702:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8006704:	bf00      	nop
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr

0800670e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800670e:	b480      	push	{r7}
 8006710:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8006712:	bf00      	nop
 8006714:	46bd      	mov	sp, r7
 8006716:	f85d 7b04 	ldr.w	r7, [sp], #4
 800671a:	4770      	bx	lr

0800671c <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800671c:	b580      	push	{r7, lr}
 800671e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8006720:	f000 f988 	bl	8006a34 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8006724:	bf00      	nop
 8006726:	bd80      	pop	{r7, pc}

08006728 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006728:	b580      	push	{r7, lr}
 800672a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800672c:	4802      	ldr	r0, [pc, #8]	; (8006738 <TIM2_IRQHandler+0x10>)
 800672e:	f001 fdef 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8006732:	bf00      	nop
 8006734:	bd80      	pop	{r7, pc}
 8006736:	bf00      	nop
 8006738:	20000224 	.word	0x20000224

0800673c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800673c:	b580      	push	{r7, lr}
 800673e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006740:	4802      	ldr	r0, [pc, #8]	; (800674c <TIM3_IRQHandler+0x10>)
 8006742:	f001 fde5 	bl	8008310 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8006746:	bf00      	nop
 8006748:	bd80      	pop	{r7, pc}
 800674a:	bf00      	nop
 800674c:	2000026c 	.word	0x2000026c

08006750 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006750:	b580      	push	{r7, lr}
 8006752:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8006754:	4802      	ldr	r0, [pc, #8]	; (8006760 <USART3_IRQHandler+0x10>)
 8006756:	f002 fc73 	bl	8009040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 800675a:	bf00      	nop
 800675c:	bd80      	pop	{r7, pc}
 800675e:	bf00      	nop
 8006760:	200002f8 	.word	0x200002f8

08006764 <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8006764:	b580      	push	{r7, lr}
 8006766:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006768:	4802      	ldr	r0, [pc, #8]	; (8006774 <UART5_IRQHandler+0x10>)
 800676a:	f002 fc69 	bl	8009040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 800676e:	bf00      	nop
 8006770:	bd80      	pop	{r7, pc}
 8006772:	bf00      	nop
 8006774:	200002b4 	.word	0x200002b4

08006778 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006778:	b580      	push	{r7, lr}
 800677a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800677c:	4802      	ldr	r0, [pc, #8]	; (8006788 <USART6_IRQHandler+0x10>)
 800677e:	f002 fc5f 	bl	8009040 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8006782:	bf00      	nop
 8006784:	bd80      	pop	{r7, pc}
 8006786:	bf00      	nop
 8006788:	2000033c 	.word	0x2000033c

0800678c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800678c:	b480      	push	{r7}
 800678e:	af00      	add	r7, sp, #0
	return 1;
 8006790:	2301      	movs	r3, #1
}
 8006792:	4618      	mov	r0, r3
 8006794:	46bd      	mov	sp, r7
 8006796:	f85d 7b04 	ldr.w	r7, [sp], #4
 800679a:	4770      	bx	lr

0800679c <_kill>:

int _kill(int pid, int sig)
{
 800679c:	b580      	push	{r7, lr}
 800679e:	b082      	sub	sp, #8
 80067a0:	af00      	add	r7, sp, #0
 80067a2:	6078      	str	r0, [r7, #4]
 80067a4:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 80067a6:	f003 fbb3 	bl	8009f10 <__errno>
 80067aa:	4603      	mov	r3, r0
 80067ac:	2216      	movs	r2, #22
 80067ae:	601a      	str	r2, [r3, #0]
	return -1;
 80067b0:	f04f 33ff 	mov.w	r3, #4294967295
}
 80067b4:	4618      	mov	r0, r3
 80067b6:	3708      	adds	r7, #8
 80067b8:	46bd      	mov	sp, r7
 80067ba:	bd80      	pop	{r7, pc}

080067bc <_exit>:

void _exit (int status)
{
 80067bc:	b580      	push	{r7, lr}
 80067be:	b082      	sub	sp, #8
 80067c0:	af00      	add	r7, sp, #0
 80067c2:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 80067c4:	f04f 31ff 	mov.w	r1, #4294967295
 80067c8:	6878      	ldr	r0, [r7, #4]
 80067ca:	f7ff ffe7 	bl	800679c <_kill>
	while (1) {}		/* Make sure we hang here */
 80067ce:	e7fe      	b.n	80067ce <_exit+0x12>

080067d0 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80067d0:	b580      	push	{r7, lr}
 80067d2:	b086      	sub	sp, #24
 80067d4:	af00      	add	r7, sp, #0
 80067d6:	60f8      	str	r0, [r7, #12]
 80067d8:	60b9      	str	r1, [r7, #8]
 80067da:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067dc:	2300      	movs	r3, #0
 80067de:	617b      	str	r3, [r7, #20]
 80067e0:	e00a      	b.n	80067f8 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80067e2:	f3af 8000 	nop.w
 80067e6:	4601      	mov	r1, r0
 80067e8:	68bb      	ldr	r3, [r7, #8]
 80067ea:	1c5a      	adds	r2, r3, #1
 80067ec:	60ba      	str	r2, [r7, #8]
 80067ee:	b2ca      	uxtb	r2, r1
 80067f0:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	3301      	adds	r3, #1
 80067f6:	617b      	str	r3, [r7, #20]
 80067f8:	697a      	ldr	r2, [r7, #20]
 80067fa:	687b      	ldr	r3, [r7, #4]
 80067fc:	429a      	cmp	r2, r3
 80067fe:	dbf0      	blt.n	80067e2 <_read+0x12>
	}

return len;
 8006800:	687b      	ldr	r3, [r7, #4]
}
 8006802:	4618      	mov	r0, r3
 8006804:	3718      	adds	r7, #24
 8006806:	46bd      	mov	sp, r7
 8006808:	bd80      	pop	{r7, pc}

0800680a <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 800680a:	b580      	push	{r7, lr}
 800680c:	b086      	sub	sp, #24
 800680e:	af00      	add	r7, sp, #0
 8006810:	60f8      	str	r0, [r7, #12]
 8006812:	60b9      	str	r1, [r7, #8]
 8006814:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006816:	2300      	movs	r3, #0
 8006818:	617b      	str	r3, [r7, #20]
 800681a:	e009      	b.n	8006830 <_write+0x26>
	{
		__io_putchar(*ptr++);
 800681c:	68bb      	ldr	r3, [r7, #8]
 800681e:	1c5a      	adds	r2, r3, #1
 8006820:	60ba      	str	r2, [r7, #8]
 8006822:	781b      	ldrb	r3, [r3, #0]
 8006824:	4618      	mov	r0, r3
 8006826:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800682a:	697b      	ldr	r3, [r7, #20]
 800682c:	3301      	adds	r3, #1
 800682e:	617b      	str	r3, [r7, #20]
 8006830:	697a      	ldr	r2, [r7, #20]
 8006832:	687b      	ldr	r3, [r7, #4]
 8006834:	429a      	cmp	r2, r3
 8006836:	dbf1      	blt.n	800681c <_write+0x12>
	}
	return len;
 8006838:	687b      	ldr	r3, [r7, #4]
}
 800683a:	4618      	mov	r0, r3
 800683c:	3718      	adds	r7, #24
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}

08006842 <_close>:

int _close(int file)
{
 8006842:	b480      	push	{r7}
 8006844:	b083      	sub	sp, #12
 8006846:	af00      	add	r7, sp, #0
 8006848:	6078      	str	r0, [r7, #4]
	return -1;
 800684a:	f04f 33ff 	mov.w	r3, #4294967295
}
 800684e:	4618      	mov	r0, r3
 8006850:	370c      	adds	r7, #12
 8006852:	46bd      	mov	sp, r7
 8006854:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006858:	4770      	bx	lr

0800685a <_fstat>:


int _fstat(int file, struct stat *st)
{
 800685a:	b480      	push	{r7}
 800685c:	b083      	sub	sp, #12
 800685e:	af00      	add	r7, sp, #0
 8006860:	6078      	str	r0, [r7, #4]
 8006862:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8006864:	683b      	ldr	r3, [r7, #0]
 8006866:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 800686a:	605a      	str	r2, [r3, #4]
	return 0;
 800686c:	2300      	movs	r3, #0
}
 800686e:	4618      	mov	r0, r3
 8006870:	370c      	adds	r7, #12
 8006872:	46bd      	mov	sp, r7
 8006874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006878:	4770      	bx	lr

0800687a <_isatty>:

int _isatty(int file)
{
 800687a:	b480      	push	{r7}
 800687c:	b083      	sub	sp, #12
 800687e:	af00      	add	r7, sp, #0
 8006880:	6078      	str	r0, [r7, #4]
	return 1;
 8006882:	2301      	movs	r3, #1
}
 8006884:	4618      	mov	r0, r3
 8006886:	370c      	adds	r7, #12
 8006888:	46bd      	mov	sp, r7
 800688a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800688e:	4770      	bx	lr

08006890 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006890:	b480      	push	{r7}
 8006892:	b085      	sub	sp, #20
 8006894:	af00      	add	r7, sp, #0
 8006896:	60f8      	str	r0, [r7, #12]
 8006898:	60b9      	str	r1, [r7, #8]
 800689a:	607a      	str	r2, [r7, #4]
	return 0;
 800689c:	2300      	movs	r3, #0
}
 800689e:	4618      	mov	r0, r3
 80068a0:	3714      	adds	r7, #20
 80068a2:	46bd      	mov	sp, r7
 80068a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a8:	4770      	bx	lr
	...

080068ac <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80068ac:	b580      	push	{r7, lr}
 80068ae:	b086      	sub	sp, #24
 80068b0:	af00      	add	r7, sp, #0
 80068b2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80068b4:	4a14      	ldr	r2, [pc, #80]	; (8006908 <_sbrk+0x5c>)
 80068b6:	4b15      	ldr	r3, [pc, #84]	; (800690c <_sbrk+0x60>)
 80068b8:	1ad3      	subs	r3, r2, r3
 80068ba:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80068bc:	697b      	ldr	r3, [r7, #20]
 80068be:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80068c0:	4b13      	ldr	r3, [pc, #76]	; (8006910 <_sbrk+0x64>)
 80068c2:	681b      	ldr	r3, [r3, #0]
 80068c4:	2b00      	cmp	r3, #0
 80068c6:	d102      	bne.n	80068ce <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80068c8:	4b11      	ldr	r3, [pc, #68]	; (8006910 <_sbrk+0x64>)
 80068ca:	4a12      	ldr	r2, [pc, #72]	; (8006914 <_sbrk+0x68>)
 80068cc:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80068ce:	4b10      	ldr	r3, [pc, #64]	; (8006910 <_sbrk+0x64>)
 80068d0:	681a      	ldr	r2, [r3, #0]
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	4413      	add	r3, r2
 80068d6:	693a      	ldr	r2, [r7, #16]
 80068d8:	429a      	cmp	r2, r3
 80068da:	d207      	bcs.n	80068ec <_sbrk+0x40>
  {
    errno = ENOMEM;
 80068dc:	f003 fb18 	bl	8009f10 <__errno>
 80068e0:	4603      	mov	r3, r0
 80068e2:	220c      	movs	r2, #12
 80068e4:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80068e6:	f04f 33ff 	mov.w	r3, #4294967295
 80068ea:	e009      	b.n	8006900 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80068ec:	4b08      	ldr	r3, [pc, #32]	; (8006910 <_sbrk+0x64>)
 80068ee:	681b      	ldr	r3, [r3, #0]
 80068f0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80068f2:	4b07      	ldr	r3, [pc, #28]	; (8006910 <_sbrk+0x64>)
 80068f4:	681a      	ldr	r2, [r3, #0]
 80068f6:	687b      	ldr	r3, [r7, #4]
 80068f8:	4413      	add	r3, r2
 80068fa:	4a05      	ldr	r2, [pc, #20]	; (8006910 <_sbrk+0x64>)
 80068fc:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80068fe:	68fb      	ldr	r3, [r7, #12]
}
 8006900:	4618      	mov	r0, r3
 8006902:	3718      	adds	r7, #24
 8006904:	46bd      	mov	sp, r7
 8006906:	bd80      	pop	{r7, pc}
 8006908:	20020000 	.word	0x20020000
 800690c:	00000400 	.word	0x00000400
 8006910:	20000540 	.word	0x20000540
 8006914:	20000578 	.word	0x20000578

08006918 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006918:	b480      	push	{r7}
 800691a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800691c:	4b06      	ldr	r3, [pc, #24]	; (8006938 <SystemInit+0x20>)
 800691e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8006922:	4a05      	ldr	r2, [pc, #20]	; (8006938 <SystemInit+0x20>)
 8006924:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006928:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800692c:	bf00      	nop
 800692e:	46bd      	mov	sp, r7
 8006930:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006934:	4770      	bx	lr
 8006936:	bf00      	nop
 8006938:	e000ed00 	.word	0xe000ed00

0800693c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 800693c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8006974 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006940:	480d      	ldr	r0, [pc, #52]	; (8006978 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8006942:	490e      	ldr	r1, [pc, #56]	; (800697c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8006944:	4a0e      	ldr	r2, [pc, #56]	; (8006980 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8006946:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006948:	e002      	b.n	8006950 <LoopCopyDataInit>

0800694a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800694a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800694c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800694e:	3304      	adds	r3, #4

08006950 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006950:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8006952:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8006954:	d3f9      	bcc.n	800694a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8006956:	4a0b      	ldr	r2, [pc, #44]	; (8006984 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006958:	4c0b      	ldr	r4, [pc, #44]	; (8006988 <LoopFillZerobss+0x26>)
  movs r3, #0
 800695a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800695c:	e001      	b.n	8006962 <LoopFillZerobss>

0800695e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800695e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006960:	3204      	adds	r2, #4

08006962 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8006962:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8006964:	d3fb      	bcc.n	800695e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8006966:	f7ff ffd7 	bl	8006918 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800696a:	f003 fad7 	bl	8009f1c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800696e:	f7fe fce3 	bl	8005338 <main>
  bx  lr    
 8006972:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 8006974:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006978:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800697c:	200001f4 	.word	0x200001f4
  ldr r2, =_sidata
 8006980:	0800fee8 	.word	0x0800fee8
  ldr r2, =_sbss
 8006984:	200001f4 	.word	0x200001f4
  ldr r4, =_ebss
 8006988:	20000578 	.word	0x20000578

0800698c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800698c:	e7fe      	b.n	800698c <ADC_IRQHandler>
	...

08006990 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006990:	b580      	push	{r7, lr}
 8006992:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006994:	4b0e      	ldr	r3, [pc, #56]	; (80069d0 <HAL_Init+0x40>)
 8006996:	681b      	ldr	r3, [r3, #0]
 8006998:	4a0d      	ldr	r2, [pc, #52]	; (80069d0 <HAL_Init+0x40>)
 800699a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800699e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80069a0:	4b0b      	ldr	r3, [pc, #44]	; (80069d0 <HAL_Init+0x40>)
 80069a2:	681b      	ldr	r3, [r3, #0]
 80069a4:	4a0a      	ldr	r2, [pc, #40]	; (80069d0 <HAL_Init+0x40>)
 80069a6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80069aa:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80069ac:	4b08      	ldr	r3, [pc, #32]	; (80069d0 <HAL_Init+0x40>)
 80069ae:	681b      	ldr	r3, [r3, #0]
 80069b0:	4a07      	ldr	r2, [pc, #28]	; (80069d0 <HAL_Init+0x40>)
 80069b2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80069b6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80069b8:	2003      	movs	r0, #3
 80069ba:	f000 f965 	bl	8006c88 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80069be:	2000      	movs	r0, #0
 80069c0:	f000 f808 	bl	80069d4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80069c4:	f7ff fd12 	bl	80063ec <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80069c8:	2300      	movs	r3, #0
}
 80069ca:	4618      	mov	r0, r3
 80069cc:	bd80      	pop	{r7, pc}
 80069ce:	bf00      	nop
 80069d0:	40023c00 	.word	0x40023c00

080069d4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b082      	sub	sp, #8
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80069dc:	4b12      	ldr	r3, [pc, #72]	; (8006a28 <HAL_InitTick+0x54>)
 80069de:	681a      	ldr	r2, [r3, #0]
 80069e0:	4b12      	ldr	r3, [pc, #72]	; (8006a2c <HAL_InitTick+0x58>)
 80069e2:	781b      	ldrb	r3, [r3, #0]
 80069e4:	4619      	mov	r1, r3
 80069e6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80069ea:	fbb3 f3f1 	udiv	r3, r3, r1
 80069ee:	fbb2 f3f3 	udiv	r3, r2, r3
 80069f2:	4618      	mov	r0, r3
 80069f4:	f000 f981 	bl	8006cfa <HAL_SYSTICK_Config>
 80069f8:	4603      	mov	r3, r0
 80069fa:	2b00      	cmp	r3, #0
 80069fc:	d001      	beq.n	8006a02 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80069fe:	2301      	movs	r3, #1
 8006a00:	e00e      	b.n	8006a20 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8006a02:	687b      	ldr	r3, [r7, #4]
 8006a04:	2b0f      	cmp	r3, #15
 8006a06:	d80a      	bhi.n	8006a1e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006a08:	2200      	movs	r2, #0
 8006a0a:	6879      	ldr	r1, [r7, #4]
 8006a0c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a10:	f000 f945 	bl	8006c9e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8006a14:	4a06      	ldr	r2, [pc, #24]	; (8006a30 <HAL_InitTick+0x5c>)
 8006a16:	687b      	ldr	r3, [r7, #4]
 8006a18:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006a1a:	2300      	movs	r3, #0
 8006a1c:	e000      	b.n	8006a20 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006a1e:	2301      	movs	r3, #1
}
 8006a20:	4618      	mov	r0, r3
 8006a22:	3708      	adds	r7, #8
 8006a24:	46bd      	mov	sp, r7
 8006a26:	bd80      	pop	{r7, pc}
 8006a28:	20000014 	.word	0x20000014
 8006a2c:	2000001c 	.word	0x2000001c
 8006a30:	20000018 	.word	0x20000018

08006a34 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8006a34:	b480      	push	{r7}
 8006a36:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006a38:	4b06      	ldr	r3, [pc, #24]	; (8006a54 <HAL_IncTick+0x20>)
 8006a3a:	781b      	ldrb	r3, [r3, #0]
 8006a3c:	461a      	mov	r2, r3
 8006a3e:	4b06      	ldr	r3, [pc, #24]	; (8006a58 <HAL_IncTick+0x24>)
 8006a40:	681b      	ldr	r3, [r3, #0]
 8006a42:	4413      	add	r3, r2
 8006a44:	4a04      	ldr	r2, [pc, #16]	; (8006a58 <HAL_IncTick+0x24>)
 8006a46:	6013      	str	r3, [r2, #0]
}
 8006a48:	bf00      	nop
 8006a4a:	46bd      	mov	sp, r7
 8006a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a50:	4770      	bx	lr
 8006a52:	bf00      	nop
 8006a54:	2000001c 	.word	0x2000001c
 8006a58:	20000544 	.word	0x20000544

08006a5c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006a5c:	b480      	push	{r7}
 8006a5e:	af00      	add	r7, sp, #0
  return uwTick;
 8006a60:	4b03      	ldr	r3, [pc, #12]	; (8006a70 <HAL_GetTick+0x14>)
 8006a62:	681b      	ldr	r3, [r3, #0]
}
 8006a64:	4618      	mov	r0, r3
 8006a66:	46bd      	mov	sp, r7
 8006a68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a6c:	4770      	bx	lr
 8006a6e:	bf00      	nop
 8006a70:	20000544 	.word	0x20000544

08006a74 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8006a74:	b580      	push	{r7, lr}
 8006a76:	b084      	sub	sp, #16
 8006a78:	af00      	add	r7, sp, #0
 8006a7a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006a7c:	f7ff ffee 	bl	8006a5c <HAL_GetTick>
 8006a80:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8006a82:	687b      	ldr	r3, [r7, #4]
 8006a84:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8006a86:	68fb      	ldr	r3, [r7, #12]
 8006a88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a8c:	d005      	beq.n	8006a9a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006a8e:	4b0a      	ldr	r3, [pc, #40]	; (8006ab8 <HAL_Delay+0x44>)
 8006a90:	781b      	ldrb	r3, [r3, #0]
 8006a92:	461a      	mov	r2, r3
 8006a94:	68fb      	ldr	r3, [r7, #12]
 8006a96:	4413      	add	r3, r2
 8006a98:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006a9a:	bf00      	nop
 8006a9c:	f7ff ffde 	bl	8006a5c <HAL_GetTick>
 8006aa0:	4602      	mov	r2, r0
 8006aa2:	68bb      	ldr	r3, [r7, #8]
 8006aa4:	1ad3      	subs	r3, r2, r3
 8006aa6:	68fa      	ldr	r2, [r7, #12]
 8006aa8:	429a      	cmp	r2, r3
 8006aaa:	d8f7      	bhi.n	8006a9c <HAL_Delay+0x28>
  {
  }
}
 8006aac:	bf00      	nop
 8006aae:	bf00      	nop
 8006ab0:	3710      	adds	r7, #16
 8006ab2:	46bd      	mov	sp, r7
 8006ab4:	bd80      	pop	{r7, pc}
 8006ab6:	bf00      	nop
 8006ab8:	2000001c 	.word	0x2000001c

08006abc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006abc:	b480      	push	{r7}
 8006abe:	b085      	sub	sp, #20
 8006ac0:	af00      	add	r7, sp, #0
 8006ac2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8006ac4:	687b      	ldr	r3, [r7, #4]
 8006ac6:	f003 0307 	and.w	r3, r3, #7
 8006aca:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8006acc:	4b0c      	ldr	r3, [pc, #48]	; (8006b00 <__NVIC_SetPriorityGrouping+0x44>)
 8006ace:	68db      	ldr	r3, [r3, #12]
 8006ad0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8006ad2:	68ba      	ldr	r2, [r7, #8]
 8006ad4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8006ad8:	4013      	ands	r3, r2
 8006ada:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8006adc:	68fb      	ldr	r3, [r7, #12]
 8006ade:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8006ae0:	68bb      	ldr	r3, [r7, #8]
 8006ae2:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8006ae4:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006ae8:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006aec:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006aee:	4a04      	ldr	r2, [pc, #16]	; (8006b00 <__NVIC_SetPriorityGrouping+0x44>)
 8006af0:	68bb      	ldr	r3, [r7, #8]
 8006af2:	60d3      	str	r3, [r2, #12]
}
 8006af4:	bf00      	nop
 8006af6:	3714      	adds	r7, #20
 8006af8:	46bd      	mov	sp, r7
 8006afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006afe:	4770      	bx	lr
 8006b00:	e000ed00 	.word	0xe000ed00

08006b04 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8006b04:	b480      	push	{r7}
 8006b06:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006b08:	4b04      	ldr	r3, [pc, #16]	; (8006b1c <__NVIC_GetPriorityGrouping+0x18>)
 8006b0a:	68db      	ldr	r3, [r3, #12]
 8006b0c:	0a1b      	lsrs	r3, r3, #8
 8006b0e:	f003 0307 	and.w	r3, r3, #7
}
 8006b12:	4618      	mov	r0, r3
 8006b14:	46bd      	mov	sp, r7
 8006b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b1a:	4770      	bx	lr
 8006b1c:	e000ed00 	.word	0xe000ed00

08006b20 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006b20:	b480      	push	{r7}
 8006b22:	b083      	sub	sp, #12
 8006b24:	af00      	add	r7, sp, #0
 8006b26:	4603      	mov	r3, r0
 8006b28:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b2a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b2e:	2b00      	cmp	r3, #0
 8006b30:	db0b      	blt.n	8006b4a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8006b32:	79fb      	ldrb	r3, [r7, #7]
 8006b34:	f003 021f 	and.w	r2, r3, #31
 8006b38:	4907      	ldr	r1, [pc, #28]	; (8006b58 <__NVIC_EnableIRQ+0x38>)
 8006b3a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b3e:	095b      	lsrs	r3, r3, #5
 8006b40:	2001      	movs	r0, #1
 8006b42:	fa00 f202 	lsl.w	r2, r0, r2
 8006b46:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006b4a:	bf00      	nop
 8006b4c:	370c      	adds	r7, #12
 8006b4e:	46bd      	mov	sp, r7
 8006b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b54:	4770      	bx	lr
 8006b56:	bf00      	nop
 8006b58:	e000e100 	.word	0xe000e100

08006b5c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006b5c:	b480      	push	{r7}
 8006b5e:	b083      	sub	sp, #12
 8006b60:	af00      	add	r7, sp, #0
 8006b62:	4603      	mov	r3, r0
 8006b64:	6039      	str	r1, [r7, #0]
 8006b66:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006b68:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	db0a      	blt.n	8006b86 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b70:	683b      	ldr	r3, [r7, #0]
 8006b72:	b2da      	uxtb	r2, r3
 8006b74:	490c      	ldr	r1, [pc, #48]	; (8006ba8 <__NVIC_SetPriority+0x4c>)
 8006b76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006b7a:	0112      	lsls	r2, r2, #4
 8006b7c:	b2d2      	uxtb	r2, r2
 8006b7e:	440b      	add	r3, r1
 8006b80:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8006b84:	e00a      	b.n	8006b9c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006b86:	683b      	ldr	r3, [r7, #0]
 8006b88:	b2da      	uxtb	r2, r3
 8006b8a:	4908      	ldr	r1, [pc, #32]	; (8006bac <__NVIC_SetPriority+0x50>)
 8006b8c:	79fb      	ldrb	r3, [r7, #7]
 8006b8e:	f003 030f 	and.w	r3, r3, #15
 8006b92:	3b04      	subs	r3, #4
 8006b94:	0112      	lsls	r2, r2, #4
 8006b96:	b2d2      	uxtb	r2, r2
 8006b98:	440b      	add	r3, r1
 8006b9a:	761a      	strb	r2, [r3, #24]
}
 8006b9c:	bf00      	nop
 8006b9e:	370c      	adds	r7, #12
 8006ba0:	46bd      	mov	sp, r7
 8006ba2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ba6:	4770      	bx	lr
 8006ba8:	e000e100 	.word	0xe000e100
 8006bac:	e000ed00 	.word	0xe000ed00

08006bb0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006bb0:	b480      	push	{r7}
 8006bb2:	b089      	sub	sp, #36	; 0x24
 8006bb4:	af00      	add	r7, sp, #0
 8006bb6:	60f8      	str	r0, [r7, #12]
 8006bb8:	60b9      	str	r1, [r7, #8]
 8006bba:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006bbc:	68fb      	ldr	r3, [r7, #12]
 8006bbe:	f003 0307 	and.w	r3, r3, #7
 8006bc2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8006bc4:	69fb      	ldr	r3, [r7, #28]
 8006bc6:	f1c3 0307 	rsb	r3, r3, #7
 8006bca:	2b04      	cmp	r3, #4
 8006bcc:	bf28      	it	cs
 8006bce:	2304      	movcs	r3, #4
 8006bd0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8006bd2:	69fb      	ldr	r3, [r7, #28]
 8006bd4:	3304      	adds	r3, #4
 8006bd6:	2b06      	cmp	r3, #6
 8006bd8:	d902      	bls.n	8006be0 <NVIC_EncodePriority+0x30>
 8006bda:	69fb      	ldr	r3, [r7, #28]
 8006bdc:	3b03      	subs	r3, #3
 8006bde:	e000      	b.n	8006be2 <NVIC_EncodePriority+0x32>
 8006be0:	2300      	movs	r3, #0
 8006be2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006be4:	f04f 32ff 	mov.w	r2, #4294967295
 8006be8:	69bb      	ldr	r3, [r7, #24]
 8006bea:	fa02 f303 	lsl.w	r3, r2, r3
 8006bee:	43da      	mvns	r2, r3
 8006bf0:	68bb      	ldr	r3, [r7, #8]
 8006bf2:	401a      	ands	r2, r3
 8006bf4:	697b      	ldr	r3, [r7, #20]
 8006bf6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006bf8:	f04f 31ff 	mov.w	r1, #4294967295
 8006bfc:	697b      	ldr	r3, [r7, #20]
 8006bfe:	fa01 f303 	lsl.w	r3, r1, r3
 8006c02:	43d9      	mvns	r1, r3
 8006c04:	687b      	ldr	r3, [r7, #4]
 8006c06:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006c08:	4313      	orrs	r3, r2
         );
}
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	3724      	adds	r7, #36	; 0x24
 8006c0e:	46bd      	mov	sp, r7
 8006c10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c14:	4770      	bx	lr
	...

08006c18 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006c1c:	f3bf 8f4f 	dsb	sy
}
 8006c20:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 8006c22:	4b06      	ldr	r3, [pc, #24]	; (8006c3c <__NVIC_SystemReset+0x24>)
 8006c24:	68db      	ldr	r3, [r3, #12]
 8006c26:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006c2a:	4904      	ldr	r1, [pc, #16]	; (8006c3c <__NVIC_SystemReset+0x24>)
 8006c2c:	4b04      	ldr	r3, [pc, #16]	; (8006c40 <__NVIC_SystemReset+0x28>)
 8006c2e:	4313      	orrs	r3, r2
 8006c30:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 8006c32:	f3bf 8f4f 	dsb	sy
}
 8006c36:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006c38:	bf00      	nop
 8006c3a:	e7fd      	b.n	8006c38 <__NVIC_SystemReset+0x20>
 8006c3c:	e000ed00 	.word	0xe000ed00
 8006c40:	05fa0004 	.word	0x05fa0004

08006c44 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8006c44:	b580      	push	{r7, lr}
 8006c46:	b082      	sub	sp, #8
 8006c48:	af00      	add	r7, sp, #0
 8006c4a:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	3b01      	subs	r3, #1
 8006c50:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8006c54:	d301      	bcc.n	8006c5a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8006c56:	2301      	movs	r3, #1
 8006c58:	e00f      	b.n	8006c7a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006c5a:	4a0a      	ldr	r2, [pc, #40]	; (8006c84 <SysTick_Config+0x40>)
 8006c5c:	687b      	ldr	r3, [r7, #4]
 8006c5e:	3b01      	subs	r3, #1
 8006c60:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8006c62:	210f      	movs	r1, #15
 8006c64:	f04f 30ff 	mov.w	r0, #4294967295
 8006c68:	f7ff ff78 	bl	8006b5c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006c6c:	4b05      	ldr	r3, [pc, #20]	; (8006c84 <SysTick_Config+0x40>)
 8006c6e:	2200      	movs	r2, #0
 8006c70:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8006c72:	4b04      	ldr	r3, [pc, #16]	; (8006c84 <SysTick_Config+0x40>)
 8006c74:	2207      	movs	r2, #7
 8006c76:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006c78:	2300      	movs	r3, #0
}
 8006c7a:	4618      	mov	r0, r3
 8006c7c:	3708      	adds	r7, #8
 8006c7e:	46bd      	mov	sp, r7
 8006c80:	bd80      	pop	{r7, pc}
 8006c82:	bf00      	nop
 8006c84:	e000e010 	.word	0xe000e010

08006c88 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006c88:	b580      	push	{r7, lr}
 8006c8a:	b082      	sub	sp, #8
 8006c8c:	af00      	add	r7, sp, #0
 8006c8e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006c90:	6878      	ldr	r0, [r7, #4]
 8006c92:	f7ff ff13 	bl	8006abc <__NVIC_SetPriorityGrouping>
}
 8006c96:	bf00      	nop
 8006c98:	3708      	adds	r7, #8
 8006c9a:	46bd      	mov	sp, r7
 8006c9c:	bd80      	pop	{r7, pc}

08006c9e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006c9e:	b580      	push	{r7, lr}
 8006ca0:	b086      	sub	sp, #24
 8006ca2:	af00      	add	r7, sp, #0
 8006ca4:	4603      	mov	r3, r0
 8006ca6:	60b9      	str	r1, [r7, #8]
 8006ca8:	607a      	str	r2, [r7, #4]
 8006caa:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006cac:	2300      	movs	r3, #0
 8006cae:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006cb0:	f7ff ff28 	bl	8006b04 <__NVIC_GetPriorityGrouping>
 8006cb4:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8006cb6:	687a      	ldr	r2, [r7, #4]
 8006cb8:	68b9      	ldr	r1, [r7, #8]
 8006cba:	6978      	ldr	r0, [r7, #20]
 8006cbc:	f7ff ff78 	bl	8006bb0 <NVIC_EncodePriority>
 8006cc0:	4602      	mov	r2, r0
 8006cc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8006cc6:	4611      	mov	r1, r2
 8006cc8:	4618      	mov	r0, r3
 8006cca:	f7ff ff47 	bl	8006b5c <__NVIC_SetPriority>
}
 8006cce:	bf00      	nop
 8006cd0:	3718      	adds	r7, #24
 8006cd2:	46bd      	mov	sp, r7
 8006cd4:	bd80      	pop	{r7, pc}

08006cd6 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006cd6:	b580      	push	{r7, lr}
 8006cd8:	b082      	sub	sp, #8
 8006cda:	af00      	add	r7, sp, #0
 8006cdc:	4603      	mov	r3, r0
 8006cde:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8006ce0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006ce4:	4618      	mov	r0, r3
 8006ce6:	f7ff ff1b 	bl	8006b20 <__NVIC_EnableIRQ>
}
 8006cea:	bf00      	nop
 8006cec:	3708      	adds	r7, #8
 8006cee:	46bd      	mov	sp, r7
 8006cf0:	bd80      	pop	{r7, pc}

08006cf2 <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 8006cf2:	b580      	push	{r7, lr}
 8006cf4:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 8006cf6:	f7ff ff8f 	bl	8006c18 <__NVIC_SystemReset>

08006cfa <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006cfa:	b580      	push	{r7, lr}
 8006cfc:	b082      	sub	sp, #8
 8006cfe:	af00      	add	r7, sp, #0
 8006d00:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8006d02:	6878      	ldr	r0, [r7, #4]
 8006d04:	f7ff ff9e 	bl	8006c44 <SysTick_Config>
 8006d08:	4603      	mov	r3, r0
}
 8006d0a:	4618      	mov	r0, r3
 8006d0c:	3708      	adds	r7, #8
 8006d0e:	46bd      	mov	sp, r7
 8006d10:	bd80      	pop	{r7, pc}

08006d12 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8006d12:	b580      	push	{r7, lr}
 8006d14:	b084      	sub	sp, #16
 8006d16:	af00      	add	r7, sp, #0
 8006d18:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006d1a:	687b      	ldr	r3, [r7, #4]
 8006d1c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006d1e:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006d20:	f7ff fe9c 	bl	8006a5c <HAL_GetTick>
 8006d24:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006d2c:	b2db      	uxtb	r3, r3
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d008      	beq.n	8006d44 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	2280      	movs	r2, #128	; 0x80
 8006d36:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006d38:	687b      	ldr	r3, [r7, #4]
 8006d3a:	2200      	movs	r2, #0
 8006d3c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006d40:	2301      	movs	r3, #1
 8006d42:	e052      	b.n	8006dea <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8006d44:	687b      	ldr	r3, [r7, #4]
 8006d46:	681b      	ldr	r3, [r3, #0]
 8006d48:	681a      	ldr	r2, [r3, #0]
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f022 0216 	bic.w	r2, r2, #22
 8006d52:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	681b      	ldr	r3, [r3, #0]
 8006d58:	695a      	ldr	r2, [r3, #20]
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	681b      	ldr	r3, [r3, #0]
 8006d5e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8006d62:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8006d64:	687b      	ldr	r3, [r7, #4]
 8006d66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d68:	2b00      	cmp	r3, #0
 8006d6a:	d103      	bne.n	8006d74 <HAL_DMA_Abort+0x62>
 8006d6c:	687b      	ldr	r3, [r7, #4]
 8006d6e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006d70:	2b00      	cmp	r3, #0
 8006d72:	d007      	beq.n	8006d84 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8006d74:	687b      	ldr	r3, [r7, #4]
 8006d76:	681b      	ldr	r3, [r3, #0]
 8006d78:	681a      	ldr	r2, [r3, #0]
 8006d7a:	687b      	ldr	r3, [r7, #4]
 8006d7c:	681b      	ldr	r3, [r3, #0]
 8006d7e:	f022 0208 	bic.w	r2, r2, #8
 8006d82:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	681a      	ldr	r2, [r3, #0]
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	681b      	ldr	r3, [r3, #0]
 8006d8e:	f022 0201 	bic.w	r2, r2, #1
 8006d92:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006d94:	e013      	b.n	8006dbe <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8006d96:	f7ff fe61 	bl	8006a5c <HAL_GetTick>
 8006d9a:	4602      	mov	r2, r0
 8006d9c:	68bb      	ldr	r3, [r7, #8]
 8006d9e:	1ad3      	subs	r3, r2, r3
 8006da0:	2b05      	cmp	r3, #5
 8006da2:	d90c      	bls.n	8006dbe <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8006da4:	687b      	ldr	r3, [r7, #4]
 8006da6:	2220      	movs	r2, #32
 8006da8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006daa:	687b      	ldr	r3, [r7, #4]
 8006dac:	2203      	movs	r2, #3
 8006dae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8006db2:	687b      	ldr	r3, [r7, #4]
 8006db4:	2200      	movs	r2, #0
 8006db6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006dba:	2303      	movs	r3, #3
 8006dbc:	e015      	b.n	8006dea <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	681b      	ldr	r3, [r3, #0]
 8006dc4:	f003 0301 	and.w	r3, r3, #1
 8006dc8:	2b00      	cmp	r3, #0
 8006dca:	d1e4      	bne.n	8006d96 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8006dd0:	223f      	movs	r2, #63	; 0x3f
 8006dd2:	409a      	lsls	r2, r3
 8006dd4:	68fb      	ldr	r3, [r7, #12]
 8006dd6:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	2201      	movs	r2, #1
 8006ddc:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006de0:	687b      	ldr	r3, [r7, #4]
 8006de2:	2200      	movs	r2, #0
 8006de4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006de8:	2300      	movs	r3, #0
}
 8006dea:	4618      	mov	r0, r3
 8006dec:	3710      	adds	r7, #16
 8006dee:	46bd      	mov	sp, r7
 8006df0:	bd80      	pop	{r7, pc}

08006df2 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8006df2:	b480      	push	{r7}
 8006df4:	b083      	sub	sp, #12
 8006df6:	af00      	add	r7, sp, #0
 8006df8:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006dfa:	687b      	ldr	r3, [r7, #4]
 8006dfc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006e00:	b2db      	uxtb	r3, r3
 8006e02:	2b02      	cmp	r3, #2
 8006e04:	d004      	beq.n	8006e10 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	2280      	movs	r2, #128	; 0x80
 8006e0a:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006e0c:	2301      	movs	r3, #1
 8006e0e:	e00c      	b.n	8006e2a <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	2205      	movs	r2, #5
 8006e14:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006e18:	687b      	ldr	r3, [r7, #4]
 8006e1a:	681b      	ldr	r3, [r3, #0]
 8006e1c:	681a      	ldr	r2, [r3, #0]
 8006e1e:	687b      	ldr	r3, [r7, #4]
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	f022 0201 	bic.w	r2, r2, #1
 8006e26:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	370c      	adds	r7, #12
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e34:	4770      	bx	lr
	...

08006e38 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006e38:	b580      	push	{r7, lr}
 8006e3a:	b086      	sub	sp, #24
 8006e3c:	af00      	add	r7, sp, #0
 8006e3e:	60f8      	str	r0, [r7, #12]
 8006e40:	60b9      	str	r1, [r7, #8]
 8006e42:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006e46:	2301      	movs	r3, #1
 8006e48:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006e4a:	4b23      	ldr	r3, [pc, #140]	; (8006ed8 <HAL_FLASH_Program+0xa0>)
 8006e4c:	7e1b      	ldrb	r3, [r3, #24]
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_FLASH_Program+0x1e>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e03b      	b.n	8006ece <HAL_FLASH_Program+0x96>
 8006e56:	4b20      	ldr	r3, [pc, #128]	; (8006ed8 <HAL_FLASH_Program+0xa0>)
 8006e58:	2201      	movs	r2, #1
 8006e5a:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006e5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006e60:	f000 f87c 	bl	8006f5c <FLASH_WaitForLastOperation>
 8006e64:	4603      	mov	r3, r0
 8006e66:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006e68:	7dfb      	ldrb	r3, [r7, #23]
 8006e6a:	2b00      	cmp	r3, #0
 8006e6c:	d12b      	bne.n	8006ec6 <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006e6e:	68fb      	ldr	r3, [r7, #12]
 8006e70:	2b00      	cmp	r3, #0
 8006e72:	d105      	bne.n	8006e80 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 8006e74:	783b      	ldrb	r3, [r7, #0]
 8006e76:	4619      	mov	r1, r3
 8006e78:	68b8      	ldr	r0, [r7, #8]
 8006e7a:	f000 f927 	bl	80070cc <FLASH_Program_Byte>
 8006e7e:	e016      	b.n	8006eae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006e80:	68fb      	ldr	r3, [r7, #12]
 8006e82:	2b01      	cmp	r3, #1
 8006e84:	d105      	bne.n	8006e92 <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 8006e86:	883b      	ldrh	r3, [r7, #0]
 8006e88:	4619      	mov	r1, r3
 8006e8a:	68b8      	ldr	r0, [r7, #8]
 8006e8c:	f000 f8fa 	bl	8007084 <FLASH_Program_HalfWord>
 8006e90:	e00d      	b.n	8006eae <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 8006e92:	68fb      	ldr	r3, [r7, #12]
 8006e94:	2b02      	cmp	r3, #2
 8006e96:	d105      	bne.n	8006ea4 <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	4619      	mov	r1, r3
 8006e9c:	68b8      	ldr	r0, [r7, #8]
 8006e9e:	f000 f8cf 	bl	8007040 <FLASH_Program_Word>
 8006ea2:	e004      	b.n	8006eae <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 8006ea4:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006ea8:	68b8      	ldr	r0, [r7, #8]
 8006eaa:	f000 f897 	bl	8006fdc <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006eae:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006eb2:	f000 f853 	bl	8006f5c <FLASH_WaitForLastOperation>
 8006eb6:	4603      	mov	r3, r0
 8006eb8:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006eba:	4b08      	ldr	r3, [pc, #32]	; (8006edc <HAL_FLASH_Program+0xa4>)
 8006ebc:	691b      	ldr	r3, [r3, #16]
 8006ebe:	4a07      	ldr	r2, [pc, #28]	; (8006edc <HAL_FLASH_Program+0xa4>)
 8006ec0:	f023 0301 	bic.w	r3, r3, #1
 8006ec4:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006ec6:	4b04      	ldr	r3, [pc, #16]	; (8006ed8 <HAL_FLASH_Program+0xa0>)
 8006ec8:	2200      	movs	r2, #0
 8006eca:	761a      	strb	r2, [r3, #24]
  
  return status;
 8006ecc:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ece:	4618      	mov	r0, r3
 8006ed0:	3718      	adds	r7, #24
 8006ed2:	46bd      	mov	sp, r7
 8006ed4:	bd80      	pop	{r7, pc}
 8006ed6:	bf00      	nop
 8006ed8:	20000548 	.word	0x20000548
 8006edc:	40023c00 	.word	0x40023c00

08006ee0 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 8006ee0:	b480      	push	{r7}
 8006ee2:	b083      	sub	sp, #12
 8006ee4:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 8006ee6:	2300      	movs	r3, #0
 8006ee8:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006eea:	4b0b      	ldr	r3, [pc, #44]	; (8006f18 <HAL_FLASH_Unlock+0x38>)
 8006eec:	691b      	ldr	r3, [r3, #16]
 8006eee:	2b00      	cmp	r3, #0
 8006ef0:	da0b      	bge.n	8006f0a <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 8006ef2:	4b09      	ldr	r3, [pc, #36]	; (8006f18 <HAL_FLASH_Unlock+0x38>)
 8006ef4:	4a09      	ldr	r2, [pc, #36]	; (8006f1c <HAL_FLASH_Unlock+0x3c>)
 8006ef6:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006ef8:	4b07      	ldr	r3, [pc, #28]	; (8006f18 <HAL_FLASH_Unlock+0x38>)
 8006efa:	4a09      	ldr	r2, [pc, #36]	; (8006f20 <HAL_FLASH_Unlock+0x40>)
 8006efc:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006efe:	4b06      	ldr	r3, [pc, #24]	; (8006f18 <HAL_FLASH_Unlock+0x38>)
 8006f00:	691b      	ldr	r3, [r3, #16]
 8006f02:	2b00      	cmp	r3, #0
 8006f04:	da01      	bge.n	8006f0a <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 8006f06:	2301      	movs	r3, #1
 8006f08:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006f0a:	79fb      	ldrb	r3, [r7, #7]
}
 8006f0c:	4618      	mov	r0, r3
 8006f0e:	370c      	adds	r7, #12
 8006f10:	46bd      	mov	sp, r7
 8006f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f16:	4770      	bx	lr
 8006f18:	40023c00 	.word	0x40023c00
 8006f1c:	45670123 	.word	0x45670123
 8006f20:	cdef89ab 	.word	0xcdef89ab

08006f24 <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 8006f24:	b480      	push	{r7}
 8006f26:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006f28:	4b05      	ldr	r3, [pc, #20]	; (8006f40 <HAL_FLASH_Lock+0x1c>)
 8006f2a:	691b      	ldr	r3, [r3, #16]
 8006f2c:	4a04      	ldr	r2, [pc, #16]	; (8006f40 <HAL_FLASH_Lock+0x1c>)
 8006f2e:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8006f32:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 8006f34:	2300      	movs	r3, #0
}
 8006f36:	4618      	mov	r0, r3
 8006f38:	46bd      	mov	sp, r7
 8006f3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f3e:	4770      	bx	lr
 8006f40:	40023c00 	.word	0x40023c00

08006f44 <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 8006f44:	b480      	push	{r7}
 8006f46:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006f48:	4b03      	ldr	r3, [pc, #12]	; (8006f58 <HAL_FLASH_GetError+0x14>)
 8006f4a:	69db      	ldr	r3, [r3, #28]
}  
 8006f4c:	4618      	mov	r0, r3
 8006f4e:	46bd      	mov	sp, r7
 8006f50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f54:	4770      	bx	lr
 8006f56:	bf00      	nop
 8006f58:	20000548 	.word	0x20000548

08006f5c <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006f5c:	b580      	push	{r7, lr}
 8006f5e:	b084      	sub	sp, #16
 8006f60:	af00      	add	r7, sp, #0
 8006f62:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8006f64:	2300      	movs	r3, #0
 8006f66:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006f68:	4b1a      	ldr	r3, [pc, #104]	; (8006fd4 <FLASH_WaitForLastOperation+0x78>)
 8006f6a:	2200      	movs	r2, #0
 8006f6c:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006f6e:	f7ff fd75 	bl	8006a5c <HAL_GetTick>
 8006f72:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006f74:	e010      	b.n	8006f98 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 8006f76:	687b      	ldr	r3, [r7, #4]
 8006f78:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006f7c:	d00c      	beq.n	8006f98 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006f7e:	687b      	ldr	r3, [r7, #4]
 8006f80:	2b00      	cmp	r3, #0
 8006f82:	d007      	beq.n	8006f94 <FLASH_WaitForLastOperation+0x38>
 8006f84:	f7ff fd6a 	bl	8006a5c <HAL_GetTick>
 8006f88:	4602      	mov	r2, r0
 8006f8a:	68fb      	ldr	r3, [r7, #12]
 8006f8c:	1ad3      	subs	r3, r2, r3
 8006f8e:	687a      	ldr	r2, [r7, #4]
 8006f90:	429a      	cmp	r2, r3
 8006f92:	d201      	bcs.n	8006f98 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 8006f94:	2303      	movs	r3, #3
 8006f96:	e019      	b.n	8006fcc <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006f98:	4b0f      	ldr	r3, [pc, #60]	; (8006fd8 <FLASH_WaitForLastOperation+0x7c>)
 8006f9a:	68db      	ldr	r3, [r3, #12]
 8006f9c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006fa0:	2b00      	cmp	r3, #0
 8006fa2:	d1e8      	bne.n	8006f76 <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 8006fa4:	4b0c      	ldr	r3, [pc, #48]	; (8006fd8 <FLASH_WaitForLastOperation+0x7c>)
 8006fa6:	68db      	ldr	r3, [r3, #12]
 8006fa8:	f003 0301 	and.w	r3, r3, #1
 8006fac:	2b00      	cmp	r3, #0
 8006fae:	d002      	beq.n	8006fb6 <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006fb0:	4b09      	ldr	r3, [pc, #36]	; (8006fd8 <FLASH_WaitForLastOperation+0x7c>)
 8006fb2:	2201      	movs	r2, #1
 8006fb4:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 8006fb6:	4b08      	ldr	r3, [pc, #32]	; (8006fd8 <FLASH_WaitForLastOperation+0x7c>)
 8006fb8:	68db      	ldr	r3, [r3, #12]
 8006fba:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d003      	beq.n	8006fca <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 8006fc2:	f000 f8a5 	bl	8007110 <FLASH_SetErrorCode>
    return HAL_ERROR;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e000      	b.n	8006fcc <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 8006fca:	2300      	movs	r3, #0
  
}  
 8006fcc:	4618      	mov	r0, r3
 8006fce:	3710      	adds	r7, #16
 8006fd0:	46bd      	mov	sp, r7
 8006fd2:	bd80      	pop	{r7, pc}
 8006fd4:	20000548 	.word	0x20000548
 8006fd8:	40023c00 	.word	0x40023c00

08006fdc <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 8006fdc:	b480      	push	{r7}
 8006fde:	b085      	sub	sp, #20
 8006fe0:	af00      	add	r7, sp, #0
 8006fe2:	60f8      	str	r0, [r7, #12]
 8006fe4:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006fe8:	4b14      	ldr	r3, [pc, #80]	; (800703c <FLASH_Program_DoubleWord+0x60>)
 8006fea:	691b      	ldr	r3, [r3, #16]
 8006fec:	4a13      	ldr	r2, [pc, #76]	; (800703c <FLASH_Program_DoubleWord+0x60>)
 8006fee:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006ff2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 8006ff4:	4b11      	ldr	r3, [pc, #68]	; (800703c <FLASH_Program_DoubleWord+0x60>)
 8006ff6:	691b      	ldr	r3, [r3, #16]
 8006ff8:	4a10      	ldr	r2, [pc, #64]	; (800703c <FLASH_Program_DoubleWord+0x60>)
 8006ffa:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006ffe:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007000:	4b0e      	ldr	r3, [pc, #56]	; (800703c <FLASH_Program_DoubleWord+0x60>)
 8007002:	691b      	ldr	r3, [r3, #16]
 8007004:	4a0d      	ldr	r2, [pc, #52]	; (800703c <FLASH_Program_DoubleWord+0x60>)
 8007006:	f043 0301 	orr.w	r3, r3, #1
 800700a:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 800700c:	68fb      	ldr	r3, [r7, #12]
 800700e:	683a      	ldr	r2, [r7, #0]
 8007010:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 8007012:	f3bf 8f6f 	isb	sy
}
 8007016:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8007018:	e9d7 0100 	ldrd	r0, r1, [r7]
 800701c:	f04f 0200 	mov.w	r2, #0
 8007020:	f04f 0300 	mov.w	r3, #0
 8007024:	000a      	movs	r2, r1
 8007026:	2300      	movs	r3, #0
 8007028:	68f9      	ldr	r1, [r7, #12]
 800702a:	3104      	adds	r1, #4
 800702c:	4613      	mov	r3, r2
 800702e:	600b      	str	r3, [r1, #0]
}
 8007030:	bf00      	nop
 8007032:	3714      	adds	r7, #20
 8007034:	46bd      	mov	sp, r7
 8007036:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703a:	4770      	bx	lr
 800703c:	40023c00 	.word	0x40023c00

08007040 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 800704a:	4b0d      	ldr	r3, [pc, #52]	; (8007080 <FLASH_Program_Word+0x40>)
 800704c:	691b      	ldr	r3, [r3, #16]
 800704e:	4a0c      	ldr	r2, [pc, #48]	; (8007080 <FLASH_Program_Word+0x40>)
 8007050:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007054:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 8007056:	4b0a      	ldr	r3, [pc, #40]	; (8007080 <FLASH_Program_Word+0x40>)
 8007058:	691b      	ldr	r3, [r3, #16]
 800705a:	4a09      	ldr	r2, [pc, #36]	; (8007080 <FLASH_Program_Word+0x40>)
 800705c:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8007060:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8007062:	4b07      	ldr	r3, [pc, #28]	; (8007080 <FLASH_Program_Word+0x40>)
 8007064:	691b      	ldr	r3, [r3, #16]
 8007066:	4a06      	ldr	r2, [pc, #24]	; (8007080 <FLASH_Program_Word+0x40>)
 8007068:	f043 0301 	orr.w	r3, r3, #1
 800706c:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	683a      	ldr	r2, [r7, #0]
 8007072:	601a      	str	r2, [r3, #0]
}
 8007074:	bf00      	nop
 8007076:	370c      	adds	r7, #12
 8007078:	46bd      	mov	sp, r7
 800707a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800707e:	4770      	bx	lr
 8007080:	40023c00 	.word	0x40023c00

08007084 <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 8007084:	b480      	push	{r7}
 8007086:	b083      	sub	sp, #12
 8007088:	af00      	add	r7, sp, #0
 800708a:	6078      	str	r0, [r7, #4]
 800708c:	460b      	mov	r3, r1
 800708e:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007090:	4b0d      	ldr	r3, [pc, #52]	; (80070c8 <FLASH_Program_HalfWord+0x44>)
 8007092:	691b      	ldr	r3, [r3, #16]
 8007094:	4a0c      	ldr	r2, [pc, #48]	; (80070c8 <FLASH_Program_HalfWord+0x44>)
 8007096:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800709a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 800709c:	4b0a      	ldr	r3, [pc, #40]	; (80070c8 <FLASH_Program_HalfWord+0x44>)
 800709e:	691b      	ldr	r3, [r3, #16]
 80070a0:	4a09      	ldr	r2, [pc, #36]	; (80070c8 <FLASH_Program_HalfWord+0x44>)
 80070a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80070a6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80070a8:	4b07      	ldr	r3, [pc, #28]	; (80070c8 <FLASH_Program_HalfWord+0x44>)
 80070aa:	691b      	ldr	r3, [r3, #16]
 80070ac:	4a06      	ldr	r2, [pc, #24]	; (80070c8 <FLASH_Program_HalfWord+0x44>)
 80070ae:	f043 0301 	orr.w	r3, r3, #1
 80070b2:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80070b4:	687b      	ldr	r3, [r7, #4]
 80070b6:	887a      	ldrh	r2, [r7, #2]
 80070b8:	801a      	strh	r2, [r3, #0]
}
 80070ba:	bf00      	nop
 80070bc:	370c      	adds	r7, #12
 80070be:	46bd      	mov	sp, r7
 80070c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070c4:	4770      	bx	lr
 80070c6:	bf00      	nop
 80070c8:	40023c00 	.word	0x40023c00

080070cc <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80070cc:	b480      	push	{r7}
 80070ce:	b083      	sub	sp, #12
 80070d0:	af00      	add	r7, sp, #0
 80070d2:	6078      	str	r0, [r7, #4]
 80070d4:	460b      	mov	r3, r1
 80070d6:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80070d8:	4b0c      	ldr	r3, [pc, #48]	; (800710c <FLASH_Program_Byte+0x40>)
 80070da:	691b      	ldr	r3, [r3, #16]
 80070dc:	4a0b      	ldr	r2, [pc, #44]	; (800710c <FLASH_Program_Byte+0x40>)
 80070de:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80070e2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80070e4:	4b09      	ldr	r3, [pc, #36]	; (800710c <FLASH_Program_Byte+0x40>)
 80070e6:	4a09      	ldr	r2, [pc, #36]	; (800710c <FLASH_Program_Byte+0x40>)
 80070e8:	691b      	ldr	r3, [r3, #16]
 80070ea:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80070ec:	4b07      	ldr	r3, [pc, #28]	; (800710c <FLASH_Program_Byte+0x40>)
 80070ee:	691b      	ldr	r3, [r3, #16]
 80070f0:	4a06      	ldr	r2, [pc, #24]	; (800710c <FLASH_Program_Byte+0x40>)
 80070f2:	f043 0301 	orr.w	r3, r3, #1
 80070f6:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	78fa      	ldrb	r2, [r7, #3]
 80070fc:	701a      	strb	r2, [r3, #0]
}
 80070fe:	bf00      	nop
 8007100:	370c      	adds	r7, #12
 8007102:	46bd      	mov	sp, r7
 8007104:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007108:	4770      	bx	lr
 800710a:	bf00      	nop
 800710c:	40023c00 	.word	0x40023c00

08007110 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8007110:	b480      	push	{r7}
 8007112:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 8007114:	4b27      	ldr	r3, [pc, #156]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 8007116:	68db      	ldr	r3, [r3, #12]
 8007118:	f003 0310 	and.w	r3, r3, #16
 800711c:	2b00      	cmp	r3, #0
 800711e:	d008      	beq.n	8007132 <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8007120:	4b25      	ldr	r3, [pc, #148]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 8007122:	69db      	ldr	r3, [r3, #28]
 8007124:	f043 0310 	orr.w	r3, r3, #16
 8007128:	4a23      	ldr	r2, [pc, #140]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 800712a:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 800712c:	4b21      	ldr	r3, [pc, #132]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 800712e:	2210      	movs	r2, #16
 8007130:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8007132:	4b20      	ldr	r3, [pc, #128]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 8007134:	68db      	ldr	r3, [r3, #12]
 8007136:	f003 0320 	and.w	r3, r3, #32
 800713a:	2b00      	cmp	r3, #0
 800713c:	d008      	beq.n	8007150 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800713e:	4b1e      	ldr	r3, [pc, #120]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 8007140:	69db      	ldr	r3, [r3, #28]
 8007142:	f043 0308 	orr.w	r3, r3, #8
 8007146:	4a1c      	ldr	r2, [pc, #112]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 8007148:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 800714a:	4b1a      	ldr	r3, [pc, #104]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 800714c:	2220      	movs	r2, #32
 800714e:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8007150:	4b18      	ldr	r3, [pc, #96]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007158:	2b00      	cmp	r3, #0
 800715a:	d008      	beq.n	800716e <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 800715c:	4b16      	ldr	r3, [pc, #88]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 800715e:	69db      	ldr	r3, [r3, #28]
 8007160:	f043 0304 	orr.w	r3, r3, #4
 8007164:	4a14      	ldr	r2, [pc, #80]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 8007166:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8007168:	4b12      	ldr	r3, [pc, #72]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 800716a:	2240      	movs	r2, #64	; 0x40
 800716c:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 800716e:	4b11      	ldr	r3, [pc, #68]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 8007170:	68db      	ldr	r3, [r3, #12]
 8007172:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007176:	2b00      	cmp	r3, #0
 8007178:	d008      	beq.n	800718c <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 800717a:	4b0f      	ldr	r3, [pc, #60]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 800717c:	69db      	ldr	r3, [r3, #28]
 800717e:	f043 0302 	orr.w	r3, r3, #2
 8007182:	4a0d      	ldr	r2, [pc, #52]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 8007184:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8007186:	4b0b      	ldr	r3, [pc, #44]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 8007188:	2280      	movs	r2, #128	; 0x80
 800718a:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 800718c:	4b09      	ldr	r3, [pc, #36]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 800718e:	68db      	ldr	r3, [r3, #12]
 8007190:	f003 0302 	and.w	r3, r3, #2
 8007194:	2b00      	cmp	r3, #0
 8007196:	d008      	beq.n	80071aa <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8007198:	4b07      	ldr	r3, [pc, #28]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 800719a:	69db      	ldr	r3, [r3, #28]
 800719c:	f043 0320 	orr.w	r3, r3, #32
 80071a0:	4a05      	ldr	r2, [pc, #20]	; (80071b8 <FLASH_SetErrorCode+0xa8>)
 80071a2:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80071a4:	4b03      	ldr	r3, [pc, #12]	; (80071b4 <FLASH_SetErrorCode+0xa4>)
 80071a6:	2202      	movs	r2, #2
 80071a8:	60da      	str	r2, [r3, #12]
  }
}
 80071aa:	bf00      	nop
 80071ac:	46bd      	mov	sp, r7
 80071ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b2:	4770      	bx	lr
 80071b4:	40023c00 	.word	0x40023c00
 80071b8:	20000548 	.word	0x20000548

080071bc <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b084      	sub	sp, #16
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
 80071c4:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80071c6:	2301      	movs	r3, #1
 80071c8:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80071ca:	2300      	movs	r3, #0
 80071cc:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80071ce:	4b31      	ldr	r3, [pc, #196]	; (8007294 <HAL_FLASHEx_Erase+0xd8>)
 80071d0:	7e1b      	ldrb	r3, [r3, #24]
 80071d2:	2b01      	cmp	r3, #1
 80071d4:	d101      	bne.n	80071da <HAL_FLASHEx_Erase+0x1e>
 80071d6:	2302      	movs	r3, #2
 80071d8:	e058      	b.n	800728c <HAL_FLASHEx_Erase+0xd0>
 80071da:	4b2e      	ldr	r3, [pc, #184]	; (8007294 <HAL_FLASHEx_Erase+0xd8>)
 80071dc:	2201      	movs	r2, #1
 80071de:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80071e0:	f24c 3050 	movw	r0, #50000	; 0xc350
 80071e4:	f7ff feba 	bl	8006f5c <FLASH_WaitForLastOperation>
 80071e8:	4603      	mov	r3, r0
 80071ea:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 80071ec:	7bfb      	ldrb	r3, [r7, #15]
 80071ee:	2b00      	cmp	r3, #0
 80071f0:	d148      	bne.n	8007284 <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 80071f2:	683b      	ldr	r3, [r7, #0]
 80071f4:	f04f 32ff 	mov.w	r2, #4294967295
 80071f8:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	2b01      	cmp	r3, #1
 8007200:	d115      	bne.n	800722e <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	b2da      	uxtb	r2, r3
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	685b      	ldr	r3, [r3, #4]
 800720c:	4619      	mov	r1, r3
 800720e:	4610      	mov	r0, r2
 8007210:	f000 f844 	bl	800729c <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007214:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007218:	f7ff fea0 	bl	8006f5c <FLASH_WaitForLastOperation>
 800721c:	4603      	mov	r3, r0
 800721e:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8007220:	4b1d      	ldr	r3, [pc, #116]	; (8007298 <HAL_FLASHEx_Erase+0xdc>)
 8007222:	691b      	ldr	r3, [r3, #16]
 8007224:	4a1c      	ldr	r2, [pc, #112]	; (8007298 <HAL_FLASHEx_Erase+0xdc>)
 8007226:	f023 0304 	bic.w	r3, r3, #4
 800722a:	6113      	str	r3, [r2, #16]
 800722c:	e028      	b.n	8007280 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800722e:	687b      	ldr	r3, [r7, #4]
 8007230:	689b      	ldr	r3, [r3, #8]
 8007232:	60bb      	str	r3, [r7, #8]
 8007234:	e01c      	b.n	8007270 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8007236:	687b      	ldr	r3, [r7, #4]
 8007238:	691b      	ldr	r3, [r3, #16]
 800723a:	b2db      	uxtb	r3, r3
 800723c:	4619      	mov	r1, r3
 800723e:	68b8      	ldr	r0, [r7, #8]
 8007240:	f000 f850 	bl	80072e4 <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8007244:	f24c 3050 	movw	r0, #50000	; 0xc350
 8007248:	f7ff fe88 	bl	8006f5c <FLASH_WaitForLastOperation>
 800724c:	4603      	mov	r3, r0
 800724e:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8007250:	4b11      	ldr	r3, [pc, #68]	; (8007298 <HAL_FLASHEx_Erase+0xdc>)
 8007252:	691b      	ldr	r3, [r3, #16]
 8007254:	4a10      	ldr	r2, [pc, #64]	; (8007298 <HAL_FLASHEx_Erase+0xdc>)
 8007256:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 800725a:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 800725c:	7bfb      	ldrb	r3, [r7, #15]
 800725e:	2b00      	cmp	r3, #0
 8007260:	d003      	beq.n	800726a <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8007262:	683b      	ldr	r3, [r7, #0]
 8007264:	68ba      	ldr	r2, [r7, #8]
 8007266:	601a      	str	r2, [r3, #0]
          break;
 8007268:	e00a      	b.n	8007280 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 800726a:	68bb      	ldr	r3, [r7, #8]
 800726c:	3301      	adds	r3, #1
 800726e:	60bb      	str	r3, [r7, #8]
 8007270:	687b      	ldr	r3, [r7, #4]
 8007272:	68da      	ldr	r2, [r3, #12]
 8007274:	687b      	ldr	r3, [r7, #4]
 8007276:	689b      	ldr	r3, [r3, #8]
 8007278:	4413      	add	r3, r2
 800727a:	68ba      	ldr	r2, [r7, #8]
 800727c:	429a      	cmp	r2, r3
 800727e:	d3da      	bcc.n	8007236 <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8007280:	f000 f878 	bl	8007374 <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8007284:	4b03      	ldr	r3, [pc, #12]	; (8007294 <HAL_FLASHEx_Erase+0xd8>)
 8007286:	2200      	movs	r2, #0
 8007288:	761a      	strb	r2, [r3, #24]

  return status;
 800728a:	7bfb      	ldrb	r3, [r7, #15]
}
 800728c:	4618      	mov	r0, r3
 800728e:	3710      	adds	r7, #16
 8007290:	46bd      	mov	sp, r7
 8007292:	bd80      	pop	{r7, pc}
 8007294:	20000548 	.word	0x20000548
 8007298:	40023c00 	.word	0x40023c00

0800729c <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 800729c:	b480      	push	{r7}
 800729e:	b083      	sub	sp, #12
 80072a0:	af00      	add	r7, sp, #0
 80072a2:	4603      	mov	r3, r0
 80072a4:	6039      	str	r1, [r7, #0]
 80072a6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80072a8:	4b0d      	ldr	r3, [pc, #52]	; (80072e0 <FLASH_MassErase+0x44>)
 80072aa:	691b      	ldr	r3, [r3, #16]
 80072ac:	4a0c      	ldr	r2, [pc, #48]	; (80072e0 <FLASH_MassErase+0x44>)
 80072ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80072b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 80072b4:	4b0a      	ldr	r3, [pc, #40]	; (80072e0 <FLASH_MassErase+0x44>)
 80072b6:	691b      	ldr	r3, [r3, #16]
 80072b8:	4a09      	ldr	r2, [pc, #36]	; (80072e0 <FLASH_MassErase+0x44>)
 80072ba:	f043 0304 	orr.w	r3, r3, #4
 80072be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 80072c0:	4b07      	ldr	r3, [pc, #28]	; (80072e0 <FLASH_MassErase+0x44>)
 80072c2:	691a      	ldr	r2, [r3, #16]
 80072c4:	79fb      	ldrb	r3, [r7, #7]
 80072c6:	021b      	lsls	r3, r3, #8
 80072c8:	4313      	orrs	r3, r2
 80072ca:	4a05      	ldr	r2, [pc, #20]	; (80072e0 <FLASH_MassErase+0x44>)
 80072cc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80072d0:	6113      	str	r3, [r2, #16]
}
 80072d2:	bf00      	nop
 80072d4:	370c      	adds	r7, #12
 80072d6:	46bd      	mov	sp, r7
 80072d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072dc:	4770      	bx	lr
 80072de:	bf00      	nop
 80072e0:	40023c00 	.word	0x40023c00

080072e4 <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 80072e4:	b480      	push	{r7}
 80072e6:	b085      	sub	sp, #20
 80072e8:	af00      	add	r7, sp, #0
 80072ea:	6078      	str	r0, [r7, #4]
 80072ec:	460b      	mov	r3, r1
 80072ee:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 80072f0:	2300      	movs	r3, #0
 80072f2:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 80072f4:	78fb      	ldrb	r3, [r7, #3]
 80072f6:	2b00      	cmp	r3, #0
 80072f8:	d102      	bne.n	8007300 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 80072fa:	2300      	movs	r3, #0
 80072fc:	60fb      	str	r3, [r7, #12]
 80072fe:	e010      	b.n	8007322 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8007300:	78fb      	ldrb	r3, [r7, #3]
 8007302:	2b01      	cmp	r3, #1
 8007304:	d103      	bne.n	800730e <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8007306:	f44f 7380 	mov.w	r3, #256	; 0x100
 800730a:	60fb      	str	r3, [r7, #12]
 800730c:	e009      	b.n	8007322 <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 800730e:	78fb      	ldrb	r3, [r7, #3]
 8007310:	2b02      	cmp	r3, #2
 8007312:	d103      	bne.n	800731c <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8007314:	f44f 7300 	mov.w	r3, #512	; 0x200
 8007318:	60fb      	str	r3, [r7, #12]
 800731a:	e002      	b.n	8007322 <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 800731c:	f44f 7340 	mov.w	r3, #768	; 0x300
 8007320:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8007322:	4b13      	ldr	r3, [pc, #76]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 8007324:	691b      	ldr	r3, [r3, #16]
 8007326:	4a12      	ldr	r2, [pc, #72]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 8007328:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800732c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 800732e:	4b10      	ldr	r3, [pc, #64]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 8007330:	691a      	ldr	r2, [r3, #16]
 8007332:	490f      	ldr	r1, [pc, #60]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 8007334:	68fb      	ldr	r3, [r7, #12]
 8007336:	4313      	orrs	r3, r2
 8007338:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 800733a:	4b0d      	ldr	r3, [pc, #52]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 800733c:	691b      	ldr	r3, [r3, #16]
 800733e:	4a0c      	ldr	r2, [pc, #48]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 8007340:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8007344:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8007346:	4b0a      	ldr	r3, [pc, #40]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 8007348:	691a      	ldr	r2, [r3, #16]
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	00db      	lsls	r3, r3, #3
 800734e:	4313      	orrs	r3, r2
 8007350:	4a07      	ldr	r2, [pc, #28]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 8007352:	f043 0302 	orr.w	r3, r3, #2
 8007356:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8007358:	4b05      	ldr	r3, [pc, #20]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 800735a:	691b      	ldr	r3, [r3, #16]
 800735c:	4a04      	ldr	r2, [pc, #16]	; (8007370 <FLASH_Erase_Sector+0x8c>)
 800735e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007362:	6113      	str	r3, [r2, #16]
}
 8007364:	bf00      	nop
 8007366:	3714      	adds	r7, #20
 8007368:	46bd      	mov	sp, r7
 800736a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800736e:	4770      	bx	lr
 8007370:	40023c00 	.word	0x40023c00

08007374 <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8007374:	b480      	push	{r7}
 8007376:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8007378:	4b20      	ldr	r3, [pc, #128]	; (80073fc <FLASH_FlushCaches+0x88>)
 800737a:	681b      	ldr	r3, [r3, #0]
 800737c:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8007380:	2b00      	cmp	r3, #0
 8007382:	d017      	beq.n	80073b4 <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8007384:	4b1d      	ldr	r3, [pc, #116]	; (80073fc <FLASH_FlushCaches+0x88>)
 8007386:	681b      	ldr	r3, [r3, #0]
 8007388:	4a1c      	ldr	r2, [pc, #112]	; (80073fc <FLASH_FlushCaches+0x88>)
 800738a:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800738e:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8007390:	4b1a      	ldr	r3, [pc, #104]	; (80073fc <FLASH_FlushCaches+0x88>)
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	4a19      	ldr	r2, [pc, #100]	; (80073fc <FLASH_FlushCaches+0x88>)
 8007396:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 800739a:	6013      	str	r3, [r2, #0]
 800739c:	4b17      	ldr	r3, [pc, #92]	; (80073fc <FLASH_FlushCaches+0x88>)
 800739e:	681b      	ldr	r3, [r3, #0]
 80073a0:	4a16      	ldr	r2, [pc, #88]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073a2:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073a6:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80073a8:	4b14      	ldr	r3, [pc, #80]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	4a13      	ldr	r2, [pc, #76]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073ae:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80073b2:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 80073b4:	4b11      	ldr	r3, [pc, #68]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073b6:	681b      	ldr	r3, [r3, #0]
 80073b8:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80073bc:	2b00      	cmp	r3, #0
 80073be:	d017      	beq.n	80073f0 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 80073c0:	4b0e      	ldr	r3, [pc, #56]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073c2:	681b      	ldr	r3, [r3, #0]
 80073c4:	4a0d      	ldr	r2, [pc, #52]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073c6:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073ca:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 80073cc:	4b0b      	ldr	r3, [pc, #44]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073ce:	681b      	ldr	r3, [r3, #0]
 80073d0:	4a0a      	ldr	r2, [pc, #40]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073d2:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 80073d6:	6013      	str	r3, [r2, #0]
 80073d8:	4b08      	ldr	r3, [pc, #32]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073da:	681b      	ldr	r3, [r3, #0]
 80073dc:	4a07      	ldr	r2, [pc, #28]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073de:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80073e2:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 80073e4:	4b05      	ldr	r3, [pc, #20]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073e6:	681b      	ldr	r3, [r3, #0]
 80073e8:	4a04      	ldr	r2, [pc, #16]	; (80073fc <FLASH_FlushCaches+0x88>)
 80073ea:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80073ee:	6013      	str	r3, [r2, #0]
  }
}
 80073f0:	bf00      	nop
 80073f2:	46bd      	mov	sp, r7
 80073f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073f8:	4770      	bx	lr
 80073fa:	bf00      	nop
 80073fc:	40023c00 	.word	0x40023c00

08007400 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8007400:	b480      	push	{r7}
 8007402:	b089      	sub	sp, #36	; 0x24
 8007404:	af00      	add	r7, sp, #0
 8007406:	6078      	str	r0, [r7, #4]
 8007408:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800740a:	2300      	movs	r3, #0
 800740c:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800740e:	2300      	movs	r3, #0
 8007410:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8007412:	2300      	movs	r3, #0
 8007414:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8007416:	2300      	movs	r3, #0
 8007418:	61fb      	str	r3, [r7, #28]
 800741a:	e16b      	b.n	80076f4 <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800741c:	2201      	movs	r2, #1
 800741e:	69fb      	ldr	r3, [r7, #28]
 8007420:	fa02 f303 	lsl.w	r3, r2, r3
 8007424:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8007426:	683b      	ldr	r3, [r7, #0]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	697a      	ldr	r2, [r7, #20]
 800742c:	4013      	ands	r3, r2
 800742e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8007430:	693a      	ldr	r2, [r7, #16]
 8007432:	697b      	ldr	r3, [r7, #20]
 8007434:	429a      	cmp	r2, r3
 8007436:	f040 815a 	bne.w	80076ee <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800743a:	683b      	ldr	r3, [r7, #0]
 800743c:	685b      	ldr	r3, [r3, #4]
 800743e:	f003 0303 	and.w	r3, r3, #3
 8007442:	2b01      	cmp	r3, #1
 8007444:	d005      	beq.n	8007452 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8007446:	683b      	ldr	r3, [r7, #0]
 8007448:	685b      	ldr	r3, [r3, #4]
 800744a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800744e:	2b02      	cmp	r3, #2
 8007450:	d130      	bne.n	80074b4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	689b      	ldr	r3, [r3, #8]
 8007456:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8007458:	69fb      	ldr	r3, [r7, #28]
 800745a:	005b      	lsls	r3, r3, #1
 800745c:	2203      	movs	r2, #3
 800745e:	fa02 f303 	lsl.w	r3, r2, r3
 8007462:	43db      	mvns	r3, r3
 8007464:	69ba      	ldr	r2, [r7, #24]
 8007466:	4013      	ands	r3, r2
 8007468:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800746a:	683b      	ldr	r3, [r7, #0]
 800746c:	68da      	ldr	r2, [r3, #12]
 800746e:	69fb      	ldr	r3, [r7, #28]
 8007470:	005b      	lsls	r3, r3, #1
 8007472:	fa02 f303 	lsl.w	r3, r2, r3
 8007476:	69ba      	ldr	r2, [r7, #24]
 8007478:	4313      	orrs	r3, r2
 800747a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800747c:	687b      	ldr	r3, [r7, #4]
 800747e:	69ba      	ldr	r2, [r7, #24]
 8007480:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8007482:	687b      	ldr	r3, [r7, #4]
 8007484:	685b      	ldr	r3, [r3, #4]
 8007486:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8007488:	2201      	movs	r2, #1
 800748a:	69fb      	ldr	r3, [r7, #28]
 800748c:	fa02 f303 	lsl.w	r3, r2, r3
 8007490:	43db      	mvns	r3, r3
 8007492:	69ba      	ldr	r2, [r7, #24]
 8007494:	4013      	ands	r3, r2
 8007496:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	685b      	ldr	r3, [r3, #4]
 800749c:	091b      	lsrs	r3, r3, #4
 800749e:	f003 0201 	and.w	r2, r3, #1
 80074a2:	69fb      	ldr	r3, [r7, #28]
 80074a4:	fa02 f303 	lsl.w	r3, r2, r3
 80074a8:	69ba      	ldr	r2, [r7, #24]
 80074aa:	4313      	orrs	r3, r2
 80074ac:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	69ba      	ldr	r2, [r7, #24]
 80074b2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80074b4:	683b      	ldr	r3, [r7, #0]
 80074b6:	685b      	ldr	r3, [r3, #4]
 80074b8:	f003 0303 	and.w	r3, r3, #3
 80074bc:	2b03      	cmp	r3, #3
 80074be:	d017      	beq.n	80074f0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	68db      	ldr	r3, [r3, #12]
 80074c4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80074c6:	69fb      	ldr	r3, [r7, #28]
 80074c8:	005b      	lsls	r3, r3, #1
 80074ca:	2203      	movs	r2, #3
 80074cc:	fa02 f303 	lsl.w	r3, r2, r3
 80074d0:	43db      	mvns	r3, r3
 80074d2:	69ba      	ldr	r2, [r7, #24]
 80074d4:	4013      	ands	r3, r2
 80074d6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80074d8:	683b      	ldr	r3, [r7, #0]
 80074da:	689a      	ldr	r2, [r3, #8]
 80074dc:	69fb      	ldr	r3, [r7, #28]
 80074de:	005b      	lsls	r3, r3, #1
 80074e0:	fa02 f303 	lsl.w	r3, r2, r3
 80074e4:	69ba      	ldr	r2, [r7, #24]
 80074e6:	4313      	orrs	r3, r2
 80074e8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	69ba      	ldr	r2, [r7, #24]
 80074ee:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80074f0:	683b      	ldr	r3, [r7, #0]
 80074f2:	685b      	ldr	r3, [r3, #4]
 80074f4:	f003 0303 	and.w	r3, r3, #3
 80074f8:	2b02      	cmp	r3, #2
 80074fa:	d123      	bne.n	8007544 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80074fc:	69fb      	ldr	r3, [r7, #28]
 80074fe:	08da      	lsrs	r2, r3, #3
 8007500:	687b      	ldr	r3, [r7, #4]
 8007502:	3208      	adds	r2, #8
 8007504:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8007508:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800750a:	69fb      	ldr	r3, [r7, #28]
 800750c:	f003 0307 	and.w	r3, r3, #7
 8007510:	009b      	lsls	r3, r3, #2
 8007512:	220f      	movs	r2, #15
 8007514:	fa02 f303 	lsl.w	r3, r2, r3
 8007518:	43db      	mvns	r3, r3
 800751a:	69ba      	ldr	r2, [r7, #24]
 800751c:	4013      	ands	r3, r2
 800751e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8007520:	683b      	ldr	r3, [r7, #0]
 8007522:	691a      	ldr	r2, [r3, #16]
 8007524:	69fb      	ldr	r3, [r7, #28]
 8007526:	f003 0307 	and.w	r3, r3, #7
 800752a:	009b      	lsls	r3, r3, #2
 800752c:	fa02 f303 	lsl.w	r3, r2, r3
 8007530:	69ba      	ldr	r2, [r7, #24]
 8007532:	4313      	orrs	r3, r2
 8007534:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8007536:	69fb      	ldr	r3, [r7, #28]
 8007538:	08da      	lsrs	r2, r3, #3
 800753a:	687b      	ldr	r3, [r7, #4]
 800753c:	3208      	adds	r2, #8
 800753e:	69b9      	ldr	r1, [r7, #24]
 8007540:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8007544:	687b      	ldr	r3, [r7, #4]
 8007546:	681b      	ldr	r3, [r3, #0]
 8007548:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800754a:	69fb      	ldr	r3, [r7, #28]
 800754c:	005b      	lsls	r3, r3, #1
 800754e:	2203      	movs	r2, #3
 8007550:	fa02 f303 	lsl.w	r3, r2, r3
 8007554:	43db      	mvns	r3, r3
 8007556:	69ba      	ldr	r2, [r7, #24]
 8007558:	4013      	ands	r3, r2
 800755a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800755c:	683b      	ldr	r3, [r7, #0]
 800755e:	685b      	ldr	r3, [r3, #4]
 8007560:	f003 0203 	and.w	r2, r3, #3
 8007564:	69fb      	ldr	r3, [r7, #28]
 8007566:	005b      	lsls	r3, r3, #1
 8007568:	fa02 f303 	lsl.w	r3, r2, r3
 800756c:	69ba      	ldr	r2, [r7, #24]
 800756e:	4313      	orrs	r3, r2
 8007570:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8007572:	687b      	ldr	r3, [r7, #4]
 8007574:	69ba      	ldr	r2, [r7, #24]
 8007576:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8007578:	683b      	ldr	r3, [r7, #0]
 800757a:	685b      	ldr	r3, [r3, #4]
 800757c:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8007580:	2b00      	cmp	r3, #0
 8007582:	f000 80b4 	beq.w	80076ee <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8007586:	2300      	movs	r3, #0
 8007588:	60fb      	str	r3, [r7, #12]
 800758a:	4b60      	ldr	r3, [pc, #384]	; (800770c <HAL_GPIO_Init+0x30c>)
 800758c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800758e:	4a5f      	ldr	r2, [pc, #380]	; (800770c <HAL_GPIO_Init+0x30c>)
 8007590:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8007594:	6453      	str	r3, [r2, #68]	; 0x44
 8007596:	4b5d      	ldr	r3, [pc, #372]	; (800770c <HAL_GPIO_Init+0x30c>)
 8007598:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800759a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800759e:	60fb      	str	r3, [r7, #12]
 80075a0:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80075a2:	4a5b      	ldr	r2, [pc, #364]	; (8007710 <HAL_GPIO_Init+0x310>)
 80075a4:	69fb      	ldr	r3, [r7, #28]
 80075a6:	089b      	lsrs	r3, r3, #2
 80075a8:	3302      	adds	r3, #2
 80075aa:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80075ae:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80075b0:	69fb      	ldr	r3, [r7, #28]
 80075b2:	f003 0303 	and.w	r3, r3, #3
 80075b6:	009b      	lsls	r3, r3, #2
 80075b8:	220f      	movs	r2, #15
 80075ba:	fa02 f303 	lsl.w	r3, r2, r3
 80075be:	43db      	mvns	r3, r3
 80075c0:	69ba      	ldr	r2, [r7, #24]
 80075c2:	4013      	ands	r3, r2
 80075c4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80075c6:	687b      	ldr	r3, [r7, #4]
 80075c8:	4a52      	ldr	r2, [pc, #328]	; (8007714 <HAL_GPIO_Init+0x314>)
 80075ca:	4293      	cmp	r3, r2
 80075cc:	d02b      	beq.n	8007626 <HAL_GPIO_Init+0x226>
 80075ce:	687b      	ldr	r3, [r7, #4]
 80075d0:	4a51      	ldr	r2, [pc, #324]	; (8007718 <HAL_GPIO_Init+0x318>)
 80075d2:	4293      	cmp	r3, r2
 80075d4:	d025      	beq.n	8007622 <HAL_GPIO_Init+0x222>
 80075d6:	687b      	ldr	r3, [r7, #4]
 80075d8:	4a50      	ldr	r2, [pc, #320]	; (800771c <HAL_GPIO_Init+0x31c>)
 80075da:	4293      	cmp	r3, r2
 80075dc:	d01f      	beq.n	800761e <HAL_GPIO_Init+0x21e>
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	4a4f      	ldr	r2, [pc, #316]	; (8007720 <HAL_GPIO_Init+0x320>)
 80075e2:	4293      	cmp	r3, r2
 80075e4:	d019      	beq.n	800761a <HAL_GPIO_Init+0x21a>
 80075e6:	687b      	ldr	r3, [r7, #4]
 80075e8:	4a4e      	ldr	r2, [pc, #312]	; (8007724 <HAL_GPIO_Init+0x324>)
 80075ea:	4293      	cmp	r3, r2
 80075ec:	d013      	beq.n	8007616 <HAL_GPIO_Init+0x216>
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	4a4d      	ldr	r2, [pc, #308]	; (8007728 <HAL_GPIO_Init+0x328>)
 80075f2:	4293      	cmp	r3, r2
 80075f4:	d00d      	beq.n	8007612 <HAL_GPIO_Init+0x212>
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	4a4c      	ldr	r2, [pc, #304]	; (800772c <HAL_GPIO_Init+0x32c>)
 80075fa:	4293      	cmp	r3, r2
 80075fc:	d007      	beq.n	800760e <HAL_GPIO_Init+0x20e>
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	4a4b      	ldr	r2, [pc, #300]	; (8007730 <HAL_GPIO_Init+0x330>)
 8007602:	4293      	cmp	r3, r2
 8007604:	d101      	bne.n	800760a <HAL_GPIO_Init+0x20a>
 8007606:	2307      	movs	r3, #7
 8007608:	e00e      	b.n	8007628 <HAL_GPIO_Init+0x228>
 800760a:	2308      	movs	r3, #8
 800760c:	e00c      	b.n	8007628 <HAL_GPIO_Init+0x228>
 800760e:	2306      	movs	r3, #6
 8007610:	e00a      	b.n	8007628 <HAL_GPIO_Init+0x228>
 8007612:	2305      	movs	r3, #5
 8007614:	e008      	b.n	8007628 <HAL_GPIO_Init+0x228>
 8007616:	2304      	movs	r3, #4
 8007618:	e006      	b.n	8007628 <HAL_GPIO_Init+0x228>
 800761a:	2303      	movs	r3, #3
 800761c:	e004      	b.n	8007628 <HAL_GPIO_Init+0x228>
 800761e:	2302      	movs	r3, #2
 8007620:	e002      	b.n	8007628 <HAL_GPIO_Init+0x228>
 8007622:	2301      	movs	r3, #1
 8007624:	e000      	b.n	8007628 <HAL_GPIO_Init+0x228>
 8007626:	2300      	movs	r3, #0
 8007628:	69fa      	ldr	r2, [r7, #28]
 800762a:	f002 0203 	and.w	r2, r2, #3
 800762e:	0092      	lsls	r2, r2, #2
 8007630:	4093      	lsls	r3, r2
 8007632:	69ba      	ldr	r2, [r7, #24]
 8007634:	4313      	orrs	r3, r2
 8007636:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8007638:	4935      	ldr	r1, [pc, #212]	; (8007710 <HAL_GPIO_Init+0x310>)
 800763a:	69fb      	ldr	r3, [r7, #28]
 800763c:	089b      	lsrs	r3, r3, #2
 800763e:	3302      	adds	r3, #2
 8007640:	69ba      	ldr	r2, [r7, #24]
 8007642:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8007646:	4b3b      	ldr	r3, [pc, #236]	; (8007734 <HAL_GPIO_Init+0x334>)
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800764c:	693b      	ldr	r3, [r7, #16]
 800764e:	43db      	mvns	r3, r3
 8007650:	69ba      	ldr	r2, [r7, #24]
 8007652:	4013      	ands	r3, r2
 8007654:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8007656:	683b      	ldr	r3, [r7, #0]
 8007658:	685b      	ldr	r3, [r3, #4]
 800765a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d003      	beq.n	800766a <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8007662:	69ba      	ldr	r2, [r7, #24]
 8007664:	693b      	ldr	r3, [r7, #16]
 8007666:	4313      	orrs	r3, r2
 8007668:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 800766a:	4a32      	ldr	r2, [pc, #200]	; (8007734 <HAL_GPIO_Init+0x334>)
 800766c:	69bb      	ldr	r3, [r7, #24]
 800766e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8007670:	4b30      	ldr	r3, [pc, #192]	; (8007734 <HAL_GPIO_Init+0x334>)
 8007672:	685b      	ldr	r3, [r3, #4]
 8007674:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8007676:	693b      	ldr	r3, [r7, #16]
 8007678:	43db      	mvns	r3, r3
 800767a:	69ba      	ldr	r2, [r7, #24]
 800767c:	4013      	ands	r3, r2
 800767e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8007680:	683b      	ldr	r3, [r7, #0]
 8007682:	685b      	ldr	r3, [r3, #4]
 8007684:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007688:	2b00      	cmp	r3, #0
 800768a:	d003      	beq.n	8007694 <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 800768c:	69ba      	ldr	r2, [r7, #24]
 800768e:	693b      	ldr	r3, [r7, #16]
 8007690:	4313      	orrs	r3, r2
 8007692:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8007694:	4a27      	ldr	r2, [pc, #156]	; (8007734 <HAL_GPIO_Init+0x334>)
 8007696:	69bb      	ldr	r3, [r7, #24]
 8007698:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800769a:	4b26      	ldr	r3, [pc, #152]	; (8007734 <HAL_GPIO_Init+0x334>)
 800769c:	689b      	ldr	r3, [r3, #8]
 800769e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076a0:	693b      	ldr	r3, [r7, #16]
 80076a2:	43db      	mvns	r3, r3
 80076a4:	69ba      	ldr	r2, [r7, #24]
 80076a6:	4013      	ands	r3, r2
 80076a8:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80076aa:	683b      	ldr	r3, [r7, #0]
 80076ac:	685b      	ldr	r3, [r3, #4]
 80076ae:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80076b2:	2b00      	cmp	r3, #0
 80076b4:	d003      	beq.n	80076be <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 80076b6:	69ba      	ldr	r2, [r7, #24]
 80076b8:	693b      	ldr	r3, [r7, #16]
 80076ba:	4313      	orrs	r3, r2
 80076bc:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80076be:	4a1d      	ldr	r2, [pc, #116]	; (8007734 <HAL_GPIO_Init+0x334>)
 80076c0:	69bb      	ldr	r3, [r7, #24]
 80076c2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80076c4:	4b1b      	ldr	r3, [pc, #108]	; (8007734 <HAL_GPIO_Init+0x334>)
 80076c6:	68db      	ldr	r3, [r3, #12]
 80076c8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80076ca:	693b      	ldr	r3, [r7, #16]
 80076cc:	43db      	mvns	r3, r3
 80076ce:	69ba      	ldr	r2, [r7, #24]
 80076d0:	4013      	ands	r3, r2
 80076d2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 80076d4:	683b      	ldr	r3, [r7, #0]
 80076d6:	685b      	ldr	r3, [r3, #4]
 80076d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80076dc:	2b00      	cmp	r3, #0
 80076de:	d003      	beq.n	80076e8 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 80076e0:	69ba      	ldr	r2, [r7, #24]
 80076e2:	693b      	ldr	r3, [r7, #16]
 80076e4:	4313      	orrs	r3, r2
 80076e6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80076e8:	4a12      	ldr	r2, [pc, #72]	; (8007734 <HAL_GPIO_Init+0x334>)
 80076ea:	69bb      	ldr	r3, [r7, #24]
 80076ec:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80076ee:	69fb      	ldr	r3, [r7, #28]
 80076f0:	3301      	adds	r3, #1
 80076f2:	61fb      	str	r3, [r7, #28]
 80076f4:	69fb      	ldr	r3, [r7, #28]
 80076f6:	2b0f      	cmp	r3, #15
 80076f8:	f67f ae90 	bls.w	800741c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80076fc:	bf00      	nop
 80076fe:	bf00      	nop
 8007700:	3724      	adds	r7, #36	; 0x24
 8007702:	46bd      	mov	sp, r7
 8007704:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007708:	4770      	bx	lr
 800770a:	bf00      	nop
 800770c:	40023800 	.word	0x40023800
 8007710:	40013800 	.word	0x40013800
 8007714:	40020000 	.word	0x40020000
 8007718:	40020400 	.word	0x40020400
 800771c:	40020800 	.word	0x40020800
 8007720:	40020c00 	.word	0x40020c00
 8007724:	40021000 	.word	0x40021000
 8007728:	40021400 	.word	0x40021400
 800772c:	40021800 	.word	0x40021800
 8007730:	40021c00 	.word	0x40021c00
 8007734:	40013c00 	.word	0x40013c00

08007738 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007738:	b480      	push	{r7}
 800773a:	b085      	sub	sp, #20
 800773c:	af00      	add	r7, sp, #0
 800773e:	6078      	str	r0, [r7, #4]
 8007740:	460b      	mov	r3, r1
 8007742:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8007744:	687b      	ldr	r3, [r7, #4]
 8007746:	691a      	ldr	r2, [r3, #16]
 8007748:	887b      	ldrh	r3, [r7, #2]
 800774a:	4013      	ands	r3, r2
 800774c:	2b00      	cmp	r3, #0
 800774e:	d002      	beq.n	8007756 <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007750:	2301      	movs	r3, #1
 8007752:	73fb      	strb	r3, [r7, #15]
 8007754:	e001      	b.n	800775a <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8007756:	2300      	movs	r3, #0
 8007758:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 800775a:	7bfb      	ldrb	r3, [r7, #15]
}
 800775c:	4618      	mov	r0, r3
 800775e:	3714      	adds	r7, #20
 8007760:	46bd      	mov	sp, r7
 8007762:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007766:	4770      	bx	lr

08007768 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007768:	b480      	push	{r7}
 800776a:	b083      	sub	sp, #12
 800776c:	af00      	add	r7, sp, #0
 800776e:	6078      	str	r0, [r7, #4]
 8007770:	460b      	mov	r3, r1
 8007772:	807b      	strh	r3, [r7, #2]
 8007774:	4613      	mov	r3, r2
 8007776:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007778:	787b      	ldrb	r3, [r7, #1]
 800777a:	2b00      	cmp	r3, #0
 800777c:	d003      	beq.n	8007786 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800777e:	887a      	ldrh	r2, [r7, #2]
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8007784:	e003      	b.n	800778e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8007786:	887b      	ldrh	r3, [r7, #2]
 8007788:	041a      	lsls	r2, r3, #16
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	619a      	str	r2, [r3, #24]
}
 800778e:	bf00      	nop
 8007790:	370c      	adds	r7, #12
 8007792:	46bd      	mov	sp, r7
 8007794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007798:	4770      	bx	lr

0800779a <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 800779a:	b480      	push	{r7}
 800779c:	b085      	sub	sp, #20
 800779e:	af00      	add	r7, sp, #0
 80077a0:	6078      	str	r0, [r7, #4]
 80077a2:	460b      	mov	r3, r1
 80077a4:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 80077a6:	687b      	ldr	r3, [r7, #4]
 80077a8:	695b      	ldr	r3, [r3, #20]
 80077aa:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 80077ac:	887a      	ldrh	r2, [r7, #2]
 80077ae:	68fb      	ldr	r3, [r7, #12]
 80077b0:	4013      	ands	r3, r2
 80077b2:	041a      	lsls	r2, r3, #16
 80077b4:	68fb      	ldr	r3, [r7, #12]
 80077b6:	43d9      	mvns	r1, r3
 80077b8:	887b      	ldrh	r3, [r7, #2]
 80077ba:	400b      	ands	r3, r1
 80077bc:	431a      	orrs	r2, r3
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	619a      	str	r2, [r3, #24]
}
 80077c2:	bf00      	nop
 80077c4:	3714      	adds	r7, #20
 80077c6:	46bd      	mov	sp, r7
 80077c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077cc:	4770      	bx	lr
	...

080077d0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80077d0:	b580      	push	{r7, lr}
 80077d2:	b086      	sub	sp, #24
 80077d4:	af00      	add	r7, sp, #0
 80077d6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2b00      	cmp	r3, #0
 80077dc:	d101      	bne.n	80077e2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80077de:	2301      	movs	r3, #1
 80077e0:	e267      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80077e2:	687b      	ldr	r3, [r7, #4]
 80077e4:	681b      	ldr	r3, [r3, #0]
 80077e6:	f003 0301 	and.w	r3, r3, #1
 80077ea:	2b00      	cmp	r3, #0
 80077ec:	d075      	beq.n	80078da <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80077ee:	4b88      	ldr	r3, [pc, #544]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 80077f0:	689b      	ldr	r3, [r3, #8]
 80077f2:	f003 030c 	and.w	r3, r3, #12
 80077f6:	2b04      	cmp	r3, #4
 80077f8:	d00c      	beq.n	8007814 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80077fa:	4b85      	ldr	r3, [pc, #532]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 80077fc:	689b      	ldr	r3, [r3, #8]
 80077fe:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007802:	2b08      	cmp	r3, #8
 8007804:	d112      	bne.n	800782c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007806:	4b82      	ldr	r3, [pc, #520]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007808:	685b      	ldr	r3, [r3, #4]
 800780a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800780e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8007812:	d10b      	bne.n	800782c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8007814:	4b7e      	ldr	r3, [pc, #504]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800781c:	2b00      	cmp	r3, #0
 800781e:	d05b      	beq.n	80078d8 <HAL_RCC_OscConfig+0x108>
 8007820:	687b      	ldr	r3, [r7, #4]
 8007822:	685b      	ldr	r3, [r3, #4]
 8007824:	2b00      	cmp	r3, #0
 8007826:	d157      	bne.n	80078d8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007828:	2301      	movs	r3, #1
 800782a:	e242      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800782c:	687b      	ldr	r3, [r7, #4]
 800782e:	685b      	ldr	r3, [r3, #4]
 8007830:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8007834:	d106      	bne.n	8007844 <HAL_RCC_OscConfig+0x74>
 8007836:	4b76      	ldr	r3, [pc, #472]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007838:	681b      	ldr	r3, [r3, #0]
 800783a:	4a75      	ldr	r2, [pc, #468]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 800783c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007840:	6013      	str	r3, [r2, #0]
 8007842:	e01d      	b.n	8007880 <HAL_RCC_OscConfig+0xb0>
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	685b      	ldr	r3, [r3, #4]
 8007848:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800784c:	d10c      	bne.n	8007868 <HAL_RCC_OscConfig+0x98>
 800784e:	4b70      	ldr	r3, [pc, #448]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007850:	681b      	ldr	r3, [r3, #0]
 8007852:	4a6f      	ldr	r2, [pc, #444]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007854:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007858:	6013      	str	r3, [r2, #0]
 800785a:	4b6d      	ldr	r3, [pc, #436]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 800785c:	681b      	ldr	r3, [r3, #0]
 800785e:	4a6c      	ldr	r2, [pc, #432]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007860:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007864:	6013      	str	r3, [r2, #0]
 8007866:	e00b      	b.n	8007880 <HAL_RCC_OscConfig+0xb0>
 8007868:	4b69      	ldr	r3, [pc, #420]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 800786a:	681b      	ldr	r3, [r3, #0]
 800786c:	4a68      	ldr	r2, [pc, #416]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 800786e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8007872:	6013      	str	r3, [r2, #0]
 8007874:	4b66      	ldr	r3, [pc, #408]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	4a65      	ldr	r2, [pc, #404]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 800787a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800787e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007880:	687b      	ldr	r3, [r7, #4]
 8007882:	685b      	ldr	r3, [r3, #4]
 8007884:	2b00      	cmp	r3, #0
 8007886:	d013      	beq.n	80078b0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007888:	f7ff f8e8 	bl	8006a5c <HAL_GetTick>
 800788c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800788e:	e008      	b.n	80078a2 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007890:	f7ff f8e4 	bl	8006a5c <HAL_GetTick>
 8007894:	4602      	mov	r2, r0
 8007896:	693b      	ldr	r3, [r7, #16]
 8007898:	1ad3      	subs	r3, r2, r3
 800789a:	2b64      	cmp	r3, #100	; 0x64
 800789c:	d901      	bls.n	80078a2 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800789e:	2303      	movs	r3, #3
 80078a0:	e207      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80078a2:	4b5b      	ldr	r3, [pc, #364]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 80078a4:	681b      	ldr	r3, [r3, #0]
 80078a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078aa:	2b00      	cmp	r3, #0
 80078ac:	d0f0      	beq.n	8007890 <HAL_RCC_OscConfig+0xc0>
 80078ae:	e014      	b.n	80078da <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80078b0:	f7ff f8d4 	bl	8006a5c <HAL_GetTick>
 80078b4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078b6:	e008      	b.n	80078ca <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80078b8:	f7ff f8d0 	bl	8006a5c <HAL_GetTick>
 80078bc:	4602      	mov	r2, r0
 80078be:	693b      	ldr	r3, [r7, #16]
 80078c0:	1ad3      	subs	r3, r2, r3
 80078c2:	2b64      	cmp	r3, #100	; 0x64
 80078c4:	d901      	bls.n	80078ca <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80078c6:	2303      	movs	r3, #3
 80078c8:	e1f3      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80078ca:	4b51      	ldr	r3, [pc, #324]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 80078cc:	681b      	ldr	r3, [r3, #0]
 80078ce:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d1f0      	bne.n	80078b8 <HAL_RCC_OscConfig+0xe8>
 80078d6:	e000      	b.n	80078da <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80078d8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80078da:	687b      	ldr	r3, [r7, #4]
 80078dc:	681b      	ldr	r3, [r3, #0]
 80078de:	f003 0302 	and.w	r3, r3, #2
 80078e2:	2b00      	cmp	r3, #0
 80078e4:	d063      	beq.n	80079ae <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078e6:	4b4a      	ldr	r3, [pc, #296]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 80078e8:	689b      	ldr	r3, [r3, #8]
 80078ea:	f003 030c 	and.w	r3, r3, #12
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d00b      	beq.n	800790a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078f2:	4b47      	ldr	r3, [pc, #284]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 80078f4:	689b      	ldr	r3, [r3, #8]
 80078f6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80078fa:	2b08      	cmp	r3, #8
 80078fc:	d11c      	bne.n	8007938 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80078fe:	4b44      	ldr	r3, [pc, #272]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007900:	685b      	ldr	r3, [r3, #4]
 8007902:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007906:	2b00      	cmp	r3, #0
 8007908:	d116      	bne.n	8007938 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800790a:	4b41      	ldr	r3, [pc, #260]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 800790c:	681b      	ldr	r3, [r3, #0]
 800790e:	f003 0302 	and.w	r3, r3, #2
 8007912:	2b00      	cmp	r3, #0
 8007914:	d005      	beq.n	8007922 <HAL_RCC_OscConfig+0x152>
 8007916:	687b      	ldr	r3, [r7, #4]
 8007918:	68db      	ldr	r3, [r3, #12]
 800791a:	2b01      	cmp	r3, #1
 800791c:	d001      	beq.n	8007922 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800791e:	2301      	movs	r3, #1
 8007920:	e1c7      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007922:	4b3b      	ldr	r3, [pc, #236]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007924:	681b      	ldr	r3, [r3, #0]
 8007926:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800792a:	687b      	ldr	r3, [r7, #4]
 800792c:	691b      	ldr	r3, [r3, #16]
 800792e:	00db      	lsls	r3, r3, #3
 8007930:	4937      	ldr	r1, [pc, #220]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007932:	4313      	orrs	r3, r2
 8007934:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007936:	e03a      	b.n	80079ae <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007938:	687b      	ldr	r3, [r7, #4]
 800793a:	68db      	ldr	r3, [r3, #12]
 800793c:	2b00      	cmp	r3, #0
 800793e:	d020      	beq.n	8007982 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007940:	4b34      	ldr	r3, [pc, #208]	; (8007a14 <HAL_RCC_OscConfig+0x244>)
 8007942:	2201      	movs	r2, #1
 8007944:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007946:	f7ff f889 	bl	8006a5c <HAL_GetTick>
 800794a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800794c:	e008      	b.n	8007960 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800794e:	f7ff f885 	bl	8006a5c <HAL_GetTick>
 8007952:	4602      	mov	r2, r0
 8007954:	693b      	ldr	r3, [r7, #16]
 8007956:	1ad3      	subs	r3, r2, r3
 8007958:	2b02      	cmp	r3, #2
 800795a:	d901      	bls.n	8007960 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 800795c:	2303      	movs	r3, #3
 800795e:	e1a8      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007960:	4b2b      	ldr	r3, [pc, #172]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 8007962:	681b      	ldr	r3, [r3, #0]
 8007964:	f003 0302 	and.w	r3, r3, #2
 8007968:	2b00      	cmp	r3, #0
 800796a:	d0f0      	beq.n	800794e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800796c:	4b28      	ldr	r3, [pc, #160]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007974:	687b      	ldr	r3, [r7, #4]
 8007976:	691b      	ldr	r3, [r3, #16]
 8007978:	00db      	lsls	r3, r3, #3
 800797a:	4925      	ldr	r1, [pc, #148]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 800797c:	4313      	orrs	r3, r2
 800797e:	600b      	str	r3, [r1, #0]
 8007980:	e015      	b.n	80079ae <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8007982:	4b24      	ldr	r3, [pc, #144]	; (8007a14 <HAL_RCC_OscConfig+0x244>)
 8007984:	2200      	movs	r2, #0
 8007986:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007988:	f7ff f868 	bl	8006a5c <HAL_GetTick>
 800798c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800798e:	e008      	b.n	80079a2 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007990:	f7ff f864 	bl	8006a5c <HAL_GetTick>
 8007994:	4602      	mov	r2, r0
 8007996:	693b      	ldr	r3, [r7, #16]
 8007998:	1ad3      	subs	r3, r2, r3
 800799a:	2b02      	cmp	r3, #2
 800799c:	d901      	bls.n	80079a2 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800799e:	2303      	movs	r3, #3
 80079a0:	e187      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80079a2:	4b1b      	ldr	r3, [pc, #108]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	f003 0302 	and.w	r3, r3, #2
 80079aa:	2b00      	cmp	r3, #0
 80079ac:	d1f0      	bne.n	8007990 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	f003 0308 	and.w	r3, r3, #8
 80079b6:	2b00      	cmp	r3, #0
 80079b8:	d036      	beq.n	8007a28 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80079ba:	687b      	ldr	r3, [r7, #4]
 80079bc:	695b      	ldr	r3, [r3, #20]
 80079be:	2b00      	cmp	r3, #0
 80079c0:	d016      	beq.n	80079f0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80079c2:	4b15      	ldr	r3, [pc, #84]	; (8007a18 <HAL_RCC_OscConfig+0x248>)
 80079c4:	2201      	movs	r2, #1
 80079c6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80079c8:	f7ff f848 	bl	8006a5c <HAL_GetTick>
 80079cc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079ce:	e008      	b.n	80079e2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079d0:	f7ff f844 	bl	8006a5c <HAL_GetTick>
 80079d4:	4602      	mov	r2, r0
 80079d6:	693b      	ldr	r3, [r7, #16]
 80079d8:	1ad3      	subs	r3, r2, r3
 80079da:	2b02      	cmp	r3, #2
 80079dc:	d901      	bls.n	80079e2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80079de:	2303      	movs	r3, #3
 80079e0:	e167      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80079e2:	4b0b      	ldr	r3, [pc, #44]	; (8007a10 <HAL_RCC_OscConfig+0x240>)
 80079e4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80079e6:	f003 0302 	and.w	r3, r3, #2
 80079ea:	2b00      	cmp	r3, #0
 80079ec:	d0f0      	beq.n	80079d0 <HAL_RCC_OscConfig+0x200>
 80079ee:	e01b      	b.n	8007a28 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80079f0:	4b09      	ldr	r3, [pc, #36]	; (8007a18 <HAL_RCC_OscConfig+0x248>)
 80079f2:	2200      	movs	r2, #0
 80079f4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80079f6:	f7ff f831 	bl	8006a5c <HAL_GetTick>
 80079fa:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80079fc:	e00e      	b.n	8007a1c <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80079fe:	f7ff f82d 	bl	8006a5c <HAL_GetTick>
 8007a02:	4602      	mov	r2, r0
 8007a04:	693b      	ldr	r3, [r7, #16]
 8007a06:	1ad3      	subs	r3, r2, r3
 8007a08:	2b02      	cmp	r3, #2
 8007a0a:	d907      	bls.n	8007a1c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007a0c:	2303      	movs	r3, #3
 8007a0e:	e150      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
 8007a10:	40023800 	.word	0x40023800
 8007a14:	42470000 	.word	0x42470000
 8007a18:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007a1c:	4b88      	ldr	r3, [pc, #544]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007a1e:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007a20:	f003 0302 	and.w	r3, r3, #2
 8007a24:	2b00      	cmp	r3, #0
 8007a26:	d1ea      	bne.n	80079fe <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	f003 0304 	and.w	r3, r3, #4
 8007a30:	2b00      	cmp	r3, #0
 8007a32:	f000 8097 	beq.w	8007b64 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8007a36:	2300      	movs	r3, #0
 8007a38:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007a3a:	4b81      	ldr	r3, [pc, #516]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a42:	2b00      	cmp	r3, #0
 8007a44:	d10f      	bne.n	8007a66 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8007a46:	2300      	movs	r3, #0
 8007a48:	60bb      	str	r3, [r7, #8]
 8007a4a:	4b7d      	ldr	r3, [pc, #500]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a4e:	4a7c      	ldr	r2, [pc, #496]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007a50:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8007a54:	6413      	str	r3, [r2, #64]	; 0x40
 8007a56:	4b7a      	ldr	r3, [pc, #488]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007a58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a5a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007a5e:	60bb      	str	r3, [r7, #8]
 8007a60:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8007a62:	2301      	movs	r3, #1
 8007a64:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a66:	4b77      	ldr	r3, [pc, #476]	; (8007c44 <HAL_RCC_OscConfig+0x474>)
 8007a68:	681b      	ldr	r3, [r3, #0]
 8007a6a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a6e:	2b00      	cmp	r3, #0
 8007a70:	d118      	bne.n	8007aa4 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8007a72:	4b74      	ldr	r3, [pc, #464]	; (8007c44 <HAL_RCC_OscConfig+0x474>)
 8007a74:	681b      	ldr	r3, [r3, #0]
 8007a76:	4a73      	ldr	r2, [pc, #460]	; (8007c44 <HAL_RCC_OscConfig+0x474>)
 8007a78:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007a7c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007a7e:	f7fe ffed 	bl	8006a5c <HAL_GetTick>
 8007a82:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a84:	e008      	b.n	8007a98 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8007a86:	f7fe ffe9 	bl	8006a5c <HAL_GetTick>
 8007a8a:	4602      	mov	r2, r0
 8007a8c:	693b      	ldr	r3, [r7, #16]
 8007a8e:	1ad3      	subs	r3, r2, r3
 8007a90:	2b02      	cmp	r3, #2
 8007a92:	d901      	bls.n	8007a98 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8007a94:	2303      	movs	r3, #3
 8007a96:	e10c      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007a98:	4b6a      	ldr	r3, [pc, #424]	; (8007c44 <HAL_RCC_OscConfig+0x474>)
 8007a9a:	681b      	ldr	r3, [r3, #0]
 8007a9c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d0f0      	beq.n	8007a86 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	689b      	ldr	r3, [r3, #8]
 8007aa8:	2b01      	cmp	r3, #1
 8007aaa:	d106      	bne.n	8007aba <HAL_RCC_OscConfig+0x2ea>
 8007aac:	4b64      	ldr	r3, [pc, #400]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007aae:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ab0:	4a63      	ldr	r2, [pc, #396]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007ab2:	f043 0301 	orr.w	r3, r3, #1
 8007ab6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ab8:	e01c      	b.n	8007af4 <HAL_RCC_OscConfig+0x324>
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	689b      	ldr	r3, [r3, #8]
 8007abe:	2b05      	cmp	r3, #5
 8007ac0:	d10c      	bne.n	8007adc <HAL_RCC_OscConfig+0x30c>
 8007ac2:	4b5f      	ldr	r3, [pc, #380]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007ac4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ac6:	4a5e      	ldr	r2, [pc, #376]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007ac8:	f043 0304 	orr.w	r3, r3, #4
 8007acc:	6713      	str	r3, [r2, #112]	; 0x70
 8007ace:	4b5c      	ldr	r3, [pc, #368]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007ad0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ad2:	4a5b      	ldr	r2, [pc, #364]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007ad4:	f043 0301 	orr.w	r3, r3, #1
 8007ad8:	6713      	str	r3, [r2, #112]	; 0x70
 8007ada:	e00b      	b.n	8007af4 <HAL_RCC_OscConfig+0x324>
 8007adc:	4b58      	ldr	r3, [pc, #352]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007ae0:	4a57      	ldr	r2, [pc, #348]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007ae2:	f023 0301 	bic.w	r3, r3, #1
 8007ae6:	6713      	str	r3, [r2, #112]	; 0x70
 8007ae8:	4b55      	ldr	r3, [pc, #340]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007aea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007aec:	4a54      	ldr	r2, [pc, #336]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007aee:	f023 0304 	bic.w	r3, r3, #4
 8007af2:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8007af4:	687b      	ldr	r3, [r7, #4]
 8007af6:	689b      	ldr	r3, [r3, #8]
 8007af8:	2b00      	cmp	r3, #0
 8007afa:	d015      	beq.n	8007b28 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007afc:	f7fe ffae 	bl	8006a5c <HAL_GetTick>
 8007b00:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b02:	e00a      	b.n	8007b1a <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b04:	f7fe ffaa 	bl	8006a5c <HAL_GetTick>
 8007b08:	4602      	mov	r2, r0
 8007b0a:	693b      	ldr	r3, [r7, #16]
 8007b0c:	1ad3      	subs	r3, r2, r3
 8007b0e:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b12:	4293      	cmp	r3, r2
 8007b14:	d901      	bls.n	8007b1a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8007b16:	2303      	movs	r3, #3
 8007b18:	e0cb      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007b1a:	4b49      	ldr	r3, [pc, #292]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007b1c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b1e:	f003 0302 	and.w	r3, r3, #2
 8007b22:	2b00      	cmp	r3, #0
 8007b24:	d0ee      	beq.n	8007b04 <HAL_RCC_OscConfig+0x334>
 8007b26:	e014      	b.n	8007b52 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007b28:	f7fe ff98 	bl	8006a5c <HAL_GetTick>
 8007b2c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b2e:	e00a      	b.n	8007b46 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007b30:	f7fe ff94 	bl	8006a5c <HAL_GetTick>
 8007b34:	4602      	mov	r2, r0
 8007b36:	693b      	ldr	r3, [r7, #16]
 8007b38:	1ad3      	subs	r3, r2, r3
 8007b3a:	f241 3288 	movw	r2, #5000	; 0x1388
 8007b3e:	4293      	cmp	r3, r2
 8007b40:	d901      	bls.n	8007b46 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8007b42:	2303      	movs	r3, #3
 8007b44:	e0b5      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007b46:	4b3e      	ldr	r3, [pc, #248]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007b48:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007b4a:	f003 0302 	and.w	r3, r3, #2
 8007b4e:	2b00      	cmp	r3, #0
 8007b50:	d1ee      	bne.n	8007b30 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8007b52:	7dfb      	ldrb	r3, [r7, #23]
 8007b54:	2b01      	cmp	r3, #1
 8007b56:	d105      	bne.n	8007b64 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007b58:	4b39      	ldr	r3, [pc, #228]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007b5a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b5c:	4a38      	ldr	r2, [pc, #224]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007b5e:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8007b62:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	699b      	ldr	r3, [r3, #24]
 8007b68:	2b00      	cmp	r3, #0
 8007b6a:	f000 80a1 	beq.w	8007cb0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007b6e:	4b34      	ldr	r3, [pc, #208]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007b70:	689b      	ldr	r3, [r3, #8]
 8007b72:	f003 030c 	and.w	r3, r3, #12
 8007b76:	2b08      	cmp	r3, #8
 8007b78:	d05c      	beq.n	8007c34 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	699b      	ldr	r3, [r3, #24]
 8007b7e:	2b02      	cmp	r3, #2
 8007b80:	d141      	bne.n	8007c06 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007b82:	4b31      	ldr	r3, [pc, #196]	; (8007c48 <HAL_RCC_OscConfig+0x478>)
 8007b84:	2200      	movs	r2, #0
 8007b86:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007b88:	f7fe ff68 	bl	8006a5c <HAL_GetTick>
 8007b8c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007b8e:	e008      	b.n	8007ba2 <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007b90:	f7fe ff64 	bl	8006a5c <HAL_GetTick>
 8007b94:	4602      	mov	r2, r0
 8007b96:	693b      	ldr	r3, [r7, #16]
 8007b98:	1ad3      	subs	r3, r2, r3
 8007b9a:	2b02      	cmp	r3, #2
 8007b9c:	d901      	bls.n	8007ba2 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007b9e:	2303      	movs	r3, #3
 8007ba0:	e087      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007ba2:	4b27      	ldr	r3, [pc, #156]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007ba4:	681b      	ldr	r3, [r3, #0]
 8007ba6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007baa:	2b00      	cmp	r3, #0
 8007bac:	d1f0      	bne.n	8007b90 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007bae:	687b      	ldr	r3, [r7, #4]
 8007bb0:	69da      	ldr	r2, [r3, #28]
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	6a1b      	ldr	r3, [r3, #32]
 8007bb6:	431a      	orrs	r2, r3
 8007bb8:	687b      	ldr	r3, [r7, #4]
 8007bba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007bbc:	019b      	lsls	r3, r3, #6
 8007bbe:	431a      	orrs	r2, r3
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007bc4:	085b      	lsrs	r3, r3, #1
 8007bc6:	3b01      	subs	r3, #1
 8007bc8:	041b      	lsls	r3, r3, #16
 8007bca:	431a      	orrs	r2, r3
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007bd0:	061b      	lsls	r3, r3, #24
 8007bd2:	491b      	ldr	r1, [pc, #108]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007bd4:	4313      	orrs	r3, r2
 8007bd6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8007bd8:	4b1b      	ldr	r3, [pc, #108]	; (8007c48 <HAL_RCC_OscConfig+0x478>)
 8007bda:	2201      	movs	r2, #1
 8007bdc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007bde:	f7fe ff3d 	bl	8006a5c <HAL_GetTick>
 8007be2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007be4:	e008      	b.n	8007bf8 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007be6:	f7fe ff39 	bl	8006a5c <HAL_GetTick>
 8007bea:	4602      	mov	r2, r0
 8007bec:	693b      	ldr	r3, [r7, #16]
 8007bee:	1ad3      	subs	r3, r2, r3
 8007bf0:	2b02      	cmp	r3, #2
 8007bf2:	d901      	bls.n	8007bf8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8007bf4:	2303      	movs	r3, #3
 8007bf6:	e05c      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007bf8:	4b11      	ldr	r3, [pc, #68]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007bfa:	681b      	ldr	r3, [r3, #0]
 8007bfc:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c00:	2b00      	cmp	r3, #0
 8007c02:	d0f0      	beq.n	8007be6 <HAL_RCC_OscConfig+0x416>
 8007c04:	e054      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8007c06:	4b10      	ldr	r3, [pc, #64]	; (8007c48 <HAL_RCC_OscConfig+0x478>)
 8007c08:	2200      	movs	r2, #0
 8007c0a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007c0c:	f7fe ff26 	bl	8006a5c <HAL_GetTick>
 8007c10:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c12:	e008      	b.n	8007c26 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007c14:	f7fe ff22 	bl	8006a5c <HAL_GetTick>
 8007c18:	4602      	mov	r2, r0
 8007c1a:	693b      	ldr	r3, [r7, #16]
 8007c1c:	1ad3      	subs	r3, r2, r3
 8007c1e:	2b02      	cmp	r3, #2
 8007c20:	d901      	bls.n	8007c26 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8007c22:	2303      	movs	r3, #3
 8007c24:	e045      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007c26:	4b06      	ldr	r3, [pc, #24]	; (8007c40 <HAL_RCC_OscConfig+0x470>)
 8007c28:	681b      	ldr	r3, [r3, #0]
 8007c2a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007c2e:	2b00      	cmp	r3, #0
 8007c30:	d1f0      	bne.n	8007c14 <HAL_RCC_OscConfig+0x444>
 8007c32:	e03d      	b.n	8007cb0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8007c34:	687b      	ldr	r3, [r7, #4]
 8007c36:	699b      	ldr	r3, [r3, #24]
 8007c38:	2b01      	cmp	r3, #1
 8007c3a:	d107      	bne.n	8007c4c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007c3c:	2301      	movs	r3, #1
 8007c3e:	e038      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
 8007c40:	40023800 	.word	0x40023800
 8007c44:	40007000 	.word	0x40007000
 8007c48:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007c4c:	4b1b      	ldr	r3, [pc, #108]	; (8007cbc <HAL_RCC_OscConfig+0x4ec>)
 8007c4e:	685b      	ldr	r3, [r3, #4]
 8007c50:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	699b      	ldr	r3, [r3, #24]
 8007c56:	2b01      	cmp	r3, #1
 8007c58:	d028      	beq.n	8007cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c5a:	68fb      	ldr	r3, [r7, #12]
 8007c5c:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8007c64:	429a      	cmp	r2, r3
 8007c66:	d121      	bne.n	8007cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c68:	68fb      	ldr	r3, [r7, #12]
 8007c6a:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007c6e:	687b      	ldr	r3, [r7, #4]
 8007c70:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007c72:	429a      	cmp	r2, r3
 8007c74:	d11a      	bne.n	8007cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c76:	68fa      	ldr	r2, [r7, #12]
 8007c78:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007c7c:	4013      	ands	r3, r2
 8007c7e:	687a      	ldr	r2, [r7, #4]
 8007c80:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8007c82:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007c84:	4293      	cmp	r3, r2
 8007c86:	d111      	bne.n	8007cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007c88:	68fb      	ldr	r3, [r7, #12]
 8007c8a:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007c92:	085b      	lsrs	r3, r3, #1
 8007c94:	3b01      	subs	r3, #1
 8007c96:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007c98:	429a      	cmp	r2, r3
 8007c9a:	d107      	bne.n	8007cac <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007c9c:	68fb      	ldr	r3, [r7, #12]
 8007c9e:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ca6:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007ca8:	429a      	cmp	r2, r3
 8007caa:	d001      	beq.n	8007cb0 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007cac:	2301      	movs	r3, #1
 8007cae:	e000      	b.n	8007cb2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007cb0:	2300      	movs	r3, #0
}
 8007cb2:	4618      	mov	r0, r3
 8007cb4:	3718      	adds	r7, #24
 8007cb6:	46bd      	mov	sp, r7
 8007cb8:	bd80      	pop	{r7, pc}
 8007cba:	bf00      	nop
 8007cbc:	40023800 	.word	0x40023800

08007cc0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007cc0:	b580      	push	{r7, lr}
 8007cc2:	b084      	sub	sp, #16
 8007cc4:	af00      	add	r7, sp, #0
 8007cc6:	6078      	str	r0, [r7, #4]
 8007cc8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8007cca:	687b      	ldr	r3, [r7, #4]
 8007ccc:	2b00      	cmp	r3, #0
 8007cce:	d101      	bne.n	8007cd4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8007cd0:	2301      	movs	r3, #1
 8007cd2:	e0cc      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8007cd4:	4b68      	ldr	r3, [pc, #416]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	f003 0307 	and.w	r3, r3, #7
 8007cdc:	683a      	ldr	r2, [r7, #0]
 8007cde:	429a      	cmp	r2, r3
 8007ce0:	d90c      	bls.n	8007cfc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007ce2:	4b65      	ldr	r3, [pc, #404]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007ce4:	683a      	ldr	r2, [r7, #0]
 8007ce6:	b2d2      	uxtb	r2, r2
 8007ce8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007cea:	4b63      	ldr	r3, [pc, #396]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007cec:	681b      	ldr	r3, [r3, #0]
 8007cee:	f003 0307 	and.w	r3, r3, #7
 8007cf2:	683a      	ldr	r2, [r7, #0]
 8007cf4:	429a      	cmp	r2, r3
 8007cf6:	d001      	beq.n	8007cfc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007cf8:	2301      	movs	r3, #1
 8007cfa:	e0b8      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007cfc:	687b      	ldr	r3, [r7, #4]
 8007cfe:	681b      	ldr	r3, [r3, #0]
 8007d00:	f003 0302 	and.w	r3, r3, #2
 8007d04:	2b00      	cmp	r3, #0
 8007d06:	d020      	beq.n	8007d4a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f003 0304 	and.w	r3, r3, #4
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d005      	beq.n	8007d20 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8007d14:	4b59      	ldr	r3, [pc, #356]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d16:	689b      	ldr	r3, [r3, #8]
 8007d18:	4a58      	ldr	r2, [pc, #352]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d1a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007d1e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f003 0308 	and.w	r3, r3, #8
 8007d28:	2b00      	cmp	r3, #0
 8007d2a:	d005      	beq.n	8007d38 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007d2c:	4b53      	ldr	r3, [pc, #332]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d2e:	689b      	ldr	r3, [r3, #8]
 8007d30:	4a52      	ldr	r2, [pc, #328]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d32:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8007d36:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007d38:	4b50      	ldr	r3, [pc, #320]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d3a:	689b      	ldr	r3, [r3, #8]
 8007d3c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	689b      	ldr	r3, [r3, #8]
 8007d44:	494d      	ldr	r1, [pc, #308]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d46:	4313      	orrs	r3, r2
 8007d48:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007d4a:	687b      	ldr	r3, [r7, #4]
 8007d4c:	681b      	ldr	r3, [r3, #0]
 8007d4e:	f003 0301 	and.w	r3, r3, #1
 8007d52:	2b00      	cmp	r3, #0
 8007d54:	d044      	beq.n	8007de0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8007d56:	687b      	ldr	r3, [r7, #4]
 8007d58:	685b      	ldr	r3, [r3, #4]
 8007d5a:	2b01      	cmp	r3, #1
 8007d5c:	d107      	bne.n	8007d6e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007d5e:	4b47      	ldr	r3, [pc, #284]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d60:	681b      	ldr	r3, [r3, #0]
 8007d62:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007d66:	2b00      	cmp	r3, #0
 8007d68:	d119      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d6a:	2301      	movs	r3, #1
 8007d6c:	e07f      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d6e:	687b      	ldr	r3, [r7, #4]
 8007d70:	685b      	ldr	r3, [r3, #4]
 8007d72:	2b02      	cmp	r3, #2
 8007d74:	d003      	beq.n	8007d7e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007d7a:	2b03      	cmp	r3, #3
 8007d7c:	d107      	bne.n	8007d8e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007d7e:	4b3f      	ldr	r3, [pc, #252]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007d86:	2b00      	cmp	r3, #0
 8007d88:	d109      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d8a:	2301      	movs	r3, #1
 8007d8c:	e06f      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007d8e:	4b3b      	ldr	r3, [pc, #236]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007d90:	681b      	ldr	r3, [r3, #0]
 8007d92:	f003 0302 	and.w	r3, r3, #2
 8007d96:	2b00      	cmp	r3, #0
 8007d98:	d101      	bne.n	8007d9e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007d9a:	2301      	movs	r3, #1
 8007d9c:	e067      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007d9e:	4b37      	ldr	r3, [pc, #220]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007da0:	689b      	ldr	r3, [r3, #8]
 8007da2:	f023 0203 	bic.w	r2, r3, #3
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	685b      	ldr	r3, [r3, #4]
 8007daa:	4934      	ldr	r1, [pc, #208]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007dac:	4313      	orrs	r3, r2
 8007dae:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007db0:	f7fe fe54 	bl	8006a5c <HAL_GetTick>
 8007db4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007db6:	e00a      	b.n	8007dce <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007db8:	f7fe fe50 	bl	8006a5c <HAL_GetTick>
 8007dbc:	4602      	mov	r2, r0
 8007dbe:	68fb      	ldr	r3, [r7, #12]
 8007dc0:	1ad3      	subs	r3, r2, r3
 8007dc2:	f241 3288 	movw	r2, #5000	; 0x1388
 8007dc6:	4293      	cmp	r3, r2
 8007dc8:	d901      	bls.n	8007dce <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8007dca:	2303      	movs	r3, #3
 8007dcc:	e04f      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8007dce:	4b2b      	ldr	r3, [pc, #172]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007dd0:	689b      	ldr	r3, [r3, #8]
 8007dd2:	f003 020c 	and.w	r2, r3, #12
 8007dd6:	687b      	ldr	r3, [r7, #4]
 8007dd8:	685b      	ldr	r3, [r3, #4]
 8007dda:	009b      	lsls	r3, r3, #2
 8007ddc:	429a      	cmp	r2, r3
 8007dde:	d1eb      	bne.n	8007db8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8007de0:	4b25      	ldr	r3, [pc, #148]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f003 0307 	and.w	r3, r3, #7
 8007de8:	683a      	ldr	r2, [r7, #0]
 8007dea:	429a      	cmp	r2, r3
 8007dec:	d20c      	bcs.n	8007e08 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007dee:	4b22      	ldr	r3, [pc, #136]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007df0:	683a      	ldr	r2, [r7, #0]
 8007df2:	b2d2      	uxtb	r2, r2
 8007df4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007df6:	4b20      	ldr	r3, [pc, #128]	; (8007e78 <HAL_RCC_ClockConfig+0x1b8>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	f003 0307 	and.w	r3, r3, #7
 8007dfe:	683a      	ldr	r2, [r7, #0]
 8007e00:	429a      	cmp	r2, r3
 8007e02:	d001      	beq.n	8007e08 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8007e04:	2301      	movs	r3, #1
 8007e06:	e032      	b.n	8007e6e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007e08:	687b      	ldr	r3, [r7, #4]
 8007e0a:	681b      	ldr	r3, [r3, #0]
 8007e0c:	f003 0304 	and.w	r3, r3, #4
 8007e10:	2b00      	cmp	r3, #0
 8007e12:	d008      	beq.n	8007e26 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8007e14:	4b19      	ldr	r3, [pc, #100]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e16:	689b      	ldr	r3, [r3, #8]
 8007e18:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007e1c:	687b      	ldr	r3, [r7, #4]
 8007e1e:	68db      	ldr	r3, [r3, #12]
 8007e20:	4916      	ldr	r1, [pc, #88]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e22:	4313      	orrs	r3, r2
 8007e24:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007e26:	687b      	ldr	r3, [r7, #4]
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	f003 0308 	and.w	r3, r3, #8
 8007e2e:	2b00      	cmp	r3, #0
 8007e30:	d009      	beq.n	8007e46 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8007e32:	4b12      	ldr	r3, [pc, #72]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e34:	689b      	ldr	r3, [r3, #8]
 8007e36:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007e3a:	687b      	ldr	r3, [r7, #4]
 8007e3c:	691b      	ldr	r3, [r3, #16]
 8007e3e:	00db      	lsls	r3, r3, #3
 8007e40:	490e      	ldr	r1, [pc, #56]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e42:	4313      	orrs	r3, r2
 8007e44:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8007e46:	f000 f821 	bl	8007e8c <HAL_RCC_GetSysClockFreq>
 8007e4a:	4602      	mov	r2, r0
 8007e4c:	4b0b      	ldr	r3, [pc, #44]	; (8007e7c <HAL_RCC_ClockConfig+0x1bc>)
 8007e4e:	689b      	ldr	r3, [r3, #8]
 8007e50:	091b      	lsrs	r3, r3, #4
 8007e52:	f003 030f 	and.w	r3, r3, #15
 8007e56:	490a      	ldr	r1, [pc, #40]	; (8007e80 <HAL_RCC_ClockConfig+0x1c0>)
 8007e58:	5ccb      	ldrb	r3, [r1, r3]
 8007e5a:	fa22 f303 	lsr.w	r3, r2, r3
 8007e5e:	4a09      	ldr	r2, [pc, #36]	; (8007e84 <HAL_RCC_ClockConfig+0x1c4>)
 8007e60:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8007e62:	4b09      	ldr	r3, [pc, #36]	; (8007e88 <HAL_RCC_ClockConfig+0x1c8>)
 8007e64:	681b      	ldr	r3, [r3, #0]
 8007e66:	4618      	mov	r0, r3
 8007e68:	f7fe fdb4 	bl	80069d4 <HAL_InitTick>

  return HAL_OK;
 8007e6c:	2300      	movs	r3, #0
}
 8007e6e:	4618      	mov	r0, r3
 8007e70:	3710      	adds	r7, #16
 8007e72:	46bd      	mov	sp, r7
 8007e74:	bd80      	pop	{r7, pc}
 8007e76:	bf00      	nop
 8007e78:	40023c00 	.word	0x40023c00
 8007e7c:	40023800 	.word	0x40023800
 8007e80:	0800f98c 	.word	0x0800f98c
 8007e84:	20000014 	.word	0x20000014
 8007e88:	20000018 	.word	0x20000018

08007e8c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007e8c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007e90:	b090      	sub	sp, #64	; 0x40
 8007e92:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8007e94:	2300      	movs	r3, #0
 8007e96:	637b      	str	r3, [r7, #52]	; 0x34
 8007e98:	2300      	movs	r3, #0
 8007e9a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007e9c:	2300      	movs	r3, #0
 8007e9e:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007ea0:	2300      	movs	r3, #0
 8007ea2:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8007ea4:	4b59      	ldr	r3, [pc, #356]	; (800800c <HAL_RCC_GetSysClockFreq+0x180>)
 8007ea6:	689b      	ldr	r3, [r3, #8]
 8007ea8:	f003 030c 	and.w	r3, r3, #12
 8007eac:	2b08      	cmp	r3, #8
 8007eae:	d00d      	beq.n	8007ecc <HAL_RCC_GetSysClockFreq+0x40>
 8007eb0:	2b08      	cmp	r3, #8
 8007eb2:	f200 80a1 	bhi.w	8007ff8 <HAL_RCC_GetSysClockFreq+0x16c>
 8007eb6:	2b00      	cmp	r3, #0
 8007eb8:	d002      	beq.n	8007ec0 <HAL_RCC_GetSysClockFreq+0x34>
 8007eba:	2b04      	cmp	r3, #4
 8007ebc:	d003      	beq.n	8007ec6 <HAL_RCC_GetSysClockFreq+0x3a>
 8007ebe:	e09b      	b.n	8007ff8 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007ec0:	4b53      	ldr	r3, [pc, #332]	; (8008010 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ec2:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 8007ec4:	e09b      	b.n	8007ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8007ec6:	4b53      	ldr	r3, [pc, #332]	; (8008014 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ec8:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007eca:	e098      	b.n	8007ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8007ecc:	4b4f      	ldr	r3, [pc, #316]	; (800800c <HAL_RCC_GetSysClockFreq+0x180>)
 8007ece:	685b      	ldr	r3, [r3, #4]
 8007ed0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8007ed4:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8007ed6:	4b4d      	ldr	r3, [pc, #308]	; (800800c <HAL_RCC_GetSysClockFreq+0x180>)
 8007ed8:	685b      	ldr	r3, [r3, #4]
 8007eda:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007ede:	2b00      	cmp	r3, #0
 8007ee0:	d028      	beq.n	8007f34 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007ee2:	4b4a      	ldr	r3, [pc, #296]	; (800800c <HAL_RCC_GetSysClockFreq+0x180>)
 8007ee4:	685b      	ldr	r3, [r3, #4]
 8007ee6:	099b      	lsrs	r3, r3, #6
 8007ee8:	2200      	movs	r2, #0
 8007eea:	623b      	str	r3, [r7, #32]
 8007eec:	627a      	str	r2, [r7, #36]	; 0x24
 8007eee:	6a3b      	ldr	r3, [r7, #32]
 8007ef0:	f3c3 0008 	ubfx	r0, r3, #0, #9
 8007ef4:	2100      	movs	r1, #0
 8007ef6:	4b47      	ldr	r3, [pc, #284]	; (8008014 <HAL_RCC_GetSysClockFreq+0x188>)
 8007ef8:	fb03 f201 	mul.w	r2, r3, r1
 8007efc:	2300      	movs	r3, #0
 8007efe:	fb00 f303 	mul.w	r3, r0, r3
 8007f02:	4413      	add	r3, r2
 8007f04:	4a43      	ldr	r2, [pc, #268]	; (8008014 <HAL_RCC_GetSysClockFreq+0x188>)
 8007f06:	fba0 1202 	umull	r1, r2, r0, r2
 8007f0a:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007f0c:	460a      	mov	r2, r1
 8007f0e:	62ba      	str	r2, [r7, #40]	; 0x28
 8007f10:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8007f12:	4413      	add	r3, r2
 8007f14:	62fb      	str	r3, [r7, #44]	; 0x2c
 8007f16:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007f18:	2200      	movs	r2, #0
 8007f1a:	61bb      	str	r3, [r7, #24]
 8007f1c:	61fa      	str	r2, [r7, #28]
 8007f1e:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8007f22:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8007f26:	f7f8 feaf 	bl	8000c88 <__aeabi_uldivmod>
 8007f2a:	4602      	mov	r2, r0
 8007f2c:	460b      	mov	r3, r1
 8007f2e:	4613      	mov	r3, r2
 8007f30:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007f32:	e053      	b.n	8007fdc <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8007f34:	4b35      	ldr	r3, [pc, #212]	; (800800c <HAL_RCC_GetSysClockFreq+0x180>)
 8007f36:	685b      	ldr	r3, [r3, #4]
 8007f38:	099b      	lsrs	r3, r3, #6
 8007f3a:	2200      	movs	r2, #0
 8007f3c:	613b      	str	r3, [r7, #16]
 8007f3e:	617a      	str	r2, [r7, #20]
 8007f40:	693b      	ldr	r3, [r7, #16]
 8007f42:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8007f46:	f04f 0b00 	mov.w	fp, #0
 8007f4a:	4652      	mov	r2, sl
 8007f4c:	465b      	mov	r3, fp
 8007f4e:	f04f 0000 	mov.w	r0, #0
 8007f52:	f04f 0100 	mov.w	r1, #0
 8007f56:	0159      	lsls	r1, r3, #5
 8007f58:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007f5c:	0150      	lsls	r0, r2, #5
 8007f5e:	4602      	mov	r2, r0
 8007f60:	460b      	mov	r3, r1
 8007f62:	ebb2 080a 	subs.w	r8, r2, sl
 8007f66:	eb63 090b 	sbc.w	r9, r3, fp
 8007f6a:	f04f 0200 	mov.w	r2, #0
 8007f6e:	f04f 0300 	mov.w	r3, #0
 8007f72:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8007f76:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007f7a:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007f7e:	ebb2 0408 	subs.w	r4, r2, r8
 8007f82:	eb63 0509 	sbc.w	r5, r3, r9
 8007f86:	f04f 0200 	mov.w	r2, #0
 8007f8a:	f04f 0300 	mov.w	r3, #0
 8007f8e:	00eb      	lsls	r3, r5, #3
 8007f90:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8007f94:	00e2      	lsls	r2, r4, #3
 8007f96:	4614      	mov	r4, r2
 8007f98:	461d      	mov	r5, r3
 8007f9a:	eb14 030a 	adds.w	r3, r4, sl
 8007f9e:	603b      	str	r3, [r7, #0]
 8007fa0:	eb45 030b 	adc.w	r3, r5, fp
 8007fa4:	607b      	str	r3, [r7, #4]
 8007fa6:	f04f 0200 	mov.w	r2, #0
 8007faa:	f04f 0300 	mov.w	r3, #0
 8007fae:	e9d7 4500 	ldrd	r4, r5, [r7]
 8007fb2:	4629      	mov	r1, r5
 8007fb4:	028b      	lsls	r3, r1, #10
 8007fb6:	4621      	mov	r1, r4
 8007fb8:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007fbc:	4621      	mov	r1, r4
 8007fbe:	028a      	lsls	r2, r1, #10
 8007fc0:	4610      	mov	r0, r2
 8007fc2:	4619      	mov	r1, r3
 8007fc4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007fc6:	2200      	movs	r2, #0
 8007fc8:	60bb      	str	r3, [r7, #8]
 8007fca:	60fa      	str	r2, [r7, #12]
 8007fcc:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8007fd0:	f7f8 fe5a 	bl	8000c88 <__aeabi_uldivmod>
 8007fd4:	4602      	mov	r2, r0
 8007fd6:	460b      	mov	r3, r1
 8007fd8:	4613      	mov	r3, r2
 8007fda:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007fdc:	4b0b      	ldr	r3, [pc, #44]	; (800800c <HAL_RCC_GetSysClockFreq+0x180>)
 8007fde:	685b      	ldr	r3, [r3, #4]
 8007fe0:	0c1b      	lsrs	r3, r3, #16
 8007fe2:	f003 0303 	and.w	r3, r3, #3
 8007fe6:	3301      	adds	r3, #1
 8007fe8:	005b      	lsls	r3, r3, #1
 8007fea:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007fec:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007fee:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007ff0:	fbb2 f3f3 	udiv	r3, r2, r3
 8007ff4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ff6:	e002      	b.n	8007ffe <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007ff8:	4b05      	ldr	r3, [pc, #20]	; (8008010 <HAL_RCC_GetSysClockFreq+0x184>)
 8007ffa:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007ffc:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007ffe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8008000:	4618      	mov	r0, r3
 8008002:	3740      	adds	r7, #64	; 0x40
 8008004:	46bd      	mov	sp, r7
 8008006:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800800a:	bf00      	nop
 800800c:	40023800 	.word	0x40023800
 8008010:	00f42400 	.word	0x00f42400
 8008014:	00b71b00 	.word	0x00b71b00

08008018 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8008018:	b480      	push	{r7}
 800801a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800801c:	4b03      	ldr	r3, [pc, #12]	; (800802c <HAL_RCC_GetHCLKFreq+0x14>)
 800801e:	681b      	ldr	r3, [r3, #0]
}
 8008020:	4618      	mov	r0, r3
 8008022:	46bd      	mov	sp, r7
 8008024:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008028:	4770      	bx	lr
 800802a:	bf00      	nop
 800802c:	20000014 	.word	0x20000014

08008030 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8008030:	b580      	push	{r7, lr}
 8008032:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8008034:	f7ff fff0 	bl	8008018 <HAL_RCC_GetHCLKFreq>
 8008038:	4602      	mov	r2, r0
 800803a:	4b05      	ldr	r3, [pc, #20]	; (8008050 <HAL_RCC_GetPCLK1Freq+0x20>)
 800803c:	689b      	ldr	r3, [r3, #8]
 800803e:	0a9b      	lsrs	r3, r3, #10
 8008040:	f003 0307 	and.w	r3, r3, #7
 8008044:	4903      	ldr	r1, [pc, #12]	; (8008054 <HAL_RCC_GetPCLK1Freq+0x24>)
 8008046:	5ccb      	ldrb	r3, [r1, r3]
 8008048:	fa22 f303 	lsr.w	r3, r2, r3
}
 800804c:	4618      	mov	r0, r3
 800804e:	bd80      	pop	{r7, pc}
 8008050:	40023800 	.word	0x40023800
 8008054:	0800f99c 	.word	0x0800f99c

08008058 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8008058:	b580      	push	{r7, lr}
 800805a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800805c:	f7ff ffdc 	bl	8008018 <HAL_RCC_GetHCLKFreq>
 8008060:	4602      	mov	r2, r0
 8008062:	4b05      	ldr	r3, [pc, #20]	; (8008078 <HAL_RCC_GetPCLK2Freq+0x20>)
 8008064:	689b      	ldr	r3, [r3, #8]
 8008066:	0b5b      	lsrs	r3, r3, #13
 8008068:	f003 0307 	and.w	r3, r3, #7
 800806c:	4903      	ldr	r1, [pc, #12]	; (800807c <HAL_RCC_GetPCLK2Freq+0x24>)
 800806e:	5ccb      	ldrb	r3, [r1, r3]
 8008070:	fa22 f303 	lsr.w	r3, r2, r3
}
 8008074:	4618      	mov	r0, r3
 8008076:	bd80      	pop	{r7, pc}
 8008078:	40023800 	.word	0x40023800
 800807c:	0800f99c 	.word	0x0800f99c

08008080 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8008080:	b580      	push	{r7, lr}
 8008082:	b082      	sub	sp, #8
 8008084:	af00      	add	r7, sp, #0
 8008086:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	2b00      	cmp	r3, #0
 800808c:	d101      	bne.n	8008092 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800808e:	2301      	movs	r3, #1
 8008090:	e041      	b.n	8008116 <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008092:	687b      	ldr	r3, [r7, #4]
 8008094:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008098:	b2db      	uxtb	r3, r3
 800809a:	2b00      	cmp	r3, #0
 800809c:	d106      	bne.n	80080ac <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800809e:	687b      	ldr	r3, [r7, #4]
 80080a0:	2200      	movs	r2, #0
 80080a2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80080a6:	6878      	ldr	r0, [r7, #4]
 80080a8:	f7fe f9c8 	bl	800643c <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2202      	movs	r2, #2
 80080b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80080b4:	687b      	ldr	r3, [r7, #4]
 80080b6:	681a      	ldr	r2, [r3, #0]
 80080b8:	687b      	ldr	r3, [r7, #4]
 80080ba:	3304      	adds	r3, #4
 80080bc:	4619      	mov	r1, r3
 80080be:	4610      	mov	r0, r2
 80080c0:	f000 fbba 	bl	8008838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80080c4:	687b      	ldr	r3, [r7, #4]
 80080c6:	2201      	movs	r2, #1
 80080c8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080cc:	687b      	ldr	r3, [r7, #4]
 80080ce:	2201      	movs	r2, #1
 80080d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80080d4:	687b      	ldr	r3, [r7, #4]
 80080d6:	2201      	movs	r2, #1
 80080d8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80080dc:	687b      	ldr	r3, [r7, #4]
 80080de:	2201      	movs	r2, #1
 80080e0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	2201      	movs	r2, #1
 80080e8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80080ec:	687b      	ldr	r3, [r7, #4]
 80080ee:	2201      	movs	r2, #1
 80080f0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	2201      	movs	r2, #1
 80080f8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80080fc:	687b      	ldr	r3, [r7, #4]
 80080fe:	2201      	movs	r2, #1
 8008100:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8008104:	687b      	ldr	r3, [r7, #4]
 8008106:	2201      	movs	r2, #1
 8008108:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800810c:	687b      	ldr	r3, [r7, #4]
 800810e:	2201      	movs	r2, #1
 8008110:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8008114:	2300      	movs	r3, #0
}
 8008116:	4618      	mov	r0, r3
 8008118:	3708      	adds	r7, #8
 800811a:	46bd      	mov	sp, r7
 800811c:	bd80      	pop	{r7, pc}
	...

08008120 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8008120:	b480      	push	{r7}
 8008122:	b085      	sub	sp, #20
 8008124:	af00      	add	r7, sp, #0
 8008126:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800812e:	b2db      	uxtb	r3, r3
 8008130:	2b01      	cmp	r3, #1
 8008132:	d001      	beq.n	8008138 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8008134:	2301      	movs	r3, #1
 8008136:	e04e      	b.n	80081d6 <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	2202      	movs	r2, #2
 800813c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	681b      	ldr	r3, [r3, #0]
 8008144:	68da      	ldr	r2, [r3, #12]
 8008146:	687b      	ldr	r3, [r7, #4]
 8008148:	681b      	ldr	r3, [r3, #0]
 800814a:	f042 0201 	orr.w	r2, r2, #1
 800814e:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	4a23      	ldr	r2, [pc, #140]	; (80081e4 <HAL_TIM_Base_Start_IT+0xc4>)
 8008156:	4293      	cmp	r3, r2
 8008158:	d022      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 800815a:	687b      	ldr	r3, [r7, #4]
 800815c:	681b      	ldr	r3, [r3, #0]
 800815e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008162:	d01d      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	4a1f      	ldr	r2, [pc, #124]	; (80081e8 <HAL_TIM_Base_Start_IT+0xc8>)
 800816a:	4293      	cmp	r3, r2
 800816c:	d018      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	4a1e      	ldr	r2, [pc, #120]	; (80081ec <HAL_TIM_Base_Start_IT+0xcc>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d013      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 8008178:	687b      	ldr	r3, [r7, #4]
 800817a:	681b      	ldr	r3, [r3, #0]
 800817c:	4a1c      	ldr	r2, [pc, #112]	; (80081f0 <HAL_TIM_Base_Start_IT+0xd0>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d00e      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	681b      	ldr	r3, [r3, #0]
 8008186:	4a1b      	ldr	r2, [pc, #108]	; (80081f4 <HAL_TIM_Base_Start_IT+0xd4>)
 8008188:	4293      	cmp	r3, r2
 800818a:	d009      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	681b      	ldr	r3, [r3, #0]
 8008190:	4a19      	ldr	r2, [pc, #100]	; (80081f8 <HAL_TIM_Base_Start_IT+0xd8>)
 8008192:	4293      	cmp	r3, r2
 8008194:	d004      	beq.n	80081a0 <HAL_TIM_Base_Start_IT+0x80>
 8008196:	687b      	ldr	r3, [r7, #4]
 8008198:	681b      	ldr	r3, [r3, #0]
 800819a:	4a18      	ldr	r2, [pc, #96]	; (80081fc <HAL_TIM_Base_Start_IT+0xdc>)
 800819c:	4293      	cmp	r3, r2
 800819e:	d111      	bne.n	80081c4 <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	681b      	ldr	r3, [r3, #0]
 80081a4:	689b      	ldr	r3, [r3, #8]
 80081a6:	f003 0307 	and.w	r3, r3, #7
 80081aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081ac:	68fb      	ldr	r3, [r7, #12]
 80081ae:	2b06      	cmp	r3, #6
 80081b0:	d010      	beq.n	80081d4 <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	681b      	ldr	r3, [r3, #0]
 80081b6:	681a      	ldr	r2, [r3, #0]
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	f042 0201 	orr.w	r2, r2, #1
 80081c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80081c2:	e007      	b.n	80081d4 <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	681b      	ldr	r3, [r3, #0]
 80081c8:	681a      	ldr	r2, [r3, #0]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	681b      	ldr	r3, [r3, #0]
 80081ce:	f042 0201 	orr.w	r2, r2, #1
 80081d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80081d4:	2300      	movs	r3, #0
}
 80081d6:	4618      	mov	r0, r3
 80081d8:	3714      	adds	r7, #20
 80081da:	46bd      	mov	sp, r7
 80081dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081e0:	4770      	bx	lr
 80081e2:	bf00      	nop
 80081e4:	40010000 	.word	0x40010000
 80081e8:	40000400 	.word	0x40000400
 80081ec:	40000800 	.word	0x40000800
 80081f0:	40000c00 	.word	0x40000c00
 80081f4:	40010400 	.word	0x40010400
 80081f8:	40014000 	.word	0x40014000
 80081fc:	40001800 	.word	0x40001800

08008200 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8008200:	b480      	push	{r7}
 8008202:	b083      	sub	sp, #12
 8008204:	af00      	add	r7, sp, #0
 8008206:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8008208:	687b      	ldr	r3, [r7, #4]
 800820a:	681b      	ldr	r3, [r3, #0]
 800820c:	68da      	ldr	r2, [r3, #12]
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	681b      	ldr	r3, [r3, #0]
 8008212:	f022 0201 	bic.w	r2, r2, #1
 8008216:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8008218:	687b      	ldr	r3, [r7, #4]
 800821a:	681b      	ldr	r3, [r3, #0]
 800821c:	6a1a      	ldr	r2, [r3, #32]
 800821e:	f241 1311 	movw	r3, #4369	; 0x1111
 8008222:	4013      	ands	r3, r2
 8008224:	2b00      	cmp	r3, #0
 8008226:	d10f      	bne.n	8008248 <HAL_TIM_Base_Stop_IT+0x48>
 8008228:	687b      	ldr	r3, [r7, #4]
 800822a:	681b      	ldr	r3, [r3, #0]
 800822c:	6a1a      	ldr	r2, [r3, #32]
 800822e:	f240 4344 	movw	r3, #1092	; 0x444
 8008232:	4013      	ands	r3, r2
 8008234:	2b00      	cmp	r3, #0
 8008236:	d107      	bne.n	8008248 <HAL_TIM_Base_Stop_IT+0x48>
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	681b      	ldr	r3, [r3, #0]
 800823c:	681a      	ldr	r2, [r3, #0]
 800823e:	687b      	ldr	r3, [r7, #4]
 8008240:	681b      	ldr	r3, [r3, #0]
 8008242:	f022 0201 	bic.w	r2, r2, #1
 8008246:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8008248:	687b      	ldr	r3, [r7, #4]
 800824a:	2201      	movs	r2, #1
 800824c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8008250:	2300      	movs	r3, #0
}
 8008252:	4618      	mov	r0, r3
 8008254:	370c      	adds	r7, #12
 8008256:	46bd      	mov	sp, r7
 8008258:	f85d 7b04 	ldr.w	r7, [sp], #4
 800825c:	4770      	bx	lr

0800825e <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 800825e:	b580      	push	{r7, lr}
 8008260:	b082      	sub	sp, #8
 8008262:	af00      	add	r7, sp, #0
 8008264:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8008266:	687b      	ldr	r3, [r7, #4]
 8008268:	2b00      	cmp	r3, #0
 800826a:	d101      	bne.n	8008270 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 800826c:	2301      	movs	r3, #1
 800826e:	e041      	b.n	80082f4 <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8008270:	687b      	ldr	r3, [r7, #4]
 8008272:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008276:	b2db      	uxtb	r3, r3
 8008278:	2b00      	cmp	r3, #0
 800827a:	d106      	bne.n	800828a <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800827c:	687b      	ldr	r3, [r7, #4]
 800827e:	2200      	movs	r2, #0
 8008280:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8008284:	6878      	ldr	r0, [r7, #4]
 8008286:	f000 f839 	bl	80082fc <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800828a:	687b      	ldr	r3, [r7, #4]
 800828c:	2202      	movs	r2, #2
 800828e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681a      	ldr	r2, [r3, #0]
 8008296:	687b      	ldr	r3, [r7, #4]
 8008298:	3304      	adds	r3, #4
 800829a:	4619      	mov	r1, r3
 800829c:	4610      	mov	r0, r2
 800829e:	f000 facb 	bl	8008838 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	2201      	movs	r2, #1
 80082a6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082aa:	687b      	ldr	r3, [r7, #4]
 80082ac:	2201      	movs	r2, #1
 80082ae:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2201      	movs	r2, #1
 80082b6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80082ba:	687b      	ldr	r3, [r7, #4]
 80082bc:	2201      	movs	r2, #1
 80082be:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	2201      	movs	r2, #1
 80082c6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	2201      	movs	r2, #1
 80082ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80082d2:	687b      	ldr	r3, [r7, #4]
 80082d4:	2201      	movs	r2, #1
 80082d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80082da:	687b      	ldr	r3, [r7, #4]
 80082dc:	2201      	movs	r2, #1
 80082de:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	2201      	movs	r2, #1
 80082e6:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80082ea:	687b      	ldr	r3, [r7, #4]
 80082ec:	2201      	movs	r2, #1
 80082ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80082f2:	2300      	movs	r3, #0
}
 80082f4:	4618      	mov	r0, r3
 80082f6:	3708      	adds	r7, #8
 80082f8:	46bd      	mov	sp, r7
 80082fa:	bd80      	pop	{r7, pc}

080082fc <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 80082fc:	b480      	push	{r7}
 80082fe:	b083      	sub	sp, #12
 8008300:	af00      	add	r7, sp, #0
 8008302:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8008304:	bf00      	nop
 8008306:	370c      	adds	r7, #12
 8008308:	46bd      	mov	sp, r7
 800830a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800830e:	4770      	bx	lr

08008310 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8008310:	b580      	push	{r7, lr}
 8008312:	b082      	sub	sp, #8
 8008314:	af00      	add	r7, sp, #0
 8008316:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8008318:	687b      	ldr	r3, [r7, #4]
 800831a:	681b      	ldr	r3, [r3, #0]
 800831c:	691b      	ldr	r3, [r3, #16]
 800831e:	f003 0302 	and.w	r3, r3, #2
 8008322:	2b02      	cmp	r3, #2
 8008324:	d122      	bne.n	800836c <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	681b      	ldr	r3, [r3, #0]
 800832a:	68db      	ldr	r3, [r3, #12]
 800832c:	f003 0302 	and.w	r3, r3, #2
 8008330:	2b02      	cmp	r3, #2
 8008332:	d11b      	bne.n	800836c <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	681b      	ldr	r3, [r3, #0]
 8008338:	f06f 0202 	mvn.w	r2, #2
 800833c:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800833e:	687b      	ldr	r3, [r7, #4]
 8008340:	2201      	movs	r2, #1
 8008342:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8008344:	687b      	ldr	r3, [r7, #4]
 8008346:	681b      	ldr	r3, [r3, #0]
 8008348:	699b      	ldr	r3, [r3, #24]
 800834a:	f003 0303 	and.w	r3, r3, #3
 800834e:	2b00      	cmp	r3, #0
 8008350:	d003      	beq.n	800835a <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8008352:	6878      	ldr	r0, [r7, #4]
 8008354:	f000 fa51 	bl	80087fa <HAL_TIM_IC_CaptureCallback>
 8008358:	e005      	b.n	8008366 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 800835a:	6878      	ldr	r0, [r7, #4]
 800835c:	f000 fa43 	bl	80087e6 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008360:	6878      	ldr	r0, [r7, #4]
 8008362:	f000 fa54 	bl	800880e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008366:	687b      	ldr	r3, [r7, #4]
 8008368:	2200      	movs	r2, #0
 800836a:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 800836c:	687b      	ldr	r3, [r7, #4]
 800836e:	681b      	ldr	r3, [r3, #0]
 8008370:	691b      	ldr	r3, [r3, #16]
 8008372:	f003 0304 	and.w	r3, r3, #4
 8008376:	2b04      	cmp	r3, #4
 8008378:	d122      	bne.n	80083c0 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 800837a:	687b      	ldr	r3, [r7, #4]
 800837c:	681b      	ldr	r3, [r3, #0]
 800837e:	68db      	ldr	r3, [r3, #12]
 8008380:	f003 0304 	and.w	r3, r3, #4
 8008384:	2b04      	cmp	r3, #4
 8008386:	d11b      	bne.n	80083c0 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f06f 0204 	mvn.w	r2, #4
 8008390:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8008392:	687b      	ldr	r3, [r7, #4]
 8008394:	2202      	movs	r2, #2
 8008396:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8008398:	687b      	ldr	r3, [r7, #4]
 800839a:	681b      	ldr	r3, [r3, #0]
 800839c:	699b      	ldr	r3, [r3, #24]
 800839e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80083a2:	2b00      	cmp	r3, #0
 80083a4:	d003      	beq.n	80083ae <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083a6:	6878      	ldr	r0, [r7, #4]
 80083a8:	f000 fa27 	bl	80087fa <HAL_TIM_IC_CaptureCallback>
 80083ac:	e005      	b.n	80083ba <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80083ae:	6878      	ldr	r0, [r7, #4]
 80083b0:	f000 fa19 	bl	80087e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80083b4:	6878      	ldr	r0, [r7, #4]
 80083b6:	f000 fa2a 	bl	800880e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80083ba:	687b      	ldr	r3, [r7, #4]
 80083bc:	2200      	movs	r2, #0
 80083be:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80083c0:	687b      	ldr	r3, [r7, #4]
 80083c2:	681b      	ldr	r3, [r3, #0]
 80083c4:	691b      	ldr	r3, [r3, #16]
 80083c6:	f003 0308 	and.w	r3, r3, #8
 80083ca:	2b08      	cmp	r3, #8
 80083cc:	d122      	bne.n	8008414 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80083ce:	687b      	ldr	r3, [r7, #4]
 80083d0:	681b      	ldr	r3, [r3, #0]
 80083d2:	68db      	ldr	r3, [r3, #12]
 80083d4:	f003 0308 	and.w	r3, r3, #8
 80083d8:	2b08      	cmp	r3, #8
 80083da:	d11b      	bne.n	8008414 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	681b      	ldr	r3, [r3, #0]
 80083e0:	f06f 0208 	mvn.w	r2, #8
 80083e4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80083e6:	687b      	ldr	r3, [r7, #4]
 80083e8:	2204      	movs	r2, #4
 80083ea:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80083ec:	687b      	ldr	r3, [r7, #4]
 80083ee:	681b      	ldr	r3, [r3, #0]
 80083f0:	69db      	ldr	r3, [r3, #28]
 80083f2:	f003 0303 	and.w	r3, r3, #3
 80083f6:	2b00      	cmp	r3, #0
 80083f8:	d003      	beq.n	8008402 <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80083fa:	6878      	ldr	r0, [r7, #4]
 80083fc:	f000 f9fd 	bl	80087fa <HAL_TIM_IC_CaptureCallback>
 8008400:	e005      	b.n	800840e <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008402:	6878      	ldr	r0, [r7, #4]
 8008404:	f000 f9ef 	bl	80087e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8008408:	6878      	ldr	r0, [r7, #4]
 800840a:	f000 fa00 	bl	800880e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800840e:	687b      	ldr	r3, [r7, #4]
 8008410:	2200      	movs	r2, #0
 8008412:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	691b      	ldr	r3, [r3, #16]
 800841a:	f003 0310 	and.w	r3, r3, #16
 800841e:	2b10      	cmp	r3, #16
 8008420:	d122      	bne.n	8008468 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8008422:	687b      	ldr	r3, [r7, #4]
 8008424:	681b      	ldr	r3, [r3, #0]
 8008426:	68db      	ldr	r3, [r3, #12]
 8008428:	f003 0310 	and.w	r3, r3, #16
 800842c:	2b10      	cmp	r3, #16
 800842e:	d11b      	bne.n	8008468 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8008430:	687b      	ldr	r3, [r7, #4]
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	f06f 0210 	mvn.w	r2, #16
 8008438:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 800843a:	687b      	ldr	r3, [r7, #4]
 800843c:	2208      	movs	r2, #8
 800843e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8008440:	687b      	ldr	r3, [r7, #4]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800844a:	2b00      	cmp	r3, #0
 800844c:	d003      	beq.n	8008456 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800844e:	6878      	ldr	r0, [r7, #4]
 8008450:	f000 f9d3 	bl	80087fa <HAL_TIM_IC_CaptureCallback>
 8008454:	e005      	b.n	8008462 <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 f9c5 	bl	80087e6 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 800845c:	6878      	ldr	r0, [r7, #4]
 800845e:	f000 f9d6 	bl	800880e <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8008462:	687b      	ldr	r3, [r7, #4]
 8008464:	2200      	movs	r2, #0
 8008466:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	681b      	ldr	r3, [r3, #0]
 800846c:	691b      	ldr	r3, [r3, #16]
 800846e:	f003 0301 	and.w	r3, r3, #1
 8008472:	2b01      	cmp	r3, #1
 8008474:	d10e      	bne.n	8008494 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	68db      	ldr	r3, [r3, #12]
 800847c:	f003 0301 	and.w	r3, r3, #1
 8008480:	2b01      	cmp	r3, #1
 8008482:	d107      	bne.n	8008494 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8008484:	687b      	ldr	r3, [r7, #4]
 8008486:	681b      	ldr	r3, [r3, #0]
 8008488:	f06f 0201 	mvn.w	r2, #1
 800848c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800848e:	6878      	ldr	r0, [r7, #4]
 8008490:	f7fc feaa 	bl	80051e8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8008494:	687b      	ldr	r3, [r7, #4]
 8008496:	681b      	ldr	r3, [r3, #0]
 8008498:	691b      	ldr	r3, [r3, #16]
 800849a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800849e:	2b80      	cmp	r3, #128	; 0x80
 80084a0:	d10e      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80084a2:	687b      	ldr	r3, [r7, #4]
 80084a4:	681b      	ldr	r3, [r3, #0]
 80084a6:	68db      	ldr	r3, [r3, #12]
 80084a8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80084ac:	2b80      	cmp	r3, #128	; 0x80
 80084ae:	d107      	bne.n	80084c0 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	681b      	ldr	r3, [r3, #0]
 80084b4:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80084b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80084ba:	6878      	ldr	r0, [r7, #4]
 80084bc:	f000 fca6 	bl	8008e0c <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80084c0:	687b      	ldr	r3, [r7, #4]
 80084c2:	681b      	ldr	r3, [r3, #0]
 80084c4:	691b      	ldr	r3, [r3, #16]
 80084c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084ca:	2b40      	cmp	r3, #64	; 0x40
 80084cc:	d10e      	bne.n	80084ec <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80084ce:	687b      	ldr	r3, [r7, #4]
 80084d0:	681b      	ldr	r3, [r3, #0]
 80084d2:	68db      	ldr	r3, [r3, #12]
 80084d4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80084d8:	2b40      	cmp	r3, #64	; 0x40
 80084da:	d107      	bne.n	80084ec <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80084dc:	687b      	ldr	r3, [r7, #4]
 80084de:	681b      	ldr	r3, [r3, #0]
 80084e0:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80084e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80084e6:	6878      	ldr	r0, [r7, #4]
 80084e8:	f000 f99b 	bl	8008822 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	691b      	ldr	r3, [r3, #16]
 80084f2:	f003 0320 	and.w	r3, r3, #32
 80084f6:	2b20      	cmp	r3, #32
 80084f8:	d10e      	bne.n	8008518 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	681b      	ldr	r3, [r3, #0]
 80084fe:	68db      	ldr	r3, [r3, #12]
 8008500:	f003 0320 	and.w	r3, r3, #32
 8008504:	2b20      	cmp	r3, #32
 8008506:	d107      	bne.n	8008518 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8008508:	687b      	ldr	r3, [r7, #4]
 800850a:	681b      	ldr	r3, [r3, #0]
 800850c:	f06f 0220 	mvn.w	r2, #32
 8008510:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8008512:	6878      	ldr	r0, [r7, #4]
 8008514:	f000 fc70 	bl	8008df8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8008518:	bf00      	nop
 800851a:	3708      	adds	r7, #8
 800851c:	46bd      	mov	sp, r7
 800851e:	bd80      	pop	{r7, pc}

08008520 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8008520:	b580      	push	{r7, lr}
 8008522:	b086      	sub	sp, #24
 8008524:	af00      	add	r7, sp, #0
 8008526:	60f8      	str	r0, [r7, #12]
 8008528:	60b9      	str	r1, [r7, #8]
 800852a:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800852c:	2300      	movs	r3, #0
 800852e:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008536:	2b01      	cmp	r3, #1
 8008538:	d101      	bne.n	800853e <HAL_TIM_IC_ConfigChannel+0x1e>
 800853a:	2302      	movs	r3, #2
 800853c:	e088      	b.n	8008650 <HAL_TIM_IC_ConfigChannel+0x130>
 800853e:	68fb      	ldr	r3, [r7, #12]
 8008540:	2201      	movs	r2, #1
 8008542:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8008546:	687b      	ldr	r3, [r7, #4]
 8008548:	2b00      	cmp	r3, #0
 800854a:	d11b      	bne.n	8008584 <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 800854c:	68fb      	ldr	r3, [r7, #12]
 800854e:	6818      	ldr	r0, [r3, #0]
 8008550:	68bb      	ldr	r3, [r7, #8]
 8008552:	6819      	ldr	r1, [r3, #0]
 8008554:	68bb      	ldr	r3, [r7, #8]
 8008556:	685a      	ldr	r2, [r3, #4]
 8008558:	68bb      	ldr	r3, [r7, #8]
 800855a:	68db      	ldr	r3, [r3, #12]
 800855c:	f000 fa0c 	bl	8008978 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8008560:	68fb      	ldr	r3, [r7, #12]
 8008562:	681b      	ldr	r3, [r3, #0]
 8008564:	699a      	ldr	r2, [r3, #24]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	f022 020c 	bic.w	r2, r2, #12
 800856e:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8008570:	68fb      	ldr	r3, [r7, #12]
 8008572:	681b      	ldr	r3, [r3, #0]
 8008574:	6999      	ldr	r1, [r3, #24]
 8008576:	68bb      	ldr	r3, [r7, #8]
 8008578:	689a      	ldr	r2, [r3, #8]
 800857a:	68fb      	ldr	r3, [r7, #12]
 800857c:	681b      	ldr	r3, [r3, #0]
 800857e:	430a      	orrs	r2, r1
 8008580:	619a      	str	r2, [r3, #24]
 8008582:	e060      	b.n	8008646 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8008584:	687b      	ldr	r3, [r7, #4]
 8008586:	2b04      	cmp	r3, #4
 8008588:	d11c      	bne.n	80085c4 <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 800858a:	68fb      	ldr	r3, [r7, #12]
 800858c:	6818      	ldr	r0, [r3, #0]
 800858e:	68bb      	ldr	r3, [r7, #8]
 8008590:	6819      	ldr	r1, [r3, #0]
 8008592:	68bb      	ldr	r3, [r7, #8]
 8008594:	685a      	ldr	r2, [r3, #4]
 8008596:	68bb      	ldr	r3, [r7, #8]
 8008598:	68db      	ldr	r3, [r3, #12]
 800859a:	f000 fa90 	bl	8008abe <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 800859e:	68fb      	ldr	r3, [r7, #12]
 80085a0:	681b      	ldr	r3, [r3, #0]
 80085a2:	699a      	ldr	r2, [r3, #24]
 80085a4:	68fb      	ldr	r3, [r7, #12]
 80085a6:	681b      	ldr	r3, [r3, #0]
 80085a8:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 80085ac:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 80085ae:	68fb      	ldr	r3, [r7, #12]
 80085b0:	681b      	ldr	r3, [r3, #0]
 80085b2:	6999      	ldr	r1, [r3, #24]
 80085b4:	68bb      	ldr	r3, [r7, #8]
 80085b6:	689b      	ldr	r3, [r3, #8]
 80085b8:	021a      	lsls	r2, r3, #8
 80085ba:	68fb      	ldr	r3, [r7, #12]
 80085bc:	681b      	ldr	r3, [r3, #0]
 80085be:	430a      	orrs	r2, r1
 80085c0:	619a      	str	r2, [r3, #24]
 80085c2:	e040      	b.n	8008646 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 80085c4:	687b      	ldr	r3, [r7, #4]
 80085c6:	2b08      	cmp	r3, #8
 80085c8:	d11b      	bne.n	8008602 <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 80085ca:	68fb      	ldr	r3, [r7, #12]
 80085cc:	6818      	ldr	r0, [r3, #0]
 80085ce:	68bb      	ldr	r3, [r7, #8]
 80085d0:	6819      	ldr	r1, [r3, #0]
 80085d2:	68bb      	ldr	r3, [r7, #8]
 80085d4:	685a      	ldr	r2, [r3, #4]
 80085d6:	68bb      	ldr	r3, [r7, #8]
 80085d8:	68db      	ldr	r3, [r3, #12]
 80085da:	f000 fadd 	bl	8008b98 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 80085de:	68fb      	ldr	r3, [r7, #12]
 80085e0:	681b      	ldr	r3, [r3, #0]
 80085e2:	69da      	ldr	r2, [r3, #28]
 80085e4:	68fb      	ldr	r3, [r7, #12]
 80085e6:	681b      	ldr	r3, [r3, #0]
 80085e8:	f022 020c 	bic.w	r2, r2, #12
 80085ec:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 80085ee:	68fb      	ldr	r3, [r7, #12]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	69d9      	ldr	r1, [r3, #28]
 80085f4:	68bb      	ldr	r3, [r7, #8]
 80085f6:	689a      	ldr	r2, [r3, #8]
 80085f8:	68fb      	ldr	r3, [r7, #12]
 80085fa:	681b      	ldr	r3, [r3, #0]
 80085fc:	430a      	orrs	r2, r1
 80085fe:	61da      	str	r2, [r3, #28]
 8008600:	e021      	b.n	8008646 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8008602:	687b      	ldr	r3, [r7, #4]
 8008604:	2b0c      	cmp	r3, #12
 8008606:	d11c      	bne.n	8008642 <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8008608:	68fb      	ldr	r3, [r7, #12]
 800860a:	6818      	ldr	r0, [r3, #0]
 800860c:	68bb      	ldr	r3, [r7, #8]
 800860e:	6819      	ldr	r1, [r3, #0]
 8008610:	68bb      	ldr	r3, [r7, #8]
 8008612:	685a      	ldr	r2, [r3, #4]
 8008614:	68bb      	ldr	r3, [r7, #8]
 8008616:	68db      	ldr	r3, [r3, #12]
 8008618:	f000 fafa 	bl	8008c10 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 800861c:	68fb      	ldr	r3, [r7, #12]
 800861e:	681b      	ldr	r3, [r3, #0]
 8008620:	69da      	ldr	r2, [r3, #28]
 8008622:	68fb      	ldr	r3, [r7, #12]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 800862a:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 800862c:	68fb      	ldr	r3, [r7, #12]
 800862e:	681b      	ldr	r3, [r3, #0]
 8008630:	69d9      	ldr	r1, [r3, #28]
 8008632:	68bb      	ldr	r3, [r7, #8]
 8008634:	689b      	ldr	r3, [r3, #8]
 8008636:	021a      	lsls	r2, r3, #8
 8008638:	68fb      	ldr	r3, [r7, #12]
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	430a      	orrs	r2, r1
 800863e:	61da      	str	r2, [r3, #28]
 8008640:	e001      	b.n	8008646 <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8008642:	2301      	movs	r3, #1
 8008644:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8008646:	68fb      	ldr	r3, [r7, #12]
 8008648:	2200      	movs	r2, #0
 800864a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 800864e:	7dfb      	ldrb	r3, [r7, #23]
}
 8008650:	4618      	mov	r0, r3
 8008652:	3718      	adds	r7, #24
 8008654:	46bd      	mov	sp, r7
 8008656:	bd80      	pop	{r7, pc}

08008658 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8008658:	b580      	push	{r7, lr}
 800865a:	b084      	sub	sp, #16
 800865c:	af00      	add	r7, sp, #0
 800865e:	6078      	str	r0, [r7, #4]
 8008660:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8008662:	2300      	movs	r3, #0
 8008664:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800866c:	2b01      	cmp	r3, #1
 800866e:	d101      	bne.n	8008674 <HAL_TIM_ConfigClockSource+0x1c>
 8008670:	2302      	movs	r3, #2
 8008672:	e0b4      	b.n	80087de <HAL_TIM_ConfigClockSource+0x186>
 8008674:	687b      	ldr	r3, [r7, #4]
 8008676:	2201      	movs	r2, #1
 8008678:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	2202      	movs	r2, #2
 8008680:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	681b      	ldr	r3, [r3, #0]
 8008688:	689b      	ldr	r3, [r3, #8]
 800868a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 800868c:	68bb      	ldr	r3, [r7, #8]
 800868e:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8008692:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008694:	68bb      	ldr	r3, [r7, #8]
 8008696:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 800869a:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	681b      	ldr	r3, [r3, #0]
 80086a0:	68ba      	ldr	r2, [r7, #8]
 80086a2:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80086a4:	683b      	ldr	r3, [r7, #0]
 80086a6:	681b      	ldr	r3, [r3, #0]
 80086a8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086ac:	d03e      	beq.n	800872c <HAL_TIM_ConfigClockSource+0xd4>
 80086ae:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80086b2:	f200 8087 	bhi.w	80087c4 <HAL_TIM_ConfigClockSource+0x16c>
 80086b6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086ba:	f000 8086 	beq.w	80087ca <HAL_TIM_ConfigClockSource+0x172>
 80086be:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80086c2:	d87f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x16c>
 80086c4:	2b70      	cmp	r3, #112	; 0x70
 80086c6:	d01a      	beq.n	80086fe <HAL_TIM_ConfigClockSource+0xa6>
 80086c8:	2b70      	cmp	r3, #112	; 0x70
 80086ca:	d87b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x16c>
 80086cc:	2b60      	cmp	r3, #96	; 0x60
 80086ce:	d050      	beq.n	8008772 <HAL_TIM_ConfigClockSource+0x11a>
 80086d0:	2b60      	cmp	r3, #96	; 0x60
 80086d2:	d877      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x16c>
 80086d4:	2b50      	cmp	r3, #80	; 0x50
 80086d6:	d03c      	beq.n	8008752 <HAL_TIM_ConfigClockSource+0xfa>
 80086d8:	2b50      	cmp	r3, #80	; 0x50
 80086da:	d873      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x16c>
 80086dc:	2b40      	cmp	r3, #64	; 0x40
 80086de:	d058      	beq.n	8008792 <HAL_TIM_ConfigClockSource+0x13a>
 80086e0:	2b40      	cmp	r3, #64	; 0x40
 80086e2:	d86f      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x16c>
 80086e4:	2b30      	cmp	r3, #48	; 0x30
 80086e6:	d064      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x15a>
 80086e8:	2b30      	cmp	r3, #48	; 0x30
 80086ea:	d86b      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x16c>
 80086ec:	2b20      	cmp	r3, #32
 80086ee:	d060      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x15a>
 80086f0:	2b20      	cmp	r3, #32
 80086f2:	d867      	bhi.n	80087c4 <HAL_TIM_ConfigClockSource+0x16c>
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d05c      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x15a>
 80086f8:	2b10      	cmp	r3, #16
 80086fa:	d05a      	beq.n	80087b2 <HAL_TIM_ConfigClockSource+0x15a>
 80086fc:	e062      	b.n	80087c4 <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6818      	ldr	r0, [r3, #0]
 8008702:	683b      	ldr	r3, [r7, #0]
 8008704:	6899      	ldr	r1, [r3, #8]
 8008706:	683b      	ldr	r3, [r7, #0]
 8008708:	685a      	ldr	r2, [r3, #4]
 800870a:	683b      	ldr	r3, [r7, #0]
 800870c:	68db      	ldr	r3, [r3, #12]
 800870e:	f000 fad7 	bl	8008cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8008712:	687b      	ldr	r3, [r7, #4]
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	689b      	ldr	r3, [r3, #8]
 8008718:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 800871a:	68bb      	ldr	r3, [r7, #8]
 800871c:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8008720:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	681b      	ldr	r3, [r3, #0]
 8008726:	68ba      	ldr	r2, [r7, #8]
 8008728:	609a      	str	r2, [r3, #8]
      break;
 800872a:	e04f      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	6818      	ldr	r0, [r3, #0]
 8008730:	683b      	ldr	r3, [r7, #0]
 8008732:	6899      	ldr	r1, [r3, #8]
 8008734:	683b      	ldr	r3, [r7, #0]
 8008736:	685a      	ldr	r2, [r3, #4]
 8008738:	683b      	ldr	r3, [r7, #0]
 800873a:	68db      	ldr	r3, [r3, #12]
 800873c:	f000 fac0 	bl	8008cc0 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	681b      	ldr	r3, [r3, #0]
 8008744:	689a      	ldr	r2, [r3, #8]
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	681b      	ldr	r3, [r3, #0]
 800874a:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800874e:	609a      	str	r2, [r3, #8]
      break;
 8008750:	e03c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	6818      	ldr	r0, [r3, #0]
 8008756:	683b      	ldr	r3, [r7, #0]
 8008758:	6859      	ldr	r1, [r3, #4]
 800875a:	683b      	ldr	r3, [r7, #0]
 800875c:	68db      	ldr	r3, [r3, #12]
 800875e:	461a      	mov	r2, r3
 8008760:	f000 f97e 	bl	8008a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8008764:	687b      	ldr	r3, [r7, #4]
 8008766:	681b      	ldr	r3, [r3, #0]
 8008768:	2150      	movs	r1, #80	; 0x50
 800876a:	4618      	mov	r0, r3
 800876c:	f000 fa8d 	bl	8008c8a <TIM_ITRx_SetConfig>
      break;
 8008770:	e02c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	6818      	ldr	r0, [r3, #0]
 8008776:	683b      	ldr	r3, [r7, #0]
 8008778:	6859      	ldr	r1, [r3, #4]
 800877a:	683b      	ldr	r3, [r7, #0]
 800877c:	68db      	ldr	r3, [r3, #12]
 800877e:	461a      	mov	r2, r3
 8008780:	f000 f9da 	bl	8008b38 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8008784:	687b      	ldr	r3, [r7, #4]
 8008786:	681b      	ldr	r3, [r3, #0]
 8008788:	2160      	movs	r1, #96	; 0x60
 800878a:	4618      	mov	r0, r3
 800878c:	f000 fa7d 	bl	8008c8a <TIM_ITRx_SetConfig>
      break;
 8008790:	e01c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6818      	ldr	r0, [r3, #0]
 8008796:	683b      	ldr	r3, [r7, #0]
 8008798:	6859      	ldr	r1, [r3, #4]
 800879a:	683b      	ldr	r3, [r7, #0]
 800879c:	68db      	ldr	r3, [r3, #12]
 800879e:	461a      	mov	r2, r3
 80087a0:	f000 f95e 	bl	8008a60 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80087a4:	687b      	ldr	r3, [r7, #4]
 80087a6:	681b      	ldr	r3, [r3, #0]
 80087a8:	2140      	movs	r1, #64	; 0x40
 80087aa:	4618      	mov	r0, r3
 80087ac:	f000 fa6d 	bl	8008c8a <TIM_ITRx_SetConfig>
      break;
 80087b0:	e00c      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681a      	ldr	r2, [r3, #0]
 80087b6:	683b      	ldr	r3, [r7, #0]
 80087b8:	681b      	ldr	r3, [r3, #0]
 80087ba:	4619      	mov	r1, r3
 80087bc:	4610      	mov	r0, r2
 80087be:	f000 fa64 	bl	8008c8a <TIM_ITRx_SetConfig>
      break;
 80087c2:	e003      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 80087c4:	2301      	movs	r3, #1
 80087c6:	73fb      	strb	r3, [r7, #15]
      break;
 80087c8:	e000      	b.n	80087cc <HAL_TIM_ConfigClockSource+0x174>
      break;
 80087ca:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	2201      	movs	r2, #1
 80087d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80087d4:	687b      	ldr	r3, [r7, #4]
 80087d6:	2200      	movs	r2, #0
 80087d8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80087dc:	7bfb      	ldrb	r3, [r7, #15]
}
 80087de:	4618      	mov	r0, r3
 80087e0:	3710      	adds	r7, #16
 80087e2:	46bd      	mov	sp, r7
 80087e4:	bd80      	pop	{r7, pc}

080087e6 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80087e6:	b480      	push	{r7}
 80087e8:	b083      	sub	sp, #12
 80087ea:	af00      	add	r7, sp, #0
 80087ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80087ee:	bf00      	nop
 80087f0:	370c      	adds	r7, #12
 80087f2:	46bd      	mov	sp, r7
 80087f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087f8:	4770      	bx	lr

080087fa <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80087fa:	b480      	push	{r7}
 80087fc:	b083      	sub	sp, #12
 80087fe:	af00      	add	r7, sp, #0
 8008800:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8008802:	bf00      	nop
 8008804:	370c      	adds	r7, #12
 8008806:	46bd      	mov	sp, r7
 8008808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800880c:	4770      	bx	lr

0800880e <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 800880e:	b480      	push	{r7}
 8008810:	b083      	sub	sp, #12
 8008812:	af00      	add	r7, sp, #0
 8008814:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8008816:	bf00      	nop
 8008818:	370c      	adds	r7, #12
 800881a:	46bd      	mov	sp, r7
 800881c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008820:	4770      	bx	lr

08008822 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8008822:	b480      	push	{r7}
 8008824:	b083      	sub	sp, #12
 8008826:	af00      	add	r7, sp, #0
 8008828:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 800882a:	bf00      	nop
 800882c:	370c      	adds	r7, #12
 800882e:	46bd      	mov	sp, r7
 8008830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008834:	4770      	bx	lr
	...

08008838 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008838:	b480      	push	{r7}
 800883a:	b085      	sub	sp, #20
 800883c:	af00      	add	r7, sp, #0
 800883e:	6078      	str	r0, [r7, #4]
 8008840:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	4a40      	ldr	r2, [pc, #256]	; (800894c <TIM_Base_SetConfig+0x114>)
 800884c:	4293      	cmp	r3, r2
 800884e:	d013      	beq.n	8008878 <TIM_Base_SetConfig+0x40>
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008856:	d00f      	beq.n	8008878 <TIM_Base_SetConfig+0x40>
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	4a3d      	ldr	r2, [pc, #244]	; (8008950 <TIM_Base_SetConfig+0x118>)
 800885c:	4293      	cmp	r3, r2
 800885e:	d00b      	beq.n	8008878 <TIM_Base_SetConfig+0x40>
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	4a3c      	ldr	r2, [pc, #240]	; (8008954 <TIM_Base_SetConfig+0x11c>)
 8008864:	4293      	cmp	r3, r2
 8008866:	d007      	beq.n	8008878 <TIM_Base_SetConfig+0x40>
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	4a3b      	ldr	r2, [pc, #236]	; (8008958 <TIM_Base_SetConfig+0x120>)
 800886c:	4293      	cmp	r3, r2
 800886e:	d003      	beq.n	8008878 <TIM_Base_SetConfig+0x40>
 8008870:	687b      	ldr	r3, [r7, #4]
 8008872:	4a3a      	ldr	r2, [pc, #232]	; (800895c <TIM_Base_SetConfig+0x124>)
 8008874:	4293      	cmp	r3, r2
 8008876:	d108      	bne.n	800888a <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800887e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008880:	683b      	ldr	r3, [r7, #0]
 8008882:	685b      	ldr	r3, [r3, #4]
 8008884:	68fa      	ldr	r2, [r7, #12]
 8008886:	4313      	orrs	r3, r2
 8008888:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800888a:	687b      	ldr	r3, [r7, #4]
 800888c:	4a2f      	ldr	r2, [pc, #188]	; (800894c <TIM_Base_SetConfig+0x114>)
 800888e:	4293      	cmp	r3, r2
 8008890:	d02b      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 8008892:	687b      	ldr	r3, [r7, #4]
 8008894:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008898:	d027      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	4a2c      	ldr	r2, [pc, #176]	; (8008950 <TIM_Base_SetConfig+0x118>)
 800889e:	4293      	cmp	r3, r2
 80088a0:	d023      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 80088a2:	687b      	ldr	r3, [r7, #4]
 80088a4:	4a2b      	ldr	r2, [pc, #172]	; (8008954 <TIM_Base_SetConfig+0x11c>)
 80088a6:	4293      	cmp	r3, r2
 80088a8:	d01f      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 80088aa:	687b      	ldr	r3, [r7, #4]
 80088ac:	4a2a      	ldr	r2, [pc, #168]	; (8008958 <TIM_Base_SetConfig+0x120>)
 80088ae:	4293      	cmp	r3, r2
 80088b0:	d01b      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	4a29      	ldr	r2, [pc, #164]	; (800895c <TIM_Base_SetConfig+0x124>)
 80088b6:	4293      	cmp	r3, r2
 80088b8:	d017      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 80088ba:	687b      	ldr	r3, [r7, #4]
 80088bc:	4a28      	ldr	r2, [pc, #160]	; (8008960 <TIM_Base_SetConfig+0x128>)
 80088be:	4293      	cmp	r3, r2
 80088c0:	d013      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 80088c2:	687b      	ldr	r3, [r7, #4]
 80088c4:	4a27      	ldr	r2, [pc, #156]	; (8008964 <TIM_Base_SetConfig+0x12c>)
 80088c6:	4293      	cmp	r3, r2
 80088c8:	d00f      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 80088ca:	687b      	ldr	r3, [r7, #4]
 80088cc:	4a26      	ldr	r2, [pc, #152]	; (8008968 <TIM_Base_SetConfig+0x130>)
 80088ce:	4293      	cmp	r3, r2
 80088d0:	d00b      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 80088d2:	687b      	ldr	r3, [r7, #4]
 80088d4:	4a25      	ldr	r2, [pc, #148]	; (800896c <TIM_Base_SetConfig+0x134>)
 80088d6:	4293      	cmp	r3, r2
 80088d8:	d007      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 80088da:	687b      	ldr	r3, [r7, #4]
 80088dc:	4a24      	ldr	r2, [pc, #144]	; (8008970 <TIM_Base_SetConfig+0x138>)
 80088de:	4293      	cmp	r3, r2
 80088e0:	d003      	beq.n	80088ea <TIM_Base_SetConfig+0xb2>
 80088e2:	687b      	ldr	r3, [r7, #4]
 80088e4:	4a23      	ldr	r2, [pc, #140]	; (8008974 <TIM_Base_SetConfig+0x13c>)
 80088e6:	4293      	cmp	r3, r2
 80088e8:	d108      	bne.n	80088fc <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80088ea:	68fb      	ldr	r3, [r7, #12]
 80088ec:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80088f0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80088f2:	683b      	ldr	r3, [r7, #0]
 80088f4:	68db      	ldr	r3, [r3, #12]
 80088f6:	68fa      	ldr	r2, [r7, #12]
 80088f8:	4313      	orrs	r3, r2
 80088fa:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80088fc:	68fb      	ldr	r3, [r7, #12]
 80088fe:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8008902:	683b      	ldr	r3, [r7, #0]
 8008904:	695b      	ldr	r3, [r3, #20]
 8008906:	4313      	orrs	r3, r2
 8008908:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	68fa      	ldr	r2, [r7, #12]
 800890e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008910:	683b      	ldr	r3, [r7, #0]
 8008912:	689a      	ldr	r2, [r3, #8]
 8008914:	687b      	ldr	r3, [r7, #4]
 8008916:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008918:	683b      	ldr	r3, [r7, #0]
 800891a:	681a      	ldr	r2, [r3, #0]
 800891c:	687b      	ldr	r3, [r7, #4]
 800891e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	4a0a      	ldr	r2, [pc, #40]	; (800894c <TIM_Base_SetConfig+0x114>)
 8008924:	4293      	cmp	r3, r2
 8008926:	d003      	beq.n	8008930 <TIM_Base_SetConfig+0xf8>
 8008928:	687b      	ldr	r3, [r7, #4]
 800892a:	4a0c      	ldr	r2, [pc, #48]	; (800895c <TIM_Base_SetConfig+0x124>)
 800892c:	4293      	cmp	r3, r2
 800892e:	d103      	bne.n	8008938 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008930:	683b      	ldr	r3, [r7, #0]
 8008932:	691a      	ldr	r2, [r3, #16]
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	2201      	movs	r2, #1
 800893c:	615a      	str	r2, [r3, #20]
}
 800893e:	bf00      	nop
 8008940:	3714      	adds	r7, #20
 8008942:	46bd      	mov	sp, r7
 8008944:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008948:	4770      	bx	lr
 800894a:	bf00      	nop
 800894c:	40010000 	.word	0x40010000
 8008950:	40000400 	.word	0x40000400
 8008954:	40000800 	.word	0x40000800
 8008958:	40000c00 	.word	0x40000c00
 800895c:	40010400 	.word	0x40010400
 8008960:	40014000 	.word	0x40014000
 8008964:	40014400 	.word	0x40014400
 8008968:	40014800 	.word	0x40014800
 800896c:	40001800 	.word	0x40001800
 8008970:	40001c00 	.word	0x40001c00
 8008974:	40002000 	.word	0x40002000

08008978 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008978:	b480      	push	{r7}
 800897a:	b087      	sub	sp, #28
 800897c:	af00      	add	r7, sp, #0
 800897e:	60f8      	str	r0, [r7, #12]
 8008980:	60b9      	str	r1, [r7, #8]
 8008982:	607a      	str	r2, [r7, #4]
 8008984:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	6a1b      	ldr	r3, [r3, #32]
 800898a:	f023 0201 	bic.w	r2, r3, #1
 800898e:	68fb      	ldr	r3, [r7, #12]
 8008990:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008992:	68fb      	ldr	r3, [r7, #12]
 8008994:	699b      	ldr	r3, [r3, #24]
 8008996:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	6a1b      	ldr	r3, [r3, #32]
 800899c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 800899e:	68fb      	ldr	r3, [r7, #12]
 80089a0:	4a28      	ldr	r2, [pc, #160]	; (8008a44 <TIM_TI1_SetConfig+0xcc>)
 80089a2:	4293      	cmp	r3, r2
 80089a4:	d01b      	beq.n	80089de <TIM_TI1_SetConfig+0x66>
 80089a6:	68fb      	ldr	r3, [r7, #12]
 80089a8:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80089ac:	d017      	beq.n	80089de <TIM_TI1_SetConfig+0x66>
 80089ae:	68fb      	ldr	r3, [r7, #12]
 80089b0:	4a25      	ldr	r2, [pc, #148]	; (8008a48 <TIM_TI1_SetConfig+0xd0>)
 80089b2:	4293      	cmp	r3, r2
 80089b4:	d013      	beq.n	80089de <TIM_TI1_SetConfig+0x66>
 80089b6:	68fb      	ldr	r3, [r7, #12]
 80089b8:	4a24      	ldr	r2, [pc, #144]	; (8008a4c <TIM_TI1_SetConfig+0xd4>)
 80089ba:	4293      	cmp	r3, r2
 80089bc:	d00f      	beq.n	80089de <TIM_TI1_SetConfig+0x66>
 80089be:	68fb      	ldr	r3, [r7, #12]
 80089c0:	4a23      	ldr	r2, [pc, #140]	; (8008a50 <TIM_TI1_SetConfig+0xd8>)
 80089c2:	4293      	cmp	r3, r2
 80089c4:	d00b      	beq.n	80089de <TIM_TI1_SetConfig+0x66>
 80089c6:	68fb      	ldr	r3, [r7, #12]
 80089c8:	4a22      	ldr	r2, [pc, #136]	; (8008a54 <TIM_TI1_SetConfig+0xdc>)
 80089ca:	4293      	cmp	r3, r2
 80089cc:	d007      	beq.n	80089de <TIM_TI1_SetConfig+0x66>
 80089ce:	68fb      	ldr	r3, [r7, #12]
 80089d0:	4a21      	ldr	r2, [pc, #132]	; (8008a58 <TIM_TI1_SetConfig+0xe0>)
 80089d2:	4293      	cmp	r3, r2
 80089d4:	d003      	beq.n	80089de <TIM_TI1_SetConfig+0x66>
 80089d6:	68fb      	ldr	r3, [r7, #12]
 80089d8:	4a20      	ldr	r2, [pc, #128]	; (8008a5c <TIM_TI1_SetConfig+0xe4>)
 80089da:	4293      	cmp	r3, r2
 80089dc:	d101      	bne.n	80089e2 <TIM_TI1_SetConfig+0x6a>
 80089de:	2301      	movs	r3, #1
 80089e0:	e000      	b.n	80089e4 <TIM_TI1_SetConfig+0x6c>
 80089e2:	2300      	movs	r3, #0
 80089e4:	2b00      	cmp	r3, #0
 80089e6:	d008      	beq.n	80089fa <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80089e8:	697b      	ldr	r3, [r7, #20]
 80089ea:	f023 0303 	bic.w	r3, r3, #3
 80089ee:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80089f0:	697a      	ldr	r2, [r7, #20]
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	4313      	orrs	r3, r2
 80089f6:	617b      	str	r3, [r7, #20]
 80089f8:	e003      	b.n	8008a02 <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80089fa:	697b      	ldr	r3, [r7, #20]
 80089fc:	f043 0301 	orr.w	r3, r3, #1
 8008a00:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a02:	697b      	ldr	r3, [r7, #20]
 8008a04:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a08:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008a0a:	683b      	ldr	r3, [r7, #0]
 8008a0c:	011b      	lsls	r3, r3, #4
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	697a      	ldr	r2, [r7, #20]
 8008a12:	4313      	orrs	r3, r2
 8008a14:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a16:	693b      	ldr	r3, [r7, #16]
 8008a18:	f023 030a 	bic.w	r3, r3, #10
 8008a1c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008a1e:	68bb      	ldr	r3, [r7, #8]
 8008a20:	f003 030a 	and.w	r3, r3, #10
 8008a24:	693a      	ldr	r2, [r7, #16]
 8008a26:	4313      	orrs	r3, r2
 8008a28:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	697a      	ldr	r2, [r7, #20]
 8008a2e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008a30:	68fb      	ldr	r3, [r7, #12]
 8008a32:	693a      	ldr	r2, [r7, #16]
 8008a34:	621a      	str	r2, [r3, #32]
}
 8008a36:	bf00      	nop
 8008a38:	371c      	adds	r7, #28
 8008a3a:	46bd      	mov	sp, r7
 8008a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008a40:	4770      	bx	lr
 8008a42:	bf00      	nop
 8008a44:	40010000 	.word	0x40010000
 8008a48:	40000400 	.word	0x40000400
 8008a4c:	40000800 	.word	0x40000800
 8008a50:	40000c00 	.word	0x40000c00
 8008a54:	40010400 	.word	0x40010400
 8008a58:	40014000 	.word	0x40014000
 8008a5c:	40001800 	.word	0x40001800

08008a60 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008a60:	b480      	push	{r7}
 8008a62:	b087      	sub	sp, #28
 8008a64:	af00      	add	r7, sp, #0
 8008a66:	60f8      	str	r0, [r7, #12]
 8008a68:	60b9      	str	r1, [r7, #8]
 8008a6a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008a6c:	68fb      	ldr	r3, [r7, #12]
 8008a6e:	6a1b      	ldr	r3, [r3, #32]
 8008a70:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008a72:	68fb      	ldr	r3, [r7, #12]
 8008a74:	6a1b      	ldr	r3, [r3, #32]
 8008a76:	f023 0201 	bic.w	r2, r3, #1
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008a7e:	68fb      	ldr	r3, [r7, #12]
 8008a80:	699b      	ldr	r3, [r3, #24]
 8008a82:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8008a84:	693b      	ldr	r3, [r7, #16]
 8008a86:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008a8a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008a8c:	687b      	ldr	r3, [r7, #4]
 8008a8e:	011b      	lsls	r3, r3, #4
 8008a90:	693a      	ldr	r2, [r7, #16]
 8008a92:	4313      	orrs	r3, r2
 8008a94:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8008a96:	697b      	ldr	r3, [r7, #20]
 8008a98:	f023 030a 	bic.w	r3, r3, #10
 8008a9c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008a9e:	697a      	ldr	r2, [r7, #20]
 8008aa0:	68bb      	ldr	r3, [r7, #8]
 8008aa2:	4313      	orrs	r3, r2
 8008aa4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008aa6:	68fb      	ldr	r3, [r7, #12]
 8008aa8:	693a      	ldr	r2, [r7, #16]
 8008aaa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	697a      	ldr	r2, [r7, #20]
 8008ab0:	621a      	str	r2, [r3, #32]
}
 8008ab2:	bf00      	nop
 8008ab4:	371c      	adds	r7, #28
 8008ab6:	46bd      	mov	sp, r7
 8008ab8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008abc:	4770      	bx	lr

08008abe <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008abe:	b480      	push	{r7}
 8008ac0:	b087      	sub	sp, #28
 8008ac2:	af00      	add	r7, sp, #0
 8008ac4:	60f8      	str	r0, [r7, #12]
 8008ac6:	60b9      	str	r1, [r7, #8]
 8008ac8:	607a      	str	r2, [r7, #4]
 8008aca:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	6a1b      	ldr	r3, [r3, #32]
 8008ad0:	f023 0210 	bic.w	r2, r3, #16
 8008ad4:	68fb      	ldr	r3, [r7, #12]
 8008ad6:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008ad8:	68fb      	ldr	r3, [r7, #12]
 8008ada:	699b      	ldr	r3, [r3, #24]
 8008adc:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008ade:	68fb      	ldr	r3, [r7, #12]
 8008ae0:	6a1b      	ldr	r3, [r3, #32]
 8008ae2:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 8008ae4:	697b      	ldr	r3, [r7, #20]
 8008ae6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008aea:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	021b      	lsls	r3, r3, #8
 8008af0:	697a      	ldr	r2, [r7, #20]
 8008af2:	4313      	orrs	r3, r2
 8008af4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008af6:	697b      	ldr	r3, [r7, #20]
 8008af8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008afc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008afe:	683b      	ldr	r3, [r7, #0]
 8008b00:	031b      	lsls	r3, r3, #12
 8008b02:	b29b      	uxth	r3, r3
 8008b04:	697a      	ldr	r2, [r7, #20]
 8008b06:	4313      	orrs	r3, r2
 8008b08:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b0a:	693b      	ldr	r3, [r7, #16]
 8008b0c:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b10:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 8008b12:	68bb      	ldr	r3, [r7, #8]
 8008b14:	011b      	lsls	r3, r3, #4
 8008b16:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008b1a:	693a      	ldr	r2, [r7, #16]
 8008b1c:	4313      	orrs	r3, r2
 8008b1e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b20:	68fb      	ldr	r3, [r7, #12]
 8008b22:	697a      	ldr	r2, [r7, #20]
 8008b24:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	693a      	ldr	r2, [r7, #16]
 8008b2a:	621a      	str	r2, [r3, #32]
}
 8008b2c:	bf00      	nop
 8008b2e:	371c      	adds	r7, #28
 8008b30:	46bd      	mov	sp, r7
 8008b32:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b36:	4770      	bx	lr

08008b38 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008b38:	b480      	push	{r7}
 8008b3a:	b087      	sub	sp, #28
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	60f8      	str	r0, [r7, #12]
 8008b40:	60b9      	str	r1, [r7, #8]
 8008b42:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008b44:	68fb      	ldr	r3, [r7, #12]
 8008b46:	6a1b      	ldr	r3, [r3, #32]
 8008b48:	f023 0210 	bic.w	r2, r3, #16
 8008b4c:	68fb      	ldr	r3, [r7, #12]
 8008b4e:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008b50:	68fb      	ldr	r3, [r7, #12]
 8008b52:	699b      	ldr	r3, [r3, #24]
 8008b54:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008b56:	68fb      	ldr	r3, [r7, #12]
 8008b58:	6a1b      	ldr	r3, [r3, #32]
 8008b5a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008b5c:	697b      	ldr	r3, [r7, #20]
 8008b5e:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008b62:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008b64:	687b      	ldr	r3, [r7, #4]
 8008b66:	031b      	lsls	r3, r3, #12
 8008b68:	697a      	ldr	r2, [r7, #20]
 8008b6a:	4313      	orrs	r3, r2
 8008b6c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008b6e:	693b      	ldr	r3, [r7, #16]
 8008b70:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008b74:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008b76:	68bb      	ldr	r3, [r7, #8]
 8008b78:	011b      	lsls	r3, r3, #4
 8008b7a:	693a      	ldr	r2, [r7, #16]
 8008b7c:	4313      	orrs	r3, r2
 8008b7e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008b80:	68fb      	ldr	r3, [r7, #12]
 8008b82:	697a      	ldr	r2, [r7, #20]
 8008b84:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	693a      	ldr	r2, [r7, #16]
 8008b8a:	621a      	str	r2, [r3, #32]
}
 8008b8c:	bf00      	nop
 8008b8e:	371c      	adds	r7, #28
 8008b90:	46bd      	mov	sp, r7
 8008b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b96:	4770      	bx	lr

08008b98 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008b98:	b480      	push	{r7}
 8008b9a:	b087      	sub	sp, #28
 8008b9c:	af00      	add	r7, sp, #0
 8008b9e:	60f8      	str	r0, [r7, #12]
 8008ba0:	60b9      	str	r1, [r7, #8]
 8008ba2:	607a      	str	r2, [r7, #4]
 8008ba4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8008ba6:	68fb      	ldr	r3, [r7, #12]
 8008ba8:	6a1b      	ldr	r3, [r3, #32]
 8008baa:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008bae:	68fb      	ldr	r3, [r7, #12]
 8008bb0:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008bb2:	68fb      	ldr	r3, [r7, #12]
 8008bb4:	69db      	ldr	r3, [r3, #28]
 8008bb6:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008bb8:	68fb      	ldr	r3, [r7, #12]
 8008bba:	6a1b      	ldr	r3, [r3, #32]
 8008bbc:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008bbe:	697b      	ldr	r3, [r7, #20]
 8008bc0:	f023 0303 	bic.w	r3, r3, #3
 8008bc4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 8008bc6:	697a      	ldr	r2, [r7, #20]
 8008bc8:	687b      	ldr	r3, [r7, #4]
 8008bca:	4313      	orrs	r3, r2
 8008bcc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 8008bce:	697b      	ldr	r3, [r7, #20]
 8008bd0:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008bd4:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 8008bd6:	683b      	ldr	r3, [r7, #0]
 8008bd8:	011b      	lsls	r3, r3, #4
 8008bda:	b2db      	uxtb	r3, r3
 8008bdc:	697a      	ldr	r2, [r7, #20]
 8008bde:	4313      	orrs	r3, r2
 8008be0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 8008be2:	693b      	ldr	r3, [r7, #16]
 8008be4:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008be8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008bea:	68bb      	ldr	r3, [r7, #8]
 8008bec:	021b      	lsls	r3, r3, #8
 8008bee:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 8008bf2:	693a      	ldr	r2, [r7, #16]
 8008bf4:	4313      	orrs	r3, r2
 8008bf6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008bf8:	68fb      	ldr	r3, [r7, #12]
 8008bfa:	697a      	ldr	r2, [r7, #20]
 8008bfc:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008bfe:	68fb      	ldr	r3, [r7, #12]
 8008c00:	693a      	ldr	r2, [r7, #16]
 8008c02:	621a      	str	r2, [r3, #32]
}
 8008c04:	bf00      	nop
 8008c06:	371c      	adds	r7, #28
 8008c08:	46bd      	mov	sp, r7
 8008c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c0e:	4770      	bx	lr

08008c10 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008c10:	b480      	push	{r7}
 8008c12:	b087      	sub	sp, #28
 8008c14:	af00      	add	r7, sp, #0
 8008c16:	60f8      	str	r0, [r7, #12]
 8008c18:	60b9      	str	r1, [r7, #8]
 8008c1a:	607a      	str	r2, [r7, #4]
 8008c1c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008c1e:	68fb      	ldr	r3, [r7, #12]
 8008c20:	6a1b      	ldr	r3, [r3, #32]
 8008c22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8008c26:	68fb      	ldr	r3, [r7, #12]
 8008c28:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008c2a:	68fb      	ldr	r3, [r7, #12]
 8008c2c:	69db      	ldr	r3, [r3, #28]
 8008c2e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008c30:	68fb      	ldr	r3, [r7, #12]
 8008c32:	6a1b      	ldr	r3, [r3, #32]
 8008c34:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 8008c36:	697b      	ldr	r3, [r7, #20]
 8008c38:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008c3c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	021b      	lsls	r3, r3, #8
 8008c42:	697a      	ldr	r2, [r7, #20]
 8008c44:	4313      	orrs	r3, r2
 8008c46:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008c48:	697b      	ldr	r3, [r7, #20]
 8008c4a:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008c4e:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008c50:	683b      	ldr	r3, [r7, #0]
 8008c52:	031b      	lsls	r3, r3, #12
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	697a      	ldr	r2, [r7, #20]
 8008c58:	4313      	orrs	r3, r2
 8008c5a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008c5c:	693b      	ldr	r3, [r7, #16]
 8008c5e:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 8008c62:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 8008c64:	68bb      	ldr	r3, [r7, #8]
 8008c66:	031b      	lsls	r3, r3, #12
 8008c68:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008c6c:	693a      	ldr	r2, [r7, #16]
 8008c6e:	4313      	orrs	r3, r2
 8008c70:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	697a      	ldr	r2, [r7, #20]
 8008c76:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008c78:	68fb      	ldr	r3, [r7, #12]
 8008c7a:	693a      	ldr	r2, [r7, #16]
 8008c7c:	621a      	str	r2, [r3, #32]
}
 8008c7e:	bf00      	nop
 8008c80:	371c      	adds	r7, #28
 8008c82:	46bd      	mov	sp, r7
 8008c84:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c88:	4770      	bx	lr

08008c8a <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008c8a:	b480      	push	{r7}
 8008c8c:	b085      	sub	sp, #20
 8008c8e:	af00      	add	r7, sp, #0
 8008c90:	6078      	str	r0, [r7, #4]
 8008c92:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	689b      	ldr	r3, [r3, #8]
 8008c98:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008c9a:	68fb      	ldr	r3, [r7, #12]
 8008c9c:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008ca0:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8008ca2:	683a      	ldr	r2, [r7, #0]
 8008ca4:	68fb      	ldr	r3, [r7, #12]
 8008ca6:	4313      	orrs	r3, r2
 8008ca8:	f043 0307 	orr.w	r3, r3, #7
 8008cac:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	68fa      	ldr	r2, [r7, #12]
 8008cb2:	609a      	str	r2, [r3, #8]
}
 8008cb4:	bf00      	nop
 8008cb6:	3714      	adds	r7, #20
 8008cb8:	46bd      	mov	sp, r7
 8008cba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cbe:	4770      	bx	lr

08008cc0 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008cc0:	b480      	push	{r7}
 8008cc2:	b087      	sub	sp, #28
 8008cc4:	af00      	add	r7, sp, #0
 8008cc6:	60f8      	str	r0, [r7, #12]
 8008cc8:	60b9      	str	r1, [r7, #8]
 8008cca:	607a      	str	r2, [r7, #4]
 8008ccc:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008cce:	68fb      	ldr	r3, [r7, #12]
 8008cd0:	689b      	ldr	r3, [r3, #8]
 8008cd2:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8008cd4:	697b      	ldr	r3, [r7, #20]
 8008cd6:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008cda:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008cdc:	683b      	ldr	r3, [r7, #0]
 8008cde:	021a      	lsls	r2, r3, #8
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	431a      	orrs	r2, r3
 8008ce4:	68bb      	ldr	r3, [r7, #8]
 8008ce6:	4313      	orrs	r3, r2
 8008ce8:	697a      	ldr	r2, [r7, #20]
 8008cea:	4313      	orrs	r3, r2
 8008cec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008cee:	68fb      	ldr	r3, [r7, #12]
 8008cf0:	697a      	ldr	r2, [r7, #20]
 8008cf2:	609a      	str	r2, [r3, #8]
}
 8008cf4:	bf00      	nop
 8008cf6:	371c      	adds	r7, #28
 8008cf8:	46bd      	mov	sp, r7
 8008cfa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008cfe:	4770      	bx	lr

08008d00 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008d00:	b480      	push	{r7}
 8008d02:	b085      	sub	sp, #20
 8008d04:	af00      	add	r7, sp, #0
 8008d06:	6078      	str	r0, [r7, #4]
 8008d08:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008d10:	2b01      	cmp	r3, #1
 8008d12:	d101      	bne.n	8008d18 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008d14:	2302      	movs	r3, #2
 8008d16:	e05a      	b.n	8008dce <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008d18:	687b      	ldr	r3, [r7, #4]
 8008d1a:	2201      	movs	r2, #1
 8008d1c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	2202      	movs	r2, #2
 8008d24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008d28:	687b      	ldr	r3, [r7, #4]
 8008d2a:	681b      	ldr	r3, [r3, #0]
 8008d2c:	685b      	ldr	r3, [r3, #4]
 8008d2e:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008d30:	687b      	ldr	r3, [r7, #4]
 8008d32:	681b      	ldr	r3, [r3, #0]
 8008d34:	689b      	ldr	r3, [r3, #8]
 8008d36:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008d38:	68fb      	ldr	r3, [r7, #12]
 8008d3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008d3e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008d40:	683b      	ldr	r3, [r7, #0]
 8008d42:	681b      	ldr	r3, [r3, #0]
 8008d44:	68fa      	ldr	r2, [r7, #12]
 8008d46:	4313      	orrs	r3, r2
 8008d48:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008d4a:	687b      	ldr	r3, [r7, #4]
 8008d4c:	681b      	ldr	r3, [r3, #0]
 8008d4e:	68fa      	ldr	r2, [r7, #12]
 8008d50:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008d52:	687b      	ldr	r3, [r7, #4]
 8008d54:	681b      	ldr	r3, [r3, #0]
 8008d56:	4a21      	ldr	r2, [pc, #132]	; (8008ddc <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008d58:	4293      	cmp	r3, r2
 8008d5a:	d022      	beq.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008d64:	d01d      	beq.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	681b      	ldr	r3, [r3, #0]
 8008d6a:	4a1d      	ldr	r2, [pc, #116]	; (8008de0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008d6c:	4293      	cmp	r3, r2
 8008d6e:	d018      	beq.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	4a1b      	ldr	r2, [pc, #108]	; (8008de4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8008d76:	4293      	cmp	r3, r2
 8008d78:	d013      	beq.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d7a:	687b      	ldr	r3, [r7, #4]
 8008d7c:	681b      	ldr	r3, [r3, #0]
 8008d7e:	4a1a      	ldr	r2, [pc, #104]	; (8008de8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008d80:	4293      	cmp	r3, r2
 8008d82:	d00e      	beq.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	681b      	ldr	r3, [r3, #0]
 8008d88:	4a18      	ldr	r2, [pc, #96]	; (8008dec <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008d8a:	4293      	cmp	r3, r2
 8008d8c:	d009      	beq.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	4a17      	ldr	r2, [pc, #92]	; (8008df0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8008d94:	4293      	cmp	r3, r2
 8008d96:	d004      	beq.n	8008da2 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	4a15      	ldr	r2, [pc, #84]	; (8008df4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008d9e:	4293      	cmp	r3, r2
 8008da0:	d10c      	bne.n	8008dbc <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008da2:	68bb      	ldr	r3, [r7, #8]
 8008da4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008da8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008daa:	683b      	ldr	r3, [r7, #0]
 8008dac:	685b      	ldr	r3, [r3, #4]
 8008dae:	68ba      	ldr	r2, [r7, #8]
 8008db0:	4313      	orrs	r3, r2
 8008db2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8008db4:	687b      	ldr	r3, [r7, #4]
 8008db6:	681b      	ldr	r3, [r3, #0]
 8008db8:	68ba      	ldr	r2, [r7, #8]
 8008dba:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008dbc:	687b      	ldr	r3, [r7, #4]
 8008dbe:	2201      	movs	r2, #1
 8008dc0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8008dc4:	687b      	ldr	r3, [r7, #4]
 8008dc6:	2200      	movs	r2, #0
 8008dc8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8008dcc:	2300      	movs	r3, #0
}
 8008dce:	4618      	mov	r0, r3
 8008dd0:	3714      	adds	r7, #20
 8008dd2:	46bd      	mov	sp, r7
 8008dd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dd8:	4770      	bx	lr
 8008dda:	bf00      	nop
 8008ddc:	40010000 	.word	0x40010000
 8008de0:	40000400 	.word	0x40000400
 8008de4:	40000800 	.word	0x40000800
 8008de8:	40000c00 	.word	0x40000c00
 8008dec:	40010400 	.word	0x40010400
 8008df0:	40014000 	.word	0x40014000
 8008df4:	40001800 	.word	0x40001800

08008df8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008df8:	b480      	push	{r7}
 8008dfa:	b083      	sub	sp, #12
 8008dfc:	af00      	add	r7, sp, #0
 8008dfe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008e00:	bf00      	nop
 8008e02:	370c      	adds	r7, #12
 8008e04:	46bd      	mov	sp, r7
 8008e06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e0a:	4770      	bx	lr

08008e0c <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008e0c:	b480      	push	{r7}
 8008e0e:	b083      	sub	sp, #12
 8008e10:	af00      	add	r7, sp, #0
 8008e12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008e14:	bf00      	nop
 8008e16:	370c      	adds	r7, #12
 8008e18:	46bd      	mov	sp, r7
 8008e1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e1e:	4770      	bx	lr

08008e20 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008e20:	b580      	push	{r7, lr}
 8008e22:	b082      	sub	sp, #8
 8008e24:	af00      	add	r7, sp, #0
 8008e26:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008e28:	687b      	ldr	r3, [r7, #4]
 8008e2a:	2b00      	cmp	r3, #0
 8008e2c:	d101      	bne.n	8008e32 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008e2e:	2301      	movs	r3, #1
 8008e30:	e03f      	b.n	8008eb2 <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8008e32:	687b      	ldr	r3, [r7, #4]
 8008e34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008e38:	b2db      	uxtb	r3, r3
 8008e3a:	2b00      	cmp	r3, #0
 8008e3c:	d106      	bne.n	8008e4c <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	2200      	movs	r2, #0
 8008e42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008e46:	6878      	ldr	r0, [r7, #4]
 8008e48:	f7fd fb72 	bl	8006530 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008e4c:	687b      	ldr	r3, [r7, #4]
 8008e4e:	2224      	movs	r2, #36	; 0x24
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	681b      	ldr	r3, [r3, #0]
 8008e58:	68da      	ldr	r2, [r3, #12]
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	681b      	ldr	r3, [r3, #0]
 8008e5e:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8008e62:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008e64:	6878      	ldr	r0, [r7, #4]
 8008e66:	f000 fddb 	bl	8009a20 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008e6a:	687b      	ldr	r3, [r7, #4]
 8008e6c:	681b      	ldr	r3, [r3, #0]
 8008e6e:	691a      	ldr	r2, [r3, #16]
 8008e70:	687b      	ldr	r3, [r7, #4]
 8008e72:	681b      	ldr	r3, [r3, #0]
 8008e74:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008e78:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008e7a:	687b      	ldr	r3, [r7, #4]
 8008e7c:	681b      	ldr	r3, [r3, #0]
 8008e7e:	695a      	ldr	r2, [r3, #20]
 8008e80:	687b      	ldr	r3, [r7, #4]
 8008e82:	681b      	ldr	r3, [r3, #0]
 8008e84:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008e88:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008e8a:	687b      	ldr	r3, [r7, #4]
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	68da      	ldr	r2, [r3, #12]
 8008e90:	687b      	ldr	r3, [r7, #4]
 8008e92:	681b      	ldr	r3, [r3, #0]
 8008e94:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008e98:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008e9a:	687b      	ldr	r3, [r7, #4]
 8008e9c:	2200      	movs	r2, #0
 8008e9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008ea0:	687b      	ldr	r3, [r7, #4]
 8008ea2:	2220      	movs	r2, #32
 8008ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008ea8:	687b      	ldr	r3, [r7, #4]
 8008eaa:	2220      	movs	r2, #32
 8008eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008eb0:	2300      	movs	r3, #0
}
 8008eb2:	4618      	mov	r0, r3
 8008eb4:	3708      	adds	r7, #8
 8008eb6:	46bd      	mov	sp, r7
 8008eb8:	bd80      	pop	{r7, pc}

08008eba <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008eba:	b580      	push	{r7, lr}
 8008ebc:	b08a      	sub	sp, #40	; 0x28
 8008ebe:	af02      	add	r7, sp, #8
 8008ec0:	60f8      	str	r0, [r7, #12]
 8008ec2:	60b9      	str	r1, [r7, #8]
 8008ec4:	603b      	str	r3, [r7, #0]
 8008ec6:	4613      	mov	r3, r2
 8008ec8:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8008eca:	2300      	movs	r3, #0
 8008ecc:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8008ece:	68fb      	ldr	r3, [r7, #12]
 8008ed0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008ed4:	b2db      	uxtb	r3, r3
 8008ed6:	2b20      	cmp	r3, #32
 8008ed8:	d17c      	bne.n	8008fd4 <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 8008eda:	68bb      	ldr	r3, [r7, #8]
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	d002      	beq.n	8008ee6 <HAL_UART_Transmit+0x2c>
 8008ee0:	88fb      	ldrh	r3, [r7, #6]
 8008ee2:	2b00      	cmp	r3, #0
 8008ee4:	d101      	bne.n	8008eea <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8008ee6:	2301      	movs	r3, #1
 8008ee8:	e075      	b.n	8008fd6 <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008eea:	68fb      	ldr	r3, [r7, #12]
 8008eec:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008ef0:	2b01      	cmp	r3, #1
 8008ef2:	d101      	bne.n	8008ef8 <HAL_UART_Transmit+0x3e>
 8008ef4:	2302      	movs	r3, #2
 8008ef6:	e06e      	b.n	8008fd6 <HAL_UART_Transmit+0x11c>
 8008ef8:	68fb      	ldr	r3, [r7, #12]
 8008efa:	2201      	movs	r2, #1
 8008efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f00:	68fb      	ldr	r3, [r7, #12]
 8008f02:	2200      	movs	r2, #0
 8008f04:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008f06:	68fb      	ldr	r3, [r7, #12]
 8008f08:	2221      	movs	r2, #33	; 0x21
 8008f0a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008f0e:	f7fd fda5 	bl	8006a5c <HAL_GetTick>
 8008f12:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	88fa      	ldrh	r2, [r7, #6]
 8008f18:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008f1a:	68fb      	ldr	r3, [r7, #12]
 8008f1c:	88fa      	ldrh	r2, [r7, #6]
 8008f1e:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008f20:	68fb      	ldr	r3, [r7, #12]
 8008f22:	689b      	ldr	r3, [r3, #8]
 8008f24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008f28:	d108      	bne.n	8008f3c <HAL_UART_Transmit+0x82>
 8008f2a:	68fb      	ldr	r3, [r7, #12]
 8008f2c:	691b      	ldr	r3, [r3, #16]
 8008f2e:	2b00      	cmp	r3, #0
 8008f30:	d104      	bne.n	8008f3c <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 8008f32:	2300      	movs	r3, #0
 8008f34:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8008f36:	68bb      	ldr	r3, [r7, #8]
 8008f38:	61bb      	str	r3, [r7, #24]
 8008f3a:	e003      	b.n	8008f44 <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008f3c:	68bb      	ldr	r3, [r7, #8]
 8008f3e:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008f40:	2300      	movs	r3, #0
 8008f42:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 8008f44:	68fb      	ldr	r3, [r7, #12]
 8008f46:	2200      	movs	r2, #0
 8008f48:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008f4c:	e02a      	b.n	8008fa4 <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008f4e:	683b      	ldr	r3, [r7, #0]
 8008f50:	9300      	str	r3, [sp, #0]
 8008f52:	697b      	ldr	r3, [r7, #20]
 8008f54:	2200      	movs	r2, #0
 8008f56:	2180      	movs	r1, #128	; 0x80
 8008f58:	68f8      	ldr	r0, [r7, #12]
 8008f5a:	f000 fb1f 	bl	800959c <UART_WaitOnFlagUntilTimeout>
 8008f5e:	4603      	mov	r3, r0
 8008f60:	2b00      	cmp	r3, #0
 8008f62:	d001      	beq.n	8008f68 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 8008f64:	2303      	movs	r3, #3
 8008f66:	e036      	b.n	8008fd6 <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008f68:	69fb      	ldr	r3, [r7, #28]
 8008f6a:	2b00      	cmp	r3, #0
 8008f6c:	d10b      	bne.n	8008f86 <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008f6e:	69bb      	ldr	r3, [r7, #24]
 8008f70:	881b      	ldrh	r3, [r3, #0]
 8008f72:	461a      	mov	r2, r3
 8008f74:	68fb      	ldr	r3, [r7, #12]
 8008f76:	681b      	ldr	r3, [r3, #0]
 8008f78:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008f7c:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008f7e:	69bb      	ldr	r3, [r7, #24]
 8008f80:	3302      	adds	r3, #2
 8008f82:	61bb      	str	r3, [r7, #24]
 8008f84:	e007      	b.n	8008f96 <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8008f86:	69fb      	ldr	r3, [r7, #28]
 8008f88:	781a      	ldrb	r2, [r3, #0]
 8008f8a:	68fb      	ldr	r3, [r7, #12]
 8008f8c:	681b      	ldr	r3, [r3, #0]
 8008f8e:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008f90:	69fb      	ldr	r3, [r7, #28]
 8008f92:	3301      	adds	r3, #1
 8008f94:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008f9a:	b29b      	uxth	r3, r3
 8008f9c:	3b01      	subs	r3, #1
 8008f9e:	b29a      	uxth	r2, r3
 8008fa0:	68fb      	ldr	r3, [r7, #12]
 8008fa2:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 8008fa4:	68fb      	ldr	r3, [r7, #12]
 8008fa6:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008fa8:	b29b      	uxth	r3, r3
 8008faa:	2b00      	cmp	r3, #0
 8008fac:	d1cf      	bne.n	8008f4e <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008fae:	683b      	ldr	r3, [r7, #0]
 8008fb0:	9300      	str	r3, [sp, #0]
 8008fb2:	697b      	ldr	r3, [r7, #20]
 8008fb4:	2200      	movs	r2, #0
 8008fb6:	2140      	movs	r1, #64	; 0x40
 8008fb8:	68f8      	ldr	r0, [r7, #12]
 8008fba:	f000 faef 	bl	800959c <UART_WaitOnFlagUntilTimeout>
 8008fbe:	4603      	mov	r3, r0
 8008fc0:	2b00      	cmp	r3, #0
 8008fc2:	d001      	beq.n	8008fc8 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 8008fc4:	2303      	movs	r3, #3
 8008fc6:	e006      	b.n	8008fd6 <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8008fc8:	68fb      	ldr	r3, [r7, #12]
 8008fca:	2220      	movs	r2, #32
 8008fcc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 8008fd0:	2300      	movs	r3, #0
 8008fd2:	e000      	b.n	8008fd6 <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 8008fd4:	2302      	movs	r3, #2
  }
}
 8008fd6:	4618      	mov	r0, r3
 8008fd8:	3720      	adds	r7, #32
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}

08008fde <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008fde:	b580      	push	{r7, lr}
 8008fe0:	b084      	sub	sp, #16
 8008fe2:	af00      	add	r7, sp, #0
 8008fe4:	60f8      	str	r0, [r7, #12]
 8008fe6:	60b9      	str	r1, [r7, #8]
 8008fe8:	4613      	mov	r3, r2
 8008fea:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008fec:	68fb      	ldr	r3, [r7, #12]
 8008fee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008ff2:	b2db      	uxtb	r3, r3
 8008ff4:	2b20      	cmp	r3, #32
 8008ff6:	d11d      	bne.n	8009034 <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008ff8:	68bb      	ldr	r3, [r7, #8]
 8008ffa:	2b00      	cmp	r3, #0
 8008ffc:	d002      	beq.n	8009004 <HAL_UART_Receive_IT+0x26>
 8008ffe:	88fb      	ldrh	r3, [r7, #6]
 8009000:	2b00      	cmp	r3, #0
 8009002:	d101      	bne.n	8009008 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8009004:	2301      	movs	r3, #1
 8009006:	e016      	b.n	8009036 <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8009008:	68fb      	ldr	r3, [r7, #12]
 800900a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800900e:	2b01      	cmp	r3, #1
 8009010:	d101      	bne.n	8009016 <HAL_UART_Receive_IT+0x38>
 8009012:	2302      	movs	r3, #2
 8009014:	e00f      	b.n	8009036 <HAL_UART_Receive_IT+0x58>
 8009016:	68fb      	ldr	r3, [r7, #12]
 8009018:	2201      	movs	r2, #1
 800901a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	2200      	movs	r2, #0
 8009022:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8009024:	88fb      	ldrh	r3, [r7, #6]
 8009026:	461a      	mov	r2, r3
 8009028:	68b9      	ldr	r1, [r7, #8]
 800902a:	68f8      	ldr	r0, [r7, #12]
 800902c:	f000 fb24 	bl	8009678 <UART_Start_Receive_IT>
 8009030:	4603      	mov	r3, r0
 8009032:	e000      	b.n	8009036 <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 8009034:	2302      	movs	r3, #2
  }
}
 8009036:	4618      	mov	r0, r3
 8009038:	3710      	adds	r7, #16
 800903a:	46bd      	mov	sp, r7
 800903c:	bd80      	pop	{r7, pc}
	...

08009040 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8009040:	b580      	push	{r7, lr}
 8009042:	b0ba      	sub	sp, #232	; 0xe8
 8009044:	af00      	add	r7, sp, #0
 8009046:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8009048:	687b      	ldr	r3, [r7, #4]
 800904a:	681b      	ldr	r3, [r3, #0]
 800904c:	681b      	ldr	r3, [r3, #0]
 800904e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8009052:	687b      	ldr	r3, [r7, #4]
 8009054:	681b      	ldr	r3, [r3, #0]
 8009056:	68db      	ldr	r3, [r3, #12]
 8009058:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 800905c:	687b      	ldr	r3, [r7, #4]
 800905e:	681b      	ldr	r3, [r3, #0]
 8009060:	695b      	ldr	r3, [r3, #20]
 8009062:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 8009066:	2300      	movs	r3, #0
 8009068:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 800906c:	2300      	movs	r3, #0
 800906e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8009072:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009076:	f003 030f 	and.w	r3, r3, #15
 800907a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 800907e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8009082:	2b00      	cmp	r3, #0
 8009084:	d10f      	bne.n	80090a6 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009086:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800908a:	f003 0320 	and.w	r3, r3, #32
 800908e:	2b00      	cmp	r3, #0
 8009090:	d009      	beq.n	80090a6 <HAL_UART_IRQHandler+0x66>
 8009092:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009096:	f003 0320 	and.w	r3, r3, #32
 800909a:	2b00      	cmp	r3, #0
 800909c:	d003      	beq.n	80090a6 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 800909e:	6878      	ldr	r0, [r7, #4]
 80090a0:	f000 fc03 	bl	80098aa <UART_Receive_IT>
      return;
 80090a4:	e256      	b.n	8009554 <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80090a6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80090aa:	2b00      	cmp	r3, #0
 80090ac:	f000 80de 	beq.w	800926c <HAL_UART_IRQHandler+0x22c>
 80090b0:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090b4:	f003 0301 	and.w	r3, r3, #1
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d106      	bne.n	80090ca <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80090bc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090c0:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80090c4:	2b00      	cmp	r3, #0
 80090c6:	f000 80d1 	beq.w	800926c <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80090ca:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090ce:	f003 0301 	and.w	r3, r3, #1
 80090d2:	2b00      	cmp	r3, #0
 80090d4:	d00b      	beq.n	80090ee <HAL_UART_IRQHandler+0xae>
 80090d6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80090da:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d005      	beq.n	80090ee <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80090e6:	f043 0201 	orr.w	r2, r3, #1
 80090ea:	687b      	ldr	r3, [r7, #4]
 80090ec:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80090ee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80090f2:	f003 0304 	and.w	r3, r3, #4
 80090f6:	2b00      	cmp	r3, #0
 80090f8:	d00b      	beq.n	8009112 <HAL_UART_IRQHandler+0xd2>
 80090fa:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80090fe:	f003 0301 	and.w	r3, r3, #1
 8009102:	2b00      	cmp	r3, #0
 8009104:	d005      	beq.n	8009112 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800910a:	f043 0202 	orr.w	r2, r3, #2
 800910e:	687b      	ldr	r3, [r7, #4]
 8009110:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8009112:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009116:	f003 0302 	and.w	r3, r3, #2
 800911a:	2b00      	cmp	r3, #0
 800911c:	d00b      	beq.n	8009136 <HAL_UART_IRQHandler+0xf6>
 800911e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009122:	f003 0301 	and.w	r3, r3, #1
 8009126:	2b00      	cmp	r3, #0
 8009128:	d005      	beq.n	8009136 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 800912a:	687b      	ldr	r3, [r7, #4]
 800912c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800912e:	f043 0204 	orr.w	r2, r3, #4
 8009132:	687b      	ldr	r3, [r7, #4]
 8009134:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8009136:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800913a:	f003 0308 	and.w	r3, r3, #8
 800913e:	2b00      	cmp	r3, #0
 8009140:	d011      	beq.n	8009166 <HAL_UART_IRQHandler+0x126>
 8009142:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009146:	f003 0320 	and.w	r3, r3, #32
 800914a:	2b00      	cmp	r3, #0
 800914c:	d105      	bne.n	800915a <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800914e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8009152:	f003 0301 	and.w	r3, r3, #1
 8009156:	2b00      	cmp	r3, #0
 8009158:	d005      	beq.n	8009166 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800915e:	f043 0208 	orr.w	r2, r3, #8
 8009162:	687b      	ldr	r3, [r7, #4]
 8009164:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8009166:	687b      	ldr	r3, [r7, #4]
 8009168:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800916a:	2b00      	cmp	r3, #0
 800916c:	f000 81ed 	beq.w	800954a <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8009170:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8009174:	f003 0320 	and.w	r3, r3, #32
 8009178:	2b00      	cmp	r3, #0
 800917a:	d008      	beq.n	800918e <HAL_UART_IRQHandler+0x14e>
 800917c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009180:	f003 0320 	and.w	r3, r3, #32
 8009184:	2b00      	cmp	r3, #0
 8009186:	d002      	beq.n	800918e <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8009188:	6878      	ldr	r0, [r7, #4]
 800918a:	f000 fb8e 	bl	80098aa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800918e:	687b      	ldr	r3, [r7, #4]
 8009190:	681b      	ldr	r3, [r3, #0]
 8009192:	695b      	ldr	r3, [r3, #20]
 8009194:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009198:	2b40      	cmp	r3, #64	; 0x40
 800919a:	bf0c      	ite	eq
 800919c:	2301      	moveq	r3, #1
 800919e:	2300      	movne	r3, #0
 80091a0:	b2db      	uxtb	r3, r3
 80091a2:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80091a6:	687b      	ldr	r3, [r7, #4]
 80091a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80091aa:	f003 0308 	and.w	r3, r3, #8
 80091ae:	2b00      	cmp	r3, #0
 80091b0:	d103      	bne.n	80091ba <HAL_UART_IRQHandler+0x17a>
 80091b2:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	d04f      	beq.n	800925a <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80091ba:	6878      	ldr	r0, [r7, #4]
 80091bc:	f000 fa96 	bl	80096ec <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80091c0:	687b      	ldr	r3, [r7, #4]
 80091c2:	681b      	ldr	r3, [r3, #0]
 80091c4:	695b      	ldr	r3, [r3, #20]
 80091c6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80091ca:	2b40      	cmp	r3, #64	; 0x40
 80091cc:	d141      	bne.n	8009252 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80091ce:	687b      	ldr	r3, [r7, #4]
 80091d0:	681b      	ldr	r3, [r3, #0]
 80091d2:	3314      	adds	r3, #20
 80091d4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091d8:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80091dc:	e853 3f00 	ldrex	r3, [r3]
 80091e0:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80091e4:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 80091e8:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80091ec:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 80091f0:	687b      	ldr	r3, [r7, #4]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	3314      	adds	r3, #20
 80091f6:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 80091fa:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 80091fe:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009202:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8009206:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 800920a:	e841 2300 	strex	r3, r2, [r1]
 800920e:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8009212:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8009216:	2b00      	cmp	r3, #0
 8009218:	d1d9      	bne.n	80091ce <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800921a:	687b      	ldr	r3, [r7, #4]
 800921c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800921e:	2b00      	cmp	r3, #0
 8009220:	d013      	beq.n	800924a <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8009222:	687b      	ldr	r3, [r7, #4]
 8009224:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009226:	4a7d      	ldr	r2, [pc, #500]	; (800941c <HAL_UART_IRQHandler+0x3dc>)
 8009228:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800922a:	687b      	ldr	r3, [r7, #4]
 800922c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800922e:	4618      	mov	r0, r3
 8009230:	f7fd fddf 	bl	8006df2 <HAL_DMA_Abort_IT>
 8009234:	4603      	mov	r3, r0
 8009236:	2b00      	cmp	r3, #0
 8009238:	d016      	beq.n	8009268 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800923e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8009240:	687a      	ldr	r2, [r7, #4]
 8009242:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8009244:	4610      	mov	r0, r2
 8009246:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009248:	e00e      	b.n	8009268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800924a:	6878      	ldr	r0, [r7, #4]
 800924c:	f000 f990 	bl	8009570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009250:	e00a      	b.n	8009268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8009252:	6878      	ldr	r0, [r7, #4]
 8009254:	f000 f98c 	bl	8009570 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009258:	e006      	b.n	8009268 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800925a:	6878      	ldr	r0, [r7, #4]
 800925c:	f000 f988 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009260:	687b      	ldr	r3, [r7, #4]
 8009262:	2200      	movs	r2, #0
 8009264:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8009266:	e170      	b.n	800954a <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8009268:	bf00      	nop
    return;
 800926a:	e16e      	b.n	800954a <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009270:	2b01      	cmp	r3, #1
 8009272:	f040 814a 	bne.w	800950a <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8009276:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800927a:	f003 0310 	and.w	r3, r3, #16
 800927e:	2b00      	cmp	r3, #0
 8009280:	f000 8143 	beq.w	800950a <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8009284:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8009288:	f003 0310 	and.w	r3, r3, #16
 800928c:	2b00      	cmp	r3, #0
 800928e:	f000 813c 	beq.w	800950a <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8009292:	2300      	movs	r3, #0
 8009294:	60bb      	str	r3, [r7, #8]
 8009296:	687b      	ldr	r3, [r7, #4]
 8009298:	681b      	ldr	r3, [r3, #0]
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	60bb      	str	r3, [r7, #8]
 800929e:	687b      	ldr	r3, [r7, #4]
 80092a0:	681b      	ldr	r3, [r3, #0]
 80092a2:	685b      	ldr	r3, [r3, #4]
 80092a4:	60bb      	str	r3, [r7, #8]
 80092a6:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80092a8:	687b      	ldr	r3, [r7, #4]
 80092aa:	681b      	ldr	r3, [r3, #0]
 80092ac:	695b      	ldr	r3, [r3, #20]
 80092ae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80092b2:	2b40      	cmp	r3, #64	; 0x40
 80092b4:	f040 80b4 	bne.w	8009420 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80092b8:	687b      	ldr	r3, [r7, #4]
 80092ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092bc:	681b      	ldr	r3, [r3, #0]
 80092be:	685b      	ldr	r3, [r3, #4]
 80092c0:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 80092c4:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 80092c8:	2b00      	cmp	r3, #0
 80092ca:	f000 8140 	beq.w	800954e <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 80092ce:	687b      	ldr	r3, [r7, #4]
 80092d0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092d2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092d6:	429a      	cmp	r2, r3
 80092d8:	f080 8139 	bcs.w	800954e <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80092dc:	687b      	ldr	r3, [r7, #4]
 80092de:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 80092e2:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80092e4:	687b      	ldr	r3, [r7, #4]
 80092e6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80092e8:	69db      	ldr	r3, [r3, #28]
 80092ea:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 80092ee:	f000 8088 	beq.w	8009402 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80092f2:	687b      	ldr	r3, [r7, #4]
 80092f4:	681b      	ldr	r3, [r3, #0]
 80092f6:	330c      	adds	r3, #12
 80092f8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80092fc:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8009300:	e853 3f00 	ldrex	r3, [r3]
 8009304:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8009308:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 800930c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8009310:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009314:	687b      	ldr	r3, [r7, #4]
 8009316:	681b      	ldr	r3, [r3, #0]
 8009318:	330c      	adds	r3, #12
 800931a:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 800931e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009322:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009326:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 800932a:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 800932e:	e841 2300 	strex	r3, r2, [r1]
 8009332:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8009336:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 800933a:	2b00      	cmp	r3, #0
 800933c:	d1d9      	bne.n	80092f2 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800933e:	687b      	ldr	r3, [r7, #4]
 8009340:	681b      	ldr	r3, [r3, #0]
 8009342:	3314      	adds	r3, #20
 8009344:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009346:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009348:	e853 3f00 	ldrex	r3, [r3]
 800934c:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 800934e:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8009350:	f023 0301 	bic.w	r3, r3, #1
 8009354:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009358:	687b      	ldr	r3, [r7, #4]
 800935a:	681b      	ldr	r3, [r3, #0]
 800935c:	3314      	adds	r3, #20
 800935e:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8009362:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8009366:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009368:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 800936a:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 800936e:	e841 2300 	strex	r3, r2, [r1]
 8009372:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8009374:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8009376:	2b00      	cmp	r3, #0
 8009378:	d1e1      	bne.n	800933e <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800937a:	687b      	ldr	r3, [r7, #4]
 800937c:	681b      	ldr	r3, [r3, #0]
 800937e:	3314      	adds	r3, #20
 8009380:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009382:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8009384:	e853 3f00 	ldrex	r3, [r3]
 8009388:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 800938a:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 800938c:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8009390:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009394:	687b      	ldr	r3, [r7, #4]
 8009396:	681b      	ldr	r3, [r3, #0]
 8009398:	3314      	adds	r3, #20
 800939a:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 800939e:	66fa      	str	r2, [r7, #108]	; 0x6c
 80093a0:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093a2:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 80093a4:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 80093a6:	e841 2300 	strex	r3, r2, [r1]
 80093aa:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 80093ac:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 80093ae:	2b00      	cmp	r3, #0
 80093b0:	d1e3      	bne.n	800937a <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80093b2:	687b      	ldr	r3, [r7, #4]
 80093b4:	2220      	movs	r2, #32
 80093b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80093ba:	687b      	ldr	r3, [r7, #4]
 80093bc:	2200      	movs	r2, #0
 80093be:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80093c0:	687b      	ldr	r3, [r7, #4]
 80093c2:	681b      	ldr	r3, [r3, #0]
 80093c4:	330c      	adds	r3, #12
 80093c6:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80093c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80093ca:	e853 3f00 	ldrex	r3, [r3]
 80093ce:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 80093d0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80093d2:	f023 0310 	bic.w	r3, r3, #16
 80093d6:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 80093da:	687b      	ldr	r3, [r7, #4]
 80093dc:	681b      	ldr	r3, [r3, #0]
 80093de:	330c      	adds	r3, #12
 80093e0:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 80093e4:	65ba      	str	r2, [r7, #88]	; 0x58
 80093e6:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80093e8:	6d79      	ldr	r1, [r7, #84]	; 0x54
 80093ea:	6dba      	ldr	r2, [r7, #88]	; 0x58
 80093ec:	e841 2300 	strex	r3, r2, [r1]
 80093f0:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 80093f2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d1e3      	bne.n	80093c0 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80093f8:	687b      	ldr	r3, [r7, #4]
 80093fa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80093fc:	4618      	mov	r0, r3
 80093fe:	f7fd fc88 	bl	8006d12 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8009402:	687b      	ldr	r3, [r7, #4]
 8009404:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009406:	687b      	ldr	r3, [r7, #4]
 8009408:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800940a:	b29b      	uxth	r3, r3
 800940c:	1ad3      	subs	r3, r2, r3
 800940e:	b29b      	uxth	r3, r3
 8009410:	4619      	mov	r1, r3
 8009412:	6878      	ldr	r0, [r7, #4]
 8009414:	f000 f8b6 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009418:	e099      	b.n	800954e <HAL_UART_IRQHandler+0x50e>
 800941a:	bf00      	nop
 800941c:	080097b3 	.word	0x080097b3
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8009420:	687b      	ldr	r3, [r7, #4]
 8009422:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8009424:	687b      	ldr	r3, [r7, #4]
 8009426:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009428:	b29b      	uxth	r3, r3
 800942a:	1ad3      	subs	r3, r2, r3
 800942c:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8009430:	687b      	ldr	r3, [r7, #4]
 8009432:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009434:	b29b      	uxth	r3, r3
 8009436:	2b00      	cmp	r3, #0
 8009438:	f000 808b 	beq.w	8009552 <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 800943c:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009440:	2b00      	cmp	r3, #0
 8009442:	f000 8086 	beq.w	8009552 <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8009446:	687b      	ldr	r3, [r7, #4]
 8009448:	681b      	ldr	r3, [r3, #0]
 800944a:	330c      	adds	r3, #12
 800944c:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800944e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009450:	e853 3f00 	ldrex	r3, [r3]
 8009454:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8009456:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8009458:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800945c:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009460:	687b      	ldr	r3, [r7, #4]
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	330c      	adds	r3, #12
 8009466:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 800946a:	647a      	str	r2, [r7, #68]	; 0x44
 800946c:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800946e:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8009470:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009472:	e841 2300 	strex	r3, r2, [r1]
 8009476:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8009478:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 800947a:	2b00      	cmp	r3, #0
 800947c:	d1e3      	bne.n	8009446 <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800947e:	687b      	ldr	r3, [r7, #4]
 8009480:	681b      	ldr	r3, [r3, #0]
 8009482:	3314      	adds	r3, #20
 8009484:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009486:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009488:	e853 3f00 	ldrex	r3, [r3]
 800948c:	623b      	str	r3, [r7, #32]
   return(result);
 800948e:	6a3b      	ldr	r3, [r7, #32]
 8009490:	f023 0301 	bic.w	r3, r3, #1
 8009494:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8009498:	687b      	ldr	r3, [r7, #4]
 800949a:	681b      	ldr	r3, [r3, #0]
 800949c:	3314      	adds	r3, #20
 800949e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 80094a2:	633a      	str	r2, [r7, #48]	; 0x30
 80094a4:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094a6:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80094a8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80094aa:	e841 2300 	strex	r3, r2, [r1]
 80094ae:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 80094b0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80094b2:	2b00      	cmp	r3, #0
 80094b4:	d1e3      	bne.n	800947e <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80094b6:	687b      	ldr	r3, [r7, #4]
 80094b8:	2220      	movs	r2, #32
 80094ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80094be:	687b      	ldr	r3, [r7, #4]
 80094c0:	2200      	movs	r2, #0
 80094c2:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80094c4:	687b      	ldr	r3, [r7, #4]
 80094c6:	681b      	ldr	r3, [r3, #0]
 80094c8:	330c      	adds	r3, #12
 80094ca:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80094cc:	693b      	ldr	r3, [r7, #16]
 80094ce:	e853 3f00 	ldrex	r3, [r3]
 80094d2:	60fb      	str	r3, [r7, #12]
   return(result);
 80094d4:	68fb      	ldr	r3, [r7, #12]
 80094d6:	f023 0310 	bic.w	r3, r3, #16
 80094da:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094de:	687b      	ldr	r3, [r7, #4]
 80094e0:	681b      	ldr	r3, [r3, #0]
 80094e2:	330c      	adds	r3, #12
 80094e4:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 80094e8:	61fa      	str	r2, [r7, #28]
 80094ea:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80094ec:	69b9      	ldr	r1, [r7, #24]
 80094ee:	69fa      	ldr	r2, [r7, #28]
 80094f0:	e841 2300 	strex	r3, r2, [r1]
 80094f4:	617b      	str	r3, [r7, #20]
   return(result);
 80094f6:	697b      	ldr	r3, [r7, #20]
 80094f8:	2b00      	cmp	r3, #0
 80094fa:	d1e3      	bne.n	80094c4 <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80094fc:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8009500:	4619      	mov	r1, r3
 8009502:	6878      	ldr	r0, [r7, #4]
 8009504:	f000 f83e 	bl	8009584 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8009508:	e023      	b.n	8009552 <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800950a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800950e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8009512:	2b00      	cmp	r3, #0
 8009514:	d009      	beq.n	800952a <HAL_UART_IRQHandler+0x4ea>
 8009516:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800951a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800951e:	2b00      	cmp	r3, #0
 8009520:	d003      	beq.n	800952a <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8009522:	6878      	ldr	r0, [r7, #4]
 8009524:	f000 f959 	bl	80097da <UART_Transmit_IT>
    return;
 8009528:	e014      	b.n	8009554 <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800952a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800952e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8009532:	2b00      	cmp	r3, #0
 8009534:	d00e      	beq.n	8009554 <HAL_UART_IRQHandler+0x514>
 8009536:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800953a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800953e:	2b00      	cmp	r3, #0
 8009540:	d008      	beq.n	8009554 <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8009542:	6878      	ldr	r0, [r7, #4]
 8009544:	f000 f999 	bl	800987a <UART_EndTransmit_IT>
    return;
 8009548:	e004      	b.n	8009554 <HAL_UART_IRQHandler+0x514>
    return;
 800954a:	bf00      	nop
 800954c:	e002      	b.n	8009554 <HAL_UART_IRQHandler+0x514>
      return;
 800954e:	bf00      	nop
 8009550:	e000      	b.n	8009554 <HAL_UART_IRQHandler+0x514>
      return;
 8009552:	bf00      	nop
  }
}
 8009554:	37e8      	adds	r7, #232	; 0xe8
 8009556:	46bd      	mov	sp, r7
 8009558:	bd80      	pop	{r7, pc}
 800955a:	bf00      	nop

0800955c <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 800955c:	b480      	push	{r7}
 800955e:	b083      	sub	sp, #12
 8009560:	af00      	add	r7, sp, #0
 8009562:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8009564:	bf00      	nop
 8009566:	370c      	adds	r7, #12
 8009568:	46bd      	mov	sp, r7
 800956a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800956e:	4770      	bx	lr

08009570 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8009570:	b480      	push	{r7}
 8009572:	b083      	sub	sp, #12
 8009574:	af00      	add	r7, sp, #0
 8009576:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8009578:	bf00      	nop
 800957a:	370c      	adds	r7, #12
 800957c:	46bd      	mov	sp, r7
 800957e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009582:	4770      	bx	lr

08009584 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8009584:	b480      	push	{r7}
 8009586:	b083      	sub	sp, #12
 8009588:	af00      	add	r7, sp, #0
 800958a:	6078      	str	r0, [r7, #4]
 800958c:	460b      	mov	r3, r1
 800958e:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8009590:	bf00      	nop
 8009592:	370c      	adds	r7, #12
 8009594:	46bd      	mov	sp, r7
 8009596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800959a:	4770      	bx	lr

0800959c <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 800959c:	b580      	push	{r7, lr}
 800959e:	b090      	sub	sp, #64	; 0x40
 80095a0:	af00      	add	r7, sp, #0
 80095a2:	60f8      	str	r0, [r7, #12]
 80095a4:	60b9      	str	r1, [r7, #8]
 80095a6:	603b      	str	r3, [r7, #0]
 80095a8:	4613      	mov	r3, r2
 80095aa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80095ac:	e050      	b.n	8009650 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80095ae:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80095b4:	d04c      	beq.n	8009650 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 80095b6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80095b8:	2b00      	cmp	r3, #0
 80095ba:	d007      	beq.n	80095cc <UART_WaitOnFlagUntilTimeout+0x30>
 80095bc:	f7fd fa4e 	bl	8006a5c <HAL_GetTick>
 80095c0:	4602      	mov	r2, r0
 80095c2:	683b      	ldr	r3, [r7, #0]
 80095c4:	1ad3      	subs	r3, r2, r3
 80095c6:	6cba      	ldr	r2, [r7, #72]	; 0x48
 80095c8:	429a      	cmp	r2, r3
 80095ca:	d241      	bcs.n	8009650 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 80095cc:	68fb      	ldr	r3, [r7, #12]
 80095ce:	681b      	ldr	r3, [r3, #0]
 80095d0:	330c      	adds	r3, #12
 80095d2:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80095d4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80095d6:	e853 3f00 	ldrex	r3, [r3]
 80095da:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 80095dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80095de:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 80095e2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80095e4:	68fb      	ldr	r3, [r7, #12]
 80095e6:	681b      	ldr	r3, [r3, #0]
 80095e8:	330c      	adds	r3, #12
 80095ea:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80095ec:	637a      	str	r2, [r7, #52]	; 0x34
 80095ee:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80095f0:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80095f2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80095f4:	e841 2300 	strex	r3, r2, [r1]
 80095f8:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 80095fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80095fc:	2b00      	cmp	r3, #0
 80095fe:	d1e5      	bne.n	80095cc <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009600:	68fb      	ldr	r3, [r7, #12]
 8009602:	681b      	ldr	r3, [r3, #0]
 8009604:	3314      	adds	r3, #20
 8009606:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009608:	697b      	ldr	r3, [r7, #20]
 800960a:	e853 3f00 	ldrex	r3, [r3]
 800960e:	613b      	str	r3, [r7, #16]
   return(result);
 8009610:	693b      	ldr	r3, [r7, #16]
 8009612:	f023 0301 	bic.w	r3, r3, #1
 8009616:	63bb      	str	r3, [r7, #56]	; 0x38
 8009618:	68fb      	ldr	r3, [r7, #12]
 800961a:	681b      	ldr	r3, [r3, #0]
 800961c:	3314      	adds	r3, #20
 800961e:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8009620:	623a      	str	r2, [r7, #32]
 8009622:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009624:	69f9      	ldr	r1, [r7, #28]
 8009626:	6a3a      	ldr	r2, [r7, #32]
 8009628:	e841 2300 	strex	r3, r2, [r1]
 800962c:	61bb      	str	r3, [r7, #24]
   return(result);
 800962e:	69bb      	ldr	r3, [r7, #24]
 8009630:	2b00      	cmp	r3, #0
 8009632:	d1e5      	bne.n	8009600 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8009634:	68fb      	ldr	r3, [r7, #12]
 8009636:	2220      	movs	r2, #32
 8009638:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 800963c:	68fb      	ldr	r3, [r7, #12]
 800963e:	2220      	movs	r2, #32
 8009640:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8009644:	68fb      	ldr	r3, [r7, #12]
 8009646:	2200      	movs	r2, #0
 8009648:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 800964c:	2303      	movs	r3, #3
 800964e:	e00f      	b.n	8009670 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8009650:	68fb      	ldr	r3, [r7, #12]
 8009652:	681b      	ldr	r3, [r3, #0]
 8009654:	681a      	ldr	r2, [r3, #0]
 8009656:	68bb      	ldr	r3, [r7, #8]
 8009658:	4013      	ands	r3, r2
 800965a:	68ba      	ldr	r2, [r7, #8]
 800965c:	429a      	cmp	r2, r3
 800965e:	bf0c      	ite	eq
 8009660:	2301      	moveq	r3, #1
 8009662:	2300      	movne	r3, #0
 8009664:	b2db      	uxtb	r3, r3
 8009666:	461a      	mov	r2, r3
 8009668:	79fb      	ldrb	r3, [r7, #7]
 800966a:	429a      	cmp	r2, r3
 800966c:	d09f      	beq.n	80095ae <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 800966e:	2300      	movs	r3, #0
}
 8009670:	4618      	mov	r0, r3
 8009672:	3740      	adds	r7, #64	; 0x40
 8009674:	46bd      	mov	sp, r7
 8009676:	bd80      	pop	{r7, pc}

08009678 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8009678:	b480      	push	{r7}
 800967a:	b085      	sub	sp, #20
 800967c:	af00      	add	r7, sp, #0
 800967e:	60f8      	str	r0, [r7, #12]
 8009680:	60b9      	str	r1, [r7, #8]
 8009682:	4613      	mov	r3, r2
 8009684:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8009686:	68fb      	ldr	r3, [r7, #12]
 8009688:	68ba      	ldr	r2, [r7, #8]
 800968a:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 800968c:	68fb      	ldr	r3, [r7, #12]
 800968e:	88fa      	ldrh	r2, [r7, #6]
 8009690:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8009692:	68fb      	ldr	r3, [r7, #12]
 8009694:	88fa      	ldrh	r2, [r7, #6]
 8009696:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8009698:	68fb      	ldr	r3, [r7, #12]
 800969a:	2200      	movs	r2, #0
 800969c:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 800969e:	68fb      	ldr	r3, [r7, #12]
 80096a0:	2222      	movs	r2, #34	; 0x22
 80096a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 80096a6:	68fb      	ldr	r3, [r7, #12]
 80096a8:	2200      	movs	r2, #0
 80096aa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80096ae:	68fb      	ldr	r3, [r7, #12]
 80096b0:	681b      	ldr	r3, [r3, #0]
 80096b2:	68da      	ldr	r2, [r3, #12]
 80096b4:	68fb      	ldr	r3, [r7, #12]
 80096b6:	681b      	ldr	r3, [r3, #0]
 80096b8:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80096bc:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80096be:	68fb      	ldr	r3, [r7, #12]
 80096c0:	681b      	ldr	r3, [r3, #0]
 80096c2:	695a      	ldr	r2, [r3, #20]
 80096c4:	68fb      	ldr	r3, [r7, #12]
 80096c6:	681b      	ldr	r3, [r3, #0]
 80096c8:	f042 0201 	orr.w	r2, r2, #1
 80096cc:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80096ce:	68fb      	ldr	r3, [r7, #12]
 80096d0:	681b      	ldr	r3, [r3, #0]
 80096d2:	68da      	ldr	r2, [r3, #12]
 80096d4:	68fb      	ldr	r3, [r7, #12]
 80096d6:	681b      	ldr	r3, [r3, #0]
 80096d8:	f042 0220 	orr.w	r2, r2, #32
 80096dc:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80096de:	2300      	movs	r3, #0
}
 80096e0:	4618      	mov	r0, r3
 80096e2:	3714      	adds	r7, #20
 80096e4:	46bd      	mov	sp, r7
 80096e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80096ea:	4770      	bx	lr

080096ec <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80096ec:	b480      	push	{r7}
 80096ee:	b095      	sub	sp, #84	; 0x54
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80096f4:	687b      	ldr	r3, [r7, #4]
 80096f6:	681b      	ldr	r3, [r3, #0]
 80096f8:	330c      	adds	r3, #12
 80096fa:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80096fc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80096fe:	e853 3f00 	ldrex	r3, [r3]
 8009702:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8009704:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8009706:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 800970a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800970c:	687b      	ldr	r3, [r7, #4]
 800970e:	681b      	ldr	r3, [r3, #0]
 8009710:	330c      	adds	r3, #12
 8009712:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8009714:	643a      	str	r2, [r7, #64]	; 0x40
 8009716:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009718:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 800971a:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 800971c:	e841 2300 	strex	r3, r2, [r1]
 8009720:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8009722:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009724:	2b00      	cmp	r3, #0
 8009726:	d1e5      	bne.n	80096f4 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009728:	687b      	ldr	r3, [r7, #4]
 800972a:	681b      	ldr	r3, [r3, #0]
 800972c:	3314      	adds	r3, #20
 800972e:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009730:	6a3b      	ldr	r3, [r7, #32]
 8009732:	e853 3f00 	ldrex	r3, [r3]
 8009736:	61fb      	str	r3, [r7, #28]
   return(result);
 8009738:	69fb      	ldr	r3, [r7, #28]
 800973a:	f023 0301 	bic.w	r3, r3, #1
 800973e:	64bb      	str	r3, [r7, #72]	; 0x48
 8009740:	687b      	ldr	r3, [r7, #4]
 8009742:	681b      	ldr	r3, [r3, #0]
 8009744:	3314      	adds	r3, #20
 8009746:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009748:	62fa      	str	r2, [r7, #44]	; 0x2c
 800974a:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800974c:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800974e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009750:	e841 2300 	strex	r3, r2, [r1]
 8009754:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8009756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009758:	2b00      	cmp	r3, #0
 800975a:	d1e5      	bne.n	8009728 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800975c:	687b      	ldr	r3, [r7, #4]
 800975e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009760:	2b01      	cmp	r3, #1
 8009762:	d119      	bne.n	8009798 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8009764:	687b      	ldr	r3, [r7, #4]
 8009766:	681b      	ldr	r3, [r3, #0]
 8009768:	330c      	adds	r3, #12
 800976a:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800976c:	68fb      	ldr	r3, [r7, #12]
 800976e:	e853 3f00 	ldrex	r3, [r3]
 8009772:	60bb      	str	r3, [r7, #8]
   return(result);
 8009774:	68bb      	ldr	r3, [r7, #8]
 8009776:	f023 0310 	bic.w	r3, r3, #16
 800977a:	647b      	str	r3, [r7, #68]	; 0x44
 800977c:	687b      	ldr	r3, [r7, #4]
 800977e:	681b      	ldr	r3, [r3, #0]
 8009780:	330c      	adds	r3, #12
 8009782:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009784:	61ba      	str	r2, [r7, #24]
 8009786:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009788:	6979      	ldr	r1, [r7, #20]
 800978a:	69ba      	ldr	r2, [r7, #24]
 800978c:	e841 2300 	strex	r3, r2, [r1]
 8009790:	613b      	str	r3, [r7, #16]
   return(result);
 8009792:	693b      	ldr	r3, [r7, #16]
 8009794:	2b00      	cmp	r3, #0
 8009796:	d1e5      	bne.n	8009764 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009798:	687b      	ldr	r3, [r7, #4]
 800979a:	2220      	movs	r2, #32
 800979c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80097a0:	687b      	ldr	r3, [r7, #4]
 80097a2:	2200      	movs	r2, #0
 80097a4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80097a6:	bf00      	nop
 80097a8:	3754      	adds	r7, #84	; 0x54
 80097aa:	46bd      	mov	sp, r7
 80097ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80097b0:	4770      	bx	lr

080097b2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80097b2:	b580      	push	{r7, lr}
 80097b4:	b084      	sub	sp, #16
 80097b6:	af00      	add	r7, sp, #0
 80097b8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80097ba:	687b      	ldr	r3, [r7, #4]
 80097bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80097be:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80097c0:	68fb      	ldr	r3, [r7, #12]
 80097c2:	2200      	movs	r2, #0
 80097c4:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 80097c6:	68fb      	ldr	r3, [r7, #12]
 80097c8:	2200      	movs	r2, #0
 80097ca:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80097cc:	68f8      	ldr	r0, [r7, #12]
 80097ce:	f7ff fecf 	bl	8009570 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80097d2:	bf00      	nop
 80097d4:	3710      	adds	r7, #16
 80097d6:	46bd      	mov	sp, r7
 80097d8:	bd80      	pop	{r7, pc}

080097da <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80097da:	b480      	push	{r7}
 80097dc:	b085      	sub	sp, #20
 80097de:	af00      	add	r7, sp, #0
 80097e0:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80097e2:	687b      	ldr	r3, [r7, #4]
 80097e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80097e8:	b2db      	uxtb	r3, r3
 80097ea:	2b21      	cmp	r3, #33	; 0x21
 80097ec:	d13e      	bne.n	800986c <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80097ee:	687b      	ldr	r3, [r7, #4]
 80097f0:	689b      	ldr	r3, [r3, #8]
 80097f2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80097f6:	d114      	bne.n	8009822 <UART_Transmit_IT+0x48>
 80097f8:	687b      	ldr	r3, [r7, #4]
 80097fa:	691b      	ldr	r3, [r3, #16]
 80097fc:	2b00      	cmp	r3, #0
 80097fe:	d110      	bne.n	8009822 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009800:	687b      	ldr	r3, [r7, #4]
 8009802:	6a1b      	ldr	r3, [r3, #32]
 8009804:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8009806:	68fb      	ldr	r3, [r7, #12]
 8009808:	881b      	ldrh	r3, [r3, #0]
 800980a:	461a      	mov	r2, r3
 800980c:	687b      	ldr	r3, [r7, #4]
 800980e:	681b      	ldr	r3, [r3, #0]
 8009810:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8009814:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8009816:	687b      	ldr	r3, [r7, #4]
 8009818:	6a1b      	ldr	r3, [r3, #32]
 800981a:	1c9a      	adds	r2, r3, #2
 800981c:	687b      	ldr	r3, [r7, #4]
 800981e:	621a      	str	r2, [r3, #32]
 8009820:	e008      	b.n	8009834 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8009822:	687b      	ldr	r3, [r7, #4]
 8009824:	6a1b      	ldr	r3, [r3, #32]
 8009826:	1c59      	adds	r1, r3, #1
 8009828:	687a      	ldr	r2, [r7, #4]
 800982a:	6211      	str	r1, [r2, #32]
 800982c:	781a      	ldrb	r2, [r3, #0]
 800982e:	687b      	ldr	r3, [r7, #4]
 8009830:	681b      	ldr	r3, [r3, #0]
 8009832:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8009834:	687b      	ldr	r3, [r7, #4]
 8009836:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009838:	b29b      	uxth	r3, r3
 800983a:	3b01      	subs	r3, #1
 800983c:	b29b      	uxth	r3, r3
 800983e:	687a      	ldr	r2, [r7, #4]
 8009840:	4619      	mov	r1, r3
 8009842:	84d1      	strh	r1, [r2, #38]	; 0x26
 8009844:	2b00      	cmp	r3, #0
 8009846:	d10f      	bne.n	8009868 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009848:	687b      	ldr	r3, [r7, #4]
 800984a:	681b      	ldr	r3, [r3, #0]
 800984c:	68da      	ldr	r2, [r3, #12]
 800984e:	687b      	ldr	r3, [r7, #4]
 8009850:	681b      	ldr	r3, [r3, #0]
 8009852:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8009856:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009858:	687b      	ldr	r3, [r7, #4]
 800985a:	681b      	ldr	r3, [r3, #0]
 800985c:	68da      	ldr	r2, [r3, #12]
 800985e:	687b      	ldr	r3, [r7, #4]
 8009860:	681b      	ldr	r3, [r3, #0]
 8009862:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8009866:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009868:	2300      	movs	r3, #0
 800986a:	e000      	b.n	800986e <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800986c:	2302      	movs	r3, #2
  }
}
 800986e:	4618      	mov	r0, r3
 8009870:	3714      	adds	r7, #20
 8009872:	46bd      	mov	sp, r7
 8009874:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009878:	4770      	bx	lr

0800987a <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800987a:	b580      	push	{r7, lr}
 800987c:	b082      	sub	sp, #8
 800987e:	af00      	add	r7, sp, #0
 8009880:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8009882:	687b      	ldr	r3, [r7, #4]
 8009884:	681b      	ldr	r3, [r3, #0]
 8009886:	68da      	ldr	r2, [r3, #12]
 8009888:	687b      	ldr	r3, [r7, #4]
 800988a:	681b      	ldr	r3, [r3, #0]
 800988c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009890:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8009892:	687b      	ldr	r3, [r7, #4]
 8009894:	2220      	movs	r2, #32
 8009896:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800989a:	6878      	ldr	r0, [r7, #4]
 800989c:	f7ff fe5e 	bl	800955c <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80098a0:	2300      	movs	r3, #0
}
 80098a2:	4618      	mov	r0, r3
 80098a4:	3708      	adds	r7, #8
 80098a6:	46bd      	mov	sp, r7
 80098a8:	bd80      	pop	{r7, pc}

080098aa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80098aa:	b580      	push	{r7, lr}
 80098ac:	b08c      	sub	sp, #48	; 0x30
 80098ae:	af00      	add	r7, sp, #0
 80098b0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80098b2:	687b      	ldr	r3, [r7, #4]
 80098b4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80098b8:	b2db      	uxtb	r3, r3
 80098ba:	2b22      	cmp	r3, #34	; 0x22
 80098bc:	f040 80ab 	bne.w	8009a16 <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80098c0:	687b      	ldr	r3, [r7, #4]
 80098c2:	689b      	ldr	r3, [r3, #8]
 80098c4:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80098c8:	d117      	bne.n	80098fa <UART_Receive_IT+0x50>
 80098ca:	687b      	ldr	r3, [r7, #4]
 80098cc:	691b      	ldr	r3, [r3, #16]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d113      	bne.n	80098fa <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80098d2:	2300      	movs	r3, #0
 80098d4:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80098d6:	687b      	ldr	r3, [r7, #4]
 80098d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098da:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80098dc:	687b      	ldr	r3, [r7, #4]
 80098de:	681b      	ldr	r3, [r3, #0]
 80098e0:	685b      	ldr	r3, [r3, #4]
 80098e2:	b29b      	uxth	r3, r3
 80098e4:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80098e8:	b29a      	uxth	r2, r3
 80098ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80098ec:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80098ee:	687b      	ldr	r3, [r7, #4]
 80098f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098f2:	1c9a      	adds	r2, r3, #2
 80098f4:	687b      	ldr	r3, [r7, #4]
 80098f6:	629a      	str	r2, [r3, #40]	; 0x28
 80098f8:	e026      	b.n	8009948 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80098fa:	687b      	ldr	r3, [r7, #4]
 80098fc:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80098fe:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009900:	2300      	movs	r3, #0
 8009902:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8009904:	687b      	ldr	r3, [r7, #4]
 8009906:	689b      	ldr	r3, [r3, #8]
 8009908:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800990c:	d007      	beq.n	800991e <UART_Receive_IT+0x74>
 800990e:	687b      	ldr	r3, [r7, #4]
 8009910:	689b      	ldr	r3, [r3, #8]
 8009912:	2b00      	cmp	r3, #0
 8009914:	d10a      	bne.n	800992c <UART_Receive_IT+0x82>
 8009916:	687b      	ldr	r3, [r7, #4]
 8009918:	691b      	ldr	r3, [r3, #16]
 800991a:	2b00      	cmp	r3, #0
 800991c:	d106      	bne.n	800992c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800991e:	687b      	ldr	r3, [r7, #4]
 8009920:	681b      	ldr	r3, [r3, #0]
 8009922:	685b      	ldr	r3, [r3, #4]
 8009924:	b2da      	uxtb	r2, r3
 8009926:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009928:	701a      	strb	r2, [r3, #0]
 800992a:	e008      	b.n	800993e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800992c:	687b      	ldr	r3, [r7, #4]
 800992e:	681b      	ldr	r3, [r3, #0]
 8009930:	685b      	ldr	r3, [r3, #4]
 8009932:	b2db      	uxtb	r3, r3
 8009934:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009938:	b2da      	uxtb	r2, r3
 800993a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800993c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800993e:	687b      	ldr	r3, [r7, #4]
 8009940:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009942:	1c5a      	adds	r2, r3, #1
 8009944:	687b      	ldr	r3, [r7, #4]
 8009946:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009948:	687b      	ldr	r3, [r7, #4]
 800994a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800994c:	b29b      	uxth	r3, r3
 800994e:	3b01      	subs	r3, #1
 8009950:	b29b      	uxth	r3, r3
 8009952:	687a      	ldr	r2, [r7, #4]
 8009954:	4619      	mov	r1, r3
 8009956:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009958:	2b00      	cmp	r3, #0
 800995a:	d15a      	bne.n	8009a12 <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800995c:	687b      	ldr	r3, [r7, #4]
 800995e:	681b      	ldr	r3, [r3, #0]
 8009960:	68da      	ldr	r2, [r3, #12]
 8009962:	687b      	ldr	r3, [r7, #4]
 8009964:	681b      	ldr	r3, [r3, #0]
 8009966:	f022 0220 	bic.w	r2, r2, #32
 800996a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800996c:	687b      	ldr	r3, [r7, #4]
 800996e:	681b      	ldr	r3, [r3, #0]
 8009970:	68da      	ldr	r2, [r3, #12]
 8009972:	687b      	ldr	r3, [r7, #4]
 8009974:	681b      	ldr	r3, [r3, #0]
 8009976:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800997a:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800997c:	687b      	ldr	r3, [r7, #4]
 800997e:	681b      	ldr	r3, [r3, #0]
 8009980:	695a      	ldr	r2, [r3, #20]
 8009982:	687b      	ldr	r3, [r7, #4]
 8009984:	681b      	ldr	r3, [r3, #0]
 8009986:	f022 0201 	bic.w	r2, r2, #1
 800998a:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800998c:	687b      	ldr	r3, [r7, #4]
 800998e:	2220      	movs	r2, #32
 8009990:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009994:	687b      	ldr	r3, [r7, #4]
 8009996:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009998:	2b01      	cmp	r3, #1
 800999a:	d135      	bne.n	8009a08 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800999c:	687b      	ldr	r3, [r7, #4]
 800999e:	2200      	movs	r2, #0
 80099a0:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80099a2:	687b      	ldr	r3, [r7, #4]
 80099a4:	681b      	ldr	r3, [r3, #0]
 80099a6:	330c      	adds	r3, #12
 80099a8:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80099aa:	697b      	ldr	r3, [r7, #20]
 80099ac:	e853 3f00 	ldrex	r3, [r3]
 80099b0:	613b      	str	r3, [r7, #16]
   return(result);
 80099b2:	693b      	ldr	r3, [r7, #16]
 80099b4:	f023 0310 	bic.w	r3, r3, #16
 80099b8:	627b      	str	r3, [r7, #36]	; 0x24
 80099ba:	687b      	ldr	r3, [r7, #4]
 80099bc:	681b      	ldr	r3, [r3, #0]
 80099be:	330c      	adds	r3, #12
 80099c0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80099c2:	623a      	str	r2, [r7, #32]
 80099c4:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80099c6:	69f9      	ldr	r1, [r7, #28]
 80099c8:	6a3a      	ldr	r2, [r7, #32]
 80099ca:	e841 2300 	strex	r3, r2, [r1]
 80099ce:	61bb      	str	r3, [r7, #24]
   return(result);
 80099d0:	69bb      	ldr	r3, [r7, #24]
 80099d2:	2b00      	cmp	r3, #0
 80099d4:	d1e5      	bne.n	80099a2 <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80099d6:	687b      	ldr	r3, [r7, #4]
 80099d8:	681b      	ldr	r3, [r3, #0]
 80099da:	681b      	ldr	r3, [r3, #0]
 80099dc:	f003 0310 	and.w	r3, r3, #16
 80099e0:	2b10      	cmp	r3, #16
 80099e2:	d10a      	bne.n	80099fa <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80099e4:	2300      	movs	r3, #0
 80099e6:	60fb      	str	r3, [r7, #12]
 80099e8:	687b      	ldr	r3, [r7, #4]
 80099ea:	681b      	ldr	r3, [r3, #0]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	60fb      	str	r3, [r7, #12]
 80099f0:	687b      	ldr	r3, [r7, #4]
 80099f2:	681b      	ldr	r3, [r3, #0]
 80099f4:	685b      	ldr	r3, [r3, #4]
 80099f6:	60fb      	str	r3, [r7, #12]
 80099f8:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80099fa:	687b      	ldr	r3, [r7, #4]
 80099fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80099fe:	4619      	mov	r1, r3
 8009a00:	6878      	ldr	r0, [r7, #4]
 8009a02:	f7ff fdbf 	bl	8009584 <HAL_UARTEx_RxEventCallback>
 8009a06:	e002      	b.n	8009a0e <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009a08:	6878      	ldr	r0, [r7, #4]
 8009a0a:	f7fb fb6b 	bl	80050e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009a0e:	2300      	movs	r3, #0
 8009a10:	e002      	b.n	8009a18 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 8009a12:	2300      	movs	r3, #0
 8009a14:	e000      	b.n	8009a18 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 8009a16:	2302      	movs	r3, #2
  }
}
 8009a18:	4618      	mov	r0, r3
 8009a1a:	3730      	adds	r7, #48	; 0x30
 8009a1c:	46bd      	mov	sp, r7
 8009a1e:	bd80      	pop	{r7, pc}

08009a20 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009a20:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8009a24:	b0c0      	sub	sp, #256	; 0x100
 8009a26:	af00      	add	r7, sp, #0
 8009a28:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009a2c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a30:	681b      	ldr	r3, [r3, #0]
 8009a32:	691b      	ldr	r3, [r3, #16]
 8009a34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009a38:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a3c:	68d9      	ldr	r1, [r3, #12]
 8009a3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a42:	681a      	ldr	r2, [r3, #0]
 8009a44:	ea40 0301 	orr.w	r3, r0, r1
 8009a48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009a4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a4e:	689a      	ldr	r2, [r3, #8]
 8009a50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a54:	691b      	ldr	r3, [r3, #16]
 8009a56:	431a      	orrs	r2, r3
 8009a58:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a5c:	695b      	ldr	r3, [r3, #20]
 8009a5e:	431a      	orrs	r2, r3
 8009a60:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a64:	69db      	ldr	r3, [r3, #28]
 8009a66:	4313      	orrs	r3, r2
 8009a68:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009a6c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a70:	681b      	ldr	r3, [r3, #0]
 8009a72:	68db      	ldr	r3, [r3, #12]
 8009a74:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009a78:	f021 010c 	bic.w	r1, r1, #12
 8009a7c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a80:	681a      	ldr	r2, [r3, #0]
 8009a82:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 8009a86:	430b      	orrs	r3, r1
 8009a88:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009a8a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a8e:	681b      	ldr	r3, [r3, #0]
 8009a90:	695b      	ldr	r3, [r3, #20]
 8009a92:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8009a96:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009a9a:	6999      	ldr	r1, [r3, #24]
 8009a9c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aa0:	681a      	ldr	r2, [r3, #0]
 8009aa2:	ea40 0301 	orr.w	r3, r0, r1
 8009aa6:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009aa8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009aac:	681a      	ldr	r2, [r3, #0]
 8009aae:	4b8f      	ldr	r3, [pc, #572]	; (8009cec <UART_SetConfig+0x2cc>)
 8009ab0:	429a      	cmp	r2, r3
 8009ab2:	d005      	beq.n	8009ac0 <UART_SetConfig+0xa0>
 8009ab4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ab8:	681a      	ldr	r2, [r3, #0]
 8009aba:	4b8d      	ldr	r3, [pc, #564]	; (8009cf0 <UART_SetConfig+0x2d0>)
 8009abc:	429a      	cmp	r2, r3
 8009abe:	d104      	bne.n	8009aca <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009ac0:	f7fe faca 	bl	8008058 <HAL_RCC_GetPCLK2Freq>
 8009ac4:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 8009ac8:	e003      	b.n	8009ad2 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8009aca:	f7fe fab1 	bl	8008030 <HAL_RCC_GetPCLK1Freq>
 8009ace:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8009ad2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ad6:	69db      	ldr	r3, [r3, #28]
 8009ad8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8009adc:	f040 810c 	bne.w	8009cf8 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8009ae0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009ae4:	2200      	movs	r2, #0
 8009ae6:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009aea:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009aee:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 8009af2:	4622      	mov	r2, r4
 8009af4:	462b      	mov	r3, r5
 8009af6:	1891      	adds	r1, r2, r2
 8009af8:	65b9      	str	r1, [r7, #88]	; 0x58
 8009afa:	415b      	adcs	r3, r3
 8009afc:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009afe:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8009b02:	4621      	mov	r1, r4
 8009b04:	eb12 0801 	adds.w	r8, r2, r1
 8009b08:	4629      	mov	r1, r5
 8009b0a:	eb43 0901 	adc.w	r9, r3, r1
 8009b0e:	f04f 0200 	mov.w	r2, #0
 8009b12:	f04f 0300 	mov.w	r3, #0
 8009b16:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009b1a:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009b1e:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8009b22:	4690      	mov	r8, r2
 8009b24:	4699      	mov	r9, r3
 8009b26:	4623      	mov	r3, r4
 8009b28:	eb18 0303 	adds.w	r3, r8, r3
 8009b2c:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009b30:	462b      	mov	r3, r5
 8009b32:	eb49 0303 	adc.w	r3, r9, r3
 8009b36:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009b3a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009b3e:	685b      	ldr	r3, [r3, #4]
 8009b40:	2200      	movs	r2, #0
 8009b42:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 8009b46:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009b4a:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009b4e:	460b      	mov	r3, r1
 8009b50:	18db      	adds	r3, r3, r3
 8009b52:	653b      	str	r3, [r7, #80]	; 0x50
 8009b54:	4613      	mov	r3, r2
 8009b56:	eb42 0303 	adc.w	r3, r2, r3
 8009b5a:	657b      	str	r3, [r7, #84]	; 0x54
 8009b5c:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009b60:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 8009b64:	f7f7 f890 	bl	8000c88 <__aeabi_uldivmod>
 8009b68:	4602      	mov	r2, r0
 8009b6a:	460b      	mov	r3, r1
 8009b6c:	4b61      	ldr	r3, [pc, #388]	; (8009cf4 <UART_SetConfig+0x2d4>)
 8009b6e:	fba3 2302 	umull	r2, r3, r3, r2
 8009b72:	095b      	lsrs	r3, r3, #5
 8009b74:	011c      	lsls	r4, r3, #4
 8009b76:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009b7a:	2200      	movs	r2, #0
 8009b7c:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009b80:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 8009b84:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009b88:	4642      	mov	r2, r8
 8009b8a:	464b      	mov	r3, r9
 8009b8c:	1891      	adds	r1, r2, r2
 8009b8e:	64b9      	str	r1, [r7, #72]	; 0x48
 8009b90:	415b      	adcs	r3, r3
 8009b92:	64fb      	str	r3, [r7, #76]	; 0x4c
 8009b94:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009b98:	4641      	mov	r1, r8
 8009b9a:	eb12 0a01 	adds.w	sl, r2, r1
 8009b9e:	4649      	mov	r1, r9
 8009ba0:	eb43 0b01 	adc.w	fp, r3, r1
 8009ba4:	f04f 0200 	mov.w	r2, #0
 8009ba8:	f04f 0300 	mov.w	r3, #0
 8009bac:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009bb0:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8009bb4:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009bb8:	4692      	mov	sl, r2
 8009bba:	469b      	mov	fp, r3
 8009bbc:	4643      	mov	r3, r8
 8009bbe:	eb1a 0303 	adds.w	r3, sl, r3
 8009bc2:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8009bc6:	464b      	mov	r3, r9
 8009bc8:	eb4b 0303 	adc.w	r3, fp, r3
 8009bcc:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8009bd0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009bd4:	685b      	ldr	r3, [r3, #4]
 8009bd6:	2200      	movs	r2, #0
 8009bd8:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8009bdc:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 8009be0:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 8009be4:	460b      	mov	r3, r1
 8009be6:	18db      	adds	r3, r3, r3
 8009be8:	643b      	str	r3, [r7, #64]	; 0x40
 8009bea:	4613      	mov	r3, r2
 8009bec:	eb42 0303 	adc.w	r3, r2, r3
 8009bf0:	647b      	str	r3, [r7, #68]	; 0x44
 8009bf2:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8009bf6:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009bfa:	f7f7 f845 	bl	8000c88 <__aeabi_uldivmod>
 8009bfe:	4602      	mov	r2, r0
 8009c00:	460b      	mov	r3, r1
 8009c02:	4611      	mov	r1, r2
 8009c04:	4b3b      	ldr	r3, [pc, #236]	; (8009cf4 <UART_SetConfig+0x2d4>)
 8009c06:	fba3 2301 	umull	r2, r3, r3, r1
 8009c0a:	095b      	lsrs	r3, r3, #5
 8009c0c:	2264      	movs	r2, #100	; 0x64
 8009c0e:	fb02 f303 	mul.w	r3, r2, r3
 8009c12:	1acb      	subs	r3, r1, r3
 8009c14:	00db      	lsls	r3, r3, #3
 8009c16:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009c1a:	4b36      	ldr	r3, [pc, #216]	; (8009cf4 <UART_SetConfig+0x2d4>)
 8009c1c:	fba3 2302 	umull	r2, r3, r3, r2
 8009c20:	095b      	lsrs	r3, r3, #5
 8009c22:	005b      	lsls	r3, r3, #1
 8009c24:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009c28:	441c      	add	r4, r3
 8009c2a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009c2e:	2200      	movs	r2, #0
 8009c30:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8009c34:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009c38:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009c3c:	4642      	mov	r2, r8
 8009c3e:	464b      	mov	r3, r9
 8009c40:	1891      	adds	r1, r2, r2
 8009c42:	63b9      	str	r1, [r7, #56]	; 0x38
 8009c44:	415b      	adcs	r3, r3
 8009c46:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009c48:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009c4c:	4641      	mov	r1, r8
 8009c4e:	1851      	adds	r1, r2, r1
 8009c50:	6339      	str	r1, [r7, #48]	; 0x30
 8009c52:	4649      	mov	r1, r9
 8009c54:	414b      	adcs	r3, r1
 8009c56:	637b      	str	r3, [r7, #52]	; 0x34
 8009c58:	f04f 0200 	mov.w	r2, #0
 8009c5c:	f04f 0300 	mov.w	r3, #0
 8009c60:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 8009c64:	4659      	mov	r1, fp
 8009c66:	00cb      	lsls	r3, r1, #3
 8009c68:	4651      	mov	r1, sl
 8009c6a:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009c6e:	4651      	mov	r1, sl
 8009c70:	00ca      	lsls	r2, r1, #3
 8009c72:	4610      	mov	r0, r2
 8009c74:	4619      	mov	r1, r3
 8009c76:	4603      	mov	r3, r0
 8009c78:	4642      	mov	r2, r8
 8009c7a:	189b      	adds	r3, r3, r2
 8009c7c:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009c80:	464b      	mov	r3, r9
 8009c82:	460a      	mov	r2, r1
 8009c84:	eb42 0303 	adc.w	r3, r2, r3
 8009c88:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009c8c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009c90:	685b      	ldr	r3, [r3, #4]
 8009c92:	2200      	movs	r2, #0
 8009c94:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009c98:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009c9c:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009ca0:	460b      	mov	r3, r1
 8009ca2:	18db      	adds	r3, r3, r3
 8009ca4:	62bb      	str	r3, [r7, #40]	; 0x28
 8009ca6:	4613      	mov	r3, r2
 8009ca8:	eb42 0303 	adc.w	r3, r2, r3
 8009cac:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009cae:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009cb2:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8009cb6:	f7f6 ffe7 	bl	8000c88 <__aeabi_uldivmod>
 8009cba:	4602      	mov	r2, r0
 8009cbc:	460b      	mov	r3, r1
 8009cbe:	4b0d      	ldr	r3, [pc, #52]	; (8009cf4 <UART_SetConfig+0x2d4>)
 8009cc0:	fba3 1302 	umull	r1, r3, r3, r2
 8009cc4:	095b      	lsrs	r3, r3, #5
 8009cc6:	2164      	movs	r1, #100	; 0x64
 8009cc8:	fb01 f303 	mul.w	r3, r1, r3
 8009ccc:	1ad3      	subs	r3, r2, r3
 8009cce:	00db      	lsls	r3, r3, #3
 8009cd0:	3332      	adds	r3, #50	; 0x32
 8009cd2:	4a08      	ldr	r2, [pc, #32]	; (8009cf4 <UART_SetConfig+0x2d4>)
 8009cd4:	fba2 2303 	umull	r2, r3, r2, r3
 8009cd8:	095b      	lsrs	r3, r3, #5
 8009cda:	f003 0207 	and.w	r2, r3, #7
 8009cde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ce2:	681b      	ldr	r3, [r3, #0]
 8009ce4:	4422      	add	r2, r4
 8009ce6:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009ce8:	e105      	b.n	8009ef6 <UART_SetConfig+0x4d6>
 8009cea:	bf00      	nop
 8009cec:	40011000 	.word	0x40011000
 8009cf0:	40011400 	.word	0x40011400
 8009cf4:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009cf8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009cfc:	2200      	movs	r2, #0
 8009cfe:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 8009d02:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 8009d06:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009d0a:	4642      	mov	r2, r8
 8009d0c:	464b      	mov	r3, r9
 8009d0e:	1891      	adds	r1, r2, r2
 8009d10:	6239      	str	r1, [r7, #32]
 8009d12:	415b      	adcs	r3, r3
 8009d14:	627b      	str	r3, [r7, #36]	; 0x24
 8009d16:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009d1a:	4641      	mov	r1, r8
 8009d1c:	1854      	adds	r4, r2, r1
 8009d1e:	4649      	mov	r1, r9
 8009d20:	eb43 0501 	adc.w	r5, r3, r1
 8009d24:	f04f 0200 	mov.w	r2, #0
 8009d28:	f04f 0300 	mov.w	r3, #0
 8009d2c:	00eb      	lsls	r3, r5, #3
 8009d2e:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8009d32:	00e2      	lsls	r2, r4, #3
 8009d34:	4614      	mov	r4, r2
 8009d36:	461d      	mov	r5, r3
 8009d38:	4643      	mov	r3, r8
 8009d3a:	18e3      	adds	r3, r4, r3
 8009d3c:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009d40:	464b      	mov	r3, r9
 8009d42:	eb45 0303 	adc.w	r3, r5, r3
 8009d46:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009d4a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009d4e:	685b      	ldr	r3, [r3, #4]
 8009d50:	2200      	movs	r2, #0
 8009d52:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 8009d56:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009d5a:	f04f 0200 	mov.w	r2, #0
 8009d5e:	f04f 0300 	mov.w	r3, #0
 8009d62:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 8009d66:	4629      	mov	r1, r5
 8009d68:	008b      	lsls	r3, r1, #2
 8009d6a:	4621      	mov	r1, r4
 8009d6c:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009d70:	4621      	mov	r1, r4
 8009d72:	008a      	lsls	r2, r1, #2
 8009d74:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009d78:	f7f6 ff86 	bl	8000c88 <__aeabi_uldivmod>
 8009d7c:	4602      	mov	r2, r0
 8009d7e:	460b      	mov	r3, r1
 8009d80:	4b60      	ldr	r3, [pc, #384]	; (8009f04 <UART_SetConfig+0x4e4>)
 8009d82:	fba3 2302 	umull	r2, r3, r3, r2
 8009d86:	095b      	lsrs	r3, r3, #5
 8009d88:	011c      	lsls	r4, r3, #4
 8009d8a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009d8e:	2200      	movs	r2, #0
 8009d90:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 8009d94:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009d98:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009d9c:	4642      	mov	r2, r8
 8009d9e:	464b      	mov	r3, r9
 8009da0:	1891      	adds	r1, r2, r2
 8009da2:	61b9      	str	r1, [r7, #24]
 8009da4:	415b      	adcs	r3, r3
 8009da6:	61fb      	str	r3, [r7, #28]
 8009da8:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009dac:	4641      	mov	r1, r8
 8009dae:	1851      	adds	r1, r2, r1
 8009db0:	6139      	str	r1, [r7, #16]
 8009db2:	4649      	mov	r1, r9
 8009db4:	414b      	adcs	r3, r1
 8009db6:	617b      	str	r3, [r7, #20]
 8009db8:	f04f 0200 	mov.w	r2, #0
 8009dbc:	f04f 0300 	mov.w	r3, #0
 8009dc0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8009dc4:	4659      	mov	r1, fp
 8009dc6:	00cb      	lsls	r3, r1, #3
 8009dc8:	4651      	mov	r1, sl
 8009dca:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009dce:	4651      	mov	r1, sl
 8009dd0:	00ca      	lsls	r2, r1, #3
 8009dd2:	4610      	mov	r0, r2
 8009dd4:	4619      	mov	r1, r3
 8009dd6:	4603      	mov	r3, r0
 8009dd8:	4642      	mov	r2, r8
 8009dda:	189b      	adds	r3, r3, r2
 8009ddc:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 8009de0:	464b      	mov	r3, r9
 8009de2:	460a      	mov	r2, r1
 8009de4:	eb42 0303 	adc.w	r3, r2, r3
 8009de8:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009dec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009df0:	685b      	ldr	r3, [r3, #4]
 8009df2:	2200      	movs	r2, #0
 8009df4:	67bb      	str	r3, [r7, #120]	; 0x78
 8009df6:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009df8:	f04f 0200 	mov.w	r2, #0
 8009dfc:	f04f 0300 	mov.w	r3, #0
 8009e00:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 8009e04:	4649      	mov	r1, r9
 8009e06:	008b      	lsls	r3, r1, #2
 8009e08:	4641      	mov	r1, r8
 8009e0a:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009e0e:	4641      	mov	r1, r8
 8009e10:	008a      	lsls	r2, r1, #2
 8009e12:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 8009e16:	f7f6 ff37 	bl	8000c88 <__aeabi_uldivmod>
 8009e1a:	4602      	mov	r2, r0
 8009e1c:	460b      	mov	r3, r1
 8009e1e:	4b39      	ldr	r3, [pc, #228]	; (8009f04 <UART_SetConfig+0x4e4>)
 8009e20:	fba3 1302 	umull	r1, r3, r3, r2
 8009e24:	095b      	lsrs	r3, r3, #5
 8009e26:	2164      	movs	r1, #100	; 0x64
 8009e28:	fb01 f303 	mul.w	r3, r1, r3
 8009e2c:	1ad3      	subs	r3, r2, r3
 8009e2e:	011b      	lsls	r3, r3, #4
 8009e30:	3332      	adds	r3, #50	; 0x32
 8009e32:	4a34      	ldr	r2, [pc, #208]	; (8009f04 <UART_SetConfig+0x4e4>)
 8009e34:	fba2 2303 	umull	r2, r3, r2, r3
 8009e38:	095b      	lsrs	r3, r3, #5
 8009e3a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009e3e:	441c      	add	r4, r3
 8009e40:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009e44:	2200      	movs	r2, #0
 8009e46:	673b      	str	r3, [r7, #112]	; 0x70
 8009e48:	677a      	str	r2, [r7, #116]	; 0x74
 8009e4a:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009e4e:	4642      	mov	r2, r8
 8009e50:	464b      	mov	r3, r9
 8009e52:	1891      	adds	r1, r2, r2
 8009e54:	60b9      	str	r1, [r7, #8]
 8009e56:	415b      	adcs	r3, r3
 8009e58:	60fb      	str	r3, [r7, #12]
 8009e5a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009e5e:	4641      	mov	r1, r8
 8009e60:	1851      	adds	r1, r2, r1
 8009e62:	6039      	str	r1, [r7, #0]
 8009e64:	4649      	mov	r1, r9
 8009e66:	414b      	adcs	r3, r1
 8009e68:	607b      	str	r3, [r7, #4]
 8009e6a:	f04f 0200 	mov.w	r2, #0
 8009e6e:	f04f 0300 	mov.w	r3, #0
 8009e72:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8009e76:	4659      	mov	r1, fp
 8009e78:	00cb      	lsls	r3, r1, #3
 8009e7a:	4651      	mov	r1, sl
 8009e7c:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009e80:	4651      	mov	r1, sl
 8009e82:	00ca      	lsls	r2, r1, #3
 8009e84:	4610      	mov	r0, r2
 8009e86:	4619      	mov	r1, r3
 8009e88:	4603      	mov	r3, r0
 8009e8a:	4642      	mov	r2, r8
 8009e8c:	189b      	adds	r3, r3, r2
 8009e8e:	66bb      	str	r3, [r7, #104]	; 0x68
 8009e90:	464b      	mov	r3, r9
 8009e92:	460a      	mov	r2, r1
 8009e94:	eb42 0303 	adc.w	r3, r2, r3
 8009e98:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009e9a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009e9e:	685b      	ldr	r3, [r3, #4]
 8009ea0:	2200      	movs	r2, #0
 8009ea2:	663b      	str	r3, [r7, #96]	; 0x60
 8009ea4:	667a      	str	r2, [r7, #100]	; 0x64
 8009ea6:	f04f 0200 	mov.w	r2, #0
 8009eaa:	f04f 0300 	mov.w	r3, #0
 8009eae:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 8009eb2:	4649      	mov	r1, r9
 8009eb4:	008b      	lsls	r3, r1, #2
 8009eb6:	4641      	mov	r1, r8
 8009eb8:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009ebc:	4641      	mov	r1, r8
 8009ebe:	008a      	lsls	r2, r1, #2
 8009ec0:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 8009ec4:	f7f6 fee0 	bl	8000c88 <__aeabi_uldivmod>
 8009ec8:	4602      	mov	r2, r0
 8009eca:	460b      	mov	r3, r1
 8009ecc:	4b0d      	ldr	r3, [pc, #52]	; (8009f04 <UART_SetConfig+0x4e4>)
 8009ece:	fba3 1302 	umull	r1, r3, r3, r2
 8009ed2:	095b      	lsrs	r3, r3, #5
 8009ed4:	2164      	movs	r1, #100	; 0x64
 8009ed6:	fb01 f303 	mul.w	r3, r1, r3
 8009eda:	1ad3      	subs	r3, r2, r3
 8009edc:	011b      	lsls	r3, r3, #4
 8009ede:	3332      	adds	r3, #50	; 0x32
 8009ee0:	4a08      	ldr	r2, [pc, #32]	; (8009f04 <UART_SetConfig+0x4e4>)
 8009ee2:	fba2 2303 	umull	r2, r3, r2, r3
 8009ee6:	095b      	lsrs	r3, r3, #5
 8009ee8:	f003 020f 	and.w	r2, r3, #15
 8009eec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009ef0:	681b      	ldr	r3, [r3, #0]
 8009ef2:	4422      	add	r2, r4
 8009ef4:	609a      	str	r2, [r3, #8]
}
 8009ef6:	bf00      	nop
 8009ef8:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009efc:	46bd      	mov	sp, r7
 8009efe:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8009f02:	bf00      	nop
 8009f04:	51eb851f 	.word	0x51eb851f

08009f08 <atof>:
 8009f08:	2100      	movs	r1, #0
 8009f0a:	f001 bcfd 	b.w	800b908 <strtod>
	...

08009f10 <__errno>:
 8009f10:	4b01      	ldr	r3, [pc, #4]	; (8009f18 <__errno+0x8>)
 8009f12:	6818      	ldr	r0, [r3, #0]
 8009f14:	4770      	bx	lr
 8009f16:	bf00      	nop
 8009f18:	20000020 	.word	0x20000020

08009f1c <__libc_init_array>:
 8009f1c:	b570      	push	{r4, r5, r6, lr}
 8009f1e:	4d0d      	ldr	r5, [pc, #52]	; (8009f54 <__libc_init_array+0x38>)
 8009f20:	4c0d      	ldr	r4, [pc, #52]	; (8009f58 <__libc_init_array+0x3c>)
 8009f22:	1b64      	subs	r4, r4, r5
 8009f24:	10a4      	asrs	r4, r4, #2
 8009f26:	2600      	movs	r6, #0
 8009f28:	42a6      	cmp	r6, r4
 8009f2a:	d109      	bne.n	8009f40 <__libc_init_array+0x24>
 8009f2c:	4d0b      	ldr	r5, [pc, #44]	; (8009f5c <__libc_init_array+0x40>)
 8009f2e:	4c0c      	ldr	r4, [pc, #48]	; (8009f60 <__libc_init_array+0x44>)
 8009f30:	f005 fc44 	bl	800f7bc <_init>
 8009f34:	1b64      	subs	r4, r4, r5
 8009f36:	10a4      	asrs	r4, r4, #2
 8009f38:	2600      	movs	r6, #0
 8009f3a:	42a6      	cmp	r6, r4
 8009f3c:	d105      	bne.n	8009f4a <__libc_init_array+0x2e>
 8009f3e:	bd70      	pop	{r4, r5, r6, pc}
 8009f40:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f44:	4798      	blx	r3
 8009f46:	3601      	adds	r6, #1
 8009f48:	e7ee      	b.n	8009f28 <__libc_init_array+0xc>
 8009f4a:	f855 3b04 	ldr.w	r3, [r5], #4
 8009f4e:	4798      	blx	r3
 8009f50:	3601      	adds	r6, #1
 8009f52:	e7f2      	b.n	8009f3a <__libc_init_array+0x1e>
 8009f54:	0800fee0 	.word	0x0800fee0
 8009f58:	0800fee0 	.word	0x0800fee0
 8009f5c:	0800fee0 	.word	0x0800fee0
 8009f60:	0800fee4 	.word	0x0800fee4

08009f64 <memset>:
 8009f64:	4402      	add	r2, r0
 8009f66:	4603      	mov	r3, r0
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d100      	bne.n	8009f6e <memset+0xa>
 8009f6c:	4770      	bx	lr
 8009f6e:	f803 1b01 	strb.w	r1, [r3], #1
 8009f72:	e7f9      	b.n	8009f68 <memset+0x4>

08009f74 <__cvt>:
 8009f74:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009f78:	ec55 4b10 	vmov	r4, r5, d0
 8009f7c:	2d00      	cmp	r5, #0
 8009f7e:	460e      	mov	r6, r1
 8009f80:	4619      	mov	r1, r3
 8009f82:	462b      	mov	r3, r5
 8009f84:	bfbb      	ittet	lt
 8009f86:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009f8a:	461d      	movlt	r5, r3
 8009f8c:	2300      	movge	r3, #0
 8009f8e:	232d      	movlt	r3, #45	; 0x2d
 8009f90:	700b      	strb	r3, [r1, #0]
 8009f92:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8009f94:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009f98:	4691      	mov	r9, r2
 8009f9a:	f023 0820 	bic.w	r8, r3, #32
 8009f9e:	bfbc      	itt	lt
 8009fa0:	4622      	movlt	r2, r4
 8009fa2:	4614      	movlt	r4, r2
 8009fa4:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fa8:	d005      	beq.n	8009fb6 <__cvt+0x42>
 8009faa:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009fae:	d100      	bne.n	8009fb2 <__cvt+0x3e>
 8009fb0:	3601      	adds	r6, #1
 8009fb2:	2102      	movs	r1, #2
 8009fb4:	e000      	b.n	8009fb8 <__cvt+0x44>
 8009fb6:	2103      	movs	r1, #3
 8009fb8:	ab03      	add	r3, sp, #12
 8009fba:	9301      	str	r3, [sp, #4]
 8009fbc:	ab02      	add	r3, sp, #8
 8009fbe:	9300      	str	r3, [sp, #0]
 8009fc0:	ec45 4b10 	vmov	d0, r4, r5
 8009fc4:	4653      	mov	r3, sl
 8009fc6:	4632      	mov	r2, r6
 8009fc8:	f001 fe36 	bl	800bc38 <_dtoa_r>
 8009fcc:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8009fd0:	4607      	mov	r7, r0
 8009fd2:	d102      	bne.n	8009fda <__cvt+0x66>
 8009fd4:	f019 0f01 	tst.w	r9, #1
 8009fd8:	d022      	beq.n	800a020 <__cvt+0xac>
 8009fda:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009fde:	eb07 0906 	add.w	r9, r7, r6
 8009fe2:	d110      	bne.n	800a006 <__cvt+0x92>
 8009fe4:	783b      	ldrb	r3, [r7, #0]
 8009fe6:	2b30      	cmp	r3, #48	; 0x30
 8009fe8:	d10a      	bne.n	800a000 <__cvt+0x8c>
 8009fea:	2200      	movs	r2, #0
 8009fec:	2300      	movs	r3, #0
 8009fee:	4620      	mov	r0, r4
 8009ff0:	4629      	mov	r1, r5
 8009ff2:	f7f6 fd69 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ff6:	b918      	cbnz	r0, 800a000 <__cvt+0x8c>
 8009ff8:	f1c6 0601 	rsb	r6, r6, #1
 8009ffc:	f8ca 6000 	str.w	r6, [sl]
 800a000:	f8da 3000 	ldr.w	r3, [sl]
 800a004:	4499      	add	r9, r3
 800a006:	2200      	movs	r2, #0
 800a008:	2300      	movs	r3, #0
 800a00a:	4620      	mov	r0, r4
 800a00c:	4629      	mov	r1, r5
 800a00e:	f7f6 fd5b 	bl	8000ac8 <__aeabi_dcmpeq>
 800a012:	b108      	cbz	r0, 800a018 <__cvt+0xa4>
 800a014:	f8cd 900c 	str.w	r9, [sp, #12]
 800a018:	2230      	movs	r2, #48	; 0x30
 800a01a:	9b03      	ldr	r3, [sp, #12]
 800a01c:	454b      	cmp	r3, r9
 800a01e:	d307      	bcc.n	800a030 <__cvt+0xbc>
 800a020:	9b03      	ldr	r3, [sp, #12]
 800a022:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800a024:	1bdb      	subs	r3, r3, r7
 800a026:	4638      	mov	r0, r7
 800a028:	6013      	str	r3, [r2, #0]
 800a02a:	b004      	add	sp, #16
 800a02c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a030:	1c59      	adds	r1, r3, #1
 800a032:	9103      	str	r1, [sp, #12]
 800a034:	701a      	strb	r2, [r3, #0]
 800a036:	e7f0      	b.n	800a01a <__cvt+0xa6>

0800a038 <__exponent>:
 800a038:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a03a:	4603      	mov	r3, r0
 800a03c:	2900      	cmp	r1, #0
 800a03e:	bfb8      	it	lt
 800a040:	4249      	neglt	r1, r1
 800a042:	f803 2b02 	strb.w	r2, [r3], #2
 800a046:	bfb4      	ite	lt
 800a048:	222d      	movlt	r2, #45	; 0x2d
 800a04a:	222b      	movge	r2, #43	; 0x2b
 800a04c:	2909      	cmp	r1, #9
 800a04e:	7042      	strb	r2, [r0, #1]
 800a050:	dd2a      	ble.n	800a0a8 <__exponent+0x70>
 800a052:	f10d 0407 	add.w	r4, sp, #7
 800a056:	46a4      	mov	ip, r4
 800a058:	270a      	movs	r7, #10
 800a05a:	46a6      	mov	lr, r4
 800a05c:	460a      	mov	r2, r1
 800a05e:	fb91 f6f7 	sdiv	r6, r1, r7
 800a062:	fb07 1516 	mls	r5, r7, r6, r1
 800a066:	3530      	adds	r5, #48	; 0x30
 800a068:	2a63      	cmp	r2, #99	; 0x63
 800a06a:	f104 34ff 	add.w	r4, r4, #4294967295
 800a06e:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800a072:	4631      	mov	r1, r6
 800a074:	dcf1      	bgt.n	800a05a <__exponent+0x22>
 800a076:	3130      	adds	r1, #48	; 0x30
 800a078:	f1ae 0502 	sub.w	r5, lr, #2
 800a07c:	f804 1c01 	strb.w	r1, [r4, #-1]
 800a080:	1c44      	adds	r4, r0, #1
 800a082:	4629      	mov	r1, r5
 800a084:	4561      	cmp	r1, ip
 800a086:	d30a      	bcc.n	800a09e <__exponent+0x66>
 800a088:	f10d 0209 	add.w	r2, sp, #9
 800a08c:	eba2 020e 	sub.w	r2, r2, lr
 800a090:	4565      	cmp	r5, ip
 800a092:	bf88      	it	hi
 800a094:	2200      	movhi	r2, #0
 800a096:	4413      	add	r3, r2
 800a098:	1a18      	subs	r0, r3, r0
 800a09a:	b003      	add	sp, #12
 800a09c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a09e:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a0a2:	f804 2f01 	strb.w	r2, [r4, #1]!
 800a0a6:	e7ed      	b.n	800a084 <__exponent+0x4c>
 800a0a8:	2330      	movs	r3, #48	; 0x30
 800a0aa:	3130      	adds	r1, #48	; 0x30
 800a0ac:	7083      	strb	r3, [r0, #2]
 800a0ae:	70c1      	strb	r1, [r0, #3]
 800a0b0:	1d03      	adds	r3, r0, #4
 800a0b2:	e7f1      	b.n	800a098 <__exponent+0x60>

0800a0b4 <_printf_float>:
 800a0b4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0b8:	ed2d 8b02 	vpush	{d8}
 800a0bc:	b08d      	sub	sp, #52	; 0x34
 800a0be:	460c      	mov	r4, r1
 800a0c0:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800a0c4:	4616      	mov	r6, r2
 800a0c6:	461f      	mov	r7, r3
 800a0c8:	4605      	mov	r5, r0
 800a0ca:	f002 ff25 	bl	800cf18 <_localeconv_r>
 800a0ce:	f8d0 a000 	ldr.w	sl, [r0]
 800a0d2:	4650      	mov	r0, sl
 800a0d4:	f7f6 f87c 	bl	80001d0 <strlen>
 800a0d8:	2300      	movs	r3, #0
 800a0da:	930a      	str	r3, [sp, #40]	; 0x28
 800a0dc:	6823      	ldr	r3, [r4, #0]
 800a0de:	9305      	str	r3, [sp, #20]
 800a0e0:	f8d8 3000 	ldr.w	r3, [r8]
 800a0e4:	f894 b018 	ldrb.w	fp, [r4, #24]
 800a0e8:	3307      	adds	r3, #7
 800a0ea:	f023 0307 	bic.w	r3, r3, #7
 800a0ee:	f103 0208 	add.w	r2, r3, #8
 800a0f2:	f8c8 2000 	str.w	r2, [r8]
 800a0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0fa:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 800a0fe:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800a102:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800a106:	9307      	str	r3, [sp, #28]
 800a108:	f8cd 8018 	str.w	r8, [sp, #24]
 800a10c:	ee08 0a10 	vmov	s16, r0
 800a110:	4b9f      	ldr	r3, [pc, #636]	; (800a390 <_printf_float+0x2dc>)
 800a112:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a116:	f04f 32ff 	mov.w	r2, #4294967295
 800a11a:	f7f6 fd07 	bl	8000b2c <__aeabi_dcmpun>
 800a11e:	bb88      	cbnz	r0, 800a184 <_printf_float+0xd0>
 800a120:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800a124:	4b9a      	ldr	r3, [pc, #616]	; (800a390 <_printf_float+0x2dc>)
 800a126:	f04f 32ff 	mov.w	r2, #4294967295
 800a12a:	f7f6 fce1 	bl	8000af0 <__aeabi_dcmple>
 800a12e:	bb48      	cbnz	r0, 800a184 <_printf_float+0xd0>
 800a130:	2200      	movs	r2, #0
 800a132:	2300      	movs	r3, #0
 800a134:	4640      	mov	r0, r8
 800a136:	4649      	mov	r1, r9
 800a138:	f7f6 fcd0 	bl	8000adc <__aeabi_dcmplt>
 800a13c:	b110      	cbz	r0, 800a144 <_printf_float+0x90>
 800a13e:	232d      	movs	r3, #45	; 0x2d
 800a140:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a144:	4b93      	ldr	r3, [pc, #588]	; (800a394 <_printf_float+0x2e0>)
 800a146:	4894      	ldr	r0, [pc, #592]	; (800a398 <_printf_float+0x2e4>)
 800a148:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 800a14c:	bf94      	ite	ls
 800a14e:	4698      	movls	r8, r3
 800a150:	4680      	movhi	r8, r0
 800a152:	2303      	movs	r3, #3
 800a154:	6123      	str	r3, [r4, #16]
 800a156:	9b05      	ldr	r3, [sp, #20]
 800a158:	f023 0204 	bic.w	r2, r3, #4
 800a15c:	6022      	str	r2, [r4, #0]
 800a15e:	f04f 0900 	mov.w	r9, #0
 800a162:	9700      	str	r7, [sp, #0]
 800a164:	4633      	mov	r3, r6
 800a166:	aa0b      	add	r2, sp, #44	; 0x2c
 800a168:	4621      	mov	r1, r4
 800a16a:	4628      	mov	r0, r5
 800a16c:	f000 f9d8 	bl	800a520 <_printf_common>
 800a170:	3001      	adds	r0, #1
 800a172:	f040 8090 	bne.w	800a296 <_printf_float+0x1e2>
 800a176:	f04f 30ff 	mov.w	r0, #4294967295
 800a17a:	b00d      	add	sp, #52	; 0x34
 800a17c:	ecbd 8b02 	vpop	{d8}
 800a180:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a184:	4642      	mov	r2, r8
 800a186:	464b      	mov	r3, r9
 800a188:	4640      	mov	r0, r8
 800a18a:	4649      	mov	r1, r9
 800a18c:	f7f6 fcce 	bl	8000b2c <__aeabi_dcmpun>
 800a190:	b140      	cbz	r0, 800a1a4 <_printf_float+0xf0>
 800a192:	464b      	mov	r3, r9
 800a194:	2b00      	cmp	r3, #0
 800a196:	bfbc      	itt	lt
 800a198:	232d      	movlt	r3, #45	; 0x2d
 800a19a:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 800a19e:	487f      	ldr	r0, [pc, #508]	; (800a39c <_printf_float+0x2e8>)
 800a1a0:	4b7f      	ldr	r3, [pc, #508]	; (800a3a0 <_printf_float+0x2ec>)
 800a1a2:	e7d1      	b.n	800a148 <_printf_float+0x94>
 800a1a4:	6863      	ldr	r3, [r4, #4]
 800a1a6:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 800a1aa:	9206      	str	r2, [sp, #24]
 800a1ac:	1c5a      	adds	r2, r3, #1
 800a1ae:	d13f      	bne.n	800a230 <_printf_float+0x17c>
 800a1b0:	2306      	movs	r3, #6
 800a1b2:	6063      	str	r3, [r4, #4]
 800a1b4:	9b05      	ldr	r3, [sp, #20]
 800a1b6:	6861      	ldr	r1, [r4, #4]
 800a1b8:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9303      	str	r3, [sp, #12]
 800a1c0:	ab0a      	add	r3, sp, #40	; 0x28
 800a1c2:	e9cd b301 	strd	fp, r3, [sp, #4]
 800a1c6:	ab09      	add	r3, sp, #36	; 0x24
 800a1c8:	ec49 8b10 	vmov	d0, r8, r9
 800a1cc:	9300      	str	r3, [sp, #0]
 800a1ce:	6022      	str	r2, [r4, #0]
 800a1d0:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 800a1d4:	4628      	mov	r0, r5
 800a1d6:	f7ff fecd 	bl	8009f74 <__cvt>
 800a1da:	9b06      	ldr	r3, [sp, #24]
 800a1dc:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a1de:	2b47      	cmp	r3, #71	; 0x47
 800a1e0:	4680      	mov	r8, r0
 800a1e2:	d108      	bne.n	800a1f6 <_printf_float+0x142>
 800a1e4:	1cc8      	adds	r0, r1, #3
 800a1e6:	db02      	blt.n	800a1ee <_printf_float+0x13a>
 800a1e8:	6863      	ldr	r3, [r4, #4]
 800a1ea:	4299      	cmp	r1, r3
 800a1ec:	dd41      	ble.n	800a272 <_printf_float+0x1be>
 800a1ee:	f1ab 0b02 	sub.w	fp, fp, #2
 800a1f2:	fa5f fb8b 	uxtb.w	fp, fp
 800a1f6:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a1fa:	d820      	bhi.n	800a23e <_printf_float+0x18a>
 800a1fc:	3901      	subs	r1, #1
 800a1fe:	465a      	mov	r2, fp
 800a200:	f104 0050 	add.w	r0, r4, #80	; 0x50
 800a204:	9109      	str	r1, [sp, #36]	; 0x24
 800a206:	f7ff ff17 	bl	800a038 <__exponent>
 800a20a:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a20c:	1813      	adds	r3, r2, r0
 800a20e:	2a01      	cmp	r2, #1
 800a210:	4681      	mov	r9, r0
 800a212:	6123      	str	r3, [r4, #16]
 800a214:	dc02      	bgt.n	800a21c <_printf_float+0x168>
 800a216:	6822      	ldr	r2, [r4, #0]
 800a218:	07d2      	lsls	r2, r2, #31
 800a21a:	d501      	bpl.n	800a220 <_printf_float+0x16c>
 800a21c:	3301      	adds	r3, #1
 800a21e:	6123      	str	r3, [r4, #16]
 800a220:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 800a224:	2b00      	cmp	r3, #0
 800a226:	d09c      	beq.n	800a162 <_printf_float+0xae>
 800a228:	232d      	movs	r3, #45	; 0x2d
 800a22a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a22e:	e798      	b.n	800a162 <_printf_float+0xae>
 800a230:	9a06      	ldr	r2, [sp, #24]
 800a232:	2a47      	cmp	r2, #71	; 0x47
 800a234:	d1be      	bne.n	800a1b4 <_printf_float+0x100>
 800a236:	2b00      	cmp	r3, #0
 800a238:	d1bc      	bne.n	800a1b4 <_printf_float+0x100>
 800a23a:	2301      	movs	r3, #1
 800a23c:	e7b9      	b.n	800a1b2 <_printf_float+0xfe>
 800a23e:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 800a242:	d118      	bne.n	800a276 <_printf_float+0x1c2>
 800a244:	2900      	cmp	r1, #0
 800a246:	6863      	ldr	r3, [r4, #4]
 800a248:	dd0b      	ble.n	800a262 <_printf_float+0x1ae>
 800a24a:	6121      	str	r1, [r4, #16]
 800a24c:	b913      	cbnz	r3, 800a254 <_printf_float+0x1a0>
 800a24e:	6822      	ldr	r2, [r4, #0]
 800a250:	07d0      	lsls	r0, r2, #31
 800a252:	d502      	bpl.n	800a25a <_printf_float+0x1a6>
 800a254:	3301      	adds	r3, #1
 800a256:	440b      	add	r3, r1
 800a258:	6123      	str	r3, [r4, #16]
 800a25a:	65a1      	str	r1, [r4, #88]	; 0x58
 800a25c:	f04f 0900 	mov.w	r9, #0
 800a260:	e7de      	b.n	800a220 <_printf_float+0x16c>
 800a262:	b913      	cbnz	r3, 800a26a <_printf_float+0x1b6>
 800a264:	6822      	ldr	r2, [r4, #0]
 800a266:	07d2      	lsls	r2, r2, #31
 800a268:	d501      	bpl.n	800a26e <_printf_float+0x1ba>
 800a26a:	3302      	adds	r3, #2
 800a26c:	e7f4      	b.n	800a258 <_printf_float+0x1a4>
 800a26e:	2301      	movs	r3, #1
 800a270:	e7f2      	b.n	800a258 <_printf_float+0x1a4>
 800a272:	f04f 0b67 	mov.w	fp, #103	; 0x67
 800a276:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a278:	4299      	cmp	r1, r3
 800a27a:	db05      	blt.n	800a288 <_printf_float+0x1d4>
 800a27c:	6823      	ldr	r3, [r4, #0]
 800a27e:	6121      	str	r1, [r4, #16]
 800a280:	07d8      	lsls	r0, r3, #31
 800a282:	d5ea      	bpl.n	800a25a <_printf_float+0x1a6>
 800a284:	1c4b      	adds	r3, r1, #1
 800a286:	e7e7      	b.n	800a258 <_printf_float+0x1a4>
 800a288:	2900      	cmp	r1, #0
 800a28a:	bfd4      	ite	le
 800a28c:	f1c1 0202 	rsble	r2, r1, #2
 800a290:	2201      	movgt	r2, #1
 800a292:	4413      	add	r3, r2
 800a294:	e7e0      	b.n	800a258 <_printf_float+0x1a4>
 800a296:	6823      	ldr	r3, [r4, #0]
 800a298:	055a      	lsls	r2, r3, #21
 800a29a:	d407      	bmi.n	800a2ac <_printf_float+0x1f8>
 800a29c:	6923      	ldr	r3, [r4, #16]
 800a29e:	4642      	mov	r2, r8
 800a2a0:	4631      	mov	r1, r6
 800a2a2:	4628      	mov	r0, r5
 800a2a4:	47b8      	blx	r7
 800a2a6:	3001      	adds	r0, #1
 800a2a8:	d12c      	bne.n	800a304 <_printf_float+0x250>
 800a2aa:	e764      	b.n	800a176 <_printf_float+0xc2>
 800a2ac:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 800a2b0:	f240 80e0 	bls.w	800a474 <_printf_float+0x3c0>
 800a2b4:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a2b8:	2200      	movs	r2, #0
 800a2ba:	2300      	movs	r3, #0
 800a2bc:	f7f6 fc04 	bl	8000ac8 <__aeabi_dcmpeq>
 800a2c0:	2800      	cmp	r0, #0
 800a2c2:	d034      	beq.n	800a32e <_printf_float+0x27a>
 800a2c4:	4a37      	ldr	r2, [pc, #220]	; (800a3a4 <_printf_float+0x2f0>)
 800a2c6:	2301      	movs	r3, #1
 800a2c8:	4631      	mov	r1, r6
 800a2ca:	4628      	mov	r0, r5
 800a2cc:	47b8      	blx	r7
 800a2ce:	3001      	adds	r0, #1
 800a2d0:	f43f af51 	beq.w	800a176 <_printf_float+0xc2>
 800a2d4:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a2d8:	429a      	cmp	r2, r3
 800a2da:	db02      	blt.n	800a2e2 <_printf_float+0x22e>
 800a2dc:	6823      	ldr	r3, [r4, #0]
 800a2de:	07d8      	lsls	r0, r3, #31
 800a2e0:	d510      	bpl.n	800a304 <_printf_float+0x250>
 800a2e2:	ee18 3a10 	vmov	r3, s16
 800a2e6:	4652      	mov	r2, sl
 800a2e8:	4631      	mov	r1, r6
 800a2ea:	4628      	mov	r0, r5
 800a2ec:	47b8      	blx	r7
 800a2ee:	3001      	adds	r0, #1
 800a2f0:	f43f af41 	beq.w	800a176 <_printf_float+0xc2>
 800a2f4:	f04f 0800 	mov.w	r8, #0
 800a2f8:	f104 091a 	add.w	r9, r4, #26
 800a2fc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a2fe:	3b01      	subs	r3, #1
 800a300:	4543      	cmp	r3, r8
 800a302:	dc09      	bgt.n	800a318 <_printf_float+0x264>
 800a304:	6823      	ldr	r3, [r4, #0]
 800a306:	079b      	lsls	r3, r3, #30
 800a308:	f100 8105 	bmi.w	800a516 <_printf_float+0x462>
 800a30c:	68e0      	ldr	r0, [r4, #12]
 800a30e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a310:	4298      	cmp	r0, r3
 800a312:	bfb8      	it	lt
 800a314:	4618      	movlt	r0, r3
 800a316:	e730      	b.n	800a17a <_printf_float+0xc6>
 800a318:	2301      	movs	r3, #1
 800a31a:	464a      	mov	r2, r9
 800a31c:	4631      	mov	r1, r6
 800a31e:	4628      	mov	r0, r5
 800a320:	47b8      	blx	r7
 800a322:	3001      	adds	r0, #1
 800a324:	f43f af27 	beq.w	800a176 <_printf_float+0xc2>
 800a328:	f108 0801 	add.w	r8, r8, #1
 800a32c:	e7e6      	b.n	800a2fc <_printf_float+0x248>
 800a32e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a330:	2b00      	cmp	r3, #0
 800a332:	dc39      	bgt.n	800a3a8 <_printf_float+0x2f4>
 800a334:	4a1b      	ldr	r2, [pc, #108]	; (800a3a4 <_printf_float+0x2f0>)
 800a336:	2301      	movs	r3, #1
 800a338:	4631      	mov	r1, r6
 800a33a:	4628      	mov	r0, r5
 800a33c:	47b8      	blx	r7
 800a33e:	3001      	adds	r0, #1
 800a340:	f43f af19 	beq.w	800a176 <_printf_float+0xc2>
 800a344:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a348:	4313      	orrs	r3, r2
 800a34a:	d102      	bne.n	800a352 <_printf_float+0x29e>
 800a34c:	6823      	ldr	r3, [r4, #0]
 800a34e:	07d9      	lsls	r1, r3, #31
 800a350:	d5d8      	bpl.n	800a304 <_printf_float+0x250>
 800a352:	ee18 3a10 	vmov	r3, s16
 800a356:	4652      	mov	r2, sl
 800a358:	4631      	mov	r1, r6
 800a35a:	4628      	mov	r0, r5
 800a35c:	47b8      	blx	r7
 800a35e:	3001      	adds	r0, #1
 800a360:	f43f af09 	beq.w	800a176 <_printf_float+0xc2>
 800a364:	f04f 0900 	mov.w	r9, #0
 800a368:	f104 0a1a 	add.w	sl, r4, #26
 800a36c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800a36e:	425b      	negs	r3, r3
 800a370:	454b      	cmp	r3, r9
 800a372:	dc01      	bgt.n	800a378 <_printf_float+0x2c4>
 800a374:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a376:	e792      	b.n	800a29e <_printf_float+0x1ea>
 800a378:	2301      	movs	r3, #1
 800a37a:	4652      	mov	r2, sl
 800a37c:	4631      	mov	r1, r6
 800a37e:	4628      	mov	r0, r5
 800a380:	47b8      	blx	r7
 800a382:	3001      	adds	r0, #1
 800a384:	f43f aef7 	beq.w	800a176 <_printf_float+0xc2>
 800a388:	f109 0901 	add.w	r9, r9, #1
 800a38c:	e7ee      	b.n	800a36c <_printf_float+0x2b8>
 800a38e:	bf00      	nop
 800a390:	7fefffff 	.word	0x7fefffff
 800a394:	0800f9a8 	.word	0x0800f9a8
 800a398:	0800f9ac 	.word	0x0800f9ac
 800a39c:	0800f9b4 	.word	0x0800f9b4
 800a3a0:	0800f9b0 	.word	0x0800f9b0
 800a3a4:	0800f9b8 	.word	0x0800f9b8
 800a3a8:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a3aa:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3ac:	429a      	cmp	r2, r3
 800a3ae:	bfa8      	it	ge
 800a3b0:	461a      	movge	r2, r3
 800a3b2:	2a00      	cmp	r2, #0
 800a3b4:	4691      	mov	r9, r2
 800a3b6:	dc37      	bgt.n	800a428 <_printf_float+0x374>
 800a3b8:	f04f 0b00 	mov.w	fp, #0
 800a3bc:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3c0:	f104 021a 	add.w	r2, r4, #26
 800a3c4:	6da3      	ldr	r3, [r4, #88]	; 0x58
 800a3c6:	9305      	str	r3, [sp, #20]
 800a3c8:	eba3 0309 	sub.w	r3, r3, r9
 800a3cc:	455b      	cmp	r3, fp
 800a3ce:	dc33      	bgt.n	800a438 <_printf_float+0x384>
 800a3d0:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a3d4:	429a      	cmp	r2, r3
 800a3d6:	db3b      	blt.n	800a450 <_printf_float+0x39c>
 800a3d8:	6823      	ldr	r3, [r4, #0]
 800a3da:	07da      	lsls	r2, r3, #31
 800a3dc:	d438      	bmi.n	800a450 <_printf_float+0x39c>
 800a3de:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a3e0:	9a05      	ldr	r2, [sp, #20]
 800a3e2:	9909      	ldr	r1, [sp, #36]	; 0x24
 800a3e4:	1a9a      	subs	r2, r3, r2
 800a3e6:	eba3 0901 	sub.w	r9, r3, r1
 800a3ea:	4591      	cmp	r9, r2
 800a3ec:	bfa8      	it	ge
 800a3ee:	4691      	movge	r9, r2
 800a3f0:	f1b9 0f00 	cmp.w	r9, #0
 800a3f4:	dc35      	bgt.n	800a462 <_printf_float+0x3ae>
 800a3f6:	f04f 0800 	mov.w	r8, #0
 800a3fa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800a3fe:	f104 0a1a 	add.w	sl, r4, #26
 800a402:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800a406:	1a9b      	subs	r3, r3, r2
 800a408:	eba3 0309 	sub.w	r3, r3, r9
 800a40c:	4543      	cmp	r3, r8
 800a40e:	f77f af79 	ble.w	800a304 <_printf_float+0x250>
 800a412:	2301      	movs	r3, #1
 800a414:	4652      	mov	r2, sl
 800a416:	4631      	mov	r1, r6
 800a418:	4628      	mov	r0, r5
 800a41a:	47b8      	blx	r7
 800a41c:	3001      	adds	r0, #1
 800a41e:	f43f aeaa 	beq.w	800a176 <_printf_float+0xc2>
 800a422:	f108 0801 	add.w	r8, r8, #1
 800a426:	e7ec      	b.n	800a402 <_printf_float+0x34e>
 800a428:	4613      	mov	r3, r2
 800a42a:	4631      	mov	r1, r6
 800a42c:	4642      	mov	r2, r8
 800a42e:	4628      	mov	r0, r5
 800a430:	47b8      	blx	r7
 800a432:	3001      	adds	r0, #1
 800a434:	d1c0      	bne.n	800a3b8 <_printf_float+0x304>
 800a436:	e69e      	b.n	800a176 <_printf_float+0xc2>
 800a438:	2301      	movs	r3, #1
 800a43a:	4631      	mov	r1, r6
 800a43c:	4628      	mov	r0, r5
 800a43e:	9205      	str	r2, [sp, #20]
 800a440:	47b8      	blx	r7
 800a442:	3001      	adds	r0, #1
 800a444:	f43f ae97 	beq.w	800a176 <_printf_float+0xc2>
 800a448:	9a05      	ldr	r2, [sp, #20]
 800a44a:	f10b 0b01 	add.w	fp, fp, #1
 800a44e:	e7b9      	b.n	800a3c4 <_printf_float+0x310>
 800a450:	ee18 3a10 	vmov	r3, s16
 800a454:	4652      	mov	r2, sl
 800a456:	4631      	mov	r1, r6
 800a458:	4628      	mov	r0, r5
 800a45a:	47b8      	blx	r7
 800a45c:	3001      	adds	r0, #1
 800a45e:	d1be      	bne.n	800a3de <_printf_float+0x32a>
 800a460:	e689      	b.n	800a176 <_printf_float+0xc2>
 800a462:	9a05      	ldr	r2, [sp, #20]
 800a464:	464b      	mov	r3, r9
 800a466:	4442      	add	r2, r8
 800a468:	4631      	mov	r1, r6
 800a46a:	4628      	mov	r0, r5
 800a46c:	47b8      	blx	r7
 800a46e:	3001      	adds	r0, #1
 800a470:	d1c1      	bne.n	800a3f6 <_printf_float+0x342>
 800a472:	e680      	b.n	800a176 <_printf_float+0xc2>
 800a474:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 800a476:	2a01      	cmp	r2, #1
 800a478:	dc01      	bgt.n	800a47e <_printf_float+0x3ca>
 800a47a:	07db      	lsls	r3, r3, #31
 800a47c:	d538      	bpl.n	800a4f0 <_printf_float+0x43c>
 800a47e:	2301      	movs	r3, #1
 800a480:	4642      	mov	r2, r8
 800a482:	4631      	mov	r1, r6
 800a484:	4628      	mov	r0, r5
 800a486:	47b8      	blx	r7
 800a488:	3001      	adds	r0, #1
 800a48a:	f43f ae74 	beq.w	800a176 <_printf_float+0xc2>
 800a48e:	ee18 3a10 	vmov	r3, s16
 800a492:	4652      	mov	r2, sl
 800a494:	4631      	mov	r1, r6
 800a496:	4628      	mov	r0, r5
 800a498:	47b8      	blx	r7
 800a49a:	3001      	adds	r0, #1
 800a49c:	f43f ae6b 	beq.w	800a176 <_printf_float+0xc2>
 800a4a0:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 800a4a4:	2200      	movs	r2, #0
 800a4a6:	2300      	movs	r3, #0
 800a4a8:	f7f6 fb0e 	bl	8000ac8 <__aeabi_dcmpeq>
 800a4ac:	b9d8      	cbnz	r0, 800a4e6 <_printf_float+0x432>
 800a4ae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4b0:	f108 0201 	add.w	r2, r8, #1
 800a4b4:	3b01      	subs	r3, #1
 800a4b6:	4631      	mov	r1, r6
 800a4b8:	4628      	mov	r0, r5
 800a4ba:	47b8      	blx	r7
 800a4bc:	3001      	adds	r0, #1
 800a4be:	d10e      	bne.n	800a4de <_printf_float+0x42a>
 800a4c0:	e659      	b.n	800a176 <_printf_float+0xc2>
 800a4c2:	2301      	movs	r3, #1
 800a4c4:	4652      	mov	r2, sl
 800a4c6:	4631      	mov	r1, r6
 800a4c8:	4628      	mov	r0, r5
 800a4ca:	47b8      	blx	r7
 800a4cc:	3001      	adds	r0, #1
 800a4ce:	f43f ae52 	beq.w	800a176 <_printf_float+0xc2>
 800a4d2:	f108 0801 	add.w	r8, r8, #1
 800a4d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a4d8:	3b01      	subs	r3, #1
 800a4da:	4543      	cmp	r3, r8
 800a4dc:	dcf1      	bgt.n	800a4c2 <_printf_float+0x40e>
 800a4de:	464b      	mov	r3, r9
 800a4e0:	f104 0250 	add.w	r2, r4, #80	; 0x50
 800a4e4:	e6dc      	b.n	800a2a0 <_printf_float+0x1ec>
 800a4e6:	f04f 0800 	mov.w	r8, #0
 800a4ea:	f104 0a1a 	add.w	sl, r4, #26
 800a4ee:	e7f2      	b.n	800a4d6 <_printf_float+0x422>
 800a4f0:	2301      	movs	r3, #1
 800a4f2:	4642      	mov	r2, r8
 800a4f4:	e7df      	b.n	800a4b6 <_printf_float+0x402>
 800a4f6:	2301      	movs	r3, #1
 800a4f8:	464a      	mov	r2, r9
 800a4fa:	4631      	mov	r1, r6
 800a4fc:	4628      	mov	r0, r5
 800a4fe:	47b8      	blx	r7
 800a500:	3001      	adds	r0, #1
 800a502:	f43f ae38 	beq.w	800a176 <_printf_float+0xc2>
 800a506:	f108 0801 	add.w	r8, r8, #1
 800a50a:	68e3      	ldr	r3, [r4, #12]
 800a50c:	990b      	ldr	r1, [sp, #44]	; 0x2c
 800a50e:	1a5b      	subs	r3, r3, r1
 800a510:	4543      	cmp	r3, r8
 800a512:	dcf0      	bgt.n	800a4f6 <_printf_float+0x442>
 800a514:	e6fa      	b.n	800a30c <_printf_float+0x258>
 800a516:	f04f 0800 	mov.w	r8, #0
 800a51a:	f104 0919 	add.w	r9, r4, #25
 800a51e:	e7f4      	b.n	800a50a <_printf_float+0x456>

0800a520 <_printf_common>:
 800a520:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a524:	4616      	mov	r6, r2
 800a526:	4699      	mov	r9, r3
 800a528:	688a      	ldr	r2, [r1, #8]
 800a52a:	690b      	ldr	r3, [r1, #16]
 800a52c:	f8dd 8020 	ldr.w	r8, [sp, #32]
 800a530:	4293      	cmp	r3, r2
 800a532:	bfb8      	it	lt
 800a534:	4613      	movlt	r3, r2
 800a536:	6033      	str	r3, [r6, #0]
 800a538:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 800a53c:	4607      	mov	r7, r0
 800a53e:	460c      	mov	r4, r1
 800a540:	b10a      	cbz	r2, 800a546 <_printf_common+0x26>
 800a542:	3301      	adds	r3, #1
 800a544:	6033      	str	r3, [r6, #0]
 800a546:	6823      	ldr	r3, [r4, #0]
 800a548:	0699      	lsls	r1, r3, #26
 800a54a:	bf42      	ittt	mi
 800a54c:	6833      	ldrmi	r3, [r6, #0]
 800a54e:	3302      	addmi	r3, #2
 800a550:	6033      	strmi	r3, [r6, #0]
 800a552:	6825      	ldr	r5, [r4, #0]
 800a554:	f015 0506 	ands.w	r5, r5, #6
 800a558:	d106      	bne.n	800a568 <_printf_common+0x48>
 800a55a:	f104 0a19 	add.w	sl, r4, #25
 800a55e:	68e3      	ldr	r3, [r4, #12]
 800a560:	6832      	ldr	r2, [r6, #0]
 800a562:	1a9b      	subs	r3, r3, r2
 800a564:	42ab      	cmp	r3, r5
 800a566:	dc26      	bgt.n	800a5b6 <_printf_common+0x96>
 800a568:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 800a56c:	1e13      	subs	r3, r2, #0
 800a56e:	6822      	ldr	r2, [r4, #0]
 800a570:	bf18      	it	ne
 800a572:	2301      	movne	r3, #1
 800a574:	0692      	lsls	r2, r2, #26
 800a576:	d42b      	bmi.n	800a5d0 <_printf_common+0xb0>
 800a578:	f104 0243 	add.w	r2, r4, #67	; 0x43
 800a57c:	4649      	mov	r1, r9
 800a57e:	4638      	mov	r0, r7
 800a580:	47c0      	blx	r8
 800a582:	3001      	adds	r0, #1
 800a584:	d01e      	beq.n	800a5c4 <_printf_common+0xa4>
 800a586:	6823      	ldr	r3, [r4, #0]
 800a588:	68e5      	ldr	r5, [r4, #12]
 800a58a:	6832      	ldr	r2, [r6, #0]
 800a58c:	f003 0306 	and.w	r3, r3, #6
 800a590:	2b04      	cmp	r3, #4
 800a592:	bf08      	it	eq
 800a594:	1aad      	subeq	r5, r5, r2
 800a596:	68a3      	ldr	r3, [r4, #8]
 800a598:	6922      	ldr	r2, [r4, #16]
 800a59a:	bf0c      	ite	eq
 800a59c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 800a5a0:	2500      	movne	r5, #0
 800a5a2:	4293      	cmp	r3, r2
 800a5a4:	bfc4      	itt	gt
 800a5a6:	1a9b      	subgt	r3, r3, r2
 800a5a8:	18ed      	addgt	r5, r5, r3
 800a5aa:	2600      	movs	r6, #0
 800a5ac:	341a      	adds	r4, #26
 800a5ae:	42b5      	cmp	r5, r6
 800a5b0:	d11a      	bne.n	800a5e8 <_printf_common+0xc8>
 800a5b2:	2000      	movs	r0, #0
 800a5b4:	e008      	b.n	800a5c8 <_printf_common+0xa8>
 800a5b6:	2301      	movs	r3, #1
 800a5b8:	4652      	mov	r2, sl
 800a5ba:	4649      	mov	r1, r9
 800a5bc:	4638      	mov	r0, r7
 800a5be:	47c0      	blx	r8
 800a5c0:	3001      	adds	r0, #1
 800a5c2:	d103      	bne.n	800a5cc <_printf_common+0xac>
 800a5c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a5c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5cc:	3501      	adds	r5, #1
 800a5ce:	e7c6      	b.n	800a55e <_printf_common+0x3e>
 800a5d0:	18e1      	adds	r1, r4, r3
 800a5d2:	1c5a      	adds	r2, r3, #1
 800a5d4:	2030      	movs	r0, #48	; 0x30
 800a5d6:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 800a5da:	4422      	add	r2, r4
 800a5dc:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 800a5e0:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 800a5e4:	3302      	adds	r3, #2
 800a5e6:	e7c7      	b.n	800a578 <_printf_common+0x58>
 800a5e8:	2301      	movs	r3, #1
 800a5ea:	4622      	mov	r2, r4
 800a5ec:	4649      	mov	r1, r9
 800a5ee:	4638      	mov	r0, r7
 800a5f0:	47c0      	blx	r8
 800a5f2:	3001      	adds	r0, #1
 800a5f4:	d0e6      	beq.n	800a5c4 <_printf_common+0xa4>
 800a5f6:	3601      	adds	r6, #1
 800a5f8:	e7d9      	b.n	800a5ae <_printf_common+0x8e>
	...

0800a5fc <_printf_i>:
 800a5fc:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800a600:	7e0f      	ldrb	r7, [r1, #24]
 800a602:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 800a604:	2f78      	cmp	r7, #120	; 0x78
 800a606:	4691      	mov	r9, r2
 800a608:	4680      	mov	r8, r0
 800a60a:	460c      	mov	r4, r1
 800a60c:	469a      	mov	sl, r3
 800a60e:	f101 0243 	add.w	r2, r1, #67	; 0x43
 800a612:	d807      	bhi.n	800a624 <_printf_i+0x28>
 800a614:	2f62      	cmp	r7, #98	; 0x62
 800a616:	d80a      	bhi.n	800a62e <_printf_i+0x32>
 800a618:	2f00      	cmp	r7, #0
 800a61a:	f000 80d8 	beq.w	800a7ce <_printf_i+0x1d2>
 800a61e:	2f58      	cmp	r7, #88	; 0x58
 800a620:	f000 80a3 	beq.w	800a76a <_printf_i+0x16e>
 800a624:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a628:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 800a62c:	e03a      	b.n	800a6a4 <_printf_i+0xa8>
 800a62e:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 800a632:	2b15      	cmp	r3, #21
 800a634:	d8f6      	bhi.n	800a624 <_printf_i+0x28>
 800a636:	a101      	add	r1, pc, #4	; (adr r1, 800a63c <_printf_i+0x40>)
 800a638:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 800a63c:	0800a695 	.word	0x0800a695
 800a640:	0800a6a9 	.word	0x0800a6a9
 800a644:	0800a625 	.word	0x0800a625
 800a648:	0800a625 	.word	0x0800a625
 800a64c:	0800a625 	.word	0x0800a625
 800a650:	0800a625 	.word	0x0800a625
 800a654:	0800a6a9 	.word	0x0800a6a9
 800a658:	0800a625 	.word	0x0800a625
 800a65c:	0800a625 	.word	0x0800a625
 800a660:	0800a625 	.word	0x0800a625
 800a664:	0800a625 	.word	0x0800a625
 800a668:	0800a7b5 	.word	0x0800a7b5
 800a66c:	0800a6d9 	.word	0x0800a6d9
 800a670:	0800a797 	.word	0x0800a797
 800a674:	0800a625 	.word	0x0800a625
 800a678:	0800a625 	.word	0x0800a625
 800a67c:	0800a7d7 	.word	0x0800a7d7
 800a680:	0800a625 	.word	0x0800a625
 800a684:	0800a6d9 	.word	0x0800a6d9
 800a688:	0800a625 	.word	0x0800a625
 800a68c:	0800a625 	.word	0x0800a625
 800a690:	0800a79f 	.word	0x0800a79f
 800a694:	682b      	ldr	r3, [r5, #0]
 800a696:	1d1a      	adds	r2, r3, #4
 800a698:	681b      	ldr	r3, [r3, #0]
 800a69a:	602a      	str	r2, [r5, #0]
 800a69c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 800a6a0:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 800a6a4:	2301      	movs	r3, #1
 800a6a6:	e0a3      	b.n	800a7f0 <_printf_i+0x1f4>
 800a6a8:	6820      	ldr	r0, [r4, #0]
 800a6aa:	6829      	ldr	r1, [r5, #0]
 800a6ac:	0606      	lsls	r6, r0, #24
 800a6ae:	f101 0304 	add.w	r3, r1, #4
 800a6b2:	d50a      	bpl.n	800a6ca <_printf_i+0xce>
 800a6b4:	680e      	ldr	r6, [r1, #0]
 800a6b6:	602b      	str	r3, [r5, #0]
 800a6b8:	2e00      	cmp	r6, #0
 800a6ba:	da03      	bge.n	800a6c4 <_printf_i+0xc8>
 800a6bc:	232d      	movs	r3, #45	; 0x2d
 800a6be:	4276      	negs	r6, r6
 800a6c0:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a6c4:	485e      	ldr	r0, [pc, #376]	; (800a840 <_printf_i+0x244>)
 800a6c6:	230a      	movs	r3, #10
 800a6c8:	e019      	b.n	800a6fe <_printf_i+0x102>
 800a6ca:	680e      	ldr	r6, [r1, #0]
 800a6cc:	602b      	str	r3, [r5, #0]
 800a6ce:	f010 0f40 	tst.w	r0, #64	; 0x40
 800a6d2:	bf18      	it	ne
 800a6d4:	b236      	sxthne	r6, r6
 800a6d6:	e7ef      	b.n	800a6b8 <_printf_i+0xbc>
 800a6d8:	682b      	ldr	r3, [r5, #0]
 800a6da:	6820      	ldr	r0, [r4, #0]
 800a6dc:	1d19      	adds	r1, r3, #4
 800a6de:	6029      	str	r1, [r5, #0]
 800a6e0:	0601      	lsls	r1, r0, #24
 800a6e2:	d501      	bpl.n	800a6e8 <_printf_i+0xec>
 800a6e4:	681e      	ldr	r6, [r3, #0]
 800a6e6:	e002      	b.n	800a6ee <_printf_i+0xf2>
 800a6e8:	0646      	lsls	r6, r0, #25
 800a6ea:	d5fb      	bpl.n	800a6e4 <_printf_i+0xe8>
 800a6ec:	881e      	ldrh	r6, [r3, #0]
 800a6ee:	4854      	ldr	r0, [pc, #336]	; (800a840 <_printf_i+0x244>)
 800a6f0:	2f6f      	cmp	r7, #111	; 0x6f
 800a6f2:	bf0c      	ite	eq
 800a6f4:	2308      	moveq	r3, #8
 800a6f6:	230a      	movne	r3, #10
 800a6f8:	2100      	movs	r1, #0
 800a6fa:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 800a6fe:	6865      	ldr	r5, [r4, #4]
 800a700:	60a5      	str	r5, [r4, #8]
 800a702:	2d00      	cmp	r5, #0
 800a704:	bfa2      	ittt	ge
 800a706:	6821      	ldrge	r1, [r4, #0]
 800a708:	f021 0104 	bicge.w	r1, r1, #4
 800a70c:	6021      	strge	r1, [r4, #0]
 800a70e:	b90e      	cbnz	r6, 800a714 <_printf_i+0x118>
 800a710:	2d00      	cmp	r5, #0
 800a712:	d04d      	beq.n	800a7b0 <_printf_i+0x1b4>
 800a714:	4615      	mov	r5, r2
 800a716:	fbb6 f1f3 	udiv	r1, r6, r3
 800a71a:	fb03 6711 	mls	r7, r3, r1, r6
 800a71e:	5dc7      	ldrb	r7, [r0, r7]
 800a720:	f805 7d01 	strb.w	r7, [r5, #-1]!
 800a724:	4637      	mov	r7, r6
 800a726:	42bb      	cmp	r3, r7
 800a728:	460e      	mov	r6, r1
 800a72a:	d9f4      	bls.n	800a716 <_printf_i+0x11a>
 800a72c:	2b08      	cmp	r3, #8
 800a72e:	d10b      	bne.n	800a748 <_printf_i+0x14c>
 800a730:	6823      	ldr	r3, [r4, #0]
 800a732:	07de      	lsls	r6, r3, #31
 800a734:	d508      	bpl.n	800a748 <_printf_i+0x14c>
 800a736:	6923      	ldr	r3, [r4, #16]
 800a738:	6861      	ldr	r1, [r4, #4]
 800a73a:	4299      	cmp	r1, r3
 800a73c:	bfde      	ittt	le
 800a73e:	2330      	movle	r3, #48	; 0x30
 800a740:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a744:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a748:	1b52      	subs	r2, r2, r5
 800a74a:	6122      	str	r2, [r4, #16]
 800a74c:	f8cd a000 	str.w	sl, [sp]
 800a750:	464b      	mov	r3, r9
 800a752:	aa03      	add	r2, sp, #12
 800a754:	4621      	mov	r1, r4
 800a756:	4640      	mov	r0, r8
 800a758:	f7ff fee2 	bl	800a520 <_printf_common>
 800a75c:	3001      	adds	r0, #1
 800a75e:	d14c      	bne.n	800a7fa <_printf_i+0x1fe>
 800a760:	f04f 30ff 	mov.w	r0, #4294967295
 800a764:	b004      	add	sp, #16
 800a766:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a76a:	4835      	ldr	r0, [pc, #212]	; (800a840 <_printf_i+0x244>)
 800a76c:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a770:	6829      	ldr	r1, [r5, #0]
 800a772:	6823      	ldr	r3, [r4, #0]
 800a774:	f851 6b04 	ldr.w	r6, [r1], #4
 800a778:	6029      	str	r1, [r5, #0]
 800a77a:	061d      	lsls	r5, r3, #24
 800a77c:	d514      	bpl.n	800a7a8 <_printf_i+0x1ac>
 800a77e:	07df      	lsls	r7, r3, #31
 800a780:	bf44      	itt	mi
 800a782:	f043 0320 	orrmi.w	r3, r3, #32
 800a786:	6023      	strmi	r3, [r4, #0]
 800a788:	b91e      	cbnz	r6, 800a792 <_printf_i+0x196>
 800a78a:	6823      	ldr	r3, [r4, #0]
 800a78c:	f023 0320 	bic.w	r3, r3, #32
 800a790:	6023      	str	r3, [r4, #0]
 800a792:	2310      	movs	r3, #16
 800a794:	e7b0      	b.n	800a6f8 <_printf_i+0xfc>
 800a796:	6823      	ldr	r3, [r4, #0]
 800a798:	f043 0320 	orr.w	r3, r3, #32
 800a79c:	6023      	str	r3, [r4, #0]
 800a79e:	2378      	movs	r3, #120	; 0x78
 800a7a0:	4828      	ldr	r0, [pc, #160]	; (800a844 <_printf_i+0x248>)
 800a7a2:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a7a6:	e7e3      	b.n	800a770 <_printf_i+0x174>
 800a7a8:	0659      	lsls	r1, r3, #25
 800a7aa:	bf48      	it	mi
 800a7ac:	b2b6      	uxthmi	r6, r6
 800a7ae:	e7e6      	b.n	800a77e <_printf_i+0x182>
 800a7b0:	4615      	mov	r5, r2
 800a7b2:	e7bb      	b.n	800a72c <_printf_i+0x130>
 800a7b4:	682b      	ldr	r3, [r5, #0]
 800a7b6:	6826      	ldr	r6, [r4, #0]
 800a7b8:	6961      	ldr	r1, [r4, #20]
 800a7ba:	1d18      	adds	r0, r3, #4
 800a7bc:	6028      	str	r0, [r5, #0]
 800a7be:	0635      	lsls	r5, r6, #24
 800a7c0:	681b      	ldr	r3, [r3, #0]
 800a7c2:	d501      	bpl.n	800a7c8 <_printf_i+0x1cc>
 800a7c4:	6019      	str	r1, [r3, #0]
 800a7c6:	e002      	b.n	800a7ce <_printf_i+0x1d2>
 800a7c8:	0670      	lsls	r0, r6, #25
 800a7ca:	d5fb      	bpl.n	800a7c4 <_printf_i+0x1c8>
 800a7cc:	8019      	strh	r1, [r3, #0]
 800a7ce:	2300      	movs	r3, #0
 800a7d0:	6123      	str	r3, [r4, #16]
 800a7d2:	4615      	mov	r5, r2
 800a7d4:	e7ba      	b.n	800a74c <_printf_i+0x150>
 800a7d6:	682b      	ldr	r3, [r5, #0]
 800a7d8:	1d1a      	adds	r2, r3, #4
 800a7da:	602a      	str	r2, [r5, #0]
 800a7dc:	681d      	ldr	r5, [r3, #0]
 800a7de:	6862      	ldr	r2, [r4, #4]
 800a7e0:	2100      	movs	r1, #0
 800a7e2:	4628      	mov	r0, r5
 800a7e4:	f7f5 fcfc 	bl	80001e0 <memchr>
 800a7e8:	b108      	cbz	r0, 800a7ee <_printf_i+0x1f2>
 800a7ea:	1b40      	subs	r0, r0, r5
 800a7ec:	6060      	str	r0, [r4, #4]
 800a7ee:	6863      	ldr	r3, [r4, #4]
 800a7f0:	6123      	str	r3, [r4, #16]
 800a7f2:	2300      	movs	r3, #0
 800a7f4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a7f8:	e7a8      	b.n	800a74c <_printf_i+0x150>
 800a7fa:	6923      	ldr	r3, [r4, #16]
 800a7fc:	462a      	mov	r2, r5
 800a7fe:	4649      	mov	r1, r9
 800a800:	4640      	mov	r0, r8
 800a802:	47d0      	blx	sl
 800a804:	3001      	adds	r0, #1
 800a806:	d0ab      	beq.n	800a760 <_printf_i+0x164>
 800a808:	6823      	ldr	r3, [r4, #0]
 800a80a:	079b      	lsls	r3, r3, #30
 800a80c:	d413      	bmi.n	800a836 <_printf_i+0x23a>
 800a80e:	68e0      	ldr	r0, [r4, #12]
 800a810:	9b03      	ldr	r3, [sp, #12]
 800a812:	4298      	cmp	r0, r3
 800a814:	bfb8      	it	lt
 800a816:	4618      	movlt	r0, r3
 800a818:	e7a4      	b.n	800a764 <_printf_i+0x168>
 800a81a:	2301      	movs	r3, #1
 800a81c:	4632      	mov	r2, r6
 800a81e:	4649      	mov	r1, r9
 800a820:	4640      	mov	r0, r8
 800a822:	47d0      	blx	sl
 800a824:	3001      	adds	r0, #1
 800a826:	d09b      	beq.n	800a760 <_printf_i+0x164>
 800a828:	3501      	adds	r5, #1
 800a82a:	68e3      	ldr	r3, [r4, #12]
 800a82c:	9903      	ldr	r1, [sp, #12]
 800a82e:	1a5b      	subs	r3, r3, r1
 800a830:	42ab      	cmp	r3, r5
 800a832:	dcf2      	bgt.n	800a81a <_printf_i+0x21e>
 800a834:	e7eb      	b.n	800a80e <_printf_i+0x212>
 800a836:	2500      	movs	r5, #0
 800a838:	f104 0619 	add.w	r6, r4, #25
 800a83c:	e7f5      	b.n	800a82a <_printf_i+0x22e>
 800a83e:	bf00      	nop
 800a840:	0800f9ba 	.word	0x0800f9ba
 800a844:	0800f9cb 	.word	0x0800f9cb

0800a848 <_scanf_float>:
 800a848:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a84c:	b087      	sub	sp, #28
 800a84e:	4617      	mov	r7, r2
 800a850:	9303      	str	r3, [sp, #12]
 800a852:	688b      	ldr	r3, [r1, #8]
 800a854:	1e5a      	subs	r2, r3, #1
 800a856:	f5b2 7fae 	cmp.w	r2, #348	; 0x15c
 800a85a:	bf83      	ittte	hi
 800a85c:	f46f 75ae 	mvnhi.w	r5, #348	; 0x15c
 800a860:	195b      	addhi	r3, r3, r5
 800a862:	9302      	strhi	r3, [sp, #8]
 800a864:	2300      	movls	r3, #0
 800a866:	bf86      	itte	hi
 800a868:	f240 135d 	movwhi	r3, #349	; 0x15d
 800a86c:	608b      	strhi	r3, [r1, #8]
 800a86e:	9302      	strls	r3, [sp, #8]
 800a870:	680b      	ldr	r3, [r1, #0]
 800a872:	468b      	mov	fp, r1
 800a874:	2500      	movs	r5, #0
 800a876:	f443 63f0 	orr.w	r3, r3, #1920	; 0x780
 800a87a:	f84b 3b1c 	str.w	r3, [fp], #28
 800a87e:	e9cd 5504 	strd	r5, r5, [sp, #16]
 800a882:	4680      	mov	r8, r0
 800a884:	460c      	mov	r4, r1
 800a886:	465e      	mov	r6, fp
 800a888:	46aa      	mov	sl, r5
 800a88a:	46a9      	mov	r9, r5
 800a88c:	9501      	str	r5, [sp, #4]
 800a88e:	68a2      	ldr	r2, [r4, #8]
 800a890:	b152      	cbz	r2, 800a8a8 <_scanf_float+0x60>
 800a892:	683b      	ldr	r3, [r7, #0]
 800a894:	781b      	ldrb	r3, [r3, #0]
 800a896:	2b4e      	cmp	r3, #78	; 0x4e
 800a898:	d864      	bhi.n	800a964 <_scanf_float+0x11c>
 800a89a:	2b40      	cmp	r3, #64	; 0x40
 800a89c:	d83c      	bhi.n	800a918 <_scanf_float+0xd0>
 800a89e:	f1a3 012b 	sub.w	r1, r3, #43	; 0x2b
 800a8a2:	b2c8      	uxtb	r0, r1
 800a8a4:	280e      	cmp	r0, #14
 800a8a6:	d93a      	bls.n	800a91e <_scanf_float+0xd6>
 800a8a8:	f1b9 0f00 	cmp.w	r9, #0
 800a8ac:	d003      	beq.n	800a8b6 <_scanf_float+0x6e>
 800a8ae:	6823      	ldr	r3, [r4, #0]
 800a8b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 800a8b4:	6023      	str	r3, [r4, #0]
 800a8b6:	f10a 3aff 	add.w	sl, sl, #4294967295
 800a8ba:	f1ba 0f01 	cmp.w	sl, #1
 800a8be:	f200 8113 	bhi.w	800aae8 <_scanf_float+0x2a0>
 800a8c2:	455e      	cmp	r6, fp
 800a8c4:	f200 8105 	bhi.w	800aad2 <_scanf_float+0x28a>
 800a8c8:	2501      	movs	r5, #1
 800a8ca:	4628      	mov	r0, r5
 800a8cc:	b007      	add	sp, #28
 800a8ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a8d2:	f1a3 0261 	sub.w	r2, r3, #97	; 0x61
 800a8d6:	2a0d      	cmp	r2, #13
 800a8d8:	d8e6      	bhi.n	800a8a8 <_scanf_float+0x60>
 800a8da:	a101      	add	r1, pc, #4	; (adr r1, 800a8e0 <_scanf_float+0x98>)
 800a8dc:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800a8e0:	0800aa1f 	.word	0x0800aa1f
 800a8e4:	0800a8a9 	.word	0x0800a8a9
 800a8e8:	0800a8a9 	.word	0x0800a8a9
 800a8ec:	0800a8a9 	.word	0x0800a8a9
 800a8f0:	0800aa7f 	.word	0x0800aa7f
 800a8f4:	0800aa57 	.word	0x0800aa57
 800a8f8:	0800a8a9 	.word	0x0800a8a9
 800a8fc:	0800a8a9 	.word	0x0800a8a9
 800a900:	0800aa2d 	.word	0x0800aa2d
 800a904:	0800a8a9 	.word	0x0800a8a9
 800a908:	0800a8a9 	.word	0x0800a8a9
 800a90c:	0800a8a9 	.word	0x0800a8a9
 800a910:	0800a8a9 	.word	0x0800a8a9
 800a914:	0800a9e5 	.word	0x0800a9e5
 800a918:	f1a3 0241 	sub.w	r2, r3, #65	; 0x41
 800a91c:	e7db      	b.n	800a8d6 <_scanf_float+0x8e>
 800a91e:	290e      	cmp	r1, #14
 800a920:	d8c2      	bhi.n	800a8a8 <_scanf_float+0x60>
 800a922:	a001      	add	r0, pc, #4	; (adr r0, 800a928 <_scanf_float+0xe0>)
 800a924:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 800a928:	0800a9d7 	.word	0x0800a9d7
 800a92c:	0800a8a9 	.word	0x0800a8a9
 800a930:	0800a9d7 	.word	0x0800a9d7
 800a934:	0800aa6b 	.word	0x0800aa6b
 800a938:	0800a8a9 	.word	0x0800a8a9
 800a93c:	0800a985 	.word	0x0800a985
 800a940:	0800a9c1 	.word	0x0800a9c1
 800a944:	0800a9c1 	.word	0x0800a9c1
 800a948:	0800a9c1 	.word	0x0800a9c1
 800a94c:	0800a9c1 	.word	0x0800a9c1
 800a950:	0800a9c1 	.word	0x0800a9c1
 800a954:	0800a9c1 	.word	0x0800a9c1
 800a958:	0800a9c1 	.word	0x0800a9c1
 800a95c:	0800a9c1 	.word	0x0800a9c1
 800a960:	0800a9c1 	.word	0x0800a9c1
 800a964:	2b6e      	cmp	r3, #110	; 0x6e
 800a966:	d809      	bhi.n	800a97c <_scanf_float+0x134>
 800a968:	2b60      	cmp	r3, #96	; 0x60
 800a96a:	d8b2      	bhi.n	800a8d2 <_scanf_float+0x8a>
 800a96c:	2b54      	cmp	r3, #84	; 0x54
 800a96e:	d077      	beq.n	800aa60 <_scanf_float+0x218>
 800a970:	2b59      	cmp	r3, #89	; 0x59
 800a972:	d199      	bne.n	800a8a8 <_scanf_float+0x60>
 800a974:	2d07      	cmp	r5, #7
 800a976:	d197      	bne.n	800a8a8 <_scanf_float+0x60>
 800a978:	2508      	movs	r5, #8
 800a97a:	e029      	b.n	800a9d0 <_scanf_float+0x188>
 800a97c:	2b74      	cmp	r3, #116	; 0x74
 800a97e:	d06f      	beq.n	800aa60 <_scanf_float+0x218>
 800a980:	2b79      	cmp	r3, #121	; 0x79
 800a982:	e7f6      	b.n	800a972 <_scanf_float+0x12a>
 800a984:	6821      	ldr	r1, [r4, #0]
 800a986:	05c8      	lsls	r0, r1, #23
 800a988:	d51a      	bpl.n	800a9c0 <_scanf_float+0x178>
 800a98a:	9b02      	ldr	r3, [sp, #8]
 800a98c:	f021 0180 	bic.w	r1, r1, #128	; 0x80
 800a990:	6021      	str	r1, [r4, #0]
 800a992:	f109 0901 	add.w	r9, r9, #1
 800a996:	b11b      	cbz	r3, 800a9a0 <_scanf_float+0x158>
 800a998:	3b01      	subs	r3, #1
 800a99a:	3201      	adds	r2, #1
 800a99c:	9302      	str	r3, [sp, #8]
 800a99e:	60a2      	str	r2, [r4, #8]
 800a9a0:	68a3      	ldr	r3, [r4, #8]
 800a9a2:	3b01      	subs	r3, #1
 800a9a4:	60a3      	str	r3, [r4, #8]
 800a9a6:	6923      	ldr	r3, [r4, #16]
 800a9a8:	3301      	adds	r3, #1
 800a9aa:	6123      	str	r3, [r4, #16]
 800a9ac:	687b      	ldr	r3, [r7, #4]
 800a9ae:	3b01      	subs	r3, #1
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	607b      	str	r3, [r7, #4]
 800a9b4:	f340 8084 	ble.w	800aac0 <_scanf_float+0x278>
 800a9b8:	683b      	ldr	r3, [r7, #0]
 800a9ba:	3301      	adds	r3, #1
 800a9bc:	603b      	str	r3, [r7, #0]
 800a9be:	e766      	b.n	800a88e <_scanf_float+0x46>
 800a9c0:	eb1a 0f05 	cmn.w	sl, r5
 800a9c4:	f47f af70 	bne.w	800a8a8 <_scanf_float+0x60>
 800a9c8:	6822      	ldr	r2, [r4, #0]
 800a9ca:	f422 72c0 	bic.w	r2, r2, #384	; 0x180
 800a9ce:	6022      	str	r2, [r4, #0]
 800a9d0:	f806 3b01 	strb.w	r3, [r6], #1
 800a9d4:	e7e4      	b.n	800a9a0 <_scanf_float+0x158>
 800a9d6:	6822      	ldr	r2, [r4, #0]
 800a9d8:	0610      	lsls	r0, r2, #24
 800a9da:	f57f af65 	bpl.w	800a8a8 <_scanf_float+0x60>
 800a9de:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800a9e2:	e7f4      	b.n	800a9ce <_scanf_float+0x186>
 800a9e4:	f1ba 0f00 	cmp.w	sl, #0
 800a9e8:	d10e      	bne.n	800aa08 <_scanf_float+0x1c0>
 800a9ea:	f1b9 0f00 	cmp.w	r9, #0
 800a9ee:	d10e      	bne.n	800aa0e <_scanf_float+0x1c6>
 800a9f0:	6822      	ldr	r2, [r4, #0]
 800a9f2:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800a9f6:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800a9fa:	d108      	bne.n	800aa0e <_scanf_float+0x1c6>
 800a9fc:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa00:	6022      	str	r2, [r4, #0]
 800aa02:	f04f 0a01 	mov.w	sl, #1
 800aa06:	e7e3      	b.n	800a9d0 <_scanf_float+0x188>
 800aa08:	f1ba 0f02 	cmp.w	sl, #2
 800aa0c:	d055      	beq.n	800aaba <_scanf_float+0x272>
 800aa0e:	2d01      	cmp	r5, #1
 800aa10:	d002      	beq.n	800aa18 <_scanf_float+0x1d0>
 800aa12:	2d04      	cmp	r5, #4
 800aa14:	f47f af48 	bne.w	800a8a8 <_scanf_float+0x60>
 800aa18:	3501      	adds	r5, #1
 800aa1a:	b2ed      	uxtb	r5, r5
 800aa1c:	e7d8      	b.n	800a9d0 <_scanf_float+0x188>
 800aa1e:	f1ba 0f01 	cmp.w	sl, #1
 800aa22:	f47f af41 	bne.w	800a8a8 <_scanf_float+0x60>
 800aa26:	f04f 0a02 	mov.w	sl, #2
 800aa2a:	e7d1      	b.n	800a9d0 <_scanf_float+0x188>
 800aa2c:	b97d      	cbnz	r5, 800aa4e <_scanf_float+0x206>
 800aa2e:	f1b9 0f00 	cmp.w	r9, #0
 800aa32:	f47f af3c 	bne.w	800a8ae <_scanf_float+0x66>
 800aa36:	6822      	ldr	r2, [r4, #0]
 800aa38:	f402 61e0 	and.w	r1, r2, #1792	; 0x700
 800aa3c:	f5b1 6fe0 	cmp.w	r1, #1792	; 0x700
 800aa40:	f47f af39 	bne.w	800a8b6 <_scanf_float+0x6e>
 800aa44:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aa48:	6022      	str	r2, [r4, #0]
 800aa4a:	2501      	movs	r5, #1
 800aa4c:	e7c0      	b.n	800a9d0 <_scanf_float+0x188>
 800aa4e:	2d03      	cmp	r5, #3
 800aa50:	d0e2      	beq.n	800aa18 <_scanf_float+0x1d0>
 800aa52:	2d05      	cmp	r5, #5
 800aa54:	e7de      	b.n	800aa14 <_scanf_float+0x1cc>
 800aa56:	2d02      	cmp	r5, #2
 800aa58:	f47f af26 	bne.w	800a8a8 <_scanf_float+0x60>
 800aa5c:	2503      	movs	r5, #3
 800aa5e:	e7b7      	b.n	800a9d0 <_scanf_float+0x188>
 800aa60:	2d06      	cmp	r5, #6
 800aa62:	f47f af21 	bne.w	800a8a8 <_scanf_float+0x60>
 800aa66:	2507      	movs	r5, #7
 800aa68:	e7b2      	b.n	800a9d0 <_scanf_float+0x188>
 800aa6a:	6822      	ldr	r2, [r4, #0]
 800aa6c:	0591      	lsls	r1, r2, #22
 800aa6e:	f57f af1b 	bpl.w	800a8a8 <_scanf_float+0x60>
 800aa72:	f422 7220 	bic.w	r2, r2, #640	; 0x280
 800aa76:	6022      	str	r2, [r4, #0]
 800aa78:	f8cd 9004 	str.w	r9, [sp, #4]
 800aa7c:	e7a8      	b.n	800a9d0 <_scanf_float+0x188>
 800aa7e:	6822      	ldr	r2, [r4, #0]
 800aa80:	f402 61a0 	and.w	r1, r2, #1280	; 0x500
 800aa84:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
 800aa88:	d006      	beq.n	800aa98 <_scanf_float+0x250>
 800aa8a:	0550      	lsls	r0, r2, #21
 800aa8c:	f57f af0c 	bpl.w	800a8a8 <_scanf_float+0x60>
 800aa90:	f1b9 0f00 	cmp.w	r9, #0
 800aa94:	f43f af0f 	beq.w	800a8b6 <_scanf_float+0x6e>
 800aa98:	0591      	lsls	r1, r2, #22
 800aa9a:	bf58      	it	pl
 800aa9c:	9901      	ldrpl	r1, [sp, #4]
 800aa9e:	f422 62f0 	bic.w	r2, r2, #1920	; 0x780
 800aaa2:	bf58      	it	pl
 800aaa4:	eba9 0101 	subpl.w	r1, r9, r1
 800aaa8:	f442 72c0 	orr.w	r2, r2, #384	; 0x180
 800aaac:	bf58      	it	pl
 800aaae:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 800aab2:	6022      	str	r2, [r4, #0]
 800aab4:	f04f 0900 	mov.w	r9, #0
 800aab8:	e78a      	b.n	800a9d0 <_scanf_float+0x188>
 800aaba:	f04f 0a03 	mov.w	sl, #3
 800aabe:	e787      	b.n	800a9d0 <_scanf_float+0x188>
 800aac0:	f8d4 3180 	ldr.w	r3, [r4, #384]	; 0x180
 800aac4:	4639      	mov	r1, r7
 800aac6:	4640      	mov	r0, r8
 800aac8:	4798      	blx	r3
 800aaca:	2800      	cmp	r0, #0
 800aacc:	f43f aedf 	beq.w	800a88e <_scanf_float+0x46>
 800aad0:	e6ea      	b.n	800a8a8 <_scanf_float+0x60>
 800aad2:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aad6:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800aada:	463a      	mov	r2, r7
 800aadc:	4640      	mov	r0, r8
 800aade:	4798      	blx	r3
 800aae0:	6923      	ldr	r3, [r4, #16]
 800aae2:	3b01      	subs	r3, #1
 800aae4:	6123      	str	r3, [r4, #16]
 800aae6:	e6ec      	b.n	800a8c2 <_scanf_float+0x7a>
 800aae8:	1e6b      	subs	r3, r5, #1
 800aaea:	2b06      	cmp	r3, #6
 800aaec:	d825      	bhi.n	800ab3a <_scanf_float+0x2f2>
 800aaee:	2d02      	cmp	r5, #2
 800aaf0:	d836      	bhi.n	800ab60 <_scanf_float+0x318>
 800aaf2:	455e      	cmp	r6, fp
 800aaf4:	f67f aee8 	bls.w	800a8c8 <_scanf_float+0x80>
 800aaf8:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800aafc:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab00:	463a      	mov	r2, r7
 800ab02:	4640      	mov	r0, r8
 800ab04:	4798      	blx	r3
 800ab06:	6923      	ldr	r3, [r4, #16]
 800ab08:	3b01      	subs	r3, #1
 800ab0a:	6123      	str	r3, [r4, #16]
 800ab0c:	e7f1      	b.n	800aaf2 <_scanf_float+0x2aa>
 800ab0e:	9802      	ldr	r0, [sp, #8]
 800ab10:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab14:	f810 1d01 	ldrb.w	r1, [r0, #-1]!
 800ab18:	9002      	str	r0, [sp, #8]
 800ab1a:	463a      	mov	r2, r7
 800ab1c:	4640      	mov	r0, r8
 800ab1e:	4798      	blx	r3
 800ab20:	6923      	ldr	r3, [r4, #16]
 800ab22:	3b01      	subs	r3, #1
 800ab24:	6123      	str	r3, [r4, #16]
 800ab26:	f10a 3aff 	add.w	sl, sl, #4294967295
 800ab2a:	fa5f fa8a 	uxtb.w	sl, sl
 800ab2e:	f1ba 0f02 	cmp.w	sl, #2
 800ab32:	d1ec      	bne.n	800ab0e <_scanf_float+0x2c6>
 800ab34:	3d03      	subs	r5, #3
 800ab36:	b2ed      	uxtb	r5, r5
 800ab38:	1b76      	subs	r6, r6, r5
 800ab3a:	6823      	ldr	r3, [r4, #0]
 800ab3c:	05da      	lsls	r2, r3, #23
 800ab3e:	d52f      	bpl.n	800aba0 <_scanf_float+0x358>
 800ab40:	055b      	lsls	r3, r3, #21
 800ab42:	d510      	bpl.n	800ab66 <_scanf_float+0x31e>
 800ab44:	455e      	cmp	r6, fp
 800ab46:	f67f aebf 	bls.w	800a8c8 <_scanf_float+0x80>
 800ab4a:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab4e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800ab52:	463a      	mov	r2, r7
 800ab54:	4640      	mov	r0, r8
 800ab56:	4798      	blx	r3
 800ab58:	6923      	ldr	r3, [r4, #16]
 800ab5a:	3b01      	subs	r3, #1
 800ab5c:	6123      	str	r3, [r4, #16]
 800ab5e:	e7f1      	b.n	800ab44 <_scanf_float+0x2fc>
 800ab60:	46aa      	mov	sl, r5
 800ab62:	9602      	str	r6, [sp, #8]
 800ab64:	e7df      	b.n	800ab26 <_scanf_float+0x2de>
 800ab66:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800ab6a:	6923      	ldr	r3, [r4, #16]
 800ab6c:	2965      	cmp	r1, #101	; 0x65
 800ab6e:	f103 33ff 	add.w	r3, r3, #4294967295
 800ab72:	f106 35ff 	add.w	r5, r6, #4294967295
 800ab76:	6123      	str	r3, [r4, #16]
 800ab78:	d00c      	beq.n	800ab94 <_scanf_float+0x34c>
 800ab7a:	2945      	cmp	r1, #69	; 0x45
 800ab7c:	d00a      	beq.n	800ab94 <_scanf_float+0x34c>
 800ab7e:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab82:	463a      	mov	r2, r7
 800ab84:	4640      	mov	r0, r8
 800ab86:	4798      	blx	r3
 800ab88:	6923      	ldr	r3, [r4, #16]
 800ab8a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800ab8e:	3b01      	subs	r3, #1
 800ab90:	1eb5      	subs	r5, r6, #2
 800ab92:	6123      	str	r3, [r4, #16]
 800ab94:	f8d4 317c 	ldr.w	r3, [r4, #380]	; 0x17c
 800ab98:	463a      	mov	r2, r7
 800ab9a:	4640      	mov	r0, r8
 800ab9c:	4798      	blx	r3
 800ab9e:	462e      	mov	r6, r5
 800aba0:	6825      	ldr	r5, [r4, #0]
 800aba2:	f015 0510 	ands.w	r5, r5, #16
 800aba6:	d159      	bne.n	800ac5c <_scanf_float+0x414>
 800aba8:	7035      	strb	r5, [r6, #0]
 800abaa:	6823      	ldr	r3, [r4, #0]
 800abac:	f403 63c0 	and.w	r3, r3, #1536	; 0x600
 800abb0:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800abb4:	d11b      	bne.n	800abee <_scanf_float+0x3a6>
 800abb6:	9b01      	ldr	r3, [sp, #4]
 800abb8:	454b      	cmp	r3, r9
 800abba:	eba3 0209 	sub.w	r2, r3, r9
 800abbe:	d123      	bne.n	800ac08 <_scanf_float+0x3c0>
 800abc0:	2200      	movs	r2, #0
 800abc2:	4659      	mov	r1, fp
 800abc4:	4640      	mov	r0, r8
 800abc6:	f000 fe99 	bl	800b8fc <_strtod_r>
 800abca:	6822      	ldr	r2, [r4, #0]
 800abcc:	9b03      	ldr	r3, [sp, #12]
 800abce:	f012 0f02 	tst.w	r2, #2
 800abd2:	ec57 6b10 	vmov	r6, r7, d0
 800abd6:	681b      	ldr	r3, [r3, #0]
 800abd8:	d021      	beq.n	800ac1e <_scanf_float+0x3d6>
 800abda:	9903      	ldr	r1, [sp, #12]
 800abdc:	1d1a      	adds	r2, r3, #4
 800abde:	600a      	str	r2, [r1, #0]
 800abe0:	681b      	ldr	r3, [r3, #0]
 800abe2:	e9c3 6700 	strd	r6, r7, [r3]
 800abe6:	68e3      	ldr	r3, [r4, #12]
 800abe8:	3301      	adds	r3, #1
 800abea:	60e3      	str	r3, [r4, #12]
 800abec:	e66d      	b.n	800a8ca <_scanf_float+0x82>
 800abee:	9b04      	ldr	r3, [sp, #16]
 800abf0:	2b00      	cmp	r3, #0
 800abf2:	d0e5      	beq.n	800abc0 <_scanf_float+0x378>
 800abf4:	9905      	ldr	r1, [sp, #20]
 800abf6:	230a      	movs	r3, #10
 800abf8:	462a      	mov	r2, r5
 800abfa:	3101      	adds	r1, #1
 800abfc:	4640      	mov	r0, r8
 800abfe:	f000 ff6d 	bl	800badc <_strtol_r>
 800ac02:	9b04      	ldr	r3, [sp, #16]
 800ac04:	9e05      	ldr	r6, [sp, #20]
 800ac06:	1ac2      	subs	r2, r0, r3
 800ac08:	f204 136f 	addw	r3, r4, #367	; 0x16f
 800ac0c:	429e      	cmp	r6, r3
 800ac0e:	bf28      	it	cs
 800ac10:	f504 76b7 	addcs.w	r6, r4, #366	; 0x16e
 800ac14:	4912      	ldr	r1, [pc, #72]	; (800ac60 <_scanf_float+0x418>)
 800ac16:	4630      	mov	r0, r6
 800ac18:	f000 f82c 	bl	800ac74 <siprintf>
 800ac1c:	e7d0      	b.n	800abc0 <_scanf_float+0x378>
 800ac1e:	9903      	ldr	r1, [sp, #12]
 800ac20:	f012 0f04 	tst.w	r2, #4
 800ac24:	f103 0204 	add.w	r2, r3, #4
 800ac28:	600a      	str	r2, [r1, #0]
 800ac2a:	d1d9      	bne.n	800abe0 <_scanf_float+0x398>
 800ac2c:	f8d3 8000 	ldr.w	r8, [r3]
 800ac30:	ee10 2a10 	vmov	r2, s0
 800ac34:	ee10 0a10 	vmov	r0, s0
 800ac38:	463b      	mov	r3, r7
 800ac3a:	4639      	mov	r1, r7
 800ac3c:	f7f5 ff76 	bl	8000b2c <__aeabi_dcmpun>
 800ac40:	b128      	cbz	r0, 800ac4e <_scanf_float+0x406>
 800ac42:	4808      	ldr	r0, [pc, #32]	; (800ac64 <_scanf_float+0x41c>)
 800ac44:	f000 f810 	bl	800ac68 <nanf>
 800ac48:	ed88 0a00 	vstr	s0, [r8]
 800ac4c:	e7cb      	b.n	800abe6 <_scanf_float+0x39e>
 800ac4e:	4630      	mov	r0, r6
 800ac50:	4639      	mov	r1, r7
 800ac52:	f7f5 ffc9 	bl	8000be8 <__aeabi_d2f>
 800ac56:	f8c8 0000 	str.w	r0, [r8]
 800ac5a:	e7c4      	b.n	800abe6 <_scanf_float+0x39e>
 800ac5c:	2500      	movs	r5, #0
 800ac5e:	e634      	b.n	800a8ca <_scanf_float+0x82>
 800ac60:	0800f9dc 	.word	0x0800f9dc
 800ac64:	0800fae7 	.word	0x0800fae7

0800ac68 <nanf>:
 800ac68:	ed9f 0a01 	vldr	s0, [pc, #4]	; 800ac70 <nanf+0x8>
 800ac6c:	4770      	bx	lr
 800ac6e:	bf00      	nop
 800ac70:	7fc00000 	.word	0x7fc00000

0800ac74 <siprintf>:
 800ac74:	b40e      	push	{r1, r2, r3}
 800ac76:	b500      	push	{lr}
 800ac78:	b09c      	sub	sp, #112	; 0x70
 800ac7a:	ab1d      	add	r3, sp, #116	; 0x74
 800ac7c:	9002      	str	r0, [sp, #8]
 800ac7e:	9006      	str	r0, [sp, #24]
 800ac80:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800ac84:	4809      	ldr	r0, [pc, #36]	; (800acac <siprintf+0x38>)
 800ac86:	9107      	str	r1, [sp, #28]
 800ac88:	9104      	str	r1, [sp, #16]
 800ac8a:	4909      	ldr	r1, [pc, #36]	; (800acb0 <siprintf+0x3c>)
 800ac8c:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac90:	9105      	str	r1, [sp, #20]
 800ac92:	6800      	ldr	r0, [r0, #0]
 800ac94:	9301      	str	r3, [sp, #4]
 800ac96:	a902      	add	r1, sp, #8
 800ac98:	f002 ff7e 	bl	800db98 <_svfiprintf_r>
 800ac9c:	9b02      	ldr	r3, [sp, #8]
 800ac9e:	2200      	movs	r2, #0
 800aca0:	701a      	strb	r2, [r3, #0]
 800aca2:	b01c      	add	sp, #112	; 0x70
 800aca4:	f85d eb04 	ldr.w	lr, [sp], #4
 800aca8:	b003      	add	sp, #12
 800acaa:	4770      	bx	lr
 800acac:	20000020 	.word	0x20000020
 800acb0:	ffff0208 	.word	0xffff0208

0800acb4 <sulp>:
 800acb4:	b570      	push	{r4, r5, r6, lr}
 800acb6:	4604      	mov	r4, r0
 800acb8:	460d      	mov	r5, r1
 800acba:	ec45 4b10 	vmov	d0, r4, r5
 800acbe:	4616      	mov	r6, r2
 800acc0:	f002 fcc8 	bl	800d654 <__ulp>
 800acc4:	ec51 0b10 	vmov	r0, r1, d0
 800acc8:	b17e      	cbz	r6, 800acea <sulp+0x36>
 800acca:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800acce:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800acd2:	2b00      	cmp	r3, #0
 800acd4:	dd09      	ble.n	800acea <sulp+0x36>
 800acd6:	051b      	lsls	r3, r3, #20
 800acd8:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800acdc:	2400      	movs	r4, #0
 800acde:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800ace2:	4622      	mov	r2, r4
 800ace4:	462b      	mov	r3, r5
 800ace6:	f7f5 fc87 	bl	80005f8 <__aeabi_dmul>
 800acea:	bd70      	pop	{r4, r5, r6, pc}
 800acec:	0000      	movs	r0, r0
	...

0800acf0 <_strtod_l>:
 800acf0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800acf4:	ed2d 8b02 	vpush	{d8}
 800acf8:	b09d      	sub	sp, #116	; 0x74
 800acfa:	461f      	mov	r7, r3
 800acfc:	2300      	movs	r3, #0
 800acfe:	9318      	str	r3, [sp, #96]	; 0x60
 800ad00:	4ba2      	ldr	r3, [pc, #648]	; (800af8c <_strtod_l+0x29c>)
 800ad02:	9213      	str	r2, [sp, #76]	; 0x4c
 800ad04:	681b      	ldr	r3, [r3, #0]
 800ad06:	9305      	str	r3, [sp, #20]
 800ad08:	4604      	mov	r4, r0
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	4688      	mov	r8, r1
 800ad0e:	f7f5 fa5f 	bl	80001d0 <strlen>
 800ad12:	f04f 0a00 	mov.w	sl, #0
 800ad16:	4605      	mov	r5, r0
 800ad18:	f04f 0b00 	mov.w	fp, #0
 800ad1c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800ad20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad22:	781a      	ldrb	r2, [r3, #0]
 800ad24:	2a2b      	cmp	r2, #43	; 0x2b
 800ad26:	d04e      	beq.n	800adc6 <_strtod_l+0xd6>
 800ad28:	d83b      	bhi.n	800ada2 <_strtod_l+0xb2>
 800ad2a:	2a0d      	cmp	r2, #13
 800ad2c:	d834      	bhi.n	800ad98 <_strtod_l+0xa8>
 800ad2e:	2a08      	cmp	r2, #8
 800ad30:	d834      	bhi.n	800ad9c <_strtod_l+0xac>
 800ad32:	2a00      	cmp	r2, #0
 800ad34:	d03e      	beq.n	800adb4 <_strtod_l+0xc4>
 800ad36:	2300      	movs	r3, #0
 800ad38:	930a      	str	r3, [sp, #40]	; 0x28
 800ad3a:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800ad3c:	7833      	ldrb	r3, [r6, #0]
 800ad3e:	2b30      	cmp	r3, #48	; 0x30
 800ad40:	f040 80b0 	bne.w	800aea4 <_strtod_l+0x1b4>
 800ad44:	7873      	ldrb	r3, [r6, #1]
 800ad46:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800ad4a:	2b58      	cmp	r3, #88	; 0x58
 800ad4c:	d168      	bne.n	800ae20 <_strtod_l+0x130>
 800ad4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad50:	9301      	str	r3, [sp, #4]
 800ad52:	ab18      	add	r3, sp, #96	; 0x60
 800ad54:	9702      	str	r7, [sp, #8]
 800ad56:	9300      	str	r3, [sp, #0]
 800ad58:	4a8d      	ldr	r2, [pc, #564]	; (800af90 <_strtod_l+0x2a0>)
 800ad5a:	ab19      	add	r3, sp, #100	; 0x64
 800ad5c:	a917      	add	r1, sp, #92	; 0x5c
 800ad5e:	4620      	mov	r0, r4
 800ad60:	f001 fdd2 	bl	800c908 <__gethex>
 800ad64:	f010 0707 	ands.w	r7, r0, #7
 800ad68:	4605      	mov	r5, r0
 800ad6a:	d005      	beq.n	800ad78 <_strtod_l+0x88>
 800ad6c:	2f06      	cmp	r7, #6
 800ad6e:	d12c      	bne.n	800adca <_strtod_l+0xda>
 800ad70:	3601      	adds	r6, #1
 800ad72:	2300      	movs	r3, #0
 800ad74:	9617      	str	r6, [sp, #92]	; 0x5c
 800ad76:	930a      	str	r3, [sp, #40]	; 0x28
 800ad78:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800ad7a:	2b00      	cmp	r3, #0
 800ad7c:	f040 8590 	bne.w	800b8a0 <_strtod_l+0xbb0>
 800ad80:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800ad82:	b1eb      	cbz	r3, 800adc0 <_strtod_l+0xd0>
 800ad84:	4652      	mov	r2, sl
 800ad86:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800ad8a:	ec43 2b10 	vmov	d0, r2, r3
 800ad8e:	b01d      	add	sp, #116	; 0x74
 800ad90:	ecbd 8b02 	vpop	{d8}
 800ad94:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ad98:	2a20      	cmp	r2, #32
 800ad9a:	d1cc      	bne.n	800ad36 <_strtod_l+0x46>
 800ad9c:	3301      	adds	r3, #1
 800ad9e:	9317      	str	r3, [sp, #92]	; 0x5c
 800ada0:	e7be      	b.n	800ad20 <_strtod_l+0x30>
 800ada2:	2a2d      	cmp	r2, #45	; 0x2d
 800ada4:	d1c7      	bne.n	800ad36 <_strtod_l+0x46>
 800ada6:	2201      	movs	r2, #1
 800ada8:	920a      	str	r2, [sp, #40]	; 0x28
 800adaa:	1c5a      	adds	r2, r3, #1
 800adac:	9217      	str	r2, [sp, #92]	; 0x5c
 800adae:	785b      	ldrb	r3, [r3, #1]
 800adb0:	2b00      	cmp	r3, #0
 800adb2:	d1c2      	bne.n	800ad3a <_strtod_l+0x4a>
 800adb4:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800adb6:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800adba:	2b00      	cmp	r3, #0
 800adbc:	f040 856e 	bne.w	800b89c <_strtod_l+0xbac>
 800adc0:	4652      	mov	r2, sl
 800adc2:	465b      	mov	r3, fp
 800adc4:	e7e1      	b.n	800ad8a <_strtod_l+0x9a>
 800adc6:	2200      	movs	r2, #0
 800adc8:	e7ee      	b.n	800ada8 <_strtod_l+0xb8>
 800adca:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800adcc:	b13a      	cbz	r2, 800adde <_strtod_l+0xee>
 800adce:	2135      	movs	r1, #53	; 0x35
 800add0:	a81a      	add	r0, sp, #104	; 0x68
 800add2:	f002 fd4a 	bl	800d86a <__copybits>
 800add6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800add8:	4620      	mov	r0, r4
 800adda:	f002 f909 	bl	800cff0 <_Bfree>
 800adde:	3f01      	subs	r7, #1
 800ade0:	2f04      	cmp	r7, #4
 800ade2:	d806      	bhi.n	800adf2 <_strtod_l+0x102>
 800ade4:	e8df f007 	tbb	[pc, r7]
 800ade8:	1714030a 	.word	0x1714030a
 800adec:	0a          	.byte	0x0a
 800aded:	00          	.byte	0x00
 800adee:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800adf2:	0728      	lsls	r0, r5, #28
 800adf4:	d5c0      	bpl.n	800ad78 <_strtod_l+0x88>
 800adf6:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800adfa:	e7bd      	b.n	800ad78 <_strtod_l+0x88>
 800adfc:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800ae00:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800ae02:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800ae06:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800ae0a:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800ae0e:	e7f0      	b.n	800adf2 <_strtod_l+0x102>
 800ae10:	f8df b180 	ldr.w	fp, [pc, #384]	; 800af94 <_strtod_l+0x2a4>
 800ae14:	e7ed      	b.n	800adf2 <_strtod_l+0x102>
 800ae16:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800ae1a:	f04f 3aff 	mov.w	sl, #4294967295
 800ae1e:	e7e8      	b.n	800adf2 <_strtod_l+0x102>
 800ae20:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae22:	1c5a      	adds	r2, r3, #1
 800ae24:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae26:	785b      	ldrb	r3, [r3, #1]
 800ae28:	2b30      	cmp	r3, #48	; 0x30
 800ae2a:	d0f9      	beq.n	800ae20 <_strtod_l+0x130>
 800ae2c:	2b00      	cmp	r3, #0
 800ae2e:	d0a3      	beq.n	800ad78 <_strtod_l+0x88>
 800ae30:	2301      	movs	r3, #1
 800ae32:	f04f 0900 	mov.w	r9, #0
 800ae36:	9304      	str	r3, [sp, #16]
 800ae38:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ae3a:	9308      	str	r3, [sp, #32]
 800ae3c:	f8cd 901c 	str.w	r9, [sp, #28]
 800ae40:	464f      	mov	r7, r9
 800ae42:	220a      	movs	r2, #10
 800ae44:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800ae46:	7806      	ldrb	r6, [r0, #0]
 800ae48:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800ae4c:	b2d9      	uxtb	r1, r3
 800ae4e:	2909      	cmp	r1, #9
 800ae50:	d92a      	bls.n	800aea8 <_strtod_l+0x1b8>
 800ae52:	9905      	ldr	r1, [sp, #20]
 800ae54:	462a      	mov	r2, r5
 800ae56:	f003 f913 	bl	800e080 <strncmp>
 800ae5a:	b398      	cbz	r0, 800aec4 <_strtod_l+0x1d4>
 800ae5c:	2000      	movs	r0, #0
 800ae5e:	4632      	mov	r2, r6
 800ae60:	463d      	mov	r5, r7
 800ae62:	9005      	str	r0, [sp, #20]
 800ae64:	4603      	mov	r3, r0
 800ae66:	2a65      	cmp	r2, #101	; 0x65
 800ae68:	d001      	beq.n	800ae6e <_strtod_l+0x17e>
 800ae6a:	2a45      	cmp	r2, #69	; 0x45
 800ae6c:	d118      	bne.n	800aea0 <_strtod_l+0x1b0>
 800ae6e:	b91d      	cbnz	r5, 800ae78 <_strtod_l+0x188>
 800ae70:	9a04      	ldr	r2, [sp, #16]
 800ae72:	4302      	orrs	r2, r0
 800ae74:	d09e      	beq.n	800adb4 <_strtod_l+0xc4>
 800ae76:	2500      	movs	r5, #0
 800ae78:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800ae7c:	f108 0201 	add.w	r2, r8, #1
 800ae80:	9217      	str	r2, [sp, #92]	; 0x5c
 800ae82:	f898 2001 	ldrb.w	r2, [r8, #1]
 800ae86:	2a2b      	cmp	r2, #43	; 0x2b
 800ae88:	d075      	beq.n	800af76 <_strtod_l+0x286>
 800ae8a:	2a2d      	cmp	r2, #45	; 0x2d
 800ae8c:	d07b      	beq.n	800af86 <_strtod_l+0x296>
 800ae8e:	f04f 0c00 	mov.w	ip, #0
 800ae92:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800ae96:	2909      	cmp	r1, #9
 800ae98:	f240 8082 	bls.w	800afa0 <_strtod_l+0x2b0>
 800ae9c:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800aea0:	2600      	movs	r6, #0
 800aea2:	e09d      	b.n	800afe0 <_strtod_l+0x2f0>
 800aea4:	2300      	movs	r3, #0
 800aea6:	e7c4      	b.n	800ae32 <_strtod_l+0x142>
 800aea8:	2f08      	cmp	r7, #8
 800aeaa:	bfd8      	it	le
 800aeac:	9907      	ldrle	r1, [sp, #28]
 800aeae:	f100 0001 	add.w	r0, r0, #1
 800aeb2:	bfda      	itte	le
 800aeb4:	fb02 3301 	mlale	r3, r2, r1, r3
 800aeb8:	9307      	strle	r3, [sp, #28]
 800aeba:	fb02 3909 	mlagt	r9, r2, r9, r3
 800aebe:	3701      	adds	r7, #1
 800aec0:	9017      	str	r0, [sp, #92]	; 0x5c
 800aec2:	e7bf      	b.n	800ae44 <_strtod_l+0x154>
 800aec4:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aec6:	195a      	adds	r2, r3, r5
 800aec8:	9217      	str	r2, [sp, #92]	; 0x5c
 800aeca:	5d5a      	ldrb	r2, [r3, r5]
 800aecc:	2f00      	cmp	r7, #0
 800aece:	d037      	beq.n	800af40 <_strtod_l+0x250>
 800aed0:	9005      	str	r0, [sp, #20]
 800aed2:	463d      	mov	r5, r7
 800aed4:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800aed8:	2b09      	cmp	r3, #9
 800aeda:	d912      	bls.n	800af02 <_strtod_l+0x212>
 800aedc:	2301      	movs	r3, #1
 800aede:	e7c2      	b.n	800ae66 <_strtod_l+0x176>
 800aee0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aee2:	1c5a      	adds	r2, r3, #1
 800aee4:	9217      	str	r2, [sp, #92]	; 0x5c
 800aee6:	785a      	ldrb	r2, [r3, #1]
 800aee8:	3001      	adds	r0, #1
 800aeea:	2a30      	cmp	r2, #48	; 0x30
 800aeec:	d0f8      	beq.n	800aee0 <_strtod_l+0x1f0>
 800aeee:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800aef2:	2b08      	cmp	r3, #8
 800aef4:	f200 84d9 	bhi.w	800b8aa <_strtod_l+0xbba>
 800aef8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800aefa:	9005      	str	r0, [sp, #20]
 800aefc:	2000      	movs	r0, #0
 800aefe:	9308      	str	r3, [sp, #32]
 800af00:	4605      	mov	r5, r0
 800af02:	3a30      	subs	r2, #48	; 0x30
 800af04:	f100 0301 	add.w	r3, r0, #1
 800af08:	d014      	beq.n	800af34 <_strtod_l+0x244>
 800af0a:	9905      	ldr	r1, [sp, #20]
 800af0c:	4419      	add	r1, r3
 800af0e:	9105      	str	r1, [sp, #20]
 800af10:	462b      	mov	r3, r5
 800af12:	eb00 0e05 	add.w	lr, r0, r5
 800af16:	210a      	movs	r1, #10
 800af18:	4573      	cmp	r3, lr
 800af1a:	d113      	bne.n	800af44 <_strtod_l+0x254>
 800af1c:	182b      	adds	r3, r5, r0
 800af1e:	2b08      	cmp	r3, #8
 800af20:	f105 0501 	add.w	r5, r5, #1
 800af24:	4405      	add	r5, r0
 800af26:	dc1c      	bgt.n	800af62 <_strtod_l+0x272>
 800af28:	9907      	ldr	r1, [sp, #28]
 800af2a:	230a      	movs	r3, #10
 800af2c:	fb03 2301 	mla	r3, r3, r1, r2
 800af30:	9307      	str	r3, [sp, #28]
 800af32:	2300      	movs	r3, #0
 800af34:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af36:	1c51      	adds	r1, r2, #1
 800af38:	9117      	str	r1, [sp, #92]	; 0x5c
 800af3a:	7852      	ldrb	r2, [r2, #1]
 800af3c:	4618      	mov	r0, r3
 800af3e:	e7c9      	b.n	800aed4 <_strtod_l+0x1e4>
 800af40:	4638      	mov	r0, r7
 800af42:	e7d2      	b.n	800aeea <_strtod_l+0x1fa>
 800af44:	2b08      	cmp	r3, #8
 800af46:	dc04      	bgt.n	800af52 <_strtod_l+0x262>
 800af48:	9e07      	ldr	r6, [sp, #28]
 800af4a:	434e      	muls	r6, r1
 800af4c:	9607      	str	r6, [sp, #28]
 800af4e:	3301      	adds	r3, #1
 800af50:	e7e2      	b.n	800af18 <_strtod_l+0x228>
 800af52:	f103 0c01 	add.w	ip, r3, #1
 800af56:	f1bc 0f10 	cmp.w	ip, #16
 800af5a:	bfd8      	it	le
 800af5c:	fb01 f909 	mulle.w	r9, r1, r9
 800af60:	e7f5      	b.n	800af4e <_strtod_l+0x25e>
 800af62:	2d10      	cmp	r5, #16
 800af64:	bfdc      	itt	le
 800af66:	230a      	movle	r3, #10
 800af68:	fb03 2909 	mlale	r9, r3, r9, r2
 800af6c:	e7e1      	b.n	800af32 <_strtod_l+0x242>
 800af6e:	2300      	movs	r3, #0
 800af70:	9305      	str	r3, [sp, #20]
 800af72:	2301      	movs	r3, #1
 800af74:	e77c      	b.n	800ae70 <_strtod_l+0x180>
 800af76:	f04f 0c00 	mov.w	ip, #0
 800af7a:	f108 0202 	add.w	r2, r8, #2
 800af7e:	9217      	str	r2, [sp, #92]	; 0x5c
 800af80:	f898 2002 	ldrb.w	r2, [r8, #2]
 800af84:	e785      	b.n	800ae92 <_strtod_l+0x1a2>
 800af86:	f04f 0c01 	mov.w	ip, #1
 800af8a:	e7f6      	b.n	800af7a <_strtod_l+0x28a>
 800af8c:	0800fcc8 	.word	0x0800fcc8
 800af90:	0800f9e4 	.word	0x0800f9e4
 800af94:	7ff00000 	.word	0x7ff00000
 800af98:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800af9a:	1c51      	adds	r1, r2, #1
 800af9c:	9117      	str	r1, [sp, #92]	; 0x5c
 800af9e:	7852      	ldrb	r2, [r2, #1]
 800afa0:	2a30      	cmp	r2, #48	; 0x30
 800afa2:	d0f9      	beq.n	800af98 <_strtod_l+0x2a8>
 800afa4:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800afa8:	2908      	cmp	r1, #8
 800afaa:	f63f af79 	bhi.w	800aea0 <_strtod_l+0x1b0>
 800afae:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800afb2:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afb4:	9206      	str	r2, [sp, #24]
 800afb6:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800afb8:	1c51      	adds	r1, r2, #1
 800afba:	9117      	str	r1, [sp, #92]	; 0x5c
 800afbc:	7852      	ldrb	r2, [r2, #1]
 800afbe:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800afc2:	2e09      	cmp	r6, #9
 800afc4:	d937      	bls.n	800b036 <_strtod_l+0x346>
 800afc6:	9e06      	ldr	r6, [sp, #24]
 800afc8:	1b89      	subs	r1, r1, r6
 800afca:	2908      	cmp	r1, #8
 800afcc:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800afd0:	dc02      	bgt.n	800afd8 <_strtod_l+0x2e8>
 800afd2:	4576      	cmp	r6, lr
 800afd4:	bfa8      	it	ge
 800afd6:	4676      	movge	r6, lr
 800afd8:	f1bc 0f00 	cmp.w	ip, #0
 800afdc:	d000      	beq.n	800afe0 <_strtod_l+0x2f0>
 800afde:	4276      	negs	r6, r6
 800afe0:	2d00      	cmp	r5, #0
 800afe2:	d14d      	bne.n	800b080 <_strtod_l+0x390>
 800afe4:	9904      	ldr	r1, [sp, #16]
 800afe6:	4301      	orrs	r1, r0
 800afe8:	f47f aec6 	bne.w	800ad78 <_strtod_l+0x88>
 800afec:	2b00      	cmp	r3, #0
 800afee:	f47f aee1 	bne.w	800adb4 <_strtod_l+0xc4>
 800aff2:	2a69      	cmp	r2, #105	; 0x69
 800aff4:	d027      	beq.n	800b046 <_strtod_l+0x356>
 800aff6:	dc24      	bgt.n	800b042 <_strtod_l+0x352>
 800aff8:	2a49      	cmp	r2, #73	; 0x49
 800affa:	d024      	beq.n	800b046 <_strtod_l+0x356>
 800affc:	2a4e      	cmp	r2, #78	; 0x4e
 800affe:	f47f aed9 	bne.w	800adb4 <_strtod_l+0xc4>
 800b002:	499f      	ldr	r1, [pc, #636]	; (800b280 <_strtod_l+0x590>)
 800b004:	a817      	add	r0, sp, #92	; 0x5c
 800b006:	f001 fed7 	bl	800cdb8 <__match>
 800b00a:	2800      	cmp	r0, #0
 800b00c:	f43f aed2 	beq.w	800adb4 <_strtod_l+0xc4>
 800b010:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b012:	781b      	ldrb	r3, [r3, #0]
 800b014:	2b28      	cmp	r3, #40	; 0x28
 800b016:	d12d      	bne.n	800b074 <_strtod_l+0x384>
 800b018:	499a      	ldr	r1, [pc, #616]	; (800b284 <_strtod_l+0x594>)
 800b01a:	aa1a      	add	r2, sp, #104	; 0x68
 800b01c:	a817      	add	r0, sp, #92	; 0x5c
 800b01e:	f001 fedf 	bl	800cde0 <__hexnan>
 800b022:	2805      	cmp	r0, #5
 800b024:	d126      	bne.n	800b074 <_strtod_l+0x384>
 800b026:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800b028:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800b02c:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800b030:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800b034:	e6a0      	b.n	800ad78 <_strtod_l+0x88>
 800b036:	210a      	movs	r1, #10
 800b038:	fb01 2e0e 	mla	lr, r1, lr, r2
 800b03c:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800b040:	e7b9      	b.n	800afb6 <_strtod_l+0x2c6>
 800b042:	2a6e      	cmp	r2, #110	; 0x6e
 800b044:	e7db      	b.n	800affe <_strtod_l+0x30e>
 800b046:	4990      	ldr	r1, [pc, #576]	; (800b288 <_strtod_l+0x598>)
 800b048:	a817      	add	r0, sp, #92	; 0x5c
 800b04a:	f001 feb5 	bl	800cdb8 <__match>
 800b04e:	2800      	cmp	r0, #0
 800b050:	f43f aeb0 	beq.w	800adb4 <_strtod_l+0xc4>
 800b054:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b056:	498d      	ldr	r1, [pc, #564]	; (800b28c <_strtod_l+0x59c>)
 800b058:	3b01      	subs	r3, #1
 800b05a:	a817      	add	r0, sp, #92	; 0x5c
 800b05c:	9317      	str	r3, [sp, #92]	; 0x5c
 800b05e:	f001 feab 	bl	800cdb8 <__match>
 800b062:	b910      	cbnz	r0, 800b06a <_strtod_l+0x37a>
 800b064:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b066:	3301      	adds	r3, #1
 800b068:	9317      	str	r3, [sp, #92]	; 0x5c
 800b06a:	f8df b230 	ldr.w	fp, [pc, #560]	; 800b29c <_strtod_l+0x5ac>
 800b06e:	f04f 0a00 	mov.w	sl, #0
 800b072:	e681      	b.n	800ad78 <_strtod_l+0x88>
 800b074:	4886      	ldr	r0, [pc, #536]	; (800b290 <_strtod_l+0x5a0>)
 800b076:	f002 ffeb 	bl	800e050 <nan>
 800b07a:	ec5b ab10 	vmov	sl, fp, d0
 800b07e:	e67b      	b.n	800ad78 <_strtod_l+0x88>
 800b080:	9b05      	ldr	r3, [sp, #20]
 800b082:	9807      	ldr	r0, [sp, #28]
 800b084:	1af3      	subs	r3, r6, r3
 800b086:	2f00      	cmp	r7, #0
 800b088:	bf08      	it	eq
 800b08a:	462f      	moveq	r7, r5
 800b08c:	2d10      	cmp	r5, #16
 800b08e:	9306      	str	r3, [sp, #24]
 800b090:	46a8      	mov	r8, r5
 800b092:	bfa8      	it	ge
 800b094:	f04f 0810 	movge.w	r8, #16
 800b098:	f7f5 fa34 	bl	8000504 <__aeabi_ui2d>
 800b09c:	2d09      	cmp	r5, #9
 800b09e:	4682      	mov	sl, r0
 800b0a0:	468b      	mov	fp, r1
 800b0a2:	dd13      	ble.n	800b0cc <_strtod_l+0x3dc>
 800b0a4:	4b7b      	ldr	r3, [pc, #492]	; (800b294 <_strtod_l+0x5a4>)
 800b0a6:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800b0aa:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800b0ae:	f7f5 faa3 	bl	80005f8 <__aeabi_dmul>
 800b0b2:	4682      	mov	sl, r0
 800b0b4:	4648      	mov	r0, r9
 800b0b6:	468b      	mov	fp, r1
 800b0b8:	f7f5 fa24 	bl	8000504 <__aeabi_ui2d>
 800b0bc:	4602      	mov	r2, r0
 800b0be:	460b      	mov	r3, r1
 800b0c0:	4650      	mov	r0, sl
 800b0c2:	4659      	mov	r1, fp
 800b0c4:	f7f5 f8e2 	bl	800028c <__adddf3>
 800b0c8:	4682      	mov	sl, r0
 800b0ca:	468b      	mov	fp, r1
 800b0cc:	2d0f      	cmp	r5, #15
 800b0ce:	dc38      	bgt.n	800b142 <_strtod_l+0x452>
 800b0d0:	9b06      	ldr	r3, [sp, #24]
 800b0d2:	2b00      	cmp	r3, #0
 800b0d4:	f43f ae50 	beq.w	800ad78 <_strtod_l+0x88>
 800b0d8:	dd24      	ble.n	800b124 <_strtod_l+0x434>
 800b0da:	2b16      	cmp	r3, #22
 800b0dc:	dc0b      	bgt.n	800b0f6 <_strtod_l+0x406>
 800b0de:	496d      	ldr	r1, [pc, #436]	; (800b294 <_strtod_l+0x5a4>)
 800b0e0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b0e4:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b0e8:	4652      	mov	r2, sl
 800b0ea:	465b      	mov	r3, fp
 800b0ec:	f7f5 fa84 	bl	80005f8 <__aeabi_dmul>
 800b0f0:	4682      	mov	sl, r0
 800b0f2:	468b      	mov	fp, r1
 800b0f4:	e640      	b.n	800ad78 <_strtod_l+0x88>
 800b0f6:	9a06      	ldr	r2, [sp, #24]
 800b0f8:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800b0fc:	4293      	cmp	r3, r2
 800b0fe:	db20      	blt.n	800b142 <_strtod_l+0x452>
 800b100:	4c64      	ldr	r4, [pc, #400]	; (800b294 <_strtod_l+0x5a4>)
 800b102:	f1c5 050f 	rsb	r5, r5, #15
 800b106:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800b10a:	4652      	mov	r2, sl
 800b10c:	465b      	mov	r3, fp
 800b10e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b112:	f7f5 fa71 	bl	80005f8 <__aeabi_dmul>
 800b116:	9b06      	ldr	r3, [sp, #24]
 800b118:	1b5d      	subs	r5, r3, r5
 800b11a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800b11e:	e9d4 2300 	ldrd	r2, r3, [r4]
 800b122:	e7e3      	b.n	800b0ec <_strtod_l+0x3fc>
 800b124:	9b06      	ldr	r3, [sp, #24]
 800b126:	3316      	adds	r3, #22
 800b128:	db0b      	blt.n	800b142 <_strtod_l+0x452>
 800b12a:	9b05      	ldr	r3, [sp, #20]
 800b12c:	1b9e      	subs	r6, r3, r6
 800b12e:	4b59      	ldr	r3, [pc, #356]	; (800b294 <_strtod_l+0x5a4>)
 800b130:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800b134:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b138:	4650      	mov	r0, sl
 800b13a:	4659      	mov	r1, fp
 800b13c:	f7f5 fb86 	bl	800084c <__aeabi_ddiv>
 800b140:	e7d6      	b.n	800b0f0 <_strtod_l+0x400>
 800b142:	9b06      	ldr	r3, [sp, #24]
 800b144:	eba5 0808 	sub.w	r8, r5, r8
 800b148:	4498      	add	r8, r3
 800b14a:	f1b8 0f00 	cmp.w	r8, #0
 800b14e:	dd74      	ble.n	800b23a <_strtod_l+0x54a>
 800b150:	f018 030f 	ands.w	r3, r8, #15
 800b154:	d00a      	beq.n	800b16c <_strtod_l+0x47c>
 800b156:	494f      	ldr	r1, [pc, #316]	; (800b294 <_strtod_l+0x5a4>)
 800b158:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800b15c:	4652      	mov	r2, sl
 800b15e:	465b      	mov	r3, fp
 800b160:	e9d1 0100 	ldrd	r0, r1, [r1]
 800b164:	f7f5 fa48 	bl	80005f8 <__aeabi_dmul>
 800b168:	4682      	mov	sl, r0
 800b16a:	468b      	mov	fp, r1
 800b16c:	f038 080f 	bics.w	r8, r8, #15
 800b170:	d04f      	beq.n	800b212 <_strtod_l+0x522>
 800b172:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800b176:	dd22      	ble.n	800b1be <_strtod_l+0x4ce>
 800b178:	2500      	movs	r5, #0
 800b17a:	462e      	mov	r6, r5
 800b17c:	9507      	str	r5, [sp, #28]
 800b17e:	9505      	str	r5, [sp, #20]
 800b180:	2322      	movs	r3, #34	; 0x22
 800b182:	f8df b118 	ldr.w	fp, [pc, #280]	; 800b29c <_strtod_l+0x5ac>
 800b186:	6023      	str	r3, [r4, #0]
 800b188:	f04f 0a00 	mov.w	sl, #0
 800b18c:	9b07      	ldr	r3, [sp, #28]
 800b18e:	2b00      	cmp	r3, #0
 800b190:	f43f adf2 	beq.w	800ad78 <_strtod_l+0x88>
 800b194:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b196:	4620      	mov	r0, r4
 800b198:	f001 ff2a 	bl	800cff0 <_Bfree>
 800b19c:	9905      	ldr	r1, [sp, #20]
 800b19e:	4620      	mov	r0, r4
 800b1a0:	f001 ff26 	bl	800cff0 <_Bfree>
 800b1a4:	4631      	mov	r1, r6
 800b1a6:	4620      	mov	r0, r4
 800b1a8:	f001 ff22 	bl	800cff0 <_Bfree>
 800b1ac:	9907      	ldr	r1, [sp, #28]
 800b1ae:	4620      	mov	r0, r4
 800b1b0:	f001 ff1e 	bl	800cff0 <_Bfree>
 800b1b4:	4629      	mov	r1, r5
 800b1b6:	4620      	mov	r0, r4
 800b1b8:	f001 ff1a 	bl	800cff0 <_Bfree>
 800b1bc:	e5dc      	b.n	800ad78 <_strtod_l+0x88>
 800b1be:	4b36      	ldr	r3, [pc, #216]	; (800b298 <_strtod_l+0x5a8>)
 800b1c0:	9304      	str	r3, [sp, #16]
 800b1c2:	2300      	movs	r3, #0
 800b1c4:	ea4f 1828 	mov.w	r8, r8, asr #4
 800b1c8:	4650      	mov	r0, sl
 800b1ca:	4659      	mov	r1, fp
 800b1cc:	4699      	mov	r9, r3
 800b1ce:	f1b8 0f01 	cmp.w	r8, #1
 800b1d2:	dc21      	bgt.n	800b218 <_strtod_l+0x528>
 800b1d4:	b10b      	cbz	r3, 800b1da <_strtod_l+0x4ea>
 800b1d6:	4682      	mov	sl, r0
 800b1d8:	468b      	mov	fp, r1
 800b1da:	4b2f      	ldr	r3, [pc, #188]	; (800b298 <_strtod_l+0x5a8>)
 800b1dc:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800b1e0:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800b1e4:	4652      	mov	r2, sl
 800b1e6:	465b      	mov	r3, fp
 800b1e8:	e9d9 0100 	ldrd	r0, r1, [r9]
 800b1ec:	f7f5 fa04 	bl	80005f8 <__aeabi_dmul>
 800b1f0:	4b2a      	ldr	r3, [pc, #168]	; (800b29c <_strtod_l+0x5ac>)
 800b1f2:	460a      	mov	r2, r1
 800b1f4:	400b      	ands	r3, r1
 800b1f6:	492a      	ldr	r1, [pc, #168]	; (800b2a0 <_strtod_l+0x5b0>)
 800b1f8:	428b      	cmp	r3, r1
 800b1fa:	4682      	mov	sl, r0
 800b1fc:	d8bc      	bhi.n	800b178 <_strtod_l+0x488>
 800b1fe:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800b202:	428b      	cmp	r3, r1
 800b204:	bf86      	itte	hi
 800b206:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800b2a4 <_strtod_l+0x5b4>
 800b20a:	f04f 3aff 	movhi.w	sl, #4294967295
 800b20e:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800b212:	2300      	movs	r3, #0
 800b214:	9304      	str	r3, [sp, #16]
 800b216:	e084      	b.n	800b322 <_strtod_l+0x632>
 800b218:	f018 0f01 	tst.w	r8, #1
 800b21c:	d005      	beq.n	800b22a <_strtod_l+0x53a>
 800b21e:	9b04      	ldr	r3, [sp, #16]
 800b220:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b224:	f7f5 f9e8 	bl	80005f8 <__aeabi_dmul>
 800b228:	2301      	movs	r3, #1
 800b22a:	9a04      	ldr	r2, [sp, #16]
 800b22c:	3208      	adds	r2, #8
 800b22e:	f109 0901 	add.w	r9, r9, #1
 800b232:	ea4f 0868 	mov.w	r8, r8, asr #1
 800b236:	9204      	str	r2, [sp, #16]
 800b238:	e7c9      	b.n	800b1ce <_strtod_l+0x4de>
 800b23a:	d0ea      	beq.n	800b212 <_strtod_l+0x522>
 800b23c:	f1c8 0800 	rsb	r8, r8, #0
 800b240:	f018 020f 	ands.w	r2, r8, #15
 800b244:	d00a      	beq.n	800b25c <_strtod_l+0x56c>
 800b246:	4b13      	ldr	r3, [pc, #76]	; (800b294 <_strtod_l+0x5a4>)
 800b248:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b24c:	4650      	mov	r0, sl
 800b24e:	4659      	mov	r1, fp
 800b250:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b254:	f7f5 fafa 	bl	800084c <__aeabi_ddiv>
 800b258:	4682      	mov	sl, r0
 800b25a:	468b      	mov	fp, r1
 800b25c:	ea5f 1828 	movs.w	r8, r8, asr #4
 800b260:	d0d7      	beq.n	800b212 <_strtod_l+0x522>
 800b262:	f1b8 0f1f 	cmp.w	r8, #31
 800b266:	dd1f      	ble.n	800b2a8 <_strtod_l+0x5b8>
 800b268:	2500      	movs	r5, #0
 800b26a:	462e      	mov	r6, r5
 800b26c:	9507      	str	r5, [sp, #28]
 800b26e:	9505      	str	r5, [sp, #20]
 800b270:	2322      	movs	r3, #34	; 0x22
 800b272:	f04f 0a00 	mov.w	sl, #0
 800b276:	f04f 0b00 	mov.w	fp, #0
 800b27a:	6023      	str	r3, [r4, #0]
 800b27c:	e786      	b.n	800b18c <_strtod_l+0x49c>
 800b27e:	bf00      	nop
 800b280:	0800f9b5 	.word	0x0800f9b5
 800b284:	0800f9f8 	.word	0x0800f9f8
 800b288:	0800f9ad 	.word	0x0800f9ad
 800b28c:	0800fbec 	.word	0x0800fbec
 800b290:	0800fae7 	.word	0x0800fae7
 800b294:	0800fd60 	.word	0x0800fd60
 800b298:	0800fd38 	.word	0x0800fd38
 800b29c:	7ff00000 	.word	0x7ff00000
 800b2a0:	7ca00000 	.word	0x7ca00000
 800b2a4:	7fefffff 	.word	0x7fefffff
 800b2a8:	f018 0310 	ands.w	r3, r8, #16
 800b2ac:	bf18      	it	ne
 800b2ae:	236a      	movne	r3, #106	; 0x6a
 800b2b0:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800b660 <_strtod_l+0x970>
 800b2b4:	9304      	str	r3, [sp, #16]
 800b2b6:	4650      	mov	r0, sl
 800b2b8:	4659      	mov	r1, fp
 800b2ba:	2300      	movs	r3, #0
 800b2bc:	f018 0f01 	tst.w	r8, #1
 800b2c0:	d004      	beq.n	800b2cc <_strtod_l+0x5dc>
 800b2c2:	e9d9 2300 	ldrd	r2, r3, [r9]
 800b2c6:	f7f5 f997 	bl	80005f8 <__aeabi_dmul>
 800b2ca:	2301      	movs	r3, #1
 800b2cc:	ea5f 0868 	movs.w	r8, r8, asr #1
 800b2d0:	f109 0908 	add.w	r9, r9, #8
 800b2d4:	d1f2      	bne.n	800b2bc <_strtod_l+0x5cc>
 800b2d6:	b10b      	cbz	r3, 800b2dc <_strtod_l+0x5ec>
 800b2d8:	4682      	mov	sl, r0
 800b2da:	468b      	mov	fp, r1
 800b2dc:	9b04      	ldr	r3, [sp, #16]
 800b2de:	b1c3      	cbz	r3, 800b312 <_strtod_l+0x622>
 800b2e0:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800b2e4:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800b2e8:	2b00      	cmp	r3, #0
 800b2ea:	4659      	mov	r1, fp
 800b2ec:	dd11      	ble.n	800b312 <_strtod_l+0x622>
 800b2ee:	2b1f      	cmp	r3, #31
 800b2f0:	f340 8124 	ble.w	800b53c <_strtod_l+0x84c>
 800b2f4:	2b34      	cmp	r3, #52	; 0x34
 800b2f6:	bfde      	ittt	le
 800b2f8:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800b2fc:	f04f 33ff 	movle.w	r3, #4294967295
 800b300:	fa03 f202 	lslle.w	r2, r3, r2
 800b304:	f04f 0a00 	mov.w	sl, #0
 800b308:	bfcc      	ite	gt
 800b30a:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800b30e:	ea02 0b01 	andle.w	fp, r2, r1
 800b312:	2200      	movs	r2, #0
 800b314:	2300      	movs	r3, #0
 800b316:	4650      	mov	r0, sl
 800b318:	4659      	mov	r1, fp
 800b31a:	f7f5 fbd5 	bl	8000ac8 <__aeabi_dcmpeq>
 800b31e:	2800      	cmp	r0, #0
 800b320:	d1a2      	bne.n	800b268 <_strtod_l+0x578>
 800b322:	9b07      	ldr	r3, [sp, #28]
 800b324:	9300      	str	r3, [sp, #0]
 800b326:	9908      	ldr	r1, [sp, #32]
 800b328:	462b      	mov	r3, r5
 800b32a:	463a      	mov	r2, r7
 800b32c:	4620      	mov	r0, r4
 800b32e:	f001 fec7 	bl	800d0c0 <__s2b>
 800b332:	9007      	str	r0, [sp, #28]
 800b334:	2800      	cmp	r0, #0
 800b336:	f43f af1f 	beq.w	800b178 <_strtod_l+0x488>
 800b33a:	9b05      	ldr	r3, [sp, #20]
 800b33c:	1b9e      	subs	r6, r3, r6
 800b33e:	9b06      	ldr	r3, [sp, #24]
 800b340:	2b00      	cmp	r3, #0
 800b342:	bfb4      	ite	lt
 800b344:	4633      	movlt	r3, r6
 800b346:	2300      	movge	r3, #0
 800b348:	930c      	str	r3, [sp, #48]	; 0x30
 800b34a:	9b06      	ldr	r3, [sp, #24]
 800b34c:	2500      	movs	r5, #0
 800b34e:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800b352:	9312      	str	r3, [sp, #72]	; 0x48
 800b354:	462e      	mov	r6, r5
 800b356:	9b07      	ldr	r3, [sp, #28]
 800b358:	4620      	mov	r0, r4
 800b35a:	6859      	ldr	r1, [r3, #4]
 800b35c:	f001 fe08 	bl	800cf70 <_Balloc>
 800b360:	9005      	str	r0, [sp, #20]
 800b362:	2800      	cmp	r0, #0
 800b364:	f43f af0c 	beq.w	800b180 <_strtod_l+0x490>
 800b368:	9b07      	ldr	r3, [sp, #28]
 800b36a:	691a      	ldr	r2, [r3, #16]
 800b36c:	3202      	adds	r2, #2
 800b36e:	f103 010c 	add.w	r1, r3, #12
 800b372:	0092      	lsls	r2, r2, #2
 800b374:	300c      	adds	r0, #12
 800b376:	f001 fded 	bl	800cf54 <memcpy>
 800b37a:	ec4b ab10 	vmov	d0, sl, fp
 800b37e:	aa1a      	add	r2, sp, #104	; 0x68
 800b380:	a919      	add	r1, sp, #100	; 0x64
 800b382:	4620      	mov	r0, r4
 800b384:	f002 f9e2 	bl	800d74c <__d2b>
 800b388:	ec4b ab18 	vmov	d8, sl, fp
 800b38c:	9018      	str	r0, [sp, #96]	; 0x60
 800b38e:	2800      	cmp	r0, #0
 800b390:	f43f aef6 	beq.w	800b180 <_strtod_l+0x490>
 800b394:	2101      	movs	r1, #1
 800b396:	4620      	mov	r0, r4
 800b398:	f001 ff2c 	bl	800d1f4 <__i2b>
 800b39c:	4606      	mov	r6, r0
 800b39e:	2800      	cmp	r0, #0
 800b3a0:	f43f aeee 	beq.w	800b180 <_strtod_l+0x490>
 800b3a4:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800b3a6:	9904      	ldr	r1, [sp, #16]
 800b3a8:	2b00      	cmp	r3, #0
 800b3aa:	bfab      	itete	ge
 800b3ac:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800b3ae:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800b3b0:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800b3b2:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800b3b6:	bfac      	ite	ge
 800b3b8:	eb03 0902 	addge.w	r9, r3, r2
 800b3bc:	1ad7      	sublt	r7, r2, r3
 800b3be:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800b3c0:	eba3 0801 	sub.w	r8, r3, r1
 800b3c4:	4490      	add	r8, r2
 800b3c6:	4ba1      	ldr	r3, [pc, #644]	; (800b64c <_strtod_l+0x95c>)
 800b3c8:	f108 38ff 	add.w	r8, r8, #4294967295
 800b3cc:	4598      	cmp	r8, r3
 800b3ce:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800b3d2:	f280 80c7 	bge.w	800b564 <_strtod_l+0x874>
 800b3d6:	eba3 0308 	sub.w	r3, r3, r8
 800b3da:	2b1f      	cmp	r3, #31
 800b3dc:	eba2 0203 	sub.w	r2, r2, r3
 800b3e0:	f04f 0101 	mov.w	r1, #1
 800b3e4:	f300 80b1 	bgt.w	800b54a <_strtod_l+0x85a>
 800b3e8:	fa01 f303 	lsl.w	r3, r1, r3
 800b3ec:	930d      	str	r3, [sp, #52]	; 0x34
 800b3ee:	2300      	movs	r3, #0
 800b3f0:	9308      	str	r3, [sp, #32]
 800b3f2:	eb09 0802 	add.w	r8, r9, r2
 800b3f6:	9b04      	ldr	r3, [sp, #16]
 800b3f8:	45c1      	cmp	r9, r8
 800b3fa:	4417      	add	r7, r2
 800b3fc:	441f      	add	r7, r3
 800b3fe:	464b      	mov	r3, r9
 800b400:	bfa8      	it	ge
 800b402:	4643      	movge	r3, r8
 800b404:	42bb      	cmp	r3, r7
 800b406:	bfa8      	it	ge
 800b408:	463b      	movge	r3, r7
 800b40a:	2b00      	cmp	r3, #0
 800b40c:	bfc2      	ittt	gt
 800b40e:	eba8 0803 	subgt.w	r8, r8, r3
 800b412:	1aff      	subgt	r7, r7, r3
 800b414:	eba9 0903 	subgt.w	r9, r9, r3
 800b418:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b41a:	2b00      	cmp	r3, #0
 800b41c:	dd17      	ble.n	800b44e <_strtod_l+0x75e>
 800b41e:	4631      	mov	r1, r6
 800b420:	461a      	mov	r2, r3
 800b422:	4620      	mov	r0, r4
 800b424:	f001 ffa6 	bl	800d374 <__pow5mult>
 800b428:	4606      	mov	r6, r0
 800b42a:	2800      	cmp	r0, #0
 800b42c:	f43f aea8 	beq.w	800b180 <_strtod_l+0x490>
 800b430:	4601      	mov	r1, r0
 800b432:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800b434:	4620      	mov	r0, r4
 800b436:	f001 fef3 	bl	800d220 <__multiply>
 800b43a:	900b      	str	r0, [sp, #44]	; 0x2c
 800b43c:	2800      	cmp	r0, #0
 800b43e:	f43f ae9f 	beq.w	800b180 <_strtod_l+0x490>
 800b442:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b444:	4620      	mov	r0, r4
 800b446:	f001 fdd3 	bl	800cff0 <_Bfree>
 800b44a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b44c:	9318      	str	r3, [sp, #96]	; 0x60
 800b44e:	f1b8 0f00 	cmp.w	r8, #0
 800b452:	f300 808c 	bgt.w	800b56e <_strtod_l+0x87e>
 800b456:	9b06      	ldr	r3, [sp, #24]
 800b458:	2b00      	cmp	r3, #0
 800b45a:	dd08      	ble.n	800b46e <_strtod_l+0x77e>
 800b45c:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800b45e:	9905      	ldr	r1, [sp, #20]
 800b460:	4620      	mov	r0, r4
 800b462:	f001 ff87 	bl	800d374 <__pow5mult>
 800b466:	9005      	str	r0, [sp, #20]
 800b468:	2800      	cmp	r0, #0
 800b46a:	f43f ae89 	beq.w	800b180 <_strtod_l+0x490>
 800b46e:	2f00      	cmp	r7, #0
 800b470:	dd08      	ble.n	800b484 <_strtod_l+0x794>
 800b472:	9905      	ldr	r1, [sp, #20]
 800b474:	463a      	mov	r2, r7
 800b476:	4620      	mov	r0, r4
 800b478:	f001 ffd6 	bl	800d428 <__lshift>
 800b47c:	9005      	str	r0, [sp, #20]
 800b47e:	2800      	cmp	r0, #0
 800b480:	f43f ae7e 	beq.w	800b180 <_strtod_l+0x490>
 800b484:	f1b9 0f00 	cmp.w	r9, #0
 800b488:	dd08      	ble.n	800b49c <_strtod_l+0x7ac>
 800b48a:	4631      	mov	r1, r6
 800b48c:	464a      	mov	r2, r9
 800b48e:	4620      	mov	r0, r4
 800b490:	f001 ffca 	bl	800d428 <__lshift>
 800b494:	4606      	mov	r6, r0
 800b496:	2800      	cmp	r0, #0
 800b498:	f43f ae72 	beq.w	800b180 <_strtod_l+0x490>
 800b49c:	9a05      	ldr	r2, [sp, #20]
 800b49e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b4a0:	4620      	mov	r0, r4
 800b4a2:	f002 f84d 	bl	800d540 <__mdiff>
 800b4a6:	4605      	mov	r5, r0
 800b4a8:	2800      	cmp	r0, #0
 800b4aa:	f43f ae69 	beq.w	800b180 <_strtod_l+0x490>
 800b4ae:	68c3      	ldr	r3, [r0, #12]
 800b4b0:	930b      	str	r3, [sp, #44]	; 0x2c
 800b4b2:	2300      	movs	r3, #0
 800b4b4:	60c3      	str	r3, [r0, #12]
 800b4b6:	4631      	mov	r1, r6
 800b4b8:	f002 f826 	bl	800d508 <__mcmp>
 800b4bc:	2800      	cmp	r0, #0
 800b4be:	da60      	bge.n	800b582 <_strtod_l+0x892>
 800b4c0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b4c2:	ea53 030a 	orrs.w	r3, r3, sl
 800b4c6:	f040 8082 	bne.w	800b5ce <_strtod_l+0x8de>
 800b4ca:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b4ce:	2b00      	cmp	r3, #0
 800b4d0:	d17d      	bne.n	800b5ce <_strtod_l+0x8de>
 800b4d2:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b4d6:	0d1b      	lsrs	r3, r3, #20
 800b4d8:	051b      	lsls	r3, r3, #20
 800b4da:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800b4de:	d976      	bls.n	800b5ce <_strtod_l+0x8de>
 800b4e0:	696b      	ldr	r3, [r5, #20]
 800b4e2:	b913      	cbnz	r3, 800b4ea <_strtod_l+0x7fa>
 800b4e4:	692b      	ldr	r3, [r5, #16]
 800b4e6:	2b01      	cmp	r3, #1
 800b4e8:	dd71      	ble.n	800b5ce <_strtod_l+0x8de>
 800b4ea:	4629      	mov	r1, r5
 800b4ec:	2201      	movs	r2, #1
 800b4ee:	4620      	mov	r0, r4
 800b4f0:	f001 ff9a 	bl	800d428 <__lshift>
 800b4f4:	4631      	mov	r1, r6
 800b4f6:	4605      	mov	r5, r0
 800b4f8:	f002 f806 	bl	800d508 <__mcmp>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	dd66      	ble.n	800b5ce <_strtod_l+0x8de>
 800b500:	9904      	ldr	r1, [sp, #16]
 800b502:	4a53      	ldr	r2, [pc, #332]	; (800b650 <_strtod_l+0x960>)
 800b504:	465b      	mov	r3, fp
 800b506:	2900      	cmp	r1, #0
 800b508:	f000 8081 	beq.w	800b60e <_strtod_l+0x91e>
 800b50c:	ea02 010b 	and.w	r1, r2, fp
 800b510:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800b514:	dc7b      	bgt.n	800b60e <_strtod_l+0x91e>
 800b516:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800b51a:	f77f aea9 	ble.w	800b270 <_strtod_l+0x580>
 800b51e:	4b4d      	ldr	r3, [pc, #308]	; (800b654 <_strtod_l+0x964>)
 800b520:	4650      	mov	r0, sl
 800b522:	4659      	mov	r1, fp
 800b524:	2200      	movs	r2, #0
 800b526:	f7f5 f867 	bl	80005f8 <__aeabi_dmul>
 800b52a:	460b      	mov	r3, r1
 800b52c:	4303      	orrs	r3, r0
 800b52e:	bf08      	it	eq
 800b530:	2322      	moveq	r3, #34	; 0x22
 800b532:	4682      	mov	sl, r0
 800b534:	468b      	mov	fp, r1
 800b536:	bf08      	it	eq
 800b538:	6023      	streq	r3, [r4, #0]
 800b53a:	e62b      	b.n	800b194 <_strtod_l+0x4a4>
 800b53c:	f04f 32ff 	mov.w	r2, #4294967295
 800b540:	fa02 f303 	lsl.w	r3, r2, r3
 800b544:	ea03 0a0a 	and.w	sl, r3, sl
 800b548:	e6e3      	b.n	800b312 <_strtod_l+0x622>
 800b54a:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800b54e:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800b552:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800b556:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800b55a:	fa01 f308 	lsl.w	r3, r1, r8
 800b55e:	9308      	str	r3, [sp, #32]
 800b560:	910d      	str	r1, [sp, #52]	; 0x34
 800b562:	e746      	b.n	800b3f2 <_strtod_l+0x702>
 800b564:	2300      	movs	r3, #0
 800b566:	9308      	str	r3, [sp, #32]
 800b568:	2301      	movs	r3, #1
 800b56a:	930d      	str	r3, [sp, #52]	; 0x34
 800b56c:	e741      	b.n	800b3f2 <_strtod_l+0x702>
 800b56e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b570:	4642      	mov	r2, r8
 800b572:	4620      	mov	r0, r4
 800b574:	f001 ff58 	bl	800d428 <__lshift>
 800b578:	9018      	str	r0, [sp, #96]	; 0x60
 800b57a:	2800      	cmp	r0, #0
 800b57c:	f47f af6b 	bne.w	800b456 <_strtod_l+0x766>
 800b580:	e5fe      	b.n	800b180 <_strtod_l+0x490>
 800b582:	465f      	mov	r7, fp
 800b584:	d16e      	bne.n	800b664 <_strtod_l+0x974>
 800b586:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b588:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b58c:	b342      	cbz	r2, 800b5e0 <_strtod_l+0x8f0>
 800b58e:	4a32      	ldr	r2, [pc, #200]	; (800b658 <_strtod_l+0x968>)
 800b590:	4293      	cmp	r3, r2
 800b592:	d128      	bne.n	800b5e6 <_strtod_l+0x8f6>
 800b594:	9b04      	ldr	r3, [sp, #16]
 800b596:	4651      	mov	r1, sl
 800b598:	b1eb      	cbz	r3, 800b5d6 <_strtod_l+0x8e6>
 800b59a:	4b2d      	ldr	r3, [pc, #180]	; (800b650 <_strtod_l+0x960>)
 800b59c:	403b      	ands	r3, r7
 800b59e:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b5a2:	f04f 32ff 	mov.w	r2, #4294967295
 800b5a6:	d819      	bhi.n	800b5dc <_strtod_l+0x8ec>
 800b5a8:	0d1b      	lsrs	r3, r3, #20
 800b5aa:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800b5ae:	fa02 f303 	lsl.w	r3, r2, r3
 800b5b2:	4299      	cmp	r1, r3
 800b5b4:	d117      	bne.n	800b5e6 <_strtod_l+0x8f6>
 800b5b6:	4b29      	ldr	r3, [pc, #164]	; (800b65c <_strtod_l+0x96c>)
 800b5b8:	429f      	cmp	r7, r3
 800b5ba:	d102      	bne.n	800b5c2 <_strtod_l+0x8d2>
 800b5bc:	3101      	adds	r1, #1
 800b5be:	f43f addf 	beq.w	800b180 <_strtod_l+0x490>
 800b5c2:	4b23      	ldr	r3, [pc, #140]	; (800b650 <_strtod_l+0x960>)
 800b5c4:	403b      	ands	r3, r7
 800b5c6:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800b5ca:	f04f 0a00 	mov.w	sl, #0
 800b5ce:	9b04      	ldr	r3, [sp, #16]
 800b5d0:	2b00      	cmp	r3, #0
 800b5d2:	d1a4      	bne.n	800b51e <_strtod_l+0x82e>
 800b5d4:	e5de      	b.n	800b194 <_strtod_l+0x4a4>
 800b5d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b5da:	e7ea      	b.n	800b5b2 <_strtod_l+0x8c2>
 800b5dc:	4613      	mov	r3, r2
 800b5de:	e7e8      	b.n	800b5b2 <_strtod_l+0x8c2>
 800b5e0:	ea53 030a 	orrs.w	r3, r3, sl
 800b5e4:	d08c      	beq.n	800b500 <_strtod_l+0x810>
 800b5e6:	9b08      	ldr	r3, [sp, #32]
 800b5e8:	b1db      	cbz	r3, 800b622 <_strtod_l+0x932>
 800b5ea:	423b      	tst	r3, r7
 800b5ec:	d0ef      	beq.n	800b5ce <_strtod_l+0x8de>
 800b5ee:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b5f0:	9a04      	ldr	r2, [sp, #16]
 800b5f2:	4650      	mov	r0, sl
 800b5f4:	4659      	mov	r1, fp
 800b5f6:	b1c3      	cbz	r3, 800b62a <_strtod_l+0x93a>
 800b5f8:	f7ff fb5c 	bl	800acb4 <sulp>
 800b5fc:	4602      	mov	r2, r0
 800b5fe:	460b      	mov	r3, r1
 800b600:	ec51 0b18 	vmov	r0, r1, d8
 800b604:	f7f4 fe42 	bl	800028c <__adddf3>
 800b608:	4682      	mov	sl, r0
 800b60a:	468b      	mov	fp, r1
 800b60c:	e7df      	b.n	800b5ce <_strtod_l+0x8de>
 800b60e:	4013      	ands	r3, r2
 800b610:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800b614:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800b618:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800b61c:	f04f 3aff 	mov.w	sl, #4294967295
 800b620:	e7d5      	b.n	800b5ce <_strtod_l+0x8de>
 800b622:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b624:	ea13 0f0a 	tst.w	r3, sl
 800b628:	e7e0      	b.n	800b5ec <_strtod_l+0x8fc>
 800b62a:	f7ff fb43 	bl	800acb4 <sulp>
 800b62e:	4602      	mov	r2, r0
 800b630:	460b      	mov	r3, r1
 800b632:	ec51 0b18 	vmov	r0, r1, d8
 800b636:	f7f4 fe27 	bl	8000288 <__aeabi_dsub>
 800b63a:	2200      	movs	r2, #0
 800b63c:	2300      	movs	r3, #0
 800b63e:	4682      	mov	sl, r0
 800b640:	468b      	mov	fp, r1
 800b642:	f7f5 fa41 	bl	8000ac8 <__aeabi_dcmpeq>
 800b646:	2800      	cmp	r0, #0
 800b648:	d0c1      	beq.n	800b5ce <_strtod_l+0x8de>
 800b64a:	e611      	b.n	800b270 <_strtod_l+0x580>
 800b64c:	fffffc02 	.word	0xfffffc02
 800b650:	7ff00000 	.word	0x7ff00000
 800b654:	39500000 	.word	0x39500000
 800b658:	000fffff 	.word	0x000fffff
 800b65c:	7fefffff 	.word	0x7fefffff
 800b660:	0800fa10 	.word	0x0800fa10
 800b664:	4631      	mov	r1, r6
 800b666:	4628      	mov	r0, r5
 800b668:	f002 f8cc 	bl	800d804 <__ratio>
 800b66c:	ec59 8b10 	vmov	r8, r9, d0
 800b670:	ee10 0a10 	vmov	r0, s0
 800b674:	2200      	movs	r2, #0
 800b676:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800b67a:	4649      	mov	r1, r9
 800b67c:	f7f5 fa38 	bl	8000af0 <__aeabi_dcmple>
 800b680:	2800      	cmp	r0, #0
 800b682:	d07a      	beq.n	800b77a <_strtod_l+0xa8a>
 800b684:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b686:	2b00      	cmp	r3, #0
 800b688:	d04a      	beq.n	800b720 <_strtod_l+0xa30>
 800b68a:	4b95      	ldr	r3, [pc, #596]	; (800b8e0 <_strtod_l+0xbf0>)
 800b68c:	2200      	movs	r2, #0
 800b68e:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b692:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800b8e0 <_strtod_l+0xbf0>
 800b696:	f04f 0800 	mov.w	r8, #0
 800b69a:	4b92      	ldr	r3, [pc, #584]	; (800b8e4 <_strtod_l+0xbf4>)
 800b69c:	403b      	ands	r3, r7
 800b69e:	930d      	str	r3, [sp, #52]	; 0x34
 800b6a0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b6a2:	4b91      	ldr	r3, [pc, #580]	; (800b8e8 <_strtod_l+0xbf8>)
 800b6a4:	429a      	cmp	r2, r3
 800b6a6:	f040 80b0 	bne.w	800b80a <_strtod_l+0xb1a>
 800b6aa:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6ae:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800b6b2:	ec4b ab10 	vmov	d0, sl, fp
 800b6b6:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b6ba:	f001 ffcb 	bl	800d654 <__ulp>
 800b6be:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b6c2:	ec53 2b10 	vmov	r2, r3, d0
 800b6c6:	f7f4 ff97 	bl	80005f8 <__aeabi_dmul>
 800b6ca:	4652      	mov	r2, sl
 800b6cc:	465b      	mov	r3, fp
 800b6ce:	f7f4 fddd 	bl	800028c <__adddf3>
 800b6d2:	460b      	mov	r3, r1
 800b6d4:	4983      	ldr	r1, [pc, #524]	; (800b8e4 <_strtod_l+0xbf4>)
 800b6d6:	4a85      	ldr	r2, [pc, #532]	; (800b8ec <_strtod_l+0xbfc>)
 800b6d8:	4019      	ands	r1, r3
 800b6da:	4291      	cmp	r1, r2
 800b6dc:	4682      	mov	sl, r0
 800b6de:	d960      	bls.n	800b7a2 <_strtod_l+0xab2>
 800b6e0:	ee18 3a90 	vmov	r3, s17
 800b6e4:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800b6e8:	4293      	cmp	r3, r2
 800b6ea:	d104      	bne.n	800b6f6 <_strtod_l+0xa06>
 800b6ec:	ee18 3a10 	vmov	r3, s16
 800b6f0:	3301      	adds	r3, #1
 800b6f2:	f43f ad45 	beq.w	800b180 <_strtod_l+0x490>
 800b6f6:	f8df b200 	ldr.w	fp, [pc, #512]	; 800b8f8 <_strtod_l+0xc08>
 800b6fa:	f04f 3aff 	mov.w	sl, #4294967295
 800b6fe:	9918      	ldr	r1, [sp, #96]	; 0x60
 800b700:	4620      	mov	r0, r4
 800b702:	f001 fc75 	bl	800cff0 <_Bfree>
 800b706:	9905      	ldr	r1, [sp, #20]
 800b708:	4620      	mov	r0, r4
 800b70a:	f001 fc71 	bl	800cff0 <_Bfree>
 800b70e:	4631      	mov	r1, r6
 800b710:	4620      	mov	r0, r4
 800b712:	f001 fc6d 	bl	800cff0 <_Bfree>
 800b716:	4629      	mov	r1, r5
 800b718:	4620      	mov	r0, r4
 800b71a:	f001 fc69 	bl	800cff0 <_Bfree>
 800b71e:	e61a      	b.n	800b356 <_strtod_l+0x666>
 800b720:	f1ba 0f00 	cmp.w	sl, #0
 800b724:	d11b      	bne.n	800b75e <_strtod_l+0xa6e>
 800b726:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b72a:	b9f3      	cbnz	r3, 800b76a <_strtod_l+0xa7a>
 800b72c:	4b6c      	ldr	r3, [pc, #432]	; (800b8e0 <_strtod_l+0xbf0>)
 800b72e:	2200      	movs	r2, #0
 800b730:	4640      	mov	r0, r8
 800b732:	4649      	mov	r1, r9
 800b734:	f7f5 f9d2 	bl	8000adc <__aeabi_dcmplt>
 800b738:	b9d0      	cbnz	r0, 800b770 <_strtod_l+0xa80>
 800b73a:	4640      	mov	r0, r8
 800b73c:	4649      	mov	r1, r9
 800b73e:	4b6c      	ldr	r3, [pc, #432]	; (800b8f0 <_strtod_l+0xc00>)
 800b740:	2200      	movs	r2, #0
 800b742:	f7f4 ff59 	bl	80005f8 <__aeabi_dmul>
 800b746:	4680      	mov	r8, r0
 800b748:	4689      	mov	r9, r1
 800b74a:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800b74e:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800b752:	9315      	str	r3, [sp, #84]	; 0x54
 800b754:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800b758:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b75c:	e79d      	b.n	800b69a <_strtod_l+0x9aa>
 800b75e:	f1ba 0f01 	cmp.w	sl, #1
 800b762:	d102      	bne.n	800b76a <_strtod_l+0xa7a>
 800b764:	2f00      	cmp	r7, #0
 800b766:	f43f ad83 	beq.w	800b270 <_strtod_l+0x580>
 800b76a:	4b62      	ldr	r3, [pc, #392]	; (800b8f4 <_strtod_l+0xc04>)
 800b76c:	2200      	movs	r2, #0
 800b76e:	e78e      	b.n	800b68e <_strtod_l+0x99e>
 800b770:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800b8f0 <_strtod_l+0xc00>
 800b774:	f04f 0800 	mov.w	r8, #0
 800b778:	e7e7      	b.n	800b74a <_strtod_l+0xa5a>
 800b77a:	4b5d      	ldr	r3, [pc, #372]	; (800b8f0 <_strtod_l+0xc00>)
 800b77c:	4640      	mov	r0, r8
 800b77e:	4649      	mov	r1, r9
 800b780:	2200      	movs	r2, #0
 800b782:	f7f4 ff39 	bl	80005f8 <__aeabi_dmul>
 800b786:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b788:	4680      	mov	r8, r0
 800b78a:	4689      	mov	r9, r1
 800b78c:	b933      	cbnz	r3, 800b79c <_strtod_l+0xaac>
 800b78e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b792:	900e      	str	r0, [sp, #56]	; 0x38
 800b794:	930f      	str	r3, [sp, #60]	; 0x3c
 800b796:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800b79a:	e7dd      	b.n	800b758 <_strtod_l+0xa68>
 800b79c:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800b7a0:	e7f9      	b.n	800b796 <_strtod_l+0xaa6>
 800b7a2:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800b7a6:	9b04      	ldr	r3, [sp, #16]
 800b7a8:	2b00      	cmp	r3, #0
 800b7aa:	d1a8      	bne.n	800b6fe <_strtod_l+0xa0e>
 800b7ac:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7b0:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b7b2:	0d1b      	lsrs	r3, r3, #20
 800b7b4:	051b      	lsls	r3, r3, #20
 800b7b6:	429a      	cmp	r2, r3
 800b7b8:	d1a1      	bne.n	800b6fe <_strtod_l+0xa0e>
 800b7ba:	4640      	mov	r0, r8
 800b7bc:	4649      	mov	r1, r9
 800b7be:	f7f5 fa7b 	bl	8000cb8 <__aeabi_d2lz>
 800b7c2:	f7f4 feeb 	bl	800059c <__aeabi_l2d>
 800b7c6:	4602      	mov	r2, r0
 800b7c8:	460b      	mov	r3, r1
 800b7ca:	4640      	mov	r0, r8
 800b7cc:	4649      	mov	r1, r9
 800b7ce:	f7f4 fd5b 	bl	8000288 <__aeabi_dsub>
 800b7d2:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800b7d4:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7d8:	ea43 030a 	orr.w	r3, r3, sl
 800b7dc:	4313      	orrs	r3, r2
 800b7de:	4680      	mov	r8, r0
 800b7e0:	4689      	mov	r9, r1
 800b7e2:	d055      	beq.n	800b890 <_strtod_l+0xba0>
 800b7e4:	a336      	add	r3, pc, #216	; (adr r3, 800b8c0 <_strtod_l+0xbd0>)
 800b7e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7ea:	f7f5 f977 	bl	8000adc <__aeabi_dcmplt>
 800b7ee:	2800      	cmp	r0, #0
 800b7f0:	f47f acd0 	bne.w	800b194 <_strtod_l+0x4a4>
 800b7f4:	a334      	add	r3, pc, #208	; (adr r3, 800b8c8 <_strtod_l+0xbd8>)
 800b7f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b7fa:	4640      	mov	r0, r8
 800b7fc:	4649      	mov	r1, r9
 800b7fe:	f7f5 f98b 	bl	8000b18 <__aeabi_dcmpgt>
 800b802:	2800      	cmp	r0, #0
 800b804:	f43f af7b 	beq.w	800b6fe <_strtod_l+0xa0e>
 800b808:	e4c4      	b.n	800b194 <_strtod_l+0x4a4>
 800b80a:	9b04      	ldr	r3, [sp, #16]
 800b80c:	b333      	cbz	r3, 800b85c <_strtod_l+0xb6c>
 800b80e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b810:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800b814:	d822      	bhi.n	800b85c <_strtod_l+0xb6c>
 800b816:	a32e      	add	r3, pc, #184	; (adr r3, 800b8d0 <_strtod_l+0xbe0>)
 800b818:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b81c:	4640      	mov	r0, r8
 800b81e:	4649      	mov	r1, r9
 800b820:	f7f5 f966 	bl	8000af0 <__aeabi_dcmple>
 800b824:	b1a0      	cbz	r0, 800b850 <_strtod_l+0xb60>
 800b826:	4649      	mov	r1, r9
 800b828:	4640      	mov	r0, r8
 800b82a:	f7f5 f9bd 	bl	8000ba8 <__aeabi_d2uiz>
 800b82e:	2801      	cmp	r0, #1
 800b830:	bf38      	it	cc
 800b832:	2001      	movcc	r0, #1
 800b834:	f7f4 fe66 	bl	8000504 <__aeabi_ui2d>
 800b838:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b83a:	4680      	mov	r8, r0
 800b83c:	4689      	mov	r9, r1
 800b83e:	bb23      	cbnz	r3, 800b88a <_strtod_l+0xb9a>
 800b840:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800b844:	9010      	str	r0, [sp, #64]	; 0x40
 800b846:	9311      	str	r3, [sp, #68]	; 0x44
 800b848:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800b84c:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800b850:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b852:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800b854:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800b858:	1a9b      	subs	r3, r3, r2
 800b85a:	9309      	str	r3, [sp, #36]	; 0x24
 800b85c:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b860:	eeb0 0a48 	vmov.f32	s0, s16
 800b864:	eef0 0a68 	vmov.f32	s1, s17
 800b868:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800b86c:	f001 fef2 	bl	800d654 <__ulp>
 800b870:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800b874:	ec53 2b10 	vmov	r2, r3, d0
 800b878:	f7f4 febe 	bl	80005f8 <__aeabi_dmul>
 800b87c:	ec53 2b18 	vmov	r2, r3, d8
 800b880:	f7f4 fd04 	bl	800028c <__adddf3>
 800b884:	4682      	mov	sl, r0
 800b886:	468b      	mov	fp, r1
 800b888:	e78d      	b.n	800b7a6 <_strtod_l+0xab6>
 800b88a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800b88e:	e7db      	b.n	800b848 <_strtod_l+0xb58>
 800b890:	a311      	add	r3, pc, #68	; (adr r3, 800b8d8 <_strtod_l+0xbe8>)
 800b892:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b896:	f7f5 f921 	bl	8000adc <__aeabi_dcmplt>
 800b89a:	e7b2      	b.n	800b802 <_strtod_l+0xb12>
 800b89c:	2300      	movs	r3, #0
 800b89e:	930a      	str	r3, [sp, #40]	; 0x28
 800b8a0:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800b8a2:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800b8a4:	6013      	str	r3, [r2, #0]
 800b8a6:	f7ff ba6b 	b.w	800ad80 <_strtod_l+0x90>
 800b8aa:	2a65      	cmp	r2, #101	; 0x65
 800b8ac:	f43f ab5f 	beq.w	800af6e <_strtod_l+0x27e>
 800b8b0:	2a45      	cmp	r2, #69	; 0x45
 800b8b2:	f43f ab5c 	beq.w	800af6e <_strtod_l+0x27e>
 800b8b6:	2301      	movs	r3, #1
 800b8b8:	f7ff bb94 	b.w	800afe4 <_strtod_l+0x2f4>
 800b8bc:	f3af 8000 	nop.w
 800b8c0:	94a03595 	.word	0x94a03595
 800b8c4:	3fdfffff 	.word	0x3fdfffff
 800b8c8:	35afe535 	.word	0x35afe535
 800b8cc:	3fe00000 	.word	0x3fe00000
 800b8d0:	ffc00000 	.word	0xffc00000
 800b8d4:	41dfffff 	.word	0x41dfffff
 800b8d8:	94a03595 	.word	0x94a03595
 800b8dc:	3fcfffff 	.word	0x3fcfffff
 800b8e0:	3ff00000 	.word	0x3ff00000
 800b8e4:	7ff00000 	.word	0x7ff00000
 800b8e8:	7fe00000 	.word	0x7fe00000
 800b8ec:	7c9fffff 	.word	0x7c9fffff
 800b8f0:	3fe00000 	.word	0x3fe00000
 800b8f4:	bff00000 	.word	0xbff00000
 800b8f8:	7fefffff 	.word	0x7fefffff

0800b8fc <_strtod_r>:
 800b8fc:	4b01      	ldr	r3, [pc, #4]	; (800b904 <_strtod_r+0x8>)
 800b8fe:	f7ff b9f7 	b.w	800acf0 <_strtod_l>
 800b902:	bf00      	nop
 800b904:	20000088 	.word	0x20000088

0800b908 <strtod>:
 800b908:	460a      	mov	r2, r1
 800b90a:	4601      	mov	r1, r0
 800b90c:	4802      	ldr	r0, [pc, #8]	; (800b918 <strtod+0x10>)
 800b90e:	4b03      	ldr	r3, [pc, #12]	; (800b91c <strtod+0x14>)
 800b910:	6800      	ldr	r0, [r0, #0]
 800b912:	f7ff b9ed 	b.w	800acf0 <_strtod_l>
 800b916:	bf00      	nop
 800b918:	20000020 	.word	0x20000020
 800b91c:	20000088 	.word	0x20000088

0800b920 <strtok>:
 800b920:	4b16      	ldr	r3, [pc, #88]	; (800b97c <strtok+0x5c>)
 800b922:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800b924:	681e      	ldr	r6, [r3, #0]
 800b926:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800b928:	4605      	mov	r5, r0
 800b92a:	b9fc      	cbnz	r4, 800b96c <strtok+0x4c>
 800b92c:	2050      	movs	r0, #80	; 0x50
 800b92e:	9101      	str	r1, [sp, #4]
 800b930:	f001 faf6 	bl	800cf20 <malloc>
 800b934:	9901      	ldr	r1, [sp, #4]
 800b936:	65b0      	str	r0, [r6, #88]	; 0x58
 800b938:	4602      	mov	r2, r0
 800b93a:	b920      	cbnz	r0, 800b946 <strtok+0x26>
 800b93c:	4b10      	ldr	r3, [pc, #64]	; (800b980 <strtok+0x60>)
 800b93e:	4811      	ldr	r0, [pc, #68]	; (800b984 <strtok+0x64>)
 800b940:	2157      	movs	r1, #87	; 0x57
 800b942:	f000 f8cd 	bl	800bae0 <__assert_func>
 800b946:	e9c0 4400 	strd	r4, r4, [r0]
 800b94a:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800b94e:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800b952:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800b956:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800b95a:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800b95e:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800b962:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800b966:	6184      	str	r4, [r0, #24]
 800b968:	7704      	strb	r4, [r0, #28]
 800b96a:	6244      	str	r4, [r0, #36]	; 0x24
 800b96c:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800b96e:	2301      	movs	r3, #1
 800b970:	4628      	mov	r0, r5
 800b972:	b002      	add	sp, #8
 800b974:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800b978:	f000 b806 	b.w	800b988 <__strtok_r>
 800b97c:	20000020 	.word	0x20000020
 800b980:	0800fa38 	.word	0x0800fa38
 800b984:	0800fa4f 	.word	0x0800fa4f

0800b988 <__strtok_r>:
 800b988:	b5f0      	push	{r4, r5, r6, r7, lr}
 800b98a:	b908      	cbnz	r0, 800b990 <__strtok_r+0x8>
 800b98c:	6810      	ldr	r0, [r2, #0]
 800b98e:	b188      	cbz	r0, 800b9b4 <__strtok_r+0x2c>
 800b990:	4604      	mov	r4, r0
 800b992:	4620      	mov	r0, r4
 800b994:	f814 5b01 	ldrb.w	r5, [r4], #1
 800b998:	460f      	mov	r7, r1
 800b99a:	f817 6b01 	ldrb.w	r6, [r7], #1
 800b99e:	b91e      	cbnz	r6, 800b9a8 <__strtok_r+0x20>
 800b9a0:	b965      	cbnz	r5, 800b9bc <__strtok_r+0x34>
 800b9a2:	6015      	str	r5, [r2, #0]
 800b9a4:	4628      	mov	r0, r5
 800b9a6:	e005      	b.n	800b9b4 <__strtok_r+0x2c>
 800b9a8:	42b5      	cmp	r5, r6
 800b9aa:	d1f6      	bne.n	800b99a <__strtok_r+0x12>
 800b9ac:	2b00      	cmp	r3, #0
 800b9ae:	d1f0      	bne.n	800b992 <__strtok_r+0xa>
 800b9b0:	6014      	str	r4, [r2, #0]
 800b9b2:	7003      	strb	r3, [r0, #0]
 800b9b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800b9b6:	461c      	mov	r4, r3
 800b9b8:	e00c      	b.n	800b9d4 <__strtok_r+0x4c>
 800b9ba:	b915      	cbnz	r5, 800b9c2 <__strtok_r+0x3a>
 800b9bc:	f814 3b01 	ldrb.w	r3, [r4], #1
 800b9c0:	460e      	mov	r6, r1
 800b9c2:	f816 5b01 	ldrb.w	r5, [r6], #1
 800b9c6:	42ab      	cmp	r3, r5
 800b9c8:	d1f7      	bne.n	800b9ba <__strtok_r+0x32>
 800b9ca:	2b00      	cmp	r3, #0
 800b9cc:	d0f3      	beq.n	800b9b6 <__strtok_r+0x2e>
 800b9ce:	2300      	movs	r3, #0
 800b9d0:	f804 3c01 	strb.w	r3, [r4, #-1]
 800b9d4:	6014      	str	r4, [r2, #0]
 800b9d6:	e7ed      	b.n	800b9b4 <__strtok_r+0x2c>

0800b9d8 <_strtol_l.constprop.0>:
 800b9d8:	2b01      	cmp	r3, #1
 800b9da:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800b9de:	d001      	beq.n	800b9e4 <_strtol_l.constprop.0+0xc>
 800b9e0:	2b24      	cmp	r3, #36	; 0x24
 800b9e2:	d906      	bls.n	800b9f2 <_strtol_l.constprop.0+0x1a>
 800b9e4:	f7fe fa94 	bl	8009f10 <__errno>
 800b9e8:	2316      	movs	r3, #22
 800b9ea:	6003      	str	r3, [r0, #0]
 800b9ec:	2000      	movs	r0, #0
 800b9ee:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800b9f2:	f8df c0e4 	ldr.w	ip, [pc, #228]	; 800bad8 <_strtol_l.constprop.0+0x100>
 800b9f6:	460d      	mov	r5, r1
 800b9f8:	462e      	mov	r6, r5
 800b9fa:	f815 4b01 	ldrb.w	r4, [r5], #1
 800b9fe:	f814 700c 	ldrb.w	r7, [r4, ip]
 800ba02:	f017 0708 	ands.w	r7, r7, #8
 800ba06:	d1f7      	bne.n	800b9f8 <_strtol_l.constprop.0+0x20>
 800ba08:	2c2d      	cmp	r4, #45	; 0x2d
 800ba0a:	d132      	bne.n	800ba72 <_strtol_l.constprop.0+0x9a>
 800ba0c:	782c      	ldrb	r4, [r5, #0]
 800ba0e:	2701      	movs	r7, #1
 800ba10:	1cb5      	adds	r5, r6, #2
 800ba12:	2b00      	cmp	r3, #0
 800ba14:	d05b      	beq.n	800bace <_strtol_l.constprop.0+0xf6>
 800ba16:	2b10      	cmp	r3, #16
 800ba18:	d109      	bne.n	800ba2e <_strtol_l.constprop.0+0x56>
 800ba1a:	2c30      	cmp	r4, #48	; 0x30
 800ba1c:	d107      	bne.n	800ba2e <_strtol_l.constprop.0+0x56>
 800ba1e:	782c      	ldrb	r4, [r5, #0]
 800ba20:	f004 04df 	and.w	r4, r4, #223	; 0xdf
 800ba24:	2c58      	cmp	r4, #88	; 0x58
 800ba26:	d14d      	bne.n	800bac4 <_strtol_l.constprop.0+0xec>
 800ba28:	786c      	ldrb	r4, [r5, #1]
 800ba2a:	2310      	movs	r3, #16
 800ba2c:	3502      	adds	r5, #2
 800ba2e:	f107 4800 	add.w	r8, r7, #2147483648	; 0x80000000
 800ba32:	f108 38ff 	add.w	r8, r8, #4294967295
 800ba36:	f04f 0c00 	mov.w	ip, #0
 800ba3a:	fbb8 f9f3 	udiv	r9, r8, r3
 800ba3e:	4666      	mov	r6, ip
 800ba40:	fb03 8a19 	mls	sl, r3, r9, r8
 800ba44:	f1a4 0e30 	sub.w	lr, r4, #48	; 0x30
 800ba48:	f1be 0f09 	cmp.w	lr, #9
 800ba4c:	d816      	bhi.n	800ba7c <_strtol_l.constprop.0+0xa4>
 800ba4e:	4674      	mov	r4, lr
 800ba50:	42a3      	cmp	r3, r4
 800ba52:	dd24      	ble.n	800ba9e <_strtol_l.constprop.0+0xc6>
 800ba54:	f1bc 0f00 	cmp.w	ip, #0
 800ba58:	db1e      	blt.n	800ba98 <_strtol_l.constprop.0+0xc0>
 800ba5a:	45b1      	cmp	r9, r6
 800ba5c:	d31c      	bcc.n	800ba98 <_strtol_l.constprop.0+0xc0>
 800ba5e:	d101      	bne.n	800ba64 <_strtol_l.constprop.0+0x8c>
 800ba60:	45a2      	cmp	sl, r4
 800ba62:	db19      	blt.n	800ba98 <_strtol_l.constprop.0+0xc0>
 800ba64:	fb06 4603 	mla	r6, r6, r3, r4
 800ba68:	f04f 0c01 	mov.w	ip, #1
 800ba6c:	f815 4b01 	ldrb.w	r4, [r5], #1
 800ba70:	e7e8      	b.n	800ba44 <_strtol_l.constprop.0+0x6c>
 800ba72:	2c2b      	cmp	r4, #43	; 0x2b
 800ba74:	bf04      	itt	eq
 800ba76:	782c      	ldrbeq	r4, [r5, #0]
 800ba78:	1cb5      	addeq	r5, r6, #2
 800ba7a:	e7ca      	b.n	800ba12 <_strtol_l.constprop.0+0x3a>
 800ba7c:	f1a4 0e41 	sub.w	lr, r4, #65	; 0x41
 800ba80:	f1be 0f19 	cmp.w	lr, #25
 800ba84:	d801      	bhi.n	800ba8a <_strtol_l.constprop.0+0xb2>
 800ba86:	3c37      	subs	r4, #55	; 0x37
 800ba88:	e7e2      	b.n	800ba50 <_strtol_l.constprop.0+0x78>
 800ba8a:	f1a4 0e61 	sub.w	lr, r4, #97	; 0x61
 800ba8e:	f1be 0f19 	cmp.w	lr, #25
 800ba92:	d804      	bhi.n	800ba9e <_strtol_l.constprop.0+0xc6>
 800ba94:	3c57      	subs	r4, #87	; 0x57
 800ba96:	e7db      	b.n	800ba50 <_strtol_l.constprop.0+0x78>
 800ba98:	f04f 3cff 	mov.w	ip, #4294967295
 800ba9c:	e7e6      	b.n	800ba6c <_strtol_l.constprop.0+0x94>
 800ba9e:	f1bc 0f00 	cmp.w	ip, #0
 800baa2:	da05      	bge.n	800bab0 <_strtol_l.constprop.0+0xd8>
 800baa4:	2322      	movs	r3, #34	; 0x22
 800baa6:	6003      	str	r3, [r0, #0]
 800baa8:	4646      	mov	r6, r8
 800baaa:	b942      	cbnz	r2, 800babe <_strtol_l.constprop.0+0xe6>
 800baac:	4630      	mov	r0, r6
 800baae:	e79e      	b.n	800b9ee <_strtol_l.constprop.0+0x16>
 800bab0:	b107      	cbz	r7, 800bab4 <_strtol_l.constprop.0+0xdc>
 800bab2:	4276      	negs	r6, r6
 800bab4:	2a00      	cmp	r2, #0
 800bab6:	d0f9      	beq.n	800baac <_strtol_l.constprop.0+0xd4>
 800bab8:	f1bc 0f00 	cmp.w	ip, #0
 800babc:	d000      	beq.n	800bac0 <_strtol_l.constprop.0+0xe8>
 800babe:	1e69      	subs	r1, r5, #1
 800bac0:	6011      	str	r1, [r2, #0]
 800bac2:	e7f3      	b.n	800baac <_strtol_l.constprop.0+0xd4>
 800bac4:	2430      	movs	r4, #48	; 0x30
 800bac6:	2b00      	cmp	r3, #0
 800bac8:	d1b1      	bne.n	800ba2e <_strtol_l.constprop.0+0x56>
 800baca:	2308      	movs	r3, #8
 800bacc:	e7af      	b.n	800ba2e <_strtol_l.constprop.0+0x56>
 800bace:	2c30      	cmp	r4, #48	; 0x30
 800bad0:	d0a5      	beq.n	800ba1e <_strtol_l.constprop.0+0x46>
 800bad2:	230a      	movs	r3, #10
 800bad4:	e7ab      	b.n	800ba2e <_strtol_l.constprop.0+0x56>
 800bad6:	bf00      	nop
 800bad8:	0800fae9 	.word	0x0800fae9

0800badc <_strtol_r>:
 800badc:	f7ff bf7c 	b.w	800b9d8 <_strtol_l.constprop.0>

0800bae0 <__assert_func>:
 800bae0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800bae2:	4614      	mov	r4, r2
 800bae4:	461a      	mov	r2, r3
 800bae6:	4b09      	ldr	r3, [pc, #36]	; (800bb0c <__assert_func+0x2c>)
 800bae8:	681b      	ldr	r3, [r3, #0]
 800baea:	4605      	mov	r5, r0
 800baec:	68d8      	ldr	r0, [r3, #12]
 800baee:	b14c      	cbz	r4, 800bb04 <__assert_func+0x24>
 800baf0:	4b07      	ldr	r3, [pc, #28]	; (800bb10 <__assert_func+0x30>)
 800baf2:	9100      	str	r1, [sp, #0]
 800baf4:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800baf8:	4906      	ldr	r1, [pc, #24]	; (800bb14 <__assert_func+0x34>)
 800bafa:	462b      	mov	r3, r5
 800bafc:	f000 fe8a 	bl	800c814 <fiprintf>
 800bb00:	f002 fba0 	bl	800e244 <abort>
 800bb04:	4b04      	ldr	r3, [pc, #16]	; (800bb18 <__assert_func+0x38>)
 800bb06:	461c      	mov	r4, r3
 800bb08:	e7f3      	b.n	800baf2 <__assert_func+0x12>
 800bb0a:	bf00      	nop
 800bb0c:	20000020 	.word	0x20000020
 800bb10:	0800faac 	.word	0x0800faac
 800bb14:	0800fab9 	.word	0x0800fab9
 800bb18:	0800fae7 	.word	0x0800fae7

0800bb1c <quorem>:
 800bb1c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bb20:	6903      	ldr	r3, [r0, #16]
 800bb22:	690c      	ldr	r4, [r1, #16]
 800bb24:	42a3      	cmp	r3, r4
 800bb26:	4607      	mov	r7, r0
 800bb28:	f2c0 8081 	blt.w	800bc2e <quorem+0x112>
 800bb2c:	3c01      	subs	r4, #1
 800bb2e:	f101 0814 	add.w	r8, r1, #20
 800bb32:	f100 0514 	add.w	r5, r0, #20
 800bb36:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bb3a:	9301      	str	r3, [sp, #4]
 800bb3c:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800bb40:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bb44:	3301      	adds	r3, #1
 800bb46:	429a      	cmp	r2, r3
 800bb48:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800bb4c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800bb50:	fbb2 f6f3 	udiv	r6, r2, r3
 800bb54:	d331      	bcc.n	800bbba <quorem+0x9e>
 800bb56:	f04f 0e00 	mov.w	lr, #0
 800bb5a:	4640      	mov	r0, r8
 800bb5c:	46ac      	mov	ip, r5
 800bb5e:	46f2      	mov	sl, lr
 800bb60:	f850 2b04 	ldr.w	r2, [r0], #4
 800bb64:	b293      	uxth	r3, r2
 800bb66:	fb06 e303 	mla	r3, r6, r3, lr
 800bb6a:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800bb6e:	b29b      	uxth	r3, r3
 800bb70:	ebaa 0303 	sub.w	r3, sl, r3
 800bb74:	f8dc a000 	ldr.w	sl, [ip]
 800bb78:	0c12      	lsrs	r2, r2, #16
 800bb7a:	fa13 f38a 	uxtah	r3, r3, sl
 800bb7e:	fb06 e202 	mla	r2, r6, r2, lr
 800bb82:	9300      	str	r3, [sp, #0]
 800bb84:	9b00      	ldr	r3, [sp, #0]
 800bb86:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800bb8a:	b292      	uxth	r2, r2
 800bb8c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800bb90:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bb94:	f8bd 3000 	ldrh.w	r3, [sp]
 800bb98:	4581      	cmp	r9, r0
 800bb9a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bb9e:	f84c 3b04 	str.w	r3, [ip], #4
 800bba2:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800bba6:	d2db      	bcs.n	800bb60 <quorem+0x44>
 800bba8:	f855 300b 	ldr.w	r3, [r5, fp]
 800bbac:	b92b      	cbnz	r3, 800bbba <quorem+0x9e>
 800bbae:	9b01      	ldr	r3, [sp, #4]
 800bbb0:	3b04      	subs	r3, #4
 800bbb2:	429d      	cmp	r5, r3
 800bbb4:	461a      	mov	r2, r3
 800bbb6:	d32e      	bcc.n	800bc16 <quorem+0xfa>
 800bbb8:	613c      	str	r4, [r7, #16]
 800bbba:	4638      	mov	r0, r7
 800bbbc:	f001 fca4 	bl	800d508 <__mcmp>
 800bbc0:	2800      	cmp	r0, #0
 800bbc2:	db24      	blt.n	800bc0e <quorem+0xf2>
 800bbc4:	3601      	adds	r6, #1
 800bbc6:	4628      	mov	r0, r5
 800bbc8:	f04f 0c00 	mov.w	ip, #0
 800bbcc:	f858 2b04 	ldr.w	r2, [r8], #4
 800bbd0:	f8d0 e000 	ldr.w	lr, [r0]
 800bbd4:	b293      	uxth	r3, r2
 800bbd6:	ebac 0303 	sub.w	r3, ip, r3
 800bbda:	0c12      	lsrs	r2, r2, #16
 800bbdc:	fa13 f38e 	uxtah	r3, r3, lr
 800bbe0:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800bbe4:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800bbe8:	b29b      	uxth	r3, r3
 800bbea:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800bbee:	45c1      	cmp	r9, r8
 800bbf0:	f840 3b04 	str.w	r3, [r0], #4
 800bbf4:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800bbf8:	d2e8      	bcs.n	800bbcc <quorem+0xb0>
 800bbfa:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800bbfe:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800bc02:	b922      	cbnz	r2, 800bc0e <quorem+0xf2>
 800bc04:	3b04      	subs	r3, #4
 800bc06:	429d      	cmp	r5, r3
 800bc08:	461a      	mov	r2, r3
 800bc0a:	d30a      	bcc.n	800bc22 <quorem+0x106>
 800bc0c:	613c      	str	r4, [r7, #16]
 800bc0e:	4630      	mov	r0, r6
 800bc10:	b003      	add	sp, #12
 800bc12:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bc16:	6812      	ldr	r2, [r2, #0]
 800bc18:	3b04      	subs	r3, #4
 800bc1a:	2a00      	cmp	r2, #0
 800bc1c:	d1cc      	bne.n	800bbb8 <quorem+0x9c>
 800bc1e:	3c01      	subs	r4, #1
 800bc20:	e7c7      	b.n	800bbb2 <quorem+0x96>
 800bc22:	6812      	ldr	r2, [r2, #0]
 800bc24:	3b04      	subs	r3, #4
 800bc26:	2a00      	cmp	r2, #0
 800bc28:	d1f0      	bne.n	800bc0c <quorem+0xf0>
 800bc2a:	3c01      	subs	r4, #1
 800bc2c:	e7eb      	b.n	800bc06 <quorem+0xea>
 800bc2e:	2000      	movs	r0, #0
 800bc30:	e7ee      	b.n	800bc10 <quorem+0xf4>
 800bc32:	0000      	movs	r0, r0
 800bc34:	0000      	movs	r0, r0
	...

0800bc38 <_dtoa_r>:
 800bc38:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc3c:	ed2d 8b04 	vpush	{d8-d9}
 800bc40:	ec57 6b10 	vmov	r6, r7, d0
 800bc44:	b093      	sub	sp, #76	; 0x4c
 800bc46:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800bc48:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800bc4c:	9106      	str	r1, [sp, #24]
 800bc4e:	ee10 aa10 	vmov	sl, s0
 800bc52:	4604      	mov	r4, r0
 800bc54:	9209      	str	r2, [sp, #36]	; 0x24
 800bc56:	930c      	str	r3, [sp, #48]	; 0x30
 800bc58:	46bb      	mov	fp, r7
 800bc5a:	b975      	cbnz	r5, 800bc7a <_dtoa_r+0x42>
 800bc5c:	2010      	movs	r0, #16
 800bc5e:	f001 f95f 	bl	800cf20 <malloc>
 800bc62:	4602      	mov	r2, r0
 800bc64:	6260      	str	r0, [r4, #36]	; 0x24
 800bc66:	b920      	cbnz	r0, 800bc72 <_dtoa_r+0x3a>
 800bc68:	4ba7      	ldr	r3, [pc, #668]	; (800bf08 <_dtoa_r+0x2d0>)
 800bc6a:	21ea      	movs	r1, #234	; 0xea
 800bc6c:	48a7      	ldr	r0, [pc, #668]	; (800bf0c <_dtoa_r+0x2d4>)
 800bc6e:	f7ff ff37 	bl	800bae0 <__assert_func>
 800bc72:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800bc76:	6005      	str	r5, [r0, #0]
 800bc78:	60c5      	str	r5, [r0, #12]
 800bc7a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc7c:	6819      	ldr	r1, [r3, #0]
 800bc7e:	b151      	cbz	r1, 800bc96 <_dtoa_r+0x5e>
 800bc80:	685a      	ldr	r2, [r3, #4]
 800bc82:	604a      	str	r2, [r1, #4]
 800bc84:	2301      	movs	r3, #1
 800bc86:	4093      	lsls	r3, r2
 800bc88:	608b      	str	r3, [r1, #8]
 800bc8a:	4620      	mov	r0, r4
 800bc8c:	f001 f9b0 	bl	800cff0 <_Bfree>
 800bc90:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bc92:	2200      	movs	r2, #0
 800bc94:	601a      	str	r2, [r3, #0]
 800bc96:	1e3b      	subs	r3, r7, #0
 800bc98:	bfaa      	itet	ge
 800bc9a:	2300      	movge	r3, #0
 800bc9c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800bca0:	f8c8 3000 	strge.w	r3, [r8]
 800bca4:	4b9a      	ldr	r3, [pc, #616]	; (800bf10 <_dtoa_r+0x2d8>)
 800bca6:	bfbc      	itt	lt
 800bca8:	2201      	movlt	r2, #1
 800bcaa:	f8c8 2000 	strlt.w	r2, [r8]
 800bcae:	ea33 030b 	bics.w	r3, r3, fp
 800bcb2:	d11b      	bne.n	800bcec <_dtoa_r+0xb4>
 800bcb4:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bcb6:	f242 730f 	movw	r3, #9999	; 0x270f
 800bcba:	6013      	str	r3, [r2, #0]
 800bcbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800bcc0:	4333      	orrs	r3, r6
 800bcc2:	f000 8592 	beq.w	800c7ea <_dtoa_r+0xbb2>
 800bcc6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bcc8:	b963      	cbnz	r3, 800bce4 <_dtoa_r+0xac>
 800bcca:	4b92      	ldr	r3, [pc, #584]	; (800bf14 <_dtoa_r+0x2dc>)
 800bccc:	e022      	b.n	800bd14 <_dtoa_r+0xdc>
 800bcce:	4b92      	ldr	r3, [pc, #584]	; (800bf18 <_dtoa_r+0x2e0>)
 800bcd0:	9301      	str	r3, [sp, #4]
 800bcd2:	3308      	adds	r3, #8
 800bcd4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800bcd6:	6013      	str	r3, [r2, #0]
 800bcd8:	9801      	ldr	r0, [sp, #4]
 800bcda:	b013      	add	sp, #76	; 0x4c
 800bcdc:	ecbd 8b04 	vpop	{d8-d9}
 800bce0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bce4:	4b8b      	ldr	r3, [pc, #556]	; (800bf14 <_dtoa_r+0x2dc>)
 800bce6:	9301      	str	r3, [sp, #4]
 800bce8:	3303      	adds	r3, #3
 800bcea:	e7f3      	b.n	800bcd4 <_dtoa_r+0x9c>
 800bcec:	2200      	movs	r2, #0
 800bcee:	2300      	movs	r3, #0
 800bcf0:	4650      	mov	r0, sl
 800bcf2:	4659      	mov	r1, fp
 800bcf4:	f7f4 fee8 	bl	8000ac8 <__aeabi_dcmpeq>
 800bcf8:	ec4b ab19 	vmov	d9, sl, fp
 800bcfc:	4680      	mov	r8, r0
 800bcfe:	b158      	cbz	r0, 800bd18 <_dtoa_r+0xe0>
 800bd00:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800bd02:	2301      	movs	r3, #1
 800bd04:	6013      	str	r3, [r2, #0]
 800bd06:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bd08:	2b00      	cmp	r3, #0
 800bd0a:	f000 856b 	beq.w	800c7e4 <_dtoa_r+0xbac>
 800bd0e:	4883      	ldr	r0, [pc, #524]	; (800bf1c <_dtoa_r+0x2e4>)
 800bd10:	6018      	str	r0, [r3, #0]
 800bd12:	1e43      	subs	r3, r0, #1
 800bd14:	9301      	str	r3, [sp, #4]
 800bd16:	e7df      	b.n	800bcd8 <_dtoa_r+0xa0>
 800bd18:	ec4b ab10 	vmov	d0, sl, fp
 800bd1c:	aa10      	add	r2, sp, #64	; 0x40
 800bd1e:	a911      	add	r1, sp, #68	; 0x44
 800bd20:	4620      	mov	r0, r4
 800bd22:	f001 fd13 	bl	800d74c <__d2b>
 800bd26:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800bd2a:	ee08 0a10 	vmov	s16, r0
 800bd2e:	2d00      	cmp	r5, #0
 800bd30:	f000 8084 	beq.w	800be3c <_dtoa_r+0x204>
 800bd34:	ee19 3a90 	vmov	r3, s19
 800bd38:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800bd3c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800bd40:	4656      	mov	r6, sl
 800bd42:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800bd46:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800bd4a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800bd4e:	4b74      	ldr	r3, [pc, #464]	; (800bf20 <_dtoa_r+0x2e8>)
 800bd50:	2200      	movs	r2, #0
 800bd52:	4630      	mov	r0, r6
 800bd54:	4639      	mov	r1, r7
 800bd56:	f7f4 fa97 	bl	8000288 <__aeabi_dsub>
 800bd5a:	a365      	add	r3, pc, #404	; (adr r3, 800bef0 <_dtoa_r+0x2b8>)
 800bd5c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd60:	f7f4 fc4a 	bl	80005f8 <__aeabi_dmul>
 800bd64:	a364      	add	r3, pc, #400	; (adr r3, 800bef8 <_dtoa_r+0x2c0>)
 800bd66:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd6a:	f7f4 fa8f 	bl	800028c <__adddf3>
 800bd6e:	4606      	mov	r6, r0
 800bd70:	4628      	mov	r0, r5
 800bd72:	460f      	mov	r7, r1
 800bd74:	f7f4 fbd6 	bl	8000524 <__aeabi_i2d>
 800bd78:	a361      	add	r3, pc, #388	; (adr r3, 800bf00 <_dtoa_r+0x2c8>)
 800bd7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bd7e:	f7f4 fc3b 	bl	80005f8 <__aeabi_dmul>
 800bd82:	4602      	mov	r2, r0
 800bd84:	460b      	mov	r3, r1
 800bd86:	4630      	mov	r0, r6
 800bd88:	4639      	mov	r1, r7
 800bd8a:	f7f4 fa7f 	bl	800028c <__adddf3>
 800bd8e:	4606      	mov	r6, r0
 800bd90:	460f      	mov	r7, r1
 800bd92:	f7f4 fee1 	bl	8000b58 <__aeabi_d2iz>
 800bd96:	2200      	movs	r2, #0
 800bd98:	9000      	str	r0, [sp, #0]
 800bd9a:	2300      	movs	r3, #0
 800bd9c:	4630      	mov	r0, r6
 800bd9e:	4639      	mov	r1, r7
 800bda0:	f7f4 fe9c 	bl	8000adc <__aeabi_dcmplt>
 800bda4:	b150      	cbz	r0, 800bdbc <_dtoa_r+0x184>
 800bda6:	9800      	ldr	r0, [sp, #0]
 800bda8:	f7f4 fbbc 	bl	8000524 <__aeabi_i2d>
 800bdac:	4632      	mov	r2, r6
 800bdae:	463b      	mov	r3, r7
 800bdb0:	f7f4 fe8a 	bl	8000ac8 <__aeabi_dcmpeq>
 800bdb4:	b910      	cbnz	r0, 800bdbc <_dtoa_r+0x184>
 800bdb6:	9b00      	ldr	r3, [sp, #0]
 800bdb8:	3b01      	subs	r3, #1
 800bdba:	9300      	str	r3, [sp, #0]
 800bdbc:	9b00      	ldr	r3, [sp, #0]
 800bdbe:	2b16      	cmp	r3, #22
 800bdc0:	d85a      	bhi.n	800be78 <_dtoa_r+0x240>
 800bdc2:	9a00      	ldr	r2, [sp, #0]
 800bdc4:	4b57      	ldr	r3, [pc, #348]	; (800bf24 <_dtoa_r+0x2ec>)
 800bdc6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bdca:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bdce:	ec51 0b19 	vmov	r0, r1, d9
 800bdd2:	f7f4 fe83 	bl	8000adc <__aeabi_dcmplt>
 800bdd6:	2800      	cmp	r0, #0
 800bdd8:	d050      	beq.n	800be7c <_dtoa_r+0x244>
 800bdda:	9b00      	ldr	r3, [sp, #0]
 800bddc:	3b01      	subs	r3, #1
 800bdde:	9300      	str	r3, [sp, #0]
 800bde0:	2300      	movs	r3, #0
 800bde2:	930b      	str	r3, [sp, #44]	; 0x2c
 800bde4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800bde6:	1b5d      	subs	r5, r3, r5
 800bde8:	1e6b      	subs	r3, r5, #1
 800bdea:	9305      	str	r3, [sp, #20]
 800bdec:	bf45      	ittet	mi
 800bdee:	f1c5 0301 	rsbmi	r3, r5, #1
 800bdf2:	9304      	strmi	r3, [sp, #16]
 800bdf4:	2300      	movpl	r3, #0
 800bdf6:	2300      	movmi	r3, #0
 800bdf8:	bf4c      	ite	mi
 800bdfa:	9305      	strmi	r3, [sp, #20]
 800bdfc:	9304      	strpl	r3, [sp, #16]
 800bdfe:	9b00      	ldr	r3, [sp, #0]
 800be00:	2b00      	cmp	r3, #0
 800be02:	db3d      	blt.n	800be80 <_dtoa_r+0x248>
 800be04:	9b05      	ldr	r3, [sp, #20]
 800be06:	9a00      	ldr	r2, [sp, #0]
 800be08:	920a      	str	r2, [sp, #40]	; 0x28
 800be0a:	4413      	add	r3, r2
 800be0c:	9305      	str	r3, [sp, #20]
 800be0e:	2300      	movs	r3, #0
 800be10:	9307      	str	r3, [sp, #28]
 800be12:	9b06      	ldr	r3, [sp, #24]
 800be14:	2b09      	cmp	r3, #9
 800be16:	f200 8089 	bhi.w	800bf2c <_dtoa_r+0x2f4>
 800be1a:	2b05      	cmp	r3, #5
 800be1c:	bfc4      	itt	gt
 800be1e:	3b04      	subgt	r3, #4
 800be20:	9306      	strgt	r3, [sp, #24]
 800be22:	9b06      	ldr	r3, [sp, #24]
 800be24:	f1a3 0302 	sub.w	r3, r3, #2
 800be28:	bfcc      	ite	gt
 800be2a:	2500      	movgt	r5, #0
 800be2c:	2501      	movle	r5, #1
 800be2e:	2b03      	cmp	r3, #3
 800be30:	f200 8087 	bhi.w	800bf42 <_dtoa_r+0x30a>
 800be34:	e8df f003 	tbb	[pc, r3]
 800be38:	59383a2d 	.word	0x59383a2d
 800be3c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800be40:	441d      	add	r5, r3
 800be42:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800be46:	2b20      	cmp	r3, #32
 800be48:	bfc1      	itttt	gt
 800be4a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800be4e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800be52:	fa0b f303 	lslgt.w	r3, fp, r3
 800be56:	fa26 f000 	lsrgt.w	r0, r6, r0
 800be5a:	bfda      	itte	le
 800be5c:	f1c3 0320 	rsble	r3, r3, #32
 800be60:	fa06 f003 	lslle.w	r0, r6, r3
 800be64:	4318      	orrgt	r0, r3
 800be66:	f7f4 fb4d 	bl	8000504 <__aeabi_ui2d>
 800be6a:	2301      	movs	r3, #1
 800be6c:	4606      	mov	r6, r0
 800be6e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800be72:	3d01      	subs	r5, #1
 800be74:	930e      	str	r3, [sp, #56]	; 0x38
 800be76:	e76a      	b.n	800bd4e <_dtoa_r+0x116>
 800be78:	2301      	movs	r3, #1
 800be7a:	e7b2      	b.n	800bde2 <_dtoa_r+0x1aa>
 800be7c:	900b      	str	r0, [sp, #44]	; 0x2c
 800be7e:	e7b1      	b.n	800bde4 <_dtoa_r+0x1ac>
 800be80:	9b04      	ldr	r3, [sp, #16]
 800be82:	9a00      	ldr	r2, [sp, #0]
 800be84:	1a9b      	subs	r3, r3, r2
 800be86:	9304      	str	r3, [sp, #16]
 800be88:	4253      	negs	r3, r2
 800be8a:	9307      	str	r3, [sp, #28]
 800be8c:	2300      	movs	r3, #0
 800be8e:	930a      	str	r3, [sp, #40]	; 0x28
 800be90:	e7bf      	b.n	800be12 <_dtoa_r+0x1da>
 800be92:	2300      	movs	r3, #0
 800be94:	9308      	str	r3, [sp, #32]
 800be96:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800be98:	2b00      	cmp	r3, #0
 800be9a:	dc55      	bgt.n	800bf48 <_dtoa_r+0x310>
 800be9c:	2301      	movs	r3, #1
 800be9e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bea2:	461a      	mov	r2, r3
 800bea4:	9209      	str	r2, [sp, #36]	; 0x24
 800bea6:	e00c      	b.n	800bec2 <_dtoa_r+0x28a>
 800bea8:	2301      	movs	r3, #1
 800beaa:	e7f3      	b.n	800be94 <_dtoa_r+0x25c>
 800beac:	2300      	movs	r3, #0
 800beae:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800beb0:	9308      	str	r3, [sp, #32]
 800beb2:	9b00      	ldr	r3, [sp, #0]
 800beb4:	4413      	add	r3, r2
 800beb6:	9302      	str	r3, [sp, #8]
 800beb8:	3301      	adds	r3, #1
 800beba:	2b01      	cmp	r3, #1
 800bebc:	9303      	str	r3, [sp, #12]
 800bebe:	bfb8      	it	lt
 800bec0:	2301      	movlt	r3, #1
 800bec2:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800bec4:	2200      	movs	r2, #0
 800bec6:	6042      	str	r2, [r0, #4]
 800bec8:	2204      	movs	r2, #4
 800beca:	f102 0614 	add.w	r6, r2, #20
 800bece:	429e      	cmp	r6, r3
 800bed0:	6841      	ldr	r1, [r0, #4]
 800bed2:	d93d      	bls.n	800bf50 <_dtoa_r+0x318>
 800bed4:	4620      	mov	r0, r4
 800bed6:	f001 f84b 	bl	800cf70 <_Balloc>
 800beda:	9001      	str	r0, [sp, #4]
 800bedc:	2800      	cmp	r0, #0
 800bede:	d13b      	bne.n	800bf58 <_dtoa_r+0x320>
 800bee0:	4b11      	ldr	r3, [pc, #68]	; (800bf28 <_dtoa_r+0x2f0>)
 800bee2:	4602      	mov	r2, r0
 800bee4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800bee8:	e6c0      	b.n	800bc6c <_dtoa_r+0x34>
 800beea:	2301      	movs	r3, #1
 800beec:	e7df      	b.n	800beae <_dtoa_r+0x276>
 800beee:	bf00      	nop
 800bef0:	636f4361 	.word	0x636f4361
 800bef4:	3fd287a7 	.word	0x3fd287a7
 800bef8:	8b60c8b3 	.word	0x8b60c8b3
 800befc:	3fc68a28 	.word	0x3fc68a28
 800bf00:	509f79fb 	.word	0x509f79fb
 800bf04:	3fd34413 	.word	0x3fd34413
 800bf08:	0800fa38 	.word	0x0800fa38
 800bf0c:	0800fbf6 	.word	0x0800fbf6
 800bf10:	7ff00000 	.word	0x7ff00000
 800bf14:	0800fbf2 	.word	0x0800fbf2
 800bf18:	0800fbe9 	.word	0x0800fbe9
 800bf1c:	0800f9b9 	.word	0x0800f9b9
 800bf20:	3ff80000 	.word	0x3ff80000
 800bf24:	0800fd60 	.word	0x0800fd60
 800bf28:	0800fc51 	.word	0x0800fc51
 800bf2c:	2501      	movs	r5, #1
 800bf2e:	2300      	movs	r3, #0
 800bf30:	9306      	str	r3, [sp, #24]
 800bf32:	9508      	str	r5, [sp, #32]
 800bf34:	f04f 33ff 	mov.w	r3, #4294967295
 800bf38:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf3c:	2200      	movs	r2, #0
 800bf3e:	2312      	movs	r3, #18
 800bf40:	e7b0      	b.n	800bea4 <_dtoa_r+0x26c>
 800bf42:	2301      	movs	r3, #1
 800bf44:	9308      	str	r3, [sp, #32]
 800bf46:	e7f5      	b.n	800bf34 <_dtoa_r+0x2fc>
 800bf48:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800bf4a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800bf4e:	e7b8      	b.n	800bec2 <_dtoa_r+0x28a>
 800bf50:	3101      	adds	r1, #1
 800bf52:	6041      	str	r1, [r0, #4]
 800bf54:	0052      	lsls	r2, r2, #1
 800bf56:	e7b8      	b.n	800beca <_dtoa_r+0x292>
 800bf58:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800bf5a:	9a01      	ldr	r2, [sp, #4]
 800bf5c:	601a      	str	r2, [r3, #0]
 800bf5e:	9b03      	ldr	r3, [sp, #12]
 800bf60:	2b0e      	cmp	r3, #14
 800bf62:	f200 809d 	bhi.w	800c0a0 <_dtoa_r+0x468>
 800bf66:	2d00      	cmp	r5, #0
 800bf68:	f000 809a 	beq.w	800c0a0 <_dtoa_r+0x468>
 800bf6c:	9b00      	ldr	r3, [sp, #0]
 800bf6e:	2b00      	cmp	r3, #0
 800bf70:	dd32      	ble.n	800bfd8 <_dtoa_r+0x3a0>
 800bf72:	4ab7      	ldr	r2, [pc, #732]	; (800c250 <_dtoa_r+0x618>)
 800bf74:	f003 030f 	and.w	r3, r3, #15
 800bf78:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800bf7c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800bf80:	9b00      	ldr	r3, [sp, #0]
 800bf82:	05d8      	lsls	r0, r3, #23
 800bf84:	ea4f 1723 	mov.w	r7, r3, asr #4
 800bf88:	d516      	bpl.n	800bfb8 <_dtoa_r+0x380>
 800bf8a:	4bb2      	ldr	r3, [pc, #712]	; (800c254 <_dtoa_r+0x61c>)
 800bf8c:	ec51 0b19 	vmov	r0, r1, d9
 800bf90:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800bf94:	f7f4 fc5a 	bl	800084c <__aeabi_ddiv>
 800bf98:	f007 070f 	and.w	r7, r7, #15
 800bf9c:	4682      	mov	sl, r0
 800bf9e:	468b      	mov	fp, r1
 800bfa0:	2503      	movs	r5, #3
 800bfa2:	4eac      	ldr	r6, [pc, #688]	; (800c254 <_dtoa_r+0x61c>)
 800bfa4:	b957      	cbnz	r7, 800bfbc <_dtoa_r+0x384>
 800bfa6:	4642      	mov	r2, r8
 800bfa8:	464b      	mov	r3, r9
 800bfaa:	4650      	mov	r0, sl
 800bfac:	4659      	mov	r1, fp
 800bfae:	f7f4 fc4d 	bl	800084c <__aeabi_ddiv>
 800bfb2:	4682      	mov	sl, r0
 800bfb4:	468b      	mov	fp, r1
 800bfb6:	e028      	b.n	800c00a <_dtoa_r+0x3d2>
 800bfb8:	2502      	movs	r5, #2
 800bfba:	e7f2      	b.n	800bfa2 <_dtoa_r+0x36a>
 800bfbc:	07f9      	lsls	r1, r7, #31
 800bfbe:	d508      	bpl.n	800bfd2 <_dtoa_r+0x39a>
 800bfc0:	4640      	mov	r0, r8
 800bfc2:	4649      	mov	r1, r9
 800bfc4:	e9d6 2300 	ldrd	r2, r3, [r6]
 800bfc8:	f7f4 fb16 	bl	80005f8 <__aeabi_dmul>
 800bfcc:	3501      	adds	r5, #1
 800bfce:	4680      	mov	r8, r0
 800bfd0:	4689      	mov	r9, r1
 800bfd2:	107f      	asrs	r7, r7, #1
 800bfd4:	3608      	adds	r6, #8
 800bfd6:	e7e5      	b.n	800bfa4 <_dtoa_r+0x36c>
 800bfd8:	f000 809b 	beq.w	800c112 <_dtoa_r+0x4da>
 800bfdc:	9b00      	ldr	r3, [sp, #0]
 800bfde:	4f9d      	ldr	r7, [pc, #628]	; (800c254 <_dtoa_r+0x61c>)
 800bfe0:	425e      	negs	r6, r3
 800bfe2:	4b9b      	ldr	r3, [pc, #620]	; (800c250 <_dtoa_r+0x618>)
 800bfe4:	f006 020f 	and.w	r2, r6, #15
 800bfe8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800bfec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800bff0:	ec51 0b19 	vmov	r0, r1, d9
 800bff4:	f7f4 fb00 	bl	80005f8 <__aeabi_dmul>
 800bff8:	1136      	asrs	r6, r6, #4
 800bffa:	4682      	mov	sl, r0
 800bffc:	468b      	mov	fp, r1
 800bffe:	2300      	movs	r3, #0
 800c000:	2502      	movs	r5, #2
 800c002:	2e00      	cmp	r6, #0
 800c004:	d17a      	bne.n	800c0fc <_dtoa_r+0x4c4>
 800c006:	2b00      	cmp	r3, #0
 800c008:	d1d3      	bne.n	800bfb2 <_dtoa_r+0x37a>
 800c00a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c00c:	2b00      	cmp	r3, #0
 800c00e:	f000 8082 	beq.w	800c116 <_dtoa_r+0x4de>
 800c012:	4b91      	ldr	r3, [pc, #580]	; (800c258 <_dtoa_r+0x620>)
 800c014:	2200      	movs	r2, #0
 800c016:	4650      	mov	r0, sl
 800c018:	4659      	mov	r1, fp
 800c01a:	f7f4 fd5f 	bl	8000adc <__aeabi_dcmplt>
 800c01e:	2800      	cmp	r0, #0
 800c020:	d079      	beq.n	800c116 <_dtoa_r+0x4de>
 800c022:	9b03      	ldr	r3, [sp, #12]
 800c024:	2b00      	cmp	r3, #0
 800c026:	d076      	beq.n	800c116 <_dtoa_r+0x4de>
 800c028:	9b02      	ldr	r3, [sp, #8]
 800c02a:	2b00      	cmp	r3, #0
 800c02c:	dd36      	ble.n	800c09c <_dtoa_r+0x464>
 800c02e:	9b00      	ldr	r3, [sp, #0]
 800c030:	4650      	mov	r0, sl
 800c032:	4659      	mov	r1, fp
 800c034:	1e5f      	subs	r7, r3, #1
 800c036:	2200      	movs	r2, #0
 800c038:	4b88      	ldr	r3, [pc, #544]	; (800c25c <_dtoa_r+0x624>)
 800c03a:	f7f4 fadd 	bl	80005f8 <__aeabi_dmul>
 800c03e:	9e02      	ldr	r6, [sp, #8]
 800c040:	4682      	mov	sl, r0
 800c042:	468b      	mov	fp, r1
 800c044:	3501      	adds	r5, #1
 800c046:	4628      	mov	r0, r5
 800c048:	f7f4 fa6c 	bl	8000524 <__aeabi_i2d>
 800c04c:	4652      	mov	r2, sl
 800c04e:	465b      	mov	r3, fp
 800c050:	f7f4 fad2 	bl	80005f8 <__aeabi_dmul>
 800c054:	4b82      	ldr	r3, [pc, #520]	; (800c260 <_dtoa_r+0x628>)
 800c056:	2200      	movs	r2, #0
 800c058:	f7f4 f918 	bl	800028c <__adddf3>
 800c05c:	46d0      	mov	r8, sl
 800c05e:	46d9      	mov	r9, fp
 800c060:	4682      	mov	sl, r0
 800c062:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800c066:	2e00      	cmp	r6, #0
 800c068:	d158      	bne.n	800c11c <_dtoa_r+0x4e4>
 800c06a:	4b7e      	ldr	r3, [pc, #504]	; (800c264 <_dtoa_r+0x62c>)
 800c06c:	2200      	movs	r2, #0
 800c06e:	4640      	mov	r0, r8
 800c070:	4649      	mov	r1, r9
 800c072:	f7f4 f909 	bl	8000288 <__aeabi_dsub>
 800c076:	4652      	mov	r2, sl
 800c078:	465b      	mov	r3, fp
 800c07a:	4680      	mov	r8, r0
 800c07c:	4689      	mov	r9, r1
 800c07e:	f7f4 fd4b 	bl	8000b18 <__aeabi_dcmpgt>
 800c082:	2800      	cmp	r0, #0
 800c084:	f040 8295 	bne.w	800c5b2 <_dtoa_r+0x97a>
 800c088:	4652      	mov	r2, sl
 800c08a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800c08e:	4640      	mov	r0, r8
 800c090:	4649      	mov	r1, r9
 800c092:	f7f4 fd23 	bl	8000adc <__aeabi_dcmplt>
 800c096:	2800      	cmp	r0, #0
 800c098:	f040 8289 	bne.w	800c5ae <_dtoa_r+0x976>
 800c09c:	ec5b ab19 	vmov	sl, fp, d9
 800c0a0:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800c0a2:	2b00      	cmp	r3, #0
 800c0a4:	f2c0 8148 	blt.w	800c338 <_dtoa_r+0x700>
 800c0a8:	9a00      	ldr	r2, [sp, #0]
 800c0aa:	2a0e      	cmp	r2, #14
 800c0ac:	f300 8144 	bgt.w	800c338 <_dtoa_r+0x700>
 800c0b0:	4b67      	ldr	r3, [pc, #412]	; (800c250 <_dtoa_r+0x618>)
 800c0b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800c0b6:	e9d3 8900 	ldrd	r8, r9, [r3]
 800c0ba:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c0bc:	2b00      	cmp	r3, #0
 800c0be:	f280 80d5 	bge.w	800c26c <_dtoa_r+0x634>
 800c0c2:	9b03      	ldr	r3, [sp, #12]
 800c0c4:	2b00      	cmp	r3, #0
 800c0c6:	f300 80d1 	bgt.w	800c26c <_dtoa_r+0x634>
 800c0ca:	f040 826f 	bne.w	800c5ac <_dtoa_r+0x974>
 800c0ce:	4b65      	ldr	r3, [pc, #404]	; (800c264 <_dtoa_r+0x62c>)
 800c0d0:	2200      	movs	r2, #0
 800c0d2:	4640      	mov	r0, r8
 800c0d4:	4649      	mov	r1, r9
 800c0d6:	f7f4 fa8f 	bl	80005f8 <__aeabi_dmul>
 800c0da:	4652      	mov	r2, sl
 800c0dc:	465b      	mov	r3, fp
 800c0de:	f7f4 fd11 	bl	8000b04 <__aeabi_dcmpge>
 800c0e2:	9e03      	ldr	r6, [sp, #12]
 800c0e4:	4637      	mov	r7, r6
 800c0e6:	2800      	cmp	r0, #0
 800c0e8:	f040 8245 	bne.w	800c576 <_dtoa_r+0x93e>
 800c0ec:	9d01      	ldr	r5, [sp, #4]
 800c0ee:	2331      	movs	r3, #49	; 0x31
 800c0f0:	f805 3b01 	strb.w	r3, [r5], #1
 800c0f4:	9b00      	ldr	r3, [sp, #0]
 800c0f6:	3301      	adds	r3, #1
 800c0f8:	9300      	str	r3, [sp, #0]
 800c0fa:	e240      	b.n	800c57e <_dtoa_r+0x946>
 800c0fc:	07f2      	lsls	r2, r6, #31
 800c0fe:	d505      	bpl.n	800c10c <_dtoa_r+0x4d4>
 800c100:	e9d7 2300 	ldrd	r2, r3, [r7]
 800c104:	f7f4 fa78 	bl	80005f8 <__aeabi_dmul>
 800c108:	3501      	adds	r5, #1
 800c10a:	2301      	movs	r3, #1
 800c10c:	1076      	asrs	r6, r6, #1
 800c10e:	3708      	adds	r7, #8
 800c110:	e777      	b.n	800c002 <_dtoa_r+0x3ca>
 800c112:	2502      	movs	r5, #2
 800c114:	e779      	b.n	800c00a <_dtoa_r+0x3d2>
 800c116:	9f00      	ldr	r7, [sp, #0]
 800c118:	9e03      	ldr	r6, [sp, #12]
 800c11a:	e794      	b.n	800c046 <_dtoa_r+0x40e>
 800c11c:	9901      	ldr	r1, [sp, #4]
 800c11e:	4b4c      	ldr	r3, [pc, #304]	; (800c250 <_dtoa_r+0x618>)
 800c120:	4431      	add	r1, r6
 800c122:	910d      	str	r1, [sp, #52]	; 0x34
 800c124:	9908      	ldr	r1, [sp, #32]
 800c126:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800c12a:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800c12e:	2900      	cmp	r1, #0
 800c130:	d043      	beq.n	800c1ba <_dtoa_r+0x582>
 800c132:	494d      	ldr	r1, [pc, #308]	; (800c268 <_dtoa_r+0x630>)
 800c134:	2000      	movs	r0, #0
 800c136:	f7f4 fb89 	bl	800084c <__aeabi_ddiv>
 800c13a:	4652      	mov	r2, sl
 800c13c:	465b      	mov	r3, fp
 800c13e:	f7f4 f8a3 	bl	8000288 <__aeabi_dsub>
 800c142:	9d01      	ldr	r5, [sp, #4]
 800c144:	4682      	mov	sl, r0
 800c146:	468b      	mov	fp, r1
 800c148:	4649      	mov	r1, r9
 800c14a:	4640      	mov	r0, r8
 800c14c:	f7f4 fd04 	bl	8000b58 <__aeabi_d2iz>
 800c150:	4606      	mov	r6, r0
 800c152:	f7f4 f9e7 	bl	8000524 <__aeabi_i2d>
 800c156:	4602      	mov	r2, r0
 800c158:	460b      	mov	r3, r1
 800c15a:	4640      	mov	r0, r8
 800c15c:	4649      	mov	r1, r9
 800c15e:	f7f4 f893 	bl	8000288 <__aeabi_dsub>
 800c162:	3630      	adds	r6, #48	; 0x30
 800c164:	f805 6b01 	strb.w	r6, [r5], #1
 800c168:	4652      	mov	r2, sl
 800c16a:	465b      	mov	r3, fp
 800c16c:	4680      	mov	r8, r0
 800c16e:	4689      	mov	r9, r1
 800c170:	f7f4 fcb4 	bl	8000adc <__aeabi_dcmplt>
 800c174:	2800      	cmp	r0, #0
 800c176:	d163      	bne.n	800c240 <_dtoa_r+0x608>
 800c178:	4642      	mov	r2, r8
 800c17a:	464b      	mov	r3, r9
 800c17c:	4936      	ldr	r1, [pc, #216]	; (800c258 <_dtoa_r+0x620>)
 800c17e:	2000      	movs	r0, #0
 800c180:	f7f4 f882 	bl	8000288 <__aeabi_dsub>
 800c184:	4652      	mov	r2, sl
 800c186:	465b      	mov	r3, fp
 800c188:	f7f4 fca8 	bl	8000adc <__aeabi_dcmplt>
 800c18c:	2800      	cmp	r0, #0
 800c18e:	f040 80b5 	bne.w	800c2fc <_dtoa_r+0x6c4>
 800c192:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c194:	429d      	cmp	r5, r3
 800c196:	d081      	beq.n	800c09c <_dtoa_r+0x464>
 800c198:	4b30      	ldr	r3, [pc, #192]	; (800c25c <_dtoa_r+0x624>)
 800c19a:	2200      	movs	r2, #0
 800c19c:	4650      	mov	r0, sl
 800c19e:	4659      	mov	r1, fp
 800c1a0:	f7f4 fa2a 	bl	80005f8 <__aeabi_dmul>
 800c1a4:	4b2d      	ldr	r3, [pc, #180]	; (800c25c <_dtoa_r+0x624>)
 800c1a6:	4682      	mov	sl, r0
 800c1a8:	468b      	mov	fp, r1
 800c1aa:	4640      	mov	r0, r8
 800c1ac:	4649      	mov	r1, r9
 800c1ae:	2200      	movs	r2, #0
 800c1b0:	f7f4 fa22 	bl	80005f8 <__aeabi_dmul>
 800c1b4:	4680      	mov	r8, r0
 800c1b6:	4689      	mov	r9, r1
 800c1b8:	e7c6      	b.n	800c148 <_dtoa_r+0x510>
 800c1ba:	4650      	mov	r0, sl
 800c1bc:	4659      	mov	r1, fp
 800c1be:	f7f4 fa1b 	bl	80005f8 <__aeabi_dmul>
 800c1c2:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1c4:	9d01      	ldr	r5, [sp, #4]
 800c1c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800c1c8:	4682      	mov	sl, r0
 800c1ca:	468b      	mov	fp, r1
 800c1cc:	4649      	mov	r1, r9
 800c1ce:	4640      	mov	r0, r8
 800c1d0:	f7f4 fcc2 	bl	8000b58 <__aeabi_d2iz>
 800c1d4:	4606      	mov	r6, r0
 800c1d6:	f7f4 f9a5 	bl	8000524 <__aeabi_i2d>
 800c1da:	3630      	adds	r6, #48	; 0x30
 800c1dc:	4602      	mov	r2, r0
 800c1de:	460b      	mov	r3, r1
 800c1e0:	4640      	mov	r0, r8
 800c1e2:	4649      	mov	r1, r9
 800c1e4:	f7f4 f850 	bl	8000288 <__aeabi_dsub>
 800c1e8:	f805 6b01 	strb.w	r6, [r5], #1
 800c1ec:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800c1ee:	429d      	cmp	r5, r3
 800c1f0:	4680      	mov	r8, r0
 800c1f2:	4689      	mov	r9, r1
 800c1f4:	f04f 0200 	mov.w	r2, #0
 800c1f8:	d124      	bne.n	800c244 <_dtoa_r+0x60c>
 800c1fa:	4b1b      	ldr	r3, [pc, #108]	; (800c268 <_dtoa_r+0x630>)
 800c1fc:	4650      	mov	r0, sl
 800c1fe:	4659      	mov	r1, fp
 800c200:	f7f4 f844 	bl	800028c <__adddf3>
 800c204:	4602      	mov	r2, r0
 800c206:	460b      	mov	r3, r1
 800c208:	4640      	mov	r0, r8
 800c20a:	4649      	mov	r1, r9
 800c20c:	f7f4 fc84 	bl	8000b18 <__aeabi_dcmpgt>
 800c210:	2800      	cmp	r0, #0
 800c212:	d173      	bne.n	800c2fc <_dtoa_r+0x6c4>
 800c214:	4652      	mov	r2, sl
 800c216:	465b      	mov	r3, fp
 800c218:	4913      	ldr	r1, [pc, #76]	; (800c268 <_dtoa_r+0x630>)
 800c21a:	2000      	movs	r0, #0
 800c21c:	f7f4 f834 	bl	8000288 <__aeabi_dsub>
 800c220:	4602      	mov	r2, r0
 800c222:	460b      	mov	r3, r1
 800c224:	4640      	mov	r0, r8
 800c226:	4649      	mov	r1, r9
 800c228:	f7f4 fc58 	bl	8000adc <__aeabi_dcmplt>
 800c22c:	2800      	cmp	r0, #0
 800c22e:	f43f af35 	beq.w	800c09c <_dtoa_r+0x464>
 800c232:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800c234:	1e6b      	subs	r3, r5, #1
 800c236:	930f      	str	r3, [sp, #60]	; 0x3c
 800c238:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800c23c:	2b30      	cmp	r3, #48	; 0x30
 800c23e:	d0f8      	beq.n	800c232 <_dtoa_r+0x5fa>
 800c240:	9700      	str	r7, [sp, #0]
 800c242:	e049      	b.n	800c2d8 <_dtoa_r+0x6a0>
 800c244:	4b05      	ldr	r3, [pc, #20]	; (800c25c <_dtoa_r+0x624>)
 800c246:	f7f4 f9d7 	bl	80005f8 <__aeabi_dmul>
 800c24a:	4680      	mov	r8, r0
 800c24c:	4689      	mov	r9, r1
 800c24e:	e7bd      	b.n	800c1cc <_dtoa_r+0x594>
 800c250:	0800fd60 	.word	0x0800fd60
 800c254:	0800fd38 	.word	0x0800fd38
 800c258:	3ff00000 	.word	0x3ff00000
 800c25c:	40240000 	.word	0x40240000
 800c260:	401c0000 	.word	0x401c0000
 800c264:	40140000 	.word	0x40140000
 800c268:	3fe00000 	.word	0x3fe00000
 800c26c:	9d01      	ldr	r5, [sp, #4]
 800c26e:	4656      	mov	r6, sl
 800c270:	465f      	mov	r7, fp
 800c272:	4642      	mov	r2, r8
 800c274:	464b      	mov	r3, r9
 800c276:	4630      	mov	r0, r6
 800c278:	4639      	mov	r1, r7
 800c27a:	f7f4 fae7 	bl	800084c <__aeabi_ddiv>
 800c27e:	f7f4 fc6b 	bl	8000b58 <__aeabi_d2iz>
 800c282:	4682      	mov	sl, r0
 800c284:	f7f4 f94e 	bl	8000524 <__aeabi_i2d>
 800c288:	4642      	mov	r2, r8
 800c28a:	464b      	mov	r3, r9
 800c28c:	f7f4 f9b4 	bl	80005f8 <__aeabi_dmul>
 800c290:	4602      	mov	r2, r0
 800c292:	460b      	mov	r3, r1
 800c294:	4630      	mov	r0, r6
 800c296:	4639      	mov	r1, r7
 800c298:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800c29c:	f7f3 fff4 	bl	8000288 <__aeabi_dsub>
 800c2a0:	f805 6b01 	strb.w	r6, [r5], #1
 800c2a4:	9e01      	ldr	r6, [sp, #4]
 800c2a6:	9f03      	ldr	r7, [sp, #12]
 800c2a8:	1bae      	subs	r6, r5, r6
 800c2aa:	42b7      	cmp	r7, r6
 800c2ac:	4602      	mov	r2, r0
 800c2ae:	460b      	mov	r3, r1
 800c2b0:	d135      	bne.n	800c31e <_dtoa_r+0x6e6>
 800c2b2:	f7f3 ffeb 	bl	800028c <__adddf3>
 800c2b6:	4642      	mov	r2, r8
 800c2b8:	464b      	mov	r3, r9
 800c2ba:	4606      	mov	r6, r0
 800c2bc:	460f      	mov	r7, r1
 800c2be:	f7f4 fc2b 	bl	8000b18 <__aeabi_dcmpgt>
 800c2c2:	b9d0      	cbnz	r0, 800c2fa <_dtoa_r+0x6c2>
 800c2c4:	4642      	mov	r2, r8
 800c2c6:	464b      	mov	r3, r9
 800c2c8:	4630      	mov	r0, r6
 800c2ca:	4639      	mov	r1, r7
 800c2cc:	f7f4 fbfc 	bl	8000ac8 <__aeabi_dcmpeq>
 800c2d0:	b110      	cbz	r0, 800c2d8 <_dtoa_r+0x6a0>
 800c2d2:	f01a 0f01 	tst.w	sl, #1
 800c2d6:	d110      	bne.n	800c2fa <_dtoa_r+0x6c2>
 800c2d8:	4620      	mov	r0, r4
 800c2da:	ee18 1a10 	vmov	r1, s16
 800c2de:	f000 fe87 	bl	800cff0 <_Bfree>
 800c2e2:	2300      	movs	r3, #0
 800c2e4:	9800      	ldr	r0, [sp, #0]
 800c2e6:	702b      	strb	r3, [r5, #0]
 800c2e8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800c2ea:	3001      	adds	r0, #1
 800c2ec:	6018      	str	r0, [r3, #0]
 800c2ee:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c2f0:	2b00      	cmp	r3, #0
 800c2f2:	f43f acf1 	beq.w	800bcd8 <_dtoa_r+0xa0>
 800c2f6:	601d      	str	r5, [r3, #0]
 800c2f8:	e4ee      	b.n	800bcd8 <_dtoa_r+0xa0>
 800c2fa:	9f00      	ldr	r7, [sp, #0]
 800c2fc:	462b      	mov	r3, r5
 800c2fe:	461d      	mov	r5, r3
 800c300:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c304:	2a39      	cmp	r2, #57	; 0x39
 800c306:	d106      	bne.n	800c316 <_dtoa_r+0x6de>
 800c308:	9a01      	ldr	r2, [sp, #4]
 800c30a:	429a      	cmp	r2, r3
 800c30c:	d1f7      	bne.n	800c2fe <_dtoa_r+0x6c6>
 800c30e:	9901      	ldr	r1, [sp, #4]
 800c310:	2230      	movs	r2, #48	; 0x30
 800c312:	3701      	adds	r7, #1
 800c314:	700a      	strb	r2, [r1, #0]
 800c316:	781a      	ldrb	r2, [r3, #0]
 800c318:	3201      	adds	r2, #1
 800c31a:	701a      	strb	r2, [r3, #0]
 800c31c:	e790      	b.n	800c240 <_dtoa_r+0x608>
 800c31e:	4ba6      	ldr	r3, [pc, #664]	; (800c5b8 <_dtoa_r+0x980>)
 800c320:	2200      	movs	r2, #0
 800c322:	f7f4 f969 	bl	80005f8 <__aeabi_dmul>
 800c326:	2200      	movs	r2, #0
 800c328:	2300      	movs	r3, #0
 800c32a:	4606      	mov	r6, r0
 800c32c:	460f      	mov	r7, r1
 800c32e:	f7f4 fbcb 	bl	8000ac8 <__aeabi_dcmpeq>
 800c332:	2800      	cmp	r0, #0
 800c334:	d09d      	beq.n	800c272 <_dtoa_r+0x63a>
 800c336:	e7cf      	b.n	800c2d8 <_dtoa_r+0x6a0>
 800c338:	9a08      	ldr	r2, [sp, #32]
 800c33a:	2a00      	cmp	r2, #0
 800c33c:	f000 80d7 	beq.w	800c4ee <_dtoa_r+0x8b6>
 800c340:	9a06      	ldr	r2, [sp, #24]
 800c342:	2a01      	cmp	r2, #1
 800c344:	f300 80ba 	bgt.w	800c4bc <_dtoa_r+0x884>
 800c348:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800c34a:	2a00      	cmp	r2, #0
 800c34c:	f000 80b2 	beq.w	800c4b4 <_dtoa_r+0x87c>
 800c350:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800c354:	9e07      	ldr	r6, [sp, #28]
 800c356:	9d04      	ldr	r5, [sp, #16]
 800c358:	9a04      	ldr	r2, [sp, #16]
 800c35a:	441a      	add	r2, r3
 800c35c:	9204      	str	r2, [sp, #16]
 800c35e:	9a05      	ldr	r2, [sp, #20]
 800c360:	2101      	movs	r1, #1
 800c362:	441a      	add	r2, r3
 800c364:	4620      	mov	r0, r4
 800c366:	9205      	str	r2, [sp, #20]
 800c368:	f000 ff44 	bl	800d1f4 <__i2b>
 800c36c:	4607      	mov	r7, r0
 800c36e:	2d00      	cmp	r5, #0
 800c370:	dd0c      	ble.n	800c38c <_dtoa_r+0x754>
 800c372:	9b05      	ldr	r3, [sp, #20]
 800c374:	2b00      	cmp	r3, #0
 800c376:	dd09      	ble.n	800c38c <_dtoa_r+0x754>
 800c378:	42ab      	cmp	r3, r5
 800c37a:	9a04      	ldr	r2, [sp, #16]
 800c37c:	bfa8      	it	ge
 800c37e:	462b      	movge	r3, r5
 800c380:	1ad2      	subs	r2, r2, r3
 800c382:	9204      	str	r2, [sp, #16]
 800c384:	9a05      	ldr	r2, [sp, #20]
 800c386:	1aed      	subs	r5, r5, r3
 800c388:	1ad3      	subs	r3, r2, r3
 800c38a:	9305      	str	r3, [sp, #20]
 800c38c:	9b07      	ldr	r3, [sp, #28]
 800c38e:	b31b      	cbz	r3, 800c3d8 <_dtoa_r+0x7a0>
 800c390:	9b08      	ldr	r3, [sp, #32]
 800c392:	2b00      	cmp	r3, #0
 800c394:	f000 80af 	beq.w	800c4f6 <_dtoa_r+0x8be>
 800c398:	2e00      	cmp	r6, #0
 800c39a:	dd13      	ble.n	800c3c4 <_dtoa_r+0x78c>
 800c39c:	4639      	mov	r1, r7
 800c39e:	4632      	mov	r2, r6
 800c3a0:	4620      	mov	r0, r4
 800c3a2:	f000 ffe7 	bl	800d374 <__pow5mult>
 800c3a6:	ee18 2a10 	vmov	r2, s16
 800c3aa:	4601      	mov	r1, r0
 800c3ac:	4607      	mov	r7, r0
 800c3ae:	4620      	mov	r0, r4
 800c3b0:	f000 ff36 	bl	800d220 <__multiply>
 800c3b4:	ee18 1a10 	vmov	r1, s16
 800c3b8:	4680      	mov	r8, r0
 800c3ba:	4620      	mov	r0, r4
 800c3bc:	f000 fe18 	bl	800cff0 <_Bfree>
 800c3c0:	ee08 8a10 	vmov	s16, r8
 800c3c4:	9b07      	ldr	r3, [sp, #28]
 800c3c6:	1b9a      	subs	r2, r3, r6
 800c3c8:	d006      	beq.n	800c3d8 <_dtoa_r+0x7a0>
 800c3ca:	ee18 1a10 	vmov	r1, s16
 800c3ce:	4620      	mov	r0, r4
 800c3d0:	f000 ffd0 	bl	800d374 <__pow5mult>
 800c3d4:	ee08 0a10 	vmov	s16, r0
 800c3d8:	2101      	movs	r1, #1
 800c3da:	4620      	mov	r0, r4
 800c3dc:	f000 ff0a 	bl	800d1f4 <__i2b>
 800c3e0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c3e2:	2b00      	cmp	r3, #0
 800c3e4:	4606      	mov	r6, r0
 800c3e6:	f340 8088 	ble.w	800c4fa <_dtoa_r+0x8c2>
 800c3ea:	461a      	mov	r2, r3
 800c3ec:	4601      	mov	r1, r0
 800c3ee:	4620      	mov	r0, r4
 800c3f0:	f000 ffc0 	bl	800d374 <__pow5mult>
 800c3f4:	9b06      	ldr	r3, [sp, #24]
 800c3f6:	2b01      	cmp	r3, #1
 800c3f8:	4606      	mov	r6, r0
 800c3fa:	f340 8081 	ble.w	800c500 <_dtoa_r+0x8c8>
 800c3fe:	f04f 0800 	mov.w	r8, #0
 800c402:	6933      	ldr	r3, [r6, #16]
 800c404:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800c408:	6918      	ldr	r0, [r3, #16]
 800c40a:	f000 fea3 	bl	800d154 <__hi0bits>
 800c40e:	f1c0 0020 	rsb	r0, r0, #32
 800c412:	9b05      	ldr	r3, [sp, #20]
 800c414:	4418      	add	r0, r3
 800c416:	f010 001f 	ands.w	r0, r0, #31
 800c41a:	f000 8092 	beq.w	800c542 <_dtoa_r+0x90a>
 800c41e:	f1c0 0320 	rsb	r3, r0, #32
 800c422:	2b04      	cmp	r3, #4
 800c424:	f340 808a 	ble.w	800c53c <_dtoa_r+0x904>
 800c428:	f1c0 001c 	rsb	r0, r0, #28
 800c42c:	9b04      	ldr	r3, [sp, #16]
 800c42e:	4403      	add	r3, r0
 800c430:	9304      	str	r3, [sp, #16]
 800c432:	9b05      	ldr	r3, [sp, #20]
 800c434:	4403      	add	r3, r0
 800c436:	4405      	add	r5, r0
 800c438:	9305      	str	r3, [sp, #20]
 800c43a:	9b04      	ldr	r3, [sp, #16]
 800c43c:	2b00      	cmp	r3, #0
 800c43e:	dd07      	ble.n	800c450 <_dtoa_r+0x818>
 800c440:	ee18 1a10 	vmov	r1, s16
 800c444:	461a      	mov	r2, r3
 800c446:	4620      	mov	r0, r4
 800c448:	f000 ffee 	bl	800d428 <__lshift>
 800c44c:	ee08 0a10 	vmov	s16, r0
 800c450:	9b05      	ldr	r3, [sp, #20]
 800c452:	2b00      	cmp	r3, #0
 800c454:	dd05      	ble.n	800c462 <_dtoa_r+0x82a>
 800c456:	4631      	mov	r1, r6
 800c458:	461a      	mov	r2, r3
 800c45a:	4620      	mov	r0, r4
 800c45c:	f000 ffe4 	bl	800d428 <__lshift>
 800c460:	4606      	mov	r6, r0
 800c462:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800c464:	2b00      	cmp	r3, #0
 800c466:	d06e      	beq.n	800c546 <_dtoa_r+0x90e>
 800c468:	ee18 0a10 	vmov	r0, s16
 800c46c:	4631      	mov	r1, r6
 800c46e:	f001 f84b 	bl	800d508 <__mcmp>
 800c472:	2800      	cmp	r0, #0
 800c474:	da67      	bge.n	800c546 <_dtoa_r+0x90e>
 800c476:	9b00      	ldr	r3, [sp, #0]
 800c478:	3b01      	subs	r3, #1
 800c47a:	ee18 1a10 	vmov	r1, s16
 800c47e:	9300      	str	r3, [sp, #0]
 800c480:	220a      	movs	r2, #10
 800c482:	2300      	movs	r3, #0
 800c484:	4620      	mov	r0, r4
 800c486:	f000 fdd5 	bl	800d034 <__multadd>
 800c48a:	9b08      	ldr	r3, [sp, #32]
 800c48c:	ee08 0a10 	vmov	s16, r0
 800c490:	2b00      	cmp	r3, #0
 800c492:	f000 81b1 	beq.w	800c7f8 <_dtoa_r+0xbc0>
 800c496:	2300      	movs	r3, #0
 800c498:	4639      	mov	r1, r7
 800c49a:	220a      	movs	r2, #10
 800c49c:	4620      	mov	r0, r4
 800c49e:	f000 fdc9 	bl	800d034 <__multadd>
 800c4a2:	9b02      	ldr	r3, [sp, #8]
 800c4a4:	2b00      	cmp	r3, #0
 800c4a6:	4607      	mov	r7, r0
 800c4a8:	f300 808e 	bgt.w	800c5c8 <_dtoa_r+0x990>
 800c4ac:	9b06      	ldr	r3, [sp, #24]
 800c4ae:	2b02      	cmp	r3, #2
 800c4b0:	dc51      	bgt.n	800c556 <_dtoa_r+0x91e>
 800c4b2:	e089      	b.n	800c5c8 <_dtoa_r+0x990>
 800c4b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800c4b6:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800c4ba:	e74b      	b.n	800c354 <_dtoa_r+0x71c>
 800c4bc:	9b03      	ldr	r3, [sp, #12]
 800c4be:	1e5e      	subs	r6, r3, #1
 800c4c0:	9b07      	ldr	r3, [sp, #28]
 800c4c2:	42b3      	cmp	r3, r6
 800c4c4:	bfbf      	itttt	lt
 800c4c6:	9b07      	ldrlt	r3, [sp, #28]
 800c4c8:	9607      	strlt	r6, [sp, #28]
 800c4ca:	1af2      	sublt	r2, r6, r3
 800c4cc:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800c4ce:	bfb6      	itet	lt
 800c4d0:	189b      	addlt	r3, r3, r2
 800c4d2:	1b9e      	subge	r6, r3, r6
 800c4d4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800c4d6:	9b03      	ldr	r3, [sp, #12]
 800c4d8:	bfb8      	it	lt
 800c4da:	2600      	movlt	r6, #0
 800c4dc:	2b00      	cmp	r3, #0
 800c4de:	bfb7      	itett	lt
 800c4e0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800c4e4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800c4e8:	1a9d      	sublt	r5, r3, r2
 800c4ea:	2300      	movlt	r3, #0
 800c4ec:	e734      	b.n	800c358 <_dtoa_r+0x720>
 800c4ee:	9e07      	ldr	r6, [sp, #28]
 800c4f0:	9d04      	ldr	r5, [sp, #16]
 800c4f2:	9f08      	ldr	r7, [sp, #32]
 800c4f4:	e73b      	b.n	800c36e <_dtoa_r+0x736>
 800c4f6:	9a07      	ldr	r2, [sp, #28]
 800c4f8:	e767      	b.n	800c3ca <_dtoa_r+0x792>
 800c4fa:	9b06      	ldr	r3, [sp, #24]
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	dc18      	bgt.n	800c532 <_dtoa_r+0x8fa>
 800c500:	f1ba 0f00 	cmp.w	sl, #0
 800c504:	d115      	bne.n	800c532 <_dtoa_r+0x8fa>
 800c506:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800c50a:	b993      	cbnz	r3, 800c532 <_dtoa_r+0x8fa>
 800c50c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800c510:	0d1b      	lsrs	r3, r3, #20
 800c512:	051b      	lsls	r3, r3, #20
 800c514:	b183      	cbz	r3, 800c538 <_dtoa_r+0x900>
 800c516:	9b04      	ldr	r3, [sp, #16]
 800c518:	3301      	adds	r3, #1
 800c51a:	9304      	str	r3, [sp, #16]
 800c51c:	9b05      	ldr	r3, [sp, #20]
 800c51e:	3301      	adds	r3, #1
 800c520:	9305      	str	r3, [sp, #20]
 800c522:	f04f 0801 	mov.w	r8, #1
 800c526:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800c528:	2b00      	cmp	r3, #0
 800c52a:	f47f af6a 	bne.w	800c402 <_dtoa_r+0x7ca>
 800c52e:	2001      	movs	r0, #1
 800c530:	e76f      	b.n	800c412 <_dtoa_r+0x7da>
 800c532:	f04f 0800 	mov.w	r8, #0
 800c536:	e7f6      	b.n	800c526 <_dtoa_r+0x8ee>
 800c538:	4698      	mov	r8, r3
 800c53a:	e7f4      	b.n	800c526 <_dtoa_r+0x8ee>
 800c53c:	f43f af7d 	beq.w	800c43a <_dtoa_r+0x802>
 800c540:	4618      	mov	r0, r3
 800c542:	301c      	adds	r0, #28
 800c544:	e772      	b.n	800c42c <_dtoa_r+0x7f4>
 800c546:	9b03      	ldr	r3, [sp, #12]
 800c548:	2b00      	cmp	r3, #0
 800c54a:	dc37      	bgt.n	800c5bc <_dtoa_r+0x984>
 800c54c:	9b06      	ldr	r3, [sp, #24]
 800c54e:	2b02      	cmp	r3, #2
 800c550:	dd34      	ble.n	800c5bc <_dtoa_r+0x984>
 800c552:	9b03      	ldr	r3, [sp, #12]
 800c554:	9302      	str	r3, [sp, #8]
 800c556:	9b02      	ldr	r3, [sp, #8]
 800c558:	b96b      	cbnz	r3, 800c576 <_dtoa_r+0x93e>
 800c55a:	4631      	mov	r1, r6
 800c55c:	2205      	movs	r2, #5
 800c55e:	4620      	mov	r0, r4
 800c560:	f000 fd68 	bl	800d034 <__multadd>
 800c564:	4601      	mov	r1, r0
 800c566:	4606      	mov	r6, r0
 800c568:	ee18 0a10 	vmov	r0, s16
 800c56c:	f000 ffcc 	bl	800d508 <__mcmp>
 800c570:	2800      	cmp	r0, #0
 800c572:	f73f adbb 	bgt.w	800c0ec <_dtoa_r+0x4b4>
 800c576:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800c578:	9d01      	ldr	r5, [sp, #4]
 800c57a:	43db      	mvns	r3, r3
 800c57c:	9300      	str	r3, [sp, #0]
 800c57e:	f04f 0800 	mov.w	r8, #0
 800c582:	4631      	mov	r1, r6
 800c584:	4620      	mov	r0, r4
 800c586:	f000 fd33 	bl	800cff0 <_Bfree>
 800c58a:	2f00      	cmp	r7, #0
 800c58c:	f43f aea4 	beq.w	800c2d8 <_dtoa_r+0x6a0>
 800c590:	f1b8 0f00 	cmp.w	r8, #0
 800c594:	d005      	beq.n	800c5a2 <_dtoa_r+0x96a>
 800c596:	45b8      	cmp	r8, r7
 800c598:	d003      	beq.n	800c5a2 <_dtoa_r+0x96a>
 800c59a:	4641      	mov	r1, r8
 800c59c:	4620      	mov	r0, r4
 800c59e:	f000 fd27 	bl	800cff0 <_Bfree>
 800c5a2:	4639      	mov	r1, r7
 800c5a4:	4620      	mov	r0, r4
 800c5a6:	f000 fd23 	bl	800cff0 <_Bfree>
 800c5aa:	e695      	b.n	800c2d8 <_dtoa_r+0x6a0>
 800c5ac:	2600      	movs	r6, #0
 800c5ae:	4637      	mov	r7, r6
 800c5b0:	e7e1      	b.n	800c576 <_dtoa_r+0x93e>
 800c5b2:	9700      	str	r7, [sp, #0]
 800c5b4:	4637      	mov	r7, r6
 800c5b6:	e599      	b.n	800c0ec <_dtoa_r+0x4b4>
 800c5b8:	40240000 	.word	0x40240000
 800c5bc:	9b08      	ldr	r3, [sp, #32]
 800c5be:	2b00      	cmp	r3, #0
 800c5c0:	f000 80ca 	beq.w	800c758 <_dtoa_r+0xb20>
 800c5c4:	9b03      	ldr	r3, [sp, #12]
 800c5c6:	9302      	str	r3, [sp, #8]
 800c5c8:	2d00      	cmp	r5, #0
 800c5ca:	dd05      	ble.n	800c5d8 <_dtoa_r+0x9a0>
 800c5cc:	4639      	mov	r1, r7
 800c5ce:	462a      	mov	r2, r5
 800c5d0:	4620      	mov	r0, r4
 800c5d2:	f000 ff29 	bl	800d428 <__lshift>
 800c5d6:	4607      	mov	r7, r0
 800c5d8:	f1b8 0f00 	cmp.w	r8, #0
 800c5dc:	d05b      	beq.n	800c696 <_dtoa_r+0xa5e>
 800c5de:	6879      	ldr	r1, [r7, #4]
 800c5e0:	4620      	mov	r0, r4
 800c5e2:	f000 fcc5 	bl	800cf70 <_Balloc>
 800c5e6:	4605      	mov	r5, r0
 800c5e8:	b928      	cbnz	r0, 800c5f6 <_dtoa_r+0x9be>
 800c5ea:	4b87      	ldr	r3, [pc, #540]	; (800c808 <_dtoa_r+0xbd0>)
 800c5ec:	4602      	mov	r2, r0
 800c5ee:	f240 21ea 	movw	r1, #746	; 0x2ea
 800c5f2:	f7ff bb3b 	b.w	800bc6c <_dtoa_r+0x34>
 800c5f6:	693a      	ldr	r2, [r7, #16]
 800c5f8:	3202      	adds	r2, #2
 800c5fa:	0092      	lsls	r2, r2, #2
 800c5fc:	f107 010c 	add.w	r1, r7, #12
 800c600:	300c      	adds	r0, #12
 800c602:	f000 fca7 	bl	800cf54 <memcpy>
 800c606:	2201      	movs	r2, #1
 800c608:	4629      	mov	r1, r5
 800c60a:	4620      	mov	r0, r4
 800c60c:	f000 ff0c 	bl	800d428 <__lshift>
 800c610:	9b01      	ldr	r3, [sp, #4]
 800c612:	f103 0901 	add.w	r9, r3, #1
 800c616:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800c61a:	4413      	add	r3, r2
 800c61c:	9305      	str	r3, [sp, #20]
 800c61e:	f00a 0301 	and.w	r3, sl, #1
 800c622:	46b8      	mov	r8, r7
 800c624:	9304      	str	r3, [sp, #16]
 800c626:	4607      	mov	r7, r0
 800c628:	4631      	mov	r1, r6
 800c62a:	ee18 0a10 	vmov	r0, s16
 800c62e:	f7ff fa75 	bl	800bb1c <quorem>
 800c632:	4641      	mov	r1, r8
 800c634:	9002      	str	r0, [sp, #8]
 800c636:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c63a:	ee18 0a10 	vmov	r0, s16
 800c63e:	f000 ff63 	bl	800d508 <__mcmp>
 800c642:	463a      	mov	r2, r7
 800c644:	9003      	str	r0, [sp, #12]
 800c646:	4631      	mov	r1, r6
 800c648:	4620      	mov	r0, r4
 800c64a:	f000 ff79 	bl	800d540 <__mdiff>
 800c64e:	68c2      	ldr	r2, [r0, #12]
 800c650:	f109 3bff 	add.w	fp, r9, #4294967295
 800c654:	4605      	mov	r5, r0
 800c656:	bb02      	cbnz	r2, 800c69a <_dtoa_r+0xa62>
 800c658:	4601      	mov	r1, r0
 800c65a:	ee18 0a10 	vmov	r0, s16
 800c65e:	f000 ff53 	bl	800d508 <__mcmp>
 800c662:	4602      	mov	r2, r0
 800c664:	4629      	mov	r1, r5
 800c666:	4620      	mov	r0, r4
 800c668:	9207      	str	r2, [sp, #28]
 800c66a:	f000 fcc1 	bl	800cff0 <_Bfree>
 800c66e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800c672:	ea43 0102 	orr.w	r1, r3, r2
 800c676:	9b04      	ldr	r3, [sp, #16]
 800c678:	430b      	orrs	r3, r1
 800c67a:	464d      	mov	r5, r9
 800c67c:	d10f      	bne.n	800c69e <_dtoa_r+0xa66>
 800c67e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c682:	d02a      	beq.n	800c6da <_dtoa_r+0xaa2>
 800c684:	9b03      	ldr	r3, [sp, #12]
 800c686:	2b00      	cmp	r3, #0
 800c688:	dd02      	ble.n	800c690 <_dtoa_r+0xa58>
 800c68a:	9b02      	ldr	r3, [sp, #8]
 800c68c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800c690:	f88b a000 	strb.w	sl, [fp]
 800c694:	e775      	b.n	800c582 <_dtoa_r+0x94a>
 800c696:	4638      	mov	r0, r7
 800c698:	e7ba      	b.n	800c610 <_dtoa_r+0x9d8>
 800c69a:	2201      	movs	r2, #1
 800c69c:	e7e2      	b.n	800c664 <_dtoa_r+0xa2c>
 800c69e:	9b03      	ldr	r3, [sp, #12]
 800c6a0:	2b00      	cmp	r3, #0
 800c6a2:	db04      	blt.n	800c6ae <_dtoa_r+0xa76>
 800c6a4:	9906      	ldr	r1, [sp, #24]
 800c6a6:	430b      	orrs	r3, r1
 800c6a8:	9904      	ldr	r1, [sp, #16]
 800c6aa:	430b      	orrs	r3, r1
 800c6ac:	d122      	bne.n	800c6f4 <_dtoa_r+0xabc>
 800c6ae:	2a00      	cmp	r2, #0
 800c6b0:	ddee      	ble.n	800c690 <_dtoa_r+0xa58>
 800c6b2:	ee18 1a10 	vmov	r1, s16
 800c6b6:	2201      	movs	r2, #1
 800c6b8:	4620      	mov	r0, r4
 800c6ba:	f000 feb5 	bl	800d428 <__lshift>
 800c6be:	4631      	mov	r1, r6
 800c6c0:	ee08 0a10 	vmov	s16, r0
 800c6c4:	f000 ff20 	bl	800d508 <__mcmp>
 800c6c8:	2800      	cmp	r0, #0
 800c6ca:	dc03      	bgt.n	800c6d4 <_dtoa_r+0xa9c>
 800c6cc:	d1e0      	bne.n	800c690 <_dtoa_r+0xa58>
 800c6ce:	f01a 0f01 	tst.w	sl, #1
 800c6d2:	d0dd      	beq.n	800c690 <_dtoa_r+0xa58>
 800c6d4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c6d8:	d1d7      	bne.n	800c68a <_dtoa_r+0xa52>
 800c6da:	2339      	movs	r3, #57	; 0x39
 800c6dc:	f88b 3000 	strb.w	r3, [fp]
 800c6e0:	462b      	mov	r3, r5
 800c6e2:	461d      	mov	r5, r3
 800c6e4:	3b01      	subs	r3, #1
 800c6e6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800c6ea:	2a39      	cmp	r2, #57	; 0x39
 800c6ec:	d071      	beq.n	800c7d2 <_dtoa_r+0xb9a>
 800c6ee:	3201      	adds	r2, #1
 800c6f0:	701a      	strb	r2, [r3, #0]
 800c6f2:	e746      	b.n	800c582 <_dtoa_r+0x94a>
 800c6f4:	2a00      	cmp	r2, #0
 800c6f6:	dd07      	ble.n	800c708 <_dtoa_r+0xad0>
 800c6f8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800c6fc:	d0ed      	beq.n	800c6da <_dtoa_r+0xaa2>
 800c6fe:	f10a 0301 	add.w	r3, sl, #1
 800c702:	f88b 3000 	strb.w	r3, [fp]
 800c706:	e73c      	b.n	800c582 <_dtoa_r+0x94a>
 800c708:	9b05      	ldr	r3, [sp, #20]
 800c70a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800c70e:	4599      	cmp	r9, r3
 800c710:	d047      	beq.n	800c7a2 <_dtoa_r+0xb6a>
 800c712:	ee18 1a10 	vmov	r1, s16
 800c716:	2300      	movs	r3, #0
 800c718:	220a      	movs	r2, #10
 800c71a:	4620      	mov	r0, r4
 800c71c:	f000 fc8a 	bl	800d034 <__multadd>
 800c720:	45b8      	cmp	r8, r7
 800c722:	ee08 0a10 	vmov	s16, r0
 800c726:	f04f 0300 	mov.w	r3, #0
 800c72a:	f04f 020a 	mov.w	r2, #10
 800c72e:	4641      	mov	r1, r8
 800c730:	4620      	mov	r0, r4
 800c732:	d106      	bne.n	800c742 <_dtoa_r+0xb0a>
 800c734:	f000 fc7e 	bl	800d034 <__multadd>
 800c738:	4680      	mov	r8, r0
 800c73a:	4607      	mov	r7, r0
 800c73c:	f109 0901 	add.w	r9, r9, #1
 800c740:	e772      	b.n	800c628 <_dtoa_r+0x9f0>
 800c742:	f000 fc77 	bl	800d034 <__multadd>
 800c746:	4639      	mov	r1, r7
 800c748:	4680      	mov	r8, r0
 800c74a:	2300      	movs	r3, #0
 800c74c:	220a      	movs	r2, #10
 800c74e:	4620      	mov	r0, r4
 800c750:	f000 fc70 	bl	800d034 <__multadd>
 800c754:	4607      	mov	r7, r0
 800c756:	e7f1      	b.n	800c73c <_dtoa_r+0xb04>
 800c758:	9b03      	ldr	r3, [sp, #12]
 800c75a:	9302      	str	r3, [sp, #8]
 800c75c:	9d01      	ldr	r5, [sp, #4]
 800c75e:	ee18 0a10 	vmov	r0, s16
 800c762:	4631      	mov	r1, r6
 800c764:	f7ff f9da 	bl	800bb1c <quorem>
 800c768:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800c76c:	9b01      	ldr	r3, [sp, #4]
 800c76e:	f805 ab01 	strb.w	sl, [r5], #1
 800c772:	1aea      	subs	r2, r5, r3
 800c774:	9b02      	ldr	r3, [sp, #8]
 800c776:	4293      	cmp	r3, r2
 800c778:	dd09      	ble.n	800c78e <_dtoa_r+0xb56>
 800c77a:	ee18 1a10 	vmov	r1, s16
 800c77e:	2300      	movs	r3, #0
 800c780:	220a      	movs	r2, #10
 800c782:	4620      	mov	r0, r4
 800c784:	f000 fc56 	bl	800d034 <__multadd>
 800c788:	ee08 0a10 	vmov	s16, r0
 800c78c:	e7e7      	b.n	800c75e <_dtoa_r+0xb26>
 800c78e:	9b02      	ldr	r3, [sp, #8]
 800c790:	2b00      	cmp	r3, #0
 800c792:	bfc8      	it	gt
 800c794:	461d      	movgt	r5, r3
 800c796:	9b01      	ldr	r3, [sp, #4]
 800c798:	bfd8      	it	le
 800c79a:	2501      	movle	r5, #1
 800c79c:	441d      	add	r5, r3
 800c79e:	f04f 0800 	mov.w	r8, #0
 800c7a2:	ee18 1a10 	vmov	r1, s16
 800c7a6:	2201      	movs	r2, #1
 800c7a8:	4620      	mov	r0, r4
 800c7aa:	f000 fe3d 	bl	800d428 <__lshift>
 800c7ae:	4631      	mov	r1, r6
 800c7b0:	ee08 0a10 	vmov	s16, r0
 800c7b4:	f000 fea8 	bl	800d508 <__mcmp>
 800c7b8:	2800      	cmp	r0, #0
 800c7ba:	dc91      	bgt.n	800c6e0 <_dtoa_r+0xaa8>
 800c7bc:	d102      	bne.n	800c7c4 <_dtoa_r+0xb8c>
 800c7be:	f01a 0f01 	tst.w	sl, #1
 800c7c2:	d18d      	bne.n	800c6e0 <_dtoa_r+0xaa8>
 800c7c4:	462b      	mov	r3, r5
 800c7c6:	461d      	mov	r5, r3
 800c7c8:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800c7cc:	2a30      	cmp	r2, #48	; 0x30
 800c7ce:	d0fa      	beq.n	800c7c6 <_dtoa_r+0xb8e>
 800c7d0:	e6d7      	b.n	800c582 <_dtoa_r+0x94a>
 800c7d2:	9a01      	ldr	r2, [sp, #4]
 800c7d4:	429a      	cmp	r2, r3
 800c7d6:	d184      	bne.n	800c6e2 <_dtoa_r+0xaaa>
 800c7d8:	9b00      	ldr	r3, [sp, #0]
 800c7da:	3301      	adds	r3, #1
 800c7dc:	9300      	str	r3, [sp, #0]
 800c7de:	2331      	movs	r3, #49	; 0x31
 800c7e0:	7013      	strb	r3, [r2, #0]
 800c7e2:	e6ce      	b.n	800c582 <_dtoa_r+0x94a>
 800c7e4:	4b09      	ldr	r3, [pc, #36]	; (800c80c <_dtoa_r+0xbd4>)
 800c7e6:	f7ff ba95 	b.w	800bd14 <_dtoa_r+0xdc>
 800c7ea:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800c7ec:	2b00      	cmp	r3, #0
 800c7ee:	f47f aa6e 	bne.w	800bcce <_dtoa_r+0x96>
 800c7f2:	4b07      	ldr	r3, [pc, #28]	; (800c810 <_dtoa_r+0xbd8>)
 800c7f4:	f7ff ba8e 	b.w	800bd14 <_dtoa_r+0xdc>
 800c7f8:	9b02      	ldr	r3, [sp, #8]
 800c7fa:	2b00      	cmp	r3, #0
 800c7fc:	dcae      	bgt.n	800c75c <_dtoa_r+0xb24>
 800c7fe:	9b06      	ldr	r3, [sp, #24]
 800c800:	2b02      	cmp	r3, #2
 800c802:	f73f aea8 	bgt.w	800c556 <_dtoa_r+0x91e>
 800c806:	e7a9      	b.n	800c75c <_dtoa_r+0xb24>
 800c808:	0800fc51 	.word	0x0800fc51
 800c80c:	0800f9b8 	.word	0x0800f9b8
 800c810:	0800fbe9 	.word	0x0800fbe9

0800c814 <fiprintf>:
 800c814:	b40e      	push	{r1, r2, r3}
 800c816:	b503      	push	{r0, r1, lr}
 800c818:	4601      	mov	r1, r0
 800c81a:	ab03      	add	r3, sp, #12
 800c81c:	4805      	ldr	r0, [pc, #20]	; (800c834 <fiprintf+0x20>)
 800c81e:	f853 2b04 	ldr.w	r2, [r3], #4
 800c822:	6800      	ldr	r0, [r0, #0]
 800c824:	9301      	str	r3, [sp, #4]
 800c826:	f001 fae1 	bl	800ddec <_vfiprintf_r>
 800c82a:	b002      	add	sp, #8
 800c82c:	f85d eb04 	ldr.w	lr, [sp], #4
 800c830:	b003      	add	sp, #12
 800c832:	4770      	bx	lr
 800c834:	20000020 	.word	0x20000020

0800c838 <rshift>:
 800c838:	6903      	ldr	r3, [r0, #16]
 800c83a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800c83e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800c842:	ea4f 1261 	mov.w	r2, r1, asr #5
 800c846:	f100 0414 	add.w	r4, r0, #20
 800c84a:	dd45      	ble.n	800c8d8 <rshift+0xa0>
 800c84c:	f011 011f 	ands.w	r1, r1, #31
 800c850:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800c854:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800c858:	d10c      	bne.n	800c874 <rshift+0x3c>
 800c85a:	f100 0710 	add.w	r7, r0, #16
 800c85e:	4629      	mov	r1, r5
 800c860:	42b1      	cmp	r1, r6
 800c862:	d334      	bcc.n	800c8ce <rshift+0x96>
 800c864:	1a9b      	subs	r3, r3, r2
 800c866:	009b      	lsls	r3, r3, #2
 800c868:	1eea      	subs	r2, r5, #3
 800c86a:	4296      	cmp	r6, r2
 800c86c:	bf38      	it	cc
 800c86e:	2300      	movcc	r3, #0
 800c870:	4423      	add	r3, r4
 800c872:	e015      	b.n	800c8a0 <rshift+0x68>
 800c874:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800c878:	f1c1 0820 	rsb	r8, r1, #32
 800c87c:	40cf      	lsrs	r7, r1
 800c87e:	f105 0e04 	add.w	lr, r5, #4
 800c882:	46a1      	mov	r9, r4
 800c884:	4576      	cmp	r6, lr
 800c886:	46f4      	mov	ip, lr
 800c888:	d815      	bhi.n	800c8b6 <rshift+0x7e>
 800c88a:	1a9a      	subs	r2, r3, r2
 800c88c:	0092      	lsls	r2, r2, #2
 800c88e:	3a04      	subs	r2, #4
 800c890:	3501      	adds	r5, #1
 800c892:	42ae      	cmp	r6, r5
 800c894:	bf38      	it	cc
 800c896:	2200      	movcc	r2, #0
 800c898:	18a3      	adds	r3, r4, r2
 800c89a:	50a7      	str	r7, [r4, r2]
 800c89c:	b107      	cbz	r7, 800c8a0 <rshift+0x68>
 800c89e:	3304      	adds	r3, #4
 800c8a0:	1b1a      	subs	r2, r3, r4
 800c8a2:	42a3      	cmp	r3, r4
 800c8a4:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800c8a8:	bf08      	it	eq
 800c8aa:	2300      	moveq	r3, #0
 800c8ac:	6102      	str	r2, [r0, #16]
 800c8ae:	bf08      	it	eq
 800c8b0:	6143      	streq	r3, [r0, #20]
 800c8b2:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800c8b6:	f8dc c000 	ldr.w	ip, [ip]
 800c8ba:	fa0c fc08 	lsl.w	ip, ip, r8
 800c8be:	ea4c 0707 	orr.w	r7, ip, r7
 800c8c2:	f849 7b04 	str.w	r7, [r9], #4
 800c8c6:	f85e 7b04 	ldr.w	r7, [lr], #4
 800c8ca:	40cf      	lsrs	r7, r1
 800c8cc:	e7da      	b.n	800c884 <rshift+0x4c>
 800c8ce:	f851 cb04 	ldr.w	ip, [r1], #4
 800c8d2:	f847 cf04 	str.w	ip, [r7, #4]!
 800c8d6:	e7c3      	b.n	800c860 <rshift+0x28>
 800c8d8:	4623      	mov	r3, r4
 800c8da:	e7e1      	b.n	800c8a0 <rshift+0x68>

0800c8dc <__hexdig_fun>:
 800c8dc:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800c8e0:	2b09      	cmp	r3, #9
 800c8e2:	d802      	bhi.n	800c8ea <__hexdig_fun+0xe>
 800c8e4:	3820      	subs	r0, #32
 800c8e6:	b2c0      	uxtb	r0, r0
 800c8e8:	4770      	bx	lr
 800c8ea:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800c8ee:	2b05      	cmp	r3, #5
 800c8f0:	d801      	bhi.n	800c8f6 <__hexdig_fun+0x1a>
 800c8f2:	3847      	subs	r0, #71	; 0x47
 800c8f4:	e7f7      	b.n	800c8e6 <__hexdig_fun+0xa>
 800c8f6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800c8fa:	2b05      	cmp	r3, #5
 800c8fc:	d801      	bhi.n	800c902 <__hexdig_fun+0x26>
 800c8fe:	3827      	subs	r0, #39	; 0x27
 800c900:	e7f1      	b.n	800c8e6 <__hexdig_fun+0xa>
 800c902:	2000      	movs	r0, #0
 800c904:	4770      	bx	lr
	...

0800c908 <__gethex>:
 800c908:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c90c:	ed2d 8b02 	vpush	{d8}
 800c910:	b089      	sub	sp, #36	; 0x24
 800c912:	ee08 0a10 	vmov	s16, r0
 800c916:	9304      	str	r3, [sp, #16]
 800c918:	4bb4      	ldr	r3, [pc, #720]	; (800cbec <__gethex+0x2e4>)
 800c91a:	681b      	ldr	r3, [r3, #0]
 800c91c:	9301      	str	r3, [sp, #4]
 800c91e:	4618      	mov	r0, r3
 800c920:	468b      	mov	fp, r1
 800c922:	4690      	mov	r8, r2
 800c924:	f7f3 fc54 	bl	80001d0 <strlen>
 800c928:	9b01      	ldr	r3, [sp, #4]
 800c92a:	f8db 2000 	ldr.w	r2, [fp]
 800c92e:	4403      	add	r3, r0
 800c930:	4682      	mov	sl, r0
 800c932:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800c936:	9305      	str	r3, [sp, #20]
 800c938:	1c93      	adds	r3, r2, #2
 800c93a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800c93e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800c942:	32fe      	adds	r2, #254	; 0xfe
 800c944:	18d1      	adds	r1, r2, r3
 800c946:	461f      	mov	r7, r3
 800c948:	f813 0b01 	ldrb.w	r0, [r3], #1
 800c94c:	9100      	str	r1, [sp, #0]
 800c94e:	2830      	cmp	r0, #48	; 0x30
 800c950:	d0f8      	beq.n	800c944 <__gethex+0x3c>
 800c952:	f7ff ffc3 	bl	800c8dc <__hexdig_fun>
 800c956:	4604      	mov	r4, r0
 800c958:	2800      	cmp	r0, #0
 800c95a:	d13a      	bne.n	800c9d2 <__gethex+0xca>
 800c95c:	9901      	ldr	r1, [sp, #4]
 800c95e:	4652      	mov	r2, sl
 800c960:	4638      	mov	r0, r7
 800c962:	f001 fb8d 	bl	800e080 <strncmp>
 800c966:	4605      	mov	r5, r0
 800c968:	2800      	cmp	r0, #0
 800c96a:	d168      	bne.n	800ca3e <__gethex+0x136>
 800c96c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800c970:	eb07 060a 	add.w	r6, r7, sl
 800c974:	f7ff ffb2 	bl	800c8dc <__hexdig_fun>
 800c978:	2800      	cmp	r0, #0
 800c97a:	d062      	beq.n	800ca42 <__gethex+0x13a>
 800c97c:	4633      	mov	r3, r6
 800c97e:	7818      	ldrb	r0, [r3, #0]
 800c980:	2830      	cmp	r0, #48	; 0x30
 800c982:	461f      	mov	r7, r3
 800c984:	f103 0301 	add.w	r3, r3, #1
 800c988:	d0f9      	beq.n	800c97e <__gethex+0x76>
 800c98a:	f7ff ffa7 	bl	800c8dc <__hexdig_fun>
 800c98e:	2301      	movs	r3, #1
 800c990:	fab0 f480 	clz	r4, r0
 800c994:	0964      	lsrs	r4, r4, #5
 800c996:	4635      	mov	r5, r6
 800c998:	9300      	str	r3, [sp, #0]
 800c99a:	463a      	mov	r2, r7
 800c99c:	4616      	mov	r6, r2
 800c99e:	3201      	adds	r2, #1
 800c9a0:	7830      	ldrb	r0, [r6, #0]
 800c9a2:	f7ff ff9b 	bl	800c8dc <__hexdig_fun>
 800c9a6:	2800      	cmp	r0, #0
 800c9a8:	d1f8      	bne.n	800c99c <__gethex+0x94>
 800c9aa:	9901      	ldr	r1, [sp, #4]
 800c9ac:	4652      	mov	r2, sl
 800c9ae:	4630      	mov	r0, r6
 800c9b0:	f001 fb66 	bl	800e080 <strncmp>
 800c9b4:	b980      	cbnz	r0, 800c9d8 <__gethex+0xd0>
 800c9b6:	b94d      	cbnz	r5, 800c9cc <__gethex+0xc4>
 800c9b8:	eb06 050a 	add.w	r5, r6, sl
 800c9bc:	462a      	mov	r2, r5
 800c9be:	4616      	mov	r6, r2
 800c9c0:	3201      	adds	r2, #1
 800c9c2:	7830      	ldrb	r0, [r6, #0]
 800c9c4:	f7ff ff8a 	bl	800c8dc <__hexdig_fun>
 800c9c8:	2800      	cmp	r0, #0
 800c9ca:	d1f8      	bne.n	800c9be <__gethex+0xb6>
 800c9cc:	1bad      	subs	r5, r5, r6
 800c9ce:	00ad      	lsls	r5, r5, #2
 800c9d0:	e004      	b.n	800c9dc <__gethex+0xd4>
 800c9d2:	2400      	movs	r4, #0
 800c9d4:	4625      	mov	r5, r4
 800c9d6:	e7e0      	b.n	800c99a <__gethex+0x92>
 800c9d8:	2d00      	cmp	r5, #0
 800c9da:	d1f7      	bne.n	800c9cc <__gethex+0xc4>
 800c9dc:	7833      	ldrb	r3, [r6, #0]
 800c9de:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800c9e2:	2b50      	cmp	r3, #80	; 0x50
 800c9e4:	d13b      	bne.n	800ca5e <__gethex+0x156>
 800c9e6:	7873      	ldrb	r3, [r6, #1]
 800c9e8:	2b2b      	cmp	r3, #43	; 0x2b
 800c9ea:	d02c      	beq.n	800ca46 <__gethex+0x13e>
 800c9ec:	2b2d      	cmp	r3, #45	; 0x2d
 800c9ee:	d02e      	beq.n	800ca4e <__gethex+0x146>
 800c9f0:	1c71      	adds	r1, r6, #1
 800c9f2:	f04f 0900 	mov.w	r9, #0
 800c9f6:	7808      	ldrb	r0, [r1, #0]
 800c9f8:	f7ff ff70 	bl	800c8dc <__hexdig_fun>
 800c9fc:	1e43      	subs	r3, r0, #1
 800c9fe:	b2db      	uxtb	r3, r3
 800ca00:	2b18      	cmp	r3, #24
 800ca02:	d82c      	bhi.n	800ca5e <__gethex+0x156>
 800ca04:	f1a0 0210 	sub.w	r2, r0, #16
 800ca08:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ca0c:	f7ff ff66 	bl	800c8dc <__hexdig_fun>
 800ca10:	1e43      	subs	r3, r0, #1
 800ca12:	b2db      	uxtb	r3, r3
 800ca14:	2b18      	cmp	r3, #24
 800ca16:	d91d      	bls.n	800ca54 <__gethex+0x14c>
 800ca18:	f1b9 0f00 	cmp.w	r9, #0
 800ca1c:	d000      	beq.n	800ca20 <__gethex+0x118>
 800ca1e:	4252      	negs	r2, r2
 800ca20:	4415      	add	r5, r2
 800ca22:	f8cb 1000 	str.w	r1, [fp]
 800ca26:	b1e4      	cbz	r4, 800ca62 <__gethex+0x15a>
 800ca28:	9b00      	ldr	r3, [sp, #0]
 800ca2a:	2b00      	cmp	r3, #0
 800ca2c:	bf14      	ite	ne
 800ca2e:	2700      	movne	r7, #0
 800ca30:	2706      	moveq	r7, #6
 800ca32:	4638      	mov	r0, r7
 800ca34:	b009      	add	sp, #36	; 0x24
 800ca36:	ecbd 8b02 	vpop	{d8}
 800ca3a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ca3e:	463e      	mov	r6, r7
 800ca40:	4625      	mov	r5, r4
 800ca42:	2401      	movs	r4, #1
 800ca44:	e7ca      	b.n	800c9dc <__gethex+0xd4>
 800ca46:	f04f 0900 	mov.w	r9, #0
 800ca4a:	1cb1      	adds	r1, r6, #2
 800ca4c:	e7d3      	b.n	800c9f6 <__gethex+0xee>
 800ca4e:	f04f 0901 	mov.w	r9, #1
 800ca52:	e7fa      	b.n	800ca4a <__gethex+0x142>
 800ca54:	230a      	movs	r3, #10
 800ca56:	fb03 0202 	mla	r2, r3, r2, r0
 800ca5a:	3a10      	subs	r2, #16
 800ca5c:	e7d4      	b.n	800ca08 <__gethex+0x100>
 800ca5e:	4631      	mov	r1, r6
 800ca60:	e7df      	b.n	800ca22 <__gethex+0x11a>
 800ca62:	1bf3      	subs	r3, r6, r7
 800ca64:	3b01      	subs	r3, #1
 800ca66:	4621      	mov	r1, r4
 800ca68:	2b07      	cmp	r3, #7
 800ca6a:	dc0b      	bgt.n	800ca84 <__gethex+0x17c>
 800ca6c:	ee18 0a10 	vmov	r0, s16
 800ca70:	f000 fa7e 	bl	800cf70 <_Balloc>
 800ca74:	4604      	mov	r4, r0
 800ca76:	b940      	cbnz	r0, 800ca8a <__gethex+0x182>
 800ca78:	4b5d      	ldr	r3, [pc, #372]	; (800cbf0 <__gethex+0x2e8>)
 800ca7a:	4602      	mov	r2, r0
 800ca7c:	21de      	movs	r1, #222	; 0xde
 800ca7e:	485d      	ldr	r0, [pc, #372]	; (800cbf4 <__gethex+0x2ec>)
 800ca80:	f7ff f82e 	bl	800bae0 <__assert_func>
 800ca84:	3101      	adds	r1, #1
 800ca86:	105b      	asrs	r3, r3, #1
 800ca88:	e7ee      	b.n	800ca68 <__gethex+0x160>
 800ca8a:	f100 0914 	add.w	r9, r0, #20
 800ca8e:	f04f 0b00 	mov.w	fp, #0
 800ca92:	f1ca 0301 	rsb	r3, sl, #1
 800ca96:	f8cd 9008 	str.w	r9, [sp, #8]
 800ca9a:	f8cd b000 	str.w	fp, [sp]
 800ca9e:	9306      	str	r3, [sp, #24]
 800caa0:	42b7      	cmp	r7, r6
 800caa2:	d340      	bcc.n	800cb26 <__gethex+0x21e>
 800caa4:	9802      	ldr	r0, [sp, #8]
 800caa6:	9b00      	ldr	r3, [sp, #0]
 800caa8:	f840 3b04 	str.w	r3, [r0], #4
 800caac:	eba0 0009 	sub.w	r0, r0, r9
 800cab0:	1080      	asrs	r0, r0, #2
 800cab2:	0146      	lsls	r6, r0, #5
 800cab4:	6120      	str	r0, [r4, #16]
 800cab6:	4618      	mov	r0, r3
 800cab8:	f000 fb4c 	bl	800d154 <__hi0bits>
 800cabc:	1a30      	subs	r0, r6, r0
 800cabe:	f8d8 6000 	ldr.w	r6, [r8]
 800cac2:	42b0      	cmp	r0, r6
 800cac4:	dd63      	ble.n	800cb8e <__gethex+0x286>
 800cac6:	1b87      	subs	r7, r0, r6
 800cac8:	4639      	mov	r1, r7
 800caca:	4620      	mov	r0, r4
 800cacc:	f000 fef0 	bl	800d8b0 <__any_on>
 800cad0:	4682      	mov	sl, r0
 800cad2:	b1a8      	cbz	r0, 800cb00 <__gethex+0x1f8>
 800cad4:	1e7b      	subs	r3, r7, #1
 800cad6:	1159      	asrs	r1, r3, #5
 800cad8:	f003 021f 	and.w	r2, r3, #31
 800cadc:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800cae0:	f04f 0a01 	mov.w	sl, #1
 800cae4:	fa0a f202 	lsl.w	r2, sl, r2
 800cae8:	420a      	tst	r2, r1
 800caea:	d009      	beq.n	800cb00 <__gethex+0x1f8>
 800caec:	4553      	cmp	r3, sl
 800caee:	dd05      	ble.n	800cafc <__gethex+0x1f4>
 800caf0:	1eb9      	subs	r1, r7, #2
 800caf2:	4620      	mov	r0, r4
 800caf4:	f000 fedc 	bl	800d8b0 <__any_on>
 800caf8:	2800      	cmp	r0, #0
 800cafa:	d145      	bne.n	800cb88 <__gethex+0x280>
 800cafc:	f04f 0a02 	mov.w	sl, #2
 800cb00:	4639      	mov	r1, r7
 800cb02:	4620      	mov	r0, r4
 800cb04:	f7ff fe98 	bl	800c838 <rshift>
 800cb08:	443d      	add	r5, r7
 800cb0a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cb0e:	42ab      	cmp	r3, r5
 800cb10:	da4c      	bge.n	800cbac <__gethex+0x2a4>
 800cb12:	ee18 0a10 	vmov	r0, s16
 800cb16:	4621      	mov	r1, r4
 800cb18:	f000 fa6a 	bl	800cff0 <_Bfree>
 800cb1c:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cb1e:	2300      	movs	r3, #0
 800cb20:	6013      	str	r3, [r2, #0]
 800cb22:	27a3      	movs	r7, #163	; 0xa3
 800cb24:	e785      	b.n	800ca32 <__gethex+0x12a>
 800cb26:	1e73      	subs	r3, r6, #1
 800cb28:	9a05      	ldr	r2, [sp, #20]
 800cb2a:	9303      	str	r3, [sp, #12]
 800cb2c:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800cb30:	4293      	cmp	r3, r2
 800cb32:	d019      	beq.n	800cb68 <__gethex+0x260>
 800cb34:	f1bb 0f20 	cmp.w	fp, #32
 800cb38:	d107      	bne.n	800cb4a <__gethex+0x242>
 800cb3a:	9b02      	ldr	r3, [sp, #8]
 800cb3c:	9a00      	ldr	r2, [sp, #0]
 800cb3e:	f843 2b04 	str.w	r2, [r3], #4
 800cb42:	9302      	str	r3, [sp, #8]
 800cb44:	2300      	movs	r3, #0
 800cb46:	9300      	str	r3, [sp, #0]
 800cb48:	469b      	mov	fp, r3
 800cb4a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800cb4e:	f7ff fec5 	bl	800c8dc <__hexdig_fun>
 800cb52:	9b00      	ldr	r3, [sp, #0]
 800cb54:	f000 000f 	and.w	r0, r0, #15
 800cb58:	fa00 f00b 	lsl.w	r0, r0, fp
 800cb5c:	4303      	orrs	r3, r0
 800cb5e:	9300      	str	r3, [sp, #0]
 800cb60:	f10b 0b04 	add.w	fp, fp, #4
 800cb64:	9b03      	ldr	r3, [sp, #12]
 800cb66:	e00d      	b.n	800cb84 <__gethex+0x27c>
 800cb68:	9b03      	ldr	r3, [sp, #12]
 800cb6a:	9a06      	ldr	r2, [sp, #24]
 800cb6c:	4413      	add	r3, r2
 800cb6e:	42bb      	cmp	r3, r7
 800cb70:	d3e0      	bcc.n	800cb34 <__gethex+0x22c>
 800cb72:	4618      	mov	r0, r3
 800cb74:	9901      	ldr	r1, [sp, #4]
 800cb76:	9307      	str	r3, [sp, #28]
 800cb78:	4652      	mov	r2, sl
 800cb7a:	f001 fa81 	bl	800e080 <strncmp>
 800cb7e:	9b07      	ldr	r3, [sp, #28]
 800cb80:	2800      	cmp	r0, #0
 800cb82:	d1d7      	bne.n	800cb34 <__gethex+0x22c>
 800cb84:	461e      	mov	r6, r3
 800cb86:	e78b      	b.n	800caa0 <__gethex+0x198>
 800cb88:	f04f 0a03 	mov.w	sl, #3
 800cb8c:	e7b8      	b.n	800cb00 <__gethex+0x1f8>
 800cb8e:	da0a      	bge.n	800cba6 <__gethex+0x29e>
 800cb90:	1a37      	subs	r7, r6, r0
 800cb92:	4621      	mov	r1, r4
 800cb94:	ee18 0a10 	vmov	r0, s16
 800cb98:	463a      	mov	r2, r7
 800cb9a:	f000 fc45 	bl	800d428 <__lshift>
 800cb9e:	1bed      	subs	r5, r5, r7
 800cba0:	4604      	mov	r4, r0
 800cba2:	f100 0914 	add.w	r9, r0, #20
 800cba6:	f04f 0a00 	mov.w	sl, #0
 800cbaa:	e7ae      	b.n	800cb0a <__gethex+0x202>
 800cbac:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800cbb0:	42a8      	cmp	r0, r5
 800cbb2:	dd72      	ble.n	800cc9a <__gethex+0x392>
 800cbb4:	1b45      	subs	r5, r0, r5
 800cbb6:	42ae      	cmp	r6, r5
 800cbb8:	dc36      	bgt.n	800cc28 <__gethex+0x320>
 800cbba:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cbbe:	2b02      	cmp	r3, #2
 800cbc0:	d02a      	beq.n	800cc18 <__gethex+0x310>
 800cbc2:	2b03      	cmp	r3, #3
 800cbc4:	d02c      	beq.n	800cc20 <__gethex+0x318>
 800cbc6:	2b01      	cmp	r3, #1
 800cbc8:	d11c      	bne.n	800cc04 <__gethex+0x2fc>
 800cbca:	42ae      	cmp	r6, r5
 800cbcc:	d11a      	bne.n	800cc04 <__gethex+0x2fc>
 800cbce:	2e01      	cmp	r6, #1
 800cbd0:	d112      	bne.n	800cbf8 <__gethex+0x2f0>
 800cbd2:	9a04      	ldr	r2, [sp, #16]
 800cbd4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800cbd8:	6013      	str	r3, [r2, #0]
 800cbda:	2301      	movs	r3, #1
 800cbdc:	6123      	str	r3, [r4, #16]
 800cbde:	f8c9 3000 	str.w	r3, [r9]
 800cbe2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800cbe4:	2762      	movs	r7, #98	; 0x62
 800cbe6:	601c      	str	r4, [r3, #0]
 800cbe8:	e723      	b.n	800ca32 <__gethex+0x12a>
 800cbea:	bf00      	nop
 800cbec:	0800fcc8 	.word	0x0800fcc8
 800cbf0:	0800fc51 	.word	0x0800fc51
 800cbf4:	0800fc62 	.word	0x0800fc62
 800cbf8:	1e71      	subs	r1, r6, #1
 800cbfa:	4620      	mov	r0, r4
 800cbfc:	f000 fe58 	bl	800d8b0 <__any_on>
 800cc00:	2800      	cmp	r0, #0
 800cc02:	d1e6      	bne.n	800cbd2 <__gethex+0x2ca>
 800cc04:	ee18 0a10 	vmov	r0, s16
 800cc08:	4621      	mov	r1, r4
 800cc0a:	f000 f9f1 	bl	800cff0 <_Bfree>
 800cc0e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800cc10:	2300      	movs	r3, #0
 800cc12:	6013      	str	r3, [r2, #0]
 800cc14:	2750      	movs	r7, #80	; 0x50
 800cc16:	e70c      	b.n	800ca32 <__gethex+0x12a>
 800cc18:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc1a:	2b00      	cmp	r3, #0
 800cc1c:	d1f2      	bne.n	800cc04 <__gethex+0x2fc>
 800cc1e:	e7d8      	b.n	800cbd2 <__gethex+0x2ca>
 800cc20:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cc22:	2b00      	cmp	r3, #0
 800cc24:	d1d5      	bne.n	800cbd2 <__gethex+0x2ca>
 800cc26:	e7ed      	b.n	800cc04 <__gethex+0x2fc>
 800cc28:	1e6f      	subs	r7, r5, #1
 800cc2a:	f1ba 0f00 	cmp.w	sl, #0
 800cc2e:	d131      	bne.n	800cc94 <__gethex+0x38c>
 800cc30:	b127      	cbz	r7, 800cc3c <__gethex+0x334>
 800cc32:	4639      	mov	r1, r7
 800cc34:	4620      	mov	r0, r4
 800cc36:	f000 fe3b 	bl	800d8b0 <__any_on>
 800cc3a:	4682      	mov	sl, r0
 800cc3c:	117b      	asrs	r3, r7, #5
 800cc3e:	2101      	movs	r1, #1
 800cc40:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800cc44:	f007 071f 	and.w	r7, r7, #31
 800cc48:	fa01 f707 	lsl.w	r7, r1, r7
 800cc4c:	421f      	tst	r7, r3
 800cc4e:	4629      	mov	r1, r5
 800cc50:	4620      	mov	r0, r4
 800cc52:	bf18      	it	ne
 800cc54:	f04a 0a02 	orrne.w	sl, sl, #2
 800cc58:	1b76      	subs	r6, r6, r5
 800cc5a:	f7ff fded 	bl	800c838 <rshift>
 800cc5e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800cc62:	2702      	movs	r7, #2
 800cc64:	f1ba 0f00 	cmp.w	sl, #0
 800cc68:	d048      	beq.n	800ccfc <__gethex+0x3f4>
 800cc6a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800cc6e:	2b02      	cmp	r3, #2
 800cc70:	d015      	beq.n	800cc9e <__gethex+0x396>
 800cc72:	2b03      	cmp	r3, #3
 800cc74:	d017      	beq.n	800cca6 <__gethex+0x39e>
 800cc76:	2b01      	cmp	r3, #1
 800cc78:	d109      	bne.n	800cc8e <__gethex+0x386>
 800cc7a:	f01a 0f02 	tst.w	sl, #2
 800cc7e:	d006      	beq.n	800cc8e <__gethex+0x386>
 800cc80:	f8d9 0000 	ldr.w	r0, [r9]
 800cc84:	ea4a 0a00 	orr.w	sl, sl, r0
 800cc88:	f01a 0f01 	tst.w	sl, #1
 800cc8c:	d10e      	bne.n	800ccac <__gethex+0x3a4>
 800cc8e:	f047 0710 	orr.w	r7, r7, #16
 800cc92:	e033      	b.n	800ccfc <__gethex+0x3f4>
 800cc94:	f04f 0a01 	mov.w	sl, #1
 800cc98:	e7d0      	b.n	800cc3c <__gethex+0x334>
 800cc9a:	2701      	movs	r7, #1
 800cc9c:	e7e2      	b.n	800cc64 <__gethex+0x35c>
 800cc9e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cca0:	f1c3 0301 	rsb	r3, r3, #1
 800cca4:	9315      	str	r3, [sp, #84]	; 0x54
 800cca6:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800cca8:	2b00      	cmp	r3, #0
 800ccaa:	d0f0      	beq.n	800cc8e <__gethex+0x386>
 800ccac:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800ccb0:	f104 0314 	add.w	r3, r4, #20
 800ccb4:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800ccb8:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800ccbc:	f04f 0c00 	mov.w	ip, #0
 800ccc0:	4618      	mov	r0, r3
 800ccc2:	f853 2b04 	ldr.w	r2, [r3], #4
 800ccc6:	f1b2 3fff 	cmp.w	r2, #4294967295
 800ccca:	d01c      	beq.n	800cd06 <__gethex+0x3fe>
 800cccc:	3201      	adds	r2, #1
 800ccce:	6002      	str	r2, [r0, #0]
 800ccd0:	2f02      	cmp	r7, #2
 800ccd2:	f104 0314 	add.w	r3, r4, #20
 800ccd6:	d13f      	bne.n	800cd58 <__gethex+0x450>
 800ccd8:	f8d8 2000 	ldr.w	r2, [r8]
 800ccdc:	3a01      	subs	r2, #1
 800ccde:	42b2      	cmp	r2, r6
 800cce0:	d10a      	bne.n	800ccf8 <__gethex+0x3f0>
 800cce2:	1171      	asrs	r1, r6, #5
 800cce4:	2201      	movs	r2, #1
 800cce6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800ccea:	f006 061f 	and.w	r6, r6, #31
 800ccee:	fa02 f606 	lsl.w	r6, r2, r6
 800ccf2:	421e      	tst	r6, r3
 800ccf4:	bf18      	it	ne
 800ccf6:	4617      	movne	r7, r2
 800ccf8:	f047 0720 	orr.w	r7, r7, #32
 800ccfc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800ccfe:	601c      	str	r4, [r3, #0]
 800cd00:	9b04      	ldr	r3, [sp, #16]
 800cd02:	601d      	str	r5, [r3, #0]
 800cd04:	e695      	b.n	800ca32 <__gethex+0x12a>
 800cd06:	4299      	cmp	r1, r3
 800cd08:	f843 cc04 	str.w	ip, [r3, #-4]
 800cd0c:	d8d8      	bhi.n	800ccc0 <__gethex+0x3b8>
 800cd0e:	68a3      	ldr	r3, [r4, #8]
 800cd10:	459b      	cmp	fp, r3
 800cd12:	db19      	blt.n	800cd48 <__gethex+0x440>
 800cd14:	6861      	ldr	r1, [r4, #4]
 800cd16:	ee18 0a10 	vmov	r0, s16
 800cd1a:	3101      	adds	r1, #1
 800cd1c:	f000 f928 	bl	800cf70 <_Balloc>
 800cd20:	4681      	mov	r9, r0
 800cd22:	b918      	cbnz	r0, 800cd2c <__gethex+0x424>
 800cd24:	4b1a      	ldr	r3, [pc, #104]	; (800cd90 <__gethex+0x488>)
 800cd26:	4602      	mov	r2, r0
 800cd28:	2184      	movs	r1, #132	; 0x84
 800cd2a:	e6a8      	b.n	800ca7e <__gethex+0x176>
 800cd2c:	6922      	ldr	r2, [r4, #16]
 800cd2e:	3202      	adds	r2, #2
 800cd30:	f104 010c 	add.w	r1, r4, #12
 800cd34:	0092      	lsls	r2, r2, #2
 800cd36:	300c      	adds	r0, #12
 800cd38:	f000 f90c 	bl	800cf54 <memcpy>
 800cd3c:	4621      	mov	r1, r4
 800cd3e:	ee18 0a10 	vmov	r0, s16
 800cd42:	f000 f955 	bl	800cff0 <_Bfree>
 800cd46:	464c      	mov	r4, r9
 800cd48:	6923      	ldr	r3, [r4, #16]
 800cd4a:	1c5a      	adds	r2, r3, #1
 800cd4c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800cd50:	6122      	str	r2, [r4, #16]
 800cd52:	2201      	movs	r2, #1
 800cd54:	615a      	str	r2, [r3, #20]
 800cd56:	e7bb      	b.n	800ccd0 <__gethex+0x3c8>
 800cd58:	6922      	ldr	r2, [r4, #16]
 800cd5a:	455a      	cmp	r2, fp
 800cd5c:	dd0b      	ble.n	800cd76 <__gethex+0x46e>
 800cd5e:	2101      	movs	r1, #1
 800cd60:	4620      	mov	r0, r4
 800cd62:	f7ff fd69 	bl	800c838 <rshift>
 800cd66:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800cd6a:	3501      	adds	r5, #1
 800cd6c:	42ab      	cmp	r3, r5
 800cd6e:	f6ff aed0 	blt.w	800cb12 <__gethex+0x20a>
 800cd72:	2701      	movs	r7, #1
 800cd74:	e7c0      	b.n	800ccf8 <__gethex+0x3f0>
 800cd76:	f016 061f 	ands.w	r6, r6, #31
 800cd7a:	d0fa      	beq.n	800cd72 <__gethex+0x46a>
 800cd7c:	4453      	add	r3, sl
 800cd7e:	f1c6 0620 	rsb	r6, r6, #32
 800cd82:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800cd86:	f000 f9e5 	bl	800d154 <__hi0bits>
 800cd8a:	42b0      	cmp	r0, r6
 800cd8c:	dbe7      	blt.n	800cd5e <__gethex+0x456>
 800cd8e:	e7f0      	b.n	800cd72 <__gethex+0x46a>
 800cd90:	0800fc51 	.word	0x0800fc51

0800cd94 <L_shift>:
 800cd94:	f1c2 0208 	rsb	r2, r2, #8
 800cd98:	0092      	lsls	r2, r2, #2
 800cd9a:	b570      	push	{r4, r5, r6, lr}
 800cd9c:	f1c2 0620 	rsb	r6, r2, #32
 800cda0:	6843      	ldr	r3, [r0, #4]
 800cda2:	6804      	ldr	r4, [r0, #0]
 800cda4:	fa03 f506 	lsl.w	r5, r3, r6
 800cda8:	432c      	orrs	r4, r5
 800cdaa:	40d3      	lsrs	r3, r2
 800cdac:	6004      	str	r4, [r0, #0]
 800cdae:	f840 3f04 	str.w	r3, [r0, #4]!
 800cdb2:	4288      	cmp	r0, r1
 800cdb4:	d3f4      	bcc.n	800cda0 <L_shift+0xc>
 800cdb6:	bd70      	pop	{r4, r5, r6, pc}

0800cdb8 <__match>:
 800cdb8:	b530      	push	{r4, r5, lr}
 800cdba:	6803      	ldr	r3, [r0, #0]
 800cdbc:	3301      	adds	r3, #1
 800cdbe:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cdc2:	b914      	cbnz	r4, 800cdca <__match+0x12>
 800cdc4:	6003      	str	r3, [r0, #0]
 800cdc6:	2001      	movs	r0, #1
 800cdc8:	bd30      	pop	{r4, r5, pc}
 800cdca:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cdce:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800cdd2:	2d19      	cmp	r5, #25
 800cdd4:	bf98      	it	ls
 800cdd6:	3220      	addls	r2, #32
 800cdd8:	42a2      	cmp	r2, r4
 800cdda:	d0f0      	beq.n	800cdbe <__match+0x6>
 800cddc:	2000      	movs	r0, #0
 800cdde:	e7f3      	b.n	800cdc8 <__match+0x10>

0800cde0 <__hexnan>:
 800cde0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cde4:	680b      	ldr	r3, [r1, #0]
 800cde6:	115e      	asrs	r6, r3, #5
 800cde8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800cdec:	f013 031f 	ands.w	r3, r3, #31
 800cdf0:	b087      	sub	sp, #28
 800cdf2:	bf18      	it	ne
 800cdf4:	3604      	addne	r6, #4
 800cdf6:	2500      	movs	r5, #0
 800cdf8:	1f37      	subs	r7, r6, #4
 800cdfa:	4690      	mov	r8, r2
 800cdfc:	6802      	ldr	r2, [r0, #0]
 800cdfe:	9301      	str	r3, [sp, #4]
 800ce00:	4682      	mov	sl, r0
 800ce02:	f846 5c04 	str.w	r5, [r6, #-4]
 800ce06:	46b9      	mov	r9, r7
 800ce08:	463c      	mov	r4, r7
 800ce0a:	9502      	str	r5, [sp, #8]
 800ce0c:	46ab      	mov	fp, r5
 800ce0e:	7851      	ldrb	r1, [r2, #1]
 800ce10:	1c53      	adds	r3, r2, #1
 800ce12:	9303      	str	r3, [sp, #12]
 800ce14:	b341      	cbz	r1, 800ce68 <__hexnan+0x88>
 800ce16:	4608      	mov	r0, r1
 800ce18:	9205      	str	r2, [sp, #20]
 800ce1a:	9104      	str	r1, [sp, #16]
 800ce1c:	f7ff fd5e 	bl	800c8dc <__hexdig_fun>
 800ce20:	2800      	cmp	r0, #0
 800ce22:	d14f      	bne.n	800cec4 <__hexnan+0xe4>
 800ce24:	9904      	ldr	r1, [sp, #16]
 800ce26:	9a05      	ldr	r2, [sp, #20]
 800ce28:	2920      	cmp	r1, #32
 800ce2a:	d818      	bhi.n	800ce5e <__hexnan+0x7e>
 800ce2c:	9b02      	ldr	r3, [sp, #8]
 800ce2e:	459b      	cmp	fp, r3
 800ce30:	dd13      	ble.n	800ce5a <__hexnan+0x7a>
 800ce32:	454c      	cmp	r4, r9
 800ce34:	d206      	bcs.n	800ce44 <__hexnan+0x64>
 800ce36:	2d07      	cmp	r5, #7
 800ce38:	dc04      	bgt.n	800ce44 <__hexnan+0x64>
 800ce3a:	462a      	mov	r2, r5
 800ce3c:	4649      	mov	r1, r9
 800ce3e:	4620      	mov	r0, r4
 800ce40:	f7ff ffa8 	bl	800cd94 <L_shift>
 800ce44:	4544      	cmp	r4, r8
 800ce46:	d950      	bls.n	800ceea <__hexnan+0x10a>
 800ce48:	2300      	movs	r3, #0
 800ce4a:	f1a4 0904 	sub.w	r9, r4, #4
 800ce4e:	f844 3c04 	str.w	r3, [r4, #-4]
 800ce52:	f8cd b008 	str.w	fp, [sp, #8]
 800ce56:	464c      	mov	r4, r9
 800ce58:	461d      	mov	r5, r3
 800ce5a:	9a03      	ldr	r2, [sp, #12]
 800ce5c:	e7d7      	b.n	800ce0e <__hexnan+0x2e>
 800ce5e:	2929      	cmp	r1, #41	; 0x29
 800ce60:	d156      	bne.n	800cf10 <__hexnan+0x130>
 800ce62:	3202      	adds	r2, #2
 800ce64:	f8ca 2000 	str.w	r2, [sl]
 800ce68:	f1bb 0f00 	cmp.w	fp, #0
 800ce6c:	d050      	beq.n	800cf10 <__hexnan+0x130>
 800ce6e:	454c      	cmp	r4, r9
 800ce70:	d206      	bcs.n	800ce80 <__hexnan+0xa0>
 800ce72:	2d07      	cmp	r5, #7
 800ce74:	dc04      	bgt.n	800ce80 <__hexnan+0xa0>
 800ce76:	462a      	mov	r2, r5
 800ce78:	4649      	mov	r1, r9
 800ce7a:	4620      	mov	r0, r4
 800ce7c:	f7ff ff8a 	bl	800cd94 <L_shift>
 800ce80:	4544      	cmp	r4, r8
 800ce82:	d934      	bls.n	800ceee <__hexnan+0x10e>
 800ce84:	f1a8 0204 	sub.w	r2, r8, #4
 800ce88:	4623      	mov	r3, r4
 800ce8a:	f853 1b04 	ldr.w	r1, [r3], #4
 800ce8e:	f842 1f04 	str.w	r1, [r2, #4]!
 800ce92:	429f      	cmp	r7, r3
 800ce94:	d2f9      	bcs.n	800ce8a <__hexnan+0xaa>
 800ce96:	1b3b      	subs	r3, r7, r4
 800ce98:	f023 0303 	bic.w	r3, r3, #3
 800ce9c:	3304      	adds	r3, #4
 800ce9e:	3401      	adds	r4, #1
 800cea0:	3e03      	subs	r6, #3
 800cea2:	42b4      	cmp	r4, r6
 800cea4:	bf88      	it	hi
 800cea6:	2304      	movhi	r3, #4
 800cea8:	4443      	add	r3, r8
 800ceaa:	2200      	movs	r2, #0
 800ceac:	f843 2b04 	str.w	r2, [r3], #4
 800ceb0:	429f      	cmp	r7, r3
 800ceb2:	d2fb      	bcs.n	800ceac <__hexnan+0xcc>
 800ceb4:	683b      	ldr	r3, [r7, #0]
 800ceb6:	b91b      	cbnz	r3, 800cec0 <__hexnan+0xe0>
 800ceb8:	4547      	cmp	r7, r8
 800ceba:	d127      	bne.n	800cf0c <__hexnan+0x12c>
 800cebc:	2301      	movs	r3, #1
 800cebe:	603b      	str	r3, [r7, #0]
 800cec0:	2005      	movs	r0, #5
 800cec2:	e026      	b.n	800cf12 <__hexnan+0x132>
 800cec4:	3501      	adds	r5, #1
 800cec6:	2d08      	cmp	r5, #8
 800cec8:	f10b 0b01 	add.w	fp, fp, #1
 800cecc:	dd06      	ble.n	800cedc <__hexnan+0xfc>
 800cece:	4544      	cmp	r4, r8
 800ced0:	d9c3      	bls.n	800ce5a <__hexnan+0x7a>
 800ced2:	2300      	movs	r3, #0
 800ced4:	f844 3c04 	str.w	r3, [r4, #-4]
 800ced8:	2501      	movs	r5, #1
 800ceda:	3c04      	subs	r4, #4
 800cedc:	6822      	ldr	r2, [r4, #0]
 800cede:	f000 000f 	and.w	r0, r0, #15
 800cee2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800cee6:	6022      	str	r2, [r4, #0]
 800cee8:	e7b7      	b.n	800ce5a <__hexnan+0x7a>
 800ceea:	2508      	movs	r5, #8
 800ceec:	e7b5      	b.n	800ce5a <__hexnan+0x7a>
 800ceee:	9b01      	ldr	r3, [sp, #4]
 800cef0:	2b00      	cmp	r3, #0
 800cef2:	d0df      	beq.n	800ceb4 <__hexnan+0xd4>
 800cef4:	f04f 32ff 	mov.w	r2, #4294967295
 800cef8:	f1c3 0320 	rsb	r3, r3, #32
 800cefc:	fa22 f303 	lsr.w	r3, r2, r3
 800cf00:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800cf04:	401a      	ands	r2, r3
 800cf06:	f846 2c04 	str.w	r2, [r6, #-4]
 800cf0a:	e7d3      	b.n	800ceb4 <__hexnan+0xd4>
 800cf0c:	3f04      	subs	r7, #4
 800cf0e:	e7d1      	b.n	800ceb4 <__hexnan+0xd4>
 800cf10:	2004      	movs	r0, #4
 800cf12:	b007      	add	sp, #28
 800cf14:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cf18 <_localeconv_r>:
 800cf18:	4800      	ldr	r0, [pc, #0]	; (800cf1c <_localeconv_r+0x4>)
 800cf1a:	4770      	bx	lr
 800cf1c:	20000178 	.word	0x20000178

0800cf20 <malloc>:
 800cf20:	4b02      	ldr	r3, [pc, #8]	; (800cf2c <malloc+0xc>)
 800cf22:	4601      	mov	r1, r0
 800cf24:	6818      	ldr	r0, [r3, #0]
 800cf26:	f000 bd67 	b.w	800d9f8 <_malloc_r>
 800cf2a:	bf00      	nop
 800cf2c:	20000020 	.word	0x20000020

0800cf30 <__ascii_mbtowc>:
 800cf30:	b082      	sub	sp, #8
 800cf32:	b901      	cbnz	r1, 800cf36 <__ascii_mbtowc+0x6>
 800cf34:	a901      	add	r1, sp, #4
 800cf36:	b142      	cbz	r2, 800cf4a <__ascii_mbtowc+0x1a>
 800cf38:	b14b      	cbz	r3, 800cf4e <__ascii_mbtowc+0x1e>
 800cf3a:	7813      	ldrb	r3, [r2, #0]
 800cf3c:	600b      	str	r3, [r1, #0]
 800cf3e:	7812      	ldrb	r2, [r2, #0]
 800cf40:	1e10      	subs	r0, r2, #0
 800cf42:	bf18      	it	ne
 800cf44:	2001      	movne	r0, #1
 800cf46:	b002      	add	sp, #8
 800cf48:	4770      	bx	lr
 800cf4a:	4610      	mov	r0, r2
 800cf4c:	e7fb      	b.n	800cf46 <__ascii_mbtowc+0x16>
 800cf4e:	f06f 0001 	mvn.w	r0, #1
 800cf52:	e7f8      	b.n	800cf46 <__ascii_mbtowc+0x16>

0800cf54 <memcpy>:
 800cf54:	440a      	add	r2, r1
 800cf56:	4291      	cmp	r1, r2
 800cf58:	f100 33ff 	add.w	r3, r0, #4294967295
 800cf5c:	d100      	bne.n	800cf60 <memcpy+0xc>
 800cf5e:	4770      	bx	lr
 800cf60:	b510      	push	{r4, lr}
 800cf62:	f811 4b01 	ldrb.w	r4, [r1], #1
 800cf66:	f803 4f01 	strb.w	r4, [r3, #1]!
 800cf6a:	4291      	cmp	r1, r2
 800cf6c:	d1f9      	bne.n	800cf62 <memcpy+0xe>
 800cf6e:	bd10      	pop	{r4, pc}

0800cf70 <_Balloc>:
 800cf70:	b570      	push	{r4, r5, r6, lr}
 800cf72:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cf74:	4604      	mov	r4, r0
 800cf76:	460d      	mov	r5, r1
 800cf78:	b976      	cbnz	r6, 800cf98 <_Balloc+0x28>
 800cf7a:	2010      	movs	r0, #16
 800cf7c:	f7ff ffd0 	bl	800cf20 <malloc>
 800cf80:	4602      	mov	r2, r0
 800cf82:	6260      	str	r0, [r4, #36]	; 0x24
 800cf84:	b920      	cbnz	r0, 800cf90 <_Balloc+0x20>
 800cf86:	4b18      	ldr	r3, [pc, #96]	; (800cfe8 <_Balloc+0x78>)
 800cf88:	4818      	ldr	r0, [pc, #96]	; (800cfec <_Balloc+0x7c>)
 800cf8a:	2166      	movs	r1, #102	; 0x66
 800cf8c:	f7fe fda8 	bl	800bae0 <__assert_func>
 800cf90:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800cf94:	6006      	str	r6, [r0, #0]
 800cf96:	60c6      	str	r6, [r0, #12]
 800cf98:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800cf9a:	68f3      	ldr	r3, [r6, #12]
 800cf9c:	b183      	cbz	r3, 800cfc0 <_Balloc+0x50>
 800cf9e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfa0:	68db      	ldr	r3, [r3, #12]
 800cfa2:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800cfa6:	b9b8      	cbnz	r0, 800cfd8 <_Balloc+0x68>
 800cfa8:	2101      	movs	r1, #1
 800cfaa:	fa01 f605 	lsl.w	r6, r1, r5
 800cfae:	1d72      	adds	r2, r6, #5
 800cfb0:	0092      	lsls	r2, r2, #2
 800cfb2:	4620      	mov	r0, r4
 800cfb4:	f000 fc9d 	bl	800d8f2 <_calloc_r>
 800cfb8:	b160      	cbz	r0, 800cfd4 <_Balloc+0x64>
 800cfba:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800cfbe:	e00e      	b.n	800cfde <_Balloc+0x6e>
 800cfc0:	2221      	movs	r2, #33	; 0x21
 800cfc2:	2104      	movs	r1, #4
 800cfc4:	4620      	mov	r0, r4
 800cfc6:	f000 fc94 	bl	800d8f2 <_calloc_r>
 800cfca:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800cfcc:	60f0      	str	r0, [r6, #12]
 800cfce:	68db      	ldr	r3, [r3, #12]
 800cfd0:	2b00      	cmp	r3, #0
 800cfd2:	d1e4      	bne.n	800cf9e <_Balloc+0x2e>
 800cfd4:	2000      	movs	r0, #0
 800cfd6:	bd70      	pop	{r4, r5, r6, pc}
 800cfd8:	6802      	ldr	r2, [r0, #0]
 800cfda:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800cfde:	2300      	movs	r3, #0
 800cfe0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800cfe4:	e7f7      	b.n	800cfd6 <_Balloc+0x66>
 800cfe6:	bf00      	nop
 800cfe8:	0800fa38 	.word	0x0800fa38
 800cfec:	0800fcdc 	.word	0x0800fcdc

0800cff0 <_Bfree>:
 800cff0:	b570      	push	{r4, r5, r6, lr}
 800cff2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800cff4:	4605      	mov	r5, r0
 800cff6:	460c      	mov	r4, r1
 800cff8:	b976      	cbnz	r6, 800d018 <_Bfree+0x28>
 800cffa:	2010      	movs	r0, #16
 800cffc:	f7ff ff90 	bl	800cf20 <malloc>
 800d000:	4602      	mov	r2, r0
 800d002:	6268      	str	r0, [r5, #36]	; 0x24
 800d004:	b920      	cbnz	r0, 800d010 <_Bfree+0x20>
 800d006:	4b09      	ldr	r3, [pc, #36]	; (800d02c <_Bfree+0x3c>)
 800d008:	4809      	ldr	r0, [pc, #36]	; (800d030 <_Bfree+0x40>)
 800d00a:	218a      	movs	r1, #138	; 0x8a
 800d00c:	f7fe fd68 	bl	800bae0 <__assert_func>
 800d010:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800d014:	6006      	str	r6, [r0, #0]
 800d016:	60c6      	str	r6, [r0, #12]
 800d018:	b13c      	cbz	r4, 800d02a <_Bfree+0x3a>
 800d01a:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800d01c:	6862      	ldr	r2, [r4, #4]
 800d01e:	68db      	ldr	r3, [r3, #12]
 800d020:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800d024:	6021      	str	r1, [r4, #0]
 800d026:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800d02a:	bd70      	pop	{r4, r5, r6, pc}
 800d02c:	0800fa38 	.word	0x0800fa38
 800d030:	0800fcdc 	.word	0x0800fcdc

0800d034 <__multadd>:
 800d034:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d038:	690d      	ldr	r5, [r1, #16]
 800d03a:	4607      	mov	r7, r0
 800d03c:	460c      	mov	r4, r1
 800d03e:	461e      	mov	r6, r3
 800d040:	f101 0c14 	add.w	ip, r1, #20
 800d044:	2000      	movs	r0, #0
 800d046:	f8dc 3000 	ldr.w	r3, [ip]
 800d04a:	b299      	uxth	r1, r3
 800d04c:	fb02 6101 	mla	r1, r2, r1, r6
 800d050:	0c1e      	lsrs	r6, r3, #16
 800d052:	0c0b      	lsrs	r3, r1, #16
 800d054:	fb02 3306 	mla	r3, r2, r6, r3
 800d058:	b289      	uxth	r1, r1
 800d05a:	3001      	adds	r0, #1
 800d05c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800d060:	4285      	cmp	r5, r0
 800d062:	f84c 1b04 	str.w	r1, [ip], #4
 800d066:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800d06a:	dcec      	bgt.n	800d046 <__multadd+0x12>
 800d06c:	b30e      	cbz	r6, 800d0b2 <__multadd+0x7e>
 800d06e:	68a3      	ldr	r3, [r4, #8]
 800d070:	42ab      	cmp	r3, r5
 800d072:	dc19      	bgt.n	800d0a8 <__multadd+0x74>
 800d074:	6861      	ldr	r1, [r4, #4]
 800d076:	4638      	mov	r0, r7
 800d078:	3101      	adds	r1, #1
 800d07a:	f7ff ff79 	bl	800cf70 <_Balloc>
 800d07e:	4680      	mov	r8, r0
 800d080:	b928      	cbnz	r0, 800d08e <__multadd+0x5a>
 800d082:	4602      	mov	r2, r0
 800d084:	4b0c      	ldr	r3, [pc, #48]	; (800d0b8 <__multadd+0x84>)
 800d086:	480d      	ldr	r0, [pc, #52]	; (800d0bc <__multadd+0x88>)
 800d088:	21b5      	movs	r1, #181	; 0xb5
 800d08a:	f7fe fd29 	bl	800bae0 <__assert_func>
 800d08e:	6922      	ldr	r2, [r4, #16]
 800d090:	3202      	adds	r2, #2
 800d092:	f104 010c 	add.w	r1, r4, #12
 800d096:	0092      	lsls	r2, r2, #2
 800d098:	300c      	adds	r0, #12
 800d09a:	f7ff ff5b 	bl	800cf54 <memcpy>
 800d09e:	4621      	mov	r1, r4
 800d0a0:	4638      	mov	r0, r7
 800d0a2:	f7ff ffa5 	bl	800cff0 <_Bfree>
 800d0a6:	4644      	mov	r4, r8
 800d0a8:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800d0ac:	3501      	adds	r5, #1
 800d0ae:	615e      	str	r6, [r3, #20]
 800d0b0:	6125      	str	r5, [r4, #16]
 800d0b2:	4620      	mov	r0, r4
 800d0b4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d0b8:	0800fc51 	.word	0x0800fc51
 800d0bc:	0800fcdc 	.word	0x0800fcdc

0800d0c0 <__s2b>:
 800d0c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d0c4:	460c      	mov	r4, r1
 800d0c6:	4615      	mov	r5, r2
 800d0c8:	461f      	mov	r7, r3
 800d0ca:	2209      	movs	r2, #9
 800d0cc:	3308      	adds	r3, #8
 800d0ce:	4606      	mov	r6, r0
 800d0d0:	fb93 f3f2 	sdiv	r3, r3, r2
 800d0d4:	2100      	movs	r1, #0
 800d0d6:	2201      	movs	r2, #1
 800d0d8:	429a      	cmp	r2, r3
 800d0da:	db09      	blt.n	800d0f0 <__s2b+0x30>
 800d0dc:	4630      	mov	r0, r6
 800d0de:	f7ff ff47 	bl	800cf70 <_Balloc>
 800d0e2:	b940      	cbnz	r0, 800d0f6 <__s2b+0x36>
 800d0e4:	4602      	mov	r2, r0
 800d0e6:	4b19      	ldr	r3, [pc, #100]	; (800d14c <__s2b+0x8c>)
 800d0e8:	4819      	ldr	r0, [pc, #100]	; (800d150 <__s2b+0x90>)
 800d0ea:	21ce      	movs	r1, #206	; 0xce
 800d0ec:	f7fe fcf8 	bl	800bae0 <__assert_func>
 800d0f0:	0052      	lsls	r2, r2, #1
 800d0f2:	3101      	adds	r1, #1
 800d0f4:	e7f0      	b.n	800d0d8 <__s2b+0x18>
 800d0f6:	9b08      	ldr	r3, [sp, #32]
 800d0f8:	6143      	str	r3, [r0, #20]
 800d0fa:	2d09      	cmp	r5, #9
 800d0fc:	f04f 0301 	mov.w	r3, #1
 800d100:	6103      	str	r3, [r0, #16]
 800d102:	dd16      	ble.n	800d132 <__s2b+0x72>
 800d104:	f104 0909 	add.w	r9, r4, #9
 800d108:	46c8      	mov	r8, r9
 800d10a:	442c      	add	r4, r5
 800d10c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800d110:	4601      	mov	r1, r0
 800d112:	3b30      	subs	r3, #48	; 0x30
 800d114:	220a      	movs	r2, #10
 800d116:	4630      	mov	r0, r6
 800d118:	f7ff ff8c 	bl	800d034 <__multadd>
 800d11c:	45a0      	cmp	r8, r4
 800d11e:	d1f5      	bne.n	800d10c <__s2b+0x4c>
 800d120:	f1a5 0408 	sub.w	r4, r5, #8
 800d124:	444c      	add	r4, r9
 800d126:	1b2d      	subs	r5, r5, r4
 800d128:	1963      	adds	r3, r4, r5
 800d12a:	42bb      	cmp	r3, r7
 800d12c:	db04      	blt.n	800d138 <__s2b+0x78>
 800d12e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d132:	340a      	adds	r4, #10
 800d134:	2509      	movs	r5, #9
 800d136:	e7f6      	b.n	800d126 <__s2b+0x66>
 800d138:	f814 3b01 	ldrb.w	r3, [r4], #1
 800d13c:	4601      	mov	r1, r0
 800d13e:	3b30      	subs	r3, #48	; 0x30
 800d140:	220a      	movs	r2, #10
 800d142:	4630      	mov	r0, r6
 800d144:	f7ff ff76 	bl	800d034 <__multadd>
 800d148:	e7ee      	b.n	800d128 <__s2b+0x68>
 800d14a:	bf00      	nop
 800d14c:	0800fc51 	.word	0x0800fc51
 800d150:	0800fcdc 	.word	0x0800fcdc

0800d154 <__hi0bits>:
 800d154:	0c03      	lsrs	r3, r0, #16
 800d156:	041b      	lsls	r3, r3, #16
 800d158:	b9d3      	cbnz	r3, 800d190 <__hi0bits+0x3c>
 800d15a:	0400      	lsls	r0, r0, #16
 800d15c:	2310      	movs	r3, #16
 800d15e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800d162:	bf04      	itt	eq
 800d164:	0200      	lsleq	r0, r0, #8
 800d166:	3308      	addeq	r3, #8
 800d168:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800d16c:	bf04      	itt	eq
 800d16e:	0100      	lsleq	r0, r0, #4
 800d170:	3304      	addeq	r3, #4
 800d172:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800d176:	bf04      	itt	eq
 800d178:	0080      	lsleq	r0, r0, #2
 800d17a:	3302      	addeq	r3, #2
 800d17c:	2800      	cmp	r0, #0
 800d17e:	db05      	blt.n	800d18c <__hi0bits+0x38>
 800d180:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800d184:	f103 0301 	add.w	r3, r3, #1
 800d188:	bf08      	it	eq
 800d18a:	2320      	moveq	r3, #32
 800d18c:	4618      	mov	r0, r3
 800d18e:	4770      	bx	lr
 800d190:	2300      	movs	r3, #0
 800d192:	e7e4      	b.n	800d15e <__hi0bits+0xa>

0800d194 <__lo0bits>:
 800d194:	6803      	ldr	r3, [r0, #0]
 800d196:	f013 0207 	ands.w	r2, r3, #7
 800d19a:	4601      	mov	r1, r0
 800d19c:	d00b      	beq.n	800d1b6 <__lo0bits+0x22>
 800d19e:	07da      	lsls	r2, r3, #31
 800d1a0:	d423      	bmi.n	800d1ea <__lo0bits+0x56>
 800d1a2:	0798      	lsls	r0, r3, #30
 800d1a4:	bf49      	itett	mi
 800d1a6:	085b      	lsrmi	r3, r3, #1
 800d1a8:	089b      	lsrpl	r3, r3, #2
 800d1aa:	2001      	movmi	r0, #1
 800d1ac:	600b      	strmi	r3, [r1, #0]
 800d1ae:	bf5c      	itt	pl
 800d1b0:	600b      	strpl	r3, [r1, #0]
 800d1b2:	2002      	movpl	r0, #2
 800d1b4:	4770      	bx	lr
 800d1b6:	b298      	uxth	r0, r3
 800d1b8:	b9a8      	cbnz	r0, 800d1e6 <__lo0bits+0x52>
 800d1ba:	0c1b      	lsrs	r3, r3, #16
 800d1bc:	2010      	movs	r0, #16
 800d1be:	b2da      	uxtb	r2, r3
 800d1c0:	b90a      	cbnz	r2, 800d1c6 <__lo0bits+0x32>
 800d1c2:	3008      	adds	r0, #8
 800d1c4:	0a1b      	lsrs	r3, r3, #8
 800d1c6:	071a      	lsls	r2, r3, #28
 800d1c8:	bf04      	itt	eq
 800d1ca:	091b      	lsreq	r3, r3, #4
 800d1cc:	3004      	addeq	r0, #4
 800d1ce:	079a      	lsls	r2, r3, #30
 800d1d0:	bf04      	itt	eq
 800d1d2:	089b      	lsreq	r3, r3, #2
 800d1d4:	3002      	addeq	r0, #2
 800d1d6:	07da      	lsls	r2, r3, #31
 800d1d8:	d403      	bmi.n	800d1e2 <__lo0bits+0x4e>
 800d1da:	085b      	lsrs	r3, r3, #1
 800d1dc:	f100 0001 	add.w	r0, r0, #1
 800d1e0:	d005      	beq.n	800d1ee <__lo0bits+0x5a>
 800d1e2:	600b      	str	r3, [r1, #0]
 800d1e4:	4770      	bx	lr
 800d1e6:	4610      	mov	r0, r2
 800d1e8:	e7e9      	b.n	800d1be <__lo0bits+0x2a>
 800d1ea:	2000      	movs	r0, #0
 800d1ec:	4770      	bx	lr
 800d1ee:	2020      	movs	r0, #32
 800d1f0:	4770      	bx	lr
	...

0800d1f4 <__i2b>:
 800d1f4:	b510      	push	{r4, lr}
 800d1f6:	460c      	mov	r4, r1
 800d1f8:	2101      	movs	r1, #1
 800d1fa:	f7ff feb9 	bl	800cf70 <_Balloc>
 800d1fe:	4602      	mov	r2, r0
 800d200:	b928      	cbnz	r0, 800d20e <__i2b+0x1a>
 800d202:	4b05      	ldr	r3, [pc, #20]	; (800d218 <__i2b+0x24>)
 800d204:	4805      	ldr	r0, [pc, #20]	; (800d21c <__i2b+0x28>)
 800d206:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800d20a:	f7fe fc69 	bl	800bae0 <__assert_func>
 800d20e:	2301      	movs	r3, #1
 800d210:	6144      	str	r4, [r0, #20]
 800d212:	6103      	str	r3, [r0, #16]
 800d214:	bd10      	pop	{r4, pc}
 800d216:	bf00      	nop
 800d218:	0800fc51 	.word	0x0800fc51
 800d21c:	0800fcdc 	.word	0x0800fcdc

0800d220 <__multiply>:
 800d220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d224:	4691      	mov	r9, r2
 800d226:	690a      	ldr	r2, [r1, #16]
 800d228:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d22c:	429a      	cmp	r2, r3
 800d22e:	bfb8      	it	lt
 800d230:	460b      	movlt	r3, r1
 800d232:	460c      	mov	r4, r1
 800d234:	bfbc      	itt	lt
 800d236:	464c      	movlt	r4, r9
 800d238:	4699      	movlt	r9, r3
 800d23a:	6927      	ldr	r7, [r4, #16]
 800d23c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800d240:	68a3      	ldr	r3, [r4, #8]
 800d242:	6861      	ldr	r1, [r4, #4]
 800d244:	eb07 060a 	add.w	r6, r7, sl
 800d248:	42b3      	cmp	r3, r6
 800d24a:	b085      	sub	sp, #20
 800d24c:	bfb8      	it	lt
 800d24e:	3101      	addlt	r1, #1
 800d250:	f7ff fe8e 	bl	800cf70 <_Balloc>
 800d254:	b930      	cbnz	r0, 800d264 <__multiply+0x44>
 800d256:	4602      	mov	r2, r0
 800d258:	4b44      	ldr	r3, [pc, #272]	; (800d36c <__multiply+0x14c>)
 800d25a:	4845      	ldr	r0, [pc, #276]	; (800d370 <__multiply+0x150>)
 800d25c:	f240 115d 	movw	r1, #349	; 0x15d
 800d260:	f7fe fc3e 	bl	800bae0 <__assert_func>
 800d264:	f100 0514 	add.w	r5, r0, #20
 800d268:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800d26c:	462b      	mov	r3, r5
 800d26e:	2200      	movs	r2, #0
 800d270:	4543      	cmp	r3, r8
 800d272:	d321      	bcc.n	800d2b8 <__multiply+0x98>
 800d274:	f104 0314 	add.w	r3, r4, #20
 800d278:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800d27c:	f109 0314 	add.w	r3, r9, #20
 800d280:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800d284:	9202      	str	r2, [sp, #8]
 800d286:	1b3a      	subs	r2, r7, r4
 800d288:	3a15      	subs	r2, #21
 800d28a:	f022 0203 	bic.w	r2, r2, #3
 800d28e:	3204      	adds	r2, #4
 800d290:	f104 0115 	add.w	r1, r4, #21
 800d294:	428f      	cmp	r7, r1
 800d296:	bf38      	it	cc
 800d298:	2204      	movcc	r2, #4
 800d29a:	9201      	str	r2, [sp, #4]
 800d29c:	9a02      	ldr	r2, [sp, #8]
 800d29e:	9303      	str	r3, [sp, #12]
 800d2a0:	429a      	cmp	r2, r3
 800d2a2:	d80c      	bhi.n	800d2be <__multiply+0x9e>
 800d2a4:	2e00      	cmp	r6, #0
 800d2a6:	dd03      	ble.n	800d2b0 <__multiply+0x90>
 800d2a8:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800d2ac:	2b00      	cmp	r3, #0
 800d2ae:	d05a      	beq.n	800d366 <__multiply+0x146>
 800d2b0:	6106      	str	r6, [r0, #16]
 800d2b2:	b005      	add	sp, #20
 800d2b4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d2b8:	f843 2b04 	str.w	r2, [r3], #4
 800d2bc:	e7d8      	b.n	800d270 <__multiply+0x50>
 800d2be:	f8b3 a000 	ldrh.w	sl, [r3]
 800d2c2:	f1ba 0f00 	cmp.w	sl, #0
 800d2c6:	d024      	beq.n	800d312 <__multiply+0xf2>
 800d2c8:	f104 0e14 	add.w	lr, r4, #20
 800d2cc:	46a9      	mov	r9, r5
 800d2ce:	f04f 0c00 	mov.w	ip, #0
 800d2d2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800d2d6:	f8d9 1000 	ldr.w	r1, [r9]
 800d2da:	fa1f fb82 	uxth.w	fp, r2
 800d2de:	b289      	uxth	r1, r1
 800d2e0:	fb0a 110b 	mla	r1, sl, fp, r1
 800d2e4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800d2e8:	f8d9 2000 	ldr.w	r2, [r9]
 800d2ec:	4461      	add	r1, ip
 800d2ee:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d2f2:	fb0a c20b 	mla	r2, sl, fp, ip
 800d2f6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800d2fa:	b289      	uxth	r1, r1
 800d2fc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800d300:	4577      	cmp	r7, lr
 800d302:	f849 1b04 	str.w	r1, [r9], #4
 800d306:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800d30a:	d8e2      	bhi.n	800d2d2 <__multiply+0xb2>
 800d30c:	9a01      	ldr	r2, [sp, #4]
 800d30e:	f845 c002 	str.w	ip, [r5, r2]
 800d312:	9a03      	ldr	r2, [sp, #12]
 800d314:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800d318:	3304      	adds	r3, #4
 800d31a:	f1b9 0f00 	cmp.w	r9, #0
 800d31e:	d020      	beq.n	800d362 <__multiply+0x142>
 800d320:	6829      	ldr	r1, [r5, #0]
 800d322:	f104 0c14 	add.w	ip, r4, #20
 800d326:	46ae      	mov	lr, r5
 800d328:	f04f 0a00 	mov.w	sl, #0
 800d32c:	f8bc b000 	ldrh.w	fp, [ip]
 800d330:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800d334:	fb09 220b 	mla	r2, r9, fp, r2
 800d338:	4492      	add	sl, r2
 800d33a:	b289      	uxth	r1, r1
 800d33c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800d340:	f84e 1b04 	str.w	r1, [lr], #4
 800d344:	f85c 2b04 	ldr.w	r2, [ip], #4
 800d348:	f8be 1000 	ldrh.w	r1, [lr]
 800d34c:	0c12      	lsrs	r2, r2, #16
 800d34e:	fb09 1102 	mla	r1, r9, r2, r1
 800d352:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800d356:	4567      	cmp	r7, ip
 800d358:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800d35c:	d8e6      	bhi.n	800d32c <__multiply+0x10c>
 800d35e:	9a01      	ldr	r2, [sp, #4]
 800d360:	50a9      	str	r1, [r5, r2]
 800d362:	3504      	adds	r5, #4
 800d364:	e79a      	b.n	800d29c <__multiply+0x7c>
 800d366:	3e01      	subs	r6, #1
 800d368:	e79c      	b.n	800d2a4 <__multiply+0x84>
 800d36a:	bf00      	nop
 800d36c:	0800fc51 	.word	0x0800fc51
 800d370:	0800fcdc 	.word	0x0800fcdc

0800d374 <__pow5mult>:
 800d374:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d378:	4615      	mov	r5, r2
 800d37a:	f012 0203 	ands.w	r2, r2, #3
 800d37e:	4606      	mov	r6, r0
 800d380:	460f      	mov	r7, r1
 800d382:	d007      	beq.n	800d394 <__pow5mult+0x20>
 800d384:	4c25      	ldr	r4, [pc, #148]	; (800d41c <__pow5mult+0xa8>)
 800d386:	3a01      	subs	r2, #1
 800d388:	2300      	movs	r3, #0
 800d38a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800d38e:	f7ff fe51 	bl	800d034 <__multadd>
 800d392:	4607      	mov	r7, r0
 800d394:	10ad      	asrs	r5, r5, #2
 800d396:	d03d      	beq.n	800d414 <__pow5mult+0xa0>
 800d398:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800d39a:	b97c      	cbnz	r4, 800d3bc <__pow5mult+0x48>
 800d39c:	2010      	movs	r0, #16
 800d39e:	f7ff fdbf 	bl	800cf20 <malloc>
 800d3a2:	4602      	mov	r2, r0
 800d3a4:	6270      	str	r0, [r6, #36]	; 0x24
 800d3a6:	b928      	cbnz	r0, 800d3b4 <__pow5mult+0x40>
 800d3a8:	4b1d      	ldr	r3, [pc, #116]	; (800d420 <__pow5mult+0xac>)
 800d3aa:	481e      	ldr	r0, [pc, #120]	; (800d424 <__pow5mult+0xb0>)
 800d3ac:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800d3b0:	f7fe fb96 	bl	800bae0 <__assert_func>
 800d3b4:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800d3b8:	6004      	str	r4, [r0, #0]
 800d3ba:	60c4      	str	r4, [r0, #12]
 800d3bc:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800d3c0:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800d3c4:	b94c      	cbnz	r4, 800d3da <__pow5mult+0x66>
 800d3c6:	f240 2171 	movw	r1, #625	; 0x271
 800d3ca:	4630      	mov	r0, r6
 800d3cc:	f7ff ff12 	bl	800d1f4 <__i2b>
 800d3d0:	2300      	movs	r3, #0
 800d3d2:	f8c8 0008 	str.w	r0, [r8, #8]
 800d3d6:	4604      	mov	r4, r0
 800d3d8:	6003      	str	r3, [r0, #0]
 800d3da:	f04f 0900 	mov.w	r9, #0
 800d3de:	07eb      	lsls	r3, r5, #31
 800d3e0:	d50a      	bpl.n	800d3f8 <__pow5mult+0x84>
 800d3e2:	4639      	mov	r1, r7
 800d3e4:	4622      	mov	r2, r4
 800d3e6:	4630      	mov	r0, r6
 800d3e8:	f7ff ff1a 	bl	800d220 <__multiply>
 800d3ec:	4639      	mov	r1, r7
 800d3ee:	4680      	mov	r8, r0
 800d3f0:	4630      	mov	r0, r6
 800d3f2:	f7ff fdfd 	bl	800cff0 <_Bfree>
 800d3f6:	4647      	mov	r7, r8
 800d3f8:	106d      	asrs	r5, r5, #1
 800d3fa:	d00b      	beq.n	800d414 <__pow5mult+0xa0>
 800d3fc:	6820      	ldr	r0, [r4, #0]
 800d3fe:	b938      	cbnz	r0, 800d410 <__pow5mult+0x9c>
 800d400:	4622      	mov	r2, r4
 800d402:	4621      	mov	r1, r4
 800d404:	4630      	mov	r0, r6
 800d406:	f7ff ff0b 	bl	800d220 <__multiply>
 800d40a:	6020      	str	r0, [r4, #0]
 800d40c:	f8c0 9000 	str.w	r9, [r0]
 800d410:	4604      	mov	r4, r0
 800d412:	e7e4      	b.n	800d3de <__pow5mult+0x6a>
 800d414:	4638      	mov	r0, r7
 800d416:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d41a:	bf00      	nop
 800d41c:	0800fe28 	.word	0x0800fe28
 800d420:	0800fa38 	.word	0x0800fa38
 800d424:	0800fcdc 	.word	0x0800fcdc

0800d428 <__lshift>:
 800d428:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800d42c:	460c      	mov	r4, r1
 800d42e:	6849      	ldr	r1, [r1, #4]
 800d430:	6923      	ldr	r3, [r4, #16]
 800d432:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800d436:	68a3      	ldr	r3, [r4, #8]
 800d438:	4607      	mov	r7, r0
 800d43a:	4691      	mov	r9, r2
 800d43c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800d440:	f108 0601 	add.w	r6, r8, #1
 800d444:	42b3      	cmp	r3, r6
 800d446:	db0b      	blt.n	800d460 <__lshift+0x38>
 800d448:	4638      	mov	r0, r7
 800d44a:	f7ff fd91 	bl	800cf70 <_Balloc>
 800d44e:	4605      	mov	r5, r0
 800d450:	b948      	cbnz	r0, 800d466 <__lshift+0x3e>
 800d452:	4602      	mov	r2, r0
 800d454:	4b2a      	ldr	r3, [pc, #168]	; (800d500 <__lshift+0xd8>)
 800d456:	482b      	ldr	r0, [pc, #172]	; (800d504 <__lshift+0xdc>)
 800d458:	f240 11d9 	movw	r1, #473	; 0x1d9
 800d45c:	f7fe fb40 	bl	800bae0 <__assert_func>
 800d460:	3101      	adds	r1, #1
 800d462:	005b      	lsls	r3, r3, #1
 800d464:	e7ee      	b.n	800d444 <__lshift+0x1c>
 800d466:	2300      	movs	r3, #0
 800d468:	f100 0114 	add.w	r1, r0, #20
 800d46c:	f100 0210 	add.w	r2, r0, #16
 800d470:	4618      	mov	r0, r3
 800d472:	4553      	cmp	r3, sl
 800d474:	db37      	blt.n	800d4e6 <__lshift+0xbe>
 800d476:	6920      	ldr	r0, [r4, #16]
 800d478:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800d47c:	f104 0314 	add.w	r3, r4, #20
 800d480:	f019 091f 	ands.w	r9, r9, #31
 800d484:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800d488:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800d48c:	d02f      	beq.n	800d4ee <__lshift+0xc6>
 800d48e:	f1c9 0e20 	rsb	lr, r9, #32
 800d492:	468a      	mov	sl, r1
 800d494:	f04f 0c00 	mov.w	ip, #0
 800d498:	681a      	ldr	r2, [r3, #0]
 800d49a:	fa02 f209 	lsl.w	r2, r2, r9
 800d49e:	ea42 020c 	orr.w	r2, r2, ip
 800d4a2:	f84a 2b04 	str.w	r2, [sl], #4
 800d4a6:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4aa:	4298      	cmp	r0, r3
 800d4ac:	fa22 fc0e 	lsr.w	ip, r2, lr
 800d4b0:	d8f2      	bhi.n	800d498 <__lshift+0x70>
 800d4b2:	1b03      	subs	r3, r0, r4
 800d4b4:	3b15      	subs	r3, #21
 800d4b6:	f023 0303 	bic.w	r3, r3, #3
 800d4ba:	3304      	adds	r3, #4
 800d4bc:	f104 0215 	add.w	r2, r4, #21
 800d4c0:	4290      	cmp	r0, r2
 800d4c2:	bf38      	it	cc
 800d4c4:	2304      	movcc	r3, #4
 800d4c6:	f841 c003 	str.w	ip, [r1, r3]
 800d4ca:	f1bc 0f00 	cmp.w	ip, #0
 800d4ce:	d001      	beq.n	800d4d4 <__lshift+0xac>
 800d4d0:	f108 0602 	add.w	r6, r8, #2
 800d4d4:	3e01      	subs	r6, #1
 800d4d6:	4638      	mov	r0, r7
 800d4d8:	612e      	str	r6, [r5, #16]
 800d4da:	4621      	mov	r1, r4
 800d4dc:	f7ff fd88 	bl	800cff0 <_Bfree>
 800d4e0:	4628      	mov	r0, r5
 800d4e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800d4e6:	f842 0f04 	str.w	r0, [r2, #4]!
 800d4ea:	3301      	adds	r3, #1
 800d4ec:	e7c1      	b.n	800d472 <__lshift+0x4a>
 800d4ee:	3904      	subs	r1, #4
 800d4f0:	f853 2b04 	ldr.w	r2, [r3], #4
 800d4f4:	f841 2f04 	str.w	r2, [r1, #4]!
 800d4f8:	4298      	cmp	r0, r3
 800d4fa:	d8f9      	bhi.n	800d4f0 <__lshift+0xc8>
 800d4fc:	e7ea      	b.n	800d4d4 <__lshift+0xac>
 800d4fe:	bf00      	nop
 800d500:	0800fc51 	.word	0x0800fc51
 800d504:	0800fcdc 	.word	0x0800fcdc

0800d508 <__mcmp>:
 800d508:	b530      	push	{r4, r5, lr}
 800d50a:	6902      	ldr	r2, [r0, #16]
 800d50c:	690c      	ldr	r4, [r1, #16]
 800d50e:	1b12      	subs	r2, r2, r4
 800d510:	d10e      	bne.n	800d530 <__mcmp+0x28>
 800d512:	f100 0314 	add.w	r3, r0, #20
 800d516:	3114      	adds	r1, #20
 800d518:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800d51c:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800d520:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800d524:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800d528:	42a5      	cmp	r5, r4
 800d52a:	d003      	beq.n	800d534 <__mcmp+0x2c>
 800d52c:	d305      	bcc.n	800d53a <__mcmp+0x32>
 800d52e:	2201      	movs	r2, #1
 800d530:	4610      	mov	r0, r2
 800d532:	bd30      	pop	{r4, r5, pc}
 800d534:	4283      	cmp	r3, r0
 800d536:	d3f3      	bcc.n	800d520 <__mcmp+0x18>
 800d538:	e7fa      	b.n	800d530 <__mcmp+0x28>
 800d53a:	f04f 32ff 	mov.w	r2, #4294967295
 800d53e:	e7f7      	b.n	800d530 <__mcmp+0x28>

0800d540 <__mdiff>:
 800d540:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d544:	460c      	mov	r4, r1
 800d546:	4606      	mov	r6, r0
 800d548:	4611      	mov	r1, r2
 800d54a:	4620      	mov	r0, r4
 800d54c:	4690      	mov	r8, r2
 800d54e:	f7ff ffdb 	bl	800d508 <__mcmp>
 800d552:	1e05      	subs	r5, r0, #0
 800d554:	d110      	bne.n	800d578 <__mdiff+0x38>
 800d556:	4629      	mov	r1, r5
 800d558:	4630      	mov	r0, r6
 800d55a:	f7ff fd09 	bl	800cf70 <_Balloc>
 800d55e:	b930      	cbnz	r0, 800d56e <__mdiff+0x2e>
 800d560:	4b3a      	ldr	r3, [pc, #232]	; (800d64c <__mdiff+0x10c>)
 800d562:	4602      	mov	r2, r0
 800d564:	f240 2132 	movw	r1, #562	; 0x232
 800d568:	4839      	ldr	r0, [pc, #228]	; (800d650 <__mdiff+0x110>)
 800d56a:	f7fe fab9 	bl	800bae0 <__assert_func>
 800d56e:	2301      	movs	r3, #1
 800d570:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800d574:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d578:	bfa4      	itt	ge
 800d57a:	4643      	movge	r3, r8
 800d57c:	46a0      	movge	r8, r4
 800d57e:	4630      	mov	r0, r6
 800d580:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800d584:	bfa6      	itte	ge
 800d586:	461c      	movge	r4, r3
 800d588:	2500      	movge	r5, #0
 800d58a:	2501      	movlt	r5, #1
 800d58c:	f7ff fcf0 	bl	800cf70 <_Balloc>
 800d590:	b920      	cbnz	r0, 800d59c <__mdiff+0x5c>
 800d592:	4b2e      	ldr	r3, [pc, #184]	; (800d64c <__mdiff+0x10c>)
 800d594:	4602      	mov	r2, r0
 800d596:	f44f 7110 	mov.w	r1, #576	; 0x240
 800d59a:	e7e5      	b.n	800d568 <__mdiff+0x28>
 800d59c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800d5a0:	6926      	ldr	r6, [r4, #16]
 800d5a2:	60c5      	str	r5, [r0, #12]
 800d5a4:	f104 0914 	add.w	r9, r4, #20
 800d5a8:	f108 0514 	add.w	r5, r8, #20
 800d5ac:	f100 0e14 	add.w	lr, r0, #20
 800d5b0:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800d5b4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800d5b8:	f108 0210 	add.w	r2, r8, #16
 800d5bc:	46f2      	mov	sl, lr
 800d5be:	2100      	movs	r1, #0
 800d5c0:	f859 3b04 	ldr.w	r3, [r9], #4
 800d5c4:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800d5c8:	fa1f f883 	uxth.w	r8, r3
 800d5cc:	fa11 f18b 	uxtah	r1, r1, fp
 800d5d0:	0c1b      	lsrs	r3, r3, #16
 800d5d2:	eba1 0808 	sub.w	r8, r1, r8
 800d5d6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800d5da:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800d5de:	fa1f f888 	uxth.w	r8, r8
 800d5e2:	1419      	asrs	r1, r3, #16
 800d5e4:	454e      	cmp	r6, r9
 800d5e6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800d5ea:	f84a 3b04 	str.w	r3, [sl], #4
 800d5ee:	d8e7      	bhi.n	800d5c0 <__mdiff+0x80>
 800d5f0:	1b33      	subs	r3, r6, r4
 800d5f2:	3b15      	subs	r3, #21
 800d5f4:	f023 0303 	bic.w	r3, r3, #3
 800d5f8:	3304      	adds	r3, #4
 800d5fa:	3415      	adds	r4, #21
 800d5fc:	42a6      	cmp	r6, r4
 800d5fe:	bf38      	it	cc
 800d600:	2304      	movcc	r3, #4
 800d602:	441d      	add	r5, r3
 800d604:	4473      	add	r3, lr
 800d606:	469e      	mov	lr, r3
 800d608:	462e      	mov	r6, r5
 800d60a:	4566      	cmp	r6, ip
 800d60c:	d30e      	bcc.n	800d62c <__mdiff+0xec>
 800d60e:	f10c 0203 	add.w	r2, ip, #3
 800d612:	1b52      	subs	r2, r2, r5
 800d614:	f022 0203 	bic.w	r2, r2, #3
 800d618:	3d03      	subs	r5, #3
 800d61a:	45ac      	cmp	ip, r5
 800d61c:	bf38      	it	cc
 800d61e:	2200      	movcc	r2, #0
 800d620:	441a      	add	r2, r3
 800d622:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800d626:	b17b      	cbz	r3, 800d648 <__mdiff+0x108>
 800d628:	6107      	str	r7, [r0, #16]
 800d62a:	e7a3      	b.n	800d574 <__mdiff+0x34>
 800d62c:	f856 8b04 	ldr.w	r8, [r6], #4
 800d630:	fa11 f288 	uxtah	r2, r1, r8
 800d634:	1414      	asrs	r4, r2, #16
 800d636:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800d63a:	b292      	uxth	r2, r2
 800d63c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800d640:	f84e 2b04 	str.w	r2, [lr], #4
 800d644:	1421      	asrs	r1, r4, #16
 800d646:	e7e0      	b.n	800d60a <__mdiff+0xca>
 800d648:	3f01      	subs	r7, #1
 800d64a:	e7ea      	b.n	800d622 <__mdiff+0xe2>
 800d64c:	0800fc51 	.word	0x0800fc51
 800d650:	0800fcdc 	.word	0x0800fcdc

0800d654 <__ulp>:
 800d654:	b082      	sub	sp, #8
 800d656:	ed8d 0b00 	vstr	d0, [sp]
 800d65a:	9b01      	ldr	r3, [sp, #4]
 800d65c:	4912      	ldr	r1, [pc, #72]	; (800d6a8 <__ulp+0x54>)
 800d65e:	4019      	ands	r1, r3
 800d660:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800d664:	2900      	cmp	r1, #0
 800d666:	dd05      	ble.n	800d674 <__ulp+0x20>
 800d668:	2200      	movs	r2, #0
 800d66a:	460b      	mov	r3, r1
 800d66c:	ec43 2b10 	vmov	d0, r2, r3
 800d670:	b002      	add	sp, #8
 800d672:	4770      	bx	lr
 800d674:	4249      	negs	r1, r1
 800d676:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800d67a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800d67e:	f04f 0200 	mov.w	r2, #0
 800d682:	f04f 0300 	mov.w	r3, #0
 800d686:	da04      	bge.n	800d692 <__ulp+0x3e>
 800d688:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800d68c:	fa41 f300 	asr.w	r3, r1, r0
 800d690:	e7ec      	b.n	800d66c <__ulp+0x18>
 800d692:	f1a0 0114 	sub.w	r1, r0, #20
 800d696:	291e      	cmp	r1, #30
 800d698:	bfda      	itte	le
 800d69a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800d69e:	fa20 f101 	lsrle.w	r1, r0, r1
 800d6a2:	2101      	movgt	r1, #1
 800d6a4:	460a      	mov	r2, r1
 800d6a6:	e7e1      	b.n	800d66c <__ulp+0x18>
 800d6a8:	7ff00000 	.word	0x7ff00000

0800d6ac <__b2d>:
 800d6ac:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d6ae:	6905      	ldr	r5, [r0, #16]
 800d6b0:	f100 0714 	add.w	r7, r0, #20
 800d6b4:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800d6b8:	1f2e      	subs	r6, r5, #4
 800d6ba:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800d6be:	4620      	mov	r0, r4
 800d6c0:	f7ff fd48 	bl	800d154 <__hi0bits>
 800d6c4:	f1c0 0320 	rsb	r3, r0, #32
 800d6c8:	280a      	cmp	r0, #10
 800d6ca:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800d748 <__b2d+0x9c>
 800d6ce:	600b      	str	r3, [r1, #0]
 800d6d0:	dc14      	bgt.n	800d6fc <__b2d+0x50>
 800d6d2:	f1c0 0e0b 	rsb	lr, r0, #11
 800d6d6:	fa24 f10e 	lsr.w	r1, r4, lr
 800d6da:	42b7      	cmp	r7, r6
 800d6dc:	ea41 030c 	orr.w	r3, r1, ip
 800d6e0:	bf34      	ite	cc
 800d6e2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d6e6:	2100      	movcs	r1, #0
 800d6e8:	3015      	adds	r0, #21
 800d6ea:	fa04 f000 	lsl.w	r0, r4, r0
 800d6ee:	fa21 f10e 	lsr.w	r1, r1, lr
 800d6f2:	ea40 0201 	orr.w	r2, r0, r1
 800d6f6:	ec43 2b10 	vmov	d0, r2, r3
 800d6fa:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d6fc:	42b7      	cmp	r7, r6
 800d6fe:	bf3a      	itte	cc
 800d700:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800d704:	f1a5 0608 	subcc.w	r6, r5, #8
 800d708:	2100      	movcs	r1, #0
 800d70a:	380b      	subs	r0, #11
 800d70c:	d017      	beq.n	800d73e <__b2d+0x92>
 800d70e:	f1c0 0c20 	rsb	ip, r0, #32
 800d712:	fa04 f500 	lsl.w	r5, r4, r0
 800d716:	42be      	cmp	r6, r7
 800d718:	fa21 f40c 	lsr.w	r4, r1, ip
 800d71c:	ea45 0504 	orr.w	r5, r5, r4
 800d720:	bf8c      	ite	hi
 800d722:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800d726:	2400      	movls	r4, #0
 800d728:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800d72c:	fa01 f000 	lsl.w	r0, r1, r0
 800d730:	fa24 f40c 	lsr.w	r4, r4, ip
 800d734:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800d738:	ea40 0204 	orr.w	r2, r0, r4
 800d73c:	e7db      	b.n	800d6f6 <__b2d+0x4a>
 800d73e:	ea44 030c 	orr.w	r3, r4, ip
 800d742:	460a      	mov	r2, r1
 800d744:	e7d7      	b.n	800d6f6 <__b2d+0x4a>
 800d746:	bf00      	nop
 800d748:	3ff00000 	.word	0x3ff00000

0800d74c <__d2b>:
 800d74c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800d750:	4689      	mov	r9, r1
 800d752:	2101      	movs	r1, #1
 800d754:	ec57 6b10 	vmov	r6, r7, d0
 800d758:	4690      	mov	r8, r2
 800d75a:	f7ff fc09 	bl	800cf70 <_Balloc>
 800d75e:	4604      	mov	r4, r0
 800d760:	b930      	cbnz	r0, 800d770 <__d2b+0x24>
 800d762:	4602      	mov	r2, r0
 800d764:	4b25      	ldr	r3, [pc, #148]	; (800d7fc <__d2b+0xb0>)
 800d766:	4826      	ldr	r0, [pc, #152]	; (800d800 <__d2b+0xb4>)
 800d768:	f240 310a 	movw	r1, #778	; 0x30a
 800d76c:	f7fe f9b8 	bl	800bae0 <__assert_func>
 800d770:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800d774:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800d778:	bb35      	cbnz	r5, 800d7c8 <__d2b+0x7c>
 800d77a:	2e00      	cmp	r6, #0
 800d77c:	9301      	str	r3, [sp, #4]
 800d77e:	d028      	beq.n	800d7d2 <__d2b+0x86>
 800d780:	4668      	mov	r0, sp
 800d782:	9600      	str	r6, [sp, #0]
 800d784:	f7ff fd06 	bl	800d194 <__lo0bits>
 800d788:	9900      	ldr	r1, [sp, #0]
 800d78a:	b300      	cbz	r0, 800d7ce <__d2b+0x82>
 800d78c:	9a01      	ldr	r2, [sp, #4]
 800d78e:	f1c0 0320 	rsb	r3, r0, #32
 800d792:	fa02 f303 	lsl.w	r3, r2, r3
 800d796:	430b      	orrs	r3, r1
 800d798:	40c2      	lsrs	r2, r0
 800d79a:	6163      	str	r3, [r4, #20]
 800d79c:	9201      	str	r2, [sp, #4]
 800d79e:	9b01      	ldr	r3, [sp, #4]
 800d7a0:	61a3      	str	r3, [r4, #24]
 800d7a2:	2b00      	cmp	r3, #0
 800d7a4:	bf14      	ite	ne
 800d7a6:	2202      	movne	r2, #2
 800d7a8:	2201      	moveq	r2, #1
 800d7aa:	6122      	str	r2, [r4, #16]
 800d7ac:	b1d5      	cbz	r5, 800d7e4 <__d2b+0x98>
 800d7ae:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800d7b2:	4405      	add	r5, r0
 800d7b4:	f8c9 5000 	str.w	r5, [r9]
 800d7b8:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800d7bc:	f8c8 0000 	str.w	r0, [r8]
 800d7c0:	4620      	mov	r0, r4
 800d7c2:	b003      	add	sp, #12
 800d7c4:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800d7c8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800d7cc:	e7d5      	b.n	800d77a <__d2b+0x2e>
 800d7ce:	6161      	str	r1, [r4, #20]
 800d7d0:	e7e5      	b.n	800d79e <__d2b+0x52>
 800d7d2:	a801      	add	r0, sp, #4
 800d7d4:	f7ff fcde 	bl	800d194 <__lo0bits>
 800d7d8:	9b01      	ldr	r3, [sp, #4]
 800d7da:	6163      	str	r3, [r4, #20]
 800d7dc:	2201      	movs	r2, #1
 800d7de:	6122      	str	r2, [r4, #16]
 800d7e0:	3020      	adds	r0, #32
 800d7e2:	e7e3      	b.n	800d7ac <__d2b+0x60>
 800d7e4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800d7e8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800d7ec:	f8c9 0000 	str.w	r0, [r9]
 800d7f0:	6918      	ldr	r0, [r3, #16]
 800d7f2:	f7ff fcaf 	bl	800d154 <__hi0bits>
 800d7f6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800d7fa:	e7df      	b.n	800d7bc <__d2b+0x70>
 800d7fc:	0800fc51 	.word	0x0800fc51
 800d800:	0800fcdc 	.word	0x0800fcdc

0800d804 <__ratio>:
 800d804:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d808:	4688      	mov	r8, r1
 800d80a:	4669      	mov	r1, sp
 800d80c:	4681      	mov	r9, r0
 800d80e:	f7ff ff4d 	bl	800d6ac <__b2d>
 800d812:	a901      	add	r1, sp, #4
 800d814:	4640      	mov	r0, r8
 800d816:	ec55 4b10 	vmov	r4, r5, d0
 800d81a:	f7ff ff47 	bl	800d6ac <__b2d>
 800d81e:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800d822:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800d826:	eba3 0c02 	sub.w	ip, r3, r2
 800d82a:	e9dd 3200 	ldrd	r3, r2, [sp]
 800d82e:	1a9b      	subs	r3, r3, r2
 800d830:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800d834:	ec51 0b10 	vmov	r0, r1, d0
 800d838:	2b00      	cmp	r3, #0
 800d83a:	bfd6      	itet	le
 800d83c:	460a      	movle	r2, r1
 800d83e:	462a      	movgt	r2, r5
 800d840:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800d844:	468b      	mov	fp, r1
 800d846:	462f      	mov	r7, r5
 800d848:	bfd4      	ite	le
 800d84a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800d84e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800d852:	4620      	mov	r0, r4
 800d854:	ee10 2a10 	vmov	r2, s0
 800d858:	465b      	mov	r3, fp
 800d85a:	4639      	mov	r1, r7
 800d85c:	f7f2 fff6 	bl	800084c <__aeabi_ddiv>
 800d860:	ec41 0b10 	vmov	d0, r0, r1
 800d864:	b003      	add	sp, #12
 800d866:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800d86a <__copybits>:
 800d86a:	3901      	subs	r1, #1
 800d86c:	b570      	push	{r4, r5, r6, lr}
 800d86e:	1149      	asrs	r1, r1, #5
 800d870:	6914      	ldr	r4, [r2, #16]
 800d872:	3101      	adds	r1, #1
 800d874:	f102 0314 	add.w	r3, r2, #20
 800d878:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800d87c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800d880:	1f05      	subs	r5, r0, #4
 800d882:	42a3      	cmp	r3, r4
 800d884:	d30c      	bcc.n	800d8a0 <__copybits+0x36>
 800d886:	1aa3      	subs	r3, r4, r2
 800d888:	3b11      	subs	r3, #17
 800d88a:	f023 0303 	bic.w	r3, r3, #3
 800d88e:	3211      	adds	r2, #17
 800d890:	42a2      	cmp	r2, r4
 800d892:	bf88      	it	hi
 800d894:	2300      	movhi	r3, #0
 800d896:	4418      	add	r0, r3
 800d898:	2300      	movs	r3, #0
 800d89a:	4288      	cmp	r0, r1
 800d89c:	d305      	bcc.n	800d8aa <__copybits+0x40>
 800d89e:	bd70      	pop	{r4, r5, r6, pc}
 800d8a0:	f853 6b04 	ldr.w	r6, [r3], #4
 800d8a4:	f845 6f04 	str.w	r6, [r5, #4]!
 800d8a8:	e7eb      	b.n	800d882 <__copybits+0x18>
 800d8aa:	f840 3b04 	str.w	r3, [r0], #4
 800d8ae:	e7f4      	b.n	800d89a <__copybits+0x30>

0800d8b0 <__any_on>:
 800d8b0:	f100 0214 	add.w	r2, r0, #20
 800d8b4:	6900      	ldr	r0, [r0, #16]
 800d8b6:	114b      	asrs	r3, r1, #5
 800d8b8:	4298      	cmp	r0, r3
 800d8ba:	b510      	push	{r4, lr}
 800d8bc:	db11      	blt.n	800d8e2 <__any_on+0x32>
 800d8be:	dd0a      	ble.n	800d8d6 <__any_on+0x26>
 800d8c0:	f011 011f 	ands.w	r1, r1, #31
 800d8c4:	d007      	beq.n	800d8d6 <__any_on+0x26>
 800d8c6:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800d8ca:	fa24 f001 	lsr.w	r0, r4, r1
 800d8ce:	fa00 f101 	lsl.w	r1, r0, r1
 800d8d2:	428c      	cmp	r4, r1
 800d8d4:	d10b      	bne.n	800d8ee <__any_on+0x3e>
 800d8d6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800d8da:	4293      	cmp	r3, r2
 800d8dc:	d803      	bhi.n	800d8e6 <__any_on+0x36>
 800d8de:	2000      	movs	r0, #0
 800d8e0:	bd10      	pop	{r4, pc}
 800d8e2:	4603      	mov	r3, r0
 800d8e4:	e7f7      	b.n	800d8d6 <__any_on+0x26>
 800d8e6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800d8ea:	2900      	cmp	r1, #0
 800d8ec:	d0f5      	beq.n	800d8da <__any_on+0x2a>
 800d8ee:	2001      	movs	r0, #1
 800d8f0:	e7f6      	b.n	800d8e0 <__any_on+0x30>

0800d8f2 <_calloc_r>:
 800d8f2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d8f4:	fba1 2402 	umull	r2, r4, r1, r2
 800d8f8:	b94c      	cbnz	r4, 800d90e <_calloc_r+0x1c>
 800d8fa:	4611      	mov	r1, r2
 800d8fc:	9201      	str	r2, [sp, #4]
 800d8fe:	f000 f87b 	bl	800d9f8 <_malloc_r>
 800d902:	9a01      	ldr	r2, [sp, #4]
 800d904:	4605      	mov	r5, r0
 800d906:	b930      	cbnz	r0, 800d916 <_calloc_r+0x24>
 800d908:	4628      	mov	r0, r5
 800d90a:	b003      	add	sp, #12
 800d90c:	bd30      	pop	{r4, r5, pc}
 800d90e:	220c      	movs	r2, #12
 800d910:	6002      	str	r2, [r0, #0]
 800d912:	2500      	movs	r5, #0
 800d914:	e7f8      	b.n	800d908 <_calloc_r+0x16>
 800d916:	4621      	mov	r1, r4
 800d918:	f7fc fb24 	bl	8009f64 <memset>
 800d91c:	e7f4      	b.n	800d908 <_calloc_r+0x16>
	...

0800d920 <_free_r>:
 800d920:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800d922:	2900      	cmp	r1, #0
 800d924:	d044      	beq.n	800d9b0 <_free_r+0x90>
 800d926:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800d92a:	9001      	str	r0, [sp, #4]
 800d92c:	2b00      	cmp	r3, #0
 800d92e:	f1a1 0404 	sub.w	r4, r1, #4
 800d932:	bfb8      	it	lt
 800d934:	18e4      	addlt	r4, r4, r3
 800d936:	f000 fec7 	bl	800e6c8 <__malloc_lock>
 800d93a:	4a1e      	ldr	r2, [pc, #120]	; (800d9b4 <_free_r+0x94>)
 800d93c:	9801      	ldr	r0, [sp, #4]
 800d93e:	6813      	ldr	r3, [r2, #0]
 800d940:	b933      	cbnz	r3, 800d950 <_free_r+0x30>
 800d942:	6063      	str	r3, [r4, #4]
 800d944:	6014      	str	r4, [r2, #0]
 800d946:	b003      	add	sp, #12
 800d948:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800d94c:	f000 bec2 	b.w	800e6d4 <__malloc_unlock>
 800d950:	42a3      	cmp	r3, r4
 800d952:	d908      	bls.n	800d966 <_free_r+0x46>
 800d954:	6825      	ldr	r5, [r4, #0]
 800d956:	1961      	adds	r1, r4, r5
 800d958:	428b      	cmp	r3, r1
 800d95a:	bf01      	itttt	eq
 800d95c:	6819      	ldreq	r1, [r3, #0]
 800d95e:	685b      	ldreq	r3, [r3, #4]
 800d960:	1949      	addeq	r1, r1, r5
 800d962:	6021      	streq	r1, [r4, #0]
 800d964:	e7ed      	b.n	800d942 <_free_r+0x22>
 800d966:	461a      	mov	r2, r3
 800d968:	685b      	ldr	r3, [r3, #4]
 800d96a:	b10b      	cbz	r3, 800d970 <_free_r+0x50>
 800d96c:	42a3      	cmp	r3, r4
 800d96e:	d9fa      	bls.n	800d966 <_free_r+0x46>
 800d970:	6811      	ldr	r1, [r2, #0]
 800d972:	1855      	adds	r5, r2, r1
 800d974:	42a5      	cmp	r5, r4
 800d976:	d10b      	bne.n	800d990 <_free_r+0x70>
 800d978:	6824      	ldr	r4, [r4, #0]
 800d97a:	4421      	add	r1, r4
 800d97c:	1854      	adds	r4, r2, r1
 800d97e:	42a3      	cmp	r3, r4
 800d980:	6011      	str	r1, [r2, #0]
 800d982:	d1e0      	bne.n	800d946 <_free_r+0x26>
 800d984:	681c      	ldr	r4, [r3, #0]
 800d986:	685b      	ldr	r3, [r3, #4]
 800d988:	6053      	str	r3, [r2, #4]
 800d98a:	4421      	add	r1, r4
 800d98c:	6011      	str	r1, [r2, #0]
 800d98e:	e7da      	b.n	800d946 <_free_r+0x26>
 800d990:	d902      	bls.n	800d998 <_free_r+0x78>
 800d992:	230c      	movs	r3, #12
 800d994:	6003      	str	r3, [r0, #0]
 800d996:	e7d6      	b.n	800d946 <_free_r+0x26>
 800d998:	6825      	ldr	r5, [r4, #0]
 800d99a:	1961      	adds	r1, r4, r5
 800d99c:	428b      	cmp	r3, r1
 800d99e:	bf04      	itt	eq
 800d9a0:	6819      	ldreq	r1, [r3, #0]
 800d9a2:	685b      	ldreq	r3, [r3, #4]
 800d9a4:	6063      	str	r3, [r4, #4]
 800d9a6:	bf04      	itt	eq
 800d9a8:	1949      	addeq	r1, r1, r5
 800d9aa:	6021      	streq	r1, [r4, #0]
 800d9ac:	6054      	str	r4, [r2, #4]
 800d9ae:	e7ca      	b.n	800d946 <_free_r+0x26>
 800d9b0:	b003      	add	sp, #12
 800d9b2:	bd30      	pop	{r4, r5, pc}
 800d9b4:	20000568 	.word	0x20000568

0800d9b8 <sbrk_aligned>:
 800d9b8:	b570      	push	{r4, r5, r6, lr}
 800d9ba:	4e0e      	ldr	r6, [pc, #56]	; (800d9f4 <sbrk_aligned+0x3c>)
 800d9bc:	460c      	mov	r4, r1
 800d9be:	6831      	ldr	r1, [r6, #0]
 800d9c0:	4605      	mov	r5, r0
 800d9c2:	b911      	cbnz	r1, 800d9ca <sbrk_aligned+0x12>
 800d9c4:	f000 fb4c 	bl	800e060 <_sbrk_r>
 800d9c8:	6030      	str	r0, [r6, #0]
 800d9ca:	4621      	mov	r1, r4
 800d9cc:	4628      	mov	r0, r5
 800d9ce:	f000 fb47 	bl	800e060 <_sbrk_r>
 800d9d2:	1c43      	adds	r3, r0, #1
 800d9d4:	d00a      	beq.n	800d9ec <sbrk_aligned+0x34>
 800d9d6:	1cc4      	adds	r4, r0, #3
 800d9d8:	f024 0403 	bic.w	r4, r4, #3
 800d9dc:	42a0      	cmp	r0, r4
 800d9de:	d007      	beq.n	800d9f0 <sbrk_aligned+0x38>
 800d9e0:	1a21      	subs	r1, r4, r0
 800d9e2:	4628      	mov	r0, r5
 800d9e4:	f000 fb3c 	bl	800e060 <_sbrk_r>
 800d9e8:	3001      	adds	r0, #1
 800d9ea:	d101      	bne.n	800d9f0 <sbrk_aligned+0x38>
 800d9ec:	f04f 34ff 	mov.w	r4, #4294967295
 800d9f0:	4620      	mov	r0, r4
 800d9f2:	bd70      	pop	{r4, r5, r6, pc}
 800d9f4:	2000056c 	.word	0x2000056c

0800d9f8 <_malloc_r>:
 800d9f8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9fc:	1ccd      	adds	r5, r1, #3
 800d9fe:	f025 0503 	bic.w	r5, r5, #3
 800da02:	3508      	adds	r5, #8
 800da04:	2d0c      	cmp	r5, #12
 800da06:	bf38      	it	cc
 800da08:	250c      	movcc	r5, #12
 800da0a:	2d00      	cmp	r5, #0
 800da0c:	4607      	mov	r7, r0
 800da0e:	db01      	blt.n	800da14 <_malloc_r+0x1c>
 800da10:	42a9      	cmp	r1, r5
 800da12:	d905      	bls.n	800da20 <_malloc_r+0x28>
 800da14:	230c      	movs	r3, #12
 800da16:	603b      	str	r3, [r7, #0]
 800da18:	2600      	movs	r6, #0
 800da1a:	4630      	mov	r0, r6
 800da1c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da20:	4e2e      	ldr	r6, [pc, #184]	; (800dadc <_malloc_r+0xe4>)
 800da22:	f000 fe51 	bl	800e6c8 <__malloc_lock>
 800da26:	6833      	ldr	r3, [r6, #0]
 800da28:	461c      	mov	r4, r3
 800da2a:	bb34      	cbnz	r4, 800da7a <_malloc_r+0x82>
 800da2c:	4629      	mov	r1, r5
 800da2e:	4638      	mov	r0, r7
 800da30:	f7ff ffc2 	bl	800d9b8 <sbrk_aligned>
 800da34:	1c43      	adds	r3, r0, #1
 800da36:	4604      	mov	r4, r0
 800da38:	d14d      	bne.n	800dad6 <_malloc_r+0xde>
 800da3a:	6834      	ldr	r4, [r6, #0]
 800da3c:	4626      	mov	r6, r4
 800da3e:	2e00      	cmp	r6, #0
 800da40:	d140      	bne.n	800dac4 <_malloc_r+0xcc>
 800da42:	6823      	ldr	r3, [r4, #0]
 800da44:	4631      	mov	r1, r6
 800da46:	4638      	mov	r0, r7
 800da48:	eb04 0803 	add.w	r8, r4, r3
 800da4c:	f000 fb08 	bl	800e060 <_sbrk_r>
 800da50:	4580      	cmp	r8, r0
 800da52:	d13a      	bne.n	800daca <_malloc_r+0xd2>
 800da54:	6821      	ldr	r1, [r4, #0]
 800da56:	3503      	adds	r5, #3
 800da58:	1a6d      	subs	r5, r5, r1
 800da5a:	f025 0503 	bic.w	r5, r5, #3
 800da5e:	3508      	adds	r5, #8
 800da60:	2d0c      	cmp	r5, #12
 800da62:	bf38      	it	cc
 800da64:	250c      	movcc	r5, #12
 800da66:	4629      	mov	r1, r5
 800da68:	4638      	mov	r0, r7
 800da6a:	f7ff ffa5 	bl	800d9b8 <sbrk_aligned>
 800da6e:	3001      	adds	r0, #1
 800da70:	d02b      	beq.n	800daca <_malloc_r+0xd2>
 800da72:	6823      	ldr	r3, [r4, #0]
 800da74:	442b      	add	r3, r5
 800da76:	6023      	str	r3, [r4, #0]
 800da78:	e00e      	b.n	800da98 <_malloc_r+0xa0>
 800da7a:	6822      	ldr	r2, [r4, #0]
 800da7c:	1b52      	subs	r2, r2, r5
 800da7e:	d41e      	bmi.n	800dabe <_malloc_r+0xc6>
 800da80:	2a0b      	cmp	r2, #11
 800da82:	d916      	bls.n	800dab2 <_malloc_r+0xba>
 800da84:	1961      	adds	r1, r4, r5
 800da86:	42a3      	cmp	r3, r4
 800da88:	6025      	str	r5, [r4, #0]
 800da8a:	bf18      	it	ne
 800da8c:	6059      	strne	r1, [r3, #4]
 800da8e:	6863      	ldr	r3, [r4, #4]
 800da90:	bf08      	it	eq
 800da92:	6031      	streq	r1, [r6, #0]
 800da94:	5162      	str	r2, [r4, r5]
 800da96:	604b      	str	r3, [r1, #4]
 800da98:	4638      	mov	r0, r7
 800da9a:	f104 060b 	add.w	r6, r4, #11
 800da9e:	f000 fe19 	bl	800e6d4 <__malloc_unlock>
 800daa2:	f026 0607 	bic.w	r6, r6, #7
 800daa6:	1d23      	adds	r3, r4, #4
 800daa8:	1af2      	subs	r2, r6, r3
 800daaa:	d0b6      	beq.n	800da1a <_malloc_r+0x22>
 800daac:	1b9b      	subs	r3, r3, r6
 800daae:	50a3      	str	r3, [r4, r2]
 800dab0:	e7b3      	b.n	800da1a <_malloc_r+0x22>
 800dab2:	6862      	ldr	r2, [r4, #4]
 800dab4:	42a3      	cmp	r3, r4
 800dab6:	bf0c      	ite	eq
 800dab8:	6032      	streq	r2, [r6, #0]
 800daba:	605a      	strne	r2, [r3, #4]
 800dabc:	e7ec      	b.n	800da98 <_malloc_r+0xa0>
 800dabe:	4623      	mov	r3, r4
 800dac0:	6864      	ldr	r4, [r4, #4]
 800dac2:	e7b2      	b.n	800da2a <_malloc_r+0x32>
 800dac4:	4634      	mov	r4, r6
 800dac6:	6876      	ldr	r6, [r6, #4]
 800dac8:	e7b9      	b.n	800da3e <_malloc_r+0x46>
 800daca:	230c      	movs	r3, #12
 800dacc:	603b      	str	r3, [r7, #0]
 800dace:	4638      	mov	r0, r7
 800dad0:	f000 fe00 	bl	800e6d4 <__malloc_unlock>
 800dad4:	e7a1      	b.n	800da1a <_malloc_r+0x22>
 800dad6:	6025      	str	r5, [r4, #0]
 800dad8:	e7de      	b.n	800da98 <_malloc_r+0xa0>
 800dada:	bf00      	nop
 800dadc:	20000568 	.word	0x20000568

0800dae0 <__ssputs_r>:
 800dae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800dae4:	688e      	ldr	r6, [r1, #8]
 800dae6:	429e      	cmp	r6, r3
 800dae8:	4682      	mov	sl, r0
 800daea:	460c      	mov	r4, r1
 800daec:	4690      	mov	r8, r2
 800daee:	461f      	mov	r7, r3
 800daf0:	d838      	bhi.n	800db64 <__ssputs_r+0x84>
 800daf2:	898a      	ldrh	r2, [r1, #12]
 800daf4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800daf8:	d032      	beq.n	800db60 <__ssputs_r+0x80>
 800dafa:	6825      	ldr	r5, [r4, #0]
 800dafc:	6909      	ldr	r1, [r1, #16]
 800dafe:	eba5 0901 	sub.w	r9, r5, r1
 800db02:	6965      	ldr	r5, [r4, #20]
 800db04:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800db08:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800db0c:	3301      	adds	r3, #1
 800db0e:	444b      	add	r3, r9
 800db10:	106d      	asrs	r5, r5, #1
 800db12:	429d      	cmp	r5, r3
 800db14:	bf38      	it	cc
 800db16:	461d      	movcc	r5, r3
 800db18:	0553      	lsls	r3, r2, #21
 800db1a:	d531      	bpl.n	800db80 <__ssputs_r+0xa0>
 800db1c:	4629      	mov	r1, r5
 800db1e:	f7ff ff6b 	bl	800d9f8 <_malloc_r>
 800db22:	4606      	mov	r6, r0
 800db24:	b950      	cbnz	r0, 800db3c <__ssputs_r+0x5c>
 800db26:	230c      	movs	r3, #12
 800db28:	f8ca 3000 	str.w	r3, [sl]
 800db2c:	89a3      	ldrh	r3, [r4, #12]
 800db2e:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800db32:	81a3      	strh	r3, [r4, #12]
 800db34:	f04f 30ff 	mov.w	r0, #4294967295
 800db38:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800db3c:	6921      	ldr	r1, [r4, #16]
 800db3e:	464a      	mov	r2, r9
 800db40:	f7ff fa08 	bl	800cf54 <memcpy>
 800db44:	89a3      	ldrh	r3, [r4, #12]
 800db46:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800db4a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800db4e:	81a3      	strh	r3, [r4, #12]
 800db50:	6126      	str	r6, [r4, #16]
 800db52:	6165      	str	r5, [r4, #20]
 800db54:	444e      	add	r6, r9
 800db56:	eba5 0509 	sub.w	r5, r5, r9
 800db5a:	6026      	str	r6, [r4, #0]
 800db5c:	60a5      	str	r5, [r4, #8]
 800db5e:	463e      	mov	r6, r7
 800db60:	42be      	cmp	r6, r7
 800db62:	d900      	bls.n	800db66 <__ssputs_r+0x86>
 800db64:	463e      	mov	r6, r7
 800db66:	6820      	ldr	r0, [r4, #0]
 800db68:	4632      	mov	r2, r6
 800db6a:	4641      	mov	r1, r8
 800db6c:	f000 fd92 	bl	800e694 <memmove>
 800db70:	68a3      	ldr	r3, [r4, #8]
 800db72:	1b9b      	subs	r3, r3, r6
 800db74:	60a3      	str	r3, [r4, #8]
 800db76:	6823      	ldr	r3, [r4, #0]
 800db78:	4433      	add	r3, r6
 800db7a:	6023      	str	r3, [r4, #0]
 800db7c:	2000      	movs	r0, #0
 800db7e:	e7db      	b.n	800db38 <__ssputs_r+0x58>
 800db80:	462a      	mov	r2, r5
 800db82:	f000 fdad 	bl	800e6e0 <_realloc_r>
 800db86:	4606      	mov	r6, r0
 800db88:	2800      	cmp	r0, #0
 800db8a:	d1e1      	bne.n	800db50 <__ssputs_r+0x70>
 800db8c:	6921      	ldr	r1, [r4, #16]
 800db8e:	4650      	mov	r0, sl
 800db90:	f7ff fec6 	bl	800d920 <_free_r>
 800db94:	e7c7      	b.n	800db26 <__ssputs_r+0x46>
	...

0800db98 <_svfiprintf_r>:
 800db98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800db9c:	4698      	mov	r8, r3
 800db9e:	898b      	ldrh	r3, [r1, #12]
 800dba0:	061b      	lsls	r3, r3, #24
 800dba2:	b09d      	sub	sp, #116	; 0x74
 800dba4:	4607      	mov	r7, r0
 800dba6:	460d      	mov	r5, r1
 800dba8:	4614      	mov	r4, r2
 800dbaa:	d50e      	bpl.n	800dbca <_svfiprintf_r+0x32>
 800dbac:	690b      	ldr	r3, [r1, #16]
 800dbae:	b963      	cbnz	r3, 800dbca <_svfiprintf_r+0x32>
 800dbb0:	2140      	movs	r1, #64	; 0x40
 800dbb2:	f7ff ff21 	bl	800d9f8 <_malloc_r>
 800dbb6:	6028      	str	r0, [r5, #0]
 800dbb8:	6128      	str	r0, [r5, #16]
 800dbba:	b920      	cbnz	r0, 800dbc6 <_svfiprintf_r+0x2e>
 800dbbc:	230c      	movs	r3, #12
 800dbbe:	603b      	str	r3, [r7, #0]
 800dbc0:	f04f 30ff 	mov.w	r0, #4294967295
 800dbc4:	e0d1      	b.n	800dd6a <_svfiprintf_r+0x1d2>
 800dbc6:	2340      	movs	r3, #64	; 0x40
 800dbc8:	616b      	str	r3, [r5, #20]
 800dbca:	2300      	movs	r3, #0
 800dbcc:	9309      	str	r3, [sp, #36]	; 0x24
 800dbce:	2320      	movs	r3, #32
 800dbd0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800dbd4:	f8cd 800c 	str.w	r8, [sp, #12]
 800dbd8:	2330      	movs	r3, #48	; 0x30
 800dbda:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800dd84 <_svfiprintf_r+0x1ec>
 800dbde:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800dbe2:	f04f 0901 	mov.w	r9, #1
 800dbe6:	4623      	mov	r3, r4
 800dbe8:	469a      	mov	sl, r3
 800dbea:	f813 2b01 	ldrb.w	r2, [r3], #1
 800dbee:	b10a      	cbz	r2, 800dbf4 <_svfiprintf_r+0x5c>
 800dbf0:	2a25      	cmp	r2, #37	; 0x25
 800dbf2:	d1f9      	bne.n	800dbe8 <_svfiprintf_r+0x50>
 800dbf4:	ebba 0b04 	subs.w	fp, sl, r4
 800dbf8:	d00b      	beq.n	800dc12 <_svfiprintf_r+0x7a>
 800dbfa:	465b      	mov	r3, fp
 800dbfc:	4622      	mov	r2, r4
 800dbfe:	4629      	mov	r1, r5
 800dc00:	4638      	mov	r0, r7
 800dc02:	f7ff ff6d 	bl	800dae0 <__ssputs_r>
 800dc06:	3001      	adds	r0, #1
 800dc08:	f000 80aa 	beq.w	800dd60 <_svfiprintf_r+0x1c8>
 800dc0c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dc0e:	445a      	add	r2, fp
 800dc10:	9209      	str	r2, [sp, #36]	; 0x24
 800dc12:	f89a 3000 	ldrb.w	r3, [sl]
 800dc16:	2b00      	cmp	r3, #0
 800dc18:	f000 80a2 	beq.w	800dd60 <_svfiprintf_r+0x1c8>
 800dc1c:	2300      	movs	r3, #0
 800dc1e:	f04f 32ff 	mov.w	r2, #4294967295
 800dc22:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dc26:	f10a 0a01 	add.w	sl, sl, #1
 800dc2a:	9304      	str	r3, [sp, #16]
 800dc2c:	9307      	str	r3, [sp, #28]
 800dc2e:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800dc32:	931a      	str	r3, [sp, #104]	; 0x68
 800dc34:	4654      	mov	r4, sl
 800dc36:	2205      	movs	r2, #5
 800dc38:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dc3c:	4851      	ldr	r0, [pc, #324]	; (800dd84 <_svfiprintf_r+0x1ec>)
 800dc3e:	f7f2 facf 	bl	80001e0 <memchr>
 800dc42:	9a04      	ldr	r2, [sp, #16]
 800dc44:	b9d8      	cbnz	r0, 800dc7e <_svfiprintf_r+0xe6>
 800dc46:	06d0      	lsls	r0, r2, #27
 800dc48:	bf44      	itt	mi
 800dc4a:	2320      	movmi	r3, #32
 800dc4c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc50:	0711      	lsls	r1, r2, #28
 800dc52:	bf44      	itt	mi
 800dc54:	232b      	movmi	r3, #43	; 0x2b
 800dc56:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800dc5a:	f89a 3000 	ldrb.w	r3, [sl]
 800dc5e:	2b2a      	cmp	r3, #42	; 0x2a
 800dc60:	d015      	beq.n	800dc8e <_svfiprintf_r+0xf6>
 800dc62:	9a07      	ldr	r2, [sp, #28]
 800dc64:	4654      	mov	r4, sl
 800dc66:	2000      	movs	r0, #0
 800dc68:	f04f 0c0a 	mov.w	ip, #10
 800dc6c:	4621      	mov	r1, r4
 800dc6e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800dc72:	3b30      	subs	r3, #48	; 0x30
 800dc74:	2b09      	cmp	r3, #9
 800dc76:	d94e      	bls.n	800dd16 <_svfiprintf_r+0x17e>
 800dc78:	b1b0      	cbz	r0, 800dca8 <_svfiprintf_r+0x110>
 800dc7a:	9207      	str	r2, [sp, #28]
 800dc7c:	e014      	b.n	800dca8 <_svfiprintf_r+0x110>
 800dc7e:	eba0 0308 	sub.w	r3, r0, r8
 800dc82:	fa09 f303 	lsl.w	r3, r9, r3
 800dc86:	4313      	orrs	r3, r2
 800dc88:	9304      	str	r3, [sp, #16]
 800dc8a:	46a2      	mov	sl, r4
 800dc8c:	e7d2      	b.n	800dc34 <_svfiprintf_r+0x9c>
 800dc8e:	9b03      	ldr	r3, [sp, #12]
 800dc90:	1d19      	adds	r1, r3, #4
 800dc92:	681b      	ldr	r3, [r3, #0]
 800dc94:	9103      	str	r1, [sp, #12]
 800dc96:	2b00      	cmp	r3, #0
 800dc98:	bfbb      	ittet	lt
 800dc9a:	425b      	neglt	r3, r3
 800dc9c:	f042 0202 	orrlt.w	r2, r2, #2
 800dca0:	9307      	strge	r3, [sp, #28]
 800dca2:	9307      	strlt	r3, [sp, #28]
 800dca4:	bfb8      	it	lt
 800dca6:	9204      	strlt	r2, [sp, #16]
 800dca8:	7823      	ldrb	r3, [r4, #0]
 800dcaa:	2b2e      	cmp	r3, #46	; 0x2e
 800dcac:	d10c      	bne.n	800dcc8 <_svfiprintf_r+0x130>
 800dcae:	7863      	ldrb	r3, [r4, #1]
 800dcb0:	2b2a      	cmp	r3, #42	; 0x2a
 800dcb2:	d135      	bne.n	800dd20 <_svfiprintf_r+0x188>
 800dcb4:	9b03      	ldr	r3, [sp, #12]
 800dcb6:	1d1a      	adds	r2, r3, #4
 800dcb8:	681b      	ldr	r3, [r3, #0]
 800dcba:	9203      	str	r2, [sp, #12]
 800dcbc:	2b00      	cmp	r3, #0
 800dcbe:	bfb8      	it	lt
 800dcc0:	f04f 33ff 	movlt.w	r3, #4294967295
 800dcc4:	3402      	adds	r4, #2
 800dcc6:	9305      	str	r3, [sp, #20]
 800dcc8:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800dd94 <_svfiprintf_r+0x1fc>
 800dccc:	7821      	ldrb	r1, [r4, #0]
 800dcce:	2203      	movs	r2, #3
 800dcd0:	4650      	mov	r0, sl
 800dcd2:	f7f2 fa85 	bl	80001e0 <memchr>
 800dcd6:	b140      	cbz	r0, 800dcea <_svfiprintf_r+0x152>
 800dcd8:	2340      	movs	r3, #64	; 0x40
 800dcda:	eba0 000a 	sub.w	r0, r0, sl
 800dcde:	fa03 f000 	lsl.w	r0, r3, r0
 800dce2:	9b04      	ldr	r3, [sp, #16]
 800dce4:	4303      	orrs	r3, r0
 800dce6:	3401      	adds	r4, #1
 800dce8:	9304      	str	r3, [sp, #16]
 800dcea:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dcee:	4826      	ldr	r0, [pc, #152]	; (800dd88 <_svfiprintf_r+0x1f0>)
 800dcf0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800dcf4:	2206      	movs	r2, #6
 800dcf6:	f7f2 fa73 	bl	80001e0 <memchr>
 800dcfa:	2800      	cmp	r0, #0
 800dcfc:	d038      	beq.n	800dd70 <_svfiprintf_r+0x1d8>
 800dcfe:	4b23      	ldr	r3, [pc, #140]	; (800dd8c <_svfiprintf_r+0x1f4>)
 800dd00:	bb1b      	cbnz	r3, 800dd4a <_svfiprintf_r+0x1b2>
 800dd02:	9b03      	ldr	r3, [sp, #12]
 800dd04:	3307      	adds	r3, #7
 800dd06:	f023 0307 	bic.w	r3, r3, #7
 800dd0a:	3308      	adds	r3, #8
 800dd0c:	9303      	str	r3, [sp, #12]
 800dd0e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dd10:	4433      	add	r3, r6
 800dd12:	9309      	str	r3, [sp, #36]	; 0x24
 800dd14:	e767      	b.n	800dbe6 <_svfiprintf_r+0x4e>
 800dd16:	fb0c 3202 	mla	r2, ip, r2, r3
 800dd1a:	460c      	mov	r4, r1
 800dd1c:	2001      	movs	r0, #1
 800dd1e:	e7a5      	b.n	800dc6c <_svfiprintf_r+0xd4>
 800dd20:	2300      	movs	r3, #0
 800dd22:	3401      	adds	r4, #1
 800dd24:	9305      	str	r3, [sp, #20]
 800dd26:	4619      	mov	r1, r3
 800dd28:	f04f 0c0a 	mov.w	ip, #10
 800dd2c:	4620      	mov	r0, r4
 800dd2e:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dd32:	3a30      	subs	r2, #48	; 0x30
 800dd34:	2a09      	cmp	r2, #9
 800dd36:	d903      	bls.n	800dd40 <_svfiprintf_r+0x1a8>
 800dd38:	2b00      	cmp	r3, #0
 800dd3a:	d0c5      	beq.n	800dcc8 <_svfiprintf_r+0x130>
 800dd3c:	9105      	str	r1, [sp, #20]
 800dd3e:	e7c3      	b.n	800dcc8 <_svfiprintf_r+0x130>
 800dd40:	fb0c 2101 	mla	r1, ip, r1, r2
 800dd44:	4604      	mov	r4, r0
 800dd46:	2301      	movs	r3, #1
 800dd48:	e7f0      	b.n	800dd2c <_svfiprintf_r+0x194>
 800dd4a:	ab03      	add	r3, sp, #12
 800dd4c:	9300      	str	r3, [sp, #0]
 800dd4e:	462a      	mov	r2, r5
 800dd50:	4b0f      	ldr	r3, [pc, #60]	; (800dd90 <_svfiprintf_r+0x1f8>)
 800dd52:	a904      	add	r1, sp, #16
 800dd54:	4638      	mov	r0, r7
 800dd56:	f7fc f9ad 	bl	800a0b4 <_printf_float>
 800dd5a:	1c42      	adds	r2, r0, #1
 800dd5c:	4606      	mov	r6, r0
 800dd5e:	d1d6      	bne.n	800dd0e <_svfiprintf_r+0x176>
 800dd60:	89ab      	ldrh	r3, [r5, #12]
 800dd62:	065b      	lsls	r3, r3, #25
 800dd64:	f53f af2c 	bmi.w	800dbc0 <_svfiprintf_r+0x28>
 800dd68:	9809      	ldr	r0, [sp, #36]	; 0x24
 800dd6a:	b01d      	add	sp, #116	; 0x74
 800dd6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800dd70:	ab03      	add	r3, sp, #12
 800dd72:	9300      	str	r3, [sp, #0]
 800dd74:	462a      	mov	r2, r5
 800dd76:	4b06      	ldr	r3, [pc, #24]	; (800dd90 <_svfiprintf_r+0x1f8>)
 800dd78:	a904      	add	r1, sp, #16
 800dd7a:	4638      	mov	r0, r7
 800dd7c:	f7fc fc3e 	bl	800a5fc <_printf_i>
 800dd80:	e7eb      	b.n	800dd5a <_svfiprintf_r+0x1c2>
 800dd82:	bf00      	nop
 800dd84:	0800fe34 	.word	0x0800fe34
 800dd88:	0800fe3e 	.word	0x0800fe3e
 800dd8c:	0800a0b5 	.word	0x0800a0b5
 800dd90:	0800dae1 	.word	0x0800dae1
 800dd94:	0800fe3a 	.word	0x0800fe3a

0800dd98 <__sfputc_r>:
 800dd98:	6893      	ldr	r3, [r2, #8]
 800dd9a:	3b01      	subs	r3, #1
 800dd9c:	2b00      	cmp	r3, #0
 800dd9e:	b410      	push	{r4}
 800dda0:	6093      	str	r3, [r2, #8]
 800dda2:	da08      	bge.n	800ddb6 <__sfputc_r+0x1e>
 800dda4:	6994      	ldr	r4, [r2, #24]
 800dda6:	42a3      	cmp	r3, r4
 800dda8:	db01      	blt.n	800ddae <__sfputc_r+0x16>
 800ddaa:	290a      	cmp	r1, #10
 800ddac:	d103      	bne.n	800ddb6 <__sfputc_r+0x1e>
 800ddae:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddb2:	f000 b979 	b.w	800e0a8 <__swbuf_r>
 800ddb6:	6813      	ldr	r3, [r2, #0]
 800ddb8:	1c58      	adds	r0, r3, #1
 800ddba:	6010      	str	r0, [r2, #0]
 800ddbc:	7019      	strb	r1, [r3, #0]
 800ddbe:	4608      	mov	r0, r1
 800ddc0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800ddc4:	4770      	bx	lr

0800ddc6 <__sfputs_r>:
 800ddc6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddc8:	4606      	mov	r6, r0
 800ddca:	460f      	mov	r7, r1
 800ddcc:	4614      	mov	r4, r2
 800ddce:	18d5      	adds	r5, r2, r3
 800ddd0:	42ac      	cmp	r4, r5
 800ddd2:	d101      	bne.n	800ddd8 <__sfputs_r+0x12>
 800ddd4:	2000      	movs	r0, #0
 800ddd6:	e007      	b.n	800dde8 <__sfputs_r+0x22>
 800ddd8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800dddc:	463a      	mov	r2, r7
 800ddde:	4630      	mov	r0, r6
 800dde0:	f7ff ffda 	bl	800dd98 <__sfputc_r>
 800dde4:	1c43      	adds	r3, r0, #1
 800dde6:	d1f3      	bne.n	800ddd0 <__sfputs_r+0xa>
 800dde8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800ddec <_vfiprintf_r>:
 800ddec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ddf0:	460d      	mov	r5, r1
 800ddf2:	b09d      	sub	sp, #116	; 0x74
 800ddf4:	4614      	mov	r4, r2
 800ddf6:	4698      	mov	r8, r3
 800ddf8:	4606      	mov	r6, r0
 800ddfa:	b118      	cbz	r0, 800de04 <_vfiprintf_r+0x18>
 800ddfc:	6983      	ldr	r3, [r0, #24]
 800ddfe:	b90b      	cbnz	r3, 800de04 <_vfiprintf_r+0x18>
 800de00:	f000 fb42 	bl	800e488 <__sinit>
 800de04:	4b89      	ldr	r3, [pc, #548]	; (800e02c <_vfiprintf_r+0x240>)
 800de06:	429d      	cmp	r5, r3
 800de08:	d11b      	bne.n	800de42 <_vfiprintf_r+0x56>
 800de0a:	6875      	ldr	r5, [r6, #4]
 800de0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de0e:	07d9      	lsls	r1, r3, #31
 800de10:	d405      	bmi.n	800de1e <_vfiprintf_r+0x32>
 800de12:	89ab      	ldrh	r3, [r5, #12]
 800de14:	059a      	lsls	r2, r3, #22
 800de16:	d402      	bmi.n	800de1e <_vfiprintf_r+0x32>
 800de18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de1a:	f000 fbd3 	bl	800e5c4 <__retarget_lock_acquire_recursive>
 800de1e:	89ab      	ldrh	r3, [r5, #12]
 800de20:	071b      	lsls	r3, r3, #28
 800de22:	d501      	bpl.n	800de28 <_vfiprintf_r+0x3c>
 800de24:	692b      	ldr	r3, [r5, #16]
 800de26:	b9eb      	cbnz	r3, 800de64 <_vfiprintf_r+0x78>
 800de28:	4629      	mov	r1, r5
 800de2a:	4630      	mov	r0, r6
 800de2c:	f000 f99c 	bl	800e168 <__swsetup_r>
 800de30:	b1c0      	cbz	r0, 800de64 <_vfiprintf_r+0x78>
 800de32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800de34:	07dc      	lsls	r4, r3, #31
 800de36:	d50e      	bpl.n	800de56 <_vfiprintf_r+0x6a>
 800de38:	f04f 30ff 	mov.w	r0, #4294967295
 800de3c:	b01d      	add	sp, #116	; 0x74
 800de3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800de42:	4b7b      	ldr	r3, [pc, #492]	; (800e030 <_vfiprintf_r+0x244>)
 800de44:	429d      	cmp	r5, r3
 800de46:	d101      	bne.n	800de4c <_vfiprintf_r+0x60>
 800de48:	68b5      	ldr	r5, [r6, #8]
 800de4a:	e7df      	b.n	800de0c <_vfiprintf_r+0x20>
 800de4c:	4b79      	ldr	r3, [pc, #484]	; (800e034 <_vfiprintf_r+0x248>)
 800de4e:	429d      	cmp	r5, r3
 800de50:	bf08      	it	eq
 800de52:	68f5      	ldreq	r5, [r6, #12]
 800de54:	e7da      	b.n	800de0c <_vfiprintf_r+0x20>
 800de56:	89ab      	ldrh	r3, [r5, #12]
 800de58:	0598      	lsls	r0, r3, #22
 800de5a:	d4ed      	bmi.n	800de38 <_vfiprintf_r+0x4c>
 800de5c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800de5e:	f000 fbb2 	bl	800e5c6 <__retarget_lock_release_recursive>
 800de62:	e7e9      	b.n	800de38 <_vfiprintf_r+0x4c>
 800de64:	2300      	movs	r3, #0
 800de66:	9309      	str	r3, [sp, #36]	; 0x24
 800de68:	2320      	movs	r3, #32
 800de6a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800de6e:	f8cd 800c 	str.w	r8, [sp, #12]
 800de72:	2330      	movs	r3, #48	; 0x30
 800de74:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800e038 <_vfiprintf_r+0x24c>
 800de78:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800de7c:	f04f 0901 	mov.w	r9, #1
 800de80:	4623      	mov	r3, r4
 800de82:	469a      	mov	sl, r3
 800de84:	f813 2b01 	ldrb.w	r2, [r3], #1
 800de88:	b10a      	cbz	r2, 800de8e <_vfiprintf_r+0xa2>
 800de8a:	2a25      	cmp	r2, #37	; 0x25
 800de8c:	d1f9      	bne.n	800de82 <_vfiprintf_r+0x96>
 800de8e:	ebba 0b04 	subs.w	fp, sl, r4
 800de92:	d00b      	beq.n	800deac <_vfiprintf_r+0xc0>
 800de94:	465b      	mov	r3, fp
 800de96:	4622      	mov	r2, r4
 800de98:	4629      	mov	r1, r5
 800de9a:	4630      	mov	r0, r6
 800de9c:	f7ff ff93 	bl	800ddc6 <__sfputs_r>
 800dea0:	3001      	adds	r0, #1
 800dea2:	f000 80aa 	beq.w	800dffa <_vfiprintf_r+0x20e>
 800dea6:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800dea8:	445a      	add	r2, fp
 800deaa:	9209      	str	r2, [sp, #36]	; 0x24
 800deac:	f89a 3000 	ldrb.w	r3, [sl]
 800deb0:	2b00      	cmp	r3, #0
 800deb2:	f000 80a2 	beq.w	800dffa <_vfiprintf_r+0x20e>
 800deb6:	2300      	movs	r3, #0
 800deb8:	f04f 32ff 	mov.w	r2, #4294967295
 800debc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800dec0:	f10a 0a01 	add.w	sl, sl, #1
 800dec4:	9304      	str	r3, [sp, #16]
 800dec6:	9307      	str	r3, [sp, #28]
 800dec8:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800decc:	931a      	str	r3, [sp, #104]	; 0x68
 800dece:	4654      	mov	r4, sl
 800ded0:	2205      	movs	r2, #5
 800ded2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800ded6:	4858      	ldr	r0, [pc, #352]	; (800e038 <_vfiprintf_r+0x24c>)
 800ded8:	f7f2 f982 	bl	80001e0 <memchr>
 800dedc:	9a04      	ldr	r2, [sp, #16]
 800dede:	b9d8      	cbnz	r0, 800df18 <_vfiprintf_r+0x12c>
 800dee0:	06d1      	lsls	r1, r2, #27
 800dee2:	bf44      	itt	mi
 800dee4:	2320      	movmi	r3, #32
 800dee6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800deea:	0713      	lsls	r3, r2, #28
 800deec:	bf44      	itt	mi
 800deee:	232b      	movmi	r3, #43	; 0x2b
 800def0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800def4:	f89a 3000 	ldrb.w	r3, [sl]
 800def8:	2b2a      	cmp	r3, #42	; 0x2a
 800defa:	d015      	beq.n	800df28 <_vfiprintf_r+0x13c>
 800defc:	9a07      	ldr	r2, [sp, #28]
 800defe:	4654      	mov	r4, sl
 800df00:	2000      	movs	r0, #0
 800df02:	f04f 0c0a 	mov.w	ip, #10
 800df06:	4621      	mov	r1, r4
 800df08:	f811 3b01 	ldrb.w	r3, [r1], #1
 800df0c:	3b30      	subs	r3, #48	; 0x30
 800df0e:	2b09      	cmp	r3, #9
 800df10:	d94e      	bls.n	800dfb0 <_vfiprintf_r+0x1c4>
 800df12:	b1b0      	cbz	r0, 800df42 <_vfiprintf_r+0x156>
 800df14:	9207      	str	r2, [sp, #28]
 800df16:	e014      	b.n	800df42 <_vfiprintf_r+0x156>
 800df18:	eba0 0308 	sub.w	r3, r0, r8
 800df1c:	fa09 f303 	lsl.w	r3, r9, r3
 800df20:	4313      	orrs	r3, r2
 800df22:	9304      	str	r3, [sp, #16]
 800df24:	46a2      	mov	sl, r4
 800df26:	e7d2      	b.n	800dece <_vfiprintf_r+0xe2>
 800df28:	9b03      	ldr	r3, [sp, #12]
 800df2a:	1d19      	adds	r1, r3, #4
 800df2c:	681b      	ldr	r3, [r3, #0]
 800df2e:	9103      	str	r1, [sp, #12]
 800df30:	2b00      	cmp	r3, #0
 800df32:	bfbb      	ittet	lt
 800df34:	425b      	neglt	r3, r3
 800df36:	f042 0202 	orrlt.w	r2, r2, #2
 800df3a:	9307      	strge	r3, [sp, #28]
 800df3c:	9307      	strlt	r3, [sp, #28]
 800df3e:	bfb8      	it	lt
 800df40:	9204      	strlt	r2, [sp, #16]
 800df42:	7823      	ldrb	r3, [r4, #0]
 800df44:	2b2e      	cmp	r3, #46	; 0x2e
 800df46:	d10c      	bne.n	800df62 <_vfiprintf_r+0x176>
 800df48:	7863      	ldrb	r3, [r4, #1]
 800df4a:	2b2a      	cmp	r3, #42	; 0x2a
 800df4c:	d135      	bne.n	800dfba <_vfiprintf_r+0x1ce>
 800df4e:	9b03      	ldr	r3, [sp, #12]
 800df50:	1d1a      	adds	r2, r3, #4
 800df52:	681b      	ldr	r3, [r3, #0]
 800df54:	9203      	str	r2, [sp, #12]
 800df56:	2b00      	cmp	r3, #0
 800df58:	bfb8      	it	lt
 800df5a:	f04f 33ff 	movlt.w	r3, #4294967295
 800df5e:	3402      	adds	r4, #2
 800df60:	9305      	str	r3, [sp, #20]
 800df62:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800e048 <_vfiprintf_r+0x25c>
 800df66:	7821      	ldrb	r1, [r4, #0]
 800df68:	2203      	movs	r2, #3
 800df6a:	4650      	mov	r0, sl
 800df6c:	f7f2 f938 	bl	80001e0 <memchr>
 800df70:	b140      	cbz	r0, 800df84 <_vfiprintf_r+0x198>
 800df72:	2340      	movs	r3, #64	; 0x40
 800df74:	eba0 000a 	sub.w	r0, r0, sl
 800df78:	fa03 f000 	lsl.w	r0, r3, r0
 800df7c:	9b04      	ldr	r3, [sp, #16]
 800df7e:	4303      	orrs	r3, r0
 800df80:	3401      	adds	r4, #1
 800df82:	9304      	str	r3, [sp, #16]
 800df84:	f814 1b01 	ldrb.w	r1, [r4], #1
 800df88:	482c      	ldr	r0, [pc, #176]	; (800e03c <_vfiprintf_r+0x250>)
 800df8a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800df8e:	2206      	movs	r2, #6
 800df90:	f7f2 f926 	bl	80001e0 <memchr>
 800df94:	2800      	cmp	r0, #0
 800df96:	d03f      	beq.n	800e018 <_vfiprintf_r+0x22c>
 800df98:	4b29      	ldr	r3, [pc, #164]	; (800e040 <_vfiprintf_r+0x254>)
 800df9a:	bb1b      	cbnz	r3, 800dfe4 <_vfiprintf_r+0x1f8>
 800df9c:	9b03      	ldr	r3, [sp, #12]
 800df9e:	3307      	adds	r3, #7
 800dfa0:	f023 0307 	bic.w	r3, r3, #7
 800dfa4:	3308      	adds	r3, #8
 800dfa6:	9303      	str	r3, [sp, #12]
 800dfa8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800dfaa:	443b      	add	r3, r7
 800dfac:	9309      	str	r3, [sp, #36]	; 0x24
 800dfae:	e767      	b.n	800de80 <_vfiprintf_r+0x94>
 800dfb0:	fb0c 3202 	mla	r2, ip, r2, r3
 800dfb4:	460c      	mov	r4, r1
 800dfb6:	2001      	movs	r0, #1
 800dfb8:	e7a5      	b.n	800df06 <_vfiprintf_r+0x11a>
 800dfba:	2300      	movs	r3, #0
 800dfbc:	3401      	adds	r4, #1
 800dfbe:	9305      	str	r3, [sp, #20]
 800dfc0:	4619      	mov	r1, r3
 800dfc2:	f04f 0c0a 	mov.w	ip, #10
 800dfc6:	4620      	mov	r0, r4
 800dfc8:	f810 2b01 	ldrb.w	r2, [r0], #1
 800dfcc:	3a30      	subs	r2, #48	; 0x30
 800dfce:	2a09      	cmp	r2, #9
 800dfd0:	d903      	bls.n	800dfda <_vfiprintf_r+0x1ee>
 800dfd2:	2b00      	cmp	r3, #0
 800dfd4:	d0c5      	beq.n	800df62 <_vfiprintf_r+0x176>
 800dfd6:	9105      	str	r1, [sp, #20]
 800dfd8:	e7c3      	b.n	800df62 <_vfiprintf_r+0x176>
 800dfda:	fb0c 2101 	mla	r1, ip, r1, r2
 800dfde:	4604      	mov	r4, r0
 800dfe0:	2301      	movs	r3, #1
 800dfe2:	e7f0      	b.n	800dfc6 <_vfiprintf_r+0x1da>
 800dfe4:	ab03      	add	r3, sp, #12
 800dfe6:	9300      	str	r3, [sp, #0]
 800dfe8:	462a      	mov	r2, r5
 800dfea:	4b16      	ldr	r3, [pc, #88]	; (800e044 <_vfiprintf_r+0x258>)
 800dfec:	a904      	add	r1, sp, #16
 800dfee:	4630      	mov	r0, r6
 800dff0:	f7fc f860 	bl	800a0b4 <_printf_float>
 800dff4:	4607      	mov	r7, r0
 800dff6:	1c78      	adds	r0, r7, #1
 800dff8:	d1d6      	bne.n	800dfa8 <_vfiprintf_r+0x1bc>
 800dffa:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800dffc:	07d9      	lsls	r1, r3, #31
 800dffe:	d405      	bmi.n	800e00c <_vfiprintf_r+0x220>
 800e000:	89ab      	ldrh	r3, [r5, #12]
 800e002:	059a      	lsls	r2, r3, #22
 800e004:	d402      	bmi.n	800e00c <_vfiprintf_r+0x220>
 800e006:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800e008:	f000 fadd 	bl	800e5c6 <__retarget_lock_release_recursive>
 800e00c:	89ab      	ldrh	r3, [r5, #12]
 800e00e:	065b      	lsls	r3, r3, #25
 800e010:	f53f af12 	bmi.w	800de38 <_vfiprintf_r+0x4c>
 800e014:	9809      	ldr	r0, [sp, #36]	; 0x24
 800e016:	e711      	b.n	800de3c <_vfiprintf_r+0x50>
 800e018:	ab03      	add	r3, sp, #12
 800e01a:	9300      	str	r3, [sp, #0]
 800e01c:	462a      	mov	r2, r5
 800e01e:	4b09      	ldr	r3, [pc, #36]	; (800e044 <_vfiprintf_r+0x258>)
 800e020:	a904      	add	r1, sp, #16
 800e022:	4630      	mov	r0, r6
 800e024:	f7fc faea 	bl	800a5fc <_printf_i>
 800e028:	e7e4      	b.n	800dff4 <_vfiprintf_r+0x208>
 800e02a:	bf00      	nop
 800e02c:	0800fe68 	.word	0x0800fe68
 800e030:	0800fe88 	.word	0x0800fe88
 800e034:	0800fe48 	.word	0x0800fe48
 800e038:	0800fe34 	.word	0x0800fe34
 800e03c:	0800fe3e 	.word	0x0800fe3e
 800e040:	0800a0b5 	.word	0x0800a0b5
 800e044:	0800ddc7 	.word	0x0800ddc7
 800e048:	0800fe3a 	.word	0x0800fe3a
 800e04c:	00000000 	.word	0x00000000

0800e050 <nan>:
 800e050:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800e058 <nan+0x8>
 800e054:	4770      	bx	lr
 800e056:	bf00      	nop
 800e058:	00000000 	.word	0x00000000
 800e05c:	7ff80000 	.word	0x7ff80000

0800e060 <_sbrk_r>:
 800e060:	b538      	push	{r3, r4, r5, lr}
 800e062:	4d06      	ldr	r5, [pc, #24]	; (800e07c <_sbrk_r+0x1c>)
 800e064:	2300      	movs	r3, #0
 800e066:	4604      	mov	r4, r0
 800e068:	4608      	mov	r0, r1
 800e06a:	602b      	str	r3, [r5, #0]
 800e06c:	f7f8 fc1e 	bl	80068ac <_sbrk>
 800e070:	1c43      	adds	r3, r0, #1
 800e072:	d102      	bne.n	800e07a <_sbrk_r+0x1a>
 800e074:	682b      	ldr	r3, [r5, #0]
 800e076:	b103      	cbz	r3, 800e07a <_sbrk_r+0x1a>
 800e078:	6023      	str	r3, [r4, #0]
 800e07a:	bd38      	pop	{r3, r4, r5, pc}
 800e07c:	20000574 	.word	0x20000574

0800e080 <strncmp>:
 800e080:	b510      	push	{r4, lr}
 800e082:	b17a      	cbz	r2, 800e0a4 <strncmp+0x24>
 800e084:	4603      	mov	r3, r0
 800e086:	3901      	subs	r1, #1
 800e088:	1884      	adds	r4, r0, r2
 800e08a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800e08e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800e092:	4290      	cmp	r0, r2
 800e094:	d101      	bne.n	800e09a <strncmp+0x1a>
 800e096:	42a3      	cmp	r3, r4
 800e098:	d101      	bne.n	800e09e <strncmp+0x1e>
 800e09a:	1a80      	subs	r0, r0, r2
 800e09c:	bd10      	pop	{r4, pc}
 800e09e:	2800      	cmp	r0, #0
 800e0a0:	d1f3      	bne.n	800e08a <strncmp+0xa>
 800e0a2:	e7fa      	b.n	800e09a <strncmp+0x1a>
 800e0a4:	4610      	mov	r0, r2
 800e0a6:	e7f9      	b.n	800e09c <strncmp+0x1c>

0800e0a8 <__swbuf_r>:
 800e0a8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e0aa:	460e      	mov	r6, r1
 800e0ac:	4614      	mov	r4, r2
 800e0ae:	4605      	mov	r5, r0
 800e0b0:	b118      	cbz	r0, 800e0ba <__swbuf_r+0x12>
 800e0b2:	6983      	ldr	r3, [r0, #24]
 800e0b4:	b90b      	cbnz	r3, 800e0ba <__swbuf_r+0x12>
 800e0b6:	f000 f9e7 	bl	800e488 <__sinit>
 800e0ba:	4b21      	ldr	r3, [pc, #132]	; (800e140 <__swbuf_r+0x98>)
 800e0bc:	429c      	cmp	r4, r3
 800e0be:	d12b      	bne.n	800e118 <__swbuf_r+0x70>
 800e0c0:	686c      	ldr	r4, [r5, #4]
 800e0c2:	69a3      	ldr	r3, [r4, #24]
 800e0c4:	60a3      	str	r3, [r4, #8]
 800e0c6:	89a3      	ldrh	r3, [r4, #12]
 800e0c8:	071a      	lsls	r2, r3, #28
 800e0ca:	d52f      	bpl.n	800e12c <__swbuf_r+0x84>
 800e0cc:	6923      	ldr	r3, [r4, #16]
 800e0ce:	b36b      	cbz	r3, 800e12c <__swbuf_r+0x84>
 800e0d0:	6923      	ldr	r3, [r4, #16]
 800e0d2:	6820      	ldr	r0, [r4, #0]
 800e0d4:	1ac0      	subs	r0, r0, r3
 800e0d6:	6963      	ldr	r3, [r4, #20]
 800e0d8:	b2f6      	uxtb	r6, r6
 800e0da:	4283      	cmp	r3, r0
 800e0dc:	4637      	mov	r7, r6
 800e0de:	dc04      	bgt.n	800e0ea <__swbuf_r+0x42>
 800e0e0:	4621      	mov	r1, r4
 800e0e2:	4628      	mov	r0, r5
 800e0e4:	f000 f93c 	bl	800e360 <_fflush_r>
 800e0e8:	bb30      	cbnz	r0, 800e138 <__swbuf_r+0x90>
 800e0ea:	68a3      	ldr	r3, [r4, #8]
 800e0ec:	3b01      	subs	r3, #1
 800e0ee:	60a3      	str	r3, [r4, #8]
 800e0f0:	6823      	ldr	r3, [r4, #0]
 800e0f2:	1c5a      	adds	r2, r3, #1
 800e0f4:	6022      	str	r2, [r4, #0]
 800e0f6:	701e      	strb	r6, [r3, #0]
 800e0f8:	6963      	ldr	r3, [r4, #20]
 800e0fa:	3001      	adds	r0, #1
 800e0fc:	4283      	cmp	r3, r0
 800e0fe:	d004      	beq.n	800e10a <__swbuf_r+0x62>
 800e100:	89a3      	ldrh	r3, [r4, #12]
 800e102:	07db      	lsls	r3, r3, #31
 800e104:	d506      	bpl.n	800e114 <__swbuf_r+0x6c>
 800e106:	2e0a      	cmp	r6, #10
 800e108:	d104      	bne.n	800e114 <__swbuf_r+0x6c>
 800e10a:	4621      	mov	r1, r4
 800e10c:	4628      	mov	r0, r5
 800e10e:	f000 f927 	bl	800e360 <_fflush_r>
 800e112:	b988      	cbnz	r0, 800e138 <__swbuf_r+0x90>
 800e114:	4638      	mov	r0, r7
 800e116:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e118:	4b0a      	ldr	r3, [pc, #40]	; (800e144 <__swbuf_r+0x9c>)
 800e11a:	429c      	cmp	r4, r3
 800e11c:	d101      	bne.n	800e122 <__swbuf_r+0x7a>
 800e11e:	68ac      	ldr	r4, [r5, #8]
 800e120:	e7cf      	b.n	800e0c2 <__swbuf_r+0x1a>
 800e122:	4b09      	ldr	r3, [pc, #36]	; (800e148 <__swbuf_r+0xa0>)
 800e124:	429c      	cmp	r4, r3
 800e126:	bf08      	it	eq
 800e128:	68ec      	ldreq	r4, [r5, #12]
 800e12a:	e7ca      	b.n	800e0c2 <__swbuf_r+0x1a>
 800e12c:	4621      	mov	r1, r4
 800e12e:	4628      	mov	r0, r5
 800e130:	f000 f81a 	bl	800e168 <__swsetup_r>
 800e134:	2800      	cmp	r0, #0
 800e136:	d0cb      	beq.n	800e0d0 <__swbuf_r+0x28>
 800e138:	f04f 37ff 	mov.w	r7, #4294967295
 800e13c:	e7ea      	b.n	800e114 <__swbuf_r+0x6c>
 800e13e:	bf00      	nop
 800e140:	0800fe68 	.word	0x0800fe68
 800e144:	0800fe88 	.word	0x0800fe88
 800e148:	0800fe48 	.word	0x0800fe48

0800e14c <__ascii_wctomb>:
 800e14c:	b149      	cbz	r1, 800e162 <__ascii_wctomb+0x16>
 800e14e:	2aff      	cmp	r2, #255	; 0xff
 800e150:	bf85      	ittet	hi
 800e152:	238a      	movhi	r3, #138	; 0x8a
 800e154:	6003      	strhi	r3, [r0, #0]
 800e156:	700a      	strbls	r2, [r1, #0]
 800e158:	f04f 30ff 	movhi.w	r0, #4294967295
 800e15c:	bf98      	it	ls
 800e15e:	2001      	movls	r0, #1
 800e160:	4770      	bx	lr
 800e162:	4608      	mov	r0, r1
 800e164:	4770      	bx	lr
	...

0800e168 <__swsetup_r>:
 800e168:	4b32      	ldr	r3, [pc, #200]	; (800e234 <__swsetup_r+0xcc>)
 800e16a:	b570      	push	{r4, r5, r6, lr}
 800e16c:	681d      	ldr	r5, [r3, #0]
 800e16e:	4606      	mov	r6, r0
 800e170:	460c      	mov	r4, r1
 800e172:	b125      	cbz	r5, 800e17e <__swsetup_r+0x16>
 800e174:	69ab      	ldr	r3, [r5, #24]
 800e176:	b913      	cbnz	r3, 800e17e <__swsetup_r+0x16>
 800e178:	4628      	mov	r0, r5
 800e17a:	f000 f985 	bl	800e488 <__sinit>
 800e17e:	4b2e      	ldr	r3, [pc, #184]	; (800e238 <__swsetup_r+0xd0>)
 800e180:	429c      	cmp	r4, r3
 800e182:	d10f      	bne.n	800e1a4 <__swsetup_r+0x3c>
 800e184:	686c      	ldr	r4, [r5, #4]
 800e186:	89a3      	ldrh	r3, [r4, #12]
 800e188:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e18c:	0719      	lsls	r1, r3, #28
 800e18e:	d42c      	bmi.n	800e1ea <__swsetup_r+0x82>
 800e190:	06dd      	lsls	r5, r3, #27
 800e192:	d411      	bmi.n	800e1b8 <__swsetup_r+0x50>
 800e194:	2309      	movs	r3, #9
 800e196:	6033      	str	r3, [r6, #0]
 800e198:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800e19c:	81a3      	strh	r3, [r4, #12]
 800e19e:	f04f 30ff 	mov.w	r0, #4294967295
 800e1a2:	e03e      	b.n	800e222 <__swsetup_r+0xba>
 800e1a4:	4b25      	ldr	r3, [pc, #148]	; (800e23c <__swsetup_r+0xd4>)
 800e1a6:	429c      	cmp	r4, r3
 800e1a8:	d101      	bne.n	800e1ae <__swsetup_r+0x46>
 800e1aa:	68ac      	ldr	r4, [r5, #8]
 800e1ac:	e7eb      	b.n	800e186 <__swsetup_r+0x1e>
 800e1ae:	4b24      	ldr	r3, [pc, #144]	; (800e240 <__swsetup_r+0xd8>)
 800e1b0:	429c      	cmp	r4, r3
 800e1b2:	bf08      	it	eq
 800e1b4:	68ec      	ldreq	r4, [r5, #12]
 800e1b6:	e7e6      	b.n	800e186 <__swsetup_r+0x1e>
 800e1b8:	0758      	lsls	r0, r3, #29
 800e1ba:	d512      	bpl.n	800e1e2 <__swsetup_r+0x7a>
 800e1bc:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e1be:	b141      	cbz	r1, 800e1d2 <__swsetup_r+0x6a>
 800e1c0:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e1c4:	4299      	cmp	r1, r3
 800e1c6:	d002      	beq.n	800e1ce <__swsetup_r+0x66>
 800e1c8:	4630      	mov	r0, r6
 800e1ca:	f7ff fba9 	bl	800d920 <_free_r>
 800e1ce:	2300      	movs	r3, #0
 800e1d0:	6363      	str	r3, [r4, #52]	; 0x34
 800e1d2:	89a3      	ldrh	r3, [r4, #12]
 800e1d4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800e1d8:	81a3      	strh	r3, [r4, #12]
 800e1da:	2300      	movs	r3, #0
 800e1dc:	6063      	str	r3, [r4, #4]
 800e1de:	6923      	ldr	r3, [r4, #16]
 800e1e0:	6023      	str	r3, [r4, #0]
 800e1e2:	89a3      	ldrh	r3, [r4, #12]
 800e1e4:	f043 0308 	orr.w	r3, r3, #8
 800e1e8:	81a3      	strh	r3, [r4, #12]
 800e1ea:	6923      	ldr	r3, [r4, #16]
 800e1ec:	b94b      	cbnz	r3, 800e202 <__swsetup_r+0x9a>
 800e1ee:	89a3      	ldrh	r3, [r4, #12]
 800e1f0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800e1f4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800e1f8:	d003      	beq.n	800e202 <__swsetup_r+0x9a>
 800e1fa:	4621      	mov	r1, r4
 800e1fc:	4630      	mov	r0, r6
 800e1fe:	f000 fa09 	bl	800e614 <__smakebuf_r>
 800e202:	89a0      	ldrh	r0, [r4, #12]
 800e204:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800e208:	f010 0301 	ands.w	r3, r0, #1
 800e20c:	d00a      	beq.n	800e224 <__swsetup_r+0xbc>
 800e20e:	2300      	movs	r3, #0
 800e210:	60a3      	str	r3, [r4, #8]
 800e212:	6963      	ldr	r3, [r4, #20]
 800e214:	425b      	negs	r3, r3
 800e216:	61a3      	str	r3, [r4, #24]
 800e218:	6923      	ldr	r3, [r4, #16]
 800e21a:	b943      	cbnz	r3, 800e22e <__swsetup_r+0xc6>
 800e21c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800e220:	d1ba      	bne.n	800e198 <__swsetup_r+0x30>
 800e222:	bd70      	pop	{r4, r5, r6, pc}
 800e224:	0781      	lsls	r1, r0, #30
 800e226:	bf58      	it	pl
 800e228:	6963      	ldrpl	r3, [r4, #20]
 800e22a:	60a3      	str	r3, [r4, #8]
 800e22c:	e7f4      	b.n	800e218 <__swsetup_r+0xb0>
 800e22e:	2000      	movs	r0, #0
 800e230:	e7f7      	b.n	800e222 <__swsetup_r+0xba>
 800e232:	bf00      	nop
 800e234:	20000020 	.word	0x20000020
 800e238:	0800fe68 	.word	0x0800fe68
 800e23c:	0800fe88 	.word	0x0800fe88
 800e240:	0800fe48 	.word	0x0800fe48

0800e244 <abort>:
 800e244:	b508      	push	{r3, lr}
 800e246:	2006      	movs	r0, #6
 800e248:	f000 faa2 	bl	800e790 <raise>
 800e24c:	2001      	movs	r0, #1
 800e24e:	f7f8 fab5 	bl	80067bc <_exit>
	...

0800e254 <__sflush_r>:
 800e254:	898a      	ldrh	r2, [r1, #12]
 800e256:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e25a:	4605      	mov	r5, r0
 800e25c:	0710      	lsls	r0, r2, #28
 800e25e:	460c      	mov	r4, r1
 800e260:	d458      	bmi.n	800e314 <__sflush_r+0xc0>
 800e262:	684b      	ldr	r3, [r1, #4]
 800e264:	2b00      	cmp	r3, #0
 800e266:	dc05      	bgt.n	800e274 <__sflush_r+0x20>
 800e268:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800e26a:	2b00      	cmp	r3, #0
 800e26c:	dc02      	bgt.n	800e274 <__sflush_r+0x20>
 800e26e:	2000      	movs	r0, #0
 800e270:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e274:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e276:	2e00      	cmp	r6, #0
 800e278:	d0f9      	beq.n	800e26e <__sflush_r+0x1a>
 800e27a:	2300      	movs	r3, #0
 800e27c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800e280:	682f      	ldr	r7, [r5, #0]
 800e282:	602b      	str	r3, [r5, #0]
 800e284:	d032      	beq.n	800e2ec <__sflush_r+0x98>
 800e286:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800e288:	89a3      	ldrh	r3, [r4, #12]
 800e28a:	075a      	lsls	r2, r3, #29
 800e28c:	d505      	bpl.n	800e29a <__sflush_r+0x46>
 800e28e:	6863      	ldr	r3, [r4, #4]
 800e290:	1ac0      	subs	r0, r0, r3
 800e292:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800e294:	b10b      	cbz	r3, 800e29a <__sflush_r+0x46>
 800e296:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800e298:	1ac0      	subs	r0, r0, r3
 800e29a:	2300      	movs	r3, #0
 800e29c:	4602      	mov	r2, r0
 800e29e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800e2a0:	6a21      	ldr	r1, [r4, #32]
 800e2a2:	4628      	mov	r0, r5
 800e2a4:	47b0      	blx	r6
 800e2a6:	1c43      	adds	r3, r0, #1
 800e2a8:	89a3      	ldrh	r3, [r4, #12]
 800e2aa:	d106      	bne.n	800e2ba <__sflush_r+0x66>
 800e2ac:	6829      	ldr	r1, [r5, #0]
 800e2ae:	291d      	cmp	r1, #29
 800e2b0:	d82c      	bhi.n	800e30c <__sflush_r+0xb8>
 800e2b2:	4a2a      	ldr	r2, [pc, #168]	; (800e35c <__sflush_r+0x108>)
 800e2b4:	40ca      	lsrs	r2, r1
 800e2b6:	07d6      	lsls	r6, r2, #31
 800e2b8:	d528      	bpl.n	800e30c <__sflush_r+0xb8>
 800e2ba:	2200      	movs	r2, #0
 800e2bc:	6062      	str	r2, [r4, #4]
 800e2be:	04d9      	lsls	r1, r3, #19
 800e2c0:	6922      	ldr	r2, [r4, #16]
 800e2c2:	6022      	str	r2, [r4, #0]
 800e2c4:	d504      	bpl.n	800e2d0 <__sflush_r+0x7c>
 800e2c6:	1c42      	adds	r2, r0, #1
 800e2c8:	d101      	bne.n	800e2ce <__sflush_r+0x7a>
 800e2ca:	682b      	ldr	r3, [r5, #0]
 800e2cc:	b903      	cbnz	r3, 800e2d0 <__sflush_r+0x7c>
 800e2ce:	6560      	str	r0, [r4, #84]	; 0x54
 800e2d0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800e2d2:	602f      	str	r7, [r5, #0]
 800e2d4:	2900      	cmp	r1, #0
 800e2d6:	d0ca      	beq.n	800e26e <__sflush_r+0x1a>
 800e2d8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800e2dc:	4299      	cmp	r1, r3
 800e2de:	d002      	beq.n	800e2e6 <__sflush_r+0x92>
 800e2e0:	4628      	mov	r0, r5
 800e2e2:	f7ff fb1d 	bl	800d920 <_free_r>
 800e2e6:	2000      	movs	r0, #0
 800e2e8:	6360      	str	r0, [r4, #52]	; 0x34
 800e2ea:	e7c1      	b.n	800e270 <__sflush_r+0x1c>
 800e2ec:	6a21      	ldr	r1, [r4, #32]
 800e2ee:	2301      	movs	r3, #1
 800e2f0:	4628      	mov	r0, r5
 800e2f2:	47b0      	blx	r6
 800e2f4:	1c41      	adds	r1, r0, #1
 800e2f6:	d1c7      	bne.n	800e288 <__sflush_r+0x34>
 800e2f8:	682b      	ldr	r3, [r5, #0]
 800e2fa:	2b00      	cmp	r3, #0
 800e2fc:	d0c4      	beq.n	800e288 <__sflush_r+0x34>
 800e2fe:	2b1d      	cmp	r3, #29
 800e300:	d001      	beq.n	800e306 <__sflush_r+0xb2>
 800e302:	2b16      	cmp	r3, #22
 800e304:	d101      	bne.n	800e30a <__sflush_r+0xb6>
 800e306:	602f      	str	r7, [r5, #0]
 800e308:	e7b1      	b.n	800e26e <__sflush_r+0x1a>
 800e30a:	89a3      	ldrh	r3, [r4, #12]
 800e30c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e310:	81a3      	strh	r3, [r4, #12]
 800e312:	e7ad      	b.n	800e270 <__sflush_r+0x1c>
 800e314:	690f      	ldr	r7, [r1, #16]
 800e316:	2f00      	cmp	r7, #0
 800e318:	d0a9      	beq.n	800e26e <__sflush_r+0x1a>
 800e31a:	0793      	lsls	r3, r2, #30
 800e31c:	680e      	ldr	r6, [r1, #0]
 800e31e:	bf08      	it	eq
 800e320:	694b      	ldreq	r3, [r1, #20]
 800e322:	600f      	str	r7, [r1, #0]
 800e324:	bf18      	it	ne
 800e326:	2300      	movne	r3, #0
 800e328:	eba6 0807 	sub.w	r8, r6, r7
 800e32c:	608b      	str	r3, [r1, #8]
 800e32e:	f1b8 0f00 	cmp.w	r8, #0
 800e332:	dd9c      	ble.n	800e26e <__sflush_r+0x1a>
 800e334:	6a21      	ldr	r1, [r4, #32]
 800e336:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800e338:	4643      	mov	r3, r8
 800e33a:	463a      	mov	r2, r7
 800e33c:	4628      	mov	r0, r5
 800e33e:	47b0      	blx	r6
 800e340:	2800      	cmp	r0, #0
 800e342:	dc06      	bgt.n	800e352 <__sflush_r+0xfe>
 800e344:	89a3      	ldrh	r3, [r4, #12]
 800e346:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800e34a:	81a3      	strh	r3, [r4, #12]
 800e34c:	f04f 30ff 	mov.w	r0, #4294967295
 800e350:	e78e      	b.n	800e270 <__sflush_r+0x1c>
 800e352:	4407      	add	r7, r0
 800e354:	eba8 0800 	sub.w	r8, r8, r0
 800e358:	e7e9      	b.n	800e32e <__sflush_r+0xda>
 800e35a:	bf00      	nop
 800e35c:	20400001 	.word	0x20400001

0800e360 <_fflush_r>:
 800e360:	b538      	push	{r3, r4, r5, lr}
 800e362:	690b      	ldr	r3, [r1, #16]
 800e364:	4605      	mov	r5, r0
 800e366:	460c      	mov	r4, r1
 800e368:	b913      	cbnz	r3, 800e370 <_fflush_r+0x10>
 800e36a:	2500      	movs	r5, #0
 800e36c:	4628      	mov	r0, r5
 800e36e:	bd38      	pop	{r3, r4, r5, pc}
 800e370:	b118      	cbz	r0, 800e37a <_fflush_r+0x1a>
 800e372:	6983      	ldr	r3, [r0, #24]
 800e374:	b90b      	cbnz	r3, 800e37a <_fflush_r+0x1a>
 800e376:	f000 f887 	bl	800e488 <__sinit>
 800e37a:	4b14      	ldr	r3, [pc, #80]	; (800e3cc <_fflush_r+0x6c>)
 800e37c:	429c      	cmp	r4, r3
 800e37e:	d11b      	bne.n	800e3b8 <_fflush_r+0x58>
 800e380:	686c      	ldr	r4, [r5, #4]
 800e382:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e386:	2b00      	cmp	r3, #0
 800e388:	d0ef      	beq.n	800e36a <_fflush_r+0xa>
 800e38a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800e38c:	07d0      	lsls	r0, r2, #31
 800e38e:	d404      	bmi.n	800e39a <_fflush_r+0x3a>
 800e390:	0599      	lsls	r1, r3, #22
 800e392:	d402      	bmi.n	800e39a <_fflush_r+0x3a>
 800e394:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e396:	f000 f915 	bl	800e5c4 <__retarget_lock_acquire_recursive>
 800e39a:	4628      	mov	r0, r5
 800e39c:	4621      	mov	r1, r4
 800e39e:	f7ff ff59 	bl	800e254 <__sflush_r>
 800e3a2:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800e3a4:	07da      	lsls	r2, r3, #31
 800e3a6:	4605      	mov	r5, r0
 800e3a8:	d4e0      	bmi.n	800e36c <_fflush_r+0xc>
 800e3aa:	89a3      	ldrh	r3, [r4, #12]
 800e3ac:	059b      	lsls	r3, r3, #22
 800e3ae:	d4dd      	bmi.n	800e36c <_fflush_r+0xc>
 800e3b0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800e3b2:	f000 f908 	bl	800e5c6 <__retarget_lock_release_recursive>
 800e3b6:	e7d9      	b.n	800e36c <_fflush_r+0xc>
 800e3b8:	4b05      	ldr	r3, [pc, #20]	; (800e3d0 <_fflush_r+0x70>)
 800e3ba:	429c      	cmp	r4, r3
 800e3bc:	d101      	bne.n	800e3c2 <_fflush_r+0x62>
 800e3be:	68ac      	ldr	r4, [r5, #8]
 800e3c0:	e7df      	b.n	800e382 <_fflush_r+0x22>
 800e3c2:	4b04      	ldr	r3, [pc, #16]	; (800e3d4 <_fflush_r+0x74>)
 800e3c4:	429c      	cmp	r4, r3
 800e3c6:	bf08      	it	eq
 800e3c8:	68ec      	ldreq	r4, [r5, #12]
 800e3ca:	e7da      	b.n	800e382 <_fflush_r+0x22>
 800e3cc:	0800fe68 	.word	0x0800fe68
 800e3d0:	0800fe88 	.word	0x0800fe88
 800e3d4:	0800fe48 	.word	0x0800fe48

0800e3d8 <std>:
 800e3d8:	2300      	movs	r3, #0
 800e3da:	b510      	push	{r4, lr}
 800e3dc:	4604      	mov	r4, r0
 800e3de:	e9c0 3300 	strd	r3, r3, [r0]
 800e3e2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800e3e6:	6083      	str	r3, [r0, #8]
 800e3e8:	8181      	strh	r1, [r0, #12]
 800e3ea:	6643      	str	r3, [r0, #100]	; 0x64
 800e3ec:	81c2      	strh	r2, [r0, #14]
 800e3ee:	6183      	str	r3, [r0, #24]
 800e3f0:	4619      	mov	r1, r3
 800e3f2:	2208      	movs	r2, #8
 800e3f4:	305c      	adds	r0, #92	; 0x5c
 800e3f6:	f7fb fdb5 	bl	8009f64 <memset>
 800e3fa:	4b05      	ldr	r3, [pc, #20]	; (800e410 <std+0x38>)
 800e3fc:	6263      	str	r3, [r4, #36]	; 0x24
 800e3fe:	4b05      	ldr	r3, [pc, #20]	; (800e414 <std+0x3c>)
 800e400:	62a3      	str	r3, [r4, #40]	; 0x28
 800e402:	4b05      	ldr	r3, [pc, #20]	; (800e418 <std+0x40>)
 800e404:	62e3      	str	r3, [r4, #44]	; 0x2c
 800e406:	4b05      	ldr	r3, [pc, #20]	; (800e41c <std+0x44>)
 800e408:	6224      	str	r4, [r4, #32]
 800e40a:	6323      	str	r3, [r4, #48]	; 0x30
 800e40c:	bd10      	pop	{r4, pc}
 800e40e:	bf00      	nop
 800e410:	0800e7c9 	.word	0x0800e7c9
 800e414:	0800e7eb 	.word	0x0800e7eb
 800e418:	0800e823 	.word	0x0800e823
 800e41c:	0800e847 	.word	0x0800e847

0800e420 <_cleanup_r>:
 800e420:	4901      	ldr	r1, [pc, #4]	; (800e428 <_cleanup_r+0x8>)
 800e422:	f000 b8af 	b.w	800e584 <_fwalk_reent>
 800e426:	bf00      	nop
 800e428:	0800e361 	.word	0x0800e361

0800e42c <__sfmoreglue>:
 800e42c:	b570      	push	{r4, r5, r6, lr}
 800e42e:	2268      	movs	r2, #104	; 0x68
 800e430:	1e4d      	subs	r5, r1, #1
 800e432:	4355      	muls	r5, r2
 800e434:	460e      	mov	r6, r1
 800e436:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800e43a:	f7ff fadd 	bl	800d9f8 <_malloc_r>
 800e43e:	4604      	mov	r4, r0
 800e440:	b140      	cbz	r0, 800e454 <__sfmoreglue+0x28>
 800e442:	2100      	movs	r1, #0
 800e444:	e9c0 1600 	strd	r1, r6, [r0]
 800e448:	300c      	adds	r0, #12
 800e44a:	60a0      	str	r0, [r4, #8]
 800e44c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800e450:	f7fb fd88 	bl	8009f64 <memset>
 800e454:	4620      	mov	r0, r4
 800e456:	bd70      	pop	{r4, r5, r6, pc}

0800e458 <__sfp_lock_acquire>:
 800e458:	4801      	ldr	r0, [pc, #4]	; (800e460 <__sfp_lock_acquire+0x8>)
 800e45a:	f000 b8b3 	b.w	800e5c4 <__retarget_lock_acquire_recursive>
 800e45e:	bf00      	nop
 800e460:	20000571 	.word	0x20000571

0800e464 <__sfp_lock_release>:
 800e464:	4801      	ldr	r0, [pc, #4]	; (800e46c <__sfp_lock_release+0x8>)
 800e466:	f000 b8ae 	b.w	800e5c6 <__retarget_lock_release_recursive>
 800e46a:	bf00      	nop
 800e46c:	20000571 	.word	0x20000571

0800e470 <__sinit_lock_acquire>:
 800e470:	4801      	ldr	r0, [pc, #4]	; (800e478 <__sinit_lock_acquire+0x8>)
 800e472:	f000 b8a7 	b.w	800e5c4 <__retarget_lock_acquire_recursive>
 800e476:	bf00      	nop
 800e478:	20000572 	.word	0x20000572

0800e47c <__sinit_lock_release>:
 800e47c:	4801      	ldr	r0, [pc, #4]	; (800e484 <__sinit_lock_release+0x8>)
 800e47e:	f000 b8a2 	b.w	800e5c6 <__retarget_lock_release_recursive>
 800e482:	bf00      	nop
 800e484:	20000572 	.word	0x20000572

0800e488 <__sinit>:
 800e488:	b510      	push	{r4, lr}
 800e48a:	4604      	mov	r4, r0
 800e48c:	f7ff fff0 	bl	800e470 <__sinit_lock_acquire>
 800e490:	69a3      	ldr	r3, [r4, #24]
 800e492:	b11b      	cbz	r3, 800e49c <__sinit+0x14>
 800e494:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800e498:	f7ff bff0 	b.w	800e47c <__sinit_lock_release>
 800e49c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800e4a0:	6523      	str	r3, [r4, #80]	; 0x50
 800e4a2:	4b13      	ldr	r3, [pc, #76]	; (800e4f0 <__sinit+0x68>)
 800e4a4:	4a13      	ldr	r2, [pc, #76]	; (800e4f4 <__sinit+0x6c>)
 800e4a6:	681b      	ldr	r3, [r3, #0]
 800e4a8:	62a2      	str	r2, [r4, #40]	; 0x28
 800e4aa:	42a3      	cmp	r3, r4
 800e4ac:	bf04      	itt	eq
 800e4ae:	2301      	moveq	r3, #1
 800e4b0:	61a3      	streq	r3, [r4, #24]
 800e4b2:	4620      	mov	r0, r4
 800e4b4:	f000 f820 	bl	800e4f8 <__sfp>
 800e4b8:	6060      	str	r0, [r4, #4]
 800e4ba:	4620      	mov	r0, r4
 800e4bc:	f000 f81c 	bl	800e4f8 <__sfp>
 800e4c0:	60a0      	str	r0, [r4, #8]
 800e4c2:	4620      	mov	r0, r4
 800e4c4:	f000 f818 	bl	800e4f8 <__sfp>
 800e4c8:	2200      	movs	r2, #0
 800e4ca:	60e0      	str	r0, [r4, #12]
 800e4cc:	2104      	movs	r1, #4
 800e4ce:	6860      	ldr	r0, [r4, #4]
 800e4d0:	f7ff ff82 	bl	800e3d8 <std>
 800e4d4:	68a0      	ldr	r0, [r4, #8]
 800e4d6:	2201      	movs	r2, #1
 800e4d8:	2109      	movs	r1, #9
 800e4da:	f7ff ff7d 	bl	800e3d8 <std>
 800e4de:	68e0      	ldr	r0, [r4, #12]
 800e4e0:	2202      	movs	r2, #2
 800e4e2:	2112      	movs	r1, #18
 800e4e4:	f7ff ff78 	bl	800e3d8 <std>
 800e4e8:	2301      	movs	r3, #1
 800e4ea:	61a3      	str	r3, [r4, #24]
 800e4ec:	e7d2      	b.n	800e494 <__sinit+0xc>
 800e4ee:	bf00      	nop
 800e4f0:	0800f9a4 	.word	0x0800f9a4
 800e4f4:	0800e421 	.word	0x0800e421

0800e4f8 <__sfp>:
 800e4f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e4fa:	4607      	mov	r7, r0
 800e4fc:	f7ff ffac 	bl	800e458 <__sfp_lock_acquire>
 800e500:	4b1e      	ldr	r3, [pc, #120]	; (800e57c <__sfp+0x84>)
 800e502:	681e      	ldr	r6, [r3, #0]
 800e504:	69b3      	ldr	r3, [r6, #24]
 800e506:	b913      	cbnz	r3, 800e50e <__sfp+0x16>
 800e508:	4630      	mov	r0, r6
 800e50a:	f7ff ffbd 	bl	800e488 <__sinit>
 800e50e:	3648      	adds	r6, #72	; 0x48
 800e510:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800e514:	3b01      	subs	r3, #1
 800e516:	d503      	bpl.n	800e520 <__sfp+0x28>
 800e518:	6833      	ldr	r3, [r6, #0]
 800e51a:	b30b      	cbz	r3, 800e560 <__sfp+0x68>
 800e51c:	6836      	ldr	r6, [r6, #0]
 800e51e:	e7f7      	b.n	800e510 <__sfp+0x18>
 800e520:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800e524:	b9d5      	cbnz	r5, 800e55c <__sfp+0x64>
 800e526:	4b16      	ldr	r3, [pc, #88]	; (800e580 <__sfp+0x88>)
 800e528:	60e3      	str	r3, [r4, #12]
 800e52a:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800e52e:	6665      	str	r5, [r4, #100]	; 0x64
 800e530:	f000 f847 	bl	800e5c2 <__retarget_lock_init_recursive>
 800e534:	f7ff ff96 	bl	800e464 <__sfp_lock_release>
 800e538:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800e53c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800e540:	6025      	str	r5, [r4, #0]
 800e542:	61a5      	str	r5, [r4, #24]
 800e544:	2208      	movs	r2, #8
 800e546:	4629      	mov	r1, r5
 800e548:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800e54c:	f7fb fd0a 	bl	8009f64 <memset>
 800e550:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800e554:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800e558:	4620      	mov	r0, r4
 800e55a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e55c:	3468      	adds	r4, #104	; 0x68
 800e55e:	e7d9      	b.n	800e514 <__sfp+0x1c>
 800e560:	2104      	movs	r1, #4
 800e562:	4638      	mov	r0, r7
 800e564:	f7ff ff62 	bl	800e42c <__sfmoreglue>
 800e568:	4604      	mov	r4, r0
 800e56a:	6030      	str	r0, [r6, #0]
 800e56c:	2800      	cmp	r0, #0
 800e56e:	d1d5      	bne.n	800e51c <__sfp+0x24>
 800e570:	f7ff ff78 	bl	800e464 <__sfp_lock_release>
 800e574:	230c      	movs	r3, #12
 800e576:	603b      	str	r3, [r7, #0]
 800e578:	e7ee      	b.n	800e558 <__sfp+0x60>
 800e57a:	bf00      	nop
 800e57c:	0800f9a4 	.word	0x0800f9a4
 800e580:	ffff0001 	.word	0xffff0001

0800e584 <_fwalk_reent>:
 800e584:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800e588:	4606      	mov	r6, r0
 800e58a:	4688      	mov	r8, r1
 800e58c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800e590:	2700      	movs	r7, #0
 800e592:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800e596:	f1b9 0901 	subs.w	r9, r9, #1
 800e59a:	d505      	bpl.n	800e5a8 <_fwalk_reent+0x24>
 800e59c:	6824      	ldr	r4, [r4, #0]
 800e59e:	2c00      	cmp	r4, #0
 800e5a0:	d1f7      	bne.n	800e592 <_fwalk_reent+0xe>
 800e5a2:	4638      	mov	r0, r7
 800e5a4:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800e5a8:	89ab      	ldrh	r3, [r5, #12]
 800e5aa:	2b01      	cmp	r3, #1
 800e5ac:	d907      	bls.n	800e5be <_fwalk_reent+0x3a>
 800e5ae:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800e5b2:	3301      	adds	r3, #1
 800e5b4:	d003      	beq.n	800e5be <_fwalk_reent+0x3a>
 800e5b6:	4629      	mov	r1, r5
 800e5b8:	4630      	mov	r0, r6
 800e5ba:	47c0      	blx	r8
 800e5bc:	4307      	orrs	r7, r0
 800e5be:	3568      	adds	r5, #104	; 0x68
 800e5c0:	e7e9      	b.n	800e596 <_fwalk_reent+0x12>

0800e5c2 <__retarget_lock_init_recursive>:
 800e5c2:	4770      	bx	lr

0800e5c4 <__retarget_lock_acquire_recursive>:
 800e5c4:	4770      	bx	lr

0800e5c6 <__retarget_lock_release_recursive>:
 800e5c6:	4770      	bx	lr

0800e5c8 <__swhatbuf_r>:
 800e5c8:	b570      	push	{r4, r5, r6, lr}
 800e5ca:	460e      	mov	r6, r1
 800e5cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e5d0:	2900      	cmp	r1, #0
 800e5d2:	b096      	sub	sp, #88	; 0x58
 800e5d4:	4614      	mov	r4, r2
 800e5d6:	461d      	mov	r5, r3
 800e5d8:	da08      	bge.n	800e5ec <__swhatbuf_r+0x24>
 800e5da:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800e5de:	2200      	movs	r2, #0
 800e5e0:	602a      	str	r2, [r5, #0]
 800e5e2:	061a      	lsls	r2, r3, #24
 800e5e4:	d410      	bmi.n	800e608 <__swhatbuf_r+0x40>
 800e5e6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800e5ea:	e00e      	b.n	800e60a <__swhatbuf_r+0x42>
 800e5ec:	466a      	mov	r2, sp
 800e5ee:	f000 f951 	bl	800e894 <_fstat_r>
 800e5f2:	2800      	cmp	r0, #0
 800e5f4:	dbf1      	blt.n	800e5da <__swhatbuf_r+0x12>
 800e5f6:	9a01      	ldr	r2, [sp, #4]
 800e5f8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800e5fc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800e600:	425a      	negs	r2, r3
 800e602:	415a      	adcs	r2, r3
 800e604:	602a      	str	r2, [r5, #0]
 800e606:	e7ee      	b.n	800e5e6 <__swhatbuf_r+0x1e>
 800e608:	2340      	movs	r3, #64	; 0x40
 800e60a:	2000      	movs	r0, #0
 800e60c:	6023      	str	r3, [r4, #0]
 800e60e:	b016      	add	sp, #88	; 0x58
 800e610:	bd70      	pop	{r4, r5, r6, pc}
	...

0800e614 <__smakebuf_r>:
 800e614:	898b      	ldrh	r3, [r1, #12]
 800e616:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800e618:	079d      	lsls	r5, r3, #30
 800e61a:	4606      	mov	r6, r0
 800e61c:	460c      	mov	r4, r1
 800e61e:	d507      	bpl.n	800e630 <__smakebuf_r+0x1c>
 800e620:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800e624:	6023      	str	r3, [r4, #0]
 800e626:	6123      	str	r3, [r4, #16]
 800e628:	2301      	movs	r3, #1
 800e62a:	6163      	str	r3, [r4, #20]
 800e62c:	b002      	add	sp, #8
 800e62e:	bd70      	pop	{r4, r5, r6, pc}
 800e630:	ab01      	add	r3, sp, #4
 800e632:	466a      	mov	r2, sp
 800e634:	f7ff ffc8 	bl	800e5c8 <__swhatbuf_r>
 800e638:	9900      	ldr	r1, [sp, #0]
 800e63a:	4605      	mov	r5, r0
 800e63c:	4630      	mov	r0, r6
 800e63e:	f7ff f9db 	bl	800d9f8 <_malloc_r>
 800e642:	b948      	cbnz	r0, 800e658 <__smakebuf_r+0x44>
 800e644:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800e648:	059a      	lsls	r2, r3, #22
 800e64a:	d4ef      	bmi.n	800e62c <__smakebuf_r+0x18>
 800e64c:	f023 0303 	bic.w	r3, r3, #3
 800e650:	f043 0302 	orr.w	r3, r3, #2
 800e654:	81a3      	strh	r3, [r4, #12]
 800e656:	e7e3      	b.n	800e620 <__smakebuf_r+0xc>
 800e658:	4b0d      	ldr	r3, [pc, #52]	; (800e690 <__smakebuf_r+0x7c>)
 800e65a:	62b3      	str	r3, [r6, #40]	; 0x28
 800e65c:	89a3      	ldrh	r3, [r4, #12]
 800e65e:	6020      	str	r0, [r4, #0]
 800e660:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800e664:	81a3      	strh	r3, [r4, #12]
 800e666:	9b00      	ldr	r3, [sp, #0]
 800e668:	6163      	str	r3, [r4, #20]
 800e66a:	9b01      	ldr	r3, [sp, #4]
 800e66c:	6120      	str	r0, [r4, #16]
 800e66e:	b15b      	cbz	r3, 800e688 <__smakebuf_r+0x74>
 800e670:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e674:	4630      	mov	r0, r6
 800e676:	f000 f91f 	bl	800e8b8 <_isatty_r>
 800e67a:	b128      	cbz	r0, 800e688 <__smakebuf_r+0x74>
 800e67c:	89a3      	ldrh	r3, [r4, #12]
 800e67e:	f023 0303 	bic.w	r3, r3, #3
 800e682:	f043 0301 	orr.w	r3, r3, #1
 800e686:	81a3      	strh	r3, [r4, #12]
 800e688:	89a0      	ldrh	r0, [r4, #12]
 800e68a:	4305      	orrs	r5, r0
 800e68c:	81a5      	strh	r5, [r4, #12]
 800e68e:	e7cd      	b.n	800e62c <__smakebuf_r+0x18>
 800e690:	0800e421 	.word	0x0800e421

0800e694 <memmove>:
 800e694:	4288      	cmp	r0, r1
 800e696:	b510      	push	{r4, lr}
 800e698:	eb01 0402 	add.w	r4, r1, r2
 800e69c:	d902      	bls.n	800e6a4 <memmove+0x10>
 800e69e:	4284      	cmp	r4, r0
 800e6a0:	4623      	mov	r3, r4
 800e6a2:	d807      	bhi.n	800e6b4 <memmove+0x20>
 800e6a4:	1e43      	subs	r3, r0, #1
 800e6a6:	42a1      	cmp	r1, r4
 800e6a8:	d008      	beq.n	800e6bc <memmove+0x28>
 800e6aa:	f811 2b01 	ldrb.w	r2, [r1], #1
 800e6ae:	f803 2f01 	strb.w	r2, [r3, #1]!
 800e6b2:	e7f8      	b.n	800e6a6 <memmove+0x12>
 800e6b4:	4402      	add	r2, r0
 800e6b6:	4601      	mov	r1, r0
 800e6b8:	428a      	cmp	r2, r1
 800e6ba:	d100      	bne.n	800e6be <memmove+0x2a>
 800e6bc:	bd10      	pop	{r4, pc}
 800e6be:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800e6c2:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800e6c6:	e7f7      	b.n	800e6b8 <memmove+0x24>

0800e6c8 <__malloc_lock>:
 800e6c8:	4801      	ldr	r0, [pc, #4]	; (800e6d0 <__malloc_lock+0x8>)
 800e6ca:	f7ff bf7b 	b.w	800e5c4 <__retarget_lock_acquire_recursive>
 800e6ce:	bf00      	nop
 800e6d0:	20000570 	.word	0x20000570

0800e6d4 <__malloc_unlock>:
 800e6d4:	4801      	ldr	r0, [pc, #4]	; (800e6dc <__malloc_unlock+0x8>)
 800e6d6:	f7ff bf76 	b.w	800e5c6 <__retarget_lock_release_recursive>
 800e6da:	bf00      	nop
 800e6dc:	20000570 	.word	0x20000570

0800e6e0 <_realloc_r>:
 800e6e0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e6e4:	4680      	mov	r8, r0
 800e6e6:	4614      	mov	r4, r2
 800e6e8:	460e      	mov	r6, r1
 800e6ea:	b921      	cbnz	r1, 800e6f6 <_realloc_r+0x16>
 800e6ec:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e6f0:	4611      	mov	r1, r2
 800e6f2:	f7ff b981 	b.w	800d9f8 <_malloc_r>
 800e6f6:	b92a      	cbnz	r2, 800e704 <_realloc_r+0x24>
 800e6f8:	f7ff f912 	bl	800d920 <_free_r>
 800e6fc:	4625      	mov	r5, r4
 800e6fe:	4628      	mov	r0, r5
 800e700:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800e704:	f000 f8fa 	bl	800e8fc <_malloc_usable_size_r>
 800e708:	4284      	cmp	r4, r0
 800e70a:	4607      	mov	r7, r0
 800e70c:	d802      	bhi.n	800e714 <_realloc_r+0x34>
 800e70e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800e712:	d812      	bhi.n	800e73a <_realloc_r+0x5a>
 800e714:	4621      	mov	r1, r4
 800e716:	4640      	mov	r0, r8
 800e718:	f7ff f96e 	bl	800d9f8 <_malloc_r>
 800e71c:	4605      	mov	r5, r0
 800e71e:	2800      	cmp	r0, #0
 800e720:	d0ed      	beq.n	800e6fe <_realloc_r+0x1e>
 800e722:	42bc      	cmp	r4, r7
 800e724:	4622      	mov	r2, r4
 800e726:	4631      	mov	r1, r6
 800e728:	bf28      	it	cs
 800e72a:	463a      	movcs	r2, r7
 800e72c:	f7fe fc12 	bl	800cf54 <memcpy>
 800e730:	4631      	mov	r1, r6
 800e732:	4640      	mov	r0, r8
 800e734:	f7ff f8f4 	bl	800d920 <_free_r>
 800e738:	e7e1      	b.n	800e6fe <_realloc_r+0x1e>
 800e73a:	4635      	mov	r5, r6
 800e73c:	e7df      	b.n	800e6fe <_realloc_r+0x1e>

0800e73e <_raise_r>:
 800e73e:	291f      	cmp	r1, #31
 800e740:	b538      	push	{r3, r4, r5, lr}
 800e742:	4604      	mov	r4, r0
 800e744:	460d      	mov	r5, r1
 800e746:	d904      	bls.n	800e752 <_raise_r+0x14>
 800e748:	2316      	movs	r3, #22
 800e74a:	6003      	str	r3, [r0, #0]
 800e74c:	f04f 30ff 	mov.w	r0, #4294967295
 800e750:	bd38      	pop	{r3, r4, r5, pc}
 800e752:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800e754:	b112      	cbz	r2, 800e75c <_raise_r+0x1e>
 800e756:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800e75a:	b94b      	cbnz	r3, 800e770 <_raise_r+0x32>
 800e75c:	4620      	mov	r0, r4
 800e75e:	f000 f831 	bl	800e7c4 <_getpid_r>
 800e762:	462a      	mov	r2, r5
 800e764:	4601      	mov	r1, r0
 800e766:	4620      	mov	r0, r4
 800e768:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800e76c:	f000 b818 	b.w	800e7a0 <_kill_r>
 800e770:	2b01      	cmp	r3, #1
 800e772:	d00a      	beq.n	800e78a <_raise_r+0x4c>
 800e774:	1c59      	adds	r1, r3, #1
 800e776:	d103      	bne.n	800e780 <_raise_r+0x42>
 800e778:	2316      	movs	r3, #22
 800e77a:	6003      	str	r3, [r0, #0]
 800e77c:	2001      	movs	r0, #1
 800e77e:	e7e7      	b.n	800e750 <_raise_r+0x12>
 800e780:	2400      	movs	r4, #0
 800e782:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800e786:	4628      	mov	r0, r5
 800e788:	4798      	blx	r3
 800e78a:	2000      	movs	r0, #0
 800e78c:	e7e0      	b.n	800e750 <_raise_r+0x12>
	...

0800e790 <raise>:
 800e790:	4b02      	ldr	r3, [pc, #8]	; (800e79c <raise+0xc>)
 800e792:	4601      	mov	r1, r0
 800e794:	6818      	ldr	r0, [r3, #0]
 800e796:	f7ff bfd2 	b.w	800e73e <_raise_r>
 800e79a:	bf00      	nop
 800e79c:	20000020 	.word	0x20000020

0800e7a0 <_kill_r>:
 800e7a0:	b538      	push	{r3, r4, r5, lr}
 800e7a2:	4d07      	ldr	r5, [pc, #28]	; (800e7c0 <_kill_r+0x20>)
 800e7a4:	2300      	movs	r3, #0
 800e7a6:	4604      	mov	r4, r0
 800e7a8:	4608      	mov	r0, r1
 800e7aa:	4611      	mov	r1, r2
 800e7ac:	602b      	str	r3, [r5, #0]
 800e7ae:	f7f7 fff5 	bl	800679c <_kill>
 800e7b2:	1c43      	adds	r3, r0, #1
 800e7b4:	d102      	bne.n	800e7bc <_kill_r+0x1c>
 800e7b6:	682b      	ldr	r3, [r5, #0]
 800e7b8:	b103      	cbz	r3, 800e7bc <_kill_r+0x1c>
 800e7ba:	6023      	str	r3, [r4, #0]
 800e7bc:	bd38      	pop	{r3, r4, r5, pc}
 800e7be:	bf00      	nop
 800e7c0:	20000574 	.word	0x20000574

0800e7c4 <_getpid_r>:
 800e7c4:	f7f7 bfe2 	b.w	800678c <_getpid>

0800e7c8 <__sread>:
 800e7c8:	b510      	push	{r4, lr}
 800e7ca:	460c      	mov	r4, r1
 800e7cc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e7d0:	f000 f89c 	bl	800e90c <_read_r>
 800e7d4:	2800      	cmp	r0, #0
 800e7d6:	bfab      	itete	ge
 800e7d8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800e7da:	89a3      	ldrhlt	r3, [r4, #12]
 800e7dc:	181b      	addge	r3, r3, r0
 800e7de:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800e7e2:	bfac      	ite	ge
 800e7e4:	6563      	strge	r3, [r4, #84]	; 0x54
 800e7e6:	81a3      	strhlt	r3, [r4, #12]
 800e7e8:	bd10      	pop	{r4, pc}

0800e7ea <__swrite>:
 800e7ea:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800e7ee:	461f      	mov	r7, r3
 800e7f0:	898b      	ldrh	r3, [r1, #12]
 800e7f2:	05db      	lsls	r3, r3, #23
 800e7f4:	4605      	mov	r5, r0
 800e7f6:	460c      	mov	r4, r1
 800e7f8:	4616      	mov	r6, r2
 800e7fa:	d505      	bpl.n	800e808 <__swrite+0x1e>
 800e7fc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e800:	2302      	movs	r3, #2
 800e802:	2200      	movs	r2, #0
 800e804:	f000 f868 	bl	800e8d8 <_lseek_r>
 800e808:	89a3      	ldrh	r3, [r4, #12]
 800e80a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800e80e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800e812:	81a3      	strh	r3, [r4, #12]
 800e814:	4632      	mov	r2, r6
 800e816:	463b      	mov	r3, r7
 800e818:	4628      	mov	r0, r5
 800e81a:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800e81e:	f000 b817 	b.w	800e850 <_write_r>

0800e822 <__sseek>:
 800e822:	b510      	push	{r4, lr}
 800e824:	460c      	mov	r4, r1
 800e826:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e82a:	f000 f855 	bl	800e8d8 <_lseek_r>
 800e82e:	1c43      	adds	r3, r0, #1
 800e830:	89a3      	ldrh	r3, [r4, #12]
 800e832:	bf15      	itete	ne
 800e834:	6560      	strne	r0, [r4, #84]	; 0x54
 800e836:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800e83a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800e83e:	81a3      	strheq	r3, [r4, #12]
 800e840:	bf18      	it	ne
 800e842:	81a3      	strhne	r3, [r4, #12]
 800e844:	bd10      	pop	{r4, pc}

0800e846 <__sclose>:
 800e846:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800e84a:	f000 b813 	b.w	800e874 <_close_r>
	...

0800e850 <_write_r>:
 800e850:	b538      	push	{r3, r4, r5, lr}
 800e852:	4d07      	ldr	r5, [pc, #28]	; (800e870 <_write_r+0x20>)
 800e854:	4604      	mov	r4, r0
 800e856:	4608      	mov	r0, r1
 800e858:	4611      	mov	r1, r2
 800e85a:	2200      	movs	r2, #0
 800e85c:	602a      	str	r2, [r5, #0]
 800e85e:	461a      	mov	r2, r3
 800e860:	f7f7 ffd3 	bl	800680a <_write>
 800e864:	1c43      	adds	r3, r0, #1
 800e866:	d102      	bne.n	800e86e <_write_r+0x1e>
 800e868:	682b      	ldr	r3, [r5, #0]
 800e86a:	b103      	cbz	r3, 800e86e <_write_r+0x1e>
 800e86c:	6023      	str	r3, [r4, #0]
 800e86e:	bd38      	pop	{r3, r4, r5, pc}
 800e870:	20000574 	.word	0x20000574

0800e874 <_close_r>:
 800e874:	b538      	push	{r3, r4, r5, lr}
 800e876:	4d06      	ldr	r5, [pc, #24]	; (800e890 <_close_r+0x1c>)
 800e878:	2300      	movs	r3, #0
 800e87a:	4604      	mov	r4, r0
 800e87c:	4608      	mov	r0, r1
 800e87e:	602b      	str	r3, [r5, #0]
 800e880:	f7f7 ffdf 	bl	8006842 <_close>
 800e884:	1c43      	adds	r3, r0, #1
 800e886:	d102      	bne.n	800e88e <_close_r+0x1a>
 800e888:	682b      	ldr	r3, [r5, #0]
 800e88a:	b103      	cbz	r3, 800e88e <_close_r+0x1a>
 800e88c:	6023      	str	r3, [r4, #0]
 800e88e:	bd38      	pop	{r3, r4, r5, pc}
 800e890:	20000574 	.word	0x20000574

0800e894 <_fstat_r>:
 800e894:	b538      	push	{r3, r4, r5, lr}
 800e896:	4d07      	ldr	r5, [pc, #28]	; (800e8b4 <_fstat_r+0x20>)
 800e898:	2300      	movs	r3, #0
 800e89a:	4604      	mov	r4, r0
 800e89c:	4608      	mov	r0, r1
 800e89e:	4611      	mov	r1, r2
 800e8a0:	602b      	str	r3, [r5, #0]
 800e8a2:	f7f7 ffda 	bl	800685a <_fstat>
 800e8a6:	1c43      	adds	r3, r0, #1
 800e8a8:	d102      	bne.n	800e8b0 <_fstat_r+0x1c>
 800e8aa:	682b      	ldr	r3, [r5, #0]
 800e8ac:	b103      	cbz	r3, 800e8b0 <_fstat_r+0x1c>
 800e8ae:	6023      	str	r3, [r4, #0]
 800e8b0:	bd38      	pop	{r3, r4, r5, pc}
 800e8b2:	bf00      	nop
 800e8b4:	20000574 	.word	0x20000574

0800e8b8 <_isatty_r>:
 800e8b8:	b538      	push	{r3, r4, r5, lr}
 800e8ba:	4d06      	ldr	r5, [pc, #24]	; (800e8d4 <_isatty_r+0x1c>)
 800e8bc:	2300      	movs	r3, #0
 800e8be:	4604      	mov	r4, r0
 800e8c0:	4608      	mov	r0, r1
 800e8c2:	602b      	str	r3, [r5, #0]
 800e8c4:	f7f7 ffd9 	bl	800687a <_isatty>
 800e8c8:	1c43      	adds	r3, r0, #1
 800e8ca:	d102      	bne.n	800e8d2 <_isatty_r+0x1a>
 800e8cc:	682b      	ldr	r3, [r5, #0]
 800e8ce:	b103      	cbz	r3, 800e8d2 <_isatty_r+0x1a>
 800e8d0:	6023      	str	r3, [r4, #0]
 800e8d2:	bd38      	pop	{r3, r4, r5, pc}
 800e8d4:	20000574 	.word	0x20000574

0800e8d8 <_lseek_r>:
 800e8d8:	b538      	push	{r3, r4, r5, lr}
 800e8da:	4d07      	ldr	r5, [pc, #28]	; (800e8f8 <_lseek_r+0x20>)
 800e8dc:	4604      	mov	r4, r0
 800e8de:	4608      	mov	r0, r1
 800e8e0:	4611      	mov	r1, r2
 800e8e2:	2200      	movs	r2, #0
 800e8e4:	602a      	str	r2, [r5, #0]
 800e8e6:	461a      	mov	r2, r3
 800e8e8:	f7f7 ffd2 	bl	8006890 <_lseek>
 800e8ec:	1c43      	adds	r3, r0, #1
 800e8ee:	d102      	bne.n	800e8f6 <_lseek_r+0x1e>
 800e8f0:	682b      	ldr	r3, [r5, #0]
 800e8f2:	b103      	cbz	r3, 800e8f6 <_lseek_r+0x1e>
 800e8f4:	6023      	str	r3, [r4, #0]
 800e8f6:	bd38      	pop	{r3, r4, r5, pc}
 800e8f8:	20000574 	.word	0x20000574

0800e8fc <_malloc_usable_size_r>:
 800e8fc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800e900:	1f18      	subs	r0, r3, #4
 800e902:	2b00      	cmp	r3, #0
 800e904:	bfbc      	itt	lt
 800e906:	580b      	ldrlt	r3, [r1, r0]
 800e908:	18c0      	addlt	r0, r0, r3
 800e90a:	4770      	bx	lr

0800e90c <_read_r>:
 800e90c:	b538      	push	{r3, r4, r5, lr}
 800e90e:	4d07      	ldr	r5, [pc, #28]	; (800e92c <_read_r+0x20>)
 800e910:	4604      	mov	r4, r0
 800e912:	4608      	mov	r0, r1
 800e914:	4611      	mov	r1, r2
 800e916:	2200      	movs	r2, #0
 800e918:	602a      	str	r2, [r5, #0]
 800e91a:	461a      	mov	r2, r3
 800e91c:	f7f7 ff58 	bl	80067d0 <_read>
 800e920:	1c43      	adds	r3, r0, #1
 800e922:	d102      	bne.n	800e92a <_read_r+0x1e>
 800e924:	682b      	ldr	r3, [r5, #0]
 800e926:	b103      	cbz	r3, 800e92a <_read_r+0x1e>
 800e928:	6023      	str	r3, [r4, #0]
 800e92a:	bd38      	pop	{r3, r4, r5, pc}
 800e92c:	20000574 	.word	0x20000574

0800e930 <pow>:
 800e930:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800e932:	ed2d 8b02 	vpush	{d8}
 800e936:	eeb0 8a40 	vmov.f32	s16, s0
 800e93a:	eef0 8a60 	vmov.f32	s17, s1
 800e93e:	ec55 4b11 	vmov	r4, r5, d1
 800e942:	f000 f891 	bl	800ea68 <__ieee754_pow>
 800e946:	4622      	mov	r2, r4
 800e948:	462b      	mov	r3, r5
 800e94a:	4620      	mov	r0, r4
 800e94c:	4629      	mov	r1, r5
 800e94e:	ec57 6b10 	vmov	r6, r7, d0
 800e952:	f7f2 f8eb 	bl	8000b2c <__aeabi_dcmpun>
 800e956:	2800      	cmp	r0, #0
 800e958:	d13b      	bne.n	800e9d2 <pow+0xa2>
 800e95a:	ec51 0b18 	vmov	r0, r1, d8
 800e95e:	2200      	movs	r2, #0
 800e960:	2300      	movs	r3, #0
 800e962:	f7f2 f8b1 	bl	8000ac8 <__aeabi_dcmpeq>
 800e966:	b1b8      	cbz	r0, 800e998 <pow+0x68>
 800e968:	2200      	movs	r2, #0
 800e96a:	2300      	movs	r3, #0
 800e96c:	4620      	mov	r0, r4
 800e96e:	4629      	mov	r1, r5
 800e970:	f7f2 f8aa 	bl	8000ac8 <__aeabi_dcmpeq>
 800e974:	2800      	cmp	r0, #0
 800e976:	d146      	bne.n	800ea06 <pow+0xd6>
 800e978:	ec45 4b10 	vmov	d0, r4, r5
 800e97c:	f000 fe8d 	bl	800f69a <finite>
 800e980:	b338      	cbz	r0, 800e9d2 <pow+0xa2>
 800e982:	2200      	movs	r2, #0
 800e984:	2300      	movs	r3, #0
 800e986:	4620      	mov	r0, r4
 800e988:	4629      	mov	r1, r5
 800e98a:	f7f2 f8a7 	bl	8000adc <__aeabi_dcmplt>
 800e98e:	b300      	cbz	r0, 800e9d2 <pow+0xa2>
 800e990:	f7fb fabe 	bl	8009f10 <__errno>
 800e994:	2322      	movs	r3, #34	; 0x22
 800e996:	e01b      	b.n	800e9d0 <pow+0xa0>
 800e998:	ec47 6b10 	vmov	d0, r6, r7
 800e99c:	f000 fe7d 	bl	800f69a <finite>
 800e9a0:	b9e0      	cbnz	r0, 800e9dc <pow+0xac>
 800e9a2:	eeb0 0a48 	vmov.f32	s0, s16
 800e9a6:	eef0 0a68 	vmov.f32	s1, s17
 800e9aa:	f000 fe76 	bl	800f69a <finite>
 800e9ae:	b1a8      	cbz	r0, 800e9dc <pow+0xac>
 800e9b0:	ec45 4b10 	vmov	d0, r4, r5
 800e9b4:	f000 fe71 	bl	800f69a <finite>
 800e9b8:	b180      	cbz	r0, 800e9dc <pow+0xac>
 800e9ba:	4632      	mov	r2, r6
 800e9bc:	463b      	mov	r3, r7
 800e9be:	4630      	mov	r0, r6
 800e9c0:	4639      	mov	r1, r7
 800e9c2:	f7f2 f8b3 	bl	8000b2c <__aeabi_dcmpun>
 800e9c6:	2800      	cmp	r0, #0
 800e9c8:	d0e2      	beq.n	800e990 <pow+0x60>
 800e9ca:	f7fb faa1 	bl	8009f10 <__errno>
 800e9ce:	2321      	movs	r3, #33	; 0x21
 800e9d0:	6003      	str	r3, [r0, #0]
 800e9d2:	ecbd 8b02 	vpop	{d8}
 800e9d6:	ec47 6b10 	vmov	d0, r6, r7
 800e9da:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800e9dc:	2200      	movs	r2, #0
 800e9de:	2300      	movs	r3, #0
 800e9e0:	4630      	mov	r0, r6
 800e9e2:	4639      	mov	r1, r7
 800e9e4:	f7f2 f870 	bl	8000ac8 <__aeabi_dcmpeq>
 800e9e8:	2800      	cmp	r0, #0
 800e9ea:	d0f2      	beq.n	800e9d2 <pow+0xa2>
 800e9ec:	eeb0 0a48 	vmov.f32	s0, s16
 800e9f0:	eef0 0a68 	vmov.f32	s1, s17
 800e9f4:	f000 fe51 	bl	800f69a <finite>
 800e9f8:	2800      	cmp	r0, #0
 800e9fa:	d0ea      	beq.n	800e9d2 <pow+0xa2>
 800e9fc:	ec45 4b10 	vmov	d0, r4, r5
 800ea00:	f000 fe4b 	bl	800f69a <finite>
 800ea04:	e7c3      	b.n	800e98e <pow+0x5e>
 800ea06:	4f01      	ldr	r7, [pc, #4]	; (800ea0c <pow+0xdc>)
 800ea08:	2600      	movs	r6, #0
 800ea0a:	e7e2      	b.n	800e9d2 <pow+0xa2>
 800ea0c:	3ff00000 	.word	0x3ff00000

0800ea10 <sqrt>:
 800ea10:	b538      	push	{r3, r4, r5, lr}
 800ea12:	ed2d 8b02 	vpush	{d8}
 800ea16:	ec55 4b10 	vmov	r4, r5, d0
 800ea1a:	f000 fd53 	bl	800f4c4 <__ieee754_sqrt>
 800ea1e:	4622      	mov	r2, r4
 800ea20:	462b      	mov	r3, r5
 800ea22:	4620      	mov	r0, r4
 800ea24:	4629      	mov	r1, r5
 800ea26:	eeb0 8a40 	vmov.f32	s16, s0
 800ea2a:	eef0 8a60 	vmov.f32	s17, s1
 800ea2e:	f7f2 f87d 	bl	8000b2c <__aeabi_dcmpun>
 800ea32:	b990      	cbnz	r0, 800ea5a <sqrt+0x4a>
 800ea34:	2200      	movs	r2, #0
 800ea36:	2300      	movs	r3, #0
 800ea38:	4620      	mov	r0, r4
 800ea3a:	4629      	mov	r1, r5
 800ea3c:	f7f2 f84e 	bl	8000adc <__aeabi_dcmplt>
 800ea40:	b158      	cbz	r0, 800ea5a <sqrt+0x4a>
 800ea42:	f7fb fa65 	bl	8009f10 <__errno>
 800ea46:	2321      	movs	r3, #33	; 0x21
 800ea48:	6003      	str	r3, [r0, #0]
 800ea4a:	2200      	movs	r2, #0
 800ea4c:	2300      	movs	r3, #0
 800ea4e:	4610      	mov	r0, r2
 800ea50:	4619      	mov	r1, r3
 800ea52:	f7f1 fefb 	bl	800084c <__aeabi_ddiv>
 800ea56:	ec41 0b18 	vmov	d8, r0, r1
 800ea5a:	eeb0 0a48 	vmov.f32	s0, s16
 800ea5e:	eef0 0a68 	vmov.f32	s1, s17
 800ea62:	ecbd 8b02 	vpop	{d8}
 800ea66:	bd38      	pop	{r3, r4, r5, pc}

0800ea68 <__ieee754_pow>:
 800ea68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ea6c:	ed2d 8b06 	vpush	{d8-d10}
 800ea70:	b089      	sub	sp, #36	; 0x24
 800ea72:	ed8d 1b00 	vstr	d1, [sp]
 800ea76:	e9dd 2900 	ldrd	r2, r9, [sp]
 800ea7a:	f029 4800 	bic.w	r8, r9, #2147483648	; 0x80000000
 800ea7e:	ea58 0102 	orrs.w	r1, r8, r2
 800ea82:	ec57 6b10 	vmov	r6, r7, d0
 800ea86:	d115      	bne.n	800eab4 <__ieee754_pow+0x4c>
 800ea88:	19b3      	adds	r3, r6, r6
 800ea8a:	f487 2200 	eor.w	r2, r7, #524288	; 0x80000
 800ea8e:	4152      	adcs	r2, r2
 800ea90:	4299      	cmp	r1, r3
 800ea92:	4b89      	ldr	r3, [pc, #548]	; (800ecb8 <__ieee754_pow+0x250>)
 800ea94:	4193      	sbcs	r3, r2
 800ea96:	f080 84d2 	bcs.w	800f43e <__ieee754_pow+0x9d6>
 800ea9a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800ea9e:	4630      	mov	r0, r6
 800eaa0:	4639      	mov	r1, r7
 800eaa2:	f7f1 fbf3 	bl	800028c <__adddf3>
 800eaa6:	ec41 0b10 	vmov	d0, r0, r1
 800eaaa:	b009      	add	sp, #36	; 0x24
 800eaac:	ecbd 8b06 	vpop	{d8-d10}
 800eab0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800eab4:	4b81      	ldr	r3, [pc, #516]	; (800ecbc <__ieee754_pow+0x254>)
 800eab6:	f027 4400 	bic.w	r4, r7, #2147483648	; 0x80000000
 800eaba:	429c      	cmp	r4, r3
 800eabc:	ee10 aa10 	vmov	sl, s0
 800eac0:	463d      	mov	r5, r7
 800eac2:	dc06      	bgt.n	800ead2 <__ieee754_pow+0x6a>
 800eac4:	d101      	bne.n	800eaca <__ieee754_pow+0x62>
 800eac6:	2e00      	cmp	r6, #0
 800eac8:	d1e7      	bne.n	800ea9a <__ieee754_pow+0x32>
 800eaca:	4598      	cmp	r8, r3
 800eacc:	dc01      	bgt.n	800ead2 <__ieee754_pow+0x6a>
 800eace:	d10f      	bne.n	800eaf0 <__ieee754_pow+0x88>
 800ead0:	b172      	cbz	r2, 800eaf0 <__ieee754_pow+0x88>
 800ead2:	f105 4540 	add.w	r5, r5, #3221225472	; 0xc0000000
 800ead6:	f505 1580 	add.w	r5, r5, #1048576	; 0x100000
 800eada:	ea55 050a 	orrs.w	r5, r5, sl
 800eade:	d1dc      	bne.n	800ea9a <__ieee754_pow+0x32>
 800eae0:	e9dd 3200 	ldrd	r3, r2, [sp]
 800eae4:	18db      	adds	r3, r3, r3
 800eae6:	f482 2200 	eor.w	r2, r2, #524288	; 0x80000
 800eaea:	4152      	adcs	r2, r2
 800eaec:	429d      	cmp	r5, r3
 800eaee:	e7d0      	b.n	800ea92 <__ieee754_pow+0x2a>
 800eaf0:	2d00      	cmp	r5, #0
 800eaf2:	da3b      	bge.n	800eb6c <__ieee754_pow+0x104>
 800eaf4:	4b72      	ldr	r3, [pc, #456]	; (800ecc0 <__ieee754_pow+0x258>)
 800eaf6:	4598      	cmp	r8, r3
 800eaf8:	dc51      	bgt.n	800eb9e <__ieee754_pow+0x136>
 800eafa:	f1a3 7354 	sub.w	r3, r3, #55574528	; 0x3500000
 800eafe:	4598      	cmp	r8, r3
 800eb00:	f340 84ac 	ble.w	800f45c <__ieee754_pow+0x9f4>
 800eb04:	ea4f 5328 	mov.w	r3, r8, asr #20
 800eb08:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800eb0c:	2b14      	cmp	r3, #20
 800eb0e:	dd0f      	ble.n	800eb30 <__ieee754_pow+0xc8>
 800eb10:	f1c3 0334 	rsb	r3, r3, #52	; 0x34
 800eb14:	fa22 f103 	lsr.w	r1, r2, r3
 800eb18:	fa01 f303 	lsl.w	r3, r1, r3
 800eb1c:	4293      	cmp	r3, r2
 800eb1e:	f040 849d 	bne.w	800f45c <__ieee754_pow+0x9f4>
 800eb22:	f001 0101 	and.w	r1, r1, #1
 800eb26:	f1c1 0302 	rsb	r3, r1, #2
 800eb2a:	9304      	str	r3, [sp, #16]
 800eb2c:	b182      	cbz	r2, 800eb50 <__ieee754_pow+0xe8>
 800eb2e:	e05f      	b.n	800ebf0 <__ieee754_pow+0x188>
 800eb30:	2a00      	cmp	r2, #0
 800eb32:	d15b      	bne.n	800ebec <__ieee754_pow+0x184>
 800eb34:	f1c3 0314 	rsb	r3, r3, #20
 800eb38:	fa48 f103 	asr.w	r1, r8, r3
 800eb3c:	fa01 f303 	lsl.w	r3, r1, r3
 800eb40:	4543      	cmp	r3, r8
 800eb42:	f040 8488 	bne.w	800f456 <__ieee754_pow+0x9ee>
 800eb46:	f001 0101 	and.w	r1, r1, #1
 800eb4a:	f1c1 0302 	rsb	r3, r1, #2
 800eb4e:	9304      	str	r3, [sp, #16]
 800eb50:	4b5c      	ldr	r3, [pc, #368]	; (800ecc4 <__ieee754_pow+0x25c>)
 800eb52:	4598      	cmp	r8, r3
 800eb54:	d132      	bne.n	800ebbc <__ieee754_pow+0x154>
 800eb56:	f1b9 0f00 	cmp.w	r9, #0
 800eb5a:	f280 8478 	bge.w	800f44e <__ieee754_pow+0x9e6>
 800eb5e:	4959      	ldr	r1, [pc, #356]	; (800ecc4 <__ieee754_pow+0x25c>)
 800eb60:	4632      	mov	r2, r6
 800eb62:	463b      	mov	r3, r7
 800eb64:	2000      	movs	r0, #0
 800eb66:	f7f1 fe71 	bl	800084c <__aeabi_ddiv>
 800eb6a:	e79c      	b.n	800eaa6 <__ieee754_pow+0x3e>
 800eb6c:	2300      	movs	r3, #0
 800eb6e:	9304      	str	r3, [sp, #16]
 800eb70:	2a00      	cmp	r2, #0
 800eb72:	d13d      	bne.n	800ebf0 <__ieee754_pow+0x188>
 800eb74:	4b51      	ldr	r3, [pc, #324]	; (800ecbc <__ieee754_pow+0x254>)
 800eb76:	4598      	cmp	r8, r3
 800eb78:	d1ea      	bne.n	800eb50 <__ieee754_pow+0xe8>
 800eb7a:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800eb7e:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 800eb82:	ea53 030a 	orrs.w	r3, r3, sl
 800eb86:	f000 845a 	beq.w	800f43e <__ieee754_pow+0x9d6>
 800eb8a:	4b4f      	ldr	r3, [pc, #316]	; (800ecc8 <__ieee754_pow+0x260>)
 800eb8c:	429c      	cmp	r4, r3
 800eb8e:	dd08      	ble.n	800eba2 <__ieee754_pow+0x13a>
 800eb90:	f1b9 0f00 	cmp.w	r9, #0
 800eb94:	f2c0 8457 	blt.w	800f446 <__ieee754_pow+0x9de>
 800eb98:	e9dd 0100 	ldrd	r0, r1, [sp]
 800eb9c:	e783      	b.n	800eaa6 <__ieee754_pow+0x3e>
 800eb9e:	2302      	movs	r3, #2
 800eba0:	e7e5      	b.n	800eb6e <__ieee754_pow+0x106>
 800eba2:	f1b9 0f00 	cmp.w	r9, #0
 800eba6:	f04f 0000 	mov.w	r0, #0
 800ebaa:	f04f 0100 	mov.w	r1, #0
 800ebae:	f6bf af7a 	bge.w	800eaa6 <__ieee754_pow+0x3e>
 800ebb2:	e9dd 0300 	ldrd	r0, r3, [sp]
 800ebb6:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 800ebba:	e774      	b.n	800eaa6 <__ieee754_pow+0x3e>
 800ebbc:	f1b9 4f80 	cmp.w	r9, #1073741824	; 0x40000000
 800ebc0:	d106      	bne.n	800ebd0 <__ieee754_pow+0x168>
 800ebc2:	4632      	mov	r2, r6
 800ebc4:	463b      	mov	r3, r7
 800ebc6:	4630      	mov	r0, r6
 800ebc8:	4639      	mov	r1, r7
 800ebca:	f7f1 fd15 	bl	80005f8 <__aeabi_dmul>
 800ebce:	e76a      	b.n	800eaa6 <__ieee754_pow+0x3e>
 800ebd0:	4b3e      	ldr	r3, [pc, #248]	; (800eccc <__ieee754_pow+0x264>)
 800ebd2:	4599      	cmp	r9, r3
 800ebd4:	d10c      	bne.n	800ebf0 <__ieee754_pow+0x188>
 800ebd6:	2d00      	cmp	r5, #0
 800ebd8:	db0a      	blt.n	800ebf0 <__ieee754_pow+0x188>
 800ebda:	ec47 6b10 	vmov	d0, r6, r7
 800ebde:	b009      	add	sp, #36	; 0x24
 800ebe0:	ecbd 8b06 	vpop	{d8-d10}
 800ebe4:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ebe8:	f000 bc6c 	b.w	800f4c4 <__ieee754_sqrt>
 800ebec:	2300      	movs	r3, #0
 800ebee:	9304      	str	r3, [sp, #16]
 800ebf0:	ec47 6b10 	vmov	d0, r6, r7
 800ebf4:	f000 fd48 	bl	800f688 <fabs>
 800ebf8:	ec51 0b10 	vmov	r0, r1, d0
 800ebfc:	f1ba 0f00 	cmp.w	sl, #0
 800ec00:	d129      	bne.n	800ec56 <__ieee754_pow+0x1ee>
 800ec02:	b124      	cbz	r4, 800ec0e <__ieee754_pow+0x1a6>
 800ec04:	4b2f      	ldr	r3, [pc, #188]	; (800ecc4 <__ieee754_pow+0x25c>)
 800ec06:	f025 4240 	bic.w	r2, r5, #3221225472	; 0xc0000000
 800ec0a:	429a      	cmp	r2, r3
 800ec0c:	d123      	bne.n	800ec56 <__ieee754_pow+0x1ee>
 800ec0e:	f1b9 0f00 	cmp.w	r9, #0
 800ec12:	da05      	bge.n	800ec20 <__ieee754_pow+0x1b8>
 800ec14:	4602      	mov	r2, r0
 800ec16:	460b      	mov	r3, r1
 800ec18:	2000      	movs	r0, #0
 800ec1a:	492a      	ldr	r1, [pc, #168]	; (800ecc4 <__ieee754_pow+0x25c>)
 800ec1c:	f7f1 fe16 	bl	800084c <__aeabi_ddiv>
 800ec20:	2d00      	cmp	r5, #0
 800ec22:	f6bf af40 	bge.w	800eaa6 <__ieee754_pow+0x3e>
 800ec26:	9b04      	ldr	r3, [sp, #16]
 800ec28:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800ec2c:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800ec30:	4323      	orrs	r3, r4
 800ec32:	d108      	bne.n	800ec46 <__ieee754_pow+0x1de>
 800ec34:	4602      	mov	r2, r0
 800ec36:	460b      	mov	r3, r1
 800ec38:	4610      	mov	r0, r2
 800ec3a:	4619      	mov	r1, r3
 800ec3c:	f7f1 fb24 	bl	8000288 <__aeabi_dsub>
 800ec40:	4602      	mov	r2, r0
 800ec42:	460b      	mov	r3, r1
 800ec44:	e78f      	b.n	800eb66 <__ieee754_pow+0xfe>
 800ec46:	9b04      	ldr	r3, [sp, #16]
 800ec48:	2b01      	cmp	r3, #1
 800ec4a:	f47f af2c 	bne.w	800eaa6 <__ieee754_pow+0x3e>
 800ec4e:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ec52:	4619      	mov	r1, r3
 800ec54:	e727      	b.n	800eaa6 <__ieee754_pow+0x3e>
 800ec56:	0feb      	lsrs	r3, r5, #31
 800ec58:	3b01      	subs	r3, #1
 800ec5a:	9306      	str	r3, [sp, #24]
 800ec5c:	9a06      	ldr	r2, [sp, #24]
 800ec5e:	9b04      	ldr	r3, [sp, #16]
 800ec60:	4313      	orrs	r3, r2
 800ec62:	d102      	bne.n	800ec6a <__ieee754_pow+0x202>
 800ec64:	4632      	mov	r2, r6
 800ec66:	463b      	mov	r3, r7
 800ec68:	e7e6      	b.n	800ec38 <__ieee754_pow+0x1d0>
 800ec6a:	4b19      	ldr	r3, [pc, #100]	; (800ecd0 <__ieee754_pow+0x268>)
 800ec6c:	4598      	cmp	r8, r3
 800ec6e:	f340 80fb 	ble.w	800ee68 <__ieee754_pow+0x400>
 800ec72:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800ec76:	4598      	cmp	r8, r3
 800ec78:	4b13      	ldr	r3, [pc, #76]	; (800ecc8 <__ieee754_pow+0x260>)
 800ec7a:	dd0c      	ble.n	800ec96 <__ieee754_pow+0x22e>
 800ec7c:	429c      	cmp	r4, r3
 800ec7e:	dc0f      	bgt.n	800eca0 <__ieee754_pow+0x238>
 800ec80:	f1b9 0f00 	cmp.w	r9, #0
 800ec84:	da0f      	bge.n	800eca6 <__ieee754_pow+0x23e>
 800ec86:	2000      	movs	r0, #0
 800ec88:	b009      	add	sp, #36	; 0x24
 800ec8a:	ecbd 8b06 	vpop	{d8-d10}
 800ec8e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ec92:	f000 bcf0 	b.w	800f676 <__math_oflow>
 800ec96:	429c      	cmp	r4, r3
 800ec98:	dbf2      	blt.n	800ec80 <__ieee754_pow+0x218>
 800ec9a:	4b0a      	ldr	r3, [pc, #40]	; (800ecc4 <__ieee754_pow+0x25c>)
 800ec9c:	429c      	cmp	r4, r3
 800ec9e:	dd19      	ble.n	800ecd4 <__ieee754_pow+0x26c>
 800eca0:	f1b9 0f00 	cmp.w	r9, #0
 800eca4:	dcef      	bgt.n	800ec86 <__ieee754_pow+0x21e>
 800eca6:	2000      	movs	r0, #0
 800eca8:	b009      	add	sp, #36	; 0x24
 800ecaa:	ecbd 8b06 	vpop	{d8-d10}
 800ecae:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ecb2:	f000 bcd7 	b.w	800f664 <__math_uflow>
 800ecb6:	bf00      	nop
 800ecb8:	fff00000 	.word	0xfff00000
 800ecbc:	7ff00000 	.word	0x7ff00000
 800ecc0:	433fffff 	.word	0x433fffff
 800ecc4:	3ff00000 	.word	0x3ff00000
 800ecc8:	3fefffff 	.word	0x3fefffff
 800eccc:	3fe00000 	.word	0x3fe00000
 800ecd0:	41e00000 	.word	0x41e00000
 800ecd4:	4b60      	ldr	r3, [pc, #384]	; (800ee58 <__ieee754_pow+0x3f0>)
 800ecd6:	2200      	movs	r2, #0
 800ecd8:	f7f1 fad6 	bl	8000288 <__aeabi_dsub>
 800ecdc:	a354      	add	r3, pc, #336	; (adr r3, 800ee30 <__ieee754_pow+0x3c8>)
 800ecde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ece2:	4604      	mov	r4, r0
 800ece4:	460d      	mov	r5, r1
 800ece6:	f7f1 fc87 	bl	80005f8 <__aeabi_dmul>
 800ecea:	a353      	add	r3, pc, #332	; (adr r3, 800ee38 <__ieee754_pow+0x3d0>)
 800ecec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ecf0:	4606      	mov	r6, r0
 800ecf2:	460f      	mov	r7, r1
 800ecf4:	4620      	mov	r0, r4
 800ecf6:	4629      	mov	r1, r5
 800ecf8:	f7f1 fc7e 	bl	80005f8 <__aeabi_dmul>
 800ecfc:	4b57      	ldr	r3, [pc, #348]	; (800ee5c <__ieee754_pow+0x3f4>)
 800ecfe:	4682      	mov	sl, r0
 800ed00:	468b      	mov	fp, r1
 800ed02:	2200      	movs	r2, #0
 800ed04:	4620      	mov	r0, r4
 800ed06:	4629      	mov	r1, r5
 800ed08:	f7f1 fc76 	bl	80005f8 <__aeabi_dmul>
 800ed0c:	4602      	mov	r2, r0
 800ed0e:	460b      	mov	r3, r1
 800ed10:	a14b      	add	r1, pc, #300	; (adr r1, 800ee40 <__ieee754_pow+0x3d8>)
 800ed12:	e9d1 0100 	ldrd	r0, r1, [r1]
 800ed16:	f7f1 fab7 	bl	8000288 <__aeabi_dsub>
 800ed1a:	4622      	mov	r2, r4
 800ed1c:	462b      	mov	r3, r5
 800ed1e:	f7f1 fc6b 	bl	80005f8 <__aeabi_dmul>
 800ed22:	4602      	mov	r2, r0
 800ed24:	460b      	mov	r3, r1
 800ed26:	2000      	movs	r0, #0
 800ed28:	494d      	ldr	r1, [pc, #308]	; (800ee60 <__ieee754_pow+0x3f8>)
 800ed2a:	f7f1 faad 	bl	8000288 <__aeabi_dsub>
 800ed2e:	4622      	mov	r2, r4
 800ed30:	4680      	mov	r8, r0
 800ed32:	4689      	mov	r9, r1
 800ed34:	462b      	mov	r3, r5
 800ed36:	4620      	mov	r0, r4
 800ed38:	4629      	mov	r1, r5
 800ed3a:	f7f1 fc5d 	bl	80005f8 <__aeabi_dmul>
 800ed3e:	4602      	mov	r2, r0
 800ed40:	460b      	mov	r3, r1
 800ed42:	4640      	mov	r0, r8
 800ed44:	4649      	mov	r1, r9
 800ed46:	f7f1 fc57 	bl	80005f8 <__aeabi_dmul>
 800ed4a:	a33f      	add	r3, pc, #252	; (adr r3, 800ee48 <__ieee754_pow+0x3e0>)
 800ed4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ed50:	f7f1 fc52 	bl	80005f8 <__aeabi_dmul>
 800ed54:	4602      	mov	r2, r0
 800ed56:	460b      	mov	r3, r1
 800ed58:	4650      	mov	r0, sl
 800ed5a:	4659      	mov	r1, fp
 800ed5c:	f7f1 fa94 	bl	8000288 <__aeabi_dsub>
 800ed60:	4602      	mov	r2, r0
 800ed62:	460b      	mov	r3, r1
 800ed64:	4680      	mov	r8, r0
 800ed66:	4689      	mov	r9, r1
 800ed68:	4630      	mov	r0, r6
 800ed6a:	4639      	mov	r1, r7
 800ed6c:	f7f1 fa8e 	bl	800028c <__adddf3>
 800ed70:	2000      	movs	r0, #0
 800ed72:	4632      	mov	r2, r6
 800ed74:	463b      	mov	r3, r7
 800ed76:	4604      	mov	r4, r0
 800ed78:	460d      	mov	r5, r1
 800ed7a:	f7f1 fa85 	bl	8000288 <__aeabi_dsub>
 800ed7e:	4602      	mov	r2, r0
 800ed80:	460b      	mov	r3, r1
 800ed82:	4640      	mov	r0, r8
 800ed84:	4649      	mov	r1, r9
 800ed86:	f7f1 fa7f 	bl	8000288 <__aeabi_dsub>
 800ed8a:	9b04      	ldr	r3, [sp, #16]
 800ed8c:	9a06      	ldr	r2, [sp, #24]
 800ed8e:	3b01      	subs	r3, #1
 800ed90:	4313      	orrs	r3, r2
 800ed92:	4682      	mov	sl, r0
 800ed94:	468b      	mov	fp, r1
 800ed96:	f040 81e7 	bne.w	800f168 <__ieee754_pow+0x700>
 800ed9a:	ed9f 7b2d 	vldr	d7, [pc, #180]	; 800ee50 <__ieee754_pow+0x3e8>
 800ed9e:	eeb0 8a47 	vmov.f32	s16, s14
 800eda2:	eef0 8a67 	vmov.f32	s17, s15
 800eda6:	e9dd 6700 	ldrd	r6, r7, [sp]
 800edaa:	2600      	movs	r6, #0
 800edac:	4632      	mov	r2, r6
 800edae:	463b      	mov	r3, r7
 800edb0:	e9dd 0100 	ldrd	r0, r1, [sp]
 800edb4:	f7f1 fa68 	bl	8000288 <__aeabi_dsub>
 800edb8:	4622      	mov	r2, r4
 800edba:	462b      	mov	r3, r5
 800edbc:	f7f1 fc1c 	bl	80005f8 <__aeabi_dmul>
 800edc0:	e9dd 2300 	ldrd	r2, r3, [sp]
 800edc4:	4680      	mov	r8, r0
 800edc6:	4689      	mov	r9, r1
 800edc8:	4650      	mov	r0, sl
 800edca:	4659      	mov	r1, fp
 800edcc:	f7f1 fc14 	bl	80005f8 <__aeabi_dmul>
 800edd0:	4602      	mov	r2, r0
 800edd2:	460b      	mov	r3, r1
 800edd4:	4640      	mov	r0, r8
 800edd6:	4649      	mov	r1, r9
 800edd8:	f7f1 fa58 	bl	800028c <__adddf3>
 800eddc:	4632      	mov	r2, r6
 800edde:	463b      	mov	r3, r7
 800ede0:	4680      	mov	r8, r0
 800ede2:	4689      	mov	r9, r1
 800ede4:	4620      	mov	r0, r4
 800ede6:	4629      	mov	r1, r5
 800ede8:	f7f1 fc06 	bl	80005f8 <__aeabi_dmul>
 800edec:	460b      	mov	r3, r1
 800edee:	4604      	mov	r4, r0
 800edf0:	460d      	mov	r5, r1
 800edf2:	4602      	mov	r2, r0
 800edf4:	4649      	mov	r1, r9
 800edf6:	4640      	mov	r0, r8
 800edf8:	f7f1 fa48 	bl	800028c <__adddf3>
 800edfc:	4b19      	ldr	r3, [pc, #100]	; (800ee64 <__ieee754_pow+0x3fc>)
 800edfe:	4299      	cmp	r1, r3
 800ee00:	ec45 4b19 	vmov	d9, r4, r5
 800ee04:	4606      	mov	r6, r0
 800ee06:	460f      	mov	r7, r1
 800ee08:	468b      	mov	fp, r1
 800ee0a:	f340 82f1 	ble.w	800f3f0 <__ieee754_pow+0x988>
 800ee0e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800ee12:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800ee16:	4303      	orrs	r3, r0
 800ee18:	f000 81e4 	beq.w	800f1e4 <__ieee754_pow+0x77c>
 800ee1c:	ec51 0b18 	vmov	r0, r1, d8
 800ee20:	2200      	movs	r2, #0
 800ee22:	2300      	movs	r3, #0
 800ee24:	f7f1 fe5a 	bl	8000adc <__aeabi_dcmplt>
 800ee28:	3800      	subs	r0, #0
 800ee2a:	bf18      	it	ne
 800ee2c:	2001      	movne	r0, #1
 800ee2e:	e72b      	b.n	800ec88 <__ieee754_pow+0x220>
 800ee30:	60000000 	.word	0x60000000
 800ee34:	3ff71547 	.word	0x3ff71547
 800ee38:	f85ddf44 	.word	0xf85ddf44
 800ee3c:	3e54ae0b 	.word	0x3e54ae0b
 800ee40:	55555555 	.word	0x55555555
 800ee44:	3fd55555 	.word	0x3fd55555
 800ee48:	652b82fe 	.word	0x652b82fe
 800ee4c:	3ff71547 	.word	0x3ff71547
 800ee50:	00000000 	.word	0x00000000
 800ee54:	bff00000 	.word	0xbff00000
 800ee58:	3ff00000 	.word	0x3ff00000
 800ee5c:	3fd00000 	.word	0x3fd00000
 800ee60:	3fe00000 	.word	0x3fe00000
 800ee64:	408fffff 	.word	0x408fffff
 800ee68:	4bd5      	ldr	r3, [pc, #852]	; (800f1c0 <__ieee754_pow+0x758>)
 800ee6a:	402b      	ands	r3, r5
 800ee6c:	2200      	movs	r2, #0
 800ee6e:	b92b      	cbnz	r3, 800ee7c <__ieee754_pow+0x414>
 800ee70:	4bd4      	ldr	r3, [pc, #848]	; (800f1c4 <__ieee754_pow+0x75c>)
 800ee72:	f7f1 fbc1 	bl	80005f8 <__aeabi_dmul>
 800ee76:	f06f 0234 	mvn.w	r2, #52	; 0x34
 800ee7a:	460c      	mov	r4, r1
 800ee7c:	1523      	asrs	r3, r4, #20
 800ee7e:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800ee82:	4413      	add	r3, r2
 800ee84:	9305      	str	r3, [sp, #20]
 800ee86:	4bd0      	ldr	r3, [pc, #832]	; (800f1c8 <__ieee754_pow+0x760>)
 800ee88:	f3c4 0413 	ubfx	r4, r4, #0, #20
 800ee8c:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800ee90:	429c      	cmp	r4, r3
 800ee92:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 800ee96:	dd08      	ble.n	800eeaa <__ieee754_pow+0x442>
 800ee98:	4bcc      	ldr	r3, [pc, #816]	; (800f1cc <__ieee754_pow+0x764>)
 800ee9a:	429c      	cmp	r4, r3
 800ee9c:	f340 8162 	ble.w	800f164 <__ieee754_pow+0x6fc>
 800eea0:	9b05      	ldr	r3, [sp, #20]
 800eea2:	3301      	adds	r3, #1
 800eea4:	9305      	str	r3, [sp, #20]
 800eea6:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 800eeaa:	2400      	movs	r4, #0
 800eeac:	00e3      	lsls	r3, r4, #3
 800eeae:	9307      	str	r3, [sp, #28]
 800eeb0:	4bc7      	ldr	r3, [pc, #796]	; (800f1d0 <__ieee754_pow+0x768>)
 800eeb2:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800eeb6:	ed93 7b00 	vldr	d7, [r3]
 800eeba:	4629      	mov	r1, r5
 800eebc:	ec53 2b17 	vmov	r2, r3, d7
 800eec0:	eeb0 9a47 	vmov.f32	s18, s14
 800eec4:	eef0 9a67 	vmov.f32	s19, s15
 800eec8:	4682      	mov	sl, r0
 800eeca:	f7f1 f9dd 	bl	8000288 <__aeabi_dsub>
 800eece:	4652      	mov	r2, sl
 800eed0:	4606      	mov	r6, r0
 800eed2:	460f      	mov	r7, r1
 800eed4:	462b      	mov	r3, r5
 800eed6:	ec51 0b19 	vmov	r0, r1, d9
 800eeda:	f7f1 f9d7 	bl	800028c <__adddf3>
 800eede:	4602      	mov	r2, r0
 800eee0:	460b      	mov	r3, r1
 800eee2:	2000      	movs	r0, #0
 800eee4:	49bb      	ldr	r1, [pc, #748]	; (800f1d4 <__ieee754_pow+0x76c>)
 800eee6:	f7f1 fcb1 	bl	800084c <__aeabi_ddiv>
 800eeea:	ec41 0b1a 	vmov	d10, r0, r1
 800eeee:	4602      	mov	r2, r0
 800eef0:	460b      	mov	r3, r1
 800eef2:	4630      	mov	r0, r6
 800eef4:	4639      	mov	r1, r7
 800eef6:	f7f1 fb7f 	bl	80005f8 <__aeabi_dmul>
 800eefa:	2300      	movs	r3, #0
 800eefc:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800ef00:	9302      	str	r3, [sp, #8]
 800ef02:	e9dd 8902 	ldrd	r8, r9, [sp, #8]
 800ef06:	46ab      	mov	fp, r5
 800ef08:	106d      	asrs	r5, r5, #1
 800ef0a:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 800ef0e:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800ef12:	ec41 0b18 	vmov	d8, r0, r1
 800ef16:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 800ef1a:	2200      	movs	r2, #0
 800ef1c:	4640      	mov	r0, r8
 800ef1e:	4649      	mov	r1, r9
 800ef20:	4614      	mov	r4, r2
 800ef22:	461d      	mov	r5, r3
 800ef24:	f7f1 fb68 	bl	80005f8 <__aeabi_dmul>
 800ef28:	4602      	mov	r2, r0
 800ef2a:	460b      	mov	r3, r1
 800ef2c:	4630      	mov	r0, r6
 800ef2e:	4639      	mov	r1, r7
 800ef30:	f7f1 f9aa 	bl	8000288 <__aeabi_dsub>
 800ef34:	ec53 2b19 	vmov	r2, r3, d9
 800ef38:	4606      	mov	r6, r0
 800ef3a:	460f      	mov	r7, r1
 800ef3c:	4620      	mov	r0, r4
 800ef3e:	4629      	mov	r1, r5
 800ef40:	f7f1 f9a2 	bl	8000288 <__aeabi_dsub>
 800ef44:	4602      	mov	r2, r0
 800ef46:	460b      	mov	r3, r1
 800ef48:	4650      	mov	r0, sl
 800ef4a:	4659      	mov	r1, fp
 800ef4c:	f7f1 f99c 	bl	8000288 <__aeabi_dsub>
 800ef50:	4642      	mov	r2, r8
 800ef52:	464b      	mov	r3, r9
 800ef54:	f7f1 fb50 	bl	80005f8 <__aeabi_dmul>
 800ef58:	4602      	mov	r2, r0
 800ef5a:	460b      	mov	r3, r1
 800ef5c:	4630      	mov	r0, r6
 800ef5e:	4639      	mov	r1, r7
 800ef60:	f7f1 f992 	bl	8000288 <__aeabi_dsub>
 800ef64:	ec53 2b1a 	vmov	r2, r3, d10
 800ef68:	f7f1 fb46 	bl	80005f8 <__aeabi_dmul>
 800ef6c:	ec53 2b18 	vmov	r2, r3, d8
 800ef70:	ec41 0b19 	vmov	d9, r0, r1
 800ef74:	ec51 0b18 	vmov	r0, r1, d8
 800ef78:	f7f1 fb3e 	bl	80005f8 <__aeabi_dmul>
 800ef7c:	a37c      	add	r3, pc, #496	; (adr r3, 800f170 <__ieee754_pow+0x708>)
 800ef7e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef82:	4604      	mov	r4, r0
 800ef84:	460d      	mov	r5, r1
 800ef86:	f7f1 fb37 	bl	80005f8 <__aeabi_dmul>
 800ef8a:	a37b      	add	r3, pc, #492	; (adr r3, 800f178 <__ieee754_pow+0x710>)
 800ef8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ef90:	f7f1 f97c 	bl	800028c <__adddf3>
 800ef94:	4622      	mov	r2, r4
 800ef96:	462b      	mov	r3, r5
 800ef98:	f7f1 fb2e 	bl	80005f8 <__aeabi_dmul>
 800ef9c:	a378      	add	r3, pc, #480	; (adr r3, 800f180 <__ieee754_pow+0x718>)
 800ef9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efa2:	f7f1 f973 	bl	800028c <__adddf3>
 800efa6:	4622      	mov	r2, r4
 800efa8:	462b      	mov	r3, r5
 800efaa:	f7f1 fb25 	bl	80005f8 <__aeabi_dmul>
 800efae:	a376      	add	r3, pc, #472	; (adr r3, 800f188 <__ieee754_pow+0x720>)
 800efb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efb4:	f7f1 f96a 	bl	800028c <__adddf3>
 800efb8:	4622      	mov	r2, r4
 800efba:	462b      	mov	r3, r5
 800efbc:	f7f1 fb1c 	bl	80005f8 <__aeabi_dmul>
 800efc0:	a373      	add	r3, pc, #460	; (adr r3, 800f190 <__ieee754_pow+0x728>)
 800efc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efc6:	f7f1 f961 	bl	800028c <__adddf3>
 800efca:	4622      	mov	r2, r4
 800efcc:	462b      	mov	r3, r5
 800efce:	f7f1 fb13 	bl	80005f8 <__aeabi_dmul>
 800efd2:	a371      	add	r3, pc, #452	; (adr r3, 800f198 <__ieee754_pow+0x730>)
 800efd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800efd8:	f7f1 f958 	bl	800028c <__adddf3>
 800efdc:	4622      	mov	r2, r4
 800efde:	4606      	mov	r6, r0
 800efe0:	460f      	mov	r7, r1
 800efe2:	462b      	mov	r3, r5
 800efe4:	4620      	mov	r0, r4
 800efe6:	4629      	mov	r1, r5
 800efe8:	f7f1 fb06 	bl	80005f8 <__aeabi_dmul>
 800efec:	4602      	mov	r2, r0
 800efee:	460b      	mov	r3, r1
 800eff0:	4630      	mov	r0, r6
 800eff2:	4639      	mov	r1, r7
 800eff4:	f7f1 fb00 	bl	80005f8 <__aeabi_dmul>
 800eff8:	4642      	mov	r2, r8
 800effa:	4604      	mov	r4, r0
 800effc:	460d      	mov	r5, r1
 800effe:	464b      	mov	r3, r9
 800f000:	ec51 0b18 	vmov	r0, r1, d8
 800f004:	f7f1 f942 	bl	800028c <__adddf3>
 800f008:	ec53 2b19 	vmov	r2, r3, d9
 800f00c:	f7f1 faf4 	bl	80005f8 <__aeabi_dmul>
 800f010:	4622      	mov	r2, r4
 800f012:	462b      	mov	r3, r5
 800f014:	f7f1 f93a 	bl	800028c <__adddf3>
 800f018:	4642      	mov	r2, r8
 800f01a:	4682      	mov	sl, r0
 800f01c:	468b      	mov	fp, r1
 800f01e:	464b      	mov	r3, r9
 800f020:	4640      	mov	r0, r8
 800f022:	4649      	mov	r1, r9
 800f024:	f7f1 fae8 	bl	80005f8 <__aeabi_dmul>
 800f028:	4b6b      	ldr	r3, [pc, #428]	; (800f1d8 <__ieee754_pow+0x770>)
 800f02a:	2200      	movs	r2, #0
 800f02c:	4606      	mov	r6, r0
 800f02e:	460f      	mov	r7, r1
 800f030:	f7f1 f92c 	bl	800028c <__adddf3>
 800f034:	4652      	mov	r2, sl
 800f036:	465b      	mov	r3, fp
 800f038:	f7f1 f928 	bl	800028c <__adddf3>
 800f03c:	2000      	movs	r0, #0
 800f03e:	4604      	mov	r4, r0
 800f040:	460d      	mov	r5, r1
 800f042:	4602      	mov	r2, r0
 800f044:	460b      	mov	r3, r1
 800f046:	4640      	mov	r0, r8
 800f048:	4649      	mov	r1, r9
 800f04a:	f7f1 fad5 	bl	80005f8 <__aeabi_dmul>
 800f04e:	4b62      	ldr	r3, [pc, #392]	; (800f1d8 <__ieee754_pow+0x770>)
 800f050:	4680      	mov	r8, r0
 800f052:	4689      	mov	r9, r1
 800f054:	2200      	movs	r2, #0
 800f056:	4620      	mov	r0, r4
 800f058:	4629      	mov	r1, r5
 800f05a:	f7f1 f915 	bl	8000288 <__aeabi_dsub>
 800f05e:	4632      	mov	r2, r6
 800f060:	463b      	mov	r3, r7
 800f062:	f7f1 f911 	bl	8000288 <__aeabi_dsub>
 800f066:	4602      	mov	r2, r0
 800f068:	460b      	mov	r3, r1
 800f06a:	4650      	mov	r0, sl
 800f06c:	4659      	mov	r1, fp
 800f06e:	f7f1 f90b 	bl	8000288 <__aeabi_dsub>
 800f072:	ec53 2b18 	vmov	r2, r3, d8
 800f076:	f7f1 fabf 	bl	80005f8 <__aeabi_dmul>
 800f07a:	4622      	mov	r2, r4
 800f07c:	4606      	mov	r6, r0
 800f07e:	460f      	mov	r7, r1
 800f080:	462b      	mov	r3, r5
 800f082:	ec51 0b19 	vmov	r0, r1, d9
 800f086:	f7f1 fab7 	bl	80005f8 <__aeabi_dmul>
 800f08a:	4602      	mov	r2, r0
 800f08c:	460b      	mov	r3, r1
 800f08e:	4630      	mov	r0, r6
 800f090:	4639      	mov	r1, r7
 800f092:	f7f1 f8fb 	bl	800028c <__adddf3>
 800f096:	4606      	mov	r6, r0
 800f098:	460f      	mov	r7, r1
 800f09a:	4602      	mov	r2, r0
 800f09c:	460b      	mov	r3, r1
 800f09e:	4640      	mov	r0, r8
 800f0a0:	4649      	mov	r1, r9
 800f0a2:	f7f1 f8f3 	bl	800028c <__adddf3>
 800f0a6:	a33e      	add	r3, pc, #248	; (adr r3, 800f1a0 <__ieee754_pow+0x738>)
 800f0a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0ac:	2000      	movs	r0, #0
 800f0ae:	4604      	mov	r4, r0
 800f0b0:	460d      	mov	r5, r1
 800f0b2:	f7f1 faa1 	bl	80005f8 <__aeabi_dmul>
 800f0b6:	4642      	mov	r2, r8
 800f0b8:	ec41 0b18 	vmov	d8, r0, r1
 800f0bc:	464b      	mov	r3, r9
 800f0be:	4620      	mov	r0, r4
 800f0c0:	4629      	mov	r1, r5
 800f0c2:	f7f1 f8e1 	bl	8000288 <__aeabi_dsub>
 800f0c6:	4602      	mov	r2, r0
 800f0c8:	460b      	mov	r3, r1
 800f0ca:	4630      	mov	r0, r6
 800f0cc:	4639      	mov	r1, r7
 800f0ce:	f7f1 f8db 	bl	8000288 <__aeabi_dsub>
 800f0d2:	a335      	add	r3, pc, #212	; (adr r3, 800f1a8 <__ieee754_pow+0x740>)
 800f0d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0d8:	f7f1 fa8e 	bl	80005f8 <__aeabi_dmul>
 800f0dc:	a334      	add	r3, pc, #208	; (adr r3, 800f1b0 <__ieee754_pow+0x748>)
 800f0de:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f0e2:	4606      	mov	r6, r0
 800f0e4:	460f      	mov	r7, r1
 800f0e6:	4620      	mov	r0, r4
 800f0e8:	4629      	mov	r1, r5
 800f0ea:	f7f1 fa85 	bl	80005f8 <__aeabi_dmul>
 800f0ee:	4602      	mov	r2, r0
 800f0f0:	460b      	mov	r3, r1
 800f0f2:	4630      	mov	r0, r6
 800f0f4:	4639      	mov	r1, r7
 800f0f6:	f7f1 f8c9 	bl	800028c <__adddf3>
 800f0fa:	9a07      	ldr	r2, [sp, #28]
 800f0fc:	4b37      	ldr	r3, [pc, #220]	; (800f1dc <__ieee754_pow+0x774>)
 800f0fe:	4413      	add	r3, r2
 800f100:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f104:	f7f1 f8c2 	bl	800028c <__adddf3>
 800f108:	4682      	mov	sl, r0
 800f10a:	9805      	ldr	r0, [sp, #20]
 800f10c:	468b      	mov	fp, r1
 800f10e:	f7f1 fa09 	bl	8000524 <__aeabi_i2d>
 800f112:	9a07      	ldr	r2, [sp, #28]
 800f114:	4b32      	ldr	r3, [pc, #200]	; (800f1e0 <__ieee754_pow+0x778>)
 800f116:	4413      	add	r3, r2
 800f118:	e9d3 8900 	ldrd	r8, r9, [r3]
 800f11c:	4606      	mov	r6, r0
 800f11e:	460f      	mov	r7, r1
 800f120:	4652      	mov	r2, sl
 800f122:	465b      	mov	r3, fp
 800f124:	ec51 0b18 	vmov	r0, r1, d8
 800f128:	f7f1 f8b0 	bl	800028c <__adddf3>
 800f12c:	4642      	mov	r2, r8
 800f12e:	464b      	mov	r3, r9
 800f130:	f7f1 f8ac 	bl	800028c <__adddf3>
 800f134:	4632      	mov	r2, r6
 800f136:	463b      	mov	r3, r7
 800f138:	f7f1 f8a8 	bl	800028c <__adddf3>
 800f13c:	2000      	movs	r0, #0
 800f13e:	4632      	mov	r2, r6
 800f140:	463b      	mov	r3, r7
 800f142:	4604      	mov	r4, r0
 800f144:	460d      	mov	r5, r1
 800f146:	f7f1 f89f 	bl	8000288 <__aeabi_dsub>
 800f14a:	4642      	mov	r2, r8
 800f14c:	464b      	mov	r3, r9
 800f14e:	f7f1 f89b 	bl	8000288 <__aeabi_dsub>
 800f152:	ec53 2b18 	vmov	r2, r3, d8
 800f156:	f7f1 f897 	bl	8000288 <__aeabi_dsub>
 800f15a:	4602      	mov	r2, r0
 800f15c:	460b      	mov	r3, r1
 800f15e:	4650      	mov	r0, sl
 800f160:	4659      	mov	r1, fp
 800f162:	e610      	b.n	800ed86 <__ieee754_pow+0x31e>
 800f164:	2401      	movs	r4, #1
 800f166:	e6a1      	b.n	800eeac <__ieee754_pow+0x444>
 800f168:	ed9f 7b13 	vldr	d7, [pc, #76]	; 800f1b8 <__ieee754_pow+0x750>
 800f16c:	e617      	b.n	800ed9e <__ieee754_pow+0x336>
 800f16e:	bf00      	nop
 800f170:	4a454eef 	.word	0x4a454eef
 800f174:	3fca7e28 	.word	0x3fca7e28
 800f178:	93c9db65 	.word	0x93c9db65
 800f17c:	3fcd864a 	.word	0x3fcd864a
 800f180:	a91d4101 	.word	0xa91d4101
 800f184:	3fd17460 	.word	0x3fd17460
 800f188:	518f264d 	.word	0x518f264d
 800f18c:	3fd55555 	.word	0x3fd55555
 800f190:	db6fabff 	.word	0xdb6fabff
 800f194:	3fdb6db6 	.word	0x3fdb6db6
 800f198:	33333303 	.word	0x33333303
 800f19c:	3fe33333 	.word	0x3fe33333
 800f1a0:	e0000000 	.word	0xe0000000
 800f1a4:	3feec709 	.word	0x3feec709
 800f1a8:	dc3a03fd 	.word	0xdc3a03fd
 800f1ac:	3feec709 	.word	0x3feec709
 800f1b0:	145b01f5 	.word	0x145b01f5
 800f1b4:	be3e2fe0 	.word	0xbe3e2fe0
 800f1b8:	00000000 	.word	0x00000000
 800f1bc:	3ff00000 	.word	0x3ff00000
 800f1c0:	7ff00000 	.word	0x7ff00000
 800f1c4:	43400000 	.word	0x43400000
 800f1c8:	0003988e 	.word	0x0003988e
 800f1cc:	000bb679 	.word	0x000bb679
 800f1d0:	0800fea8 	.word	0x0800fea8
 800f1d4:	3ff00000 	.word	0x3ff00000
 800f1d8:	40080000 	.word	0x40080000
 800f1dc:	0800fec8 	.word	0x0800fec8
 800f1e0:	0800feb8 	.word	0x0800feb8
 800f1e4:	a3b5      	add	r3, pc, #724	; (adr r3, 800f4bc <__ieee754_pow+0xa54>)
 800f1e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f1ea:	4640      	mov	r0, r8
 800f1ec:	4649      	mov	r1, r9
 800f1ee:	f7f1 f84d 	bl	800028c <__adddf3>
 800f1f2:	4622      	mov	r2, r4
 800f1f4:	ec41 0b1a 	vmov	d10, r0, r1
 800f1f8:	462b      	mov	r3, r5
 800f1fa:	4630      	mov	r0, r6
 800f1fc:	4639      	mov	r1, r7
 800f1fe:	f7f1 f843 	bl	8000288 <__aeabi_dsub>
 800f202:	4602      	mov	r2, r0
 800f204:	460b      	mov	r3, r1
 800f206:	ec51 0b1a 	vmov	r0, r1, d10
 800f20a:	f7f1 fc85 	bl	8000b18 <__aeabi_dcmpgt>
 800f20e:	2800      	cmp	r0, #0
 800f210:	f47f ae04 	bne.w	800ee1c <__ieee754_pow+0x3b4>
 800f214:	4aa4      	ldr	r2, [pc, #656]	; (800f4a8 <__ieee754_pow+0xa40>)
 800f216:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800f21a:	4293      	cmp	r3, r2
 800f21c:	f340 8108 	ble.w	800f430 <__ieee754_pow+0x9c8>
 800f220:	151b      	asrs	r3, r3, #20
 800f222:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800f226:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800f22a:	fa4a f303 	asr.w	r3, sl, r3
 800f22e:	445b      	add	r3, fp
 800f230:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800f234:	4e9d      	ldr	r6, [pc, #628]	; (800f4ac <__ieee754_pow+0xa44>)
 800f236:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800f23a:	4116      	asrs	r6, r2
 800f23c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 800f240:	2000      	movs	r0, #0
 800f242:	ea23 0106 	bic.w	r1, r3, r6
 800f246:	f1c2 0214 	rsb	r2, r2, #20
 800f24a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800f24e:	fa4a fa02 	asr.w	sl, sl, r2
 800f252:	f1bb 0f00 	cmp.w	fp, #0
 800f256:	4602      	mov	r2, r0
 800f258:	460b      	mov	r3, r1
 800f25a:	4620      	mov	r0, r4
 800f25c:	4629      	mov	r1, r5
 800f25e:	bfb8      	it	lt
 800f260:	f1ca 0a00 	rsblt	sl, sl, #0
 800f264:	f7f1 f810 	bl	8000288 <__aeabi_dsub>
 800f268:	ec41 0b19 	vmov	d9, r0, r1
 800f26c:	4642      	mov	r2, r8
 800f26e:	464b      	mov	r3, r9
 800f270:	ec51 0b19 	vmov	r0, r1, d9
 800f274:	f7f1 f80a 	bl	800028c <__adddf3>
 800f278:	a37b      	add	r3, pc, #492	; (adr r3, 800f468 <__ieee754_pow+0xa00>)
 800f27a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f27e:	2000      	movs	r0, #0
 800f280:	4604      	mov	r4, r0
 800f282:	460d      	mov	r5, r1
 800f284:	f7f1 f9b8 	bl	80005f8 <__aeabi_dmul>
 800f288:	ec53 2b19 	vmov	r2, r3, d9
 800f28c:	4606      	mov	r6, r0
 800f28e:	460f      	mov	r7, r1
 800f290:	4620      	mov	r0, r4
 800f292:	4629      	mov	r1, r5
 800f294:	f7f0 fff8 	bl	8000288 <__aeabi_dsub>
 800f298:	4602      	mov	r2, r0
 800f29a:	460b      	mov	r3, r1
 800f29c:	4640      	mov	r0, r8
 800f29e:	4649      	mov	r1, r9
 800f2a0:	f7f0 fff2 	bl	8000288 <__aeabi_dsub>
 800f2a4:	a372      	add	r3, pc, #456	; (adr r3, 800f470 <__ieee754_pow+0xa08>)
 800f2a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2aa:	f7f1 f9a5 	bl	80005f8 <__aeabi_dmul>
 800f2ae:	a372      	add	r3, pc, #456	; (adr r3, 800f478 <__ieee754_pow+0xa10>)
 800f2b0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f2b4:	4680      	mov	r8, r0
 800f2b6:	4689      	mov	r9, r1
 800f2b8:	4620      	mov	r0, r4
 800f2ba:	4629      	mov	r1, r5
 800f2bc:	f7f1 f99c 	bl	80005f8 <__aeabi_dmul>
 800f2c0:	4602      	mov	r2, r0
 800f2c2:	460b      	mov	r3, r1
 800f2c4:	4640      	mov	r0, r8
 800f2c6:	4649      	mov	r1, r9
 800f2c8:	f7f0 ffe0 	bl	800028c <__adddf3>
 800f2cc:	4604      	mov	r4, r0
 800f2ce:	460d      	mov	r5, r1
 800f2d0:	4602      	mov	r2, r0
 800f2d2:	460b      	mov	r3, r1
 800f2d4:	4630      	mov	r0, r6
 800f2d6:	4639      	mov	r1, r7
 800f2d8:	f7f0 ffd8 	bl	800028c <__adddf3>
 800f2dc:	4632      	mov	r2, r6
 800f2de:	463b      	mov	r3, r7
 800f2e0:	4680      	mov	r8, r0
 800f2e2:	4689      	mov	r9, r1
 800f2e4:	f7f0 ffd0 	bl	8000288 <__aeabi_dsub>
 800f2e8:	4602      	mov	r2, r0
 800f2ea:	460b      	mov	r3, r1
 800f2ec:	4620      	mov	r0, r4
 800f2ee:	4629      	mov	r1, r5
 800f2f0:	f7f0 ffca 	bl	8000288 <__aeabi_dsub>
 800f2f4:	4642      	mov	r2, r8
 800f2f6:	4606      	mov	r6, r0
 800f2f8:	460f      	mov	r7, r1
 800f2fa:	464b      	mov	r3, r9
 800f2fc:	4640      	mov	r0, r8
 800f2fe:	4649      	mov	r1, r9
 800f300:	f7f1 f97a 	bl	80005f8 <__aeabi_dmul>
 800f304:	a35e      	add	r3, pc, #376	; (adr r3, 800f480 <__ieee754_pow+0xa18>)
 800f306:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f30a:	4604      	mov	r4, r0
 800f30c:	460d      	mov	r5, r1
 800f30e:	f7f1 f973 	bl	80005f8 <__aeabi_dmul>
 800f312:	a35d      	add	r3, pc, #372	; (adr r3, 800f488 <__ieee754_pow+0xa20>)
 800f314:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f318:	f7f0 ffb6 	bl	8000288 <__aeabi_dsub>
 800f31c:	4622      	mov	r2, r4
 800f31e:	462b      	mov	r3, r5
 800f320:	f7f1 f96a 	bl	80005f8 <__aeabi_dmul>
 800f324:	a35a      	add	r3, pc, #360	; (adr r3, 800f490 <__ieee754_pow+0xa28>)
 800f326:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f32a:	f7f0 ffaf 	bl	800028c <__adddf3>
 800f32e:	4622      	mov	r2, r4
 800f330:	462b      	mov	r3, r5
 800f332:	f7f1 f961 	bl	80005f8 <__aeabi_dmul>
 800f336:	a358      	add	r3, pc, #352	; (adr r3, 800f498 <__ieee754_pow+0xa30>)
 800f338:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f33c:	f7f0 ffa4 	bl	8000288 <__aeabi_dsub>
 800f340:	4622      	mov	r2, r4
 800f342:	462b      	mov	r3, r5
 800f344:	f7f1 f958 	bl	80005f8 <__aeabi_dmul>
 800f348:	a355      	add	r3, pc, #340	; (adr r3, 800f4a0 <__ieee754_pow+0xa38>)
 800f34a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f34e:	f7f0 ff9d 	bl	800028c <__adddf3>
 800f352:	4622      	mov	r2, r4
 800f354:	462b      	mov	r3, r5
 800f356:	f7f1 f94f 	bl	80005f8 <__aeabi_dmul>
 800f35a:	4602      	mov	r2, r0
 800f35c:	460b      	mov	r3, r1
 800f35e:	4640      	mov	r0, r8
 800f360:	4649      	mov	r1, r9
 800f362:	f7f0 ff91 	bl	8000288 <__aeabi_dsub>
 800f366:	4604      	mov	r4, r0
 800f368:	460d      	mov	r5, r1
 800f36a:	4602      	mov	r2, r0
 800f36c:	460b      	mov	r3, r1
 800f36e:	4640      	mov	r0, r8
 800f370:	4649      	mov	r1, r9
 800f372:	f7f1 f941 	bl	80005f8 <__aeabi_dmul>
 800f376:	2200      	movs	r2, #0
 800f378:	ec41 0b19 	vmov	d9, r0, r1
 800f37c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800f380:	4620      	mov	r0, r4
 800f382:	4629      	mov	r1, r5
 800f384:	f7f0 ff80 	bl	8000288 <__aeabi_dsub>
 800f388:	4602      	mov	r2, r0
 800f38a:	460b      	mov	r3, r1
 800f38c:	ec51 0b19 	vmov	r0, r1, d9
 800f390:	f7f1 fa5c 	bl	800084c <__aeabi_ddiv>
 800f394:	4632      	mov	r2, r6
 800f396:	4604      	mov	r4, r0
 800f398:	460d      	mov	r5, r1
 800f39a:	463b      	mov	r3, r7
 800f39c:	4640      	mov	r0, r8
 800f39e:	4649      	mov	r1, r9
 800f3a0:	f7f1 f92a 	bl	80005f8 <__aeabi_dmul>
 800f3a4:	4632      	mov	r2, r6
 800f3a6:	463b      	mov	r3, r7
 800f3a8:	f7f0 ff70 	bl	800028c <__adddf3>
 800f3ac:	4602      	mov	r2, r0
 800f3ae:	460b      	mov	r3, r1
 800f3b0:	4620      	mov	r0, r4
 800f3b2:	4629      	mov	r1, r5
 800f3b4:	f7f0 ff68 	bl	8000288 <__aeabi_dsub>
 800f3b8:	4642      	mov	r2, r8
 800f3ba:	464b      	mov	r3, r9
 800f3bc:	f7f0 ff64 	bl	8000288 <__aeabi_dsub>
 800f3c0:	460b      	mov	r3, r1
 800f3c2:	4602      	mov	r2, r0
 800f3c4:	493a      	ldr	r1, [pc, #232]	; (800f4b0 <__ieee754_pow+0xa48>)
 800f3c6:	2000      	movs	r0, #0
 800f3c8:	f7f0 ff5e 	bl	8000288 <__aeabi_dsub>
 800f3cc:	ec41 0b10 	vmov	d0, r0, r1
 800f3d0:	ee10 3a90 	vmov	r3, s1
 800f3d4:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 800f3d8:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 800f3dc:	da2b      	bge.n	800f436 <__ieee754_pow+0x9ce>
 800f3de:	4650      	mov	r0, sl
 800f3e0:	f000 f966 	bl	800f6b0 <scalbn>
 800f3e4:	ec51 0b10 	vmov	r0, r1, d0
 800f3e8:	ec53 2b18 	vmov	r2, r3, d8
 800f3ec:	f7ff bbed 	b.w	800ebca <__ieee754_pow+0x162>
 800f3f0:	4b30      	ldr	r3, [pc, #192]	; (800f4b4 <__ieee754_pow+0xa4c>)
 800f3f2:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 800f3f6:	429e      	cmp	r6, r3
 800f3f8:	f77f af0c 	ble.w	800f214 <__ieee754_pow+0x7ac>
 800f3fc:	4b2e      	ldr	r3, [pc, #184]	; (800f4b8 <__ieee754_pow+0xa50>)
 800f3fe:	440b      	add	r3, r1
 800f400:	4303      	orrs	r3, r0
 800f402:	d009      	beq.n	800f418 <__ieee754_pow+0x9b0>
 800f404:	ec51 0b18 	vmov	r0, r1, d8
 800f408:	2200      	movs	r2, #0
 800f40a:	2300      	movs	r3, #0
 800f40c:	f7f1 fb66 	bl	8000adc <__aeabi_dcmplt>
 800f410:	3800      	subs	r0, #0
 800f412:	bf18      	it	ne
 800f414:	2001      	movne	r0, #1
 800f416:	e447      	b.n	800eca8 <__ieee754_pow+0x240>
 800f418:	4622      	mov	r2, r4
 800f41a:	462b      	mov	r3, r5
 800f41c:	f7f0 ff34 	bl	8000288 <__aeabi_dsub>
 800f420:	4642      	mov	r2, r8
 800f422:	464b      	mov	r3, r9
 800f424:	f7f1 fb6e 	bl	8000b04 <__aeabi_dcmpge>
 800f428:	2800      	cmp	r0, #0
 800f42a:	f43f aef3 	beq.w	800f214 <__ieee754_pow+0x7ac>
 800f42e:	e7e9      	b.n	800f404 <__ieee754_pow+0x99c>
 800f430:	f04f 0a00 	mov.w	sl, #0
 800f434:	e71a      	b.n	800f26c <__ieee754_pow+0x804>
 800f436:	ec51 0b10 	vmov	r0, r1, d0
 800f43a:	4619      	mov	r1, r3
 800f43c:	e7d4      	b.n	800f3e8 <__ieee754_pow+0x980>
 800f43e:	491c      	ldr	r1, [pc, #112]	; (800f4b0 <__ieee754_pow+0xa48>)
 800f440:	2000      	movs	r0, #0
 800f442:	f7ff bb30 	b.w	800eaa6 <__ieee754_pow+0x3e>
 800f446:	2000      	movs	r0, #0
 800f448:	2100      	movs	r1, #0
 800f44a:	f7ff bb2c 	b.w	800eaa6 <__ieee754_pow+0x3e>
 800f44e:	4630      	mov	r0, r6
 800f450:	4639      	mov	r1, r7
 800f452:	f7ff bb28 	b.w	800eaa6 <__ieee754_pow+0x3e>
 800f456:	9204      	str	r2, [sp, #16]
 800f458:	f7ff bb7a 	b.w	800eb50 <__ieee754_pow+0xe8>
 800f45c:	2300      	movs	r3, #0
 800f45e:	f7ff bb64 	b.w	800eb2a <__ieee754_pow+0xc2>
 800f462:	bf00      	nop
 800f464:	f3af 8000 	nop.w
 800f468:	00000000 	.word	0x00000000
 800f46c:	3fe62e43 	.word	0x3fe62e43
 800f470:	fefa39ef 	.word	0xfefa39ef
 800f474:	3fe62e42 	.word	0x3fe62e42
 800f478:	0ca86c39 	.word	0x0ca86c39
 800f47c:	be205c61 	.word	0xbe205c61
 800f480:	72bea4d0 	.word	0x72bea4d0
 800f484:	3e663769 	.word	0x3e663769
 800f488:	c5d26bf1 	.word	0xc5d26bf1
 800f48c:	3ebbbd41 	.word	0x3ebbbd41
 800f490:	af25de2c 	.word	0xaf25de2c
 800f494:	3f11566a 	.word	0x3f11566a
 800f498:	16bebd93 	.word	0x16bebd93
 800f49c:	3f66c16c 	.word	0x3f66c16c
 800f4a0:	5555553e 	.word	0x5555553e
 800f4a4:	3fc55555 	.word	0x3fc55555
 800f4a8:	3fe00000 	.word	0x3fe00000
 800f4ac:	000fffff 	.word	0x000fffff
 800f4b0:	3ff00000 	.word	0x3ff00000
 800f4b4:	4090cbff 	.word	0x4090cbff
 800f4b8:	3f6f3400 	.word	0x3f6f3400
 800f4bc:	652b82fe 	.word	0x652b82fe
 800f4c0:	3c971547 	.word	0x3c971547

0800f4c4 <__ieee754_sqrt>:
 800f4c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800f4c8:	ec55 4b10 	vmov	r4, r5, d0
 800f4cc:	4e55      	ldr	r6, [pc, #340]	; (800f624 <__ieee754_sqrt+0x160>)
 800f4ce:	43ae      	bics	r6, r5
 800f4d0:	ee10 0a10 	vmov	r0, s0
 800f4d4:	ee10 3a10 	vmov	r3, s0
 800f4d8:	462a      	mov	r2, r5
 800f4da:	4629      	mov	r1, r5
 800f4dc:	d110      	bne.n	800f500 <__ieee754_sqrt+0x3c>
 800f4de:	ee10 2a10 	vmov	r2, s0
 800f4e2:	462b      	mov	r3, r5
 800f4e4:	f7f1 f888 	bl	80005f8 <__aeabi_dmul>
 800f4e8:	4602      	mov	r2, r0
 800f4ea:	460b      	mov	r3, r1
 800f4ec:	4620      	mov	r0, r4
 800f4ee:	4629      	mov	r1, r5
 800f4f0:	f7f0 fecc 	bl	800028c <__adddf3>
 800f4f4:	4604      	mov	r4, r0
 800f4f6:	460d      	mov	r5, r1
 800f4f8:	ec45 4b10 	vmov	d0, r4, r5
 800f4fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800f500:	2d00      	cmp	r5, #0
 800f502:	dc10      	bgt.n	800f526 <__ieee754_sqrt+0x62>
 800f504:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800f508:	4330      	orrs	r0, r6
 800f50a:	d0f5      	beq.n	800f4f8 <__ieee754_sqrt+0x34>
 800f50c:	b15d      	cbz	r5, 800f526 <__ieee754_sqrt+0x62>
 800f50e:	ee10 2a10 	vmov	r2, s0
 800f512:	462b      	mov	r3, r5
 800f514:	ee10 0a10 	vmov	r0, s0
 800f518:	f7f0 feb6 	bl	8000288 <__aeabi_dsub>
 800f51c:	4602      	mov	r2, r0
 800f51e:	460b      	mov	r3, r1
 800f520:	f7f1 f994 	bl	800084c <__aeabi_ddiv>
 800f524:	e7e6      	b.n	800f4f4 <__ieee754_sqrt+0x30>
 800f526:	1512      	asrs	r2, r2, #20
 800f528:	d074      	beq.n	800f614 <__ieee754_sqrt+0x150>
 800f52a:	07d4      	lsls	r4, r2, #31
 800f52c:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800f530:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800f534:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800f538:	bf5e      	ittt	pl
 800f53a:	0fda      	lsrpl	r2, r3, #31
 800f53c:	005b      	lslpl	r3, r3, #1
 800f53e:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800f542:	2400      	movs	r4, #0
 800f544:	0fda      	lsrs	r2, r3, #31
 800f546:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800f54a:	107f      	asrs	r7, r7, #1
 800f54c:	005b      	lsls	r3, r3, #1
 800f54e:	2516      	movs	r5, #22
 800f550:	4620      	mov	r0, r4
 800f552:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800f556:	1886      	adds	r6, r0, r2
 800f558:	428e      	cmp	r6, r1
 800f55a:	bfde      	ittt	le
 800f55c:	1b89      	suble	r1, r1, r6
 800f55e:	18b0      	addle	r0, r6, r2
 800f560:	18a4      	addle	r4, r4, r2
 800f562:	0049      	lsls	r1, r1, #1
 800f564:	3d01      	subs	r5, #1
 800f566:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800f56a:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800f56e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f572:	d1f0      	bne.n	800f556 <__ieee754_sqrt+0x92>
 800f574:	462a      	mov	r2, r5
 800f576:	f04f 0e20 	mov.w	lr, #32
 800f57a:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800f57e:	4281      	cmp	r1, r0
 800f580:	eb06 0c05 	add.w	ip, r6, r5
 800f584:	dc02      	bgt.n	800f58c <__ieee754_sqrt+0xc8>
 800f586:	d113      	bne.n	800f5b0 <__ieee754_sqrt+0xec>
 800f588:	459c      	cmp	ip, r3
 800f58a:	d811      	bhi.n	800f5b0 <__ieee754_sqrt+0xec>
 800f58c:	f1bc 0f00 	cmp.w	ip, #0
 800f590:	eb0c 0506 	add.w	r5, ip, r6
 800f594:	da43      	bge.n	800f61e <__ieee754_sqrt+0x15a>
 800f596:	2d00      	cmp	r5, #0
 800f598:	db41      	blt.n	800f61e <__ieee754_sqrt+0x15a>
 800f59a:	f100 0801 	add.w	r8, r0, #1
 800f59e:	1a09      	subs	r1, r1, r0
 800f5a0:	459c      	cmp	ip, r3
 800f5a2:	bf88      	it	hi
 800f5a4:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800f5a8:	eba3 030c 	sub.w	r3, r3, ip
 800f5ac:	4432      	add	r2, r6
 800f5ae:	4640      	mov	r0, r8
 800f5b0:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800f5b4:	f1be 0e01 	subs.w	lr, lr, #1
 800f5b8:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800f5bc:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800f5c0:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800f5c4:	d1db      	bne.n	800f57e <__ieee754_sqrt+0xba>
 800f5c6:	430b      	orrs	r3, r1
 800f5c8:	d006      	beq.n	800f5d8 <__ieee754_sqrt+0x114>
 800f5ca:	1c50      	adds	r0, r2, #1
 800f5cc:	bf13      	iteet	ne
 800f5ce:	3201      	addne	r2, #1
 800f5d0:	3401      	addeq	r4, #1
 800f5d2:	4672      	moveq	r2, lr
 800f5d4:	f022 0201 	bicne.w	r2, r2, #1
 800f5d8:	1063      	asrs	r3, r4, #1
 800f5da:	0852      	lsrs	r2, r2, #1
 800f5dc:	07e1      	lsls	r1, r4, #31
 800f5de:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800f5e2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800f5e6:	bf48      	it	mi
 800f5e8:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800f5ec:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800f5f0:	4614      	mov	r4, r2
 800f5f2:	e781      	b.n	800f4f8 <__ieee754_sqrt+0x34>
 800f5f4:	0ad9      	lsrs	r1, r3, #11
 800f5f6:	3815      	subs	r0, #21
 800f5f8:	055b      	lsls	r3, r3, #21
 800f5fa:	2900      	cmp	r1, #0
 800f5fc:	d0fa      	beq.n	800f5f4 <__ieee754_sqrt+0x130>
 800f5fe:	02cd      	lsls	r5, r1, #11
 800f600:	d50a      	bpl.n	800f618 <__ieee754_sqrt+0x154>
 800f602:	f1c2 0420 	rsb	r4, r2, #32
 800f606:	fa23 f404 	lsr.w	r4, r3, r4
 800f60a:	1e55      	subs	r5, r2, #1
 800f60c:	4093      	lsls	r3, r2
 800f60e:	4321      	orrs	r1, r4
 800f610:	1b42      	subs	r2, r0, r5
 800f612:	e78a      	b.n	800f52a <__ieee754_sqrt+0x66>
 800f614:	4610      	mov	r0, r2
 800f616:	e7f0      	b.n	800f5fa <__ieee754_sqrt+0x136>
 800f618:	0049      	lsls	r1, r1, #1
 800f61a:	3201      	adds	r2, #1
 800f61c:	e7ef      	b.n	800f5fe <__ieee754_sqrt+0x13a>
 800f61e:	4680      	mov	r8, r0
 800f620:	e7bd      	b.n	800f59e <__ieee754_sqrt+0xda>
 800f622:	bf00      	nop
 800f624:	7ff00000 	.word	0x7ff00000

0800f628 <with_errno>:
 800f628:	b570      	push	{r4, r5, r6, lr}
 800f62a:	4604      	mov	r4, r0
 800f62c:	460d      	mov	r5, r1
 800f62e:	4616      	mov	r6, r2
 800f630:	f7fa fc6e 	bl	8009f10 <__errno>
 800f634:	4629      	mov	r1, r5
 800f636:	6006      	str	r6, [r0, #0]
 800f638:	4620      	mov	r0, r4
 800f63a:	bd70      	pop	{r4, r5, r6, pc}

0800f63c <xflow>:
 800f63c:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800f63e:	4614      	mov	r4, r2
 800f640:	461d      	mov	r5, r3
 800f642:	b108      	cbz	r0, 800f648 <xflow+0xc>
 800f644:	f103 4300 	add.w	r3, r3, #2147483648	; 0x80000000
 800f648:	e9cd 2300 	strd	r2, r3, [sp]
 800f64c:	e9dd 2300 	ldrd	r2, r3, [sp]
 800f650:	4620      	mov	r0, r4
 800f652:	4629      	mov	r1, r5
 800f654:	f7f0 ffd0 	bl	80005f8 <__aeabi_dmul>
 800f658:	2222      	movs	r2, #34	; 0x22
 800f65a:	b003      	add	sp, #12
 800f65c:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800f660:	f7ff bfe2 	b.w	800f628 <with_errno>

0800f664 <__math_uflow>:
 800f664:	b508      	push	{r3, lr}
 800f666:	2200      	movs	r2, #0
 800f668:	f04f 5380 	mov.w	r3, #268435456	; 0x10000000
 800f66c:	f7ff ffe6 	bl	800f63c <xflow>
 800f670:	ec41 0b10 	vmov	d0, r0, r1
 800f674:	bd08      	pop	{r3, pc}

0800f676 <__math_oflow>:
 800f676:	b508      	push	{r3, lr}
 800f678:	2200      	movs	r2, #0
 800f67a:	f04f 43e0 	mov.w	r3, #1879048192	; 0x70000000
 800f67e:	f7ff ffdd 	bl	800f63c <xflow>
 800f682:	ec41 0b10 	vmov	d0, r0, r1
 800f686:	bd08      	pop	{r3, pc}

0800f688 <fabs>:
 800f688:	ec51 0b10 	vmov	r0, r1, d0
 800f68c:	ee10 2a10 	vmov	r2, s0
 800f690:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800f694:	ec43 2b10 	vmov	d0, r2, r3
 800f698:	4770      	bx	lr

0800f69a <finite>:
 800f69a:	b082      	sub	sp, #8
 800f69c:	ed8d 0b00 	vstr	d0, [sp]
 800f6a0:	9801      	ldr	r0, [sp, #4]
 800f6a2:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800f6a6:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800f6aa:	0fc0      	lsrs	r0, r0, #31
 800f6ac:	b002      	add	sp, #8
 800f6ae:	4770      	bx	lr

0800f6b0 <scalbn>:
 800f6b0:	b570      	push	{r4, r5, r6, lr}
 800f6b2:	ec55 4b10 	vmov	r4, r5, d0
 800f6b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800f6ba:	4606      	mov	r6, r0
 800f6bc:	462b      	mov	r3, r5
 800f6be:	b99a      	cbnz	r2, 800f6e8 <scalbn+0x38>
 800f6c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800f6c4:	4323      	orrs	r3, r4
 800f6c6:	d036      	beq.n	800f736 <scalbn+0x86>
 800f6c8:	4b39      	ldr	r3, [pc, #228]	; (800f7b0 <scalbn+0x100>)
 800f6ca:	4629      	mov	r1, r5
 800f6cc:	ee10 0a10 	vmov	r0, s0
 800f6d0:	2200      	movs	r2, #0
 800f6d2:	f7f0 ff91 	bl	80005f8 <__aeabi_dmul>
 800f6d6:	4b37      	ldr	r3, [pc, #220]	; (800f7b4 <scalbn+0x104>)
 800f6d8:	429e      	cmp	r6, r3
 800f6da:	4604      	mov	r4, r0
 800f6dc:	460d      	mov	r5, r1
 800f6de:	da10      	bge.n	800f702 <scalbn+0x52>
 800f6e0:	a32b      	add	r3, pc, #172	; (adr r3, 800f790 <scalbn+0xe0>)
 800f6e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f6e6:	e03a      	b.n	800f75e <scalbn+0xae>
 800f6e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800f6ec:	428a      	cmp	r2, r1
 800f6ee:	d10c      	bne.n	800f70a <scalbn+0x5a>
 800f6f0:	ee10 2a10 	vmov	r2, s0
 800f6f4:	4620      	mov	r0, r4
 800f6f6:	4629      	mov	r1, r5
 800f6f8:	f7f0 fdc8 	bl	800028c <__adddf3>
 800f6fc:	4604      	mov	r4, r0
 800f6fe:	460d      	mov	r5, r1
 800f700:	e019      	b.n	800f736 <scalbn+0x86>
 800f702:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800f706:	460b      	mov	r3, r1
 800f708:	3a36      	subs	r2, #54	; 0x36
 800f70a:	4432      	add	r2, r6
 800f70c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800f710:	428a      	cmp	r2, r1
 800f712:	dd08      	ble.n	800f726 <scalbn+0x76>
 800f714:	2d00      	cmp	r5, #0
 800f716:	a120      	add	r1, pc, #128	; (adr r1, 800f798 <scalbn+0xe8>)
 800f718:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f71c:	da1c      	bge.n	800f758 <scalbn+0xa8>
 800f71e:	a120      	add	r1, pc, #128	; (adr r1, 800f7a0 <scalbn+0xf0>)
 800f720:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f724:	e018      	b.n	800f758 <scalbn+0xa8>
 800f726:	2a00      	cmp	r2, #0
 800f728:	dd08      	ble.n	800f73c <scalbn+0x8c>
 800f72a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f72e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f732:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800f736:	ec45 4b10 	vmov	d0, r4, r5
 800f73a:	bd70      	pop	{r4, r5, r6, pc}
 800f73c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800f740:	da19      	bge.n	800f776 <scalbn+0xc6>
 800f742:	f24c 3350 	movw	r3, #50000	; 0xc350
 800f746:	429e      	cmp	r6, r3
 800f748:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800f74c:	dd0a      	ble.n	800f764 <scalbn+0xb4>
 800f74e:	a112      	add	r1, pc, #72	; (adr r1, 800f798 <scalbn+0xe8>)
 800f750:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f754:	2b00      	cmp	r3, #0
 800f756:	d1e2      	bne.n	800f71e <scalbn+0x6e>
 800f758:	a30f      	add	r3, pc, #60	; (adr r3, 800f798 <scalbn+0xe8>)
 800f75a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800f75e:	f7f0 ff4b 	bl	80005f8 <__aeabi_dmul>
 800f762:	e7cb      	b.n	800f6fc <scalbn+0x4c>
 800f764:	a10a      	add	r1, pc, #40	; (adr r1, 800f790 <scalbn+0xe0>)
 800f766:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f76a:	2b00      	cmp	r3, #0
 800f76c:	d0b8      	beq.n	800f6e0 <scalbn+0x30>
 800f76e:	a10e      	add	r1, pc, #56	; (adr r1, 800f7a8 <scalbn+0xf8>)
 800f770:	e9d1 0100 	ldrd	r0, r1, [r1]
 800f774:	e7b4      	b.n	800f6e0 <scalbn+0x30>
 800f776:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800f77a:	3236      	adds	r2, #54	; 0x36
 800f77c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800f780:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800f784:	4620      	mov	r0, r4
 800f786:	4b0c      	ldr	r3, [pc, #48]	; (800f7b8 <scalbn+0x108>)
 800f788:	2200      	movs	r2, #0
 800f78a:	e7e8      	b.n	800f75e <scalbn+0xae>
 800f78c:	f3af 8000 	nop.w
 800f790:	c2f8f359 	.word	0xc2f8f359
 800f794:	01a56e1f 	.word	0x01a56e1f
 800f798:	8800759c 	.word	0x8800759c
 800f79c:	7e37e43c 	.word	0x7e37e43c
 800f7a0:	8800759c 	.word	0x8800759c
 800f7a4:	fe37e43c 	.word	0xfe37e43c
 800f7a8:	c2f8f359 	.word	0xc2f8f359
 800f7ac:	81a56e1f 	.word	0x81a56e1f
 800f7b0:	43500000 	.word	0x43500000
 800f7b4:	ffff3cb0 	.word	0xffff3cb0
 800f7b8:	3c900000 	.word	0x3c900000

0800f7bc <_init>:
 800f7bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7be:	bf00      	nop
 800f7c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7c2:	bc08      	pop	{r3}
 800f7c4:	469e      	mov	lr, r3
 800f7c6:	4770      	bx	lr

0800f7c8 <_fini>:
 800f7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800f7ca:	bf00      	nop
 800f7cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800f7ce:	bc08      	pop	{r3}
 800f7d0:	469e      	mov	lr, r3
 800f7d2:	4770      	bx	lr
