
FreeFallVer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dd04  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800de98  0800de98  0001de98  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e538  0800e538  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e538  0800e538  0001e538  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e540  0800e540  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e540  0800e540  0001e540  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e544  0800e544  0001e544  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e548  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000394  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000584  20000584  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107e2  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271f  00000000  00000000  00030a02  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  00033128  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  000340d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bb2  00000000  00000000  00034f80  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136f8  00000000  00000000  00057b32  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cf03f  00000000  00000000  0006b22a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a269  2**0
                  CONTENTS, READONLY
 21 .debug_frame  0000572c  00000000  00000000  0013a2bc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800de7c 	.word	0x0800de7c

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800de7c 	.word	0x0800de7c

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <GetSector+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x22>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001012:	d302      	bcc.n	800101a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e04b      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <GetSector+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <GetSector+0x38>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <GetSector+0xd0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e040      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <GetSector+0xd4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d806      	bhi.n	8001046 <GetSector+0x4e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <GetSector+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d302      	bcc.n	8001046 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e035      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GetSector+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x64>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GetSector+0xe0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d302      	bcc.n	800105c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001056:	2303      	movs	r3, #3
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e02a      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GetSector+0xe4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0x7a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <GetSector+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800106c:	2304      	movs	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e01f      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GetSector+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d206      	bcs.n	8001088 <GetSector+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <GetSector+0xe4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d902      	bls.n	8001088 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001082:	2305      	movs	r3, #5
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e014      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GetSector+0xec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d206      	bcs.n	800109e <GetSector+0xa6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <GetSector+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d902      	bls.n	800109e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001098:	2306      	movs	r3, #6
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e009      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GetSector+0xf0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d205      	bcs.n	80010b2 <GetSector+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <GetSector+0xec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	08003ffe 	.word	0x08003ffe
 80010c4:	08007ffe 	.word	0x08007ffe
 80010c8:	08004000 	.word	0x08004000
 80010cc:	0800bffe 	.word	0x0800bffe
 80010d0:	08008000 	.word	0x08008000
 80010d4:	0800ffff 	.word	0x0800ffff
 80010d8:	0800c000 	.word	0x0800c000
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff
 80010e8:	0807ffff 	.word	0x0807ffff

080010ec <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f005 fb5b 	bl	80067b8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff78 	bl	8000ff8 <GetSector>
 8001108:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001116:	69f8      	ldr	r0, [r7, #28]
 8001118:	f7ff ff6e 	bl	8000ff8 <GetSector>
 800111c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001126:	2202      	movs	r2, #2
 8001128:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Flash_Write_Data+0xb8>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	3301      	adds	r3, #1
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Flash_Write_Data+0xb8>)
 800113a:	60d3      	str	r3, [r2, #12]
	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001144:	f005 fca6 	bl	8006a94 <HAL_FLASHEx_Erase>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800114e:	f005 fb65 	bl	800681c <HAL_FLASH_GetError>
 8001152:	4603      	mov	r3, r0
 8001154:	e022      	b.n	800119c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	461c      	mov	r4, r3
 8001164:	4615      	mov	r5, r2
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2002      	movs	r0, #2
 800116e:	f005 facf 	bl	8006710 <HAL_FLASH_Program>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3304      	adds	r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e003      	b.n	800118e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001186:	f005 fb49 	bl	800681c <HAL_FLASH_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	e006      	b.n	800119c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	429a      	cmp	r2, r3
 8001194:	dbdf      	blt.n	8001156 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001196:	f005 fb31 	bl	80067fc <HAL_FLASH_Lock>

	   return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	2000020c 	.word	0x2000020c

080011a8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	80fa      	strh	r2, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d000      	beq.n	80011d6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011d4:	e7ef      	b.n	80011b6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Stop>:
#include "stdbool.h"
#include <math.h>
//#include <FLASH_SECTOR_F4.h>
extern bool POSReach;
void Stop() // Stop motor function
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <Stop+0x1c>)
 80011ee:	f005 ff27 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Disable Servo Enable
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <Stop+0x1c>)
 80011f8:	f005 ff22 	bl	8007040 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020800 	.word	0x40020800

08001204 <AlarmReset>:

void AlarmReset() // reset alarm function
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_SET);//Pull Estop pin to 1 (24V)
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <AlarmReset+0x44>)
 800120e:	f005 ff17 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_RESET); // trig Alarm Reset Pin
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <AlarmReset+0x44>)
 8001218:	f005 ff12 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f005 f894 	bl	800634c <HAL_Delay>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <AlarmReset+0x44>)
 800122a:	f005 ff09 	bl	8007040 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 800122e:	2201      	movs	r2, #1
 8001230:	2120      	movs	r1, #32
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <AlarmReset+0x48>)
 8001234:	f005 ff04 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Enable Servo Enable 
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <AlarmReset+0x48>)
 800123e:	f005 feff 	bl	8007040 <HAL_GPIO_WritePin>
		// Turn on the brake
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800

08001250 <Estop>:

void Estop() // Estop function
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);//Pull Estop pin to GND
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Estop+0x14>)
 800125a:	f005 fef1 	bl	8007040 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <DisableSTOP>:

void DisableSTOP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DisableSTOP+0x14>)
 8001272:	f005 fee5 	bl	8007040 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800

08001280 <JogMoveUp>:

void JogMoveUp() // Move up by pressing the JOG button on the UI
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_SET); // Choose the direction
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <JogMoveUp+0x20>)
 800128c:	f005 fed8 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <JogMoveUp+0x24>)
 8001296:	f005 fed3 	bl	8007040 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800

080012a8 <JogMoveDown>:

void JogMoveDown()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // Choose the direction
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <JogMoveDown+0x20>)
 80012b4:	f005 fec4 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <JogMoveDown+0x24>)
 80012be:	f005 febf 	bl	8007040 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800

080012d0 <DriverInit>:
{
	HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // Speed Mode
}

bool DriverInit()
{	
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // CN1-14 - PLSCLR	
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <DriverInit+0x70>)
 80012dc:	f005 feb0 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port,Speed2_Not_PE7_15_Pin,GPIO_PIN_RESET);//CN1-15 SPDLIM/TLIM
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <DriverInit+0x70>)
 80012e6:	f005 feab 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CCWLIM_Not_PE12_39_GPIO_Port,CCWLIM_Not_PE12_39_Pin,GPIO_PIN_RESET);//CN1-39 PLSINH
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <DriverInit+0x70>)
 80012f2:	f005 fea5 	bl	8007040 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET);// CN-38 - CWLIM
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4810      	ldr	r0, [pc, #64]	; (8001340 <DriverInit+0x70>)
 80012fe:	f005 fe9f 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CWLIM_Not_PE14_13_GPIO_Port,CWLIM_Not_PE14_13_Pin,GPIO_PIN_SET);//CN1-13 CCWLIM
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <DriverInit+0x70>)
 800130a:	f005 fe99 	bl	8007040 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);// First, the driver will be in Emergency Stop
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <DriverInit+0x74>)
 8001314:	f005 fe94 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <DriverInit+0x78>)
 800131e:	f005 fe8f 	bl	8007040 <HAL_GPIO_WritePin>
		
		HAL_GPIO_WritePin(PA12_LINE_DRV_EN_GPIO_Port, PA12_LINE_DRV_EN_Pin, GPIO_PIN_RESET);// Enable U14 DriveLine IC for generating pulses
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <DriverInit+0x7c>)
 800132a:	f005 fe89 	bl	8007040 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // DIR	
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DriverInit+0x70>)
 8001336:	f005 fe83 	bl	8007040 <HAL_GPIO_WritePin>
	
		return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <ReadLogicF7000Out>:
uint16_t ReadLogicF7000Out(void)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint16_t OuputState = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
	uint8_t i=0;
 800135a:	2300      	movs	r3, #0
 800135c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_23_TYPEOUT_GPIO_Port,CN1_23_TYPEOUT_Pin)) // Read CN1-23-TYPEOUT
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	485e      	ldr	r0, [pc, #376]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001362:	f005 fe55 	bl	8007010 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <ReadLogicF7000Out+0x30>
	{
		OuputState = OuputState | (1 << i); // Set ith bit		
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	3301      	adds	r3, #1
 8001384:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin)) // Read CN1-48-BRAKE
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4855      	ldr	r0, [pc, #340]	; (80014e0 <ReadLogicF7000Out+0x190>)
 800138a:	f005 fe41 	bl	8007010 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <ReadLogicF7000Out+0x58>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	3301      	adds	r3, #1
 80013ac:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin)) // Read CN1-22-RDY
 80013ae:	2104      	movs	r1, #4
 80013b0:	484b      	ldr	r0, [pc, #300]	; (80014e0 <ReadLogicF7000Out+0x190>)
 80013b2:	f005 fe2d 	bl	8007010 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <ReadLogicF7000Out+0x80>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	3301      	adds	r3, #1
 80013d4:	717b      	strb	r3, [r7, #5]
	POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);	// Check if the position is reached or not
 80013d6:	2102      	movs	r1, #2
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <ReadLogicF7000Out+0x194>)
 80013da:	f005 fe19 	bl	8007010 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013ec:	701a      	strb	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin)) // Read CN1-47
	if(POSReach)
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <ReadLogicF7000Out+0xba>
	{		
		OuputState = OuputState | (1 << i); // Set ith bit
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3301      	adds	r3, #1
 800140e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_21_SPDOUT_TRQOUT_GPIO_Port,CN1_21_SPDOUT_TRQOUT_Pin)) // Read CN1-21
 8001410:	2108      	movs	r1, #8
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <ReadLogicF7000Out+0x190>)
 8001414:	f005 fdfc 	bl	8007010 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <ReadLogicF7000Out+0xe2>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_46_ALARM_GPIO_Port,CN1_46_ALARM_Pin)) // Read CN1-22-
 8001438:	2101      	movs	r1, #1
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800143c:	f005 fde8 	bl	8007010 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <ReadLogicF7000Out+0x10a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	3301      	adds	r3, #1
 800145e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_20_PCWOUT_PTQOUT_GPIO_Port,CN1_20_PCWOUT_PTQOUT_Pin)) // Read CN1-20
 8001460:	2110      	movs	r1, #16
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001464:	f005 fdd4 	bl	8007010 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <ReadLogicF7000Out+0x132>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001482:	797b      	ldrb	r3, [r7, #5]
 8001484:	3301      	adds	r3, #1
 8001486:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_45_NCWOUT_NTQOUT_GPIO_Port,CN1_45_NCWOUT_NTQOUT_Pin)) // Read CN1-45
 8001488:	2104      	movs	r1, #4
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800148c:	f005 fdc0 	bl	8007010 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <ReadLogicF7000Out+0x15a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	3301      	adds	r3, #1
 80014ae:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_19_ZSPD_GPIO_Port,CN1_19_ZSPD_Pin)) // Read CN1-19-ZSPD
 80014b0:	2108      	movs	r1, #8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <ReadLogicF7000Out+0x19c>)
 80014b4:	f005 fdac 	bl	8007010 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <ReadLogicF7000Out+0x182>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	80fb      	strh	r3, [r7, #6]
	}	
	return OuputState;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
}
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	2000043d 	.word	0x2000043d
 80014ec:	40020400 	.word	0x40020400

080014f0 <PIDCalculate>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

float PIDCalculate (float _AccRef, float _AccFeedback, int MinSatuaration, int MaxSaturation, bool _direction)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80014fa:	edc7 0a04 	vstr	s1, [r7, #16]
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	4613      	mov	r3, r2
 8001504:	71fb      	strb	r3, [r7, #7]
	float Error = _AccRef - _AccFeedback;
 8001506:	ed97 7a05 	vldr	s14, [r7, #20]
 800150a:	edd7 7a04 	vldr	s15, [r7, #16]
 800150e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001512:	edc7 7a08 	vstr	s15, [r7, #32]
	
	float Pcalculation = Kp*Error;
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <PIDCalculate+0x158>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	edc7 7a07 	vstr	s15, [r7, #28]
	IntergraError += Ki*(Error+PreError)*SampleTime*0.005; // Sampletime in second
 8001528:	4b48      	ldr	r3, [pc, #288]	; (800164c <PIDCalculate+0x15c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	4604      	mov	r4, r0
 8001534:	460d      	mov	r5, r1
 8001536:	4b46      	ldr	r3, [pc, #280]	; (8001650 <PIDCalculate+0x160>)
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001544:	4b43      	ldr	r3, [pc, #268]	; (8001654 <PIDCalculate+0x164>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <PIDCalculate+0x168>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155e:	ee17 0a90 	vmov	r0, s15
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	a336      	add	r3, pc, #216	; (adr r3, 8001640 <PIDCalculate+0x150>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7ff f844 	bl	80005f8 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4620      	mov	r0, r4
 8001576:	4629      	mov	r1, r5
 8001578:	f7fe fe88 	bl	800028c <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fb30 	bl	8000be8 <__aeabi_d2f>
 8001588:	4603      	mov	r3, r0
 800158a:	4a30      	ldr	r2, [pc, #192]	; (800164c <PIDCalculate+0x15c>)
 800158c:	6013      	str	r3, [r2, #0]
	float Dcalculation = Kd*(Error - PreError)/SampleTime; // sampletime in ms
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <PIDCalculate+0x160>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ed97 7a08 	vldr	s14, [r7, #32]
 8001598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <PIDCalculate+0x16c>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <PIDCalculate+0x168>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b6:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float ReturnValue = Pcalculation + IntergraError + Dcalculation;
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <PIDCalculate+0x15c>)
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80015c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80015cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	
	if (ReturnValue <= MinSatuaration)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	d806      	bhi.n	80015fa <PIDCalculate+0x10a>
		ReturnValue = MinSatuaration;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if (ReturnValue >= MaxSaturation)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001604:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	db06      	blt.n	8001620 <PIDCalculate+0x130>
		ReturnValue = MaxSaturation;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if (_direction)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <PIDCalculate+0x13c>
	{
		return ReturnValue;
 8001626:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800162a:	e003      	b.n	8001634 <PIDCalculate+0x144>
	}
	else
	{
		return -ReturnValue;
 800162c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001630:	eef1 7a67 	vneg.f32	s15, s15
	}
}
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
 800163e:	bf00      	nop
 8001640:	47ae147b 	.word	0x47ae147b
 8001644:	3f747ae1 	.word	0x3f747ae1
 8001648:	20000520 	.word	0x20000520
 800164c:	20000534 	.word	0x20000534
 8001650:	20000540 	.word	0x20000540
 8001654:	20000524 	.word	0x20000524
 8001658:	2000045c 	.word	0x2000045c
 800165c:	20000528 	.word	0x20000528

08001660 <ResetPIDController>:

void ResetPIDController ()
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	IntergraError = 0;
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <ResetPIDController+0x24>)
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
	PreError = 0;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <ResetPIDController+0x28>)
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
	AccRef = -9.6;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <ResetPIDController+0x2c>)
 8001676:	4a06      	ldr	r2, [pc, #24]	; (8001690 <ResetPIDController+0x30>)
 8001678:	601a      	str	r2, [r3, #0]
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	20000534 	.word	0x20000534
 8001688:	20000540 	.word	0x20000540
 800168c:	2000000c 	.word	0x2000000c
 8001690:	c119999a 	.word	0xc119999a

08001694 <ExtractMotionCode>:

void ExtractMotionCode () // Extract command from the UI
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	memset (MotionCode, '\0', sizeof (MotionCode)); // reset MotionCode
 800169a:	2220      	movs	r2, #32
 800169c:	2100      	movs	r1, #0
 800169e:	4827      	ldr	r0, [pc, #156]	; (800173c <ExtractMotionCode+0xa8>)
 80016a0:	f008 f8cc 	bl	800983c <memset>
	memset (DataRegion, '\0', sizeof (DataRegion)); // reset DataRegion
 80016a4:	2228      	movs	r2, #40	; 0x28
 80016a6:	2100      	movs	r1, #0
 80016a8:	4825      	ldr	r0, [pc, #148]	; (8001740 <ExtractMotionCode+0xac>)
 80016aa:	f008 f8c7 	bl	800983c <memset>
	uint8_t j = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	71bb      	strb	r3, [r7, #6]
 80016b6:	e012      	b.n	80016de <ExtractMotionCode+0x4a>
	{
		if (RxPCBuff[i] != 0) // coppy the command from UI to another array, remove the null character at the beginning
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <ExtractMotionCode+0xb0>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <ExtractMotionCode+0x44>
		{
			DataRegion[j] = RxPCBuff[i]; // coppy to DataRegion
 80016c4:	79ba      	ldrb	r2, [r7, #6]
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	491e      	ldr	r1, [pc, #120]	; (8001744 <ExtractMotionCode+0xb0>)
 80016ca:	5c8a      	ldrb	r2, [r1, r2]
 80016cc:	b2d1      	uxtb	r1, r2
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <ExtractMotionCode+0xac>)
 80016d0:	54d1      	strb	r1, [r2, r3]
			j++;
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	3301      	adds	r3, #1
 80016d6:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	3301      	adds	r3, #1
 80016dc:	71bb      	strb	r3, [r7, #6]
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	2b27      	cmp	r3, #39	; 0x27
 80016e2:	d9e9      	bls.n	80016b8 <ExtractMotionCode+0x24>
		}
	}
	j = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
	char *token;	
	token = strtok((char *)DataRegion, "/");	// Split the command ~ remove the / character
 80016e8:	4917      	ldr	r1, [pc, #92]	; (8001748 <ExtractMotionCode+0xb4>)
 80016ea:	4815      	ldr	r0, [pc, #84]	; (8001740 <ExtractMotionCode+0xac>)
 80016ec:	f009 fb66 	bl	800adbc <strtok>
 80016f0:	6038      	str	r0, [r7, #0]
	while (token != NULL)
 80016f2:	e016      	b.n	8001722 <ExtractMotionCode+0x8e>
    {
				MotionCode[j] = (atof(token)); // covert to float type 
 80016f4:	6838      	ldr	r0, [r7, #0]
 80016f6:	f008 f873 	bl	80097e0 <atof>
 80016fa:	ec53 2b10 	vmov	r2, r3, d0
 80016fe:	79fc      	ldrb	r4, [r7, #7]
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa70 	bl	8000be8 <__aeabi_d2f>
 8001708:	4602      	mov	r2, r0
 800170a:	490c      	ldr	r1, [pc, #48]	; (800173c <ExtractMotionCode+0xa8>)
 800170c:	00a3      	lsls	r3, r4, #2
 800170e:	440b      	add	r3, r1
 8001710:	601a      	str	r2, [r3, #0]
			  //MotionCode[j] = (atoi(token)); // covert to int type 
        token = strtok(NULL, "/");
 8001712:	490d      	ldr	r1, [pc, #52]	; (8001748 <ExtractMotionCode+0xb4>)
 8001714:	2000      	movs	r0, #0
 8001716:	f009 fb51 	bl	800adbc <strtok>
 800171a:	6038      	str	r0, [r7, #0]
				j++;
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	3301      	adds	r3, #1
 8001720:	71fb      	strb	r3, [r7, #7]
	while (token != NULL)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e5      	bne.n	80016f4 <ExtractMotionCode+0x60>
    }
	memset (RxPCBuff, '\0', sizeof (RxPCBuff)); // reset
 8001728:	2228      	movs	r2, #40	; 0x28
 800172a:	2100      	movs	r1, #0
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <ExtractMotionCode+0xb0>)
 800172e:	f008 f885 	bl	800983c <memset>
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	bf00      	nop
 800173c:	20000500 	.word	0x20000500
 8001740:	200003dc 	.word	0x200003dc
 8001744:	2000037c 	.word	0x2000037c
 8001748:	0800de98 	.word	0x0800de98

0800174c <ReadMultiRegister>:
//	}
//}


void ReadMultiRegister(uint16_t StartingAddress, uint8_t NoOfRegister) // Read data from the Driver
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	460a      	mov	r2, r1
 8001756:	80fb      	strh	r3, [r7, #6]
 8001758:	4613      	mov	r3, r2
 800175a:	717b      	strb	r3, [r7, #5]
	// Prepare data frame -- BEGIN
	uint8_t TxDataToDriver[8]; // 8 bytes of data frame
	
	// Data preparation
	TxDataToDriver[0] = DriverID;//SerialID = 1 of the driver
 800175c:	2301      	movs	r3, #1
 800175e:	733b      	strb	r3, [r7, #12]
	TxDataToDriver[1] = 3;//Read Regis, function code	
 8001760:	2303      	movs	r3, #3
 8001762:	737b      	strb	r3, [r7, #13]
	TxDataToDriver[2] = StartingAddress / 256; // Register Address High byte
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	b29b      	uxth	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	73bb      	strb	r3, [r7, #14]
    TxDataToDriver[3] = StartingAddress % 256; // Register Address LOW byte
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	73fb      	strb	r3, [r7, #15]
	TxDataToDriver[4] = 0; // Number of Register HIGH byte
 8001774:	2300      	movs	r3, #0
 8001776:	743b      	strb	r3, [r7, #16]
	TxDataToDriver[5] = NoOfRegister; // Number of Register LOW byte
 8001778:	797b      	ldrb	r3, [r7, #5]
 800177a:	747b      	strb	r3, [r7, #17]
	
	//CRC BEGIN=======
				uint16_t crc = 0xFFFF;
 800177c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001780:	83fb      	strh	r3, [r7, #30]
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++) 
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	e027      	b.n	80017d8 <ReadMultiRegister+0x8c>
				{	crc ^= (uint16_t)TxDataToDriver[pos];          // XOR byte into least sig. byte of crc
 8001788:	f107 020c 	add.w	r2, r7, #12
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b29a      	uxth	r2, r3
 8001794:	8bfb      	ldrh	r3, [r7, #30]
 8001796:	4053      	eors	r3, r2
 8001798:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--) 
 800179a:	2308      	movs	r3, #8
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e015      	b.n	80017cc <ReadMultiRegister+0x80>
					{    // Loop over each bit
						if ((crc & 0x0001) != 0) 
 80017a0:	8bfb      	ldrh	r3, [r7, #30]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <ReadMultiRegister+0x74>
						{      // If the LSB is set
							crc >>= 1;                    // Shift right and XOR 0xA001
 80017aa:	8bfb      	ldrh	r3, [r7, #30]
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	83fb      	strh	r3, [r7, #30]
							crc ^= 0xA001;
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80017b6:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80017ba:	43db      	mvns	r3, r3
 80017bc:	83fb      	strh	r3, [r7, #30]
 80017be:	e002      	b.n	80017c6 <ReadMultiRegister+0x7a>
						}
						else                            // Else LSB is not set
							crc >>= 1;                    // Just shift right
 80017c0:	8bfb      	ldrh	r3, [r7, #30]
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--) 
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e6      	bne.n	80017a0 <ReadMultiRegister+0x54>
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++) 
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	3301      	adds	r3, #1
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	ddd4      	ble.n	8001788 <ReadMultiRegister+0x3c>
					}
				}
	TxDataToDriver[6]= (uint8_t)(crc&0x00FF);;//(uint8_t)(TemDat16&0xFF);
 80017de:	8bfb      	ldrh	r3, [r7, #30]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	74bb      	strb	r3, [r7, #18]
	TxDataToDriver[7]=(uint8_t)((crc>>8)&0x00FF);				
 80017e4:	8bfb      	ldrh	r3, [r7, #30]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	74fb      	strb	r3, [r7, #19]
	//CRC=====END/
	// Prepare data frame -- END
	// Send data use UART5
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
 80017ee:	2200      	movs	r2, #0
 80017f0:	2101      	movs	r1, #1
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <ReadMultiRegister+0xd8>)
 80017f4:	f005 fc24 	bl	8007040 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_UART_Transmit(&huart5,TxDataToDriver,sizeof(TxDataToDriver),200); // use UART5 to send
 80017f8:	f107 010c 	add.w	r1, r7, #12
 80017fc:	23c8      	movs	r3, #200	; 0xc8
 80017fe:	2208      	movs	r2, #8
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <ReadMultiRegister+0xdc>)
 8001802:	f006 ffc6 	bl	8008792 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
 8001806:	2201      	movs	r2, #1
 8001808:	2101      	movs	r1, #1
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <ReadMultiRegister+0xd8>)
 800180c:	f005 fc18 	bl	8007040 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
 8001810:	2201      	movs	r2, #1
 8001812:	4906      	ldr	r1, [pc, #24]	; (800182c <ReadMultiRegister+0xe0>)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <ReadMultiRegister+0xdc>)
 8001816:	f007 f84e 	bl	80088b6 <HAL_UART_Receive_IT>
	
	/// For debug only, should be comment out latter
	//uint8_t u8_TxPCBuff[20]="< Read Data";
	//HAL_UART_Transmit(&huart6,u8_TxPCBuff,sizeof(u8_TxPCBuff),1000);	
	/// Dubug END
}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	200002b0 	.word	0x200002b0
 800182c:	20000405 	.word	0x20000405

08001830 <LoadSavedParam>:



void LoadSavedParam (uint32_t StartSectorAddress, float *_Param)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b09f      	sub	sp, #124	; 0x7c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	uint8_t LoadDataBuff[100];
	
	Flash_Read_Data(StartSectorAddress, (uint32_t *)LoadDataBuff, numofwords);
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <LoadSavedParam+0x74>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b29a      	uxth	r2, r3
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fcae 	bl	80011a8 <Flash_Read_Data>
	
	uint8_t	j = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char *token;
	token = strtok((char *)LoadDataBuff, "/");	// Split the command ~ remove the / character
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4914      	ldr	r1, [pc, #80]	; (80018a8 <LoadSavedParam+0x78>)
 8001858:	4618      	mov	r0, r3
 800185a:	f009 faaf 	bl	800adbc <strtok>
 800185e:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL)
 8001860:	e017      	b.n	8001892 <LoadSavedParam+0x62>
    {
				_Param[j] = (atof(token)); // covert to float type 
 8001862:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001864:	f007 ffbc 	bl	80097e0 <atof>
 8001868:	ec51 0b10 	vmov	r0, r1, d0
 800186c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	18d4      	adds	r4, r2, r3
 8001876:	f7ff f9b7 	bl	8000be8 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
 800187c:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, "/");
 800187e:	490a      	ldr	r1, [pc, #40]	; (80018a8 <LoadSavedParam+0x78>)
 8001880:	2000      	movs	r0, #0
 8001882:	f009 fa9b 	bl	800adbc <strtok>
 8001886:	6738      	str	r0, [r7, #112]	; 0x70
				j++;
 8001888:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800188c:	3301      	adds	r3, #1
 800188e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (token != NULL)
 8001892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e4      	bne.n	8001862 <LoadSavedParam+0x32>
    }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	377c      	adds	r7, #124	; 0x7c
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000000a 	.word	0x2000000a
 80018a8:	0800de98 	.word	0x0800de98

080018ac <SaveSystemParams>:

void SaveSystemParams ()
{
 80018ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b0:	b0b9      	sub	sp, #228	; 0xe4
 80018b2:	af16      	add	r7, sp, #88	; 0x58
	char SaveBuffer[80];
	TxPCLen = sprintf(SaveBuffer,"%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4f"
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <SaveSystemParams+0x14c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe45 	bl	8000548 <__aeabi_f2d>
 80018be:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80018c2:	4b4e      	ldr	r3, [pc, #312]	; (80019fc <SaveSystemParams+0x150>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461e      	mov	r6, r3
 80018c8:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <SaveSystemParams+0x154>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ce:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <SaveSystemParams+0x158>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d4:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <SaveSystemParams+0x15c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <SaveSystemParams+0x160>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe2e 	bl	8000548 <__aeabi_f2d>
 80018ec:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80018f0:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <SaveSystemParams+0x164>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe27 	bl	8000548 <__aeabi_f2d>
 80018fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <SaveSystemParams+0x168>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe20 	bl	8000548 <__aeabi_f2d>
 8001908:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <SaveSystemParams+0x16c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe19 	bl	8000548 <__aeabi_f2d>
 8001916:	e9c7 0100 	strd	r0, r1, [r7]
 800191a:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <SaveSystemParams+0x170>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe12 	bl	8000548 <__aeabi_f2d>
 8001924:	4682      	mov	sl, r0
 8001926:	468b      	mov	fp, r1
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <SaveSystemParams+0x174>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe0b 	bl	8000548 <__aeabi_f2d>
 8001932:	4680      	mov	r8, r0
 8001934:	4689      	mov	r9, r1
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <SaveSystemParams+0x178>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fe04 	bl	8000548 <__aeabi_f2d>
 8001940:	4604      	mov	r4, r0
 8001942:	460d      	mov	r5, r1
 8001944:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <SaveSystemParams+0x17c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fdfd 	bl	8000548 <__aeabi_f2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001956:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800195a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800195e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8001962:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8001966:	ed97 7b00 	vldr	d7, [r7]
 800196a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800196e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001972:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001976:	ed97 7b04 	vldr	d7, [r7, #16]
 800197a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800197e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001982:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001986:	ed97 7b08 	vldr	d7, [r7, #32]
 800198a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800198e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001990:	9102      	str	r1, [sp, #8]
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9600      	str	r6, [sp, #0]
 8001998:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800199c:	4923      	ldr	r1, [pc, #140]	; (8001a2c <SaveSystemParams+0x180>)
 800199e:	f008 fbbf 	bl	800a120 <siprintf>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <SaveSystemParams+0x184>)
 80019a8:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
					 FlyAccSlope, Ki, BrakeAccSlope); // Combine to a string
	numofwords = (strlen(SaveBuffer)/4)+((strlen(SaveBuffer)%4)!=0);
 80019aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc0e 	bl	80001d0 <strlen>
 80019b4:	4603      	mov	r3, r0
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	b2dc      	uxtb	r4, r3
 80019ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fc06 	bl	80001d0 <strlen>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4423      	add	r3, r4
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <SaveSystemParams+0x188>)
 80019da:	701a      	strb	r2, [r3, #0]
	Flash_Write_Data(MemoryAddress , (uint32_t *)SaveBuffer, numofwords);
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <SaveSystemParams+0x188>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e6:	4619      	mov	r1, r3
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <SaveSystemParams+0x18c>)
 80019ea:	f7ff fb7f 	bl	80010ec <Flash_Write_Data>
}
 80019ee:	bf00      	nop
 80019f0:	378c      	adds	r7, #140	; 0x8c
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019f8:	20000458 	.word	0x20000458
 80019fc:	2000045d 	.word	0x2000045d
 8001a00:	2000045e 	.word	0x2000045e
 8001a04:	2000045c 	.word	0x2000045c
 8001a08:	20000478 	.word	0x20000478
 8001a0c:	20000464 	.word	0x20000464
 8001a10:	20000468 	.word	0x20000468
 8001a14:	20000498 	.word	0x20000498
 8001a18:	2000047c 	.word	0x2000047c
 8001a1c:	20000480 	.word	0x20000480
 8001a20:	20000530 	.word	0x20000530
 8001a24:	20000524 	.word	0x20000524
 8001a28:	2000052c 	.word	0x2000052c
 8001a2c:	0800de9c 	.word	0x0800de9c
 8001a30:	20000426 	.word	0x20000426
 8001a34:	2000000a 	.word	0x2000000a
 8001a38:	08040000 	.word	0x08040000
 8001a3c:	00000000 	.word	0x00000000

08001a40 <LinearGeneration>:

void LinearGeneration (float *var, float slope, float Amplitude)
// Amplitude is the limit of the value
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a4c:	edc7 0a01 	vstr	s1, [r7, #4]

//	float ReturnValue;
//	ReturnValue = (InitialValue + (float)(slope*Time*0.001)); //
	if (slope >= 0)
 8001a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	db0d      	blt.n	8001a7a <LinearGeneration+0x3a>
	{
		if (*var >= Amplitude)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	d811      	bhi.n	8001a96 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	601a      	str	r2, [r3, #0]
				return;
 8001a78:	e036      	b.n	8001ae8 <LinearGeneration+0xa8>
			}
	}
	else
	{
		if (*var <= Amplitude)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8c:	db03      	blt.n	8001a96 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	601a      	str	r2, [r3, #0]
				return;
 8001a94:	e028      	b.n	8001ae8 <LinearGeneration+0xa8>
			}
	}
	*var += slope*SampleTime*0.001; // *0.001 to convert to second
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd54 	bl	8000548 <__aeabi_f2d>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	460d      	mov	r5, r1
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <LinearGeneration+0xb8>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	ee17 0a90 	vmov	r0, s15
 8001abc:	f7fe fd44 	bl	8000548 <__aeabi_f2d>
 8001ac0:	a30b      	add	r3, pc, #44	; (adr r3, 8001af0 <LinearGeneration+0xb0>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fd97 	bl	80005f8 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fbdb 	bl	800028c <__adddf3>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f883 	bl	8000be8 <__aeabi_d2f>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	601a      	str	r2, [r3, #0]
}
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bdb0      	pop	{r4, r5, r7, pc}
 8001aee:	bf00      	nop
 8001af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001af4:	3f50624d 	.word	0x3f50624d
 8001af8:	2000045c 	.word	0x2000045c

08001afc <StopPulseGenerating>:


void StopPulseGenerating()
{	
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	PulseGenerationFlag = false; // 
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <StopPulseGenerating+0x2c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 8001b06:	4809      	ldr	r0, [pc, #36]	; (8001b2c <StopPulseGenerating+0x30>)
 8001b08:	f005 ffe6 	bl	8007ad8 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_RESET);//Reset Pin status
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b12:	4807      	ldr	r0, [pc, #28]	; (8001b30 <StopPulseGenerating+0x34>)
 8001b14:	f005 fa94 	bl	8007040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port,PC8_PR_Pin, GPIO_PIN_RESET);//Reset Pin status	
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <StopPulseGenerating+0x38>)
 8001b20:	f005 fa8e 	bl	8007040 <HAL_GPIO_WritePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000043b 	.word	0x2000043b
 8001b2c:	20000268 	.word	0x20000268
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40020800 	.word	0x40020800

08001b38 <StartPulseGenerating>:
void StartPulseGenerating()
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); // Set CW direction	
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <StartPulseGenerating+0x2c>)
 8001b44:	f005 fa7c 	bl	8007040 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <StartPulseGenerating+0x30>)
 8001b50:	f005 fa76 	bl	8007040 <HAL_GPIO_WritePin>
	PulseGenerationFlag = true;
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <StartPulseGenerating+0x34>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3		
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <StartPulseGenerating+0x38>)
 8001b5c:	f005 ff4c 	bl	80079f8 <HAL_TIM_Base_Start_IT>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40020800 	.word	0x40020800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	2000043b 	.word	0x2000043b
 8001b70:	20000268 	.word	0x20000268

08001b74 <WaitingMiliSecond>:
bool WaitingMiliSecond(uint16_t TimeInMiliSecond)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
	StoppingTimeCount++;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <WaitingMiliSecond+0x44>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <WaitingMiliSecond+0x44>)
 8001b88:	801a      	strh	r2, [r3, #0]
	if (StoppingTimeCount >= (uint16_t)(TimeInMiliSecond/SampleTime))
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <WaitingMiliSecond+0x48>)
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <WaitingMiliSecond+0x44>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d804      	bhi.n	8001ba8 <WaitingMiliSecond+0x34>
	{
		StoppingTimeCount = 0;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <WaitingMiliSecond+0x44>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
		return true;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <WaitingMiliSecond+0x36>
	}
	return false;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000454 	.word	0x20000454
 8001bbc:	2000045c 	.word	0x2000045c

08001bc0 <CalculateTimer3Period>:

int CalculateTimer3Period (bool DriverType, float speed)
{
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	ed87 0a00 	vstr	s0, [r7]
 8001bcc:	71fb      	strb	r3, [r7, #7]
	// DriverType = true ->  Higen FDA7000 Driver
	// DriverType = false -> ASDA A3 Driver
	if (DriverType) // Higen FDA7000 Driver
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d037      	beq.n	8001c44 <CalculateTimer3Period+0x84>
	{
		return (int)((float)(120000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001bd4:	edd7 7a00 	vldr	s15, [r7]
 8001bd8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bdc:	ee17 0a90 	vmov	r0, s15
 8001be0:	f7fe fcb2 	bl	8000548 <__aeabi_f2d>
 8001be4:	4604      	mov	r4, r0
 8001be6:	460d      	mov	r5, r1
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <CalculateTimer3Period+0x110>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf4:	ee17 0a90 	vmov	r0, s15
 8001bf8:	f7fe fca6 	bl	8000548 <__aeabi_f2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fcf8 	bl	80005f8 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	a12c      	add	r1, pc, #176	; (adr r1, 8001cc0 <CalculateTimer3Period+0x100>)
 8001c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c12:	f7fe fe1b 	bl	800084c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ffe3 	bl	8000be8 <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc8f 	bl	8000548 <__aeabi_f2d>
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <CalculateTimer3Period+0x114>)
 8001c30:	f7fe fb2c 	bl	800028c <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ff8c 	bl	8000b58 <__aeabi_d2iz>
 8001c40:	4603      	mov	r3, r0
 8001c42:	e036      	b.n	8001cb2 <CalculateTimer3Period+0xf2>
	}
	else
	{
		return (int)((float)(15000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001c44:	edd7 7a00 	vldr	s15, [r7]
 8001c48:	eef0 7ae7 	vabs.f32	s15, s15
 8001c4c:	ee17 0a90 	vmov	r0, s15
 8001c50:	f7fe fc7a 	bl	8000548 <__aeabi_f2d>
 8001c54:	4604      	mov	r4, r0
 8001c56:	460d      	mov	r5, r1
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <CalculateTimer3Period+0x110>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c64:	ee17 0a90 	vmov	r0, s15
 8001c68:	f7fe fc6e 	bl	8000548 <__aeabi_f2d>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	f7fe fcc0 	bl	80005f8 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	a112      	add	r1, pc, #72	; (adr r1, 8001cc8 <CalculateTimer3Period+0x108>)
 8001c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c82:	f7fe fde3 	bl	800084c <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ffab 	bl	8000be8 <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc57 	bl	8000548 <__aeabi_f2d>
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <CalculateTimer3Period+0x114>)
 8001ca0:	f7fe faf4 	bl	800028c <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ff54 	bl	8000b58 <__aeabi_d2iz>
 8001cb0:	4603      	mov	r3, r0
	}
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	419c9c38 	.word	0x419c9c38
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	416c9c38 	.word	0x416c9c38
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	3fe00000 	.word	0x3fe00000

08001cd8 <CheckGoingToRefPosition>:

bool CheckGoingToRefPosition(bool _direction, int RefPulsePosition) // return true when finish going down, else return false;
// direction = true => go down, false => go up
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
	if (MotorDriver) // FDA7000 Driver, PosCmd based
 8001ce4:	4bad      	ldr	r3, [pc, #692]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80a9 	beq.w	8001e40 <CheckGoingToRefPosition+0x168>
	{
		//if (abs(RefPulsePosition - EgearRatio*PositionPulseCmd) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/120)) // Start reducing the speed
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/60))
 8001cee:	4bac      	ldr	r3, [pc, #688]	; (8001fa0 <CheckGoingToRefPosition+0x2c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	1ad2      	subs	r2, r2, r3
 8001cf6:	4bab      	ldr	r3, [pc, #684]	; (8001fa4 <CheckGoingToRefPosition+0x2cc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001d00:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001d04:	4ba8      	ldr	r3, [pc, #672]	; (8001fa8 <CheckGoingToRefPosition+0x2d0>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4ba8      	ldr	r3, [pc, #672]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	49a7      	ldr	r1, [pc, #668]	; (8001fb0 <CheckGoingToRefPosition+0x2d8>)
 8001d14:	fb81 0103 	smull	r0, r1, r1, r3
 8001d18:	10c9      	asrs	r1, r1, #3
 8001d1a:	17db      	asrs	r3, r3, #31
 8001d1c:	1acb      	subs	r3, r1, r3
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dc30      	bgt.n	8001d84 <CheckGoingToRefPosition+0xac>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <CheckGoingToRefPosition+0x72>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20); //-EpsilonPulling means the spd is negative
 8001d28:	4ba2      	ldr	r3, [pc, #648]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	eef1 7a67 	vneg.f32	s15, s15
 8001d32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	489d      	ldr	r0, [pc, #628]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001d44:	f7ff fe7c 	bl	8001a40 <LinearGeneration>
 8001d48:	e00d      	b.n	8001d66 <CheckGoingToRefPosition+0x8e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10,PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20); //-EpsilonPulling means the spd is negative
 8001d4a:	4b9a      	ldr	r3, [pc, #616]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d58:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d60:	4895      	ldr	r0, [pc, #596]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001d62:	f7ff fe6d 	bl	8001a40 <LinearGeneration>
			}
			Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);			
 8001d66:	4b8d      	ldr	r3, [pc, #564]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	4a93      	ldr	r2, [pc, #588]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001d6c:	edd2 7a00 	vldr	s15, [r2]
 8001d70:	eeb0 0a67 	vmov.f32	s0, s15
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff23 	bl	8001bc0 <CalculateTimer3Period>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e044      	b.n	8001e0e <CheckGoingToRefPosition+0x136>
		}
		else // Acclerate going
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d014      	beq.n	8001db4 <CheckGoingToRefPosition+0xdc>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001d8a:	4b8a      	ldr	r3, [pc, #552]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d98:	4b84      	ldr	r3, [pc, #528]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	ee07 3a10 	vmov	s14, r3
 8001da0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001da4:	eef0 0a47 	vmov.f32	s1, s14
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	4882      	ldr	r0, [pc, #520]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001dae:	f7ff fe47 	bl	8001a40 <LinearGeneration>
 8001db2:	e016      	b.n	8001de2 <CheckGoingToRefPosition+0x10a>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed); //-EpsilonPulling means the spd is negative
 8001db4:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eef1 7a67 	vneg.f32	s15, s15
 8001dbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	425b      	negs	r3, r3
 8001dcc:	ee07 3a10 	vmov	s14, r3
 8001dd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dd4:	eef0 0a47 	vmov.f32	s1, s14
 8001dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ddc:	4876      	ldr	r0, [pc, #472]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001dde:	f7ff fe2f 	bl	8001a40 <LinearGeneration>
			}	
			
			if (SpeedCmd != 0)
 8001de2:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df0:	d00d      	beq.n	8001e0e <CheckGoingToRefPosition+0x136>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);					
 8001df2:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4a70      	ldr	r2, [pc, #448]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001df8:	edd2 7a00 	vldr	s15, [r2]
 8001dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fedd 	bl	8001bc0 <CalculateTimer3Period>
 8001e06:	4603      	mov	r3, r0
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001e0c:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
			}
			//PrePullingSpeed = SpeedCmd;
		}
		if ( abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 1000) // Reach the ref position
 8001e0e:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <CheckGoingToRefPosition+0x2c8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <CheckGoingToRefPosition+0x2cc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bfb8      	it	lt
 8001e20:	425b      	neglt	r3, r3
 8001e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e26:	f300 80b3 	bgt.w	8001f90 <CheckGoingToRefPosition+0x2b8>
		{	
//			RunningTime = 0;
//			RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001e30:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();			
 8001e38:	f7ff fe60 	bl	8001afc <StopPulseGenerating>
			return true;			
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0a8      	b.n	8001f92 <CheckGoingToRefPosition+0x2ba>
		}			
	}
	else // ASDA A3, Actual Encoder based
	{
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/90)) // Start reducing the speed
 8001e40:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <CheckGoingToRefPosition+0x2c8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	1ad2      	subs	r2, r2, r3
 8001e48:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <CheckGoingToRefPosition+0x2cc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e52:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e56:	4b54      	ldr	r3, [pc, #336]	; (8001fa8 <CheckGoingToRefPosition+0x2d0>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4b53      	ldr	r3, [pc, #332]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4956      	ldr	r1, [pc, #344]	; (8001fc0 <CheckGoingToRefPosition+0x2e8>)
 8001e66:	fb81 0103 	smull	r0, r1, r1, r3
 8001e6a:	4419      	add	r1, r3
 8001e6c:	1109      	asrs	r1, r1, #4
 8001e6e:	17db      	asrs	r3, r3, #31
 8001e70:	1acb      	subs	r3, r1, r3
 8001e72:	429a      	cmp	r2, r3
 8001e74:	dc30      	bgt.n	8001ed8 <CheckGoingToRefPosition+0x200>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <CheckGoingToRefPosition+0x1c6>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20);
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	eef1 7a67 	vneg.f32	s15, s15
 8001e86:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001e92:	eeb0 0a67 	vmov.f32	s0, s15
 8001e96:	4848      	ldr	r0, [pc, #288]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001e98:	f7ff fdd2 	bl	8001a40 <LinearGeneration>
 8001e9c:	e00d      	b.n	8001eba <CheckGoingToRefPosition+0x1e2>
				//SpeedCmd = LinearGeneration(RunningTime2,-GoingAcceleration*10,PrePullingSpeed,20,PullingSpeed); //-EpsilonPulling means the spd is negative
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20);
 8001e9e:	4b45      	ldr	r3, [pc, #276]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eac:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb4:	4840      	ldr	r0, [pc, #256]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001eb6:	f7ff fdc3 	bl	8001a40 <LinearGeneration>
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10, PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
			}
			Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);			
 8001eba:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4a3e      	ldr	r2, [pc, #248]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001ec0:	edd2 7a00 	vldr	s15, [r2]
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fe79 	bl	8001bc0 <CalculateTimer3Period>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	e044      	b.n	8001f62 <CheckGoingToRefPosition+0x28a>
		
		else
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d014      	beq.n	8001f08 <CheckGoingToRefPosition+0x230>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eec:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	ee07 3a10 	vmov	s14, r3
 8001ef4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001ef8:	eef0 0a47 	vmov.f32	s1, s14
 8001efc:	eeb0 0a67 	vmov.f32	s0, s15
 8001f00:	482d      	ldr	r0, [pc, #180]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f02:	f7ff fd9d 	bl	8001a40 <LinearGeneration>
 8001f06:	e016      	b.n	8001f36 <CheckGoingToRefPosition+0x25e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration*10,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed);
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	eef1 7a67 	vneg.f32	s15, s15
 8001f12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	425b      	negs	r3, r3
 8001f20:	ee07 3a10 	vmov	s14, r3
 8001f24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f28:	eef0 0a47 	vmov.f32	s1, s14
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f32:	f7ff fd85 	bl	8001a40 <LinearGeneration>
			}	
			
			if (SpeedCmd != 0)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	d00d      	beq.n	8001f62 <CheckGoingToRefPosition+0x28a>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);					
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f4c:	edd2 7a00 	vldr	s15, [r2]
 8001f50:	eeb0 0a67 	vmov.f32	s0, s15
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fe33 	bl	8001bc0 <CalculateTimer3Period>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001f60:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
			}
			//PrePullingSpeed = SpeedCmd;
		}
		
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 100) // Reach the bottom position
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <CheckGoingToRefPosition+0x2c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <CheckGoingToRefPosition+0x2cc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bfb8      	it	lt
 8001f74:	425b      	neglt	r3, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	dc0a      	bgt.n	8001f90 <CheckGoingToRefPosition+0x2b8>
		{
			//RunningTime = 0;
			//RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;		
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();				
 8001f88:	f7ff fdb8 	bl	8001afc <StopPulseGenerating>
			return true;			
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <CheckGoingToRefPosition+0x2ba>
		}
	}
	return false;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000003 	.word	0x20000003
 8001fa0:	200004f8 	.word	0x200004f8
 8001fa4:	200004b0 	.word	0x200004b0
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	2000045d 	.word	0x2000045d
 8001fb0:	66666667 	.word	0x66666667
 8001fb4:	20000460 	.word	0x20000460
 8001fb8:	200004fc 	.word	0x200004fc
 8001fbc:	20000450 	.word	0x20000450
 8001fc0:	88888889 	.word	0x88888889

08001fc4 <InitGoingToStartingPosition>:

void InitGoingToStartingPosition ()
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	if (MotorDriver) // HIGEN FDA7000
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <InitGoingToStartingPosition+0x128>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d045      	beq.n	800205c <InitGoingToStartingPosition+0x98>
	{
		//if (PositionPulseCmd*EgearRatio < PullingBotomPulseCmdPosition) // Then going down to the bottom
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition)
 8001fd0:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1ad2      	subs	r2, r2, r3
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	da0c      	bge.n	8001ffc <InitGoingToStartingPosition+0x38>
		{
			StartAccleratePulling = false;
 8001fe2:	4b46      	ldr	r3, [pc, #280]	; (80020fc <InitGoingToStartingPosition+0x138>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001fe8:	4b45      	ldr	r3, [pc, #276]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = false; // false = Dropping Down
 8001fee:	4b45      	ldr	r3, [pc, #276]	; (8002104 <InitGoingToStartingPosition+0x140>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001ff4:	f7ff f938 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			StartPulseGenerating();
 8001ff8:	f7ff fd9e 	bl	8001b38 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1ad2      	subs	r2, r2, r3
 8002006:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	dd0c      	ble.n	8002028 <InitGoingToStartingPosition+0x64>
		{
			StartAccleratePulling = false;
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <InitGoingToStartingPosition+0x138>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = true; // false = Dropping Down, true = Going up
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <InitGoingToStartingPosition+0x140>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002020:	f7ff f922 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			StartPulseGenerating();
 8002024:	f7ff fd88 	bl	8001b38 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8002028:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d155      	bne.n	80020e6 <InitGoingToStartingPosition+0x122>
		{
			StartAccleratePulling = true;
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <InitGoingToStartingPosition+0x138>)
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage				
 8002040:	4b31      	ldr	r3, [pc, #196]	; (8002108 <InitGoingToStartingPosition+0x144>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
			Direction = false;				
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
			
			PRIsToggled = true; // true = pulling up.
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <InitGoingToStartingPosition+0x140>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002052:	f7ff f909 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8002056:	f7ff fd6f 	bl	8001b38 <StartPulseGenerating>
			PRIsToggled = true; // true = pulling up.
			DisableSTOP(); // Disable the stop
			StartPulseGenerating();
		}	
	}
}
 800205a:	e044      	b.n	80020e6 <InitGoingToStartingPosition+0x122>
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition) // Then going down to the bottom
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1ad2      	subs	r2, r2, r3
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	da0c      	bge.n	8002088 <InitGoingToStartingPosition+0xc4>
			StartAccleratePulling = false;
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <InitGoingToStartingPosition+0x138>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <InitGoingToStartingPosition+0x140>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002080:	f7ff f8f2 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8002084:	f7ff fd58 	bl	8001b38 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1ad2      	subs	r2, r2, r3
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	dd0c      	ble.n	80020b4 <InitGoingToStartingPosition+0xf0>
			StartAccleratePulling = false;
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <InitGoingToStartingPosition+0x138>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // false = Dropping Down, true = Going up
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <InitGoingToStartingPosition+0x140>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 80020ac:	f7ff f8dc 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 80020b0:	f7ff fd42 	bl	8001b38 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	1ad2      	subs	r2, r2, r3
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d10f      	bne.n	80020e6 <InitGoingToStartingPosition+0x122>
			StartAccleratePulling = true;
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <InitGoingToStartingPosition+0x138>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage				
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <InitGoingToStartingPosition+0x144>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
			Direction = false;				
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <InitGoingToStartingPosition+0x140>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 80020de:	f7ff f8c3 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 80020e2:	f7ff fd29 	bl	8001b38 <StartPulseGenerating>
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000003 	.word	0x20000003
 80020f0:	200004f8 	.word	0x200004f8
 80020f4:	200004b0 	.word	0x200004b0
 80020f8:	200004a0 	.word	0x200004a0
 80020fc:	2000043f 	.word	0x2000043f
 8002100:	20000435 	.word	0x20000435
 8002104:	20000446 	.word	0x20000446
 8002108:	2000043a 	.word	0x2000043a

0800210c <InitializeRunning>:
// Init variable for running
void InitializeRunning (uint8_t Mode)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
	switch (Mode)
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d029      	beq.n	8002170 <InitializeRunning+0x64>
 800211c:	2b03      	cmp	r3, #3
 800211e:	dc36      	bgt.n	800218e <InitializeRunning+0x82>
 8002120:	2b01      	cmp	r3, #1
 8002122:	d002      	beq.n	800212a <InitializeRunning+0x1e>
 8002124:	2b02      	cmp	r3, #2
 8002126:	d01a      	beq.n	800215e <InitializeRunning+0x52>
			StartPulling = true; // Pulling Stage Firse
			StartDropping = false;
			InitGoingToStartingPosition ();					
			break;
		default:
			break;
 8002128:	e031      	b.n	800218e <InitializeRunning+0x82>
			StartRunning = true;
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <InitializeRunning+0x8c>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
			StartDropping = true;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <InitializeRunning+0x90>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
			StartBraking = false;
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <InitializeRunning+0x94>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <InitializeRunning+0x98>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
			StartPulling = false;		
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <InitializeRunning+0x9c>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <InitializeRunning+0xa0>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <InitializeRunning+0xa4>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002154:	f7ff f888 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8002158:	f7ff fcee 	bl	8001b38 <StartPulseGenerating>
			break;
 800215c:	e018      	b.n	8002190 <InitializeRunning+0x84>
			StartRunning = true;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <InitializeRunning+0x8c>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <InitializeRunning+0xa0>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();
 800216a:	f7ff ff2b 	bl	8001fc4 <InitGoingToStartingPosition>
			break;
 800216e:	e00f      	b.n	8002190 <InitializeRunning+0x84>
			StartRunning = true;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <InitializeRunning+0x8c>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <InitializeRunning+0xa0>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
			StartPulling = true; // Pulling Stage Firse
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <InitializeRunning+0x9c>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <InitializeRunning+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();					
 8002188:	f7ff ff1c 	bl	8001fc4 <InitGoingToStartingPosition>
			break;
 800218c:	e000      	b.n	8002190 <InitializeRunning+0x84>
			break;
 800218e:	bf00      	nop
	}
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000434 	.word	0x20000434
 800219c:	20000433 	.word	0x20000433
 80021a0:	2000043a 	.word	0x2000043a
 80021a4:	20000435 	.word	0x20000435
 80021a8:	20000439 	.word	0x20000439
 80021ac:	20000440 	.word	0x20000440
 80021b0:	20000446 	.word	0x20000446
 80021b4:	00000000 	.word	0x00000000

080021b8 <PullingExperiment>:

bool PullingExperiment ()
{
 80021b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021bc:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 80021be:	4b92      	ldr	r3, [pc, #584]	; (8002408 <PullingExperiment+0x250>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <PullingExperiment+0x12>
	{
		return true;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e29b      	b.n	8002702 <PullingExperiment+0x54a>
	}
	else
	{
		if (!StartAccleratePulling) 
 80021ca:	4b90      	ldr	r3, [pc, #576]	; (800240c <PullingExperiment+0x254>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	f083 0301 	eor.w	r3, r3, #1
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d029      	beq.n	800222c <PullingExperiment+0x74>
		{
			if (CheckGoingToRefPosition(true, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 80021d8:	4b8d      	ldr	r3, [pc, #564]	; (8002410 <PullingExperiment+0x258>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff fd7a 	bl	8001cd8 <CheckGoingToRefPosition>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d01e      	beq.n	8002228 <PullingExperiment+0x70>
			{
				if (WaitingMiliSecond(StoppingTime)) // Wait for some seconds
 80021ea:	4b8a      	ldr	r3, [pc, #552]	; (8002414 <PullingExperiment+0x25c>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fcc0 	bl	8001b74 <WaitingMiliSecond>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d014      	beq.n	8002224 <PullingExperiment+0x6c>
				{					
					StartAccleratePulling = true; // turn on flag to start acclerating pulling
 80021fa:	4b84      	ldr	r3, [pc, #528]	; (800240c <PullingExperiment+0x254>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
					Direction = false;
 8002200:	4b85      	ldr	r3, [pc, #532]	; (8002418 <PullingExperiment+0x260>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 8002206:	4b85      	ldr	r3, [pc, #532]	; (800241c <PullingExperiment+0x264>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
					
					PRIsToggled = true; // true = pulling up.
 800220c:	4b84      	ldr	r3, [pc, #528]	; (8002420 <PullingExperiment+0x268>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
					DisableSTOP(); // Disable the stop
 8002212:	f7ff f829 	bl	8001268 <DisableSTOP>
					StartPulseGenerating();
 8002216:	f7ff fc8f 	bl	8001b38 <StartPulseGenerating>
					PreAccRef = AccRef;
 800221a:	4b82      	ldr	r3, [pc, #520]	; (8002424 <PullingExperiment+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a82      	ldr	r2, [pc, #520]	; (8002428 <PullingExperiment+0x270>)
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e26d      	b.n	8002700 <PullingExperiment+0x548>
					//RunningTime = 0;
				}
				else return false;
 8002224:	2300      	movs	r3, #0
 8002226:	e26c      	b.n	8002702 <PullingExperiment+0x54a>
			}
			else return false;
 8002228:	2300      	movs	r3, #0
 800222a:	e26a      	b.n	8002702 <PullingExperiment+0x54a>
		}
		else // Start accelerate pulling
		{
			if (!StartBraking) // Accelerating Stage
 800222c:	4b7b      	ldr	r3, [pc, #492]	; (800241c <PullingExperiment+0x264>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f083 0301 	eor.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8112 	beq.w	8002460 <PullingExperiment+0x2a8>
			{
				//RunningTime += SampleTime;
				
				//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-PullingAccel, PreAccRef); // ramping the reference signal
				//LinearGeneration(&AccRef,-8,-9.6-PullingAccel); // ramping the reference signal
				AccRef = -9.6-PullingAccel;
 800223c:	4b7b      	ldr	r3, [pc, #492]	; (800242c <PullingExperiment+0x274>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f981 	bl	8000548 <__aeabi_f2d>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	a16b      	add	r1, pc, #428	; (adr r1, 80023f8 <PullingExperiment+0x240>)
 800224c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002250:	f7fe f81a 	bl	8000288 <__aeabi_dsub>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fcc4 	bl	8000be8 <__aeabi_d2f>
 8002260:	4603      	mov	r3, r0
 8002262:	4a70      	ldr	r2, [pc, #448]	; (8002424 <PullingExperiment+0x26c>)
 8002264:	6013      	str	r3, [r2, #0]
				// Calculate speed cmd
				
				
				if (IsOpenLoopControl) // Use open-loop control
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <PullingExperiment+0x278>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d037      	beq.n	80022de <PullingExperiment+0x126>
				{
					//SpeedCmd = LinearGeneration(RunningTime,-PullingEpsilonAcc*10,0,-PullingMaxSpeed,0);// Feedforward term
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term
					LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);
 800226e:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <PullingExperiment+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f968 	bl	8000548 <__aeabi_f2d>
 8002278:	a361      	add	r3, pc, #388	; (adr r3, 8002400 <PullingExperiment+0x248>)
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	f7fe f805 	bl	800028c <__adddf3>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	4b69      	ldr	r3, [pc, #420]	; (8002434 <PullingExperiment+0x27c>)
 8002290:	f7fe f9b2 	bl	80005f8 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4614      	mov	r4, r2
 800229a:	461d      	mov	r5, r3
 800229c:	4b66      	ldr	r3, [pc, #408]	; (8002438 <PullingExperiment+0x280>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f951 	bl	8000548 <__aeabi_f2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4620      	mov	r0, r4
 80022ac:	4629      	mov	r1, r5
 80022ae:	f7fe facd 	bl	800084c <__aeabi_ddiv>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fc95 	bl	8000be8 <__aeabi_d2f>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b5e      	ldr	r3, [pc, #376]	; (800243c <PullingExperiment+0x284>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	425b      	negs	r3, r3
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ce:	eef0 0a67 	vmov.f32	s1, s15
 80022d2:	ee00 2a10 	vmov	s0, r2
 80022d6:	485a      	ldr	r0, [pc, #360]	; (8002440 <PullingExperiment+0x288>)
 80022d8:	f7ff fbb2 	bl	8001a40 <LinearGeneration>
 80022dc:	e048      	b.n	8002370 <PullingExperiment+0x1b8>
				}
				else // Use closed loop Control
				{					
					AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 80022de:	4b51      	ldr	r3, [pc, #324]	; (8002424 <PullingExperiment+0x26c>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	4b57      	ldr	r3, [pc, #348]	; (8002444 <PullingExperiment+0x28c>)
 80022e6:	ed93 7a00 	vldr	s14, [r3]
 80022ea:	2201      	movs	r2, #1
 80022ec:	2105      	movs	r1, #5
 80022ee:	f06f 0004 	mvn.w	r0, #4
 80022f2:	eef0 0a47 	vmov.f32	s1, s14
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	f7ff f8f9 	bl	80014f0 <PIDCalculate>
 80022fe:	eef0 7a40 	vmov.f32	s15, s0
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <PullingExperiment+0x290>)
 8002304:	edc3 7a00 	vstr	s15, [r3]
					AccSet = AccSet + AccRef + 9.6;
 8002308:	4b4f      	ldr	r3, [pc, #316]	; (8002448 <PullingExperiment+0x290>)
 800230a:	ed93 7a00 	vldr	s14, [r3]
 800230e:	4b45      	ldr	r3, [pc, #276]	; (8002424 <PullingExperiment+0x26c>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002318:	ee17 0a90 	vmov	r0, s15
 800231c:	f7fe f914 	bl	8000548 <__aeabi_f2d>
 8002320:	a337      	add	r3, pc, #220	; (adr r3, 8002400 <PullingExperiment+0x248>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fd ffb1 	bl	800028c <__adddf3>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f7fe fc59 	bl	8000be8 <__aeabi_d2f>
 8002336:	4603      	mov	r3, r0
 8002338:	4a43      	ldr	r2, [pc, #268]	; (8002448 <PullingExperiment+0x290>)
 800233a:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,-PullingMaxSpeed,0); // Feedforwad
					//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term
					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,-PullingMaxSpeed);// Feedforward term
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <PullingExperiment+0x290>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002346:	ee27 7a87 	vmul.f32	s14, s15, s14
 800234a:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <PullingExperiment+0x280>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <PullingExperiment+0x284>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	425b      	negs	r3, r3
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002362:	eef0 0a67 	vmov.f32	s1, s15
 8002366:	eeb0 0a66 	vmov.f32	s0, s13
 800236a:	4835      	ldr	r0, [pc, #212]	; (8002440 <PullingExperiment+0x288>)
 800236c:	f7ff fb68 	bl	8001a40 <LinearGeneration>
				}
				
				if (SpeedCmd != 0)
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <PullingExperiment+0x288>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	eef5 7a40 	vcmp.f32	s15, #0.0
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	d00e      	beq.n	800239e <PullingExperiment+0x1e6>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);					
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <PullingExperiment+0x294>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4a2e      	ldr	r2, [pc, #184]	; (8002440 <PullingExperiment+0x288>)
 8002386:	edd2 7a00 	vldr	s15, [r2]
 800238a:	eeb0 0a67 	vmov.f32	s0, s15
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fc16 	bl	8001bc0 <CalculateTimer3Period>
 8002394:	4603      	mov	r3, r0
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <PullingExperiment+0x298>)
 800239a:	801a      	strh	r2, [r3, #0]
 800239c:	e001      	b.n	80023a2 <PullingExperiment+0x1ea>
					//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else 
				{
					StopPulseGenerating();
 800239e:	f7ff fbad 	bl	8001afc <StopPulseGenerating>
				}
				//if (fabs(SpeedCmd) >= PullingMaxSpeed)
				if ((fabs(ObjectPosition - PullingTotalDistance) >= PullingAccelDistance) || (SpeedCmd <= -PullingMaxSpeed)) // Switch to braking mode
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <PullingExperiment+0x29c>)
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <PullingExperiment+0x2a0>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b2:	eeb0 7ae7 	vabs.f32	s14, s15
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <PullingExperiment+0x2a4>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	da0f      	bge.n	80023e6 <PullingExperiment+0x22e>
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <PullingExperiment+0x284>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	425b      	negs	r3, r3
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <PullingExperiment+0x288>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e2:	f2c0 818d 	blt.w	8002700 <PullingExperiment+0x548>
				{
					//RunningTime = 0;
					StartBraking = true;
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <PullingExperiment+0x264>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
					//TransitionSpeed = SpeedCmd;
					PreAccRef = AccRef;
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <PullingExperiment+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <PullingExperiment+0x270>)
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e184      	b.n	8002700 <PullingExperiment+0x548>
 80023f6:	bf00      	nop
 80023f8:	33333333 	.word	0x33333333
 80023fc:	c0233333 	.word	0xc0233333
 8002400:	33333333 	.word	0x33333333
 8002404:	40233333 	.word	0x40233333
 8002408:	20000440 	.word	0x20000440
 800240c:	2000043f 	.word	0x2000043f
 8002410:	200004a0 	.word	0x200004a0
 8002414:	2000045e 	.word	0x2000045e
 8002418:	20000435 	.word	0x20000435
 800241c:	2000043a 	.word	0x2000043a
 8002420:	20000446 	.word	0x20000446
 8002424:	2000000c 	.word	0x2000000c
 8002428:	2000053c 	.word	0x2000053c
 800242c:	2000047c 	.word	0x2000047c
 8002430:	20000444 	.word	0x20000444
 8002434:	40240000 	.word	0x40240000
 8002438:	20000458 	.word	0x20000458
 800243c:	20000490 	.word	0x20000490
 8002440:	200004fc 	.word	0x200004fc
 8002444:	20000538 	.word	0x20000538
 8002448:	20000548 	.word	0x20000548
 800244c:	20000003 	.word	0x20000003
 8002450:	20000450 	.word	0x20000450
 8002454:	20000544 	.word	0x20000544
 8002458:	2000049c 	.word	0x2000049c
 800245c:	20000498 	.word	0x20000498
			else // Braking Stage
			{				
				//RunningTime += SampleTime;
				//AccRef = LinearGeneration(RunningTime,8,PreAccRef, PreAccRef, -9.6+PullingDecel); // ramping the reference signal
				//LinearGeneration(&AccRef,60,-9.6+PullingDecel); // ramping the reference signal
				AccRef = -9.6+PullingDecel;
 8002460:	4bad      	ldr	r3, [pc, #692]	; (8002718 <PullingExperiment+0x560>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f86f 	bl	8000548 <__aeabi_f2d>
 800246a:	a3a7      	add	r3, pc, #668	; (adr r3, 8002708 <PullingExperiment+0x550>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fd ff0a 	bl	8000288 <__aeabi_dsub>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fbb4 	bl	8000be8 <__aeabi_d2f>
 8002480:	4603      	mov	r3, r0
 8002482:	4aa6      	ldr	r2, [pc, #664]	; (800271c <PullingExperiment+0x564>)
 8002484:	6013      	str	r3, [r2, #0]
				if (IsOpenLoopControl)
 8002486:	4ba6      	ldr	r3, [pc, #664]	; (8002720 <PullingExperiment+0x568>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d072      	beq.n	8002574 <PullingExperiment+0x3bc>
				{
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,TransitionSpeed,TransitionSpeed,0);
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 800248e:	4ba5      	ldr	r3, [pc, #660]	; (8002724 <PullingExperiment+0x56c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe f858 	bl	8000548 <__aeabi_f2d>
 8002498:	4604      	mov	r4, r0
 800249a:	460d      	mov	r5, r1
 800249c:	4ba2      	ldr	r3, [pc, #648]	; (8002728 <PullingExperiment+0x570>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f83f 	bl	8000524 <__aeabi_i2d>
 80024a6:	a39a      	add	r3, pc, #616	; (adr r3, 8002710 <PullingExperiment+0x558>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f8a4 	bl	80005f8 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4690      	mov	r8, r2
 80024b6:	4699      	mov	r9, r3
 80024b8:	4b98      	ldr	r3, [pc, #608]	; (800271c <PullingExperiment+0x564>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f843 	bl	8000548 <__aeabi_f2d>
 80024c2:	a391      	add	r3, pc, #580	; (adr r3, 8002708 <PullingExperiment+0x550>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fd fee0 	bl	800028c <__adddf3>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4640      	mov	r0, r8
 80024d2:	4649      	mov	r1, r9
 80024d4:	f7fe f890 	bl	80005f8 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b91      	ldr	r3, [pc, #580]	; (800272c <PullingExperiment+0x574>)
 80024e6:	f7fe f887 	bl	80005f8 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4690      	mov	r8, r2
 80024f0:	4699      	mov	r9, r3
 80024f2:	4b8f      	ldr	r3, [pc, #572]	; (8002730 <PullingExperiment+0x578>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f826 	bl	8000548 <__aeabi_f2d>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4640      	mov	r0, r8
 8002502:	4649      	mov	r1, r9
 8002504:	f7fe f9a2 	bl	800084c <__aeabi_ddiv>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4620      	mov	r0, r4
 800250e:	4629      	mov	r1, r5
 8002510:	f7fd febc 	bl	800028c <__adddf3>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fb64 	bl	8000be8 <__aeabi_d2f>
 8002520:	4603      	mov	r3, r0
 8002522:	4a80      	ldr	r2, [pc, #512]	; (8002724 <PullingExperiment+0x56c>)
 8002524:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -PullingMaxSpeed)
 8002526:	4b83      	ldr	r3, [pc, #524]	; (8002734 <PullingExperiment+0x57c>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	425b      	negs	r3, r3
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002534:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <PullingExperiment+0x56c>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	db09      	blt.n	8002558 <PullingExperiment+0x3a0>
						SpeedCmd = -PullingMaxSpeed;
 8002544:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <PullingExperiment+0x57c>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	425b      	negs	r3, r3
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002552:	4b74      	ldr	r3, [pc, #464]	; (8002724 <PullingExperiment+0x56c>)
 8002554:	edc3 7a00 	vstr	s15, [r3]
					if (SpeedCmd >= 0)
 8002558:	4b72      	ldr	r3, [pc, #456]	; (8002724 <PullingExperiment+0x56c>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	f2c0 8094 	blt.w	8002692 <PullingExperiment+0x4da>
						SpeedCmd = 0;
 800256a:	4b6e      	ldr	r3, [pc, #440]	; (8002724 <PullingExperiment+0x56c>)
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e08e      	b.n	8002692 <PullingExperiment+0x4da>
				}
				else
				{
					AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 8002574:	4b69      	ldr	r3, [pc, #420]	; (800271c <PullingExperiment+0x564>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <PullingExperiment+0x580>)
 800257c:	ed93 7a00 	vldr	s14, [r3]
 8002580:	2201      	movs	r2, #1
 8002582:	2105      	movs	r1, #5
 8002584:	f06f 0004 	mvn.w	r0, #4
 8002588:	eef0 0a47 	vmov.f32	s1, s14
 800258c:	eeb0 0a67 	vmov.f32	s0, s15
 8002590:	f7fe ffae 	bl	80014f0 <PIDCalculate>
 8002594:	eef0 7a40 	vmov.f32	s15, s0
 8002598:	4b68      	ldr	r3, [pc, #416]	; (800273c <PullingExperiment+0x584>)
 800259a:	edc3 7a00 	vstr	s15, [r3]
					AccSet = AccSet + AccRef + 9.6;
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <PullingExperiment+0x584>)
 80025a0:	ed93 7a00 	vldr	s14, [r3]
 80025a4:	4b5d      	ldr	r3, [pc, #372]	; (800271c <PullingExperiment+0x564>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ae:	ee17 0a90 	vmov	r0, s15
 80025b2:	f7fd ffc9 	bl	8000548 <__aeabi_f2d>
 80025b6:	a354      	add	r3, pc, #336	; (adr r3, 8002708 <PullingExperiment+0x550>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fd fe66 	bl	800028c <__adddf3>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe fb0e 	bl	8000be8 <__aeabi_d2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a5b      	ldr	r2, [pc, #364]	; (800273c <PullingExperiment+0x584>)
 80025d0:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,TransitionSpeed,TransitionSpeed,0);// Feedforward term
					SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <PullingExperiment+0x56c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffb6 	bl	8000548 <__aeabi_f2d>
 80025dc:	4604      	mov	r4, r0
 80025de:	460d      	mov	r5, r1
 80025e0:	4b51      	ldr	r3, [pc, #324]	; (8002728 <PullingExperiment+0x570>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ff9d 	bl	8000524 <__aeabi_i2d>
 80025ea:	a349      	add	r3, pc, #292	; (adr r3, 8002710 <PullingExperiment+0x558>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fe f802 	bl	80005f8 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4690      	mov	r8, r2
 80025fa:	4699      	mov	r9, r3
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <PullingExperiment+0x584>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ffa1 	bl	8000548 <__aeabi_f2d>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4640      	mov	r0, r8
 800260c:	4649      	mov	r1, r9
 800260e:	f7fd fff3 	bl	80005f8 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4b43      	ldr	r3, [pc, #268]	; (800272c <PullingExperiment+0x574>)
 8002620:	f7fd ffea 	bl	80005f8 <__aeabi_dmul>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4690      	mov	r8, r2
 800262a:	4699      	mov	r9, r3
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <PullingExperiment+0x578>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff89 	bl	8000548 <__aeabi_f2d>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4640      	mov	r0, r8
 800263c:	4649      	mov	r1, r9
 800263e:	f7fe f905 	bl	800084c <__aeabi_ddiv>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4620      	mov	r0, r4
 8002648:	4629      	mov	r1, r5
 800264a:	f7fd fe1f 	bl	800028c <__adddf3>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fac7 	bl	8000be8 <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4a31      	ldr	r2, [pc, #196]	; (8002724 <PullingExperiment+0x56c>)
 800265e:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -810)
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <PullingExperiment+0x56c>)
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002740 <PullingExperiment+0x588>
 800266a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002672:	d802      	bhi.n	800267a <PullingExperiment+0x4c2>
						SpeedCmd = -810;
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <PullingExperiment+0x56c>)
 8002676:	4a33      	ldr	r2, [pc, #204]	; (8002744 <PullingExperiment+0x58c>)
 8002678:	601a      	str	r2, [r3, #0]
					if (SpeedCmd >= 0)
 800267a:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <PullingExperiment+0x56c>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	db03      	blt.n	8002692 <PullingExperiment+0x4da>
						SpeedCmd = 0;
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <PullingExperiment+0x56c>)
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
				}
				
				if (SpeedCmd != 0)
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <PullingExperiment+0x56c>)
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	eef5 7a40 	vcmp.f32	s15, #0.0
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	d00e      	beq.n	80026c0 <PullingExperiment+0x508>
				{
					// Calculate Timer3CountPeriod to generate pulse					
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <PullingExperiment+0x590>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <PullingExperiment+0x56c>)
 80026a8:	edd2 7a00 	vldr	s15, [r2]
 80026ac:	eeb0 0a67 	vmov.f32	s0, s15
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fa85 	bl	8001bc0 <CalculateTimer3Period>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <PullingExperiment+0x594>)
 80026bc:	801a      	strh	r2, [r3, #0]
 80026be:	e001      	b.n	80026c4 <PullingExperiment+0x50c>
					//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else 
				{
					StopPulseGenerating();
 80026c0:	f7ff fa1c 	bl	8001afc <StopPulseGenerating>
				}	
				if (SpeedCmd >= 0) // Stop braking
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <PullingExperiment+0x56c>)
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	db15      	blt.n	8002700 <PullingExperiment+0x548>
				{
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <PullingExperiment+0x56c>)
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
					
					ResetPIDController();
 80026dc:	f7fe ffc0 	bl	8001660 <ResetPIDController>
					AccRef = - 9.8;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <PullingExperiment+0x564>)
 80026e2:	4a1b      	ldr	r2, [pc, #108]	; (8002750 <PullingExperiment+0x598>)
 80026e4:	601a      	str	r2, [r3, #0]
					
					StartBraking = false;
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <PullingExperiment+0x59c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
					StartAccleratePulling = false;
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <PullingExperiment+0x5a0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
					StopPulseGenerating();
 80026f2:	f7ff fa03 	bl	8001afc <StopPulseGenerating>
					CompleteRunning = true; // Set this flag to return true in the next time
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <PullingExperiment+0x5a4>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
					return true;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <PullingExperiment+0x54a>
				}
			}	
		}
		return false;		
 8002700:	2300      	movs	r3, #0
	}	
}
 8002702:	4618      	mov	r0, r3
 8002704:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002708:	33333333 	.word	0x33333333
 800270c:	40233333 	.word	0x40233333
 8002710:	d2f1a9fc 	.word	0xd2f1a9fc
 8002714:	3f50624d 	.word	0x3f50624d
 8002718:	20000480 	.word	0x20000480
 800271c:	2000000c 	.word	0x2000000c
 8002720:	20000444 	.word	0x20000444
 8002724:	200004fc 	.word	0x200004fc
 8002728:	2000045c 	.word	0x2000045c
 800272c:	40240000 	.word	0x40240000
 8002730:	20000458 	.word	0x20000458
 8002734:	20000490 	.word	0x20000490
 8002738:	20000538 	.word	0x20000538
 800273c:	20000548 	.word	0x20000548
 8002740:	c44a8000 	.word	0xc44a8000
 8002744:	c44a8000 	.word	0xc44a8000
 8002748:	20000003 	.word	0x20000003
 800274c:	20000450 	.word	0x20000450
 8002750:	c11ccccd 	.word	0xc11ccccd
 8002754:	2000043a 	.word	0x2000043a
 8002758:	2000043f 	.word	0x2000043f
 800275c:	20000440 	.word	0x20000440

08002760 <PullAndDrop>:

bool PullAndDrop ()
{
 8002760:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002764:	ed2d 8b02 	vpush	{d8}
 8002768:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 800276a:	4bad      	ldr	r3, [pc, #692]	; (8002a20 <PullAndDrop+0x2c0>)
 800276c:	781b      	ldrb	r3, [r3, #0]
 800276e:	2b00      	cmp	r3, #0
 8002770:	d002      	beq.n	8002778 <PullAndDrop+0x18>
	{
		return true;
 8002772:	2301      	movs	r3, #1
 8002774:	f000 bcdb 	b.w	800312e <PullAndDrop+0x9ce>
	}
	else
	{
		// BEGIN PULLING UP
		if (StartPulling && !StartDropping) // Pulling Task
 8002778:	4baa      	ldr	r3, [pc, #680]	; (8002a24 <PullAndDrop+0x2c4>)
 800277a:	781b      	ldrb	r3, [r3, #0]
 800277c:	2b00      	cmp	r3, #0
 800277e:	f000 8299 	beq.w	8002cb4 <PullAndDrop+0x554>
 8002782:	4ba9      	ldr	r3, [pc, #676]	; (8002a28 <PullAndDrop+0x2c8>)
 8002784:	781b      	ldrb	r3, [r3, #0]
 8002786:	f083 0301 	eor.w	r3, r3, #1
 800278a:	b2db      	uxtb	r3, r3
 800278c:	2b00      	cmp	r3, #0
 800278e:	f000 8291 	beq.w	8002cb4 <PullAndDrop+0x554>
		{
			// First Pulling up including going to the initial position
			if (!StartAccleratePulling) 
 8002792:	4ba6      	ldr	r3, [pc, #664]	; (8002a2c <PullAndDrop+0x2cc>)
 8002794:	781b      	ldrb	r3, [r3, #0]
 8002796:	f083 0301 	eor.w	r3, r3, #1
 800279a:	b2db      	uxtb	r3, r3
 800279c:	2b00      	cmp	r3, #0
 800279e:	d02d      	beq.n	80027fc <PullAndDrop+0x9c>
			{
				// Going to the initial position first
				// Direction = true => going down
				// Direction = false => Going up
				if (CheckGoingToRefPosition(Direction, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 80027a0:	4ba3      	ldr	r3, [pc, #652]	; (8002a30 <PullAndDrop+0x2d0>)
 80027a2:	781b      	ldrb	r3, [r3, #0]
 80027a4:	4aa3      	ldr	r2, [pc, #652]	; (8002a34 <PullAndDrop+0x2d4>)
 80027a6:	6812      	ldr	r2, [r2, #0]
 80027a8:	4611      	mov	r1, r2
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7ff fa94 	bl	8001cd8 <CheckGoingToRefPosition>
 80027b0:	4603      	mov	r3, r0
 80027b2:	2b00      	cmp	r3, #0
 80027b4:	d01f      	beq.n	80027f6 <PullAndDrop+0x96>
				{
					//BottomPosition = ObjectPosition;
					if (WaitingMiliSecond(StoppingTime)) // Wait for some seconds
 80027b6:	4ba0      	ldr	r3, [pc, #640]	; (8002a38 <PullAndDrop+0x2d8>)
 80027b8:	881b      	ldrh	r3, [r3, #0]
 80027ba:	4618      	mov	r0, r3
 80027bc:	f7ff f9da 	bl	8001b74 <WaitingMiliSecond>
 80027c0:	4603      	mov	r3, r0
 80027c2:	2b00      	cmp	r3, #0
 80027c4:	d014      	beq.n	80027f0 <PullAndDrop+0x90>
					{
						StartAccleratePulling = true; // turn on flag to start acclerating pulling
 80027c6:	4b99      	ldr	r3, [pc, #612]	; (8002a2c <PullAndDrop+0x2cc>)
 80027c8:	2201      	movs	r2, #1
 80027ca:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up to count the position pulse cmd
 80027cc:	4b98      	ldr	r3, [pc, #608]	; (8002a30 <PullAndDrop+0x2d0>)
 80027ce:	2200      	movs	r2, #0
 80027d0:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 80027d2:	4b9a      	ldr	r3, [pc, #616]	; (8002a3c <PullAndDrop+0x2dc>)
 80027d4:	2200      	movs	r2, #0
 80027d6:	701a      	strb	r2, [r3, #0]

						PreAccRef = AccRef;
 80027d8:	4b99      	ldr	r3, [pc, #612]	; (8002a40 <PullAndDrop+0x2e0>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a99      	ldr	r2, [pc, #612]	; (8002a44 <PullAndDrop+0x2e4>)
 80027de:	6013      	str	r3, [r2, #0]

						PRIsToggled = true; // true = pulling up.
 80027e0:	4b99      	ldr	r3, [pc, #612]	; (8002a48 <PullAndDrop+0x2e8>)
 80027e2:	2201      	movs	r2, #1
 80027e4:	701a      	strb	r2, [r3, #0]
						DisableSTOP(); // Disable the stop
 80027e6:	f7fe fd3f 	bl	8001268 <DisableSTOP>
						StartPulseGenerating();			
 80027ea:	f7ff f9a5 	bl	8001b38 <StartPulseGenerating>
 80027ee:	e261      	b.n	8002cb4 <PullAndDrop+0x554>
					}
					else return false;
 80027f0:	2300      	movs	r3, #0
 80027f2:	f000 bc9c 	b.w	800312e <PullAndDrop+0x9ce>
				}
				else return false;
 80027f6:	2300      	movs	r3, #0
 80027f8:	f000 bc99 	b.w	800312e <PullAndDrop+0x9ce>
			}
			else // Start accelerated pulling
			{
				if (!StartBraking) // Accelerating Stage
 80027fc:	4b8f      	ldr	r3, [pc, #572]	; (8002a3c <PullAndDrop+0x2dc>)
 80027fe:	781b      	ldrb	r3, [r3, #0]
 8002800:	f083 0301 	eor.w	r3, r3, #1
 8002804:	b2db      	uxtb	r3, r3
 8002806:	2b00      	cmp	r3, #0
 8002808:	d075      	beq.n	80028f6 <PullAndDrop+0x196>
				{
					
					// Calculate speed cmd
					//RunningTime += SampleTime;
					if ( ((PullingBotomPulseCmdPosition - MotorEncPulse + OriginPulse)) >= FlyingPosPulseCmd) // unit: pulses)
 800280a:	4b8a      	ldr	r3, [pc, #552]	; (8002a34 <PullAndDrop+0x2d4>)
 800280c:	681a      	ldr	r2, [r3, #0]
 800280e:	4b8f      	ldr	r3, [pc, #572]	; (8002a4c <PullAndDrop+0x2ec>)
 8002810:	681b      	ldr	r3, [r3, #0]
 8002812:	1ad2      	subs	r2, r2, r3
 8002814:	4b8e      	ldr	r3, [pc, #568]	; (8002a50 <PullAndDrop+0x2f0>)
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	441a      	add	r2, r3
 800281a:	4b8e      	ldr	r3, [pc, #568]	; (8002a54 <PullAndDrop+0x2f4>)
 800281c:	681b      	ldr	r3, [r3, #0]
 800281e:	429a      	cmp	r2, r3
 8002820:	db02      	blt.n	8002828 <PullAndDrop+0xc8>
					{
						StartBraking = true;
 8002822:	4b86      	ldr	r3, [pc, #536]	; (8002a3c <PullAndDrop+0x2dc>)
 8002824:	2201      	movs	r2, #1
 8002826:	701a      	strb	r2, [r3, #0]
					}

					AccRef = -9.6-PullingAccel;
 8002828:	4b8b      	ldr	r3, [pc, #556]	; (8002a58 <PullAndDrop+0x2f8>)
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	4618      	mov	r0, r3
 800282e:	f7fd fe8b 	bl	8000548 <__aeabi_f2d>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	a174      	add	r1, pc, #464	; (adr r1, 8002a08 <PullAndDrop+0x2a8>)
 8002838:	e9d1 0100 	ldrd	r0, r1, [r1]
 800283c:	f7fd fd24 	bl	8000288 <__aeabi_dsub>
 8002840:	4602      	mov	r2, r0
 8002842:	460b      	mov	r3, r1
 8002844:	4610      	mov	r0, r2
 8002846:	4619      	mov	r1, r3
 8002848:	f7fe f9ce 	bl	8000be8 <__aeabi_d2f>
 800284c:	4603      	mov	r3, r0
 800284e:	4a7c      	ldr	r2, [pc, #496]	; (8002a40 <PullAndDrop+0x2e0>)
 8002850:	6013      	str	r3, [r2, #0]
						
					//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-PullingAccel, PreAccRef); // ramping the reference signal

					//LinearGeneration(&AccRef,-16,-9.6-PullingAccel); // ramping the reference signal
					
					LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);
 8002852:	4b7b      	ldr	r3, [pc, #492]	; (8002a40 <PullAndDrop+0x2e0>)
 8002854:	681b      	ldr	r3, [r3, #0]
 8002856:	4618      	mov	r0, r3
 8002858:	f7fd fe76 	bl	8000548 <__aeabi_f2d>
 800285c:	a36c      	add	r3, pc, #432	; (adr r3, 8002a10 <PullAndDrop+0x2b0>)
 800285e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002862:	f7fd fd13 	bl	800028c <__adddf3>
 8002866:	4602      	mov	r2, r0
 8002868:	460b      	mov	r3, r1
 800286a:	4610      	mov	r0, r2
 800286c:	4619      	mov	r1, r3
 800286e:	f04f 0200 	mov.w	r2, #0
 8002872:	4b7a      	ldr	r3, [pc, #488]	; (8002a5c <PullAndDrop+0x2fc>)
 8002874:	f7fd fec0 	bl	80005f8 <__aeabi_dmul>
 8002878:	4602      	mov	r2, r0
 800287a:	460b      	mov	r3, r1
 800287c:	4690      	mov	r8, r2
 800287e:	4699      	mov	r9, r3
 8002880:	4b77      	ldr	r3, [pc, #476]	; (8002a60 <PullAndDrop+0x300>)
 8002882:	681b      	ldr	r3, [r3, #0]
 8002884:	4618      	mov	r0, r3
 8002886:	f7fd fe5f 	bl	8000548 <__aeabi_f2d>
 800288a:	4602      	mov	r2, r0
 800288c:	460b      	mov	r3, r1
 800288e:	4640      	mov	r0, r8
 8002890:	4649      	mov	r1, r9
 8002892:	f7fd ffdb 	bl	800084c <__aeabi_ddiv>
 8002896:	4602      	mov	r2, r0
 8002898:	460b      	mov	r3, r1
 800289a:	4610      	mov	r0, r2
 800289c:	4619      	mov	r1, r3
 800289e:	f7fe f9a3 	bl	8000be8 <__aeabi_d2f>
 80028a2:	4602      	mov	r2, r0
 80028a4:	4b6f      	ldr	r3, [pc, #444]	; (8002a64 <PullAndDrop+0x304>)
 80028a6:	881b      	ldrh	r3, [r3, #0]
 80028a8:	425b      	negs	r3, r3
 80028aa:	ee07 3a90 	vmov	s15, r3
 80028ae:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80028b2:	eef0 0a67 	vmov.f32	s1, s15
 80028b6:	ee00 2a10 	vmov	s0, r2
 80028ba:	486b      	ldr	r0, [pc, #428]	; (8002a68 <PullAndDrop+0x308>)
 80028bc:	f7ff f8c0 	bl	8001a40 <LinearGeneration>
//						AccSet = AccSet + AccRef + 9.6;
//						//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,-PullingMaxSpeed,0); // Feedforwad
//						LinearGeneration(&SpeedCmd, AccSet*10/DrumRadius,-PullingMaxSpeed);// Feedforward term
//					}

					if (SpeedCmd != 0)
 80028c0:	4b69      	ldr	r3, [pc, #420]	; (8002a68 <PullAndDrop+0x308>)
 80028c2:	edd3 7a00 	vldr	s15, [r3]
 80028c6:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028ca:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028ce:	d00e      	beq.n	80028ee <PullAndDrop+0x18e>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80028d0:	4b66      	ldr	r3, [pc, #408]	; (8002a6c <PullAndDrop+0x30c>)
 80028d2:	781b      	ldrb	r3, [r3, #0]
 80028d4:	4a64      	ldr	r2, [pc, #400]	; (8002a68 <PullAndDrop+0x308>)
 80028d6:	edd2 7a00 	vldr	s15, [r2]
 80028da:	eeb0 0a67 	vmov.f32	s0, s15
 80028de:	4618      	mov	r0, r3
 80028e0:	f7ff f96e 	bl	8001bc0 <CalculateTimer3Period>
 80028e4:	4603      	mov	r3, r0
 80028e6:	b29a      	uxth	r2, r3
 80028e8:	4b61      	ldr	r3, [pc, #388]	; (8002a70 <PullAndDrop+0x310>)
 80028ea:	801a      	strh	r2, [r3, #0]
 80028ec:	e1e2      	b.n	8002cb4 <PullAndDrop+0x554>
						//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
					}
					else 
					{
						//StopPulseGenerating();
						PulseGenerationFlag = false; // Stop pulse generation
 80028ee:	4b61      	ldr	r3, [pc, #388]	; (8002a74 <PullAndDrop+0x314>)
 80028f0:	2200      	movs	r2, #0
 80028f2:	701a      	strb	r2, [r3, #0]
 80028f4:	e1de      	b.n	8002cb4 <PullAndDrop+0x554>

					
					
					//AccRef = -9.6+PullingDecel;

					LinearGeneration(&AccRef,FlyAccSlope,-9.6+PullingDecel);
 80028f6:	4b60      	ldr	r3, [pc, #384]	; (8002a78 <PullAndDrop+0x318>)
 80028f8:	ed93 8a00 	vldr	s16, [r3]
 80028fc:	4b5f      	ldr	r3, [pc, #380]	; (8002a7c <PullAndDrop+0x31c>)
 80028fe:	681b      	ldr	r3, [r3, #0]
 8002900:	4618      	mov	r0, r3
 8002902:	f7fd fe21 	bl	8000548 <__aeabi_f2d>
 8002906:	a342      	add	r3, pc, #264	; (adr r3, 8002a10 <PullAndDrop+0x2b0>)
 8002908:	e9d3 2300 	ldrd	r2, r3, [r3]
 800290c:	f7fd fcbc 	bl	8000288 <__aeabi_dsub>
 8002910:	4602      	mov	r2, r0
 8002912:	460b      	mov	r3, r1
 8002914:	4610      	mov	r0, r2
 8002916:	4619      	mov	r1, r3
 8002918:	f7fe f966 	bl	8000be8 <__aeabi_d2f>
 800291c:	4603      	mov	r3, r0
 800291e:	ee00 3a90 	vmov	s1, r3
 8002922:	eeb0 0a48 	vmov.f32	s0, s16
 8002926:	4846      	ldr	r0, [pc, #280]	; (8002a40 <PullAndDrop+0x2e0>)
 8002928:	f7ff f88a 	bl	8001a40 <LinearGeneration>

					if (IsOpenLoopControl) // Use open-loop control
 800292c:	4b54      	ldr	r3, [pc, #336]	; (8002a80 <PullAndDrop+0x320>)
 800292e:	781b      	ldrb	r3, [r3, #0]
 8002930:	2b00      	cmp	r3, #0
 8002932:	f000 80ad 	beq.w	8002a90 <PullAndDrop+0x330>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,PullingEpsilonDec,TransitionSpeed,-PullingMaxSpeed,0); // Feedforward term
						//LinearGeneration(&SpeedCmd,(AccRef + 9.6)*10/DrumRadius,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 8002936:	4b4c      	ldr	r3, [pc, #304]	; (8002a68 <PullAndDrop+0x308>)
 8002938:	681b      	ldr	r3, [r3, #0]
 800293a:	4618      	mov	r0, r3
 800293c:	f7fd fe04 	bl	8000548 <__aeabi_f2d>
 8002940:	4680      	mov	r8, r0
 8002942:	4689      	mov	r9, r1
 8002944:	4b4f      	ldr	r3, [pc, #316]	; (8002a84 <PullAndDrop+0x324>)
 8002946:	781b      	ldrb	r3, [r3, #0]
 8002948:	4618      	mov	r0, r3
 800294a:	f7fd fdeb 	bl	8000524 <__aeabi_i2d>
 800294e:	a332      	add	r3, pc, #200	; (adr r3, 8002a18 <PullAndDrop+0x2b8>)
 8002950:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002954:	f7fd fe50 	bl	80005f8 <__aeabi_dmul>
 8002958:	4602      	mov	r2, r0
 800295a:	460b      	mov	r3, r1
 800295c:	4692      	mov	sl, r2
 800295e:	469b      	mov	fp, r3
 8002960:	4b37      	ldr	r3, [pc, #220]	; (8002a40 <PullAndDrop+0x2e0>)
 8002962:	681b      	ldr	r3, [r3, #0]
 8002964:	4618      	mov	r0, r3
 8002966:	f7fd fdef 	bl	8000548 <__aeabi_f2d>
 800296a:	a329      	add	r3, pc, #164	; (adr r3, 8002a10 <PullAndDrop+0x2b0>)
 800296c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002970:	f7fd fc8c 	bl	800028c <__adddf3>
 8002974:	4602      	mov	r2, r0
 8002976:	460b      	mov	r3, r1
 8002978:	4650      	mov	r0, sl
 800297a:	4659      	mov	r1, fp
 800297c:	f7fd fe3c 	bl	80005f8 <__aeabi_dmul>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f04f 0200 	mov.w	r2, #0
 800298c:	4b33      	ldr	r3, [pc, #204]	; (8002a5c <PullAndDrop+0x2fc>)
 800298e:	f7fd fe33 	bl	80005f8 <__aeabi_dmul>
 8002992:	4602      	mov	r2, r0
 8002994:	460b      	mov	r3, r1
 8002996:	4692      	mov	sl, r2
 8002998:	469b      	mov	fp, r3
 800299a:	4b31      	ldr	r3, [pc, #196]	; (8002a60 <PullAndDrop+0x300>)
 800299c:	681b      	ldr	r3, [r3, #0]
 800299e:	4618      	mov	r0, r3
 80029a0:	f7fd fdd2 	bl	8000548 <__aeabi_f2d>
 80029a4:	4602      	mov	r2, r0
 80029a6:	460b      	mov	r3, r1
 80029a8:	4650      	mov	r0, sl
 80029aa:	4659      	mov	r1, fp
 80029ac:	f7fd ff4e 	bl	800084c <__aeabi_ddiv>
 80029b0:	4602      	mov	r2, r0
 80029b2:	460b      	mov	r3, r1
 80029b4:	4640      	mov	r0, r8
 80029b6:	4649      	mov	r1, r9
 80029b8:	f7fd fc68 	bl	800028c <__adddf3>
 80029bc:	4602      	mov	r2, r0
 80029be:	460b      	mov	r3, r1
 80029c0:	4610      	mov	r0, r2
 80029c2:	4619      	mov	r1, r3
 80029c4:	f7fe f910 	bl	8000be8 <__aeabi_d2f>
 80029c8:	4603      	mov	r3, r0
 80029ca:	4a27      	ldr	r2, [pc, #156]	; (8002a68 <PullAndDrop+0x308>)
 80029cc:	6013      	str	r3, [r2, #0]
						if (SpeedCmd <= -810)
 80029ce:	4b26      	ldr	r3, [pc, #152]	; (8002a68 <PullAndDrop+0x308>)
 80029d0:	edd3 7a00 	vldr	s15, [r3]
 80029d4:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 8002a88 <PullAndDrop+0x328>
 80029d8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	d802      	bhi.n	80029e8 <PullAndDrop+0x288>
							SpeedCmd = -810;
 80029e2:	4b21      	ldr	r3, [pc, #132]	; (8002a68 <PullAndDrop+0x308>)
 80029e4:	4a29      	ldr	r2, [pc, #164]	; (8002a8c <PullAndDrop+0x32c>)
 80029e6:	601a      	str	r2, [r3, #0]
						if (SpeedCmd >= 0)
 80029e8:	4b1f      	ldr	r3, [pc, #124]	; (8002a68 <PullAndDrop+0x308>)
 80029ea:	edd3 7a00 	vldr	s15, [r3]
 80029ee:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80029f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029f6:	f2c0 80cd 	blt.w	8002b94 <PullAndDrop+0x434>
							SpeedCmd = 0;
 80029fa:	4b1b      	ldr	r3, [pc, #108]	; (8002a68 <PullAndDrop+0x308>)
 80029fc:	f04f 0200 	mov.w	r2, #0
 8002a00:	601a      	str	r2, [r3, #0]
 8002a02:	e0c7      	b.n	8002b94 <PullAndDrop+0x434>
 8002a04:	f3af 8000 	nop.w
 8002a08:	33333333 	.word	0x33333333
 8002a0c:	c0233333 	.word	0xc0233333
 8002a10:	33333333 	.word	0x33333333
 8002a14:	40233333 	.word	0x40233333
 8002a18:	d2f1a9fc 	.word	0xd2f1a9fc
 8002a1c:	3f50624d 	.word	0x3f50624d
 8002a20:	20000440 	.word	0x20000440
 8002a24:	20000439 	.word	0x20000439
 8002a28:	20000433 	.word	0x20000433
 8002a2c:	2000043f 	.word	0x2000043f
 8002a30:	20000435 	.word	0x20000435
 8002a34:	200004a0 	.word	0x200004a0
 8002a38:	2000045e 	.word	0x2000045e
 8002a3c:	2000043a 	.word	0x2000043a
 8002a40:	2000000c 	.word	0x2000000c
 8002a44:	2000053c 	.word	0x2000053c
 8002a48:	20000446 	.word	0x20000446
 8002a4c:	200004f8 	.word	0x200004f8
 8002a50:	200004b0 	.word	0x200004b0
 8002a54:	200004a8 	.word	0x200004a8
 8002a58:	2000047c 	.word	0x2000047c
 8002a5c:	40240000 	.word	0x40240000
 8002a60:	20000458 	.word	0x20000458
 8002a64:	20000490 	.word	0x20000490
 8002a68:	200004fc 	.word	0x200004fc
 8002a6c:	20000003 	.word	0x20000003
 8002a70:	20000450 	.word	0x20000450
 8002a74:	2000043b 	.word	0x2000043b
 8002a78:	20000530 	.word	0x20000530
 8002a7c:	20000480 	.word	0x20000480
 8002a80:	20000444 	.word	0x20000444
 8002a84:	2000045c 	.word	0x2000045c
 8002a88:	c44a8000 	.word	0xc44a8000
 8002a8c:	c44a8000 	.word	0xc44a8000
					}
					else // Use closed loop Control
					{
						AccSet = PIDCalculate(AccRef,AccZ,-10,10, true); // PID term
 8002a90:	4b67      	ldr	r3, [pc, #412]	; (8002c30 <PullAndDrop+0x4d0>)
 8002a92:	edd3 7a00 	vldr	s15, [r3]
 8002a96:	4b67      	ldr	r3, [pc, #412]	; (8002c34 <PullAndDrop+0x4d4>)
 8002a98:	ed93 7a00 	vldr	s14, [r3]
 8002a9c:	2201      	movs	r2, #1
 8002a9e:	210a      	movs	r1, #10
 8002aa0:	f06f 0009 	mvn.w	r0, #9
 8002aa4:	eef0 0a47 	vmov.f32	s1, s14
 8002aa8:	eeb0 0a67 	vmov.f32	s0, s15
 8002aac:	f7fe fd20 	bl	80014f0 <PIDCalculate>
 8002ab0:	eef0 7a40 	vmov.f32	s15, s0
 8002ab4:	4b60      	ldr	r3, [pc, #384]	; (8002c38 <PullAndDrop+0x4d8>)
 8002ab6:	edc3 7a00 	vstr	s15, [r3]
						AccSet = AccSet + AccRef + 9.6;
 8002aba:	4b5f      	ldr	r3, [pc, #380]	; (8002c38 <PullAndDrop+0x4d8>)
 8002abc:	ed93 7a00 	vldr	s14, [r3]
 8002ac0:	4b5b      	ldr	r3, [pc, #364]	; (8002c30 <PullAndDrop+0x4d0>)
 8002ac2:	edd3 7a00 	vldr	s15, [r3]
 8002ac6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aca:	ee17 0a90 	vmov	r0, s15
 8002ace:	f7fd fd3b 	bl	8000548 <__aeabi_f2d>
 8002ad2:	a351      	add	r3, pc, #324	; (adr r3, 8002c18 <PullAndDrop+0x4b8>)
 8002ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ad8:	f7fd fbd8 	bl	800028c <__adddf3>
 8002adc:	4602      	mov	r2, r0
 8002ade:	460b      	mov	r3, r1
 8002ae0:	4610      	mov	r0, r2
 8002ae2:	4619      	mov	r1, r3
 8002ae4:	f7fe f880 	bl	8000be8 <__aeabi_d2f>
 8002ae8:	4603      	mov	r3, r0
 8002aea:	4a53      	ldr	r2, [pc, #332]	; (8002c38 <PullAndDrop+0x4d8>)
 8002aec:	6013      	str	r3, [r2, #0]
						//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,TransitionSpeed,TransitionSpeed,DroppingMaxSpeed); // Feedforward term
						//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,TransitionSpeed,-PullingMaxSpeed,0);// Feedforward term
						//LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,TransitionSpeed,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
 8002aee:	4b53      	ldr	r3, [pc, #332]	; (8002c3c <PullAndDrop+0x4dc>)
 8002af0:	681b      	ldr	r3, [r3, #0]
 8002af2:	4618      	mov	r0, r3
 8002af4:	f7fd fd28 	bl	8000548 <__aeabi_f2d>
 8002af8:	4680      	mov	r8, r0
 8002afa:	4689      	mov	r9, r1
 8002afc:	4b50      	ldr	r3, [pc, #320]	; (8002c40 <PullAndDrop+0x4e0>)
 8002afe:	781b      	ldrb	r3, [r3, #0]
 8002b00:	4618      	mov	r0, r3
 8002b02:	f7fd fd0f 	bl	8000524 <__aeabi_i2d>
 8002b06:	a346      	add	r3, pc, #280	; (adr r3, 8002c20 <PullAndDrop+0x4c0>)
 8002b08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b0c:	f7fd fd74 	bl	80005f8 <__aeabi_dmul>
 8002b10:	4602      	mov	r2, r0
 8002b12:	460b      	mov	r3, r1
 8002b14:	4692      	mov	sl, r2
 8002b16:	469b      	mov	fp, r3
 8002b18:	4b47      	ldr	r3, [pc, #284]	; (8002c38 <PullAndDrop+0x4d8>)
 8002b1a:	681b      	ldr	r3, [r3, #0]
 8002b1c:	4618      	mov	r0, r3
 8002b1e:	f7fd fd13 	bl	8000548 <__aeabi_f2d>
 8002b22:	4602      	mov	r2, r0
 8002b24:	460b      	mov	r3, r1
 8002b26:	4650      	mov	r0, sl
 8002b28:	4659      	mov	r1, fp
 8002b2a:	f7fd fd65 	bl	80005f8 <__aeabi_dmul>
 8002b2e:	4602      	mov	r2, r0
 8002b30:	460b      	mov	r3, r1
 8002b32:	4610      	mov	r0, r2
 8002b34:	4619      	mov	r1, r3
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	4b42      	ldr	r3, [pc, #264]	; (8002c44 <PullAndDrop+0x4e4>)
 8002b3c:	f7fd fd5c 	bl	80005f8 <__aeabi_dmul>
 8002b40:	4602      	mov	r2, r0
 8002b42:	460b      	mov	r3, r1
 8002b44:	4692      	mov	sl, r2
 8002b46:	469b      	mov	fp, r3
 8002b48:	4b3f      	ldr	r3, [pc, #252]	; (8002c48 <PullAndDrop+0x4e8>)
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	4618      	mov	r0, r3
 8002b4e:	f7fd fcfb 	bl	8000548 <__aeabi_f2d>
 8002b52:	4602      	mov	r2, r0
 8002b54:	460b      	mov	r3, r1
 8002b56:	4650      	mov	r0, sl
 8002b58:	4659      	mov	r1, fp
 8002b5a:	f7fd fe77 	bl	800084c <__aeabi_ddiv>
 8002b5e:	4602      	mov	r2, r0
 8002b60:	460b      	mov	r3, r1
 8002b62:	4640      	mov	r0, r8
 8002b64:	4649      	mov	r1, r9
 8002b66:	f7fd fb91 	bl	800028c <__adddf3>
 8002b6a:	4602      	mov	r2, r0
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	4610      	mov	r0, r2
 8002b70:	4619      	mov	r1, r3
 8002b72:	f7fe f839 	bl	8000be8 <__aeabi_d2f>
 8002b76:	4603      	mov	r3, r0
 8002b78:	4a30      	ldr	r2, [pc, #192]	; (8002c3c <PullAndDrop+0x4dc>)
 8002b7a:	6013      	str	r3, [r2, #0]
						if (SpeedCmd >= 0)
 8002b7c:	4b2f      	ldr	r3, [pc, #188]	; (8002c3c <PullAndDrop+0x4dc>)
 8002b7e:	edd3 7a00 	vldr	s15, [r3]
 8002b82:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b8a:	db03      	blt.n	8002b94 <PullAndDrop+0x434>
							SpeedCmd = 0;
 8002b8c:	4b2b      	ldr	r3, [pc, #172]	; (8002c3c <PullAndDrop+0x4dc>)
 8002b8e:	f04f 0200 	mov.w	r2, #0
 8002b92:	601a      	str	r2, [r3, #0]
					}

					if (SpeedCmd != 0)
 8002b94:	4b29      	ldr	r3, [pc, #164]	; (8002c3c <PullAndDrop+0x4dc>)
 8002b96:	edd3 7a00 	vldr	s15, [r3]
 8002b9a:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b9e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ba2:	d00e      	beq.n	8002bc2 <PullAndDrop+0x462>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002ba4:	4b29      	ldr	r3, [pc, #164]	; (8002c4c <PullAndDrop+0x4ec>)
 8002ba6:	781b      	ldrb	r3, [r3, #0]
 8002ba8:	4a24      	ldr	r2, [pc, #144]	; (8002c3c <PullAndDrop+0x4dc>)
 8002baa:	edd2 7a00 	vldr	s15, [r2]
 8002bae:	eeb0 0a67 	vmov.f32	s0, s15
 8002bb2:	4618      	mov	r0, r3
 8002bb4:	f7ff f804 	bl	8001bc0 <CalculateTimer3Period>
 8002bb8:	4603      	mov	r3, r0
 8002bba:	b29a      	uxth	r2, r3
 8002bbc:	4b24      	ldr	r3, [pc, #144]	; (8002c50 <PullAndDrop+0x4f0>)
 8002bbe:	801a      	strh	r2, [r3, #0]
 8002bc0:	e002      	b.n	8002bc8 <PullAndDrop+0x468>
						// Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
					}
					else
					{
						PulseGenerationFlag = false;
 8002bc2:	4b24      	ldr	r3, [pc, #144]	; (8002c54 <PullAndDrop+0x4f4>)
 8002bc4:	2200      	movs	r2, #0
 8002bc6:	701a      	strb	r2, [r3, #0]
					}
					if ((ObjectPosition <= 0.2) || (SpeedCmd >= 0)) // condition to switch to dropping stage
 8002bc8:	4b23      	ldr	r3, [pc, #140]	; (8002c58 <PullAndDrop+0x4f8>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fcbb 	bl	8000548 <__aeabi_f2d>
 8002bd2:	a315      	add	r3, pc, #84	; (adr r3, 8002c28 <PullAndDrop+0x4c8>)
 8002bd4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bd8:	f7fd ff8a 	bl	8000af0 <__aeabi_dcmple>
 8002bdc:	4603      	mov	r3, r0
 8002bde:	2b00      	cmp	r3, #0
 8002be0:	d107      	bne.n	8002bf2 <PullAndDrop+0x492>
 8002be2:	4b16      	ldr	r3, [pc, #88]	; (8002c3c <PullAndDrop+0x4dc>)
 8002be4:	edd3 7a00 	vldr	s15, [r3]
 8002be8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002bec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bf0:	db60      	blt.n	8002cb4 <PullAndDrop+0x554>
					{
						SpeedCmd = 0; //
 8002bf2:	4b12      	ldr	r3, [pc, #72]	; (8002c3c <PullAndDrop+0x4dc>)
 8002bf4:	f04f 0200 	mov.w	r2, #0
 8002bf8:	601a      	str	r2, [r3, #0]
						TopPulseCmd = MotorEncPulse - OriginPulse;
 8002bfa:	4b18      	ldr	r3, [pc, #96]	; (8002c5c <PullAndDrop+0x4fc>)
 8002bfc:	681a      	ldr	r2, [r3, #0]
 8002bfe:	4b18      	ldr	r3, [pc, #96]	; (8002c60 <PullAndDrop+0x500>)
 8002c00:	681b      	ldr	r3, [r3, #0]
 8002c02:	1ad3      	subs	r3, r2, r3
 8002c04:	4a17      	ldr	r2, [pc, #92]	; (8002c64 <PullAndDrop+0x504>)
 8002c06:	6013      	str	r3, [r2, #0]

						if (IsOpenLoopControl)
 8002c08:	4b17      	ldr	r3, [pc, #92]	; (8002c68 <PullAndDrop+0x508>)
 8002c0a:	781b      	ldrb	r3, [r3, #0]
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	d02f      	beq.n	8002c70 <PullAndDrop+0x510>
						{
							StartWaiting = true; // Switch to waiting stage
 8002c10:	4b16      	ldr	r3, [pc, #88]	; (8002c6c <PullAndDrop+0x50c>)
 8002c12:	2201      	movs	r2, #1
 8002c14:	701a      	strb	r2, [r3, #0]
 8002c16:	e04d      	b.n	8002cb4 <PullAndDrop+0x554>
 8002c18:	33333333 	.word	0x33333333
 8002c1c:	40233333 	.word	0x40233333
 8002c20:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c24:	3f50624d 	.word	0x3f50624d
 8002c28:	9999999a 	.word	0x9999999a
 8002c2c:	3fc99999 	.word	0x3fc99999
 8002c30:	2000000c 	.word	0x2000000c
 8002c34:	20000538 	.word	0x20000538
 8002c38:	20000548 	.word	0x20000548
 8002c3c:	200004fc 	.word	0x200004fc
 8002c40:	2000045c 	.word	0x2000045c
 8002c44:	40240000 	.word	0x40240000
 8002c48:	20000458 	.word	0x20000458
 8002c4c:	20000003 	.word	0x20000003
 8002c50:	20000450 	.word	0x20000450
 8002c54:	2000043b 	.word	0x2000043b
 8002c58:	20000544 	.word	0x20000544
 8002c5c:	200004f8 	.word	0x200004f8
 8002c60:	200004b0 	.word	0x200004b0
 8002c64:	200004a4 	.word	0x200004a4
 8002c68:	20000444 	.word	0x20000444
 8002c6c:	2000043e 	.word	0x2000043e
						}
						else // closed-loop control
						{
							PreAccRef = AccRef;
 8002c70:	4bb3      	ldr	r3, [pc, #716]	; (8002f40 <PullAndDrop+0x7e0>)
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4ab3      	ldr	r2, [pc, #716]	; (8002f44 <PullAndDrop+0x7e4>)
 8002c76:	6013      	str	r3, [r2, #0]
							StartDropping = true;
 8002c78:	4bb3      	ldr	r3, [pc, #716]	; (8002f48 <PullAndDrop+0x7e8>)
 8002c7a:	2201      	movs	r2, #1
 8002c7c:	701a      	strb	r2, [r3, #0]
							StartBraking = false;
 8002c7e:	4bb3      	ldr	r3, [pc, #716]	; (8002f4c <PullAndDrop+0x7ec>)
 8002c80:	2200      	movs	r2, #0
 8002c82:	701a      	strb	r2, [r3, #0]
							Direction = true; // false = move up, true = move down
 8002c84:	4bb2      	ldr	r3, [pc, #712]	; (8002f50 <PullAndDrop+0x7f0>)
 8002c86:	2201      	movs	r2, #1
 8002c88:	701a      	strb	r2, [r3, #0]
							StartPulling = false;
 8002c8a:	4bb2      	ldr	r3, [pc, #712]	; (8002f54 <PullAndDrop+0x7f4>)
 8002c8c:	2200      	movs	r2, #0
 8002c8e:	701a      	strb	r2, [r3, #0]

							// Reverse pulse generation direction to switch to dropping
							HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); // Set CW direction
 8002c90:	2201      	movs	r2, #1
 8002c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c96:	48b0      	ldr	r0, [pc, #704]	; (8002f58 <PullAndDrop+0x7f8>)
 8002c98:	f004 f9d2 	bl	8007040 <HAL_GPIO_WritePin>
							HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 8002c9c:	2201      	movs	r2, #1
 8002c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ca2:	48ae      	ldr	r0, [pc, #696]	; (8002f5c <PullAndDrop+0x7fc>)
 8002ca4:	f004 f9cc 	bl	8007040 <HAL_GPIO_WritePin>
							PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 8002ca8:	4bad      	ldr	r3, [pc, #692]	; (8002f60 <PullAndDrop+0x800>)
 8002caa:	2200      	movs	r2, #0
 8002cac:	701a      	strb	r2, [r3, #0]
							PulseGenerationFlag = true;
 8002cae:	4bad      	ldr	r3, [pc, #692]	; (8002f64 <PullAndDrop+0x804>)
 8002cb0:	2201      	movs	r2, #1
 8002cb2:	701a      	strb	r2, [r3, #0]
		}
		// END Pulling Task

//		// BEGIN WAITING TASK
//		// Wait for some time before dropping
		if (StartWaiting)
 8002cb4:	4bac      	ldr	r3, [pc, #688]	; (8002f68 <PullAndDrop+0x808>)
 8002cb6:	781b      	ldrb	r3, [r3, #0]
 8002cb8:	2b00      	cmp	r3, #0
 8002cba:	d011      	beq.n	8002ce0 <PullAndDrop+0x580>
		{
			if (WaitingMiliSecond(WaitingTime))
 8002cbc:	4bab      	ldr	r3, [pc, #684]	; (8002f6c <PullAndDrop+0x80c>)
 8002cbe:	881b      	ldrh	r3, [r3, #0]
 8002cc0:	4618      	mov	r0, r3
 8002cc2:	f7fe ff57 	bl	8001b74 <WaitingMiliSecond>
 8002cc6:	4603      	mov	r3, r0
 8002cc8:	2b00      	cmp	r3, #0
 8002cca:	d009      	beq.n	8002ce0 <PullAndDrop+0x580>
			{
				StartWaiting = false;
 8002ccc:	4ba6      	ldr	r3, [pc, #664]	; (8002f68 <PullAndDrop+0x808>)
 8002cce:	2200      	movs	r2, #0
 8002cd0:	701a      	strb	r2, [r3, #0]
				PreAccRef = AccRef;
 8002cd2:	4b9b      	ldr	r3, [pc, #620]	; (8002f40 <PullAndDrop+0x7e0>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	4a9b      	ldr	r2, [pc, #620]	; (8002f44 <PullAndDrop+0x7e4>)
 8002cd8:	6013      	str	r3, [r2, #0]
				InitializeRunning(DroppingMode);
 8002cda:	2001      	movs	r0, #1
 8002cdc:	f7ff fa16 	bl	800210c <InitializeRunning>
		}

		// END WAITING
		
		// BEGIN DROPPING TASK
		if (StartDropping && !StartPulling)
 8002ce0:	4b99      	ldr	r3, [pc, #612]	; (8002f48 <PullAndDrop+0x7e8>)
 8002ce2:	781b      	ldrb	r3, [r3, #0]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	f000 8221 	beq.w	800312c <PullAndDrop+0x9cc>
 8002cea:	4b9a      	ldr	r3, [pc, #616]	; (8002f54 <PullAndDrop+0x7f4>)
 8002cec:	781b      	ldrb	r3, [r3, #0]
 8002cee:	f083 0301 	eor.w	r3, r3, #1
 8002cf2:	b2db      	uxtb	r3, r3
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	f000 8219 	beq.w	800312c <PullAndDrop+0x9cc>
		{
				// ACCLERATING DROPPING STAGE
				if (!StartBraking) // Accelerating Stage
 8002cfa:	4b94      	ldr	r3, [pc, #592]	; (8002f4c <PullAndDrop+0x7ec>)
 8002cfc:	781b      	ldrb	r3, [r3, #0]
 8002cfe:	f083 0301 	eor.w	r3, r3, #1
 8002d02:	b2db      	uxtb	r3, r3
 8002d04:	2b00      	cmp	r3, #0
 8002d06:	f000 8159 	beq.w	8002fbc <PullAndDrop+0x85c>
				{
					if ((SpeedCmd >= DroppingMaxSpeed) || ( (fabs(MotorEncPulse - OriginPulse - TopPulseCmd)) >= BottomFreeDropPulseCmd))
 8002d0a:	4b99      	ldr	r3, [pc, #612]	; (8002f70 <PullAndDrop+0x810>)
 8002d0c:	881b      	ldrh	r3, [r3, #0]
 8002d0e:	ee07 3a90 	vmov	s15, r3
 8002d12:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002d16:	4b97      	ldr	r3, [pc, #604]	; (8002f74 <PullAndDrop+0x814>)
 8002d18:	edd3 7a00 	vldr	s15, [r3]
 8002d1c:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002d20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d24:	d91d      	bls.n	8002d62 <PullAndDrop+0x602>
 8002d26:	4b94      	ldr	r3, [pc, #592]	; (8002f78 <PullAndDrop+0x818>)
 8002d28:	681a      	ldr	r2, [r3, #0]
 8002d2a:	4b94      	ldr	r3, [pc, #592]	; (8002f7c <PullAndDrop+0x81c>)
 8002d2c:	681b      	ldr	r3, [r3, #0]
 8002d2e:	1ad2      	subs	r2, r2, r3
 8002d30:	4b93      	ldr	r3, [pc, #588]	; (8002f80 <PullAndDrop+0x820>)
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	1ad3      	subs	r3, r2, r3
 8002d36:	4618      	mov	r0, r3
 8002d38:	f7fd fbf4 	bl	8000524 <__aeabi_i2d>
 8002d3c:	4602      	mov	r2, r0
 8002d3e:	460b      	mov	r3, r1
 8002d40:	4614      	mov	r4, r2
 8002d42:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8002d46:	4b8f      	ldr	r3, [pc, #572]	; (8002f84 <PullAndDrop+0x824>)
 8002d48:	681b      	ldr	r3, [r3, #0]
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	f7fd fbea 	bl	8000524 <__aeabi_i2d>
 8002d50:	4602      	mov	r2, r0
 8002d52:	460b      	mov	r3, r1
 8002d54:	4620      	mov	r0, r4
 8002d56:	4629      	mov	r1, r5
 8002d58:	f7fd fed4 	bl	8000b04 <__aeabi_dcmpge>
 8002d5c:	4603      	mov	r3, r0
 8002d5e:	2b00      	cmp	r3, #0
 8002d60:	d00a      	beq.n	8002d78 <PullAndDrop+0x618>
					//if(ObjectPosition >= DroppingAccelDistance)
					{
						//RunningTime = 0;
						StartBraking = true;
 8002d62:	4b7a      	ldr	r3, [pc, #488]	; (8002f4c <PullAndDrop+0x7ec>)
 8002d64:	2201      	movs	r2, #1
 8002d66:	701a      	strb	r2, [r3, #0]
						//TransitionSpeed = SpeedCmd;
						// Reset PID Controller
						IntergraError = 0;
 8002d68:	4b87      	ldr	r3, [pc, #540]	; (8002f88 <PullAndDrop+0x828>)
 8002d6a:	f04f 0200 	mov.w	r2, #0
 8002d6e:	601a      	str	r2, [r3, #0]
						PreError = 0;
 8002d70:	4b86      	ldr	r3, [pc, #536]	; (8002f8c <PullAndDrop+0x82c>)
 8002d72:	f04f 0200 	mov.w	r2, #0
 8002d76:	601a      	str	r2, [r3, #0]

						//PreAccRef = AccRef;
						//ResetPIDController();
					}
					// Calculate speed cmd
					AccRef = -9.6+DroppingAccel;
 8002d78:	4b85      	ldr	r3, [pc, #532]	; (8002f90 <PullAndDrop+0x830>)
 8002d7a:	681b      	ldr	r3, [r3, #0]
 8002d7c:	4618      	mov	r0, r3
 8002d7e:	f7fd fbe3 	bl	8000548 <__aeabi_f2d>
 8002d82:	a36b      	add	r3, pc, #428	; (adr r3, 8002f30 <PullAndDrop+0x7d0>)
 8002d84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d88:	f7fd fa7e 	bl	8000288 <__aeabi_dsub>
 8002d8c:	4602      	mov	r2, r0
 8002d8e:	460b      	mov	r3, r1
 8002d90:	4610      	mov	r0, r2
 8002d92:	4619      	mov	r1, r3
 8002d94:	f7fd ff28 	bl	8000be8 <__aeabi_d2f>
 8002d98:	4603      	mov	r3, r0
 8002d9a:	4a69      	ldr	r2, [pc, #420]	; (8002f40 <PullAndDrop+0x7e0>)
 8002d9c:	6013      	str	r3, [r2, #0]
//					else
//					{
//						AccRef = LinearGeneration(RunningTime,16,PreAccRef, PreAccRef,-9.6+DroppingAccel);
//					}

					if (IsOpenLoopControl) // Use open-loop control
 8002d9e:	4b7d      	ldr	r3, [pc, #500]	; (8002f94 <PullAndDrop+0x834>)
 8002da0:	781b      	ldrb	r3, [r3, #0]
 8002da2:	2b00      	cmp	r3, #0
 8002da4:	d036      	beq.n	8002e14 <PullAndDrop+0x6b4>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,DroppingEpsilonAcc,0,0,DroppingMaxSpeed); // Feedforward term
						LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,DroppingMaxSpeed);// Feedforward term
 8002da6:	4b66      	ldr	r3, [pc, #408]	; (8002f40 <PullAndDrop+0x7e0>)
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	4618      	mov	r0, r3
 8002dac:	f7fd fbcc 	bl	8000548 <__aeabi_f2d>
 8002db0:	a35f      	add	r3, pc, #380	; (adr r3, 8002f30 <PullAndDrop+0x7d0>)
 8002db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002db6:	f7fd fa69 	bl	800028c <__adddf3>
 8002dba:	4602      	mov	r2, r0
 8002dbc:	460b      	mov	r3, r1
 8002dbe:	4610      	mov	r0, r2
 8002dc0:	4619      	mov	r1, r3
 8002dc2:	f04f 0200 	mov.w	r2, #0
 8002dc6:	4b74      	ldr	r3, [pc, #464]	; (8002f98 <PullAndDrop+0x838>)
 8002dc8:	f7fd fc16 	bl	80005f8 <__aeabi_dmul>
 8002dcc:	4602      	mov	r2, r0
 8002dce:	460b      	mov	r3, r1
 8002dd0:	4614      	mov	r4, r2
 8002dd2:	461d      	mov	r5, r3
 8002dd4:	4b71      	ldr	r3, [pc, #452]	; (8002f9c <PullAndDrop+0x83c>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fbb5 	bl	8000548 <__aeabi_f2d>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	4620      	mov	r0, r4
 8002de4:	4629      	mov	r1, r5
 8002de6:	f7fd fd31 	bl	800084c <__aeabi_ddiv>
 8002dea:	4602      	mov	r2, r0
 8002dec:	460b      	mov	r3, r1
 8002dee:	4610      	mov	r0, r2
 8002df0:	4619      	mov	r1, r3
 8002df2:	f7fd fef9 	bl	8000be8 <__aeabi_d2f>
 8002df6:	4602      	mov	r2, r0
 8002df8:	4b5d      	ldr	r3, [pc, #372]	; (8002f70 <PullAndDrop+0x810>)
 8002dfa:	881b      	ldrh	r3, [r3, #0]
 8002dfc:	ee07 3a90 	vmov	s15, r3
 8002e00:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e04:	eef0 0a67 	vmov.f32	s1, s15
 8002e08:	ee00 2a10 	vmov	s0, r2
 8002e0c:	4859      	ldr	r0, [pc, #356]	; (8002f74 <PullAndDrop+0x814>)
 8002e0e:	f7fe fe17 	bl	8001a40 <LinearGeneration>
 8002e12:	e073      	b.n	8002efc <PullAndDrop+0x79c>
					
						//SpeedCmd = PIDSpeedCmd; // PID controller only
						//SpeedCmd = FeedFWSpeedCmd;
						//SpeedCmd = FeedFWSpeedCmd + PIDSpeedCmd; // Feedforward controller
						
						AccSet = PIDCalculate(AccRef,AccZ,-8,8, true); // PID term
 8002e14:	4b4a      	ldr	r3, [pc, #296]	; (8002f40 <PullAndDrop+0x7e0>)
 8002e16:	edd3 7a00 	vldr	s15, [r3]
 8002e1a:	4b61      	ldr	r3, [pc, #388]	; (8002fa0 <PullAndDrop+0x840>)
 8002e1c:	ed93 7a00 	vldr	s14, [r3]
 8002e20:	2201      	movs	r2, #1
 8002e22:	2108      	movs	r1, #8
 8002e24:	f06f 0007 	mvn.w	r0, #7
 8002e28:	eef0 0a47 	vmov.f32	s1, s14
 8002e2c:	eeb0 0a67 	vmov.f32	s0, s15
 8002e30:	f7fe fb5e 	bl	80014f0 <PIDCalculate>
 8002e34:	eef0 7a40 	vmov.f32	s15, s0
 8002e38:	4b5a      	ldr	r3, [pc, #360]	; (8002fa4 <PullAndDrop+0x844>)
 8002e3a:	edc3 7a00 	vstr	s15, [r3]
						AccSet = AccSet + DroppingAccel;
 8002e3e:	4b59      	ldr	r3, [pc, #356]	; (8002fa4 <PullAndDrop+0x844>)
 8002e40:	ed93 7a00 	vldr	s14, [r3]
 8002e44:	4b52      	ldr	r3, [pc, #328]	; (8002f90 <PullAndDrop+0x830>)
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e4e:	4b55      	ldr	r3, [pc, #340]	; (8002fa4 <PullAndDrop+0x844>)
 8002e50:	edc3 7a00 	vstr	s15, [r3]
						//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
						//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
						//LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,DroppingMaxSpeed); // Feedforward term

						SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
 8002e54:	4b47      	ldr	r3, [pc, #284]	; (8002f74 <PullAndDrop+0x814>)
 8002e56:	681b      	ldr	r3, [r3, #0]
 8002e58:	4618      	mov	r0, r3
 8002e5a:	f7fd fb75 	bl	8000548 <__aeabi_f2d>
 8002e5e:	4604      	mov	r4, r0
 8002e60:	460d      	mov	r5, r1
 8002e62:	4b51      	ldr	r3, [pc, #324]	; (8002fa8 <PullAndDrop+0x848>)
 8002e64:	781b      	ldrb	r3, [r3, #0]
 8002e66:	4618      	mov	r0, r3
 8002e68:	f7fd fb5c 	bl	8000524 <__aeabi_i2d>
 8002e6c:	a332      	add	r3, pc, #200	; (adr r3, 8002f38 <PullAndDrop+0x7d8>)
 8002e6e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002e72:	f7fd fbc1 	bl	80005f8 <__aeabi_dmul>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4690      	mov	r8, r2
 8002e7c:	4699      	mov	r9, r3
 8002e7e:	4b49      	ldr	r3, [pc, #292]	; (8002fa4 <PullAndDrop+0x844>)
 8002e80:	681b      	ldr	r3, [r3, #0]
 8002e82:	4618      	mov	r0, r3
 8002e84:	f7fd fb60 	bl	8000548 <__aeabi_f2d>
 8002e88:	4602      	mov	r2, r0
 8002e8a:	460b      	mov	r3, r1
 8002e8c:	4640      	mov	r0, r8
 8002e8e:	4649      	mov	r1, r9
 8002e90:	f7fd fbb2 	bl	80005f8 <__aeabi_dmul>
 8002e94:	4602      	mov	r2, r0
 8002e96:	460b      	mov	r3, r1
 8002e98:	4610      	mov	r0, r2
 8002e9a:	4619      	mov	r1, r3
 8002e9c:	f04f 0200 	mov.w	r2, #0
 8002ea0:	4b3d      	ldr	r3, [pc, #244]	; (8002f98 <PullAndDrop+0x838>)
 8002ea2:	f7fd fba9 	bl	80005f8 <__aeabi_dmul>
 8002ea6:	4602      	mov	r2, r0
 8002ea8:	460b      	mov	r3, r1
 8002eaa:	4690      	mov	r8, r2
 8002eac:	4699      	mov	r9, r3
 8002eae:	4b3b      	ldr	r3, [pc, #236]	; (8002f9c <PullAndDrop+0x83c>)
 8002eb0:	681b      	ldr	r3, [r3, #0]
 8002eb2:	4618      	mov	r0, r3
 8002eb4:	f7fd fb48 	bl	8000548 <__aeabi_f2d>
 8002eb8:	4602      	mov	r2, r0
 8002eba:	460b      	mov	r3, r1
 8002ebc:	4640      	mov	r0, r8
 8002ebe:	4649      	mov	r1, r9
 8002ec0:	f7fd fcc4 	bl	800084c <__aeabi_ddiv>
 8002ec4:	4602      	mov	r2, r0
 8002ec6:	460b      	mov	r3, r1
 8002ec8:	4620      	mov	r0, r4
 8002eca:	4629      	mov	r1, r5
 8002ecc:	f7fd f9de 	bl	800028c <__adddf3>
 8002ed0:	4602      	mov	r2, r0
 8002ed2:	460b      	mov	r3, r1
 8002ed4:	4610      	mov	r0, r2
 8002ed6:	4619      	mov	r1, r3
 8002ed8:	f7fd fe86 	bl	8000be8 <__aeabi_d2f>
 8002edc:	4603      	mov	r3, r0
 8002ede:	4a25      	ldr	r2, [pc, #148]	; (8002f74 <PullAndDrop+0x814>)
 8002ee0:	6013      	str	r3, [r2, #0]
						if (SpeedCmd >= 810) // Saturation
 8002ee2:	4b24      	ldr	r3, [pc, #144]	; (8002f74 <PullAndDrop+0x814>)
 8002ee4:	edd3 7a00 	vldr	s15, [r3]
 8002ee8:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8002fac <PullAndDrop+0x84c>
 8002eec:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002ef0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ef4:	db02      	blt.n	8002efc <PullAndDrop+0x79c>
							SpeedCmd = 810;
 8002ef6:	4b1f      	ldr	r3, [pc, #124]	; (8002f74 <PullAndDrop+0x814>)
 8002ef8:	4a2d      	ldr	r2, [pc, #180]	; (8002fb0 <PullAndDrop+0x850>)
 8002efa:	601a      	str	r2, [r3, #0]
					}							
					
					if (SpeedCmd != 0)
 8002efc:	4b1d      	ldr	r3, [pc, #116]	; (8002f74 <PullAndDrop+0x814>)
 8002efe:	edd3 7a00 	vldr	s15, [r3]
 8002f02:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002f06:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002f0a:	d00e      	beq.n	8002f2a <PullAndDrop+0x7ca>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002f0c:	4b29      	ldr	r3, [pc, #164]	; (8002fb4 <PullAndDrop+0x854>)
 8002f0e:	781b      	ldrb	r3, [r3, #0]
 8002f10:	4a18      	ldr	r2, [pc, #96]	; (8002f74 <PullAndDrop+0x814>)
 8002f12:	edd2 7a00 	vldr	s15, [r2]
 8002f16:	eeb0 0a67 	vmov.f32	s0, s15
 8002f1a:	4618      	mov	r0, r3
 8002f1c:	f7fe fe50 	bl	8001bc0 <CalculateTimer3Period>
 8002f20:	4603      	mov	r3, r0
 8002f22:	b29a      	uxth	r2, r3
 8002f24:	4b24      	ldr	r3, [pc, #144]	; (8002fb8 <PullAndDrop+0x858>)
 8002f26:	801a      	strh	r2, [r3, #0]
 8002f28:	e100      	b.n	800312c <PullAndDrop+0x9cc>
						// Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
					}
					else 
					{
						StopPulseGenerating();
 8002f2a:	f7fe fde7 	bl	8001afc <StopPulseGenerating>
 8002f2e:	e0fd      	b.n	800312c <PullAndDrop+0x9cc>
 8002f30:	33333333 	.word	0x33333333
 8002f34:	40233333 	.word	0x40233333
 8002f38:	d2f1a9fc 	.word	0xd2f1a9fc
 8002f3c:	3f50624d 	.word	0x3f50624d
 8002f40:	2000000c 	.word	0x2000000c
 8002f44:	2000053c 	.word	0x2000053c
 8002f48:	20000433 	.word	0x20000433
 8002f4c:	2000043a 	.word	0x2000043a
 8002f50:	20000435 	.word	0x20000435
 8002f54:	20000439 	.word	0x20000439
 8002f58:	40020800 	.word	0x40020800
 8002f5c:	40021000 	.word	0x40021000
 8002f60:	20000446 	.word	0x20000446
 8002f64:	2000043b 	.word	0x2000043b
 8002f68:	2000043e 	.word	0x2000043e
 8002f6c:	2000044a 	.word	0x2000044a
 8002f70:	20000474 	.word	0x20000474
 8002f74:	200004fc 	.word	0x200004fc
 8002f78:	200004f8 	.word	0x200004f8
 8002f7c:	200004b0 	.word	0x200004b0
 8002f80:	200004a4 	.word	0x200004a4
 8002f84:	200004ac 	.word	0x200004ac
 8002f88:	20000534 	.word	0x20000534
 8002f8c:	20000540 	.word	0x20000540
 8002f90:	20000464 	.word	0x20000464
 8002f94:	20000444 	.word	0x20000444
 8002f98:	40240000 	.word	0x40240000
 8002f9c:	20000458 	.word	0x20000458
 8002fa0:	20000538 	.word	0x20000538
 8002fa4:	20000548 	.word	0x20000548
 8002fa8:	2000045c 	.word	0x2000045c
 8002fac:	444a8000 	.word	0x444a8000
 8002fb0:	444a8000 	.word	0x444a8000
 8002fb4:	20000003 	.word	0x20000003
 8002fb8:	20000450 	.word	0x20000450
				else
				{
					//RunningTime += SampleTime;

					//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-DroppingDecel, PreAccRef);
					LinearGeneration(&AccRef,-BrakeAccSlope,-9.6-DroppingDecel);
 8002fbc:	4b66      	ldr	r3, [pc, #408]	; (8003158 <PullAndDrop+0x9f8>)
 8002fbe:	edd3 7a00 	vldr	s15, [r3]
 8002fc2:	eeb1 8a67 	vneg.f32	s16, s15
 8002fc6:	4b65      	ldr	r3, [pc, #404]	; (800315c <PullAndDrop+0x9fc>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fabc 	bl	8000548 <__aeabi_f2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	a15a      	add	r1, pc, #360	; (adr r1, 8003140 <PullAndDrop+0x9e0>)
 8002fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002fda:	f7fd f955 	bl	8000288 <__aeabi_dsub>
 8002fde:	4602      	mov	r2, r0
 8002fe0:	460b      	mov	r3, r1
 8002fe2:	4610      	mov	r0, r2
 8002fe4:	4619      	mov	r1, r3
 8002fe6:	f7fd fdff 	bl	8000be8 <__aeabi_d2f>
 8002fea:	4603      	mov	r3, r0
 8002fec:	ee00 3a90 	vmov	s1, r3
 8002ff0:	eeb0 0a48 	vmov.f32	s0, s16
 8002ff4:	485a      	ldr	r0, [pc, #360]	; (8003160 <PullAndDrop+0xa00>)
 8002ff6:	f7fe fd23 	bl	8001a40 <LinearGeneration>
					//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,TransitionSpeed,0,TransitionSpeed);
					//SpeedCmd = LinearGeneration(RunningTime,-DroppingEpsilonDec*10,TransitionSpeed,0,TransitionSpeed);
					//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,DroppingMaxSpeed,0,DroppingMaxSpeed);
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,TransitionSpeed,0,2*TransitionSpeed);
					//LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius);
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8002ffa:	4b5a      	ldr	r3, [pc, #360]	; (8003164 <PullAndDrop+0xa04>)
 8002ffc:	681b      	ldr	r3, [r3, #0]
 8002ffe:	4618      	mov	r0, r3
 8003000:	f7fd faa2 	bl	8000548 <__aeabi_f2d>
 8003004:	4604      	mov	r4, r0
 8003006:	460d      	mov	r5, r1
 8003008:	4b57      	ldr	r3, [pc, #348]	; (8003168 <PullAndDrop+0xa08>)
 800300a:	781b      	ldrb	r3, [r3, #0]
 800300c:	4618      	mov	r0, r3
 800300e:	f7fd fa89 	bl	8000524 <__aeabi_i2d>
 8003012:	a34d      	add	r3, pc, #308	; (adr r3, 8003148 <PullAndDrop+0x9e8>)
 8003014:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003018:	f7fd faee 	bl	80005f8 <__aeabi_dmul>
 800301c:	4602      	mov	r2, r0
 800301e:	460b      	mov	r3, r1
 8003020:	4690      	mov	r8, r2
 8003022:	4699      	mov	r9, r3
 8003024:	4b4e      	ldr	r3, [pc, #312]	; (8003160 <PullAndDrop+0xa00>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	4618      	mov	r0, r3
 800302a:	f7fd fa8d 	bl	8000548 <__aeabi_f2d>
 800302e:	a348      	add	r3, pc, #288	; (adr r3, 8003150 <PullAndDrop+0x9f0>)
 8003030:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003034:	f7fd f92a 	bl	800028c <__adddf3>
 8003038:	4602      	mov	r2, r0
 800303a:	460b      	mov	r3, r1
 800303c:	4640      	mov	r0, r8
 800303e:	4649      	mov	r1, r9
 8003040:	f7fd fada 	bl	80005f8 <__aeabi_dmul>
 8003044:	4602      	mov	r2, r0
 8003046:	460b      	mov	r3, r1
 8003048:	4610      	mov	r0, r2
 800304a:	4619      	mov	r1, r3
 800304c:	f04f 0200 	mov.w	r2, #0
 8003050:	4b46      	ldr	r3, [pc, #280]	; (800316c <PullAndDrop+0xa0c>)
 8003052:	f7fd fad1 	bl	80005f8 <__aeabi_dmul>
 8003056:	4602      	mov	r2, r0
 8003058:	460b      	mov	r3, r1
 800305a:	4690      	mov	r8, r2
 800305c:	4699      	mov	r9, r3
 800305e:	4b44      	ldr	r3, [pc, #272]	; (8003170 <PullAndDrop+0xa10>)
 8003060:	681b      	ldr	r3, [r3, #0]
 8003062:	4618      	mov	r0, r3
 8003064:	f7fd fa70 	bl	8000548 <__aeabi_f2d>
 8003068:	4602      	mov	r2, r0
 800306a:	460b      	mov	r3, r1
 800306c:	4640      	mov	r0, r8
 800306e:	4649      	mov	r1, r9
 8003070:	f7fd fbec 	bl	800084c <__aeabi_ddiv>
 8003074:	4602      	mov	r2, r0
 8003076:	460b      	mov	r3, r1
 8003078:	4620      	mov	r0, r4
 800307a:	4629      	mov	r1, r5
 800307c:	f7fd f906 	bl	800028c <__adddf3>
 8003080:	4602      	mov	r2, r0
 8003082:	460b      	mov	r3, r1
 8003084:	4610      	mov	r0, r2
 8003086:	4619      	mov	r1, r3
 8003088:	f7fd fdae 	bl	8000be8 <__aeabi_d2f>
 800308c:	4603      	mov	r3, r0
 800308e:	4a35      	ldr	r2, [pc, #212]	; (8003164 <PullAndDrop+0xa04>)
 8003090:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= 0)
 8003092:	4b34      	ldr	r3, [pc, #208]	; (8003164 <PullAndDrop+0xa04>)
 8003094:	edd3 7a00 	vldr	s15, [r3]
 8003098:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800309c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030a0:	d803      	bhi.n	80030aa <PullAndDrop+0x94a>
						SpeedCmd = 0;
 80030a2:	4b30      	ldr	r3, [pc, #192]	; (8003164 <PullAndDrop+0xa04>)
 80030a4:	f04f 0200 	mov.w	r2, #0
 80030a8:	601a      	str	r2, [r3, #0]
					if (SpeedCmd >= 810)
 80030aa:	4b2e      	ldr	r3, [pc, #184]	; (8003164 <PullAndDrop+0xa04>)
 80030ac:	edd3 7a00 	vldr	s15, [r3]
 80030b0:	ed9f 7a30 	vldr	s14, [pc, #192]	; 8003174 <PullAndDrop+0xa14>
 80030b4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80030b8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030bc:	db02      	blt.n	80030c4 <PullAndDrop+0x964>
						SpeedCmd = 810;
 80030be:	4b29      	ldr	r3, [pc, #164]	; (8003164 <PullAndDrop+0xa04>)
 80030c0:	4a2d      	ldr	r2, [pc, #180]	; (8003178 <PullAndDrop+0xa18>)
 80030c2:	601a      	str	r2, [r3, #0]

					if (SpeedCmd != 0)
 80030c4:	4b27      	ldr	r3, [pc, #156]	; (8003164 <PullAndDrop+0xa04>)
 80030c6:	edd3 7a00 	vldr	s15, [r3]
 80030ca:	eef5 7a40 	vcmp.f32	s15, #0.0
 80030ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030d2:	d00d      	beq.n	80030f0 <PullAndDrop+0x990>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80030d4:	4b29      	ldr	r3, [pc, #164]	; (800317c <PullAndDrop+0xa1c>)
 80030d6:	781b      	ldrb	r3, [r3, #0]
 80030d8:	4a22      	ldr	r2, [pc, #136]	; (8003164 <PullAndDrop+0xa04>)
 80030da:	edd2 7a00 	vldr	s15, [r2]
 80030de:	eeb0 0a67 	vmov.f32	s0, s15
 80030e2:	4618      	mov	r0, r3
 80030e4:	f7fe fd6c 	bl	8001bc0 <CalculateTimer3Period>
 80030e8:	4603      	mov	r3, r0
 80030ea:	b29a      	uxth	r2, r3
 80030ec:	4b24      	ldr	r3, [pc, #144]	; (8003180 <PullAndDrop+0xa20>)
 80030ee:	801a      	strh	r2, [r3, #0]
						//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
					}

					if (SpeedCmd <= 0) // Stop braking
 80030f0:	4b1c      	ldr	r3, [pc, #112]	; (8003164 <PullAndDrop+0xa04>)
 80030f2:	edd3 7a00 	vldr	s15, [r3]
 80030f6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80030fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80030fe:	d815      	bhi.n	800312c <PullAndDrop+0x9cc>
					{
						//RunningTime = 0;
						SpeedCmd = 0; // reset/ stop
 8003100:	4b18      	ldr	r3, [pc, #96]	; (8003164 <PullAndDrop+0xa04>)
 8003102:	f04f 0200 	mov.w	r2, #0
 8003106:	601a      	str	r2, [r3, #0]
						
						ResetPIDController();
 8003108:	f7fe faaa 	bl	8001660 <ResetPIDController>
						AccRef = - 9.6;
 800310c:	4b14      	ldr	r3, [pc, #80]	; (8003160 <PullAndDrop+0xa00>)
 800310e:	4a1d      	ldr	r2, [pc, #116]	; (8003184 <PullAndDrop+0xa24>)
 8003110:	601a      	str	r2, [r3, #0]
						
						StartDropping = false; //	
 8003112:	4b1d      	ldr	r3, [pc, #116]	; (8003188 <PullAndDrop+0xa28>)
 8003114:	2200      	movs	r2, #0
 8003116:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 8003118:	4b1c      	ldr	r3, [pc, #112]	; (800318c <PullAndDrop+0xa2c>)
 800311a:	2200      	movs	r2, #0
 800311c:	701a      	strb	r2, [r3, #0]
						StopPulseGenerating();
 800311e:	f7fe fced 	bl	8001afc <StopPulseGenerating>
						CompleteRunning = true;
 8003122:	4b1b      	ldr	r3, [pc, #108]	; (8003190 <PullAndDrop+0xa30>)
 8003124:	2201      	movs	r2, #1
 8003126:	701a      	strb	r2, [r3, #0]
						return true;
 8003128:	2301      	movs	r3, #1
 800312a:	e000      	b.n	800312e <PullAndDrop+0x9ce>
					}
				}
				// END BRAKING STAGE				
		}
		// END DROPPING TASK.
		return false;
 800312c:	2300      	movs	r3, #0
	}	
}
 800312e:	4618      	mov	r0, r3
 8003130:	46bd      	mov	sp, r7
 8003132:	ecbd 8b02 	vpop	{d8}
 8003136:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800313a:	bf00      	nop
 800313c:	f3af 8000 	nop.w
 8003140:	33333333 	.word	0x33333333
 8003144:	c0233333 	.word	0xc0233333
 8003148:	d2f1a9fc 	.word	0xd2f1a9fc
 800314c:	3f50624d 	.word	0x3f50624d
 8003150:	33333333 	.word	0x33333333
 8003154:	40233333 	.word	0x40233333
 8003158:	2000052c 	.word	0x2000052c
 800315c:	20000468 	.word	0x20000468
 8003160:	2000000c 	.word	0x2000000c
 8003164:	200004fc 	.word	0x200004fc
 8003168:	2000045c 	.word	0x2000045c
 800316c:	40240000 	.word	0x40240000
 8003170:	20000458 	.word	0x20000458
 8003174:	444a8000 	.word	0x444a8000
 8003178:	444a8000 	.word	0x444a8000
 800317c:	20000003 	.word	0x20000003
 8003180:	20000450 	.word	0x20000450
 8003184:	c119999a 	.word	0xc119999a
 8003188:	20000433 	.word	0x20000433
 800318c:	2000043a 	.word	0x2000043a
 8003190:	20000440 	.word	0x20000440
 8003194:	00000000 	.word	0x00000000

08003198 <Dropping>:
bool Dropping() // Dropping Program
// Mode = false -> Manual Running
// Mode = true -> Automatic Running
// return true if finishing, else return false while running
// StoppingDelayTime (ms): the time duration of stopping before pulling
{
 8003198:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800319c:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 800319e:	4bae      	ldr	r3, [pc, #696]	; (8003458 <Dropping+0x2c0>)
 80031a0:	781b      	ldrb	r3, [r3, #0]
 80031a2:	2b00      	cmp	r3, #0
 80031a4:	d001      	beq.n	80031aa <Dropping+0x12>
	{
		return true;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1f1      	b.n	800358e <Dropping+0x3f6>
	}
	else
	{
		if (StartDropping && !StartPulling) // Dropping Stage
 80031aa:	4bac      	ldr	r3, [pc, #688]	; (800345c <Dropping+0x2c4>)
 80031ac:	781b      	ldrb	r3, [r3, #0]
 80031ae:	2b00      	cmp	r3, #0
 80031b0:	f000 819a 	beq.w	80034e8 <Dropping+0x350>
 80031b4:	4baa      	ldr	r3, [pc, #680]	; (8003460 <Dropping+0x2c8>)
 80031b6:	781b      	ldrb	r3, [r3, #0]
 80031b8:	f083 0301 	eor.w	r3, r3, #1
 80031bc:	b2db      	uxtb	r3, r3
 80031be:	2b00      	cmp	r3, #0
 80031c0:	f000 8192 	beq.w	80034e8 <Dropping+0x350>
		{
			if (!StartBraking) // Accelerating Stage
 80031c4:	4ba7      	ldr	r3, [pc, #668]	; (8003464 <Dropping+0x2cc>)
 80031c6:	781b      	ldrb	r3, [r3, #0]
 80031c8:	f083 0301 	eor.w	r3, r3, #1
 80031cc:	b2db      	uxtb	r3, r3
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	f000 80a5 	beq.w	800331e <Dropping+0x186>
				// Calculate speed cmd
				//RunningTime += SampleTime;
				
				// Ramping the reference signal
				// LinearGeneration(&AccRef,8,-9.6+DroppingAccel);
				AccRef = -9.6+DroppingAccel;
 80031d4:	4ba4      	ldr	r3, [pc, #656]	; (8003468 <Dropping+0x2d0>)
 80031d6:	681b      	ldr	r3, [r3, #0]
 80031d8:	4618      	mov	r0, r3
 80031da:	f7fd f9b5 	bl	8000548 <__aeabi_f2d>
 80031de:	a398      	add	r3, pc, #608	; (adr r3, 8003440 <Dropping+0x2a8>)
 80031e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031e4:	f7fd f850 	bl	8000288 <__aeabi_dsub>
 80031e8:	4602      	mov	r2, r0
 80031ea:	460b      	mov	r3, r1
 80031ec:	4610      	mov	r0, r2
 80031ee:	4619      	mov	r1, r3
 80031f0:	f7fd fcfa 	bl	8000be8 <__aeabi_d2f>
 80031f4:	4603      	mov	r3, r0
 80031f6:	4a9d      	ldr	r2, [pc, #628]	; (800346c <Dropping+0x2d4>)
 80031f8:	6013      	str	r3, [r2, #0]
				if (IsOpenLoopControl) // Use open-loop control
 80031fa:	4b9d      	ldr	r3, [pc, #628]	; (8003470 <Dropping+0x2d8>)
 80031fc:	781b      	ldrb	r3, [r3, #0]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d014      	beq.n	800322c <Dropping+0x94>
				{
					//SpeedCmd = LinearSpeedGeneration(RunningTime,DroppingEpsilonAcc,0,0,DroppingMaxSpeed); // Feedforward term
					LinearGeneration(&SpeedCmd,DroppingEpsilonAcc*10,DroppingMaxSpeed); // Feedforward term
 8003202:	4b9c      	ldr	r3, [pc, #624]	; (8003474 <Dropping+0x2dc>)
 8003204:	edd3 7a00 	vldr	s15, [r3]
 8003208:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800320c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003210:	4b99      	ldr	r3, [pc, #612]	; (8003478 <Dropping+0x2e0>)
 8003212:	881b      	ldrh	r3, [r3, #0]
 8003214:	ee07 3a10 	vmov	s14, r3
 8003218:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 800321c:	eef0 0a47 	vmov.f32	s1, s14
 8003220:	eeb0 0a67 	vmov.f32	s0, s15
 8003224:	4895      	ldr	r0, [pc, #596]	; (800347c <Dropping+0x2e4>)
 8003226:	f7fe fc0b 	bl	8001a40 <LinearGeneration>
 800322a:	e047      	b.n	80032bc <Dropping+0x124>
				
					//SpeedCmd = PIDSpeedCmd; // PID controller only
					//SpeedCmd = FeedFWSpeedCmd;
					//SpeedCmd = FeedFWSpeedCmd + PIDSpeedCmd; // Feedforward controller
					
					AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 800322c:	4b8f      	ldr	r3, [pc, #572]	; (800346c <Dropping+0x2d4>)
 800322e:	edd3 7a00 	vldr	s15, [r3]
 8003232:	4b93      	ldr	r3, [pc, #588]	; (8003480 <Dropping+0x2e8>)
 8003234:	ed93 7a00 	vldr	s14, [r3]
 8003238:	2201      	movs	r2, #1
 800323a:	2105      	movs	r1, #5
 800323c:	f06f 0004 	mvn.w	r0, #4
 8003240:	eef0 0a47 	vmov.f32	s1, s14
 8003244:	eeb0 0a67 	vmov.f32	s0, s15
 8003248:	f7fe f952 	bl	80014f0 <PIDCalculate>
 800324c:	eef0 7a40 	vmov.f32	s15, s0
 8003250:	4b8c      	ldr	r3, [pc, #560]	; (8003484 <Dropping+0x2ec>)
 8003252:	edc3 7a00 	vstr	s15, [r3]
					AccSet = AccSet + AccRef + 9.6;
 8003256:	4b8b      	ldr	r3, [pc, #556]	; (8003484 <Dropping+0x2ec>)
 8003258:	ed93 7a00 	vldr	s14, [r3]
 800325c:	4b83      	ldr	r3, [pc, #524]	; (800346c <Dropping+0x2d4>)
 800325e:	edd3 7a00 	vldr	s15, [r3]
 8003262:	ee77 7a27 	vadd.f32	s15, s14, s15
 8003266:	ee17 0a90 	vmov	r0, s15
 800326a:	f7fd f96d 	bl	8000548 <__aeabi_f2d>
 800326e:	a374      	add	r3, pc, #464	; (adr r3, 8003440 <Dropping+0x2a8>)
 8003270:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003274:	f7fd f80a 	bl	800028c <__adddf3>
 8003278:	4602      	mov	r2, r0
 800327a:	460b      	mov	r3, r1
 800327c:	4610      	mov	r0, r2
 800327e:	4619      	mov	r1, r3
 8003280:	f7fd fcb2 	bl	8000be8 <__aeabi_d2f>
 8003284:	4603      	mov	r3, r0
 8003286:	4a7f      	ldr	r2, [pc, #508]	; (8003484 <Dropping+0x2ec>)
 8003288:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,DroppingMaxSpeed); // Feedforward term
 800328a:	4b7e      	ldr	r3, [pc, #504]	; (8003484 <Dropping+0x2ec>)
 800328c:	edd3 7a00 	vldr	s15, [r3]
 8003290:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003294:	ee27 7a87 	vmul.f32	s14, s15, s14
 8003298:	4b7b      	ldr	r3, [pc, #492]	; (8003488 <Dropping+0x2f0>)
 800329a:	edd3 7a00 	vldr	s15, [r3]
 800329e:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80032a2:	4b75      	ldr	r3, [pc, #468]	; (8003478 <Dropping+0x2e0>)
 80032a4:	881b      	ldrh	r3, [r3, #0]
 80032a6:	ee07 3a90 	vmov	s15, r3
 80032aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80032ae:	eef0 0a67 	vmov.f32	s1, s15
 80032b2:	eeb0 0a66 	vmov.f32	s0, s13
 80032b6:	4871      	ldr	r0, [pc, #452]	; (800347c <Dropping+0x2e4>)
 80032b8:	f7fe fbc2 	bl	8001a40 <LinearGeneration>
				}			
				
				if (SpeedCmd != 0)
 80032bc:	4b6f      	ldr	r3, [pc, #444]	; (800347c <Dropping+0x2e4>)
 80032be:	edd3 7a00 	vldr	s15, [r3]
 80032c2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80032c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80032ca:	d00e      	beq.n	80032ea <Dropping+0x152>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 80032cc:	4b6f      	ldr	r3, [pc, #444]	; (800348c <Dropping+0x2f4>)
 80032ce:	781b      	ldrb	r3, [r3, #0]
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <Dropping+0x2e4>)
 80032d2:	edd2 7a00 	vldr	s15, [r2]
 80032d6:	eeb0 0a67 	vmov.f32	s0, s15
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fe fc70 	bl	8001bc0 <CalculateTimer3Period>
 80032e0:	4603      	mov	r3, r0
 80032e2:	b29a      	uxth	r2, r3
 80032e4:	4b6a      	ldr	r3, [pc, #424]	; (8003490 <Dropping+0x2f8>)
 80032e6:	801a      	strh	r2, [r3, #0]
 80032e8:	e001      	b.n	80032ee <Dropping+0x156>
					//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else 
				{
					StopPulseGenerating();
 80032ea:	f7fe fc07 	bl	8001afc <StopPulseGenerating>
				}
				//if (SpeedCmd >= DroppingMaxSpeed || fabs(ObjectPosition) >= DroppingAccelDistance )
				if (ObjectPosition >= DroppingAccelDistance)
 80032ee:	4b69      	ldr	r3, [pc, #420]	; (8003494 <Dropping+0x2fc>)
 80032f0:	ed93 7a00 	vldr	s14, [r3]
 80032f4:	4b68      	ldr	r3, [pc, #416]	; (8003498 <Dropping+0x300>)
 80032f6:	edd3 7a00 	vldr	s15, [r3]
 80032fa:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80032fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003302:	f2c0 80f1 	blt.w	80034e8 <Dropping+0x350>
				{
					//RunningTime = 0;
					StartBraking = true;
 8003306:	4b57      	ldr	r3, [pc, #348]	; (8003464 <Dropping+0x2cc>)
 8003308:	2201      	movs	r2, #1
 800330a:	701a      	strb	r2, [r3, #0]
					//ResetPIDController();
					IntergraError = 0;
 800330c:	4b63      	ldr	r3, [pc, #396]	; (800349c <Dropping+0x304>)
 800330e:	f04f 0200 	mov.w	r2, #0
 8003312:	601a      	str	r2, [r3, #0]
					PreError = 0;
 8003314:	4b62      	ldr	r3, [pc, #392]	; (80034a0 <Dropping+0x308>)
 8003316:	f04f 0200 	mov.w	r2, #0
 800331a:	601a      	str	r2, [r3, #0]
 800331c:	e0e4      	b.n	80034e8 <Dropping+0x350>
			}
			else // Braking Stage
			{
				//RunningTime += SampleTime;

				AccRef = -9.8-DroppingDecel;
 800331e:	4b61      	ldr	r3, [pc, #388]	; (80034a4 <Dropping+0x30c>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f910 	bl	8000548 <__aeabi_f2d>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	a146      	add	r1, pc, #280	; (adr r1, 8003448 <Dropping+0x2b0>)
 800332e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8003332:	f7fc ffa9 	bl	8000288 <__aeabi_dsub>
 8003336:	4602      	mov	r2, r0
 8003338:	460b      	mov	r3, r1
 800333a:	4610      	mov	r0, r2
 800333c:	4619      	mov	r1, r3
 800333e:	f7fd fc53 	bl	8000be8 <__aeabi_d2f>
 8003342:	4603      	mov	r3, r0
 8003344:	4a49      	ldr	r2, [pc, #292]	; (800346c <Dropping+0x2d4>)
 8003346:	6013      	str	r3, [r2, #0]
//				FeedFWSpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,DroppingMaxSpeed,0,DroppingMaxSpeed);
//				PIDSpeedCmd = PIDCalculate(AccRef,AccZ,-850,850, true); // PID term
				
				//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,TransitionSpeed,0,TransitionSpeed);
				//SpeedCmd = LinearGeneration(RunningTime,-DroppingEpsilonDec*10,TransitionSpeed,0,TransitionSpeed);
				SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8003348:	4b4c      	ldr	r3, [pc, #304]	; (800347c <Dropping+0x2e4>)
 800334a:	681b      	ldr	r3, [r3, #0]
 800334c:	4618      	mov	r0, r3
 800334e:	f7fd f8fb 	bl	8000548 <__aeabi_f2d>
 8003352:	4604      	mov	r4, r0
 8003354:	460d      	mov	r5, r1
 8003356:	4b54      	ldr	r3, [pc, #336]	; (80034a8 <Dropping+0x310>)
 8003358:	781b      	ldrb	r3, [r3, #0]
 800335a:	4618      	mov	r0, r3
 800335c:	f7fd f8e2 	bl	8000524 <__aeabi_i2d>
 8003360:	a33b      	add	r3, pc, #236	; (adr r3, 8003450 <Dropping+0x2b8>)
 8003362:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003366:	f7fd f947 	bl	80005f8 <__aeabi_dmul>
 800336a:	4602      	mov	r2, r0
 800336c:	460b      	mov	r3, r1
 800336e:	4690      	mov	r8, r2
 8003370:	4699      	mov	r9, r3
 8003372:	4b3e      	ldr	r3, [pc, #248]	; (800346c <Dropping+0x2d4>)
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	4618      	mov	r0, r3
 8003378:	f7fd f8e6 	bl	8000548 <__aeabi_f2d>
 800337c:	a330      	add	r3, pc, #192	; (adr r3, 8003440 <Dropping+0x2a8>)
 800337e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003382:	f7fc ff83 	bl	800028c <__adddf3>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4640      	mov	r0, r8
 800338c:	4649      	mov	r1, r9
 800338e:	f7fd f933 	bl	80005f8 <__aeabi_dmul>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4610      	mov	r0, r2
 8003398:	4619      	mov	r1, r3
 800339a:	f04f 0200 	mov.w	r2, #0
 800339e:	4b43      	ldr	r3, [pc, #268]	; (80034ac <Dropping+0x314>)
 80033a0:	f7fd f92a 	bl	80005f8 <__aeabi_dmul>
 80033a4:	4602      	mov	r2, r0
 80033a6:	460b      	mov	r3, r1
 80033a8:	4690      	mov	r8, r2
 80033aa:	4699      	mov	r9, r3
 80033ac:	4b36      	ldr	r3, [pc, #216]	; (8003488 <Dropping+0x2f0>)
 80033ae:	681b      	ldr	r3, [r3, #0]
 80033b0:	4618      	mov	r0, r3
 80033b2:	f7fd f8c9 	bl	8000548 <__aeabi_f2d>
 80033b6:	4602      	mov	r2, r0
 80033b8:	460b      	mov	r3, r1
 80033ba:	4640      	mov	r0, r8
 80033bc:	4649      	mov	r1, r9
 80033be:	f7fd fa45 	bl	800084c <__aeabi_ddiv>
 80033c2:	4602      	mov	r2, r0
 80033c4:	460b      	mov	r3, r1
 80033c6:	4620      	mov	r0, r4
 80033c8:	4629      	mov	r1, r5
 80033ca:	f7fc ff5f 	bl	800028c <__adddf3>
 80033ce:	4602      	mov	r2, r0
 80033d0:	460b      	mov	r3, r1
 80033d2:	4610      	mov	r0, r2
 80033d4:	4619      	mov	r1, r3
 80033d6:	f7fd fc07 	bl	8000be8 <__aeabi_d2f>
 80033da:	4603      	mov	r3, r0
 80033dc:	4a27      	ldr	r2, [pc, #156]	; (800347c <Dropping+0x2e4>)
 80033de:	6013      	str	r3, [r2, #0]
				if (SpeedCmd <= 0)
 80033e0:	4b26      	ldr	r3, [pc, #152]	; (800347c <Dropping+0x2e4>)
 80033e2:	edd3 7a00 	vldr	s15, [r3]
 80033e6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80033ea:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80033ee:	d803      	bhi.n	80033f8 <Dropping+0x260>
					SpeedCmd = 0;
 80033f0:	4b22      	ldr	r3, [pc, #136]	; (800347c <Dropping+0x2e4>)
 80033f2:	f04f 0200 	mov.w	r2, #0
 80033f6:	601a      	str	r2, [r3, #0]
				if (SpeedCmd >= 810)
 80033f8:	4b20      	ldr	r3, [pc, #128]	; (800347c <Dropping+0x2e4>)
 80033fa:	edd3 7a00 	vldr	s15, [r3]
 80033fe:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80034b0 <Dropping+0x318>
 8003402:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	db02      	blt.n	8003412 <Dropping+0x27a>
					SpeedCmd = 810;
 800340c:	4b1b      	ldr	r3, [pc, #108]	; (800347c <Dropping+0x2e4>)
 800340e:	4a29      	ldr	r2, [pc, #164]	; (80034b4 <Dropping+0x31c>)
 8003410:	601a      	str	r2, [r3, #0]

				if (SpeedCmd != 0)
 8003412:	4b1a      	ldr	r3, [pc, #104]	; (800347c <Dropping+0x2e4>)
 8003414:	edd3 7a00 	vldr	s15, [r3]
 8003418:	eef5 7a40 	vcmp.f32	s15, #0.0
 800341c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003420:	d04a      	beq.n	80034b8 <Dropping+0x320>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003422:	4b1a      	ldr	r3, [pc, #104]	; (800348c <Dropping+0x2f4>)
 8003424:	781b      	ldrb	r3, [r3, #0]
 8003426:	4a15      	ldr	r2, [pc, #84]	; (800347c <Dropping+0x2e4>)
 8003428:	edd2 7a00 	vldr	s15, [r2]
 800342c:	eeb0 0a67 	vmov.f32	s0, s15
 8003430:	4618      	mov	r0, r3
 8003432:	f7fe fbc5 	bl	8001bc0 <CalculateTimer3Period>
 8003436:	4603      	mov	r3, r0
 8003438:	b29a      	uxth	r2, r3
 800343a:	4b15      	ldr	r3, [pc, #84]	; (8003490 <Dropping+0x2f8>)
 800343c:	801a      	strh	r2, [r3, #0]
 800343e:	e03d      	b.n	80034bc <Dropping+0x324>
 8003440:	33333333 	.word	0x33333333
 8003444:	40233333 	.word	0x40233333
 8003448:	9999999a 	.word	0x9999999a
 800344c:	c0239999 	.word	0xc0239999
 8003450:	d2f1a9fc 	.word	0xd2f1a9fc
 8003454:	3f50624d 	.word	0x3f50624d
 8003458:	20000440 	.word	0x20000440
 800345c:	20000433 	.word	0x20000433
 8003460:	20000439 	.word	0x20000439
 8003464:	2000043a 	.word	0x2000043a
 8003468:	20000464 	.word	0x20000464
 800346c:	2000000c 	.word	0x2000000c
 8003470:	20000444 	.word	0x20000444
 8003474:	2000046c 	.word	0x2000046c
 8003478:	20000474 	.word	0x20000474
 800347c:	200004fc 	.word	0x200004fc
 8003480:	20000538 	.word	0x20000538
 8003484:	20000548 	.word	0x20000548
 8003488:	20000458 	.word	0x20000458
 800348c:	20000003 	.word	0x20000003
 8003490:	20000450 	.word	0x20000450
 8003494:	20000544 	.word	0x20000544
 8003498:	20000478 	.word	0x20000478
 800349c:	20000534 	.word	0x20000534
 80034a0:	20000540 	.word	0x20000540
 80034a4:	20000468 	.word	0x20000468
 80034a8:	2000045c 	.word	0x2000045c
 80034ac:	40240000 	.word	0x40240000
 80034b0:	444a8000 	.word	0x444a8000
 80034b4:	444a8000 	.word	0x444a8000
					// Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else 
				{
					StopPulseGenerating();
 80034b8:	f7fe fb20 	bl	8001afc <StopPulseGenerating>
				}			
				if (SpeedCmd <= 0) // Stop braking
 80034bc:	4b35      	ldr	r3, [pc, #212]	; (8003594 <Dropping+0x3fc>)
 80034be:	edd3 7a00 	vldr	s15, [r3]
 80034c2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80034c6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034ca:	d80d      	bhi.n	80034e8 <Dropping+0x350>
				{
					StopPulseGenerating();
 80034cc:	f7fe fb16 	bl	8001afc <StopPulseGenerating>
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 80034d0:	4b30      	ldr	r3, [pc, #192]	; (8003594 <Dropping+0x3fc>)
 80034d2:	f04f 0200 	mov.w	r2, #0
 80034d6:	601a      	str	r2, [r3, #0]
					ResetPIDController();
 80034d8:	f7fe f8c2 	bl	8001660 <ResetPIDController>
					//AccRef = - 9.8;

					StartDropping = false; //	
 80034dc:	4b2e      	ldr	r3, [pc, #184]	; (8003598 <Dropping+0x400>)
 80034de:	2200      	movs	r2, #0
 80034e0:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 80034e2:	4b2e      	ldr	r3, [pc, #184]	; (800359c <Dropping+0x404>)
 80034e4:	2200      	movs	r2, #0
 80034e6:	701a      	strb	r2, [r3, #0]
					
				}
			}
		}
		if (!StartDropping && !StartPulling) // Waiting for some seconds before pulling up
 80034e8:	4b2b      	ldr	r3, [pc, #172]	; (8003598 <Dropping+0x400>)
 80034ea:	781b      	ldrb	r3, [r3, #0]
 80034ec:	f083 0301 	eor.w	r3, r3, #1
 80034f0:	b2db      	uxtb	r3, r3
 80034f2:	2b00      	cmp	r3, #0
 80034f4:	d019      	beq.n	800352a <Dropping+0x392>
 80034f6:	4b2a      	ldr	r3, [pc, #168]	; (80035a0 <Dropping+0x408>)
 80034f8:	781b      	ldrb	r3, [r3, #0]
 80034fa:	f083 0301 	eor.w	r3, r3, #1
 80034fe:	b2db      	uxtb	r3, r3
 8003500:	2b00      	cmp	r3, #0
 8003502:	d012      	beq.n	800352a <Dropping+0x392>
		{
	//		POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);					
	//		if (POSReach) // Check if position is reached or not
	//		{
				
				if (WaitingMiliSecond(StoppingTime)) // Wait some second
 8003504:	4b27      	ldr	r3, [pc, #156]	; (80035a4 <Dropping+0x40c>)
 8003506:	881b      	ldrh	r3, [r3, #0]
 8003508:	4618      	mov	r0, r3
 800350a:	f7fe fb33 	bl	8001b74 <WaitingMiliSecond>
 800350e:	4603      	mov	r3, r0
 8003510:	2b00      	cmp	r3, #0
 8003512:	d00a      	beq.n	800352a <Dropping+0x392>
				{			
					// Change to pulling stage
					StartPulling = true;
 8003514:	4b22      	ldr	r3, [pc, #136]	; (80035a0 <Dropping+0x408>)
 8003516:	2201      	movs	r2, #1
 8003518:	701a      	strb	r2, [r3, #0]
					//Timer3CountPeriod = CalculateTimer3Period(MotorDriver, PullingSpeed);
					// Timer3CountPeriod = (int)((float)(120000000.0/((float)PullingSpeed*(float)EncoderResolution)) + 0.5);
					// Start pulling to the home position
	//				StepPulseCmd = (int)MotorEncPulse/8; // calculate # of pulse cmd to return to the top postion
	//				IsStepPulseCmd = true;
					PRIsToggled = true;	// true = Pulling	
 800351a:	4b23      	ldr	r3, [pc, #140]	; (80035a8 <Dropping+0x410>)
 800351c:	2201      	movs	r2, #1
 800351e:	701a      	strb	r2, [r3, #0]
					
					//Start Running
					Direction = false; // pulling up direction
 8003520:	4b22      	ldr	r3, [pc, #136]	; (80035ac <Dropping+0x414>)
 8003522:	2200      	movs	r2, #0
 8003524:	701a      	strb	r2, [r3, #0]
					StartPulseGenerating();
 8003526:	f7fe fb07 	bl	8001b38 <StartPulseGenerating>
	//				DisableSTOP();
				}											
	//		}
		}						

		if (!StartDropping && StartPulling) // Pulling Stage
 800352a:	4b1b      	ldr	r3, [pc, #108]	; (8003598 <Dropping+0x400>)
 800352c:	781b      	ldrb	r3, [r3, #0]
 800352e:	f083 0301 	eor.w	r3, r3, #1
 8003532:	b2db      	uxtb	r3, r3
 8003534:	2b00      	cmp	r3, #0
 8003536:	d029      	beq.n	800358c <Dropping+0x3f4>
 8003538:	4b19      	ldr	r3, [pc, #100]	; (80035a0 <Dropping+0x408>)
 800353a:	781b      	ldrb	r3, [r3, #0]
 800353c:	2b00      	cmp	r3, #0
 800353e:	d025      	beq.n	800358c <Dropping+0x3f4>
		{	
			if (MotorDriver) // FDA7000, big model
 8003540:	4b1b      	ldr	r3, [pc, #108]	; (80035b0 <Dropping+0x418>)
 8003542:	781b      	ldrb	r3, [r3, #0]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d010      	beq.n	800356a <Dropping+0x3d2>
			{
				if (CheckGoingToRefPosition(false, 0))
 8003548:	2100      	movs	r1, #0
 800354a:	2000      	movs	r0, #0
 800354c:	f7fe fbc4 	bl	8001cd8 <CheckGoingToRefPosition>
 8003550:	4603      	mov	r3, r0
 8003552:	2b00      	cmp	r3, #0
 8003554:	d01a      	beq.n	800358c <Dropping+0x3f4>
				{
		//			POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);
		//			if (POSReach) // Reaching to the top/home postion
		//			{
						StartPulling = false;
 8003556:	4b12      	ldr	r3, [pc, #72]	; (80035a0 <Dropping+0x408>)
 8003558:	2200      	movs	r2, #0
 800355a:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 800355c:	4b15      	ldr	r3, [pc, #84]	; (80035b4 <Dropping+0x41c>)
 800355e:	2201      	movs	r2, #1
 8003560:	701a      	strb	r2, [r3, #0]
					
						StopPulseGenerating();
 8003562:	f7fe facb 	bl	8001afc <StopPulseGenerating>
						return true;
 8003566:	2301      	movs	r3, #1
 8003568:	e011      	b.n	800358e <Dropping+0x3f6>
		//			}			
				}				
			}
			else // ASDA A3
			{
				if (CheckGoingToRefPosition(false, 0))
 800356a:	2100      	movs	r1, #0
 800356c:	2000      	movs	r0, #0
 800356e:	f7fe fbb3 	bl	8001cd8 <CheckGoingToRefPosition>
 8003572:	4603      	mov	r3, r0
 8003574:	2b00      	cmp	r3, #0
 8003576:	d009      	beq.n	800358c <Dropping+0x3f4>
				{
						StartPulling = false;
 8003578:	4b09      	ldr	r3, [pc, #36]	; (80035a0 <Dropping+0x408>)
 800357a:	2200      	movs	r2, #0
 800357c:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 800357e:	4b0d      	ldr	r3, [pc, #52]	; (80035b4 <Dropping+0x41c>)
 8003580:	2201      	movs	r2, #1
 8003582:	701a      	strb	r2, [r3, #0]
					
						StopPulseGenerating();
 8003584:	f7fe faba 	bl	8001afc <StopPulseGenerating>
						return true;
 8003588:	2301      	movs	r3, #1
 800358a:	e000      	b.n	800358e <Dropping+0x3f6>
				}
			}
		}
		return false;
 800358c:	2300      	movs	r3, #0
	}	
}
 800358e:	4618      	mov	r0, r3
 8003590:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003594:	200004fc 	.word	0x200004fc
 8003598:	20000433 	.word	0x20000433
 800359c:	2000043a 	.word	0x2000043a
 80035a0:	20000439 	.word	0x20000439
 80035a4:	2000045e 	.word	0x2000045e
 80035a8:	20000446 	.word	0x20000446
 80035ac:	20000435 	.word	0x20000435
 80035b0:	20000003 	.word	0x20000003
 80035b4:	20000440 	.word	0x20000440

080035b8 <StopExperiment>:

void StopExperiment ()
{
 80035b8:	b580      	push	{r7, lr}
 80035ba:	af00      	add	r7, sp, #0
	// Reset all the flag and state
	StartRunning = false;
 80035bc:	4b0a      	ldr	r3, [pc, #40]	; (80035e8 <StopExperiment+0x30>)
 80035be:	2200      	movs	r2, #0
 80035c0:	701a      	strb	r2, [r3, #0]
	StartDropping = false;
 80035c2:	4b0a      	ldr	r3, [pc, #40]	; (80035ec <StopExperiment+0x34>)
 80035c4:	2200      	movs	r2, #0
 80035c6:	701a      	strb	r2, [r3, #0]
	StartPulling = false;
 80035c8:	4b09      	ldr	r3, [pc, #36]	; (80035f0 <StopExperiment+0x38>)
 80035ca:	2200      	movs	r2, #0
 80035cc:	701a      	strb	r2, [r3, #0]
	StopPulseGenerating(); // Stop pulse generation
 80035ce:	f7fe fa95 	bl	8001afc <StopPulseGenerating>
	ResetPIDController();
 80035d2:	f7fe f845 	bl	8001660 <ResetPIDController>
	//RunningTime = 0;
	Timer3CountPeriod = 0;
 80035d6:	4b07      	ldr	r3, [pc, #28]	; (80035f4 <StopExperiment+0x3c>)
 80035d8:	2200      	movs	r2, #0
 80035da:	801a      	strh	r2, [r3, #0]
	SpeedCmd = 0;	
 80035dc:	4b06      	ldr	r3, [pc, #24]	; (80035f8 <StopExperiment+0x40>)
 80035de:	f04f 0200 	mov.w	r2, #0
 80035e2:	601a      	str	r2, [r3, #0]
}
 80035e4:	bf00      	nop
 80035e6:	bd80      	pop	{r7, pc}
 80035e8:	20000434 	.word	0x20000434
 80035ec:	20000433 	.word	0x20000433
 80035f0:	20000439 	.word	0x20000439
 80035f4:	20000450 	.word	0x20000450
 80035f8:	200004fc 	.word	0x200004fc
 80035fc:	00000000 	.word	0x00000000

08003600 <CalculateRunningSpec>:
void CalculateRunningSpec () // Calculate running parameters
{
 8003600:	b5b0      	push	{r4, r5, r7, lr}
 8003602:	ed2d 8b02 	vpush	{d8}
 8003606:	af00      	add	r7, sp, #0
	GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8003608:	4bcd      	ldr	r3, [pc, #820]	; (8003940 <CalculateRunningSpec+0x340>)
 800360a:	781b      	ldrb	r3, [r3, #0]
 800360c:	4618      	mov	r0, r3
 800360e:	f7fc ff89 	bl	8000524 <__aeabi_i2d>
 8003612:	a3c5      	add	r3, pc, #788	; (adr r3, 8003928 <CalculateRunningSpec+0x328>)
 8003614:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003618:	f7fc ffee 	bl	80005f8 <__aeabi_dmul>
 800361c:	4602      	mov	r2, r0
 800361e:	460b      	mov	r3, r1
 8003620:	4610      	mov	r0, r2
 8003622:	4619      	mov	r1, r3
 8003624:	f04f 0200 	mov.w	r2, #0
 8003628:	4bc6      	ldr	r3, [pc, #792]	; (8003944 <CalculateRunningSpec+0x344>)
 800362a:	f7fd f90f 	bl	800084c <__aeabi_ddiv>
 800362e:	4602      	mov	r2, r0
 8003630:	460b      	mov	r3, r1
 8003632:	4610      	mov	r0, r2
 8003634:	4619      	mov	r1, r3
 8003636:	f7fd fad7 	bl	8000be8 <__aeabi_d2f>
 800363a:	4603      	mov	r3, r0
 800363c:	4ac2      	ldr	r2, [pc, #776]	; (8003948 <CalculateRunningSpec+0x348>)
 800363e:	6013      	str	r3, [r2, #0]
	
	// Dropping Stage Calculations
	DroppingMaxSpeed = (uint16_t)(10*sqrt(2*DroppingAccel*DroppingAccelDistance)/(DrumRadius)); // in rpm; 10~60/2pi
 8003640:	4bc2      	ldr	r3, [pc, #776]	; (800394c <CalculateRunningSpec+0x34c>)
 8003642:	edd3 7a00 	vldr	s15, [r3]
 8003646:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800364a:	4bc1      	ldr	r3, [pc, #772]	; (8003950 <CalculateRunningSpec+0x350>)
 800364c:	edd3 7a00 	vldr	s15, [r3]
 8003650:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003654:	ee17 0a90 	vmov	r0, s15
 8003658:	f7fc ff76 	bl	8000548 <__aeabi_f2d>
 800365c:	4602      	mov	r2, r0
 800365e:	460b      	mov	r3, r1
 8003660:	ec43 2b10 	vmov	d0, r2, r3
 8003664:	f00a fb2c 	bl	800dcc0 <sqrt>
 8003668:	ec51 0b10 	vmov	r0, r1, d0
 800366c:	f04f 0200 	mov.w	r2, #0
 8003670:	4bb8      	ldr	r3, [pc, #736]	; (8003954 <CalculateRunningSpec+0x354>)
 8003672:	f7fc ffc1 	bl	80005f8 <__aeabi_dmul>
 8003676:	4602      	mov	r2, r0
 8003678:	460b      	mov	r3, r1
 800367a:	4614      	mov	r4, r2
 800367c:	461d      	mov	r5, r3
 800367e:	4bb6      	ldr	r3, [pc, #728]	; (8003958 <CalculateRunningSpec+0x358>)
 8003680:	681b      	ldr	r3, [r3, #0]
 8003682:	4618      	mov	r0, r3
 8003684:	f7fc ff60 	bl	8000548 <__aeabi_f2d>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4620      	mov	r0, r4
 800368e:	4629      	mov	r1, r5
 8003690:	f7fd f8dc 	bl	800084c <__aeabi_ddiv>
 8003694:	4602      	mov	r2, r0
 8003696:	460b      	mov	r3, r1
 8003698:	4610      	mov	r0, r2
 800369a:	4619      	mov	r1, r3
 800369c:	f7fd fa84 	bl	8000ba8 <__aeabi_d2uiz>
 80036a0:	4603      	mov	r3, r0
 80036a2:	b29a      	uxth	r2, r3
 80036a4:	4bad      	ldr	r3, [pc, #692]	; (800395c <CalculateRunningSpec+0x35c>)
 80036a6:	801a      	strh	r2, [r3, #0]
	DroppingEpsilonAcc = DroppingAccel/DrumRadius;
 80036a8:	4ba8      	ldr	r3, [pc, #672]	; (800394c <CalculateRunningSpec+0x34c>)
 80036aa:	edd3 6a00 	vldr	s13, [r3]
 80036ae:	4baa      	ldr	r3, [pc, #680]	; (8003958 <CalculateRunningSpec+0x358>)
 80036b0:	ed93 7a00 	vldr	s14, [r3]
 80036b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036b8:	4ba9      	ldr	r3, [pc, #676]	; (8003960 <CalculateRunningSpec+0x360>)
 80036ba:	edc3 7a00 	vstr	s15, [r3]
	DroppingEpsilonDec = DroppingDecel/DrumRadius;	
 80036be:	4ba9      	ldr	r3, [pc, #676]	; (8003964 <CalculateRunningSpec+0x364>)
 80036c0:	edd3 6a00 	vldr	s13, [r3]
 80036c4:	4ba4      	ldr	r3, [pc, #656]	; (8003958 <CalculateRunningSpec+0x358>)
 80036c6:	ed93 7a00 	vldr	s14, [r3]
 80036ca:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ce:	4ba6      	ldr	r3, [pc, #664]	; (8003968 <CalculateRunningSpec+0x368>)
 80036d0:	edc3 7a00 	vstr	s15, [r3]
	
	// Pulling Stage Calculations
	PullingMaxSpeed = (uint16_t)(10*sqrt(2*PullingAccel*PullingAccelDistance)/(DrumRadius)); // in rpm
 80036d4:	4ba5      	ldr	r3, [pc, #660]	; (800396c <CalculateRunningSpec+0x36c>)
 80036d6:	edd3 7a00 	vldr	s15, [r3]
 80036da:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80036de:	4ba4      	ldr	r3, [pc, #656]	; (8003970 <CalculateRunningSpec+0x370>)
 80036e0:	edd3 7a00 	vldr	s15, [r3]
 80036e4:	ee67 7a27 	vmul.f32	s15, s14, s15
 80036e8:	ee17 0a90 	vmov	r0, s15
 80036ec:	f7fc ff2c 	bl	8000548 <__aeabi_f2d>
 80036f0:	4602      	mov	r2, r0
 80036f2:	460b      	mov	r3, r1
 80036f4:	ec43 2b10 	vmov	d0, r2, r3
 80036f8:	f00a fae2 	bl	800dcc0 <sqrt>
 80036fc:	ec51 0b10 	vmov	r0, r1, d0
 8003700:	f04f 0200 	mov.w	r2, #0
 8003704:	4b93      	ldr	r3, [pc, #588]	; (8003954 <CalculateRunningSpec+0x354>)
 8003706:	f7fc ff77 	bl	80005f8 <__aeabi_dmul>
 800370a:	4602      	mov	r2, r0
 800370c:	460b      	mov	r3, r1
 800370e:	4614      	mov	r4, r2
 8003710:	461d      	mov	r5, r3
 8003712:	4b91      	ldr	r3, [pc, #580]	; (8003958 <CalculateRunningSpec+0x358>)
 8003714:	681b      	ldr	r3, [r3, #0]
 8003716:	4618      	mov	r0, r3
 8003718:	f7fc ff16 	bl	8000548 <__aeabi_f2d>
 800371c:	4602      	mov	r2, r0
 800371e:	460b      	mov	r3, r1
 8003720:	4620      	mov	r0, r4
 8003722:	4629      	mov	r1, r5
 8003724:	f7fd f892 	bl	800084c <__aeabi_ddiv>
 8003728:	4602      	mov	r2, r0
 800372a:	460b      	mov	r3, r1
 800372c:	4610      	mov	r0, r2
 800372e:	4619      	mov	r1, r3
 8003730:	f7fd fa3a 	bl	8000ba8 <__aeabi_d2uiz>
 8003734:	4603      	mov	r3, r0
 8003736:	b29a      	uxth	r2, r3
 8003738:	4b8e      	ldr	r3, [pc, #568]	; (8003974 <CalculateRunningSpec+0x374>)
 800373a:	801a      	strh	r2, [r3, #0]
	PullingEpsilonAcc = PullingAccel/DrumRadius;
 800373c:	4b8b      	ldr	r3, [pc, #556]	; (800396c <CalculateRunningSpec+0x36c>)
 800373e:	edd3 6a00 	vldr	s13, [r3]
 8003742:	4b85      	ldr	r3, [pc, #532]	; (8003958 <CalculateRunningSpec+0x358>)
 8003744:	ed93 7a00 	vldr	s14, [r3]
 8003748:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800374c:	4b8a      	ldr	r3, [pc, #552]	; (8003978 <CalculateRunningSpec+0x378>)
 800374e:	edc3 7a00 	vstr	s15, [r3]
	PullingEpsilonDec = PullingDecel/DrumRadius;
 8003752:	4b8a      	ldr	r3, [pc, #552]	; (800397c <CalculateRunningSpec+0x37c>)
 8003754:	edd3 6a00 	vldr	s13, [r3]
 8003758:	4b7f      	ldr	r3, [pc, #508]	; (8003958 <CalculateRunningSpec+0x358>)
 800375a:	ed93 7a00 	vldr	s14, [r3]
 800375e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003762:	4b87      	ldr	r3, [pc, #540]	; (8003980 <CalculateRunningSpec+0x380>)
 8003764:	edc3 7a00 	vstr	s15, [r3]
	
	PullingDecelTime = (PullingMaxSpeed * (2*3.14/60) * DrumRadius) / PullingDecel;
 8003768:	4b82      	ldr	r3, [pc, #520]	; (8003974 <CalculateRunningSpec+0x374>)
 800376a:	881b      	ldrh	r3, [r3, #0]
 800376c:	4618      	mov	r0, r3
 800376e:	f7fc fed9 	bl	8000524 <__aeabi_i2d>
 8003772:	a36f      	add	r3, pc, #444	; (adr r3, 8003930 <CalculateRunningSpec+0x330>)
 8003774:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003778:	f7fc ff3e 	bl	80005f8 <__aeabi_dmul>
 800377c:	4602      	mov	r2, r0
 800377e:	460b      	mov	r3, r1
 8003780:	4614      	mov	r4, r2
 8003782:	461d      	mov	r5, r3
 8003784:	4b74      	ldr	r3, [pc, #464]	; (8003958 <CalculateRunningSpec+0x358>)
 8003786:	681b      	ldr	r3, [r3, #0]
 8003788:	4618      	mov	r0, r3
 800378a:	f7fc fedd 	bl	8000548 <__aeabi_f2d>
 800378e:	4602      	mov	r2, r0
 8003790:	460b      	mov	r3, r1
 8003792:	4620      	mov	r0, r4
 8003794:	4629      	mov	r1, r5
 8003796:	f7fc ff2f 	bl	80005f8 <__aeabi_dmul>
 800379a:	4602      	mov	r2, r0
 800379c:	460b      	mov	r3, r1
 800379e:	4614      	mov	r4, r2
 80037a0:	461d      	mov	r5, r3
 80037a2:	4b76      	ldr	r3, [pc, #472]	; (800397c <CalculateRunningSpec+0x37c>)
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	4618      	mov	r0, r3
 80037a8:	f7fc fece 	bl	8000548 <__aeabi_f2d>
 80037ac:	4602      	mov	r2, r0
 80037ae:	460b      	mov	r3, r1
 80037b0:	4620      	mov	r0, r4
 80037b2:	4629      	mov	r1, r5
 80037b4:	f7fd f84a 	bl	800084c <__aeabi_ddiv>
 80037b8:	4602      	mov	r2, r0
 80037ba:	460b      	mov	r3, r1
 80037bc:	4610      	mov	r0, r2
 80037be:	4619      	mov	r1, r3
 80037c0:	f7fd fa12 	bl	8000be8 <__aeabi_d2f>
 80037c4:	4603      	mov	r3, r0
 80037c6:	4a6f      	ldr	r2, [pc, #444]	; (8003984 <CalculateRunningSpec+0x384>)
 80037c8:	6013      	str	r3, [r2, #0]
	PullingDecelDistance = 0.5*PullingMaxSpeed*(2*3.14/60)*DrumRadius*PullingDecelTime;
 80037ca:	4b6a      	ldr	r3, [pc, #424]	; (8003974 <CalculateRunningSpec+0x374>)
 80037cc:	881b      	ldrh	r3, [r3, #0]
 80037ce:	4618      	mov	r0, r3
 80037d0:	f7fc fea8 	bl	8000524 <__aeabi_i2d>
 80037d4:	f04f 0200 	mov.w	r2, #0
 80037d8:	4b6b      	ldr	r3, [pc, #428]	; (8003988 <CalculateRunningSpec+0x388>)
 80037da:	f7fc ff0d 	bl	80005f8 <__aeabi_dmul>
 80037de:	4602      	mov	r2, r0
 80037e0:	460b      	mov	r3, r1
 80037e2:	4610      	mov	r0, r2
 80037e4:	4619      	mov	r1, r3
 80037e6:	a352      	add	r3, pc, #328	; (adr r3, 8003930 <CalculateRunningSpec+0x330>)
 80037e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ec:	f7fc ff04 	bl	80005f8 <__aeabi_dmul>
 80037f0:	4602      	mov	r2, r0
 80037f2:	460b      	mov	r3, r1
 80037f4:	4614      	mov	r4, r2
 80037f6:	461d      	mov	r5, r3
 80037f8:	4b57      	ldr	r3, [pc, #348]	; (8003958 <CalculateRunningSpec+0x358>)
 80037fa:	681b      	ldr	r3, [r3, #0]
 80037fc:	4618      	mov	r0, r3
 80037fe:	f7fc fea3 	bl	8000548 <__aeabi_f2d>
 8003802:	4602      	mov	r2, r0
 8003804:	460b      	mov	r3, r1
 8003806:	4620      	mov	r0, r4
 8003808:	4629      	mov	r1, r5
 800380a:	f7fc fef5 	bl	80005f8 <__aeabi_dmul>
 800380e:	4602      	mov	r2, r0
 8003810:	460b      	mov	r3, r1
 8003812:	4614      	mov	r4, r2
 8003814:	461d      	mov	r5, r3
 8003816:	4b5b      	ldr	r3, [pc, #364]	; (8003984 <CalculateRunningSpec+0x384>)
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	4618      	mov	r0, r3
 800381c:	f7fc fe94 	bl	8000548 <__aeabi_f2d>
 8003820:	4602      	mov	r2, r0
 8003822:	460b      	mov	r3, r1
 8003824:	4620      	mov	r0, r4
 8003826:	4629      	mov	r1, r5
 8003828:	f7fc fee6 	bl	80005f8 <__aeabi_dmul>
 800382c:	4602      	mov	r2, r0
 800382e:	460b      	mov	r3, r1
 8003830:	4610      	mov	r0, r2
 8003832:	4619      	mov	r1, r3
 8003834:	f7fd f9d8 	bl	8000be8 <__aeabi_d2f>
 8003838:	4603      	mov	r3, r0
 800383a:	4a54      	ldr	r2, [pc, #336]	; (800398c <CalculateRunningSpec+0x38c>)
 800383c:	6013      	str	r3, [r2, #0]
	
	PullingTotalDistance = ((float)PullingAccelDistance + PullingDecelDistance)*1.5;
 800383e:	4b4c      	ldr	r3, [pc, #304]	; (8003970 <CalculateRunningSpec+0x370>)
 8003840:	ed93 7a00 	vldr	s14, [r3]
 8003844:	4b51      	ldr	r3, [pc, #324]	; (800398c <CalculateRunningSpec+0x38c>)
 8003846:	edd3 7a00 	vldr	s15, [r3]
 800384a:	ee77 7a27 	vadd.f32	s15, s14, s15
 800384e:	eeb7 7a08 	vmov.f32	s14, #120	; 0x3fc00000  1.5
 8003852:	ee67 7a87 	vmul.f32	s15, s15, s14
 8003856:	4b4e      	ldr	r3, [pc, #312]	; (8003990 <CalculateRunningSpec+0x390>)
 8003858:	edc3 7a00 	vstr	s15, [r3]
	PullingBotomPulseCmdPosition = (int)((float)EncoderResolution*(float)PullingTotalDistance/((float)(2*3.14*DrumRadius))); // unit: pulses
 800385c:	4b4d      	ldr	r3, [pc, #308]	; (8003994 <CalculateRunningSpec+0x394>)
 800385e:	881b      	ldrh	r3, [r3, #0]
 8003860:	ee07 3a90 	vmov	s15, r3
 8003864:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8003868:	4b49      	ldr	r3, [pc, #292]	; (8003990 <CalculateRunningSpec+0x390>)
 800386a:	edd3 7a00 	vldr	s15, [r3]
 800386e:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003872:	4b39      	ldr	r3, [pc, #228]	; (8003958 <CalculateRunningSpec+0x358>)
 8003874:	681b      	ldr	r3, [r3, #0]
 8003876:	4618      	mov	r0, r3
 8003878:	f7fc fe66 	bl	8000548 <__aeabi_f2d>
 800387c:	a32e      	add	r3, pc, #184	; (adr r3, 8003938 <CalculateRunningSpec+0x338>)
 800387e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003882:	f7fc feb9 	bl	80005f8 <__aeabi_dmul>
 8003886:	4602      	mov	r2, r0
 8003888:	460b      	mov	r3, r1
 800388a:	4610      	mov	r0, r2
 800388c:	4619      	mov	r1, r3
 800388e:	f7fd f9ab 	bl	8000be8 <__aeabi_d2f>
 8003892:	ee07 0a10 	vmov	s14, r0
 8003896:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800389a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800389e:	ee17 2a90 	vmov	r2, s15
 80038a2:	4b3d      	ldr	r3, [pc, #244]	; (8003998 <CalculateRunningSpec+0x398>)
 80038a4:	601a      	str	r2, [r3, #0]

	FlyingPosPulseCmd = ((int)(EncoderResolution*PullingAccelDistance/(2*3.14*DrumRadius)));
 80038a6:	4b3b      	ldr	r3, [pc, #236]	; (8003994 <CalculateRunningSpec+0x394>)
 80038a8:	881b      	ldrh	r3, [r3, #0]
 80038aa:	ee07 3a90 	vmov	s15, r3
 80038ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80038b2:	4b2f      	ldr	r3, [pc, #188]	; (8003970 <CalculateRunningSpec+0x370>)
 80038b4:	edd3 7a00 	vldr	s15, [r3]
 80038b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80038bc:	ee17 0a90 	vmov	r0, s15
 80038c0:	f7fc fe42 	bl	8000548 <__aeabi_f2d>
 80038c4:	4604      	mov	r4, r0
 80038c6:	460d      	mov	r5, r1
 80038c8:	4b23      	ldr	r3, [pc, #140]	; (8003958 <CalculateRunningSpec+0x358>)
 80038ca:	681b      	ldr	r3, [r3, #0]
 80038cc:	4618      	mov	r0, r3
 80038ce:	f7fc fe3b 	bl	8000548 <__aeabi_f2d>
 80038d2:	a319      	add	r3, pc, #100	; (adr r3, 8003938 <CalculateRunningSpec+0x338>)
 80038d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80038d8:	f7fc fe8e 	bl	80005f8 <__aeabi_dmul>
 80038dc:	4602      	mov	r2, r0
 80038de:	460b      	mov	r3, r1
 80038e0:	4620      	mov	r0, r4
 80038e2:	4629      	mov	r1, r5
 80038e4:	f7fc ffb2 	bl	800084c <__aeabi_ddiv>
 80038e8:	4602      	mov	r2, r0
 80038ea:	460b      	mov	r3, r1
 80038ec:	4610      	mov	r0, r2
 80038ee:	4619      	mov	r1, r3
 80038f0:	f7fd f932 	bl	8000b58 <__aeabi_d2iz>
 80038f4:	4603      	mov	r3, r0
 80038f6:	4a29      	ldr	r2, [pc, #164]	; (800399c <CalculateRunningSpec+0x39c>)
 80038f8:	6013      	str	r3, [r2, #0]
	BottomFreeDropPulseCmd = ((int)(EncoderResolution*DroppingAccelDistance/(2*3.14*DrumRadius)));
 80038fa:	4b26      	ldr	r3, [pc, #152]	; (8003994 <CalculateRunningSpec+0x394>)
 80038fc:	881b      	ldrh	r3, [r3, #0]
 80038fe:	ee07 3a90 	vmov	s15, r3
 8003902:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8003906:	4b12      	ldr	r3, [pc, #72]	; (8003950 <CalculateRunningSpec+0x350>)
 8003908:	edd3 7a00 	vldr	s15, [r3]
 800390c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003910:	ee17 0a90 	vmov	r0, s15
 8003914:	f7fc fe18 	bl	8000548 <__aeabi_f2d>
 8003918:	4604      	mov	r4, r0
 800391a:	460d      	mov	r5, r1
 800391c:	4b0e      	ldr	r3, [pc, #56]	; (8003958 <CalculateRunningSpec+0x358>)
 800391e:	681b      	ldr	r3, [r3, #0]
 8003920:	4618      	mov	r0, r3
 8003922:	f7fc fe11 	bl	8000548 <__aeabi_f2d>
 8003926:	e03b      	b.n	80039a0 <CalculateRunningSpec+0x3a0>
 8003928:	9999999a 	.word	0x9999999a
 800392c:	3fb99999 	.word	0x3fb99999
 8003930:	46508dff 	.word	0x46508dff
 8003934:	3fbacb6f 	.word	0x3fbacb6f
 8003938:	51eb851f 	.word	0x51eb851f
 800393c:	40191eb8 	.word	0x40191eb8
 8003940:	2000045d 	.word	0x2000045d
 8003944:	40080000 	.word	0x40080000
 8003948:	20000460 	.word	0x20000460
 800394c:	20000464 	.word	0x20000464
 8003950:	20000478 	.word	0x20000478
 8003954:	40240000 	.word	0x40240000
 8003958:	20000458 	.word	0x20000458
 800395c:	20000474 	.word	0x20000474
 8003960:	2000046c 	.word	0x2000046c
 8003964:	20000468 	.word	0x20000468
 8003968:	20000470 	.word	0x20000470
 800396c:	2000047c 	.word	0x2000047c
 8003970:	20000498 	.word	0x20000498
 8003974:	20000490 	.word	0x20000490
 8003978:	20000484 	.word	0x20000484
 800397c:	20000480 	.word	0x20000480
 8003980:	20000488 	.word	0x20000488
 8003984:	2000048c 	.word	0x2000048c
 8003988:	3fe00000 	.word	0x3fe00000
 800398c:	20000494 	.word	0x20000494
 8003990:	2000049c 	.word	0x2000049c
 8003994:	20000008 	.word	0x20000008
 8003998:	200004a0 	.word	0x200004a0
 800399c:	200004a8 	.word	0x200004a8
 80039a0:	a343      	add	r3, pc, #268	; (adr r3, 8003ab0 <CalculateRunningSpec+0x4b0>)
 80039a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039a6:	f7fc fe27 	bl	80005f8 <__aeabi_dmul>
 80039aa:	4602      	mov	r2, r0
 80039ac:	460b      	mov	r3, r1
 80039ae:	4620      	mov	r0, r4
 80039b0:	4629      	mov	r1, r5
 80039b2:	f7fc ff4b 	bl	800084c <__aeabi_ddiv>
 80039b6:	4602      	mov	r2, r0
 80039b8:	460b      	mov	r3, r1
 80039ba:	4610      	mov	r0, r2
 80039bc:	4619      	mov	r1, r3
 80039be:	f7fd f8cb 	bl	8000b58 <__aeabi_d2iz>
 80039c2:	4603      	mov	r3, r0
 80039c4:	4a34      	ldr	r2, [pc, #208]	; (8003a98 <CalculateRunningSpec+0x498>)
 80039c6:	6013      	str	r3, [r2, #0]

	WaitingTime = (uint16_t)(((PullingMaxSpeed*(2*3.14/60)*DrumRadius)/9.8 - PullingDecelTime)*1000*2*0.7); // *1000 to convert to ms; *2 for both flying up and dropping down
 80039c8:	4b34      	ldr	r3, [pc, #208]	; (8003a9c <CalculateRunningSpec+0x49c>)
 80039ca:	881b      	ldrh	r3, [r3, #0]
 80039cc:	4618      	mov	r0, r3
 80039ce:	f7fc fda9 	bl	8000524 <__aeabi_i2d>
 80039d2:	a32b      	add	r3, pc, #172	; (adr r3, 8003a80 <CalculateRunningSpec+0x480>)
 80039d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80039d8:	f7fc fe0e 	bl	80005f8 <__aeabi_dmul>
 80039dc:	4602      	mov	r2, r0
 80039de:	460b      	mov	r3, r1
 80039e0:	4614      	mov	r4, r2
 80039e2:	461d      	mov	r5, r3
 80039e4:	4b2e      	ldr	r3, [pc, #184]	; (8003aa0 <CalculateRunningSpec+0x4a0>)
 80039e6:	681b      	ldr	r3, [r3, #0]
 80039e8:	4618      	mov	r0, r3
 80039ea:	f7fc fdad 	bl	8000548 <__aeabi_f2d>
 80039ee:	4602      	mov	r2, r0
 80039f0:	460b      	mov	r3, r1
 80039f2:	4620      	mov	r0, r4
 80039f4:	4629      	mov	r1, r5
 80039f6:	f7fc fdff 	bl	80005f8 <__aeabi_dmul>
 80039fa:	4602      	mov	r2, r0
 80039fc:	460b      	mov	r3, r1
 80039fe:	4610      	mov	r0, r2
 8003a00:	4619      	mov	r1, r3
 8003a02:	a321      	add	r3, pc, #132	; (adr r3, 8003a88 <CalculateRunningSpec+0x488>)
 8003a04:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a08:	f7fc ff20 	bl	800084c <__aeabi_ddiv>
 8003a0c:	4602      	mov	r2, r0
 8003a0e:	460b      	mov	r3, r1
 8003a10:	4614      	mov	r4, r2
 8003a12:	461d      	mov	r5, r3
 8003a14:	4b23      	ldr	r3, [pc, #140]	; (8003aa4 <CalculateRunningSpec+0x4a4>)
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	4618      	mov	r0, r3
 8003a1a:	f7fc fd95 	bl	8000548 <__aeabi_f2d>
 8003a1e:	4602      	mov	r2, r0
 8003a20:	460b      	mov	r3, r1
 8003a22:	4620      	mov	r0, r4
 8003a24:	4629      	mov	r1, r5
 8003a26:	f7fc fc2f 	bl	8000288 <__aeabi_dsub>
 8003a2a:	4602      	mov	r2, r0
 8003a2c:	460b      	mov	r3, r1
 8003a2e:	4610      	mov	r0, r2
 8003a30:	4619      	mov	r1, r3
 8003a32:	f04f 0200 	mov.w	r2, #0
 8003a36:	4b1c      	ldr	r3, [pc, #112]	; (8003aa8 <CalculateRunningSpec+0x4a8>)
 8003a38:	f7fc fdde 	bl	80005f8 <__aeabi_dmul>
 8003a3c:	4602      	mov	r2, r0
 8003a3e:	460b      	mov	r3, r1
 8003a40:	4610      	mov	r0, r2
 8003a42:	4619      	mov	r1, r3
 8003a44:	4602      	mov	r2, r0
 8003a46:	460b      	mov	r3, r1
 8003a48:	f7fc fc20 	bl	800028c <__adddf3>
 8003a4c:	4602      	mov	r2, r0
 8003a4e:	460b      	mov	r3, r1
 8003a50:	4610      	mov	r0, r2
 8003a52:	4619      	mov	r1, r3
 8003a54:	a30e      	add	r3, pc, #56	; (adr r3, 8003a90 <CalculateRunningSpec+0x490>)
 8003a56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003a5a:	f7fc fdcd 	bl	80005f8 <__aeabi_dmul>
 8003a5e:	4602      	mov	r2, r0
 8003a60:	460b      	mov	r3, r1
 8003a62:	4610      	mov	r0, r2
 8003a64:	4619      	mov	r1, r3
 8003a66:	f7fd f89f 	bl	8000ba8 <__aeabi_d2uiz>
 8003a6a:	4603      	mov	r3, r0
 8003a6c:	b29a      	uxth	r2, r3
 8003a6e:	4b0f      	ldr	r3, [pc, #60]	; (8003aac <CalculateRunningSpec+0x4ac>)
 8003a70:	801a      	strh	r2, [r3, #0]
}
 8003a72:	bf00      	nop
 8003a74:	46bd      	mov	sp, r7
 8003a76:	ecbd 8b02 	vpop	{d8}
 8003a7a:	bdb0      	pop	{r4, r5, r7, pc}
 8003a7c:	f3af 8000 	nop.w
 8003a80:	46508dff 	.word	0x46508dff
 8003a84:	3fbacb6f 	.word	0x3fbacb6f
 8003a88:	9999999a 	.word	0x9999999a
 8003a8c:	40239999 	.word	0x40239999
 8003a90:	66666666 	.word	0x66666666
 8003a94:	3fe66666 	.word	0x3fe66666
 8003a98:	200004ac 	.word	0x200004ac
 8003a9c:	20000490 	.word	0x20000490
 8003aa0:	20000458 	.word	0x20000458
 8003aa4:	2000048c 	.word	0x2000048c
 8003aa8:	408f4000 	.word	0x408f4000
 8003aac:	2000044a 	.word	0x2000044a
 8003ab0:	51eb851f 	.word	0x51eb851f
 8003ab4:	40191eb8 	.word	0x40191eb8

08003ab8 <InitParams>:
void InitParams ()
{
 8003ab8:	b580      	push	{r7, lr}
 8003aba:	b082      	sub	sp, #8
 8003abc:	af00      	add	r7, sp, #0
	// Load Parameters from the memory
	LoadSavedParam(MemoryAddress,Params);
 8003abe:	4929      	ldr	r1, [pc, #164]	; (8003b64 <InitParams+0xac>)
 8003ac0:	4829      	ldr	r0, [pc, #164]	; (8003b68 <InitParams+0xb0>)
 8003ac2:	f7fd feb5 	bl	8001830 <LoadSavedParam>
	
	// General Params
	DrumRadius = Params[0];	
 8003ac6:	4b27      	ldr	r3, [pc, #156]	; (8003b64 <InitParams+0xac>)
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	4a28      	ldr	r2, [pc, #160]	; (8003b6c <InitParams+0xb4>)
 8003acc:	6013      	str	r3, [r2, #0]
	PullingSpeed = Params[1];
 8003ace:	4b25      	ldr	r3, [pc, #148]	; (8003b64 <InitParams+0xac>)
 8003ad0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003ad4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003ad8:	edc7 7a01 	vstr	s15, [r7, #4]
 8003adc:	793b      	ldrb	r3, [r7, #4]
 8003ade:	b2da      	uxtb	r2, r3
 8003ae0:	4b23      	ldr	r3, [pc, #140]	; (8003b70 <InitParams+0xb8>)
 8003ae2:	701a      	strb	r2, [r3, #0]
	StoppingTime = Params[2];
 8003ae4:	4b1f      	ldr	r3, [pc, #124]	; (8003b64 <InitParams+0xac>)
 8003ae6:	edd3 7a02 	vldr	s15, [r3, #8]
 8003aea:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003aee:	ee17 3a90 	vmov	r3, s15
 8003af2:	b29a      	uxth	r2, r3
 8003af4:	4b1f      	ldr	r3, [pc, #124]	; (8003b74 <InitParams+0xbc>)
 8003af6:	801a      	strh	r2, [r3, #0]
	SampleTime = Params[3];
 8003af8:	4b1a      	ldr	r3, [pc, #104]	; (8003b64 <InitParams+0xac>)
 8003afa:	edd3 7a03 	vldr	s15, [r3, #12]
 8003afe:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003b02:	edc7 7a01 	vstr	s15, [r7, #4]
 8003b06:	793b      	ldrb	r3, [r7, #4]
 8003b08:	b2da      	uxtb	r2, r3
 8003b0a:	4b1b      	ldr	r3, [pc, #108]	; (8003b78 <InitParams+0xc0>)
 8003b0c:	701a      	strb	r2, [r3, #0]
	
	// Dropping Stage Params
	DroppingAccelDistance = Params[4];
 8003b0e:	4b15      	ldr	r3, [pc, #84]	; (8003b64 <InitParams+0xac>)
 8003b10:	691b      	ldr	r3, [r3, #16]
 8003b12:	4a1a      	ldr	r2, [pc, #104]	; (8003b7c <InitParams+0xc4>)
 8003b14:	6013      	str	r3, [r2, #0]
	DroppingAccel  = Params[5];
 8003b16:	4b13      	ldr	r3, [pc, #76]	; (8003b64 <InitParams+0xac>)
 8003b18:	695b      	ldr	r3, [r3, #20]
 8003b1a:	4a19      	ldr	r2, [pc, #100]	; (8003b80 <InitParams+0xc8>)
 8003b1c:	6013      	str	r3, [r2, #0]
	DroppingDecel = Params[6];
 8003b1e:	4b11      	ldr	r3, [pc, #68]	; (8003b64 <InitParams+0xac>)
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	4a18      	ldr	r2, [pc, #96]	; (8003b84 <InitParams+0xcc>)
 8003b24:	6013      	str	r3, [r2, #0]

	
	// Pulling Stage Params
	PullingAccelDistance = Params[7];
 8003b26:	4b0f      	ldr	r3, [pc, #60]	; (8003b64 <InitParams+0xac>)
 8003b28:	69db      	ldr	r3, [r3, #28]
 8003b2a:	4a17      	ldr	r2, [pc, #92]	; (8003b88 <InitParams+0xd0>)
 8003b2c:	6013      	str	r3, [r2, #0]
	PullingAccel = Params[8];
 8003b2e:	4b0d      	ldr	r3, [pc, #52]	; (8003b64 <InitParams+0xac>)
 8003b30:	6a1b      	ldr	r3, [r3, #32]
 8003b32:	4a16      	ldr	r2, [pc, #88]	; (8003b8c <InitParams+0xd4>)
 8003b34:	6013      	str	r3, [r2, #0]
	PullingDecel = Params[9];
 8003b36:	4b0b      	ldr	r3, [pc, #44]	; (8003b64 <InitParams+0xac>)
 8003b38:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b3a:	4a15      	ldr	r2, [pc, #84]	; (8003b90 <InitParams+0xd8>)
 8003b3c:	6013      	str	r3, [r2, #0]
	
	// PID Controller params
	FlyAccSlope = Params[10];
 8003b3e:	4b09      	ldr	r3, [pc, #36]	; (8003b64 <InitParams+0xac>)
 8003b40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b42:	4a14      	ldr	r2, [pc, #80]	; (8003b94 <InitParams+0xdc>)
 8003b44:	6013      	str	r3, [r2, #0]
	Ki = Params[11];
 8003b46:	4b07      	ldr	r3, [pc, #28]	; (8003b64 <InitParams+0xac>)
 8003b48:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b4a:	4a13      	ldr	r2, [pc, #76]	; (8003b98 <InitParams+0xe0>)
 8003b4c:	6013      	str	r3, [r2, #0]
	//Kd = Params[12];
	BrakeAccSlope = Params[12];
 8003b4e:	4b05      	ldr	r3, [pc, #20]	; (8003b64 <InitParams+0xac>)
 8003b50:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003b52:	4a12      	ldr	r2, [pc, #72]	; (8003b9c <InitParams+0xe4>)
 8003b54:	6013      	str	r3, [r2, #0]
	
	CalculateRunningSpec ();
 8003b56:	f7ff fd53 	bl	8003600 <CalculateRunningSpec>
}
 8003b5a:	bf00      	nop
 8003b5c:	3708      	adds	r7, #8
 8003b5e:	46bd      	mov	sp, r7
 8003b60:	bd80      	pop	{r7, pc}
 8003b62:	bf00      	nop
 8003b64:	200004bc 	.word	0x200004bc
 8003b68:	08040000 	.word	0x08040000
 8003b6c:	20000458 	.word	0x20000458
 8003b70:	2000045d 	.word	0x2000045d
 8003b74:	2000045e 	.word	0x2000045e
 8003b78:	2000045c 	.word	0x2000045c
 8003b7c:	20000478 	.word	0x20000478
 8003b80:	20000464 	.word	0x20000464
 8003b84:	20000468 	.word	0x20000468
 8003b88:	20000498 	.word	0x20000498
 8003b8c:	2000047c 	.word	0x2000047c
 8003b90:	20000480 	.word	0x20000480
 8003b94:	20000530 	.word	0x20000530
 8003b98:	20000524 	.word	0x20000524
 8003b9c:	2000052c 	.word	0x2000052c

08003ba0 <ProcessReceivedCommand>:

void ProcessReceivedCommand () // Proceed the command from the UI
{
 8003ba0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003ba4:	b0ef      	sub	sp, #444	; 0x1bc
 8003ba6:	af16      	add	r7, sp, #88	; 0x58
	//ExtractMotionCode(); // Extract data to MotionCode
	switch ((int)MotionCode[0])
 8003ba8:	4bbf      	ldr	r3, [pc, #764]	; (8003ea8 <ProcessReceivedCommand+0x308>)
 8003baa:	edd3 7a00 	vldr	s15, [r3]
 8003bae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bb2:	ee17 3a90 	vmov	r3, s15
 8003bb6:	3b01      	subs	r3, #1
 8003bb8:	2b2f      	cmp	r3, #47	; 0x2f
 8003bba:	f200 8746 	bhi.w	8004a4a <ProcessReceivedCommand+0xeaa>
 8003bbe:	a201      	add	r2, pc, #4	; (adr r2, 8003bc4 <ProcessReceivedCommand+0x24>)
 8003bc0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003bc4:	08003cbf 	.word	0x08003cbf
 8003bc8:	08003d05 	.word	0x08003d05
 8003bcc:	08003d2f 	.word	0x08003d2f
 8003bd0:	08003ddb 	.word	0x08003ddb
 8003bd4:	08003e09 	.word	0x08003e09
 8003bd8:	08003e79 	.word	0x08003e79
 8003bdc:	08003ef5 	.word	0x08003ef5
 8003be0:	08003f2f 	.word	0x08003f2f
 8003be4:	08004a4b 	.word	0x08004a4b
 8003be8:	08004a4b 	.word	0x08004a4b
 8003bec:	080040fd 	.word	0x080040fd
 8003bf0:	08004155 	.word	0x08004155
 8003bf4:	0800420f 	.word	0x0800420f
 8003bf8:	080042a5 	.word	0x080042a5
 8003bfc:	080042b3 	.word	0x080042b3
 8003c00:	08004309 	.word	0x08004309
 8003c04:	0800437f 	.word	0x0800437f
 8003c08:	08004385 	.word	0x08004385
 8003c0c:	08004a4b 	.word	0x08004a4b
 8003c10:	080043b1 	.word	0x080043b1
 8003c14:	08004a4b 	.word	0x08004a4b
 8003c18:	08004a4b 	.word	0x08004a4b
 8003c1c:	08004a4b 	.word	0x08004a4b
 8003c20:	08004a4b 	.word	0x08004a4b
 8003c24:	08004a4b 	.word	0x08004a4b
 8003c28:	08004a4b 	.word	0x08004a4b
 8003c2c:	08004467 	.word	0x08004467
 8003c30:	08004535 	.word	0x08004535
 8003c34:	08004a4b 	.word	0x08004a4b
 8003c38:	08004a4b 	.word	0x08004a4b
 8003c3c:	08004555 	.word	0x08004555
 8003c40:	080045af 	.word	0x080045af
 8003c44:	08004603 	.word	0x08004603
 8003c48:	08004657 	.word	0x08004657
 8003c4c:	080046ab 	.word	0x080046ab
 8003c50:	08004a5f 	.word	0x08004a5f
 8003c54:	080046ff 	.word	0x080046ff
 8003c58:	080047c9 	.word	0x080047c9
 8003c5c:	080047ff 	.word	0x080047ff
 8003c60:	08004a4b 	.word	0x08004a4b
 8003c64:	08004887 	.word	0x08004887
 8003c68:	080048d7 	.word	0x080048d7
 8003c6c:	08004927 	.word	0x08004927
 8003c70:	08003c85 	.word	0x08003c85
 8003c74:	08003f55 	.word	0x08003f55
 8003c78:	08004977 	.word	0x08004977
 8003c7c:	08004987 	.word	0x08004987
 8003c80:	080049e7 	.word	0x080049e7
	{
		case 44: //Emergency Stop Change to 44 to avoid data confusion
			if ((int)MotionCode[1] == 0) // 44/0
 8003c84:	4b88      	ldr	r3, [pc, #544]	; (8003ea8 <ProcessReceivedCommand+0x308>)
 8003c86:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c8a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c8e:	ee17 3a90 	vmov	r3, s15
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d10f      	bne.n	8003cb6 <ProcessReceivedCommand+0x116>
			{
				Estop(); // Estop button on the UI
 8003c96:	f7fd fadb 	bl	8001250 <Estop>
				PulseGenerationFlag = false; // Stop generating pulses
 8003c9a:	4b84      	ldr	r3, [pc, #528]	; (8003eac <ProcessReceivedCommand+0x30c>)
 8003c9c:	2200      	movs	r2, #0
 8003c9e:	701a      	strb	r2, [r3, #0]
				StartDropping = false;
 8003ca0:	4b83      	ldr	r3, [pc, #524]	; (8003eb0 <ProcessReceivedCommand+0x310>)
 8003ca2:	2200      	movs	r2, #0
 8003ca4:	701a      	strb	r2, [r3, #0]
				StartPulling = false;
 8003ca6:	4b83      	ldr	r3, [pc, #524]	; (8003eb4 <ProcessReceivedCommand+0x314>)
 8003ca8:	2200      	movs	r2, #0
 8003caa:	701a      	strb	r2, [r3, #0]
				EMO = true;				
 8003cac:	4b82      	ldr	r3, [pc, #520]	; (8003eb8 <ProcessReceivedCommand+0x318>)
 8003cae:	2201      	movs	r2, #1
 8003cb0:	701a      	strb	r2, [r3, #0]
			}
			else {AlarmReset();}  // 44/1, alarm button
			break;
 8003cb2:	f000 bf10 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
			else {AlarmReset();}  // 44/1, alarm button
 8003cb6:	f7fd faa5 	bl	8001204 <AlarmReset>
			break;
 8003cba:	f000 bf0c 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
		case 1: // Stop button;
			if ((int)MotionCode[1] == 1) // 1/1
 8003cbe:	4b7a      	ldr	r3, [pc, #488]	; (8003ea8 <ProcessReceivedCommand+0x308>)
 8003cc0:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cc4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cc8:	ee17 3a90 	vmov	r3, s15
 8003ccc:	2b01      	cmp	r3, #1
 8003cce:	f040 86c8 	bne.w	8004a62 <ProcessReceivedCommand+0xec2>
			{
				if (MotorDriver) // FDA 7000
 8003cd2:	4b7a      	ldr	r3, [pc, #488]	; (8003ebc <ProcessReceivedCommand+0x31c>)
 8003cd4:	781b      	ldrb	r3, [r3, #0]
 8003cd6:	2b00      	cmp	r3, #0
 8003cd8:	d005      	beq.n	8003ce6 <ProcessReceivedCommand+0x146>
				{
					Stop();
 8003cda:	f7fd fa83 	bl	80011e4 <Stop>
					StopExperiment();
 8003cde:	f7ff fc6b 	bl	80035b8 <StopExperiment>
					IsHoming = false;
					IsStepPulseCmd = false;
					JoggingMoveUp = false;
				}					
			}
			break;
 8003ce2:	f000 bebe 	b.w	8004a62 <ProcessReceivedCommand+0xec2>
					StopPulseGenerating();
 8003ce6:	f7fd ff09 	bl	8001afc <StopPulseGenerating>
					StopExperiment();
 8003cea:	f7ff fc65 	bl	80035b8 <StopExperiment>
					IsHoming = false;
 8003cee:	4b74      	ldr	r3, [pc, #464]	; (8003ec0 <ProcessReceivedCommand+0x320>)
 8003cf0:	2200      	movs	r2, #0
 8003cf2:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = false;
 8003cf4:	4b73      	ldr	r3, [pc, #460]	; (8003ec4 <ProcessReceivedCommand+0x324>)
 8003cf6:	2200      	movs	r2, #0
 8003cf8:	701a      	strb	r2, [r3, #0]
					JoggingMoveUp = false;
 8003cfa:	4b73      	ldr	r3, [pc, #460]	; (8003ec8 <ProcessReceivedCommand+0x328>)
 8003cfc:	2200      	movs	r2, #0
 8003cfe:	701a      	strb	r2, [r3, #0]
			break;
 8003d00:	f000 beaf 	b.w	8004a62 <ProcessReceivedCommand+0xec2>
		case 2: // Set Control Mode
			if ((int)MotionCode[1] == 1) // 2/1 position mode
 8003d04:	4b68      	ldr	r3, [pc, #416]	; (8003ea8 <ProcessReceivedCommand+0x308>)
 8003d06:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d0a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d0e:	ee17 3a90 	vmov	r3, s15
 8003d12:	2b01      	cmp	r3, #1
 8003d14:	d106      	bne.n	8003d24 <ProcessReceivedCommand+0x184>
					{
						PositionControlMode = true;
 8003d16:	4b6d      	ldr	r3, [pc, #436]	; (8003ecc <ProcessReceivedCommand+0x32c>)
 8003d18:	2201      	movs	r2, #1
 8003d1a:	701a      	strb	r2, [r3, #0]
						DriverInit(); // Init Position Mode
 8003d1c:	f7fd fad8 	bl	80012d0 <DriverInit>
			else // 2/0 speed mode
					{
						PositionControlMode = false;
						//SetSpeedMode(); // Set to Speed Mode
					} 
			break;
 8003d20:	f000 bed9 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
						PositionControlMode = false;
 8003d24:	4b69      	ldr	r3, [pc, #420]	; (8003ecc <ProcessReceivedCommand+0x32c>)
 8003d26:	2200      	movs	r2, #0
 8003d28:	701a      	strb	r2, [r3, #0]
			break;
 8003d2a:	f000 bed4 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
		case 3: // Jog Control
			
			if ((int)MotionCode[1] == 1) // 3/1 move up button
 8003d2e:	4b5e      	ldr	r3, [pc, #376]	; (8003ea8 <ProcessReceivedCommand+0x308>)
 8003d30:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d38:	ee17 3a90 	vmov	r3, s15
 8003d3c:	2b01      	cmp	r3, #1
 8003d3e:	d127      	bne.n	8003d90 <ProcessReceivedCommand+0x1f0>
			{
					JoggingMoveUp = true;
 8003d40:	4b61      	ldr	r3, [pc, #388]	; (8003ec8 <ProcessReceivedCommand+0x328>)
 8003d42:	2201      	movs	r2, #1
 8003d44:	701a      	strb	r2, [r3, #0]
					if (PositionControlMode) // If the control Mode is Position Mode
 8003d46:	4b61      	ldr	r3, [pc, #388]	; (8003ecc <ProcessReceivedCommand+0x32c>)
 8003d48:	781b      	ldrb	r3, [r3, #0]
 8003d4a:	2b00      	cmp	r3, #0
 8003d4c:	d01c      	beq.n	8003d88 <ProcessReceivedCommand+0x1e8>
//							{
//								break;
//							}
						}
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8003d4e:	4b5b      	ldr	r3, [pc, #364]	; (8003ebc <ProcessReceivedCommand+0x31c>)
 8003d50:	781b      	ldrb	r3, [r3, #0]
 8003d52:	4a5f      	ldr	r2, [pc, #380]	; (8003ed0 <ProcessReceivedCommand+0x330>)
 8003d54:	8812      	ldrh	r2, [r2, #0]
 8003d56:	ee07 2a90 	vmov	s15, r2
 8003d5a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003d5e:	eeb0 0a67 	vmov.f32	s0, s15
 8003d62:	4618      	mov	r0, r3
 8003d64:	f7fd ff2c 	bl	8001bc0 <CalculateTimer3Period>
 8003d68:	4603      	mov	r3, r0
 8003d6a:	b29a      	uxth	r2, r3
 8003d6c:	4b59      	ldr	r3, [pc, #356]	; (8003ed4 <ProcessReceivedCommand+0x334>)
 8003d6e:	801a      	strh	r2, [r3, #0]
						//Timer3CountPeriod = (int)((float)(120000000.0/((float)JogSpeed*(float)EncoderResolution)) + 0.5);						
						PRIsToggled = true; // PR phase is 90 deg late
 8003d70:	4b59      	ldr	r3, [pc, #356]	; (8003ed8 <ProcessReceivedCommand+0x338>)
 8003d72:	2201      	movs	r2, #1
 8003d74:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up
 8003d76:	4b59      	ldr	r3, [pc, #356]	; (8003edc <ProcessReceivedCommand+0x33c>)
 8003d78:	2200      	movs	r2, #0
 8003d7a:	701a      	strb	r2, [r3, #0]
						StartPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true						
 8003d7c:	f7fd fedc 	bl	8001b38 <StartPulseGenerating>
						DisableSTOP(); // Turn off STOP to run
 8003d80:	f7fd fa72 	bl	8001268 <DisableSTOP>
					else // Speed Mode
					{
						JogMoveDown(); // Disable the stop
					}					
			}
			break;
 8003d84:	f000 bea7 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
						JogMoveUp(); // Disable the stop
 8003d88:	f7fd fa7a 	bl	8001280 <JogMoveUp>
			break;
 8003d8c:	f000 bea3 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
					if (PositionControlMode) // If the control Mode is Position Mode
 8003d90:	4b4e      	ldr	r3, [pc, #312]	; (8003ecc <ProcessReceivedCommand+0x32c>)
 8003d92:	781b      	ldrb	r3, [r3, #0]
 8003d94:	2b00      	cmp	r3, #0
 8003d96:	d01c      	beq.n	8003dd2 <ProcessReceivedCommand+0x232>
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8003d98:	4b48      	ldr	r3, [pc, #288]	; (8003ebc <ProcessReceivedCommand+0x31c>)
 8003d9a:	781b      	ldrb	r3, [r3, #0]
 8003d9c:	4a4c      	ldr	r2, [pc, #304]	; (8003ed0 <ProcessReceivedCommand+0x330>)
 8003d9e:	8812      	ldrh	r2, [r2, #0]
 8003da0:	ee07 2a90 	vmov	s15, r2
 8003da4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003da8:	eeb0 0a67 	vmov.f32	s0, s15
 8003dac:	4618      	mov	r0, r3
 8003dae:	f7fd ff07 	bl	8001bc0 <CalculateTimer3Period>
 8003db2:	4603      	mov	r3, r0
 8003db4:	b29a      	uxth	r2, r3
 8003db6:	4b47      	ldr	r3, [pc, #284]	; (8003ed4 <ProcessReceivedCommand+0x334>)
 8003db8:	801a      	strh	r2, [r3, #0]
						PRIsToggled = false; //
 8003dba:	4b47      	ldr	r3, [pc, #284]	; (8003ed8 <ProcessReceivedCommand+0x338>)
 8003dbc:	2200      	movs	r2, #0
 8003dbe:	701a      	strb	r2, [r3, #0]
						Direction = true; // true = move down
 8003dc0:	4b46      	ldr	r3, [pc, #280]	; (8003edc <ProcessReceivedCommand+0x33c>)
 8003dc2:	2201      	movs	r2, #1
 8003dc4:	701a      	strb	r2, [r3, #0]
						StartPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 8003dc6:	f7fd feb7 	bl	8001b38 <StartPulseGenerating>
						DisableSTOP();	// Turn off STOP to run					
 8003dca:	f7fd fa4d 	bl	8001268 <DisableSTOP>
			break;
 8003dce:	f000 be82 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
						JogMoveDown(); // Disable the stop
 8003dd2:	f7fd fa69 	bl	80012a8 <JogMoveDown>
			break;
 8003dd6:	f000 be7e 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
		case 4: // Start Running Buton (Start Running Experiment)
			if ((int)MotionCode[1] == 1) // Start runing 
 8003dda:	4b33      	ldr	r3, [pc, #204]	; (8003ea8 <ProcessReceivedCommand+0x308>)
 8003ddc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003de0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003de4:	ee17 3a90 	vmov	r3, s15
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d109      	bne.n	8003e00 <ProcessReceivedCommand+0x260>
				{
					InitializeRunning (ExperimentMode);
 8003dec:	4b3c      	ldr	r3, [pc, #240]	; (8003ee0 <ProcessReceivedCommand+0x340>)
 8003dee:	781b      	ldrb	r3, [r3, #0]
 8003df0:	4618      	mov	r0, r3
 8003df2:	f7fe f98b 	bl	800210c <InitializeRunning>
					EMO = false;					
 8003df6:	4b30      	ldr	r3, [pc, #192]	; (8003eb8 <ProcessReceivedCommand+0x318>)
 8003df8:	2200      	movs	r2, #0
 8003dfa:	701a      	strb	r2, [r3, #0]
				}
			else // Stop running
				{
					StopExperiment();					
				}
			break;
 8003dfc:	f000 be6b 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
					StopExperiment();					
 8003e00:	f7ff fbda 	bl	80035b8 <StopExperiment>
			break;
 8003e04:	f000 be67 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
				
		case 5: // Set Jog Speed						
			if (PositionControlMode) // If it is the position control mode, then change the JogSpeed
 8003e08:	4b30      	ldr	r3, [pc, #192]	; (8003ecc <ProcessReceivedCommand+0x32c>)
 8003e0a:	781b      	ldrb	r3, [r3, #0]
 8003e0c:	2b00      	cmp	r3, #0
 8003e0e:	f000 865f 	beq.w	8004ad0 <ProcessReceivedCommand+0xf30>
			{
				JogSpeed = (int)(MotionCode[1]); // unit: rpm
 8003e12:	4b25      	ldr	r3, [pc, #148]	; (8003ea8 <ProcessReceivedCommand+0x308>)
 8003e14:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e1c:	ee17 3a90 	vmov	r3, s15
 8003e20:	b29a      	uxth	r2, r3
 8003e22:	4b2b      	ldr	r3, [pc, #172]	; (8003ed0 <ProcessReceivedCommand+0x330>)
 8003e24:	801a      	strh	r2, [r3, #0]
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8003e26:	4b25      	ldr	r3, [pc, #148]	; (8003ebc <ProcessReceivedCommand+0x31c>)
 8003e28:	781b      	ldrb	r3, [r3, #0]
 8003e2a:	4a29      	ldr	r2, [pc, #164]	; (8003ed0 <ProcessReceivedCommand+0x330>)
 8003e2c:	8812      	ldrh	r2, [r2, #0]
 8003e2e:	ee07 2a90 	vmov	s15, r2
 8003e32:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003e36:	eeb0 0a67 	vmov.f32	s0, s15
 8003e3a:	4618      	mov	r0, r3
 8003e3c:	f7fd fec0 	bl	8001bc0 <CalculateTimer3Period>
 8003e40:	4603      	mov	r3, r0
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	4b23      	ldr	r3, [pc, #140]	; (8003ed4 <ProcessReceivedCommand+0x334>)
 8003e46:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/((float)JogSpeed*(float)EncoderResolution)) + 0.5);
				char JogSpeedBuff[10];
				TxPCLen = sprintf(JogSpeedBuff,"j%.de",JogSpeed);
 8003e48:	4b21      	ldr	r3, [pc, #132]	; (8003ed0 <ProcessReceivedCommand+0x330>)
 8003e4a:	881b      	ldrh	r3, [r3, #0]
 8003e4c:	461a      	mov	r2, r3
 8003e4e:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003e52:	4924      	ldr	r1, [pc, #144]	; (8003ee4 <ProcessReceivedCommand+0x344>)
 8003e54:	4618      	mov	r0, r3
 8003e56:	f006 f963 	bl	800a120 <siprintf>
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	b2da      	uxtb	r2, r3
 8003e5e:	4b22      	ldr	r3, [pc, #136]	; (8003ee8 <ProcessReceivedCommand+0x348>)
 8003e60:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)JogSpeedBuff,TxPCLen,200); // Send to uart6 to check the params are set or not
 8003e62:	4b21      	ldr	r3, [pc, #132]	; (8003ee8 <ProcessReceivedCommand+0x348>)
 8003e64:	781b      	ldrb	r3, [r3, #0]
 8003e66:	b29a      	uxth	r2, r3
 8003e68:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003e6c:	23c8      	movs	r3, #200	; 0xc8
 8003e6e:	481f      	ldr	r0, [pc, #124]	; (8003eec <ProcessReceivedCommand+0x34c>)
 8003e70:	f004 fc8f 	bl	8008792 <HAL_UART_Transmit>
//					{
//						DroppingAccelDistance = roundf(MotionCode[3] * 10)/10;
//						WriteFloatData((uint16_t)MotionCode[2], DroppingAccelDistance, true);
//					}
//			}
			break;
 8003e74:	f000 be2c 	b.w	8004ad0 <ProcessReceivedCommand+0xf30>
			
		case 6: // 6 request driver data
			if((int)MotionCode[1] == 1)
 8003e78:	4b0b      	ldr	r3, [pc, #44]	; (8003ea8 <ProcessReceivedCommand+0x308>)
 8003e7a:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e7e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003e82:	ee17 3a90 	vmov	r3, s15
 8003e86:	2b01      	cmp	r3, #1
 8003e88:	d108      	bne.n	8003e9c <ProcessReceivedCommand+0x2fc>
			{
				UIDataRequest = true;
 8003e8a:	4b19      	ldr	r3, [pc, #100]	; (8003ef0 <ProcessReceivedCommand+0x350>)
 8003e8c:	2201      	movs	r2, #1
 8003e8e:	701a      	strb	r2, [r3, #0]
				ReadMultiRegister(StE03,5);
 8003e90:	2105      	movs	r1, #5
 8003e92:	200c      	movs	r0, #12
 8003e94:	f7fd fc5a 	bl	800174c <ReadMultiRegister>
			} // 6/1 If the UI request data
			else 
			{
				UIDataRequest = false;
			}
			break;
 8003e98:	f000 be1d 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
				UIDataRequest = false;
 8003e9c:	4b14      	ldr	r3, [pc, #80]	; (8003ef0 <ProcessReceivedCommand+0x350>)
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	701a      	strb	r2, [r3, #0]
			break;
 8003ea2:	f000 be18 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
 8003ea6:	bf00      	nop
 8003ea8:	20000500 	.word	0x20000500
 8003eac:	2000043b 	.word	0x2000043b
 8003eb0:	20000433 	.word	0x20000433
 8003eb4:	20000439 	.word	0x20000439
 8003eb8:	20000442 	.word	0x20000442
 8003ebc:	20000003 	.word	0x20000003
 8003ec0:	20000443 	.word	0x20000443
 8003ec4:	2000043c 	.word	0x2000043c
 8003ec8:	20000441 	.word	0x20000441
 8003ecc:	20000002 	.word	0x20000002
 8003ed0:	20000006 	.word	0x20000006
 8003ed4:	20000450 	.word	0x20000450
 8003ed8:	20000446 	.word	0x20000446
 8003edc:	20000435 	.word	0x20000435
 8003ee0:	20000004 	.word	0x20000004
 8003ee4:	0800ded8 	.word	0x0800ded8
 8003ee8:	20000426 	.word	0x20000426
 8003eec:	20000338 	.word	0x20000338
 8003ef0:	20000438 	.word	0x20000438
					
		case 7: // Save System Params			
			// Save to the flash memory
			//SaveParams(DrumRadius, DroppingAccelDistance, PullingSpeed, StoppingTime, DroppingAccel, SampleTime);				
			SaveSystemParams();
 8003ef4:	f7fd fcda 	bl	80018ac <SaveSystemParams>
			HAL_Delay(500);
 8003ef8:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8003efc:	f002 fa26 	bl	800634c <HAL_Delay>
			SaveSystemParams(); // Do twice times
 8003f00:	f7fd fcd4 	bl	80018ac <SaveSystemParams>
			// Send back to the UI to notify					
			char MessageBuffer[10];
			TxPCLen = sprintf(MessageBuffer,"r7/1e");
 8003f04:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003f08:	4998      	ldr	r1, [pc, #608]	; (800416c <ProcessReceivedCommand+0x5cc>)
 8003f0a:	4618      	mov	r0, r3
 8003f0c:	f006 f908 	bl	800a120 <siprintf>
 8003f10:	4603      	mov	r3, r0
 8003f12:	b2da      	uxtb	r2, r3
 8003f14:	4b96      	ldr	r3, [pc, #600]	; (8004170 <ProcessReceivedCommand+0x5d0>)
 8003f16:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t *)MessageBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 8003f18:	4b95      	ldr	r3, [pc, #596]	; (8004170 <ProcessReceivedCommand+0x5d0>)
 8003f1a:	781b      	ldrb	r3, [r3, #0]
 8003f1c:	b29a      	uxth	r2, r3
 8003f1e:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8003f22:	2364      	movs	r3, #100	; 0x64
 8003f24:	4893      	ldr	r0, [pc, #588]	; (8004174 <ProcessReceivedCommand+0x5d4>)
 8003f26:	f004 fc34 	bl	8008792 <HAL_UART_Transmit>
			break;
 8003f2a:	f000 bdd4 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
		
		case 8: // Request reading digital driver output
			if((int)MotionCode[1] == 1) {OutputDataRequest = true;} // 8/1 = request
 8003f2e:	4b92      	ldr	r3, [pc, #584]	; (8004178 <ProcessReceivedCommand+0x5d8>)
 8003f30:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f34:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003f38:	ee17 3a90 	vmov	r3, s15
 8003f3c:	2b01      	cmp	r3, #1
 8003f3e:	d104      	bne.n	8003f4a <ProcessReceivedCommand+0x3aa>
 8003f40:	4b8e      	ldr	r3, [pc, #568]	; (800417c <ProcessReceivedCommand+0x5dc>)
 8003f42:	2201      	movs	r2, #1
 8003f44:	701a      	strb	r2, [r3, #0]
			else OutputDataRequest = false; // 8/0 = stop request
			break;
 8003f46:	f000 bdc6 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
			else OutputDataRequest = false; // 8/0 = stop request
 8003f4a:	4b8c      	ldr	r3, [pc, #560]	; (800417c <ProcessReceivedCommand+0x5dc>)
 8003f4c:	2200      	movs	r2, #0
 8003f4e:	701a      	strb	r2, [r3, #0]
			break;
 8003f50:	f000 bdc1 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
			
		case 45: // Load saved parameters					
			LoadSavedParam(MemoryAddress,Params);
 8003f54:	498a      	ldr	r1, [pc, #552]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003f56:	488b      	ldr	r0, [pc, #556]	; (8004184 <ProcessReceivedCommand+0x5e4>)
 8003f58:	f7fd fc6a 	bl	8001830 <LoadSavedParam>
		
			// General Params
			DrumRadius = Params[0];	
 8003f5c:	4b88      	ldr	r3, [pc, #544]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003f5e:	681b      	ldr	r3, [r3, #0]
 8003f60:	4a89      	ldr	r2, [pc, #548]	; (8004188 <ProcessReceivedCommand+0x5e8>)
 8003f62:	6013      	str	r3, [r2, #0]
			PullingSpeed = Params[1];
 8003f64:	4b86      	ldr	r3, [pc, #536]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003f66:	edd3 7a01 	vldr	s15, [r3, #4]
 8003f6a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f6e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8003f72:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003f76:	b2da      	uxtb	r2, r3
 8003f78:	4b84      	ldr	r3, [pc, #528]	; (800418c <ProcessReceivedCommand+0x5ec>)
 8003f7a:	701a      	strb	r2, [r3, #0]
			StoppingTime = Params[2];
 8003f7c:	4b80      	ldr	r3, [pc, #512]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003f7e:	edd3 7a02 	vldr	s15, [r3, #8]
 8003f82:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f86:	ee17 3a90 	vmov	r3, s15
 8003f8a:	b29a      	uxth	r2, r3
 8003f8c:	4b80      	ldr	r3, [pc, #512]	; (8004190 <ProcessReceivedCommand+0x5f0>)
 8003f8e:	801a      	strh	r2, [r3, #0]
			SampleTime = Params[3];
 8003f90:	4b7b      	ldr	r3, [pc, #492]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003f92:	edd3 7a03 	vldr	s15, [r3, #12]
 8003f96:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003f9a:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8003f9e:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003fa2:	b2da      	uxtb	r2, r3
 8003fa4:	4b7b      	ldr	r3, [pc, #492]	; (8004194 <ProcessReceivedCommand+0x5f4>)
 8003fa6:	701a      	strb	r2, [r3, #0]
			
			// Dropping Stage Params
			DroppingAccelDistance = Params[4];
 8003fa8:	4b75      	ldr	r3, [pc, #468]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003faa:	691b      	ldr	r3, [r3, #16]
 8003fac:	4a7a      	ldr	r2, [pc, #488]	; (8004198 <ProcessReceivedCommand+0x5f8>)
 8003fae:	6013      	str	r3, [r2, #0]
			DroppingAccel  = Params[5];
 8003fb0:	4b73      	ldr	r3, [pc, #460]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003fb2:	695b      	ldr	r3, [r3, #20]
 8003fb4:	4a79      	ldr	r2, [pc, #484]	; (800419c <ProcessReceivedCommand+0x5fc>)
 8003fb6:	6013      	str	r3, [r2, #0]
			DroppingDecel = Params[6];
 8003fb8:	4b71      	ldr	r3, [pc, #452]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003fba:	699b      	ldr	r3, [r3, #24]
 8003fbc:	4a78      	ldr	r2, [pc, #480]	; (80041a0 <ProcessReceivedCommand+0x600>)
 8003fbe:	6013      	str	r3, [r2, #0]

			
			// Pulling Stage Params
			PullingAccelDistance = Params[7];
 8003fc0:	4b6f      	ldr	r3, [pc, #444]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003fc2:	69db      	ldr	r3, [r3, #28]
 8003fc4:	4a77      	ldr	r2, [pc, #476]	; (80041a4 <ProcessReceivedCommand+0x604>)
 8003fc6:	6013      	str	r3, [r2, #0]
			PullingAccel = Params[8];
 8003fc8:	4b6d      	ldr	r3, [pc, #436]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003fca:	6a1b      	ldr	r3, [r3, #32]
 8003fcc:	4a76      	ldr	r2, [pc, #472]	; (80041a8 <ProcessReceivedCommand+0x608>)
 8003fce:	6013      	str	r3, [r2, #0]
			PullingDecel = Params[9];
 8003fd0:	4b6b      	ldr	r3, [pc, #428]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003fd2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd4:	4a75      	ldr	r2, [pc, #468]	; (80041ac <ProcessReceivedCommand+0x60c>)
 8003fd6:	6013      	str	r3, [r2, #0]
			
			// PID Controller params
			Kp = Params[10];
 8003fd8:	4b69      	ldr	r3, [pc, #420]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003fda:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003fdc:	4a74      	ldr	r2, [pc, #464]	; (80041b0 <ProcessReceivedCommand+0x610>)
 8003fde:	6013      	str	r3, [r2, #0]
			Ki = Params[11];
 8003fe0:	4b67      	ldr	r3, [pc, #412]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003fe2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003fe4:	4a73      	ldr	r2, [pc, #460]	; (80041b4 <ProcessReceivedCommand+0x614>)
 8003fe6:	6013      	str	r3, [r2, #0]
			BrakeAccSlope = Params[12];
 8003fe8:	4b65      	ldr	r3, [pc, #404]	; (8004180 <ProcessReceivedCommand+0x5e0>)
 8003fea:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003fec:	4a72      	ldr	r2, [pc, #456]	; (80041b8 <ProcessReceivedCommand+0x618>)
 8003fee:	6013      	str	r3, [r2, #0]
			// Send to the GUI
			char ParamBuffer[60];
			TxPCLen = sprintf(ParamBuffer,"p%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4fe"
 8003ff0:	4b65      	ldr	r3, [pc, #404]	; (8004188 <ProcessReceivedCommand+0x5e8>)
 8003ff2:	681b      	ldr	r3, [r3, #0]
 8003ff4:	4618      	mov	r0, r3
 8003ff6:	f7fc faa7 	bl	8000548 <__aeabi_f2d>
 8003ffa:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8003ffe:	4b63      	ldr	r3, [pc, #396]	; (800418c <ProcessReceivedCommand+0x5ec>)
 8004000:	781b      	ldrb	r3, [r3, #0]
 8004002:	461e      	mov	r6, r3
 8004004:	4b62      	ldr	r3, [pc, #392]	; (8004190 <ProcessReceivedCommand+0x5f0>)
 8004006:	881b      	ldrh	r3, [r3, #0]
 8004008:	62fb      	str	r3, [r7, #44]	; 0x2c
 800400a:	4b62      	ldr	r3, [pc, #392]	; (8004194 <ProcessReceivedCommand+0x5f4>)
 800400c:	781b      	ldrb	r3, [r3, #0]
 800400e:	62bb      	str	r3, [r7, #40]	; 0x28
 8004010:	4b61      	ldr	r3, [pc, #388]	; (8004198 <ProcessReceivedCommand+0x5f8>)
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	4618      	mov	r0, r3
 8004016:	f7fc fa97 	bl	8000548 <__aeabi_f2d>
 800401a:	e9c7 0108 	strd	r0, r1, [r7, #32]
 800401e:	4b5f      	ldr	r3, [pc, #380]	; (800419c <ProcessReceivedCommand+0x5fc>)
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	4618      	mov	r0, r3
 8004024:	f7fc fa90 	bl	8000548 <__aeabi_f2d>
 8004028:	e9c7 0106 	strd	r0, r1, [r7, #24]
 800402c:	4b5c      	ldr	r3, [pc, #368]	; (80041a0 <ProcessReceivedCommand+0x600>)
 800402e:	681b      	ldr	r3, [r3, #0]
 8004030:	4618      	mov	r0, r3
 8004032:	f7fc fa89 	bl	8000548 <__aeabi_f2d>
 8004036:	e9c7 0104 	strd	r0, r1, [r7, #16]
 800403a:	4b5a      	ldr	r3, [pc, #360]	; (80041a4 <ProcessReceivedCommand+0x604>)
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	4618      	mov	r0, r3
 8004040:	f7fc fa82 	bl	8000548 <__aeabi_f2d>
 8004044:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8004048:	4b57      	ldr	r3, [pc, #348]	; (80041a8 <ProcessReceivedCommand+0x608>)
 800404a:	681b      	ldr	r3, [r3, #0]
 800404c:	4618      	mov	r0, r3
 800404e:	f7fc fa7b 	bl	8000548 <__aeabi_f2d>
 8004052:	e9c7 0100 	strd	r0, r1, [r7]
 8004056:	4b55      	ldr	r3, [pc, #340]	; (80041ac <ProcessReceivedCommand+0x60c>)
 8004058:	681b      	ldr	r3, [r3, #0]
 800405a:	4618      	mov	r0, r3
 800405c:	f7fc fa74 	bl	8000548 <__aeabi_f2d>
 8004060:	4682      	mov	sl, r0
 8004062:	468b      	mov	fp, r1
 8004064:	4b52      	ldr	r3, [pc, #328]	; (80041b0 <ProcessReceivedCommand+0x610>)
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	4618      	mov	r0, r3
 800406a:	f7fc fa6d 	bl	8000548 <__aeabi_f2d>
 800406e:	4680      	mov	r8, r0
 8004070:	4689      	mov	r9, r1
 8004072:	4b50      	ldr	r3, [pc, #320]	; (80041b4 <ProcessReceivedCommand+0x614>)
 8004074:	681b      	ldr	r3, [r3, #0]
 8004076:	4618      	mov	r0, r3
 8004078:	f7fc fa66 	bl	8000548 <__aeabi_f2d>
 800407c:	4604      	mov	r4, r0
 800407e:	460d      	mov	r5, r1
 8004080:	4b4d      	ldr	r3, [pc, #308]	; (80041b8 <ProcessReceivedCommand+0x618>)
 8004082:	681b      	ldr	r3, [r3, #0]
 8004084:	4618      	mov	r0, r3
 8004086:	f7fc fa5f 	bl	8000548 <__aeabi_f2d>
 800408a:	4602      	mov	r2, r0
 800408c:	460b      	mov	r3, r1
 800408e:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8004092:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8004096:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800409a:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800409e:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 80040a2:	ed97 7b00 	vldr	d7, [r7]
 80040a6:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 80040aa:	ed97 7b02 	vldr	d7, [r7, #8]
 80040ae:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 80040b2:	ed97 7b04 	vldr	d7, [r7, #16]
 80040b6:	ed8d 7b08 	vstr	d7, [sp, #32]
 80040ba:	ed97 7b06 	vldr	d7, [r7, #24]
 80040be:	ed8d 7b06 	vstr	d7, [sp, #24]
 80040c2:	ed97 7b08 	vldr	d7, [r7, #32]
 80040c6:	ed8d 7b04 	vstr	d7, [sp, #16]
 80040ca:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80040cc:	9102      	str	r1, [sp, #8]
 80040ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80040d0:	9301      	str	r3, [sp, #4]
 80040d2:	9600      	str	r6, [sp, #0]
 80040d4:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 80040d8:	4938      	ldr	r1, [pc, #224]	; (80041bc <ProcessReceivedCommand+0x61c>)
 80040da:	f006 f821 	bl	800a120 <siprintf>
 80040de:	4603      	mov	r3, r0
 80040e0:	b2da      	uxtb	r2, r3
 80040e2:	4b23      	ldr	r3, [pc, #140]	; (8004170 <ProcessReceivedCommand+0x5d0>)
 80040e4:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime, 
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
										 Kp, Ki, BrakeAccSlope); // Combine to a string
			HAL_UART_Transmit(&huart6,(uint8_t *)ParamBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 80040e6:	4b22      	ldr	r3, [pc, #136]	; (8004170 <ProcessReceivedCommand+0x5d0>)
 80040e8:	781b      	ldrb	r3, [r3, #0]
 80040ea:	b29a      	uxth	r2, r3
 80040ec:	f107 0138 	add.w	r1, r7, #56	; 0x38
 80040f0:	23c8      	movs	r3, #200	; 0xc8
 80040f2:	4820      	ldr	r0, [pc, #128]	; (8004174 <ProcessReceivedCommand+0x5d4>)
 80040f4:	f004 fb4d 	bl	8008792 <HAL_UART_Transmit>
			break;
 80040f8:	f000 bced 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
		
		case 11: // Set Drum Radius
			if (StartRunning) // Setting is not available while running
 80040fc:	4b30      	ldr	r3, [pc, #192]	; (80041c0 <ProcessReceivedCommand+0x620>)
 80040fe:	781b      	ldrb	r3, [r3, #0]
 8004100:	2b00      	cmp	r3, #0
 8004102:	d006      	beq.n	8004112 <ProcessReceivedCommand+0x572>
			{
				InitializeRunning (ExperimentMode);	
 8004104:	4b2f      	ldr	r3, [pc, #188]	; (80041c4 <ProcessReceivedCommand+0x624>)
 8004106:	781b      	ldrb	r3, [r3, #0]
 8004108:	4618      	mov	r0, r3
 800410a:	f7fd ffff 	bl	800210c <InitializeRunning>
				break;				
 800410e:	f000 bce2 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				DrumRadius = MotionCode[1];
 8004112:	4b19      	ldr	r3, [pc, #100]	; (8004178 <ProcessReceivedCommand+0x5d8>)
 8004114:	685b      	ldr	r3, [r3, #4]
 8004116:	4a1c      	ldr	r2, [pc, #112]	; (8004188 <ProcessReceivedCommand+0x5e8>)
 8004118:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 800411a:	f7ff fa71 	bl	8003600 <CalculateRunningSpec>
				char DrumRadiusBuffer[10];
				TxPCLen = sprintf(DrumRadiusBuffer,"r11/%.2fe",DrumRadius);
 800411e:	4b1a      	ldr	r3, [pc, #104]	; (8004188 <ProcessReceivedCommand+0x5e8>)
 8004120:	681b      	ldr	r3, [r3, #0]
 8004122:	4618      	mov	r0, r3
 8004124:	f7fc fa10 	bl	8000548 <__aeabi_f2d>
 8004128:	4602      	mov	r2, r0
 800412a:	460b      	mov	r3, r1
 800412c:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8004130:	4925      	ldr	r1, [pc, #148]	; (80041c8 <ProcessReceivedCommand+0x628>)
 8004132:	f005 fff5 	bl	800a120 <siprintf>
 8004136:	4603      	mov	r3, r0
 8004138:	b2da      	uxtb	r2, r3
 800413a:	4b0d      	ldr	r3, [pc, #52]	; (8004170 <ProcessReceivedCommand+0x5d0>)
 800413c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DrumRadiusBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 800413e:	4b0c      	ldr	r3, [pc, #48]	; (8004170 <ProcessReceivedCommand+0x5d0>)
 8004140:	781b      	ldrb	r3, [r3, #0]
 8004142:	b29a      	uxth	r2, r3
 8004144:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8004148:	23c8      	movs	r3, #200	; 0xc8
 800414a:	480a      	ldr	r0, [pc, #40]	; (8004174 <ProcessReceivedCommand+0x5d4>)
 800414c:	f004 fb21 	bl	8008792 <HAL_UART_Transmit>
				break;
 8004150:	f000 bcc1 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
			}			
		
		case 12: // Set DroppingAccelDistance
			if (StartRunning) // Setting is not available while running
 8004154:	4b1a      	ldr	r3, [pc, #104]	; (80041c0 <ProcessReceivedCommand+0x620>)
 8004156:	781b      	ldrb	r3, [r3, #0]
 8004158:	2b00      	cmp	r3, #0
 800415a:	d037      	beq.n	80041cc <ProcessReceivedCommand+0x62c>
			{
				InitializeRunning (ExperimentMode);	
 800415c:	4b19      	ldr	r3, [pc, #100]	; (80041c4 <ProcessReceivedCommand+0x624>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd ffd3 	bl	800210c <InitializeRunning>
				break;
 8004166:	f000 bcb6 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
 800416a:	bf00      	nop
 800416c:	0800dee0 	.word	0x0800dee0
 8004170:	20000426 	.word	0x20000426
 8004174:	20000338 	.word	0x20000338
 8004178:	20000500 	.word	0x20000500
 800417c:	20000001 	.word	0x20000001
 8004180:	200004bc 	.word	0x200004bc
 8004184:	08040000 	.word	0x08040000
 8004188:	20000458 	.word	0x20000458
 800418c:	2000045d 	.word	0x2000045d
 8004190:	2000045e 	.word	0x2000045e
 8004194:	2000045c 	.word	0x2000045c
 8004198:	20000478 	.word	0x20000478
 800419c:	20000464 	.word	0x20000464
 80041a0:	20000468 	.word	0x20000468
 80041a4:	20000498 	.word	0x20000498
 80041a8:	2000047c 	.word	0x2000047c
 80041ac:	20000480 	.word	0x20000480
 80041b0:	20000520 	.word	0x20000520
 80041b4:	20000524 	.word	0x20000524
 80041b8:	2000052c 	.word	0x2000052c
 80041bc:	0800dee8 	.word	0x0800dee8
 80041c0:	20000434 	.word	0x20000434
 80041c4:	20000004 	.word	0x20000004
 80041c8:	0800df28 	.word	0x0800df28
			}
			else
			{
				DroppingAccelDistance = MotionCode[1];
 80041cc:	4bae      	ldr	r3, [pc, #696]	; (8004488 <ProcessReceivedCommand+0x8e8>)
 80041ce:	685b      	ldr	r3, [r3, #4]
 80041d0:	4aae      	ldr	r2, [pc, #696]	; (800448c <ProcessReceivedCommand+0x8ec>)
 80041d2:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 80041d4:	f7ff fa14 	bl	8003600 <CalculateRunningSpec>
				
				char DroppingAccelDistanceBuffer[10];
				TxPCLen = sprintf(DroppingAccelDistanceBuffer,"r12/%.1fe",DroppingAccelDistance);
 80041d8:	4bac      	ldr	r3, [pc, #688]	; (800448c <ProcessReceivedCommand+0x8ec>)
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	4618      	mov	r0, r3
 80041de:	f7fc f9b3 	bl	8000548 <__aeabi_f2d>
 80041e2:	4602      	mov	r2, r0
 80041e4:	460b      	mov	r3, r1
 80041e6:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80041ea:	49a9      	ldr	r1, [pc, #676]	; (8004490 <ProcessReceivedCommand+0x8f0>)
 80041ec:	f005 ff98 	bl	800a120 <siprintf>
 80041f0:	4603      	mov	r3, r0
 80041f2:	b2da      	uxtb	r2, r3
 80041f4:	4ba7      	ldr	r3, [pc, #668]	; (8004494 <ProcessReceivedCommand+0x8f4>)
 80041f6:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelDistanceBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 80041f8:	4ba6      	ldr	r3, [pc, #664]	; (8004494 <ProcessReceivedCommand+0x8f4>)
 80041fa:	781b      	ldrb	r3, [r3, #0]
 80041fc:	b29a      	uxth	r2, r3
 80041fe:	f507 7198 	add.w	r1, r7, #304	; 0x130
 8004202:	23c8      	movs	r3, #200	; 0xc8
 8004204:	48a4      	ldr	r0, [pc, #656]	; (8004498 <ProcessReceivedCommand+0x8f8>)
 8004206:	f004 fac4 	bl	8008792 <HAL_UART_Transmit>
				break;
 800420a:	f000 bc64 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
			}			
		
		case 13: // Set PullingSpeed
			// PullingSpeed is the maximum speed when homing or going to the initial Posion
			if (StartRunning) // Setting is not available while running
 800420e:	4ba3      	ldr	r3, [pc, #652]	; (800449c <ProcessReceivedCommand+0x8fc>)
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b00      	cmp	r3, #0
 8004214:	d006      	beq.n	8004224 <ProcessReceivedCommand+0x684>
			{
				InitializeRunning (ExperimentMode);	
 8004216:	4ba2      	ldr	r3, [pc, #648]	; (80044a0 <ProcessReceivedCommand+0x900>)
 8004218:	781b      	ldrb	r3, [r3, #0]
 800421a:	4618      	mov	r0, r3
 800421c:	f7fd ff76 	bl	800210c <InitializeRunning>
				break;
 8004220:	f000 bc59 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				PullingSpeed = MotionCode[1];
 8004224:	4b98      	ldr	r3, [pc, #608]	; (8004488 <ProcessReceivedCommand+0x8e8>)
 8004226:	edd3 7a01 	vldr	s15, [r3, #4]
 800422a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800422e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004232:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004236:	b2da      	uxtb	r2, r3
 8004238:	4b9a      	ldr	r3, [pc, #616]	; (80044a4 <ProcessReceivedCommand+0x904>)
 800423a:	701a      	strb	r2, [r3, #0]
				GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 800423c:	4b99      	ldr	r3, [pc, #612]	; (80044a4 <ProcessReceivedCommand+0x904>)
 800423e:	781b      	ldrb	r3, [r3, #0]
 8004240:	4618      	mov	r0, r3
 8004242:	f7fc f96f 	bl	8000524 <__aeabi_i2d>
 8004246:	a38e      	add	r3, pc, #568	; (adr r3, 8004480 <ProcessReceivedCommand+0x8e0>)
 8004248:	e9d3 2300 	ldrd	r2, r3, [r3]
 800424c:	f7fc f9d4 	bl	80005f8 <__aeabi_dmul>
 8004250:	4602      	mov	r2, r0
 8004252:	460b      	mov	r3, r1
 8004254:	4610      	mov	r0, r2
 8004256:	4619      	mov	r1, r3
 8004258:	f04f 0200 	mov.w	r2, #0
 800425c:	4b92      	ldr	r3, [pc, #584]	; (80044a8 <ProcessReceivedCommand+0x908>)
 800425e:	f7fc faf5 	bl	800084c <__aeabi_ddiv>
 8004262:	4602      	mov	r2, r0
 8004264:	460b      	mov	r3, r1
 8004266:	4610      	mov	r0, r2
 8004268:	4619      	mov	r1, r3
 800426a:	f7fc fcbd 	bl	8000be8 <__aeabi_d2f>
 800426e:	4603      	mov	r3, r0
 8004270:	4a8e      	ldr	r2, [pc, #568]	; (80044ac <ProcessReceivedCommand+0x90c>)
 8004272:	6013      	str	r3, [r2, #0]
				char PullingSpeedBuffer[10];
				TxPCLen = sprintf(PullingSpeedBuffer,"r13/%de",PullingSpeed);
 8004274:	4b8b      	ldr	r3, [pc, #556]	; (80044a4 <ProcessReceivedCommand+0x904>)
 8004276:	781b      	ldrb	r3, [r3, #0]
 8004278:	461a      	mov	r2, r3
 800427a:	f507 7392 	add.w	r3, r7, #292	; 0x124
 800427e:	498c      	ldr	r1, [pc, #560]	; (80044b0 <ProcessReceivedCommand+0x910>)
 8004280:	4618      	mov	r0, r3
 8004282:	f005 ff4d 	bl	800a120 <siprintf>
 8004286:	4603      	mov	r3, r0
 8004288:	b2da      	uxtb	r2, r3
 800428a:	4b82      	ldr	r3, [pc, #520]	; (8004494 <ProcessReceivedCommand+0x8f4>)
 800428c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingSpeedBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 800428e:	4b81      	ldr	r3, [pc, #516]	; (8004494 <ProcessReceivedCommand+0x8f4>)
 8004290:	781b      	ldrb	r3, [r3, #0]
 8004292:	b29a      	uxth	r2, r3
 8004294:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8004298:	23c8      	movs	r3, #200	; 0xc8
 800429a:	487f      	ldr	r0, [pc, #508]	; (8004498 <ProcessReceivedCommand+0x8f8>)
 800429c:	f004 fa79 	bl	8008792 <HAL_UART_Transmit>
				break;
 80042a0:	f000 bc19 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
			}			
		
		case 14: // also start running -> unused now
			InitializeRunning (ExperimentMode);	
 80042a4:	4b7e      	ldr	r3, [pc, #504]	; (80044a0 <ProcessReceivedCommand+0x900>)
 80042a6:	781b      	ldrb	r3, [r3, #0]
 80042a8:	4618      	mov	r0, r3
 80042aa:	f7fd ff2f 	bl	800210c <InitializeRunning>
			break;
 80042ae:	f000 bc12 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
		case 15: // Set DroppingAccel
			if (StartRunning)
 80042b2:	4b7a      	ldr	r3, [pc, #488]	; (800449c <ProcessReceivedCommand+0x8fc>)
 80042b4:	781b      	ldrb	r3, [r3, #0]
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d006      	beq.n	80042c8 <ProcessReceivedCommand+0x728>
			{
				InitializeRunning (ExperimentMode);
 80042ba:	4b79      	ldr	r3, [pc, #484]	; (80044a0 <ProcessReceivedCommand+0x900>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	4618      	mov	r0, r3
 80042c0:	f7fd ff24 	bl	800210c <InitializeRunning>
				break;
 80042c4:	f000 bc07 	b.w	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				DroppingAccel = MotionCode[1];
 80042c8:	4b6f      	ldr	r3, [pc, #444]	; (8004488 <ProcessReceivedCommand+0x8e8>)
 80042ca:	685b      	ldr	r3, [r3, #4]
 80042cc:	4a79      	ldr	r2, [pc, #484]	; (80044b4 <ProcessReceivedCommand+0x914>)
 80042ce:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 80042d0:	f7ff f996 	bl	8003600 <CalculateRunningSpec>
				
				char DroppingAccelBuffer[10];
				TxPCLen = sprintf(DroppingAccelBuffer,"r15/%.3fe",DroppingAccel);
 80042d4:	4b77      	ldr	r3, [pc, #476]	; (80044b4 <ProcessReceivedCommand+0x914>)
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	4618      	mov	r0, r3
 80042da:	f7fc f935 	bl	8000548 <__aeabi_f2d>
 80042de:	4602      	mov	r2, r0
 80042e0:	460b      	mov	r3, r1
 80042e2:	f507 708c 	add.w	r0, r7, #280	; 0x118
 80042e6:	4974      	ldr	r1, [pc, #464]	; (80044b8 <ProcessReceivedCommand+0x918>)
 80042e8:	f005 ff1a 	bl	800a120 <siprintf>
 80042ec:	4603      	mov	r3, r0
 80042ee:	b2da      	uxtb	r2, r3
 80042f0:	4b68      	ldr	r3, [pc, #416]	; (8004494 <ProcessReceivedCommand+0x8f4>)
 80042f2:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 80042f4:	4b67      	ldr	r3, [pc, #412]	; (8004494 <ProcessReceivedCommand+0x8f4>)
 80042f6:	781b      	ldrb	r3, [r3, #0]
 80042f8:	b29a      	uxth	r2, r3
 80042fa:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80042fe:	23c8      	movs	r3, #200	; 0xc8
 8004300:	4865      	ldr	r0, [pc, #404]	; (8004498 <ProcessReceivedCommand+0x8f8>)
 8004302:	f004 fa46 	bl	8008792 <HAL_UART_Transmit>
				break;
 8004306:	e3e6      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}		
		case 16: // Set SampleTime
			if (StartRunning) // When the experiment is running, disable this fcn
 8004308:	4b64      	ldr	r3, [pc, #400]	; (800449c <ProcessReceivedCommand+0x8fc>)
 800430a:	781b      	ldrb	r3, [r3, #0]
 800430c:	2b00      	cmp	r3, #0
 800430e:	d005      	beq.n	800431c <ProcessReceivedCommand+0x77c>
			{
				InitializeRunning (ExperimentMode);	
 8004310:	4b63      	ldr	r3, [pc, #396]	; (80044a0 <ProcessReceivedCommand+0x900>)
 8004312:	781b      	ldrb	r3, [r3, #0]
 8004314:	4618      	mov	r0, r3
 8004316:	f7fd fef9 	bl	800210c <InitializeRunning>
				break;
 800431a:	e3dc      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				SampleTime = MotionCode[1];
 800431c:	4b5a      	ldr	r3, [pc, #360]	; (8004488 <ProcessReceivedCommand+0x8e8>)
 800431e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004322:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004326:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 800432a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800432e:	b2da      	uxtb	r2, r3
 8004330:	4b62      	ldr	r3, [pc, #392]	; (80044bc <ProcessReceivedCommand+0x91c>)
 8004332:	701a      	strb	r2, [r3, #0]
				if (SampleTime<= 20) // ms Set value range, 20:100ms
 8004334:	4b61      	ldr	r3, [pc, #388]	; (80044bc <ProcessReceivedCommand+0x91c>)
 8004336:	781b      	ldrb	r3, [r3, #0]
 8004338:	2b14      	cmp	r3, #20
 800433a:	d802      	bhi.n	8004342 <ProcessReceivedCommand+0x7a2>
				{
					SampleTime = 20;
 800433c:	4b5f      	ldr	r3, [pc, #380]	; (80044bc <ProcessReceivedCommand+0x91c>)
 800433e:	2214      	movs	r2, #20
 8004340:	701a      	strb	r2, [r3, #0]
				}
				if (SampleTime >= 100) // ms
 8004342:	4b5e      	ldr	r3, [pc, #376]	; (80044bc <ProcessReceivedCommand+0x91c>)
 8004344:	781b      	ldrb	r3, [r3, #0]
 8004346:	2b63      	cmp	r3, #99	; 0x63
 8004348:	d902      	bls.n	8004350 <ProcessReceivedCommand+0x7b0>
				{
					SampleTime = 100;
 800434a:	4b5c      	ldr	r3, [pc, #368]	; (80044bc <ProcessReceivedCommand+0x91c>)
 800434c:	2264      	movs	r2, #100	; 0x64
 800434e:	701a      	strb	r2, [r3, #0]
				}
				char SammpleTimeBuffer[10];
				TxPCLen = sprintf(SammpleTimeBuffer,"r16/%de",SampleTime);
 8004350:	4b5a      	ldr	r3, [pc, #360]	; (80044bc <ProcessReceivedCommand+0x91c>)
 8004352:	781b      	ldrb	r3, [r3, #0]
 8004354:	461a      	mov	r2, r3
 8004356:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 800435a:	4959      	ldr	r1, [pc, #356]	; (80044c0 <ProcessReceivedCommand+0x920>)
 800435c:	4618      	mov	r0, r3
 800435e:	f005 fedf 	bl	800a120 <siprintf>
 8004362:	4603      	mov	r3, r0
 8004364:	b2da      	uxtb	r2, r3
 8004366:	4b4b      	ldr	r3, [pc, #300]	; (8004494 <ProcessReceivedCommand+0x8f4>)
 8004368:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SammpleTimeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 800436a:	4b4a      	ldr	r3, [pc, #296]	; (8004494 <ProcessReceivedCommand+0x8f4>)
 800436c:	781b      	ldrb	r3, [r3, #0]
 800436e:	b29a      	uxth	r2, r3
 8004370:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 8004374:	23c8      	movs	r3, #200	; 0xc8
 8004376:	4848      	ldr	r0, [pc, #288]	; (8004498 <ProcessReceivedCommand+0x8f8>)
 8004378:	f004 fa0b 	bl	8008792 <HAL_UART_Transmit>
				break;
 800437c:	e3ab      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}			
		
		case 17: // Reset MCU
			HAL_NVIC_SystemReset();
 800437e:	f002 f924 	bl	80065ca <HAL_NVIC_SystemReset>
			break;
 8004382:	e3a8      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
		case 18: // Servo Enable on/off
			if (MotionCode[1] == 1) // Servo Enable ON
 8004384:	4b40      	ldr	r3, [pc, #256]	; (8004488 <ProcessReceivedCommand+0x8e8>)
 8004386:	edd3 7a01 	vldr	s15, [r3, #4]
 800438a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800438e:	eef4 7a47 	vcmp.f32	s15, s14
 8004392:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004396:	d105      	bne.n	80043a4 <ProcessReceivedCommand+0x804>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Servo enable on
 8004398:	2201      	movs	r2, #1
 800439a:	2110      	movs	r1, #16
 800439c:	4849      	ldr	r0, [pc, #292]	; (80044c4 <ProcessReceivedCommand+0x924>)
 800439e:	f002 fe4f 	bl	8007040 <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
			break;
 80043a2:	e398      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 80043a4:	2200      	movs	r2, #0
 80043a6:	2110      	movs	r1, #16
 80043a8:	4846      	ldr	r0, [pc, #280]	; (80044c4 <ProcessReceivedCommand+0x924>)
 80043aa:	f002 fe49 	bl	8007040 <HAL_GPIO_WritePin>
			break;
 80043ae:	e392      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
		case 20: // Set Step Pulse Cmd
			if (StartRunning)
 80043b0:	4b3a      	ldr	r3, [pc, #232]	; (800449c <ProcessReceivedCommand+0x8fc>)
 80043b2:	781b      	ldrb	r3, [r3, #0]
 80043b4:	2b00      	cmp	r3, #0
 80043b6:	d005      	beq.n	80043c4 <ProcessReceivedCommand+0x824>
			{
				InitializeRunning (ExperimentMode);	
 80043b8:	4b39      	ldr	r3, [pc, #228]	; (80044a0 <ProcessReceivedCommand+0x900>)
 80043ba:	781b      	ldrb	r3, [r3, #0]
 80043bc:	4618      	mov	r0, r3
 80043be:	f7fd fea5 	bl	800210c <InitializeRunning>
				break;
 80043c2:	e388      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				StepPulseCmd = MotionCode[2];
 80043c4:	4b30      	ldr	r3, [pc, #192]	; (8004488 <ProcessReceivedCommand+0x8e8>)
 80043c6:	edd3 7a02 	vldr	s15, [r3, #8]
 80043ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80043ce:	ee17 2a90 	vmov	r2, s15
 80043d2:	4b3d      	ldr	r3, [pc, #244]	; (80044c8 <ProcessReceivedCommand+0x928>)
 80043d4:	601a      	str	r2, [r3, #0]
				if (MotionCode[1] == 1) // CW, +
 80043d6:	4b2c      	ldr	r3, [pc, #176]	; (8004488 <ProcessReceivedCommand+0x8e8>)
 80043d8:	edd3 7a01 	vldr	s15, [r3, #4]
 80043dc:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043e0:	eef4 7a47 	vcmp.f32	s15, s14
 80043e4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043e8:	d11e      	bne.n	8004428 <ProcessReceivedCommand+0x888>
				{		
					Direction = true;
 80043ea:	4b38      	ldr	r3, [pc, #224]	; (80044cc <ProcessReceivedCommand+0x92c>)
 80043ec:	2201      	movs	r2, #1
 80043ee:	701a      	strb	r2, [r3, #0]
					PRIsToggled = false;
 80043f0:	4b37      	ldr	r3, [pc, #220]	; (80044d0 <ProcessReceivedCommand+0x930>)
 80043f2:	2200      	movs	r2, #0
 80043f4:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = true;
 80043f6:	4b37      	ldr	r3, [pc, #220]	; (80044d4 <ProcessReceivedCommand+0x934>)
 80043f8:	2201      	movs	r2, #1
 80043fa:	701a      	strb	r2, [r3, #0]
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80043fc:	4b36      	ldr	r3, [pc, #216]	; (80044d8 <ProcessReceivedCommand+0x938>)
 80043fe:	781b      	ldrb	r3, [r3, #0]
 8004400:	4a36      	ldr	r2, [pc, #216]	; (80044dc <ProcessReceivedCommand+0x93c>)
 8004402:	8812      	ldrh	r2, [r2, #0]
 8004404:	ee07 2a90 	vmov	s15, r2
 8004408:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800440c:	eeb0 0a67 	vmov.f32	s0, s15
 8004410:	4618      	mov	r0, r3
 8004412:	f7fd fbd5 	bl	8001bc0 <CalculateTimer3Period>
 8004416:	4603      	mov	r3, r0
 8004418:	b29a      	uxth	r2, r3
 800441a:	4b31      	ldr	r3, [pc, #196]	; (80044e0 <ProcessReceivedCommand+0x940>)
 800441c:	801a      	strh	r2, [r3, #0]
					//Timer3CountPeriod = (int)((float)(120000000.0/((JogSpeed)*(float)EncoderResolution)) + 0.5);
					//Start Running
					StartPulseGenerating();
 800441e:	f7fd fb8b 	bl	8001b38 <StartPulseGenerating>
					DisableSTOP();
 8004422:	f7fc ff21 	bl	8001268 <DisableSTOP>
					//Timer3CountPeriod = (int)((float)(120000000.0/((JogSpeed)*(float)EncoderResolution)) + 0.5);
					//Start Running
					StartPulseGenerating();
					DisableSTOP();
				}		  
				break;
 8004426:	e356      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
					Direction = false;
 8004428:	4b28      	ldr	r3, [pc, #160]	; (80044cc <ProcessReceivedCommand+0x92c>)
 800442a:	2200      	movs	r2, #0
 800442c:	701a      	strb	r2, [r3, #0]
					PRIsToggled = true;
 800442e:	4b28      	ldr	r3, [pc, #160]	; (80044d0 <ProcessReceivedCommand+0x930>)
 8004430:	2201      	movs	r2, #1
 8004432:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = true;
 8004434:	4b27      	ldr	r3, [pc, #156]	; (80044d4 <ProcessReceivedCommand+0x934>)
 8004436:	2201      	movs	r2, #1
 8004438:	701a      	strb	r2, [r3, #0]
					Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 800443a:	4b27      	ldr	r3, [pc, #156]	; (80044d8 <ProcessReceivedCommand+0x938>)
 800443c:	781b      	ldrb	r3, [r3, #0]
 800443e:	4a27      	ldr	r2, [pc, #156]	; (80044dc <ProcessReceivedCommand+0x93c>)
 8004440:	8812      	ldrh	r2, [r2, #0]
 8004442:	ee07 2a90 	vmov	s15, r2
 8004446:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800444a:	eeb0 0a67 	vmov.f32	s0, s15
 800444e:	4618      	mov	r0, r3
 8004450:	f7fd fbb6 	bl	8001bc0 <CalculateTimer3Period>
 8004454:	4603      	mov	r3, r0
 8004456:	b29a      	uxth	r2, r3
 8004458:	4b21      	ldr	r3, [pc, #132]	; (80044e0 <ProcessReceivedCommand+0x940>)
 800445a:	801a      	strh	r2, [r3, #0]
					StartPulseGenerating();
 800445c:	f7fd fb6c 	bl	8001b38 <StartPulseGenerating>
					DisableSTOP();
 8004460:	f7fc ff02 	bl	8001268 <DisableSTOP>
				break;
 8004464:	e337      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
		case 27: // Set Running Mode
			if(StartRunning) // Setting is not available while running
 8004466:	4b0d      	ldr	r3, [pc, #52]	; (800449c <ProcessReceivedCommand+0x8fc>)
 8004468:	781b      	ldrb	r3, [r3, #0]
 800446a:	2b00      	cmp	r3, #0
 800446c:	d03a      	beq.n	80044e4 <ProcessReceivedCommand+0x944>
			{
				InitializeRunning(ExperimentMode);
 800446e:	4b0c      	ldr	r3, [pc, #48]	; (80044a0 <ProcessReceivedCommand+0x900>)
 8004470:	781b      	ldrb	r3, [r3, #0]
 8004472:	4618      	mov	r0, r3
 8004474:	f7fd fe4a 	bl	800210c <InitializeRunning>
				break;
 8004478:	e32d      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
 800447a:	bf00      	nop
 800447c:	f3af 8000 	nop.w
 8004480:	9999999a 	.word	0x9999999a
 8004484:	3fb99999 	.word	0x3fb99999
 8004488:	20000500 	.word	0x20000500
 800448c:	20000478 	.word	0x20000478
 8004490:	0800df34 	.word	0x0800df34
 8004494:	20000426 	.word	0x20000426
 8004498:	20000338 	.word	0x20000338
 800449c:	20000434 	.word	0x20000434
 80044a0:	20000004 	.word	0x20000004
 80044a4:	2000045d 	.word	0x2000045d
 80044a8:	40080000 	.word	0x40080000
 80044ac:	20000460 	.word	0x20000460
 80044b0:	0800df40 	.word	0x0800df40
 80044b4:	20000464 	.word	0x20000464
 80044b8:	0800df48 	.word	0x0800df48
 80044bc:	2000045c 	.word	0x2000045c
 80044c0:	0800df54 	.word	0x0800df54
 80044c4:	40020800 	.word	0x40020800
 80044c8:	200004b4 	.word	0x200004b4
 80044cc:	20000435 	.word	0x20000435
 80044d0:	20000446 	.word	0x20000446
 80044d4:	2000043c 	.word	0x2000043c
 80044d8:	20000003 	.word	0x20000003
 80044dc:	20000006 	.word	0x20000006
 80044e0:	20000450 	.word	0x20000450
			}
			else
			{
				if (MotionCode[1] == 1) // RunningMode = true => Automatic Running
 80044e4:	4ba5      	ldr	r3, [pc, #660]	; (800477c <ProcessReceivedCommand+0xbdc>)
 80044e6:	edd3 7a01 	vldr	s15, [r3, #4]
 80044ea:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80044ee:	eef4 7a47 	vcmp.f32	s15, s14
 80044f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80044f6:	d103      	bne.n	8004500 <ProcessReceivedCommand+0x960>
				{
					RunningMode = true; // Automatic	
 80044f8:	4ba1      	ldr	r3, [pc, #644]	; (8004780 <ProcessReceivedCommand+0xbe0>)
 80044fa:	2201      	movs	r2, #1
 80044fc:	701a      	strb	r2, [r3, #0]
 80044fe:	e002      	b.n	8004506 <ProcessReceivedCommand+0x966>
				}				 			
				else
				{
					RunningMode = false; // Manual
 8004500:	4b9f      	ldr	r3, [pc, #636]	; (8004780 <ProcessReceivedCommand+0xbe0>)
 8004502:	2200      	movs	r2, #0
 8004504:	701a      	strb	r2, [r3, #0]
				}					
				char SammpleTimeBuffer[10];
				TxPCLen = sprintf(SammpleTimeBuffer,"g27/%de",RunningMode);
 8004506:	4b9e      	ldr	r3, [pc, #632]	; (8004780 <ProcessReceivedCommand+0xbe0>)
 8004508:	781b      	ldrb	r3, [r3, #0]
 800450a:	461a      	mov	r2, r3
 800450c:	f507 7380 	add.w	r3, r7, #256	; 0x100
 8004510:	499c      	ldr	r1, [pc, #624]	; (8004784 <ProcessReceivedCommand+0xbe4>)
 8004512:	4618      	mov	r0, r3
 8004514:	f005 fe04 	bl	800a120 <siprintf>
 8004518:	4603      	mov	r3, r0
 800451a:	b2da      	uxtb	r2, r3
 800451c:	4b9a      	ldr	r3, [pc, #616]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 800451e:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SammpleTimeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004520:	4b99      	ldr	r3, [pc, #612]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 8004522:	781b      	ldrb	r3, [r3, #0]
 8004524:	b29a      	uxth	r2, r3
 8004526:	f507 7180 	add.w	r1, r7, #256	; 0x100
 800452a:	23c8      	movs	r3, #200	; 0xc8
 800452c:	4897      	ldr	r0, [pc, #604]	; (800478c <ProcessReceivedCommand+0xbec>)
 800452e:	f004 f930 	bl	8008792 <HAL_UART_Transmit>
				break;
 8004532:	e2d0      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			
		case 28: // Stop jog move up/down in Position Jog control;
			if (StartRunning) // Setting is not available while running
 8004534:	4b96      	ldr	r3, [pc, #600]	; (8004790 <ProcessReceivedCommand+0xbf0>)
 8004536:	781b      	ldrb	r3, [r3, #0]
 8004538:	2b00      	cmp	r3, #0
 800453a:	d005      	beq.n	8004548 <ProcessReceivedCommand+0x9a8>
			{
				InitializeRunning(ExperimentMode);
 800453c:	4b95      	ldr	r3, [pc, #596]	; (8004794 <ProcessReceivedCommand+0xbf4>)
 800453e:	781b      	ldrb	r3, [r3, #0]
 8004540:	4618      	mov	r0, r3
 8004542:	f7fd fde3 	bl	800210c <InitializeRunning>
				break;
 8004546:	e2c6      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				StopPulseGenerating();
 8004548:	f7fd fad8 	bl	8001afc <StopPulseGenerating>
				JoggingMoveUp = false;
 800454c:	4b92      	ldr	r3, [pc, #584]	; (8004798 <ProcessReceivedCommand+0xbf8>)
 800454e:	2200      	movs	r2, #0
 8004550:	701a      	strb	r2, [r3, #0]
				//HAL_TIM_IC_Stop()
				break;
 8004552:	e2c0      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
//				}
//				break;
//			}
			
		case 31: // Set Experiment Mode
			if (StartRunning) // Setting is not available while running
 8004554:	4b8e      	ldr	r3, [pc, #568]	; (8004790 <ProcessReceivedCommand+0xbf0>)
 8004556:	781b      	ldrb	r3, [r3, #0]
 8004558:	2b00      	cmp	r3, #0
 800455a:	d005      	beq.n	8004568 <ProcessReceivedCommand+0x9c8>
			{
				InitializeRunning(ExperimentMode);
 800455c:	4b8d      	ldr	r3, [pc, #564]	; (8004794 <ProcessReceivedCommand+0xbf4>)
 800455e:	781b      	ldrb	r3, [r3, #0]
 8004560:	4618      	mov	r0, r3
 8004562:	f7fd fdd3 	bl	800210c <InitializeRunning>
				break;
 8004566:	e2b6      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				ExperimentMode = MotionCode[1]; // 1=Dropping Mode;2 = Pulling; 3= Pulling->Dropping
 8004568:	4b84      	ldr	r3, [pc, #528]	; (800477c <ProcessReceivedCommand+0xbdc>)
 800456a:	edd3 7a01 	vldr	s15, [r3, #4]
 800456e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8004572:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004576:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 800457a:	b2da      	uxtb	r2, r3
 800457c:	4b85      	ldr	r3, [pc, #532]	; (8004794 <ProcessReceivedCommand+0xbf4>)
 800457e:	701a      	strb	r2, [r3, #0]
				char SetModeBuff[8];
				TxPCLen = sprintf(SetModeBuff,"m%de",ExperimentMode);
 8004580:	4b84      	ldr	r3, [pc, #528]	; (8004794 <ProcessReceivedCommand+0xbf4>)
 8004582:	781b      	ldrb	r3, [r3, #0]
 8004584:	461a      	mov	r2, r3
 8004586:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 800458a:	4984      	ldr	r1, [pc, #528]	; (800479c <ProcessReceivedCommand+0xbfc>)
 800458c:	4618      	mov	r0, r3
 800458e:	f005 fdc7 	bl	800a120 <siprintf>
 8004592:	4603      	mov	r3, r0
 8004594:	b2da      	uxtb	r2, r3
 8004596:	4b7c      	ldr	r3, [pc, #496]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 8004598:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SetModeBuff,TxPCLen,100); // Send to uart6 to check the params are set or not	
 800459a:	4b7b      	ldr	r3, [pc, #492]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 800459c:	781b      	ldrb	r3, [r3, #0]
 800459e:	b29a      	uxth	r2, r3
 80045a0:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 80045a4:	2364      	movs	r3, #100	; 0x64
 80045a6:	4879      	ldr	r0, [pc, #484]	; (800478c <ProcessReceivedCommand+0xbec>)
 80045a8:	f004 f8f3 	bl	8008792 <HAL_UART_Transmit>
				break;
 80045ac:	e293      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			
		case 32: // Set Pulling Accelerating Distance; Pulling Mode
			if (StartRunning) // Setting is not available while running
 80045ae:	4b78      	ldr	r3, [pc, #480]	; (8004790 <ProcessReceivedCommand+0xbf0>)
 80045b0:	781b      	ldrb	r3, [r3, #0]
 80045b2:	2b00      	cmp	r3, #0
 80045b4:	d005      	beq.n	80045c2 <ProcessReceivedCommand+0xa22>
			{
				InitializeRunning(ExperimentMode);
 80045b6:	4b77      	ldr	r3, [pc, #476]	; (8004794 <ProcessReceivedCommand+0xbf4>)
 80045b8:	781b      	ldrb	r3, [r3, #0]
 80045ba:	4618      	mov	r0, r3
 80045bc:	f7fd fda6 	bl	800210c <InitializeRunning>
				break;
 80045c0:	e289      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				PullingAccelDistance = MotionCode[1];
 80045c2:	4b6e      	ldr	r3, [pc, #440]	; (800477c <ProcessReceivedCommand+0xbdc>)
 80045c4:	685b      	ldr	r3, [r3, #4]
 80045c6:	4a76      	ldr	r2, [pc, #472]	; (80047a0 <ProcessReceivedCommand+0xc00>)
 80045c8:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 80045ca:	f7ff f819 	bl	8003600 <CalculateRunningSpec>
				
				char PullingDistanceBuffer[10];
				TxPCLen = sprintf(PullingDistanceBuffer,"r32/%.1fe",PullingAccelDistance);
 80045ce:	4b74      	ldr	r3, [pc, #464]	; (80047a0 <ProcessReceivedCommand+0xc00>)
 80045d0:	681b      	ldr	r3, [r3, #0]
 80045d2:	4618      	mov	r0, r3
 80045d4:	f7fb ffb8 	bl	8000548 <__aeabi_f2d>
 80045d8:	4602      	mov	r2, r0
 80045da:	460b      	mov	r3, r1
 80045dc:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 80045e0:	4970      	ldr	r1, [pc, #448]	; (80047a4 <ProcessReceivedCommand+0xc04>)
 80045e2:	f005 fd9d 	bl	800a120 <siprintf>
 80045e6:	4603      	mov	r3, r0
 80045e8:	b2da      	uxtb	r2, r3
 80045ea:	4b67      	ldr	r3, [pc, #412]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 80045ec:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingDistanceBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not			
 80045ee:	4b66      	ldr	r3, [pc, #408]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 80045f0:	781b      	ldrb	r3, [r3, #0]
 80045f2:	b29a      	uxth	r2, r3
 80045f4:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80045f8:	2364      	movs	r3, #100	; 0x64
 80045fa:	4864      	ldr	r0, [pc, #400]	; (800478c <ProcessReceivedCommand+0xbec>)
 80045fc:	f004 f8c9 	bl	8008792 <HAL_UART_Transmit>
				break;
 8004600:	e269      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			
		case 33: // Set Pulling AccRef in Pulling Mode
			if (StartRunning)// Setting is not available while running
 8004602:	4b63      	ldr	r3, [pc, #396]	; (8004790 <ProcessReceivedCommand+0xbf0>)
 8004604:	781b      	ldrb	r3, [r3, #0]
 8004606:	2b00      	cmp	r3, #0
 8004608:	d005      	beq.n	8004616 <ProcessReceivedCommand+0xa76>
			{
				InitializeRunning(ExperimentMode);
 800460a:	4b62      	ldr	r3, [pc, #392]	; (8004794 <ProcessReceivedCommand+0xbf4>)
 800460c:	781b      	ldrb	r3, [r3, #0]
 800460e:	4618      	mov	r0, r3
 8004610:	f7fd fd7c 	bl	800210c <InitializeRunning>
				break;
 8004614:	e25f      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				PullingAccel = MotionCode[1];
 8004616:	4b59      	ldr	r3, [pc, #356]	; (800477c <ProcessReceivedCommand+0xbdc>)
 8004618:	685b      	ldr	r3, [r3, #4]
 800461a:	4a63      	ldr	r2, [pc, #396]	; (80047a8 <ProcessReceivedCommand+0xc08>)
 800461c:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 800461e:	f7fe ffef 	bl	8003600 <CalculateRunningSpec>
				
				char AccRefPullingBuffer[10];
				TxPCLen = sprintf(AccRefPullingBuffer,"r33/%.2fe",PullingAccel);
 8004622:	4b61      	ldr	r3, [pc, #388]	; (80047a8 <ProcessReceivedCommand+0xc08>)
 8004624:	681b      	ldr	r3, [r3, #0]
 8004626:	4618      	mov	r0, r3
 8004628:	f7fb ff8e 	bl	8000548 <__aeabi_f2d>
 800462c:	4602      	mov	r2, r0
 800462e:	460b      	mov	r3, r1
 8004630:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 8004634:	495d      	ldr	r1, [pc, #372]	; (80047ac <ProcessReceivedCommand+0xc0c>)
 8004636:	f005 fd73 	bl	800a120 <siprintf>
 800463a:	4603      	mov	r3, r0
 800463c:	b2da      	uxtb	r2, r3
 800463e:	4b52      	ldr	r3, [pc, #328]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 8004640:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)AccRefPullingBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004642:	4b51      	ldr	r3, [pc, #324]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 8004644:	781b      	ldrb	r3, [r3, #0]
 8004646:	b29a      	uxth	r2, r3
 8004648:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 800464c:	2364      	movs	r3, #100	; 0x64
 800464e:	484f      	ldr	r0, [pc, #316]	; (800478c <ProcessReceivedCommand+0xbec>)
 8004650:	f004 f89f 	bl	8008792 <HAL_UART_Transmit>
				break;
 8004654:	e23f      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			
		case 34: // Set DroppingDecel, m/s2
			if (StartRunning)// Setting is not available while running
 8004656:	4b4e      	ldr	r3, [pc, #312]	; (8004790 <ProcessReceivedCommand+0xbf0>)
 8004658:	781b      	ldrb	r3, [r3, #0]
 800465a:	2b00      	cmp	r3, #0
 800465c:	d005      	beq.n	800466a <ProcessReceivedCommand+0xaca>
			{
				InitializeRunning(ExperimentMode);				
 800465e:	4b4d      	ldr	r3, [pc, #308]	; (8004794 <ProcessReceivedCommand+0xbf4>)
 8004660:	781b      	ldrb	r3, [r3, #0]
 8004662:	4618      	mov	r0, r3
 8004664:	f7fd fd52 	bl	800210c <InitializeRunning>
				
				char DroppingDecelBuffer[10];
				TxPCLen = sprintf(DroppingDecelBuffer,"r34/%.2fe",DroppingDecel);
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}
			break;		
 8004668:	e235      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
				DroppingDecel = MotionCode[1];
 800466a:	4b44      	ldr	r3, [pc, #272]	; (800477c <ProcessReceivedCommand+0xbdc>)
 800466c:	685b      	ldr	r3, [r3, #4]
 800466e:	4a50      	ldr	r2, [pc, #320]	; (80047b0 <ProcessReceivedCommand+0xc10>)
 8004670:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 8004672:	f7fe ffc5 	bl	8003600 <CalculateRunningSpec>
				TxPCLen = sprintf(DroppingDecelBuffer,"r34/%.2fe",DroppingDecel);
 8004676:	4b4e      	ldr	r3, [pc, #312]	; (80047b0 <ProcessReceivedCommand+0xc10>)
 8004678:	681b      	ldr	r3, [r3, #0]
 800467a:	4618      	mov	r0, r3
 800467c:	f7fb ff64 	bl	8000548 <__aeabi_f2d>
 8004680:	4602      	mov	r2, r0
 8004682:	460b      	mov	r3, r1
 8004684:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8004688:	494a      	ldr	r1, [pc, #296]	; (80047b4 <ProcessReceivedCommand+0xc14>)
 800468a:	f005 fd49 	bl	800a120 <siprintf>
 800468e:	4603      	mov	r3, r0
 8004690:	b2da      	uxtb	r2, r3
 8004692:	4b3d      	ldr	r3, [pc, #244]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 8004694:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 8004696:	4b3c      	ldr	r3, [pc, #240]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 8004698:	781b      	ldrb	r3, [r3, #0]
 800469a:	b29a      	uxth	r2, r3
 800469c:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 80046a0:	2364      	movs	r3, #100	; 0x64
 80046a2:	483a      	ldr	r0, [pc, #232]	; (800478c <ProcessReceivedCommand+0xbec>)
 80046a4:	f004 f875 	bl	8008792 <HAL_UART_Transmit>
			break;		
 80046a8:	e215      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			
		case 35: // Set Pulling Deceleration in m/s2
			if (StartRunning)// Setting is not available while running
 80046aa:	4b39      	ldr	r3, [pc, #228]	; (8004790 <ProcessReceivedCommand+0xbf0>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d005      	beq.n	80046be <ProcessReceivedCommand+0xb1e>
			{
				InitializeRunning(ExperimentMode);				
 80046b2:	4b38      	ldr	r3, [pc, #224]	; (8004794 <ProcessReceivedCommand+0xbf4>)
 80046b4:	781b      	ldrb	r3, [r3, #0]
 80046b6:	4618      	mov	r0, r3
 80046b8:	f7fd fd28 	bl	800210c <InitializeRunning>
				
				char PullingDecelBuffer[10];
				TxPCLen = sprintf(PullingDecelBuffer,"r35/%.2fe",PullingDecel);
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}
			break;
 80046bc:	e20b      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
				PullingDecel = MotionCode[1];
 80046be:	4b2f      	ldr	r3, [pc, #188]	; (800477c <ProcessReceivedCommand+0xbdc>)
 80046c0:	685b      	ldr	r3, [r3, #4]
 80046c2:	4a3d      	ldr	r2, [pc, #244]	; (80047b8 <ProcessReceivedCommand+0xc18>)
 80046c4:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 80046c6:	f7fe ff9b 	bl	8003600 <CalculateRunningSpec>
				TxPCLen = sprintf(PullingDecelBuffer,"r35/%.2fe",PullingDecel);
 80046ca:	4b3b      	ldr	r3, [pc, #236]	; (80047b8 <ProcessReceivedCommand+0xc18>)
 80046cc:	681b      	ldr	r3, [r3, #0]
 80046ce:	4618      	mov	r0, r3
 80046d0:	f7fb ff3a 	bl	8000548 <__aeabi_f2d>
 80046d4:	4602      	mov	r2, r0
 80046d6:	460b      	mov	r3, r1
 80046d8:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 80046dc:	4937      	ldr	r1, [pc, #220]	; (80047bc <ProcessReceivedCommand+0xc1c>)
 80046de:	f005 fd1f 	bl	800a120 <siprintf>
 80046e2:	4603      	mov	r3, r0
 80046e4:	b2da      	uxtb	r2, r3
 80046e6:	4b28      	ldr	r3, [pc, #160]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 80046e8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 80046ea:	4b27      	ldr	r3, [pc, #156]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 80046ec:	781b      	ldrb	r3, [r3, #0]
 80046ee:	b29a      	uxth	r2, r3
 80046f0:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80046f4:	2364      	movs	r3, #100	; 0x64
 80046f6:	4825      	ldr	r0, [pc, #148]	; (800478c <ProcessReceivedCommand+0xbec>)
 80046f8:	f004 f84b 	bl	8008792 <HAL_UART_Transmit>
			break;
 80046fc:	e1eb      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			
		case 36: // Resource
			break;
			
		case 37: // Set Stopping Time
			if (StartRunning)// Setting is not available while running
 80046fe:	4b24      	ldr	r3, [pc, #144]	; (8004790 <ProcessReceivedCommand+0xbf0>)
 8004700:	781b      	ldrb	r3, [r3, #0]
 8004702:	2b00      	cmp	r3, #0
 8004704:	d005      	beq.n	8004712 <ProcessReceivedCommand+0xb72>
			{
				InitializeRunning(ExperimentMode);
 8004706:	4b23      	ldr	r3, [pc, #140]	; (8004794 <ProcessReceivedCommand+0xbf4>)
 8004708:	781b      	ldrb	r3, [r3, #0]
 800470a:	4618      	mov	r0, r3
 800470c:	f7fd fcfe 	bl	800210c <InitializeRunning>
				break;
 8004710:	e1e1      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				StoppingTime = MotionCode[1];
 8004712:	4b1a      	ldr	r3, [pc, #104]	; (800477c <ProcessReceivedCommand+0xbdc>)
 8004714:	edd3 7a01 	vldr	s15, [r3, #4]
 8004718:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800471c:	ee17 3a90 	vmov	r3, s15
 8004720:	b29a      	uxth	r2, r3
 8004722:	4b27      	ldr	r3, [pc, #156]	; (80047c0 <ProcessReceivedCommand+0xc20>)
 8004724:	801a      	strh	r2, [r3, #0]
				if (StoppingTime <= 2000) // ms
 8004726:	4b26      	ldr	r3, [pc, #152]	; (80047c0 <ProcessReceivedCommand+0xc20>)
 8004728:	881b      	ldrh	r3, [r3, #0]
 800472a:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 800472e:	d803      	bhi.n	8004738 <ProcessReceivedCommand+0xb98>
				{
					StoppingTime = 2000; // min = 2000 ms
 8004730:	4b23      	ldr	r3, [pc, #140]	; (80047c0 <ProcessReceivedCommand+0xc20>)
 8004732:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 8004736:	801a      	strh	r2, [r3, #0]
				}
				if (StoppingTime >= 10000)
 8004738:	4b21      	ldr	r3, [pc, #132]	; (80047c0 <ProcessReceivedCommand+0xc20>)
 800473a:	881b      	ldrh	r3, [r3, #0]
 800473c:	f242 720f 	movw	r2, #9999	; 0x270f
 8004740:	4293      	cmp	r3, r2
 8004742:	d903      	bls.n	800474c <ProcessReceivedCommand+0xbac>
				{
					StoppingTime = 10000; // max = 10000 ms
 8004744:	4b1e      	ldr	r3, [pc, #120]	; (80047c0 <ProcessReceivedCommand+0xc20>)
 8004746:	f242 7210 	movw	r2, #10000	; 0x2710
 800474a:	801a      	strh	r2, [r3, #0]
				}
				char StoppingTimeBuffer[10];
				TxPCLen = sprintf(StoppingTimeBuffer,"r37/%de",StoppingTime);
 800474c:	4b1c      	ldr	r3, [pc, #112]	; (80047c0 <ProcessReceivedCommand+0xc20>)
 800474e:	881b      	ldrh	r3, [r3, #0]
 8004750:	461a      	mov	r2, r3
 8004752:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004756:	491b      	ldr	r1, [pc, #108]	; (80047c4 <ProcessReceivedCommand+0xc24>)
 8004758:	4618      	mov	r0, r3
 800475a:	f005 fce1 	bl	800a120 <siprintf>
 800475e:	4603      	mov	r3, r0
 8004760:	b2da      	uxtb	r2, r3
 8004762:	4b09      	ldr	r3, [pc, #36]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 8004764:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)StoppingTimeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004766:	4b08      	ldr	r3, [pc, #32]	; (8004788 <ProcessReceivedCommand+0xbe8>)
 8004768:	781b      	ldrb	r3, [r3, #0]
 800476a:	b29a      	uxth	r2, r3
 800476c:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 8004770:	23c8      	movs	r3, #200	; 0xc8
 8004772:	4806      	ldr	r0, [pc, #24]	; (800478c <ProcessReceivedCommand+0xbec>)
 8004774:	f004 f80d 	bl	8008792 <HAL_UART_Transmit>
				break;
 8004778:	e1ad      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
 800477a:	bf00      	nop
 800477c:	20000500 	.word	0x20000500
 8004780:	20000445 	.word	0x20000445
 8004784:	0800df5c 	.word	0x0800df5c
 8004788:	20000426 	.word	0x20000426
 800478c:	20000338 	.word	0x20000338
 8004790:	20000434 	.word	0x20000434
 8004794:	20000004 	.word	0x20000004
 8004798:	20000441 	.word	0x20000441
 800479c:	0800df64 	.word	0x0800df64
 80047a0:	20000498 	.word	0x20000498
 80047a4:	0800df6c 	.word	0x0800df6c
 80047a8:	2000047c 	.word	0x2000047c
 80047ac:	0800df78 	.word	0x0800df78
 80047b0:	20000468 	.word	0x20000468
 80047b4:	0800df84 	.word	0x0800df84
 80047b8:	20000480 	.word	0x20000480
 80047bc:	0800df90 	.word	0x0800df90
 80047c0:	2000045e 	.word	0x2000045e
 80047c4:	0800df9c 	.word	0x0800df9c
			}
		case 38: // Homing task
			if (StartRunning)// Setting is not available while running
 80047c8:	4ba7      	ldr	r3, [pc, #668]	; (8004a68 <ProcessReceivedCommand+0xec8>)
 80047ca:	781b      	ldrb	r3, [r3, #0]
 80047cc:	2b00      	cmp	r3, #0
 80047ce:	d005      	beq.n	80047dc <ProcessReceivedCommand+0xc3c>
			{
				InitializeRunning(ExperimentMode);
 80047d0:	4ba6      	ldr	r3, [pc, #664]	; (8004a6c <ProcessReceivedCommand+0xecc>)
 80047d2:	781b      	ldrb	r3, [r3, #0]
 80047d4:	4618      	mov	r0, r3
 80047d6:	f7fd fc99 	bl	800210c <InitializeRunning>
				break;
 80047da:	e17c      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				IsHoming = true;
 80047dc:	4ba4      	ldr	r3, [pc, #656]	; (8004a70 <ProcessReceivedCommand+0xed0>)
 80047de:	2201      	movs	r2, #1
 80047e0:	701a      	strb	r2, [r3, #0]
				//Timer3CountPeriod = CalculateTimer3Period(MotorDriver,PullingSpeed);
				//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
				Direction = false; // false = move up, true = move down			
 80047e2:	4ba4      	ldr	r3, [pc, #656]	; (8004a74 <ProcessReceivedCommand+0xed4>)
 80047e4:	2200      	movs	r2, #0
 80047e6:	701a      	strb	r2, [r3, #0]
				PRIsToggled = true; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 80047e8:	4ba3      	ldr	r3, [pc, #652]	; (8004a78 <ProcessReceivedCommand+0xed8>)
 80047ea:	2201      	movs	r2, #1
 80047ec:	701a      	strb	r2, [r3, #0]
				JoggingMoveUp = true;
 80047ee:	4ba3      	ldr	r3, [pc, #652]	; (8004a7c <ProcessReceivedCommand+0xedc>)
 80047f0:	2201      	movs	r2, #1
 80047f2:	701a      	strb	r2, [r3, #0]
				DisableSTOP(); // Disable the stop
 80047f4:	f7fc fd38 	bl	8001268 <DisableSTOP>
				StartPulseGenerating();
 80047f8:	f7fd f99e 	bl	8001b38 <StartPulseGenerating>
			}
			break;
 80047fc:	e16b      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			
		case 39: // Set Driver type, FDA7000 or ASDA A3
			if (StartRunning)// Setting is not available while running
 80047fe:	4b9a      	ldr	r3, [pc, #616]	; (8004a68 <ProcessReceivedCommand+0xec8>)
 8004800:	781b      	ldrb	r3, [r3, #0]
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <ProcessReceivedCommand+0xc72>
			{
				InitializeRunning(ExperimentMode);
 8004806:	4b99      	ldr	r3, [pc, #612]	; (8004a6c <ProcessReceivedCommand+0xecc>)
 8004808:	781b      	ldrb	r3, [r3, #0]
 800480a:	4618      	mov	r0, r3
 800480c:	f7fd fc7e 	bl	800210c <InitializeRunning>
				break;
 8004810:	e161      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				if (MotionCode[1] == 1) // FDA7000
 8004812:	4b9b      	ldr	r3, [pc, #620]	; (8004a80 <ProcessReceivedCommand+0xee0>)
 8004814:	edd3 7a01 	vldr	s15, [r3, #4]
 8004818:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800481c:	eef4 7a47 	vcmp.f32	s15, s14
 8004820:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004824:	d10c      	bne.n	8004840 <ProcessReceivedCommand+0xca0>
				{
					MotorDriver = true;
 8004826:	4b97      	ldr	r3, [pc, #604]	; (8004a84 <ProcessReceivedCommand+0xee4>)
 8004828:	2201      	movs	r2, #1
 800482a:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 29; // For FDA7000, read 5 register => receive 25 bytes
 800482c:	4b96      	ldr	r3, [pc, #600]	; (8004a88 <ProcessReceivedCommand+0xee8>)
 800482e:	221d      	movs	r2, #29
 8004830:	701a      	strb	r2, [r3, #0]
					EncoderResolution = HigenEncoderResolution;
 8004832:	4b96      	ldr	r3, [pc, #600]	; (8004a8c <ProcessReceivedCommand+0xeec>)
 8004834:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8004838:	801a      	strh	r2, [r3, #0]
					InitParams ();
 800483a:	f7ff f93d 	bl	8003ab8 <InitParams>
 800483e:	e00b      	b.n	8004858 <ProcessReceivedCommand+0xcb8>
				}
				else // ASDA A3
				{
					MotorDriver = false;
 8004840:	4b90      	ldr	r3, [pc, #576]	; (8004a84 <ProcessReceivedCommand+0xee4>)
 8004842:	2200      	movs	r2, #0
 8004844:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 17;
 8004846:	4b90      	ldr	r3, [pc, #576]	; (8004a88 <ProcessReceivedCommand+0xee8>)
 8004848:	2211      	movs	r2, #17
 800484a:	701a      	strb	r2, [r3, #0]
					EncoderResolution = AsdaEncoderResolution;
 800484c:	4b8f      	ldr	r3, [pc, #572]	; (8004a8c <ProcessReceivedCommand+0xeec>)
 800484e:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004852:	801a      	strh	r2, [r3, #0]
					InitParams ();
 8004854:	f7ff f930 	bl	8003ab8 <InitParams>
					// For ASDA Drier, read 1 register => receive 9 bytes	
					// read 2 registers => receive 13 bytes
				}
				char DriverTypeBuffer[10];
				TxPCLen = sprintf(DriverTypeBuffer,"g39/%de",MotorDriver);
 8004858:	4b8a      	ldr	r3, [pc, #552]	; (8004a84 <ProcessReceivedCommand+0xee4>)
 800485a:	781b      	ldrb	r3, [r3, #0]
 800485c:	461a      	mov	r2, r3
 800485e:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 8004862:	498b      	ldr	r1, [pc, #556]	; (8004a90 <ProcessReceivedCommand+0xef0>)
 8004864:	4618      	mov	r0, r3
 8004866:	f005 fc5b 	bl	800a120 <siprintf>
 800486a:	4603      	mov	r3, r0
 800486c:	b2da      	uxtb	r2, r3
 800486e:	4b89      	ldr	r3, [pc, #548]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 8004870:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DriverTypeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004872:	4b88      	ldr	r3, [pc, #544]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 8004874:	781b      	ldrb	r3, [r3, #0]
 8004876:	b29a      	uxth	r2, r3
 8004878:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 800487c:	23c8      	movs	r3, #200	; 0xc8
 800487e:	4886      	ldr	r0, [pc, #536]	; (8004a98 <ProcessReceivedCommand+0xef8>)
 8004880:	f003 ff87 	bl	8008792 <HAL_UART_Transmit>
			}			
			break;
 8004884:	e127      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
		
		case 41: // Set Fly Acc slope
			if (StartRunning)// Setting is not available while running
 8004886:	4b78      	ldr	r3, [pc, #480]	; (8004a68 <ProcessReceivedCommand+0xec8>)
 8004888:	781b      	ldrb	r3, [r3, #0]
 800488a:	2b00      	cmp	r3, #0
 800488c:	d005      	beq.n	800489a <ProcessReceivedCommand+0xcfa>
			{
				InitializeRunning(ExperimentMode);				
 800488e:	4b77      	ldr	r3, [pc, #476]	; (8004a6c <ProcessReceivedCommand+0xecc>)
 8004890:	781b      	ldrb	r3, [r3, #0]
 8004892:	4618      	mov	r0, r3
 8004894:	f7fd fc3a 	bl	800210c <InitializeRunning>
				char FlyAccSlopeBuffer[10];
				TxPCLen = sprintf(FlyAccSlopeBuffer,"r41/%.3fe",FlyAccSlope);
				HAL_UART_Transmit(&huart6,(uint8_t *)FlyAccSlopeBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
			}
			
			break;
 8004898:	e11d      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
				FlyAccSlope = MotionCode[1];
 800489a:	4b79      	ldr	r3, [pc, #484]	; (8004a80 <ProcessReceivedCommand+0xee0>)
 800489c:	685b      	ldr	r3, [r3, #4]
 800489e:	4a7f      	ldr	r2, [pc, #508]	; (8004a9c <ProcessReceivedCommand+0xefc>)
 80048a0:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(FlyAccSlopeBuffer,"r41/%.3fe",FlyAccSlope);
 80048a2:	4b7e      	ldr	r3, [pc, #504]	; (8004a9c <ProcessReceivedCommand+0xefc>)
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	4618      	mov	r0, r3
 80048a8:	f7fb fe4e 	bl	8000548 <__aeabi_f2d>
 80048ac:	4602      	mov	r2, r0
 80048ae:	460b      	mov	r3, r1
 80048b0:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 80048b4:	497a      	ldr	r1, [pc, #488]	; (8004aa0 <ProcessReceivedCommand+0xf00>)
 80048b6:	f005 fc33 	bl	800a120 <siprintf>
 80048ba:	4603      	mov	r3, r0
 80048bc:	b2da      	uxtb	r2, r3
 80048be:	4b75      	ldr	r3, [pc, #468]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 80048c0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)FlyAccSlopeBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 80048c2:	4b74      	ldr	r3, [pc, #464]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 80048c4:	781b      	ldrb	r3, [r3, #0]
 80048c6:	b29a      	uxth	r2, r3
 80048c8:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 80048cc:	2364      	movs	r3, #100	; 0x64
 80048ce:	4872      	ldr	r0, [pc, #456]	; (8004a98 <ProcessReceivedCommand+0xef8>)
 80048d0:	f003 ff5f 	bl	8008792 <HAL_UART_Transmit>
			break;
 80048d4:	e0ff      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
		
		case 42: // Set Ki
			if (StartRunning)// Setting is not available while running
 80048d6:	4b64      	ldr	r3, [pc, #400]	; (8004a68 <ProcessReceivedCommand+0xec8>)
 80048d8:	781b      	ldrb	r3, [r3, #0]
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d005      	beq.n	80048ea <ProcessReceivedCommand+0xd4a>
			{
				InitializeRunning(ExperimentMode);				
 80048de:	4b63      	ldr	r3, [pc, #396]	; (8004a6c <ProcessReceivedCommand+0xecc>)
 80048e0:	781b      	ldrb	r3, [r3, #0]
 80048e2:	4618      	mov	r0, r3
 80048e4:	f7fd fc12 	bl	800210c <InitializeRunning>
				
				char KiBuffer[10];
				TxPCLen = sprintf(KiBuffer,"r42/%.4fe",Ki);
				HAL_UART_Transmit(&huart6,(uint8_t *)KiBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 80048e8:	e0f5      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
				Ki = MotionCode[1];
 80048ea:	4b65      	ldr	r3, [pc, #404]	; (8004a80 <ProcessReceivedCommand+0xee0>)
 80048ec:	685b      	ldr	r3, [r3, #4]
 80048ee:	4a6d      	ldr	r2, [pc, #436]	; (8004aa4 <ProcessReceivedCommand+0xf04>)
 80048f0:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(KiBuffer,"r42/%.4fe",Ki);
 80048f2:	4b6c      	ldr	r3, [pc, #432]	; (8004aa4 <ProcessReceivedCommand+0xf04>)
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	4618      	mov	r0, r3
 80048f8:	f7fb fe26 	bl	8000548 <__aeabi_f2d>
 80048fc:	4602      	mov	r2, r0
 80048fe:	460b      	mov	r3, r1
 8004900:	f107 0098 	add.w	r0, r7, #152	; 0x98
 8004904:	4968      	ldr	r1, [pc, #416]	; (8004aa8 <ProcessReceivedCommand+0xf08>)
 8004906:	f005 fc0b 	bl	800a120 <siprintf>
 800490a:	4603      	mov	r3, r0
 800490c:	b2da      	uxtb	r2, r3
 800490e:	4b61      	ldr	r3, [pc, #388]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 8004910:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)KiBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 8004912:	4b60      	ldr	r3, [pc, #384]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 8004914:	781b      	ldrb	r3, [r3, #0]
 8004916:	b29a      	uxth	r2, r3
 8004918:	f107 0198 	add.w	r1, r7, #152	; 0x98
 800491c:	2364      	movs	r3, #100	; 0x64
 800491e:	485e      	ldr	r0, [pc, #376]	; (8004a98 <ProcessReceivedCommand+0xef8>)
 8004920:	f003 ff37 	bl	8008792 <HAL_UART_Transmit>
			break;
 8004924:	e0d7      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			
		case 43: //Set Kd
			if (StartRunning)// Setting is not available while running
 8004926:	4b50      	ldr	r3, [pc, #320]	; (8004a68 <ProcessReceivedCommand+0xec8>)
 8004928:	781b      	ldrb	r3, [r3, #0]
 800492a:	2b00      	cmp	r3, #0
 800492c:	d005      	beq.n	800493a <ProcessReceivedCommand+0xd9a>
			{
				InitializeRunning(ExperimentMode);				
 800492e:	4b4f      	ldr	r3, [pc, #316]	; (8004a6c <ProcessReceivedCommand+0xecc>)
 8004930:	781b      	ldrb	r3, [r3, #0]
 8004932:	4618      	mov	r0, r3
 8004934:	f7fd fbea 	bl	800210c <InitializeRunning>
				
				char BrakeAccSlopeBuffer[10];
				TxPCLen = sprintf(BrakeAccSlopeBuffer,"r43/%.4fe",BrakeAccSlope);
				HAL_UART_Transmit(&huart6,(uint8_t *)BrakeAccSlopeBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
			}			
			break;
 8004938:	e0cd      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
				BrakeAccSlope = MotionCode[1];
 800493a:	4b51      	ldr	r3, [pc, #324]	; (8004a80 <ProcessReceivedCommand+0xee0>)
 800493c:	685b      	ldr	r3, [r3, #4]
 800493e:	4a5b      	ldr	r2, [pc, #364]	; (8004aac <ProcessReceivedCommand+0xf0c>)
 8004940:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(BrakeAccSlopeBuffer,"r43/%.4fe",BrakeAccSlope);
 8004942:	4b5a      	ldr	r3, [pc, #360]	; (8004aac <ProcessReceivedCommand+0xf0c>)
 8004944:	681b      	ldr	r3, [r3, #0]
 8004946:	4618      	mov	r0, r3
 8004948:	f7fb fdfe 	bl	8000548 <__aeabi_f2d>
 800494c:	4602      	mov	r2, r0
 800494e:	460b      	mov	r3, r1
 8004950:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8004954:	4956      	ldr	r1, [pc, #344]	; (8004ab0 <ProcessReceivedCommand+0xf10>)
 8004956:	f005 fbe3 	bl	800a120 <siprintf>
 800495a:	4603      	mov	r3, r0
 800495c:	b2da      	uxtb	r2, r3
 800495e:	4b4d      	ldr	r3, [pc, #308]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 8004960:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)BrakeAccSlopeBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 8004962:	4b4c      	ldr	r3, [pc, #304]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 8004964:	781b      	ldrb	r3, [r3, #0]
 8004966:	b29a      	uxth	r2, r3
 8004968:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 800496c:	2364      	movs	r3, #100	; 0x64
 800496e:	484a      	ldr	r0, [pc, #296]	; (8004a98 <ProcessReceivedCommand+0xef8>)
 8004970:	f003 ff0f 	bl	8008792 <HAL_UART_Transmit>
			break;
 8004974:	e0af      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
		
		case 46: // Set origin (home) position
			OriginPulse = MotorEncPulse;
 8004976:	4b4f      	ldr	r3, [pc, #316]	; (8004ab4 <ProcessReceivedCommand+0xf14>)
 8004978:	681b      	ldr	r3, [r3, #0]
 800497a:	4a4f      	ldr	r2, [pc, #316]	; (8004ab8 <ProcessReceivedCommand+0xf18>)
 800497c:	6013      	str	r3, [r2, #0]
			PositionPulseCmd = 0;
 800497e:	4b4f      	ldr	r3, [pc, #316]	; (8004abc <ProcessReceivedCommand+0xf1c>)
 8004980:	2200      	movs	r2, #0
 8004982:	601a      	str	r2, [r3, #0]
			break;
 8004984:	e0a7      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
		
		case 47: // Set open/Closed loop control Mode
			if (StartRunning)// Setting is not available while running
 8004986:	4b38      	ldr	r3, [pc, #224]	; (8004a68 <ProcessReceivedCommand+0xec8>)
 8004988:	781b      	ldrb	r3, [r3, #0]
 800498a:	2b00      	cmp	r3, #0
 800498c:	d005      	beq.n	800499a <ProcessReceivedCommand+0xdfa>
			{
				InitializeRunning(ExperimentMode);				
 800498e:	4b37      	ldr	r3, [pc, #220]	; (8004a6c <ProcessReceivedCommand+0xecc>)
 8004990:	781b      	ldrb	r3, [r3, #0]
 8004992:	4618      	mov	r0, r3
 8004994:	f7fd fbba 	bl	800210c <InitializeRunning>
				
				char ControlLoopBuffer[10];
				TxPCLen = sprintf(ControlLoopBuffer,"g47/%de",IsOpenLoopControl);
				HAL_UART_Transmit(&huart6,(uint8_t *)ControlLoopBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 8004998:	e09d      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
				if(MotionCode[1] == 0) // Set to Closed loop control
 800499a:	4b39      	ldr	r3, [pc, #228]	; (8004a80 <ProcessReceivedCommand+0xee0>)
 800499c:	edd3 7a01 	vldr	s15, [r3, #4]
 80049a0:	eef5 7a40 	vcmp.f32	s15, #0.0
 80049a4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80049a8:	d103      	bne.n	80049b2 <ProcessReceivedCommand+0xe12>
					IsOpenLoopControl = false;
 80049aa:	4b45      	ldr	r3, [pc, #276]	; (8004ac0 <ProcessReceivedCommand+0xf20>)
 80049ac:	2200      	movs	r2, #0
 80049ae:	701a      	strb	r2, [r3, #0]
 80049b0:	e002      	b.n	80049b8 <ProcessReceivedCommand+0xe18>
					IsOpenLoopControl = true;
 80049b2:	4b43      	ldr	r3, [pc, #268]	; (8004ac0 <ProcessReceivedCommand+0xf20>)
 80049b4:	2201      	movs	r2, #1
 80049b6:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ControlLoopBuffer,"g47/%de",IsOpenLoopControl);
 80049b8:	4b41      	ldr	r3, [pc, #260]	; (8004ac0 <ProcessReceivedCommand+0xf20>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	f107 0380 	add.w	r3, r7, #128	; 0x80
 80049c2:	4940      	ldr	r1, [pc, #256]	; (8004ac4 <ProcessReceivedCommand+0xf24>)
 80049c4:	4618      	mov	r0, r3
 80049c6:	f005 fbab 	bl	800a120 <siprintf>
 80049ca:	4603      	mov	r3, r0
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	4b31      	ldr	r3, [pc, #196]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 80049d0:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ControlLoopBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 80049d2:	4b30      	ldr	r3, [pc, #192]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 80049d4:	781b      	ldrb	r3, [r3, #0]
 80049d6:	b29a      	uxth	r2, r3
 80049d8:	f107 0180 	add.w	r1, r7, #128	; 0x80
 80049dc:	2364      	movs	r3, #100	; 0x64
 80049de:	482e      	ldr	r0, [pc, #184]	; (8004a98 <ProcessReceivedCommand+0xef8>)
 80049e0:	f003 fed7 	bl	8008792 <HAL_UART_Transmit>
			break;
 80049e4:	e077      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			
		case 48: // turn on/off the software upper limit
			if (StartRunning)// Setting is not available while running
 80049e6:	4b20      	ldr	r3, [pc, #128]	; (8004a68 <ProcessReceivedCommand+0xec8>)
 80049e8:	781b      	ldrb	r3, [r3, #0]
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d005      	beq.n	80049fa <ProcessReceivedCommand+0xe5a>
			{
				InitializeRunning(ExperimentMode);				
 80049ee:	4b1f      	ldr	r3, [pc, #124]	; (8004a6c <ProcessReceivedCommand+0xecc>)
 80049f0:	781b      	ldrb	r3, [r3, #0]
 80049f2:	4618      	mov	r0, r3
 80049f4:	f7fd fb8a 	bl	800210c <InitializeRunning>
				
				char SoftWareLimitBuffer[10];
				TxPCLen = sprintf(SoftWareLimitBuffer,"g48/%de",SoftWareLimit);
				HAL_UART_Transmit(&huart6,(uint8_t *)SoftWareLimitBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 80049f8:	e06d      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
				if(MotionCode[1] == 1) // turn on software limit
 80049fa:	4b21      	ldr	r3, [pc, #132]	; (8004a80 <ProcessReceivedCommand+0xee0>)
 80049fc:	edd3 7a01 	vldr	s15, [r3, #4]
 8004a00:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004a04:	eef4 7a47 	vcmp.f32	s15, s14
 8004a08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8004a0c:	d103      	bne.n	8004a16 <ProcessReceivedCommand+0xe76>
					SoftWareLimit = true;
 8004a0e:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <ProcessReceivedCommand+0xf28>)
 8004a10:	2201      	movs	r2, #1
 8004a12:	701a      	strb	r2, [r3, #0]
 8004a14:	e002      	b.n	8004a1c <ProcessReceivedCommand+0xe7c>
					SoftWareLimit = false;
 8004a16:	4b2c      	ldr	r3, [pc, #176]	; (8004ac8 <ProcessReceivedCommand+0xf28>)
 8004a18:	2200      	movs	r2, #0
 8004a1a:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(SoftWareLimitBuffer,"g48/%de",SoftWareLimit);
 8004a1c:	4b2a      	ldr	r3, [pc, #168]	; (8004ac8 <ProcessReceivedCommand+0xf28>)
 8004a1e:	781b      	ldrb	r3, [r3, #0]
 8004a20:	461a      	mov	r2, r3
 8004a22:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8004a26:	4929      	ldr	r1, [pc, #164]	; (8004acc <ProcessReceivedCommand+0xf2c>)
 8004a28:	4618      	mov	r0, r3
 8004a2a:	f005 fb79 	bl	800a120 <siprintf>
 8004a2e:	4603      	mov	r3, r0
 8004a30:	b2da      	uxtb	r2, r3
 8004a32:	4b18      	ldr	r3, [pc, #96]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 8004a34:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SoftWareLimitBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 8004a36:	4b17      	ldr	r3, [pc, #92]	; (8004a94 <ProcessReceivedCommand+0xef4>)
 8004a38:	781b      	ldrb	r3, [r3, #0]
 8004a3a:	b29a      	uxth	r2, r3
 8004a3c:	f107 0174 	add.w	r1, r7, #116	; 0x74
 8004a40:	2364      	movs	r3, #100	; 0x64
 8004a42:	4815      	ldr	r0, [pc, #84]	; (8004a98 <ProcessReceivedCommand+0xef8>)
 8004a44:	f003 fea5 	bl	8008792 <HAL_UART_Transmit>
			break;
 8004a48:	e045      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
		default:
			if (StartRunning)// Keep running
 8004a4a:	4b07      	ldr	r3, [pc, #28]	; (8004a68 <ProcessReceivedCommand+0xec8>)
 8004a4c:	781b      	ldrb	r3, [r3, #0]
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d040      	beq.n	8004ad4 <ProcessReceivedCommand+0xf34>
			{
				InitializeRunning(ExperimentMode);
 8004a52:	4b06      	ldr	r3, [pc, #24]	; (8004a6c <ProcessReceivedCommand+0xecc>)
 8004a54:	781b      	ldrb	r3, [r3, #0]
 8004a56:	4618      	mov	r0, r3
 8004a58:	f7fd fb58 	bl	800210c <InitializeRunning>
				break;
 8004a5c:	e03b      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			break;
 8004a5e:	bf00      	nop
 8004a60:	e039      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			break;
 8004a62:	bf00      	nop
 8004a64:	e037      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
 8004a66:	bf00      	nop
 8004a68:	20000434 	.word	0x20000434
 8004a6c:	20000004 	.word	0x20000004
 8004a70:	20000443 	.word	0x20000443
 8004a74:	20000435 	.word	0x20000435
 8004a78:	20000446 	.word	0x20000446
 8004a7c:	20000441 	.word	0x20000441
 8004a80:	20000500 	.word	0x20000500
 8004a84:	20000003 	.word	0x20000003
 8004a88:	20000000 	.word	0x20000000
 8004a8c:	20000008 	.word	0x20000008
 8004a90:	0800dfa4 	.word	0x0800dfa4
 8004a94:	20000426 	.word	0x20000426
 8004a98:	20000338 	.word	0x20000338
 8004a9c:	20000530 	.word	0x20000530
 8004aa0:	0800dfac 	.word	0x0800dfac
 8004aa4:	20000524 	.word	0x20000524
 8004aa8:	0800dfb8 	.word	0x0800dfb8
 8004aac:	2000052c 	.word	0x2000052c
 8004ab0:	0800dfc4 	.word	0x0800dfc4
 8004ab4:	200004f8 	.word	0x200004f8
 8004ab8:	200004b0 	.word	0x200004b0
 8004abc:	200004b8 	.word	0x200004b8
 8004ac0:	20000444 	.word	0x20000444
 8004ac4:	0800dfd0 	.word	0x0800dfd0
 8004ac8:	20000005 	.word	0x20000005
 8004acc:	0800dfd8 	.word	0x0800dfd8
			break;
 8004ad0:	bf00      	nop
 8004ad2:	e000      	b.n	8004ad6 <ProcessReceivedCommand+0xf36>
			}
			else
			{
				break;
 8004ad4:	bf00      	nop
			}					
	}
}
 8004ad6:	bf00      	nop
 8004ad8:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 8004adc:	46bd      	mov	sp, r7
 8004ade:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004ae2:	bf00      	nop

08004ae4 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback function when a receiving complete
{
 8004ae4:	b580      	push	{r7, lr}
 8004ae6:	b082      	sub	sp, #8
 8004ae8:	af00      	add	r7, sp, #0
 8004aea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(huart);
	
	// BEGIN UART6 Receiving
		if (huart->Instance==USART6) // If it is uart6, UI communication
 8004aec:	687b      	ldr	r3, [r7, #4]
 8004aee:	681b      	ldr	r3, [r3, #0]
 8004af0:	4a42      	ldr	r2, [pc, #264]	; (8004bfc <HAL_UART_RxCpltCallback+0x118>)
 8004af2:	4293      	cmp	r3, r2
 8004af4:	d121      	bne.n	8004b3a <HAL_UART_RxCpltCallback+0x56>
		{
			if(RxPCData!=EndChar) // read up to the ending char
 8004af6:	4b42      	ldr	r3, [pc, #264]	; (8004c00 <HAL_UART_RxCpltCallback+0x11c>)
 8004af8:	781b      	ldrb	r3, [r3, #0]
 8004afa:	2224      	movs	r2, #36	; 0x24
 8004afc:	4293      	cmp	r3, r2
 8004afe:	d016      	beq.n	8004b2e <HAL_UART_RxCpltCallback+0x4a>
			{
				if (RxPCData != NULL) // remove the null character
 8004b00:	4b3f      	ldr	r3, [pc, #252]	; (8004c00 <HAL_UART_RxCpltCallback+0x11c>)
 8004b02:	781b      	ldrb	r3, [r3, #0]
 8004b04:	2b00      	cmp	r3, #0
 8004b06:	d018      	beq.n	8004b3a <HAL_UART_RxCpltCallback+0x56>
				{
					RxPCBuff[_rxPCIndex]=RxPCData;// Copy the data to buffer
 8004b08:	4b3e      	ldr	r3, [pc, #248]	; (8004c04 <HAL_UART_RxCpltCallback+0x120>)
 8004b0a:	781b      	ldrb	r3, [r3, #0]
 8004b0c:	461a      	mov	r2, r3
 8004b0e:	4b3c      	ldr	r3, [pc, #240]	; (8004c00 <HAL_UART_RxCpltCallback+0x11c>)
 8004b10:	7819      	ldrb	r1, [r3, #0]
 8004b12:	4b3d      	ldr	r3, [pc, #244]	; (8004c08 <HAL_UART_RxCpltCallback+0x124>)
 8004b14:	5499      	strb	r1, [r3, r2]
				  _rxPCIndex++;
 8004b16:	4b3b      	ldr	r3, [pc, #236]	; (8004c04 <HAL_UART_RxCpltCallback+0x120>)
 8004b18:	781b      	ldrb	r3, [r3, #0]
 8004b1a:	3301      	adds	r3, #1
 8004b1c:	b2da      	uxtb	r2, r3
 8004b1e:	4b39      	ldr	r3, [pc, #228]	; (8004c04 <HAL_UART_RxCpltCallback+0x120>)
 8004b20:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8004b22:	2201      	movs	r2, #1
 8004b24:	4936      	ldr	r1, [pc, #216]	; (8004c00 <HAL_UART_RxCpltCallback+0x11c>)
 8004b26:	4839      	ldr	r0, [pc, #228]	; (8004c0c <HAL_UART_RxCpltCallback+0x128>)
 8004b28:	f003 fec5 	bl	80088b6 <HAL_UART_Receive_IT>
 8004b2c:	e005      	b.n	8004b3a <HAL_UART_RxCpltCallback+0x56>
				}		
			}
			else //if(RxPCData==EndChar)
			{								
				_rxPCIndex=0;
 8004b2e:	4b35      	ldr	r3, [pc, #212]	; (8004c04 <HAL_UART_RxCpltCallback+0x120>)
 8004b30:	2200      	movs	r2, #0
 8004b32:	701a      	strb	r2, [r3, #0]
				RxUart6_Cpl_Flag=true; // reading completed				
 8004b34:	4b36      	ldr	r3, [pc, #216]	; (8004c10 <HAL_UART_RxCpltCallback+0x12c>)
 8004b36:	2201      	movs	r2, #1
 8004b38:	701a      	strb	r2, [r3, #0]
		}
	// END UART6
		
		//BEGIN UART5 = HAL_UART_Receive_IT============================================
		/// Use this part
		if (huart->Instance==UART5) // If it is uart5, driver communication
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	681b      	ldr	r3, [r3, #0]
 8004b3e:	4a35      	ldr	r2, [pc, #212]	; (8004c14 <HAL_UART_RxCpltCallback+0x130>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	d130      	bne.n	8004ba6 <HAL_UART_RxCpltCallback+0xc2>
		{	
			if (_rxDriverIndex >= NoOfBytes) //
 8004b44:	4b34      	ldr	r3, [pc, #208]	; (8004c18 <HAL_UART_RxCpltCallback+0x134>)
 8004b46:	781a      	ldrb	r2, [r3, #0]
 8004b48:	4b34      	ldr	r3, [pc, #208]	; (8004c1c <HAL_UART_RxCpltCallback+0x138>)
 8004b4a:	781b      	ldrb	r3, [r3, #0]
 8004b4c:	429a      	cmp	r2, r3
 8004b4e:	d308      	bcc.n	8004b62 <HAL_UART_RxCpltCallback+0x7e>
			{					
				RxUart5_Cpl_Flag = true; // Complete Receiving
 8004b50:	4b33      	ldr	r3, [pc, #204]	; (8004c20 <HAL_UART_RxCpltCallback+0x13c>)
 8004b52:	2201      	movs	r2, #1
 8004b54:	701a      	strb	r2, [r3, #0]
				StartReceiveDriverData = false;
 8004b56:	4b33      	ldr	r3, [pc, #204]	; (8004c24 <HAL_UART_RxCpltCallback+0x140>)
 8004b58:	2200      	movs	r2, #0
 8004b5a:	701a      	strb	r2, [r3, #0]
				_rxDriverIndex = 0;								
 8004b5c:	4b2e      	ldr	r3, [pc, #184]	; (8004c18 <HAL_UART_RxCpltCallback+0x134>)
 8004b5e:	2200      	movs	r2, #0
 8004b60:	701a      	strb	r2, [r3, #0]
			}				
			if ((_rxDriverIndex == 0)&&(RxDriverData == DriverID)) // If byte 0 is the Driver ID
 8004b62:	4b2d      	ldr	r3, [pc, #180]	; (8004c18 <HAL_UART_RxCpltCallback+0x134>)
 8004b64:	781b      	ldrb	r3, [r3, #0]
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d106      	bne.n	8004b78 <HAL_UART_RxCpltCallback+0x94>
 8004b6a:	4b2f      	ldr	r3, [pc, #188]	; (8004c28 <HAL_UART_RxCpltCallback+0x144>)
 8004b6c:	781b      	ldrb	r3, [r3, #0]
 8004b6e:	2b01      	cmp	r3, #1
 8004b70:	d102      	bne.n	8004b78 <HAL_UART_RxCpltCallback+0x94>
			{
				StartReceiveDriverData = true; 
 8004b72:	4b2c      	ldr	r3, [pc, #176]	; (8004c24 <HAL_UART_RxCpltCallback+0x140>)
 8004b74:	2201      	movs	r2, #1
 8004b76:	701a      	strb	r2, [r3, #0]
			}
			if (StartReceiveDriverData) //
 8004b78:	4b2a      	ldr	r3, [pc, #168]	; (8004c24 <HAL_UART_RxCpltCallback+0x140>)
 8004b7a:	781b      	ldrb	r3, [r3, #0]
 8004b7c:	b2db      	uxtb	r3, r3
 8004b7e:	2b00      	cmp	r3, #0
 8004b80:	d011      	beq.n	8004ba6 <HAL_UART_RxCpltCallback+0xc2>
			{
				RxDriverBuff[_rxDriverIndex]=RxDriverData;// Copy the data to buffer							
 8004b82:	4b25      	ldr	r3, [pc, #148]	; (8004c18 <HAL_UART_RxCpltCallback+0x134>)
 8004b84:	781b      	ldrb	r3, [r3, #0]
 8004b86:	461a      	mov	r2, r3
 8004b88:	4b27      	ldr	r3, [pc, #156]	; (8004c28 <HAL_UART_RxCpltCallback+0x144>)
 8004b8a:	7819      	ldrb	r1, [r3, #0]
 8004b8c:	4b27      	ldr	r3, [pc, #156]	; (8004c2c <HAL_UART_RxCpltCallback+0x148>)
 8004b8e:	5499      	strb	r1, [r3, r2]
				_rxDriverIndex++;
 8004b90:	4b21      	ldr	r3, [pc, #132]	; (8004c18 <HAL_UART_RxCpltCallback+0x134>)
 8004b92:	781b      	ldrb	r3, [r3, #0]
 8004b94:	3301      	adds	r3, #1
 8004b96:	b2da      	uxtb	r2, r3
 8004b98:	4b1f      	ldr	r3, [pc, #124]	; (8004c18 <HAL_UART_RxCpltCallback+0x134>)
 8004b9a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time ///*/					
 8004b9c:	2201      	movs	r2, #1
 8004b9e:	4922      	ldr	r1, [pc, #136]	; (8004c28 <HAL_UART_RxCpltCallback+0x144>)
 8004ba0:	4823      	ldr	r0, [pc, #140]	; (8004c30 <HAL_UART_RxCpltCallback+0x14c>)
 8004ba2:	f003 fe88 	bl	80088b6 <HAL_UART_Receive_IT>
			}					
		}
		// END UART5

		// BEGIN UART3
		if (huart->Instance==USART3) // UART3, receive Acc data
 8004ba6:	687b      	ldr	r3, [r7, #4]
 8004ba8:	681b      	ldr	r3, [r3, #0]
 8004baa:	4a22      	ldr	r2, [pc, #136]	; (8004c34 <HAL_UART_RxCpltCallback+0x150>)
 8004bac:	4293      	cmp	r3, r2
 8004bae:	d121      	bne.n	8004bf4 <HAL_UART_RxCpltCallback+0x110>
		{
			
			if(RxUart3Data!=EndChar) // read up to the ending char
 8004bb0:	4b21      	ldr	r3, [pc, #132]	; (8004c38 <HAL_UART_RxCpltCallback+0x154>)
 8004bb2:	781b      	ldrb	r3, [r3, #0]
 8004bb4:	2224      	movs	r2, #36	; 0x24
 8004bb6:	4293      	cmp	r3, r2
 8004bb8:	d011      	beq.n	8004bde <HAL_UART_RxCpltCallback+0xfa>
			{
				if (RxUart3Data != NULL) // remove the null character
 8004bba:	4b1f      	ldr	r3, [pc, #124]	; (8004c38 <HAL_UART_RxCpltCallback+0x154>)
 8004bbc:	781b      	ldrb	r3, [r3, #0]
 8004bbe:	2b00      	cmp	r3, #0
 8004bc0:	d013      	beq.n	8004bea <HAL_UART_RxCpltCallback+0x106>
				{
					RxUart3Buff[_rxUart3Index]=RxUart3Data;// Copy the data to buffer
 8004bc2:	4b1e      	ldr	r3, [pc, #120]	; (8004c3c <HAL_UART_RxCpltCallback+0x158>)
 8004bc4:	781b      	ldrb	r3, [r3, #0]
 8004bc6:	461a      	mov	r2, r3
 8004bc8:	4b1b      	ldr	r3, [pc, #108]	; (8004c38 <HAL_UART_RxCpltCallback+0x154>)
 8004bca:	7819      	ldrb	r1, [r3, #0]
 8004bcc:	4b1c      	ldr	r3, [pc, #112]	; (8004c40 <HAL_UART_RxCpltCallback+0x15c>)
 8004bce:	5499      	strb	r1, [r3, r2]
				  _rxUart3Index++;					
 8004bd0:	4b1a      	ldr	r3, [pc, #104]	; (8004c3c <HAL_UART_RxCpltCallback+0x158>)
 8004bd2:	781b      	ldrb	r3, [r3, #0]
 8004bd4:	3301      	adds	r3, #1
 8004bd6:	b2da      	uxtb	r2, r3
 8004bd8:	4b18      	ldr	r3, [pc, #96]	; (8004c3c <HAL_UART_RxCpltCallback+0x158>)
 8004bda:	701a      	strb	r2, [r3, #0]
 8004bdc:	e005      	b.n	8004bea <HAL_UART_RxCpltCallback+0x106>
				}		
			}
			else //if(RxPCData==EndChar)
			{								
				_rxUart3Index=0;
 8004bde:	4b17      	ldr	r3, [pc, #92]	; (8004c3c <HAL_UART_RxCpltCallback+0x158>)
 8004be0:	2200      	movs	r2, #0
 8004be2:	701a      	strb	r2, [r3, #0]
				RxUart3_Cpl_Flag=true; // reading completed				
 8004be4:	4b17      	ldr	r3, [pc, #92]	; (8004c44 <HAL_UART_RxCpltCallback+0x160>)
 8004be6:	2201      	movs	r2, #1
 8004be8:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_IT(&huart3,&RxUart3Data,1);				
 8004bea:	2201      	movs	r2, #1
 8004bec:	4912      	ldr	r1, [pc, #72]	; (8004c38 <HAL_UART_RxCpltCallback+0x154>)
 8004bee:	4816      	ldr	r0, [pc, #88]	; (8004c48 <HAL_UART_RxCpltCallback+0x164>)
 8004bf0:	f003 fe61 	bl	80088b6 <HAL_UART_Receive_IT>
//				RxESP_Cpl_Flag=true; // reading completed				
//			}
//			HAL_UART_Receive_IT(&huart4,&RxESPData,1);			
//		}
//		// END UART4
}
 8004bf4:	bf00      	nop
 8004bf6:	3708      	adds	r7, #8
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	40011400 	.word	0x40011400
 8004c00:	20000404 	.word	0x20000404
 8004c04:	2000042c 	.word	0x2000042c
 8004c08:	2000037c 	.word	0x2000037c
 8004c0c:	20000338 	.word	0x20000338
 8004c10:	2000042f 	.word	0x2000042f
 8004c14:	40005000 	.word	0x40005000
 8004c18:	2000042d 	.word	0x2000042d
 8004c1c:	20000000 	.word	0x20000000
 8004c20:	20000430 	.word	0x20000430
 8004c24:	20000432 	.word	0x20000432
 8004c28:	20000405 	.word	0x20000405
 8004c2c:	200003a4 	.word	0x200003a4
 8004c30:	200002b0 	.word	0x200002b0
 8004c34:	40004800 	.word	0x40004800
 8004c38:	20000406 	.word	0x20000406
 8004c3c:	2000042e 	.word	0x2000042e
 8004c40:	200003c4 	.word	0x200003c4
 8004c44:	20000431 	.word	0x20000431
 8004c48:	200002f4 	.word	0x200002f4

08004c4c <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer 2 interrupt, 1ms
{
 8004c4c:	b580      	push	{r7, lr}
 8004c4e:	b082      	sub	sp, #8
 8004c50:	af00      	add	r7, sp, #0
 8004c52:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)	// TIMER 3 interrupt for pulse generation, period: 2us
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	4a39      	ldr	r2, [pc, #228]	; (8004d40 <HAL_TIM_PeriodElapsedCallback+0xf4>)
 8004c5a:	4293      	cmp	r3, r2
 8004c5c:	d145      	bne.n	8004cea <HAL_TIM_PeriodElapsedCallback+0x9e>
	{
		if (PulseGenerationFlag) // Only generating pulse when the flag is ON. Otherwise, do nothing
 8004c5e:	4b39      	ldr	r3, [pc, #228]	; (8004d44 <HAL_TIM_PeriodElapsedCallback+0xf8>)
 8004c60:	781b      	ldrb	r3, [r3, #0]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d041      	beq.n	8004cea <HAL_TIM_PeriodElapsedCallback+0x9e>
		{
				Timer3Count++;
 8004c66:	4b38      	ldr	r3, [pc, #224]	; (8004d48 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004c68:	881b      	ldrh	r3, [r3, #0]
 8004c6a:	3301      	adds	r3, #1
 8004c6c:	b29a      	uxth	r2, r3
 8004c6e:	4b36      	ldr	r3, [pc, #216]	; (8004d48 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004c70:	801a      	strh	r2, [r3, #0]
				if (Timer3Count >= Timer3CountPeriod) // Generate pulse
 8004c72:	4b35      	ldr	r3, [pc, #212]	; (8004d48 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004c74:	881a      	ldrh	r2, [r3, #0]
 8004c76:	4b35      	ldr	r3, [pc, #212]	; (8004d4c <HAL_TIM_PeriodElapsedCallback+0x100>)
 8004c78:	881b      	ldrh	r3, [r3, #0]
 8004c7a:	429a      	cmp	r2, r3
 8004c7c:	d335      	bcc.n	8004cea <HAL_TIM_PeriodElapsedCallback+0x9e>
				{
					Timer3Count = 0;
 8004c7e:	4b32      	ldr	r3, [pc, #200]	; (8004d48 <HAL_TIM_PeriodElapsedCallback+0xfc>)
 8004c80:	2200      	movs	r2, #0
 8004c82:	801a      	strh	r2, [r3, #0]
					if (PRIsToggled)
 8004c84:	4b32      	ldr	r3, [pc, #200]	; (8004d50 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004c86:	781b      	ldrb	r3, [r3, #0]
 8004c88:	2b00      	cmp	r3, #0
 8004c8a:	d017      	beq.n	8004cbc <HAL_TIM_PeriodElapsedCallback+0x70>
					{
						HAL_GPIO_TogglePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin); // Generate pulses on PF by tonggling this input
 8004c8c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004c90:	4830      	ldr	r0, [pc, #192]	; (8004d54 <HAL_TIM_PeriodElapsedCallback+0x108>)
 8004c92:	f002 f9ee 	bl	8007072 <HAL_GPIO_TogglePin>
						PRIsToggled = false;					
 8004c96:	4b2e      	ldr	r3, [pc, #184]	; (8004d50 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004c98:	2200      	movs	r2, #0
 8004c9a:	701a      	strb	r2, [r3, #0]
						if (Direction) // Direction = true: dropping down
 8004c9c:	4b2e      	ldr	r3, [pc, #184]	; (8004d58 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004c9e:	781b      	ldrb	r3, [r3, #0]
 8004ca0:	2b00      	cmp	r3, #0
 8004ca2:	d005      	beq.n	8004cb0 <HAL_TIM_PeriodElapsedCallback+0x64>
						{
							PositionPulseCmd++; // Increase the pulse cmd
 8004ca4:	4b2d      	ldr	r3, [pc, #180]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004ca6:	681b      	ldr	r3, [r3, #0]
 8004ca8:	3301      	adds	r3, #1
 8004caa:	4a2c      	ldr	r2, [pc, #176]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004cac:	6013      	str	r3, [r2, #0]
//								IsStepPulseCmd = false;
//								PulseCmd = 0;
//								return;
//							}
//						}
						return; // exit the function
 8004cae:	e043      	b.n	8004d38 <HAL_TIM_PeriodElapsedCallback+0xec>
							PositionPulseCmd--; // Decrease the pulse cmd
 8004cb0:	4b2a      	ldr	r3, [pc, #168]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004cb2:	681b      	ldr	r3, [r3, #0]
 8004cb4:	3b01      	subs	r3, #1
 8004cb6:	4a29      	ldr	r2, [pc, #164]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004cb8:	6013      	str	r3, [r2, #0]
						return; // exit the function
 8004cba:	e03d      	b.n	8004d38 <HAL_TIM_PeriodElapsedCallback+0xec>
					}				
					else
					{
						HAL_GPIO_TogglePin(PC8_PR_GPIO_Port, PC8_PR_Pin); // Generate pulses on PF by tonggling this input
 8004cbc:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004cc0:	4827      	ldr	r0, [pc, #156]	; (8004d60 <HAL_TIM_PeriodElapsedCallback+0x114>)
 8004cc2:	f002 f9d6 	bl	8007072 <HAL_GPIO_TogglePin>
						PRIsToggled = true;
 8004cc6:	4b22      	ldr	r3, [pc, #136]	; (8004d50 <HAL_TIM_PeriodElapsedCallback+0x104>)
 8004cc8:	2201      	movs	r2, #1
 8004cca:	701a      	strb	r2, [r3, #0]
						if (Direction) // Direction = true: dropping down
 8004ccc:	4b22      	ldr	r3, [pc, #136]	; (8004d58 <HAL_TIM_PeriodElapsedCallback+0x10c>)
 8004cce:	781b      	ldrb	r3, [r3, #0]
 8004cd0:	2b00      	cmp	r3, #0
 8004cd2:	d005      	beq.n	8004ce0 <HAL_TIM_PeriodElapsedCallback+0x94>
						{
							PositionPulseCmd++; // Increase the pulse cmd
 8004cd4:	4b21      	ldr	r3, [pc, #132]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	3301      	adds	r3, #1
 8004cda:	4a20      	ldr	r2, [pc, #128]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004cdc:	6013      	str	r3, [r2, #0]
 8004cde:	e004      	b.n	8004cea <HAL_TIM_PeriodElapsedCallback+0x9e>
						}
						else // false: pulling up
						{
							PositionPulseCmd--; // Decrease the pulse cmd
 8004ce0:	4b1e      	ldr	r3, [pc, #120]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004ce2:	681b      	ldr	r3, [r3, #0]
 8004ce4:	3b01      	subs	r3, #1
 8004ce6:	4a1d      	ldr	r2, [pc, #116]	; (8004d5c <HAL_TIM_PeriodElapsedCallback+0x110>)
 8004ce8:	6013      	str	r3, [r2, #0]
					}
				}
		}
	}

	if (htim->Instance == TIM2) // Timer 2 interrupt, for the main control function, 1ms
 8004cea:	687b      	ldr	r3, [r7, #4]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004cf2:	d121      	bne.n	8004d38 <HAL_TIM_PeriodElapsedCallback+0xec>
		{
				// To calculate PID controller
				Timer2SampleTimeControlCount++;
 8004cf4:	4b1b      	ldr	r3, [pc, #108]	; (8004d64 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004cf6:	781b      	ldrb	r3, [r3, #0]
 8004cf8:	3301      	adds	r3, #1
 8004cfa:	b2da      	uxtb	r2, r3
 8004cfc:	4b19      	ldr	r3, [pc, #100]	; (8004d64 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004cfe:	701a      	strb	r2, [r3, #0]
				if (Timer2SampleTimeControlCount >= SampleTime) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 8004d00:	4b18      	ldr	r3, [pc, #96]	; (8004d64 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004d02:	781a      	ldrb	r2, [r3, #0]
 8004d04:	4b18      	ldr	r3, [pc, #96]	; (8004d68 <HAL_TIM_PeriodElapsedCallback+0x11c>)
 8004d06:	781b      	ldrb	r3, [r3, #0]
 8004d08:	429a      	cmp	r2, r3
 8004d0a:	d305      	bcc.n	8004d18 <HAL_TIM_PeriodElapsedCallback+0xcc>
				{		
					Timer2ControlInterrupt = true;
 8004d0c:	4b17      	ldr	r3, [pc, #92]	; (8004d6c <HAL_TIM_PeriodElapsedCallback+0x120>)
 8004d0e:	2201      	movs	r2, #1
 8004d10:	701a      	strb	r2, [r3, #0]
					Timer2SampleTimeControlCount = 0;
 8004d12:	4b14      	ldr	r3, [pc, #80]	; (8004d64 <HAL_TIM_PeriodElapsedCallback+0x118>)
 8004d14:	2200      	movs	r2, #0
 8004d16:	701a      	strb	r2, [r3, #0]
				}
			
				// To transmit the data each 50ms
				Timer2Count++;
 8004d18:	4b15      	ldr	r3, [pc, #84]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004d1a:	781b      	ldrb	r3, [r3, #0]
 8004d1c:	3301      	adds	r3, #1
 8004d1e:	b2da      	uxtb	r2, r3
 8004d20:	4b13      	ldr	r3, [pc, #76]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004d22:	701a      	strb	r2, [r3, #0]
				if (Timer2Count >= 50) // turn on the flag when the sample time reaches, fix the data sample time to 40ms
 8004d24:	4b12      	ldr	r3, [pc, #72]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004d26:	781b      	ldrb	r3, [r3, #0]
 8004d28:	2b31      	cmp	r3, #49	; 0x31
 8004d2a:	d905      	bls.n	8004d38 <HAL_TIM_PeriodElapsedCallback+0xec>
				{		
					Timer2SampleTimeInterrupt = true;
 8004d2c:	4b11      	ldr	r3, [pc, #68]	; (8004d74 <HAL_TIM_PeriodElapsedCallback+0x128>)
 8004d2e:	2201      	movs	r2, #1
 8004d30:	701a      	strb	r2, [r3, #0]
					Timer2Count = 0;					
 8004d32:	4b0f      	ldr	r3, [pc, #60]	; (8004d70 <HAL_TIM_PeriodElapsedCallback+0x124>)
 8004d34:	2200      	movs	r2, #0
 8004d36:	701a      	strb	r2, [r3, #0]
				}
		}
}
 8004d38:	3708      	adds	r7, #8
 8004d3a:	46bd      	mov	sp, r7
 8004d3c:	bd80      	pop	{r7, pc}
 8004d3e:	bf00      	nop
 8004d40:	40000400 	.word	0x40000400
 8004d44:	2000043b 	.word	0x2000043b
 8004d48:	20000452 	.word	0x20000452
 8004d4c:	20000450 	.word	0x20000450
 8004d50:	20000446 	.word	0x20000446
 8004d54:	40021000 	.word	0x40021000
 8004d58:	20000435 	.word	0x20000435
 8004d5c:	200004b8 	.word	0x200004b8
 8004d60:	40020800 	.word	0x40020800
 8004d64:	20000448 	.word	0x20000448
 8004d68:	2000045c 	.word	0x2000045c
 8004d6c:	20000437 	.word	0x20000437
 8004d70:	20000447 	.word	0x20000447
 8004d74:	20000436 	.word	0x20000436

08004d78 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004d78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004d7c:	b08f      	sub	sp, #60	; 0x3c
 8004d7e:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8004d80:	f001 fa72 	bl	8006268 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004d84:	f000 fc50 	bl	8005628 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004d88:	f000 fe28 	bl	80059dc <MX_GPIO_Init>
  MX_TIM2_Init();
 8004d8c:	f000 fce2 	bl	8005754 <MX_TIM2_Init>
  MX_UART5_Init();
 8004d90:	f000 fda6 	bl	80058e0 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8004d94:	f000 fdf8 	bl	8005988 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8004d98:	f000 fd56 	bl	8005848 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8004d9c:	f000 fdca 	bl	8005934 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004da0:	f000 fcac 	bl	80056fc <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(PE15_RELAY1_GPIO_Port, PE15_RELAY1_Pin, GPIO_PIN_SET);
 8004da4:	2201      	movs	r2, #1
 8004da6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004daa:	4899      	ldr	r0, [pc, #612]	; (8005010 <main+0x298>)
 8004dac:	f002 f948 	bl	8007040 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8004db0:	f241 3088 	movw	r0, #5000	; 0x1388
 8004db4:	f001 faca 	bl	800634c <HAL_Delay>
	
	InitParams (); // Read the saved params from the flash memory
 8004db8:	f7fe fe7e 	bl	8003ab8 <InitParams>
// PID(&TPID, &AccFb, &PIPulseCmd, &DroppingAccel, Kp, StoppingTime, 0, _PID_P_ON_E, _PID_CD_DIRECT); // Kd = 0, use PI controller	
//  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
//  PID_SetSampleTime(&TPID, Timer2Period); // the sample time is 50ms = Timer2 time interval
//  PID_SetOutputLimits(&TPID, -2000, 2000); // min PID: -2000rpm, max: 2000rpm
	
	HAL_GPIO_WritePin(PB15_485_MCU_PC_DIR_GPIO_Port, PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET); // Set Uart3 to receive Mode
 8004dbc:	2201      	movs	r2, #1
 8004dbe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004dc2:	4894      	ldr	r0, [pc, #592]	; (8005014 <main+0x29c>)
 8004dc4:	f002 f93c 	bl	8007040 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart3,&RxUart3Data,1); // Enable Interrupt
 8004dc8:	2201      	movs	r2, #1
 8004dca:	4993      	ldr	r1, [pc, #588]	; (8005018 <main+0x2a0>)
 8004dcc:	4893      	ldr	r0, [pc, #588]	; (800501c <main+0x2a4>)
 8004dce:	f003 fd72 	bl	80088b6 <HAL_UART_Receive_IT>
	
	HAL_TIM_Base_Start_IT(&htim2); // Enable Timer 2 interrupt
 8004dd2:	4893      	ldr	r0, [pc, #588]	; (8005020 <main+0x2a8>)
 8004dd4:	f002 fe10 	bl	80079f8 <HAL_TIM_Base_Start_IT>
// Not turn on timer3 at the start
//	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer 3 interrupt
	HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8004dd8:	2201      	movs	r2, #1
 8004dda:	4992      	ldr	r1, [pc, #584]	; (8005024 <main+0x2ac>)
 8004ddc:	4892      	ldr	r0, [pc, #584]	; (8005028 <main+0x2b0>)
 8004dde:	f003 fd6a 	bl	80088b6 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart4,&RxESPData,1);	
	DriverInit();
 8004de2:	f7fc fa75 	bl	80012d0 <DriverInit>
	ReadMultiRegister(StE03,5);
 8004de6:	2105      	movs	r1, #5
 8004de8:	200c      	movs	r0, #12
 8004dea:	f7fc fcaf 	bl	800174c <ReadMultiRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		
		// Process Received Cmd from the GUI
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8004dee:	4b8f      	ldr	r3, [pc, #572]	; (800502c <main+0x2b4>)
 8004df0:	781b      	ldrb	r3, [r3, #0]
 8004df2:	b2db      	uxtb	r3, r3
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d00b      	beq.n	8004e10 <main+0x98>
			{
				ExtractMotionCode();				
 8004df8:	f7fc fc4c 	bl	8001694 <ExtractMotionCode>
				ProcessReceivedCommand (); // Proceed the command
 8004dfc:	f7fe fed0 	bl	8003ba0 <ProcessReceivedCommand>
				RxUart6_Cpl_Flag=false;
 8004e00:	4b8a      	ldr	r3, [pc, #552]	; (800502c <main+0x2b4>)
 8004e02:	2200      	movs	r2, #0
 8004e04:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8004e06:	2201      	movs	r2, #1
 8004e08:	4986      	ldr	r1, [pc, #536]	; (8005024 <main+0x2ac>)
 8004e0a:	4887      	ldr	r0, [pc, #540]	; (8005028 <main+0x2b0>)
 8004e0c:	f003 fd53 	bl	80088b6 <HAL_UART_Receive_IT>
			}
		// END UART6 Process Cmd

		// Process Timer2 interrupt after a period of Sampletime
		if (Timer2ControlInterrupt)
 8004e10:	4b87      	ldr	r3, [pc, #540]	; (8005030 <main+0x2b8>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	b2db      	uxtb	r3, r3
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	f000 80a3 	beq.w	8004f62 <main+0x1ea>
		{
			Timer2ControlInterrupt = false; // Reset the flag
 8004e1c:	4b84      	ldr	r3, [pc, #528]	; (8005030 <main+0x2b8>)
 8004e1e:	2200      	movs	r2, #0
 8004e20:	701a      	strb	r2, [r3, #0]
			// BEGIN running experiment
			if (StartRunning) // Process Running Experiment
 8004e22:	4b84      	ldr	r3, [pc, #528]	; (8005034 <main+0x2bc>)
 8004e24:	781b      	ldrb	r3, [r3, #0]
 8004e26:	2b00      	cmp	r3, #0
 8004e28:	f000 809b 	beq.w	8004f62 <main+0x1ea>
			{
				switch (ExperimentMode)
 8004e2c:	4b82      	ldr	r3, [pc, #520]	; (8005038 <main+0x2c0>)
 8004e2e:	781b      	ldrb	r3, [r3, #0]
 8004e30:	2b03      	cmp	r3, #3
 8004e32:	d067      	beq.n	8004f04 <main+0x18c>
 8004e34:	2b03      	cmp	r3, #3
 8004e36:	f300 8096 	bgt.w	8004f66 <main+0x1ee>
 8004e3a:	2b01      	cmp	r3, #1
 8004e3c:	d002      	beq.n	8004e44 <main+0xcc>
 8004e3e:	2b02      	cmp	r3, #2
 8004e40:	d031      	beq.n	8004ea6 <main+0x12e>
								}
							}
						}
						break;
					default:
						break;
 8004e42:	e090      	b.n	8004f66 <main+0x1ee>
						if (Dropping()) // Dropping() return true when it finishing
 8004e44:	f7fe f9a8 	bl	8003198 <Dropping>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	f000 808d 	beq.w	8004f6a <main+0x1f2>
							if (!POSReach) // Check if position is reached or not
 8004e50:	4b7a      	ldr	r3, [pc, #488]	; (800503c <main+0x2c4>)
 8004e52:	781b      	ldrb	r3, [r3, #0]
 8004e54:	f083 0301 	eor.w	r3, r3, #1
 8004e58:	b2db      	uxtb	r3, r3
 8004e5a:	2b00      	cmp	r3, #0
 8004e5c:	f000 8085 	beq.w	8004f6a <main+0x1f2>
								if (WaitingMiliSecond(3000)) // Wait for 2 Seconds
 8004e60:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e64:	f7fc fe86 	bl	8001b74 <WaitingMiliSecond>
 8004e68:	4603      	mov	r3, r0
 8004e6a:	2b00      	cmp	r3, #0
 8004e6c:	d07d      	beq.n	8004f6a <main+0x1f2>
									StopExperiment();
 8004e6e:	f7fe fba3 	bl	80035b8 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8004e72:	4b73      	ldr	r3, [pc, #460]	; (8005040 <main+0x2c8>)
 8004e74:	781b      	ldrb	r3, [r3, #0]
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d077      	beq.n	8004f6a <main+0x1f2>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8004e7a:	221e      	movs	r2, #30
 8004e7c:	2100      	movs	r1, #0
 8004e7e:	4871      	ldr	r0, [pc, #452]	; (8005044 <main+0x2cc>)
 8004e80:	f004 fcdc 	bl	800983c <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8004e84:	4970      	ldr	r1, [pc, #448]	; (8005048 <main+0x2d0>)
 8004e86:	486f      	ldr	r0, [pc, #444]	; (8005044 <main+0x2cc>)
 8004e88:	f005 f94a 	bl	800a120 <siprintf>
 8004e8c:	4603      	mov	r3, r0
 8004e8e:	b2da      	uxtb	r2, r3
 8004e90:	4b6e      	ldr	r3, [pc, #440]	; (800504c <main+0x2d4>)
 8004e92:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004e94:	4b6d      	ldr	r3, [pc, #436]	; (800504c <main+0x2d4>)
 8004e96:	781b      	ldrb	r3, [r3, #0]
 8004e98:	b29a      	uxth	r2, r3
 8004e9a:	23c8      	movs	r3, #200	; 0xc8
 8004e9c:	4969      	ldr	r1, [pc, #420]	; (8005044 <main+0x2cc>)
 8004e9e:	4862      	ldr	r0, [pc, #392]	; (8005028 <main+0x2b0>)
 8004ea0:	f003 fc77 	bl	8008792 <HAL_UART_Transmit>
						break;
 8004ea4:	e061      	b.n	8004f6a <main+0x1f2>
						if (PullingExperiment()) // PullingExperiment() return true when it finishing
 8004ea6:	f7fd f987 	bl	80021b8 <PullingExperiment>
 8004eaa:	4603      	mov	r3, r0
 8004eac:	2b00      	cmp	r3, #0
 8004eae:	d05e      	beq.n	8004f6e <main+0x1f6>
							if (!POSReach) // Check if position is reached or not
 8004eb0:	4b62      	ldr	r3, [pc, #392]	; (800503c <main+0x2c4>)
 8004eb2:	781b      	ldrb	r3, [r3, #0]
 8004eb4:	f083 0301 	eor.w	r3, r3, #1
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d057      	beq.n	8004f6e <main+0x1f6>
								if (WaitingMiliSecond(3000)) // Wait for 2 Seconds
 8004ebe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004ec2:	f7fc fe57 	bl	8001b74 <WaitingMiliSecond>
 8004ec6:	4603      	mov	r3, r0
 8004ec8:	2b00      	cmp	r3, #0
 8004eca:	d050      	beq.n	8004f6e <main+0x1f6>
									StopExperiment();
 8004ecc:	f7fe fb74 	bl	80035b8 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8004ed0:	4b5b      	ldr	r3, [pc, #364]	; (8005040 <main+0x2c8>)
 8004ed2:	781b      	ldrb	r3, [r3, #0]
 8004ed4:	2b00      	cmp	r3, #0
 8004ed6:	d04a      	beq.n	8004f6e <main+0x1f6>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8004ed8:	221e      	movs	r2, #30
 8004eda:	2100      	movs	r1, #0
 8004edc:	4859      	ldr	r0, [pc, #356]	; (8005044 <main+0x2cc>)
 8004ede:	f004 fcad 	bl	800983c <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8004ee2:	4959      	ldr	r1, [pc, #356]	; (8005048 <main+0x2d0>)
 8004ee4:	4857      	ldr	r0, [pc, #348]	; (8005044 <main+0x2cc>)
 8004ee6:	f005 f91b 	bl	800a120 <siprintf>
 8004eea:	4603      	mov	r3, r0
 8004eec:	b2da      	uxtb	r2, r3
 8004eee:	4b57      	ldr	r3, [pc, #348]	; (800504c <main+0x2d4>)
 8004ef0:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004ef2:	4b56      	ldr	r3, [pc, #344]	; (800504c <main+0x2d4>)
 8004ef4:	781b      	ldrb	r3, [r3, #0]
 8004ef6:	b29a      	uxth	r2, r3
 8004ef8:	23c8      	movs	r3, #200	; 0xc8
 8004efa:	4952      	ldr	r1, [pc, #328]	; (8005044 <main+0x2cc>)
 8004efc:	484a      	ldr	r0, [pc, #296]	; (8005028 <main+0x2b0>)
 8004efe:	f003 fc48 	bl	8008792 <HAL_UART_Transmit>
						break;
 8004f02:	e034      	b.n	8004f6e <main+0x1f6>
						if (PullAndDrop()) // PullingExperiment() return true when it finishing
 8004f04:	f7fd fc2c 	bl	8002760 <PullAndDrop>
 8004f08:	4603      	mov	r3, r0
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d031      	beq.n	8004f72 <main+0x1fa>
							if (!POSReach) // Check if position is reached or not
 8004f0e:	4b4b      	ldr	r3, [pc, #300]	; (800503c <main+0x2c4>)
 8004f10:	781b      	ldrb	r3, [r3, #0]
 8004f12:	f083 0301 	eor.w	r3, r3, #1
 8004f16:	b2db      	uxtb	r3, r3
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d02a      	beq.n	8004f72 <main+0x1fa>
								if (WaitingMiliSecond(3000)) // Wait for 3 Seconds
 8004f1c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004f20:	f7fc fe28 	bl	8001b74 <WaitingMiliSecond>
 8004f24:	4603      	mov	r3, r0
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d023      	beq.n	8004f72 <main+0x1fa>
									StopExperiment();
 8004f2a:	f7fe fb45 	bl	80035b8 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8004f2e:	4b44      	ldr	r3, [pc, #272]	; (8005040 <main+0x2c8>)
 8004f30:	781b      	ldrb	r3, [r3, #0]
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d01d      	beq.n	8004f72 <main+0x1fa>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8004f36:	221e      	movs	r2, #30
 8004f38:	2100      	movs	r1, #0
 8004f3a:	4842      	ldr	r0, [pc, #264]	; (8005044 <main+0x2cc>)
 8004f3c:	f004 fc7e 	bl	800983c <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8004f40:	4941      	ldr	r1, [pc, #260]	; (8005048 <main+0x2d0>)
 8004f42:	4840      	ldr	r0, [pc, #256]	; (8005044 <main+0x2cc>)
 8004f44:	f005 f8ec 	bl	800a120 <siprintf>
 8004f48:	4603      	mov	r3, r0
 8004f4a:	b2da      	uxtb	r2, r3
 8004f4c:	4b3f      	ldr	r3, [pc, #252]	; (800504c <main+0x2d4>)
 8004f4e:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004f50:	4b3e      	ldr	r3, [pc, #248]	; (800504c <main+0x2d4>)
 8004f52:	781b      	ldrb	r3, [r3, #0]
 8004f54:	b29a      	uxth	r2, r3
 8004f56:	23c8      	movs	r3, #200	; 0xc8
 8004f58:	493a      	ldr	r1, [pc, #232]	; (8005044 <main+0x2cc>)
 8004f5a:	4833      	ldr	r0, [pc, #204]	; (8005028 <main+0x2b0>)
 8004f5c:	f003 fc19 	bl	8008792 <HAL_UART_Transmit>
						break;
 8004f60:	e007      	b.n	8004f72 <main+0x1fa>
				}
			}
 8004f62:	bf00      	nop
 8004f64:	e006      	b.n	8004f74 <main+0x1fc>
						break;
 8004f66:	bf00      	nop
 8004f68:	e004      	b.n	8004f74 <main+0x1fc>
						break;
 8004f6a:	bf00      	nop
 8004f6c:	e002      	b.n	8004f74 <main+0x1fc>
						break;
 8004f6e:	bf00      	nop
 8004f70:	e000      	b.n	8004f74 <main+0x1fc>
						break;
 8004f72:	bf00      	nop
		}
			// END Running Experiment
		// END Timer2ControlInterrupt
		
		// BEGIN Timer2 interrupt for sending the data
		if (Timer2SampleTimeInterrupt)
 8004f74:	4b36      	ldr	r3, [pc, #216]	; (8005050 <main+0x2d8>)
 8004f76:	781b      	ldrb	r3, [r3, #0]
 8004f78:	b2db      	uxtb	r3, r3
 8004f7a:	2b00      	cmp	r3, #0
 8004f7c:	f000 815d 	beq.w	800523a <main+0x4c2>
		{
			Timer2SampleTimeInterrupt = false;
 8004f80:	4b33      	ldr	r3, [pc, #204]	; (8005050 <main+0x2d8>)
 8004f82:	2200      	movs	r2, #0
 8004f84:	701a      	strb	r2, [r3, #0]
			
			// Read CN1-22-RDY, Check if Servo Ready or not, or Servo ON of OFF.
			// If servo is not ready or not ON, then turn off all the functions
			if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin) || HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin))
 8004f86:	2104      	movs	r1, #4
 8004f88:	4821      	ldr	r0, [pc, #132]	; (8005010 <main+0x298>)
 8004f8a:	f002 f841 	bl	8007010 <HAL_GPIO_ReadPin>
 8004f8e:	4603      	mov	r3, r0
 8004f90:	2b00      	cmp	r3, #0
 8004f92:	d106      	bne.n	8004fa2 <main+0x22a>
 8004f94:	2140      	movs	r1, #64	; 0x40
 8004f96:	481e      	ldr	r0, [pc, #120]	; (8005010 <main+0x298>)
 8004f98:	f002 f83a 	bl	8007010 <HAL_GPIO_ReadPin>
 8004f9c:	4603      	mov	r3, r0
 8004f9e:	2b00      	cmp	r3, #0
 8004fa0:	d008      	beq.n	8004fb4 <main+0x23c>
			{
				// If the servo is not ON. Then stop all the running function
				StopPulseGenerating();
 8004fa2:	f7fc fdab 	bl	8001afc <StopPulseGenerating>
				StopExperiment();				
 8004fa6:	f7fe fb07 	bl	80035b8 <StopExperiment>
				ResetPIDController();
 8004faa:	f7fc fb59 	bl	8001660 <ResetPIDController>
				IsHoming = false; // Disable Homming
 8004fae:	4b29      	ldr	r3, [pc, #164]	; (8005054 <main+0x2dc>)
 8004fb0:	2200      	movs	r2, #0
 8004fb2:	701a      	strb	r2, [r3, #0]
			}	
			
			// BEGIN Software Limit ASDA Driver
			if (!MotorDriver) // Applied for ASDA-A3 Diver since the encoder pulse only can be cleared when cycle the driver
 8004fb4:	4b28      	ldr	r3, [pc, #160]	; (8005058 <main+0x2e0>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	f083 0301 	eor.w	r3, r3, #1
 8004fbc:	b2db      	uxtb	r3, r3
 8004fbe:	2b00      	cmp	r3, #0
 8004fc0:	d054      	beq.n	800506c <main+0x2f4>
			{
				if (StartRunning && StartAccleratePulling) // Always turn on the software limit while running
 8004fc2:	4b1c      	ldr	r3, [pc, #112]	; (8005034 <main+0x2bc>)
 8004fc4:	781b      	ldrb	r3, [r3, #0]
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d010      	beq.n	8004fec <main+0x274>
 8004fca:	4b24      	ldr	r3, [pc, #144]	; (800505c <main+0x2e4>)
 8004fcc:	781b      	ldrb	r3, [r3, #0]
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00c      	beq.n	8004fec <main+0x274>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004fd2:	4b23      	ldr	r3, [pc, #140]	; (8005060 <main+0x2e8>)
 8004fd4:	681a      	ldr	r2, [r3, #0]
 8004fd6:	4b23      	ldr	r3, [pc, #140]	; (8005064 <main+0x2ec>)
 8004fd8:	681b      	ldr	r3, [r3, #0]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	2bc8      	cmp	r3, #200	; 0xc8
 8004fde:	dc05      	bgt.n	8004fec <main+0x274>
					{				
						StopPulseGenerating();
 8004fe0:	f7fc fd8c 	bl	8001afc <StopPulseGenerating>
						StopExperiment();				
 8004fe4:	f7fe fae8 	bl	80035b8 <StopExperiment>
						ResetPIDController();						
 8004fe8:	f7fc fb3a 	bl	8001660 <ResetPIDController>
					}					
				}
				if (SoftWareLimit) // Software limit is on
 8004fec:	4b1e      	ldr	r3, [pc, #120]	; (8005068 <main+0x2f0>)
 8004fee:	781b      	ldrb	r3, [r3, #0]
 8004ff0:	2b00      	cmp	r3, #0
 8004ff2:	d063      	beq.n	80050bc <main+0x344>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004ff4:	4b1a      	ldr	r3, [pc, #104]	; (8005060 <main+0x2e8>)
 8004ff6:	681a      	ldr	r2, [r3, #0]
 8004ff8:	4b1a      	ldr	r3, [pc, #104]	; (8005064 <main+0x2ec>)
 8004ffa:	681b      	ldr	r3, [r3, #0]
 8004ffc:	1ad3      	subs	r3, r2, r3
 8004ffe:	2bc8      	cmp	r3, #200	; 0xc8
 8005000:	dc5c      	bgt.n	80050bc <main+0x344>
					{				
						StopPulseGenerating();
 8005002:	f7fc fd7b 	bl	8001afc <StopPulseGenerating>
						StopExperiment();				
 8005006:	f7fe fad7 	bl	80035b8 <StopExperiment>
						ResetPIDController();						
 800500a:	f7fc fb29 	bl	8001660 <ResetPIDController>
 800500e:	e055      	b.n	80050bc <main+0x344>
 8005010:	40021000 	.word	0x40021000
 8005014:	40020400 	.word	0x40020400
 8005018:	20000406 	.word	0x20000406
 800501c:	200002f4 	.word	0x200002f4
 8005020:	20000220 	.word	0x20000220
 8005024:	20000404 	.word	0x20000404
 8005028:	20000338 	.word	0x20000338
 800502c:	2000042f 	.word	0x2000042f
 8005030:	20000437 	.word	0x20000437
 8005034:	20000434 	.word	0x20000434
 8005038:	20000004 	.word	0x20000004
 800503c:	2000043d 	.word	0x2000043d
 8005040:	20000445 	.word	0x20000445
 8005044:	20000408 	.word	0x20000408
 8005048:	0800dfe0 	.word	0x0800dfe0
 800504c:	20000426 	.word	0x20000426
 8005050:	20000436 	.word	0x20000436
 8005054:	20000443 	.word	0x20000443
 8005058:	20000003 	.word	0x20000003
 800505c:	2000043f 	.word	0x2000043f
 8005060:	200004f8 	.word	0x200004f8
 8005064:	200004b0 	.word	0x200004b0
 8005068:	20000005 	.word	0x20000005
					}	
				}
			}
			else // HIGEN FDA Driver, Software Limit Switch
			{
				if (StartRunning && StartAccleratePulling)// Always turn on the software limit while running
 800506c:	4b9a      	ldr	r3, [pc, #616]	; (80052d8 <main+0x560>)
 800506e:	781b      	ldrb	r3, [r3, #0]
 8005070:	2b00      	cmp	r3, #0
 8005072:	d011      	beq.n	8005098 <main+0x320>
 8005074:	4b99      	ldr	r3, [pc, #612]	; (80052dc <main+0x564>)
 8005076:	781b      	ldrb	r3, [r3, #0]
 8005078:	2b00      	cmp	r3, #0
 800507a:	d00d      	beq.n	8005098 <main+0x320>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 800507c:	4b98      	ldr	r3, [pc, #608]	; (80052e0 <main+0x568>)
 800507e:	681a      	ldr	r2, [r3, #0]
 8005080:	4b98      	ldr	r3, [pc, #608]	; (80052e4 <main+0x56c>)
 8005082:	681b      	ldr	r3, [r3, #0]
 8005084:	1ad3      	subs	r3, r2, r3
 8005086:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800508a:	dc05      	bgt.n	8005098 <main+0x320>
					{				
						StopPulseGenerating();
 800508c:	f7fc fd36 	bl	8001afc <StopPulseGenerating>
						StopExperiment();				
 8005090:	f7fe fa92 	bl	80035b8 <StopExperiment>
						ResetPIDController();						
 8005094:	f7fc fae4 	bl	8001660 <ResetPIDController>
					}					
				}
				if (SoftWareLimit) // Software limit is on
 8005098:	4b93      	ldr	r3, [pc, #588]	; (80052e8 <main+0x570>)
 800509a:	781b      	ldrb	r3, [r3, #0]
 800509c:	2b00      	cmp	r3, #0
 800509e:	d00d      	beq.n	80050bc <main+0x344>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 80050a0:	4b8f      	ldr	r3, [pc, #572]	; (80052e0 <main+0x568>)
 80050a2:	681a      	ldr	r2, [r3, #0]
 80050a4:	4b8f      	ldr	r3, [pc, #572]	; (80052e4 <main+0x56c>)
 80050a6:	681b      	ldr	r3, [r3, #0]
 80050a8:	1ad3      	subs	r3, r2, r3
 80050aa:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 80050ae:	dc05      	bgt.n	80050bc <main+0x344>
					{				
						StopPulseGenerating();
 80050b0:	f7fc fd24 	bl	8001afc <StopPulseGenerating>
						StopExperiment();				
 80050b4:	f7fe fa80 	bl	80035b8 <StopExperiment>
						ResetPIDController();						
 80050b8:	f7fc fad2 	bl	8001660 <ResetPIDController>
					}	
				}				
			}
			// END Software Limit ASDA Driver
			//BEGIN Homing
			if (IsHoming)
 80050bc:	4b8b      	ldr	r3, [pc, #556]	; (80052ec <main+0x574>)
 80050be:	781b      	ldrb	r3, [r3, #0]
 80050c0:	2b00      	cmp	r3, #0
 80050c2:	d009      	beq.n	80050d8 <main+0x360>
			{
				if(CheckGoingToRefPosition(false, 100)) // false = go up, 0 = home position
 80050c4:	2164      	movs	r1, #100	; 0x64
 80050c6:	2000      	movs	r0, #0
 80050c8:	f7fc fe06 	bl	8001cd8 <CheckGoingToRefPosition>
 80050cc:	4603      	mov	r3, r0
 80050ce:	2b00      	cmp	r3, #0
 80050d0:	d002      	beq.n	80050d8 <main+0x360>
				{
					IsHoming = false; // finish homing
 80050d2:	4b86      	ldr	r3, [pc, #536]	; (80052ec <main+0x574>)
 80050d4:	2200      	movs	r2, #0
 80050d6:	701a      	strb	r2, [r3, #0]
				}
			}
			//END Homing
			
			// BEGIN Send data to the UI
			if (UIDataRequest)
 80050d8:	4b85      	ldr	r3, [pc, #532]	; (80052f0 <main+0x578>)
 80050da:	781b      	ldrb	r3, [r3, #0]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d07d      	beq.n	80051dc <main+0x464>
			{
				if (PositionControlMode) // Position Mode, read both Position and Speed, Send both Position and Speed
 80050e0:	4b84      	ldr	r3, [pc, #528]	; (80052f4 <main+0x57c>)
 80050e2:	781b      	ldrb	r3, [r3, #0]
 80050e4:	2b00      	cmp	r3, #0
 80050e6:	d079      	beq.n	80051dc <main+0x464>
				{
					memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset					
 80050e8:	221e      	movs	r2, #30
 80050ea:	2100      	movs	r1, #0
 80050ec:	4882      	ldr	r0, [pc, #520]	; (80052f8 <main+0x580>)
 80050ee:	f004 fba5 	bl	800983c <memset>
					if (MotorDriver) // FDA7000 Driver
 80050f2:	4b82      	ldr	r3, [pc, #520]	; (80052fc <main+0x584>)
 80050f4:	781b      	ldrb	r3, [r3, #0]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d038      	beq.n	800516c <main+0x3f4>
					{
						
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PositionPulseCmd*EgearRatio); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError);
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 80050fa:	4b81      	ldr	r3, [pc, #516]	; (8005300 <main+0x588>)
 80050fc:	681b      	ldr	r3, [r3, #0]
 80050fe:	4618      	mov	r0, r3
 8005100:	f7fb fa22 	bl	8000548 <__aeabi_f2d>
 8005104:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005108:	4b7e      	ldr	r3, [pc, #504]	; (8005304 <main+0x58c>)
 800510a:	681b      	ldr	r3, [r3, #0]
 800510c:	4618      	mov	r0, r3
 800510e:	f7fb fa1b 	bl	8000548 <__aeabi_f2d>
 8005112:	4680      	mov	r8, r0
 8005114:	4689      	mov	r9, r1
 8005116:	4b7c      	ldr	r3, [pc, #496]	; (8005308 <main+0x590>)
 8005118:	681b      	ldr	r3, [r3, #0]
 800511a:	4618      	mov	r0, r3
 800511c:	f7fb fa14 	bl	8000548 <__aeabi_f2d>
 8005120:	4682      	mov	sl, r0
 8005122:	468b      	mov	fp, r1
 8005124:	4b79      	ldr	r3, [pc, #484]	; (800530c <main+0x594>)
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	4618      	mov	r0, r3
 800512a:	f7fb fa0d 	bl	8000548 <__aeabi_f2d>
 800512e:	4602      	mov	r2, r0
 8005130:	460b      	mov	r3, r1
 8005132:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005136:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800513a:	e9cd 8900 	strd	r8, r9, [sp]
 800513e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005142:	4973      	ldr	r1, [pc, #460]	; (8005310 <main+0x598>)
 8005144:	486c      	ldr	r0, [pc, #432]	; (80052f8 <main+0x580>)
 8005146:	f004 ffeb 	bl	800a120 <siprintf>
 800514a:	4603      	mov	r3, r0
 800514c:	b2da      	uxtb	r2, r3
 800514e:	4b71      	ldr	r3, [pc, #452]	; (8005314 <main+0x59c>)
 8005150:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio 
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005152:	4b70      	ldr	r3, [pc, #448]	; (8005314 <main+0x59c>)
 8005154:	781b      	ldrb	r3, [r3, #0]
 8005156:	b29a      	uxth	r2, r3
 8005158:	23c8      	movs	r3, #200	; 0xc8
 800515a:	4967      	ldr	r1, [pc, #412]	; (80052f8 <main+0x580>)
 800515c:	486e      	ldr	r0, [pc, #440]	; (8005318 <main+0x5a0>)
 800515e:	f003 fb18 	bl	8008792 <HAL_UART_Transmit>
						ReadMultiRegister(StE03,6); // Read from StE03 -> StE08
 8005162:	2106      	movs	r1, #6
 8005164:	200c      	movs	r0, #12
 8005166:	f7fc faf1 	bl	800174c <ReadMultiRegister>
 800516a:	e037      	b.n	80051dc <main+0x464>
					}
					else // ASDA-A3 Driver
					{
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%d/%.1f/%.1fe",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError,AccZ,AccRef); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 800516c:	4b64      	ldr	r3, [pc, #400]	; (8005300 <main+0x588>)
 800516e:	681b      	ldr	r3, [r3, #0]
 8005170:	4618      	mov	r0, r3
 8005172:	f7fb f9e9 	bl	8000548 <__aeabi_f2d>
 8005176:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800517a:	4b62      	ldr	r3, [pc, #392]	; (8005304 <main+0x58c>)
 800517c:	681b      	ldr	r3, [r3, #0]
 800517e:	4618      	mov	r0, r3
 8005180:	f7fb f9e2 	bl	8000548 <__aeabi_f2d>
 8005184:	4680      	mov	r8, r0
 8005186:	4689      	mov	r9, r1
 8005188:	4b5f      	ldr	r3, [pc, #380]	; (8005308 <main+0x590>)
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	4618      	mov	r0, r3
 800518e:	f7fb f9db 	bl	8000548 <__aeabi_f2d>
 8005192:	4682      	mov	sl, r0
 8005194:	468b      	mov	fp, r1
 8005196:	4b5d      	ldr	r3, [pc, #372]	; (800530c <main+0x594>)
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	4618      	mov	r0, r3
 800519c:	f7fb f9d4 	bl	8000548 <__aeabi_f2d>
 80051a0:	4602      	mov	r2, r0
 80051a2:	460b      	mov	r3, r1
 80051a4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80051a8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80051ac:	e9cd 8900 	strd	r8, r9, [sp]
 80051b0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80051b4:	4956      	ldr	r1, [pc, #344]	; (8005310 <main+0x598>)
 80051b6:	4850      	ldr	r0, [pc, #320]	; (80052f8 <main+0x580>)
 80051b8:	f004 ffb2 	bl	800a120 <siprintf>
 80051bc:	4603      	mov	r3, r0
 80051be:	b2da      	uxtb	r2, r3
 80051c0:	4b54      	ldr	r3, [pc, #336]	; (8005314 <main+0x59c>)
 80051c2:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio 
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 80051c4:	4b53      	ldr	r3, [pc, #332]	; (8005314 <main+0x59c>)
 80051c6:	781b      	ldrb	r3, [r3, #0]
 80051c8:	b29a      	uxth	r2, r3
 80051ca:	23c8      	movs	r3, #200	; 0xc8
 80051cc:	494a      	ldr	r1, [pc, #296]	; (80052f8 <main+0x580>)
 80051ce:	4852      	ldr	r0, [pc, #328]	; (8005318 <main+0x5a0>)
 80051d0:	f003 fadf 	bl	8008792 <HAL_UART_Transmit>
						// Read 4 words start from 0x012 to 0x015
						// Encoder pulse: 0x012 + 0x013 (2 words)
						// Motor Speed: 0x014 + 0x015 (2 words)
						// Pulse Error: (2 word)
						// Total is 6 words, 1word = 4 bytes
						ReadMultiRegister(ASDA_MotorSpeed,6); 
 80051d4:	2106      	movs	r1, #6
 80051d6:	2012      	movs	r0, #18
 80051d8:	f7fc fab8 	bl	800174c <ReadMultiRegister>
					}					
				}
			}
			if(OutputDataRequest)
 80051dc:	4b4f      	ldr	r3, [pc, #316]	; (800531c <main+0x5a4>)
 80051de:	781b      	ldrb	r3, [r3, #0]
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d02a      	beq.n	800523a <main+0x4c2>
				{
					CountTimerDriverOutput++;
 80051e4:	4b4e      	ldr	r3, [pc, #312]	; (8005320 <main+0x5a8>)
 80051e6:	881b      	ldrh	r3, [r3, #0]
 80051e8:	3301      	adds	r3, #1
 80051ea:	b29a      	uxth	r2, r3
 80051ec:	4b4c      	ldr	r3, [pc, #304]	; (8005320 <main+0x5a8>)
 80051ee:	801a      	strh	r2, [r3, #0]
					if (CountTimerDriverOutput >= 15) // 20*25=500 ms, timer 2 period is 1ms
 80051f0:	4b4b      	ldr	r3, [pc, #300]	; (8005320 <main+0x5a8>)
 80051f2:	881b      	ldrh	r3, [r3, #0]
 80051f4:	2b0e      	cmp	r3, #14
 80051f6:	d920      	bls.n	800523a <main+0x4c2>
					{
						DriverOutput = ReadLogicF7000Out(); // Read Driver Output
 80051f8:	f7fc f8aa 	bl	8001350 <ReadLogicF7000Out>
 80051fc:	4603      	mov	r3, r0
 80051fe:	461a      	mov	r2, r3
 8005200:	4b48      	ldr	r3, [pc, #288]	; (8005324 <main+0x5ac>)
 8005202:	801a      	strh	r2, [r3, #0]
						
						memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005204:	221e      	movs	r2, #30
 8005206:	2100      	movs	r1, #0
 8005208:	483b      	ldr	r0, [pc, #236]	; (80052f8 <main+0x580>)
 800520a:	f004 fb17 	bl	800983c <memset>
						TxPCLen = sprintf(TxPCBuff,"o%de",DriverOutput); // 1 means only the driver outputs
 800520e:	4b45      	ldr	r3, [pc, #276]	; (8005324 <main+0x5ac>)
 8005210:	881b      	ldrh	r3, [r3, #0]
 8005212:	461a      	mov	r2, r3
 8005214:	4944      	ldr	r1, [pc, #272]	; (8005328 <main+0x5b0>)
 8005216:	4838      	ldr	r0, [pc, #224]	; (80052f8 <main+0x580>)
 8005218:	f004 ff82 	bl	800a120 <siprintf>
 800521c:	4603      	mov	r3, r0
 800521e:	b2da      	uxtb	r2, r3
 8005220:	4b3c      	ldr	r3, [pc, #240]	; (8005314 <main+0x59c>)
 8005222:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005224:	4b3b      	ldr	r3, [pc, #236]	; (8005314 <main+0x59c>)
 8005226:	781b      	ldrb	r3, [r3, #0]
 8005228:	b29a      	uxth	r2, r3
 800522a:	23c8      	movs	r3, #200	; 0xc8
 800522c:	4932      	ldr	r1, [pc, #200]	; (80052f8 <main+0x580>)
 800522e:	483a      	ldr	r0, [pc, #232]	; (8005318 <main+0x5a0>)
 8005230:	f003 faaf 	bl	8008792 <HAL_UART_Transmit>
						
						CountTimerDriverOutput = 0;
 8005234:	4b3a      	ldr	r3, [pc, #232]	; (8005320 <main+0x5a8>)
 8005236:	2200      	movs	r2, #0
 8005238:	801a      	strh	r2, [r3, #0]
			// END Send data to the UI				
		}
		// END 50ms period interrupt
		
		// BEGIN Uart3 receive complete
		if (RxUart3_Cpl_Flag)
 800523a:	4b3c      	ldr	r3, [pc, #240]	; (800532c <main+0x5b4>)
 800523c:	781b      	ldrb	r3, [r3, #0]
 800523e:	b2db      	uxtb	r3, r3
 8005240:	2b00      	cmp	r3, #0
 8005242:	d03b      	beq.n	80052bc <main+0x544>
		{
			RxUart3_Cpl_Flag = false;			
 8005244:	4b39      	ldr	r3, [pc, #228]	; (800532c <main+0x5b4>)
 8005246:	2200      	movs	r2, #0
 8005248:	701a      	strb	r2, [r3, #0]
//			else 
//			{
//				AccZ = AccZ + 10;
//			}

			memset (AccZDataRegion, '\0', sizeof (AccZDataRegion)); // reset buffer
 800524a:	220a      	movs	r2, #10
 800524c:	2100      	movs	r1, #0
 800524e:	4838      	ldr	r0, [pc, #224]	; (8005330 <main+0x5b8>)
 8005250:	f004 faf4 	bl	800983c <memset>
			
			for (uint8_t i = 0; i<= sizeof(RxUart3Buff); i++) // Remove the null byte
 8005254:	2300      	movs	r3, #0
 8005256:	75fb      	strb	r3, [r7, #23]
 8005258:	e00f      	b.n	800527a <main+0x502>
			{
				if (RxUart3Buff[i] != 0x00)
 800525a:	7dfb      	ldrb	r3, [r7, #23]
 800525c:	4a35      	ldr	r2, [pc, #212]	; (8005334 <main+0x5bc>)
 800525e:	5cd3      	ldrb	r3, [r2, r3]
 8005260:	b2db      	uxtb	r3, r3
 8005262:	2b00      	cmp	r3, #0
 8005264:	d006      	beq.n	8005274 <main+0x4fc>
				{
					AccZDataRegion[i] = RxUart3Buff[i];
 8005266:	7dfa      	ldrb	r2, [r7, #23]
 8005268:	7dfb      	ldrb	r3, [r7, #23]
 800526a:	4932      	ldr	r1, [pc, #200]	; (8005334 <main+0x5bc>)
 800526c:	5c8a      	ldrb	r2, [r1, r2]
 800526e:	b2d1      	uxtb	r1, r2
 8005270:	4a2f      	ldr	r2, [pc, #188]	; (8005330 <main+0x5b8>)
 8005272:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i<= sizeof(RxUart3Buff); i++) // Remove the null byte
 8005274:	7dfb      	ldrb	r3, [r7, #23]
 8005276:	3301      	adds	r3, #1
 8005278:	75fb      	strb	r3, [r7, #23]
 800527a:	7dfb      	ldrb	r3, [r7, #23]
 800527c:	2b0a      	cmp	r3, #10
 800527e:	d9ec      	bls.n	800525a <main+0x4e2>
				}
			}
			if (fabs(atof((char *)RxUart3Buff)) <= 100)
 8005280:	482c      	ldr	r0, [pc, #176]	; (8005334 <main+0x5bc>)
 8005282:	f004 faad 	bl	80097e0 <atof>
 8005286:	ec53 2b10 	vmov	r2, r3, d0
 800528a:	4614      	mov	r4, r2
 800528c:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 8005290:	f04f 0200 	mov.w	r2, #0
 8005294:	4b28      	ldr	r3, [pc, #160]	; (8005338 <main+0x5c0>)
 8005296:	4620      	mov	r0, r4
 8005298:	4629      	mov	r1, r5
 800529a:	f7fb fc29 	bl	8000af0 <__aeabi_dcmple>
 800529e:	4603      	mov	r3, r0
 80052a0:	2b00      	cmp	r3, #0
 80052a2:	d00b      	beq.n	80052bc <main+0x544>
			{
				AccZ = atof((char *)RxUart3Buff);
 80052a4:	4823      	ldr	r0, [pc, #140]	; (8005334 <main+0x5bc>)
 80052a6:	f004 fa9b 	bl	80097e0 <atof>
 80052aa:	ec53 2b10 	vmov	r2, r3, d0
 80052ae:	4610      	mov	r0, r2
 80052b0:	4619      	mov	r1, r3
 80052b2:	f7fb fc99 	bl	8000be8 <__aeabi_d2f>
 80052b6:	4603      	mov	r3, r0
 80052b8:	4a20      	ldr	r2, [pc, #128]	; (800533c <main+0x5c4>)
 80052ba:	6013      	str	r3, [r2, #0]
//			//HAL_UART_Receive_IT(&huart4,&RxESPData,1);
//		}
// 	 End UART4 (ESP32) process
		
		// BEGIN Process Driver Received Data
		if (RxUart5_Cpl_Flag) // Complete receive data from the driver
 80052bc:	4b20      	ldr	r3, [pc, #128]	; (8005340 <main+0x5c8>)
 80052be:	781b      	ldrb	r3, [r3, #0]
 80052c0:	b2db      	uxtb	r3, r3
 80052c2:	2b00      	cmp	r3, #0
 80052c4:	f43f ad93 	beq.w	8004dee <main+0x76>
			{
				RxUart5_Cpl_Flag = false;
 80052c8:	4b1d      	ldr	r3, [pc, #116]	; (8005340 <main+0x5c8>)
 80052ca:	2200      	movs	r2, #0
 80052cc:	701a      	strb	r2, [r3, #0]
				
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 80052ce:	4b1d      	ldr	r3, [pc, #116]	; (8005344 <main+0x5cc>)
 80052d0:	2200      	movs	r2, #0
 80052d2:	701a      	strb	r2, [r3, #0]
 80052d4:	e145      	b.n	8005562 <main+0x7ea>
 80052d6:	bf00      	nop
 80052d8:	20000434 	.word	0x20000434
 80052dc:	2000043f 	.word	0x2000043f
 80052e0:	200004f8 	.word	0x200004f8
 80052e4:	200004b0 	.word	0x200004b0
 80052e8:	20000005 	.word	0x20000005
 80052ec:	20000443 	.word	0x20000443
 80052f0:	20000438 	.word	0x20000438
 80052f4:	20000002 	.word	0x20000002
 80052f8:	20000408 	.word	0x20000408
 80052fc:	20000003 	.word	0x20000003
 8005300:	200004f0 	.word	0x200004f0
 8005304:	200004fc 	.word	0x200004fc
 8005308:	20000544 	.word	0x20000544
 800530c:	2000000c 	.word	0x2000000c
 8005310:	0800dfe4 	.word	0x0800dfe4
 8005314:	20000426 	.word	0x20000426
 8005318:	20000338 	.word	0x20000338
 800531c:	20000001 	.word	0x20000001
 8005320:	2000044c 	.word	0x2000044c
 8005324:	2000044e 	.word	0x2000044e
 8005328:	0800dffc 	.word	0x0800dffc
 800532c:	20000431 	.word	0x20000431
 8005330:	200003d0 	.word	0x200003d0
 8005334:	200003c4 	.word	0x200003c4
 8005338:	40590000 	.word	0x40590000
 800533c:	20000538 	.word	0x20000538
 8005340:	20000430 	.word	0x20000430
 8005344:	20000427 	.word	0x20000427
				{
					if (RxDriverBuff[i] == DriverID)
 8005348:	4ba5      	ldr	r3, [pc, #660]	; (80055e0 <main+0x868>)
 800534a:	781b      	ldrb	r3, [r3, #0]
 800534c:	461a      	mov	r2, r3
 800534e:	4ba5      	ldr	r3, [pc, #660]	; (80055e4 <main+0x86c>)
 8005350:	5c9b      	ldrb	r3, [r3, r2]
 8005352:	b2db      	uxtb	r3, r3
 8005354:	2b01      	cmp	r3, #1
 8005356:	f040 80fe 	bne.w	8005556 <main+0x7de>
					{
						if (RxDriverBuff[1+i] == 3)
 800535a:	4ba1      	ldr	r3, [pc, #644]	; (80055e0 <main+0x868>)
 800535c:	781b      	ldrb	r3, [r3, #0]
 800535e:	3301      	adds	r3, #1
 8005360:	4aa0      	ldr	r2, [pc, #640]	; (80055e4 <main+0x86c>)
 8005362:	5cd3      	ldrb	r3, [r2, r3]
 8005364:	b2db      	uxtb	r3, r3
 8005366:	2b03      	cmp	r3, #3
 8005368:	f040 80ad 	bne.w	80054c6 <main+0x74e>
						{							
							if (MotorDriver) // FDA7000
 800536c:	4b9e      	ldr	r3, [pc, #632]	; (80055e8 <main+0x870>)
 800536e:	781b      	ldrb	r3, [r3, #0]
 8005370:	2b00      	cmp	r3, #0
 8005372:	d044      	beq.n	80053fe <main+0x686>
							{	
								SpeedValueRegion[0] = RxDriverBuff[6+i];
 8005374:	4b9a      	ldr	r3, [pc, #616]	; (80055e0 <main+0x868>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	3306      	adds	r3, #6
 800537a:	4a9a      	ldr	r2, [pc, #616]	; (80055e4 <main+0x86c>)
 800537c:	5cd3      	ldrb	r3, [r2, r3]
 800537e:	b2da      	uxtb	r2, r3
 8005380:	4b9a      	ldr	r3, [pc, #616]	; (80055ec <main+0x874>)
 8005382:	701a      	strb	r2, [r3, #0]
								SpeedValueRegion[1] = RxDriverBuff[5+i];
 8005384:	4b96      	ldr	r3, [pc, #600]	; (80055e0 <main+0x868>)
 8005386:	781b      	ldrb	r3, [r3, #0]
 8005388:	3305      	adds	r3, #5
 800538a:	4a96      	ldr	r2, [pc, #600]	; (80055e4 <main+0x86c>)
 800538c:	5cd3      	ldrb	r3, [r2, r3]
 800538e:	b2da      	uxtb	r2, r3
 8005390:	4b96      	ldr	r3, [pc, #600]	; (80055ec <main+0x874>)
 8005392:	705a      	strb	r2, [r3, #1]
								SpeedValueRegion[2] = RxDriverBuff[4+i];
 8005394:	4b92      	ldr	r3, [pc, #584]	; (80055e0 <main+0x868>)
 8005396:	781b      	ldrb	r3, [r3, #0]
 8005398:	3304      	adds	r3, #4
 800539a:	4a92      	ldr	r2, [pc, #584]	; (80055e4 <main+0x86c>)
 800539c:	5cd3      	ldrb	r3, [r2, r3]
 800539e:	b2da      	uxtb	r2, r3
 80053a0:	4b92      	ldr	r3, [pc, #584]	; (80055ec <main+0x874>)
 80053a2:	709a      	strb	r2, [r3, #2]
								SpeedValueRegion[3] = RxDriverBuff[3+i];
 80053a4:	4b8e      	ldr	r3, [pc, #568]	; (80055e0 <main+0x868>)
 80053a6:	781b      	ldrb	r3, [r3, #0]
 80053a8:	3303      	adds	r3, #3
 80053aa:	4a8e      	ldr	r2, [pc, #568]	; (80055e4 <main+0x86c>)
 80053ac:	5cd3      	ldrb	r3, [r2, r3]
 80053ae:	b2da      	uxtb	r2, r3
 80053b0:	4b8e      	ldr	r3, [pc, #568]	; (80055ec <main+0x874>)
 80053b2:	70da      	strb	r2, [r3, #3]
 80053b4:	4b8d      	ldr	r3, [pc, #564]	; (80055ec <main+0x874>)
 80053b6:	681b      	ldr	r3, [r3, #0]
								
								memcpy(&MotorSpeed, SpeedValueRegion, 4);		
 80053b8:	4a8d      	ldr	r2, [pc, #564]	; (80055f0 <main+0x878>)
 80053ba:	6013      	str	r3, [r2, #0]
//								{
//									MotorSpeed = MotorSpeedBuff;
//								}
								
								
								MotorEncPulse = (RxDriverBuff[19+i] << 24) | (RxDriverBuff[20+i] << 16) | (RxDriverBuff[21+i] << 8) | RxDriverBuff[22+i];								
 80053bc:	4b88      	ldr	r3, [pc, #544]	; (80055e0 <main+0x868>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	3313      	adds	r3, #19
 80053c2:	4a88      	ldr	r2, [pc, #544]	; (80055e4 <main+0x86c>)
 80053c4:	5cd3      	ldrb	r3, [r2, r3]
 80053c6:	b2db      	uxtb	r3, r3
 80053c8:	061a      	lsls	r2, r3, #24
 80053ca:	4b85      	ldr	r3, [pc, #532]	; (80055e0 <main+0x868>)
 80053cc:	781b      	ldrb	r3, [r3, #0]
 80053ce:	3314      	adds	r3, #20
 80053d0:	4984      	ldr	r1, [pc, #528]	; (80055e4 <main+0x86c>)
 80053d2:	5ccb      	ldrb	r3, [r1, r3]
 80053d4:	b2db      	uxtb	r3, r3
 80053d6:	041b      	lsls	r3, r3, #16
 80053d8:	431a      	orrs	r2, r3
 80053da:	4b81      	ldr	r3, [pc, #516]	; (80055e0 <main+0x868>)
 80053dc:	781b      	ldrb	r3, [r3, #0]
 80053de:	3315      	adds	r3, #21
 80053e0:	4980      	ldr	r1, [pc, #512]	; (80055e4 <main+0x86c>)
 80053e2:	5ccb      	ldrb	r3, [r1, r3]
 80053e4:	b2db      	uxtb	r3, r3
 80053e6:	021b      	lsls	r3, r3, #8
 80053e8:	4313      	orrs	r3, r2
 80053ea:	4a7d      	ldr	r2, [pc, #500]	; (80055e0 <main+0x868>)
 80053ec:	7812      	ldrb	r2, [r2, #0]
 80053ee:	3216      	adds	r2, #22
 80053f0:	497c      	ldr	r1, [pc, #496]	; (80055e4 <main+0x86c>)
 80053f2:	5c8a      	ldrb	r2, [r1, r2]
 80053f4:	b2d2      	uxtb	r2, r2
 80053f6:	4313      	orrs	r3, r2
 80053f8:	4a7e      	ldr	r2, [pc, #504]	; (80055f4 <main+0x87c>)
 80053fa:	6013      	str	r3, [r2, #0]
 80053fc:	e059      	b.n	80054b2 <main+0x73a>
								
								//PulseError = (RxDriverBuff[23+i] << 24) | (RxDriverBuff[24+i] << 16) | (RxDriverBuff[25+i] << 8) | RxDriverBuff[26+i];
							}
							else // ASDA-A3
							{								
								MotorSpeedBuff = (float)((RxDriverBuff[5+i] << 24) | (RxDriverBuff[6+i] << 16) | (RxDriverBuff[3+i] << 8) | RxDriverBuff[4+i])/((float)-10.0); // Minus to Reverse
 80053fe:	4b78      	ldr	r3, [pc, #480]	; (80055e0 <main+0x868>)
 8005400:	781b      	ldrb	r3, [r3, #0]
 8005402:	3305      	adds	r3, #5
 8005404:	4a77      	ldr	r2, [pc, #476]	; (80055e4 <main+0x86c>)
 8005406:	5cd3      	ldrb	r3, [r2, r3]
 8005408:	b2db      	uxtb	r3, r3
 800540a:	061a      	lsls	r2, r3, #24
 800540c:	4b74      	ldr	r3, [pc, #464]	; (80055e0 <main+0x868>)
 800540e:	781b      	ldrb	r3, [r3, #0]
 8005410:	3306      	adds	r3, #6
 8005412:	4974      	ldr	r1, [pc, #464]	; (80055e4 <main+0x86c>)
 8005414:	5ccb      	ldrb	r3, [r1, r3]
 8005416:	b2db      	uxtb	r3, r3
 8005418:	041b      	lsls	r3, r3, #16
 800541a:	431a      	orrs	r2, r3
 800541c:	4b70      	ldr	r3, [pc, #448]	; (80055e0 <main+0x868>)
 800541e:	781b      	ldrb	r3, [r3, #0]
 8005420:	3303      	adds	r3, #3
 8005422:	4970      	ldr	r1, [pc, #448]	; (80055e4 <main+0x86c>)
 8005424:	5ccb      	ldrb	r3, [r1, r3]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	021b      	lsls	r3, r3, #8
 800542a:	4313      	orrs	r3, r2
 800542c:	4a6c      	ldr	r2, [pc, #432]	; (80055e0 <main+0x868>)
 800542e:	7812      	ldrb	r2, [r2, #0]
 8005430:	3204      	adds	r2, #4
 8005432:	496c      	ldr	r1, [pc, #432]	; (80055e4 <main+0x86c>)
 8005434:	5c8a      	ldrb	r2, [r1, r2]
 8005436:	b2d2      	uxtb	r2, r2
 8005438:	4313      	orrs	r3, r2
 800543a:	ee07 3a90 	vmov	s15, r3
 800543e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005442:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8005446:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800544a:	4b6b      	ldr	r3, [pc, #428]	; (80055f8 <main+0x880>)
 800544c:	edc3 7a00 	vstr	s15, [r3]
								
								if (fabs(MotorSpeedBuff) <= 2000)
 8005450:	4b69      	ldr	r3, [pc, #420]	; (80055f8 <main+0x880>)
 8005452:	edd3 7a00 	vldr	s15, [r3]
 8005456:	eef0 7ae7 	vabs.f32	s15, s15
 800545a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 80055fc <main+0x884>
 800545e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8005462:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8005466:	d803      	bhi.n	8005470 <main+0x6f8>
								{
									MotorSpeed = MotorSpeedBuff;
 8005468:	4b63      	ldr	r3, [pc, #396]	; (80055f8 <main+0x880>)
 800546a:	681b      	ldr	r3, [r3, #0]
 800546c:	4a60      	ldr	r2, [pc, #384]	; (80055f0 <main+0x878>)
 800546e:	6013      	str	r3, [r2, #0]
								}
								
								MotorEncPulse = -((RxDriverBuff[9+i] << 24) | (RxDriverBuff[10+i] << 16) | (RxDriverBuff[7+i] << 8) | RxDriverBuff[8+i]); // Minus to Reverse
 8005470:	4b5b      	ldr	r3, [pc, #364]	; (80055e0 <main+0x868>)
 8005472:	781b      	ldrb	r3, [r3, #0]
 8005474:	3309      	adds	r3, #9
 8005476:	4a5b      	ldr	r2, [pc, #364]	; (80055e4 <main+0x86c>)
 8005478:	5cd3      	ldrb	r3, [r2, r3]
 800547a:	b2db      	uxtb	r3, r3
 800547c:	061a      	lsls	r2, r3, #24
 800547e:	4b58      	ldr	r3, [pc, #352]	; (80055e0 <main+0x868>)
 8005480:	781b      	ldrb	r3, [r3, #0]
 8005482:	330a      	adds	r3, #10
 8005484:	4957      	ldr	r1, [pc, #348]	; (80055e4 <main+0x86c>)
 8005486:	5ccb      	ldrb	r3, [r1, r3]
 8005488:	b2db      	uxtb	r3, r3
 800548a:	041b      	lsls	r3, r3, #16
 800548c:	431a      	orrs	r2, r3
 800548e:	4b54      	ldr	r3, [pc, #336]	; (80055e0 <main+0x868>)
 8005490:	781b      	ldrb	r3, [r3, #0]
 8005492:	3307      	adds	r3, #7
 8005494:	4953      	ldr	r1, [pc, #332]	; (80055e4 <main+0x86c>)
 8005496:	5ccb      	ldrb	r3, [r1, r3]
 8005498:	b2db      	uxtb	r3, r3
 800549a:	021b      	lsls	r3, r3, #8
 800549c:	4313      	orrs	r3, r2
 800549e:	4a50      	ldr	r2, [pc, #320]	; (80055e0 <main+0x868>)
 80054a0:	7812      	ldrb	r2, [r2, #0]
 80054a2:	3208      	adds	r2, #8
 80054a4:	494f      	ldr	r1, [pc, #316]	; (80055e4 <main+0x86c>)
 80054a6:	5c8a      	ldrb	r2, [r1, r2]
 80054a8:	b2d2      	uxtb	r2, r2
 80054aa:	4313      	orrs	r3, r2
 80054ac:	425b      	negs	r3, r3
 80054ae:	4a51      	ldr	r2, [pc, #324]	; (80055f4 <main+0x87c>)
 80054b0:	6013      	str	r3, [r2, #0]
								//PulseError = ((RxDriverBuff[13+i] << 24) | (RxDriverBuff[14+i] << 16) | (RxDriverBuff[11+i] << 8) | RxDriverBuff[12+i]);
								
								//ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/AsdaEncoderResolution; // Calculate Object Position in m
							}			
							
							memset (RxDriverBuff, '\0', sizeof (RxDriverBuff)); // reset buffer
 80054b2:	221e      	movs	r2, #30
 80054b4:	2100      	movs	r1, #0
 80054b6:	484b      	ldr	r0, [pc, #300]	; (80055e4 <main+0x86c>)
 80054b8:	f004 f9c0 	bl	800983c <memset>
							HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte for the next time
 80054bc:	2201      	movs	r2, #1
 80054be:	4950      	ldr	r1, [pc, #320]	; (8005600 <main+0x888>)
 80054c0:	4850      	ldr	r0, [pc, #320]	; (8005604 <main+0x88c>)
 80054c2:	f003 f9f8 	bl	80088b6 <HAL_UART_Receive_IT>
						}
						if (RxDriverBuff[1] == 6) // Writing to a register
 80054c6:	4b47      	ldr	r3, [pc, #284]	; (80055e4 <main+0x86c>)
 80054c8:	785b      	ldrb	r3, [r3, #1]
 80054ca:	b2db      	uxtb	r3, r3
 80054cc:	2b06      	cmp	r3, #6
 80054ce:	d142      	bne.n	8005556 <main+0x7de>
						{
							// Send to PC to check the writing result
							memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 80054d0:	221e      	movs	r2, #30
 80054d2:	2100      	movs	r1, #0
 80054d4:	484c      	ldr	r0, [pc, #304]	; (8005608 <main+0x890>)
 80054d6:	f004 f9b1 	bl	800983c <memset>
							TxPCLen = sprintf(TxPCBuff,"w%d/%d/%d/%d/%d/%d/%d/%d/%d/e",RxDriverBuff[0],RxDriverBuff[1],RxDriverBuff[2],RxDriverBuff[3],RxDriverBuff[4],RxDriverBuff[5],RxDriverBuff[6],RxDriverBuff[7],RxDriverBuff[8]); 
 80054da:	4b42      	ldr	r3, [pc, #264]	; (80055e4 <main+0x86c>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	b2db      	uxtb	r3, r3
 80054e0:	469c      	mov	ip, r3
 80054e2:	4b40      	ldr	r3, [pc, #256]	; (80055e4 <main+0x86c>)
 80054e4:	785b      	ldrb	r3, [r3, #1]
 80054e6:	b2db      	uxtb	r3, r3
 80054e8:	469e      	mov	lr, r3
 80054ea:	4b3e      	ldr	r3, [pc, #248]	; (80055e4 <main+0x86c>)
 80054ec:	789b      	ldrb	r3, [r3, #2]
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	461a      	mov	r2, r3
 80054f2:	4b3c      	ldr	r3, [pc, #240]	; (80055e4 <main+0x86c>)
 80054f4:	78db      	ldrb	r3, [r3, #3]
 80054f6:	b2db      	uxtb	r3, r3
 80054f8:	4619      	mov	r1, r3
 80054fa:	4b3a      	ldr	r3, [pc, #232]	; (80055e4 <main+0x86c>)
 80054fc:	791b      	ldrb	r3, [r3, #4]
 80054fe:	b2db      	uxtb	r3, r3
 8005500:	4618      	mov	r0, r3
 8005502:	4b38      	ldr	r3, [pc, #224]	; (80055e4 <main+0x86c>)
 8005504:	795b      	ldrb	r3, [r3, #5]
 8005506:	b2db      	uxtb	r3, r3
 8005508:	461e      	mov	r6, r3
 800550a:	4b36      	ldr	r3, [pc, #216]	; (80055e4 <main+0x86c>)
 800550c:	799b      	ldrb	r3, [r3, #6]
 800550e:	b2db      	uxtb	r3, r3
 8005510:	60bb      	str	r3, [r7, #8]
 8005512:	4b34      	ldr	r3, [pc, #208]	; (80055e4 <main+0x86c>)
 8005514:	79db      	ldrb	r3, [r3, #7]
 8005516:	b2db      	uxtb	r3, r3
 8005518:	607b      	str	r3, [r7, #4]
 800551a:	4b32      	ldr	r3, [pc, #200]	; (80055e4 <main+0x86c>)
 800551c:	7a1b      	ldrb	r3, [r3, #8]
 800551e:	b2db      	uxtb	r3, r3
 8005520:	9306      	str	r3, [sp, #24]
 8005522:	687b      	ldr	r3, [r7, #4]
 8005524:	9305      	str	r3, [sp, #20]
 8005526:	68bb      	ldr	r3, [r7, #8]
 8005528:	9304      	str	r3, [sp, #16]
 800552a:	9603      	str	r6, [sp, #12]
 800552c:	9002      	str	r0, [sp, #8]
 800552e:	9101      	str	r1, [sp, #4]
 8005530:	9200      	str	r2, [sp, #0]
 8005532:	4673      	mov	r3, lr
 8005534:	4662      	mov	r2, ip
 8005536:	4935      	ldr	r1, [pc, #212]	; (800560c <main+0x894>)
 8005538:	4833      	ldr	r0, [pc, #204]	; (8005608 <main+0x890>)
 800553a:	f004 fdf1 	bl	800a120 <siprintf>
 800553e:	4603      	mov	r3, r0
 8005540:	b2da      	uxtb	r2, r3
 8005542:	4b33      	ldr	r3, [pc, #204]	; (8005610 <main+0x898>)
 8005544:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005546:	4b32      	ldr	r3, [pc, #200]	; (8005610 <main+0x898>)
 8005548:	781b      	ldrb	r3, [r3, #0]
 800554a:	b29a      	uxth	r2, r3
 800554c:	23c8      	movs	r3, #200	; 0xc8
 800554e:	492e      	ldr	r1, [pc, #184]	; (8005608 <main+0x890>)
 8005550:	4830      	ldr	r0, [pc, #192]	; (8005614 <main+0x89c>)
 8005552:	f003 f91e 	bl	8008792 <HAL_UART_Transmit>
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8005556:	4b22      	ldr	r3, [pc, #136]	; (80055e0 <main+0x868>)
 8005558:	781b      	ldrb	r3, [r3, #0]
 800555a:	3301      	adds	r3, #1
 800555c:	b2da      	uxtb	r2, r3
 800555e:	4b20      	ldr	r3, [pc, #128]	; (80055e0 <main+0x868>)
 8005560:	701a      	strb	r2, [r3, #0]
 8005562:	4b1f      	ldr	r3, [pc, #124]	; (80055e0 <main+0x868>)
 8005564:	781b      	ldrb	r3, [r3, #0]
 8005566:	2b1e      	cmp	r3, #30
 8005568:	f67f aeee 	bls.w	8005348 <main+0x5d0>
						}
						//break;						
					}
				}
				ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/EncoderResolution; // Calculate Object Position in m
 800556c:	4b2a      	ldr	r3, [pc, #168]	; (8005618 <main+0x8a0>)
 800556e:	681b      	ldr	r3, [r3, #0]
 8005570:	4618      	mov	r0, r3
 8005572:	f7fa ffe9 	bl	8000548 <__aeabi_f2d>
 8005576:	a318      	add	r3, pc, #96	; (adr r3, 80055d8 <main+0x860>)
 8005578:	e9d3 2300 	ldrd	r2, r3, [r3]
 800557c:	f7fb f83c 	bl	80005f8 <__aeabi_dmul>
 8005580:	4602      	mov	r2, r0
 8005582:	460b      	mov	r3, r1
 8005584:	4690      	mov	r8, r2
 8005586:	4699      	mov	r9, r3
 8005588:	4b1a      	ldr	r3, [pc, #104]	; (80055f4 <main+0x87c>)
 800558a:	681a      	ldr	r2, [r3, #0]
 800558c:	4b23      	ldr	r3, [pc, #140]	; (800561c <main+0x8a4>)
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	1ad3      	subs	r3, r2, r3
 8005592:	4618      	mov	r0, r3
 8005594:	f7fa ffc6 	bl	8000524 <__aeabi_i2d>
 8005598:	4602      	mov	r2, r0
 800559a:	460b      	mov	r3, r1
 800559c:	4640      	mov	r0, r8
 800559e:	4649      	mov	r1, r9
 80055a0:	f7fb f82a 	bl	80005f8 <__aeabi_dmul>
 80055a4:	4602      	mov	r2, r0
 80055a6:	460b      	mov	r3, r1
 80055a8:	4690      	mov	r8, r2
 80055aa:	4699      	mov	r9, r3
 80055ac:	4b1c      	ldr	r3, [pc, #112]	; (8005620 <main+0x8a8>)
 80055ae:	881b      	ldrh	r3, [r3, #0]
 80055b0:	4618      	mov	r0, r3
 80055b2:	f7fa ffb7 	bl	8000524 <__aeabi_i2d>
 80055b6:	4602      	mov	r2, r0
 80055b8:	460b      	mov	r3, r1
 80055ba:	4640      	mov	r0, r8
 80055bc:	4649      	mov	r1, r9
 80055be:	f7fb f945 	bl	800084c <__aeabi_ddiv>
 80055c2:	4602      	mov	r2, r0
 80055c4:	460b      	mov	r3, r1
 80055c6:	4610      	mov	r0, r2
 80055c8:	4619      	mov	r1, r3
 80055ca:	f7fb fb0d 	bl	8000be8 <__aeabi_d2f>
 80055ce:	4603      	mov	r3, r0
 80055d0:	4a14      	ldr	r2, [pc, #80]	; (8005624 <main+0x8ac>)
 80055d2:	6013      	str	r3, [r2, #0]
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 80055d4:	e40b      	b.n	8004dee <main+0x76>
 80055d6:	bf00      	nop
 80055d8:	51eb851f 	.word	0x51eb851f
 80055dc:	40191eb8 	.word	0x40191eb8
 80055e0:	20000427 	.word	0x20000427
 80055e4:	200003a4 	.word	0x200003a4
 80055e8:	20000003 	.word	0x20000003
 80055ec:	20000428 	.word	0x20000428
 80055f0:	200004f0 	.word	0x200004f0
 80055f4:	200004f8 	.word	0x200004f8
 80055f8:	200004f4 	.word	0x200004f4
 80055fc:	44fa0000 	.word	0x44fa0000
 8005600:	20000405 	.word	0x20000405
 8005604:	200002b0 	.word	0x200002b0
 8005608:	20000408 	.word	0x20000408
 800560c:	0800e004 	.word	0x0800e004
 8005610:	20000426 	.word	0x20000426
 8005614:	20000338 	.word	0x20000338
 8005618:	20000458 	.word	0x20000458
 800561c:	200004b0 	.word	0x200004b0
 8005620:	20000008 	.word	0x20000008
 8005624:	20000544 	.word	0x20000544

08005628 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005628:	b580      	push	{r7, lr}
 800562a:	b094      	sub	sp, #80	; 0x50
 800562c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800562e:	f107 0320 	add.w	r3, r7, #32
 8005632:	2230      	movs	r2, #48	; 0x30
 8005634:	2100      	movs	r1, #0
 8005636:	4618      	mov	r0, r3
 8005638:	f004 f900 	bl	800983c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800563c:	f107 030c 	add.w	r3, r7, #12
 8005640:	2200      	movs	r2, #0
 8005642:	601a      	str	r2, [r3, #0]
 8005644:	605a      	str	r2, [r3, #4]
 8005646:	609a      	str	r2, [r3, #8]
 8005648:	60da      	str	r2, [r3, #12]
 800564a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800564c:	2300      	movs	r3, #0
 800564e:	60bb      	str	r3, [r7, #8]
 8005650:	4b28      	ldr	r3, [pc, #160]	; (80056f4 <SystemClock_Config+0xcc>)
 8005652:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005654:	4a27      	ldr	r2, [pc, #156]	; (80056f4 <SystemClock_Config+0xcc>)
 8005656:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800565a:	6413      	str	r3, [r2, #64]	; 0x40
 800565c:	4b25      	ldr	r3, [pc, #148]	; (80056f4 <SystemClock_Config+0xcc>)
 800565e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005660:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005664:	60bb      	str	r3, [r7, #8]
 8005666:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8005668:	2300      	movs	r3, #0
 800566a:	607b      	str	r3, [r7, #4]
 800566c:	4b22      	ldr	r3, [pc, #136]	; (80056f8 <SystemClock_Config+0xd0>)
 800566e:	681b      	ldr	r3, [r3, #0]
 8005670:	4a21      	ldr	r2, [pc, #132]	; (80056f8 <SystemClock_Config+0xd0>)
 8005672:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005676:	6013      	str	r3, [r2, #0]
 8005678:	4b1f      	ldr	r3, [pc, #124]	; (80056f8 <SystemClock_Config+0xd0>)
 800567a:	681b      	ldr	r3, [r3, #0]
 800567c:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005680:	607b      	str	r3, [r7, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8005684:	2301      	movs	r3, #1
 8005686:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8005688:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 800568c:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800568e:	2302      	movs	r3, #2
 8005690:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8005692:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 8005696:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 8005698:	230c      	movs	r3, #12
 800569a:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 800569c:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80056a0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80056a2:	2302      	movs	r3, #2
 80056a4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80056a6:	2304      	movs	r3, #4
 80056a8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80056aa:	f107 0320 	add.w	r3, r7, #32
 80056ae:	4618      	mov	r0, r3
 80056b0:	f001 fcfa 	bl	80070a8 <HAL_RCC_OscConfig>
 80056b4:	4603      	mov	r3, r0
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d001      	beq.n	80056be <SystemClock_Config+0x96>
  {
    Error_Handler();
 80056ba:	f000 faff 	bl	8005cbc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80056be:	230f      	movs	r3, #15
 80056c0:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80056c2:	2302      	movs	r3, #2
 80056c4:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80056c6:	2300      	movs	r3, #0
 80056c8:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 80056ca:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80056ce:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 80056d0:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 80056d4:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 80056d6:	f107 030c 	add.w	r3, r7, #12
 80056da:	2105      	movs	r1, #5
 80056dc:	4618      	mov	r0, r3
 80056de:	f001 ff5b 	bl	8007598 <HAL_RCC_ClockConfig>
 80056e2:	4603      	mov	r3, r0
 80056e4:	2b00      	cmp	r3, #0
 80056e6:	d001      	beq.n	80056ec <SystemClock_Config+0xc4>
  {
    Error_Handler();
 80056e8:	f000 fae8 	bl	8005cbc <Error_Handler>
  }
}
 80056ec:	bf00      	nop
 80056ee:	3750      	adds	r7, #80	; 0x50
 80056f0:	46bd      	mov	sp, r7
 80056f2:	bd80      	pop	{r7, pc}
 80056f4:	40023800 	.word	0x40023800
 80056f8:	40007000 	.word	0x40007000

080056fc <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 80056fc:	b580      	push	{r7, lr}
 80056fe:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005700:	2200      	movs	r2, #0
 8005702:	2100      	movs	r1, #0
 8005704:	2047      	movs	r0, #71	; 0x47
 8005706:	f000 ff36 	bl	8006576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 800570a:	2047      	movs	r0, #71	; 0x47
 800570c:	f000 ff4f 	bl	80065ae <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005710:	2200      	movs	r2, #0
 8005712:	2101      	movs	r1, #1
 8005714:	2027      	movs	r0, #39	; 0x27
 8005716:	f000 ff2e 	bl	8006576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800571a:	2027      	movs	r0, #39	; 0x27
 800571c:	f000 ff47 	bl	80065ae <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8005720:	2200      	movs	r2, #0
 8005722:	2102      	movs	r1, #2
 8005724:	201d      	movs	r0, #29
 8005726:	f000 ff26 	bl	8006576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800572a:	201d      	movs	r0, #29
 800572c:	f000 ff3f 	bl	80065ae <HAL_NVIC_EnableIRQ>
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 4, 0);
 8005730:	2200      	movs	r2, #0
 8005732:	2104      	movs	r1, #4
 8005734:	2035      	movs	r0, #53	; 0x35
 8005736:	f000 ff1e 	bl	8006576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 800573a:	2035      	movs	r0, #53	; 0x35
 800573c:	f000 ff37 	bl	80065ae <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8005740:	2200      	movs	r2, #0
 8005742:	2103      	movs	r1, #3
 8005744:	201c      	movs	r0, #28
 8005746:	f000 ff16 	bl	8006576 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800574a:	201c      	movs	r0, #28
 800574c:	f000 ff2f 	bl	80065ae <HAL_NVIC_EnableIRQ>
}
 8005750:	bf00      	nop
 8005752:	bd80      	pop	{r7, pc}

08005754 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005754:	b580      	push	{r7, lr}
 8005756:	b08a      	sub	sp, #40	; 0x28
 8005758:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800575a:	f107 0318 	add.w	r3, r7, #24
 800575e:	2200      	movs	r2, #0
 8005760:	601a      	str	r2, [r3, #0]
 8005762:	605a      	str	r2, [r3, #4]
 8005764:	609a      	str	r2, [r3, #8]
 8005766:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8005768:	f107 0310 	add.w	r3, r7, #16
 800576c:	2200      	movs	r2, #0
 800576e:	601a      	str	r2, [r3, #0]
 8005770:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 8005772:	463b      	mov	r3, r7
 8005774:	2200      	movs	r2, #0
 8005776:	601a      	str	r2, [r3, #0]
 8005778:	605a      	str	r2, [r3, #4]
 800577a:	609a      	str	r2, [r3, #8]
 800577c:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800577e:	4b31      	ldr	r3, [pc, #196]	; (8005844 <MX_TIM2_Init+0xf0>)
 8005780:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8005784:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 8005786:	4b2f      	ldr	r3, [pc, #188]	; (8005844 <MX_TIM2_Init+0xf0>)
 8005788:	220a      	movs	r2, #10
 800578a:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800578c:	4b2d      	ldr	r3, [pc, #180]	; (8005844 <MX_TIM2_Init+0xf0>)
 800578e:	2200      	movs	r2, #0
 8005790:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 8005792:	4b2c      	ldr	r3, [pc, #176]	; (8005844 <MX_TIM2_Init+0xf0>)
 8005794:	f242 02d0 	movw	r2, #8400	; 0x20d0
 8005798:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800579a:	4b2a      	ldr	r3, [pc, #168]	; (8005844 <MX_TIM2_Init+0xf0>)
 800579c:	2200      	movs	r2, #0
 800579e:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80057a0:	4b28      	ldr	r3, [pc, #160]	; (8005844 <MX_TIM2_Init+0xf0>)
 80057a2:	2280      	movs	r2, #128	; 0x80
 80057a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80057a6:	4827      	ldr	r0, [pc, #156]	; (8005844 <MX_TIM2_Init+0xf0>)
 80057a8:	f002 f8d6 	bl	8007958 <HAL_TIM_Base_Init>
 80057ac:	4603      	mov	r3, r0
 80057ae:	2b00      	cmp	r3, #0
 80057b0:	d001      	beq.n	80057b6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80057b2:	f000 fa83 	bl	8005cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057ba:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80057bc:	f107 0318 	add.w	r3, r7, #24
 80057c0:	4619      	mov	r1, r3
 80057c2:	4820      	ldr	r0, [pc, #128]	; (8005844 <MX_TIM2_Init+0xf0>)
 80057c4:	f002 fbb4 	bl	8007f30 <HAL_TIM_ConfigClockSource>
 80057c8:	4603      	mov	r3, r0
 80057ca:	2b00      	cmp	r3, #0
 80057cc:	d001      	beq.n	80057d2 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 80057ce:	f000 fa75 	bl	8005cbc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 80057d2:	481c      	ldr	r0, [pc, #112]	; (8005844 <MX_TIM2_Init+0xf0>)
 80057d4:	f002 f9af 	bl	8007b36 <HAL_TIM_IC_Init>
 80057d8:	4603      	mov	r3, r0
 80057da:	2b00      	cmp	r3, #0
 80057dc:	d001      	beq.n	80057e2 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 80057de:	f000 fa6d 	bl	8005cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 80057e2:	2320      	movs	r3, #32
 80057e4:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057e6:	2300      	movs	r3, #0
 80057e8:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80057ea:	f107 0310 	add.w	r3, r7, #16
 80057ee:	4619      	mov	r1, r3
 80057f0:	4814      	ldr	r0, [pc, #80]	; (8005844 <MX_TIM2_Init+0xf0>)
 80057f2:	f002 fef1 	bl	80085d8 <HAL_TIMEx_MasterConfigSynchronization>
 80057f6:	4603      	mov	r3, r0
 80057f8:	2b00      	cmp	r3, #0
 80057fa:	d001      	beq.n	8005800 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 80057fc:	f000 fa5e 	bl	8005cbc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005800:	2300      	movs	r3, #0
 8005802:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005804:	2301      	movs	r3, #1
 8005806:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005808:	2300      	movs	r3, #0
 800580a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800580c:	2300      	movs	r3, #0
 800580e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005810:	463b      	mov	r3, r7
 8005812:	2200      	movs	r2, #0
 8005814:	4619      	mov	r1, r3
 8005816:	480b      	ldr	r0, [pc, #44]	; (8005844 <MX_TIM2_Init+0xf0>)
 8005818:	f002 faee 	bl	8007df8 <HAL_TIM_IC_ConfigChannel>
 800581c:	4603      	mov	r3, r0
 800581e:	2b00      	cmp	r3, #0
 8005820:	d001      	beq.n	8005826 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8005822:	f000 fa4b 	bl	8005cbc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005826:	463b      	mov	r3, r7
 8005828:	2204      	movs	r2, #4
 800582a:	4619      	mov	r1, r3
 800582c:	4805      	ldr	r0, [pc, #20]	; (8005844 <MX_TIM2_Init+0xf0>)
 800582e:	f002 fae3 	bl	8007df8 <HAL_TIM_IC_ConfigChannel>
 8005832:	4603      	mov	r3, r0
 8005834:	2b00      	cmp	r3, #0
 8005836:	d001      	beq.n	800583c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8005838:	f000 fa40 	bl	8005cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800583c:	bf00      	nop
 800583e:	3728      	adds	r7, #40	; 0x28
 8005840:	46bd      	mov	sp, r7
 8005842:	bd80      	pop	{r7, pc}
 8005844:	20000220 	.word	0x20000220

08005848 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005848:	b580      	push	{r7, lr}
 800584a:	b086      	sub	sp, #24
 800584c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800584e:	f107 0308 	add.w	r3, r7, #8
 8005852:	2200      	movs	r2, #0
 8005854:	601a      	str	r2, [r3, #0]
 8005856:	605a      	str	r2, [r3, #4]
 8005858:	609a      	str	r2, [r3, #8]
 800585a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800585c:	463b      	mov	r3, r7
 800585e:	2200      	movs	r2, #0
 8005860:	601a      	str	r2, [r3, #0]
 8005862:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8005864:	4b1c      	ldr	r3, [pc, #112]	; (80058d8 <MX_TIM3_Init+0x90>)
 8005866:	4a1d      	ldr	r2, [pc, #116]	; (80058dc <MX_TIM3_Init+0x94>)
 8005868:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 800586a:	4b1b      	ldr	r3, [pc, #108]	; (80058d8 <MX_TIM3_Init+0x90>)
 800586c:	2201      	movs	r2, #1
 800586e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8005870:	4b19      	ldr	r3, [pc, #100]	; (80058d8 <MX_TIM3_Init+0x90>)
 8005872:	2200      	movs	r2, #0
 8005874:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168;
 8005876:	4b18      	ldr	r3, [pc, #96]	; (80058d8 <MX_TIM3_Init+0x90>)
 8005878:	22a8      	movs	r2, #168	; 0xa8
 800587a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800587c:	4b16      	ldr	r3, [pc, #88]	; (80058d8 <MX_TIM3_Init+0x90>)
 800587e:	2200      	movs	r2, #0
 8005880:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8005882:	4b15      	ldr	r3, [pc, #84]	; (80058d8 <MX_TIM3_Init+0x90>)
 8005884:	2200      	movs	r2, #0
 8005886:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8005888:	4813      	ldr	r0, [pc, #76]	; (80058d8 <MX_TIM3_Init+0x90>)
 800588a:	f002 f865 	bl	8007958 <HAL_TIM_Base_Init>
 800588e:	4603      	mov	r3, r0
 8005890:	2b00      	cmp	r3, #0
 8005892:	d001      	beq.n	8005898 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 8005894:	f000 fa12 	bl	8005cbc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8005898:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800589c:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800589e:	f107 0308 	add.w	r3, r7, #8
 80058a2:	4619      	mov	r1, r3
 80058a4:	480c      	ldr	r0, [pc, #48]	; (80058d8 <MX_TIM3_Init+0x90>)
 80058a6:	f002 fb43 	bl	8007f30 <HAL_TIM_ConfigClockSource>
 80058aa:	4603      	mov	r3, r0
 80058ac:	2b00      	cmp	r3, #0
 80058ae:	d001      	beq.n	80058b4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80058b0:	f000 fa04 	bl	8005cbc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80058b4:	2300      	movs	r3, #0
 80058b6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80058b8:	2300      	movs	r3, #0
 80058ba:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80058bc:	463b      	mov	r3, r7
 80058be:	4619      	mov	r1, r3
 80058c0:	4805      	ldr	r0, [pc, #20]	; (80058d8 <MX_TIM3_Init+0x90>)
 80058c2:	f002 fe89 	bl	80085d8 <HAL_TIMEx_MasterConfigSynchronization>
 80058c6:	4603      	mov	r3, r0
 80058c8:	2b00      	cmp	r3, #0
 80058ca:	d001      	beq.n	80058d0 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 80058cc:	f000 f9f6 	bl	8005cbc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 80058d0:	bf00      	nop
 80058d2:	3718      	adds	r7, #24
 80058d4:	46bd      	mov	sp, r7
 80058d6:	bd80      	pop	{r7, pc}
 80058d8:	20000268 	.word	0x20000268
 80058dc:	40000400 	.word	0x40000400

080058e0 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 80058e0:	b580      	push	{r7, lr}
 80058e2:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 80058e4:	4b11      	ldr	r3, [pc, #68]	; (800592c <MX_UART5_Init+0x4c>)
 80058e6:	4a12      	ldr	r2, [pc, #72]	; (8005930 <MX_UART5_Init+0x50>)
 80058e8:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 80058ea:	4b10      	ldr	r3, [pc, #64]	; (800592c <MX_UART5_Init+0x4c>)
 80058ec:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80058f0:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 80058f2:	4b0e      	ldr	r3, [pc, #56]	; (800592c <MX_UART5_Init+0x4c>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 80058f8:	4b0c      	ldr	r3, [pc, #48]	; (800592c <MX_UART5_Init+0x4c>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 80058fe:	4b0b      	ldr	r3, [pc, #44]	; (800592c <MX_UART5_Init+0x4c>)
 8005900:	2200      	movs	r2, #0
 8005902:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005904:	4b09      	ldr	r3, [pc, #36]	; (800592c <MX_UART5_Init+0x4c>)
 8005906:	220c      	movs	r2, #12
 8005908:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800590a:	4b08      	ldr	r3, [pc, #32]	; (800592c <MX_UART5_Init+0x4c>)
 800590c:	2200      	movs	r2, #0
 800590e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005910:	4b06      	ldr	r3, [pc, #24]	; (800592c <MX_UART5_Init+0x4c>)
 8005912:	2200      	movs	r2, #0
 8005914:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005916:	4805      	ldr	r0, [pc, #20]	; (800592c <MX_UART5_Init+0x4c>)
 8005918:	f002 feee 	bl	80086f8 <HAL_UART_Init>
 800591c:	4603      	mov	r3, r0
 800591e:	2b00      	cmp	r3, #0
 8005920:	d001      	beq.n	8005926 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005922:	f000 f9cb 	bl	8005cbc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005926:	bf00      	nop
 8005928:	bd80      	pop	{r7, pc}
 800592a:	bf00      	nop
 800592c:	200002b0 	.word	0x200002b0
 8005930:	40005000 	.word	0x40005000

08005934 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005934:	b580      	push	{r7, lr}
 8005936:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005938:	4b11      	ldr	r3, [pc, #68]	; (8005980 <MX_USART3_UART_Init+0x4c>)
 800593a:	4a12      	ldr	r2, [pc, #72]	; (8005984 <MX_USART3_UART_Init+0x50>)
 800593c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800593e:	4b10      	ldr	r3, [pc, #64]	; (8005980 <MX_USART3_UART_Init+0x4c>)
 8005940:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005944:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005946:	4b0e      	ldr	r3, [pc, #56]	; (8005980 <MX_USART3_UART_Init+0x4c>)
 8005948:	2200      	movs	r2, #0
 800594a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800594c:	4b0c      	ldr	r3, [pc, #48]	; (8005980 <MX_USART3_UART_Init+0x4c>)
 800594e:	2200      	movs	r2, #0
 8005950:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005952:	4b0b      	ldr	r3, [pc, #44]	; (8005980 <MX_USART3_UART_Init+0x4c>)
 8005954:	2200      	movs	r2, #0
 8005956:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005958:	4b09      	ldr	r3, [pc, #36]	; (8005980 <MX_USART3_UART_Init+0x4c>)
 800595a:	220c      	movs	r2, #12
 800595c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800595e:	4b08      	ldr	r3, [pc, #32]	; (8005980 <MX_USART3_UART_Init+0x4c>)
 8005960:	2200      	movs	r2, #0
 8005962:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 8005964:	4b06      	ldr	r3, [pc, #24]	; (8005980 <MX_USART3_UART_Init+0x4c>)
 8005966:	2200      	movs	r2, #0
 8005968:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 800596a:	4805      	ldr	r0, [pc, #20]	; (8005980 <MX_USART3_UART_Init+0x4c>)
 800596c:	f002 fec4 	bl	80086f8 <HAL_UART_Init>
 8005970:	4603      	mov	r3, r0
 8005972:	2b00      	cmp	r3, #0
 8005974:	d001      	beq.n	800597a <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 8005976:	f000 f9a1 	bl	8005cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 800597a:	bf00      	nop
 800597c:	bd80      	pop	{r7, pc}
 800597e:	bf00      	nop
 8005980:	200002f4 	.word	0x200002f4
 8005984:	40004800 	.word	0x40004800

08005988 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8005988:	b580      	push	{r7, lr}
 800598a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800598c:	4b11      	ldr	r3, [pc, #68]	; (80059d4 <MX_USART6_UART_Init+0x4c>)
 800598e:	4a12      	ldr	r2, [pc, #72]	; (80059d8 <MX_USART6_UART_Init+0x50>)
 8005990:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 8005992:	4b10      	ldr	r3, [pc, #64]	; (80059d4 <MX_USART6_UART_Init+0x4c>)
 8005994:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005998:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800599a:	4b0e      	ldr	r3, [pc, #56]	; (80059d4 <MX_USART6_UART_Init+0x4c>)
 800599c:	2200      	movs	r2, #0
 800599e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80059a0:	4b0c      	ldr	r3, [pc, #48]	; (80059d4 <MX_USART6_UART_Init+0x4c>)
 80059a2:	2200      	movs	r2, #0
 80059a4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80059a6:	4b0b      	ldr	r3, [pc, #44]	; (80059d4 <MX_USART6_UART_Init+0x4c>)
 80059a8:	2200      	movs	r2, #0
 80059aa:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80059ac:	4b09      	ldr	r3, [pc, #36]	; (80059d4 <MX_USART6_UART_Init+0x4c>)
 80059ae:	220c      	movs	r2, #12
 80059b0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80059b2:	4b08      	ldr	r3, [pc, #32]	; (80059d4 <MX_USART6_UART_Init+0x4c>)
 80059b4:	2200      	movs	r2, #0
 80059b6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80059b8:	4b06      	ldr	r3, [pc, #24]	; (80059d4 <MX_USART6_UART_Init+0x4c>)
 80059ba:	2200      	movs	r2, #0
 80059bc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80059be:	4805      	ldr	r0, [pc, #20]	; (80059d4 <MX_USART6_UART_Init+0x4c>)
 80059c0:	f002 fe9a 	bl	80086f8 <HAL_UART_Init>
 80059c4:	4603      	mov	r3, r0
 80059c6:	2b00      	cmp	r3, #0
 80059c8:	d001      	beq.n	80059ce <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 80059ca:	f000 f977 	bl	8005cbc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 80059ce:	bf00      	nop
 80059d0:	bd80      	pop	{r7, pc}
 80059d2:	bf00      	nop
 80059d4:	20000338 	.word	0x20000338
 80059d8:	40011400 	.word	0x40011400

080059dc <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80059dc:	b580      	push	{r7, lr}
 80059de:	b08c      	sub	sp, #48	; 0x30
 80059e0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80059e2:	f107 031c 	add.w	r3, r7, #28
 80059e6:	2200      	movs	r2, #0
 80059e8:	601a      	str	r2, [r3, #0]
 80059ea:	605a      	str	r2, [r3, #4]
 80059ec:	609a      	str	r2, [r3, #8]
 80059ee:	60da      	str	r2, [r3, #12]
 80059f0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 80059f2:	2300      	movs	r3, #0
 80059f4:	61bb      	str	r3, [r7, #24]
 80059f6:	4bab      	ldr	r3, [pc, #684]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 80059f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059fa:	4aaa      	ldr	r2, [pc, #680]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 80059fc:	f043 0310 	orr.w	r3, r3, #16
 8005a00:	6313      	str	r3, [r2, #48]	; 0x30
 8005a02:	4ba8      	ldr	r3, [pc, #672]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a06:	f003 0310 	and.w	r3, r3, #16
 8005a0a:	61bb      	str	r3, [r7, #24]
 8005a0c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8005a0e:	2300      	movs	r3, #0
 8005a10:	617b      	str	r3, [r7, #20]
 8005a12:	4ba4      	ldr	r3, [pc, #656]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a16:	4aa3      	ldr	r2, [pc, #652]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a18:	f043 0304 	orr.w	r3, r3, #4
 8005a1c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a1e:	4ba1      	ldr	r3, [pc, #644]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a20:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a22:	f003 0304 	and.w	r3, r3, #4
 8005a26:	617b      	str	r3, [r7, #20]
 8005a28:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8005a2a:	2300      	movs	r3, #0
 8005a2c:	613b      	str	r3, [r7, #16]
 8005a2e:	4b9d      	ldr	r3, [pc, #628]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a32:	4a9c      	ldr	r2, [pc, #624]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a34:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005a38:	6313      	str	r3, [r2, #48]	; 0x30
 8005a3a:	4b9a      	ldr	r3, [pc, #616]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005a42:	613b      	str	r3, [r7, #16]
 8005a44:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005a46:	2300      	movs	r3, #0
 8005a48:	60fb      	str	r3, [r7, #12]
 8005a4a:	4b96      	ldr	r3, [pc, #600]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a4e:	4a95      	ldr	r2, [pc, #596]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a50:	f043 0301 	orr.w	r3, r3, #1
 8005a54:	6313      	str	r3, [r2, #48]	; 0x30
 8005a56:	4b93      	ldr	r3, [pc, #588]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a5a:	f003 0301 	and.w	r3, r3, #1
 8005a5e:	60fb      	str	r3, [r7, #12]
 8005a60:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8005a62:	2300      	movs	r3, #0
 8005a64:	60bb      	str	r3, [r7, #8]
 8005a66:	4b8f      	ldr	r3, [pc, #572]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a6a:	4a8e      	ldr	r2, [pc, #568]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a6c:	f043 0302 	orr.w	r3, r3, #2
 8005a70:	6313      	str	r3, [r2, #48]	; 0x30
 8005a72:	4b8c      	ldr	r3, [pc, #560]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a76:	f003 0302 	and.w	r3, r3, #2
 8005a7a:	60bb      	str	r3, [r7, #8]
 8005a7c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8005a7e:	2300      	movs	r3, #0
 8005a80:	607b      	str	r3, [r7, #4]
 8005a82:	4b88      	ldr	r3, [pc, #544]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a86:	4a87      	ldr	r2, [pc, #540]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a88:	f043 0308 	orr.w	r3, r3, #8
 8005a8c:	6313      	str	r3, [r2, #48]	; 0x30
 8005a8e:	4b85      	ldr	r3, [pc, #532]	; (8005ca4 <MX_GPIO_Init+0x2c8>)
 8005a90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a92:	f003 0308 	and.w	r3, r3, #8
 8005a96:	607b      	str	r3, [r7, #4]
 8005a98:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE4_ZIGBEE_PA_EN_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin|Speed1_not_PE13_41_Pin
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	f24a 3113 	movw	r1, #41747	; 0xa313
 8005aa0:	4881      	ldr	r0, [pc, #516]	; (8005ca8 <MX_GPIO_Init+0x2cc>)
 8005aa2:	f001 facd 	bl	8007040 <HAL_GPIO_WritePin>
                          |PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_ZIGBEE_nRST_Pin|PC8_PR_Pin|PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin, GPIO_PIN_RESET);
 8005aa6:	2200      	movs	r2, #0
 8005aa8:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 8005aac:	487f      	ldr	r0, [pc, #508]	; (8005cac <MX_GPIO_Init+0x2d0>)
 8005aae:	f001 fac7 	bl	8007040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	f649 5108 	movw	r1, #40200	; 0x9d08
 8005ab8:	487d      	ldr	r0, [pc, #500]	; (8005cb0 <MX_GPIO_Init+0x2d4>)
 8005aba:	f001 fac1 	bl	8007040 <HAL_GPIO_WritePin>
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin, GPIO_PIN_SET);
 8005abe:	2201      	movs	r2, #1
 8005ac0:	2130      	movs	r1, #48	; 0x30
 8005ac2:	487a      	ldr	r0, [pc, #488]	; (8005cac <MX_GPIO_Init+0x2d0>)
 8005ac4:	f001 fabc 	bl	8007040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EStop_Not_PB0_17_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin|PB14_POS_CMD_OPC_EN_Pin
 8005ac8:	2200      	movs	r2, #0
 8005aca:	f246 0165 	movw	r1, #24677	; 0x6065
 8005ace:	4879      	ldr	r0, [pc, #484]	; (8005cb4 <MX_GPIO_Init+0x2d8>)
 8005ad0:	f001 fab6 	bl	8007040 <HAL_GPIO_WritePin>
                          |PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ArlarmRST_PB1_42_Pin|PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);
 8005ad4:	2201      	movs	r2, #1
 8005ad6:	f248 0102 	movw	r1, #32770	; 0x8002
 8005ada:	4876      	ldr	r0, [pc, #472]	; (8005cb4 <MX_GPIO_Init+0x2d8>)
 8005adc:	f001 fab0 	bl	8007040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Speed2_Not_PE7_15_Pin|Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin
 8005ae0:	2201      	movs	r2, #1
 8005ae2:	f44f 41b9 	mov.w	r1, #23680	; 0x5c80
 8005ae6:	4870      	ldr	r0, [pc, #448]	; (8005ca8 <MX_GPIO_Init+0x2cc>)
 8005ae8:	f001 faaa 	bl	8007040 <HAL_GPIO_WritePin>
                          |CWLIM_Not_PE14_13_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD10_ESP32_EN_GPIO_Port, PD10_ESP32_EN_Pin, GPIO_PIN_SET);
 8005aec:	2201      	movs	r2, #1
 8005aee:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005af2:	4871      	ldr	r0, [pc, #452]	; (8005cb8 <MX_GPIO_Init+0x2dc>)
 8005af4:	f001 faa4 	bl	8007040 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin, GPIO_PIN_RESET);
 8005af8:	2200      	movs	r2, #0
 8005afa:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8005afe:	486e      	ldr	r0, [pc, #440]	; (8005cb8 <MX_GPIO_Init+0x2dc>)
 8005b00:	f001 fa9e 	bl	8007040 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN1_22_RDY_Pin CN1_21_SPDOUT_TRQOUT_Pin PE5_BLE_GPIO_Pin CN1_48_BRAKE_Pin */
  GPIO_InitStruct.Pin = CN1_22_RDY_Pin|CN1_21_SPDOUT_TRQOUT_Pin|PE5_BLE_GPIO_Pin|CN1_48_BRAKE_Pin;
 8005b04:	236c      	movs	r3, #108	; 0x6c
 8005b06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b08:	2300      	movs	r3, #0
 8005b0a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b0c:	2300      	movs	r3, #0
 8005b0e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b10:	f107 031c 	add.w	r3, r7, #28
 8005b14:	4619      	mov	r1, r3
 8005b16:	4864      	ldr	r0, [pc, #400]	; (8005ca8 <MX_GPIO_Init+0x2cc>)
 8005b18:	f001 f8de 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4_ZIGBEE_PA_EN_Pin Speed2_Not_PE7_15_Pin Type_Not_PE8_40_Pin PE9_TIM1_CH1_PFIN_Pin
                           Dir_Not_PE10_14_Pin SPDLIM_Not_PE11_38_Pin CCWLIM_Not_PE12_39_Pin Speed1_not_PE13_41_Pin
                           CWLIM_Not_PE14_13_Pin PE15_RELAY1_Pin PE0_485_MCU_DRV_DIR_Pin PE1_ZIGBEE_EN_Pin */
  GPIO_InitStruct.Pin = PE4_ZIGBEE_PA_EN_Pin|Speed2_Not_PE7_15_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin
 8005b1c:	f64f 7393 	movw	r3, #65427	; 0xff93
 8005b20:	61fb      	str	r3, [r7, #28]
                          |Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin|Speed1_not_PE13_41_Pin
                          |CWLIM_Not_PE14_13_Pin|PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b22:	2301      	movs	r3, #1
 8005b24:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b26:	2300      	movs	r3, #0
 8005b28:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005b2e:	f107 031c 	add.w	r3, r7, #28
 8005b32:	4619      	mov	r1, r3
 8005b34:	485c      	ldr	r0, [pc, #368]	; (8005ca8 <MX_GPIO_Init+0x2cc>)
 8005b36:	f001 f8cf 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_USER_BT_MID_Pin CN1_46_ALARM_Pin CN1_47_INSPD_INPOS_Pin CN1_45_NCWOUT_NTQOUT_Pin */
  GPIO_InitStruct.Pin = PC13_USER_BT_MID_Pin|CN1_46_ALARM_Pin|CN1_47_INSPD_INPOS_Pin|CN1_45_NCWOUT_NTQOUT_Pin;
 8005b3a:	f242 0307 	movw	r3, #8199	; 0x2007
 8005b3e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b40:	2300      	movs	r3, #0
 8005b42:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b44:	2300      	movs	r3, #0
 8005b46:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b48:	f107 031c 	add.w	r3, r7, #28
 8005b4c:	4619      	mov	r1, r3
 8005b4e:	4857      	ldr	r0, [pc, #348]	; (8005cac <MX_GPIO_Init+0x2d0>)
 8005b50:	f001 f8c2 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_ZIGBEE_nRST_Pin SerVoReset_PC4_18_Pin Stop_PC5_43_Pin PC8_PR_Pin
                           PC9_ZIGBEE_HGM_EN_Pin PC10_SPI3_SCK_SPARE_Pin */
  GPIO_InitStruct.Pin = PC3_ZIGBEE_nRST_Pin|SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin|PC8_PR_Pin
 8005b54:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8005b58:	61fb      	str	r3, [r7, #28]
                          |PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b5a:	2301      	movs	r3, #1
 8005b5c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b5e:	2300      	movs	r3, #0
 8005b60:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b62:	2300      	movs	r3, #0
 8005b64:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005b66:	f107 031c 	add.w	r3, r7, #28
 8005b6a:	4619      	mov	r1, r3
 8005b6c:	484f      	ldr	r0, [pc, #316]	; (8005cac <MX_GPIO_Init+0x2d0>)
 8005b6e:	f001 f8b3 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_UART4_TX_ESP32_RX_Pin */
  GPIO_InitStruct.Pin = PA0_UART4_TX_ESP32_RX_Pin;
 8005b72:	2301      	movs	r3, #1
 8005b74:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005b76:	2302      	movs	r3, #2
 8005b78:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b7a:	2300      	movs	r3, #0
 8005b7c:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b7e:	2303      	movs	r3, #3
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005b82:	2308      	movs	r3, #8
 8005b84:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PA0_UART4_TX_ESP32_RX_GPIO_Port, &GPIO_InitStruct);
 8005b86:	f107 031c 	add.w	r3, r7, #28
 8005b8a:	4619      	mov	r1, r3
 8005b8c:	4848      	ldr	r0, [pc, #288]	; (8005cb0 <MX_GPIO_Init+0x2d4>)
 8005b8e:	f001 f8a3 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_USER_BT_UP_Pin CN1_20_PCWOUT_PTQOUT_Pin CN1_23_TYPEOUT_Pin PA9_LINE_RECV_SELFTEST_Pin */
  GPIO_InitStruct.Pin = PA2_USER_BT_UP_Pin|CN1_20_PCWOUT_PTQOUT_Pin|CN1_23_TYPEOUT_Pin|PA9_LINE_RECV_SELFTEST_Pin;
 8005b92:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005b96:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b98:	2300      	movs	r3, #0
 8005b9a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b9c:	2300      	movs	r3, #0
 8005b9e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ba0:	f107 031c 	add.w	r3, r7, #28
 8005ba4:	4619      	mov	r1, r3
 8005ba6:	4842      	ldr	r0, [pc, #264]	; (8005cb0 <MX_GPIO_Init+0x2d4>)
 8005ba8:	f001 f896 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_LCD_RST_Pin PA8_LINE_DRV_SELFTEST2_Pin PA10_LINE_DRV_SELFTEST1_Pin PA11_ENC_RECEIV_EN_Pin
                           PA12_LINE_DRV_EN_Pin PA15_SPI3_NSS_SPARE_Pin */
  GPIO_InitStruct.Pin = PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8005bac:	f649 5308 	movw	r3, #40200	; 0x9d08
 8005bb0:	61fb      	str	r3, [r7, #28]
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bb2:	2301      	movs	r3, #1
 8005bb4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bb6:	2300      	movs	r3, #0
 8005bb8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bba:	2300      	movs	r3, #0
 8005bbc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005bbe:	f107 031c 	add.w	r3, r7, #28
 8005bc2:	4619      	mov	r1, r3
 8005bc4:	483a      	ldr	r0, [pc, #232]	; (8005cb0 <MX_GPIO_Init+0x2d4>)
 8005bc6:	f001 f887 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : EStop_Not_PB0_17_Pin ArlarmRST_PB1_42_Pin Tor1_PB2_16_Pin PB13_Output_JP7_Pin
                           PB14_POS_CMD_OPC_EN_Pin PB15_485_MCU_PC_DIR_Pin PB5_SPI3_MOSI_SPARE_Pin PB6_RELAY2_Pin */
  GPIO_InitStruct.Pin = EStop_Not_PB0_17_Pin|ArlarmRST_PB1_42_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin
 8005bca:	f24e 0367 	movw	r3, #57447	; 0xe067
 8005bce:	61fb      	str	r3, [r7, #28]
                          |PB14_POS_CMD_OPC_EN_Pin|PB15_485_MCU_PC_DIR_Pin|PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005bd0:	2301      	movs	r3, #1
 8005bd2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005bd4:	2300      	movs	r3, #0
 8005bd6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005bd8:	2300      	movs	r3, #0
 8005bda:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bdc:	f107 031c 	add.w	r3, r7, #28
 8005be0:	4619      	mov	r1, r3
 8005be2:	4834      	ldr	r0, [pc, #208]	; (8005cb4 <MX_GPIO_Init+0x2d8>)
 8005be4:	f001 f878 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10_I2C2_SCL_LCD_IOEXP_Pin PB11_I2C2_SDA_LCD_IOEXP_Pin */
  GPIO_InitStruct.Pin = PB10_I2C2_SCL_LCD_IOEXP_Pin|PB11_I2C2_SDA_LCD_IOEXP_Pin;
 8005be8:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005bec:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bee:	2312      	movs	r3, #18
 8005bf0:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bf2:	2301      	movs	r3, #1
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bf6:	2303      	movs	r3, #3
 8005bf8:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005bfa:	2304      	movs	r3, #4
 8005bfc:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bfe:	f107 031c 	add.w	r3, r7, #28
 8005c02:	4619      	mov	r1, r3
 8005c04:	482b      	ldr	r0, [pc, #172]	; (8005cb4 <MX_GPIO_Init+0x2d8>)
 8005c06:	f001 f867 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_RELAY3_Pin CN1_19_ZSPD_Pin PB4_SPI3_MISO_SPARE_Pin Input_JP7_Pin */
  GPIO_InitStruct.Pin = PB12_RELAY3_Pin|CN1_19_ZSPD_Pin|PB4_SPI3_MISO_SPARE_Pin|Input_JP7_Pin;
 8005c0a:	f241 2318 	movw	r3, #4632	; 0x1218
 8005c0e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c10:	2300      	movs	r3, #0
 8005c12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c14:	2300      	movs	r3, #0
 8005c16:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c18:	f107 031c 	add.w	r3, r7, #28
 8005c1c:	4619      	mov	r1, r3
 8005c1e:	4825      	ldr	r0, [pc, #148]	; (8005cb4 <MX_GPIO_Init+0x2d8>)
 8005c20:	f001 f85a 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10_ESP32_EN_Pin */
  GPIO_InitStruct.Pin = PD10_ESP32_EN_Pin;
 8005c24:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005c28:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005c2a:	2311      	movs	r3, #17
 8005c2c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c2e:	2300      	movs	r3, #0
 8005c30:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c32:	2300      	movs	r3, #0
 8005c34:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD10_ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 8005c36:	f107 031c 	add.w	r3, r7, #28
 8005c3a:	4619      	mov	r1, r3
 8005c3c:	481e      	ldr	r0, [pc, #120]	; (8005cb8 <MX_GPIO_Init+0x2dc>)
 8005c3e:	f001 f84b 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_ESP32_BOOT_SEL_Pin PD13_MON1_2_EN_Pin PD15_SPDIN_TRQIN_EN_Pin */
  GPIO_InitStruct.Pin = PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin;
 8005c42:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8005c46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005c48:	2301      	movs	r3, #1
 8005c4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c4c:	2300      	movs	r3, #0
 8005c4e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005c50:	2300      	movs	r3, #0
 8005c52:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c54:	f107 031c 	add.w	r3, r7, #28
 8005c58:	4619      	mov	r1, r3
 8005c5a:	4817      	ldr	r0, [pc, #92]	; (8005cb8 <MX_GPIO_Init+0x2dc>)
 8005c5c:	f001 f83c 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12_Input_J6_Pin PD14_Input_J6_Pin Input0_J6_DAC_ADC_Pin Input1_J6_DAC_ADC_Pin
                           PD7_A_CODE2_Pin */
  GPIO_InitStruct.Pin = PD12_Input_J6_Pin|PD14_Input_J6_Pin|Input0_J6_DAC_ADC_Pin|Input1_J6_DAC_ADC_Pin
 8005c60:	f245 0383 	movw	r3, #20611	; 0x5083
 8005c64:	61fb      	str	r3, [r7, #28]
                          |PD7_A_CODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005c66:	2300      	movs	r3, #0
 8005c68:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005c6a:	2300      	movs	r3, #0
 8005c6c:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005c6e:	f107 031c 	add.w	r3, r7, #28
 8005c72:	4619      	mov	r1, r3
 8005c74:	4810      	ldr	r0, [pc, #64]	; (8005cb8 <MX_GPIO_Init+0x2dc>)
 8005c76:	f001 f82f 	bl	8006cd8 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_I2C1_SDA_DAC_ADC_Pin PB8_I2C1_SCL_DAC_ADC_Pin */
  GPIO_InitStruct.Pin = PB7_I2C1_SDA_DAC_ADC_Pin|PB8_I2C1_SCL_DAC_ADC_Pin;
 8005c7a:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005c7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005c80:	2312      	movs	r3, #18
 8005c82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005c84:	2301      	movs	r3, #1
 8005c86:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005c88:	2303      	movs	r3, #3
 8005c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005c8c:	2304      	movs	r3, #4
 8005c8e:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005c90:	f107 031c 	add.w	r3, r7, #28
 8005c94:	4619      	mov	r1, r3
 8005c96:	4807      	ldr	r0, [pc, #28]	; (8005cb4 <MX_GPIO_Init+0x2d8>)
 8005c98:	f001 f81e 	bl	8006cd8 <HAL_GPIO_Init>

}
 8005c9c:	bf00      	nop
 8005c9e:	3730      	adds	r7, #48	; 0x30
 8005ca0:	46bd      	mov	sp, r7
 8005ca2:	bd80      	pop	{r7, pc}
 8005ca4:	40023800 	.word	0x40023800
 8005ca8:	40021000 	.word	0x40021000
 8005cac:	40020800 	.word	0x40020800
 8005cb0:	40020000 	.word	0x40020000
 8005cb4:	40020400 	.word	0x40020400
 8005cb8:	40020c00 	.word	0x40020c00

08005cbc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005cbc:	b480      	push	{r7}
 8005cbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8005cc0:	e7fe      	b.n	8005cc0 <Error_Handler+0x4>
	...

08005cc4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005cc4:	b480      	push	{r7}
 8005cc6:	b083      	sub	sp, #12
 8005cc8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005cca:	2300      	movs	r3, #0
 8005ccc:	607b      	str	r3, [r7, #4]
 8005cce:	4b10      	ldr	r3, [pc, #64]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cd0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cd2:	4a0f      	ldr	r2, [pc, #60]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cd4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005cd8:	6453      	str	r3, [r2, #68]	; 0x44
 8005cda:	4b0d      	ldr	r3, [pc, #52]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cdc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005cde:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005ce2:	607b      	str	r3, [r7, #4]
 8005ce4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005ce6:	2300      	movs	r3, #0
 8005ce8:	603b      	str	r3, [r7, #0]
 8005cea:	4b09      	ldr	r3, [pc, #36]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	4a08      	ldr	r2, [pc, #32]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cf0:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005cf4:	6413      	str	r3, [r2, #64]	; 0x40
 8005cf6:	4b06      	ldr	r3, [pc, #24]	; (8005d10 <HAL_MspInit+0x4c>)
 8005cf8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cfa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005cfe:	603b      	str	r3, [r7, #0]
 8005d00:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005d02:	bf00      	nop
 8005d04:	370c      	adds	r7, #12
 8005d06:	46bd      	mov	sp, r7
 8005d08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d0c:	4770      	bx	lr
 8005d0e:	bf00      	nop
 8005d10:	40023800 	.word	0x40023800

08005d14 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005d14:	b580      	push	{r7, lr}
 8005d16:	b08c      	sub	sp, #48	; 0x30
 8005d18:	af00      	add	r7, sp, #0
 8005d1a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d1c:	f107 031c 	add.w	r3, r7, #28
 8005d20:	2200      	movs	r2, #0
 8005d22:	601a      	str	r2, [r3, #0]
 8005d24:	605a      	str	r2, [r3, #4]
 8005d26:	609a      	str	r2, [r3, #8]
 8005d28:	60da      	str	r2, [r3, #12]
 8005d2a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8005d2c:	687b      	ldr	r3, [r7, #4]
 8005d2e:	681b      	ldr	r3, [r3, #0]
 8005d30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005d34:	d12c      	bne.n	8005d90 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005d36:	2300      	movs	r3, #0
 8005d38:	61bb      	str	r3, [r7, #24]
 8005d3a:	4b30      	ldr	r3, [pc, #192]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005d3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d3e:	4a2f      	ldr	r2, [pc, #188]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005d40:	f043 0301 	orr.w	r3, r3, #1
 8005d44:	6413      	str	r3, [r2, #64]	; 0x40
 8005d46:	4b2d      	ldr	r3, [pc, #180]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005d48:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d4a:	f003 0301 	and.w	r3, r3, #1
 8005d4e:	61bb      	str	r3, [r7, #24]
 8005d50:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005d52:	2300      	movs	r3, #0
 8005d54:	617b      	str	r3, [r7, #20]
 8005d56:	4b29      	ldr	r3, [pc, #164]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005d58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d5a:	4a28      	ldr	r2, [pc, #160]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005d5c:	f043 0301 	orr.w	r3, r3, #1
 8005d60:	6313      	str	r3, [r2, #48]	; 0x30
 8005d62:	4b26      	ldr	r3, [pc, #152]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005d64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d66:	f003 0301 	and.w	r3, r3, #1
 8005d6a:	617b      	str	r3, [r7, #20]
 8005d6c:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PA1_TIM2_CH2_ENC_PBO_Pin|PA5_TIM2_CH1_ENC_PAO_Pin;
 8005d6e:	2322      	movs	r3, #34	; 0x22
 8005d70:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d72:	2302      	movs	r3, #2
 8005d74:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d76:	2300      	movs	r3, #0
 8005d78:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d7a:	2300      	movs	r3, #0
 8005d7c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005d7e:	2301      	movs	r3, #1
 8005d80:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005d82:	f107 031c 	add.w	r3, r7, #28
 8005d86:	4619      	mov	r1, r3
 8005d88:	481d      	ldr	r0, [pc, #116]	; (8005e00 <HAL_TIM_Base_MspInit+0xec>)
 8005d8a:	f000 ffa5 	bl	8006cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005d8e:	e030      	b.n	8005df2 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	681b      	ldr	r3, [r3, #0]
 8005d94:	4a1b      	ldr	r2, [pc, #108]	; (8005e04 <HAL_TIM_Base_MspInit+0xf0>)
 8005d96:	4293      	cmp	r3, r2
 8005d98:	d12b      	bne.n	8005df2 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005d9a:	2300      	movs	r3, #0
 8005d9c:	613b      	str	r3, [r7, #16]
 8005d9e:	4b17      	ldr	r3, [pc, #92]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005da0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005da2:	4a16      	ldr	r2, [pc, #88]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005da4:	f043 0302 	orr.w	r3, r3, #2
 8005da8:	6413      	str	r3, [r2, #64]	; 0x40
 8005daa:	4b14      	ldr	r3, [pc, #80]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005dac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005dae:	f003 0302 	and.w	r3, r3, #2
 8005db2:	613b      	str	r3, [r7, #16]
 8005db4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005db6:	2300      	movs	r3, #0
 8005db8:	60fb      	str	r3, [r7, #12]
 8005dba:	4b10      	ldr	r3, [pc, #64]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005dbc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dbe:	4a0f      	ldr	r2, [pc, #60]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005dc0:	f043 0301 	orr.w	r3, r3, #1
 8005dc4:	6313      	str	r3, [r2, #48]	; 0x30
 8005dc6:	4b0d      	ldr	r3, [pc, #52]	; (8005dfc <HAL_TIM_Base_MspInit+0xe8>)
 8005dc8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005dca:	f003 0301 	and.w	r3, r3, #1
 8005dce:	60fb      	str	r3, [r7, #12]
 8005dd0:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PA6_TIM3_CH1_ENC_PZO_Pin;
 8005dd2:	2340      	movs	r3, #64	; 0x40
 8005dd4:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dd6:	2302      	movs	r3, #2
 8005dd8:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dda:	2300      	movs	r3, #0
 8005ddc:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005dde:	2300      	movs	r3, #0
 8005de0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005de2:	2302      	movs	r3, #2
 8005de4:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PA6_TIM3_CH1_ENC_PZO_GPIO_Port, &GPIO_InitStruct);
 8005de6:	f107 031c 	add.w	r3, r7, #28
 8005dea:	4619      	mov	r1, r3
 8005dec:	4804      	ldr	r0, [pc, #16]	; (8005e00 <HAL_TIM_Base_MspInit+0xec>)
 8005dee:	f000 ff73 	bl	8006cd8 <HAL_GPIO_Init>
}
 8005df2:	bf00      	nop
 8005df4:	3730      	adds	r7, #48	; 0x30
 8005df6:	46bd      	mov	sp, r7
 8005df8:	bd80      	pop	{r7, pc}
 8005dfa:	bf00      	nop
 8005dfc:	40023800 	.word	0x40023800
 8005e00:	40020000 	.word	0x40020000
 8005e04:	40000400 	.word	0x40000400

08005e08 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005e08:	b580      	push	{r7, lr}
 8005e0a:	b08e      	sub	sp, #56	; 0x38
 8005e0c:	af00      	add	r7, sp, #0
 8005e0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005e10:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e14:	2200      	movs	r2, #0
 8005e16:	601a      	str	r2, [r3, #0]
 8005e18:	605a      	str	r2, [r3, #4]
 8005e1a:	609a      	str	r2, [r3, #8]
 8005e1c:	60da      	str	r2, [r3, #12]
 8005e1e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005e20:	687b      	ldr	r3, [r7, #4]
 8005e22:	681b      	ldr	r3, [r3, #0]
 8005e24:	4a5b      	ldr	r2, [pc, #364]	; (8005f94 <HAL_UART_MspInit+0x18c>)
 8005e26:	4293      	cmp	r3, r2
 8005e28:	d14b      	bne.n	8005ec2 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005e2a:	2300      	movs	r3, #0
 8005e2c:	623b      	str	r3, [r7, #32]
 8005e2e:	4b5a      	ldr	r3, [pc, #360]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005e30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e32:	4a59      	ldr	r2, [pc, #356]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005e34:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005e38:	6413      	str	r3, [r2, #64]	; 0x40
 8005e3a:	4b57      	ldr	r3, [pc, #348]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005e3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e3e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005e42:	623b      	str	r3, [r7, #32]
 8005e44:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e46:	2300      	movs	r3, #0
 8005e48:	61fb      	str	r3, [r7, #28]
 8005e4a:	4b53      	ldr	r3, [pc, #332]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e4e:	4a52      	ldr	r2, [pc, #328]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005e50:	f043 0304 	orr.w	r3, r3, #4
 8005e54:	6313      	str	r3, [r2, #48]	; 0x30
 8005e56:	4b50      	ldr	r3, [pc, #320]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005e58:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e5a:	f003 0304 	and.w	r3, r3, #4
 8005e5e:	61fb      	str	r3, [r7, #28]
 8005e60:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e62:	2300      	movs	r3, #0
 8005e64:	61bb      	str	r3, [r7, #24]
 8005e66:	4b4c      	ldr	r3, [pc, #304]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005e68:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e6a:	4a4b      	ldr	r2, [pc, #300]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005e6c:	f043 0308 	orr.w	r3, r3, #8
 8005e70:	6313      	str	r3, [r2, #48]	; 0x30
 8005e72:	4b49      	ldr	r3, [pc, #292]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005e74:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e76:	f003 0308 	and.w	r3, r3, #8
 8005e7a:	61bb      	str	r3, [r7, #24]
 8005e7c:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = PC12_UART5_TX_485_MCU_DRV_Pin;
 8005e7e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005e82:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e84:	2302      	movs	r3, #2
 8005e86:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e88:	2300      	movs	r3, #0
 8005e8a:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e8c:	2303      	movs	r3, #3
 8005e8e:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005e90:	2308      	movs	r3, #8
 8005e92:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PC12_UART5_TX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8005e94:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e98:	4619      	mov	r1, r3
 8005e9a:	4840      	ldr	r0, [pc, #256]	; (8005f9c <HAL_UART_MspInit+0x194>)
 8005e9c:	f000 ff1c 	bl	8006cd8 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD2_UART5_RX_485_MCU_DRV_Pin;
 8005ea0:	2304      	movs	r3, #4
 8005ea2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ea4:	2302      	movs	r3, #2
 8005ea6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eac:	2303      	movs	r3, #3
 8005eae:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005eb0:	2308      	movs	r3, #8
 8005eb2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PD2_UART5_RX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8005eb4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005eb8:	4619      	mov	r1, r3
 8005eba:	4839      	ldr	r0, [pc, #228]	; (8005fa0 <HAL_UART_MspInit+0x198>)
 8005ebc:	f000 ff0c 	bl	8006cd8 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005ec0:	e063      	b.n	8005f8a <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	681b      	ldr	r3, [r3, #0]
 8005ec6:	4a37      	ldr	r2, [pc, #220]	; (8005fa4 <HAL_UART_MspInit+0x19c>)
 8005ec8:	4293      	cmp	r3, r2
 8005eca:	d12d      	bne.n	8005f28 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005ecc:	2300      	movs	r3, #0
 8005ece:	617b      	str	r3, [r7, #20]
 8005ed0:	4b31      	ldr	r3, [pc, #196]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005ed2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ed4:	4a30      	ldr	r2, [pc, #192]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005ed6:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005eda:	6413      	str	r3, [r2, #64]	; 0x40
 8005edc:	4b2e      	ldr	r3, [pc, #184]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005ede:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ee0:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005ee4:	617b      	str	r3, [r7, #20]
 8005ee6:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	4b2a      	ldr	r3, [pc, #168]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005eee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ef0:	4a29      	ldr	r2, [pc, #164]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005ef2:	f043 0308 	orr.w	r3, r3, #8
 8005ef6:	6313      	str	r3, [r2, #48]	; 0x30
 8005ef8:	4b27      	ldr	r3, [pc, #156]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005efa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005efc:	f003 0308 	and.w	r3, r3, #8
 8005f00:	613b      	str	r3, [r7, #16]
 8005f02:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005f04:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005f08:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f0a:	2302      	movs	r3, #2
 8005f0c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f0e:	2300      	movs	r3, #0
 8005f10:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f12:	2303      	movs	r3, #3
 8005f14:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005f16:	2307      	movs	r3, #7
 8005f18:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005f1a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f1e:	4619      	mov	r1, r3
 8005f20:	481f      	ldr	r0, [pc, #124]	; (8005fa0 <HAL_UART_MspInit+0x198>)
 8005f22:	f000 fed9 	bl	8006cd8 <HAL_GPIO_Init>
}
 8005f26:	e030      	b.n	8005f8a <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART6)
 8005f28:	687b      	ldr	r3, [r7, #4]
 8005f2a:	681b      	ldr	r3, [r3, #0]
 8005f2c:	4a1e      	ldr	r2, [pc, #120]	; (8005fa8 <HAL_UART_MspInit+0x1a0>)
 8005f2e:	4293      	cmp	r3, r2
 8005f30:	d12b      	bne.n	8005f8a <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005f32:	2300      	movs	r3, #0
 8005f34:	60fb      	str	r3, [r7, #12]
 8005f36:	4b18      	ldr	r3, [pc, #96]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005f38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f3a:	4a17      	ldr	r2, [pc, #92]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005f3c:	f043 0320 	orr.w	r3, r3, #32
 8005f40:	6453      	str	r3, [r2, #68]	; 0x44
 8005f42:	4b15      	ldr	r3, [pc, #84]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005f44:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005f46:	f003 0320 	and.w	r3, r3, #32
 8005f4a:	60fb      	str	r3, [r7, #12]
 8005f4c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005f4e:	2300      	movs	r3, #0
 8005f50:	60bb      	str	r3, [r7, #8]
 8005f52:	4b11      	ldr	r3, [pc, #68]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005f54:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f56:	4a10      	ldr	r2, [pc, #64]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005f58:	f043 0304 	orr.w	r3, r3, #4
 8005f5c:	6313      	str	r3, [r2, #48]	; 0x30
 8005f5e:	4b0e      	ldr	r3, [pc, #56]	; (8005f98 <HAL_UART_MspInit+0x190>)
 8005f60:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005f62:	f003 0304 	and.w	r3, r3, #4
 8005f66:	60bb      	str	r3, [r7, #8]
 8005f68:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005f6a:	23c0      	movs	r3, #192	; 0xc0
 8005f6c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005f6e:	2302      	movs	r3, #2
 8005f70:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005f72:	2300      	movs	r3, #0
 8005f74:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005f76:	2303      	movs	r3, #3
 8005f78:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005f7a:	2308      	movs	r3, #8
 8005f7c:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005f7e:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005f82:	4619      	mov	r1, r3
 8005f84:	4805      	ldr	r0, [pc, #20]	; (8005f9c <HAL_UART_MspInit+0x194>)
 8005f86:	f000 fea7 	bl	8006cd8 <HAL_GPIO_Init>
}
 8005f8a:	bf00      	nop
 8005f8c:	3738      	adds	r7, #56	; 0x38
 8005f8e:	46bd      	mov	sp, r7
 8005f90:	bd80      	pop	{r7, pc}
 8005f92:	bf00      	nop
 8005f94:	40005000 	.word	0x40005000
 8005f98:	40023800 	.word	0x40023800
 8005f9c:	40020800 	.word	0x40020800
 8005fa0:	40020c00 	.word	0x40020c00
 8005fa4:	40004800 	.word	0x40004800
 8005fa8:	40011400 	.word	0x40011400

08005fac <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005fac:	b480      	push	{r7}
 8005fae:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005fb0:	e7fe      	b.n	8005fb0 <NMI_Handler+0x4>

08005fb2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005fb2:	b480      	push	{r7}
 8005fb4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005fb6:	e7fe      	b.n	8005fb6 <HardFault_Handler+0x4>

08005fb8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005fb8:	b480      	push	{r7}
 8005fba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005fbc:	e7fe      	b.n	8005fbc <MemManage_Handler+0x4>

08005fbe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005fbe:	b480      	push	{r7}
 8005fc0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005fc2:	e7fe      	b.n	8005fc2 <BusFault_Handler+0x4>

08005fc4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005fc4:	b480      	push	{r7}
 8005fc6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005fc8:	e7fe      	b.n	8005fc8 <UsageFault_Handler+0x4>

08005fca <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005fca:	b480      	push	{r7}
 8005fcc:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005fce:	bf00      	nop
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fd6:	4770      	bx	lr

08005fd8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005fd8:	b480      	push	{r7}
 8005fda:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005fdc:	bf00      	nop
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005fe6:	b480      	push	{r7}
 8005fe8:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005fea:	bf00      	nop
 8005fec:	46bd      	mov	sp, r7
 8005fee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ff2:	4770      	bx	lr

08005ff4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005ff4:	b580      	push	{r7, lr}
 8005ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005ff8:	f000 f988 	bl	800630c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005ffc:	bf00      	nop
 8005ffe:	bd80      	pop	{r7, pc}

08006000 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8006000:	b580      	push	{r7, lr}
 8006002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8006004:	4802      	ldr	r0, [pc, #8]	; (8006010 <TIM2_IRQHandler+0x10>)
 8006006:	f001 fdef 	bl	8007be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 800600a:	bf00      	nop
 800600c:	bd80      	pop	{r7, pc}
 800600e:	bf00      	nop
 8006010:	20000220 	.word	0x20000220

08006014 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8006014:	b580      	push	{r7, lr}
 8006016:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8006018:	4802      	ldr	r0, [pc, #8]	; (8006024 <TIM3_IRQHandler+0x10>)
 800601a:	f001 fde5 	bl	8007be8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 800601e:	bf00      	nop
 8006020:	bd80      	pop	{r7, pc}
 8006022:	bf00      	nop
 8006024:	20000268 	.word	0x20000268

08006028 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8006028:	b580      	push	{r7, lr}
 800602a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 800602c:	4802      	ldr	r0, [pc, #8]	; (8006038 <USART3_IRQHandler+0x10>)
 800602e:	f002 fc73 	bl	8008918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8006032:	bf00      	nop
 8006034:	bd80      	pop	{r7, pc}
 8006036:	bf00      	nop
 8006038:	200002f4 	.word	0x200002f4

0800603c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 800603c:	b580      	push	{r7, lr}
 800603e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8006040:	4802      	ldr	r0, [pc, #8]	; (800604c <UART5_IRQHandler+0x10>)
 8006042:	f002 fc69 	bl	8008918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8006046:	bf00      	nop
 8006048:	bd80      	pop	{r7, pc}
 800604a:	bf00      	nop
 800604c:	200002b0 	.word	0x200002b0

08006050 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8006050:	b580      	push	{r7, lr}
 8006052:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8006054:	4802      	ldr	r0, [pc, #8]	; (8006060 <USART6_IRQHandler+0x10>)
 8006056:	f002 fc5f 	bl	8008918 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 800605a:	bf00      	nop
 800605c:	bd80      	pop	{r7, pc}
 800605e:	bf00      	nop
 8006060:	20000338 	.word	0x20000338

08006064 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8006064:	b480      	push	{r7}
 8006066:	af00      	add	r7, sp, #0
	return 1;
 8006068:	2301      	movs	r3, #1
}
 800606a:	4618      	mov	r0, r3
 800606c:	46bd      	mov	sp, r7
 800606e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006072:	4770      	bx	lr

08006074 <_kill>:

int _kill(int pid, int sig)
{
 8006074:	b580      	push	{r7, lr}
 8006076:	b082      	sub	sp, #8
 8006078:	af00      	add	r7, sp, #0
 800607a:	6078      	str	r0, [r7, #4]
 800607c:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 800607e:	f003 fbb3 	bl	80097e8 <__errno>
 8006082:	4603      	mov	r3, r0
 8006084:	2216      	movs	r2, #22
 8006086:	601a      	str	r2, [r3, #0]
	return -1;
 8006088:	f04f 33ff 	mov.w	r3, #4294967295
}
 800608c:	4618      	mov	r0, r3
 800608e:	3708      	adds	r7, #8
 8006090:	46bd      	mov	sp, r7
 8006092:	bd80      	pop	{r7, pc}

08006094 <_exit>:

void _exit (int status)
{
 8006094:	b580      	push	{r7, lr}
 8006096:	b082      	sub	sp, #8
 8006098:	af00      	add	r7, sp, #0
 800609a:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 800609c:	f04f 31ff 	mov.w	r1, #4294967295
 80060a0:	6878      	ldr	r0, [r7, #4]
 80060a2:	f7ff ffe7 	bl	8006074 <_kill>
	while (1) {}		/* Make sure we hang here */
 80060a6:	e7fe      	b.n	80060a6 <_exit+0x12>

080060a8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80060a8:	b580      	push	{r7, lr}
 80060aa:	b086      	sub	sp, #24
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060b4:	2300      	movs	r3, #0
 80060b6:	617b      	str	r3, [r7, #20]
 80060b8:	e00a      	b.n	80060d0 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 80060ba:	f3af 8000 	nop.w
 80060be:	4601      	mov	r1, r0
 80060c0:	68bb      	ldr	r3, [r7, #8]
 80060c2:	1c5a      	adds	r2, r3, #1
 80060c4:	60ba      	str	r2, [r7, #8]
 80060c6:	b2ca      	uxtb	r2, r1
 80060c8:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	3301      	adds	r3, #1
 80060ce:	617b      	str	r3, [r7, #20]
 80060d0:	697a      	ldr	r2, [r7, #20]
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	429a      	cmp	r2, r3
 80060d6:	dbf0      	blt.n	80060ba <_read+0x12>
	}

return len;
 80060d8:	687b      	ldr	r3, [r7, #4]
}
 80060da:	4618      	mov	r0, r3
 80060dc:	3718      	adds	r7, #24
 80060de:	46bd      	mov	sp, r7
 80060e0:	bd80      	pop	{r7, pc}

080060e2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80060e2:	b580      	push	{r7, lr}
 80060e4:	b086      	sub	sp, #24
 80060e6:	af00      	add	r7, sp, #0
 80060e8:	60f8      	str	r0, [r7, #12]
 80060ea:	60b9      	str	r1, [r7, #8]
 80060ec:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80060ee:	2300      	movs	r3, #0
 80060f0:	617b      	str	r3, [r7, #20]
 80060f2:	e009      	b.n	8006108 <_write+0x26>
	{
		__io_putchar(*ptr++);
 80060f4:	68bb      	ldr	r3, [r7, #8]
 80060f6:	1c5a      	adds	r2, r3, #1
 80060f8:	60ba      	str	r2, [r7, #8]
 80060fa:	781b      	ldrb	r3, [r3, #0]
 80060fc:	4618      	mov	r0, r3
 80060fe:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006102:	697b      	ldr	r3, [r7, #20]
 8006104:	3301      	adds	r3, #1
 8006106:	617b      	str	r3, [r7, #20]
 8006108:	697a      	ldr	r2, [r7, #20]
 800610a:	687b      	ldr	r3, [r7, #4]
 800610c:	429a      	cmp	r2, r3
 800610e:	dbf1      	blt.n	80060f4 <_write+0x12>
	}
	return len;
 8006110:	687b      	ldr	r3, [r7, #4]
}
 8006112:	4618      	mov	r0, r3
 8006114:	3718      	adds	r7, #24
 8006116:	46bd      	mov	sp, r7
 8006118:	bd80      	pop	{r7, pc}

0800611a <_close>:

int _close(int file)
{
 800611a:	b480      	push	{r7}
 800611c:	b083      	sub	sp, #12
 800611e:	af00      	add	r7, sp, #0
 8006120:	6078      	str	r0, [r7, #4]
	return -1;
 8006122:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006126:	4618      	mov	r0, r3
 8006128:	370c      	adds	r7, #12
 800612a:	46bd      	mov	sp, r7
 800612c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006130:	4770      	bx	lr

08006132 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006132:	b480      	push	{r7}
 8006134:	b083      	sub	sp, #12
 8006136:	af00      	add	r7, sp, #0
 8006138:	6078      	str	r0, [r7, #4]
 800613a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800613c:	683b      	ldr	r3, [r7, #0]
 800613e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006142:	605a      	str	r2, [r3, #4]
	return 0;
 8006144:	2300      	movs	r3, #0
}
 8006146:	4618      	mov	r0, r3
 8006148:	370c      	adds	r7, #12
 800614a:	46bd      	mov	sp, r7
 800614c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006150:	4770      	bx	lr

08006152 <_isatty>:

int _isatty(int file)
{
 8006152:	b480      	push	{r7}
 8006154:	b083      	sub	sp, #12
 8006156:	af00      	add	r7, sp, #0
 8006158:	6078      	str	r0, [r7, #4]
	return 1;
 800615a:	2301      	movs	r3, #1
}
 800615c:	4618      	mov	r0, r3
 800615e:	370c      	adds	r7, #12
 8006160:	46bd      	mov	sp, r7
 8006162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006166:	4770      	bx	lr

08006168 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8006168:	b480      	push	{r7}
 800616a:	b085      	sub	sp, #20
 800616c:	af00      	add	r7, sp, #0
 800616e:	60f8      	str	r0, [r7, #12]
 8006170:	60b9      	str	r1, [r7, #8]
 8006172:	607a      	str	r2, [r7, #4]
	return 0;
 8006174:	2300      	movs	r3, #0
}
 8006176:	4618      	mov	r0, r3
 8006178:	3714      	adds	r7, #20
 800617a:	46bd      	mov	sp, r7
 800617c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006180:	4770      	bx	lr
	...

08006184 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8006184:	b580      	push	{r7, lr}
 8006186:	b086      	sub	sp, #24
 8006188:	af00      	add	r7, sp, #0
 800618a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800618c:	4a14      	ldr	r2, [pc, #80]	; (80061e0 <_sbrk+0x5c>)
 800618e:	4b15      	ldr	r3, [pc, #84]	; (80061e4 <_sbrk+0x60>)
 8006190:	1ad3      	subs	r3, r2, r3
 8006192:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8006194:	697b      	ldr	r3, [r7, #20]
 8006196:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8006198:	4b13      	ldr	r3, [pc, #76]	; (80061e8 <_sbrk+0x64>)
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	2b00      	cmp	r3, #0
 800619e:	d102      	bne.n	80061a6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80061a0:	4b11      	ldr	r3, [pc, #68]	; (80061e8 <_sbrk+0x64>)
 80061a2:	4a12      	ldr	r2, [pc, #72]	; (80061ec <_sbrk+0x68>)
 80061a4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80061a6:	4b10      	ldr	r3, [pc, #64]	; (80061e8 <_sbrk+0x64>)
 80061a8:	681a      	ldr	r2, [r3, #0]
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	4413      	add	r3, r2
 80061ae:	693a      	ldr	r2, [r7, #16]
 80061b0:	429a      	cmp	r2, r3
 80061b2:	d207      	bcs.n	80061c4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80061b4:	f003 fb18 	bl	80097e8 <__errno>
 80061b8:	4603      	mov	r3, r0
 80061ba:	220c      	movs	r2, #12
 80061bc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80061be:	f04f 33ff 	mov.w	r3, #4294967295
 80061c2:	e009      	b.n	80061d8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80061c4:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <_sbrk+0x64>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80061ca:	4b07      	ldr	r3, [pc, #28]	; (80061e8 <_sbrk+0x64>)
 80061cc:	681a      	ldr	r2, [r3, #0]
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	4413      	add	r3, r2
 80061d2:	4a05      	ldr	r2, [pc, #20]	; (80061e8 <_sbrk+0x64>)
 80061d4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80061d6:	68fb      	ldr	r3, [r7, #12]
}
 80061d8:	4618      	mov	r0, r3
 80061da:	3718      	adds	r7, #24
 80061dc:	46bd      	mov	sp, r7
 80061de:	bd80      	pop	{r7, pc}
 80061e0:	20020000 	.word	0x20020000
 80061e4:	00000400 	.word	0x00000400
 80061e8:	2000054c 	.word	0x2000054c
 80061ec:	20000588 	.word	0x20000588

080061f0 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80061f0:	b480      	push	{r7}
 80061f2:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80061f4:	4b06      	ldr	r3, [pc, #24]	; (8006210 <SystemInit+0x20>)
 80061f6:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 80061fa:	4a05      	ldr	r2, [pc, #20]	; (8006210 <SystemInit+0x20>)
 80061fc:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006200:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006204:	bf00      	nop
 8006206:	46bd      	mov	sp, r7
 8006208:	f85d 7b04 	ldr.w	r7, [sp], #4
 800620c:	4770      	bx	lr
 800620e:	bf00      	nop
 8006210:	e000ed00 	.word	0xe000ed00

08006214 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006214:	f8df d034 	ldr.w	sp, [pc, #52]	; 800624c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006218:	480d      	ldr	r0, [pc, #52]	; (8006250 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800621a:	490e      	ldr	r1, [pc, #56]	; (8006254 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800621c:	4a0e      	ldr	r2, [pc, #56]	; (8006258 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800621e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006220:	e002      	b.n	8006228 <LoopCopyDataInit>

08006222 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006222:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006224:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006226:	3304      	adds	r3, #4

08006228 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006228:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800622a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800622c:	d3f9      	bcc.n	8006222 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800622e:	4a0b      	ldr	r2, [pc, #44]	; (800625c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006230:	4c0b      	ldr	r4, [pc, #44]	; (8006260 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006232:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006234:	e001      	b.n	800623a <LoopFillZerobss>

08006236 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006236:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006238:	3204      	adds	r2, #4

0800623a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800623a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800623c:	d3fb      	bcc.n	8006236 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800623e:	f7ff ffd7 	bl	80061f0 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006242:	f003 fad7 	bl	80097f4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006246:	f7fe fd97 	bl	8004d78 <main>
  bx  lr    
 800624a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800624c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006250:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006254:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8006258:	0800e548 	.word	0x0800e548
  ldr r2, =_sbss
 800625c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8006260:	20000584 	.word	0x20000584

08006264 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8006264:	e7fe      	b.n	8006264 <ADC_IRQHandler>
	...

08006268 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8006268:	b580      	push	{r7, lr}
 800626a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800626c:	4b0e      	ldr	r3, [pc, #56]	; (80062a8 <HAL_Init+0x40>)
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	4a0d      	ldr	r2, [pc, #52]	; (80062a8 <HAL_Init+0x40>)
 8006272:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006276:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8006278:	4b0b      	ldr	r3, [pc, #44]	; (80062a8 <HAL_Init+0x40>)
 800627a:	681b      	ldr	r3, [r3, #0]
 800627c:	4a0a      	ldr	r2, [pc, #40]	; (80062a8 <HAL_Init+0x40>)
 800627e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006282:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8006284:	4b08      	ldr	r3, [pc, #32]	; (80062a8 <HAL_Init+0x40>)
 8006286:	681b      	ldr	r3, [r3, #0]
 8006288:	4a07      	ldr	r2, [pc, #28]	; (80062a8 <HAL_Init+0x40>)
 800628a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800628e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8006290:	2003      	movs	r0, #3
 8006292:	f000 f965 	bl	8006560 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8006296:	2000      	movs	r0, #0
 8006298:	f000 f808 	bl	80062ac <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800629c:	f7ff fd12 	bl	8005cc4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80062a0:	2300      	movs	r3, #0
}
 80062a2:	4618      	mov	r0, r3
 80062a4:	bd80      	pop	{r7, pc}
 80062a6:	bf00      	nop
 80062a8:	40023c00 	.word	0x40023c00

080062ac <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80062ac:	b580      	push	{r7, lr}
 80062ae:	b082      	sub	sp, #8
 80062b0:	af00      	add	r7, sp, #0
 80062b2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80062b4:	4b12      	ldr	r3, [pc, #72]	; (8006300 <HAL_InitTick+0x54>)
 80062b6:	681a      	ldr	r2, [r3, #0]
 80062b8:	4b12      	ldr	r3, [pc, #72]	; (8006304 <HAL_InitTick+0x58>)
 80062ba:	781b      	ldrb	r3, [r3, #0]
 80062bc:	4619      	mov	r1, r3
 80062be:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80062c2:	fbb3 f3f1 	udiv	r3, r3, r1
 80062c6:	fbb2 f3f3 	udiv	r3, r2, r3
 80062ca:	4618      	mov	r0, r3
 80062cc:	f000 f981 	bl	80065d2 <HAL_SYSTICK_Config>
 80062d0:	4603      	mov	r3, r0
 80062d2:	2b00      	cmp	r3, #0
 80062d4:	d001      	beq.n	80062da <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80062d6:	2301      	movs	r3, #1
 80062d8:	e00e      	b.n	80062f8 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	2b0f      	cmp	r3, #15
 80062de:	d80a      	bhi.n	80062f6 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80062e0:	2200      	movs	r2, #0
 80062e2:	6879      	ldr	r1, [r7, #4]
 80062e4:	f04f 30ff 	mov.w	r0, #4294967295
 80062e8:	f000 f945 	bl	8006576 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80062ec:	4a06      	ldr	r2, [pc, #24]	; (8006308 <HAL_InitTick+0x5c>)
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80062f2:	2300      	movs	r3, #0
 80062f4:	e000      	b.n	80062f8 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80062f6:	2301      	movs	r3, #1
}
 80062f8:	4618      	mov	r0, r3
 80062fa:	3708      	adds	r7, #8
 80062fc:	46bd      	mov	sp, r7
 80062fe:	bd80      	pop	{r7, pc}
 8006300:	20000010 	.word	0x20000010
 8006304:	20000018 	.word	0x20000018
 8006308:	20000014 	.word	0x20000014

0800630c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800630c:	b480      	push	{r7}
 800630e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006310:	4b06      	ldr	r3, [pc, #24]	; (800632c <HAL_IncTick+0x20>)
 8006312:	781b      	ldrb	r3, [r3, #0]
 8006314:	461a      	mov	r2, r3
 8006316:	4b06      	ldr	r3, [pc, #24]	; (8006330 <HAL_IncTick+0x24>)
 8006318:	681b      	ldr	r3, [r3, #0]
 800631a:	4413      	add	r3, r2
 800631c:	4a04      	ldr	r2, [pc, #16]	; (8006330 <HAL_IncTick+0x24>)
 800631e:	6013      	str	r3, [r2, #0]
}
 8006320:	bf00      	nop
 8006322:	46bd      	mov	sp, r7
 8006324:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006328:	4770      	bx	lr
 800632a:	bf00      	nop
 800632c:	20000018 	.word	0x20000018
 8006330:	20000550 	.word	0x20000550

08006334 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006334:	b480      	push	{r7}
 8006336:	af00      	add	r7, sp, #0
  return uwTick;
 8006338:	4b03      	ldr	r3, [pc, #12]	; (8006348 <HAL_GetTick+0x14>)
 800633a:	681b      	ldr	r3, [r3, #0]
}
 800633c:	4618      	mov	r0, r3
 800633e:	46bd      	mov	sp, r7
 8006340:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006344:	4770      	bx	lr
 8006346:	bf00      	nop
 8006348:	20000550 	.word	0x20000550

0800634c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800634c:	b580      	push	{r7, lr}
 800634e:	b084      	sub	sp, #16
 8006350:	af00      	add	r7, sp, #0
 8006352:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006354:	f7ff ffee 	bl	8006334 <HAL_GetTick>
 8006358:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800635a:	687b      	ldr	r3, [r7, #4]
 800635c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800635e:	68fb      	ldr	r3, [r7, #12]
 8006360:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006364:	d005      	beq.n	8006372 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8006366:	4b0a      	ldr	r3, [pc, #40]	; (8006390 <HAL_Delay+0x44>)
 8006368:	781b      	ldrb	r3, [r3, #0]
 800636a:	461a      	mov	r2, r3
 800636c:	68fb      	ldr	r3, [r7, #12]
 800636e:	4413      	add	r3, r2
 8006370:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8006372:	bf00      	nop
 8006374:	f7ff ffde 	bl	8006334 <HAL_GetTick>
 8006378:	4602      	mov	r2, r0
 800637a:	68bb      	ldr	r3, [r7, #8]
 800637c:	1ad3      	subs	r3, r2, r3
 800637e:	68fa      	ldr	r2, [r7, #12]
 8006380:	429a      	cmp	r2, r3
 8006382:	d8f7      	bhi.n	8006374 <HAL_Delay+0x28>
  {
  }
}
 8006384:	bf00      	nop
 8006386:	bf00      	nop
 8006388:	3710      	adds	r7, #16
 800638a:	46bd      	mov	sp, r7
 800638c:	bd80      	pop	{r7, pc}
 800638e:	bf00      	nop
 8006390:	20000018 	.word	0x20000018

08006394 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006394:	b480      	push	{r7}
 8006396:	b085      	sub	sp, #20
 8006398:	af00      	add	r7, sp, #0
 800639a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 800639c:	687b      	ldr	r3, [r7, #4]
 800639e:	f003 0307 	and.w	r3, r3, #7
 80063a2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80063a4:	4b0c      	ldr	r3, [pc, #48]	; (80063d8 <__NVIC_SetPriorityGrouping+0x44>)
 80063a6:	68db      	ldr	r3, [r3, #12]
 80063a8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80063aa:	68ba      	ldr	r2, [r7, #8]
 80063ac:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80063b0:	4013      	ands	r3, r2
 80063b2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80063b4:	68fb      	ldr	r3, [r7, #12]
 80063b6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80063b8:	68bb      	ldr	r3, [r7, #8]
 80063ba:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80063bc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 80063c0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80063c4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80063c6:	4a04      	ldr	r2, [pc, #16]	; (80063d8 <__NVIC_SetPriorityGrouping+0x44>)
 80063c8:	68bb      	ldr	r3, [r7, #8]
 80063ca:	60d3      	str	r3, [r2, #12]
}
 80063cc:	bf00      	nop
 80063ce:	3714      	adds	r7, #20
 80063d0:	46bd      	mov	sp, r7
 80063d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d6:	4770      	bx	lr
 80063d8:	e000ed00 	.word	0xe000ed00

080063dc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80063dc:	b480      	push	{r7}
 80063de:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80063e0:	4b04      	ldr	r3, [pc, #16]	; (80063f4 <__NVIC_GetPriorityGrouping+0x18>)
 80063e2:	68db      	ldr	r3, [r3, #12]
 80063e4:	0a1b      	lsrs	r3, r3, #8
 80063e6:	f003 0307 	and.w	r3, r3, #7
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	46bd      	mov	sp, r7
 80063ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f2:	4770      	bx	lr
 80063f4:	e000ed00 	.word	0xe000ed00

080063f8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80063f8:	b480      	push	{r7}
 80063fa:	b083      	sub	sp, #12
 80063fc:	af00      	add	r7, sp, #0
 80063fe:	4603      	mov	r3, r0
 8006400:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006402:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006406:	2b00      	cmp	r3, #0
 8006408:	db0b      	blt.n	8006422 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800640a:	79fb      	ldrb	r3, [r7, #7]
 800640c:	f003 021f 	and.w	r2, r3, #31
 8006410:	4907      	ldr	r1, [pc, #28]	; (8006430 <__NVIC_EnableIRQ+0x38>)
 8006412:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006416:	095b      	lsrs	r3, r3, #5
 8006418:	2001      	movs	r0, #1
 800641a:	fa00 f202 	lsl.w	r2, r0, r2
 800641e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006422:	bf00      	nop
 8006424:	370c      	adds	r7, #12
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
 800642e:	bf00      	nop
 8006430:	e000e100 	.word	0xe000e100

08006434 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006434:	b480      	push	{r7}
 8006436:	b083      	sub	sp, #12
 8006438:	af00      	add	r7, sp, #0
 800643a:	4603      	mov	r3, r0
 800643c:	6039      	str	r1, [r7, #0]
 800643e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006440:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006444:	2b00      	cmp	r3, #0
 8006446:	db0a      	blt.n	800645e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006448:	683b      	ldr	r3, [r7, #0]
 800644a:	b2da      	uxtb	r2, r3
 800644c:	490c      	ldr	r1, [pc, #48]	; (8006480 <__NVIC_SetPriority+0x4c>)
 800644e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006452:	0112      	lsls	r2, r2, #4
 8006454:	b2d2      	uxtb	r2, r2
 8006456:	440b      	add	r3, r1
 8006458:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800645c:	e00a      	b.n	8006474 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800645e:	683b      	ldr	r3, [r7, #0]
 8006460:	b2da      	uxtb	r2, r3
 8006462:	4908      	ldr	r1, [pc, #32]	; (8006484 <__NVIC_SetPriority+0x50>)
 8006464:	79fb      	ldrb	r3, [r7, #7]
 8006466:	f003 030f 	and.w	r3, r3, #15
 800646a:	3b04      	subs	r3, #4
 800646c:	0112      	lsls	r2, r2, #4
 800646e:	b2d2      	uxtb	r2, r2
 8006470:	440b      	add	r3, r1
 8006472:	761a      	strb	r2, [r3, #24]
}
 8006474:	bf00      	nop
 8006476:	370c      	adds	r7, #12
 8006478:	46bd      	mov	sp, r7
 800647a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800647e:	4770      	bx	lr
 8006480:	e000e100 	.word	0xe000e100
 8006484:	e000ed00 	.word	0xe000ed00

08006488 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8006488:	b480      	push	{r7}
 800648a:	b089      	sub	sp, #36	; 0x24
 800648c:	af00      	add	r7, sp, #0
 800648e:	60f8      	str	r0, [r7, #12]
 8006490:	60b9      	str	r1, [r7, #8]
 8006492:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8006494:	68fb      	ldr	r3, [r7, #12]
 8006496:	f003 0307 	and.w	r3, r3, #7
 800649a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 800649c:	69fb      	ldr	r3, [r7, #28]
 800649e:	f1c3 0307 	rsb	r3, r3, #7
 80064a2:	2b04      	cmp	r3, #4
 80064a4:	bf28      	it	cs
 80064a6:	2304      	movcs	r3, #4
 80064a8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80064aa:	69fb      	ldr	r3, [r7, #28]
 80064ac:	3304      	adds	r3, #4
 80064ae:	2b06      	cmp	r3, #6
 80064b0:	d902      	bls.n	80064b8 <NVIC_EncodePriority+0x30>
 80064b2:	69fb      	ldr	r3, [r7, #28]
 80064b4:	3b03      	subs	r3, #3
 80064b6:	e000      	b.n	80064ba <NVIC_EncodePriority+0x32>
 80064b8:	2300      	movs	r3, #0
 80064ba:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064bc:	f04f 32ff 	mov.w	r2, #4294967295
 80064c0:	69bb      	ldr	r3, [r7, #24]
 80064c2:	fa02 f303 	lsl.w	r3, r2, r3
 80064c6:	43da      	mvns	r2, r3
 80064c8:	68bb      	ldr	r3, [r7, #8]
 80064ca:	401a      	ands	r2, r3
 80064cc:	697b      	ldr	r3, [r7, #20]
 80064ce:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80064d0:	f04f 31ff 	mov.w	r1, #4294967295
 80064d4:	697b      	ldr	r3, [r7, #20]
 80064d6:	fa01 f303 	lsl.w	r3, r1, r3
 80064da:	43d9      	mvns	r1, r3
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80064e0:	4313      	orrs	r3, r2
         );
}
 80064e2:	4618      	mov	r0, r3
 80064e4:	3724      	adds	r7, #36	; 0x24
 80064e6:	46bd      	mov	sp, r7
 80064e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064ec:	4770      	bx	lr
	...

080064f0 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 80064f0:	b480      	push	{r7}
 80064f2:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 80064f4:	f3bf 8f4f 	dsb	sy
}
 80064f8:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 80064fa:	4b06      	ldr	r3, [pc, #24]	; (8006514 <__NVIC_SystemReset+0x24>)
 80064fc:	68db      	ldr	r3, [r3, #12]
 80064fe:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006502:	4904      	ldr	r1, [pc, #16]	; (8006514 <__NVIC_SystemReset+0x24>)
 8006504:	4b04      	ldr	r3, [pc, #16]	; (8006518 <__NVIC_SystemReset+0x28>)
 8006506:	4313      	orrs	r3, r2
 8006508:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800650a:	f3bf 8f4f 	dsb	sy
}
 800650e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006510:	bf00      	nop
 8006512:	e7fd      	b.n	8006510 <__NVIC_SystemReset+0x20>
 8006514:	e000ed00 	.word	0xe000ed00
 8006518:	05fa0004 	.word	0x05fa0004

0800651c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	3b01      	subs	r3, #1
 8006528:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800652c:	d301      	bcc.n	8006532 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800652e:	2301      	movs	r3, #1
 8006530:	e00f      	b.n	8006552 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006532:	4a0a      	ldr	r2, [pc, #40]	; (800655c <SysTick_Config+0x40>)
 8006534:	687b      	ldr	r3, [r7, #4]
 8006536:	3b01      	subs	r3, #1
 8006538:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800653a:	210f      	movs	r1, #15
 800653c:	f04f 30ff 	mov.w	r0, #4294967295
 8006540:	f7ff ff78 	bl	8006434 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006544:	4b05      	ldr	r3, [pc, #20]	; (800655c <SysTick_Config+0x40>)
 8006546:	2200      	movs	r2, #0
 8006548:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800654a:	4b04      	ldr	r3, [pc, #16]	; (800655c <SysTick_Config+0x40>)
 800654c:	2207      	movs	r2, #7
 800654e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006550:	2300      	movs	r3, #0
}
 8006552:	4618      	mov	r0, r3
 8006554:	3708      	adds	r7, #8
 8006556:	46bd      	mov	sp, r7
 8006558:	bd80      	pop	{r7, pc}
 800655a:	bf00      	nop
 800655c:	e000e010 	.word	0xe000e010

08006560 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8006560:	b580      	push	{r7, lr}
 8006562:	b082      	sub	sp, #8
 8006564:	af00      	add	r7, sp, #0
 8006566:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8006568:	6878      	ldr	r0, [r7, #4]
 800656a:	f7ff ff13 	bl	8006394 <__NVIC_SetPriorityGrouping>
}
 800656e:	bf00      	nop
 8006570:	3708      	adds	r7, #8
 8006572:	46bd      	mov	sp, r7
 8006574:	bd80      	pop	{r7, pc}

08006576 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8006576:	b580      	push	{r7, lr}
 8006578:	b086      	sub	sp, #24
 800657a:	af00      	add	r7, sp, #0
 800657c:	4603      	mov	r3, r0
 800657e:	60b9      	str	r1, [r7, #8]
 8006580:	607a      	str	r2, [r7, #4]
 8006582:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8006584:	2300      	movs	r3, #0
 8006586:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8006588:	f7ff ff28 	bl	80063dc <__NVIC_GetPriorityGrouping>
 800658c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800658e:	687a      	ldr	r2, [r7, #4]
 8006590:	68b9      	ldr	r1, [r7, #8]
 8006592:	6978      	ldr	r0, [r7, #20]
 8006594:	f7ff ff78 	bl	8006488 <NVIC_EncodePriority>
 8006598:	4602      	mov	r2, r0
 800659a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800659e:	4611      	mov	r1, r2
 80065a0:	4618      	mov	r0, r3
 80065a2:	f7ff ff47 	bl	8006434 <__NVIC_SetPriority>
}
 80065a6:	bf00      	nop
 80065a8:	3718      	adds	r7, #24
 80065aa:	46bd      	mov	sp, r7
 80065ac:	bd80      	pop	{r7, pc}

080065ae <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80065ae:	b580      	push	{r7, lr}
 80065b0:	b082      	sub	sp, #8
 80065b2:	af00      	add	r7, sp, #0
 80065b4:	4603      	mov	r3, r0
 80065b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80065b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80065bc:	4618      	mov	r0, r3
 80065be:	f7ff ff1b 	bl	80063f8 <__NVIC_EnableIRQ>
}
 80065c2:	bf00      	nop
 80065c4:	3708      	adds	r7, #8
 80065c6:	46bd      	mov	sp, r7
 80065c8:	bd80      	pop	{r7, pc}

080065ca <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 80065ca:	b580      	push	{r7, lr}
 80065cc:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 80065ce:	f7ff ff8f 	bl	80064f0 <__NVIC_SystemReset>

080065d2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80065d2:	b580      	push	{r7, lr}
 80065d4:	b082      	sub	sp, #8
 80065d6:	af00      	add	r7, sp, #0
 80065d8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80065da:	6878      	ldr	r0, [r7, #4]
 80065dc:	f7ff ff9e 	bl	800651c <SysTick_Config>
 80065e0:	4603      	mov	r3, r0
}
 80065e2:	4618      	mov	r0, r3
 80065e4:	3708      	adds	r7, #8
 80065e6:	46bd      	mov	sp, r7
 80065e8:	bd80      	pop	{r7, pc}

080065ea <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80065ea:	b580      	push	{r7, lr}
 80065ec:	b084      	sub	sp, #16
 80065ee:	af00      	add	r7, sp, #0
 80065f0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80065f2:	687b      	ldr	r3, [r7, #4]
 80065f4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80065f6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80065f8:	f7ff fe9c 	bl	8006334 <HAL_GetTick>
 80065fc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80065fe:	687b      	ldr	r3, [r7, #4]
 8006600:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006604:	b2db      	uxtb	r3, r3
 8006606:	2b02      	cmp	r3, #2
 8006608:	d008      	beq.n	800661c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	2280      	movs	r2, #128	; 0x80
 800660e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006610:	687b      	ldr	r3, [r7, #4]
 8006612:	2200      	movs	r2, #0
 8006614:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006618:	2301      	movs	r3, #1
 800661a:	e052      	b.n	80066c2 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	681b      	ldr	r3, [r3, #0]
 8006620:	681a      	ldr	r2, [r3, #0]
 8006622:	687b      	ldr	r3, [r7, #4]
 8006624:	681b      	ldr	r3, [r3, #0]
 8006626:	f022 0216 	bic.w	r2, r2, #22
 800662a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	695a      	ldr	r2, [r3, #20]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800663a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800663c:	687b      	ldr	r3, [r7, #4]
 800663e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006640:	2b00      	cmp	r3, #0
 8006642:	d103      	bne.n	800664c <HAL_DMA_Abort+0x62>
 8006644:	687b      	ldr	r3, [r7, #4]
 8006646:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006648:	2b00      	cmp	r3, #0
 800664a:	d007      	beq.n	800665c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	681b      	ldr	r3, [r3, #0]
 8006650:	681a      	ldr	r2, [r3, #0]
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	f022 0208 	bic.w	r2, r2, #8
 800665a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800665c:	687b      	ldr	r3, [r7, #4]
 800665e:	681b      	ldr	r3, [r3, #0]
 8006660:	681a      	ldr	r2, [r3, #0]
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f022 0201 	bic.w	r2, r2, #1
 800666a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800666c:	e013      	b.n	8006696 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800666e:	f7ff fe61 	bl	8006334 <HAL_GetTick>
 8006672:	4602      	mov	r2, r0
 8006674:	68bb      	ldr	r3, [r7, #8]
 8006676:	1ad3      	subs	r3, r2, r3
 8006678:	2b05      	cmp	r3, #5
 800667a:	d90c      	bls.n	8006696 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800667c:	687b      	ldr	r3, [r7, #4]
 800667e:	2220      	movs	r2, #32
 8006680:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8006682:	687b      	ldr	r3, [r7, #4]
 8006684:	2203      	movs	r2, #3
 8006686:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	2200      	movs	r2, #0
 800668e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 8006692:	2303      	movs	r3, #3
 8006694:	e015      	b.n	80066c2 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	681b      	ldr	r3, [r3, #0]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f003 0301 	and.w	r3, r3, #1
 80066a0:	2b00      	cmp	r3, #0
 80066a2:	d1e4      	bne.n	800666e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80066a4:	687b      	ldr	r3, [r7, #4]
 80066a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80066a8:	223f      	movs	r2, #63	; 0x3f
 80066aa:	409a      	lsls	r2, r3
 80066ac:	68fb      	ldr	r3, [r7, #12]
 80066ae:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2201      	movs	r2, #1
 80066b4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	2200      	movs	r2, #0
 80066bc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 80066c0:	2300      	movs	r3, #0
}
 80066c2:	4618      	mov	r0, r3
 80066c4:	3710      	adds	r7, #16
 80066c6:	46bd      	mov	sp, r7
 80066c8:	bd80      	pop	{r7, pc}

080066ca <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80066ca:	b480      	push	{r7}
 80066cc:	b083      	sub	sp, #12
 80066ce:	af00      	add	r7, sp, #0
 80066d0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80066d8:	b2db      	uxtb	r3, r3
 80066da:	2b02      	cmp	r3, #2
 80066dc:	d004      	beq.n	80066e8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80066de:	687b      	ldr	r3, [r7, #4]
 80066e0:	2280      	movs	r2, #128	; 0x80
 80066e2:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80066e4:	2301      	movs	r3, #1
 80066e6:	e00c      	b.n	8006702 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80066e8:	687b      	ldr	r3, [r7, #4]
 80066ea:	2205      	movs	r2, #5
 80066ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80066f0:	687b      	ldr	r3, [r7, #4]
 80066f2:	681b      	ldr	r3, [r3, #0]
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	687b      	ldr	r3, [r7, #4]
 80066f8:	681b      	ldr	r3, [r3, #0]
 80066fa:	f022 0201 	bic.w	r2, r2, #1
 80066fe:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006700:	2300      	movs	r3, #0
}
 8006702:	4618      	mov	r0, r3
 8006704:	370c      	adds	r7, #12
 8006706:	46bd      	mov	sp, r7
 8006708:	f85d 7b04 	ldr.w	r7, [sp], #4
 800670c:	4770      	bx	lr
	...

08006710 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006710:	b580      	push	{r7, lr}
 8006712:	b086      	sub	sp, #24
 8006714:	af00      	add	r7, sp, #0
 8006716:	60f8      	str	r0, [r7, #12]
 8006718:	60b9      	str	r1, [r7, #8]
 800671a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006722:	4b23      	ldr	r3, [pc, #140]	; (80067b0 <HAL_FLASH_Program+0xa0>)
 8006724:	7e1b      	ldrb	r3, [r3, #24]
 8006726:	2b01      	cmp	r3, #1
 8006728:	d101      	bne.n	800672e <HAL_FLASH_Program+0x1e>
 800672a:	2302      	movs	r3, #2
 800672c:	e03b      	b.n	80067a6 <HAL_FLASH_Program+0x96>
 800672e:	4b20      	ldr	r3, [pc, #128]	; (80067b0 <HAL_FLASH_Program+0xa0>)
 8006730:	2201      	movs	r2, #1
 8006732:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006734:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006738:	f000 f87c 	bl	8006834 <FLASH_WaitForLastOperation>
 800673c:	4603      	mov	r3, r0
 800673e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006740:	7dfb      	ldrb	r3, [r7, #23]
 8006742:	2b00      	cmp	r3, #0
 8006744:	d12b      	bne.n	800679e <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006746:	68fb      	ldr	r3, [r7, #12]
 8006748:	2b00      	cmp	r3, #0
 800674a:	d105      	bne.n	8006758 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800674c:	783b      	ldrb	r3, [r7, #0]
 800674e:	4619      	mov	r1, r3
 8006750:	68b8      	ldr	r0, [r7, #8]
 8006752:	f000 f927 	bl	80069a4 <FLASH_Program_Byte>
 8006756:	e016      	b.n	8006786 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006758:	68fb      	ldr	r3, [r7, #12]
 800675a:	2b01      	cmp	r3, #1
 800675c:	d105      	bne.n	800676a <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800675e:	883b      	ldrh	r3, [r7, #0]
 8006760:	4619      	mov	r1, r3
 8006762:	68b8      	ldr	r0, [r7, #8]
 8006764:	f000 f8fa 	bl	800695c <FLASH_Program_HalfWord>
 8006768:	e00d      	b.n	8006786 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 800676a:	68fb      	ldr	r3, [r7, #12]
 800676c:	2b02      	cmp	r3, #2
 800676e:	d105      	bne.n	800677c <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 8006770:	683b      	ldr	r3, [r7, #0]
 8006772:	4619      	mov	r1, r3
 8006774:	68b8      	ldr	r0, [r7, #8]
 8006776:	f000 f8cf 	bl	8006918 <FLASH_Program_Word>
 800677a:	e004      	b.n	8006786 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 800677c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006780:	68b8      	ldr	r0, [r7, #8]
 8006782:	f000 f897 	bl	80068b4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006786:	f24c 3050 	movw	r0, #50000	; 0xc350
 800678a:	f000 f853 	bl	8006834 <FLASH_WaitForLastOperation>
 800678e:	4603      	mov	r3, r0
 8006790:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 8006792:	4b08      	ldr	r3, [pc, #32]	; (80067b4 <HAL_FLASH_Program+0xa4>)
 8006794:	691b      	ldr	r3, [r3, #16]
 8006796:	4a07      	ldr	r2, [pc, #28]	; (80067b4 <HAL_FLASH_Program+0xa4>)
 8006798:	f023 0301 	bic.w	r3, r3, #1
 800679c:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800679e:	4b04      	ldr	r3, [pc, #16]	; (80067b0 <HAL_FLASH_Program+0xa0>)
 80067a0:	2200      	movs	r2, #0
 80067a2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80067a4:	7dfb      	ldrb	r3, [r7, #23]
}
 80067a6:	4618      	mov	r0, r3
 80067a8:	3718      	adds	r7, #24
 80067aa:	46bd      	mov	sp, r7
 80067ac:	bd80      	pop	{r7, pc}
 80067ae:	bf00      	nop
 80067b0:	20000554 	.word	0x20000554
 80067b4:	40023c00 	.word	0x40023c00

080067b8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80067b8:	b480      	push	{r7}
 80067ba:	b083      	sub	sp, #12
 80067bc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80067be:	2300      	movs	r3, #0
 80067c0:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80067c2:	4b0b      	ldr	r3, [pc, #44]	; (80067f0 <HAL_FLASH_Unlock+0x38>)
 80067c4:	691b      	ldr	r3, [r3, #16]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da0b      	bge.n	80067e2 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 80067ca:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <HAL_FLASH_Unlock+0x38>)
 80067cc:	4a09      	ldr	r2, [pc, #36]	; (80067f4 <HAL_FLASH_Unlock+0x3c>)
 80067ce:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 80067d0:	4b07      	ldr	r3, [pc, #28]	; (80067f0 <HAL_FLASH_Unlock+0x38>)
 80067d2:	4a09      	ldr	r2, [pc, #36]	; (80067f8 <HAL_FLASH_Unlock+0x40>)
 80067d4:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 80067d6:	4b06      	ldr	r3, [pc, #24]	; (80067f0 <HAL_FLASH_Unlock+0x38>)
 80067d8:	691b      	ldr	r3, [r3, #16]
 80067da:	2b00      	cmp	r3, #0
 80067dc:	da01      	bge.n	80067e2 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 80067e2:	79fb      	ldrb	r3, [r7, #7]
}
 80067e4:	4618      	mov	r0, r3
 80067e6:	370c      	adds	r7, #12
 80067e8:	46bd      	mov	sp, r7
 80067ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067ee:	4770      	bx	lr
 80067f0:	40023c00 	.word	0x40023c00
 80067f4:	45670123 	.word	0x45670123
 80067f8:	cdef89ab 	.word	0xcdef89ab

080067fc <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 80067fc:	b480      	push	{r7}
 80067fe:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006800:	4b05      	ldr	r3, [pc, #20]	; (8006818 <HAL_FLASH_Lock+0x1c>)
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	4a04      	ldr	r2, [pc, #16]	; (8006818 <HAL_FLASH_Lock+0x1c>)
 8006806:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800680a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800680c:	2300      	movs	r3, #0
}
 800680e:	4618      	mov	r0, r3
 8006810:	46bd      	mov	sp, r7
 8006812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006816:	4770      	bx	lr
 8006818:	40023c00 	.word	0x40023c00

0800681c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800681c:	b480      	push	{r7}
 800681e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006820:	4b03      	ldr	r3, [pc, #12]	; (8006830 <HAL_FLASH_GetError+0x14>)
 8006822:	69db      	ldr	r3, [r3, #28]
}  
 8006824:	4618      	mov	r0, r3
 8006826:	46bd      	mov	sp, r7
 8006828:	f85d 7b04 	ldr.w	r7, [sp], #4
 800682c:	4770      	bx	lr
 800682e:	bf00      	nop
 8006830:	20000554 	.word	0x20000554

08006834 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006834:	b580      	push	{r7, lr}
 8006836:	b084      	sub	sp, #16
 8006838:	af00      	add	r7, sp, #0
 800683a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800683c:	2300      	movs	r3, #0
 800683e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006840:	4b1a      	ldr	r3, [pc, #104]	; (80068ac <FLASH_WaitForLastOperation+0x78>)
 8006842:	2200      	movs	r2, #0
 8006844:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006846:	f7ff fd75 	bl	8006334 <HAL_GetTick>
 800684a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800684c:	e010      	b.n	8006870 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006854:	d00c      	beq.n	8006870 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006856:	687b      	ldr	r3, [r7, #4]
 8006858:	2b00      	cmp	r3, #0
 800685a:	d007      	beq.n	800686c <FLASH_WaitForLastOperation+0x38>
 800685c:	f7ff fd6a 	bl	8006334 <HAL_GetTick>
 8006860:	4602      	mov	r2, r0
 8006862:	68fb      	ldr	r3, [r7, #12]
 8006864:	1ad3      	subs	r3, r2, r3
 8006866:	687a      	ldr	r2, [r7, #4]
 8006868:	429a      	cmp	r2, r3
 800686a:	d201      	bcs.n	8006870 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 800686c:	2303      	movs	r3, #3
 800686e:	e019      	b.n	80068a4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 8006870:	4b0f      	ldr	r3, [pc, #60]	; (80068b0 <FLASH_WaitForLastOperation+0x7c>)
 8006872:	68db      	ldr	r3, [r3, #12]
 8006874:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006878:	2b00      	cmp	r3, #0
 800687a:	d1e8      	bne.n	800684e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 800687c:	4b0c      	ldr	r3, [pc, #48]	; (80068b0 <FLASH_WaitForLastOperation+0x7c>)
 800687e:	68db      	ldr	r3, [r3, #12]
 8006880:	f003 0301 	and.w	r3, r3, #1
 8006884:	2b00      	cmp	r3, #0
 8006886:	d002      	beq.n	800688e <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 8006888:	4b09      	ldr	r3, [pc, #36]	; (80068b0 <FLASH_WaitForLastOperation+0x7c>)
 800688a:	2201      	movs	r2, #1
 800688c:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 800688e:	4b08      	ldr	r3, [pc, #32]	; (80068b0 <FLASH_WaitForLastOperation+0x7c>)
 8006890:	68db      	ldr	r3, [r3, #12]
 8006892:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d003      	beq.n	80068a2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 800689a:	f000 f8a5 	bl	80069e8 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800689e:	2301      	movs	r3, #1
 80068a0:	e000      	b.n	80068a4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80068a2:	2300      	movs	r3, #0
  
}  
 80068a4:	4618      	mov	r0, r3
 80068a6:	3710      	adds	r7, #16
 80068a8:	46bd      	mov	sp, r7
 80068aa:	bd80      	pop	{r7, pc}
 80068ac:	20000554 	.word	0x20000554
 80068b0:	40023c00 	.word	0x40023c00

080068b4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80068b4:	b480      	push	{r7}
 80068b6:	b085      	sub	sp, #20
 80068b8:	af00      	add	r7, sp, #0
 80068ba:	60f8      	str	r0, [r7, #12]
 80068bc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068c0:	4b14      	ldr	r3, [pc, #80]	; (8006914 <FLASH_Program_DoubleWord+0x60>)
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	4a13      	ldr	r2, [pc, #76]	; (8006914 <FLASH_Program_DoubleWord+0x60>)
 80068c6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068ca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 80068cc:	4b11      	ldr	r3, [pc, #68]	; (8006914 <FLASH_Program_DoubleWord+0x60>)
 80068ce:	691b      	ldr	r3, [r3, #16]
 80068d0:	4a10      	ldr	r2, [pc, #64]	; (8006914 <FLASH_Program_DoubleWord+0x60>)
 80068d2:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 80068d6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80068d8:	4b0e      	ldr	r3, [pc, #56]	; (8006914 <FLASH_Program_DoubleWord+0x60>)
 80068da:	691b      	ldr	r3, [r3, #16]
 80068dc:	4a0d      	ldr	r2, [pc, #52]	; (8006914 <FLASH_Program_DoubleWord+0x60>)
 80068de:	f043 0301 	orr.w	r3, r3, #1
 80068e2:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 80068e4:	68fb      	ldr	r3, [r7, #12]
 80068e6:	683a      	ldr	r2, [r7, #0]
 80068e8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 80068ea:	f3bf 8f6f 	isb	sy
}
 80068ee:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 80068f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80068f4:	f04f 0200 	mov.w	r2, #0
 80068f8:	f04f 0300 	mov.w	r3, #0
 80068fc:	000a      	movs	r2, r1
 80068fe:	2300      	movs	r3, #0
 8006900:	68f9      	ldr	r1, [r7, #12]
 8006902:	3104      	adds	r1, #4
 8006904:	4613      	mov	r3, r2
 8006906:	600b      	str	r3, [r1, #0]
}
 8006908:	bf00      	nop
 800690a:	3714      	adds	r7, #20
 800690c:	46bd      	mov	sp, r7
 800690e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006912:	4770      	bx	lr
 8006914:	40023c00 	.word	0x40023c00

08006918 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006918:	b480      	push	{r7}
 800691a:	b083      	sub	sp, #12
 800691c:	af00      	add	r7, sp, #0
 800691e:	6078      	str	r0, [r7, #4]
 8006920:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006922:	4b0d      	ldr	r3, [pc, #52]	; (8006958 <FLASH_Program_Word+0x40>)
 8006924:	691b      	ldr	r3, [r3, #16]
 8006926:	4a0c      	ldr	r2, [pc, #48]	; (8006958 <FLASH_Program_Word+0x40>)
 8006928:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800692c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800692e:	4b0a      	ldr	r3, [pc, #40]	; (8006958 <FLASH_Program_Word+0x40>)
 8006930:	691b      	ldr	r3, [r3, #16]
 8006932:	4a09      	ldr	r2, [pc, #36]	; (8006958 <FLASH_Program_Word+0x40>)
 8006934:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006938:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800693a:	4b07      	ldr	r3, [pc, #28]	; (8006958 <FLASH_Program_Word+0x40>)
 800693c:	691b      	ldr	r3, [r3, #16]
 800693e:	4a06      	ldr	r2, [pc, #24]	; (8006958 <FLASH_Program_Word+0x40>)
 8006940:	f043 0301 	orr.w	r3, r3, #1
 8006944:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006946:	687b      	ldr	r3, [r7, #4]
 8006948:	683a      	ldr	r2, [r7, #0]
 800694a:	601a      	str	r2, [r3, #0]
}
 800694c:	bf00      	nop
 800694e:	370c      	adds	r7, #12
 8006950:	46bd      	mov	sp, r7
 8006952:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006956:	4770      	bx	lr
 8006958:	40023c00 	.word	0x40023c00

0800695c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800695c:	b480      	push	{r7}
 800695e:	b083      	sub	sp, #12
 8006960:	af00      	add	r7, sp, #0
 8006962:	6078      	str	r0, [r7, #4]
 8006964:	460b      	mov	r3, r1
 8006966:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006968:	4b0d      	ldr	r3, [pc, #52]	; (80069a0 <FLASH_Program_HalfWord+0x44>)
 800696a:	691b      	ldr	r3, [r3, #16]
 800696c:	4a0c      	ldr	r2, [pc, #48]	; (80069a0 <FLASH_Program_HalfWord+0x44>)
 800696e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006972:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 8006974:	4b0a      	ldr	r3, [pc, #40]	; (80069a0 <FLASH_Program_HalfWord+0x44>)
 8006976:	691b      	ldr	r3, [r3, #16]
 8006978:	4a09      	ldr	r2, [pc, #36]	; (80069a0 <FLASH_Program_HalfWord+0x44>)
 800697a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800697e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006980:	4b07      	ldr	r3, [pc, #28]	; (80069a0 <FLASH_Program_HalfWord+0x44>)
 8006982:	691b      	ldr	r3, [r3, #16]
 8006984:	4a06      	ldr	r2, [pc, #24]	; (80069a0 <FLASH_Program_HalfWord+0x44>)
 8006986:	f043 0301 	orr.w	r3, r3, #1
 800698a:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 800698c:	687b      	ldr	r3, [r7, #4]
 800698e:	887a      	ldrh	r2, [r7, #2]
 8006990:	801a      	strh	r2, [r3, #0]
}
 8006992:	bf00      	nop
 8006994:	370c      	adds	r7, #12
 8006996:	46bd      	mov	sp, r7
 8006998:	f85d 7b04 	ldr.w	r7, [sp], #4
 800699c:	4770      	bx	lr
 800699e:	bf00      	nop
 80069a0:	40023c00 	.word	0x40023c00

080069a4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80069a4:	b480      	push	{r7}
 80069a6:	b083      	sub	sp, #12
 80069a8:	af00      	add	r7, sp, #0
 80069aa:	6078      	str	r0, [r7, #4]
 80069ac:	460b      	mov	r3, r1
 80069ae:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80069b0:	4b0c      	ldr	r3, [pc, #48]	; (80069e4 <FLASH_Program_Byte+0x40>)
 80069b2:	691b      	ldr	r3, [r3, #16]
 80069b4:	4a0b      	ldr	r2, [pc, #44]	; (80069e4 <FLASH_Program_Byte+0x40>)
 80069b6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80069ba:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80069bc:	4b09      	ldr	r3, [pc, #36]	; (80069e4 <FLASH_Program_Byte+0x40>)
 80069be:	4a09      	ldr	r2, [pc, #36]	; (80069e4 <FLASH_Program_Byte+0x40>)
 80069c0:	691b      	ldr	r3, [r3, #16]
 80069c2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80069c4:	4b07      	ldr	r3, [pc, #28]	; (80069e4 <FLASH_Program_Byte+0x40>)
 80069c6:	691b      	ldr	r3, [r3, #16]
 80069c8:	4a06      	ldr	r2, [pc, #24]	; (80069e4 <FLASH_Program_Byte+0x40>)
 80069ca:	f043 0301 	orr.w	r3, r3, #1
 80069ce:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 80069d0:	687b      	ldr	r3, [r7, #4]
 80069d2:	78fa      	ldrb	r2, [r7, #3]
 80069d4:	701a      	strb	r2, [r3, #0]
}
 80069d6:	bf00      	nop
 80069d8:	370c      	adds	r7, #12
 80069da:	46bd      	mov	sp, r7
 80069dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069e0:	4770      	bx	lr
 80069e2:	bf00      	nop
 80069e4:	40023c00 	.word	0x40023c00

080069e8 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 80069e8:	b480      	push	{r7}
 80069ea:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 80069ec:	4b27      	ldr	r3, [pc, #156]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 80069ee:	68db      	ldr	r3, [r3, #12]
 80069f0:	f003 0310 	and.w	r3, r3, #16
 80069f4:	2b00      	cmp	r3, #0
 80069f6:	d008      	beq.n	8006a0a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 80069f8:	4b25      	ldr	r3, [pc, #148]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 80069fa:	69db      	ldr	r3, [r3, #28]
 80069fc:	f043 0310 	orr.w	r3, r3, #16
 8006a00:	4a23      	ldr	r2, [pc, #140]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 8006a02:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006a04:	4b21      	ldr	r3, [pc, #132]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 8006a06:	2210      	movs	r2, #16
 8006a08:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 8006a0a:	4b20      	ldr	r3, [pc, #128]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 8006a0c:	68db      	ldr	r3, [r3, #12]
 8006a0e:	f003 0320 	and.w	r3, r3, #32
 8006a12:	2b00      	cmp	r3, #0
 8006a14:	d008      	beq.n	8006a28 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006a16:	4b1e      	ldr	r3, [pc, #120]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 8006a18:	69db      	ldr	r3, [r3, #28]
 8006a1a:	f043 0308 	orr.w	r3, r3, #8
 8006a1e:	4a1c      	ldr	r2, [pc, #112]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 8006a20:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006a22:	4b1a      	ldr	r3, [pc, #104]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 8006a24:	2220      	movs	r2, #32
 8006a26:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006a28:	4b18      	ldr	r3, [pc, #96]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006a30:	2b00      	cmp	r3, #0
 8006a32:	d008      	beq.n	8006a46 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006a34:	4b16      	ldr	r3, [pc, #88]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 8006a36:	69db      	ldr	r3, [r3, #28]
 8006a38:	f043 0304 	orr.w	r3, r3, #4
 8006a3c:	4a14      	ldr	r2, [pc, #80]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 8006a3e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006a40:	4b12      	ldr	r3, [pc, #72]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 8006a42:	2240      	movs	r2, #64	; 0x40
 8006a44:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006a46:	4b11      	ldr	r3, [pc, #68]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 8006a48:	68db      	ldr	r3, [r3, #12]
 8006a4a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006a4e:	2b00      	cmp	r3, #0
 8006a50:	d008      	beq.n	8006a64 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006a52:	4b0f      	ldr	r3, [pc, #60]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 8006a54:	69db      	ldr	r3, [r3, #28]
 8006a56:	f043 0302 	orr.w	r3, r3, #2
 8006a5a:	4a0d      	ldr	r2, [pc, #52]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 8006a5c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 8006a5e:	4b0b      	ldr	r3, [pc, #44]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 8006a60:	2280      	movs	r2, #128	; 0x80
 8006a62:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 8006a64:	4b09      	ldr	r3, [pc, #36]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 8006a66:	68db      	ldr	r3, [r3, #12]
 8006a68:	f003 0302 	and.w	r3, r3, #2
 8006a6c:	2b00      	cmp	r3, #0
 8006a6e:	d008      	beq.n	8006a82 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 8006a70:	4b07      	ldr	r3, [pc, #28]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 8006a72:	69db      	ldr	r3, [r3, #28]
 8006a74:	f043 0320 	orr.w	r3, r3, #32
 8006a78:	4a05      	ldr	r2, [pc, #20]	; (8006a90 <FLASH_SetErrorCode+0xa8>)
 8006a7a:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 8006a7c:	4b03      	ldr	r3, [pc, #12]	; (8006a8c <FLASH_SetErrorCode+0xa4>)
 8006a7e:	2202      	movs	r2, #2
 8006a80:	60da      	str	r2, [r3, #12]
  }
}
 8006a82:	bf00      	nop
 8006a84:	46bd      	mov	sp, r7
 8006a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a8a:	4770      	bx	lr
 8006a8c:	40023c00 	.word	0x40023c00
 8006a90:	20000554 	.word	0x20000554

08006a94 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 8006a94:	b580      	push	{r7, lr}
 8006a96:	b084      	sub	sp, #16
 8006a98:	af00      	add	r7, sp, #0
 8006a9a:	6078      	str	r0, [r7, #4]
 8006a9c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 8006a9e:	2301      	movs	r3, #1
 8006aa0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 8006aa2:	2300      	movs	r3, #0
 8006aa4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006aa6:	4b31      	ldr	r3, [pc, #196]	; (8006b6c <HAL_FLASHEx_Erase+0xd8>)
 8006aa8:	7e1b      	ldrb	r3, [r3, #24]
 8006aaa:	2b01      	cmp	r3, #1
 8006aac:	d101      	bne.n	8006ab2 <HAL_FLASHEx_Erase+0x1e>
 8006aae:	2302      	movs	r3, #2
 8006ab0:	e058      	b.n	8006b64 <HAL_FLASHEx_Erase+0xd0>
 8006ab2:	4b2e      	ldr	r3, [pc, #184]	; (8006b6c <HAL_FLASHEx_Erase+0xd8>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006ab8:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006abc:	f7ff feba 	bl	8006834 <FLASH_WaitForLastOperation>
 8006ac0:	4603      	mov	r3, r0
 8006ac2:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006ac4:	7bfb      	ldrb	r3, [r7, #15]
 8006ac6:	2b00      	cmp	r3, #0
 8006ac8:	d148      	bne.n	8006b5c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006aca:	683b      	ldr	r3, [r7, #0]
 8006acc:	f04f 32ff 	mov.w	r2, #4294967295
 8006ad0:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	681b      	ldr	r3, [r3, #0]
 8006ad6:	2b01      	cmp	r3, #1
 8006ad8:	d115      	bne.n	8006b06 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006ada:	687b      	ldr	r3, [r7, #4]
 8006adc:	691b      	ldr	r3, [r3, #16]
 8006ade:	b2da      	uxtb	r2, r3
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	685b      	ldr	r3, [r3, #4]
 8006ae4:	4619      	mov	r1, r3
 8006ae6:	4610      	mov	r0, r2
 8006ae8:	f000 f844 	bl	8006b74 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006aec:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006af0:	f7ff fea0 	bl	8006834 <FLASH_WaitForLastOperation>
 8006af4:	4603      	mov	r3, r0
 8006af6:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006af8:	4b1d      	ldr	r3, [pc, #116]	; (8006b70 <HAL_FLASHEx_Erase+0xdc>)
 8006afa:	691b      	ldr	r3, [r3, #16]
 8006afc:	4a1c      	ldr	r2, [pc, #112]	; (8006b70 <HAL_FLASHEx_Erase+0xdc>)
 8006afe:	f023 0304 	bic.w	r3, r3, #4
 8006b02:	6113      	str	r3, [r2, #16]
 8006b04:	e028      	b.n	8006b58 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006b06:	687b      	ldr	r3, [r7, #4]
 8006b08:	689b      	ldr	r3, [r3, #8]
 8006b0a:	60bb      	str	r3, [r7, #8]
 8006b0c:	e01c      	b.n	8006b48 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006b0e:	687b      	ldr	r3, [r7, #4]
 8006b10:	691b      	ldr	r3, [r3, #16]
 8006b12:	b2db      	uxtb	r3, r3
 8006b14:	4619      	mov	r1, r3
 8006b16:	68b8      	ldr	r0, [r7, #8]
 8006b18:	f000 f850 	bl	8006bbc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006b1c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006b20:	f7ff fe88 	bl	8006834 <FLASH_WaitForLastOperation>
 8006b24:	4603      	mov	r3, r0
 8006b26:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006b28:	4b11      	ldr	r3, [pc, #68]	; (8006b70 <HAL_FLASHEx_Erase+0xdc>)
 8006b2a:	691b      	ldr	r3, [r3, #16]
 8006b2c:	4a10      	ldr	r2, [pc, #64]	; (8006b70 <HAL_FLASHEx_Erase+0xdc>)
 8006b2e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006b32:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006b34:	7bfb      	ldrb	r3, [r7, #15]
 8006b36:	2b00      	cmp	r3, #0
 8006b38:	d003      	beq.n	8006b42 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	68ba      	ldr	r2, [r7, #8]
 8006b3e:	601a      	str	r2, [r3, #0]
          break;
 8006b40:	e00a      	b.n	8006b58 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006b42:	68bb      	ldr	r3, [r7, #8]
 8006b44:	3301      	adds	r3, #1
 8006b46:	60bb      	str	r3, [r7, #8]
 8006b48:	687b      	ldr	r3, [r7, #4]
 8006b4a:	68da      	ldr	r2, [r3, #12]
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	689b      	ldr	r3, [r3, #8]
 8006b50:	4413      	add	r3, r2
 8006b52:	68ba      	ldr	r2, [r7, #8]
 8006b54:	429a      	cmp	r2, r3
 8006b56:	d3da      	bcc.n	8006b0e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006b58:	f000 f878 	bl	8006c4c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006b5c:	4b03      	ldr	r3, [pc, #12]	; (8006b6c <HAL_FLASHEx_Erase+0xd8>)
 8006b5e:	2200      	movs	r2, #0
 8006b60:	761a      	strb	r2, [r3, #24]

  return status;
 8006b62:	7bfb      	ldrb	r3, [r7, #15]
}
 8006b64:	4618      	mov	r0, r3
 8006b66:	3710      	adds	r7, #16
 8006b68:	46bd      	mov	sp, r7
 8006b6a:	bd80      	pop	{r7, pc}
 8006b6c:	20000554 	.word	0x20000554
 8006b70:	40023c00 	.word	0x40023c00

08006b74 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006b74:	b480      	push	{r7}
 8006b76:	b083      	sub	sp, #12
 8006b78:	af00      	add	r7, sp, #0
 8006b7a:	4603      	mov	r3, r0
 8006b7c:	6039      	str	r1, [r7, #0]
 8006b7e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006b80:	4b0d      	ldr	r3, [pc, #52]	; (8006bb8 <FLASH_MassErase+0x44>)
 8006b82:	691b      	ldr	r3, [r3, #16]
 8006b84:	4a0c      	ldr	r2, [pc, #48]	; (8006bb8 <FLASH_MassErase+0x44>)
 8006b86:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b8a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006b8c:	4b0a      	ldr	r3, [pc, #40]	; (8006bb8 <FLASH_MassErase+0x44>)
 8006b8e:	691b      	ldr	r3, [r3, #16]
 8006b90:	4a09      	ldr	r2, [pc, #36]	; (8006bb8 <FLASH_MassErase+0x44>)
 8006b92:	f043 0304 	orr.w	r3, r3, #4
 8006b96:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006b98:	4b07      	ldr	r3, [pc, #28]	; (8006bb8 <FLASH_MassErase+0x44>)
 8006b9a:	691a      	ldr	r2, [r3, #16]
 8006b9c:	79fb      	ldrb	r3, [r7, #7]
 8006b9e:	021b      	lsls	r3, r3, #8
 8006ba0:	4313      	orrs	r3, r2
 8006ba2:	4a05      	ldr	r2, [pc, #20]	; (8006bb8 <FLASH_MassErase+0x44>)
 8006ba4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ba8:	6113      	str	r3, [r2, #16]
}
 8006baa:	bf00      	nop
 8006bac:	370c      	adds	r7, #12
 8006bae:	46bd      	mov	sp, r7
 8006bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb4:	4770      	bx	lr
 8006bb6:	bf00      	nop
 8006bb8:	40023c00 	.word	0x40023c00

08006bbc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006bbc:	b480      	push	{r7}
 8006bbe:	b085      	sub	sp, #20
 8006bc0:	af00      	add	r7, sp, #0
 8006bc2:	6078      	str	r0, [r7, #4]
 8006bc4:	460b      	mov	r3, r1
 8006bc6:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006bc8:	2300      	movs	r3, #0
 8006bca:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006bcc:	78fb      	ldrb	r3, [r7, #3]
 8006bce:	2b00      	cmp	r3, #0
 8006bd0:	d102      	bne.n	8006bd8 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006bd2:	2300      	movs	r3, #0
 8006bd4:	60fb      	str	r3, [r7, #12]
 8006bd6:	e010      	b.n	8006bfa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006bd8:	78fb      	ldrb	r3, [r7, #3]
 8006bda:	2b01      	cmp	r3, #1
 8006bdc:	d103      	bne.n	8006be6 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006bde:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006be2:	60fb      	str	r3, [r7, #12]
 8006be4:	e009      	b.n	8006bfa <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006be6:	78fb      	ldrb	r3, [r7, #3]
 8006be8:	2b02      	cmp	r3, #2
 8006bea:	d103      	bne.n	8006bf4 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006bec:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006bf0:	60fb      	str	r3, [r7, #12]
 8006bf2:	e002      	b.n	8006bfa <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006bf4:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006bf8:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006bfa:	4b13      	ldr	r3, [pc, #76]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006bfc:	691b      	ldr	r3, [r3, #16]
 8006bfe:	4a12      	ldr	r2, [pc, #72]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006c00:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006c04:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006c06:	4b10      	ldr	r3, [pc, #64]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006c08:	691a      	ldr	r2, [r3, #16]
 8006c0a:	490f      	ldr	r1, [pc, #60]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006c0c:	68fb      	ldr	r3, [r7, #12]
 8006c0e:	4313      	orrs	r3, r2
 8006c10:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006c12:	4b0d      	ldr	r3, [pc, #52]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006c14:	691b      	ldr	r3, [r3, #16]
 8006c16:	4a0c      	ldr	r2, [pc, #48]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006c18:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006c1c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006c1e:	4b0a      	ldr	r3, [pc, #40]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006c20:	691a      	ldr	r2, [r3, #16]
 8006c22:	687b      	ldr	r3, [r7, #4]
 8006c24:	00db      	lsls	r3, r3, #3
 8006c26:	4313      	orrs	r3, r2
 8006c28:	4a07      	ldr	r2, [pc, #28]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006c2a:	f043 0302 	orr.w	r3, r3, #2
 8006c2e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006c30:	4b05      	ldr	r3, [pc, #20]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006c32:	691b      	ldr	r3, [r3, #16]
 8006c34:	4a04      	ldr	r2, [pc, #16]	; (8006c48 <FLASH_Erase_Sector+0x8c>)
 8006c36:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006c3a:	6113      	str	r3, [r2, #16]
}
 8006c3c:	bf00      	nop
 8006c3e:	3714      	adds	r7, #20
 8006c40:	46bd      	mov	sp, r7
 8006c42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c46:	4770      	bx	lr
 8006c48:	40023c00 	.word	0x40023c00

08006c4c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006c4c:	b480      	push	{r7}
 8006c4e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006c50:	4b20      	ldr	r3, [pc, #128]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006c58:	2b00      	cmp	r3, #0
 8006c5a:	d017      	beq.n	8006c8c <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006c5c:	4b1d      	ldr	r3, [pc, #116]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c5e:	681b      	ldr	r3, [r3, #0]
 8006c60:	4a1c      	ldr	r2, [pc, #112]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c62:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006c66:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006c68:	4b1a      	ldr	r3, [pc, #104]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c6a:	681b      	ldr	r3, [r3, #0]
 8006c6c:	4a19      	ldr	r2, [pc, #100]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c6e:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006c72:	6013      	str	r3, [r2, #0]
 8006c74:	4b17      	ldr	r3, [pc, #92]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c76:	681b      	ldr	r3, [r3, #0]
 8006c78:	4a16      	ldr	r2, [pc, #88]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c7a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006c7e:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006c80:	4b14      	ldr	r3, [pc, #80]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c82:	681b      	ldr	r3, [r3, #0]
 8006c84:	4a13      	ldr	r2, [pc, #76]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c86:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006c8a:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006c8c:	4b11      	ldr	r3, [pc, #68]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c8e:	681b      	ldr	r3, [r3, #0]
 8006c90:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006c94:	2b00      	cmp	r3, #0
 8006c96:	d017      	beq.n	8006cc8 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006c98:	4b0e      	ldr	r3, [pc, #56]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	4a0d      	ldr	r2, [pc, #52]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006c9e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006ca2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006ca4:	4b0b      	ldr	r3, [pc, #44]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	4a0a      	ldr	r2, [pc, #40]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006caa:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006cae:	6013      	str	r3, [r2, #0]
 8006cb0:	4b08      	ldr	r3, [pc, #32]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006cb2:	681b      	ldr	r3, [r3, #0]
 8006cb4:	4a07      	ldr	r2, [pc, #28]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006cb6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006cba:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006cbc:	4b05      	ldr	r3, [pc, #20]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006cbe:	681b      	ldr	r3, [r3, #0]
 8006cc0:	4a04      	ldr	r2, [pc, #16]	; (8006cd4 <FLASH_FlushCaches+0x88>)
 8006cc2:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006cc6:	6013      	str	r3, [r2, #0]
  }
}
 8006cc8:	bf00      	nop
 8006cca:	46bd      	mov	sp, r7
 8006ccc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	40023c00 	.word	0x40023c00

08006cd8 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006cd8:	b480      	push	{r7}
 8006cda:	b089      	sub	sp, #36	; 0x24
 8006cdc:	af00      	add	r7, sp, #0
 8006cde:	6078      	str	r0, [r7, #4]
 8006ce0:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006ce2:	2300      	movs	r3, #0
 8006ce4:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006ce6:	2300      	movs	r3, #0
 8006ce8:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006cea:	2300      	movs	r3, #0
 8006cec:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006cee:	2300      	movs	r3, #0
 8006cf0:	61fb      	str	r3, [r7, #28]
 8006cf2:	e16b      	b.n	8006fcc <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006cf4:	2201      	movs	r2, #1
 8006cf6:	69fb      	ldr	r3, [r7, #28]
 8006cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfc:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006cfe:	683b      	ldr	r3, [r7, #0]
 8006d00:	681b      	ldr	r3, [r3, #0]
 8006d02:	697a      	ldr	r2, [r7, #20]
 8006d04:	4013      	ands	r3, r2
 8006d06:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006d08:	693a      	ldr	r2, [r7, #16]
 8006d0a:	697b      	ldr	r3, [r7, #20]
 8006d0c:	429a      	cmp	r2, r3
 8006d0e:	f040 815a 	bne.w	8006fc6 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d12:	683b      	ldr	r3, [r7, #0]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	f003 0303 	and.w	r3, r3, #3
 8006d1a:	2b01      	cmp	r3, #1
 8006d1c:	d005      	beq.n	8006d2a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d1e:	683b      	ldr	r3, [r7, #0]
 8006d20:	685b      	ldr	r3, [r3, #4]
 8006d22:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006d26:	2b02      	cmp	r3, #2
 8006d28:	d130      	bne.n	8006d8c <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	689b      	ldr	r3, [r3, #8]
 8006d2e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006d30:	69fb      	ldr	r3, [r7, #28]
 8006d32:	005b      	lsls	r3, r3, #1
 8006d34:	2203      	movs	r2, #3
 8006d36:	fa02 f303 	lsl.w	r3, r2, r3
 8006d3a:	43db      	mvns	r3, r3
 8006d3c:	69ba      	ldr	r2, [r7, #24]
 8006d3e:	4013      	ands	r3, r2
 8006d40:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006d42:	683b      	ldr	r3, [r7, #0]
 8006d44:	68da      	ldr	r2, [r3, #12]
 8006d46:	69fb      	ldr	r3, [r7, #28]
 8006d48:	005b      	lsls	r3, r3, #1
 8006d4a:	fa02 f303 	lsl.w	r3, r2, r3
 8006d4e:	69ba      	ldr	r2, [r7, #24]
 8006d50:	4313      	orrs	r3, r2
 8006d52:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006d54:	687b      	ldr	r3, [r7, #4]
 8006d56:	69ba      	ldr	r2, [r7, #24]
 8006d58:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006d5a:	687b      	ldr	r3, [r7, #4]
 8006d5c:	685b      	ldr	r3, [r3, #4]
 8006d5e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006d60:	2201      	movs	r2, #1
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	fa02 f303 	lsl.w	r3, r2, r3
 8006d68:	43db      	mvns	r3, r3
 8006d6a:	69ba      	ldr	r2, [r7, #24]
 8006d6c:	4013      	ands	r3, r2
 8006d6e:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006d70:	683b      	ldr	r3, [r7, #0]
 8006d72:	685b      	ldr	r3, [r3, #4]
 8006d74:	091b      	lsrs	r3, r3, #4
 8006d76:	f003 0201 	and.w	r2, r3, #1
 8006d7a:	69fb      	ldr	r3, [r7, #28]
 8006d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d80:	69ba      	ldr	r2, [r7, #24]
 8006d82:	4313      	orrs	r3, r2
 8006d84:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006d86:	687b      	ldr	r3, [r7, #4]
 8006d88:	69ba      	ldr	r2, [r7, #24]
 8006d8a:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006d8c:	683b      	ldr	r3, [r7, #0]
 8006d8e:	685b      	ldr	r3, [r3, #4]
 8006d90:	f003 0303 	and.w	r3, r3, #3
 8006d94:	2b03      	cmp	r3, #3
 8006d96:	d017      	beq.n	8006dc8 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	68db      	ldr	r3, [r3, #12]
 8006d9c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006d9e:	69fb      	ldr	r3, [r7, #28]
 8006da0:	005b      	lsls	r3, r3, #1
 8006da2:	2203      	movs	r2, #3
 8006da4:	fa02 f303 	lsl.w	r3, r2, r3
 8006da8:	43db      	mvns	r3, r3
 8006daa:	69ba      	ldr	r2, [r7, #24]
 8006dac:	4013      	ands	r3, r2
 8006dae:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006db0:	683b      	ldr	r3, [r7, #0]
 8006db2:	689a      	ldr	r2, [r3, #8]
 8006db4:	69fb      	ldr	r3, [r7, #28]
 8006db6:	005b      	lsls	r3, r3, #1
 8006db8:	fa02 f303 	lsl.w	r3, r2, r3
 8006dbc:	69ba      	ldr	r2, [r7, #24]
 8006dbe:	4313      	orrs	r3, r2
 8006dc0:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006dc2:	687b      	ldr	r3, [r7, #4]
 8006dc4:	69ba      	ldr	r2, [r7, #24]
 8006dc6:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006dc8:	683b      	ldr	r3, [r7, #0]
 8006dca:	685b      	ldr	r3, [r3, #4]
 8006dcc:	f003 0303 	and.w	r3, r3, #3
 8006dd0:	2b02      	cmp	r3, #2
 8006dd2:	d123      	bne.n	8006e1c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006dd4:	69fb      	ldr	r3, [r7, #28]
 8006dd6:	08da      	lsrs	r2, r3, #3
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	3208      	adds	r2, #8
 8006ddc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006de0:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006de2:	69fb      	ldr	r3, [r7, #28]
 8006de4:	f003 0307 	and.w	r3, r3, #7
 8006de8:	009b      	lsls	r3, r3, #2
 8006dea:	220f      	movs	r2, #15
 8006dec:	fa02 f303 	lsl.w	r3, r2, r3
 8006df0:	43db      	mvns	r3, r3
 8006df2:	69ba      	ldr	r2, [r7, #24]
 8006df4:	4013      	ands	r3, r2
 8006df6:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006df8:	683b      	ldr	r3, [r7, #0]
 8006dfa:	691a      	ldr	r2, [r3, #16]
 8006dfc:	69fb      	ldr	r3, [r7, #28]
 8006dfe:	f003 0307 	and.w	r3, r3, #7
 8006e02:	009b      	lsls	r3, r3, #2
 8006e04:	fa02 f303 	lsl.w	r3, r2, r3
 8006e08:	69ba      	ldr	r2, [r7, #24]
 8006e0a:	4313      	orrs	r3, r2
 8006e0c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006e0e:	69fb      	ldr	r3, [r7, #28]
 8006e10:	08da      	lsrs	r2, r3, #3
 8006e12:	687b      	ldr	r3, [r7, #4]
 8006e14:	3208      	adds	r2, #8
 8006e16:	69b9      	ldr	r1, [r7, #24]
 8006e18:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006e1c:	687b      	ldr	r3, [r7, #4]
 8006e1e:	681b      	ldr	r3, [r3, #0]
 8006e20:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006e22:	69fb      	ldr	r3, [r7, #28]
 8006e24:	005b      	lsls	r3, r3, #1
 8006e26:	2203      	movs	r2, #3
 8006e28:	fa02 f303 	lsl.w	r3, r2, r3
 8006e2c:	43db      	mvns	r3, r3
 8006e2e:	69ba      	ldr	r2, [r7, #24]
 8006e30:	4013      	ands	r3, r2
 8006e32:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006e34:	683b      	ldr	r3, [r7, #0]
 8006e36:	685b      	ldr	r3, [r3, #4]
 8006e38:	f003 0203 	and.w	r2, r3, #3
 8006e3c:	69fb      	ldr	r3, [r7, #28]
 8006e3e:	005b      	lsls	r3, r3, #1
 8006e40:	fa02 f303 	lsl.w	r3, r2, r3
 8006e44:	69ba      	ldr	r2, [r7, #24]
 8006e46:	4313      	orrs	r3, r2
 8006e48:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006e4a:	687b      	ldr	r3, [r7, #4]
 8006e4c:	69ba      	ldr	r2, [r7, #24]
 8006e4e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006e50:	683b      	ldr	r3, [r7, #0]
 8006e52:	685b      	ldr	r3, [r3, #4]
 8006e54:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006e58:	2b00      	cmp	r3, #0
 8006e5a:	f000 80b4 	beq.w	8006fc6 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006e5e:	2300      	movs	r3, #0
 8006e60:	60fb      	str	r3, [r7, #12]
 8006e62:	4b60      	ldr	r3, [pc, #384]	; (8006fe4 <HAL_GPIO_Init+0x30c>)
 8006e64:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e66:	4a5f      	ldr	r2, [pc, #380]	; (8006fe4 <HAL_GPIO_Init+0x30c>)
 8006e68:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006e6c:	6453      	str	r3, [r2, #68]	; 0x44
 8006e6e:	4b5d      	ldr	r3, [pc, #372]	; (8006fe4 <HAL_GPIO_Init+0x30c>)
 8006e70:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006e72:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006e76:	60fb      	str	r3, [r7, #12]
 8006e78:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006e7a:	4a5b      	ldr	r2, [pc, #364]	; (8006fe8 <HAL_GPIO_Init+0x310>)
 8006e7c:	69fb      	ldr	r3, [r7, #28]
 8006e7e:	089b      	lsrs	r3, r3, #2
 8006e80:	3302      	adds	r3, #2
 8006e82:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006e86:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006e88:	69fb      	ldr	r3, [r7, #28]
 8006e8a:	f003 0303 	and.w	r3, r3, #3
 8006e8e:	009b      	lsls	r3, r3, #2
 8006e90:	220f      	movs	r2, #15
 8006e92:	fa02 f303 	lsl.w	r3, r2, r3
 8006e96:	43db      	mvns	r3, r3
 8006e98:	69ba      	ldr	r2, [r7, #24]
 8006e9a:	4013      	ands	r3, r2
 8006e9c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006e9e:	687b      	ldr	r3, [r7, #4]
 8006ea0:	4a52      	ldr	r2, [pc, #328]	; (8006fec <HAL_GPIO_Init+0x314>)
 8006ea2:	4293      	cmp	r3, r2
 8006ea4:	d02b      	beq.n	8006efe <HAL_GPIO_Init+0x226>
 8006ea6:	687b      	ldr	r3, [r7, #4]
 8006ea8:	4a51      	ldr	r2, [pc, #324]	; (8006ff0 <HAL_GPIO_Init+0x318>)
 8006eaa:	4293      	cmp	r3, r2
 8006eac:	d025      	beq.n	8006efa <HAL_GPIO_Init+0x222>
 8006eae:	687b      	ldr	r3, [r7, #4]
 8006eb0:	4a50      	ldr	r2, [pc, #320]	; (8006ff4 <HAL_GPIO_Init+0x31c>)
 8006eb2:	4293      	cmp	r3, r2
 8006eb4:	d01f      	beq.n	8006ef6 <HAL_GPIO_Init+0x21e>
 8006eb6:	687b      	ldr	r3, [r7, #4]
 8006eb8:	4a4f      	ldr	r2, [pc, #316]	; (8006ff8 <HAL_GPIO_Init+0x320>)
 8006eba:	4293      	cmp	r3, r2
 8006ebc:	d019      	beq.n	8006ef2 <HAL_GPIO_Init+0x21a>
 8006ebe:	687b      	ldr	r3, [r7, #4]
 8006ec0:	4a4e      	ldr	r2, [pc, #312]	; (8006ffc <HAL_GPIO_Init+0x324>)
 8006ec2:	4293      	cmp	r3, r2
 8006ec4:	d013      	beq.n	8006eee <HAL_GPIO_Init+0x216>
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	4a4d      	ldr	r2, [pc, #308]	; (8007000 <HAL_GPIO_Init+0x328>)
 8006eca:	4293      	cmp	r3, r2
 8006ecc:	d00d      	beq.n	8006eea <HAL_GPIO_Init+0x212>
 8006ece:	687b      	ldr	r3, [r7, #4]
 8006ed0:	4a4c      	ldr	r2, [pc, #304]	; (8007004 <HAL_GPIO_Init+0x32c>)
 8006ed2:	4293      	cmp	r3, r2
 8006ed4:	d007      	beq.n	8006ee6 <HAL_GPIO_Init+0x20e>
 8006ed6:	687b      	ldr	r3, [r7, #4]
 8006ed8:	4a4b      	ldr	r2, [pc, #300]	; (8007008 <HAL_GPIO_Init+0x330>)
 8006eda:	4293      	cmp	r3, r2
 8006edc:	d101      	bne.n	8006ee2 <HAL_GPIO_Init+0x20a>
 8006ede:	2307      	movs	r3, #7
 8006ee0:	e00e      	b.n	8006f00 <HAL_GPIO_Init+0x228>
 8006ee2:	2308      	movs	r3, #8
 8006ee4:	e00c      	b.n	8006f00 <HAL_GPIO_Init+0x228>
 8006ee6:	2306      	movs	r3, #6
 8006ee8:	e00a      	b.n	8006f00 <HAL_GPIO_Init+0x228>
 8006eea:	2305      	movs	r3, #5
 8006eec:	e008      	b.n	8006f00 <HAL_GPIO_Init+0x228>
 8006eee:	2304      	movs	r3, #4
 8006ef0:	e006      	b.n	8006f00 <HAL_GPIO_Init+0x228>
 8006ef2:	2303      	movs	r3, #3
 8006ef4:	e004      	b.n	8006f00 <HAL_GPIO_Init+0x228>
 8006ef6:	2302      	movs	r3, #2
 8006ef8:	e002      	b.n	8006f00 <HAL_GPIO_Init+0x228>
 8006efa:	2301      	movs	r3, #1
 8006efc:	e000      	b.n	8006f00 <HAL_GPIO_Init+0x228>
 8006efe:	2300      	movs	r3, #0
 8006f00:	69fa      	ldr	r2, [r7, #28]
 8006f02:	f002 0203 	and.w	r2, r2, #3
 8006f06:	0092      	lsls	r2, r2, #2
 8006f08:	4093      	lsls	r3, r2
 8006f0a:	69ba      	ldr	r2, [r7, #24]
 8006f0c:	4313      	orrs	r3, r2
 8006f0e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006f10:	4935      	ldr	r1, [pc, #212]	; (8006fe8 <HAL_GPIO_Init+0x310>)
 8006f12:	69fb      	ldr	r3, [r7, #28]
 8006f14:	089b      	lsrs	r3, r3, #2
 8006f16:	3302      	adds	r3, #2
 8006f18:	69ba      	ldr	r2, [r7, #24]
 8006f1a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006f1e:	4b3b      	ldr	r3, [pc, #236]	; (800700c <HAL_GPIO_Init+0x334>)
 8006f20:	681b      	ldr	r3, [r3, #0]
 8006f22:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f24:	693b      	ldr	r3, [r7, #16]
 8006f26:	43db      	mvns	r3, r3
 8006f28:	69ba      	ldr	r2, [r7, #24]
 8006f2a:	4013      	ands	r3, r2
 8006f2c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006f2e:	683b      	ldr	r3, [r7, #0]
 8006f30:	685b      	ldr	r3, [r3, #4]
 8006f32:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006f36:	2b00      	cmp	r3, #0
 8006f38:	d003      	beq.n	8006f42 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006f3a:	69ba      	ldr	r2, [r7, #24]
 8006f3c:	693b      	ldr	r3, [r7, #16]
 8006f3e:	4313      	orrs	r3, r2
 8006f40:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006f42:	4a32      	ldr	r2, [pc, #200]	; (800700c <HAL_GPIO_Init+0x334>)
 8006f44:	69bb      	ldr	r3, [r7, #24]
 8006f46:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006f48:	4b30      	ldr	r3, [pc, #192]	; (800700c <HAL_GPIO_Init+0x334>)
 8006f4a:	685b      	ldr	r3, [r3, #4]
 8006f4c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f4e:	693b      	ldr	r3, [r7, #16]
 8006f50:	43db      	mvns	r3, r3
 8006f52:	69ba      	ldr	r2, [r7, #24]
 8006f54:	4013      	ands	r3, r2
 8006f56:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006f58:	683b      	ldr	r3, [r7, #0]
 8006f5a:	685b      	ldr	r3, [r3, #4]
 8006f5c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006f60:	2b00      	cmp	r3, #0
 8006f62:	d003      	beq.n	8006f6c <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006f64:	69ba      	ldr	r2, [r7, #24]
 8006f66:	693b      	ldr	r3, [r7, #16]
 8006f68:	4313      	orrs	r3, r2
 8006f6a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006f6c:	4a27      	ldr	r2, [pc, #156]	; (800700c <HAL_GPIO_Init+0x334>)
 8006f6e:	69bb      	ldr	r3, [r7, #24]
 8006f70:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006f72:	4b26      	ldr	r3, [pc, #152]	; (800700c <HAL_GPIO_Init+0x334>)
 8006f74:	689b      	ldr	r3, [r3, #8]
 8006f76:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006f78:	693b      	ldr	r3, [r7, #16]
 8006f7a:	43db      	mvns	r3, r3
 8006f7c:	69ba      	ldr	r2, [r7, #24]
 8006f7e:	4013      	ands	r3, r2
 8006f80:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006f82:	683b      	ldr	r3, [r7, #0]
 8006f84:	685b      	ldr	r3, [r3, #4]
 8006f86:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006f8a:	2b00      	cmp	r3, #0
 8006f8c:	d003      	beq.n	8006f96 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006f8e:	69ba      	ldr	r2, [r7, #24]
 8006f90:	693b      	ldr	r3, [r7, #16]
 8006f92:	4313      	orrs	r3, r2
 8006f94:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006f96:	4a1d      	ldr	r2, [pc, #116]	; (800700c <HAL_GPIO_Init+0x334>)
 8006f98:	69bb      	ldr	r3, [r7, #24]
 8006f9a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006f9c:	4b1b      	ldr	r3, [pc, #108]	; (800700c <HAL_GPIO_Init+0x334>)
 8006f9e:	68db      	ldr	r3, [r3, #12]
 8006fa0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006fa2:	693b      	ldr	r3, [r7, #16]
 8006fa4:	43db      	mvns	r3, r3
 8006fa6:	69ba      	ldr	r2, [r7, #24]
 8006fa8:	4013      	ands	r3, r2
 8006faa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006fac:	683b      	ldr	r3, [r7, #0]
 8006fae:	685b      	ldr	r3, [r3, #4]
 8006fb0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006fb4:	2b00      	cmp	r3, #0
 8006fb6:	d003      	beq.n	8006fc0 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006fb8:	69ba      	ldr	r2, [r7, #24]
 8006fba:	693b      	ldr	r3, [r7, #16]
 8006fbc:	4313      	orrs	r3, r2
 8006fbe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006fc0:	4a12      	ldr	r2, [pc, #72]	; (800700c <HAL_GPIO_Init+0x334>)
 8006fc2:	69bb      	ldr	r3, [r7, #24]
 8006fc4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006fc6:	69fb      	ldr	r3, [r7, #28]
 8006fc8:	3301      	adds	r3, #1
 8006fca:	61fb      	str	r3, [r7, #28]
 8006fcc:	69fb      	ldr	r3, [r7, #28]
 8006fce:	2b0f      	cmp	r3, #15
 8006fd0:	f67f ae90 	bls.w	8006cf4 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006fd4:	bf00      	nop
 8006fd6:	bf00      	nop
 8006fd8:	3724      	adds	r7, #36	; 0x24
 8006fda:	46bd      	mov	sp, r7
 8006fdc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe0:	4770      	bx	lr
 8006fe2:	bf00      	nop
 8006fe4:	40023800 	.word	0x40023800
 8006fe8:	40013800 	.word	0x40013800
 8006fec:	40020000 	.word	0x40020000
 8006ff0:	40020400 	.word	0x40020400
 8006ff4:	40020800 	.word	0x40020800
 8006ff8:	40020c00 	.word	0x40020c00
 8006ffc:	40021000 	.word	0x40021000
 8007000:	40021400 	.word	0x40021400
 8007004:	40021800 	.word	0x40021800
 8007008:	40021c00 	.word	0x40021c00
 800700c:	40013c00 	.word	0x40013c00

08007010 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007010:	b480      	push	{r7}
 8007012:	b085      	sub	sp, #20
 8007014:	af00      	add	r7, sp, #0
 8007016:	6078      	str	r0, [r7, #4]
 8007018:	460b      	mov	r3, r1
 800701a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800701c:	687b      	ldr	r3, [r7, #4]
 800701e:	691a      	ldr	r2, [r3, #16]
 8007020:	887b      	ldrh	r3, [r7, #2]
 8007022:	4013      	ands	r3, r2
 8007024:	2b00      	cmp	r3, #0
 8007026:	d002      	beq.n	800702e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8007028:	2301      	movs	r3, #1
 800702a:	73fb      	strb	r3, [r7, #15]
 800702c:	e001      	b.n	8007032 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800702e:	2300      	movs	r3, #0
 8007030:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8007032:	7bfb      	ldrb	r3, [r7, #15]
}
 8007034:	4618      	mov	r0, r3
 8007036:	3714      	adds	r7, #20
 8007038:	46bd      	mov	sp, r7
 800703a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800703e:	4770      	bx	lr

08007040 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8007040:	b480      	push	{r7}
 8007042:	b083      	sub	sp, #12
 8007044:	af00      	add	r7, sp, #0
 8007046:	6078      	str	r0, [r7, #4]
 8007048:	460b      	mov	r3, r1
 800704a:	807b      	strh	r3, [r7, #2]
 800704c:	4613      	mov	r3, r2
 800704e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8007050:	787b      	ldrb	r3, [r7, #1]
 8007052:	2b00      	cmp	r3, #0
 8007054:	d003      	beq.n	800705e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8007056:	887a      	ldrh	r2, [r7, #2]
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 800705c:	e003      	b.n	8007066 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 800705e:	887b      	ldrh	r3, [r7, #2]
 8007060:	041a      	lsls	r2, r3, #16
 8007062:	687b      	ldr	r3, [r7, #4]
 8007064:	619a      	str	r2, [r3, #24]
}
 8007066:	bf00      	nop
 8007068:	370c      	adds	r7, #12
 800706a:	46bd      	mov	sp, r7
 800706c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007070:	4770      	bx	lr

08007072 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8007072:	b480      	push	{r7}
 8007074:	b085      	sub	sp, #20
 8007076:	af00      	add	r7, sp, #0
 8007078:	6078      	str	r0, [r7, #4]
 800707a:	460b      	mov	r3, r1
 800707c:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	695b      	ldr	r3, [r3, #20]
 8007082:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8007084:	887a      	ldrh	r2, [r7, #2]
 8007086:	68fb      	ldr	r3, [r7, #12]
 8007088:	4013      	ands	r3, r2
 800708a:	041a      	lsls	r2, r3, #16
 800708c:	68fb      	ldr	r3, [r7, #12]
 800708e:	43d9      	mvns	r1, r3
 8007090:	887b      	ldrh	r3, [r7, #2]
 8007092:	400b      	ands	r3, r1
 8007094:	431a      	orrs	r2, r3
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	619a      	str	r2, [r3, #24]
}
 800709a:	bf00      	nop
 800709c:	3714      	adds	r7, #20
 800709e:	46bd      	mov	sp, r7
 80070a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070a4:	4770      	bx	lr
	...

080070a8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80070a8:	b580      	push	{r7, lr}
 80070aa:	b086      	sub	sp, #24
 80070ac:	af00      	add	r7, sp, #0
 80070ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80070b0:	687b      	ldr	r3, [r7, #4]
 80070b2:	2b00      	cmp	r3, #0
 80070b4:	d101      	bne.n	80070ba <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80070b6:	2301      	movs	r3, #1
 80070b8:	e267      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80070ba:	687b      	ldr	r3, [r7, #4]
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f003 0301 	and.w	r3, r3, #1
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d075      	beq.n	80071b2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070c6:	4b88      	ldr	r3, [pc, #544]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80070c8:	689b      	ldr	r3, [r3, #8]
 80070ca:	f003 030c 	and.w	r3, r3, #12
 80070ce:	2b04      	cmp	r3, #4
 80070d0:	d00c      	beq.n	80070ec <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070d2:	4b85      	ldr	r3, [pc, #532]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80070d4:	689b      	ldr	r3, [r3, #8]
 80070d6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80070da:	2b08      	cmp	r3, #8
 80070dc:	d112      	bne.n	8007104 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80070de:	4b82      	ldr	r3, [pc, #520]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80070e0:	685b      	ldr	r3, [r3, #4]
 80070e2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80070e6:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80070ea:	d10b      	bne.n	8007104 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070ec:	4b7e      	ldr	r3, [pc, #504]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80070ee:	681b      	ldr	r3, [r3, #0]
 80070f0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070f4:	2b00      	cmp	r3, #0
 80070f6:	d05b      	beq.n	80071b0 <HAL_RCC_OscConfig+0x108>
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	685b      	ldr	r3, [r3, #4]
 80070fc:	2b00      	cmp	r3, #0
 80070fe:	d157      	bne.n	80071b0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007100:	2301      	movs	r3, #1
 8007102:	e242      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007104:	687b      	ldr	r3, [r7, #4]
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800710c:	d106      	bne.n	800711c <HAL_RCC_OscConfig+0x74>
 800710e:	4b76      	ldr	r3, [pc, #472]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007110:	681b      	ldr	r3, [r3, #0]
 8007112:	4a75      	ldr	r2, [pc, #468]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007114:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007118:	6013      	str	r3, [r2, #0]
 800711a:	e01d      	b.n	8007158 <HAL_RCC_OscConfig+0xb0>
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	685b      	ldr	r3, [r3, #4]
 8007120:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007124:	d10c      	bne.n	8007140 <HAL_RCC_OscConfig+0x98>
 8007126:	4b70      	ldr	r3, [pc, #448]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007128:	681b      	ldr	r3, [r3, #0]
 800712a:	4a6f      	ldr	r2, [pc, #444]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 800712c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007130:	6013      	str	r3, [r2, #0]
 8007132:	4b6d      	ldr	r3, [pc, #436]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	4a6c      	ldr	r2, [pc, #432]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007138:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800713c:	6013      	str	r3, [r2, #0]
 800713e:	e00b      	b.n	8007158 <HAL_RCC_OscConfig+0xb0>
 8007140:	4b69      	ldr	r3, [pc, #420]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007142:	681b      	ldr	r3, [r3, #0]
 8007144:	4a68      	ldr	r2, [pc, #416]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007146:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800714a:	6013      	str	r3, [r2, #0]
 800714c:	4b66      	ldr	r3, [pc, #408]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 800714e:	681b      	ldr	r3, [r3, #0]
 8007150:	4a65      	ldr	r2, [pc, #404]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007152:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007156:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007158:	687b      	ldr	r3, [r7, #4]
 800715a:	685b      	ldr	r3, [r3, #4]
 800715c:	2b00      	cmp	r3, #0
 800715e:	d013      	beq.n	8007188 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007160:	f7ff f8e8 	bl	8006334 <HAL_GetTick>
 8007164:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007166:	e008      	b.n	800717a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007168:	f7ff f8e4 	bl	8006334 <HAL_GetTick>
 800716c:	4602      	mov	r2, r0
 800716e:	693b      	ldr	r3, [r7, #16]
 8007170:	1ad3      	subs	r3, r2, r3
 8007172:	2b64      	cmp	r3, #100	; 0x64
 8007174:	d901      	bls.n	800717a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8007176:	2303      	movs	r3, #3
 8007178:	e207      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800717a:	4b5b      	ldr	r3, [pc, #364]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 800717c:	681b      	ldr	r3, [r3, #0]
 800717e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007182:	2b00      	cmp	r3, #0
 8007184:	d0f0      	beq.n	8007168 <HAL_RCC_OscConfig+0xc0>
 8007186:	e014      	b.n	80071b2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007188:	f7ff f8d4 	bl	8006334 <HAL_GetTick>
 800718c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800718e:	e008      	b.n	80071a2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8007190:	f7ff f8d0 	bl	8006334 <HAL_GetTick>
 8007194:	4602      	mov	r2, r0
 8007196:	693b      	ldr	r3, [r7, #16]
 8007198:	1ad3      	subs	r3, r2, r3
 800719a:	2b64      	cmp	r3, #100	; 0x64
 800719c:	d901      	bls.n	80071a2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800719e:	2303      	movs	r3, #3
 80071a0:	e1f3      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80071a2:	4b51      	ldr	r3, [pc, #324]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80071a4:	681b      	ldr	r3, [r3, #0]
 80071a6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80071aa:	2b00      	cmp	r3, #0
 80071ac:	d1f0      	bne.n	8007190 <HAL_RCC_OscConfig+0xe8>
 80071ae:	e000      	b.n	80071b2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80071b0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80071b2:	687b      	ldr	r3, [r7, #4]
 80071b4:	681b      	ldr	r3, [r3, #0]
 80071b6:	f003 0302 	and.w	r3, r3, #2
 80071ba:	2b00      	cmp	r3, #0
 80071bc:	d063      	beq.n	8007286 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071be:	4b4a      	ldr	r3, [pc, #296]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80071c0:	689b      	ldr	r3, [r3, #8]
 80071c2:	f003 030c 	and.w	r3, r3, #12
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00b      	beq.n	80071e2 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071ca:	4b47      	ldr	r3, [pc, #284]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80071cc:	689b      	ldr	r3, [r3, #8]
 80071ce:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80071d2:	2b08      	cmp	r3, #8
 80071d4:	d11c      	bne.n	8007210 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80071d6:	4b44      	ldr	r3, [pc, #272]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80071d8:	685b      	ldr	r3, [r3, #4]
 80071da:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80071de:	2b00      	cmp	r3, #0
 80071e0:	d116      	bne.n	8007210 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80071e2:	4b41      	ldr	r3, [pc, #260]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80071e4:	681b      	ldr	r3, [r3, #0]
 80071e6:	f003 0302 	and.w	r3, r3, #2
 80071ea:	2b00      	cmp	r3, #0
 80071ec:	d005      	beq.n	80071fa <HAL_RCC_OscConfig+0x152>
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	68db      	ldr	r3, [r3, #12]
 80071f2:	2b01      	cmp	r3, #1
 80071f4:	d001      	beq.n	80071fa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80071f6:	2301      	movs	r3, #1
 80071f8:	e1c7      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80071fa:	4b3b      	ldr	r3, [pc, #236]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	691b      	ldr	r3, [r3, #16]
 8007206:	00db      	lsls	r3, r3, #3
 8007208:	4937      	ldr	r1, [pc, #220]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 800720a:	4313      	orrs	r3, r2
 800720c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800720e:	e03a      	b.n	8007286 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	68db      	ldr	r3, [r3, #12]
 8007214:	2b00      	cmp	r3, #0
 8007216:	d020      	beq.n	800725a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007218:	4b34      	ldr	r3, [pc, #208]	; (80072ec <HAL_RCC_OscConfig+0x244>)
 800721a:	2201      	movs	r2, #1
 800721c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800721e:	f7ff f889 	bl	8006334 <HAL_GetTick>
 8007222:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007224:	e008      	b.n	8007238 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007226:	f7ff f885 	bl	8006334 <HAL_GetTick>
 800722a:	4602      	mov	r2, r0
 800722c:	693b      	ldr	r3, [r7, #16]
 800722e:	1ad3      	subs	r3, r2, r3
 8007230:	2b02      	cmp	r3, #2
 8007232:	d901      	bls.n	8007238 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007234:	2303      	movs	r3, #3
 8007236:	e1a8      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007238:	4b2b      	ldr	r3, [pc, #172]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 800723a:	681b      	ldr	r3, [r3, #0]
 800723c:	f003 0302 	and.w	r3, r3, #2
 8007240:	2b00      	cmp	r3, #0
 8007242:	d0f0      	beq.n	8007226 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007244:	4b28      	ldr	r3, [pc, #160]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007246:	681b      	ldr	r3, [r3, #0]
 8007248:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	691b      	ldr	r3, [r3, #16]
 8007250:	00db      	lsls	r3, r3, #3
 8007252:	4925      	ldr	r1, [pc, #148]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 8007254:	4313      	orrs	r3, r2
 8007256:	600b      	str	r3, [r1, #0]
 8007258:	e015      	b.n	8007286 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800725a:	4b24      	ldr	r3, [pc, #144]	; (80072ec <HAL_RCC_OscConfig+0x244>)
 800725c:	2200      	movs	r2, #0
 800725e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8007260:	f7ff f868 	bl	8006334 <HAL_GetTick>
 8007264:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8007266:	e008      	b.n	800727a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007268:	f7ff f864 	bl	8006334 <HAL_GetTick>
 800726c:	4602      	mov	r2, r0
 800726e:	693b      	ldr	r3, [r7, #16]
 8007270:	1ad3      	subs	r3, r2, r3
 8007272:	2b02      	cmp	r3, #2
 8007274:	d901      	bls.n	800727a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8007276:	2303      	movs	r3, #3
 8007278:	e187      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800727a:	4b1b      	ldr	r3, [pc, #108]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 800727c:	681b      	ldr	r3, [r3, #0]
 800727e:	f003 0302 	and.w	r3, r3, #2
 8007282:	2b00      	cmp	r3, #0
 8007284:	d1f0      	bne.n	8007268 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	f003 0308 	and.w	r3, r3, #8
 800728e:	2b00      	cmp	r3, #0
 8007290:	d036      	beq.n	8007300 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8007292:	687b      	ldr	r3, [r7, #4]
 8007294:	695b      	ldr	r3, [r3, #20]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d016      	beq.n	80072c8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800729a:	4b15      	ldr	r3, [pc, #84]	; (80072f0 <HAL_RCC_OscConfig+0x248>)
 800729c:	2201      	movs	r2, #1
 800729e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80072a0:	f7ff f848 	bl	8006334 <HAL_GetTick>
 80072a4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072a6:	e008      	b.n	80072ba <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072a8:	f7ff f844 	bl	8006334 <HAL_GetTick>
 80072ac:	4602      	mov	r2, r0
 80072ae:	693b      	ldr	r3, [r7, #16]
 80072b0:	1ad3      	subs	r3, r2, r3
 80072b2:	2b02      	cmp	r3, #2
 80072b4:	d901      	bls.n	80072ba <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80072b6:	2303      	movs	r3, #3
 80072b8:	e167      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80072ba:	4b0b      	ldr	r3, [pc, #44]	; (80072e8 <HAL_RCC_OscConfig+0x240>)
 80072bc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072be:	f003 0302 	and.w	r3, r3, #2
 80072c2:	2b00      	cmp	r3, #0
 80072c4:	d0f0      	beq.n	80072a8 <HAL_RCC_OscConfig+0x200>
 80072c6:	e01b      	b.n	8007300 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80072c8:	4b09      	ldr	r3, [pc, #36]	; (80072f0 <HAL_RCC_OscConfig+0x248>)
 80072ca:	2200      	movs	r2, #0
 80072cc:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80072ce:	f7ff f831 	bl	8006334 <HAL_GetTick>
 80072d2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072d4:	e00e      	b.n	80072f4 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80072d6:	f7ff f82d 	bl	8006334 <HAL_GetTick>
 80072da:	4602      	mov	r2, r0
 80072dc:	693b      	ldr	r3, [r7, #16]
 80072de:	1ad3      	subs	r3, r2, r3
 80072e0:	2b02      	cmp	r3, #2
 80072e2:	d907      	bls.n	80072f4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80072e4:	2303      	movs	r3, #3
 80072e6:	e150      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
 80072e8:	40023800 	.word	0x40023800
 80072ec:	42470000 	.word	0x42470000
 80072f0:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80072f4:	4b88      	ldr	r3, [pc, #544]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80072f6:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80072f8:	f003 0302 	and.w	r3, r3, #2
 80072fc:	2b00      	cmp	r3, #0
 80072fe:	d1ea      	bne.n	80072d6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	681b      	ldr	r3, [r3, #0]
 8007304:	f003 0304 	and.w	r3, r3, #4
 8007308:	2b00      	cmp	r3, #0
 800730a:	f000 8097 	beq.w	800743c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800730e:	2300      	movs	r3, #0
 8007310:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007312:	4b81      	ldr	r3, [pc, #516]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007314:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007316:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800731a:	2b00      	cmp	r3, #0
 800731c:	d10f      	bne.n	800733e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800731e:	2300      	movs	r3, #0
 8007320:	60bb      	str	r3, [r7, #8]
 8007322:	4b7d      	ldr	r3, [pc, #500]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007324:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007326:	4a7c      	ldr	r2, [pc, #496]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007328:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800732c:	6413      	str	r3, [r2, #64]	; 0x40
 800732e:	4b7a      	ldr	r3, [pc, #488]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007330:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007332:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007336:	60bb      	str	r3, [r7, #8]
 8007338:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800733a:	2301      	movs	r3, #1
 800733c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800733e:	4b77      	ldr	r3, [pc, #476]	; (800751c <HAL_RCC_OscConfig+0x474>)
 8007340:	681b      	ldr	r3, [r3, #0]
 8007342:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007346:	2b00      	cmp	r3, #0
 8007348:	d118      	bne.n	800737c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800734a:	4b74      	ldr	r3, [pc, #464]	; (800751c <HAL_RCC_OscConfig+0x474>)
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a73      	ldr	r2, [pc, #460]	; (800751c <HAL_RCC_OscConfig+0x474>)
 8007350:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007354:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007356:	f7fe ffed 	bl	8006334 <HAL_GetTick>
 800735a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800735c:	e008      	b.n	8007370 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800735e:	f7fe ffe9 	bl	8006334 <HAL_GetTick>
 8007362:	4602      	mov	r2, r0
 8007364:	693b      	ldr	r3, [r7, #16]
 8007366:	1ad3      	subs	r3, r2, r3
 8007368:	2b02      	cmp	r3, #2
 800736a:	d901      	bls.n	8007370 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800736c:	2303      	movs	r3, #3
 800736e:	e10c      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8007370:	4b6a      	ldr	r3, [pc, #424]	; (800751c <HAL_RCC_OscConfig+0x474>)
 8007372:	681b      	ldr	r3, [r3, #0]
 8007374:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007378:	2b00      	cmp	r3, #0
 800737a:	d0f0      	beq.n	800735e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	689b      	ldr	r3, [r3, #8]
 8007380:	2b01      	cmp	r3, #1
 8007382:	d106      	bne.n	8007392 <HAL_RCC_OscConfig+0x2ea>
 8007384:	4b64      	ldr	r3, [pc, #400]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007386:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007388:	4a63      	ldr	r2, [pc, #396]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 800738a:	f043 0301 	orr.w	r3, r3, #1
 800738e:	6713      	str	r3, [r2, #112]	; 0x70
 8007390:	e01c      	b.n	80073cc <HAL_RCC_OscConfig+0x324>
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	689b      	ldr	r3, [r3, #8]
 8007396:	2b05      	cmp	r3, #5
 8007398:	d10c      	bne.n	80073b4 <HAL_RCC_OscConfig+0x30c>
 800739a:	4b5f      	ldr	r3, [pc, #380]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 800739c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800739e:	4a5e      	ldr	r2, [pc, #376]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80073a0:	f043 0304 	orr.w	r3, r3, #4
 80073a4:	6713      	str	r3, [r2, #112]	; 0x70
 80073a6:	4b5c      	ldr	r3, [pc, #368]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80073a8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073aa:	4a5b      	ldr	r2, [pc, #364]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80073ac:	f043 0301 	orr.w	r3, r3, #1
 80073b0:	6713      	str	r3, [r2, #112]	; 0x70
 80073b2:	e00b      	b.n	80073cc <HAL_RCC_OscConfig+0x324>
 80073b4:	4b58      	ldr	r3, [pc, #352]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80073b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073b8:	4a57      	ldr	r2, [pc, #348]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80073ba:	f023 0301 	bic.w	r3, r3, #1
 80073be:	6713      	str	r3, [r2, #112]	; 0x70
 80073c0:	4b55      	ldr	r3, [pc, #340]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80073c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073c4:	4a54      	ldr	r2, [pc, #336]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80073c6:	f023 0304 	bic.w	r3, r3, #4
 80073ca:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80073cc:	687b      	ldr	r3, [r7, #4]
 80073ce:	689b      	ldr	r3, [r3, #8]
 80073d0:	2b00      	cmp	r3, #0
 80073d2:	d015      	beq.n	8007400 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80073d4:	f7fe ffae 	bl	8006334 <HAL_GetTick>
 80073d8:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073da:	e00a      	b.n	80073f2 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80073dc:	f7fe ffaa 	bl	8006334 <HAL_GetTick>
 80073e0:	4602      	mov	r2, r0
 80073e2:	693b      	ldr	r3, [r7, #16]
 80073e4:	1ad3      	subs	r3, r2, r3
 80073e6:	f241 3288 	movw	r2, #5000	; 0x1388
 80073ea:	4293      	cmp	r3, r2
 80073ec:	d901      	bls.n	80073f2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 80073ee:	2303      	movs	r3, #3
 80073f0:	e0cb      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80073f2:	4b49      	ldr	r3, [pc, #292]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80073f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80073f6:	f003 0302 	and.w	r3, r3, #2
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	d0ee      	beq.n	80073dc <HAL_RCC_OscConfig+0x334>
 80073fe:	e014      	b.n	800742a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007400:	f7fe ff98 	bl	8006334 <HAL_GetTick>
 8007404:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007406:	e00a      	b.n	800741e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007408:	f7fe ff94 	bl	8006334 <HAL_GetTick>
 800740c:	4602      	mov	r2, r0
 800740e:	693b      	ldr	r3, [r7, #16]
 8007410:	1ad3      	subs	r3, r2, r3
 8007412:	f241 3288 	movw	r2, #5000	; 0x1388
 8007416:	4293      	cmp	r3, r2
 8007418:	d901      	bls.n	800741e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800741a:	2303      	movs	r3, #3
 800741c:	e0b5      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800741e:	4b3e      	ldr	r3, [pc, #248]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007420:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007422:	f003 0302 	and.w	r3, r3, #2
 8007426:	2b00      	cmp	r3, #0
 8007428:	d1ee      	bne.n	8007408 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800742a:	7dfb      	ldrb	r3, [r7, #23]
 800742c:	2b01      	cmp	r3, #1
 800742e:	d105      	bne.n	800743c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007430:	4b39      	ldr	r3, [pc, #228]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007432:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007434:	4a38      	ldr	r2, [pc, #224]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007436:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800743a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	699b      	ldr	r3, [r3, #24]
 8007440:	2b00      	cmp	r3, #0
 8007442:	f000 80a1 	beq.w	8007588 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007446:	4b34      	ldr	r3, [pc, #208]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007448:	689b      	ldr	r3, [r3, #8]
 800744a:	f003 030c 	and.w	r3, r3, #12
 800744e:	2b08      	cmp	r3, #8
 8007450:	d05c      	beq.n	800750c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007452:	687b      	ldr	r3, [r7, #4]
 8007454:	699b      	ldr	r3, [r3, #24]
 8007456:	2b02      	cmp	r3, #2
 8007458:	d141      	bne.n	80074de <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800745a:	4b31      	ldr	r3, [pc, #196]	; (8007520 <HAL_RCC_OscConfig+0x478>)
 800745c:	2200      	movs	r2, #0
 800745e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007460:	f7fe ff68 	bl	8006334 <HAL_GetTick>
 8007464:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8007466:	e008      	b.n	800747a <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8007468:	f7fe ff64 	bl	8006334 <HAL_GetTick>
 800746c:	4602      	mov	r2, r0
 800746e:	693b      	ldr	r3, [r7, #16]
 8007470:	1ad3      	subs	r3, r2, r3
 8007472:	2b02      	cmp	r3, #2
 8007474:	d901      	bls.n	800747a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8007476:	2303      	movs	r3, #3
 8007478:	e087      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800747a:	4b27      	ldr	r3, [pc, #156]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 800747c:	681b      	ldr	r3, [r3, #0]
 800747e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007482:	2b00      	cmp	r3, #0
 8007484:	d1f0      	bne.n	8007468 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	69da      	ldr	r2, [r3, #28]
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	6a1b      	ldr	r3, [r3, #32]
 800748e:	431a      	orrs	r2, r3
 8007490:	687b      	ldr	r3, [r7, #4]
 8007492:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007494:	019b      	lsls	r3, r3, #6
 8007496:	431a      	orrs	r2, r3
 8007498:	687b      	ldr	r3, [r7, #4]
 800749a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800749c:	085b      	lsrs	r3, r3, #1
 800749e:	3b01      	subs	r3, #1
 80074a0:	041b      	lsls	r3, r3, #16
 80074a2:	431a      	orrs	r2, r3
 80074a4:	687b      	ldr	r3, [r7, #4]
 80074a6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074a8:	061b      	lsls	r3, r3, #24
 80074aa:	491b      	ldr	r1, [pc, #108]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80074ac:	4313      	orrs	r3, r2
 80074ae:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80074b0:	4b1b      	ldr	r3, [pc, #108]	; (8007520 <HAL_RCC_OscConfig+0x478>)
 80074b2:	2201      	movs	r2, #1
 80074b4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074b6:	f7fe ff3d 	bl	8006334 <HAL_GetTick>
 80074ba:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074bc:	e008      	b.n	80074d0 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074be:	f7fe ff39 	bl	8006334 <HAL_GetTick>
 80074c2:	4602      	mov	r2, r0
 80074c4:	693b      	ldr	r3, [r7, #16]
 80074c6:	1ad3      	subs	r3, r2, r3
 80074c8:	2b02      	cmp	r3, #2
 80074ca:	d901      	bls.n	80074d0 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80074cc:	2303      	movs	r3, #3
 80074ce:	e05c      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80074d0:	4b11      	ldr	r3, [pc, #68]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 80074d2:	681b      	ldr	r3, [r3, #0]
 80074d4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80074d8:	2b00      	cmp	r3, #0
 80074da:	d0f0      	beq.n	80074be <HAL_RCC_OscConfig+0x416>
 80074dc:	e054      	b.n	8007588 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80074de:	4b10      	ldr	r3, [pc, #64]	; (8007520 <HAL_RCC_OscConfig+0x478>)
 80074e0:	2200      	movs	r2, #0
 80074e2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80074e4:	f7fe ff26 	bl	8006334 <HAL_GetTick>
 80074e8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074ea:	e008      	b.n	80074fe <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80074ec:	f7fe ff22 	bl	8006334 <HAL_GetTick>
 80074f0:	4602      	mov	r2, r0
 80074f2:	693b      	ldr	r3, [r7, #16]
 80074f4:	1ad3      	subs	r3, r2, r3
 80074f6:	2b02      	cmp	r3, #2
 80074f8:	d901      	bls.n	80074fe <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80074fa:	2303      	movs	r3, #3
 80074fc:	e045      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80074fe:	4b06      	ldr	r3, [pc, #24]	; (8007518 <HAL_RCC_OscConfig+0x470>)
 8007500:	681b      	ldr	r3, [r3, #0]
 8007502:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007506:	2b00      	cmp	r3, #0
 8007508:	d1f0      	bne.n	80074ec <HAL_RCC_OscConfig+0x444>
 800750a:	e03d      	b.n	8007588 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	699b      	ldr	r3, [r3, #24]
 8007510:	2b01      	cmp	r3, #1
 8007512:	d107      	bne.n	8007524 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007514:	2301      	movs	r3, #1
 8007516:	e038      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
 8007518:	40023800 	.word	0x40023800
 800751c:	40007000 	.word	0x40007000
 8007520:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007524:	4b1b      	ldr	r3, [pc, #108]	; (8007594 <HAL_RCC_OscConfig+0x4ec>)
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	699b      	ldr	r3, [r3, #24]
 800752e:	2b01      	cmp	r3, #1
 8007530:	d028      	beq.n	8007584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007532:	68fb      	ldr	r3, [r7, #12]
 8007534:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800753c:	429a      	cmp	r2, r3
 800753e:	d121      	bne.n	8007584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800754a:	429a      	cmp	r2, r3
 800754c:	d11a      	bne.n	8007584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800754e:	68fa      	ldr	r2, [r7, #12]
 8007550:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007554:	4013      	ands	r3, r2
 8007556:	687a      	ldr	r2, [r7, #4]
 8007558:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800755a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800755c:	4293      	cmp	r3, r2
 800755e:	d111      	bne.n	8007584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007560:	68fb      	ldr	r3, [r7, #12]
 8007562:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8007566:	687b      	ldr	r3, [r7, #4]
 8007568:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800756a:	085b      	lsrs	r3, r3, #1
 800756c:	3b01      	subs	r3, #1
 800756e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8007570:	429a      	cmp	r2, r3
 8007572:	d107      	bne.n	8007584 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8007574:	68fb      	ldr	r3, [r7, #12]
 8007576:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800757a:	687b      	ldr	r3, [r7, #4]
 800757c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800757e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8007580:	429a      	cmp	r2, r3
 8007582:	d001      	beq.n	8007588 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8007584:	2301      	movs	r3, #1
 8007586:	e000      	b.n	800758a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8007588:	2300      	movs	r3, #0
}
 800758a:	4618      	mov	r0, r3
 800758c:	3718      	adds	r7, #24
 800758e:	46bd      	mov	sp, r7
 8007590:	bd80      	pop	{r7, pc}
 8007592:	bf00      	nop
 8007594:	40023800 	.word	0x40023800

08007598 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8007598:	b580      	push	{r7, lr}
 800759a:	b084      	sub	sp, #16
 800759c:	af00      	add	r7, sp, #0
 800759e:	6078      	str	r0, [r7, #4]
 80075a0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	2b00      	cmp	r3, #0
 80075a6:	d101      	bne.n	80075ac <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80075a8:	2301      	movs	r3, #1
 80075aa:	e0cc      	b.n	8007746 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80075ac:	4b68      	ldr	r3, [pc, #416]	; (8007750 <HAL_RCC_ClockConfig+0x1b8>)
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f003 0307 	and.w	r3, r3, #7
 80075b4:	683a      	ldr	r2, [r7, #0]
 80075b6:	429a      	cmp	r2, r3
 80075b8:	d90c      	bls.n	80075d4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80075ba:	4b65      	ldr	r3, [pc, #404]	; (8007750 <HAL_RCC_ClockConfig+0x1b8>)
 80075bc:	683a      	ldr	r2, [r7, #0]
 80075be:	b2d2      	uxtb	r2, r2
 80075c0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80075c2:	4b63      	ldr	r3, [pc, #396]	; (8007750 <HAL_RCC_ClockConfig+0x1b8>)
 80075c4:	681b      	ldr	r3, [r3, #0]
 80075c6:	f003 0307 	and.w	r3, r3, #7
 80075ca:	683a      	ldr	r2, [r7, #0]
 80075cc:	429a      	cmp	r2, r3
 80075ce:	d001      	beq.n	80075d4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80075d0:	2301      	movs	r3, #1
 80075d2:	e0b8      	b.n	8007746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	681b      	ldr	r3, [r3, #0]
 80075d8:	f003 0302 	and.w	r3, r3, #2
 80075dc:	2b00      	cmp	r3, #0
 80075de:	d020      	beq.n	8007622 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	f003 0304 	and.w	r3, r3, #4
 80075e8:	2b00      	cmp	r3, #0
 80075ea:	d005      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80075ec:	4b59      	ldr	r3, [pc, #356]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 80075ee:	689b      	ldr	r3, [r3, #8]
 80075f0:	4a58      	ldr	r2, [pc, #352]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 80075f2:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80075f6:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80075f8:	687b      	ldr	r3, [r7, #4]
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0308 	and.w	r3, r3, #8
 8007600:	2b00      	cmp	r3, #0
 8007602:	d005      	beq.n	8007610 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007604:	4b53      	ldr	r3, [pc, #332]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 8007606:	689b      	ldr	r3, [r3, #8]
 8007608:	4a52      	ldr	r2, [pc, #328]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 800760a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800760e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007610:	4b50      	ldr	r3, [pc, #320]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 8007612:	689b      	ldr	r3, [r3, #8]
 8007614:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007618:	687b      	ldr	r3, [r7, #4]
 800761a:	689b      	ldr	r3, [r3, #8]
 800761c:	494d      	ldr	r1, [pc, #308]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 800761e:	4313      	orrs	r3, r2
 8007620:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	681b      	ldr	r3, [r3, #0]
 8007626:	f003 0301 	and.w	r3, r3, #1
 800762a:	2b00      	cmp	r3, #0
 800762c:	d044      	beq.n	80076b8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	685b      	ldr	r3, [r3, #4]
 8007632:	2b01      	cmp	r3, #1
 8007634:	d107      	bne.n	8007646 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007636:	4b47      	ldr	r3, [pc, #284]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800763e:	2b00      	cmp	r3, #0
 8007640:	d119      	bne.n	8007676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007642:	2301      	movs	r3, #1
 8007644:	e07f      	b.n	8007746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007646:	687b      	ldr	r3, [r7, #4]
 8007648:	685b      	ldr	r3, [r3, #4]
 800764a:	2b02      	cmp	r3, #2
 800764c:	d003      	beq.n	8007656 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007652:	2b03      	cmp	r3, #3
 8007654:	d107      	bne.n	8007666 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007656:	4b3f      	ldr	r3, [pc, #252]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 8007658:	681b      	ldr	r3, [r3, #0]
 800765a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800765e:	2b00      	cmp	r3, #0
 8007660:	d109      	bne.n	8007676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007662:	2301      	movs	r3, #1
 8007664:	e06f      	b.n	8007746 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007666:	4b3b      	ldr	r3, [pc, #236]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 8007668:	681b      	ldr	r3, [r3, #0]
 800766a:	f003 0302 	and.w	r3, r3, #2
 800766e:	2b00      	cmp	r3, #0
 8007670:	d101      	bne.n	8007676 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007672:	2301      	movs	r3, #1
 8007674:	e067      	b.n	8007746 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8007676:	4b37      	ldr	r3, [pc, #220]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 8007678:	689b      	ldr	r3, [r3, #8]
 800767a:	f023 0203 	bic.w	r2, r3, #3
 800767e:	687b      	ldr	r3, [r7, #4]
 8007680:	685b      	ldr	r3, [r3, #4]
 8007682:	4934      	ldr	r1, [pc, #208]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 8007684:	4313      	orrs	r3, r2
 8007686:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8007688:	f7fe fe54 	bl	8006334 <HAL_GetTick>
 800768c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800768e:	e00a      	b.n	80076a6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8007690:	f7fe fe50 	bl	8006334 <HAL_GetTick>
 8007694:	4602      	mov	r2, r0
 8007696:	68fb      	ldr	r3, [r7, #12]
 8007698:	1ad3      	subs	r3, r2, r3
 800769a:	f241 3288 	movw	r2, #5000	; 0x1388
 800769e:	4293      	cmp	r3, r2
 80076a0:	d901      	bls.n	80076a6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80076a2:	2303      	movs	r3, #3
 80076a4:	e04f      	b.n	8007746 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80076a6:	4b2b      	ldr	r3, [pc, #172]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 80076a8:	689b      	ldr	r3, [r3, #8]
 80076aa:	f003 020c 	and.w	r2, r3, #12
 80076ae:	687b      	ldr	r3, [r7, #4]
 80076b0:	685b      	ldr	r3, [r3, #4]
 80076b2:	009b      	lsls	r3, r3, #2
 80076b4:	429a      	cmp	r2, r3
 80076b6:	d1eb      	bne.n	8007690 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80076b8:	4b25      	ldr	r3, [pc, #148]	; (8007750 <HAL_RCC_ClockConfig+0x1b8>)
 80076ba:	681b      	ldr	r3, [r3, #0]
 80076bc:	f003 0307 	and.w	r3, r3, #7
 80076c0:	683a      	ldr	r2, [r7, #0]
 80076c2:	429a      	cmp	r2, r3
 80076c4:	d20c      	bcs.n	80076e0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80076c6:	4b22      	ldr	r3, [pc, #136]	; (8007750 <HAL_RCC_ClockConfig+0x1b8>)
 80076c8:	683a      	ldr	r2, [r7, #0]
 80076ca:	b2d2      	uxtb	r2, r2
 80076cc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80076ce:	4b20      	ldr	r3, [pc, #128]	; (8007750 <HAL_RCC_ClockConfig+0x1b8>)
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	f003 0307 	and.w	r3, r3, #7
 80076d6:	683a      	ldr	r2, [r7, #0]
 80076d8:	429a      	cmp	r2, r3
 80076da:	d001      	beq.n	80076e0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80076dc:	2301      	movs	r3, #1
 80076de:	e032      	b.n	8007746 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80076e0:	687b      	ldr	r3, [r7, #4]
 80076e2:	681b      	ldr	r3, [r3, #0]
 80076e4:	f003 0304 	and.w	r3, r3, #4
 80076e8:	2b00      	cmp	r3, #0
 80076ea:	d008      	beq.n	80076fe <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80076ec:	4b19      	ldr	r3, [pc, #100]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 80076ee:	689b      	ldr	r3, [r3, #8]
 80076f0:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	68db      	ldr	r3, [r3, #12]
 80076f8:	4916      	ldr	r1, [pc, #88]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 80076fa:	4313      	orrs	r3, r2
 80076fc:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	681b      	ldr	r3, [r3, #0]
 8007702:	f003 0308 	and.w	r3, r3, #8
 8007706:	2b00      	cmp	r3, #0
 8007708:	d009      	beq.n	800771e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800770a:	4b12      	ldr	r3, [pc, #72]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 800770c:	689b      	ldr	r3, [r3, #8]
 800770e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007712:	687b      	ldr	r3, [r7, #4]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	00db      	lsls	r3, r3, #3
 8007718:	490e      	ldr	r1, [pc, #56]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 800771a:	4313      	orrs	r3, r2
 800771c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800771e:	f000 f821 	bl	8007764 <HAL_RCC_GetSysClockFreq>
 8007722:	4602      	mov	r2, r0
 8007724:	4b0b      	ldr	r3, [pc, #44]	; (8007754 <HAL_RCC_ClockConfig+0x1bc>)
 8007726:	689b      	ldr	r3, [r3, #8]
 8007728:	091b      	lsrs	r3, r3, #4
 800772a:	f003 030f 	and.w	r3, r3, #15
 800772e:	490a      	ldr	r1, [pc, #40]	; (8007758 <HAL_RCC_ClockConfig+0x1c0>)
 8007730:	5ccb      	ldrb	r3, [r1, r3]
 8007732:	fa22 f303 	lsr.w	r3, r2, r3
 8007736:	4a09      	ldr	r2, [pc, #36]	; (800775c <HAL_RCC_ClockConfig+0x1c4>)
 8007738:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800773a:	4b09      	ldr	r3, [pc, #36]	; (8007760 <HAL_RCC_ClockConfig+0x1c8>)
 800773c:	681b      	ldr	r3, [r3, #0]
 800773e:	4618      	mov	r0, r3
 8007740:	f7fe fdb4 	bl	80062ac <HAL_InitTick>

  return HAL_OK;
 8007744:	2300      	movs	r3, #0
}
 8007746:	4618      	mov	r0, r3
 8007748:	3710      	adds	r7, #16
 800774a:	46bd      	mov	sp, r7
 800774c:	bd80      	pop	{r7, pc}
 800774e:	bf00      	nop
 8007750:	40023c00 	.word	0x40023c00
 8007754:	40023800 	.word	0x40023800
 8007758:	0800e024 	.word	0x0800e024
 800775c:	20000010 	.word	0x20000010
 8007760:	20000014 	.word	0x20000014

08007764 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8007764:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8007768:	b090      	sub	sp, #64	; 0x40
 800776a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800776c:	2300      	movs	r3, #0
 800776e:	637b      	str	r3, [r7, #52]	; 0x34
 8007770:	2300      	movs	r3, #0
 8007772:	63fb      	str	r3, [r7, #60]	; 0x3c
 8007774:	2300      	movs	r3, #0
 8007776:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 8007778:	2300      	movs	r3, #0
 800777a:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800777c:	4b59      	ldr	r3, [pc, #356]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800777e:	689b      	ldr	r3, [r3, #8]
 8007780:	f003 030c 	and.w	r3, r3, #12
 8007784:	2b08      	cmp	r3, #8
 8007786:	d00d      	beq.n	80077a4 <HAL_RCC_GetSysClockFreq+0x40>
 8007788:	2b08      	cmp	r3, #8
 800778a:	f200 80a1 	bhi.w	80078d0 <HAL_RCC_GetSysClockFreq+0x16c>
 800778e:	2b00      	cmp	r3, #0
 8007790:	d002      	beq.n	8007798 <HAL_RCC_GetSysClockFreq+0x34>
 8007792:	2b04      	cmp	r3, #4
 8007794:	d003      	beq.n	800779e <HAL_RCC_GetSysClockFreq+0x3a>
 8007796:	e09b      	b.n	80078d0 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8007798:	4b53      	ldr	r3, [pc, #332]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x184>)
 800779a:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 800779c:	e09b      	b.n	80078d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800779e:	4b53      	ldr	r3, [pc, #332]	; (80078ec <HAL_RCC_GetSysClockFreq+0x188>)
 80077a0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80077a2:	e098      	b.n	80078d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80077a4:	4b4f      	ldr	r3, [pc, #316]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077a6:	685b      	ldr	r3, [r3, #4]
 80077a8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80077ac:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80077ae:	4b4d      	ldr	r3, [pc, #308]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077b0:	685b      	ldr	r3, [r3, #4]
 80077b2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80077b6:	2b00      	cmp	r3, #0
 80077b8:	d028      	beq.n	800780c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80077ba:	4b4a      	ldr	r3, [pc, #296]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80077bc:	685b      	ldr	r3, [r3, #4]
 80077be:	099b      	lsrs	r3, r3, #6
 80077c0:	2200      	movs	r2, #0
 80077c2:	623b      	str	r3, [r7, #32]
 80077c4:	627a      	str	r2, [r7, #36]	; 0x24
 80077c6:	6a3b      	ldr	r3, [r7, #32]
 80077c8:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80077cc:	2100      	movs	r1, #0
 80077ce:	4b47      	ldr	r3, [pc, #284]	; (80078ec <HAL_RCC_GetSysClockFreq+0x188>)
 80077d0:	fb03 f201 	mul.w	r2, r3, r1
 80077d4:	2300      	movs	r3, #0
 80077d6:	fb00 f303 	mul.w	r3, r0, r3
 80077da:	4413      	add	r3, r2
 80077dc:	4a43      	ldr	r2, [pc, #268]	; (80078ec <HAL_RCC_GetSysClockFreq+0x188>)
 80077de:	fba0 1202 	umull	r1, r2, r0, r2
 80077e2:	62fa      	str	r2, [r7, #44]	; 0x2c
 80077e4:	460a      	mov	r2, r1
 80077e6:	62ba      	str	r2, [r7, #40]	; 0x28
 80077e8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80077ea:	4413      	add	r3, r2
 80077ec:	62fb      	str	r3, [r7, #44]	; 0x2c
 80077ee:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077f0:	2200      	movs	r2, #0
 80077f2:	61bb      	str	r3, [r7, #24]
 80077f4:	61fa      	str	r2, [r7, #28]
 80077f6:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80077fa:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 80077fe:	f7f9 fa43 	bl	8000c88 <__aeabi_uldivmod>
 8007802:	4602      	mov	r2, r0
 8007804:	460b      	mov	r3, r1
 8007806:	4613      	mov	r3, r2
 8007808:	63fb      	str	r3, [r7, #60]	; 0x3c
 800780a:	e053      	b.n	80078b4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800780c:	4b35      	ldr	r3, [pc, #212]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x180>)
 800780e:	685b      	ldr	r3, [r3, #4]
 8007810:	099b      	lsrs	r3, r3, #6
 8007812:	2200      	movs	r2, #0
 8007814:	613b      	str	r3, [r7, #16]
 8007816:	617a      	str	r2, [r7, #20]
 8007818:	693b      	ldr	r3, [r7, #16]
 800781a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800781e:	f04f 0b00 	mov.w	fp, #0
 8007822:	4652      	mov	r2, sl
 8007824:	465b      	mov	r3, fp
 8007826:	f04f 0000 	mov.w	r0, #0
 800782a:	f04f 0100 	mov.w	r1, #0
 800782e:	0159      	lsls	r1, r3, #5
 8007830:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007834:	0150      	lsls	r0, r2, #5
 8007836:	4602      	mov	r2, r0
 8007838:	460b      	mov	r3, r1
 800783a:	ebb2 080a 	subs.w	r8, r2, sl
 800783e:	eb63 090b 	sbc.w	r9, r3, fp
 8007842:	f04f 0200 	mov.w	r2, #0
 8007846:	f04f 0300 	mov.w	r3, #0
 800784a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800784e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007852:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007856:	ebb2 0408 	subs.w	r4, r2, r8
 800785a:	eb63 0509 	sbc.w	r5, r3, r9
 800785e:	f04f 0200 	mov.w	r2, #0
 8007862:	f04f 0300 	mov.w	r3, #0
 8007866:	00eb      	lsls	r3, r5, #3
 8007868:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800786c:	00e2      	lsls	r2, r4, #3
 800786e:	4614      	mov	r4, r2
 8007870:	461d      	mov	r5, r3
 8007872:	eb14 030a 	adds.w	r3, r4, sl
 8007876:	603b      	str	r3, [r7, #0]
 8007878:	eb45 030b 	adc.w	r3, r5, fp
 800787c:	607b      	str	r3, [r7, #4]
 800787e:	f04f 0200 	mov.w	r2, #0
 8007882:	f04f 0300 	mov.w	r3, #0
 8007886:	e9d7 4500 	ldrd	r4, r5, [r7]
 800788a:	4629      	mov	r1, r5
 800788c:	028b      	lsls	r3, r1, #10
 800788e:	4621      	mov	r1, r4
 8007890:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8007894:	4621      	mov	r1, r4
 8007896:	028a      	lsls	r2, r1, #10
 8007898:	4610      	mov	r0, r2
 800789a:	4619      	mov	r1, r3
 800789c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800789e:	2200      	movs	r2, #0
 80078a0:	60bb      	str	r3, [r7, #8]
 80078a2:	60fa      	str	r2, [r7, #12]
 80078a4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80078a8:	f7f9 f9ee 	bl	8000c88 <__aeabi_uldivmod>
 80078ac:	4602      	mov	r2, r0
 80078ae:	460b      	mov	r3, r1
 80078b0:	4613      	mov	r3, r2
 80078b2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80078b4:	4b0b      	ldr	r3, [pc, #44]	; (80078e4 <HAL_RCC_GetSysClockFreq+0x180>)
 80078b6:	685b      	ldr	r3, [r3, #4]
 80078b8:	0c1b      	lsrs	r3, r3, #16
 80078ba:	f003 0303 	and.w	r3, r3, #3
 80078be:	3301      	adds	r3, #1
 80078c0:	005b      	lsls	r3, r3, #1
 80078c2:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80078c4:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80078c6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80078c8:	fbb2 f3f3 	udiv	r3, r2, r3
 80078cc:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80078ce:	e002      	b.n	80078d6 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80078d0:	4b05      	ldr	r3, [pc, #20]	; (80078e8 <HAL_RCC_GetSysClockFreq+0x184>)
 80078d2:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80078d4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80078d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80078d8:	4618      	mov	r0, r3
 80078da:	3740      	adds	r7, #64	; 0x40
 80078dc:	46bd      	mov	sp, r7
 80078de:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80078e2:	bf00      	nop
 80078e4:	40023800 	.word	0x40023800
 80078e8:	00f42400 	.word	0x00f42400
 80078ec:	00b71b00 	.word	0x00b71b00

080078f0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80078f0:	b480      	push	{r7}
 80078f2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80078f4:	4b03      	ldr	r3, [pc, #12]	; (8007904 <HAL_RCC_GetHCLKFreq+0x14>)
 80078f6:	681b      	ldr	r3, [r3, #0]
}
 80078f8:	4618      	mov	r0, r3
 80078fa:	46bd      	mov	sp, r7
 80078fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007900:	4770      	bx	lr
 8007902:	bf00      	nop
 8007904:	20000010 	.word	0x20000010

08007908 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007908:	b580      	push	{r7, lr}
 800790a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800790c:	f7ff fff0 	bl	80078f0 <HAL_RCC_GetHCLKFreq>
 8007910:	4602      	mov	r2, r0
 8007912:	4b05      	ldr	r3, [pc, #20]	; (8007928 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007914:	689b      	ldr	r3, [r3, #8]
 8007916:	0a9b      	lsrs	r3, r3, #10
 8007918:	f003 0307 	and.w	r3, r3, #7
 800791c:	4903      	ldr	r1, [pc, #12]	; (800792c <HAL_RCC_GetPCLK1Freq+0x24>)
 800791e:	5ccb      	ldrb	r3, [r1, r3]
 8007920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007924:	4618      	mov	r0, r3
 8007926:	bd80      	pop	{r7, pc}
 8007928:	40023800 	.word	0x40023800
 800792c:	0800e034 	.word	0x0800e034

08007930 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007930:	b580      	push	{r7, lr}
 8007932:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007934:	f7ff ffdc 	bl	80078f0 <HAL_RCC_GetHCLKFreq>
 8007938:	4602      	mov	r2, r0
 800793a:	4b05      	ldr	r3, [pc, #20]	; (8007950 <HAL_RCC_GetPCLK2Freq+0x20>)
 800793c:	689b      	ldr	r3, [r3, #8]
 800793e:	0b5b      	lsrs	r3, r3, #13
 8007940:	f003 0307 	and.w	r3, r3, #7
 8007944:	4903      	ldr	r1, [pc, #12]	; (8007954 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007946:	5ccb      	ldrb	r3, [r1, r3]
 8007948:	fa22 f303 	lsr.w	r3, r2, r3
}
 800794c:	4618      	mov	r0, r3
 800794e:	bd80      	pop	{r7, pc}
 8007950:	40023800 	.word	0x40023800
 8007954:	0800e034 	.word	0x0800e034

08007958 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007958:	b580      	push	{r7, lr}
 800795a:	b082      	sub	sp, #8
 800795c:	af00      	add	r7, sp, #0
 800795e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007960:	687b      	ldr	r3, [r7, #4]
 8007962:	2b00      	cmp	r3, #0
 8007964:	d101      	bne.n	800796a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007966:	2301      	movs	r3, #1
 8007968:	e041      	b.n	80079ee <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800796a:	687b      	ldr	r3, [r7, #4]
 800796c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007970:	b2db      	uxtb	r3, r3
 8007972:	2b00      	cmp	r3, #0
 8007974:	d106      	bne.n	8007984 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007976:	687b      	ldr	r3, [r7, #4]
 8007978:	2200      	movs	r2, #0
 800797a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800797e:	6878      	ldr	r0, [r7, #4]
 8007980:	f7fe f9c8 	bl	8005d14 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007984:	687b      	ldr	r3, [r7, #4]
 8007986:	2202      	movs	r2, #2
 8007988:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800798c:	687b      	ldr	r3, [r7, #4]
 800798e:	681a      	ldr	r2, [r3, #0]
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	3304      	adds	r3, #4
 8007994:	4619      	mov	r1, r3
 8007996:	4610      	mov	r0, r2
 8007998:	f000 fbba 	bl	8008110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800799c:	687b      	ldr	r3, [r7, #4]
 800799e:	2201      	movs	r2, #1
 80079a0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2201      	movs	r2, #1
 80079a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80079ac:	687b      	ldr	r3, [r7, #4]
 80079ae:	2201      	movs	r2, #1
 80079b0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80079b4:	687b      	ldr	r3, [r7, #4]
 80079b6:	2201      	movs	r2, #1
 80079b8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80079bc:	687b      	ldr	r3, [r7, #4]
 80079be:	2201      	movs	r2, #1
 80079c0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80079c4:	687b      	ldr	r3, [r7, #4]
 80079c6:	2201      	movs	r2, #1
 80079c8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80079cc:	687b      	ldr	r3, [r7, #4]
 80079ce:	2201      	movs	r2, #1
 80079d0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80079d4:	687b      	ldr	r3, [r7, #4]
 80079d6:	2201      	movs	r2, #1
 80079d8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2201      	movs	r2, #1
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3708      	adds	r7, #8
 80079f2:	46bd      	mov	sp, r7
 80079f4:	bd80      	pop	{r7, pc}
	...

080079f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80079f8:	b480      	push	{r7}
 80079fa:	b085      	sub	sp, #20
 80079fc:	af00      	add	r7, sp, #0
 80079fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007a00:	687b      	ldr	r3, [r7, #4]
 8007a02:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a06:	b2db      	uxtb	r3, r3
 8007a08:	2b01      	cmp	r3, #1
 8007a0a:	d001      	beq.n	8007a10 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007a0c:	2301      	movs	r3, #1
 8007a0e:	e04e      	b.n	8007aae <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	2202      	movs	r2, #2
 8007a14:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	68da      	ldr	r2, [r3, #12]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	681b      	ldr	r3, [r3, #0]
 8007a22:	f042 0201 	orr.w	r2, r2, #1
 8007a26:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007a28:	687b      	ldr	r3, [r7, #4]
 8007a2a:	681b      	ldr	r3, [r3, #0]
 8007a2c:	4a23      	ldr	r2, [pc, #140]	; (8007abc <HAL_TIM_Base_Start_IT+0xc4>)
 8007a2e:	4293      	cmp	r3, r2
 8007a30:	d022      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0x80>
 8007a32:	687b      	ldr	r3, [r7, #4]
 8007a34:	681b      	ldr	r3, [r3, #0]
 8007a36:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007a3a:	d01d      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0x80>
 8007a3c:	687b      	ldr	r3, [r7, #4]
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	4a1f      	ldr	r2, [pc, #124]	; (8007ac0 <HAL_TIM_Base_Start_IT+0xc8>)
 8007a42:	4293      	cmp	r3, r2
 8007a44:	d018      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0x80>
 8007a46:	687b      	ldr	r3, [r7, #4]
 8007a48:	681b      	ldr	r3, [r3, #0]
 8007a4a:	4a1e      	ldr	r2, [pc, #120]	; (8007ac4 <HAL_TIM_Base_Start_IT+0xcc>)
 8007a4c:	4293      	cmp	r3, r2
 8007a4e:	d013      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0x80>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	4a1c      	ldr	r2, [pc, #112]	; (8007ac8 <HAL_TIM_Base_Start_IT+0xd0>)
 8007a56:	4293      	cmp	r3, r2
 8007a58:	d00e      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0x80>
 8007a5a:	687b      	ldr	r3, [r7, #4]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	4a1b      	ldr	r2, [pc, #108]	; (8007acc <HAL_TIM_Base_Start_IT+0xd4>)
 8007a60:	4293      	cmp	r3, r2
 8007a62:	d009      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0x80>
 8007a64:	687b      	ldr	r3, [r7, #4]
 8007a66:	681b      	ldr	r3, [r3, #0]
 8007a68:	4a19      	ldr	r2, [pc, #100]	; (8007ad0 <HAL_TIM_Base_Start_IT+0xd8>)
 8007a6a:	4293      	cmp	r3, r2
 8007a6c:	d004      	beq.n	8007a78 <HAL_TIM_Base_Start_IT+0x80>
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	681b      	ldr	r3, [r3, #0]
 8007a72:	4a18      	ldr	r2, [pc, #96]	; (8007ad4 <HAL_TIM_Base_Start_IT+0xdc>)
 8007a74:	4293      	cmp	r3, r2
 8007a76:	d111      	bne.n	8007a9c <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007a78:	687b      	ldr	r3, [r7, #4]
 8007a7a:	681b      	ldr	r3, [r3, #0]
 8007a7c:	689b      	ldr	r3, [r3, #8]
 8007a7e:	f003 0307 	and.w	r3, r3, #7
 8007a82:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a84:	68fb      	ldr	r3, [r7, #12]
 8007a86:	2b06      	cmp	r3, #6
 8007a88:	d010      	beq.n	8007aac <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	681a      	ldr	r2, [r3, #0]
 8007a90:	687b      	ldr	r3, [r7, #4]
 8007a92:	681b      	ldr	r3, [r3, #0]
 8007a94:	f042 0201 	orr.w	r2, r2, #1
 8007a98:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007a9a:	e007      	b.n	8007aac <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007a9c:	687b      	ldr	r3, [r7, #4]
 8007a9e:	681b      	ldr	r3, [r3, #0]
 8007aa0:	681a      	ldr	r2, [r3, #0]
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	681b      	ldr	r3, [r3, #0]
 8007aa6:	f042 0201 	orr.w	r2, r2, #1
 8007aaa:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007aac:	2300      	movs	r3, #0
}
 8007aae:	4618      	mov	r0, r3
 8007ab0:	3714      	adds	r7, #20
 8007ab2:	46bd      	mov	sp, r7
 8007ab4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007ab8:	4770      	bx	lr
 8007aba:	bf00      	nop
 8007abc:	40010000 	.word	0x40010000
 8007ac0:	40000400 	.word	0x40000400
 8007ac4:	40000800 	.word	0x40000800
 8007ac8:	40000c00 	.word	0x40000c00
 8007acc:	40010400 	.word	0x40010400
 8007ad0:	40014000 	.word	0x40014000
 8007ad4:	40001800 	.word	0x40001800

08007ad8 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007ad8:	b480      	push	{r7}
 8007ada:	b083      	sub	sp, #12
 8007adc:	af00      	add	r7, sp, #0
 8007ade:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007ae0:	687b      	ldr	r3, [r7, #4]
 8007ae2:	681b      	ldr	r3, [r3, #0]
 8007ae4:	68da      	ldr	r2, [r3, #12]
 8007ae6:	687b      	ldr	r3, [r7, #4]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	f022 0201 	bic.w	r2, r2, #1
 8007aee:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007af0:	687b      	ldr	r3, [r7, #4]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	6a1a      	ldr	r2, [r3, #32]
 8007af6:	f241 1311 	movw	r3, #4369	; 0x1111
 8007afa:	4013      	ands	r3, r2
 8007afc:	2b00      	cmp	r3, #0
 8007afe:	d10f      	bne.n	8007b20 <HAL_TIM_Base_Stop_IT+0x48>
 8007b00:	687b      	ldr	r3, [r7, #4]
 8007b02:	681b      	ldr	r3, [r3, #0]
 8007b04:	6a1a      	ldr	r2, [r3, #32]
 8007b06:	f240 4344 	movw	r3, #1092	; 0x444
 8007b0a:	4013      	ands	r3, r2
 8007b0c:	2b00      	cmp	r3, #0
 8007b0e:	d107      	bne.n	8007b20 <HAL_TIM_Base_Stop_IT+0x48>
 8007b10:	687b      	ldr	r3, [r7, #4]
 8007b12:	681b      	ldr	r3, [r3, #0]
 8007b14:	681a      	ldr	r2, [r3, #0]
 8007b16:	687b      	ldr	r3, [r7, #4]
 8007b18:	681b      	ldr	r3, [r3, #0]
 8007b1a:	f022 0201 	bic.w	r2, r2, #1
 8007b1e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007b20:	687b      	ldr	r3, [r7, #4]
 8007b22:	2201      	movs	r2, #1
 8007b24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007b28:	2300      	movs	r3, #0
}
 8007b2a:	4618      	mov	r0, r3
 8007b2c:	370c      	adds	r7, #12
 8007b2e:	46bd      	mov	sp, r7
 8007b30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b34:	4770      	bx	lr

08007b36 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007b36:	b580      	push	{r7, lr}
 8007b38:	b082      	sub	sp, #8
 8007b3a:	af00      	add	r7, sp, #0
 8007b3c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	2b00      	cmp	r3, #0
 8007b42:	d101      	bne.n	8007b48 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007b44:	2301      	movs	r3, #1
 8007b46:	e041      	b.n	8007bcc <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007b48:	687b      	ldr	r3, [r7, #4]
 8007b4a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007b4e:	b2db      	uxtb	r3, r3
 8007b50:	2b00      	cmp	r3, #0
 8007b52:	d106      	bne.n	8007b62 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007b54:	687b      	ldr	r3, [r7, #4]
 8007b56:	2200      	movs	r2, #0
 8007b58:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007b5c:	6878      	ldr	r0, [r7, #4]
 8007b5e:	f000 f839 	bl	8007bd4 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007b62:	687b      	ldr	r3, [r7, #4]
 8007b64:	2202      	movs	r2, #2
 8007b66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	681a      	ldr	r2, [r3, #0]
 8007b6e:	687b      	ldr	r3, [r7, #4]
 8007b70:	3304      	adds	r3, #4
 8007b72:	4619      	mov	r1, r3
 8007b74:	4610      	mov	r0, r2
 8007b76:	f000 facb 	bl	8008110 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	2201      	movs	r2, #1
 8007b7e:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007b82:	687b      	ldr	r3, [r7, #4]
 8007b84:	2201      	movs	r2, #1
 8007b86:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	2201      	movs	r2, #1
 8007b8e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	2201      	movs	r2, #1
 8007b96:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007b9a:	687b      	ldr	r3, [r7, #4]
 8007b9c:	2201      	movs	r2, #1
 8007b9e:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ba2:	687b      	ldr	r3, [r7, #4]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2201      	movs	r2, #1
 8007bae:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007bb2:	687b      	ldr	r3, [r7, #4]
 8007bb4:	2201      	movs	r2, #1
 8007bb6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007bba:	687b      	ldr	r3, [r7, #4]
 8007bbc:	2201      	movs	r2, #1
 8007bbe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007bc2:	687b      	ldr	r3, [r7, #4]
 8007bc4:	2201      	movs	r2, #1
 8007bc6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007bca:	2300      	movs	r3, #0
}
 8007bcc:	4618      	mov	r0, r3
 8007bce:	3708      	adds	r7, #8
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bd80      	pop	{r7, pc}

08007bd4 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007bd4:	b480      	push	{r7}
 8007bd6:	b083      	sub	sp, #12
 8007bd8:	af00      	add	r7, sp, #0
 8007bda:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007bdc:	bf00      	nop
 8007bde:	370c      	adds	r7, #12
 8007be0:	46bd      	mov	sp, r7
 8007be2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007be6:	4770      	bx	lr

08007be8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007be8:	b580      	push	{r7, lr}
 8007bea:	b082      	sub	sp, #8
 8007bec:	af00      	add	r7, sp, #0
 8007bee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	691b      	ldr	r3, [r3, #16]
 8007bf6:	f003 0302 	and.w	r3, r3, #2
 8007bfa:	2b02      	cmp	r3, #2
 8007bfc:	d122      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	681b      	ldr	r3, [r3, #0]
 8007c02:	68db      	ldr	r3, [r3, #12]
 8007c04:	f003 0302 	and.w	r3, r3, #2
 8007c08:	2b02      	cmp	r3, #2
 8007c0a:	d11b      	bne.n	8007c44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007c0c:	687b      	ldr	r3, [r7, #4]
 8007c0e:	681b      	ldr	r3, [r3, #0]
 8007c10:	f06f 0202 	mvn.w	r2, #2
 8007c14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	2201      	movs	r2, #1
 8007c1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007c1c:	687b      	ldr	r3, [r7, #4]
 8007c1e:	681b      	ldr	r3, [r3, #0]
 8007c20:	699b      	ldr	r3, [r3, #24]
 8007c22:	f003 0303 	and.w	r3, r3, #3
 8007c26:	2b00      	cmp	r3, #0
 8007c28:	d003      	beq.n	8007c32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007c2a:	6878      	ldr	r0, [r7, #4]
 8007c2c:	f000 fa51 	bl	80080d2 <HAL_TIM_IC_CaptureCallback>
 8007c30:	e005      	b.n	8007c3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c32:	6878      	ldr	r0, [r7, #4]
 8007c34:	f000 fa43 	bl	80080be <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c38:	6878      	ldr	r0, [r7, #4]
 8007c3a:	f000 fa54 	bl	80080e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c3e:	687b      	ldr	r3, [r7, #4]
 8007c40:	2200      	movs	r2, #0
 8007c42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007c44:	687b      	ldr	r3, [r7, #4]
 8007c46:	681b      	ldr	r3, [r3, #0]
 8007c48:	691b      	ldr	r3, [r3, #16]
 8007c4a:	f003 0304 	and.w	r3, r3, #4
 8007c4e:	2b04      	cmp	r3, #4
 8007c50:	d122      	bne.n	8007c98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	68db      	ldr	r3, [r3, #12]
 8007c58:	f003 0304 	and.w	r3, r3, #4
 8007c5c:	2b04      	cmp	r3, #4
 8007c5e:	d11b      	bne.n	8007c98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007c60:	687b      	ldr	r3, [r7, #4]
 8007c62:	681b      	ldr	r3, [r3, #0]
 8007c64:	f06f 0204 	mvn.w	r2, #4
 8007c68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2202      	movs	r2, #2
 8007c6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	699b      	ldr	r3, [r3, #24]
 8007c76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c7a:	2b00      	cmp	r3, #0
 8007c7c:	d003      	beq.n	8007c86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c7e:	6878      	ldr	r0, [r7, #4]
 8007c80:	f000 fa27 	bl	80080d2 <HAL_TIM_IC_CaptureCallback>
 8007c84:	e005      	b.n	8007c92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c86:	6878      	ldr	r0, [r7, #4]
 8007c88:	f000 fa19 	bl	80080be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c8c:	6878      	ldr	r0, [r7, #4]
 8007c8e:	f000 fa2a 	bl	80080e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c92:	687b      	ldr	r3, [r7, #4]
 8007c94:	2200      	movs	r2, #0
 8007c96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	681b      	ldr	r3, [r3, #0]
 8007c9c:	691b      	ldr	r3, [r3, #16]
 8007c9e:	f003 0308 	and.w	r3, r3, #8
 8007ca2:	2b08      	cmp	r3, #8
 8007ca4:	d122      	bne.n	8007cec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	68db      	ldr	r3, [r3, #12]
 8007cac:	f003 0308 	and.w	r3, r3, #8
 8007cb0:	2b08      	cmp	r3, #8
 8007cb2:	d11b      	bne.n	8007cec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007cb4:	687b      	ldr	r3, [r7, #4]
 8007cb6:	681b      	ldr	r3, [r3, #0]
 8007cb8:	f06f 0208 	mvn.w	r2, #8
 8007cbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	2204      	movs	r2, #4
 8007cc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007cc4:	687b      	ldr	r3, [r7, #4]
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	69db      	ldr	r3, [r3, #28]
 8007cca:	f003 0303 	and.w	r3, r3, #3
 8007cce:	2b00      	cmp	r3, #0
 8007cd0:	d003      	beq.n	8007cda <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 f9fd 	bl	80080d2 <HAL_TIM_IC_CaptureCallback>
 8007cd8:	e005      	b.n	8007ce6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007cda:	6878      	ldr	r0, [r7, #4]
 8007cdc:	f000 f9ef 	bl	80080be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007ce0:	6878      	ldr	r0, [r7, #4]
 8007ce2:	f000 fa00 	bl	80080e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	2200      	movs	r2, #0
 8007cea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007cec:	687b      	ldr	r3, [r7, #4]
 8007cee:	681b      	ldr	r3, [r3, #0]
 8007cf0:	691b      	ldr	r3, [r3, #16]
 8007cf2:	f003 0310 	and.w	r3, r3, #16
 8007cf6:	2b10      	cmp	r3, #16
 8007cf8:	d122      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007cfa:	687b      	ldr	r3, [r7, #4]
 8007cfc:	681b      	ldr	r3, [r3, #0]
 8007cfe:	68db      	ldr	r3, [r3, #12]
 8007d00:	f003 0310 	and.w	r3, r3, #16
 8007d04:	2b10      	cmp	r3, #16
 8007d06:	d11b      	bne.n	8007d40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007d08:	687b      	ldr	r3, [r7, #4]
 8007d0a:	681b      	ldr	r3, [r3, #0]
 8007d0c:	f06f 0210 	mvn.w	r2, #16
 8007d10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	2208      	movs	r2, #8
 8007d16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007d18:	687b      	ldr	r3, [r7, #4]
 8007d1a:	681b      	ldr	r3, [r3, #0]
 8007d1c:	69db      	ldr	r3, [r3, #28]
 8007d1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d003      	beq.n	8007d2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007d26:	6878      	ldr	r0, [r7, #4]
 8007d28:	f000 f9d3 	bl	80080d2 <HAL_TIM_IC_CaptureCallback>
 8007d2c:	e005      	b.n	8007d3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007d2e:	6878      	ldr	r0, [r7, #4]
 8007d30:	f000 f9c5 	bl	80080be <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007d34:	6878      	ldr	r0, [r7, #4]
 8007d36:	f000 f9d6 	bl	80080e6 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007d3a:	687b      	ldr	r3, [r7, #4]
 8007d3c:	2200      	movs	r2, #0
 8007d3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007d40:	687b      	ldr	r3, [r7, #4]
 8007d42:	681b      	ldr	r3, [r3, #0]
 8007d44:	691b      	ldr	r3, [r3, #16]
 8007d46:	f003 0301 	and.w	r3, r3, #1
 8007d4a:	2b01      	cmp	r3, #1
 8007d4c:	d10e      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	681b      	ldr	r3, [r3, #0]
 8007d52:	68db      	ldr	r3, [r3, #12]
 8007d54:	f003 0301 	and.w	r3, r3, #1
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d107      	bne.n	8007d6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007d5c:	687b      	ldr	r3, [r7, #4]
 8007d5e:	681b      	ldr	r3, [r3, #0]
 8007d60:	f06f 0201 	mvn.w	r2, #1
 8007d64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007d66:	6878      	ldr	r0, [r7, #4]
 8007d68:	f7fc ff70 	bl	8004c4c <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007d6c:	687b      	ldr	r3, [r7, #4]
 8007d6e:	681b      	ldr	r3, [r3, #0]
 8007d70:	691b      	ldr	r3, [r3, #16]
 8007d72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d76:	2b80      	cmp	r3, #128	; 0x80
 8007d78:	d10e      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	681b      	ldr	r3, [r3, #0]
 8007d7e:	68db      	ldr	r3, [r3, #12]
 8007d80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d84:	2b80      	cmp	r3, #128	; 0x80
 8007d86:	d107      	bne.n	8007d98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007d90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007d92:	6878      	ldr	r0, [r7, #4]
 8007d94:	f000 fca6 	bl	80086e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007d98:	687b      	ldr	r3, [r7, #4]
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	691b      	ldr	r3, [r3, #16]
 8007d9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007da2:	2b40      	cmp	r3, #64	; 0x40
 8007da4:	d10e      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007da6:	687b      	ldr	r3, [r7, #4]
 8007da8:	681b      	ldr	r3, [r3, #0]
 8007daa:	68db      	ldr	r3, [r3, #12]
 8007dac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007db0:	2b40      	cmp	r3, #64	; 0x40
 8007db2:	d107      	bne.n	8007dc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007db4:	687b      	ldr	r3, [r7, #4]
 8007db6:	681b      	ldr	r3, [r3, #0]
 8007db8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007dbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007dbe:	6878      	ldr	r0, [r7, #4]
 8007dc0:	f000 f99b 	bl	80080fa <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007dc4:	687b      	ldr	r3, [r7, #4]
 8007dc6:	681b      	ldr	r3, [r3, #0]
 8007dc8:	691b      	ldr	r3, [r3, #16]
 8007dca:	f003 0320 	and.w	r3, r3, #32
 8007dce:	2b20      	cmp	r3, #32
 8007dd0:	d10e      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007dd2:	687b      	ldr	r3, [r7, #4]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	68db      	ldr	r3, [r3, #12]
 8007dd8:	f003 0320 	and.w	r3, r3, #32
 8007ddc:	2b20      	cmp	r3, #32
 8007dde:	d107      	bne.n	8007df0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007de0:	687b      	ldr	r3, [r7, #4]
 8007de2:	681b      	ldr	r3, [r3, #0]
 8007de4:	f06f 0220 	mvn.w	r2, #32
 8007de8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007dea:	6878      	ldr	r0, [r7, #4]
 8007dec:	f000 fc70 	bl	80086d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007df0:	bf00      	nop
 8007df2:	3708      	adds	r7, #8
 8007df4:	46bd      	mov	sp, r7
 8007df6:	bd80      	pop	{r7, pc}

08007df8 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007df8:	b580      	push	{r7, lr}
 8007dfa:	b086      	sub	sp, #24
 8007dfc:	af00      	add	r7, sp, #0
 8007dfe:	60f8      	str	r0, [r7, #12]
 8007e00:	60b9      	str	r1, [r7, #8]
 8007e02:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007e04:	2300      	movs	r3, #0
 8007e06:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e08:	68fb      	ldr	r3, [r7, #12]
 8007e0a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e0e:	2b01      	cmp	r3, #1
 8007e10:	d101      	bne.n	8007e16 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007e12:	2302      	movs	r3, #2
 8007e14:	e088      	b.n	8007f28 <HAL_TIM_IC_ConfigChannel+0x130>
 8007e16:	68fb      	ldr	r3, [r7, #12]
 8007e18:	2201      	movs	r2, #1
 8007e1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	2b00      	cmp	r3, #0
 8007e22:	d11b      	bne.n	8007e5c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007e24:	68fb      	ldr	r3, [r7, #12]
 8007e26:	6818      	ldr	r0, [r3, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	6819      	ldr	r1, [r3, #0]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	685a      	ldr	r2, [r3, #4]
 8007e30:	68bb      	ldr	r3, [r7, #8]
 8007e32:	68db      	ldr	r3, [r3, #12]
 8007e34:	f000 fa0c 	bl	8008250 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007e38:	68fb      	ldr	r3, [r7, #12]
 8007e3a:	681b      	ldr	r3, [r3, #0]
 8007e3c:	699a      	ldr	r2, [r3, #24]
 8007e3e:	68fb      	ldr	r3, [r7, #12]
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	f022 020c 	bic.w	r2, r2, #12
 8007e46:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007e48:	68fb      	ldr	r3, [r7, #12]
 8007e4a:	681b      	ldr	r3, [r3, #0]
 8007e4c:	6999      	ldr	r1, [r3, #24]
 8007e4e:	68bb      	ldr	r3, [r7, #8]
 8007e50:	689a      	ldr	r2, [r3, #8]
 8007e52:	68fb      	ldr	r3, [r7, #12]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	430a      	orrs	r2, r1
 8007e58:	619a      	str	r2, [r3, #24]
 8007e5a:	e060      	b.n	8007f1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	2b04      	cmp	r3, #4
 8007e60:	d11c      	bne.n	8007e9c <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007e62:	68fb      	ldr	r3, [r7, #12]
 8007e64:	6818      	ldr	r0, [r3, #0]
 8007e66:	68bb      	ldr	r3, [r7, #8]
 8007e68:	6819      	ldr	r1, [r3, #0]
 8007e6a:	68bb      	ldr	r3, [r7, #8]
 8007e6c:	685a      	ldr	r2, [r3, #4]
 8007e6e:	68bb      	ldr	r3, [r7, #8]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f000 fa90 	bl	8008396 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007e76:	68fb      	ldr	r3, [r7, #12]
 8007e78:	681b      	ldr	r3, [r3, #0]
 8007e7a:	699a      	ldr	r2, [r3, #24]
 8007e7c:	68fb      	ldr	r3, [r7, #12]
 8007e7e:	681b      	ldr	r3, [r3, #0]
 8007e80:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e84:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007e86:	68fb      	ldr	r3, [r7, #12]
 8007e88:	681b      	ldr	r3, [r3, #0]
 8007e8a:	6999      	ldr	r1, [r3, #24]
 8007e8c:	68bb      	ldr	r3, [r7, #8]
 8007e8e:	689b      	ldr	r3, [r3, #8]
 8007e90:	021a      	lsls	r2, r3, #8
 8007e92:	68fb      	ldr	r3, [r7, #12]
 8007e94:	681b      	ldr	r3, [r3, #0]
 8007e96:	430a      	orrs	r2, r1
 8007e98:	619a      	str	r2, [r3, #24]
 8007e9a:	e040      	b.n	8007f1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	2b08      	cmp	r3, #8
 8007ea0:	d11b      	bne.n	8007eda <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007ea2:	68fb      	ldr	r3, [r7, #12]
 8007ea4:	6818      	ldr	r0, [r3, #0]
 8007ea6:	68bb      	ldr	r3, [r7, #8]
 8007ea8:	6819      	ldr	r1, [r3, #0]
 8007eaa:	68bb      	ldr	r3, [r7, #8]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	68db      	ldr	r3, [r3, #12]
 8007eb2:	f000 fadd 	bl	8008470 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007eb6:	68fb      	ldr	r3, [r7, #12]
 8007eb8:	681b      	ldr	r3, [r3, #0]
 8007eba:	69da      	ldr	r2, [r3, #28]
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f022 020c 	bic.w	r2, r2, #12
 8007ec4:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007ec6:	68fb      	ldr	r3, [r7, #12]
 8007ec8:	681b      	ldr	r3, [r3, #0]
 8007eca:	69d9      	ldr	r1, [r3, #28]
 8007ecc:	68bb      	ldr	r3, [r7, #8]
 8007ece:	689a      	ldr	r2, [r3, #8]
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	681b      	ldr	r3, [r3, #0]
 8007ed4:	430a      	orrs	r2, r1
 8007ed6:	61da      	str	r2, [r3, #28]
 8007ed8:	e021      	b.n	8007f1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007eda:	687b      	ldr	r3, [r7, #4]
 8007edc:	2b0c      	cmp	r3, #12
 8007ede:	d11c      	bne.n	8007f1a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007ee0:	68fb      	ldr	r3, [r7, #12]
 8007ee2:	6818      	ldr	r0, [r3, #0]
 8007ee4:	68bb      	ldr	r3, [r7, #8]
 8007ee6:	6819      	ldr	r1, [r3, #0]
 8007ee8:	68bb      	ldr	r3, [r7, #8]
 8007eea:	685a      	ldr	r2, [r3, #4]
 8007eec:	68bb      	ldr	r3, [r7, #8]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f000 fafa 	bl	80084e8 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007ef4:	68fb      	ldr	r3, [r7, #12]
 8007ef6:	681b      	ldr	r3, [r3, #0]
 8007ef8:	69da      	ldr	r2, [r3, #28]
 8007efa:	68fb      	ldr	r3, [r7, #12]
 8007efc:	681b      	ldr	r3, [r3, #0]
 8007efe:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007f02:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007f04:	68fb      	ldr	r3, [r7, #12]
 8007f06:	681b      	ldr	r3, [r3, #0]
 8007f08:	69d9      	ldr	r1, [r3, #28]
 8007f0a:	68bb      	ldr	r3, [r7, #8]
 8007f0c:	689b      	ldr	r3, [r3, #8]
 8007f0e:	021a      	lsls	r2, r3, #8
 8007f10:	68fb      	ldr	r3, [r7, #12]
 8007f12:	681b      	ldr	r3, [r3, #0]
 8007f14:	430a      	orrs	r2, r1
 8007f16:	61da      	str	r2, [r3, #28]
 8007f18:	e001      	b.n	8007f1e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007f1a:	2301      	movs	r3, #1
 8007f1c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007f1e:	68fb      	ldr	r3, [r7, #12]
 8007f20:	2200      	movs	r2, #0
 8007f22:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007f26:	7dfb      	ldrb	r3, [r7, #23]
}
 8007f28:	4618      	mov	r0, r3
 8007f2a:	3718      	adds	r7, #24
 8007f2c:	46bd      	mov	sp, r7
 8007f2e:	bd80      	pop	{r7, pc}

08007f30 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007f30:	b580      	push	{r7, lr}
 8007f32:	b084      	sub	sp, #16
 8007f34:	af00      	add	r7, sp, #0
 8007f36:	6078      	str	r0, [r7, #4]
 8007f38:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007f3a:	2300      	movs	r3, #0
 8007f3c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007f3e:	687b      	ldr	r3, [r7, #4]
 8007f40:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007f44:	2b01      	cmp	r3, #1
 8007f46:	d101      	bne.n	8007f4c <HAL_TIM_ConfigClockSource+0x1c>
 8007f48:	2302      	movs	r3, #2
 8007f4a:	e0b4      	b.n	80080b6 <HAL_TIM_ConfigClockSource+0x186>
 8007f4c:	687b      	ldr	r3, [r7, #4]
 8007f4e:	2201      	movs	r2, #1
 8007f50:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007f54:	687b      	ldr	r3, [r7, #4]
 8007f56:	2202      	movs	r2, #2
 8007f58:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007f5c:	687b      	ldr	r3, [r7, #4]
 8007f5e:	681b      	ldr	r3, [r3, #0]
 8007f60:	689b      	ldr	r3, [r3, #8]
 8007f62:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007f64:	68bb      	ldr	r3, [r7, #8]
 8007f66:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007f6a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007f6c:	68bb      	ldr	r3, [r7, #8]
 8007f6e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007f72:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007f74:	687b      	ldr	r3, [r7, #4]
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	68ba      	ldr	r2, [r7, #8]
 8007f7a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f84:	d03e      	beq.n	8008004 <HAL_TIM_ConfigClockSource+0xd4>
 8007f86:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007f8a:	f200 8087 	bhi.w	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007f8e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f92:	f000 8086 	beq.w	80080a2 <HAL_TIM_ConfigClockSource+0x172>
 8007f96:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007f9a:	d87f      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007f9c:	2b70      	cmp	r3, #112	; 0x70
 8007f9e:	d01a      	beq.n	8007fd6 <HAL_TIM_ConfigClockSource+0xa6>
 8007fa0:	2b70      	cmp	r3, #112	; 0x70
 8007fa2:	d87b      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fa4:	2b60      	cmp	r3, #96	; 0x60
 8007fa6:	d050      	beq.n	800804a <HAL_TIM_ConfigClockSource+0x11a>
 8007fa8:	2b60      	cmp	r3, #96	; 0x60
 8007faa:	d877      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fac:	2b50      	cmp	r3, #80	; 0x50
 8007fae:	d03c      	beq.n	800802a <HAL_TIM_ConfigClockSource+0xfa>
 8007fb0:	2b50      	cmp	r3, #80	; 0x50
 8007fb2:	d873      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fb4:	2b40      	cmp	r3, #64	; 0x40
 8007fb6:	d058      	beq.n	800806a <HAL_TIM_ConfigClockSource+0x13a>
 8007fb8:	2b40      	cmp	r3, #64	; 0x40
 8007fba:	d86f      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fbc:	2b30      	cmp	r3, #48	; 0x30
 8007fbe:	d064      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15a>
 8007fc0:	2b30      	cmp	r3, #48	; 0x30
 8007fc2:	d86b      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fc4:	2b20      	cmp	r3, #32
 8007fc6:	d060      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15a>
 8007fc8:	2b20      	cmp	r3, #32
 8007fca:	d867      	bhi.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
 8007fcc:	2b00      	cmp	r3, #0
 8007fce:	d05c      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15a>
 8007fd0:	2b10      	cmp	r3, #16
 8007fd2:	d05a      	beq.n	800808a <HAL_TIM_ConfigClockSource+0x15a>
 8007fd4:	e062      	b.n	800809c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007fd6:	687b      	ldr	r3, [r7, #4]
 8007fd8:	6818      	ldr	r0, [r3, #0]
 8007fda:	683b      	ldr	r3, [r7, #0]
 8007fdc:	6899      	ldr	r1, [r3, #8]
 8007fde:	683b      	ldr	r3, [r7, #0]
 8007fe0:	685a      	ldr	r2, [r3, #4]
 8007fe2:	683b      	ldr	r3, [r7, #0]
 8007fe4:	68db      	ldr	r3, [r3, #12]
 8007fe6:	f000 fad7 	bl	8008598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007fea:	687b      	ldr	r3, [r7, #4]
 8007fec:	681b      	ldr	r3, [r3, #0]
 8007fee:	689b      	ldr	r3, [r3, #8]
 8007ff0:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007ff2:	68bb      	ldr	r3, [r7, #8]
 8007ff4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007ff8:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	681b      	ldr	r3, [r3, #0]
 8007ffe:	68ba      	ldr	r2, [r7, #8]
 8008000:	609a      	str	r2, [r3, #8]
      break;
 8008002:	e04f      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8008004:	687b      	ldr	r3, [r7, #4]
 8008006:	6818      	ldr	r0, [r3, #0]
 8008008:	683b      	ldr	r3, [r7, #0]
 800800a:	6899      	ldr	r1, [r3, #8]
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	685a      	ldr	r2, [r3, #4]
 8008010:	683b      	ldr	r3, [r7, #0]
 8008012:	68db      	ldr	r3, [r3, #12]
 8008014:	f000 fac0 	bl	8008598 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	681b      	ldr	r3, [r3, #0]
 800801c:	689a      	ldr	r2, [r3, #8]
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	681b      	ldr	r3, [r3, #0]
 8008022:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8008026:	609a      	str	r2, [r3, #8]
      break;
 8008028:	e03c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800802a:	687b      	ldr	r3, [r7, #4]
 800802c:	6818      	ldr	r0, [r3, #0]
 800802e:	683b      	ldr	r3, [r7, #0]
 8008030:	6859      	ldr	r1, [r3, #4]
 8008032:	683b      	ldr	r3, [r7, #0]
 8008034:	68db      	ldr	r3, [r3, #12]
 8008036:	461a      	mov	r2, r3
 8008038:	f000 f97e 	bl	8008338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	2150      	movs	r1, #80	; 0x50
 8008042:	4618      	mov	r0, r3
 8008044:	f000 fa8d 	bl	8008562 <TIM_ITRx_SetConfig>
      break;
 8008048:	e02c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 800804a:	687b      	ldr	r3, [r7, #4]
 800804c:	6818      	ldr	r0, [r3, #0]
 800804e:	683b      	ldr	r3, [r7, #0]
 8008050:	6859      	ldr	r1, [r3, #4]
 8008052:	683b      	ldr	r3, [r7, #0]
 8008054:	68db      	ldr	r3, [r3, #12]
 8008056:	461a      	mov	r2, r3
 8008058:	f000 f9da 	bl	8008410 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800805c:	687b      	ldr	r3, [r7, #4]
 800805e:	681b      	ldr	r3, [r3, #0]
 8008060:	2160      	movs	r1, #96	; 0x60
 8008062:	4618      	mov	r0, r3
 8008064:	f000 fa7d 	bl	8008562 <TIM_ITRx_SetConfig>
      break;
 8008068:	e01c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800806a:	687b      	ldr	r3, [r7, #4]
 800806c:	6818      	ldr	r0, [r3, #0]
 800806e:	683b      	ldr	r3, [r7, #0]
 8008070:	6859      	ldr	r1, [r3, #4]
 8008072:	683b      	ldr	r3, [r7, #0]
 8008074:	68db      	ldr	r3, [r3, #12]
 8008076:	461a      	mov	r2, r3
 8008078:	f000 f95e 	bl	8008338 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	2140      	movs	r1, #64	; 0x40
 8008082:	4618      	mov	r0, r3
 8008084:	f000 fa6d 	bl	8008562 <TIM_ITRx_SetConfig>
      break;
 8008088:	e00c      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800808a:	687b      	ldr	r3, [r7, #4]
 800808c:	681a      	ldr	r2, [r3, #0]
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	681b      	ldr	r3, [r3, #0]
 8008092:	4619      	mov	r1, r3
 8008094:	4610      	mov	r0, r2
 8008096:	f000 fa64 	bl	8008562 <TIM_ITRx_SetConfig>
      break;
 800809a:	e003      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800809c:	2301      	movs	r3, #1
 800809e:	73fb      	strb	r3, [r7, #15]
      break;
 80080a0:	e000      	b.n	80080a4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 80080a2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80080a4:	687b      	ldr	r3, [r7, #4]
 80080a6:	2201      	movs	r2, #1
 80080a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80080ac:	687b      	ldr	r3, [r7, #4]
 80080ae:	2200      	movs	r2, #0
 80080b0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80080b4:	7bfb      	ldrb	r3, [r7, #15]
}
 80080b6:	4618      	mov	r0, r3
 80080b8:	3710      	adds	r7, #16
 80080ba:	46bd      	mov	sp, r7
 80080bc:	bd80      	pop	{r7, pc}

080080be <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80080be:	b480      	push	{r7}
 80080c0:	b083      	sub	sp, #12
 80080c2:	af00      	add	r7, sp, #0
 80080c4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80080c6:	bf00      	nop
 80080c8:	370c      	adds	r7, #12
 80080ca:	46bd      	mov	sp, r7
 80080cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080d0:	4770      	bx	lr

080080d2 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80080d2:	b480      	push	{r7}
 80080d4:	b083      	sub	sp, #12
 80080d6:	af00      	add	r7, sp, #0
 80080d8:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80080da:	bf00      	nop
 80080dc:	370c      	adds	r7, #12
 80080de:	46bd      	mov	sp, r7
 80080e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e4:	4770      	bx	lr

080080e6 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80080e6:	b480      	push	{r7}
 80080e8:	b083      	sub	sp, #12
 80080ea:	af00      	add	r7, sp, #0
 80080ec:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80080ee:	bf00      	nop
 80080f0:	370c      	adds	r7, #12
 80080f2:	46bd      	mov	sp, r7
 80080f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f8:	4770      	bx	lr

080080fa <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80080fa:	b480      	push	{r7}
 80080fc:	b083      	sub	sp, #12
 80080fe:	af00      	add	r7, sp, #0
 8008100:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008102:	bf00      	nop
 8008104:	370c      	adds	r7, #12
 8008106:	46bd      	mov	sp, r7
 8008108:	f85d 7b04 	ldr.w	r7, [sp], #4
 800810c:	4770      	bx	lr
	...

08008110 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008110:	b480      	push	{r7}
 8008112:	b085      	sub	sp, #20
 8008114:	af00      	add	r7, sp, #0
 8008116:	6078      	str	r0, [r7, #4]
 8008118:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800811a:	687b      	ldr	r3, [r7, #4]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008120:	687b      	ldr	r3, [r7, #4]
 8008122:	4a40      	ldr	r2, [pc, #256]	; (8008224 <TIM_Base_SetConfig+0x114>)
 8008124:	4293      	cmp	r3, r2
 8008126:	d013      	beq.n	8008150 <TIM_Base_SetConfig+0x40>
 8008128:	687b      	ldr	r3, [r7, #4]
 800812a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800812e:	d00f      	beq.n	8008150 <TIM_Base_SetConfig+0x40>
 8008130:	687b      	ldr	r3, [r7, #4]
 8008132:	4a3d      	ldr	r2, [pc, #244]	; (8008228 <TIM_Base_SetConfig+0x118>)
 8008134:	4293      	cmp	r3, r2
 8008136:	d00b      	beq.n	8008150 <TIM_Base_SetConfig+0x40>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a3c      	ldr	r2, [pc, #240]	; (800822c <TIM_Base_SetConfig+0x11c>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d007      	beq.n	8008150 <TIM_Base_SetConfig+0x40>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a3b      	ldr	r2, [pc, #236]	; (8008230 <TIM_Base_SetConfig+0x120>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d003      	beq.n	8008150 <TIM_Base_SetConfig+0x40>
 8008148:	687b      	ldr	r3, [r7, #4]
 800814a:	4a3a      	ldr	r2, [pc, #232]	; (8008234 <TIM_Base_SetConfig+0x124>)
 800814c:	4293      	cmp	r3, r2
 800814e:	d108      	bne.n	8008162 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008150:	68fb      	ldr	r3, [r7, #12]
 8008152:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008156:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008158:	683b      	ldr	r3, [r7, #0]
 800815a:	685b      	ldr	r3, [r3, #4]
 800815c:	68fa      	ldr	r2, [r7, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	4a2f      	ldr	r2, [pc, #188]	; (8008224 <TIM_Base_SetConfig+0x114>)
 8008166:	4293      	cmp	r3, r2
 8008168:	d02b      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 800816a:	687b      	ldr	r3, [r7, #4]
 800816c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008170:	d027      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 8008172:	687b      	ldr	r3, [r7, #4]
 8008174:	4a2c      	ldr	r2, [pc, #176]	; (8008228 <TIM_Base_SetConfig+0x118>)
 8008176:	4293      	cmp	r3, r2
 8008178:	d023      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 800817a:	687b      	ldr	r3, [r7, #4]
 800817c:	4a2b      	ldr	r2, [pc, #172]	; (800822c <TIM_Base_SetConfig+0x11c>)
 800817e:	4293      	cmp	r3, r2
 8008180:	d01f      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 8008182:	687b      	ldr	r3, [r7, #4]
 8008184:	4a2a      	ldr	r2, [pc, #168]	; (8008230 <TIM_Base_SetConfig+0x120>)
 8008186:	4293      	cmp	r3, r2
 8008188:	d01b      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 800818a:	687b      	ldr	r3, [r7, #4]
 800818c:	4a29      	ldr	r2, [pc, #164]	; (8008234 <TIM_Base_SetConfig+0x124>)
 800818e:	4293      	cmp	r3, r2
 8008190:	d017      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	4a28      	ldr	r2, [pc, #160]	; (8008238 <TIM_Base_SetConfig+0x128>)
 8008196:	4293      	cmp	r3, r2
 8008198:	d013      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	4a27      	ldr	r2, [pc, #156]	; (800823c <TIM_Base_SetConfig+0x12c>)
 800819e:	4293      	cmp	r3, r2
 80081a0:	d00f      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 80081a2:	687b      	ldr	r3, [r7, #4]
 80081a4:	4a26      	ldr	r2, [pc, #152]	; (8008240 <TIM_Base_SetConfig+0x130>)
 80081a6:	4293      	cmp	r3, r2
 80081a8:	d00b      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 80081aa:	687b      	ldr	r3, [r7, #4]
 80081ac:	4a25      	ldr	r2, [pc, #148]	; (8008244 <TIM_Base_SetConfig+0x134>)
 80081ae:	4293      	cmp	r3, r2
 80081b0:	d007      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 80081b2:	687b      	ldr	r3, [r7, #4]
 80081b4:	4a24      	ldr	r2, [pc, #144]	; (8008248 <TIM_Base_SetConfig+0x138>)
 80081b6:	4293      	cmp	r3, r2
 80081b8:	d003      	beq.n	80081c2 <TIM_Base_SetConfig+0xb2>
 80081ba:	687b      	ldr	r3, [r7, #4]
 80081bc:	4a23      	ldr	r2, [pc, #140]	; (800824c <TIM_Base_SetConfig+0x13c>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d108      	bne.n	80081d4 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80081c2:	68fb      	ldr	r3, [r7, #12]
 80081c4:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80081c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	68db      	ldr	r3, [r3, #12]
 80081ce:	68fa      	ldr	r2, [r7, #12]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80081d4:	68fb      	ldr	r3, [r7, #12]
 80081d6:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80081da:	683b      	ldr	r3, [r7, #0]
 80081dc:	695b      	ldr	r3, [r3, #20]
 80081de:	4313      	orrs	r3, r2
 80081e0:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80081e2:	687b      	ldr	r3, [r7, #4]
 80081e4:	68fa      	ldr	r2, [r7, #12]
 80081e6:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80081e8:	683b      	ldr	r3, [r7, #0]
 80081ea:	689a      	ldr	r2, [r3, #8]
 80081ec:	687b      	ldr	r3, [r7, #4]
 80081ee:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80081f0:	683b      	ldr	r3, [r7, #0]
 80081f2:	681a      	ldr	r2, [r3, #0]
 80081f4:	687b      	ldr	r3, [r7, #4]
 80081f6:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80081f8:	687b      	ldr	r3, [r7, #4]
 80081fa:	4a0a      	ldr	r2, [pc, #40]	; (8008224 <TIM_Base_SetConfig+0x114>)
 80081fc:	4293      	cmp	r3, r2
 80081fe:	d003      	beq.n	8008208 <TIM_Base_SetConfig+0xf8>
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	4a0c      	ldr	r2, [pc, #48]	; (8008234 <TIM_Base_SetConfig+0x124>)
 8008204:	4293      	cmp	r3, r2
 8008206:	d103      	bne.n	8008210 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008208:	683b      	ldr	r3, [r7, #0]
 800820a:	691a      	ldr	r2, [r3, #16]
 800820c:	687b      	ldr	r3, [r7, #4]
 800820e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008210:	687b      	ldr	r3, [r7, #4]
 8008212:	2201      	movs	r2, #1
 8008214:	615a      	str	r2, [r3, #20]
}
 8008216:	bf00      	nop
 8008218:	3714      	adds	r7, #20
 800821a:	46bd      	mov	sp, r7
 800821c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008220:	4770      	bx	lr
 8008222:	bf00      	nop
 8008224:	40010000 	.word	0x40010000
 8008228:	40000400 	.word	0x40000400
 800822c:	40000800 	.word	0x40000800
 8008230:	40000c00 	.word	0x40000c00
 8008234:	40010400 	.word	0x40010400
 8008238:	40014000 	.word	0x40014000
 800823c:	40014400 	.word	0x40014400
 8008240:	40014800 	.word	0x40014800
 8008244:	40001800 	.word	0x40001800
 8008248:	40001c00 	.word	0x40001c00
 800824c:	40002000 	.word	0x40002000

08008250 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008250:	b480      	push	{r7}
 8008252:	b087      	sub	sp, #28
 8008254:	af00      	add	r7, sp, #0
 8008256:	60f8      	str	r0, [r7, #12]
 8008258:	60b9      	str	r1, [r7, #8]
 800825a:	607a      	str	r2, [r7, #4]
 800825c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	6a1b      	ldr	r3, [r3, #32]
 8008262:	f023 0201 	bic.w	r2, r3, #1
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800826a:	68fb      	ldr	r3, [r7, #12]
 800826c:	699b      	ldr	r3, [r3, #24]
 800826e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008270:	68fb      	ldr	r3, [r7, #12]
 8008272:	6a1b      	ldr	r3, [r3, #32]
 8008274:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 8008276:	68fb      	ldr	r3, [r7, #12]
 8008278:	4a28      	ldr	r2, [pc, #160]	; (800831c <TIM_TI1_SetConfig+0xcc>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d01b      	beq.n	80082b6 <TIM_TI1_SetConfig+0x66>
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008284:	d017      	beq.n	80082b6 <TIM_TI1_SetConfig+0x66>
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	4a25      	ldr	r2, [pc, #148]	; (8008320 <TIM_TI1_SetConfig+0xd0>)
 800828a:	4293      	cmp	r3, r2
 800828c:	d013      	beq.n	80082b6 <TIM_TI1_SetConfig+0x66>
 800828e:	68fb      	ldr	r3, [r7, #12]
 8008290:	4a24      	ldr	r2, [pc, #144]	; (8008324 <TIM_TI1_SetConfig+0xd4>)
 8008292:	4293      	cmp	r3, r2
 8008294:	d00f      	beq.n	80082b6 <TIM_TI1_SetConfig+0x66>
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	4a23      	ldr	r2, [pc, #140]	; (8008328 <TIM_TI1_SetConfig+0xd8>)
 800829a:	4293      	cmp	r3, r2
 800829c:	d00b      	beq.n	80082b6 <TIM_TI1_SetConfig+0x66>
 800829e:	68fb      	ldr	r3, [r7, #12]
 80082a0:	4a22      	ldr	r2, [pc, #136]	; (800832c <TIM_TI1_SetConfig+0xdc>)
 80082a2:	4293      	cmp	r3, r2
 80082a4:	d007      	beq.n	80082b6 <TIM_TI1_SetConfig+0x66>
 80082a6:	68fb      	ldr	r3, [r7, #12]
 80082a8:	4a21      	ldr	r2, [pc, #132]	; (8008330 <TIM_TI1_SetConfig+0xe0>)
 80082aa:	4293      	cmp	r3, r2
 80082ac:	d003      	beq.n	80082b6 <TIM_TI1_SetConfig+0x66>
 80082ae:	68fb      	ldr	r3, [r7, #12]
 80082b0:	4a20      	ldr	r2, [pc, #128]	; (8008334 <TIM_TI1_SetConfig+0xe4>)
 80082b2:	4293      	cmp	r3, r2
 80082b4:	d101      	bne.n	80082ba <TIM_TI1_SetConfig+0x6a>
 80082b6:	2301      	movs	r3, #1
 80082b8:	e000      	b.n	80082bc <TIM_TI1_SetConfig+0x6c>
 80082ba:	2300      	movs	r3, #0
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d008      	beq.n	80082d2 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f023 0303 	bic.w	r3, r3, #3
 80082c6:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 80082c8:	697a      	ldr	r2, [r7, #20]
 80082ca:	687b      	ldr	r3, [r7, #4]
 80082cc:	4313      	orrs	r3, r2
 80082ce:	617b      	str	r3, [r7, #20]
 80082d0:	e003      	b.n	80082da <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 80082d2:	697b      	ldr	r3, [r7, #20]
 80082d4:	f043 0301 	orr.w	r3, r3, #1
 80082d8:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80082da:	697b      	ldr	r3, [r7, #20]
 80082dc:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082e0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 80082e2:	683b      	ldr	r3, [r7, #0]
 80082e4:	011b      	lsls	r3, r3, #4
 80082e6:	b2db      	uxtb	r3, r3
 80082e8:	697a      	ldr	r2, [r7, #20]
 80082ea:	4313      	orrs	r3, r2
 80082ec:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082ee:	693b      	ldr	r3, [r7, #16]
 80082f0:	f023 030a 	bic.w	r3, r3, #10
 80082f4:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 80082f6:	68bb      	ldr	r3, [r7, #8]
 80082f8:	f003 030a 	and.w	r3, r3, #10
 80082fc:	693a      	ldr	r2, [r7, #16]
 80082fe:	4313      	orrs	r3, r2
 8008300:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	697a      	ldr	r2, [r7, #20]
 8008306:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008308:	68fb      	ldr	r3, [r7, #12]
 800830a:	693a      	ldr	r2, [r7, #16]
 800830c:	621a      	str	r2, [r3, #32]
}
 800830e:	bf00      	nop
 8008310:	371c      	adds	r7, #28
 8008312:	46bd      	mov	sp, r7
 8008314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008318:	4770      	bx	lr
 800831a:	bf00      	nop
 800831c:	40010000 	.word	0x40010000
 8008320:	40000400 	.word	0x40000400
 8008324:	40000800 	.word	0x40000800
 8008328:	40000c00 	.word	0x40000c00
 800832c:	40010400 	.word	0x40010400
 8008330:	40014000 	.word	0x40014000
 8008334:	40001800 	.word	0x40001800

08008338 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008338:	b480      	push	{r7}
 800833a:	b087      	sub	sp, #28
 800833c:	af00      	add	r7, sp, #0
 800833e:	60f8      	str	r0, [r7, #12]
 8008340:	60b9      	str	r1, [r7, #8]
 8008342:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6a1b      	ldr	r3, [r3, #32]
 8008348:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	6a1b      	ldr	r3, [r3, #32]
 800834e:	f023 0201 	bic.w	r2, r3, #1
 8008352:	68fb      	ldr	r3, [r7, #12]
 8008354:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008356:	68fb      	ldr	r3, [r7, #12]
 8008358:	699b      	ldr	r3, [r3, #24]
 800835a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800835c:	693b      	ldr	r3, [r7, #16]
 800835e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008362:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8008364:	687b      	ldr	r3, [r7, #4]
 8008366:	011b      	lsls	r3, r3, #4
 8008368:	693a      	ldr	r2, [r7, #16]
 800836a:	4313      	orrs	r3, r2
 800836c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800836e:	697b      	ldr	r3, [r7, #20]
 8008370:	f023 030a 	bic.w	r3, r3, #10
 8008374:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8008376:	697a      	ldr	r2, [r7, #20]
 8008378:	68bb      	ldr	r3, [r7, #8]
 800837a:	4313      	orrs	r3, r2
 800837c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800837e:	68fb      	ldr	r3, [r7, #12]
 8008380:	693a      	ldr	r2, [r7, #16]
 8008382:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008384:	68fb      	ldr	r3, [r7, #12]
 8008386:	697a      	ldr	r2, [r7, #20]
 8008388:	621a      	str	r2, [r3, #32]
}
 800838a:	bf00      	nop
 800838c:	371c      	adds	r7, #28
 800838e:	46bd      	mov	sp, r7
 8008390:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008394:	4770      	bx	lr

08008396 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008396:	b480      	push	{r7}
 8008398:	b087      	sub	sp, #28
 800839a:	af00      	add	r7, sp, #0
 800839c:	60f8      	str	r0, [r7, #12]
 800839e:	60b9      	str	r1, [r7, #8]
 80083a0:	607a      	str	r2, [r7, #4]
 80083a2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80083a4:	68fb      	ldr	r3, [r7, #12]
 80083a6:	6a1b      	ldr	r3, [r3, #32]
 80083a8:	f023 0210 	bic.w	r2, r3, #16
 80083ac:	68fb      	ldr	r3, [r7, #12]
 80083ae:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80083b0:	68fb      	ldr	r3, [r7, #12]
 80083b2:	699b      	ldr	r3, [r3, #24]
 80083b4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083b6:	68fb      	ldr	r3, [r7, #12]
 80083b8:	6a1b      	ldr	r3, [r3, #32]
 80083ba:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80083bc:	697b      	ldr	r3, [r7, #20]
 80083be:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80083c2:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 80083c4:	687b      	ldr	r3, [r7, #4]
 80083c6:	021b      	lsls	r3, r3, #8
 80083c8:	697a      	ldr	r2, [r7, #20]
 80083ca:	4313      	orrs	r3, r2
 80083cc:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80083ce:	697b      	ldr	r3, [r7, #20]
 80083d0:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80083d4:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 80083d6:	683b      	ldr	r3, [r7, #0]
 80083d8:	031b      	lsls	r3, r3, #12
 80083da:	b29b      	uxth	r3, r3
 80083dc:	697a      	ldr	r2, [r7, #20]
 80083de:	4313      	orrs	r3, r2
 80083e0:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80083e2:	693b      	ldr	r3, [r7, #16]
 80083e4:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80083e8:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	011b      	lsls	r3, r3, #4
 80083ee:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 80083f2:	693a      	ldr	r2, [r7, #16]
 80083f4:	4313      	orrs	r3, r2
 80083f6:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80083f8:	68fb      	ldr	r3, [r7, #12]
 80083fa:	697a      	ldr	r2, [r7, #20]
 80083fc:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80083fe:	68fb      	ldr	r3, [r7, #12]
 8008400:	693a      	ldr	r2, [r7, #16]
 8008402:	621a      	str	r2, [r3, #32]
}
 8008404:	bf00      	nop
 8008406:	371c      	adds	r7, #28
 8008408:	46bd      	mov	sp, r7
 800840a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800840e:	4770      	bx	lr

08008410 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008410:	b480      	push	{r7}
 8008412:	b087      	sub	sp, #28
 8008414:	af00      	add	r7, sp, #0
 8008416:	60f8      	str	r0, [r7, #12]
 8008418:	60b9      	str	r1, [r7, #8]
 800841a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6a1b      	ldr	r3, [r3, #32]
 8008420:	f023 0210 	bic.w	r2, r3, #16
 8008424:	68fb      	ldr	r3, [r7, #12]
 8008426:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008428:	68fb      	ldr	r3, [r7, #12]
 800842a:	699b      	ldr	r3, [r3, #24]
 800842c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800842e:	68fb      	ldr	r3, [r7, #12]
 8008430:	6a1b      	ldr	r3, [r3, #32]
 8008432:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008434:	697b      	ldr	r3, [r7, #20]
 8008436:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800843a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800843c:	687b      	ldr	r3, [r7, #4]
 800843e:	031b      	lsls	r3, r3, #12
 8008440:	697a      	ldr	r2, [r7, #20]
 8008442:	4313      	orrs	r3, r2
 8008444:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008446:	693b      	ldr	r3, [r7, #16]
 8008448:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800844c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800844e:	68bb      	ldr	r3, [r7, #8]
 8008450:	011b      	lsls	r3, r3, #4
 8008452:	693a      	ldr	r2, [r7, #16]
 8008454:	4313      	orrs	r3, r2
 8008456:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800845e:	68fb      	ldr	r3, [r7, #12]
 8008460:	693a      	ldr	r2, [r7, #16]
 8008462:	621a      	str	r2, [r3, #32]
}
 8008464:	bf00      	nop
 8008466:	371c      	adds	r7, #28
 8008468:	46bd      	mov	sp, r7
 800846a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800846e:	4770      	bx	lr

08008470 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008470:	b480      	push	{r7}
 8008472:	b087      	sub	sp, #28
 8008474:	af00      	add	r7, sp, #0
 8008476:	60f8      	str	r0, [r7, #12]
 8008478:	60b9      	str	r1, [r7, #8]
 800847a:	607a      	str	r2, [r7, #4]
 800847c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800847e:	68fb      	ldr	r3, [r7, #12]
 8008480:	6a1b      	ldr	r3, [r3, #32]
 8008482:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008486:	68fb      	ldr	r3, [r7, #12]
 8008488:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	69db      	ldr	r3, [r3, #28]
 800848e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	6a1b      	ldr	r3, [r3, #32]
 8008494:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 8008496:	697b      	ldr	r3, [r7, #20]
 8008498:	f023 0303 	bic.w	r3, r3, #3
 800849c:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 800849e:	697a      	ldr	r2, [r7, #20]
 80084a0:	687b      	ldr	r3, [r7, #4]
 80084a2:	4313      	orrs	r3, r2
 80084a4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80084a6:	697b      	ldr	r3, [r7, #20]
 80084a8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80084ac:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80084ae:	683b      	ldr	r3, [r7, #0]
 80084b0:	011b      	lsls	r3, r3, #4
 80084b2:	b2db      	uxtb	r3, r3
 80084b4:	697a      	ldr	r2, [r7, #20]
 80084b6:	4313      	orrs	r3, r2
 80084b8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80084ba:	693b      	ldr	r3, [r7, #16]
 80084bc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 80084c0:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 80084c2:	68bb      	ldr	r3, [r7, #8]
 80084c4:	021b      	lsls	r3, r3, #8
 80084c6:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 80084ca:	693a      	ldr	r2, [r7, #16]
 80084cc:	4313      	orrs	r3, r2
 80084ce:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 80084d0:	68fb      	ldr	r3, [r7, #12]
 80084d2:	697a      	ldr	r2, [r7, #20]
 80084d4:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 80084d6:	68fb      	ldr	r3, [r7, #12]
 80084d8:	693a      	ldr	r2, [r7, #16]
 80084da:	621a      	str	r2, [r3, #32]
}
 80084dc:	bf00      	nop
 80084de:	371c      	adds	r7, #28
 80084e0:	46bd      	mov	sp, r7
 80084e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084e6:	4770      	bx	lr

080084e8 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80084e8:	b480      	push	{r7}
 80084ea:	b087      	sub	sp, #28
 80084ec:	af00      	add	r7, sp, #0
 80084ee:	60f8      	str	r0, [r7, #12]
 80084f0:	60b9      	str	r1, [r7, #8]
 80084f2:	607a      	str	r2, [r7, #4]
 80084f4:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80084f6:	68fb      	ldr	r3, [r7, #12]
 80084f8:	6a1b      	ldr	r3, [r3, #32]
 80084fa:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80084fe:	68fb      	ldr	r3, [r7, #12]
 8008500:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	69db      	ldr	r3, [r3, #28]
 8008506:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008508:	68fb      	ldr	r3, [r7, #12]
 800850a:	6a1b      	ldr	r3, [r3, #32]
 800850c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800850e:	697b      	ldr	r3, [r7, #20]
 8008510:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008514:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008516:	687b      	ldr	r3, [r7, #4]
 8008518:	021b      	lsls	r3, r3, #8
 800851a:	697a      	ldr	r2, [r7, #20]
 800851c:	4313      	orrs	r3, r2
 800851e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008520:	697b      	ldr	r3, [r7, #20]
 8008522:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008526:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008528:	683b      	ldr	r3, [r7, #0]
 800852a:	031b      	lsls	r3, r3, #12
 800852c:	b29b      	uxth	r3, r3
 800852e:	697a      	ldr	r2, [r7, #20]
 8008530:	4313      	orrs	r3, r2
 8008532:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008534:	693b      	ldr	r3, [r7, #16]
 8008536:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800853a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800853c:	68bb      	ldr	r3, [r7, #8]
 800853e:	031b      	lsls	r3, r3, #12
 8008540:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008544:	693a      	ldr	r2, [r7, #16]
 8008546:	4313      	orrs	r3, r2
 8008548:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800854a:	68fb      	ldr	r3, [r7, #12]
 800854c:	697a      	ldr	r2, [r7, #20]
 800854e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	693a      	ldr	r2, [r7, #16]
 8008554:	621a      	str	r2, [r3, #32]
}
 8008556:	bf00      	nop
 8008558:	371c      	adds	r7, #28
 800855a:	46bd      	mov	sp, r7
 800855c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008560:	4770      	bx	lr

08008562 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008562:	b480      	push	{r7}
 8008564:	b085      	sub	sp, #20
 8008566:	af00      	add	r7, sp, #0
 8008568:	6078      	str	r0, [r7, #4]
 800856a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	689b      	ldr	r3, [r3, #8]
 8008570:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008572:	68fb      	ldr	r3, [r7, #12]
 8008574:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008578:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800857a:	683a      	ldr	r2, [r7, #0]
 800857c:	68fb      	ldr	r3, [r7, #12]
 800857e:	4313      	orrs	r3, r2
 8008580:	f043 0307 	orr.w	r3, r3, #7
 8008584:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	68fa      	ldr	r2, [r7, #12]
 800858a:	609a      	str	r2, [r3, #8]
}
 800858c:	bf00      	nop
 800858e:	3714      	adds	r7, #20
 8008590:	46bd      	mov	sp, r7
 8008592:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008596:	4770      	bx	lr

08008598 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008598:	b480      	push	{r7}
 800859a:	b087      	sub	sp, #28
 800859c:	af00      	add	r7, sp, #0
 800859e:	60f8      	str	r0, [r7, #12]
 80085a0:	60b9      	str	r1, [r7, #8]
 80085a2:	607a      	str	r2, [r7, #4]
 80085a4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80085a6:	68fb      	ldr	r3, [r7, #12]
 80085a8:	689b      	ldr	r3, [r3, #8]
 80085aa:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80085ac:	697b      	ldr	r3, [r7, #20]
 80085ae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80085b2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80085b4:	683b      	ldr	r3, [r7, #0]
 80085b6:	021a      	lsls	r2, r3, #8
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	431a      	orrs	r2, r3
 80085bc:	68bb      	ldr	r3, [r7, #8]
 80085be:	4313      	orrs	r3, r2
 80085c0:	697a      	ldr	r2, [r7, #20]
 80085c2:	4313      	orrs	r3, r2
 80085c4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80085c6:	68fb      	ldr	r3, [r7, #12]
 80085c8:	697a      	ldr	r2, [r7, #20]
 80085ca:	609a      	str	r2, [r3, #8]
}
 80085cc:	bf00      	nop
 80085ce:	371c      	adds	r7, #28
 80085d0:	46bd      	mov	sp, r7
 80085d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085d6:	4770      	bx	lr

080085d8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80085d8:	b480      	push	{r7}
 80085da:	b085      	sub	sp, #20
 80085dc:	af00      	add	r7, sp, #0
 80085de:	6078      	str	r0, [r7, #4]
 80085e0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e8:	2b01      	cmp	r3, #1
 80085ea:	d101      	bne.n	80085f0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80085ec:	2302      	movs	r3, #2
 80085ee:	e05a      	b.n	80086a6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	2201      	movs	r2, #1
 80085f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	2202      	movs	r2, #2
 80085fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	685b      	ldr	r3, [r3, #4]
 8008606:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008608:	687b      	ldr	r3, [r7, #4]
 800860a:	681b      	ldr	r3, [r3, #0]
 800860c:	689b      	ldr	r3, [r3, #8]
 800860e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008610:	68fb      	ldr	r3, [r7, #12]
 8008612:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008616:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008618:	683b      	ldr	r3, [r7, #0]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	68fa      	ldr	r2, [r7, #12]
 800861e:	4313      	orrs	r3, r2
 8008620:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008622:	687b      	ldr	r3, [r7, #4]
 8008624:	681b      	ldr	r3, [r3, #0]
 8008626:	68fa      	ldr	r2, [r7, #12]
 8008628:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800862a:	687b      	ldr	r3, [r7, #4]
 800862c:	681b      	ldr	r3, [r3, #0]
 800862e:	4a21      	ldr	r2, [pc, #132]	; (80086b4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008630:	4293      	cmp	r3, r2
 8008632:	d022      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	681b      	ldr	r3, [r3, #0]
 8008638:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800863c:	d01d      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	4a1d      	ldr	r2, [pc, #116]	; (80086b8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008644:	4293      	cmp	r3, r2
 8008646:	d018      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008648:	687b      	ldr	r3, [r7, #4]
 800864a:	681b      	ldr	r3, [r3, #0]
 800864c:	4a1b      	ldr	r2, [pc, #108]	; (80086bc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800864e:	4293      	cmp	r3, r2
 8008650:	d013      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008652:	687b      	ldr	r3, [r7, #4]
 8008654:	681b      	ldr	r3, [r3, #0]
 8008656:	4a1a      	ldr	r2, [pc, #104]	; (80086c0 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008658:	4293      	cmp	r3, r2
 800865a:	d00e      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800865c:	687b      	ldr	r3, [r7, #4]
 800865e:	681b      	ldr	r3, [r3, #0]
 8008660:	4a18      	ldr	r2, [pc, #96]	; (80086c4 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8008662:	4293      	cmp	r3, r2
 8008664:	d009      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	4a17      	ldr	r2, [pc, #92]	; (80086c8 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 800866c:	4293      	cmp	r3, r2
 800866e:	d004      	beq.n	800867a <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008670:	687b      	ldr	r3, [r7, #4]
 8008672:	681b      	ldr	r3, [r3, #0]
 8008674:	4a15      	ldr	r2, [pc, #84]	; (80086cc <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8008676:	4293      	cmp	r3, r2
 8008678:	d10c      	bne.n	8008694 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 800867a:	68bb      	ldr	r3, [r7, #8]
 800867c:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008680:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8008682:	683b      	ldr	r3, [r7, #0]
 8008684:	685b      	ldr	r3, [r3, #4]
 8008686:	68ba      	ldr	r2, [r7, #8]
 8008688:	4313      	orrs	r3, r2
 800868a:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	681b      	ldr	r3, [r3, #0]
 8008690:	68ba      	ldr	r2, [r7, #8]
 8008692:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	2201      	movs	r2, #1
 8008698:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	2200      	movs	r2, #0
 80086a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80086a4:	2300      	movs	r3, #0
}
 80086a6:	4618      	mov	r0, r3
 80086a8:	3714      	adds	r7, #20
 80086aa:	46bd      	mov	sp, r7
 80086ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086b0:	4770      	bx	lr
 80086b2:	bf00      	nop
 80086b4:	40010000 	.word	0x40010000
 80086b8:	40000400 	.word	0x40000400
 80086bc:	40000800 	.word	0x40000800
 80086c0:	40000c00 	.word	0x40000c00
 80086c4:	40010400 	.word	0x40010400
 80086c8:	40014000 	.word	0x40014000
 80086cc:	40001800 	.word	0x40001800

080086d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80086d0:	b480      	push	{r7}
 80086d2:	b083      	sub	sp, #12
 80086d4:	af00      	add	r7, sp, #0
 80086d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80086d8:	bf00      	nop
 80086da:	370c      	adds	r7, #12
 80086dc:	46bd      	mov	sp, r7
 80086de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086e2:	4770      	bx	lr

080086e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80086e4:	b480      	push	{r7}
 80086e6:	b083      	sub	sp, #12
 80086e8:	af00      	add	r7, sp, #0
 80086ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80086ec:	bf00      	nop
 80086ee:	370c      	adds	r7, #12
 80086f0:	46bd      	mov	sp, r7
 80086f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80086f6:	4770      	bx	lr

080086f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80086f8:	b580      	push	{r7, lr}
 80086fa:	b082      	sub	sp, #8
 80086fc:	af00      	add	r7, sp, #0
 80086fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	2b00      	cmp	r3, #0
 8008704:	d101      	bne.n	800870a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008706:	2301      	movs	r3, #1
 8008708:	e03f      	b.n	800878a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008710:	b2db      	uxtb	r3, r3
 8008712:	2b00      	cmp	r3, #0
 8008714:	d106      	bne.n	8008724 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008716:	687b      	ldr	r3, [r7, #4]
 8008718:	2200      	movs	r2, #0
 800871a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800871e:	6878      	ldr	r0, [r7, #4]
 8008720:	f7fd fb72 	bl	8005e08 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	2224      	movs	r2, #36	; 0x24
 8008728:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800872c:	687b      	ldr	r3, [r7, #4]
 800872e:	681b      	ldr	r3, [r3, #0]
 8008730:	68da      	ldr	r2, [r3, #12]
 8008732:	687b      	ldr	r3, [r7, #4]
 8008734:	681b      	ldr	r3, [r3, #0]
 8008736:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800873a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800873c:	6878      	ldr	r0, [r7, #4]
 800873e:	f000 fddb 	bl	80092f8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008742:	687b      	ldr	r3, [r7, #4]
 8008744:	681b      	ldr	r3, [r3, #0]
 8008746:	691a      	ldr	r2, [r3, #16]
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	681b      	ldr	r3, [r3, #0]
 800874c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008750:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	695a      	ldr	r2, [r3, #20]
 8008758:	687b      	ldr	r3, [r7, #4]
 800875a:	681b      	ldr	r3, [r3, #0]
 800875c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008760:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008762:	687b      	ldr	r3, [r7, #4]
 8008764:	681b      	ldr	r3, [r3, #0]
 8008766:	68da      	ldr	r2, [r3, #12]
 8008768:	687b      	ldr	r3, [r7, #4]
 800876a:	681b      	ldr	r3, [r3, #0]
 800876c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008770:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008772:	687b      	ldr	r3, [r7, #4]
 8008774:	2200      	movs	r2, #0
 8008776:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008778:	687b      	ldr	r3, [r7, #4]
 800877a:	2220      	movs	r2, #32
 800877c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008780:	687b      	ldr	r3, [r7, #4]
 8008782:	2220      	movs	r2, #32
 8008784:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008788:	2300      	movs	r3, #0
}
 800878a:	4618      	mov	r0, r3
 800878c:	3708      	adds	r7, #8
 800878e:	46bd      	mov	sp, r7
 8008790:	bd80      	pop	{r7, pc}

08008792 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8008792:	b580      	push	{r7, lr}
 8008794:	b08a      	sub	sp, #40	; 0x28
 8008796:	af02      	add	r7, sp, #8
 8008798:	60f8      	str	r0, [r7, #12]
 800879a:	60b9      	str	r1, [r7, #8]
 800879c:	603b      	str	r3, [r7, #0]
 800879e:	4613      	mov	r3, r2
 80087a0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80087a2:	2300      	movs	r3, #0
 80087a4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80087ac:	b2db      	uxtb	r3, r3
 80087ae:	2b20      	cmp	r3, #32
 80087b0:	d17c      	bne.n	80088ac <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80087b2:	68bb      	ldr	r3, [r7, #8]
 80087b4:	2b00      	cmp	r3, #0
 80087b6:	d002      	beq.n	80087be <HAL_UART_Transmit+0x2c>
 80087b8:	88fb      	ldrh	r3, [r7, #6]
 80087ba:	2b00      	cmp	r3, #0
 80087bc:	d101      	bne.n	80087c2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80087be:	2301      	movs	r3, #1
 80087c0:	e075      	b.n	80088ae <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80087c2:	68fb      	ldr	r3, [r7, #12]
 80087c4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80087c8:	2b01      	cmp	r3, #1
 80087ca:	d101      	bne.n	80087d0 <HAL_UART_Transmit+0x3e>
 80087cc:	2302      	movs	r3, #2
 80087ce:	e06e      	b.n	80088ae <HAL_UART_Transmit+0x11c>
 80087d0:	68fb      	ldr	r3, [r7, #12]
 80087d2:	2201      	movs	r2, #1
 80087d4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087d8:	68fb      	ldr	r3, [r7, #12]
 80087da:	2200      	movs	r2, #0
 80087dc:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80087de:	68fb      	ldr	r3, [r7, #12]
 80087e0:	2221      	movs	r2, #33	; 0x21
 80087e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80087e6:	f7fd fda5 	bl	8006334 <HAL_GetTick>
 80087ea:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80087ec:	68fb      	ldr	r3, [r7, #12]
 80087ee:	88fa      	ldrh	r2, [r7, #6]
 80087f0:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80087f2:	68fb      	ldr	r3, [r7, #12]
 80087f4:	88fa      	ldrh	r2, [r7, #6]
 80087f6:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80087f8:	68fb      	ldr	r3, [r7, #12]
 80087fa:	689b      	ldr	r3, [r3, #8]
 80087fc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008800:	d108      	bne.n	8008814 <HAL_UART_Transmit+0x82>
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	691b      	ldr	r3, [r3, #16]
 8008806:	2b00      	cmp	r3, #0
 8008808:	d104      	bne.n	8008814 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800880a:	2300      	movs	r3, #0
 800880c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800880e:	68bb      	ldr	r3, [r7, #8]
 8008810:	61bb      	str	r3, [r7, #24]
 8008812:	e003      	b.n	800881c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008814:	68bb      	ldr	r3, [r7, #8]
 8008816:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008818:	2300      	movs	r3, #0
 800881a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800881c:	68fb      	ldr	r3, [r7, #12]
 800881e:	2200      	movs	r2, #0
 8008820:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008824:	e02a      	b.n	800887c <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008826:	683b      	ldr	r3, [r7, #0]
 8008828:	9300      	str	r3, [sp, #0]
 800882a:	697b      	ldr	r3, [r7, #20]
 800882c:	2200      	movs	r2, #0
 800882e:	2180      	movs	r1, #128	; 0x80
 8008830:	68f8      	ldr	r0, [r7, #12]
 8008832:	f000 fb1f 	bl	8008e74 <UART_WaitOnFlagUntilTimeout>
 8008836:	4603      	mov	r3, r0
 8008838:	2b00      	cmp	r3, #0
 800883a:	d001      	beq.n	8008840 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800883c:	2303      	movs	r3, #3
 800883e:	e036      	b.n	80088ae <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008840:	69fb      	ldr	r3, [r7, #28]
 8008842:	2b00      	cmp	r3, #0
 8008844:	d10b      	bne.n	800885e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008846:	69bb      	ldr	r3, [r7, #24]
 8008848:	881b      	ldrh	r3, [r3, #0]
 800884a:	461a      	mov	r2, r3
 800884c:	68fb      	ldr	r3, [r7, #12]
 800884e:	681b      	ldr	r3, [r3, #0]
 8008850:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008854:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008856:	69bb      	ldr	r3, [r7, #24]
 8008858:	3302      	adds	r3, #2
 800885a:	61bb      	str	r3, [r7, #24]
 800885c:	e007      	b.n	800886e <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800885e:	69fb      	ldr	r3, [r7, #28]
 8008860:	781a      	ldrb	r2, [r3, #0]
 8008862:	68fb      	ldr	r3, [r7, #12]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8008868:	69fb      	ldr	r3, [r7, #28]
 800886a:	3301      	adds	r3, #1
 800886c:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 800886e:	68fb      	ldr	r3, [r7, #12]
 8008870:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008872:	b29b      	uxth	r3, r3
 8008874:	3b01      	subs	r3, #1
 8008876:	b29a      	uxth	r2, r3
 8008878:	68fb      	ldr	r3, [r7, #12]
 800887a:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 800887c:	68fb      	ldr	r3, [r7, #12]
 800887e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008880:	b29b      	uxth	r3, r3
 8008882:	2b00      	cmp	r3, #0
 8008884:	d1cf      	bne.n	8008826 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8008886:	683b      	ldr	r3, [r7, #0]
 8008888:	9300      	str	r3, [sp, #0]
 800888a:	697b      	ldr	r3, [r7, #20]
 800888c:	2200      	movs	r2, #0
 800888e:	2140      	movs	r1, #64	; 0x40
 8008890:	68f8      	ldr	r0, [r7, #12]
 8008892:	f000 faef 	bl	8008e74 <UART_WaitOnFlagUntilTimeout>
 8008896:	4603      	mov	r3, r0
 8008898:	2b00      	cmp	r3, #0
 800889a:	d001      	beq.n	80088a0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 800889c:	2303      	movs	r3, #3
 800889e:	e006      	b.n	80088ae <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80088a8:	2300      	movs	r3, #0
 80088aa:	e000      	b.n	80088ae <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80088ac:	2302      	movs	r3, #2
  }
}
 80088ae:	4618      	mov	r0, r3
 80088b0:	3720      	adds	r7, #32
 80088b2:	46bd      	mov	sp, r7
 80088b4:	bd80      	pop	{r7, pc}

080088b6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80088b6:	b580      	push	{r7, lr}
 80088b8:	b084      	sub	sp, #16
 80088ba:	af00      	add	r7, sp, #0
 80088bc:	60f8      	str	r0, [r7, #12]
 80088be:	60b9      	str	r1, [r7, #8]
 80088c0:	4613      	mov	r3, r2
 80088c2:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80088c4:	68fb      	ldr	r3, [r7, #12]
 80088c6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80088ca:	b2db      	uxtb	r3, r3
 80088cc:	2b20      	cmp	r3, #32
 80088ce:	d11d      	bne.n	800890c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80088d0:	68bb      	ldr	r3, [r7, #8]
 80088d2:	2b00      	cmp	r3, #0
 80088d4:	d002      	beq.n	80088dc <HAL_UART_Receive_IT+0x26>
 80088d6:	88fb      	ldrh	r3, [r7, #6]
 80088d8:	2b00      	cmp	r3, #0
 80088da:	d101      	bne.n	80088e0 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80088dc:	2301      	movs	r3, #1
 80088de:	e016      	b.n	800890e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80088e0:	68fb      	ldr	r3, [r7, #12]
 80088e2:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80088e6:	2b01      	cmp	r3, #1
 80088e8:	d101      	bne.n	80088ee <HAL_UART_Receive_IT+0x38>
 80088ea:	2302      	movs	r3, #2
 80088ec:	e00f      	b.n	800890e <HAL_UART_Receive_IT+0x58>
 80088ee:	68fb      	ldr	r3, [r7, #12]
 80088f0:	2201      	movs	r2, #1
 80088f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f6:	68fb      	ldr	r3, [r7, #12]
 80088f8:	2200      	movs	r2, #0
 80088fa:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80088fc:	88fb      	ldrh	r3, [r7, #6]
 80088fe:	461a      	mov	r2, r3
 8008900:	68b9      	ldr	r1, [r7, #8]
 8008902:	68f8      	ldr	r0, [r7, #12]
 8008904:	f000 fb24 	bl	8008f50 <UART_Start_Receive_IT>
 8008908:	4603      	mov	r3, r0
 800890a:	e000      	b.n	800890e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800890c:	2302      	movs	r3, #2
  }
}
 800890e:	4618      	mov	r0, r3
 8008910:	3710      	adds	r7, #16
 8008912:	46bd      	mov	sp, r7
 8008914:	bd80      	pop	{r7, pc}
	...

08008918 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008918:	b580      	push	{r7, lr}
 800891a:	b0ba      	sub	sp, #232	; 0xe8
 800891c:	af00      	add	r7, sp, #0
 800891e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008920:	687b      	ldr	r3, [r7, #4]
 8008922:	681b      	ldr	r3, [r3, #0]
 8008924:	681b      	ldr	r3, [r3, #0]
 8008926:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800892a:	687b      	ldr	r3, [r7, #4]
 800892c:	681b      	ldr	r3, [r3, #0]
 800892e:	68db      	ldr	r3, [r3, #12]
 8008930:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008934:	687b      	ldr	r3, [r7, #4]
 8008936:	681b      	ldr	r3, [r3, #0]
 8008938:	695b      	ldr	r3, [r3, #20]
 800893a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800893e:	2300      	movs	r3, #0
 8008940:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008944:	2300      	movs	r3, #0
 8008946:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800894a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800894e:	f003 030f 	and.w	r3, r3, #15
 8008952:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008956:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800895a:	2b00      	cmp	r3, #0
 800895c:	d10f      	bne.n	800897e <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800895e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008962:	f003 0320 	and.w	r3, r3, #32
 8008966:	2b00      	cmp	r3, #0
 8008968:	d009      	beq.n	800897e <HAL_UART_IRQHandler+0x66>
 800896a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800896e:	f003 0320 	and.w	r3, r3, #32
 8008972:	2b00      	cmp	r3, #0
 8008974:	d003      	beq.n	800897e <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8008976:	6878      	ldr	r0, [r7, #4]
 8008978:	f000 fc03 	bl	8009182 <UART_Receive_IT>
      return;
 800897c:	e256      	b.n	8008e2c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800897e:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 80de 	beq.w	8008b44 <HAL_UART_IRQHandler+0x22c>
 8008988:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800898c:	f003 0301 	and.w	r3, r3, #1
 8008990:	2b00      	cmp	r3, #0
 8008992:	d106      	bne.n	80089a2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008998:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800899c:	2b00      	cmp	r3, #0
 800899e:	f000 80d1 	beq.w	8008b44 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80089a2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089a6:	f003 0301 	and.w	r3, r3, #1
 80089aa:	2b00      	cmp	r3, #0
 80089ac:	d00b      	beq.n	80089c6 <HAL_UART_IRQHandler+0xae>
 80089ae:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80089b2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089b6:	2b00      	cmp	r3, #0
 80089b8:	d005      	beq.n	80089c6 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80089ba:	687b      	ldr	r3, [r7, #4]
 80089bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089be:	f043 0201 	orr.w	r2, r3, #1
 80089c2:	687b      	ldr	r3, [r7, #4]
 80089c4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ca:	f003 0304 	and.w	r3, r3, #4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d00b      	beq.n	80089ea <HAL_UART_IRQHandler+0xd2>
 80089d2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089d6:	f003 0301 	and.w	r3, r3, #1
 80089da:	2b00      	cmp	r3, #0
 80089dc:	d005      	beq.n	80089ea <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80089de:	687b      	ldr	r3, [r7, #4]
 80089e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089e2:	f043 0202 	orr.w	r2, r3, #2
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80089ea:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80089ee:	f003 0302 	and.w	r3, r3, #2
 80089f2:	2b00      	cmp	r3, #0
 80089f4:	d00b      	beq.n	8008a0e <HAL_UART_IRQHandler+0xf6>
 80089f6:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80089fa:	f003 0301 	and.w	r3, r3, #1
 80089fe:	2b00      	cmp	r3, #0
 8008a00:	d005      	beq.n	8008a0e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008a02:	687b      	ldr	r3, [r7, #4]
 8008a04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a06:	f043 0204 	orr.w	r2, r3, #4
 8008a0a:	687b      	ldr	r3, [r7, #4]
 8008a0c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8008a0e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a12:	f003 0308 	and.w	r3, r3, #8
 8008a16:	2b00      	cmp	r3, #0
 8008a18:	d011      	beq.n	8008a3e <HAL_UART_IRQHandler+0x126>
 8008a1a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a1e:	f003 0320 	and.w	r3, r3, #32
 8008a22:	2b00      	cmp	r3, #0
 8008a24:	d105      	bne.n	8008a32 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008a26:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008a2a:	f003 0301 	and.w	r3, r3, #1
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d005      	beq.n	8008a3e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a36:	f043 0208 	orr.w	r2, r3, #8
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a42:	2b00      	cmp	r3, #0
 8008a44:	f000 81ed 	beq.w	8008e22 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008a48:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a4c:	f003 0320 	and.w	r3, r3, #32
 8008a50:	2b00      	cmp	r3, #0
 8008a52:	d008      	beq.n	8008a66 <HAL_UART_IRQHandler+0x14e>
 8008a54:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008a58:	f003 0320 	and.w	r3, r3, #32
 8008a5c:	2b00      	cmp	r3, #0
 8008a5e:	d002      	beq.n	8008a66 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8008a60:	6878      	ldr	r0, [r7, #4]
 8008a62:	f000 fb8e 	bl	8009182 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a66:	687b      	ldr	r3, [r7, #4]
 8008a68:	681b      	ldr	r3, [r3, #0]
 8008a6a:	695b      	ldr	r3, [r3, #20]
 8008a6c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a70:	2b40      	cmp	r3, #64	; 0x40
 8008a72:	bf0c      	ite	eq
 8008a74:	2301      	moveq	r3, #1
 8008a76:	2300      	movne	r3, #0
 8008a78:	b2db      	uxtb	r3, r3
 8008a7a:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008a7e:	687b      	ldr	r3, [r7, #4]
 8008a80:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a82:	f003 0308 	and.w	r3, r3, #8
 8008a86:	2b00      	cmp	r3, #0
 8008a88:	d103      	bne.n	8008a92 <HAL_UART_IRQHandler+0x17a>
 8008a8a:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 8008a8e:	2b00      	cmp	r3, #0
 8008a90:	d04f      	beq.n	8008b32 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008a92:	6878      	ldr	r0, [r7, #4]
 8008a94:	f000 fa96 	bl	8008fc4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a98:	687b      	ldr	r3, [r7, #4]
 8008a9a:	681b      	ldr	r3, [r3, #0]
 8008a9c:	695b      	ldr	r3, [r3, #20]
 8008a9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aa2:	2b40      	cmp	r3, #64	; 0x40
 8008aa4:	d141      	bne.n	8008b2a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008aa6:	687b      	ldr	r3, [r7, #4]
 8008aa8:	681b      	ldr	r3, [r3, #0]
 8008aaa:	3314      	adds	r3, #20
 8008aac:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ab0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 8008ab4:	e853 3f00 	ldrex	r3, [r3]
 8008ab8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 8008abc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008ac0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ac4:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008ac8:	687b      	ldr	r3, [r7, #4]
 8008aca:	681b      	ldr	r3, [r3, #0]
 8008acc:	3314      	adds	r3, #20
 8008ace:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008ad2:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008ad6:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ada:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008ade:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008ae2:	e841 2300 	strex	r3, r2, [r1]
 8008ae6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008aea:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008aee:	2b00      	cmp	r3, #0
 8008af0:	d1d9      	bne.n	8008aa6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008af2:	687b      	ldr	r3, [r7, #4]
 8008af4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af6:	2b00      	cmp	r3, #0
 8008af8:	d013      	beq.n	8008b22 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008afa:	687b      	ldr	r3, [r7, #4]
 8008afc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008afe:	4a7d      	ldr	r2, [pc, #500]	; (8008cf4 <HAL_UART_IRQHandler+0x3dc>)
 8008b00:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008b02:	687b      	ldr	r3, [r7, #4]
 8008b04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b06:	4618      	mov	r0, r3
 8008b08:	f7fd fddf 	bl	80066ca <HAL_DMA_Abort_IT>
 8008b0c:	4603      	mov	r3, r0
 8008b0e:	2b00      	cmp	r3, #0
 8008b10:	d016      	beq.n	8008b40 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008b12:	687b      	ldr	r3, [r7, #4]
 8008b14:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b16:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008b18:	687a      	ldr	r2, [r7, #4]
 8008b1a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008b1c:	4610      	mov	r0, r2
 8008b1e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b20:	e00e      	b.n	8008b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008b22:	6878      	ldr	r0, [r7, #4]
 8008b24:	f000 f990 	bl	8008e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b28:	e00a      	b.n	8008b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008b2a:	6878      	ldr	r0, [r7, #4]
 8008b2c:	f000 f98c 	bl	8008e48 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b30:	e006      	b.n	8008b40 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008b32:	6878      	ldr	r0, [r7, #4]
 8008b34:	f000 f988 	bl	8008e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008b38:	687b      	ldr	r3, [r7, #4]
 8008b3a:	2200      	movs	r2, #0
 8008b3c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008b3e:	e170      	b.n	8008e22 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b40:	bf00      	nop
    return;
 8008b42:	e16e      	b.n	8008e22 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008b48:	2b01      	cmp	r3, #1
 8008b4a:	f040 814a 	bne.w	8008de2 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008b4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008b52:	f003 0310 	and.w	r3, r3, #16
 8008b56:	2b00      	cmp	r3, #0
 8008b58:	f000 8143 	beq.w	8008de2 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008b5c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008b60:	f003 0310 	and.w	r3, r3, #16
 8008b64:	2b00      	cmp	r3, #0
 8008b66:	f000 813c 	beq.w	8008de2 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008b6a:	2300      	movs	r3, #0
 8008b6c:	60bb      	str	r3, [r7, #8]
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	681b      	ldr	r3, [r3, #0]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	60bb      	str	r3, [r7, #8]
 8008b76:	687b      	ldr	r3, [r7, #4]
 8008b78:	681b      	ldr	r3, [r3, #0]
 8008b7a:	685b      	ldr	r3, [r3, #4]
 8008b7c:	60bb      	str	r3, [r7, #8]
 8008b7e:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	681b      	ldr	r3, [r3, #0]
 8008b84:	695b      	ldr	r3, [r3, #20]
 8008b86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b8a:	2b40      	cmp	r3, #64	; 0x40
 8008b8c:	f040 80b4 	bne.w	8008cf8 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	685b      	ldr	r3, [r3, #4]
 8008b98:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008b9c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ba0:	2b00      	cmp	r3, #0
 8008ba2:	f000 8140 	beq.w	8008e26 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ba6:	687b      	ldr	r3, [r7, #4]
 8008ba8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008baa:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bae:	429a      	cmp	r2, r3
 8008bb0:	f080 8139 	bcs.w	8008e26 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008bba:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bc0:	69db      	ldr	r3, [r3, #28]
 8008bc2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008bc6:	f000 8088 	beq.w	8008cda <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	681b      	ldr	r3, [r3, #0]
 8008bce:	330c      	adds	r3, #12
 8008bd0:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008bd4:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008bd8:	e853 3f00 	ldrex	r3, [r3]
 8008bdc:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008be0:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008be4:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008be8:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008bec:	687b      	ldr	r3, [r7, #4]
 8008bee:	681b      	ldr	r3, [r3, #0]
 8008bf0:	330c      	adds	r3, #12
 8008bf2:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008bf6:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008bfa:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bfe:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008c02:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008c06:	e841 2300 	strex	r3, r2, [r1]
 8008c0a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008c0e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008c12:	2b00      	cmp	r3, #0
 8008c14:	d1d9      	bne.n	8008bca <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	681b      	ldr	r3, [r3, #0]
 8008c1a:	3314      	adds	r3, #20
 8008c1c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c1e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008c20:	e853 3f00 	ldrex	r3, [r3]
 8008c24:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008c26:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008c28:	f023 0301 	bic.w	r3, r3, #1
 8008c2c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008c30:	687b      	ldr	r3, [r7, #4]
 8008c32:	681b      	ldr	r3, [r3, #0]
 8008c34:	3314      	adds	r3, #20
 8008c36:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008c3a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008c3e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c40:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008c42:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008c46:	e841 2300 	strex	r3, r2, [r1]
 8008c4a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008c4c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	d1e1      	bne.n	8008c16 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c52:	687b      	ldr	r3, [r7, #4]
 8008c54:	681b      	ldr	r3, [r3, #0]
 8008c56:	3314      	adds	r3, #20
 8008c58:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c5a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008c5c:	e853 3f00 	ldrex	r3, [r3]
 8008c60:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008c62:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008c64:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008c68:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008c6c:	687b      	ldr	r3, [r7, #4]
 8008c6e:	681b      	ldr	r3, [r3, #0]
 8008c70:	3314      	adds	r3, #20
 8008c72:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008c76:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008c78:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c7a:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008c7c:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008c7e:	e841 2300 	strex	r3, r2, [r1]
 8008c82:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008c84:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008c86:	2b00      	cmp	r3, #0
 8008c88:	d1e3      	bne.n	8008c52 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	2220      	movs	r2, #32
 8008c8e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008c92:	687b      	ldr	r3, [r7, #4]
 8008c94:	2200      	movs	r2, #0
 8008c96:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008c98:	687b      	ldr	r3, [r7, #4]
 8008c9a:	681b      	ldr	r3, [r3, #0]
 8008c9c:	330c      	adds	r3, #12
 8008c9e:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ca0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008ca2:	e853 3f00 	ldrex	r3, [r3]
 8008ca6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008ca8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008caa:	f023 0310 	bic.w	r3, r3, #16
 8008cae:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008cb2:	687b      	ldr	r3, [r7, #4]
 8008cb4:	681b      	ldr	r3, [r3, #0]
 8008cb6:	330c      	adds	r3, #12
 8008cb8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008cbc:	65ba      	str	r2, [r7, #88]	; 0x58
 8008cbe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cc0:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008cc2:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008cc4:	e841 2300 	strex	r3, r2, [r1]
 8008cc8:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008cca:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008ccc:	2b00      	cmp	r3, #0
 8008cce:	d1e3      	bne.n	8008c98 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008cd4:	4618      	mov	r0, r3
 8008cd6:	f7fd fc88 	bl	80065ea <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008cda:	687b      	ldr	r3, [r7, #4]
 8008cdc:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008ce2:	b29b      	uxth	r3, r3
 8008ce4:	1ad3      	subs	r3, r2, r3
 8008ce6:	b29b      	uxth	r3, r3
 8008ce8:	4619      	mov	r1, r3
 8008cea:	6878      	ldr	r0, [r7, #4]
 8008cec:	f000 f8b6 	bl	8008e5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008cf0:	e099      	b.n	8008e26 <HAL_UART_IRQHandler+0x50e>
 8008cf2:	bf00      	nop
 8008cf4:	0800908b 	.word	0x0800908b
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008cfc:	687b      	ldr	r3, [r7, #4]
 8008cfe:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d00:	b29b      	uxth	r3, r3
 8008d02:	1ad3      	subs	r3, r2, r3
 8008d04:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008d08:	687b      	ldr	r3, [r7, #4]
 8008d0a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d0c:	b29b      	uxth	r3, r3
 8008d0e:	2b00      	cmp	r3, #0
 8008d10:	f000 808b 	beq.w	8008e2a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d18:	2b00      	cmp	r3, #0
 8008d1a:	f000 8086 	beq.w	8008e2a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	681b      	ldr	r3, [r3, #0]
 8008d22:	330c      	adds	r3, #12
 8008d24:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d26:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008d28:	e853 3f00 	ldrex	r3, [r3]
 8008d2c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008d2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008d30:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008d34:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008d38:	687b      	ldr	r3, [r7, #4]
 8008d3a:	681b      	ldr	r3, [r3, #0]
 8008d3c:	330c      	adds	r3, #12
 8008d3e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008d42:	647a      	str	r2, [r7, #68]	; 0x44
 8008d44:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d46:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008d48:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008d4a:	e841 2300 	strex	r3, r2, [r1]
 8008d4e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008d50:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008d52:	2b00      	cmp	r3, #0
 8008d54:	d1e3      	bne.n	8008d1e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008d56:	687b      	ldr	r3, [r7, #4]
 8008d58:	681b      	ldr	r3, [r3, #0]
 8008d5a:	3314      	adds	r3, #20
 8008d5c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008d5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008d60:	e853 3f00 	ldrex	r3, [r3]
 8008d64:	623b      	str	r3, [r7, #32]
   return(result);
 8008d66:	6a3b      	ldr	r3, [r7, #32]
 8008d68:	f023 0301 	bic.w	r3, r3, #1
 8008d6c:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008d70:	687b      	ldr	r3, [r7, #4]
 8008d72:	681b      	ldr	r3, [r3, #0]
 8008d74:	3314      	adds	r3, #20
 8008d76:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008d7a:	633a      	str	r2, [r7, #48]	; 0x30
 8008d7c:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d7e:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008d80:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008d82:	e841 2300 	strex	r3, r2, [r1]
 8008d86:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008d88:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008d8a:	2b00      	cmp	r3, #0
 8008d8c:	d1e3      	bne.n	8008d56 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	2220      	movs	r2, #32
 8008d92:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d96:	687b      	ldr	r3, [r7, #4]
 8008d98:	2200      	movs	r2, #0
 8008d9a:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008d9c:	687b      	ldr	r3, [r7, #4]
 8008d9e:	681b      	ldr	r3, [r3, #0]
 8008da0:	330c      	adds	r3, #12
 8008da2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008da4:	693b      	ldr	r3, [r7, #16]
 8008da6:	e853 3f00 	ldrex	r3, [r3]
 8008daa:	60fb      	str	r3, [r7, #12]
   return(result);
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	f023 0310 	bic.w	r3, r3, #16
 8008db2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008db6:	687b      	ldr	r3, [r7, #4]
 8008db8:	681b      	ldr	r3, [r3, #0]
 8008dba:	330c      	adds	r3, #12
 8008dbc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008dc0:	61fa      	str	r2, [r7, #28]
 8008dc2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008dc4:	69b9      	ldr	r1, [r7, #24]
 8008dc6:	69fa      	ldr	r2, [r7, #28]
 8008dc8:	e841 2300 	strex	r3, r2, [r1]
 8008dcc:	617b      	str	r3, [r7, #20]
   return(result);
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d1e3      	bne.n	8008d9c <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008dd4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008dd8:	4619      	mov	r1, r3
 8008dda:	6878      	ldr	r0, [r7, #4]
 8008ddc:	f000 f83e 	bl	8008e5c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008de0:	e023      	b.n	8008e2a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008de2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008de6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008dea:	2b00      	cmp	r3, #0
 8008dec:	d009      	beq.n	8008e02 <HAL_UART_IRQHandler+0x4ea>
 8008dee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008df2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008df6:	2b00      	cmp	r3, #0
 8008df8:	d003      	beq.n	8008e02 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008dfa:	6878      	ldr	r0, [r7, #4]
 8008dfc:	f000 f959 	bl	80090b2 <UART_Transmit_IT>
    return;
 8008e00:	e014      	b.n	8008e2c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008e02:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008e06:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e0a:	2b00      	cmp	r3, #0
 8008e0c:	d00e      	beq.n	8008e2c <HAL_UART_IRQHandler+0x514>
 8008e0e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008e12:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008e16:	2b00      	cmp	r3, #0
 8008e18:	d008      	beq.n	8008e2c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008e1a:	6878      	ldr	r0, [r7, #4]
 8008e1c:	f000 f999 	bl	8009152 <UART_EndTransmit_IT>
    return;
 8008e20:	e004      	b.n	8008e2c <HAL_UART_IRQHandler+0x514>
    return;
 8008e22:	bf00      	nop
 8008e24:	e002      	b.n	8008e2c <HAL_UART_IRQHandler+0x514>
      return;
 8008e26:	bf00      	nop
 8008e28:	e000      	b.n	8008e2c <HAL_UART_IRQHandler+0x514>
      return;
 8008e2a:	bf00      	nop
  }
}
 8008e2c:	37e8      	adds	r7, #232	; 0xe8
 8008e2e:	46bd      	mov	sp, r7
 8008e30:	bd80      	pop	{r7, pc}
 8008e32:	bf00      	nop

08008e34 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008e34:	b480      	push	{r7}
 8008e36:	b083      	sub	sp, #12
 8008e38:	af00      	add	r7, sp, #0
 8008e3a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008e3c:	bf00      	nop
 8008e3e:	370c      	adds	r7, #12
 8008e40:	46bd      	mov	sp, r7
 8008e42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e46:	4770      	bx	lr

08008e48 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008e48:	b480      	push	{r7}
 8008e4a:	b083      	sub	sp, #12
 8008e4c:	af00      	add	r7, sp, #0
 8008e4e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008e50:	bf00      	nop
 8008e52:	370c      	adds	r7, #12
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr

08008e5c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008e5c:	b480      	push	{r7}
 8008e5e:	b083      	sub	sp, #12
 8008e60:	af00      	add	r7, sp, #0
 8008e62:	6078      	str	r0, [r7, #4]
 8008e64:	460b      	mov	r3, r1
 8008e66:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008e68:	bf00      	nop
 8008e6a:	370c      	adds	r7, #12
 8008e6c:	46bd      	mov	sp, r7
 8008e6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e72:	4770      	bx	lr

08008e74 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008e74:	b580      	push	{r7, lr}
 8008e76:	b090      	sub	sp, #64	; 0x40
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	60f8      	str	r0, [r7, #12]
 8008e7c:	60b9      	str	r1, [r7, #8]
 8008e7e:	603b      	str	r3, [r7, #0]
 8008e80:	4613      	mov	r3, r2
 8008e82:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e84:	e050      	b.n	8008f28 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008e86:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e88:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e8c:	d04c      	beq.n	8008f28 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008e8e:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008e90:	2b00      	cmp	r3, #0
 8008e92:	d007      	beq.n	8008ea4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008e94:	f7fd fa4e 	bl	8006334 <HAL_GetTick>
 8008e98:	4602      	mov	r2, r0
 8008e9a:	683b      	ldr	r3, [r7, #0]
 8008e9c:	1ad3      	subs	r3, r2, r3
 8008e9e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008ea0:	429a      	cmp	r2, r3
 8008ea2:	d241      	bcs.n	8008f28 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	681b      	ldr	r3, [r3, #0]
 8008ea8:	330c      	adds	r3, #12
 8008eaa:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008eac:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008eae:	e853 3f00 	ldrex	r3, [r3]
 8008eb2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008eb6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008eba:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ebc:	68fb      	ldr	r3, [r7, #12]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	330c      	adds	r3, #12
 8008ec2:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008ec4:	637a      	str	r2, [r7, #52]	; 0x34
 8008ec6:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ec8:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008eca:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008ecc:	e841 2300 	strex	r3, r2, [r1]
 8008ed0:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008ed2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ed4:	2b00      	cmp	r3, #0
 8008ed6:	d1e5      	bne.n	8008ea4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008ed8:	68fb      	ldr	r3, [r7, #12]
 8008eda:	681b      	ldr	r3, [r3, #0]
 8008edc:	3314      	adds	r3, #20
 8008ede:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ee0:	697b      	ldr	r3, [r7, #20]
 8008ee2:	e853 3f00 	ldrex	r3, [r3]
 8008ee6:	613b      	str	r3, [r7, #16]
   return(result);
 8008ee8:	693b      	ldr	r3, [r7, #16]
 8008eea:	f023 0301 	bic.w	r3, r3, #1
 8008eee:	63bb      	str	r3, [r7, #56]	; 0x38
 8008ef0:	68fb      	ldr	r3, [r7, #12]
 8008ef2:	681b      	ldr	r3, [r3, #0]
 8008ef4:	3314      	adds	r3, #20
 8008ef6:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008ef8:	623a      	str	r2, [r7, #32]
 8008efa:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008efc:	69f9      	ldr	r1, [r7, #28]
 8008efe:	6a3a      	ldr	r2, [r7, #32]
 8008f00:	e841 2300 	strex	r3, r2, [r1]
 8008f04:	61bb      	str	r3, [r7, #24]
   return(result);
 8008f06:	69bb      	ldr	r3, [r7, #24]
 8008f08:	2b00      	cmp	r3, #0
 8008f0a:	d1e5      	bne.n	8008ed8 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008f0c:	68fb      	ldr	r3, [r7, #12]
 8008f0e:	2220      	movs	r2, #32
 8008f10:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008f14:	68fb      	ldr	r3, [r7, #12]
 8008f16:	2220      	movs	r2, #32
 8008f18:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008f1c:	68fb      	ldr	r3, [r7, #12]
 8008f1e:	2200      	movs	r2, #0
 8008f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008f24:	2303      	movs	r3, #3
 8008f26:	e00f      	b.n	8008f48 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008f28:	68fb      	ldr	r3, [r7, #12]
 8008f2a:	681b      	ldr	r3, [r3, #0]
 8008f2c:	681a      	ldr	r2, [r3, #0]
 8008f2e:	68bb      	ldr	r3, [r7, #8]
 8008f30:	4013      	ands	r3, r2
 8008f32:	68ba      	ldr	r2, [r7, #8]
 8008f34:	429a      	cmp	r2, r3
 8008f36:	bf0c      	ite	eq
 8008f38:	2301      	moveq	r3, #1
 8008f3a:	2300      	movne	r3, #0
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	461a      	mov	r2, r3
 8008f40:	79fb      	ldrb	r3, [r7, #7]
 8008f42:	429a      	cmp	r2, r3
 8008f44:	d09f      	beq.n	8008e86 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008f46:	2300      	movs	r3, #0
}
 8008f48:	4618      	mov	r0, r3
 8008f4a:	3740      	adds	r7, #64	; 0x40
 8008f4c:	46bd      	mov	sp, r7
 8008f4e:	bd80      	pop	{r7, pc}

08008f50 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008f50:	b480      	push	{r7}
 8008f52:	b085      	sub	sp, #20
 8008f54:	af00      	add	r7, sp, #0
 8008f56:	60f8      	str	r0, [r7, #12]
 8008f58:	60b9      	str	r1, [r7, #8]
 8008f5a:	4613      	mov	r3, r2
 8008f5c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008f5e:	68fb      	ldr	r3, [r7, #12]
 8008f60:	68ba      	ldr	r2, [r7, #8]
 8008f62:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008f64:	68fb      	ldr	r3, [r7, #12]
 8008f66:	88fa      	ldrh	r2, [r7, #6]
 8008f68:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008f6a:	68fb      	ldr	r3, [r7, #12]
 8008f6c:	88fa      	ldrh	r2, [r7, #6]
 8008f6e:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008f70:	68fb      	ldr	r3, [r7, #12]
 8008f72:	2200      	movs	r2, #0
 8008f74:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008f76:	68fb      	ldr	r3, [r7, #12]
 8008f78:	2222      	movs	r2, #34	; 0x22
 8008f7a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008f7e:	68fb      	ldr	r3, [r7, #12]
 8008f80:	2200      	movs	r2, #0
 8008f82:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008f86:	68fb      	ldr	r3, [r7, #12]
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	68da      	ldr	r2, [r3, #12]
 8008f8c:	68fb      	ldr	r3, [r7, #12]
 8008f8e:	681b      	ldr	r3, [r3, #0]
 8008f90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008f94:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008f96:	68fb      	ldr	r3, [r7, #12]
 8008f98:	681b      	ldr	r3, [r3, #0]
 8008f9a:	695a      	ldr	r2, [r3, #20]
 8008f9c:	68fb      	ldr	r3, [r7, #12]
 8008f9e:	681b      	ldr	r3, [r3, #0]
 8008fa0:	f042 0201 	orr.w	r2, r2, #1
 8008fa4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008fa6:	68fb      	ldr	r3, [r7, #12]
 8008fa8:	681b      	ldr	r3, [r3, #0]
 8008faa:	68da      	ldr	r2, [r3, #12]
 8008fac:	68fb      	ldr	r3, [r7, #12]
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	f042 0220 	orr.w	r2, r2, #32
 8008fb4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008fb6:	2300      	movs	r3, #0
}
 8008fb8:	4618      	mov	r0, r3
 8008fba:	3714      	adds	r7, #20
 8008fbc:	46bd      	mov	sp, r7
 8008fbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc2:	4770      	bx	lr

08008fc4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008fc4:	b480      	push	{r7}
 8008fc6:	b095      	sub	sp, #84	; 0x54
 8008fc8:	af00      	add	r7, sp, #0
 8008fca:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008fcc:	687b      	ldr	r3, [r7, #4]
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	330c      	adds	r3, #12
 8008fd2:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008fd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008fd6:	e853 3f00 	ldrex	r3, [r3]
 8008fda:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008fdc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008fde:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008fe2:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fe4:	687b      	ldr	r3, [r7, #4]
 8008fe6:	681b      	ldr	r3, [r3, #0]
 8008fe8:	330c      	adds	r3, #12
 8008fea:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008fec:	643a      	str	r2, [r7, #64]	; 0x40
 8008fee:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008ff0:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008ff2:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008ff4:	e841 2300 	strex	r3, r2, [r1]
 8008ff8:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008ffa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008ffc:	2b00      	cmp	r3, #0
 8008ffe:	d1e5      	bne.n	8008fcc <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8009000:	687b      	ldr	r3, [r7, #4]
 8009002:	681b      	ldr	r3, [r3, #0]
 8009004:	3314      	adds	r3, #20
 8009006:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009008:	6a3b      	ldr	r3, [r7, #32]
 800900a:	e853 3f00 	ldrex	r3, [r3]
 800900e:	61fb      	str	r3, [r7, #28]
   return(result);
 8009010:	69fb      	ldr	r3, [r7, #28]
 8009012:	f023 0301 	bic.w	r3, r3, #1
 8009016:	64bb      	str	r3, [r7, #72]	; 0x48
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	3314      	adds	r3, #20
 800901e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8009020:	62fa      	str	r2, [r7, #44]	; 0x2c
 8009022:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009024:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8009026:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009028:	e841 2300 	strex	r3, r2, [r1]
 800902c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 800902e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009030:	2b00      	cmp	r3, #0
 8009032:	d1e5      	bne.n	8009000 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009038:	2b01      	cmp	r3, #1
 800903a:	d119      	bne.n	8009070 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800903c:	687b      	ldr	r3, [r7, #4]
 800903e:	681b      	ldr	r3, [r3, #0]
 8009040:	330c      	adds	r3, #12
 8009042:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009044:	68fb      	ldr	r3, [r7, #12]
 8009046:	e853 3f00 	ldrex	r3, [r3]
 800904a:	60bb      	str	r3, [r7, #8]
   return(result);
 800904c:	68bb      	ldr	r3, [r7, #8]
 800904e:	f023 0310 	bic.w	r3, r3, #16
 8009052:	647b      	str	r3, [r7, #68]	; 0x44
 8009054:	687b      	ldr	r3, [r7, #4]
 8009056:	681b      	ldr	r3, [r3, #0]
 8009058:	330c      	adds	r3, #12
 800905a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 800905c:	61ba      	str	r2, [r7, #24]
 800905e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8009060:	6979      	ldr	r1, [r7, #20]
 8009062:	69ba      	ldr	r2, [r7, #24]
 8009064:	e841 2300 	strex	r3, r2, [r1]
 8009068:	613b      	str	r3, [r7, #16]
   return(result);
 800906a:	693b      	ldr	r3, [r7, #16]
 800906c:	2b00      	cmp	r3, #0
 800906e:	d1e5      	bne.n	800903c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	2220      	movs	r2, #32
 8009074:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009078:	687b      	ldr	r3, [r7, #4]
 800907a:	2200      	movs	r2, #0
 800907c:	631a      	str	r2, [r3, #48]	; 0x30
}
 800907e:	bf00      	nop
 8009080:	3754      	adds	r7, #84	; 0x54
 8009082:	46bd      	mov	sp, r7
 8009084:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009088:	4770      	bx	lr

0800908a <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 800908a:	b580      	push	{r7, lr}
 800908c:	b084      	sub	sp, #16
 800908e:	af00      	add	r7, sp, #0
 8009090:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8009092:	687b      	ldr	r3, [r7, #4]
 8009094:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8009096:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8009098:	68fb      	ldr	r3, [r7, #12]
 800909a:	2200      	movs	r2, #0
 800909c:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 800909e:	68fb      	ldr	r3, [r7, #12]
 80090a0:	2200      	movs	r2, #0
 80090a2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80090a4:	68f8      	ldr	r0, [r7, #12]
 80090a6:	f7ff fecf 	bl	8008e48 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80090aa:	bf00      	nop
 80090ac:	3710      	adds	r7, #16
 80090ae:	46bd      	mov	sp, r7
 80090b0:	bd80      	pop	{r7, pc}

080090b2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80090b2:	b480      	push	{r7}
 80090b4:	b085      	sub	sp, #20
 80090b6:	af00      	add	r7, sp, #0
 80090b8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80090ba:	687b      	ldr	r3, [r7, #4]
 80090bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80090c0:	b2db      	uxtb	r3, r3
 80090c2:	2b21      	cmp	r3, #33	; 0x21
 80090c4:	d13e      	bne.n	8009144 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090c6:	687b      	ldr	r3, [r7, #4]
 80090c8:	689b      	ldr	r3, [r3, #8]
 80090ca:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090ce:	d114      	bne.n	80090fa <UART_Transmit_IT+0x48>
 80090d0:	687b      	ldr	r3, [r7, #4]
 80090d2:	691b      	ldr	r3, [r3, #16]
 80090d4:	2b00      	cmp	r3, #0
 80090d6:	d110      	bne.n	80090fa <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	6a1b      	ldr	r3, [r3, #32]
 80090dc:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 80090de:	68fb      	ldr	r3, [r7, #12]
 80090e0:	881b      	ldrh	r3, [r3, #0]
 80090e2:	461a      	mov	r2, r3
 80090e4:	687b      	ldr	r3, [r7, #4]
 80090e6:	681b      	ldr	r3, [r3, #0]
 80090e8:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80090ec:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a1b      	ldr	r3, [r3, #32]
 80090f2:	1c9a      	adds	r2, r3, #2
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	621a      	str	r2, [r3, #32]
 80090f8:	e008      	b.n	800910c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80090fa:	687b      	ldr	r3, [r7, #4]
 80090fc:	6a1b      	ldr	r3, [r3, #32]
 80090fe:	1c59      	adds	r1, r3, #1
 8009100:	687a      	ldr	r2, [r7, #4]
 8009102:	6211      	str	r1, [r2, #32]
 8009104:	781a      	ldrb	r2, [r3, #0]
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	681b      	ldr	r3, [r3, #0]
 800910a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009110:	b29b      	uxth	r3, r3
 8009112:	3b01      	subs	r3, #1
 8009114:	b29b      	uxth	r3, r3
 8009116:	687a      	ldr	r2, [r7, #4]
 8009118:	4619      	mov	r1, r3
 800911a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800911c:	2b00      	cmp	r3, #0
 800911e:	d10f      	bne.n	8009140 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009120:	687b      	ldr	r3, [r7, #4]
 8009122:	681b      	ldr	r3, [r3, #0]
 8009124:	68da      	ldr	r2, [r3, #12]
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	681b      	ldr	r3, [r3, #0]
 800912a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800912e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009130:	687b      	ldr	r3, [r7, #4]
 8009132:	681b      	ldr	r3, [r3, #0]
 8009134:	68da      	ldr	r2, [r3, #12]
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800913e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009140:	2300      	movs	r3, #0
 8009142:	e000      	b.n	8009146 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009144:	2302      	movs	r3, #2
  }
}
 8009146:	4618      	mov	r0, r3
 8009148:	3714      	adds	r7, #20
 800914a:	46bd      	mov	sp, r7
 800914c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009150:	4770      	bx	lr

08009152 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009152:	b580      	push	{r7, lr}
 8009154:	b082      	sub	sp, #8
 8009156:	af00      	add	r7, sp, #0
 8009158:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800915a:	687b      	ldr	r3, [r7, #4]
 800915c:	681b      	ldr	r3, [r3, #0]
 800915e:	68da      	ldr	r2, [r3, #12]
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	681b      	ldr	r3, [r3, #0]
 8009164:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8009168:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800916a:	687b      	ldr	r3, [r7, #4]
 800916c:	2220      	movs	r2, #32
 800916e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8009172:	6878      	ldr	r0, [r7, #4]
 8009174:	f7ff fe5e 	bl	8008e34 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8009178:	2300      	movs	r3, #0
}
 800917a:	4618      	mov	r0, r3
 800917c:	3708      	adds	r7, #8
 800917e:	46bd      	mov	sp, r7
 8009180:	bd80      	pop	{r7, pc}

08009182 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8009182:	b580      	push	{r7, lr}
 8009184:	b08c      	sub	sp, #48	; 0x30
 8009186:	af00      	add	r7, sp, #0
 8009188:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8009190:	b2db      	uxtb	r3, r3
 8009192:	2b22      	cmp	r3, #34	; 0x22
 8009194:	f040 80ab 	bne.w	80092ee <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009198:	687b      	ldr	r3, [r7, #4]
 800919a:	689b      	ldr	r3, [r3, #8]
 800919c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091a0:	d117      	bne.n	80091d2 <UART_Receive_IT+0x50>
 80091a2:	687b      	ldr	r3, [r7, #4]
 80091a4:	691b      	ldr	r3, [r3, #16]
 80091a6:	2b00      	cmp	r3, #0
 80091a8:	d113      	bne.n	80091d2 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80091aa:	2300      	movs	r3, #0
 80091ac:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091b2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	681b      	ldr	r3, [r3, #0]
 80091b8:	685b      	ldr	r3, [r3, #4]
 80091ba:	b29b      	uxth	r3, r3
 80091bc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80091c0:	b29a      	uxth	r2, r3
 80091c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80091c4:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80091c6:	687b      	ldr	r3, [r7, #4]
 80091c8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091ca:	1c9a      	adds	r2, r3, #2
 80091cc:	687b      	ldr	r3, [r7, #4]
 80091ce:	629a      	str	r2, [r3, #40]	; 0x28
 80091d0:	e026      	b.n	8009220 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80091d6:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 80091d8:	2300      	movs	r3, #0
 80091da:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 80091dc:	687b      	ldr	r3, [r7, #4]
 80091de:	689b      	ldr	r3, [r3, #8]
 80091e0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80091e4:	d007      	beq.n	80091f6 <UART_Receive_IT+0x74>
 80091e6:	687b      	ldr	r3, [r7, #4]
 80091e8:	689b      	ldr	r3, [r3, #8]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d10a      	bne.n	8009204 <UART_Receive_IT+0x82>
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	691b      	ldr	r3, [r3, #16]
 80091f2:	2b00      	cmp	r3, #0
 80091f4:	d106      	bne.n	8009204 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80091f6:	687b      	ldr	r3, [r7, #4]
 80091f8:	681b      	ldr	r3, [r3, #0]
 80091fa:	685b      	ldr	r3, [r3, #4]
 80091fc:	b2da      	uxtb	r2, r3
 80091fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009200:	701a      	strb	r2, [r3, #0]
 8009202:	e008      	b.n	8009216 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009204:	687b      	ldr	r3, [r7, #4]
 8009206:	681b      	ldr	r3, [r3, #0]
 8009208:	685b      	ldr	r3, [r3, #4]
 800920a:	b2db      	uxtb	r3, r3
 800920c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009210:	b2da      	uxtb	r2, r3
 8009212:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009214:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009216:	687b      	ldr	r3, [r7, #4]
 8009218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800921a:	1c5a      	adds	r2, r3, #1
 800921c:	687b      	ldr	r3, [r7, #4]
 800921e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009220:	687b      	ldr	r3, [r7, #4]
 8009222:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009224:	b29b      	uxth	r3, r3
 8009226:	3b01      	subs	r3, #1
 8009228:	b29b      	uxth	r3, r3
 800922a:	687a      	ldr	r2, [r7, #4]
 800922c:	4619      	mov	r1, r3
 800922e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009230:	2b00      	cmp	r3, #0
 8009232:	d15a      	bne.n	80092ea <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009234:	687b      	ldr	r3, [r7, #4]
 8009236:	681b      	ldr	r3, [r3, #0]
 8009238:	68da      	ldr	r2, [r3, #12]
 800923a:	687b      	ldr	r3, [r7, #4]
 800923c:	681b      	ldr	r3, [r3, #0]
 800923e:	f022 0220 	bic.w	r2, r2, #32
 8009242:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009244:	687b      	ldr	r3, [r7, #4]
 8009246:	681b      	ldr	r3, [r3, #0]
 8009248:	68da      	ldr	r2, [r3, #12]
 800924a:	687b      	ldr	r3, [r7, #4]
 800924c:	681b      	ldr	r3, [r3, #0]
 800924e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009252:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009254:	687b      	ldr	r3, [r7, #4]
 8009256:	681b      	ldr	r3, [r3, #0]
 8009258:	695a      	ldr	r2, [r3, #20]
 800925a:	687b      	ldr	r3, [r7, #4]
 800925c:	681b      	ldr	r3, [r3, #0]
 800925e:	f022 0201 	bic.w	r2, r2, #1
 8009262:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8009264:	687b      	ldr	r3, [r7, #4]
 8009266:	2220      	movs	r2, #32
 8009268:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800926c:	687b      	ldr	r3, [r7, #4]
 800926e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8009270:	2b01      	cmp	r3, #1
 8009272:	d135      	bne.n	80092e0 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8009274:	687b      	ldr	r3, [r7, #4]
 8009276:	2200      	movs	r2, #0
 8009278:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	681b      	ldr	r3, [r3, #0]
 800927e:	330c      	adds	r3, #12
 8009280:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8009282:	697b      	ldr	r3, [r7, #20]
 8009284:	e853 3f00 	ldrex	r3, [r3]
 8009288:	613b      	str	r3, [r7, #16]
   return(result);
 800928a:	693b      	ldr	r3, [r7, #16]
 800928c:	f023 0310 	bic.w	r3, r3, #16
 8009290:	627b      	str	r3, [r7, #36]	; 0x24
 8009292:	687b      	ldr	r3, [r7, #4]
 8009294:	681b      	ldr	r3, [r3, #0]
 8009296:	330c      	adds	r3, #12
 8009298:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800929a:	623a      	str	r2, [r7, #32]
 800929c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800929e:	69f9      	ldr	r1, [r7, #28]
 80092a0:	6a3a      	ldr	r2, [r7, #32]
 80092a2:	e841 2300 	strex	r3, r2, [r1]
 80092a6:	61bb      	str	r3, [r7, #24]
   return(result);
 80092a8:	69bb      	ldr	r3, [r7, #24]
 80092aa:	2b00      	cmp	r3, #0
 80092ac:	d1e5      	bne.n	800927a <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80092ae:	687b      	ldr	r3, [r7, #4]
 80092b0:	681b      	ldr	r3, [r3, #0]
 80092b2:	681b      	ldr	r3, [r3, #0]
 80092b4:	f003 0310 	and.w	r3, r3, #16
 80092b8:	2b10      	cmp	r3, #16
 80092ba:	d10a      	bne.n	80092d2 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80092bc:	2300      	movs	r3, #0
 80092be:	60fb      	str	r3, [r7, #12]
 80092c0:	687b      	ldr	r3, [r7, #4]
 80092c2:	681b      	ldr	r3, [r3, #0]
 80092c4:	681b      	ldr	r3, [r3, #0]
 80092c6:	60fb      	str	r3, [r7, #12]
 80092c8:	687b      	ldr	r3, [r7, #4]
 80092ca:	681b      	ldr	r3, [r3, #0]
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	60fb      	str	r3, [r7, #12]
 80092d0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80092d2:	687b      	ldr	r3, [r7, #4]
 80092d4:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80092d6:	4619      	mov	r1, r3
 80092d8:	6878      	ldr	r0, [r7, #4]
 80092da:	f7ff fdbf 	bl	8008e5c <HAL_UARTEx_RxEventCallback>
 80092de:	e002      	b.n	80092e6 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 80092e0:	6878      	ldr	r0, [r7, #4]
 80092e2:	f7fb fbff 	bl	8004ae4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80092e6:	2300      	movs	r3, #0
 80092e8:	e002      	b.n	80092f0 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 80092ea:	2300      	movs	r3, #0
 80092ec:	e000      	b.n	80092f0 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 80092ee:	2302      	movs	r3, #2
  }
}
 80092f0:	4618      	mov	r0, r3
 80092f2:	3730      	adds	r7, #48	; 0x30
 80092f4:	46bd      	mov	sp, r7
 80092f6:	bd80      	pop	{r7, pc}

080092f8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80092f8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80092fc:	b0c0      	sub	sp, #256	; 0x100
 80092fe:	af00      	add	r7, sp, #0
 8009300:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009304:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009308:	681b      	ldr	r3, [r3, #0]
 800930a:	691b      	ldr	r3, [r3, #16]
 800930c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009310:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009314:	68d9      	ldr	r1, [r3, #12]
 8009316:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800931a:	681a      	ldr	r2, [r3, #0]
 800931c:	ea40 0301 	orr.w	r3, r0, r1
 8009320:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009322:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009326:	689a      	ldr	r2, [r3, #8]
 8009328:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800932c:	691b      	ldr	r3, [r3, #16]
 800932e:	431a      	orrs	r2, r3
 8009330:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009334:	695b      	ldr	r3, [r3, #20]
 8009336:	431a      	orrs	r2, r3
 8009338:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800933c:	69db      	ldr	r3, [r3, #28]
 800933e:	4313      	orrs	r3, r2
 8009340:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009348:	681b      	ldr	r3, [r3, #0]
 800934a:	68db      	ldr	r3, [r3, #12]
 800934c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009350:	f021 010c 	bic.w	r1, r1, #12
 8009354:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800935e:	430b      	orrs	r3, r1
 8009360:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8009362:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009366:	681b      	ldr	r3, [r3, #0]
 8009368:	695b      	ldr	r3, [r3, #20]
 800936a:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800936e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009372:	6999      	ldr	r1, [r3, #24]
 8009374:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009378:	681a      	ldr	r2, [r3, #0]
 800937a:	ea40 0301 	orr.w	r3, r0, r1
 800937e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8009380:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009384:	681a      	ldr	r2, [r3, #0]
 8009386:	4b8f      	ldr	r3, [pc, #572]	; (80095c4 <UART_SetConfig+0x2cc>)
 8009388:	429a      	cmp	r2, r3
 800938a:	d005      	beq.n	8009398 <UART_SetConfig+0xa0>
 800938c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009390:	681a      	ldr	r2, [r3, #0]
 8009392:	4b8d      	ldr	r3, [pc, #564]	; (80095c8 <UART_SetConfig+0x2d0>)
 8009394:	429a      	cmp	r2, r3
 8009396:	d104      	bne.n	80093a2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8009398:	f7fe faca 	bl	8007930 <HAL_RCC_GetPCLK2Freq>
 800939c:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80093a0:	e003      	b.n	80093aa <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80093a2:	f7fe fab1 	bl	8007908 <HAL_RCC_GetPCLK1Freq>
 80093a6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80093aa:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ae:	69db      	ldr	r3, [r3, #28]
 80093b0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80093b4:	f040 810c 	bne.w	80095d0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80093b8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80093bc:	2200      	movs	r2, #0
 80093be:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 80093c2:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 80093c6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 80093ca:	4622      	mov	r2, r4
 80093cc:	462b      	mov	r3, r5
 80093ce:	1891      	adds	r1, r2, r2
 80093d0:	65b9      	str	r1, [r7, #88]	; 0x58
 80093d2:	415b      	adcs	r3, r3
 80093d4:	65fb      	str	r3, [r7, #92]	; 0x5c
 80093d6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80093da:	4621      	mov	r1, r4
 80093dc:	eb12 0801 	adds.w	r8, r2, r1
 80093e0:	4629      	mov	r1, r5
 80093e2:	eb43 0901 	adc.w	r9, r3, r1
 80093e6:	f04f 0200 	mov.w	r2, #0
 80093ea:	f04f 0300 	mov.w	r3, #0
 80093ee:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80093f2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80093f6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80093fa:	4690      	mov	r8, r2
 80093fc:	4699      	mov	r9, r3
 80093fe:	4623      	mov	r3, r4
 8009400:	eb18 0303 	adds.w	r3, r8, r3
 8009404:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009408:	462b      	mov	r3, r5
 800940a:	eb49 0303 	adc.w	r3, r9, r3
 800940e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009412:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009416:	685b      	ldr	r3, [r3, #4]
 8009418:	2200      	movs	r2, #0
 800941a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800941e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009422:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009426:	460b      	mov	r3, r1
 8009428:	18db      	adds	r3, r3, r3
 800942a:	653b      	str	r3, [r7, #80]	; 0x50
 800942c:	4613      	mov	r3, r2
 800942e:	eb42 0303 	adc.w	r3, r2, r3
 8009432:	657b      	str	r3, [r7, #84]	; 0x54
 8009434:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009438:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800943c:	f7f7 fc24 	bl	8000c88 <__aeabi_uldivmod>
 8009440:	4602      	mov	r2, r0
 8009442:	460b      	mov	r3, r1
 8009444:	4b61      	ldr	r3, [pc, #388]	; (80095cc <UART_SetConfig+0x2d4>)
 8009446:	fba3 2302 	umull	r2, r3, r3, r2
 800944a:	095b      	lsrs	r3, r3, #5
 800944c:	011c      	lsls	r4, r3, #4
 800944e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009452:	2200      	movs	r2, #0
 8009454:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009458:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800945c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 8009460:	4642      	mov	r2, r8
 8009462:	464b      	mov	r3, r9
 8009464:	1891      	adds	r1, r2, r2
 8009466:	64b9      	str	r1, [r7, #72]	; 0x48
 8009468:	415b      	adcs	r3, r3
 800946a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800946c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8009470:	4641      	mov	r1, r8
 8009472:	eb12 0a01 	adds.w	sl, r2, r1
 8009476:	4649      	mov	r1, r9
 8009478:	eb43 0b01 	adc.w	fp, r3, r1
 800947c:	f04f 0200 	mov.w	r2, #0
 8009480:	f04f 0300 	mov.w	r3, #0
 8009484:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8009488:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800948c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8009490:	4692      	mov	sl, r2
 8009492:	469b      	mov	fp, r3
 8009494:	4643      	mov	r3, r8
 8009496:	eb1a 0303 	adds.w	r3, sl, r3
 800949a:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 800949e:	464b      	mov	r3, r9
 80094a0:	eb4b 0303 	adc.w	r3, fp, r3
 80094a4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80094a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094ac:	685b      	ldr	r3, [r3, #4]
 80094ae:	2200      	movs	r2, #0
 80094b0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80094b4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80094b8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80094bc:	460b      	mov	r3, r1
 80094be:	18db      	adds	r3, r3, r3
 80094c0:	643b      	str	r3, [r7, #64]	; 0x40
 80094c2:	4613      	mov	r3, r2
 80094c4:	eb42 0303 	adc.w	r3, r2, r3
 80094c8:	647b      	str	r3, [r7, #68]	; 0x44
 80094ca:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80094ce:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80094d2:	f7f7 fbd9 	bl	8000c88 <__aeabi_uldivmod>
 80094d6:	4602      	mov	r2, r0
 80094d8:	460b      	mov	r3, r1
 80094da:	4611      	mov	r1, r2
 80094dc:	4b3b      	ldr	r3, [pc, #236]	; (80095cc <UART_SetConfig+0x2d4>)
 80094de:	fba3 2301 	umull	r2, r3, r3, r1
 80094e2:	095b      	lsrs	r3, r3, #5
 80094e4:	2264      	movs	r2, #100	; 0x64
 80094e6:	fb02 f303 	mul.w	r3, r2, r3
 80094ea:	1acb      	subs	r3, r1, r3
 80094ec:	00db      	lsls	r3, r3, #3
 80094ee:	f103 0232 	add.w	r2, r3, #50	; 0x32
 80094f2:	4b36      	ldr	r3, [pc, #216]	; (80095cc <UART_SetConfig+0x2d4>)
 80094f4:	fba3 2302 	umull	r2, r3, r3, r2
 80094f8:	095b      	lsrs	r3, r3, #5
 80094fa:	005b      	lsls	r3, r3, #1
 80094fc:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009500:	441c      	add	r4, r3
 8009502:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009506:	2200      	movs	r2, #0
 8009508:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800950c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009510:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009514:	4642      	mov	r2, r8
 8009516:	464b      	mov	r3, r9
 8009518:	1891      	adds	r1, r2, r2
 800951a:	63b9      	str	r1, [r7, #56]	; 0x38
 800951c:	415b      	adcs	r3, r3
 800951e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009520:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009524:	4641      	mov	r1, r8
 8009526:	1851      	adds	r1, r2, r1
 8009528:	6339      	str	r1, [r7, #48]	; 0x30
 800952a:	4649      	mov	r1, r9
 800952c:	414b      	adcs	r3, r1
 800952e:	637b      	str	r3, [r7, #52]	; 0x34
 8009530:	f04f 0200 	mov.w	r2, #0
 8009534:	f04f 0300 	mov.w	r3, #0
 8009538:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800953c:	4659      	mov	r1, fp
 800953e:	00cb      	lsls	r3, r1, #3
 8009540:	4651      	mov	r1, sl
 8009542:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009546:	4651      	mov	r1, sl
 8009548:	00ca      	lsls	r2, r1, #3
 800954a:	4610      	mov	r0, r2
 800954c:	4619      	mov	r1, r3
 800954e:	4603      	mov	r3, r0
 8009550:	4642      	mov	r2, r8
 8009552:	189b      	adds	r3, r3, r2
 8009554:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009558:	464b      	mov	r3, r9
 800955a:	460a      	mov	r2, r1
 800955c:	eb42 0303 	adc.w	r3, r2, r3
 8009560:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8009564:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009568:	685b      	ldr	r3, [r3, #4]
 800956a:	2200      	movs	r2, #0
 800956c:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 8009570:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 8009574:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 8009578:	460b      	mov	r3, r1
 800957a:	18db      	adds	r3, r3, r3
 800957c:	62bb      	str	r3, [r7, #40]	; 0x28
 800957e:	4613      	mov	r3, r2
 8009580:	eb42 0303 	adc.w	r3, r2, r3
 8009584:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009586:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 800958a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 800958e:	f7f7 fb7b 	bl	8000c88 <__aeabi_uldivmod>
 8009592:	4602      	mov	r2, r0
 8009594:	460b      	mov	r3, r1
 8009596:	4b0d      	ldr	r3, [pc, #52]	; (80095cc <UART_SetConfig+0x2d4>)
 8009598:	fba3 1302 	umull	r1, r3, r3, r2
 800959c:	095b      	lsrs	r3, r3, #5
 800959e:	2164      	movs	r1, #100	; 0x64
 80095a0:	fb01 f303 	mul.w	r3, r1, r3
 80095a4:	1ad3      	subs	r3, r2, r3
 80095a6:	00db      	lsls	r3, r3, #3
 80095a8:	3332      	adds	r3, #50	; 0x32
 80095aa:	4a08      	ldr	r2, [pc, #32]	; (80095cc <UART_SetConfig+0x2d4>)
 80095ac:	fba2 2303 	umull	r2, r3, r2, r3
 80095b0:	095b      	lsrs	r3, r3, #5
 80095b2:	f003 0207 	and.w	r2, r3, #7
 80095b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80095ba:	681b      	ldr	r3, [r3, #0]
 80095bc:	4422      	add	r2, r4
 80095be:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80095c0:	e105      	b.n	80097ce <UART_SetConfig+0x4d6>
 80095c2:	bf00      	nop
 80095c4:	40011000 	.word	0x40011000
 80095c8:	40011400 	.word	0x40011400
 80095cc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80095d0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095d4:	2200      	movs	r2, #0
 80095d6:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 80095da:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 80095de:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 80095e2:	4642      	mov	r2, r8
 80095e4:	464b      	mov	r3, r9
 80095e6:	1891      	adds	r1, r2, r2
 80095e8:	6239      	str	r1, [r7, #32]
 80095ea:	415b      	adcs	r3, r3
 80095ec:	627b      	str	r3, [r7, #36]	; 0x24
 80095ee:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80095f2:	4641      	mov	r1, r8
 80095f4:	1854      	adds	r4, r2, r1
 80095f6:	4649      	mov	r1, r9
 80095f8:	eb43 0501 	adc.w	r5, r3, r1
 80095fc:	f04f 0200 	mov.w	r2, #0
 8009600:	f04f 0300 	mov.w	r3, #0
 8009604:	00eb      	lsls	r3, r5, #3
 8009606:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800960a:	00e2      	lsls	r2, r4, #3
 800960c:	4614      	mov	r4, r2
 800960e:	461d      	mov	r5, r3
 8009610:	4643      	mov	r3, r8
 8009612:	18e3      	adds	r3, r4, r3
 8009614:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009618:	464b      	mov	r3, r9
 800961a:	eb45 0303 	adc.w	r3, r5, r3
 800961e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009622:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009626:	685b      	ldr	r3, [r3, #4]
 8009628:	2200      	movs	r2, #0
 800962a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800962e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009632:	f04f 0200 	mov.w	r2, #0
 8009636:	f04f 0300 	mov.w	r3, #0
 800963a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800963e:	4629      	mov	r1, r5
 8009640:	008b      	lsls	r3, r1, #2
 8009642:	4621      	mov	r1, r4
 8009644:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009648:	4621      	mov	r1, r4
 800964a:	008a      	lsls	r2, r1, #2
 800964c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009650:	f7f7 fb1a 	bl	8000c88 <__aeabi_uldivmod>
 8009654:	4602      	mov	r2, r0
 8009656:	460b      	mov	r3, r1
 8009658:	4b60      	ldr	r3, [pc, #384]	; (80097dc <UART_SetConfig+0x4e4>)
 800965a:	fba3 2302 	umull	r2, r3, r3, r2
 800965e:	095b      	lsrs	r3, r3, #5
 8009660:	011c      	lsls	r4, r3, #4
 8009662:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009666:	2200      	movs	r2, #0
 8009668:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 800966c:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 8009670:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 8009674:	4642      	mov	r2, r8
 8009676:	464b      	mov	r3, r9
 8009678:	1891      	adds	r1, r2, r2
 800967a:	61b9      	str	r1, [r7, #24]
 800967c:	415b      	adcs	r3, r3
 800967e:	61fb      	str	r3, [r7, #28]
 8009680:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8009684:	4641      	mov	r1, r8
 8009686:	1851      	adds	r1, r2, r1
 8009688:	6139      	str	r1, [r7, #16]
 800968a:	4649      	mov	r1, r9
 800968c:	414b      	adcs	r3, r1
 800968e:	617b      	str	r3, [r7, #20]
 8009690:	f04f 0200 	mov.w	r2, #0
 8009694:	f04f 0300 	mov.w	r3, #0
 8009698:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800969c:	4659      	mov	r1, fp
 800969e:	00cb      	lsls	r3, r1, #3
 80096a0:	4651      	mov	r1, sl
 80096a2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80096a6:	4651      	mov	r1, sl
 80096a8:	00ca      	lsls	r2, r1, #3
 80096aa:	4610      	mov	r0, r2
 80096ac:	4619      	mov	r1, r3
 80096ae:	4603      	mov	r3, r0
 80096b0:	4642      	mov	r2, r8
 80096b2:	189b      	adds	r3, r3, r2
 80096b4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80096b8:	464b      	mov	r3, r9
 80096ba:	460a      	mov	r2, r1
 80096bc:	eb42 0303 	adc.w	r3, r2, r3
 80096c0:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80096c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096c8:	685b      	ldr	r3, [r3, #4]
 80096ca:	2200      	movs	r2, #0
 80096cc:	67bb      	str	r3, [r7, #120]	; 0x78
 80096ce:	67fa      	str	r2, [r7, #124]	; 0x7c
 80096d0:	f04f 0200 	mov.w	r2, #0
 80096d4:	f04f 0300 	mov.w	r3, #0
 80096d8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 80096dc:	4649      	mov	r1, r9
 80096de:	008b      	lsls	r3, r1, #2
 80096e0:	4641      	mov	r1, r8
 80096e2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096e6:	4641      	mov	r1, r8
 80096e8:	008a      	lsls	r2, r1, #2
 80096ea:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 80096ee:	f7f7 facb 	bl	8000c88 <__aeabi_uldivmod>
 80096f2:	4602      	mov	r2, r0
 80096f4:	460b      	mov	r3, r1
 80096f6:	4b39      	ldr	r3, [pc, #228]	; (80097dc <UART_SetConfig+0x4e4>)
 80096f8:	fba3 1302 	umull	r1, r3, r3, r2
 80096fc:	095b      	lsrs	r3, r3, #5
 80096fe:	2164      	movs	r1, #100	; 0x64
 8009700:	fb01 f303 	mul.w	r3, r1, r3
 8009704:	1ad3      	subs	r3, r2, r3
 8009706:	011b      	lsls	r3, r3, #4
 8009708:	3332      	adds	r3, #50	; 0x32
 800970a:	4a34      	ldr	r2, [pc, #208]	; (80097dc <UART_SetConfig+0x4e4>)
 800970c:	fba2 2303 	umull	r2, r3, r2, r3
 8009710:	095b      	lsrs	r3, r3, #5
 8009712:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009716:	441c      	add	r4, r3
 8009718:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800971c:	2200      	movs	r2, #0
 800971e:	673b      	str	r3, [r7, #112]	; 0x70
 8009720:	677a      	str	r2, [r7, #116]	; 0x74
 8009722:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009726:	4642      	mov	r2, r8
 8009728:	464b      	mov	r3, r9
 800972a:	1891      	adds	r1, r2, r2
 800972c:	60b9      	str	r1, [r7, #8]
 800972e:	415b      	adcs	r3, r3
 8009730:	60fb      	str	r3, [r7, #12]
 8009732:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009736:	4641      	mov	r1, r8
 8009738:	1851      	adds	r1, r2, r1
 800973a:	6039      	str	r1, [r7, #0]
 800973c:	4649      	mov	r1, r9
 800973e:	414b      	adcs	r3, r1
 8009740:	607b      	str	r3, [r7, #4]
 8009742:	f04f 0200 	mov.w	r2, #0
 8009746:	f04f 0300 	mov.w	r3, #0
 800974a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800974e:	4659      	mov	r1, fp
 8009750:	00cb      	lsls	r3, r1, #3
 8009752:	4651      	mov	r1, sl
 8009754:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009758:	4651      	mov	r1, sl
 800975a:	00ca      	lsls	r2, r1, #3
 800975c:	4610      	mov	r0, r2
 800975e:	4619      	mov	r1, r3
 8009760:	4603      	mov	r3, r0
 8009762:	4642      	mov	r2, r8
 8009764:	189b      	adds	r3, r3, r2
 8009766:	66bb      	str	r3, [r7, #104]	; 0x68
 8009768:	464b      	mov	r3, r9
 800976a:	460a      	mov	r2, r1
 800976c:	eb42 0303 	adc.w	r3, r2, r3
 8009770:	66fb      	str	r3, [r7, #108]	; 0x6c
 8009772:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009776:	685b      	ldr	r3, [r3, #4]
 8009778:	2200      	movs	r2, #0
 800977a:	663b      	str	r3, [r7, #96]	; 0x60
 800977c:	667a      	str	r2, [r7, #100]	; 0x64
 800977e:	f04f 0200 	mov.w	r2, #0
 8009782:	f04f 0300 	mov.w	r3, #0
 8009786:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 800978a:	4649      	mov	r1, r9
 800978c:	008b      	lsls	r3, r1, #2
 800978e:	4641      	mov	r1, r8
 8009790:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009794:	4641      	mov	r1, r8
 8009796:	008a      	lsls	r2, r1, #2
 8009798:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 800979c:	f7f7 fa74 	bl	8000c88 <__aeabi_uldivmod>
 80097a0:	4602      	mov	r2, r0
 80097a2:	460b      	mov	r3, r1
 80097a4:	4b0d      	ldr	r3, [pc, #52]	; (80097dc <UART_SetConfig+0x4e4>)
 80097a6:	fba3 1302 	umull	r1, r3, r3, r2
 80097aa:	095b      	lsrs	r3, r3, #5
 80097ac:	2164      	movs	r1, #100	; 0x64
 80097ae:	fb01 f303 	mul.w	r3, r1, r3
 80097b2:	1ad3      	subs	r3, r2, r3
 80097b4:	011b      	lsls	r3, r3, #4
 80097b6:	3332      	adds	r3, #50	; 0x32
 80097b8:	4a08      	ldr	r2, [pc, #32]	; (80097dc <UART_SetConfig+0x4e4>)
 80097ba:	fba2 2303 	umull	r2, r3, r2, r3
 80097be:	095b      	lsrs	r3, r3, #5
 80097c0:	f003 020f 	and.w	r2, r3, #15
 80097c4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80097c8:	681b      	ldr	r3, [r3, #0]
 80097ca:	4422      	add	r2, r4
 80097cc:	609a      	str	r2, [r3, #8]
}
 80097ce:	bf00      	nop
 80097d0:	f507 7780 	add.w	r7, r7, #256	; 0x100
 80097d4:	46bd      	mov	sp, r7
 80097d6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80097da:	bf00      	nop
 80097dc:	51eb851f 	.word	0x51eb851f

080097e0 <atof>:
 80097e0:	2100      	movs	r1, #0
 80097e2:	f001 badf 	b.w	800ada4 <strtod>
	...

080097e8 <__errno>:
 80097e8:	4b01      	ldr	r3, [pc, #4]	; (80097f0 <__errno+0x8>)
 80097ea:	6818      	ldr	r0, [r3, #0]
 80097ec:	4770      	bx	lr
 80097ee:	bf00      	nop
 80097f0:	2000001c 	.word	0x2000001c

080097f4 <__libc_init_array>:
 80097f4:	b570      	push	{r4, r5, r6, lr}
 80097f6:	4d0d      	ldr	r5, [pc, #52]	; (800982c <__libc_init_array+0x38>)
 80097f8:	4c0d      	ldr	r4, [pc, #52]	; (8009830 <__libc_init_array+0x3c>)
 80097fa:	1b64      	subs	r4, r4, r5
 80097fc:	10a4      	asrs	r4, r4, #2
 80097fe:	2600      	movs	r6, #0
 8009800:	42a6      	cmp	r6, r4
 8009802:	d109      	bne.n	8009818 <__libc_init_array+0x24>
 8009804:	4d0b      	ldr	r5, [pc, #44]	; (8009834 <__libc_init_array+0x40>)
 8009806:	4c0c      	ldr	r4, [pc, #48]	; (8009838 <__libc_init_array+0x44>)
 8009808:	f004 fb38 	bl	800de7c <_init>
 800980c:	1b64      	subs	r4, r4, r5
 800980e:	10a4      	asrs	r4, r4, #2
 8009810:	2600      	movs	r6, #0
 8009812:	42a6      	cmp	r6, r4
 8009814:	d105      	bne.n	8009822 <__libc_init_array+0x2e>
 8009816:	bd70      	pop	{r4, r5, r6, pc}
 8009818:	f855 3b04 	ldr.w	r3, [r5], #4
 800981c:	4798      	blx	r3
 800981e:	3601      	adds	r6, #1
 8009820:	e7ee      	b.n	8009800 <__libc_init_array+0xc>
 8009822:	f855 3b04 	ldr.w	r3, [r5], #4
 8009826:	4798      	blx	r3
 8009828:	3601      	adds	r6, #1
 800982a:	e7f2      	b.n	8009812 <__libc_init_array+0x1e>
 800982c:	0800e540 	.word	0x0800e540
 8009830:	0800e540 	.word	0x0800e540
 8009834:	0800e540 	.word	0x0800e540
 8009838:	0800e544 	.word	0x0800e544

0800983c <memset>:
 800983c:	4402      	add	r2, r0
 800983e:	4603      	mov	r3, r0
 8009840:	4293      	cmp	r3, r2
 8009842:	d100      	bne.n	8009846 <memset+0xa>
 8009844:	4770      	bx	lr
 8009846:	f803 1b01 	strb.w	r1, [r3], #1
 800984a:	e7f9      	b.n	8009840 <memset+0x4>

0800984c <__cvt>:
 800984c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009850:	ec55 4b10 	vmov	r4, r5, d0
 8009854:	2d00      	cmp	r5, #0
 8009856:	460e      	mov	r6, r1
 8009858:	4619      	mov	r1, r3
 800985a:	462b      	mov	r3, r5
 800985c:	bfbb      	ittet	lt
 800985e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 8009862:	461d      	movlt	r5, r3
 8009864:	2300      	movge	r3, #0
 8009866:	232d      	movlt	r3, #45	; 0x2d
 8009868:	700b      	strb	r3, [r1, #0]
 800986a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800986c:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 8009870:	4691      	mov	r9, r2
 8009872:	f023 0820 	bic.w	r8, r3, #32
 8009876:	bfbc      	itt	lt
 8009878:	4622      	movlt	r2, r4
 800987a:	4614      	movlt	r4, r2
 800987c:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8009880:	d005      	beq.n	800988e <__cvt+0x42>
 8009882:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8009886:	d100      	bne.n	800988a <__cvt+0x3e>
 8009888:	3601      	adds	r6, #1
 800988a:	2102      	movs	r1, #2
 800988c:	e000      	b.n	8009890 <__cvt+0x44>
 800988e:	2103      	movs	r1, #3
 8009890:	ab03      	add	r3, sp, #12
 8009892:	9301      	str	r3, [sp, #4]
 8009894:	ab02      	add	r3, sp, #8
 8009896:	9300      	str	r3, [sp, #0]
 8009898:	ec45 4b10 	vmov	d0, r4, r5
 800989c:	4653      	mov	r3, sl
 800989e:	4632      	mov	r2, r6
 80098a0:	f001 fb92 	bl	800afc8 <_dtoa_r>
 80098a4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80098a8:	4607      	mov	r7, r0
 80098aa:	d102      	bne.n	80098b2 <__cvt+0x66>
 80098ac:	f019 0f01 	tst.w	r9, #1
 80098b0:	d022      	beq.n	80098f8 <__cvt+0xac>
 80098b2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80098b6:	eb07 0906 	add.w	r9, r7, r6
 80098ba:	d110      	bne.n	80098de <__cvt+0x92>
 80098bc:	783b      	ldrb	r3, [r7, #0]
 80098be:	2b30      	cmp	r3, #48	; 0x30
 80098c0:	d10a      	bne.n	80098d8 <__cvt+0x8c>
 80098c2:	2200      	movs	r2, #0
 80098c4:	2300      	movs	r3, #0
 80098c6:	4620      	mov	r0, r4
 80098c8:	4629      	mov	r1, r5
 80098ca:	f7f7 f8fd 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ce:	b918      	cbnz	r0, 80098d8 <__cvt+0x8c>
 80098d0:	f1c6 0601 	rsb	r6, r6, #1
 80098d4:	f8ca 6000 	str.w	r6, [sl]
 80098d8:	f8da 3000 	ldr.w	r3, [sl]
 80098dc:	4499      	add	r9, r3
 80098de:	2200      	movs	r2, #0
 80098e0:	2300      	movs	r3, #0
 80098e2:	4620      	mov	r0, r4
 80098e4:	4629      	mov	r1, r5
 80098e6:	f7f7 f8ef 	bl	8000ac8 <__aeabi_dcmpeq>
 80098ea:	b108      	cbz	r0, 80098f0 <__cvt+0xa4>
 80098ec:	f8cd 900c 	str.w	r9, [sp, #12]
 80098f0:	2230      	movs	r2, #48	; 0x30
 80098f2:	9b03      	ldr	r3, [sp, #12]
 80098f4:	454b      	cmp	r3, r9
 80098f6:	d307      	bcc.n	8009908 <__cvt+0xbc>
 80098f8:	9b03      	ldr	r3, [sp, #12]
 80098fa:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80098fc:	1bdb      	subs	r3, r3, r7
 80098fe:	4638      	mov	r0, r7
 8009900:	6013      	str	r3, [r2, #0]
 8009902:	b004      	add	sp, #16
 8009904:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009908:	1c59      	adds	r1, r3, #1
 800990a:	9103      	str	r1, [sp, #12]
 800990c:	701a      	strb	r2, [r3, #0]
 800990e:	e7f0      	b.n	80098f2 <__cvt+0xa6>

08009910 <__exponent>:
 8009910:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009912:	4603      	mov	r3, r0
 8009914:	2900      	cmp	r1, #0
 8009916:	bfb8      	it	lt
 8009918:	4249      	neglt	r1, r1
 800991a:	f803 2b02 	strb.w	r2, [r3], #2
 800991e:	bfb4      	ite	lt
 8009920:	222d      	movlt	r2, #45	; 0x2d
 8009922:	222b      	movge	r2, #43	; 0x2b
 8009924:	2909      	cmp	r1, #9
 8009926:	7042      	strb	r2, [r0, #1]
 8009928:	dd2a      	ble.n	8009980 <__exponent+0x70>
 800992a:	f10d 0407 	add.w	r4, sp, #7
 800992e:	46a4      	mov	ip, r4
 8009930:	270a      	movs	r7, #10
 8009932:	46a6      	mov	lr, r4
 8009934:	460a      	mov	r2, r1
 8009936:	fb91 f6f7 	sdiv	r6, r1, r7
 800993a:	fb07 1516 	mls	r5, r7, r6, r1
 800993e:	3530      	adds	r5, #48	; 0x30
 8009940:	2a63      	cmp	r2, #99	; 0x63
 8009942:	f104 34ff 	add.w	r4, r4, #4294967295
 8009946:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800994a:	4631      	mov	r1, r6
 800994c:	dcf1      	bgt.n	8009932 <__exponent+0x22>
 800994e:	3130      	adds	r1, #48	; 0x30
 8009950:	f1ae 0502 	sub.w	r5, lr, #2
 8009954:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009958:	1c44      	adds	r4, r0, #1
 800995a:	4629      	mov	r1, r5
 800995c:	4561      	cmp	r1, ip
 800995e:	d30a      	bcc.n	8009976 <__exponent+0x66>
 8009960:	f10d 0209 	add.w	r2, sp, #9
 8009964:	eba2 020e 	sub.w	r2, r2, lr
 8009968:	4565      	cmp	r5, ip
 800996a:	bf88      	it	hi
 800996c:	2200      	movhi	r2, #0
 800996e:	4413      	add	r3, r2
 8009970:	1a18      	subs	r0, r3, r0
 8009972:	b003      	add	sp, #12
 8009974:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009976:	f811 2b01 	ldrb.w	r2, [r1], #1
 800997a:	f804 2f01 	strb.w	r2, [r4, #1]!
 800997e:	e7ed      	b.n	800995c <__exponent+0x4c>
 8009980:	2330      	movs	r3, #48	; 0x30
 8009982:	3130      	adds	r1, #48	; 0x30
 8009984:	7083      	strb	r3, [r0, #2]
 8009986:	70c1      	strb	r1, [r0, #3]
 8009988:	1d03      	adds	r3, r0, #4
 800998a:	e7f1      	b.n	8009970 <__exponent+0x60>

0800998c <_printf_float>:
 800998c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009990:	ed2d 8b02 	vpush	{d8}
 8009994:	b08d      	sub	sp, #52	; 0x34
 8009996:	460c      	mov	r4, r1
 8009998:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 800999c:	4616      	mov	r6, r2
 800999e:	461f      	mov	r7, r3
 80099a0:	4605      	mov	r5, r0
 80099a2:	f002 fc81 	bl	800c2a8 <_localeconv_r>
 80099a6:	f8d0 a000 	ldr.w	sl, [r0]
 80099aa:	4650      	mov	r0, sl
 80099ac:	f7f6 fc10 	bl	80001d0 <strlen>
 80099b0:	2300      	movs	r3, #0
 80099b2:	930a      	str	r3, [sp, #40]	; 0x28
 80099b4:	6823      	ldr	r3, [r4, #0]
 80099b6:	9305      	str	r3, [sp, #20]
 80099b8:	f8d8 3000 	ldr.w	r3, [r8]
 80099bc:	f894 b018 	ldrb.w	fp, [r4, #24]
 80099c0:	3307      	adds	r3, #7
 80099c2:	f023 0307 	bic.w	r3, r3, #7
 80099c6:	f103 0208 	add.w	r2, r3, #8
 80099ca:	f8c8 2000 	str.w	r2, [r8]
 80099ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d2:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80099d6:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 80099da:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 80099de:	9307      	str	r3, [sp, #28]
 80099e0:	f8cd 8018 	str.w	r8, [sp, #24]
 80099e4:	ee08 0a10 	vmov	s16, r0
 80099e8:	4b9f      	ldr	r3, [pc, #636]	; (8009c68 <_printf_float+0x2dc>)
 80099ea:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099ee:	f04f 32ff 	mov.w	r2, #4294967295
 80099f2:	f7f7 f89b 	bl	8000b2c <__aeabi_dcmpun>
 80099f6:	bb88      	cbnz	r0, 8009a5c <_printf_float+0xd0>
 80099f8:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80099fc:	4b9a      	ldr	r3, [pc, #616]	; (8009c68 <_printf_float+0x2dc>)
 80099fe:	f04f 32ff 	mov.w	r2, #4294967295
 8009a02:	f7f7 f875 	bl	8000af0 <__aeabi_dcmple>
 8009a06:	bb48      	cbnz	r0, 8009a5c <_printf_float+0xd0>
 8009a08:	2200      	movs	r2, #0
 8009a0a:	2300      	movs	r3, #0
 8009a0c:	4640      	mov	r0, r8
 8009a0e:	4649      	mov	r1, r9
 8009a10:	f7f7 f864 	bl	8000adc <__aeabi_dcmplt>
 8009a14:	b110      	cbz	r0, 8009a1c <_printf_float+0x90>
 8009a16:	232d      	movs	r3, #45	; 0x2d
 8009a18:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a1c:	4b93      	ldr	r3, [pc, #588]	; (8009c6c <_printf_float+0x2e0>)
 8009a1e:	4894      	ldr	r0, [pc, #592]	; (8009c70 <_printf_float+0x2e4>)
 8009a20:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009a24:	bf94      	ite	ls
 8009a26:	4698      	movls	r8, r3
 8009a28:	4680      	movhi	r8, r0
 8009a2a:	2303      	movs	r3, #3
 8009a2c:	6123      	str	r3, [r4, #16]
 8009a2e:	9b05      	ldr	r3, [sp, #20]
 8009a30:	f023 0204 	bic.w	r2, r3, #4
 8009a34:	6022      	str	r2, [r4, #0]
 8009a36:	f04f 0900 	mov.w	r9, #0
 8009a3a:	9700      	str	r7, [sp, #0]
 8009a3c:	4633      	mov	r3, r6
 8009a3e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009a40:	4621      	mov	r1, r4
 8009a42:	4628      	mov	r0, r5
 8009a44:	f000 f9d8 	bl	8009df8 <_printf_common>
 8009a48:	3001      	adds	r0, #1
 8009a4a:	f040 8090 	bne.w	8009b6e <_printf_float+0x1e2>
 8009a4e:	f04f 30ff 	mov.w	r0, #4294967295
 8009a52:	b00d      	add	sp, #52	; 0x34
 8009a54:	ecbd 8b02 	vpop	{d8}
 8009a58:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a5c:	4642      	mov	r2, r8
 8009a5e:	464b      	mov	r3, r9
 8009a60:	4640      	mov	r0, r8
 8009a62:	4649      	mov	r1, r9
 8009a64:	f7f7 f862 	bl	8000b2c <__aeabi_dcmpun>
 8009a68:	b140      	cbz	r0, 8009a7c <_printf_float+0xf0>
 8009a6a:	464b      	mov	r3, r9
 8009a6c:	2b00      	cmp	r3, #0
 8009a6e:	bfbc      	itt	lt
 8009a70:	232d      	movlt	r3, #45	; 0x2d
 8009a72:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8009a76:	487f      	ldr	r0, [pc, #508]	; (8009c74 <_printf_float+0x2e8>)
 8009a78:	4b7f      	ldr	r3, [pc, #508]	; (8009c78 <_printf_float+0x2ec>)
 8009a7a:	e7d1      	b.n	8009a20 <_printf_float+0x94>
 8009a7c:	6863      	ldr	r3, [r4, #4]
 8009a7e:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 8009a82:	9206      	str	r2, [sp, #24]
 8009a84:	1c5a      	adds	r2, r3, #1
 8009a86:	d13f      	bne.n	8009b08 <_printf_float+0x17c>
 8009a88:	2306      	movs	r3, #6
 8009a8a:	6063      	str	r3, [r4, #4]
 8009a8c:	9b05      	ldr	r3, [sp, #20]
 8009a8e:	6861      	ldr	r1, [r4, #4]
 8009a90:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 8009a94:	2300      	movs	r3, #0
 8009a96:	9303      	str	r3, [sp, #12]
 8009a98:	ab0a      	add	r3, sp, #40	; 0x28
 8009a9a:	e9cd b301 	strd	fp, r3, [sp, #4]
 8009a9e:	ab09      	add	r3, sp, #36	; 0x24
 8009aa0:	ec49 8b10 	vmov	d0, r8, r9
 8009aa4:	9300      	str	r3, [sp, #0]
 8009aa6:	6022      	str	r2, [r4, #0]
 8009aa8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 8009aac:	4628      	mov	r0, r5
 8009aae:	f7ff fecd 	bl	800984c <__cvt>
 8009ab2:	9b06      	ldr	r3, [sp, #24]
 8009ab4:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009ab6:	2b47      	cmp	r3, #71	; 0x47
 8009ab8:	4680      	mov	r8, r0
 8009aba:	d108      	bne.n	8009ace <_printf_float+0x142>
 8009abc:	1cc8      	adds	r0, r1, #3
 8009abe:	db02      	blt.n	8009ac6 <_printf_float+0x13a>
 8009ac0:	6863      	ldr	r3, [r4, #4]
 8009ac2:	4299      	cmp	r1, r3
 8009ac4:	dd41      	ble.n	8009b4a <_printf_float+0x1be>
 8009ac6:	f1ab 0b02 	sub.w	fp, fp, #2
 8009aca:	fa5f fb8b 	uxtb.w	fp, fp
 8009ace:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ad2:	d820      	bhi.n	8009b16 <_printf_float+0x18a>
 8009ad4:	3901      	subs	r1, #1
 8009ad6:	465a      	mov	r2, fp
 8009ad8:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009adc:	9109      	str	r1, [sp, #36]	; 0x24
 8009ade:	f7ff ff17 	bl	8009910 <__exponent>
 8009ae2:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009ae4:	1813      	adds	r3, r2, r0
 8009ae6:	2a01      	cmp	r2, #1
 8009ae8:	4681      	mov	r9, r0
 8009aea:	6123      	str	r3, [r4, #16]
 8009aec:	dc02      	bgt.n	8009af4 <_printf_float+0x168>
 8009aee:	6822      	ldr	r2, [r4, #0]
 8009af0:	07d2      	lsls	r2, r2, #31
 8009af2:	d501      	bpl.n	8009af8 <_printf_float+0x16c>
 8009af4:	3301      	adds	r3, #1
 8009af6:	6123      	str	r3, [r4, #16]
 8009af8:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d09c      	beq.n	8009a3a <_printf_float+0xae>
 8009b00:	232d      	movs	r3, #45	; 0x2d
 8009b02:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009b06:	e798      	b.n	8009a3a <_printf_float+0xae>
 8009b08:	9a06      	ldr	r2, [sp, #24]
 8009b0a:	2a47      	cmp	r2, #71	; 0x47
 8009b0c:	d1be      	bne.n	8009a8c <_printf_float+0x100>
 8009b0e:	2b00      	cmp	r3, #0
 8009b10:	d1bc      	bne.n	8009a8c <_printf_float+0x100>
 8009b12:	2301      	movs	r3, #1
 8009b14:	e7b9      	b.n	8009a8a <_printf_float+0xfe>
 8009b16:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009b1a:	d118      	bne.n	8009b4e <_printf_float+0x1c2>
 8009b1c:	2900      	cmp	r1, #0
 8009b1e:	6863      	ldr	r3, [r4, #4]
 8009b20:	dd0b      	ble.n	8009b3a <_printf_float+0x1ae>
 8009b22:	6121      	str	r1, [r4, #16]
 8009b24:	b913      	cbnz	r3, 8009b2c <_printf_float+0x1a0>
 8009b26:	6822      	ldr	r2, [r4, #0]
 8009b28:	07d0      	lsls	r0, r2, #31
 8009b2a:	d502      	bpl.n	8009b32 <_printf_float+0x1a6>
 8009b2c:	3301      	adds	r3, #1
 8009b2e:	440b      	add	r3, r1
 8009b30:	6123      	str	r3, [r4, #16]
 8009b32:	65a1      	str	r1, [r4, #88]	; 0x58
 8009b34:	f04f 0900 	mov.w	r9, #0
 8009b38:	e7de      	b.n	8009af8 <_printf_float+0x16c>
 8009b3a:	b913      	cbnz	r3, 8009b42 <_printf_float+0x1b6>
 8009b3c:	6822      	ldr	r2, [r4, #0]
 8009b3e:	07d2      	lsls	r2, r2, #31
 8009b40:	d501      	bpl.n	8009b46 <_printf_float+0x1ba>
 8009b42:	3302      	adds	r3, #2
 8009b44:	e7f4      	b.n	8009b30 <_printf_float+0x1a4>
 8009b46:	2301      	movs	r3, #1
 8009b48:	e7f2      	b.n	8009b30 <_printf_float+0x1a4>
 8009b4a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009b4e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b50:	4299      	cmp	r1, r3
 8009b52:	db05      	blt.n	8009b60 <_printf_float+0x1d4>
 8009b54:	6823      	ldr	r3, [r4, #0]
 8009b56:	6121      	str	r1, [r4, #16]
 8009b58:	07d8      	lsls	r0, r3, #31
 8009b5a:	d5ea      	bpl.n	8009b32 <_printf_float+0x1a6>
 8009b5c:	1c4b      	adds	r3, r1, #1
 8009b5e:	e7e7      	b.n	8009b30 <_printf_float+0x1a4>
 8009b60:	2900      	cmp	r1, #0
 8009b62:	bfd4      	ite	le
 8009b64:	f1c1 0202 	rsble	r2, r1, #2
 8009b68:	2201      	movgt	r2, #1
 8009b6a:	4413      	add	r3, r2
 8009b6c:	e7e0      	b.n	8009b30 <_printf_float+0x1a4>
 8009b6e:	6823      	ldr	r3, [r4, #0]
 8009b70:	055a      	lsls	r2, r3, #21
 8009b72:	d407      	bmi.n	8009b84 <_printf_float+0x1f8>
 8009b74:	6923      	ldr	r3, [r4, #16]
 8009b76:	4642      	mov	r2, r8
 8009b78:	4631      	mov	r1, r6
 8009b7a:	4628      	mov	r0, r5
 8009b7c:	47b8      	blx	r7
 8009b7e:	3001      	adds	r0, #1
 8009b80:	d12c      	bne.n	8009bdc <_printf_float+0x250>
 8009b82:	e764      	b.n	8009a4e <_printf_float+0xc2>
 8009b84:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009b88:	f240 80e0 	bls.w	8009d4c <_printf_float+0x3c0>
 8009b8c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009b90:	2200      	movs	r2, #0
 8009b92:	2300      	movs	r3, #0
 8009b94:	f7f6 ff98 	bl	8000ac8 <__aeabi_dcmpeq>
 8009b98:	2800      	cmp	r0, #0
 8009b9a:	d034      	beq.n	8009c06 <_printf_float+0x27a>
 8009b9c:	4a37      	ldr	r2, [pc, #220]	; (8009c7c <_printf_float+0x2f0>)
 8009b9e:	2301      	movs	r3, #1
 8009ba0:	4631      	mov	r1, r6
 8009ba2:	4628      	mov	r0, r5
 8009ba4:	47b8      	blx	r7
 8009ba6:	3001      	adds	r0, #1
 8009ba8:	f43f af51 	beq.w	8009a4e <_printf_float+0xc2>
 8009bac:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bb0:	429a      	cmp	r2, r3
 8009bb2:	db02      	blt.n	8009bba <_printf_float+0x22e>
 8009bb4:	6823      	ldr	r3, [r4, #0]
 8009bb6:	07d8      	lsls	r0, r3, #31
 8009bb8:	d510      	bpl.n	8009bdc <_printf_float+0x250>
 8009bba:	ee18 3a10 	vmov	r3, s16
 8009bbe:	4652      	mov	r2, sl
 8009bc0:	4631      	mov	r1, r6
 8009bc2:	4628      	mov	r0, r5
 8009bc4:	47b8      	blx	r7
 8009bc6:	3001      	adds	r0, #1
 8009bc8:	f43f af41 	beq.w	8009a4e <_printf_float+0xc2>
 8009bcc:	f04f 0800 	mov.w	r8, #0
 8009bd0:	f104 091a 	add.w	r9, r4, #26
 8009bd4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bd6:	3b01      	subs	r3, #1
 8009bd8:	4543      	cmp	r3, r8
 8009bda:	dc09      	bgt.n	8009bf0 <_printf_float+0x264>
 8009bdc:	6823      	ldr	r3, [r4, #0]
 8009bde:	079b      	lsls	r3, r3, #30
 8009be0:	f100 8105 	bmi.w	8009dee <_printf_float+0x462>
 8009be4:	68e0      	ldr	r0, [r4, #12]
 8009be6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009be8:	4298      	cmp	r0, r3
 8009bea:	bfb8      	it	lt
 8009bec:	4618      	movlt	r0, r3
 8009bee:	e730      	b.n	8009a52 <_printf_float+0xc6>
 8009bf0:	2301      	movs	r3, #1
 8009bf2:	464a      	mov	r2, r9
 8009bf4:	4631      	mov	r1, r6
 8009bf6:	4628      	mov	r0, r5
 8009bf8:	47b8      	blx	r7
 8009bfa:	3001      	adds	r0, #1
 8009bfc:	f43f af27 	beq.w	8009a4e <_printf_float+0xc2>
 8009c00:	f108 0801 	add.w	r8, r8, #1
 8009c04:	e7e6      	b.n	8009bd4 <_printf_float+0x248>
 8009c06:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c08:	2b00      	cmp	r3, #0
 8009c0a:	dc39      	bgt.n	8009c80 <_printf_float+0x2f4>
 8009c0c:	4a1b      	ldr	r2, [pc, #108]	; (8009c7c <_printf_float+0x2f0>)
 8009c0e:	2301      	movs	r3, #1
 8009c10:	4631      	mov	r1, r6
 8009c12:	4628      	mov	r0, r5
 8009c14:	47b8      	blx	r7
 8009c16:	3001      	adds	r0, #1
 8009c18:	f43f af19 	beq.w	8009a4e <_printf_float+0xc2>
 8009c1c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c20:	4313      	orrs	r3, r2
 8009c22:	d102      	bne.n	8009c2a <_printf_float+0x29e>
 8009c24:	6823      	ldr	r3, [r4, #0]
 8009c26:	07d9      	lsls	r1, r3, #31
 8009c28:	d5d8      	bpl.n	8009bdc <_printf_float+0x250>
 8009c2a:	ee18 3a10 	vmov	r3, s16
 8009c2e:	4652      	mov	r2, sl
 8009c30:	4631      	mov	r1, r6
 8009c32:	4628      	mov	r0, r5
 8009c34:	47b8      	blx	r7
 8009c36:	3001      	adds	r0, #1
 8009c38:	f43f af09 	beq.w	8009a4e <_printf_float+0xc2>
 8009c3c:	f04f 0900 	mov.w	r9, #0
 8009c40:	f104 0a1a 	add.w	sl, r4, #26
 8009c44:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009c46:	425b      	negs	r3, r3
 8009c48:	454b      	cmp	r3, r9
 8009c4a:	dc01      	bgt.n	8009c50 <_printf_float+0x2c4>
 8009c4c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009c4e:	e792      	b.n	8009b76 <_printf_float+0x1ea>
 8009c50:	2301      	movs	r3, #1
 8009c52:	4652      	mov	r2, sl
 8009c54:	4631      	mov	r1, r6
 8009c56:	4628      	mov	r0, r5
 8009c58:	47b8      	blx	r7
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	f43f aef7 	beq.w	8009a4e <_printf_float+0xc2>
 8009c60:	f109 0901 	add.w	r9, r9, #1
 8009c64:	e7ee      	b.n	8009c44 <_printf_float+0x2b8>
 8009c66:	bf00      	nop
 8009c68:	7fefffff 	.word	0x7fefffff
 8009c6c:	0800e040 	.word	0x0800e040
 8009c70:	0800e044 	.word	0x0800e044
 8009c74:	0800e04c 	.word	0x0800e04c
 8009c78:	0800e048 	.word	0x0800e048
 8009c7c:	0800e050 	.word	0x0800e050
 8009c80:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c82:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c84:	429a      	cmp	r2, r3
 8009c86:	bfa8      	it	ge
 8009c88:	461a      	movge	r2, r3
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	4691      	mov	r9, r2
 8009c8e:	dc37      	bgt.n	8009d00 <_printf_float+0x374>
 8009c90:	f04f 0b00 	mov.w	fp, #0
 8009c94:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c98:	f104 021a 	add.w	r2, r4, #26
 8009c9c:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009c9e:	9305      	str	r3, [sp, #20]
 8009ca0:	eba3 0309 	sub.w	r3, r3, r9
 8009ca4:	455b      	cmp	r3, fp
 8009ca6:	dc33      	bgt.n	8009d10 <_printf_float+0x384>
 8009ca8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cac:	429a      	cmp	r2, r3
 8009cae:	db3b      	blt.n	8009d28 <_printf_float+0x39c>
 8009cb0:	6823      	ldr	r3, [r4, #0]
 8009cb2:	07da      	lsls	r2, r3, #31
 8009cb4:	d438      	bmi.n	8009d28 <_printf_float+0x39c>
 8009cb6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cb8:	9a05      	ldr	r2, [sp, #20]
 8009cba:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009cbc:	1a9a      	subs	r2, r3, r2
 8009cbe:	eba3 0901 	sub.w	r9, r3, r1
 8009cc2:	4591      	cmp	r9, r2
 8009cc4:	bfa8      	it	ge
 8009cc6:	4691      	movge	r9, r2
 8009cc8:	f1b9 0f00 	cmp.w	r9, #0
 8009ccc:	dc35      	bgt.n	8009d3a <_printf_float+0x3ae>
 8009cce:	f04f 0800 	mov.w	r8, #0
 8009cd2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009cd6:	f104 0a1a 	add.w	sl, r4, #26
 8009cda:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009cde:	1a9b      	subs	r3, r3, r2
 8009ce0:	eba3 0309 	sub.w	r3, r3, r9
 8009ce4:	4543      	cmp	r3, r8
 8009ce6:	f77f af79 	ble.w	8009bdc <_printf_float+0x250>
 8009cea:	2301      	movs	r3, #1
 8009cec:	4652      	mov	r2, sl
 8009cee:	4631      	mov	r1, r6
 8009cf0:	4628      	mov	r0, r5
 8009cf2:	47b8      	blx	r7
 8009cf4:	3001      	adds	r0, #1
 8009cf6:	f43f aeaa 	beq.w	8009a4e <_printf_float+0xc2>
 8009cfa:	f108 0801 	add.w	r8, r8, #1
 8009cfe:	e7ec      	b.n	8009cda <_printf_float+0x34e>
 8009d00:	4613      	mov	r3, r2
 8009d02:	4631      	mov	r1, r6
 8009d04:	4642      	mov	r2, r8
 8009d06:	4628      	mov	r0, r5
 8009d08:	47b8      	blx	r7
 8009d0a:	3001      	adds	r0, #1
 8009d0c:	d1c0      	bne.n	8009c90 <_printf_float+0x304>
 8009d0e:	e69e      	b.n	8009a4e <_printf_float+0xc2>
 8009d10:	2301      	movs	r3, #1
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	9205      	str	r2, [sp, #20]
 8009d18:	47b8      	blx	r7
 8009d1a:	3001      	adds	r0, #1
 8009d1c:	f43f ae97 	beq.w	8009a4e <_printf_float+0xc2>
 8009d20:	9a05      	ldr	r2, [sp, #20]
 8009d22:	f10b 0b01 	add.w	fp, fp, #1
 8009d26:	e7b9      	b.n	8009c9c <_printf_float+0x310>
 8009d28:	ee18 3a10 	vmov	r3, s16
 8009d2c:	4652      	mov	r2, sl
 8009d2e:	4631      	mov	r1, r6
 8009d30:	4628      	mov	r0, r5
 8009d32:	47b8      	blx	r7
 8009d34:	3001      	adds	r0, #1
 8009d36:	d1be      	bne.n	8009cb6 <_printf_float+0x32a>
 8009d38:	e689      	b.n	8009a4e <_printf_float+0xc2>
 8009d3a:	9a05      	ldr	r2, [sp, #20]
 8009d3c:	464b      	mov	r3, r9
 8009d3e:	4442      	add	r2, r8
 8009d40:	4631      	mov	r1, r6
 8009d42:	4628      	mov	r0, r5
 8009d44:	47b8      	blx	r7
 8009d46:	3001      	adds	r0, #1
 8009d48:	d1c1      	bne.n	8009cce <_printf_float+0x342>
 8009d4a:	e680      	b.n	8009a4e <_printf_float+0xc2>
 8009d4c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009d4e:	2a01      	cmp	r2, #1
 8009d50:	dc01      	bgt.n	8009d56 <_printf_float+0x3ca>
 8009d52:	07db      	lsls	r3, r3, #31
 8009d54:	d538      	bpl.n	8009dc8 <_printf_float+0x43c>
 8009d56:	2301      	movs	r3, #1
 8009d58:	4642      	mov	r2, r8
 8009d5a:	4631      	mov	r1, r6
 8009d5c:	4628      	mov	r0, r5
 8009d5e:	47b8      	blx	r7
 8009d60:	3001      	adds	r0, #1
 8009d62:	f43f ae74 	beq.w	8009a4e <_printf_float+0xc2>
 8009d66:	ee18 3a10 	vmov	r3, s16
 8009d6a:	4652      	mov	r2, sl
 8009d6c:	4631      	mov	r1, r6
 8009d6e:	4628      	mov	r0, r5
 8009d70:	47b8      	blx	r7
 8009d72:	3001      	adds	r0, #1
 8009d74:	f43f ae6b 	beq.w	8009a4e <_printf_float+0xc2>
 8009d78:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009d7c:	2200      	movs	r2, #0
 8009d7e:	2300      	movs	r3, #0
 8009d80:	f7f6 fea2 	bl	8000ac8 <__aeabi_dcmpeq>
 8009d84:	b9d8      	cbnz	r0, 8009dbe <_printf_float+0x432>
 8009d86:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009d88:	f108 0201 	add.w	r2, r8, #1
 8009d8c:	3b01      	subs	r3, #1
 8009d8e:	4631      	mov	r1, r6
 8009d90:	4628      	mov	r0, r5
 8009d92:	47b8      	blx	r7
 8009d94:	3001      	adds	r0, #1
 8009d96:	d10e      	bne.n	8009db6 <_printf_float+0x42a>
 8009d98:	e659      	b.n	8009a4e <_printf_float+0xc2>
 8009d9a:	2301      	movs	r3, #1
 8009d9c:	4652      	mov	r2, sl
 8009d9e:	4631      	mov	r1, r6
 8009da0:	4628      	mov	r0, r5
 8009da2:	47b8      	blx	r7
 8009da4:	3001      	adds	r0, #1
 8009da6:	f43f ae52 	beq.w	8009a4e <_printf_float+0xc2>
 8009daa:	f108 0801 	add.w	r8, r8, #1
 8009dae:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009db0:	3b01      	subs	r3, #1
 8009db2:	4543      	cmp	r3, r8
 8009db4:	dcf1      	bgt.n	8009d9a <_printf_float+0x40e>
 8009db6:	464b      	mov	r3, r9
 8009db8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009dbc:	e6dc      	b.n	8009b78 <_printf_float+0x1ec>
 8009dbe:	f04f 0800 	mov.w	r8, #0
 8009dc2:	f104 0a1a 	add.w	sl, r4, #26
 8009dc6:	e7f2      	b.n	8009dae <_printf_float+0x422>
 8009dc8:	2301      	movs	r3, #1
 8009dca:	4642      	mov	r2, r8
 8009dcc:	e7df      	b.n	8009d8e <_printf_float+0x402>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	464a      	mov	r2, r9
 8009dd2:	4631      	mov	r1, r6
 8009dd4:	4628      	mov	r0, r5
 8009dd6:	47b8      	blx	r7
 8009dd8:	3001      	adds	r0, #1
 8009dda:	f43f ae38 	beq.w	8009a4e <_printf_float+0xc2>
 8009dde:	f108 0801 	add.w	r8, r8, #1
 8009de2:	68e3      	ldr	r3, [r4, #12]
 8009de4:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009de6:	1a5b      	subs	r3, r3, r1
 8009de8:	4543      	cmp	r3, r8
 8009dea:	dcf0      	bgt.n	8009dce <_printf_float+0x442>
 8009dec:	e6fa      	b.n	8009be4 <_printf_float+0x258>
 8009dee:	f04f 0800 	mov.w	r8, #0
 8009df2:	f104 0919 	add.w	r9, r4, #25
 8009df6:	e7f4      	b.n	8009de2 <_printf_float+0x456>

08009df8 <_printf_common>:
 8009df8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009dfc:	4616      	mov	r6, r2
 8009dfe:	4699      	mov	r9, r3
 8009e00:	688a      	ldr	r2, [r1, #8]
 8009e02:	690b      	ldr	r3, [r1, #16]
 8009e04:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009e08:	4293      	cmp	r3, r2
 8009e0a:	bfb8      	it	lt
 8009e0c:	4613      	movlt	r3, r2
 8009e0e:	6033      	str	r3, [r6, #0]
 8009e10:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009e14:	4607      	mov	r7, r0
 8009e16:	460c      	mov	r4, r1
 8009e18:	b10a      	cbz	r2, 8009e1e <_printf_common+0x26>
 8009e1a:	3301      	adds	r3, #1
 8009e1c:	6033      	str	r3, [r6, #0]
 8009e1e:	6823      	ldr	r3, [r4, #0]
 8009e20:	0699      	lsls	r1, r3, #26
 8009e22:	bf42      	ittt	mi
 8009e24:	6833      	ldrmi	r3, [r6, #0]
 8009e26:	3302      	addmi	r3, #2
 8009e28:	6033      	strmi	r3, [r6, #0]
 8009e2a:	6825      	ldr	r5, [r4, #0]
 8009e2c:	f015 0506 	ands.w	r5, r5, #6
 8009e30:	d106      	bne.n	8009e40 <_printf_common+0x48>
 8009e32:	f104 0a19 	add.w	sl, r4, #25
 8009e36:	68e3      	ldr	r3, [r4, #12]
 8009e38:	6832      	ldr	r2, [r6, #0]
 8009e3a:	1a9b      	subs	r3, r3, r2
 8009e3c:	42ab      	cmp	r3, r5
 8009e3e:	dc26      	bgt.n	8009e8e <_printf_common+0x96>
 8009e40:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009e44:	1e13      	subs	r3, r2, #0
 8009e46:	6822      	ldr	r2, [r4, #0]
 8009e48:	bf18      	it	ne
 8009e4a:	2301      	movne	r3, #1
 8009e4c:	0692      	lsls	r2, r2, #26
 8009e4e:	d42b      	bmi.n	8009ea8 <_printf_common+0xb0>
 8009e50:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009e54:	4649      	mov	r1, r9
 8009e56:	4638      	mov	r0, r7
 8009e58:	47c0      	blx	r8
 8009e5a:	3001      	adds	r0, #1
 8009e5c:	d01e      	beq.n	8009e9c <_printf_common+0xa4>
 8009e5e:	6823      	ldr	r3, [r4, #0]
 8009e60:	68e5      	ldr	r5, [r4, #12]
 8009e62:	6832      	ldr	r2, [r6, #0]
 8009e64:	f003 0306 	and.w	r3, r3, #6
 8009e68:	2b04      	cmp	r3, #4
 8009e6a:	bf08      	it	eq
 8009e6c:	1aad      	subeq	r5, r5, r2
 8009e6e:	68a3      	ldr	r3, [r4, #8]
 8009e70:	6922      	ldr	r2, [r4, #16]
 8009e72:	bf0c      	ite	eq
 8009e74:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009e78:	2500      	movne	r5, #0
 8009e7a:	4293      	cmp	r3, r2
 8009e7c:	bfc4      	itt	gt
 8009e7e:	1a9b      	subgt	r3, r3, r2
 8009e80:	18ed      	addgt	r5, r5, r3
 8009e82:	2600      	movs	r6, #0
 8009e84:	341a      	adds	r4, #26
 8009e86:	42b5      	cmp	r5, r6
 8009e88:	d11a      	bne.n	8009ec0 <_printf_common+0xc8>
 8009e8a:	2000      	movs	r0, #0
 8009e8c:	e008      	b.n	8009ea0 <_printf_common+0xa8>
 8009e8e:	2301      	movs	r3, #1
 8009e90:	4652      	mov	r2, sl
 8009e92:	4649      	mov	r1, r9
 8009e94:	4638      	mov	r0, r7
 8009e96:	47c0      	blx	r8
 8009e98:	3001      	adds	r0, #1
 8009e9a:	d103      	bne.n	8009ea4 <_printf_common+0xac>
 8009e9c:	f04f 30ff 	mov.w	r0, #4294967295
 8009ea0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009ea4:	3501      	adds	r5, #1
 8009ea6:	e7c6      	b.n	8009e36 <_printf_common+0x3e>
 8009ea8:	18e1      	adds	r1, r4, r3
 8009eaa:	1c5a      	adds	r2, r3, #1
 8009eac:	2030      	movs	r0, #48	; 0x30
 8009eae:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009eb2:	4422      	add	r2, r4
 8009eb4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009eb8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009ebc:	3302      	adds	r3, #2
 8009ebe:	e7c7      	b.n	8009e50 <_printf_common+0x58>
 8009ec0:	2301      	movs	r3, #1
 8009ec2:	4622      	mov	r2, r4
 8009ec4:	4649      	mov	r1, r9
 8009ec6:	4638      	mov	r0, r7
 8009ec8:	47c0      	blx	r8
 8009eca:	3001      	adds	r0, #1
 8009ecc:	d0e6      	beq.n	8009e9c <_printf_common+0xa4>
 8009ece:	3601      	adds	r6, #1
 8009ed0:	e7d9      	b.n	8009e86 <_printf_common+0x8e>
	...

08009ed4 <_printf_i>:
 8009ed4:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009ed8:	7e0f      	ldrb	r7, [r1, #24]
 8009eda:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009edc:	2f78      	cmp	r7, #120	; 0x78
 8009ede:	4691      	mov	r9, r2
 8009ee0:	4680      	mov	r8, r0
 8009ee2:	460c      	mov	r4, r1
 8009ee4:	469a      	mov	sl, r3
 8009ee6:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009eea:	d807      	bhi.n	8009efc <_printf_i+0x28>
 8009eec:	2f62      	cmp	r7, #98	; 0x62
 8009eee:	d80a      	bhi.n	8009f06 <_printf_i+0x32>
 8009ef0:	2f00      	cmp	r7, #0
 8009ef2:	f000 80d8 	beq.w	800a0a6 <_printf_i+0x1d2>
 8009ef6:	2f58      	cmp	r7, #88	; 0x58
 8009ef8:	f000 80a3 	beq.w	800a042 <_printf_i+0x16e>
 8009efc:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f00:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009f04:	e03a      	b.n	8009f7c <_printf_i+0xa8>
 8009f06:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009f0a:	2b15      	cmp	r3, #21
 8009f0c:	d8f6      	bhi.n	8009efc <_printf_i+0x28>
 8009f0e:	a101      	add	r1, pc, #4	; (adr r1, 8009f14 <_printf_i+0x40>)
 8009f10:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009f14:	08009f6d 	.word	0x08009f6d
 8009f18:	08009f81 	.word	0x08009f81
 8009f1c:	08009efd 	.word	0x08009efd
 8009f20:	08009efd 	.word	0x08009efd
 8009f24:	08009efd 	.word	0x08009efd
 8009f28:	08009efd 	.word	0x08009efd
 8009f2c:	08009f81 	.word	0x08009f81
 8009f30:	08009efd 	.word	0x08009efd
 8009f34:	08009efd 	.word	0x08009efd
 8009f38:	08009efd 	.word	0x08009efd
 8009f3c:	08009efd 	.word	0x08009efd
 8009f40:	0800a08d 	.word	0x0800a08d
 8009f44:	08009fb1 	.word	0x08009fb1
 8009f48:	0800a06f 	.word	0x0800a06f
 8009f4c:	08009efd 	.word	0x08009efd
 8009f50:	08009efd 	.word	0x08009efd
 8009f54:	0800a0af 	.word	0x0800a0af
 8009f58:	08009efd 	.word	0x08009efd
 8009f5c:	08009fb1 	.word	0x08009fb1
 8009f60:	08009efd 	.word	0x08009efd
 8009f64:	08009efd 	.word	0x08009efd
 8009f68:	0800a077 	.word	0x0800a077
 8009f6c:	682b      	ldr	r3, [r5, #0]
 8009f6e:	1d1a      	adds	r2, r3, #4
 8009f70:	681b      	ldr	r3, [r3, #0]
 8009f72:	602a      	str	r2, [r5, #0]
 8009f74:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009f78:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009f7c:	2301      	movs	r3, #1
 8009f7e:	e0a3      	b.n	800a0c8 <_printf_i+0x1f4>
 8009f80:	6820      	ldr	r0, [r4, #0]
 8009f82:	6829      	ldr	r1, [r5, #0]
 8009f84:	0606      	lsls	r6, r0, #24
 8009f86:	f101 0304 	add.w	r3, r1, #4
 8009f8a:	d50a      	bpl.n	8009fa2 <_printf_i+0xce>
 8009f8c:	680e      	ldr	r6, [r1, #0]
 8009f8e:	602b      	str	r3, [r5, #0]
 8009f90:	2e00      	cmp	r6, #0
 8009f92:	da03      	bge.n	8009f9c <_printf_i+0xc8>
 8009f94:	232d      	movs	r3, #45	; 0x2d
 8009f96:	4276      	negs	r6, r6
 8009f98:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009f9c:	485e      	ldr	r0, [pc, #376]	; (800a118 <_printf_i+0x244>)
 8009f9e:	230a      	movs	r3, #10
 8009fa0:	e019      	b.n	8009fd6 <_printf_i+0x102>
 8009fa2:	680e      	ldr	r6, [r1, #0]
 8009fa4:	602b      	str	r3, [r5, #0]
 8009fa6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009faa:	bf18      	it	ne
 8009fac:	b236      	sxthne	r6, r6
 8009fae:	e7ef      	b.n	8009f90 <_printf_i+0xbc>
 8009fb0:	682b      	ldr	r3, [r5, #0]
 8009fb2:	6820      	ldr	r0, [r4, #0]
 8009fb4:	1d19      	adds	r1, r3, #4
 8009fb6:	6029      	str	r1, [r5, #0]
 8009fb8:	0601      	lsls	r1, r0, #24
 8009fba:	d501      	bpl.n	8009fc0 <_printf_i+0xec>
 8009fbc:	681e      	ldr	r6, [r3, #0]
 8009fbe:	e002      	b.n	8009fc6 <_printf_i+0xf2>
 8009fc0:	0646      	lsls	r6, r0, #25
 8009fc2:	d5fb      	bpl.n	8009fbc <_printf_i+0xe8>
 8009fc4:	881e      	ldrh	r6, [r3, #0]
 8009fc6:	4854      	ldr	r0, [pc, #336]	; (800a118 <_printf_i+0x244>)
 8009fc8:	2f6f      	cmp	r7, #111	; 0x6f
 8009fca:	bf0c      	ite	eq
 8009fcc:	2308      	moveq	r3, #8
 8009fce:	230a      	movne	r3, #10
 8009fd0:	2100      	movs	r1, #0
 8009fd2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009fd6:	6865      	ldr	r5, [r4, #4]
 8009fd8:	60a5      	str	r5, [r4, #8]
 8009fda:	2d00      	cmp	r5, #0
 8009fdc:	bfa2      	ittt	ge
 8009fde:	6821      	ldrge	r1, [r4, #0]
 8009fe0:	f021 0104 	bicge.w	r1, r1, #4
 8009fe4:	6021      	strge	r1, [r4, #0]
 8009fe6:	b90e      	cbnz	r6, 8009fec <_printf_i+0x118>
 8009fe8:	2d00      	cmp	r5, #0
 8009fea:	d04d      	beq.n	800a088 <_printf_i+0x1b4>
 8009fec:	4615      	mov	r5, r2
 8009fee:	fbb6 f1f3 	udiv	r1, r6, r3
 8009ff2:	fb03 6711 	mls	r7, r3, r1, r6
 8009ff6:	5dc7      	ldrb	r7, [r0, r7]
 8009ff8:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009ffc:	4637      	mov	r7, r6
 8009ffe:	42bb      	cmp	r3, r7
 800a000:	460e      	mov	r6, r1
 800a002:	d9f4      	bls.n	8009fee <_printf_i+0x11a>
 800a004:	2b08      	cmp	r3, #8
 800a006:	d10b      	bne.n	800a020 <_printf_i+0x14c>
 800a008:	6823      	ldr	r3, [r4, #0]
 800a00a:	07de      	lsls	r6, r3, #31
 800a00c:	d508      	bpl.n	800a020 <_printf_i+0x14c>
 800a00e:	6923      	ldr	r3, [r4, #16]
 800a010:	6861      	ldr	r1, [r4, #4]
 800a012:	4299      	cmp	r1, r3
 800a014:	bfde      	ittt	le
 800a016:	2330      	movle	r3, #48	; 0x30
 800a018:	f805 3c01 	strble.w	r3, [r5, #-1]
 800a01c:	f105 35ff 	addle.w	r5, r5, #4294967295
 800a020:	1b52      	subs	r2, r2, r5
 800a022:	6122      	str	r2, [r4, #16]
 800a024:	f8cd a000 	str.w	sl, [sp]
 800a028:	464b      	mov	r3, r9
 800a02a:	aa03      	add	r2, sp, #12
 800a02c:	4621      	mov	r1, r4
 800a02e:	4640      	mov	r0, r8
 800a030:	f7ff fee2 	bl	8009df8 <_printf_common>
 800a034:	3001      	adds	r0, #1
 800a036:	d14c      	bne.n	800a0d2 <_printf_i+0x1fe>
 800a038:	f04f 30ff 	mov.w	r0, #4294967295
 800a03c:	b004      	add	sp, #16
 800a03e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a042:	4835      	ldr	r0, [pc, #212]	; (800a118 <_printf_i+0x244>)
 800a044:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 800a048:	6829      	ldr	r1, [r5, #0]
 800a04a:	6823      	ldr	r3, [r4, #0]
 800a04c:	f851 6b04 	ldr.w	r6, [r1], #4
 800a050:	6029      	str	r1, [r5, #0]
 800a052:	061d      	lsls	r5, r3, #24
 800a054:	d514      	bpl.n	800a080 <_printf_i+0x1ac>
 800a056:	07df      	lsls	r7, r3, #31
 800a058:	bf44      	itt	mi
 800a05a:	f043 0320 	orrmi.w	r3, r3, #32
 800a05e:	6023      	strmi	r3, [r4, #0]
 800a060:	b91e      	cbnz	r6, 800a06a <_printf_i+0x196>
 800a062:	6823      	ldr	r3, [r4, #0]
 800a064:	f023 0320 	bic.w	r3, r3, #32
 800a068:	6023      	str	r3, [r4, #0]
 800a06a:	2310      	movs	r3, #16
 800a06c:	e7b0      	b.n	8009fd0 <_printf_i+0xfc>
 800a06e:	6823      	ldr	r3, [r4, #0]
 800a070:	f043 0320 	orr.w	r3, r3, #32
 800a074:	6023      	str	r3, [r4, #0]
 800a076:	2378      	movs	r3, #120	; 0x78
 800a078:	4828      	ldr	r0, [pc, #160]	; (800a11c <_printf_i+0x248>)
 800a07a:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 800a07e:	e7e3      	b.n	800a048 <_printf_i+0x174>
 800a080:	0659      	lsls	r1, r3, #25
 800a082:	bf48      	it	mi
 800a084:	b2b6      	uxthmi	r6, r6
 800a086:	e7e6      	b.n	800a056 <_printf_i+0x182>
 800a088:	4615      	mov	r5, r2
 800a08a:	e7bb      	b.n	800a004 <_printf_i+0x130>
 800a08c:	682b      	ldr	r3, [r5, #0]
 800a08e:	6826      	ldr	r6, [r4, #0]
 800a090:	6961      	ldr	r1, [r4, #20]
 800a092:	1d18      	adds	r0, r3, #4
 800a094:	6028      	str	r0, [r5, #0]
 800a096:	0635      	lsls	r5, r6, #24
 800a098:	681b      	ldr	r3, [r3, #0]
 800a09a:	d501      	bpl.n	800a0a0 <_printf_i+0x1cc>
 800a09c:	6019      	str	r1, [r3, #0]
 800a09e:	e002      	b.n	800a0a6 <_printf_i+0x1d2>
 800a0a0:	0670      	lsls	r0, r6, #25
 800a0a2:	d5fb      	bpl.n	800a09c <_printf_i+0x1c8>
 800a0a4:	8019      	strh	r1, [r3, #0]
 800a0a6:	2300      	movs	r3, #0
 800a0a8:	6123      	str	r3, [r4, #16]
 800a0aa:	4615      	mov	r5, r2
 800a0ac:	e7ba      	b.n	800a024 <_printf_i+0x150>
 800a0ae:	682b      	ldr	r3, [r5, #0]
 800a0b0:	1d1a      	adds	r2, r3, #4
 800a0b2:	602a      	str	r2, [r5, #0]
 800a0b4:	681d      	ldr	r5, [r3, #0]
 800a0b6:	6862      	ldr	r2, [r4, #4]
 800a0b8:	2100      	movs	r1, #0
 800a0ba:	4628      	mov	r0, r5
 800a0bc:	f7f6 f890 	bl	80001e0 <memchr>
 800a0c0:	b108      	cbz	r0, 800a0c6 <_printf_i+0x1f2>
 800a0c2:	1b40      	subs	r0, r0, r5
 800a0c4:	6060      	str	r0, [r4, #4]
 800a0c6:	6863      	ldr	r3, [r4, #4]
 800a0c8:	6123      	str	r3, [r4, #16]
 800a0ca:	2300      	movs	r3, #0
 800a0cc:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a0d0:	e7a8      	b.n	800a024 <_printf_i+0x150>
 800a0d2:	6923      	ldr	r3, [r4, #16]
 800a0d4:	462a      	mov	r2, r5
 800a0d6:	4649      	mov	r1, r9
 800a0d8:	4640      	mov	r0, r8
 800a0da:	47d0      	blx	sl
 800a0dc:	3001      	adds	r0, #1
 800a0de:	d0ab      	beq.n	800a038 <_printf_i+0x164>
 800a0e0:	6823      	ldr	r3, [r4, #0]
 800a0e2:	079b      	lsls	r3, r3, #30
 800a0e4:	d413      	bmi.n	800a10e <_printf_i+0x23a>
 800a0e6:	68e0      	ldr	r0, [r4, #12]
 800a0e8:	9b03      	ldr	r3, [sp, #12]
 800a0ea:	4298      	cmp	r0, r3
 800a0ec:	bfb8      	it	lt
 800a0ee:	4618      	movlt	r0, r3
 800a0f0:	e7a4      	b.n	800a03c <_printf_i+0x168>
 800a0f2:	2301      	movs	r3, #1
 800a0f4:	4632      	mov	r2, r6
 800a0f6:	4649      	mov	r1, r9
 800a0f8:	4640      	mov	r0, r8
 800a0fa:	47d0      	blx	sl
 800a0fc:	3001      	adds	r0, #1
 800a0fe:	d09b      	beq.n	800a038 <_printf_i+0x164>
 800a100:	3501      	adds	r5, #1
 800a102:	68e3      	ldr	r3, [r4, #12]
 800a104:	9903      	ldr	r1, [sp, #12]
 800a106:	1a5b      	subs	r3, r3, r1
 800a108:	42ab      	cmp	r3, r5
 800a10a:	dcf2      	bgt.n	800a0f2 <_printf_i+0x21e>
 800a10c:	e7eb      	b.n	800a0e6 <_printf_i+0x212>
 800a10e:	2500      	movs	r5, #0
 800a110:	f104 0619 	add.w	r6, r4, #25
 800a114:	e7f5      	b.n	800a102 <_printf_i+0x22e>
 800a116:	bf00      	nop
 800a118:	0800e052 	.word	0x0800e052
 800a11c:	0800e063 	.word	0x0800e063

0800a120 <siprintf>:
 800a120:	b40e      	push	{r1, r2, r3}
 800a122:	b500      	push	{lr}
 800a124:	b09c      	sub	sp, #112	; 0x70
 800a126:	ab1d      	add	r3, sp, #116	; 0x74
 800a128:	9002      	str	r0, [sp, #8]
 800a12a:	9006      	str	r0, [sp, #24]
 800a12c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a130:	4809      	ldr	r0, [pc, #36]	; (800a158 <siprintf+0x38>)
 800a132:	9107      	str	r1, [sp, #28]
 800a134:	9104      	str	r1, [sp, #16]
 800a136:	4909      	ldr	r1, [pc, #36]	; (800a15c <siprintf+0x3c>)
 800a138:	f853 2b04 	ldr.w	r2, [r3], #4
 800a13c:	9105      	str	r1, [sp, #20]
 800a13e:	6800      	ldr	r0, [r0, #0]
 800a140:	9301      	str	r3, [sp, #4]
 800a142:	a902      	add	r1, sp, #8
 800a144:	f002 fef0 	bl	800cf28 <_svfiprintf_r>
 800a148:	9b02      	ldr	r3, [sp, #8]
 800a14a:	2200      	movs	r2, #0
 800a14c:	701a      	strb	r2, [r3, #0]
 800a14e:	b01c      	add	sp, #112	; 0x70
 800a150:	f85d eb04 	ldr.w	lr, [sp], #4
 800a154:	b003      	add	sp, #12
 800a156:	4770      	bx	lr
 800a158:	2000001c 	.word	0x2000001c
 800a15c:	ffff0208 	.word	0xffff0208

0800a160 <sulp>:
 800a160:	b570      	push	{r4, r5, r6, lr}
 800a162:	4604      	mov	r4, r0
 800a164:	460d      	mov	r5, r1
 800a166:	ec45 4b10 	vmov	d0, r4, r5
 800a16a:	4616      	mov	r6, r2
 800a16c:	f002 fc3a 	bl	800c9e4 <__ulp>
 800a170:	ec51 0b10 	vmov	r0, r1, d0
 800a174:	b17e      	cbz	r6, 800a196 <sulp+0x36>
 800a176:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a17a:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a17e:	2b00      	cmp	r3, #0
 800a180:	dd09      	ble.n	800a196 <sulp+0x36>
 800a182:	051b      	lsls	r3, r3, #20
 800a184:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a188:	2400      	movs	r4, #0
 800a18a:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a18e:	4622      	mov	r2, r4
 800a190:	462b      	mov	r3, r5
 800a192:	f7f6 fa31 	bl	80005f8 <__aeabi_dmul>
 800a196:	bd70      	pop	{r4, r5, r6, pc}

0800a198 <_strtod_l>:
 800a198:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a19c:	ed2d 8b02 	vpush	{d8}
 800a1a0:	b09d      	sub	sp, #116	; 0x74
 800a1a2:	461f      	mov	r7, r3
 800a1a4:	2300      	movs	r3, #0
 800a1a6:	9318      	str	r3, [sp, #96]	; 0x60
 800a1a8:	4ba2      	ldr	r3, [pc, #648]	; (800a434 <_strtod_l+0x29c>)
 800a1aa:	9213      	str	r2, [sp, #76]	; 0x4c
 800a1ac:	681b      	ldr	r3, [r3, #0]
 800a1ae:	9305      	str	r3, [sp, #20]
 800a1b0:	4604      	mov	r4, r0
 800a1b2:	4618      	mov	r0, r3
 800a1b4:	4688      	mov	r8, r1
 800a1b6:	f7f6 f80b 	bl	80001d0 <strlen>
 800a1ba:	f04f 0a00 	mov.w	sl, #0
 800a1be:	4605      	mov	r5, r0
 800a1c0:	f04f 0b00 	mov.w	fp, #0
 800a1c4:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a1c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a1ca:	781a      	ldrb	r2, [r3, #0]
 800a1cc:	2a2b      	cmp	r2, #43	; 0x2b
 800a1ce:	d04e      	beq.n	800a26e <_strtod_l+0xd6>
 800a1d0:	d83b      	bhi.n	800a24a <_strtod_l+0xb2>
 800a1d2:	2a0d      	cmp	r2, #13
 800a1d4:	d834      	bhi.n	800a240 <_strtod_l+0xa8>
 800a1d6:	2a08      	cmp	r2, #8
 800a1d8:	d834      	bhi.n	800a244 <_strtod_l+0xac>
 800a1da:	2a00      	cmp	r2, #0
 800a1dc:	d03e      	beq.n	800a25c <_strtod_l+0xc4>
 800a1de:	2300      	movs	r3, #0
 800a1e0:	930a      	str	r3, [sp, #40]	; 0x28
 800a1e2:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a1e4:	7833      	ldrb	r3, [r6, #0]
 800a1e6:	2b30      	cmp	r3, #48	; 0x30
 800a1e8:	f040 80b0 	bne.w	800a34c <_strtod_l+0x1b4>
 800a1ec:	7873      	ldrb	r3, [r6, #1]
 800a1ee:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a1f2:	2b58      	cmp	r3, #88	; 0x58
 800a1f4:	d168      	bne.n	800a2c8 <_strtod_l+0x130>
 800a1f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a1f8:	9301      	str	r3, [sp, #4]
 800a1fa:	ab18      	add	r3, sp, #96	; 0x60
 800a1fc:	9702      	str	r7, [sp, #8]
 800a1fe:	9300      	str	r3, [sp, #0]
 800a200:	4a8d      	ldr	r2, [pc, #564]	; (800a438 <_strtod_l+0x2a0>)
 800a202:	ab19      	add	r3, sp, #100	; 0x64
 800a204:	a917      	add	r1, sp, #92	; 0x5c
 800a206:	4620      	mov	r0, r4
 800a208:	f001 fd46 	bl	800bc98 <__gethex>
 800a20c:	f010 0707 	ands.w	r7, r0, #7
 800a210:	4605      	mov	r5, r0
 800a212:	d005      	beq.n	800a220 <_strtod_l+0x88>
 800a214:	2f06      	cmp	r7, #6
 800a216:	d12c      	bne.n	800a272 <_strtod_l+0xda>
 800a218:	3601      	adds	r6, #1
 800a21a:	2300      	movs	r3, #0
 800a21c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a21e:	930a      	str	r3, [sp, #40]	; 0x28
 800a220:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a222:	2b00      	cmp	r3, #0
 800a224:	f040 8590 	bne.w	800ad48 <_strtod_l+0xbb0>
 800a228:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a22a:	b1eb      	cbz	r3, 800a268 <_strtod_l+0xd0>
 800a22c:	4652      	mov	r2, sl
 800a22e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a232:	ec43 2b10 	vmov	d0, r2, r3
 800a236:	b01d      	add	sp, #116	; 0x74
 800a238:	ecbd 8b02 	vpop	{d8}
 800a23c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a240:	2a20      	cmp	r2, #32
 800a242:	d1cc      	bne.n	800a1de <_strtod_l+0x46>
 800a244:	3301      	adds	r3, #1
 800a246:	9317      	str	r3, [sp, #92]	; 0x5c
 800a248:	e7be      	b.n	800a1c8 <_strtod_l+0x30>
 800a24a:	2a2d      	cmp	r2, #45	; 0x2d
 800a24c:	d1c7      	bne.n	800a1de <_strtod_l+0x46>
 800a24e:	2201      	movs	r2, #1
 800a250:	920a      	str	r2, [sp, #40]	; 0x28
 800a252:	1c5a      	adds	r2, r3, #1
 800a254:	9217      	str	r2, [sp, #92]	; 0x5c
 800a256:	785b      	ldrb	r3, [r3, #1]
 800a258:	2b00      	cmp	r3, #0
 800a25a:	d1c2      	bne.n	800a1e2 <_strtod_l+0x4a>
 800a25c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a25e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a262:	2b00      	cmp	r3, #0
 800a264:	f040 856e 	bne.w	800ad44 <_strtod_l+0xbac>
 800a268:	4652      	mov	r2, sl
 800a26a:	465b      	mov	r3, fp
 800a26c:	e7e1      	b.n	800a232 <_strtod_l+0x9a>
 800a26e:	2200      	movs	r2, #0
 800a270:	e7ee      	b.n	800a250 <_strtod_l+0xb8>
 800a272:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a274:	b13a      	cbz	r2, 800a286 <_strtod_l+0xee>
 800a276:	2135      	movs	r1, #53	; 0x35
 800a278:	a81a      	add	r0, sp, #104	; 0x68
 800a27a:	f002 fcbe 	bl	800cbfa <__copybits>
 800a27e:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a280:	4620      	mov	r0, r4
 800a282:	f002 f87d 	bl	800c380 <_Bfree>
 800a286:	3f01      	subs	r7, #1
 800a288:	2f04      	cmp	r7, #4
 800a28a:	d806      	bhi.n	800a29a <_strtod_l+0x102>
 800a28c:	e8df f007 	tbb	[pc, r7]
 800a290:	1714030a 	.word	0x1714030a
 800a294:	0a          	.byte	0x0a
 800a295:	00          	.byte	0x00
 800a296:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a29a:	0728      	lsls	r0, r5, #28
 800a29c:	d5c0      	bpl.n	800a220 <_strtod_l+0x88>
 800a29e:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a2a2:	e7bd      	b.n	800a220 <_strtod_l+0x88>
 800a2a4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a2a8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a2aa:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a2ae:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a2b2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a2b6:	e7f0      	b.n	800a29a <_strtod_l+0x102>
 800a2b8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a43c <_strtod_l+0x2a4>
 800a2bc:	e7ed      	b.n	800a29a <_strtod_l+0x102>
 800a2be:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a2c2:	f04f 3aff 	mov.w	sl, #4294967295
 800a2c6:	e7e8      	b.n	800a29a <_strtod_l+0x102>
 800a2c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2ce:	785b      	ldrb	r3, [r3, #1]
 800a2d0:	2b30      	cmp	r3, #48	; 0x30
 800a2d2:	d0f9      	beq.n	800a2c8 <_strtod_l+0x130>
 800a2d4:	2b00      	cmp	r3, #0
 800a2d6:	d0a3      	beq.n	800a220 <_strtod_l+0x88>
 800a2d8:	2301      	movs	r3, #1
 800a2da:	f04f 0900 	mov.w	r9, #0
 800a2de:	9304      	str	r3, [sp, #16]
 800a2e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2e2:	9308      	str	r3, [sp, #32]
 800a2e4:	f8cd 901c 	str.w	r9, [sp, #28]
 800a2e8:	464f      	mov	r7, r9
 800a2ea:	220a      	movs	r2, #10
 800a2ec:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a2ee:	7806      	ldrb	r6, [r0, #0]
 800a2f0:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a2f4:	b2d9      	uxtb	r1, r3
 800a2f6:	2909      	cmp	r1, #9
 800a2f8:	d92a      	bls.n	800a350 <_strtod_l+0x1b8>
 800a2fa:	9905      	ldr	r1, [sp, #20]
 800a2fc:	462a      	mov	r2, r5
 800a2fe:	f003 f887 	bl	800d410 <strncmp>
 800a302:	b398      	cbz	r0, 800a36c <_strtod_l+0x1d4>
 800a304:	2000      	movs	r0, #0
 800a306:	4632      	mov	r2, r6
 800a308:	463d      	mov	r5, r7
 800a30a:	9005      	str	r0, [sp, #20]
 800a30c:	4603      	mov	r3, r0
 800a30e:	2a65      	cmp	r2, #101	; 0x65
 800a310:	d001      	beq.n	800a316 <_strtod_l+0x17e>
 800a312:	2a45      	cmp	r2, #69	; 0x45
 800a314:	d118      	bne.n	800a348 <_strtod_l+0x1b0>
 800a316:	b91d      	cbnz	r5, 800a320 <_strtod_l+0x188>
 800a318:	9a04      	ldr	r2, [sp, #16]
 800a31a:	4302      	orrs	r2, r0
 800a31c:	d09e      	beq.n	800a25c <_strtod_l+0xc4>
 800a31e:	2500      	movs	r5, #0
 800a320:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a324:	f108 0201 	add.w	r2, r8, #1
 800a328:	9217      	str	r2, [sp, #92]	; 0x5c
 800a32a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a32e:	2a2b      	cmp	r2, #43	; 0x2b
 800a330:	d075      	beq.n	800a41e <_strtod_l+0x286>
 800a332:	2a2d      	cmp	r2, #45	; 0x2d
 800a334:	d07b      	beq.n	800a42e <_strtod_l+0x296>
 800a336:	f04f 0c00 	mov.w	ip, #0
 800a33a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a33e:	2909      	cmp	r1, #9
 800a340:	f240 8082 	bls.w	800a448 <_strtod_l+0x2b0>
 800a344:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a348:	2600      	movs	r6, #0
 800a34a:	e09d      	b.n	800a488 <_strtod_l+0x2f0>
 800a34c:	2300      	movs	r3, #0
 800a34e:	e7c4      	b.n	800a2da <_strtod_l+0x142>
 800a350:	2f08      	cmp	r7, #8
 800a352:	bfd8      	it	le
 800a354:	9907      	ldrle	r1, [sp, #28]
 800a356:	f100 0001 	add.w	r0, r0, #1
 800a35a:	bfda      	itte	le
 800a35c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a360:	9307      	strle	r3, [sp, #28]
 800a362:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a366:	3701      	adds	r7, #1
 800a368:	9017      	str	r0, [sp, #92]	; 0x5c
 800a36a:	e7bf      	b.n	800a2ec <_strtod_l+0x154>
 800a36c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a36e:	195a      	adds	r2, r3, r5
 800a370:	9217      	str	r2, [sp, #92]	; 0x5c
 800a372:	5d5a      	ldrb	r2, [r3, r5]
 800a374:	2f00      	cmp	r7, #0
 800a376:	d037      	beq.n	800a3e8 <_strtod_l+0x250>
 800a378:	9005      	str	r0, [sp, #20]
 800a37a:	463d      	mov	r5, r7
 800a37c:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a380:	2b09      	cmp	r3, #9
 800a382:	d912      	bls.n	800a3aa <_strtod_l+0x212>
 800a384:	2301      	movs	r3, #1
 800a386:	e7c2      	b.n	800a30e <_strtod_l+0x176>
 800a388:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a38a:	1c5a      	adds	r2, r3, #1
 800a38c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a38e:	785a      	ldrb	r2, [r3, #1]
 800a390:	3001      	adds	r0, #1
 800a392:	2a30      	cmp	r2, #48	; 0x30
 800a394:	d0f8      	beq.n	800a388 <_strtod_l+0x1f0>
 800a396:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a39a:	2b08      	cmp	r3, #8
 800a39c:	f200 84d9 	bhi.w	800ad52 <_strtod_l+0xbba>
 800a3a0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3a2:	9005      	str	r0, [sp, #20]
 800a3a4:	2000      	movs	r0, #0
 800a3a6:	9308      	str	r3, [sp, #32]
 800a3a8:	4605      	mov	r5, r0
 800a3aa:	3a30      	subs	r2, #48	; 0x30
 800a3ac:	f100 0301 	add.w	r3, r0, #1
 800a3b0:	d014      	beq.n	800a3dc <_strtod_l+0x244>
 800a3b2:	9905      	ldr	r1, [sp, #20]
 800a3b4:	4419      	add	r1, r3
 800a3b6:	9105      	str	r1, [sp, #20]
 800a3b8:	462b      	mov	r3, r5
 800a3ba:	eb00 0e05 	add.w	lr, r0, r5
 800a3be:	210a      	movs	r1, #10
 800a3c0:	4573      	cmp	r3, lr
 800a3c2:	d113      	bne.n	800a3ec <_strtod_l+0x254>
 800a3c4:	182b      	adds	r3, r5, r0
 800a3c6:	2b08      	cmp	r3, #8
 800a3c8:	f105 0501 	add.w	r5, r5, #1
 800a3cc:	4405      	add	r5, r0
 800a3ce:	dc1c      	bgt.n	800a40a <_strtod_l+0x272>
 800a3d0:	9907      	ldr	r1, [sp, #28]
 800a3d2:	230a      	movs	r3, #10
 800a3d4:	fb03 2301 	mla	r3, r3, r1, r2
 800a3d8:	9307      	str	r3, [sp, #28]
 800a3da:	2300      	movs	r3, #0
 800a3dc:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3de:	1c51      	adds	r1, r2, #1
 800a3e0:	9117      	str	r1, [sp, #92]	; 0x5c
 800a3e2:	7852      	ldrb	r2, [r2, #1]
 800a3e4:	4618      	mov	r0, r3
 800a3e6:	e7c9      	b.n	800a37c <_strtod_l+0x1e4>
 800a3e8:	4638      	mov	r0, r7
 800a3ea:	e7d2      	b.n	800a392 <_strtod_l+0x1fa>
 800a3ec:	2b08      	cmp	r3, #8
 800a3ee:	dc04      	bgt.n	800a3fa <_strtod_l+0x262>
 800a3f0:	9e07      	ldr	r6, [sp, #28]
 800a3f2:	434e      	muls	r6, r1
 800a3f4:	9607      	str	r6, [sp, #28]
 800a3f6:	3301      	adds	r3, #1
 800a3f8:	e7e2      	b.n	800a3c0 <_strtod_l+0x228>
 800a3fa:	f103 0c01 	add.w	ip, r3, #1
 800a3fe:	f1bc 0f10 	cmp.w	ip, #16
 800a402:	bfd8      	it	le
 800a404:	fb01 f909 	mulle.w	r9, r1, r9
 800a408:	e7f5      	b.n	800a3f6 <_strtod_l+0x25e>
 800a40a:	2d10      	cmp	r5, #16
 800a40c:	bfdc      	itt	le
 800a40e:	230a      	movle	r3, #10
 800a410:	fb03 2909 	mlale	r9, r3, r9, r2
 800a414:	e7e1      	b.n	800a3da <_strtod_l+0x242>
 800a416:	2300      	movs	r3, #0
 800a418:	9305      	str	r3, [sp, #20]
 800a41a:	2301      	movs	r3, #1
 800a41c:	e77c      	b.n	800a318 <_strtod_l+0x180>
 800a41e:	f04f 0c00 	mov.w	ip, #0
 800a422:	f108 0202 	add.w	r2, r8, #2
 800a426:	9217      	str	r2, [sp, #92]	; 0x5c
 800a428:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a42c:	e785      	b.n	800a33a <_strtod_l+0x1a2>
 800a42e:	f04f 0c01 	mov.w	ip, #1
 800a432:	e7f6      	b.n	800a422 <_strtod_l+0x28a>
 800a434:	0800e258 	.word	0x0800e258
 800a438:	0800e074 	.word	0x0800e074
 800a43c:	7ff00000 	.word	0x7ff00000
 800a440:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a442:	1c51      	adds	r1, r2, #1
 800a444:	9117      	str	r1, [sp, #92]	; 0x5c
 800a446:	7852      	ldrb	r2, [r2, #1]
 800a448:	2a30      	cmp	r2, #48	; 0x30
 800a44a:	d0f9      	beq.n	800a440 <_strtod_l+0x2a8>
 800a44c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a450:	2908      	cmp	r1, #8
 800a452:	f63f af79 	bhi.w	800a348 <_strtod_l+0x1b0>
 800a456:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a45a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a45c:	9206      	str	r2, [sp, #24]
 800a45e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a460:	1c51      	adds	r1, r2, #1
 800a462:	9117      	str	r1, [sp, #92]	; 0x5c
 800a464:	7852      	ldrb	r2, [r2, #1]
 800a466:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a46a:	2e09      	cmp	r6, #9
 800a46c:	d937      	bls.n	800a4de <_strtod_l+0x346>
 800a46e:	9e06      	ldr	r6, [sp, #24]
 800a470:	1b89      	subs	r1, r1, r6
 800a472:	2908      	cmp	r1, #8
 800a474:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a478:	dc02      	bgt.n	800a480 <_strtod_l+0x2e8>
 800a47a:	4576      	cmp	r6, lr
 800a47c:	bfa8      	it	ge
 800a47e:	4676      	movge	r6, lr
 800a480:	f1bc 0f00 	cmp.w	ip, #0
 800a484:	d000      	beq.n	800a488 <_strtod_l+0x2f0>
 800a486:	4276      	negs	r6, r6
 800a488:	2d00      	cmp	r5, #0
 800a48a:	d14d      	bne.n	800a528 <_strtod_l+0x390>
 800a48c:	9904      	ldr	r1, [sp, #16]
 800a48e:	4301      	orrs	r1, r0
 800a490:	f47f aec6 	bne.w	800a220 <_strtod_l+0x88>
 800a494:	2b00      	cmp	r3, #0
 800a496:	f47f aee1 	bne.w	800a25c <_strtod_l+0xc4>
 800a49a:	2a69      	cmp	r2, #105	; 0x69
 800a49c:	d027      	beq.n	800a4ee <_strtod_l+0x356>
 800a49e:	dc24      	bgt.n	800a4ea <_strtod_l+0x352>
 800a4a0:	2a49      	cmp	r2, #73	; 0x49
 800a4a2:	d024      	beq.n	800a4ee <_strtod_l+0x356>
 800a4a4:	2a4e      	cmp	r2, #78	; 0x4e
 800a4a6:	f47f aed9 	bne.w	800a25c <_strtod_l+0xc4>
 800a4aa:	499f      	ldr	r1, [pc, #636]	; (800a728 <_strtod_l+0x590>)
 800a4ac:	a817      	add	r0, sp, #92	; 0x5c
 800a4ae:	f001 fe4b 	bl	800c148 <__match>
 800a4b2:	2800      	cmp	r0, #0
 800a4b4:	f43f aed2 	beq.w	800a25c <_strtod_l+0xc4>
 800a4b8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4ba:	781b      	ldrb	r3, [r3, #0]
 800a4bc:	2b28      	cmp	r3, #40	; 0x28
 800a4be:	d12d      	bne.n	800a51c <_strtod_l+0x384>
 800a4c0:	499a      	ldr	r1, [pc, #616]	; (800a72c <_strtod_l+0x594>)
 800a4c2:	aa1a      	add	r2, sp, #104	; 0x68
 800a4c4:	a817      	add	r0, sp, #92	; 0x5c
 800a4c6:	f001 fe53 	bl	800c170 <__hexnan>
 800a4ca:	2805      	cmp	r0, #5
 800a4cc:	d126      	bne.n	800a51c <_strtod_l+0x384>
 800a4ce:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a4d0:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a4d4:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a4d8:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a4dc:	e6a0      	b.n	800a220 <_strtod_l+0x88>
 800a4de:	210a      	movs	r1, #10
 800a4e0:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a4e4:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a4e8:	e7b9      	b.n	800a45e <_strtod_l+0x2c6>
 800a4ea:	2a6e      	cmp	r2, #110	; 0x6e
 800a4ec:	e7db      	b.n	800a4a6 <_strtod_l+0x30e>
 800a4ee:	4990      	ldr	r1, [pc, #576]	; (800a730 <_strtod_l+0x598>)
 800a4f0:	a817      	add	r0, sp, #92	; 0x5c
 800a4f2:	f001 fe29 	bl	800c148 <__match>
 800a4f6:	2800      	cmp	r0, #0
 800a4f8:	f43f aeb0 	beq.w	800a25c <_strtod_l+0xc4>
 800a4fc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a4fe:	498d      	ldr	r1, [pc, #564]	; (800a734 <_strtod_l+0x59c>)
 800a500:	3b01      	subs	r3, #1
 800a502:	a817      	add	r0, sp, #92	; 0x5c
 800a504:	9317      	str	r3, [sp, #92]	; 0x5c
 800a506:	f001 fe1f 	bl	800c148 <__match>
 800a50a:	b910      	cbnz	r0, 800a512 <_strtod_l+0x37a>
 800a50c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a50e:	3301      	adds	r3, #1
 800a510:	9317      	str	r3, [sp, #92]	; 0x5c
 800a512:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a744 <_strtod_l+0x5ac>
 800a516:	f04f 0a00 	mov.w	sl, #0
 800a51a:	e681      	b.n	800a220 <_strtod_l+0x88>
 800a51c:	4886      	ldr	r0, [pc, #536]	; (800a738 <_strtod_l+0x5a0>)
 800a51e:	f002 ff5f 	bl	800d3e0 <nan>
 800a522:	ec5b ab10 	vmov	sl, fp, d0
 800a526:	e67b      	b.n	800a220 <_strtod_l+0x88>
 800a528:	9b05      	ldr	r3, [sp, #20]
 800a52a:	9807      	ldr	r0, [sp, #28]
 800a52c:	1af3      	subs	r3, r6, r3
 800a52e:	2f00      	cmp	r7, #0
 800a530:	bf08      	it	eq
 800a532:	462f      	moveq	r7, r5
 800a534:	2d10      	cmp	r5, #16
 800a536:	9306      	str	r3, [sp, #24]
 800a538:	46a8      	mov	r8, r5
 800a53a:	bfa8      	it	ge
 800a53c:	f04f 0810 	movge.w	r8, #16
 800a540:	f7f5 ffe0 	bl	8000504 <__aeabi_ui2d>
 800a544:	2d09      	cmp	r5, #9
 800a546:	4682      	mov	sl, r0
 800a548:	468b      	mov	fp, r1
 800a54a:	dd13      	ble.n	800a574 <_strtod_l+0x3dc>
 800a54c:	4b7b      	ldr	r3, [pc, #492]	; (800a73c <_strtod_l+0x5a4>)
 800a54e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a552:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a556:	f7f6 f84f 	bl	80005f8 <__aeabi_dmul>
 800a55a:	4682      	mov	sl, r0
 800a55c:	4648      	mov	r0, r9
 800a55e:	468b      	mov	fp, r1
 800a560:	f7f5 ffd0 	bl	8000504 <__aeabi_ui2d>
 800a564:	4602      	mov	r2, r0
 800a566:	460b      	mov	r3, r1
 800a568:	4650      	mov	r0, sl
 800a56a:	4659      	mov	r1, fp
 800a56c:	f7f5 fe8e 	bl	800028c <__adddf3>
 800a570:	4682      	mov	sl, r0
 800a572:	468b      	mov	fp, r1
 800a574:	2d0f      	cmp	r5, #15
 800a576:	dc38      	bgt.n	800a5ea <_strtod_l+0x452>
 800a578:	9b06      	ldr	r3, [sp, #24]
 800a57a:	2b00      	cmp	r3, #0
 800a57c:	f43f ae50 	beq.w	800a220 <_strtod_l+0x88>
 800a580:	dd24      	ble.n	800a5cc <_strtod_l+0x434>
 800a582:	2b16      	cmp	r3, #22
 800a584:	dc0b      	bgt.n	800a59e <_strtod_l+0x406>
 800a586:	496d      	ldr	r1, [pc, #436]	; (800a73c <_strtod_l+0x5a4>)
 800a588:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a58c:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a590:	4652      	mov	r2, sl
 800a592:	465b      	mov	r3, fp
 800a594:	f7f6 f830 	bl	80005f8 <__aeabi_dmul>
 800a598:	4682      	mov	sl, r0
 800a59a:	468b      	mov	fp, r1
 800a59c:	e640      	b.n	800a220 <_strtod_l+0x88>
 800a59e:	9a06      	ldr	r2, [sp, #24]
 800a5a0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a5a4:	4293      	cmp	r3, r2
 800a5a6:	db20      	blt.n	800a5ea <_strtod_l+0x452>
 800a5a8:	4c64      	ldr	r4, [pc, #400]	; (800a73c <_strtod_l+0x5a4>)
 800a5aa:	f1c5 050f 	rsb	r5, r5, #15
 800a5ae:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a5b2:	4652      	mov	r2, sl
 800a5b4:	465b      	mov	r3, fp
 800a5b6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a5ba:	f7f6 f81d 	bl	80005f8 <__aeabi_dmul>
 800a5be:	9b06      	ldr	r3, [sp, #24]
 800a5c0:	1b5d      	subs	r5, r3, r5
 800a5c2:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a5c6:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a5ca:	e7e3      	b.n	800a594 <_strtod_l+0x3fc>
 800a5cc:	9b06      	ldr	r3, [sp, #24]
 800a5ce:	3316      	adds	r3, #22
 800a5d0:	db0b      	blt.n	800a5ea <_strtod_l+0x452>
 800a5d2:	9b05      	ldr	r3, [sp, #20]
 800a5d4:	1b9e      	subs	r6, r3, r6
 800a5d6:	4b59      	ldr	r3, [pc, #356]	; (800a73c <_strtod_l+0x5a4>)
 800a5d8:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a5dc:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a5e0:	4650      	mov	r0, sl
 800a5e2:	4659      	mov	r1, fp
 800a5e4:	f7f6 f932 	bl	800084c <__aeabi_ddiv>
 800a5e8:	e7d6      	b.n	800a598 <_strtod_l+0x400>
 800a5ea:	9b06      	ldr	r3, [sp, #24]
 800a5ec:	eba5 0808 	sub.w	r8, r5, r8
 800a5f0:	4498      	add	r8, r3
 800a5f2:	f1b8 0f00 	cmp.w	r8, #0
 800a5f6:	dd74      	ble.n	800a6e2 <_strtod_l+0x54a>
 800a5f8:	f018 030f 	ands.w	r3, r8, #15
 800a5fc:	d00a      	beq.n	800a614 <_strtod_l+0x47c>
 800a5fe:	494f      	ldr	r1, [pc, #316]	; (800a73c <_strtod_l+0x5a4>)
 800a600:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a604:	4652      	mov	r2, sl
 800a606:	465b      	mov	r3, fp
 800a608:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a60c:	f7f5 fff4 	bl	80005f8 <__aeabi_dmul>
 800a610:	4682      	mov	sl, r0
 800a612:	468b      	mov	fp, r1
 800a614:	f038 080f 	bics.w	r8, r8, #15
 800a618:	d04f      	beq.n	800a6ba <_strtod_l+0x522>
 800a61a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a61e:	dd22      	ble.n	800a666 <_strtod_l+0x4ce>
 800a620:	2500      	movs	r5, #0
 800a622:	462e      	mov	r6, r5
 800a624:	9507      	str	r5, [sp, #28]
 800a626:	9505      	str	r5, [sp, #20]
 800a628:	2322      	movs	r3, #34	; 0x22
 800a62a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a744 <_strtod_l+0x5ac>
 800a62e:	6023      	str	r3, [r4, #0]
 800a630:	f04f 0a00 	mov.w	sl, #0
 800a634:	9b07      	ldr	r3, [sp, #28]
 800a636:	2b00      	cmp	r3, #0
 800a638:	f43f adf2 	beq.w	800a220 <_strtod_l+0x88>
 800a63c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a63e:	4620      	mov	r0, r4
 800a640:	f001 fe9e 	bl	800c380 <_Bfree>
 800a644:	9905      	ldr	r1, [sp, #20]
 800a646:	4620      	mov	r0, r4
 800a648:	f001 fe9a 	bl	800c380 <_Bfree>
 800a64c:	4631      	mov	r1, r6
 800a64e:	4620      	mov	r0, r4
 800a650:	f001 fe96 	bl	800c380 <_Bfree>
 800a654:	9907      	ldr	r1, [sp, #28]
 800a656:	4620      	mov	r0, r4
 800a658:	f001 fe92 	bl	800c380 <_Bfree>
 800a65c:	4629      	mov	r1, r5
 800a65e:	4620      	mov	r0, r4
 800a660:	f001 fe8e 	bl	800c380 <_Bfree>
 800a664:	e5dc      	b.n	800a220 <_strtod_l+0x88>
 800a666:	4b36      	ldr	r3, [pc, #216]	; (800a740 <_strtod_l+0x5a8>)
 800a668:	9304      	str	r3, [sp, #16]
 800a66a:	2300      	movs	r3, #0
 800a66c:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a670:	4650      	mov	r0, sl
 800a672:	4659      	mov	r1, fp
 800a674:	4699      	mov	r9, r3
 800a676:	f1b8 0f01 	cmp.w	r8, #1
 800a67a:	dc21      	bgt.n	800a6c0 <_strtod_l+0x528>
 800a67c:	b10b      	cbz	r3, 800a682 <_strtod_l+0x4ea>
 800a67e:	4682      	mov	sl, r0
 800a680:	468b      	mov	fp, r1
 800a682:	4b2f      	ldr	r3, [pc, #188]	; (800a740 <_strtod_l+0x5a8>)
 800a684:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a688:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a68c:	4652      	mov	r2, sl
 800a68e:	465b      	mov	r3, fp
 800a690:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a694:	f7f5 ffb0 	bl	80005f8 <__aeabi_dmul>
 800a698:	4b2a      	ldr	r3, [pc, #168]	; (800a744 <_strtod_l+0x5ac>)
 800a69a:	460a      	mov	r2, r1
 800a69c:	400b      	ands	r3, r1
 800a69e:	492a      	ldr	r1, [pc, #168]	; (800a748 <_strtod_l+0x5b0>)
 800a6a0:	428b      	cmp	r3, r1
 800a6a2:	4682      	mov	sl, r0
 800a6a4:	d8bc      	bhi.n	800a620 <_strtod_l+0x488>
 800a6a6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a6aa:	428b      	cmp	r3, r1
 800a6ac:	bf86      	itte	hi
 800a6ae:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a74c <_strtod_l+0x5b4>
 800a6b2:	f04f 3aff 	movhi.w	sl, #4294967295
 800a6b6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a6ba:	2300      	movs	r3, #0
 800a6bc:	9304      	str	r3, [sp, #16]
 800a6be:	e084      	b.n	800a7ca <_strtod_l+0x632>
 800a6c0:	f018 0f01 	tst.w	r8, #1
 800a6c4:	d005      	beq.n	800a6d2 <_strtod_l+0x53a>
 800a6c6:	9b04      	ldr	r3, [sp, #16]
 800a6c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6cc:	f7f5 ff94 	bl	80005f8 <__aeabi_dmul>
 800a6d0:	2301      	movs	r3, #1
 800a6d2:	9a04      	ldr	r2, [sp, #16]
 800a6d4:	3208      	adds	r2, #8
 800a6d6:	f109 0901 	add.w	r9, r9, #1
 800a6da:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a6de:	9204      	str	r2, [sp, #16]
 800a6e0:	e7c9      	b.n	800a676 <_strtod_l+0x4de>
 800a6e2:	d0ea      	beq.n	800a6ba <_strtod_l+0x522>
 800a6e4:	f1c8 0800 	rsb	r8, r8, #0
 800a6e8:	f018 020f 	ands.w	r2, r8, #15
 800a6ec:	d00a      	beq.n	800a704 <_strtod_l+0x56c>
 800a6ee:	4b13      	ldr	r3, [pc, #76]	; (800a73c <_strtod_l+0x5a4>)
 800a6f0:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a6f4:	4650      	mov	r0, sl
 800a6f6:	4659      	mov	r1, fp
 800a6f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a6fc:	f7f6 f8a6 	bl	800084c <__aeabi_ddiv>
 800a700:	4682      	mov	sl, r0
 800a702:	468b      	mov	fp, r1
 800a704:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a708:	d0d7      	beq.n	800a6ba <_strtod_l+0x522>
 800a70a:	f1b8 0f1f 	cmp.w	r8, #31
 800a70e:	dd1f      	ble.n	800a750 <_strtod_l+0x5b8>
 800a710:	2500      	movs	r5, #0
 800a712:	462e      	mov	r6, r5
 800a714:	9507      	str	r5, [sp, #28]
 800a716:	9505      	str	r5, [sp, #20]
 800a718:	2322      	movs	r3, #34	; 0x22
 800a71a:	f04f 0a00 	mov.w	sl, #0
 800a71e:	f04f 0b00 	mov.w	fp, #0
 800a722:	6023      	str	r3, [r4, #0]
 800a724:	e786      	b.n	800a634 <_strtod_l+0x49c>
 800a726:	bf00      	nop
 800a728:	0800e04d 	.word	0x0800e04d
 800a72c:	0800e088 	.word	0x0800e088
 800a730:	0800e045 	.word	0x0800e045
 800a734:	0800e17b 	.word	0x0800e17b
 800a738:	0800e177 	.word	0x0800e177
 800a73c:	0800e2f0 	.word	0x0800e2f0
 800a740:	0800e2c8 	.word	0x0800e2c8
 800a744:	7ff00000 	.word	0x7ff00000
 800a748:	7ca00000 	.word	0x7ca00000
 800a74c:	7fefffff 	.word	0x7fefffff
 800a750:	f018 0310 	ands.w	r3, r8, #16
 800a754:	bf18      	it	ne
 800a756:	236a      	movne	r3, #106	; 0x6a
 800a758:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800ab08 <_strtod_l+0x970>
 800a75c:	9304      	str	r3, [sp, #16]
 800a75e:	4650      	mov	r0, sl
 800a760:	4659      	mov	r1, fp
 800a762:	2300      	movs	r3, #0
 800a764:	f018 0f01 	tst.w	r8, #1
 800a768:	d004      	beq.n	800a774 <_strtod_l+0x5dc>
 800a76a:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a76e:	f7f5 ff43 	bl	80005f8 <__aeabi_dmul>
 800a772:	2301      	movs	r3, #1
 800a774:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a778:	f109 0908 	add.w	r9, r9, #8
 800a77c:	d1f2      	bne.n	800a764 <_strtod_l+0x5cc>
 800a77e:	b10b      	cbz	r3, 800a784 <_strtod_l+0x5ec>
 800a780:	4682      	mov	sl, r0
 800a782:	468b      	mov	fp, r1
 800a784:	9b04      	ldr	r3, [sp, #16]
 800a786:	b1c3      	cbz	r3, 800a7ba <_strtod_l+0x622>
 800a788:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a78c:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a790:	2b00      	cmp	r3, #0
 800a792:	4659      	mov	r1, fp
 800a794:	dd11      	ble.n	800a7ba <_strtod_l+0x622>
 800a796:	2b1f      	cmp	r3, #31
 800a798:	f340 8124 	ble.w	800a9e4 <_strtod_l+0x84c>
 800a79c:	2b34      	cmp	r3, #52	; 0x34
 800a79e:	bfde      	ittt	le
 800a7a0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a7a4:	f04f 33ff 	movle.w	r3, #4294967295
 800a7a8:	fa03 f202 	lslle.w	r2, r3, r2
 800a7ac:	f04f 0a00 	mov.w	sl, #0
 800a7b0:	bfcc      	ite	gt
 800a7b2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a7b6:	ea02 0b01 	andle.w	fp, r2, r1
 800a7ba:	2200      	movs	r2, #0
 800a7bc:	2300      	movs	r3, #0
 800a7be:	4650      	mov	r0, sl
 800a7c0:	4659      	mov	r1, fp
 800a7c2:	f7f6 f981 	bl	8000ac8 <__aeabi_dcmpeq>
 800a7c6:	2800      	cmp	r0, #0
 800a7c8:	d1a2      	bne.n	800a710 <_strtod_l+0x578>
 800a7ca:	9b07      	ldr	r3, [sp, #28]
 800a7cc:	9300      	str	r3, [sp, #0]
 800a7ce:	9908      	ldr	r1, [sp, #32]
 800a7d0:	462b      	mov	r3, r5
 800a7d2:	463a      	mov	r2, r7
 800a7d4:	4620      	mov	r0, r4
 800a7d6:	f001 fe3b 	bl	800c450 <__s2b>
 800a7da:	9007      	str	r0, [sp, #28]
 800a7dc:	2800      	cmp	r0, #0
 800a7de:	f43f af1f 	beq.w	800a620 <_strtod_l+0x488>
 800a7e2:	9b05      	ldr	r3, [sp, #20]
 800a7e4:	1b9e      	subs	r6, r3, r6
 800a7e6:	9b06      	ldr	r3, [sp, #24]
 800a7e8:	2b00      	cmp	r3, #0
 800a7ea:	bfb4      	ite	lt
 800a7ec:	4633      	movlt	r3, r6
 800a7ee:	2300      	movge	r3, #0
 800a7f0:	930c      	str	r3, [sp, #48]	; 0x30
 800a7f2:	9b06      	ldr	r3, [sp, #24]
 800a7f4:	2500      	movs	r5, #0
 800a7f6:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a7fa:	9312      	str	r3, [sp, #72]	; 0x48
 800a7fc:	462e      	mov	r6, r5
 800a7fe:	9b07      	ldr	r3, [sp, #28]
 800a800:	4620      	mov	r0, r4
 800a802:	6859      	ldr	r1, [r3, #4]
 800a804:	f001 fd7c 	bl	800c300 <_Balloc>
 800a808:	9005      	str	r0, [sp, #20]
 800a80a:	2800      	cmp	r0, #0
 800a80c:	f43f af0c 	beq.w	800a628 <_strtod_l+0x490>
 800a810:	9b07      	ldr	r3, [sp, #28]
 800a812:	691a      	ldr	r2, [r3, #16]
 800a814:	3202      	adds	r2, #2
 800a816:	f103 010c 	add.w	r1, r3, #12
 800a81a:	0092      	lsls	r2, r2, #2
 800a81c:	300c      	adds	r0, #12
 800a81e:	f001 fd61 	bl	800c2e4 <memcpy>
 800a822:	ec4b ab10 	vmov	d0, sl, fp
 800a826:	aa1a      	add	r2, sp, #104	; 0x68
 800a828:	a919      	add	r1, sp, #100	; 0x64
 800a82a:	4620      	mov	r0, r4
 800a82c:	f002 f956 	bl	800cadc <__d2b>
 800a830:	ec4b ab18 	vmov	d8, sl, fp
 800a834:	9018      	str	r0, [sp, #96]	; 0x60
 800a836:	2800      	cmp	r0, #0
 800a838:	f43f aef6 	beq.w	800a628 <_strtod_l+0x490>
 800a83c:	2101      	movs	r1, #1
 800a83e:	4620      	mov	r0, r4
 800a840:	f001 fea0 	bl	800c584 <__i2b>
 800a844:	4606      	mov	r6, r0
 800a846:	2800      	cmp	r0, #0
 800a848:	f43f aeee 	beq.w	800a628 <_strtod_l+0x490>
 800a84c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a84e:	9904      	ldr	r1, [sp, #16]
 800a850:	2b00      	cmp	r3, #0
 800a852:	bfab      	itete	ge
 800a854:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a856:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a858:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a85a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a85e:	bfac      	ite	ge
 800a860:	eb03 0902 	addge.w	r9, r3, r2
 800a864:	1ad7      	sublt	r7, r2, r3
 800a866:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a868:	eba3 0801 	sub.w	r8, r3, r1
 800a86c:	4490      	add	r8, r2
 800a86e:	4ba1      	ldr	r3, [pc, #644]	; (800aaf4 <_strtod_l+0x95c>)
 800a870:	f108 38ff 	add.w	r8, r8, #4294967295
 800a874:	4598      	cmp	r8, r3
 800a876:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a87a:	f280 80c7 	bge.w	800aa0c <_strtod_l+0x874>
 800a87e:	eba3 0308 	sub.w	r3, r3, r8
 800a882:	2b1f      	cmp	r3, #31
 800a884:	eba2 0203 	sub.w	r2, r2, r3
 800a888:	f04f 0101 	mov.w	r1, #1
 800a88c:	f300 80b1 	bgt.w	800a9f2 <_strtod_l+0x85a>
 800a890:	fa01 f303 	lsl.w	r3, r1, r3
 800a894:	930d      	str	r3, [sp, #52]	; 0x34
 800a896:	2300      	movs	r3, #0
 800a898:	9308      	str	r3, [sp, #32]
 800a89a:	eb09 0802 	add.w	r8, r9, r2
 800a89e:	9b04      	ldr	r3, [sp, #16]
 800a8a0:	45c1      	cmp	r9, r8
 800a8a2:	4417      	add	r7, r2
 800a8a4:	441f      	add	r7, r3
 800a8a6:	464b      	mov	r3, r9
 800a8a8:	bfa8      	it	ge
 800a8aa:	4643      	movge	r3, r8
 800a8ac:	42bb      	cmp	r3, r7
 800a8ae:	bfa8      	it	ge
 800a8b0:	463b      	movge	r3, r7
 800a8b2:	2b00      	cmp	r3, #0
 800a8b4:	bfc2      	ittt	gt
 800a8b6:	eba8 0803 	subgt.w	r8, r8, r3
 800a8ba:	1aff      	subgt	r7, r7, r3
 800a8bc:	eba9 0903 	subgt.w	r9, r9, r3
 800a8c0:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a8c2:	2b00      	cmp	r3, #0
 800a8c4:	dd17      	ble.n	800a8f6 <_strtod_l+0x75e>
 800a8c6:	4631      	mov	r1, r6
 800a8c8:	461a      	mov	r2, r3
 800a8ca:	4620      	mov	r0, r4
 800a8cc:	f001 ff1a 	bl	800c704 <__pow5mult>
 800a8d0:	4606      	mov	r6, r0
 800a8d2:	2800      	cmp	r0, #0
 800a8d4:	f43f aea8 	beq.w	800a628 <_strtod_l+0x490>
 800a8d8:	4601      	mov	r1, r0
 800a8da:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a8dc:	4620      	mov	r0, r4
 800a8de:	f001 fe67 	bl	800c5b0 <__multiply>
 800a8e2:	900b      	str	r0, [sp, #44]	; 0x2c
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	f43f ae9f 	beq.w	800a628 <_strtod_l+0x490>
 800a8ea:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a8ec:	4620      	mov	r0, r4
 800a8ee:	f001 fd47 	bl	800c380 <_Bfree>
 800a8f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8f4:	9318      	str	r3, [sp, #96]	; 0x60
 800a8f6:	f1b8 0f00 	cmp.w	r8, #0
 800a8fa:	f300 808c 	bgt.w	800aa16 <_strtod_l+0x87e>
 800a8fe:	9b06      	ldr	r3, [sp, #24]
 800a900:	2b00      	cmp	r3, #0
 800a902:	dd08      	ble.n	800a916 <_strtod_l+0x77e>
 800a904:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a906:	9905      	ldr	r1, [sp, #20]
 800a908:	4620      	mov	r0, r4
 800a90a:	f001 fefb 	bl	800c704 <__pow5mult>
 800a90e:	9005      	str	r0, [sp, #20]
 800a910:	2800      	cmp	r0, #0
 800a912:	f43f ae89 	beq.w	800a628 <_strtod_l+0x490>
 800a916:	2f00      	cmp	r7, #0
 800a918:	dd08      	ble.n	800a92c <_strtod_l+0x794>
 800a91a:	9905      	ldr	r1, [sp, #20]
 800a91c:	463a      	mov	r2, r7
 800a91e:	4620      	mov	r0, r4
 800a920:	f001 ff4a 	bl	800c7b8 <__lshift>
 800a924:	9005      	str	r0, [sp, #20]
 800a926:	2800      	cmp	r0, #0
 800a928:	f43f ae7e 	beq.w	800a628 <_strtod_l+0x490>
 800a92c:	f1b9 0f00 	cmp.w	r9, #0
 800a930:	dd08      	ble.n	800a944 <_strtod_l+0x7ac>
 800a932:	4631      	mov	r1, r6
 800a934:	464a      	mov	r2, r9
 800a936:	4620      	mov	r0, r4
 800a938:	f001 ff3e 	bl	800c7b8 <__lshift>
 800a93c:	4606      	mov	r6, r0
 800a93e:	2800      	cmp	r0, #0
 800a940:	f43f ae72 	beq.w	800a628 <_strtod_l+0x490>
 800a944:	9a05      	ldr	r2, [sp, #20]
 800a946:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a948:	4620      	mov	r0, r4
 800a94a:	f001 ffc1 	bl	800c8d0 <__mdiff>
 800a94e:	4605      	mov	r5, r0
 800a950:	2800      	cmp	r0, #0
 800a952:	f43f ae69 	beq.w	800a628 <_strtod_l+0x490>
 800a956:	68c3      	ldr	r3, [r0, #12]
 800a958:	930b      	str	r3, [sp, #44]	; 0x2c
 800a95a:	2300      	movs	r3, #0
 800a95c:	60c3      	str	r3, [r0, #12]
 800a95e:	4631      	mov	r1, r6
 800a960:	f001 ff9a 	bl	800c898 <__mcmp>
 800a964:	2800      	cmp	r0, #0
 800a966:	da60      	bge.n	800aa2a <_strtod_l+0x892>
 800a968:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a96a:	ea53 030a 	orrs.w	r3, r3, sl
 800a96e:	f040 8082 	bne.w	800aa76 <_strtod_l+0x8de>
 800a972:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a976:	2b00      	cmp	r3, #0
 800a978:	d17d      	bne.n	800aa76 <_strtod_l+0x8de>
 800a97a:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a97e:	0d1b      	lsrs	r3, r3, #20
 800a980:	051b      	lsls	r3, r3, #20
 800a982:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a986:	d976      	bls.n	800aa76 <_strtod_l+0x8de>
 800a988:	696b      	ldr	r3, [r5, #20]
 800a98a:	b913      	cbnz	r3, 800a992 <_strtod_l+0x7fa>
 800a98c:	692b      	ldr	r3, [r5, #16]
 800a98e:	2b01      	cmp	r3, #1
 800a990:	dd71      	ble.n	800aa76 <_strtod_l+0x8de>
 800a992:	4629      	mov	r1, r5
 800a994:	2201      	movs	r2, #1
 800a996:	4620      	mov	r0, r4
 800a998:	f001 ff0e 	bl	800c7b8 <__lshift>
 800a99c:	4631      	mov	r1, r6
 800a99e:	4605      	mov	r5, r0
 800a9a0:	f001 ff7a 	bl	800c898 <__mcmp>
 800a9a4:	2800      	cmp	r0, #0
 800a9a6:	dd66      	ble.n	800aa76 <_strtod_l+0x8de>
 800a9a8:	9904      	ldr	r1, [sp, #16]
 800a9aa:	4a53      	ldr	r2, [pc, #332]	; (800aaf8 <_strtod_l+0x960>)
 800a9ac:	465b      	mov	r3, fp
 800a9ae:	2900      	cmp	r1, #0
 800a9b0:	f000 8081 	beq.w	800aab6 <_strtod_l+0x91e>
 800a9b4:	ea02 010b 	and.w	r1, r2, fp
 800a9b8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a9bc:	dc7b      	bgt.n	800aab6 <_strtod_l+0x91e>
 800a9be:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a9c2:	f77f aea9 	ble.w	800a718 <_strtod_l+0x580>
 800a9c6:	4b4d      	ldr	r3, [pc, #308]	; (800aafc <_strtod_l+0x964>)
 800a9c8:	4650      	mov	r0, sl
 800a9ca:	4659      	mov	r1, fp
 800a9cc:	2200      	movs	r2, #0
 800a9ce:	f7f5 fe13 	bl	80005f8 <__aeabi_dmul>
 800a9d2:	460b      	mov	r3, r1
 800a9d4:	4303      	orrs	r3, r0
 800a9d6:	bf08      	it	eq
 800a9d8:	2322      	moveq	r3, #34	; 0x22
 800a9da:	4682      	mov	sl, r0
 800a9dc:	468b      	mov	fp, r1
 800a9de:	bf08      	it	eq
 800a9e0:	6023      	streq	r3, [r4, #0]
 800a9e2:	e62b      	b.n	800a63c <_strtod_l+0x4a4>
 800a9e4:	f04f 32ff 	mov.w	r2, #4294967295
 800a9e8:	fa02 f303 	lsl.w	r3, r2, r3
 800a9ec:	ea03 0a0a 	and.w	sl, r3, sl
 800a9f0:	e6e3      	b.n	800a7ba <_strtod_l+0x622>
 800a9f2:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a9f6:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a9fa:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a9fe:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800aa02:	fa01 f308 	lsl.w	r3, r1, r8
 800aa06:	9308      	str	r3, [sp, #32]
 800aa08:	910d      	str	r1, [sp, #52]	; 0x34
 800aa0a:	e746      	b.n	800a89a <_strtod_l+0x702>
 800aa0c:	2300      	movs	r3, #0
 800aa0e:	9308      	str	r3, [sp, #32]
 800aa10:	2301      	movs	r3, #1
 800aa12:	930d      	str	r3, [sp, #52]	; 0x34
 800aa14:	e741      	b.n	800a89a <_strtod_l+0x702>
 800aa16:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aa18:	4642      	mov	r2, r8
 800aa1a:	4620      	mov	r0, r4
 800aa1c:	f001 fecc 	bl	800c7b8 <__lshift>
 800aa20:	9018      	str	r0, [sp, #96]	; 0x60
 800aa22:	2800      	cmp	r0, #0
 800aa24:	f47f af6b 	bne.w	800a8fe <_strtod_l+0x766>
 800aa28:	e5fe      	b.n	800a628 <_strtod_l+0x490>
 800aa2a:	465f      	mov	r7, fp
 800aa2c:	d16e      	bne.n	800ab0c <_strtod_l+0x974>
 800aa2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800aa30:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800aa34:	b342      	cbz	r2, 800aa88 <_strtod_l+0x8f0>
 800aa36:	4a32      	ldr	r2, [pc, #200]	; (800ab00 <_strtod_l+0x968>)
 800aa38:	4293      	cmp	r3, r2
 800aa3a:	d128      	bne.n	800aa8e <_strtod_l+0x8f6>
 800aa3c:	9b04      	ldr	r3, [sp, #16]
 800aa3e:	4651      	mov	r1, sl
 800aa40:	b1eb      	cbz	r3, 800aa7e <_strtod_l+0x8e6>
 800aa42:	4b2d      	ldr	r3, [pc, #180]	; (800aaf8 <_strtod_l+0x960>)
 800aa44:	403b      	ands	r3, r7
 800aa46:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800aa4a:	f04f 32ff 	mov.w	r2, #4294967295
 800aa4e:	d819      	bhi.n	800aa84 <_strtod_l+0x8ec>
 800aa50:	0d1b      	lsrs	r3, r3, #20
 800aa52:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800aa56:	fa02 f303 	lsl.w	r3, r2, r3
 800aa5a:	4299      	cmp	r1, r3
 800aa5c:	d117      	bne.n	800aa8e <_strtod_l+0x8f6>
 800aa5e:	4b29      	ldr	r3, [pc, #164]	; (800ab04 <_strtod_l+0x96c>)
 800aa60:	429f      	cmp	r7, r3
 800aa62:	d102      	bne.n	800aa6a <_strtod_l+0x8d2>
 800aa64:	3101      	adds	r1, #1
 800aa66:	f43f addf 	beq.w	800a628 <_strtod_l+0x490>
 800aa6a:	4b23      	ldr	r3, [pc, #140]	; (800aaf8 <_strtod_l+0x960>)
 800aa6c:	403b      	ands	r3, r7
 800aa6e:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800aa72:	f04f 0a00 	mov.w	sl, #0
 800aa76:	9b04      	ldr	r3, [sp, #16]
 800aa78:	2b00      	cmp	r3, #0
 800aa7a:	d1a4      	bne.n	800a9c6 <_strtod_l+0x82e>
 800aa7c:	e5de      	b.n	800a63c <_strtod_l+0x4a4>
 800aa7e:	f04f 33ff 	mov.w	r3, #4294967295
 800aa82:	e7ea      	b.n	800aa5a <_strtod_l+0x8c2>
 800aa84:	4613      	mov	r3, r2
 800aa86:	e7e8      	b.n	800aa5a <_strtod_l+0x8c2>
 800aa88:	ea53 030a 	orrs.w	r3, r3, sl
 800aa8c:	d08c      	beq.n	800a9a8 <_strtod_l+0x810>
 800aa8e:	9b08      	ldr	r3, [sp, #32]
 800aa90:	b1db      	cbz	r3, 800aaca <_strtod_l+0x932>
 800aa92:	423b      	tst	r3, r7
 800aa94:	d0ef      	beq.n	800aa76 <_strtod_l+0x8de>
 800aa96:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa98:	9a04      	ldr	r2, [sp, #16]
 800aa9a:	4650      	mov	r0, sl
 800aa9c:	4659      	mov	r1, fp
 800aa9e:	b1c3      	cbz	r3, 800aad2 <_strtod_l+0x93a>
 800aaa0:	f7ff fb5e 	bl	800a160 <sulp>
 800aaa4:	4602      	mov	r2, r0
 800aaa6:	460b      	mov	r3, r1
 800aaa8:	ec51 0b18 	vmov	r0, r1, d8
 800aaac:	f7f5 fbee 	bl	800028c <__adddf3>
 800aab0:	4682      	mov	sl, r0
 800aab2:	468b      	mov	fp, r1
 800aab4:	e7df      	b.n	800aa76 <_strtod_l+0x8de>
 800aab6:	4013      	ands	r3, r2
 800aab8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800aabc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aac0:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aac4:	f04f 3aff 	mov.w	sl, #4294967295
 800aac8:	e7d5      	b.n	800aa76 <_strtod_l+0x8de>
 800aaca:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aacc:	ea13 0f0a 	tst.w	r3, sl
 800aad0:	e7e0      	b.n	800aa94 <_strtod_l+0x8fc>
 800aad2:	f7ff fb45 	bl	800a160 <sulp>
 800aad6:	4602      	mov	r2, r0
 800aad8:	460b      	mov	r3, r1
 800aada:	ec51 0b18 	vmov	r0, r1, d8
 800aade:	f7f5 fbd3 	bl	8000288 <__aeabi_dsub>
 800aae2:	2200      	movs	r2, #0
 800aae4:	2300      	movs	r3, #0
 800aae6:	4682      	mov	sl, r0
 800aae8:	468b      	mov	fp, r1
 800aaea:	f7f5 ffed 	bl	8000ac8 <__aeabi_dcmpeq>
 800aaee:	2800      	cmp	r0, #0
 800aaf0:	d0c1      	beq.n	800aa76 <_strtod_l+0x8de>
 800aaf2:	e611      	b.n	800a718 <_strtod_l+0x580>
 800aaf4:	fffffc02 	.word	0xfffffc02
 800aaf8:	7ff00000 	.word	0x7ff00000
 800aafc:	39500000 	.word	0x39500000
 800ab00:	000fffff 	.word	0x000fffff
 800ab04:	7fefffff 	.word	0x7fefffff
 800ab08:	0800e0a0 	.word	0x0800e0a0
 800ab0c:	4631      	mov	r1, r6
 800ab0e:	4628      	mov	r0, r5
 800ab10:	f002 f840 	bl	800cb94 <__ratio>
 800ab14:	ec59 8b10 	vmov	r8, r9, d0
 800ab18:	ee10 0a10 	vmov	r0, s0
 800ab1c:	2200      	movs	r2, #0
 800ab1e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800ab22:	4649      	mov	r1, r9
 800ab24:	f7f5 ffe4 	bl	8000af0 <__aeabi_dcmple>
 800ab28:	2800      	cmp	r0, #0
 800ab2a:	d07a      	beq.n	800ac22 <_strtod_l+0xa8a>
 800ab2c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab2e:	2b00      	cmp	r3, #0
 800ab30:	d04a      	beq.n	800abc8 <_strtod_l+0xa30>
 800ab32:	4b95      	ldr	r3, [pc, #596]	; (800ad88 <_strtod_l+0xbf0>)
 800ab34:	2200      	movs	r2, #0
 800ab36:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab3a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800ad88 <_strtod_l+0xbf0>
 800ab3e:	f04f 0800 	mov.w	r8, #0
 800ab42:	4b92      	ldr	r3, [pc, #584]	; (800ad8c <_strtod_l+0xbf4>)
 800ab44:	403b      	ands	r3, r7
 800ab46:	930d      	str	r3, [sp, #52]	; 0x34
 800ab48:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab4a:	4b91      	ldr	r3, [pc, #580]	; (800ad90 <_strtod_l+0xbf8>)
 800ab4c:	429a      	cmp	r2, r3
 800ab4e:	f040 80b0 	bne.w	800acb2 <_strtod_l+0xb1a>
 800ab52:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab56:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800ab5a:	ec4b ab10 	vmov	d0, sl, fp
 800ab5e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ab62:	f001 ff3f 	bl	800c9e4 <__ulp>
 800ab66:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ab6a:	ec53 2b10 	vmov	r2, r3, d0
 800ab6e:	f7f5 fd43 	bl	80005f8 <__aeabi_dmul>
 800ab72:	4652      	mov	r2, sl
 800ab74:	465b      	mov	r3, fp
 800ab76:	f7f5 fb89 	bl	800028c <__adddf3>
 800ab7a:	460b      	mov	r3, r1
 800ab7c:	4983      	ldr	r1, [pc, #524]	; (800ad8c <_strtod_l+0xbf4>)
 800ab7e:	4a85      	ldr	r2, [pc, #532]	; (800ad94 <_strtod_l+0xbfc>)
 800ab80:	4019      	ands	r1, r3
 800ab82:	4291      	cmp	r1, r2
 800ab84:	4682      	mov	sl, r0
 800ab86:	d960      	bls.n	800ac4a <_strtod_l+0xab2>
 800ab88:	ee18 3a90 	vmov	r3, s17
 800ab8c:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800ab90:	4293      	cmp	r3, r2
 800ab92:	d104      	bne.n	800ab9e <_strtod_l+0xa06>
 800ab94:	ee18 3a10 	vmov	r3, s16
 800ab98:	3301      	adds	r3, #1
 800ab9a:	f43f ad45 	beq.w	800a628 <_strtod_l+0x490>
 800ab9e:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ada0 <_strtod_l+0xc08>
 800aba2:	f04f 3aff 	mov.w	sl, #4294967295
 800aba6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aba8:	4620      	mov	r0, r4
 800abaa:	f001 fbe9 	bl	800c380 <_Bfree>
 800abae:	9905      	ldr	r1, [sp, #20]
 800abb0:	4620      	mov	r0, r4
 800abb2:	f001 fbe5 	bl	800c380 <_Bfree>
 800abb6:	4631      	mov	r1, r6
 800abb8:	4620      	mov	r0, r4
 800abba:	f001 fbe1 	bl	800c380 <_Bfree>
 800abbe:	4629      	mov	r1, r5
 800abc0:	4620      	mov	r0, r4
 800abc2:	f001 fbdd 	bl	800c380 <_Bfree>
 800abc6:	e61a      	b.n	800a7fe <_strtod_l+0x666>
 800abc8:	f1ba 0f00 	cmp.w	sl, #0
 800abcc:	d11b      	bne.n	800ac06 <_strtod_l+0xa6e>
 800abce:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abd2:	b9f3      	cbnz	r3, 800ac12 <_strtod_l+0xa7a>
 800abd4:	4b6c      	ldr	r3, [pc, #432]	; (800ad88 <_strtod_l+0xbf0>)
 800abd6:	2200      	movs	r2, #0
 800abd8:	4640      	mov	r0, r8
 800abda:	4649      	mov	r1, r9
 800abdc:	f7f5 ff7e 	bl	8000adc <__aeabi_dcmplt>
 800abe0:	b9d0      	cbnz	r0, 800ac18 <_strtod_l+0xa80>
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	4b6c      	ldr	r3, [pc, #432]	; (800ad98 <_strtod_l+0xc00>)
 800abe8:	2200      	movs	r2, #0
 800abea:	f7f5 fd05 	bl	80005f8 <__aeabi_dmul>
 800abee:	4680      	mov	r8, r0
 800abf0:	4689      	mov	r9, r1
 800abf2:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800abf6:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800abfa:	9315      	str	r3, [sp, #84]	; 0x54
 800abfc:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ac00:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac04:	e79d      	b.n	800ab42 <_strtod_l+0x9aa>
 800ac06:	f1ba 0f01 	cmp.w	sl, #1
 800ac0a:	d102      	bne.n	800ac12 <_strtod_l+0xa7a>
 800ac0c:	2f00      	cmp	r7, #0
 800ac0e:	f43f ad83 	beq.w	800a718 <_strtod_l+0x580>
 800ac12:	4b62      	ldr	r3, [pc, #392]	; (800ad9c <_strtod_l+0xc04>)
 800ac14:	2200      	movs	r2, #0
 800ac16:	e78e      	b.n	800ab36 <_strtod_l+0x99e>
 800ac18:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800ad98 <_strtod_l+0xc00>
 800ac1c:	f04f 0800 	mov.w	r8, #0
 800ac20:	e7e7      	b.n	800abf2 <_strtod_l+0xa5a>
 800ac22:	4b5d      	ldr	r3, [pc, #372]	; (800ad98 <_strtod_l+0xc00>)
 800ac24:	4640      	mov	r0, r8
 800ac26:	4649      	mov	r1, r9
 800ac28:	2200      	movs	r2, #0
 800ac2a:	f7f5 fce5 	bl	80005f8 <__aeabi_dmul>
 800ac2e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac30:	4680      	mov	r8, r0
 800ac32:	4689      	mov	r9, r1
 800ac34:	b933      	cbnz	r3, 800ac44 <_strtod_l+0xaac>
 800ac36:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac3a:	900e      	str	r0, [sp, #56]	; 0x38
 800ac3c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ac3e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ac42:	e7dd      	b.n	800ac00 <_strtod_l+0xa68>
 800ac44:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ac48:	e7f9      	b.n	800ac3e <_strtod_l+0xaa6>
 800ac4a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ac4e:	9b04      	ldr	r3, [sp, #16]
 800ac50:	2b00      	cmp	r3, #0
 800ac52:	d1a8      	bne.n	800aba6 <_strtod_l+0xa0e>
 800ac54:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ac58:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac5a:	0d1b      	lsrs	r3, r3, #20
 800ac5c:	051b      	lsls	r3, r3, #20
 800ac5e:	429a      	cmp	r2, r3
 800ac60:	d1a1      	bne.n	800aba6 <_strtod_l+0xa0e>
 800ac62:	4640      	mov	r0, r8
 800ac64:	4649      	mov	r1, r9
 800ac66:	f7f6 f827 	bl	8000cb8 <__aeabi_d2lz>
 800ac6a:	f7f5 fc97 	bl	800059c <__aeabi_l2d>
 800ac6e:	4602      	mov	r2, r0
 800ac70:	460b      	mov	r3, r1
 800ac72:	4640      	mov	r0, r8
 800ac74:	4649      	mov	r1, r9
 800ac76:	f7f5 fb07 	bl	8000288 <__aeabi_dsub>
 800ac7a:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800ac7c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ac80:	ea43 030a 	orr.w	r3, r3, sl
 800ac84:	4313      	orrs	r3, r2
 800ac86:	4680      	mov	r8, r0
 800ac88:	4689      	mov	r9, r1
 800ac8a:	d055      	beq.n	800ad38 <_strtod_l+0xba0>
 800ac8c:	a336      	add	r3, pc, #216	; (adr r3, 800ad68 <_strtod_l+0xbd0>)
 800ac8e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac92:	f7f5 ff23 	bl	8000adc <__aeabi_dcmplt>
 800ac96:	2800      	cmp	r0, #0
 800ac98:	f47f acd0 	bne.w	800a63c <_strtod_l+0x4a4>
 800ac9c:	a334      	add	r3, pc, #208	; (adr r3, 800ad70 <_strtod_l+0xbd8>)
 800ac9e:	e9d3 2300 	ldrd	r2, r3, [r3]
 800aca2:	4640      	mov	r0, r8
 800aca4:	4649      	mov	r1, r9
 800aca6:	f7f5 ff37 	bl	8000b18 <__aeabi_dcmpgt>
 800acaa:	2800      	cmp	r0, #0
 800acac:	f43f af7b 	beq.w	800aba6 <_strtod_l+0xa0e>
 800acb0:	e4c4      	b.n	800a63c <_strtod_l+0x4a4>
 800acb2:	9b04      	ldr	r3, [sp, #16]
 800acb4:	b333      	cbz	r3, 800ad04 <_strtod_l+0xb6c>
 800acb6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800acb8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800acbc:	d822      	bhi.n	800ad04 <_strtod_l+0xb6c>
 800acbe:	a32e      	add	r3, pc, #184	; (adr r3, 800ad78 <_strtod_l+0xbe0>)
 800acc0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800acc4:	4640      	mov	r0, r8
 800acc6:	4649      	mov	r1, r9
 800acc8:	f7f5 ff12 	bl	8000af0 <__aeabi_dcmple>
 800accc:	b1a0      	cbz	r0, 800acf8 <_strtod_l+0xb60>
 800acce:	4649      	mov	r1, r9
 800acd0:	4640      	mov	r0, r8
 800acd2:	f7f5 ff69 	bl	8000ba8 <__aeabi_d2uiz>
 800acd6:	2801      	cmp	r0, #1
 800acd8:	bf38      	it	cc
 800acda:	2001      	movcc	r0, #1
 800acdc:	f7f5 fc12 	bl	8000504 <__aeabi_ui2d>
 800ace0:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ace2:	4680      	mov	r8, r0
 800ace4:	4689      	mov	r9, r1
 800ace6:	bb23      	cbnz	r3, 800ad32 <_strtod_l+0xb9a>
 800ace8:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800acec:	9010      	str	r0, [sp, #64]	; 0x40
 800acee:	9311      	str	r3, [sp, #68]	; 0x44
 800acf0:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800acf4:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800acf8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800acfa:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800acfc:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ad00:	1a9b      	subs	r3, r3, r2
 800ad02:	9309      	str	r3, [sp, #36]	; 0x24
 800ad04:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad08:	eeb0 0a48 	vmov.f32	s0, s16
 800ad0c:	eef0 0a68 	vmov.f32	s1, s17
 800ad10:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ad14:	f001 fe66 	bl	800c9e4 <__ulp>
 800ad18:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ad1c:	ec53 2b10 	vmov	r2, r3, d0
 800ad20:	f7f5 fc6a 	bl	80005f8 <__aeabi_dmul>
 800ad24:	ec53 2b18 	vmov	r2, r3, d8
 800ad28:	f7f5 fab0 	bl	800028c <__adddf3>
 800ad2c:	4682      	mov	sl, r0
 800ad2e:	468b      	mov	fp, r1
 800ad30:	e78d      	b.n	800ac4e <_strtod_l+0xab6>
 800ad32:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ad36:	e7db      	b.n	800acf0 <_strtod_l+0xb58>
 800ad38:	a311      	add	r3, pc, #68	; (adr r3, 800ad80 <_strtod_l+0xbe8>)
 800ad3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ad3e:	f7f5 fecd 	bl	8000adc <__aeabi_dcmplt>
 800ad42:	e7b2      	b.n	800acaa <_strtod_l+0xb12>
 800ad44:	2300      	movs	r3, #0
 800ad46:	930a      	str	r3, [sp, #40]	; 0x28
 800ad48:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ad4a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ad4c:	6013      	str	r3, [r2, #0]
 800ad4e:	f7ff ba6b 	b.w	800a228 <_strtod_l+0x90>
 800ad52:	2a65      	cmp	r2, #101	; 0x65
 800ad54:	f43f ab5f 	beq.w	800a416 <_strtod_l+0x27e>
 800ad58:	2a45      	cmp	r2, #69	; 0x45
 800ad5a:	f43f ab5c 	beq.w	800a416 <_strtod_l+0x27e>
 800ad5e:	2301      	movs	r3, #1
 800ad60:	f7ff bb94 	b.w	800a48c <_strtod_l+0x2f4>
 800ad64:	f3af 8000 	nop.w
 800ad68:	94a03595 	.word	0x94a03595
 800ad6c:	3fdfffff 	.word	0x3fdfffff
 800ad70:	35afe535 	.word	0x35afe535
 800ad74:	3fe00000 	.word	0x3fe00000
 800ad78:	ffc00000 	.word	0xffc00000
 800ad7c:	41dfffff 	.word	0x41dfffff
 800ad80:	94a03595 	.word	0x94a03595
 800ad84:	3fcfffff 	.word	0x3fcfffff
 800ad88:	3ff00000 	.word	0x3ff00000
 800ad8c:	7ff00000 	.word	0x7ff00000
 800ad90:	7fe00000 	.word	0x7fe00000
 800ad94:	7c9fffff 	.word	0x7c9fffff
 800ad98:	3fe00000 	.word	0x3fe00000
 800ad9c:	bff00000 	.word	0xbff00000
 800ada0:	7fefffff 	.word	0x7fefffff

0800ada4 <strtod>:
 800ada4:	460a      	mov	r2, r1
 800ada6:	4601      	mov	r1, r0
 800ada8:	4802      	ldr	r0, [pc, #8]	; (800adb4 <strtod+0x10>)
 800adaa:	4b03      	ldr	r3, [pc, #12]	; (800adb8 <strtod+0x14>)
 800adac:	6800      	ldr	r0, [r0, #0]
 800adae:	f7ff b9f3 	b.w	800a198 <_strtod_l>
 800adb2:	bf00      	nop
 800adb4:	2000001c 	.word	0x2000001c
 800adb8:	20000084 	.word	0x20000084

0800adbc <strtok>:
 800adbc:	4b16      	ldr	r3, [pc, #88]	; (800ae18 <strtok+0x5c>)
 800adbe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800adc0:	681e      	ldr	r6, [r3, #0]
 800adc2:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800adc4:	4605      	mov	r5, r0
 800adc6:	b9fc      	cbnz	r4, 800ae08 <strtok+0x4c>
 800adc8:	2050      	movs	r0, #80	; 0x50
 800adca:	9101      	str	r1, [sp, #4]
 800adcc:	f001 fa70 	bl	800c2b0 <malloc>
 800add0:	9901      	ldr	r1, [sp, #4]
 800add2:	65b0      	str	r0, [r6, #88]	; 0x58
 800add4:	4602      	mov	r2, r0
 800add6:	b920      	cbnz	r0, 800ade2 <strtok+0x26>
 800add8:	4b10      	ldr	r3, [pc, #64]	; (800ae1c <strtok+0x60>)
 800adda:	4811      	ldr	r0, [pc, #68]	; (800ae20 <strtok+0x64>)
 800addc:	2157      	movs	r1, #87	; 0x57
 800adde:	f000 f849 	bl	800ae74 <__assert_func>
 800ade2:	e9c0 4400 	strd	r4, r4, [r0]
 800ade6:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800adea:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800adee:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800adf2:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800adf6:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800adfa:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800adfe:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ae02:	6184      	str	r4, [r0, #24]
 800ae04:	7704      	strb	r4, [r0, #28]
 800ae06:	6244      	str	r4, [r0, #36]	; 0x24
 800ae08:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ae0a:	2301      	movs	r3, #1
 800ae0c:	4628      	mov	r0, r5
 800ae0e:	b002      	add	sp, #8
 800ae10:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ae14:	f000 b806 	b.w	800ae24 <__strtok_r>
 800ae18:	2000001c 	.word	0x2000001c
 800ae1c:	0800e0c8 	.word	0x0800e0c8
 800ae20:	0800e0df 	.word	0x0800e0df

0800ae24 <__strtok_r>:
 800ae24:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ae26:	b908      	cbnz	r0, 800ae2c <__strtok_r+0x8>
 800ae28:	6810      	ldr	r0, [r2, #0]
 800ae2a:	b188      	cbz	r0, 800ae50 <__strtok_r+0x2c>
 800ae2c:	4604      	mov	r4, r0
 800ae2e:	4620      	mov	r0, r4
 800ae30:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ae34:	460f      	mov	r7, r1
 800ae36:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ae3a:	b91e      	cbnz	r6, 800ae44 <__strtok_r+0x20>
 800ae3c:	b965      	cbnz	r5, 800ae58 <__strtok_r+0x34>
 800ae3e:	6015      	str	r5, [r2, #0]
 800ae40:	4628      	mov	r0, r5
 800ae42:	e005      	b.n	800ae50 <__strtok_r+0x2c>
 800ae44:	42b5      	cmp	r5, r6
 800ae46:	d1f6      	bne.n	800ae36 <__strtok_r+0x12>
 800ae48:	2b00      	cmp	r3, #0
 800ae4a:	d1f0      	bne.n	800ae2e <__strtok_r+0xa>
 800ae4c:	6014      	str	r4, [r2, #0]
 800ae4e:	7003      	strb	r3, [r0, #0]
 800ae50:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ae52:	461c      	mov	r4, r3
 800ae54:	e00c      	b.n	800ae70 <__strtok_r+0x4c>
 800ae56:	b915      	cbnz	r5, 800ae5e <__strtok_r+0x3a>
 800ae58:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ae5c:	460e      	mov	r6, r1
 800ae5e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ae62:	42ab      	cmp	r3, r5
 800ae64:	d1f7      	bne.n	800ae56 <__strtok_r+0x32>
 800ae66:	2b00      	cmp	r3, #0
 800ae68:	d0f3      	beq.n	800ae52 <__strtok_r+0x2e>
 800ae6a:	2300      	movs	r3, #0
 800ae6c:	f804 3c01 	strb.w	r3, [r4, #-1]
 800ae70:	6014      	str	r4, [r2, #0]
 800ae72:	e7ed      	b.n	800ae50 <__strtok_r+0x2c>

0800ae74 <__assert_func>:
 800ae74:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ae76:	4614      	mov	r4, r2
 800ae78:	461a      	mov	r2, r3
 800ae7a:	4b09      	ldr	r3, [pc, #36]	; (800aea0 <__assert_func+0x2c>)
 800ae7c:	681b      	ldr	r3, [r3, #0]
 800ae7e:	4605      	mov	r5, r0
 800ae80:	68d8      	ldr	r0, [r3, #12]
 800ae82:	b14c      	cbz	r4, 800ae98 <__assert_func+0x24>
 800ae84:	4b07      	ldr	r3, [pc, #28]	; (800aea4 <__assert_func+0x30>)
 800ae86:	9100      	str	r1, [sp, #0]
 800ae88:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ae8c:	4906      	ldr	r1, [pc, #24]	; (800aea8 <__assert_func+0x34>)
 800ae8e:	462b      	mov	r3, r5
 800ae90:	f000 fe88 	bl	800bba4 <fiprintf>
 800ae94:	f002 fb9e 	bl	800d5d4 <abort>
 800ae98:	4b04      	ldr	r3, [pc, #16]	; (800aeac <__assert_func+0x38>)
 800ae9a:	461c      	mov	r4, r3
 800ae9c:	e7f3      	b.n	800ae86 <__assert_func+0x12>
 800ae9e:	bf00      	nop
 800aea0:	2000001c 	.word	0x2000001c
 800aea4:	0800e13c 	.word	0x0800e13c
 800aea8:	0800e149 	.word	0x0800e149
 800aeac:	0800e177 	.word	0x0800e177

0800aeb0 <quorem>:
 800aeb0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aeb4:	6903      	ldr	r3, [r0, #16]
 800aeb6:	690c      	ldr	r4, [r1, #16]
 800aeb8:	42a3      	cmp	r3, r4
 800aeba:	4607      	mov	r7, r0
 800aebc:	f2c0 8081 	blt.w	800afc2 <quorem+0x112>
 800aec0:	3c01      	subs	r4, #1
 800aec2:	f101 0814 	add.w	r8, r1, #20
 800aec6:	f100 0514 	add.w	r5, r0, #20
 800aeca:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aece:	9301      	str	r3, [sp, #4]
 800aed0:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800aed4:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aed8:	3301      	adds	r3, #1
 800aeda:	429a      	cmp	r2, r3
 800aedc:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800aee0:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800aee4:	fbb2 f6f3 	udiv	r6, r2, r3
 800aee8:	d331      	bcc.n	800af4e <quorem+0x9e>
 800aeea:	f04f 0e00 	mov.w	lr, #0
 800aeee:	4640      	mov	r0, r8
 800aef0:	46ac      	mov	ip, r5
 800aef2:	46f2      	mov	sl, lr
 800aef4:	f850 2b04 	ldr.w	r2, [r0], #4
 800aef8:	b293      	uxth	r3, r2
 800aefa:	fb06 e303 	mla	r3, r6, r3, lr
 800aefe:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800af02:	b29b      	uxth	r3, r3
 800af04:	ebaa 0303 	sub.w	r3, sl, r3
 800af08:	f8dc a000 	ldr.w	sl, [ip]
 800af0c:	0c12      	lsrs	r2, r2, #16
 800af0e:	fa13 f38a 	uxtah	r3, r3, sl
 800af12:	fb06 e202 	mla	r2, r6, r2, lr
 800af16:	9300      	str	r3, [sp, #0]
 800af18:	9b00      	ldr	r3, [sp, #0]
 800af1a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800af1e:	b292      	uxth	r2, r2
 800af20:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800af24:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af28:	f8bd 3000 	ldrh.w	r3, [sp]
 800af2c:	4581      	cmp	r9, r0
 800af2e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af32:	f84c 3b04 	str.w	r3, [ip], #4
 800af36:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800af3a:	d2db      	bcs.n	800aef4 <quorem+0x44>
 800af3c:	f855 300b 	ldr.w	r3, [r5, fp]
 800af40:	b92b      	cbnz	r3, 800af4e <quorem+0x9e>
 800af42:	9b01      	ldr	r3, [sp, #4]
 800af44:	3b04      	subs	r3, #4
 800af46:	429d      	cmp	r5, r3
 800af48:	461a      	mov	r2, r3
 800af4a:	d32e      	bcc.n	800afaa <quorem+0xfa>
 800af4c:	613c      	str	r4, [r7, #16]
 800af4e:	4638      	mov	r0, r7
 800af50:	f001 fca2 	bl	800c898 <__mcmp>
 800af54:	2800      	cmp	r0, #0
 800af56:	db24      	blt.n	800afa2 <quorem+0xf2>
 800af58:	3601      	adds	r6, #1
 800af5a:	4628      	mov	r0, r5
 800af5c:	f04f 0c00 	mov.w	ip, #0
 800af60:	f858 2b04 	ldr.w	r2, [r8], #4
 800af64:	f8d0 e000 	ldr.w	lr, [r0]
 800af68:	b293      	uxth	r3, r2
 800af6a:	ebac 0303 	sub.w	r3, ip, r3
 800af6e:	0c12      	lsrs	r2, r2, #16
 800af70:	fa13 f38e 	uxtah	r3, r3, lr
 800af74:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800af78:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800af7c:	b29b      	uxth	r3, r3
 800af7e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800af82:	45c1      	cmp	r9, r8
 800af84:	f840 3b04 	str.w	r3, [r0], #4
 800af88:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800af8c:	d2e8      	bcs.n	800af60 <quorem+0xb0>
 800af8e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800af92:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800af96:	b922      	cbnz	r2, 800afa2 <quorem+0xf2>
 800af98:	3b04      	subs	r3, #4
 800af9a:	429d      	cmp	r5, r3
 800af9c:	461a      	mov	r2, r3
 800af9e:	d30a      	bcc.n	800afb6 <quorem+0x106>
 800afa0:	613c      	str	r4, [r7, #16]
 800afa2:	4630      	mov	r0, r6
 800afa4:	b003      	add	sp, #12
 800afa6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afaa:	6812      	ldr	r2, [r2, #0]
 800afac:	3b04      	subs	r3, #4
 800afae:	2a00      	cmp	r2, #0
 800afb0:	d1cc      	bne.n	800af4c <quorem+0x9c>
 800afb2:	3c01      	subs	r4, #1
 800afb4:	e7c7      	b.n	800af46 <quorem+0x96>
 800afb6:	6812      	ldr	r2, [r2, #0]
 800afb8:	3b04      	subs	r3, #4
 800afba:	2a00      	cmp	r2, #0
 800afbc:	d1f0      	bne.n	800afa0 <quorem+0xf0>
 800afbe:	3c01      	subs	r4, #1
 800afc0:	e7eb      	b.n	800af9a <quorem+0xea>
 800afc2:	2000      	movs	r0, #0
 800afc4:	e7ee      	b.n	800afa4 <quorem+0xf4>
	...

0800afc8 <_dtoa_r>:
 800afc8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800afcc:	ed2d 8b04 	vpush	{d8-d9}
 800afd0:	ec57 6b10 	vmov	r6, r7, d0
 800afd4:	b093      	sub	sp, #76	; 0x4c
 800afd6:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800afd8:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800afdc:	9106      	str	r1, [sp, #24]
 800afde:	ee10 aa10 	vmov	sl, s0
 800afe2:	4604      	mov	r4, r0
 800afe4:	9209      	str	r2, [sp, #36]	; 0x24
 800afe6:	930c      	str	r3, [sp, #48]	; 0x30
 800afe8:	46bb      	mov	fp, r7
 800afea:	b975      	cbnz	r5, 800b00a <_dtoa_r+0x42>
 800afec:	2010      	movs	r0, #16
 800afee:	f001 f95f 	bl	800c2b0 <malloc>
 800aff2:	4602      	mov	r2, r0
 800aff4:	6260      	str	r0, [r4, #36]	; 0x24
 800aff6:	b920      	cbnz	r0, 800b002 <_dtoa_r+0x3a>
 800aff8:	4ba7      	ldr	r3, [pc, #668]	; (800b298 <_dtoa_r+0x2d0>)
 800affa:	21ea      	movs	r1, #234	; 0xea
 800affc:	48a7      	ldr	r0, [pc, #668]	; (800b29c <_dtoa_r+0x2d4>)
 800affe:	f7ff ff39 	bl	800ae74 <__assert_func>
 800b002:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800b006:	6005      	str	r5, [r0, #0]
 800b008:	60c5      	str	r5, [r0, #12]
 800b00a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b00c:	6819      	ldr	r1, [r3, #0]
 800b00e:	b151      	cbz	r1, 800b026 <_dtoa_r+0x5e>
 800b010:	685a      	ldr	r2, [r3, #4]
 800b012:	604a      	str	r2, [r1, #4]
 800b014:	2301      	movs	r3, #1
 800b016:	4093      	lsls	r3, r2
 800b018:	608b      	str	r3, [r1, #8]
 800b01a:	4620      	mov	r0, r4
 800b01c:	f001 f9b0 	bl	800c380 <_Bfree>
 800b020:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b022:	2200      	movs	r2, #0
 800b024:	601a      	str	r2, [r3, #0]
 800b026:	1e3b      	subs	r3, r7, #0
 800b028:	bfaa      	itet	ge
 800b02a:	2300      	movge	r3, #0
 800b02c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800b030:	f8c8 3000 	strge.w	r3, [r8]
 800b034:	4b9a      	ldr	r3, [pc, #616]	; (800b2a0 <_dtoa_r+0x2d8>)
 800b036:	bfbc      	itt	lt
 800b038:	2201      	movlt	r2, #1
 800b03a:	f8c8 2000 	strlt.w	r2, [r8]
 800b03e:	ea33 030b 	bics.w	r3, r3, fp
 800b042:	d11b      	bne.n	800b07c <_dtoa_r+0xb4>
 800b044:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b046:	f242 730f 	movw	r3, #9999	; 0x270f
 800b04a:	6013      	str	r3, [r2, #0]
 800b04c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b050:	4333      	orrs	r3, r6
 800b052:	f000 8592 	beq.w	800bb7a <_dtoa_r+0xbb2>
 800b056:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b058:	b963      	cbnz	r3, 800b074 <_dtoa_r+0xac>
 800b05a:	4b92      	ldr	r3, [pc, #584]	; (800b2a4 <_dtoa_r+0x2dc>)
 800b05c:	e022      	b.n	800b0a4 <_dtoa_r+0xdc>
 800b05e:	4b92      	ldr	r3, [pc, #584]	; (800b2a8 <_dtoa_r+0x2e0>)
 800b060:	9301      	str	r3, [sp, #4]
 800b062:	3308      	adds	r3, #8
 800b064:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800b066:	6013      	str	r3, [r2, #0]
 800b068:	9801      	ldr	r0, [sp, #4]
 800b06a:	b013      	add	sp, #76	; 0x4c
 800b06c:	ecbd 8b04 	vpop	{d8-d9}
 800b070:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b074:	4b8b      	ldr	r3, [pc, #556]	; (800b2a4 <_dtoa_r+0x2dc>)
 800b076:	9301      	str	r3, [sp, #4]
 800b078:	3303      	adds	r3, #3
 800b07a:	e7f3      	b.n	800b064 <_dtoa_r+0x9c>
 800b07c:	2200      	movs	r2, #0
 800b07e:	2300      	movs	r3, #0
 800b080:	4650      	mov	r0, sl
 800b082:	4659      	mov	r1, fp
 800b084:	f7f5 fd20 	bl	8000ac8 <__aeabi_dcmpeq>
 800b088:	ec4b ab19 	vmov	d9, sl, fp
 800b08c:	4680      	mov	r8, r0
 800b08e:	b158      	cbz	r0, 800b0a8 <_dtoa_r+0xe0>
 800b090:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800b092:	2301      	movs	r3, #1
 800b094:	6013      	str	r3, [r2, #0]
 800b096:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b098:	2b00      	cmp	r3, #0
 800b09a:	f000 856b 	beq.w	800bb74 <_dtoa_r+0xbac>
 800b09e:	4883      	ldr	r0, [pc, #524]	; (800b2ac <_dtoa_r+0x2e4>)
 800b0a0:	6018      	str	r0, [r3, #0]
 800b0a2:	1e43      	subs	r3, r0, #1
 800b0a4:	9301      	str	r3, [sp, #4]
 800b0a6:	e7df      	b.n	800b068 <_dtoa_r+0xa0>
 800b0a8:	ec4b ab10 	vmov	d0, sl, fp
 800b0ac:	aa10      	add	r2, sp, #64	; 0x40
 800b0ae:	a911      	add	r1, sp, #68	; 0x44
 800b0b0:	4620      	mov	r0, r4
 800b0b2:	f001 fd13 	bl	800cadc <__d2b>
 800b0b6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800b0ba:	ee08 0a10 	vmov	s16, r0
 800b0be:	2d00      	cmp	r5, #0
 800b0c0:	f000 8084 	beq.w	800b1cc <_dtoa_r+0x204>
 800b0c4:	ee19 3a90 	vmov	r3, s19
 800b0c8:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b0cc:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b0d0:	4656      	mov	r6, sl
 800b0d2:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b0d6:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b0da:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b0de:	4b74      	ldr	r3, [pc, #464]	; (800b2b0 <_dtoa_r+0x2e8>)
 800b0e0:	2200      	movs	r2, #0
 800b0e2:	4630      	mov	r0, r6
 800b0e4:	4639      	mov	r1, r7
 800b0e6:	f7f5 f8cf 	bl	8000288 <__aeabi_dsub>
 800b0ea:	a365      	add	r3, pc, #404	; (adr r3, 800b280 <_dtoa_r+0x2b8>)
 800b0ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0f0:	f7f5 fa82 	bl	80005f8 <__aeabi_dmul>
 800b0f4:	a364      	add	r3, pc, #400	; (adr r3, 800b288 <_dtoa_r+0x2c0>)
 800b0f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b0fa:	f7f5 f8c7 	bl	800028c <__adddf3>
 800b0fe:	4606      	mov	r6, r0
 800b100:	4628      	mov	r0, r5
 800b102:	460f      	mov	r7, r1
 800b104:	f7f5 fa0e 	bl	8000524 <__aeabi_i2d>
 800b108:	a361      	add	r3, pc, #388	; (adr r3, 800b290 <_dtoa_r+0x2c8>)
 800b10a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b10e:	f7f5 fa73 	bl	80005f8 <__aeabi_dmul>
 800b112:	4602      	mov	r2, r0
 800b114:	460b      	mov	r3, r1
 800b116:	4630      	mov	r0, r6
 800b118:	4639      	mov	r1, r7
 800b11a:	f7f5 f8b7 	bl	800028c <__adddf3>
 800b11e:	4606      	mov	r6, r0
 800b120:	460f      	mov	r7, r1
 800b122:	f7f5 fd19 	bl	8000b58 <__aeabi_d2iz>
 800b126:	2200      	movs	r2, #0
 800b128:	9000      	str	r0, [sp, #0]
 800b12a:	2300      	movs	r3, #0
 800b12c:	4630      	mov	r0, r6
 800b12e:	4639      	mov	r1, r7
 800b130:	f7f5 fcd4 	bl	8000adc <__aeabi_dcmplt>
 800b134:	b150      	cbz	r0, 800b14c <_dtoa_r+0x184>
 800b136:	9800      	ldr	r0, [sp, #0]
 800b138:	f7f5 f9f4 	bl	8000524 <__aeabi_i2d>
 800b13c:	4632      	mov	r2, r6
 800b13e:	463b      	mov	r3, r7
 800b140:	f7f5 fcc2 	bl	8000ac8 <__aeabi_dcmpeq>
 800b144:	b910      	cbnz	r0, 800b14c <_dtoa_r+0x184>
 800b146:	9b00      	ldr	r3, [sp, #0]
 800b148:	3b01      	subs	r3, #1
 800b14a:	9300      	str	r3, [sp, #0]
 800b14c:	9b00      	ldr	r3, [sp, #0]
 800b14e:	2b16      	cmp	r3, #22
 800b150:	d85a      	bhi.n	800b208 <_dtoa_r+0x240>
 800b152:	9a00      	ldr	r2, [sp, #0]
 800b154:	4b57      	ldr	r3, [pc, #348]	; (800b2b4 <_dtoa_r+0x2ec>)
 800b156:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b15e:	ec51 0b19 	vmov	r0, r1, d9
 800b162:	f7f5 fcbb 	bl	8000adc <__aeabi_dcmplt>
 800b166:	2800      	cmp	r0, #0
 800b168:	d050      	beq.n	800b20c <_dtoa_r+0x244>
 800b16a:	9b00      	ldr	r3, [sp, #0]
 800b16c:	3b01      	subs	r3, #1
 800b16e:	9300      	str	r3, [sp, #0]
 800b170:	2300      	movs	r3, #0
 800b172:	930b      	str	r3, [sp, #44]	; 0x2c
 800b174:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b176:	1b5d      	subs	r5, r3, r5
 800b178:	1e6b      	subs	r3, r5, #1
 800b17a:	9305      	str	r3, [sp, #20]
 800b17c:	bf45      	ittet	mi
 800b17e:	f1c5 0301 	rsbmi	r3, r5, #1
 800b182:	9304      	strmi	r3, [sp, #16]
 800b184:	2300      	movpl	r3, #0
 800b186:	2300      	movmi	r3, #0
 800b188:	bf4c      	ite	mi
 800b18a:	9305      	strmi	r3, [sp, #20]
 800b18c:	9304      	strpl	r3, [sp, #16]
 800b18e:	9b00      	ldr	r3, [sp, #0]
 800b190:	2b00      	cmp	r3, #0
 800b192:	db3d      	blt.n	800b210 <_dtoa_r+0x248>
 800b194:	9b05      	ldr	r3, [sp, #20]
 800b196:	9a00      	ldr	r2, [sp, #0]
 800b198:	920a      	str	r2, [sp, #40]	; 0x28
 800b19a:	4413      	add	r3, r2
 800b19c:	9305      	str	r3, [sp, #20]
 800b19e:	2300      	movs	r3, #0
 800b1a0:	9307      	str	r3, [sp, #28]
 800b1a2:	9b06      	ldr	r3, [sp, #24]
 800b1a4:	2b09      	cmp	r3, #9
 800b1a6:	f200 8089 	bhi.w	800b2bc <_dtoa_r+0x2f4>
 800b1aa:	2b05      	cmp	r3, #5
 800b1ac:	bfc4      	itt	gt
 800b1ae:	3b04      	subgt	r3, #4
 800b1b0:	9306      	strgt	r3, [sp, #24]
 800b1b2:	9b06      	ldr	r3, [sp, #24]
 800b1b4:	f1a3 0302 	sub.w	r3, r3, #2
 800b1b8:	bfcc      	ite	gt
 800b1ba:	2500      	movgt	r5, #0
 800b1bc:	2501      	movle	r5, #1
 800b1be:	2b03      	cmp	r3, #3
 800b1c0:	f200 8087 	bhi.w	800b2d2 <_dtoa_r+0x30a>
 800b1c4:	e8df f003 	tbb	[pc, r3]
 800b1c8:	59383a2d 	.word	0x59383a2d
 800b1cc:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b1d0:	441d      	add	r5, r3
 800b1d2:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b1d6:	2b20      	cmp	r3, #32
 800b1d8:	bfc1      	itttt	gt
 800b1da:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b1de:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b1e2:	fa0b f303 	lslgt.w	r3, fp, r3
 800b1e6:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b1ea:	bfda      	itte	le
 800b1ec:	f1c3 0320 	rsble	r3, r3, #32
 800b1f0:	fa06 f003 	lslle.w	r0, r6, r3
 800b1f4:	4318      	orrgt	r0, r3
 800b1f6:	f7f5 f985 	bl	8000504 <__aeabi_ui2d>
 800b1fa:	2301      	movs	r3, #1
 800b1fc:	4606      	mov	r6, r0
 800b1fe:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b202:	3d01      	subs	r5, #1
 800b204:	930e      	str	r3, [sp, #56]	; 0x38
 800b206:	e76a      	b.n	800b0de <_dtoa_r+0x116>
 800b208:	2301      	movs	r3, #1
 800b20a:	e7b2      	b.n	800b172 <_dtoa_r+0x1aa>
 800b20c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b20e:	e7b1      	b.n	800b174 <_dtoa_r+0x1ac>
 800b210:	9b04      	ldr	r3, [sp, #16]
 800b212:	9a00      	ldr	r2, [sp, #0]
 800b214:	1a9b      	subs	r3, r3, r2
 800b216:	9304      	str	r3, [sp, #16]
 800b218:	4253      	negs	r3, r2
 800b21a:	9307      	str	r3, [sp, #28]
 800b21c:	2300      	movs	r3, #0
 800b21e:	930a      	str	r3, [sp, #40]	; 0x28
 800b220:	e7bf      	b.n	800b1a2 <_dtoa_r+0x1da>
 800b222:	2300      	movs	r3, #0
 800b224:	9308      	str	r3, [sp, #32]
 800b226:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b228:	2b00      	cmp	r3, #0
 800b22a:	dc55      	bgt.n	800b2d8 <_dtoa_r+0x310>
 800b22c:	2301      	movs	r3, #1
 800b22e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b232:	461a      	mov	r2, r3
 800b234:	9209      	str	r2, [sp, #36]	; 0x24
 800b236:	e00c      	b.n	800b252 <_dtoa_r+0x28a>
 800b238:	2301      	movs	r3, #1
 800b23a:	e7f3      	b.n	800b224 <_dtoa_r+0x25c>
 800b23c:	2300      	movs	r3, #0
 800b23e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b240:	9308      	str	r3, [sp, #32]
 800b242:	9b00      	ldr	r3, [sp, #0]
 800b244:	4413      	add	r3, r2
 800b246:	9302      	str	r3, [sp, #8]
 800b248:	3301      	adds	r3, #1
 800b24a:	2b01      	cmp	r3, #1
 800b24c:	9303      	str	r3, [sp, #12]
 800b24e:	bfb8      	it	lt
 800b250:	2301      	movlt	r3, #1
 800b252:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b254:	2200      	movs	r2, #0
 800b256:	6042      	str	r2, [r0, #4]
 800b258:	2204      	movs	r2, #4
 800b25a:	f102 0614 	add.w	r6, r2, #20
 800b25e:	429e      	cmp	r6, r3
 800b260:	6841      	ldr	r1, [r0, #4]
 800b262:	d93d      	bls.n	800b2e0 <_dtoa_r+0x318>
 800b264:	4620      	mov	r0, r4
 800b266:	f001 f84b 	bl	800c300 <_Balloc>
 800b26a:	9001      	str	r0, [sp, #4]
 800b26c:	2800      	cmp	r0, #0
 800b26e:	d13b      	bne.n	800b2e8 <_dtoa_r+0x320>
 800b270:	4b11      	ldr	r3, [pc, #68]	; (800b2b8 <_dtoa_r+0x2f0>)
 800b272:	4602      	mov	r2, r0
 800b274:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b278:	e6c0      	b.n	800affc <_dtoa_r+0x34>
 800b27a:	2301      	movs	r3, #1
 800b27c:	e7df      	b.n	800b23e <_dtoa_r+0x276>
 800b27e:	bf00      	nop
 800b280:	636f4361 	.word	0x636f4361
 800b284:	3fd287a7 	.word	0x3fd287a7
 800b288:	8b60c8b3 	.word	0x8b60c8b3
 800b28c:	3fc68a28 	.word	0x3fc68a28
 800b290:	509f79fb 	.word	0x509f79fb
 800b294:	3fd34413 	.word	0x3fd34413
 800b298:	0800e0c8 	.word	0x0800e0c8
 800b29c:	0800e185 	.word	0x0800e185
 800b2a0:	7ff00000 	.word	0x7ff00000
 800b2a4:	0800e181 	.word	0x0800e181
 800b2a8:	0800e178 	.word	0x0800e178
 800b2ac:	0800e051 	.word	0x0800e051
 800b2b0:	3ff80000 	.word	0x3ff80000
 800b2b4:	0800e2f0 	.word	0x0800e2f0
 800b2b8:	0800e1e0 	.word	0x0800e1e0
 800b2bc:	2501      	movs	r5, #1
 800b2be:	2300      	movs	r3, #0
 800b2c0:	9306      	str	r3, [sp, #24]
 800b2c2:	9508      	str	r5, [sp, #32]
 800b2c4:	f04f 33ff 	mov.w	r3, #4294967295
 800b2c8:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2cc:	2200      	movs	r2, #0
 800b2ce:	2312      	movs	r3, #18
 800b2d0:	e7b0      	b.n	800b234 <_dtoa_r+0x26c>
 800b2d2:	2301      	movs	r3, #1
 800b2d4:	9308      	str	r3, [sp, #32]
 800b2d6:	e7f5      	b.n	800b2c4 <_dtoa_r+0x2fc>
 800b2d8:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b2da:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b2de:	e7b8      	b.n	800b252 <_dtoa_r+0x28a>
 800b2e0:	3101      	adds	r1, #1
 800b2e2:	6041      	str	r1, [r0, #4]
 800b2e4:	0052      	lsls	r2, r2, #1
 800b2e6:	e7b8      	b.n	800b25a <_dtoa_r+0x292>
 800b2e8:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b2ea:	9a01      	ldr	r2, [sp, #4]
 800b2ec:	601a      	str	r2, [r3, #0]
 800b2ee:	9b03      	ldr	r3, [sp, #12]
 800b2f0:	2b0e      	cmp	r3, #14
 800b2f2:	f200 809d 	bhi.w	800b430 <_dtoa_r+0x468>
 800b2f6:	2d00      	cmp	r5, #0
 800b2f8:	f000 809a 	beq.w	800b430 <_dtoa_r+0x468>
 800b2fc:	9b00      	ldr	r3, [sp, #0]
 800b2fe:	2b00      	cmp	r3, #0
 800b300:	dd32      	ble.n	800b368 <_dtoa_r+0x3a0>
 800b302:	4ab7      	ldr	r2, [pc, #732]	; (800b5e0 <_dtoa_r+0x618>)
 800b304:	f003 030f 	and.w	r3, r3, #15
 800b308:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b30c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b310:	9b00      	ldr	r3, [sp, #0]
 800b312:	05d8      	lsls	r0, r3, #23
 800b314:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b318:	d516      	bpl.n	800b348 <_dtoa_r+0x380>
 800b31a:	4bb2      	ldr	r3, [pc, #712]	; (800b5e4 <_dtoa_r+0x61c>)
 800b31c:	ec51 0b19 	vmov	r0, r1, d9
 800b320:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b324:	f7f5 fa92 	bl	800084c <__aeabi_ddiv>
 800b328:	f007 070f 	and.w	r7, r7, #15
 800b32c:	4682      	mov	sl, r0
 800b32e:	468b      	mov	fp, r1
 800b330:	2503      	movs	r5, #3
 800b332:	4eac      	ldr	r6, [pc, #688]	; (800b5e4 <_dtoa_r+0x61c>)
 800b334:	b957      	cbnz	r7, 800b34c <_dtoa_r+0x384>
 800b336:	4642      	mov	r2, r8
 800b338:	464b      	mov	r3, r9
 800b33a:	4650      	mov	r0, sl
 800b33c:	4659      	mov	r1, fp
 800b33e:	f7f5 fa85 	bl	800084c <__aeabi_ddiv>
 800b342:	4682      	mov	sl, r0
 800b344:	468b      	mov	fp, r1
 800b346:	e028      	b.n	800b39a <_dtoa_r+0x3d2>
 800b348:	2502      	movs	r5, #2
 800b34a:	e7f2      	b.n	800b332 <_dtoa_r+0x36a>
 800b34c:	07f9      	lsls	r1, r7, #31
 800b34e:	d508      	bpl.n	800b362 <_dtoa_r+0x39a>
 800b350:	4640      	mov	r0, r8
 800b352:	4649      	mov	r1, r9
 800b354:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b358:	f7f5 f94e 	bl	80005f8 <__aeabi_dmul>
 800b35c:	3501      	adds	r5, #1
 800b35e:	4680      	mov	r8, r0
 800b360:	4689      	mov	r9, r1
 800b362:	107f      	asrs	r7, r7, #1
 800b364:	3608      	adds	r6, #8
 800b366:	e7e5      	b.n	800b334 <_dtoa_r+0x36c>
 800b368:	f000 809b 	beq.w	800b4a2 <_dtoa_r+0x4da>
 800b36c:	9b00      	ldr	r3, [sp, #0]
 800b36e:	4f9d      	ldr	r7, [pc, #628]	; (800b5e4 <_dtoa_r+0x61c>)
 800b370:	425e      	negs	r6, r3
 800b372:	4b9b      	ldr	r3, [pc, #620]	; (800b5e0 <_dtoa_r+0x618>)
 800b374:	f006 020f 	and.w	r2, r6, #15
 800b378:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b37c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b380:	ec51 0b19 	vmov	r0, r1, d9
 800b384:	f7f5 f938 	bl	80005f8 <__aeabi_dmul>
 800b388:	1136      	asrs	r6, r6, #4
 800b38a:	4682      	mov	sl, r0
 800b38c:	468b      	mov	fp, r1
 800b38e:	2300      	movs	r3, #0
 800b390:	2502      	movs	r5, #2
 800b392:	2e00      	cmp	r6, #0
 800b394:	d17a      	bne.n	800b48c <_dtoa_r+0x4c4>
 800b396:	2b00      	cmp	r3, #0
 800b398:	d1d3      	bne.n	800b342 <_dtoa_r+0x37a>
 800b39a:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b39c:	2b00      	cmp	r3, #0
 800b39e:	f000 8082 	beq.w	800b4a6 <_dtoa_r+0x4de>
 800b3a2:	4b91      	ldr	r3, [pc, #580]	; (800b5e8 <_dtoa_r+0x620>)
 800b3a4:	2200      	movs	r2, #0
 800b3a6:	4650      	mov	r0, sl
 800b3a8:	4659      	mov	r1, fp
 800b3aa:	f7f5 fb97 	bl	8000adc <__aeabi_dcmplt>
 800b3ae:	2800      	cmp	r0, #0
 800b3b0:	d079      	beq.n	800b4a6 <_dtoa_r+0x4de>
 800b3b2:	9b03      	ldr	r3, [sp, #12]
 800b3b4:	2b00      	cmp	r3, #0
 800b3b6:	d076      	beq.n	800b4a6 <_dtoa_r+0x4de>
 800b3b8:	9b02      	ldr	r3, [sp, #8]
 800b3ba:	2b00      	cmp	r3, #0
 800b3bc:	dd36      	ble.n	800b42c <_dtoa_r+0x464>
 800b3be:	9b00      	ldr	r3, [sp, #0]
 800b3c0:	4650      	mov	r0, sl
 800b3c2:	4659      	mov	r1, fp
 800b3c4:	1e5f      	subs	r7, r3, #1
 800b3c6:	2200      	movs	r2, #0
 800b3c8:	4b88      	ldr	r3, [pc, #544]	; (800b5ec <_dtoa_r+0x624>)
 800b3ca:	f7f5 f915 	bl	80005f8 <__aeabi_dmul>
 800b3ce:	9e02      	ldr	r6, [sp, #8]
 800b3d0:	4682      	mov	sl, r0
 800b3d2:	468b      	mov	fp, r1
 800b3d4:	3501      	adds	r5, #1
 800b3d6:	4628      	mov	r0, r5
 800b3d8:	f7f5 f8a4 	bl	8000524 <__aeabi_i2d>
 800b3dc:	4652      	mov	r2, sl
 800b3de:	465b      	mov	r3, fp
 800b3e0:	f7f5 f90a 	bl	80005f8 <__aeabi_dmul>
 800b3e4:	4b82      	ldr	r3, [pc, #520]	; (800b5f0 <_dtoa_r+0x628>)
 800b3e6:	2200      	movs	r2, #0
 800b3e8:	f7f4 ff50 	bl	800028c <__adddf3>
 800b3ec:	46d0      	mov	r8, sl
 800b3ee:	46d9      	mov	r9, fp
 800b3f0:	4682      	mov	sl, r0
 800b3f2:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b3f6:	2e00      	cmp	r6, #0
 800b3f8:	d158      	bne.n	800b4ac <_dtoa_r+0x4e4>
 800b3fa:	4b7e      	ldr	r3, [pc, #504]	; (800b5f4 <_dtoa_r+0x62c>)
 800b3fc:	2200      	movs	r2, #0
 800b3fe:	4640      	mov	r0, r8
 800b400:	4649      	mov	r1, r9
 800b402:	f7f4 ff41 	bl	8000288 <__aeabi_dsub>
 800b406:	4652      	mov	r2, sl
 800b408:	465b      	mov	r3, fp
 800b40a:	4680      	mov	r8, r0
 800b40c:	4689      	mov	r9, r1
 800b40e:	f7f5 fb83 	bl	8000b18 <__aeabi_dcmpgt>
 800b412:	2800      	cmp	r0, #0
 800b414:	f040 8295 	bne.w	800b942 <_dtoa_r+0x97a>
 800b418:	4652      	mov	r2, sl
 800b41a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b41e:	4640      	mov	r0, r8
 800b420:	4649      	mov	r1, r9
 800b422:	f7f5 fb5b 	bl	8000adc <__aeabi_dcmplt>
 800b426:	2800      	cmp	r0, #0
 800b428:	f040 8289 	bne.w	800b93e <_dtoa_r+0x976>
 800b42c:	ec5b ab19 	vmov	sl, fp, d9
 800b430:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b432:	2b00      	cmp	r3, #0
 800b434:	f2c0 8148 	blt.w	800b6c8 <_dtoa_r+0x700>
 800b438:	9a00      	ldr	r2, [sp, #0]
 800b43a:	2a0e      	cmp	r2, #14
 800b43c:	f300 8144 	bgt.w	800b6c8 <_dtoa_r+0x700>
 800b440:	4b67      	ldr	r3, [pc, #412]	; (800b5e0 <_dtoa_r+0x618>)
 800b442:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b446:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b44a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b44c:	2b00      	cmp	r3, #0
 800b44e:	f280 80d5 	bge.w	800b5fc <_dtoa_r+0x634>
 800b452:	9b03      	ldr	r3, [sp, #12]
 800b454:	2b00      	cmp	r3, #0
 800b456:	f300 80d1 	bgt.w	800b5fc <_dtoa_r+0x634>
 800b45a:	f040 826f 	bne.w	800b93c <_dtoa_r+0x974>
 800b45e:	4b65      	ldr	r3, [pc, #404]	; (800b5f4 <_dtoa_r+0x62c>)
 800b460:	2200      	movs	r2, #0
 800b462:	4640      	mov	r0, r8
 800b464:	4649      	mov	r1, r9
 800b466:	f7f5 f8c7 	bl	80005f8 <__aeabi_dmul>
 800b46a:	4652      	mov	r2, sl
 800b46c:	465b      	mov	r3, fp
 800b46e:	f7f5 fb49 	bl	8000b04 <__aeabi_dcmpge>
 800b472:	9e03      	ldr	r6, [sp, #12]
 800b474:	4637      	mov	r7, r6
 800b476:	2800      	cmp	r0, #0
 800b478:	f040 8245 	bne.w	800b906 <_dtoa_r+0x93e>
 800b47c:	9d01      	ldr	r5, [sp, #4]
 800b47e:	2331      	movs	r3, #49	; 0x31
 800b480:	f805 3b01 	strb.w	r3, [r5], #1
 800b484:	9b00      	ldr	r3, [sp, #0]
 800b486:	3301      	adds	r3, #1
 800b488:	9300      	str	r3, [sp, #0]
 800b48a:	e240      	b.n	800b90e <_dtoa_r+0x946>
 800b48c:	07f2      	lsls	r2, r6, #31
 800b48e:	d505      	bpl.n	800b49c <_dtoa_r+0x4d4>
 800b490:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b494:	f7f5 f8b0 	bl	80005f8 <__aeabi_dmul>
 800b498:	3501      	adds	r5, #1
 800b49a:	2301      	movs	r3, #1
 800b49c:	1076      	asrs	r6, r6, #1
 800b49e:	3708      	adds	r7, #8
 800b4a0:	e777      	b.n	800b392 <_dtoa_r+0x3ca>
 800b4a2:	2502      	movs	r5, #2
 800b4a4:	e779      	b.n	800b39a <_dtoa_r+0x3d2>
 800b4a6:	9f00      	ldr	r7, [sp, #0]
 800b4a8:	9e03      	ldr	r6, [sp, #12]
 800b4aa:	e794      	b.n	800b3d6 <_dtoa_r+0x40e>
 800b4ac:	9901      	ldr	r1, [sp, #4]
 800b4ae:	4b4c      	ldr	r3, [pc, #304]	; (800b5e0 <_dtoa_r+0x618>)
 800b4b0:	4431      	add	r1, r6
 800b4b2:	910d      	str	r1, [sp, #52]	; 0x34
 800b4b4:	9908      	ldr	r1, [sp, #32]
 800b4b6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b4ba:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b4be:	2900      	cmp	r1, #0
 800b4c0:	d043      	beq.n	800b54a <_dtoa_r+0x582>
 800b4c2:	494d      	ldr	r1, [pc, #308]	; (800b5f8 <_dtoa_r+0x630>)
 800b4c4:	2000      	movs	r0, #0
 800b4c6:	f7f5 f9c1 	bl	800084c <__aeabi_ddiv>
 800b4ca:	4652      	mov	r2, sl
 800b4cc:	465b      	mov	r3, fp
 800b4ce:	f7f4 fedb 	bl	8000288 <__aeabi_dsub>
 800b4d2:	9d01      	ldr	r5, [sp, #4]
 800b4d4:	4682      	mov	sl, r0
 800b4d6:	468b      	mov	fp, r1
 800b4d8:	4649      	mov	r1, r9
 800b4da:	4640      	mov	r0, r8
 800b4dc:	f7f5 fb3c 	bl	8000b58 <__aeabi_d2iz>
 800b4e0:	4606      	mov	r6, r0
 800b4e2:	f7f5 f81f 	bl	8000524 <__aeabi_i2d>
 800b4e6:	4602      	mov	r2, r0
 800b4e8:	460b      	mov	r3, r1
 800b4ea:	4640      	mov	r0, r8
 800b4ec:	4649      	mov	r1, r9
 800b4ee:	f7f4 fecb 	bl	8000288 <__aeabi_dsub>
 800b4f2:	3630      	adds	r6, #48	; 0x30
 800b4f4:	f805 6b01 	strb.w	r6, [r5], #1
 800b4f8:	4652      	mov	r2, sl
 800b4fa:	465b      	mov	r3, fp
 800b4fc:	4680      	mov	r8, r0
 800b4fe:	4689      	mov	r9, r1
 800b500:	f7f5 faec 	bl	8000adc <__aeabi_dcmplt>
 800b504:	2800      	cmp	r0, #0
 800b506:	d163      	bne.n	800b5d0 <_dtoa_r+0x608>
 800b508:	4642      	mov	r2, r8
 800b50a:	464b      	mov	r3, r9
 800b50c:	4936      	ldr	r1, [pc, #216]	; (800b5e8 <_dtoa_r+0x620>)
 800b50e:	2000      	movs	r0, #0
 800b510:	f7f4 feba 	bl	8000288 <__aeabi_dsub>
 800b514:	4652      	mov	r2, sl
 800b516:	465b      	mov	r3, fp
 800b518:	f7f5 fae0 	bl	8000adc <__aeabi_dcmplt>
 800b51c:	2800      	cmp	r0, #0
 800b51e:	f040 80b5 	bne.w	800b68c <_dtoa_r+0x6c4>
 800b522:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b524:	429d      	cmp	r5, r3
 800b526:	d081      	beq.n	800b42c <_dtoa_r+0x464>
 800b528:	4b30      	ldr	r3, [pc, #192]	; (800b5ec <_dtoa_r+0x624>)
 800b52a:	2200      	movs	r2, #0
 800b52c:	4650      	mov	r0, sl
 800b52e:	4659      	mov	r1, fp
 800b530:	f7f5 f862 	bl	80005f8 <__aeabi_dmul>
 800b534:	4b2d      	ldr	r3, [pc, #180]	; (800b5ec <_dtoa_r+0x624>)
 800b536:	4682      	mov	sl, r0
 800b538:	468b      	mov	fp, r1
 800b53a:	4640      	mov	r0, r8
 800b53c:	4649      	mov	r1, r9
 800b53e:	2200      	movs	r2, #0
 800b540:	f7f5 f85a 	bl	80005f8 <__aeabi_dmul>
 800b544:	4680      	mov	r8, r0
 800b546:	4689      	mov	r9, r1
 800b548:	e7c6      	b.n	800b4d8 <_dtoa_r+0x510>
 800b54a:	4650      	mov	r0, sl
 800b54c:	4659      	mov	r1, fp
 800b54e:	f7f5 f853 	bl	80005f8 <__aeabi_dmul>
 800b552:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b554:	9d01      	ldr	r5, [sp, #4]
 800b556:	930f      	str	r3, [sp, #60]	; 0x3c
 800b558:	4682      	mov	sl, r0
 800b55a:	468b      	mov	fp, r1
 800b55c:	4649      	mov	r1, r9
 800b55e:	4640      	mov	r0, r8
 800b560:	f7f5 fafa 	bl	8000b58 <__aeabi_d2iz>
 800b564:	4606      	mov	r6, r0
 800b566:	f7f4 ffdd 	bl	8000524 <__aeabi_i2d>
 800b56a:	3630      	adds	r6, #48	; 0x30
 800b56c:	4602      	mov	r2, r0
 800b56e:	460b      	mov	r3, r1
 800b570:	4640      	mov	r0, r8
 800b572:	4649      	mov	r1, r9
 800b574:	f7f4 fe88 	bl	8000288 <__aeabi_dsub>
 800b578:	f805 6b01 	strb.w	r6, [r5], #1
 800b57c:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b57e:	429d      	cmp	r5, r3
 800b580:	4680      	mov	r8, r0
 800b582:	4689      	mov	r9, r1
 800b584:	f04f 0200 	mov.w	r2, #0
 800b588:	d124      	bne.n	800b5d4 <_dtoa_r+0x60c>
 800b58a:	4b1b      	ldr	r3, [pc, #108]	; (800b5f8 <_dtoa_r+0x630>)
 800b58c:	4650      	mov	r0, sl
 800b58e:	4659      	mov	r1, fp
 800b590:	f7f4 fe7c 	bl	800028c <__adddf3>
 800b594:	4602      	mov	r2, r0
 800b596:	460b      	mov	r3, r1
 800b598:	4640      	mov	r0, r8
 800b59a:	4649      	mov	r1, r9
 800b59c:	f7f5 fabc 	bl	8000b18 <__aeabi_dcmpgt>
 800b5a0:	2800      	cmp	r0, #0
 800b5a2:	d173      	bne.n	800b68c <_dtoa_r+0x6c4>
 800b5a4:	4652      	mov	r2, sl
 800b5a6:	465b      	mov	r3, fp
 800b5a8:	4913      	ldr	r1, [pc, #76]	; (800b5f8 <_dtoa_r+0x630>)
 800b5aa:	2000      	movs	r0, #0
 800b5ac:	f7f4 fe6c 	bl	8000288 <__aeabi_dsub>
 800b5b0:	4602      	mov	r2, r0
 800b5b2:	460b      	mov	r3, r1
 800b5b4:	4640      	mov	r0, r8
 800b5b6:	4649      	mov	r1, r9
 800b5b8:	f7f5 fa90 	bl	8000adc <__aeabi_dcmplt>
 800b5bc:	2800      	cmp	r0, #0
 800b5be:	f43f af35 	beq.w	800b42c <_dtoa_r+0x464>
 800b5c2:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b5c4:	1e6b      	subs	r3, r5, #1
 800b5c6:	930f      	str	r3, [sp, #60]	; 0x3c
 800b5c8:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b5cc:	2b30      	cmp	r3, #48	; 0x30
 800b5ce:	d0f8      	beq.n	800b5c2 <_dtoa_r+0x5fa>
 800b5d0:	9700      	str	r7, [sp, #0]
 800b5d2:	e049      	b.n	800b668 <_dtoa_r+0x6a0>
 800b5d4:	4b05      	ldr	r3, [pc, #20]	; (800b5ec <_dtoa_r+0x624>)
 800b5d6:	f7f5 f80f 	bl	80005f8 <__aeabi_dmul>
 800b5da:	4680      	mov	r8, r0
 800b5dc:	4689      	mov	r9, r1
 800b5de:	e7bd      	b.n	800b55c <_dtoa_r+0x594>
 800b5e0:	0800e2f0 	.word	0x0800e2f0
 800b5e4:	0800e2c8 	.word	0x0800e2c8
 800b5e8:	3ff00000 	.word	0x3ff00000
 800b5ec:	40240000 	.word	0x40240000
 800b5f0:	401c0000 	.word	0x401c0000
 800b5f4:	40140000 	.word	0x40140000
 800b5f8:	3fe00000 	.word	0x3fe00000
 800b5fc:	9d01      	ldr	r5, [sp, #4]
 800b5fe:	4656      	mov	r6, sl
 800b600:	465f      	mov	r7, fp
 800b602:	4642      	mov	r2, r8
 800b604:	464b      	mov	r3, r9
 800b606:	4630      	mov	r0, r6
 800b608:	4639      	mov	r1, r7
 800b60a:	f7f5 f91f 	bl	800084c <__aeabi_ddiv>
 800b60e:	f7f5 faa3 	bl	8000b58 <__aeabi_d2iz>
 800b612:	4682      	mov	sl, r0
 800b614:	f7f4 ff86 	bl	8000524 <__aeabi_i2d>
 800b618:	4642      	mov	r2, r8
 800b61a:	464b      	mov	r3, r9
 800b61c:	f7f4 ffec 	bl	80005f8 <__aeabi_dmul>
 800b620:	4602      	mov	r2, r0
 800b622:	460b      	mov	r3, r1
 800b624:	4630      	mov	r0, r6
 800b626:	4639      	mov	r1, r7
 800b628:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b62c:	f7f4 fe2c 	bl	8000288 <__aeabi_dsub>
 800b630:	f805 6b01 	strb.w	r6, [r5], #1
 800b634:	9e01      	ldr	r6, [sp, #4]
 800b636:	9f03      	ldr	r7, [sp, #12]
 800b638:	1bae      	subs	r6, r5, r6
 800b63a:	42b7      	cmp	r7, r6
 800b63c:	4602      	mov	r2, r0
 800b63e:	460b      	mov	r3, r1
 800b640:	d135      	bne.n	800b6ae <_dtoa_r+0x6e6>
 800b642:	f7f4 fe23 	bl	800028c <__adddf3>
 800b646:	4642      	mov	r2, r8
 800b648:	464b      	mov	r3, r9
 800b64a:	4606      	mov	r6, r0
 800b64c:	460f      	mov	r7, r1
 800b64e:	f7f5 fa63 	bl	8000b18 <__aeabi_dcmpgt>
 800b652:	b9d0      	cbnz	r0, 800b68a <_dtoa_r+0x6c2>
 800b654:	4642      	mov	r2, r8
 800b656:	464b      	mov	r3, r9
 800b658:	4630      	mov	r0, r6
 800b65a:	4639      	mov	r1, r7
 800b65c:	f7f5 fa34 	bl	8000ac8 <__aeabi_dcmpeq>
 800b660:	b110      	cbz	r0, 800b668 <_dtoa_r+0x6a0>
 800b662:	f01a 0f01 	tst.w	sl, #1
 800b666:	d110      	bne.n	800b68a <_dtoa_r+0x6c2>
 800b668:	4620      	mov	r0, r4
 800b66a:	ee18 1a10 	vmov	r1, s16
 800b66e:	f000 fe87 	bl	800c380 <_Bfree>
 800b672:	2300      	movs	r3, #0
 800b674:	9800      	ldr	r0, [sp, #0]
 800b676:	702b      	strb	r3, [r5, #0]
 800b678:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b67a:	3001      	adds	r0, #1
 800b67c:	6018      	str	r0, [r3, #0]
 800b67e:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b680:	2b00      	cmp	r3, #0
 800b682:	f43f acf1 	beq.w	800b068 <_dtoa_r+0xa0>
 800b686:	601d      	str	r5, [r3, #0]
 800b688:	e4ee      	b.n	800b068 <_dtoa_r+0xa0>
 800b68a:	9f00      	ldr	r7, [sp, #0]
 800b68c:	462b      	mov	r3, r5
 800b68e:	461d      	mov	r5, r3
 800b690:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b694:	2a39      	cmp	r2, #57	; 0x39
 800b696:	d106      	bne.n	800b6a6 <_dtoa_r+0x6de>
 800b698:	9a01      	ldr	r2, [sp, #4]
 800b69a:	429a      	cmp	r2, r3
 800b69c:	d1f7      	bne.n	800b68e <_dtoa_r+0x6c6>
 800b69e:	9901      	ldr	r1, [sp, #4]
 800b6a0:	2230      	movs	r2, #48	; 0x30
 800b6a2:	3701      	adds	r7, #1
 800b6a4:	700a      	strb	r2, [r1, #0]
 800b6a6:	781a      	ldrb	r2, [r3, #0]
 800b6a8:	3201      	adds	r2, #1
 800b6aa:	701a      	strb	r2, [r3, #0]
 800b6ac:	e790      	b.n	800b5d0 <_dtoa_r+0x608>
 800b6ae:	4ba6      	ldr	r3, [pc, #664]	; (800b948 <_dtoa_r+0x980>)
 800b6b0:	2200      	movs	r2, #0
 800b6b2:	f7f4 ffa1 	bl	80005f8 <__aeabi_dmul>
 800b6b6:	2200      	movs	r2, #0
 800b6b8:	2300      	movs	r3, #0
 800b6ba:	4606      	mov	r6, r0
 800b6bc:	460f      	mov	r7, r1
 800b6be:	f7f5 fa03 	bl	8000ac8 <__aeabi_dcmpeq>
 800b6c2:	2800      	cmp	r0, #0
 800b6c4:	d09d      	beq.n	800b602 <_dtoa_r+0x63a>
 800b6c6:	e7cf      	b.n	800b668 <_dtoa_r+0x6a0>
 800b6c8:	9a08      	ldr	r2, [sp, #32]
 800b6ca:	2a00      	cmp	r2, #0
 800b6cc:	f000 80d7 	beq.w	800b87e <_dtoa_r+0x8b6>
 800b6d0:	9a06      	ldr	r2, [sp, #24]
 800b6d2:	2a01      	cmp	r2, #1
 800b6d4:	f300 80ba 	bgt.w	800b84c <_dtoa_r+0x884>
 800b6d8:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b6da:	2a00      	cmp	r2, #0
 800b6dc:	f000 80b2 	beq.w	800b844 <_dtoa_r+0x87c>
 800b6e0:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b6e4:	9e07      	ldr	r6, [sp, #28]
 800b6e6:	9d04      	ldr	r5, [sp, #16]
 800b6e8:	9a04      	ldr	r2, [sp, #16]
 800b6ea:	441a      	add	r2, r3
 800b6ec:	9204      	str	r2, [sp, #16]
 800b6ee:	9a05      	ldr	r2, [sp, #20]
 800b6f0:	2101      	movs	r1, #1
 800b6f2:	441a      	add	r2, r3
 800b6f4:	4620      	mov	r0, r4
 800b6f6:	9205      	str	r2, [sp, #20]
 800b6f8:	f000 ff44 	bl	800c584 <__i2b>
 800b6fc:	4607      	mov	r7, r0
 800b6fe:	2d00      	cmp	r5, #0
 800b700:	dd0c      	ble.n	800b71c <_dtoa_r+0x754>
 800b702:	9b05      	ldr	r3, [sp, #20]
 800b704:	2b00      	cmp	r3, #0
 800b706:	dd09      	ble.n	800b71c <_dtoa_r+0x754>
 800b708:	42ab      	cmp	r3, r5
 800b70a:	9a04      	ldr	r2, [sp, #16]
 800b70c:	bfa8      	it	ge
 800b70e:	462b      	movge	r3, r5
 800b710:	1ad2      	subs	r2, r2, r3
 800b712:	9204      	str	r2, [sp, #16]
 800b714:	9a05      	ldr	r2, [sp, #20]
 800b716:	1aed      	subs	r5, r5, r3
 800b718:	1ad3      	subs	r3, r2, r3
 800b71a:	9305      	str	r3, [sp, #20]
 800b71c:	9b07      	ldr	r3, [sp, #28]
 800b71e:	b31b      	cbz	r3, 800b768 <_dtoa_r+0x7a0>
 800b720:	9b08      	ldr	r3, [sp, #32]
 800b722:	2b00      	cmp	r3, #0
 800b724:	f000 80af 	beq.w	800b886 <_dtoa_r+0x8be>
 800b728:	2e00      	cmp	r6, #0
 800b72a:	dd13      	ble.n	800b754 <_dtoa_r+0x78c>
 800b72c:	4639      	mov	r1, r7
 800b72e:	4632      	mov	r2, r6
 800b730:	4620      	mov	r0, r4
 800b732:	f000 ffe7 	bl	800c704 <__pow5mult>
 800b736:	ee18 2a10 	vmov	r2, s16
 800b73a:	4601      	mov	r1, r0
 800b73c:	4607      	mov	r7, r0
 800b73e:	4620      	mov	r0, r4
 800b740:	f000 ff36 	bl	800c5b0 <__multiply>
 800b744:	ee18 1a10 	vmov	r1, s16
 800b748:	4680      	mov	r8, r0
 800b74a:	4620      	mov	r0, r4
 800b74c:	f000 fe18 	bl	800c380 <_Bfree>
 800b750:	ee08 8a10 	vmov	s16, r8
 800b754:	9b07      	ldr	r3, [sp, #28]
 800b756:	1b9a      	subs	r2, r3, r6
 800b758:	d006      	beq.n	800b768 <_dtoa_r+0x7a0>
 800b75a:	ee18 1a10 	vmov	r1, s16
 800b75e:	4620      	mov	r0, r4
 800b760:	f000 ffd0 	bl	800c704 <__pow5mult>
 800b764:	ee08 0a10 	vmov	s16, r0
 800b768:	2101      	movs	r1, #1
 800b76a:	4620      	mov	r0, r4
 800b76c:	f000 ff0a 	bl	800c584 <__i2b>
 800b770:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b772:	2b00      	cmp	r3, #0
 800b774:	4606      	mov	r6, r0
 800b776:	f340 8088 	ble.w	800b88a <_dtoa_r+0x8c2>
 800b77a:	461a      	mov	r2, r3
 800b77c:	4601      	mov	r1, r0
 800b77e:	4620      	mov	r0, r4
 800b780:	f000 ffc0 	bl	800c704 <__pow5mult>
 800b784:	9b06      	ldr	r3, [sp, #24]
 800b786:	2b01      	cmp	r3, #1
 800b788:	4606      	mov	r6, r0
 800b78a:	f340 8081 	ble.w	800b890 <_dtoa_r+0x8c8>
 800b78e:	f04f 0800 	mov.w	r8, #0
 800b792:	6933      	ldr	r3, [r6, #16]
 800b794:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b798:	6918      	ldr	r0, [r3, #16]
 800b79a:	f000 fea3 	bl	800c4e4 <__hi0bits>
 800b79e:	f1c0 0020 	rsb	r0, r0, #32
 800b7a2:	9b05      	ldr	r3, [sp, #20]
 800b7a4:	4418      	add	r0, r3
 800b7a6:	f010 001f 	ands.w	r0, r0, #31
 800b7aa:	f000 8092 	beq.w	800b8d2 <_dtoa_r+0x90a>
 800b7ae:	f1c0 0320 	rsb	r3, r0, #32
 800b7b2:	2b04      	cmp	r3, #4
 800b7b4:	f340 808a 	ble.w	800b8cc <_dtoa_r+0x904>
 800b7b8:	f1c0 001c 	rsb	r0, r0, #28
 800b7bc:	9b04      	ldr	r3, [sp, #16]
 800b7be:	4403      	add	r3, r0
 800b7c0:	9304      	str	r3, [sp, #16]
 800b7c2:	9b05      	ldr	r3, [sp, #20]
 800b7c4:	4403      	add	r3, r0
 800b7c6:	4405      	add	r5, r0
 800b7c8:	9305      	str	r3, [sp, #20]
 800b7ca:	9b04      	ldr	r3, [sp, #16]
 800b7cc:	2b00      	cmp	r3, #0
 800b7ce:	dd07      	ble.n	800b7e0 <_dtoa_r+0x818>
 800b7d0:	ee18 1a10 	vmov	r1, s16
 800b7d4:	461a      	mov	r2, r3
 800b7d6:	4620      	mov	r0, r4
 800b7d8:	f000 ffee 	bl	800c7b8 <__lshift>
 800b7dc:	ee08 0a10 	vmov	s16, r0
 800b7e0:	9b05      	ldr	r3, [sp, #20]
 800b7e2:	2b00      	cmp	r3, #0
 800b7e4:	dd05      	ble.n	800b7f2 <_dtoa_r+0x82a>
 800b7e6:	4631      	mov	r1, r6
 800b7e8:	461a      	mov	r2, r3
 800b7ea:	4620      	mov	r0, r4
 800b7ec:	f000 ffe4 	bl	800c7b8 <__lshift>
 800b7f0:	4606      	mov	r6, r0
 800b7f2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b7f4:	2b00      	cmp	r3, #0
 800b7f6:	d06e      	beq.n	800b8d6 <_dtoa_r+0x90e>
 800b7f8:	ee18 0a10 	vmov	r0, s16
 800b7fc:	4631      	mov	r1, r6
 800b7fe:	f001 f84b 	bl	800c898 <__mcmp>
 800b802:	2800      	cmp	r0, #0
 800b804:	da67      	bge.n	800b8d6 <_dtoa_r+0x90e>
 800b806:	9b00      	ldr	r3, [sp, #0]
 800b808:	3b01      	subs	r3, #1
 800b80a:	ee18 1a10 	vmov	r1, s16
 800b80e:	9300      	str	r3, [sp, #0]
 800b810:	220a      	movs	r2, #10
 800b812:	2300      	movs	r3, #0
 800b814:	4620      	mov	r0, r4
 800b816:	f000 fdd5 	bl	800c3c4 <__multadd>
 800b81a:	9b08      	ldr	r3, [sp, #32]
 800b81c:	ee08 0a10 	vmov	s16, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	f000 81b1 	beq.w	800bb88 <_dtoa_r+0xbc0>
 800b826:	2300      	movs	r3, #0
 800b828:	4639      	mov	r1, r7
 800b82a:	220a      	movs	r2, #10
 800b82c:	4620      	mov	r0, r4
 800b82e:	f000 fdc9 	bl	800c3c4 <__multadd>
 800b832:	9b02      	ldr	r3, [sp, #8]
 800b834:	2b00      	cmp	r3, #0
 800b836:	4607      	mov	r7, r0
 800b838:	f300 808e 	bgt.w	800b958 <_dtoa_r+0x990>
 800b83c:	9b06      	ldr	r3, [sp, #24]
 800b83e:	2b02      	cmp	r3, #2
 800b840:	dc51      	bgt.n	800b8e6 <_dtoa_r+0x91e>
 800b842:	e089      	b.n	800b958 <_dtoa_r+0x990>
 800b844:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b846:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b84a:	e74b      	b.n	800b6e4 <_dtoa_r+0x71c>
 800b84c:	9b03      	ldr	r3, [sp, #12]
 800b84e:	1e5e      	subs	r6, r3, #1
 800b850:	9b07      	ldr	r3, [sp, #28]
 800b852:	42b3      	cmp	r3, r6
 800b854:	bfbf      	itttt	lt
 800b856:	9b07      	ldrlt	r3, [sp, #28]
 800b858:	9607      	strlt	r6, [sp, #28]
 800b85a:	1af2      	sublt	r2, r6, r3
 800b85c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b85e:	bfb6      	itet	lt
 800b860:	189b      	addlt	r3, r3, r2
 800b862:	1b9e      	subge	r6, r3, r6
 800b864:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b866:	9b03      	ldr	r3, [sp, #12]
 800b868:	bfb8      	it	lt
 800b86a:	2600      	movlt	r6, #0
 800b86c:	2b00      	cmp	r3, #0
 800b86e:	bfb7      	itett	lt
 800b870:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b874:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b878:	1a9d      	sublt	r5, r3, r2
 800b87a:	2300      	movlt	r3, #0
 800b87c:	e734      	b.n	800b6e8 <_dtoa_r+0x720>
 800b87e:	9e07      	ldr	r6, [sp, #28]
 800b880:	9d04      	ldr	r5, [sp, #16]
 800b882:	9f08      	ldr	r7, [sp, #32]
 800b884:	e73b      	b.n	800b6fe <_dtoa_r+0x736>
 800b886:	9a07      	ldr	r2, [sp, #28]
 800b888:	e767      	b.n	800b75a <_dtoa_r+0x792>
 800b88a:	9b06      	ldr	r3, [sp, #24]
 800b88c:	2b01      	cmp	r3, #1
 800b88e:	dc18      	bgt.n	800b8c2 <_dtoa_r+0x8fa>
 800b890:	f1ba 0f00 	cmp.w	sl, #0
 800b894:	d115      	bne.n	800b8c2 <_dtoa_r+0x8fa>
 800b896:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b89a:	b993      	cbnz	r3, 800b8c2 <_dtoa_r+0x8fa>
 800b89c:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b8a0:	0d1b      	lsrs	r3, r3, #20
 800b8a2:	051b      	lsls	r3, r3, #20
 800b8a4:	b183      	cbz	r3, 800b8c8 <_dtoa_r+0x900>
 800b8a6:	9b04      	ldr	r3, [sp, #16]
 800b8a8:	3301      	adds	r3, #1
 800b8aa:	9304      	str	r3, [sp, #16]
 800b8ac:	9b05      	ldr	r3, [sp, #20]
 800b8ae:	3301      	adds	r3, #1
 800b8b0:	9305      	str	r3, [sp, #20]
 800b8b2:	f04f 0801 	mov.w	r8, #1
 800b8b6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b8b8:	2b00      	cmp	r3, #0
 800b8ba:	f47f af6a 	bne.w	800b792 <_dtoa_r+0x7ca>
 800b8be:	2001      	movs	r0, #1
 800b8c0:	e76f      	b.n	800b7a2 <_dtoa_r+0x7da>
 800b8c2:	f04f 0800 	mov.w	r8, #0
 800b8c6:	e7f6      	b.n	800b8b6 <_dtoa_r+0x8ee>
 800b8c8:	4698      	mov	r8, r3
 800b8ca:	e7f4      	b.n	800b8b6 <_dtoa_r+0x8ee>
 800b8cc:	f43f af7d 	beq.w	800b7ca <_dtoa_r+0x802>
 800b8d0:	4618      	mov	r0, r3
 800b8d2:	301c      	adds	r0, #28
 800b8d4:	e772      	b.n	800b7bc <_dtoa_r+0x7f4>
 800b8d6:	9b03      	ldr	r3, [sp, #12]
 800b8d8:	2b00      	cmp	r3, #0
 800b8da:	dc37      	bgt.n	800b94c <_dtoa_r+0x984>
 800b8dc:	9b06      	ldr	r3, [sp, #24]
 800b8de:	2b02      	cmp	r3, #2
 800b8e0:	dd34      	ble.n	800b94c <_dtoa_r+0x984>
 800b8e2:	9b03      	ldr	r3, [sp, #12]
 800b8e4:	9302      	str	r3, [sp, #8]
 800b8e6:	9b02      	ldr	r3, [sp, #8]
 800b8e8:	b96b      	cbnz	r3, 800b906 <_dtoa_r+0x93e>
 800b8ea:	4631      	mov	r1, r6
 800b8ec:	2205      	movs	r2, #5
 800b8ee:	4620      	mov	r0, r4
 800b8f0:	f000 fd68 	bl	800c3c4 <__multadd>
 800b8f4:	4601      	mov	r1, r0
 800b8f6:	4606      	mov	r6, r0
 800b8f8:	ee18 0a10 	vmov	r0, s16
 800b8fc:	f000 ffcc 	bl	800c898 <__mcmp>
 800b900:	2800      	cmp	r0, #0
 800b902:	f73f adbb 	bgt.w	800b47c <_dtoa_r+0x4b4>
 800b906:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b908:	9d01      	ldr	r5, [sp, #4]
 800b90a:	43db      	mvns	r3, r3
 800b90c:	9300      	str	r3, [sp, #0]
 800b90e:	f04f 0800 	mov.w	r8, #0
 800b912:	4631      	mov	r1, r6
 800b914:	4620      	mov	r0, r4
 800b916:	f000 fd33 	bl	800c380 <_Bfree>
 800b91a:	2f00      	cmp	r7, #0
 800b91c:	f43f aea4 	beq.w	800b668 <_dtoa_r+0x6a0>
 800b920:	f1b8 0f00 	cmp.w	r8, #0
 800b924:	d005      	beq.n	800b932 <_dtoa_r+0x96a>
 800b926:	45b8      	cmp	r8, r7
 800b928:	d003      	beq.n	800b932 <_dtoa_r+0x96a>
 800b92a:	4641      	mov	r1, r8
 800b92c:	4620      	mov	r0, r4
 800b92e:	f000 fd27 	bl	800c380 <_Bfree>
 800b932:	4639      	mov	r1, r7
 800b934:	4620      	mov	r0, r4
 800b936:	f000 fd23 	bl	800c380 <_Bfree>
 800b93a:	e695      	b.n	800b668 <_dtoa_r+0x6a0>
 800b93c:	2600      	movs	r6, #0
 800b93e:	4637      	mov	r7, r6
 800b940:	e7e1      	b.n	800b906 <_dtoa_r+0x93e>
 800b942:	9700      	str	r7, [sp, #0]
 800b944:	4637      	mov	r7, r6
 800b946:	e599      	b.n	800b47c <_dtoa_r+0x4b4>
 800b948:	40240000 	.word	0x40240000
 800b94c:	9b08      	ldr	r3, [sp, #32]
 800b94e:	2b00      	cmp	r3, #0
 800b950:	f000 80ca 	beq.w	800bae8 <_dtoa_r+0xb20>
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	9302      	str	r3, [sp, #8]
 800b958:	2d00      	cmp	r5, #0
 800b95a:	dd05      	ble.n	800b968 <_dtoa_r+0x9a0>
 800b95c:	4639      	mov	r1, r7
 800b95e:	462a      	mov	r2, r5
 800b960:	4620      	mov	r0, r4
 800b962:	f000 ff29 	bl	800c7b8 <__lshift>
 800b966:	4607      	mov	r7, r0
 800b968:	f1b8 0f00 	cmp.w	r8, #0
 800b96c:	d05b      	beq.n	800ba26 <_dtoa_r+0xa5e>
 800b96e:	6879      	ldr	r1, [r7, #4]
 800b970:	4620      	mov	r0, r4
 800b972:	f000 fcc5 	bl	800c300 <_Balloc>
 800b976:	4605      	mov	r5, r0
 800b978:	b928      	cbnz	r0, 800b986 <_dtoa_r+0x9be>
 800b97a:	4b87      	ldr	r3, [pc, #540]	; (800bb98 <_dtoa_r+0xbd0>)
 800b97c:	4602      	mov	r2, r0
 800b97e:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b982:	f7ff bb3b 	b.w	800affc <_dtoa_r+0x34>
 800b986:	693a      	ldr	r2, [r7, #16]
 800b988:	3202      	adds	r2, #2
 800b98a:	0092      	lsls	r2, r2, #2
 800b98c:	f107 010c 	add.w	r1, r7, #12
 800b990:	300c      	adds	r0, #12
 800b992:	f000 fca7 	bl	800c2e4 <memcpy>
 800b996:	2201      	movs	r2, #1
 800b998:	4629      	mov	r1, r5
 800b99a:	4620      	mov	r0, r4
 800b99c:	f000 ff0c 	bl	800c7b8 <__lshift>
 800b9a0:	9b01      	ldr	r3, [sp, #4]
 800b9a2:	f103 0901 	add.w	r9, r3, #1
 800b9a6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b9aa:	4413      	add	r3, r2
 800b9ac:	9305      	str	r3, [sp, #20]
 800b9ae:	f00a 0301 	and.w	r3, sl, #1
 800b9b2:	46b8      	mov	r8, r7
 800b9b4:	9304      	str	r3, [sp, #16]
 800b9b6:	4607      	mov	r7, r0
 800b9b8:	4631      	mov	r1, r6
 800b9ba:	ee18 0a10 	vmov	r0, s16
 800b9be:	f7ff fa77 	bl	800aeb0 <quorem>
 800b9c2:	4641      	mov	r1, r8
 800b9c4:	9002      	str	r0, [sp, #8]
 800b9c6:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b9ca:	ee18 0a10 	vmov	r0, s16
 800b9ce:	f000 ff63 	bl	800c898 <__mcmp>
 800b9d2:	463a      	mov	r2, r7
 800b9d4:	9003      	str	r0, [sp, #12]
 800b9d6:	4631      	mov	r1, r6
 800b9d8:	4620      	mov	r0, r4
 800b9da:	f000 ff79 	bl	800c8d0 <__mdiff>
 800b9de:	68c2      	ldr	r2, [r0, #12]
 800b9e0:	f109 3bff 	add.w	fp, r9, #4294967295
 800b9e4:	4605      	mov	r5, r0
 800b9e6:	bb02      	cbnz	r2, 800ba2a <_dtoa_r+0xa62>
 800b9e8:	4601      	mov	r1, r0
 800b9ea:	ee18 0a10 	vmov	r0, s16
 800b9ee:	f000 ff53 	bl	800c898 <__mcmp>
 800b9f2:	4602      	mov	r2, r0
 800b9f4:	4629      	mov	r1, r5
 800b9f6:	4620      	mov	r0, r4
 800b9f8:	9207      	str	r2, [sp, #28]
 800b9fa:	f000 fcc1 	bl	800c380 <_Bfree>
 800b9fe:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800ba02:	ea43 0102 	orr.w	r1, r3, r2
 800ba06:	9b04      	ldr	r3, [sp, #16]
 800ba08:	430b      	orrs	r3, r1
 800ba0a:	464d      	mov	r5, r9
 800ba0c:	d10f      	bne.n	800ba2e <_dtoa_r+0xa66>
 800ba0e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba12:	d02a      	beq.n	800ba6a <_dtoa_r+0xaa2>
 800ba14:	9b03      	ldr	r3, [sp, #12]
 800ba16:	2b00      	cmp	r3, #0
 800ba18:	dd02      	ble.n	800ba20 <_dtoa_r+0xa58>
 800ba1a:	9b02      	ldr	r3, [sp, #8]
 800ba1c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800ba20:	f88b a000 	strb.w	sl, [fp]
 800ba24:	e775      	b.n	800b912 <_dtoa_r+0x94a>
 800ba26:	4638      	mov	r0, r7
 800ba28:	e7ba      	b.n	800b9a0 <_dtoa_r+0x9d8>
 800ba2a:	2201      	movs	r2, #1
 800ba2c:	e7e2      	b.n	800b9f4 <_dtoa_r+0xa2c>
 800ba2e:	9b03      	ldr	r3, [sp, #12]
 800ba30:	2b00      	cmp	r3, #0
 800ba32:	db04      	blt.n	800ba3e <_dtoa_r+0xa76>
 800ba34:	9906      	ldr	r1, [sp, #24]
 800ba36:	430b      	orrs	r3, r1
 800ba38:	9904      	ldr	r1, [sp, #16]
 800ba3a:	430b      	orrs	r3, r1
 800ba3c:	d122      	bne.n	800ba84 <_dtoa_r+0xabc>
 800ba3e:	2a00      	cmp	r2, #0
 800ba40:	ddee      	ble.n	800ba20 <_dtoa_r+0xa58>
 800ba42:	ee18 1a10 	vmov	r1, s16
 800ba46:	2201      	movs	r2, #1
 800ba48:	4620      	mov	r0, r4
 800ba4a:	f000 feb5 	bl	800c7b8 <__lshift>
 800ba4e:	4631      	mov	r1, r6
 800ba50:	ee08 0a10 	vmov	s16, r0
 800ba54:	f000 ff20 	bl	800c898 <__mcmp>
 800ba58:	2800      	cmp	r0, #0
 800ba5a:	dc03      	bgt.n	800ba64 <_dtoa_r+0xa9c>
 800ba5c:	d1e0      	bne.n	800ba20 <_dtoa_r+0xa58>
 800ba5e:	f01a 0f01 	tst.w	sl, #1
 800ba62:	d0dd      	beq.n	800ba20 <_dtoa_r+0xa58>
 800ba64:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba68:	d1d7      	bne.n	800ba1a <_dtoa_r+0xa52>
 800ba6a:	2339      	movs	r3, #57	; 0x39
 800ba6c:	f88b 3000 	strb.w	r3, [fp]
 800ba70:	462b      	mov	r3, r5
 800ba72:	461d      	mov	r5, r3
 800ba74:	3b01      	subs	r3, #1
 800ba76:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800ba7a:	2a39      	cmp	r2, #57	; 0x39
 800ba7c:	d071      	beq.n	800bb62 <_dtoa_r+0xb9a>
 800ba7e:	3201      	adds	r2, #1
 800ba80:	701a      	strb	r2, [r3, #0]
 800ba82:	e746      	b.n	800b912 <_dtoa_r+0x94a>
 800ba84:	2a00      	cmp	r2, #0
 800ba86:	dd07      	ble.n	800ba98 <_dtoa_r+0xad0>
 800ba88:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800ba8c:	d0ed      	beq.n	800ba6a <_dtoa_r+0xaa2>
 800ba8e:	f10a 0301 	add.w	r3, sl, #1
 800ba92:	f88b 3000 	strb.w	r3, [fp]
 800ba96:	e73c      	b.n	800b912 <_dtoa_r+0x94a>
 800ba98:	9b05      	ldr	r3, [sp, #20]
 800ba9a:	f809 ac01 	strb.w	sl, [r9, #-1]
 800ba9e:	4599      	cmp	r9, r3
 800baa0:	d047      	beq.n	800bb32 <_dtoa_r+0xb6a>
 800baa2:	ee18 1a10 	vmov	r1, s16
 800baa6:	2300      	movs	r3, #0
 800baa8:	220a      	movs	r2, #10
 800baaa:	4620      	mov	r0, r4
 800baac:	f000 fc8a 	bl	800c3c4 <__multadd>
 800bab0:	45b8      	cmp	r8, r7
 800bab2:	ee08 0a10 	vmov	s16, r0
 800bab6:	f04f 0300 	mov.w	r3, #0
 800baba:	f04f 020a 	mov.w	r2, #10
 800babe:	4641      	mov	r1, r8
 800bac0:	4620      	mov	r0, r4
 800bac2:	d106      	bne.n	800bad2 <_dtoa_r+0xb0a>
 800bac4:	f000 fc7e 	bl	800c3c4 <__multadd>
 800bac8:	4680      	mov	r8, r0
 800baca:	4607      	mov	r7, r0
 800bacc:	f109 0901 	add.w	r9, r9, #1
 800bad0:	e772      	b.n	800b9b8 <_dtoa_r+0x9f0>
 800bad2:	f000 fc77 	bl	800c3c4 <__multadd>
 800bad6:	4639      	mov	r1, r7
 800bad8:	4680      	mov	r8, r0
 800bada:	2300      	movs	r3, #0
 800badc:	220a      	movs	r2, #10
 800bade:	4620      	mov	r0, r4
 800bae0:	f000 fc70 	bl	800c3c4 <__multadd>
 800bae4:	4607      	mov	r7, r0
 800bae6:	e7f1      	b.n	800bacc <_dtoa_r+0xb04>
 800bae8:	9b03      	ldr	r3, [sp, #12]
 800baea:	9302      	str	r3, [sp, #8]
 800baec:	9d01      	ldr	r5, [sp, #4]
 800baee:	ee18 0a10 	vmov	r0, s16
 800baf2:	4631      	mov	r1, r6
 800baf4:	f7ff f9dc 	bl	800aeb0 <quorem>
 800baf8:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800bafc:	9b01      	ldr	r3, [sp, #4]
 800bafe:	f805 ab01 	strb.w	sl, [r5], #1
 800bb02:	1aea      	subs	r2, r5, r3
 800bb04:	9b02      	ldr	r3, [sp, #8]
 800bb06:	4293      	cmp	r3, r2
 800bb08:	dd09      	ble.n	800bb1e <_dtoa_r+0xb56>
 800bb0a:	ee18 1a10 	vmov	r1, s16
 800bb0e:	2300      	movs	r3, #0
 800bb10:	220a      	movs	r2, #10
 800bb12:	4620      	mov	r0, r4
 800bb14:	f000 fc56 	bl	800c3c4 <__multadd>
 800bb18:	ee08 0a10 	vmov	s16, r0
 800bb1c:	e7e7      	b.n	800baee <_dtoa_r+0xb26>
 800bb1e:	9b02      	ldr	r3, [sp, #8]
 800bb20:	2b00      	cmp	r3, #0
 800bb22:	bfc8      	it	gt
 800bb24:	461d      	movgt	r5, r3
 800bb26:	9b01      	ldr	r3, [sp, #4]
 800bb28:	bfd8      	it	le
 800bb2a:	2501      	movle	r5, #1
 800bb2c:	441d      	add	r5, r3
 800bb2e:	f04f 0800 	mov.w	r8, #0
 800bb32:	ee18 1a10 	vmov	r1, s16
 800bb36:	2201      	movs	r2, #1
 800bb38:	4620      	mov	r0, r4
 800bb3a:	f000 fe3d 	bl	800c7b8 <__lshift>
 800bb3e:	4631      	mov	r1, r6
 800bb40:	ee08 0a10 	vmov	s16, r0
 800bb44:	f000 fea8 	bl	800c898 <__mcmp>
 800bb48:	2800      	cmp	r0, #0
 800bb4a:	dc91      	bgt.n	800ba70 <_dtoa_r+0xaa8>
 800bb4c:	d102      	bne.n	800bb54 <_dtoa_r+0xb8c>
 800bb4e:	f01a 0f01 	tst.w	sl, #1
 800bb52:	d18d      	bne.n	800ba70 <_dtoa_r+0xaa8>
 800bb54:	462b      	mov	r3, r5
 800bb56:	461d      	mov	r5, r3
 800bb58:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800bb5c:	2a30      	cmp	r2, #48	; 0x30
 800bb5e:	d0fa      	beq.n	800bb56 <_dtoa_r+0xb8e>
 800bb60:	e6d7      	b.n	800b912 <_dtoa_r+0x94a>
 800bb62:	9a01      	ldr	r2, [sp, #4]
 800bb64:	429a      	cmp	r2, r3
 800bb66:	d184      	bne.n	800ba72 <_dtoa_r+0xaaa>
 800bb68:	9b00      	ldr	r3, [sp, #0]
 800bb6a:	3301      	adds	r3, #1
 800bb6c:	9300      	str	r3, [sp, #0]
 800bb6e:	2331      	movs	r3, #49	; 0x31
 800bb70:	7013      	strb	r3, [r2, #0]
 800bb72:	e6ce      	b.n	800b912 <_dtoa_r+0x94a>
 800bb74:	4b09      	ldr	r3, [pc, #36]	; (800bb9c <_dtoa_r+0xbd4>)
 800bb76:	f7ff ba95 	b.w	800b0a4 <_dtoa_r+0xdc>
 800bb7a:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800bb7c:	2b00      	cmp	r3, #0
 800bb7e:	f47f aa6e 	bne.w	800b05e <_dtoa_r+0x96>
 800bb82:	4b07      	ldr	r3, [pc, #28]	; (800bba0 <_dtoa_r+0xbd8>)
 800bb84:	f7ff ba8e 	b.w	800b0a4 <_dtoa_r+0xdc>
 800bb88:	9b02      	ldr	r3, [sp, #8]
 800bb8a:	2b00      	cmp	r3, #0
 800bb8c:	dcae      	bgt.n	800baec <_dtoa_r+0xb24>
 800bb8e:	9b06      	ldr	r3, [sp, #24]
 800bb90:	2b02      	cmp	r3, #2
 800bb92:	f73f aea8 	bgt.w	800b8e6 <_dtoa_r+0x91e>
 800bb96:	e7a9      	b.n	800baec <_dtoa_r+0xb24>
 800bb98:	0800e1e0 	.word	0x0800e1e0
 800bb9c:	0800e050 	.word	0x0800e050
 800bba0:	0800e178 	.word	0x0800e178

0800bba4 <fiprintf>:
 800bba4:	b40e      	push	{r1, r2, r3}
 800bba6:	b503      	push	{r0, r1, lr}
 800bba8:	4601      	mov	r1, r0
 800bbaa:	ab03      	add	r3, sp, #12
 800bbac:	4805      	ldr	r0, [pc, #20]	; (800bbc4 <fiprintf+0x20>)
 800bbae:	f853 2b04 	ldr.w	r2, [r3], #4
 800bbb2:	6800      	ldr	r0, [r0, #0]
 800bbb4:	9301      	str	r3, [sp, #4]
 800bbb6:	f001 fae1 	bl	800d17c <_vfiprintf_r>
 800bbba:	b002      	add	sp, #8
 800bbbc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bbc0:	b003      	add	sp, #12
 800bbc2:	4770      	bx	lr
 800bbc4:	2000001c 	.word	0x2000001c

0800bbc8 <rshift>:
 800bbc8:	6903      	ldr	r3, [r0, #16]
 800bbca:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bbce:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bbd2:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bbd6:	f100 0414 	add.w	r4, r0, #20
 800bbda:	dd45      	ble.n	800bc68 <rshift+0xa0>
 800bbdc:	f011 011f 	ands.w	r1, r1, #31
 800bbe0:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bbe4:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bbe8:	d10c      	bne.n	800bc04 <rshift+0x3c>
 800bbea:	f100 0710 	add.w	r7, r0, #16
 800bbee:	4629      	mov	r1, r5
 800bbf0:	42b1      	cmp	r1, r6
 800bbf2:	d334      	bcc.n	800bc5e <rshift+0x96>
 800bbf4:	1a9b      	subs	r3, r3, r2
 800bbf6:	009b      	lsls	r3, r3, #2
 800bbf8:	1eea      	subs	r2, r5, #3
 800bbfa:	4296      	cmp	r6, r2
 800bbfc:	bf38      	it	cc
 800bbfe:	2300      	movcc	r3, #0
 800bc00:	4423      	add	r3, r4
 800bc02:	e015      	b.n	800bc30 <rshift+0x68>
 800bc04:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bc08:	f1c1 0820 	rsb	r8, r1, #32
 800bc0c:	40cf      	lsrs	r7, r1
 800bc0e:	f105 0e04 	add.w	lr, r5, #4
 800bc12:	46a1      	mov	r9, r4
 800bc14:	4576      	cmp	r6, lr
 800bc16:	46f4      	mov	ip, lr
 800bc18:	d815      	bhi.n	800bc46 <rshift+0x7e>
 800bc1a:	1a9a      	subs	r2, r3, r2
 800bc1c:	0092      	lsls	r2, r2, #2
 800bc1e:	3a04      	subs	r2, #4
 800bc20:	3501      	adds	r5, #1
 800bc22:	42ae      	cmp	r6, r5
 800bc24:	bf38      	it	cc
 800bc26:	2200      	movcc	r2, #0
 800bc28:	18a3      	adds	r3, r4, r2
 800bc2a:	50a7      	str	r7, [r4, r2]
 800bc2c:	b107      	cbz	r7, 800bc30 <rshift+0x68>
 800bc2e:	3304      	adds	r3, #4
 800bc30:	1b1a      	subs	r2, r3, r4
 800bc32:	42a3      	cmp	r3, r4
 800bc34:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bc38:	bf08      	it	eq
 800bc3a:	2300      	moveq	r3, #0
 800bc3c:	6102      	str	r2, [r0, #16]
 800bc3e:	bf08      	it	eq
 800bc40:	6143      	streq	r3, [r0, #20]
 800bc42:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bc46:	f8dc c000 	ldr.w	ip, [ip]
 800bc4a:	fa0c fc08 	lsl.w	ip, ip, r8
 800bc4e:	ea4c 0707 	orr.w	r7, ip, r7
 800bc52:	f849 7b04 	str.w	r7, [r9], #4
 800bc56:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bc5a:	40cf      	lsrs	r7, r1
 800bc5c:	e7da      	b.n	800bc14 <rshift+0x4c>
 800bc5e:	f851 cb04 	ldr.w	ip, [r1], #4
 800bc62:	f847 cf04 	str.w	ip, [r7, #4]!
 800bc66:	e7c3      	b.n	800bbf0 <rshift+0x28>
 800bc68:	4623      	mov	r3, r4
 800bc6a:	e7e1      	b.n	800bc30 <rshift+0x68>

0800bc6c <__hexdig_fun>:
 800bc6c:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bc70:	2b09      	cmp	r3, #9
 800bc72:	d802      	bhi.n	800bc7a <__hexdig_fun+0xe>
 800bc74:	3820      	subs	r0, #32
 800bc76:	b2c0      	uxtb	r0, r0
 800bc78:	4770      	bx	lr
 800bc7a:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bc7e:	2b05      	cmp	r3, #5
 800bc80:	d801      	bhi.n	800bc86 <__hexdig_fun+0x1a>
 800bc82:	3847      	subs	r0, #71	; 0x47
 800bc84:	e7f7      	b.n	800bc76 <__hexdig_fun+0xa>
 800bc86:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bc8a:	2b05      	cmp	r3, #5
 800bc8c:	d801      	bhi.n	800bc92 <__hexdig_fun+0x26>
 800bc8e:	3827      	subs	r0, #39	; 0x27
 800bc90:	e7f1      	b.n	800bc76 <__hexdig_fun+0xa>
 800bc92:	2000      	movs	r0, #0
 800bc94:	4770      	bx	lr
	...

0800bc98 <__gethex>:
 800bc98:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bc9c:	ed2d 8b02 	vpush	{d8}
 800bca0:	b089      	sub	sp, #36	; 0x24
 800bca2:	ee08 0a10 	vmov	s16, r0
 800bca6:	9304      	str	r3, [sp, #16]
 800bca8:	4bb4      	ldr	r3, [pc, #720]	; (800bf7c <__gethex+0x2e4>)
 800bcaa:	681b      	ldr	r3, [r3, #0]
 800bcac:	9301      	str	r3, [sp, #4]
 800bcae:	4618      	mov	r0, r3
 800bcb0:	468b      	mov	fp, r1
 800bcb2:	4690      	mov	r8, r2
 800bcb4:	f7f4 fa8c 	bl	80001d0 <strlen>
 800bcb8:	9b01      	ldr	r3, [sp, #4]
 800bcba:	f8db 2000 	ldr.w	r2, [fp]
 800bcbe:	4403      	add	r3, r0
 800bcc0:	4682      	mov	sl, r0
 800bcc2:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bcc6:	9305      	str	r3, [sp, #20]
 800bcc8:	1c93      	adds	r3, r2, #2
 800bcca:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bcce:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bcd2:	32fe      	adds	r2, #254	; 0xfe
 800bcd4:	18d1      	adds	r1, r2, r3
 800bcd6:	461f      	mov	r7, r3
 800bcd8:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bcdc:	9100      	str	r1, [sp, #0]
 800bcde:	2830      	cmp	r0, #48	; 0x30
 800bce0:	d0f8      	beq.n	800bcd4 <__gethex+0x3c>
 800bce2:	f7ff ffc3 	bl	800bc6c <__hexdig_fun>
 800bce6:	4604      	mov	r4, r0
 800bce8:	2800      	cmp	r0, #0
 800bcea:	d13a      	bne.n	800bd62 <__gethex+0xca>
 800bcec:	9901      	ldr	r1, [sp, #4]
 800bcee:	4652      	mov	r2, sl
 800bcf0:	4638      	mov	r0, r7
 800bcf2:	f001 fb8d 	bl	800d410 <strncmp>
 800bcf6:	4605      	mov	r5, r0
 800bcf8:	2800      	cmp	r0, #0
 800bcfa:	d168      	bne.n	800bdce <__gethex+0x136>
 800bcfc:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bd00:	eb07 060a 	add.w	r6, r7, sl
 800bd04:	f7ff ffb2 	bl	800bc6c <__hexdig_fun>
 800bd08:	2800      	cmp	r0, #0
 800bd0a:	d062      	beq.n	800bdd2 <__gethex+0x13a>
 800bd0c:	4633      	mov	r3, r6
 800bd0e:	7818      	ldrb	r0, [r3, #0]
 800bd10:	2830      	cmp	r0, #48	; 0x30
 800bd12:	461f      	mov	r7, r3
 800bd14:	f103 0301 	add.w	r3, r3, #1
 800bd18:	d0f9      	beq.n	800bd0e <__gethex+0x76>
 800bd1a:	f7ff ffa7 	bl	800bc6c <__hexdig_fun>
 800bd1e:	2301      	movs	r3, #1
 800bd20:	fab0 f480 	clz	r4, r0
 800bd24:	0964      	lsrs	r4, r4, #5
 800bd26:	4635      	mov	r5, r6
 800bd28:	9300      	str	r3, [sp, #0]
 800bd2a:	463a      	mov	r2, r7
 800bd2c:	4616      	mov	r6, r2
 800bd2e:	3201      	adds	r2, #1
 800bd30:	7830      	ldrb	r0, [r6, #0]
 800bd32:	f7ff ff9b 	bl	800bc6c <__hexdig_fun>
 800bd36:	2800      	cmp	r0, #0
 800bd38:	d1f8      	bne.n	800bd2c <__gethex+0x94>
 800bd3a:	9901      	ldr	r1, [sp, #4]
 800bd3c:	4652      	mov	r2, sl
 800bd3e:	4630      	mov	r0, r6
 800bd40:	f001 fb66 	bl	800d410 <strncmp>
 800bd44:	b980      	cbnz	r0, 800bd68 <__gethex+0xd0>
 800bd46:	b94d      	cbnz	r5, 800bd5c <__gethex+0xc4>
 800bd48:	eb06 050a 	add.w	r5, r6, sl
 800bd4c:	462a      	mov	r2, r5
 800bd4e:	4616      	mov	r6, r2
 800bd50:	3201      	adds	r2, #1
 800bd52:	7830      	ldrb	r0, [r6, #0]
 800bd54:	f7ff ff8a 	bl	800bc6c <__hexdig_fun>
 800bd58:	2800      	cmp	r0, #0
 800bd5a:	d1f8      	bne.n	800bd4e <__gethex+0xb6>
 800bd5c:	1bad      	subs	r5, r5, r6
 800bd5e:	00ad      	lsls	r5, r5, #2
 800bd60:	e004      	b.n	800bd6c <__gethex+0xd4>
 800bd62:	2400      	movs	r4, #0
 800bd64:	4625      	mov	r5, r4
 800bd66:	e7e0      	b.n	800bd2a <__gethex+0x92>
 800bd68:	2d00      	cmp	r5, #0
 800bd6a:	d1f7      	bne.n	800bd5c <__gethex+0xc4>
 800bd6c:	7833      	ldrb	r3, [r6, #0]
 800bd6e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bd72:	2b50      	cmp	r3, #80	; 0x50
 800bd74:	d13b      	bne.n	800bdee <__gethex+0x156>
 800bd76:	7873      	ldrb	r3, [r6, #1]
 800bd78:	2b2b      	cmp	r3, #43	; 0x2b
 800bd7a:	d02c      	beq.n	800bdd6 <__gethex+0x13e>
 800bd7c:	2b2d      	cmp	r3, #45	; 0x2d
 800bd7e:	d02e      	beq.n	800bdde <__gethex+0x146>
 800bd80:	1c71      	adds	r1, r6, #1
 800bd82:	f04f 0900 	mov.w	r9, #0
 800bd86:	7808      	ldrb	r0, [r1, #0]
 800bd88:	f7ff ff70 	bl	800bc6c <__hexdig_fun>
 800bd8c:	1e43      	subs	r3, r0, #1
 800bd8e:	b2db      	uxtb	r3, r3
 800bd90:	2b18      	cmp	r3, #24
 800bd92:	d82c      	bhi.n	800bdee <__gethex+0x156>
 800bd94:	f1a0 0210 	sub.w	r2, r0, #16
 800bd98:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bd9c:	f7ff ff66 	bl	800bc6c <__hexdig_fun>
 800bda0:	1e43      	subs	r3, r0, #1
 800bda2:	b2db      	uxtb	r3, r3
 800bda4:	2b18      	cmp	r3, #24
 800bda6:	d91d      	bls.n	800bde4 <__gethex+0x14c>
 800bda8:	f1b9 0f00 	cmp.w	r9, #0
 800bdac:	d000      	beq.n	800bdb0 <__gethex+0x118>
 800bdae:	4252      	negs	r2, r2
 800bdb0:	4415      	add	r5, r2
 800bdb2:	f8cb 1000 	str.w	r1, [fp]
 800bdb6:	b1e4      	cbz	r4, 800bdf2 <__gethex+0x15a>
 800bdb8:	9b00      	ldr	r3, [sp, #0]
 800bdba:	2b00      	cmp	r3, #0
 800bdbc:	bf14      	ite	ne
 800bdbe:	2700      	movne	r7, #0
 800bdc0:	2706      	moveq	r7, #6
 800bdc2:	4638      	mov	r0, r7
 800bdc4:	b009      	add	sp, #36	; 0x24
 800bdc6:	ecbd 8b02 	vpop	{d8}
 800bdca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bdce:	463e      	mov	r6, r7
 800bdd0:	4625      	mov	r5, r4
 800bdd2:	2401      	movs	r4, #1
 800bdd4:	e7ca      	b.n	800bd6c <__gethex+0xd4>
 800bdd6:	f04f 0900 	mov.w	r9, #0
 800bdda:	1cb1      	adds	r1, r6, #2
 800bddc:	e7d3      	b.n	800bd86 <__gethex+0xee>
 800bdde:	f04f 0901 	mov.w	r9, #1
 800bde2:	e7fa      	b.n	800bdda <__gethex+0x142>
 800bde4:	230a      	movs	r3, #10
 800bde6:	fb03 0202 	mla	r2, r3, r2, r0
 800bdea:	3a10      	subs	r2, #16
 800bdec:	e7d4      	b.n	800bd98 <__gethex+0x100>
 800bdee:	4631      	mov	r1, r6
 800bdf0:	e7df      	b.n	800bdb2 <__gethex+0x11a>
 800bdf2:	1bf3      	subs	r3, r6, r7
 800bdf4:	3b01      	subs	r3, #1
 800bdf6:	4621      	mov	r1, r4
 800bdf8:	2b07      	cmp	r3, #7
 800bdfa:	dc0b      	bgt.n	800be14 <__gethex+0x17c>
 800bdfc:	ee18 0a10 	vmov	r0, s16
 800be00:	f000 fa7e 	bl	800c300 <_Balloc>
 800be04:	4604      	mov	r4, r0
 800be06:	b940      	cbnz	r0, 800be1a <__gethex+0x182>
 800be08:	4b5d      	ldr	r3, [pc, #372]	; (800bf80 <__gethex+0x2e8>)
 800be0a:	4602      	mov	r2, r0
 800be0c:	21de      	movs	r1, #222	; 0xde
 800be0e:	485d      	ldr	r0, [pc, #372]	; (800bf84 <__gethex+0x2ec>)
 800be10:	f7ff f830 	bl	800ae74 <__assert_func>
 800be14:	3101      	adds	r1, #1
 800be16:	105b      	asrs	r3, r3, #1
 800be18:	e7ee      	b.n	800bdf8 <__gethex+0x160>
 800be1a:	f100 0914 	add.w	r9, r0, #20
 800be1e:	f04f 0b00 	mov.w	fp, #0
 800be22:	f1ca 0301 	rsb	r3, sl, #1
 800be26:	f8cd 9008 	str.w	r9, [sp, #8]
 800be2a:	f8cd b000 	str.w	fp, [sp]
 800be2e:	9306      	str	r3, [sp, #24]
 800be30:	42b7      	cmp	r7, r6
 800be32:	d340      	bcc.n	800beb6 <__gethex+0x21e>
 800be34:	9802      	ldr	r0, [sp, #8]
 800be36:	9b00      	ldr	r3, [sp, #0]
 800be38:	f840 3b04 	str.w	r3, [r0], #4
 800be3c:	eba0 0009 	sub.w	r0, r0, r9
 800be40:	1080      	asrs	r0, r0, #2
 800be42:	0146      	lsls	r6, r0, #5
 800be44:	6120      	str	r0, [r4, #16]
 800be46:	4618      	mov	r0, r3
 800be48:	f000 fb4c 	bl	800c4e4 <__hi0bits>
 800be4c:	1a30      	subs	r0, r6, r0
 800be4e:	f8d8 6000 	ldr.w	r6, [r8]
 800be52:	42b0      	cmp	r0, r6
 800be54:	dd63      	ble.n	800bf1e <__gethex+0x286>
 800be56:	1b87      	subs	r7, r0, r6
 800be58:	4639      	mov	r1, r7
 800be5a:	4620      	mov	r0, r4
 800be5c:	f000 fef0 	bl	800cc40 <__any_on>
 800be60:	4682      	mov	sl, r0
 800be62:	b1a8      	cbz	r0, 800be90 <__gethex+0x1f8>
 800be64:	1e7b      	subs	r3, r7, #1
 800be66:	1159      	asrs	r1, r3, #5
 800be68:	f003 021f 	and.w	r2, r3, #31
 800be6c:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800be70:	f04f 0a01 	mov.w	sl, #1
 800be74:	fa0a f202 	lsl.w	r2, sl, r2
 800be78:	420a      	tst	r2, r1
 800be7a:	d009      	beq.n	800be90 <__gethex+0x1f8>
 800be7c:	4553      	cmp	r3, sl
 800be7e:	dd05      	ble.n	800be8c <__gethex+0x1f4>
 800be80:	1eb9      	subs	r1, r7, #2
 800be82:	4620      	mov	r0, r4
 800be84:	f000 fedc 	bl	800cc40 <__any_on>
 800be88:	2800      	cmp	r0, #0
 800be8a:	d145      	bne.n	800bf18 <__gethex+0x280>
 800be8c:	f04f 0a02 	mov.w	sl, #2
 800be90:	4639      	mov	r1, r7
 800be92:	4620      	mov	r0, r4
 800be94:	f7ff fe98 	bl	800bbc8 <rshift>
 800be98:	443d      	add	r5, r7
 800be9a:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800be9e:	42ab      	cmp	r3, r5
 800bea0:	da4c      	bge.n	800bf3c <__gethex+0x2a4>
 800bea2:	ee18 0a10 	vmov	r0, s16
 800bea6:	4621      	mov	r1, r4
 800bea8:	f000 fa6a 	bl	800c380 <_Bfree>
 800beac:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800beae:	2300      	movs	r3, #0
 800beb0:	6013      	str	r3, [r2, #0]
 800beb2:	27a3      	movs	r7, #163	; 0xa3
 800beb4:	e785      	b.n	800bdc2 <__gethex+0x12a>
 800beb6:	1e73      	subs	r3, r6, #1
 800beb8:	9a05      	ldr	r2, [sp, #20]
 800beba:	9303      	str	r3, [sp, #12]
 800bebc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800bec0:	4293      	cmp	r3, r2
 800bec2:	d019      	beq.n	800bef8 <__gethex+0x260>
 800bec4:	f1bb 0f20 	cmp.w	fp, #32
 800bec8:	d107      	bne.n	800beda <__gethex+0x242>
 800beca:	9b02      	ldr	r3, [sp, #8]
 800becc:	9a00      	ldr	r2, [sp, #0]
 800bece:	f843 2b04 	str.w	r2, [r3], #4
 800bed2:	9302      	str	r3, [sp, #8]
 800bed4:	2300      	movs	r3, #0
 800bed6:	9300      	str	r3, [sp, #0]
 800bed8:	469b      	mov	fp, r3
 800beda:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800bede:	f7ff fec5 	bl	800bc6c <__hexdig_fun>
 800bee2:	9b00      	ldr	r3, [sp, #0]
 800bee4:	f000 000f 	and.w	r0, r0, #15
 800bee8:	fa00 f00b 	lsl.w	r0, r0, fp
 800beec:	4303      	orrs	r3, r0
 800beee:	9300      	str	r3, [sp, #0]
 800bef0:	f10b 0b04 	add.w	fp, fp, #4
 800bef4:	9b03      	ldr	r3, [sp, #12]
 800bef6:	e00d      	b.n	800bf14 <__gethex+0x27c>
 800bef8:	9b03      	ldr	r3, [sp, #12]
 800befa:	9a06      	ldr	r2, [sp, #24]
 800befc:	4413      	add	r3, r2
 800befe:	42bb      	cmp	r3, r7
 800bf00:	d3e0      	bcc.n	800bec4 <__gethex+0x22c>
 800bf02:	4618      	mov	r0, r3
 800bf04:	9901      	ldr	r1, [sp, #4]
 800bf06:	9307      	str	r3, [sp, #28]
 800bf08:	4652      	mov	r2, sl
 800bf0a:	f001 fa81 	bl	800d410 <strncmp>
 800bf0e:	9b07      	ldr	r3, [sp, #28]
 800bf10:	2800      	cmp	r0, #0
 800bf12:	d1d7      	bne.n	800bec4 <__gethex+0x22c>
 800bf14:	461e      	mov	r6, r3
 800bf16:	e78b      	b.n	800be30 <__gethex+0x198>
 800bf18:	f04f 0a03 	mov.w	sl, #3
 800bf1c:	e7b8      	b.n	800be90 <__gethex+0x1f8>
 800bf1e:	da0a      	bge.n	800bf36 <__gethex+0x29e>
 800bf20:	1a37      	subs	r7, r6, r0
 800bf22:	4621      	mov	r1, r4
 800bf24:	ee18 0a10 	vmov	r0, s16
 800bf28:	463a      	mov	r2, r7
 800bf2a:	f000 fc45 	bl	800c7b8 <__lshift>
 800bf2e:	1bed      	subs	r5, r5, r7
 800bf30:	4604      	mov	r4, r0
 800bf32:	f100 0914 	add.w	r9, r0, #20
 800bf36:	f04f 0a00 	mov.w	sl, #0
 800bf3a:	e7ae      	b.n	800be9a <__gethex+0x202>
 800bf3c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800bf40:	42a8      	cmp	r0, r5
 800bf42:	dd72      	ble.n	800c02a <__gethex+0x392>
 800bf44:	1b45      	subs	r5, r0, r5
 800bf46:	42ae      	cmp	r6, r5
 800bf48:	dc36      	bgt.n	800bfb8 <__gethex+0x320>
 800bf4a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf4e:	2b02      	cmp	r3, #2
 800bf50:	d02a      	beq.n	800bfa8 <__gethex+0x310>
 800bf52:	2b03      	cmp	r3, #3
 800bf54:	d02c      	beq.n	800bfb0 <__gethex+0x318>
 800bf56:	2b01      	cmp	r3, #1
 800bf58:	d11c      	bne.n	800bf94 <__gethex+0x2fc>
 800bf5a:	42ae      	cmp	r6, r5
 800bf5c:	d11a      	bne.n	800bf94 <__gethex+0x2fc>
 800bf5e:	2e01      	cmp	r6, #1
 800bf60:	d112      	bne.n	800bf88 <__gethex+0x2f0>
 800bf62:	9a04      	ldr	r2, [sp, #16]
 800bf64:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bf68:	6013      	str	r3, [r2, #0]
 800bf6a:	2301      	movs	r3, #1
 800bf6c:	6123      	str	r3, [r4, #16]
 800bf6e:	f8c9 3000 	str.w	r3, [r9]
 800bf72:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bf74:	2762      	movs	r7, #98	; 0x62
 800bf76:	601c      	str	r4, [r3, #0]
 800bf78:	e723      	b.n	800bdc2 <__gethex+0x12a>
 800bf7a:	bf00      	nop
 800bf7c:	0800e258 	.word	0x0800e258
 800bf80:	0800e1e0 	.word	0x0800e1e0
 800bf84:	0800e1f1 	.word	0x0800e1f1
 800bf88:	1e71      	subs	r1, r6, #1
 800bf8a:	4620      	mov	r0, r4
 800bf8c:	f000 fe58 	bl	800cc40 <__any_on>
 800bf90:	2800      	cmp	r0, #0
 800bf92:	d1e6      	bne.n	800bf62 <__gethex+0x2ca>
 800bf94:	ee18 0a10 	vmov	r0, s16
 800bf98:	4621      	mov	r1, r4
 800bf9a:	f000 f9f1 	bl	800c380 <_Bfree>
 800bf9e:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bfa0:	2300      	movs	r3, #0
 800bfa2:	6013      	str	r3, [r2, #0]
 800bfa4:	2750      	movs	r7, #80	; 0x50
 800bfa6:	e70c      	b.n	800bdc2 <__gethex+0x12a>
 800bfa8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfaa:	2b00      	cmp	r3, #0
 800bfac:	d1f2      	bne.n	800bf94 <__gethex+0x2fc>
 800bfae:	e7d8      	b.n	800bf62 <__gethex+0x2ca>
 800bfb0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bfb2:	2b00      	cmp	r3, #0
 800bfb4:	d1d5      	bne.n	800bf62 <__gethex+0x2ca>
 800bfb6:	e7ed      	b.n	800bf94 <__gethex+0x2fc>
 800bfb8:	1e6f      	subs	r7, r5, #1
 800bfba:	f1ba 0f00 	cmp.w	sl, #0
 800bfbe:	d131      	bne.n	800c024 <__gethex+0x38c>
 800bfc0:	b127      	cbz	r7, 800bfcc <__gethex+0x334>
 800bfc2:	4639      	mov	r1, r7
 800bfc4:	4620      	mov	r0, r4
 800bfc6:	f000 fe3b 	bl	800cc40 <__any_on>
 800bfca:	4682      	mov	sl, r0
 800bfcc:	117b      	asrs	r3, r7, #5
 800bfce:	2101      	movs	r1, #1
 800bfd0:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bfd4:	f007 071f 	and.w	r7, r7, #31
 800bfd8:	fa01 f707 	lsl.w	r7, r1, r7
 800bfdc:	421f      	tst	r7, r3
 800bfde:	4629      	mov	r1, r5
 800bfe0:	4620      	mov	r0, r4
 800bfe2:	bf18      	it	ne
 800bfe4:	f04a 0a02 	orrne.w	sl, sl, #2
 800bfe8:	1b76      	subs	r6, r6, r5
 800bfea:	f7ff fded 	bl	800bbc8 <rshift>
 800bfee:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bff2:	2702      	movs	r7, #2
 800bff4:	f1ba 0f00 	cmp.w	sl, #0
 800bff8:	d048      	beq.n	800c08c <__gethex+0x3f4>
 800bffa:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bffe:	2b02      	cmp	r3, #2
 800c000:	d015      	beq.n	800c02e <__gethex+0x396>
 800c002:	2b03      	cmp	r3, #3
 800c004:	d017      	beq.n	800c036 <__gethex+0x39e>
 800c006:	2b01      	cmp	r3, #1
 800c008:	d109      	bne.n	800c01e <__gethex+0x386>
 800c00a:	f01a 0f02 	tst.w	sl, #2
 800c00e:	d006      	beq.n	800c01e <__gethex+0x386>
 800c010:	f8d9 0000 	ldr.w	r0, [r9]
 800c014:	ea4a 0a00 	orr.w	sl, sl, r0
 800c018:	f01a 0f01 	tst.w	sl, #1
 800c01c:	d10e      	bne.n	800c03c <__gethex+0x3a4>
 800c01e:	f047 0710 	orr.w	r7, r7, #16
 800c022:	e033      	b.n	800c08c <__gethex+0x3f4>
 800c024:	f04f 0a01 	mov.w	sl, #1
 800c028:	e7d0      	b.n	800bfcc <__gethex+0x334>
 800c02a:	2701      	movs	r7, #1
 800c02c:	e7e2      	b.n	800bff4 <__gethex+0x35c>
 800c02e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c030:	f1c3 0301 	rsb	r3, r3, #1
 800c034:	9315      	str	r3, [sp, #84]	; 0x54
 800c036:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800c038:	2b00      	cmp	r3, #0
 800c03a:	d0f0      	beq.n	800c01e <__gethex+0x386>
 800c03c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800c040:	f104 0314 	add.w	r3, r4, #20
 800c044:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800c048:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800c04c:	f04f 0c00 	mov.w	ip, #0
 800c050:	4618      	mov	r0, r3
 800c052:	f853 2b04 	ldr.w	r2, [r3], #4
 800c056:	f1b2 3fff 	cmp.w	r2, #4294967295
 800c05a:	d01c      	beq.n	800c096 <__gethex+0x3fe>
 800c05c:	3201      	adds	r2, #1
 800c05e:	6002      	str	r2, [r0, #0]
 800c060:	2f02      	cmp	r7, #2
 800c062:	f104 0314 	add.w	r3, r4, #20
 800c066:	d13f      	bne.n	800c0e8 <__gethex+0x450>
 800c068:	f8d8 2000 	ldr.w	r2, [r8]
 800c06c:	3a01      	subs	r2, #1
 800c06e:	42b2      	cmp	r2, r6
 800c070:	d10a      	bne.n	800c088 <__gethex+0x3f0>
 800c072:	1171      	asrs	r1, r6, #5
 800c074:	2201      	movs	r2, #1
 800c076:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800c07a:	f006 061f 	and.w	r6, r6, #31
 800c07e:	fa02 f606 	lsl.w	r6, r2, r6
 800c082:	421e      	tst	r6, r3
 800c084:	bf18      	it	ne
 800c086:	4617      	movne	r7, r2
 800c088:	f047 0720 	orr.w	r7, r7, #32
 800c08c:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800c08e:	601c      	str	r4, [r3, #0]
 800c090:	9b04      	ldr	r3, [sp, #16]
 800c092:	601d      	str	r5, [r3, #0]
 800c094:	e695      	b.n	800bdc2 <__gethex+0x12a>
 800c096:	4299      	cmp	r1, r3
 800c098:	f843 cc04 	str.w	ip, [r3, #-4]
 800c09c:	d8d8      	bhi.n	800c050 <__gethex+0x3b8>
 800c09e:	68a3      	ldr	r3, [r4, #8]
 800c0a0:	459b      	cmp	fp, r3
 800c0a2:	db19      	blt.n	800c0d8 <__gethex+0x440>
 800c0a4:	6861      	ldr	r1, [r4, #4]
 800c0a6:	ee18 0a10 	vmov	r0, s16
 800c0aa:	3101      	adds	r1, #1
 800c0ac:	f000 f928 	bl	800c300 <_Balloc>
 800c0b0:	4681      	mov	r9, r0
 800c0b2:	b918      	cbnz	r0, 800c0bc <__gethex+0x424>
 800c0b4:	4b1a      	ldr	r3, [pc, #104]	; (800c120 <__gethex+0x488>)
 800c0b6:	4602      	mov	r2, r0
 800c0b8:	2184      	movs	r1, #132	; 0x84
 800c0ba:	e6a8      	b.n	800be0e <__gethex+0x176>
 800c0bc:	6922      	ldr	r2, [r4, #16]
 800c0be:	3202      	adds	r2, #2
 800c0c0:	f104 010c 	add.w	r1, r4, #12
 800c0c4:	0092      	lsls	r2, r2, #2
 800c0c6:	300c      	adds	r0, #12
 800c0c8:	f000 f90c 	bl	800c2e4 <memcpy>
 800c0cc:	4621      	mov	r1, r4
 800c0ce:	ee18 0a10 	vmov	r0, s16
 800c0d2:	f000 f955 	bl	800c380 <_Bfree>
 800c0d6:	464c      	mov	r4, r9
 800c0d8:	6923      	ldr	r3, [r4, #16]
 800c0da:	1c5a      	adds	r2, r3, #1
 800c0dc:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c0e0:	6122      	str	r2, [r4, #16]
 800c0e2:	2201      	movs	r2, #1
 800c0e4:	615a      	str	r2, [r3, #20]
 800c0e6:	e7bb      	b.n	800c060 <__gethex+0x3c8>
 800c0e8:	6922      	ldr	r2, [r4, #16]
 800c0ea:	455a      	cmp	r2, fp
 800c0ec:	dd0b      	ble.n	800c106 <__gethex+0x46e>
 800c0ee:	2101      	movs	r1, #1
 800c0f0:	4620      	mov	r0, r4
 800c0f2:	f7ff fd69 	bl	800bbc8 <rshift>
 800c0f6:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c0fa:	3501      	adds	r5, #1
 800c0fc:	42ab      	cmp	r3, r5
 800c0fe:	f6ff aed0 	blt.w	800bea2 <__gethex+0x20a>
 800c102:	2701      	movs	r7, #1
 800c104:	e7c0      	b.n	800c088 <__gethex+0x3f0>
 800c106:	f016 061f 	ands.w	r6, r6, #31
 800c10a:	d0fa      	beq.n	800c102 <__gethex+0x46a>
 800c10c:	4453      	add	r3, sl
 800c10e:	f1c6 0620 	rsb	r6, r6, #32
 800c112:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c116:	f000 f9e5 	bl	800c4e4 <__hi0bits>
 800c11a:	42b0      	cmp	r0, r6
 800c11c:	dbe7      	blt.n	800c0ee <__gethex+0x456>
 800c11e:	e7f0      	b.n	800c102 <__gethex+0x46a>
 800c120:	0800e1e0 	.word	0x0800e1e0

0800c124 <L_shift>:
 800c124:	f1c2 0208 	rsb	r2, r2, #8
 800c128:	0092      	lsls	r2, r2, #2
 800c12a:	b570      	push	{r4, r5, r6, lr}
 800c12c:	f1c2 0620 	rsb	r6, r2, #32
 800c130:	6843      	ldr	r3, [r0, #4]
 800c132:	6804      	ldr	r4, [r0, #0]
 800c134:	fa03 f506 	lsl.w	r5, r3, r6
 800c138:	432c      	orrs	r4, r5
 800c13a:	40d3      	lsrs	r3, r2
 800c13c:	6004      	str	r4, [r0, #0]
 800c13e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c142:	4288      	cmp	r0, r1
 800c144:	d3f4      	bcc.n	800c130 <L_shift+0xc>
 800c146:	bd70      	pop	{r4, r5, r6, pc}

0800c148 <__match>:
 800c148:	b530      	push	{r4, r5, lr}
 800c14a:	6803      	ldr	r3, [r0, #0]
 800c14c:	3301      	adds	r3, #1
 800c14e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c152:	b914      	cbnz	r4, 800c15a <__match+0x12>
 800c154:	6003      	str	r3, [r0, #0]
 800c156:	2001      	movs	r0, #1
 800c158:	bd30      	pop	{r4, r5, pc}
 800c15a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c15e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c162:	2d19      	cmp	r5, #25
 800c164:	bf98      	it	ls
 800c166:	3220      	addls	r2, #32
 800c168:	42a2      	cmp	r2, r4
 800c16a:	d0f0      	beq.n	800c14e <__match+0x6>
 800c16c:	2000      	movs	r0, #0
 800c16e:	e7f3      	b.n	800c158 <__match+0x10>

0800c170 <__hexnan>:
 800c170:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c174:	680b      	ldr	r3, [r1, #0]
 800c176:	115e      	asrs	r6, r3, #5
 800c178:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c17c:	f013 031f 	ands.w	r3, r3, #31
 800c180:	b087      	sub	sp, #28
 800c182:	bf18      	it	ne
 800c184:	3604      	addne	r6, #4
 800c186:	2500      	movs	r5, #0
 800c188:	1f37      	subs	r7, r6, #4
 800c18a:	4690      	mov	r8, r2
 800c18c:	6802      	ldr	r2, [r0, #0]
 800c18e:	9301      	str	r3, [sp, #4]
 800c190:	4682      	mov	sl, r0
 800c192:	f846 5c04 	str.w	r5, [r6, #-4]
 800c196:	46b9      	mov	r9, r7
 800c198:	463c      	mov	r4, r7
 800c19a:	9502      	str	r5, [sp, #8]
 800c19c:	46ab      	mov	fp, r5
 800c19e:	7851      	ldrb	r1, [r2, #1]
 800c1a0:	1c53      	adds	r3, r2, #1
 800c1a2:	9303      	str	r3, [sp, #12]
 800c1a4:	b341      	cbz	r1, 800c1f8 <__hexnan+0x88>
 800c1a6:	4608      	mov	r0, r1
 800c1a8:	9205      	str	r2, [sp, #20]
 800c1aa:	9104      	str	r1, [sp, #16]
 800c1ac:	f7ff fd5e 	bl	800bc6c <__hexdig_fun>
 800c1b0:	2800      	cmp	r0, #0
 800c1b2:	d14f      	bne.n	800c254 <__hexnan+0xe4>
 800c1b4:	9904      	ldr	r1, [sp, #16]
 800c1b6:	9a05      	ldr	r2, [sp, #20]
 800c1b8:	2920      	cmp	r1, #32
 800c1ba:	d818      	bhi.n	800c1ee <__hexnan+0x7e>
 800c1bc:	9b02      	ldr	r3, [sp, #8]
 800c1be:	459b      	cmp	fp, r3
 800c1c0:	dd13      	ble.n	800c1ea <__hexnan+0x7a>
 800c1c2:	454c      	cmp	r4, r9
 800c1c4:	d206      	bcs.n	800c1d4 <__hexnan+0x64>
 800c1c6:	2d07      	cmp	r5, #7
 800c1c8:	dc04      	bgt.n	800c1d4 <__hexnan+0x64>
 800c1ca:	462a      	mov	r2, r5
 800c1cc:	4649      	mov	r1, r9
 800c1ce:	4620      	mov	r0, r4
 800c1d0:	f7ff ffa8 	bl	800c124 <L_shift>
 800c1d4:	4544      	cmp	r4, r8
 800c1d6:	d950      	bls.n	800c27a <__hexnan+0x10a>
 800c1d8:	2300      	movs	r3, #0
 800c1da:	f1a4 0904 	sub.w	r9, r4, #4
 800c1de:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1e2:	f8cd b008 	str.w	fp, [sp, #8]
 800c1e6:	464c      	mov	r4, r9
 800c1e8:	461d      	mov	r5, r3
 800c1ea:	9a03      	ldr	r2, [sp, #12]
 800c1ec:	e7d7      	b.n	800c19e <__hexnan+0x2e>
 800c1ee:	2929      	cmp	r1, #41	; 0x29
 800c1f0:	d156      	bne.n	800c2a0 <__hexnan+0x130>
 800c1f2:	3202      	adds	r2, #2
 800c1f4:	f8ca 2000 	str.w	r2, [sl]
 800c1f8:	f1bb 0f00 	cmp.w	fp, #0
 800c1fc:	d050      	beq.n	800c2a0 <__hexnan+0x130>
 800c1fe:	454c      	cmp	r4, r9
 800c200:	d206      	bcs.n	800c210 <__hexnan+0xa0>
 800c202:	2d07      	cmp	r5, #7
 800c204:	dc04      	bgt.n	800c210 <__hexnan+0xa0>
 800c206:	462a      	mov	r2, r5
 800c208:	4649      	mov	r1, r9
 800c20a:	4620      	mov	r0, r4
 800c20c:	f7ff ff8a 	bl	800c124 <L_shift>
 800c210:	4544      	cmp	r4, r8
 800c212:	d934      	bls.n	800c27e <__hexnan+0x10e>
 800c214:	f1a8 0204 	sub.w	r2, r8, #4
 800c218:	4623      	mov	r3, r4
 800c21a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c21e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c222:	429f      	cmp	r7, r3
 800c224:	d2f9      	bcs.n	800c21a <__hexnan+0xaa>
 800c226:	1b3b      	subs	r3, r7, r4
 800c228:	f023 0303 	bic.w	r3, r3, #3
 800c22c:	3304      	adds	r3, #4
 800c22e:	3401      	adds	r4, #1
 800c230:	3e03      	subs	r6, #3
 800c232:	42b4      	cmp	r4, r6
 800c234:	bf88      	it	hi
 800c236:	2304      	movhi	r3, #4
 800c238:	4443      	add	r3, r8
 800c23a:	2200      	movs	r2, #0
 800c23c:	f843 2b04 	str.w	r2, [r3], #4
 800c240:	429f      	cmp	r7, r3
 800c242:	d2fb      	bcs.n	800c23c <__hexnan+0xcc>
 800c244:	683b      	ldr	r3, [r7, #0]
 800c246:	b91b      	cbnz	r3, 800c250 <__hexnan+0xe0>
 800c248:	4547      	cmp	r7, r8
 800c24a:	d127      	bne.n	800c29c <__hexnan+0x12c>
 800c24c:	2301      	movs	r3, #1
 800c24e:	603b      	str	r3, [r7, #0]
 800c250:	2005      	movs	r0, #5
 800c252:	e026      	b.n	800c2a2 <__hexnan+0x132>
 800c254:	3501      	adds	r5, #1
 800c256:	2d08      	cmp	r5, #8
 800c258:	f10b 0b01 	add.w	fp, fp, #1
 800c25c:	dd06      	ble.n	800c26c <__hexnan+0xfc>
 800c25e:	4544      	cmp	r4, r8
 800c260:	d9c3      	bls.n	800c1ea <__hexnan+0x7a>
 800c262:	2300      	movs	r3, #0
 800c264:	f844 3c04 	str.w	r3, [r4, #-4]
 800c268:	2501      	movs	r5, #1
 800c26a:	3c04      	subs	r4, #4
 800c26c:	6822      	ldr	r2, [r4, #0]
 800c26e:	f000 000f 	and.w	r0, r0, #15
 800c272:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c276:	6022      	str	r2, [r4, #0]
 800c278:	e7b7      	b.n	800c1ea <__hexnan+0x7a>
 800c27a:	2508      	movs	r5, #8
 800c27c:	e7b5      	b.n	800c1ea <__hexnan+0x7a>
 800c27e:	9b01      	ldr	r3, [sp, #4]
 800c280:	2b00      	cmp	r3, #0
 800c282:	d0df      	beq.n	800c244 <__hexnan+0xd4>
 800c284:	f04f 32ff 	mov.w	r2, #4294967295
 800c288:	f1c3 0320 	rsb	r3, r3, #32
 800c28c:	fa22 f303 	lsr.w	r3, r2, r3
 800c290:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c294:	401a      	ands	r2, r3
 800c296:	f846 2c04 	str.w	r2, [r6, #-4]
 800c29a:	e7d3      	b.n	800c244 <__hexnan+0xd4>
 800c29c:	3f04      	subs	r7, #4
 800c29e:	e7d1      	b.n	800c244 <__hexnan+0xd4>
 800c2a0:	2004      	movs	r0, #4
 800c2a2:	b007      	add	sp, #28
 800c2a4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c2a8 <_localeconv_r>:
 800c2a8:	4800      	ldr	r0, [pc, #0]	; (800c2ac <_localeconv_r+0x4>)
 800c2aa:	4770      	bx	lr
 800c2ac:	20000174 	.word	0x20000174

0800c2b0 <malloc>:
 800c2b0:	4b02      	ldr	r3, [pc, #8]	; (800c2bc <malloc+0xc>)
 800c2b2:	4601      	mov	r1, r0
 800c2b4:	6818      	ldr	r0, [r3, #0]
 800c2b6:	f000 bd67 	b.w	800cd88 <_malloc_r>
 800c2ba:	bf00      	nop
 800c2bc:	2000001c 	.word	0x2000001c

0800c2c0 <__ascii_mbtowc>:
 800c2c0:	b082      	sub	sp, #8
 800c2c2:	b901      	cbnz	r1, 800c2c6 <__ascii_mbtowc+0x6>
 800c2c4:	a901      	add	r1, sp, #4
 800c2c6:	b142      	cbz	r2, 800c2da <__ascii_mbtowc+0x1a>
 800c2c8:	b14b      	cbz	r3, 800c2de <__ascii_mbtowc+0x1e>
 800c2ca:	7813      	ldrb	r3, [r2, #0]
 800c2cc:	600b      	str	r3, [r1, #0]
 800c2ce:	7812      	ldrb	r2, [r2, #0]
 800c2d0:	1e10      	subs	r0, r2, #0
 800c2d2:	bf18      	it	ne
 800c2d4:	2001      	movne	r0, #1
 800c2d6:	b002      	add	sp, #8
 800c2d8:	4770      	bx	lr
 800c2da:	4610      	mov	r0, r2
 800c2dc:	e7fb      	b.n	800c2d6 <__ascii_mbtowc+0x16>
 800c2de:	f06f 0001 	mvn.w	r0, #1
 800c2e2:	e7f8      	b.n	800c2d6 <__ascii_mbtowc+0x16>

0800c2e4 <memcpy>:
 800c2e4:	440a      	add	r2, r1
 800c2e6:	4291      	cmp	r1, r2
 800c2e8:	f100 33ff 	add.w	r3, r0, #4294967295
 800c2ec:	d100      	bne.n	800c2f0 <memcpy+0xc>
 800c2ee:	4770      	bx	lr
 800c2f0:	b510      	push	{r4, lr}
 800c2f2:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c2f6:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c2fa:	4291      	cmp	r1, r2
 800c2fc:	d1f9      	bne.n	800c2f2 <memcpy+0xe>
 800c2fe:	bd10      	pop	{r4, pc}

0800c300 <_Balloc>:
 800c300:	b570      	push	{r4, r5, r6, lr}
 800c302:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c304:	4604      	mov	r4, r0
 800c306:	460d      	mov	r5, r1
 800c308:	b976      	cbnz	r6, 800c328 <_Balloc+0x28>
 800c30a:	2010      	movs	r0, #16
 800c30c:	f7ff ffd0 	bl	800c2b0 <malloc>
 800c310:	4602      	mov	r2, r0
 800c312:	6260      	str	r0, [r4, #36]	; 0x24
 800c314:	b920      	cbnz	r0, 800c320 <_Balloc+0x20>
 800c316:	4b18      	ldr	r3, [pc, #96]	; (800c378 <_Balloc+0x78>)
 800c318:	4818      	ldr	r0, [pc, #96]	; (800c37c <_Balloc+0x7c>)
 800c31a:	2166      	movs	r1, #102	; 0x66
 800c31c:	f7fe fdaa 	bl	800ae74 <__assert_func>
 800c320:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c324:	6006      	str	r6, [r0, #0]
 800c326:	60c6      	str	r6, [r0, #12]
 800c328:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c32a:	68f3      	ldr	r3, [r6, #12]
 800c32c:	b183      	cbz	r3, 800c350 <_Balloc+0x50>
 800c32e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c330:	68db      	ldr	r3, [r3, #12]
 800c332:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c336:	b9b8      	cbnz	r0, 800c368 <_Balloc+0x68>
 800c338:	2101      	movs	r1, #1
 800c33a:	fa01 f605 	lsl.w	r6, r1, r5
 800c33e:	1d72      	adds	r2, r6, #5
 800c340:	0092      	lsls	r2, r2, #2
 800c342:	4620      	mov	r0, r4
 800c344:	f000 fc9d 	bl	800cc82 <_calloc_r>
 800c348:	b160      	cbz	r0, 800c364 <_Balloc+0x64>
 800c34a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c34e:	e00e      	b.n	800c36e <_Balloc+0x6e>
 800c350:	2221      	movs	r2, #33	; 0x21
 800c352:	2104      	movs	r1, #4
 800c354:	4620      	mov	r0, r4
 800c356:	f000 fc94 	bl	800cc82 <_calloc_r>
 800c35a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c35c:	60f0      	str	r0, [r6, #12]
 800c35e:	68db      	ldr	r3, [r3, #12]
 800c360:	2b00      	cmp	r3, #0
 800c362:	d1e4      	bne.n	800c32e <_Balloc+0x2e>
 800c364:	2000      	movs	r0, #0
 800c366:	bd70      	pop	{r4, r5, r6, pc}
 800c368:	6802      	ldr	r2, [r0, #0]
 800c36a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c36e:	2300      	movs	r3, #0
 800c370:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c374:	e7f7      	b.n	800c366 <_Balloc+0x66>
 800c376:	bf00      	nop
 800c378:	0800e0c8 	.word	0x0800e0c8
 800c37c:	0800e26c 	.word	0x0800e26c

0800c380 <_Bfree>:
 800c380:	b570      	push	{r4, r5, r6, lr}
 800c382:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c384:	4605      	mov	r5, r0
 800c386:	460c      	mov	r4, r1
 800c388:	b976      	cbnz	r6, 800c3a8 <_Bfree+0x28>
 800c38a:	2010      	movs	r0, #16
 800c38c:	f7ff ff90 	bl	800c2b0 <malloc>
 800c390:	4602      	mov	r2, r0
 800c392:	6268      	str	r0, [r5, #36]	; 0x24
 800c394:	b920      	cbnz	r0, 800c3a0 <_Bfree+0x20>
 800c396:	4b09      	ldr	r3, [pc, #36]	; (800c3bc <_Bfree+0x3c>)
 800c398:	4809      	ldr	r0, [pc, #36]	; (800c3c0 <_Bfree+0x40>)
 800c39a:	218a      	movs	r1, #138	; 0x8a
 800c39c:	f7fe fd6a 	bl	800ae74 <__assert_func>
 800c3a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c3a4:	6006      	str	r6, [r0, #0]
 800c3a6:	60c6      	str	r6, [r0, #12]
 800c3a8:	b13c      	cbz	r4, 800c3ba <_Bfree+0x3a>
 800c3aa:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c3ac:	6862      	ldr	r2, [r4, #4]
 800c3ae:	68db      	ldr	r3, [r3, #12]
 800c3b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c3b4:	6021      	str	r1, [r4, #0]
 800c3b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c3ba:	bd70      	pop	{r4, r5, r6, pc}
 800c3bc:	0800e0c8 	.word	0x0800e0c8
 800c3c0:	0800e26c 	.word	0x0800e26c

0800c3c4 <__multadd>:
 800c3c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c3c8:	690d      	ldr	r5, [r1, #16]
 800c3ca:	4607      	mov	r7, r0
 800c3cc:	460c      	mov	r4, r1
 800c3ce:	461e      	mov	r6, r3
 800c3d0:	f101 0c14 	add.w	ip, r1, #20
 800c3d4:	2000      	movs	r0, #0
 800c3d6:	f8dc 3000 	ldr.w	r3, [ip]
 800c3da:	b299      	uxth	r1, r3
 800c3dc:	fb02 6101 	mla	r1, r2, r1, r6
 800c3e0:	0c1e      	lsrs	r6, r3, #16
 800c3e2:	0c0b      	lsrs	r3, r1, #16
 800c3e4:	fb02 3306 	mla	r3, r2, r6, r3
 800c3e8:	b289      	uxth	r1, r1
 800c3ea:	3001      	adds	r0, #1
 800c3ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c3f0:	4285      	cmp	r5, r0
 800c3f2:	f84c 1b04 	str.w	r1, [ip], #4
 800c3f6:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c3fa:	dcec      	bgt.n	800c3d6 <__multadd+0x12>
 800c3fc:	b30e      	cbz	r6, 800c442 <__multadd+0x7e>
 800c3fe:	68a3      	ldr	r3, [r4, #8]
 800c400:	42ab      	cmp	r3, r5
 800c402:	dc19      	bgt.n	800c438 <__multadd+0x74>
 800c404:	6861      	ldr	r1, [r4, #4]
 800c406:	4638      	mov	r0, r7
 800c408:	3101      	adds	r1, #1
 800c40a:	f7ff ff79 	bl	800c300 <_Balloc>
 800c40e:	4680      	mov	r8, r0
 800c410:	b928      	cbnz	r0, 800c41e <__multadd+0x5a>
 800c412:	4602      	mov	r2, r0
 800c414:	4b0c      	ldr	r3, [pc, #48]	; (800c448 <__multadd+0x84>)
 800c416:	480d      	ldr	r0, [pc, #52]	; (800c44c <__multadd+0x88>)
 800c418:	21b5      	movs	r1, #181	; 0xb5
 800c41a:	f7fe fd2b 	bl	800ae74 <__assert_func>
 800c41e:	6922      	ldr	r2, [r4, #16]
 800c420:	3202      	adds	r2, #2
 800c422:	f104 010c 	add.w	r1, r4, #12
 800c426:	0092      	lsls	r2, r2, #2
 800c428:	300c      	adds	r0, #12
 800c42a:	f7ff ff5b 	bl	800c2e4 <memcpy>
 800c42e:	4621      	mov	r1, r4
 800c430:	4638      	mov	r0, r7
 800c432:	f7ff ffa5 	bl	800c380 <_Bfree>
 800c436:	4644      	mov	r4, r8
 800c438:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c43c:	3501      	adds	r5, #1
 800c43e:	615e      	str	r6, [r3, #20]
 800c440:	6125      	str	r5, [r4, #16]
 800c442:	4620      	mov	r0, r4
 800c444:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c448:	0800e1e0 	.word	0x0800e1e0
 800c44c:	0800e26c 	.word	0x0800e26c

0800c450 <__s2b>:
 800c450:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c454:	460c      	mov	r4, r1
 800c456:	4615      	mov	r5, r2
 800c458:	461f      	mov	r7, r3
 800c45a:	2209      	movs	r2, #9
 800c45c:	3308      	adds	r3, #8
 800c45e:	4606      	mov	r6, r0
 800c460:	fb93 f3f2 	sdiv	r3, r3, r2
 800c464:	2100      	movs	r1, #0
 800c466:	2201      	movs	r2, #1
 800c468:	429a      	cmp	r2, r3
 800c46a:	db09      	blt.n	800c480 <__s2b+0x30>
 800c46c:	4630      	mov	r0, r6
 800c46e:	f7ff ff47 	bl	800c300 <_Balloc>
 800c472:	b940      	cbnz	r0, 800c486 <__s2b+0x36>
 800c474:	4602      	mov	r2, r0
 800c476:	4b19      	ldr	r3, [pc, #100]	; (800c4dc <__s2b+0x8c>)
 800c478:	4819      	ldr	r0, [pc, #100]	; (800c4e0 <__s2b+0x90>)
 800c47a:	21ce      	movs	r1, #206	; 0xce
 800c47c:	f7fe fcfa 	bl	800ae74 <__assert_func>
 800c480:	0052      	lsls	r2, r2, #1
 800c482:	3101      	adds	r1, #1
 800c484:	e7f0      	b.n	800c468 <__s2b+0x18>
 800c486:	9b08      	ldr	r3, [sp, #32]
 800c488:	6143      	str	r3, [r0, #20]
 800c48a:	2d09      	cmp	r5, #9
 800c48c:	f04f 0301 	mov.w	r3, #1
 800c490:	6103      	str	r3, [r0, #16]
 800c492:	dd16      	ble.n	800c4c2 <__s2b+0x72>
 800c494:	f104 0909 	add.w	r9, r4, #9
 800c498:	46c8      	mov	r8, r9
 800c49a:	442c      	add	r4, r5
 800c49c:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c4a0:	4601      	mov	r1, r0
 800c4a2:	3b30      	subs	r3, #48	; 0x30
 800c4a4:	220a      	movs	r2, #10
 800c4a6:	4630      	mov	r0, r6
 800c4a8:	f7ff ff8c 	bl	800c3c4 <__multadd>
 800c4ac:	45a0      	cmp	r8, r4
 800c4ae:	d1f5      	bne.n	800c49c <__s2b+0x4c>
 800c4b0:	f1a5 0408 	sub.w	r4, r5, #8
 800c4b4:	444c      	add	r4, r9
 800c4b6:	1b2d      	subs	r5, r5, r4
 800c4b8:	1963      	adds	r3, r4, r5
 800c4ba:	42bb      	cmp	r3, r7
 800c4bc:	db04      	blt.n	800c4c8 <__s2b+0x78>
 800c4be:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c4c2:	340a      	adds	r4, #10
 800c4c4:	2509      	movs	r5, #9
 800c4c6:	e7f6      	b.n	800c4b6 <__s2b+0x66>
 800c4c8:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c4cc:	4601      	mov	r1, r0
 800c4ce:	3b30      	subs	r3, #48	; 0x30
 800c4d0:	220a      	movs	r2, #10
 800c4d2:	4630      	mov	r0, r6
 800c4d4:	f7ff ff76 	bl	800c3c4 <__multadd>
 800c4d8:	e7ee      	b.n	800c4b8 <__s2b+0x68>
 800c4da:	bf00      	nop
 800c4dc:	0800e1e0 	.word	0x0800e1e0
 800c4e0:	0800e26c 	.word	0x0800e26c

0800c4e4 <__hi0bits>:
 800c4e4:	0c03      	lsrs	r3, r0, #16
 800c4e6:	041b      	lsls	r3, r3, #16
 800c4e8:	b9d3      	cbnz	r3, 800c520 <__hi0bits+0x3c>
 800c4ea:	0400      	lsls	r0, r0, #16
 800c4ec:	2310      	movs	r3, #16
 800c4ee:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c4f2:	bf04      	itt	eq
 800c4f4:	0200      	lsleq	r0, r0, #8
 800c4f6:	3308      	addeq	r3, #8
 800c4f8:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c4fc:	bf04      	itt	eq
 800c4fe:	0100      	lsleq	r0, r0, #4
 800c500:	3304      	addeq	r3, #4
 800c502:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c506:	bf04      	itt	eq
 800c508:	0080      	lsleq	r0, r0, #2
 800c50a:	3302      	addeq	r3, #2
 800c50c:	2800      	cmp	r0, #0
 800c50e:	db05      	blt.n	800c51c <__hi0bits+0x38>
 800c510:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c514:	f103 0301 	add.w	r3, r3, #1
 800c518:	bf08      	it	eq
 800c51a:	2320      	moveq	r3, #32
 800c51c:	4618      	mov	r0, r3
 800c51e:	4770      	bx	lr
 800c520:	2300      	movs	r3, #0
 800c522:	e7e4      	b.n	800c4ee <__hi0bits+0xa>

0800c524 <__lo0bits>:
 800c524:	6803      	ldr	r3, [r0, #0]
 800c526:	f013 0207 	ands.w	r2, r3, #7
 800c52a:	4601      	mov	r1, r0
 800c52c:	d00b      	beq.n	800c546 <__lo0bits+0x22>
 800c52e:	07da      	lsls	r2, r3, #31
 800c530:	d423      	bmi.n	800c57a <__lo0bits+0x56>
 800c532:	0798      	lsls	r0, r3, #30
 800c534:	bf49      	itett	mi
 800c536:	085b      	lsrmi	r3, r3, #1
 800c538:	089b      	lsrpl	r3, r3, #2
 800c53a:	2001      	movmi	r0, #1
 800c53c:	600b      	strmi	r3, [r1, #0]
 800c53e:	bf5c      	itt	pl
 800c540:	600b      	strpl	r3, [r1, #0]
 800c542:	2002      	movpl	r0, #2
 800c544:	4770      	bx	lr
 800c546:	b298      	uxth	r0, r3
 800c548:	b9a8      	cbnz	r0, 800c576 <__lo0bits+0x52>
 800c54a:	0c1b      	lsrs	r3, r3, #16
 800c54c:	2010      	movs	r0, #16
 800c54e:	b2da      	uxtb	r2, r3
 800c550:	b90a      	cbnz	r2, 800c556 <__lo0bits+0x32>
 800c552:	3008      	adds	r0, #8
 800c554:	0a1b      	lsrs	r3, r3, #8
 800c556:	071a      	lsls	r2, r3, #28
 800c558:	bf04      	itt	eq
 800c55a:	091b      	lsreq	r3, r3, #4
 800c55c:	3004      	addeq	r0, #4
 800c55e:	079a      	lsls	r2, r3, #30
 800c560:	bf04      	itt	eq
 800c562:	089b      	lsreq	r3, r3, #2
 800c564:	3002      	addeq	r0, #2
 800c566:	07da      	lsls	r2, r3, #31
 800c568:	d403      	bmi.n	800c572 <__lo0bits+0x4e>
 800c56a:	085b      	lsrs	r3, r3, #1
 800c56c:	f100 0001 	add.w	r0, r0, #1
 800c570:	d005      	beq.n	800c57e <__lo0bits+0x5a>
 800c572:	600b      	str	r3, [r1, #0]
 800c574:	4770      	bx	lr
 800c576:	4610      	mov	r0, r2
 800c578:	e7e9      	b.n	800c54e <__lo0bits+0x2a>
 800c57a:	2000      	movs	r0, #0
 800c57c:	4770      	bx	lr
 800c57e:	2020      	movs	r0, #32
 800c580:	4770      	bx	lr
	...

0800c584 <__i2b>:
 800c584:	b510      	push	{r4, lr}
 800c586:	460c      	mov	r4, r1
 800c588:	2101      	movs	r1, #1
 800c58a:	f7ff feb9 	bl	800c300 <_Balloc>
 800c58e:	4602      	mov	r2, r0
 800c590:	b928      	cbnz	r0, 800c59e <__i2b+0x1a>
 800c592:	4b05      	ldr	r3, [pc, #20]	; (800c5a8 <__i2b+0x24>)
 800c594:	4805      	ldr	r0, [pc, #20]	; (800c5ac <__i2b+0x28>)
 800c596:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c59a:	f7fe fc6b 	bl	800ae74 <__assert_func>
 800c59e:	2301      	movs	r3, #1
 800c5a0:	6144      	str	r4, [r0, #20]
 800c5a2:	6103      	str	r3, [r0, #16]
 800c5a4:	bd10      	pop	{r4, pc}
 800c5a6:	bf00      	nop
 800c5a8:	0800e1e0 	.word	0x0800e1e0
 800c5ac:	0800e26c 	.word	0x0800e26c

0800c5b0 <__multiply>:
 800c5b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c5b4:	4691      	mov	r9, r2
 800c5b6:	690a      	ldr	r2, [r1, #16]
 800c5b8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c5bc:	429a      	cmp	r2, r3
 800c5be:	bfb8      	it	lt
 800c5c0:	460b      	movlt	r3, r1
 800c5c2:	460c      	mov	r4, r1
 800c5c4:	bfbc      	itt	lt
 800c5c6:	464c      	movlt	r4, r9
 800c5c8:	4699      	movlt	r9, r3
 800c5ca:	6927      	ldr	r7, [r4, #16]
 800c5cc:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c5d0:	68a3      	ldr	r3, [r4, #8]
 800c5d2:	6861      	ldr	r1, [r4, #4]
 800c5d4:	eb07 060a 	add.w	r6, r7, sl
 800c5d8:	42b3      	cmp	r3, r6
 800c5da:	b085      	sub	sp, #20
 800c5dc:	bfb8      	it	lt
 800c5de:	3101      	addlt	r1, #1
 800c5e0:	f7ff fe8e 	bl	800c300 <_Balloc>
 800c5e4:	b930      	cbnz	r0, 800c5f4 <__multiply+0x44>
 800c5e6:	4602      	mov	r2, r0
 800c5e8:	4b44      	ldr	r3, [pc, #272]	; (800c6fc <__multiply+0x14c>)
 800c5ea:	4845      	ldr	r0, [pc, #276]	; (800c700 <__multiply+0x150>)
 800c5ec:	f240 115d 	movw	r1, #349	; 0x15d
 800c5f0:	f7fe fc40 	bl	800ae74 <__assert_func>
 800c5f4:	f100 0514 	add.w	r5, r0, #20
 800c5f8:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c5fc:	462b      	mov	r3, r5
 800c5fe:	2200      	movs	r2, #0
 800c600:	4543      	cmp	r3, r8
 800c602:	d321      	bcc.n	800c648 <__multiply+0x98>
 800c604:	f104 0314 	add.w	r3, r4, #20
 800c608:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c60c:	f109 0314 	add.w	r3, r9, #20
 800c610:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c614:	9202      	str	r2, [sp, #8]
 800c616:	1b3a      	subs	r2, r7, r4
 800c618:	3a15      	subs	r2, #21
 800c61a:	f022 0203 	bic.w	r2, r2, #3
 800c61e:	3204      	adds	r2, #4
 800c620:	f104 0115 	add.w	r1, r4, #21
 800c624:	428f      	cmp	r7, r1
 800c626:	bf38      	it	cc
 800c628:	2204      	movcc	r2, #4
 800c62a:	9201      	str	r2, [sp, #4]
 800c62c:	9a02      	ldr	r2, [sp, #8]
 800c62e:	9303      	str	r3, [sp, #12]
 800c630:	429a      	cmp	r2, r3
 800c632:	d80c      	bhi.n	800c64e <__multiply+0x9e>
 800c634:	2e00      	cmp	r6, #0
 800c636:	dd03      	ble.n	800c640 <__multiply+0x90>
 800c638:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c63c:	2b00      	cmp	r3, #0
 800c63e:	d05a      	beq.n	800c6f6 <__multiply+0x146>
 800c640:	6106      	str	r6, [r0, #16]
 800c642:	b005      	add	sp, #20
 800c644:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c648:	f843 2b04 	str.w	r2, [r3], #4
 800c64c:	e7d8      	b.n	800c600 <__multiply+0x50>
 800c64e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c652:	f1ba 0f00 	cmp.w	sl, #0
 800c656:	d024      	beq.n	800c6a2 <__multiply+0xf2>
 800c658:	f104 0e14 	add.w	lr, r4, #20
 800c65c:	46a9      	mov	r9, r5
 800c65e:	f04f 0c00 	mov.w	ip, #0
 800c662:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c666:	f8d9 1000 	ldr.w	r1, [r9]
 800c66a:	fa1f fb82 	uxth.w	fp, r2
 800c66e:	b289      	uxth	r1, r1
 800c670:	fb0a 110b 	mla	r1, sl, fp, r1
 800c674:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c678:	f8d9 2000 	ldr.w	r2, [r9]
 800c67c:	4461      	add	r1, ip
 800c67e:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c682:	fb0a c20b 	mla	r2, sl, fp, ip
 800c686:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c68a:	b289      	uxth	r1, r1
 800c68c:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c690:	4577      	cmp	r7, lr
 800c692:	f849 1b04 	str.w	r1, [r9], #4
 800c696:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c69a:	d8e2      	bhi.n	800c662 <__multiply+0xb2>
 800c69c:	9a01      	ldr	r2, [sp, #4]
 800c69e:	f845 c002 	str.w	ip, [r5, r2]
 800c6a2:	9a03      	ldr	r2, [sp, #12]
 800c6a4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c6a8:	3304      	adds	r3, #4
 800c6aa:	f1b9 0f00 	cmp.w	r9, #0
 800c6ae:	d020      	beq.n	800c6f2 <__multiply+0x142>
 800c6b0:	6829      	ldr	r1, [r5, #0]
 800c6b2:	f104 0c14 	add.w	ip, r4, #20
 800c6b6:	46ae      	mov	lr, r5
 800c6b8:	f04f 0a00 	mov.w	sl, #0
 800c6bc:	f8bc b000 	ldrh.w	fp, [ip]
 800c6c0:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c6c4:	fb09 220b 	mla	r2, r9, fp, r2
 800c6c8:	4492      	add	sl, r2
 800c6ca:	b289      	uxth	r1, r1
 800c6cc:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c6d0:	f84e 1b04 	str.w	r1, [lr], #4
 800c6d4:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c6d8:	f8be 1000 	ldrh.w	r1, [lr]
 800c6dc:	0c12      	lsrs	r2, r2, #16
 800c6de:	fb09 1102 	mla	r1, r9, r2, r1
 800c6e2:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c6e6:	4567      	cmp	r7, ip
 800c6e8:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c6ec:	d8e6      	bhi.n	800c6bc <__multiply+0x10c>
 800c6ee:	9a01      	ldr	r2, [sp, #4]
 800c6f0:	50a9      	str	r1, [r5, r2]
 800c6f2:	3504      	adds	r5, #4
 800c6f4:	e79a      	b.n	800c62c <__multiply+0x7c>
 800c6f6:	3e01      	subs	r6, #1
 800c6f8:	e79c      	b.n	800c634 <__multiply+0x84>
 800c6fa:	bf00      	nop
 800c6fc:	0800e1e0 	.word	0x0800e1e0
 800c700:	0800e26c 	.word	0x0800e26c

0800c704 <__pow5mult>:
 800c704:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c708:	4615      	mov	r5, r2
 800c70a:	f012 0203 	ands.w	r2, r2, #3
 800c70e:	4606      	mov	r6, r0
 800c710:	460f      	mov	r7, r1
 800c712:	d007      	beq.n	800c724 <__pow5mult+0x20>
 800c714:	4c25      	ldr	r4, [pc, #148]	; (800c7ac <__pow5mult+0xa8>)
 800c716:	3a01      	subs	r2, #1
 800c718:	2300      	movs	r3, #0
 800c71a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c71e:	f7ff fe51 	bl	800c3c4 <__multadd>
 800c722:	4607      	mov	r7, r0
 800c724:	10ad      	asrs	r5, r5, #2
 800c726:	d03d      	beq.n	800c7a4 <__pow5mult+0xa0>
 800c728:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c72a:	b97c      	cbnz	r4, 800c74c <__pow5mult+0x48>
 800c72c:	2010      	movs	r0, #16
 800c72e:	f7ff fdbf 	bl	800c2b0 <malloc>
 800c732:	4602      	mov	r2, r0
 800c734:	6270      	str	r0, [r6, #36]	; 0x24
 800c736:	b928      	cbnz	r0, 800c744 <__pow5mult+0x40>
 800c738:	4b1d      	ldr	r3, [pc, #116]	; (800c7b0 <__pow5mult+0xac>)
 800c73a:	481e      	ldr	r0, [pc, #120]	; (800c7b4 <__pow5mult+0xb0>)
 800c73c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c740:	f7fe fb98 	bl	800ae74 <__assert_func>
 800c744:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c748:	6004      	str	r4, [r0, #0]
 800c74a:	60c4      	str	r4, [r0, #12]
 800c74c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c750:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c754:	b94c      	cbnz	r4, 800c76a <__pow5mult+0x66>
 800c756:	f240 2171 	movw	r1, #625	; 0x271
 800c75a:	4630      	mov	r0, r6
 800c75c:	f7ff ff12 	bl	800c584 <__i2b>
 800c760:	2300      	movs	r3, #0
 800c762:	f8c8 0008 	str.w	r0, [r8, #8]
 800c766:	4604      	mov	r4, r0
 800c768:	6003      	str	r3, [r0, #0]
 800c76a:	f04f 0900 	mov.w	r9, #0
 800c76e:	07eb      	lsls	r3, r5, #31
 800c770:	d50a      	bpl.n	800c788 <__pow5mult+0x84>
 800c772:	4639      	mov	r1, r7
 800c774:	4622      	mov	r2, r4
 800c776:	4630      	mov	r0, r6
 800c778:	f7ff ff1a 	bl	800c5b0 <__multiply>
 800c77c:	4639      	mov	r1, r7
 800c77e:	4680      	mov	r8, r0
 800c780:	4630      	mov	r0, r6
 800c782:	f7ff fdfd 	bl	800c380 <_Bfree>
 800c786:	4647      	mov	r7, r8
 800c788:	106d      	asrs	r5, r5, #1
 800c78a:	d00b      	beq.n	800c7a4 <__pow5mult+0xa0>
 800c78c:	6820      	ldr	r0, [r4, #0]
 800c78e:	b938      	cbnz	r0, 800c7a0 <__pow5mult+0x9c>
 800c790:	4622      	mov	r2, r4
 800c792:	4621      	mov	r1, r4
 800c794:	4630      	mov	r0, r6
 800c796:	f7ff ff0b 	bl	800c5b0 <__multiply>
 800c79a:	6020      	str	r0, [r4, #0]
 800c79c:	f8c0 9000 	str.w	r9, [r0]
 800c7a0:	4604      	mov	r4, r0
 800c7a2:	e7e4      	b.n	800c76e <__pow5mult+0x6a>
 800c7a4:	4638      	mov	r0, r7
 800c7a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c7aa:	bf00      	nop
 800c7ac:	0800e3b8 	.word	0x0800e3b8
 800c7b0:	0800e0c8 	.word	0x0800e0c8
 800c7b4:	0800e26c 	.word	0x0800e26c

0800c7b8 <__lshift>:
 800c7b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c7bc:	460c      	mov	r4, r1
 800c7be:	6849      	ldr	r1, [r1, #4]
 800c7c0:	6923      	ldr	r3, [r4, #16]
 800c7c2:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c7c6:	68a3      	ldr	r3, [r4, #8]
 800c7c8:	4607      	mov	r7, r0
 800c7ca:	4691      	mov	r9, r2
 800c7cc:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c7d0:	f108 0601 	add.w	r6, r8, #1
 800c7d4:	42b3      	cmp	r3, r6
 800c7d6:	db0b      	blt.n	800c7f0 <__lshift+0x38>
 800c7d8:	4638      	mov	r0, r7
 800c7da:	f7ff fd91 	bl	800c300 <_Balloc>
 800c7de:	4605      	mov	r5, r0
 800c7e0:	b948      	cbnz	r0, 800c7f6 <__lshift+0x3e>
 800c7e2:	4602      	mov	r2, r0
 800c7e4:	4b2a      	ldr	r3, [pc, #168]	; (800c890 <__lshift+0xd8>)
 800c7e6:	482b      	ldr	r0, [pc, #172]	; (800c894 <__lshift+0xdc>)
 800c7e8:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c7ec:	f7fe fb42 	bl	800ae74 <__assert_func>
 800c7f0:	3101      	adds	r1, #1
 800c7f2:	005b      	lsls	r3, r3, #1
 800c7f4:	e7ee      	b.n	800c7d4 <__lshift+0x1c>
 800c7f6:	2300      	movs	r3, #0
 800c7f8:	f100 0114 	add.w	r1, r0, #20
 800c7fc:	f100 0210 	add.w	r2, r0, #16
 800c800:	4618      	mov	r0, r3
 800c802:	4553      	cmp	r3, sl
 800c804:	db37      	blt.n	800c876 <__lshift+0xbe>
 800c806:	6920      	ldr	r0, [r4, #16]
 800c808:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c80c:	f104 0314 	add.w	r3, r4, #20
 800c810:	f019 091f 	ands.w	r9, r9, #31
 800c814:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c818:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c81c:	d02f      	beq.n	800c87e <__lshift+0xc6>
 800c81e:	f1c9 0e20 	rsb	lr, r9, #32
 800c822:	468a      	mov	sl, r1
 800c824:	f04f 0c00 	mov.w	ip, #0
 800c828:	681a      	ldr	r2, [r3, #0]
 800c82a:	fa02 f209 	lsl.w	r2, r2, r9
 800c82e:	ea42 020c 	orr.w	r2, r2, ip
 800c832:	f84a 2b04 	str.w	r2, [sl], #4
 800c836:	f853 2b04 	ldr.w	r2, [r3], #4
 800c83a:	4298      	cmp	r0, r3
 800c83c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c840:	d8f2      	bhi.n	800c828 <__lshift+0x70>
 800c842:	1b03      	subs	r3, r0, r4
 800c844:	3b15      	subs	r3, #21
 800c846:	f023 0303 	bic.w	r3, r3, #3
 800c84a:	3304      	adds	r3, #4
 800c84c:	f104 0215 	add.w	r2, r4, #21
 800c850:	4290      	cmp	r0, r2
 800c852:	bf38      	it	cc
 800c854:	2304      	movcc	r3, #4
 800c856:	f841 c003 	str.w	ip, [r1, r3]
 800c85a:	f1bc 0f00 	cmp.w	ip, #0
 800c85e:	d001      	beq.n	800c864 <__lshift+0xac>
 800c860:	f108 0602 	add.w	r6, r8, #2
 800c864:	3e01      	subs	r6, #1
 800c866:	4638      	mov	r0, r7
 800c868:	612e      	str	r6, [r5, #16]
 800c86a:	4621      	mov	r1, r4
 800c86c:	f7ff fd88 	bl	800c380 <_Bfree>
 800c870:	4628      	mov	r0, r5
 800c872:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c876:	f842 0f04 	str.w	r0, [r2, #4]!
 800c87a:	3301      	adds	r3, #1
 800c87c:	e7c1      	b.n	800c802 <__lshift+0x4a>
 800c87e:	3904      	subs	r1, #4
 800c880:	f853 2b04 	ldr.w	r2, [r3], #4
 800c884:	f841 2f04 	str.w	r2, [r1, #4]!
 800c888:	4298      	cmp	r0, r3
 800c88a:	d8f9      	bhi.n	800c880 <__lshift+0xc8>
 800c88c:	e7ea      	b.n	800c864 <__lshift+0xac>
 800c88e:	bf00      	nop
 800c890:	0800e1e0 	.word	0x0800e1e0
 800c894:	0800e26c 	.word	0x0800e26c

0800c898 <__mcmp>:
 800c898:	b530      	push	{r4, r5, lr}
 800c89a:	6902      	ldr	r2, [r0, #16]
 800c89c:	690c      	ldr	r4, [r1, #16]
 800c89e:	1b12      	subs	r2, r2, r4
 800c8a0:	d10e      	bne.n	800c8c0 <__mcmp+0x28>
 800c8a2:	f100 0314 	add.w	r3, r0, #20
 800c8a6:	3114      	adds	r1, #20
 800c8a8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c8ac:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c8b0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c8b4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c8b8:	42a5      	cmp	r5, r4
 800c8ba:	d003      	beq.n	800c8c4 <__mcmp+0x2c>
 800c8bc:	d305      	bcc.n	800c8ca <__mcmp+0x32>
 800c8be:	2201      	movs	r2, #1
 800c8c0:	4610      	mov	r0, r2
 800c8c2:	bd30      	pop	{r4, r5, pc}
 800c8c4:	4283      	cmp	r3, r0
 800c8c6:	d3f3      	bcc.n	800c8b0 <__mcmp+0x18>
 800c8c8:	e7fa      	b.n	800c8c0 <__mcmp+0x28>
 800c8ca:	f04f 32ff 	mov.w	r2, #4294967295
 800c8ce:	e7f7      	b.n	800c8c0 <__mcmp+0x28>

0800c8d0 <__mdiff>:
 800c8d0:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c8d4:	460c      	mov	r4, r1
 800c8d6:	4606      	mov	r6, r0
 800c8d8:	4611      	mov	r1, r2
 800c8da:	4620      	mov	r0, r4
 800c8dc:	4690      	mov	r8, r2
 800c8de:	f7ff ffdb 	bl	800c898 <__mcmp>
 800c8e2:	1e05      	subs	r5, r0, #0
 800c8e4:	d110      	bne.n	800c908 <__mdiff+0x38>
 800c8e6:	4629      	mov	r1, r5
 800c8e8:	4630      	mov	r0, r6
 800c8ea:	f7ff fd09 	bl	800c300 <_Balloc>
 800c8ee:	b930      	cbnz	r0, 800c8fe <__mdiff+0x2e>
 800c8f0:	4b3a      	ldr	r3, [pc, #232]	; (800c9dc <__mdiff+0x10c>)
 800c8f2:	4602      	mov	r2, r0
 800c8f4:	f240 2132 	movw	r1, #562	; 0x232
 800c8f8:	4839      	ldr	r0, [pc, #228]	; (800c9e0 <__mdiff+0x110>)
 800c8fa:	f7fe fabb 	bl	800ae74 <__assert_func>
 800c8fe:	2301      	movs	r3, #1
 800c900:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c904:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c908:	bfa4      	itt	ge
 800c90a:	4643      	movge	r3, r8
 800c90c:	46a0      	movge	r8, r4
 800c90e:	4630      	mov	r0, r6
 800c910:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c914:	bfa6      	itte	ge
 800c916:	461c      	movge	r4, r3
 800c918:	2500      	movge	r5, #0
 800c91a:	2501      	movlt	r5, #1
 800c91c:	f7ff fcf0 	bl	800c300 <_Balloc>
 800c920:	b920      	cbnz	r0, 800c92c <__mdiff+0x5c>
 800c922:	4b2e      	ldr	r3, [pc, #184]	; (800c9dc <__mdiff+0x10c>)
 800c924:	4602      	mov	r2, r0
 800c926:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c92a:	e7e5      	b.n	800c8f8 <__mdiff+0x28>
 800c92c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c930:	6926      	ldr	r6, [r4, #16]
 800c932:	60c5      	str	r5, [r0, #12]
 800c934:	f104 0914 	add.w	r9, r4, #20
 800c938:	f108 0514 	add.w	r5, r8, #20
 800c93c:	f100 0e14 	add.w	lr, r0, #20
 800c940:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c944:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c948:	f108 0210 	add.w	r2, r8, #16
 800c94c:	46f2      	mov	sl, lr
 800c94e:	2100      	movs	r1, #0
 800c950:	f859 3b04 	ldr.w	r3, [r9], #4
 800c954:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c958:	fa1f f883 	uxth.w	r8, r3
 800c95c:	fa11 f18b 	uxtah	r1, r1, fp
 800c960:	0c1b      	lsrs	r3, r3, #16
 800c962:	eba1 0808 	sub.w	r8, r1, r8
 800c966:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c96a:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c96e:	fa1f f888 	uxth.w	r8, r8
 800c972:	1419      	asrs	r1, r3, #16
 800c974:	454e      	cmp	r6, r9
 800c976:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c97a:	f84a 3b04 	str.w	r3, [sl], #4
 800c97e:	d8e7      	bhi.n	800c950 <__mdiff+0x80>
 800c980:	1b33      	subs	r3, r6, r4
 800c982:	3b15      	subs	r3, #21
 800c984:	f023 0303 	bic.w	r3, r3, #3
 800c988:	3304      	adds	r3, #4
 800c98a:	3415      	adds	r4, #21
 800c98c:	42a6      	cmp	r6, r4
 800c98e:	bf38      	it	cc
 800c990:	2304      	movcc	r3, #4
 800c992:	441d      	add	r5, r3
 800c994:	4473      	add	r3, lr
 800c996:	469e      	mov	lr, r3
 800c998:	462e      	mov	r6, r5
 800c99a:	4566      	cmp	r6, ip
 800c99c:	d30e      	bcc.n	800c9bc <__mdiff+0xec>
 800c99e:	f10c 0203 	add.w	r2, ip, #3
 800c9a2:	1b52      	subs	r2, r2, r5
 800c9a4:	f022 0203 	bic.w	r2, r2, #3
 800c9a8:	3d03      	subs	r5, #3
 800c9aa:	45ac      	cmp	ip, r5
 800c9ac:	bf38      	it	cc
 800c9ae:	2200      	movcc	r2, #0
 800c9b0:	441a      	add	r2, r3
 800c9b2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c9b6:	b17b      	cbz	r3, 800c9d8 <__mdiff+0x108>
 800c9b8:	6107      	str	r7, [r0, #16]
 800c9ba:	e7a3      	b.n	800c904 <__mdiff+0x34>
 800c9bc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c9c0:	fa11 f288 	uxtah	r2, r1, r8
 800c9c4:	1414      	asrs	r4, r2, #16
 800c9c6:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c9ca:	b292      	uxth	r2, r2
 800c9cc:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c9d0:	f84e 2b04 	str.w	r2, [lr], #4
 800c9d4:	1421      	asrs	r1, r4, #16
 800c9d6:	e7e0      	b.n	800c99a <__mdiff+0xca>
 800c9d8:	3f01      	subs	r7, #1
 800c9da:	e7ea      	b.n	800c9b2 <__mdiff+0xe2>
 800c9dc:	0800e1e0 	.word	0x0800e1e0
 800c9e0:	0800e26c 	.word	0x0800e26c

0800c9e4 <__ulp>:
 800c9e4:	b082      	sub	sp, #8
 800c9e6:	ed8d 0b00 	vstr	d0, [sp]
 800c9ea:	9b01      	ldr	r3, [sp, #4]
 800c9ec:	4912      	ldr	r1, [pc, #72]	; (800ca38 <__ulp+0x54>)
 800c9ee:	4019      	ands	r1, r3
 800c9f0:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c9f4:	2900      	cmp	r1, #0
 800c9f6:	dd05      	ble.n	800ca04 <__ulp+0x20>
 800c9f8:	2200      	movs	r2, #0
 800c9fa:	460b      	mov	r3, r1
 800c9fc:	ec43 2b10 	vmov	d0, r2, r3
 800ca00:	b002      	add	sp, #8
 800ca02:	4770      	bx	lr
 800ca04:	4249      	negs	r1, r1
 800ca06:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800ca0a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800ca0e:	f04f 0200 	mov.w	r2, #0
 800ca12:	f04f 0300 	mov.w	r3, #0
 800ca16:	da04      	bge.n	800ca22 <__ulp+0x3e>
 800ca18:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800ca1c:	fa41 f300 	asr.w	r3, r1, r0
 800ca20:	e7ec      	b.n	800c9fc <__ulp+0x18>
 800ca22:	f1a0 0114 	sub.w	r1, r0, #20
 800ca26:	291e      	cmp	r1, #30
 800ca28:	bfda      	itte	le
 800ca2a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800ca2e:	fa20 f101 	lsrle.w	r1, r0, r1
 800ca32:	2101      	movgt	r1, #1
 800ca34:	460a      	mov	r2, r1
 800ca36:	e7e1      	b.n	800c9fc <__ulp+0x18>
 800ca38:	7ff00000 	.word	0x7ff00000

0800ca3c <__b2d>:
 800ca3c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ca3e:	6905      	ldr	r5, [r0, #16]
 800ca40:	f100 0714 	add.w	r7, r0, #20
 800ca44:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800ca48:	1f2e      	subs	r6, r5, #4
 800ca4a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800ca4e:	4620      	mov	r0, r4
 800ca50:	f7ff fd48 	bl	800c4e4 <__hi0bits>
 800ca54:	f1c0 0320 	rsb	r3, r0, #32
 800ca58:	280a      	cmp	r0, #10
 800ca5a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800cad8 <__b2d+0x9c>
 800ca5e:	600b      	str	r3, [r1, #0]
 800ca60:	dc14      	bgt.n	800ca8c <__b2d+0x50>
 800ca62:	f1c0 0e0b 	rsb	lr, r0, #11
 800ca66:	fa24 f10e 	lsr.w	r1, r4, lr
 800ca6a:	42b7      	cmp	r7, r6
 800ca6c:	ea41 030c 	orr.w	r3, r1, ip
 800ca70:	bf34      	ite	cc
 800ca72:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca76:	2100      	movcs	r1, #0
 800ca78:	3015      	adds	r0, #21
 800ca7a:	fa04 f000 	lsl.w	r0, r4, r0
 800ca7e:	fa21 f10e 	lsr.w	r1, r1, lr
 800ca82:	ea40 0201 	orr.w	r2, r0, r1
 800ca86:	ec43 2b10 	vmov	d0, r2, r3
 800ca8a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800ca8c:	42b7      	cmp	r7, r6
 800ca8e:	bf3a      	itte	cc
 800ca90:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800ca94:	f1a5 0608 	subcc.w	r6, r5, #8
 800ca98:	2100      	movcs	r1, #0
 800ca9a:	380b      	subs	r0, #11
 800ca9c:	d017      	beq.n	800cace <__b2d+0x92>
 800ca9e:	f1c0 0c20 	rsb	ip, r0, #32
 800caa2:	fa04 f500 	lsl.w	r5, r4, r0
 800caa6:	42be      	cmp	r6, r7
 800caa8:	fa21 f40c 	lsr.w	r4, r1, ip
 800caac:	ea45 0504 	orr.w	r5, r5, r4
 800cab0:	bf8c      	ite	hi
 800cab2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800cab6:	2400      	movls	r4, #0
 800cab8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800cabc:	fa01 f000 	lsl.w	r0, r1, r0
 800cac0:	fa24 f40c 	lsr.w	r4, r4, ip
 800cac4:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800cac8:	ea40 0204 	orr.w	r2, r0, r4
 800cacc:	e7db      	b.n	800ca86 <__b2d+0x4a>
 800cace:	ea44 030c 	orr.w	r3, r4, ip
 800cad2:	460a      	mov	r2, r1
 800cad4:	e7d7      	b.n	800ca86 <__b2d+0x4a>
 800cad6:	bf00      	nop
 800cad8:	3ff00000 	.word	0x3ff00000

0800cadc <__d2b>:
 800cadc:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800cae0:	4689      	mov	r9, r1
 800cae2:	2101      	movs	r1, #1
 800cae4:	ec57 6b10 	vmov	r6, r7, d0
 800cae8:	4690      	mov	r8, r2
 800caea:	f7ff fc09 	bl	800c300 <_Balloc>
 800caee:	4604      	mov	r4, r0
 800caf0:	b930      	cbnz	r0, 800cb00 <__d2b+0x24>
 800caf2:	4602      	mov	r2, r0
 800caf4:	4b25      	ldr	r3, [pc, #148]	; (800cb8c <__d2b+0xb0>)
 800caf6:	4826      	ldr	r0, [pc, #152]	; (800cb90 <__d2b+0xb4>)
 800caf8:	f240 310a 	movw	r1, #778	; 0x30a
 800cafc:	f7fe f9ba 	bl	800ae74 <__assert_func>
 800cb00:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800cb04:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800cb08:	bb35      	cbnz	r5, 800cb58 <__d2b+0x7c>
 800cb0a:	2e00      	cmp	r6, #0
 800cb0c:	9301      	str	r3, [sp, #4]
 800cb0e:	d028      	beq.n	800cb62 <__d2b+0x86>
 800cb10:	4668      	mov	r0, sp
 800cb12:	9600      	str	r6, [sp, #0]
 800cb14:	f7ff fd06 	bl	800c524 <__lo0bits>
 800cb18:	9900      	ldr	r1, [sp, #0]
 800cb1a:	b300      	cbz	r0, 800cb5e <__d2b+0x82>
 800cb1c:	9a01      	ldr	r2, [sp, #4]
 800cb1e:	f1c0 0320 	rsb	r3, r0, #32
 800cb22:	fa02 f303 	lsl.w	r3, r2, r3
 800cb26:	430b      	orrs	r3, r1
 800cb28:	40c2      	lsrs	r2, r0
 800cb2a:	6163      	str	r3, [r4, #20]
 800cb2c:	9201      	str	r2, [sp, #4]
 800cb2e:	9b01      	ldr	r3, [sp, #4]
 800cb30:	61a3      	str	r3, [r4, #24]
 800cb32:	2b00      	cmp	r3, #0
 800cb34:	bf14      	ite	ne
 800cb36:	2202      	movne	r2, #2
 800cb38:	2201      	moveq	r2, #1
 800cb3a:	6122      	str	r2, [r4, #16]
 800cb3c:	b1d5      	cbz	r5, 800cb74 <__d2b+0x98>
 800cb3e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800cb42:	4405      	add	r5, r0
 800cb44:	f8c9 5000 	str.w	r5, [r9]
 800cb48:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800cb4c:	f8c8 0000 	str.w	r0, [r8]
 800cb50:	4620      	mov	r0, r4
 800cb52:	b003      	add	sp, #12
 800cb54:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800cb58:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800cb5c:	e7d5      	b.n	800cb0a <__d2b+0x2e>
 800cb5e:	6161      	str	r1, [r4, #20]
 800cb60:	e7e5      	b.n	800cb2e <__d2b+0x52>
 800cb62:	a801      	add	r0, sp, #4
 800cb64:	f7ff fcde 	bl	800c524 <__lo0bits>
 800cb68:	9b01      	ldr	r3, [sp, #4]
 800cb6a:	6163      	str	r3, [r4, #20]
 800cb6c:	2201      	movs	r2, #1
 800cb6e:	6122      	str	r2, [r4, #16]
 800cb70:	3020      	adds	r0, #32
 800cb72:	e7e3      	b.n	800cb3c <__d2b+0x60>
 800cb74:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cb78:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cb7c:	f8c9 0000 	str.w	r0, [r9]
 800cb80:	6918      	ldr	r0, [r3, #16]
 800cb82:	f7ff fcaf 	bl	800c4e4 <__hi0bits>
 800cb86:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800cb8a:	e7df      	b.n	800cb4c <__d2b+0x70>
 800cb8c:	0800e1e0 	.word	0x0800e1e0
 800cb90:	0800e26c 	.word	0x0800e26c

0800cb94 <__ratio>:
 800cb94:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cb98:	4688      	mov	r8, r1
 800cb9a:	4669      	mov	r1, sp
 800cb9c:	4681      	mov	r9, r0
 800cb9e:	f7ff ff4d 	bl	800ca3c <__b2d>
 800cba2:	a901      	add	r1, sp, #4
 800cba4:	4640      	mov	r0, r8
 800cba6:	ec55 4b10 	vmov	r4, r5, d0
 800cbaa:	f7ff ff47 	bl	800ca3c <__b2d>
 800cbae:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800cbb2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800cbb6:	eba3 0c02 	sub.w	ip, r3, r2
 800cbba:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cbbe:	1a9b      	subs	r3, r3, r2
 800cbc0:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cbc4:	ec51 0b10 	vmov	r0, r1, d0
 800cbc8:	2b00      	cmp	r3, #0
 800cbca:	bfd6      	itet	le
 800cbcc:	460a      	movle	r2, r1
 800cbce:	462a      	movgt	r2, r5
 800cbd0:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cbd4:	468b      	mov	fp, r1
 800cbd6:	462f      	mov	r7, r5
 800cbd8:	bfd4      	ite	le
 800cbda:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cbde:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cbe2:	4620      	mov	r0, r4
 800cbe4:	ee10 2a10 	vmov	r2, s0
 800cbe8:	465b      	mov	r3, fp
 800cbea:	4639      	mov	r1, r7
 800cbec:	f7f3 fe2e 	bl	800084c <__aeabi_ddiv>
 800cbf0:	ec41 0b10 	vmov	d0, r0, r1
 800cbf4:	b003      	add	sp, #12
 800cbf6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cbfa <__copybits>:
 800cbfa:	3901      	subs	r1, #1
 800cbfc:	b570      	push	{r4, r5, r6, lr}
 800cbfe:	1149      	asrs	r1, r1, #5
 800cc00:	6914      	ldr	r4, [r2, #16]
 800cc02:	3101      	adds	r1, #1
 800cc04:	f102 0314 	add.w	r3, r2, #20
 800cc08:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cc0c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cc10:	1f05      	subs	r5, r0, #4
 800cc12:	42a3      	cmp	r3, r4
 800cc14:	d30c      	bcc.n	800cc30 <__copybits+0x36>
 800cc16:	1aa3      	subs	r3, r4, r2
 800cc18:	3b11      	subs	r3, #17
 800cc1a:	f023 0303 	bic.w	r3, r3, #3
 800cc1e:	3211      	adds	r2, #17
 800cc20:	42a2      	cmp	r2, r4
 800cc22:	bf88      	it	hi
 800cc24:	2300      	movhi	r3, #0
 800cc26:	4418      	add	r0, r3
 800cc28:	2300      	movs	r3, #0
 800cc2a:	4288      	cmp	r0, r1
 800cc2c:	d305      	bcc.n	800cc3a <__copybits+0x40>
 800cc2e:	bd70      	pop	{r4, r5, r6, pc}
 800cc30:	f853 6b04 	ldr.w	r6, [r3], #4
 800cc34:	f845 6f04 	str.w	r6, [r5, #4]!
 800cc38:	e7eb      	b.n	800cc12 <__copybits+0x18>
 800cc3a:	f840 3b04 	str.w	r3, [r0], #4
 800cc3e:	e7f4      	b.n	800cc2a <__copybits+0x30>

0800cc40 <__any_on>:
 800cc40:	f100 0214 	add.w	r2, r0, #20
 800cc44:	6900      	ldr	r0, [r0, #16]
 800cc46:	114b      	asrs	r3, r1, #5
 800cc48:	4298      	cmp	r0, r3
 800cc4a:	b510      	push	{r4, lr}
 800cc4c:	db11      	blt.n	800cc72 <__any_on+0x32>
 800cc4e:	dd0a      	ble.n	800cc66 <__any_on+0x26>
 800cc50:	f011 011f 	ands.w	r1, r1, #31
 800cc54:	d007      	beq.n	800cc66 <__any_on+0x26>
 800cc56:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cc5a:	fa24 f001 	lsr.w	r0, r4, r1
 800cc5e:	fa00 f101 	lsl.w	r1, r0, r1
 800cc62:	428c      	cmp	r4, r1
 800cc64:	d10b      	bne.n	800cc7e <__any_on+0x3e>
 800cc66:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cc6a:	4293      	cmp	r3, r2
 800cc6c:	d803      	bhi.n	800cc76 <__any_on+0x36>
 800cc6e:	2000      	movs	r0, #0
 800cc70:	bd10      	pop	{r4, pc}
 800cc72:	4603      	mov	r3, r0
 800cc74:	e7f7      	b.n	800cc66 <__any_on+0x26>
 800cc76:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cc7a:	2900      	cmp	r1, #0
 800cc7c:	d0f5      	beq.n	800cc6a <__any_on+0x2a>
 800cc7e:	2001      	movs	r0, #1
 800cc80:	e7f6      	b.n	800cc70 <__any_on+0x30>

0800cc82 <_calloc_r>:
 800cc82:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cc84:	fba1 2402 	umull	r2, r4, r1, r2
 800cc88:	b94c      	cbnz	r4, 800cc9e <_calloc_r+0x1c>
 800cc8a:	4611      	mov	r1, r2
 800cc8c:	9201      	str	r2, [sp, #4]
 800cc8e:	f000 f87b 	bl	800cd88 <_malloc_r>
 800cc92:	9a01      	ldr	r2, [sp, #4]
 800cc94:	4605      	mov	r5, r0
 800cc96:	b930      	cbnz	r0, 800cca6 <_calloc_r+0x24>
 800cc98:	4628      	mov	r0, r5
 800cc9a:	b003      	add	sp, #12
 800cc9c:	bd30      	pop	{r4, r5, pc}
 800cc9e:	220c      	movs	r2, #12
 800cca0:	6002      	str	r2, [r0, #0]
 800cca2:	2500      	movs	r5, #0
 800cca4:	e7f8      	b.n	800cc98 <_calloc_r+0x16>
 800cca6:	4621      	mov	r1, r4
 800cca8:	f7fc fdc8 	bl	800983c <memset>
 800ccac:	e7f4      	b.n	800cc98 <_calloc_r+0x16>
	...

0800ccb0 <_free_r>:
 800ccb0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800ccb2:	2900      	cmp	r1, #0
 800ccb4:	d044      	beq.n	800cd40 <_free_r+0x90>
 800ccb6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ccba:	9001      	str	r0, [sp, #4]
 800ccbc:	2b00      	cmp	r3, #0
 800ccbe:	f1a1 0404 	sub.w	r4, r1, #4
 800ccc2:	bfb8      	it	lt
 800ccc4:	18e4      	addlt	r4, r4, r3
 800ccc6:	f000 fec7 	bl	800da58 <__malloc_lock>
 800ccca:	4a1e      	ldr	r2, [pc, #120]	; (800cd44 <_free_r+0x94>)
 800cccc:	9801      	ldr	r0, [sp, #4]
 800ccce:	6813      	ldr	r3, [r2, #0]
 800ccd0:	b933      	cbnz	r3, 800cce0 <_free_r+0x30>
 800ccd2:	6063      	str	r3, [r4, #4]
 800ccd4:	6014      	str	r4, [r2, #0]
 800ccd6:	b003      	add	sp, #12
 800ccd8:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800ccdc:	f000 bec2 	b.w	800da64 <__malloc_unlock>
 800cce0:	42a3      	cmp	r3, r4
 800cce2:	d908      	bls.n	800ccf6 <_free_r+0x46>
 800cce4:	6825      	ldr	r5, [r4, #0]
 800cce6:	1961      	adds	r1, r4, r5
 800cce8:	428b      	cmp	r3, r1
 800ccea:	bf01      	itttt	eq
 800ccec:	6819      	ldreq	r1, [r3, #0]
 800ccee:	685b      	ldreq	r3, [r3, #4]
 800ccf0:	1949      	addeq	r1, r1, r5
 800ccf2:	6021      	streq	r1, [r4, #0]
 800ccf4:	e7ed      	b.n	800ccd2 <_free_r+0x22>
 800ccf6:	461a      	mov	r2, r3
 800ccf8:	685b      	ldr	r3, [r3, #4]
 800ccfa:	b10b      	cbz	r3, 800cd00 <_free_r+0x50>
 800ccfc:	42a3      	cmp	r3, r4
 800ccfe:	d9fa      	bls.n	800ccf6 <_free_r+0x46>
 800cd00:	6811      	ldr	r1, [r2, #0]
 800cd02:	1855      	adds	r5, r2, r1
 800cd04:	42a5      	cmp	r5, r4
 800cd06:	d10b      	bne.n	800cd20 <_free_r+0x70>
 800cd08:	6824      	ldr	r4, [r4, #0]
 800cd0a:	4421      	add	r1, r4
 800cd0c:	1854      	adds	r4, r2, r1
 800cd0e:	42a3      	cmp	r3, r4
 800cd10:	6011      	str	r1, [r2, #0]
 800cd12:	d1e0      	bne.n	800ccd6 <_free_r+0x26>
 800cd14:	681c      	ldr	r4, [r3, #0]
 800cd16:	685b      	ldr	r3, [r3, #4]
 800cd18:	6053      	str	r3, [r2, #4]
 800cd1a:	4421      	add	r1, r4
 800cd1c:	6011      	str	r1, [r2, #0]
 800cd1e:	e7da      	b.n	800ccd6 <_free_r+0x26>
 800cd20:	d902      	bls.n	800cd28 <_free_r+0x78>
 800cd22:	230c      	movs	r3, #12
 800cd24:	6003      	str	r3, [r0, #0]
 800cd26:	e7d6      	b.n	800ccd6 <_free_r+0x26>
 800cd28:	6825      	ldr	r5, [r4, #0]
 800cd2a:	1961      	adds	r1, r4, r5
 800cd2c:	428b      	cmp	r3, r1
 800cd2e:	bf04      	itt	eq
 800cd30:	6819      	ldreq	r1, [r3, #0]
 800cd32:	685b      	ldreq	r3, [r3, #4]
 800cd34:	6063      	str	r3, [r4, #4]
 800cd36:	bf04      	itt	eq
 800cd38:	1949      	addeq	r1, r1, r5
 800cd3a:	6021      	streq	r1, [r4, #0]
 800cd3c:	6054      	str	r4, [r2, #4]
 800cd3e:	e7ca      	b.n	800ccd6 <_free_r+0x26>
 800cd40:	b003      	add	sp, #12
 800cd42:	bd30      	pop	{r4, r5, pc}
 800cd44:	20000574 	.word	0x20000574

0800cd48 <sbrk_aligned>:
 800cd48:	b570      	push	{r4, r5, r6, lr}
 800cd4a:	4e0e      	ldr	r6, [pc, #56]	; (800cd84 <sbrk_aligned+0x3c>)
 800cd4c:	460c      	mov	r4, r1
 800cd4e:	6831      	ldr	r1, [r6, #0]
 800cd50:	4605      	mov	r5, r0
 800cd52:	b911      	cbnz	r1, 800cd5a <sbrk_aligned+0x12>
 800cd54:	f000 fb4c 	bl	800d3f0 <_sbrk_r>
 800cd58:	6030      	str	r0, [r6, #0]
 800cd5a:	4621      	mov	r1, r4
 800cd5c:	4628      	mov	r0, r5
 800cd5e:	f000 fb47 	bl	800d3f0 <_sbrk_r>
 800cd62:	1c43      	adds	r3, r0, #1
 800cd64:	d00a      	beq.n	800cd7c <sbrk_aligned+0x34>
 800cd66:	1cc4      	adds	r4, r0, #3
 800cd68:	f024 0403 	bic.w	r4, r4, #3
 800cd6c:	42a0      	cmp	r0, r4
 800cd6e:	d007      	beq.n	800cd80 <sbrk_aligned+0x38>
 800cd70:	1a21      	subs	r1, r4, r0
 800cd72:	4628      	mov	r0, r5
 800cd74:	f000 fb3c 	bl	800d3f0 <_sbrk_r>
 800cd78:	3001      	adds	r0, #1
 800cd7a:	d101      	bne.n	800cd80 <sbrk_aligned+0x38>
 800cd7c:	f04f 34ff 	mov.w	r4, #4294967295
 800cd80:	4620      	mov	r0, r4
 800cd82:	bd70      	pop	{r4, r5, r6, pc}
 800cd84:	20000578 	.word	0x20000578

0800cd88 <_malloc_r>:
 800cd88:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cd8c:	1ccd      	adds	r5, r1, #3
 800cd8e:	f025 0503 	bic.w	r5, r5, #3
 800cd92:	3508      	adds	r5, #8
 800cd94:	2d0c      	cmp	r5, #12
 800cd96:	bf38      	it	cc
 800cd98:	250c      	movcc	r5, #12
 800cd9a:	2d00      	cmp	r5, #0
 800cd9c:	4607      	mov	r7, r0
 800cd9e:	db01      	blt.n	800cda4 <_malloc_r+0x1c>
 800cda0:	42a9      	cmp	r1, r5
 800cda2:	d905      	bls.n	800cdb0 <_malloc_r+0x28>
 800cda4:	230c      	movs	r3, #12
 800cda6:	603b      	str	r3, [r7, #0]
 800cda8:	2600      	movs	r6, #0
 800cdaa:	4630      	mov	r0, r6
 800cdac:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800cdb0:	4e2e      	ldr	r6, [pc, #184]	; (800ce6c <_malloc_r+0xe4>)
 800cdb2:	f000 fe51 	bl	800da58 <__malloc_lock>
 800cdb6:	6833      	ldr	r3, [r6, #0]
 800cdb8:	461c      	mov	r4, r3
 800cdba:	bb34      	cbnz	r4, 800ce0a <_malloc_r+0x82>
 800cdbc:	4629      	mov	r1, r5
 800cdbe:	4638      	mov	r0, r7
 800cdc0:	f7ff ffc2 	bl	800cd48 <sbrk_aligned>
 800cdc4:	1c43      	adds	r3, r0, #1
 800cdc6:	4604      	mov	r4, r0
 800cdc8:	d14d      	bne.n	800ce66 <_malloc_r+0xde>
 800cdca:	6834      	ldr	r4, [r6, #0]
 800cdcc:	4626      	mov	r6, r4
 800cdce:	2e00      	cmp	r6, #0
 800cdd0:	d140      	bne.n	800ce54 <_malloc_r+0xcc>
 800cdd2:	6823      	ldr	r3, [r4, #0]
 800cdd4:	4631      	mov	r1, r6
 800cdd6:	4638      	mov	r0, r7
 800cdd8:	eb04 0803 	add.w	r8, r4, r3
 800cddc:	f000 fb08 	bl	800d3f0 <_sbrk_r>
 800cde0:	4580      	cmp	r8, r0
 800cde2:	d13a      	bne.n	800ce5a <_malloc_r+0xd2>
 800cde4:	6821      	ldr	r1, [r4, #0]
 800cde6:	3503      	adds	r5, #3
 800cde8:	1a6d      	subs	r5, r5, r1
 800cdea:	f025 0503 	bic.w	r5, r5, #3
 800cdee:	3508      	adds	r5, #8
 800cdf0:	2d0c      	cmp	r5, #12
 800cdf2:	bf38      	it	cc
 800cdf4:	250c      	movcc	r5, #12
 800cdf6:	4629      	mov	r1, r5
 800cdf8:	4638      	mov	r0, r7
 800cdfa:	f7ff ffa5 	bl	800cd48 <sbrk_aligned>
 800cdfe:	3001      	adds	r0, #1
 800ce00:	d02b      	beq.n	800ce5a <_malloc_r+0xd2>
 800ce02:	6823      	ldr	r3, [r4, #0]
 800ce04:	442b      	add	r3, r5
 800ce06:	6023      	str	r3, [r4, #0]
 800ce08:	e00e      	b.n	800ce28 <_malloc_r+0xa0>
 800ce0a:	6822      	ldr	r2, [r4, #0]
 800ce0c:	1b52      	subs	r2, r2, r5
 800ce0e:	d41e      	bmi.n	800ce4e <_malloc_r+0xc6>
 800ce10:	2a0b      	cmp	r2, #11
 800ce12:	d916      	bls.n	800ce42 <_malloc_r+0xba>
 800ce14:	1961      	adds	r1, r4, r5
 800ce16:	42a3      	cmp	r3, r4
 800ce18:	6025      	str	r5, [r4, #0]
 800ce1a:	bf18      	it	ne
 800ce1c:	6059      	strne	r1, [r3, #4]
 800ce1e:	6863      	ldr	r3, [r4, #4]
 800ce20:	bf08      	it	eq
 800ce22:	6031      	streq	r1, [r6, #0]
 800ce24:	5162      	str	r2, [r4, r5]
 800ce26:	604b      	str	r3, [r1, #4]
 800ce28:	4638      	mov	r0, r7
 800ce2a:	f104 060b 	add.w	r6, r4, #11
 800ce2e:	f000 fe19 	bl	800da64 <__malloc_unlock>
 800ce32:	f026 0607 	bic.w	r6, r6, #7
 800ce36:	1d23      	adds	r3, r4, #4
 800ce38:	1af2      	subs	r2, r6, r3
 800ce3a:	d0b6      	beq.n	800cdaa <_malloc_r+0x22>
 800ce3c:	1b9b      	subs	r3, r3, r6
 800ce3e:	50a3      	str	r3, [r4, r2]
 800ce40:	e7b3      	b.n	800cdaa <_malloc_r+0x22>
 800ce42:	6862      	ldr	r2, [r4, #4]
 800ce44:	42a3      	cmp	r3, r4
 800ce46:	bf0c      	ite	eq
 800ce48:	6032      	streq	r2, [r6, #0]
 800ce4a:	605a      	strne	r2, [r3, #4]
 800ce4c:	e7ec      	b.n	800ce28 <_malloc_r+0xa0>
 800ce4e:	4623      	mov	r3, r4
 800ce50:	6864      	ldr	r4, [r4, #4]
 800ce52:	e7b2      	b.n	800cdba <_malloc_r+0x32>
 800ce54:	4634      	mov	r4, r6
 800ce56:	6876      	ldr	r6, [r6, #4]
 800ce58:	e7b9      	b.n	800cdce <_malloc_r+0x46>
 800ce5a:	230c      	movs	r3, #12
 800ce5c:	603b      	str	r3, [r7, #0]
 800ce5e:	4638      	mov	r0, r7
 800ce60:	f000 fe00 	bl	800da64 <__malloc_unlock>
 800ce64:	e7a1      	b.n	800cdaa <_malloc_r+0x22>
 800ce66:	6025      	str	r5, [r4, #0]
 800ce68:	e7de      	b.n	800ce28 <_malloc_r+0xa0>
 800ce6a:	bf00      	nop
 800ce6c:	20000574 	.word	0x20000574

0800ce70 <__ssputs_r>:
 800ce70:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800ce74:	688e      	ldr	r6, [r1, #8]
 800ce76:	429e      	cmp	r6, r3
 800ce78:	4682      	mov	sl, r0
 800ce7a:	460c      	mov	r4, r1
 800ce7c:	4690      	mov	r8, r2
 800ce7e:	461f      	mov	r7, r3
 800ce80:	d838      	bhi.n	800cef4 <__ssputs_r+0x84>
 800ce82:	898a      	ldrh	r2, [r1, #12]
 800ce84:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800ce88:	d032      	beq.n	800cef0 <__ssputs_r+0x80>
 800ce8a:	6825      	ldr	r5, [r4, #0]
 800ce8c:	6909      	ldr	r1, [r1, #16]
 800ce8e:	eba5 0901 	sub.w	r9, r5, r1
 800ce92:	6965      	ldr	r5, [r4, #20]
 800ce94:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800ce98:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800ce9c:	3301      	adds	r3, #1
 800ce9e:	444b      	add	r3, r9
 800cea0:	106d      	asrs	r5, r5, #1
 800cea2:	429d      	cmp	r5, r3
 800cea4:	bf38      	it	cc
 800cea6:	461d      	movcc	r5, r3
 800cea8:	0553      	lsls	r3, r2, #21
 800ceaa:	d531      	bpl.n	800cf10 <__ssputs_r+0xa0>
 800ceac:	4629      	mov	r1, r5
 800ceae:	f7ff ff6b 	bl	800cd88 <_malloc_r>
 800ceb2:	4606      	mov	r6, r0
 800ceb4:	b950      	cbnz	r0, 800cecc <__ssputs_r+0x5c>
 800ceb6:	230c      	movs	r3, #12
 800ceb8:	f8ca 3000 	str.w	r3, [sl]
 800cebc:	89a3      	ldrh	r3, [r4, #12]
 800cebe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800cec2:	81a3      	strh	r3, [r4, #12]
 800cec4:	f04f 30ff 	mov.w	r0, #4294967295
 800cec8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800cecc:	6921      	ldr	r1, [r4, #16]
 800cece:	464a      	mov	r2, r9
 800ced0:	f7ff fa08 	bl	800c2e4 <memcpy>
 800ced4:	89a3      	ldrh	r3, [r4, #12]
 800ced6:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ceda:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800cede:	81a3      	strh	r3, [r4, #12]
 800cee0:	6126      	str	r6, [r4, #16]
 800cee2:	6165      	str	r5, [r4, #20]
 800cee4:	444e      	add	r6, r9
 800cee6:	eba5 0509 	sub.w	r5, r5, r9
 800ceea:	6026      	str	r6, [r4, #0]
 800ceec:	60a5      	str	r5, [r4, #8]
 800ceee:	463e      	mov	r6, r7
 800cef0:	42be      	cmp	r6, r7
 800cef2:	d900      	bls.n	800cef6 <__ssputs_r+0x86>
 800cef4:	463e      	mov	r6, r7
 800cef6:	6820      	ldr	r0, [r4, #0]
 800cef8:	4632      	mov	r2, r6
 800cefa:	4641      	mov	r1, r8
 800cefc:	f000 fd92 	bl	800da24 <memmove>
 800cf00:	68a3      	ldr	r3, [r4, #8]
 800cf02:	1b9b      	subs	r3, r3, r6
 800cf04:	60a3      	str	r3, [r4, #8]
 800cf06:	6823      	ldr	r3, [r4, #0]
 800cf08:	4433      	add	r3, r6
 800cf0a:	6023      	str	r3, [r4, #0]
 800cf0c:	2000      	movs	r0, #0
 800cf0e:	e7db      	b.n	800cec8 <__ssputs_r+0x58>
 800cf10:	462a      	mov	r2, r5
 800cf12:	f000 fdad 	bl	800da70 <_realloc_r>
 800cf16:	4606      	mov	r6, r0
 800cf18:	2800      	cmp	r0, #0
 800cf1a:	d1e1      	bne.n	800cee0 <__ssputs_r+0x70>
 800cf1c:	6921      	ldr	r1, [r4, #16]
 800cf1e:	4650      	mov	r0, sl
 800cf20:	f7ff fec6 	bl	800ccb0 <_free_r>
 800cf24:	e7c7      	b.n	800ceb6 <__ssputs_r+0x46>
	...

0800cf28 <_svfiprintf_r>:
 800cf28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cf2c:	4698      	mov	r8, r3
 800cf2e:	898b      	ldrh	r3, [r1, #12]
 800cf30:	061b      	lsls	r3, r3, #24
 800cf32:	b09d      	sub	sp, #116	; 0x74
 800cf34:	4607      	mov	r7, r0
 800cf36:	460d      	mov	r5, r1
 800cf38:	4614      	mov	r4, r2
 800cf3a:	d50e      	bpl.n	800cf5a <_svfiprintf_r+0x32>
 800cf3c:	690b      	ldr	r3, [r1, #16]
 800cf3e:	b963      	cbnz	r3, 800cf5a <_svfiprintf_r+0x32>
 800cf40:	2140      	movs	r1, #64	; 0x40
 800cf42:	f7ff ff21 	bl	800cd88 <_malloc_r>
 800cf46:	6028      	str	r0, [r5, #0]
 800cf48:	6128      	str	r0, [r5, #16]
 800cf4a:	b920      	cbnz	r0, 800cf56 <_svfiprintf_r+0x2e>
 800cf4c:	230c      	movs	r3, #12
 800cf4e:	603b      	str	r3, [r7, #0]
 800cf50:	f04f 30ff 	mov.w	r0, #4294967295
 800cf54:	e0d1      	b.n	800d0fa <_svfiprintf_r+0x1d2>
 800cf56:	2340      	movs	r3, #64	; 0x40
 800cf58:	616b      	str	r3, [r5, #20]
 800cf5a:	2300      	movs	r3, #0
 800cf5c:	9309      	str	r3, [sp, #36]	; 0x24
 800cf5e:	2320      	movs	r3, #32
 800cf60:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cf64:	f8cd 800c 	str.w	r8, [sp, #12]
 800cf68:	2330      	movs	r3, #48	; 0x30
 800cf6a:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d114 <_svfiprintf_r+0x1ec>
 800cf6e:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800cf72:	f04f 0901 	mov.w	r9, #1
 800cf76:	4623      	mov	r3, r4
 800cf78:	469a      	mov	sl, r3
 800cf7a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cf7e:	b10a      	cbz	r2, 800cf84 <_svfiprintf_r+0x5c>
 800cf80:	2a25      	cmp	r2, #37	; 0x25
 800cf82:	d1f9      	bne.n	800cf78 <_svfiprintf_r+0x50>
 800cf84:	ebba 0b04 	subs.w	fp, sl, r4
 800cf88:	d00b      	beq.n	800cfa2 <_svfiprintf_r+0x7a>
 800cf8a:	465b      	mov	r3, fp
 800cf8c:	4622      	mov	r2, r4
 800cf8e:	4629      	mov	r1, r5
 800cf90:	4638      	mov	r0, r7
 800cf92:	f7ff ff6d 	bl	800ce70 <__ssputs_r>
 800cf96:	3001      	adds	r0, #1
 800cf98:	f000 80aa 	beq.w	800d0f0 <_svfiprintf_r+0x1c8>
 800cf9c:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cf9e:	445a      	add	r2, fp
 800cfa0:	9209      	str	r2, [sp, #36]	; 0x24
 800cfa2:	f89a 3000 	ldrb.w	r3, [sl]
 800cfa6:	2b00      	cmp	r3, #0
 800cfa8:	f000 80a2 	beq.w	800d0f0 <_svfiprintf_r+0x1c8>
 800cfac:	2300      	movs	r3, #0
 800cfae:	f04f 32ff 	mov.w	r2, #4294967295
 800cfb2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cfb6:	f10a 0a01 	add.w	sl, sl, #1
 800cfba:	9304      	str	r3, [sp, #16]
 800cfbc:	9307      	str	r3, [sp, #28]
 800cfbe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cfc2:	931a      	str	r3, [sp, #104]	; 0x68
 800cfc4:	4654      	mov	r4, sl
 800cfc6:	2205      	movs	r2, #5
 800cfc8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfcc:	4851      	ldr	r0, [pc, #324]	; (800d114 <_svfiprintf_r+0x1ec>)
 800cfce:	f7f3 f907 	bl	80001e0 <memchr>
 800cfd2:	9a04      	ldr	r2, [sp, #16]
 800cfd4:	b9d8      	cbnz	r0, 800d00e <_svfiprintf_r+0xe6>
 800cfd6:	06d0      	lsls	r0, r2, #27
 800cfd8:	bf44      	itt	mi
 800cfda:	2320      	movmi	r3, #32
 800cfdc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfe0:	0711      	lsls	r1, r2, #28
 800cfe2:	bf44      	itt	mi
 800cfe4:	232b      	movmi	r3, #43	; 0x2b
 800cfe6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cfea:	f89a 3000 	ldrb.w	r3, [sl]
 800cfee:	2b2a      	cmp	r3, #42	; 0x2a
 800cff0:	d015      	beq.n	800d01e <_svfiprintf_r+0xf6>
 800cff2:	9a07      	ldr	r2, [sp, #28]
 800cff4:	4654      	mov	r4, sl
 800cff6:	2000      	movs	r0, #0
 800cff8:	f04f 0c0a 	mov.w	ip, #10
 800cffc:	4621      	mov	r1, r4
 800cffe:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d002:	3b30      	subs	r3, #48	; 0x30
 800d004:	2b09      	cmp	r3, #9
 800d006:	d94e      	bls.n	800d0a6 <_svfiprintf_r+0x17e>
 800d008:	b1b0      	cbz	r0, 800d038 <_svfiprintf_r+0x110>
 800d00a:	9207      	str	r2, [sp, #28]
 800d00c:	e014      	b.n	800d038 <_svfiprintf_r+0x110>
 800d00e:	eba0 0308 	sub.w	r3, r0, r8
 800d012:	fa09 f303 	lsl.w	r3, r9, r3
 800d016:	4313      	orrs	r3, r2
 800d018:	9304      	str	r3, [sp, #16]
 800d01a:	46a2      	mov	sl, r4
 800d01c:	e7d2      	b.n	800cfc4 <_svfiprintf_r+0x9c>
 800d01e:	9b03      	ldr	r3, [sp, #12]
 800d020:	1d19      	adds	r1, r3, #4
 800d022:	681b      	ldr	r3, [r3, #0]
 800d024:	9103      	str	r1, [sp, #12]
 800d026:	2b00      	cmp	r3, #0
 800d028:	bfbb      	ittet	lt
 800d02a:	425b      	neglt	r3, r3
 800d02c:	f042 0202 	orrlt.w	r2, r2, #2
 800d030:	9307      	strge	r3, [sp, #28]
 800d032:	9307      	strlt	r3, [sp, #28]
 800d034:	bfb8      	it	lt
 800d036:	9204      	strlt	r2, [sp, #16]
 800d038:	7823      	ldrb	r3, [r4, #0]
 800d03a:	2b2e      	cmp	r3, #46	; 0x2e
 800d03c:	d10c      	bne.n	800d058 <_svfiprintf_r+0x130>
 800d03e:	7863      	ldrb	r3, [r4, #1]
 800d040:	2b2a      	cmp	r3, #42	; 0x2a
 800d042:	d135      	bne.n	800d0b0 <_svfiprintf_r+0x188>
 800d044:	9b03      	ldr	r3, [sp, #12]
 800d046:	1d1a      	adds	r2, r3, #4
 800d048:	681b      	ldr	r3, [r3, #0]
 800d04a:	9203      	str	r2, [sp, #12]
 800d04c:	2b00      	cmp	r3, #0
 800d04e:	bfb8      	it	lt
 800d050:	f04f 33ff 	movlt.w	r3, #4294967295
 800d054:	3402      	adds	r4, #2
 800d056:	9305      	str	r3, [sp, #20]
 800d058:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d124 <_svfiprintf_r+0x1fc>
 800d05c:	7821      	ldrb	r1, [r4, #0]
 800d05e:	2203      	movs	r2, #3
 800d060:	4650      	mov	r0, sl
 800d062:	f7f3 f8bd 	bl	80001e0 <memchr>
 800d066:	b140      	cbz	r0, 800d07a <_svfiprintf_r+0x152>
 800d068:	2340      	movs	r3, #64	; 0x40
 800d06a:	eba0 000a 	sub.w	r0, r0, sl
 800d06e:	fa03 f000 	lsl.w	r0, r3, r0
 800d072:	9b04      	ldr	r3, [sp, #16]
 800d074:	4303      	orrs	r3, r0
 800d076:	3401      	adds	r4, #1
 800d078:	9304      	str	r3, [sp, #16]
 800d07a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d07e:	4826      	ldr	r0, [pc, #152]	; (800d118 <_svfiprintf_r+0x1f0>)
 800d080:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d084:	2206      	movs	r2, #6
 800d086:	f7f3 f8ab 	bl	80001e0 <memchr>
 800d08a:	2800      	cmp	r0, #0
 800d08c:	d038      	beq.n	800d100 <_svfiprintf_r+0x1d8>
 800d08e:	4b23      	ldr	r3, [pc, #140]	; (800d11c <_svfiprintf_r+0x1f4>)
 800d090:	bb1b      	cbnz	r3, 800d0da <_svfiprintf_r+0x1b2>
 800d092:	9b03      	ldr	r3, [sp, #12]
 800d094:	3307      	adds	r3, #7
 800d096:	f023 0307 	bic.w	r3, r3, #7
 800d09a:	3308      	adds	r3, #8
 800d09c:	9303      	str	r3, [sp, #12]
 800d09e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d0a0:	4433      	add	r3, r6
 800d0a2:	9309      	str	r3, [sp, #36]	; 0x24
 800d0a4:	e767      	b.n	800cf76 <_svfiprintf_r+0x4e>
 800d0a6:	fb0c 3202 	mla	r2, ip, r2, r3
 800d0aa:	460c      	mov	r4, r1
 800d0ac:	2001      	movs	r0, #1
 800d0ae:	e7a5      	b.n	800cffc <_svfiprintf_r+0xd4>
 800d0b0:	2300      	movs	r3, #0
 800d0b2:	3401      	adds	r4, #1
 800d0b4:	9305      	str	r3, [sp, #20]
 800d0b6:	4619      	mov	r1, r3
 800d0b8:	f04f 0c0a 	mov.w	ip, #10
 800d0bc:	4620      	mov	r0, r4
 800d0be:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d0c2:	3a30      	subs	r2, #48	; 0x30
 800d0c4:	2a09      	cmp	r2, #9
 800d0c6:	d903      	bls.n	800d0d0 <_svfiprintf_r+0x1a8>
 800d0c8:	2b00      	cmp	r3, #0
 800d0ca:	d0c5      	beq.n	800d058 <_svfiprintf_r+0x130>
 800d0cc:	9105      	str	r1, [sp, #20]
 800d0ce:	e7c3      	b.n	800d058 <_svfiprintf_r+0x130>
 800d0d0:	fb0c 2101 	mla	r1, ip, r1, r2
 800d0d4:	4604      	mov	r4, r0
 800d0d6:	2301      	movs	r3, #1
 800d0d8:	e7f0      	b.n	800d0bc <_svfiprintf_r+0x194>
 800d0da:	ab03      	add	r3, sp, #12
 800d0dc:	9300      	str	r3, [sp, #0]
 800d0de:	462a      	mov	r2, r5
 800d0e0:	4b0f      	ldr	r3, [pc, #60]	; (800d120 <_svfiprintf_r+0x1f8>)
 800d0e2:	a904      	add	r1, sp, #16
 800d0e4:	4638      	mov	r0, r7
 800d0e6:	f7fc fc51 	bl	800998c <_printf_float>
 800d0ea:	1c42      	adds	r2, r0, #1
 800d0ec:	4606      	mov	r6, r0
 800d0ee:	d1d6      	bne.n	800d09e <_svfiprintf_r+0x176>
 800d0f0:	89ab      	ldrh	r3, [r5, #12]
 800d0f2:	065b      	lsls	r3, r3, #25
 800d0f4:	f53f af2c 	bmi.w	800cf50 <_svfiprintf_r+0x28>
 800d0f8:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d0fa:	b01d      	add	sp, #116	; 0x74
 800d0fc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d100:	ab03      	add	r3, sp, #12
 800d102:	9300      	str	r3, [sp, #0]
 800d104:	462a      	mov	r2, r5
 800d106:	4b06      	ldr	r3, [pc, #24]	; (800d120 <_svfiprintf_r+0x1f8>)
 800d108:	a904      	add	r1, sp, #16
 800d10a:	4638      	mov	r0, r7
 800d10c:	f7fc fee2 	bl	8009ed4 <_printf_i>
 800d110:	e7eb      	b.n	800d0ea <_svfiprintf_r+0x1c2>
 800d112:	bf00      	nop
 800d114:	0800e3c4 	.word	0x0800e3c4
 800d118:	0800e3ce 	.word	0x0800e3ce
 800d11c:	0800998d 	.word	0x0800998d
 800d120:	0800ce71 	.word	0x0800ce71
 800d124:	0800e3ca 	.word	0x0800e3ca

0800d128 <__sfputc_r>:
 800d128:	6893      	ldr	r3, [r2, #8]
 800d12a:	3b01      	subs	r3, #1
 800d12c:	2b00      	cmp	r3, #0
 800d12e:	b410      	push	{r4}
 800d130:	6093      	str	r3, [r2, #8]
 800d132:	da08      	bge.n	800d146 <__sfputc_r+0x1e>
 800d134:	6994      	ldr	r4, [r2, #24]
 800d136:	42a3      	cmp	r3, r4
 800d138:	db01      	blt.n	800d13e <__sfputc_r+0x16>
 800d13a:	290a      	cmp	r1, #10
 800d13c:	d103      	bne.n	800d146 <__sfputc_r+0x1e>
 800d13e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d142:	f000 b979 	b.w	800d438 <__swbuf_r>
 800d146:	6813      	ldr	r3, [r2, #0]
 800d148:	1c58      	adds	r0, r3, #1
 800d14a:	6010      	str	r0, [r2, #0]
 800d14c:	7019      	strb	r1, [r3, #0]
 800d14e:	4608      	mov	r0, r1
 800d150:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d154:	4770      	bx	lr

0800d156 <__sfputs_r>:
 800d156:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d158:	4606      	mov	r6, r0
 800d15a:	460f      	mov	r7, r1
 800d15c:	4614      	mov	r4, r2
 800d15e:	18d5      	adds	r5, r2, r3
 800d160:	42ac      	cmp	r4, r5
 800d162:	d101      	bne.n	800d168 <__sfputs_r+0x12>
 800d164:	2000      	movs	r0, #0
 800d166:	e007      	b.n	800d178 <__sfputs_r+0x22>
 800d168:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d16c:	463a      	mov	r2, r7
 800d16e:	4630      	mov	r0, r6
 800d170:	f7ff ffda 	bl	800d128 <__sfputc_r>
 800d174:	1c43      	adds	r3, r0, #1
 800d176:	d1f3      	bne.n	800d160 <__sfputs_r+0xa>
 800d178:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d17c <_vfiprintf_r>:
 800d17c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d180:	460d      	mov	r5, r1
 800d182:	b09d      	sub	sp, #116	; 0x74
 800d184:	4614      	mov	r4, r2
 800d186:	4698      	mov	r8, r3
 800d188:	4606      	mov	r6, r0
 800d18a:	b118      	cbz	r0, 800d194 <_vfiprintf_r+0x18>
 800d18c:	6983      	ldr	r3, [r0, #24]
 800d18e:	b90b      	cbnz	r3, 800d194 <_vfiprintf_r+0x18>
 800d190:	f000 fb42 	bl	800d818 <__sinit>
 800d194:	4b89      	ldr	r3, [pc, #548]	; (800d3bc <_vfiprintf_r+0x240>)
 800d196:	429d      	cmp	r5, r3
 800d198:	d11b      	bne.n	800d1d2 <_vfiprintf_r+0x56>
 800d19a:	6875      	ldr	r5, [r6, #4]
 800d19c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d19e:	07d9      	lsls	r1, r3, #31
 800d1a0:	d405      	bmi.n	800d1ae <_vfiprintf_r+0x32>
 800d1a2:	89ab      	ldrh	r3, [r5, #12]
 800d1a4:	059a      	lsls	r2, r3, #22
 800d1a6:	d402      	bmi.n	800d1ae <_vfiprintf_r+0x32>
 800d1a8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1aa:	f000 fbd3 	bl	800d954 <__retarget_lock_acquire_recursive>
 800d1ae:	89ab      	ldrh	r3, [r5, #12]
 800d1b0:	071b      	lsls	r3, r3, #28
 800d1b2:	d501      	bpl.n	800d1b8 <_vfiprintf_r+0x3c>
 800d1b4:	692b      	ldr	r3, [r5, #16]
 800d1b6:	b9eb      	cbnz	r3, 800d1f4 <_vfiprintf_r+0x78>
 800d1b8:	4629      	mov	r1, r5
 800d1ba:	4630      	mov	r0, r6
 800d1bc:	f000 f99c 	bl	800d4f8 <__swsetup_r>
 800d1c0:	b1c0      	cbz	r0, 800d1f4 <_vfiprintf_r+0x78>
 800d1c2:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d1c4:	07dc      	lsls	r4, r3, #31
 800d1c6:	d50e      	bpl.n	800d1e6 <_vfiprintf_r+0x6a>
 800d1c8:	f04f 30ff 	mov.w	r0, #4294967295
 800d1cc:	b01d      	add	sp, #116	; 0x74
 800d1ce:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d1d2:	4b7b      	ldr	r3, [pc, #492]	; (800d3c0 <_vfiprintf_r+0x244>)
 800d1d4:	429d      	cmp	r5, r3
 800d1d6:	d101      	bne.n	800d1dc <_vfiprintf_r+0x60>
 800d1d8:	68b5      	ldr	r5, [r6, #8]
 800d1da:	e7df      	b.n	800d19c <_vfiprintf_r+0x20>
 800d1dc:	4b79      	ldr	r3, [pc, #484]	; (800d3c4 <_vfiprintf_r+0x248>)
 800d1de:	429d      	cmp	r5, r3
 800d1e0:	bf08      	it	eq
 800d1e2:	68f5      	ldreq	r5, [r6, #12]
 800d1e4:	e7da      	b.n	800d19c <_vfiprintf_r+0x20>
 800d1e6:	89ab      	ldrh	r3, [r5, #12]
 800d1e8:	0598      	lsls	r0, r3, #22
 800d1ea:	d4ed      	bmi.n	800d1c8 <_vfiprintf_r+0x4c>
 800d1ec:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d1ee:	f000 fbb2 	bl	800d956 <__retarget_lock_release_recursive>
 800d1f2:	e7e9      	b.n	800d1c8 <_vfiprintf_r+0x4c>
 800d1f4:	2300      	movs	r3, #0
 800d1f6:	9309      	str	r3, [sp, #36]	; 0x24
 800d1f8:	2320      	movs	r3, #32
 800d1fa:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d1fe:	f8cd 800c 	str.w	r8, [sp, #12]
 800d202:	2330      	movs	r3, #48	; 0x30
 800d204:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d3c8 <_vfiprintf_r+0x24c>
 800d208:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d20c:	f04f 0901 	mov.w	r9, #1
 800d210:	4623      	mov	r3, r4
 800d212:	469a      	mov	sl, r3
 800d214:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d218:	b10a      	cbz	r2, 800d21e <_vfiprintf_r+0xa2>
 800d21a:	2a25      	cmp	r2, #37	; 0x25
 800d21c:	d1f9      	bne.n	800d212 <_vfiprintf_r+0x96>
 800d21e:	ebba 0b04 	subs.w	fp, sl, r4
 800d222:	d00b      	beq.n	800d23c <_vfiprintf_r+0xc0>
 800d224:	465b      	mov	r3, fp
 800d226:	4622      	mov	r2, r4
 800d228:	4629      	mov	r1, r5
 800d22a:	4630      	mov	r0, r6
 800d22c:	f7ff ff93 	bl	800d156 <__sfputs_r>
 800d230:	3001      	adds	r0, #1
 800d232:	f000 80aa 	beq.w	800d38a <_vfiprintf_r+0x20e>
 800d236:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d238:	445a      	add	r2, fp
 800d23a:	9209      	str	r2, [sp, #36]	; 0x24
 800d23c:	f89a 3000 	ldrb.w	r3, [sl]
 800d240:	2b00      	cmp	r3, #0
 800d242:	f000 80a2 	beq.w	800d38a <_vfiprintf_r+0x20e>
 800d246:	2300      	movs	r3, #0
 800d248:	f04f 32ff 	mov.w	r2, #4294967295
 800d24c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d250:	f10a 0a01 	add.w	sl, sl, #1
 800d254:	9304      	str	r3, [sp, #16]
 800d256:	9307      	str	r3, [sp, #28]
 800d258:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d25c:	931a      	str	r3, [sp, #104]	; 0x68
 800d25e:	4654      	mov	r4, sl
 800d260:	2205      	movs	r2, #5
 800d262:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d266:	4858      	ldr	r0, [pc, #352]	; (800d3c8 <_vfiprintf_r+0x24c>)
 800d268:	f7f2 ffba 	bl	80001e0 <memchr>
 800d26c:	9a04      	ldr	r2, [sp, #16]
 800d26e:	b9d8      	cbnz	r0, 800d2a8 <_vfiprintf_r+0x12c>
 800d270:	06d1      	lsls	r1, r2, #27
 800d272:	bf44      	itt	mi
 800d274:	2320      	movmi	r3, #32
 800d276:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d27a:	0713      	lsls	r3, r2, #28
 800d27c:	bf44      	itt	mi
 800d27e:	232b      	movmi	r3, #43	; 0x2b
 800d280:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d284:	f89a 3000 	ldrb.w	r3, [sl]
 800d288:	2b2a      	cmp	r3, #42	; 0x2a
 800d28a:	d015      	beq.n	800d2b8 <_vfiprintf_r+0x13c>
 800d28c:	9a07      	ldr	r2, [sp, #28]
 800d28e:	4654      	mov	r4, sl
 800d290:	2000      	movs	r0, #0
 800d292:	f04f 0c0a 	mov.w	ip, #10
 800d296:	4621      	mov	r1, r4
 800d298:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d29c:	3b30      	subs	r3, #48	; 0x30
 800d29e:	2b09      	cmp	r3, #9
 800d2a0:	d94e      	bls.n	800d340 <_vfiprintf_r+0x1c4>
 800d2a2:	b1b0      	cbz	r0, 800d2d2 <_vfiprintf_r+0x156>
 800d2a4:	9207      	str	r2, [sp, #28]
 800d2a6:	e014      	b.n	800d2d2 <_vfiprintf_r+0x156>
 800d2a8:	eba0 0308 	sub.w	r3, r0, r8
 800d2ac:	fa09 f303 	lsl.w	r3, r9, r3
 800d2b0:	4313      	orrs	r3, r2
 800d2b2:	9304      	str	r3, [sp, #16]
 800d2b4:	46a2      	mov	sl, r4
 800d2b6:	e7d2      	b.n	800d25e <_vfiprintf_r+0xe2>
 800d2b8:	9b03      	ldr	r3, [sp, #12]
 800d2ba:	1d19      	adds	r1, r3, #4
 800d2bc:	681b      	ldr	r3, [r3, #0]
 800d2be:	9103      	str	r1, [sp, #12]
 800d2c0:	2b00      	cmp	r3, #0
 800d2c2:	bfbb      	ittet	lt
 800d2c4:	425b      	neglt	r3, r3
 800d2c6:	f042 0202 	orrlt.w	r2, r2, #2
 800d2ca:	9307      	strge	r3, [sp, #28]
 800d2cc:	9307      	strlt	r3, [sp, #28]
 800d2ce:	bfb8      	it	lt
 800d2d0:	9204      	strlt	r2, [sp, #16]
 800d2d2:	7823      	ldrb	r3, [r4, #0]
 800d2d4:	2b2e      	cmp	r3, #46	; 0x2e
 800d2d6:	d10c      	bne.n	800d2f2 <_vfiprintf_r+0x176>
 800d2d8:	7863      	ldrb	r3, [r4, #1]
 800d2da:	2b2a      	cmp	r3, #42	; 0x2a
 800d2dc:	d135      	bne.n	800d34a <_vfiprintf_r+0x1ce>
 800d2de:	9b03      	ldr	r3, [sp, #12]
 800d2e0:	1d1a      	adds	r2, r3, #4
 800d2e2:	681b      	ldr	r3, [r3, #0]
 800d2e4:	9203      	str	r2, [sp, #12]
 800d2e6:	2b00      	cmp	r3, #0
 800d2e8:	bfb8      	it	lt
 800d2ea:	f04f 33ff 	movlt.w	r3, #4294967295
 800d2ee:	3402      	adds	r4, #2
 800d2f0:	9305      	str	r3, [sp, #20]
 800d2f2:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d3d8 <_vfiprintf_r+0x25c>
 800d2f6:	7821      	ldrb	r1, [r4, #0]
 800d2f8:	2203      	movs	r2, #3
 800d2fa:	4650      	mov	r0, sl
 800d2fc:	f7f2 ff70 	bl	80001e0 <memchr>
 800d300:	b140      	cbz	r0, 800d314 <_vfiprintf_r+0x198>
 800d302:	2340      	movs	r3, #64	; 0x40
 800d304:	eba0 000a 	sub.w	r0, r0, sl
 800d308:	fa03 f000 	lsl.w	r0, r3, r0
 800d30c:	9b04      	ldr	r3, [sp, #16]
 800d30e:	4303      	orrs	r3, r0
 800d310:	3401      	adds	r4, #1
 800d312:	9304      	str	r3, [sp, #16]
 800d314:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d318:	482c      	ldr	r0, [pc, #176]	; (800d3cc <_vfiprintf_r+0x250>)
 800d31a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d31e:	2206      	movs	r2, #6
 800d320:	f7f2 ff5e 	bl	80001e0 <memchr>
 800d324:	2800      	cmp	r0, #0
 800d326:	d03f      	beq.n	800d3a8 <_vfiprintf_r+0x22c>
 800d328:	4b29      	ldr	r3, [pc, #164]	; (800d3d0 <_vfiprintf_r+0x254>)
 800d32a:	bb1b      	cbnz	r3, 800d374 <_vfiprintf_r+0x1f8>
 800d32c:	9b03      	ldr	r3, [sp, #12]
 800d32e:	3307      	adds	r3, #7
 800d330:	f023 0307 	bic.w	r3, r3, #7
 800d334:	3308      	adds	r3, #8
 800d336:	9303      	str	r3, [sp, #12]
 800d338:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d33a:	443b      	add	r3, r7
 800d33c:	9309      	str	r3, [sp, #36]	; 0x24
 800d33e:	e767      	b.n	800d210 <_vfiprintf_r+0x94>
 800d340:	fb0c 3202 	mla	r2, ip, r2, r3
 800d344:	460c      	mov	r4, r1
 800d346:	2001      	movs	r0, #1
 800d348:	e7a5      	b.n	800d296 <_vfiprintf_r+0x11a>
 800d34a:	2300      	movs	r3, #0
 800d34c:	3401      	adds	r4, #1
 800d34e:	9305      	str	r3, [sp, #20]
 800d350:	4619      	mov	r1, r3
 800d352:	f04f 0c0a 	mov.w	ip, #10
 800d356:	4620      	mov	r0, r4
 800d358:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d35c:	3a30      	subs	r2, #48	; 0x30
 800d35e:	2a09      	cmp	r2, #9
 800d360:	d903      	bls.n	800d36a <_vfiprintf_r+0x1ee>
 800d362:	2b00      	cmp	r3, #0
 800d364:	d0c5      	beq.n	800d2f2 <_vfiprintf_r+0x176>
 800d366:	9105      	str	r1, [sp, #20]
 800d368:	e7c3      	b.n	800d2f2 <_vfiprintf_r+0x176>
 800d36a:	fb0c 2101 	mla	r1, ip, r1, r2
 800d36e:	4604      	mov	r4, r0
 800d370:	2301      	movs	r3, #1
 800d372:	e7f0      	b.n	800d356 <_vfiprintf_r+0x1da>
 800d374:	ab03      	add	r3, sp, #12
 800d376:	9300      	str	r3, [sp, #0]
 800d378:	462a      	mov	r2, r5
 800d37a:	4b16      	ldr	r3, [pc, #88]	; (800d3d4 <_vfiprintf_r+0x258>)
 800d37c:	a904      	add	r1, sp, #16
 800d37e:	4630      	mov	r0, r6
 800d380:	f7fc fb04 	bl	800998c <_printf_float>
 800d384:	4607      	mov	r7, r0
 800d386:	1c78      	adds	r0, r7, #1
 800d388:	d1d6      	bne.n	800d338 <_vfiprintf_r+0x1bc>
 800d38a:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d38c:	07d9      	lsls	r1, r3, #31
 800d38e:	d405      	bmi.n	800d39c <_vfiprintf_r+0x220>
 800d390:	89ab      	ldrh	r3, [r5, #12]
 800d392:	059a      	lsls	r2, r3, #22
 800d394:	d402      	bmi.n	800d39c <_vfiprintf_r+0x220>
 800d396:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d398:	f000 fadd 	bl	800d956 <__retarget_lock_release_recursive>
 800d39c:	89ab      	ldrh	r3, [r5, #12]
 800d39e:	065b      	lsls	r3, r3, #25
 800d3a0:	f53f af12 	bmi.w	800d1c8 <_vfiprintf_r+0x4c>
 800d3a4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d3a6:	e711      	b.n	800d1cc <_vfiprintf_r+0x50>
 800d3a8:	ab03      	add	r3, sp, #12
 800d3aa:	9300      	str	r3, [sp, #0]
 800d3ac:	462a      	mov	r2, r5
 800d3ae:	4b09      	ldr	r3, [pc, #36]	; (800d3d4 <_vfiprintf_r+0x258>)
 800d3b0:	a904      	add	r1, sp, #16
 800d3b2:	4630      	mov	r0, r6
 800d3b4:	f7fc fd8e 	bl	8009ed4 <_printf_i>
 800d3b8:	e7e4      	b.n	800d384 <_vfiprintf_r+0x208>
 800d3ba:	bf00      	nop
 800d3bc:	0800e4f8 	.word	0x0800e4f8
 800d3c0:	0800e518 	.word	0x0800e518
 800d3c4:	0800e4d8 	.word	0x0800e4d8
 800d3c8:	0800e3c4 	.word	0x0800e3c4
 800d3cc:	0800e3ce 	.word	0x0800e3ce
 800d3d0:	0800998d 	.word	0x0800998d
 800d3d4:	0800d157 	.word	0x0800d157
 800d3d8:	0800e3ca 	.word	0x0800e3ca
 800d3dc:	00000000 	.word	0x00000000

0800d3e0 <nan>:
 800d3e0:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d3e8 <nan+0x8>
 800d3e4:	4770      	bx	lr
 800d3e6:	bf00      	nop
 800d3e8:	00000000 	.word	0x00000000
 800d3ec:	7ff80000 	.word	0x7ff80000

0800d3f0 <_sbrk_r>:
 800d3f0:	b538      	push	{r3, r4, r5, lr}
 800d3f2:	4d06      	ldr	r5, [pc, #24]	; (800d40c <_sbrk_r+0x1c>)
 800d3f4:	2300      	movs	r3, #0
 800d3f6:	4604      	mov	r4, r0
 800d3f8:	4608      	mov	r0, r1
 800d3fa:	602b      	str	r3, [r5, #0]
 800d3fc:	f7f8 fec2 	bl	8006184 <_sbrk>
 800d400:	1c43      	adds	r3, r0, #1
 800d402:	d102      	bne.n	800d40a <_sbrk_r+0x1a>
 800d404:	682b      	ldr	r3, [r5, #0]
 800d406:	b103      	cbz	r3, 800d40a <_sbrk_r+0x1a>
 800d408:	6023      	str	r3, [r4, #0]
 800d40a:	bd38      	pop	{r3, r4, r5, pc}
 800d40c:	20000580 	.word	0x20000580

0800d410 <strncmp>:
 800d410:	b510      	push	{r4, lr}
 800d412:	b17a      	cbz	r2, 800d434 <strncmp+0x24>
 800d414:	4603      	mov	r3, r0
 800d416:	3901      	subs	r1, #1
 800d418:	1884      	adds	r4, r0, r2
 800d41a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d41e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d422:	4290      	cmp	r0, r2
 800d424:	d101      	bne.n	800d42a <strncmp+0x1a>
 800d426:	42a3      	cmp	r3, r4
 800d428:	d101      	bne.n	800d42e <strncmp+0x1e>
 800d42a:	1a80      	subs	r0, r0, r2
 800d42c:	bd10      	pop	{r4, pc}
 800d42e:	2800      	cmp	r0, #0
 800d430:	d1f3      	bne.n	800d41a <strncmp+0xa>
 800d432:	e7fa      	b.n	800d42a <strncmp+0x1a>
 800d434:	4610      	mov	r0, r2
 800d436:	e7f9      	b.n	800d42c <strncmp+0x1c>

0800d438 <__swbuf_r>:
 800d438:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d43a:	460e      	mov	r6, r1
 800d43c:	4614      	mov	r4, r2
 800d43e:	4605      	mov	r5, r0
 800d440:	b118      	cbz	r0, 800d44a <__swbuf_r+0x12>
 800d442:	6983      	ldr	r3, [r0, #24]
 800d444:	b90b      	cbnz	r3, 800d44a <__swbuf_r+0x12>
 800d446:	f000 f9e7 	bl	800d818 <__sinit>
 800d44a:	4b21      	ldr	r3, [pc, #132]	; (800d4d0 <__swbuf_r+0x98>)
 800d44c:	429c      	cmp	r4, r3
 800d44e:	d12b      	bne.n	800d4a8 <__swbuf_r+0x70>
 800d450:	686c      	ldr	r4, [r5, #4]
 800d452:	69a3      	ldr	r3, [r4, #24]
 800d454:	60a3      	str	r3, [r4, #8]
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	071a      	lsls	r2, r3, #28
 800d45a:	d52f      	bpl.n	800d4bc <__swbuf_r+0x84>
 800d45c:	6923      	ldr	r3, [r4, #16]
 800d45e:	b36b      	cbz	r3, 800d4bc <__swbuf_r+0x84>
 800d460:	6923      	ldr	r3, [r4, #16]
 800d462:	6820      	ldr	r0, [r4, #0]
 800d464:	1ac0      	subs	r0, r0, r3
 800d466:	6963      	ldr	r3, [r4, #20]
 800d468:	b2f6      	uxtb	r6, r6
 800d46a:	4283      	cmp	r3, r0
 800d46c:	4637      	mov	r7, r6
 800d46e:	dc04      	bgt.n	800d47a <__swbuf_r+0x42>
 800d470:	4621      	mov	r1, r4
 800d472:	4628      	mov	r0, r5
 800d474:	f000 f93c 	bl	800d6f0 <_fflush_r>
 800d478:	bb30      	cbnz	r0, 800d4c8 <__swbuf_r+0x90>
 800d47a:	68a3      	ldr	r3, [r4, #8]
 800d47c:	3b01      	subs	r3, #1
 800d47e:	60a3      	str	r3, [r4, #8]
 800d480:	6823      	ldr	r3, [r4, #0]
 800d482:	1c5a      	adds	r2, r3, #1
 800d484:	6022      	str	r2, [r4, #0]
 800d486:	701e      	strb	r6, [r3, #0]
 800d488:	6963      	ldr	r3, [r4, #20]
 800d48a:	3001      	adds	r0, #1
 800d48c:	4283      	cmp	r3, r0
 800d48e:	d004      	beq.n	800d49a <__swbuf_r+0x62>
 800d490:	89a3      	ldrh	r3, [r4, #12]
 800d492:	07db      	lsls	r3, r3, #31
 800d494:	d506      	bpl.n	800d4a4 <__swbuf_r+0x6c>
 800d496:	2e0a      	cmp	r6, #10
 800d498:	d104      	bne.n	800d4a4 <__swbuf_r+0x6c>
 800d49a:	4621      	mov	r1, r4
 800d49c:	4628      	mov	r0, r5
 800d49e:	f000 f927 	bl	800d6f0 <_fflush_r>
 800d4a2:	b988      	cbnz	r0, 800d4c8 <__swbuf_r+0x90>
 800d4a4:	4638      	mov	r0, r7
 800d4a6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d4a8:	4b0a      	ldr	r3, [pc, #40]	; (800d4d4 <__swbuf_r+0x9c>)
 800d4aa:	429c      	cmp	r4, r3
 800d4ac:	d101      	bne.n	800d4b2 <__swbuf_r+0x7a>
 800d4ae:	68ac      	ldr	r4, [r5, #8]
 800d4b0:	e7cf      	b.n	800d452 <__swbuf_r+0x1a>
 800d4b2:	4b09      	ldr	r3, [pc, #36]	; (800d4d8 <__swbuf_r+0xa0>)
 800d4b4:	429c      	cmp	r4, r3
 800d4b6:	bf08      	it	eq
 800d4b8:	68ec      	ldreq	r4, [r5, #12]
 800d4ba:	e7ca      	b.n	800d452 <__swbuf_r+0x1a>
 800d4bc:	4621      	mov	r1, r4
 800d4be:	4628      	mov	r0, r5
 800d4c0:	f000 f81a 	bl	800d4f8 <__swsetup_r>
 800d4c4:	2800      	cmp	r0, #0
 800d4c6:	d0cb      	beq.n	800d460 <__swbuf_r+0x28>
 800d4c8:	f04f 37ff 	mov.w	r7, #4294967295
 800d4cc:	e7ea      	b.n	800d4a4 <__swbuf_r+0x6c>
 800d4ce:	bf00      	nop
 800d4d0:	0800e4f8 	.word	0x0800e4f8
 800d4d4:	0800e518 	.word	0x0800e518
 800d4d8:	0800e4d8 	.word	0x0800e4d8

0800d4dc <__ascii_wctomb>:
 800d4dc:	b149      	cbz	r1, 800d4f2 <__ascii_wctomb+0x16>
 800d4de:	2aff      	cmp	r2, #255	; 0xff
 800d4e0:	bf85      	ittet	hi
 800d4e2:	238a      	movhi	r3, #138	; 0x8a
 800d4e4:	6003      	strhi	r3, [r0, #0]
 800d4e6:	700a      	strbls	r2, [r1, #0]
 800d4e8:	f04f 30ff 	movhi.w	r0, #4294967295
 800d4ec:	bf98      	it	ls
 800d4ee:	2001      	movls	r0, #1
 800d4f0:	4770      	bx	lr
 800d4f2:	4608      	mov	r0, r1
 800d4f4:	4770      	bx	lr
	...

0800d4f8 <__swsetup_r>:
 800d4f8:	4b32      	ldr	r3, [pc, #200]	; (800d5c4 <__swsetup_r+0xcc>)
 800d4fa:	b570      	push	{r4, r5, r6, lr}
 800d4fc:	681d      	ldr	r5, [r3, #0]
 800d4fe:	4606      	mov	r6, r0
 800d500:	460c      	mov	r4, r1
 800d502:	b125      	cbz	r5, 800d50e <__swsetup_r+0x16>
 800d504:	69ab      	ldr	r3, [r5, #24]
 800d506:	b913      	cbnz	r3, 800d50e <__swsetup_r+0x16>
 800d508:	4628      	mov	r0, r5
 800d50a:	f000 f985 	bl	800d818 <__sinit>
 800d50e:	4b2e      	ldr	r3, [pc, #184]	; (800d5c8 <__swsetup_r+0xd0>)
 800d510:	429c      	cmp	r4, r3
 800d512:	d10f      	bne.n	800d534 <__swsetup_r+0x3c>
 800d514:	686c      	ldr	r4, [r5, #4]
 800d516:	89a3      	ldrh	r3, [r4, #12]
 800d518:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d51c:	0719      	lsls	r1, r3, #28
 800d51e:	d42c      	bmi.n	800d57a <__swsetup_r+0x82>
 800d520:	06dd      	lsls	r5, r3, #27
 800d522:	d411      	bmi.n	800d548 <__swsetup_r+0x50>
 800d524:	2309      	movs	r3, #9
 800d526:	6033      	str	r3, [r6, #0]
 800d528:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d52c:	81a3      	strh	r3, [r4, #12]
 800d52e:	f04f 30ff 	mov.w	r0, #4294967295
 800d532:	e03e      	b.n	800d5b2 <__swsetup_r+0xba>
 800d534:	4b25      	ldr	r3, [pc, #148]	; (800d5cc <__swsetup_r+0xd4>)
 800d536:	429c      	cmp	r4, r3
 800d538:	d101      	bne.n	800d53e <__swsetup_r+0x46>
 800d53a:	68ac      	ldr	r4, [r5, #8]
 800d53c:	e7eb      	b.n	800d516 <__swsetup_r+0x1e>
 800d53e:	4b24      	ldr	r3, [pc, #144]	; (800d5d0 <__swsetup_r+0xd8>)
 800d540:	429c      	cmp	r4, r3
 800d542:	bf08      	it	eq
 800d544:	68ec      	ldreq	r4, [r5, #12]
 800d546:	e7e6      	b.n	800d516 <__swsetup_r+0x1e>
 800d548:	0758      	lsls	r0, r3, #29
 800d54a:	d512      	bpl.n	800d572 <__swsetup_r+0x7a>
 800d54c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d54e:	b141      	cbz	r1, 800d562 <__swsetup_r+0x6a>
 800d550:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d554:	4299      	cmp	r1, r3
 800d556:	d002      	beq.n	800d55e <__swsetup_r+0x66>
 800d558:	4630      	mov	r0, r6
 800d55a:	f7ff fba9 	bl	800ccb0 <_free_r>
 800d55e:	2300      	movs	r3, #0
 800d560:	6363      	str	r3, [r4, #52]	; 0x34
 800d562:	89a3      	ldrh	r3, [r4, #12]
 800d564:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d568:	81a3      	strh	r3, [r4, #12]
 800d56a:	2300      	movs	r3, #0
 800d56c:	6063      	str	r3, [r4, #4]
 800d56e:	6923      	ldr	r3, [r4, #16]
 800d570:	6023      	str	r3, [r4, #0]
 800d572:	89a3      	ldrh	r3, [r4, #12]
 800d574:	f043 0308 	orr.w	r3, r3, #8
 800d578:	81a3      	strh	r3, [r4, #12]
 800d57a:	6923      	ldr	r3, [r4, #16]
 800d57c:	b94b      	cbnz	r3, 800d592 <__swsetup_r+0x9a>
 800d57e:	89a3      	ldrh	r3, [r4, #12]
 800d580:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d584:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d588:	d003      	beq.n	800d592 <__swsetup_r+0x9a>
 800d58a:	4621      	mov	r1, r4
 800d58c:	4630      	mov	r0, r6
 800d58e:	f000 fa09 	bl	800d9a4 <__smakebuf_r>
 800d592:	89a0      	ldrh	r0, [r4, #12]
 800d594:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d598:	f010 0301 	ands.w	r3, r0, #1
 800d59c:	d00a      	beq.n	800d5b4 <__swsetup_r+0xbc>
 800d59e:	2300      	movs	r3, #0
 800d5a0:	60a3      	str	r3, [r4, #8]
 800d5a2:	6963      	ldr	r3, [r4, #20]
 800d5a4:	425b      	negs	r3, r3
 800d5a6:	61a3      	str	r3, [r4, #24]
 800d5a8:	6923      	ldr	r3, [r4, #16]
 800d5aa:	b943      	cbnz	r3, 800d5be <__swsetup_r+0xc6>
 800d5ac:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d5b0:	d1ba      	bne.n	800d528 <__swsetup_r+0x30>
 800d5b2:	bd70      	pop	{r4, r5, r6, pc}
 800d5b4:	0781      	lsls	r1, r0, #30
 800d5b6:	bf58      	it	pl
 800d5b8:	6963      	ldrpl	r3, [r4, #20]
 800d5ba:	60a3      	str	r3, [r4, #8]
 800d5bc:	e7f4      	b.n	800d5a8 <__swsetup_r+0xb0>
 800d5be:	2000      	movs	r0, #0
 800d5c0:	e7f7      	b.n	800d5b2 <__swsetup_r+0xba>
 800d5c2:	bf00      	nop
 800d5c4:	2000001c 	.word	0x2000001c
 800d5c8:	0800e4f8 	.word	0x0800e4f8
 800d5cc:	0800e518 	.word	0x0800e518
 800d5d0:	0800e4d8 	.word	0x0800e4d8

0800d5d4 <abort>:
 800d5d4:	b508      	push	{r3, lr}
 800d5d6:	2006      	movs	r0, #6
 800d5d8:	f000 faa2 	bl	800db20 <raise>
 800d5dc:	2001      	movs	r0, #1
 800d5de:	f7f8 fd59 	bl	8006094 <_exit>
	...

0800d5e4 <__sflush_r>:
 800d5e4:	898a      	ldrh	r2, [r1, #12]
 800d5e6:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d5ea:	4605      	mov	r5, r0
 800d5ec:	0710      	lsls	r0, r2, #28
 800d5ee:	460c      	mov	r4, r1
 800d5f0:	d458      	bmi.n	800d6a4 <__sflush_r+0xc0>
 800d5f2:	684b      	ldr	r3, [r1, #4]
 800d5f4:	2b00      	cmp	r3, #0
 800d5f6:	dc05      	bgt.n	800d604 <__sflush_r+0x20>
 800d5f8:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d5fa:	2b00      	cmp	r3, #0
 800d5fc:	dc02      	bgt.n	800d604 <__sflush_r+0x20>
 800d5fe:	2000      	movs	r0, #0
 800d600:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d604:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d606:	2e00      	cmp	r6, #0
 800d608:	d0f9      	beq.n	800d5fe <__sflush_r+0x1a>
 800d60a:	2300      	movs	r3, #0
 800d60c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d610:	682f      	ldr	r7, [r5, #0]
 800d612:	602b      	str	r3, [r5, #0]
 800d614:	d032      	beq.n	800d67c <__sflush_r+0x98>
 800d616:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d618:	89a3      	ldrh	r3, [r4, #12]
 800d61a:	075a      	lsls	r2, r3, #29
 800d61c:	d505      	bpl.n	800d62a <__sflush_r+0x46>
 800d61e:	6863      	ldr	r3, [r4, #4]
 800d620:	1ac0      	subs	r0, r0, r3
 800d622:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d624:	b10b      	cbz	r3, 800d62a <__sflush_r+0x46>
 800d626:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d628:	1ac0      	subs	r0, r0, r3
 800d62a:	2300      	movs	r3, #0
 800d62c:	4602      	mov	r2, r0
 800d62e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d630:	6a21      	ldr	r1, [r4, #32]
 800d632:	4628      	mov	r0, r5
 800d634:	47b0      	blx	r6
 800d636:	1c43      	adds	r3, r0, #1
 800d638:	89a3      	ldrh	r3, [r4, #12]
 800d63a:	d106      	bne.n	800d64a <__sflush_r+0x66>
 800d63c:	6829      	ldr	r1, [r5, #0]
 800d63e:	291d      	cmp	r1, #29
 800d640:	d82c      	bhi.n	800d69c <__sflush_r+0xb8>
 800d642:	4a2a      	ldr	r2, [pc, #168]	; (800d6ec <__sflush_r+0x108>)
 800d644:	40ca      	lsrs	r2, r1
 800d646:	07d6      	lsls	r6, r2, #31
 800d648:	d528      	bpl.n	800d69c <__sflush_r+0xb8>
 800d64a:	2200      	movs	r2, #0
 800d64c:	6062      	str	r2, [r4, #4]
 800d64e:	04d9      	lsls	r1, r3, #19
 800d650:	6922      	ldr	r2, [r4, #16]
 800d652:	6022      	str	r2, [r4, #0]
 800d654:	d504      	bpl.n	800d660 <__sflush_r+0x7c>
 800d656:	1c42      	adds	r2, r0, #1
 800d658:	d101      	bne.n	800d65e <__sflush_r+0x7a>
 800d65a:	682b      	ldr	r3, [r5, #0]
 800d65c:	b903      	cbnz	r3, 800d660 <__sflush_r+0x7c>
 800d65e:	6560      	str	r0, [r4, #84]	; 0x54
 800d660:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d662:	602f      	str	r7, [r5, #0]
 800d664:	2900      	cmp	r1, #0
 800d666:	d0ca      	beq.n	800d5fe <__sflush_r+0x1a>
 800d668:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d66c:	4299      	cmp	r1, r3
 800d66e:	d002      	beq.n	800d676 <__sflush_r+0x92>
 800d670:	4628      	mov	r0, r5
 800d672:	f7ff fb1d 	bl	800ccb0 <_free_r>
 800d676:	2000      	movs	r0, #0
 800d678:	6360      	str	r0, [r4, #52]	; 0x34
 800d67a:	e7c1      	b.n	800d600 <__sflush_r+0x1c>
 800d67c:	6a21      	ldr	r1, [r4, #32]
 800d67e:	2301      	movs	r3, #1
 800d680:	4628      	mov	r0, r5
 800d682:	47b0      	blx	r6
 800d684:	1c41      	adds	r1, r0, #1
 800d686:	d1c7      	bne.n	800d618 <__sflush_r+0x34>
 800d688:	682b      	ldr	r3, [r5, #0]
 800d68a:	2b00      	cmp	r3, #0
 800d68c:	d0c4      	beq.n	800d618 <__sflush_r+0x34>
 800d68e:	2b1d      	cmp	r3, #29
 800d690:	d001      	beq.n	800d696 <__sflush_r+0xb2>
 800d692:	2b16      	cmp	r3, #22
 800d694:	d101      	bne.n	800d69a <__sflush_r+0xb6>
 800d696:	602f      	str	r7, [r5, #0]
 800d698:	e7b1      	b.n	800d5fe <__sflush_r+0x1a>
 800d69a:	89a3      	ldrh	r3, [r4, #12]
 800d69c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6a0:	81a3      	strh	r3, [r4, #12]
 800d6a2:	e7ad      	b.n	800d600 <__sflush_r+0x1c>
 800d6a4:	690f      	ldr	r7, [r1, #16]
 800d6a6:	2f00      	cmp	r7, #0
 800d6a8:	d0a9      	beq.n	800d5fe <__sflush_r+0x1a>
 800d6aa:	0793      	lsls	r3, r2, #30
 800d6ac:	680e      	ldr	r6, [r1, #0]
 800d6ae:	bf08      	it	eq
 800d6b0:	694b      	ldreq	r3, [r1, #20]
 800d6b2:	600f      	str	r7, [r1, #0]
 800d6b4:	bf18      	it	ne
 800d6b6:	2300      	movne	r3, #0
 800d6b8:	eba6 0807 	sub.w	r8, r6, r7
 800d6bc:	608b      	str	r3, [r1, #8]
 800d6be:	f1b8 0f00 	cmp.w	r8, #0
 800d6c2:	dd9c      	ble.n	800d5fe <__sflush_r+0x1a>
 800d6c4:	6a21      	ldr	r1, [r4, #32]
 800d6c6:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d6c8:	4643      	mov	r3, r8
 800d6ca:	463a      	mov	r2, r7
 800d6cc:	4628      	mov	r0, r5
 800d6ce:	47b0      	blx	r6
 800d6d0:	2800      	cmp	r0, #0
 800d6d2:	dc06      	bgt.n	800d6e2 <__sflush_r+0xfe>
 800d6d4:	89a3      	ldrh	r3, [r4, #12]
 800d6d6:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d6da:	81a3      	strh	r3, [r4, #12]
 800d6dc:	f04f 30ff 	mov.w	r0, #4294967295
 800d6e0:	e78e      	b.n	800d600 <__sflush_r+0x1c>
 800d6e2:	4407      	add	r7, r0
 800d6e4:	eba8 0800 	sub.w	r8, r8, r0
 800d6e8:	e7e9      	b.n	800d6be <__sflush_r+0xda>
 800d6ea:	bf00      	nop
 800d6ec:	20400001 	.word	0x20400001

0800d6f0 <_fflush_r>:
 800d6f0:	b538      	push	{r3, r4, r5, lr}
 800d6f2:	690b      	ldr	r3, [r1, #16]
 800d6f4:	4605      	mov	r5, r0
 800d6f6:	460c      	mov	r4, r1
 800d6f8:	b913      	cbnz	r3, 800d700 <_fflush_r+0x10>
 800d6fa:	2500      	movs	r5, #0
 800d6fc:	4628      	mov	r0, r5
 800d6fe:	bd38      	pop	{r3, r4, r5, pc}
 800d700:	b118      	cbz	r0, 800d70a <_fflush_r+0x1a>
 800d702:	6983      	ldr	r3, [r0, #24]
 800d704:	b90b      	cbnz	r3, 800d70a <_fflush_r+0x1a>
 800d706:	f000 f887 	bl	800d818 <__sinit>
 800d70a:	4b14      	ldr	r3, [pc, #80]	; (800d75c <_fflush_r+0x6c>)
 800d70c:	429c      	cmp	r4, r3
 800d70e:	d11b      	bne.n	800d748 <_fflush_r+0x58>
 800d710:	686c      	ldr	r4, [r5, #4]
 800d712:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d716:	2b00      	cmp	r3, #0
 800d718:	d0ef      	beq.n	800d6fa <_fflush_r+0xa>
 800d71a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d71c:	07d0      	lsls	r0, r2, #31
 800d71e:	d404      	bmi.n	800d72a <_fflush_r+0x3a>
 800d720:	0599      	lsls	r1, r3, #22
 800d722:	d402      	bmi.n	800d72a <_fflush_r+0x3a>
 800d724:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d726:	f000 f915 	bl	800d954 <__retarget_lock_acquire_recursive>
 800d72a:	4628      	mov	r0, r5
 800d72c:	4621      	mov	r1, r4
 800d72e:	f7ff ff59 	bl	800d5e4 <__sflush_r>
 800d732:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d734:	07da      	lsls	r2, r3, #31
 800d736:	4605      	mov	r5, r0
 800d738:	d4e0      	bmi.n	800d6fc <_fflush_r+0xc>
 800d73a:	89a3      	ldrh	r3, [r4, #12]
 800d73c:	059b      	lsls	r3, r3, #22
 800d73e:	d4dd      	bmi.n	800d6fc <_fflush_r+0xc>
 800d740:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d742:	f000 f908 	bl	800d956 <__retarget_lock_release_recursive>
 800d746:	e7d9      	b.n	800d6fc <_fflush_r+0xc>
 800d748:	4b05      	ldr	r3, [pc, #20]	; (800d760 <_fflush_r+0x70>)
 800d74a:	429c      	cmp	r4, r3
 800d74c:	d101      	bne.n	800d752 <_fflush_r+0x62>
 800d74e:	68ac      	ldr	r4, [r5, #8]
 800d750:	e7df      	b.n	800d712 <_fflush_r+0x22>
 800d752:	4b04      	ldr	r3, [pc, #16]	; (800d764 <_fflush_r+0x74>)
 800d754:	429c      	cmp	r4, r3
 800d756:	bf08      	it	eq
 800d758:	68ec      	ldreq	r4, [r5, #12]
 800d75a:	e7da      	b.n	800d712 <_fflush_r+0x22>
 800d75c:	0800e4f8 	.word	0x0800e4f8
 800d760:	0800e518 	.word	0x0800e518
 800d764:	0800e4d8 	.word	0x0800e4d8

0800d768 <std>:
 800d768:	2300      	movs	r3, #0
 800d76a:	b510      	push	{r4, lr}
 800d76c:	4604      	mov	r4, r0
 800d76e:	e9c0 3300 	strd	r3, r3, [r0]
 800d772:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d776:	6083      	str	r3, [r0, #8]
 800d778:	8181      	strh	r1, [r0, #12]
 800d77a:	6643      	str	r3, [r0, #100]	; 0x64
 800d77c:	81c2      	strh	r2, [r0, #14]
 800d77e:	6183      	str	r3, [r0, #24]
 800d780:	4619      	mov	r1, r3
 800d782:	2208      	movs	r2, #8
 800d784:	305c      	adds	r0, #92	; 0x5c
 800d786:	f7fc f859 	bl	800983c <memset>
 800d78a:	4b05      	ldr	r3, [pc, #20]	; (800d7a0 <std+0x38>)
 800d78c:	6263      	str	r3, [r4, #36]	; 0x24
 800d78e:	4b05      	ldr	r3, [pc, #20]	; (800d7a4 <std+0x3c>)
 800d790:	62a3      	str	r3, [r4, #40]	; 0x28
 800d792:	4b05      	ldr	r3, [pc, #20]	; (800d7a8 <std+0x40>)
 800d794:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d796:	4b05      	ldr	r3, [pc, #20]	; (800d7ac <std+0x44>)
 800d798:	6224      	str	r4, [r4, #32]
 800d79a:	6323      	str	r3, [r4, #48]	; 0x30
 800d79c:	bd10      	pop	{r4, pc}
 800d79e:	bf00      	nop
 800d7a0:	0800db59 	.word	0x0800db59
 800d7a4:	0800db7b 	.word	0x0800db7b
 800d7a8:	0800dbb3 	.word	0x0800dbb3
 800d7ac:	0800dbd7 	.word	0x0800dbd7

0800d7b0 <_cleanup_r>:
 800d7b0:	4901      	ldr	r1, [pc, #4]	; (800d7b8 <_cleanup_r+0x8>)
 800d7b2:	f000 b8af 	b.w	800d914 <_fwalk_reent>
 800d7b6:	bf00      	nop
 800d7b8:	0800d6f1 	.word	0x0800d6f1

0800d7bc <__sfmoreglue>:
 800d7bc:	b570      	push	{r4, r5, r6, lr}
 800d7be:	2268      	movs	r2, #104	; 0x68
 800d7c0:	1e4d      	subs	r5, r1, #1
 800d7c2:	4355      	muls	r5, r2
 800d7c4:	460e      	mov	r6, r1
 800d7c6:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d7ca:	f7ff fadd 	bl	800cd88 <_malloc_r>
 800d7ce:	4604      	mov	r4, r0
 800d7d0:	b140      	cbz	r0, 800d7e4 <__sfmoreglue+0x28>
 800d7d2:	2100      	movs	r1, #0
 800d7d4:	e9c0 1600 	strd	r1, r6, [r0]
 800d7d8:	300c      	adds	r0, #12
 800d7da:	60a0      	str	r0, [r4, #8]
 800d7dc:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d7e0:	f7fc f82c 	bl	800983c <memset>
 800d7e4:	4620      	mov	r0, r4
 800d7e6:	bd70      	pop	{r4, r5, r6, pc}

0800d7e8 <__sfp_lock_acquire>:
 800d7e8:	4801      	ldr	r0, [pc, #4]	; (800d7f0 <__sfp_lock_acquire+0x8>)
 800d7ea:	f000 b8b3 	b.w	800d954 <__retarget_lock_acquire_recursive>
 800d7ee:	bf00      	nop
 800d7f0:	2000057d 	.word	0x2000057d

0800d7f4 <__sfp_lock_release>:
 800d7f4:	4801      	ldr	r0, [pc, #4]	; (800d7fc <__sfp_lock_release+0x8>)
 800d7f6:	f000 b8ae 	b.w	800d956 <__retarget_lock_release_recursive>
 800d7fa:	bf00      	nop
 800d7fc:	2000057d 	.word	0x2000057d

0800d800 <__sinit_lock_acquire>:
 800d800:	4801      	ldr	r0, [pc, #4]	; (800d808 <__sinit_lock_acquire+0x8>)
 800d802:	f000 b8a7 	b.w	800d954 <__retarget_lock_acquire_recursive>
 800d806:	bf00      	nop
 800d808:	2000057e 	.word	0x2000057e

0800d80c <__sinit_lock_release>:
 800d80c:	4801      	ldr	r0, [pc, #4]	; (800d814 <__sinit_lock_release+0x8>)
 800d80e:	f000 b8a2 	b.w	800d956 <__retarget_lock_release_recursive>
 800d812:	bf00      	nop
 800d814:	2000057e 	.word	0x2000057e

0800d818 <__sinit>:
 800d818:	b510      	push	{r4, lr}
 800d81a:	4604      	mov	r4, r0
 800d81c:	f7ff fff0 	bl	800d800 <__sinit_lock_acquire>
 800d820:	69a3      	ldr	r3, [r4, #24]
 800d822:	b11b      	cbz	r3, 800d82c <__sinit+0x14>
 800d824:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d828:	f7ff bff0 	b.w	800d80c <__sinit_lock_release>
 800d82c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d830:	6523      	str	r3, [r4, #80]	; 0x50
 800d832:	4b13      	ldr	r3, [pc, #76]	; (800d880 <__sinit+0x68>)
 800d834:	4a13      	ldr	r2, [pc, #76]	; (800d884 <__sinit+0x6c>)
 800d836:	681b      	ldr	r3, [r3, #0]
 800d838:	62a2      	str	r2, [r4, #40]	; 0x28
 800d83a:	42a3      	cmp	r3, r4
 800d83c:	bf04      	itt	eq
 800d83e:	2301      	moveq	r3, #1
 800d840:	61a3      	streq	r3, [r4, #24]
 800d842:	4620      	mov	r0, r4
 800d844:	f000 f820 	bl	800d888 <__sfp>
 800d848:	6060      	str	r0, [r4, #4]
 800d84a:	4620      	mov	r0, r4
 800d84c:	f000 f81c 	bl	800d888 <__sfp>
 800d850:	60a0      	str	r0, [r4, #8]
 800d852:	4620      	mov	r0, r4
 800d854:	f000 f818 	bl	800d888 <__sfp>
 800d858:	2200      	movs	r2, #0
 800d85a:	60e0      	str	r0, [r4, #12]
 800d85c:	2104      	movs	r1, #4
 800d85e:	6860      	ldr	r0, [r4, #4]
 800d860:	f7ff ff82 	bl	800d768 <std>
 800d864:	68a0      	ldr	r0, [r4, #8]
 800d866:	2201      	movs	r2, #1
 800d868:	2109      	movs	r1, #9
 800d86a:	f7ff ff7d 	bl	800d768 <std>
 800d86e:	68e0      	ldr	r0, [r4, #12]
 800d870:	2202      	movs	r2, #2
 800d872:	2112      	movs	r1, #18
 800d874:	f7ff ff78 	bl	800d768 <std>
 800d878:	2301      	movs	r3, #1
 800d87a:	61a3      	str	r3, [r4, #24]
 800d87c:	e7d2      	b.n	800d824 <__sinit+0xc>
 800d87e:	bf00      	nop
 800d880:	0800e03c 	.word	0x0800e03c
 800d884:	0800d7b1 	.word	0x0800d7b1

0800d888 <__sfp>:
 800d888:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d88a:	4607      	mov	r7, r0
 800d88c:	f7ff ffac 	bl	800d7e8 <__sfp_lock_acquire>
 800d890:	4b1e      	ldr	r3, [pc, #120]	; (800d90c <__sfp+0x84>)
 800d892:	681e      	ldr	r6, [r3, #0]
 800d894:	69b3      	ldr	r3, [r6, #24]
 800d896:	b913      	cbnz	r3, 800d89e <__sfp+0x16>
 800d898:	4630      	mov	r0, r6
 800d89a:	f7ff ffbd 	bl	800d818 <__sinit>
 800d89e:	3648      	adds	r6, #72	; 0x48
 800d8a0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d8a4:	3b01      	subs	r3, #1
 800d8a6:	d503      	bpl.n	800d8b0 <__sfp+0x28>
 800d8a8:	6833      	ldr	r3, [r6, #0]
 800d8aa:	b30b      	cbz	r3, 800d8f0 <__sfp+0x68>
 800d8ac:	6836      	ldr	r6, [r6, #0]
 800d8ae:	e7f7      	b.n	800d8a0 <__sfp+0x18>
 800d8b0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d8b4:	b9d5      	cbnz	r5, 800d8ec <__sfp+0x64>
 800d8b6:	4b16      	ldr	r3, [pc, #88]	; (800d910 <__sfp+0x88>)
 800d8b8:	60e3      	str	r3, [r4, #12]
 800d8ba:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d8be:	6665      	str	r5, [r4, #100]	; 0x64
 800d8c0:	f000 f847 	bl	800d952 <__retarget_lock_init_recursive>
 800d8c4:	f7ff ff96 	bl	800d7f4 <__sfp_lock_release>
 800d8c8:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d8cc:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d8d0:	6025      	str	r5, [r4, #0]
 800d8d2:	61a5      	str	r5, [r4, #24]
 800d8d4:	2208      	movs	r2, #8
 800d8d6:	4629      	mov	r1, r5
 800d8d8:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d8dc:	f7fb ffae 	bl	800983c <memset>
 800d8e0:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d8e4:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d8e8:	4620      	mov	r0, r4
 800d8ea:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d8ec:	3468      	adds	r4, #104	; 0x68
 800d8ee:	e7d9      	b.n	800d8a4 <__sfp+0x1c>
 800d8f0:	2104      	movs	r1, #4
 800d8f2:	4638      	mov	r0, r7
 800d8f4:	f7ff ff62 	bl	800d7bc <__sfmoreglue>
 800d8f8:	4604      	mov	r4, r0
 800d8fa:	6030      	str	r0, [r6, #0]
 800d8fc:	2800      	cmp	r0, #0
 800d8fe:	d1d5      	bne.n	800d8ac <__sfp+0x24>
 800d900:	f7ff ff78 	bl	800d7f4 <__sfp_lock_release>
 800d904:	230c      	movs	r3, #12
 800d906:	603b      	str	r3, [r7, #0]
 800d908:	e7ee      	b.n	800d8e8 <__sfp+0x60>
 800d90a:	bf00      	nop
 800d90c:	0800e03c 	.word	0x0800e03c
 800d910:	ffff0001 	.word	0xffff0001

0800d914 <_fwalk_reent>:
 800d914:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d918:	4606      	mov	r6, r0
 800d91a:	4688      	mov	r8, r1
 800d91c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d920:	2700      	movs	r7, #0
 800d922:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d926:	f1b9 0901 	subs.w	r9, r9, #1
 800d92a:	d505      	bpl.n	800d938 <_fwalk_reent+0x24>
 800d92c:	6824      	ldr	r4, [r4, #0]
 800d92e:	2c00      	cmp	r4, #0
 800d930:	d1f7      	bne.n	800d922 <_fwalk_reent+0xe>
 800d932:	4638      	mov	r0, r7
 800d934:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d938:	89ab      	ldrh	r3, [r5, #12]
 800d93a:	2b01      	cmp	r3, #1
 800d93c:	d907      	bls.n	800d94e <_fwalk_reent+0x3a>
 800d93e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d942:	3301      	adds	r3, #1
 800d944:	d003      	beq.n	800d94e <_fwalk_reent+0x3a>
 800d946:	4629      	mov	r1, r5
 800d948:	4630      	mov	r0, r6
 800d94a:	47c0      	blx	r8
 800d94c:	4307      	orrs	r7, r0
 800d94e:	3568      	adds	r5, #104	; 0x68
 800d950:	e7e9      	b.n	800d926 <_fwalk_reent+0x12>

0800d952 <__retarget_lock_init_recursive>:
 800d952:	4770      	bx	lr

0800d954 <__retarget_lock_acquire_recursive>:
 800d954:	4770      	bx	lr

0800d956 <__retarget_lock_release_recursive>:
 800d956:	4770      	bx	lr

0800d958 <__swhatbuf_r>:
 800d958:	b570      	push	{r4, r5, r6, lr}
 800d95a:	460e      	mov	r6, r1
 800d95c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d960:	2900      	cmp	r1, #0
 800d962:	b096      	sub	sp, #88	; 0x58
 800d964:	4614      	mov	r4, r2
 800d966:	461d      	mov	r5, r3
 800d968:	da08      	bge.n	800d97c <__swhatbuf_r+0x24>
 800d96a:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d96e:	2200      	movs	r2, #0
 800d970:	602a      	str	r2, [r5, #0]
 800d972:	061a      	lsls	r2, r3, #24
 800d974:	d410      	bmi.n	800d998 <__swhatbuf_r+0x40>
 800d976:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d97a:	e00e      	b.n	800d99a <__swhatbuf_r+0x42>
 800d97c:	466a      	mov	r2, sp
 800d97e:	f000 f951 	bl	800dc24 <_fstat_r>
 800d982:	2800      	cmp	r0, #0
 800d984:	dbf1      	blt.n	800d96a <__swhatbuf_r+0x12>
 800d986:	9a01      	ldr	r2, [sp, #4]
 800d988:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d98c:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d990:	425a      	negs	r2, r3
 800d992:	415a      	adcs	r2, r3
 800d994:	602a      	str	r2, [r5, #0]
 800d996:	e7ee      	b.n	800d976 <__swhatbuf_r+0x1e>
 800d998:	2340      	movs	r3, #64	; 0x40
 800d99a:	2000      	movs	r0, #0
 800d99c:	6023      	str	r3, [r4, #0]
 800d99e:	b016      	add	sp, #88	; 0x58
 800d9a0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d9a4 <__smakebuf_r>:
 800d9a4:	898b      	ldrh	r3, [r1, #12]
 800d9a6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d9a8:	079d      	lsls	r5, r3, #30
 800d9aa:	4606      	mov	r6, r0
 800d9ac:	460c      	mov	r4, r1
 800d9ae:	d507      	bpl.n	800d9c0 <__smakebuf_r+0x1c>
 800d9b0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d9b4:	6023      	str	r3, [r4, #0]
 800d9b6:	6123      	str	r3, [r4, #16]
 800d9b8:	2301      	movs	r3, #1
 800d9ba:	6163      	str	r3, [r4, #20]
 800d9bc:	b002      	add	sp, #8
 800d9be:	bd70      	pop	{r4, r5, r6, pc}
 800d9c0:	ab01      	add	r3, sp, #4
 800d9c2:	466a      	mov	r2, sp
 800d9c4:	f7ff ffc8 	bl	800d958 <__swhatbuf_r>
 800d9c8:	9900      	ldr	r1, [sp, #0]
 800d9ca:	4605      	mov	r5, r0
 800d9cc:	4630      	mov	r0, r6
 800d9ce:	f7ff f9db 	bl	800cd88 <_malloc_r>
 800d9d2:	b948      	cbnz	r0, 800d9e8 <__smakebuf_r+0x44>
 800d9d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d9d8:	059a      	lsls	r2, r3, #22
 800d9da:	d4ef      	bmi.n	800d9bc <__smakebuf_r+0x18>
 800d9dc:	f023 0303 	bic.w	r3, r3, #3
 800d9e0:	f043 0302 	orr.w	r3, r3, #2
 800d9e4:	81a3      	strh	r3, [r4, #12]
 800d9e6:	e7e3      	b.n	800d9b0 <__smakebuf_r+0xc>
 800d9e8:	4b0d      	ldr	r3, [pc, #52]	; (800da20 <__smakebuf_r+0x7c>)
 800d9ea:	62b3      	str	r3, [r6, #40]	; 0x28
 800d9ec:	89a3      	ldrh	r3, [r4, #12]
 800d9ee:	6020      	str	r0, [r4, #0]
 800d9f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d9f4:	81a3      	strh	r3, [r4, #12]
 800d9f6:	9b00      	ldr	r3, [sp, #0]
 800d9f8:	6163      	str	r3, [r4, #20]
 800d9fa:	9b01      	ldr	r3, [sp, #4]
 800d9fc:	6120      	str	r0, [r4, #16]
 800d9fe:	b15b      	cbz	r3, 800da18 <__smakebuf_r+0x74>
 800da00:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800da04:	4630      	mov	r0, r6
 800da06:	f000 f91f 	bl	800dc48 <_isatty_r>
 800da0a:	b128      	cbz	r0, 800da18 <__smakebuf_r+0x74>
 800da0c:	89a3      	ldrh	r3, [r4, #12]
 800da0e:	f023 0303 	bic.w	r3, r3, #3
 800da12:	f043 0301 	orr.w	r3, r3, #1
 800da16:	81a3      	strh	r3, [r4, #12]
 800da18:	89a0      	ldrh	r0, [r4, #12]
 800da1a:	4305      	orrs	r5, r0
 800da1c:	81a5      	strh	r5, [r4, #12]
 800da1e:	e7cd      	b.n	800d9bc <__smakebuf_r+0x18>
 800da20:	0800d7b1 	.word	0x0800d7b1

0800da24 <memmove>:
 800da24:	4288      	cmp	r0, r1
 800da26:	b510      	push	{r4, lr}
 800da28:	eb01 0402 	add.w	r4, r1, r2
 800da2c:	d902      	bls.n	800da34 <memmove+0x10>
 800da2e:	4284      	cmp	r4, r0
 800da30:	4623      	mov	r3, r4
 800da32:	d807      	bhi.n	800da44 <memmove+0x20>
 800da34:	1e43      	subs	r3, r0, #1
 800da36:	42a1      	cmp	r1, r4
 800da38:	d008      	beq.n	800da4c <memmove+0x28>
 800da3a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800da3e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800da42:	e7f8      	b.n	800da36 <memmove+0x12>
 800da44:	4402      	add	r2, r0
 800da46:	4601      	mov	r1, r0
 800da48:	428a      	cmp	r2, r1
 800da4a:	d100      	bne.n	800da4e <memmove+0x2a>
 800da4c:	bd10      	pop	{r4, pc}
 800da4e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800da52:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800da56:	e7f7      	b.n	800da48 <memmove+0x24>

0800da58 <__malloc_lock>:
 800da58:	4801      	ldr	r0, [pc, #4]	; (800da60 <__malloc_lock+0x8>)
 800da5a:	f7ff bf7b 	b.w	800d954 <__retarget_lock_acquire_recursive>
 800da5e:	bf00      	nop
 800da60:	2000057c 	.word	0x2000057c

0800da64 <__malloc_unlock>:
 800da64:	4801      	ldr	r0, [pc, #4]	; (800da6c <__malloc_unlock+0x8>)
 800da66:	f7ff bf76 	b.w	800d956 <__retarget_lock_release_recursive>
 800da6a:	bf00      	nop
 800da6c:	2000057c 	.word	0x2000057c

0800da70 <_realloc_r>:
 800da70:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800da74:	4680      	mov	r8, r0
 800da76:	4614      	mov	r4, r2
 800da78:	460e      	mov	r6, r1
 800da7a:	b921      	cbnz	r1, 800da86 <_realloc_r+0x16>
 800da7c:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800da80:	4611      	mov	r1, r2
 800da82:	f7ff b981 	b.w	800cd88 <_malloc_r>
 800da86:	b92a      	cbnz	r2, 800da94 <_realloc_r+0x24>
 800da88:	f7ff f912 	bl	800ccb0 <_free_r>
 800da8c:	4625      	mov	r5, r4
 800da8e:	4628      	mov	r0, r5
 800da90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800da94:	f000 f8fa 	bl	800dc8c <_malloc_usable_size_r>
 800da98:	4284      	cmp	r4, r0
 800da9a:	4607      	mov	r7, r0
 800da9c:	d802      	bhi.n	800daa4 <_realloc_r+0x34>
 800da9e:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800daa2:	d812      	bhi.n	800daca <_realloc_r+0x5a>
 800daa4:	4621      	mov	r1, r4
 800daa6:	4640      	mov	r0, r8
 800daa8:	f7ff f96e 	bl	800cd88 <_malloc_r>
 800daac:	4605      	mov	r5, r0
 800daae:	2800      	cmp	r0, #0
 800dab0:	d0ed      	beq.n	800da8e <_realloc_r+0x1e>
 800dab2:	42bc      	cmp	r4, r7
 800dab4:	4622      	mov	r2, r4
 800dab6:	4631      	mov	r1, r6
 800dab8:	bf28      	it	cs
 800daba:	463a      	movcs	r2, r7
 800dabc:	f7fe fc12 	bl	800c2e4 <memcpy>
 800dac0:	4631      	mov	r1, r6
 800dac2:	4640      	mov	r0, r8
 800dac4:	f7ff f8f4 	bl	800ccb0 <_free_r>
 800dac8:	e7e1      	b.n	800da8e <_realloc_r+0x1e>
 800daca:	4635      	mov	r5, r6
 800dacc:	e7df      	b.n	800da8e <_realloc_r+0x1e>

0800dace <_raise_r>:
 800dace:	291f      	cmp	r1, #31
 800dad0:	b538      	push	{r3, r4, r5, lr}
 800dad2:	4604      	mov	r4, r0
 800dad4:	460d      	mov	r5, r1
 800dad6:	d904      	bls.n	800dae2 <_raise_r+0x14>
 800dad8:	2316      	movs	r3, #22
 800dada:	6003      	str	r3, [r0, #0]
 800dadc:	f04f 30ff 	mov.w	r0, #4294967295
 800dae0:	bd38      	pop	{r3, r4, r5, pc}
 800dae2:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800dae4:	b112      	cbz	r2, 800daec <_raise_r+0x1e>
 800dae6:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800daea:	b94b      	cbnz	r3, 800db00 <_raise_r+0x32>
 800daec:	4620      	mov	r0, r4
 800daee:	f000 f831 	bl	800db54 <_getpid_r>
 800daf2:	462a      	mov	r2, r5
 800daf4:	4601      	mov	r1, r0
 800daf6:	4620      	mov	r0, r4
 800daf8:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800dafc:	f000 b818 	b.w	800db30 <_kill_r>
 800db00:	2b01      	cmp	r3, #1
 800db02:	d00a      	beq.n	800db1a <_raise_r+0x4c>
 800db04:	1c59      	adds	r1, r3, #1
 800db06:	d103      	bne.n	800db10 <_raise_r+0x42>
 800db08:	2316      	movs	r3, #22
 800db0a:	6003      	str	r3, [r0, #0]
 800db0c:	2001      	movs	r0, #1
 800db0e:	e7e7      	b.n	800dae0 <_raise_r+0x12>
 800db10:	2400      	movs	r4, #0
 800db12:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800db16:	4628      	mov	r0, r5
 800db18:	4798      	blx	r3
 800db1a:	2000      	movs	r0, #0
 800db1c:	e7e0      	b.n	800dae0 <_raise_r+0x12>
	...

0800db20 <raise>:
 800db20:	4b02      	ldr	r3, [pc, #8]	; (800db2c <raise+0xc>)
 800db22:	4601      	mov	r1, r0
 800db24:	6818      	ldr	r0, [r3, #0]
 800db26:	f7ff bfd2 	b.w	800dace <_raise_r>
 800db2a:	bf00      	nop
 800db2c:	2000001c 	.word	0x2000001c

0800db30 <_kill_r>:
 800db30:	b538      	push	{r3, r4, r5, lr}
 800db32:	4d07      	ldr	r5, [pc, #28]	; (800db50 <_kill_r+0x20>)
 800db34:	2300      	movs	r3, #0
 800db36:	4604      	mov	r4, r0
 800db38:	4608      	mov	r0, r1
 800db3a:	4611      	mov	r1, r2
 800db3c:	602b      	str	r3, [r5, #0]
 800db3e:	f7f8 fa99 	bl	8006074 <_kill>
 800db42:	1c43      	adds	r3, r0, #1
 800db44:	d102      	bne.n	800db4c <_kill_r+0x1c>
 800db46:	682b      	ldr	r3, [r5, #0]
 800db48:	b103      	cbz	r3, 800db4c <_kill_r+0x1c>
 800db4a:	6023      	str	r3, [r4, #0]
 800db4c:	bd38      	pop	{r3, r4, r5, pc}
 800db4e:	bf00      	nop
 800db50:	20000580 	.word	0x20000580

0800db54 <_getpid_r>:
 800db54:	f7f8 ba86 	b.w	8006064 <_getpid>

0800db58 <__sread>:
 800db58:	b510      	push	{r4, lr}
 800db5a:	460c      	mov	r4, r1
 800db5c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db60:	f000 f89c 	bl	800dc9c <_read_r>
 800db64:	2800      	cmp	r0, #0
 800db66:	bfab      	itete	ge
 800db68:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800db6a:	89a3      	ldrhlt	r3, [r4, #12]
 800db6c:	181b      	addge	r3, r3, r0
 800db6e:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800db72:	bfac      	ite	ge
 800db74:	6563      	strge	r3, [r4, #84]	; 0x54
 800db76:	81a3      	strhlt	r3, [r4, #12]
 800db78:	bd10      	pop	{r4, pc}

0800db7a <__swrite>:
 800db7a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800db7e:	461f      	mov	r7, r3
 800db80:	898b      	ldrh	r3, [r1, #12]
 800db82:	05db      	lsls	r3, r3, #23
 800db84:	4605      	mov	r5, r0
 800db86:	460c      	mov	r4, r1
 800db88:	4616      	mov	r6, r2
 800db8a:	d505      	bpl.n	800db98 <__swrite+0x1e>
 800db8c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db90:	2302      	movs	r3, #2
 800db92:	2200      	movs	r2, #0
 800db94:	f000 f868 	bl	800dc68 <_lseek_r>
 800db98:	89a3      	ldrh	r3, [r4, #12]
 800db9a:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800db9e:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dba2:	81a3      	strh	r3, [r4, #12]
 800dba4:	4632      	mov	r2, r6
 800dba6:	463b      	mov	r3, r7
 800dba8:	4628      	mov	r0, r5
 800dbaa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800dbae:	f000 b817 	b.w	800dbe0 <_write_r>

0800dbb2 <__sseek>:
 800dbb2:	b510      	push	{r4, lr}
 800dbb4:	460c      	mov	r4, r1
 800dbb6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbba:	f000 f855 	bl	800dc68 <_lseek_r>
 800dbbe:	1c43      	adds	r3, r0, #1
 800dbc0:	89a3      	ldrh	r3, [r4, #12]
 800dbc2:	bf15      	itete	ne
 800dbc4:	6560      	strne	r0, [r4, #84]	; 0x54
 800dbc6:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800dbca:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800dbce:	81a3      	strheq	r3, [r4, #12]
 800dbd0:	bf18      	it	ne
 800dbd2:	81a3      	strhne	r3, [r4, #12]
 800dbd4:	bd10      	pop	{r4, pc}

0800dbd6 <__sclose>:
 800dbd6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dbda:	f000 b813 	b.w	800dc04 <_close_r>
	...

0800dbe0 <_write_r>:
 800dbe0:	b538      	push	{r3, r4, r5, lr}
 800dbe2:	4d07      	ldr	r5, [pc, #28]	; (800dc00 <_write_r+0x20>)
 800dbe4:	4604      	mov	r4, r0
 800dbe6:	4608      	mov	r0, r1
 800dbe8:	4611      	mov	r1, r2
 800dbea:	2200      	movs	r2, #0
 800dbec:	602a      	str	r2, [r5, #0]
 800dbee:	461a      	mov	r2, r3
 800dbf0:	f7f8 fa77 	bl	80060e2 <_write>
 800dbf4:	1c43      	adds	r3, r0, #1
 800dbf6:	d102      	bne.n	800dbfe <_write_r+0x1e>
 800dbf8:	682b      	ldr	r3, [r5, #0]
 800dbfa:	b103      	cbz	r3, 800dbfe <_write_r+0x1e>
 800dbfc:	6023      	str	r3, [r4, #0]
 800dbfe:	bd38      	pop	{r3, r4, r5, pc}
 800dc00:	20000580 	.word	0x20000580

0800dc04 <_close_r>:
 800dc04:	b538      	push	{r3, r4, r5, lr}
 800dc06:	4d06      	ldr	r5, [pc, #24]	; (800dc20 <_close_r+0x1c>)
 800dc08:	2300      	movs	r3, #0
 800dc0a:	4604      	mov	r4, r0
 800dc0c:	4608      	mov	r0, r1
 800dc0e:	602b      	str	r3, [r5, #0]
 800dc10:	f7f8 fa83 	bl	800611a <_close>
 800dc14:	1c43      	adds	r3, r0, #1
 800dc16:	d102      	bne.n	800dc1e <_close_r+0x1a>
 800dc18:	682b      	ldr	r3, [r5, #0]
 800dc1a:	b103      	cbz	r3, 800dc1e <_close_r+0x1a>
 800dc1c:	6023      	str	r3, [r4, #0]
 800dc1e:	bd38      	pop	{r3, r4, r5, pc}
 800dc20:	20000580 	.word	0x20000580

0800dc24 <_fstat_r>:
 800dc24:	b538      	push	{r3, r4, r5, lr}
 800dc26:	4d07      	ldr	r5, [pc, #28]	; (800dc44 <_fstat_r+0x20>)
 800dc28:	2300      	movs	r3, #0
 800dc2a:	4604      	mov	r4, r0
 800dc2c:	4608      	mov	r0, r1
 800dc2e:	4611      	mov	r1, r2
 800dc30:	602b      	str	r3, [r5, #0]
 800dc32:	f7f8 fa7e 	bl	8006132 <_fstat>
 800dc36:	1c43      	adds	r3, r0, #1
 800dc38:	d102      	bne.n	800dc40 <_fstat_r+0x1c>
 800dc3a:	682b      	ldr	r3, [r5, #0]
 800dc3c:	b103      	cbz	r3, 800dc40 <_fstat_r+0x1c>
 800dc3e:	6023      	str	r3, [r4, #0]
 800dc40:	bd38      	pop	{r3, r4, r5, pc}
 800dc42:	bf00      	nop
 800dc44:	20000580 	.word	0x20000580

0800dc48 <_isatty_r>:
 800dc48:	b538      	push	{r3, r4, r5, lr}
 800dc4a:	4d06      	ldr	r5, [pc, #24]	; (800dc64 <_isatty_r+0x1c>)
 800dc4c:	2300      	movs	r3, #0
 800dc4e:	4604      	mov	r4, r0
 800dc50:	4608      	mov	r0, r1
 800dc52:	602b      	str	r3, [r5, #0]
 800dc54:	f7f8 fa7d 	bl	8006152 <_isatty>
 800dc58:	1c43      	adds	r3, r0, #1
 800dc5a:	d102      	bne.n	800dc62 <_isatty_r+0x1a>
 800dc5c:	682b      	ldr	r3, [r5, #0]
 800dc5e:	b103      	cbz	r3, 800dc62 <_isatty_r+0x1a>
 800dc60:	6023      	str	r3, [r4, #0]
 800dc62:	bd38      	pop	{r3, r4, r5, pc}
 800dc64:	20000580 	.word	0x20000580

0800dc68 <_lseek_r>:
 800dc68:	b538      	push	{r3, r4, r5, lr}
 800dc6a:	4d07      	ldr	r5, [pc, #28]	; (800dc88 <_lseek_r+0x20>)
 800dc6c:	4604      	mov	r4, r0
 800dc6e:	4608      	mov	r0, r1
 800dc70:	4611      	mov	r1, r2
 800dc72:	2200      	movs	r2, #0
 800dc74:	602a      	str	r2, [r5, #0]
 800dc76:	461a      	mov	r2, r3
 800dc78:	f7f8 fa76 	bl	8006168 <_lseek>
 800dc7c:	1c43      	adds	r3, r0, #1
 800dc7e:	d102      	bne.n	800dc86 <_lseek_r+0x1e>
 800dc80:	682b      	ldr	r3, [r5, #0]
 800dc82:	b103      	cbz	r3, 800dc86 <_lseek_r+0x1e>
 800dc84:	6023      	str	r3, [r4, #0]
 800dc86:	bd38      	pop	{r3, r4, r5, pc}
 800dc88:	20000580 	.word	0x20000580

0800dc8c <_malloc_usable_size_r>:
 800dc8c:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dc90:	1f18      	subs	r0, r3, #4
 800dc92:	2b00      	cmp	r3, #0
 800dc94:	bfbc      	itt	lt
 800dc96:	580b      	ldrlt	r3, [r1, r0]
 800dc98:	18c0      	addlt	r0, r0, r3
 800dc9a:	4770      	bx	lr

0800dc9c <_read_r>:
 800dc9c:	b538      	push	{r3, r4, r5, lr}
 800dc9e:	4d07      	ldr	r5, [pc, #28]	; (800dcbc <_read_r+0x20>)
 800dca0:	4604      	mov	r4, r0
 800dca2:	4608      	mov	r0, r1
 800dca4:	4611      	mov	r1, r2
 800dca6:	2200      	movs	r2, #0
 800dca8:	602a      	str	r2, [r5, #0]
 800dcaa:	461a      	mov	r2, r3
 800dcac:	f7f8 f9fc 	bl	80060a8 <_read>
 800dcb0:	1c43      	adds	r3, r0, #1
 800dcb2:	d102      	bne.n	800dcba <_read_r+0x1e>
 800dcb4:	682b      	ldr	r3, [r5, #0]
 800dcb6:	b103      	cbz	r3, 800dcba <_read_r+0x1e>
 800dcb8:	6023      	str	r3, [r4, #0]
 800dcba:	bd38      	pop	{r3, r4, r5, pc}
 800dcbc:	20000580 	.word	0x20000580

0800dcc0 <sqrt>:
 800dcc0:	b538      	push	{r3, r4, r5, lr}
 800dcc2:	ed2d 8b02 	vpush	{d8}
 800dcc6:	ec55 4b10 	vmov	r4, r5, d0
 800dcca:	f000 f825 	bl	800dd18 <__ieee754_sqrt>
 800dcce:	4622      	mov	r2, r4
 800dcd0:	462b      	mov	r3, r5
 800dcd2:	4620      	mov	r0, r4
 800dcd4:	4629      	mov	r1, r5
 800dcd6:	eeb0 8a40 	vmov.f32	s16, s0
 800dcda:	eef0 8a60 	vmov.f32	s17, s1
 800dcde:	f7f2 ff25 	bl	8000b2c <__aeabi_dcmpun>
 800dce2:	b990      	cbnz	r0, 800dd0a <sqrt+0x4a>
 800dce4:	2200      	movs	r2, #0
 800dce6:	2300      	movs	r3, #0
 800dce8:	4620      	mov	r0, r4
 800dcea:	4629      	mov	r1, r5
 800dcec:	f7f2 fef6 	bl	8000adc <__aeabi_dcmplt>
 800dcf0:	b158      	cbz	r0, 800dd0a <sqrt+0x4a>
 800dcf2:	f7fb fd79 	bl	80097e8 <__errno>
 800dcf6:	2321      	movs	r3, #33	; 0x21
 800dcf8:	6003      	str	r3, [r0, #0]
 800dcfa:	2200      	movs	r2, #0
 800dcfc:	2300      	movs	r3, #0
 800dcfe:	4610      	mov	r0, r2
 800dd00:	4619      	mov	r1, r3
 800dd02:	f7f2 fda3 	bl	800084c <__aeabi_ddiv>
 800dd06:	ec41 0b18 	vmov	d8, r0, r1
 800dd0a:	eeb0 0a48 	vmov.f32	s0, s16
 800dd0e:	eef0 0a68 	vmov.f32	s1, s17
 800dd12:	ecbd 8b02 	vpop	{d8}
 800dd16:	bd38      	pop	{r3, r4, r5, pc}

0800dd18 <__ieee754_sqrt>:
 800dd18:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dd1c:	ec55 4b10 	vmov	r4, r5, d0
 800dd20:	4e55      	ldr	r6, [pc, #340]	; (800de78 <__ieee754_sqrt+0x160>)
 800dd22:	43ae      	bics	r6, r5
 800dd24:	ee10 0a10 	vmov	r0, s0
 800dd28:	ee10 3a10 	vmov	r3, s0
 800dd2c:	462a      	mov	r2, r5
 800dd2e:	4629      	mov	r1, r5
 800dd30:	d110      	bne.n	800dd54 <__ieee754_sqrt+0x3c>
 800dd32:	ee10 2a10 	vmov	r2, s0
 800dd36:	462b      	mov	r3, r5
 800dd38:	f7f2 fc5e 	bl	80005f8 <__aeabi_dmul>
 800dd3c:	4602      	mov	r2, r0
 800dd3e:	460b      	mov	r3, r1
 800dd40:	4620      	mov	r0, r4
 800dd42:	4629      	mov	r1, r5
 800dd44:	f7f2 faa2 	bl	800028c <__adddf3>
 800dd48:	4604      	mov	r4, r0
 800dd4a:	460d      	mov	r5, r1
 800dd4c:	ec45 4b10 	vmov	d0, r4, r5
 800dd50:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dd54:	2d00      	cmp	r5, #0
 800dd56:	dc10      	bgt.n	800dd7a <__ieee754_sqrt+0x62>
 800dd58:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dd5c:	4330      	orrs	r0, r6
 800dd5e:	d0f5      	beq.n	800dd4c <__ieee754_sqrt+0x34>
 800dd60:	b15d      	cbz	r5, 800dd7a <__ieee754_sqrt+0x62>
 800dd62:	ee10 2a10 	vmov	r2, s0
 800dd66:	462b      	mov	r3, r5
 800dd68:	ee10 0a10 	vmov	r0, s0
 800dd6c:	f7f2 fa8c 	bl	8000288 <__aeabi_dsub>
 800dd70:	4602      	mov	r2, r0
 800dd72:	460b      	mov	r3, r1
 800dd74:	f7f2 fd6a 	bl	800084c <__aeabi_ddiv>
 800dd78:	e7e6      	b.n	800dd48 <__ieee754_sqrt+0x30>
 800dd7a:	1512      	asrs	r2, r2, #20
 800dd7c:	d074      	beq.n	800de68 <__ieee754_sqrt+0x150>
 800dd7e:	07d4      	lsls	r4, r2, #31
 800dd80:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800dd84:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800dd88:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dd8c:	bf5e      	ittt	pl
 800dd8e:	0fda      	lsrpl	r2, r3, #31
 800dd90:	005b      	lslpl	r3, r3, #1
 800dd92:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800dd96:	2400      	movs	r4, #0
 800dd98:	0fda      	lsrs	r2, r3, #31
 800dd9a:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800dd9e:	107f      	asrs	r7, r7, #1
 800dda0:	005b      	lsls	r3, r3, #1
 800dda2:	2516      	movs	r5, #22
 800dda4:	4620      	mov	r0, r4
 800dda6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800ddaa:	1886      	adds	r6, r0, r2
 800ddac:	428e      	cmp	r6, r1
 800ddae:	bfde      	ittt	le
 800ddb0:	1b89      	suble	r1, r1, r6
 800ddb2:	18b0      	addle	r0, r6, r2
 800ddb4:	18a4      	addle	r4, r4, r2
 800ddb6:	0049      	lsls	r1, r1, #1
 800ddb8:	3d01      	subs	r5, #1
 800ddba:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800ddbe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800ddc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800ddc6:	d1f0      	bne.n	800ddaa <__ieee754_sqrt+0x92>
 800ddc8:	462a      	mov	r2, r5
 800ddca:	f04f 0e20 	mov.w	lr, #32
 800ddce:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800ddd2:	4281      	cmp	r1, r0
 800ddd4:	eb06 0c05 	add.w	ip, r6, r5
 800ddd8:	dc02      	bgt.n	800dde0 <__ieee754_sqrt+0xc8>
 800ddda:	d113      	bne.n	800de04 <__ieee754_sqrt+0xec>
 800dddc:	459c      	cmp	ip, r3
 800ddde:	d811      	bhi.n	800de04 <__ieee754_sqrt+0xec>
 800dde0:	f1bc 0f00 	cmp.w	ip, #0
 800dde4:	eb0c 0506 	add.w	r5, ip, r6
 800dde8:	da43      	bge.n	800de72 <__ieee754_sqrt+0x15a>
 800ddea:	2d00      	cmp	r5, #0
 800ddec:	db41      	blt.n	800de72 <__ieee754_sqrt+0x15a>
 800ddee:	f100 0801 	add.w	r8, r0, #1
 800ddf2:	1a09      	subs	r1, r1, r0
 800ddf4:	459c      	cmp	ip, r3
 800ddf6:	bf88      	it	hi
 800ddf8:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800ddfc:	eba3 030c 	sub.w	r3, r3, ip
 800de00:	4432      	add	r2, r6
 800de02:	4640      	mov	r0, r8
 800de04:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800de08:	f1be 0e01 	subs.w	lr, lr, #1
 800de0c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800de10:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800de14:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800de18:	d1db      	bne.n	800ddd2 <__ieee754_sqrt+0xba>
 800de1a:	430b      	orrs	r3, r1
 800de1c:	d006      	beq.n	800de2c <__ieee754_sqrt+0x114>
 800de1e:	1c50      	adds	r0, r2, #1
 800de20:	bf13      	iteet	ne
 800de22:	3201      	addne	r2, #1
 800de24:	3401      	addeq	r4, #1
 800de26:	4672      	moveq	r2, lr
 800de28:	f022 0201 	bicne.w	r2, r2, #1
 800de2c:	1063      	asrs	r3, r4, #1
 800de2e:	0852      	lsrs	r2, r2, #1
 800de30:	07e1      	lsls	r1, r4, #31
 800de32:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800de36:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800de3a:	bf48      	it	mi
 800de3c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800de40:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800de44:	4614      	mov	r4, r2
 800de46:	e781      	b.n	800dd4c <__ieee754_sqrt+0x34>
 800de48:	0ad9      	lsrs	r1, r3, #11
 800de4a:	3815      	subs	r0, #21
 800de4c:	055b      	lsls	r3, r3, #21
 800de4e:	2900      	cmp	r1, #0
 800de50:	d0fa      	beq.n	800de48 <__ieee754_sqrt+0x130>
 800de52:	02cd      	lsls	r5, r1, #11
 800de54:	d50a      	bpl.n	800de6c <__ieee754_sqrt+0x154>
 800de56:	f1c2 0420 	rsb	r4, r2, #32
 800de5a:	fa23 f404 	lsr.w	r4, r3, r4
 800de5e:	1e55      	subs	r5, r2, #1
 800de60:	4093      	lsls	r3, r2
 800de62:	4321      	orrs	r1, r4
 800de64:	1b42      	subs	r2, r0, r5
 800de66:	e78a      	b.n	800dd7e <__ieee754_sqrt+0x66>
 800de68:	4610      	mov	r0, r2
 800de6a:	e7f0      	b.n	800de4e <__ieee754_sqrt+0x136>
 800de6c:	0049      	lsls	r1, r1, #1
 800de6e:	3201      	adds	r2, #1
 800de70:	e7ef      	b.n	800de52 <__ieee754_sqrt+0x13a>
 800de72:	4680      	mov	r8, r0
 800de74:	e7bd      	b.n	800ddf2 <__ieee754_sqrt+0xda>
 800de76:	bf00      	nop
 800de78:	7ff00000 	.word	0x7ff00000

0800de7c <_init>:
 800de7c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de7e:	bf00      	nop
 800de80:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de82:	bc08      	pop	{r3}
 800de84:	469e      	mov	lr, r3
 800de86:	4770      	bx	lr

0800de88 <_fini>:
 800de88:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800de8a:	bf00      	nop
 800de8c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800de8e:	bc08      	pop	{r3}
 800de90:	469e      	mov	lr, r3
 800de92:	4770      	bx	lr
