
FreeFallVer2.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000188  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000dc44  08000190  08000190  00010190  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000006a0  0800ddd8  0800ddd8  0001ddd8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800e478  0800e478  000201f0  2**0
                  CONTENTS
  4 .ARM          00000008  0800e478  0800e478  0001e478  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800e480  0800e480  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800e480  0800e480  0001e480  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800e484  0800e484  0001e484  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  0800e488  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  000201f0  2**0
                  CONTENTS
 10 .bss          00000384  200001f0  200001f0  000201f0  2**2
                  ALLOC
 11 ._user_heap_stack 00000604  20000574  20000574  000201f0  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 13 .debug_info   000107ac  00000000  00000000  00020220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 0000271f  00000000  00000000  000309cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000fa8  00000000  00000000  000330f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_ranges 00000eb0  00000000  00000000  00034098  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  00022bb2  00000000  00000000  00034f48  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   000136fb  00000000  00000000  00057afa  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000cefeb  00000000  00000000  0006b1f5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .comment      00000050  00000000  00000000  0013a1e0  2**0
                  CONTENTS, READONLY
 21 .debug_frame  00005714  00000000  00000000  0013a230  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000190 <__do_global_dtors_aux>:
 8000190:	b510      	push	{r4, lr}
 8000192:	4c05      	ldr	r4, [pc, #20]	; (80001a8 <__do_global_dtors_aux+0x18>)
 8000194:	7823      	ldrb	r3, [r4, #0]
 8000196:	b933      	cbnz	r3, 80001a6 <__do_global_dtors_aux+0x16>
 8000198:	4b04      	ldr	r3, [pc, #16]	; (80001ac <__do_global_dtors_aux+0x1c>)
 800019a:	b113      	cbz	r3, 80001a2 <__do_global_dtors_aux+0x12>
 800019c:	4804      	ldr	r0, [pc, #16]	; (80001b0 <__do_global_dtors_aux+0x20>)
 800019e:	f3af 8000 	nop.w
 80001a2:	2301      	movs	r3, #1
 80001a4:	7023      	strb	r3, [r4, #0]
 80001a6:	bd10      	pop	{r4, pc}
 80001a8:	200001f0 	.word	0x200001f0
 80001ac:	00000000 	.word	0x00000000
 80001b0:	0800ddbc 	.word	0x0800ddbc

080001b4 <frame_dummy>:
 80001b4:	b508      	push	{r3, lr}
 80001b6:	4b03      	ldr	r3, [pc, #12]	; (80001c4 <frame_dummy+0x10>)
 80001b8:	b11b      	cbz	r3, 80001c2 <frame_dummy+0xe>
 80001ba:	4903      	ldr	r1, [pc, #12]	; (80001c8 <frame_dummy+0x14>)
 80001bc:	4803      	ldr	r0, [pc, #12]	; (80001cc <frame_dummy+0x18>)
 80001be:	f3af 8000 	nop.w
 80001c2:	bd08      	pop	{r3, pc}
 80001c4:	00000000 	.word	0x00000000
 80001c8:	200001f4 	.word	0x200001f4
 80001cc:	0800ddbc 	.word	0x0800ddbc

080001d0 <strlen>:
 80001d0:	4603      	mov	r3, r0
 80001d2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001d6:	2a00      	cmp	r2, #0
 80001d8:	d1fb      	bne.n	80001d2 <strlen+0x2>
 80001da:	1a18      	subs	r0, r3, r0
 80001dc:	3801      	subs	r0, #1
 80001de:	4770      	bx	lr

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	; 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <__aeabi_drsub>:
 8000280:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 8000284:	e002      	b.n	800028c <__adddf3>
 8000286:	bf00      	nop

08000288 <__aeabi_dsub>:
 8000288:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

0800028c <__adddf3>:
 800028c:	b530      	push	{r4, r5, lr}
 800028e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 8000292:	ea4f 0543 	mov.w	r5, r3, lsl #1
 8000296:	ea94 0f05 	teq	r4, r5
 800029a:	bf08      	it	eq
 800029c:	ea90 0f02 	teqeq	r0, r2
 80002a0:	bf1f      	itttt	ne
 80002a2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002a6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002aa:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002ae:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002b2:	f000 80e2 	beq.w	800047a <__adddf3+0x1ee>
 80002b6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ba:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002be:	bfb8      	it	lt
 80002c0:	426d      	neglt	r5, r5
 80002c2:	dd0c      	ble.n	80002de <__adddf3+0x52>
 80002c4:	442c      	add	r4, r5
 80002c6:	ea80 0202 	eor.w	r2, r0, r2
 80002ca:	ea81 0303 	eor.w	r3, r1, r3
 80002ce:	ea82 0000 	eor.w	r0, r2, r0
 80002d2:	ea83 0101 	eor.w	r1, r3, r1
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	2d36      	cmp	r5, #54	; 0x36
 80002e0:	bf88      	it	hi
 80002e2:	bd30      	pophi	{r4, r5, pc}
 80002e4:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 80002e8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002ec:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 80002f0:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 80002f4:	d002      	beq.n	80002fc <__adddf3+0x70>
 80002f6:	4240      	negs	r0, r0
 80002f8:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80002fc:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000300:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000304:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000308:	d002      	beq.n	8000310 <__adddf3+0x84>
 800030a:	4252      	negs	r2, r2
 800030c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000310:	ea94 0f05 	teq	r4, r5
 8000314:	f000 80a7 	beq.w	8000466 <__adddf3+0x1da>
 8000318:	f1a4 0401 	sub.w	r4, r4, #1
 800031c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000320:	db0d      	blt.n	800033e <__adddf3+0xb2>
 8000322:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000326:	fa22 f205 	lsr.w	r2, r2, r5
 800032a:	1880      	adds	r0, r0, r2
 800032c:	f141 0100 	adc.w	r1, r1, #0
 8000330:	fa03 f20e 	lsl.w	r2, r3, lr
 8000334:	1880      	adds	r0, r0, r2
 8000336:	fa43 f305 	asr.w	r3, r3, r5
 800033a:	4159      	adcs	r1, r3
 800033c:	e00e      	b.n	800035c <__adddf3+0xd0>
 800033e:	f1a5 0520 	sub.w	r5, r5, #32
 8000342:	f10e 0e20 	add.w	lr, lr, #32
 8000346:	2a01      	cmp	r2, #1
 8000348:	fa03 fc0e 	lsl.w	ip, r3, lr
 800034c:	bf28      	it	cs
 800034e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000352:	fa43 f305 	asr.w	r3, r3, r5
 8000356:	18c0      	adds	r0, r0, r3
 8000358:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800035c:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000360:	d507      	bpl.n	8000372 <__adddf3+0xe6>
 8000362:	f04f 0e00 	mov.w	lr, #0
 8000366:	f1dc 0c00 	rsbs	ip, ip, #0
 800036a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800036e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000372:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 8000376:	d31b      	bcc.n	80003b0 <__adddf3+0x124>
 8000378:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 800037c:	d30c      	bcc.n	8000398 <__adddf3+0x10c>
 800037e:	0849      	lsrs	r1, r1, #1
 8000380:	ea5f 0030 	movs.w	r0, r0, rrx
 8000384:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000388:	f104 0401 	add.w	r4, r4, #1
 800038c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 8000390:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 8000394:	f080 809a 	bcs.w	80004cc <__adddf3+0x240>
 8000398:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 800039c:	bf08      	it	eq
 800039e:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003a2:	f150 0000 	adcs.w	r0, r0, #0
 80003a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003aa:	ea41 0105 	orr.w	r1, r1, r5
 80003ae:	bd30      	pop	{r4, r5, pc}
 80003b0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003b4:	4140      	adcs	r0, r0
 80003b6:	eb41 0101 	adc.w	r1, r1, r1
 80003ba:	3c01      	subs	r4, #1
 80003bc:	bf28      	it	cs
 80003be:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 80003c2:	d2e9      	bcs.n	8000398 <__adddf3+0x10c>
 80003c4:	f091 0f00 	teq	r1, #0
 80003c8:	bf04      	itt	eq
 80003ca:	4601      	moveq	r1, r0
 80003cc:	2000      	moveq	r0, #0
 80003ce:	fab1 f381 	clz	r3, r1
 80003d2:	bf08      	it	eq
 80003d4:	3320      	addeq	r3, #32
 80003d6:	f1a3 030b 	sub.w	r3, r3, #11
 80003da:	f1b3 0220 	subs.w	r2, r3, #32
 80003de:	da0c      	bge.n	80003fa <__adddf3+0x16e>
 80003e0:	320c      	adds	r2, #12
 80003e2:	dd08      	ble.n	80003f6 <__adddf3+0x16a>
 80003e4:	f102 0c14 	add.w	ip, r2, #20
 80003e8:	f1c2 020c 	rsb	r2, r2, #12
 80003ec:	fa01 f00c 	lsl.w	r0, r1, ip
 80003f0:	fa21 f102 	lsr.w	r1, r1, r2
 80003f4:	e00c      	b.n	8000410 <__adddf3+0x184>
 80003f6:	f102 0214 	add.w	r2, r2, #20
 80003fa:	bfd8      	it	le
 80003fc:	f1c2 0c20 	rsble	ip, r2, #32
 8000400:	fa01 f102 	lsl.w	r1, r1, r2
 8000404:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000408:	bfdc      	itt	le
 800040a:	ea41 010c 	orrle.w	r1, r1, ip
 800040e:	4090      	lslle	r0, r2
 8000410:	1ae4      	subs	r4, r4, r3
 8000412:	bfa2      	ittt	ge
 8000414:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000418:	4329      	orrge	r1, r5
 800041a:	bd30      	popge	{r4, r5, pc}
 800041c:	ea6f 0404 	mvn.w	r4, r4
 8000420:	3c1f      	subs	r4, #31
 8000422:	da1c      	bge.n	800045e <__adddf3+0x1d2>
 8000424:	340c      	adds	r4, #12
 8000426:	dc0e      	bgt.n	8000446 <__adddf3+0x1ba>
 8000428:	f104 0414 	add.w	r4, r4, #20
 800042c:	f1c4 0220 	rsb	r2, r4, #32
 8000430:	fa20 f004 	lsr.w	r0, r0, r4
 8000434:	fa01 f302 	lsl.w	r3, r1, r2
 8000438:	ea40 0003 	orr.w	r0, r0, r3
 800043c:	fa21 f304 	lsr.w	r3, r1, r4
 8000440:	ea45 0103 	orr.w	r1, r5, r3
 8000444:	bd30      	pop	{r4, r5, pc}
 8000446:	f1c4 040c 	rsb	r4, r4, #12
 800044a:	f1c4 0220 	rsb	r2, r4, #32
 800044e:	fa20 f002 	lsr.w	r0, r0, r2
 8000452:	fa01 f304 	lsl.w	r3, r1, r4
 8000456:	ea40 0003 	orr.w	r0, r0, r3
 800045a:	4629      	mov	r1, r5
 800045c:	bd30      	pop	{r4, r5, pc}
 800045e:	fa21 f004 	lsr.w	r0, r1, r4
 8000462:	4629      	mov	r1, r5
 8000464:	bd30      	pop	{r4, r5, pc}
 8000466:	f094 0f00 	teq	r4, #0
 800046a:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 800046e:	bf06      	itte	eq
 8000470:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 8000474:	3401      	addeq	r4, #1
 8000476:	3d01      	subne	r5, #1
 8000478:	e74e      	b.n	8000318 <__adddf3+0x8c>
 800047a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800047e:	bf18      	it	ne
 8000480:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000484:	d029      	beq.n	80004da <__adddf3+0x24e>
 8000486:	ea94 0f05 	teq	r4, r5
 800048a:	bf08      	it	eq
 800048c:	ea90 0f02 	teqeq	r0, r2
 8000490:	d005      	beq.n	800049e <__adddf3+0x212>
 8000492:	ea54 0c00 	orrs.w	ip, r4, r0
 8000496:	bf04      	itt	eq
 8000498:	4619      	moveq	r1, r3
 800049a:	4610      	moveq	r0, r2
 800049c:	bd30      	pop	{r4, r5, pc}
 800049e:	ea91 0f03 	teq	r1, r3
 80004a2:	bf1e      	ittt	ne
 80004a4:	2100      	movne	r1, #0
 80004a6:	2000      	movne	r0, #0
 80004a8:	bd30      	popne	{r4, r5, pc}
 80004aa:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004ae:	d105      	bne.n	80004bc <__adddf3+0x230>
 80004b0:	0040      	lsls	r0, r0, #1
 80004b2:	4149      	adcs	r1, r1
 80004b4:	bf28      	it	cs
 80004b6:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 80004ba:	bd30      	pop	{r4, r5, pc}
 80004bc:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 80004c0:	bf3c      	itt	cc
 80004c2:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 80004c6:	bd30      	popcc	{r4, r5, pc}
 80004c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004cc:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 80004d0:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80004d4:	f04f 0000 	mov.w	r0, #0
 80004d8:	bd30      	pop	{r4, r5, pc}
 80004da:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004de:	bf1a      	itte	ne
 80004e0:	4619      	movne	r1, r3
 80004e2:	4610      	movne	r0, r2
 80004e4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004e8:	bf1c      	itt	ne
 80004ea:	460b      	movne	r3, r1
 80004ec:	4602      	movne	r2, r0
 80004ee:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80004f2:	bf06      	itte	eq
 80004f4:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 80004f8:	ea91 0f03 	teqeq	r1, r3
 80004fc:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000500:	bd30      	pop	{r4, r5, pc}
 8000502:	bf00      	nop

08000504 <__aeabi_ui2d>:
 8000504:	f090 0f00 	teq	r0, #0
 8000508:	bf04      	itt	eq
 800050a:	2100      	moveq	r1, #0
 800050c:	4770      	bxeq	lr
 800050e:	b530      	push	{r4, r5, lr}
 8000510:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000514:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000518:	f04f 0500 	mov.w	r5, #0
 800051c:	f04f 0100 	mov.w	r1, #0
 8000520:	e750      	b.n	80003c4 <__adddf3+0x138>
 8000522:	bf00      	nop

08000524 <__aeabi_i2d>:
 8000524:	f090 0f00 	teq	r0, #0
 8000528:	bf04      	itt	eq
 800052a:	2100      	moveq	r1, #0
 800052c:	4770      	bxeq	lr
 800052e:	b530      	push	{r4, r5, lr}
 8000530:	f44f 6480 	mov.w	r4, #1024	; 0x400
 8000534:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000538:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 800053c:	bf48      	it	mi
 800053e:	4240      	negmi	r0, r0
 8000540:	f04f 0100 	mov.w	r1, #0
 8000544:	e73e      	b.n	80003c4 <__adddf3+0x138>
 8000546:	bf00      	nop

08000548 <__aeabi_f2d>:
 8000548:	0042      	lsls	r2, r0, #1
 800054a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800054e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000552:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000556:	bf1f      	itttt	ne
 8000558:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 800055c:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 8000560:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 8000564:	4770      	bxne	lr
 8000566:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 800056a:	bf08      	it	eq
 800056c:	4770      	bxeq	lr
 800056e:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 8000572:	bf04      	itt	eq
 8000574:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 8000578:	4770      	bxeq	lr
 800057a:	b530      	push	{r4, r5, lr}
 800057c:	f44f 7460 	mov.w	r4, #896	; 0x380
 8000580:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000584:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000588:	e71c      	b.n	80003c4 <__adddf3+0x138>
 800058a:	bf00      	nop

0800058c <__aeabi_ul2d>:
 800058c:	ea50 0201 	orrs.w	r2, r0, r1
 8000590:	bf08      	it	eq
 8000592:	4770      	bxeq	lr
 8000594:	b530      	push	{r4, r5, lr}
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	e00a      	b.n	80005b2 <__aeabi_l2d+0x16>

0800059c <__aeabi_l2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005aa:	d502      	bpl.n	80005b2 <__aeabi_l2d+0x16>
 80005ac:	4240      	negs	r0, r0
 80005ae:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005b2:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005b6:	f104 0432 	add.w	r4, r4, #50	; 0x32
 80005ba:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005be:	f43f aed8 	beq.w	8000372 <__adddf3+0xe6>
 80005c2:	f04f 0203 	mov.w	r2, #3
 80005c6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005ca:	bf18      	it	ne
 80005cc:	3203      	addne	r2, #3
 80005ce:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005d2:	bf18      	it	ne
 80005d4:	3203      	addne	r2, #3
 80005d6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005da:	f1c2 0320 	rsb	r3, r2, #32
 80005de:	fa00 fc03 	lsl.w	ip, r0, r3
 80005e2:	fa20 f002 	lsr.w	r0, r0, r2
 80005e6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005ea:	ea40 000e 	orr.w	r0, r0, lr
 80005ee:	fa21 f102 	lsr.w	r1, r1, r2
 80005f2:	4414      	add	r4, r2
 80005f4:	e6bd      	b.n	8000372 <__adddf3+0xe6>
 80005f6:	bf00      	nop

080005f8 <__aeabi_dmul>:
 80005f8:	b570      	push	{r4, r5, r6, lr}
 80005fa:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80005fe:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000602:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000606:	bf1d      	ittte	ne
 8000608:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800060c:	ea94 0f0c 	teqne	r4, ip
 8000610:	ea95 0f0c 	teqne	r5, ip
 8000614:	f000 f8de 	bleq	80007d4 <__aeabi_dmul+0x1dc>
 8000618:	442c      	add	r4, r5
 800061a:	ea81 0603 	eor.w	r6, r1, r3
 800061e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000622:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000626:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800062a:	bf18      	it	ne
 800062c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000630:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000634:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000638:	d038      	beq.n	80006ac <__aeabi_dmul+0xb4>
 800063a:	fba0 ce02 	umull	ip, lr, r0, r2
 800063e:	f04f 0500 	mov.w	r5, #0
 8000642:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000646:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 800064a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800064e:	f04f 0600 	mov.w	r6, #0
 8000652:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000656:	f09c 0f00 	teq	ip, #0
 800065a:	bf18      	it	ne
 800065c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000660:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 8000664:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 8000668:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 800066c:	d204      	bcs.n	8000678 <__aeabi_dmul+0x80>
 800066e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000672:	416d      	adcs	r5, r5
 8000674:	eb46 0606 	adc.w	r6, r6, r6
 8000678:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800067c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000680:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000684:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000688:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800068c:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 8000690:	bf88      	it	hi
 8000692:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000696:	d81e      	bhi.n	80006d6 <__aeabi_dmul+0xde>
 8000698:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 800069c:	bf08      	it	eq
 800069e:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006a2:	f150 0000 	adcs.w	r0, r0, #0
 80006a6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006b0:	ea46 0101 	orr.w	r1, r6, r1
 80006b4:	ea40 0002 	orr.w	r0, r0, r2
 80006b8:	ea81 0103 	eor.w	r1, r1, r3
 80006bc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006c0:	bfc2      	ittt	gt
 80006c2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006c6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006ca:	bd70      	popgt	{r4, r5, r6, pc}
 80006cc:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80006d0:	f04f 0e00 	mov.w	lr, #0
 80006d4:	3c01      	subs	r4, #1
 80006d6:	f300 80ab 	bgt.w	8000830 <__aeabi_dmul+0x238>
 80006da:	f114 0f36 	cmn.w	r4, #54	; 0x36
 80006de:	bfde      	ittt	le
 80006e0:	2000      	movle	r0, #0
 80006e2:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 80006e6:	bd70      	pople	{r4, r5, r6, pc}
 80006e8:	f1c4 0400 	rsb	r4, r4, #0
 80006ec:	3c20      	subs	r4, #32
 80006ee:	da35      	bge.n	800075c <__aeabi_dmul+0x164>
 80006f0:	340c      	adds	r4, #12
 80006f2:	dc1b      	bgt.n	800072c <__aeabi_dmul+0x134>
 80006f4:	f104 0414 	add.w	r4, r4, #20
 80006f8:	f1c4 0520 	rsb	r5, r4, #32
 80006fc:	fa00 f305 	lsl.w	r3, r0, r5
 8000700:	fa20 f004 	lsr.w	r0, r0, r4
 8000704:	fa01 f205 	lsl.w	r2, r1, r5
 8000708:	ea40 0002 	orr.w	r0, r0, r2
 800070c:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000710:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 8000714:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000718:	fa21 f604 	lsr.w	r6, r1, r4
 800071c:	eb42 0106 	adc.w	r1, r2, r6
 8000720:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000724:	bf08      	it	eq
 8000726:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800072a:	bd70      	pop	{r4, r5, r6, pc}
 800072c:	f1c4 040c 	rsb	r4, r4, #12
 8000730:	f1c4 0520 	rsb	r5, r4, #32
 8000734:	fa00 f304 	lsl.w	r3, r0, r4
 8000738:	fa20 f005 	lsr.w	r0, r0, r5
 800073c:	fa01 f204 	lsl.w	r2, r1, r4
 8000740:	ea40 0002 	orr.w	r0, r0, r2
 8000744:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000748:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800074c:	f141 0100 	adc.w	r1, r1, #0
 8000750:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000754:	bf08      	it	eq
 8000756:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800075a:	bd70      	pop	{r4, r5, r6, pc}
 800075c:	f1c4 0520 	rsb	r5, r4, #32
 8000760:	fa00 f205 	lsl.w	r2, r0, r5
 8000764:	ea4e 0e02 	orr.w	lr, lr, r2
 8000768:	fa20 f304 	lsr.w	r3, r0, r4
 800076c:	fa01 f205 	lsl.w	r2, r1, r5
 8000770:	ea43 0302 	orr.w	r3, r3, r2
 8000774:	fa21 f004 	lsr.w	r0, r1, r4
 8000778:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800077c:	fa21 f204 	lsr.w	r2, r1, r4
 8000780:	ea20 0002 	bic.w	r0, r0, r2
 8000784:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000788:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800078c:	bf08      	it	eq
 800078e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000792:	bd70      	pop	{r4, r5, r6, pc}
 8000794:	f094 0f00 	teq	r4, #0
 8000798:	d10f      	bne.n	80007ba <__aeabi_dmul+0x1c2>
 800079a:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 800079e:	0040      	lsls	r0, r0, #1
 80007a0:	eb41 0101 	adc.w	r1, r1, r1
 80007a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007a8:	bf08      	it	eq
 80007aa:	3c01      	subeq	r4, #1
 80007ac:	d0f7      	beq.n	800079e <__aeabi_dmul+0x1a6>
 80007ae:	ea41 0106 	orr.w	r1, r1, r6
 80007b2:	f095 0f00 	teq	r5, #0
 80007b6:	bf18      	it	ne
 80007b8:	4770      	bxne	lr
 80007ba:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 80007be:	0052      	lsls	r2, r2, #1
 80007c0:	eb43 0303 	adc.w	r3, r3, r3
 80007c4:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 80007c8:	bf08      	it	eq
 80007ca:	3d01      	subeq	r5, #1
 80007cc:	d0f7      	beq.n	80007be <__aeabi_dmul+0x1c6>
 80007ce:	ea43 0306 	orr.w	r3, r3, r6
 80007d2:	4770      	bx	lr
 80007d4:	ea94 0f0c 	teq	r4, ip
 80007d8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007dc:	bf18      	it	ne
 80007de:	ea95 0f0c 	teqne	r5, ip
 80007e2:	d00c      	beq.n	80007fe <__aeabi_dmul+0x206>
 80007e4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007e8:	bf18      	it	ne
 80007ea:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007ee:	d1d1      	bne.n	8000794 <__aeabi_dmul+0x19c>
 80007f0:	ea81 0103 	eor.w	r1, r1, r3
 80007f4:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007f8:	f04f 0000 	mov.w	r0, #0
 80007fc:	bd70      	pop	{r4, r5, r6, pc}
 80007fe:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000802:	bf06      	itte	eq
 8000804:	4610      	moveq	r0, r2
 8000806:	4619      	moveq	r1, r3
 8000808:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800080c:	d019      	beq.n	8000842 <__aeabi_dmul+0x24a>
 800080e:	ea94 0f0c 	teq	r4, ip
 8000812:	d102      	bne.n	800081a <__aeabi_dmul+0x222>
 8000814:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000818:	d113      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800081a:	ea95 0f0c 	teq	r5, ip
 800081e:	d105      	bne.n	800082c <__aeabi_dmul+0x234>
 8000820:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000824:	bf1c      	itt	ne
 8000826:	4610      	movne	r0, r2
 8000828:	4619      	movne	r1, r3
 800082a:	d10a      	bne.n	8000842 <__aeabi_dmul+0x24a>
 800082c:	ea81 0103 	eor.w	r1, r1, r3
 8000830:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000834:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000838:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800083c:	f04f 0000 	mov.w	r0, #0
 8000840:	bd70      	pop	{r4, r5, r6, pc}
 8000842:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000846:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 800084a:	bd70      	pop	{r4, r5, r6, pc}

0800084c <__aeabi_ddiv>:
 800084c:	b570      	push	{r4, r5, r6, lr}
 800084e:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000852:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 8000856:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800085a:	bf1d      	ittte	ne
 800085c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000860:	ea94 0f0c 	teqne	r4, ip
 8000864:	ea95 0f0c 	teqne	r5, ip
 8000868:	f000 f8a7 	bleq	80009ba <__aeabi_ddiv+0x16e>
 800086c:	eba4 0405 	sub.w	r4, r4, r5
 8000870:	ea81 0e03 	eor.w	lr, r1, r3
 8000874:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000878:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800087c:	f000 8088 	beq.w	8000990 <__aeabi_ddiv+0x144>
 8000880:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000884:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 8000888:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800088c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 8000890:	ea4f 2202 	mov.w	r2, r2, lsl #8
 8000894:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 8000898:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 800089c:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008a0:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008a4:	429d      	cmp	r5, r3
 80008a6:	bf08      	it	eq
 80008a8:	4296      	cmpeq	r6, r2
 80008aa:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008ae:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008b2:	d202      	bcs.n	80008ba <__aeabi_ddiv+0x6e>
 80008b4:	085b      	lsrs	r3, r3, #1
 80008b6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ba:	1ab6      	subs	r6, r6, r2
 80008bc:	eb65 0503 	sbc.w	r5, r5, r3
 80008c0:	085b      	lsrs	r3, r3, #1
 80008c2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008c6:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 80008ca:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 80008ce:	ebb6 0e02 	subs.w	lr, r6, r2
 80008d2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008d6:	bf22      	ittt	cs
 80008d8:	1ab6      	subcs	r6, r6, r2
 80008da:	4675      	movcs	r5, lr
 80008dc:	ea40 000c 	orrcs.w	r0, r0, ip
 80008e0:	085b      	lsrs	r3, r3, #1
 80008e2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008e6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008ea:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008ee:	bf22      	ittt	cs
 80008f0:	1ab6      	subcs	r6, r6, r2
 80008f2:	4675      	movcs	r5, lr
 80008f4:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 80008f8:	085b      	lsrs	r3, r3, #1
 80008fa:	ea4f 0232 	mov.w	r2, r2, rrx
 80008fe:	ebb6 0e02 	subs.w	lr, r6, r2
 8000902:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000906:	bf22      	ittt	cs
 8000908:	1ab6      	subcs	r6, r6, r2
 800090a:	4675      	movcs	r5, lr
 800090c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000910:	085b      	lsrs	r3, r3, #1
 8000912:	ea4f 0232 	mov.w	r2, r2, rrx
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000928:	ea55 0e06 	orrs.w	lr, r5, r6
 800092c:	d018      	beq.n	8000960 <__aeabi_ddiv+0x114>
 800092e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000932:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000936:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800093a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800093e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000942:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000946:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800094a:	d1c0      	bne.n	80008ce <__aeabi_ddiv+0x82>
 800094c:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000950:	d10b      	bne.n	800096a <__aeabi_ddiv+0x11e>
 8000952:	ea41 0100 	orr.w	r1, r1, r0
 8000956:	f04f 0000 	mov.w	r0, #0
 800095a:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 800095e:	e7b6      	b.n	80008ce <__aeabi_ddiv+0x82>
 8000960:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000964:	bf04      	itt	eq
 8000966:	4301      	orreq	r1, r0
 8000968:	2000      	moveq	r0, #0
 800096a:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 800096e:	bf88      	it	hi
 8000970:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 8000974:	f63f aeaf 	bhi.w	80006d6 <__aeabi_dmul+0xde>
 8000978:	ebb5 0c03 	subs.w	ip, r5, r3
 800097c:	bf04      	itt	eq
 800097e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000982:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000986:	f150 0000 	adcs.w	r0, r0, #0
 800098a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800098e:	bd70      	pop	{r4, r5, r6, pc}
 8000990:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 8000994:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 8000998:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 800099c:	bfc2      	ittt	gt
 800099e:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009a2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009a6:	bd70      	popgt	{r4, r5, r6, pc}
 80009a8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009ac:	f04f 0e00 	mov.w	lr, #0
 80009b0:	3c01      	subs	r4, #1
 80009b2:	e690      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009b4:	ea45 0e06 	orr.w	lr, r5, r6
 80009b8:	e68d      	b.n	80006d6 <__aeabi_dmul+0xde>
 80009ba:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009be:	ea94 0f0c 	teq	r4, ip
 80009c2:	bf08      	it	eq
 80009c4:	ea95 0f0c 	teqeq	r5, ip
 80009c8:	f43f af3b 	beq.w	8000842 <__aeabi_dmul+0x24a>
 80009cc:	ea94 0f0c 	teq	r4, ip
 80009d0:	d10a      	bne.n	80009e8 <__aeabi_ddiv+0x19c>
 80009d2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009d6:	f47f af34 	bne.w	8000842 <__aeabi_dmul+0x24a>
 80009da:	ea95 0f0c 	teq	r5, ip
 80009de:	f47f af25 	bne.w	800082c <__aeabi_dmul+0x234>
 80009e2:	4610      	mov	r0, r2
 80009e4:	4619      	mov	r1, r3
 80009e6:	e72c      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009e8:	ea95 0f0c 	teq	r5, ip
 80009ec:	d106      	bne.n	80009fc <__aeabi_ddiv+0x1b0>
 80009ee:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80009f2:	f43f aefd 	beq.w	80007f0 <__aeabi_dmul+0x1f8>
 80009f6:	4610      	mov	r0, r2
 80009f8:	4619      	mov	r1, r3
 80009fa:	e722      	b.n	8000842 <__aeabi_dmul+0x24a>
 80009fc:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a00:	bf18      	it	ne
 8000a02:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a06:	f47f aec5 	bne.w	8000794 <__aeabi_dmul+0x19c>
 8000a0a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a0e:	f47f af0d 	bne.w	800082c <__aeabi_dmul+0x234>
 8000a12:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a16:	f47f aeeb 	bne.w	80007f0 <__aeabi_dmul+0x1f8>
 8000a1a:	e712      	b.n	8000842 <__aeabi_dmul+0x24a>

08000a1c <__gedf2>:
 8000a1c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a20:	e006      	b.n	8000a30 <__cmpdf2+0x4>
 8000a22:	bf00      	nop

08000a24 <__ledf2>:
 8000a24:	f04f 0c01 	mov.w	ip, #1
 8000a28:	e002      	b.n	8000a30 <__cmpdf2+0x4>
 8000a2a:	bf00      	nop

08000a2c <__cmpdf2>:
 8000a2c:	f04f 0c01 	mov.w	ip, #1
 8000a30:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a34:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a38:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a40:	bf18      	it	ne
 8000a42:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a46:	d01b      	beq.n	8000a80 <__cmpdf2+0x54>
 8000a48:	b001      	add	sp, #4
 8000a4a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a4e:	bf0c      	ite	eq
 8000a50:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a54:	ea91 0f03 	teqne	r1, r3
 8000a58:	bf02      	ittt	eq
 8000a5a:	ea90 0f02 	teqeq	r0, r2
 8000a5e:	2000      	moveq	r0, #0
 8000a60:	4770      	bxeq	lr
 8000a62:	f110 0f00 	cmn.w	r0, #0
 8000a66:	ea91 0f03 	teq	r1, r3
 8000a6a:	bf58      	it	pl
 8000a6c:	4299      	cmppl	r1, r3
 8000a6e:	bf08      	it	eq
 8000a70:	4290      	cmpeq	r0, r2
 8000a72:	bf2c      	ite	cs
 8000a74:	17d8      	asrcs	r0, r3, #31
 8000a76:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a7a:	f040 0001 	orr.w	r0, r0, #1
 8000a7e:	4770      	bx	lr
 8000a80:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a84:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a88:	d102      	bne.n	8000a90 <__cmpdf2+0x64>
 8000a8a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a8e:	d107      	bne.n	8000aa0 <__cmpdf2+0x74>
 8000a90:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d1d6      	bne.n	8000a48 <__cmpdf2+0x1c>
 8000a9a:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000a9e:	d0d3      	beq.n	8000a48 <__cmpdf2+0x1c>
 8000aa0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aa4:	4770      	bx	lr
 8000aa6:	bf00      	nop

08000aa8 <__aeabi_cdrcmple>:
 8000aa8:	4684      	mov	ip, r0
 8000aaa:	4610      	mov	r0, r2
 8000aac:	4662      	mov	r2, ip
 8000aae:	468c      	mov	ip, r1
 8000ab0:	4619      	mov	r1, r3
 8000ab2:	4663      	mov	r3, ip
 8000ab4:	e000      	b.n	8000ab8 <__aeabi_cdcmpeq>
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdcmpeq>:
 8000ab8:	b501      	push	{r0, lr}
 8000aba:	f7ff ffb7 	bl	8000a2c <__cmpdf2>
 8000abe:	2800      	cmp	r0, #0
 8000ac0:	bf48      	it	mi
 8000ac2:	f110 0f00 	cmnmi.w	r0, #0
 8000ac6:	bd01      	pop	{r0, pc}

08000ac8 <__aeabi_dcmpeq>:
 8000ac8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000acc:	f7ff fff4 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ad0:	bf0c      	ite	eq
 8000ad2:	2001      	moveq	r0, #1
 8000ad4:	2000      	movne	r0, #0
 8000ad6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000ada:	bf00      	nop

08000adc <__aeabi_dcmplt>:
 8000adc:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000ae0:	f7ff ffea 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000ae4:	bf34      	ite	cc
 8000ae6:	2001      	movcc	r0, #1
 8000ae8:	2000      	movcs	r0, #0
 8000aea:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aee:	bf00      	nop

08000af0 <__aeabi_dcmple>:
 8000af0:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af4:	f7ff ffe0 	bl	8000ab8 <__aeabi_cdcmpeq>
 8000af8:	bf94      	ite	ls
 8000afa:	2001      	movls	r0, #1
 8000afc:	2000      	movhi	r0, #0
 8000afe:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b02:	bf00      	nop

08000b04 <__aeabi_dcmpge>:
 8000b04:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b08:	f7ff ffce 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b0c:	bf94      	ite	ls
 8000b0e:	2001      	movls	r0, #1
 8000b10:	2000      	movhi	r0, #0
 8000b12:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b16:	bf00      	nop

08000b18 <__aeabi_dcmpgt>:
 8000b18:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b1c:	f7ff ffc4 	bl	8000aa8 <__aeabi_cdrcmple>
 8000b20:	bf34      	ite	cc
 8000b22:	2001      	movcc	r0, #1
 8000b24:	2000      	movcs	r0, #0
 8000b26:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b2a:	bf00      	nop

08000b2c <__aeabi_dcmpun>:
 8000b2c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b30:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b34:	d102      	bne.n	8000b3c <__aeabi_dcmpun+0x10>
 8000b36:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b3a:	d10a      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b3c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x20>
 8000b46:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b4a:	d102      	bne.n	8000b52 <__aeabi_dcmpun+0x26>
 8000b4c:	f04f 0000 	mov.w	r0, #0
 8000b50:	4770      	bx	lr
 8000b52:	f04f 0001 	mov.w	r0, #1
 8000b56:	4770      	bx	lr

08000b58 <__aeabi_d2iz>:
 8000b58:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b5c:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000b60:	d215      	bcs.n	8000b8e <__aeabi_d2iz+0x36>
 8000b62:	d511      	bpl.n	8000b88 <__aeabi_d2iz+0x30>
 8000b64:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000b68:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b6c:	d912      	bls.n	8000b94 <__aeabi_d2iz+0x3c>
 8000b6e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b72:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000b76:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b7a:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000b7e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b82:	bf18      	it	ne
 8000b84:	4240      	negne	r0, r0
 8000b86:	4770      	bx	lr
 8000b88:	f04f 0000 	mov.w	r0, #0
 8000b8c:	4770      	bx	lr
 8000b8e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000b92:	d105      	bne.n	8000ba0 <__aeabi_d2iz+0x48>
 8000b94:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000b98:	bf08      	it	eq
 8000b9a:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000b9e:	4770      	bx	lr
 8000ba0:	f04f 0000 	mov.w	r0, #0
 8000ba4:	4770      	bx	lr
 8000ba6:	bf00      	nop

08000ba8 <__aeabi_d2uiz>:
 8000ba8:	004a      	lsls	r2, r1, #1
 8000baa:	d211      	bcs.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bac:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000bb0:	d211      	bcs.n	8000bd6 <__aeabi_d2uiz+0x2e>
 8000bb2:	d50d      	bpl.n	8000bd0 <__aeabi_d2uiz+0x28>
 8000bb4:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bbc:	d40e      	bmi.n	8000bdc <__aeabi_d2uiz+0x34>
 8000bbe:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bc2:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bc6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bca:	fa23 f002 	lsr.w	r0, r3, r2
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d102      	bne.n	8000be2 <__aeabi_d2uiz+0x3a>
 8000bdc:	f04f 30ff 	mov.w	r0, #4294967295
 8000be0:	4770      	bx	lr
 8000be2:	f04f 0000 	mov.w	r0, #0
 8000be6:	4770      	bx	lr

08000be8 <__aeabi_d2f>:
 8000be8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bec:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000bf0:	bf24      	itt	cs
 8000bf2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000bf6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000bfa:	d90d      	bls.n	8000c18 <__aeabi_d2f+0x30>
 8000bfc:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000c00:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c04:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c08:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000c0c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c10:	bf08      	it	eq
 8000c12:	f020 0001 	biceq.w	r0, r0, #1
 8000c16:	4770      	bx	lr
 8000c18:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000c1c:	d121      	bne.n	8000c62 <__aeabi_d2f+0x7a>
 8000c1e:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000c22:	bfbc      	itt	lt
 8000c24:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000c28:	4770      	bxlt	lr
 8000c2a:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000c2e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c32:	f1c2 0218 	rsb	r2, r2, #24
 8000c36:	f1c2 0c20 	rsb	ip, r2, #32
 8000c3a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c3e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c42:	bf18      	it	ne
 8000c44:	f040 0001 	orrne.w	r0, r0, #1
 8000c48:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c4c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c50:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c54:	ea40 000c 	orr.w	r0, r0, ip
 8000c58:	fa23 f302 	lsr.w	r3, r3, r2
 8000c5c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c60:	e7cc      	b.n	8000bfc <__aeabi_d2f+0x14>
 8000c62:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c66:	d107      	bne.n	8000c78 <__aeabi_d2f+0x90>
 8000c68:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c6c:	bf1e      	ittt	ne
 8000c6e:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000c72:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000c76:	4770      	bxne	lr
 8000c78:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000c7c:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000c80:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop

08000c88 <__aeabi_uldivmod>:
 8000c88:	b953      	cbnz	r3, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8a:	b94a      	cbnz	r2, 8000ca0 <__aeabi_uldivmod+0x18>
 8000c8c:	2900      	cmp	r1, #0
 8000c8e:	bf08      	it	eq
 8000c90:	2800      	cmpeq	r0, #0
 8000c92:	bf1c      	itt	ne
 8000c94:	f04f 31ff 	movne.w	r1, #4294967295
 8000c98:	f04f 30ff 	movne.w	r0, #4294967295
 8000c9c:	f000 b9aa 	b.w	8000ff4 <__aeabi_idiv0>
 8000ca0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000ca4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000ca8:	f000 f83c 	bl	8000d24 <__udivmoddi4>
 8000cac:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cb4:	b004      	add	sp, #16
 8000cb6:	4770      	bx	lr

08000cb8 <__aeabi_d2lz>:
 8000cb8:	b538      	push	{r3, r4, r5, lr}
 8000cba:	2200      	movs	r2, #0
 8000cbc:	2300      	movs	r3, #0
 8000cbe:	4604      	mov	r4, r0
 8000cc0:	460d      	mov	r5, r1
 8000cc2:	f7ff ff0b 	bl	8000adc <__aeabi_dcmplt>
 8000cc6:	b928      	cbnz	r0, 8000cd4 <__aeabi_d2lz+0x1c>
 8000cc8:	4620      	mov	r0, r4
 8000cca:	4629      	mov	r1, r5
 8000ccc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000cd0:	f000 b80a 	b.w	8000ce8 <__aeabi_d2ulz>
 8000cd4:	4620      	mov	r0, r4
 8000cd6:	f105 4100 	add.w	r1, r5, #2147483648	; 0x80000000
 8000cda:	f000 f805 	bl	8000ce8 <__aeabi_d2ulz>
 8000cde:	4240      	negs	r0, r0
 8000ce0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000ce4:	bd38      	pop	{r3, r4, r5, pc}
 8000ce6:	bf00      	nop

08000ce8 <__aeabi_d2ulz>:
 8000ce8:	b5d0      	push	{r4, r6, r7, lr}
 8000cea:	4b0c      	ldr	r3, [pc, #48]	; (8000d1c <__aeabi_d2ulz+0x34>)
 8000cec:	2200      	movs	r2, #0
 8000cee:	4606      	mov	r6, r0
 8000cf0:	460f      	mov	r7, r1
 8000cf2:	f7ff fc81 	bl	80005f8 <__aeabi_dmul>
 8000cf6:	f7ff ff57 	bl	8000ba8 <__aeabi_d2uiz>
 8000cfa:	4604      	mov	r4, r0
 8000cfc:	f7ff fc02 	bl	8000504 <__aeabi_ui2d>
 8000d00:	4b07      	ldr	r3, [pc, #28]	; (8000d20 <__aeabi_d2ulz+0x38>)
 8000d02:	2200      	movs	r2, #0
 8000d04:	f7ff fc78 	bl	80005f8 <__aeabi_dmul>
 8000d08:	4602      	mov	r2, r0
 8000d0a:	460b      	mov	r3, r1
 8000d0c:	4630      	mov	r0, r6
 8000d0e:	4639      	mov	r1, r7
 8000d10:	f7ff faba 	bl	8000288 <__aeabi_dsub>
 8000d14:	f7ff ff48 	bl	8000ba8 <__aeabi_d2uiz>
 8000d18:	4621      	mov	r1, r4
 8000d1a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d1c:	3df00000 	.word	0x3df00000
 8000d20:	41f00000 	.word	0x41f00000

08000d24 <__udivmoddi4>:
 8000d24:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d28:	9d08      	ldr	r5, [sp, #32]
 8000d2a:	4604      	mov	r4, r0
 8000d2c:	468e      	mov	lr, r1
 8000d2e:	2b00      	cmp	r3, #0
 8000d30:	d14d      	bne.n	8000dce <__udivmoddi4+0xaa>
 8000d32:	428a      	cmp	r2, r1
 8000d34:	4694      	mov	ip, r2
 8000d36:	d969      	bls.n	8000e0c <__udivmoddi4+0xe8>
 8000d38:	fab2 f282 	clz	r2, r2
 8000d3c:	b152      	cbz	r2, 8000d54 <__udivmoddi4+0x30>
 8000d3e:	fa01 f302 	lsl.w	r3, r1, r2
 8000d42:	f1c2 0120 	rsb	r1, r2, #32
 8000d46:	fa20 f101 	lsr.w	r1, r0, r1
 8000d4a:	fa0c fc02 	lsl.w	ip, ip, r2
 8000d4e:	ea41 0e03 	orr.w	lr, r1, r3
 8000d52:	4094      	lsls	r4, r2
 8000d54:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d58:	0c21      	lsrs	r1, r4, #16
 8000d5a:	fbbe f6f8 	udiv	r6, lr, r8
 8000d5e:	fa1f f78c 	uxth.w	r7, ip
 8000d62:	fb08 e316 	mls	r3, r8, r6, lr
 8000d66:	ea41 4303 	orr.w	r3, r1, r3, lsl #16
 8000d6a:	fb06 f107 	mul.w	r1, r6, r7
 8000d6e:	4299      	cmp	r1, r3
 8000d70:	d90a      	bls.n	8000d88 <__udivmoddi4+0x64>
 8000d72:	eb1c 0303 	adds.w	r3, ip, r3
 8000d76:	f106 30ff 	add.w	r0, r6, #4294967295
 8000d7a:	f080 811f 	bcs.w	8000fbc <__udivmoddi4+0x298>
 8000d7e:	4299      	cmp	r1, r3
 8000d80:	f240 811c 	bls.w	8000fbc <__udivmoddi4+0x298>
 8000d84:	3e02      	subs	r6, #2
 8000d86:	4463      	add	r3, ip
 8000d88:	1a5b      	subs	r3, r3, r1
 8000d8a:	b2a4      	uxth	r4, r4
 8000d8c:	fbb3 f0f8 	udiv	r0, r3, r8
 8000d90:	fb08 3310 	mls	r3, r8, r0, r3
 8000d94:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000d98:	fb00 f707 	mul.w	r7, r0, r7
 8000d9c:	42a7      	cmp	r7, r4
 8000d9e:	d90a      	bls.n	8000db6 <__udivmoddi4+0x92>
 8000da0:	eb1c 0404 	adds.w	r4, ip, r4
 8000da4:	f100 33ff 	add.w	r3, r0, #4294967295
 8000da8:	f080 810a 	bcs.w	8000fc0 <__udivmoddi4+0x29c>
 8000dac:	42a7      	cmp	r7, r4
 8000dae:	f240 8107 	bls.w	8000fc0 <__udivmoddi4+0x29c>
 8000db2:	4464      	add	r4, ip
 8000db4:	3802      	subs	r0, #2
 8000db6:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dba:	1be4      	subs	r4, r4, r7
 8000dbc:	2600      	movs	r6, #0
 8000dbe:	b11d      	cbz	r5, 8000dc8 <__udivmoddi4+0xa4>
 8000dc0:	40d4      	lsrs	r4, r2
 8000dc2:	2300      	movs	r3, #0
 8000dc4:	e9c5 4300 	strd	r4, r3, [r5]
 8000dc8:	4631      	mov	r1, r6
 8000dca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dce:	428b      	cmp	r3, r1
 8000dd0:	d909      	bls.n	8000de6 <__udivmoddi4+0xc2>
 8000dd2:	2d00      	cmp	r5, #0
 8000dd4:	f000 80ef 	beq.w	8000fb6 <__udivmoddi4+0x292>
 8000dd8:	2600      	movs	r6, #0
 8000dda:	e9c5 0100 	strd	r0, r1, [r5]
 8000dde:	4630      	mov	r0, r6
 8000de0:	4631      	mov	r1, r6
 8000de2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000de6:	fab3 f683 	clz	r6, r3
 8000dea:	2e00      	cmp	r6, #0
 8000dec:	d14a      	bne.n	8000e84 <__udivmoddi4+0x160>
 8000dee:	428b      	cmp	r3, r1
 8000df0:	d302      	bcc.n	8000df8 <__udivmoddi4+0xd4>
 8000df2:	4282      	cmp	r2, r0
 8000df4:	f200 80f9 	bhi.w	8000fea <__udivmoddi4+0x2c6>
 8000df8:	1a84      	subs	r4, r0, r2
 8000dfa:	eb61 0303 	sbc.w	r3, r1, r3
 8000dfe:	2001      	movs	r0, #1
 8000e00:	469e      	mov	lr, r3
 8000e02:	2d00      	cmp	r5, #0
 8000e04:	d0e0      	beq.n	8000dc8 <__udivmoddi4+0xa4>
 8000e06:	e9c5 4e00 	strd	r4, lr, [r5]
 8000e0a:	e7dd      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000e0c:	b902      	cbnz	r2, 8000e10 <__udivmoddi4+0xec>
 8000e0e:	deff      	udf	#255	; 0xff
 8000e10:	fab2 f282 	clz	r2, r2
 8000e14:	2a00      	cmp	r2, #0
 8000e16:	f040 8092 	bne.w	8000f3e <__udivmoddi4+0x21a>
 8000e1a:	eba1 010c 	sub.w	r1, r1, ip
 8000e1e:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000e22:	fa1f fe8c 	uxth.w	lr, ip
 8000e26:	2601      	movs	r6, #1
 8000e28:	0c20      	lsrs	r0, r4, #16
 8000e2a:	fbb1 f3f7 	udiv	r3, r1, r7
 8000e2e:	fb07 1113 	mls	r1, r7, r3, r1
 8000e32:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000e36:	fb0e f003 	mul.w	r0, lr, r3
 8000e3a:	4288      	cmp	r0, r1
 8000e3c:	d908      	bls.n	8000e50 <__udivmoddi4+0x12c>
 8000e3e:	eb1c 0101 	adds.w	r1, ip, r1
 8000e42:	f103 38ff 	add.w	r8, r3, #4294967295
 8000e46:	d202      	bcs.n	8000e4e <__udivmoddi4+0x12a>
 8000e48:	4288      	cmp	r0, r1
 8000e4a:	f200 80cb 	bhi.w	8000fe4 <__udivmoddi4+0x2c0>
 8000e4e:	4643      	mov	r3, r8
 8000e50:	1a09      	subs	r1, r1, r0
 8000e52:	b2a4      	uxth	r4, r4
 8000e54:	fbb1 f0f7 	udiv	r0, r1, r7
 8000e58:	fb07 1110 	mls	r1, r7, r0, r1
 8000e5c:	ea44 4401 	orr.w	r4, r4, r1, lsl #16
 8000e60:	fb0e fe00 	mul.w	lr, lr, r0
 8000e64:	45a6      	cmp	lr, r4
 8000e66:	d908      	bls.n	8000e7a <__udivmoddi4+0x156>
 8000e68:	eb1c 0404 	adds.w	r4, ip, r4
 8000e6c:	f100 31ff 	add.w	r1, r0, #4294967295
 8000e70:	d202      	bcs.n	8000e78 <__udivmoddi4+0x154>
 8000e72:	45a6      	cmp	lr, r4
 8000e74:	f200 80bb 	bhi.w	8000fee <__udivmoddi4+0x2ca>
 8000e78:	4608      	mov	r0, r1
 8000e7a:	eba4 040e 	sub.w	r4, r4, lr
 8000e7e:	ea40 4003 	orr.w	r0, r0, r3, lsl #16
 8000e82:	e79c      	b.n	8000dbe <__udivmoddi4+0x9a>
 8000e84:	f1c6 0720 	rsb	r7, r6, #32
 8000e88:	40b3      	lsls	r3, r6
 8000e8a:	fa22 fc07 	lsr.w	ip, r2, r7
 8000e8e:	ea4c 0c03 	orr.w	ip, ip, r3
 8000e92:	fa20 f407 	lsr.w	r4, r0, r7
 8000e96:	fa01 f306 	lsl.w	r3, r1, r6
 8000e9a:	431c      	orrs	r4, r3
 8000e9c:	40f9      	lsrs	r1, r7
 8000e9e:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000ea2:	fa00 f306 	lsl.w	r3, r0, r6
 8000ea6:	fbb1 f8f9 	udiv	r8, r1, r9
 8000eaa:	0c20      	lsrs	r0, r4, #16
 8000eac:	fa1f fe8c 	uxth.w	lr, ip
 8000eb0:	fb09 1118 	mls	r1, r9, r8, r1
 8000eb4:	ea40 4101 	orr.w	r1, r0, r1, lsl #16
 8000eb8:	fb08 f00e 	mul.w	r0, r8, lr
 8000ebc:	4288      	cmp	r0, r1
 8000ebe:	fa02 f206 	lsl.w	r2, r2, r6
 8000ec2:	d90b      	bls.n	8000edc <__udivmoddi4+0x1b8>
 8000ec4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ec8:	f108 3aff 	add.w	sl, r8, #4294967295
 8000ecc:	f080 8088 	bcs.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed0:	4288      	cmp	r0, r1
 8000ed2:	f240 8085 	bls.w	8000fe0 <__udivmoddi4+0x2bc>
 8000ed6:	f1a8 0802 	sub.w	r8, r8, #2
 8000eda:	4461      	add	r1, ip
 8000edc:	1a09      	subs	r1, r1, r0
 8000ede:	b2a4      	uxth	r4, r4
 8000ee0:	fbb1 f0f9 	udiv	r0, r1, r9
 8000ee4:	fb09 1110 	mls	r1, r9, r0, r1
 8000ee8:	ea44 4101 	orr.w	r1, r4, r1, lsl #16
 8000eec:	fb00 fe0e 	mul.w	lr, r0, lr
 8000ef0:	458e      	cmp	lr, r1
 8000ef2:	d908      	bls.n	8000f06 <__udivmoddi4+0x1e2>
 8000ef4:	eb1c 0101 	adds.w	r1, ip, r1
 8000ef8:	f100 34ff 	add.w	r4, r0, #4294967295
 8000efc:	d26c      	bcs.n	8000fd8 <__udivmoddi4+0x2b4>
 8000efe:	458e      	cmp	lr, r1
 8000f00:	d96a      	bls.n	8000fd8 <__udivmoddi4+0x2b4>
 8000f02:	3802      	subs	r0, #2
 8000f04:	4461      	add	r1, ip
 8000f06:	ea40 4008 	orr.w	r0, r0, r8, lsl #16
 8000f0a:	fba0 9402 	umull	r9, r4, r0, r2
 8000f0e:	eba1 010e 	sub.w	r1, r1, lr
 8000f12:	42a1      	cmp	r1, r4
 8000f14:	46c8      	mov	r8, r9
 8000f16:	46a6      	mov	lr, r4
 8000f18:	d356      	bcc.n	8000fc8 <__udivmoddi4+0x2a4>
 8000f1a:	d053      	beq.n	8000fc4 <__udivmoddi4+0x2a0>
 8000f1c:	b15d      	cbz	r5, 8000f36 <__udivmoddi4+0x212>
 8000f1e:	ebb3 0208 	subs.w	r2, r3, r8
 8000f22:	eb61 010e 	sbc.w	r1, r1, lr
 8000f26:	fa01 f707 	lsl.w	r7, r1, r7
 8000f2a:	fa22 f306 	lsr.w	r3, r2, r6
 8000f2e:	40f1      	lsrs	r1, r6
 8000f30:	431f      	orrs	r7, r3
 8000f32:	e9c5 7100 	strd	r7, r1, [r5]
 8000f36:	2600      	movs	r6, #0
 8000f38:	4631      	mov	r1, r6
 8000f3a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000f3e:	f1c2 0320 	rsb	r3, r2, #32
 8000f42:	40d8      	lsrs	r0, r3
 8000f44:	fa0c fc02 	lsl.w	ip, ip, r2
 8000f48:	fa21 f303 	lsr.w	r3, r1, r3
 8000f4c:	4091      	lsls	r1, r2
 8000f4e:	4301      	orrs	r1, r0
 8000f50:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000f54:	fa1f fe8c 	uxth.w	lr, ip
 8000f58:	fbb3 f0f7 	udiv	r0, r3, r7
 8000f5c:	fb07 3610 	mls	r6, r7, r0, r3
 8000f60:	0c0b      	lsrs	r3, r1, #16
 8000f62:	ea43 4306 	orr.w	r3, r3, r6, lsl #16
 8000f66:	fb00 f60e 	mul.w	r6, r0, lr
 8000f6a:	429e      	cmp	r6, r3
 8000f6c:	fa04 f402 	lsl.w	r4, r4, r2
 8000f70:	d908      	bls.n	8000f84 <__udivmoddi4+0x260>
 8000f72:	eb1c 0303 	adds.w	r3, ip, r3
 8000f76:	f100 38ff 	add.w	r8, r0, #4294967295
 8000f7a:	d22f      	bcs.n	8000fdc <__udivmoddi4+0x2b8>
 8000f7c:	429e      	cmp	r6, r3
 8000f7e:	d92d      	bls.n	8000fdc <__udivmoddi4+0x2b8>
 8000f80:	3802      	subs	r0, #2
 8000f82:	4463      	add	r3, ip
 8000f84:	1b9b      	subs	r3, r3, r6
 8000f86:	b289      	uxth	r1, r1
 8000f88:	fbb3 f6f7 	udiv	r6, r3, r7
 8000f8c:	fb07 3316 	mls	r3, r7, r6, r3
 8000f90:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f94:	fb06 f30e 	mul.w	r3, r6, lr
 8000f98:	428b      	cmp	r3, r1
 8000f9a:	d908      	bls.n	8000fae <__udivmoddi4+0x28a>
 8000f9c:	eb1c 0101 	adds.w	r1, ip, r1
 8000fa0:	f106 38ff 	add.w	r8, r6, #4294967295
 8000fa4:	d216      	bcs.n	8000fd4 <__udivmoddi4+0x2b0>
 8000fa6:	428b      	cmp	r3, r1
 8000fa8:	d914      	bls.n	8000fd4 <__udivmoddi4+0x2b0>
 8000faa:	3e02      	subs	r6, #2
 8000fac:	4461      	add	r1, ip
 8000fae:	1ac9      	subs	r1, r1, r3
 8000fb0:	ea46 4600 	orr.w	r6, r6, r0, lsl #16
 8000fb4:	e738      	b.n	8000e28 <__udivmoddi4+0x104>
 8000fb6:	462e      	mov	r6, r5
 8000fb8:	4628      	mov	r0, r5
 8000fba:	e705      	b.n	8000dc8 <__udivmoddi4+0xa4>
 8000fbc:	4606      	mov	r6, r0
 8000fbe:	e6e3      	b.n	8000d88 <__udivmoddi4+0x64>
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	e6f8      	b.n	8000db6 <__udivmoddi4+0x92>
 8000fc4:	454b      	cmp	r3, r9
 8000fc6:	d2a9      	bcs.n	8000f1c <__udivmoddi4+0x1f8>
 8000fc8:	ebb9 0802 	subs.w	r8, r9, r2
 8000fcc:	eb64 0e0c 	sbc.w	lr, r4, ip
 8000fd0:	3801      	subs	r0, #1
 8000fd2:	e7a3      	b.n	8000f1c <__udivmoddi4+0x1f8>
 8000fd4:	4646      	mov	r6, r8
 8000fd6:	e7ea      	b.n	8000fae <__udivmoddi4+0x28a>
 8000fd8:	4620      	mov	r0, r4
 8000fda:	e794      	b.n	8000f06 <__udivmoddi4+0x1e2>
 8000fdc:	4640      	mov	r0, r8
 8000fde:	e7d1      	b.n	8000f84 <__udivmoddi4+0x260>
 8000fe0:	46d0      	mov	r8, sl
 8000fe2:	e77b      	b.n	8000edc <__udivmoddi4+0x1b8>
 8000fe4:	3b02      	subs	r3, #2
 8000fe6:	4461      	add	r1, ip
 8000fe8:	e732      	b.n	8000e50 <__udivmoddi4+0x12c>
 8000fea:	4630      	mov	r0, r6
 8000fec:	e709      	b.n	8000e02 <__udivmoddi4+0xde>
 8000fee:	4464      	add	r4, ip
 8000ff0:	3802      	subs	r0, #2
 8000ff2:	e742      	b.n	8000e7a <__udivmoddi4+0x156>

08000ff4 <__aeabi_idiv0>:
 8000ff4:	4770      	bx	lr
 8000ff6:	bf00      	nop

08000ff8 <GetSector>:
 *  Sector 4 as 64KB
 *  Sector 5 to Sector 7 each 128KB
 */

static uint32_t GetSector(uint32_t Address)
{
 8000ff8:	b480      	push	{r7}
 8000ffa:	b085      	sub	sp, #20
 8000ffc:	af00      	add	r7, sp, #0
 8000ffe:	6078      	str	r0, [r7, #4]
  uint32_t sector = 0;
 8001000:	2300      	movs	r3, #0
 8001002:	60fb      	str	r3, [r7, #12]

  if((Address < 0x08003FFF) && (Address >= 0x08000000))
 8001004:	687b      	ldr	r3, [r7, #4]
 8001006:	4a2e      	ldr	r2, [pc, #184]	; (80010c0 <GetSector+0xc8>)
 8001008:	4293      	cmp	r3, r2
 800100a:	d806      	bhi.n	800101a <GetSector+0x22>
 800100c:	687b      	ldr	r3, [r7, #4]
 800100e:	f1b3 6f00 	cmp.w	r3, #134217728	; 0x8000000
 8001012:	d302      	bcc.n	800101a <GetSector+0x22>
  {
    sector = FLASH_SECTOR_0;
 8001014:	2300      	movs	r3, #0
 8001016:	60fb      	str	r3, [r7, #12]
 8001018:	e04b      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x08007FFF) && (Address >= 0x08004000))
 800101a:	687b      	ldr	r3, [r7, #4]
 800101c:	4a29      	ldr	r2, [pc, #164]	; (80010c4 <GetSector+0xcc>)
 800101e:	4293      	cmp	r3, r2
 8001020:	d806      	bhi.n	8001030 <GetSector+0x38>
 8001022:	687b      	ldr	r3, [r7, #4]
 8001024:	4a28      	ldr	r2, [pc, #160]	; (80010c8 <GetSector+0xd0>)
 8001026:	4293      	cmp	r3, r2
 8001028:	d302      	bcc.n	8001030 <GetSector+0x38>
  {
    sector = FLASH_SECTOR_1;
 800102a:	2301      	movs	r3, #1
 800102c:	60fb      	str	r3, [r7, #12]
 800102e:	e040      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800BFFF) && (Address >= 0x08008000))
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	4a26      	ldr	r2, [pc, #152]	; (80010cc <GetSector+0xd4>)
 8001034:	4293      	cmp	r3, r2
 8001036:	d806      	bhi.n	8001046 <GetSector+0x4e>
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	4a25      	ldr	r2, [pc, #148]	; (80010d0 <GetSector+0xd8>)
 800103c:	4293      	cmp	r3, r2
 800103e:	d302      	bcc.n	8001046 <GetSector+0x4e>
  {
    sector = FLASH_SECTOR_2;
 8001040:	2302      	movs	r3, #2
 8001042:	60fb      	str	r3, [r7, #12]
 8001044:	e035      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0800FFFF) && (Address >= 0x0800C000))
 8001046:	687b      	ldr	r3, [r7, #4]
 8001048:	4a22      	ldr	r2, [pc, #136]	; (80010d4 <GetSector+0xdc>)
 800104a:	4293      	cmp	r3, r2
 800104c:	d206      	bcs.n	800105c <GetSector+0x64>
 800104e:	687b      	ldr	r3, [r7, #4]
 8001050:	4a21      	ldr	r2, [pc, #132]	; (80010d8 <GetSector+0xe0>)
 8001052:	4293      	cmp	r3, r2
 8001054:	d302      	bcc.n	800105c <GetSector+0x64>
  {
    sector = FLASH_SECTOR_3;
 8001056:	2303      	movs	r3, #3
 8001058:	60fb      	str	r3, [r7, #12]
 800105a:	e02a      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0801FFFF) && (Address >= 0x08010000))
 800105c:	687b      	ldr	r3, [r7, #4]
 800105e:	4a1f      	ldr	r2, [pc, #124]	; (80010dc <GetSector+0xe4>)
 8001060:	4293      	cmp	r3, r2
 8001062:	d206      	bcs.n	8001072 <GetSector+0x7a>
 8001064:	687b      	ldr	r3, [r7, #4]
 8001066:	4a1b      	ldr	r2, [pc, #108]	; (80010d4 <GetSector+0xdc>)
 8001068:	4293      	cmp	r3, r2
 800106a:	d902      	bls.n	8001072 <GetSector+0x7a>
  {
    sector = FLASH_SECTOR_4;
 800106c:	2304      	movs	r3, #4
 800106e:	60fb      	str	r3, [r7, #12]
 8001070:	e01f      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0803FFFF) && (Address >= 0x08020000))
 8001072:	687b      	ldr	r3, [r7, #4]
 8001074:	4a1a      	ldr	r2, [pc, #104]	; (80010e0 <GetSector+0xe8>)
 8001076:	4293      	cmp	r3, r2
 8001078:	d206      	bcs.n	8001088 <GetSector+0x90>
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	4a17      	ldr	r2, [pc, #92]	; (80010dc <GetSector+0xe4>)
 800107e:	4293      	cmp	r3, r2
 8001080:	d902      	bls.n	8001088 <GetSector+0x90>
  {
    sector = FLASH_SECTOR_5;
 8001082:	2305      	movs	r3, #5
 8001084:	60fb      	str	r3, [r7, #12]
 8001086:	e014      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0805FFFF) && (Address >= 0x08040000))
 8001088:	687b      	ldr	r3, [r7, #4]
 800108a:	4a16      	ldr	r2, [pc, #88]	; (80010e4 <GetSector+0xec>)
 800108c:	4293      	cmp	r3, r2
 800108e:	d206      	bcs.n	800109e <GetSector+0xa6>
 8001090:	687b      	ldr	r3, [r7, #4]
 8001092:	4a13      	ldr	r2, [pc, #76]	; (80010e0 <GetSector+0xe8>)
 8001094:	4293      	cmp	r3, r2
 8001096:	d902      	bls.n	800109e <GetSector+0xa6>
  {
    sector = FLASH_SECTOR_6;
 8001098:	2306      	movs	r3, #6
 800109a:	60fb      	str	r3, [r7, #12]
 800109c:	e009      	b.n	80010b2 <GetSector+0xba>
  }
  else if((Address < 0x0807FFFF) && (Address >= 0x08060000))
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	4a11      	ldr	r2, [pc, #68]	; (80010e8 <GetSector+0xf0>)
 80010a2:	4293      	cmp	r3, r2
 80010a4:	d205      	bcs.n	80010b2 <GetSector+0xba>
 80010a6:	687b      	ldr	r3, [r7, #4]
 80010a8:	4a0e      	ldr	r2, [pc, #56]	; (80010e4 <GetSector+0xec>)
 80010aa:	4293      	cmp	r3, r2
 80010ac:	d901      	bls.n	80010b2 <GetSector+0xba>
  {
    sector = FLASH_SECTOR_7;
 80010ae:	2307      	movs	r3, #7
 80010b0:	60fb      	str	r3, [r7, #12]
  }
  else if (Address < 0x081FFFFF) && (Address >= 0x081E0000)
  {
    sector = FLASH_SECTOR_23;
  }*/
  return sector;
 80010b2:	68fb      	ldr	r3, [r7, #12]
}
 80010b4:	4618      	mov	r0, r3
 80010b6:	3714      	adds	r7, #20
 80010b8:	46bd      	mov	sp, r7
 80010ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80010be:	4770      	bx	lr
 80010c0:	08003ffe 	.word	0x08003ffe
 80010c4:	08007ffe 	.word	0x08007ffe
 80010c8:	08004000 	.word	0x08004000
 80010cc:	0800bffe 	.word	0x0800bffe
 80010d0:	08008000 	.word	0x08008000
 80010d4:	0800ffff 	.word	0x0800ffff
 80010d8:	0800c000 	.word	0x0800c000
 80010dc:	0801ffff 	.word	0x0801ffff
 80010e0:	0803ffff 	.word	0x0803ffff
 80010e4:	0805ffff 	.word	0x0805ffff
 80010e8:	0807ffff 	.word	0x0807ffff

080010ec <Flash_Write_Data>:
   return float_variable;
}


uint32_t Flash_Write_Data (uint32_t StartSectorAddress, uint32_t *Data, uint16_t numberofwords)
{
 80010ec:	b5b0      	push	{r4, r5, r7, lr}
 80010ee:	b08a      	sub	sp, #40	; 0x28
 80010f0:	af00      	add	r7, sp, #0
 80010f2:	60f8      	str	r0, [r7, #12]
 80010f4:	60b9      	str	r1, [r7, #8]
 80010f6:	4613      	mov	r3, r2
 80010f8:	80fb      	strh	r3, [r7, #6]

	static FLASH_EraseInitTypeDef EraseInitStruct;
	uint32_t SECTORError;
	int sofar=0;
 80010fa:	2300      	movs	r3, #0
 80010fc:	627b      	str	r3, [r7, #36]	; 0x24


	 /* Unlock the Flash to enable the flash control register access *************/
	  HAL_FLASH_Unlock();
 80010fe:	f005 fafb 	bl	80066f8 <HAL_FLASH_Unlock>

	  /* Erase the user Flash area */

	  /* Get the number of sector to erase from 1st sector */

	  uint32_t StartSector = GetSector(StartSectorAddress);
 8001102:	68f8      	ldr	r0, [r7, #12]
 8001104:	f7ff ff78 	bl	8000ff8 <GetSector>
 8001108:	6238      	str	r0, [r7, #32]
	  uint32_t EndSectorAddress = StartSectorAddress + numberofwords*4;
 800110a:	88fb      	ldrh	r3, [r7, #6]
 800110c:	009b      	lsls	r3, r3, #2
 800110e:	461a      	mov	r2, r3
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	4413      	add	r3, r2
 8001114:	61fb      	str	r3, [r7, #28]
	  uint32_t EndSector = GetSector(EndSectorAddress);
 8001116:	69f8      	ldr	r0, [r7, #28]
 8001118:	f7ff ff6e 	bl	8000ff8 <GetSector>
 800111c:	61b8      	str	r0, [r7, #24]

	  /* Fill EraseInit structure*/
	  EraseInitStruct.TypeErase     = FLASH_TYPEERASE_SECTORS;
 800111e:	4b21      	ldr	r3, [pc, #132]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001120:	2200      	movs	r2, #0
 8001122:	601a      	str	r2, [r3, #0]
	  EraseInitStruct.VoltageRange  = FLASH_VOLTAGE_RANGE_3;
 8001124:	4b1f      	ldr	r3, [pc, #124]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001126:	2202      	movs	r2, #2
 8001128:	611a      	str	r2, [r3, #16]
	  EraseInitStruct.Sector        = StartSector;
 800112a:	4a1e      	ldr	r2, [pc, #120]	; (80011a4 <Flash_Write_Data+0xb8>)
 800112c:	6a3b      	ldr	r3, [r7, #32]
 800112e:	6093      	str	r3, [r2, #8]
	  EraseInitStruct.NbSectors     = (EndSector - StartSector) + 1;
 8001130:	69ba      	ldr	r2, [r7, #24]
 8001132:	6a3b      	ldr	r3, [r7, #32]
 8001134:	1ad3      	subs	r3, r2, r3
 8001136:	3301      	adds	r3, #1
 8001138:	4a1a      	ldr	r2, [pc, #104]	; (80011a4 <Flash_Write_Data+0xb8>)
 800113a:	60d3      	str	r3, [r2, #12]
	  /* Note: If an erase operation in Flash memory also concerns data in the data or instruction cache,
	     you have to make sure that these data are rewritten before they are accessed during code
	     execution. If this cannot be done safely, it is recommended to flush the caches by setting the
	     DCRST and ICRST bits in the FLASH_CR register. */

	  if (HAL_FLASHEx_Erase(&EraseInitStruct, &SECTORError) != HAL_OK)
 800113c:	f107 0314 	add.w	r3, r7, #20
 8001140:	4619      	mov	r1, r3
 8001142:	4818      	ldr	r0, [pc, #96]	; (80011a4 <Flash_Write_Data+0xb8>)
 8001144:	f005 fc46 	bl	80069d4 <HAL_FLASHEx_Erase>
 8001148:	4603      	mov	r3, r0
 800114a:	2b00      	cmp	r3, #0
 800114c:	d01f      	beq.n	800118e <Flash_Write_Data+0xa2>
	  {
		  return HAL_FLASH_GetError ();
 800114e:	f005 fb05 	bl	800675c <HAL_FLASH_GetError>
 8001152:	4603      	mov	r3, r0
 8001154:	e022      	b.n	800119c <Flash_Write_Data+0xb0>
	  /* Program the user Flash area word by word
	    (area defined by FLASH_USER_START_ADDR and FLASH_USER_END_ADDR) ***********/

	   while (sofar<numberofwords)
	   {
	     if (HAL_FLASH_Program(FLASH_TYPEPROGRAM_WORD, StartSectorAddress, Data[sofar]) == HAL_OK)
 8001156:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001158:	009b      	lsls	r3, r3, #2
 800115a:	68ba      	ldr	r2, [r7, #8]
 800115c:	4413      	add	r3, r2
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	2200      	movs	r2, #0
 8001162:	461c      	mov	r4, r3
 8001164:	4615      	mov	r5, r2
 8001166:	4622      	mov	r2, r4
 8001168:	462b      	mov	r3, r5
 800116a:	68f9      	ldr	r1, [r7, #12]
 800116c:	2002      	movs	r0, #2
 800116e:	f005 fa6f 	bl	8006650 <HAL_FLASH_Program>
 8001172:	4603      	mov	r3, r0
 8001174:	2b00      	cmp	r3, #0
 8001176:	d106      	bne.n	8001186 <Flash_Write_Data+0x9a>
	     {
	    	 StartSectorAddress += 4;  // use StartPageAddress += 2 for half word and 8 for double word
 8001178:	68fb      	ldr	r3, [r7, #12]
 800117a:	3304      	adds	r3, #4
 800117c:	60fb      	str	r3, [r7, #12]
	    	 sofar++;
 800117e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001180:	3301      	adds	r3, #1
 8001182:	627b      	str	r3, [r7, #36]	; 0x24
 8001184:	e003      	b.n	800118e <Flash_Write_Data+0xa2>
	     }
	     else
	     {
	       /* Error occurred while writing data in Flash memory*/
	    	 return HAL_FLASH_GetError ();
 8001186:	f005 fae9 	bl	800675c <HAL_FLASH_GetError>
 800118a:	4603      	mov	r3, r0
 800118c:	e006      	b.n	800119c <Flash_Write_Data+0xb0>
	   while (sofar<numberofwords)
 800118e:	88fb      	ldrh	r3, [r7, #6]
 8001190:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8001192:	429a      	cmp	r2, r3
 8001194:	dbdf      	blt.n	8001156 <Flash_Write_Data+0x6a>
	     }
	   }

	  /* Lock the Flash to disable the flash control register access (recommended
	     to protect the FLASH memory against possible unwanted operation) *********/
	  HAL_FLASH_Lock();
 8001196:	f005 fad1 	bl	800673c <HAL_FLASH_Lock>

	   return 0;
 800119a:	2300      	movs	r3, #0
}
 800119c:	4618      	mov	r0, r3
 800119e:	3728      	adds	r7, #40	; 0x28
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bdb0      	pop	{r4, r5, r7, pc}
 80011a4:	2000020c 	.word	0x2000020c

080011a8 <Flash_Read_Data>:


void Flash_Read_Data (uint32_t StartSectorAddress, uint32_t *RxBuf, uint16_t numberofwords)
{
 80011a8:	b480      	push	{r7}
 80011aa:	b085      	sub	sp, #20
 80011ac:	af00      	add	r7, sp, #0
 80011ae:	60f8      	str	r0, [r7, #12]
 80011b0:	60b9      	str	r1, [r7, #8]
 80011b2:	4613      	mov	r3, r2
 80011b4:	80fb      	strh	r3, [r7, #6]
	while (1)
	{

		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011b6:	68fb      	ldr	r3, [r7, #12]
 80011b8:	681a      	ldr	r2, [r3, #0]
 80011ba:	68bb      	ldr	r3, [r7, #8]
 80011bc:	601a      	str	r2, [r3, #0]
		StartSectorAddress += 4;
 80011be:	68fb      	ldr	r3, [r7, #12]
 80011c0:	3304      	adds	r3, #4
 80011c2:	60fb      	str	r3, [r7, #12]
		RxBuf++;
 80011c4:	68bb      	ldr	r3, [r7, #8]
 80011c6:	3304      	adds	r3, #4
 80011c8:	60bb      	str	r3, [r7, #8]
		if (!(numberofwords--)) break;
 80011ca:	88fb      	ldrh	r3, [r7, #6]
 80011cc:	1e5a      	subs	r2, r3, #1
 80011ce:	80fa      	strh	r2, [r7, #6]
 80011d0:	2b00      	cmp	r3, #0
 80011d2:	d000      	beq.n	80011d6 <Flash_Read_Data+0x2e>
		*RxBuf = *(__IO uint32_t *)StartSectorAddress;
 80011d4:	e7ef      	b.n	80011b6 <Flash_Read_Data+0xe>
		if (!(numberofwords--)) break;
 80011d6:	bf00      	nop
	}
}
 80011d8:	bf00      	nop
 80011da:	3714      	adds	r7, #20
 80011dc:	46bd      	mov	sp, r7
 80011de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011e2:	4770      	bx	lr

080011e4 <Stop>:
#include "stdbool.h"
#include <math.h>
//#include <FLASH_SECTOR_F4.h>
extern bool POSReach;
void Stop() // Stop motor function
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 80011e8:	2201      	movs	r2, #1
 80011ea:	2120      	movs	r1, #32
 80011ec:	4804      	ldr	r0, [pc, #16]	; (8001200 <Stop+0x1c>)
 80011ee:	f005 fec7 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Disable Servo Enable
 80011f2:	2201      	movs	r2, #1
 80011f4:	2110      	movs	r1, #16
 80011f6:	4802      	ldr	r0, [pc, #8]	; (8001200 <Stop+0x1c>)
 80011f8:	f005 fec2 	bl	8006f80 <HAL_GPIO_WritePin>
}
 80011fc:	bf00      	nop
 80011fe:	bd80      	pop	{r7, pc}
 8001200:	40020800 	.word	0x40020800

08001204 <AlarmReset>:

void AlarmReset() // reset alarm function
{
 8001204:	b580      	push	{r7, lr}
 8001206:	af00      	add	r7, sp, #0
	  HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_SET);//Pull Estop pin to 1 (24V)
 8001208:	2201      	movs	r2, #1
 800120a:	2101      	movs	r1, #1
 800120c:	480e      	ldr	r0, [pc, #56]	; (8001248 <AlarmReset+0x44>)
 800120e:	f005 feb7 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_RESET); // trig Alarm Reset Pin
 8001212:	2200      	movs	r2, #0
 8001214:	2102      	movs	r1, #2
 8001216:	480c      	ldr	r0, [pc, #48]	; (8001248 <AlarmReset+0x44>)
 8001218:	f005 feb2 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_Delay(500);
 800121c:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
 8001220:	f005 f834 	bl	800628c <HAL_Delay>
		HAL_GPIO_WritePin(ArlarmRST_PB1_42_GPIO_Port, ArlarmRST_PB1_42_Pin, GPIO_PIN_SET);
 8001224:	2201      	movs	r2, #1
 8001226:	2102      	movs	r1, #2
 8001228:	4807      	ldr	r0, [pc, #28]	; (8001248 <AlarmReset+0x44>)
 800122a:	f005 fea9 	bl	8006f80 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_SET);//(STOP) turn on pin 43
 800122e:	2201      	movs	r2, #1
 8001230:	2120      	movs	r1, #32
 8001232:	4806      	ldr	r0, [pc, #24]	; (800124c <AlarmReset+0x48>)
 8001234:	f005 fea4 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Enable Servo Enable 
 8001238:	2200      	movs	r2, #0
 800123a:	2110      	movs	r1, #16
 800123c:	4803      	ldr	r0, [pc, #12]	; (800124c <AlarmReset+0x48>)
 800123e:	f005 fe9f 	bl	8006f80 <HAL_GPIO_WritePin>
		// Turn on the brake
}
 8001242:	bf00      	nop
 8001244:	bd80      	pop	{r7, pc}
 8001246:	bf00      	nop
 8001248:	40020400 	.word	0x40020400
 800124c:	40020800 	.word	0x40020800

08001250 <Estop>:

void Estop() // Estop function
{
 8001250:	b580      	push	{r7, lr}
 8001252:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);//Pull Estop pin to GND
 8001254:	2200      	movs	r2, #0
 8001256:	2101      	movs	r1, #1
 8001258:	4802      	ldr	r0, [pc, #8]	; (8001264 <Estop+0x14>)
 800125a:	f005 fe91 	bl	8006f80 <HAL_GPIO_WritePin>
}
 800125e:	bf00      	nop
 8001260:	bd80      	pop	{r7, pc}
 8001262:	bf00      	nop
 8001264:	40020400 	.word	0x40020400

08001268 <DisableSTOP>:

void DisableSTOP()
{
 8001268:	b580      	push	{r7, lr}
 800126a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 800126c:	2200      	movs	r2, #0
 800126e:	2120      	movs	r1, #32
 8001270:	4802      	ldr	r0, [pc, #8]	; (800127c <DisableSTOP+0x14>)
 8001272:	f005 fe85 	bl	8006f80 <HAL_GPIO_WritePin>
}
 8001276:	bf00      	nop
 8001278:	bd80      	pop	{r7, pc}
 800127a:	bf00      	nop
 800127c:	40020800 	.word	0x40020800

08001280 <JogMoveUp>:

void JogMoveUp() // Move up by pressing the JOG button on the UI
{
 8001280:	b580      	push	{r7, lr}
 8001282:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_SET); // Choose the direction
 8001284:	2201      	movs	r2, #1
 8001286:	f44f 6180 	mov.w	r1, #1024	; 0x400
 800128a:	4805      	ldr	r0, [pc, #20]	; (80012a0 <JogMoveUp+0x20>)
 800128c:	f005 fe78 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 8001290:	2200      	movs	r2, #0
 8001292:	2120      	movs	r1, #32
 8001294:	4803      	ldr	r0, [pc, #12]	; (80012a4 <JogMoveUp+0x24>)
 8001296:	f005 fe73 	bl	8006f80 <HAL_GPIO_WritePin>
}
 800129a:	bf00      	nop
 800129c:	bd80      	pop	{r7, pc}
 800129e:	bf00      	nop
 80012a0:	40021000 	.word	0x40021000
 80012a4:	40020800 	.word	0x40020800

080012a8 <JogMoveDown>:

void JogMoveDown()
{
 80012a8:	b580      	push	{r7, lr}
 80012aa:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // Choose the direction
 80012ac:	2200      	movs	r2, #0
 80012ae:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012b2:	4805      	ldr	r0, [pc, #20]	; (80012c8 <JogMoveDown+0x20>)
 80012b4:	f005 fe64 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Stop_PC5_43_GPIO_Port,Stop_PC5_43_Pin,GPIO_PIN_RESET);//START , disable stop IO
 80012b8:	2200      	movs	r2, #0
 80012ba:	2120      	movs	r1, #32
 80012bc:	4803      	ldr	r0, [pc, #12]	; (80012cc <JogMoveDown+0x24>)
 80012be:	f005 fe5f 	bl	8006f80 <HAL_GPIO_WritePin>
}
 80012c2:	bf00      	nop
 80012c4:	bd80      	pop	{r7, pc}
 80012c6:	bf00      	nop
 80012c8:	40021000 	.word	0x40021000
 80012cc:	40020800 	.word	0x40020800

080012d0 <DriverInit>:
{
	HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // Speed Mode
}

bool DriverInit()
{	
 80012d0:	b580      	push	{r7, lr}
 80012d2:	af00      	add	r7, sp, #0
		HAL_GPIO_WritePin(Dir_Not_PE10_14_GPIO_Port, Dir_Not_PE10_14_Pin, GPIO_PIN_RESET); // CN1-14 - PLSCLR	
 80012d4:	2200      	movs	r2, #0
 80012d6:	f44f 6180 	mov.w	r1, #1024	; 0x400
 80012da:	4819      	ldr	r0, [pc, #100]	; (8001340 <DriverInit+0x70>)
 80012dc:	f005 fe50 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Speed2_Not_PE7_15_GPIO_Port,Speed2_Not_PE7_15_Pin,GPIO_PIN_RESET);//CN1-15 SPDLIM/TLIM
 80012e0:	2200      	movs	r2, #0
 80012e2:	2180      	movs	r1, #128	; 0x80
 80012e4:	4816      	ldr	r0, [pc, #88]	; (8001340 <DriverInit+0x70>)
 80012e6:	f005 fe4b 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(CCWLIM_Not_PE12_39_GPIO_Port,CCWLIM_Not_PE12_39_Pin,GPIO_PIN_RESET);//CN1-39 PLSINH
 80012ea:	2200      	movs	r2, #0
 80012ec:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 80012f0:	4813      	ldr	r0, [pc, #76]	; (8001340 <DriverInit+0x70>)
 80012f2:	f005 fe45 	bl	8006f80 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(SPDLIM_Not_PE11_38_GPIO_Port, SPDLIM_Not_PE11_38_Pin, GPIO_PIN_SET);// CN-38 - CWLIM
 80012f6:	2201      	movs	r2, #1
 80012f8:	f44f 6100 	mov.w	r1, #2048	; 0x800
 80012fc:	4810      	ldr	r0, [pc, #64]	; (8001340 <DriverInit+0x70>)
 80012fe:	f005 fe3f 	bl	8006f80 <HAL_GPIO_WritePin>
	  HAL_GPIO_WritePin(CWLIM_Not_PE14_13_GPIO_Port,CWLIM_Not_PE14_13_Pin,GPIO_PIN_SET);//CN1-13 CCWLIM
 8001302:	2201      	movs	r2, #1
 8001304:	f44f 4180 	mov.w	r1, #16384	; 0x4000
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <DriverInit+0x70>)
 800130a:	f005 fe39 	bl	8006f80 <HAL_GPIO_WritePin>
	
		HAL_GPIO_WritePin(EStop_Not_PB0_17_GPIO_Port, EStop_Not_PB0_17_Pin, GPIO_PIN_RESET);// First, the driver will be in Emergency Stop
 800130e:	2200      	movs	r2, #0
 8001310:	2101      	movs	r1, #1
 8001312:	480c      	ldr	r0, [pc, #48]	; (8001344 <DriverInit+0x74>)
 8001314:	f005 fe34 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 8001318:	2200      	movs	r2, #0
 800131a:	2110      	movs	r1, #16
 800131c:	480a      	ldr	r0, [pc, #40]	; (8001348 <DriverInit+0x78>)
 800131e:	f005 fe2f 	bl	8006f80 <HAL_GPIO_WritePin>
		
		HAL_GPIO_WritePin(PA12_LINE_DRV_EN_GPIO_Port, PA12_LINE_DRV_EN_Pin, GPIO_PIN_RESET);// Enable U14 DriveLine IC for generating pulses
 8001322:	2200      	movs	r2, #0
 8001324:	f44f 5180 	mov.w	r1, #4096	; 0x1000
 8001328:	4808      	ldr	r0, [pc, #32]	; (800134c <DriverInit+0x7c>)
 800132a:	f005 fe29 	bl	8006f80 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(Type_Not_PE8_40_GPIO_Port, Type_Not_PE8_40_Pin, GPIO_PIN_RESET); // DIR	
 800132e:	2200      	movs	r2, #0
 8001330:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001334:	4802      	ldr	r0, [pc, #8]	; (8001340 <DriverInit+0x70>)
 8001336:	f005 fe23 	bl	8006f80 <HAL_GPIO_WritePin>
	
		return true;
 800133a:	2301      	movs	r3, #1
}
 800133c:	4618      	mov	r0, r3
 800133e:	bd80      	pop	{r7, pc}
 8001340:	40021000 	.word	0x40021000
 8001344:	40020400 	.word	0x40020400
 8001348:	40020800 	.word	0x40020800
 800134c:	40020000 	.word	0x40020000

08001350 <ReadLogicF7000Out>:
uint16_t ReadLogicF7000Out(void)
{ 
 8001350:	b580      	push	{r7, lr}
 8001352:	b082      	sub	sp, #8
 8001354:	af00      	add	r7, sp, #0
	uint16_t OuputState = 0;
 8001356:	2300      	movs	r3, #0
 8001358:	80fb      	strh	r3, [r7, #6]
	uint8_t i=0;
 800135a:	2300      	movs	r3, #0
 800135c:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_23_TYPEOUT_GPIO_Port,CN1_23_TYPEOUT_Pin)) // Read CN1-23-TYPEOUT
 800135e:	2180      	movs	r1, #128	; 0x80
 8001360:	485e      	ldr	r0, [pc, #376]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001362:	f005 fdf5 	bl	8006f50 <HAL_GPIO_ReadPin>
 8001366:	4603      	mov	r3, r0
 8001368:	2b00      	cmp	r3, #0
 800136a:	d009      	beq.n	8001380 <ReadLogicF7000Out+0x30>
	{
		OuputState = OuputState | (1 << i); // Set ith bit		
 800136c:	797b      	ldrb	r3, [r7, #5]
 800136e:	2201      	movs	r2, #1
 8001370:	fa02 f303 	lsl.w	r3, r2, r3
 8001374:	b21a      	sxth	r2, r3
 8001376:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800137a:	4313      	orrs	r3, r2
 800137c:	b21b      	sxth	r3, r3
 800137e:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001380:	797b      	ldrb	r3, [r7, #5]
 8001382:	3301      	adds	r3, #1
 8001384:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin)) // Read CN1-48-BRAKE
 8001386:	2140      	movs	r1, #64	; 0x40
 8001388:	4855      	ldr	r0, [pc, #340]	; (80014e0 <ReadLogicF7000Out+0x190>)
 800138a:	f005 fde1 	bl	8006f50 <HAL_GPIO_ReadPin>
 800138e:	4603      	mov	r3, r0
 8001390:	2b00      	cmp	r3, #0
 8001392:	d009      	beq.n	80013a8 <ReadLogicF7000Out+0x58>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001394:	797b      	ldrb	r3, [r7, #5]
 8001396:	2201      	movs	r2, #1
 8001398:	fa02 f303 	lsl.w	r3, r2, r3
 800139c:	b21a      	sxth	r2, r3
 800139e:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013a2:	4313      	orrs	r3, r2
 80013a4:	b21b      	sxth	r3, r3
 80013a6:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80013a8:	797b      	ldrb	r3, [r7, #5]
 80013aa:	3301      	adds	r3, #1
 80013ac:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin)) // Read CN1-22-RDY
 80013ae:	2104      	movs	r1, #4
 80013b0:	484b      	ldr	r0, [pc, #300]	; (80014e0 <ReadLogicF7000Out+0x190>)
 80013b2:	f005 fdcd 	bl	8006f50 <HAL_GPIO_ReadPin>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d009      	beq.n	80013d0 <ReadLogicF7000Out+0x80>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80013bc:	797b      	ldrb	r3, [r7, #5]
 80013be:	2201      	movs	r2, #1
 80013c0:	fa02 f303 	lsl.w	r3, r2, r3
 80013c4:	b21a      	sxth	r2, r3
 80013c6:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80013ca:	4313      	orrs	r3, r2
 80013cc:	b21b      	sxth	r3, r3
 80013ce:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 80013d0:	797b      	ldrb	r3, [r7, #5]
 80013d2:	3301      	adds	r3, #1
 80013d4:	717b      	strb	r3, [r7, #5]
	POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);	// Check if the position is reached or not
 80013d6:	2102      	movs	r1, #2
 80013d8:	4842      	ldr	r0, [pc, #264]	; (80014e4 <ReadLogicF7000Out+0x194>)
 80013da:	f005 fdb9 	bl	8006f50 <HAL_GPIO_ReadPin>
 80013de:	4603      	mov	r3, r0
 80013e0:	2b00      	cmp	r3, #0
 80013e2:	bf14      	ite	ne
 80013e4:	2301      	movne	r3, #1
 80013e6:	2300      	moveq	r3, #0
 80013e8:	b2da      	uxtb	r2, r3
 80013ea:	4b3f      	ldr	r3, [pc, #252]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013ec:	701a      	strb	r2, [r3, #0]
//	if (HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin)) // Read CN1-47
	if(POSReach)
 80013ee:	4b3e      	ldr	r3, [pc, #248]	; (80014e8 <ReadLogicF7000Out+0x198>)
 80013f0:	781b      	ldrb	r3, [r3, #0]
 80013f2:	2b00      	cmp	r3, #0
 80013f4:	d009      	beq.n	800140a <ReadLogicF7000Out+0xba>
	{		
		OuputState = OuputState | (1 << i); // Set ith bit
 80013f6:	797b      	ldrb	r3, [r7, #5]
 80013f8:	2201      	movs	r2, #1
 80013fa:	fa02 f303 	lsl.w	r3, r2, r3
 80013fe:	b21a      	sxth	r2, r3
 8001400:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001404:	4313      	orrs	r3, r2
 8001406:	b21b      	sxth	r3, r3
 8001408:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800140a:	797b      	ldrb	r3, [r7, #5]
 800140c:	3301      	adds	r3, #1
 800140e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_21_SPDOUT_TRQOUT_GPIO_Port,CN1_21_SPDOUT_TRQOUT_Pin)) // Read CN1-21
 8001410:	2108      	movs	r1, #8
 8001412:	4833      	ldr	r0, [pc, #204]	; (80014e0 <ReadLogicF7000Out+0x190>)
 8001414:	f005 fd9c 	bl	8006f50 <HAL_GPIO_ReadPin>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d009      	beq.n	8001432 <ReadLogicF7000Out+0xe2>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800141e:	797b      	ldrb	r3, [r7, #5]
 8001420:	2201      	movs	r2, #1
 8001422:	fa02 f303 	lsl.w	r3, r2, r3
 8001426:	b21a      	sxth	r2, r3
 8001428:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800142c:	4313      	orrs	r3, r2
 800142e:	b21b      	sxth	r3, r3
 8001430:	80fb      	strh	r3, [r7, #6]
	}		
	i++;
 8001432:	797b      	ldrb	r3, [r7, #5]
 8001434:	3301      	adds	r3, #1
 8001436:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_46_ALARM_GPIO_Port,CN1_46_ALARM_Pin)) // Read CN1-22-
 8001438:	2101      	movs	r1, #1
 800143a:	482a      	ldr	r0, [pc, #168]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800143c:	f005 fd88 	bl	8006f50 <HAL_GPIO_ReadPin>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d009      	beq.n	800145a <ReadLogicF7000Out+0x10a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001446:	797b      	ldrb	r3, [r7, #5]
 8001448:	2201      	movs	r2, #1
 800144a:	fa02 f303 	lsl.w	r3, r2, r3
 800144e:	b21a      	sxth	r2, r3
 8001450:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 8001454:	4313      	orrs	r3, r2
 8001456:	b21b      	sxth	r3, r3
 8001458:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 800145a:	797b      	ldrb	r3, [r7, #5]
 800145c:	3301      	adds	r3, #1
 800145e:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_20_PCWOUT_PTQOUT_GPIO_Port,CN1_20_PCWOUT_PTQOUT_Pin)) // Read CN1-20
 8001460:	2110      	movs	r1, #16
 8001462:	481e      	ldr	r0, [pc, #120]	; (80014dc <ReadLogicF7000Out+0x18c>)
 8001464:	f005 fd74 	bl	8006f50 <HAL_GPIO_ReadPin>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d009      	beq.n	8001482 <ReadLogicF7000Out+0x132>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 800146e:	797b      	ldrb	r3, [r7, #5]
 8001470:	2201      	movs	r2, #1
 8001472:	fa02 f303 	lsl.w	r3, r2, r3
 8001476:	b21a      	sxth	r2, r3
 8001478:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 800147c:	4313      	orrs	r3, r2
 800147e:	b21b      	sxth	r3, r3
 8001480:	80fb      	strh	r3, [r7, #6]
	}
	i++;	
 8001482:	797b      	ldrb	r3, [r7, #5]
 8001484:	3301      	adds	r3, #1
 8001486:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_45_NCWOUT_NTQOUT_GPIO_Port,CN1_45_NCWOUT_NTQOUT_Pin)) // Read CN1-45
 8001488:	2104      	movs	r1, #4
 800148a:	4816      	ldr	r0, [pc, #88]	; (80014e4 <ReadLogicF7000Out+0x194>)
 800148c:	f005 fd60 	bl	8006f50 <HAL_GPIO_ReadPin>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d009      	beq.n	80014aa <ReadLogicF7000Out+0x15a>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 8001496:	797b      	ldrb	r3, [r7, #5]
 8001498:	2201      	movs	r2, #1
 800149a:	fa02 f303 	lsl.w	r3, r2, r3
 800149e:	b21a      	sxth	r2, r3
 80014a0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014a4:	4313      	orrs	r3, r2
 80014a6:	b21b      	sxth	r3, r3
 80014a8:	80fb      	strh	r3, [r7, #6]
	}
	i++;
 80014aa:	797b      	ldrb	r3, [r7, #5]
 80014ac:	3301      	adds	r3, #1
 80014ae:	717b      	strb	r3, [r7, #5]
	if (HAL_GPIO_ReadPin(CN1_19_ZSPD_GPIO_Port,CN1_19_ZSPD_Pin)) // Read CN1-19-ZSPD
 80014b0:	2108      	movs	r1, #8
 80014b2:	480e      	ldr	r0, [pc, #56]	; (80014ec <ReadLogicF7000Out+0x19c>)
 80014b4:	f005 fd4c 	bl	8006f50 <HAL_GPIO_ReadPin>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d009      	beq.n	80014d2 <ReadLogicF7000Out+0x182>
	{
		OuputState = OuputState | (1 << i); // Set ith bit
 80014be:	797b      	ldrb	r3, [r7, #5]
 80014c0:	2201      	movs	r2, #1
 80014c2:	fa02 f303 	lsl.w	r3, r2, r3
 80014c6:	b21a      	sxth	r2, r3
 80014c8:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80014cc:	4313      	orrs	r3, r2
 80014ce:	b21b      	sxth	r3, r3
 80014d0:	80fb      	strh	r3, [r7, #6]
	}	
	return OuputState;
 80014d2:	88fb      	ldrh	r3, [r7, #6]
 80014d4:	4618      	mov	r0, r3
 80014d6:	3708      	adds	r7, #8
 80014d8:	46bd      	mov	sp, r7
 80014da:	bd80      	pop	{r7, pc}
 80014dc:	40020000 	.word	0x40020000
 80014e0:	40021000 	.word	0x40021000
 80014e4:	40020800 	.word	0x40020800
 80014e8:	2000043d 	.word	0x2000043d
 80014ec:	40020400 	.word	0x40020400

080014f0 <PIDCalculate>:
static void MX_NVIC_Init(void);
/* USER CODE BEGIN PFP */
/* Private function prototypes -----------------------------------------------*/

float PIDCalculate (float _AccRef, float _AccFeedback, int MinSatuaration, int MaxSaturation, bool _direction)
{
 80014f0:	b5b0      	push	{r4, r5, r7, lr}
 80014f2:	b08a      	sub	sp, #40	; 0x28
 80014f4:	af00      	add	r7, sp, #0
 80014f6:	ed87 0a05 	vstr	s0, [r7, #20]
 80014fa:	edc7 0a04 	vstr	s1, [r7, #16]
 80014fe:	60f8      	str	r0, [r7, #12]
 8001500:	60b9      	str	r1, [r7, #8]
 8001502:	4613      	mov	r3, r2
 8001504:	71fb      	strb	r3, [r7, #7]
	float Error = _AccRef - _AccFeedback;
 8001506:	ed97 7a05 	vldr	s14, [r7, #20]
 800150a:	edd7 7a04 	vldr	s15, [r7, #16]
 800150e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001512:	edc7 7a08 	vstr	s15, [r7, #32]
	
	float Pcalculation = Kp*Error;
 8001516:	4b4c      	ldr	r3, [pc, #304]	; (8001648 <PIDCalculate+0x158>)
 8001518:	edd3 7a00 	vldr	s15, [r3]
 800151c:	ed97 7a08 	vldr	s14, [r7, #32]
 8001520:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001524:	edc7 7a07 	vstr	s15, [r7, #28]
	IntergraError += Ki*(Error+PreError)*SampleTime*0.005; // Sampletime in second
 8001528:	4b48      	ldr	r3, [pc, #288]	; (800164c <PIDCalculate+0x15c>)
 800152a:	681b      	ldr	r3, [r3, #0]
 800152c:	4618      	mov	r0, r3
 800152e:	f7ff f80b 	bl	8000548 <__aeabi_f2d>
 8001532:	4604      	mov	r4, r0
 8001534:	460d      	mov	r5, r1
 8001536:	4b46      	ldr	r3, [pc, #280]	; (8001650 <PIDCalculate+0x160>)
 8001538:	ed93 7a00 	vldr	s14, [r3]
 800153c:	edd7 7a08 	vldr	s15, [r7, #32]
 8001540:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001544:	4b43      	ldr	r3, [pc, #268]	; (8001654 <PIDCalculate+0x164>)
 8001546:	edd3 7a00 	vldr	s15, [r3]
 800154a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800154e:	4b42      	ldr	r3, [pc, #264]	; (8001658 <PIDCalculate+0x168>)
 8001550:	781b      	ldrb	r3, [r3, #0]
 8001552:	ee07 3a90 	vmov	s15, r3
 8001556:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800155a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800155e:	ee17 0a90 	vmov	r0, s15
 8001562:	f7fe fff1 	bl	8000548 <__aeabi_f2d>
 8001566:	a336      	add	r3, pc, #216	; (adr r3, 8001640 <PIDCalculate+0x150>)
 8001568:	e9d3 2300 	ldrd	r2, r3, [r3]
 800156c:	f7ff f844 	bl	80005f8 <__aeabi_dmul>
 8001570:	4602      	mov	r2, r0
 8001572:	460b      	mov	r3, r1
 8001574:	4620      	mov	r0, r4
 8001576:	4629      	mov	r1, r5
 8001578:	f7fe fe88 	bl	800028c <__adddf3>
 800157c:	4602      	mov	r2, r0
 800157e:	460b      	mov	r3, r1
 8001580:	4610      	mov	r0, r2
 8001582:	4619      	mov	r1, r3
 8001584:	f7ff fb30 	bl	8000be8 <__aeabi_d2f>
 8001588:	4603      	mov	r3, r0
 800158a:	4a30      	ldr	r2, [pc, #192]	; (800164c <PIDCalculate+0x15c>)
 800158c:	6013      	str	r3, [r2, #0]
	float Dcalculation = Kd*(Error - PreError)/SampleTime; // sampletime in ms
 800158e:	4b30      	ldr	r3, [pc, #192]	; (8001650 <PIDCalculate+0x160>)
 8001590:	edd3 7a00 	vldr	s15, [r3]
 8001594:	ed97 7a08 	vldr	s14, [r7, #32]
 8001598:	ee37 7a67 	vsub.f32	s14, s14, s15
 800159c:	4b2f      	ldr	r3, [pc, #188]	; (800165c <PIDCalculate+0x16c>)
 800159e:	edd3 7a00 	vldr	s15, [r3]
 80015a2:	ee67 6a27 	vmul.f32	s13, s14, s15
 80015a6:	4b2c      	ldr	r3, [pc, #176]	; (8001658 <PIDCalculate+0x168>)
 80015a8:	781b      	ldrb	r3, [r3, #0]
 80015aa:	ee07 3a90 	vmov	s15, r3
 80015ae:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80015b2:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80015b6:	edc7 7a06 	vstr	s15, [r7, #24]
	
	float ReturnValue = Pcalculation + IntergraError + Dcalculation;
 80015ba:	4b24      	ldr	r3, [pc, #144]	; (800164c <PIDCalculate+0x15c>)
 80015bc:	ed93 7a00 	vldr	s14, [r3]
 80015c0:	edd7 7a07 	vldr	s15, [r7, #28]
 80015c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015c8:	ed97 7a06 	vldr	s14, [r7, #24]
 80015cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d0:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	
	if (ReturnValue <= MinSatuaration)
 80015d4:	68fb      	ldr	r3, [r7, #12]
 80015d6:	ee07 3a90 	vmov	s15, r3
 80015da:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015de:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 80015e2:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80015e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80015ea:	d806      	bhi.n	80015fa <PIDCalculate+0x10a>
		ReturnValue = MinSatuaration;
 80015ec:	68fb      	ldr	r3, [r7, #12]
 80015ee:	ee07 3a90 	vmov	s15, r3
 80015f2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80015f6:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if (ReturnValue >= MaxSaturation)
 80015fa:	68bb      	ldr	r3, [r7, #8]
 80015fc:	ee07 3a90 	vmov	s15, r3
 8001600:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001604:	ed97 7a09 	vldr	s14, [r7, #36]	; 0x24
 8001608:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800160c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001610:	db06      	blt.n	8001620 <PIDCalculate+0x130>
		ReturnValue = MaxSaturation;
 8001612:	68bb      	ldr	r3, [r7, #8]
 8001614:	ee07 3a90 	vmov	s15, r3
 8001618:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800161c:	edc7 7a09 	vstr	s15, [r7, #36]	; 0x24
	if (_direction)
 8001620:	79fb      	ldrb	r3, [r7, #7]
 8001622:	2b00      	cmp	r3, #0
 8001624:	d002      	beq.n	800162c <PIDCalculate+0x13c>
	{
		return ReturnValue;
 8001626:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 800162a:	e003      	b.n	8001634 <PIDCalculate+0x144>
	}
	else
	{
		return -ReturnValue;
 800162c:	edd7 7a09 	vldr	s15, [r7, #36]	; 0x24
 8001630:	eef1 7a67 	vneg.f32	s15, s15
	}
}
 8001634:	eeb0 0a67 	vmov.f32	s0, s15
 8001638:	3728      	adds	r7, #40	; 0x28
 800163a:	46bd      	mov	sp, r7
 800163c:	bdb0      	pop	{r4, r5, r7, pc}
 800163e:	bf00      	nop
 8001640:	47ae147b 	.word	0x47ae147b
 8001644:	3f747ae1 	.word	0x3f747ae1
 8001648:	20000518 	.word	0x20000518
 800164c:	20000524 	.word	0x20000524
 8001650:	20000530 	.word	0x20000530
 8001654:	2000051c 	.word	0x2000051c
 8001658:	2000045c 	.word	0x2000045c
 800165c:	20000520 	.word	0x20000520

08001660 <ResetPIDController>:

void ResetPIDController ()
{
 8001660:	b480      	push	{r7}
 8001662:	af00      	add	r7, sp, #0
	IntergraError = 0;
 8001664:	4b07      	ldr	r3, [pc, #28]	; (8001684 <ResetPIDController+0x24>)
 8001666:	f04f 0200 	mov.w	r2, #0
 800166a:	601a      	str	r2, [r3, #0]
	PreError = 0;
 800166c:	4b06      	ldr	r3, [pc, #24]	; (8001688 <ResetPIDController+0x28>)
 800166e:	f04f 0200 	mov.w	r2, #0
 8001672:	601a      	str	r2, [r3, #0]
	AccRef = -9.6;
 8001674:	4b05      	ldr	r3, [pc, #20]	; (800168c <ResetPIDController+0x2c>)
 8001676:	4a06      	ldr	r2, [pc, #24]	; (8001690 <ResetPIDController+0x30>)
 8001678:	601a      	str	r2, [r3, #0]
}
 800167a:	bf00      	nop
 800167c:	46bd      	mov	sp, r7
 800167e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001682:	4770      	bx	lr
 8001684:	20000524 	.word	0x20000524
 8001688:	20000530 	.word	0x20000530
 800168c:	2000000c 	.word	0x2000000c
 8001690:	c119999a 	.word	0xc119999a

08001694 <ExtractMotionCode>:

void ExtractMotionCode () // Extract command from the UI
{
 8001694:	b590      	push	{r4, r7, lr}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	memset (MotionCode, '\0', sizeof (MotionCode)); // reset MotionCode
 800169a:	2220      	movs	r2, #32
 800169c:	2100      	movs	r1, #0
 800169e:	4827      	ldr	r0, [pc, #156]	; (800173c <ExtractMotionCode+0xa8>)
 80016a0:	f008 f86c 	bl	800977c <memset>
	memset (DataRegion, '\0', sizeof (DataRegion)); // reset DataRegion
 80016a4:	2228      	movs	r2, #40	; 0x28
 80016a6:	2100      	movs	r1, #0
 80016a8:	4825      	ldr	r0, [pc, #148]	; (8001740 <ExtractMotionCode+0xac>)
 80016aa:	f008 f867 	bl	800977c <memset>
	uint8_t j = 0;
 80016ae:	2300      	movs	r3, #0
 80016b0:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 80016b2:	2300      	movs	r3, #0
 80016b4:	71bb      	strb	r3, [r7, #6]
 80016b6:	e012      	b.n	80016de <ExtractMotionCode+0x4a>
	{
		if (RxPCBuff[i] != 0) // coppy the command from UI to another array, remove the null character at the beginning
 80016b8:	79bb      	ldrb	r3, [r7, #6]
 80016ba:	4a22      	ldr	r2, [pc, #136]	; (8001744 <ExtractMotionCode+0xb0>)
 80016bc:	5cd3      	ldrb	r3, [r2, r3]
 80016be:	b2db      	uxtb	r3, r3
 80016c0:	2b00      	cmp	r3, #0
 80016c2:	d009      	beq.n	80016d8 <ExtractMotionCode+0x44>
		{
			DataRegion[j] = RxPCBuff[i]; // coppy to DataRegion
 80016c4:	79ba      	ldrb	r2, [r7, #6]
 80016c6:	79fb      	ldrb	r3, [r7, #7]
 80016c8:	491e      	ldr	r1, [pc, #120]	; (8001744 <ExtractMotionCode+0xb0>)
 80016ca:	5c8a      	ldrb	r2, [r1, r2]
 80016cc:	b2d1      	uxtb	r1, r2
 80016ce:	4a1c      	ldr	r2, [pc, #112]	; (8001740 <ExtractMotionCode+0xac>)
 80016d0:	54d1      	strb	r1, [r2, r3]
			j++;
 80016d2:	79fb      	ldrb	r3, [r7, #7]
 80016d4:	3301      	adds	r3, #1
 80016d6:	71fb      	strb	r3, [r7, #7]
	for(uint8_t i = 0; i< sizeof(RxPCBuff); i++)
 80016d8:	79bb      	ldrb	r3, [r7, #6]
 80016da:	3301      	adds	r3, #1
 80016dc:	71bb      	strb	r3, [r7, #6]
 80016de:	79bb      	ldrb	r3, [r7, #6]
 80016e0:	2b27      	cmp	r3, #39	; 0x27
 80016e2:	d9e9      	bls.n	80016b8 <ExtractMotionCode+0x24>
		}
	}
	j = 0;
 80016e4:	2300      	movs	r3, #0
 80016e6:	71fb      	strb	r3, [r7, #7]
	char *token;	
	token = strtok((char *)DataRegion, "/");	// Split the command ~ remove the / character
 80016e8:	4917      	ldr	r1, [pc, #92]	; (8001748 <ExtractMotionCode+0xb4>)
 80016ea:	4815      	ldr	r0, [pc, #84]	; (8001740 <ExtractMotionCode+0xac>)
 80016ec:	f009 fb06 	bl	800acfc <strtok>
 80016f0:	6038      	str	r0, [r7, #0]
	while (token != NULL)
 80016f2:	e016      	b.n	8001722 <ExtractMotionCode+0x8e>
    {
				MotionCode[j] = (atof(token)); // covert to float type 
 80016f4:	6838      	ldr	r0, [r7, #0]
 80016f6:	f008 f813 	bl	8009720 <atof>
 80016fa:	ec53 2b10 	vmov	r2, r3, d0
 80016fe:	79fc      	ldrb	r4, [r7, #7]
 8001700:	4610      	mov	r0, r2
 8001702:	4619      	mov	r1, r3
 8001704:	f7ff fa70 	bl	8000be8 <__aeabi_d2f>
 8001708:	4602      	mov	r2, r0
 800170a:	490c      	ldr	r1, [pc, #48]	; (800173c <ExtractMotionCode+0xa8>)
 800170c:	00a3      	lsls	r3, r4, #2
 800170e:	440b      	add	r3, r1
 8001710:	601a      	str	r2, [r3, #0]
			  //MotionCode[j] = (atoi(token)); // covert to int type 
        token = strtok(NULL, "/");
 8001712:	490d      	ldr	r1, [pc, #52]	; (8001748 <ExtractMotionCode+0xb4>)
 8001714:	2000      	movs	r0, #0
 8001716:	f009 faf1 	bl	800acfc <strtok>
 800171a:	6038      	str	r0, [r7, #0]
				j++;
 800171c:	79fb      	ldrb	r3, [r7, #7]
 800171e:	3301      	adds	r3, #1
 8001720:	71fb      	strb	r3, [r7, #7]
	while (token != NULL)
 8001722:	683b      	ldr	r3, [r7, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d1e5      	bne.n	80016f4 <ExtractMotionCode+0x60>
    }
	memset (RxPCBuff, '\0', sizeof (RxPCBuff)); // reset
 8001728:	2228      	movs	r2, #40	; 0x28
 800172a:	2100      	movs	r1, #0
 800172c:	4805      	ldr	r0, [pc, #20]	; (8001744 <ExtractMotionCode+0xb0>)
 800172e:	f008 f825 	bl	800977c <memset>
}
 8001732:	bf00      	nop
 8001734:	370c      	adds	r7, #12
 8001736:	46bd      	mov	sp, r7
 8001738:	bd90      	pop	{r4, r7, pc}
 800173a:	bf00      	nop
 800173c:	200004f8 	.word	0x200004f8
 8001740:	200003dc 	.word	0x200003dc
 8001744:	2000037c 	.word	0x2000037c
 8001748:	0800ddd8 	.word	0x0800ddd8

0800174c <ReadMultiRegister>:
//	}
//}


void ReadMultiRegister(uint16_t StartingAddress, uint8_t NoOfRegister) // Read data from the Driver
{
 800174c:	b580      	push	{r7, lr}
 800174e:	b088      	sub	sp, #32
 8001750:	af00      	add	r7, sp, #0
 8001752:	4603      	mov	r3, r0
 8001754:	460a      	mov	r2, r1
 8001756:	80fb      	strh	r3, [r7, #6]
 8001758:	4613      	mov	r3, r2
 800175a:	717b      	strb	r3, [r7, #5]
	// Prepare data frame -- BEGIN
	uint8_t TxDataToDriver[8]; // 8 bytes of data frame
	
	// Data preparation
	TxDataToDriver[0] = DriverID;//SerialID = 1 of the driver
 800175c:	2301      	movs	r3, #1
 800175e:	733b      	strb	r3, [r7, #12]
	TxDataToDriver[1] = 3;//Read Regis, function code	
 8001760:	2303      	movs	r3, #3
 8001762:	737b      	strb	r3, [r7, #13]
	TxDataToDriver[2] = StartingAddress / 256; // Register Address High byte
 8001764:	88fb      	ldrh	r3, [r7, #6]
 8001766:	0a1b      	lsrs	r3, r3, #8
 8001768:	b29b      	uxth	r3, r3
 800176a:	b2db      	uxtb	r3, r3
 800176c:	73bb      	strb	r3, [r7, #14]
    TxDataToDriver[3] = StartingAddress % 256; // Register Address LOW byte
 800176e:	88fb      	ldrh	r3, [r7, #6]
 8001770:	b2db      	uxtb	r3, r3
 8001772:	73fb      	strb	r3, [r7, #15]
	TxDataToDriver[4] = 0; // Number of Register HIGH byte
 8001774:	2300      	movs	r3, #0
 8001776:	743b      	strb	r3, [r7, #16]
	TxDataToDriver[5] = NoOfRegister; // Number of Register LOW byte
 8001778:	797b      	ldrb	r3, [r7, #5]
 800177a:	747b      	strb	r3, [r7, #17]
	
	//CRC BEGIN=======
				uint16_t crc = 0xFFFF;
 800177c:	f64f 73ff 	movw	r3, #65535	; 0xffff
 8001780:	83fb      	strh	r3, [r7, #30]
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++) 
 8001782:	2300      	movs	r3, #0
 8001784:	61bb      	str	r3, [r7, #24]
 8001786:	e027      	b.n	80017d8 <ReadMultiRegister+0x8c>
				{	crc ^= (uint16_t)TxDataToDriver[pos];          // XOR byte into least sig. byte of crc
 8001788:	f107 020c 	add.w	r2, r7, #12
 800178c:	69bb      	ldr	r3, [r7, #24]
 800178e:	4413      	add	r3, r2
 8001790:	781b      	ldrb	r3, [r3, #0]
 8001792:	b29a      	uxth	r2, r3
 8001794:	8bfb      	ldrh	r3, [r7, #30]
 8001796:	4053      	eors	r3, r2
 8001798:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--) 
 800179a:	2308      	movs	r3, #8
 800179c:	617b      	str	r3, [r7, #20]
 800179e:	e015      	b.n	80017cc <ReadMultiRegister+0x80>
					{    // Loop over each bit
						if ((crc & 0x0001) != 0) 
 80017a0:	8bfb      	ldrh	r3, [r7, #30]
 80017a2:	f003 0301 	and.w	r3, r3, #1
 80017a6:	2b00      	cmp	r3, #0
 80017a8:	d00a      	beq.n	80017c0 <ReadMultiRegister+0x74>
						{      // If the LSB is set
							crc >>= 1;                    // Shift right and XOR 0xA001
 80017aa:	8bfb      	ldrh	r3, [r7, #30]
 80017ac:	085b      	lsrs	r3, r3, #1
 80017ae:	83fb      	strh	r3, [r7, #30]
							crc ^= 0xA001;
 80017b0:	8bfb      	ldrh	r3, [r7, #30]
 80017b2:	f483 43bf 	eor.w	r3, r3, #24448	; 0x5f80
 80017b6:	f083 037e 	eor.w	r3, r3, #126	; 0x7e
 80017ba:	43db      	mvns	r3, r3
 80017bc:	83fb      	strh	r3, [r7, #30]
 80017be:	e002      	b.n	80017c6 <ReadMultiRegister+0x7a>
						}
						else                            // Else LSB is not set
							crc >>= 1;                    // Just shift right
 80017c0:	8bfb      	ldrh	r3, [r7, #30]
 80017c2:	085b      	lsrs	r3, r3, #1
 80017c4:	83fb      	strh	r3, [r7, #30]
					for (int i = 8; i != 0; i--) 
 80017c6:	697b      	ldr	r3, [r7, #20]
 80017c8:	3b01      	subs	r3, #1
 80017ca:	617b      	str	r3, [r7, #20]
 80017cc:	697b      	ldr	r3, [r7, #20]
 80017ce:	2b00      	cmp	r3, #0
 80017d0:	d1e6      	bne.n	80017a0 <ReadMultiRegister+0x54>
				for (int pos = 0; pos < 6; pos++) //for (int pos = 0; pos < raw_msg_data.length()/2; pos++) 
 80017d2:	69bb      	ldr	r3, [r7, #24]
 80017d4:	3301      	adds	r3, #1
 80017d6:	61bb      	str	r3, [r7, #24]
 80017d8:	69bb      	ldr	r3, [r7, #24]
 80017da:	2b05      	cmp	r3, #5
 80017dc:	ddd4      	ble.n	8001788 <ReadMultiRegister+0x3c>
					}
				}
	TxDataToDriver[6]= (uint8_t)(crc&0x00FF);;//(uint8_t)(TemDat16&0xFF);
 80017de:	8bfb      	ldrh	r3, [r7, #30]
 80017e0:	b2db      	uxtb	r3, r3
 80017e2:	74bb      	strb	r3, [r7, #18]
	TxDataToDriver[7]=(uint8_t)((crc>>8)&0x00FF);				
 80017e4:	8bfb      	ldrh	r3, [r7, #30]
 80017e6:	0a1b      	lsrs	r3, r3, #8
 80017e8:	b29b      	uxth	r3, r3
 80017ea:	b2db      	uxtb	r3, r3
 80017ec:	74fb      	strb	r3, [r7, #19]
	//CRC=====END/
	// Prepare data frame -- END
	// Send data use UART5
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_RESET); //Switch to transmit mode
 80017ee:	2200      	movs	r2, #0
 80017f0:	2101      	movs	r1, #1
 80017f2:	480c      	ldr	r0, [pc, #48]	; (8001824 <ReadMultiRegister+0xd8>)
 80017f4:	f005 fbc4 	bl	8006f80 <HAL_GPIO_WritePin>
//	HAL_Delay(1);
	HAL_UART_Transmit(&huart5,TxDataToDriver,sizeof(TxDataToDriver),200); // use UART5 to send
 80017f8:	f107 010c 	add.w	r1, r7, #12
 80017fc:	23c8      	movs	r3, #200	; 0xc8
 80017fe:	2208      	movs	r2, #8
 8001800:	4809      	ldr	r0, [pc, #36]	; (8001828 <ReadMultiRegister+0xdc>)
 8001802:	f006 ff66 	bl	80086d2 <HAL_UART_Transmit>
	HAL_GPIO_WritePin(PE0_485_MCU_DRV_DIR_GPIO_Port, PE0_485_MCU_DRV_DIR_Pin, GPIO_PIN_SET);	//Switch back to receive mode
 8001806:	2201      	movs	r2, #1
 8001808:	2101      	movs	r1, #1
 800180a:	4806      	ldr	r0, [pc, #24]	; (8001824 <ReadMultiRegister+0xd8>)
 800180c:	f005 fbb8 	bl	8006f80 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time
 8001810:	2201      	movs	r2, #1
 8001812:	4906      	ldr	r1, [pc, #24]	; (800182c <ReadMultiRegister+0xe0>)
 8001814:	4804      	ldr	r0, [pc, #16]	; (8001828 <ReadMultiRegister+0xdc>)
 8001816:	f006 ffee 	bl	80087f6 <HAL_UART_Receive_IT>
	
	/// For debug only, should be comment out latter
	//uint8_t u8_TxPCBuff[20]="< Read Data";
	//HAL_UART_Transmit(&huart6,u8_TxPCBuff,sizeof(u8_TxPCBuff),1000);	
	/// Dubug END
}
 800181a:	bf00      	nop
 800181c:	3720      	adds	r7, #32
 800181e:	46bd      	mov	sp, r7
 8001820:	bd80      	pop	{r7, pc}
 8001822:	bf00      	nop
 8001824:	40021000 	.word	0x40021000
 8001828:	200002b0 	.word	0x200002b0
 800182c:	20000405 	.word	0x20000405

08001830 <LoadSavedParam>:



void LoadSavedParam (uint32_t StartSectorAddress, float *_Param)
{
 8001830:	b590      	push	{r4, r7, lr}
 8001832:	b09f      	sub	sp, #124	; 0x7c
 8001834:	af00      	add	r7, sp, #0
 8001836:	6078      	str	r0, [r7, #4]
 8001838:	6039      	str	r1, [r7, #0]
	uint8_t LoadDataBuff[100];
	
	Flash_Read_Data(StartSectorAddress, (uint32_t *)LoadDataBuff, numofwords);
 800183a:	4b1a      	ldr	r3, [pc, #104]	; (80018a4 <LoadSavedParam+0x74>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b29a      	uxth	r2, r3
 8001840:	f107 030c 	add.w	r3, r7, #12
 8001844:	4619      	mov	r1, r3
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff fcae 	bl	80011a8 <Flash_Read_Data>
	
	uint8_t	j = 0;
 800184c:	2300      	movs	r3, #0
 800184e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	char *token;
	token = strtok((char *)LoadDataBuff, "/");	// Split the command ~ remove the / character
 8001852:	f107 030c 	add.w	r3, r7, #12
 8001856:	4914      	ldr	r1, [pc, #80]	; (80018a8 <LoadSavedParam+0x78>)
 8001858:	4618      	mov	r0, r3
 800185a:	f009 fa4f 	bl	800acfc <strtok>
 800185e:	6738      	str	r0, [r7, #112]	; 0x70
	while (token != NULL)
 8001860:	e017      	b.n	8001892 <LoadSavedParam+0x62>
    {
				_Param[j] = (atof(token)); // covert to float type 
 8001862:	6f38      	ldr	r0, [r7, #112]	; 0x70
 8001864:	f007 ff5c 	bl	8009720 <atof>
 8001868:	ec51 0b10 	vmov	r0, r1, d0
 800186c:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 8001870:	009b      	lsls	r3, r3, #2
 8001872:	683a      	ldr	r2, [r7, #0]
 8001874:	18d4      	adds	r4, r2, r3
 8001876:	f7ff f9b7 	bl	8000be8 <__aeabi_d2f>
 800187a:	4603      	mov	r3, r0
 800187c:	6023      	str	r3, [r4, #0]
        token = strtok(NULL, "/");
 800187e:	490a      	ldr	r1, [pc, #40]	; (80018a8 <LoadSavedParam+0x78>)
 8001880:	2000      	movs	r0, #0
 8001882:	f009 fa3b 	bl	800acfc <strtok>
 8001886:	6738      	str	r0, [r7, #112]	; 0x70
				j++;
 8001888:	f897 3077 	ldrb.w	r3, [r7, #119]	; 0x77
 800188c:	3301      	adds	r3, #1
 800188e:	f887 3077 	strb.w	r3, [r7, #119]	; 0x77
	while (token != NULL)
 8001892:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8001894:	2b00      	cmp	r3, #0
 8001896:	d1e4      	bne.n	8001862 <LoadSavedParam+0x32>
    }
}
 8001898:	bf00      	nop
 800189a:	bf00      	nop
 800189c:	377c      	adds	r7, #124	; 0x7c
 800189e:	46bd      	mov	sp, r7
 80018a0:	bd90      	pop	{r4, r7, pc}
 80018a2:	bf00      	nop
 80018a4:	2000000a 	.word	0x2000000a
 80018a8:	0800ddd8 	.word	0x0800ddd8

080018ac <SaveSystemParams>:

void SaveSystemParams ()
{
 80018ac:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80018b0:	b0b9      	sub	sp, #228	; 0xe4
 80018b2:	af16      	add	r7, sp, #88	; 0x58
	char SaveBuffer[80];
	TxPCLen = sprintf(SaveBuffer,"%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4f"
 80018b4:	4b50      	ldr	r3, [pc, #320]	; (80019f8 <SaveSystemParams+0x14c>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	4618      	mov	r0, r3
 80018ba:	f7fe fe45 	bl	8000548 <__aeabi_f2d>
 80018be:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 80018c2:	4b4e      	ldr	r3, [pc, #312]	; (80019fc <SaveSystemParams+0x150>)
 80018c4:	781b      	ldrb	r3, [r3, #0]
 80018c6:	461e      	mov	r6, r3
 80018c8:	4b4d      	ldr	r3, [pc, #308]	; (8001a00 <SaveSystemParams+0x154>)
 80018ca:	881b      	ldrh	r3, [r3, #0]
 80018cc:	62fb      	str	r3, [r7, #44]	; 0x2c
 80018ce:	4b4d      	ldr	r3, [pc, #308]	; (8001a04 <SaveSystemParams+0x158>)
 80018d0:	781b      	ldrb	r3, [r3, #0]
 80018d2:	62bb      	str	r3, [r7, #40]	; 0x28
 80018d4:	4b4c      	ldr	r3, [pc, #304]	; (8001a08 <SaveSystemParams+0x15c>)
 80018d6:	681b      	ldr	r3, [r3, #0]
 80018d8:	4618      	mov	r0, r3
 80018da:	f7fe fe35 	bl	8000548 <__aeabi_f2d>
 80018de:	e9c7 0108 	strd	r0, r1, [r7, #32]
 80018e2:	4b4a      	ldr	r3, [pc, #296]	; (8001a0c <SaveSystemParams+0x160>)
 80018e4:	681b      	ldr	r3, [r3, #0]
 80018e6:	4618      	mov	r0, r3
 80018e8:	f7fe fe2e 	bl	8000548 <__aeabi_f2d>
 80018ec:	e9c7 0106 	strd	r0, r1, [r7, #24]
 80018f0:	4b47      	ldr	r3, [pc, #284]	; (8001a10 <SaveSystemParams+0x164>)
 80018f2:	681b      	ldr	r3, [r3, #0]
 80018f4:	4618      	mov	r0, r3
 80018f6:	f7fe fe27 	bl	8000548 <__aeabi_f2d>
 80018fa:	e9c7 0104 	strd	r0, r1, [r7, #16]
 80018fe:	4b45      	ldr	r3, [pc, #276]	; (8001a14 <SaveSystemParams+0x168>)
 8001900:	681b      	ldr	r3, [r3, #0]
 8001902:	4618      	mov	r0, r3
 8001904:	f7fe fe20 	bl	8000548 <__aeabi_f2d>
 8001908:	e9c7 0102 	strd	r0, r1, [r7, #8]
 800190c:	4b42      	ldr	r3, [pc, #264]	; (8001a18 <SaveSystemParams+0x16c>)
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	4618      	mov	r0, r3
 8001912:	f7fe fe19 	bl	8000548 <__aeabi_f2d>
 8001916:	e9c7 0100 	strd	r0, r1, [r7]
 800191a:	4b40      	ldr	r3, [pc, #256]	; (8001a1c <SaveSystemParams+0x170>)
 800191c:	681b      	ldr	r3, [r3, #0]
 800191e:	4618      	mov	r0, r3
 8001920:	f7fe fe12 	bl	8000548 <__aeabi_f2d>
 8001924:	4682      	mov	sl, r0
 8001926:	468b      	mov	fp, r1
 8001928:	4b3d      	ldr	r3, [pc, #244]	; (8001a20 <SaveSystemParams+0x174>)
 800192a:	681b      	ldr	r3, [r3, #0]
 800192c:	4618      	mov	r0, r3
 800192e:	f7fe fe0b 	bl	8000548 <__aeabi_f2d>
 8001932:	4680      	mov	r8, r0
 8001934:	4689      	mov	r9, r1
 8001936:	4b3b      	ldr	r3, [pc, #236]	; (8001a24 <SaveSystemParams+0x178>)
 8001938:	681b      	ldr	r3, [r3, #0]
 800193a:	4618      	mov	r0, r3
 800193c:	f7fe fe04 	bl	8000548 <__aeabi_f2d>
 8001940:	4604      	mov	r4, r0
 8001942:	460d      	mov	r5, r1
 8001944:	4b38      	ldr	r3, [pc, #224]	; (8001a28 <SaveSystemParams+0x17c>)
 8001946:	681b      	ldr	r3, [r3, #0]
 8001948:	4618      	mov	r0, r3
 800194a:	f7fe fdfd 	bl	8000548 <__aeabi_f2d>
 800194e:	4602      	mov	r2, r0
 8001950:	460b      	mov	r3, r1
 8001952:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8001956:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 800195a:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 800195e:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8001962:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8001966:	ed97 7b00 	vldr	d7, [r7]
 800196a:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 800196e:	ed97 7b02 	vldr	d7, [r7, #8]
 8001972:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8001976:	ed97 7b04 	vldr	d7, [r7, #16]
 800197a:	ed8d 7b08 	vstr	d7, [sp, #32]
 800197e:	ed97 7b06 	vldr	d7, [r7, #24]
 8001982:	ed8d 7b06 	vstr	d7, [sp, #24]
 8001986:	ed97 7b08 	vldr	d7, [r7, #32]
 800198a:	ed8d 7b04 	vstr	d7, [sp, #16]
 800198e:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8001990:	9102      	str	r1, [sp, #8]
 8001992:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8001994:	9301      	str	r3, [sp, #4]
 8001996:	9600      	str	r6, [sp, #0]
 8001998:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800199c:	4923      	ldr	r1, [pc, #140]	; (8001a2c <SaveSystemParams+0x180>)
 800199e:	f008 fb5f 	bl	800a060 <siprintf>
 80019a2:	4603      	mov	r3, r0
 80019a4:	b2da      	uxtb	r2, r3
 80019a6:	4b22      	ldr	r3, [pc, #136]	; (8001a30 <SaveSystemParams+0x184>)
 80019a8:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime,
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
										 Kp, Ki, Kd); // Combine to a string
	numofwords = (strlen(SaveBuffer)/4)+((strlen(SaveBuffer)%4)!=0);
 80019aa:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fc0e 	bl	80001d0 <strlen>
 80019b4:	4603      	mov	r3, r0
 80019b6:	089b      	lsrs	r3, r3, #2
 80019b8:	b2dc      	uxtb	r4, r3
 80019ba:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019be:	4618      	mov	r0, r3
 80019c0:	f7fe fc06 	bl	80001d0 <strlen>
 80019c4:	4603      	mov	r3, r0
 80019c6:	f003 0303 	and.w	r3, r3, #3
 80019ca:	2b00      	cmp	r3, #0
 80019cc:	bf14      	ite	ne
 80019ce:	2301      	movne	r3, #1
 80019d0:	2300      	moveq	r3, #0
 80019d2:	b2db      	uxtb	r3, r3
 80019d4:	4423      	add	r3, r4
 80019d6:	b2da      	uxtb	r2, r3
 80019d8:	4b16      	ldr	r3, [pc, #88]	; (8001a34 <SaveSystemParams+0x188>)
 80019da:	701a      	strb	r2, [r3, #0]
	Flash_Write_Data(MemoryAddress , (uint32_t *)SaveBuffer, numofwords);
 80019dc:	4b15      	ldr	r3, [pc, #84]	; (8001a34 <SaveSystemParams+0x188>)
 80019de:	781b      	ldrb	r3, [r3, #0]
 80019e0:	b29a      	uxth	r2, r3
 80019e2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80019e6:	4619      	mov	r1, r3
 80019e8:	4813      	ldr	r0, [pc, #76]	; (8001a38 <SaveSystemParams+0x18c>)
 80019ea:	f7ff fb7f 	bl	80010ec <Flash_Write_Data>
}
 80019ee:	bf00      	nop
 80019f0:	378c      	adds	r7, #140	; 0x8c
 80019f2:	46bd      	mov	sp, r7
 80019f4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80019f8:	20000458 	.word	0x20000458
 80019fc:	2000045d 	.word	0x2000045d
 8001a00:	2000045e 	.word	0x2000045e
 8001a04:	2000045c 	.word	0x2000045c
 8001a08:	20000478 	.word	0x20000478
 8001a0c:	20000464 	.word	0x20000464
 8001a10:	20000468 	.word	0x20000468
 8001a14:	20000498 	.word	0x20000498
 8001a18:	2000047c 	.word	0x2000047c
 8001a1c:	20000480 	.word	0x20000480
 8001a20:	20000518 	.word	0x20000518
 8001a24:	2000051c 	.word	0x2000051c
 8001a28:	20000520 	.word	0x20000520
 8001a2c:	0800dddc 	.word	0x0800dddc
 8001a30:	20000426 	.word	0x20000426
 8001a34:	2000000a 	.word	0x2000000a
 8001a38:	08040000 	.word	0x08040000
 8001a3c:	00000000 	.word	0x00000000

08001a40 <LinearGeneration>:

void LinearGeneration (float *var, float slope, float Amplitude)
// Amplitude is the limit of the value
{
 8001a40:	b5b0      	push	{r4, r5, r7, lr}
 8001a42:	b084      	sub	sp, #16
 8001a44:	af00      	add	r7, sp, #0
 8001a46:	60f8      	str	r0, [r7, #12]
 8001a48:	ed87 0a02 	vstr	s0, [r7, #8]
 8001a4c:	edc7 0a01 	vstr	s1, [r7, #4]

//	float ReturnValue;
//	ReturnValue = (InitialValue + (float)(slope*Time*0.001)); //
	if (slope >= 0)
 8001a50:	edd7 7a02 	vldr	s15, [r7, #8]
 8001a54:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001a58:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a5c:	db0d      	blt.n	8001a7a <LinearGeneration+0x3a>
	{
		if (*var >= Amplitude)
 8001a5e:	68fb      	ldr	r3, [r7, #12]
 8001a60:	edd3 7a00 	vldr	s15, [r3]
 8001a64:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a68:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a6c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a70:	d811      	bhi.n	8001a96 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001a72:	68fb      	ldr	r3, [r7, #12]
 8001a74:	687a      	ldr	r2, [r7, #4]
 8001a76:	601a      	str	r2, [r3, #0]
				return;
 8001a78:	e036      	b.n	8001ae8 <LinearGeneration+0xa8>
			}
	}
	else
	{
		if (*var <= Amplitude)
 8001a7a:	68fb      	ldr	r3, [r7, #12]
 8001a7c:	edd3 7a00 	vldr	s15, [r3]
 8001a80:	ed97 7a01 	vldr	s14, [r7, #4]
 8001a84:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001a88:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a8c:	db03      	blt.n	8001a96 <LinearGeneration+0x56>
			{
				*var = Amplitude;
 8001a8e:	68fb      	ldr	r3, [r7, #12]
 8001a90:	687a      	ldr	r2, [r7, #4]
 8001a92:	601a      	str	r2, [r3, #0]
				return;
 8001a94:	e028      	b.n	8001ae8 <LinearGeneration+0xa8>
			}
	}
	*var += slope*SampleTime*0.001; // *0.001 to convert to second
 8001a96:	68fb      	ldr	r3, [r7, #12]
 8001a98:	681b      	ldr	r3, [r3, #0]
 8001a9a:	4618      	mov	r0, r3
 8001a9c:	f7fe fd54 	bl	8000548 <__aeabi_f2d>
 8001aa0:	4604      	mov	r4, r0
 8001aa2:	460d      	mov	r5, r1
 8001aa4:	4b14      	ldr	r3, [pc, #80]	; (8001af8 <LinearGeneration+0xb8>)
 8001aa6:	781b      	ldrb	r3, [r3, #0]
 8001aa8:	ee07 3a90 	vmov	s15, r3
 8001aac:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001ab0:	edd7 7a02 	vldr	s15, [r7, #8]
 8001ab4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001ab8:	ee17 0a90 	vmov	r0, s15
 8001abc:	f7fe fd44 	bl	8000548 <__aeabi_f2d>
 8001ac0:	a30b      	add	r3, pc, #44	; (adr r3, 8001af0 <LinearGeneration+0xb0>)
 8001ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001ac6:	f7fe fd97 	bl	80005f8 <__aeabi_dmul>
 8001aca:	4602      	mov	r2, r0
 8001acc:	460b      	mov	r3, r1
 8001ace:	4620      	mov	r0, r4
 8001ad0:	4629      	mov	r1, r5
 8001ad2:	f7fe fbdb 	bl	800028c <__adddf3>
 8001ad6:	4602      	mov	r2, r0
 8001ad8:	460b      	mov	r3, r1
 8001ada:	4610      	mov	r0, r2
 8001adc:	4619      	mov	r1, r3
 8001ade:	f7ff f883 	bl	8000be8 <__aeabi_d2f>
 8001ae2:	4602      	mov	r2, r0
 8001ae4:	68fb      	ldr	r3, [r7, #12]
 8001ae6:	601a      	str	r2, [r3, #0]
}
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bdb0      	pop	{r4, r5, r7, pc}
 8001aee:	bf00      	nop
 8001af0:	d2f1a9fc 	.word	0xd2f1a9fc
 8001af4:	3f50624d 	.word	0x3f50624d
 8001af8:	2000045c 	.word	0x2000045c

08001afc <StopPulseGenerating>:


void StopPulseGenerating()
{	
 8001afc:	b580      	push	{r7, lr}
 8001afe:	af00      	add	r7, sp, #0
	PulseGenerationFlag = false; // 
 8001b00:	4b09      	ldr	r3, [pc, #36]	; (8001b28 <StopPulseGenerating+0x2c>)
 8001b02:	2200      	movs	r2, #0
 8001b04:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Stop_IT(&htim3); // Disable Timer3
 8001b06:	4809      	ldr	r0, [pc, #36]	; (8001b2c <StopPulseGenerating+0x30>)
 8001b08:	f005 ff86 	bl	8007a18 <HAL_TIM_Base_Stop_IT>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_RESET);//Reset Pin status
 8001b0c:	2200      	movs	r2, #0
 8001b0e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b12:	4807      	ldr	r0, [pc, #28]	; (8001b30 <StopPulseGenerating+0x34>)
 8001b14:	f005 fa34 	bl	8006f80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port,PC8_PR_Pin, GPIO_PIN_RESET);//Reset Pin status	
 8001b18:	2200      	movs	r2, #0
 8001b1a:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b1e:	4805      	ldr	r0, [pc, #20]	; (8001b34 <StopPulseGenerating+0x38>)
 8001b20:	f005 fa2e 	bl	8006f80 <HAL_GPIO_WritePin>
}
 8001b24:	bf00      	nop
 8001b26:	bd80      	pop	{r7, pc}
 8001b28:	2000043b 	.word	0x2000043b
 8001b2c:	20000268 	.word	0x20000268
 8001b30:	40021000 	.word	0x40021000
 8001b34:	40020800 	.word	0x40020800

08001b38 <StartPulseGenerating>:
void StartPulseGenerating()
{
 8001b38:	b580      	push	{r7, lr}
 8001b3a:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(PC8_PR_GPIO_Port, PC8_PR_Pin, GPIO_PIN_SET); // Set CW direction	
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001b42:	4808      	ldr	r0, [pc, #32]	; (8001b64 <StartPulseGenerating+0x2c>)
 8001b44:	f005 fa1c 	bl	8006f80 <HAL_GPIO_WritePin>
	HAL_GPIO_WritePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin,GPIO_PIN_SET);
 8001b48:	2201      	movs	r2, #1
 8001b4a:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001b4e:	4806      	ldr	r0, [pc, #24]	; (8001b68 <StartPulseGenerating+0x30>)
 8001b50:	f005 fa16 	bl	8006f80 <HAL_GPIO_WritePin>
	PulseGenerationFlag = true; // PR phase is 90 deg late
 8001b54:	4b05      	ldr	r3, [pc, #20]	; (8001b6c <StartPulseGenerating+0x34>)
 8001b56:	2201      	movs	r2, #1
 8001b58:	701a      	strb	r2, [r3, #0]
	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer3		
 8001b5a:	4805      	ldr	r0, [pc, #20]	; (8001b70 <StartPulseGenerating+0x38>)
 8001b5c:	f005 feec 	bl	8007938 <HAL_TIM_Base_Start_IT>
}
 8001b60:	bf00      	nop
 8001b62:	bd80      	pop	{r7, pc}
 8001b64:	40020800 	.word	0x40020800
 8001b68:	40021000 	.word	0x40021000
 8001b6c:	2000043b 	.word	0x2000043b
 8001b70:	20000268 	.word	0x20000268

08001b74 <WaitingMiliSecond>:
bool WaitingMiliSecond(uint16_t TimeInMiliSecond)
{
 8001b74:	b480      	push	{r7}
 8001b76:	b083      	sub	sp, #12
 8001b78:	af00      	add	r7, sp, #0
 8001b7a:	4603      	mov	r3, r0
 8001b7c:	80fb      	strh	r3, [r7, #6]
	StoppingTimeCount++;
 8001b7e:	4b0e      	ldr	r3, [pc, #56]	; (8001bb8 <WaitingMiliSecond+0x44>)
 8001b80:	881b      	ldrh	r3, [r3, #0]
 8001b82:	3301      	adds	r3, #1
 8001b84:	b29a      	uxth	r2, r3
 8001b86:	4b0c      	ldr	r3, [pc, #48]	; (8001bb8 <WaitingMiliSecond+0x44>)
 8001b88:	801a      	strh	r2, [r3, #0]
	if (StoppingTimeCount >= (uint16_t)(TimeInMiliSecond/SampleTime))
 8001b8a:	88fb      	ldrh	r3, [r7, #6]
 8001b8c:	4a0b      	ldr	r2, [pc, #44]	; (8001bbc <WaitingMiliSecond+0x48>)
 8001b8e:	7812      	ldrb	r2, [r2, #0]
 8001b90:	fb93 f3f2 	sdiv	r3, r3, r2
 8001b94:	b29a      	uxth	r2, r3
 8001b96:	4b08      	ldr	r3, [pc, #32]	; (8001bb8 <WaitingMiliSecond+0x44>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	429a      	cmp	r2, r3
 8001b9c:	d804      	bhi.n	8001ba8 <WaitingMiliSecond+0x34>
	{
		StoppingTimeCount = 0;
 8001b9e:	4b06      	ldr	r3, [pc, #24]	; (8001bb8 <WaitingMiliSecond+0x44>)
 8001ba0:	2200      	movs	r2, #0
 8001ba2:	801a      	strh	r2, [r3, #0]
		return true;
 8001ba4:	2301      	movs	r3, #1
 8001ba6:	e000      	b.n	8001baa <WaitingMiliSecond+0x36>
	}
	return false;
 8001ba8:	2300      	movs	r3, #0
}
 8001baa:	4618      	mov	r0, r3
 8001bac:	370c      	adds	r7, #12
 8001bae:	46bd      	mov	sp, r7
 8001bb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001bb4:	4770      	bx	lr
 8001bb6:	bf00      	nop
 8001bb8:	20000454 	.word	0x20000454
 8001bbc:	2000045c 	.word	0x2000045c

08001bc0 <CalculateTimer3Period>:

int CalculateTimer3Period (bool DriverType, float speed)
{
 8001bc0:	b5b0      	push	{r4, r5, r7, lr}
 8001bc2:	b082      	sub	sp, #8
 8001bc4:	af00      	add	r7, sp, #0
 8001bc6:	4603      	mov	r3, r0
 8001bc8:	ed87 0a00 	vstr	s0, [r7]
 8001bcc:	71fb      	strb	r3, [r7, #7]
	// DriverType = true ->  Higen FDA7000 Driver
	// DriverType = false -> ASDA A3 Driver
	if (DriverType) // Higen FDA7000 Driver
 8001bce:	79fb      	ldrb	r3, [r7, #7]
 8001bd0:	2b00      	cmp	r3, #0
 8001bd2:	d037      	beq.n	8001c44 <CalculateTimer3Period+0x84>
	{
		return (int)((float)(120000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001bd4:	edd7 7a00 	vldr	s15, [r7]
 8001bd8:	eef0 7ae7 	vabs.f32	s15, s15
 8001bdc:	ee17 0a90 	vmov	r0, s15
 8001be0:	f7fe fcb2 	bl	8000548 <__aeabi_f2d>
 8001be4:	4604      	mov	r4, r0
 8001be6:	460d      	mov	r5, r1
 8001be8:	4b39      	ldr	r3, [pc, #228]	; (8001cd0 <CalculateTimer3Period+0x110>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	ee07 3a90 	vmov	s15, r3
 8001bf0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001bf4:	ee17 0a90 	vmov	r0, s15
 8001bf8:	f7fe fca6 	bl	8000548 <__aeabi_f2d>
 8001bfc:	4602      	mov	r2, r0
 8001bfe:	460b      	mov	r3, r1
 8001c00:	4620      	mov	r0, r4
 8001c02:	4629      	mov	r1, r5
 8001c04:	f7fe fcf8 	bl	80005f8 <__aeabi_dmul>
 8001c08:	4602      	mov	r2, r0
 8001c0a:	460b      	mov	r3, r1
 8001c0c:	a12c      	add	r1, pc, #176	; (adr r1, 8001cc0 <CalculateTimer3Period+0x100>)
 8001c0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c12:	f7fe fe1b 	bl	800084c <__aeabi_ddiv>
 8001c16:	4602      	mov	r2, r0
 8001c18:	460b      	mov	r3, r1
 8001c1a:	4610      	mov	r0, r2
 8001c1c:	4619      	mov	r1, r3
 8001c1e:	f7fe ffe3 	bl	8000be8 <__aeabi_d2f>
 8001c22:	4603      	mov	r3, r0
 8001c24:	4618      	mov	r0, r3
 8001c26:	f7fe fc8f 	bl	8000548 <__aeabi_f2d>
 8001c2a:	f04f 0200 	mov.w	r2, #0
 8001c2e:	4b29      	ldr	r3, [pc, #164]	; (8001cd4 <CalculateTimer3Period+0x114>)
 8001c30:	f7fe fb2c 	bl	800028c <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ff8c 	bl	8000b58 <__aeabi_d2iz>
 8001c40:	4603      	mov	r3, r0
 8001c42:	e036      	b.n	8001cb2 <CalculateTimer3Period+0xf2>
	}
	else
	{
		return (int)((float)(15000000.0/(fabs(speed)*(float)EncoderResolution)) + 0.5); // Set going speed
 8001c44:	edd7 7a00 	vldr	s15, [r7]
 8001c48:	eef0 7ae7 	vabs.f32	s15, s15
 8001c4c:	ee17 0a90 	vmov	r0, s15
 8001c50:	f7fe fc7a 	bl	8000548 <__aeabi_f2d>
 8001c54:	4604      	mov	r4, r0
 8001c56:	460d      	mov	r5, r1
 8001c58:	4b1d      	ldr	r3, [pc, #116]	; (8001cd0 <CalculateTimer3Period+0x110>)
 8001c5a:	881b      	ldrh	r3, [r3, #0]
 8001c5c:	ee07 3a90 	vmov	s15, r3
 8001c60:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c64:	ee17 0a90 	vmov	r0, s15
 8001c68:	f7fe fc6e 	bl	8000548 <__aeabi_f2d>
 8001c6c:	4602      	mov	r2, r0
 8001c6e:	460b      	mov	r3, r1
 8001c70:	4620      	mov	r0, r4
 8001c72:	4629      	mov	r1, r5
 8001c74:	f7fe fcc0 	bl	80005f8 <__aeabi_dmul>
 8001c78:	4602      	mov	r2, r0
 8001c7a:	460b      	mov	r3, r1
 8001c7c:	a112      	add	r1, pc, #72	; (adr r1, 8001cc8 <CalculateTimer3Period+0x108>)
 8001c7e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8001c82:	f7fe fde3 	bl	800084c <__aeabi_ddiv>
 8001c86:	4602      	mov	r2, r0
 8001c88:	460b      	mov	r3, r1
 8001c8a:	4610      	mov	r0, r2
 8001c8c:	4619      	mov	r1, r3
 8001c8e:	f7fe ffab 	bl	8000be8 <__aeabi_d2f>
 8001c92:	4603      	mov	r3, r0
 8001c94:	4618      	mov	r0, r3
 8001c96:	f7fe fc57 	bl	8000548 <__aeabi_f2d>
 8001c9a:	f04f 0200 	mov.w	r2, #0
 8001c9e:	4b0d      	ldr	r3, [pc, #52]	; (8001cd4 <CalculateTimer3Period+0x114>)
 8001ca0:	f7fe faf4 	bl	800028c <__adddf3>
 8001ca4:	4602      	mov	r2, r0
 8001ca6:	460b      	mov	r3, r1
 8001ca8:	4610      	mov	r0, r2
 8001caa:	4619      	mov	r1, r3
 8001cac:	f7fe ff54 	bl	8000b58 <__aeabi_d2iz>
 8001cb0:	4603      	mov	r3, r0
	}
}
 8001cb2:	4618      	mov	r0, r3
 8001cb4:	3708      	adds	r7, #8
 8001cb6:	46bd      	mov	sp, r7
 8001cb8:	bdb0      	pop	{r4, r5, r7, pc}
 8001cba:	bf00      	nop
 8001cbc:	f3af 8000 	nop.w
 8001cc0:	00000000 	.word	0x00000000
 8001cc4:	419c9c38 	.word	0x419c9c38
 8001cc8:	00000000 	.word	0x00000000
 8001ccc:	416c9c38 	.word	0x416c9c38
 8001cd0:	20000008 	.word	0x20000008
 8001cd4:	3fe00000 	.word	0x3fe00000

08001cd8 <CheckGoingToRefPosition>:

bool CheckGoingToRefPosition(bool _direction, int RefPulsePosition) // return true when finish going down, else return false;
// direction = true => go down, false => go up
{
 8001cd8:	b580      	push	{r7, lr}
 8001cda:	b082      	sub	sp, #8
 8001cdc:	af00      	add	r7, sp, #0
 8001cde:	4603      	mov	r3, r0
 8001ce0:	6039      	str	r1, [r7, #0]
 8001ce2:	71fb      	strb	r3, [r7, #7]
	if (MotorDriver) // FDA7000 Driver, PosCmd based
 8001ce4:	4bad      	ldr	r3, [pc, #692]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001ce6:	781b      	ldrb	r3, [r3, #0]
 8001ce8:	2b00      	cmp	r3, #0
 8001cea:	f000 80a9 	beq.w	8001e40 <CheckGoingToRefPosition+0x168>
	{
		//if (abs(RefPulsePosition - EgearRatio*PositionPulseCmd) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/120)) // Start reducing the speed
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/60))
 8001cee:	4bac      	ldr	r3, [pc, #688]	; (8001fa0 <CheckGoingToRefPosition+0x2c8>)
 8001cf0:	681b      	ldr	r3, [r3, #0]
 8001cf2:	683a      	ldr	r2, [r7, #0]
 8001cf4:	1ad2      	subs	r2, r2, r3
 8001cf6:	4bab      	ldr	r3, [pc, #684]	; (8001fa4 <CheckGoingToRefPosition+0x2cc>)
 8001cf8:	681b      	ldr	r3, [r3, #0]
 8001cfa:	4413      	add	r3, r2
 8001cfc:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001d00:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001d04:	4ba8      	ldr	r3, [pc, #672]	; (8001fa8 <CheckGoingToRefPosition+0x2d0>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	4619      	mov	r1, r3
 8001d0a:	4ba8      	ldr	r3, [pc, #672]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001d0c:	781b      	ldrb	r3, [r3, #0]
 8001d0e:	fb01 f303 	mul.w	r3, r1, r3
 8001d12:	49a7      	ldr	r1, [pc, #668]	; (8001fb0 <CheckGoingToRefPosition+0x2d8>)
 8001d14:	fb81 0103 	smull	r0, r1, r1, r3
 8001d18:	10c9      	asrs	r1, r1, #3
 8001d1a:	17db      	asrs	r3, r3, #31
 8001d1c:	1acb      	subs	r3, r1, r3
 8001d1e:	429a      	cmp	r2, r3
 8001d20:	dc30      	bgt.n	8001d84 <CheckGoingToRefPosition+0xac>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001d22:	79fb      	ldrb	r3, [r7, #7]
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d010      	beq.n	8001d4a <CheckGoingToRefPosition+0x72>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20); //-EpsilonPulling means the spd is negative
 8001d28:	4ba2      	ldr	r3, [pc, #648]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	eef1 7a67 	vneg.f32	s15, s15
 8001d32:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d36:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d3a:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001d3e:	eeb0 0a67 	vmov.f32	s0, s15
 8001d42:	489d      	ldr	r0, [pc, #628]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001d44:	f7ff fe7c 	bl	8001a40 <LinearGeneration>
 8001d48:	e00d      	b.n	8001d66 <CheckGoingToRefPosition+0x8e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10,PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20); //-EpsilonPulling means the spd is negative
 8001d4a:	4b9a      	ldr	r3, [pc, #616]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001d4c:	edd3 7a00 	vldr	s15, [r3]
 8001d50:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d54:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d58:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001d5c:	eeb0 0a67 	vmov.f32	s0, s15
 8001d60:	4895      	ldr	r0, [pc, #596]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001d62:	f7ff fe6d 	bl	8001a40 <LinearGeneration>
			}
			Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);			
 8001d66:	4b8d      	ldr	r3, [pc, #564]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001d68:	781b      	ldrb	r3, [r3, #0]
 8001d6a:	4a93      	ldr	r2, [pc, #588]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001d6c:	edd2 7a00 	vldr	s15, [r2]
 8001d70:	eeb0 0a67 	vmov.f32	s0, s15
 8001d74:	4618      	mov	r0, r3
 8001d76:	f7ff ff23 	bl	8001bc0 <CalculateTimer3Period>
 8001d7a:	4603      	mov	r3, r0
 8001d7c:	b29a      	uxth	r2, r3
 8001d7e:	4b8f      	ldr	r3, [pc, #572]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001d80:	801a      	strh	r2, [r3, #0]
 8001d82:	e044      	b.n	8001e0e <CheckGoingToRefPosition+0x136>
		}
		else // Acclerate going
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001d84:	79fb      	ldrb	r3, [r7, #7]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d014      	beq.n	8001db4 <CheckGoingToRefPosition+0xdc>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001d8a:	4b8a      	ldr	r3, [pc, #552]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001d8c:	edd3 7a00 	vldr	s15, [r3]
 8001d90:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001d94:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d98:	4b84      	ldr	r3, [pc, #528]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001d9a:	781b      	ldrb	r3, [r3, #0]
 8001d9c:	ee07 3a10 	vmov	s14, r3
 8001da0:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001da4:	eef0 0a47 	vmov.f32	s1, s14
 8001da8:	eeb0 0a67 	vmov.f32	s0, s15
 8001dac:	4882      	ldr	r0, [pc, #520]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001dae:	f7ff fe47 	bl	8001a40 <LinearGeneration>
 8001db2:	e016      	b.n	8001de2 <CheckGoingToRefPosition+0x10a>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed); //-EpsilonPulling means the spd is negative
 8001db4:	4b7f      	ldr	r3, [pc, #508]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001db6:	edd3 7a00 	vldr	s15, [r3]
 8001dba:	eef1 7a67 	vneg.f32	s15, s15
 8001dbe:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001dc2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001dc6:	4b79      	ldr	r3, [pc, #484]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001dc8:	781b      	ldrb	r3, [r3, #0]
 8001dca:	425b      	negs	r3, r3
 8001dcc:	ee07 3a10 	vmov	s14, r3
 8001dd0:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001dd4:	eef0 0a47 	vmov.f32	s1, s14
 8001dd8:	eeb0 0a67 	vmov.f32	s0, s15
 8001ddc:	4876      	ldr	r0, [pc, #472]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001dde:	f7ff fe2f 	bl	8001a40 <LinearGeneration>
			}	
			
			if (SpeedCmd != 0)
 8001de2:	4b75      	ldr	r3, [pc, #468]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dec:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001df0:	d00d      	beq.n	8001e0e <CheckGoingToRefPosition+0x136>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);					
 8001df2:	4b6a      	ldr	r3, [pc, #424]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001df4:	781b      	ldrb	r3, [r3, #0]
 8001df6:	4a70      	ldr	r2, [pc, #448]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001df8:	edd2 7a00 	vldr	s15, [r2]
 8001dfc:	eeb0 0a67 	vmov.f32	s0, s15
 8001e00:	4618      	mov	r0, r3
 8001e02:	f7ff fedd 	bl	8001bc0 <CalculateTimer3Period>
 8001e06:	4603      	mov	r3, r0
 8001e08:	b29a      	uxth	r2, r3
 8001e0a:	4b6c      	ldr	r3, [pc, #432]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001e0c:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
			}
			//PrePullingSpeed = SpeedCmd;
		}
		if ( abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 1000) // Reach the ref position
 8001e0e:	4b64      	ldr	r3, [pc, #400]	; (8001fa0 <CheckGoingToRefPosition+0x2c8>)
 8001e10:	681b      	ldr	r3, [r3, #0]
 8001e12:	683a      	ldr	r2, [r7, #0]
 8001e14:	1ad2      	subs	r2, r2, r3
 8001e16:	4b63      	ldr	r3, [pc, #396]	; (8001fa4 <CheckGoingToRefPosition+0x2cc>)
 8001e18:	681b      	ldr	r3, [r3, #0]
 8001e1a:	4413      	add	r3, r2
 8001e1c:	2b00      	cmp	r3, #0
 8001e1e:	bfb8      	it	lt
 8001e20:	425b      	neglt	r3, r3
 8001e22:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001e26:	f300 80b3 	bgt.w	8001f90 <CheckGoingToRefPosition+0x2b8>
		{	
//			RunningTime = 0;
//			RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001e2a:	4b64      	ldr	r3, [pc, #400]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001e2c:	2200      	movs	r2, #0
 8001e2e:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;
 8001e30:	4b61      	ldr	r3, [pc, #388]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001e32:	f04f 0200 	mov.w	r2, #0
 8001e36:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();			
 8001e38:	f7ff fe60 	bl	8001afc <StopPulseGenerating>
			return true;			
 8001e3c:	2301      	movs	r3, #1
 8001e3e:	e0a8      	b.n	8001f92 <CheckGoingToRefPosition+0x2ba>
		}			
	}
	else // ASDA A3, Actual Encoder based
	{
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= (EncoderResolution*PullingSpeed*RampingGoingSpdTime/90)) // Start reducing the speed
 8001e40:	4b57      	ldr	r3, [pc, #348]	; (8001fa0 <CheckGoingToRefPosition+0x2c8>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	683a      	ldr	r2, [r7, #0]
 8001e46:	1ad2      	subs	r2, r2, r3
 8001e48:	4b56      	ldr	r3, [pc, #344]	; (8001fa4 <CheckGoingToRefPosition+0x2cc>)
 8001e4a:	681b      	ldr	r3, [r3, #0]
 8001e4c:	4413      	add	r3, r2
 8001e4e:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001e52:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001e56:	4b54      	ldr	r3, [pc, #336]	; (8001fa8 <CheckGoingToRefPosition+0x2d0>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	4619      	mov	r1, r3
 8001e5c:	4b53      	ldr	r3, [pc, #332]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001e5e:	781b      	ldrb	r3, [r3, #0]
 8001e60:	fb01 f303 	mul.w	r3, r1, r3
 8001e64:	4956      	ldr	r1, [pc, #344]	; (8001fc0 <CheckGoingToRefPosition+0x2e8>)
 8001e66:	fb81 0103 	smull	r0, r1, r1, r3
 8001e6a:	4419      	add	r1, r3
 8001e6c:	1109      	asrs	r1, r1, #4
 8001e6e:	17db      	asrs	r3, r3, #31
 8001e70:	1acb      	subs	r3, r1, r3
 8001e72:	429a      	cmp	r2, r3
 8001e74:	dc30      	bgt.n	8001ed8 <CheckGoingToRefPosition+0x200>
		{
			//RunningTime2 += SampleTime;
			if (_direction) // go down
 8001e76:	79fb      	ldrb	r3, [r7, #7]
 8001e78:	2b00      	cmp	r3, #0
 8001e7a:	d010      	beq.n	8001e9e <CheckGoingToRefPosition+0x1c6>
			{
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,20);
 8001e7c:	4b4d      	ldr	r3, [pc, #308]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001e7e:	edd3 7a00 	vldr	s15, [r3]
 8001e82:	eef1 7a67 	vneg.f32	s15, s15
 8001e86:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001e8a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001e8e:	eef3 0a04 	vmov.f32	s1, #52	; 0x41a00000  20.0
 8001e92:	eeb0 0a67 	vmov.f32	s0, s15
 8001e96:	4848      	ldr	r0, [pc, #288]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001e98:	f7ff fdd2 	bl	8001a40 <LinearGeneration>
 8001e9c:	e00d      	b.n	8001eba <CheckGoingToRefPosition+0x1e2>
				//SpeedCmd = LinearGeneration(RunningTime2,-GoingAcceleration*10,PrePullingSpeed,20,PullingSpeed); //-EpsilonPulling means the spd is negative
			}
			else // go up
			{
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,-20);
 8001e9e:	4b45      	ldr	r3, [pc, #276]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001ea0:	edd3 7a00 	vldr	s15, [r3]
 8001ea4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ea8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eac:	eefb 0a04 	vmov.f32	s1, #180	; 0xc1a00000 -20.0
 8001eb0:	eeb0 0a67 	vmov.f32	s0, s15
 8001eb4:	4840      	ldr	r0, [pc, #256]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001eb6:	f7ff fdc3 	bl	8001a40 <LinearGeneration>
				//SpeedCmd = LinearGeneration(RunningTime2,GoingAcceleration*10, PrePullingSpeed,-PullingSpeed,-20); //-EpsilonPulling means the spd is negative
			}
			Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);			
 8001eba:	4b38      	ldr	r3, [pc, #224]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001ebc:	781b      	ldrb	r3, [r3, #0]
 8001ebe:	4a3e      	ldr	r2, [pc, #248]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001ec0:	edd2 7a00 	vldr	s15, [r2]
 8001ec4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ec8:	4618      	mov	r0, r3
 8001eca:	f7ff fe79 	bl	8001bc0 <CalculateTimer3Period>
 8001ece:	4603      	mov	r3, r0
 8001ed0:	b29a      	uxth	r2, r3
 8001ed2:	4b3a      	ldr	r3, [pc, #232]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001ed4:	801a      	strh	r2, [r3, #0]
 8001ed6:	e044      	b.n	8001f62 <CheckGoingToRefPosition+0x28a>
		
		else
		{
			// Ramping the speed cmd
			//RunningTime += SampleTime;
			if (_direction) // go down
 8001ed8:	79fb      	ldrb	r3, [r7, #7]
 8001eda:	2b00      	cmp	r3, #0
 8001edc:	d014      	beq.n	8001f08 <CheckGoingToRefPosition+0x230>
			{
				//SpeedCmd = LinearGeneration(RunningTime,GoingAcceleration*10,0,0,PullingSpeed); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,GoingAcceleration*10,PullingSpeed);
 8001ede:	4b35      	ldr	r3, [pc, #212]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001ee0:	edd3 7a00 	vldr	s15, [r3]
 8001ee4:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001ee8:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001eec:	4b2f      	ldr	r3, [pc, #188]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001eee:	781b      	ldrb	r3, [r3, #0]
 8001ef0:	ee07 3a10 	vmov	s14, r3
 8001ef4:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8001ef8:	eef0 0a47 	vmov.f32	s1, s14
 8001efc:	eeb0 0a67 	vmov.f32	s0, s15
 8001f00:	482d      	ldr	r0, [pc, #180]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f02:	f7ff fd9d 	bl	8001a40 <LinearGeneration>
 8001f06:	e016      	b.n	8001f36 <CheckGoingToRefPosition+0x25e>
			}
			else // go up
			{
				//SpeedCmd = LinearGeneration(RunningTime,-GoingAcceleration*10,0,-PullingSpeed,0); //-EpsilonPulling means the spd is negative
				LinearGeneration(&SpeedCmd,-GoingAcceleration*10,-PullingSpeed);
 8001f08:	4b2a      	ldr	r3, [pc, #168]	; (8001fb4 <CheckGoingToRefPosition+0x2dc>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	eef1 7a67 	vneg.f32	s15, s15
 8001f12:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001f16:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001f1a:	4b24      	ldr	r3, [pc, #144]	; (8001fac <CheckGoingToRefPosition+0x2d4>)
 8001f1c:	781b      	ldrb	r3, [r3, #0]
 8001f1e:	425b      	negs	r3, r3
 8001f20:	ee07 3a10 	vmov	s14, r3
 8001f24:	eeb8 7ac7 	vcvt.f32.s32	s14, s14
 8001f28:	eef0 0a47 	vmov.f32	s1, s14
 8001f2c:	eeb0 0a67 	vmov.f32	s0, s15
 8001f30:	4821      	ldr	r0, [pc, #132]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f32:	f7ff fd85 	bl	8001a40 <LinearGeneration>
			}	
			
			if (SpeedCmd != 0)
 8001f36:	4b20      	ldr	r3, [pc, #128]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f40:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f44:	d00d      	beq.n	8001f62 <CheckGoingToRefPosition+0x28a>
			{
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);					
 8001f46:	4b15      	ldr	r3, [pc, #84]	; (8001f9c <CheckGoingToRefPosition+0x2c4>)
 8001f48:	781b      	ldrb	r3, [r3, #0]
 8001f4a:	4a1b      	ldr	r2, [pc, #108]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f4c:	edd2 7a00 	vldr	s15, [r2]
 8001f50:	eeb0 0a67 	vmov.f32	s0, s15
 8001f54:	4618      	mov	r0, r3
 8001f56:	f7ff fe33 	bl	8001bc0 <CalculateTimer3Period>
 8001f5a:	4603      	mov	r3, r0
 8001f5c:	b29a      	uxth	r2, r3
 8001f5e:	4b17      	ldr	r3, [pc, #92]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001f60:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
			}
			//PrePullingSpeed = SpeedCmd;
		}
		
		if (abs(RefPulsePosition - MotorEncPulse + OriginPulse) <= 100) // Reach the bottom position
 8001f62:	4b0f      	ldr	r3, [pc, #60]	; (8001fa0 <CheckGoingToRefPosition+0x2c8>)
 8001f64:	681b      	ldr	r3, [r3, #0]
 8001f66:	683a      	ldr	r2, [r7, #0]
 8001f68:	1ad2      	subs	r2, r2, r3
 8001f6a:	4b0e      	ldr	r3, [pc, #56]	; (8001fa4 <CheckGoingToRefPosition+0x2cc>)
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4413      	add	r3, r2
 8001f70:	2b00      	cmp	r3, #0
 8001f72:	bfb8      	it	lt
 8001f74:	425b      	neglt	r3, r3
 8001f76:	2b64      	cmp	r3, #100	; 0x64
 8001f78:	dc0a      	bgt.n	8001f90 <CheckGoingToRefPosition+0x2b8>
		{
			//RunningTime = 0;
			//RunningTime2 = 0;
			Timer3CountPeriod = 0;
 8001f7a:	4b10      	ldr	r3, [pc, #64]	; (8001fbc <CheckGoingToRefPosition+0x2e4>)
 8001f7c:	2200      	movs	r2, #0
 8001f7e:	801a      	strh	r2, [r3, #0]
			SpeedCmd = 0;		
 8001f80:	4b0d      	ldr	r3, [pc, #52]	; (8001fb8 <CheckGoingToRefPosition+0x2e0>)
 8001f82:	f04f 0200 	mov.w	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
			//PrePullingSpeed = 0;
			StopPulseGenerating();				
 8001f88:	f7ff fdb8 	bl	8001afc <StopPulseGenerating>
			return true;			
 8001f8c:	2301      	movs	r3, #1
 8001f8e:	e000      	b.n	8001f92 <CheckGoingToRefPosition+0x2ba>
		}
	}
	return false;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3708      	adds	r7, #8
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
 8001f9a:	bf00      	nop
 8001f9c:	20000003 	.word	0x20000003
 8001fa0:	200004e0 	.word	0x200004e0
 8001fa4:	200004e4 	.word	0x200004e4
 8001fa8:	20000008 	.word	0x20000008
 8001fac:	2000045d 	.word	0x2000045d
 8001fb0:	66666667 	.word	0x66666667
 8001fb4:	20000460 	.word	0x20000460
 8001fb8:	200004f4 	.word	0x200004f4
 8001fbc:	20000450 	.word	0x20000450
 8001fc0:	88888889 	.word	0x88888889

08001fc4 <InitGoingToStartingPosition>:

void InitGoingToStartingPosition ()
{
 8001fc4:	b580      	push	{r7, lr}
 8001fc6:	af00      	add	r7, sp, #0
	if (MotorDriver) // HIGEN FDA7000
 8001fc8:	4b48      	ldr	r3, [pc, #288]	; (80020ec <InitGoingToStartingPosition+0x128>)
 8001fca:	781b      	ldrb	r3, [r3, #0]
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d045      	beq.n	800205c <InitGoingToStartingPosition+0x98>
	{
		//if (PositionPulseCmd*EgearRatio < PullingBotomPulseCmdPosition) // Then going down to the bottom
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition)
 8001fd0:	4b47      	ldr	r3, [pc, #284]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 8001fd2:	681a      	ldr	r2, [r3, #0]
 8001fd4:	4b47      	ldr	r3, [pc, #284]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 8001fd6:	681b      	ldr	r3, [r3, #0]
 8001fd8:	1ad2      	subs	r2, r2, r3
 8001fda:	4b47      	ldr	r3, [pc, #284]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8001fdc:	681b      	ldr	r3, [r3, #0]
 8001fde:	429a      	cmp	r2, r3
 8001fe0:	da0c      	bge.n	8001ffc <InitGoingToStartingPosition+0x38>
		{
			StartAccleratePulling = false;
 8001fe2:	4b46      	ldr	r3, [pc, #280]	; (80020fc <InitGoingToStartingPosition+0x138>)
 8001fe4:	2200      	movs	r2, #0
 8001fe6:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8001fe8:	4b45      	ldr	r3, [pc, #276]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 8001fea:	2201      	movs	r2, #1
 8001fec:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = false; // false = Dropping Down
 8001fee:	4b45      	ldr	r3, [pc, #276]	; (8002104 <InitGoingToStartingPosition+0x140>)
 8001ff0:	2200      	movs	r2, #0
 8001ff2:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8001ff4:	f7ff f938 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			StartPulseGenerating();
 8001ff8:	f7ff fd9e 	bl	8001b38 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8001ffc:	4b3c      	ldr	r3, [pc, #240]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 8001ffe:	681a      	ldr	r2, [r3, #0]
 8002000:	4b3c      	ldr	r3, [pc, #240]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	1ad2      	subs	r2, r2, r3
 8002006:	4b3c      	ldr	r3, [pc, #240]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8002008:	681b      	ldr	r3, [r3, #0]
 800200a:	429a      	cmp	r2, r3
 800200c:	dd0c      	ble.n	8002028 <InitGoingToStartingPosition+0x64>
		{
			StartAccleratePulling = false;
 800200e:	4b3b      	ldr	r3, [pc, #236]	; (80020fc <InitGoingToStartingPosition+0x138>)
 8002010:	2200      	movs	r2, #0
 8002012:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 8002014:	4b3a      	ldr	r3, [pc, #232]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 8002016:	2200      	movs	r2, #0
 8002018:	701a      	strb	r2, [r3, #0]
			// Start going down to the bottom position
			PRIsToggled = true; // false = Dropping Down, true = Going up
 800201a:	4b3a      	ldr	r3, [pc, #232]	; (8002104 <InitGoingToStartingPosition+0x140>)
 800201c:	2201      	movs	r2, #1
 800201e:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002020:	f7ff f922 	bl	8001268 <DisableSTOP>
			// Calculate Timer3CountPeriod to generate pulse
			// Timer3CountPeriod = CalculateTimer3Period (MotorDriver, PullingSpeed);
			//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
			StartPulseGenerating();
 8002024:	f7ff fd88 	bl	8001b38 <StartPulseGenerating>
		}
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 8002028:	4b31      	ldr	r3, [pc, #196]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 800202a:	681a      	ldr	r2, [r3, #0]
 800202c:	4b31      	ldr	r3, [pc, #196]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 800202e:	681b      	ldr	r3, [r3, #0]
 8002030:	1ad2      	subs	r2, r2, r3
 8002032:	4b31      	ldr	r3, [pc, #196]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8002034:	681b      	ldr	r3, [r3, #0]
 8002036:	429a      	cmp	r2, r3
 8002038:	d155      	bne.n	80020e6 <InitGoingToStartingPosition+0x122>
		{
			StartAccleratePulling = true;
 800203a:	4b30      	ldr	r3, [pc, #192]	; (80020fc <InitGoingToStartingPosition+0x138>)
 800203c:	2201      	movs	r2, #1
 800203e:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage				
 8002040:	4b31      	ldr	r3, [pc, #196]	; (8002108 <InitGoingToStartingPosition+0x144>)
 8002042:	2200      	movs	r2, #0
 8002044:	701a      	strb	r2, [r3, #0]
			Direction = false;				
 8002046:	4b2e      	ldr	r3, [pc, #184]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 8002048:	2200      	movs	r2, #0
 800204a:	701a      	strb	r2, [r3, #0]
			
			PRIsToggled = true; // true = pulling up.
 800204c:	4b2d      	ldr	r3, [pc, #180]	; (8002104 <InitGoingToStartingPosition+0x140>)
 800204e:	2201      	movs	r2, #1
 8002050:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002052:	f7ff f909 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8002056:	f7ff fd6f 	bl	8001b38 <StartPulseGenerating>
			PRIsToggled = true; // true = pulling up.
			DisableSTOP(); // Disable the stop
			StartPulseGenerating();
		}	
	}
}
 800205a:	e044      	b.n	80020e6 <InitGoingToStartingPosition+0x122>
		if (MotorEncPulse - OriginPulse < PullingBotomPulseCmdPosition) // Then going down to the bottom
 800205c:	4b24      	ldr	r3, [pc, #144]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 800205e:	681a      	ldr	r2, [r3, #0]
 8002060:	4b24      	ldr	r3, [pc, #144]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 8002062:	681b      	ldr	r3, [r3, #0]
 8002064:	1ad2      	subs	r2, r2, r3
 8002066:	4b24      	ldr	r3, [pc, #144]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8002068:	681b      	ldr	r3, [r3, #0]
 800206a:	429a      	cmp	r2, r3
 800206c:	da0c      	bge.n	8002088 <InitGoingToStartingPosition+0xc4>
			StartAccleratePulling = false;
 800206e:	4b23      	ldr	r3, [pc, #140]	; (80020fc <InitGoingToStartingPosition+0x138>)
 8002070:	2200      	movs	r2, #0
 8002072:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 8002074:	4b22      	ldr	r3, [pc, #136]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 8002076:	2201      	movs	r2, #1
 8002078:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down
 800207a:	4b22      	ldr	r3, [pc, #136]	; (8002104 <InitGoingToStartingPosition+0x140>)
 800207c:	2200      	movs	r2, #0
 800207e:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002080:	f7ff f8f2 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8002084:	f7ff fd58 	bl	8001b38 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse > PullingBotomPulseCmdPosition) // Then going up to the initial position
 8002088:	4b19      	ldr	r3, [pc, #100]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 800208a:	681a      	ldr	r2, [r3, #0]
 800208c:	4b19      	ldr	r3, [pc, #100]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 800208e:	681b      	ldr	r3, [r3, #0]
 8002090:	1ad2      	subs	r2, r2, r3
 8002092:	4b19      	ldr	r3, [pc, #100]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 8002094:	681b      	ldr	r3, [r3, #0]
 8002096:	429a      	cmp	r2, r3
 8002098:	dd0c      	ble.n	80020b4 <InitGoingToStartingPosition+0xf0>
			StartAccleratePulling = false;
 800209a:	4b18      	ldr	r3, [pc, #96]	; (80020fc <InitGoingToStartingPosition+0x138>)
 800209c:	2200      	movs	r2, #0
 800209e:	701a      	strb	r2, [r3, #0]
			Direction = false; // false = move up, true = move down
 80020a0:	4b17      	ldr	r3, [pc, #92]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 80020a2:	2200      	movs	r2, #0
 80020a4:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // false = Dropping Down, true = Going up
 80020a6:	4b17      	ldr	r3, [pc, #92]	; (8002104 <InitGoingToStartingPosition+0x140>)
 80020a8:	2201      	movs	r2, #1
 80020aa:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 80020ac:	f7ff f8dc 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 80020b0:	f7ff fd42 	bl	8001b38 <StartPulseGenerating>
		if (MotorEncPulse - OriginPulse == PullingBotomPulseCmdPosition)  // Object is at the bottom, then start pulling up
 80020b4:	4b0e      	ldr	r3, [pc, #56]	; (80020f0 <InitGoingToStartingPosition+0x12c>)
 80020b6:	681a      	ldr	r2, [r3, #0]
 80020b8:	4b0e      	ldr	r3, [pc, #56]	; (80020f4 <InitGoingToStartingPosition+0x130>)
 80020ba:	681b      	ldr	r3, [r3, #0]
 80020bc:	1ad2      	subs	r2, r2, r3
 80020be:	4b0e      	ldr	r3, [pc, #56]	; (80020f8 <InitGoingToStartingPosition+0x134>)
 80020c0:	681b      	ldr	r3, [r3, #0]
 80020c2:	429a      	cmp	r2, r3
 80020c4:	d10f      	bne.n	80020e6 <InitGoingToStartingPosition+0x122>
			StartAccleratePulling = true;
 80020c6:	4b0d      	ldr	r3, [pc, #52]	; (80020fc <InitGoingToStartingPosition+0x138>)
 80020c8:	2201      	movs	r2, #1
 80020ca:	701a      	strb	r2, [r3, #0]
			StartBraking = false; // go to Accerlerating Stage				
 80020cc:	4b0e      	ldr	r3, [pc, #56]	; (8002108 <InitGoingToStartingPosition+0x144>)
 80020ce:	2200      	movs	r2, #0
 80020d0:	701a      	strb	r2, [r3, #0]
			Direction = false;				
 80020d2:	4b0b      	ldr	r3, [pc, #44]	; (8002100 <InitGoingToStartingPosition+0x13c>)
 80020d4:	2200      	movs	r2, #0
 80020d6:	701a      	strb	r2, [r3, #0]
			PRIsToggled = true; // true = pulling up.
 80020d8:	4b0a      	ldr	r3, [pc, #40]	; (8002104 <InitGoingToStartingPosition+0x140>)
 80020da:	2201      	movs	r2, #1
 80020dc:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 80020de:	f7ff f8c3 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 80020e2:	f7ff fd29 	bl	8001b38 <StartPulseGenerating>
}
 80020e6:	bf00      	nop
 80020e8:	bd80      	pop	{r7, pc}
 80020ea:	bf00      	nop
 80020ec:	20000003 	.word	0x20000003
 80020f0:	200004e0 	.word	0x200004e0
 80020f4:	200004e4 	.word	0x200004e4
 80020f8:	200004a0 	.word	0x200004a0
 80020fc:	2000043f 	.word	0x2000043f
 8002100:	20000435 	.word	0x20000435
 8002104:	20000446 	.word	0x20000446
 8002108:	2000043a 	.word	0x2000043a

0800210c <InitializeRunning>:
// Init variable for running
void InitializeRunning (uint8_t Mode)
{
 800210c:	b580      	push	{r7, lr}
 800210e:	b082      	sub	sp, #8
 8002110:	af00      	add	r7, sp, #0
 8002112:	4603      	mov	r3, r0
 8002114:	71fb      	strb	r3, [r7, #7]
	switch (Mode)
 8002116:	79fb      	ldrb	r3, [r7, #7]
 8002118:	2b03      	cmp	r3, #3
 800211a:	d029      	beq.n	8002170 <InitializeRunning+0x64>
 800211c:	2b03      	cmp	r3, #3
 800211e:	dc36      	bgt.n	800218e <InitializeRunning+0x82>
 8002120:	2b01      	cmp	r3, #1
 8002122:	d002      	beq.n	800212a <InitializeRunning+0x1e>
 8002124:	2b02      	cmp	r3, #2
 8002126:	d01a      	beq.n	800215e <InitializeRunning+0x52>
			StartPulling = true; // Pulling Stage Firse
			StartDropping = false;
			InitGoingToStartingPosition ();					
			break;
		default:
			break;
 8002128:	e031      	b.n	800218e <InitializeRunning+0x82>
			StartRunning = true;
 800212a:	4b1b      	ldr	r3, [pc, #108]	; (8002198 <InitializeRunning+0x8c>)
 800212c:	2201      	movs	r2, #1
 800212e:	701a      	strb	r2, [r3, #0]
			StartDropping = true;
 8002130:	4b1a      	ldr	r3, [pc, #104]	; (800219c <InitializeRunning+0x90>)
 8002132:	2201      	movs	r2, #1
 8002134:	701a      	strb	r2, [r3, #0]
			StartBraking = false;
 8002136:	4b1a      	ldr	r3, [pc, #104]	; (80021a0 <InitializeRunning+0x94>)
 8002138:	2200      	movs	r2, #0
 800213a:	701a      	strb	r2, [r3, #0]
			Direction = true; // false = move up, true = move down
 800213c:	4b19      	ldr	r3, [pc, #100]	; (80021a4 <InitializeRunning+0x98>)
 800213e:	2201      	movs	r2, #1
 8002140:	701a      	strb	r2, [r3, #0]
			StartPulling = false;		
 8002142:	4b19      	ldr	r3, [pc, #100]	; (80021a8 <InitializeRunning+0x9c>)
 8002144:	2200      	movs	r2, #0
 8002146:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8002148:	4b18      	ldr	r3, [pc, #96]	; (80021ac <InitializeRunning+0xa0>)
 800214a:	2200      	movs	r2, #0
 800214c:	701a      	strb	r2, [r3, #0]
			PRIsToggled = false; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 800214e:	4b18      	ldr	r3, [pc, #96]	; (80021b0 <InitializeRunning+0xa4>)
 8002150:	2200      	movs	r2, #0
 8002152:	701a      	strb	r2, [r3, #0]
			DisableSTOP(); // Disable the stop
 8002154:	f7ff f888 	bl	8001268 <DisableSTOP>
			StartPulseGenerating();
 8002158:	f7ff fcee 	bl	8001b38 <StartPulseGenerating>
			break;
 800215c:	e018      	b.n	8002190 <InitializeRunning+0x84>
			StartRunning = true;
 800215e:	4b0e      	ldr	r3, [pc, #56]	; (8002198 <InitializeRunning+0x8c>)
 8002160:	2201      	movs	r2, #1
 8002162:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8002164:	4b11      	ldr	r3, [pc, #68]	; (80021ac <InitializeRunning+0xa0>)
 8002166:	2200      	movs	r2, #0
 8002168:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();
 800216a:	f7ff ff2b 	bl	8001fc4 <InitGoingToStartingPosition>
			break;
 800216e:	e00f      	b.n	8002190 <InitializeRunning+0x84>
			StartRunning = true;
 8002170:	4b09      	ldr	r3, [pc, #36]	; (8002198 <InitializeRunning+0x8c>)
 8002172:	2201      	movs	r2, #1
 8002174:	701a      	strb	r2, [r3, #0]
			CompleteRunning = false;
 8002176:	4b0d      	ldr	r3, [pc, #52]	; (80021ac <InitializeRunning+0xa0>)
 8002178:	2200      	movs	r2, #0
 800217a:	701a      	strb	r2, [r3, #0]
			StartPulling = true; // Pulling Stage Firse
 800217c:	4b0a      	ldr	r3, [pc, #40]	; (80021a8 <InitializeRunning+0x9c>)
 800217e:	2201      	movs	r2, #1
 8002180:	701a      	strb	r2, [r3, #0]
			StartDropping = false;
 8002182:	4b06      	ldr	r3, [pc, #24]	; (800219c <InitializeRunning+0x90>)
 8002184:	2200      	movs	r2, #0
 8002186:	701a      	strb	r2, [r3, #0]
			InitGoingToStartingPosition ();					
 8002188:	f7ff ff1c 	bl	8001fc4 <InitGoingToStartingPosition>
			break;
 800218c:	e000      	b.n	8002190 <InitializeRunning+0x84>
			break;
 800218e:	bf00      	nop
	}
}
 8002190:	bf00      	nop
 8002192:	3708      	adds	r7, #8
 8002194:	46bd      	mov	sp, r7
 8002196:	bd80      	pop	{r7, pc}
 8002198:	20000434 	.word	0x20000434
 800219c:	20000433 	.word	0x20000433
 80021a0:	2000043a 	.word	0x2000043a
 80021a4:	20000435 	.word	0x20000435
 80021a8:	20000439 	.word	0x20000439
 80021ac:	20000440 	.word	0x20000440
 80021b0:	20000446 	.word	0x20000446
 80021b4:	00000000 	.word	0x00000000

080021b8 <PullingExperiment>:

bool PullingExperiment ()
{
 80021b8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80021bc:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 80021be:	4b92      	ldr	r3, [pc, #584]	; (8002408 <PullingExperiment+0x250>)
 80021c0:	781b      	ldrb	r3, [r3, #0]
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d001      	beq.n	80021ca <PullingExperiment+0x12>
	{
		return true;
 80021c6:	2301      	movs	r3, #1
 80021c8:	e29b      	b.n	8002702 <PullingExperiment+0x54a>
	}
	else
	{
		if (!StartAccleratePulling) 
 80021ca:	4b90      	ldr	r3, [pc, #576]	; (800240c <PullingExperiment+0x254>)
 80021cc:	781b      	ldrb	r3, [r3, #0]
 80021ce:	f083 0301 	eor.w	r3, r3, #1
 80021d2:	b2db      	uxtb	r3, r3
 80021d4:	2b00      	cmp	r3, #0
 80021d6:	d029      	beq.n	800222c <PullingExperiment+0x74>
		{
			if (CheckGoingToRefPosition(true, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 80021d8:	4b8d      	ldr	r3, [pc, #564]	; (8002410 <PullingExperiment+0x258>)
 80021da:	681b      	ldr	r3, [r3, #0]
 80021dc:	4619      	mov	r1, r3
 80021de:	2001      	movs	r0, #1
 80021e0:	f7ff fd7a 	bl	8001cd8 <CheckGoingToRefPosition>
 80021e4:	4603      	mov	r3, r0
 80021e6:	2b00      	cmp	r3, #0
 80021e8:	d01e      	beq.n	8002228 <PullingExperiment+0x70>
			{
				if (WaitingMiliSecond(StoppingTime)) // Wait for some seconds
 80021ea:	4b8a      	ldr	r3, [pc, #552]	; (8002414 <PullingExperiment+0x25c>)
 80021ec:	881b      	ldrh	r3, [r3, #0]
 80021ee:	4618      	mov	r0, r3
 80021f0:	f7ff fcc0 	bl	8001b74 <WaitingMiliSecond>
 80021f4:	4603      	mov	r3, r0
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d014      	beq.n	8002224 <PullingExperiment+0x6c>
				{					
					StartAccleratePulling = true; // turn on flag to start acclerating pulling
 80021fa:	4b84      	ldr	r3, [pc, #528]	; (800240c <PullingExperiment+0x254>)
 80021fc:	2201      	movs	r2, #1
 80021fe:	701a      	strb	r2, [r3, #0]
					Direction = false;
 8002200:	4b85      	ldr	r3, [pc, #532]	; (8002418 <PullingExperiment+0x260>)
 8002202:	2200      	movs	r2, #0
 8002204:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 8002206:	4b85      	ldr	r3, [pc, #532]	; (800241c <PullingExperiment+0x264>)
 8002208:	2200      	movs	r2, #0
 800220a:	701a      	strb	r2, [r3, #0]
					
					PRIsToggled = true; // true = pulling up.
 800220c:	4b84      	ldr	r3, [pc, #528]	; (8002420 <PullingExperiment+0x268>)
 800220e:	2201      	movs	r2, #1
 8002210:	701a      	strb	r2, [r3, #0]
					DisableSTOP(); // Disable the stop
 8002212:	f7ff f829 	bl	8001268 <DisableSTOP>
					StartPulseGenerating();
 8002216:	f7ff fc8f 	bl	8001b38 <StartPulseGenerating>
					PreAccRef = AccRef;
 800221a:	4b82      	ldr	r3, [pc, #520]	; (8002424 <PullingExperiment+0x26c>)
 800221c:	681b      	ldr	r3, [r3, #0]
 800221e:	4a82      	ldr	r2, [pc, #520]	; (8002428 <PullingExperiment+0x270>)
 8002220:	6013      	str	r3, [r2, #0]
 8002222:	e26d      	b.n	8002700 <PullingExperiment+0x548>
					//RunningTime = 0;
				}
				else return false;
 8002224:	2300      	movs	r3, #0
 8002226:	e26c      	b.n	8002702 <PullingExperiment+0x54a>
			}
			else return false;
 8002228:	2300      	movs	r3, #0
 800222a:	e26a      	b.n	8002702 <PullingExperiment+0x54a>
		}
		else // Start accelerate pulling
		{
			if (!StartBraking) // Accelerating Stage
 800222c:	4b7b      	ldr	r3, [pc, #492]	; (800241c <PullingExperiment+0x264>)
 800222e:	781b      	ldrb	r3, [r3, #0]
 8002230:	f083 0301 	eor.w	r3, r3, #1
 8002234:	b2db      	uxtb	r3, r3
 8002236:	2b00      	cmp	r3, #0
 8002238:	f000 8112 	beq.w	8002460 <PullingExperiment+0x2a8>
			{
				//RunningTime += SampleTime;
				
				//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-PullingAccel, PreAccRef); // ramping the reference signal
				//LinearGeneration(&AccRef,-8,-9.6-PullingAccel); // ramping the reference signal
				AccRef = -9.6-PullingAccel;
 800223c:	4b7b      	ldr	r3, [pc, #492]	; (800242c <PullingExperiment+0x274>)
 800223e:	681b      	ldr	r3, [r3, #0]
 8002240:	4618      	mov	r0, r3
 8002242:	f7fe f981 	bl	8000548 <__aeabi_f2d>
 8002246:	4602      	mov	r2, r0
 8002248:	460b      	mov	r3, r1
 800224a:	a16b      	add	r1, pc, #428	; (adr r1, 80023f8 <PullingExperiment+0x240>)
 800224c:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002250:	f7fe f81a 	bl	8000288 <__aeabi_dsub>
 8002254:	4602      	mov	r2, r0
 8002256:	460b      	mov	r3, r1
 8002258:	4610      	mov	r0, r2
 800225a:	4619      	mov	r1, r3
 800225c:	f7fe fcc4 	bl	8000be8 <__aeabi_d2f>
 8002260:	4603      	mov	r3, r0
 8002262:	4a70      	ldr	r2, [pc, #448]	; (8002424 <PullingExperiment+0x26c>)
 8002264:	6013      	str	r3, [r2, #0]
				// Calculate speed cmd
				
				
				if (IsOpenLoopControl) // Use open-loop control
 8002266:	4b72      	ldr	r3, [pc, #456]	; (8002430 <PullingExperiment+0x278>)
 8002268:	781b      	ldrb	r3, [r3, #0]
 800226a:	2b00      	cmp	r3, #0
 800226c:	d037      	beq.n	80022de <PullingExperiment+0x126>
				{
					//SpeedCmd = LinearGeneration(RunningTime,-PullingEpsilonAcc*10,0,-PullingMaxSpeed,0);// Feedforward term
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term
					LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);
 800226e:	4b6d      	ldr	r3, [pc, #436]	; (8002424 <PullingExperiment+0x26c>)
 8002270:	681b      	ldr	r3, [r3, #0]
 8002272:	4618      	mov	r0, r3
 8002274:	f7fe f968 	bl	8000548 <__aeabi_f2d>
 8002278:	a361      	add	r3, pc, #388	; (adr r3, 8002400 <PullingExperiment+0x248>)
 800227a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800227e:	f7fe f805 	bl	800028c <__adddf3>
 8002282:	4602      	mov	r2, r0
 8002284:	460b      	mov	r3, r1
 8002286:	4610      	mov	r0, r2
 8002288:	4619      	mov	r1, r3
 800228a:	f04f 0200 	mov.w	r2, #0
 800228e:	4b69      	ldr	r3, [pc, #420]	; (8002434 <PullingExperiment+0x27c>)
 8002290:	f7fe f9b2 	bl	80005f8 <__aeabi_dmul>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4614      	mov	r4, r2
 800229a:	461d      	mov	r5, r3
 800229c:	4b66      	ldr	r3, [pc, #408]	; (8002438 <PullingExperiment+0x280>)
 800229e:	681b      	ldr	r3, [r3, #0]
 80022a0:	4618      	mov	r0, r3
 80022a2:	f7fe f951 	bl	8000548 <__aeabi_f2d>
 80022a6:	4602      	mov	r2, r0
 80022a8:	460b      	mov	r3, r1
 80022aa:	4620      	mov	r0, r4
 80022ac:	4629      	mov	r1, r5
 80022ae:	f7fe facd 	bl	800084c <__aeabi_ddiv>
 80022b2:	4602      	mov	r2, r0
 80022b4:	460b      	mov	r3, r1
 80022b6:	4610      	mov	r0, r2
 80022b8:	4619      	mov	r1, r3
 80022ba:	f7fe fc95 	bl	8000be8 <__aeabi_d2f>
 80022be:	4602      	mov	r2, r0
 80022c0:	4b5e      	ldr	r3, [pc, #376]	; (800243c <PullingExperiment+0x284>)
 80022c2:	881b      	ldrh	r3, [r3, #0]
 80022c4:	425b      	negs	r3, r3
 80022c6:	ee07 3a90 	vmov	s15, r3
 80022ca:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80022ce:	eef0 0a67 	vmov.f32	s1, s15
 80022d2:	ee00 2a10 	vmov	s0, r2
 80022d6:	485a      	ldr	r0, [pc, #360]	; (8002440 <PullingExperiment+0x288>)
 80022d8:	f7ff fbb2 	bl	8001a40 <LinearGeneration>
 80022dc:	e048      	b.n	8002370 <PullingExperiment+0x1b8>
				}
				else // Use closed loop Control
				{					
					AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 80022de:	4b51      	ldr	r3, [pc, #324]	; (8002424 <PullingExperiment+0x26c>)
 80022e0:	edd3 7a00 	vldr	s15, [r3]
 80022e4:	4b57      	ldr	r3, [pc, #348]	; (8002444 <PullingExperiment+0x28c>)
 80022e6:	ed93 7a00 	vldr	s14, [r3]
 80022ea:	2201      	movs	r2, #1
 80022ec:	2105      	movs	r1, #5
 80022ee:	f06f 0004 	mvn.w	r0, #4
 80022f2:	eef0 0a47 	vmov.f32	s1, s14
 80022f6:	eeb0 0a67 	vmov.f32	s0, s15
 80022fa:	f7ff f8f9 	bl	80014f0 <PIDCalculate>
 80022fe:	eef0 7a40 	vmov.f32	s15, s0
 8002302:	4b51      	ldr	r3, [pc, #324]	; (8002448 <PullingExperiment+0x290>)
 8002304:	edc3 7a00 	vstr	s15, [r3]
					AccSet = AccSet + AccRef + 9.6;
 8002308:	4b4f      	ldr	r3, [pc, #316]	; (8002448 <PullingExperiment+0x290>)
 800230a:	ed93 7a00 	vldr	s14, [r3]
 800230e:	4b45      	ldr	r3, [pc, #276]	; (8002424 <PullingExperiment+0x26c>)
 8002310:	edd3 7a00 	vldr	s15, [r3]
 8002314:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002318:	ee17 0a90 	vmov	r0, s15
 800231c:	f7fe f914 	bl	8000548 <__aeabi_f2d>
 8002320:	a337      	add	r3, pc, #220	; (adr r3, 8002400 <PullingExperiment+0x248>)
 8002322:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002326:	f7fd ffb1 	bl	800028c <__adddf3>
 800232a:	4602      	mov	r2, r0
 800232c:	460b      	mov	r3, r1
 800232e:	4610      	mov	r0, r2
 8002330:	4619      	mov	r1, r3
 8002332:	f7fe fc59 	bl	8000be8 <__aeabi_d2f>
 8002336:	4603      	mov	r3, r0
 8002338:	4a43      	ldr	r2, [pc, #268]	; (8002448 <PullingExperiment+0x290>)
 800233a:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,-PullingMaxSpeed,0); // Feedforwad
					//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term
					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,-PullingMaxSpeed);// Feedforward term
 800233c:	4b42      	ldr	r3, [pc, #264]	; (8002448 <PullingExperiment+0x290>)
 800233e:	edd3 7a00 	vldr	s15, [r3]
 8002342:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002346:	ee27 7a87 	vmul.f32	s14, s15, s14
 800234a:	4b3b      	ldr	r3, [pc, #236]	; (8002438 <PullingExperiment+0x280>)
 800234c:	edd3 7a00 	vldr	s15, [r3]
 8002350:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002354:	4b39      	ldr	r3, [pc, #228]	; (800243c <PullingExperiment+0x284>)
 8002356:	881b      	ldrh	r3, [r3, #0]
 8002358:	425b      	negs	r3, r3
 800235a:	ee07 3a90 	vmov	s15, r3
 800235e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002362:	eef0 0a67 	vmov.f32	s1, s15
 8002366:	eeb0 0a66 	vmov.f32	s0, s13
 800236a:	4835      	ldr	r0, [pc, #212]	; (8002440 <PullingExperiment+0x288>)
 800236c:	f7ff fb68 	bl	8001a40 <LinearGeneration>
				}
				
				if (SpeedCmd != 0)
 8002370:	4b33      	ldr	r3, [pc, #204]	; (8002440 <PullingExperiment+0x288>)
 8002372:	edd3 7a00 	vldr	s15, [r3]
 8002376:	eef5 7a40 	vcmp.f32	s15, #0.0
 800237a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800237e:	d00e      	beq.n	800239e <PullingExperiment+0x1e6>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);					
 8002380:	4b32      	ldr	r3, [pc, #200]	; (800244c <PullingExperiment+0x294>)
 8002382:	781b      	ldrb	r3, [r3, #0]
 8002384:	4a2e      	ldr	r2, [pc, #184]	; (8002440 <PullingExperiment+0x288>)
 8002386:	edd2 7a00 	vldr	s15, [r2]
 800238a:	eeb0 0a67 	vmov.f32	s0, s15
 800238e:	4618      	mov	r0, r3
 8002390:	f7ff fc16 	bl	8001bc0 <CalculateTimer3Period>
 8002394:	4603      	mov	r3, r0
 8002396:	b29a      	uxth	r2, r3
 8002398:	4b2d      	ldr	r3, [pc, #180]	; (8002450 <PullingExperiment+0x298>)
 800239a:	801a      	strh	r2, [r3, #0]
 800239c:	e001      	b.n	80023a2 <PullingExperiment+0x1ea>
					//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else 
				{
					StopPulseGenerating();
 800239e:	f7ff fbad 	bl	8001afc <StopPulseGenerating>
				}
				//if (fabs(SpeedCmd) >= PullingMaxSpeed)
				if ((fabs(ObjectPosition - PullingTotalDistance) >= PullingAccelDistance) || (SpeedCmd <= -PullingMaxSpeed)) // Switch to braking mode
 80023a2:	4b2c      	ldr	r3, [pc, #176]	; (8002454 <PullingExperiment+0x29c>)
 80023a4:	ed93 7a00 	vldr	s14, [r3]
 80023a8:	4b2b      	ldr	r3, [pc, #172]	; (8002458 <PullingExperiment+0x2a0>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee77 7a67 	vsub.f32	s15, s14, s15
 80023b2:	eeb0 7ae7 	vabs.f32	s14, s15
 80023b6:	4b29      	ldr	r3, [pc, #164]	; (800245c <PullingExperiment+0x2a4>)
 80023b8:	edd3 7a00 	vldr	s15, [r3]
 80023bc:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023c4:	da0f      	bge.n	80023e6 <PullingExperiment+0x22e>
 80023c6:	4b1d      	ldr	r3, [pc, #116]	; (800243c <PullingExperiment+0x284>)
 80023c8:	881b      	ldrh	r3, [r3, #0]
 80023ca:	425b      	negs	r3, r3
 80023cc:	ee07 3a90 	vmov	s15, r3
 80023d0:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80023d4:	4b1a      	ldr	r3, [pc, #104]	; (8002440 <PullingExperiment+0x288>)
 80023d6:	edd3 7a00 	vldr	s15, [r3]
 80023da:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80023de:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80023e2:	f2c0 818d 	blt.w	8002700 <PullingExperiment+0x548>
				{
					//RunningTime = 0;
					StartBraking = true;
 80023e6:	4b0d      	ldr	r3, [pc, #52]	; (800241c <PullingExperiment+0x264>)
 80023e8:	2201      	movs	r2, #1
 80023ea:	701a      	strb	r2, [r3, #0]
					//TransitionSpeed = SpeedCmd;
					PreAccRef = AccRef;
 80023ec:	4b0d      	ldr	r3, [pc, #52]	; (8002424 <PullingExperiment+0x26c>)
 80023ee:	681b      	ldr	r3, [r3, #0]
 80023f0:	4a0d      	ldr	r2, [pc, #52]	; (8002428 <PullingExperiment+0x270>)
 80023f2:	6013      	str	r3, [r2, #0]
 80023f4:	e184      	b.n	8002700 <PullingExperiment+0x548>
 80023f6:	bf00      	nop
 80023f8:	33333333 	.word	0x33333333
 80023fc:	c0233333 	.word	0xc0233333
 8002400:	33333333 	.word	0x33333333
 8002404:	40233333 	.word	0x40233333
 8002408:	20000440 	.word	0x20000440
 800240c:	2000043f 	.word	0x2000043f
 8002410:	200004a0 	.word	0x200004a0
 8002414:	2000045e 	.word	0x2000045e
 8002418:	20000435 	.word	0x20000435
 800241c:	2000043a 	.word	0x2000043a
 8002420:	20000446 	.word	0x20000446
 8002424:	2000000c 	.word	0x2000000c
 8002428:	2000052c 	.word	0x2000052c
 800242c:	2000047c 	.word	0x2000047c
 8002430:	20000444 	.word	0x20000444
 8002434:	40240000 	.word	0x40240000
 8002438:	20000458 	.word	0x20000458
 800243c:	20000490 	.word	0x20000490
 8002440:	200004f4 	.word	0x200004f4
 8002444:	20000528 	.word	0x20000528
 8002448:	20000538 	.word	0x20000538
 800244c:	20000003 	.word	0x20000003
 8002450:	20000450 	.word	0x20000450
 8002454:	20000534 	.word	0x20000534
 8002458:	2000049c 	.word	0x2000049c
 800245c:	20000498 	.word	0x20000498
			else // Braking Stage
			{				
				//RunningTime += SampleTime;
				//AccRef = LinearGeneration(RunningTime,8,PreAccRef, PreAccRef, -9.6+PullingDecel); // ramping the reference signal
				//LinearGeneration(&AccRef,60,-9.6+PullingDecel); // ramping the reference signal
				AccRef = -9.6+PullingDecel;
 8002460:	4bad      	ldr	r3, [pc, #692]	; (8002718 <PullingExperiment+0x560>)
 8002462:	681b      	ldr	r3, [r3, #0]
 8002464:	4618      	mov	r0, r3
 8002466:	f7fe f86f 	bl	8000548 <__aeabi_f2d>
 800246a:	a3a7      	add	r3, pc, #668	; (adr r3, 8002708 <PullingExperiment+0x550>)
 800246c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002470:	f7fd ff0a 	bl	8000288 <__aeabi_dsub>
 8002474:	4602      	mov	r2, r0
 8002476:	460b      	mov	r3, r1
 8002478:	4610      	mov	r0, r2
 800247a:	4619      	mov	r1, r3
 800247c:	f7fe fbb4 	bl	8000be8 <__aeabi_d2f>
 8002480:	4603      	mov	r3, r0
 8002482:	4aa6      	ldr	r2, [pc, #664]	; (800271c <PullingExperiment+0x564>)
 8002484:	6013      	str	r3, [r2, #0]
				if (IsOpenLoopControl)
 8002486:	4ba6      	ldr	r3, [pc, #664]	; (8002720 <PullingExperiment+0x568>)
 8002488:	781b      	ldrb	r3, [r3, #0]
 800248a:	2b00      	cmp	r3, #0
 800248c:	d072      	beq.n	8002574 <PullingExperiment+0x3bc>
				{
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,TransitionSpeed,TransitionSpeed,0);
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 800248e:	4ba5      	ldr	r3, [pc, #660]	; (8002724 <PullingExperiment+0x56c>)
 8002490:	681b      	ldr	r3, [r3, #0]
 8002492:	4618      	mov	r0, r3
 8002494:	f7fe f858 	bl	8000548 <__aeabi_f2d>
 8002498:	4604      	mov	r4, r0
 800249a:	460d      	mov	r5, r1
 800249c:	4ba2      	ldr	r3, [pc, #648]	; (8002728 <PullingExperiment+0x570>)
 800249e:	781b      	ldrb	r3, [r3, #0]
 80024a0:	4618      	mov	r0, r3
 80024a2:	f7fe f83f 	bl	8000524 <__aeabi_i2d>
 80024a6:	a39a      	add	r3, pc, #616	; (adr r3, 8002710 <PullingExperiment+0x558>)
 80024a8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024ac:	f7fe f8a4 	bl	80005f8 <__aeabi_dmul>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4690      	mov	r8, r2
 80024b6:	4699      	mov	r9, r3
 80024b8:	4b98      	ldr	r3, [pc, #608]	; (800271c <PullingExperiment+0x564>)
 80024ba:	681b      	ldr	r3, [r3, #0]
 80024bc:	4618      	mov	r0, r3
 80024be:	f7fe f843 	bl	8000548 <__aeabi_f2d>
 80024c2:	a391      	add	r3, pc, #580	; (adr r3, 8002708 <PullingExperiment+0x550>)
 80024c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024c8:	f7fd fee0 	bl	800028c <__adddf3>
 80024cc:	4602      	mov	r2, r0
 80024ce:	460b      	mov	r3, r1
 80024d0:	4640      	mov	r0, r8
 80024d2:	4649      	mov	r1, r9
 80024d4:	f7fe f890 	bl	80005f8 <__aeabi_dmul>
 80024d8:	4602      	mov	r2, r0
 80024da:	460b      	mov	r3, r1
 80024dc:	4610      	mov	r0, r2
 80024de:	4619      	mov	r1, r3
 80024e0:	f04f 0200 	mov.w	r2, #0
 80024e4:	4b91      	ldr	r3, [pc, #580]	; (800272c <PullingExperiment+0x574>)
 80024e6:	f7fe f887 	bl	80005f8 <__aeabi_dmul>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	4690      	mov	r8, r2
 80024f0:	4699      	mov	r9, r3
 80024f2:	4b8f      	ldr	r3, [pc, #572]	; (8002730 <PullingExperiment+0x578>)
 80024f4:	681b      	ldr	r3, [r3, #0]
 80024f6:	4618      	mov	r0, r3
 80024f8:	f7fe f826 	bl	8000548 <__aeabi_f2d>
 80024fc:	4602      	mov	r2, r0
 80024fe:	460b      	mov	r3, r1
 8002500:	4640      	mov	r0, r8
 8002502:	4649      	mov	r1, r9
 8002504:	f7fe f9a2 	bl	800084c <__aeabi_ddiv>
 8002508:	4602      	mov	r2, r0
 800250a:	460b      	mov	r3, r1
 800250c:	4620      	mov	r0, r4
 800250e:	4629      	mov	r1, r5
 8002510:	f7fd febc 	bl	800028c <__adddf3>
 8002514:	4602      	mov	r2, r0
 8002516:	460b      	mov	r3, r1
 8002518:	4610      	mov	r0, r2
 800251a:	4619      	mov	r1, r3
 800251c:	f7fe fb64 	bl	8000be8 <__aeabi_d2f>
 8002520:	4603      	mov	r3, r0
 8002522:	4a80      	ldr	r2, [pc, #512]	; (8002724 <PullingExperiment+0x56c>)
 8002524:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -PullingMaxSpeed)
 8002526:	4b83      	ldr	r3, [pc, #524]	; (8002734 <PullingExperiment+0x57c>)
 8002528:	881b      	ldrh	r3, [r3, #0]
 800252a:	425b      	negs	r3, r3
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002534:	4b7b      	ldr	r3, [pc, #492]	; (8002724 <PullingExperiment+0x56c>)
 8002536:	edd3 7a00 	vldr	s15, [r3]
 800253a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800253e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002542:	db09      	blt.n	8002558 <PullingExperiment+0x3a0>
						SpeedCmd = -PullingMaxSpeed;
 8002544:	4b7b      	ldr	r3, [pc, #492]	; (8002734 <PullingExperiment+0x57c>)
 8002546:	881b      	ldrh	r3, [r3, #0]
 8002548:	425b      	negs	r3, r3
 800254a:	ee07 3a90 	vmov	s15, r3
 800254e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002552:	4b74      	ldr	r3, [pc, #464]	; (8002724 <PullingExperiment+0x56c>)
 8002554:	edc3 7a00 	vstr	s15, [r3]
					if (SpeedCmd >= 0)
 8002558:	4b72      	ldr	r3, [pc, #456]	; (8002724 <PullingExperiment+0x56c>)
 800255a:	edd3 7a00 	vldr	s15, [r3]
 800255e:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002562:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002566:	f2c0 8094 	blt.w	8002692 <PullingExperiment+0x4da>
						SpeedCmd = 0;
 800256a:	4b6e      	ldr	r3, [pc, #440]	; (8002724 <PullingExperiment+0x56c>)
 800256c:	f04f 0200 	mov.w	r2, #0
 8002570:	601a      	str	r2, [r3, #0]
 8002572:	e08e      	b.n	8002692 <PullingExperiment+0x4da>
				}
				else
				{
					AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 8002574:	4b69      	ldr	r3, [pc, #420]	; (800271c <PullingExperiment+0x564>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	4b6f      	ldr	r3, [pc, #444]	; (8002738 <PullingExperiment+0x580>)
 800257c:	ed93 7a00 	vldr	s14, [r3]
 8002580:	2201      	movs	r2, #1
 8002582:	2105      	movs	r1, #5
 8002584:	f06f 0004 	mvn.w	r0, #4
 8002588:	eef0 0a47 	vmov.f32	s1, s14
 800258c:	eeb0 0a67 	vmov.f32	s0, s15
 8002590:	f7fe ffae 	bl	80014f0 <PIDCalculate>
 8002594:	eef0 7a40 	vmov.f32	s15, s0
 8002598:	4b68      	ldr	r3, [pc, #416]	; (800273c <PullingExperiment+0x584>)
 800259a:	edc3 7a00 	vstr	s15, [r3]
					AccSet = AccSet + AccRef + 9.6;
 800259e:	4b67      	ldr	r3, [pc, #412]	; (800273c <PullingExperiment+0x584>)
 80025a0:	ed93 7a00 	vldr	s14, [r3]
 80025a4:	4b5d      	ldr	r3, [pc, #372]	; (800271c <PullingExperiment+0x564>)
 80025a6:	edd3 7a00 	vldr	s15, [r3]
 80025aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80025ae:	ee17 0a90 	vmov	r0, s15
 80025b2:	f7fd ffc9 	bl	8000548 <__aeabi_f2d>
 80025b6:	a354      	add	r3, pc, #336	; (adr r3, 8002708 <PullingExperiment+0x550>)
 80025b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025bc:	f7fd fe66 	bl	800028c <__adddf3>
 80025c0:	4602      	mov	r2, r0
 80025c2:	460b      	mov	r3, r1
 80025c4:	4610      	mov	r0, r2
 80025c6:	4619      	mov	r1, r3
 80025c8:	f7fe fb0e 	bl	8000be8 <__aeabi_d2f>
 80025cc:	4603      	mov	r3, r0
 80025ce:	4a5b      	ldr	r2, [pc, #364]	; (800273c <PullingExperiment+0x584>)
 80025d0:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,TransitionSpeed,TransitionSpeed,0);// Feedforward term
					SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
 80025d2:	4b54      	ldr	r3, [pc, #336]	; (8002724 <PullingExperiment+0x56c>)
 80025d4:	681b      	ldr	r3, [r3, #0]
 80025d6:	4618      	mov	r0, r3
 80025d8:	f7fd ffb6 	bl	8000548 <__aeabi_f2d>
 80025dc:	4604      	mov	r4, r0
 80025de:	460d      	mov	r5, r1
 80025e0:	4b51      	ldr	r3, [pc, #324]	; (8002728 <PullingExperiment+0x570>)
 80025e2:	781b      	ldrb	r3, [r3, #0]
 80025e4:	4618      	mov	r0, r3
 80025e6:	f7fd ff9d 	bl	8000524 <__aeabi_i2d>
 80025ea:	a349      	add	r3, pc, #292	; (adr r3, 8002710 <PullingExperiment+0x558>)
 80025ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f0:	f7fe f802 	bl	80005f8 <__aeabi_dmul>
 80025f4:	4602      	mov	r2, r0
 80025f6:	460b      	mov	r3, r1
 80025f8:	4690      	mov	r8, r2
 80025fa:	4699      	mov	r9, r3
 80025fc:	4b4f      	ldr	r3, [pc, #316]	; (800273c <PullingExperiment+0x584>)
 80025fe:	681b      	ldr	r3, [r3, #0]
 8002600:	4618      	mov	r0, r3
 8002602:	f7fd ffa1 	bl	8000548 <__aeabi_f2d>
 8002606:	4602      	mov	r2, r0
 8002608:	460b      	mov	r3, r1
 800260a:	4640      	mov	r0, r8
 800260c:	4649      	mov	r1, r9
 800260e:	f7fd fff3 	bl	80005f8 <__aeabi_dmul>
 8002612:	4602      	mov	r2, r0
 8002614:	460b      	mov	r3, r1
 8002616:	4610      	mov	r0, r2
 8002618:	4619      	mov	r1, r3
 800261a:	f04f 0200 	mov.w	r2, #0
 800261e:	4b43      	ldr	r3, [pc, #268]	; (800272c <PullingExperiment+0x574>)
 8002620:	f7fd ffea 	bl	80005f8 <__aeabi_dmul>
 8002624:	4602      	mov	r2, r0
 8002626:	460b      	mov	r3, r1
 8002628:	4690      	mov	r8, r2
 800262a:	4699      	mov	r9, r3
 800262c:	4b40      	ldr	r3, [pc, #256]	; (8002730 <PullingExperiment+0x578>)
 800262e:	681b      	ldr	r3, [r3, #0]
 8002630:	4618      	mov	r0, r3
 8002632:	f7fd ff89 	bl	8000548 <__aeabi_f2d>
 8002636:	4602      	mov	r2, r0
 8002638:	460b      	mov	r3, r1
 800263a:	4640      	mov	r0, r8
 800263c:	4649      	mov	r1, r9
 800263e:	f7fe f905 	bl	800084c <__aeabi_ddiv>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	4620      	mov	r0, r4
 8002648:	4629      	mov	r1, r5
 800264a:	f7fd fe1f 	bl	800028c <__adddf3>
 800264e:	4602      	mov	r2, r0
 8002650:	460b      	mov	r3, r1
 8002652:	4610      	mov	r0, r2
 8002654:	4619      	mov	r1, r3
 8002656:	f7fe fac7 	bl	8000be8 <__aeabi_d2f>
 800265a:	4603      	mov	r3, r0
 800265c:	4a31      	ldr	r2, [pc, #196]	; (8002724 <PullingExperiment+0x56c>)
 800265e:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= -810)
 8002660:	4b30      	ldr	r3, [pc, #192]	; (8002724 <PullingExperiment+0x56c>)
 8002662:	edd3 7a00 	vldr	s15, [r3]
 8002666:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8002740 <PullingExperiment+0x588>
 800266a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800266e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002672:	d802      	bhi.n	800267a <PullingExperiment+0x4c2>
						SpeedCmd = -810;
 8002674:	4b2b      	ldr	r3, [pc, #172]	; (8002724 <PullingExperiment+0x56c>)
 8002676:	4a33      	ldr	r2, [pc, #204]	; (8002744 <PullingExperiment+0x58c>)
 8002678:	601a      	str	r2, [r3, #0]
					if (SpeedCmd >= 0)
 800267a:	4b2a      	ldr	r3, [pc, #168]	; (8002724 <PullingExperiment+0x56c>)
 800267c:	edd3 7a00 	vldr	s15, [r3]
 8002680:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002684:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002688:	db03      	blt.n	8002692 <PullingExperiment+0x4da>
						SpeedCmd = 0;
 800268a:	4b26      	ldr	r3, [pc, #152]	; (8002724 <PullingExperiment+0x56c>)
 800268c:	f04f 0200 	mov.w	r2, #0
 8002690:	601a      	str	r2, [r3, #0]
				}
				
				if (SpeedCmd != 0)
 8002692:	4b24      	ldr	r3, [pc, #144]	; (8002724 <PullingExperiment+0x56c>)
 8002694:	edd3 7a00 	vldr	s15, [r3]
 8002698:	eef5 7a40 	vcmp.f32	s15, #0.0
 800269c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026a0:	d00e      	beq.n	80026c0 <PullingExperiment+0x508>
				{
					// Calculate Timer3CountPeriod to generate pulse					
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver, SpeedCmd);
 80026a2:	4b29      	ldr	r3, [pc, #164]	; (8002748 <PullingExperiment+0x590>)
 80026a4:	781b      	ldrb	r3, [r3, #0]
 80026a6:	4a1f      	ldr	r2, [pc, #124]	; (8002724 <PullingExperiment+0x56c>)
 80026a8:	edd2 7a00 	vldr	s15, [r2]
 80026ac:	eeb0 0a67 	vmov.f32	s0, s15
 80026b0:	4618      	mov	r0, r3
 80026b2:	f7ff fa85 	bl	8001bc0 <CalculateTimer3Period>
 80026b6:	4603      	mov	r3, r0
 80026b8:	b29a      	uxth	r2, r3
 80026ba:	4b24      	ldr	r3, [pc, #144]	; (800274c <PullingExperiment+0x594>)
 80026bc:	801a      	strh	r2, [r3, #0]
 80026be:	e001      	b.n	80026c4 <PullingExperiment+0x50c>
					//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else 
				{
					StopPulseGenerating();
 80026c0:	f7ff fa1c 	bl	8001afc <StopPulseGenerating>
				}	
				if (SpeedCmd >= 0) // Stop braking
 80026c4:	4b17      	ldr	r3, [pc, #92]	; (8002724 <PullingExperiment+0x56c>)
 80026c6:	edd3 7a00 	vldr	s15, [r3]
 80026ca:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80026ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026d2:	db15      	blt.n	8002700 <PullingExperiment+0x548>
				{
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 80026d4:	4b13      	ldr	r3, [pc, #76]	; (8002724 <PullingExperiment+0x56c>)
 80026d6:	f04f 0200 	mov.w	r2, #0
 80026da:	601a      	str	r2, [r3, #0]
					
					ResetPIDController();
 80026dc:	f7fe ffc0 	bl	8001660 <ResetPIDController>
					AccRef = - 9.8;
 80026e0:	4b0e      	ldr	r3, [pc, #56]	; (800271c <PullingExperiment+0x564>)
 80026e2:	4a1b      	ldr	r2, [pc, #108]	; (8002750 <PullingExperiment+0x598>)
 80026e4:	601a      	str	r2, [r3, #0]
					
					StartBraking = false;
 80026e6:	4b1b      	ldr	r3, [pc, #108]	; (8002754 <PullingExperiment+0x59c>)
 80026e8:	2200      	movs	r2, #0
 80026ea:	701a      	strb	r2, [r3, #0]
					StartAccleratePulling = false;
 80026ec:	4b1a      	ldr	r3, [pc, #104]	; (8002758 <PullingExperiment+0x5a0>)
 80026ee:	2200      	movs	r2, #0
 80026f0:	701a      	strb	r2, [r3, #0]
					StopPulseGenerating();
 80026f2:	f7ff fa03 	bl	8001afc <StopPulseGenerating>
					CompleteRunning = true; // Set this flag to return true in the next time
 80026f6:	4b19      	ldr	r3, [pc, #100]	; (800275c <PullingExperiment+0x5a4>)
 80026f8:	2201      	movs	r2, #1
 80026fa:	701a      	strb	r2, [r3, #0]
					return true;
 80026fc:	2301      	movs	r3, #1
 80026fe:	e000      	b.n	8002702 <PullingExperiment+0x54a>
				}
			}	
		}
		return false;		
 8002700:	2300      	movs	r3, #0
	}	
}
 8002702:	4618      	mov	r0, r3
 8002704:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002708:	33333333 	.word	0x33333333
 800270c:	40233333 	.word	0x40233333
 8002710:	d2f1a9fc 	.word	0xd2f1a9fc
 8002714:	3f50624d 	.word	0x3f50624d
 8002718:	20000480 	.word	0x20000480
 800271c:	2000000c 	.word	0x2000000c
 8002720:	20000444 	.word	0x20000444
 8002724:	200004f4 	.word	0x200004f4
 8002728:	2000045c 	.word	0x2000045c
 800272c:	40240000 	.word	0x40240000
 8002730:	20000458 	.word	0x20000458
 8002734:	20000490 	.word	0x20000490
 8002738:	20000528 	.word	0x20000528
 800273c:	20000538 	.word	0x20000538
 8002740:	c44a8000 	.word	0xc44a8000
 8002744:	c44a8000 	.word	0xc44a8000
 8002748:	20000003 	.word	0x20000003
 800274c:	20000450 	.word	0x20000450
 8002750:	c11ccccd 	.word	0xc11ccccd
 8002754:	2000043a 	.word	0x2000043a
 8002758:	2000043f 	.word	0x2000043f
 800275c:	20000440 	.word	0x20000440

08002760 <PullAndDrop>:

bool PullAndDrop ()
{
 8002760:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002764:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 8002766:	4b9e      	ldr	r3, [pc, #632]	; (80029e0 <PullAndDrop+0x280>)
 8002768:	781b      	ldrb	r3, [r3, #0]
 800276a:	2b00      	cmp	r3, #0
 800276c:	d002      	beq.n	8002774 <PullAndDrop+0x14>
	{
		return true;
 800276e:	2301      	movs	r3, #1
 8002770:	f000 bc8f 	b.w	8003092 <PullAndDrop+0x932>
	}
	else
	{
		// BEGIN PULLING UP
		if (StartPulling && !StartDropping) // Pulling Task
 8002774:	4b9b      	ldr	r3, [pc, #620]	; (80029e4 <PullAndDrop+0x284>)
 8002776:	781b      	ldrb	r3, [r3, #0]
 8002778:	2b00      	cmp	r3, #0
 800277a:	f000 82c6 	beq.w	8002d0a <PullAndDrop+0x5aa>
 800277e:	4b9a      	ldr	r3, [pc, #616]	; (80029e8 <PullAndDrop+0x288>)
 8002780:	781b      	ldrb	r3, [r3, #0]
 8002782:	f083 0301 	eor.w	r3, r3, #1
 8002786:	b2db      	uxtb	r3, r3
 8002788:	2b00      	cmp	r3, #0
 800278a:	f000 82be 	beq.w	8002d0a <PullAndDrop+0x5aa>
		{
			// First Pulling up including going to the initial position
			if (!StartAccleratePulling) 
 800278e:	4b97      	ldr	r3, [pc, #604]	; (80029ec <PullAndDrop+0x28c>)
 8002790:	781b      	ldrb	r3, [r3, #0]
 8002792:	f083 0301 	eor.w	r3, r3, #1
 8002796:	b2db      	uxtb	r3, r3
 8002798:	2b00      	cmp	r3, #0
 800279a:	d02d      	beq.n	80027f8 <PullAndDrop+0x98>
			{
				// Going to the initial position first
				// Direction = true => going down
				// Direction = false => Going up
				if (CheckGoingToRefPosition(Direction, PullingBotomPulseCmdPosition)) // if at the bottom position, then wait for some seconds
 800279c:	4b94      	ldr	r3, [pc, #592]	; (80029f0 <PullAndDrop+0x290>)
 800279e:	781b      	ldrb	r3, [r3, #0]
 80027a0:	4a94      	ldr	r2, [pc, #592]	; (80029f4 <PullAndDrop+0x294>)
 80027a2:	6812      	ldr	r2, [r2, #0]
 80027a4:	4611      	mov	r1, r2
 80027a6:	4618      	mov	r0, r3
 80027a8:	f7ff fa96 	bl	8001cd8 <CheckGoingToRefPosition>
 80027ac:	4603      	mov	r3, r0
 80027ae:	2b00      	cmp	r3, #0
 80027b0:	d01f      	beq.n	80027f2 <PullAndDrop+0x92>
				{
					//BottomPosition = ObjectPosition;
					if (WaitingMiliSecond(StoppingTime)) // Wait for some seconds
 80027b2:	4b91      	ldr	r3, [pc, #580]	; (80029f8 <PullAndDrop+0x298>)
 80027b4:	881b      	ldrh	r3, [r3, #0]
 80027b6:	4618      	mov	r0, r3
 80027b8:	f7ff f9dc 	bl	8001b74 <WaitingMiliSecond>
 80027bc:	4603      	mov	r3, r0
 80027be:	2b00      	cmp	r3, #0
 80027c0:	d014      	beq.n	80027ec <PullAndDrop+0x8c>
					{
						StartAccleratePulling = true; // turn on flag to start acclerating pulling
 80027c2:	4b8a      	ldr	r3, [pc, #552]	; (80029ec <PullAndDrop+0x28c>)
 80027c4:	2201      	movs	r2, #1
 80027c6:	701a      	strb	r2, [r3, #0]
						Direction = false;
 80027c8:	4b89      	ldr	r3, [pc, #548]	; (80029f0 <PullAndDrop+0x290>)
 80027ca:	2200      	movs	r2, #0
 80027cc:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 80027ce:	4b8b      	ldr	r3, [pc, #556]	; (80029fc <PullAndDrop+0x29c>)
 80027d0:	2200      	movs	r2, #0
 80027d2:	701a      	strb	r2, [r3, #0]

						PreAccRef = AccRef;
 80027d4:	4b8a      	ldr	r3, [pc, #552]	; (8002a00 <PullAndDrop+0x2a0>)
 80027d6:	681b      	ldr	r3, [r3, #0]
 80027d8:	4a8a      	ldr	r2, [pc, #552]	; (8002a04 <PullAndDrop+0x2a4>)
 80027da:	6013      	str	r3, [r2, #0]

						PRIsToggled = true; // true = pulling up.
 80027dc:	4b8a      	ldr	r3, [pc, #552]	; (8002a08 <PullAndDrop+0x2a8>)
 80027de:	2201      	movs	r2, #1
 80027e0:	701a      	strb	r2, [r3, #0]
						DisableSTOP(); // Disable the stop
 80027e2:	f7fe fd41 	bl	8001268 <DisableSTOP>
						StartPulseGenerating();			
 80027e6:	f7ff f9a7 	bl	8001b38 <StartPulseGenerating>
 80027ea:	e28e      	b.n	8002d0a <PullAndDrop+0x5aa>
					}
					else return false;
 80027ec:	2300      	movs	r3, #0
 80027ee:	f000 bc50 	b.w	8003092 <PullAndDrop+0x932>
				}
				else return false;
 80027f2:	2300      	movs	r3, #0
 80027f4:	f000 bc4d 	b.w	8003092 <PullAndDrop+0x932>
			}
			else // Start accelerated pulling
			{
				if (!StartBraking) // Accelerating Stage
 80027f8:	4b80      	ldr	r3, [pc, #512]	; (80029fc <PullAndDrop+0x29c>)
 80027fa:	781b      	ldrb	r3, [r3, #0]
 80027fc:	f083 0301 	eor.w	r3, r3, #1
 8002800:	b2db      	uxtb	r3, r3
 8002802:	2b00      	cmp	r3, #0
 8002804:	f000 811e 	beq.w	8002a44 <PullAndDrop+0x2e4>
				{
					
					// Calculate speed cmd
					//RunningTime += SampleTime;
						
					AccRef = -9.6-PullingAccel;
 8002808:	4b80      	ldr	r3, [pc, #512]	; (8002a0c <PullAndDrop+0x2ac>)
 800280a:	681b      	ldr	r3, [r3, #0]
 800280c:	4618      	mov	r0, r3
 800280e:	f7fd fe9b 	bl	8000548 <__aeabi_f2d>
 8002812:	4602      	mov	r2, r0
 8002814:	460b      	mov	r3, r1
 8002816:	a16e      	add	r1, pc, #440	; (adr r1, 80029d0 <PullAndDrop+0x270>)
 8002818:	e9d1 0100 	ldrd	r0, r1, [r1]
 800281c:	f7fd fd34 	bl	8000288 <__aeabi_dsub>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe f9de 	bl	8000be8 <__aeabi_d2f>
 800282c:	4603      	mov	r3, r0
 800282e:	4a74      	ldr	r2, [pc, #464]	; (8002a00 <PullAndDrop+0x2a0>)
 8002830:	6013      	str	r3, [r2, #0]
						
					//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-PullingAccel, PreAccRef); // ramping the reference signal

					//LinearGeneration(&AccRef,-16,-9.6-PullingAccel); // ramping the reference signal
					if (IsOpenLoopControl) // Use open-loop control
 8002832:	4b77      	ldr	r3, [pc, #476]	; (8002a10 <PullAndDrop+0x2b0>)
 8002834:	781b      	ldrb	r3, [r3, #0]
 8002836:	2b00      	cmp	r3, #0
 8002838:	d037      	beq.n	80028aa <PullAndDrop+0x14a>
					{
						//SpeedCmd = LinearGeneration(RunningTime,-PullingEpsilonAcc*10,0,-PullingMaxSpeed,0);// Feedforward term
						//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,0,-PullingMaxSpeed,0);// Feedforward term
						LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,-PullingMaxSpeed);// Feedforward term
 800283a:	4b71      	ldr	r3, [pc, #452]	; (8002a00 <PullAndDrop+0x2a0>)
 800283c:	681b      	ldr	r3, [r3, #0]
 800283e:	4618      	mov	r0, r3
 8002840:	f7fd fe82 	bl	8000548 <__aeabi_f2d>
 8002844:	a364      	add	r3, pc, #400	; (adr r3, 80029d8 <PullAndDrop+0x278>)
 8002846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800284a:	f7fd fd1f 	bl	800028c <__adddf3>
 800284e:	4602      	mov	r2, r0
 8002850:	460b      	mov	r3, r1
 8002852:	4610      	mov	r0, r2
 8002854:	4619      	mov	r1, r3
 8002856:	f04f 0200 	mov.w	r2, #0
 800285a:	4b6e      	ldr	r3, [pc, #440]	; (8002a14 <PullAndDrop+0x2b4>)
 800285c:	f7fd fecc 	bl	80005f8 <__aeabi_dmul>
 8002860:	4602      	mov	r2, r0
 8002862:	460b      	mov	r3, r1
 8002864:	4614      	mov	r4, r2
 8002866:	461d      	mov	r5, r3
 8002868:	4b6b      	ldr	r3, [pc, #428]	; (8002a18 <PullAndDrop+0x2b8>)
 800286a:	681b      	ldr	r3, [r3, #0]
 800286c:	4618      	mov	r0, r3
 800286e:	f7fd fe6b 	bl	8000548 <__aeabi_f2d>
 8002872:	4602      	mov	r2, r0
 8002874:	460b      	mov	r3, r1
 8002876:	4620      	mov	r0, r4
 8002878:	4629      	mov	r1, r5
 800287a:	f7fd ffe7 	bl	800084c <__aeabi_ddiv>
 800287e:	4602      	mov	r2, r0
 8002880:	460b      	mov	r3, r1
 8002882:	4610      	mov	r0, r2
 8002884:	4619      	mov	r1, r3
 8002886:	f7fe f9af 	bl	8000be8 <__aeabi_d2f>
 800288a:	4602      	mov	r2, r0
 800288c:	4b63      	ldr	r3, [pc, #396]	; (8002a1c <PullAndDrop+0x2bc>)
 800288e:	881b      	ldrh	r3, [r3, #0]
 8002890:	425b      	negs	r3, r3
 8002892:	ee07 3a90 	vmov	s15, r3
 8002896:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800289a:	eef0 0a67 	vmov.f32	s1, s15
 800289e:	ee00 2a10 	vmov	s0, r2
 80028a2:	485f      	ldr	r0, [pc, #380]	; (8002a20 <PullAndDrop+0x2c0>)
 80028a4:	f7ff f8cc 	bl	8001a40 <LinearGeneration>
 80028a8:	e048      	b.n	800293c <PullAndDrop+0x1dc>
						//SpeedCmd
					}
					else // Use closed loop Control
					{						
						AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 80028aa:	4b55      	ldr	r3, [pc, #340]	; (8002a00 <PullAndDrop+0x2a0>)
 80028ac:	edd3 7a00 	vldr	s15, [r3]
 80028b0:	4b5c      	ldr	r3, [pc, #368]	; (8002a24 <PullAndDrop+0x2c4>)
 80028b2:	ed93 7a00 	vldr	s14, [r3]
 80028b6:	2201      	movs	r2, #1
 80028b8:	2105      	movs	r1, #5
 80028ba:	f06f 0004 	mvn.w	r0, #4
 80028be:	eef0 0a47 	vmov.f32	s1, s14
 80028c2:	eeb0 0a67 	vmov.f32	s0, s15
 80028c6:	f7fe fe13 	bl	80014f0 <PIDCalculate>
 80028ca:	eef0 7a40 	vmov.f32	s15, s0
 80028ce:	4b56      	ldr	r3, [pc, #344]	; (8002a28 <PullAndDrop+0x2c8>)
 80028d0:	edc3 7a00 	vstr	s15, [r3]
						AccSet = AccSet + AccRef + 9.6;
 80028d4:	4b54      	ldr	r3, [pc, #336]	; (8002a28 <PullAndDrop+0x2c8>)
 80028d6:	ed93 7a00 	vldr	s14, [r3]
 80028da:	4b49      	ldr	r3, [pc, #292]	; (8002a00 <PullAndDrop+0x2a0>)
 80028dc:	edd3 7a00 	vldr	s15, [r3]
 80028e0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028e4:	ee17 0a90 	vmov	r0, s15
 80028e8:	f7fd fe2e 	bl	8000548 <__aeabi_f2d>
 80028ec:	a33a      	add	r3, pc, #232	; (adr r3, 80029d8 <PullAndDrop+0x278>)
 80028ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028f2:	f7fd fccb 	bl	800028c <__adddf3>
 80028f6:	4602      	mov	r2, r0
 80028f8:	460b      	mov	r3, r1
 80028fa:	4610      	mov	r0, r2
 80028fc:	4619      	mov	r1, r3
 80028fe:	f7fe f973 	bl	8000be8 <__aeabi_d2f>
 8002902:	4603      	mov	r3, r0
 8002904:	4a48      	ldr	r2, [pc, #288]	; (8002a28 <PullAndDrop+0x2c8>)
 8002906:	6013      	str	r3, [r2, #0]
						//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,-PullingMaxSpeed,0); // Feedforwad
						LinearGeneration(&SpeedCmd, AccSet*10/DrumRadius,-PullingMaxSpeed);// Feedforward term
 8002908:	4b47      	ldr	r3, [pc, #284]	; (8002a28 <PullAndDrop+0x2c8>)
 800290a:	edd3 7a00 	vldr	s15, [r3]
 800290e:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002912:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002916:	4b40      	ldr	r3, [pc, #256]	; (8002a18 <PullAndDrop+0x2b8>)
 8002918:	edd3 7a00 	vldr	s15, [r3]
 800291c:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002920:	4b3e      	ldr	r3, [pc, #248]	; (8002a1c <PullAndDrop+0x2bc>)
 8002922:	881b      	ldrh	r3, [r3, #0]
 8002924:	425b      	negs	r3, r3
 8002926:	ee07 3a90 	vmov	s15, r3
 800292a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800292e:	eef0 0a67 	vmov.f32	s1, s15
 8002932:	eeb0 0a66 	vmov.f32	s0, s13
 8002936:	483a      	ldr	r0, [pc, #232]	; (8002a20 <PullAndDrop+0x2c0>)
 8002938:	f7ff f882 	bl	8001a40 <LinearGeneration>
					}
					
					if (SpeedCmd != 0)
 800293c:	4b38      	ldr	r3, [pc, #224]	; (8002a20 <PullAndDrop+0x2c0>)
 800293e:	edd3 7a00 	vldr	s15, [r3]
 8002942:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002946:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800294a:	d00e      	beq.n	800296a <PullAndDrop+0x20a>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800294c:	4b37      	ldr	r3, [pc, #220]	; (8002a2c <PullAndDrop+0x2cc>)
 800294e:	781b      	ldrb	r3, [r3, #0]
 8002950:	4a33      	ldr	r2, [pc, #204]	; (8002a20 <PullAndDrop+0x2c0>)
 8002952:	edd2 7a00 	vldr	s15, [r2]
 8002956:	eeb0 0a67 	vmov.f32	s0, s15
 800295a:	4618      	mov	r0, r3
 800295c:	f7ff f930 	bl	8001bc0 <CalculateTimer3Period>
 8002960:	4603      	mov	r3, r0
 8002962:	b29a      	uxth	r2, r3
 8002964:	4b32      	ldr	r3, [pc, #200]	; (8002a30 <PullAndDrop+0x2d0>)
 8002966:	801a      	strh	r2, [r3, #0]
 8002968:	e002      	b.n	8002970 <PullAndDrop+0x210>
						//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
					}
					else 
					{
						//StopPulseGenerating();
						PulseGenerationFlag = false;
 800296a:	4b32      	ldr	r3, [pc, #200]	; (8002a34 <PullAndDrop+0x2d4>)
 800296c:	2200      	movs	r2, #0
 800296e:	701a      	strb	r2, [r3, #0]
					}
					if ((fabs(ObjectPosition - PullingTotalDistance) >= PullingAccelDistance) || (fabs(SpeedCmd) >= PullingMaxSpeed))
 8002970:	4b31      	ldr	r3, [pc, #196]	; (8002a38 <PullAndDrop+0x2d8>)
 8002972:	ed93 7a00 	vldr	s14, [r3]
 8002976:	4b31      	ldr	r3, [pc, #196]	; (8002a3c <PullAndDrop+0x2dc>)
 8002978:	edd3 7a00 	vldr	s15, [r3]
 800297c:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002980:	eeb0 7ae7 	vabs.f32	s14, s15
 8002984:	4b2e      	ldr	r3, [pc, #184]	; (8002a40 <PullAndDrop+0x2e0>)
 8002986:	edd3 7a00 	vldr	s15, [r3]
 800298a:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800298e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002992:	da19      	bge.n	80029c8 <PullAndDrop+0x268>
 8002994:	4b22      	ldr	r3, [pc, #136]	; (8002a20 <PullAndDrop+0x2c0>)
 8002996:	edd3 7a00 	vldr	s15, [r3]
 800299a:	eef0 7ae7 	vabs.f32	s15, s15
 800299e:	ee17 0a90 	vmov	r0, s15
 80029a2:	f7fd fdd1 	bl	8000548 <__aeabi_f2d>
 80029a6:	4604      	mov	r4, r0
 80029a8:	460d      	mov	r5, r1
 80029aa:	4b1c      	ldr	r3, [pc, #112]	; (8002a1c <PullAndDrop+0x2bc>)
 80029ac:	881b      	ldrh	r3, [r3, #0]
 80029ae:	4618      	mov	r0, r3
 80029b0:	f7fd fdb8 	bl	8000524 <__aeabi_i2d>
 80029b4:	4602      	mov	r2, r0
 80029b6:	460b      	mov	r3, r1
 80029b8:	4620      	mov	r0, r4
 80029ba:	4629      	mov	r1, r5
 80029bc:	f7fe f8a2 	bl	8000b04 <__aeabi_dcmpge>
 80029c0:	4603      	mov	r3, r0
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	f000 81a1 	beq.w	8002d0a <PullAndDrop+0x5aa>
					//if (fabs(MotorSpeed) >= PullingMaxSpeed) // Condition to switch to braking stage
					{
						//RunningTime = 0;
						//TransitionSpeed = SpeedCmd;
						StartBraking = true;
 80029c8:	4b0c      	ldr	r3, [pc, #48]	; (80029fc <PullAndDrop+0x29c>)
 80029ca:	2201      	movs	r2, #1
 80029cc:	701a      	strb	r2, [r3, #0]
 80029ce:	e19c      	b.n	8002d0a <PullAndDrop+0x5aa>
 80029d0:	33333333 	.word	0x33333333
 80029d4:	c0233333 	.word	0xc0233333
 80029d8:	33333333 	.word	0x33333333
 80029dc:	40233333 	.word	0x40233333
 80029e0:	20000440 	.word	0x20000440
 80029e4:	20000439 	.word	0x20000439
 80029e8:	20000433 	.word	0x20000433
 80029ec:	2000043f 	.word	0x2000043f
 80029f0:	20000435 	.word	0x20000435
 80029f4:	200004a0 	.word	0x200004a0
 80029f8:	2000045e 	.word	0x2000045e
 80029fc:	2000043a 	.word	0x2000043a
 8002a00:	2000000c 	.word	0x2000000c
 8002a04:	2000052c 	.word	0x2000052c
 8002a08:	20000446 	.word	0x20000446
 8002a0c:	2000047c 	.word	0x2000047c
 8002a10:	20000444 	.word	0x20000444
 8002a14:	40240000 	.word	0x40240000
 8002a18:	20000458 	.word	0x20000458
 8002a1c:	20000490 	.word	0x20000490
 8002a20:	200004f4 	.word	0x200004f4
 8002a24:	20000528 	.word	0x20000528
 8002a28:	20000538 	.word	0x20000538
 8002a2c:	20000003 	.word	0x20000003
 8002a30:	20000450 	.word	0x20000450
 8002a34:	2000043b 	.word	0x2000043b
 8002a38:	20000534 	.word	0x20000534
 8002a3c:	2000049c 	.word	0x2000049c
 8002a40:	20000498 	.word	0x20000498
					//RunningTime += SampleTime;
					// Ramping the ref acceleration
					//AccRef =  = -9.8+PullingDecel;
					
					//AccRef = LinearGeneration(RunningTime,32,PreAccRef,PreAccRef, -9.6+PullingDecel);
					AccRef = -9.6+PullingDecel;
 8002a44:	4b96      	ldr	r3, [pc, #600]	; (8002ca0 <PullAndDrop+0x540>)
 8002a46:	681b      	ldr	r3, [r3, #0]
 8002a48:	4618      	mov	r0, r3
 8002a4a:	f7fd fd7d 	bl	8000548 <__aeabi_f2d>
 8002a4e:	a390      	add	r3, pc, #576	; (adr r3, 8002c90 <PullAndDrop+0x530>)
 8002a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a54:	f7fd fc18 	bl	8000288 <__aeabi_dsub>
 8002a58:	4602      	mov	r2, r0
 8002a5a:	460b      	mov	r3, r1
 8002a5c:	4610      	mov	r0, r2
 8002a5e:	4619      	mov	r1, r3
 8002a60:	f7fe f8c2 	bl	8000be8 <__aeabi_d2f>
 8002a64:	4603      	mov	r3, r0
 8002a66:	4a8f      	ldr	r2, [pc, #572]	; (8002ca4 <PullAndDrop+0x544>)
 8002a68:	6013      	str	r3, [r2, #0]
					//LinearGeneration(&AccRef,48,-9.6+PullingDecel);

					if (IsOpenLoopControl) // Use open-loop control
 8002a6a:	4b8f      	ldr	r3, [pc, #572]	; (8002ca8 <PullAndDrop+0x548>)
 8002a6c:	781b      	ldrb	r3, [r3, #0]
 8002a6e:	2b00      	cmp	r3, #0
 8002a70:	d066      	beq.n	8002b40 <PullAndDrop+0x3e0>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,PullingEpsilonDec,TransitionSpeed,-PullingMaxSpeed,0); // Feedforward term
						//LinearGeneration(&SpeedCmd,(AccRef + 9.6)*10/DrumRadius,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*(AccRef + 9.6)*10/DrumRadius;
 8002a72:	4b8e      	ldr	r3, [pc, #568]	; (8002cac <PullAndDrop+0x54c>)
 8002a74:	681b      	ldr	r3, [r3, #0]
 8002a76:	4618      	mov	r0, r3
 8002a78:	f7fd fd66 	bl	8000548 <__aeabi_f2d>
 8002a7c:	4604      	mov	r4, r0
 8002a7e:	460d      	mov	r5, r1
 8002a80:	4b8b      	ldr	r3, [pc, #556]	; (8002cb0 <PullAndDrop+0x550>)
 8002a82:	781b      	ldrb	r3, [r3, #0]
 8002a84:	4618      	mov	r0, r3
 8002a86:	f7fd fd4d 	bl	8000524 <__aeabi_i2d>
 8002a8a:	a383      	add	r3, pc, #524	; (adr r3, 8002c98 <PullAndDrop+0x538>)
 8002a8c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a90:	f7fd fdb2 	bl	80005f8 <__aeabi_dmul>
 8002a94:	4602      	mov	r2, r0
 8002a96:	460b      	mov	r3, r1
 8002a98:	4690      	mov	r8, r2
 8002a9a:	4699      	mov	r9, r3
 8002a9c:	4b81      	ldr	r3, [pc, #516]	; (8002ca4 <PullAndDrop+0x544>)
 8002a9e:	681b      	ldr	r3, [r3, #0]
 8002aa0:	4618      	mov	r0, r3
 8002aa2:	f7fd fd51 	bl	8000548 <__aeabi_f2d>
 8002aa6:	a37a      	add	r3, pc, #488	; (adr r3, 8002c90 <PullAndDrop+0x530>)
 8002aa8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002aac:	f7fd fbee 	bl	800028c <__adddf3>
 8002ab0:	4602      	mov	r2, r0
 8002ab2:	460b      	mov	r3, r1
 8002ab4:	4640      	mov	r0, r8
 8002ab6:	4649      	mov	r1, r9
 8002ab8:	f7fd fd9e 	bl	80005f8 <__aeabi_dmul>
 8002abc:	4602      	mov	r2, r0
 8002abe:	460b      	mov	r3, r1
 8002ac0:	4610      	mov	r0, r2
 8002ac2:	4619      	mov	r1, r3
 8002ac4:	f04f 0200 	mov.w	r2, #0
 8002ac8:	4b7a      	ldr	r3, [pc, #488]	; (8002cb4 <PullAndDrop+0x554>)
 8002aca:	f7fd fd95 	bl	80005f8 <__aeabi_dmul>
 8002ace:	4602      	mov	r2, r0
 8002ad0:	460b      	mov	r3, r1
 8002ad2:	4690      	mov	r8, r2
 8002ad4:	4699      	mov	r9, r3
 8002ad6:	4b78      	ldr	r3, [pc, #480]	; (8002cb8 <PullAndDrop+0x558>)
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	4618      	mov	r0, r3
 8002adc:	f7fd fd34 	bl	8000548 <__aeabi_f2d>
 8002ae0:	4602      	mov	r2, r0
 8002ae2:	460b      	mov	r3, r1
 8002ae4:	4640      	mov	r0, r8
 8002ae6:	4649      	mov	r1, r9
 8002ae8:	f7fd feb0 	bl	800084c <__aeabi_ddiv>
 8002aec:	4602      	mov	r2, r0
 8002aee:	460b      	mov	r3, r1
 8002af0:	4620      	mov	r0, r4
 8002af2:	4629      	mov	r1, r5
 8002af4:	f7fd fbca 	bl	800028c <__adddf3>
 8002af8:	4602      	mov	r2, r0
 8002afa:	460b      	mov	r3, r1
 8002afc:	4610      	mov	r0, r2
 8002afe:	4619      	mov	r1, r3
 8002b00:	f7fe f872 	bl	8000be8 <__aeabi_d2f>
 8002b04:	4603      	mov	r3, r0
 8002b06:	4a69      	ldr	r2, [pc, #420]	; (8002cac <PullAndDrop+0x54c>)
 8002b08:	6013      	str	r3, [r2, #0]
						if (SpeedCmd <= -810)
 8002b0a:	4b68      	ldr	r3, [pc, #416]	; (8002cac <PullAndDrop+0x54c>)
 8002b0c:	edd3 7a00 	vldr	s15, [r3]
 8002b10:	ed9f 7a6a 	vldr	s14, [pc, #424]	; 8002cbc <PullAndDrop+0x55c>
 8002b14:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002b18:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b1c:	d802      	bhi.n	8002b24 <PullAndDrop+0x3c4>
							SpeedCmd = -810;
 8002b1e:	4b63      	ldr	r3, [pc, #396]	; (8002cac <PullAndDrop+0x54c>)
 8002b20:	4a67      	ldr	r2, [pc, #412]	; (8002cc0 <PullAndDrop+0x560>)
 8002b22:	601a      	str	r2, [r3, #0]
						if (SpeedCmd >= 0)
 8002b24:	4b61      	ldr	r3, [pc, #388]	; (8002cac <PullAndDrop+0x54c>)
 8002b26:	edd3 7a00 	vldr	s15, [r3]
 8002b2a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002b2e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b32:	f2c0 8094 	blt.w	8002c5e <PullAndDrop+0x4fe>
							SpeedCmd = 0;
 8002b36:	4b5d      	ldr	r3, [pc, #372]	; (8002cac <PullAndDrop+0x54c>)
 8002b38:	f04f 0200 	mov.w	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
 8002b3e:	e08e      	b.n	8002c5e <PullAndDrop+0x4fe>
					}
					else // Use closed loop Control
					{
						AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 8002b40:	4b58      	ldr	r3, [pc, #352]	; (8002ca4 <PullAndDrop+0x544>)
 8002b42:	edd3 7a00 	vldr	s15, [r3]
 8002b46:	4b5f      	ldr	r3, [pc, #380]	; (8002cc4 <PullAndDrop+0x564>)
 8002b48:	ed93 7a00 	vldr	s14, [r3]
 8002b4c:	2201      	movs	r2, #1
 8002b4e:	2105      	movs	r1, #5
 8002b50:	f06f 0004 	mvn.w	r0, #4
 8002b54:	eef0 0a47 	vmov.f32	s1, s14
 8002b58:	eeb0 0a67 	vmov.f32	s0, s15
 8002b5c:	f7fe fcc8 	bl	80014f0 <PIDCalculate>
 8002b60:	eef0 7a40 	vmov.f32	s15, s0
 8002b64:	4b58      	ldr	r3, [pc, #352]	; (8002cc8 <PullAndDrop+0x568>)
 8002b66:	edc3 7a00 	vstr	s15, [r3]
						AccSet = AccSet + AccRef + 9.6;
 8002b6a:	4b57      	ldr	r3, [pc, #348]	; (8002cc8 <PullAndDrop+0x568>)
 8002b6c:	ed93 7a00 	vldr	s14, [r3]
 8002b70:	4b4c      	ldr	r3, [pc, #304]	; (8002ca4 <PullAndDrop+0x544>)
 8002b72:	edd3 7a00 	vldr	s15, [r3]
 8002b76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002b7a:	ee17 0a90 	vmov	r0, s15
 8002b7e:	f7fd fce3 	bl	8000548 <__aeabi_f2d>
 8002b82:	a343      	add	r3, pc, #268	; (adr r3, 8002c90 <PullAndDrop+0x530>)
 8002b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002b88:	f7fd fb80 	bl	800028c <__adddf3>
 8002b8c:	4602      	mov	r2, r0
 8002b8e:	460b      	mov	r3, r1
 8002b90:	4610      	mov	r0, r2
 8002b92:	4619      	mov	r1, r3
 8002b94:	f7fe f828 	bl	8000be8 <__aeabi_d2f>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	4a4b      	ldr	r2, [pc, #300]	; (8002cc8 <PullAndDrop+0x568>)
 8002b9c:	6013      	str	r3, [r2, #0]
						//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,TransitionSpeed,TransitionSpeed,DroppingMaxSpeed); // Feedforward term
						//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,TransitionSpeed,-PullingMaxSpeed,0);// Feedforward term
						//LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,TransitionSpeed,0);// Feedforward term
						SpeedCmd += SampleTime*0.001*AccSet*10/DrumRadius;
 8002b9e:	4b43      	ldr	r3, [pc, #268]	; (8002cac <PullAndDrop+0x54c>)
 8002ba0:	681b      	ldr	r3, [r3, #0]
 8002ba2:	4618      	mov	r0, r3
 8002ba4:	f7fd fcd0 	bl	8000548 <__aeabi_f2d>
 8002ba8:	4604      	mov	r4, r0
 8002baa:	460d      	mov	r5, r1
 8002bac:	4b40      	ldr	r3, [pc, #256]	; (8002cb0 <PullAndDrop+0x550>)
 8002bae:	781b      	ldrb	r3, [r3, #0]
 8002bb0:	4618      	mov	r0, r3
 8002bb2:	f7fd fcb7 	bl	8000524 <__aeabi_i2d>
 8002bb6:	a338      	add	r3, pc, #224	; (adr r3, 8002c98 <PullAndDrop+0x538>)
 8002bb8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002bbc:	f7fd fd1c 	bl	80005f8 <__aeabi_dmul>
 8002bc0:	4602      	mov	r2, r0
 8002bc2:	460b      	mov	r3, r1
 8002bc4:	4690      	mov	r8, r2
 8002bc6:	4699      	mov	r9, r3
 8002bc8:	4b3f      	ldr	r3, [pc, #252]	; (8002cc8 <PullAndDrop+0x568>)
 8002bca:	681b      	ldr	r3, [r3, #0]
 8002bcc:	4618      	mov	r0, r3
 8002bce:	f7fd fcbb 	bl	8000548 <__aeabi_f2d>
 8002bd2:	4602      	mov	r2, r0
 8002bd4:	460b      	mov	r3, r1
 8002bd6:	4640      	mov	r0, r8
 8002bd8:	4649      	mov	r1, r9
 8002bda:	f7fd fd0d 	bl	80005f8 <__aeabi_dmul>
 8002bde:	4602      	mov	r2, r0
 8002be0:	460b      	mov	r3, r1
 8002be2:	4610      	mov	r0, r2
 8002be4:	4619      	mov	r1, r3
 8002be6:	f04f 0200 	mov.w	r2, #0
 8002bea:	4b32      	ldr	r3, [pc, #200]	; (8002cb4 <PullAndDrop+0x554>)
 8002bec:	f7fd fd04 	bl	80005f8 <__aeabi_dmul>
 8002bf0:	4602      	mov	r2, r0
 8002bf2:	460b      	mov	r3, r1
 8002bf4:	4690      	mov	r8, r2
 8002bf6:	4699      	mov	r9, r3
 8002bf8:	4b2f      	ldr	r3, [pc, #188]	; (8002cb8 <PullAndDrop+0x558>)
 8002bfa:	681b      	ldr	r3, [r3, #0]
 8002bfc:	4618      	mov	r0, r3
 8002bfe:	f7fd fca3 	bl	8000548 <__aeabi_f2d>
 8002c02:	4602      	mov	r2, r0
 8002c04:	460b      	mov	r3, r1
 8002c06:	4640      	mov	r0, r8
 8002c08:	4649      	mov	r1, r9
 8002c0a:	f7fd fe1f 	bl	800084c <__aeabi_ddiv>
 8002c0e:	4602      	mov	r2, r0
 8002c10:	460b      	mov	r3, r1
 8002c12:	4620      	mov	r0, r4
 8002c14:	4629      	mov	r1, r5
 8002c16:	f7fd fb39 	bl	800028c <__adddf3>
 8002c1a:	4602      	mov	r2, r0
 8002c1c:	460b      	mov	r3, r1
 8002c1e:	4610      	mov	r0, r2
 8002c20:	4619      	mov	r1, r3
 8002c22:	f7fd ffe1 	bl	8000be8 <__aeabi_d2f>
 8002c26:	4603      	mov	r3, r0
 8002c28:	4a20      	ldr	r2, [pc, #128]	; (8002cac <PullAndDrop+0x54c>)
 8002c2a:	6013      	str	r3, [r2, #0]
						if (SpeedCmd <= -810)
 8002c2c:	4b1f      	ldr	r3, [pc, #124]	; (8002cac <PullAndDrop+0x54c>)
 8002c2e:	edd3 7a00 	vldr	s15, [r3]
 8002c32:	ed9f 7a22 	vldr	s14, [pc, #136]	; 8002cbc <PullAndDrop+0x55c>
 8002c36:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002c3a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c3e:	d802      	bhi.n	8002c46 <PullAndDrop+0x4e6>
							SpeedCmd = -810;
 8002c40:	4b1a      	ldr	r3, [pc, #104]	; (8002cac <PullAndDrop+0x54c>)
 8002c42:	4a1f      	ldr	r2, [pc, #124]	; (8002cc0 <PullAndDrop+0x560>)
 8002c44:	601a      	str	r2, [r3, #0]
						if (SpeedCmd >= 0)
 8002c46:	4b19      	ldr	r3, [pc, #100]	; (8002cac <PullAndDrop+0x54c>)
 8002c48:	edd3 7a00 	vldr	s15, [r3]
 8002c4c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c50:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c54:	db03      	blt.n	8002c5e <PullAndDrop+0x4fe>
							SpeedCmd = 0;
 8002c56:	4b15      	ldr	r3, [pc, #84]	; (8002cac <PullAndDrop+0x54c>)
 8002c58:	f04f 0200 	mov.w	r2, #0
 8002c5c:	601a      	str	r2, [r3, #0]
					}

					if (SpeedCmd != 0)
 8002c5e:	4b13      	ldr	r3, [pc, #76]	; (8002cac <PullAndDrop+0x54c>)
 8002c60:	edd3 7a00 	vldr	s15, [r3]
 8002c64:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c68:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c6c:	d032      	beq.n	8002cd4 <PullAndDrop+0x574>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002c6e:	4b17      	ldr	r3, [pc, #92]	; (8002ccc <PullAndDrop+0x56c>)
 8002c70:	781b      	ldrb	r3, [r3, #0]
 8002c72:	4a0e      	ldr	r2, [pc, #56]	; (8002cac <PullAndDrop+0x54c>)
 8002c74:	edd2 7a00 	vldr	s15, [r2]
 8002c78:	eeb0 0a67 	vmov.f32	s0, s15
 8002c7c:	4618      	mov	r0, r3
 8002c7e:	f7fe ff9f 	bl	8001bc0 <CalculateTimer3Period>
 8002c82:	4603      	mov	r3, r0
 8002c84:	b29a      	uxth	r2, r3
 8002c86:	4b12      	ldr	r3, [pc, #72]	; (8002cd0 <PullAndDrop+0x570>)
 8002c88:	801a      	strh	r2, [r3, #0]
 8002c8a:	e026      	b.n	8002cda <PullAndDrop+0x57a>
 8002c8c:	f3af 8000 	nop.w
 8002c90:	33333333 	.word	0x33333333
 8002c94:	40233333 	.word	0x40233333
 8002c98:	d2f1a9fc 	.word	0xd2f1a9fc
 8002c9c:	3f50624d 	.word	0x3f50624d
 8002ca0:	20000480 	.word	0x20000480
 8002ca4:	2000000c 	.word	0x2000000c
 8002ca8:	20000444 	.word	0x20000444
 8002cac:	200004f4 	.word	0x200004f4
 8002cb0:	2000045c 	.word	0x2000045c
 8002cb4:	40240000 	.word	0x40240000
 8002cb8:	20000458 	.word	0x20000458
 8002cbc:	c44a8000 	.word	0xc44a8000
 8002cc0:	c44a8000 	.word	0xc44a8000
 8002cc4:	20000528 	.word	0x20000528
 8002cc8:	20000538 	.word	0x20000538
 8002ccc:	20000003 	.word	0x20000003
 8002cd0:	20000450 	.word	0x20000450
						// Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
					}
					else
					{
						PulseGenerationFlag = false;
 8002cd4:	4b82      	ldr	r3, [pc, #520]	; (8002ee0 <PullAndDrop+0x780>)
 8002cd6:	2200      	movs	r2, #0
 8002cd8:	701a      	strb	r2, [r3, #0]
					}
					if ((ObjectPosition <= 0.2) || (SpeedCmd >= 0)) // condition to switch to dropping stage
 8002cda:	4b82      	ldr	r3, [pc, #520]	; (8002ee4 <PullAndDrop+0x784>)
 8002cdc:	681b      	ldr	r3, [r3, #0]
 8002cde:	4618      	mov	r0, r3
 8002ce0:	f7fd fc32 	bl	8000548 <__aeabi_f2d>
 8002ce4:	a37a      	add	r3, pc, #488	; (adr r3, 8002ed0 <PullAndDrop+0x770>)
 8002ce6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002cea:	f7fd ff01 	bl	8000af0 <__aeabi_dcmple>
 8002cee:	4603      	mov	r3, r0
 8002cf0:	2b00      	cmp	r3, #0
 8002cf2:	d107      	bne.n	8002d04 <PullAndDrop+0x5a4>
 8002cf4:	4b7c      	ldr	r3, [pc, #496]	; (8002ee8 <PullAndDrop+0x788>)
 8002cf6:	edd3 7a00 	vldr	s15, [r3]
 8002cfa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cfe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d02:	db02      	blt.n	8002d0a <PullAndDrop+0x5aa>
					{
						//RunningTime = 0;
						//SpeedCmd = 0; //
						//StartAccleratePulling = false;
						StartWaiting = true; // Switch to waiting stage
 8002d04:	4b79      	ldr	r3, [pc, #484]	; (8002eec <PullAndDrop+0x78c>)
 8002d06:	2201      	movs	r2, #1
 8002d08:	701a      	strb	r2, [r3, #0]
		}
		// END Pulling Task

		// BEGIN WAITING TASK
		// Wait for some time before dropping
		if (StartWaiting)
 8002d0a:	4b78      	ldr	r3, [pc, #480]	; (8002eec <PullAndDrop+0x78c>)
 8002d0c:	781b      	ldrb	r3, [r3, #0]
 8002d0e:	2b00      	cmp	r3, #0
 8002d10:	d011      	beq.n	8002d36 <PullAndDrop+0x5d6>
		{
			if (WaitingMiliSecond(WaitingTime))
 8002d12:	4b77      	ldr	r3, [pc, #476]	; (8002ef0 <PullAndDrop+0x790>)
 8002d14:	881b      	ldrh	r3, [r3, #0]
 8002d16:	4618      	mov	r0, r3
 8002d18:	f7fe ff2c 	bl	8001b74 <WaitingMiliSecond>
 8002d1c:	4603      	mov	r3, r0
 8002d1e:	2b00      	cmp	r3, #0
 8002d20:	d009      	beq.n	8002d36 <PullAndDrop+0x5d6>
			{
				StartWaiting = false;
 8002d22:	4b72      	ldr	r3, [pc, #456]	; (8002eec <PullAndDrop+0x78c>)
 8002d24:	2200      	movs	r2, #0
 8002d26:	701a      	strb	r2, [r3, #0]
				PreAccRef = AccRef;
 8002d28:	4b72      	ldr	r3, [pc, #456]	; (8002ef4 <PullAndDrop+0x794>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a72      	ldr	r2, [pc, #456]	; (8002ef8 <PullAndDrop+0x798>)
 8002d2e:	6013      	str	r3, [r2, #0]
				InitializeRunning(DroppingMode);
 8002d30:	2001      	movs	r0, #1
 8002d32:	f7ff f9eb 	bl	800210c <InitializeRunning>
		}

		// END WAITING
		
		// BEGIN DROPPING TASK
		if (StartDropping && !StartPulling)
 8002d36:	4b71      	ldr	r3, [pc, #452]	; (8002efc <PullAndDrop+0x79c>)
 8002d38:	781b      	ldrb	r3, [r3, #0]
 8002d3a:	2b00      	cmp	r3, #0
 8002d3c:	f000 81a8 	beq.w	8003090 <PullAndDrop+0x930>
 8002d40:	4b6f      	ldr	r3, [pc, #444]	; (8002f00 <PullAndDrop+0x7a0>)
 8002d42:	781b      	ldrb	r3, [r3, #0]
 8002d44:	f083 0301 	eor.w	r3, r3, #1
 8002d48:	b2db      	uxtb	r3, r3
 8002d4a:	2b00      	cmp	r3, #0
 8002d4c:	f000 81a0 	beq.w	8003090 <PullAndDrop+0x930>
		{
				// ACCLERATING DROPPING STAGE
				if (!StartBraking) // Accelerating Stage
 8002d50:	4b6c      	ldr	r3, [pc, #432]	; (8002f04 <PullAndDrop+0x7a4>)
 8002d52:	781b      	ldrb	r3, [r3, #0]
 8002d54:	f083 0301 	eor.w	r3, r3, #1
 8002d58:	b2db      	uxtb	r3, r3
 8002d5a:	2b00      	cmp	r3, #0
 8002d5c:	f000 80ea 	beq.w	8002f34 <PullAndDrop+0x7d4>
				{
					// Calculate speed cmd
					AccRef = -9.6+DroppingAccel;
 8002d60:	4b69      	ldr	r3, [pc, #420]	; (8002f08 <PullAndDrop+0x7a8>)
 8002d62:	681b      	ldr	r3, [r3, #0]
 8002d64:	4618      	mov	r0, r3
 8002d66:	f7fd fbef 	bl	8000548 <__aeabi_f2d>
 8002d6a:	a35b      	add	r3, pc, #364	; (adr r3, 8002ed8 <PullAndDrop+0x778>)
 8002d6c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d70:	f7fd fa8a 	bl	8000288 <__aeabi_dsub>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	4610      	mov	r0, r2
 8002d7a:	4619      	mov	r1, r3
 8002d7c:	f7fd ff34 	bl	8000be8 <__aeabi_d2f>
 8002d80:	4603      	mov	r3, r0
 8002d82:	4a5c      	ldr	r2, [pc, #368]	; (8002ef4 <PullAndDrop+0x794>)
 8002d84:	6013      	str	r3, [r2, #0]
//					else
//					{
//						AccRef = LinearGeneration(RunningTime,16,PreAccRef, PreAccRef,-9.6+DroppingAccel);
//					}

					if (IsOpenLoopControl) // Use open-loop control
 8002d86:	4b61      	ldr	r3, [pc, #388]	; (8002f0c <PullAndDrop+0x7ac>)
 8002d88:	781b      	ldrb	r3, [r3, #0]
 8002d8a:	2b00      	cmp	r3, #0
 8002d8c:	d036      	beq.n	8002dfc <PullAndDrop+0x69c>
					{
						//SpeedCmd = LinearSpeedGeneration(RunningTime,DroppingEpsilonAcc,0,0,DroppingMaxSpeed); // Feedforward term
						LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius,DroppingMaxSpeed);// Feedforward term
 8002d8e:	4b59      	ldr	r3, [pc, #356]	; (8002ef4 <PullAndDrop+0x794>)
 8002d90:	681b      	ldr	r3, [r3, #0]
 8002d92:	4618      	mov	r0, r3
 8002d94:	f7fd fbd8 	bl	8000548 <__aeabi_f2d>
 8002d98:	a34f      	add	r3, pc, #316	; (adr r3, 8002ed8 <PullAndDrop+0x778>)
 8002d9a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002d9e:	f7fd fa75 	bl	800028c <__adddf3>
 8002da2:	4602      	mov	r2, r0
 8002da4:	460b      	mov	r3, r1
 8002da6:	4610      	mov	r0, r2
 8002da8:	4619      	mov	r1, r3
 8002daa:	f04f 0200 	mov.w	r2, #0
 8002dae:	4b58      	ldr	r3, [pc, #352]	; (8002f10 <PullAndDrop+0x7b0>)
 8002db0:	f7fd fc22 	bl	80005f8 <__aeabi_dmul>
 8002db4:	4602      	mov	r2, r0
 8002db6:	460b      	mov	r3, r1
 8002db8:	4614      	mov	r4, r2
 8002dba:	461d      	mov	r5, r3
 8002dbc:	4b55      	ldr	r3, [pc, #340]	; (8002f14 <PullAndDrop+0x7b4>)
 8002dbe:	681b      	ldr	r3, [r3, #0]
 8002dc0:	4618      	mov	r0, r3
 8002dc2:	f7fd fbc1 	bl	8000548 <__aeabi_f2d>
 8002dc6:	4602      	mov	r2, r0
 8002dc8:	460b      	mov	r3, r1
 8002dca:	4620      	mov	r0, r4
 8002dcc:	4629      	mov	r1, r5
 8002dce:	f7fd fd3d 	bl	800084c <__aeabi_ddiv>
 8002dd2:	4602      	mov	r2, r0
 8002dd4:	460b      	mov	r3, r1
 8002dd6:	4610      	mov	r0, r2
 8002dd8:	4619      	mov	r1, r3
 8002dda:	f7fd ff05 	bl	8000be8 <__aeabi_d2f>
 8002dde:	4602      	mov	r2, r0
 8002de0:	4b4d      	ldr	r3, [pc, #308]	; (8002f18 <PullAndDrop+0x7b8>)
 8002de2:	881b      	ldrh	r3, [r3, #0]
 8002de4:	ee07 3a90 	vmov	s15, r3
 8002de8:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002dec:	eef0 0a67 	vmov.f32	s1, s15
 8002df0:	ee00 2a10 	vmov	s0, r2
 8002df4:	483c      	ldr	r0, [pc, #240]	; (8002ee8 <PullAndDrop+0x788>)
 8002df6:	f7fe fe23 	bl	8001a40 <LinearGeneration>
 8002dfa:	e038      	b.n	8002e6e <PullAndDrop+0x70e>
					
						//SpeedCmd = PIDSpeedCmd; // PID controller only
						//SpeedCmd = FeedFWSpeedCmd;
						//SpeedCmd = FeedFWSpeedCmd + PIDSpeedCmd; // Feedforward controller
						
						AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 8002dfc:	4b3d      	ldr	r3, [pc, #244]	; (8002ef4 <PullAndDrop+0x794>)
 8002dfe:	edd3 7a00 	vldr	s15, [r3]
 8002e02:	4b46      	ldr	r3, [pc, #280]	; (8002f1c <PullAndDrop+0x7bc>)
 8002e04:	ed93 7a00 	vldr	s14, [r3]
 8002e08:	2201      	movs	r2, #1
 8002e0a:	2105      	movs	r1, #5
 8002e0c:	f06f 0004 	mvn.w	r0, #4
 8002e10:	eef0 0a47 	vmov.f32	s1, s14
 8002e14:	eeb0 0a67 	vmov.f32	s0, s15
 8002e18:	f7fe fb6a 	bl	80014f0 <PIDCalculate>
 8002e1c:	eef0 7a40 	vmov.f32	s15, s0
 8002e20:	4b3f      	ldr	r3, [pc, #252]	; (8002f20 <PullAndDrop+0x7c0>)
 8002e22:	edc3 7a00 	vstr	s15, [r3]
						AccSet = AccSet + DroppingAccel;
 8002e26:	4b3e      	ldr	r3, [pc, #248]	; (8002f20 <PullAndDrop+0x7c0>)
 8002e28:	ed93 7a00 	vldr	s14, [r3]
 8002e2c:	4b36      	ldr	r3, [pc, #216]	; (8002f08 <PullAndDrop+0x7a8>)
 8002e2e:	edd3 7a00 	vldr	s15, [r3]
 8002e32:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e36:	4b3a      	ldr	r3, [pc, #232]	; (8002f20 <PullAndDrop+0x7c0>)
 8002e38:	edc3 7a00 	vstr	s15, [r3]
						//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
						//SpeedCmd = LinearGeneration(RunningTime,AccSet*10/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
						LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,DroppingMaxSpeed); // Feedforward term
 8002e3c:	4b38      	ldr	r3, [pc, #224]	; (8002f20 <PullAndDrop+0x7c0>)
 8002e3e:	edd3 7a00 	vldr	s15, [r3]
 8002e42:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002e46:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002e4a:	4b32      	ldr	r3, [pc, #200]	; (8002f14 <PullAndDrop+0x7b4>)
 8002e4c:	edd3 7a00 	vldr	s15, [r3]
 8002e50:	eec7 6a27 	vdiv.f32	s13, s14, s15
 8002e54:	4b30      	ldr	r3, [pc, #192]	; (8002f18 <PullAndDrop+0x7b8>)
 8002e56:	881b      	ldrh	r3, [r3, #0]
 8002e58:	ee07 3a90 	vmov	s15, r3
 8002e5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002e60:	eef0 0a67 	vmov.f32	s1, s15
 8002e64:	eeb0 0a66 	vmov.f32	s0, s13
 8002e68:	481f      	ldr	r0, [pc, #124]	; (8002ee8 <PullAndDrop+0x788>)
 8002e6a:	f7fe fde9 	bl	8001a40 <LinearGeneration>
					}							
					
					if (SpeedCmd != 0)
 8002e6e:	4b1e      	ldr	r3, [pc, #120]	; (8002ee8 <PullAndDrop+0x788>)
 8002e70:	edd3 7a00 	vldr	s15, [r3]
 8002e74:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002e78:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002e7c:	d00d      	beq.n	8002e9a <PullAndDrop+0x73a>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8002e7e:	4b29      	ldr	r3, [pc, #164]	; (8002f24 <PullAndDrop+0x7c4>)
 8002e80:	781b      	ldrb	r3, [r3, #0]
 8002e82:	4a19      	ldr	r2, [pc, #100]	; (8002ee8 <PullAndDrop+0x788>)
 8002e84:	edd2 7a00 	vldr	s15, [r2]
 8002e88:	eeb0 0a67 	vmov.f32	s0, s15
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fe fe97 	bl	8001bc0 <CalculateTimer3Period>
 8002e92:	4603      	mov	r3, r0
 8002e94:	b29a      	uxth	r2, r3
 8002e96:	4b24      	ldr	r3, [pc, #144]	; (8002f28 <PullAndDrop+0x7c8>)
 8002e98:	801a      	strh	r2, [r3, #0]
					}
					else 
					{
						//StopPulseGenerating();
					}
					if ((SpeedCmd >= DroppingMaxSpeed))
 8002e9a:	4b1f      	ldr	r3, [pc, #124]	; (8002f18 <PullAndDrop+0x7b8>)
 8002e9c:	881b      	ldrh	r3, [r3, #0]
 8002e9e:	ee07 3a90 	vmov	s15, r3
 8002ea2:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002ea6:	4b10      	ldr	r3, [pc, #64]	; (8002ee8 <PullAndDrop+0x788>)
 8002ea8:	edd3 7a00 	vldr	s15, [r3]
 8002eac:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002eb0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002eb4:	f200 80ec 	bhi.w	8003090 <PullAndDrop+0x930>
					//if(ObjectPosition >= DroppingAccelDistance)
					{
						//RunningTime = 0;
						StartBraking = true;
 8002eb8:	4b12      	ldr	r3, [pc, #72]	; (8002f04 <PullAndDrop+0x7a4>)
 8002eba:	2201      	movs	r2, #1
 8002ebc:	701a      	strb	r2, [r3, #0]
						//TransitionSpeed = SpeedCmd;
						// Reset PID Controller
						IntergraError = 0;
 8002ebe:	4b1b      	ldr	r3, [pc, #108]	; (8002f2c <PullAndDrop+0x7cc>)
 8002ec0:	f04f 0200 	mov.w	r2, #0
 8002ec4:	601a      	str	r2, [r3, #0]
						PreError = 0;
 8002ec6:	4b1a      	ldr	r3, [pc, #104]	; (8002f30 <PullAndDrop+0x7d0>)
 8002ec8:	f04f 0200 	mov.w	r2, #0
 8002ecc:	601a      	str	r2, [r3, #0]
 8002ece:	e0df      	b.n	8003090 <PullAndDrop+0x930>
 8002ed0:	9999999a 	.word	0x9999999a
 8002ed4:	3fc99999 	.word	0x3fc99999
 8002ed8:	33333333 	.word	0x33333333
 8002edc:	40233333 	.word	0x40233333
 8002ee0:	2000043b 	.word	0x2000043b
 8002ee4:	20000534 	.word	0x20000534
 8002ee8:	200004f4 	.word	0x200004f4
 8002eec:	2000043e 	.word	0x2000043e
 8002ef0:	2000044a 	.word	0x2000044a
 8002ef4:	2000000c 	.word	0x2000000c
 8002ef8:	2000052c 	.word	0x2000052c
 8002efc:	20000433 	.word	0x20000433
 8002f00:	20000439 	.word	0x20000439
 8002f04:	2000043a 	.word	0x2000043a
 8002f08:	20000464 	.word	0x20000464
 8002f0c:	20000444 	.word	0x20000444
 8002f10:	40240000 	.word	0x40240000
 8002f14:	20000458 	.word	0x20000458
 8002f18:	20000474 	.word	0x20000474
 8002f1c:	20000528 	.word	0x20000528
 8002f20:	20000538 	.word	0x20000538
 8002f24:	20000003 	.word	0x20000003
 8002f28:	20000450 	.word	0x20000450
 8002f2c:	20000524 	.word	0x20000524
 8002f30:	20000530 	.word	0x20000530
				{
					//RunningTime += SampleTime;

					//AccRef = LinearGeneration(RunningTime,-8,PreAccRef,-9.6-DroppingDecel, PreAccRef);
					//LinearGeneration(&AccRef,-32,-9.6-DroppingDecel);
					AccRef = -9.8-DroppingDecel;
 8002f34:	4b5e      	ldr	r3, [pc, #376]	; (80030b0 <PullAndDrop+0x950>)
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	4618      	mov	r0, r3
 8002f3a:	f7fd fb05 	bl	8000548 <__aeabi_f2d>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	a155      	add	r1, pc, #340	; (adr r1, 8003098 <PullAndDrop+0x938>)
 8002f44:	e9d1 0100 	ldrd	r0, r1, [r1]
 8002f48:	f7fd f99e 	bl	8000288 <__aeabi_dsub>
 8002f4c:	4602      	mov	r2, r0
 8002f4e:	460b      	mov	r3, r1
 8002f50:	4610      	mov	r0, r2
 8002f52:	4619      	mov	r1, r3
 8002f54:	f7fd fe48 	bl	8000be8 <__aeabi_d2f>
 8002f58:	4603      	mov	r3, r0
 8002f5a:	4a56      	ldr	r2, [pc, #344]	; (80030b4 <PullAndDrop+0x954>)
 8002f5c:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,TransitionSpeed,0,TransitionSpeed);
					//SpeedCmd = LinearGeneration(RunningTime,-DroppingEpsilonDec*10,TransitionSpeed,0,TransitionSpeed);
					//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,DroppingMaxSpeed,0,DroppingMaxSpeed);
					//SpeedCmd = LinearGeneration(RunningTime,(AccRef+9.6)*10/DrumRadius,TransitionSpeed,0,2*TransitionSpeed);
					//LinearGeneration(&SpeedCmd,(AccRef+9.6)*10/DrumRadius);
					SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 8002f5e:	4b56      	ldr	r3, [pc, #344]	; (80030b8 <PullAndDrop+0x958>)
 8002f60:	681b      	ldr	r3, [r3, #0]
 8002f62:	4618      	mov	r0, r3
 8002f64:	f7fd faf0 	bl	8000548 <__aeabi_f2d>
 8002f68:	4604      	mov	r4, r0
 8002f6a:	460d      	mov	r5, r1
 8002f6c:	4b53      	ldr	r3, [pc, #332]	; (80030bc <PullAndDrop+0x95c>)
 8002f6e:	781b      	ldrb	r3, [r3, #0]
 8002f70:	4618      	mov	r0, r3
 8002f72:	f7fd fad7 	bl	8000524 <__aeabi_i2d>
 8002f76:	a34a      	add	r3, pc, #296	; (adr r3, 80030a0 <PullAndDrop+0x940>)
 8002f78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f7c:	f7fd fb3c 	bl	80005f8 <__aeabi_dmul>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	4690      	mov	r8, r2
 8002f86:	4699      	mov	r9, r3
 8002f88:	4b4a      	ldr	r3, [pc, #296]	; (80030b4 <PullAndDrop+0x954>)
 8002f8a:	681b      	ldr	r3, [r3, #0]
 8002f8c:	4618      	mov	r0, r3
 8002f8e:	f7fd fadb 	bl	8000548 <__aeabi_f2d>
 8002f92:	a345      	add	r3, pc, #276	; (adr r3, 80030a8 <PullAndDrop+0x948>)
 8002f94:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002f98:	f7fd f978 	bl	800028c <__adddf3>
 8002f9c:	4602      	mov	r2, r0
 8002f9e:	460b      	mov	r3, r1
 8002fa0:	4640      	mov	r0, r8
 8002fa2:	4649      	mov	r1, r9
 8002fa4:	f7fd fb28 	bl	80005f8 <__aeabi_dmul>
 8002fa8:	4602      	mov	r2, r0
 8002faa:	460b      	mov	r3, r1
 8002fac:	4610      	mov	r0, r2
 8002fae:	4619      	mov	r1, r3
 8002fb0:	f04f 0200 	mov.w	r2, #0
 8002fb4:	4b42      	ldr	r3, [pc, #264]	; (80030c0 <PullAndDrop+0x960>)
 8002fb6:	f7fd fb1f 	bl	80005f8 <__aeabi_dmul>
 8002fba:	4602      	mov	r2, r0
 8002fbc:	460b      	mov	r3, r1
 8002fbe:	4690      	mov	r8, r2
 8002fc0:	4699      	mov	r9, r3
 8002fc2:	4b40      	ldr	r3, [pc, #256]	; (80030c4 <PullAndDrop+0x964>)
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	4618      	mov	r0, r3
 8002fc8:	f7fd fabe 	bl	8000548 <__aeabi_f2d>
 8002fcc:	4602      	mov	r2, r0
 8002fce:	460b      	mov	r3, r1
 8002fd0:	4640      	mov	r0, r8
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	f7fd fc3a 	bl	800084c <__aeabi_ddiv>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4620      	mov	r0, r4
 8002fde:	4629      	mov	r1, r5
 8002fe0:	f7fd f954 	bl	800028c <__adddf3>
 8002fe4:	4602      	mov	r2, r0
 8002fe6:	460b      	mov	r3, r1
 8002fe8:	4610      	mov	r0, r2
 8002fea:	4619      	mov	r1, r3
 8002fec:	f7fd fdfc 	bl	8000be8 <__aeabi_d2f>
 8002ff0:	4603      	mov	r3, r0
 8002ff2:	4a31      	ldr	r2, [pc, #196]	; (80030b8 <PullAndDrop+0x958>)
 8002ff4:	6013      	str	r3, [r2, #0]
					if (SpeedCmd <= 0)
 8002ff6:	4b30      	ldr	r3, [pc, #192]	; (80030b8 <PullAndDrop+0x958>)
 8002ff8:	edd3 7a00 	vldr	s15, [r3]
 8002ffc:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003000:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003004:	d803      	bhi.n	800300e <PullAndDrop+0x8ae>
						SpeedCmd = 0;
 8003006:	4b2c      	ldr	r3, [pc, #176]	; (80030b8 <PullAndDrop+0x958>)
 8003008:	f04f 0200 	mov.w	r2, #0
 800300c:	601a      	str	r2, [r3, #0]
					if (SpeedCmd >= 810)
 800300e:	4b2a      	ldr	r3, [pc, #168]	; (80030b8 <PullAndDrop+0x958>)
 8003010:	edd3 7a00 	vldr	s15, [r3]
 8003014:	ed9f 7a2c 	vldr	s14, [pc, #176]	; 80030c8 <PullAndDrop+0x968>
 8003018:	eef4 7ac7 	vcmpe.f32	s15, s14
 800301c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003020:	db02      	blt.n	8003028 <PullAndDrop+0x8c8>
						SpeedCmd = 810;
 8003022:	4b25      	ldr	r3, [pc, #148]	; (80030b8 <PullAndDrop+0x958>)
 8003024:	4a29      	ldr	r2, [pc, #164]	; (80030cc <PullAndDrop+0x96c>)
 8003026:	601a      	str	r2, [r3, #0]

					if (SpeedCmd != 0)
 8003028:	4b23      	ldr	r3, [pc, #140]	; (80030b8 <PullAndDrop+0x958>)
 800302a:	edd3 7a00 	vldr	s15, [r3]
 800302e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003032:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003036:	d00d      	beq.n	8003054 <PullAndDrop+0x8f4>
					{
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003038:	4b25      	ldr	r3, [pc, #148]	; (80030d0 <PullAndDrop+0x970>)
 800303a:	781b      	ldrb	r3, [r3, #0]
 800303c:	4a1e      	ldr	r2, [pc, #120]	; (80030b8 <PullAndDrop+0x958>)
 800303e:	edd2 7a00 	vldr	s15, [r2]
 8003042:	eeb0 0a67 	vmov.f32	s0, s15
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fdba 	bl	8001bc0 <CalculateTimer3Period>
 800304c:	4603      	mov	r3, r0
 800304e:	b29a      	uxth	r2, r3
 8003050:	4b20      	ldr	r3, [pc, #128]	; (80030d4 <PullAndDrop+0x974>)
 8003052:	801a      	strh	r2, [r3, #0]
						//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
					}

					if (SpeedCmd <= 0) // Stop braking
 8003054:	4b18      	ldr	r3, [pc, #96]	; (80030b8 <PullAndDrop+0x958>)
 8003056:	edd3 7a00 	vldr	s15, [r3]
 800305a:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800305e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003062:	d815      	bhi.n	8003090 <PullAndDrop+0x930>
					{
						//RunningTime = 0;
						SpeedCmd = 0; // reset/ stop
 8003064:	4b14      	ldr	r3, [pc, #80]	; (80030b8 <PullAndDrop+0x958>)
 8003066:	f04f 0200 	mov.w	r2, #0
 800306a:	601a      	str	r2, [r3, #0]
						
						ResetPIDController();
 800306c:	f7fe faf8 	bl	8001660 <ResetPIDController>
						AccRef = - 9.6;
 8003070:	4b10      	ldr	r3, [pc, #64]	; (80030b4 <PullAndDrop+0x954>)
 8003072:	4a19      	ldr	r2, [pc, #100]	; (80030d8 <PullAndDrop+0x978>)
 8003074:	601a      	str	r2, [r3, #0]
						
						StartDropping = false; //	
 8003076:	4b19      	ldr	r3, [pc, #100]	; (80030dc <PullAndDrop+0x97c>)
 8003078:	2200      	movs	r2, #0
 800307a:	701a      	strb	r2, [r3, #0]
						StartBraking = false;
 800307c:	4b18      	ldr	r3, [pc, #96]	; (80030e0 <PullAndDrop+0x980>)
 800307e:	2200      	movs	r2, #0
 8003080:	701a      	strb	r2, [r3, #0]
						StopPulseGenerating();
 8003082:	f7fe fd3b 	bl	8001afc <StopPulseGenerating>
						CompleteRunning = true;
 8003086:	4b17      	ldr	r3, [pc, #92]	; (80030e4 <PullAndDrop+0x984>)
 8003088:	2201      	movs	r2, #1
 800308a:	701a      	strb	r2, [r3, #0]
						return true;
 800308c:	2301      	movs	r3, #1
 800308e:	e000      	b.n	8003092 <PullAndDrop+0x932>
					}
				}
				// END BRAKING STAGE				
		}
		// END DROPPING TASK.
		return false;
 8003090:	2300      	movs	r3, #0
	}	
}
 8003092:	4618      	mov	r0, r3
 8003094:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8003098:	9999999a 	.word	0x9999999a
 800309c:	c0239999 	.word	0xc0239999
 80030a0:	d2f1a9fc 	.word	0xd2f1a9fc
 80030a4:	3f50624d 	.word	0x3f50624d
 80030a8:	33333333 	.word	0x33333333
 80030ac:	40233333 	.word	0x40233333
 80030b0:	20000468 	.word	0x20000468
 80030b4:	2000000c 	.word	0x2000000c
 80030b8:	200004f4 	.word	0x200004f4
 80030bc:	2000045c 	.word	0x2000045c
 80030c0:	40240000 	.word	0x40240000
 80030c4:	20000458 	.word	0x20000458
 80030c8:	444a8000 	.word	0x444a8000
 80030cc:	444a8000 	.word	0x444a8000
 80030d0:	20000003 	.word	0x20000003
 80030d4:	20000450 	.word	0x20000450
 80030d8:	c119999a 	.word	0xc119999a
 80030dc:	20000433 	.word	0x20000433
 80030e0:	2000043a 	.word	0x2000043a
 80030e4:	20000440 	.word	0x20000440

080030e8 <Dropping>:
bool Dropping() // Dropping Program
// Mode = false -> Manual Running
// Mode = true -> Automatic Running
// return true if finishing, else return false while running
// StoppingDelayTime (ms): the time duration of stopping before pulling
{
 80030e8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80030ec:	af00      	add	r7, sp, #0
	if (CompleteRunning)
 80030ee:	4bb2      	ldr	r3, [pc, #712]	; (80033b8 <Dropping+0x2d0>)
 80030f0:	781b      	ldrb	r3, [r3, #0]
 80030f2:	2b00      	cmp	r3, #0
 80030f4:	d001      	beq.n	80030fa <Dropping+0x12>
	{
		return true;
 80030f6:	2301      	movs	r3, #1
 80030f8:	e1f9      	b.n	80034ee <Dropping+0x406>
	}
	else
	{
		if (StartDropping && !StartPulling) // Dropping Stage
 80030fa:	4bb0      	ldr	r3, [pc, #704]	; (80033bc <Dropping+0x2d4>)
 80030fc:	781b      	ldrb	r3, [r3, #0]
 80030fe:	2b00      	cmp	r3, #0
 8003100:	f000 81a2 	beq.w	8003448 <Dropping+0x360>
 8003104:	4bae      	ldr	r3, [pc, #696]	; (80033c0 <Dropping+0x2d8>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	f083 0301 	eor.w	r3, r3, #1
 800310c:	b2db      	uxtb	r3, r3
 800310e:	2b00      	cmp	r3, #0
 8003110:	f000 819a 	beq.w	8003448 <Dropping+0x360>
		{
			if (!StartBraking) // Accelerating Stage
 8003114:	4bab      	ldr	r3, [pc, #684]	; (80033c4 <Dropping+0x2dc>)
 8003116:	781b      	ldrb	r3, [r3, #0]
 8003118:	f083 0301 	eor.w	r3, r3, #1
 800311c:	b2db      	uxtb	r3, r3
 800311e:	2b00      	cmp	r3, #0
 8003120:	f000 80aa 	beq.w	8003278 <Dropping+0x190>
			{
				// Calculate speed cmd
				//RunningTime += SampleTime;
				
				// Ramping the reference signal
				LinearGeneration(&AccRef,8,-9.6+DroppingAccel);
 8003124:	4ba8      	ldr	r3, [pc, #672]	; (80033c8 <Dropping+0x2e0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd fa0d 	bl	8000548 <__aeabi_f2d>
 800312e:	a39c      	add	r3, pc, #624	; (adr r3, 80033a0 <Dropping+0x2b8>)
 8003130:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003134:	f7fd f8a8 	bl	8000288 <__aeabi_dsub>
 8003138:	4602      	mov	r2, r0
 800313a:	460b      	mov	r3, r1
 800313c:	4610      	mov	r0, r2
 800313e:	4619      	mov	r1, r3
 8003140:	f7fd fd52 	bl	8000be8 <__aeabi_d2f>
 8003144:	4603      	mov	r3, r0
 8003146:	ee00 3a90 	vmov	s1, r3
 800314a:	eeb2 0a00 	vmov.f32	s0, #32	; 0x41000000  8.0
 800314e:	489f      	ldr	r0, [pc, #636]	; (80033cc <Dropping+0x2e4>)
 8003150:	f7fe fc76 	bl	8001a40 <LinearGeneration>
				if (IsOpenLoopControl) // Use open-loop control
 8003154:	4b9e      	ldr	r3, [pc, #632]	; (80033d0 <Dropping+0x2e8>)
 8003156:	781b      	ldrb	r3, [r3, #0]
 8003158:	2b00      	cmp	r3, #0
 800315a:	d014      	beq.n	8003186 <Dropping+0x9e>
				{
					//SpeedCmd = LinearSpeedGeneration(RunningTime,DroppingEpsilonAcc,0,0,DroppingMaxSpeed); // Feedforward term
					LinearGeneration(&SpeedCmd,DroppingEpsilonAcc*10,DroppingMaxSpeed); // Feedforward term
 800315c:	4b9d      	ldr	r3, [pc, #628]	; (80033d4 <Dropping+0x2ec>)
 800315e:	edd3 7a00 	vldr	s15, [r3]
 8003162:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8003166:	ee67 7a87 	vmul.f32	s15, s15, s14
 800316a:	4b9b      	ldr	r3, [pc, #620]	; (80033d8 <Dropping+0x2f0>)
 800316c:	881b      	ldrh	r3, [r3, #0]
 800316e:	ee07 3a10 	vmov	s14, r3
 8003172:	eeb8 7a47 	vcvt.f32.u32	s14, s14
 8003176:	eef0 0a47 	vmov.f32	s1, s14
 800317a:	eeb0 0a67 	vmov.f32	s0, s15
 800317e:	4897      	ldr	r0, [pc, #604]	; (80033dc <Dropping+0x2f4>)
 8003180:	f7fe fc5e 	bl	8001a40 <LinearGeneration>
 8003184:	e047      	b.n	8003216 <Dropping+0x12e>
				
					//SpeedCmd = PIDSpeedCmd; // PID controller only
					//SpeedCmd = FeedFWSpeedCmd;
					//SpeedCmd = FeedFWSpeedCmd + PIDSpeedCmd; // Feedforward controller
					
					AccSet = PIDCalculate(AccRef,AccZ,-5,5, true); // PID term
 8003186:	4b91      	ldr	r3, [pc, #580]	; (80033cc <Dropping+0x2e4>)
 8003188:	edd3 7a00 	vldr	s15, [r3]
 800318c:	4b94      	ldr	r3, [pc, #592]	; (80033e0 <Dropping+0x2f8>)
 800318e:	ed93 7a00 	vldr	s14, [r3]
 8003192:	2201      	movs	r2, #1
 8003194:	2105      	movs	r1, #5
 8003196:	f06f 0004 	mvn.w	r0, #4
 800319a:	eef0 0a47 	vmov.f32	s1, s14
 800319e:	eeb0 0a67 	vmov.f32	s0, s15
 80031a2:	f7fe f9a5 	bl	80014f0 <PIDCalculate>
 80031a6:	eef0 7a40 	vmov.f32	s15, s0
 80031aa:	4b8e      	ldr	r3, [pc, #568]	; (80033e4 <Dropping+0x2fc>)
 80031ac:	edc3 7a00 	vstr	s15, [r3]
					AccSet = AccSet + AccRef + 9.6;
 80031b0:	4b8c      	ldr	r3, [pc, #560]	; (80033e4 <Dropping+0x2fc>)
 80031b2:	ed93 7a00 	vldr	s14, [r3]
 80031b6:	4b85      	ldr	r3, [pc, #532]	; (80033cc <Dropping+0x2e4>)
 80031b8:	edd3 7a00 	vldr	s15, [r3]
 80031bc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80031c0:	ee17 0a90 	vmov	r0, s15
 80031c4:	f7fd f9c0 	bl	8000548 <__aeabi_f2d>
 80031c8:	a375      	add	r3, pc, #468	; (adr r3, 80033a0 <Dropping+0x2b8>)
 80031ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80031ce:	f7fd f85d 	bl	800028c <__adddf3>
 80031d2:	4602      	mov	r2, r0
 80031d4:	460b      	mov	r3, r1
 80031d6:	4610      	mov	r0, r2
 80031d8:	4619      	mov	r1, r3
 80031da:	f7fd fd05 	bl	8000be8 <__aeabi_d2f>
 80031de:	4603      	mov	r3, r0
 80031e0:	4a80      	ldr	r2, [pc, #512]	; (80033e4 <Dropping+0x2fc>)
 80031e2:	6013      	str	r3, [r2, #0]
					//SpeedCmd = LinearSpeedGeneration(RunningTime,AccSet/DrumRadius,0,0,DroppingMaxSpeed); // Feedforward term
					LinearGeneration(&SpeedCmd,AccSet*10/DrumRadius,DroppingMaxSpeed); // Feedforward term
 80031e4:	4b7f      	ldr	r3, [pc, #508]	; (80033e4 <Dropping+0x2fc>)
 80031e6:	edd3 7a00 	vldr	s15, [r3]
 80031ea:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80031ee:	ee27 7a87 	vmul.f32	s14, s15, s14
 80031f2:	4b7d      	ldr	r3, [pc, #500]	; (80033e8 <Dropping+0x300>)
 80031f4:	edd3 7a00 	vldr	s15, [r3]
 80031f8:	eec7 6a27 	vdiv.f32	s13, s14, s15
 80031fc:	4b76      	ldr	r3, [pc, #472]	; (80033d8 <Dropping+0x2f0>)
 80031fe:	881b      	ldrh	r3, [r3, #0]
 8003200:	ee07 3a90 	vmov	s15, r3
 8003204:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003208:	eef0 0a67 	vmov.f32	s1, s15
 800320c:	eeb0 0a66 	vmov.f32	s0, s13
 8003210:	4872      	ldr	r0, [pc, #456]	; (80033dc <Dropping+0x2f4>)
 8003212:	f7fe fc15 	bl	8001a40 <LinearGeneration>
				}			
				
				if (SpeedCmd != 0)
 8003216:	4b71      	ldr	r3, [pc, #452]	; (80033dc <Dropping+0x2f4>)
 8003218:	edd3 7a00 	vldr	s15, [r3]
 800321c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003220:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003224:	d00e      	beq.n	8003244 <Dropping+0x15c>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 8003226:	4b71      	ldr	r3, [pc, #452]	; (80033ec <Dropping+0x304>)
 8003228:	781b      	ldrb	r3, [r3, #0]
 800322a:	4a6c      	ldr	r2, [pc, #432]	; (80033dc <Dropping+0x2f4>)
 800322c:	edd2 7a00 	vldr	s15, [r2]
 8003230:	eeb0 0a67 	vmov.f32	s0, s15
 8003234:	4618      	mov	r0, r3
 8003236:	f7fe fcc3 	bl	8001bc0 <CalculateTimer3Period>
 800323a:	4603      	mov	r3, r0
 800323c:	b29a      	uxth	r2, r3
 800323e:	4b6c      	ldr	r3, [pc, #432]	; (80033f0 <Dropping+0x308>)
 8003240:	801a      	strh	r2, [r3, #0]
 8003242:	e001      	b.n	8003248 <Dropping+0x160>
					//Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else 
				{
					StopPulseGenerating();
 8003244:	f7fe fc5a 	bl	8001afc <StopPulseGenerating>
				}
				//if (SpeedCmd >= DroppingMaxSpeed || fabs(ObjectPosition) >= DroppingAccelDistance )
				if (ObjectPosition >= DroppingAccelDistance)
 8003248:	4b6a      	ldr	r3, [pc, #424]	; (80033f4 <Dropping+0x30c>)
 800324a:	ed93 7a00 	vldr	s14, [r3]
 800324e:	4b6a      	ldr	r3, [pc, #424]	; (80033f8 <Dropping+0x310>)
 8003250:	edd3 7a00 	vldr	s15, [r3]
 8003254:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8003258:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800325c:	f2c0 80f4 	blt.w	8003448 <Dropping+0x360>
				{
					//RunningTime = 0;
					StartBraking = true;
 8003260:	4b58      	ldr	r3, [pc, #352]	; (80033c4 <Dropping+0x2dc>)
 8003262:	2201      	movs	r2, #1
 8003264:	701a      	strb	r2, [r3, #0]
					//ResetPIDController();
					IntergraError = 0;
 8003266:	4b65      	ldr	r3, [pc, #404]	; (80033fc <Dropping+0x314>)
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
					PreError = 0;
 800326e:	4b64      	ldr	r3, [pc, #400]	; (8003400 <Dropping+0x318>)
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
 8003276:	e0e7      	b.n	8003448 <Dropping+0x360>
			}
			else // Braking Stage
			{
				//RunningTime += SampleTime;

				AccRef = -9.8-DroppingDecel;
 8003278:	4b62      	ldr	r3, [pc, #392]	; (8003404 <Dropping+0x31c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f963 	bl	8000548 <__aeabi_f2d>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	a148      	add	r1, pc, #288	; (adr r1, 80033a8 <Dropping+0x2c0>)
 8003288:	e9d1 0100 	ldrd	r0, r1, [r1]
 800328c:	f7fc fffc 	bl	8000288 <__aeabi_dsub>
 8003290:	4602      	mov	r2, r0
 8003292:	460b      	mov	r3, r1
 8003294:	4610      	mov	r0, r2
 8003296:	4619      	mov	r1, r3
 8003298:	f7fd fca6 	bl	8000be8 <__aeabi_d2f>
 800329c:	4603      	mov	r3, r0
 800329e:	4a4b      	ldr	r2, [pc, #300]	; (80033cc <Dropping+0x2e4>)
 80032a0:	6013      	str	r3, [r2, #0]
//				FeedFWSpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,DroppingMaxSpeed,0,DroppingMaxSpeed);
//				PIDSpeedCmd = PIDCalculate(AccRef,AccZ,-850,850, true); // PID term
				
				//SpeedCmd = LinearSpeedGeneration(RunningTime,-DroppingEpsilonDec,TransitionSpeed,0,TransitionSpeed);
				//SpeedCmd = LinearGeneration(RunningTime,-DroppingEpsilonDec*10,TransitionSpeed,0,TransitionSpeed);
				SpeedCmd += SampleTime*0.001*(AccRef+9.6)*10/DrumRadius;
 80032a2:	4b4e      	ldr	r3, [pc, #312]	; (80033dc <Dropping+0x2f4>)
 80032a4:	681b      	ldr	r3, [r3, #0]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fd f94e 	bl	8000548 <__aeabi_f2d>
 80032ac:	4604      	mov	r4, r0
 80032ae:	460d      	mov	r5, r1
 80032b0:	4b55      	ldr	r3, [pc, #340]	; (8003408 <Dropping+0x320>)
 80032b2:	781b      	ldrb	r3, [r3, #0]
 80032b4:	4618      	mov	r0, r3
 80032b6:	f7fd f935 	bl	8000524 <__aeabi_i2d>
 80032ba:	a33d      	add	r3, pc, #244	; (adr r3, 80033b0 <Dropping+0x2c8>)
 80032bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032c0:	f7fd f99a 	bl	80005f8 <__aeabi_dmul>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4690      	mov	r8, r2
 80032ca:	4699      	mov	r9, r3
 80032cc:	4b3f      	ldr	r3, [pc, #252]	; (80033cc <Dropping+0x2e4>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4618      	mov	r0, r3
 80032d2:	f7fd f939 	bl	8000548 <__aeabi_f2d>
 80032d6:	a332      	add	r3, pc, #200	; (adr r3, 80033a0 <Dropping+0x2b8>)
 80032d8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80032dc:	f7fc ffd6 	bl	800028c <__adddf3>
 80032e0:	4602      	mov	r2, r0
 80032e2:	460b      	mov	r3, r1
 80032e4:	4640      	mov	r0, r8
 80032e6:	4649      	mov	r1, r9
 80032e8:	f7fd f986 	bl	80005f8 <__aeabi_dmul>
 80032ec:	4602      	mov	r2, r0
 80032ee:	460b      	mov	r3, r1
 80032f0:	4610      	mov	r0, r2
 80032f2:	4619      	mov	r1, r3
 80032f4:	f04f 0200 	mov.w	r2, #0
 80032f8:	4b44      	ldr	r3, [pc, #272]	; (800340c <Dropping+0x324>)
 80032fa:	f7fd f97d 	bl	80005f8 <__aeabi_dmul>
 80032fe:	4602      	mov	r2, r0
 8003300:	460b      	mov	r3, r1
 8003302:	4690      	mov	r8, r2
 8003304:	4699      	mov	r9, r3
 8003306:	4b38      	ldr	r3, [pc, #224]	; (80033e8 <Dropping+0x300>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	4618      	mov	r0, r3
 800330c:	f7fd f91c 	bl	8000548 <__aeabi_f2d>
 8003310:	4602      	mov	r2, r0
 8003312:	460b      	mov	r3, r1
 8003314:	4640      	mov	r0, r8
 8003316:	4649      	mov	r1, r9
 8003318:	f7fd fa98 	bl	800084c <__aeabi_ddiv>
 800331c:	4602      	mov	r2, r0
 800331e:	460b      	mov	r3, r1
 8003320:	4620      	mov	r0, r4
 8003322:	4629      	mov	r1, r5
 8003324:	f7fc ffb2 	bl	800028c <__adddf3>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4610      	mov	r0, r2
 800332e:	4619      	mov	r1, r3
 8003330:	f7fd fc5a 	bl	8000be8 <__aeabi_d2f>
 8003334:	4603      	mov	r3, r0
 8003336:	4a29      	ldr	r2, [pc, #164]	; (80033dc <Dropping+0x2f4>)
 8003338:	6013      	str	r3, [r2, #0]
				if (SpeedCmd <= 0)
 800333a:	4b28      	ldr	r3, [pc, #160]	; (80033dc <Dropping+0x2f4>)
 800333c:	edd3 7a00 	vldr	s15, [r3]
 8003340:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003344:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003348:	d803      	bhi.n	8003352 <Dropping+0x26a>
					SpeedCmd = 0;
 800334a:	4b24      	ldr	r3, [pc, #144]	; (80033dc <Dropping+0x2f4>)
 800334c:	f04f 0200 	mov.w	r2, #0
 8003350:	601a      	str	r2, [r3, #0]
				if (SpeedCmd >= 810)
 8003352:	4b22      	ldr	r3, [pc, #136]	; (80033dc <Dropping+0x2f4>)
 8003354:	edd3 7a00 	vldr	s15, [r3]
 8003358:	ed9f 7a2d 	vldr	s14, [pc, #180]	; 8003410 <Dropping+0x328>
 800335c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8003360:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003364:	db02      	blt.n	800336c <Dropping+0x284>
					SpeedCmd = 810;
 8003366:	4b1d      	ldr	r3, [pc, #116]	; (80033dc <Dropping+0x2f4>)
 8003368:	4a2a      	ldr	r2, [pc, #168]	; (8003414 <Dropping+0x32c>)
 800336a:	601a      	str	r2, [r3, #0]

				if (SpeedCmd != 0)
 800336c:	4b1b      	ldr	r3, [pc, #108]	; (80033dc <Dropping+0x2f4>)
 800336e:	edd3 7a00 	vldr	s15, [r3]
 8003372:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003376:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800337a:	d04d      	beq.n	8003418 <Dropping+0x330>
				{
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period (MotorDriver,SpeedCmd);
 800337c:	4b1b      	ldr	r3, [pc, #108]	; (80033ec <Dropping+0x304>)
 800337e:	781b      	ldrb	r3, [r3, #0]
 8003380:	4a16      	ldr	r2, [pc, #88]	; (80033dc <Dropping+0x2f4>)
 8003382:	edd2 7a00 	vldr	s15, [r2]
 8003386:	eeb0 0a67 	vmov.f32	s0, s15
 800338a:	4618      	mov	r0, r3
 800338c:	f7fe fc18 	bl	8001bc0 <CalculateTimer3Period>
 8003390:	4603      	mov	r3, r0
 8003392:	b29a      	uxth	r2, r3
 8003394:	4b16      	ldr	r3, [pc, #88]	; (80033f0 <Dropping+0x308>)
 8003396:	801a      	strh	r2, [r3, #0]
 8003398:	e040      	b.n	800341c <Dropping+0x334>
 800339a:	bf00      	nop
 800339c:	f3af 8000 	nop.w
 80033a0:	33333333 	.word	0x33333333
 80033a4:	40233333 	.word	0x40233333
 80033a8:	9999999a 	.word	0x9999999a
 80033ac:	c0239999 	.word	0xc0239999
 80033b0:	d2f1a9fc 	.word	0xd2f1a9fc
 80033b4:	3f50624d 	.word	0x3f50624d
 80033b8:	20000440 	.word	0x20000440
 80033bc:	20000433 	.word	0x20000433
 80033c0:	20000439 	.word	0x20000439
 80033c4:	2000043a 	.word	0x2000043a
 80033c8:	20000464 	.word	0x20000464
 80033cc:	2000000c 	.word	0x2000000c
 80033d0:	20000444 	.word	0x20000444
 80033d4:	2000046c 	.word	0x2000046c
 80033d8:	20000474 	.word	0x20000474
 80033dc:	200004f4 	.word	0x200004f4
 80033e0:	20000528 	.word	0x20000528
 80033e4:	20000538 	.word	0x20000538
 80033e8:	20000458 	.word	0x20000458
 80033ec:	20000003 	.word	0x20000003
 80033f0:	20000450 	.word	0x20000450
 80033f4:	20000534 	.word	0x20000534
 80033f8:	20000478 	.word	0x20000478
 80033fc:	20000524 	.word	0x20000524
 8003400:	20000530 	.word	0x20000530
 8003404:	20000468 	.word	0x20000468
 8003408:	2000045c 	.word	0x2000045c
 800340c:	40240000 	.word	0x40240000
 8003410:	444a8000 	.word	0x444a8000
 8003414:	444a8000 	.word	0x444a8000
					// Timer3CountPeriod = (int)((float)(120000000.0/(fabs(SpeedCmd)*(float)EncoderResolution)) + 0.5);
				}
				else 
				{
					StopPulseGenerating();
 8003418:	f7fe fb70 	bl	8001afc <StopPulseGenerating>
				}			
				if (SpeedCmd <= 0) // Stop braking
 800341c:	4b35      	ldr	r3, [pc, #212]	; (80034f4 <Dropping+0x40c>)
 800341e:	edd3 7a00 	vldr	s15, [r3]
 8003422:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8003426:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800342a:	d80d      	bhi.n	8003448 <Dropping+0x360>
				{
					StopPulseGenerating();
 800342c:	f7fe fb66 	bl	8001afc <StopPulseGenerating>
					//RunningTime = 0;
					SpeedCmd = 0; // reset/ stop
 8003430:	4b30      	ldr	r3, [pc, #192]	; (80034f4 <Dropping+0x40c>)
 8003432:	f04f 0200 	mov.w	r2, #0
 8003436:	601a      	str	r2, [r3, #0]
					ResetPIDController();
 8003438:	f7fe f912 	bl	8001660 <ResetPIDController>
					//AccRef = - 9.8;

					StartDropping = false; //	
 800343c:	4b2e      	ldr	r3, [pc, #184]	; (80034f8 <Dropping+0x410>)
 800343e:	2200      	movs	r2, #0
 8003440:	701a      	strb	r2, [r3, #0]
					StartBraking = false;
 8003442:	4b2e      	ldr	r3, [pc, #184]	; (80034fc <Dropping+0x414>)
 8003444:	2200      	movs	r2, #0
 8003446:	701a      	strb	r2, [r3, #0]
					
				}
			}
		}
		if (!StartDropping && !StartPulling) // Waiting for some seconds before pulling up
 8003448:	4b2b      	ldr	r3, [pc, #172]	; (80034f8 <Dropping+0x410>)
 800344a:	781b      	ldrb	r3, [r3, #0]
 800344c:	f083 0301 	eor.w	r3, r3, #1
 8003450:	b2db      	uxtb	r3, r3
 8003452:	2b00      	cmp	r3, #0
 8003454:	d019      	beq.n	800348a <Dropping+0x3a2>
 8003456:	4b2a      	ldr	r3, [pc, #168]	; (8003500 <Dropping+0x418>)
 8003458:	781b      	ldrb	r3, [r3, #0]
 800345a:	f083 0301 	eor.w	r3, r3, #1
 800345e:	b2db      	uxtb	r3, r3
 8003460:	2b00      	cmp	r3, #0
 8003462:	d012      	beq.n	800348a <Dropping+0x3a2>
		{
	//		POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);					
	//		if (POSReach) // Check if position is reached or not
	//		{
				
				if (WaitingMiliSecond(StoppingTime)) // Wait some second
 8003464:	4b27      	ldr	r3, [pc, #156]	; (8003504 <Dropping+0x41c>)
 8003466:	881b      	ldrh	r3, [r3, #0]
 8003468:	4618      	mov	r0, r3
 800346a:	f7fe fb83 	bl	8001b74 <WaitingMiliSecond>
 800346e:	4603      	mov	r3, r0
 8003470:	2b00      	cmp	r3, #0
 8003472:	d00a      	beq.n	800348a <Dropping+0x3a2>
				{			
					// Change to pulling stage
					StartPulling = true;
 8003474:	4b22      	ldr	r3, [pc, #136]	; (8003500 <Dropping+0x418>)
 8003476:	2201      	movs	r2, #1
 8003478:	701a      	strb	r2, [r3, #0]
					//Timer3CountPeriod = CalculateTimer3Period(MotorDriver, PullingSpeed);
					// Timer3CountPeriod = (int)((float)(120000000.0/((float)PullingSpeed*(float)EncoderResolution)) + 0.5);
					// Start pulling to the home position
	//				StepPulseCmd = (int)MotorEncPulse/8; // calculate # of pulse cmd to return to the top postion
	//				IsStepPulseCmd = true;
					PRIsToggled = true;	// true = Pulling	
 800347a:	4b23      	ldr	r3, [pc, #140]	; (8003508 <Dropping+0x420>)
 800347c:	2201      	movs	r2, #1
 800347e:	701a      	strb	r2, [r3, #0]
					
					//Start Running
					Direction = false; // pulling up direction
 8003480:	4b22      	ldr	r3, [pc, #136]	; (800350c <Dropping+0x424>)
 8003482:	2200      	movs	r2, #0
 8003484:	701a      	strb	r2, [r3, #0]
					StartPulseGenerating();
 8003486:	f7fe fb57 	bl	8001b38 <StartPulseGenerating>
	//				DisableSTOP();
				}											
	//		}
		}						

		if (!StartDropping && StartPulling) // Pulling Stage
 800348a:	4b1b      	ldr	r3, [pc, #108]	; (80034f8 <Dropping+0x410>)
 800348c:	781b      	ldrb	r3, [r3, #0]
 800348e:	f083 0301 	eor.w	r3, r3, #1
 8003492:	b2db      	uxtb	r3, r3
 8003494:	2b00      	cmp	r3, #0
 8003496:	d029      	beq.n	80034ec <Dropping+0x404>
 8003498:	4b19      	ldr	r3, [pc, #100]	; (8003500 <Dropping+0x418>)
 800349a:	781b      	ldrb	r3, [r3, #0]
 800349c:	2b00      	cmp	r3, #0
 800349e:	d025      	beq.n	80034ec <Dropping+0x404>
		{	
			if (MotorDriver) // FDA7000, big model
 80034a0:	4b1b      	ldr	r3, [pc, #108]	; (8003510 <Dropping+0x428>)
 80034a2:	781b      	ldrb	r3, [r3, #0]
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d010      	beq.n	80034ca <Dropping+0x3e2>
			{
				if (CheckGoingToRefPosition(false, 0))
 80034a8:	2100      	movs	r1, #0
 80034aa:	2000      	movs	r0, #0
 80034ac:	f7fe fc14 	bl	8001cd8 <CheckGoingToRefPosition>
 80034b0:	4603      	mov	r3, r0
 80034b2:	2b00      	cmp	r3, #0
 80034b4:	d01a      	beq.n	80034ec <Dropping+0x404>
				{
		//			POSReach = HAL_GPIO_ReadPin(CN1_47_INSPD_INPOS_GPIO_Port,CN1_47_INSPD_INPOS_Pin);
		//			if (POSReach) // Reaching to the top/home postion
		//			{
						StartPulling = false;
 80034b6:	4b12      	ldr	r3, [pc, #72]	; (8003500 <Dropping+0x418>)
 80034b8:	2200      	movs	r2, #0
 80034ba:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 80034bc:	4b15      	ldr	r3, [pc, #84]	; (8003514 <Dropping+0x42c>)
 80034be:	2201      	movs	r2, #1
 80034c0:	701a      	strb	r2, [r3, #0]
					
						StopPulseGenerating();
 80034c2:	f7fe fb1b 	bl	8001afc <StopPulseGenerating>
						return true;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e011      	b.n	80034ee <Dropping+0x406>
		//			}			
				}				
			}
			else // ASDA A3
			{
				if (CheckGoingToRefPosition(false, 0))
 80034ca:	2100      	movs	r1, #0
 80034cc:	2000      	movs	r0, #0
 80034ce:	f7fe fc03 	bl	8001cd8 <CheckGoingToRefPosition>
 80034d2:	4603      	mov	r3, r0
 80034d4:	2b00      	cmp	r3, #0
 80034d6:	d009      	beq.n	80034ec <Dropping+0x404>
				{
						StartPulling = false;
 80034d8:	4b09      	ldr	r3, [pc, #36]	; (8003500 <Dropping+0x418>)
 80034da:	2200      	movs	r2, #0
 80034dc:	701a      	strb	r2, [r3, #0]
						CompleteRunning = true; // to return true next time
 80034de:	4b0d      	ldr	r3, [pc, #52]	; (8003514 <Dropping+0x42c>)
 80034e0:	2201      	movs	r2, #1
 80034e2:	701a      	strb	r2, [r3, #0]
					
						StopPulseGenerating();
 80034e4:	f7fe fb0a 	bl	8001afc <StopPulseGenerating>
						return true;
 80034e8:	2301      	movs	r3, #1
 80034ea:	e000      	b.n	80034ee <Dropping+0x406>
				}
			}
		}
		return false;
 80034ec:	2300      	movs	r3, #0
	}	
}
 80034ee:	4618      	mov	r0, r3
 80034f0:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80034f4:	200004f4 	.word	0x200004f4
 80034f8:	20000433 	.word	0x20000433
 80034fc:	2000043a 	.word	0x2000043a
 8003500:	20000439 	.word	0x20000439
 8003504:	2000045e 	.word	0x2000045e
 8003508:	20000446 	.word	0x20000446
 800350c:	20000435 	.word	0x20000435
 8003510:	20000003 	.word	0x20000003
 8003514:	20000440 	.word	0x20000440

08003518 <StopExperiment>:

void StopExperiment ()
{
 8003518:	b580      	push	{r7, lr}
 800351a:	af00      	add	r7, sp, #0
	// Reset all the flag and state
	StartRunning = false;
 800351c:	4b0a      	ldr	r3, [pc, #40]	; (8003548 <StopExperiment+0x30>)
 800351e:	2200      	movs	r2, #0
 8003520:	701a      	strb	r2, [r3, #0]
	StartDropping = false;
 8003522:	4b0a      	ldr	r3, [pc, #40]	; (800354c <StopExperiment+0x34>)
 8003524:	2200      	movs	r2, #0
 8003526:	701a      	strb	r2, [r3, #0]
	StartPulling = false;
 8003528:	4b09      	ldr	r3, [pc, #36]	; (8003550 <StopExperiment+0x38>)
 800352a:	2200      	movs	r2, #0
 800352c:	701a      	strb	r2, [r3, #0]
	StopPulseGenerating(); // Stop pulse generation
 800352e:	f7fe fae5 	bl	8001afc <StopPulseGenerating>
	ResetPIDController();
 8003532:	f7fe f895 	bl	8001660 <ResetPIDController>
	//RunningTime = 0;
	Timer3CountPeriod = 0;
 8003536:	4b07      	ldr	r3, [pc, #28]	; (8003554 <StopExperiment+0x3c>)
 8003538:	2200      	movs	r2, #0
 800353a:	801a      	strh	r2, [r3, #0]
	SpeedCmd = 0;	
 800353c:	4b06      	ldr	r3, [pc, #24]	; (8003558 <StopExperiment+0x40>)
 800353e:	f04f 0200 	mov.w	r2, #0
 8003542:	601a      	str	r2, [r3, #0]
}
 8003544:	bf00      	nop
 8003546:	bd80      	pop	{r7, pc}
 8003548:	20000434 	.word	0x20000434
 800354c:	20000433 	.word	0x20000433
 8003550:	20000439 	.word	0x20000439
 8003554:	20000450 	.word	0x20000450
 8003558:	200004f4 	.word	0x200004f4
 800355c:	00000000 	.word	0x00000000

08003560 <CalculateRunningSpec>:
void CalculateRunningSpec () // Calculate running parameters
{
 8003560:	b5b0      	push	{r4, r5, r7, lr}
 8003562:	ed2d 8b02 	vpush	{d8}
 8003566:	af00      	add	r7, sp, #0
	GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 8003568:	4bd1      	ldr	r3, [pc, #836]	; (80038b0 <CalculateRunningSpec+0x350>)
 800356a:	781b      	ldrb	r3, [r3, #0]
 800356c:	4618      	mov	r0, r3
 800356e:	f7fc ffd9 	bl	8000524 <__aeabi_i2d>
 8003572:	a3c5      	add	r3, pc, #788	; (adr r3, 8003888 <CalculateRunningSpec+0x328>)
 8003574:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003578:	f7fd f83e 	bl	80005f8 <__aeabi_dmul>
 800357c:	4602      	mov	r2, r0
 800357e:	460b      	mov	r3, r1
 8003580:	4610      	mov	r0, r2
 8003582:	4619      	mov	r1, r3
 8003584:	f04f 0200 	mov.w	r2, #0
 8003588:	4bca      	ldr	r3, [pc, #808]	; (80038b4 <CalculateRunningSpec+0x354>)
 800358a:	f7fd f95f 	bl	800084c <__aeabi_ddiv>
 800358e:	4602      	mov	r2, r0
 8003590:	460b      	mov	r3, r1
 8003592:	4610      	mov	r0, r2
 8003594:	4619      	mov	r1, r3
 8003596:	f7fd fb27 	bl	8000be8 <__aeabi_d2f>
 800359a:	4603      	mov	r3, r0
 800359c:	4ac6      	ldr	r2, [pc, #792]	; (80038b8 <CalculateRunningSpec+0x358>)
 800359e:	6013      	str	r3, [r2, #0]
	
	// Dropping Stage Calculations
	DroppingMaxSpeed = (uint16_t)(10*sqrt(2*DroppingAccel*DroppingAccelDistance)/(DrumRadius)); // in rpm; 10~60/2pi
 80035a0:	4bc6      	ldr	r3, [pc, #792]	; (80038bc <CalculateRunningSpec+0x35c>)
 80035a2:	edd3 7a00 	vldr	s15, [r3]
 80035a6:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80035aa:	4bc5      	ldr	r3, [pc, #788]	; (80038c0 <CalculateRunningSpec+0x360>)
 80035ac:	edd3 7a00 	vldr	s15, [r3]
 80035b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80035b4:	ee17 0a90 	vmov	r0, s15
 80035b8:	f7fc ffc6 	bl	8000548 <__aeabi_f2d>
 80035bc:	4602      	mov	r2, r0
 80035be:	460b      	mov	r3, r1
 80035c0:	ec43 2b10 	vmov	d0, r2, r3
 80035c4:	f00a fb1c 	bl	800dc00 <sqrt>
 80035c8:	ec51 0b10 	vmov	r0, r1, d0
 80035cc:	f04f 0200 	mov.w	r2, #0
 80035d0:	4bbc      	ldr	r3, [pc, #752]	; (80038c4 <CalculateRunningSpec+0x364>)
 80035d2:	f7fd f811 	bl	80005f8 <__aeabi_dmul>
 80035d6:	4602      	mov	r2, r0
 80035d8:	460b      	mov	r3, r1
 80035da:	4614      	mov	r4, r2
 80035dc:	461d      	mov	r5, r3
 80035de:	4bba      	ldr	r3, [pc, #744]	; (80038c8 <CalculateRunningSpec+0x368>)
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	4618      	mov	r0, r3
 80035e4:	f7fc ffb0 	bl	8000548 <__aeabi_f2d>
 80035e8:	4602      	mov	r2, r0
 80035ea:	460b      	mov	r3, r1
 80035ec:	4620      	mov	r0, r4
 80035ee:	4629      	mov	r1, r5
 80035f0:	f7fd f92c 	bl	800084c <__aeabi_ddiv>
 80035f4:	4602      	mov	r2, r0
 80035f6:	460b      	mov	r3, r1
 80035f8:	4610      	mov	r0, r2
 80035fa:	4619      	mov	r1, r3
 80035fc:	f7fd fad4 	bl	8000ba8 <__aeabi_d2uiz>
 8003600:	4603      	mov	r3, r0
 8003602:	b29a      	uxth	r2, r3
 8003604:	4bb1      	ldr	r3, [pc, #708]	; (80038cc <CalculateRunningSpec+0x36c>)
 8003606:	801a      	strh	r2, [r3, #0]
	DroppingEpsilonAcc = DroppingAccel/DrumRadius;
 8003608:	4bac      	ldr	r3, [pc, #688]	; (80038bc <CalculateRunningSpec+0x35c>)
 800360a:	edd3 6a00 	vldr	s13, [r3]
 800360e:	4bae      	ldr	r3, [pc, #696]	; (80038c8 <CalculateRunningSpec+0x368>)
 8003610:	ed93 7a00 	vldr	s14, [r3]
 8003614:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003618:	4bad      	ldr	r3, [pc, #692]	; (80038d0 <CalculateRunningSpec+0x370>)
 800361a:	edc3 7a00 	vstr	s15, [r3]
	DroppingEpsilonDec = DroppingDecel/DrumRadius;	
 800361e:	4bad      	ldr	r3, [pc, #692]	; (80038d4 <CalculateRunningSpec+0x374>)
 8003620:	edd3 6a00 	vldr	s13, [r3]
 8003624:	4ba8      	ldr	r3, [pc, #672]	; (80038c8 <CalculateRunningSpec+0x368>)
 8003626:	ed93 7a00 	vldr	s14, [r3]
 800362a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800362e:	4baa      	ldr	r3, [pc, #680]	; (80038d8 <CalculateRunningSpec+0x378>)
 8003630:	edc3 7a00 	vstr	s15, [r3]
	
	// Pulling Stage Calculations
	PullingMaxSpeed = (uint16_t)(10*sqrt(2*PullingAccel*PullingAccelDistance)/(DrumRadius)); // in rpm
 8003634:	4ba9      	ldr	r3, [pc, #676]	; (80038dc <CalculateRunningSpec+0x37c>)
 8003636:	edd3 7a00 	vldr	s15, [r3]
 800363a:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800363e:	4ba8      	ldr	r3, [pc, #672]	; (80038e0 <CalculateRunningSpec+0x380>)
 8003640:	edd3 7a00 	vldr	s15, [r3]
 8003644:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003648:	ee17 0a90 	vmov	r0, s15
 800364c:	f7fc ff7c 	bl	8000548 <__aeabi_f2d>
 8003650:	4602      	mov	r2, r0
 8003652:	460b      	mov	r3, r1
 8003654:	ec43 2b10 	vmov	d0, r2, r3
 8003658:	f00a fad2 	bl	800dc00 <sqrt>
 800365c:	ec51 0b10 	vmov	r0, r1, d0
 8003660:	f04f 0200 	mov.w	r2, #0
 8003664:	4b97      	ldr	r3, [pc, #604]	; (80038c4 <CalculateRunningSpec+0x364>)
 8003666:	f7fc ffc7 	bl	80005f8 <__aeabi_dmul>
 800366a:	4602      	mov	r2, r0
 800366c:	460b      	mov	r3, r1
 800366e:	4614      	mov	r4, r2
 8003670:	461d      	mov	r5, r3
 8003672:	4b95      	ldr	r3, [pc, #596]	; (80038c8 <CalculateRunningSpec+0x368>)
 8003674:	681b      	ldr	r3, [r3, #0]
 8003676:	4618      	mov	r0, r3
 8003678:	f7fc ff66 	bl	8000548 <__aeabi_f2d>
 800367c:	4602      	mov	r2, r0
 800367e:	460b      	mov	r3, r1
 8003680:	4620      	mov	r0, r4
 8003682:	4629      	mov	r1, r5
 8003684:	f7fd f8e2 	bl	800084c <__aeabi_ddiv>
 8003688:	4602      	mov	r2, r0
 800368a:	460b      	mov	r3, r1
 800368c:	4610      	mov	r0, r2
 800368e:	4619      	mov	r1, r3
 8003690:	f7fd fa8a 	bl	8000ba8 <__aeabi_d2uiz>
 8003694:	4603      	mov	r3, r0
 8003696:	b29a      	uxth	r2, r3
 8003698:	4b92      	ldr	r3, [pc, #584]	; (80038e4 <CalculateRunningSpec+0x384>)
 800369a:	801a      	strh	r2, [r3, #0]
	PullingEpsilonAcc = PullingAccel/DrumRadius;
 800369c:	4b8f      	ldr	r3, [pc, #572]	; (80038dc <CalculateRunningSpec+0x37c>)
 800369e:	edd3 6a00 	vldr	s13, [r3]
 80036a2:	4b89      	ldr	r3, [pc, #548]	; (80038c8 <CalculateRunningSpec+0x368>)
 80036a4:	ed93 7a00 	vldr	s14, [r3]
 80036a8:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036ac:	4b8e      	ldr	r3, [pc, #568]	; (80038e8 <CalculateRunningSpec+0x388>)
 80036ae:	edc3 7a00 	vstr	s15, [r3]
	PullingEpsilonDec = PullingDecel/DrumRadius;
 80036b2:	4b8e      	ldr	r3, [pc, #568]	; (80038ec <CalculateRunningSpec+0x38c>)
 80036b4:	edd3 6a00 	vldr	s13, [r3]
 80036b8:	4b83      	ldr	r3, [pc, #524]	; (80038c8 <CalculateRunningSpec+0x368>)
 80036ba:	ed93 7a00 	vldr	s14, [r3]
 80036be:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80036c2:	4b8b      	ldr	r3, [pc, #556]	; (80038f0 <CalculateRunningSpec+0x390>)
 80036c4:	edc3 7a00 	vstr	s15, [r3]
	
	PullingDecelTime = (PullingMaxSpeed * (2*3.14/60) * DrumRadius) / PullingDecel;
 80036c8:	4b86      	ldr	r3, [pc, #536]	; (80038e4 <CalculateRunningSpec+0x384>)
 80036ca:	881b      	ldrh	r3, [r3, #0]
 80036cc:	4618      	mov	r0, r3
 80036ce:	f7fc ff29 	bl	8000524 <__aeabi_i2d>
 80036d2:	a36f      	add	r3, pc, #444	; (adr r3, 8003890 <CalculateRunningSpec+0x330>)
 80036d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80036d8:	f7fc ff8e 	bl	80005f8 <__aeabi_dmul>
 80036dc:	4602      	mov	r2, r0
 80036de:	460b      	mov	r3, r1
 80036e0:	4614      	mov	r4, r2
 80036e2:	461d      	mov	r5, r3
 80036e4:	4b78      	ldr	r3, [pc, #480]	; (80038c8 <CalculateRunningSpec+0x368>)
 80036e6:	681b      	ldr	r3, [r3, #0]
 80036e8:	4618      	mov	r0, r3
 80036ea:	f7fc ff2d 	bl	8000548 <__aeabi_f2d>
 80036ee:	4602      	mov	r2, r0
 80036f0:	460b      	mov	r3, r1
 80036f2:	4620      	mov	r0, r4
 80036f4:	4629      	mov	r1, r5
 80036f6:	f7fc ff7f 	bl	80005f8 <__aeabi_dmul>
 80036fa:	4602      	mov	r2, r0
 80036fc:	460b      	mov	r3, r1
 80036fe:	4614      	mov	r4, r2
 8003700:	461d      	mov	r5, r3
 8003702:	4b7a      	ldr	r3, [pc, #488]	; (80038ec <CalculateRunningSpec+0x38c>)
 8003704:	681b      	ldr	r3, [r3, #0]
 8003706:	4618      	mov	r0, r3
 8003708:	f7fc ff1e 	bl	8000548 <__aeabi_f2d>
 800370c:	4602      	mov	r2, r0
 800370e:	460b      	mov	r3, r1
 8003710:	4620      	mov	r0, r4
 8003712:	4629      	mov	r1, r5
 8003714:	f7fd f89a 	bl	800084c <__aeabi_ddiv>
 8003718:	4602      	mov	r2, r0
 800371a:	460b      	mov	r3, r1
 800371c:	4610      	mov	r0, r2
 800371e:	4619      	mov	r1, r3
 8003720:	f7fd fa62 	bl	8000be8 <__aeabi_d2f>
 8003724:	4603      	mov	r3, r0
 8003726:	4a73      	ldr	r2, [pc, #460]	; (80038f4 <CalculateRunningSpec+0x394>)
 8003728:	6013      	str	r3, [r2, #0]
	PullingDecelDistance = 0.5*PullingMaxSpeed*(2*3.14/60)*DrumRadius*PullingDecelTime;
 800372a:	4b6e      	ldr	r3, [pc, #440]	; (80038e4 <CalculateRunningSpec+0x384>)
 800372c:	881b      	ldrh	r3, [r3, #0]
 800372e:	4618      	mov	r0, r3
 8003730:	f7fc fef8 	bl	8000524 <__aeabi_i2d>
 8003734:	f04f 0200 	mov.w	r2, #0
 8003738:	4b6f      	ldr	r3, [pc, #444]	; (80038f8 <CalculateRunningSpec+0x398>)
 800373a:	f7fc ff5d 	bl	80005f8 <__aeabi_dmul>
 800373e:	4602      	mov	r2, r0
 8003740:	460b      	mov	r3, r1
 8003742:	4610      	mov	r0, r2
 8003744:	4619      	mov	r1, r3
 8003746:	a352      	add	r3, pc, #328	; (adr r3, 8003890 <CalculateRunningSpec+0x330>)
 8003748:	e9d3 2300 	ldrd	r2, r3, [r3]
 800374c:	f7fc ff54 	bl	80005f8 <__aeabi_dmul>
 8003750:	4602      	mov	r2, r0
 8003752:	460b      	mov	r3, r1
 8003754:	4614      	mov	r4, r2
 8003756:	461d      	mov	r5, r3
 8003758:	4b5b      	ldr	r3, [pc, #364]	; (80038c8 <CalculateRunningSpec+0x368>)
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	4618      	mov	r0, r3
 800375e:	f7fc fef3 	bl	8000548 <__aeabi_f2d>
 8003762:	4602      	mov	r2, r0
 8003764:	460b      	mov	r3, r1
 8003766:	4620      	mov	r0, r4
 8003768:	4629      	mov	r1, r5
 800376a:	f7fc ff45 	bl	80005f8 <__aeabi_dmul>
 800376e:	4602      	mov	r2, r0
 8003770:	460b      	mov	r3, r1
 8003772:	4614      	mov	r4, r2
 8003774:	461d      	mov	r5, r3
 8003776:	4b5f      	ldr	r3, [pc, #380]	; (80038f4 <CalculateRunningSpec+0x394>)
 8003778:	681b      	ldr	r3, [r3, #0]
 800377a:	4618      	mov	r0, r3
 800377c:	f7fc fee4 	bl	8000548 <__aeabi_f2d>
 8003780:	4602      	mov	r2, r0
 8003782:	460b      	mov	r3, r1
 8003784:	4620      	mov	r0, r4
 8003786:	4629      	mov	r1, r5
 8003788:	f7fc ff36 	bl	80005f8 <__aeabi_dmul>
 800378c:	4602      	mov	r2, r0
 800378e:	460b      	mov	r3, r1
 8003790:	4610      	mov	r0, r2
 8003792:	4619      	mov	r1, r3
 8003794:	f7fd fa28 	bl	8000be8 <__aeabi_d2f>
 8003798:	4603      	mov	r3, r0
 800379a:	4a58      	ldr	r2, [pc, #352]	; (80038fc <CalculateRunningSpec+0x39c>)
 800379c:	6013      	str	r3, [r2, #0]
	
	PullingTotalDistance = ((float)PullingAccelDistance*1.7 + PullingDecelDistance*1.7);
 800379e:	4b50      	ldr	r3, [pc, #320]	; (80038e0 <CalculateRunningSpec+0x380>)
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	4618      	mov	r0, r3
 80037a4:	f7fc fed0 	bl	8000548 <__aeabi_f2d>
 80037a8:	a33b      	add	r3, pc, #236	; (adr r3, 8003898 <CalculateRunningSpec+0x338>)
 80037aa:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ae:	f7fc ff23 	bl	80005f8 <__aeabi_dmul>
 80037b2:	4602      	mov	r2, r0
 80037b4:	460b      	mov	r3, r1
 80037b6:	4614      	mov	r4, r2
 80037b8:	461d      	mov	r5, r3
 80037ba:	4b50      	ldr	r3, [pc, #320]	; (80038fc <CalculateRunningSpec+0x39c>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	4618      	mov	r0, r3
 80037c0:	f7fc fec2 	bl	8000548 <__aeabi_f2d>
 80037c4:	a334      	add	r3, pc, #208	; (adr r3, 8003898 <CalculateRunningSpec+0x338>)
 80037c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80037ca:	f7fc ff15 	bl	80005f8 <__aeabi_dmul>
 80037ce:	4602      	mov	r2, r0
 80037d0:	460b      	mov	r3, r1
 80037d2:	4620      	mov	r0, r4
 80037d4:	4629      	mov	r1, r5
 80037d6:	f7fc fd59 	bl	800028c <__adddf3>
 80037da:	4602      	mov	r2, r0
 80037dc:	460b      	mov	r3, r1
 80037de:	4610      	mov	r0, r2
 80037e0:	4619      	mov	r1, r3
 80037e2:	f7fd fa01 	bl	8000be8 <__aeabi_d2f>
 80037e6:	4603      	mov	r3, r0
 80037e8:	4a45      	ldr	r2, [pc, #276]	; (8003900 <CalculateRunningSpec+0x3a0>)
 80037ea:	6013      	str	r3, [r2, #0]
	PullingBotomPulseCmdPosition = (int)((float)EncoderResolution*(float)PullingTotalDistance/((float)(2*3.14*DrumRadius)));
 80037ec:	4b45      	ldr	r3, [pc, #276]	; (8003904 <CalculateRunningSpec+0x3a4>)
 80037ee:	881b      	ldrh	r3, [r3, #0]
 80037f0:	ee07 3a90 	vmov	s15, r3
 80037f4:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80037f8:	4b41      	ldr	r3, [pc, #260]	; (8003900 <CalculateRunningSpec+0x3a0>)
 80037fa:	edd3 7a00 	vldr	s15, [r3]
 80037fe:	ee27 8a27 	vmul.f32	s16, s14, s15
 8003802:	4b31      	ldr	r3, [pc, #196]	; (80038c8 <CalculateRunningSpec+0x368>)
 8003804:	681b      	ldr	r3, [r3, #0]
 8003806:	4618      	mov	r0, r3
 8003808:	f7fc fe9e 	bl	8000548 <__aeabi_f2d>
 800380c:	a324      	add	r3, pc, #144	; (adr r3, 80038a0 <CalculateRunningSpec+0x340>)
 800380e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003812:	f7fc fef1 	bl	80005f8 <__aeabi_dmul>
 8003816:	4602      	mov	r2, r0
 8003818:	460b      	mov	r3, r1
 800381a:	4610      	mov	r0, r2
 800381c:	4619      	mov	r1, r3
 800381e:	f7fd f9e3 	bl	8000be8 <__aeabi_d2f>
 8003822:	ee07 0a10 	vmov	s14, r0
 8003826:	eec8 7a07 	vdiv.f32	s15, s16, s14
 800382a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800382e:	ee17 2a90 	vmov	r2, s15
 8003832:	4b35      	ldr	r3, [pc, #212]	; (8003908 <CalculateRunningSpec+0x3a8>)
 8003834:	601a      	str	r2, [r3, #0]

	WaitingTime = (uint16_t)(((PullingMaxSpeed*(2*3.14/60)*DrumRadius)/9.8 - PullingDecelTime)*1000*2); // *1000 to convert to ms; *2 for both flying up and dropping down
 8003836:	4b2b      	ldr	r3, [pc, #172]	; (80038e4 <CalculateRunningSpec+0x384>)
 8003838:	881b      	ldrh	r3, [r3, #0]
 800383a:	4618      	mov	r0, r3
 800383c:	f7fc fe72 	bl	8000524 <__aeabi_i2d>
 8003840:	a313      	add	r3, pc, #76	; (adr r3, 8003890 <CalculateRunningSpec+0x330>)
 8003842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003846:	f7fc fed7 	bl	80005f8 <__aeabi_dmul>
 800384a:	4602      	mov	r2, r0
 800384c:	460b      	mov	r3, r1
 800384e:	4614      	mov	r4, r2
 8003850:	461d      	mov	r5, r3
 8003852:	4b1d      	ldr	r3, [pc, #116]	; (80038c8 <CalculateRunningSpec+0x368>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	4618      	mov	r0, r3
 8003858:	f7fc fe76 	bl	8000548 <__aeabi_f2d>
 800385c:	4602      	mov	r2, r0
 800385e:	460b      	mov	r3, r1
 8003860:	4620      	mov	r0, r4
 8003862:	4629      	mov	r1, r5
 8003864:	f7fc fec8 	bl	80005f8 <__aeabi_dmul>
 8003868:	4602      	mov	r2, r0
 800386a:	460b      	mov	r3, r1
 800386c:	4610      	mov	r0, r2
 800386e:	4619      	mov	r1, r3
 8003870:	a30d      	add	r3, pc, #52	; (adr r3, 80038a8 <CalculateRunningSpec+0x348>)
 8003872:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003876:	f7fc ffe9 	bl	800084c <__aeabi_ddiv>
 800387a:	4602      	mov	r2, r0
 800387c:	460b      	mov	r3, r1
 800387e:	4614      	mov	r4, r2
 8003880:	461d      	mov	r5, r3
 8003882:	e043      	b.n	800390c <CalculateRunningSpec+0x3ac>
 8003884:	f3af 8000 	nop.w
 8003888:	9999999a 	.word	0x9999999a
 800388c:	3fb99999 	.word	0x3fb99999
 8003890:	46508dff 	.word	0x46508dff
 8003894:	3fbacb6f 	.word	0x3fbacb6f
 8003898:	33333333 	.word	0x33333333
 800389c:	3ffb3333 	.word	0x3ffb3333
 80038a0:	51eb851f 	.word	0x51eb851f
 80038a4:	40191eb8 	.word	0x40191eb8
 80038a8:	9999999a 	.word	0x9999999a
 80038ac:	40239999 	.word	0x40239999
 80038b0:	2000045d 	.word	0x2000045d
 80038b4:	40080000 	.word	0x40080000
 80038b8:	20000460 	.word	0x20000460
 80038bc:	20000464 	.word	0x20000464
 80038c0:	20000478 	.word	0x20000478
 80038c4:	40240000 	.word	0x40240000
 80038c8:	20000458 	.word	0x20000458
 80038cc:	20000474 	.word	0x20000474
 80038d0:	2000046c 	.word	0x2000046c
 80038d4:	20000468 	.word	0x20000468
 80038d8:	20000470 	.word	0x20000470
 80038dc:	2000047c 	.word	0x2000047c
 80038e0:	20000498 	.word	0x20000498
 80038e4:	20000490 	.word	0x20000490
 80038e8:	20000484 	.word	0x20000484
 80038ec:	20000480 	.word	0x20000480
 80038f0:	20000488 	.word	0x20000488
 80038f4:	2000048c 	.word	0x2000048c
 80038f8:	3fe00000 	.word	0x3fe00000
 80038fc:	20000494 	.word	0x20000494
 8003900:	2000049c 	.word	0x2000049c
 8003904:	20000008 	.word	0x20000008
 8003908:	200004a0 	.word	0x200004a0
 800390c:	4b15      	ldr	r3, [pc, #84]	; (8003964 <CalculateRunningSpec+0x404>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	4618      	mov	r0, r3
 8003912:	f7fc fe19 	bl	8000548 <__aeabi_f2d>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4620      	mov	r0, r4
 800391c:	4629      	mov	r1, r5
 800391e:	f7fc fcb3 	bl	8000288 <__aeabi_dsub>
 8003922:	4602      	mov	r2, r0
 8003924:	460b      	mov	r3, r1
 8003926:	4610      	mov	r0, r2
 8003928:	4619      	mov	r1, r3
 800392a:	f04f 0200 	mov.w	r2, #0
 800392e:	4b0e      	ldr	r3, [pc, #56]	; (8003968 <CalculateRunningSpec+0x408>)
 8003930:	f7fc fe62 	bl	80005f8 <__aeabi_dmul>
 8003934:	4602      	mov	r2, r0
 8003936:	460b      	mov	r3, r1
 8003938:	4610      	mov	r0, r2
 800393a:	4619      	mov	r1, r3
 800393c:	4602      	mov	r2, r0
 800393e:	460b      	mov	r3, r1
 8003940:	f7fc fca4 	bl	800028c <__adddf3>
 8003944:	4602      	mov	r2, r0
 8003946:	460b      	mov	r3, r1
 8003948:	4610      	mov	r0, r2
 800394a:	4619      	mov	r1, r3
 800394c:	f7fd f92c 	bl	8000ba8 <__aeabi_d2uiz>
 8003950:	4603      	mov	r3, r0
 8003952:	b29a      	uxth	r2, r3
 8003954:	4b05      	ldr	r3, [pc, #20]	; (800396c <CalculateRunningSpec+0x40c>)
 8003956:	801a      	strh	r2, [r3, #0]
}
 8003958:	bf00      	nop
 800395a:	46bd      	mov	sp, r7
 800395c:	ecbd 8b02 	vpop	{d8}
 8003960:	bdb0      	pop	{r4, r5, r7, pc}
 8003962:	bf00      	nop
 8003964:	2000048c 	.word	0x2000048c
 8003968:	408f4000 	.word	0x408f4000
 800396c:	2000044a 	.word	0x2000044a

08003970 <InitParams>:
void InitParams ()
{
 8003970:	b580      	push	{r7, lr}
 8003972:	b082      	sub	sp, #8
 8003974:	af00      	add	r7, sp, #0
	// Load Parameters from the memory
	LoadSavedParam(MemoryAddress,Params);
 8003976:	4929      	ldr	r1, [pc, #164]	; (8003a1c <InitParams+0xac>)
 8003978:	4829      	ldr	r0, [pc, #164]	; (8003a20 <InitParams+0xb0>)
 800397a:	f7fd ff59 	bl	8001830 <LoadSavedParam>
	
	// General Params
	DrumRadius = Params[0];	
 800397e:	4b27      	ldr	r3, [pc, #156]	; (8003a1c <InitParams+0xac>)
 8003980:	681b      	ldr	r3, [r3, #0]
 8003982:	4a28      	ldr	r2, [pc, #160]	; (8003a24 <InitParams+0xb4>)
 8003984:	6013      	str	r3, [r2, #0]
	PullingSpeed = Params[1];
 8003986:	4b25      	ldr	r3, [pc, #148]	; (8003a1c <InitParams+0xac>)
 8003988:	edd3 7a01 	vldr	s15, [r3, #4]
 800398c:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003990:	edc7 7a01 	vstr	s15, [r7, #4]
 8003994:	793b      	ldrb	r3, [r7, #4]
 8003996:	b2da      	uxtb	r2, r3
 8003998:	4b23      	ldr	r3, [pc, #140]	; (8003a28 <InitParams+0xb8>)
 800399a:	701a      	strb	r2, [r3, #0]
	StoppingTime = Params[2];
 800399c:	4b1f      	ldr	r3, [pc, #124]	; (8003a1c <InitParams+0xac>)
 800399e:	edd3 7a02 	vldr	s15, [r3, #8]
 80039a2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039a6:	ee17 3a90 	vmov	r3, s15
 80039aa:	b29a      	uxth	r2, r3
 80039ac:	4b1f      	ldr	r3, [pc, #124]	; (8003a2c <InitParams+0xbc>)
 80039ae:	801a      	strh	r2, [r3, #0]
	SampleTime = Params[3];
 80039b0:	4b1a      	ldr	r3, [pc, #104]	; (8003a1c <InitParams+0xac>)
 80039b2:	edd3 7a03 	vldr	s15, [r3, #12]
 80039b6:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80039ba:	edc7 7a01 	vstr	s15, [r7, #4]
 80039be:	793b      	ldrb	r3, [r7, #4]
 80039c0:	b2da      	uxtb	r2, r3
 80039c2:	4b1b      	ldr	r3, [pc, #108]	; (8003a30 <InitParams+0xc0>)
 80039c4:	701a      	strb	r2, [r3, #0]
	
	// Dropping Stage Params
	DroppingAccelDistance = Params[4];
 80039c6:	4b15      	ldr	r3, [pc, #84]	; (8003a1c <InitParams+0xac>)
 80039c8:	691b      	ldr	r3, [r3, #16]
 80039ca:	4a1a      	ldr	r2, [pc, #104]	; (8003a34 <InitParams+0xc4>)
 80039cc:	6013      	str	r3, [r2, #0]
	DroppingAccel  = Params[5];
 80039ce:	4b13      	ldr	r3, [pc, #76]	; (8003a1c <InitParams+0xac>)
 80039d0:	695b      	ldr	r3, [r3, #20]
 80039d2:	4a19      	ldr	r2, [pc, #100]	; (8003a38 <InitParams+0xc8>)
 80039d4:	6013      	str	r3, [r2, #0]
	DroppingDecel = Params[6];
 80039d6:	4b11      	ldr	r3, [pc, #68]	; (8003a1c <InitParams+0xac>)
 80039d8:	699b      	ldr	r3, [r3, #24]
 80039da:	4a18      	ldr	r2, [pc, #96]	; (8003a3c <InitParams+0xcc>)
 80039dc:	6013      	str	r3, [r2, #0]

	
	// Pulling Stage Params
	PullingAccelDistance = Params[7];
 80039de:	4b0f      	ldr	r3, [pc, #60]	; (8003a1c <InitParams+0xac>)
 80039e0:	69db      	ldr	r3, [r3, #28]
 80039e2:	4a17      	ldr	r2, [pc, #92]	; (8003a40 <InitParams+0xd0>)
 80039e4:	6013      	str	r3, [r2, #0]
	PullingAccel = Params[8];
 80039e6:	4b0d      	ldr	r3, [pc, #52]	; (8003a1c <InitParams+0xac>)
 80039e8:	6a1b      	ldr	r3, [r3, #32]
 80039ea:	4a16      	ldr	r2, [pc, #88]	; (8003a44 <InitParams+0xd4>)
 80039ec:	6013      	str	r3, [r2, #0]
	PullingDecel = Params[9];
 80039ee:	4b0b      	ldr	r3, [pc, #44]	; (8003a1c <InitParams+0xac>)
 80039f0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80039f2:	4a15      	ldr	r2, [pc, #84]	; (8003a48 <InitParams+0xd8>)
 80039f4:	6013      	str	r3, [r2, #0]
	
	// PID Controller params
	Kp = Params[10];
 80039f6:	4b09      	ldr	r3, [pc, #36]	; (8003a1c <InitParams+0xac>)
 80039f8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80039fa:	4a14      	ldr	r2, [pc, #80]	; (8003a4c <InitParams+0xdc>)
 80039fc:	6013      	str	r3, [r2, #0]
	Ki = Params[11];
 80039fe:	4b07      	ldr	r3, [pc, #28]	; (8003a1c <InitParams+0xac>)
 8003a00:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a02:	4a13      	ldr	r2, [pc, #76]	; (8003a50 <InitParams+0xe0>)
 8003a04:	6013      	str	r3, [r2, #0]
	Kd = Params[12];
 8003a06:	4b05      	ldr	r3, [pc, #20]	; (8003a1c <InitParams+0xac>)
 8003a08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a0a:	4a12      	ldr	r2, [pc, #72]	; (8003a54 <InitParams+0xe4>)
 8003a0c:	6013      	str	r3, [r2, #0]
	
	CalculateRunningSpec ();
 8003a0e:	f7ff fda7 	bl	8003560 <CalculateRunningSpec>
}
 8003a12:	bf00      	nop
 8003a14:	3708      	adds	r7, #8
 8003a16:	46bd      	mov	sp, r7
 8003a18:	bd80      	pop	{r7, pc}
 8003a1a:	bf00      	nop
 8003a1c:	200004a4 	.word	0x200004a4
 8003a20:	08040000 	.word	0x08040000
 8003a24:	20000458 	.word	0x20000458
 8003a28:	2000045d 	.word	0x2000045d
 8003a2c:	2000045e 	.word	0x2000045e
 8003a30:	2000045c 	.word	0x2000045c
 8003a34:	20000478 	.word	0x20000478
 8003a38:	20000464 	.word	0x20000464
 8003a3c:	20000468 	.word	0x20000468
 8003a40:	20000498 	.word	0x20000498
 8003a44:	2000047c 	.word	0x2000047c
 8003a48:	20000480 	.word	0x20000480
 8003a4c:	20000518 	.word	0x20000518
 8003a50:	2000051c 	.word	0x2000051c
 8003a54:	20000520 	.word	0x20000520

08003a58 <ProcessReceivedCommand>:

void ProcessReceivedCommand () // Proceed the command from the UI
{
 8003a58:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8003a5c:	b0ef      	sub	sp, #444	; 0x1bc
 8003a5e:	af16      	add	r7, sp, #88	; 0x58
	//ExtractMotionCode(); // Extract data to MotionCode
	switch ((int)MotionCode[0])
 8003a60:	4bbf      	ldr	r3, [pc, #764]	; (8003d60 <ProcessReceivedCommand+0x308>)
 8003a62:	edd3 7a00 	vldr	s15, [r3]
 8003a66:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003a6a:	ee17 3a90 	vmov	r3, s15
 8003a6e:	3b01      	subs	r3, #1
 8003a70:	2b2f      	cmp	r3, #47	; 0x2f
 8003a72:	f200 8745 	bhi.w	8004900 <ProcessReceivedCommand+0xea8>
 8003a76:	a201      	add	r2, pc, #4	; (adr r2, 8003a7c <ProcessReceivedCommand+0x24>)
 8003a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003a7c:	08003b77 	.word	0x08003b77
 8003a80:	08003bbd 	.word	0x08003bbd
 8003a84:	08003be7 	.word	0x08003be7
 8003a88:	08003c93 	.word	0x08003c93
 8003a8c:	08003cc1 	.word	0x08003cc1
 8003a90:	08003d31 	.word	0x08003d31
 8003a94:	08003dad 	.word	0x08003dad
 8003a98:	08003de7 	.word	0x08003de7
 8003a9c:	08004901 	.word	0x08004901
 8003aa0:	08004901 	.word	0x08004901
 8003aa4:	08003fb5 	.word	0x08003fb5
 8003aa8:	0800400d 	.word	0x0800400d
 8003aac:	080040c7 	.word	0x080040c7
 8003ab0:	0800415d 	.word	0x0800415d
 8003ab4:	0800416b 	.word	0x0800416b
 8003ab8:	080041c1 	.word	0x080041c1
 8003abc:	08004237 	.word	0x08004237
 8003ac0:	0800423d 	.word	0x0800423d
 8003ac4:	08004901 	.word	0x08004901
 8003ac8:	08004269 	.word	0x08004269
 8003acc:	08004901 	.word	0x08004901
 8003ad0:	08004901 	.word	0x08004901
 8003ad4:	08004901 	.word	0x08004901
 8003ad8:	08004901 	.word	0x08004901
 8003adc:	08004901 	.word	0x08004901
 8003ae0:	08004901 	.word	0x08004901
 8003ae4:	08004325 	.word	0x08004325
 8003ae8:	080043f1 	.word	0x080043f1
 8003aec:	08004901 	.word	0x08004901
 8003af0:	08004901 	.word	0x08004901
 8003af4:	08004411 	.word	0x08004411
 8003af8:	0800446b 	.word	0x0800446b
 8003afc:	080044bf 	.word	0x080044bf
 8003b00:	08004513 	.word	0x08004513
 8003b04:	08004567 	.word	0x08004567
 8003b08:	08004915 	.word	0x08004915
 8003b0c:	080045bb 	.word	0x080045bb
 8003b10:	08004685 	.word	0x08004685
 8003b14:	080046bb 	.word	0x080046bb
 8003b18:	08004901 	.word	0x08004901
 8003b1c:	08004743 	.word	0x08004743
 8003b20:	08004793 	.word	0x08004793
 8003b24:	080047e3 	.word	0x080047e3
 8003b28:	08003b3d 	.word	0x08003b3d
 8003b2c:	08003e0d 	.word	0x08003e0d
 8003b30:	08004833 	.word	0x08004833
 8003b34:	0800483d 	.word	0x0800483d
 8003b38:	0800489d 	.word	0x0800489d
	{
		case 44: //Emergency Stop Change to 44 to avoid data confusion
			if ((int)MotionCode[1] == 0) // 44/0
 8003b3c:	4b88      	ldr	r3, [pc, #544]	; (8003d60 <ProcessReceivedCommand+0x308>)
 8003b3e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b42:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b46:	ee17 3a90 	vmov	r3, s15
 8003b4a:	2b00      	cmp	r3, #0
 8003b4c:	d10f      	bne.n	8003b6e <ProcessReceivedCommand+0x116>
			{
				Estop(); // Estop button on the UI
 8003b4e:	f7fd fb7f 	bl	8001250 <Estop>
				PulseGenerationFlag = false; // Stop generating pulses
 8003b52:	4b84      	ldr	r3, [pc, #528]	; (8003d64 <ProcessReceivedCommand+0x30c>)
 8003b54:	2200      	movs	r2, #0
 8003b56:	701a      	strb	r2, [r3, #0]
				StartDropping = false;
 8003b58:	4b83      	ldr	r3, [pc, #524]	; (8003d68 <ProcessReceivedCommand+0x310>)
 8003b5a:	2200      	movs	r2, #0
 8003b5c:	701a      	strb	r2, [r3, #0]
				StartPulling = false;
 8003b5e:	4b83      	ldr	r3, [pc, #524]	; (8003d6c <ProcessReceivedCommand+0x314>)
 8003b60:	2200      	movs	r2, #0
 8003b62:	701a      	strb	r2, [r3, #0]
				EMO = true;				
 8003b64:	4b82      	ldr	r3, [pc, #520]	; (8003d70 <ProcessReceivedCommand+0x318>)
 8003b66:	2201      	movs	r2, #1
 8003b68:	701a      	strb	r2, [r3, #0]
			}
			else {AlarmReset();}  // 44/1, alarm button
			break;
 8003b6a:	f000 bf0c 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
			else {AlarmReset();}  // 44/1, alarm button
 8003b6e:	f7fd fb49 	bl	8001204 <AlarmReset>
			break;
 8003b72:	f000 bf08 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
		case 1: // Stop button;
			if ((int)MotionCode[1] == 1) // 1/1
 8003b76:	4b7a      	ldr	r3, [pc, #488]	; (8003d60 <ProcessReceivedCommand+0x308>)
 8003b78:	edd3 7a01 	vldr	s15, [r3, #4]
 8003b7c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003b80:	ee17 3a90 	vmov	r3, s15
 8003b84:	2b01      	cmp	r3, #1
 8003b86:	f040 86c7 	bne.w	8004918 <ProcessReceivedCommand+0xec0>
			{
				if (MotorDriver) // FDA 7000
 8003b8a:	4b7a      	ldr	r3, [pc, #488]	; (8003d74 <ProcessReceivedCommand+0x31c>)
 8003b8c:	781b      	ldrb	r3, [r3, #0]
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d005      	beq.n	8003b9e <ProcessReceivedCommand+0x146>
				{
					Stop();
 8003b92:	f7fd fb27 	bl	80011e4 <Stop>
					StopExperiment();
 8003b96:	f7ff fcbf 	bl	8003518 <StopExperiment>
					IsHoming = false;
					IsStepPulseCmd = false;
					JoggingMoveUp = false;
				}					
			}
			break;
 8003b9a:	f000 bebd 	b.w	8004918 <ProcessReceivedCommand+0xec0>
					StopPulseGenerating();
 8003b9e:	f7fd ffad 	bl	8001afc <StopPulseGenerating>
					StopExperiment();
 8003ba2:	f7ff fcb9 	bl	8003518 <StopExperiment>
					IsHoming = false;
 8003ba6:	4b74      	ldr	r3, [pc, #464]	; (8003d78 <ProcessReceivedCommand+0x320>)
 8003ba8:	2200      	movs	r2, #0
 8003baa:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = false;
 8003bac:	4b73      	ldr	r3, [pc, #460]	; (8003d7c <ProcessReceivedCommand+0x324>)
 8003bae:	2200      	movs	r2, #0
 8003bb0:	701a      	strb	r2, [r3, #0]
					JoggingMoveUp = false;
 8003bb2:	4b73      	ldr	r3, [pc, #460]	; (8003d80 <ProcessReceivedCommand+0x328>)
 8003bb4:	2200      	movs	r2, #0
 8003bb6:	701a      	strb	r2, [r3, #0]
			break;
 8003bb8:	f000 beae 	b.w	8004918 <ProcessReceivedCommand+0xec0>
		case 2: // Set Control Mode
			if ((int)MotionCode[1] == 1) // 2/1 position mode
 8003bbc:	4b68      	ldr	r3, [pc, #416]	; (8003d60 <ProcessReceivedCommand+0x308>)
 8003bbe:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bc2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bc6:	ee17 3a90 	vmov	r3, s15
 8003bca:	2b01      	cmp	r3, #1
 8003bcc:	d106      	bne.n	8003bdc <ProcessReceivedCommand+0x184>
					{
						PositionControlMode = true;
 8003bce:	4b6d      	ldr	r3, [pc, #436]	; (8003d84 <ProcessReceivedCommand+0x32c>)
 8003bd0:	2201      	movs	r2, #1
 8003bd2:	701a      	strb	r2, [r3, #0]
						DriverInit(); // Init Position Mode
 8003bd4:	f7fd fb7c 	bl	80012d0 <DriverInit>
			else // 2/0 speed mode
					{
						PositionControlMode = false;
						//SetSpeedMode(); // Set to Speed Mode
					} 
			break;
 8003bd8:	f000 bed5 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
						PositionControlMode = false;
 8003bdc:	4b69      	ldr	r3, [pc, #420]	; (8003d84 <ProcessReceivedCommand+0x32c>)
 8003bde:	2200      	movs	r2, #0
 8003be0:	701a      	strb	r2, [r3, #0]
			break;
 8003be2:	f000 bed0 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
		case 3: // Jog Control
			
			if ((int)MotionCode[1] == 1) // 3/1 move up button
 8003be6:	4b5e      	ldr	r3, [pc, #376]	; (8003d60 <ProcessReceivedCommand+0x308>)
 8003be8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003bec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003bf0:	ee17 3a90 	vmov	r3, s15
 8003bf4:	2b01      	cmp	r3, #1
 8003bf6:	d127      	bne.n	8003c48 <ProcessReceivedCommand+0x1f0>
			{
					JoggingMoveUp = true;
 8003bf8:	4b61      	ldr	r3, [pc, #388]	; (8003d80 <ProcessReceivedCommand+0x328>)
 8003bfa:	2201      	movs	r2, #1
 8003bfc:	701a      	strb	r2, [r3, #0]
					if (PositionControlMode) // If the control Mode is Position Mode
 8003bfe:	4b61      	ldr	r3, [pc, #388]	; (8003d84 <ProcessReceivedCommand+0x32c>)
 8003c00:	781b      	ldrb	r3, [r3, #0]
 8003c02:	2b00      	cmp	r3, #0
 8003c04:	d01c      	beq.n	8003c40 <ProcessReceivedCommand+0x1e8>
//							{
//								break;
//							}
						}
						// Calculate Timer3CountPeriod to generate pulse
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8003c06:	4b5b      	ldr	r3, [pc, #364]	; (8003d74 <ProcessReceivedCommand+0x31c>)
 8003c08:	781b      	ldrb	r3, [r3, #0]
 8003c0a:	4a5f      	ldr	r2, [pc, #380]	; (8003d88 <ProcessReceivedCommand+0x330>)
 8003c0c:	8812      	ldrh	r2, [r2, #0]
 8003c0e:	ee07 2a90 	vmov	s15, r2
 8003c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c16:	eeb0 0a67 	vmov.f32	s0, s15
 8003c1a:	4618      	mov	r0, r3
 8003c1c:	f7fd ffd0 	bl	8001bc0 <CalculateTimer3Period>
 8003c20:	4603      	mov	r3, r0
 8003c22:	b29a      	uxth	r2, r3
 8003c24:	4b59      	ldr	r3, [pc, #356]	; (8003d8c <ProcessReceivedCommand+0x334>)
 8003c26:	801a      	strh	r2, [r3, #0]
						//Timer3CountPeriod = (int)((float)(120000000.0/((float)JogSpeed*(float)EncoderResolution)) + 0.5);						
						PRIsToggled = true; // PR phase is 90 deg late
 8003c28:	4b59      	ldr	r3, [pc, #356]	; (8003d90 <ProcessReceivedCommand+0x338>)
 8003c2a:	2201      	movs	r2, #1
 8003c2c:	701a      	strb	r2, [r3, #0]
						Direction = false; // false = move up
 8003c2e:	4b59      	ldr	r3, [pc, #356]	; (8003d94 <ProcessReceivedCommand+0x33c>)
 8003c30:	2200      	movs	r2, #0
 8003c32:	701a      	strb	r2, [r3, #0]
						StartPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true						
 8003c34:	f7fd ff80 	bl	8001b38 <StartPulseGenerating>
						DisableSTOP(); // Turn off STOP to run
 8003c38:	f7fd fb16 	bl	8001268 <DisableSTOP>
					else // Speed Mode
					{
						JogMoveDown(); // Disable the stop
					}					
			}
			break;
 8003c3c:	f000 bea3 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
						JogMoveUp(); // Disable the stop
 8003c40:	f7fd fb1e 	bl	8001280 <JogMoveUp>
			break;
 8003c44:	f000 be9f 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
					if (PositionControlMode) // If the control Mode is Position Mode
 8003c48:	4b4e      	ldr	r3, [pc, #312]	; (8003d84 <ProcessReceivedCommand+0x32c>)
 8003c4a:	781b      	ldrb	r3, [r3, #0]
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d01c      	beq.n	8003c8a <ProcessReceivedCommand+0x232>
						Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8003c50:	4b48      	ldr	r3, [pc, #288]	; (8003d74 <ProcessReceivedCommand+0x31c>)
 8003c52:	781b      	ldrb	r3, [r3, #0]
 8003c54:	4a4c      	ldr	r2, [pc, #304]	; (8003d88 <ProcessReceivedCommand+0x330>)
 8003c56:	8812      	ldrh	r2, [r2, #0]
 8003c58:	ee07 2a90 	vmov	s15, r2
 8003c5c:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003c60:	eeb0 0a67 	vmov.f32	s0, s15
 8003c64:	4618      	mov	r0, r3
 8003c66:	f7fd ffab 	bl	8001bc0 <CalculateTimer3Period>
 8003c6a:	4603      	mov	r3, r0
 8003c6c:	b29a      	uxth	r2, r3
 8003c6e:	4b47      	ldr	r3, [pc, #284]	; (8003d8c <ProcessReceivedCommand+0x334>)
 8003c70:	801a      	strh	r2, [r3, #0]
						PRIsToggled = false; //
 8003c72:	4b47      	ldr	r3, [pc, #284]	; (8003d90 <ProcessReceivedCommand+0x338>)
 8003c74:	2200      	movs	r2, #0
 8003c76:	701a      	strb	r2, [r3, #0]
						Direction = true;
 8003c78:	4b46      	ldr	r3, [pc, #280]	; (8003d94 <ProcessReceivedCommand+0x33c>)
 8003c7a:	2201      	movs	r2, #1
 8003c7c:	701a      	strb	r2, [r3, #0]
						StartPulseGenerating(); // Reset PF, PR + Enable Timer + PulseGeneratingFlag = true
 8003c7e:	f7fd ff5b 	bl	8001b38 <StartPulseGenerating>
						DisableSTOP();	// Turn off STOP to run					
 8003c82:	f7fd faf1 	bl	8001268 <DisableSTOP>
			break;
 8003c86:	f000 be7e 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
						JogMoveDown(); // Disable the stop
 8003c8a:	f7fd fb0d 	bl	80012a8 <JogMoveDown>
			break;
 8003c8e:	f000 be7a 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
		case 4: // Start Running Buton (Start Running Experiment)
			if ((int)MotionCode[1] == 1) // Start runing 
 8003c92:	4b33      	ldr	r3, [pc, #204]	; (8003d60 <ProcessReceivedCommand+0x308>)
 8003c94:	edd3 7a01 	vldr	s15, [r3, #4]
 8003c98:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003c9c:	ee17 3a90 	vmov	r3, s15
 8003ca0:	2b01      	cmp	r3, #1
 8003ca2:	d109      	bne.n	8003cb8 <ProcessReceivedCommand+0x260>
				{
					InitializeRunning (ExperimentMode);
 8003ca4:	4b3c      	ldr	r3, [pc, #240]	; (8003d98 <ProcessReceivedCommand+0x340>)
 8003ca6:	781b      	ldrb	r3, [r3, #0]
 8003ca8:	4618      	mov	r0, r3
 8003caa:	f7fe fa2f 	bl	800210c <InitializeRunning>
					EMO = false;					
 8003cae:	4b30      	ldr	r3, [pc, #192]	; (8003d70 <ProcessReceivedCommand+0x318>)
 8003cb0:	2200      	movs	r2, #0
 8003cb2:	701a      	strb	r2, [r3, #0]
				}
			else // Stop running
				{
					StopExperiment();					
				}
			break;
 8003cb4:	f000 be67 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
					StopExperiment();					
 8003cb8:	f7ff fc2e 	bl	8003518 <StopExperiment>
			break;
 8003cbc:	f000 be63 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
				
		case 5: // Set Jog Speed						
			if (PositionControlMode) // If it is the position control mode, then change the JogSpeed
 8003cc0:	4b30      	ldr	r3, [pc, #192]	; (8003d84 <ProcessReceivedCommand+0x32c>)
 8003cc2:	781b      	ldrb	r3, [r3, #0]
 8003cc4:	2b00      	cmp	r3, #0
 8003cc6:	f000 8629 	beq.w	800491c <ProcessReceivedCommand+0xec4>
			{
				JogSpeed = (int)(MotionCode[1]); // unit: rpm
 8003cca:	4b25      	ldr	r3, [pc, #148]	; (8003d60 <ProcessReceivedCommand+0x308>)
 8003ccc:	edd3 7a01 	vldr	s15, [r3, #4]
 8003cd0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003cd4:	ee17 3a90 	vmov	r3, s15
 8003cd8:	b29a      	uxth	r2, r3
 8003cda:	4b2b      	ldr	r3, [pc, #172]	; (8003d88 <ProcessReceivedCommand+0x330>)
 8003cdc:	801a      	strh	r2, [r3, #0]
				// Calculate Timer3CountPeriod to generate pulse
				Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 8003cde:	4b25      	ldr	r3, [pc, #148]	; (8003d74 <ProcessReceivedCommand+0x31c>)
 8003ce0:	781b      	ldrb	r3, [r3, #0]
 8003ce2:	4a29      	ldr	r2, [pc, #164]	; (8003d88 <ProcessReceivedCommand+0x330>)
 8003ce4:	8812      	ldrh	r2, [r2, #0]
 8003ce6:	ee07 2a90 	vmov	s15, r2
 8003cea:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8003cee:	eeb0 0a67 	vmov.f32	s0, s15
 8003cf2:	4618      	mov	r0, r3
 8003cf4:	f7fd ff64 	bl	8001bc0 <CalculateTimer3Period>
 8003cf8:	4603      	mov	r3, r0
 8003cfa:	b29a      	uxth	r2, r3
 8003cfc:	4b23      	ldr	r3, [pc, #140]	; (8003d8c <ProcessReceivedCommand+0x334>)
 8003cfe:	801a      	strh	r2, [r3, #0]
				//Timer3CountPeriod = (int)((float)(120000000.0/((float)JogSpeed*(float)EncoderResolution)) + 0.5);
				char JogSpeedBuff[10];
				TxPCLen = sprintf(JogSpeedBuff,"j%.de",JogSpeed);
 8003d00:	4b21      	ldr	r3, [pc, #132]	; (8003d88 <ProcessReceivedCommand+0x330>)
 8003d02:	881b      	ldrh	r3, [r3, #0]
 8003d04:	461a      	mov	r2, r3
 8003d06:	f507 73a4 	add.w	r3, r7, #328	; 0x148
 8003d0a:	4924      	ldr	r1, [pc, #144]	; (8003d9c <ProcessReceivedCommand+0x344>)
 8003d0c:	4618      	mov	r0, r3
 8003d0e:	f006 f9a7 	bl	800a060 <siprintf>
 8003d12:	4603      	mov	r3, r0
 8003d14:	b2da      	uxtb	r2, r3
 8003d16:	4b22      	ldr	r3, [pc, #136]	; (8003da0 <ProcessReceivedCommand+0x348>)
 8003d18:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)JogSpeedBuff,TxPCLen,200); // Send to uart6 to check the params are set or not
 8003d1a:	4b21      	ldr	r3, [pc, #132]	; (8003da0 <ProcessReceivedCommand+0x348>)
 8003d1c:	781b      	ldrb	r3, [r3, #0]
 8003d1e:	b29a      	uxth	r2, r3
 8003d20:	f507 71a4 	add.w	r1, r7, #328	; 0x148
 8003d24:	23c8      	movs	r3, #200	; 0xc8
 8003d26:	481f      	ldr	r0, [pc, #124]	; (8003da4 <ProcessReceivedCommand+0x34c>)
 8003d28:	f004 fcd3 	bl	80086d2 <HAL_UART_Transmit>
//					{
//						DroppingAccelDistance = roundf(MotionCode[3] * 10)/10;
//						WriteFloatData((uint16_t)MotionCode[2], DroppingAccelDistance, true);
//					}
//			}
			break;
 8003d2c:	f000 bdf6 	b.w	800491c <ProcessReceivedCommand+0xec4>
			
		case 6: // 6 request driver data
			if((int)MotionCode[1] == 1)
 8003d30:	4b0b      	ldr	r3, [pc, #44]	; (8003d60 <ProcessReceivedCommand+0x308>)
 8003d32:	edd3 7a01 	vldr	s15, [r3, #4]
 8003d36:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003d3a:	ee17 3a90 	vmov	r3, s15
 8003d3e:	2b01      	cmp	r3, #1
 8003d40:	d108      	bne.n	8003d54 <ProcessReceivedCommand+0x2fc>
			{
				UIDataRequest = true;
 8003d42:	4b19      	ldr	r3, [pc, #100]	; (8003da8 <ProcessReceivedCommand+0x350>)
 8003d44:	2201      	movs	r2, #1
 8003d46:	701a      	strb	r2, [r3, #0]
				ReadMultiRegister(StE03,5);
 8003d48:	2105      	movs	r1, #5
 8003d4a:	200c      	movs	r0, #12
 8003d4c:	f7fd fcfe 	bl	800174c <ReadMultiRegister>
			} // 6/1 If the UI request data
			else 
			{
				UIDataRequest = false;
			}
			break;
 8003d50:	f000 be19 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
				UIDataRequest = false;
 8003d54:	4b14      	ldr	r3, [pc, #80]	; (8003da8 <ProcessReceivedCommand+0x350>)
 8003d56:	2200      	movs	r2, #0
 8003d58:	701a      	strb	r2, [r3, #0]
			break;
 8003d5a:	f000 be14 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
 8003d5e:	bf00      	nop
 8003d60:	200004f8 	.word	0x200004f8
 8003d64:	2000043b 	.word	0x2000043b
 8003d68:	20000433 	.word	0x20000433
 8003d6c:	20000439 	.word	0x20000439
 8003d70:	20000442 	.word	0x20000442
 8003d74:	20000003 	.word	0x20000003
 8003d78:	20000443 	.word	0x20000443
 8003d7c:	2000043c 	.word	0x2000043c
 8003d80:	20000441 	.word	0x20000441
 8003d84:	20000002 	.word	0x20000002
 8003d88:	20000006 	.word	0x20000006
 8003d8c:	20000450 	.word	0x20000450
 8003d90:	20000446 	.word	0x20000446
 8003d94:	20000435 	.word	0x20000435
 8003d98:	20000004 	.word	0x20000004
 8003d9c:	0800de18 	.word	0x0800de18
 8003da0:	20000426 	.word	0x20000426
 8003da4:	20000338 	.word	0x20000338
 8003da8:	20000438 	.word	0x20000438
					
		case 7: // Save System Params			
			// Save to the flash memory
			//SaveParams(DrumRadius, DroppingAccelDistance, PullingSpeed, StoppingTime, DroppingAccel, SampleTime);				
			SaveSystemParams();
 8003dac:	f7fd fd7e 	bl	80018ac <SaveSystemParams>
		  HAL_Delay(1000);
 8003db0:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8003db4:	f002 fa6a 	bl	800628c <HAL_Delay>
			SaveSystemParams(); // Do twice times
 8003db8:	f7fd fd78 	bl	80018ac <SaveSystemParams>
			// Send back to the UI to notify					
			char MessageBuffer[10];
			TxPCLen = sprintf(MessageBuffer,"r7/1e");
 8003dbc:	f507 73aa 	add.w	r3, r7, #340	; 0x154
 8003dc0:	4998      	ldr	r1, [pc, #608]	; (8004024 <ProcessReceivedCommand+0x5cc>)
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	f006 f94c 	bl	800a060 <siprintf>
 8003dc8:	4603      	mov	r3, r0
 8003dca:	b2da      	uxtb	r2, r3
 8003dcc:	4b96      	ldr	r3, [pc, #600]	; (8004028 <ProcessReceivedCommand+0x5d0>)
 8003dce:	701a      	strb	r2, [r3, #0]
			HAL_UART_Transmit(&huart6,(uint8_t *)MessageBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 8003dd0:	4b95      	ldr	r3, [pc, #596]	; (8004028 <ProcessReceivedCommand+0x5d0>)
 8003dd2:	781b      	ldrb	r3, [r3, #0]
 8003dd4:	b29a      	uxth	r2, r3
 8003dd6:	f507 71aa 	add.w	r1, r7, #340	; 0x154
 8003dda:	2364      	movs	r3, #100	; 0x64
 8003ddc:	4893      	ldr	r0, [pc, #588]	; (800402c <ProcessReceivedCommand+0x5d4>)
 8003dde:	f004 fc78 	bl	80086d2 <HAL_UART_Transmit>
			break;
 8003de2:	f000 bdd0 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
		
		case 8: // Request reading digital driver output
			if((int)MotionCode[1] == 1) {OutputDataRequest = true;} // 8/1 = request
 8003de6:	4b92      	ldr	r3, [pc, #584]	; (8004030 <ProcessReceivedCommand+0x5d8>)
 8003de8:	edd3 7a01 	vldr	s15, [r3, #4]
 8003dec:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8003df0:	ee17 3a90 	vmov	r3, s15
 8003df4:	2b01      	cmp	r3, #1
 8003df6:	d104      	bne.n	8003e02 <ProcessReceivedCommand+0x3aa>
 8003df8:	4b8e      	ldr	r3, [pc, #568]	; (8004034 <ProcessReceivedCommand+0x5dc>)
 8003dfa:	2201      	movs	r2, #1
 8003dfc:	701a      	strb	r2, [r3, #0]
			else OutputDataRequest = false; // 8/0 = stop request
			break;
 8003dfe:	f000 bdc2 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
			else OutputDataRequest = false; // 8/0 = stop request
 8003e02:	4b8c      	ldr	r3, [pc, #560]	; (8004034 <ProcessReceivedCommand+0x5dc>)
 8003e04:	2200      	movs	r2, #0
 8003e06:	701a      	strb	r2, [r3, #0]
			break;
 8003e08:	f000 bdbd 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
			
		case 45: // Load saved parameters					
			LoadSavedParam(MemoryAddress,Params);
 8003e0c:	498a      	ldr	r1, [pc, #552]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e0e:	488b      	ldr	r0, [pc, #556]	; (800403c <ProcessReceivedCommand+0x5e4>)
 8003e10:	f7fd fd0e 	bl	8001830 <LoadSavedParam>
		
			// General Params
			DrumRadius = Params[0];	
 8003e14:	4b88      	ldr	r3, [pc, #544]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	4a89      	ldr	r2, [pc, #548]	; (8004040 <ProcessReceivedCommand+0x5e8>)
 8003e1a:	6013      	str	r3, [r2, #0]
			PullingSpeed = Params[1];
 8003e1c:	4b86      	ldr	r3, [pc, #536]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e1e:	edd3 7a01 	vldr	s15, [r3, #4]
 8003e22:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e26:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8003e2a:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003e2e:	b2da      	uxtb	r2, r3
 8003e30:	4b84      	ldr	r3, [pc, #528]	; (8004044 <ProcessReceivedCommand+0x5ec>)
 8003e32:	701a      	strb	r2, [r3, #0]
			StoppingTime = Params[2];
 8003e34:	4b80      	ldr	r3, [pc, #512]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e36:	edd3 7a02 	vldr	s15, [r3, #8]
 8003e3a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e3e:	ee17 3a90 	vmov	r3, s15
 8003e42:	b29a      	uxth	r2, r3
 8003e44:	4b80      	ldr	r3, [pc, #512]	; (8004048 <ProcessReceivedCommand+0x5f0>)
 8003e46:	801a      	strh	r2, [r3, #0]
			SampleTime = Params[3];
 8003e48:	4b7b      	ldr	r3, [pc, #492]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e4a:	edd3 7a03 	vldr	s15, [r3, #12]
 8003e4e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8003e52:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8003e56:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8003e5a:	b2da      	uxtb	r2, r3
 8003e5c:	4b7b      	ldr	r3, [pc, #492]	; (800404c <ProcessReceivedCommand+0x5f4>)
 8003e5e:	701a      	strb	r2, [r3, #0]
			
			// Dropping Stage Params
			DroppingAccelDistance = Params[4];
 8003e60:	4b75      	ldr	r3, [pc, #468]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e62:	691b      	ldr	r3, [r3, #16]
 8003e64:	4a7a      	ldr	r2, [pc, #488]	; (8004050 <ProcessReceivedCommand+0x5f8>)
 8003e66:	6013      	str	r3, [r2, #0]
			DroppingAccel  = Params[5];
 8003e68:	4b73      	ldr	r3, [pc, #460]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e6a:	695b      	ldr	r3, [r3, #20]
 8003e6c:	4a79      	ldr	r2, [pc, #484]	; (8004054 <ProcessReceivedCommand+0x5fc>)
 8003e6e:	6013      	str	r3, [r2, #0]
			DroppingDecel = Params[6];
 8003e70:	4b71      	ldr	r3, [pc, #452]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e72:	699b      	ldr	r3, [r3, #24]
 8003e74:	4a78      	ldr	r2, [pc, #480]	; (8004058 <ProcessReceivedCommand+0x600>)
 8003e76:	6013      	str	r3, [r2, #0]

			
			// Pulling Stage Params
			PullingAccelDistance = Params[7];
 8003e78:	4b6f      	ldr	r3, [pc, #444]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e7a:	69db      	ldr	r3, [r3, #28]
 8003e7c:	4a77      	ldr	r2, [pc, #476]	; (800405c <ProcessReceivedCommand+0x604>)
 8003e7e:	6013      	str	r3, [r2, #0]
			PullingAccel = Params[8];
 8003e80:	4b6d      	ldr	r3, [pc, #436]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e82:	6a1b      	ldr	r3, [r3, #32]
 8003e84:	4a76      	ldr	r2, [pc, #472]	; (8004060 <ProcessReceivedCommand+0x608>)
 8003e86:	6013      	str	r3, [r2, #0]
			PullingDecel = Params[9];
 8003e88:	4b6b      	ldr	r3, [pc, #428]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	4a75      	ldr	r2, [pc, #468]	; (8004064 <ProcessReceivedCommand+0x60c>)
 8003e8e:	6013      	str	r3, [r2, #0]
			
			// PID Controller params
			Kp = Params[10];
 8003e90:	4b69      	ldr	r3, [pc, #420]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e92:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e94:	4a74      	ldr	r2, [pc, #464]	; (8004068 <ProcessReceivedCommand+0x610>)
 8003e96:	6013      	str	r3, [r2, #0]
			Ki = Params[11];
 8003e98:	4b67      	ldr	r3, [pc, #412]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003e9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e9c:	4a73      	ldr	r2, [pc, #460]	; (800406c <ProcessReceivedCommand+0x614>)
 8003e9e:	6013      	str	r3, [r2, #0]
			Kd = Params[12];
 8003ea0:	4b65      	ldr	r3, [pc, #404]	; (8004038 <ProcessReceivedCommand+0x5e0>)
 8003ea2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ea4:	4a72      	ldr	r2, [pc, #456]	; (8004070 <ProcessReceivedCommand+0x618>)
 8003ea6:	6013      	str	r3, [r2, #0]
			// Send to the GUI
			char ParamBuffer[60];
			TxPCLen = sprintf(ParamBuffer,"p%.2f/%d/%d/%d/%.1f/%.2f/%.2f/%.1f/%.2f/%.2f/%.3f/%.4f/%.4fe"
 8003ea8:	4b65      	ldr	r3, [pc, #404]	; (8004040 <ProcessReceivedCommand+0x5e8>)
 8003eaa:	681b      	ldr	r3, [r3, #0]
 8003eac:	4618      	mov	r0, r3
 8003eae:	f7fc fb4b 	bl	8000548 <__aeabi_f2d>
 8003eb2:	e9c7 010c 	strd	r0, r1, [r7, #48]	; 0x30
 8003eb6:	4b63      	ldr	r3, [pc, #396]	; (8004044 <ProcessReceivedCommand+0x5ec>)
 8003eb8:	781b      	ldrb	r3, [r3, #0]
 8003eba:	461e      	mov	r6, r3
 8003ebc:	4b62      	ldr	r3, [pc, #392]	; (8004048 <ProcessReceivedCommand+0x5f0>)
 8003ebe:	881b      	ldrh	r3, [r3, #0]
 8003ec0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003ec2:	4b62      	ldr	r3, [pc, #392]	; (800404c <ProcessReceivedCommand+0x5f4>)
 8003ec4:	781b      	ldrb	r3, [r3, #0]
 8003ec6:	62bb      	str	r3, [r7, #40]	; 0x28
 8003ec8:	4b61      	ldr	r3, [pc, #388]	; (8004050 <ProcessReceivedCommand+0x5f8>)
 8003eca:	681b      	ldr	r3, [r3, #0]
 8003ecc:	4618      	mov	r0, r3
 8003ece:	f7fc fb3b 	bl	8000548 <__aeabi_f2d>
 8003ed2:	e9c7 0108 	strd	r0, r1, [r7, #32]
 8003ed6:	4b5f      	ldr	r3, [pc, #380]	; (8004054 <ProcessReceivedCommand+0x5fc>)
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	4618      	mov	r0, r3
 8003edc:	f7fc fb34 	bl	8000548 <__aeabi_f2d>
 8003ee0:	e9c7 0106 	strd	r0, r1, [r7, #24]
 8003ee4:	4b5c      	ldr	r3, [pc, #368]	; (8004058 <ProcessReceivedCommand+0x600>)
 8003ee6:	681b      	ldr	r3, [r3, #0]
 8003ee8:	4618      	mov	r0, r3
 8003eea:	f7fc fb2d 	bl	8000548 <__aeabi_f2d>
 8003eee:	e9c7 0104 	strd	r0, r1, [r7, #16]
 8003ef2:	4b5a      	ldr	r3, [pc, #360]	; (800405c <ProcessReceivedCommand+0x604>)
 8003ef4:	681b      	ldr	r3, [r3, #0]
 8003ef6:	4618      	mov	r0, r3
 8003ef8:	f7fc fb26 	bl	8000548 <__aeabi_f2d>
 8003efc:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8003f00:	4b57      	ldr	r3, [pc, #348]	; (8004060 <ProcessReceivedCommand+0x608>)
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	4618      	mov	r0, r3
 8003f06:	f7fc fb1f 	bl	8000548 <__aeabi_f2d>
 8003f0a:	e9c7 0100 	strd	r0, r1, [r7]
 8003f0e:	4b55      	ldr	r3, [pc, #340]	; (8004064 <ProcessReceivedCommand+0x60c>)
 8003f10:	681b      	ldr	r3, [r3, #0]
 8003f12:	4618      	mov	r0, r3
 8003f14:	f7fc fb18 	bl	8000548 <__aeabi_f2d>
 8003f18:	4682      	mov	sl, r0
 8003f1a:	468b      	mov	fp, r1
 8003f1c:	4b52      	ldr	r3, [pc, #328]	; (8004068 <ProcessReceivedCommand+0x610>)
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	4618      	mov	r0, r3
 8003f22:	f7fc fb11 	bl	8000548 <__aeabi_f2d>
 8003f26:	4680      	mov	r8, r0
 8003f28:	4689      	mov	r9, r1
 8003f2a:	4b50      	ldr	r3, [pc, #320]	; (800406c <ProcessReceivedCommand+0x614>)
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	4618      	mov	r0, r3
 8003f30:	f7fc fb0a 	bl	8000548 <__aeabi_f2d>
 8003f34:	4604      	mov	r4, r0
 8003f36:	460d      	mov	r5, r1
 8003f38:	4b4d      	ldr	r3, [pc, #308]	; (8004070 <ProcessReceivedCommand+0x618>)
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	4618      	mov	r0, r3
 8003f3e:	f7fc fb03 	bl	8000548 <__aeabi_f2d>
 8003f42:	4602      	mov	r2, r0
 8003f44:	460b      	mov	r3, r1
 8003f46:	f107 0038 	add.w	r0, r7, #56	; 0x38
 8003f4a:	e9cd 2314 	strd	r2, r3, [sp, #80]	; 0x50
 8003f4e:	e9cd 4512 	strd	r4, r5, [sp, #72]	; 0x48
 8003f52:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 8003f56:	e9cd ab0e 	strd	sl, fp, [sp, #56]	; 0x38
 8003f5a:	ed97 7b00 	vldr	d7, [r7]
 8003f5e:	ed8d 7b0c 	vstr	d7, [sp, #48]	; 0x30
 8003f62:	ed97 7b02 	vldr	d7, [r7, #8]
 8003f66:	ed8d 7b0a 	vstr	d7, [sp, #40]	; 0x28
 8003f6a:	ed97 7b04 	vldr	d7, [r7, #16]
 8003f6e:	ed8d 7b08 	vstr	d7, [sp, #32]
 8003f72:	ed97 7b06 	vldr	d7, [r7, #24]
 8003f76:	ed8d 7b06 	vstr	d7, [sp, #24]
 8003f7a:	ed97 7b08 	vldr	d7, [r7, #32]
 8003f7e:	ed8d 7b04 	vstr	d7, [sp, #16]
 8003f82:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8003f84:	9102      	str	r1, [sp, #8]
 8003f86:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8003f88:	9301      	str	r3, [sp, #4]
 8003f8a:	9600      	str	r6, [sp, #0]
 8003f8c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8003f90:	4938      	ldr	r1, [pc, #224]	; (8004074 <ProcessReceivedCommand+0x61c>)
 8003f92:	f006 f865 	bl	800a060 <siprintf>
 8003f96:	4603      	mov	r3, r0
 8003f98:	b2da      	uxtb	r2, r3
 8003f9a:	4b23      	ldr	r3, [pc, #140]	; (8004028 <ProcessReceivedCommand+0x5d0>)
 8003f9c:	701a      	strb	r2, [r3, #0]
	                   ,DrumRadius, PullingSpeed, StoppingTime, SampleTime, 
										 DroppingAccelDistance, DroppingAccel, DroppingDecel,
                     PullingAccelDistance, PullingAccel, PullingDecel,
										 Kp, Ki, Kd); // Combine to a string
			HAL_UART_Transmit(&huart6,(uint8_t *)ParamBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8003f9e:	4b22      	ldr	r3, [pc, #136]	; (8004028 <ProcessReceivedCommand+0x5d0>)
 8003fa0:	781b      	ldrb	r3, [r3, #0]
 8003fa2:	b29a      	uxth	r2, r3
 8003fa4:	f107 0138 	add.w	r1, r7, #56	; 0x38
 8003fa8:	23c8      	movs	r3, #200	; 0xc8
 8003faa:	4820      	ldr	r0, [pc, #128]	; (800402c <ProcessReceivedCommand+0x5d4>)
 8003fac:	f004 fb91 	bl	80086d2 <HAL_UART_Transmit>
			break;
 8003fb0:	f000 bce9 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
		
		case 11: // Set Drum Radius
			if (StartRunning) // Setting is not available while running
 8003fb4:	4b30      	ldr	r3, [pc, #192]	; (8004078 <ProcessReceivedCommand+0x620>)
 8003fb6:	781b      	ldrb	r3, [r3, #0]
 8003fb8:	2b00      	cmp	r3, #0
 8003fba:	d006      	beq.n	8003fca <ProcessReceivedCommand+0x572>
			{
				InitializeRunning (ExperimentMode);	
 8003fbc:	4b2f      	ldr	r3, [pc, #188]	; (800407c <ProcessReceivedCommand+0x624>)
 8003fbe:	781b      	ldrb	r3, [r3, #0]
 8003fc0:	4618      	mov	r0, r3
 8003fc2:	f7fe f8a3 	bl	800210c <InitializeRunning>
				break;				
 8003fc6:	f000 bcde 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				DrumRadius = MotionCode[1];
 8003fca:	4b19      	ldr	r3, [pc, #100]	; (8004030 <ProcessReceivedCommand+0x5d8>)
 8003fcc:	685b      	ldr	r3, [r3, #4]
 8003fce:	4a1c      	ldr	r2, [pc, #112]	; (8004040 <ProcessReceivedCommand+0x5e8>)
 8003fd0:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 8003fd2:	f7ff fac5 	bl	8003560 <CalculateRunningSpec>
				char DrumRadiusBuffer[10];
				TxPCLen = sprintf(DrumRadiusBuffer,"r11/%.2fe",DrumRadius);
 8003fd6:	4b1a      	ldr	r3, [pc, #104]	; (8004040 <ProcessReceivedCommand+0x5e8>)
 8003fd8:	681b      	ldr	r3, [r3, #0]
 8003fda:	4618      	mov	r0, r3
 8003fdc:	f7fc fab4 	bl	8000548 <__aeabi_f2d>
 8003fe0:	4602      	mov	r2, r0
 8003fe2:	460b      	mov	r3, r1
 8003fe4:	f507 709e 	add.w	r0, r7, #316	; 0x13c
 8003fe8:	4925      	ldr	r1, [pc, #148]	; (8004080 <ProcessReceivedCommand+0x628>)
 8003fea:	f006 f839 	bl	800a060 <siprintf>
 8003fee:	4603      	mov	r3, r0
 8003ff0:	b2da      	uxtb	r2, r3
 8003ff2:	4b0d      	ldr	r3, [pc, #52]	; (8004028 <ProcessReceivedCommand+0x5d0>)
 8003ff4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DrumRadiusBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8003ff6:	4b0c      	ldr	r3, [pc, #48]	; (8004028 <ProcessReceivedCommand+0x5d0>)
 8003ff8:	781b      	ldrb	r3, [r3, #0]
 8003ffa:	b29a      	uxth	r2, r3
 8003ffc:	f507 719e 	add.w	r1, r7, #316	; 0x13c
 8004000:	23c8      	movs	r3, #200	; 0xc8
 8004002:	480a      	ldr	r0, [pc, #40]	; (800402c <ProcessReceivedCommand+0x5d4>)
 8004004:	f004 fb65 	bl	80086d2 <HAL_UART_Transmit>
				break;
 8004008:	f000 bcbd 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
			}			
		
		case 12: // Set DroppingAccelDistance
			if (StartRunning) // Setting is not available while running
 800400c:	4b1a      	ldr	r3, [pc, #104]	; (8004078 <ProcessReceivedCommand+0x620>)
 800400e:	781b      	ldrb	r3, [r3, #0]
 8004010:	2b00      	cmp	r3, #0
 8004012:	d037      	beq.n	8004084 <ProcessReceivedCommand+0x62c>
			{
				InitializeRunning (ExperimentMode);	
 8004014:	4b19      	ldr	r3, [pc, #100]	; (800407c <ProcessReceivedCommand+0x624>)
 8004016:	781b      	ldrb	r3, [r3, #0]
 8004018:	4618      	mov	r0, r3
 800401a:	f7fe f877 	bl	800210c <InitializeRunning>
				break;
 800401e:	f000 bcb2 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
 8004022:	bf00      	nop
 8004024:	0800de20 	.word	0x0800de20
 8004028:	20000426 	.word	0x20000426
 800402c:	20000338 	.word	0x20000338
 8004030:	200004f8 	.word	0x200004f8
 8004034:	20000001 	.word	0x20000001
 8004038:	200004a4 	.word	0x200004a4
 800403c:	08040000 	.word	0x08040000
 8004040:	20000458 	.word	0x20000458
 8004044:	2000045d 	.word	0x2000045d
 8004048:	2000045e 	.word	0x2000045e
 800404c:	2000045c 	.word	0x2000045c
 8004050:	20000478 	.word	0x20000478
 8004054:	20000464 	.word	0x20000464
 8004058:	20000468 	.word	0x20000468
 800405c:	20000498 	.word	0x20000498
 8004060:	2000047c 	.word	0x2000047c
 8004064:	20000480 	.word	0x20000480
 8004068:	20000518 	.word	0x20000518
 800406c:	2000051c 	.word	0x2000051c
 8004070:	20000520 	.word	0x20000520
 8004074:	0800de28 	.word	0x0800de28
 8004078:	20000434 	.word	0x20000434
 800407c:	20000004 	.word	0x20000004
 8004080:	0800de68 	.word	0x0800de68
			}
			else
			{
				DroppingAccelDistance = MotionCode[1];
 8004084:	4bae      	ldr	r3, [pc, #696]	; (8004340 <ProcessReceivedCommand+0x8e8>)
 8004086:	685b      	ldr	r3, [r3, #4]
 8004088:	4aae      	ldr	r2, [pc, #696]	; (8004344 <ProcessReceivedCommand+0x8ec>)
 800408a:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 800408c:	f7ff fa68 	bl	8003560 <CalculateRunningSpec>
				
				char DroppingAccelDistanceBuffer[10];
				TxPCLen = sprintf(DroppingAccelDistanceBuffer,"r12/%.1fe",DroppingAccelDistance);
 8004090:	4bac      	ldr	r3, [pc, #688]	; (8004344 <ProcessReceivedCommand+0x8ec>)
 8004092:	681b      	ldr	r3, [r3, #0]
 8004094:	4618      	mov	r0, r3
 8004096:	f7fc fa57 	bl	8000548 <__aeabi_f2d>
 800409a:	4602      	mov	r2, r0
 800409c:	460b      	mov	r3, r1
 800409e:	f507 7098 	add.w	r0, r7, #304	; 0x130
 80040a2:	49a9      	ldr	r1, [pc, #676]	; (8004348 <ProcessReceivedCommand+0x8f0>)
 80040a4:	f005 ffdc 	bl	800a060 <siprintf>
 80040a8:	4603      	mov	r3, r0
 80040aa:	b2da      	uxtb	r2, r3
 80040ac:	4ba7      	ldr	r3, [pc, #668]	; (800434c <ProcessReceivedCommand+0x8f4>)
 80040ae:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelDistanceBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 80040b0:	4ba6      	ldr	r3, [pc, #664]	; (800434c <ProcessReceivedCommand+0x8f4>)
 80040b2:	781b      	ldrb	r3, [r3, #0]
 80040b4:	b29a      	uxth	r2, r3
 80040b6:	f507 7198 	add.w	r1, r7, #304	; 0x130
 80040ba:	23c8      	movs	r3, #200	; 0xc8
 80040bc:	48a4      	ldr	r0, [pc, #656]	; (8004350 <ProcessReceivedCommand+0x8f8>)
 80040be:	f004 fb08 	bl	80086d2 <HAL_UART_Transmit>
				break;
 80040c2:	f000 bc60 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
			}			
		
		case 13: // Set PullingSpeed
			// PullingSpeed is the maximum speed when homing or going to the initial Posion
			if (StartRunning) // Setting is not available while running
 80040c6:	4ba3      	ldr	r3, [pc, #652]	; (8004354 <ProcessReceivedCommand+0x8fc>)
 80040c8:	781b      	ldrb	r3, [r3, #0]
 80040ca:	2b00      	cmp	r3, #0
 80040cc:	d006      	beq.n	80040dc <ProcessReceivedCommand+0x684>
			{
				InitializeRunning (ExperimentMode);	
 80040ce:	4ba2      	ldr	r3, [pc, #648]	; (8004358 <ProcessReceivedCommand+0x900>)
 80040d0:	781b      	ldrb	r3, [r3, #0]
 80040d2:	4618      	mov	r0, r3
 80040d4:	f7fe f81a 	bl	800210c <InitializeRunning>
				break;
 80040d8:	f000 bc55 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				PullingSpeed = MotionCode[1];
 80040dc:	4b98      	ldr	r3, [pc, #608]	; (8004340 <ProcessReceivedCommand+0x8e8>)
 80040de:	edd3 7a01 	vldr	s15, [r3, #4]
 80040e2:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80040e6:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80040ea:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80040ee:	b2da      	uxtb	r2, r3
 80040f0:	4b9a      	ldr	r3, [pc, #616]	; (800435c <ProcessReceivedCommand+0x904>)
 80040f2:	701a      	strb	r2, [r3, #0]
				GoingAcceleration = 0.1*PullingSpeed/RampingGoingSpdTime; // to rad/s2
 80040f4:	4b99      	ldr	r3, [pc, #612]	; (800435c <ProcessReceivedCommand+0x904>)
 80040f6:	781b      	ldrb	r3, [r3, #0]
 80040f8:	4618      	mov	r0, r3
 80040fa:	f7fc fa13 	bl	8000524 <__aeabi_i2d>
 80040fe:	a38e      	add	r3, pc, #568	; (adr r3, 8004338 <ProcessReceivedCommand+0x8e0>)
 8004100:	e9d3 2300 	ldrd	r2, r3, [r3]
 8004104:	f7fc fa78 	bl	80005f8 <__aeabi_dmul>
 8004108:	4602      	mov	r2, r0
 800410a:	460b      	mov	r3, r1
 800410c:	4610      	mov	r0, r2
 800410e:	4619      	mov	r1, r3
 8004110:	f04f 0200 	mov.w	r2, #0
 8004114:	4b92      	ldr	r3, [pc, #584]	; (8004360 <ProcessReceivedCommand+0x908>)
 8004116:	f7fc fb99 	bl	800084c <__aeabi_ddiv>
 800411a:	4602      	mov	r2, r0
 800411c:	460b      	mov	r3, r1
 800411e:	4610      	mov	r0, r2
 8004120:	4619      	mov	r1, r3
 8004122:	f7fc fd61 	bl	8000be8 <__aeabi_d2f>
 8004126:	4603      	mov	r3, r0
 8004128:	4a8e      	ldr	r2, [pc, #568]	; (8004364 <ProcessReceivedCommand+0x90c>)
 800412a:	6013      	str	r3, [r2, #0]
				char PullingSpeedBuffer[10];
				TxPCLen = sprintf(PullingSpeedBuffer,"r13/%de",PullingSpeed);
 800412c:	4b8b      	ldr	r3, [pc, #556]	; (800435c <ProcessReceivedCommand+0x904>)
 800412e:	781b      	ldrb	r3, [r3, #0]
 8004130:	461a      	mov	r2, r3
 8004132:	f507 7392 	add.w	r3, r7, #292	; 0x124
 8004136:	498c      	ldr	r1, [pc, #560]	; (8004368 <ProcessReceivedCommand+0x910>)
 8004138:	4618      	mov	r0, r3
 800413a:	f005 ff91 	bl	800a060 <siprintf>
 800413e:	4603      	mov	r3, r0
 8004140:	b2da      	uxtb	r2, r3
 8004142:	4b82      	ldr	r3, [pc, #520]	; (800434c <ProcessReceivedCommand+0x8f4>)
 8004144:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingSpeedBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004146:	4b81      	ldr	r3, [pc, #516]	; (800434c <ProcessReceivedCommand+0x8f4>)
 8004148:	781b      	ldrb	r3, [r3, #0]
 800414a:	b29a      	uxth	r2, r3
 800414c:	f507 7192 	add.w	r1, r7, #292	; 0x124
 8004150:	23c8      	movs	r3, #200	; 0xc8
 8004152:	487f      	ldr	r0, [pc, #508]	; (8004350 <ProcessReceivedCommand+0x8f8>)
 8004154:	f004 fabd 	bl	80086d2 <HAL_UART_Transmit>
				break;
 8004158:	f000 bc15 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
			}			
		
		case 14: // also start running -> unused now
			InitializeRunning (ExperimentMode);	
 800415c:	4b7e      	ldr	r3, [pc, #504]	; (8004358 <ProcessReceivedCommand+0x900>)
 800415e:	781b      	ldrb	r3, [r3, #0]
 8004160:	4618      	mov	r0, r3
 8004162:	f7fd ffd3 	bl	800210c <InitializeRunning>
			break;
 8004166:	f000 bc0e 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
		case 15: // Set DroppingAccel
			if (StartRunning)
 800416a:	4b7a      	ldr	r3, [pc, #488]	; (8004354 <ProcessReceivedCommand+0x8fc>)
 800416c:	781b      	ldrb	r3, [r3, #0]
 800416e:	2b00      	cmp	r3, #0
 8004170:	d006      	beq.n	8004180 <ProcessReceivedCommand+0x728>
			{
				InitializeRunning (ExperimentMode);
 8004172:	4b79      	ldr	r3, [pc, #484]	; (8004358 <ProcessReceivedCommand+0x900>)
 8004174:	781b      	ldrb	r3, [r3, #0]
 8004176:	4618      	mov	r0, r3
 8004178:	f7fd ffc8 	bl	800210c <InitializeRunning>
				break;
 800417c:	f000 bc03 	b.w	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				DroppingAccel = MotionCode[1];
 8004180:	4b6f      	ldr	r3, [pc, #444]	; (8004340 <ProcessReceivedCommand+0x8e8>)
 8004182:	685b      	ldr	r3, [r3, #4]
 8004184:	4a79      	ldr	r2, [pc, #484]	; (800436c <ProcessReceivedCommand+0x914>)
 8004186:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 8004188:	f7ff f9ea 	bl	8003560 <CalculateRunningSpec>
				
				char DroppingAccelBuffer[10];
				TxPCLen = sprintf(DroppingAccelBuffer,"r15/%.3fe",DroppingAccel);
 800418c:	4b77      	ldr	r3, [pc, #476]	; (800436c <ProcessReceivedCommand+0x914>)
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	4618      	mov	r0, r3
 8004192:	f7fc f9d9 	bl	8000548 <__aeabi_f2d>
 8004196:	4602      	mov	r2, r0
 8004198:	460b      	mov	r3, r1
 800419a:	f507 708c 	add.w	r0, r7, #280	; 0x118
 800419e:	4974      	ldr	r1, [pc, #464]	; (8004370 <ProcessReceivedCommand+0x918>)
 80041a0:	f005 ff5e 	bl	800a060 <siprintf>
 80041a4:	4603      	mov	r3, r0
 80041a6:	b2da      	uxtb	r2, r3
 80041a8:	4b68      	ldr	r3, [pc, #416]	; (800434c <ProcessReceivedCommand+0x8f4>)
 80041aa:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingAccelBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 80041ac:	4b67      	ldr	r3, [pc, #412]	; (800434c <ProcessReceivedCommand+0x8f4>)
 80041ae:	781b      	ldrb	r3, [r3, #0]
 80041b0:	b29a      	uxth	r2, r3
 80041b2:	f507 718c 	add.w	r1, r7, #280	; 0x118
 80041b6:	23c8      	movs	r3, #200	; 0xc8
 80041b8:	4865      	ldr	r0, [pc, #404]	; (8004350 <ProcessReceivedCommand+0x8f8>)
 80041ba:	f004 fa8a 	bl	80086d2 <HAL_UART_Transmit>
				break;
 80041be:	e3e2      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}		
		case 16: // Set SampleTime
			if (StartRunning) // When the experiment is running, disable this fcn
 80041c0:	4b64      	ldr	r3, [pc, #400]	; (8004354 <ProcessReceivedCommand+0x8fc>)
 80041c2:	781b      	ldrb	r3, [r3, #0]
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d005      	beq.n	80041d4 <ProcessReceivedCommand+0x77c>
			{
				InitializeRunning (ExperimentMode);	
 80041c8:	4b63      	ldr	r3, [pc, #396]	; (8004358 <ProcessReceivedCommand+0x900>)
 80041ca:	781b      	ldrb	r3, [r3, #0]
 80041cc:	4618      	mov	r0, r3
 80041ce:	f7fd ff9d 	bl	800210c <InitializeRunning>
				break;
 80041d2:	e3d8      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				SampleTime = MotionCode[1];
 80041d4:	4b5a      	ldr	r3, [pc, #360]	; (8004340 <ProcessReceivedCommand+0x8e8>)
 80041d6:	edd3 7a01 	vldr	s15, [r3, #4]
 80041da:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80041de:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 80041e2:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 80041e6:	b2da      	uxtb	r2, r3
 80041e8:	4b62      	ldr	r3, [pc, #392]	; (8004374 <ProcessReceivedCommand+0x91c>)
 80041ea:	701a      	strb	r2, [r3, #0]
				if (SampleTime<= 20) // ms Set value range, 20:100ms
 80041ec:	4b61      	ldr	r3, [pc, #388]	; (8004374 <ProcessReceivedCommand+0x91c>)
 80041ee:	781b      	ldrb	r3, [r3, #0]
 80041f0:	2b14      	cmp	r3, #20
 80041f2:	d802      	bhi.n	80041fa <ProcessReceivedCommand+0x7a2>
				{
					SampleTime = 20;
 80041f4:	4b5f      	ldr	r3, [pc, #380]	; (8004374 <ProcessReceivedCommand+0x91c>)
 80041f6:	2214      	movs	r2, #20
 80041f8:	701a      	strb	r2, [r3, #0]
				}
				if (SampleTime >= 100) // ms
 80041fa:	4b5e      	ldr	r3, [pc, #376]	; (8004374 <ProcessReceivedCommand+0x91c>)
 80041fc:	781b      	ldrb	r3, [r3, #0]
 80041fe:	2b63      	cmp	r3, #99	; 0x63
 8004200:	d902      	bls.n	8004208 <ProcessReceivedCommand+0x7b0>
				{
					SampleTime = 100;
 8004202:	4b5c      	ldr	r3, [pc, #368]	; (8004374 <ProcessReceivedCommand+0x91c>)
 8004204:	2264      	movs	r2, #100	; 0x64
 8004206:	701a      	strb	r2, [r3, #0]
				}
				char SammpleTimeBuffer[10];
				TxPCLen = sprintf(SammpleTimeBuffer,"r16/%de",SampleTime);
 8004208:	4b5a      	ldr	r3, [pc, #360]	; (8004374 <ProcessReceivedCommand+0x91c>)
 800420a:	781b      	ldrb	r3, [r3, #0]
 800420c:	461a      	mov	r2, r3
 800420e:	f507 7386 	add.w	r3, r7, #268	; 0x10c
 8004212:	4959      	ldr	r1, [pc, #356]	; (8004378 <ProcessReceivedCommand+0x920>)
 8004214:	4618      	mov	r0, r3
 8004216:	f005 ff23 	bl	800a060 <siprintf>
 800421a:	4603      	mov	r3, r0
 800421c:	b2da      	uxtb	r2, r3
 800421e:	4b4b      	ldr	r3, [pc, #300]	; (800434c <ProcessReceivedCommand+0x8f4>)
 8004220:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SammpleTimeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004222:	4b4a      	ldr	r3, [pc, #296]	; (800434c <ProcessReceivedCommand+0x8f4>)
 8004224:	781b      	ldrb	r3, [r3, #0]
 8004226:	b29a      	uxth	r2, r3
 8004228:	f507 7186 	add.w	r1, r7, #268	; 0x10c
 800422c:	23c8      	movs	r3, #200	; 0xc8
 800422e:	4848      	ldr	r0, [pc, #288]	; (8004350 <ProcessReceivedCommand+0x8f8>)
 8004230:	f004 fa4f 	bl	80086d2 <HAL_UART_Transmit>
				break;
 8004234:	e3a7      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}			
		
		case 17: // Reset MCU
			HAL_NVIC_SystemReset();
 8004236:	f002 f968 	bl	800650a <HAL_NVIC_SystemReset>
			break;
 800423a:	e3a4      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
		case 18: // Servo Enable on/off
			if (MotionCode[1] == 1) // Servo Enable ON
 800423c:	4b40      	ldr	r3, [pc, #256]	; (8004340 <ProcessReceivedCommand+0x8e8>)
 800423e:	edd3 7a01 	vldr	s15, [r3, #4]
 8004242:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 8004246:	eef4 7a47 	vcmp.f32	s15, s14
 800424a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800424e:	d105      	bne.n	800425c <ProcessReceivedCommand+0x804>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_SET); // Servo enable on
 8004250:	2201      	movs	r2, #1
 8004252:	2110      	movs	r1, #16
 8004254:	4849      	ldr	r0, [pc, #292]	; (800437c <ProcessReceivedCommand+0x924>)
 8004256:	f002 fe93 	bl	8006f80 <HAL_GPIO_WritePin>
			else
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
			break;
 800425a:	e394      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
				HAL_GPIO_WritePin(SerVoReset_PC4_18_GPIO_Port, SerVoReset_PC4_18_Pin, GPIO_PIN_RESET); // Servo enable OFF
 800425c:	2200      	movs	r2, #0
 800425e:	2110      	movs	r1, #16
 8004260:	4846      	ldr	r0, [pc, #280]	; (800437c <ProcessReceivedCommand+0x924>)
 8004262:	f002 fe8d 	bl	8006f80 <HAL_GPIO_WritePin>
			break;
 8004266:	e38e      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
		case 20: // Set Step Pulse Cmd
			if (StartRunning)
 8004268:	4b3a      	ldr	r3, [pc, #232]	; (8004354 <ProcessReceivedCommand+0x8fc>)
 800426a:	781b      	ldrb	r3, [r3, #0]
 800426c:	2b00      	cmp	r3, #0
 800426e:	d005      	beq.n	800427c <ProcessReceivedCommand+0x824>
			{
				InitializeRunning (ExperimentMode);	
 8004270:	4b39      	ldr	r3, [pc, #228]	; (8004358 <ProcessReceivedCommand+0x900>)
 8004272:	781b      	ldrb	r3, [r3, #0]
 8004274:	4618      	mov	r0, r3
 8004276:	f7fd ff49 	bl	800210c <InitializeRunning>
				break;
 800427a:	e384      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				StepPulseCmd = MotionCode[2];
 800427c:	4b30      	ldr	r3, [pc, #192]	; (8004340 <ProcessReceivedCommand+0x8e8>)
 800427e:	edd3 7a02 	vldr	s15, [r3, #8]
 8004282:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8004286:	ee17 2a90 	vmov	r2, s15
 800428a:	4b3d      	ldr	r3, [pc, #244]	; (8004380 <ProcessReceivedCommand+0x928>)
 800428c:	601a      	str	r2, [r3, #0]
				PulseCmd = 0;
 800428e:	4b3d      	ldr	r3, [pc, #244]	; (8004384 <ProcessReceivedCommand+0x92c>)
 8004290:	2200      	movs	r2, #0
 8004292:	601a      	str	r2, [r3, #0]
				if (MotionCode[1] == 1) // CW, +
 8004294:	4b2a      	ldr	r3, [pc, #168]	; (8004340 <ProcessReceivedCommand+0x8e8>)
 8004296:	edd3 7a01 	vldr	s15, [r3, #4]
 800429a:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 800429e:	eef4 7a47 	vcmp.f32	s15, s14
 80042a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80042a6:	d11e      	bne.n	80042e6 <ProcessReceivedCommand+0x88e>
				{		
					Direction = true;
 80042a8:	4b37      	ldr	r3, [pc, #220]	; (8004388 <ProcessReceivedCommand+0x930>)
 80042aa:	2201      	movs	r2, #1
 80042ac:	701a      	strb	r2, [r3, #0]
					PRIsToggled = false;
 80042ae:	4b37      	ldr	r3, [pc, #220]	; (800438c <ProcessReceivedCommand+0x934>)
 80042b0:	2200      	movs	r2, #0
 80042b2:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = true;
 80042b4:	4b36      	ldr	r3, [pc, #216]	; (8004390 <ProcessReceivedCommand+0x938>)
 80042b6:	2201      	movs	r2, #1
 80042b8:	701a      	strb	r2, [r3, #0]
					// Calculate Timer3CountPeriod to generate pulse
					Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80042ba:	4b36      	ldr	r3, [pc, #216]	; (8004394 <ProcessReceivedCommand+0x93c>)
 80042bc:	781b      	ldrb	r3, [r3, #0]
 80042be:	4a36      	ldr	r2, [pc, #216]	; (8004398 <ProcessReceivedCommand+0x940>)
 80042c0:	8812      	ldrh	r2, [r2, #0]
 80042c2:	ee07 2a90 	vmov	s15, r2
 80042c6:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80042ca:	eeb0 0a67 	vmov.f32	s0, s15
 80042ce:	4618      	mov	r0, r3
 80042d0:	f7fd fc76 	bl	8001bc0 <CalculateTimer3Period>
 80042d4:	4603      	mov	r3, r0
 80042d6:	b29a      	uxth	r2, r3
 80042d8:	4b30      	ldr	r3, [pc, #192]	; (800439c <ProcessReceivedCommand+0x944>)
 80042da:	801a      	strh	r2, [r3, #0]
					//Timer3CountPeriod = (int)((float)(120000000.0/((JogSpeed)*(float)EncoderResolution)) + 0.5);
					//Start Running
					StartPulseGenerating();
 80042dc:	f7fd fc2c 	bl	8001b38 <StartPulseGenerating>
					DisableSTOP();
 80042e0:	f7fc ffc2 	bl	8001268 <DisableSTOP>
					//Timer3CountPeriod = (int)((float)(120000000.0/((JogSpeed)*(float)EncoderResolution)) + 0.5);
					//Start Running
					StartPulseGenerating();
					DisableSTOP();
				}		  
				break;
 80042e4:	e34f      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
					Direction = false;
 80042e6:	4b28      	ldr	r3, [pc, #160]	; (8004388 <ProcessReceivedCommand+0x930>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	701a      	strb	r2, [r3, #0]
					PRIsToggled = true;
 80042ec:	4b27      	ldr	r3, [pc, #156]	; (800438c <ProcessReceivedCommand+0x934>)
 80042ee:	2201      	movs	r2, #1
 80042f0:	701a      	strb	r2, [r3, #0]
					IsStepPulseCmd = true;
 80042f2:	4b27      	ldr	r3, [pc, #156]	; (8004390 <ProcessReceivedCommand+0x938>)
 80042f4:	2201      	movs	r2, #1
 80042f6:	701a      	strb	r2, [r3, #0]
					Timer3CountPeriod = CalculateTimer3Period(MotorDriver,JogSpeed);
 80042f8:	4b26      	ldr	r3, [pc, #152]	; (8004394 <ProcessReceivedCommand+0x93c>)
 80042fa:	781b      	ldrb	r3, [r3, #0]
 80042fc:	4a26      	ldr	r2, [pc, #152]	; (8004398 <ProcessReceivedCommand+0x940>)
 80042fe:	8812      	ldrh	r2, [r2, #0]
 8004300:	ee07 2a90 	vmov	s15, r2
 8004304:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8004308:	eeb0 0a67 	vmov.f32	s0, s15
 800430c:	4618      	mov	r0, r3
 800430e:	f7fd fc57 	bl	8001bc0 <CalculateTimer3Period>
 8004312:	4603      	mov	r3, r0
 8004314:	b29a      	uxth	r2, r3
 8004316:	4b21      	ldr	r3, [pc, #132]	; (800439c <ProcessReceivedCommand+0x944>)
 8004318:	801a      	strh	r2, [r3, #0]
					StartPulseGenerating();
 800431a:	f7fd fc0d 	bl	8001b38 <StartPulseGenerating>
					DisableSTOP();
 800431e:	f7fc ffa3 	bl	8001268 <DisableSTOP>
				break;
 8004322:	e330      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
		case 27: // Set Running Mode
			if(StartRunning) // Setting is not available while running
 8004324:	4b0b      	ldr	r3, [pc, #44]	; (8004354 <ProcessReceivedCommand+0x8fc>)
 8004326:	781b      	ldrb	r3, [r3, #0]
 8004328:	2b00      	cmp	r3, #0
 800432a:	d039      	beq.n	80043a0 <ProcessReceivedCommand+0x948>
			{
				InitializeRunning(ExperimentMode);
 800432c:	4b0a      	ldr	r3, [pc, #40]	; (8004358 <ProcessReceivedCommand+0x900>)
 800432e:	781b      	ldrb	r3, [r3, #0]
 8004330:	4618      	mov	r0, r3
 8004332:	f7fd feeb 	bl	800210c <InitializeRunning>
				break;
 8004336:	e326      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
 8004338:	9999999a 	.word	0x9999999a
 800433c:	3fb99999 	.word	0x3fb99999
 8004340:	200004f8 	.word	0x200004f8
 8004344:	20000478 	.word	0x20000478
 8004348:	0800de74 	.word	0x0800de74
 800434c:	20000426 	.word	0x20000426
 8004350:	20000338 	.word	0x20000338
 8004354:	20000434 	.word	0x20000434
 8004358:	20000004 	.word	0x20000004
 800435c:	2000045d 	.word	0x2000045d
 8004360:	40080000 	.word	0x40080000
 8004364:	20000460 	.word	0x20000460
 8004368:	0800de80 	.word	0x0800de80
 800436c:	20000464 	.word	0x20000464
 8004370:	0800de88 	.word	0x0800de88
 8004374:	2000045c 	.word	0x2000045c
 8004378:	0800de94 	.word	0x0800de94
 800437c:	40020800 	.word	0x40020800
 8004380:	200004ec 	.word	0x200004ec
 8004384:	200004f0 	.word	0x200004f0
 8004388:	20000435 	.word	0x20000435
 800438c:	20000446 	.word	0x20000446
 8004390:	2000043c 	.word	0x2000043c
 8004394:	20000003 	.word	0x20000003
 8004398:	20000006 	.word	0x20000006
 800439c:	20000450 	.word	0x20000450
			}
			else
			{
				if (MotionCode[1] == 1) // RunningMode = true => Automatic Running
 80043a0:	4ba5      	ldr	r3, [pc, #660]	; (8004638 <ProcessReceivedCommand+0xbe0>)
 80043a2:	edd3 7a01 	vldr	s15, [r3, #4]
 80043a6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80043aa:	eef4 7a47 	vcmp.f32	s15, s14
 80043ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80043b2:	d103      	bne.n	80043bc <ProcessReceivedCommand+0x964>
				{
					RunningMode = true; // Automatic	
 80043b4:	4ba1      	ldr	r3, [pc, #644]	; (800463c <ProcessReceivedCommand+0xbe4>)
 80043b6:	2201      	movs	r2, #1
 80043b8:	701a      	strb	r2, [r3, #0]
 80043ba:	e002      	b.n	80043c2 <ProcessReceivedCommand+0x96a>
				}				 			
				else
				{
					RunningMode = false; // Manual
 80043bc:	4b9f      	ldr	r3, [pc, #636]	; (800463c <ProcessReceivedCommand+0xbe4>)
 80043be:	2200      	movs	r2, #0
 80043c0:	701a      	strb	r2, [r3, #0]
				}					
				char SammpleTimeBuffer[10];
				TxPCLen = sprintf(SammpleTimeBuffer,"g27/%de",RunningMode);
 80043c2:	4b9e      	ldr	r3, [pc, #632]	; (800463c <ProcessReceivedCommand+0xbe4>)
 80043c4:	781b      	ldrb	r3, [r3, #0]
 80043c6:	461a      	mov	r2, r3
 80043c8:	f507 7380 	add.w	r3, r7, #256	; 0x100
 80043cc:	499c      	ldr	r1, [pc, #624]	; (8004640 <ProcessReceivedCommand+0xbe8>)
 80043ce:	4618      	mov	r0, r3
 80043d0:	f005 fe46 	bl	800a060 <siprintf>
 80043d4:	4603      	mov	r3, r0
 80043d6:	b2da      	uxtb	r2, r3
 80043d8:	4b9a      	ldr	r3, [pc, #616]	; (8004644 <ProcessReceivedCommand+0xbec>)
 80043da:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SammpleTimeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 80043dc:	4b99      	ldr	r3, [pc, #612]	; (8004644 <ProcessReceivedCommand+0xbec>)
 80043de:	781b      	ldrb	r3, [r3, #0]
 80043e0:	b29a      	uxth	r2, r3
 80043e2:	f507 7180 	add.w	r1, r7, #256	; 0x100
 80043e6:	23c8      	movs	r3, #200	; 0xc8
 80043e8:	4897      	ldr	r0, [pc, #604]	; (8004648 <ProcessReceivedCommand+0xbf0>)
 80043ea:	f004 f972 	bl	80086d2 <HAL_UART_Transmit>
				break;
 80043ee:	e2ca      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			
		case 28: // Stop jog move up/down in Position Jog control;
			if (StartRunning) // Setting is not available while running
 80043f0:	4b96      	ldr	r3, [pc, #600]	; (800464c <ProcessReceivedCommand+0xbf4>)
 80043f2:	781b      	ldrb	r3, [r3, #0]
 80043f4:	2b00      	cmp	r3, #0
 80043f6:	d005      	beq.n	8004404 <ProcessReceivedCommand+0x9ac>
			{
				InitializeRunning(ExperimentMode);
 80043f8:	4b95      	ldr	r3, [pc, #596]	; (8004650 <ProcessReceivedCommand+0xbf8>)
 80043fa:	781b      	ldrb	r3, [r3, #0]
 80043fc:	4618      	mov	r0, r3
 80043fe:	f7fd fe85 	bl	800210c <InitializeRunning>
				break;
 8004402:	e2c0      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				StopPulseGenerating();
 8004404:	f7fd fb7a 	bl	8001afc <StopPulseGenerating>
				JoggingMoveUp = false;
 8004408:	4b92      	ldr	r3, [pc, #584]	; (8004654 <ProcessReceivedCommand+0xbfc>)
 800440a:	2200      	movs	r2, #0
 800440c:	701a      	strb	r2, [r3, #0]
				//HAL_TIM_IC_Stop()
				break;
 800440e:	e2ba      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
//				}
//				break;
//			}
			
		case 31: // Set Experiment Mode
			if (StartRunning) // Setting is not available while running
 8004410:	4b8e      	ldr	r3, [pc, #568]	; (800464c <ProcessReceivedCommand+0xbf4>)
 8004412:	781b      	ldrb	r3, [r3, #0]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d005      	beq.n	8004424 <ProcessReceivedCommand+0x9cc>
			{
				InitializeRunning(ExperimentMode);
 8004418:	4b8d      	ldr	r3, [pc, #564]	; (8004650 <ProcessReceivedCommand+0xbf8>)
 800441a:	781b      	ldrb	r3, [r3, #0]
 800441c:	4618      	mov	r0, r3
 800441e:	f7fd fe75 	bl	800210c <InitializeRunning>
				break;
 8004422:	e2b0      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				ExperimentMode = MotionCode[1]; // 1=Dropping Mode;2 = Pulling; 3= Pulling->Dropping
 8004424:	4b84      	ldr	r3, [pc, #528]	; (8004638 <ProcessReceivedCommand+0xbe0>)
 8004426:	edd3 7a01 	vldr	s15, [r3, #4]
 800442a:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 800442e:	edc7 7a0c 	vstr	s15, [r7, #48]	; 0x30
 8004432:	f897 3030 	ldrb.w	r3, [r7, #48]	; 0x30
 8004436:	b2da      	uxtb	r2, r3
 8004438:	4b85      	ldr	r3, [pc, #532]	; (8004650 <ProcessReceivedCommand+0xbf8>)
 800443a:	701a      	strb	r2, [r3, #0]
				char SetModeBuff[8];
				TxPCLen = sprintf(SetModeBuff,"m%de",ExperimentMode);
 800443c:	4b84      	ldr	r3, [pc, #528]	; (8004650 <ProcessReceivedCommand+0xbf8>)
 800443e:	781b      	ldrb	r3, [r3, #0]
 8004440:	461a      	mov	r2, r3
 8004442:	f107 03f8 	add.w	r3, r7, #248	; 0xf8
 8004446:	4984      	ldr	r1, [pc, #528]	; (8004658 <ProcessReceivedCommand+0xc00>)
 8004448:	4618      	mov	r0, r3
 800444a:	f005 fe09 	bl	800a060 <siprintf>
 800444e:	4603      	mov	r3, r0
 8004450:	b2da      	uxtb	r2, r3
 8004452:	4b7c      	ldr	r3, [pc, #496]	; (8004644 <ProcessReceivedCommand+0xbec>)
 8004454:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SetModeBuff,TxPCLen,100); // Send to uart6 to check the params are set or not	
 8004456:	4b7b      	ldr	r3, [pc, #492]	; (8004644 <ProcessReceivedCommand+0xbec>)
 8004458:	781b      	ldrb	r3, [r3, #0]
 800445a:	b29a      	uxth	r2, r3
 800445c:	f107 01f8 	add.w	r1, r7, #248	; 0xf8
 8004460:	2364      	movs	r3, #100	; 0x64
 8004462:	4879      	ldr	r0, [pc, #484]	; (8004648 <ProcessReceivedCommand+0xbf0>)
 8004464:	f004 f935 	bl	80086d2 <HAL_UART_Transmit>
				break;
 8004468:	e28d      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			
		case 32: // Set Pulling Accelerating Distance; Pulling Mode
			if (StartRunning) // Setting is not available while running
 800446a:	4b78      	ldr	r3, [pc, #480]	; (800464c <ProcessReceivedCommand+0xbf4>)
 800446c:	781b      	ldrb	r3, [r3, #0]
 800446e:	2b00      	cmp	r3, #0
 8004470:	d005      	beq.n	800447e <ProcessReceivedCommand+0xa26>
			{
				InitializeRunning(ExperimentMode);
 8004472:	4b77      	ldr	r3, [pc, #476]	; (8004650 <ProcessReceivedCommand+0xbf8>)
 8004474:	781b      	ldrb	r3, [r3, #0]
 8004476:	4618      	mov	r0, r3
 8004478:	f7fd fe48 	bl	800210c <InitializeRunning>
				break;
 800447c:	e283      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				PullingAccelDistance = MotionCode[1];
 800447e:	4b6e      	ldr	r3, [pc, #440]	; (8004638 <ProcessReceivedCommand+0xbe0>)
 8004480:	685b      	ldr	r3, [r3, #4]
 8004482:	4a76      	ldr	r2, [pc, #472]	; (800465c <ProcessReceivedCommand+0xc04>)
 8004484:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 8004486:	f7ff f86b 	bl	8003560 <CalculateRunningSpec>
				
				char PullingDistanceBuffer[10];
				TxPCLen = sprintf(PullingDistanceBuffer,"r32/%.1fe",PullingAccelDistance);
 800448a:	4b74      	ldr	r3, [pc, #464]	; (800465c <ProcessReceivedCommand+0xc04>)
 800448c:	681b      	ldr	r3, [r3, #0]
 800448e:	4618      	mov	r0, r3
 8004490:	f7fc f85a 	bl	8000548 <__aeabi_f2d>
 8004494:	4602      	mov	r2, r0
 8004496:	460b      	mov	r3, r1
 8004498:	f107 00ec 	add.w	r0, r7, #236	; 0xec
 800449c:	4970      	ldr	r1, [pc, #448]	; (8004660 <ProcessReceivedCommand+0xc08>)
 800449e:	f005 fddf 	bl	800a060 <siprintf>
 80044a2:	4603      	mov	r3, r0
 80044a4:	b2da      	uxtb	r2, r3
 80044a6:	4b67      	ldr	r3, [pc, #412]	; (8004644 <ProcessReceivedCommand+0xbec>)
 80044a8:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingDistanceBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not			
 80044aa:	4b66      	ldr	r3, [pc, #408]	; (8004644 <ProcessReceivedCommand+0xbec>)
 80044ac:	781b      	ldrb	r3, [r3, #0]
 80044ae:	b29a      	uxth	r2, r3
 80044b0:	f107 01ec 	add.w	r1, r7, #236	; 0xec
 80044b4:	2364      	movs	r3, #100	; 0x64
 80044b6:	4864      	ldr	r0, [pc, #400]	; (8004648 <ProcessReceivedCommand+0xbf0>)
 80044b8:	f004 f90b 	bl	80086d2 <HAL_UART_Transmit>
				break;
 80044bc:	e263      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			
		case 33: // Set Pulling AccRef in Pulling Mode
			if (StartRunning)// Setting is not available while running
 80044be:	4b63      	ldr	r3, [pc, #396]	; (800464c <ProcessReceivedCommand+0xbf4>)
 80044c0:	781b      	ldrb	r3, [r3, #0]
 80044c2:	2b00      	cmp	r3, #0
 80044c4:	d005      	beq.n	80044d2 <ProcessReceivedCommand+0xa7a>
			{
				InitializeRunning(ExperimentMode);
 80044c6:	4b62      	ldr	r3, [pc, #392]	; (8004650 <ProcessReceivedCommand+0xbf8>)
 80044c8:	781b      	ldrb	r3, [r3, #0]
 80044ca:	4618      	mov	r0, r3
 80044cc:	f7fd fe1e 	bl	800210c <InitializeRunning>
				break;
 80044d0:	e259      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				PullingAccel = MotionCode[1];
 80044d2:	4b59      	ldr	r3, [pc, #356]	; (8004638 <ProcessReceivedCommand+0xbe0>)
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	4a63      	ldr	r2, [pc, #396]	; (8004664 <ProcessReceivedCommand+0xc0c>)
 80044d8:	6013      	str	r3, [r2, #0]
				
				CalculateRunningSpec();
 80044da:	f7ff f841 	bl	8003560 <CalculateRunningSpec>
				
				char AccRefPullingBuffer[10];
				TxPCLen = sprintf(AccRefPullingBuffer,"r33/%.2fe",PullingAccel);
 80044de:	4b61      	ldr	r3, [pc, #388]	; (8004664 <ProcessReceivedCommand+0xc0c>)
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	4618      	mov	r0, r3
 80044e4:	f7fc f830 	bl	8000548 <__aeabi_f2d>
 80044e8:	4602      	mov	r2, r0
 80044ea:	460b      	mov	r3, r1
 80044ec:	f107 00e0 	add.w	r0, r7, #224	; 0xe0
 80044f0:	495d      	ldr	r1, [pc, #372]	; (8004668 <ProcessReceivedCommand+0xc10>)
 80044f2:	f005 fdb5 	bl	800a060 <siprintf>
 80044f6:	4603      	mov	r3, r0
 80044f8:	b2da      	uxtb	r2, r3
 80044fa:	4b52      	ldr	r3, [pc, #328]	; (8004644 <ProcessReceivedCommand+0xbec>)
 80044fc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)AccRefPullingBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not
 80044fe:	4b51      	ldr	r3, [pc, #324]	; (8004644 <ProcessReceivedCommand+0xbec>)
 8004500:	781b      	ldrb	r3, [r3, #0]
 8004502:	b29a      	uxth	r2, r3
 8004504:	f107 01e0 	add.w	r1, r7, #224	; 0xe0
 8004508:	2364      	movs	r3, #100	; 0x64
 800450a:	484f      	ldr	r0, [pc, #316]	; (8004648 <ProcessReceivedCommand+0xbf0>)
 800450c:	f004 f8e1 	bl	80086d2 <HAL_UART_Transmit>
				break;
 8004510:	e239      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			
		case 34: // Set DroppingDecel, m/s2
			if (StartRunning)// Setting is not available while running
 8004512:	4b4e      	ldr	r3, [pc, #312]	; (800464c <ProcessReceivedCommand+0xbf4>)
 8004514:	781b      	ldrb	r3, [r3, #0]
 8004516:	2b00      	cmp	r3, #0
 8004518:	d005      	beq.n	8004526 <ProcessReceivedCommand+0xace>
			{
				InitializeRunning(ExperimentMode);				
 800451a:	4b4d      	ldr	r3, [pc, #308]	; (8004650 <ProcessReceivedCommand+0xbf8>)
 800451c:	781b      	ldrb	r3, [r3, #0]
 800451e:	4618      	mov	r0, r3
 8004520:	f7fd fdf4 	bl	800210c <InitializeRunning>
				
				char DroppingDecelBuffer[10];
				TxPCLen = sprintf(DroppingDecelBuffer,"r34/%.2fe",DroppingDecel);
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}
			break;		
 8004524:	e22f      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
				DroppingDecel = MotionCode[1];
 8004526:	4b44      	ldr	r3, [pc, #272]	; (8004638 <ProcessReceivedCommand+0xbe0>)
 8004528:	685b      	ldr	r3, [r3, #4]
 800452a:	4a50      	ldr	r2, [pc, #320]	; (800466c <ProcessReceivedCommand+0xc14>)
 800452c:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 800452e:	f7ff f817 	bl	8003560 <CalculateRunningSpec>
				TxPCLen = sprintf(DroppingDecelBuffer,"r34/%.2fe",DroppingDecel);
 8004532:	4b4e      	ldr	r3, [pc, #312]	; (800466c <ProcessReceivedCommand+0xc14>)
 8004534:	681b      	ldr	r3, [r3, #0]
 8004536:	4618      	mov	r0, r3
 8004538:	f7fc f806 	bl	8000548 <__aeabi_f2d>
 800453c:	4602      	mov	r2, r0
 800453e:	460b      	mov	r3, r1
 8004540:	f107 00d4 	add.w	r0, r7, #212	; 0xd4
 8004544:	494a      	ldr	r1, [pc, #296]	; (8004670 <ProcessReceivedCommand+0xc18>)
 8004546:	f005 fd8b 	bl	800a060 <siprintf>
 800454a:	4603      	mov	r3, r0
 800454c:	b2da      	uxtb	r2, r3
 800454e:	4b3d      	ldr	r3, [pc, #244]	; (8004644 <ProcessReceivedCommand+0xbec>)
 8004550:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DroppingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 8004552:	4b3c      	ldr	r3, [pc, #240]	; (8004644 <ProcessReceivedCommand+0xbec>)
 8004554:	781b      	ldrb	r3, [r3, #0]
 8004556:	b29a      	uxth	r2, r3
 8004558:	f107 01d4 	add.w	r1, r7, #212	; 0xd4
 800455c:	2364      	movs	r3, #100	; 0x64
 800455e:	483a      	ldr	r0, [pc, #232]	; (8004648 <ProcessReceivedCommand+0xbf0>)
 8004560:	f004 f8b7 	bl	80086d2 <HAL_UART_Transmit>
			break;		
 8004564:	e20f      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			
		case 35: // Set Pulling Deceleration in m/s2
			if (StartRunning)// Setting is not available while running
 8004566:	4b39      	ldr	r3, [pc, #228]	; (800464c <ProcessReceivedCommand+0xbf4>)
 8004568:	781b      	ldrb	r3, [r3, #0]
 800456a:	2b00      	cmp	r3, #0
 800456c:	d005      	beq.n	800457a <ProcessReceivedCommand+0xb22>
			{
				InitializeRunning(ExperimentMode);				
 800456e:	4b38      	ldr	r3, [pc, #224]	; (8004650 <ProcessReceivedCommand+0xbf8>)
 8004570:	781b      	ldrb	r3, [r3, #0]
 8004572:	4618      	mov	r0, r3
 8004574:	f7fd fdca 	bl	800210c <InitializeRunning>
				
				char PullingDecelBuffer[10];
				TxPCLen = sprintf(PullingDecelBuffer,"r35/%.2fe",PullingDecel);
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}
			break;
 8004578:	e205      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
				PullingDecel = MotionCode[1];
 800457a:	4b2f      	ldr	r3, [pc, #188]	; (8004638 <ProcessReceivedCommand+0xbe0>)
 800457c:	685b      	ldr	r3, [r3, #4]
 800457e:	4a3d      	ldr	r2, [pc, #244]	; (8004674 <ProcessReceivedCommand+0xc1c>)
 8004580:	6013      	str	r3, [r2, #0]
				CalculateRunningSpec();
 8004582:	f7fe ffed 	bl	8003560 <CalculateRunningSpec>
				TxPCLen = sprintf(PullingDecelBuffer,"r35/%.2fe",PullingDecel);
 8004586:	4b3b      	ldr	r3, [pc, #236]	; (8004674 <ProcessReceivedCommand+0xc1c>)
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	4618      	mov	r0, r3
 800458c:	f7fb ffdc 	bl	8000548 <__aeabi_f2d>
 8004590:	4602      	mov	r2, r0
 8004592:	460b      	mov	r3, r1
 8004594:	f107 00c8 	add.w	r0, r7, #200	; 0xc8
 8004598:	4937      	ldr	r1, [pc, #220]	; (8004678 <ProcessReceivedCommand+0xc20>)
 800459a:	f005 fd61 	bl	800a060 <siprintf>
 800459e:	4603      	mov	r3, r0
 80045a0:	b2da      	uxtb	r2, r3
 80045a2:	4b28      	ldr	r3, [pc, #160]	; (8004644 <ProcessReceivedCommand+0xbec>)
 80045a4:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)PullingDecelBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 80045a6:	4b27      	ldr	r3, [pc, #156]	; (8004644 <ProcessReceivedCommand+0xbec>)
 80045a8:	781b      	ldrb	r3, [r3, #0]
 80045aa:	b29a      	uxth	r2, r3
 80045ac:	f107 01c8 	add.w	r1, r7, #200	; 0xc8
 80045b0:	2364      	movs	r3, #100	; 0x64
 80045b2:	4825      	ldr	r0, [pc, #148]	; (8004648 <ProcessReceivedCommand+0xbf0>)
 80045b4:	f004 f88d 	bl	80086d2 <HAL_UART_Transmit>
			break;
 80045b8:	e1e5      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			
		case 36: // Resource
			break;
			
		case 37: // Set Stopping Time
			if (StartRunning)// Setting is not available while running
 80045ba:	4b24      	ldr	r3, [pc, #144]	; (800464c <ProcessReceivedCommand+0xbf4>)
 80045bc:	781b      	ldrb	r3, [r3, #0]
 80045be:	2b00      	cmp	r3, #0
 80045c0:	d005      	beq.n	80045ce <ProcessReceivedCommand+0xb76>
			{
				InitializeRunning(ExperimentMode);
 80045c2:	4b23      	ldr	r3, [pc, #140]	; (8004650 <ProcessReceivedCommand+0xbf8>)
 80045c4:	781b      	ldrb	r3, [r3, #0]
 80045c6:	4618      	mov	r0, r3
 80045c8:	f7fd fda0 	bl	800210c <InitializeRunning>
				break;
 80045cc:	e1db      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				StoppingTime = MotionCode[1];
 80045ce:	4b1a      	ldr	r3, [pc, #104]	; (8004638 <ProcessReceivedCommand+0xbe0>)
 80045d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80045d4:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 80045d8:	ee17 3a90 	vmov	r3, s15
 80045dc:	b29a      	uxth	r2, r3
 80045de:	4b27      	ldr	r3, [pc, #156]	; (800467c <ProcessReceivedCommand+0xc24>)
 80045e0:	801a      	strh	r2, [r3, #0]
				if (StoppingTime <= 2000) // ms
 80045e2:	4b26      	ldr	r3, [pc, #152]	; (800467c <ProcessReceivedCommand+0xc24>)
 80045e4:	881b      	ldrh	r3, [r3, #0]
 80045e6:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80045ea:	d803      	bhi.n	80045f4 <ProcessReceivedCommand+0xb9c>
				{
					StoppingTime = 2000; // min = 2000 ms
 80045ec:	4b23      	ldr	r3, [pc, #140]	; (800467c <ProcessReceivedCommand+0xc24>)
 80045ee:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 80045f2:	801a      	strh	r2, [r3, #0]
				}
				if (StoppingTime >= 10000)
 80045f4:	4b21      	ldr	r3, [pc, #132]	; (800467c <ProcessReceivedCommand+0xc24>)
 80045f6:	881b      	ldrh	r3, [r3, #0]
 80045f8:	f242 720f 	movw	r2, #9999	; 0x270f
 80045fc:	4293      	cmp	r3, r2
 80045fe:	d903      	bls.n	8004608 <ProcessReceivedCommand+0xbb0>
				{
					StoppingTime = 10000; // max = 10000 ms
 8004600:	4b1e      	ldr	r3, [pc, #120]	; (800467c <ProcessReceivedCommand+0xc24>)
 8004602:	f242 7210 	movw	r2, #10000	; 0x2710
 8004606:	801a      	strh	r2, [r3, #0]
				}
				char StoppingTimeBuffer[10];
				TxPCLen = sprintf(StoppingTimeBuffer,"r37/%de",StoppingTime);
 8004608:	4b1c      	ldr	r3, [pc, #112]	; (800467c <ProcessReceivedCommand+0xc24>)
 800460a:	881b      	ldrh	r3, [r3, #0]
 800460c:	461a      	mov	r2, r3
 800460e:	f107 03bc 	add.w	r3, r7, #188	; 0xbc
 8004612:	491b      	ldr	r1, [pc, #108]	; (8004680 <ProcessReceivedCommand+0xc28>)
 8004614:	4618      	mov	r0, r3
 8004616:	f005 fd23 	bl	800a060 <siprintf>
 800461a:	4603      	mov	r3, r0
 800461c:	b2da      	uxtb	r2, r3
 800461e:	4b09      	ldr	r3, [pc, #36]	; (8004644 <ProcessReceivedCommand+0xbec>)
 8004620:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)StoppingTimeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 8004622:	4b08      	ldr	r3, [pc, #32]	; (8004644 <ProcessReceivedCommand+0xbec>)
 8004624:	781b      	ldrb	r3, [r3, #0]
 8004626:	b29a      	uxth	r2, r3
 8004628:	f107 01bc 	add.w	r1, r7, #188	; 0xbc
 800462c:	23c8      	movs	r3, #200	; 0xc8
 800462e:	4806      	ldr	r0, [pc, #24]	; (8004648 <ProcessReceivedCommand+0xbf0>)
 8004630:	f004 f84f 	bl	80086d2 <HAL_UART_Transmit>
				break;
 8004634:	e1a7      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
 8004636:	bf00      	nop
 8004638:	200004f8 	.word	0x200004f8
 800463c:	20000445 	.word	0x20000445
 8004640:	0800de9c 	.word	0x0800de9c
 8004644:	20000426 	.word	0x20000426
 8004648:	20000338 	.word	0x20000338
 800464c:	20000434 	.word	0x20000434
 8004650:	20000004 	.word	0x20000004
 8004654:	20000441 	.word	0x20000441
 8004658:	0800dea4 	.word	0x0800dea4
 800465c:	20000498 	.word	0x20000498
 8004660:	0800deac 	.word	0x0800deac
 8004664:	2000047c 	.word	0x2000047c
 8004668:	0800deb8 	.word	0x0800deb8
 800466c:	20000468 	.word	0x20000468
 8004670:	0800dec4 	.word	0x0800dec4
 8004674:	20000480 	.word	0x20000480
 8004678:	0800ded0 	.word	0x0800ded0
 800467c:	2000045e 	.word	0x2000045e
 8004680:	0800dedc 	.word	0x0800dedc
			}
		case 38: // Homing task
			if (StartRunning)// Setting is not available while running
 8004684:	4ba6      	ldr	r3, [pc, #664]	; (8004920 <ProcessReceivedCommand+0xec8>)
 8004686:	781b      	ldrb	r3, [r3, #0]
 8004688:	2b00      	cmp	r3, #0
 800468a:	d005      	beq.n	8004698 <ProcessReceivedCommand+0xc40>
			{
				InitializeRunning(ExperimentMode);
 800468c:	4ba5      	ldr	r3, [pc, #660]	; (8004924 <ProcessReceivedCommand+0xecc>)
 800468e:	781b      	ldrb	r3, [r3, #0]
 8004690:	4618      	mov	r0, r3
 8004692:	f7fd fd3b 	bl	800210c <InitializeRunning>
				break;
 8004696:	e176      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				IsHoming = true;
 8004698:	4ba3      	ldr	r3, [pc, #652]	; (8004928 <ProcessReceivedCommand+0xed0>)
 800469a:	2201      	movs	r2, #1
 800469c:	701a      	strb	r2, [r3, #0]
				//Timer3CountPeriod = CalculateTimer3Period(MotorDriver,PullingSpeed);
				//Timer3CountPeriod = (int)((float)(120000000.0/((PullingSpeed)*(float)EncoderResolution)) + 0.5); // Set going down speed
				Direction = false; // false = move up, true = move down			
 800469e:	4ba3      	ldr	r3, [pc, #652]	; (800492c <ProcessReceivedCommand+0xed4>)
 80046a0:	2200      	movs	r2, #0
 80046a2:	701a      	strb	r2, [r3, #0]
				PRIsToggled = true; // false = Dropping Down. change to true/false to change the direction: pulling or dropping
 80046a4:	4ba2      	ldr	r3, [pc, #648]	; (8004930 <ProcessReceivedCommand+0xed8>)
 80046a6:	2201      	movs	r2, #1
 80046a8:	701a      	strb	r2, [r3, #0]
				JoggingMoveUp = true;
 80046aa:	4ba2      	ldr	r3, [pc, #648]	; (8004934 <ProcessReceivedCommand+0xedc>)
 80046ac:	2201      	movs	r2, #1
 80046ae:	701a      	strb	r2, [r3, #0]
				DisableSTOP(); // Disable the stop
 80046b0:	f7fc fdda 	bl	8001268 <DisableSTOP>
				StartPulseGenerating();
 80046b4:	f7fd fa40 	bl	8001b38 <StartPulseGenerating>
			}
			break;
 80046b8:	e165      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			
		case 39: // Set Driver type, FDA7000 or ASDA A3
			if (StartRunning)// Setting is not available while running
 80046ba:	4b99      	ldr	r3, [pc, #612]	; (8004920 <ProcessReceivedCommand+0xec8>)
 80046bc:	781b      	ldrb	r3, [r3, #0]
 80046be:	2b00      	cmp	r3, #0
 80046c0:	d005      	beq.n	80046ce <ProcessReceivedCommand+0xc76>
			{
				InitializeRunning(ExperimentMode);
 80046c2:	4b98      	ldr	r3, [pc, #608]	; (8004924 <ProcessReceivedCommand+0xecc>)
 80046c4:	781b      	ldrb	r3, [r3, #0]
 80046c6:	4618      	mov	r0, r3
 80046c8:	f7fd fd20 	bl	800210c <InitializeRunning>
				break;
 80046cc:	e15b      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			}
			else
			{
				if (MotionCode[1] == 1) // FDA7000
 80046ce:	4b9a      	ldr	r3, [pc, #616]	; (8004938 <ProcessReceivedCommand+0xee0>)
 80046d0:	edd3 7a01 	vldr	s15, [r3, #4]
 80046d4:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80046d8:	eef4 7a47 	vcmp.f32	s15, s14
 80046dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80046e0:	d10c      	bne.n	80046fc <ProcessReceivedCommand+0xca4>
				{
					MotorDriver = true;
 80046e2:	4b96      	ldr	r3, [pc, #600]	; (800493c <ProcessReceivedCommand+0xee4>)
 80046e4:	2201      	movs	r2, #1
 80046e6:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 29; // For FDA7000, read 5 register => receive 25 bytes
 80046e8:	4b95      	ldr	r3, [pc, #596]	; (8004940 <ProcessReceivedCommand+0xee8>)
 80046ea:	221d      	movs	r2, #29
 80046ec:	701a      	strb	r2, [r3, #0]
					EncoderResolution = HigenEncoderResolution;
 80046ee:	4b95      	ldr	r3, [pc, #596]	; (8004944 <ProcessReceivedCommand+0xeec>)
 80046f0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80046f4:	801a      	strh	r2, [r3, #0]
					InitParams ();
 80046f6:	f7ff f93b 	bl	8003970 <InitParams>
 80046fa:	e00b      	b.n	8004714 <ProcessReceivedCommand+0xcbc>
				}
				else // ASDA A3
				{
					MotorDriver = false;
 80046fc:	4b8f      	ldr	r3, [pc, #572]	; (800493c <ProcessReceivedCommand+0xee4>)
 80046fe:	2200      	movs	r2, #0
 8004700:	701a      	strb	r2, [r3, #0]
					NoOfBytes = 17;
 8004702:	4b8f      	ldr	r3, [pc, #572]	; (8004940 <ProcessReceivedCommand+0xee8>)
 8004704:	2211      	movs	r2, #17
 8004706:	701a      	strb	r2, [r3, #0]
					EncoderResolution = AsdaEncoderResolution;
 8004708:	4b8e      	ldr	r3, [pc, #568]	; (8004944 <ProcessReceivedCommand+0xeec>)
 800470a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800470e:	801a      	strh	r2, [r3, #0]
					InitParams ();
 8004710:	f7ff f92e 	bl	8003970 <InitParams>
					// For ASDA Drier, read 1 register => receive 9 bytes	
					// read 2 registers => receive 13 bytes
				}
				char DriverTypeBuffer[10];
				TxPCLen = sprintf(DriverTypeBuffer,"g39/%de",MotorDriver);
 8004714:	4b89      	ldr	r3, [pc, #548]	; (800493c <ProcessReceivedCommand+0xee4>)
 8004716:	781b      	ldrb	r3, [r3, #0]
 8004718:	461a      	mov	r2, r3
 800471a:	f107 03b0 	add.w	r3, r7, #176	; 0xb0
 800471e:	498a      	ldr	r1, [pc, #552]	; (8004948 <ProcessReceivedCommand+0xef0>)
 8004720:	4618      	mov	r0, r3
 8004722:	f005 fc9d 	bl	800a060 <siprintf>
 8004726:	4603      	mov	r3, r0
 8004728:	b2da      	uxtb	r2, r3
 800472a:	4b88      	ldr	r3, [pc, #544]	; (800494c <ProcessReceivedCommand+0xef4>)
 800472c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)DriverTypeBuffer,TxPCLen,200); // Send to uart6 to check the params are set or not
 800472e:	4b87      	ldr	r3, [pc, #540]	; (800494c <ProcessReceivedCommand+0xef4>)
 8004730:	781b      	ldrb	r3, [r3, #0]
 8004732:	b29a      	uxth	r2, r3
 8004734:	f107 01b0 	add.w	r1, r7, #176	; 0xb0
 8004738:	23c8      	movs	r3, #200	; 0xc8
 800473a:	4885      	ldr	r0, [pc, #532]	; (8004950 <ProcessReceivedCommand+0xef8>)
 800473c:	f003 ffc9 	bl	80086d2 <HAL_UART_Transmit>
			}			
			break;
 8004740:	e121      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
		
		case 41: // Set Kp
			if (StartRunning)// Setting is not available while running
 8004742:	4b77      	ldr	r3, [pc, #476]	; (8004920 <ProcessReceivedCommand+0xec8>)
 8004744:	781b      	ldrb	r3, [r3, #0]
 8004746:	2b00      	cmp	r3, #0
 8004748:	d005      	beq.n	8004756 <ProcessReceivedCommand+0xcfe>
			{
				InitializeRunning(ExperimentMode);				
 800474a:	4b76      	ldr	r3, [pc, #472]	; (8004924 <ProcessReceivedCommand+0xecc>)
 800474c:	781b      	ldrb	r3, [r3, #0]
 800474e:	4618      	mov	r0, r3
 8004750:	f7fd fcdc 	bl	800210c <InitializeRunning>
				char KpBuffer[10];
				TxPCLen = sprintf(KpBuffer,"r41/%.3fe",Kp);
				HAL_UART_Transmit(&huart6,(uint8_t *)KpBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}
			
			break;
 8004754:	e117      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
				Kp = MotionCode[1];
 8004756:	4b78      	ldr	r3, [pc, #480]	; (8004938 <ProcessReceivedCommand+0xee0>)
 8004758:	685b      	ldr	r3, [r3, #4]
 800475a:	4a7e      	ldr	r2, [pc, #504]	; (8004954 <ProcessReceivedCommand+0xefc>)
 800475c:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(KpBuffer,"r41/%.3fe",Kp);
 800475e:	4b7d      	ldr	r3, [pc, #500]	; (8004954 <ProcessReceivedCommand+0xefc>)
 8004760:	681b      	ldr	r3, [r3, #0]
 8004762:	4618      	mov	r0, r3
 8004764:	f7fb fef0 	bl	8000548 <__aeabi_f2d>
 8004768:	4602      	mov	r2, r0
 800476a:	460b      	mov	r3, r1
 800476c:	f107 00a4 	add.w	r0, r7, #164	; 0xa4
 8004770:	4979      	ldr	r1, [pc, #484]	; (8004958 <ProcessReceivedCommand+0xf00>)
 8004772:	f005 fc75 	bl	800a060 <siprintf>
 8004776:	4603      	mov	r3, r0
 8004778:	b2da      	uxtb	r2, r3
 800477a:	4b74      	ldr	r3, [pc, #464]	; (800494c <ProcessReceivedCommand+0xef4>)
 800477c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)KpBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 800477e:	4b73      	ldr	r3, [pc, #460]	; (800494c <ProcessReceivedCommand+0xef4>)
 8004780:	781b      	ldrb	r3, [r3, #0]
 8004782:	b29a      	uxth	r2, r3
 8004784:	f107 01a4 	add.w	r1, r7, #164	; 0xa4
 8004788:	2364      	movs	r3, #100	; 0x64
 800478a:	4871      	ldr	r0, [pc, #452]	; (8004950 <ProcessReceivedCommand+0xef8>)
 800478c:	f003 ffa1 	bl	80086d2 <HAL_UART_Transmit>
			break;
 8004790:	e0f9      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
		
		case 42: // Set Ki
			if (StartRunning)// Setting is not available while running
 8004792:	4b63      	ldr	r3, [pc, #396]	; (8004920 <ProcessReceivedCommand+0xec8>)
 8004794:	781b      	ldrb	r3, [r3, #0]
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <ProcessReceivedCommand+0xd4e>
			{
				InitializeRunning(ExperimentMode);				
 800479a:	4b62      	ldr	r3, [pc, #392]	; (8004924 <ProcessReceivedCommand+0xecc>)
 800479c:	781b      	ldrb	r3, [r3, #0]
 800479e:	4618      	mov	r0, r3
 80047a0:	f7fd fcb4 	bl	800210c <InitializeRunning>
				
				char KiBuffer[10];
				TxPCLen = sprintf(KiBuffer,"r42/%.4fe",Ki);
				HAL_UART_Transmit(&huart6,(uint8_t *)KiBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 80047a4:	e0ef      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
				Ki = MotionCode[1];
 80047a6:	4b64      	ldr	r3, [pc, #400]	; (8004938 <ProcessReceivedCommand+0xee0>)
 80047a8:	685b      	ldr	r3, [r3, #4]
 80047aa:	4a6c      	ldr	r2, [pc, #432]	; (800495c <ProcessReceivedCommand+0xf04>)
 80047ac:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(KiBuffer,"r42/%.4fe",Ki);
 80047ae:	4b6b      	ldr	r3, [pc, #428]	; (800495c <ProcessReceivedCommand+0xf04>)
 80047b0:	681b      	ldr	r3, [r3, #0]
 80047b2:	4618      	mov	r0, r3
 80047b4:	f7fb fec8 	bl	8000548 <__aeabi_f2d>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	f107 0098 	add.w	r0, r7, #152	; 0x98
 80047c0:	4967      	ldr	r1, [pc, #412]	; (8004960 <ProcessReceivedCommand+0xf08>)
 80047c2:	f005 fc4d 	bl	800a060 <siprintf>
 80047c6:	4603      	mov	r3, r0
 80047c8:	b2da      	uxtb	r2, r3
 80047ca:	4b60      	ldr	r3, [pc, #384]	; (800494c <ProcessReceivedCommand+0xef4>)
 80047cc:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)KiBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 80047ce:	4b5f      	ldr	r3, [pc, #380]	; (800494c <ProcessReceivedCommand+0xef4>)
 80047d0:	781b      	ldrb	r3, [r3, #0]
 80047d2:	b29a      	uxth	r2, r3
 80047d4:	f107 0198 	add.w	r1, r7, #152	; 0x98
 80047d8:	2364      	movs	r3, #100	; 0x64
 80047da:	485d      	ldr	r0, [pc, #372]	; (8004950 <ProcessReceivedCommand+0xef8>)
 80047dc:	f003 ff79 	bl	80086d2 <HAL_UART_Transmit>
			break;
 80047e0:	e0d1      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			
		case 43: //Set Kd
			if (StartRunning)// Setting is not available while running
 80047e2:	4b4f      	ldr	r3, [pc, #316]	; (8004920 <ProcessReceivedCommand+0xec8>)
 80047e4:	781b      	ldrb	r3, [r3, #0]
 80047e6:	2b00      	cmp	r3, #0
 80047e8:	d005      	beq.n	80047f6 <ProcessReceivedCommand+0xd9e>
			{
				InitializeRunning(ExperimentMode);				
 80047ea:	4b4e      	ldr	r3, [pc, #312]	; (8004924 <ProcessReceivedCommand+0xecc>)
 80047ec:	781b      	ldrb	r3, [r3, #0]
 80047ee:	4618      	mov	r0, r3
 80047f0:	f7fd fc8c 	bl	800210c <InitializeRunning>
				
				char KdBuffer[10];
				TxPCLen = sprintf(KdBuffer,"r43/%.4fe",Kd);
				HAL_UART_Transmit(&huart6,(uint8_t *)KdBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 80047f4:	e0c7      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
				Kd = MotionCode[1];
 80047f6:	4b50      	ldr	r3, [pc, #320]	; (8004938 <ProcessReceivedCommand+0xee0>)
 80047f8:	685b      	ldr	r3, [r3, #4]
 80047fa:	4a5a      	ldr	r2, [pc, #360]	; (8004964 <ProcessReceivedCommand+0xf0c>)
 80047fc:	6013      	str	r3, [r2, #0]
				TxPCLen = sprintf(KdBuffer,"r43/%.4fe",Kd);
 80047fe:	4b59      	ldr	r3, [pc, #356]	; (8004964 <ProcessReceivedCommand+0xf0c>)
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4618      	mov	r0, r3
 8004804:	f7fb fea0 	bl	8000548 <__aeabi_f2d>
 8004808:	4602      	mov	r2, r0
 800480a:	460b      	mov	r3, r1
 800480c:	f107 008c 	add.w	r0, r7, #140	; 0x8c
 8004810:	4955      	ldr	r1, [pc, #340]	; (8004968 <ProcessReceivedCommand+0xf10>)
 8004812:	f005 fc25 	bl	800a060 <siprintf>
 8004816:	4603      	mov	r3, r0
 8004818:	b2da      	uxtb	r2, r3
 800481a:	4b4c      	ldr	r3, [pc, #304]	; (800494c <ProcessReceivedCommand+0xef4>)
 800481c:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)KdBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 800481e:	4b4b      	ldr	r3, [pc, #300]	; (800494c <ProcessReceivedCommand+0xef4>)
 8004820:	781b      	ldrb	r3, [r3, #0]
 8004822:	b29a      	uxth	r2, r3
 8004824:	f107 018c 	add.w	r1, r7, #140	; 0x8c
 8004828:	2364      	movs	r3, #100	; 0x64
 800482a:	4849      	ldr	r0, [pc, #292]	; (8004950 <ProcessReceivedCommand+0xef8>)
 800482c:	f003 ff51 	bl	80086d2 <HAL_UART_Transmit>
			break;
 8004830:	e0a9      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
		
		case 46: // Set origin (home) position
			OriginPulse = MotorEncPulse;
 8004832:	4b4e      	ldr	r3, [pc, #312]	; (800496c <ProcessReceivedCommand+0xf14>)
 8004834:	681b      	ldr	r3, [r3, #0]
 8004836:	4a4e      	ldr	r2, [pc, #312]	; (8004970 <ProcessReceivedCommand+0xf18>)
 8004838:	6013      	str	r3, [r2, #0]
			break;
 800483a:	e0a4      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
		
		case 47: // Set open/Closed loop control Mode
			if (StartRunning)// Setting is not available while running
 800483c:	4b38      	ldr	r3, [pc, #224]	; (8004920 <ProcessReceivedCommand+0xec8>)
 800483e:	781b      	ldrb	r3, [r3, #0]
 8004840:	2b00      	cmp	r3, #0
 8004842:	d005      	beq.n	8004850 <ProcessReceivedCommand+0xdf8>
			{
				InitializeRunning(ExperimentMode);				
 8004844:	4b37      	ldr	r3, [pc, #220]	; (8004924 <ProcessReceivedCommand+0xecc>)
 8004846:	781b      	ldrb	r3, [r3, #0]
 8004848:	4618      	mov	r0, r3
 800484a:	f7fd fc5f 	bl	800210c <InitializeRunning>
				
				char ControlLoopBuffer[10];
				TxPCLen = sprintf(ControlLoopBuffer,"g47/%de",IsOpenLoopControl);
				HAL_UART_Transmit(&huart6,(uint8_t *)ControlLoopBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 800484e:	e09a      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
				if(MotionCode[1] == 0) // Set to Closed loop control
 8004850:	4b39      	ldr	r3, [pc, #228]	; (8004938 <ProcessReceivedCommand+0xee0>)
 8004852:	edd3 7a01 	vldr	s15, [r3, #4]
 8004856:	eef5 7a40 	vcmp.f32	s15, #0.0
 800485a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800485e:	d103      	bne.n	8004868 <ProcessReceivedCommand+0xe10>
					IsOpenLoopControl = false;
 8004860:	4b44      	ldr	r3, [pc, #272]	; (8004974 <ProcessReceivedCommand+0xf1c>)
 8004862:	2200      	movs	r2, #0
 8004864:	701a      	strb	r2, [r3, #0]
 8004866:	e002      	b.n	800486e <ProcessReceivedCommand+0xe16>
					IsOpenLoopControl = true;
 8004868:	4b42      	ldr	r3, [pc, #264]	; (8004974 <ProcessReceivedCommand+0xf1c>)
 800486a:	2201      	movs	r2, #1
 800486c:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(ControlLoopBuffer,"g47/%de",IsOpenLoopControl);
 800486e:	4b41      	ldr	r3, [pc, #260]	; (8004974 <ProcessReceivedCommand+0xf1c>)
 8004870:	781b      	ldrb	r3, [r3, #0]
 8004872:	461a      	mov	r2, r3
 8004874:	f107 0380 	add.w	r3, r7, #128	; 0x80
 8004878:	493f      	ldr	r1, [pc, #252]	; (8004978 <ProcessReceivedCommand+0xf20>)
 800487a:	4618      	mov	r0, r3
 800487c:	f005 fbf0 	bl	800a060 <siprintf>
 8004880:	4603      	mov	r3, r0
 8004882:	b2da      	uxtb	r2, r3
 8004884:	4b31      	ldr	r3, [pc, #196]	; (800494c <ProcessReceivedCommand+0xef4>)
 8004886:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)ControlLoopBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 8004888:	4b30      	ldr	r3, [pc, #192]	; (800494c <ProcessReceivedCommand+0xef4>)
 800488a:	781b      	ldrb	r3, [r3, #0]
 800488c:	b29a      	uxth	r2, r3
 800488e:	f107 0180 	add.w	r1, r7, #128	; 0x80
 8004892:	2364      	movs	r3, #100	; 0x64
 8004894:	482e      	ldr	r0, [pc, #184]	; (8004950 <ProcessReceivedCommand+0xef8>)
 8004896:	f003 ff1c 	bl	80086d2 <HAL_UART_Transmit>
			break;
 800489a:	e074      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			
		case 48: // turn on/off the software upper limit
			if (StartRunning)// Setting is not available while running
 800489c:	4b20      	ldr	r3, [pc, #128]	; (8004920 <ProcessReceivedCommand+0xec8>)
 800489e:	781b      	ldrb	r3, [r3, #0]
 80048a0:	2b00      	cmp	r3, #0
 80048a2:	d005      	beq.n	80048b0 <ProcessReceivedCommand+0xe58>
			{
				InitializeRunning(ExperimentMode);				
 80048a4:	4b1f      	ldr	r3, [pc, #124]	; (8004924 <ProcessReceivedCommand+0xecc>)
 80048a6:	781b      	ldrb	r3, [r3, #0]
 80048a8:	4618      	mov	r0, r3
 80048aa:	f7fd fc2f 	bl	800210c <InitializeRunning>
				
				char SoftWareLimitBuffer[10];
				TxPCLen = sprintf(SoftWareLimitBuffer,"g48/%de",SoftWareLimit);
				HAL_UART_Transmit(&huart6,(uint8_t *)SoftWareLimitBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
			}			
			break;
 80048ae:	e06a      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
				if(MotionCode[1] == 1) // turn on software limit
 80048b0:	4b21      	ldr	r3, [pc, #132]	; (8004938 <ProcessReceivedCommand+0xee0>)
 80048b2:	edd3 7a01 	vldr	s15, [r3, #4]
 80048b6:	eeb7 7a00 	vmov.f32	s14, #112	; 0x3f800000  1.0
 80048ba:	eef4 7a47 	vcmp.f32	s15, s14
 80048be:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80048c2:	d103      	bne.n	80048cc <ProcessReceivedCommand+0xe74>
					SoftWareLimit = true;
 80048c4:	4b2d      	ldr	r3, [pc, #180]	; (800497c <ProcessReceivedCommand+0xf24>)
 80048c6:	2201      	movs	r2, #1
 80048c8:	701a      	strb	r2, [r3, #0]
 80048ca:	e002      	b.n	80048d2 <ProcessReceivedCommand+0xe7a>
					SoftWareLimit = false;
 80048cc:	4b2b      	ldr	r3, [pc, #172]	; (800497c <ProcessReceivedCommand+0xf24>)
 80048ce:	2200      	movs	r2, #0
 80048d0:	701a      	strb	r2, [r3, #0]
				TxPCLen = sprintf(SoftWareLimitBuffer,"g48/%de",SoftWareLimit);
 80048d2:	4b2a      	ldr	r3, [pc, #168]	; (800497c <ProcessReceivedCommand+0xf24>)
 80048d4:	781b      	ldrb	r3, [r3, #0]
 80048d6:	461a      	mov	r2, r3
 80048d8:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80048dc:	4928      	ldr	r1, [pc, #160]	; (8004980 <ProcessReceivedCommand+0xf28>)
 80048de:	4618      	mov	r0, r3
 80048e0:	f005 fbbe 	bl	800a060 <siprintf>
 80048e4:	4603      	mov	r3, r0
 80048e6:	b2da      	uxtb	r2, r3
 80048e8:	4b18      	ldr	r3, [pc, #96]	; (800494c <ProcessReceivedCommand+0xef4>)
 80048ea:	701a      	strb	r2, [r3, #0]
				HAL_UART_Transmit(&huart6,(uint8_t *)SoftWareLimitBuffer,TxPCLen,100); // Send to uart6 to check the params are set or not				
 80048ec:	4b17      	ldr	r3, [pc, #92]	; (800494c <ProcessReceivedCommand+0xef4>)
 80048ee:	781b      	ldrb	r3, [r3, #0]
 80048f0:	b29a      	uxth	r2, r3
 80048f2:	f107 0174 	add.w	r1, r7, #116	; 0x74
 80048f6:	2364      	movs	r3, #100	; 0x64
 80048f8:	4815      	ldr	r0, [pc, #84]	; (8004950 <ProcessReceivedCommand+0xef8>)
 80048fa:	f003 feea 	bl	80086d2 <HAL_UART_Transmit>
			break;
 80048fe:	e042      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
		default:
			if (StartRunning)// Keep running
 8004900:	4b07      	ldr	r3, [pc, #28]	; (8004920 <ProcessReceivedCommand+0xec8>)
 8004902:	781b      	ldrb	r3, [r3, #0]
 8004904:	2b00      	cmp	r3, #0
 8004906:	d03d      	beq.n	8004984 <ProcessReceivedCommand+0xf2c>
			{
				InitializeRunning(ExperimentMode);
 8004908:	4b06      	ldr	r3, [pc, #24]	; (8004924 <ProcessReceivedCommand+0xecc>)
 800490a:	781b      	ldrb	r3, [r3, #0]
 800490c:	4618      	mov	r0, r3
 800490e:	f7fd fbfd 	bl	800210c <InitializeRunning>
				break;
 8004912:	e038      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			break;
 8004914:	bf00      	nop
 8004916:	e036      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			break;
 8004918:	bf00      	nop
 800491a:	e034      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
			break;
 800491c:	bf00      	nop
 800491e:	e032      	b.n	8004986 <ProcessReceivedCommand+0xf2e>
 8004920:	20000434 	.word	0x20000434
 8004924:	20000004 	.word	0x20000004
 8004928:	20000443 	.word	0x20000443
 800492c:	20000435 	.word	0x20000435
 8004930:	20000446 	.word	0x20000446
 8004934:	20000441 	.word	0x20000441
 8004938:	200004f8 	.word	0x200004f8
 800493c:	20000003 	.word	0x20000003
 8004940:	20000000 	.word	0x20000000
 8004944:	20000008 	.word	0x20000008
 8004948:	0800dee4 	.word	0x0800dee4
 800494c:	20000426 	.word	0x20000426
 8004950:	20000338 	.word	0x20000338
 8004954:	20000518 	.word	0x20000518
 8004958:	0800deec 	.word	0x0800deec
 800495c:	2000051c 	.word	0x2000051c
 8004960:	0800def8 	.word	0x0800def8
 8004964:	20000520 	.word	0x20000520
 8004968:	0800df04 	.word	0x0800df04
 800496c:	200004e0 	.word	0x200004e0
 8004970:	200004e4 	.word	0x200004e4
 8004974:	20000444 	.word	0x20000444
 8004978:	0800df10 	.word	0x0800df10
 800497c:	20000005 	.word	0x20000005
 8004980:	0800df18 	.word	0x0800df18
			}
			else
			{
				break;
 8004984:	bf00      	nop
			}					
	}
}
 8004986:	bf00      	nop
 8004988:	f507 77b2 	add.w	r7, r7, #356	; 0x164
 800498c:	46bd      	mov	sp, r7
 800498e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004992:	bf00      	nop

08004994 <HAL_UART_RxCpltCallback>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) // Callback function when a receiving complete
{
 8004994:	b580      	push	{r7, lr}
 8004996:	b082      	sub	sp, #8
 8004998:	af00      	add	r7, sp, #0
 800499a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  // UNUSED(huart);
	
	// BEGIN UART6 Receiving
		if (huart->Instance==USART6) // If it is uart6, UI communication
 800499c:	687b      	ldr	r3, [r7, #4]
 800499e:	681b      	ldr	r3, [r3, #0]
 80049a0:	4a42      	ldr	r2, [pc, #264]	; (8004aac <HAL_UART_RxCpltCallback+0x118>)
 80049a2:	4293      	cmp	r3, r2
 80049a4:	d121      	bne.n	80049ea <HAL_UART_RxCpltCallback+0x56>
		{
			if(RxPCData!=EndChar) // read up to the ending char
 80049a6:	4b42      	ldr	r3, [pc, #264]	; (8004ab0 <HAL_UART_RxCpltCallback+0x11c>)
 80049a8:	781b      	ldrb	r3, [r3, #0]
 80049aa:	2224      	movs	r2, #36	; 0x24
 80049ac:	4293      	cmp	r3, r2
 80049ae:	d016      	beq.n	80049de <HAL_UART_RxCpltCallback+0x4a>
			{
				if (RxPCData != NULL) // remove the null character
 80049b0:	4b3f      	ldr	r3, [pc, #252]	; (8004ab0 <HAL_UART_RxCpltCallback+0x11c>)
 80049b2:	781b      	ldrb	r3, [r3, #0]
 80049b4:	2b00      	cmp	r3, #0
 80049b6:	d018      	beq.n	80049ea <HAL_UART_RxCpltCallback+0x56>
				{
					RxPCBuff[_rxPCIndex]=RxPCData;// Copy the data to buffer
 80049b8:	4b3e      	ldr	r3, [pc, #248]	; (8004ab4 <HAL_UART_RxCpltCallback+0x120>)
 80049ba:	781b      	ldrb	r3, [r3, #0]
 80049bc:	461a      	mov	r2, r3
 80049be:	4b3c      	ldr	r3, [pc, #240]	; (8004ab0 <HAL_UART_RxCpltCallback+0x11c>)
 80049c0:	7819      	ldrb	r1, [r3, #0]
 80049c2:	4b3d      	ldr	r3, [pc, #244]	; (8004ab8 <HAL_UART_RxCpltCallback+0x124>)
 80049c4:	5499      	strb	r1, [r3, r2]
				  _rxPCIndex++;
 80049c6:	4b3b      	ldr	r3, [pc, #236]	; (8004ab4 <HAL_UART_RxCpltCallback+0x120>)
 80049c8:	781b      	ldrb	r3, [r3, #0]
 80049ca:	3301      	adds	r3, #1
 80049cc:	b2da      	uxtb	r2, r3
 80049ce:	4b39      	ldr	r3, [pc, #228]	; (8004ab4 <HAL_UART_RxCpltCallback+0x120>)
 80049d0:	701a      	strb	r2, [r3, #0]
					HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 80049d2:	2201      	movs	r2, #1
 80049d4:	4936      	ldr	r1, [pc, #216]	; (8004ab0 <HAL_UART_RxCpltCallback+0x11c>)
 80049d6:	4839      	ldr	r0, [pc, #228]	; (8004abc <HAL_UART_RxCpltCallback+0x128>)
 80049d8:	f003 ff0d 	bl	80087f6 <HAL_UART_Receive_IT>
 80049dc:	e005      	b.n	80049ea <HAL_UART_RxCpltCallback+0x56>
				}		
			}
			else //if(RxPCData==EndChar)
			{								
				_rxPCIndex=0;
 80049de:	4b35      	ldr	r3, [pc, #212]	; (8004ab4 <HAL_UART_RxCpltCallback+0x120>)
 80049e0:	2200      	movs	r2, #0
 80049e2:	701a      	strb	r2, [r3, #0]
				RxUart6_Cpl_Flag=true; // reading completed				
 80049e4:	4b36      	ldr	r3, [pc, #216]	; (8004ac0 <HAL_UART_RxCpltCallback+0x12c>)
 80049e6:	2201      	movs	r2, #1
 80049e8:	701a      	strb	r2, [r3, #0]
		}
	// END UART6
		
		//BEGIN UART5 = HAL_UART_Receive_IT============================================
		/// Use this part
		if (huart->Instance==UART5) // If it is uart5, driver communication
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	681b      	ldr	r3, [r3, #0]
 80049ee:	4a35      	ldr	r2, [pc, #212]	; (8004ac4 <HAL_UART_RxCpltCallback+0x130>)
 80049f0:	4293      	cmp	r3, r2
 80049f2:	d130      	bne.n	8004a56 <HAL_UART_RxCpltCallback+0xc2>
		{	
			if (_rxDriverIndex >= NoOfBytes) //
 80049f4:	4b34      	ldr	r3, [pc, #208]	; (8004ac8 <HAL_UART_RxCpltCallback+0x134>)
 80049f6:	781a      	ldrb	r2, [r3, #0]
 80049f8:	4b34      	ldr	r3, [pc, #208]	; (8004acc <HAL_UART_RxCpltCallback+0x138>)
 80049fa:	781b      	ldrb	r3, [r3, #0]
 80049fc:	429a      	cmp	r2, r3
 80049fe:	d308      	bcc.n	8004a12 <HAL_UART_RxCpltCallback+0x7e>
			{					
				RxUart5_Cpl_Flag = true; // Complete Receiving
 8004a00:	4b33      	ldr	r3, [pc, #204]	; (8004ad0 <HAL_UART_RxCpltCallback+0x13c>)
 8004a02:	2201      	movs	r2, #1
 8004a04:	701a      	strb	r2, [r3, #0]
				StartReceiveDriverData = false;
 8004a06:	4b33      	ldr	r3, [pc, #204]	; (8004ad4 <HAL_UART_RxCpltCallback+0x140>)
 8004a08:	2200      	movs	r2, #0
 8004a0a:	701a      	strb	r2, [r3, #0]
				_rxDriverIndex = 0;								
 8004a0c:	4b2e      	ldr	r3, [pc, #184]	; (8004ac8 <HAL_UART_RxCpltCallback+0x134>)
 8004a0e:	2200      	movs	r2, #0
 8004a10:	701a      	strb	r2, [r3, #0]
			}				
			if ((_rxDriverIndex == 0)&&(RxDriverData == DriverID)) // If byte 0 is the Driver ID
 8004a12:	4b2d      	ldr	r3, [pc, #180]	; (8004ac8 <HAL_UART_RxCpltCallback+0x134>)
 8004a14:	781b      	ldrb	r3, [r3, #0]
 8004a16:	2b00      	cmp	r3, #0
 8004a18:	d106      	bne.n	8004a28 <HAL_UART_RxCpltCallback+0x94>
 8004a1a:	4b2f      	ldr	r3, [pc, #188]	; (8004ad8 <HAL_UART_RxCpltCallback+0x144>)
 8004a1c:	781b      	ldrb	r3, [r3, #0]
 8004a1e:	2b01      	cmp	r3, #1
 8004a20:	d102      	bne.n	8004a28 <HAL_UART_RxCpltCallback+0x94>
			{
				StartReceiveDriverData = true; 
 8004a22:	4b2c      	ldr	r3, [pc, #176]	; (8004ad4 <HAL_UART_RxCpltCallback+0x140>)
 8004a24:	2201      	movs	r2, #1
 8004a26:	701a      	strb	r2, [r3, #0]
			}
			if (StartReceiveDriverData) //
 8004a28:	4b2a      	ldr	r3, [pc, #168]	; (8004ad4 <HAL_UART_RxCpltCallback+0x140>)
 8004a2a:	781b      	ldrb	r3, [r3, #0]
 8004a2c:	b2db      	uxtb	r3, r3
 8004a2e:	2b00      	cmp	r3, #0
 8004a30:	d011      	beq.n	8004a56 <HAL_UART_RxCpltCallback+0xc2>
			{
				RxDriverBuff[_rxDriverIndex]=RxDriverData;// Copy the data to buffer							
 8004a32:	4b25      	ldr	r3, [pc, #148]	; (8004ac8 <HAL_UART_RxCpltCallback+0x134>)
 8004a34:	781b      	ldrb	r3, [r3, #0]
 8004a36:	461a      	mov	r2, r3
 8004a38:	4b27      	ldr	r3, [pc, #156]	; (8004ad8 <HAL_UART_RxCpltCallback+0x144>)
 8004a3a:	7819      	ldrb	r1, [r3, #0]
 8004a3c:	4b27      	ldr	r3, [pc, #156]	; (8004adc <HAL_UART_RxCpltCallback+0x148>)
 8004a3e:	5499      	strb	r1, [r3, r2]
				_rxDriverIndex++;
 8004a40:	4b21      	ldr	r3, [pc, #132]	; (8004ac8 <HAL_UART_RxCpltCallback+0x134>)
 8004a42:	781b      	ldrb	r3, [r3, #0]
 8004a44:	3301      	adds	r3, #1
 8004a46:	b2da      	uxtb	r2, r3
 8004a48:	4b1f      	ldr	r3, [pc, #124]	; (8004ac8 <HAL_UART_RxCpltCallback+0x134>)
 8004a4a:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte each time ///*/					
 8004a4c:	2201      	movs	r2, #1
 8004a4e:	4922      	ldr	r1, [pc, #136]	; (8004ad8 <HAL_UART_RxCpltCallback+0x144>)
 8004a50:	4823      	ldr	r0, [pc, #140]	; (8004ae0 <HAL_UART_RxCpltCallback+0x14c>)
 8004a52:	f003 fed0 	bl	80087f6 <HAL_UART_Receive_IT>
			}					
		}
		// END UART5

		// BEGIN UART3
		if (huart->Instance==USART3) // UART3, receive Acc data
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	681b      	ldr	r3, [r3, #0]
 8004a5a:	4a22      	ldr	r2, [pc, #136]	; (8004ae4 <HAL_UART_RxCpltCallback+0x150>)
 8004a5c:	4293      	cmp	r3, r2
 8004a5e:	d121      	bne.n	8004aa4 <HAL_UART_RxCpltCallback+0x110>
		{
				
			
			if(RxUart3Data!=EndChar) // read up to the ending char
 8004a60:	4b21      	ldr	r3, [pc, #132]	; (8004ae8 <HAL_UART_RxCpltCallback+0x154>)
 8004a62:	781b      	ldrb	r3, [r3, #0]
 8004a64:	2224      	movs	r2, #36	; 0x24
 8004a66:	4293      	cmp	r3, r2
 8004a68:	d011      	beq.n	8004a8e <HAL_UART_RxCpltCallback+0xfa>
			{
				if (RxUart3Data != NULL) // remove the null character
 8004a6a:	4b1f      	ldr	r3, [pc, #124]	; (8004ae8 <HAL_UART_RxCpltCallback+0x154>)
 8004a6c:	781b      	ldrb	r3, [r3, #0]
 8004a6e:	2b00      	cmp	r3, #0
 8004a70:	d013      	beq.n	8004a9a <HAL_UART_RxCpltCallback+0x106>
				{
					RxUart3Buff[_rxUart3Index]=RxUart3Data;// Copy the data to buffer
 8004a72:	4b1e      	ldr	r3, [pc, #120]	; (8004aec <HAL_UART_RxCpltCallback+0x158>)
 8004a74:	781b      	ldrb	r3, [r3, #0]
 8004a76:	461a      	mov	r2, r3
 8004a78:	4b1b      	ldr	r3, [pc, #108]	; (8004ae8 <HAL_UART_RxCpltCallback+0x154>)
 8004a7a:	7819      	ldrb	r1, [r3, #0]
 8004a7c:	4b1c      	ldr	r3, [pc, #112]	; (8004af0 <HAL_UART_RxCpltCallback+0x15c>)
 8004a7e:	5499      	strb	r1, [r3, r2]
				  _rxUart3Index++;					
 8004a80:	4b1a      	ldr	r3, [pc, #104]	; (8004aec <HAL_UART_RxCpltCallback+0x158>)
 8004a82:	781b      	ldrb	r3, [r3, #0]
 8004a84:	3301      	adds	r3, #1
 8004a86:	b2da      	uxtb	r2, r3
 8004a88:	4b18      	ldr	r3, [pc, #96]	; (8004aec <HAL_UART_RxCpltCallback+0x158>)
 8004a8a:	701a      	strb	r2, [r3, #0]
 8004a8c:	e005      	b.n	8004a9a <HAL_UART_RxCpltCallback+0x106>
				}		
			}
			else //if(RxPCData==EndChar)
			{								
				_rxUart3Index=0;
 8004a8e:	4b17      	ldr	r3, [pc, #92]	; (8004aec <HAL_UART_RxCpltCallback+0x158>)
 8004a90:	2200      	movs	r2, #0
 8004a92:	701a      	strb	r2, [r3, #0]
				RxUart3_Cpl_Flag=true; // reading completed				
 8004a94:	4b17      	ldr	r3, [pc, #92]	; (8004af4 <HAL_UART_RxCpltCallback+0x160>)
 8004a96:	2201      	movs	r2, #1
 8004a98:	701a      	strb	r2, [r3, #0]
			}
			HAL_UART_Receive_IT(&huart3,&RxUart3Data,1);				
 8004a9a:	2201      	movs	r2, #1
 8004a9c:	4912      	ldr	r1, [pc, #72]	; (8004ae8 <HAL_UART_RxCpltCallback+0x154>)
 8004a9e:	4816      	ldr	r0, [pc, #88]	; (8004af8 <HAL_UART_RxCpltCallback+0x164>)
 8004aa0:	f003 fea9 	bl	80087f6 <HAL_UART_Receive_IT>
//				RxESP_Cpl_Flag=true; // reading completed				
//			}
//			HAL_UART_Receive_IT(&huart4,&RxESPData,1);			
//		}
//		// END UART4
}
 8004aa4:	bf00      	nop
 8004aa6:	3708      	adds	r7, #8
 8004aa8:	46bd      	mov	sp, r7
 8004aaa:	bd80      	pop	{r7, pc}
 8004aac:	40011400 	.word	0x40011400
 8004ab0:	20000404 	.word	0x20000404
 8004ab4:	2000042c 	.word	0x2000042c
 8004ab8:	2000037c 	.word	0x2000037c
 8004abc:	20000338 	.word	0x20000338
 8004ac0:	2000042f 	.word	0x2000042f
 8004ac4:	40005000 	.word	0x40005000
 8004ac8:	2000042d 	.word	0x2000042d
 8004acc:	20000000 	.word	0x20000000
 8004ad0:	20000430 	.word	0x20000430
 8004ad4:	20000432 	.word	0x20000432
 8004ad8:	20000405 	.word	0x20000405
 8004adc:	200003a4 	.word	0x200003a4
 8004ae0:	200002b0 	.word	0x200002b0
 8004ae4:	40004800 	.word	0x40004800
 8004ae8:	20000406 	.word	0x20000406
 8004aec:	2000042e 	.word	0x2000042e
 8004af0:	200003c4 	.word	0x200003c4
 8004af4:	20000431 	.word	0x20000431
 8004af8:	200002f4 	.word	0x200002f4

08004afc <HAL_TIM_PeriodElapsedCallback>:


void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim) // Timer 2 interrupt, 1ms
{
 8004afc:	b580      	push	{r7, lr}
 8004afe:	b082      	sub	sp, #8
 8004b00:	af00      	add	r7, sp, #0
 8004b02:	6078      	str	r0, [r7, #4]
	if (htim->Instance == TIM3)	// TIMER 3 interrupt for pulse generation, period: 2us
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	681b      	ldr	r3, [r3, #0]
 8004b08:	4a59      	ldr	r2, [pc, #356]	; (8004c70 <HAL_TIM_PeriodElapsedCallback+0x174>)
 8004b0a:	4293      	cmp	r3, r2
 8004b0c:	f040 8081 	bne.w	8004c12 <HAL_TIM_PeriodElapsedCallback+0x116>
	{
		if (PulseGenerationFlag) // Only generating pulse when the flag is ON. Otherwise, do nothing
 8004b10:	4b58      	ldr	r3, [pc, #352]	; (8004c74 <HAL_TIM_PeriodElapsedCallback+0x178>)
 8004b12:	781b      	ldrb	r3, [r3, #0]
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d07c      	beq.n	8004c12 <HAL_TIM_PeriodElapsedCallback+0x116>
		{
			if (Timer3CountPeriod>0)
 8004b18:	4b57      	ldr	r3, [pc, #348]	; (8004c78 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004b1a:	881b      	ldrh	r3, [r3, #0]
 8004b1c:	2b00      	cmp	r3, #0
 8004b1e:	d078      	beq.n	8004c12 <HAL_TIM_PeriodElapsedCallback+0x116>
			{
				Timer3Count++;
 8004b20:	4b56      	ldr	r3, [pc, #344]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004b22:	881b      	ldrh	r3, [r3, #0]
 8004b24:	3301      	adds	r3, #1
 8004b26:	b29a      	uxth	r2, r3
 8004b28:	4b54      	ldr	r3, [pc, #336]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004b2a:	801a      	strh	r2, [r3, #0]
				if (Timer3Count >= Timer3CountPeriod) // Generate pulse
 8004b2c:	4b53      	ldr	r3, [pc, #332]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004b2e:	881a      	ldrh	r2, [r3, #0]
 8004b30:	4b51      	ldr	r3, [pc, #324]	; (8004c78 <HAL_TIM_PeriodElapsedCallback+0x17c>)
 8004b32:	881b      	ldrh	r3, [r3, #0]
 8004b34:	429a      	cmp	r2, r3
 8004b36:	d36c      	bcc.n	8004c12 <HAL_TIM_PeriodElapsedCallback+0x116>
				{
					Timer3Count = 0;
 8004b38:	4b50      	ldr	r3, [pc, #320]	; (8004c7c <HAL_TIM_PeriodElapsedCallback+0x180>)
 8004b3a:	2200      	movs	r2, #0
 8004b3c:	801a      	strh	r2, [r3, #0]
					if (PRIsToggled)
 8004b3e:	4b50      	ldr	r3, [pc, #320]	; (8004c80 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004b40:	781b      	ldrb	r3, [r3, #0]
 8004b42:	2b00      	cmp	r3, #0
 8004b44:	d032      	beq.n	8004bac <HAL_TIM_PeriodElapsedCallback+0xb0>
					{
						HAL_GPIO_TogglePin(PE9_TIM1_CH1_PFIN_GPIO_Port, PE9_TIM1_CH1_PFIN_Pin); // Generate pulses on PF by tonggling this input
 8004b46:	f44f 7100 	mov.w	r1, #512	; 0x200
 8004b4a:	484e      	ldr	r0, [pc, #312]	; (8004c84 <HAL_TIM_PeriodElapsedCallback+0x188>)
 8004b4c:	f002 fa31 	bl	8006fb2 <HAL_GPIO_TogglePin>
						PRIsToggled = false;					
 8004b50:	4b4b      	ldr	r3, [pc, #300]	; (8004c80 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004b52:	2200      	movs	r2, #0
 8004b54:	701a      	strb	r2, [r3, #0]
						if (Direction) // Direction = true: dropping down
 8004b56:	4b4c      	ldr	r3, [pc, #304]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004b58:	781b      	ldrb	r3, [r3, #0]
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d005      	beq.n	8004b6a <HAL_TIM_PeriodElapsedCallback+0x6e>
						{
							PositionPulseCmd++; // Increase the pulse cmd
 8004b5e:	4b4b      	ldr	r3, [pc, #300]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	3301      	adds	r3, #1
 8004b64:	4a49      	ldr	r2, [pc, #292]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004b66:	6013      	str	r3, [r2, #0]
 8004b68:	e004      	b.n	8004b74 <HAL_TIM_PeriodElapsedCallback+0x78>
						}
						else // false: pulling up
						{
							PositionPulseCmd--; // Decrease the pulse cmd
 8004b6a:	4b48      	ldr	r3, [pc, #288]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	3b01      	subs	r3, #1
 8004b70:	4a46      	ldr	r2, [pc, #280]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004b72:	6013      	str	r3, [r2, #0]
//										StopPulseGenerating();
//									}
//								}			
//							}							
						}										
						if (IsStepPulseCmd == true)
 8004b74:	4b46      	ldr	r3, [pc, #280]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8004b76:	781b      	ldrb	r3, [r3, #0]
 8004b78:	2b00      	cmp	r3, #0
 8004b7a:	d072      	beq.n	8004c62 <HAL_TIM_PeriodElapsedCallback+0x166>
						{
							PulseCmd++;
 8004b7c:	4b45      	ldr	r3, [pc, #276]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004b7e:	681b      	ldr	r3, [r3, #0]
 8004b80:	3301      	adds	r3, #1
 8004b82:	4a44      	ldr	r2, [pc, #272]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004b84:	6013      	str	r3, [r2, #0]
							if (PulseCmd >= abs(StepPulseCmd)) // Pulse cmd is reached
 8004b86:	4b44      	ldr	r3, [pc, #272]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004b8e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004b92:	4b40      	ldr	r3, [pc, #256]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004b94:	681b      	ldr	r3, [r3, #0]
 8004b96:	429a      	cmp	r2, r3
 8004b98:	dc63      	bgt.n	8004c62 <HAL_TIM_PeriodElapsedCallback+0x166>
							{
								StopPulseGenerating();
 8004b9a:	f7fc ffaf 	bl	8001afc <StopPulseGenerating>
								IsStepPulseCmd = false;
 8004b9e:	4b3c      	ldr	r3, [pc, #240]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	701a      	strb	r2, [r3, #0]
								PulseCmd = 0;
 8004ba4:	4b3b      	ldr	r3, [pc, #236]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004ba6:	2200      	movs	r2, #0
 8004ba8:	601a      	str	r2, [r3, #0]
								return;
 8004baa:	e05d      	b.n	8004c68 <HAL_TIM_PeriodElapsedCallback+0x16c>
						}					
						return; // exit the function
					}				
					else
					{
						HAL_GPIO_TogglePin(PC8_PR_GPIO_Port, PC8_PR_Pin); // Generate pulses on PF by tonggling this input
 8004bac:	f44f 7180 	mov.w	r1, #256	; 0x100
 8004bb0:	483a      	ldr	r0, [pc, #232]	; (8004c9c <HAL_TIM_PeriodElapsedCallback+0x1a0>)
 8004bb2:	f002 f9fe 	bl	8006fb2 <HAL_GPIO_TogglePin>
						PRIsToggled = true;
 8004bb6:	4b32      	ldr	r3, [pc, #200]	; (8004c80 <HAL_TIM_PeriodElapsedCallback+0x184>)
 8004bb8:	2201      	movs	r2, #1
 8004bba:	701a      	strb	r2, [r3, #0]
						if (Direction) // Direction = true: dropping down
 8004bbc:	4b32      	ldr	r3, [pc, #200]	; (8004c88 <HAL_TIM_PeriodElapsedCallback+0x18c>)
 8004bbe:	781b      	ldrb	r3, [r3, #0]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d005      	beq.n	8004bd0 <HAL_TIM_PeriodElapsedCallback+0xd4>
						{
							PositionPulseCmd++; // Increase the pulse cmd
 8004bc4:	4b31      	ldr	r3, [pc, #196]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	3301      	adds	r3, #1
 8004bca:	4a30      	ldr	r2, [pc, #192]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004bcc:	6013      	str	r3, [r2, #0]
 8004bce:	e004      	b.n	8004bda <HAL_TIM_PeriodElapsedCallback+0xde>
						}
						else // false: pulling up
						{
							PositionPulseCmd--; // Decrease the pulse cmd
 8004bd0:	4b2e      	ldr	r3, [pc, #184]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004bd2:	681b      	ldr	r3, [r3, #0]
 8004bd4:	3b01      	subs	r3, #1
 8004bd6:	4a2d      	ldr	r2, [pc, #180]	; (8004c8c <HAL_TIM_PeriodElapsedCallback+0x190>)
 8004bd8:	6013      	str	r3, [r2, #0]
//										StopPulseGenerating();
//									}
//								}			
//							}											
						}					
						if (IsStepPulseCmd == true)
 8004bda:	4b2d      	ldr	r3, [pc, #180]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8004bdc:	781b      	ldrb	r3, [r3, #0]
 8004bde:	2b00      	cmp	r3, #0
 8004be0:	d041      	beq.n	8004c66 <HAL_TIM_PeriodElapsedCallback+0x16a>
						{
							PulseCmd++;
 8004be2:	4b2c      	ldr	r3, [pc, #176]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004be4:	681b      	ldr	r3, [r3, #0]
 8004be6:	3301      	adds	r3, #1
 8004be8:	4a2a      	ldr	r2, [pc, #168]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004bea:	6013      	str	r3, [r2, #0]
							if (PulseCmd >= abs(StepPulseCmd)) // Pulse cmd is reached
 8004bec:	4b2a      	ldr	r3, [pc, #168]	; (8004c98 <HAL_TIM_PeriodElapsedCallback+0x19c>)
 8004bee:	681b      	ldr	r3, [r3, #0]
 8004bf0:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8004bf4:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8004bf8:	4b26      	ldr	r3, [pc, #152]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	429a      	cmp	r2, r3
 8004bfe:	dc32      	bgt.n	8004c66 <HAL_TIM_PeriodElapsedCallback+0x16a>
							{
								StopPulseGenerating();
 8004c00:	f7fc ff7c 	bl	8001afc <StopPulseGenerating>
								IsStepPulseCmd = false;
 8004c04:	4b22      	ldr	r3, [pc, #136]	; (8004c90 <HAL_TIM_PeriodElapsedCallback+0x194>)
 8004c06:	2200      	movs	r2, #0
 8004c08:	701a      	strb	r2, [r3, #0]
								PulseCmd = 0;
 8004c0a:	4b22      	ldr	r3, [pc, #136]	; (8004c94 <HAL_TIM_PeriodElapsedCallback+0x198>)
 8004c0c:	2200      	movs	r2, #0
 8004c0e:	601a      	str	r2, [r3, #0]
								return;
 8004c10:	e02a      	b.n	8004c68 <HAL_TIM_PeriodElapsedCallback+0x16c>
				}				
			}
		}
	}

	if (htim->Instance == TIM2) // Timer 2 interrupt, for the main control function, 1ms
 8004c12:	687b      	ldr	r3, [r7, #4]
 8004c14:	681b      	ldr	r3, [r3, #0]
 8004c16:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004c1a:	d125      	bne.n	8004c68 <HAL_TIM_PeriodElapsedCallback+0x16c>
		{
				// To calculate PID controller
				Timer2SampleTimeControlCount++;
 8004c1c:	4b20      	ldr	r3, [pc, #128]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8004c1e:	781b      	ldrb	r3, [r3, #0]
 8004c20:	3301      	adds	r3, #1
 8004c22:	b2da      	uxtb	r2, r3
 8004c24:	4b1e      	ldr	r3, [pc, #120]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8004c26:	701a      	strb	r2, [r3, #0]
				if (Timer2SampleTimeControlCount >= SampleTime) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 8004c28:	4b1d      	ldr	r3, [pc, #116]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8004c2a:	781a      	ldrb	r2, [r3, #0]
 8004c2c:	4b1d      	ldr	r3, [pc, #116]	; (8004ca4 <HAL_TIM_PeriodElapsedCallback+0x1a8>)
 8004c2e:	781b      	ldrb	r3, [r3, #0]
 8004c30:	429a      	cmp	r2, r3
 8004c32:	d305      	bcc.n	8004c40 <HAL_TIM_PeriodElapsedCallback+0x144>
				{		
					Timer2ControlInterrupt = true;
 8004c34:	4b1c      	ldr	r3, [pc, #112]	; (8004ca8 <HAL_TIM_PeriodElapsedCallback+0x1ac>)
 8004c36:	2201      	movs	r2, #1
 8004c38:	701a      	strb	r2, [r3, #0]
					Timer2SampleTimeControlCount = 0;
 8004c3a:	4b19      	ldr	r3, [pc, #100]	; (8004ca0 <HAL_TIM_PeriodElapsedCallback+0x1a4>)
 8004c3c:	2200      	movs	r2, #0
 8004c3e:	701a      	strb	r2, [r3, #0]
				}
			
				// To transmit the data each 50ms
				Timer2Count++;
 8004c40:	4b1a      	ldr	r3, [pc, #104]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004c42:	781b      	ldrb	r3, [r3, #0]
 8004c44:	3301      	adds	r3, #1
 8004c46:	b2da      	uxtb	r2, r3
 8004c48:	4b18      	ldr	r3, [pc, #96]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004c4a:	701a      	strb	r2, [r3, #0]
				if (Timer2Count >= 50) // turn on the flag when the sample time reaches, fix the data sample time to 50ms
 8004c4c:	4b17      	ldr	r3, [pc, #92]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004c4e:	781b      	ldrb	r3, [r3, #0]
 8004c50:	2b31      	cmp	r3, #49	; 0x31
 8004c52:	d909      	bls.n	8004c68 <HAL_TIM_PeriodElapsedCallback+0x16c>
				{		
					Timer2SampleTimeInterrupt = true;
 8004c54:	4b16      	ldr	r3, [pc, #88]	; (8004cb0 <HAL_TIM_PeriodElapsedCallback+0x1b4>)
 8004c56:	2201      	movs	r2, #1
 8004c58:	701a      	strb	r2, [r3, #0]
					Timer2Count = 0;					
 8004c5a:	4b14      	ldr	r3, [pc, #80]	; (8004cac <HAL_TIM_PeriodElapsedCallback+0x1b0>)
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	701a      	strb	r2, [r3, #0]
 8004c60:	e002      	b.n	8004c68 <HAL_TIM_PeriodElapsedCallback+0x16c>
						return; // exit the function
 8004c62:	bf00      	nop
 8004c64:	e000      	b.n	8004c68 <HAL_TIM_PeriodElapsedCallback+0x16c>
						return;
 8004c66:	bf00      	nop
				}
		}
}
 8004c68:	3708      	adds	r7, #8
 8004c6a:	46bd      	mov	sp, r7
 8004c6c:	bd80      	pop	{r7, pc}
 8004c6e:	bf00      	nop
 8004c70:	40000400 	.word	0x40000400
 8004c74:	2000043b 	.word	0x2000043b
 8004c78:	20000450 	.word	0x20000450
 8004c7c:	20000452 	.word	0x20000452
 8004c80:	20000446 	.word	0x20000446
 8004c84:	40021000 	.word	0x40021000
 8004c88:	20000435 	.word	0x20000435
 8004c8c:	200004e8 	.word	0x200004e8
 8004c90:	2000043c 	.word	0x2000043c
 8004c94:	200004f0 	.word	0x200004f0
 8004c98:	200004ec 	.word	0x200004ec
 8004c9c:	40020800 	.word	0x40020800
 8004ca0:	20000448 	.word	0x20000448
 8004ca4:	2000045c 	.word	0x2000045c
 8004ca8:	20000437 	.word	0x20000437
 8004cac:	20000447 	.word	0x20000447
 8004cb0:	20000436 	.word	0x20000436
 8004cb4:	00000000 	.word	0x00000000

08004cb8 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8004cb8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004cbc:	b08f      	sub	sp, #60	; 0x3c
 8004cbe:	af08      	add	r7, sp, #32
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
   HAL_Init();
 8004cc0:	f001 fa72 	bl	80061a8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8004cc4:	f000 fc50 	bl	8005568 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8004cc8:	f000 fe28 	bl	800591c <MX_GPIO_Init>
  MX_TIM2_Init();
 8004ccc:	f000 fce2 	bl	8005694 <MX_TIM2_Init>
  MX_UART5_Init();
 8004cd0:	f000 fda6 	bl	8005820 <MX_UART5_Init>
  MX_USART6_UART_Init();
 8004cd4:	f000 fdf8 	bl	80058c8 <MX_USART6_UART_Init>
  MX_TIM3_Init();
 8004cd8:	f000 fd56 	bl	8005788 <MX_TIM3_Init>
  MX_USART3_UART_Init();
 8004cdc:	f000 fdca 	bl	8005874 <MX_USART3_UART_Init>

  /* Initialize interrupts */
  MX_NVIC_Init();
 8004ce0:	f000 fcac 	bl	800563c <MX_NVIC_Init>
  /* USER CODE END 2 */

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
	  /* USER CODE BEGIN 2 */
	HAL_GPIO_WritePin(PE15_RELAY1_GPIO_Port, PE15_RELAY1_Pin, GPIO_PIN_SET);
 8004ce4:	2201      	movs	r2, #1
 8004ce6:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004cea:	4899      	ldr	r0, [pc, #612]	; (8004f50 <main+0x298>)
 8004cec:	f002 f948 	bl	8006f80 <HAL_GPIO_WritePin>
	HAL_Delay(5000);
 8004cf0:	f241 3088 	movw	r0, #5000	; 0x1388
 8004cf4:	f001 faca 	bl	800628c <HAL_Delay>
	
	InitParams (); // Read the saved params from the flash memory
 8004cf8:	f7fe fe3a 	bl	8003970 <InitParams>
// PID(&TPID, &AccFb, &PIPulseCmd, &DroppingAccel, Kp, StoppingTime, 0, _PID_P_ON_E, _PID_CD_DIRECT); // Kd = 0, use PI controller	
//  PID_SetMode(&TPID, _PID_MODE_AUTOMATIC);
//  PID_SetSampleTime(&TPID, Timer2Period); // the sample time is 50ms = Timer2 time interval
//  PID_SetOutputLimits(&TPID, -2000, 2000); // min PID: -2000rpm, max: 2000rpm
	
	HAL_GPIO_WritePin(PB15_485_MCU_PC_DIR_GPIO_Port, PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET); // Set Uart3 to receive Mode
 8004cfc:	2201      	movs	r2, #1
 8004cfe:	f44f 4100 	mov.w	r1, #32768	; 0x8000
 8004d02:	4894      	ldr	r0, [pc, #592]	; (8004f54 <main+0x29c>)
 8004d04:	f002 f93c 	bl	8006f80 <HAL_GPIO_WritePin>
	HAL_UART_Receive_IT(&huart3,&RxUart3Data,1); // Enable Interrupt
 8004d08:	2201      	movs	r2, #1
 8004d0a:	4993      	ldr	r1, [pc, #588]	; (8004f58 <main+0x2a0>)
 8004d0c:	4893      	ldr	r0, [pc, #588]	; (8004f5c <main+0x2a4>)
 8004d0e:	f003 fd72 	bl	80087f6 <HAL_UART_Receive_IT>
	
	HAL_TIM_Base_Start_IT(&htim2); // Enable Timer 2 interrupt
 8004d12:	4893      	ldr	r0, [pc, #588]	; (8004f60 <main+0x2a8>)
 8004d14:	f002 fe10 	bl	8007938 <HAL_TIM_Base_Start_IT>
// Not turn on timer3 at the start
//	HAL_TIM_Base_Start_IT(&htim3); // Enable Timer 3 interrupt
	HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8004d18:	2201      	movs	r2, #1
 8004d1a:	4992      	ldr	r1, [pc, #584]	; (8004f64 <main+0x2ac>)
 8004d1c:	4892      	ldr	r0, [pc, #584]	; (8004f68 <main+0x2b0>)
 8004d1e:	f003 fd6a 	bl	80087f6 <HAL_UART_Receive_IT>
	//HAL_UART_Receive_IT(&huart4,&RxESPData,1);	
	DriverInit();
 8004d22:	f7fc fad5 	bl	80012d0 <DriverInit>
	ReadMultiRegister(StE03,5);
 8004d26:	2105      	movs	r1, #5
 8004d28:	200c      	movs	r0, #12
 8004d2a:	f7fc fd0f 	bl	800174c <ReadMultiRegister>
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		
		// Process Received Cmd from the GUI
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8004d2e:	4b8f      	ldr	r3, [pc, #572]	; (8004f6c <main+0x2b4>)
 8004d30:	781b      	ldrb	r3, [r3, #0]
 8004d32:	b2db      	uxtb	r3, r3
 8004d34:	2b00      	cmp	r3, #0
 8004d36:	d00b      	beq.n	8004d50 <main+0x98>
			{
				ExtractMotionCode();				
 8004d38:	f7fc fcac 	bl	8001694 <ExtractMotionCode>
				ProcessReceivedCommand (); // Proceed the command
 8004d3c:	f7fe fe8c 	bl	8003a58 <ProcessReceivedCommand>
				RxUart6_Cpl_Flag=false;
 8004d40:	4b8a      	ldr	r3, [pc, #552]	; (8004f6c <main+0x2b4>)
 8004d42:	2200      	movs	r2, #0
 8004d44:	701a      	strb	r2, [r3, #0]
				HAL_UART_Receive_IT(&huart6,&RxPCData,1);
 8004d46:	2201      	movs	r2, #1
 8004d48:	4986      	ldr	r1, [pc, #536]	; (8004f64 <main+0x2ac>)
 8004d4a:	4887      	ldr	r0, [pc, #540]	; (8004f68 <main+0x2b0>)
 8004d4c:	f003 fd53 	bl	80087f6 <HAL_UART_Receive_IT>
			}
		// END UART6 Process Cmd

		// Process Timer2 interrupt after a period of Sampletime
		if (Timer2ControlInterrupt)
 8004d50:	4b87      	ldr	r3, [pc, #540]	; (8004f70 <main+0x2b8>)
 8004d52:	781b      	ldrb	r3, [r3, #0]
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	f000 80a3 	beq.w	8004ea2 <main+0x1ea>
		{
			Timer2ControlInterrupt = false; // Reset the flag
 8004d5c:	4b84      	ldr	r3, [pc, #528]	; (8004f70 <main+0x2b8>)
 8004d5e:	2200      	movs	r2, #0
 8004d60:	701a      	strb	r2, [r3, #0]
			// BEGIN running experiment
			if (StartRunning) // Process Running Experiment
 8004d62:	4b84      	ldr	r3, [pc, #528]	; (8004f74 <main+0x2bc>)
 8004d64:	781b      	ldrb	r3, [r3, #0]
 8004d66:	2b00      	cmp	r3, #0
 8004d68:	f000 809b 	beq.w	8004ea2 <main+0x1ea>
			{
				switch (ExperimentMode)
 8004d6c:	4b82      	ldr	r3, [pc, #520]	; (8004f78 <main+0x2c0>)
 8004d6e:	781b      	ldrb	r3, [r3, #0]
 8004d70:	2b03      	cmp	r3, #3
 8004d72:	d067      	beq.n	8004e44 <main+0x18c>
 8004d74:	2b03      	cmp	r3, #3
 8004d76:	f300 8096 	bgt.w	8004ea6 <main+0x1ee>
 8004d7a:	2b01      	cmp	r3, #1
 8004d7c:	d002      	beq.n	8004d84 <main+0xcc>
 8004d7e:	2b02      	cmp	r3, #2
 8004d80:	d031      	beq.n	8004de6 <main+0x12e>
								}
							}
						}
						break;
					default:
						break;
 8004d82:	e090      	b.n	8004ea6 <main+0x1ee>
						if (Dropping()) // Dropping() return true when it finishing
 8004d84:	f7fe f9b0 	bl	80030e8 <Dropping>
 8004d88:	4603      	mov	r3, r0
 8004d8a:	2b00      	cmp	r3, #0
 8004d8c:	f000 808d 	beq.w	8004eaa <main+0x1f2>
							if (!POSReach) // Check if position is reached or not
 8004d90:	4b7a      	ldr	r3, [pc, #488]	; (8004f7c <main+0x2c4>)
 8004d92:	781b      	ldrb	r3, [r3, #0]
 8004d94:	f083 0301 	eor.w	r3, r3, #1
 8004d98:	b2db      	uxtb	r3, r3
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	f000 8085 	beq.w	8004eaa <main+0x1f2>
								if (WaitingMiliSecond(3000)) // Wait for 2 Seconds
 8004da0:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004da4:	f7fc fee6 	bl	8001b74 <WaitingMiliSecond>
 8004da8:	4603      	mov	r3, r0
 8004daa:	2b00      	cmp	r3, #0
 8004dac:	d07d      	beq.n	8004eaa <main+0x1f2>
									StopExperiment();
 8004dae:	f7fe fbb3 	bl	8003518 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8004db2:	4b73      	ldr	r3, [pc, #460]	; (8004f80 <main+0x2c8>)
 8004db4:	781b      	ldrb	r3, [r3, #0]
 8004db6:	2b00      	cmp	r3, #0
 8004db8:	d077      	beq.n	8004eaa <main+0x1f2>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8004dba:	221e      	movs	r2, #30
 8004dbc:	2100      	movs	r1, #0
 8004dbe:	4871      	ldr	r0, [pc, #452]	; (8004f84 <main+0x2cc>)
 8004dc0:	f004 fcdc 	bl	800977c <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8004dc4:	4970      	ldr	r1, [pc, #448]	; (8004f88 <main+0x2d0>)
 8004dc6:	486f      	ldr	r0, [pc, #444]	; (8004f84 <main+0x2cc>)
 8004dc8:	f005 f94a 	bl	800a060 <siprintf>
 8004dcc:	4603      	mov	r3, r0
 8004dce:	b2da      	uxtb	r2, r3
 8004dd0:	4b6e      	ldr	r3, [pc, #440]	; (8004f8c <main+0x2d4>)
 8004dd2:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004dd4:	4b6d      	ldr	r3, [pc, #436]	; (8004f8c <main+0x2d4>)
 8004dd6:	781b      	ldrb	r3, [r3, #0]
 8004dd8:	b29a      	uxth	r2, r3
 8004dda:	23c8      	movs	r3, #200	; 0xc8
 8004ddc:	4969      	ldr	r1, [pc, #420]	; (8004f84 <main+0x2cc>)
 8004dde:	4862      	ldr	r0, [pc, #392]	; (8004f68 <main+0x2b0>)
 8004de0:	f003 fc77 	bl	80086d2 <HAL_UART_Transmit>
						break;
 8004de4:	e061      	b.n	8004eaa <main+0x1f2>
						if (PullingExperiment()) // PullingExperiment() return true when it finishing
 8004de6:	f7fd f9e7 	bl	80021b8 <PullingExperiment>
 8004dea:	4603      	mov	r3, r0
 8004dec:	2b00      	cmp	r3, #0
 8004dee:	d05e      	beq.n	8004eae <main+0x1f6>
							if (!POSReach) // Check if position is reached or not
 8004df0:	4b62      	ldr	r3, [pc, #392]	; (8004f7c <main+0x2c4>)
 8004df2:	781b      	ldrb	r3, [r3, #0]
 8004df4:	f083 0301 	eor.w	r3, r3, #1
 8004df8:	b2db      	uxtb	r3, r3
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d057      	beq.n	8004eae <main+0x1f6>
								if (WaitingMiliSecond(3000)) // Wait for 2 Seconds
 8004dfe:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e02:	f7fc feb7 	bl	8001b74 <WaitingMiliSecond>
 8004e06:	4603      	mov	r3, r0
 8004e08:	2b00      	cmp	r3, #0
 8004e0a:	d050      	beq.n	8004eae <main+0x1f6>
									StopExperiment();
 8004e0c:	f7fe fb84 	bl	8003518 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8004e10:	4b5b      	ldr	r3, [pc, #364]	; (8004f80 <main+0x2c8>)
 8004e12:	781b      	ldrb	r3, [r3, #0]
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d04a      	beq.n	8004eae <main+0x1f6>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8004e18:	221e      	movs	r2, #30
 8004e1a:	2100      	movs	r1, #0
 8004e1c:	4859      	ldr	r0, [pc, #356]	; (8004f84 <main+0x2cc>)
 8004e1e:	f004 fcad 	bl	800977c <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8004e22:	4959      	ldr	r1, [pc, #356]	; (8004f88 <main+0x2d0>)
 8004e24:	4857      	ldr	r0, [pc, #348]	; (8004f84 <main+0x2cc>)
 8004e26:	f005 f91b 	bl	800a060 <siprintf>
 8004e2a:	4603      	mov	r3, r0
 8004e2c:	b2da      	uxtb	r2, r3
 8004e2e:	4b57      	ldr	r3, [pc, #348]	; (8004f8c <main+0x2d4>)
 8004e30:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004e32:	4b56      	ldr	r3, [pc, #344]	; (8004f8c <main+0x2d4>)
 8004e34:	781b      	ldrb	r3, [r3, #0]
 8004e36:	b29a      	uxth	r2, r3
 8004e38:	23c8      	movs	r3, #200	; 0xc8
 8004e3a:	4952      	ldr	r1, [pc, #328]	; (8004f84 <main+0x2cc>)
 8004e3c:	484a      	ldr	r0, [pc, #296]	; (8004f68 <main+0x2b0>)
 8004e3e:	f003 fc48 	bl	80086d2 <HAL_UART_Transmit>
						break;
 8004e42:	e034      	b.n	8004eae <main+0x1f6>
						if (PullAndDrop()) // PullingExperiment() return true when it finishing
 8004e44:	f7fd fc8c 	bl	8002760 <PullAndDrop>
 8004e48:	4603      	mov	r3, r0
 8004e4a:	2b00      	cmp	r3, #0
 8004e4c:	d031      	beq.n	8004eb2 <main+0x1fa>
							if (!POSReach) // Check if position is reached or not
 8004e4e:	4b4b      	ldr	r3, [pc, #300]	; (8004f7c <main+0x2c4>)
 8004e50:	781b      	ldrb	r3, [r3, #0]
 8004e52:	f083 0301 	eor.w	r3, r3, #1
 8004e56:	b2db      	uxtb	r3, r3
 8004e58:	2b00      	cmp	r3, #0
 8004e5a:	d02a      	beq.n	8004eb2 <main+0x1fa>
								if (WaitingMiliSecond(3000)) // Wait for 3 Seconds
 8004e5c:	f640 30b8 	movw	r0, #3000	; 0xbb8
 8004e60:	f7fc fe88 	bl	8001b74 <WaitingMiliSecond>
 8004e64:	4603      	mov	r3, r0
 8004e66:	2b00      	cmp	r3, #0
 8004e68:	d023      	beq.n	8004eb2 <main+0x1fa>
									StopExperiment();
 8004e6a:	f7fe fb55 	bl	8003518 <StopExperiment>
									if (RunningMode) // Running Mode = false = manual, true=Automatic
 8004e6e:	4b44      	ldr	r3, [pc, #272]	; (8004f80 <main+0x2c8>)
 8004e70:	781b      	ldrb	r3, [r3, #0]
 8004e72:	2b00      	cmp	r3, #0
 8004e74:	d01d      	beq.n	8004eb2 <main+0x1fa>
										memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8004e76:	221e      	movs	r2, #30
 8004e78:	2100      	movs	r1, #0
 8004e7a:	4842      	ldr	r0, [pc, #264]	; (8004f84 <main+0x2cc>)
 8004e7c:	f004 fc7e 	bl	800977c <memset>
										TxPCLen = sprintf(TxPCBuff,"$"); // $ means finish running one episode
 8004e80:	4941      	ldr	r1, [pc, #260]	; (8004f88 <main+0x2d0>)
 8004e82:	4840      	ldr	r0, [pc, #256]	; (8004f84 <main+0x2cc>)
 8004e84:	f005 f8ec 	bl	800a060 <siprintf>
 8004e88:	4603      	mov	r3, r0
 8004e8a:	b2da      	uxtb	r2, r3
 8004e8c:	4b3f      	ldr	r3, [pc, #252]	; (8004f8c <main+0x2d4>)
 8004e8e:	701a      	strb	r2, [r3, #0]
										HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8004e90:	4b3e      	ldr	r3, [pc, #248]	; (8004f8c <main+0x2d4>)
 8004e92:	781b      	ldrb	r3, [r3, #0]
 8004e94:	b29a      	uxth	r2, r3
 8004e96:	23c8      	movs	r3, #200	; 0xc8
 8004e98:	493a      	ldr	r1, [pc, #232]	; (8004f84 <main+0x2cc>)
 8004e9a:	4833      	ldr	r0, [pc, #204]	; (8004f68 <main+0x2b0>)
 8004e9c:	f003 fc19 	bl	80086d2 <HAL_UART_Transmit>
						break;
 8004ea0:	e007      	b.n	8004eb2 <main+0x1fa>
				}
			}
 8004ea2:	bf00      	nop
 8004ea4:	e006      	b.n	8004eb4 <main+0x1fc>
						break;
 8004ea6:	bf00      	nop
 8004ea8:	e004      	b.n	8004eb4 <main+0x1fc>
						break;
 8004eaa:	bf00      	nop
 8004eac:	e002      	b.n	8004eb4 <main+0x1fc>
						break;
 8004eae:	bf00      	nop
 8004eb0:	e000      	b.n	8004eb4 <main+0x1fc>
						break;
 8004eb2:	bf00      	nop
		}
			// END Running Experiment
		// END Timer2ControlInterrupt
		
		// BEGIN Timer2 interrupt each 50ms for sending the data
		if (Timer2SampleTimeInterrupt)
 8004eb4:	4b36      	ldr	r3, [pc, #216]	; (8004f90 <main+0x2d8>)
 8004eb6:	781b      	ldrb	r3, [r3, #0]
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	f000 815d 	beq.w	800517a <main+0x4c2>
		{
			Timer2SampleTimeInterrupt = false;
 8004ec0:	4b33      	ldr	r3, [pc, #204]	; (8004f90 <main+0x2d8>)
 8004ec2:	2200      	movs	r2, #0
 8004ec4:	701a      	strb	r2, [r3, #0]
			
			// Read CN1-22-RDY, Check if Servo Ready or not, or Servo ON of OFF.
			// If servo is not ready or not ON, then turn off all the functions
			if ( HAL_GPIO_ReadPin(CN1_22_RDY_GPIO_Port,CN1_22_RDY_Pin) || HAL_GPIO_ReadPin(CN1_48_BRAKE_GPIO_Port,CN1_48_BRAKE_Pin))
 8004ec6:	2104      	movs	r1, #4
 8004ec8:	4821      	ldr	r0, [pc, #132]	; (8004f50 <main+0x298>)
 8004eca:	f002 f841 	bl	8006f50 <HAL_GPIO_ReadPin>
 8004ece:	4603      	mov	r3, r0
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d106      	bne.n	8004ee2 <main+0x22a>
 8004ed4:	2140      	movs	r1, #64	; 0x40
 8004ed6:	481e      	ldr	r0, [pc, #120]	; (8004f50 <main+0x298>)
 8004ed8:	f002 f83a 	bl	8006f50 <HAL_GPIO_ReadPin>
 8004edc:	4603      	mov	r3, r0
 8004ede:	2b00      	cmp	r3, #0
 8004ee0:	d008      	beq.n	8004ef4 <main+0x23c>
			{
				// If the servo is not ON. Then stop all the running function
				StopPulseGenerating();
 8004ee2:	f7fc fe0b 	bl	8001afc <StopPulseGenerating>
				StopExperiment();				
 8004ee6:	f7fe fb17 	bl	8003518 <StopExperiment>
				ResetPIDController();
 8004eea:	f7fc fbb9 	bl	8001660 <ResetPIDController>
				IsHoming = false; // Disable Homming
 8004eee:	4b29      	ldr	r3, [pc, #164]	; (8004f94 <main+0x2dc>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	701a      	strb	r2, [r3, #0]
			}	
			
			// BEGIN Software Limit ASDA Driver
			if (!MotorDriver) // Applied for ASDA-A3 Diver since the encoder pulse only can be cleared when cycle the driver
 8004ef4:	4b28      	ldr	r3, [pc, #160]	; (8004f98 <main+0x2e0>)
 8004ef6:	781b      	ldrb	r3, [r3, #0]
 8004ef8:	f083 0301 	eor.w	r3, r3, #1
 8004efc:	b2db      	uxtb	r3, r3
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d054      	beq.n	8004fac <main+0x2f4>
			{
				if (StartRunning && StartAccleratePulling) // Always turn on the software limit while running
 8004f02:	4b1c      	ldr	r3, [pc, #112]	; (8004f74 <main+0x2bc>)
 8004f04:	781b      	ldrb	r3, [r3, #0]
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d010      	beq.n	8004f2c <main+0x274>
 8004f0a:	4b24      	ldr	r3, [pc, #144]	; (8004f9c <main+0x2e4>)
 8004f0c:	781b      	ldrb	r3, [r3, #0]
 8004f0e:	2b00      	cmp	r3, #0
 8004f10:	d00c      	beq.n	8004f2c <main+0x274>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004f12:	4b23      	ldr	r3, [pc, #140]	; (8004fa0 <main+0x2e8>)
 8004f14:	681a      	ldr	r2, [r3, #0]
 8004f16:	4b23      	ldr	r3, [pc, #140]	; (8004fa4 <main+0x2ec>)
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	1ad3      	subs	r3, r2, r3
 8004f1c:	2bc8      	cmp	r3, #200	; 0xc8
 8004f1e:	dc05      	bgt.n	8004f2c <main+0x274>
					{				
						StopPulseGenerating();
 8004f20:	f7fc fdec 	bl	8001afc <StopPulseGenerating>
						StopExperiment();				
 8004f24:	f7fe faf8 	bl	8003518 <StopExperiment>
						ResetPIDController();						
 8004f28:	f7fc fb9a 	bl	8001660 <ResetPIDController>
					}					
				}
				if (SoftWareLimit) // Software limit is on
 8004f2c:	4b1e      	ldr	r3, [pc, #120]	; (8004fa8 <main+0x2f0>)
 8004f2e:	781b      	ldrb	r3, [r3, #0]
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d063      	beq.n	8004ffc <main+0x344>
				{
					if (MotorEncPulse-OriginPulse <= 200) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004f34:	4b1a      	ldr	r3, [pc, #104]	; (8004fa0 <main+0x2e8>)
 8004f36:	681a      	ldr	r2, [r3, #0]
 8004f38:	4b1a      	ldr	r3, [pc, #104]	; (8004fa4 <main+0x2ec>)
 8004f3a:	681b      	ldr	r3, [r3, #0]
 8004f3c:	1ad3      	subs	r3, r2, r3
 8004f3e:	2bc8      	cmp	r3, #200	; 0xc8
 8004f40:	dc5c      	bgt.n	8004ffc <main+0x344>
					{				
						StopPulseGenerating();
 8004f42:	f7fc fddb 	bl	8001afc <StopPulseGenerating>
						StopExperiment();				
 8004f46:	f7fe fae7 	bl	8003518 <StopExperiment>
						ResetPIDController();						
 8004f4a:	f7fc fb89 	bl	8001660 <ResetPIDController>
 8004f4e:	e055      	b.n	8004ffc <main+0x344>
 8004f50:	40021000 	.word	0x40021000
 8004f54:	40020400 	.word	0x40020400
 8004f58:	20000406 	.word	0x20000406
 8004f5c:	200002f4 	.word	0x200002f4
 8004f60:	20000220 	.word	0x20000220
 8004f64:	20000404 	.word	0x20000404
 8004f68:	20000338 	.word	0x20000338
 8004f6c:	2000042f 	.word	0x2000042f
 8004f70:	20000437 	.word	0x20000437
 8004f74:	20000434 	.word	0x20000434
 8004f78:	20000004 	.word	0x20000004
 8004f7c:	2000043d 	.word	0x2000043d
 8004f80:	20000445 	.word	0x20000445
 8004f84:	20000408 	.word	0x20000408
 8004f88:	0800df20 	.word	0x0800df20
 8004f8c:	20000426 	.word	0x20000426
 8004f90:	20000436 	.word	0x20000436
 8004f94:	20000443 	.word	0x20000443
 8004f98:	20000003 	.word	0x20000003
 8004f9c:	2000043f 	.word	0x2000043f
 8004fa0:	200004e0 	.word	0x200004e0
 8004fa4:	200004e4 	.word	0x200004e4
 8004fa8:	20000005 	.word	0x20000005
					}	
				}
			}
			else // HIGEN FDA Driver, Software Limit Switch
			{
				if (StartRunning && StartAccleratePulling)// Always turn on the software limit while running
 8004fac:	4b9a      	ldr	r3, [pc, #616]	; (8005218 <main+0x560>)
 8004fae:	781b      	ldrb	r3, [r3, #0]
 8004fb0:	2b00      	cmp	r3, #0
 8004fb2:	d011      	beq.n	8004fd8 <main+0x320>
 8004fb4:	4b99      	ldr	r3, [pc, #612]	; (800521c <main+0x564>)
 8004fb6:	781b      	ldrb	r3, [r3, #0]
 8004fb8:	2b00      	cmp	r3, #0
 8004fba:	d00d      	beq.n	8004fd8 <main+0x320>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004fbc:	4b98      	ldr	r3, [pc, #608]	; (8005220 <main+0x568>)
 8004fbe:	681a      	ldr	r2, [r3, #0]
 8004fc0:	4b98      	ldr	r3, [pc, #608]	; (8005224 <main+0x56c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	1ad3      	subs	r3, r2, r3
 8004fc6:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fca:	dc05      	bgt.n	8004fd8 <main+0x320>
					{				
						StopPulseGenerating();
 8004fcc:	f7fc fd96 	bl	8001afc <StopPulseGenerating>
						StopExperiment();				
 8004fd0:	f7fe faa2 	bl	8003518 <StopExperiment>
						ResetPIDController();						
 8004fd4:	f7fc fb44 	bl	8001660 <ResetPIDController>
					}					
				}
				if (SoftWareLimit) // Software limit is on
 8004fd8:	4b93      	ldr	r3, [pc, #588]	; (8005228 <main+0x570>)
 8004fda:	781b      	ldrb	r3, [r3, #0]
 8004fdc:	2b00      	cmp	r3, #0
 8004fde:	d00d      	beq.n	8004ffc <main+0x344>
				{
					if (MotorEncPulse-OriginPulse <= 1000) // Software Limit Switch based on actual motor position, 500/2048 pulses
 8004fe0:	4b8f      	ldr	r3, [pc, #572]	; (8005220 <main+0x568>)
 8004fe2:	681a      	ldr	r2, [r3, #0]
 8004fe4:	4b8f      	ldr	r3, [pc, #572]	; (8005224 <main+0x56c>)
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	1ad3      	subs	r3, r2, r3
 8004fea:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8004fee:	dc05      	bgt.n	8004ffc <main+0x344>
					{				
						StopPulseGenerating();
 8004ff0:	f7fc fd84 	bl	8001afc <StopPulseGenerating>
						StopExperiment();				
 8004ff4:	f7fe fa90 	bl	8003518 <StopExperiment>
						ResetPIDController();						
 8004ff8:	f7fc fb32 	bl	8001660 <ResetPIDController>
					}	
				}				
			}
			// END Software Limit ASDA Driver
			//BEGIN Homing
			if (IsHoming)
 8004ffc:	4b8b      	ldr	r3, [pc, #556]	; (800522c <main+0x574>)
 8004ffe:	781b      	ldrb	r3, [r3, #0]
 8005000:	2b00      	cmp	r3, #0
 8005002:	d009      	beq.n	8005018 <main+0x360>
			{
				if(CheckGoingToRefPosition(false, 100)) // false = go up, 0 = home position
 8005004:	2164      	movs	r1, #100	; 0x64
 8005006:	2000      	movs	r0, #0
 8005008:	f7fc fe66 	bl	8001cd8 <CheckGoingToRefPosition>
 800500c:	4603      	mov	r3, r0
 800500e:	2b00      	cmp	r3, #0
 8005010:	d002      	beq.n	8005018 <main+0x360>
				{
					IsHoming = false; // finish homing
 8005012:	4b86      	ldr	r3, [pc, #536]	; (800522c <main+0x574>)
 8005014:	2200      	movs	r2, #0
 8005016:	701a      	strb	r2, [r3, #0]
				}
			}
			//END Homing
			
			// BEGIN Send data to the UI
			if (UIDataRequest)
 8005018:	4b85      	ldr	r3, [pc, #532]	; (8005230 <main+0x578>)
 800501a:	781b      	ldrb	r3, [r3, #0]
 800501c:	2b00      	cmp	r3, #0
 800501e:	d07d      	beq.n	800511c <main+0x464>
			{
				if (PositionControlMode) // Position Mode, read both Position and Speed, Send both Position and Speed
 8005020:	4b84      	ldr	r3, [pc, #528]	; (8005234 <main+0x57c>)
 8005022:	781b      	ldrb	r3, [r3, #0]
 8005024:	2b00      	cmp	r3, #0
 8005026:	d079      	beq.n	800511c <main+0x464>
				{
					memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset					
 8005028:	221e      	movs	r2, #30
 800502a:	2100      	movs	r1, #0
 800502c:	4882      	ldr	r0, [pc, #520]	; (8005238 <main+0x580>)
 800502e:	f004 fba5 	bl	800977c <memset>
					if (MotorDriver) // FDA7000 Driver
 8005032:	4b82      	ldr	r3, [pc, #520]	; (800523c <main+0x584>)
 8005034:	781b      	ldrb	r3, [r3, #0]
 8005036:	2b00      	cmp	r3, #0
 8005038:	d038      	beq.n	80050ac <main+0x3f4>
					{
						
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PositionPulseCmd*EgearRatio); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%de",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError);
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 800503a:	4b81      	ldr	r3, [pc, #516]	; (8005240 <main+0x588>)
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	4618      	mov	r0, r3
 8005040:	f7fb fa82 	bl	8000548 <__aeabi_f2d>
 8005044:	e9c7 0102 	strd	r0, r1, [r7, #8]
 8005048:	4b7e      	ldr	r3, [pc, #504]	; (8005244 <main+0x58c>)
 800504a:	681b      	ldr	r3, [r3, #0]
 800504c:	4618      	mov	r0, r3
 800504e:	f7fb fa7b 	bl	8000548 <__aeabi_f2d>
 8005052:	4680      	mov	r8, r0
 8005054:	4689      	mov	r9, r1
 8005056:	4b7c      	ldr	r3, [pc, #496]	; (8005248 <main+0x590>)
 8005058:	681b      	ldr	r3, [r3, #0]
 800505a:	4618      	mov	r0, r3
 800505c:	f7fb fa74 	bl	8000548 <__aeabi_f2d>
 8005060:	4682      	mov	sl, r0
 8005062:	468b      	mov	fp, r1
 8005064:	4b79      	ldr	r3, [pc, #484]	; (800524c <main+0x594>)
 8005066:	681b      	ldr	r3, [r3, #0]
 8005068:	4618      	mov	r0, r3
 800506a:	f7fb fa6d 	bl	8000548 <__aeabi_f2d>
 800506e:	4602      	mov	r2, r0
 8005070:	460b      	mov	r3, r1
 8005072:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005076:	e9cd ab02 	strd	sl, fp, [sp, #8]
 800507a:	e9cd 8900 	strd	r8, r9, [sp]
 800507e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005082:	4973      	ldr	r1, [pc, #460]	; (8005250 <main+0x598>)
 8005084:	486c      	ldr	r0, [pc, #432]	; (8005238 <main+0x580>)
 8005086:	f004 ffeb 	bl	800a060 <siprintf>
 800508a:	4603      	mov	r3, r0
 800508c:	b2da      	uxtb	r2, r3
 800508e:	4b71      	ldr	r3, [pc, #452]	; (8005254 <main+0x59c>)
 8005090:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio 
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005092:	4b70      	ldr	r3, [pc, #448]	; (8005254 <main+0x59c>)
 8005094:	781b      	ldrb	r3, [r3, #0]
 8005096:	b29a      	uxth	r2, r3
 8005098:	23c8      	movs	r3, #200	; 0xc8
 800509a:	4967      	ldr	r1, [pc, #412]	; (8005238 <main+0x580>)
 800509c:	486e      	ldr	r0, [pc, #440]	; (8005258 <main+0x5a0>)
 800509e:	f003 fb18 	bl	80086d2 <HAL_UART_Transmit>
						ReadMultiRegister(StE03,6); // Read from StE03 -> StE08
 80050a2:	2106      	movs	r1, #6
 80050a4:	200c      	movs	r0, #12
 80050a6:	f7fc fb51 	bl	800174c <ReadMultiRegister>
 80050aa:	e037      	b.n	800511c <main+0x464>
					}
					else // ASDA-A3 Driver
					{
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%d/%d/%.1f/%.1fe",MotorSpeed,SpeedCmd,MotorEncPulse,PulseError,AccZ,AccRef); // s means speed
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccZ,AccRef);
						TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%.1f/%.1fe",MotorSpeed,SpeedCmd,ObjectPosition,AccRef);
 80050ac:	4b64      	ldr	r3, [pc, #400]	; (8005240 <main+0x588>)
 80050ae:	681b      	ldr	r3, [r3, #0]
 80050b0:	4618      	mov	r0, r3
 80050b2:	f7fb fa49 	bl	8000548 <__aeabi_f2d>
 80050b6:	e9c7 0102 	strd	r0, r1, [r7, #8]
 80050ba:	4b62      	ldr	r3, [pc, #392]	; (8005244 <main+0x58c>)
 80050bc:	681b      	ldr	r3, [r3, #0]
 80050be:	4618      	mov	r0, r3
 80050c0:	f7fb fa42 	bl	8000548 <__aeabi_f2d>
 80050c4:	4680      	mov	r8, r0
 80050c6:	4689      	mov	r9, r1
 80050c8:	4b5f      	ldr	r3, [pc, #380]	; (8005248 <main+0x590>)
 80050ca:	681b      	ldr	r3, [r3, #0]
 80050cc:	4618      	mov	r0, r3
 80050ce:	f7fb fa3b 	bl	8000548 <__aeabi_f2d>
 80050d2:	4682      	mov	sl, r0
 80050d4:	468b      	mov	fp, r1
 80050d6:	4b5d      	ldr	r3, [pc, #372]	; (800524c <main+0x594>)
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	4618      	mov	r0, r3
 80050dc:	f7fb fa34 	bl	8000548 <__aeabi_f2d>
 80050e0:	4602      	mov	r2, r0
 80050e2:	460b      	mov	r3, r1
 80050e4:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80050e8:	e9cd ab02 	strd	sl, fp, [sp, #8]
 80050ec:	e9cd 8900 	strd	r8, r9, [sp]
 80050f0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80050f4:	4956      	ldr	r1, [pc, #344]	; (8005250 <main+0x598>)
 80050f6:	4850      	ldr	r0, [pc, #320]	; (8005238 <main+0x580>)
 80050f8:	f004 ffb2 	bl	800a060 <siprintf>
 80050fc:	4603      	mov	r3, r0
 80050fe:	b2da      	uxtb	r2, r3
 8005100:	4b54      	ldr	r3, [pc, #336]	; (8005254 <main+0x59c>)
 8005102:	701a      	strb	r2, [r3, #0]
						//TxPCLen = sprintf(TxPCBuff,"s%.1f/%.1f/%de",MotorSpeed,SpeedCmd,PositionPulseCmd*EgearRatio); // 8 is the Egear ratio 
						//TxPCLen = sprintf(TxPCBuff,"s2/%de",PulseCmd);
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005104:	4b53      	ldr	r3, [pc, #332]	; (8005254 <main+0x59c>)
 8005106:	781b      	ldrb	r3, [r3, #0]
 8005108:	b29a      	uxth	r2, r3
 800510a:	23c8      	movs	r3, #200	; 0xc8
 800510c:	494a      	ldr	r1, [pc, #296]	; (8005238 <main+0x580>)
 800510e:	4852      	ldr	r0, [pc, #328]	; (8005258 <main+0x5a0>)
 8005110:	f003 fadf 	bl	80086d2 <HAL_UART_Transmit>
						// Read 4 words start from 0x012 to 0x015
						// Encoder pulse: 0x012 + 0x013 (2 words)
						// Motor Speed: 0x014 + 0x015 (2 words)
						// Pulse Error: (2 word)
						// Total is 6 words, 1word = 4 bytes
						ReadMultiRegister(ASDA_MotorSpeed,6); 
 8005114:	2106      	movs	r1, #6
 8005116:	2012      	movs	r0, #18
 8005118:	f7fc fb18 	bl	800174c <ReadMultiRegister>
					}					
				}
			}
			if(OutputDataRequest)
 800511c:	4b4f      	ldr	r3, [pc, #316]	; (800525c <main+0x5a4>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b00      	cmp	r3, #0
 8005122:	d02a      	beq.n	800517a <main+0x4c2>
				{
					CountTimerDriverOutput++;
 8005124:	4b4e      	ldr	r3, [pc, #312]	; (8005260 <main+0x5a8>)
 8005126:	881b      	ldrh	r3, [r3, #0]
 8005128:	3301      	adds	r3, #1
 800512a:	b29a      	uxth	r2, r3
 800512c:	4b4c      	ldr	r3, [pc, #304]	; (8005260 <main+0x5a8>)
 800512e:	801a      	strh	r2, [r3, #0]
					if (CountTimerDriverOutput >= 10) // 50*10=500 ms, timer 2 period is 1ms
 8005130:	4b4b      	ldr	r3, [pc, #300]	; (8005260 <main+0x5a8>)
 8005132:	881b      	ldrh	r3, [r3, #0]
 8005134:	2b09      	cmp	r3, #9
 8005136:	d920      	bls.n	800517a <main+0x4c2>
					{
						DriverOutput = ReadLogicF7000Out(); // Read Driver Output
 8005138:	f7fc f90a 	bl	8001350 <ReadLogicF7000Out>
 800513c:	4603      	mov	r3, r0
 800513e:	461a      	mov	r2, r3
 8005140:	4b48      	ldr	r3, [pc, #288]	; (8005264 <main+0x5ac>)
 8005142:	801a      	strh	r2, [r3, #0]
						
						memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005144:	221e      	movs	r2, #30
 8005146:	2100      	movs	r1, #0
 8005148:	483b      	ldr	r0, [pc, #236]	; (8005238 <main+0x580>)
 800514a:	f004 fb17 	bl	800977c <memset>
						TxPCLen = sprintf(TxPCBuff,"o%de",DriverOutput); // 1 means only the driver outputs
 800514e:	4b45      	ldr	r3, [pc, #276]	; (8005264 <main+0x5ac>)
 8005150:	881b      	ldrh	r3, [r3, #0]
 8005152:	461a      	mov	r2, r3
 8005154:	4944      	ldr	r1, [pc, #272]	; (8005268 <main+0x5b0>)
 8005156:	4838      	ldr	r0, [pc, #224]	; (8005238 <main+0x580>)
 8005158:	f004 ff82 	bl	800a060 <siprintf>
 800515c:	4603      	mov	r3, r0
 800515e:	b2da      	uxtb	r2, r3
 8005160:	4b3c      	ldr	r3, [pc, #240]	; (8005254 <main+0x59c>)
 8005162:	701a      	strb	r2, [r3, #0]
						HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005164:	4b3b      	ldr	r3, [pc, #236]	; (8005254 <main+0x59c>)
 8005166:	781b      	ldrb	r3, [r3, #0]
 8005168:	b29a      	uxth	r2, r3
 800516a:	23c8      	movs	r3, #200	; 0xc8
 800516c:	4932      	ldr	r1, [pc, #200]	; (8005238 <main+0x580>)
 800516e:	483a      	ldr	r0, [pc, #232]	; (8005258 <main+0x5a0>)
 8005170:	f003 faaf 	bl	80086d2 <HAL_UART_Transmit>
						
						CountTimerDriverOutput = 0;
 8005174:	4b3a      	ldr	r3, [pc, #232]	; (8005260 <main+0x5a8>)
 8005176:	2200      	movs	r2, #0
 8005178:	801a      	strh	r2, [r3, #0]
			// END Send data to the UI				
		}
		// END 50ms period interrupt
		
		// BEGIN Uart3 receive complete
		if (RxUart3_Cpl_Flag)
 800517a:	4b3c      	ldr	r3, [pc, #240]	; (800526c <main+0x5b4>)
 800517c:	781b      	ldrb	r3, [r3, #0]
 800517e:	b2db      	uxtb	r3, r3
 8005180:	2b00      	cmp	r3, #0
 8005182:	d03b      	beq.n	80051fc <main+0x544>
		{
			RxUart3_Cpl_Flag = false;			
 8005184:	4b39      	ldr	r3, [pc, #228]	; (800526c <main+0x5b4>)
 8005186:	2200      	movs	r2, #0
 8005188:	701a      	strb	r2, [r3, #0]
//			else 
//			{
//				AccZ = AccZ + 10;
//			}

			memset (AccZDataRegion, '\0', sizeof (AccZDataRegion)); // reset buffer
 800518a:	220a      	movs	r2, #10
 800518c:	2100      	movs	r1, #0
 800518e:	4838      	ldr	r0, [pc, #224]	; (8005270 <main+0x5b8>)
 8005190:	f004 faf4 	bl	800977c <memset>
			
			for (uint8_t i = 0; i<= sizeof(RxUart3Buff); i++) // Remove the null byte
 8005194:	2300      	movs	r3, #0
 8005196:	75fb      	strb	r3, [r7, #23]
 8005198:	e00f      	b.n	80051ba <main+0x502>
			{
				if (RxUart3Buff[i] != 0x00)
 800519a:	7dfb      	ldrb	r3, [r7, #23]
 800519c:	4a35      	ldr	r2, [pc, #212]	; (8005274 <main+0x5bc>)
 800519e:	5cd3      	ldrb	r3, [r2, r3]
 80051a0:	b2db      	uxtb	r3, r3
 80051a2:	2b00      	cmp	r3, #0
 80051a4:	d006      	beq.n	80051b4 <main+0x4fc>
				{
					AccZDataRegion[i] = RxUart3Buff[i];
 80051a6:	7dfa      	ldrb	r2, [r7, #23]
 80051a8:	7dfb      	ldrb	r3, [r7, #23]
 80051aa:	4932      	ldr	r1, [pc, #200]	; (8005274 <main+0x5bc>)
 80051ac:	5c8a      	ldrb	r2, [r1, r2]
 80051ae:	b2d1      	uxtb	r1, r2
 80051b0:	4a2f      	ldr	r2, [pc, #188]	; (8005270 <main+0x5b8>)
 80051b2:	54d1      	strb	r1, [r2, r3]
			for (uint8_t i = 0; i<= sizeof(RxUart3Buff); i++) // Remove the null byte
 80051b4:	7dfb      	ldrb	r3, [r7, #23]
 80051b6:	3301      	adds	r3, #1
 80051b8:	75fb      	strb	r3, [r7, #23]
 80051ba:	7dfb      	ldrb	r3, [r7, #23]
 80051bc:	2b0a      	cmp	r3, #10
 80051be:	d9ec      	bls.n	800519a <main+0x4e2>
				}
			}
			if (fabs(atof((char *)RxUart3Buff)) <= 100)
 80051c0:	482c      	ldr	r0, [pc, #176]	; (8005274 <main+0x5bc>)
 80051c2:	f004 faad 	bl	8009720 <atof>
 80051c6:	ec53 2b10 	vmov	r2, r3, d0
 80051ca:	4614      	mov	r4, r2
 80051cc:	f023 4500 	bic.w	r5, r3, #2147483648	; 0x80000000
 80051d0:	f04f 0200 	mov.w	r2, #0
 80051d4:	4b28      	ldr	r3, [pc, #160]	; (8005278 <main+0x5c0>)
 80051d6:	4620      	mov	r0, r4
 80051d8:	4629      	mov	r1, r5
 80051da:	f7fb fc89 	bl	8000af0 <__aeabi_dcmple>
 80051de:	4603      	mov	r3, r0
 80051e0:	2b00      	cmp	r3, #0
 80051e2:	d00b      	beq.n	80051fc <main+0x544>
			{
				AccZ = atof((char *)RxUart3Buff);
 80051e4:	4823      	ldr	r0, [pc, #140]	; (8005274 <main+0x5bc>)
 80051e6:	f004 fa9b 	bl	8009720 <atof>
 80051ea:	ec53 2b10 	vmov	r2, r3, d0
 80051ee:	4610      	mov	r0, r2
 80051f0:	4619      	mov	r1, r3
 80051f2:	f7fb fcf9 	bl	8000be8 <__aeabi_d2f>
 80051f6:	4603      	mov	r3, r0
 80051f8:	4a20      	ldr	r2, [pc, #128]	; (800527c <main+0x5c4>)
 80051fa:	6013      	str	r3, [r2, #0]
//			//HAL_UART_Receive_IT(&huart4,&RxESPData,1);
//		}
// 	 End UART4 (ESP32) process
		
		// BEGIN Process Driver Received Data
		if (RxUart5_Cpl_Flag) // Complete receive data from the driver
 80051fc:	4b20      	ldr	r3, [pc, #128]	; (8005280 <main+0x5c8>)
 80051fe:	781b      	ldrb	r3, [r3, #0]
 8005200:	b2db      	uxtb	r3, r3
 8005202:	2b00      	cmp	r3, #0
 8005204:	f43f ad93 	beq.w	8004d2e <main+0x76>
			{
				RxUart5_Cpl_Flag = false;
 8005208:	4b1d      	ldr	r3, [pc, #116]	; (8005280 <main+0x5c8>)
 800520a:	2200      	movs	r2, #0
 800520c:	701a      	strb	r2, [r3, #0]
				
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 800520e:	4b1d      	ldr	r3, [pc, #116]	; (8005284 <main+0x5cc>)
 8005210:	2200      	movs	r2, #0
 8005212:	701a      	strb	r2, [r3, #0]
 8005214:	e145      	b.n	80054a2 <main+0x7ea>
 8005216:	bf00      	nop
 8005218:	20000434 	.word	0x20000434
 800521c:	2000043f 	.word	0x2000043f
 8005220:	200004e0 	.word	0x200004e0
 8005224:	200004e4 	.word	0x200004e4
 8005228:	20000005 	.word	0x20000005
 800522c:	20000443 	.word	0x20000443
 8005230:	20000438 	.word	0x20000438
 8005234:	20000002 	.word	0x20000002
 8005238:	20000408 	.word	0x20000408
 800523c:	20000003 	.word	0x20000003
 8005240:	200004d8 	.word	0x200004d8
 8005244:	200004f4 	.word	0x200004f4
 8005248:	20000534 	.word	0x20000534
 800524c:	2000000c 	.word	0x2000000c
 8005250:	0800df24 	.word	0x0800df24
 8005254:	20000426 	.word	0x20000426
 8005258:	20000338 	.word	0x20000338
 800525c:	20000001 	.word	0x20000001
 8005260:	2000044c 	.word	0x2000044c
 8005264:	2000044e 	.word	0x2000044e
 8005268:	0800df3c 	.word	0x0800df3c
 800526c:	20000431 	.word	0x20000431
 8005270:	200003d0 	.word	0x200003d0
 8005274:	200003c4 	.word	0x200003c4
 8005278:	40590000 	.word	0x40590000
 800527c:	20000528 	.word	0x20000528
 8005280:	20000430 	.word	0x20000430
 8005284:	20000427 	.word	0x20000427
				{
					if (RxDriverBuff[i] == DriverID)
 8005288:	4ba5      	ldr	r3, [pc, #660]	; (8005520 <main+0x868>)
 800528a:	781b      	ldrb	r3, [r3, #0]
 800528c:	461a      	mov	r2, r3
 800528e:	4ba5      	ldr	r3, [pc, #660]	; (8005524 <main+0x86c>)
 8005290:	5c9b      	ldrb	r3, [r3, r2]
 8005292:	b2db      	uxtb	r3, r3
 8005294:	2b01      	cmp	r3, #1
 8005296:	f040 80fe 	bne.w	8005496 <main+0x7de>
					{
						if (RxDriverBuff[1+i] == 3)
 800529a:	4ba1      	ldr	r3, [pc, #644]	; (8005520 <main+0x868>)
 800529c:	781b      	ldrb	r3, [r3, #0]
 800529e:	3301      	adds	r3, #1
 80052a0:	4aa0      	ldr	r2, [pc, #640]	; (8005524 <main+0x86c>)
 80052a2:	5cd3      	ldrb	r3, [r2, r3]
 80052a4:	b2db      	uxtb	r3, r3
 80052a6:	2b03      	cmp	r3, #3
 80052a8:	f040 80ad 	bne.w	8005406 <main+0x74e>
						{							
							if (MotorDriver) // FDA7000
 80052ac:	4b9e      	ldr	r3, [pc, #632]	; (8005528 <main+0x870>)
 80052ae:	781b      	ldrb	r3, [r3, #0]
 80052b0:	2b00      	cmp	r3, #0
 80052b2:	d044      	beq.n	800533e <main+0x686>
							{	
								SpeedValueRegion[0] = RxDriverBuff[6+i];
 80052b4:	4b9a      	ldr	r3, [pc, #616]	; (8005520 <main+0x868>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	3306      	adds	r3, #6
 80052ba:	4a9a      	ldr	r2, [pc, #616]	; (8005524 <main+0x86c>)
 80052bc:	5cd3      	ldrb	r3, [r2, r3]
 80052be:	b2da      	uxtb	r2, r3
 80052c0:	4b9a      	ldr	r3, [pc, #616]	; (800552c <main+0x874>)
 80052c2:	701a      	strb	r2, [r3, #0]
								SpeedValueRegion[1] = RxDriverBuff[5+i];
 80052c4:	4b96      	ldr	r3, [pc, #600]	; (8005520 <main+0x868>)
 80052c6:	781b      	ldrb	r3, [r3, #0]
 80052c8:	3305      	adds	r3, #5
 80052ca:	4a96      	ldr	r2, [pc, #600]	; (8005524 <main+0x86c>)
 80052cc:	5cd3      	ldrb	r3, [r2, r3]
 80052ce:	b2da      	uxtb	r2, r3
 80052d0:	4b96      	ldr	r3, [pc, #600]	; (800552c <main+0x874>)
 80052d2:	705a      	strb	r2, [r3, #1]
								SpeedValueRegion[2] = RxDriverBuff[4+i];
 80052d4:	4b92      	ldr	r3, [pc, #584]	; (8005520 <main+0x868>)
 80052d6:	781b      	ldrb	r3, [r3, #0]
 80052d8:	3304      	adds	r3, #4
 80052da:	4a92      	ldr	r2, [pc, #584]	; (8005524 <main+0x86c>)
 80052dc:	5cd3      	ldrb	r3, [r2, r3]
 80052de:	b2da      	uxtb	r2, r3
 80052e0:	4b92      	ldr	r3, [pc, #584]	; (800552c <main+0x874>)
 80052e2:	709a      	strb	r2, [r3, #2]
								SpeedValueRegion[3] = RxDriverBuff[3+i];
 80052e4:	4b8e      	ldr	r3, [pc, #568]	; (8005520 <main+0x868>)
 80052e6:	781b      	ldrb	r3, [r3, #0]
 80052e8:	3303      	adds	r3, #3
 80052ea:	4a8e      	ldr	r2, [pc, #568]	; (8005524 <main+0x86c>)
 80052ec:	5cd3      	ldrb	r3, [r2, r3]
 80052ee:	b2da      	uxtb	r2, r3
 80052f0:	4b8e      	ldr	r3, [pc, #568]	; (800552c <main+0x874>)
 80052f2:	70da      	strb	r2, [r3, #3]
 80052f4:	4b8d      	ldr	r3, [pc, #564]	; (800552c <main+0x874>)
 80052f6:	681b      	ldr	r3, [r3, #0]
								
								memcpy(&MotorSpeed, SpeedValueRegion, 4);		
 80052f8:	4a8d      	ldr	r2, [pc, #564]	; (8005530 <main+0x878>)
 80052fa:	6013      	str	r3, [r2, #0]
//								{
//									MotorSpeed = MotorSpeedBuff;
//								}
								
								
								MotorEncPulse = (RxDriverBuff[19+i] << 24) | (RxDriverBuff[20+i] << 16) | (RxDriverBuff[21+i] << 8) | RxDriverBuff[22+i];								
 80052fc:	4b88      	ldr	r3, [pc, #544]	; (8005520 <main+0x868>)
 80052fe:	781b      	ldrb	r3, [r3, #0]
 8005300:	3313      	adds	r3, #19
 8005302:	4a88      	ldr	r2, [pc, #544]	; (8005524 <main+0x86c>)
 8005304:	5cd3      	ldrb	r3, [r2, r3]
 8005306:	b2db      	uxtb	r3, r3
 8005308:	061a      	lsls	r2, r3, #24
 800530a:	4b85      	ldr	r3, [pc, #532]	; (8005520 <main+0x868>)
 800530c:	781b      	ldrb	r3, [r3, #0]
 800530e:	3314      	adds	r3, #20
 8005310:	4984      	ldr	r1, [pc, #528]	; (8005524 <main+0x86c>)
 8005312:	5ccb      	ldrb	r3, [r1, r3]
 8005314:	b2db      	uxtb	r3, r3
 8005316:	041b      	lsls	r3, r3, #16
 8005318:	431a      	orrs	r2, r3
 800531a:	4b81      	ldr	r3, [pc, #516]	; (8005520 <main+0x868>)
 800531c:	781b      	ldrb	r3, [r3, #0]
 800531e:	3315      	adds	r3, #21
 8005320:	4980      	ldr	r1, [pc, #512]	; (8005524 <main+0x86c>)
 8005322:	5ccb      	ldrb	r3, [r1, r3]
 8005324:	b2db      	uxtb	r3, r3
 8005326:	021b      	lsls	r3, r3, #8
 8005328:	4313      	orrs	r3, r2
 800532a:	4a7d      	ldr	r2, [pc, #500]	; (8005520 <main+0x868>)
 800532c:	7812      	ldrb	r2, [r2, #0]
 800532e:	3216      	adds	r2, #22
 8005330:	497c      	ldr	r1, [pc, #496]	; (8005524 <main+0x86c>)
 8005332:	5c8a      	ldrb	r2, [r1, r2]
 8005334:	b2d2      	uxtb	r2, r2
 8005336:	4313      	orrs	r3, r2
 8005338:	4a7e      	ldr	r2, [pc, #504]	; (8005534 <main+0x87c>)
 800533a:	6013      	str	r3, [r2, #0]
 800533c:	e059      	b.n	80053f2 <main+0x73a>
								
								//PulseError = (RxDriverBuff[23+i] << 24) | (RxDriverBuff[24+i] << 16) | (RxDriverBuff[25+i] << 8) | RxDriverBuff[26+i];
							}
							else // ASDA-A3
							{								
								MotorSpeedBuff = (float)((RxDriverBuff[5+i] << 24) | (RxDriverBuff[6+i] << 16) | (RxDriverBuff[3+i] << 8) | RxDriverBuff[4+i])/((float)-10.0); // Minus to Reverse
 800533e:	4b78      	ldr	r3, [pc, #480]	; (8005520 <main+0x868>)
 8005340:	781b      	ldrb	r3, [r3, #0]
 8005342:	3305      	adds	r3, #5
 8005344:	4a77      	ldr	r2, [pc, #476]	; (8005524 <main+0x86c>)
 8005346:	5cd3      	ldrb	r3, [r2, r3]
 8005348:	b2db      	uxtb	r3, r3
 800534a:	061a      	lsls	r2, r3, #24
 800534c:	4b74      	ldr	r3, [pc, #464]	; (8005520 <main+0x868>)
 800534e:	781b      	ldrb	r3, [r3, #0]
 8005350:	3306      	adds	r3, #6
 8005352:	4974      	ldr	r1, [pc, #464]	; (8005524 <main+0x86c>)
 8005354:	5ccb      	ldrb	r3, [r1, r3]
 8005356:	b2db      	uxtb	r3, r3
 8005358:	041b      	lsls	r3, r3, #16
 800535a:	431a      	orrs	r2, r3
 800535c:	4b70      	ldr	r3, [pc, #448]	; (8005520 <main+0x868>)
 800535e:	781b      	ldrb	r3, [r3, #0]
 8005360:	3303      	adds	r3, #3
 8005362:	4970      	ldr	r1, [pc, #448]	; (8005524 <main+0x86c>)
 8005364:	5ccb      	ldrb	r3, [r1, r3]
 8005366:	b2db      	uxtb	r3, r3
 8005368:	021b      	lsls	r3, r3, #8
 800536a:	4313      	orrs	r3, r2
 800536c:	4a6c      	ldr	r2, [pc, #432]	; (8005520 <main+0x868>)
 800536e:	7812      	ldrb	r2, [r2, #0]
 8005370:	3204      	adds	r2, #4
 8005372:	496c      	ldr	r1, [pc, #432]	; (8005524 <main+0x86c>)
 8005374:	5c8a      	ldrb	r2, [r1, r2]
 8005376:	b2d2      	uxtb	r2, r2
 8005378:	4313      	orrs	r3, r2
 800537a:	ee07 3a90 	vmov	s15, r3
 800537e:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8005382:	eefa 6a04 	vmov.f32	s13, #164	; 0xc1200000 -10.0
 8005386:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800538a:	4b6b      	ldr	r3, [pc, #428]	; (8005538 <main+0x880>)
 800538c:	edc3 7a00 	vstr	s15, [r3]
								
								if (fabs(MotorSpeedBuff) <= 2000)
 8005390:	4b69      	ldr	r3, [pc, #420]	; (8005538 <main+0x880>)
 8005392:	edd3 7a00 	vldr	s15, [r3]
 8005396:	eef0 7ae7 	vabs.f32	s15, s15
 800539a:	ed9f 7a68 	vldr	s14, [pc, #416]	; 800553c <main+0x884>
 800539e:	eef4 7ac7 	vcmpe.f32	s15, s14
 80053a2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80053a6:	d803      	bhi.n	80053b0 <main+0x6f8>
								{
									MotorSpeed = MotorSpeedBuff;
 80053a8:	4b63      	ldr	r3, [pc, #396]	; (8005538 <main+0x880>)
 80053aa:	681b      	ldr	r3, [r3, #0]
 80053ac:	4a60      	ldr	r2, [pc, #384]	; (8005530 <main+0x878>)
 80053ae:	6013      	str	r3, [r2, #0]
								}
								
								MotorEncPulse = -((RxDriverBuff[9+i] << 24) | (RxDriverBuff[10+i] << 16) | (RxDriverBuff[7+i] << 8) | RxDriverBuff[8+i]); // Minus to Reverse
 80053b0:	4b5b      	ldr	r3, [pc, #364]	; (8005520 <main+0x868>)
 80053b2:	781b      	ldrb	r3, [r3, #0]
 80053b4:	3309      	adds	r3, #9
 80053b6:	4a5b      	ldr	r2, [pc, #364]	; (8005524 <main+0x86c>)
 80053b8:	5cd3      	ldrb	r3, [r2, r3]
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	061a      	lsls	r2, r3, #24
 80053be:	4b58      	ldr	r3, [pc, #352]	; (8005520 <main+0x868>)
 80053c0:	781b      	ldrb	r3, [r3, #0]
 80053c2:	330a      	adds	r3, #10
 80053c4:	4957      	ldr	r1, [pc, #348]	; (8005524 <main+0x86c>)
 80053c6:	5ccb      	ldrb	r3, [r1, r3]
 80053c8:	b2db      	uxtb	r3, r3
 80053ca:	041b      	lsls	r3, r3, #16
 80053cc:	431a      	orrs	r2, r3
 80053ce:	4b54      	ldr	r3, [pc, #336]	; (8005520 <main+0x868>)
 80053d0:	781b      	ldrb	r3, [r3, #0]
 80053d2:	3307      	adds	r3, #7
 80053d4:	4953      	ldr	r1, [pc, #332]	; (8005524 <main+0x86c>)
 80053d6:	5ccb      	ldrb	r3, [r1, r3]
 80053d8:	b2db      	uxtb	r3, r3
 80053da:	021b      	lsls	r3, r3, #8
 80053dc:	4313      	orrs	r3, r2
 80053de:	4a50      	ldr	r2, [pc, #320]	; (8005520 <main+0x868>)
 80053e0:	7812      	ldrb	r2, [r2, #0]
 80053e2:	3208      	adds	r2, #8
 80053e4:	494f      	ldr	r1, [pc, #316]	; (8005524 <main+0x86c>)
 80053e6:	5c8a      	ldrb	r2, [r1, r2]
 80053e8:	b2d2      	uxtb	r2, r2
 80053ea:	4313      	orrs	r3, r2
 80053ec:	425b      	negs	r3, r3
 80053ee:	4a51      	ldr	r2, [pc, #324]	; (8005534 <main+0x87c>)
 80053f0:	6013      	str	r3, [r2, #0]
								//PulseError = ((RxDriverBuff[13+i] << 24) | (RxDriverBuff[14+i] << 16) | (RxDriverBuff[11+i] << 8) | RxDriverBuff[12+i]);
								
								//ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/AsdaEncoderResolution; // Calculate Object Position in m
							}			
							
							memset (RxDriverBuff, '\0', sizeof (RxDriverBuff)); // reset buffer
 80053f2:	221e      	movs	r2, #30
 80053f4:	2100      	movs	r1, #0
 80053f6:	484b      	ldr	r0, [pc, #300]	; (8005524 <main+0x86c>)
 80053f8:	f004 f9c0 	bl	800977c <memset>
							HAL_UART_Receive_IT(&huart5,&RxDriverData,1); // Receive 1 byte for the next time
 80053fc:	2201      	movs	r2, #1
 80053fe:	4950      	ldr	r1, [pc, #320]	; (8005540 <main+0x888>)
 8005400:	4850      	ldr	r0, [pc, #320]	; (8005544 <main+0x88c>)
 8005402:	f003 f9f8 	bl	80087f6 <HAL_UART_Receive_IT>
						}
						if (RxDriverBuff[1] == 6) // Writing to a register
 8005406:	4b47      	ldr	r3, [pc, #284]	; (8005524 <main+0x86c>)
 8005408:	785b      	ldrb	r3, [r3, #1]
 800540a:	b2db      	uxtb	r3, r3
 800540c:	2b06      	cmp	r3, #6
 800540e:	d142      	bne.n	8005496 <main+0x7de>
						{
							// Send to PC to check the writing result
							memset (TxPCBuff, '\0', sizeof (TxPCBuff)); // reset
 8005410:	221e      	movs	r2, #30
 8005412:	2100      	movs	r1, #0
 8005414:	484c      	ldr	r0, [pc, #304]	; (8005548 <main+0x890>)
 8005416:	f004 f9b1 	bl	800977c <memset>
							TxPCLen = sprintf(TxPCBuff,"w%d/%d/%d/%d/%d/%d/%d/%d/%d/e",RxDriverBuff[0],RxDriverBuff[1],RxDriverBuff[2],RxDriverBuff[3],RxDriverBuff[4],RxDriverBuff[5],RxDriverBuff[6],RxDriverBuff[7],RxDriverBuff[8]); 
 800541a:	4b42      	ldr	r3, [pc, #264]	; (8005524 <main+0x86c>)
 800541c:	781b      	ldrb	r3, [r3, #0]
 800541e:	b2db      	uxtb	r3, r3
 8005420:	469c      	mov	ip, r3
 8005422:	4b40      	ldr	r3, [pc, #256]	; (8005524 <main+0x86c>)
 8005424:	785b      	ldrb	r3, [r3, #1]
 8005426:	b2db      	uxtb	r3, r3
 8005428:	469e      	mov	lr, r3
 800542a:	4b3e      	ldr	r3, [pc, #248]	; (8005524 <main+0x86c>)
 800542c:	789b      	ldrb	r3, [r3, #2]
 800542e:	b2db      	uxtb	r3, r3
 8005430:	461a      	mov	r2, r3
 8005432:	4b3c      	ldr	r3, [pc, #240]	; (8005524 <main+0x86c>)
 8005434:	78db      	ldrb	r3, [r3, #3]
 8005436:	b2db      	uxtb	r3, r3
 8005438:	4619      	mov	r1, r3
 800543a:	4b3a      	ldr	r3, [pc, #232]	; (8005524 <main+0x86c>)
 800543c:	791b      	ldrb	r3, [r3, #4]
 800543e:	b2db      	uxtb	r3, r3
 8005440:	4618      	mov	r0, r3
 8005442:	4b38      	ldr	r3, [pc, #224]	; (8005524 <main+0x86c>)
 8005444:	795b      	ldrb	r3, [r3, #5]
 8005446:	b2db      	uxtb	r3, r3
 8005448:	461e      	mov	r6, r3
 800544a:	4b36      	ldr	r3, [pc, #216]	; (8005524 <main+0x86c>)
 800544c:	799b      	ldrb	r3, [r3, #6]
 800544e:	b2db      	uxtb	r3, r3
 8005450:	60bb      	str	r3, [r7, #8]
 8005452:	4b34      	ldr	r3, [pc, #208]	; (8005524 <main+0x86c>)
 8005454:	79db      	ldrb	r3, [r3, #7]
 8005456:	b2db      	uxtb	r3, r3
 8005458:	607b      	str	r3, [r7, #4]
 800545a:	4b32      	ldr	r3, [pc, #200]	; (8005524 <main+0x86c>)
 800545c:	7a1b      	ldrb	r3, [r3, #8]
 800545e:	b2db      	uxtb	r3, r3
 8005460:	9306      	str	r3, [sp, #24]
 8005462:	687b      	ldr	r3, [r7, #4]
 8005464:	9305      	str	r3, [sp, #20]
 8005466:	68bb      	ldr	r3, [r7, #8]
 8005468:	9304      	str	r3, [sp, #16]
 800546a:	9603      	str	r6, [sp, #12]
 800546c:	9002      	str	r0, [sp, #8]
 800546e:	9101      	str	r1, [sp, #4]
 8005470:	9200      	str	r2, [sp, #0]
 8005472:	4673      	mov	r3, lr
 8005474:	4662      	mov	r2, ip
 8005476:	4935      	ldr	r1, [pc, #212]	; (800554c <main+0x894>)
 8005478:	4833      	ldr	r0, [pc, #204]	; (8005548 <main+0x890>)
 800547a:	f004 fdf1 	bl	800a060 <siprintf>
 800547e:	4603      	mov	r3, r0
 8005480:	b2da      	uxtb	r2, r3
 8005482:	4b33      	ldr	r3, [pc, #204]	; (8005550 <main+0x898>)
 8005484:	701a      	strb	r2, [r3, #0]
							HAL_UART_Transmit(&huart6,(uint8_t *)TxPCBuff,TxPCLen,200); // use uart6 to send
 8005486:	4b32      	ldr	r3, [pc, #200]	; (8005550 <main+0x898>)
 8005488:	781b      	ldrb	r3, [r3, #0]
 800548a:	b29a      	uxth	r2, r3
 800548c:	23c8      	movs	r3, #200	; 0xc8
 800548e:	492e      	ldr	r1, [pc, #184]	; (8005548 <main+0x890>)
 8005490:	4830      	ldr	r0, [pc, #192]	; (8005554 <main+0x89c>)
 8005492:	f003 f91e 	bl	80086d2 <HAL_UART_Transmit>
				for (i = 0; i<= sizeof(RxDriverBuff); i++)
 8005496:	4b22      	ldr	r3, [pc, #136]	; (8005520 <main+0x868>)
 8005498:	781b      	ldrb	r3, [r3, #0]
 800549a:	3301      	adds	r3, #1
 800549c:	b2da      	uxtb	r2, r3
 800549e:	4b20      	ldr	r3, [pc, #128]	; (8005520 <main+0x868>)
 80054a0:	701a      	strb	r2, [r3, #0]
 80054a2:	4b1f      	ldr	r3, [pc, #124]	; (8005520 <main+0x868>)
 80054a4:	781b      	ldrb	r3, [r3, #0]
 80054a6:	2b1e      	cmp	r3, #30
 80054a8:	f67f aeee 	bls.w	8005288 <main+0x5d0>
						}
						//break;						
					}
				}
				ObjectPosition = 2*3.14*DrumRadius*(MotorEncPulse-OriginPulse)/EncoderResolution; // Calculate Object Position in m
 80054ac:	4b2a      	ldr	r3, [pc, #168]	; (8005558 <main+0x8a0>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	4618      	mov	r0, r3
 80054b2:	f7fb f849 	bl	8000548 <__aeabi_f2d>
 80054b6:	a318      	add	r3, pc, #96	; (adr r3, 8005518 <main+0x860>)
 80054b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054bc:	f7fb f89c 	bl	80005f8 <__aeabi_dmul>
 80054c0:	4602      	mov	r2, r0
 80054c2:	460b      	mov	r3, r1
 80054c4:	4690      	mov	r8, r2
 80054c6:	4699      	mov	r9, r3
 80054c8:	4b1a      	ldr	r3, [pc, #104]	; (8005534 <main+0x87c>)
 80054ca:	681a      	ldr	r2, [r3, #0]
 80054cc:	4b23      	ldr	r3, [pc, #140]	; (800555c <main+0x8a4>)
 80054ce:	681b      	ldr	r3, [r3, #0]
 80054d0:	1ad3      	subs	r3, r2, r3
 80054d2:	4618      	mov	r0, r3
 80054d4:	f7fb f826 	bl	8000524 <__aeabi_i2d>
 80054d8:	4602      	mov	r2, r0
 80054da:	460b      	mov	r3, r1
 80054dc:	4640      	mov	r0, r8
 80054de:	4649      	mov	r1, r9
 80054e0:	f7fb f88a 	bl	80005f8 <__aeabi_dmul>
 80054e4:	4602      	mov	r2, r0
 80054e6:	460b      	mov	r3, r1
 80054e8:	4690      	mov	r8, r2
 80054ea:	4699      	mov	r9, r3
 80054ec:	4b1c      	ldr	r3, [pc, #112]	; (8005560 <main+0x8a8>)
 80054ee:	881b      	ldrh	r3, [r3, #0]
 80054f0:	4618      	mov	r0, r3
 80054f2:	f7fb f817 	bl	8000524 <__aeabi_i2d>
 80054f6:	4602      	mov	r2, r0
 80054f8:	460b      	mov	r3, r1
 80054fa:	4640      	mov	r0, r8
 80054fc:	4649      	mov	r1, r9
 80054fe:	f7fb f9a5 	bl	800084c <__aeabi_ddiv>
 8005502:	4602      	mov	r2, r0
 8005504:	460b      	mov	r3, r1
 8005506:	4610      	mov	r0, r2
 8005508:	4619      	mov	r1, r3
 800550a:	f7fb fb6d 	bl	8000be8 <__aeabi_d2f>
 800550e:	4603      	mov	r3, r0
 8005510:	4a14      	ldr	r2, [pc, #80]	; (8005564 <main+0x8ac>)
 8005512:	6013      	str	r3, [r2, #0]
		if(RxUart6_Cpl_Flag) // If data is completely received, a command is sent from the UI
 8005514:	e40b      	b.n	8004d2e <main+0x76>
 8005516:	bf00      	nop
 8005518:	51eb851f 	.word	0x51eb851f
 800551c:	40191eb8 	.word	0x40191eb8
 8005520:	20000427 	.word	0x20000427
 8005524:	200003a4 	.word	0x200003a4
 8005528:	20000003 	.word	0x20000003
 800552c:	20000428 	.word	0x20000428
 8005530:	200004d8 	.word	0x200004d8
 8005534:	200004e0 	.word	0x200004e0
 8005538:	200004dc 	.word	0x200004dc
 800553c:	44fa0000 	.word	0x44fa0000
 8005540:	20000405 	.word	0x20000405
 8005544:	200002b0 	.word	0x200002b0
 8005548:	20000408 	.word	0x20000408
 800554c:	0800df44 	.word	0x0800df44
 8005550:	20000426 	.word	0x20000426
 8005554:	20000338 	.word	0x20000338
 8005558:	20000458 	.word	0x20000458
 800555c:	200004e4 	.word	0x200004e4
 8005560:	20000008 	.word	0x20000008
 8005564:	20000534 	.word	0x20000534

08005568 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8005568:	b580      	push	{r7, lr}
 800556a:	b094      	sub	sp, #80	; 0x50
 800556c:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800556e:	f107 0320 	add.w	r3, r7, #32
 8005572:	2230      	movs	r2, #48	; 0x30
 8005574:	2100      	movs	r1, #0
 8005576:	4618      	mov	r0, r3
 8005578:	f004 f900 	bl	800977c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800557c:	f107 030c 	add.w	r3, r7, #12
 8005580:	2200      	movs	r2, #0
 8005582:	601a      	str	r2, [r3, #0]
 8005584:	605a      	str	r2, [r3, #4]
 8005586:	609a      	str	r2, [r3, #8]
 8005588:	60da      	str	r2, [r3, #12]
 800558a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800558c:	2300      	movs	r3, #0
 800558e:	60bb      	str	r3, [r7, #8]
 8005590:	4b28      	ldr	r3, [pc, #160]	; (8005634 <SystemClock_Config+0xcc>)
 8005592:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005594:	4a27      	ldr	r2, [pc, #156]	; (8005634 <SystemClock_Config+0xcc>)
 8005596:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800559a:	6413      	str	r3, [r2, #64]	; 0x40
 800559c:	4b25      	ldr	r3, [pc, #148]	; (8005634 <SystemClock_Config+0xcc>)
 800559e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80055a4:	60bb      	str	r3, [r7, #8]
 80055a6:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80055a8:	2300      	movs	r3, #0
 80055aa:	607b      	str	r3, [r7, #4]
 80055ac:	4b22      	ldr	r3, [pc, #136]	; (8005638 <SystemClock_Config+0xd0>)
 80055ae:	681b      	ldr	r3, [r3, #0]
 80055b0:	4a21      	ldr	r2, [pc, #132]	; (8005638 <SystemClock_Config+0xd0>)
 80055b2:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80055b6:	6013      	str	r3, [r2, #0]
 80055b8:	4b1f      	ldr	r3, [pc, #124]	; (8005638 <SystemClock_Config+0xd0>)
 80055ba:	681b      	ldr	r3, [r3, #0]
 80055bc:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80055c0:	607b      	str	r3, [r7, #4]
 80055c2:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 80055c4:	2301      	movs	r3, #1
 80055c6:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 80055c8:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80055cc:	627b      	str	r3, [r7, #36]	; 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80055ce:	2302      	movs	r3, #2
 80055d0:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 80055d2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80055d6:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 12;
 80055d8:	230c      	movs	r3, #12
 80055da:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 336;
 80055dc:	f44f 73a8 	mov.w	r3, #336	; 0x150
 80055e0:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80055e2:	2302      	movs	r3, #2
 80055e4:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80055e6:	2304      	movs	r3, #4
 80055e8:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80055ea:	f107 0320 	add.w	r3, r7, #32
 80055ee:	4618      	mov	r0, r3
 80055f0:	f001 fcfa 	bl	8006fe8 <HAL_RCC_OscConfig>
 80055f4:	4603      	mov	r3, r0
 80055f6:	2b00      	cmp	r3, #0
 80055f8:	d001      	beq.n	80055fe <SystemClock_Config+0x96>
  {
    Error_Handler();
 80055fa:	f000 faff 	bl	8005bfc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80055fe:	230f      	movs	r3, #15
 8005600:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8005602:	2302      	movs	r3, #2
 8005604:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8005606:	2300      	movs	r3, #0
 8005608:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800560a:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 800560e:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV4;
 8005610:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8005614:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 8005616:	f107 030c 	add.w	r3, r7, #12
 800561a:	2105      	movs	r1, #5
 800561c:	4618      	mov	r0, r3
 800561e:	f001 ff5b 	bl	80074d8 <HAL_RCC_ClockConfig>
 8005622:	4603      	mov	r3, r0
 8005624:	2b00      	cmp	r3, #0
 8005626:	d001      	beq.n	800562c <SystemClock_Config+0xc4>
  {
    Error_Handler();
 8005628:	f000 fae8 	bl	8005bfc <Error_Handler>
  }
}
 800562c:	bf00      	nop
 800562e:	3750      	adds	r7, #80	; 0x50
 8005630:	46bd      	mov	sp, r7
 8005632:	bd80      	pop	{r7, pc}
 8005634:	40023800 	.word	0x40023800
 8005638:	40007000 	.word	0x40007000

0800563c <MX_NVIC_Init>:
/**
  * @brief NVIC Configuration.
  * @retval None
  */
static void MX_NVIC_Init(void)
{
 800563c:	b580      	push	{r7, lr}
 800563e:	af00      	add	r7, sp, #0
  /* USART6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8005640:	2200      	movs	r2, #0
 8005642:	2100      	movs	r1, #0
 8005644:	2047      	movs	r0, #71	; 0x47
 8005646:	f000 ff36 	bl	80064b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART6_IRQn);
 800564a:	2047      	movs	r0, #71	; 0x47
 800564c:	f000 ff4f 	bl	80064ee <HAL_NVIC_EnableIRQ>
  /* USART3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART3_IRQn, 1, 0);
 8005650:	2200      	movs	r2, #0
 8005652:	2101      	movs	r1, #1
 8005654:	2027      	movs	r0, #39	; 0x27
 8005656:	f000 ff2e 	bl	80064b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART3_IRQn);
 800565a:	2027      	movs	r0, #39	; 0x27
 800565c:	f000 ff47 	bl	80064ee <HAL_NVIC_EnableIRQ>
  /* TIM3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM3_IRQn, 2, 0);
 8005660:	2200      	movs	r2, #0
 8005662:	2102      	movs	r1, #2
 8005664:	201d      	movs	r0, #29
 8005666:	f000 ff26 	bl	80064b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM3_IRQn);
 800566a:	201d      	movs	r0, #29
 800566c:	f000 ff3f 	bl	80064ee <HAL_NVIC_EnableIRQ>
  /* UART5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(UART5_IRQn, 4, 0);
 8005670:	2200      	movs	r2, #0
 8005672:	2104      	movs	r1, #4
 8005674:	2035      	movs	r0, #53	; 0x35
 8005676:	f000 ff1e 	bl	80064b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(UART5_IRQn);
 800567a:	2035      	movs	r0, #53	; 0x35
 800567c:	f000 ff37 	bl	80064ee <HAL_NVIC_EnableIRQ>
  /* TIM2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(TIM2_IRQn, 3, 0);
 8005680:	2200      	movs	r2, #0
 8005682:	2103      	movs	r1, #3
 8005684:	201c      	movs	r0, #28
 8005686:	f000 ff16 	bl	80064b6 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(TIM2_IRQn);
 800568a:	201c      	movs	r0, #28
 800568c:	f000 ff2f 	bl	80064ee <HAL_NVIC_EnableIRQ>
}
 8005690:	bf00      	nop
 8005692:	bd80      	pop	{r7, pc}

08005694 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8005694:	b580      	push	{r7, lr}
 8005696:	b08a      	sub	sp, #40	; 0x28
 8005698:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800569a:	f107 0318 	add.w	r3, r7, #24
 800569e:	2200      	movs	r2, #0
 80056a0:	601a      	str	r2, [r3, #0]
 80056a2:	605a      	str	r2, [r3, #4]
 80056a4:	609a      	str	r2, [r3, #8]
 80056a6:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80056a8:	f107 0310 	add.w	r3, r7, #16
 80056ac:	2200      	movs	r2, #0
 80056ae:	601a      	str	r2, [r3, #0]
 80056b0:	605a      	str	r2, [r3, #4]
  TIM_IC_InitTypeDef sConfigIC = {0};
 80056b2:	463b      	mov	r3, r7
 80056b4:	2200      	movs	r2, #0
 80056b6:	601a      	str	r2, [r3, #0]
 80056b8:	605a      	str	r2, [r3, #4]
 80056ba:	609a      	str	r2, [r3, #8]
 80056bc:	60da      	str	r2, [r3, #12]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 80056be:	4b31      	ldr	r3, [pc, #196]	; (8005784 <MX_TIM2_Init+0xf0>)
 80056c0:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 80056c4:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 10;
 80056c6:	4b2f      	ldr	r3, [pc, #188]	; (8005784 <MX_TIM2_Init+0xf0>)
 80056c8:	220a      	movs	r2, #10
 80056ca:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 80056cc:	4b2d      	ldr	r3, [pc, #180]	; (8005784 <MX_TIM2_Init+0xf0>)
 80056ce:	2200      	movs	r2, #0
 80056d0:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 8400;
 80056d2:	4b2c      	ldr	r3, [pc, #176]	; (8005784 <MX_TIM2_Init+0xf0>)
 80056d4:	f242 02d0 	movw	r2, #8400	; 0x20d0
 80056d8:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80056da:	4b2a      	ldr	r3, [pc, #168]	; (8005784 <MX_TIM2_Init+0xf0>)
 80056dc:	2200      	movs	r2, #0
 80056de:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_ENABLE;
 80056e0:	4b28      	ldr	r3, [pc, #160]	; (8005784 <MX_TIM2_Init+0xf0>)
 80056e2:	2280      	movs	r2, #128	; 0x80
 80056e4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80056e6:	4827      	ldr	r0, [pc, #156]	; (8005784 <MX_TIM2_Init+0xf0>)
 80056e8:	f002 f8d6 	bl	8007898 <HAL_TIM_Base_Init>
 80056ec:	4603      	mov	r3, r0
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d001      	beq.n	80056f6 <MX_TIM2_Init+0x62>
  {
    Error_Handler();
 80056f2:	f000 fa83 	bl	8005bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80056f6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80056fa:	61bb      	str	r3, [r7, #24]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80056fc:	f107 0318 	add.w	r3, r7, #24
 8005700:	4619      	mov	r1, r3
 8005702:	4820      	ldr	r0, [pc, #128]	; (8005784 <MX_TIM2_Init+0xf0>)
 8005704:	f002 fbb4 	bl	8007e70 <HAL_TIM_ConfigClockSource>
 8005708:	4603      	mov	r3, r0
 800570a:	2b00      	cmp	r3, #0
 800570c:	d001      	beq.n	8005712 <MX_TIM2_Init+0x7e>
  {
    Error_Handler();
 800570e:	f000 fa75 	bl	8005bfc <Error_Handler>
  }
  if (HAL_TIM_IC_Init(&htim2) != HAL_OK)
 8005712:	481c      	ldr	r0, [pc, #112]	; (8005784 <MX_TIM2_Init+0xf0>)
 8005714:	f002 f9af 	bl	8007a76 <HAL_TIM_IC_Init>
 8005718:	4603      	mov	r3, r0
 800571a:	2b00      	cmp	r3, #0
 800571c:	d001      	beq.n	8005722 <MX_TIM2_Init+0x8e>
  {
    Error_Handler();
 800571e:	f000 fa6d 	bl	8005bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_UPDATE;
 8005722:	2320      	movs	r3, #32
 8005724:	613b      	str	r3, [r7, #16]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8005726:	2300      	movs	r3, #0
 8005728:	617b      	str	r3, [r7, #20]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800572a:	f107 0310 	add.w	r3, r7, #16
 800572e:	4619      	mov	r1, r3
 8005730:	4814      	ldr	r0, [pc, #80]	; (8005784 <MX_TIM2_Init+0xf0>)
 8005732:	f002 fef1 	bl	8008518 <HAL_TIMEx_MasterConfigSynchronization>
 8005736:	4603      	mov	r3, r0
 8005738:	2b00      	cmp	r3, #0
 800573a:	d001      	beq.n	8005740 <MX_TIM2_Init+0xac>
  {
    Error_Handler();
 800573c:	f000 fa5e 	bl	8005bfc <Error_Handler>
  }
  sConfigIC.ICPolarity = TIM_INPUTCHANNELPOLARITY_RISING;
 8005740:	2300      	movs	r3, #0
 8005742:	603b      	str	r3, [r7, #0]
  sConfigIC.ICSelection = TIM_ICSELECTION_DIRECTTI;
 8005744:	2301      	movs	r3, #1
 8005746:	607b      	str	r3, [r7, #4]
  sConfigIC.ICPrescaler = TIM_ICPSC_DIV1;
 8005748:	2300      	movs	r3, #0
 800574a:	60bb      	str	r3, [r7, #8]
  sConfigIC.ICFilter = 0;
 800574c:	2300      	movs	r3, #0
 800574e:	60fb      	str	r3, [r7, #12]
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_1) != HAL_OK)
 8005750:	463b      	mov	r3, r7
 8005752:	2200      	movs	r2, #0
 8005754:	4619      	mov	r1, r3
 8005756:	480b      	ldr	r0, [pc, #44]	; (8005784 <MX_TIM2_Init+0xf0>)
 8005758:	f002 faee 	bl	8007d38 <HAL_TIM_IC_ConfigChannel>
 800575c:	4603      	mov	r3, r0
 800575e:	2b00      	cmp	r3, #0
 8005760:	d001      	beq.n	8005766 <MX_TIM2_Init+0xd2>
  {
    Error_Handler();
 8005762:	f000 fa4b 	bl	8005bfc <Error_Handler>
  }
  if (HAL_TIM_IC_ConfigChannel(&htim2, &sConfigIC, TIM_CHANNEL_2) != HAL_OK)
 8005766:	463b      	mov	r3, r7
 8005768:	2204      	movs	r2, #4
 800576a:	4619      	mov	r1, r3
 800576c:	4805      	ldr	r0, [pc, #20]	; (8005784 <MX_TIM2_Init+0xf0>)
 800576e:	f002 fae3 	bl	8007d38 <HAL_TIM_IC_ConfigChannel>
 8005772:	4603      	mov	r3, r0
 8005774:	2b00      	cmp	r3, #0
 8005776:	d001      	beq.n	800577c <MX_TIM2_Init+0xe8>
  {
    Error_Handler();
 8005778:	f000 fa40 	bl	8005bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 800577c:	bf00      	nop
 800577e:	3728      	adds	r7, #40	; 0x28
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	20000220 	.word	0x20000220

08005788 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8005788:	b580      	push	{r7, lr}
 800578a:	b086      	sub	sp, #24
 800578c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800578e:	f107 0308 	add.w	r3, r7, #8
 8005792:	2200      	movs	r2, #0
 8005794:	601a      	str	r2, [r3, #0]
 8005796:	605a      	str	r2, [r3, #4]
 8005798:	609a      	str	r2, [r3, #8]
 800579a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800579c:	463b      	mov	r3, r7
 800579e:	2200      	movs	r2, #0
 80057a0:	601a      	str	r2, [r3, #0]
 80057a2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80057a4:	4b1c      	ldr	r3, [pc, #112]	; (8005818 <MX_TIM3_Init+0x90>)
 80057a6:	4a1d      	ldr	r2, [pc, #116]	; (800581c <MX_TIM3_Init+0x94>)
 80057a8:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 1;
 80057aa:	4b1b      	ldr	r3, [pc, #108]	; (8005818 <MX_TIM3_Init+0x90>)
 80057ac:	2201      	movs	r2, #1
 80057ae:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80057b0:	4b19      	ldr	r3, [pc, #100]	; (8005818 <MX_TIM3_Init+0x90>)
 80057b2:	2200      	movs	r2, #0
 80057b4:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 168;
 80057b6:	4b18      	ldr	r3, [pc, #96]	; (8005818 <MX_TIM3_Init+0x90>)
 80057b8:	22a8      	movs	r2, #168	; 0xa8
 80057ba:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80057bc:	4b16      	ldr	r3, [pc, #88]	; (8005818 <MX_TIM3_Init+0x90>)
 80057be:	2200      	movs	r2, #0
 80057c0:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80057c2:	4b15      	ldr	r3, [pc, #84]	; (8005818 <MX_TIM3_Init+0x90>)
 80057c4:	2200      	movs	r2, #0
 80057c6:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80057c8:	4813      	ldr	r0, [pc, #76]	; (8005818 <MX_TIM3_Init+0x90>)
 80057ca:	f002 f865 	bl	8007898 <HAL_TIM_Base_Init>
 80057ce:	4603      	mov	r3, r0
 80057d0:	2b00      	cmp	r3, #0
 80057d2:	d001      	beq.n	80057d8 <MX_TIM3_Init+0x50>
  {
    Error_Handler();
 80057d4:	f000 fa12 	bl	8005bfc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80057d8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80057dc:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80057de:	f107 0308 	add.w	r3, r7, #8
 80057e2:	4619      	mov	r1, r3
 80057e4:	480c      	ldr	r0, [pc, #48]	; (8005818 <MX_TIM3_Init+0x90>)
 80057e6:	f002 fb43 	bl	8007e70 <HAL_TIM_ConfigClockSource>
 80057ea:	4603      	mov	r3, r0
 80057ec:	2b00      	cmp	r3, #0
 80057ee:	d001      	beq.n	80057f4 <MX_TIM3_Init+0x6c>
  {
    Error_Handler();
 80057f0:	f000 fa04 	bl	8005bfc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80057f4:	2300      	movs	r3, #0
 80057f6:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80057f8:	2300      	movs	r3, #0
 80057fa:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80057fc:	463b      	mov	r3, r7
 80057fe:	4619      	mov	r1, r3
 8005800:	4805      	ldr	r0, [pc, #20]	; (8005818 <MX_TIM3_Init+0x90>)
 8005802:	f002 fe89 	bl	8008518 <HAL_TIMEx_MasterConfigSynchronization>
 8005806:	4603      	mov	r3, r0
 8005808:	2b00      	cmp	r3, #0
 800580a:	d001      	beq.n	8005810 <MX_TIM3_Init+0x88>
  {
    Error_Handler();
 800580c:	f000 f9f6 	bl	8005bfc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */

}
 8005810:	bf00      	nop
 8005812:	3718      	adds	r7, #24
 8005814:	46bd      	mov	sp, r7
 8005816:	bd80      	pop	{r7, pc}
 8005818:	20000268 	.word	0x20000268
 800581c:	40000400 	.word	0x40000400

08005820 <MX_UART5_Init>:
  * @brief UART5 Initialization Function
  * @param None
  * @retval None
  */
static void MX_UART5_Init(void)
{
 8005820:	b580      	push	{r7, lr}
 8005822:	af00      	add	r7, sp, #0
  /* USER CODE END UART5_Init 0 */

  /* USER CODE BEGIN UART5_Init 1 */

  /* USER CODE END UART5_Init 1 */
  huart5.Instance = UART5;
 8005824:	4b11      	ldr	r3, [pc, #68]	; (800586c <MX_UART5_Init+0x4c>)
 8005826:	4a12      	ldr	r2, [pc, #72]	; (8005870 <MX_UART5_Init+0x50>)
 8005828:	601a      	str	r2, [r3, #0]
  huart5.Init.BaudRate = 9600;
 800582a:	4b10      	ldr	r3, [pc, #64]	; (800586c <MX_UART5_Init+0x4c>)
 800582c:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005830:	605a      	str	r2, [r3, #4]
  huart5.Init.WordLength = UART_WORDLENGTH_8B;
 8005832:	4b0e      	ldr	r3, [pc, #56]	; (800586c <MX_UART5_Init+0x4c>)
 8005834:	2200      	movs	r2, #0
 8005836:	609a      	str	r2, [r3, #8]
  huart5.Init.StopBits = UART_STOPBITS_1;
 8005838:	4b0c      	ldr	r3, [pc, #48]	; (800586c <MX_UART5_Init+0x4c>)
 800583a:	2200      	movs	r2, #0
 800583c:	60da      	str	r2, [r3, #12]
  huart5.Init.Parity = UART_PARITY_NONE;
 800583e:	4b0b      	ldr	r3, [pc, #44]	; (800586c <MX_UART5_Init+0x4c>)
 8005840:	2200      	movs	r2, #0
 8005842:	611a      	str	r2, [r3, #16]
  huart5.Init.Mode = UART_MODE_TX_RX;
 8005844:	4b09      	ldr	r3, [pc, #36]	; (800586c <MX_UART5_Init+0x4c>)
 8005846:	220c      	movs	r2, #12
 8005848:	615a      	str	r2, [r3, #20]
  huart5.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800584a:	4b08      	ldr	r3, [pc, #32]	; (800586c <MX_UART5_Init+0x4c>)
 800584c:	2200      	movs	r2, #0
 800584e:	619a      	str	r2, [r3, #24]
  huart5.Init.OverSampling = UART_OVERSAMPLING_16;
 8005850:	4b06      	ldr	r3, [pc, #24]	; (800586c <MX_UART5_Init+0x4c>)
 8005852:	2200      	movs	r2, #0
 8005854:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart5) != HAL_OK)
 8005856:	4805      	ldr	r0, [pc, #20]	; (800586c <MX_UART5_Init+0x4c>)
 8005858:	f002 feee 	bl	8008638 <HAL_UART_Init>
 800585c:	4603      	mov	r3, r0
 800585e:	2b00      	cmp	r3, #0
 8005860:	d001      	beq.n	8005866 <MX_UART5_Init+0x46>
  {
    Error_Handler();
 8005862:	f000 f9cb 	bl	8005bfc <Error_Handler>
  }
  /* USER CODE BEGIN UART5_Init 2 */

  /* USER CODE END UART5_Init 2 */

}
 8005866:	bf00      	nop
 8005868:	bd80      	pop	{r7, pc}
 800586a:	bf00      	nop
 800586c:	200002b0 	.word	0x200002b0
 8005870:	40005000 	.word	0x40005000

08005874 <MX_USART3_UART_Init>:
  * @brief USART3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART3_UART_Init(void)
{
 8005874:	b580      	push	{r7, lr}
 8005876:	af00      	add	r7, sp, #0
  /* USER CODE END USART3_Init 0 */

  /* USER CODE BEGIN USART3_Init 1 */

  /* USER CODE END USART3_Init 1 */
  huart3.Instance = USART3;
 8005878:	4b11      	ldr	r3, [pc, #68]	; (80058c0 <MX_USART3_UART_Init+0x4c>)
 800587a:	4a12      	ldr	r2, [pc, #72]	; (80058c4 <MX_USART3_UART_Init+0x50>)
 800587c:	601a      	str	r2, [r3, #0]
  huart3.Init.BaudRate = 9600;
 800587e:	4b10      	ldr	r3, [pc, #64]	; (80058c0 <MX_USART3_UART_Init+0x4c>)
 8005880:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 8005884:	605a      	str	r2, [r3, #4]
  huart3.Init.WordLength = UART_WORDLENGTH_8B;
 8005886:	4b0e      	ldr	r3, [pc, #56]	; (80058c0 <MX_USART3_UART_Init+0x4c>)
 8005888:	2200      	movs	r2, #0
 800588a:	609a      	str	r2, [r3, #8]
  huart3.Init.StopBits = UART_STOPBITS_1;
 800588c:	4b0c      	ldr	r3, [pc, #48]	; (80058c0 <MX_USART3_UART_Init+0x4c>)
 800588e:	2200      	movs	r2, #0
 8005890:	60da      	str	r2, [r3, #12]
  huart3.Init.Parity = UART_PARITY_NONE;
 8005892:	4b0b      	ldr	r3, [pc, #44]	; (80058c0 <MX_USART3_UART_Init+0x4c>)
 8005894:	2200      	movs	r2, #0
 8005896:	611a      	str	r2, [r3, #16]
  huart3.Init.Mode = UART_MODE_TX_RX;
 8005898:	4b09      	ldr	r3, [pc, #36]	; (80058c0 <MX_USART3_UART_Init+0x4c>)
 800589a:	220c      	movs	r2, #12
 800589c:	615a      	str	r2, [r3, #20]
  huart3.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800589e:	4b08      	ldr	r3, [pc, #32]	; (80058c0 <MX_USART3_UART_Init+0x4c>)
 80058a0:	2200      	movs	r2, #0
 80058a2:	619a      	str	r2, [r3, #24]
  huart3.Init.OverSampling = UART_OVERSAMPLING_16;
 80058a4:	4b06      	ldr	r3, [pc, #24]	; (80058c0 <MX_USART3_UART_Init+0x4c>)
 80058a6:	2200      	movs	r2, #0
 80058a8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart3) != HAL_OK)
 80058aa:	4805      	ldr	r0, [pc, #20]	; (80058c0 <MX_USART3_UART_Init+0x4c>)
 80058ac:	f002 fec4 	bl	8008638 <HAL_UART_Init>
 80058b0:	4603      	mov	r3, r0
 80058b2:	2b00      	cmp	r3, #0
 80058b4:	d001      	beq.n	80058ba <MX_USART3_UART_Init+0x46>
  {
    Error_Handler();
 80058b6:	f000 f9a1 	bl	8005bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART3_Init 2 */

  /* USER CODE END USART3_Init 2 */

}
 80058ba:	bf00      	nop
 80058bc:	bd80      	pop	{r7, pc}
 80058be:	bf00      	nop
 80058c0:	200002f4 	.word	0x200002f4
 80058c4:	40004800 	.word	0x40004800

080058c8 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 80058c8:	b580      	push	{r7, lr}
 80058ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 80058cc:	4b11      	ldr	r3, [pc, #68]	; (8005914 <MX_USART6_UART_Init+0x4c>)
 80058ce:	4a12      	ldr	r2, [pc, #72]	; (8005918 <MX_USART6_UART_Init+0x50>)
 80058d0:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 9600;
 80058d2:	4b10      	ldr	r3, [pc, #64]	; (8005914 <MX_USART6_UART_Init+0x4c>)
 80058d4:	f44f 5216 	mov.w	r2, #9600	; 0x2580
 80058d8:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80058da:	4b0e      	ldr	r3, [pc, #56]	; (8005914 <MX_USART6_UART_Init+0x4c>)
 80058dc:	2200      	movs	r2, #0
 80058de:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 80058e0:	4b0c      	ldr	r3, [pc, #48]	; (8005914 <MX_USART6_UART_Init+0x4c>)
 80058e2:	2200      	movs	r2, #0
 80058e4:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 80058e6:	4b0b      	ldr	r3, [pc, #44]	; (8005914 <MX_USART6_UART_Init+0x4c>)
 80058e8:	2200      	movs	r2, #0
 80058ea:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 80058ec:	4b09      	ldr	r3, [pc, #36]	; (8005914 <MX_USART6_UART_Init+0x4c>)
 80058ee:	220c      	movs	r2, #12
 80058f0:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80058f2:	4b08      	ldr	r3, [pc, #32]	; (8005914 <MX_USART6_UART_Init+0x4c>)
 80058f4:	2200      	movs	r2, #0
 80058f6:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80058f8:	4b06      	ldr	r3, [pc, #24]	; (8005914 <MX_USART6_UART_Init+0x4c>)
 80058fa:	2200      	movs	r2, #0
 80058fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 80058fe:	4805      	ldr	r0, [pc, #20]	; (8005914 <MX_USART6_UART_Init+0x4c>)
 8005900:	f002 fe9a 	bl	8008638 <HAL_UART_Init>
 8005904:	4603      	mov	r3, r0
 8005906:	2b00      	cmp	r3, #0
 8005908:	d001      	beq.n	800590e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800590a:	f000 f977 	bl	8005bfc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800590e:	bf00      	nop
 8005910:	bd80      	pop	{r7, pc}
 8005912:	bf00      	nop
 8005914:	20000338 	.word	0x20000338
 8005918:	40011400 	.word	0x40011400

0800591c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800591c:	b580      	push	{r7, lr}
 800591e:	b08c      	sub	sp, #48	; 0x30
 8005920:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005922:	f107 031c 	add.w	r3, r7, #28
 8005926:	2200      	movs	r2, #0
 8005928:	601a      	str	r2, [r3, #0]
 800592a:	605a      	str	r2, [r3, #4]
 800592c:	609a      	str	r2, [r3, #8]
 800592e:	60da      	str	r2, [r3, #12]
 8005930:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 8005932:	2300      	movs	r3, #0
 8005934:	61bb      	str	r3, [r7, #24]
 8005936:	4bab      	ldr	r3, [pc, #684]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 8005938:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800593a:	4aaa      	ldr	r2, [pc, #680]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 800593c:	f043 0310 	orr.w	r3, r3, #16
 8005940:	6313      	str	r3, [r2, #48]	; 0x30
 8005942:	4ba8      	ldr	r3, [pc, #672]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 8005944:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005946:	f003 0310 	and.w	r3, r3, #16
 800594a:	61bb      	str	r3, [r7, #24]
 800594c:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 800594e:	2300      	movs	r3, #0
 8005950:	617b      	str	r3, [r7, #20]
 8005952:	4ba4      	ldr	r3, [pc, #656]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 8005954:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005956:	4aa3      	ldr	r2, [pc, #652]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 8005958:	f043 0304 	orr.w	r3, r3, #4
 800595c:	6313      	str	r3, [r2, #48]	; 0x30
 800595e:	4ba1      	ldr	r3, [pc, #644]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 8005960:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005962:	f003 0304 	and.w	r3, r3, #4
 8005966:	617b      	str	r3, [r7, #20]
 8005968:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800596a:	2300      	movs	r3, #0
 800596c:	613b      	str	r3, [r7, #16]
 800596e:	4b9d      	ldr	r3, [pc, #628]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 8005970:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005972:	4a9c      	ldr	r2, [pc, #624]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 8005974:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8005978:	6313      	str	r3, [r2, #48]	; 0x30
 800597a:	4b9a      	ldr	r3, [pc, #616]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 800597c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800597e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005982:	613b      	str	r3, [r7, #16]
 8005984:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8005986:	2300      	movs	r3, #0
 8005988:	60fb      	str	r3, [r7, #12]
 800598a:	4b96      	ldr	r3, [pc, #600]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 800598c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800598e:	4a95      	ldr	r2, [pc, #596]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 8005990:	f043 0301 	orr.w	r3, r3, #1
 8005994:	6313      	str	r3, [r2, #48]	; 0x30
 8005996:	4b93      	ldr	r3, [pc, #588]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 8005998:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800599a:	f003 0301 	and.w	r3, r3, #1
 800599e:	60fb      	str	r3, [r7, #12]
 80059a0:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 80059a2:	2300      	movs	r3, #0
 80059a4:	60bb      	str	r3, [r7, #8]
 80059a6:	4b8f      	ldr	r3, [pc, #572]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 80059a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059aa:	4a8e      	ldr	r2, [pc, #568]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 80059ac:	f043 0302 	orr.w	r3, r3, #2
 80059b0:	6313      	str	r3, [r2, #48]	; 0x30
 80059b2:	4b8c      	ldr	r3, [pc, #560]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 80059b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059b6:	f003 0302 	and.w	r3, r3, #2
 80059ba:	60bb      	str	r3, [r7, #8]
 80059bc:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 80059be:	2300      	movs	r3, #0
 80059c0:	607b      	str	r3, [r7, #4]
 80059c2:	4b88      	ldr	r3, [pc, #544]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 80059c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059c6:	4a87      	ldr	r2, [pc, #540]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 80059c8:	f043 0308 	orr.w	r3, r3, #8
 80059cc:	6313      	str	r3, [r2, #48]	; 0x30
 80059ce:	4b85      	ldr	r3, [pc, #532]	; (8005be4 <MX_GPIO_Init+0x2c8>)
 80059d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80059d2:	f003 0308 	and.w	r3, r3, #8
 80059d6:	607b      	str	r3, [r7, #4]
 80059d8:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, PE4_ZIGBEE_PA_EN_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin|Speed1_not_PE13_41_Pin
 80059da:	2200      	movs	r2, #0
 80059dc:	f24a 3113 	movw	r1, #41747	; 0xa313
 80059e0:	4881      	ldr	r0, [pc, #516]	; (8005be8 <MX_GPIO_Init+0x2cc>)
 80059e2:	f001 facd 	bl	8006f80 <HAL_GPIO_WritePin>
                          |PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, PC3_ZIGBEE_nRST_Pin|PC8_PR_Pin|PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin, GPIO_PIN_RESET);
 80059e6:	2200      	movs	r2, #0
 80059e8:	f44f 61e1 	mov.w	r1, #1800	; 0x708
 80059ec:	487f      	ldr	r0, [pc, #508]	; (8005bec <MX_GPIO_Init+0x2d0>)
 80059ee:	f001 fac7 	bl	8006f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 80059f2:	2200      	movs	r2, #0
 80059f4:	f649 5108 	movw	r1, #40200	; 0x9d08
 80059f8:	487d      	ldr	r0, [pc, #500]	; (8005bf0 <MX_GPIO_Init+0x2d4>)
 80059fa:	f001 fac1 	bl	8006f80 <HAL_GPIO_WritePin>
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin, GPIO_PIN_SET);
 80059fe:	2201      	movs	r2, #1
 8005a00:	2130      	movs	r1, #48	; 0x30
 8005a02:	487a      	ldr	r0, [pc, #488]	; (8005bec <MX_GPIO_Init+0x2d0>)
 8005a04:	f001 fabc 	bl	8006f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, EStop_Not_PB0_17_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin|PB14_POS_CMD_OPC_EN_Pin
 8005a08:	2200      	movs	r2, #0
 8005a0a:	f246 0165 	movw	r1, #24677	; 0x6065
 8005a0e:	4879      	ldr	r0, [pc, #484]	; (8005bf4 <MX_GPIO_Init+0x2d8>)
 8005a10:	f001 fab6 	bl	8006f80 <HAL_GPIO_WritePin>
                          |PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, ArlarmRST_PB1_42_Pin|PB15_485_MCU_PC_DIR_Pin, GPIO_PIN_SET);
 8005a14:	2201      	movs	r2, #1
 8005a16:	f248 0102 	movw	r1, #32770	; 0x8002
 8005a1a:	4876      	ldr	r0, [pc, #472]	; (8005bf4 <MX_GPIO_Init+0x2d8>)
 8005a1c:	f001 fab0 	bl	8006f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, Speed2_Not_PE7_15_Pin|Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin
 8005a20:	2201      	movs	r2, #1
 8005a22:	f44f 41b9 	mov.w	r1, #23680	; 0x5c80
 8005a26:	4870      	ldr	r0, [pc, #448]	; (8005be8 <MX_GPIO_Init+0x2cc>)
 8005a28:	f001 faaa 	bl	8006f80 <HAL_GPIO_WritePin>
                          |CWLIM_Not_PE14_13_Pin, GPIO_PIN_SET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(PD10_ESP32_EN_GPIO_Port, PD10_ESP32_EN_Pin, GPIO_PIN_SET);
 8005a2c:	2201      	movs	r2, #1
 8005a2e:	f44f 6180 	mov.w	r1, #1024	; 0x400
 8005a32:	4871      	ldr	r0, [pc, #452]	; (8005bf8 <MX_GPIO_Init+0x2dc>)
 8005a34:	f001 faa4 	bl	8006f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin, GPIO_PIN_RESET);
 8005a38:	2200      	movs	r2, #0
 8005a3a:	f44f 4128 	mov.w	r1, #43008	; 0xa800
 8005a3e:	486e      	ldr	r0, [pc, #440]	; (8005bf8 <MX_GPIO_Init+0x2dc>)
 8005a40:	f001 fa9e 	bl	8006f80 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : CN1_22_RDY_Pin CN1_21_SPDOUT_TRQOUT_Pin PE5_BLE_GPIO_Pin CN1_48_BRAKE_Pin */
  GPIO_InitStruct.Pin = CN1_22_RDY_Pin|CN1_21_SPDOUT_TRQOUT_Pin|PE5_BLE_GPIO_Pin|CN1_48_BRAKE_Pin;
 8005a44:	236c      	movs	r3, #108	; 0x6c
 8005a46:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a48:	2300      	movs	r3, #0
 8005a4a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a4c:	2300      	movs	r3, #0
 8005a4e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a50:	f107 031c 	add.w	r3, r7, #28
 8005a54:	4619      	mov	r1, r3
 8005a56:	4864      	ldr	r0, [pc, #400]	; (8005be8 <MX_GPIO_Init+0x2cc>)
 8005a58:	f001 f8de 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PE4_ZIGBEE_PA_EN_Pin Speed2_Not_PE7_15_Pin Type_Not_PE8_40_Pin PE9_TIM1_CH1_PFIN_Pin
                           Dir_Not_PE10_14_Pin SPDLIM_Not_PE11_38_Pin CCWLIM_Not_PE12_39_Pin Speed1_not_PE13_41_Pin
                           CWLIM_Not_PE14_13_Pin PE15_RELAY1_Pin PE0_485_MCU_DRV_DIR_Pin PE1_ZIGBEE_EN_Pin */
  GPIO_InitStruct.Pin = PE4_ZIGBEE_PA_EN_Pin|Speed2_Not_PE7_15_Pin|Type_Not_PE8_40_Pin|PE9_TIM1_CH1_PFIN_Pin
 8005a5c:	f64f 7393 	movw	r3, #65427	; 0xff93
 8005a60:	61fb      	str	r3, [r7, #28]
                          |Dir_Not_PE10_14_Pin|SPDLIM_Not_PE11_38_Pin|CCWLIM_Not_PE12_39_Pin|Speed1_not_PE13_41_Pin
                          |CWLIM_Not_PE14_13_Pin|PE15_RELAY1_Pin|PE0_485_MCU_DRV_DIR_Pin|PE1_ZIGBEE_EN_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a62:	2301      	movs	r3, #1
 8005a64:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a66:	2300      	movs	r3, #0
 8005a68:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8005a6e:	f107 031c 	add.w	r3, r7, #28
 8005a72:	4619      	mov	r1, r3
 8005a74:	485c      	ldr	r0, [pc, #368]	; (8005be8 <MX_GPIO_Init+0x2cc>)
 8005a76:	f001 f8cf 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC13_USER_BT_MID_Pin CN1_46_ALARM_Pin CN1_47_INSPD_INPOS_Pin CN1_45_NCWOUT_NTQOUT_Pin */
  GPIO_InitStruct.Pin = PC13_USER_BT_MID_Pin|CN1_46_ALARM_Pin|CN1_47_INSPD_INPOS_Pin|CN1_45_NCWOUT_NTQOUT_Pin;
 8005a7a:	f242 0307 	movw	r3, #8199	; 0x2007
 8005a7e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005a80:	2300      	movs	r3, #0
 8005a82:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a84:	2300      	movs	r3, #0
 8005a86:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005a88:	f107 031c 	add.w	r3, r7, #28
 8005a8c:	4619      	mov	r1, r3
 8005a8e:	4857      	ldr	r0, [pc, #348]	; (8005bec <MX_GPIO_Init+0x2d0>)
 8005a90:	f001 f8c2 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PC3_ZIGBEE_nRST_Pin SerVoReset_PC4_18_Pin Stop_PC5_43_Pin PC8_PR_Pin
                           PC9_ZIGBEE_HGM_EN_Pin PC10_SPI3_SCK_SPARE_Pin */
  GPIO_InitStruct.Pin = PC3_ZIGBEE_nRST_Pin|SerVoReset_PC4_18_Pin|Stop_PC5_43_Pin|PC8_PR_Pin
 8005a94:	f44f 63e7 	mov.w	r3, #1848	; 0x738
 8005a98:	61fb      	str	r3, [r7, #28]
                          |PC9_ZIGBEE_HGM_EN_Pin|PC10_SPI3_SCK_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005a9a:	2301      	movs	r3, #1
 8005a9c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005a9e:	2300      	movs	r3, #0
 8005aa0:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005aa2:	2300      	movs	r3, #0
 8005aa4:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005aa6:	f107 031c 	add.w	r3, r7, #28
 8005aaa:	4619      	mov	r1, r3
 8005aac:	484f      	ldr	r0, [pc, #316]	; (8005bec <MX_GPIO_Init+0x2d0>)
 8005aae:	f001 f8b3 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA0_UART4_TX_ESP32_RX_Pin */
  GPIO_InitStruct.Pin = PA0_UART4_TX_ESP32_RX_Pin;
 8005ab2:	2301      	movs	r3, #1
 8005ab4:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005ab6:	2302      	movs	r3, #2
 8005ab8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005aba:	2300      	movs	r3, #0
 8005abc:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005abe:	2303      	movs	r3, #3
 8005ac0:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF8_UART4;
 8005ac2:	2308      	movs	r3, #8
 8005ac4:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(PA0_UART4_TX_ESP32_RX_GPIO_Port, &GPIO_InitStruct);
 8005ac6:	f107 031c 	add.w	r3, r7, #28
 8005aca:	4619      	mov	r1, r3
 8005acc:	4848      	ldr	r0, [pc, #288]	; (8005bf0 <MX_GPIO_Init+0x2d4>)
 8005ace:	f001 f8a3 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA2_USER_BT_UP_Pin CN1_20_PCWOUT_PTQOUT_Pin CN1_23_TYPEOUT_Pin PA9_LINE_RECV_SELFTEST_Pin */
  GPIO_InitStruct.Pin = PA2_USER_BT_UP_Pin|CN1_20_PCWOUT_PTQOUT_Pin|CN1_23_TYPEOUT_Pin|PA9_LINE_RECV_SELFTEST_Pin;
 8005ad2:	f44f 7325 	mov.w	r3, #660	; 0x294
 8005ad6:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ad8:	2300      	movs	r3, #0
 8005ada:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005adc:	2300      	movs	r3, #0
 8005ade:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005ae0:	f107 031c 	add.w	r3, r7, #28
 8005ae4:	4619      	mov	r1, r3
 8005ae6:	4842      	ldr	r0, [pc, #264]	; (8005bf0 <MX_GPIO_Init+0x2d4>)
 8005ae8:	f001 f896 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PA3_LCD_RST_Pin PA8_LINE_DRV_SELFTEST2_Pin PA10_LINE_DRV_SELFTEST1_Pin PA11_ENC_RECEIV_EN_Pin
                           PA12_LINE_DRV_EN_Pin PA15_SPI3_NSS_SPARE_Pin */
  GPIO_InitStruct.Pin = PA3_LCD_RST_Pin|PA8_LINE_DRV_SELFTEST2_Pin|PA10_LINE_DRV_SELFTEST1_Pin|PA11_ENC_RECEIV_EN_Pin
 8005aec:	f649 5308 	movw	r3, #40200	; 0x9d08
 8005af0:	61fb      	str	r3, [r7, #28]
                          |PA12_LINE_DRV_EN_Pin|PA15_SPI3_NSS_SPARE_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005af2:	2301      	movs	r3, #1
 8005af4:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005af6:	2300      	movs	r3, #0
 8005af8:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005afa:	2300      	movs	r3, #0
 8005afc:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005afe:	f107 031c 	add.w	r3, r7, #28
 8005b02:	4619      	mov	r1, r3
 8005b04:	483a      	ldr	r0, [pc, #232]	; (8005bf0 <MX_GPIO_Init+0x2d4>)
 8005b06:	f001 f887 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : EStop_Not_PB0_17_Pin ArlarmRST_PB1_42_Pin Tor1_PB2_16_Pin PB13_Output_JP7_Pin
                           PB14_POS_CMD_OPC_EN_Pin PB15_485_MCU_PC_DIR_Pin PB5_SPI3_MOSI_SPARE_Pin PB6_RELAY2_Pin */
  GPIO_InitStruct.Pin = EStop_Not_PB0_17_Pin|ArlarmRST_PB1_42_Pin|Tor1_PB2_16_Pin|PB13_Output_JP7_Pin
 8005b0a:	f24e 0367 	movw	r3, #57447	; 0xe067
 8005b0e:	61fb      	str	r3, [r7, #28]
                          |PB14_POS_CMD_OPC_EN_Pin|PB15_485_MCU_PC_DIR_Pin|PB5_SPI3_MOSI_SPARE_Pin|PB6_RELAY2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b10:	2301      	movs	r3, #1
 8005b12:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b14:	2300      	movs	r3, #0
 8005b16:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b18:	2300      	movs	r3, #0
 8005b1a:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b1c:	f107 031c 	add.w	r3, r7, #28
 8005b20:	4619      	mov	r1, r3
 8005b22:	4834      	ldr	r0, [pc, #208]	; (8005bf4 <MX_GPIO_Init+0x2d8>)
 8005b24:	f001 f878 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB10_I2C2_SCL_LCD_IOEXP_Pin PB11_I2C2_SDA_LCD_IOEXP_Pin */
  GPIO_InitStruct.Pin = PB10_I2C2_SCL_LCD_IOEXP_Pin|PB11_I2C2_SDA_LCD_IOEXP_Pin;
 8005b28:	f44f 6340 	mov.w	r3, #3072	; 0xc00
 8005b2c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005b2e:	2312      	movs	r3, #18
 8005b30:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005b32:	2301      	movs	r3, #1
 8005b34:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005b36:	2303      	movs	r3, #3
 8005b38:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8005b3a:	2304      	movs	r3, #4
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b3e:	f107 031c 	add.w	r3, r7, #28
 8005b42:	4619      	mov	r1, r3
 8005b44:	482b      	ldr	r0, [pc, #172]	; (8005bf4 <MX_GPIO_Init+0x2d8>)
 8005b46:	f001 f867 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB12_RELAY3_Pin CN1_19_ZSPD_Pin PB4_SPI3_MISO_SPARE_Pin Input_JP7_Pin */
  GPIO_InitStruct.Pin = PB12_RELAY3_Pin|CN1_19_ZSPD_Pin|PB4_SPI3_MISO_SPARE_Pin|Input_JP7_Pin;
 8005b4a:	f241 2318 	movw	r3, #4632	; 0x1218
 8005b4e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005b50:	2300      	movs	r3, #0
 8005b52:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b54:	2300      	movs	r3, #0
 8005b56:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005b58:	f107 031c 	add.w	r3, r7, #28
 8005b5c:	4619      	mov	r1, r3
 8005b5e:	4825      	ldr	r0, [pc, #148]	; (8005bf4 <MX_GPIO_Init+0x2d8>)
 8005b60:	f001 f85a 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pin : PD10_ESP32_EN_Pin */
  GPIO_InitStruct.Pin = PD10_ESP32_EN_Pin;
 8005b64:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8005b68:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 8005b6a:	2311      	movs	r3, #17
 8005b6c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b6e:	2300      	movs	r3, #0
 8005b70:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b72:	2300      	movs	r3, #0
 8005b74:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(PD10_ESP32_EN_GPIO_Port, &GPIO_InitStruct);
 8005b76:	f107 031c 	add.w	r3, r7, #28
 8005b7a:	4619      	mov	r1, r3
 8005b7c:	481e      	ldr	r0, [pc, #120]	; (8005bf8 <MX_GPIO_Init+0x2dc>)
 8005b7e:	f001 f84b 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD11_ESP32_BOOT_SEL_Pin PD13_MON1_2_EN_Pin PD15_SPDIN_TRQIN_EN_Pin */
  GPIO_InitStruct.Pin = PD11_ESP32_BOOT_SEL_Pin|PD13_MON1_2_EN_Pin|PD15_SPDIN_TRQIN_EN_Pin;
 8005b82:	f44f 4328 	mov.w	r3, #43008	; 0xa800
 8005b86:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8005b88:	2301      	movs	r3, #1
 8005b8a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005b8c:	2300      	movs	r3, #0
 8005b8e:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005b90:	2300      	movs	r3, #0
 8005b92:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005b94:	f107 031c 	add.w	r3, r7, #28
 8005b98:	4619      	mov	r1, r3
 8005b9a:	4817      	ldr	r0, [pc, #92]	; (8005bf8 <MX_GPIO_Init+0x2dc>)
 8005b9c:	f001 f83c 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12_Input_J6_Pin PD14_Input_J6_Pin Input0_J6_DAC_ADC_Pin Input1_J6_DAC_ADC_Pin
                           PD7_A_CODE2_Pin */
  GPIO_InitStruct.Pin = PD12_Input_J6_Pin|PD14_Input_J6_Pin|Input0_J6_DAC_ADC_Pin|Input1_J6_DAC_ADC_Pin
 8005ba0:	f245 0383 	movw	r3, #20611	; 0x5083
 8005ba4:	61fb      	str	r3, [r7, #28]
                          |PD7_A_CODE2_Pin;
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8005ba6:	2300      	movs	r3, #0
 8005ba8:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005baa:	2300      	movs	r3, #0
 8005bac:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005bae:	f107 031c 	add.w	r3, r7, #28
 8005bb2:	4619      	mov	r1, r3
 8005bb4:	4810      	ldr	r0, [pc, #64]	; (8005bf8 <MX_GPIO_Init+0x2dc>)
 8005bb6:	f001 f82f 	bl	8006c18 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB7_I2C1_SDA_DAC_ADC_Pin PB8_I2C1_SCL_DAC_ADC_Pin */
  GPIO_InitStruct.Pin = PB7_I2C1_SDA_DAC_ADC_Pin|PB8_I2C1_SCL_DAC_ADC_Pin;
 8005bba:	f44f 73c0 	mov.w	r3, #384	; 0x180
 8005bbe:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8005bc0:	2312      	movs	r3, #18
 8005bc2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8005bc4:	2301      	movs	r3, #1
 8005bc6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005bc8:	2303      	movs	r3, #3
 8005bca:	62bb      	str	r3, [r7, #40]	; 0x28
  GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8005bcc:	2304      	movs	r3, #4
 8005bce:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8005bd0:	f107 031c 	add.w	r3, r7, #28
 8005bd4:	4619      	mov	r1, r3
 8005bd6:	4807      	ldr	r0, [pc, #28]	; (8005bf4 <MX_GPIO_Init+0x2d8>)
 8005bd8:	f001 f81e 	bl	8006c18 <HAL_GPIO_Init>

}
 8005bdc:	bf00      	nop
 8005bde:	3730      	adds	r7, #48	; 0x30
 8005be0:	46bd      	mov	sp, r7
 8005be2:	bd80      	pop	{r7, pc}
 8005be4:	40023800 	.word	0x40023800
 8005be8:	40021000 	.word	0x40021000
 8005bec:	40020800 	.word	0x40020800
 8005bf0:	40020000 	.word	0x40020000
 8005bf4:	40020400 	.word	0x40020400
 8005bf8:	40020c00 	.word	0x40020c00

08005bfc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8005bfc:	b480      	push	{r7}
 8005bfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  while(1)
 8005c00:	e7fe      	b.n	8005c00 <Error_Handler+0x4>
	...

08005c04 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8005c04:	b480      	push	{r7}
 8005c06:	b083      	sub	sp, #12
 8005c08:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8005c0a:	2300      	movs	r3, #0
 8005c0c:	607b      	str	r3, [r7, #4]
 8005c0e:	4b10      	ldr	r3, [pc, #64]	; (8005c50 <HAL_MspInit+0x4c>)
 8005c10:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c12:	4a0f      	ldr	r2, [pc, #60]	; (8005c50 <HAL_MspInit+0x4c>)
 8005c14:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8005c18:	6453      	str	r3, [r2, #68]	; 0x44
 8005c1a:	4b0d      	ldr	r3, [pc, #52]	; (8005c50 <HAL_MspInit+0x4c>)
 8005c1c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005c1e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8005c22:	607b      	str	r3, [r7, #4]
 8005c24:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8005c26:	2300      	movs	r3, #0
 8005c28:	603b      	str	r3, [r7, #0]
 8005c2a:	4b09      	ldr	r3, [pc, #36]	; (8005c50 <HAL_MspInit+0x4c>)
 8005c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c2e:	4a08      	ldr	r2, [pc, #32]	; (8005c50 <HAL_MspInit+0x4c>)
 8005c30:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005c34:	6413      	str	r3, [r2, #64]	; 0x40
 8005c36:	4b06      	ldr	r3, [pc, #24]	; (8005c50 <HAL_MspInit+0x4c>)
 8005c38:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c3a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005c3e:	603b      	str	r3, [r7, #0]
 8005c40:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8005c42:	bf00      	nop
 8005c44:	370c      	adds	r7, #12
 8005c46:	46bd      	mov	sp, r7
 8005c48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c4c:	4770      	bx	lr
 8005c4e:	bf00      	nop
 8005c50:	40023800 	.word	0x40023800

08005c54 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b08c      	sub	sp, #48	; 0x30
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005c5c:	f107 031c 	add.w	r3, r7, #28
 8005c60:	2200      	movs	r2, #0
 8005c62:	601a      	str	r2, [r3, #0]
 8005c64:	605a      	str	r2, [r3, #4]
 8005c66:	609a      	str	r2, [r3, #8]
 8005c68:	60da      	str	r2, [r3, #12]
 8005c6a:	611a      	str	r2, [r3, #16]
  if(htim_base->Instance==TIM2)
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005c74:	d12c      	bne.n	8005cd0 <HAL_TIM_Base_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8005c76:	2300      	movs	r3, #0
 8005c78:	61bb      	str	r3, [r7, #24]
 8005c7a:	4b30      	ldr	r3, [pc, #192]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005c7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c7e:	4a2f      	ldr	r2, [pc, #188]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005c80:	f043 0301 	orr.w	r3, r3, #1
 8005c84:	6413      	str	r3, [r2, #64]	; 0x40
 8005c86:	4b2d      	ldr	r3, [pc, #180]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005c88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c8a:	f003 0301 	and.w	r3, r3, #1
 8005c8e:	61bb      	str	r3, [r7, #24]
 8005c90:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005c92:	2300      	movs	r3, #0
 8005c94:	617b      	str	r3, [r7, #20]
 8005c96:	4b29      	ldr	r3, [pc, #164]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005c98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c9a:	4a28      	ldr	r2, [pc, #160]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005c9c:	f043 0301 	orr.w	r3, r3, #1
 8005ca0:	6313      	str	r3, [r2, #48]	; 0x30
 8005ca2:	4b26      	ldr	r3, [pc, #152]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005ca4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ca6:	f003 0301 	and.w	r3, r3, #1
 8005caa:	617b      	str	r3, [r7, #20]
 8005cac:	697b      	ldr	r3, [r7, #20]
    /**TIM2 GPIO Configuration
    PA1     ------> TIM2_CH2
    PA5     ------> TIM2_CH1
    */
    GPIO_InitStruct.Pin = PA1_TIM2_CH2_ENC_PBO_Pin|PA5_TIM2_CH1_ENC_PAO_Pin;
 8005cae:	2322      	movs	r3, #34	; 0x22
 8005cb0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005cb2:	2302      	movs	r3, #2
 8005cb4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005cb6:	2300      	movs	r3, #0
 8005cb8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005cba:	2300      	movs	r3, #0
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM2;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8005cc2:	f107 031c 	add.w	r3, r7, #28
 8005cc6:	4619      	mov	r1, r3
 8005cc8:	481d      	ldr	r0, [pc, #116]	; (8005d40 <HAL_TIM_Base_MspInit+0xec>)
 8005cca:	f000 ffa5 	bl	8006c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8005cce:	e030      	b.n	8005d32 <HAL_TIM_Base_MspInit+0xde>
  else if(htim_base->Instance==TIM3)
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	4a1b      	ldr	r2, [pc, #108]	; (8005d44 <HAL_TIM_Base_MspInit+0xf0>)
 8005cd6:	4293      	cmp	r3, r2
 8005cd8:	d12b      	bne.n	8005d32 <HAL_TIM_Base_MspInit+0xde>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8005cda:	2300      	movs	r3, #0
 8005cdc:	613b      	str	r3, [r7, #16]
 8005cde:	4b17      	ldr	r3, [pc, #92]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005ce0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005ce2:	4a16      	ldr	r2, [pc, #88]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005ce4:	f043 0302 	orr.w	r3, r3, #2
 8005ce8:	6413      	str	r3, [r2, #64]	; 0x40
 8005cea:	4b14      	ldr	r3, [pc, #80]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005cec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005cee:	f003 0302 	and.w	r3, r3, #2
 8005cf2:	613b      	str	r3, [r7, #16]
 8005cf4:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005cf6:	2300      	movs	r3, #0
 8005cf8:	60fb      	str	r3, [r7, #12]
 8005cfa:	4b10      	ldr	r3, [pc, #64]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005cfc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005cfe:	4a0f      	ldr	r2, [pc, #60]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005d00:	f043 0301 	orr.w	r3, r3, #1
 8005d04:	6313      	str	r3, [r2, #48]	; 0x30
 8005d06:	4b0d      	ldr	r3, [pc, #52]	; (8005d3c <HAL_TIM_Base_MspInit+0xe8>)
 8005d08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d0a:	f003 0301 	and.w	r3, r3, #1
 8005d0e:	60fb      	str	r3, [r7, #12]
 8005d10:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = PA6_TIM3_CH1_ENC_PZO_Pin;
 8005d12:	2340      	movs	r3, #64	; 0x40
 8005d14:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005d16:	2302      	movs	r3, #2
 8005d18:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8005d1e:	2300      	movs	r3, #0
 8005d20:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8005d22:	2302      	movs	r3, #2
 8005d24:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(PA6_TIM3_CH1_ENC_PZO_GPIO_Port, &GPIO_InitStruct);
 8005d26:	f107 031c 	add.w	r3, r7, #28
 8005d2a:	4619      	mov	r1, r3
 8005d2c:	4804      	ldr	r0, [pc, #16]	; (8005d40 <HAL_TIM_Base_MspInit+0xec>)
 8005d2e:	f000 ff73 	bl	8006c18 <HAL_GPIO_Init>
}
 8005d32:	bf00      	nop
 8005d34:	3730      	adds	r7, #48	; 0x30
 8005d36:	46bd      	mov	sp, r7
 8005d38:	bd80      	pop	{r7, pc}
 8005d3a:	bf00      	nop
 8005d3c:	40023800 	.word	0x40023800
 8005d40:	40020000 	.word	0x40020000
 8005d44:	40000400 	.word	0x40000400

08005d48 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8005d48:	b580      	push	{r7, lr}
 8005d4a:	b08e      	sub	sp, #56	; 0x38
 8005d4c:	af00      	add	r7, sp, #0
 8005d4e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8005d50:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005d54:	2200      	movs	r2, #0
 8005d56:	601a      	str	r2, [r3, #0]
 8005d58:	605a      	str	r2, [r3, #4]
 8005d5a:	609a      	str	r2, [r3, #8]
 8005d5c:	60da      	str	r2, [r3, #12]
 8005d5e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==UART5)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	681b      	ldr	r3, [r3, #0]
 8005d64:	4a5b      	ldr	r2, [pc, #364]	; (8005ed4 <HAL_UART_MspInit+0x18c>)
 8005d66:	4293      	cmp	r3, r2
 8005d68:	d14b      	bne.n	8005e02 <HAL_UART_MspInit+0xba>
  {
  /* USER CODE BEGIN UART5_MspInit 0 */

  /* USER CODE END UART5_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_UART5_CLK_ENABLE();
 8005d6a:	2300      	movs	r3, #0
 8005d6c:	623b      	str	r3, [r7, #32]
 8005d6e:	4b5a      	ldr	r3, [pc, #360]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005d70:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d72:	4a59      	ldr	r2, [pc, #356]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005d74:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8005d78:	6413      	str	r3, [r2, #64]	; 0x40
 8005d7a:	4b57      	ldr	r3, [pc, #348]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005d7c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005d7e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8005d82:	623b      	str	r3, [r7, #32]
 8005d84:	6a3b      	ldr	r3, [r7, #32]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005d86:	2300      	movs	r3, #0
 8005d88:	61fb      	str	r3, [r7, #28]
 8005d8a:	4b53      	ldr	r3, [pc, #332]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005d8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d8e:	4a52      	ldr	r2, [pc, #328]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005d90:	f043 0304 	orr.w	r3, r3, #4
 8005d94:	6313      	str	r3, [r2, #48]	; 0x30
 8005d96:	4b50      	ldr	r3, [pc, #320]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005d98:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005d9a:	f003 0304 	and.w	r3, r3, #4
 8005d9e:	61fb      	str	r3, [r7, #28]
 8005da0:	69fb      	ldr	r3, [r7, #28]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005da2:	2300      	movs	r3, #0
 8005da4:	61bb      	str	r3, [r7, #24]
 8005da6:	4b4c      	ldr	r3, [pc, #304]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005da8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005daa:	4a4b      	ldr	r2, [pc, #300]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005dac:	f043 0308 	orr.w	r3, r3, #8
 8005db0:	6313      	str	r3, [r2, #48]	; 0x30
 8005db2:	4b49      	ldr	r3, [pc, #292]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005db4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005db6:	f003 0308 	and.w	r3, r3, #8
 8005dba:	61bb      	str	r3, [r7, #24]
 8005dbc:	69bb      	ldr	r3, [r7, #24]
    /**UART5 GPIO Configuration
    PC12     ------> UART5_TX
    PD2     ------> UART5_RX
    */
    GPIO_InitStruct.Pin = PC12_UART5_TX_485_MCU_DRV_Pin;
 8005dbe:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8005dc2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005dc4:	2302      	movs	r3, #2
 8005dc6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005dc8:	2300      	movs	r3, #0
 8005dca:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dcc:	2303      	movs	r3, #3
 8005dce:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005dd0:	2308      	movs	r3, #8
 8005dd2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PC12_UART5_TX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8005dd4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005dd8:	4619      	mov	r1, r3
 8005dda:	4840      	ldr	r0, [pc, #256]	; (8005edc <HAL_UART_MspInit+0x194>)
 8005ddc:	f000 ff1c 	bl	8006c18 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = PD2_UART5_RX_485_MCU_DRV_Pin;
 8005de0:	2304      	movs	r3, #4
 8005de2:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005de4:	2302      	movs	r3, #2
 8005de6:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005de8:	2300      	movs	r3, #0
 8005dea:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005dec:	2303      	movs	r3, #3
 8005dee:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_UART5;
 8005df0:	2308      	movs	r3, #8
 8005df2:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(PD2_UART5_RX_485_MCU_DRV_GPIO_Port, &GPIO_InitStruct);
 8005df4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005df8:	4619      	mov	r1, r3
 8005dfa:	4839      	ldr	r0, [pc, #228]	; (8005ee0 <HAL_UART_MspInit+0x198>)
 8005dfc:	f000 ff0c 	bl	8006c18 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8005e00:	e063      	b.n	8005eca <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART3)
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	4a37      	ldr	r2, [pc, #220]	; (8005ee4 <HAL_UART_MspInit+0x19c>)
 8005e08:	4293      	cmp	r3, r2
 8005e0a:	d12d      	bne.n	8005e68 <HAL_UART_MspInit+0x120>
    __HAL_RCC_USART3_CLK_ENABLE();
 8005e0c:	2300      	movs	r3, #0
 8005e0e:	617b      	str	r3, [r7, #20]
 8005e10:	4b31      	ldr	r3, [pc, #196]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e12:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e14:	4a30      	ldr	r2, [pc, #192]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e16:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005e1a:	6413      	str	r3, [r2, #64]	; 0x40
 8005e1c:	4b2e      	ldr	r3, [pc, #184]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e1e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005e20:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8005e24:	617b      	str	r3, [r7, #20]
 8005e26:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOD_CLK_ENABLE();
 8005e28:	2300      	movs	r3, #0
 8005e2a:	613b      	str	r3, [r7, #16]
 8005e2c:	4b2a      	ldr	r3, [pc, #168]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e2e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e30:	4a29      	ldr	r2, [pc, #164]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e32:	f043 0308 	orr.w	r3, r3, #8
 8005e36:	6313      	str	r3, [r2, #48]	; 0x30
 8005e38:	4b27      	ldr	r3, [pc, #156]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e3a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e3c:	f003 0308 	and.w	r3, r3, #8
 8005e40:	613b      	str	r3, [r7, #16]
 8005e42:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8005e44:	f44f 7340 	mov.w	r3, #768	; 0x300
 8005e48:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005e4a:	2302      	movs	r3, #2
 8005e4c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005e4e:	2300      	movs	r3, #0
 8005e50:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005e52:	2303      	movs	r3, #3
 8005e54:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF7_USART3;
 8005e56:	2307      	movs	r3, #7
 8005e58:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8005e5a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005e5e:	4619      	mov	r1, r3
 8005e60:	481f      	ldr	r0, [pc, #124]	; (8005ee0 <HAL_UART_MspInit+0x198>)
 8005e62:	f000 fed9 	bl	8006c18 <HAL_GPIO_Init>
}
 8005e66:	e030      	b.n	8005eca <HAL_UART_MspInit+0x182>
  else if(huart->Instance==USART6)
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	4a1e      	ldr	r2, [pc, #120]	; (8005ee8 <HAL_UART_MspInit+0x1a0>)
 8005e6e:	4293      	cmp	r3, r2
 8005e70:	d12b      	bne.n	8005eca <HAL_UART_MspInit+0x182>
    __HAL_RCC_USART6_CLK_ENABLE();
 8005e72:	2300      	movs	r3, #0
 8005e74:	60fb      	str	r3, [r7, #12]
 8005e76:	4b18      	ldr	r3, [pc, #96]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e7a:	4a17      	ldr	r2, [pc, #92]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e7c:	f043 0320 	orr.w	r3, r3, #32
 8005e80:	6453      	str	r3, [r2, #68]	; 0x44
 8005e82:	4b15      	ldr	r3, [pc, #84]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005e86:	f003 0320 	and.w	r3, r3, #32
 8005e8a:	60fb      	str	r3, [r7, #12]
 8005e8c:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005e8e:	2300      	movs	r3, #0
 8005e90:	60bb      	str	r3, [r7, #8]
 8005e92:	4b11      	ldr	r3, [pc, #68]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e94:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005e96:	4a10      	ldr	r2, [pc, #64]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005e98:	f043 0304 	orr.w	r3, r3, #4
 8005e9c:	6313      	str	r3, [r2, #48]	; 0x30
 8005e9e:	4b0e      	ldr	r3, [pc, #56]	; (8005ed8 <HAL_UART_MspInit+0x190>)
 8005ea0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005ea2:	f003 0304 	and.w	r3, r3, #4
 8005ea6:	60bb      	str	r3, [r7, #8]
 8005ea8:	68bb      	ldr	r3, [r7, #8]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8005eaa:	23c0      	movs	r3, #192	; 0xc0
 8005eac:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8005eae:	2302      	movs	r3, #2
 8005eb0:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005eb2:	2300      	movs	r3, #0
 8005eb4:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005eb6:	2303      	movs	r3, #3
 8005eb8:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8005eba:	2308      	movs	r3, #8
 8005ebc:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8005ebe:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005ec2:	4619      	mov	r1, r3
 8005ec4:	4805      	ldr	r0, [pc, #20]	; (8005edc <HAL_UART_MspInit+0x194>)
 8005ec6:	f000 fea7 	bl	8006c18 <HAL_GPIO_Init>
}
 8005eca:	bf00      	nop
 8005ecc:	3738      	adds	r7, #56	; 0x38
 8005ece:	46bd      	mov	sp, r7
 8005ed0:	bd80      	pop	{r7, pc}
 8005ed2:	bf00      	nop
 8005ed4:	40005000 	.word	0x40005000
 8005ed8:	40023800 	.word	0x40023800
 8005edc:	40020800 	.word	0x40020800
 8005ee0:	40020c00 	.word	0x40020c00
 8005ee4:	40004800 	.word	0x40004800
 8005ee8:	40011400 	.word	0x40011400

08005eec <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8005eec:	b480      	push	{r7}
 8005eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8005ef0:	e7fe      	b.n	8005ef0 <NMI_Handler+0x4>

08005ef2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8005ef2:	b480      	push	{r7}
 8005ef4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8005ef6:	e7fe      	b.n	8005ef6 <HardFault_Handler+0x4>

08005ef8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8005ef8:	b480      	push	{r7}
 8005efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8005efc:	e7fe      	b.n	8005efc <MemManage_Handler+0x4>

08005efe <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8005efe:	b480      	push	{r7}
 8005f00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8005f02:	e7fe      	b.n	8005f02 <BusFault_Handler+0x4>

08005f04 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8005f04:	b480      	push	{r7}
 8005f06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8005f08:	e7fe      	b.n	8005f08 <UsageFault_Handler+0x4>

08005f0a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8005f0a:	b480      	push	{r7}
 8005f0c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8005f0e:	bf00      	nop
 8005f10:	46bd      	mov	sp, r7
 8005f12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f16:	4770      	bx	lr

08005f18 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8005f18:	b480      	push	{r7}
 8005f1a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8005f1c:	bf00      	nop
 8005f1e:	46bd      	mov	sp, r7
 8005f20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f24:	4770      	bx	lr

08005f26 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8005f26:	b480      	push	{r7}
 8005f28:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8005f2a:	bf00      	nop
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8005f34:	b580      	push	{r7, lr}
 8005f36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8005f38:	f000 f988 	bl	800624c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8005f3c:	bf00      	nop
 8005f3e:	bd80      	pop	{r7, pc}

08005f40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8005f40:	b580      	push	{r7, lr}
 8005f42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8005f44:	4802      	ldr	r0, [pc, #8]	; (8005f50 <TIM2_IRQHandler+0x10>)
 8005f46:	f001 fdef 	bl	8007b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8005f4a:	bf00      	nop
 8005f4c:	bd80      	pop	{r7, pc}
 8005f4e:	bf00      	nop
 8005f50:	20000220 	.word	0x20000220

08005f54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8005f54:	b580      	push	{r7, lr}
 8005f56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8005f58:	4802      	ldr	r0, [pc, #8]	; (8005f64 <TIM3_IRQHandler+0x10>)
 8005f5a:	f001 fde5 	bl	8007b28 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8005f5e:	bf00      	nop
 8005f60:	bd80      	pop	{r7, pc}
 8005f62:	bf00      	nop
 8005f64:	20000268 	.word	0x20000268

08005f68 <USART3_IRQHandler>:

/**
  * @brief This function handles USART3 global interrupt.
  */
void USART3_IRQHandler(void)
{
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART3_IRQn 0 */

  /* USER CODE END USART3_IRQn 0 */
  HAL_UART_IRQHandler(&huart3);
 8005f6c:	4802      	ldr	r0, [pc, #8]	; (8005f78 <USART3_IRQHandler+0x10>)
 8005f6e:	f002 fc73 	bl	8008858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART3_IRQn 1 */

  /* USER CODE END USART3_IRQn 1 */
}
 8005f72:	bf00      	nop
 8005f74:	bd80      	pop	{r7, pc}
 8005f76:	bf00      	nop
 8005f78:	200002f4 	.word	0x200002f4

08005f7c <UART5_IRQHandler>:

/**
  * @brief This function handles UART5 global interrupt.
  */
void UART5_IRQHandler(void)
{
 8005f7c:	b580      	push	{r7, lr}
 8005f7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UART5_IRQn 0 */

  /* USER CODE END UART5_IRQn 0 */
  HAL_UART_IRQHandler(&huart5);
 8005f80:	4802      	ldr	r0, [pc, #8]	; (8005f8c <UART5_IRQHandler+0x10>)
 8005f82:	f002 fc69 	bl	8008858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN UART5_IRQn 1 */

  /* USER CODE END UART5_IRQn 1 */
}
 8005f86:	bf00      	nop
 8005f88:	bd80      	pop	{r7, pc}
 8005f8a:	bf00      	nop
 8005f8c:	200002b0 	.word	0x200002b0

08005f90 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8005f90:	b580      	push	{r7, lr}
 8005f92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */

  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 8005f94:	4802      	ldr	r0, [pc, #8]	; (8005fa0 <USART6_IRQHandler+0x10>)
 8005f96:	f002 fc5f 	bl	8008858 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8005f9a:	bf00      	nop
 8005f9c:	bd80      	pop	{r7, pc}
 8005f9e:	bf00      	nop
 8005fa0:	20000338 	.word	0x20000338

08005fa4 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	af00      	add	r7, sp, #0
	return 1;
 8005fa8:	2301      	movs	r3, #1
}
 8005faa:	4618      	mov	r0, r3
 8005fac:	46bd      	mov	sp, r7
 8005fae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fb2:	4770      	bx	lr

08005fb4 <_kill>:

int _kill(int pid, int sig)
{
 8005fb4:	b580      	push	{r7, lr}
 8005fb6:	b082      	sub	sp, #8
 8005fb8:	af00      	add	r7, sp, #0
 8005fba:	6078      	str	r0, [r7, #4]
 8005fbc:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8005fbe:	f003 fbb3 	bl	8009728 <__errno>
 8005fc2:	4603      	mov	r3, r0
 8005fc4:	2216      	movs	r2, #22
 8005fc6:	601a      	str	r2, [r3, #0]
	return -1;
 8005fc8:	f04f 33ff 	mov.w	r3, #4294967295
}
 8005fcc:	4618      	mov	r0, r3
 8005fce:	3708      	adds	r7, #8
 8005fd0:	46bd      	mov	sp, r7
 8005fd2:	bd80      	pop	{r7, pc}

08005fd4 <_exit>:

void _exit (int status)
{
 8005fd4:	b580      	push	{r7, lr}
 8005fd6:	b082      	sub	sp, #8
 8005fd8:	af00      	add	r7, sp, #0
 8005fda:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8005fdc:	f04f 31ff 	mov.w	r1, #4294967295
 8005fe0:	6878      	ldr	r0, [r7, #4]
 8005fe2:	f7ff ffe7 	bl	8005fb4 <_kill>
	while (1) {}		/* Make sure we hang here */
 8005fe6:	e7fe      	b.n	8005fe6 <_exit+0x12>

08005fe8 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8005fe8:	b580      	push	{r7, lr}
 8005fea:	b086      	sub	sp, #24
 8005fec:	af00      	add	r7, sp, #0
 8005fee:	60f8      	str	r0, [r7, #12]
 8005ff0:	60b9      	str	r1, [r7, #8]
 8005ff2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	617b      	str	r3, [r7, #20]
 8005ff8:	e00a      	b.n	8006010 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8005ffa:	f3af 8000 	nop.w
 8005ffe:	4601      	mov	r1, r0
 8006000:	68bb      	ldr	r3, [r7, #8]
 8006002:	1c5a      	adds	r2, r3, #1
 8006004:	60ba      	str	r2, [r7, #8]
 8006006:	b2ca      	uxtb	r2, r1
 8006008:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800600a:	697b      	ldr	r3, [r7, #20]
 800600c:	3301      	adds	r3, #1
 800600e:	617b      	str	r3, [r7, #20]
 8006010:	697a      	ldr	r2, [r7, #20]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	429a      	cmp	r2, r3
 8006016:	dbf0      	blt.n	8005ffa <_read+0x12>
	}

return len;
 8006018:	687b      	ldr	r3, [r7, #4]
}
 800601a:	4618      	mov	r0, r3
 800601c:	3718      	adds	r7, #24
 800601e:	46bd      	mov	sp, r7
 8006020:	bd80      	pop	{r7, pc}

08006022 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8006022:	b580      	push	{r7, lr}
 8006024:	b086      	sub	sp, #24
 8006026:	af00      	add	r7, sp, #0
 8006028:	60f8      	str	r0, [r7, #12]
 800602a:	60b9      	str	r1, [r7, #8]
 800602c:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800602e:	2300      	movs	r3, #0
 8006030:	617b      	str	r3, [r7, #20]
 8006032:	e009      	b.n	8006048 <_write+0x26>
	{
		__io_putchar(*ptr++);
 8006034:	68bb      	ldr	r3, [r7, #8]
 8006036:	1c5a      	adds	r2, r3, #1
 8006038:	60ba      	str	r2, [r7, #8]
 800603a:	781b      	ldrb	r3, [r3, #0]
 800603c:	4618      	mov	r0, r3
 800603e:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 8006042:	697b      	ldr	r3, [r7, #20]
 8006044:	3301      	adds	r3, #1
 8006046:	617b      	str	r3, [r7, #20]
 8006048:	697a      	ldr	r2, [r7, #20]
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	429a      	cmp	r2, r3
 800604e:	dbf1      	blt.n	8006034 <_write+0x12>
	}
	return len;
 8006050:	687b      	ldr	r3, [r7, #4]
}
 8006052:	4618      	mov	r0, r3
 8006054:	3718      	adds	r7, #24
 8006056:	46bd      	mov	sp, r7
 8006058:	bd80      	pop	{r7, pc}

0800605a <_close>:

int _close(int file)
{
 800605a:	b480      	push	{r7}
 800605c:	b083      	sub	sp, #12
 800605e:	af00      	add	r7, sp, #0
 8006060:	6078      	str	r0, [r7, #4]
	return -1;
 8006062:	f04f 33ff 	mov.w	r3, #4294967295
}
 8006066:	4618      	mov	r0, r3
 8006068:	370c      	adds	r7, #12
 800606a:	46bd      	mov	sp, r7
 800606c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006070:	4770      	bx	lr

08006072 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8006072:	b480      	push	{r7}
 8006074:	b083      	sub	sp, #12
 8006076:	af00      	add	r7, sp, #0
 8006078:	6078      	str	r0, [r7, #4]
 800607a:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 800607c:	683b      	ldr	r3, [r7, #0]
 800607e:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8006082:	605a      	str	r2, [r3, #4]
	return 0;
 8006084:	2300      	movs	r3, #0
}
 8006086:	4618      	mov	r0, r3
 8006088:	370c      	adds	r7, #12
 800608a:	46bd      	mov	sp, r7
 800608c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006090:	4770      	bx	lr

08006092 <_isatty>:

int _isatty(int file)
{
 8006092:	b480      	push	{r7}
 8006094:	b083      	sub	sp, #12
 8006096:	af00      	add	r7, sp, #0
 8006098:	6078      	str	r0, [r7, #4]
	return 1;
 800609a:	2301      	movs	r3, #1
}
 800609c:	4618      	mov	r0, r3
 800609e:	370c      	adds	r7, #12
 80060a0:	46bd      	mov	sp, r7
 80060a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a6:	4770      	bx	lr

080060a8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80060a8:	b480      	push	{r7}
 80060aa:	b085      	sub	sp, #20
 80060ac:	af00      	add	r7, sp, #0
 80060ae:	60f8      	str	r0, [r7, #12]
 80060b0:	60b9      	str	r1, [r7, #8]
 80060b2:	607a      	str	r2, [r7, #4]
	return 0;
 80060b4:	2300      	movs	r3, #0
}
 80060b6:	4618      	mov	r0, r3
 80060b8:	3714      	adds	r7, #20
 80060ba:	46bd      	mov	sp, r7
 80060bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060c0:	4770      	bx	lr
	...

080060c4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80060c4:	b580      	push	{r7, lr}
 80060c6:	b086      	sub	sp, #24
 80060c8:	af00      	add	r7, sp, #0
 80060ca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80060cc:	4a14      	ldr	r2, [pc, #80]	; (8006120 <_sbrk+0x5c>)
 80060ce:	4b15      	ldr	r3, [pc, #84]	; (8006124 <_sbrk+0x60>)
 80060d0:	1ad3      	subs	r3, r2, r3
 80060d2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80060d4:	697b      	ldr	r3, [r7, #20]
 80060d6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80060d8:	4b13      	ldr	r3, [pc, #76]	; (8006128 <_sbrk+0x64>)
 80060da:	681b      	ldr	r3, [r3, #0]
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d102      	bne.n	80060e6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80060e0:	4b11      	ldr	r3, [pc, #68]	; (8006128 <_sbrk+0x64>)
 80060e2:	4a12      	ldr	r2, [pc, #72]	; (800612c <_sbrk+0x68>)
 80060e4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80060e6:	4b10      	ldr	r3, [pc, #64]	; (8006128 <_sbrk+0x64>)
 80060e8:	681a      	ldr	r2, [r3, #0]
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	4413      	add	r3, r2
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	429a      	cmp	r2, r3
 80060f2:	d207      	bcs.n	8006104 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80060f4:	f003 fb18 	bl	8009728 <__errno>
 80060f8:	4603      	mov	r3, r0
 80060fa:	220c      	movs	r2, #12
 80060fc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80060fe:	f04f 33ff 	mov.w	r3, #4294967295
 8006102:	e009      	b.n	8006118 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8006104:	4b08      	ldr	r3, [pc, #32]	; (8006128 <_sbrk+0x64>)
 8006106:	681b      	ldr	r3, [r3, #0]
 8006108:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800610a:	4b07      	ldr	r3, [pc, #28]	; (8006128 <_sbrk+0x64>)
 800610c:	681a      	ldr	r2, [r3, #0]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	4413      	add	r3, r2
 8006112:	4a05      	ldr	r2, [pc, #20]	; (8006128 <_sbrk+0x64>)
 8006114:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8006116:	68fb      	ldr	r3, [r7, #12]
}
 8006118:	4618      	mov	r0, r3
 800611a:	3718      	adds	r7, #24
 800611c:	46bd      	mov	sp, r7
 800611e:	bd80      	pop	{r7, pc}
 8006120:	20020000 	.word	0x20020000
 8006124:	00000400 	.word	0x00000400
 8006128:	2000053c 	.word	0x2000053c
 800612c:	20000578 	.word	0x20000578

08006130 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8006130:	b480      	push	{r7}
 8006132:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8006134:	4b06      	ldr	r3, [pc, #24]	; (8006150 <SystemInit+0x20>)
 8006136:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800613a:	4a05      	ldr	r2, [pc, #20]	; (8006150 <SystemInit+0x20>)
 800613c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8006140:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8006144:	bf00      	nop
 8006146:	46bd      	mov	sp, r7
 8006148:	f85d 7b04 	ldr.w	r7, [sp], #4
 800614c:	4770      	bx	lr
 800614e:	bf00      	nop
 8006150:	e000ed00 	.word	0xe000ed00

08006154 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack     /* set stack pointer */
 8006154:	f8df d034 	ldr.w	sp, [pc, #52]	; 800618c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8006158:	480d      	ldr	r0, [pc, #52]	; (8006190 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800615a:	490e      	ldr	r1, [pc, #56]	; (8006194 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800615c:	4a0e      	ldr	r2, [pc, #56]	; (8006198 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800615e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8006160:	e002      	b.n	8006168 <LoopCopyDataInit>

08006162 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8006162:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8006164:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8006166:	3304      	adds	r3, #4

08006168 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8006168:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800616a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800616c:	d3f9      	bcc.n	8006162 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800616e:	4a0b      	ldr	r2, [pc, #44]	; (800619c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8006170:	4c0b      	ldr	r4, [pc, #44]	; (80061a0 <LoopFillZerobss+0x26>)
  movs r3, #0
 8006172:	2300      	movs	r3, #0
  b LoopFillZerobss
 8006174:	e001      	b.n	800617a <LoopFillZerobss>

08006176 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8006176:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8006178:	3204      	adds	r2, #4

0800617a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800617a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800617c:	d3fb      	bcc.n	8006176 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800617e:	f7ff ffd7 	bl	8006130 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8006182:	f003 fad7 	bl	8009734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8006186:	f7fe fd97 	bl	8004cb8 <main>
  bx  lr    
 800618a:	4770      	bx	lr
  ldr   sp, =_estack     /* set stack pointer */
 800618c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8006190:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8006194:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 8006198:	0800e488 	.word	0x0800e488
  ldr r2, =_sbss
 800619c:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80061a0:	20000574 	.word	0x20000574

080061a4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80061a4:	e7fe      	b.n	80061a4 <ADC_IRQHandler>
	...

080061a8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80061a8:	b580      	push	{r7, lr}
 80061aa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80061ac:	4b0e      	ldr	r3, [pc, #56]	; (80061e8 <HAL_Init+0x40>)
 80061ae:	681b      	ldr	r3, [r3, #0]
 80061b0:	4a0d      	ldr	r2, [pc, #52]	; (80061e8 <HAL_Init+0x40>)
 80061b2:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80061b6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80061b8:	4b0b      	ldr	r3, [pc, #44]	; (80061e8 <HAL_Init+0x40>)
 80061ba:	681b      	ldr	r3, [r3, #0]
 80061bc:	4a0a      	ldr	r2, [pc, #40]	; (80061e8 <HAL_Init+0x40>)
 80061be:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80061c2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80061c4:	4b08      	ldr	r3, [pc, #32]	; (80061e8 <HAL_Init+0x40>)
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	4a07      	ldr	r2, [pc, #28]	; (80061e8 <HAL_Init+0x40>)
 80061ca:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80061ce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80061d0:	2003      	movs	r0, #3
 80061d2:	f000 f965 	bl	80064a0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80061d6:	2000      	movs	r0, #0
 80061d8:	f000 f808 	bl	80061ec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80061dc:	f7ff fd12 	bl	8005c04 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80061e0:	2300      	movs	r3, #0
}
 80061e2:	4618      	mov	r0, r3
 80061e4:	bd80      	pop	{r7, pc}
 80061e6:	bf00      	nop
 80061e8:	40023c00 	.word	0x40023c00

080061ec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80061ec:	b580      	push	{r7, lr}
 80061ee:	b082      	sub	sp, #8
 80061f0:	af00      	add	r7, sp, #0
 80061f2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80061f4:	4b12      	ldr	r3, [pc, #72]	; (8006240 <HAL_InitTick+0x54>)
 80061f6:	681a      	ldr	r2, [r3, #0]
 80061f8:	4b12      	ldr	r3, [pc, #72]	; (8006244 <HAL_InitTick+0x58>)
 80061fa:	781b      	ldrb	r3, [r3, #0]
 80061fc:	4619      	mov	r1, r3
 80061fe:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8006202:	fbb3 f3f1 	udiv	r3, r3, r1
 8006206:	fbb2 f3f3 	udiv	r3, r2, r3
 800620a:	4618      	mov	r0, r3
 800620c:	f000 f981 	bl	8006512 <HAL_SYSTICK_Config>
 8006210:	4603      	mov	r3, r0
 8006212:	2b00      	cmp	r3, #0
 8006214:	d001      	beq.n	800621a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8006216:	2301      	movs	r3, #1
 8006218:	e00e      	b.n	8006238 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800621a:	687b      	ldr	r3, [r7, #4]
 800621c:	2b0f      	cmp	r3, #15
 800621e:	d80a      	bhi.n	8006236 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8006220:	2200      	movs	r2, #0
 8006222:	6879      	ldr	r1, [r7, #4]
 8006224:	f04f 30ff 	mov.w	r0, #4294967295
 8006228:	f000 f945 	bl	80064b6 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800622c:	4a06      	ldr	r2, [pc, #24]	; (8006248 <HAL_InitTick+0x5c>)
 800622e:	687b      	ldr	r3, [r7, #4]
 8006230:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8006232:	2300      	movs	r3, #0
 8006234:	e000      	b.n	8006238 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8006236:	2301      	movs	r3, #1
}
 8006238:	4618      	mov	r0, r3
 800623a:	3708      	adds	r7, #8
 800623c:	46bd      	mov	sp, r7
 800623e:	bd80      	pop	{r7, pc}
 8006240:	20000010 	.word	0x20000010
 8006244:	20000018 	.word	0x20000018
 8006248:	20000014 	.word	0x20000014

0800624c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800624c:	b480      	push	{r7}
 800624e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8006250:	4b06      	ldr	r3, [pc, #24]	; (800626c <HAL_IncTick+0x20>)
 8006252:	781b      	ldrb	r3, [r3, #0]
 8006254:	461a      	mov	r2, r3
 8006256:	4b06      	ldr	r3, [pc, #24]	; (8006270 <HAL_IncTick+0x24>)
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	4413      	add	r3, r2
 800625c:	4a04      	ldr	r2, [pc, #16]	; (8006270 <HAL_IncTick+0x24>)
 800625e:	6013      	str	r3, [r2, #0]
}
 8006260:	bf00      	nop
 8006262:	46bd      	mov	sp, r7
 8006264:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006268:	4770      	bx	lr
 800626a:	bf00      	nop
 800626c:	20000018 	.word	0x20000018
 8006270:	20000540 	.word	0x20000540

08006274 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8006274:	b480      	push	{r7}
 8006276:	af00      	add	r7, sp, #0
  return uwTick;
 8006278:	4b03      	ldr	r3, [pc, #12]	; (8006288 <HAL_GetTick+0x14>)
 800627a:	681b      	ldr	r3, [r3, #0]
}
 800627c:	4618      	mov	r0, r3
 800627e:	46bd      	mov	sp, r7
 8006280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006284:	4770      	bx	lr
 8006286:	bf00      	nop
 8006288:	20000540 	.word	0x20000540

0800628c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800628c:	b580      	push	{r7, lr}
 800628e:	b084      	sub	sp, #16
 8006290:	af00      	add	r7, sp, #0
 8006292:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8006294:	f7ff ffee 	bl	8006274 <HAL_GetTick>
 8006298:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80062a4:	d005      	beq.n	80062b2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80062a6:	4b0a      	ldr	r3, [pc, #40]	; (80062d0 <HAL_Delay+0x44>)
 80062a8:	781b      	ldrb	r3, [r3, #0]
 80062aa:	461a      	mov	r2, r3
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	4413      	add	r3, r2
 80062b0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80062b2:	bf00      	nop
 80062b4:	f7ff ffde 	bl	8006274 <HAL_GetTick>
 80062b8:	4602      	mov	r2, r0
 80062ba:	68bb      	ldr	r3, [r7, #8]
 80062bc:	1ad3      	subs	r3, r2, r3
 80062be:	68fa      	ldr	r2, [r7, #12]
 80062c0:	429a      	cmp	r2, r3
 80062c2:	d8f7      	bhi.n	80062b4 <HAL_Delay+0x28>
  {
  }
}
 80062c4:	bf00      	nop
 80062c6:	bf00      	nop
 80062c8:	3710      	adds	r7, #16
 80062ca:	46bd      	mov	sp, r7
 80062cc:	bd80      	pop	{r7, pc}
 80062ce:	bf00      	nop
 80062d0:	20000018 	.word	0x20000018

080062d4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b085      	sub	sp, #20
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	f003 0307 	and.w	r3, r3, #7
 80062e2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80062e4:	4b0c      	ldr	r3, [pc, #48]	; (8006318 <__NVIC_SetPriorityGrouping+0x44>)
 80062e6:	68db      	ldr	r3, [r3, #12]
 80062e8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80062ea:	68ba      	ldr	r2, [r7, #8]
 80062ec:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80062f0:	4013      	ands	r3, r2
 80062f2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80062f4:	68fb      	ldr	r3, [r7, #12]
 80062f6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80062f8:	68bb      	ldr	r3, [r7, #8]
 80062fa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80062fc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8006300:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8006304:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8006306:	4a04      	ldr	r2, [pc, #16]	; (8006318 <__NVIC_SetPriorityGrouping+0x44>)
 8006308:	68bb      	ldr	r3, [r7, #8]
 800630a:	60d3      	str	r3, [r2, #12]
}
 800630c:	bf00      	nop
 800630e:	3714      	adds	r7, #20
 8006310:	46bd      	mov	sp, r7
 8006312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006316:	4770      	bx	lr
 8006318:	e000ed00 	.word	0xe000ed00

0800631c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800631c:	b480      	push	{r7}
 800631e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8006320:	4b04      	ldr	r3, [pc, #16]	; (8006334 <__NVIC_GetPriorityGrouping+0x18>)
 8006322:	68db      	ldr	r3, [r3, #12]
 8006324:	0a1b      	lsrs	r3, r3, #8
 8006326:	f003 0307 	and.w	r3, r3, #7
}
 800632a:	4618      	mov	r0, r3
 800632c:	46bd      	mov	sp, r7
 800632e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006332:	4770      	bx	lr
 8006334:	e000ed00 	.word	0xe000ed00

08006338 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8006338:	b480      	push	{r7}
 800633a:	b083      	sub	sp, #12
 800633c:	af00      	add	r7, sp, #0
 800633e:	4603      	mov	r3, r0
 8006340:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006342:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006346:	2b00      	cmp	r3, #0
 8006348:	db0b      	blt.n	8006362 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800634a:	79fb      	ldrb	r3, [r7, #7]
 800634c:	f003 021f 	and.w	r2, r3, #31
 8006350:	4907      	ldr	r1, [pc, #28]	; (8006370 <__NVIC_EnableIRQ+0x38>)
 8006352:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006356:	095b      	lsrs	r3, r3, #5
 8006358:	2001      	movs	r0, #1
 800635a:	fa00 f202 	lsl.w	r2, r0, r2
 800635e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8006362:	bf00      	nop
 8006364:	370c      	adds	r7, #12
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	e000e100 	.word	0xe000e100

08006374 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8006374:	b480      	push	{r7}
 8006376:	b083      	sub	sp, #12
 8006378:	af00      	add	r7, sp, #0
 800637a:	4603      	mov	r3, r0
 800637c:	6039      	str	r1, [r7, #0]
 800637e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8006380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006384:	2b00      	cmp	r3, #0
 8006386:	db0a      	blt.n	800639e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8006388:	683b      	ldr	r3, [r7, #0]
 800638a:	b2da      	uxtb	r2, r3
 800638c:	490c      	ldr	r1, [pc, #48]	; (80063c0 <__NVIC_SetPriority+0x4c>)
 800638e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8006392:	0112      	lsls	r2, r2, #4
 8006394:	b2d2      	uxtb	r2, r2
 8006396:	440b      	add	r3, r1
 8006398:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800639c:	e00a      	b.n	80063b4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800639e:	683b      	ldr	r3, [r7, #0]
 80063a0:	b2da      	uxtb	r2, r3
 80063a2:	4908      	ldr	r1, [pc, #32]	; (80063c4 <__NVIC_SetPriority+0x50>)
 80063a4:	79fb      	ldrb	r3, [r7, #7]
 80063a6:	f003 030f 	and.w	r3, r3, #15
 80063aa:	3b04      	subs	r3, #4
 80063ac:	0112      	lsls	r2, r2, #4
 80063ae:	b2d2      	uxtb	r2, r2
 80063b0:	440b      	add	r3, r1
 80063b2:	761a      	strb	r2, [r3, #24]
}
 80063b4:	bf00      	nop
 80063b6:	370c      	adds	r7, #12
 80063b8:	46bd      	mov	sp, r7
 80063ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063be:	4770      	bx	lr
 80063c0:	e000e100 	.word	0xe000e100
 80063c4:	e000ed00 	.word	0xe000ed00

080063c8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80063c8:	b480      	push	{r7}
 80063ca:	b089      	sub	sp, #36	; 0x24
 80063cc:	af00      	add	r7, sp, #0
 80063ce:	60f8      	str	r0, [r7, #12]
 80063d0:	60b9      	str	r1, [r7, #8]
 80063d2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80063d4:	68fb      	ldr	r3, [r7, #12]
 80063d6:	f003 0307 	and.w	r3, r3, #7
 80063da:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80063dc:	69fb      	ldr	r3, [r7, #28]
 80063de:	f1c3 0307 	rsb	r3, r3, #7
 80063e2:	2b04      	cmp	r3, #4
 80063e4:	bf28      	it	cs
 80063e6:	2304      	movcs	r3, #4
 80063e8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80063ea:	69fb      	ldr	r3, [r7, #28]
 80063ec:	3304      	adds	r3, #4
 80063ee:	2b06      	cmp	r3, #6
 80063f0:	d902      	bls.n	80063f8 <NVIC_EncodePriority+0x30>
 80063f2:	69fb      	ldr	r3, [r7, #28]
 80063f4:	3b03      	subs	r3, #3
 80063f6:	e000      	b.n	80063fa <NVIC_EncodePriority+0x32>
 80063f8:	2300      	movs	r3, #0
 80063fa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80063fc:	f04f 32ff 	mov.w	r2, #4294967295
 8006400:	69bb      	ldr	r3, [r7, #24]
 8006402:	fa02 f303 	lsl.w	r3, r2, r3
 8006406:	43da      	mvns	r2, r3
 8006408:	68bb      	ldr	r3, [r7, #8]
 800640a:	401a      	ands	r2, r3
 800640c:	697b      	ldr	r3, [r7, #20]
 800640e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8006410:	f04f 31ff 	mov.w	r1, #4294967295
 8006414:	697b      	ldr	r3, [r7, #20]
 8006416:	fa01 f303 	lsl.w	r3, r1, r3
 800641a:	43d9      	mvns	r1, r3
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8006420:	4313      	orrs	r3, r2
         );
}
 8006422:	4618      	mov	r0, r3
 8006424:	3724      	adds	r7, #36	; 0x24
 8006426:	46bd      	mov	sp, r7
 8006428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642c:	4770      	bx	lr
	...

08006430 <__NVIC_SystemReset>:
/**
  \brief   System Reset
  \details Initiates a system reset request to reset the MCU.
 */
__NO_RETURN __STATIC_INLINE void __NVIC_SystemReset(void)
{
 8006430:	b480      	push	{r7}
 8006432:	af00      	add	r7, sp, #0
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8006434:	f3bf 8f4f 	dsb	sy
}
 8006438:	bf00      	nop
  __DSB();                                                          /* Ensure all outstanding memory accesses included
                                                                       buffered write are completed before reset */
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
                           (SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) |
 800643a:	4b06      	ldr	r3, [pc, #24]	; (8006454 <__NVIC_SystemReset+0x24>)
 800643c:	68db      	ldr	r3, [r3, #12]
 800643e:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
  SCB->AIRCR  = (uint32_t)((0x5FAUL << SCB_AIRCR_VECTKEY_Pos)    |
 8006442:	4904      	ldr	r1, [pc, #16]	; (8006454 <__NVIC_SystemReset+0x24>)
 8006444:	4b04      	ldr	r3, [pc, #16]	; (8006458 <__NVIC_SystemReset+0x28>)
 8006446:	4313      	orrs	r3, r2
 8006448:	60cb      	str	r3, [r1, #12]
  __ASM volatile ("dsb 0xF":::"memory");
 800644a:	f3bf 8f4f 	dsb	sy
}
 800644e:	bf00      	nop
                            SCB_AIRCR_SYSRESETREQ_Msk    );         /* Keep priority group unchanged */
  __DSB();                                                          /* Ensure completion of memory access */

  for(;;)                                                           /* wait until reset */
  {
    __NOP();
 8006450:	bf00      	nop
 8006452:	e7fd      	b.n	8006450 <__NVIC_SystemReset+0x20>
 8006454:	e000ed00 	.word	0xe000ed00
 8006458:	05fa0004 	.word	0x05fa0004

0800645c <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800645c:	b580      	push	{r7, lr}
 800645e:	b082      	sub	sp, #8
 8006460:	af00      	add	r7, sp, #0
 8006462:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8006464:	687b      	ldr	r3, [r7, #4]
 8006466:	3b01      	subs	r3, #1
 8006468:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 800646c:	d301      	bcc.n	8006472 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 800646e:	2301      	movs	r3, #1
 8006470:	e00f      	b.n	8006492 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8006472:	4a0a      	ldr	r2, [pc, #40]	; (800649c <SysTick_Config+0x40>)
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	3b01      	subs	r3, #1
 8006478:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800647a:	210f      	movs	r1, #15
 800647c:	f04f 30ff 	mov.w	r0, #4294967295
 8006480:	f7ff ff78 	bl	8006374 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8006484:	4b05      	ldr	r3, [pc, #20]	; (800649c <SysTick_Config+0x40>)
 8006486:	2200      	movs	r2, #0
 8006488:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800648a:	4b04      	ldr	r3, [pc, #16]	; (800649c <SysTick_Config+0x40>)
 800648c:	2207      	movs	r2, #7
 800648e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8006490:	2300      	movs	r3, #0
}
 8006492:	4618      	mov	r0, r3
 8006494:	3708      	adds	r7, #8
 8006496:	46bd      	mov	sp, r7
 8006498:	bd80      	pop	{r7, pc}
 800649a:	bf00      	nop
 800649c:	e000e010 	.word	0xe000e010

080064a0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80064a0:	b580      	push	{r7, lr}
 80064a2:	b082      	sub	sp, #8
 80064a4:	af00      	add	r7, sp, #0
 80064a6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 80064a8:	6878      	ldr	r0, [r7, #4]
 80064aa:	f7ff ff13 	bl	80062d4 <__NVIC_SetPriorityGrouping>
}
 80064ae:	bf00      	nop
 80064b0:	3708      	adds	r7, #8
 80064b2:	46bd      	mov	sp, r7
 80064b4:	bd80      	pop	{r7, pc}

080064b6 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 80064b6:	b580      	push	{r7, lr}
 80064b8:	b086      	sub	sp, #24
 80064ba:	af00      	add	r7, sp, #0
 80064bc:	4603      	mov	r3, r0
 80064be:	60b9      	str	r1, [r7, #8]
 80064c0:	607a      	str	r2, [r7, #4]
 80064c2:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 80064c4:	2300      	movs	r3, #0
 80064c6:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 80064c8:	f7ff ff28 	bl	800631c <__NVIC_GetPriorityGrouping>
 80064cc:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 80064ce:	687a      	ldr	r2, [r7, #4]
 80064d0:	68b9      	ldr	r1, [r7, #8]
 80064d2:	6978      	ldr	r0, [r7, #20]
 80064d4:	f7ff ff78 	bl	80063c8 <NVIC_EncodePriority>
 80064d8:	4602      	mov	r2, r0
 80064da:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80064de:	4611      	mov	r1, r2
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff ff47 	bl	8006374 <__NVIC_SetPriority>
}
 80064e6:	bf00      	nop
 80064e8:	3718      	adds	r7, #24
 80064ea:	46bd      	mov	sp, r7
 80064ec:	bd80      	pop	{r7, pc}

080064ee <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80064ee:	b580      	push	{r7, lr}
 80064f0:	b082      	sub	sp, #8
 80064f2:	af00      	add	r7, sp, #0
 80064f4:	4603      	mov	r3, r0
 80064f6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 80064f8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80064fc:	4618      	mov	r0, r3
 80064fe:	f7ff ff1b 	bl	8006338 <__NVIC_EnableIRQ>
}
 8006502:	bf00      	nop
 8006504:	3708      	adds	r7, #8
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <HAL_NVIC_SystemReset>:
/**
  * @brief  Initiates a system reset request to reset the MCU.
  * @retval None
  */
void HAL_NVIC_SystemReset(void)
{
 800650a:	b580      	push	{r7, lr}
 800650c:	af00      	add	r7, sp, #0
  /* System Reset */
  NVIC_SystemReset();
 800650e:	f7ff ff8f 	bl	8006430 <__NVIC_SystemReset>

08006512 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8006512:	b580      	push	{r7, lr}
 8006514:	b082      	sub	sp, #8
 8006516:	af00      	add	r7, sp, #0
 8006518:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800651a:	6878      	ldr	r0, [r7, #4]
 800651c:	f7ff ff9e 	bl	800645c <SysTick_Config>
 8006520:	4603      	mov	r3, r0
}
 8006522:	4618      	mov	r0, r3
 8006524:	3708      	adds	r7, #8
 8006526:	46bd      	mov	sp, r7
 8006528:	bd80      	pop	{r7, pc}

0800652a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800652a:	b580      	push	{r7, lr}
 800652c:	b084      	sub	sp, #16
 800652e:	af00      	add	r7, sp, #0
 8006530:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8006532:	687b      	ldr	r3, [r7, #4]
 8006534:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8006536:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8006538:	f7ff fe9c 	bl	8006274 <HAL_GetTick>
 800653c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006544:	b2db      	uxtb	r3, r3
 8006546:	2b02      	cmp	r3, #2
 8006548:	d008      	beq.n	800655c <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	2280      	movs	r2, #128	; 0x80
 800654e:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	2200      	movs	r2, #0
 8006554:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8006558:	2301      	movs	r3, #1
 800655a:	e052      	b.n	8006602 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	681b      	ldr	r3, [r3, #0]
 8006560:	681a      	ldr	r2, [r3, #0]
 8006562:	687b      	ldr	r3, [r7, #4]
 8006564:	681b      	ldr	r3, [r3, #0]
 8006566:	f022 0216 	bic.w	r2, r2, #22
 800656a:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800656c:	687b      	ldr	r3, [r7, #4]
 800656e:	681b      	ldr	r3, [r3, #0]
 8006570:	695a      	ldr	r2, [r3, #20]
 8006572:	687b      	ldr	r3, [r7, #4]
 8006574:	681b      	ldr	r3, [r3, #0]
 8006576:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800657a:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800657c:	687b      	ldr	r3, [r7, #4]
 800657e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006580:	2b00      	cmp	r3, #0
 8006582:	d103      	bne.n	800658c <HAL_DMA_Abort+0x62>
 8006584:	687b      	ldr	r3, [r7, #4]
 8006586:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8006588:	2b00      	cmp	r3, #0
 800658a:	d007      	beq.n	800659c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	681b      	ldr	r3, [r3, #0]
 8006590:	681a      	ldr	r2, [r3, #0]
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	681b      	ldr	r3, [r3, #0]
 8006596:	f022 0208 	bic.w	r2, r2, #8
 800659a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	681b      	ldr	r3, [r3, #0]
 80065a0:	681a      	ldr	r2, [r3, #0]
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	681b      	ldr	r3, [r3, #0]
 80065a6:	f022 0201 	bic.w	r2, r2, #1
 80065aa:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065ac:	e013      	b.n	80065d6 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80065ae:	f7ff fe61 	bl	8006274 <HAL_GetTick>
 80065b2:	4602      	mov	r2, r0
 80065b4:	68bb      	ldr	r3, [r7, #8]
 80065b6:	1ad3      	subs	r3, r2, r3
 80065b8:	2b05      	cmp	r3, #5
 80065ba:	d90c      	bls.n	80065d6 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80065bc:	687b      	ldr	r3, [r7, #4]
 80065be:	2220      	movs	r2, #32
 80065c0:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80065c2:	687b      	ldr	r3, [r7, #4]
 80065c4:	2203      	movs	r2, #3
 80065c6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80065ca:	687b      	ldr	r3, [r7, #4]
 80065cc:	2200      	movs	r2, #0
 80065ce:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        return HAL_TIMEOUT;
 80065d2:	2303      	movs	r3, #3
 80065d4:	e015      	b.n	8006602 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80065d6:	687b      	ldr	r3, [r7, #4]
 80065d8:	681b      	ldr	r3, [r3, #0]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	f003 0301 	and.w	r3, r3, #1
 80065e0:	2b00      	cmp	r3, #0
 80065e2:	d1e4      	bne.n	80065ae <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80065e8:	223f      	movs	r2, #63	; 0x3f
 80065ea:	409a      	lsls	r2, r3
 80065ec:	68fb      	ldr	r3, [r7, #12]
 80065ee:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	2201      	movs	r2, #1
 80065f4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80065f8:	687b      	ldr	r3, [r7, #4]
 80065fa:	2200      	movs	r2, #0
 80065fc:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  }
  return HAL_OK;
 8006600:	2300      	movs	r3, #0
}
 8006602:	4618      	mov	r0, r3
 8006604:	3710      	adds	r7, #16
 8006606:	46bd      	mov	sp, r7
 8006608:	bd80      	pop	{r7, pc}

0800660a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800660a:	b480      	push	{r7}
 800660c:	b083      	sub	sp, #12
 800660e:	af00      	add	r7, sp, #0
 8006610:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8006612:	687b      	ldr	r3, [r7, #4]
 8006614:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006618:	b2db      	uxtb	r3, r3
 800661a:	2b02      	cmp	r3, #2
 800661c:	d004      	beq.n	8006628 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	2280      	movs	r2, #128	; 0x80
 8006622:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8006624:	2301      	movs	r3, #1
 8006626:	e00c      	b.n	8006642 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8006628:	687b      	ldr	r3, [r7, #4]
 800662a:	2205      	movs	r2, #5
 800662c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8006630:	687b      	ldr	r3, [r7, #4]
 8006632:	681b      	ldr	r3, [r3, #0]
 8006634:	681a      	ldr	r2, [r3, #0]
 8006636:	687b      	ldr	r3, [r7, #4]
 8006638:	681b      	ldr	r3, [r3, #0]
 800663a:	f022 0201 	bic.w	r2, r2, #1
 800663e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8006640:	2300      	movs	r3, #0
}
 8006642:	4618      	mov	r0, r3
 8006644:	370c      	adds	r7, #12
 8006646:	46bd      	mov	sp, r7
 8006648:	f85d 7b04 	ldr.w	r7, [sp], #4
 800664c:	4770      	bx	lr
	...

08006650 <HAL_FLASH_Program>:
  * @param  Data specifies the data to be programmed
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Program(uint32_t TypeProgram, uint32_t Address, uint64_t Data)
{
 8006650:	b580      	push	{r7, lr}
 8006652:	b086      	sub	sp, #24
 8006654:	af00      	add	r7, sp, #0
 8006656:	60f8      	str	r0, [r7, #12]
 8006658:	60b9      	str	r1, [r7, #8]
 800665a:	e9c7 2300 	strd	r2, r3, [r7]
  HAL_StatusTypeDef status = HAL_ERROR;
 800665e:	2301      	movs	r3, #1
 8006660:	75fb      	strb	r3, [r7, #23]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 8006662:	4b23      	ldr	r3, [pc, #140]	; (80066f0 <HAL_FLASH_Program+0xa0>)
 8006664:	7e1b      	ldrb	r3, [r3, #24]
 8006666:	2b01      	cmp	r3, #1
 8006668:	d101      	bne.n	800666e <HAL_FLASH_Program+0x1e>
 800666a:	2302      	movs	r3, #2
 800666c:	e03b      	b.n	80066e6 <HAL_FLASH_Program+0x96>
 800666e:	4b20      	ldr	r3, [pc, #128]	; (80066f0 <HAL_FLASH_Program+0xa0>)
 8006670:	2201      	movs	r2, #1
 8006672:	761a      	strb	r2, [r3, #24]
  
  /* Check the parameters */
  assert_param(IS_FLASH_TYPEPROGRAM(TypeProgram));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006674:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006678:	f000 f87c 	bl	8006774 <FLASH_WaitForLastOperation>
 800667c:	4603      	mov	r3, r0
 800667e:	75fb      	strb	r3, [r7, #23]
  
  if(status == HAL_OK)
 8006680:	7dfb      	ldrb	r3, [r7, #23]
 8006682:	2b00      	cmp	r3, #0
 8006684:	d12b      	bne.n	80066de <HAL_FLASH_Program+0x8e>
  {
    if(TypeProgram == FLASH_TYPEPROGRAM_BYTE)
 8006686:	68fb      	ldr	r3, [r7, #12]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d105      	bne.n	8006698 <HAL_FLASH_Program+0x48>
    {
      /*Program byte (8-bit) at a specified address.*/
      FLASH_Program_Byte(Address, (uint8_t) Data);
 800668c:	783b      	ldrb	r3, [r7, #0]
 800668e:	4619      	mov	r1, r3
 8006690:	68b8      	ldr	r0, [r7, #8]
 8006692:	f000 f927 	bl	80068e4 <FLASH_Program_Byte>
 8006696:	e016      	b.n	80066c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_HALFWORD)
 8006698:	68fb      	ldr	r3, [r7, #12]
 800669a:	2b01      	cmp	r3, #1
 800669c:	d105      	bne.n	80066aa <HAL_FLASH_Program+0x5a>
    {
      /*Program halfword (16-bit) at a specified address.*/
      FLASH_Program_HalfWord(Address, (uint16_t) Data);
 800669e:	883b      	ldrh	r3, [r7, #0]
 80066a0:	4619      	mov	r1, r3
 80066a2:	68b8      	ldr	r0, [r7, #8]
 80066a4:	f000 f8fa 	bl	800689c <FLASH_Program_HalfWord>
 80066a8:	e00d      	b.n	80066c6 <HAL_FLASH_Program+0x76>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAM_WORD)
 80066aa:	68fb      	ldr	r3, [r7, #12]
 80066ac:	2b02      	cmp	r3, #2
 80066ae:	d105      	bne.n	80066bc <HAL_FLASH_Program+0x6c>
    {
      /*Program word (32-bit) at a specified address.*/
      FLASH_Program_Word(Address, (uint32_t) Data);
 80066b0:	683b      	ldr	r3, [r7, #0]
 80066b2:	4619      	mov	r1, r3
 80066b4:	68b8      	ldr	r0, [r7, #8]
 80066b6:	f000 f8cf 	bl	8006858 <FLASH_Program_Word>
 80066ba:	e004      	b.n	80066c6 <HAL_FLASH_Program+0x76>
    }
    else
    {
      /*Program double word (64-bit) at a specified address.*/
      FLASH_Program_DoubleWord(Address, Data);
 80066bc:	e9d7 2300 	ldrd	r2, r3, [r7]
 80066c0:	68b8      	ldr	r0, [r7, #8]
 80066c2:	f000 f897 	bl	80067f4 <FLASH_Program_DoubleWord>
    }
    
    /* Wait for last operation to be completed */
    status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80066c6:	f24c 3050 	movw	r0, #50000	; 0xc350
 80066ca:	f000 f853 	bl	8006774 <FLASH_WaitForLastOperation>
 80066ce:	4603      	mov	r3, r0
 80066d0:	75fb      	strb	r3, [r7, #23]
    
    /* If the program operation is completed, disable the PG Bit */
    FLASH->CR &= (~FLASH_CR_PG);  
 80066d2:	4b08      	ldr	r3, [pc, #32]	; (80066f4 <HAL_FLASH_Program+0xa4>)
 80066d4:	691b      	ldr	r3, [r3, #16]
 80066d6:	4a07      	ldr	r2, [pc, #28]	; (80066f4 <HAL_FLASH_Program+0xa4>)
 80066d8:	f023 0301 	bic.w	r3, r3, #1
 80066dc:	6113      	str	r3, [r2, #16]
  }
  
  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 80066de:	4b04      	ldr	r3, [pc, #16]	; (80066f0 <HAL_FLASH_Program+0xa0>)
 80066e0:	2200      	movs	r2, #0
 80066e2:	761a      	strb	r2, [r3, #24]
  
  return status;
 80066e4:	7dfb      	ldrb	r3, [r7, #23]
}
 80066e6:	4618      	mov	r0, r3
 80066e8:	3718      	adds	r7, #24
 80066ea:	46bd      	mov	sp, r7
 80066ec:	bd80      	pop	{r7, pc}
 80066ee:	bf00      	nop
 80066f0:	20000544 	.word	0x20000544
 80066f4:	40023c00 	.word	0x40023c00

080066f8 <HAL_FLASH_Unlock>:
/**
  * @brief  Unlock the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Unlock(void)
{
 80066f8:	b480      	push	{r7}
 80066fa:	b083      	sub	sp, #12
 80066fc:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef status = HAL_OK;
 80066fe:	2300      	movs	r3, #0
 8006700:	71fb      	strb	r3, [r7, #7]

  if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006702:	4b0b      	ldr	r3, [pc, #44]	; (8006730 <HAL_FLASH_Unlock+0x38>)
 8006704:	691b      	ldr	r3, [r3, #16]
 8006706:	2b00      	cmp	r3, #0
 8006708:	da0b      	bge.n	8006722 <HAL_FLASH_Unlock+0x2a>
  {
    /* Authorize the FLASH Registers access */
    WRITE_REG(FLASH->KEYR, FLASH_KEY1);
 800670a:	4b09      	ldr	r3, [pc, #36]	; (8006730 <HAL_FLASH_Unlock+0x38>)
 800670c:	4a09      	ldr	r2, [pc, #36]	; (8006734 <HAL_FLASH_Unlock+0x3c>)
 800670e:	605a      	str	r2, [r3, #4]
    WRITE_REG(FLASH->KEYR, FLASH_KEY2);
 8006710:	4b07      	ldr	r3, [pc, #28]	; (8006730 <HAL_FLASH_Unlock+0x38>)
 8006712:	4a09      	ldr	r2, [pc, #36]	; (8006738 <HAL_FLASH_Unlock+0x40>)
 8006714:	605a      	str	r2, [r3, #4]

    /* Verify Flash is unlocked */
    if(READ_BIT(FLASH->CR, FLASH_CR_LOCK) != RESET)
 8006716:	4b06      	ldr	r3, [pc, #24]	; (8006730 <HAL_FLASH_Unlock+0x38>)
 8006718:	691b      	ldr	r3, [r3, #16]
 800671a:	2b00      	cmp	r3, #0
 800671c:	da01      	bge.n	8006722 <HAL_FLASH_Unlock+0x2a>
    {
      status = HAL_ERROR;
 800671e:	2301      	movs	r3, #1
 8006720:	71fb      	strb	r3, [r7, #7]
    }
  }

  return status;
 8006722:	79fb      	ldrb	r3, [r7, #7]
}
 8006724:	4618      	mov	r0, r3
 8006726:	370c      	adds	r7, #12
 8006728:	46bd      	mov	sp, r7
 800672a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800672e:	4770      	bx	lr
 8006730:	40023c00 	.word	0x40023c00
 8006734:	45670123 	.word	0x45670123
 8006738:	cdef89ab 	.word	0xcdef89ab

0800673c <HAL_FLASH_Lock>:
/**
  * @brief  Locks the FLASH control register access
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASH_Lock(void)
{
 800673c:	b480      	push	{r7}
 800673e:	af00      	add	r7, sp, #0
  /* Set the LOCK Bit to lock the FLASH Registers access */
  FLASH->CR |= FLASH_CR_LOCK;
 8006740:	4b05      	ldr	r3, [pc, #20]	; (8006758 <HAL_FLASH_Lock+0x1c>)
 8006742:	691b      	ldr	r3, [r3, #16]
 8006744:	4a04      	ldr	r2, [pc, #16]	; (8006758 <HAL_FLASH_Lock+0x1c>)
 8006746:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 800674a:	6113      	str	r3, [r2, #16]
  
  return HAL_OK;  
 800674c:	2300      	movs	r3, #0
}
 800674e:	4618      	mov	r0, r3
 8006750:	46bd      	mov	sp, r7
 8006752:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006756:	4770      	bx	lr
 8006758:	40023c00 	.word	0x40023c00

0800675c <HAL_FLASH_GetError>:
  *            @arg HAL_FLASH_ERROR_PGA: FLASH Programming Alignment error flag
  *            @arg HAL_FLASH_ERROR_WRP: FLASH Write protected error flag
  *            @arg HAL_FLASH_ERROR_OPERATION: FLASH operation Error flag 
  */
uint32_t HAL_FLASH_GetError(void)
{ 
 800675c:	b480      	push	{r7}
 800675e:	af00      	add	r7, sp, #0
   return pFlash.ErrorCode;
 8006760:	4b03      	ldr	r3, [pc, #12]	; (8006770 <HAL_FLASH_GetError+0x14>)
 8006762:	69db      	ldr	r3, [r3, #28]
}  
 8006764:	4618      	mov	r0, r3
 8006766:	46bd      	mov	sp, r7
 8006768:	f85d 7b04 	ldr.w	r7, [sp], #4
 800676c:	4770      	bx	lr
 800676e:	bf00      	nop
 8006770:	20000544 	.word	0x20000544

08006774 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout maximum flash operationtimeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{ 
 8006774:	b580      	push	{r7, lr}
 8006776:	b084      	sub	sp, #16
 8006778:	af00      	add	r7, sp, #0
 800677a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800677c:	2300      	movs	r3, #0
 800677e:	60fb      	str	r3, [r7, #12]
  
  /* Clear Error Code */
  pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 8006780:	4b1a      	ldr	r3, [pc, #104]	; (80067ec <FLASH_WaitForLastOperation+0x78>)
 8006782:	2200      	movs	r2, #0
 8006784:	61da      	str	r2, [r3, #28]
  
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
  /* Get tick */
  tickstart = HAL_GetTick();
 8006786:	f7ff fd75 	bl	8006274 <HAL_GetTick>
 800678a:	60f8      	str	r0, [r7, #12]

  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 800678c:	e010      	b.n	80067b0 <FLASH_WaitForLastOperation+0x3c>
  { 
    if(Timeout != HAL_MAX_DELAY)
 800678e:	687b      	ldr	r3, [r7, #4]
 8006790:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006794:	d00c      	beq.n	80067b0 <FLASH_WaitForLastOperation+0x3c>
    {
      if((Timeout == 0U)||((HAL_GetTick() - tickstart ) > Timeout))
 8006796:	687b      	ldr	r3, [r7, #4]
 8006798:	2b00      	cmp	r3, #0
 800679a:	d007      	beq.n	80067ac <FLASH_WaitForLastOperation+0x38>
 800679c:	f7ff fd6a 	bl	8006274 <HAL_GetTick>
 80067a0:	4602      	mov	r2, r0
 80067a2:	68fb      	ldr	r3, [r7, #12]
 80067a4:	1ad3      	subs	r3, r2, r3
 80067a6:	687a      	ldr	r2, [r7, #4]
 80067a8:	429a      	cmp	r2, r3
 80067aa:	d201      	bcs.n	80067b0 <FLASH_WaitForLastOperation+0x3c>
      {
        return HAL_TIMEOUT;
 80067ac:	2303      	movs	r3, #3
 80067ae:	e019      	b.n	80067e4 <FLASH_WaitForLastOperation+0x70>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY) != RESET) 
 80067b0:	4b0f      	ldr	r3, [pc, #60]	; (80067f0 <FLASH_WaitForLastOperation+0x7c>)
 80067b2:	68db      	ldr	r3, [r3, #12]
 80067b4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80067b8:	2b00      	cmp	r3, #0
 80067ba:	d1e8      	bne.n	800678e <FLASH_WaitForLastOperation+0x1a>
      }
    } 
  }

  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP) != RESET)
 80067bc:	4b0c      	ldr	r3, [pc, #48]	; (80067f0 <FLASH_WaitForLastOperation+0x7c>)
 80067be:	68db      	ldr	r3, [r3, #12]
 80067c0:	f003 0301 	and.w	r3, r3, #1
 80067c4:	2b00      	cmp	r3, #0
 80067c6:	d002      	beq.n	80067ce <FLASH_WaitForLastOperation+0x5a>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 80067c8:	4b09      	ldr	r3, [pc, #36]	; (80067f0 <FLASH_WaitForLastOperation+0x7c>)
 80067ca:	2201      	movs	r2, #1
 80067cc:	60da      	str	r2, [r3, #12]
  }
#if defined(FLASH_SR_RDERR)  
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR | FLASH_FLAG_RDERR)) != RESET)
#else
  if(__HAL_FLASH_GET_FLAG((FLASH_FLAG_OPERR | FLASH_FLAG_WRPERR | FLASH_FLAG_PGAERR | \
 80067ce:	4b08      	ldr	r3, [pc, #32]	; (80067f0 <FLASH_WaitForLastOperation+0x7c>)
 80067d0:	68db      	ldr	r3, [r3, #12]
 80067d2:	f003 03f2 	and.w	r3, r3, #242	; 0xf2
 80067d6:	2b00      	cmp	r3, #0
 80067d8:	d003      	beq.n	80067e2 <FLASH_WaitForLastOperation+0x6e>
                           FLASH_FLAG_PGPERR | FLASH_FLAG_PGSERR)) != RESET)
#endif /* FLASH_SR_RDERR */
  {
    /*Save the error code*/
    FLASH_SetErrorCode();
 80067da:	f000 f8a5 	bl	8006928 <FLASH_SetErrorCode>
    return HAL_ERROR;
 80067de:	2301      	movs	r3, #1
 80067e0:	e000      	b.n	80067e4 <FLASH_WaitForLastOperation+0x70>
  }

  /* If there is no error flag set */
  return HAL_OK;
 80067e2:	2300      	movs	r3, #0
  
}  
 80067e4:	4618      	mov	r0, r3
 80067e6:	3710      	adds	r7, #16
 80067e8:	46bd      	mov	sp, r7
 80067ea:	bd80      	pop	{r7, pc}
 80067ec:	20000544 	.word	0x20000544
 80067f0:	40023c00 	.word	0x40023c00

080067f4 <FLASH_Program_DoubleWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_DoubleWord(uint32_t Address, uint64_t Data)
{
 80067f4:	b480      	push	{r7}
 80067f6:	b085      	sub	sp, #20
 80067f8:	af00      	add	r7, sp, #0
 80067fa:	60f8      	str	r0, [r7, #12]
 80067fc:	e9c7 2300 	strd	r2, r3, [r7]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006800:	4b14      	ldr	r3, [pc, #80]	; (8006854 <FLASH_Program_DoubleWord+0x60>)
 8006802:	691b      	ldr	r3, [r3, #16]
 8006804:	4a13      	ldr	r2, [pc, #76]	; (8006854 <FLASH_Program_DoubleWord+0x60>)
 8006806:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800680a:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_DOUBLE_WORD;
 800680c:	4b11      	ldr	r3, [pc, #68]	; (8006854 <FLASH_Program_DoubleWord+0x60>)
 800680e:	691b      	ldr	r3, [r3, #16]
 8006810:	4a10      	ldr	r2, [pc, #64]	; (8006854 <FLASH_Program_DoubleWord+0x60>)
 8006812:	f443 7340 	orr.w	r3, r3, #768	; 0x300
 8006816:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006818:	4b0e      	ldr	r3, [pc, #56]	; (8006854 <FLASH_Program_DoubleWord+0x60>)
 800681a:	691b      	ldr	r3, [r3, #16]
 800681c:	4a0d      	ldr	r2, [pc, #52]	; (8006854 <FLASH_Program_DoubleWord+0x60>)
 800681e:	f043 0301 	orr.w	r3, r3, #1
 8006822:	6113      	str	r3, [r2, #16]

  /* Program first word */
  *(__IO uint32_t*)Address = (uint32_t)Data;
 8006824:	68fb      	ldr	r3, [r7, #12]
 8006826:	683a      	ldr	r2, [r7, #0]
 8006828:	601a      	str	r2, [r3, #0]
  __ASM volatile ("isb 0xF":::"memory");
 800682a:	f3bf 8f6f 	isb	sy
}
 800682e:	bf00      	nop
  /* Barrier to ensure programming is performed in 2 steps, in right order
    (independently of compiler optimization behavior) */
  __ISB();

  /* Program second word */
  *(__IO uint32_t*)(Address+4) = (uint32_t)(Data >> 32);
 8006830:	e9d7 0100 	ldrd	r0, r1, [r7]
 8006834:	f04f 0200 	mov.w	r2, #0
 8006838:	f04f 0300 	mov.w	r3, #0
 800683c:	000a      	movs	r2, r1
 800683e:	2300      	movs	r3, #0
 8006840:	68f9      	ldr	r1, [r7, #12]
 8006842:	3104      	adds	r1, #4
 8006844:	4613      	mov	r3, r2
 8006846:	600b      	str	r3, [r1, #0]
}
 8006848:	bf00      	nop
 800684a:	3714      	adds	r7, #20
 800684c:	46bd      	mov	sp, r7
 800684e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006852:	4770      	bx	lr
 8006854:	40023c00 	.word	0x40023c00

08006858 <FLASH_Program_Word>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Word(uint32_t Address, uint32_t Data)
{
 8006858:	b480      	push	{r7}
 800685a:	b083      	sub	sp, #12
 800685c:	af00      	add	r7, sp, #0
 800685e:	6078      	str	r0, [r7, #4]
 8006860:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006862:	4b0d      	ldr	r3, [pc, #52]	; (8006898 <FLASH_Program_Word+0x40>)
 8006864:	691b      	ldr	r3, [r3, #16]
 8006866:	4a0c      	ldr	r2, [pc, #48]	; (8006898 <FLASH_Program_Word+0x40>)
 8006868:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800686c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_WORD;
 800686e:	4b0a      	ldr	r3, [pc, #40]	; (8006898 <FLASH_Program_Word+0x40>)
 8006870:	691b      	ldr	r3, [r3, #16]
 8006872:	4a09      	ldr	r2, [pc, #36]	; (8006898 <FLASH_Program_Word+0x40>)
 8006874:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006878:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 800687a:	4b07      	ldr	r3, [pc, #28]	; (8006898 <FLASH_Program_Word+0x40>)
 800687c:	691b      	ldr	r3, [r3, #16]
 800687e:	4a06      	ldr	r2, [pc, #24]	; (8006898 <FLASH_Program_Word+0x40>)
 8006880:	f043 0301 	orr.w	r3, r3, #1
 8006884:	6113      	str	r3, [r2, #16]

  *(__IO uint32_t*)Address = Data;
 8006886:	687b      	ldr	r3, [r7, #4]
 8006888:	683a      	ldr	r2, [r7, #0]
 800688a:	601a      	str	r2, [r3, #0]
}
 800688c:	bf00      	nop
 800688e:	370c      	adds	r7, #12
 8006890:	46bd      	mov	sp, r7
 8006892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006896:	4770      	bx	lr
 8006898:	40023c00 	.word	0x40023c00

0800689c <FLASH_Program_HalfWord>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_HalfWord(uint32_t Address, uint16_t Data)
{
 800689c:	b480      	push	{r7}
 800689e:	b083      	sub	sp, #12
 80068a0:	af00      	add	r7, sp, #0
 80068a2:	6078      	str	r0, [r7, #4]
 80068a4:	460b      	mov	r3, r1
 80068a6:	807b      	strh	r3, [r7, #2]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068a8:	4b0d      	ldr	r3, [pc, #52]	; (80068e0 <FLASH_Program_HalfWord+0x44>)
 80068aa:	691b      	ldr	r3, [r3, #16]
 80068ac:	4a0c      	ldr	r2, [pc, #48]	; (80068e0 <FLASH_Program_HalfWord+0x44>)
 80068ae:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068b2:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_HALF_WORD;
 80068b4:	4b0a      	ldr	r3, [pc, #40]	; (80068e0 <FLASH_Program_HalfWord+0x44>)
 80068b6:	691b      	ldr	r3, [r3, #16]
 80068b8:	4a09      	ldr	r2, [pc, #36]	; (80068e0 <FLASH_Program_HalfWord+0x44>)
 80068ba:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80068be:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 80068c0:	4b07      	ldr	r3, [pc, #28]	; (80068e0 <FLASH_Program_HalfWord+0x44>)
 80068c2:	691b      	ldr	r3, [r3, #16]
 80068c4:	4a06      	ldr	r2, [pc, #24]	; (80068e0 <FLASH_Program_HalfWord+0x44>)
 80068c6:	f043 0301 	orr.w	r3, r3, #1
 80068ca:	6113      	str	r3, [r2, #16]

  *(__IO uint16_t*)Address = Data;
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	887a      	ldrh	r2, [r7, #2]
 80068d0:	801a      	strh	r2, [r3, #0]
}
 80068d2:	bf00      	nop
 80068d4:	370c      	adds	r7, #12
 80068d6:	46bd      	mov	sp, r7
 80068d8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068dc:	4770      	bx	lr
 80068de:	bf00      	nop
 80068e0:	40023c00 	.word	0x40023c00

080068e4 <FLASH_Program_Byte>:
  * @param  Address specifies the address to be programmed.
  * @param  Data specifies the data to be programmed.
  * @retval None
  */
static void FLASH_Program_Byte(uint32_t Address, uint8_t Data)
{
 80068e4:	b480      	push	{r7}
 80068e6:	b083      	sub	sp, #12
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	6078      	str	r0, [r7, #4]
 80068ec:	460b      	mov	r3, r1
 80068ee:	70fb      	strb	r3, [r7, #3]
  /* Check the parameters */
  assert_param(IS_FLASH_ADDRESS(Address));
  
  /* If the previous operation is completed, proceed to program the new data */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 80068f0:	4b0c      	ldr	r3, [pc, #48]	; (8006924 <FLASH_Program_Byte+0x40>)
 80068f2:	691b      	ldr	r3, [r3, #16]
 80068f4:	4a0b      	ldr	r2, [pc, #44]	; (8006924 <FLASH_Program_Byte+0x40>)
 80068f6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068fa:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_PSIZE_BYTE;
 80068fc:	4b09      	ldr	r3, [pc, #36]	; (8006924 <FLASH_Program_Byte+0x40>)
 80068fe:	4a09      	ldr	r2, [pc, #36]	; (8006924 <FLASH_Program_Byte+0x40>)
 8006900:	691b      	ldr	r3, [r3, #16]
 8006902:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_PG;
 8006904:	4b07      	ldr	r3, [pc, #28]	; (8006924 <FLASH_Program_Byte+0x40>)
 8006906:	691b      	ldr	r3, [r3, #16]
 8006908:	4a06      	ldr	r2, [pc, #24]	; (8006924 <FLASH_Program_Byte+0x40>)
 800690a:	f043 0301 	orr.w	r3, r3, #1
 800690e:	6113      	str	r3, [r2, #16]

  *(__IO uint8_t*)Address = Data;
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	78fa      	ldrb	r2, [r7, #3]
 8006914:	701a      	strb	r2, [r3, #0]
}
 8006916:	bf00      	nop
 8006918:	370c      	adds	r7, #12
 800691a:	46bd      	mov	sp, r7
 800691c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006920:	4770      	bx	lr
 8006922:	bf00      	nop
 8006924:	40023c00 	.word	0x40023c00

08006928 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{ 
 8006928:	b480      	push	{r7}
 800692a:	af00      	add	r7, sp, #0
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR) != RESET)
 800692c:	4b27      	ldr	r3, [pc, #156]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 800692e:	68db      	ldr	r3, [r3, #12]
 8006930:	f003 0310 	and.w	r3, r3, #16
 8006934:	2b00      	cmp	r3, #0
 8006936:	d008      	beq.n	800694a <FLASH_SetErrorCode+0x22>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 8006938:	4b25      	ldr	r3, [pc, #148]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 800693a:	69db      	ldr	r3, [r3, #28]
 800693c:	f043 0310 	orr.w	r3, r3, #16
 8006940:	4a23      	ldr	r2, [pc, #140]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 8006942:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH write protection error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_WRPERR);
 8006944:	4b21      	ldr	r3, [pc, #132]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 8006946:	2210      	movs	r2, #16
 8006948:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR) != RESET)
 800694a:	4b20      	ldr	r3, [pc, #128]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 800694c:	68db      	ldr	r3, [r3, #12]
 800694e:	f003 0320 	and.w	r3, r3, #32
 8006952:	2b00      	cmp	r3, #0
 8006954:	d008      	beq.n	8006968 <FLASH_SetErrorCode+0x40>
  {
   pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 8006956:	4b1e      	ldr	r3, [pc, #120]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 8006958:	69db      	ldr	r3, [r3, #28]
 800695a:	f043 0308 	orr.w	r3, r3, #8
 800695e:	4a1c      	ldr	r2, [pc, #112]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 8006960:	61d3      	str	r3, [r2, #28]
   
   /* Clear FLASH Programming alignment error pending bit */
   __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGAERR);
 8006962:	4b1a      	ldr	r3, [pc, #104]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 8006964:	2220      	movs	r2, #32
 8006966:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGPERR) != RESET)
 8006968:	4b18      	ldr	r3, [pc, #96]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 800696a:	68db      	ldr	r3, [r3, #12]
 800696c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006970:	2b00      	cmp	r3, #0
 8006972:	d008      	beq.n	8006986 <FLASH_SetErrorCode+0x5e>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGP;
 8006974:	4b16      	ldr	r3, [pc, #88]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 8006976:	69db      	ldr	r3, [r3, #28]
 8006978:	f043 0304 	orr.w	r3, r3, #4
 800697c:	4a14      	ldr	r2, [pc, #80]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 800697e:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming parallelism error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGPERR);
 8006980:	4b12      	ldr	r3, [pc, #72]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 8006982:	2240      	movs	r2, #64	; 0x40
 8006984:	60da      	str	r2, [r3, #12]
  }
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGSERR) != RESET)
 8006986:	4b11      	ldr	r3, [pc, #68]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 8006988:	68db      	ldr	r3, [r3, #12]
 800698a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800698e:	2b00      	cmp	r3, #0
 8006990:	d008      	beq.n	80069a4 <FLASH_SetErrorCode+0x7c>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGS;
 8006992:	4b0f      	ldr	r3, [pc, #60]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 8006994:	69db      	ldr	r3, [r3, #28]
 8006996:	f043 0302 	orr.w	r3, r3, #2
 800699a:	4a0d      	ldr	r2, [pc, #52]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 800699c:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Programming sequence error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_PGSERR);
 800699e:	4b0b      	ldr	r3, [pc, #44]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 80069a0:	2280      	movs	r2, #128	; 0x80
 80069a2:	60da      	str	r2, [r3, #12]
    
    /* Clear FLASH Proprietary readout protection error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_RDERR);
  }
#endif /* FLASH_SR_RDERR */  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPERR) != RESET)
 80069a4:	4b09      	ldr	r3, [pc, #36]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 80069a6:	68db      	ldr	r3, [r3, #12]
 80069a8:	f003 0302 	and.w	r3, r3, #2
 80069ac:	2b00      	cmp	r3, #0
 80069ae:	d008      	beq.n	80069c2 <FLASH_SetErrorCode+0x9a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPERATION;
 80069b0:	4b07      	ldr	r3, [pc, #28]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 80069b2:	69db      	ldr	r3, [r3, #28]
 80069b4:	f043 0320 	orr.w	r3, r3, #32
 80069b8:	4a05      	ldr	r2, [pc, #20]	; (80069d0 <FLASH_SetErrorCode+0xa8>)
 80069ba:	61d3      	str	r3, [r2, #28]
    
    /* Clear FLASH Operation error pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_OPERR);
 80069bc:	4b03      	ldr	r3, [pc, #12]	; (80069cc <FLASH_SetErrorCode+0xa4>)
 80069be:	2202      	movs	r2, #2
 80069c0:	60da      	str	r2, [r3, #12]
  }
}
 80069c2:	bf00      	nop
 80069c4:	46bd      	mov	sp, r7
 80069c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069ca:	4770      	bx	lr
 80069cc:	40023c00 	.word	0x40023c00
 80069d0:	20000544 	.word	0x20000544

080069d4 <HAL_FLASHEx_Erase>:
  *         (0xFFFFFFFFU means that all the sectors have been correctly erased)
  *
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_Erase(FLASH_EraseInitTypeDef *pEraseInit, uint32_t *SectorError)
{
 80069d4:	b580      	push	{r7, lr}
 80069d6:	b084      	sub	sp, #16
 80069d8:	af00      	add	r7, sp, #0
 80069da:	6078      	str	r0, [r7, #4]
 80069dc:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_ERROR;
 80069de:	2301      	movs	r3, #1
 80069e0:	73fb      	strb	r3, [r7, #15]
  uint32_t index = 0U;
 80069e2:	2300      	movs	r3, #0
 80069e4:	60bb      	str	r3, [r7, #8]

  /* Process Locked */
  __HAL_LOCK(&pFlash);
 80069e6:	4b31      	ldr	r3, [pc, #196]	; (8006aac <HAL_FLASHEx_Erase+0xd8>)
 80069e8:	7e1b      	ldrb	r3, [r3, #24]
 80069ea:	2b01      	cmp	r3, #1
 80069ec:	d101      	bne.n	80069f2 <HAL_FLASHEx_Erase+0x1e>
 80069ee:	2302      	movs	r3, #2
 80069f0:	e058      	b.n	8006aa4 <HAL_FLASHEx_Erase+0xd0>
 80069f2:	4b2e      	ldr	r3, [pc, #184]	; (8006aac <HAL_FLASHEx_Erase+0xd8>)
 80069f4:	2201      	movs	r2, #1
 80069f6:	761a      	strb	r2, [r3, #24]

  /* Check the parameters */
  assert_param(IS_FLASH_TYPEERASE(pEraseInit->TypeErase));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 80069f8:	f24c 3050 	movw	r0, #50000	; 0xc350
 80069fc:	f7ff feba 	bl	8006774 <FLASH_WaitForLastOperation>
 8006a00:	4603      	mov	r3, r0
 8006a02:	73fb      	strb	r3, [r7, #15]

  if (status == HAL_OK)
 8006a04:	7bfb      	ldrb	r3, [r7, #15]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	d148      	bne.n	8006a9c <HAL_FLASHEx_Erase+0xc8>
  {
    /*Initialization of SectorError variable*/
    *SectorError = 0xFFFFFFFFU;
 8006a0a:	683b      	ldr	r3, [r7, #0]
 8006a0c:	f04f 32ff 	mov.w	r2, #4294967295
 8006a10:	601a      	str	r2, [r3, #0]

    if (pEraseInit->TypeErase == FLASH_TYPEERASE_MASSERASE)
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	2b01      	cmp	r3, #1
 8006a18:	d115      	bne.n	8006a46 <HAL_FLASHEx_Erase+0x72>
    {
      /*Mass erase to be done*/
      FLASH_MassErase((uint8_t) pEraseInit->VoltageRange, pEraseInit->Banks);
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	b2da      	uxtb	r2, r3
 8006a20:	687b      	ldr	r3, [r7, #4]
 8006a22:	685b      	ldr	r3, [r3, #4]
 8006a24:	4619      	mov	r1, r3
 8006a26:	4610      	mov	r0, r2
 8006a28:	f000 f844 	bl	8006ab4 <FLASH_MassErase>

      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a2c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a30:	f7ff fea0 	bl	8006774 <FLASH_WaitForLastOperation>
 8006a34:	4603      	mov	r3, r0
 8006a36:	73fb      	strb	r3, [r7, #15]

      /* if the erase operation is completed, disable the MER Bit */
      FLASH->CR &= (~FLASH_MER_BIT);
 8006a38:	4b1d      	ldr	r3, [pc, #116]	; (8006ab0 <HAL_FLASHEx_Erase+0xdc>)
 8006a3a:	691b      	ldr	r3, [r3, #16]
 8006a3c:	4a1c      	ldr	r2, [pc, #112]	; (8006ab0 <HAL_FLASHEx_Erase+0xdc>)
 8006a3e:	f023 0304 	bic.w	r3, r3, #4
 8006a42:	6113      	str	r3, [r2, #16]
 8006a44:	e028      	b.n	8006a98 <HAL_FLASHEx_Erase+0xc4>
    {
      /* Check the parameters */
      assert_param(IS_FLASH_NBSECTORS(pEraseInit->NbSectors + pEraseInit->Sector));

      /* Erase by sector by sector to be done*/
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006a46:	687b      	ldr	r3, [r7, #4]
 8006a48:	689b      	ldr	r3, [r3, #8]
 8006a4a:	60bb      	str	r3, [r7, #8]
 8006a4c:	e01c      	b.n	8006a88 <HAL_FLASHEx_Erase+0xb4>
      {
        FLASH_Erase_Sector(index, (uint8_t) pEraseInit->VoltageRange);
 8006a4e:	687b      	ldr	r3, [r7, #4]
 8006a50:	691b      	ldr	r3, [r3, #16]
 8006a52:	b2db      	uxtb	r3, r3
 8006a54:	4619      	mov	r1, r3
 8006a56:	68b8      	ldr	r0, [r7, #8]
 8006a58:	f000 f850 	bl	8006afc <FLASH_Erase_Sector>

        /* Wait for last operation to be completed */
        status = FLASH_WaitForLastOperation((uint32_t)FLASH_TIMEOUT_VALUE);
 8006a5c:	f24c 3050 	movw	r0, #50000	; 0xc350
 8006a60:	f7ff fe88 	bl	8006774 <FLASH_WaitForLastOperation>
 8006a64:	4603      	mov	r3, r0
 8006a66:	73fb      	strb	r3, [r7, #15]

        /* If the erase operation is completed, disable the SER and SNB Bits */
        CLEAR_BIT(FLASH->CR, (FLASH_CR_SER | FLASH_CR_SNB));
 8006a68:	4b11      	ldr	r3, [pc, #68]	; (8006ab0 <HAL_FLASHEx_Erase+0xdc>)
 8006a6a:	691b      	ldr	r3, [r3, #16]
 8006a6c:	4a10      	ldr	r2, [pc, #64]	; (8006ab0 <HAL_FLASHEx_Erase+0xdc>)
 8006a6e:	f023 03fa 	bic.w	r3, r3, #250	; 0xfa
 8006a72:	6113      	str	r3, [r2, #16]

        if (status != HAL_OK)
 8006a74:	7bfb      	ldrb	r3, [r7, #15]
 8006a76:	2b00      	cmp	r3, #0
 8006a78:	d003      	beq.n	8006a82 <HAL_FLASHEx_Erase+0xae>
        {
          /* In case of error, stop erase procedure and return the faulty sector*/
          *SectorError = index;
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	68ba      	ldr	r2, [r7, #8]
 8006a7e:	601a      	str	r2, [r3, #0]
          break;
 8006a80:	e00a      	b.n	8006a98 <HAL_FLASHEx_Erase+0xc4>
      for (index = pEraseInit->Sector; index < (pEraseInit->NbSectors + pEraseInit->Sector); index++)
 8006a82:	68bb      	ldr	r3, [r7, #8]
 8006a84:	3301      	adds	r3, #1
 8006a86:	60bb      	str	r3, [r7, #8]
 8006a88:	687b      	ldr	r3, [r7, #4]
 8006a8a:	68da      	ldr	r2, [r3, #12]
 8006a8c:	687b      	ldr	r3, [r7, #4]
 8006a8e:	689b      	ldr	r3, [r3, #8]
 8006a90:	4413      	add	r3, r2
 8006a92:	68ba      	ldr	r2, [r7, #8]
 8006a94:	429a      	cmp	r2, r3
 8006a96:	d3da      	bcc.n	8006a4e <HAL_FLASHEx_Erase+0x7a>
        }
      }
    }
    /* Flush the caches to be sure of the data consistency */
    FLASH_FlushCaches();
 8006a98:	f000 f878 	bl	8006b8c <FLASH_FlushCaches>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 8006a9c:	4b03      	ldr	r3, [pc, #12]	; (8006aac <HAL_FLASHEx_Erase+0xd8>)
 8006a9e:	2200      	movs	r2, #0
 8006aa0:	761a      	strb	r2, [r3, #24]

  return status;
 8006aa2:	7bfb      	ldrb	r3, [r7, #15]
}
 8006aa4:	4618      	mov	r0, r3
 8006aa6:	3710      	adds	r7, #16
 8006aa8:	46bd      	mov	sp, r7
 8006aaa:	bd80      	pop	{r7, pc}
 8006aac:	20000544 	.word	0x20000544
 8006ab0:	40023c00 	.word	0x40023c00

08006ab4 <FLASH_MassErase>:
  *            @arg FLASH_BANK_1: Bank1 to be erased
  *
  * @retval None
  */
static void FLASH_MassErase(uint8_t VoltageRange, uint32_t Banks)
{
 8006ab4:	b480      	push	{r7}
 8006ab6:	b083      	sub	sp, #12
 8006ab8:	af00      	add	r7, sp, #0
 8006aba:	4603      	mov	r3, r0
 8006abc:	6039      	str	r1, [r7, #0]
 8006abe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_VOLTAGERANGE(VoltageRange));
  assert_param(IS_FLASH_BANK(Banks));

  /* If the previous operation is completed, proceed to erase all sectors */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006ac0:	4b0d      	ldr	r3, [pc, #52]	; (8006af8 <FLASH_MassErase+0x44>)
 8006ac2:	691b      	ldr	r3, [r3, #16]
 8006ac4:	4a0c      	ldr	r2, [pc, #48]	; (8006af8 <FLASH_MassErase+0x44>)
 8006ac6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006aca:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_MER;
 8006acc:	4b0a      	ldr	r3, [pc, #40]	; (8006af8 <FLASH_MassErase+0x44>)
 8006ace:	691b      	ldr	r3, [r3, #16]
 8006ad0:	4a09      	ldr	r2, [pc, #36]	; (8006af8 <FLASH_MassErase+0x44>)
 8006ad2:	f043 0304 	orr.w	r3, r3, #4
 8006ad6:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT | ((uint32_t)VoltageRange << 8U);
 8006ad8:	4b07      	ldr	r3, [pc, #28]	; (8006af8 <FLASH_MassErase+0x44>)
 8006ada:	691a      	ldr	r2, [r3, #16]
 8006adc:	79fb      	ldrb	r3, [r7, #7]
 8006ade:	021b      	lsls	r3, r3, #8
 8006ae0:	4313      	orrs	r3, r2
 8006ae2:	4a05      	ldr	r2, [pc, #20]	; (8006af8 <FLASH_MassErase+0x44>)
 8006ae4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006ae8:	6113      	str	r3, [r2, #16]
}
 8006aea:	bf00      	nop
 8006aec:	370c      	adds	r7, #12
 8006aee:	46bd      	mov	sp, r7
 8006af0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006af4:	4770      	bx	lr
 8006af6:	bf00      	nop
 8006af8:	40023c00 	.word	0x40023c00

08006afc <FLASH_Erase_Sector>:
  *                                  the operation will be done by double word (64-bit)
  *
  * @retval None
  */
void FLASH_Erase_Sector(uint32_t Sector, uint8_t VoltageRange)
{
 8006afc:	b480      	push	{r7}
 8006afe:	b085      	sub	sp, #20
 8006b00:	af00      	add	r7, sp, #0
 8006b02:	6078      	str	r0, [r7, #4]
 8006b04:	460b      	mov	r3, r1
 8006b06:	70fb      	strb	r3, [r7, #3]
  uint32_t tmp_psize = 0U;
 8006b08:	2300      	movs	r3, #0
 8006b0a:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_FLASH_SECTOR(Sector));
  assert_param(IS_VOLTAGERANGE(VoltageRange));

  if (VoltageRange == FLASH_VOLTAGE_RANGE_1)
 8006b0c:	78fb      	ldrb	r3, [r7, #3]
 8006b0e:	2b00      	cmp	r3, #0
 8006b10:	d102      	bne.n	8006b18 <FLASH_Erase_Sector+0x1c>
  {
    tmp_psize = FLASH_PSIZE_BYTE;
 8006b12:	2300      	movs	r3, #0
 8006b14:	60fb      	str	r3, [r7, #12]
 8006b16:	e010      	b.n	8006b3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_2)
 8006b18:	78fb      	ldrb	r3, [r7, #3]
 8006b1a:	2b01      	cmp	r3, #1
 8006b1c:	d103      	bne.n	8006b26 <FLASH_Erase_Sector+0x2a>
  {
    tmp_psize = FLASH_PSIZE_HALF_WORD;
 8006b1e:	f44f 7380 	mov.w	r3, #256	; 0x100
 8006b22:	60fb      	str	r3, [r7, #12]
 8006b24:	e009      	b.n	8006b3a <FLASH_Erase_Sector+0x3e>
  }
  else if (VoltageRange == FLASH_VOLTAGE_RANGE_3)
 8006b26:	78fb      	ldrb	r3, [r7, #3]
 8006b28:	2b02      	cmp	r3, #2
 8006b2a:	d103      	bne.n	8006b34 <FLASH_Erase_Sector+0x38>
  {
    tmp_psize = FLASH_PSIZE_WORD;
 8006b2c:	f44f 7300 	mov.w	r3, #512	; 0x200
 8006b30:	60fb      	str	r3, [r7, #12]
 8006b32:	e002      	b.n	8006b3a <FLASH_Erase_Sector+0x3e>
  }
  else
  {
    tmp_psize = FLASH_PSIZE_DOUBLE_WORD;
 8006b34:	f44f 7340 	mov.w	r3, #768	; 0x300
 8006b38:	60fb      	str	r3, [r7, #12]
  }

  /* If the previous operation is completed, proceed to erase the sector */
  CLEAR_BIT(FLASH->CR, FLASH_CR_PSIZE);
 8006b3a:	4b13      	ldr	r3, [pc, #76]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b3c:	691b      	ldr	r3, [r3, #16]
 8006b3e:	4a12      	ldr	r2, [pc, #72]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b40:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006b44:	6113      	str	r3, [r2, #16]
  FLASH->CR |= tmp_psize;
 8006b46:	4b10      	ldr	r3, [pc, #64]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b48:	691a      	ldr	r2, [r3, #16]
 8006b4a:	490f      	ldr	r1, [pc, #60]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b4c:	68fb      	ldr	r3, [r7, #12]
 8006b4e:	4313      	orrs	r3, r2
 8006b50:	610b      	str	r3, [r1, #16]
  CLEAR_BIT(FLASH->CR, FLASH_CR_SNB);
 8006b52:	4b0d      	ldr	r3, [pc, #52]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b54:	691b      	ldr	r3, [r3, #16]
 8006b56:	4a0c      	ldr	r2, [pc, #48]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b58:	f023 03f8 	bic.w	r3, r3, #248	; 0xf8
 8006b5c:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_SER | (Sector << FLASH_CR_SNB_Pos);
 8006b5e:	4b0a      	ldr	r3, [pc, #40]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b60:	691a      	ldr	r2, [r3, #16]
 8006b62:	687b      	ldr	r3, [r7, #4]
 8006b64:	00db      	lsls	r3, r3, #3
 8006b66:	4313      	orrs	r3, r2
 8006b68:	4a07      	ldr	r2, [pc, #28]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b6a:	f043 0302 	orr.w	r3, r3, #2
 8006b6e:	6113      	str	r3, [r2, #16]
  FLASH->CR |= FLASH_CR_STRT;
 8006b70:	4b05      	ldr	r3, [pc, #20]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b72:	691b      	ldr	r3, [r3, #16]
 8006b74:	4a04      	ldr	r2, [pc, #16]	; (8006b88 <FLASH_Erase_Sector+0x8c>)
 8006b76:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006b7a:	6113      	str	r3, [r2, #16]
}
 8006b7c:	bf00      	nop
 8006b7e:	3714      	adds	r7, #20
 8006b80:	46bd      	mov	sp, r7
 8006b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b86:	4770      	bx	lr
 8006b88:	40023c00 	.word	0x40023c00

08006b8c <FLASH_FlushCaches>:
/**
  * @brief  Flush the instruction and data caches
  * @retval None
  */
void FLASH_FlushCaches(void)
{
 8006b8c:	b480      	push	{r7}
 8006b8e:	af00      	add	r7, sp, #0
  /* Flush instruction cache  */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_ICEN) != RESET)
 8006b90:	4b20      	ldr	r3, [pc, #128]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006b92:	681b      	ldr	r3, [r3, #0]
 8006b94:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006b98:	2b00      	cmp	r3, #0
 8006b9a:	d017      	beq.n	8006bcc <FLASH_FlushCaches+0x40>
  {
    /* Disable instruction cache  */
    __HAL_FLASH_INSTRUCTION_CACHE_DISABLE();
 8006b9c:	4b1d      	ldr	r3, [pc, #116]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006b9e:	681b      	ldr	r3, [r3, #0]
 8006ba0:	4a1c      	ldr	r2, [pc, #112]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006ba2:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006ba6:	6013      	str	r3, [r2, #0]
    /* Reset instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_RESET();
 8006ba8:	4b1a      	ldr	r3, [pc, #104]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006baa:	681b      	ldr	r3, [r3, #0]
 8006bac:	4a19      	ldr	r2, [pc, #100]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bae:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 8006bb2:	6013      	str	r3, [r2, #0]
 8006bb4:	4b17      	ldr	r3, [pc, #92]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bb6:	681b      	ldr	r3, [r3, #0]
 8006bb8:	4a16      	ldr	r2, [pc, #88]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bba:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006bbe:	6013      	str	r3, [r2, #0]
    /* Enable instruction cache */
    __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8006bc0:	4b14      	ldr	r3, [pc, #80]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	4a13      	ldr	r2, [pc, #76]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bc6:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8006bca:	6013      	str	r3, [r2, #0]
  }

  /* Flush data cache */
  if (READ_BIT(FLASH->ACR, FLASH_ACR_DCEN) != RESET)
 8006bcc:	4b11      	ldr	r3, [pc, #68]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bce:	681b      	ldr	r3, [r3, #0]
 8006bd0:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d017      	beq.n	8006c08 <FLASH_FlushCaches+0x7c>
  {
    /* Disable data cache  */
    __HAL_FLASH_DATA_CACHE_DISABLE();
 8006bd8:	4b0e      	ldr	r3, [pc, #56]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bda:	681b      	ldr	r3, [r3, #0]
 8006bdc:	4a0d      	ldr	r2, [pc, #52]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bde:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006be2:	6013      	str	r3, [r2, #0]
    /* Reset data cache */
    __HAL_FLASH_DATA_CACHE_RESET();
 8006be4:	4b0b      	ldr	r3, [pc, #44]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	4a0a      	ldr	r2, [pc, #40]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bea:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8006bee:	6013      	str	r3, [r2, #0]
 8006bf0:	4b08      	ldr	r3, [pc, #32]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bf2:	681b      	ldr	r3, [r3, #0]
 8006bf4:	4a07      	ldr	r2, [pc, #28]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bf6:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006bfa:	6013      	str	r3, [r2, #0]
    /* Enable data cache */
    __HAL_FLASH_DATA_CACHE_ENABLE();
 8006bfc:	4b05      	ldr	r3, [pc, #20]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006bfe:	681b      	ldr	r3, [r3, #0]
 8006c00:	4a04      	ldr	r2, [pc, #16]	; (8006c14 <FLASH_FlushCaches+0x88>)
 8006c02:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8006c06:	6013      	str	r3, [r2, #0]
  }
}
 8006c08:	bf00      	nop
 8006c0a:	46bd      	mov	sp, r7
 8006c0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006c10:	4770      	bx	lr
 8006c12:	bf00      	nop
 8006c14:	40023c00 	.word	0x40023c00

08006c18 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8006c18:	b480      	push	{r7}
 8006c1a:	b089      	sub	sp, #36	; 0x24
 8006c1c:	af00      	add	r7, sp, #0
 8006c1e:	6078      	str	r0, [r7, #4]
 8006c20:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8006c22:	2300      	movs	r3, #0
 8006c24:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8006c26:	2300      	movs	r3, #0
 8006c28:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8006c2a:	2300      	movs	r3, #0
 8006c2c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006c2e:	2300      	movs	r3, #0
 8006c30:	61fb      	str	r3, [r7, #28]
 8006c32:	e16b      	b.n	8006f0c <HAL_GPIO_Init+0x2f4>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8006c34:	2201      	movs	r2, #1
 8006c36:	69fb      	ldr	r3, [r7, #28]
 8006c38:	fa02 f303 	lsl.w	r3, r2, r3
 8006c3c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8006c3e:	683b      	ldr	r3, [r7, #0]
 8006c40:	681b      	ldr	r3, [r3, #0]
 8006c42:	697a      	ldr	r2, [r7, #20]
 8006c44:	4013      	ands	r3, r2
 8006c46:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8006c48:	693a      	ldr	r2, [r7, #16]
 8006c4a:	697b      	ldr	r3, [r7, #20]
 8006c4c:	429a      	cmp	r2, r3
 8006c4e:	f040 815a 	bne.w	8006f06 <HAL_GPIO_Init+0x2ee>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c52:	683b      	ldr	r3, [r7, #0]
 8006c54:	685b      	ldr	r3, [r3, #4]
 8006c56:	f003 0303 	and.w	r3, r3, #3
 8006c5a:	2b01      	cmp	r3, #1
 8006c5c:	d005      	beq.n	8006c6a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006c5e:	683b      	ldr	r3, [r7, #0]
 8006c60:	685b      	ldr	r3, [r3, #4]
 8006c62:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8006c66:	2b02      	cmp	r3, #2
 8006c68:	d130      	bne.n	8006ccc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8006c6a:	687b      	ldr	r3, [r7, #4]
 8006c6c:	689b      	ldr	r3, [r3, #8]
 8006c6e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8006c70:	69fb      	ldr	r3, [r7, #28]
 8006c72:	005b      	lsls	r3, r3, #1
 8006c74:	2203      	movs	r2, #3
 8006c76:	fa02 f303 	lsl.w	r3, r2, r3
 8006c7a:	43db      	mvns	r3, r3
 8006c7c:	69ba      	ldr	r2, [r7, #24]
 8006c7e:	4013      	ands	r3, r2
 8006c80:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8006c82:	683b      	ldr	r3, [r7, #0]
 8006c84:	68da      	ldr	r2, [r3, #12]
 8006c86:	69fb      	ldr	r3, [r7, #28]
 8006c88:	005b      	lsls	r3, r3, #1
 8006c8a:	fa02 f303 	lsl.w	r3, r2, r3
 8006c8e:	69ba      	ldr	r2, [r7, #24]
 8006c90:	4313      	orrs	r3, r2
 8006c92:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8006c94:	687b      	ldr	r3, [r7, #4]
 8006c96:	69ba      	ldr	r2, [r7, #24]
 8006c98:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8006c9a:	687b      	ldr	r3, [r7, #4]
 8006c9c:	685b      	ldr	r3, [r3, #4]
 8006c9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8006ca0:	2201      	movs	r2, #1
 8006ca2:	69fb      	ldr	r3, [r7, #28]
 8006ca4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ca8:	43db      	mvns	r3, r3
 8006caa:	69ba      	ldr	r2, [r7, #24]
 8006cac:	4013      	ands	r3, r2
 8006cae:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8006cb0:	683b      	ldr	r3, [r7, #0]
 8006cb2:	685b      	ldr	r3, [r3, #4]
 8006cb4:	091b      	lsrs	r3, r3, #4
 8006cb6:	f003 0201 	and.w	r2, r3, #1
 8006cba:	69fb      	ldr	r3, [r7, #28]
 8006cbc:	fa02 f303 	lsl.w	r3, r2, r3
 8006cc0:	69ba      	ldr	r2, [r7, #24]
 8006cc2:	4313      	orrs	r3, r2
 8006cc4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8006cc6:	687b      	ldr	r3, [r7, #4]
 8006cc8:	69ba      	ldr	r2, [r7, #24]
 8006cca:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8006ccc:	683b      	ldr	r3, [r7, #0]
 8006cce:	685b      	ldr	r3, [r3, #4]
 8006cd0:	f003 0303 	and.w	r3, r3, #3
 8006cd4:	2b03      	cmp	r3, #3
 8006cd6:	d017      	beq.n	8006d08 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8006cd8:	687b      	ldr	r3, [r7, #4]
 8006cda:	68db      	ldr	r3, [r3, #12]
 8006cdc:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8006cde:	69fb      	ldr	r3, [r7, #28]
 8006ce0:	005b      	lsls	r3, r3, #1
 8006ce2:	2203      	movs	r2, #3
 8006ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8006ce8:	43db      	mvns	r3, r3
 8006cea:	69ba      	ldr	r2, [r7, #24]
 8006cec:	4013      	ands	r3, r2
 8006cee:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8006cf0:	683b      	ldr	r3, [r7, #0]
 8006cf2:	689a      	ldr	r2, [r3, #8]
 8006cf4:	69fb      	ldr	r3, [r7, #28]
 8006cf6:	005b      	lsls	r3, r3, #1
 8006cf8:	fa02 f303 	lsl.w	r3, r2, r3
 8006cfc:	69ba      	ldr	r2, [r7, #24]
 8006cfe:	4313      	orrs	r3, r2
 8006d00:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	69ba      	ldr	r2, [r7, #24]
 8006d06:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8006d08:	683b      	ldr	r3, [r7, #0]
 8006d0a:	685b      	ldr	r3, [r3, #4]
 8006d0c:	f003 0303 	and.w	r3, r3, #3
 8006d10:	2b02      	cmp	r3, #2
 8006d12:	d123      	bne.n	8006d5c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8006d14:	69fb      	ldr	r3, [r7, #28]
 8006d16:	08da      	lsrs	r2, r3, #3
 8006d18:	687b      	ldr	r3, [r7, #4]
 8006d1a:	3208      	adds	r2, #8
 8006d1c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8006d20:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8006d22:	69fb      	ldr	r3, [r7, #28]
 8006d24:	f003 0307 	and.w	r3, r3, #7
 8006d28:	009b      	lsls	r3, r3, #2
 8006d2a:	220f      	movs	r2, #15
 8006d2c:	fa02 f303 	lsl.w	r3, r2, r3
 8006d30:	43db      	mvns	r3, r3
 8006d32:	69ba      	ldr	r2, [r7, #24]
 8006d34:	4013      	ands	r3, r2
 8006d36:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8006d38:	683b      	ldr	r3, [r7, #0]
 8006d3a:	691a      	ldr	r2, [r3, #16]
 8006d3c:	69fb      	ldr	r3, [r7, #28]
 8006d3e:	f003 0307 	and.w	r3, r3, #7
 8006d42:	009b      	lsls	r3, r3, #2
 8006d44:	fa02 f303 	lsl.w	r3, r2, r3
 8006d48:	69ba      	ldr	r2, [r7, #24]
 8006d4a:	4313      	orrs	r3, r2
 8006d4c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8006d4e:	69fb      	ldr	r3, [r7, #28]
 8006d50:	08da      	lsrs	r2, r3, #3
 8006d52:	687b      	ldr	r3, [r7, #4]
 8006d54:	3208      	adds	r2, #8
 8006d56:	69b9      	ldr	r1, [r7, #24]
 8006d58:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8006d62:	69fb      	ldr	r3, [r7, #28]
 8006d64:	005b      	lsls	r3, r3, #1
 8006d66:	2203      	movs	r2, #3
 8006d68:	fa02 f303 	lsl.w	r3, r2, r3
 8006d6c:	43db      	mvns	r3, r3
 8006d6e:	69ba      	ldr	r2, [r7, #24]
 8006d70:	4013      	ands	r3, r2
 8006d72:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8006d74:	683b      	ldr	r3, [r7, #0]
 8006d76:	685b      	ldr	r3, [r3, #4]
 8006d78:	f003 0203 	and.w	r2, r3, #3
 8006d7c:	69fb      	ldr	r3, [r7, #28]
 8006d7e:	005b      	lsls	r3, r3, #1
 8006d80:	fa02 f303 	lsl.w	r3, r2, r3
 8006d84:	69ba      	ldr	r2, [r7, #24]
 8006d86:	4313      	orrs	r3, r2
 8006d88:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8006d8a:	687b      	ldr	r3, [r7, #4]
 8006d8c:	69ba      	ldr	r2, [r7, #24]
 8006d8e:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8006d90:	683b      	ldr	r3, [r7, #0]
 8006d92:	685b      	ldr	r3, [r3, #4]
 8006d94:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8006d98:	2b00      	cmp	r3, #0
 8006d9a:	f000 80b4 	beq.w	8006f06 <HAL_GPIO_Init+0x2ee>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8006d9e:	2300      	movs	r3, #0
 8006da0:	60fb      	str	r3, [r7, #12]
 8006da2:	4b60      	ldr	r3, [pc, #384]	; (8006f24 <HAL_GPIO_Init+0x30c>)
 8006da4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006da6:	4a5f      	ldr	r2, [pc, #380]	; (8006f24 <HAL_GPIO_Init+0x30c>)
 8006da8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8006dac:	6453      	str	r3, [r2, #68]	; 0x44
 8006dae:	4b5d      	ldr	r3, [pc, #372]	; (8006f24 <HAL_GPIO_Init+0x30c>)
 8006db0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8006db2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8006db6:	60fb      	str	r3, [r7, #12]
 8006db8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8006dba:	4a5b      	ldr	r2, [pc, #364]	; (8006f28 <HAL_GPIO_Init+0x310>)
 8006dbc:	69fb      	ldr	r3, [r7, #28]
 8006dbe:	089b      	lsrs	r3, r3, #2
 8006dc0:	3302      	adds	r3, #2
 8006dc2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8006dc6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8006dc8:	69fb      	ldr	r3, [r7, #28]
 8006dca:	f003 0303 	and.w	r3, r3, #3
 8006dce:	009b      	lsls	r3, r3, #2
 8006dd0:	220f      	movs	r2, #15
 8006dd2:	fa02 f303 	lsl.w	r3, r2, r3
 8006dd6:	43db      	mvns	r3, r3
 8006dd8:	69ba      	ldr	r2, [r7, #24]
 8006dda:	4013      	ands	r3, r2
 8006ddc:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8006dde:	687b      	ldr	r3, [r7, #4]
 8006de0:	4a52      	ldr	r2, [pc, #328]	; (8006f2c <HAL_GPIO_Init+0x314>)
 8006de2:	4293      	cmp	r3, r2
 8006de4:	d02b      	beq.n	8006e3e <HAL_GPIO_Init+0x226>
 8006de6:	687b      	ldr	r3, [r7, #4]
 8006de8:	4a51      	ldr	r2, [pc, #324]	; (8006f30 <HAL_GPIO_Init+0x318>)
 8006dea:	4293      	cmp	r3, r2
 8006dec:	d025      	beq.n	8006e3a <HAL_GPIO_Init+0x222>
 8006dee:	687b      	ldr	r3, [r7, #4]
 8006df0:	4a50      	ldr	r2, [pc, #320]	; (8006f34 <HAL_GPIO_Init+0x31c>)
 8006df2:	4293      	cmp	r3, r2
 8006df4:	d01f      	beq.n	8006e36 <HAL_GPIO_Init+0x21e>
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	4a4f      	ldr	r2, [pc, #316]	; (8006f38 <HAL_GPIO_Init+0x320>)
 8006dfa:	4293      	cmp	r3, r2
 8006dfc:	d019      	beq.n	8006e32 <HAL_GPIO_Init+0x21a>
 8006dfe:	687b      	ldr	r3, [r7, #4]
 8006e00:	4a4e      	ldr	r2, [pc, #312]	; (8006f3c <HAL_GPIO_Init+0x324>)
 8006e02:	4293      	cmp	r3, r2
 8006e04:	d013      	beq.n	8006e2e <HAL_GPIO_Init+0x216>
 8006e06:	687b      	ldr	r3, [r7, #4]
 8006e08:	4a4d      	ldr	r2, [pc, #308]	; (8006f40 <HAL_GPIO_Init+0x328>)
 8006e0a:	4293      	cmp	r3, r2
 8006e0c:	d00d      	beq.n	8006e2a <HAL_GPIO_Init+0x212>
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	4a4c      	ldr	r2, [pc, #304]	; (8006f44 <HAL_GPIO_Init+0x32c>)
 8006e12:	4293      	cmp	r3, r2
 8006e14:	d007      	beq.n	8006e26 <HAL_GPIO_Init+0x20e>
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	4a4b      	ldr	r2, [pc, #300]	; (8006f48 <HAL_GPIO_Init+0x330>)
 8006e1a:	4293      	cmp	r3, r2
 8006e1c:	d101      	bne.n	8006e22 <HAL_GPIO_Init+0x20a>
 8006e1e:	2307      	movs	r3, #7
 8006e20:	e00e      	b.n	8006e40 <HAL_GPIO_Init+0x228>
 8006e22:	2308      	movs	r3, #8
 8006e24:	e00c      	b.n	8006e40 <HAL_GPIO_Init+0x228>
 8006e26:	2306      	movs	r3, #6
 8006e28:	e00a      	b.n	8006e40 <HAL_GPIO_Init+0x228>
 8006e2a:	2305      	movs	r3, #5
 8006e2c:	e008      	b.n	8006e40 <HAL_GPIO_Init+0x228>
 8006e2e:	2304      	movs	r3, #4
 8006e30:	e006      	b.n	8006e40 <HAL_GPIO_Init+0x228>
 8006e32:	2303      	movs	r3, #3
 8006e34:	e004      	b.n	8006e40 <HAL_GPIO_Init+0x228>
 8006e36:	2302      	movs	r3, #2
 8006e38:	e002      	b.n	8006e40 <HAL_GPIO_Init+0x228>
 8006e3a:	2301      	movs	r3, #1
 8006e3c:	e000      	b.n	8006e40 <HAL_GPIO_Init+0x228>
 8006e3e:	2300      	movs	r3, #0
 8006e40:	69fa      	ldr	r2, [r7, #28]
 8006e42:	f002 0203 	and.w	r2, r2, #3
 8006e46:	0092      	lsls	r2, r2, #2
 8006e48:	4093      	lsls	r3, r2
 8006e4a:	69ba      	ldr	r2, [r7, #24]
 8006e4c:	4313      	orrs	r3, r2
 8006e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8006e50:	4935      	ldr	r1, [pc, #212]	; (8006f28 <HAL_GPIO_Init+0x310>)
 8006e52:	69fb      	ldr	r3, [r7, #28]
 8006e54:	089b      	lsrs	r3, r3, #2
 8006e56:	3302      	adds	r3, #2
 8006e58:	69ba      	ldr	r2, [r7, #24]
 8006e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8006e5e:	4b3b      	ldr	r3, [pc, #236]	; (8006f4c <HAL_GPIO_Init+0x334>)
 8006e60:	681b      	ldr	r3, [r3, #0]
 8006e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e64:	693b      	ldr	r3, [r7, #16]
 8006e66:	43db      	mvns	r3, r3
 8006e68:	69ba      	ldr	r2, [r7, #24]
 8006e6a:	4013      	ands	r3, r2
 8006e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8006e6e:	683b      	ldr	r3, [r7, #0]
 8006e70:	685b      	ldr	r3, [r3, #4]
 8006e72:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d003      	beq.n	8006e82 <HAL_GPIO_Init+0x26a>
        {
          temp |= iocurrent;
 8006e7a:	69ba      	ldr	r2, [r7, #24]
 8006e7c:	693b      	ldr	r3, [r7, #16]
 8006e7e:	4313      	orrs	r3, r2
 8006e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8006e82:	4a32      	ldr	r2, [pc, #200]	; (8006f4c <HAL_GPIO_Init+0x334>)
 8006e84:	69bb      	ldr	r3, [r7, #24]
 8006e86:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8006e88:	4b30      	ldr	r3, [pc, #192]	; (8006f4c <HAL_GPIO_Init+0x334>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006e8e:	693b      	ldr	r3, [r7, #16]
 8006e90:	43db      	mvns	r3, r3
 8006e92:	69ba      	ldr	r2, [r7, #24]
 8006e94:	4013      	ands	r3, r2
 8006e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8006e98:	683b      	ldr	r3, [r7, #0]
 8006e9a:	685b      	ldr	r3, [r3, #4]
 8006e9c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006ea0:	2b00      	cmp	r3, #0
 8006ea2:	d003      	beq.n	8006eac <HAL_GPIO_Init+0x294>
        {
          temp |= iocurrent;
 8006ea4:	69ba      	ldr	r2, [r7, #24]
 8006ea6:	693b      	ldr	r3, [r7, #16]
 8006ea8:	4313      	orrs	r3, r2
 8006eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8006eac:	4a27      	ldr	r2, [pc, #156]	; (8006f4c <HAL_GPIO_Init+0x334>)
 8006eae:	69bb      	ldr	r3, [r7, #24]
 8006eb0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8006eb2:	4b26      	ldr	r3, [pc, #152]	; (8006f4c <HAL_GPIO_Init+0x334>)
 8006eb4:	689b      	ldr	r3, [r3, #8]
 8006eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006eb8:	693b      	ldr	r3, [r7, #16]
 8006eba:	43db      	mvns	r3, r3
 8006ebc:	69ba      	ldr	r2, [r7, #24]
 8006ebe:	4013      	ands	r3, r2
 8006ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8006ec2:	683b      	ldr	r3, [r7, #0]
 8006ec4:	685b      	ldr	r3, [r3, #4]
 8006ec6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8006eca:	2b00      	cmp	r3, #0
 8006ecc:	d003      	beq.n	8006ed6 <HAL_GPIO_Init+0x2be>
        {
          temp |= iocurrent;
 8006ece:	69ba      	ldr	r2, [r7, #24]
 8006ed0:	693b      	ldr	r3, [r7, #16]
 8006ed2:	4313      	orrs	r3, r2
 8006ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8006ed6:	4a1d      	ldr	r2, [pc, #116]	; (8006f4c <HAL_GPIO_Init+0x334>)
 8006ed8:	69bb      	ldr	r3, [r7, #24]
 8006eda:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8006edc:	4b1b      	ldr	r3, [pc, #108]	; (8006f4c <HAL_GPIO_Init+0x334>)
 8006ede:	68db      	ldr	r3, [r3, #12]
 8006ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8006ee2:	693b      	ldr	r3, [r7, #16]
 8006ee4:	43db      	mvns	r3, r3
 8006ee6:	69ba      	ldr	r2, [r7, #24]
 8006ee8:	4013      	ands	r3, r2
 8006eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8006eec:	683b      	ldr	r3, [r7, #0]
 8006eee:	685b      	ldr	r3, [r3, #4]
 8006ef0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8006ef4:	2b00      	cmp	r3, #0
 8006ef6:	d003      	beq.n	8006f00 <HAL_GPIO_Init+0x2e8>
        {
          temp |= iocurrent;
 8006ef8:	69ba      	ldr	r2, [r7, #24]
 8006efa:	693b      	ldr	r3, [r7, #16]
 8006efc:	4313      	orrs	r3, r2
 8006efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8006f00:	4a12      	ldr	r2, [pc, #72]	; (8006f4c <HAL_GPIO_Init+0x334>)
 8006f02:	69bb      	ldr	r3, [r7, #24]
 8006f04:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8006f06:	69fb      	ldr	r3, [r7, #28]
 8006f08:	3301      	adds	r3, #1
 8006f0a:	61fb      	str	r3, [r7, #28]
 8006f0c:	69fb      	ldr	r3, [r7, #28]
 8006f0e:	2b0f      	cmp	r3, #15
 8006f10:	f67f ae90 	bls.w	8006c34 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8006f14:	bf00      	nop
 8006f16:	bf00      	nop
 8006f18:	3724      	adds	r7, #36	; 0x24
 8006f1a:	46bd      	mov	sp, r7
 8006f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f20:	4770      	bx	lr
 8006f22:	bf00      	nop
 8006f24:	40023800 	.word	0x40023800
 8006f28:	40013800 	.word	0x40013800
 8006f2c:	40020000 	.word	0x40020000
 8006f30:	40020400 	.word	0x40020400
 8006f34:	40020800 	.word	0x40020800
 8006f38:	40020c00 	.word	0x40020c00
 8006f3c:	40021000 	.word	0x40021000
 8006f40:	40021400 	.word	0x40021400
 8006f44:	40021800 	.word	0x40021800
 8006f48:	40021c00 	.word	0x40021c00
 8006f4c:	40013c00 	.word	0x40013c00

08006f50 <HAL_GPIO_ReadPin>:
  * @param  GPIO_Pin specifies the port bit to read.
  *         This parameter can be GPIO_PIN_x where x can be (0..15).
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006f50:	b480      	push	{r7}
 8006f52:	b085      	sub	sp, #20
 8006f54:	af00      	add	r7, sp, #0
 8006f56:	6078      	str	r0, [r7, #4]
 8006f58:	460b      	mov	r3, r1
 8006f5a:	807b      	strh	r3, [r7, #2]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  if((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 8006f5c:	687b      	ldr	r3, [r7, #4]
 8006f5e:	691a      	ldr	r2, [r3, #16]
 8006f60:	887b      	ldrh	r3, [r7, #2]
 8006f62:	4013      	ands	r3, r2
 8006f64:	2b00      	cmp	r3, #0
 8006f66:	d002      	beq.n	8006f6e <HAL_GPIO_ReadPin+0x1e>
  {
    bitstatus = GPIO_PIN_SET;
 8006f68:	2301      	movs	r3, #1
 8006f6a:	73fb      	strb	r3, [r7, #15]
 8006f6c:	e001      	b.n	8006f72 <HAL_GPIO_ReadPin+0x22>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 8006f6e:	2300      	movs	r3, #0
 8006f70:	73fb      	strb	r3, [r7, #15]
  }
  return bitstatus;
 8006f72:	7bfb      	ldrb	r3, [r7, #15]
}
 8006f74:	4618      	mov	r0, r3
 8006f76:	3714      	adds	r7, #20
 8006f78:	46bd      	mov	sp, r7
 8006f7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f7e:	4770      	bx	lr

08006f80 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8006f80:	b480      	push	{r7}
 8006f82:	b083      	sub	sp, #12
 8006f84:	af00      	add	r7, sp, #0
 8006f86:	6078      	str	r0, [r7, #4]
 8006f88:	460b      	mov	r3, r1
 8006f8a:	807b      	strh	r3, [r7, #2]
 8006f8c:	4613      	mov	r3, r2
 8006f8e:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8006f90:	787b      	ldrb	r3, [r7, #1]
 8006f92:	2b00      	cmp	r3, #0
 8006f94:	d003      	beq.n	8006f9e <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8006f96:	887a      	ldrh	r2, [r7, #2]
 8006f98:	687b      	ldr	r3, [r7, #4]
 8006f9a:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8006f9c:	e003      	b.n	8006fa6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8006f9e:	887b      	ldrh	r3, [r7, #2]
 8006fa0:	041a      	lsls	r2, r3, #16
 8006fa2:	687b      	ldr	r3, [r7, #4]
 8006fa4:	619a      	str	r2, [r3, #24]
}
 8006fa6:	bf00      	nop
 8006fa8:	370c      	adds	r7, #12
 8006faa:	46bd      	mov	sp, r7
 8006fac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fb0:	4770      	bx	lr

08006fb2 <HAL_GPIO_TogglePin>:
  *                      x can be (A..I) to select the GPIO peripheral for STM32F40XX and STM32F427X devices.
  * @param  GPIO_Pin Specifies the pins to be toggled.
  * @retval None
  */
void HAL_GPIO_TogglePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin)
{
 8006fb2:	b480      	push	{r7}
 8006fb4:	b085      	sub	sp, #20
 8006fb6:	af00      	add	r7, sp, #0
 8006fb8:	6078      	str	r0, [r7, #4]
 8006fba:	460b      	mov	r3, r1
 8006fbc:	807b      	strh	r3, [r7, #2]

  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));

  /* get current Ouput Data Register value */
  odr = GPIOx->ODR;
 8006fbe:	687b      	ldr	r3, [r7, #4]
 8006fc0:	695b      	ldr	r3, [r3, #20]
 8006fc2:	60fb      	str	r3, [r7, #12]

  /* Set selected pins that were at low level, and reset ones that were high */
  GPIOx->BSRR = ((odr & GPIO_Pin) << GPIO_NUMBER) | (~odr & GPIO_Pin);
 8006fc4:	887a      	ldrh	r2, [r7, #2]
 8006fc6:	68fb      	ldr	r3, [r7, #12]
 8006fc8:	4013      	ands	r3, r2
 8006fca:	041a      	lsls	r2, r3, #16
 8006fcc:	68fb      	ldr	r3, [r7, #12]
 8006fce:	43d9      	mvns	r1, r3
 8006fd0:	887b      	ldrh	r3, [r7, #2]
 8006fd2:	400b      	ands	r3, r1
 8006fd4:	431a      	orrs	r2, r3
 8006fd6:	687b      	ldr	r3, [r7, #4]
 8006fd8:	619a      	str	r2, [r3, #24]
}
 8006fda:	bf00      	nop
 8006fdc:	3714      	adds	r7, #20
 8006fde:	46bd      	mov	sp, r7
 8006fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006fe4:	4770      	bx	lr
	...

08006fe8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8006fe8:	b580      	push	{r7, lr}
 8006fea:	b086      	sub	sp, #24
 8006fec:	af00      	add	r7, sp, #0
 8006fee:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2b00      	cmp	r3, #0
 8006ff4:	d101      	bne.n	8006ffa <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8006ff6:	2301      	movs	r3, #1
 8006ff8:	e267      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8006ffa:	687b      	ldr	r3, [r7, #4]
 8006ffc:	681b      	ldr	r3, [r3, #0]
 8006ffe:	f003 0301 	and.w	r3, r3, #1
 8007002:	2b00      	cmp	r3, #0
 8007004:	d075      	beq.n	80070f2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8007006:	4b88      	ldr	r3, [pc, #544]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007008:	689b      	ldr	r3, [r3, #8]
 800700a:	f003 030c 	and.w	r3, r3, #12
 800700e:	2b04      	cmp	r3, #4
 8007010:	d00c      	beq.n	800702c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8007012:	4b85      	ldr	r3, [pc, #532]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007014:	689b      	ldr	r3, [r3, #8]
 8007016:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800701a:	2b08      	cmp	r3, #8
 800701c:	d112      	bne.n	8007044 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800701e:	4b82      	ldr	r3, [pc, #520]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007020:	685b      	ldr	r3, [r3, #4]
 8007022:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8007026:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800702a:	d10b      	bne.n	8007044 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800702c:	4b7e      	ldr	r3, [pc, #504]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800702e:	681b      	ldr	r3, [r3, #0]
 8007030:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8007034:	2b00      	cmp	r3, #0
 8007036:	d05b      	beq.n	80070f0 <HAL_RCC_OscConfig+0x108>
 8007038:	687b      	ldr	r3, [r7, #4]
 800703a:	685b      	ldr	r3, [r3, #4]
 800703c:	2b00      	cmp	r3, #0
 800703e:	d157      	bne.n	80070f0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8007040:	2301      	movs	r3, #1
 8007042:	e242      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8007044:	687b      	ldr	r3, [r7, #4]
 8007046:	685b      	ldr	r3, [r3, #4]
 8007048:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800704c:	d106      	bne.n	800705c <HAL_RCC_OscConfig+0x74>
 800704e:	4b76      	ldr	r3, [pc, #472]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007050:	681b      	ldr	r3, [r3, #0]
 8007052:	4a75      	ldr	r2, [pc, #468]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007054:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8007058:	6013      	str	r3, [r2, #0]
 800705a:	e01d      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	685b      	ldr	r3, [r3, #4]
 8007060:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8007064:	d10c      	bne.n	8007080 <HAL_RCC_OscConfig+0x98>
 8007066:	4b70      	ldr	r3, [pc, #448]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007068:	681b      	ldr	r3, [r3, #0]
 800706a:	4a6f      	ldr	r2, [pc, #444]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800706c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8007070:	6013      	str	r3, [r2, #0]
 8007072:	4b6d      	ldr	r3, [pc, #436]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007074:	681b      	ldr	r3, [r3, #0]
 8007076:	4a6c      	ldr	r2, [pc, #432]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007078:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800707c:	6013      	str	r3, [r2, #0]
 800707e:	e00b      	b.n	8007098 <HAL_RCC_OscConfig+0xb0>
 8007080:	4b69      	ldr	r3, [pc, #420]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007082:	681b      	ldr	r3, [r3, #0]
 8007084:	4a68      	ldr	r2, [pc, #416]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007086:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800708a:	6013      	str	r3, [r2, #0]
 800708c:	4b66      	ldr	r3, [pc, #408]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a65      	ldr	r2, [pc, #404]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007092:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8007096:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8007098:	687b      	ldr	r3, [r7, #4]
 800709a:	685b      	ldr	r3, [r3, #4]
 800709c:	2b00      	cmp	r3, #0
 800709e:	d013      	beq.n	80070c8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070a0:	f7ff f8e8 	bl	8006274 <HAL_GetTick>
 80070a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070a6:	e008      	b.n	80070ba <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070a8:	f7ff f8e4 	bl	8006274 <HAL_GetTick>
 80070ac:	4602      	mov	r2, r0
 80070ae:	693b      	ldr	r3, [r7, #16]
 80070b0:	1ad3      	subs	r3, r2, r3
 80070b2:	2b64      	cmp	r3, #100	; 0x64
 80070b4:	d901      	bls.n	80070ba <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 80070b6:	2303      	movs	r3, #3
 80070b8:	e207      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80070ba:	4b5b      	ldr	r3, [pc, #364]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 80070bc:	681b      	ldr	r3, [r3, #0]
 80070be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070c2:	2b00      	cmp	r3, #0
 80070c4:	d0f0      	beq.n	80070a8 <HAL_RCC_OscConfig+0xc0>
 80070c6:	e014      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80070c8:	f7ff f8d4 	bl	8006274 <HAL_GetTick>
 80070cc:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070ce:	e008      	b.n	80070e2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80070d0:	f7ff f8d0 	bl	8006274 <HAL_GetTick>
 80070d4:	4602      	mov	r2, r0
 80070d6:	693b      	ldr	r3, [r7, #16]
 80070d8:	1ad3      	subs	r3, r2, r3
 80070da:	2b64      	cmp	r3, #100	; 0x64
 80070dc:	d901      	bls.n	80070e2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80070de:	2303      	movs	r3, #3
 80070e0:	e1f3      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80070e2:	4b51      	ldr	r3, [pc, #324]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 80070e4:	681b      	ldr	r3, [r3, #0]
 80070e6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80070ea:	2b00      	cmp	r3, #0
 80070ec:	d1f0      	bne.n	80070d0 <HAL_RCC_OscConfig+0xe8>
 80070ee:	e000      	b.n	80070f2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80070f0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80070f2:	687b      	ldr	r3, [r7, #4]
 80070f4:	681b      	ldr	r3, [r3, #0]
 80070f6:	f003 0302 	and.w	r3, r3, #2
 80070fa:	2b00      	cmp	r3, #0
 80070fc:	d063      	beq.n	80071c6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80070fe:	4b4a      	ldr	r3, [pc, #296]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007100:	689b      	ldr	r3, [r3, #8]
 8007102:	f003 030c 	and.w	r3, r3, #12
 8007106:	2b00      	cmp	r3, #0
 8007108:	d00b      	beq.n	8007122 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800710a:	4b47      	ldr	r3, [pc, #284]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800710c:	689b      	ldr	r3, [r3, #8]
 800710e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8007112:	2b08      	cmp	r3, #8
 8007114:	d11c      	bne.n	8007150 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8007116:	4b44      	ldr	r3, [pc, #272]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007118:	685b      	ldr	r3, [r3, #4]
 800711a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800711e:	2b00      	cmp	r3, #0
 8007120:	d116      	bne.n	8007150 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8007122:	4b41      	ldr	r3, [pc, #260]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007124:	681b      	ldr	r3, [r3, #0]
 8007126:	f003 0302 	and.w	r3, r3, #2
 800712a:	2b00      	cmp	r3, #0
 800712c:	d005      	beq.n	800713a <HAL_RCC_OscConfig+0x152>
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	68db      	ldr	r3, [r3, #12]
 8007132:	2b01      	cmp	r3, #1
 8007134:	d001      	beq.n	800713a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8007136:	2301      	movs	r3, #1
 8007138:	e1c7      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800713a:	4b3b      	ldr	r3, [pc, #236]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800713c:	681b      	ldr	r3, [r3, #0]
 800713e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8007142:	687b      	ldr	r3, [r7, #4]
 8007144:	691b      	ldr	r3, [r3, #16]
 8007146:	00db      	lsls	r3, r3, #3
 8007148:	4937      	ldr	r1, [pc, #220]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800714a:	4313      	orrs	r3, r2
 800714c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800714e:	e03a      	b.n	80071c6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	68db      	ldr	r3, [r3, #12]
 8007154:	2b00      	cmp	r3, #0
 8007156:	d020      	beq.n	800719a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8007158:	4b34      	ldr	r3, [pc, #208]	; (800722c <HAL_RCC_OscConfig+0x244>)
 800715a:	2201      	movs	r2, #1
 800715c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800715e:	f7ff f889 	bl	8006274 <HAL_GetTick>
 8007162:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007164:	e008      	b.n	8007178 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8007166:	f7ff f885 	bl	8006274 <HAL_GetTick>
 800716a:	4602      	mov	r2, r0
 800716c:	693b      	ldr	r3, [r7, #16]
 800716e:	1ad3      	subs	r3, r2, r3
 8007170:	2b02      	cmp	r3, #2
 8007172:	d901      	bls.n	8007178 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8007174:	2303      	movs	r3, #3
 8007176:	e1a8      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8007178:	4b2b      	ldr	r3, [pc, #172]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 800717a:	681b      	ldr	r3, [r3, #0]
 800717c:	f003 0302 	and.w	r3, r3, #2
 8007180:	2b00      	cmp	r3, #0
 8007182:	d0f0      	beq.n	8007166 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8007184:	4b28      	ldr	r3, [pc, #160]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007186:	681b      	ldr	r3, [r3, #0]
 8007188:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800718c:	687b      	ldr	r3, [r7, #4]
 800718e:	691b      	ldr	r3, [r3, #16]
 8007190:	00db      	lsls	r3, r3, #3
 8007192:	4925      	ldr	r1, [pc, #148]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 8007194:	4313      	orrs	r3, r2
 8007196:	600b      	str	r3, [r1, #0]
 8007198:	e015      	b.n	80071c6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800719a:	4b24      	ldr	r3, [pc, #144]	; (800722c <HAL_RCC_OscConfig+0x244>)
 800719c:	2200      	movs	r2, #0
 800719e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80071a0:	f7ff f868 	bl	8006274 <HAL_GetTick>
 80071a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071a6:	e008      	b.n	80071ba <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80071a8:	f7ff f864 	bl	8006274 <HAL_GetTick>
 80071ac:	4602      	mov	r2, r0
 80071ae:	693b      	ldr	r3, [r7, #16]
 80071b0:	1ad3      	subs	r3, r2, r3
 80071b2:	2b02      	cmp	r3, #2
 80071b4:	d901      	bls.n	80071ba <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 80071b6:	2303      	movs	r3, #3
 80071b8:	e187      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80071ba:	4b1b      	ldr	r3, [pc, #108]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 80071bc:	681b      	ldr	r3, [r3, #0]
 80071be:	f003 0302 	and.w	r3, r3, #2
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d1f0      	bne.n	80071a8 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	681b      	ldr	r3, [r3, #0]
 80071ca:	f003 0308 	and.w	r3, r3, #8
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d036      	beq.n	8007240 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80071d2:	687b      	ldr	r3, [r7, #4]
 80071d4:	695b      	ldr	r3, [r3, #20]
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d016      	beq.n	8007208 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80071da:	4b15      	ldr	r3, [pc, #84]	; (8007230 <HAL_RCC_OscConfig+0x248>)
 80071dc:	2201      	movs	r2, #1
 80071de:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80071e0:	f7ff f848 	bl	8006274 <HAL_GetTick>
 80071e4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071e6:	e008      	b.n	80071fa <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80071e8:	f7ff f844 	bl	8006274 <HAL_GetTick>
 80071ec:	4602      	mov	r2, r0
 80071ee:	693b      	ldr	r3, [r7, #16]
 80071f0:	1ad3      	subs	r3, r2, r3
 80071f2:	2b02      	cmp	r3, #2
 80071f4:	d901      	bls.n	80071fa <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80071f6:	2303      	movs	r3, #3
 80071f8:	e167      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80071fa:	4b0b      	ldr	r3, [pc, #44]	; (8007228 <HAL_RCC_OscConfig+0x240>)
 80071fc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80071fe:	f003 0302 	and.w	r3, r3, #2
 8007202:	2b00      	cmp	r3, #0
 8007204:	d0f0      	beq.n	80071e8 <HAL_RCC_OscConfig+0x200>
 8007206:	e01b      	b.n	8007240 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8007208:	4b09      	ldr	r3, [pc, #36]	; (8007230 <HAL_RCC_OscConfig+0x248>)
 800720a:	2200      	movs	r2, #0
 800720c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800720e:	f7ff f831 	bl	8006274 <HAL_GetTick>
 8007212:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007214:	e00e      	b.n	8007234 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8007216:	f7ff f82d 	bl	8006274 <HAL_GetTick>
 800721a:	4602      	mov	r2, r0
 800721c:	693b      	ldr	r3, [r7, #16]
 800721e:	1ad3      	subs	r3, r2, r3
 8007220:	2b02      	cmp	r3, #2
 8007222:	d907      	bls.n	8007234 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8007224:	2303      	movs	r3, #3
 8007226:	e150      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
 8007228:	40023800 	.word	0x40023800
 800722c:	42470000 	.word	0x42470000
 8007230:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8007234:	4b88      	ldr	r3, [pc, #544]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007236:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8007238:	f003 0302 	and.w	r3, r3, #2
 800723c:	2b00      	cmp	r3, #0
 800723e:	d1ea      	bne.n	8007216 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	681b      	ldr	r3, [r3, #0]
 8007244:	f003 0304 	and.w	r3, r3, #4
 8007248:	2b00      	cmp	r3, #0
 800724a:	f000 8097 	beq.w	800737c <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800724e:	2300      	movs	r3, #0
 8007250:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8007252:	4b81      	ldr	r3, [pc, #516]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007256:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800725a:	2b00      	cmp	r3, #0
 800725c:	d10f      	bne.n	800727e <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 800725e:	2300      	movs	r3, #0
 8007260:	60bb      	str	r3, [r7, #8]
 8007262:	4b7d      	ldr	r3, [pc, #500]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007264:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007266:	4a7c      	ldr	r2, [pc, #496]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007268:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800726c:	6413      	str	r3, [r2, #64]	; 0x40
 800726e:	4b7a      	ldr	r3, [pc, #488]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007270:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007272:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8007276:	60bb      	str	r3, [r7, #8]
 8007278:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800727a:	2301      	movs	r3, #1
 800727c:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800727e:	4b77      	ldr	r3, [pc, #476]	; (800745c <HAL_RCC_OscConfig+0x474>)
 8007280:	681b      	ldr	r3, [r3, #0]
 8007282:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007286:	2b00      	cmp	r3, #0
 8007288:	d118      	bne.n	80072bc <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800728a:	4b74      	ldr	r3, [pc, #464]	; (800745c <HAL_RCC_OscConfig+0x474>)
 800728c:	681b      	ldr	r3, [r3, #0]
 800728e:	4a73      	ldr	r2, [pc, #460]	; (800745c <HAL_RCC_OscConfig+0x474>)
 8007290:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8007294:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8007296:	f7fe ffed 	bl	8006274 <HAL_GetTick>
 800729a:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800729c:	e008      	b.n	80072b0 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800729e:	f7fe ffe9 	bl	8006274 <HAL_GetTick>
 80072a2:	4602      	mov	r2, r0
 80072a4:	693b      	ldr	r3, [r7, #16]
 80072a6:	1ad3      	subs	r3, r2, r3
 80072a8:	2b02      	cmp	r3, #2
 80072aa:	d901      	bls.n	80072b0 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80072ac:	2303      	movs	r3, #3
 80072ae:	e10c      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80072b0:	4b6a      	ldr	r3, [pc, #424]	; (800745c <HAL_RCC_OscConfig+0x474>)
 80072b2:	681b      	ldr	r3, [r3, #0]
 80072b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80072b8:	2b00      	cmp	r3, #0
 80072ba:	d0f0      	beq.n	800729e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	689b      	ldr	r3, [r3, #8]
 80072c0:	2b01      	cmp	r3, #1
 80072c2:	d106      	bne.n	80072d2 <HAL_RCC_OscConfig+0x2ea>
 80072c4:	4b64      	ldr	r3, [pc, #400]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072c6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072c8:	4a63      	ldr	r2, [pc, #396]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072ca:	f043 0301 	orr.w	r3, r3, #1
 80072ce:	6713      	str	r3, [r2, #112]	; 0x70
 80072d0:	e01c      	b.n	800730c <HAL_RCC_OscConfig+0x324>
 80072d2:	687b      	ldr	r3, [r7, #4]
 80072d4:	689b      	ldr	r3, [r3, #8]
 80072d6:	2b05      	cmp	r3, #5
 80072d8:	d10c      	bne.n	80072f4 <HAL_RCC_OscConfig+0x30c>
 80072da:	4b5f      	ldr	r3, [pc, #380]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072de:	4a5e      	ldr	r2, [pc, #376]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072e0:	f043 0304 	orr.w	r3, r3, #4
 80072e4:	6713      	str	r3, [r2, #112]	; 0x70
 80072e6:	4b5c      	ldr	r3, [pc, #368]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072ea:	4a5b      	ldr	r2, [pc, #364]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072ec:	f043 0301 	orr.w	r3, r3, #1
 80072f0:	6713      	str	r3, [r2, #112]	; 0x70
 80072f2:	e00b      	b.n	800730c <HAL_RCC_OscConfig+0x324>
 80072f4:	4b58      	ldr	r3, [pc, #352]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072f6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80072f8:	4a57      	ldr	r2, [pc, #348]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80072fa:	f023 0301 	bic.w	r3, r3, #1
 80072fe:	6713      	str	r3, [r2, #112]	; 0x70
 8007300:	4b55      	ldr	r3, [pc, #340]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007302:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007304:	4a54      	ldr	r2, [pc, #336]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007306:	f023 0304 	bic.w	r3, r3, #4
 800730a:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800730c:	687b      	ldr	r3, [r7, #4]
 800730e:	689b      	ldr	r3, [r3, #8]
 8007310:	2b00      	cmp	r3, #0
 8007312:	d015      	beq.n	8007340 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8007314:	f7fe ffae 	bl	8006274 <HAL_GetTick>
 8007318:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800731a:	e00a      	b.n	8007332 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800731c:	f7fe ffaa 	bl	8006274 <HAL_GetTick>
 8007320:	4602      	mov	r2, r0
 8007322:	693b      	ldr	r3, [r7, #16]
 8007324:	1ad3      	subs	r3, r2, r3
 8007326:	f241 3288 	movw	r2, #5000	; 0x1388
 800732a:	4293      	cmp	r3, r2
 800732c:	d901      	bls.n	8007332 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800732e:	2303      	movs	r3, #3
 8007330:	e0cb      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8007332:	4b49      	ldr	r3, [pc, #292]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007336:	f003 0302 	and.w	r3, r3, #2
 800733a:	2b00      	cmp	r3, #0
 800733c:	d0ee      	beq.n	800731c <HAL_RCC_OscConfig+0x334>
 800733e:	e014      	b.n	800736a <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8007340:	f7fe ff98 	bl	8006274 <HAL_GetTick>
 8007344:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8007346:	e00a      	b.n	800735e <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8007348:	f7fe ff94 	bl	8006274 <HAL_GetTick>
 800734c:	4602      	mov	r2, r0
 800734e:	693b      	ldr	r3, [r7, #16]
 8007350:	1ad3      	subs	r3, r2, r3
 8007352:	f241 3288 	movw	r2, #5000	; 0x1388
 8007356:	4293      	cmp	r3, r2
 8007358:	d901      	bls.n	800735e <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800735a:	2303      	movs	r3, #3
 800735c:	e0b5      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800735e:	4b3e      	ldr	r3, [pc, #248]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007360:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8007362:	f003 0302 	and.w	r3, r3, #2
 8007366:	2b00      	cmp	r3, #0
 8007368:	d1ee      	bne.n	8007348 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800736a:	7dfb      	ldrb	r3, [r7, #23]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d105      	bne.n	800737c <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8007370:	4b39      	ldr	r3, [pc, #228]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007372:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007374:	4a38      	ldr	r2, [pc, #224]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007376:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800737a:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800737c:	687b      	ldr	r3, [r7, #4]
 800737e:	699b      	ldr	r3, [r3, #24]
 8007380:	2b00      	cmp	r3, #0
 8007382:	f000 80a1 	beq.w	80074c8 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8007386:	4b34      	ldr	r3, [pc, #208]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007388:	689b      	ldr	r3, [r3, #8]
 800738a:	f003 030c 	and.w	r3, r3, #12
 800738e:	2b08      	cmp	r3, #8
 8007390:	d05c      	beq.n	800744c <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	699b      	ldr	r3, [r3, #24]
 8007396:	2b02      	cmp	r3, #2
 8007398:	d141      	bne.n	800741e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800739a:	4b31      	ldr	r3, [pc, #196]	; (8007460 <HAL_RCC_OscConfig+0x478>)
 800739c:	2200      	movs	r2, #0
 800739e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073a0:	f7fe ff68 	bl	8006274 <HAL_GetTick>
 80073a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073a6:	e008      	b.n	80073ba <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073a8:	f7fe ff64 	bl	8006274 <HAL_GetTick>
 80073ac:	4602      	mov	r2, r0
 80073ae:	693b      	ldr	r3, [r7, #16]
 80073b0:	1ad3      	subs	r3, r2, r3
 80073b2:	2b02      	cmp	r3, #2
 80073b4:	d901      	bls.n	80073ba <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 80073b6:	2303      	movs	r3, #3
 80073b8:	e087      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80073ba:	4b27      	ldr	r3, [pc, #156]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80073bc:	681b      	ldr	r3, [r3, #0]
 80073be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80073c2:	2b00      	cmp	r3, #0
 80073c4:	d1f0      	bne.n	80073a8 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80073c6:	687b      	ldr	r3, [r7, #4]
 80073c8:	69da      	ldr	r2, [r3, #28]
 80073ca:	687b      	ldr	r3, [r7, #4]
 80073cc:	6a1b      	ldr	r3, [r3, #32]
 80073ce:	431a      	orrs	r2, r3
 80073d0:	687b      	ldr	r3, [r7, #4]
 80073d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80073d4:	019b      	lsls	r3, r3, #6
 80073d6:	431a      	orrs	r2, r3
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80073dc:	085b      	lsrs	r3, r3, #1
 80073de:	3b01      	subs	r3, #1
 80073e0:	041b      	lsls	r3, r3, #16
 80073e2:	431a      	orrs	r2, r3
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80073e8:	061b      	lsls	r3, r3, #24
 80073ea:	491b      	ldr	r1, [pc, #108]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 80073ec:	4313      	orrs	r3, r2
 80073ee:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80073f0:	4b1b      	ldr	r3, [pc, #108]	; (8007460 <HAL_RCC_OscConfig+0x478>)
 80073f2:	2201      	movs	r2, #1
 80073f4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80073f6:	f7fe ff3d 	bl	8006274 <HAL_GetTick>
 80073fa:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80073fc:	e008      	b.n	8007410 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80073fe:	f7fe ff39 	bl	8006274 <HAL_GetTick>
 8007402:	4602      	mov	r2, r0
 8007404:	693b      	ldr	r3, [r7, #16]
 8007406:	1ad3      	subs	r3, r2, r3
 8007408:	2b02      	cmp	r3, #2
 800740a:	d901      	bls.n	8007410 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800740c:	2303      	movs	r3, #3
 800740e:	e05c      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007410:	4b11      	ldr	r3, [pc, #68]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007412:	681b      	ldr	r3, [r3, #0]
 8007414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007418:	2b00      	cmp	r3, #0
 800741a:	d0f0      	beq.n	80073fe <HAL_RCC_OscConfig+0x416>
 800741c:	e054      	b.n	80074c8 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800741e:	4b10      	ldr	r3, [pc, #64]	; (8007460 <HAL_RCC_OscConfig+0x478>)
 8007420:	2200      	movs	r2, #0
 8007422:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8007424:	f7fe ff26 	bl	8006274 <HAL_GetTick>
 8007428:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800742a:	e008      	b.n	800743e <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800742c:	f7fe ff22 	bl	8006274 <HAL_GetTick>
 8007430:	4602      	mov	r2, r0
 8007432:	693b      	ldr	r3, [r7, #16]
 8007434:	1ad3      	subs	r3, r2, r3
 8007436:	2b02      	cmp	r3, #2
 8007438:	d901      	bls.n	800743e <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800743a:	2303      	movs	r3, #3
 800743c:	e045      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800743e:	4b06      	ldr	r3, [pc, #24]	; (8007458 <HAL_RCC_OscConfig+0x470>)
 8007440:	681b      	ldr	r3, [r3, #0]
 8007442:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8007446:	2b00      	cmp	r3, #0
 8007448:	d1f0      	bne.n	800742c <HAL_RCC_OscConfig+0x444>
 800744a:	e03d      	b.n	80074c8 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	699b      	ldr	r3, [r3, #24]
 8007450:	2b01      	cmp	r3, #1
 8007452:	d107      	bne.n	8007464 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8007454:	2301      	movs	r3, #1
 8007456:	e038      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
 8007458:	40023800 	.word	0x40023800
 800745c:	40007000 	.word	0x40007000
 8007460:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8007464:	4b1b      	ldr	r3, [pc, #108]	; (80074d4 <HAL_RCC_OscConfig+0x4ec>)
 8007466:	685b      	ldr	r3, [r3, #4]
 8007468:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800746a:	687b      	ldr	r3, [r7, #4]
 800746c:	699b      	ldr	r3, [r3, #24]
 800746e:	2b01      	cmp	r3, #1
 8007470:	d028      	beq.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8007472:	68fb      	ldr	r3, [r7, #12]
 8007474:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800747c:	429a      	cmp	r2, r3
 800747e:	d121      	bne.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8007480:	68fb      	ldr	r3, [r7, #12]
 8007482:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8007486:	687b      	ldr	r3, [r7, #4]
 8007488:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800748a:	429a      	cmp	r2, r3
 800748c:	d11a      	bne.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800748e:	68fa      	ldr	r2, [r7, #12]
 8007490:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8007494:	4013      	ands	r3, r2
 8007496:	687a      	ldr	r2, [r7, #4]
 8007498:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800749a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800749c:	4293      	cmp	r3, r2
 800749e:	d111      	bne.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074a0:	68fb      	ldr	r3, [r7, #12]
 80074a2:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80074aa:	085b      	lsrs	r3, r3, #1
 80074ac:	3b01      	subs	r3, #1
 80074ae:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80074b0:	429a      	cmp	r2, r3
 80074b2:	d107      	bne.n	80074c4 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 80074b4:	68fb      	ldr	r3, [r7, #12]
 80074b6:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 80074ba:	687b      	ldr	r3, [r7, #4]
 80074bc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80074be:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80074c0:	429a      	cmp	r2, r3
 80074c2:	d001      	beq.n	80074c8 <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 80074c4:	2301      	movs	r3, #1
 80074c6:	e000      	b.n	80074ca <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 80074c8:	2300      	movs	r3, #0
}
 80074ca:	4618      	mov	r0, r3
 80074cc:	3718      	adds	r7, #24
 80074ce:	46bd      	mov	sp, r7
 80074d0:	bd80      	pop	{r7, pc}
 80074d2:	bf00      	nop
 80074d4:	40023800 	.word	0x40023800

080074d8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80074d8:	b580      	push	{r7, lr}
 80074da:	b084      	sub	sp, #16
 80074dc:	af00      	add	r7, sp, #0
 80074de:	6078      	str	r0, [r7, #4]
 80074e0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2b00      	cmp	r3, #0
 80074e6:	d101      	bne.n	80074ec <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80074e8:	2301      	movs	r3, #1
 80074ea:	e0cc      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80074ec:	4b68      	ldr	r3, [pc, #416]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 80074ee:	681b      	ldr	r3, [r3, #0]
 80074f0:	f003 0307 	and.w	r3, r3, #7
 80074f4:	683a      	ldr	r2, [r7, #0]
 80074f6:	429a      	cmp	r2, r3
 80074f8:	d90c      	bls.n	8007514 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80074fa:	4b65      	ldr	r3, [pc, #404]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 80074fc:	683a      	ldr	r2, [r7, #0]
 80074fe:	b2d2      	uxtb	r2, r2
 8007500:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8007502:	4b63      	ldr	r3, [pc, #396]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	f003 0307 	and.w	r3, r3, #7
 800750a:	683a      	ldr	r2, [r7, #0]
 800750c:	429a      	cmp	r2, r3
 800750e:	d001      	beq.n	8007514 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8007510:	2301      	movs	r3, #1
 8007512:	e0b8      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8007514:	687b      	ldr	r3, [r7, #4]
 8007516:	681b      	ldr	r3, [r3, #0]
 8007518:	f003 0302 	and.w	r3, r3, #2
 800751c:	2b00      	cmp	r3, #0
 800751e:	d020      	beq.n	8007562 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007520:	687b      	ldr	r3, [r7, #4]
 8007522:	681b      	ldr	r3, [r3, #0]
 8007524:	f003 0304 	and.w	r3, r3, #4
 8007528:	2b00      	cmp	r3, #0
 800752a:	d005      	beq.n	8007538 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800752c:	4b59      	ldr	r3, [pc, #356]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800752e:	689b      	ldr	r3, [r3, #8]
 8007530:	4a58      	ldr	r2, [pc, #352]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007532:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8007536:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8007538:	687b      	ldr	r3, [r7, #4]
 800753a:	681b      	ldr	r3, [r3, #0]
 800753c:	f003 0308 	and.w	r3, r3, #8
 8007540:	2b00      	cmp	r3, #0
 8007542:	d005      	beq.n	8007550 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8007544:	4b53      	ldr	r3, [pc, #332]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007546:	689b      	ldr	r3, [r3, #8]
 8007548:	4a52      	ldr	r2, [pc, #328]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800754a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800754e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8007550:	4b50      	ldr	r3, [pc, #320]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007552:	689b      	ldr	r3, [r3, #8]
 8007554:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8007558:	687b      	ldr	r3, [r7, #4]
 800755a:	689b      	ldr	r3, [r3, #8]
 800755c:	494d      	ldr	r1, [pc, #308]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800755e:	4313      	orrs	r3, r2
 8007560:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8007562:	687b      	ldr	r3, [r7, #4]
 8007564:	681b      	ldr	r3, [r3, #0]
 8007566:	f003 0301 	and.w	r3, r3, #1
 800756a:	2b00      	cmp	r3, #0
 800756c:	d044      	beq.n	80075f8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	685b      	ldr	r3, [r3, #4]
 8007572:	2b01      	cmp	r3, #1
 8007574:	d107      	bne.n	8007586 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8007576:	4b47      	ldr	r3, [pc, #284]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007578:	681b      	ldr	r3, [r3, #0]
 800757a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800757e:	2b00      	cmp	r3, #0
 8007580:	d119      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8007582:	2301      	movs	r3, #1
 8007584:	e07f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007586:	687b      	ldr	r3, [r7, #4]
 8007588:	685b      	ldr	r3, [r3, #4]
 800758a:	2b02      	cmp	r3, #2
 800758c:	d003      	beq.n	8007596 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800758e:	687b      	ldr	r3, [r7, #4]
 8007590:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8007592:	2b03      	cmp	r3, #3
 8007594:	d107      	bne.n	80075a6 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8007596:	4b3f      	ldr	r3, [pc, #252]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007598:	681b      	ldr	r3, [r3, #0]
 800759a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800759e:	2b00      	cmp	r3, #0
 80075a0:	d109      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075a2:	2301      	movs	r3, #1
 80075a4:	e06f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80075a6:	4b3b      	ldr	r3, [pc, #236]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	f003 0302 	and.w	r3, r3, #2
 80075ae:	2b00      	cmp	r3, #0
 80075b0:	d101      	bne.n	80075b6 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80075b2:	2301      	movs	r3, #1
 80075b4:	e067      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80075b6:	4b37      	ldr	r3, [pc, #220]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075b8:	689b      	ldr	r3, [r3, #8]
 80075ba:	f023 0203 	bic.w	r2, r3, #3
 80075be:	687b      	ldr	r3, [r7, #4]
 80075c0:	685b      	ldr	r3, [r3, #4]
 80075c2:	4934      	ldr	r1, [pc, #208]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075c4:	4313      	orrs	r3, r2
 80075c6:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 80075c8:	f7fe fe54 	bl	8006274 <HAL_GetTick>
 80075cc:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075ce:	e00a      	b.n	80075e6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80075d0:	f7fe fe50 	bl	8006274 <HAL_GetTick>
 80075d4:	4602      	mov	r2, r0
 80075d6:	68fb      	ldr	r3, [r7, #12]
 80075d8:	1ad3      	subs	r3, r2, r3
 80075da:	f241 3288 	movw	r2, #5000	; 0x1388
 80075de:	4293      	cmp	r3, r2
 80075e0:	d901      	bls.n	80075e6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80075e2:	2303      	movs	r3, #3
 80075e4:	e04f      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80075e6:	4b2b      	ldr	r3, [pc, #172]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 80075e8:	689b      	ldr	r3, [r3, #8]
 80075ea:	f003 020c 	and.w	r2, r3, #12
 80075ee:	687b      	ldr	r3, [r7, #4]
 80075f0:	685b      	ldr	r3, [r3, #4]
 80075f2:	009b      	lsls	r3, r3, #2
 80075f4:	429a      	cmp	r2, r3
 80075f6:	d1eb      	bne.n	80075d0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80075f8:	4b25      	ldr	r3, [pc, #148]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 80075fa:	681b      	ldr	r3, [r3, #0]
 80075fc:	f003 0307 	and.w	r3, r3, #7
 8007600:	683a      	ldr	r2, [r7, #0]
 8007602:	429a      	cmp	r2, r3
 8007604:	d20c      	bcs.n	8007620 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8007606:	4b22      	ldr	r3, [pc, #136]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 8007608:	683a      	ldr	r2, [r7, #0]
 800760a:	b2d2      	uxtb	r2, r2
 800760c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800760e:	4b20      	ldr	r3, [pc, #128]	; (8007690 <HAL_RCC_ClockConfig+0x1b8>)
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	f003 0307 	and.w	r3, r3, #7
 8007616:	683a      	ldr	r2, [r7, #0]
 8007618:	429a      	cmp	r2, r3
 800761a:	d001      	beq.n	8007620 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800761c:	2301      	movs	r3, #1
 800761e:	e032      	b.n	8007686 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8007620:	687b      	ldr	r3, [r7, #4]
 8007622:	681b      	ldr	r3, [r3, #0]
 8007624:	f003 0304 	and.w	r3, r3, #4
 8007628:	2b00      	cmp	r3, #0
 800762a:	d008      	beq.n	800763e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800762c:	4b19      	ldr	r3, [pc, #100]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800762e:	689b      	ldr	r3, [r3, #8]
 8007630:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	68db      	ldr	r3, [r3, #12]
 8007638:	4916      	ldr	r1, [pc, #88]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800763a:	4313      	orrs	r3, r2
 800763c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	f003 0308 	and.w	r3, r3, #8
 8007646:	2b00      	cmp	r3, #0
 8007648:	d009      	beq.n	800765e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800764a:	4b12      	ldr	r3, [pc, #72]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800764c:	689b      	ldr	r3, [r3, #8]
 800764e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8007652:	687b      	ldr	r3, [r7, #4]
 8007654:	691b      	ldr	r3, [r3, #16]
 8007656:	00db      	lsls	r3, r3, #3
 8007658:	490e      	ldr	r1, [pc, #56]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 800765a:	4313      	orrs	r3, r2
 800765c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800765e:	f000 f821 	bl	80076a4 <HAL_RCC_GetSysClockFreq>
 8007662:	4602      	mov	r2, r0
 8007664:	4b0b      	ldr	r3, [pc, #44]	; (8007694 <HAL_RCC_ClockConfig+0x1bc>)
 8007666:	689b      	ldr	r3, [r3, #8]
 8007668:	091b      	lsrs	r3, r3, #4
 800766a:	f003 030f 	and.w	r3, r3, #15
 800766e:	490a      	ldr	r1, [pc, #40]	; (8007698 <HAL_RCC_ClockConfig+0x1c0>)
 8007670:	5ccb      	ldrb	r3, [r1, r3]
 8007672:	fa22 f303 	lsr.w	r3, r2, r3
 8007676:	4a09      	ldr	r2, [pc, #36]	; (800769c <HAL_RCC_ClockConfig+0x1c4>)
 8007678:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800767a:	4b09      	ldr	r3, [pc, #36]	; (80076a0 <HAL_RCC_ClockConfig+0x1c8>)
 800767c:	681b      	ldr	r3, [r3, #0]
 800767e:	4618      	mov	r0, r3
 8007680:	f7fe fdb4 	bl	80061ec <HAL_InitTick>

  return HAL_OK;
 8007684:	2300      	movs	r3, #0
}
 8007686:	4618      	mov	r0, r3
 8007688:	3710      	adds	r7, #16
 800768a:	46bd      	mov	sp, r7
 800768c:	bd80      	pop	{r7, pc}
 800768e:	bf00      	nop
 8007690:	40023c00 	.word	0x40023c00
 8007694:	40023800 	.word	0x40023800
 8007698:	0800df64 	.word	0x0800df64
 800769c:	20000010 	.word	0x20000010
 80076a0:	20000014 	.word	0x20000014

080076a4 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80076a4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80076a8:	b090      	sub	sp, #64	; 0x40
 80076aa:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 80076ac:	2300      	movs	r3, #0
 80076ae:	637b      	str	r3, [r7, #52]	; 0x34
 80076b0:	2300      	movs	r3, #0
 80076b2:	63fb      	str	r3, [r7, #60]	; 0x3c
 80076b4:	2300      	movs	r3, #0
 80076b6:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 80076b8:	2300      	movs	r3, #0
 80076ba:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 80076bc:	4b59      	ldr	r3, [pc, #356]	; (8007824 <HAL_RCC_GetSysClockFreq+0x180>)
 80076be:	689b      	ldr	r3, [r3, #8]
 80076c0:	f003 030c 	and.w	r3, r3, #12
 80076c4:	2b08      	cmp	r3, #8
 80076c6:	d00d      	beq.n	80076e4 <HAL_RCC_GetSysClockFreq+0x40>
 80076c8:	2b08      	cmp	r3, #8
 80076ca:	f200 80a1 	bhi.w	8007810 <HAL_RCC_GetSysClockFreq+0x16c>
 80076ce:	2b00      	cmp	r3, #0
 80076d0:	d002      	beq.n	80076d8 <HAL_RCC_GetSysClockFreq+0x34>
 80076d2:	2b04      	cmp	r3, #4
 80076d4:	d003      	beq.n	80076de <HAL_RCC_GetSysClockFreq+0x3a>
 80076d6:	e09b      	b.n	8007810 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80076d8:	4b53      	ldr	r3, [pc, #332]	; (8007828 <HAL_RCC_GetSysClockFreq+0x184>)
 80076da:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80076dc:	e09b      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80076de:	4b53      	ldr	r3, [pc, #332]	; (800782c <HAL_RCC_GetSysClockFreq+0x188>)
 80076e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80076e2:	e098      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80076e4:	4b4f      	ldr	r3, [pc, #316]	; (8007824 <HAL_RCC_GetSysClockFreq+0x180>)
 80076e6:	685b      	ldr	r3, [r3, #4]
 80076e8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80076ec:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80076ee:	4b4d      	ldr	r3, [pc, #308]	; (8007824 <HAL_RCC_GetSysClockFreq+0x180>)
 80076f0:	685b      	ldr	r3, [r3, #4]
 80076f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80076f6:	2b00      	cmp	r3, #0
 80076f8:	d028      	beq.n	800774c <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80076fa:	4b4a      	ldr	r3, [pc, #296]	; (8007824 <HAL_RCC_GetSysClockFreq+0x180>)
 80076fc:	685b      	ldr	r3, [r3, #4]
 80076fe:	099b      	lsrs	r3, r3, #6
 8007700:	2200      	movs	r2, #0
 8007702:	623b      	str	r3, [r7, #32]
 8007704:	627a      	str	r2, [r7, #36]	; 0x24
 8007706:	6a3b      	ldr	r3, [r7, #32]
 8007708:	f3c3 0008 	ubfx	r0, r3, #0, #9
 800770c:	2100      	movs	r1, #0
 800770e:	4b47      	ldr	r3, [pc, #284]	; (800782c <HAL_RCC_GetSysClockFreq+0x188>)
 8007710:	fb03 f201 	mul.w	r2, r3, r1
 8007714:	2300      	movs	r3, #0
 8007716:	fb00 f303 	mul.w	r3, r0, r3
 800771a:	4413      	add	r3, r2
 800771c:	4a43      	ldr	r2, [pc, #268]	; (800782c <HAL_RCC_GetSysClockFreq+0x188>)
 800771e:	fba0 1202 	umull	r1, r2, r0, r2
 8007722:	62fa      	str	r2, [r7, #44]	; 0x2c
 8007724:	460a      	mov	r2, r1
 8007726:	62ba      	str	r2, [r7, #40]	; 0x28
 8007728:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800772a:	4413      	add	r3, r2
 800772c:	62fb      	str	r3, [r7, #44]	; 0x2c
 800772e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007730:	2200      	movs	r2, #0
 8007732:	61bb      	str	r3, [r7, #24]
 8007734:	61fa      	str	r2, [r7, #28]
 8007736:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800773a:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 800773e:	f7f9 faa3 	bl	8000c88 <__aeabi_uldivmod>
 8007742:	4602      	mov	r2, r0
 8007744:	460b      	mov	r3, r1
 8007746:	4613      	mov	r3, r2
 8007748:	63fb      	str	r3, [r7, #60]	; 0x3c
 800774a:	e053      	b.n	80077f4 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800774c:	4b35      	ldr	r3, [pc, #212]	; (8007824 <HAL_RCC_GetSysClockFreq+0x180>)
 800774e:	685b      	ldr	r3, [r3, #4]
 8007750:	099b      	lsrs	r3, r3, #6
 8007752:	2200      	movs	r2, #0
 8007754:	613b      	str	r3, [r7, #16]
 8007756:	617a      	str	r2, [r7, #20]
 8007758:	693b      	ldr	r3, [r7, #16]
 800775a:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 800775e:	f04f 0b00 	mov.w	fp, #0
 8007762:	4652      	mov	r2, sl
 8007764:	465b      	mov	r3, fp
 8007766:	f04f 0000 	mov.w	r0, #0
 800776a:	f04f 0100 	mov.w	r1, #0
 800776e:	0159      	lsls	r1, r3, #5
 8007770:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8007774:	0150      	lsls	r0, r2, #5
 8007776:	4602      	mov	r2, r0
 8007778:	460b      	mov	r3, r1
 800777a:	ebb2 080a 	subs.w	r8, r2, sl
 800777e:	eb63 090b 	sbc.w	r9, r3, fp
 8007782:	f04f 0200 	mov.w	r2, #0
 8007786:	f04f 0300 	mov.w	r3, #0
 800778a:	ea4f 1389 	mov.w	r3, r9, lsl #6
 800778e:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8007792:	ea4f 1288 	mov.w	r2, r8, lsl #6
 8007796:	ebb2 0408 	subs.w	r4, r2, r8
 800779a:	eb63 0509 	sbc.w	r5, r3, r9
 800779e:	f04f 0200 	mov.w	r2, #0
 80077a2:	f04f 0300 	mov.w	r3, #0
 80077a6:	00eb      	lsls	r3, r5, #3
 80077a8:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80077ac:	00e2      	lsls	r2, r4, #3
 80077ae:	4614      	mov	r4, r2
 80077b0:	461d      	mov	r5, r3
 80077b2:	eb14 030a 	adds.w	r3, r4, sl
 80077b6:	603b      	str	r3, [r7, #0]
 80077b8:	eb45 030b 	adc.w	r3, r5, fp
 80077bc:	607b      	str	r3, [r7, #4]
 80077be:	f04f 0200 	mov.w	r2, #0
 80077c2:	f04f 0300 	mov.w	r3, #0
 80077c6:	e9d7 4500 	ldrd	r4, r5, [r7]
 80077ca:	4629      	mov	r1, r5
 80077cc:	028b      	lsls	r3, r1, #10
 80077ce:	4621      	mov	r1, r4
 80077d0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80077d4:	4621      	mov	r1, r4
 80077d6:	028a      	lsls	r2, r1, #10
 80077d8:	4610      	mov	r0, r2
 80077da:	4619      	mov	r1, r3
 80077dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80077de:	2200      	movs	r2, #0
 80077e0:	60bb      	str	r3, [r7, #8]
 80077e2:	60fa      	str	r2, [r7, #12]
 80077e4:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80077e8:	f7f9 fa4e 	bl	8000c88 <__aeabi_uldivmod>
 80077ec:	4602      	mov	r2, r0
 80077ee:	460b      	mov	r3, r1
 80077f0:	4613      	mov	r3, r2
 80077f2:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80077f4:	4b0b      	ldr	r3, [pc, #44]	; (8007824 <HAL_RCC_GetSysClockFreq+0x180>)
 80077f6:	685b      	ldr	r3, [r3, #4]
 80077f8:	0c1b      	lsrs	r3, r3, #16
 80077fa:	f003 0303 	and.w	r3, r3, #3
 80077fe:	3301      	adds	r3, #1
 8007800:	005b      	lsls	r3, r3, #1
 8007802:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 8007804:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8007806:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007808:	fbb2 f3f3 	udiv	r3, r2, r3
 800780c:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 800780e:	e002      	b.n	8007816 <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007810:	4b05      	ldr	r3, [pc, #20]	; (8007828 <HAL_RCC_GetSysClockFreq+0x184>)
 8007812:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 8007814:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007816:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 8007818:	4618      	mov	r0, r3
 800781a:	3740      	adds	r7, #64	; 0x40
 800781c:	46bd      	mov	sp, r7
 800781e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8007822:	bf00      	nop
 8007824:	40023800 	.word	0x40023800
 8007828:	00f42400 	.word	0x00f42400
 800782c:	00b71b00 	.word	0x00b71b00

08007830 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007830:	b480      	push	{r7}
 8007832:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007834:	4b03      	ldr	r3, [pc, #12]	; (8007844 <HAL_RCC_GetHCLKFreq+0x14>)
 8007836:	681b      	ldr	r3, [r3, #0]
}
 8007838:	4618      	mov	r0, r3
 800783a:	46bd      	mov	sp, r7
 800783c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007840:	4770      	bx	lr
 8007842:	bf00      	nop
 8007844:	20000010 	.word	0x20000010

08007848 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800784c:	f7ff fff0 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 8007850:	4602      	mov	r2, r0
 8007852:	4b05      	ldr	r3, [pc, #20]	; (8007868 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007854:	689b      	ldr	r3, [r3, #8]
 8007856:	0a9b      	lsrs	r3, r3, #10
 8007858:	f003 0307 	and.w	r3, r3, #7
 800785c:	4903      	ldr	r1, [pc, #12]	; (800786c <HAL_RCC_GetPCLK1Freq+0x24>)
 800785e:	5ccb      	ldrb	r3, [r1, r3]
 8007860:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007864:	4618      	mov	r0, r3
 8007866:	bd80      	pop	{r7, pc}
 8007868:	40023800 	.word	0x40023800
 800786c:	0800df74 	.word	0x0800df74

08007870 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007870:	b580      	push	{r7, lr}
 8007872:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007874:	f7ff ffdc 	bl	8007830 <HAL_RCC_GetHCLKFreq>
 8007878:	4602      	mov	r2, r0
 800787a:	4b05      	ldr	r3, [pc, #20]	; (8007890 <HAL_RCC_GetPCLK2Freq+0x20>)
 800787c:	689b      	ldr	r3, [r3, #8]
 800787e:	0b5b      	lsrs	r3, r3, #13
 8007880:	f003 0307 	and.w	r3, r3, #7
 8007884:	4903      	ldr	r1, [pc, #12]	; (8007894 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007886:	5ccb      	ldrb	r3, [r1, r3]
 8007888:	fa22 f303 	lsr.w	r3, r2, r3
}
 800788c:	4618      	mov	r0, r3
 800788e:	bd80      	pop	{r7, pc}
 8007890:	40023800 	.word	0x40023800
 8007894:	0800df74 	.word	0x0800df74

08007898 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007898:	b580      	push	{r7, lr}
 800789a:	b082      	sub	sp, #8
 800789c:	af00      	add	r7, sp, #0
 800789e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80078a0:	687b      	ldr	r3, [r7, #4]
 80078a2:	2b00      	cmp	r3, #0
 80078a4:	d101      	bne.n	80078aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80078a6:	2301      	movs	r3, #1
 80078a8:	e041      	b.n	800792e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80078aa:	687b      	ldr	r3, [r7, #4]
 80078ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078b0:	b2db      	uxtb	r3, r3
 80078b2:	2b00      	cmp	r3, #0
 80078b4:	d106      	bne.n	80078c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80078b6:	687b      	ldr	r3, [r7, #4]
 80078b8:	2200      	movs	r2, #0
 80078ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80078be:	6878      	ldr	r0, [r7, #4]
 80078c0:	f7fe f9c8 	bl	8005c54 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	2202      	movs	r2, #2
 80078c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80078cc:	687b      	ldr	r3, [r7, #4]
 80078ce:	681a      	ldr	r2, [r3, #0]
 80078d0:	687b      	ldr	r3, [r7, #4]
 80078d2:	3304      	adds	r3, #4
 80078d4:	4619      	mov	r1, r3
 80078d6:	4610      	mov	r0, r2
 80078d8:	f000 fbba 	bl	8008050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80078dc:	687b      	ldr	r3, [r7, #4]
 80078de:	2201      	movs	r2, #1
 80078e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	2201      	movs	r2, #1
 80078e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	2201      	movs	r2, #1
 80078f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80078f4:	687b      	ldr	r3, [r7, #4]
 80078f6:	2201      	movs	r2, #1
 80078f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80078fc:	687b      	ldr	r3, [r7, #4]
 80078fe:	2201      	movs	r2, #1
 8007900:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007904:	687b      	ldr	r3, [r7, #4]
 8007906:	2201      	movs	r2, #1
 8007908:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800790c:	687b      	ldr	r3, [r7, #4]
 800790e:	2201      	movs	r2, #1
 8007910:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	2201      	movs	r2, #1
 8007918:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800791c:	687b      	ldr	r3, [r7, #4]
 800791e:	2201      	movs	r2, #1
 8007920:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	2201      	movs	r2, #1
 8007928:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800792c:	2300      	movs	r3, #0
}
 800792e:	4618      	mov	r0, r3
 8007930:	3708      	adds	r7, #8
 8007932:	46bd      	mov	sp, r7
 8007934:	bd80      	pop	{r7, pc}
	...

08007938 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8007938:	b480      	push	{r7}
 800793a:	b085      	sub	sp, #20
 800793c:	af00      	add	r7, sp, #0
 800793e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007946:	b2db      	uxtb	r3, r3
 8007948:	2b01      	cmp	r3, #1
 800794a:	d001      	beq.n	8007950 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800794c:	2301      	movs	r3, #1
 800794e:	e04e      	b.n	80079ee <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007950:	687b      	ldr	r3, [r7, #4]
 8007952:	2202      	movs	r2, #2
 8007954:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007958:	687b      	ldr	r3, [r7, #4]
 800795a:	681b      	ldr	r3, [r3, #0]
 800795c:	68da      	ldr	r2, [r3, #12]
 800795e:	687b      	ldr	r3, [r7, #4]
 8007960:	681b      	ldr	r3, [r3, #0]
 8007962:	f042 0201 	orr.w	r2, r2, #1
 8007966:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007968:	687b      	ldr	r3, [r7, #4]
 800796a:	681b      	ldr	r3, [r3, #0]
 800796c:	4a23      	ldr	r2, [pc, #140]	; (80079fc <HAL_TIM_Base_Start_IT+0xc4>)
 800796e:	4293      	cmp	r3, r2
 8007970:	d022      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x80>
 8007972:	687b      	ldr	r3, [r7, #4]
 8007974:	681b      	ldr	r3, [r3, #0]
 8007976:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800797a:	d01d      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x80>
 800797c:	687b      	ldr	r3, [r7, #4]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	4a1f      	ldr	r2, [pc, #124]	; (8007a00 <HAL_TIM_Base_Start_IT+0xc8>)
 8007982:	4293      	cmp	r3, r2
 8007984:	d018      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x80>
 8007986:	687b      	ldr	r3, [r7, #4]
 8007988:	681b      	ldr	r3, [r3, #0]
 800798a:	4a1e      	ldr	r2, [pc, #120]	; (8007a04 <HAL_TIM_Base_Start_IT+0xcc>)
 800798c:	4293      	cmp	r3, r2
 800798e:	d013      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x80>
 8007990:	687b      	ldr	r3, [r7, #4]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	4a1c      	ldr	r2, [pc, #112]	; (8007a08 <HAL_TIM_Base_Start_IT+0xd0>)
 8007996:	4293      	cmp	r3, r2
 8007998:	d00e      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x80>
 800799a:	687b      	ldr	r3, [r7, #4]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	4a1b      	ldr	r2, [pc, #108]	; (8007a0c <HAL_TIM_Base_Start_IT+0xd4>)
 80079a0:	4293      	cmp	r3, r2
 80079a2:	d009      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x80>
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	681b      	ldr	r3, [r3, #0]
 80079a8:	4a19      	ldr	r2, [pc, #100]	; (8007a10 <HAL_TIM_Base_Start_IT+0xd8>)
 80079aa:	4293      	cmp	r3, r2
 80079ac:	d004      	beq.n	80079b8 <HAL_TIM_Base_Start_IT+0x80>
 80079ae:	687b      	ldr	r3, [r7, #4]
 80079b0:	681b      	ldr	r3, [r3, #0]
 80079b2:	4a18      	ldr	r2, [pc, #96]	; (8007a14 <HAL_TIM_Base_Start_IT+0xdc>)
 80079b4:	4293      	cmp	r3, r2
 80079b6:	d111      	bne.n	80079dc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80079b8:	687b      	ldr	r3, [r7, #4]
 80079ba:	681b      	ldr	r3, [r3, #0]
 80079bc:	689b      	ldr	r3, [r3, #8]
 80079be:	f003 0307 	and.w	r3, r3, #7
 80079c2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079c4:	68fb      	ldr	r3, [r7, #12]
 80079c6:	2b06      	cmp	r3, #6
 80079c8:	d010      	beq.n	80079ec <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 80079ca:	687b      	ldr	r3, [r7, #4]
 80079cc:	681b      	ldr	r3, [r3, #0]
 80079ce:	681a      	ldr	r2, [r3, #0]
 80079d0:	687b      	ldr	r3, [r7, #4]
 80079d2:	681b      	ldr	r3, [r3, #0]
 80079d4:	f042 0201 	orr.w	r2, r2, #1
 80079d8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80079da:	e007      	b.n	80079ec <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	681a      	ldr	r2, [r3, #0]
 80079e2:	687b      	ldr	r3, [r7, #4]
 80079e4:	681b      	ldr	r3, [r3, #0]
 80079e6:	f042 0201 	orr.w	r2, r2, #1
 80079ea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80079ec:	2300      	movs	r3, #0
}
 80079ee:	4618      	mov	r0, r3
 80079f0:	3714      	adds	r7, #20
 80079f2:	46bd      	mov	sp, r7
 80079f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80079f8:	4770      	bx	lr
 80079fa:	bf00      	nop
 80079fc:	40010000 	.word	0x40010000
 8007a00:	40000400 	.word	0x40000400
 8007a04:	40000800 	.word	0x40000800
 8007a08:	40000c00 	.word	0x40000c00
 8007a0c:	40010400 	.word	0x40010400
 8007a10:	40014000 	.word	0x40014000
 8007a14:	40001800 	.word	0x40001800

08007a18 <HAL_TIM_Base_Stop_IT>:
  * @brief  Stops the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop_IT(TIM_HandleTypeDef *htim)
{
 8007a18:	b480      	push	{r7}
 8007a1a:	b083      	sub	sp, #12
 8007a1c:	af00      	add	r7, sp, #0
 8007a1e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the TIM Update interrupt */
  __HAL_TIM_DISABLE_IT(htim, TIM_IT_UPDATE);
 8007a20:	687b      	ldr	r3, [r7, #4]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	68da      	ldr	r2, [r3, #12]
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	f022 0201 	bic.w	r2, r2, #1
 8007a2e:	60da      	str	r2, [r3, #12]

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8007a30:	687b      	ldr	r3, [r7, #4]
 8007a32:	681b      	ldr	r3, [r3, #0]
 8007a34:	6a1a      	ldr	r2, [r3, #32]
 8007a36:	f241 1311 	movw	r3, #4369	; 0x1111
 8007a3a:	4013      	ands	r3, r2
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d10f      	bne.n	8007a60 <HAL_TIM_Base_Stop_IT+0x48>
 8007a40:	687b      	ldr	r3, [r7, #4]
 8007a42:	681b      	ldr	r3, [r3, #0]
 8007a44:	6a1a      	ldr	r2, [r3, #32]
 8007a46:	f240 4344 	movw	r3, #1092	; 0x444
 8007a4a:	4013      	ands	r3, r2
 8007a4c:	2b00      	cmp	r3, #0
 8007a4e:	d107      	bne.n	8007a60 <HAL_TIM_Base_Stop_IT+0x48>
 8007a50:	687b      	ldr	r3, [r7, #4]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	681a      	ldr	r2, [r3, #0]
 8007a56:	687b      	ldr	r3, [r7, #4]
 8007a58:	681b      	ldr	r3, [r3, #0]
 8007a5a:	f022 0201 	bic.w	r2, r2, #1
 8007a5e:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8007a60:	687b      	ldr	r3, [r7, #4]
 8007a62:	2201      	movs	r2, #1
 8007a64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8007a68:	2300      	movs	r3, #0
}
 8007a6a:	4618      	mov	r0, r3
 8007a6c:	370c      	adds	r7, #12
 8007a6e:	46bd      	mov	sp, r7
 8007a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007a74:	4770      	bx	lr

08007a76 <HAL_TIM_IC_Init>:
  *         Ex: call @ref HAL_TIM_IC_DeInit() before HAL_TIM_IC_Init()
  * @param  htim TIM Input Capture handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_Init(TIM_HandleTypeDef *htim)
{
 8007a76:	b580      	push	{r7, lr}
 8007a78:	b082      	sub	sp, #8
 8007a7a:	af00      	add	r7, sp, #0
 8007a7c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007a7e:	687b      	ldr	r3, [r7, #4]
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d101      	bne.n	8007a88 <HAL_TIM_IC_Init+0x12>
  {
    return HAL_ERROR;
 8007a84:	2301      	movs	r3, #1
 8007a86:	e041      	b.n	8007b0c <HAL_TIM_IC_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007a88:	687b      	ldr	r3, [r7, #4]
 8007a8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007a8e:	b2db      	uxtb	r3, r3
 8007a90:	2b00      	cmp	r3, #0
 8007a92:	d106      	bne.n	8007aa2 <HAL_TIM_IC_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	2200      	movs	r2, #0
 8007a98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->IC_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_IC_MspInit(htim);
 8007a9c:	6878      	ldr	r0, [r7, #4]
 8007a9e:	f000 f839 	bl	8007b14 <HAL_TIM_IC_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007aa2:	687b      	ldr	r3, [r7, #4]
 8007aa4:	2202      	movs	r2, #2
 8007aa6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the input capture */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8007aaa:	687b      	ldr	r3, [r7, #4]
 8007aac:	681a      	ldr	r2, [r3, #0]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	3304      	adds	r3, #4
 8007ab2:	4619      	mov	r1, r3
 8007ab4:	4610      	mov	r0, r2
 8007ab6:	f000 facb 	bl	8008050 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	2201      	movs	r2, #1
 8007abe:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ac2:	687b      	ldr	r3, [r7, #4]
 8007ac4:	2201      	movs	r2, #1
 8007ac6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007aca:	687b      	ldr	r3, [r7, #4]
 8007acc:	2201      	movs	r2, #1
 8007ace:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007ad2:	687b      	ldr	r3, [r7, #4]
 8007ad4:	2201      	movs	r2, #1
 8007ad6:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	2201      	movs	r2, #1
 8007ade:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007ae2:	687b      	ldr	r3, [r7, #4]
 8007ae4:	2201      	movs	r2, #1
 8007ae6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007aea:	687b      	ldr	r3, [r7, #4]
 8007aec:	2201      	movs	r2, #1
 8007aee:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007af2:	687b      	ldr	r3, [r7, #4]
 8007af4:	2201      	movs	r2, #1
 8007af6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	2201      	movs	r2, #1
 8007afe:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007b02:	687b      	ldr	r3, [r7, #4]
 8007b04:	2201      	movs	r2, #1
 8007b06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007b0a:	2300      	movs	r3, #0
}
 8007b0c:	4618      	mov	r0, r3
 8007b0e:	3708      	adds	r7, #8
 8007b10:	46bd      	mov	sp, r7
 8007b12:	bd80      	pop	{r7, pc}

08007b14 <HAL_TIM_IC_MspInit>:
  * @brief  Initializes the TIM Input Capture MSP.
  * @param  htim TIM Input Capture handle
  * @retval None
  */
__weak void HAL_TIM_IC_MspInit(TIM_HandleTypeDef *htim)
{
 8007b14:	b480      	push	{r7}
 8007b16:	b083      	sub	sp, #12
 8007b18:	af00      	add	r7, sp, #0
 8007b1a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_MspInit could be implemented in the user file
   */
}
 8007b1c:	bf00      	nop
 8007b1e:	370c      	adds	r7, #12
 8007b20:	46bd      	mov	sp, r7
 8007b22:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b26:	4770      	bx	lr

08007b28 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007b28:	b580      	push	{r7, lr}
 8007b2a:	b082      	sub	sp, #8
 8007b2c:	af00      	add	r7, sp, #0
 8007b2e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007b30:	687b      	ldr	r3, [r7, #4]
 8007b32:	681b      	ldr	r3, [r3, #0]
 8007b34:	691b      	ldr	r3, [r3, #16]
 8007b36:	f003 0302 	and.w	r3, r3, #2
 8007b3a:	2b02      	cmp	r3, #2
 8007b3c:	d122      	bne.n	8007b84 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007b3e:	687b      	ldr	r3, [r7, #4]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	68db      	ldr	r3, [r3, #12]
 8007b44:	f003 0302 	and.w	r3, r3, #2
 8007b48:	2b02      	cmp	r3, #2
 8007b4a:	d11b      	bne.n	8007b84 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	f06f 0202 	mvn.w	r2, #2
 8007b54:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007b56:	687b      	ldr	r3, [r7, #4]
 8007b58:	2201      	movs	r2, #1
 8007b5a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007b5c:	687b      	ldr	r3, [r7, #4]
 8007b5e:	681b      	ldr	r3, [r3, #0]
 8007b60:	699b      	ldr	r3, [r3, #24]
 8007b62:	f003 0303 	and.w	r3, r3, #3
 8007b66:	2b00      	cmp	r3, #0
 8007b68:	d003      	beq.n	8007b72 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8007b6a:	6878      	ldr	r0, [r7, #4]
 8007b6c:	f000 fa51 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 8007b70:	e005      	b.n	8007b7e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007b72:	6878      	ldr	r0, [r7, #4]
 8007b74:	f000 fa43 	bl	8007ffe <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007b78:	6878      	ldr	r0, [r7, #4]
 8007b7a:	f000 fa54 	bl	8008026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	2200      	movs	r2, #0
 8007b82:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007b84:	687b      	ldr	r3, [r7, #4]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	691b      	ldr	r3, [r3, #16]
 8007b8a:	f003 0304 	and.w	r3, r3, #4
 8007b8e:	2b04      	cmp	r3, #4
 8007b90:	d122      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007b92:	687b      	ldr	r3, [r7, #4]
 8007b94:	681b      	ldr	r3, [r3, #0]
 8007b96:	68db      	ldr	r3, [r3, #12]
 8007b98:	f003 0304 	and.w	r3, r3, #4
 8007b9c:	2b04      	cmp	r3, #4
 8007b9e:	d11b      	bne.n	8007bd8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007ba0:	687b      	ldr	r3, [r7, #4]
 8007ba2:	681b      	ldr	r3, [r3, #0]
 8007ba4:	f06f 0204 	mvn.w	r2, #4
 8007ba8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	2202      	movs	r2, #2
 8007bae:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	681b      	ldr	r3, [r3, #0]
 8007bb4:	699b      	ldr	r3, [r3, #24]
 8007bb6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007bba:	2b00      	cmp	r3, #0
 8007bbc:	d003      	beq.n	8007bc6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007bbe:	6878      	ldr	r0, [r7, #4]
 8007bc0:	f000 fa27 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 8007bc4:	e005      	b.n	8007bd2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007bc6:	6878      	ldr	r0, [r7, #4]
 8007bc8:	f000 fa19 	bl	8007ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007bcc:	6878      	ldr	r0, [r7, #4]
 8007bce:	f000 fa2a 	bl	8008026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	2200      	movs	r2, #0
 8007bd6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8007bd8:	687b      	ldr	r3, [r7, #4]
 8007bda:	681b      	ldr	r3, [r3, #0]
 8007bdc:	691b      	ldr	r3, [r3, #16]
 8007bde:	f003 0308 	and.w	r3, r3, #8
 8007be2:	2b08      	cmp	r3, #8
 8007be4:	d122      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	681b      	ldr	r3, [r3, #0]
 8007bea:	68db      	ldr	r3, [r3, #12]
 8007bec:	f003 0308 	and.w	r3, r3, #8
 8007bf0:	2b08      	cmp	r3, #8
 8007bf2:	d11b      	bne.n	8007c2c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	f06f 0208 	mvn.w	r2, #8
 8007bfc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	2204      	movs	r2, #4
 8007c02:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007c04:	687b      	ldr	r3, [r7, #4]
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	69db      	ldr	r3, [r3, #28]
 8007c0a:	f003 0303 	and.w	r3, r3, #3
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	d003      	beq.n	8007c1a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c12:	6878      	ldr	r0, [r7, #4]
 8007c14:	f000 f9fd 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 8007c18:	e005      	b.n	8007c26 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c1a:	6878      	ldr	r0, [r7, #4]
 8007c1c:	f000 f9ef 	bl	8007ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c20:	6878      	ldr	r0, [r7, #4]
 8007c22:	f000 fa00 	bl	8008026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	2200      	movs	r2, #0
 8007c2a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007c2c:	687b      	ldr	r3, [r7, #4]
 8007c2e:	681b      	ldr	r3, [r3, #0]
 8007c30:	691b      	ldr	r3, [r3, #16]
 8007c32:	f003 0310 	and.w	r3, r3, #16
 8007c36:	2b10      	cmp	r3, #16
 8007c38:	d122      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8007c3a:	687b      	ldr	r3, [r7, #4]
 8007c3c:	681b      	ldr	r3, [r3, #0]
 8007c3e:	68db      	ldr	r3, [r3, #12]
 8007c40:	f003 0310 	and.w	r3, r3, #16
 8007c44:	2b10      	cmp	r3, #16
 8007c46:	d11b      	bne.n	8007c80 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f06f 0210 	mvn.w	r2, #16
 8007c50:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	2208      	movs	r2, #8
 8007c56:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	69db      	ldr	r3, [r3, #28]
 8007c5e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007c62:	2b00      	cmp	r3, #0
 8007c64:	d003      	beq.n	8007c6e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007c66:	6878      	ldr	r0, [r7, #4]
 8007c68:	f000 f9d3 	bl	8008012 <HAL_TIM_IC_CaptureCallback>
 8007c6c:	e005      	b.n	8007c7a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007c6e:	6878      	ldr	r0, [r7, #4]
 8007c70:	f000 f9c5 	bl	8007ffe <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007c74:	6878      	ldr	r0, [r7, #4]
 8007c76:	f000 f9d6 	bl	8008026 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007c7a:	687b      	ldr	r3, [r7, #4]
 8007c7c:	2200      	movs	r2, #0
 8007c7e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	691b      	ldr	r3, [r3, #16]
 8007c86:	f003 0301 	and.w	r3, r3, #1
 8007c8a:	2b01      	cmp	r3, #1
 8007c8c:	d10e      	bne.n	8007cac <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68db      	ldr	r3, [r3, #12]
 8007c94:	f003 0301 	and.w	r3, r3, #1
 8007c98:	2b01      	cmp	r3, #1
 8007c9a:	d107      	bne.n	8007cac <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	681b      	ldr	r3, [r3, #0]
 8007ca0:	f06f 0201 	mvn.w	r2, #1
 8007ca4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007ca6:	6878      	ldr	r0, [r7, #4]
 8007ca8:	f7fc ff28 	bl	8004afc <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	691b      	ldr	r3, [r3, #16]
 8007cb2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cb6:	2b80      	cmp	r3, #128	; 0x80
 8007cb8:	d10e      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8007cba:	687b      	ldr	r3, [r7, #4]
 8007cbc:	681b      	ldr	r3, [r3, #0]
 8007cbe:	68db      	ldr	r3, [r3, #12]
 8007cc0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007cc4:	2b80      	cmp	r3, #128	; 0x80
 8007cc6:	d107      	bne.n	8007cd8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8007cc8:	687b      	ldr	r3, [r7, #4]
 8007cca:	681b      	ldr	r3, [r3, #0]
 8007ccc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8007cd0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8007cd2:	6878      	ldr	r0, [r7, #4]
 8007cd4:	f000 fca6 	bl	8008624 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8007cd8:	687b      	ldr	r3, [r7, #4]
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	691b      	ldr	r3, [r3, #16]
 8007cde:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007ce2:	2b40      	cmp	r3, #64	; 0x40
 8007ce4:	d10e      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	68db      	ldr	r3, [r3, #12]
 8007cec:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007cf0:	2b40      	cmp	r3, #64	; 0x40
 8007cf2:	d107      	bne.n	8007d04 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007cfc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007cfe:	6878      	ldr	r0, [r7, #4]
 8007d00:	f000 f99b 	bl	800803a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007d04:	687b      	ldr	r3, [r7, #4]
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	691b      	ldr	r3, [r3, #16]
 8007d0a:	f003 0320 	and.w	r3, r3, #32
 8007d0e:	2b20      	cmp	r3, #32
 8007d10:	d10e      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	681b      	ldr	r3, [r3, #0]
 8007d16:	68db      	ldr	r3, [r3, #12]
 8007d18:	f003 0320 	and.w	r3, r3, #32
 8007d1c:	2b20      	cmp	r3, #32
 8007d1e:	d107      	bne.n	8007d30 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	681b      	ldr	r3, [r3, #0]
 8007d24:	f06f 0220 	mvn.w	r2, #32
 8007d28:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007d2a:	6878      	ldr	r0, [r7, #4]
 8007d2c:	f000 fc70 	bl	8008610 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007d30:	bf00      	nop
 8007d32:	3708      	adds	r7, #8
 8007d34:	46bd      	mov	sp, r7
 8007d36:	bd80      	pop	{r7, pc}

08007d38 <HAL_TIM_IC_ConfigChannel>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_IC_ConfigChannel(TIM_HandleTypeDef *htim, TIM_IC_InitTypeDef *sConfig, uint32_t Channel)
{
 8007d38:	b580      	push	{r7, lr}
 8007d3a:	b086      	sub	sp, #24
 8007d3c:	af00      	add	r7, sp, #0
 8007d3e:	60f8      	str	r0, [r7, #12]
 8007d40:	60b9      	str	r1, [r7, #8]
 8007d42:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8007d44:	2300      	movs	r3, #0
 8007d46:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_IC_SELECTION(sConfig->ICSelection));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->ICPrescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->ICFilter));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007d48:	68fb      	ldr	r3, [r7, #12]
 8007d4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007d4e:	2b01      	cmp	r3, #1
 8007d50:	d101      	bne.n	8007d56 <HAL_TIM_IC_ConfigChannel+0x1e>
 8007d52:	2302      	movs	r3, #2
 8007d54:	e088      	b.n	8007e68 <HAL_TIM_IC_ConfigChannel+0x130>
 8007d56:	68fb      	ldr	r3, [r7, #12]
 8007d58:	2201      	movs	r2, #1
 8007d5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  if (Channel == TIM_CHANNEL_1)
 8007d5e:	687b      	ldr	r3, [r7, #4]
 8007d60:	2b00      	cmp	r3, #0
 8007d62:	d11b      	bne.n	8007d9c <HAL_TIM_IC_ConfigChannel+0x64>
  {
    /* TI1 Configuration */
    TIM_TI1_SetConfig(htim->Instance,
 8007d64:	68fb      	ldr	r3, [r7, #12]
 8007d66:	6818      	ldr	r0, [r3, #0]
 8007d68:	68bb      	ldr	r3, [r7, #8]
 8007d6a:	6819      	ldr	r1, [r3, #0]
 8007d6c:	68bb      	ldr	r3, [r7, #8]
 8007d6e:	685a      	ldr	r2, [r3, #4]
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	68db      	ldr	r3, [r3, #12]
 8007d74:	f000 fa0c 	bl	8008190 <TIM_TI1_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC1PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC1PSC;
 8007d78:	68fb      	ldr	r3, [r7, #12]
 8007d7a:	681b      	ldr	r3, [r3, #0]
 8007d7c:	699a      	ldr	r2, [r3, #24]
 8007d7e:	68fb      	ldr	r3, [r7, #12]
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	f022 020c 	bic.w	r2, r2, #12
 8007d86:	619a      	str	r2, [r3, #24]

    /* Set the IC1PSC value */
    htim->Instance->CCMR1 |= sConfig->ICPrescaler;
 8007d88:	68fb      	ldr	r3, [r7, #12]
 8007d8a:	681b      	ldr	r3, [r3, #0]
 8007d8c:	6999      	ldr	r1, [r3, #24]
 8007d8e:	68bb      	ldr	r3, [r7, #8]
 8007d90:	689a      	ldr	r2, [r3, #8]
 8007d92:	68fb      	ldr	r3, [r7, #12]
 8007d94:	681b      	ldr	r3, [r3, #0]
 8007d96:	430a      	orrs	r2, r1
 8007d98:	619a      	str	r2, [r3, #24]
 8007d9a:	e060      	b.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_2)
 8007d9c:	687b      	ldr	r3, [r7, #4]
 8007d9e:	2b04      	cmp	r3, #4
 8007da0:	d11c      	bne.n	8007ddc <HAL_TIM_IC_ConfigChannel+0xa4>
  {
    /* TI2 Configuration */
    assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

    TIM_TI2_SetConfig(htim->Instance,
 8007da2:	68fb      	ldr	r3, [r7, #12]
 8007da4:	6818      	ldr	r0, [r3, #0]
 8007da6:	68bb      	ldr	r3, [r7, #8]
 8007da8:	6819      	ldr	r1, [r3, #0]
 8007daa:	68bb      	ldr	r3, [r7, #8]
 8007dac:	685a      	ldr	r2, [r3, #4]
 8007dae:	68bb      	ldr	r3, [r7, #8]
 8007db0:	68db      	ldr	r3, [r3, #12]
 8007db2:	f000 fa90 	bl	80082d6 <TIM_TI2_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC2PSC Bits */
    htim->Instance->CCMR1 &= ~TIM_CCMR1_IC2PSC;
 8007db6:	68fb      	ldr	r3, [r7, #12]
 8007db8:	681b      	ldr	r3, [r3, #0]
 8007dba:	699a      	ldr	r2, [r3, #24]
 8007dbc:	68fb      	ldr	r3, [r7, #12]
 8007dbe:	681b      	ldr	r3, [r3, #0]
 8007dc0:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007dc4:	619a      	str	r2, [r3, #24]

    /* Set the IC2PSC value */
    htim->Instance->CCMR1 |= (sConfig->ICPrescaler << 8U);
 8007dc6:	68fb      	ldr	r3, [r7, #12]
 8007dc8:	681b      	ldr	r3, [r3, #0]
 8007dca:	6999      	ldr	r1, [r3, #24]
 8007dcc:	68bb      	ldr	r3, [r7, #8]
 8007dce:	689b      	ldr	r3, [r3, #8]
 8007dd0:	021a      	lsls	r2, r3, #8
 8007dd2:	68fb      	ldr	r3, [r7, #12]
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	430a      	orrs	r2, r1
 8007dd8:	619a      	str	r2, [r3, #24]
 8007dda:	e040      	b.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_3)
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	2b08      	cmp	r3, #8
 8007de0:	d11b      	bne.n	8007e1a <HAL_TIM_IC_ConfigChannel+0xe2>
  {
    /* TI3 Configuration */
    assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

    TIM_TI3_SetConfig(htim->Instance,
 8007de2:	68fb      	ldr	r3, [r7, #12]
 8007de4:	6818      	ldr	r0, [r3, #0]
 8007de6:	68bb      	ldr	r3, [r7, #8]
 8007de8:	6819      	ldr	r1, [r3, #0]
 8007dea:	68bb      	ldr	r3, [r7, #8]
 8007dec:	685a      	ldr	r2, [r3, #4]
 8007dee:	68bb      	ldr	r3, [r7, #8]
 8007df0:	68db      	ldr	r3, [r3, #12]
 8007df2:	f000 fadd 	bl	80083b0 <TIM_TI3_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC3PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC3PSC;
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	69da      	ldr	r2, [r3, #28]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 020c 	bic.w	r2, r2, #12
 8007e04:	61da      	str	r2, [r3, #28]

    /* Set the IC3PSC value */
    htim->Instance->CCMR2 |= sConfig->ICPrescaler;
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	69d9      	ldr	r1, [r3, #28]
 8007e0c:	68bb      	ldr	r3, [r7, #8]
 8007e0e:	689a      	ldr	r2, [r3, #8]
 8007e10:	68fb      	ldr	r3, [r7, #12]
 8007e12:	681b      	ldr	r3, [r3, #0]
 8007e14:	430a      	orrs	r2, r1
 8007e16:	61da      	str	r2, [r3, #28]
 8007e18:	e021      	b.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else if (Channel == TIM_CHANNEL_4)
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	2b0c      	cmp	r3, #12
 8007e1e:	d11c      	bne.n	8007e5a <HAL_TIM_IC_ConfigChannel+0x122>
  {
    /* TI4 Configuration */
    assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

    TIM_TI4_SetConfig(htim->Instance,
 8007e20:	68fb      	ldr	r3, [r7, #12]
 8007e22:	6818      	ldr	r0, [r3, #0]
 8007e24:	68bb      	ldr	r3, [r7, #8]
 8007e26:	6819      	ldr	r1, [r3, #0]
 8007e28:	68bb      	ldr	r3, [r7, #8]
 8007e2a:	685a      	ldr	r2, [r3, #4]
 8007e2c:	68bb      	ldr	r3, [r7, #8]
 8007e2e:	68db      	ldr	r3, [r3, #12]
 8007e30:	f000 fafa 	bl	8008428 <TIM_TI4_SetConfig>
                      sConfig->ICPolarity,
                      sConfig->ICSelection,
                      sConfig->ICFilter);

    /* Reset the IC4PSC Bits */
    htim->Instance->CCMR2 &= ~TIM_CCMR2_IC4PSC;
 8007e34:	68fb      	ldr	r3, [r7, #12]
 8007e36:	681b      	ldr	r3, [r3, #0]
 8007e38:	69da      	ldr	r2, [r3, #28]
 8007e3a:	68fb      	ldr	r3, [r7, #12]
 8007e3c:	681b      	ldr	r3, [r3, #0]
 8007e3e:	f422 6240 	bic.w	r2, r2, #3072	; 0xc00
 8007e42:	61da      	str	r2, [r3, #28]

    /* Set the IC4PSC value */
    htim->Instance->CCMR2 |= (sConfig->ICPrescaler << 8U);
 8007e44:	68fb      	ldr	r3, [r7, #12]
 8007e46:	681b      	ldr	r3, [r3, #0]
 8007e48:	69d9      	ldr	r1, [r3, #28]
 8007e4a:	68bb      	ldr	r3, [r7, #8]
 8007e4c:	689b      	ldr	r3, [r3, #8]
 8007e4e:	021a      	lsls	r2, r3, #8
 8007e50:	68fb      	ldr	r3, [r7, #12]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	430a      	orrs	r2, r1
 8007e56:	61da      	str	r2, [r3, #28]
 8007e58:	e001      	b.n	8007e5e <HAL_TIM_IC_ConfigChannel+0x126>
  }
  else
  {
    status = HAL_ERROR;
 8007e5a:	2301      	movs	r3, #1
 8007e5c:	75fb      	strb	r3, [r7, #23]
  }

  __HAL_UNLOCK(htim);
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007e66:	7dfb      	ldrb	r3, [r7, #23]
}
 8007e68:	4618      	mov	r0, r3
 8007e6a:	3718      	adds	r7, #24
 8007e6c:	46bd      	mov	sp, r7
 8007e6e:	bd80      	pop	{r7, pc}

08007e70 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007e70:	b580      	push	{r7, lr}
 8007e72:	b084      	sub	sp, #16
 8007e74:	af00      	add	r7, sp, #0
 8007e76:	6078      	str	r0, [r7, #4]
 8007e78:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8007e7a:	2300      	movs	r3, #0
 8007e7c:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007e7e:	687b      	ldr	r3, [r7, #4]
 8007e80:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007e84:	2b01      	cmp	r3, #1
 8007e86:	d101      	bne.n	8007e8c <HAL_TIM_ConfigClockSource+0x1c>
 8007e88:	2302      	movs	r3, #2
 8007e8a:	e0b4      	b.n	8007ff6 <HAL_TIM_ConfigClockSource+0x186>
 8007e8c:	687b      	ldr	r3, [r7, #4]
 8007e8e:	2201      	movs	r2, #1
 8007e90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007e94:	687b      	ldr	r3, [r7, #4]
 8007e96:	2202      	movs	r2, #2
 8007e98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007e9c:	687b      	ldr	r3, [r7, #4]
 8007e9e:	681b      	ldr	r3, [r3, #0]
 8007ea0:	689b      	ldr	r3, [r3, #8]
 8007ea2:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ea4:	68bb      	ldr	r3, [r7, #8]
 8007ea6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007eaa:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007eac:	68bb      	ldr	r3, [r7, #8]
 8007eae:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007eb2:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	681b      	ldr	r3, [r3, #0]
 8007eb8:	68ba      	ldr	r2, [r7, #8]
 8007eba:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007ebc:	683b      	ldr	r3, [r7, #0]
 8007ebe:	681b      	ldr	r3, [r3, #0]
 8007ec0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ec4:	d03e      	beq.n	8007f44 <HAL_TIM_ConfigClockSource+0xd4>
 8007ec6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007eca:	f200 8087 	bhi.w	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ece:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007ed2:	f000 8086 	beq.w	8007fe2 <HAL_TIM_ConfigClockSource+0x172>
 8007ed6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007eda:	d87f      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007edc:	2b70      	cmp	r3, #112	; 0x70
 8007ede:	d01a      	beq.n	8007f16 <HAL_TIM_ConfigClockSource+0xa6>
 8007ee0:	2b70      	cmp	r3, #112	; 0x70
 8007ee2:	d87b      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ee4:	2b60      	cmp	r3, #96	; 0x60
 8007ee6:	d050      	beq.n	8007f8a <HAL_TIM_ConfigClockSource+0x11a>
 8007ee8:	2b60      	cmp	r3, #96	; 0x60
 8007eea:	d877      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007eec:	2b50      	cmp	r3, #80	; 0x50
 8007eee:	d03c      	beq.n	8007f6a <HAL_TIM_ConfigClockSource+0xfa>
 8007ef0:	2b50      	cmp	r3, #80	; 0x50
 8007ef2:	d873      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007ef4:	2b40      	cmp	r3, #64	; 0x40
 8007ef6:	d058      	beq.n	8007faa <HAL_TIM_ConfigClockSource+0x13a>
 8007ef8:	2b40      	cmp	r3, #64	; 0x40
 8007efa:	d86f      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007efc:	2b30      	cmp	r3, #48	; 0x30
 8007efe:	d064      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x15a>
 8007f00:	2b30      	cmp	r3, #48	; 0x30
 8007f02:	d86b      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007f04:	2b20      	cmp	r3, #32
 8007f06:	d060      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x15a>
 8007f08:	2b20      	cmp	r3, #32
 8007f0a:	d867      	bhi.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d05c      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x15a>
 8007f10:	2b10      	cmp	r3, #16
 8007f12:	d05a      	beq.n	8007fca <HAL_TIM_ConfigClockSource+0x15a>
 8007f14:	e062      	b.n	8007fdc <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	6818      	ldr	r0, [r3, #0]
 8007f1a:	683b      	ldr	r3, [r7, #0]
 8007f1c:	6899      	ldr	r1, [r3, #8]
 8007f1e:	683b      	ldr	r3, [r7, #0]
 8007f20:	685a      	ldr	r2, [r3, #4]
 8007f22:	683b      	ldr	r3, [r7, #0]
 8007f24:	68db      	ldr	r3, [r3, #12]
 8007f26:	f000 fad7 	bl	80084d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	689b      	ldr	r3, [r3, #8]
 8007f30:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007f32:	68bb      	ldr	r3, [r7, #8]
 8007f34:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007f38:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 8007f3a:	687b      	ldr	r3, [r7, #4]
 8007f3c:	681b      	ldr	r3, [r3, #0]
 8007f3e:	68ba      	ldr	r2, [r7, #8]
 8007f40:	609a      	str	r2, [r3, #8]
      break;
 8007f42:	e04f      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8007f44:	687b      	ldr	r3, [r7, #4]
 8007f46:	6818      	ldr	r0, [r3, #0]
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	6899      	ldr	r1, [r3, #8]
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	685a      	ldr	r2, [r3, #4]
 8007f50:	683b      	ldr	r3, [r7, #0]
 8007f52:	68db      	ldr	r3, [r3, #12]
 8007f54:	f000 fac0 	bl	80084d8 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007f58:	687b      	ldr	r3, [r7, #4]
 8007f5a:	681b      	ldr	r3, [r3, #0]
 8007f5c:	689a      	ldr	r2, [r3, #8]
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	681b      	ldr	r3, [r3, #0]
 8007f62:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007f66:	609a      	str	r2, [r3, #8]
      break;
 8007f68:	e03c      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007f6a:	687b      	ldr	r3, [r7, #4]
 8007f6c:	6818      	ldr	r0, [r3, #0]
 8007f6e:	683b      	ldr	r3, [r7, #0]
 8007f70:	6859      	ldr	r1, [r3, #4]
 8007f72:	683b      	ldr	r3, [r7, #0]
 8007f74:	68db      	ldr	r3, [r3, #12]
 8007f76:	461a      	mov	r2, r3
 8007f78:	f000 f97e 	bl	8008278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007f7c:	687b      	ldr	r3, [r7, #4]
 8007f7e:	681b      	ldr	r3, [r3, #0]
 8007f80:	2150      	movs	r1, #80	; 0x50
 8007f82:	4618      	mov	r0, r3
 8007f84:	f000 fa8d 	bl	80084a2 <TIM_ITRx_SetConfig>
      break;
 8007f88:	e02c      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	6818      	ldr	r0, [r3, #0]
 8007f8e:	683b      	ldr	r3, [r7, #0]
 8007f90:	6859      	ldr	r1, [r3, #4]
 8007f92:	683b      	ldr	r3, [r7, #0]
 8007f94:	68db      	ldr	r3, [r3, #12]
 8007f96:	461a      	mov	r2, r3
 8007f98:	f000 f9da 	bl	8008350 <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	681b      	ldr	r3, [r3, #0]
 8007fa0:	2160      	movs	r1, #96	; 0x60
 8007fa2:	4618      	mov	r0, r3
 8007fa4:	f000 fa7d 	bl	80084a2 <TIM_ITRx_SetConfig>
      break;
 8007fa8:	e01c      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 8007faa:	687b      	ldr	r3, [r7, #4]
 8007fac:	6818      	ldr	r0, [r3, #0]
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	6859      	ldr	r1, [r3, #4]
 8007fb2:	683b      	ldr	r3, [r7, #0]
 8007fb4:	68db      	ldr	r3, [r3, #12]
 8007fb6:	461a      	mov	r2, r3
 8007fb8:	f000 f95e 	bl	8008278 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007fbc:	687b      	ldr	r3, [r7, #4]
 8007fbe:	681b      	ldr	r3, [r3, #0]
 8007fc0:	2140      	movs	r1, #64	; 0x40
 8007fc2:	4618      	mov	r0, r3
 8007fc4:	f000 fa6d 	bl	80084a2 <TIM_ITRx_SetConfig>
      break;
 8007fc8:	e00c      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	681a      	ldr	r2, [r3, #0]
 8007fce:	683b      	ldr	r3, [r7, #0]
 8007fd0:	681b      	ldr	r3, [r3, #0]
 8007fd2:	4619      	mov	r1, r3
 8007fd4:	4610      	mov	r0, r2
 8007fd6:	f000 fa64 	bl	80084a2 <TIM_ITRx_SetConfig>
      break;
 8007fda:	e003      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 8007fdc:	2301      	movs	r3, #1
 8007fde:	73fb      	strb	r3, [r7, #15]
      break;
 8007fe0:	e000      	b.n	8007fe4 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8007fe2:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007fe4:	687b      	ldr	r3, [r7, #4]
 8007fe6:	2201      	movs	r2, #1
 8007fe8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007fec:	687b      	ldr	r3, [r7, #4]
 8007fee:	2200      	movs	r2, #0
 8007ff0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8007ff4:	7bfb      	ldrb	r3, [r7, #15]
}
 8007ff6:	4618      	mov	r0, r3
 8007ff8:	3710      	adds	r7, #16
 8007ffa:	46bd      	mov	sp, r7
 8007ffc:	bd80      	pop	{r7, pc}

08007ffe <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007ffe:	b480      	push	{r7}
 8008000:	b083      	sub	sp, #12
 8008002:	af00      	add	r7, sp, #0
 8008004:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8008006:	bf00      	nop
 8008008:	370c      	adds	r7, #12
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8008012:	b480      	push	{r7}
 8008014:	b083      	sub	sp, #12
 8008016:	af00      	add	r7, sp, #0
 8008018:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800801a:	bf00      	nop
 800801c:	370c      	adds	r7, #12
 800801e:	46bd      	mov	sp, r7
 8008020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008024:	4770      	bx	lr

08008026 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8008026:	b480      	push	{r7}
 8008028:	b083      	sub	sp, #12
 800802a:	af00      	add	r7, sp, #0
 800802c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800802e:	bf00      	nop
 8008030:	370c      	adds	r7, #12
 8008032:	46bd      	mov	sp, r7
 8008034:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008038:	4770      	bx	lr

0800803a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800803a:	b480      	push	{r7}
 800803c:	b083      	sub	sp, #12
 800803e:	af00      	add	r7, sp, #0
 8008040:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8008042:	bf00      	nop
 8008044:	370c      	adds	r7, #12
 8008046:	46bd      	mov	sp, r7
 8008048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800804c:	4770      	bx	lr
	...

08008050 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8008050:	b480      	push	{r7}
 8008052:	b085      	sub	sp, #20
 8008054:	af00      	add	r7, sp, #0
 8008056:	6078      	str	r0, [r7, #4]
 8008058:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	681b      	ldr	r3, [r3, #0]
 800805e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	4a40      	ldr	r2, [pc, #256]	; (8008164 <TIM_Base_SetConfig+0x114>)
 8008064:	4293      	cmp	r3, r2
 8008066:	d013      	beq.n	8008090 <TIM_Base_SetConfig+0x40>
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800806e:	d00f      	beq.n	8008090 <TIM_Base_SetConfig+0x40>
 8008070:	687b      	ldr	r3, [r7, #4]
 8008072:	4a3d      	ldr	r2, [pc, #244]	; (8008168 <TIM_Base_SetConfig+0x118>)
 8008074:	4293      	cmp	r3, r2
 8008076:	d00b      	beq.n	8008090 <TIM_Base_SetConfig+0x40>
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	4a3c      	ldr	r2, [pc, #240]	; (800816c <TIM_Base_SetConfig+0x11c>)
 800807c:	4293      	cmp	r3, r2
 800807e:	d007      	beq.n	8008090 <TIM_Base_SetConfig+0x40>
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	4a3b      	ldr	r2, [pc, #236]	; (8008170 <TIM_Base_SetConfig+0x120>)
 8008084:	4293      	cmp	r3, r2
 8008086:	d003      	beq.n	8008090 <TIM_Base_SetConfig+0x40>
 8008088:	687b      	ldr	r3, [r7, #4]
 800808a:	4a3a      	ldr	r2, [pc, #232]	; (8008174 <TIM_Base_SetConfig+0x124>)
 800808c:	4293      	cmp	r3, r2
 800808e:	d108      	bne.n	80080a2 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008096:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8008098:	683b      	ldr	r3, [r7, #0]
 800809a:	685b      	ldr	r3, [r3, #4]
 800809c:	68fa      	ldr	r2, [r7, #12]
 800809e:	4313      	orrs	r3, r2
 80080a0:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	4a2f      	ldr	r2, [pc, #188]	; (8008164 <TIM_Base_SetConfig+0x114>)
 80080a6:	4293      	cmp	r3, r2
 80080a8:	d02b      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080aa:	687b      	ldr	r3, [r7, #4]
 80080ac:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80080b0:	d027      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080b2:	687b      	ldr	r3, [r7, #4]
 80080b4:	4a2c      	ldr	r2, [pc, #176]	; (8008168 <TIM_Base_SetConfig+0x118>)
 80080b6:	4293      	cmp	r3, r2
 80080b8:	d023      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080ba:	687b      	ldr	r3, [r7, #4]
 80080bc:	4a2b      	ldr	r2, [pc, #172]	; (800816c <TIM_Base_SetConfig+0x11c>)
 80080be:	4293      	cmp	r3, r2
 80080c0:	d01f      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080c2:	687b      	ldr	r3, [r7, #4]
 80080c4:	4a2a      	ldr	r2, [pc, #168]	; (8008170 <TIM_Base_SetConfig+0x120>)
 80080c6:	4293      	cmp	r3, r2
 80080c8:	d01b      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080ca:	687b      	ldr	r3, [r7, #4]
 80080cc:	4a29      	ldr	r2, [pc, #164]	; (8008174 <TIM_Base_SetConfig+0x124>)
 80080ce:	4293      	cmp	r3, r2
 80080d0:	d017      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080d2:	687b      	ldr	r3, [r7, #4]
 80080d4:	4a28      	ldr	r2, [pc, #160]	; (8008178 <TIM_Base_SetConfig+0x128>)
 80080d6:	4293      	cmp	r3, r2
 80080d8:	d013      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080da:	687b      	ldr	r3, [r7, #4]
 80080dc:	4a27      	ldr	r2, [pc, #156]	; (800817c <TIM_Base_SetConfig+0x12c>)
 80080de:	4293      	cmp	r3, r2
 80080e0:	d00f      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080e2:	687b      	ldr	r3, [r7, #4]
 80080e4:	4a26      	ldr	r2, [pc, #152]	; (8008180 <TIM_Base_SetConfig+0x130>)
 80080e6:	4293      	cmp	r3, r2
 80080e8:	d00b      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080ea:	687b      	ldr	r3, [r7, #4]
 80080ec:	4a25      	ldr	r2, [pc, #148]	; (8008184 <TIM_Base_SetConfig+0x134>)
 80080ee:	4293      	cmp	r3, r2
 80080f0:	d007      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080f2:	687b      	ldr	r3, [r7, #4]
 80080f4:	4a24      	ldr	r2, [pc, #144]	; (8008188 <TIM_Base_SetConfig+0x138>)
 80080f6:	4293      	cmp	r3, r2
 80080f8:	d003      	beq.n	8008102 <TIM_Base_SetConfig+0xb2>
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	4a23      	ldr	r2, [pc, #140]	; (800818c <TIM_Base_SetConfig+0x13c>)
 80080fe:	4293      	cmp	r3, r2
 8008100:	d108      	bne.n	8008114 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008108:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800810a:	683b      	ldr	r3, [r7, #0]
 800810c:	68db      	ldr	r3, [r3, #12]
 800810e:	68fa      	ldr	r2, [r7, #12]
 8008110:	4313      	orrs	r3, r2
 8008112:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8008114:	68fb      	ldr	r3, [r7, #12]
 8008116:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	695b      	ldr	r3, [r3, #20]
 800811e:	4313      	orrs	r3, r2
 8008120:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	68fa      	ldr	r2, [r7, #12]
 8008126:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8008128:	683b      	ldr	r3, [r7, #0]
 800812a:	689a      	ldr	r2, [r3, #8]
 800812c:	687b      	ldr	r3, [r7, #4]
 800812e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8008130:	683b      	ldr	r3, [r7, #0]
 8008132:	681a      	ldr	r2, [r3, #0]
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	4a0a      	ldr	r2, [pc, #40]	; (8008164 <TIM_Base_SetConfig+0x114>)
 800813c:	4293      	cmp	r3, r2
 800813e:	d003      	beq.n	8008148 <TIM_Base_SetConfig+0xf8>
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	4a0c      	ldr	r2, [pc, #48]	; (8008174 <TIM_Base_SetConfig+0x124>)
 8008144:	4293      	cmp	r3, r2
 8008146:	d103      	bne.n	8008150 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8008148:	683b      	ldr	r3, [r7, #0]
 800814a:	691a      	ldr	r2, [r3, #16]
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8008150:	687b      	ldr	r3, [r7, #4]
 8008152:	2201      	movs	r2, #1
 8008154:	615a      	str	r2, [r3, #20]
}
 8008156:	bf00      	nop
 8008158:	3714      	adds	r7, #20
 800815a:	46bd      	mov	sp, r7
 800815c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008160:	4770      	bx	lr
 8008162:	bf00      	nop
 8008164:	40010000 	.word	0x40010000
 8008168:	40000400 	.word	0x40000400
 800816c:	40000800 	.word	0x40000800
 8008170:	40000c00 	.word	0x40000c00
 8008174:	40010400 	.word	0x40010400
 8008178:	40014000 	.word	0x40014000
 800817c:	40014400 	.word	0x40014400
 8008180:	40014800 	.word	0x40014800
 8008184:	40001800 	.word	0x40001800
 8008188:	40001c00 	.word	0x40001c00
 800818c:	40002000 	.word	0x40002000

08008190 <TIM_TI1_SetConfig>:
  *       (on channel2 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
void TIM_TI1_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                       uint32_t TIM_ICFilter)
{
 8008190:	b480      	push	{r7}
 8008192:	b087      	sub	sp, #28
 8008194:	af00      	add	r7, sp, #0
 8008196:	60f8      	str	r0, [r7, #12]
 8008198:	60b9      	str	r1, [r7, #8]
 800819a:	607a      	str	r2, [r7, #4]
 800819c:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800819e:	68fb      	ldr	r3, [r7, #12]
 80081a0:	6a1b      	ldr	r3, [r3, #32]
 80081a2:	f023 0201 	bic.w	r2, r3, #1
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081aa:	68fb      	ldr	r3, [r7, #12]
 80081ac:	699b      	ldr	r3, [r3, #24]
 80081ae:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80081b0:	68fb      	ldr	r3, [r7, #12]
 80081b2:	6a1b      	ldr	r3, [r3, #32]
 80081b4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  if (IS_TIM_CC2_INSTANCE(TIMx) != RESET)
 80081b6:	68fb      	ldr	r3, [r7, #12]
 80081b8:	4a28      	ldr	r2, [pc, #160]	; (800825c <TIM_TI1_SetConfig+0xcc>)
 80081ba:	4293      	cmp	r3, r2
 80081bc:	d01b      	beq.n	80081f6 <TIM_TI1_SetConfig+0x66>
 80081be:	68fb      	ldr	r3, [r7, #12]
 80081c0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80081c4:	d017      	beq.n	80081f6 <TIM_TI1_SetConfig+0x66>
 80081c6:	68fb      	ldr	r3, [r7, #12]
 80081c8:	4a25      	ldr	r2, [pc, #148]	; (8008260 <TIM_TI1_SetConfig+0xd0>)
 80081ca:	4293      	cmp	r3, r2
 80081cc:	d013      	beq.n	80081f6 <TIM_TI1_SetConfig+0x66>
 80081ce:	68fb      	ldr	r3, [r7, #12]
 80081d0:	4a24      	ldr	r2, [pc, #144]	; (8008264 <TIM_TI1_SetConfig+0xd4>)
 80081d2:	4293      	cmp	r3, r2
 80081d4:	d00f      	beq.n	80081f6 <TIM_TI1_SetConfig+0x66>
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	4a23      	ldr	r2, [pc, #140]	; (8008268 <TIM_TI1_SetConfig+0xd8>)
 80081da:	4293      	cmp	r3, r2
 80081dc:	d00b      	beq.n	80081f6 <TIM_TI1_SetConfig+0x66>
 80081de:	68fb      	ldr	r3, [r7, #12]
 80081e0:	4a22      	ldr	r2, [pc, #136]	; (800826c <TIM_TI1_SetConfig+0xdc>)
 80081e2:	4293      	cmp	r3, r2
 80081e4:	d007      	beq.n	80081f6 <TIM_TI1_SetConfig+0x66>
 80081e6:	68fb      	ldr	r3, [r7, #12]
 80081e8:	4a21      	ldr	r2, [pc, #132]	; (8008270 <TIM_TI1_SetConfig+0xe0>)
 80081ea:	4293      	cmp	r3, r2
 80081ec:	d003      	beq.n	80081f6 <TIM_TI1_SetConfig+0x66>
 80081ee:	68fb      	ldr	r3, [r7, #12]
 80081f0:	4a20      	ldr	r2, [pc, #128]	; (8008274 <TIM_TI1_SetConfig+0xe4>)
 80081f2:	4293      	cmp	r3, r2
 80081f4:	d101      	bne.n	80081fa <TIM_TI1_SetConfig+0x6a>
 80081f6:	2301      	movs	r3, #1
 80081f8:	e000      	b.n	80081fc <TIM_TI1_SetConfig+0x6c>
 80081fa:	2300      	movs	r3, #0
 80081fc:	2b00      	cmp	r3, #0
 80081fe:	d008      	beq.n	8008212 <TIM_TI1_SetConfig+0x82>
  {
    tmpccmr1 &= ~TIM_CCMR1_CC1S;
 8008200:	697b      	ldr	r3, [r7, #20]
 8008202:	f023 0303 	bic.w	r3, r3, #3
 8008206:	617b      	str	r3, [r7, #20]
    tmpccmr1 |= TIM_ICSelection;
 8008208:	697a      	ldr	r2, [r7, #20]
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	4313      	orrs	r3, r2
 800820e:	617b      	str	r3, [r7, #20]
 8008210:	e003      	b.n	800821a <TIM_TI1_SetConfig+0x8a>
  }
  else
  {
    tmpccmr1 |= TIM_CCMR1_CC1S_0;
 8008212:	697b      	ldr	r3, [r7, #20]
 8008214:	f043 0301 	orr.w	r3, r3, #1
 8008218:	617b      	str	r3, [r7, #20]
  }

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800821a:	697b      	ldr	r3, [r7, #20]
 800821c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8008220:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 4U) & TIM_CCMR1_IC1F);
 8008222:	683b      	ldr	r3, [r7, #0]
 8008224:	011b      	lsls	r3, r3, #4
 8008226:	b2db      	uxtb	r3, r3
 8008228:	697a      	ldr	r2, [r7, #20]
 800822a:	4313      	orrs	r3, r2
 800822c:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800822e:	693b      	ldr	r3, [r7, #16]
 8008230:	f023 030a 	bic.w	r3, r3, #10
 8008234:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity & (TIM_CCER_CC1P | TIM_CCER_CC1NP));
 8008236:	68bb      	ldr	r3, [r7, #8]
 8008238:	f003 030a 	and.w	r3, r3, #10
 800823c:	693a      	ldr	r2, [r7, #16]
 800823e:	4313      	orrs	r3, r2
 8008240:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8008242:	68fb      	ldr	r3, [r7, #12]
 8008244:	697a      	ldr	r2, [r7, #20]
 8008246:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008248:	68fb      	ldr	r3, [r7, #12]
 800824a:	693a      	ldr	r2, [r7, #16]
 800824c:	621a      	str	r2, [r3, #32]
}
 800824e:	bf00      	nop
 8008250:	371c      	adds	r7, #28
 8008252:	46bd      	mov	sp, r7
 8008254:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008258:	4770      	bx	lr
 800825a:	bf00      	nop
 800825c:	40010000 	.word	0x40010000
 8008260:	40000400 	.word	0x40000400
 8008264:	40000800 	.word	0x40000800
 8008268:	40000c00 	.word	0x40000c00
 800826c:	40010400 	.word	0x40010400
 8008270:	40014000 	.word	0x40014000
 8008274:	40001800 	.word	0x40001800

08008278 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008278:	b480      	push	{r7}
 800827a:	b087      	sub	sp, #28
 800827c:	af00      	add	r7, sp, #0
 800827e:	60f8      	str	r0, [r7, #12]
 8008280:	60b9      	str	r1, [r7, #8]
 8008282:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008284:	68fb      	ldr	r3, [r7, #12]
 8008286:	6a1b      	ldr	r3, [r3, #32]
 8008288:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800828a:	68fb      	ldr	r3, [r7, #12]
 800828c:	6a1b      	ldr	r3, [r3, #32]
 800828e:	f023 0201 	bic.w	r2, r3, #1
 8008292:	68fb      	ldr	r3, [r7, #12]
 8008294:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008296:	68fb      	ldr	r3, [r7, #12]
 8008298:	699b      	ldr	r3, [r3, #24]
 800829a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800829c:	693b      	ldr	r3, [r7, #16]
 800829e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80082a2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	011b      	lsls	r3, r3, #4
 80082a8:	693a      	ldr	r2, [r7, #16]
 80082aa:	4313      	orrs	r3, r2
 80082ac:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80082ae:	697b      	ldr	r3, [r7, #20]
 80082b0:	f023 030a 	bic.w	r3, r3, #10
 80082b4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80082b6:	697a      	ldr	r2, [r7, #20]
 80082b8:	68bb      	ldr	r3, [r7, #8]
 80082ba:	4313      	orrs	r3, r2
 80082bc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80082be:	68fb      	ldr	r3, [r7, #12]
 80082c0:	693a      	ldr	r2, [r7, #16]
 80082c2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80082c4:	68fb      	ldr	r3, [r7, #12]
 80082c6:	697a      	ldr	r2, [r7, #20]
 80082c8:	621a      	str	r2, [r3, #32]
}
 80082ca:	bf00      	nop
 80082cc:	371c      	adds	r7, #28
 80082ce:	46bd      	mov	sp, r7
 80082d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082d4:	4770      	bx	lr

080082d6 <TIM_TI2_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR1 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI2_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80082d6:	b480      	push	{r7}
 80082d8:	b087      	sub	sp, #28
 80082da:	af00      	add	r7, sp, #0
 80082dc:	60f8      	str	r0, [r7, #12]
 80082de:	60b9      	str	r1, [r7, #8]
 80082e0:	607a      	str	r2, [r7, #4]
 80082e2:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	6a1b      	ldr	r3, [r3, #32]
 80082e8:	f023 0210 	bic.w	r2, r3, #16
 80082ec:	68fb      	ldr	r3, [r7, #12]
 80082ee:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	699b      	ldr	r3, [r3, #24]
 80082f4:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	6a1b      	ldr	r3, [r3, #32]
 80082fa:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr1 &= ~TIM_CCMR1_CC2S;
 80082fc:	697b      	ldr	r3, [r7, #20]
 80082fe:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008302:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICSelection << 8U);
 8008304:	687b      	ldr	r3, [r7, #4]
 8008306:	021b      	lsls	r3, r3, #8
 8008308:	697a      	ldr	r2, [r7, #20]
 800830a:	4313      	orrs	r3, r2
 800830c:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800830e:	697b      	ldr	r3, [r7, #20]
 8008310:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008314:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= ((TIM_ICFilter << 12U) & TIM_CCMR1_IC2F);
 8008316:	683b      	ldr	r3, [r7, #0]
 8008318:	031b      	lsls	r3, r3, #12
 800831a:	b29b      	uxth	r3, r3
 800831c:	697a      	ldr	r2, [r7, #20]
 800831e:	4313      	orrs	r3, r2
 8008320:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008322:	693b      	ldr	r3, [r7, #16]
 8008324:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008328:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 4U) & (TIM_CCER_CC2P | TIM_CCER_CC2NP));
 800832a:	68bb      	ldr	r3, [r7, #8]
 800832c:	011b      	lsls	r3, r3, #4
 800832e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
 8008332:	693a      	ldr	r2, [r7, #16]
 8008334:	4313      	orrs	r3, r2
 8008336:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008338:	68fb      	ldr	r3, [r7, #12]
 800833a:	697a      	ldr	r2, [r7, #20]
 800833c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800833e:	68fb      	ldr	r3, [r7, #12]
 8008340:	693a      	ldr	r2, [r7, #16]
 8008342:	621a      	str	r2, [r3, #32]
}
 8008344:	bf00      	nop
 8008346:	371c      	adds	r7, #28
 8008348:	46bd      	mov	sp, r7
 800834a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800834e:	4770      	bx	lr

08008350 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008350:	b480      	push	{r7}
 8008352:	b087      	sub	sp, #28
 8008354:	af00      	add	r7, sp, #0
 8008356:	60f8      	str	r0, [r7, #12]
 8008358:	60b9      	str	r1, [r7, #8]
 800835a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800835c:	68fb      	ldr	r3, [r7, #12]
 800835e:	6a1b      	ldr	r3, [r3, #32]
 8008360:	f023 0210 	bic.w	r2, r3, #16
 8008364:	68fb      	ldr	r3, [r7, #12]
 8008366:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	699b      	ldr	r3, [r3, #24]
 800836c:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 800836e:	68fb      	ldr	r3, [r7, #12]
 8008370:	6a1b      	ldr	r3, [r3, #32]
 8008372:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008374:	697b      	ldr	r3, [r7, #20]
 8008376:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800837a:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800837c:	687b      	ldr	r3, [r7, #4]
 800837e:	031b      	lsls	r3, r3, #12
 8008380:	697a      	ldr	r2, [r7, #20]
 8008382:	4313      	orrs	r3, r2
 8008384:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008386:	693b      	ldr	r3, [r7, #16]
 8008388:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800838c:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 800838e:	68bb      	ldr	r3, [r7, #8]
 8008390:	011b      	lsls	r3, r3, #4
 8008392:	693a      	ldr	r2, [r7, #16]
 8008394:	4313      	orrs	r3, r2
 8008396:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 8008398:	68fb      	ldr	r3, [r7, #12]
 800839a:	697a      	ldr	r2, [r7, #20]
 800839c:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800839e:	68fb      	ldr	r3, [r7, #12]
 80083a0:	693a      	ldr	r2, [r7, #16]
 80083a2:	621a      	str	r2, [r3, #32]
}
 80083a4:	bf00      	nop
 80083a6:	371c      	adds	r7, #28
 80083a8:	46bd      	mov	sp, r7
 80083aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083ae:	4770      	bx	lr

080083b0 <TIM_TI3_SetConfig>:
  *       (on channel1 path) is used as the input signal. Therefore CCMR2 must be
  *        protected against un-initialized filter and polarity values.
  */
static void TIM_TI3_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 80083b0:	b480      	push	{r7}
 80083b2:	b087      	sub	sp, #28
 80083b4:	af00      	add	r7, sp, #0
 80083b6:	60f8      	str	r0, [r7, #12]
 80083b8:	60b9      	str	r1, [r7, #8]
 80083ba:	607a      	str	r2, [r7, #4]
 80083bc:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 3: Reset the CC3E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80083be:	68fb      	ldr	r3, [r7, #12]
 80083c0:	6a1b      	ldr	r3, [r3, #32]
 80083c2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80083c6:	68fb      	ldr	r3, [r7, #12]
 80083c8:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 80083ca:	68fb      	ldr	r3, [r7, #12]
 80083cc:	69db      	ldr	r3, [r3, #28]
 80083ce:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80083d0:	68fb      	ldr	r3, [r7, #12]
 80083d2:	6a1b      	ldr	r3, [r3, #32]
 80083d4:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC3S;
 80083d6:	697b      	ldr	r3, [r7, #20]
 80083d8:	f023 0303 	bic.w	r3, r3, #3
 80083dc:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= TIM_ICSelection;
 80083de:	697a      	ldr	r2, [r7, #20]
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	4313      	orrs	r3, r2
 80083e4:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC3F;
 80083e6:	697b      	ldr	r3, [r7, #20]
 80083e8:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80083ec:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 4U) & TIM_CCMR2_IC3F);
 80083ee:	683b      	ldr	r3, [r7, #0]
 80083f0:	011b      	lsls	r3, r3, #4
 80083f2:	b2db      	uxtb	r3, r3
 80083f4:	697a      	ldr	r2, [r7, #20]
 80083f6:	4313      	orrs	r3, r2
 80083f8:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC3E Bit */
  tmpccer &= ~(TIM_CCER_CC3P | TIM_CCER_CC3NP);
 80083fa:	693b      	ldr	r3, [r7, #16]
 80083fc:	f423 6320 	bic.w	r3, r3, #2560	; 0xa00
 8008400:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 8U) & (TIM_CCER_CC3P | TIM_CCER_CC3NP));
 8008402:	68bb      	ldr	r3, [r7, #8]
 8008404:	021b      	lsls	r3, r3, #8
 8008406:	f403 6320 	and.w	r3, r3, #2560	; 0xa00
 800840a:	693a      	ldr	r2, [r7, #16]
 800840c:	4313      	orrs	r3, r2
 800840e:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 8008410:	68fb      	ldr	r3, [r7, #12]
 8008412:	697a      	ldr	r2, [r7, #20]
 8008414:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer;
 8008416:	68fb      	ldr	r3, [r7, #12]
 8008418:	693a      	ldr	r2, [r7, #16]
 800841a:	621a      	str	r2, [r3, #32]
}
 800841c:	bf00      	nop
 800841e:	371c      	adds	r7, #28
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <TIM_TI4_SetConfig>:
  *        protected against un-initialized filter and polarity values.
  * @retval None
  */
static void TIM_TI4_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICSelection,
                              uint32_t TIM_ICFilter)
{
 8008428:	b480      	push	{r7}
 800842a:	b087      	sub	sp, #28
 800842c:	af00      	add	r7, sp, #0
 800842e:	60f8      	str	r0, [r7, #12]
 8008430:	60b9      	str	r1, [r7, #8]
 8008432:	607a      	str	r2, [r7, #4]
 8008434:	603b      	str	r3, [r7, #0]
  uint32_t tmpccmr2;
  uint32_t tmpccer;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008436:	68fb      	ldr	r3, [r7, #12]
 8008438:	6a1b      	ldr	r3, [r3, #32]
 800843a:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800843e:	68fb      	ldr	r3, [r7, #12]
 8008440:	621a      	str	r2, [r3, #32]
  tmpccmr2 = TIMx->CCMR2;
 8008442:	68fb      	ldr	r3, [r7, #12]
 8008444:	69db      	ldr	r3, [r3, #28]
 8008446:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008448:	68fb      	ldr	r3, [r7, #12]
 800844a:	6a1b      	ldr	r3, [r3, #32]
 800844c:	613b      	str	r3, [r7, #16]

  /* Select the Input */
  tmpccmr2 &= ~TIM_CCMR2_CC4S;
 800844e:	697b      	ldr	r3, [r7, #20]
 8008450:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8008454:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= (TIM_ICSelection << 8U);
 8008456:	687b      	ldr	r3, [r7, #4]
 8008458:	021b      	lsls	r3, r3, #8
 800845a:	697a      	ldr	r2, [r7, #20]
 800845c:	4313      	orrs	r3, r2
 800845e:	617b      	str	r3, [r7, #20]

  /* Set the filter */
  tmpccmr2 &= ~TIM_CCMR2_IC4F;
 8008460:	697b      	ldr	r3, [r7, #20]
 8008462:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008466:	617b      	str	r3, [r7, #20]
  tmpccmr2 |= ((TIM_ICFilter << 12U) & TIM_CCMR2_IC4F);
 8008468:	683b      	ldr	r3, [r7, #0]
 800846a:	031b      	lsls	r3, r3, #12
 800846c:	b29b      	uxth	r3, r3
 800846e:	697a      	ldr	r2, [r7, #20]
 8008470:	4313      	orrs	r3, r2
 8008472:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC4E Bit */
  tmpccer &= ~(TIM_CCER_CC4P | TIM_CCER_CC4NP);
 8008474:	693b      	ldr	r3, [r7, #16]
 8008476:	f423 4320 	bic.w	r3, r3, #40960	; 0xa000
 800847a:	613b      	str	r3, [r7, #16]
  tmpccer |= ((TIM_ICPolarity << 12U) & (TIM_CCER_CC4P | TIM_CCER_CC4NP));
 800847c:	68bb      	ldr	r3, [r7, #8]
 800847e:	031b      	lsls	r3, r3, #12
 8008480:	f403 4320 	and.w	r3, r3, #40960	; 0xa000
 8008484:	693a      	ldr	r2, [r7, #16]
 8008486:	4313      	orrs	r3, r2
 8008488:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR2 and CCER registers */
  TIMx->CCMR2 = tmpccmr2;
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	697a      	ldr	r2, [r7, #20]
 800848e:	61da      	str	r2, [r3, #28]
  TIMx->CCER = tmpccer ;
 8008490:	68fb      	ldr	r3, [r7, #12]
 8008492:	693a      	ldr	r2, [r7, #16]
 8008494:	621a      	str	r2, [r3, #32]
}
 8008496:	bf00      	nop
 8008498:	371c      	adds	r7, #28
 800849a:	46bd      	mov	sp, r7
 800849c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084a0:	4770      	bx	lr

080084a2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80084a2:	b480      	push	{r7}
 80084a4:	b085      	sub	sp, #20
 80084a6:	af00      	add	r7, sp, #0
 80084a8:	6078      	str	r0, [r7, #4]
 80084aa:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	689b      	ldr	r3, [r3, #8]
 80084b0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80084b2:	68fb      	ldr	r3, [r7, #12]
 80084b4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80084b8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80084ba:	683a      	ldr	r2, [r7, #0]
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	4313      	orrs	r3, r2
 80084c0:	f043 0307 	orr.w	r3, r3, #7
 80084c4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80084c6:	687b      	ldr	r3, [r7, #4]
 80084c8:	68fa      	ldr	r2, [r7, #12]
 80084ca:	609a      	str	r2, [r3, #8]
}
 80084cc:	bf00      	nop
 80084ce:	3714      	adds	r7, #20
 80084d0:	46bd      	mov	sp, r7
 80084d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80084d6:	4770      	bx	lr

080084d8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80084d8:	b480      	push	{r7}
 80084da:	b087      	sub	sp, #28
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	607a      	str	r2, [r7, #4]
 80084e4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	689b      	ldr	r3, [r3, #8]
 80084ea:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80084ec:	697b      	ldr	r3, [r7, #20]
 80084ee:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80084f2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80084f4:	683b      	ldr	r3, [r7, #0]
 80084f6:	021a      	lsls	r2, r3, #8
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	431a      	orrs	r2, r3
 80084fc:	68bb      	ldr	r3, [r7, #8]
 80084fe:	4313      	orrs	r3, r2
 8008500:	697a      	ldr	r2, [r7, #20]
 8008502:	4313      	orrs	r3, r2
 8008504:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008506:	68fb      	ldr	r3, [r7, #12]
 8008508:	697a      	ldr	r2, [r7, #20]
 800850a:	609a      	str	r2, [r3, #8]
}
 800850c:	bf00      	nop
 800850e:	371c      	adds	r7, #28
 8008510:	46bd      	mov	sp, r7
 8008512:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008516:	4770      	bx	lr

08008518 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008518:	b480      	push	{r7}
 800851a:	b085      	sub	sp, #20
 800851c:	af00      	add	r7, sp, #0
 800851e:	6078      	str	r0, [r7, #4]
 8008520:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008522:	687b      	ldr	r3, [r7, #4]
 8008524:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008528:	2b01      	cmp	r3, #1
 800852a:	d101      	bne.n	8008530 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800852c:	2302      	movs	r3, #2
 800852e:	e05a      	b.n	80085e6 <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8008530:	687b      	ldr	r3, [r7, #4]
 8008532:	2201      	movs	r2, #1
 8008534:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	2202      	movs	r2, #2
 800853c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	681b      	ldr	r3, [r3, #0]
 8008544:	685b      	ldr	r3, [r3, #4]
 8008546:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008548:	687b      	ldr	r3, [r7, #4]
 800854a:	681b      	ldr	r3, [r3, #0]
 800854c:	689b      	ldr	r3, [r3, #8]
 800854e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008556:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008558:	683b      	ldr	r3, [r7, #0]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	68fa      	ldr	r2, [r7, #12]
 800855e:	4313      	orrs	r3, r2
 8008560:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008562:	687b      	ldr	r3, [r7, #4]
 8008564:	681b      	ldr	r3, [r3, #0]
 8008566:	68fa      	ldr	r2, [r7, #12]
 8008568:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800856a:	687b      	ldr	r3, [r7, #4]
 800856c:	681b      	ldr	r3, [r3, #0]
 800856e:	4a21      	ldr	r2, [pc, #132]	; (80085f4 <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8008570:	4293      	cmp	r3, r2
 8008572:	d022      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008574:	687b      	ldr	r3, [r7, #4]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800857c:	d01d      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	681b      	ldr	r3, [r3, #0]
 8008582:	4a1d      	ldr	r2, [pc, #116]	; (80085f8 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8008584:	4293      	cmp	r3, r2
 8008586:	d018      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	681b      	ldr	r3, [r3, #0]
 800858c:	4a1b      	ldr	r2, [pc, #108]	; (80085fc <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 800858e:	4293      	cmp	r3, r2
 8008590:	d013      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8008592:	687b      	ldr	r3, [r7, #4]
 8008594:	681b      	ldr	r3, [r3, #0]
 8008596:	4a1a      	ldr	r2, [pc, #104]	; (8008600 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8008598:	4293      	cmp	r3, r2
 800859a:	d00e      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 800859c:	687b      	ldr	r3, [r7, #4]
 800859e:	681b      	ldr	r3, [r3, #0]
 80085a0:	4a18      	ldr	r2, [pc, #96]	; (8008604 <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 80085a2:	4293      	cmp	r3, r2
 80085a4:	d009      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085a6:	687b      	ldr	r3, [r7, #4]
 80085a8:	681b      	ldr	r3, [r3, #0]
 80085aa:	4a17      	ldr	r2, [pc, #92]	; (8008608 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 80085ac:	4293      	cmp	r3, r2
 80085ae:	d004      	beq.n	80085ba <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 80085b0:	687b      	ldr	r3, [r7, #4]
 80085b2:	681b      	ldr	r3, [r3, #0]
 80085b4:	4a15      	ldr	r2, [pc, #84]	; (800860c <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 80085b6:	4293      	cmp	r3, r2
 80085b8:	d10c      	bne.n	80085d4 <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80085ba:	68bb      	ldr	r3, [r7, #8]
 80085bc:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80085c0:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80085c2:	683b      	ldr	r3, [r7, #0]
 80085c4:	685b      	ldr	r3, [r3, #4]
 80085c6:	68ba      	ldr	r2, [r7, #8]
 80085c8:	4313      	orrs	r3, r2
 80085ca:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	681b      	ldr	r3, [r3, #0]
 80085d0:	68ba      	ldr	r2, [r7, #8]
 80085d2:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80085d4:	687b      	ldr	r3, [r7, #4]
 80085d6:	2201      	movs	r2, #1
 80085d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80085dc:	687b      	ldr	r3, [r7, #4]
 80085de:	2200      	movs	r2, #0
 80085e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80085e4:	2300      	movs	r3, #0
}
 80085e6:	4618      	mov	r0, r3
 80085e8:	3714      	adds	r7, #20
 80085ea:	46bd      	mov	sp, r7
 80085ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80085f0:	4770      	bx	lr
 80085f2:	bf00      	nop
 80085f4:	40010000 	.word	0x40010000
 80085f8:	40000400 	.word	0x40000400
 80085fc:	40000800 	.word	0x40000800
 8008600:	40000c00 	.word	0x40000c00
 8008604:	40010400 	.word	0x40010400
 8008608:	40014000 	.word	0x40014000
 800860c:	40001800 	.word	0x40001800

08008610 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008610:	b480      	push	{r7}
 8008612:	b083      	sub	sp, #12
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008618:	bf00      	nop
 800861a:	370c      	adds	r7, #12
 800861c:	46bd      	mov	sp, r7
 800861e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008622:	4770      	bx	lr

08008624 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008624:	b480      	push	{r7}
 8008626:	b083      	sub	sp, #12
 8008628:	af00      	add	r7, sp, #0
 800862a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800862c:	bf00      	nop
 800862e:	370c      	adds	r7, #12
 8008630:	46bd      	mov	sp, r7
 8008632:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008636:	4770      	bx	lr

08008638 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008638:	b580      	push	{r7, lr}
 800863a:	b082      	sub	sp, #8
 800863c:	af00      	add	r7, sp, #0
 800863e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008640:	687b      	ldr	r3, [r7, #4]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d101      	bne.n	800864a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008646:	2301      	movs	r3, #1
 8008648:	e03f      	b.n	80086ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800864a:	687b      	ldr	r3, [r7, #4]
 800864c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008650:	b2db      	uxtb	r3, r3
 8008652:	2b00      	cmp	r3, #0
 8008654:	d106      	bne.n	8008664 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	2200      	movs	r2, #0
 800865a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800865e:	6878      	ldr	r0, [r7, #4]
 8008660:	f7fd fb72 	bl	8005d48 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	2224      	movs	r2, #36	; 0x24
 8008668:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800866c:	687b      	ldr	r3, [r7, #4]
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	68da      	ldr	r2, [r3, #12]
 8008672:	687b      	ldr	r3, [r7, #4]
 8008674:	681b      	ldr	r3, [r3, #0]
 8008676:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800867a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800867c:	6878      	ldr	r0, [r7, #4]
 800867e:	f000 fddb 	bl	8009238 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	691a      	ldr	r2, [r3, #16]
 8008688:	687b      	ldr	r3, [r7, #4]
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008690:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	681b      	ldr	r3, [r3, #0]
 8008696:	695a      	ldr	r2, [r3, #20]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	681b      	ldr	r3, [r3, #0]
 800869c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80086a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80086a2:	687b      	ldr	r3, [r7, #4]
 80086a4:	681b      	ldr	r3, [r3, #0]
 80086a6:	68da      	ldr	r2, [r3, #12]
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	681b      	ldr	r3, [r3, #0]
 80086ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80086b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	2200      	movs	r2, #0
 80086b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80086b8:	687b      	ldr	r3, [r7, #4]
 80086ba:	2220      	movs	r2, #32
 80086bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80086c0:	687b      	ldr	r3, [r7, #4]
 80086c2:	2220      	movs	r2, #32
 80086c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80086c8:	2300      	movs	r3, #0
}
 80086ca:	4618      	mov	r0, r3
 80086cc:	3708      	adds	r7, #8
 80086ce:	46bd      	mov	sp, r7
 80086d0:	bd80      	pop	{r7, pc}

080086d2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80086d2:	b580      	push	{r7, lr}
 80086d4:	b08a      	sub	sp, #40	; 0x28
 80086d6:	af02      	add	r7, sp, #8
 80086d8:	60f8      	str	r0, [r7, #12]
 80086da:	60b9      	str	r1, [r7, #8]
 80086dc:	603b      	str	r3, [r7, #0]
 80086de:	4613      	mov	r3, r2
 80086e0:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80086e2:	2300      	movs	r3, #0
 80086e4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80086e6:	68fb      	ldr	r3, [r7, #12]
 80086e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80086ec:	b2db      	uxtb	r3, r3
 80086ee:	2b20      	cmp	r3, #32
 80086f0:	d17c      	bne.n	80087ec <HAL_UART_Transmit+0x11a>
  {
    if ((pData == NULL) || (Size == 0U))
 80086f2:	68bb      	ldr	r3, [r7, #8]
 80086f4:	2b00      	cmp	r3, #0
 80086f6:	d002      	beq.n	80086fe <HAL_UART_Transmit+0x2c>
 80086f8:	88fb      	ldrh	r3, [r7, #6]
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d101      	bne.n	8008702 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80086fe:	2301      	movs	r3, #1
 8008700:	e075      	b.n	80087ee <HAL_UART_Transmit+0x11c>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008702:	68fb      	ldr	r3, [r7, #12]
 8008704:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008708:	2b01      	cmp	r3, #1
 800870a:	d101      	bne.n	8008710 <HAL_UART_Transmit+0x3e>
 800870c:	2302      	movs	r3, #2
 800870e:	e06e      	b.n	80087ee <HAL_UART_Transmit+0x11c>
 8008710:	68fb      	ldr	r3, [r7, #12]
 8008712:	2201      	movs	r2, #1
 8008714:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008718:	68fb      	ldr	r3, [r7, #12]
 800871a:	2200      	movs	r2, #0
 800871c:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800871e:	68fb      	ldr	r3, [r7, #12]
 8008720:	2221      	movs	r2, #33	; 0x21
 8008722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8008726:	f7fd fda5 	bl	8006274 <HAL_GetTick>
 800872a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 800872c:	68fb      	ldr	r3, [r7, #12]
 800872e:	88fa      	ldrh	r2, [r7, #6]
 8008730:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008732:	68fb      	ldr	r3, [r7, #12]
 8008734:	88fa      	ldrh	r2, [r7, #6]
 8008736:	84da      	strh	r2, [r3, #38]	; 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008738:	68fb      	ldr	r3, [r7, #12]
 800873a:	689b      	ldr	r3, [r3, #8]
 800873c:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008740:	d108      	bne.n	8008754 <HAL_UART_Transmit+0x82>
 8008742:	68fb      	ldr	r3, [r7, #12]
 8008744:	691b      	ldr	r3, [r3, #16]
 8008746:	2b00      	cmp	r3, #0
 8008748:	d104      	bne.n	8008754 <HAL_UART_Transmit+0x82>
    {
      pdata8bits  = NULL;
 800874a:	2300      	movs	r3, #0
 800874c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 800874e:	68bb      	ldr	r3, [r7, #8]
 8008750:	61bb      	str	r3, [r7, #24]
 8008752:	e003      	b.n	800875c <HAL_UART_Transmit+0x8a>
    }
    else
    {
      pdata8bits  = pData;
 8008754:	68bb      	ldr	r3, [r7, #8]
 8008756:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8008758:	2300      	movs	r3, #0
 800875a:	61bb      	str	r3, [r7, #24]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800875c:	68fb      	ldr	r3, [r7, #12]
 800875e:	2200      	movs	r2, #0
 8008760:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    while (huart->TxXferCount > 0U)
 8008764:	e02a      	b.n	80087bc <HAL_UART_Transmit+0xea>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8008766:	683b      	ldr	r3, [r7, #0]
 8008768:	9300      	str	r3, [sp, #0]
 800876a:	697b      	ldr	r3, [r7, #20]
 800876c:	2200      	movs	r2, #0
 800876e:	2180      	movs	r1, #128	; 0x80
 8008770:	68f8      	ldr	r0, [r7, #12]
 8008772:	f000 fb1f 	bl	8008db4 <UART_WaitOnFlagUntilTimeout>
 8008776:	4603      	mov	r3, r0
 8008778:	2b00      	cmp	r3, #0
 800877a:	d001      	beq.n	8008780 <HAL_UART_Transmit+0xae>
      {
        return HAL_TIMEOUT;
 800877c:	2303      	movs	r3, #3
 800877e:	e036      	b.n	80087ee <HAL_UART_Transmit+0x11c>
      }
      if (pdata8bits == NULL)
 8008780:	69fb      	ldr	r3, [r7, #28]
 8008782:	2b00      	cmp	r3, #0
 8008784:	d10b      	bne.n	800879e <HAL_UART_Transmit+0xcc>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8008786:	69bb      	ldr	r3, [r7, #24]
 8008788:	881b      	ldrh	r3, [r3, #0]
 800878a:	461a      	mov	r2, r3
 800878c:	68fb      	ldr	r3, [r7, #12]
 800878e:	681b      	ldr	r3, [r3, #0]
 8008790:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008794:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8008796:	69bb      	ldr	r3, [r7, #24]
 8008798:	3302      	adds	r3, #2
 800879a:	61bb      	str	r3, [r7, #24]
 800879c:	e007      	b.n	80087ae <HAL_UART_Transmit+0xdc>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 800879e:	69fb      	ldr	r3, [r7, #28]
 80087a0:	781a      	ldrb	r2, [r3, #0]
 80087a2:	68fb      	ldr	r3, [r7, #12]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80087a8:	69fb      	ldr	r3, [r7, #28]
 80087aa:	3301      	adds	r3, #1
 80087ac:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80087ae:	68fb      	ldr	r3, [r7, #12]
 80087b0:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087b2:	b29b      	uxth	r3, r3
 80087b4:	3b01      	subs	r3, #1
 80087b6:	b29a      	uxth	r2, r3
 80087b8:	68fb      	ldr	r3, [r7, #12]
 80087ba:	84da      	strh	r2, [r3, #38]	; 0x26
    while (huart->TxXferCount > 0U)
 80087bc:	68fb      	ldr	r3, [r7, #12]
 80087be:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 80087c0:	b29b      	uxth	r3, r3
 80087c2:	2b00      	cmp	r3, #0
 80087c4:	d1cf      	bne.n	8008766 <HAL_UART_Transmit+0x94>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80087c6:	683b      	ldr	r3, [r7, #0]
 80087c8:	9300      	str	r3, [sp, #0]
 80087ca:	697b      	ldr	r3, [r7, #20]
 80087cc:	2200      	movs	r2, #0
 80087ce:	2140      	movs	r1, #64	; 0x40
 80087d0:	68f8      	ldr	r0, [r7, #12]
 80087d2:	f000 faef 	bl	8008db4 <UART_WaitOnFlagUntilTimeout>
 80087d6:	4603      	mov	r3, r0
 80087d8:	2b00      	cmp	r3, #0
 80087da:	d001      	beq.n	80087e0 <HAL_UART_Transmit+0x10e>
    {
      return HAL_TIMEOUT;
 80087dc:	2303      	movs	r3, #3
 80087de:	e006      	b.n	80087ee <HAL_UART_Transmit+0x11c>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80087e0:	68fb      	ldr	r3, [r7, #12]
 80087e2:	2220      	movs	r2, #32
 80087e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    return HAL_OK;
 80087e8:	2300      	movs	r3, #0
 80087ea:	e000      	b.n	80087ee <HAL_UART_Transmit+0x11c>
  }
  else
  {
    return HAL_BUSY;
 80087ec:	2302      	movs	r3, #2
  }
}
 80087ee:	4618      	mov	r0, r3
 80087f0:	3720      	adds	r7, #32
 80087f2:	46bd      	mov	sp, r7
 80087f4:	bd80      	pop	{r7, pc}

080087f6 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80087f6:	b580      	push	{r7, lr}
 80087f8:	b084      	sub	sp, #16
 80087fa:	af00      	add	r7, sp, #0
 80087fc:	60f8      	str	r0, [r7, #12]
 80087fe:	60b9      	str	r1, [r7, #8]
 8008800:	4613      	mov	r3, r2
 8008802:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8008804:	68fb      	ldr	r3, [r7, #12]
 8008806:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800880a:	b2db      	uxtb	r3, r3
 800880c:	2b20      	cmp	r3, #32
 800880e:	d11d      	bne.n	800884c <HAL_UART_Receive_IT+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008810:	68bb      	ldr	r3, [r7, #8]
 8008812:	2b00      	cmp	r3, #0
 8008814:	d002      	beq.n	800881c <HAL_UART_Receive_IT+0x26>
 8008816:	88fb      	ldrh	r3, [r7, #6]
 8008818:	2b00      	cmp	r3, #0
 800881a:	d101      	bne.n	8008820 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 800881c:	2301      	movs	r3, #1
 800881e:	e016      	b.n	800884e <HAL_UART_Receive_IT+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008820:	68fb      	ldr	r3, [r7, #12]
 8008822:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008826:	2b01      	cmp	r3, #1
 8008828:	d101      	bne.n	800882e <HAL_UART_Receive_IT+0x38>
 800882a:	2302      	movs	r3, #2
 800882c:	e00f      	b.n	800884e <HAL_UART_Receive_IT+0x58>
 800882e:	68fb      	ldr	r3, [r7, #12]
 8008830:	2201      	movs	r2, #1
 8008832:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008836:	68fb      	ldr	r3, [r7, #12]
 8008838:	2200      	movs	r2, #0
 800883a:	631a      	str	r2, [r3, #48]	; 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 800883c:	88fb      	ldrh	r3, [r7, #6]
 800883e:	461a      	mov	r2, r3
 8008840:	68b9      	ldr	r1, [r7, #8]
 8008842:	68f8      	ldr	r0, [r7, #12]
 8008844:	f000 fb24 	bl	8008e90 <UART_Start_Receive_IT>
 8008848:	4603      	mov	r3, r0
 800884a:	e000      	b.n	800884e <HAL_UART_Receive_IT+0x58>
  }
  else
  {
    return HAL_BUSY;
 800884c:	2302      	movs	r3, #2
  }
}
 800884e:	4618      	mov	r0, r3
 8008850:	3710      	adds	r7, #16
 8008852:	46bd      	mov	sp, r7
 8008854:	bd80      	pop	{r7, pc}
	...

08008858 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008858:	b580      	push	{r7, lr}
 800885a:	b0ba      	sub	sp, #232	; 0xe8
 800885c:	af00      	add	r7, sp, #0
 800885e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	681b      	ldr	r3, [r3, #0]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800886a:	687b      	ldr	r3, [r7, #4]
 800886c:	681b      	ldr	r3, [r3, #0]
 800886e:	68db      	ldr	r3, [r3, #12]
 8008870:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008874:	687b      	ldr	r3, [r7, #4]
 8008876:	681b      	ldr	r3, [r3, #0]
 8008878:	695b      	ldr	r3, [r3, #20]
 800887a:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
  uint32_t errorflags = 0x00U;
 800887e:	2300      	movs	r3, #0
 8008880:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  uint32_t dmarequest = 0x00U;
 8008884:	2300      	movs	r3, #0
 8008886:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 800888a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800888e:	f003 030f 	and.w	r3, r3, #15
 8008892:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
  if (errorflags == RESET)
 8008896:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 800889a:	2b00      	cmp	r3, #0
 800889c:	d10f      	bne.n	80088be <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800889e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088a2:	f003 0320 	and.w	r3, r3, #32
 80088a6:	2b00      	cmp	r3, #0
 80088a8:	d009      	beq.n	80088be <HAL_UART_IRQHandler+0x66>
 80088aa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088ae:	f003 0320 	and.w	r3, r3, #32
 80088b2:	2b00      	cmp	r3, #0
 80088b4:	d003      	beq.n	80088be <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80088b6:	6878      	ldr	r0, [r7, #4]
 80088b8:	f000 fc03 	bl	80090c2 <UART_Receive_IT>
      return;
 80088bc:	e256      	b.n	8008d6c <HAL_UART_IRQHandler+0x514>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80088be:	f8d7 30d8 	ldr.w	r3, [r7, #216]	; 0xd8
 80088c2:	2b00      	cmp	r3, #0
 80088c4:	f000 80de 	beq.w	8008a84 <HAL_UART_IRQHandler+0x22c>
 80088c8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 80088cc:	f003 0301 	and.w	r3, r3, #1
 80088d0:	2b00      	cmp	r3, #0
 80088d2:	d106      	bne.n	80088e2 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80088d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088d8:	f403 7390 	and.w	r3, r3, #288	; 0x120
 80088dc:	2b00      	cmp	r3, #0
 80088de:	f000 80d1 	beq.w	8008a84 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 80088e2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80088e6:	f003 0301 	and.w	r3, r3, #1
 80088ea:	2b00      	cmp	r3, #0
 80088ec:	d00b      	beq.n	8008906 <HAL_UART_IRQHandler+0xae>
 80088ee:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 80088f2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088f6:	2b00      	cmp	r3, #0
 80088f8:	d005      	beq.n	8008906 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80088fa:	687b      	ldr	r3, [r7, #4]
 80088fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80088fe:	f043 0201 	orr.w	r2, r3, #1
 8008902:	687b      	ldr	r3, [r7, #4]
 8008904:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8008906:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800890a:	f003 0304 	and.w	r3, r3, #4
 800890e:	2b00      	cmp	r3, #0
 8008910:	d00b      	beq.n	800892a <HAL_UART_IRQHandler+0xd2>
 8008912:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 8008916:	f003 0301 	and.w	r3, r3, #1
 800891a:	2b00      	cmp	r3, #0
 800891c:	d005      	beq.n	800892a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 800891e:	687b      	ldr	r3, [r7, #4]
 8008920:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008922:	f043 0202 	orr.w	r2, r3, #2
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800892a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800892e:	f003 0302 	and.w	r3, r3, #2
 8008932:	2b00      	cmp	r3, #0
 8008934:	d00b      	beq.n	800894e <HAL_UART_IRQHandler+0xf6>
 8008936:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800893a:	f003 0301 	and.w	r3, r3, #1
 800893e:	2b00      	cmp	r3, #0
 8008940:	d005      	beq.n	800894e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8008942:	687b      	ldr	r3, [r7, #4]
 8008944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008946:	f043 0204 	orr.w	r2, r3, #4
 800894a:	687b      	ldr	r3, [r7, #4]
 800894c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 800894e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008952:	f003 0308 	and.w	r3, r3, #8
 8008956:	2b00      	cmp	r3, #0
 8008958:	d011      	beq.n	800897e <HAL_UART_IRQHandler+0x126>
 800895a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 800895e:	f003 0320 	and.w	r3, r3, #32
 8008962:	2b00      	cmp	r3, #0
 8008964:	d105      	bne.n	8008972 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8008966:	f8d7 30dc 	ldr.w	r3, [r7, #220]	; 0xdc
 800896a:	f003 0301 	and.w	r3, r3, #1
 800896e:	2b00      	cmp	r3, #0
 8008970:	d005      	beq.n	800897e <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8008972:	687b      	ldr	r3, [r7, #4]
 8008974:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008976:	f043 0208 	orr.w	r2, r3, #8
 800897a:	687b      	ldr	r3, [r7, #4]
 800897c:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800897e:	687b      	ldr	r3, [r7, #4]
 8008980:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008982:	2b00      	cmp	r3, #0
 8008984:	f000 81ed 	beq.w	8008d62 <HAL_UART_IRQHandler+0x50a>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008988:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800898c:	f003 0320 	and.w	r3, r3, #32
 8008990:	2b00      	cmp	r3, #0
 8008992:	d008      	beq.n	80089a6 <HAL_UART_IRQHandler+0x14e>
 8008994:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008998:	f003 0320 	and.w	r3, r3, #32
 800899c:	2b00      	cmp	r3, #0
 800899e:	d002      	beq.n	80089a6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80089a0:	6878      	ldr	r0, [r7, #4]
 80089a2:	f000 fb8e 	bl	80090c2 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	681b      	ldr	r3, [r3, #0]
 80089aa:	695b      	ldr	r3, [r3, #20]
 80089ac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089b0:	2b40      	cmp	r3, #64	; 0x40
 80089b2:	bf0c      	ite	eq
 80089b4:	2301      	moveq	r3, #1
 80089b6:	2300      	movne	r3, #0
 80089b8:	b2db      	uxtb	r3, r3
 80089ba:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80089be:	687b      	ldr	r3, [r7, #4]
 80089c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80089c2:	f003 0308 	and.w	r3, r3, #8
 80089c6:	2b00      	cmp	r3, #0
 80089c8:	d103      	bne.n	80089d2 <HAL_UART_IRQHandler+0x17a>
 80089ca:	f8d7 30d4 	ldr.w	r3, [r7, #212]	; 0xd4
 80089ce:	2b00      	cmp	r3, #0
 80089d0:	d04f      	beq.n	8008a72 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80089d2:	6878      	ldr	r0, [r7, #4]
 80089d4:	f000 fa96 	bl	8008f04 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80089d8:	687b      	ldr	r3, [r7, #4]
 80089da:	681b      	ldr	r3, [r3, #0]
 80089dc:	695b      	ldr	r3, [r3, #20]
 80089de:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80089e2:	2b40      	cmp	r3, #64	; 0x40
 80089e4:	d141      	bne.n	8008a6a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80089e6:	687b      	ldr	r3, [r7, #4]
 80089e8:	681b      	ldr	r3, [r3, #0]
 80089ea:	3314      	adds	r3, #20
 80089ec:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80089f0:	f8d7 309c 	ldr.w	r3, [r7, #156]	; 0x9c
 80089f4:	e853 3f00 	ldrex	r3, [r3]
 80089f8:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
   return(result);
 80089fc:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8008a00:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008a04:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8008a08:	687b      	ldr	r3, [r7, #4]
 8008a0a:	681b      	ldr	r3, [r3, #0]
 8008a0c:	3314      	adds	r3, #20
 8008a0e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	; 0xd0
 8008a12:	f8c7 20a8 	str.w	r2, [r7, #168]	; 0xa8
 8008a16:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008a1a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	; 0xa4
 8008a1e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	; 0xa8
 8008a22:	e841 2300 	strex	r3, r2, [r1]
 8008a26:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
   return(result);
 8008a2a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8008a2e:	2b00      	cmp	r3, #0
 8008a30:	d1d9      	bne.n	80089e6 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008a32:	687b      	ldr	r3, [r7, #4]
 8008a34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a36:	2b00      	cmp	r3, #0
 8008a38:	d013      	beq.n	8008a62 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008a3a:	687b      	ldr	r3, [r7, #4]
 8008a3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a3e:	4a7d      	ldr	r2, [pc, #500]	; (8008c34 <HAL_UART_IRQHandler+0x3dc>)
 8008a40:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008a42:	687b      	ldr	r3, [r7, #4]
 8008a44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a46:	4618      	mov	r0, r3
 8008a48:	f7fd fddf 	bl	800660a <HAL_DMA_Abort_IT>
 8008a4c:	4603      	mov	r3, r0
 8008a4e:	2b00      	cmp	r3, #0
 8008a50:	d016      	beq.n	8008a80 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008a52:	687b      	ldr	r3, [r7, #4]
 8008a54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8008a58:	687a      	ldr	r2, [r7, #4]
 8008a5a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008a5c:	4610      	mov	r0, r2
 8008a5e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a60:	e00e      	b.n	8008a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008a62:	6878      	ldr	r0, [r7, #4]
 8008a64:	f000 f990 	bl	8008d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a68:	e00a      	b.n	8008a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8008a6a:	6878      	ldr	r0, [r7, #4]
 8008a6c:	f000 f98c 	bl	8008d88 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a70:	e006      	b.n	8008a80 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008a72:	6878      	ldr	r0, [r7, #4]
 8008a74:	f000 f988 	bl	8008d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a78:	687b      	ldr	r3, [r7, #4]
 8008a7a:	2200      	movs	r2, #0
 8008a7c:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008a7e:	e170      	b.n	8008d62 <HAL_UART_IRQHandler+0x50a>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008a80:	bf00      	nop
    return;
 8008a82:	e16e      	b.n	8008d62 <HAL_UART_IRQHandler+0x50a>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008a84:	687b      	ldr	r3, [r7, #4]
 8008a86:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008a88:	2b01      	cmp	r3, #1
 8008a8a:	f040 814a 	bne.w	8008d22 <HAL_UART_IRQHandler+0x4ca>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8008a8e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008a92:	f003 0310 	and.w	r3, r3, #16
 8008a96:	2b00      	cmp	r3, #0
 8008a98:	f000 8143 	beq.w	8008d22 <HAL_UART_IRQHandler+0x4ca>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8008a9c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008aa0:	f003 0310 	and.w	r3, r3, #16
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 813c 	beq.w	8008d22 <HAL_UART_IRQHandler+0x4ca>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8008aaa:	2300      	movs	r3, #0
 8008aac:	60bb      	str	r3, [r7, #8]
 8008aae:	687b      	ldr	r3, [r7, #4]
 8008ab0:	681b      	ldr	r3, [r3, #0]
 8008ab2:	681b      	ldr	r3, [r3, #0]
 8008ab4:	60bb      	str	r3, [r7, #8]
 8008ab6:	687b      	ldr	r3, [r7, #4]
 8008ab8:	681b      	ldr	r3, [r3, #0]
 8008aba:	685b      	ldr	r3, [r3, #4]
 8008abc:	60bb      	str	r3, [r7, #8]
 8008abe:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008ac0:	687b      	ldr	r3, [r7, #4]
 8008ac2:	681b      	ldr	r3, [r3, #0]
 8008ac4:	695b      	ldr	r3, [r3, #20]
 8008ac6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008aca:	2b40      	cmp	r3, #64	; 0x40
 8008acc:	f040 80b4 	bne.w	8008c38 <HAL_UART_IRQHandler+0x3e0>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	685b      	ldr	r3, [r3, #4]
 8008ad8:	f8a7 30be 	strh.w	r3, [r7, #190]	; 0xbe
      if ((nb_remaining_rx_data > 0U)
 8008adc:	f8b7 30be 	ldrh.w	r3, [r7, #190]	; 0xbe
 8008ae0:	2b00      	cmp	r3, #0
 8008ae2:	f000 8140 	beq.w	8008d66 <HAL_UART_IRQHandler+0x50e>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8008ae6:	687b      	ldr	r3, [r7, #4]
 8008ae8:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008aea:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008aee:	429a      	cmp	r2, r3
 8008af0:	f080 8139 	bcs.w	8008d66 <HAL_UART_IRQHandler+0x50e>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008af4:	687b      	ldr	r3, [r7, #4]
 8008af6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	; 0xbe
 8008afa:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b00:	69db      	ldr	r3, [r3, #28]
 8008b02:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008b06:	f000 8088 	beq.w	8008c1a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b0a:	687b      	ldr	r3, [r7, #4]
 8008b0c:	681b      	ldr	r3, [r3, #0]
 8008b0e:	330c      	adds	r3, #12
 8008b10:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b14:	f8d7 3088 	ldr.w	r3, [r7, #136]	; 0x88
 8008b18:	e853 3f00 	ldrex	r3, [r3]
 8008b1c:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
   return(result);
 8008b20:	f8d7 3084 	ldr.w	r3, [r7, #132]	; 0x84
 8008b24:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8008b28:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 8008b2c:	687b      	ldr	r3, [r7, #4]
 8008b2e:	681b      	ldr	r3, [r3, #0]
 8008b30:	330c      	adds	r3, #12
 8008b32:	f8d7 20b8 	ldr.w	r2, [r7, #184]	; 0xb8
 8008b36:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8008b3a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b3e:	f8d7 1090 	ldr.w	r1, [r7, #144]	; 0x90
 8008b42:	f8d7 2094 	ldr.w	r2, [r7, #148]	; 0x94
 8008b46:	e841 2300 	strex	r3, r2, [r1]
 8008b4a:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
   return(result);
 8008b4e:	f8d7 308c 	ldr.w	r3, [r7, #140]	; 0x8c
 8008b52:	2b00      	cmp	r3, #0
 8008b54:	d1d9      	bne.n	8008b0a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	3314      	adds	r3, #20
 8008b5c:	677b      	str	r3, [r7, #116]	; 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b5e:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008b60:	e853 3f00 	ldrex	r3, [r3]
 8008b64:	673b      	str	r3, [r7, #112]	; 0x70
   return(result);
 8008b66:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008b68:	f023 0301 	bic.w	r3, r3, #1
 8008b6c:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8008b70:	687b      	ldr	r3, [r7, #4]
 8008b72:	681b      	ldr	r3, [r3, #0]
 8008b74:	3314      	adds	r3, #20
 8008b76:	f8d7 20b4 	ldr.w	r2, [r7, #180]	; 0xb4
 8008b7a:	f8c7 2080 	str.w	r2, [r7, #128]	; 0x80
 8008b7e:	67fb      	str	r3, [r7, #124]	; 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008b80:	6ff9      	ldr	r1, [r7, #124]	; 0x7c
 8008b82:	f8d7 2080 	ldr.w	r2, [r7, #128]	; 0x80
 8008b86:	e841 2300 	strex	r3, r2, [r1]
 8008b8a:	67bb      	str	r3, [r7, #120]	; 0x78
   return(result);
 8008b8c:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d1e1      	bne.n	8008b56 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	3314      	adds	r3, #20
 8008b98:	663b      	str	r3, [r7, #96]	; 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008b9a:	6e3b      	ldr	r3, [r7, #96]	; 0x60
 8008b9c:	e853 3f00 	ldrex	r3, [r3]
 8008ba0:	65fb      	str	r3, [r7, #92]	; 0x5c
   return(result);
 8008ba2:	6dfb      	ldr	r3, [r7, #92]	; 0x5c
 8008ba4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8008ba8:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8008bac:	687b      	ldr	r3, [r7, #4]
 8008bae:	681b      	ldr	r3, [r3, #0]
 8008bb0:	3314      	adds	r3, #20
 8008bb2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	; 0xb0
 8008bb6:	66fa      	str	r2, [r7, #108]	; 0x6c
 8008bb8:	66bb      	str	r3, [r7, #104]	; 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008bba:	6eb9      	ldr	r1, [r7, #104]	; 0x68
 8008bbc:	6efa      	ldr	r2, [r7, #108]	; 0x6c
 8008bbe:	e841 2300 	strex	r3, r2, [r1]
 8008bc2:	667b      	str	r3, [r7, #100]	; 0x64
   return(result);
 8008bc4:	6e7b      	ldr	r3, [r7, #100]	; 0x64
 8008bc6:	2b00      	cmp	r3, #0
 8008bc8:	d1e3      	bne.n	8008b92 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008bca:	687b      	ldr	r3, [r7, #4]
 8008bcc:	2220      	movs	r2, #32
 8008bce:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bd2:	687b      	ldr	r3, [r7, #4]
 8008bd4:	2200      	movs	r2, #0
 8008bd6:	631a      	str	r2, [r3, #48]	; 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008bd8:	687b      	ldr	r3, [r7, #4]
 8008bda:	681b      	ldr	r3, [r3, #0]
 8008bdc:	330c      	adds	r3, #12
 8008bde:	64fb      	str	r3, [r7, #76]	; 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008be0:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 8008be2:	e853 3f00 	ldrex	r3, [r3]
 8008be6:	64bb      	str	r3, [r7, #72]	; 0x48
   return(result);
 8008be8:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008bea:	f023 0310 	bic.w	r3, r3, #16
 8008bee:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8008bf2:	687b      	ldr	r3, [r7, #4]
 8008bf4:	681b      	ldr	r3, [r3, #0]
 8008bf6:	330c      	adds	r3, #12
 8008bf8:	f8d7 20ac 	ldr.w	r2, [r7, #172]	; 0xac
 8008bfc:	65ba      	str	r2, [r7, #88]	; 0x58
 8008bfe:	657b      	str	r3, [r7, #84]	; 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c00:	6d79      	ldr	r1, [r7, #84]	; 0x54
 8008c02:	6dba      	ldr	r2, [r7, #88]	; 0x58
 8008c04:	e841 2300 	strex	r3, r2, [r1]
 8008c08:	653b      	str	r3, [r7, #80]	; 0x50
   return(result);
 8008c0a:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8008c0c:	2b00      	cmp	r3, #0
 8008c0e:	d1e3      	bne.n	8008bd8 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008c10:	687b      	ldr	r3, [r7, #4]
 8008c12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008c14:	4618      	mov	r0, r3
 8008c16:	f7fd fc88 	bl	800652a <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008c1a:	687b      	ldr	r3, [r7, #4]
 8008c1c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c1e:	687b      	ldr	r3, [r7, #4]
 8008c20:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c22:	b29b      	uxth	r3, r3
 8008c24:	1ad3      	subs	r3, r2, r3
 8008c26:	b29b      	uxth	r3, r3
 8008c28:	4619      	mov	r1, r3
 8008c2a:	6878      	ldr	r0, [r7, #4]
 8008c2c:	f000 f8b6 	bl	8008d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008c30:	e099      	b.n	8008d66 <HAL_UART_IRQHandler+0x50e>
 8008c32:	bf00      	nop
 8008c34:	08008fcb 	.word	0x08008fcb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008c3c:	687b      	ldr	r3, [r7, #4]
 8008c3e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c40:	b29b      	uxth	r3, r3
 8008c42:	1ad3      	subs	r3, r2, r3
 8008c44:	f8a7 30ce 	strh.w	r3, [r7, #206]	; 0xce
      if ((huart->RxXferCount > 0U)
 8008c48:	687b      	ldr	r3, [r7, #4]
 8008c4a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c4c:	b29b      	uxth	r3, r3
 8008c4e:	2b00      	cmp	r3, #0
 8008c50:	f000 808b 	beq.w	8008d6a <HAL_UART_IRQHandler+0x512>
          && (nb_rx_data > 0U))
 8008c54:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008c58:	2b00      	cmp	r3, #0
 8008c5a:	f000 8086 	beq.w	8008d6a <HAL_UART_IRQHandler+0x512>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008c5e:	687b      	ldr	r3, [r7, #4]
 8008c60:	681b      	ldr	r3, [r3, #0]
 8008c62:	330c      	adds	r3, #12
 8008c64:	63bb      	str	r3, [r7, #56]	; 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008c68:	e853 3f00 	ldrex	r3, [r3]
 8008c6c:	637b      	str	r3, [r7, #52]	; 0x34
   return(result);
 8008c6e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008c70:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008c74:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	330c      	adds	r3, #12
 8008c7e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	; 0xc8
 8008c82:	647a      	str	r2, [r7, #68]	; 0x44
 8008c84:	643b      	str	r3, [r7, #64]	; 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008c86:	6c39      	ldr	r1, [r7, #64]	; 0x40
 8008c88:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008c8a:	e841 2300 	strex	r3, r2, [r1]
 8008c8e:	63fb      	str	r3, [r7, #60]	; 0x3c
   return(result);
 8008c90:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8008c92:	2b00      	cmp	r3, #0
 8008c94:	d1e3      	bne.n	8008c5e <HAL_UART_IRQHandler+0x406>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c96:	687b      	ldr	r3, [r7, #4]
 8008c98:	681b      	ldr	r3, [r3, #0]
 8008c9a:	3314      	adds	r3, #20
 8008c9c:	627b      	str	r3, [r7, #36]	; 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008ca0:	e853 3f00 	ldrex	r3, [r3]
 8008ca4:	623b      	str	r3, [r7, #32]
   return(result);
 8008ca6:	6a3b      	ldr	r3, [r7, #32]
 8008ca8:	f023 0301 	bic.w	r3, r3, #1
 8008cac:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	3314      	adds	r3, #20
 8008cb6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	; 0xc4
 8008cba:	633a      	str	r2, [r7, #48]	; 0x30
 8008cbc:	62fb      	str	r3, [r7, #44]	; 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008cbe:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 8008cc0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8008cc2:	e841 2300 	strex	r3, r2, [r1]
 8008cc6:	62bb      	str	r3, [r7, #40]	; 0x28
   return(result);
 8008cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008cca:	2b00      	cmp	r3, #0
 8008ccc:	d1e3      	bne.n	8008c96 <HAL_UART_IRQHandler+0x43e>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	2220      	movs	r2, #32
 8008cd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2200      	movs	r2, #0
 8008cda:	631a      	str	r2, [r3, #48]	; 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	681b      	ldr	r3, [r3, #0]
 8008ce0:	330c      	adds	r3, #12
 8008ce2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008ce4:	693b      	ldr	r3, [r7, #16]
 8008ce6:	e853 3f00 	ldrex	r3, [r3]
 8008cea:	60fb      	str	r3, [r7, #12]
   return(result);
 8008cec:	68fb      	ldr	r3, [r7, #12]
 8008cee:	f023 0310 	bic.w	r3, r3, #16
 8008cf2:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 8008cf6:	687b      	ldr	r3, [r7, #4]
 8008cf8:	681b      	ldr	r3, [r3, #0]
 8008cfa:	330c      	adds	r3, #12
 8008cfc:	f8d7 20c0 	ldr.w	r2, [r7, #192]	; 0xc0
 8008d00:	61fa      	str	r2, [r7, #28]
 8008d02:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008d04:	69b9      	ldr	r1, [r7, #24]
 8008d06:	69fa      	ldr	r2, [r7, #28]
 8008d08:	e841 2300 	strex	r3, r2, [r1]
 8008d0c:	617b      	str	r3, [r7, #20]
   return(result);
 8008d0e:	697b      	ldr	r3, [r7, #20]
 8008d10:	2b00      	cmp	r3, #0
 8008d12:	d1e3      	bne.n	8008cdc <HAL_UART_IRQHandler+0x484>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8008d14:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	; 0xce
 8008d18:	4619      	mov	r1, r3
 8008d1a:	6878      	ldr	r0, [r7, #4]
 8008d1c:	f000 f83e 	bl	8008d9c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8008d20:	e023      	b.n	8008d6a <HAL_UART_IRQHandler+0x512>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008d22:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d2a:	2b00      	cmp	r3, #0
 8008d2c:	d009      	beq.n	8008d42 <HAL_UART_IRQHandler+0x4ea>
 8008d2e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d32:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d003      	beq.n	8008d42 <HAL_UART_IRQHandler+0x4ea>
  {
    UART_Transmit_IT(huart);
 8008d3a:	6878      	ldr	r0, [r7, #4]
 8008d3c:	f000 f959 	bl	8008ff2 <UART_Transmit_IT>
    return;
 8008d40:	e014      	b.n	8008d6c <HAL_UART_IRQHandler+0x514>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008d42:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8008d46:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d4a:	2b00      	cmp	r3, #0
 8008d4c:	d00e      	beq.n	8008d6c <HAL_UART_IRQHandler+0x514>
 8008d4e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	; 0xe0
 8008d52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008d56:	2b00      	cmp	r3, #0
 8008d58:	d008      	beq.n	8008d6c <HAL_UART_IRQHandler+0x514>
  {
    UART_EndTransmit_IT(huart);
 8008d5a:	6878      	ldr	r0, [r7, #4]
 8008d5c:	f000 f999 	bl	8009092 <UART_EndTransmit_IT>
    return;
 8008d60:	e004      	b.n	8008d6c <HAL_UART_IRQHandler+0x514>
    return;
 8008d62:	bf00      	nop
 8008d64:	e002      	b.n	8008d6c <HAL_UART_IRQHandler+0x514>
      return;
 8008d66:	bf00      	nop
 8008d68:	e000      	b.n	8008d6c <HAL_UART_IRQHandler+0x514>
      return;
 8008d6a:	bf00      	nop
  }
}
 8008d6c:	37e8      	adds	r7, #232	; 0xe8
 8008d6e:	46bd      	mov	sp, r7
 8008d70:	bd80      	pop	{r7, pc}
 8008d72:	bf00      	nop

08008d74 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008d74:	b480      	push	{r7}
 8008d76:	b083      	sub	sp, #12
 8008d78:	af00      	add	r7, sp, #0
 8008d7a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008d7c:	bf00      	nop
 8008d7e:	370c      	adds	r7, #12
 8008d80:	46bd      	mov	sp, r7
 8008d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d86:	4770      	bx	lr

08008d88 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008d88:	b480      	push	{r7}
 8008d8a:	b083      	sub	sp, #12
 8008d8c:	af00      	add	r7, sp, #0
 8008d8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8008d90:	bf00      	nop
 8008d92:	370c      	adds	r7, #12
 8008d94:	46bd      	mov	sp, r7
 8008d96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d9a:	4770      	bx	lr

08008d9c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008d9c:	b480      	push	{r7}
 8008d9e:	b083      	sub	sp, #12
 8008da0:	af00      	add	r7, sp, #0
 8008da2:	6078      	str	r0, [r7, #4]
 8008da4:	460b      	mov	r3, r1
 8008da6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8008da8:	bf00      	nop
 8008daa:	370c      	adds	r7, #12
 8008dac:	46bd      	mov	sp, r7
 8008dae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008db2:	4770      	bx	lr

08008db4 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8008db4:	b580      	push	{r7, lr}
 8008db6:	b090      	sub	sp, #64	; 0x40
 8008db8:	af00      	add	r7, sp, #0
 8008dba:	60f8      	str	r0, [r7, #12]
 8008dbc:	60b9      	str	r1, [r7, #8]
 8008dbe:	603b      	str	r3, [r7, #0]
 8008dc0:	4613      	mov	r3, r2
 8008dc2:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008dc4:	e050      	b.n	8008e68 <UART_WaitOnFlagUntilTimeout+0xb4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8008dc6:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dc8:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008dcc:	d04c      	beq.n	8008e68 <UART_WaitOnFlagUntilTimeout+0xb4>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - Tickstart) > Timeout))
 8008dce:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8008dd0:	2b00      	cmp	r3, #0
 8008dd2:	d007      	beq.n	8008de4 <UART_WaitOnFlagUntilTimeout+0x30>
 8008dd4:	f7fd fa4e 	bl	8006274 <HAL_GetTick>
 8008dd8:	4602      	mov	r2, r0
 8008dda:	683b      	ldr	r3, [r7, #0]
 8008ddc:	1ad3      	subs	r3, r2, r3
 8008dde:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008de0:	429a      	cmp	r2, r3
 8008de2:	d241      	bcs.n	8008e68 <UART_WaitOnFlagUntilTimeout+0xb4>
      {
        /* Disable TXE, RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts for the interrupt process */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_TXEIE));
 8008de4:	68fb      	ldr	r3, [r7, #12]
 8008de6:	681b      	ldr	r3, [r3, #0]
 8008de8:	330c      	adds	r3, #12
 8008dea:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008dec:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008dee:	e853 3f00 	ldrex	r3, [r3]
 8008df2:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008df4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008df6:	f423 73d0 	bic.w	r3, r3, #416	; 0x1a0
 8008dfa:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008dfc:	68fb      	ldr	r3, [r7, #12]
 8008dfe:	681b      	ldr	r3, [r3, #0]
 8008e00:	330c      	adds	r3, #12
 8008e02:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8008e04:	637a      	str	r2, [r7, #52]	; 0x34
 8008e06:	633b      	str	r3, [r7, #48]	; 0x30
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e08:	6b39      	ldr	r1, [r7, #48]	; 0x30
 8008e0a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 8008e0c:	e841 2300 	strex	r3, r2, [r1]
 8008e10:	62fb      	str	r3, [r7, #44]	; 0x2c
   return(result);
 8008e12:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008e14:	2b00      	cmp	r3, #0
 8008e16:	d1e5      	bne.n	8008de4 <UART_WaitOnFlagUntilTimeout+0x30>
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008e18:	68fb      	ldr	r3, [r7, #12]
 8008e1a:	681b      	ldr	r3, [r3, #0]
 8008e1c:	3314      	adds	r3, #20
 8008e1e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008e20:	697b      	ldr	r3, [r7, #20]
 8008e22:	e853 3f00 	ldrex	r3, [r3]
 8008e26:	613b      	str	r3, [r7, #16]
   return(result);
 8008e28:	693b      	ldr	r3, [r7, #16]
 8008e2a:	f023 0301 	bic.w	r3, r3, #1
 8008e2e:	63bb      	str	r3, [r7, #56]	; 0x38
 8008e30:	68fb      	ldr	r3, [r7, #12]
 8008e32:	681b      	ldr	r3, [r3, #0]
 8008e34:	3314      	adds	r3, #20
 8008e36:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8008e38:	623a      	str	r2, [r7, #32]
 8008e3a:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008e3c:	69f9      	ldr	r1, [r7, #28]
 8008e3e:	6a3a      	ldr	r2, [r7, #32]
 8008e40:	e841 2300 	strex	r3, r2, [r1]
 8008e44:	61bb      	str	r3, [r7, #24]
   return(result);
 8008e46:	69bb      	ldr	r3, [r7, #24]
 8008e48:	2b00      	cmp	r3, #0
 8008e4a:	d1e5      	bne.n	8008e18 <UART_WaitOnFlagUntilTimeout+0x64>

        huart->gState  = HAL_UART_STATE_READY;
 8008e4c:	68fb      	ldr	r3, [r7, #12]
 8008e4e:	2220      	movs	r2, #32
 8008e50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        huart->RxState = HAL_UART_STATE_READY;
 8008e54:	68fb      	ldr	r3, [r7, #12]
 8008e56:	2220      	movs	r2, #32
 8008e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

        /* Process Unlocked */
        __HAL_UNLOCK(huart);
 8008e5c:	68fb      	ldr	r3, [r7, #12]
 8008e5e:	2200      	movs	r2, #0
 8008e60:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_TIMEOUT;
 8008e64:	2303      	movs	r3, #3
 8008e66:	e00f      	b.n	8008e88 <UART_WaitOnFlagUntilTimeout+0xd4>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8008e68:	68fb      	ldr	r3, [r7, #12]
 8008e6a:	681b      	ldr	r3, [r3, #0]
 8008e6c:	681a      	ldr	r2, [r3, #0]
 8008e6e:	68bb      	ldr	r3, [r7, #8]
 8008e70:	4013      	ands	r3, r2
 8008e72:	68ba      	ldr	r2, [r7, #8]
 8008e74:	429a      	cmp	r2, r3
 8008e76:	bf0c      	ite	eq
 8008e78:	2301      	moveq	r3, #1
 8008e7a:	2300      	movne	r3, #0
 8008e7c:	b2db      	uxtb	r3, r3
 8008e7e:	461a      	mov	r2, r3
 8008e80:	79fb      	ldrb	r3, [r7, #7]
 8008e82:	429a      	cmp	r2, r3
 8008e84:	d09f      	beq.n	8008dc6 <UART_WaitOnFlagUntilTimeout+0x12>
      }
    }
  }
  return HAL_OK;
 8008e86:	2300      	movs	r3, #0
}
 8008e88:	4618      	mov	r0, r3
 8008e8a:	3740      	adds	r7, #64	; 0x40
 8008e8c:	46bd      	mov	sp, r7
 8008e8e:	bd80      	pop	{r7, pc}

08008e90 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008e90:	b480      	push	{r7}
 8008e92:	b085      	sub	sp, #20
 8008e94:	af00      	add	r7, sp, #0
 8008e96:	60f8      	str	r0, [r7, #12]
 8008e98:	60b9      	str	r1, [r7, #8]
 8008e9a:	4613      	mov	r3, r2
 8008e9c:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8008e9e:	68fb      	ldr	r3, [r7, #12]
 8008ea0:	68ba      	ldr	r2, [r7, #8]
 8008ea2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008ea4:	68fb      	ldr	r3, [r7, #12]
 8008ea6:	88fa      	ldrh	r2, [r7, #6]
 8008ea8:	859a      	strh	r2, [r3, #44]	; 0x2c
  huart->RxXferCount = Size;
 8008eaa:	68fb      	ldr	r3, [r7, #12]
 8008eac:	88fa      	ldrh	r2, [r7, #6]
 8008eae:	85da      	strh	r2, [r3, #46]	; 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008eb0:	68fb      	ldr	r3, [r7, #12]
 8008eb2:	2200      	movs	r2, #0
 8008eb4:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008eb6:	68fb      	ldr	r3, [r7, #12]
 8008eb8:	2222      	movs	r2, #34	; 0x22
 8008eba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008ebe:	68fb      	ldr	r3, [r7, #12]
 8008ec0:	2200      	movs	r2, #0
 8008ec2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8008ec6:	68fb      	ldr	r3, [r7, #12]
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	68da      	ldr	r2, [r3, #12]
 8008ecc:	68fb      	ldr	r3, [r7, #12]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008ed4:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8008ed6:	68fb      	ldr	r3, [r7, #12]
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	695a      	ldr	r2, [r3, #20]
 8008edc:	68fb      	ldr	r3, [r7, #12]
 8008ede:	681b      	ldr	r3, [r3, #0]
 8008ee0:	f042 0201 	orr.w	r2, r2, #1
 8008ee4:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8008ee6:	68fb      	ldr	r3, [r7, #12]
 8008ee8:	681b      	ldr	r3, [r3, #0]
 8008eea:	68da      	ldr	r2, [r3, #12]
 8008eec:	68fb      	ldr	r3, [r7, #12]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	f042 0220 	orr.w	r2, r2, #32
 8008ef4:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8008ef6:	2300      	movs	r3, #0
}
 8008ef8:	4618      	mov	r0, r3
 8008efa:	3714      	adds	r7, #20
 8008efc:	46bd      	mov	sp, r7
 8008efe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008f02:	4770      	bx	lr

08008f04 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008f04:	b480      	push	{r7}
 8008f06:	b095      	sub	sp, #84	; 0x54
 8008f08:	af00      	add	r7, sp, #0
 8008f0a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008f0c:	687b      	ldr	r3, [r7, #4]
 8008f0e:	681b      	ldr	r3, [r3, #0]
 8008f10:	330c      	adds	r3, #12
 8008f12:	637b      	str	r3, [r7, #52]	; 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f14:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8008f16:	e853 3f00 	ldrex	r3, [r3]
 8008f1a:	633b      	str	r3, [r7, #48]	; 0x30
   return(result);
 8008f1c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8008f1e:	f423 7390 	bic.w	r3, r3, #288	; 0x120
 8008f22:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008f24:	687b      	ldr	r3, [r7, #4]
 8008f26:	681b      	ldr	r3, [r3, #0]
 8008f28:	330c      	adds	r3, #12
 8008f2a:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 8008f2c:	643a      	str	r2, [r7, #64]	; 0x40
 8008f2e:	63fb      	str	r3, [r7, #60]	; 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f30:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 8008f32:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8008f34:	e841 2300 	strex	r3, r2, [r1]
 8008f38:	63bb      	str	r3, [r7, #56]	; 0x38
   return(result);
 8008f3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8008f3c:	2b00      	cmp	r3, #0
 8008f3e:	d1e5      	bne.n	8008f0c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008f40:	687b      	ldr	r3, [r7, #4]
 8008f42:	681b      	ldr	r3, [r3, #0]
 8008f44:	3314      	adds	r3, #20
 8008f46:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f48:	6a3b      	ldr	r3, [r7, #32]
 8008f4a:	e853 3f00 	ldrex	r3, [r3]
 8008f4e:	61fb      	str	r3, [r7, #28]
   return(result);
 8008f50:	69fb      	ldr	r3, [r7, #28]
 8008f52:	f023 0301 	bic.w	r3, r3, #1
 8008f56:	64bb      	str	r3, [r7, #72]	; 0x48
 8008f58:	687b      	ldr	r3, [r7, #4]
 8008f5a:	681b      	ldr	r3, [r3, #0]
 8008f5c:	3314      	adds	r3, #20
 8008f5e:	6cba      	ldr	r2, [r7, #72]	; 0x48
 8008f60:	62fa      	str	r2, [r7, #44]	; 0x2c
 8008f62:	62bb      	str	r3, [r7, #40]	; 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008f64:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 8008f66:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008f68:	e841 2300 	strex	r3, r2, [r1]
 8008f6c:	627b      	str	r3, [r7, #36]	; 0x24
   return(result);
 8008f6e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008f70:	2b00      	cmp	r3, #0
 8008f72:	d1e5      	bne.n	8008f40 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008f74:	687b      	ldr	r3, [r7, #4]
 8008f76:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008f78:	2b01      	cmp	r3, #1
 8008f7a:	d119      	bne.n	8008fb0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008f7c:	687b      	ldr	r3, [r7, #4]
 8008f7e:	681b      	ldr	r3, [r3, #0]
 8008f80:	330c      	adds	r3, #12
 8008f82:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8008f84:	68fb      	ldr	r3, [r7, #12]
 8008f86:	e853 3f00 	ldrex	r3, [r3]
 8008f8a:	60bb      	str	r3, [r7, #8]
   return(result);
 8008f8c:	68bb      	ldr	r3, [r7, #8]
 8008f8e:	f023 0310 	bic.w	r3, r3, #16
 8008f92:	647b      	str	r3, [r7, #68]	; 0x44
 8008f94:	687b      	ldr	r3, [r7, #4]
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	330c      	adds	r3, #12
 8008f9a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8008f9c:	61ba      	str	r2, [r7, #24]
 8008f9e:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8008fa0:	6979      	ldr	r1, [r7, #20]
 8008fa2:	69ba      	ldr	r2, [r7, #24]
 8008fa4:	e841 2300 	strex	r3, r2, [r1]
 8008fa8:	613b      	str	r3, [r7, #16]
   return(result);
 8008faa:	693b      	ldr	r3, [r7, #16]
 8008fac:	2b00      	cmp	r3, #0
 8008fae:	d1e5      	bne.n	8008f7c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008fb0:	687b      	ldr	r3, [r7, #4]
 8008fb2:	2220      	movs	r2, #32
 8008fb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008fb8:	687b      	ldr	r3, [r7, #4]
 8008fba:	2200      	movs	r2, #0
 8008fbc:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008fbe:	bf00      	nop
 8008fc0:	3754      	adds	r7, #84	; 0x54
 8008fc2:	46bd      	mov	sp, r7
 8008fc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008fc8:	4770      	bx	lr

08008fca <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008fca:	b580      	push	{r7, lr}
 8008fcc:	b084      	sub	sp, #16
 8008fce:	af00      	add	r7, sp, #0
 8008fd0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008fd2:	687b      	ldr	r3, [r7, #4]
 8008fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008fd6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008fd8:	68fb      	ldr	r3, [r7, #12]
 8008fda:	2200      	movs	r2, #0
 8008fdc:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008fde:	68fb      	ldr	r3, [r7, #12]
 8008fe0:	2200      	movs	r2, #0
 8008fe2:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008fe4:	68f8      	ldr	r0, [r7, #12]
 8008fe6:	f7ff fecf 	bl	8008d88 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008fea:	bf00      	nop
 8008fec:	3710      	adds	r7, #16
 8008fee:	46bd      	mov	sp, r7
 8008ff0:	bd80      	pop	{r7, pc}

08008ff2 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008ff2:	b480      	push	{r7}
 8008ff4:	b085      	sub	sp, #20
 8008ff6:	af00      	add	r7, sp, #0
 8008ff8:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008ffa:	687b      	ldr	r3, [r7, #4]
 8008ffc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8009000:	b2db      	uxtb	r3, r3
 8009002:	2b21      	cmp	r3, #33	; 0x21
 8009004:	d13e      	bne.n	8009084 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8009006:	687b      	ldr	r3, [r7, #4]
 8009008:	689b      	ldr	r3, [r3, #8]
 800900a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800900e:	d114      	bne.n	800903a <UART_Transmit_IT+0x48>
 8009010:	687b      	ldr	r3, [r7, #4]
 8009012:	691b      	ldr	r3, [r3, #16]
 8009014:	2b00      	cmp	r3, #0
 8009016:	d110      	bne.n	800903a <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8009018:	687b      	ldr	r3, [r7, #4]
 800901a:	6a1b      	ldr	r3, [r3, #32]
 800901c:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800901e:	68fb      	ldr	r3, [r7, #12]
 8009020:	881b      	ldrh	r3, [r3, #0]
 8009022:	461a      	mov	r2, r3
 8009024:	687b      	ldr	r3, [r7, #4]
 8009026:	681b      	ldr	r3, [r3, #0]
 8009028:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800902c:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800902e:	687b      	ldr	r3, [r7, #4]
 8009030:	6a1b      	ldr	r3, [r3, #32]
 8009032:	1c9a      	adds	r2, r3, #2
 8009034:	687b      	ldr	r3, [r7, #4]
 8009036:	621a      	str	r2, [r3, #32]
 8009038:	e008      	b.n	800904c <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 800903a:	687b      	ldr	r3, [r7, #4]
 800903c:	6a1b      	ldr	r3, [r3, #32]
 800903e:	1c59      	adds	r1, r3, #1
 8009040:	687a      	ldr	r2, [r7, #4]
 8009042:	6211      	str	r1, [r2, #32]
 8009044:	781a      	ldrb	r2, [r3, #0]
 8009046:	687b      	ldr	r3, [r7, #4]
 8009048:	681b      	ldr	r3, [r3, #0]
 800904a:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800904c:	687b      	ldr	r3, [r7, #4]
 800904e:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8009050:	b29b      	uxth	r3, r3
 8009052:	3b01      	subs	r3, #1
 8009054:	b29b      	uxth	r3, r3
 8009056:	687a      	ldr	r2, [r7, #4]
 8009058:	4619      	mov	r1, r3
 800905a:	84d1      	strh	r1, [r2, #38]	; 0x26
 800905c:	2b00      	cmp	r3, #0
 800905e:	d10f      	bne.n	8009080 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8009060:	687b      	ldr	r3, [r7, #4]
 8009062:	681b      	ldr	r3, [r3, #0]
 8009064:	68da      	ldr	r2, [r3, #12]
 8009066:	687b      	ldr	r3, [r7, #4]
 8009068:	681b      	ldr	r3, [r3, #0]
 800906a:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800906e:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8009070:	687b      	ldr	r3, [r7, #4]
 8009072:	681b      	ldr	r3, [r3, #0]
 8009074:	68da      	ldr	r2, [r3, #12]
 8009076:	687b      	ldr	r3, [r7, #4]
 8009078:	681b      	ldr	r3, [r3, #0]
 800907a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 800907e:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8009080:	2300      	movs	r3, #0
 8009082:	e000      	b.n	8009086 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8009084:	2302      	movs	r3, #2
  }
}
 8009086:	4618      	mov	r0, r3
 8009088:	3714      	adds	r7, #20
 800908a:	46bd      	mov	sp, r7
 800908c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009090:	4770      	bx	lr

08009092 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8009092:	b580      	push	{r7, lr}
 8009094:	b082      	sub	sp, #8
 8009096:	af00      	add	r7, sp, #0
 8009098:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800909a:	687b      	ldr	r3, [r7, #4]
 800909c:	681b      	ldr	r3, [r3, #0]
 800909e:	68da      	ldr	r2, [r3, #12]
 80090a0:	687b      	ldr	r3, [r7, #4]
 80090a2:	681b      	ldr	r3, [r3, #0]
 80090a4:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80090a8:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80090aa:	687b      	ldr	r3, [r7, #4]
 80090ac:	2220      	movs	r2, #32
 80090ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80090b2:	6878      	ldr	r0, [r7, #4]
 80090b4:	f7ff fe5e 	bl	8008d74 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80090b8:	2300      	movs	r3, #0
}
 80090ba:	4618      	mov	r0, r3
 80090bc:	3708      	adds	r7, #8
 80090be:	46bd      	mov	sp, r7
 80090c0:	bd80      	pop	{r7, pc}

080090c2 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80090c2:	b580      	push	{r7, lr}
 80090c4:	b08c      	sub	sp, #48	; 0x30
 80090c6:	af00      	add	r7, sp, #0
 80090c8:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80090ca:	687b      	ldr	r3, [r7, #4]
 80090cc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80090d0:	b2db      	uxtb	r3, r3
 80090d2:	2b22      	cmp	r3, #34	; 0x22
 80090d4:	f040 80ab 	bne.w	800922e <UART_Receive_IT+0x16c>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80090d8:	687b      	ldr	r3, [r7, #4]
 80090da:	689b      	ldr	r3, [r3, #8]
 80090dc:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80090e0:	d117      	bne.n	8009112 <UART_Receive_IT+0x50>
 80090e2:	687b      	ldr	r3, [r7, #4]
 80090e4:	691b      	ldr	r3, [r3, #16]
 80090e6:	2b00      	cmp	r3, #0
 80090e8:	d113      	bne.n	8009112 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80090ea:	2300      	movs	r3, #0
 80090ec:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80090ee:	687b      	ldr	r3, [r7, #4]
 80090f0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80090f2:	62bb      	str	r3, [r7, #40]	; 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80090f4:	687b      	ldr	r3, [r7, #4]
 80090f6:	681b      	ldr	r3, [r3, #0]
 80090f8:	685b      	ldr	r3, [r3, #4]
 80090fa:	b29b      	uxth	r3, r3
 80090fc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8009100:	b29a      	uxth	r2, r3
 8009102:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8009104:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8009106:	687b      	ldr	r3, [r7, #4]
 8009108:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800910a:	1c9a      	adds	r2, r3, #2
 800910c:	687b      	ldr	r3, [r7, #4]
 800910e:	629a      	str	r2, [r3, #40]	; 0x28
 8009110:	e026      	b.n	8009160 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8009112:	687b      	ldr	r3, [r7, #4]
 8009114:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8009116:	62fb      	str	r3, [r7, #44]	; 0x2c
      pdata16bits  = NULL;
 8009118:	2300      	movs	r3, #0
 800911a:	62bb      	str	r3, [r7, #40]	; 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800911c:	687b      	ldr	r3, [r7, #4]
 800911e:	689b      	ldr	r3, [r3, #8]
 8009120:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8009124:	d007      	beq.n	8009136 <UART_Receive_IT+0x74>
 8009126:	687b      	ldr	r3, [r7, #4]
 8009128:	689b      	ldr	r3, [r3, #8]
 800912a:	2b00      	cmp	r3, #0
 800912c:	d10a      	bne.n	8009144 <UART_Receive_IT+0x82>
 800912e:	687b      	ldr	r3, [r7, #4]
 8009130:	691b      	ldr	r3, [r3, #16]
 8009132:	2b00      	cmp	r3, #0
 8009134:	d106      	bne.n	8009144 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8009136:	687b      	ldr	r3, [r7, #4]
 8009138:	681b      	ldr	r3, [r3, #0]
 800913a:	685b      	ldr	r3, [r3, #4]
 800913c:	b2da      	uxtb	r2, r3
 800913e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009140:	701a      	strb	r2, [r3, #0]
 8009142:	e008      	b.n	8009156 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8009144:	687b      	ldr	r3, [r7, #4]
 8009146:	681b      	ldr	r3, [r3, #0]
 8009148:	685b      	ldr	r3, [r3, #4]
 800914a:	b2db      	uxtb	r3, r3
 800914c:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009150:	b2da      	uxtb	r2, r3
 8009152:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009154:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8009156:	687b      	ldr	r3, [r7, #4]
 8009158:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800915a:	1c5a      	adds	r2, r3, #1
 800915c:	687b      	ldr	r3, [r7, #4]
 800915e:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8009160:	687b      	ldr	r3, [r7, #4]
 8009162:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8009164:	b29b      	uxth	r3, r3
 8009166:	3b01      	subs	r3, #1
 8009168:	b29b      	uxth	r3, r3
 800916a:	687a      	ldr	r2, [r7, #4]
 800916c:	4619      	mov	r1, r3
 800916e:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8009170:	2b00      	cmp	r3, #0
 8009172:	d15a      	bne.n	800922a <UART_Receive_IT+0x168>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8009174:	687b      	ldr	r3, [r7, #4]
 8009176:	681b      	ldr	r3, [r3, #0]
 8009178:	68da      	ldr	r2, [r3, #12]
 800917a:	687b      	ldr	r3, [r7, #4]
 800917c:	681b      	ldr	r3, [r3, #0]
 800917e:	f022 0220 	bic.w	r2, r2, #32
 8009182:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8009184:	687b      	ldr	r3, [r7, #4]
 8009186:	681b      	ldr	r3, [r3, #0]
 8009188:	68da      	ldr	r2, [r3, #12]
 800918a:	687b      	ldr	r3, [r7, #4]
 800918c:	681b      	ldr	r3, [r3, #0]
 800918e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8009192:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8009194:	687b      	ldr	r3, [r7, #4]
 8009196:	681b      	ldr	r3, [r3, #0]
 8009198:	695a      	ldr	r2, [r3, #20]
 800919a:	687b      	ldr	r3, [r7, #4]
 800919c:	681b      	ldr	r3, [r3, #0]
 800919e:	f022 0201 	bic.w	r2, r2, #1
 80091a2:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80091a4:	687b      	ldr	r3, [r7, #4]
 80091a6:	2220      	movs	r2, #32
 80091a8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80091ac:	687b      	ldr	r3, [r7, #4]
 80091ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80091b0:	2b01      	cmp	r3, #1
 80091b2:	d135      	bne.n	8009220 <UART_Receive_IT+0x15e>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80091b4:	687b      	ldr	r3, [r7, #4]
 80091b6:	2200      	movs	r2, #0
 80091b8:	631a      	str	r2, [r3, #48]	; 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	330c      	adds	r3, #12
 80091c0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80091c2:	697b      	ldr	r3, [r7, #20]
 80091c4:	e853 3f00 	ldrex	r3, [r3]
 80091c8:	613b      	str	r3, [r7, #16]
   return(result);
 80091ca:	693b      	ldr	r3, [r7, #16]
 80091cc:	f023 0310 	bic.w	r3, r3, #16
 80091d0:	627b      	str	r3, [r7, #36]	; 0x24
 80091d2:	687b      	ldr	r3, [r7, #4]
 80091d4:	681b      	ldr	r3, [r3, #0]
 80091d6:	330c      	adds	r3, #12
 80091d8:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80091da:	623a      	str	r2, [r7, #32]
 80091dc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80091de:	69f9      	ldr	r1, [r7, #28]
 80091e0:	6a3a      	ldr	r2, [r7, #32]
 80091e2:	e841 2300 	strex	r3, r2, [r1]
 80091e6:	61bb      	str	r3, [r7, #24]
   return(result);
 80091e8:	69bb      	ldr	r3, [r7, #24]
 80091ea:	2b00      	cmp	r3, #0
 80091ec:	d1e5      	bne.n	80091ba <UART_Receive_IT+0xf8>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80091ee:	687b      	ldr	r3, [r7, #4]
 80091f0:	681b      	ldr	r3, [r3, #0]
 80091f2:	681b      	ldr	r3, [r3, #0]
 80091f4:	f003 0310 	and.w	r3, r3, #16
 80091f8:	2b10      	cmp	r3, #16
 80091fa:	d10a      	bne.n	8009212 <UART_Receive_IT+0x150>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80091fc:	2300      	movs	r3, #0
 80091fe:	60fb      	str	r3, [r7, #12]
 8009200:	687b      	ldr	r3, [r7, #4]
 8009202:	681b      	ldr	r3, [r3, #0]
 8009204:	681b      	ldr	r3, [r3, #0]
 8009206:	60fb      	str	r3, [r7, #12]
 8009208:	687b      	ldr	r3, [r7, #4]
 800920a:	681b      	ldr	r3, [r3, #0]
 800920c:	685b      	ldr	r3, [r3, #4]
 800920e:	60fb      	str	r3, [r7, #12]
 8009210:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8009216:	4619      	mov	r1, r3
 8009218:	6878      	ldr	r0, [r7, #4]
 800921a:	f7ff fdbf 	bl	8008d9c <HAL_UARTEx_RxEventCallback>
 800921e:	e002      	b.n	8009226 <UART_Receive_IT+0x164>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8009220:	6878      	ldr	r0, [r7, #4]
 8009222:	f7fb fbb7 	bl	8004994 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8009226:	2300      	movs	r3, #0
 8009228:	e002      	b.n	8009230 <UART_Receive_IT+0x16e>
    }
    return HAL_OK;
 800922a:	2300      	movs	r3, #0
 800922c:	e000      	b.n	8009230 <UART_Receive_IT+0x16e>
  }
  else
  {
    return HAL_BUSY;
 800922e:	2302      	movs	r3, #2
  }
}
 8009230:	4618      	mov	r0, r3
 8009232:	3730      	adds	r7, #48	; 0x30
 8009234:	46bd      	mov	sp, r7
 8009236:	bd80      	pop	{r7, pc}

08009238 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8009238:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800923c:	b0c0      	sub	sp, #256	; 0x100
 800923e:	af00      	add	r7, sp, #0
 8009240:	f8c7 00f4 	str.w	r0, [r7, #244]	; 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8009244:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009248:	681b      	ldr	r3, [r3, #0]
 800924a:	691b      	ldr	r3, [r3, #16]
 800924c:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8009250:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009254:	68d9      	ldr	r1, [r3, #12]
 8009256:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800925a:	681a      	ldr	r2, [r3, #0]
 800925c:	ea40 0301 	orr.w	r3, r0, r1
 8009260:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8009262:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009266:	689a      	ldr	r2, [r3, #8]
 8009268:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800926c:	691b      	ldr	r3, [r3, #16]
 800926e:	431a      	orrs	r2, r3
 8009270:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009274:	695b      	ldr	r3, [r3, #20]
 8009276:	431a      	orrs	r2, r3
 8009278:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 800927c:	69db      	ldr	r3, [r3, #28]
 800927e:	4313      	orrs	r3, r2
 8009280:	f8c7 30f8 	str.w	r3, [r7, #248]	; 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8009284:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009288:	681b      	ldr	r3, [r3, #0]
 800928a:	68db      	ldr	r3, [r3, #12]
 800928c:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8009290:	f021 010c 	bic.w	r1, r1, #12
 8009294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009298:	681a      	ldr	r2, [r3, #0]
 800929a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	; 0xf8
 800929e:	430b      	orrs	r3, r1
 80092a0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80092a2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092a6:	681b      	ldr	r3, [r3, #0]
 80092a8:	695b      	ldr	r3, [r3, #20]
 80092aa:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 80092ae:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b2:	6999      	ldr	r1, [r3, #24]
 80092b4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092b8:	681a      	ldr	r2, [r3, #0]
 80092ba:	ea40 0301 	orr.w	r3, r0, r1
 80092be:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80092c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092c4:	681a      	ldr	r2, [r3, #0]
 80092c6:	4b8f      	ldr	r3, [pc, #572]	; (8009504 <UART_SetConfig+0x2cc>)
 80092c8:	429a      	cmp	r2, r3
 80092ca:	d005      	beq.n	80092d8 <UART_SetConfig+0xa0>
 80092cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092d0:	681a      	ldr	r2, [r3, #0]
 80092d2:	4b8d      	ldr	r3, [pc, #564]	; (8009508 <UART_SetConfig+0x2d0>)
 80092d4:	429a      	cmp	r2, r3
 80092d6:	d104      	bne.n	80092e2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80092d8:	f7fe faca 	bl	8007870 <HAL_RCC_GetPCLK2Freq>
 80092dc:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
 80092e0:	e003      	b.n	80092ea <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80092e2:	f7fe fab1 	bl	8007848 <HAL_RCC_GetPCLK1Freq>
 80092e6:	f8c7 00fc 	str.w	r0, [r7, #252]	; 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80092ea:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80092ee:	69db      	ldr	r3, [r3, #28]
 80092f0:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80092f4:	f040 810c 	bne.w	8009510 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80092f8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80092fc:	2200      	movs	r2, #0
 80092fe:	f8c7 30e8 	str.w	r3, [r7, #232]	; 0xe8
 8009302:	f8c7 20ec 	str.w	r2, [r7, #236]	; 0xec
 8009306:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	; 0xe8
 800930a:	4622      	mov	r2, r4
 800930c:	462b      	mov	r3, r5
 800930e:	1891      	adds	r1, r2, r2
 8009310:	65b9      	str	r1, [r7, #88]	; 0x58
 8009312:	415b      	adcs	r3, r3
 8009314:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009316:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 800931a:	4621      	mov	r1, r4
 800931c:	eb12 0801 	adds.w	r8, r2, r1
 8009320:	4629      	mov	r1, r5
 8009322:	eb43 0901 	adc.w	r9, r3, r1
 8009326:	f04f 0200 	mov.w	r2, #0
 800932a:	f04f 0300 	mov.w	r3, #0
 800932e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8009332:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8009336:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800933a:	4690      	mov	r8, r2
 800933c:	4699      	mov	r9, r3
 800933e:	4623      	mov	r3, r4
 8009340:	eb18 0303 	adds.w	r3, r8, r3
 8009344:	f8c7 30e0 	str.w	r3, [r7, #224]	; 0xe0
 8009348:	462b      	mov	r3, r5
 800934a:	eb49 0303 	adc.w	r3, r9, r3
 800934e:	f8c7 30e4 	str.w	r3, [r7, #228]	; 0xe4
 8009352:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009356:	685b      	ldr	r3, [r3, #4]
 8009358:	2200      	movs	r2, #0
 800935a:	f8c7 30d8 	str.w	r3, [r7, #216]	; 0xd8
 800935e:	f8c7 20dc 	str.w	r2, [r7, #220]	; 0xdc
 8009362:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	; 0xd8
 8009366:	460b      	mov	r3, r1
 8009368:	18db      	adds	r3, r3, r3
 800936a:	653b      	str	r3, [r7, #80]	; 0x50
 800936c:	4613      	mov	r3, r2
 800936e:	eb42 0303 	adc.w	r3, r2, r3
 8009372:	657b      	str	r3, [r7, #84]	; 0x54
 8009374:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8009378:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	; 0xe0
 800937c:	f7f7 fc84 	bl	8000c88 <__aeabi_uldivmod>
 8009380:	4602      	mov	r2, r0
 8009382:	460b      	mov	r3, r1
 8009384:	4b61      	ldr	r3, [pc, #388]	; (800950c <UART_SetConfig+0x2d4>)
 8009386:	fba3 2302 	umull	r2, r3, r3, r2
 800938a:	095b      	lsrs	r3, r3, #5
 800938c:	011c      	lsls	r4, r3, #4
 800938e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009392:	2200      	movs	r2, #0
 8009394:	f8c7 30d0 	str.w	r3, [r7, #208]	; 0xd0
 8009398:	f8c7 20d4 	str.w	r2, [r7, #212]	; 0xd4
 800939c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	; 0xd0
 80093a0:	4642      	mov	r2, r8
 80093a2:	464b      	mov	r3, r9
 80093a4:	1891      	adds	r1, r2, r2
 80093a6:	64b9      	str	r1, [r7, #72]	; 0x48
 80093a8:	415b      	adcs	r3, r3
 80093aa:	64fb      	str	r3, [r7, #76]	; 0x4c
 80093ac:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 80093b0:	4641      	mov	r1, r8
 80093b2:	eb12 0a01 	adds.w	sl, r2, r1
 80093b6:	4649      	mov	r1, r9
 80093b8:	eb43 0b01 	adc.w	fp, r3, r1
 80093bc:	f04f 0200 	mov.w	r2, #0
 80093c0:	f04f 0300 	mov.w	r3, #0
 80093c4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80093c8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80093cc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80093d0:	4692      	mov	sl, r2
 80093d2:	469b      	mov	fp, r3
 80093d4:	4643      	mov	r3, r8
 80093d6:	eb1a 0303 	adds.w	r3, sl, r3
 80093da:	f8c7 30c8 	str.w	r3, [r7, #200]	; 0xc8
 80093de:	464b      	mov	r3, r9
 80093e0:	eb4b 0303 	adc.w	r3, fp, r3
 80093e4:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 80093e8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80093ec:	685b      	ldr	r3, [r3, #4]
 80093ee:	2200      	movs	r2, #0
 80093f0:	f8c7 30c0 	str.w	r3, [r7, #192]	; 0xc0
 80093f4:	f8c7 20c4 	str.w	r2, [r7, #196]	; 0xc4
 80093f8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	; 0xc0
 80093fc:	460b      	mov	r3, r1
 80093fe:	18db      	adds	r3, r3, r3
 8009400:	643b      	str	r3, [r7, #64]	; 0x40
 8009402:	4613      	mov	r3, r2
 8009404:	eb42 0303 	adc.w	r3, r2, r3
 8009408:	647b      	str	r3, [r7, #68]	; 0x44
 800940a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 800940e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8009412:	f7f7 fc39 	bl	8000c88 <__aeabi_uldivmod>
 8009416:	4602      	mov	r2, r0
 8009418:	460b      	mov	r3, r1
 800941a:	4611      	mov	r1, r2
 800941c:	4b3b      	ldr	r3, [pc, #236]	; (800950c <UART_SetConfig+0x2d4>)
 800941e:	fba3 2301 	umull	r2, r3, r3, r1
 8009422:	095b      	lsrs	r3, r3, #5
 8009424:	2264      	movs	r2, #100	; 0x64
 8009426:	fb02 f303 	mul.w	r3, r2, r3
 800942a:	1acb      	subs	r3, r1, r3
 800942c:	00db      	lsls	r3, r3, #3
 800942e:	f103 0232 	add.w	r2, r3, #50	; 0x32
 8009432:	4b36      	ldr	r3, [pc, #216]	; (800950c <UART_SetConfig+0x2d4>)
 8009434:	fba3 2302 	umull	r2, r3, r3, r2
 8009438:	095b      	lsrs	r3, r3, #5
 800943a:	005b      	lsls	r3, r3, #1
 800943c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8009440:	441c      	add	r4, r3
 8009442:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009446:	2200      	movs	r2, #0
 8009448:	f8c7 30b8 	str.w	r3, [r7, #184]	; 0xb8
 800944c:	f8c7 20bc 	str.w	r2, [r7, #188]	; 0xbc
 8009450:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	; 0xb8
 8009454:	4642      	mov	r2, r8
 8009456:	464b      	mov	r3, r9
 8009458:	1891      	adds	r1, r2, r2
 800945a:	63b9      	str	r1, [r7, #56]	; 0x38
 800945c:	415b      	adcs	r3, r3
 800945e:	63fb      	str	r3, [r7, #60]	; 0x3c
 8009460:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009464:	4641      	mov	r1, r8
 8009466:	1851      	adds	r1, r2, r1
 8009468:	6339      	str	r1, [r7, #48]	; 0x30
 800946a:	4649      	mov	r1, r9
 800946c:	414b      	adcs	r3, r1
 800946e:	637b      	str	r3, [r7, #52]	; 0x34
 8009470:	f04f 0200 	mov.w	r2, #0
 8009474:	f04f 0300 	mov.w	r3, #0
 8009478:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	; 0x30
 800947c:	4659      	mov	r1, fp
 800947e:	00cb      	lsls	r3, r1, #3
 8009480:	4651      	mov	r1, sl
 8009482:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009486:	4651      	mov	r1, sl
 8009488:	00ca      	lsls	r2, r1, #3
 800948a:	4610      	mov	r0, r2
 800948c:	4619      	mov	r1, r3
 800948e:	4603      	mov	r3, r0
 8009490:	4642      	mov	r2, r8
 8009492:	189b      	adds	r3, r3, r2
 8009494:	f8c7 30b0 	str.w	r3, [r7, #176]	; 0xb0
 8009498:	464b      	mov	r3, r9
 800949a:	460a      	mov	r2, r1
 800949c:	eb42 0303 	adc.w	r3, r2, r3
 80094a0:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 80094a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094a8:	685b      	ldr	r3, [r3, #4]
 80094aa:	2200      	movs	r2, #0
 80094ac:	f8c7 30a8 	str.w	r3, [r7, #168]	; 0xa8
 80094b0:	f8c7 20ac 	str.w	r2, [r7, #172]	; 0xac
 80094b4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	; 0xa8
 80094b8:	460b      	mov	r3, r1
 80094ba:	18db      	adds	r3, r3, r3
 80094bc:	62bb      	str	r3, [r7, #40]	; 0x28
 80094be:	4613      	mov	r3, r2
 80094c0:	eb42 0303 	adc.w	r3, r2, r3
 80094c4:	62fb      	str	r3, [r7, #44]	; 0x2c
 80094c6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 80094ca:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 80094ce:	f7f7 fbdb 	bl	8000c88 <__aeabi_uldivmod>
 80094d2:	4602      	mov	r2, r0
 80094d4:	460b      	mov	r3, r1
 80094d6:	4b0d      	ldr	r3, [pc, #52]	; (800950c <UART_SetConfig+0x2d4>)
 80094d8:	fba3 1302 	umull	r1, r3, r3, r2
 80094dc:	095b      	lsrs	r3, r3, #5
 80094de:	2164      	movs	r1, #100	; 0x64
 80094e0:	fb01 f303 	mul.w	r3, r1, r3
 80094e4:	1ad3      	subs	r3, r2, r3
 80094e6:	00db      	lsls	r3, r3, #3
 80094e8:	3332      	adds	r3, #50	; 0x32
 80094ea:	4a08      	ldr	r2, [pc, #32]	; (800950c <UART_SetConfig+0x2d4>)
 80094ec:	fba2 2303 	umull	r2, r3, r2, r3
 80094f0:	095b      	lsrs	r3, r3, #5
 80094f2:	f003 0207 	and.w	r2, r3, #7
 80094f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80094fa:	681b      	ldr	r3, [r3, #0]
 80094fc:	4422      	add	r2, r4
 80094fe:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8009500:	e105      	b.n	800970e <UART_SetConfig+0x4d6>
 8009502:	bf00      	nop
 8009504:	40011000 	.word	0x40011000
 8009508:	40011400 	.word	0x40011400
 800950c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8009510:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 8009514:	2200      	movs	r2, #0
 8009516:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
 800951a:	f8c7 20a4 	str.w	r2, [r7, #164]	; 0xa4
 800951e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	; 0xa0
 8009522:	4642      	mov	r2, r8
 8009524:	464b      	mov	r3, r9
 8009526:	1891      	adds	r1, r2, r2
 8009528:	6239      	str	r1, [r7, #32]
 800952a:	415b      	adcs	r3, r3
 800952c:	627b      	str	r3, [r7, #36]	; 0x24
 800952e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8009532:	4641      	mov	r1, r8
 8009534:	1854      	adds	r4, r2, r1
 8009536:	4649      	mov	r1, r9
 8009538:	eb43 0501 	adc.w	r5, r3, r1
 800953c:	f04f 0200 	mov.w	r2, #0
 8009540:	f04f 0300 	mov.w	r3, #0
 8009544:	00eb      	lsls	r3, r5, #3
 8009546:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800954a:	00e2      	lsls	r2, r4, #3
 800954c:	4614      	mov	r4, r2
 800954e:	461d      	mov	r5, r3
 8009550:	4643      	mov	r3, r8
 8009552:	18e3      	adds	r3, r4, r3
 8009554:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
 8009558:	464b      	mov	r3, r9
 800955a:	eb45 0303 	adc.w	r3, r5, r3
 800955e:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8009562:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009566:	685b      	ldr	r3, [r3, #4]
 8009568:	2200      	movs	r2, #0
 800956a:	f8c7 3090 	str.w	r3, [r7, #144]	; 0x90
 800956e:	f8c7 2094 	str.w	r2, [r7, #148]	; 0x94
 8009572:	f04f 0200 	mov.w	r2, #0
 8009576:	f04f 0300 	mov.w	r3, #0
 800957a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	; 0x90
 800957e:	4629      	mov	r1, r5
 8009580:	008b      	lsls	r3, r1, #2
 8009582:	4621      	mov	r1, r4
 8009584:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009588:	4621      	mov	r1, r4
 800958a:	008a      	lsls	r2, r1, #2
 800958c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8009590:	f7f7 fb7a 	bl	8000c88 <__aeabi_uldivmod>
 8009594:	4602      	mov	r2, r0
 8009596:	460b      	mov	r3, r1
 8009598:	4b60      	ldr	r3, [pc, #384]	; (800971c <UART_SetConfig+0x4e4>)
 800959a:	fba3 2302 	umull	r2, r3, r3, r2
 800959e:	095b      	lsrs	r3, r3, #5
 80095a0:	011c      	lsls	r4, r3, #4
 80095a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 80095a6:	2200      	movs	r2, #0
 80095a8:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
 80095ac:	f8c7 208c 	str.w	r2, [r7, #140]	; 0x8c
 80095b0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	; 0x88
 80095b4:	4642      	mov	r2, r8
 80095b6:	464b      	mov	r3, r9
 80095b8:	1891      	adds	r1, r2, r2
 80095ba:	61b9      	str	r1, [r7, #24]
 80095bc:	415b      	adcs	r3, r3
 80095be:	61fb      	str	r3, [r7, #28]
 80095c0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80095c4:	4641      	mov	r1, r8
 80095c6:	1851      	adds	r1, r2, r1
 80095c8:	6139      	str	r1, [r7, #16]
 80095ca:	4649      	mov	r1, r9
 80095cc:	414b      	adcs	r3, r1
 80095ce:	617b      	str	r3, [r7, #20]
 80095d0:	f04f 0200 	mov.w	r2, #0
 80095d4:	f04f 0300 	mov.w	r3, #0
 80095d8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80095dc:	4659      	mov	r1, fp
 80095de:	00cb      	lsls	r3, r1, #3
 80095e0:	4651      	mov	r1, sl
 80095e2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80095e6:	4651      	mov	r1, sl
 80095e8:	00ca      	lsls	r2, r1, #3
 80095ea:	4610      	mov	r0, r2
 80095ec:	4619      	mov	r1, r3
 80095ee:	4603      	mov	r3, r0
 80095f0:	4642      	mov	r2, r8
 80095f2:	189b      	adds	r3, r3, r2
 80095f4:	f8c7 3080 	str.w	r3, [r7, #128]	; 0x80
 80095f8:	464b      	mov	r3, r9
 80095fa:	460a      	mov	r2, r1
 80095fc:	eb42 0303 	adc.w	r3, r2, r3
 8009600:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8009604:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009608:	685b      	ldr	r3, [r3, #4]
 800960a:	2200      	movs	r2, #0
 800960c:	67bb      	str	r3, [r7, #120]	; 0x78
 800960e:	67fa      	str	r2, [r7, #124]	; 0x7c
 8009610:	f04f 0200 	mov.w	r2, #0
 8009614:	f04f 0300 	mov.w	r3, #0
 8009618:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	; 0x78
 800961c:	4649      	mov	r1, r9
 800961e:	008b      	lsls	r3, r1, #2
 8009620:	4641      	mov	r1, r8
 8009622:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8009626:	4641      	mov	r1, r8
 8009628:	008a      	lsls	r2, r1, #2
 800962a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	; 0x80
 800962e:	f7f7 fb2b 	bl	8000c88 <__aeabi_uldivmod>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	4b39      	ldr	r3, [pc, #228]	; (800971c <UART_SetConfig+0x4e4>)
 8009638:	fba3 1302 	umull	r1, r3, r3, r2
 800963c:	095b      	lsrs	r3, r3, #5
 800963e:	2164      	movs	r1, #100	; 0x64
 8009640:	fb01 f303 	mul.w	r3, r1, r3
 8009644:	1ad3      	subs	r3, r2, r3
 8009646:	011b      	lsls	r3, r3, #4
 8009648:	3332      	adds	r3, #50	; 0x32
 800964a:	4a34      	ldr	r2, [pc, #208]	; (800971c <UART_SetConfig+0x4e4>)
 800964c:	fba2 2303 	umull	r2, r3, r2, r3
 8009650:	095b      	lsrs	r3, r3, #5
 8009652:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009656:	441c      	add	r4, r3
 8009658:	f8d7 30fc 	ldr.w	r3, [r7, #252]	; 0xfc
 800965c:	2200      	movs	r2, #0
 800965e:	673b      	str	r3, [r7, #112]	; 0x70
 8009660:	677a      	str	r2, [r7, #116]	; 0x74
 8009662:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	; 0x70
 8009666:	4642      	mov	r2, r8
 8009668:	464b      	mov	r3, r9
 800966a:	1891      	adds	r1, r2, r2
 800966c:	60b9      	str	r1, [r7, #8]
 800966e:	415b      	adcs	r3, r3
 8009670:	60fb      	str	r3, [r7, #12]
 8009672:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8009676:	4641      	mov	r1, r8
 8009678:	1851      	adds	r1, r2, r1
 800967a:	6039      	str	r1, [r7, #0]
 800967c:	4649      	mov	r1, r9
 800967e:	414b      	adcs	r3, r1
 8009680:	607b      	str	r3, [r7, #4]
 8009682:	f04f 0200 	mov.w	r2, #0
 8009686:	f04f 0300 	mov.w	r3, #0
 800968a:	e9d7 ab00 	ldrd	sl, fp, [r7]
 800968e:	4659      	mov	r1, fp
 8009690:	00cb      	lsls	r3, r1, #3
 8009692:	4651      	mov	r1, sl
 8009694:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8009698:	4651      	mov	r1, sl
 800969a:	00ca      	lsls	r2, r1, #3
 800969c:	4610      	mov	r0, r2
 800969e:	4619      	mov	r1, r3
 80096a0:	4603      	mov	r3, r0
 80096a2:	4642      	mov	r2, r8
 80096a4:	189b      	adds	r3, r3, r2
 80096a6:	66bb      	str	r3, [r7, #104]	; 0x68
 80096a8:	464b      	mov	r3, r9
 80096aa:	460a      	mov	r2, r1
 80096ac:	eb42 0303 	adc.w	r3, r2, r3
 80096b0:	66fb      	str	r3, [r7, #108]	; 0x6c
 80096b2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 80096b6:	685b      	ldr	r3, [r3, #4]
 80096b8:	2200      	movs	r2, #0
 80096ba:	663b      	str	r3, [r7, #96]	; 0x60
 80096bc:	667a      	str	r2, [r7, #100]	; 0x64
 80096be:	f04f 0200 	mov.w	r2, #0
 80096c2:	f04f 0300 	mov.w	r3, #0
 80096c6:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	; 0x60
 80096ca:	4649      	mov	r1, r9
 80096cc:	008b      	lsls	r3, r1, #2
 80096ce:	4641      	mov	r1, r8
 80096d0:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80096d4:	4641      	mov	r1, r8
 80096d6:	008a      	lsls	r2, r1, #2
 80096d8:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	; 0x68
 80096dc:	f7f7 fad4 	bl	8000c88 <__aeabi_uldivmod>
 80096e0:	4602      	mov	r2, r0
 80096e2:	460b      	mov	r3, r1
 80096e4:	4b0d      	ldr	r3, [pc, #52]	; (800971c <UART_SetConfig+0x4e4>)
 80096e6:	fba3 1302 	umull	r1, r3, r3, r2
 80096ea:	095b      	lsrs	r3, r3, #5
 80096ec:	2164      	movs	r1, #100	; 0x64
 80096ee:	fb01 f303 	mul.w	r3, r1, r3
 80096f2:	1ad3      	subs	r3, r2, r3
 80096f4:	011b      	lsls	r3, r3, #4
 80096f6:	3332      	adds	r3, #50	; 0x32
 80096f8:	4a08      	ldr	r2, [pc, #32]	; (800971c <UART_SetConfig+0x4e4>)
 80096fa:	fba2 2303 	umull	r2, r3, r2, r3
 80096fe:	095b      	lsrs	r3, r3, #5
 8009700:	f003 020f 	and.w	r2, r3, #15
 8009704:	f8d7 30f4 	ldr.w	r3, [r7, #244]	; 0xf4
 8009708:	681b      	ldr	r3, [r3, #0]
 800970a:	4422      	add	r2, r4
 800970c:	609a      	str	r2, [r3, #8]
}
 800970e:	bf00      	nop
 8009710:	f507 7780 	add.w	r7, r7, #256	; 0x100
 8009714:	46bd      	mov	sp, r7
 8009716:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800971a:	bf00      	nop
 800971c:	51eb851f 	.word	0x51eb851f

08009720 <atof>:
 8009720:	2100      	movs	r1, #0
 8009722:	f001 badf 	b.w	800ace4 <strtod>
	...

08009728 <__errno>:
 8009728:	4b01      	ldr	r3, [pc, #4]	; (8009730 <__errno+0x8>)
 800972a:	6818      	ldr	r0, [r3, #0]
 800972c:	4770      	bx	lr
 800972e:	bf00      	nop
 8009730:	2000001c 	.word	0x2000001c

08009734 <__libc_init_array>:
 8009734:	b570      	push	{r4, r5, r6, lr}
 8009736:	4d0d      	ldr	r5, [pc, #52]	; (800976c <__libc_init_array+0x38>)
 8009738:	4c0d      	ldr	r4, [pc, #52]	; (8009770 <__libc_init_array+0x3c>)
 800973a:	1b64      	subs	r4, r4, r5
 800973c:	10a4      	asrs	r4, r4, #2
 800973e:	2600      	movs	r6, #0
 8009740:	42a6      	cmp	r6, r4
 8009742:	d109      	bne.n	8009758 <__libc_init_array+0x24>
 8009744:	4d0b      	ldr	r5, [pc, #44]	; (8009774 <__libc_init_array+0x40>)
 8009746:	4c0c      	ldr	r4, [pc, #48]	; (8009778 <__libc_init_array+0x44>)
 8009748:	f004 fb38 	bl	800ddbc <_init>
 800974c:	1b64      	subs	r4, r4, r5
 800974e:	10a4      	asrs	r4, r4, #2
 8009750:	2600      	movs	r6, #0
 8009752:	42a6      	cmp	r6, r4
 8009754:	d105      	bne.n	8009762 <__libc_init_array+0x2e>
 8009756:	bd70      	pop	{r4, r5, r6, pc}
 8009758:	f855 3b04 	ldr.w	r3, [r5], #4
 800975c:	4798      	blx	r3
 800975e:	3601      	adds	r6, #1
 8009760:	e7ee      	b.n	8009740 <__libc_init_array+0xc>
 8009762:	f855 3b04 	ldr.w	r3, [r5], #4
 8009766:	4798      	blx	r3
 8009768:	3601      	adds	r6, #1
 800976a:	e7f2      	b.n	8009752 <__libc_init_array+0x1e>
 800976c:	0800e480 	.word	0x0800e480
 8009770:	0800e480 	.word	0x0800e480
 8009774:	0800e480 	.word	0x0800e480
 8009778:	0800e484 	.word	0x0800e484

0800977c <memset>:
 800977c:	4402      	add	r2, r0
 800977e:	4603      	mov	r3, r0
 8009780:	4293      	cmp	r3, r2
 8009782:	d100      	bne.n	8009786 <memset+0xa>
 8009784:	4770      	bx	lr
 8009786:	f803 1b01 	strb.w	r1, [r3], #1
 800978a:	e7f9      	b.n	8009780 <memset+0x4>

0800978c <__cvt>:
 800978c:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009790:	ec55 4b10 	vmov	r4, r5, d0
 8009794:	2d00      	cmp	r5, #0
 8009796:	460e      	mov	r6, r1
 8009798:	4619      	mov	r1, r3
 800979a:	462b      	mov	r3, r5
 800979c:	bfbb      	ittet	lt
 800979e:	f105 4300 	addlt.w	r3, r5, #2147483648	; 0x80000000
 80097a2:	461d      	movlt	r5, r3
 80097a4:	2300      	movge	r3, #0
 80097a6:	232d      	movlt	r3, #45	; 0x2d
 80097a8:	700b      	strb	r3, [r1, #0]
 80097aa:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80097ac:	f8dd a030 	ldr.w	sl, [sp, #48]	; 0x30
 80097b0:	4691      	mov	r9, r2
 80097b2:	f023 0820 	bic.w	r8, r3, #32
 80097b6:	bfbc      	itt	lt
 80097b8:	4622      	movlt	r2, r4
 80097ba:	4614      	movlt	r4, r2
 80097bc:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097c0:	d005      	beq.n	80097ce <__cvt+0x42>
 80097c2:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 80097c6:	d100      	bne.n	80097ca <__cvt+0x3e>
 80097c8:	3601      	adds	r6, #1
 80097ca:	2102      	movs	r1, #2
 80097cc:	e000      	b.n	80097d0 <__cvt+0x44>
 80097ce:	2103      	movs	r1, #3
 80097d0:	ab03      	add	r3, sp, #12
 80097d2:	9301      	str	r3, [sp, #4]
 80097d4:	ab02      	add	r3, sp, #8
 80097d6:	9300      	str	r3, [sp, #0]
 80097d8:	ec45 4b10 	vmov	d0, r4, r5
 80097dc:	4653      	mov	r3, sl
 80097de:	4632      	mov	r2, r6
 80097e0:	f001 fb92 	bl	800af08 <_dtoa_r>
 80097e4:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 80097e8:	4607      	mov	r7, r0
 80097ea:	d102      	bne.n	80097f2 <__cvt+0x66>
 80097ec:	f019 0f01 	tst.w	r9, #1
 80097f0:	d022      	beq.n	8009838 <__cvt+0xac>
 80097f2:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 80097f6:	eb07 0906 	add.w	r9, r7, r6
 80097fa:	d110      	bne.n	800981e <__cvt+0x92>
 80097fc:	783b      	ldrb	r3, [r7, #0]
 80097fe:	2b30      	cmp	r3, #48	; 0x30
 8009800:	d10a      	bne.n	8009818 <__cvt+0x8c>
 8009802:	2200      	movs	r2, #0
 8009804:	2300      	movs	r3, #0
 8009806:	4620      	mov	r0, r4
 8009808:	4629      	mov	r1, r5
 800980a:	f7f7 f95d 	bl	8000ac8 <__aeabi_dcmpeq>
 800980e:	b918      	cbnz	r0, 8009818 <__cvt+0x8c>
 8009810:	f1c6 0601 	rsb	r6, r6, #1
 8009814:	f8ca 6000 	str.w	r6, [sl]
 8009818:	f8da 3000 	ldr.w	r3, [sl]
 800981c:	4499      	add	r9, r3
 800981e:	2200      	movs	r2, #0
 8009820:	2300      	movs	r3, #0
 8009822:	4620      	mov	r0, r4
 8009824:	4629      	mov	r1, r5
 8009826:	f7f7 f94f 	bl	8000ac8 <__aeabi_dcmpeq>
 800982a:	b108      	cbz	r0, 8009830 <__cvt+0xa4>
 800982c:	f8cd 900c 	str.w	r9, [sp, #12]
 8009830:	2230      	movs	r2, #48	; 0x30
 8009832:	9b03      	ldr	r3, [sp, #12]
 8009834:	454b      	cmp	r3, r9
 8009836:	d307      	bcc.n	8009848 <__cvt+0xbc>
 8009838:	9b03      	ldr	r3, [sp, #12]
 800983a:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800983c:	1bdb      	subs	r3, r3, r7
 800983e:	4638      	mov	r0, r7
 8009840:	6013      	str	r3, [r2, #0]
 8009842:	b004      	add	sp, #16
 8009844:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009848:	1c59      	adds	r1, r3, #1
 800984a:	9103      	str	r1, [sp, #12]
 800984c:	701a      	strb	r2, [r3, #0]
 800984e:	e7f0      	b.n	8009832 <__cvt+0xa6>

08009850 <__exponent>:
 8009850:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009852:	4603      	mov	r3, r0
 8009854:	2900      	cmp	r1, #0
 8009856:	bfb8      	it	lt
 8009858:	4249      	neglt	r1, r1
 800985a:	f803 2b02 	strb.w	r2, [r3], #2
 800985e:	bfb4      	ite	lt
 8009860:	222d      	movlt	r2, #45	; 0x2d
 8009862:	222b      	movge	r2, #43	; 0x2b
 8009864:	2909      	cmp	r1, #9
 8009866:	7042      	strb	r2, [r0, #1]
 8009868:	dd2a      	ble.n	80098c0 <__exponent+0x70>
 800986a:	f10d 0407 	add.w	r4, sp, #7
 800986e:	46a4      	mov	ip, r4
 8009870:	270a      	movs	r7, #10
 8009872:	46a6      	mov	lr, r4
 8009874:	460a      	mov	r2, r1
 8009876:	fb91 f6f7 	sdiv	r6, r1, r7
 800987a:	fb07 1516 	mls	r5, r7, r6, r1
 800987e:	3530      	adds	r5, #48	; 0x30
 8009880:	2a63      	cmp	r2, #99	; 0x63
 8009882:	f104 34ff 	add.w	r4, r4, #4294967295
 8009886:	f80e 5c01 	strb.w	r5, [lr, #-1]
 800988a:	4631      	mov	r1, r6
 800988c:	dcf1      	bgt.n	8009872 <__exponent+0x22>
 800988e:	3130      	adds	r1, #48	; 0x30
 8009890:	f1ae 0502 	sub.w	r5, lr, #2
 8009894:	f804 1c01 	strb.w	r1, [r4, #-1]
 8009898:	1c44      	adds	r4, r0, #1
 800989a:	4629      	mov	r1, r5
 800989c:	4561      	cmp	r1, ip
 800989e:	d30a      	bcc.n	80098b6 <__exponent+0x66>
 80098a0:	f10d 0209 	add.w	r2, sp, #9
 80098a4:	eba2 020e 	sub.w	r2, r2, lr
 80098a8:	4565      	cmp	r5, ip
 80098aa:	bf88      	it	hi
 80098ac:	2200      	movhi	r2, #0
 80098ae:	4413      	add	r3, r2
 80098b0:	1a18      	subs	r0, r3, r0
 80098b2:	b003      	add	sp, #12
 80098b4:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80098b6:	f811 2b01 	ldrb.w	r2, [r1], #1
 80098ba:	f804 2f01 	strb.w	r2, [r4, #1]!
 80098be:	e7ed      	b.n	800989c <__exponent+0x4c>
 80098c0:	2330      	movs	r3, #48	; 0x30
 80098c2:	3130      	adds	r1, #48	; 0x30
 80098c4:	7083      	strb	r3, [r0, #2]
 80098c6:	70c1      	strb	r1, [r0, #3]
 80098c8:	1d03      	adds	r3, r0, #4
 80098ca:	e7f1      	b.n	80098b0 <__exponent+0x60>

080098cc <_printf_float>:
 80098cc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098d0:	ed2d 8b02 	vpush	{d8}
 80098d4:	b08d      	sub	sp, #52	; 0x34
 80098d6:	460c      	mov	r4, r1
 80098d8:	f8dd 8060 	ldr.w	r8, [sp, #96]	; 0x60
 80098dc:	4616      	mov	r6, r2
 80098de:	461f      	mov	r7, r3
 80098e0:	4605      	mov	r5, r0
 80098e2:	f002 fc81 	bl	800c1e8 <_localeconv_r>
 80098e6:	f8d0 a000 	ldr.w	sl, [r0]
 80098ea:	4650      	mov	r0, sl
 80098ec:	f7f6 fc70 	bl	80001d0 <strlen>
 80098f0:	2300      	movs	r3, #0
 80098f2:	930a      	str	r3, [sp, #40]	; 0x28
 80098f4:	6823      	ldr	r3, [r4, #0]
 80098f6:	9305      	str	r3, [sp, #20]
 80098f8:	f8d8 3000 	ldr.w	r3, [r8]
 80098fc:	f894 b018 	ldrb.w	fp, [r4, #24]
 8009900:	3307      	adds	r3, #7
 8009902:	f023 0307 	bic.w	r3, r3, #7
 8009906:	f103 0208 	add.w	r2, r3, #8
 800990a:	f8c8 2000 	str.w	r2, [r8]
 800990e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009912:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 8009916:	e9d4 8912 	ldrd	r8, r9, [r4, #72]	; 0x48
 800991a:	f029 4300 	bic.w	r3, r9, #2147483648	; 0x80000000
 800991e:	9307      	str	r3, [sp, #28]
 8009920:	f8cd 8018 	str.w	r8, [sp, #24]
 8009924:	ee08 0a10 	vmov	s16, r0
 8009928:	4b9f      	ldr	r3, [pc, #636]	; (8009ba8 <_printf_float+0x2dc>)
 800992a:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800992e:	f04f 32ff 	mov.w	r2, #4294967295
 8009932:	f7f7 f8fb 	bl	8000b2c <__aeabi_dcmpun>
 8009936:	bb88      	cbnz	r0, 800999c <_printf_float+0xd0>
 8009938:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800993c:	4b9a      	ldr	r3, [pc, #616]	; (8009ba8 <_printf_float+0x2dc>)
 800993e:	f04f 32ff 	mov.w	r2, #4294967295
 8009942:	f7f7 f8d5 	bl	8000af0 <__aeabi_dcmple>
 8009946:	bb48      	cbnz	r0, 800999c <_printf_float+0xd0>
 8009948:	2200      	movs	r2, #0
 800994a:	2300      	movs	r3, #0
 800994c:	4640      	mov	r0, r8
 800994e:	4649      	mov	r1, r9
 8009950:	f7f7 f8c4 	bl	8000adc <__aeabi_dcmplt>
 8009954:	b110      	cbz	r0, 800995c <_printf_float+0x90>
 8009956:	232d      	movs	r3, #45	; 0x2d
 8009958:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800995c:	4b93      	ldr	r3, [pc, #588]	; (8009bac <_printf_float+0x2e0>)
 800995e:	4894      	ldr	r0, [pc, #592]	; (8009bb0 <_printf_float+0x2e4>)
 8009960:	f1bb 0f47 	cmp.w	fp, #71	; 0x47
 8009964:	bf94      	ite	ls
 8009966:	4698      	movls	r8, r3
 8009968:	4680      	movhi	r8, r0
 800996a:	2303      	movs	r3, #3
 800996c:	6123      	str	r3, [r4, #16]
 800996e:	9b05      	ldr	r3, [sp, #20]
 8009970:	f023 0204 	bic.w	r2, r3, #4
 8009974:	6022      	str	r2, [r4, #0]
 8009976:	f04f 0900 	mov.w	r9, #0
 800997a:	9700      	str	r7, [sp, #0]
 800997c:	4633      	mov	r3, r6
 800997e:	aa0b      	add	r2, sp, #44	; 0x2c
 8009980:	4621      	mov	r1, r4
 8009982:	4628      	mov	r0, r5
 8009984:	f000 f9d8 	bl	8009d38 <_printf_common>
 8009988:	3001      	adds	r0, #1
 800998a:	f040 8090 	bne.w	8009aae <_printf_float+0x1e2>
 800998e:	f04f 30ff 	mov.w	r0, #4294967295
 8009992:	b00d      	add	sp, #52	; 0x34
 8009994:	ecbd 8b02 	vpop	{d8}
 8009998:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800999c:	4642      	mov	r2, r8
 800999e:	464b      	mov	r3, r9
 80099a0:	4640      	mov	r0, r8
 80099a2:	4649      	mov	r1, r9
 80099a4:	f7f7 f8c2 	bl	8000b2c <__aeabi_dcmpun>
 80099a8:	b140      	cbz	r0, 80099bc <_printf_float+0xf0>
 80099aa:	464b      	mov	r3, r9
 80099ac:	2b00      	cmp	r3, #0
 80099ae:	bfbc      	itt	lt
 80099b0:	232d      	movlt	r3, #45	; 0x2d
 80099b2:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 80099b6:	487f      	ldr	r0, [pc, #508]	; (8009bb4 <_printf_float+0x2e8>)
 80099b8:	4b7f      	ldr	r3, [pc, #508]	; (8009bb8 <_printf_float+0x2ec>)
 80099ba:	e7d1      	b.n	8009960 <_printf_float+0x94>
 80099bc:	6863      	ldr	r3, [r4, #4]
 80099be:	f00b 02df 	and.w	r2, fp, #223	; 0xdf
 80099c2:	9206      	str	r2, [sp, #24]
 80099c4:	1c5a      	adds	r2, r3, #1
 80099c6:	d13f      	bne.n	8009a48 <_printf_float+0x17c>
 80099c8:	2306      	movs	r3, #6
 80099ca:	6063      	str	r3, [r4, #4]
 80099cc:	9b05      	ldr	r3, [sp, #20]
 80099ce:	6861      	ldr	r1, [r4, #4]
 80099d0:	f443 6280 	orr.w	r2, r3, #1024	; 0x400
 80099d4:	2300      	movs	r3, #0
 80099d6:	9303      	str	r3, [sp, #12]
 80099d8:	ab0a      	add	r3, sp, #40	; 0x28
 80099da:	e9cd b301 	strd	fp, r3, [sp, #4]
 80099de:	ab09      	add	r3, sp, #36	; 0x24
 80099e0:	ec49 8b10 	vmov	d0, r8, r9
 80099e4:	9300      	str	r3, [sp, #0]
 80099e6:	6022      	str	r2, [r4, #0]
 80099e8:	f10d 0323 	add.w	r3, sp, #35	; 0x23
 80099ec:	4628      	mov	r0, r5
 80099ee:	f7ff fecd 	bl	800978c <__cvt>
 80099f2:	9b06      	ldr	r3, [sp, #24]
 80099f4:	9909      	ldr	r1, [sp, #36]	; 0x24
 80099f6:	2b47      	cmp	r3, #71	; 0x47
 80099f8:	4680      	mov	r8, r0
 80099fa:	d108      	bne.n	8009a0e <_printf_float+0x142>
 80099fc:	1cc8      	adds	r0, r1, #3
 80099fe:	db02      	blt.n	8009a06 <_printf_float+0x13a>
 8009a00:	6863      	ldr	r3, [r4, #4]
 8009a02:	4299      	cmp	r1, r3
 8009a04:	dd41      	ble.n	8009a8a <_printf_float+0x1be>
 8009a06:	f1ab 0b02 	sub.w	fp, fp, #2
 8009a0a:	fa5f fb8b 	uxtb.w	fp, fp
 8009a0e:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009a12:	d820      	bhi.n	8009a56 <_printf_float+0x18a>
 8009a14:	3901      	subs	r1, #1
 8009a16:	465a      	mov	r2, fp
 8009a18:	f104 0050 	add.w	r0, r4, #80	; 0x50
 8009a1c:	9109      	str	r1, [sp, #36]	; 0x24
 8009a1e:	f7ff ff17 	bl	8009850 <__exponent>
 8009a22:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009a24:	1813      	adds	r3, r2, r0
 8009a26:	2a01      	cmp	r2, #1
 8009a28:	4681      	mov	r9, r0
 8009a2a:	6123      	str	r3, [r4, #16]
 8009a2c:	dc02      	bgt.n	8009a34 <_printf_float+0x168>
 8009a2e:	6822      	ldr	r2, [r4, #0]
 8009a30:	07d2      	lsls	r2, r2, #31
 8009a32:	d501      	bpl.n	8009a38 <_printf_float+0x16c>
 8009a34:	3301      	adds	r3, #1
 8009a36:	6123      	str	r3, [r4, #16]
 8009a38:	f89d 3023 	ldrb.w	r3, [sp, #35]	; 0x23
 8009a3c:	2b00      	cmp	r3, #0
 8009a3e:	d09c      	beq.n	800997a <_printf_float+0xae>
 8009a40:	232d      	movs	r3, #45	; 0x2d
 8009a42:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009a46:	e798      	b.n	800997a <_printf_float+0xae>
 8009a48:	9a06      	ldr	r2, [sp, #24]
 8009a4a:	2a47      	cmp	r2, #71	; 0x47
 8009a4c:	d1be      	bne.n	80099cc <_printf_float+0x100>
 8009a4e:	2b00      	cmp	r3, #0
 8009a50:	d1bc      	bne.n	80099cc <_printf_float+0x100>
 8009a52:	2301      	movs	r3, #1
 8009a54:	e7b9      	b.n	80099ca <_printf_float+0xfe>
 8009a56:	f1bb 0f66 	cmp.w	fp, #102	; 0x66
 8009a5a:	d118      	bne.n	8009a8e <_printf_float+0x1c2>
 8009a5c:	2900      	cmp	r1, #0
 8009a5e:	6863      	ldr	r3, [r4, #4]
 8009a60:	dd0b      	ble.n	8009a7a <_printf_float+0x1ae>
 8009a62:	6121      	str	r1, [r4, #16]
 8009a64:	b913      	cbnz	r3, 8009a6c <_printf_float+0x1a0>
 8009a66:	6822      	ldr	r2, [r4, #0]
 8009a68:	07d0      	lsls	r0, r2, #31
 8009a6a:	d502      	bpl.n	8009a72 <_printf_float+0x1a6>
 8009a6c:	3301      	adds	r3, #1
 8009a6e:	440b      	add	r3, r1
 8009a70:	6123      	str	r3, [r4, #16]
 8009a72:	65a1      	str	r1, [r4, #88]	; 0x58
 8009a74:	f04f 0900 	mov.w	r9, #0
 8009a78:	e7de      	b.n	8009a38 <_printf_float+0x16c>
 8009a7a:	b913      	cbnz	r3, 8009a82 <_printf_float+0x1b6>
 8009a7c:	6822      	ldr	r2, [r4, #0]
 8009a7e:	07d2      	lsls	r2, r2, #31
 8009a80:	d501      	bpl.n	8009a86 <_printf_float+0x1ba>
 8009a82:	3302      	adds	r3, #2
 8009a84:	e7f4      	b.n	8009a70 <_printf_float+0x1a4>
 8009a86:	2301      	movs	r3, #1
 8009a88:	e7f2      	b.n	8009a70 <_printf_float+0x1a4>
 8009a8a:	f04f 0b67 	mov.w	fp, #103	; 0x67
 8009a8e:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009a90:	4299      	cmp	r1, r3
 8009a92:	db05      	blt.n	8009aa0 <_printf_float+0x1d4>
 8009a94:	6823      	ldr	r3, [r4, #0]
 8009a96:	6121      	str	r1, [r4, #16]
 8009a98:	07d8      	lsls	r0, r3, #31
 8009a9a:	d5ea      	bpl.n	8009a72 <_printf_float+0x1a6>
 8009a9c:	1c4b      	adds	r3, r1, #1
 8009a9e:	e7e7      	b.n	8009a70 <_printf_float+0x1a4>
 8009aa0:	2900      	cmp	r1, #0
 8009aa2:	bfd4      	ite	le
 8009aa4:	f1c1 0202 	rsble	r2, r1, #2
 8009aa8:	2201      	movgt	r2, #1
 8009aaa:	4413      	add	r3, r2
 8009aac:	e7e0      	b.n	8009a70 <_printf_float+0x1a4>
 8009aae:	6823      	ldr	r3, [r4, #0]
 8009ab0:	055a      	lsls	r2, r3, #21
 8009ab2:	d407      	bmi.n	8009ac4 <_printf_float+0x1f8>
 8009ab4:	6923      	ldr	r3, [r4, #16]
 8009ab6:	4642      	mov	r2, r8
 8009ab8:	4631      	mov	r1, r6
 8009aba:	4628      	mov	r0, r5
 8009abc:	47b8      	blx	r7
 8009abe:	3001      	adds	r0, #1
 8009ac0:	d12c      	bne.n	8009b1c <_printf_float+0x250>
 8009ac2:	e764      	b.n	800998e <_printf_float+0xc2>
 8009ac4:	f1bb 0f65 	cmp.w	fp, #101	; 0x65
 8009ac8:	f240 80e0 	bls.w	8009c8c <_printf_float+0x3c0>
 8009acc:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009ad0:	2200      	movs	r2, #0
 8009ad2:	2300      	movs	r3, #0
 8009ad4:	f7f6 fff8 	bl	8000ac8 <__aeabi_dcmpeq>
 8009ad8:	2800      	cmp	r0, #0
 8009ada:	d034      	beq.n	8009b46 <_printf_float+0x27a>
 8009adc:	4a37      	ldr	r2, [pc, #220]	; (8009bbc <_printf_float+0x2f0>)
 8009ade:	2301      	movs	r3, #1
 8009ae0:	4631      	mov	r1, r6
 8009ae2:	4628      	mov	r0, r5
 8009ae4:	47b8      	blx	r7
 8009ae6:	3001      	adds	r0, #1
 8009ae8:	f43f af51 	beq.w	800998e <_printf_float+0xc2>
 8009aec:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009af0:	429a      	cmp	r2, r3
 8009af2:	db02      	blt.n	8009afa <_printf_float+0x22e>
 8009af4:	6823      	ldr	r3, [r4, #0]
 8009af6:	07d8      	lsls	r0, r3, #31
 8009af8:	d510      	bpl.n	8009b1c <_printf_float+0x250>
 8009afa:	ee18 3a10 	vmov	r3, s16
 8009afe:	4652      	mov	r2, sl
 8009b00:	4631      	mov	r1, r6
 8009b02:	4628      	mov	r0, r5
 8009b04:	47b8      	blx	r7
 8009b06:	3001      	adds	r0, #1
 8009b08:	f43f af41 	beq.w	800998e <_printf_float+0xc2>
 8009b0c:	f04f 0800 	mov.w	r8, #0
 8009b10:	f104 091a 	add.w	r9, r4, #26
 8009b14:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b16:	3b01      	subs	r3, #1
 8009b18:	4543      	cmp	r3, r8
 8009b1a:	dc09      	bgt.n	8009b30 <_printf_float+0x264>
 8009b1c:	6823      	ldr	r3, [r4, #0]
 8009b1e:	079b      	lsls	r3, r3, #30
 8009b20:	f100 8105 	bmi.w	8009d2e <_printf_float+0x462>
 8009b24:	68e0      	ldr	r0, [r4, #12]
 8009b26:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8009b28:	4298      	cmp	r0, r3
 8009b2a:	bfb8      	it	lt
 8009b2c:	4618      	movlt	r0, r3
 8009b2e:	e730      	b.n	8009992 <_printf_float+0xc6>
 8009b30:	2301      	movs	r3, #1
 8009b32:	464a      	mov	r2, r9
 8009b34:	4631      	mov	r1, r6
 8009b36:	4628      	mov	r0, r5
 8009b38:	47b8      	blx	r7
 8009b3a:	3001      	adds	r0, #1
 8009b3c:	f43f af27 	beq.w	800998e <_printf_float+0xc2>
 8009b40:	f108 0801 	add.w	r8, r8, #1
 8009b44:	e7e6      	b.n	8009b14 <_printf_float+0x248>
 8009b46:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b48:	2b00      	cmp	r3, #0
 8009b4a:	dc39      	bgt.n	8009bc0 <_printf_float+0x2f4>
 8009b4c:	4a1b      	ldr	r2, [pc, #108]	; (8009bbc <_printf_float+0x2f0>)
 8009b4e:	2301      	movs	r3, #1
 8009b50:	4631      	mov	r1, r6
 8009b52:	4628      	mov	r0, r5
 8009b54:	47b8      	blx	r7
 8009b56:	3001      	adds	r0, #1
 8009b58:	f43f af19 	beq.w	800998e <_printf_float+0xc2>
 8009b5c:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009b60:	4313      	orrs	r3, r2
 8009b62:	d102      	bne.n	8009b6a <_printf_float+0x29e>
 8009b64:	6823      	ldr	r3, [r4, #0]
 8009b66:	07d9      	lsls	r1, r3, #31
 8009b68:	d5d8      	bpl.n	8009b1c <_printf_float+0x250>
 8009b6a:	ee18 3a10 	vmov	r3, s16
 8009b6e:	4652      	mov	r2, sl
 8009b70:	4631      	mov	r1, r6
 8009b72:	4628      	mov	r0, r5
 8009b74:	47b8      	blx	r7
 8009b76:	3001      	adds	r0, #1
 8009b78:	f43f af09 	beq.w	800998e <_printf_float+0xc2>
 8009b7c:	f04f 0900 	mov.w	r9, #0
 8009b80:	f104 0a1a 	add.w	sl, r4, #26
 8009b84:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8009b86:	425b      	negs	r3, r3
 8009b88:	454b      	cmp	r3, r9
 8009b8a:	dc01      	bgt.n	8009b90 <_printf_float+0x2c4>
 8009b8c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009b8e:	e792      	b.n	8009ab6 <_printf_float+0x1ea>
 8009b90:	2301      	movs	r3, #1
 8009b92:	4652      	mov	r2, sl
 8009b94:	4631      	mov	r1, r6
 8009b96:	4628      	mov	r0, r5
 8009b98:	47b8      	blx	r7
 8009b9a:	3001      	adds	r0, #1
 8009b9c:	f43f aef7 	beq.w	800998e <_printf_float+0xc2>
 8009ba0:	f109 0901 	add.w	r9, r9, #1
 8009ba4:	e7ee      	b.n	8009b84 <_printf_float+0x2b8>
 8009ba6:	bf00      	nop
 8009ba8:	7fefffff 	.word	0x7fefffff
 8009bac:	0800df80 	.word	0x0800df80
 8009bb0:	0800df84 	.word	0x0800df84
 8009bb4:	0800df8c 	.word	0x0800df8c
 8009bb8:	0800df88 	.word	0x0800df88
 8009bbc:	0800df90 	.word	0x0800df90
 8009bc0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009bc2:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bc4:	429a      	cmp	r2, r3
 8009bc6:	bfa8      	it	ge
 8009bc8:	461a      	movge	r2, r3
 8009bca:	2a00      	cmp	r2, #0
 8009bcc:	4691      	mov	r9, r2
 8009bce:	dc37      	bgt.n	8009c40 <_printf_float+0x374>
 8009bd0:	f04f 0b00 	mov.w	fp, #0
 8009bd4:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009bd8:	f104 021a 	add.w	r2, r4, #26
 8009bdc:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8009bde:	9305      	str	r3, [sp, #20]
 8009be0:	eba3 0309 	sub.w	r3, r3, r9
 8009be4:	455b      	cmp	r3, fp
 8009be6:	dc33      	bgt.n	8009c50 <_printf_float+0x384>
 8009be8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009bec:	429a      	cmp	r2, r3
 8009bee:	db3b      	blt.n	8009c68 <_printf_float+0x39c>
 8009bf0:	6823      	ldr	r3, [r4, #0]
 8009bf2:	07da      	lsls	r2, r3, #31
 8009bf4:	d438      	bmi.n	8009c68 <_printf_float+0x39c>
 8009bf6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009bf8:	9a05      	ldr	r2, [sp, #20]
 8009bfa:	9909      	ldr	r1, [sp, #36]	; 0x24
 8009bfc:	1a9a      	subs	r2, r3, r2
 8009bfe:	eba3 0901 	sub.w	r9, r3, r1
 8009c02:	4591      	cmp	r9, r2
 8009c04:	bfa8      	it	ge
 8009c06:	4691      	movge	r9, r2
 8009c08:	f1b9 0f00 	cmp.w	r9, #0
 8009c0c:	dc35      	bgt.n	8009c7a <_printf_float+0x3ae>
 8009c0e:	f04f 0800 	mov.w	r8, #0
 8009c12:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8009c16:	f104 0a1a 	add.w	sl, r4, #26
 8009c1a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8009c1e:	1a9b      	subs	r3, r3, r2
 8009c20:	eba3 0309 	sub.w	r3, r3, r9
 8009c24:	4543      	cmp	r3, r8
 8009c26:	f77f af79 	ble.w	8009b1c <_printf_float+0x250>
 8009c2a:	2301      	movs	r3, #1
 8009c2c:	4652      	mov	r2, sl
 8009c2e:	4631      	mov	r1, r6
 8009c30:	4628      	mov	r0, r5
 8009c32:	47b8      	blx	r7
 8009c34:	3001      	adds	r0, #1
 8009c36:	f43f aeaa 	beq.w	800998e <_printf_float+0xc2>
 8009c3a:	f108 0801 	add.w	r8, r8, #1
 8009c3e:	e7ec      	b.n	8009c1a <_printf_float+0x34e>
 8009c40:	4613      	mov	r3, r2
 8009c42:	4631      	mov	r1, r6
 8009c44:	4642      	mov	r2, r8
 8009c46:	4628      	mov	r0, r5
 8009c48:	47b8      	blx	r7
 8009c4a:	3001      	adds	r0, #1
 8009c4c:	d1c0      	bne.n	8009bd0 <_printf_float+0x304>
 8009c4e:	e69e      	b.n	800998e <_printf_float+0xc2>
 8009c50:	2301      	movs	r3, #1
 8009c52:	4631      	mov	r1, r6
 8009c54:	4628      	mov	r0, r5
 8009c56:	9205      	str	r2, [sp, #20]
 8009c58:	47b8      	blx	r7
 8009c5a:	3001      	adds	r0, #1
 8009c5c:	f43f ae97 	beq.w	800998e <_printf_float+0xc2>
 8009c60:	9a05      	ldr	r2, [sp, #20]
 8009c62:	f10b 0b01 	add.w	fp, fp, #1
 8009c66:	e7b9      	b.n	8009bdc <_printf_float+0x310>
 8009c68:	ee18 3a10 	vmov	r3, s16
 8009c6c:	4652      	mov	r2, sl
 8009c6e:	4631      	mov	r1, r6
 8009c70:	4628      	mov	r0, r5
 8009c72:	47b8      	blx	r7
 8009c74:	3001      	adds	r0, #1
 8009c76:	d1be      	bne.n	8009bf6 <_printf_float+0x32a>
 8009c78:	e689      	b.n	800998e <_printf_float+0xc2>
 8009c7a:	9a05      	ldr	r2, [sp, #20]
 8009c7c:	464b      	mov	r3, r9
 8009c7e:	4442      	add	r2, r8
 8009c80:	4631      	mov	r1, r6
 8009c82:	4628      	mov	r0, r5
 8009c84:	47b8      	blx	r7
 8009c86:	3001      	adds	r0, #1
 8009c88:	d1c1      	bne.n	8009c0e <_printf_float+0x342>
 8009c8a:	e680      	b.n	800998e <_printf_float+0xc2>
 8009c8c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009c8e:	2a01      	cmp	r2, #1
 8009c90:	dc01      	bgt.n	8009c96 <_printf_float+0x3ca>
 8009c92:	07db      	lsls	r3, r3, #31
 8009c94:	d538      	bpl.n	8009d08 <_printf_float+0x43c>
 8009c96:	2301      	movs	r3, #1
 8009c98:	4642      	mov	r2, r8
 8009c9a:	4631      	mov	r1, r6
 8009c9c:	4628      	mov	r0, r5
 8009c9e:	47b8      	blx	r7
 8009ca0:	3001      	adds	r0, #1
 8009ca2:	f43f ae74 	beq.w	800998e <_printf_float+0xc2>
 8009ca6:	ee18 3a10 	vmov	r3, s16
 8009caa:	4652      	mov	r2, sl
 8009cac:	4631      	mov	r1, r6
 8009cae:	4628      	mov	r0, r5
 8009cb0:	47b8      	blx	r7
 8009cb2:	3001      	adds	r0, #1
 8009cb4:	f43f ae6b 	beq.w	800998e <_printf_float+0xc2>
 8009cb8:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8009cbc:	2200      	movs	r2, #0
 8009cbe:	2300      	movs	r3, #0
 8009cc0:	f7f6 ff02 	bl	8000ac8 <__aeabi_dcmpeq>
 8009cc4:	b9d8      	cbnz	r0, 8009cfe <_printf_float+0x432>
 8009cc6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cc8:	f108 0201 	add.w	r2, r8, #1
 8009ccc:	3b01      	subs	r3, #1
 8009cce:	4631      	mov	r1, r6
 8009cd0:	4628      	mov	r0, r5
 8009cd2:	47b8      	blx	r7
 8009cd4:	3001      	adds	r0, #1
 8009cd6:	d10e      	bne.n	8009cf6 <_printf_float+0x42a>
 8009cd8:	e659      	b.n	800998e <_printf_float+0xc2>
 8009cda:	2301      	movs	r3, #1
 8009cdc:	4652      	mov	r2, sl
 8009cde:	4631      	mov	r1, r6
 8009ce0:	4628      	mov	r0, r5
 8009ce2:	47b8      	blx	r7
 8009ce4:	3001      	adds	r0, #1
 8009ce6:	f43f ae52 	beq.w	800998e <_printf_float+0xc2>
 8009cea:	f108 0801 	add.w	r8, r8, #1
 8009cee:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8009cf0:	3b01      	subs	r3, #1
 8009cf2:	4543      	cmp	r3, r8
 8009cf4:	dcf1      	bgt.n	8009cda <_printf_float+0x40e>
 8009cf6:	464b      	mov	r3, r9
 8009cf8:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8009cfc:	e6dc      	b.n	8009ab8 <_printf_float+0x1ec>
 8009cfe:	f04f 0800 	mov.w	r8, #0
 8009d02:	f104 0a1a 	add.w	sl, r4, #26
 8009d06:	e7f2      	b.n	8009cee <_printf_float+0x422>
 8009d08:	2301      	movs	r3, #1
 8009d0a:	4642      	mov	r2, r8
 8009d0c:	e7df      	b.n	8009cce <_printf_float+0x402>
 8009d0e:	2301      	movs	r3, #1
 8009d10:	464a      	mov	r2, r9
 8009d12:	4631      	mov	r1, r6
 8009d14:	4628      	mov	r0, r5
 8009d16:	47b8      	blx	r7
 8009d18:	3001      	adds	r0, #1
 8009d1a:	f43f ae38 	beq.w	800998e <_printf_float+0xc2>
 8009d1e:	f108 0801 	add.w	r8, r8, #1
 8009d22:	68e3      	ldr	r3, [r4, #12]
 8009d24:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8009d26:	1a5b      	subs	r3, r3, r1
 8009d28:	4543      	cmp	r3, r8
 8009d2a:	dcf0      	bgt.n	8009d0e <_printf_float+0x442>
 8009d2c:	e6fa      	b.n	8009b24 <_printf_float+0x258>
 8009d2e:	f04f 0800 	mov.w	r8, #0
 8009d32:	f104 0919 	add.w	r9, r4, #25
 8009d36:	e7f4      	b.n	8009d22 <_printf_float+0x456>

08009d38 <_printf_common>:
 8009d38:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009d3c:	4616      	mov	r6, r2
 8009d3e:	4699      	mov	r9, r3
 8009d40:	688a      	ldr	r2, [r1, #8]
 8009d42:	690b      	ldr	r3, [r1, #16]
 8009d44:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8009d48:	4293      	cmp	r3, r2
 8009d4a:	bfb8      	it	lt
 8009d4c:	4613      	movlt	r3, r2
 8009d4e:	6033      	str	r3, [r6, #0]
 8009d50:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8009d54:	4607      	mov	r7, r0
 8009d56:	460c      	mov	r4, r1
 8009d58:	b10a      	cbz	r2, 8009d5e <_printf_common+0x26>
 8009d5a:	3301      	adds	r3, #1
 8009d5c:	6033      	str	r3, [r6, #0]
 8009d5e:	6823      	ldr	r3, [r4, #0]
 8009d60:	0699      	lsls	r1, r3, #26
 8009d62:	bf42      	ittt	mi
 8009d64:	6833      	ldrmi	r3, [r6, #0]
 8009d66:	3302      	addmi	r3, #2
 8009d68:	6033      	strmi	r3, [r6, #0]
 8009d6a:	6825      	ldr	r5, [r4, #0]
 8009d6c:	f015 0506 	ands.w	r5, r5, #6
 8009d70:	d106      	bne.n	8009d80 <_printf_common+0x48>
 8009d72:	f104 0a19 	add.w	sl, r4, #25
 8009d76:	68e3      	ldr	r3, [r4, #12]
 8009d78:	6832      	ldr	r2, [r6, #0]
 8009d7a:	1a9b      	subs	r3, r3, r2
 8009d7c:	42ab      	cmp	r3, r5
 8009d7e:	dc26      	bgt.n	8009dce <_printf_common+0x96>
 8009d80:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8009d84:	1e13      	subs	r3, r2, #0
 8009d86:	6822      	ldr	r2, [r4, #0]
 8009d88:	bf18      	it	ne
 8009d8a:	2301      	movne	r3, #1
 8009d8c:	0692      	lsls	r2, r2, #26
 8009d8e:	d42b      	bmi.n	8009de8 <_printf_common+0xb0>
 8009d90:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8009d94:	4649      	mov	r1, r9
 8009d96:	4638      	mov	r0, r7
 8009d98:	47c0      	blx	r8
 8009d9a:	3001      	adds	r0, #1
 8009d9c:	d01e      	beq.n	8009ddc <_printf_common+0xa4>
 8009d9e:	6823      	ldr	r3, [r4, #0]
 8009da0:	68e5      	ldr	r5, [r4, #12]
 8009da2:	6832      	ldr	r2, [r6, #0]
 8009da4:	f003 0306 	and.w	r3, r3, #6
 8009da8:	2b04      	cmp	r3, #4
 8009daa:	bf08      	it	eq
 8009dac:	1aad      	subeq	r5, r5, r2
 8009dae:	68a3      	ldr	r3, [r4, #8]
 8009db0:	6922      	ldr	r2, [r4, #16]
 8009db2:	bf0c      	ite	eq
 8009db4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8009db8:	2500      	movne	r5, #0
 8009dba:	4293      	cmp	r3, r2
 8009dbc:	bfc4      	itt	gt
 8009dbe:	1a9b      	subgt	r3, r3, r2
 8009dc0:	18ed      	addgt	r5, r5, r3
 8009dc2:	2600      	movs	r6, #0
 8009dc4:	341a      	adds	r4, #26
 8009dc6:	42b5      	cmp	r5, r6
 8009dc8:	d11a      	bne.n	8009e00 <_printf_common+0xc8>
 8009dca:	2000      	movs	r0, #0
 8009dcc:	e008      	b.n	8009de0 <_printf_common+0xa8>
 8009dce:	2301      	movs	r3, #1
 8009dd0:	4652      	mov	r2, sl
 8009dd2:	4649      	mov	r1, r9
 8009dd4:	4638      	mov	r0, r7
 8009dd6:	47c0      	blx	r8
 8009dd8:	3001      	adds	r0, #1
 8009dda:	d103      	bne.n	8009de4 <_printf_common+0xac>
 8009ddc:	f04f 30ff 	mov.w	r0, #4294967295
 8009de0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009de4:	3501      	adds	r5, #1
 8009de6:	e7c6      	b.n	8009d76 <_printf_common+0x3e>
 8009de8:	18e1      	adds	r1, r4, r3
 8009dea:	1c5a      	adds	r2, r3, #1
 8009dec:	2030      	movs	r0, #48	; 0x30
 8009dee:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8009df2:	4422      	add	r2, r4
 8009df4:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8009df8:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8009dfc:	3302      	adds	r3, #2
 8009dfe:	e7c7      	b.n	8009d90 <_printf_common+0x58>
 8009e00:	2301      	movs	r3, #1
 8009e02:	4622      	mov	r2, r4
 8009e04:	4649      	mov	r1, r9
 8009e06:	4638      	mov	r0, r7
 8009e08:	47c0      	blx	r8
 8009e0a:	3001      	adds	r0, #1
 8009e0c:	d0e6      	beq.n	8009ddc <_printf_common+0xa4>
 8009e0e:	3601      	adds	r6, #1
 8009e10:	e7d9      	b.n	8009dc6 <_printf_common+0x8e>
	...

08009e14 <_printf_i>:
 8009e14:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8009e18:	7e0f      	ldrb	r7, [r1, #24]
 8009e1a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8009e1c:	2f78      	cmp	r7, #120	; 0x78
 8009e1e:	4691      	mov	r9, r2
 8009e20:	4680      	mov	r8, r0
 8009e22:	460c      	mov	r4, r1
 8009e24:	469a      	mov	sl, r3
 8009e26:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8009e2a:	d807      	bhi.n	8009e3c <_printf_i+0x28>
 8009e2c:	2f62      	cmp	r7, #98	; 0x62
 8009e2e:	d80a      	bhi.n	8009e46 <_printf_i+0x32>
 8009e30:	2f00      	cmp	r7, #0
 8009e32:	f000 80d8 	beq.w	8009fe6 <_printf_i+0x1d2>
 8009e36:	2f58      	cmp	r7, #88	; 0x58
 8009e38:	f000 80a3 	beq.w	8009f82 <_printf_i+0x16e>
 8009e3c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009e40:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8009e44:	e03a      	b.n	8009ebc <_printf_i+0xa8>
 8009e46:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8009e4a:	2b15      	cmp	r3, #21
 8009e4c:	d8f6      	bhi.n	8009e3c <_printf_i+0x28>
 8009e4e:	a101      	add	r1, pc, #4	; (adr r1, 8009e54 <_printf_i+0x40>)
 8009e50:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8009e54:	08009ead 	.word	0x08009ead
 8009e58:	08009ec1 	.word	0x08009ec1
 8009e5c:	08009e3d 	.word	0x08009e3d
 8009e60:	08009e3d 	.word	0x08009e3d
 8009e64:	08009e3d 	.word	0x08009e3d
 8009e68:	08009e3d 	.word	0x08009e3d
 8009e6c:	08009ec1 	.word	0x08009ec1
 8009e70:	08009e3d 	.word	0x08009e3d
 8009e74:	08009e3d 	.word	0x08009e3d
 8009e78:	08009e3d 	.word	0x08009e3d
 8009e7c:	08009e3d 	.word	0x08009e3d
 8009e80:	08009fcd 	.word	0x08009fcd
 8009e84:	08009ef1 	.word	0x08009ef1
 8009e88:	08009faf 	.word	0x08009faf
 8009e8c:	08009e3d 	.word	0x08009e3d
 8009e90:	08009e3d 	.word	0x08009e3d
 8009e94:	08009fef 	.word	0x08009fef
 8009e98:	08009e3d 	.word	0x08009e3d
 8009e9c:	08009ef1 	.word	0x08009ef1
 8009ea0:	08009e3d 	.word	0x08009e3d
 8009ea4:	08009e3d 	.word	0x08009e3d
 8009ea8:	08009fb7 	.word	0x08009fb7
 8009eac:	682b      	ldr	r3, [r5, #0]
 8009eae:	1d1a      	adds	r2, r3, #4
 8009eb0:	681b      	ldr	r3, [r3, #0]
 8009eb2:	602a      	str	r2, [r5, #0]
 8009eb4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8009eb8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8009ebc:	2301      	movs	r3, #1
 8009ebe:	e0a3      	b.n	800a008 <_printf_i+0x1f4>
 8009ec0:	6820      	ldr	r0, [r4, #0]
 8009ec2:	6829      	ldr	r1, [r5, #0]
 8009ec4:	0606      	lsls	r6, r0, #24
 8009ec6:	f101 0304 	add.w	r3, r1, #4
 8009eca:	d50a      	bpl.n	8009ee2 <_printf_i+0xce>
 8009ecc:	680e      	ldr	r6, [r1, #0]
 8009ece:	602b      	str	r3, [r5, #0]
 8009ed0:	2e00      	cmp	r6, #0
 8009ed2:	da03      	bge.n	8009edc <_printf_i+0xc8>
 8009ed4:	232d      	movs	r3, #45	; 0x2d
 8009ed6:	4276      	negs	r6, r6
 8009ed8:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8009edc:	485e      	ldr	r0, [pc, #376]	; (800a058 <_printf_i+0x244>)
 8009ede:	230a      	movs	r3, #10
 8009ee0:	e019      	b.n	8009f16 <_printf_i+0x102>
 8009ee2:	680e      	ldr	r6, [r1, #0]
 8009ee4:	602b      	str	r3, [r5, #0]
 8009ee6:	f010 0f40 	tst.w	r0, #64	; 0x40
 8009eea:	bf18      	it	ne
 8009eec:	b236      	sxthne	r6, r6
 8009eee:	e7ef      	b.n	8009ed0 <_printf_i+0xbc>
 8009ef0:	682b      	ldr	r3, [r5, #0]
 8009ef2:	6820      	ldr	r0, [r4, #0]
 8009ef4:	1d19      	adds	r1, r3, #4
 8009ef6:	6029      	str	r1, [r5, #0]
 8009ef8:	0601      	lsls	r1, r0, #24
 8009efa:	d501      	bpl.n	8009f00 <_printf_i+0xec>
 8009efc:	681e      	ldr	r6, [r3, #0]
 8009efe:	e002      	b.n	8009f06 <_printf_i+0xf2>
 8009f00:	0646      	lsls	r6, r0, #25
 8009f02:	d5fb      	bpl.n	8009efc <_printf_i+0xe8>
 8009f04:	881e      	ldrh	r6, [r3, #0]
 8009f06:	4854      	ldr	r0, [pc, #336]	; (800a058 <_printf_i+0x244>)
 8009f08:	2f6f      	cmp	r7, #111	; 0x6f
 8009f0a:	bf0c      	ite	eq
 8009f0c:	2308      	moveq	r3, #8
 8009f0e:	230a      	movne	r3, #10
 8009f10:	2100      	movs	r1, #0
 8009f12:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8009f16:	6865      	ldr	r5, [r4, #4]
 8009f18:	60a5      	str	r5, [r4, #8]
 8009f1a:	2d00      	cmp	r5, #0
 8009f1c:	bfa2      	ittt	ge
 8009f1e:	6821      	ldrge	r1, [r4, #0]
 8009f20:	f021 0104 	bicge.w	r1, r1, #4
 8009f24:	6021      	strge	r1, [r4, #0]
 8009f26:	b90e      	cbnz	r6, 8009f2c <_printf_i+0x118>
 8009f28:	2d00      	cmp	r5, #0
 8009f2a:	d04d      	beq.n	8009fc8 <_printf_i+0x1b4>
 8009f2c:	4615      	mov	r5, r2
 8009f2e:	fbb6 f1f3 	udiv	r1, r6, r3
 8009f32:	fb03 6711 	mls	r7, r3, r1, r6
 8009f36:	5dc7      	ldrb	r7, [r0, r7]
 8009f38:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8009f3c:	4637      	mov	r7, r6
 8009f3e:	42bb      	cmp	r3, r7
 8009f40:	460e      	mov	r6, r1
 8009f42:	d9f4      	bls.n	8009f2e <_printf_i+0x11a>
 8009f44:	2b08      	cmp	r3, #8
 8009f46:	d10b      	bne.n	8009f60 <_printf_i+0x14c>
 8009f48:	6823      	ldr	r3, [r4, #0]
 8009f4a:	07de      	lsls	r6, r3, #31
 8009f4c:	d508      	bpl.n	8009f60 <_printf_i+0x14c>
 8009f4e:	6923      	ldr	r3, [r4, #16]
 8009f50:	6861      	ldr	r1, [r4, #4]
 8009f52:	4299      	cmp	r1, r3
 8009f54:	bfde      	ittt	le
 8009f56:	2330      	movle	r3, #48	; 0x30
 8009f58:	f805 3c01 	strble.w	r3, [r5, #-1]
 8009f5c:	f105 35ff 	addle.w	r5, r5, #4294967295
 8009f60:	1b52      	subs	r2, r2, r5
 8009f62:	6122      	str	r2, [r4, #16]
 8009f64:	f8cd a000 	str.w	sl, [sp]
 8009f68:	464b      	mov	r3, r9
 8009f6a:	aa03      	add	r2, sp, #12
 8009f6c:	4621      	mov	r1, r4
 8009f6e:	4640      	mov	r0, r8
 8009f70:	f7ff fee2 	bl	8009d38 <_printf_common>
 8009f74:	3001      	adds	r0, #1
 8009f76:	d14c      	bne.n	800a012 <_printf_i+0x1fe>
 8009f78:	f04f 30ff 	mov.w	r0, #4294967295
 8009f7c:	b004      	add	sp, #16
 8009f7e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009f82:	4835      	ldr	r0, [pc, #212]	; (800a058 <_printf_i+0x244>)
 8009f84:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
 8009f88:	6829      	ldr	r1, [r5, #0]
 8009f8a:	6823      	ldr	r3, [r4, #0]
 8009f8c:	f851 6b04 	ldr.w	r6, [r1], #4
 8009f90:	6029      	str	r1, [r5, #0]
 8009f92:	061d      	lsls	r5, r3, #24
 8009f94:	d514      	bpl.n	8009fc0 <_printf_i+0x1ac>
 8009f96:	07df      	lsls	r7, r3, #31
 8009f98:	bf44      	itt	mi
 8009f9a:	f043 0320 	orrmi.w	r3, r3, #32
 8009f9e:	6023      	strmi	r3, [r4, #0]
 8009fa0:	b91e      	cbnz	r6, 8009faa <_printf_i+0x196>
 8009fa2:	6823      	ldr	r3, [r4, #0]
 8009fa4:	f023 0320 	bic.w	r3, r3, #32
 8009fa8:	6023      	str	r3, [r4, #0]
 8009faa:	2310      	movs	r3, #16
 8009fac:	e7b0      	b.n	8009f10 <_printf_i+0xfc>
 8009fae:	6823      	ldr	r3, [r4, #0]
 8009fb0:	f043 0320 	orr.w	r3, r3, #32
 8009fb4:	6023      	str	r3, [r4, #0]
 8009fb6:	2378      	movs	r3, #120	; 0x78
 8009fb8:	4828      	ldr	r0, [pc, #160]	; (800a05c <_printf_i+0x248>)
 8009fba:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
 8009fbe:	e7e3      	b.n	8009f88 <_printf_i+0x174>
 8009fc0:	0659      	lsls	r1, r3, #25
 8009fc2:	bf48      	it	mi
 8009fc4:	b2b6      	uxthmi	r6, r6
 8009fc6:	e7e6      	b.n	8009f96 <_printf_i+0x182>
 8009fc8:	4615      	mov	r5, r2
 8009fca:	e7bb      	b.n	8009f44 <_printf_i+0x130>
 8009fcc:	682b      	ldr	r3, [r5, #0]
 8009fce:	6826      	ldr	r6, [r4, #0]
 8009fd0:	6961      	ldr	r1, [r4, #20]
 8009fd2:	1d18      	adds	r0, r3, #4
 8009fd4:	6028      	str	r0, [r5, #0]
 8009fd6:	0635      	lsls	r5, r6, #24
 8009fd8:	681b      	ldr	r3, [r3, #0]
 8009fda:	d501      	bpl.n	8009fe0 <_printf_i+0x1cc>
 8009fdc:	6019      	str	r1, [r3, #0]
 8009fde:	e002      	b.n	8009fe6 <_printf_i+0x1d2>
 8009fe0:	0670      	lsls	r0, r6, #25
 8009fe2:	d5fb      	bpl.n	8009fdc <_printf_i+0x1c8>
 8009fe4:	8019      	strh	r1, [r3, #0]
 8009fe6:	2300      	movs	r3, #0
 8009fe8:	6123      	str	r3, [r4, #16]
 8009fea:	4615      	mov	r5, r2
 8009fec:	e7ba      	b.n	8009f64 <_printf_i+0x150>
 8009fee:	682b      	ldr	r3, [r5, #0]
 8009ff0:	1d1a      	adds	r2, r3, #4
 8009ff2:	602a      	str	r2, [r5, #0]
 8009ff4:	681d      	ldr	r5, [r3, #0]
 8009ff6:	6862      	ldr	r2, [r4, #4]
 8009ff8:	2100      	movs	r1, #0
 8009ffa:	4628      	mov	r0, r5
 8009ffc:	f7f6 f8f0 	bl	80001e0 <memchr>
 800a000:	b108      	cbz	r0, 800a006 <_printf_i+0x1f2>
 800a002:	1b40      	subs	r0, r0, r5
 800a004:	6060      	str	r0, [r4, #4]
 800a006:	6863      	ldr	r3, [r4, #4]
 800a008:	6123      	str	r3, [r4, #16]
 800a00a:	2300      	movs	r3, #0
 800a00c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 800a010:	e7a8      	b.n	8009f64 <_printf_i+0x150>
 800a012:	6923      	ldr	r3, [r4, #16]
 800a014:	462a      	mov	r2, r5
 800a016:	4649      	mov	r1, r9
 800a018:	4640      	mov	r0, r8
 800a01a:	47d0      	blx	sl
 800a01c:	3001      	adds	r0, #1
 800a01e:	d0ab      	beq.n	8009f78 <_printf_i+0x164>
 800a020:	6823      	ldr	r3, [r4, #0]
 800a022:	079b      	lsls	r3, r3, #30
 800a024:	d413      	bmi.n	800a04e <_printf_i+0x23a>
 800a026:	68e0      	ldr	r0, [r4, #12]
 800a028:	9b03      	ldr	r3, [sp, #12]
 800a02a:	4298      	cmp	r0, r3
 800a02c:	bfb8      	it	lt
 800a02e:	4618      	movlt	r0, r3
 800a030:	e7a4      	b.n	8009f7c <_printf_i+0x168>
 800a032:	2301      	movs	r3, #1
 800a034:	4632      	mov	r2, r6
 800a036:	4649      	mov	r1, r9
 800a038:	4640      	mov	r0, r8
 800a03a:	47d0      	blx	sl
 800a03c:	3001      	adds	r0, #1
 800a03e:	d09b      	beq.n	8009f78 <_printf_i+0x164>
 800a040:	3501      	adds	r5, #1
 800a042:	68e3      	ldr	r3, [r4, #12]
 800a044:	9903      	ldr	r1, [sp, #12]
 800a046:	1a5b      	subs	r3, r3, r1
 800a048:	42ab      	cmp	r3, r5
 800a04a:	dcf2      	bgt.n	800a032 <_printf_i+0x21e>
 800a04c:	e7eb      	b.n	800a026 <_printf_i+0x212>
 800a04e:	2500      	movs	r5, #0
 800a050:	f104 0619 	add.w	r6, r4, #25
 800a054:	e7f5      	b.n	800a042 <_printf_i+0x22e>
 800a056:	bf00      	nop
 800a058:	0800df92 	.word	0x0800df92
 800a05c:	0800dfa3 	.word	0x0800dfa3

0800a060 <siprintf>:
 800a060:	b40e      	push	{r1, r2, r3}
 800a062:	b500      	push	{lr}
 800a064:	b09c      	sub	sp, #112	; 0x70
 800a066:	ab1d      	add	r3, sp, #116	; 0x74
 800a068:	9002      	str	r0, [sp, #8]
 800a06a:	9006      	str	r0, [sp, #24]
 800a06c:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 800a070:	4809      	ldr	r0, [pc, #36]	; (800a098 <siprintf+0x38>)
 800a072:	9107      	str	r1, [sp, #28]
 800a074:	9104      	str	r1, [sp, #16]
 800a076:	4909      	ldr	r1, [pc, #36]	; (800a09c <siprintf+0x3c>)
 800a078:	f853 2b04 	ldr.w	r2, [r3], #4
 800a07c:	9105      	str	r1, [sp, #20]
 800a07e:	6800      	ldr	r0, [r0, #0]
 800a080:	9301      	str	r3, [sp, #4]
 800a082:	a902      	add	r1, sp, #8
 800a084:	f002 fef0 	bl	800ce68 <_svfiprintf_r>
 800a088:	9b02      	ldr	r3, [sp, #8]
 800a08a:	2200      	movs	r2, #0
 800a08c:	701a      	strb	r2, [r3, #0]
 800a08e:	b01c      	add	sp, #112	; 0x70
 800a090:	f85d eb04 	ldr.w	lr, [sp], #4
 800a094:	b003      	add	sp, #12
 800a096:	4770      	bx	lr
 800a098:	2000001c 	.word	0x2000001c
 800a09c:	ffff0208 	.word	0xffff0208

0800a0a0 <sulp>:
 800a0a0:	b570      	push	{r4, r5, r6, lr}
 800a0a2:	4604      	mov	r4, r0
 800a0a4:	460d      	mov	r5, r1
 800a0a6:	ec45 4b10 	vmov	d0, r4, r5
 800a0aa:	4616      	mov	r6, r2
 800a0ac:	f002 fc3a 	bl	800c924 <__ulp>
 800a0b0:	ec51 0b10 	vmov	r0, r1, d0
 800a0b4:	b17e      	cbz	r6, 800a0d6 <sulp+0x36>
 800a0b6:	f3c5 530a 	ubfx	r3, r5, #20, #11
 800a0ba:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a0be:	2b00      	cmp	r3, #0
 800a0c0:	dd09      	ble.n	800a0d6 <sulp+0x36>
 800a0c2:	051b      	lsls	r3, r3, #20
 800a0c4:	f103 557f 	add.w	r5, r3, #1069547520	; 0x3fc00000
 800a0c8:	2400      	movs	r4, #0
 800a0ca:	f505 1540 	add.w	r5, r5, #3145728	; 0x300000
 800a0ce:	4622      	mov	r2, r4
 800a0d0:	462b      	mov	r3, r5
 800a0d2:	f7f6 fa91 	bl	80005f8 <__aeabi_dmul>
 800a0d6:	bd70      	pop	{r4, r5, r6, pc}

0800a0d8 <_strtod_l>:
 800a0d8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a0dc:	ed2d 8b02 	vpush	{d8}
 800a0e0:	b09d      	sub	sp, #116	; 0x74
 800a0e2:	461f      	mov	r7, r3
 800a0e4:	2300      	movs	r3, #0
 800a0e6:	9318      	str	r3, [sp, #96]	; 0x60
 800a0e8:	4ba2      	ldr	r3, [pc, #648]	; (800a374 <_strtod_l+0x29c>)
 800a0ea:	9213      	str	r2, [sp, #76]	; 0x4c
 800a0ec:	681b      	ldr	r3, [r3, #0]
 800a0ee:	9305      	str	r3, [sp, #20]
 800a0f0:	4604      	mov	r4, r0
 800a0f2:	4618      	mov	r0, r3
 800a0f4:	4688      	mov	r8, r1
 800a0f6:	f7f6 f86b 	bl	80001d0 <strlen>
 800a0fa:	f04f 0a00 	mov.w	sl, #0
 800a0fe:	4605      	mov	r5, r0
 800a100:	f04f 0b00 	mov.w	fp, #0
 800a104:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a108:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a10a:	781a      	ldrb	r2, [r3, #0]
 800a10c:	2a2b      	cmp	r2, #43	; 0x2b
 800a10e:	d04e      	beq.n	800a1ae <_strtod_l+0xd6>
 800a110:	d83b      	bhi.n	800a18a <_strtod_l+0xb2>
 800a112:	2a0d      	cmp	r2, #13
 800a114:	d834      	bhi.n	800a180 <_strtod_l+0xa8>
 800a116:	2a08      	cmp	r2, #8
 800a118:	d834      	bhi.n	800a184 <_strtod_l+0xac>
 800a11a:	2a00      	cmp	r2, #0
 800a11c:	d03e      	beq.n	800a19c <_strtod_l+0xc4>
 800a11e:	2300      	movs	r3, #0
 800a120:	930a      	str	r3, [sp, #40]	; 0x28
 800a122:	9e17      	ldr	r6, [sp, #92]	; 0x5c
 800a124:	7833      	ldrb	r3, [r6, #0]
 800a126:	2b30      	cmp	r3, #48	; 0x30
 800a128:	f040 80b0 	bne.w	800a28c <_strtod_l+0x1b4>
 800a12c:	7873      	ldrb	r3, [r6, #1]
 800a12e:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800a132:	2b58      	cmp	r3, #88	; 0x58
 800a134:	d168      	bne.n	800a208 <_strtod_l+0x130>
 800a136:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a138:	9301      	str	r3, [sp, #4]
 800a13a:	ab18      	add	r3, sp, #96	; 0x60
 800a13c:	9702      	str	r7, [sp, #8]
 800a13e:	9300      	str	r3, [sp, #0]
 800a140:	4a8d      	ldr	r2, [pc, #564]	; (800a378 <_strtod_l+0x2a0>)
 800a142:	ab19      	add	r3, sp, #100	; 0x64
 800a144:	a917      	add	r1, sp, #92	; 0x5c
 800a146:	4620      	mov	r0, r4
 800a148:	f001 fd46 	bl	800bbd8 <__gethex>
 800a14c:	f010 0707 	ands.w	r7, r0, #7
 800a150:	4605      	mov	r5, r0
 800a152:	d005      	beq.n	800a160 <_strtod_l+0x88>
 800a154:	2f06      	cmp	r7, #6
 800a156:	d12c      	bne.n	800a1b2 <_strtod_l+0xda>
 800a158:	3601      	adds	r6, #1
 800a15a:	2300      	movs	r3, #0
 800a15c:	9617      	str	r6, [sp, #92]	; 0x5c
 800a15e:	930a      	str	r3, [sp, #40]	; 0x28
 800a160:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a162:	2b00      	cmp	r3, #0
 800a164:	f040 8590 	bne.w	800ac88 <_strtod_l+0xbb0>
 800a168:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800a16a:	b1eb      	cbz	r3, 800a1a8 <_strtod_l+0xd0>
 800a16c:	4652      	mov	r2, sl
 800a16e:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800a172:	ec43 2b10 	vmov	d0, r2, r3
 800a176:	b01d      	add	sp, #116	; 0x74
 800a178:	ecbd 8b02 	vpop	{d8}
 800a17c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a180:	2a20      	cmp	r2, #32
 800a182:	d1cc      	bne.n	800a11e <_strtod_l+0x46>
 800a184:	3301      	adds	r3, #1
 800a186:	9317      	str	r3, [sp, #92]	; 0x5c
 800a188:	e7be      	b.n	800a108 <_strtod_l+0x30>
 800a18a:	2a2d      	cmp	r2, #45	; 0x2d
 800a18c:	d1c7      	bne.n	800a11e <_strtod_l+0x46>
 800a18e:	2201      	movs	r2, #1
 800a190:	920a      	str	r2, [sp, #40]	; 0x28
 800a192:	1c5a      	adds	r2, r3, #1
 800a194:	9217      	str	r2, [sp, #92]	; 0x5c
 800a196:	785b      	ldrb	r3, [r3, #1]
 800a198:	2b00      	cmp	r3, #0
 800a19a:	d1c2      	bne.n	800a122 <_strtod_l+0x4a>
 800a19c:	9b13      	ldr	r3, [sp, #76]	; 0x4c
 800a19e:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a1a2:	2b00      	cmp	r3, #0
 800a1a4:	f040 856e 	bne.w	800ac84 <_strtod_l+0xbac>
 800a1a8:	4652      	mov	r2, sl
 800a1aa:	465b      	mov	r3, fp
 800a1ac:	e7e1      	b.n	800a172 <_strtod_l+0x9a>
 800a1ae:	2200      	movs	r2, #0
 800a1b0:	e7ee      	b.n	800a190 <_strtod_l+0xb8>
 800a1b2:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a1b4:	b13a      	cbz	r2, 800a1c6 <_strtod_l+0xee>
 800a1b6:	2135      	movs	r1, #53	; 0x35
 800a1b8:	a81a      	add	r0, sp, #104	; 0x68
 800a1ba:	f002 fcbe 	bl	800cb3a <__copybits>
 800a1be:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a1c0:	4620      	mov	r0, r4
 800a1c2:	f002 f87d 	bl	800c2c0 <_Bfree>
 800a1c6:	3f01      	subs	r7, #1
 800a1c8:	2f04      	cmp	r7, #4
 800a1ca:	d806      	bhi.n	800a1da <_strtod_l+0x102>
 800a1cc:	e8df f007 	tbb	[pc, r7]
 800a1d0:	1714030a 	.word	0x1714030a
 800a1d4:	0a          	.byte	0x0a
 800a1d5:	00          	.byte	0x00
 800a1d6:	e9dd ab1a 	ldrd	sl, fp, [sp, #104]	; 0x68
 800a1da:	0728      	lsls	r0, r5, #28
 800a1dc:	d5c0      	bpl.n	800a160 <_strtod_l+0x88>
 800a1de:	f04b 4b00 	orr.w	fp, fp, #2147483648	; 0x80000000
 800a1e2:	e7bd      	b.n	800a160 <_strtod_l+0x88>
 800a1e4:	e9dd a31a 	ldrd	sl, r3, [sp, #104]	; 0x68
 800a1e8:	9a19      	ldr	r2, [sp, #100]	; 0x64
 800a1ea:	f423 1380 	bic.w	r3, r3, #1048576	; 0x100000
 800a1ee:	f202 4233 	addw	r2, r2, #1075	; 0x433
 800a1f2:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 800a1f6:	e7f0      	b.n	800a1da <_strtod_l+0x102>
 800a1f8:	f8df b180 	ldr.w	fp, [pc, #384]	; 800a37c <_strtod_l+0x2a4>
 800a1fc:	e7ed      	b.n	800a1da <_strtod_l+0x102>
 800a1fe:	f06f 4b00 	mvn.w	fp, #2147483648	; 0x80000000
 800a202:	f04f 3aff 	mov.w	sl, #4294967295
 800a206:	e7e8      	b.n	800a1da <_strtod_l+0x102>
 800a208:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a20a:	1c5a      	adds	r2, r3, #1
 800a20c:	9217      	str	r2, [sp, #92]	; 0x5c
 800a20e:	785b      	ldrb	r3, [r3, #1]
 800a210:	2b30      	cmp	r3, #48	; 0x30
 800a212:	d0f9      	beq.n	800a208 <_strtod_l+0x130>
 800a214:	2b00      	cmp	r3, #0
 800a216:	d0a3      	beq.n	800a160 <_strtod_l+0x88>
 800a218:	2301      	movs	r3, #1
 800a21a:	f04f 0900 	mov.w	r9, #0
 800a21e:	9304      	str	r3, [sp, #16]
 800a220:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a222:	9308      	str	r3, [sp, #32]
 800a224:	f8cd 901c 	str.w	r9, [sp, #28]
 800a228:	464f      	mov	r7, r9
 800a22a:	220a      	movs	r2, #10
 800a22c:	9817      	ldr	r0, [sp, #92]	; 0x5c
 800a22e:	7806      	ldrb	r6, [r0, #0]
 800a230:	f1a6 0330 	sub.w	r3, r6, #48	; 0x30
 800a234:	b2d9      	uxtb	r1, r3
 800a236:	2909      	cmp	r1, #9
 800a238:	d92a      	bls.n	800a290 <_strtod_l+0x1b8>
 800a23a:	9905      	ldr	r1, [sp, #20]
 800a23c:	462a      	mov	r2, r5
 800a23e:	f003 f887 	bl	800d350 <strncmp>
 800a242:	b398      	cbz	r0, 800a2ac <_strtod_l+0x1d4>
 800a244:	2000      	movs	r0, #0
 800a246:	4632      	mov	r2, r6
 800a248:	463d      	mov	r5, r7
 800a24a:	9005      	str	r0, [sp, #20]
 800a24c:	4603      	mov	r3, r0
 800a24e:	2a65      	cmp	r2, #101	; 0x65
 800a250:	d001      	beq.n	800a256 <_strtod_l+0x17e>
 800a252:	2a45      	cmp	r2, #69	; 0x45
 800a254:	d118      	bne.n	800a288 <_strtod_l+0x1b0>
 800a256:	b91d      	cbnz	r5, 800a260 <_strtod_l+0x188>
 800a258:	9a04      	ldr	r2, [sp, #16]
 800a25a:	4302      	orrs	r2, r0
 800a25c:	d09e      	beq.n	800a19c <_strtod_l+0xc4>
 800a25e:	2500      	movs	r5, #0
 800a260:	f8dd 805c 	ldr.w	r8, [sp, #92]	; 0x5c
 800a264:	f108 0201 	add.w	r2, r8, #1
 800a268:	9217      	str	r2, [sp, #92]	; 0x5c
 800a26a:	f898 2001 	ldrb.w	r2, [r8, #1]
 800a26e:	2a2b      	cmp	r2, #43	; 0x2b
 800a270:	d075      	beq.n	800a35e <_strtod_l+0x286>
 800a272:	2a2d      	cmp	r2, #45	; 0x2d
 800a274:	d07b      	beq.n	800a36e <_strtod_l+0x296>
 800a276:	f04f 0c00 	mov.w	ip, #0
 800a27a:	f1a2 0130 	sub.w	r1, r2, #48	; 0x30
 800a27e:	2909      	cmp	r1, #9
 800a280:	f240 8082 	bls.w	800a388 <_strtod_l+0x2b0>
 800a284:	f8cd 805c 	str.w	r8, [sp, #92]	; 0x5c
 800a288:	2600      	movs	r6, #0
 800a28a:	e09d      	b.n	800a3c8 <_strtod_l+0x2f0>
 800a28c:	2300      	movs	r3, #0
 800a28e:	e7c4      	b.n	800a21a <_strtod_l+0x142>
 800a290:	2f08      	cmp	r7, #8
 800a292:	bfd8      	it	le
 800a294:	9907      	ldrle	r1, [sp, #28]
 800a296:	f100 0001 	add.w	r0, r0, #1
 800a29a:	bfda      	itte	le
 800a29c:	fb02 3301 	mlale	r3, r2, r1, r3
 800a2a0:	9307      	strle	r3, [sp, #28]
 800a2a2:	fb02 3909 	mlagt	r9, r2, r9, r3
 800a2a6:	3701      	adds	r7, #1
 800a2a8:	9017      	str	r0, [sp, #92]	; 0x5c
 800a2aa:	e7bf      	b.n	800a22c <_strtod_l+0x154>
 800a2ac:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2ae:	195a      	adds	r2, r3, r5
 800a2b0:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2b2:	5d5a      	ldrb	r2, [r3, r5]
 800a2b4:	2f00      	cmp	r7, #0
 800a2b6:	d037      	beq.n	800a328 <_strtod_l+0x250>
 800a2b8:	9005      	str	r0, [sp, #20]
 800a2ba:	463d      	mov	r5, r7
 800a2bc:	f1a2 0330 	sub.w	r3, r2, #48	; 0x30
 800a2c0:	2b09      	cmp	r3, #9
 800a2c2:	d912      	bls.n	800a2ea <_strtod_l+0x212>
 800a2c4:	2301      	movs	r3, #1
 800a2c6:	e7c2      	b.n	800a24e <_strtod_l+0x176>
 800a2c8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2ca:	1c5a      	adds	r2, r3, #1
 800a2cc:	9217      	str	r2, [sp, #92]	; 0x5c
 800a2ce:	785a      	ldrb	r2, [r3, #1]
 800a2d0:	3001      	adds	r0, #1
 800a2d2:	2a30      	cmp	r2, #48	; 0x30
 800a2d4:	d0f8      	beq.n	800a2c8 <_strtod_l+0x1f0>
 800a2d6:	f1a2 0331 	sub.w	r3, r2, #49	; 0x31
 800a2da:	2b08      	cmp	r3, #8
 800a2dc:	f200 84d9 	bhi.w	800ac92 <_strtod_l+0xbba>
 800a2e0:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a2e2:	9005      	str	r0, [sp, #20]
 800a2e4:	2000      	movs	r0, #0
 800a2e6:	9308      	str	r3, [sp, #32]
 800a2e8:	4605      	mov	r5, r0
 800a2ea:	3a30      	subs	r2, #48	; 0x30
 800a2ec:	f100 0301 	add.w	r3, r0, #1
 800a2f0:	d014      	beq.n	800a31c <_strtod_l+0x244>
 800a2f2:	9905      	ldr	r1, [sp, #20]
 800a2f4:	4419      	add	r1, r3
 800a2f6:	9105      	str	r1, [sp, #20]
 800a2f8:	462b      	mov	r3, r5
 800a2fa:	eb00 0e05 	add.w	lr, r0, r5
 800a2fe:	210a      	movs	r1, #10
 800a300:	4573      	cmp	r3, lr
 800a302:	d113      	bne.n	800a32c <_strtod_l+0x254>
 800a304:	182b      	adds	r3, r5, r0
 800a306:	2b08      	cmp	r3, #8
 800a308:	f105 0501 	add.w	r5, r5, #1
 800a30c:	4405      	add	r5, r0
 800a30e:	dc1c      	bgt.n	800a34a <_strtod_l+0x272>
 800a310:	9907      	ldr	r1, [sp, #28]
 800a312:	230a      	movs	r3, #10
 800a314:	fb03 2301 	mla	r3, r3, r1, r2
 800a318:	9307      	str	r3, [sp, #28]
 800a31a:	2300      	movs	r3, #0
 800a31c:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a31e:	1c51      	adds	r1, r2, #1
 800a320:	9117      	str	r1, [sp, #92]	; 0x5c
 800a322:	7852      	ldrb	r2, [r2, #1]
 800a324:	4618      	mov	r0, r3
 800a326:	e7c9      	b.n	800a2bc <_strtod_l+0x1e4>
 800a328:	4638      	mov	r0, r7
 800a32a:	e7d2      	b.n	800a2d2 <_strtod_l+0x1fa>
 800a32c:	2b08      	cmp	r3, #8
 800a32e:	dc04      	bgt.n	800a33a <_strtod_l+0x262>
 800a330:	9e07      	ldr	r6, [sp, #28]
 800a332:	434e      	muls	r6, r1
 800a334:	9607      	str	r6, [sp, #28]
 800a336:	3301      	adds	r3, #1
 800a338:	e7e2      	b.n	800a300 <_strtod_l+0x228>
 800a33a:	f103 0c01 	add.w	ip, r3, #1
 800a33e:	f1bc 0f10 	cmp.w	ip, #16
 800a342:	bfd8      	it	le
 800a344:	fb01 f909 	mulle.w	r9, r1, r9
 800a348:	e7f5      	b.n	800a336 <_strtod_l+0x25e>
 800a34a:	2d10      	cmp	r5, #16
 800a34c:	bfdc      	itt	le
 800a34e:	230a      	movle	r3, #10
 800a350:	fb03 2909 	mlale	r9, r3, r9, r2
 800a354:	e7e1      	b.n	800a31a <_strtod_l+0x242>
 800a356:	2300      	movs	r3, #0
 800a358:	9305      	str	r3, [sp, #20]
 800a35a:	2301      	movs	r3, #1
 800a35c:	e77c      	b.n	800a258 <_strtod_l+0x180>
 800a35e:	f04f 0c00 	mov.w	ip, #0
 800a362:	f108 0202 	add.w	r2, r8, #2
 800a366:	9217      	str	r2, [sp, #92]	; 0x5c
 800a368:	f898 2002 	ldrb.w	r2, [r8, #2]
 800a36c:	e785      	b.n	800a27a <_strtod_l+0x1a2>
 800a36e:	f04f 0c01 	mov.w	ip, #1
 800a372:	e7f6      	b.n	800a362 <_strtod_l+0x28a>
 800a374:	0800e198 	.word	0x0800e198
 800a378:	0800dfb4 	.word	0x0800dfb4
 800a37c:	7ff00000 	.word	0x7ff00000
 800a380:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a382:	1c51      	adds	r1, r2, #1
 800a384:	9117      	str	r1, [sp, #92]	; 0x5c
 800a386:	7852      	ldrb	r2, [r2, #1]
 800a388:	2a30      	cmp	r2, #48	; 0x30
 800a38a:	d0f9      	beq.n	800a380 <_strtod_l+0x2a8>
 800a38c:	f1a2 0131 	sub.w	r1, r2, #49	; 0x31
 800a390:	2908      	cmp	r1, #8
 800a392:	f63f af79 	bhi.w	800a288 <_strtod_l+0x1b0>
 800a396:	f1a2 0e30 	sub.w	lr, r2, #48	; 0x30
 800a39a:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a39c:	9206      	str	r2, [sp, #24]
 800a39e:	9a17      	ldr	r2, [sp, #92]	; 0x5c
 800a3a0:	1c51      	adds	r1, r2, #1
 800a3a2:	9117      	str	r1, [sp, #92]	; 0x5c
 800a3a4:	7852      	ldrb	r2, [r2, #1]
 800a3a6:	f1a2 0630 	sub.w	r6, r2, #48	; 0x30
 800a3aa:	2e09      	cmp	r6, #9
 800a3ac:	d937      	bls.n	800a41e <_strtod_l+0x346>
 800a3ae:	9e06      	ldr	r6, [sp, #24]
 800a3b0:	1b89      	subs	r1, r1, r6
 800a3b2:	2908      	cmp	r1, #8
 800a3b4:	f644 661f 	movw	r6, #19999	; 0x4e1f
 800a3b8:	dc02      	bgt.n	800a3c0 <_strtod_l+0x2e8>
 800a3ba:	4576      	cmp	r6, lr
 800a3bc:	bfa8      	it	ge
 800a3be:	4676      	movge	r6, lr
 800a3c0:	f1bc 0f00 	cmp.w	ip, #0
 800a3c4:	d000      	beq.n	800a3c8 <_strtod_l+0x2f0>
 800a3c6:	4276      	negs	r6, r6
 800a3c8:	2d00      	cmp	r5, #0
 800a3ca:	d14d      	bne.n	800a468 <_strtod_l+0x390>
 800a3cc:	9904      	ldr	r1, [sp, #16]
 800a3ce:	4301      	orrs	r1, r0
 800a3d0:	f47f aec6 	bne.w	800a160 <_strtod_l+0x88>
 800a3d4:	2b00      	cmp	r3, #0
 800a3d6:	f47f aee1 	bne.w	800a19c <_strtod_l+0xc4>
 800a3da:	2a69      	cmp	r2, #105	; 0x69
 800a3dc:	d027      	beq.n	800a42e <_strtod_l+0x356>
 800a3de:	dc24      	bgt.n	800a42a <_strtod_l+0x352>
 800a3e0:	2a49      	cmp	r2, #73	; 0x49
 800a3e2:	d024      	beq.n	800a42e <_strtod_l+0x356>
 800a3e4:	2a4e      	cmp	r2, #78	; 0x4e
 800a3e6:	f47f aed9 	bne.w	800a19c <_strtod_l+0xc4>
 800a3ea:	499f      	ldr	r1, [pc, #636]	; (800a668 <_strtod_l+0x590>)
 800a3ec:	a817      	add	r0, sp, #92	; 0x5c
 800a3ee:	f001 fe4b 	bl	800c088 <__match>
 800a3f2:	2800      	cmp	r0, #0
 800a3f4:	f43f aed2 	beq.w	800a19c <_strtod_l+0xc4>
 800a3f8:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a3fa:	781b      	ldrb	r3, [r3, #0]
 800a3fc:	2b28      	cmp	r3, #40	; 0x28
 800a3fe:	d12d      	bne.n	800a45c <_strtod_l+0x384>
 800a400:	499a      	ldr	r1, [pc, #616]	; (800a66c <_strtod_l+0x594>)
 800a402:	aa1a      	add	r2, sp, #104	; 0x68
 800a404:	a817      	add	r0, sp, #92	; 0x5c
 800a406:	f001 fe53 	bl	800c0b0 <__hexnan>
 800a40a:	2805      	cmp	r0, #5
 800a40c:	d126      	bne.n	800a45c <_strtod_l+0x384>
 800a40e:	9b1b      	ldr	r3, [sp, #108]	; 0x6c
 800a410:	f8dd a068 	ldr.w	sl, [sp, #104]	; 0x68
 800a414:	f043 4bff 	orr.w	fp, r3, #2139095040	; 0x7f800000
 800a418:	f44b 0be0 	orr.w	fp, fp, #7340032	; 0x700000
 800a41c:	e6a0      	b.n	800a160 <_strtod_l+0x88>
 800a41e:	210a      	movs	r1, #10
 800a420:	fb01 2e0e 	mla	lr, r1, lr, r2
 800a424:	f1ae 0e30 	sub.w	lr, lr, #48	; 0x30
 800a428:	e7b9      	b.n	800a39e <_strtod_l+0x2c6>
 800a42a:	2a6e      	cmp	r2, #110	; 0x6e
 800a42c:	e7db      	b.n	800a3e6 <_strtod_l+0x30e>
 800a42e:	4990      	ldr	r1, [pc, #576]	; (800a670 <_strtod_l+0x598>)
 800a430:	a817      	add	r0, sp, #92	; 0x5c
 800a432:	f001 fe29 	bl	800c088 <__match>
 800a436:	2800      	cmp	r0, #0
 800a438:	f43f aeb0 	beq.w	800a19c <_strtod_l+0xc4>
 800a43c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a43e:	498d      	ldr	r1, [pc, #564]	; (800a674 <_strtod_l+0x59c>)
 800a440:	3b01      	subs	r3, #1
 800a442:	a817      	add	r0, sp, #92	; 0x5c
 800a444:	9317      	str	r3, [sp, #92]	; 0x5c
 800a446:	f001 fe1f 	bl	800c088 <__match>
 800a44a:	b910      	cbnz	r0, 800a452 <_strtod_l+0x37a>
 800a44c:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800a44e:	3301      	adds	r3, #1
 800a450:	9317      	str	r3, [sp, #92]	; 0x5c
 800a452:	f8df b230 	ldr.w	fp, [pc, #560]	; 800a684 <_strtod_l+0x5ac>
 800a456:	f04f 0a00 	mov.w	sl, #0
 800a45a:	e681      	b.n	800a160 <_strtod_l+0x88>
 800a45c:	4886      	ldr	r0, [pc, #536]	; (800a678 <_strtod_l+0x5a0>)
 800a45e:	f002 ff5f 	bl	800d320 <nan>
 800a462:	ec5b ab10 	vmov	sl, fp, d0
 800a466:	e67b      	b.n	800a160 <_strtod_l+0x88>
 800a468:	9b05      	ldr	r3, [sp, #20]
 800a46a:	9807      	ldr	r0, [sp, #28]
 800a46c:	1af3      	subs	r3, r6, r3
 800a46e:	2f00      	cmp	r7, #0
 800a470:	bf08      	it	eq
 800a472:	462f      	moveq	r7, r5
 800a474:	2d10      	cmp	r5, #16
 800a476:	9306      	str	r3, [sp, #24]
 800a478:	46a8      	mov	r8, r5
 800a47a:	bfa8      	it	ge
 800a47c:	f04f 0810 	movge.w	r8, #16
 800a480:	f7f6 f840 	bl	8000504 <__aeabi_ui2d>
 800a484:	2d09      	cmp	r5, #9
 800a486:	4682      	mov	sl, r0
 800a488:	468b      	mov	fp, r1
 800a48a:	dd13      	ble.n	800a4b4 <_strtod_l+0x3dc>
 800a48c:	4b7b      	ldr	r3, [pc, #492]	; (800a67c <_strtod_l+0x5a4>)
 800a48e:	eb03 03c8 	add.w	r3, r3, r8, lsl #3
 800a492:	e953 2312 	ldrd	r2, r3, [r3, #-72]	; 0x48
 800a496:	f7f6 f8af 	bl	80005f8 <__aeabi_dmul>
 800a49a:	4682      	mov	sl, r0
 800a49c:	4648      	mov	r0, r9
 800a49e:	468b      	mov	fp, r1
 800a4a0:	f7f6 f830 	bl	8000504 <__aeabi_ui2d>
 800a4a4:	4602      	mov	r2, r0
 800a4a6:	460b      	mov	r3, r1
 800a4a8:	4650      	mov	r0, sl
 800a4aa:	4659      	mov	r1, fp
 800a4ac:	f7f5 feee 	bl	800028c <__adddf3>
 800a4b0:	4682      	mov	sl, r0
 800a4b2:	468b      	mov	fp, r1
 800a4b4:	2d0f      	cmp	r5, #15
 800a4b6:	dc38      	bgt.n	800a52a <_strtod_l+0x452>
 800a4b8:	9b06      	ldr	r3, [sp, #24]
 800a4ba:	2b00      	cmp	r3, #0
 800a4bc:	f43f ae50 	beq.w	800a160 <_strtod_l+0x88>
 800a4c0:	dd24      	ble.n	800a50c <_strtod_l+0x434>
 800a4c2:	2b16      	cmp	r3, #22
 800a4c4:	dc0b      	bgt.n	800a4de <_strtod_l+0x406>
 800a4c6:	496d      	ldr	r1, [pc, #436]	; (800a67c <_strtod_l+0x5a4>)
 800a4c8:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a4cc:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4d0:	4652      	mov	r2, sl
 800a4d2:	465b      	mov	r3, fp
 800a4d4:	f7f6 f890 	bl	80005f8 <__aeabi_dmul>
 800a4d8:	4682      	mov	sl, r0
 800a4da:	468b      	mov	fp, r1
 800a4dc:	e640      	b.n	800a160 <_strtod_l+0x88>
 800a4de:	9a06      	ldr	r2, [sp, #24]
 800a4e0:	f1c5 0325 	rsb	r3, r5, #37	; 0x25
 800a4e4:	4293      	cmp	r3, r2
 800a4e6:	db20      	blt.n	800a52a <_strtod_l+0x452>
 800a4e8:	4c64      	ldr	r4, [pc, #400]	; (800a67c <_strtod_l+0x5a4>)
 800a4ea:	f1c5 050f 	rsb	r5, r5, #15
 800a4ee:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800a4f2:	4652      	mov	r2, sl
 800a4f4:	465b      	mov	r3, fp
 800a4f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a4fa:	f7f6 f87d 	bl	80005f8 <__aeabi_dmul>
 800a4fe:	9b06      	ldr	r3, [sp, #24]
 800a500:	1b5d      	subs	r5, r3, r5
 800a502:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800a506:	e9d4 2300 	ldrd	r2, r3, [r4]
 800a50a:	e7e3      	b.n	800a4d4 <_strtod_l+0x3fc>
 800a50c:	9b06      	ldr	r3, [sp, #24]
 800a50e:	3316      	adds	r3, #22
 800a510:	db0b      	blt.n	800a52a <_strtod_l+0x452>
 800a512:	9b05      	ldr	r3, [sp, #20]
 800a514:	1b9e      	subs	r6, r3, r6
 800a516:	4b59      	ldr	r3, [pc, #356]	; (800a67c <_strtod_l+0x5a4>)
 800a518:	eb03 06c6 	add.w	r6, r3, r6, lsl #3
 800a51c:	e9d6 2300 	ldrd	r2, r3, [r6]
 800a520:	4650      	mov	r0, sl
 800a522:	4659      	mov	r1, fp
 800a524:	f7f6 f992 	bl	800084c <__aeabi_ddiv>
 800a528:	e7d6      	b.n	800a4d8 <_strtod_l+0x400>
 800a52a:	9b06      	ldr	r3, [sp, #24]
 800a52c:	eba5 0808 	sub.w	r8, r5, r8
 800a530:	4498      	add	r8, r3
 800a532:	f1b8 0f00 	cmp.w	r8, #0
 800a536:	dd74      	ble.n	800a622 <_strtod_l+0x54a>
 800a538:	f018 030f 	ands.w	r3, r8, #15
 800a53c:	d00a      	beq.n	800a554 <_strtod_l+0x47c>
 800a53e:	494f      	ldr	r1, [pc, #316]	; (800a67c <_strtod_l+0x5a4>)
 800a540:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800a544:	4652      	mov	r2, sl
 800a546:	465b      	mov	r3, fp
 800a548:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a54c:	f7f6 f854 	bl	80005f8 <__aeabi_dmul>
 800a550:	4682      	mov	sl, r0
 800a552:	468b      	mov	fp, r1
 800a554:	f038 080f 	bics.w	r8, r8, #15
 800a558:	d04f      	beq.n	800a5fa <_strtod_l+0x522>
 800a55a:	f5b8 7f9a 	cmp.w	r8, #308	; 0x134
 800a55e:	dd22      	ble.n	800a5a6 <_strtod_l+0x4ce>
 800a560:	2500      	movs	r5, #0
 800a562:	462e      	mov	r6, r5
 800a564:	9507      	str	r5, [sp, #28]
 800a566:	9505      	str	r5, [sp, #20]
 800a568:	2322      	movs	r3, #34	; 0x22
 800a56a:	f8df b118 	ldr.w	fp, [pc, #280]	; 800a684 <_strtod_l+0x5ac>
 800a56e:	6023      	str	r3, [r4, #0]
 800a570:	f04f 0a00 	mov.w	sl, #0
 800a574:	9b07      	ldr	r3, [sp, #28]
 800a576:	2b00      	cmp	r3, #0
 800a578:	f43f adf2 	beq.w	800a160 <_strtod_l+0x88>
 800a57c:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a57e:	4620      	mov	r0, r4
 800a580:	f001 fe9e 	bl	800c2c0 <_Bfree>
 800a584:	9905      	ldr	r1, [sp, #20]
 800a586:	4620      	mov	r0, r4
 800a588:	f001 fe9a 	bl	800c2c0 <_Bfree>
 800a58c:	4631      	mov	r1, r6
 800a58e:	4620      	mov	r0, r4
 800a590:	f001 fe96 	bl	800c2c0 <_Bfree>
 800a594:	9907      	ldr	r1, [sp, #28]
 800a596:	4620      	mov	r0, r4
 800a598:	f001 fe92 	bl	800c2c0 <_Bfree>
 800a59c:	4629      	mov	r1, r5
 800a59e:	4620      	mov	r0, r4
 800a5a0:	f001 fe8e 	bl	800c2c0 <_Bfree>
 800a5a4:	e5dc      	b.n	800a160 <_strtod_l+0x88>
 800a5a6:	4b36      	ldr	r3, [pc, #216]	; (800a680 <_strtod_l+0x5a8>)
 800a5a8:	9304      	str	r3, [sp, #16]
 800a5aa:	2300      	movs	r3, #0
 800a5ac:	ea4f 1828 	mov.w	r8, r8, asr #4
 800a5b0:	4650      	mov	r0, sl
 800a5b2:	4659      	mov	r1, fp
 800a5b4:	4699      	mov	r9, r3
 800a5b6:	f1b8 0f01 	cmp.w	r8, #1
 800a5ba:	dc21      	bgt.n	800a600 <_strtod_l+0x528>
 800a5bc:	b10b      	cbz	r3, 800a5c2 <_strtod_l+0x4ea>
 800a5be:	4682      	mov	sl, r0
 800a5c0:	468b      	mov	fp, r1
 800a5c2:	4b2f      	ldr	r3, [pc, #188]	; (800a680 <_strtod_l+0x5a8>)
 800a5c4:	f1ab 7b54 	sub.w	fp, fp, #55574528	; 0x3500000
 800a5c8:	eb03 09c9 	add.w	r9, r3, r9, lsl #3
 800a5cc:	4652      	mov	r2, sl
 800a5ce:	465b      	mov	r3, fp
 800a5d0:	e9d9 0100 	ldrd	r0, r1, [r9]
 800a5d4:	f7f6 f810 	bl	80005f8 <__aeabi_dmul>
 800a5d8:	4b2a      	ldr	r3, [pc, #168]	; (800a684 <_strtod_l+0x5ac>)
 800a5da:	460a      	mov	r2, r1
 800a5dc:	400b      	ands	r3, r1
 800a5de:	492a      	ldr	r1, [pc, #168]	; (800a688 <_strtod_l+0x5b0>)
 800a5e0:	428b      	cmp	r3, r1
 800a5e2:	4682      	mov	sl, r0
 800a5e4:	d8bc      	bhi.n	800a560 <_strtod_l+0x488>
 800a5e6:	f5a1 1180 	sub.w	r1, r1, #1048576	; 0x100000
 800a5ea:	428b      	cmp	r3, r1
 800a5ec:	bf86      	itte	hi
 800a5ee:	f8df b09c 	ldrhi.w	fp, [pc, #156]	; 800a68c <_strtod_l+0x5b4>
 800a5f2:	f04f 3aff 	movhi.w	sl, #4294967295
 800a5f6:	f102 7b54 	addls.w	fp, r2, #55574528	; 0x3500000
 800a5fa:	2300      	movs	r3, #0
 800a5fc:	9304      	str	r3, [sp, #16]
 800a5fe:	e084      	b.n	800a70a <_strtod_l+0x632>
 800a600:	f018 0f01 	tst.w	r8, #1
 800a604:	d005      	beq.n	800a612 <_strtod_l+0x53a>
 800a606:	9b04      	ldr	r3, [sp, #16]
 800a608:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a60c:	f7f5 fff4 	bl	80005f8 <__aeabi_dmul>
 800a610:	2301      	movs	r3, #1
 800a612:	9a04      	ldr	r2, [sp, #16]
 800a614:	3208      	adds	r2, #8
 800a616:	f109 0901 	add.w	r9, r9, #1
 800a61a:	ea4f 0868 	mov.w	r8, r8, asr #1
 800a61e:	9204      	str	r2, [sp, #16]
 800a620:	e7c9      	b.n	800a5b6 <_strtod_l+0x4de>
 800a622:	d0ea      	beq.n	800a5fa <_strtod_l+0x522>
 800a624:	f1c8 0800 	rsb	r8, r8, #0
 800a628:	f018 020f 	ands.w	r2, r8, #15
 800a62c:	d00a      	beq.n	800a644 <_strtod_l+0x56c>
 800a62e:	4b13      	ldr	r3, [pc, #76]	; (800a67c <_strtod_l+0x5a4>)
 800a630:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800a634:	4650      	mov	r0, sl
 800a636:	4659      	mov	r1, fp
 800a638:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a63c:	f7f6 f906 	bl	800084c <__aeabi_ddiv>
 800a640:	4682      	mov	sl, r0
 800a642:	468b      	mov	fp, r1
 800a644:	ea5f 1828 	movs.w	r8, r8, asr #4
 800a648:	d0d7      	beq.n	800a5fa <_strtod_l+0x522>
 800a64a:	f1b8 0f1f 	cmp.w	r8, #31
 800a64e:	dd1f      	ble.n	800a690 <_strtod_l+0x5b8>
 800a650:	2500      	movs	r5, #0
 800a652:	462e      	mov	r6, r5
 800a654:	9507      	str	r5, [sp, #28]
 800a656:	9505      	str	r5, [sp, #20]
 800a658:	2322      	movs	r3, #34	; 0x22
 800a65a:	f04f 0a00 	mov.w	sl, #0
 800a65e:	f04f 0b00 	mov.w	fp, #0
 800a662:	6023      	str	r3, [r4, #0]
 800a664:	e786      	b.n	800a574 <_strtod_l+0x49c>
 800a666:	bf00      	nop
 800a668:	0800df8d 	.word	0x0800df8d
 800a66c:	0800dfc8 	.word	0x0800dfc8
 800a670:	0800df85 	.word	0x0800df85
 800a674:	0800e0bb 	.word	0x0800e0bb
 800a678:	0800e0b7 	.word	0x0800e0b7
 800a67c:	0800e230 	.word	0x0800e230
 800a680:	0800e208 	.word	0x0800e208
 800a684:	7ff00000 	.word	0x7ff00000
 800a688:	7ca00000 	.word	0x7ca00000
 800a68c:	7fefffff 	.word	0x7fefffff
 800a690:	f018 0310 	ands.w	r3, r8, #16
 800a694:	bf18      	it	ne
 800a696:	236a      	movne	r3, #106	; 0x6a
 800a698:	f8df 93ac 	ldr.w	r9, [pc, #940]	; 800aa48 <_strtod_l+0x970>
 800a69c:	9304      	str	r3, [sp, #16]
 800a69e:	4650      	mov	r0, sl
 800a6a0:	4659      	mov	r1, fp
 800a6a2:	2300      	movs	r3, #0
 800a6a4:	f018 0f01 	tst.w	r8, #1
 800a6a8:	d004      	beq.n	800a6b4 <_strtod_l+0x5dc>
 800a6aa:	e9d9 2300 	ldrd	r2, r3, [r9]
 800a6ae:	f7f5 ffa3 	bl	80005f8 <__aeabi_dmul>
 800a6b2:	2301      	movs	r3, #1
 800a6b4:	ea5f 0868 	movs.w	r8, r8, asr #1
 800a6b8:	f109 0908 	add.w	r9, r9, #8
 800a6bc:	d1f2      	bne.n	800a6a4 <_strtod_l+0x5cc>
 800a6be:	b10b      	cbz	r3, 800a6c4 <_strtod_l+0x5ec>
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	468b      	mov	fp, r1
 800a6c4:	9b04      	ldr	r3, [sp, #16]
 800a6c6:	b1c3      	cbz	r3, 800a6fa <_strtod_l+0x622>
 800a6c8:	f3cb 520a 	ubfx	r2, fp, #20, #11
 800a6cc:	f1c2 036b 	rsb	r3, r2, #107	; 0x6b
 800a6d0:	2b00      	cmp	r3, #0
 800a6d2:	4659      	mov	r1, fp
 800a6d4:	dd11      	ble.n	800a6fa <_strtod_l+0x622>
 800a6d6:	2b1f      	cmp	r3, #31
 800a6d8:	f340 8124 	ble.w	800a924 <_strtod_l+0x84c>
 800a6dc:	2b34      	cmp	r3, #52	; 0x34
 800a6de:	bfde      	ittt	le
 800a6e0:	f1c2 024b 	rsble	r2, r2, #75	; 0x4b
 800a6e4:	f04f 33ff 	movle.w	r3, #4294967295
 800a6e8:	fa03 f202 	lslle.w	r2, r3, r2
 800a6ec:	f04f 0a00 	mov.w	sl, #0
 800a6f0:	bfcc      	ite	gt
 800a6f2:	f04f 7b5c 	movgt.w	fp, #57671680	; 0x3700000
 800a6f6:	ea02 0b01 	andle.w	fp, r2, r1
 800a6fa:	2200      	movs	r2, #0
 800a6fc:	2300      	movs	r3, #0
 800a6fe:	4650      	mov	r0, sl
 800a700:	4659      	mov	r1, fp
 800a702:	f7f6 f9e1 	bl	8000ac8 <__aeabi_dcmpeq>
 800a706:	2800      	cmp	r0, #0
 800a708:	d1a2      	bne.n	800a650 <_strtod_l+0x578>
 800a70a:	9b07      	ldr	r3, [sp, #28]
 800a70c:	9300      	str	r3, [sp, #0]
 800a70e:	9908      	ldr	r1, [sp, #32]
 800a710:	462b      	mov	r3, r5
 800a712:	463a      	mov	r2, r7
 800a714:	4620      	mov	r0, r4
 800a716:	f001 fe3b 	bl	800c390 <__s2b>
 800a71a:	9007      	str	r0, [sp, #28]
 800a71c:	2800      	cmp	r0, #0
 800a71e:	f43f af1f 	beq.w	800a560 <_strtod_l+0x488>
 800a722:	9b05      	ldr	r3, [sp, #20]
 800a724:	1b9e      	subs	r6, r3, r6
 800a726:	9b06      	ldr	r3, [sp, #24]
 800a728:	2b00      	cmp	r3, #0
 800a72a:	bfb4      	ite	lt
 800a72c:	4633      	movlt	r3, r6
 800a72e:	2300      	movge	r3, #0
 800a730:	930c      	str	r3, [sp, #48]	; 0x30
 800a732:	9b06      	ldr	r3, [sp, #24]
 800a734:	2500      	movs	r5, #0
 800a736:	ea23 73e3 	bic.w	r3, r3, r3, asr #31
 800a73a:	9312      	str	r3, [sp, #72]	; 0x48
 800a73c:	462e      	mov	r6, r5
 800a73e:	9b07      	ldr	r3, [sp, #28]
 800a740:	4620      	mov	r0, r4
 800a742:	6859      	ldr	r1, [r3, #4]
 800a744:	f001 fd7c 	bl	800c240 <_Balloc>
 800a748:	9005      	str	r0, [sp, #20]
 800a74a:	2800      	cmp	r0, #0
 800a74c:	f43f af0c 	beq.w	800a568 <_strtod_l+0x490>
 800a750:	9b07      	ldr	r3, [sp, #28]
 800a752:	691a      	ldr	r2, [r3, #16]
 800a754:	3202      	adds	r2, #2
 800a756:	f103 010c 	add.w	r1, r3, #12
 800a75a:	0092      	lsls	r2, r2, #2
 800a75c:	300c      	adds	r0, #12
 800a75e:	f001 fd61 	bl	800c224 <memcpy>
 800a762:	ec4b ab10 	vmov	d0, sl, fp
 800a766:	aa1a      	add	r2, sp, #104	; 0x68
 800a768:	a919      	add	r1, sp, #100	; 0x64
 800a76a:	4620      	mov	r0, r4
 800a76c:	f002 f956 	bl	800ca1c <__d2b>
 800a770:	ec4b ab18 	vmov	d8, sl, fp
 800a774:	9018      	str	r0, [sp, #96]	; 0x60
 800a776:	2800      	cmp	r0, #0
 800a778:	f43f aef6 	beq.w	800a568 <_strtod_l+0x490>
 800a77c:	2101      	movs	r1, #1
 800a77e:	4620      	mov	r0, r4
 800a780:	f001 fea0 	bl	800c4c4 <__i2b>
 800a784:	4606      	mov	r6, r0
 800a786:	2800      	cmp	r0, #0
 800a788:	f43f aeee 	beq.w	800a568 <_strtod_l+0x490>
 800a78c:	9b19      	ldr	r3, [sp, #100]	; 0x64
 800a78e:	9904      	ldr	r1, [sp, #16]
 800a790:	2b00      	cmp	r3, #0
 800a792:	bfab      	itete	ge
 800a794:	9a0c      	ldrge	r2, [sp, #48]	; 0x30
 800a796:	9a12      	ldrlt	r2, [sp, #72]	; 0x48
 800a798:	9f12      	ldrge	r7, [sp, #72]	; 0x48
 800a79a:	f8dd 9030 	ldrlt.w	r9, [sp, #48]	; 0x30
 800a79e:	bfac      	ite	ge
 800a7a0:	eb03 0902 	addge.w	r9, r3, r2
 800a7a4:	1ad7      	sublt	r7, r2, r3
 800a7a6:	9a1a      	ldr	r2, [sp, #104]	; 0x68
 800a7a8:	eba3 0801 	sub.w	r8, r3, r1
 800a7ac:	4490      	add	r8, r2
 800a7ae:	4ba1      	ldr	r3, [pc, #644]	; (800aa34 <_strtod_l+0x95c>)
 800a7b0:	f108 38ff 	add.w	r8, r8, #4294967295
 800a7b4:	4598      	cmp	r8, r3
 800a7b6:	f1c2 0236 	rsb	r2, r2, #54	; 0x36
 800a7ba:	f280 80c7 	bge.w	800a94c <_strtod_l+0x874>
 800a7be:	eba3 0308 	sub.w	r3, r3, r8
 800a7c2:	2b1f      	cmp	r3, #31
 800a7c4:	eba2 0203 	sub.w	r2, r2, r3
 800a7c8:	f04f 0101 	mov.w	r1, #1
 800a7cc:	f300 80b1 	bgt.w	800a932 <_strtod_l+0x85a>
 800a7d0:	fa01 f303 	lsl.w	r3, r1, r3
 800a7d4:	930d      	str	r3, [sp, #52]	; 0x34
 800a7d6:	2300      	movs	r3, #0
 800a7d8:	9308      	str	r3, [sp, #32]
 800a7da:	eb09 0802 	add.w	r8, r9, r2
 800a7de:	9b04      	ldr	r3, [sp, #16]
 800a7e0:	45c1      	cmp	r9, r8
 800a7e2:	4417      	add	r7, r2
 800a7e4:	441f      	add	r7, r3
 800a7e6:	464b      	mov	r3, r9
 800a7e8:	bfa8      	it	ge
 800a7ea:	4643      	movge	r3, r8
 800a7ec:	42bb      	cmp	r3, r7
 800a7ee:	bfa8      	it	ge
 800a7f0:	463b      	movge	r3, r7
 800a7f2:	2b00      	cmp	r3, #0
 800a7f4:	bfc2      	ittt	gt
 800a7f6:	eba8 0803 	subgt.w	r8, r8, r3
 800a7fa:	1aff      	subgt	r7, r7, r3
 800a7fc:	eba9 0903 	subgt.w	r9, r9, r3
 800a800:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800a802:	2b00      	cmp	r3, #0
 800a804:	dd17      	ble.n	800a836 <_strtod_l+0x75e>
 800a806:	4631      	mov	r1, r6
 800a808:	461a      	mov	r2, r3
 800a80a:	4620      	mov	r0, r4
 800a80c:	f001 ff1a 	bl	800c644 <__pow5mult>
 800a810:	4606      	mov	r6, r0
 800a812:	2800      	cmp	r0, #0
 800a814:	f43f aea8 	beq.w	800a568 <_strtod_l+0x490>
 800a818:	4601      	mov	r1, r0
 800a81a:	9a18      	ldr	r2, [sp, #96]	; 0x60
 800a81c:	4620      	mov	r0, r4
 800a81e:	f001 fe67 	bl	800c4f0 <__multiply>
 800a822:	900b      	str	r0, [sp, #44]	; 0x2c
 800a824:	2800      	cmp	r0, #0
 800a826:	f43f ae9f 	beq.w	800a568 <_strtod_l+0x490>
 800a82a:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a82c:	4620      	mov	r0, r4
 800a82e:	f001 fd47 	bl	800c2c0 <_Bfree>
 800a832:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a834:	9318      	str	r3, [sp, #96]	; 0x60
 800a836:	f1b8 0f00 	cmp.w	r8, #0
 800a83a:	f300 808c 	bgt.w	800a956 <_strtod_l+0x87e>
 800a83e:	9b06      	ldr	r3, [sp, #24]
 800a840:	2b00      	cmp	r3, #0
 800a842:	dd08      	ble.n	800a856 <_strtod_l+0x77e>
 800a844:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800a846:	9905      	ldr	r1, [sp, #20]
 800a848:	4620      	mov	r0, r4
 800a84a:	f001 fefb 	bl	800c644 <__pow5mult>
 800a84e:	9005      	str	r0, [sp, #20]
 800a850:	2800      	cmp	r0, #0
 800a852:	f43f ae89 	beq.w	800a568 <_strtod_l+0x490>
 800a856:	2f00      	cmp	r7, #0
 800a858:	dd08      	ble.n	800a86c <_strtod_l+0x794>
 800a85a:	9905      	ldr	r1, [sp, #20]
 800a85c:	463a      	mov	r2, r7
 800a85e:	4620      	mov	r0, r4
 800a860:	f001 ff4a 	bl	800c6f8 <__lshift>
 800a864:	9005      	str	r0, [sp, #20]
 800a866:	2800      	cmp	r0, #0
 800a868:	f43f ae7e 	beq.w	800a568 <_strtod_l+0x490>
 800a86c:	f1b9 0f00 	cmp.w	r9, #0
 800a870:	dd08      	ble.n	800a884 <_strtod_l+0x7ac>
 800a872:	4631      	mov	r1, r6
 800a874:	464a      	mov	r2, r9
 800a876:	4620      	mov	r0, r4
 800a878:	f001 ff3e 	bl	800c6f8 <__lshift>
 800a87c:	4606      	mov	r6, r0
 800a87e:	2800      	cmp	r0, #0
 800a880:	f43f ae72 	beq.w	800a568 <_strtod_l+0x490>
 800a884:	9a05      	ldr	r2, [sp, #20]
 800a886:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a888:	4620      	mov	r0, r4
 800a88a:	f001 ffc1 	bl	800c810 <__mdiff>
 800a88e:	4605      	mov	r5, r0
 800a890:	2800      	cmp	r0, #0
 800a892:	f43f ae69 	beq.w	800a568 <_strtod_l+0x490>
 800a896:	68c3      	ldr	r3, [r0, #12]
 800a898:	930b      	str	r3, [sp, #44]	; 0x2c
 800a89a:	2300      	movs	r3, #0
 800a89c:	60c3      	str	r3, [r0, #12]
 800a89e:	4631      	mov	r1, r6
 800a8a0:	f001 ff9a 	bl	800c7d8 <__mcmp>
 800a8a4:	2800      	cmp	r0, #0
 800a8a6:	da60      	bge.n	800a96a <_strtod_l+0x892>
 800a8a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a8aa:	ea53 030a 	orrs.w	r3, r3, sl
 800a8ae:	f040 8082 	bne.w	800a9b6 <_strtod_l+0x8de>
 800a8b2:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d17d      	bne.n	800a9b6 <_strtod_l+0x8de>
 800a8ba:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800a8be:	0d1b      	lsrs	r3, r3, #20
 800a8c0:	051b      	lsls	r3, r3, #20
 800a8c2:	f1b3 6fd6 	cmp.w	r3, #112197632	; 0x6b00000
 800a8c6:	d976      	bls.n	800a9b6 <_strtod_l+0x8de>
 800a8c8:	696b      	ldr	r3, [r5, #20]
 800a8ca:	b913      	cbnz	r3, 800a8d2 <_strtod_l+0x7fa>
 800a8cc:	692b      	ldr	r3, [r5, #16]
 800a8ce:	2b01      	cmp	r3, #1
 800a8d0:	dd71      	ble.n	800a9b6 <_strtod_l+0x8de>
 800a8d2:	4629      	mov	r1, r5
 800a8d4:	2201      	movs	r2, #1
 800a8d6:	4620      	mov	r0, r4
 800a8d8:	f001 ff0e 	bl	800c6f8 <__lshift>
 800a8dc:	4631      	mov	r1, r6
 800a8de:	4605      	mov	r5, r0
 800a8e0:	f001 ff7a 	bl	800c7d8 <__mcmp>
 800a8e4:	2800      	cmp	r0, #0
 800a8e6:	dd66      	ble.n	800a9b6 <_strtod_l+0x8de>
 800a8e8:	9904      	ldr	r1, [sp, #16]
 800a8ea:	4a53      	ldr	r2, [pc, #332]	; (800aa38 <_strtod_l+0x960>)
 800a8ec:	465b      	mov	r3, fp
 800a8ee:	2900      	cmp	r1, #0
 800a8f0:	f000 8081 	beq.w	800a9f6 <_strtod_l+0x91e>
 800a8f4:	ea02 010b 	and.w	r1, r2, fp
 800a8f8:	f1b1 6fd6 	cmp.w	r1, #112197632	; 0x6b00000
 800a8fc:	dc7b      	bgt.n	800a9f6 <_strtod_l+0x91e>
 800a8fe:	f1b1 7f5c 	cmp.w	r1, #57671680	; 0x3700000
 800a902:	f77f aea9 	ble.w	800a658 <_strtod_l+0x580>
 800a906:	4b4d      	ldr	r3, [pc, #308]	; (800aa3c <_strtod_l+0x964>)
 800a908:	4650      	mov	r0, sl
 800a90a:	4659      	mov	r1, fp
 800a90c:	2200      	movs	r2, #0
 800a90e:	f7f5 fe73 	bl	80005f8 <__aeabi_dmul>
 800a912:	460b      	mov	r3, r1
 800a914:	4303      	orrs	r3, r0
 800a916:	bf08      	it	eq
 800a918:	2322      	moveq	r3, #34	; 0x22
 800a91a:	4682      	mov	sl, r0
 800a91c:	468b      	mov	fp, r1
 800a91e:	bf08      	it	eq
 800a920:	6023      	streq	r3, [r4, #0]
 800a922:	e62b      	b.n	800a57c <_strtod_l+0x4a4>
 800a924:	f04f 32ff 	mov.w	r2, #4294967295
 800a928:	fa02 f303 	lsl.w	r3, r2, r3
 800a92c:	ea03 0a0a 	and.w	sl, r3, sl
 800a930:	e6e3      	b.n	800a6fa <_strtod_l+0x622>
 800a932:	f1c8 487f 	rsb	r8, r8, #4278190080	; 0xff000000
 800a936:	f508 087f 	add.w	r8, r8, #16711680	; 0xff0000
 800a93a:	f508 487b 	add.w	r8, r8, #64256	; 0xfb00
 800a93e:	f108 08e2 	add.w	r8, r8, #226	; 0xe2
 800a942:	fa01 f308 	lsl.w	r3, r1, r8
 800a946:	9308      	str	r3, [sp, #32]
 800a948:	910d      	str	r1, [sp, #52]	; 0x34
 800a94a:	e746      	b.n	800a7da <_strtod_l+0x702>
 800a94c:	2300      	movs	r3, #0
 800a94e:	9308      	str	r3, [sp, #32]
 800a950:	2301      	movs	r3, #1
 800a952:	930d      	str	r3, [sp, #52]	; 0x34
 800a954:	e741      	b.n	800a7da <_strtod_l+0x702>
 800a956:	9918      	ldr	r1, [sp, #96]	; 0x60
 800a958:	4642      	mov	r2, r8
 800a95a:	4620      	mov	r0, r4
 800a95c:	f001 fecc 	bl	800c6f8 <__lshift>
 800a960:	9018      	str	r0, [sp, #96]	; 0x60
 800a962:	2800      	cmp	r0, #0
 800a964:	f47f af6b 	bne.w	800a83e <_strtod_l+0x766>
 800a968:	e5fe      	b.n	800a568 <_strtod_l+0x490>
 800a96a:	465f      	mov	r7, fp
 800a96c:	d16e      	bne.n	800aa4c <_strtod_l+0x974>
 800a96e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800a970:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a974:	b342      	cbz	r2, 800a9c8 <_strtod_l+0x8f0>
 800a976:	4a32      	ldr	r2, [pc, #200]	; (800aa40 <_strtod_l+0x968>)
 800a978:	4293      	cmp	r3, r2
 800a97a:	d128      	bne.n	800a9ce <_strtod_l+0x8f6>
 800a97c:	9b04      	ldr	r3, [sp, #16]
 800a97e:	4651      	mov	r1, sl
 800a980:	b1eb      	cbz	r3, 800a9be <_strtod_l+0x8e6>
 800a982:	4b2d      	ldr	r3, [pc, #180]	; (800aa38 <_strtod_l+0x960>)
 800a984:	403b      	ands	r3, r7
 800a986:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800a98a:	f04f 32ff 	mov.w	r2, #4294967295
 800a98e:	d819      	bhi.n	800a9c4 <_strtod_l+0x8ec>
 800a990:	0d1b      	lsrs	r3, r3, #20
 800a992:	f1c3 036b 	rsb	r3, r3, #107	; 0x6b
 800a996:	fa02 f303 	lsl.w	r3, r2, r3
 800a99a:	4299      	cmp	r1, r3
 800a99c:	d117      	bne.n	800a9ce <_strtod_l+0x8f6>
 800a99e:	4b29      	ldr	r3, [pc, #164]	; (800aa44 <_strtod_l+0x96c>)
 800a9a0:	429f      	cmp	r7, r3
 800a9a2:	d102      	bne.n	800a9aa <_strtod_l+0x8d2>
 800a9a4:	3101      	adds	r1, #1
 800a9a6:	f43f addf 	beq.w	800a568 <_strtod_l+0x490>
 800a9aa:	4b23      	ldr	r3, [pc, #140]	; (800aa38 <_strtod_l+0x960>)
 800a9ac:	403b      	ands	r3, r7
 800a9ae:	f503 1b80 	add.w	fp, r3, #1048576	; 0x100000
 800a9b2:	f04f 0a00 	mov.w	sl, #0
 800a9b6:	9b04      	ldr	r3, [sp, #16]
 800a9b8:	2b00      	cmp	r3, #0
 800a9ba:	d1a4      	bne.n	800a906 <_strtod_l+0x82e>
 800a9bc:	e5de      	b.n	800a57c <_strtod_l+0x4a4>
 800a9be:	f04f 33ff 	mov.w	r3, #4294967295
 800a9c2:	e7ea      	b.n	800a99a <_strtod_l+0x8c2>
 800a9c4:	4613      	mov	r3, r2
 800a9c6:	e7e8      	b.n	800a99a <_strtod_l+0x8c2>
 800a9c8:	ea53 030a 	orrs.w	r3, r3, sl
 800a9cc:	d08c      	beq.n	800a8e8 <_strtod_l+0x810>
 800a9ce:	9b08      	ldr	r3, [sp, #32]
 800a9d0:	b1db      	cbz	r3, 800aa0a <_strtod_l+0x932>
 800a9d2:	423b      	tst	r3, r7
 800a9d4:	d0ef      	beq.n	800a9b6 <_strtod_l+0x8de>
 800a9d6:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800a9d8:	9a04      	ldr	r2, [sp, #16]
 800a9da:	4650      	mov	r0, sl
 800a9dc:	4659      	mov	r1, fp
 800a9de:	b1c3      	cbz	r3, 800aa12 <_strtod_l+0x93a>
 800a9e0:	f7ff fb5e 	bl	800a0a0 <sulp>
 800a9e4:	4602      	mov	r2, r0
 800a9e6:	460b      	mov	r3, r1
 800a9e8:	ec51 0b18 	vmov	r0, r1, d8
 800a9ec:	f7f5 fc4e 	bl	800028c <__adddf3>
 800a9f0:	4682      	mov	sl, r0
 800a9f2:	468b      	mov	fp, r1
 800a9f4:	e7df      	b.n	800a9b6 <_strtod_l+0x8de>
 800a9f6:	4013      	ands	r3, r2
 800a9f8:	f5a3 1380 	sub.w	r3, r3, #1048576	; 0x100000
 800a9fc:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800aa00:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800aa04:	f04f 3aff 	mov.w	sl, #4294967295
 800aa08:	e7d5      	b.n	800a9b6 <_strtod_l+0x8de>
 800aa0a:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800aa0c:	ea13 0f0a 	tst.w	r3, sl
 800aa10:	e7e0      	b.n	800a9d4 <_strtod_l+0x8fc>
 800aa12:	f7ff fb45 	bl	800a0a0 <sulp>
 800aa16:	4602      	mov	r2, r0
 800aa18:	460b      	mov	r3, r1
 800aa1a:	ec51 0b18 	vmov	r0, r1, d8
 800aa1e:	f7f5 fc33 	bl	8000288 <__aeabi_dsub>
 800aa22:	2200      	movs	r2, #0
 800aa24:	2300      	movs	r3, #0
 800aa26:	4682      	mov	sl, r0
 800aa28:	468b      	mov	fp, r1
 800aa2a:	f7f6 f84d 	bl	8000ac8 <__aeabi_dcmpeq>
 800aa2e:	2800      	cmp	r0, #0
 800aa30:	d0c1      	beq.n	800a9b6 <_strtod_l+0x8de>
 800aa32:	e611      	b.n	800a658 <_strtod_l+0x580>
 800aa34:	fffffc02 	.word	0xfffffc02
 800aa38:	7ff00000 	.word	0x7ff00000
 800aa3c:	39500000 	.word	0x39500000
 800aa40:	000fffff 	.word	0x000fffff
 800aa44:	7fefffff 	.word	0x7fefffff
 800aa48:	0800dfe0 	.word	0x0800dfe0
 800aa4c:	4631      	mov	r1, r6
 800aa4e:	4628      	mov	r0, r5
 800aa50:	f002 f840 	bl	800cad4 <__ratio>
 800aa54:	ec59 8b10 	vmov	r8, r9, d0
 800aa58:	ee10 0a10 	vmov	r0, s0
 800aa5c:	2200      	movs	r2, #0
 800aa5e:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 800aa62:	4649      	mov	r1, r9
 800aa64:	f7f6 f844 	bl	8000af0 <__aeabi_dcmple>
 800aa68:	2800      	cmp	r0, #0
 800aa6a:	d07a      	beq.n	800ab62 <_strtod_l+0xa8a>
 800aa6c:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d04a      	beq.n	800ab08 <_strtod_l+0xa30>
 800aa72:	4b95      	ldr	r3, [pc, #596]	; (800acc8 <_strtod_l+0xbf0>)
 800aa74:	2200      	movs	r2, #0
 800aa76:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800aa7a:	f8df 924c 	ldr.w	r9, [pc, #588]	; 800acc8 <_strtod_l+0xbf0>
 800aa7e:	f04f 0800 	mov.w	r8, #0
 800aa82:	4b92      	ldr	r3, [pc, #584]	; (800accc <_strtod_l+0xbf4>)
 800aa84:	403b      	ands	r3, r7
 800aa86:	930d      	str	r3, [sp, #52]	; 0x34
 800aa88:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800aa8a:	4b91      	ldr	r3, [pc, #580]	; (800acd0 <_strtod_l+0xbf8>)
 800aa8c:	429a      	cmp	r2, r3
 800aa8e:	f040 80b0 	bne.w	800abf2 <_strtod_l+0xb1a>
 800aa92:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aa96:	f1a7 7b54 	sub.w	fp, r7, #55574528	; 0x3500000
 800aa9a:	ec4b ab10 	vmov	d0, sl, fp
 800aa9e:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800aaa2:	f001 ff3f 	bl	800c924 <__ulp>
 800aaa6:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800aaaa:	ec53 2b10 	vmov	r2, r3, d0
 800aaae:	f7f5 fda3 	bl	80005f8 <__aeabi_dmul>
 800aab2:	4652      	mov	r2, sl
 800aab4:	465b      	mov	r3, fp
 800aab6:	f7f5 fbe9 	bl	800028c <__adddf3>
 800aaba:	460b      	mov	r3, r1
 800aabc:	4983      	ldr	r1, [pc, #524]	; (800accc <_strtod_l+0xbf4>)
 800aabe:	4a85      	ldr	r2, [pc, #532]	; (800acd4 <_strtod_l+0xbfc>)
 800aac0:	4019      	ands	r1, r3
 800aac2:	4291      	cmp	r1, r2
 800aac4:	4682      	mov	sl, r0
 800aac6:	d960      	bls.n	800ab8a <_strtod_l+0xab2>
 800aac8:	ee18 3a90 	vmov	r3, s17
 800aacc:	f102 7254 	add.w	r2, r2, #55574528	; 0x3500000
 800aad0:	4293      	cmp	r3, r2
 800aad2:	d104      	bne.n	800aade <_strtod_l+0xa06>
 800aad4:	ee18 3a10 	vmov	r3, s16
 800aad8:	3301      	adds	r3, #1
 800aada:	f43f ad45 	beq.w	800a568 <_strtod_l+0x490>
 800aade:	f8df b200 	ldr.w	fp, [pc, #512]	; 800ace0 <_strtod_l+0xc08>
 800aae2:	f04f 3aff 	mov.w	sl, #4294967295
 800aae6:	9918      	ldr	r1, [sp, #96]	; 0x60
 800aae8:	4620      	mov	r0, r4
 800aaea:	f001 fbe9 	bl	800c2c0 <_Bfree>
 800aaee:	9905      	ldr	r1, [sp, #20]
 800aaf0:	4620      	mov	r0, r4
 800aaf2:	f001 fbe5 	bl	800c2c0 <_Bfree>
 800aaf6:	4631      	mov	r1, r6
 800aaf8:	4620      	mov	r0, r4
 800aafa:	f001 fbe1 	bl	800c2c0 <_Bfree>
 800aafe:	4629      	mov	r1, r5
 800ab00:	4620      	mov	r0, r4
 800ab02:	f001 fbdd 	bl	800c2c0 <_Bfree>
 800ab06:	e61a      	b.n	800a73e <_strtod_l+0x666>
 800ab08:	f1ba 0f00 	cmp.w	sl, #0
 800ab0c:	d11b      	bne.n	800ab46 <_strtod_l+0xa6e>
 800ab0e:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800ab12:	b9f3      	cbnz	r3, 800ab52 <_strtod_l+0xa7a>
 800ab14:	4b6c      	ldr	r3, [pc, #432]	; (800acc8 <_strtod_l+0xbf0>)
 800ab16:	2200      	movs	r2, #0
 800ab18:	4640      	mov	r0, r8
 800ab1a:	4649      	mov	r1, r9
 800ab1c:	f7f5 ffde 	bl	8000adc <__aeabi_dcmplt>
 800ab20:	b9d0      	cbnz	r0, 800ab58 <_strtod_l+0xa80>
 800ab22:	4640      	mov	r0, r8
 800ab24:	4649      	mov	r1, r9
 800ab26:	4b6c      	ldr	r3, [pc, #432]	; (800acd8 <_strtod_l+0xc00>)
 800ab28:	2200      	movs	r2, #0
 800ab2a:	f7f5 fd65 	bl	80005f8 <__aeabi_dmul>
 800ab2e:	4680      	mov	r8, r0
 800ab30:	4689      	mov	r9, r1
 800ab32:	f109 4300 	add.w	r3, r9, #2147483648	; 0x80000000
 800ab36:	f8cd 8050 	str.w	r8, [sp, #80]	; 0x50
 800ab3a:	9315      	str	r3, [sp, #84]	; 0x54
 800ab3c:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	; 0x50
 800ab40:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ab44:	e79d      	b.n	800aa82 <_strtod_l+0x9aa>
 800ab46:	f1ba 0f01 	cmp.w	sl, #1
 800ab4a:	d102      	bne.n	800ab52 <_strtod_l+0xa7a>
 800ab4c:	2f00      	cmp	r7, #0
 800ab4e:	f43f ad83 	beq.w	800a658 <_strtod_l+0x580>
 800ab52:	4b62      	ldr	r3, [pc, #392]	; (800acdc <_strtod_l+0xc04>)
 800ab54:	2200      	movs	r2, #0
 800ab56:	e78e      	b.n	800aa76 <_strtod_l+0x99e>
 800ab58:	f8df 917c 	ldr.w	r9, [pc, #380]	; 800acd8 <_strtod_l+0xc00>
 800ab5c:	f04f 0800 	mov.w	r8, #0
 800ab60:	e7e7      	b.n	800ab32 <_strtod_l+0xa5a>
 800ab62:	4b5d      	ldr	r3, [pc, #372]	; (800acd8 <_strtod_l+0xc00>)
 800ab64:	4640      	mov	r0, r8
 800ab66:	4649      	mov	r1, r9
 800ab68:	2200      	movs	r2, #0
 800ab6a:	f7f5 fd45 	bl	80005f8 <__aeabi_dmul>
 800ab6e:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ab70:	4680      	mov	r8, r0
 800ab72:	4689      	mov	r9, r1
 800ab74:	b933      	cbnz	r3, 800ab84 <_strtod_l+0xaac>
 800ab76:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ab7a:	900e      	str	r0, [sp, #56]	; 0x38
 800ab7c:	930f      	str	r3, [sp, #60]	; 0x3c
 800ab7e:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	; 0x38
 800ab82:	e7dd      	b.n	800ab40 <_strtod_l+0xa68>
 800ab84:	e9cd 890e 	strd	r8, r9, [sp, #56]	; 0x38
 800ab88:	e7f9      	b.n	800ab7e <_strtod_l+0xaa6>
 800ab8a:	f103 7b54 	add.w	fp, r3, #55574528	; 0x3500000
 800ab8e:	9b04      	ldr	r3, [sp, #16]
 800ab90:	2b00      	cmp	r3, #0
 800ab92:	d1a8      	bne.n	800aae6 <_strtod_l+0xa0e>
 800ab94:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800ab98:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ab9a:	0d1b      	lsrs	r3, r3, #20
 800ab9c:	051b      	lsls	r3, r3, #20
 800ab9e:	429a      	cmp	r2, r3
 800aba0:	d1a1      	bne.n	800aae6 <_strtod_l+0xa0e>
 800aba2:	4640      	mov	r0, r8
 800aba4:	4649      	mov	r1, r9
 800aba6:	f7f6 f887 	bl	8000cb8 <__aeabi_d2lz>
 800abaa:	f7f5 fcf7 	bl	800059c <__aeabi_l2d>
 800abae:	4602      	mov	r2, r0
 800abb0:	460b      	mov	r3, r1
 800abb2:	4640      	mov	r0, r8
 800abb4:	4649      	mov	r1, r9
 800abb6:	f7f5 fb67 	bl	8000288 <__aeabi_dsub>
 800abba:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800abbc:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800abc0:	ea43 030a 	orr.w	r3, r3, sl
 800abc4:	4313      	orrs	r3, r2
 800abc6:	4680      	mov	r8, r0
 800abc8:	4689      	mov	r9, r1
 800abca:	d055      	beq.n	800ac78 <_strtod_l+0xba0>
 800abcc:	a336      	add	r3, pc, #216	; (adr r3, 800aca8 <_strtod_l+0xbd0>)
 800abce:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abd2:	f7f5 ff83 	bl	8000adc <__aeabi_dcmplt>
 800abd6:	2800      	cmp	r0, #0
 800abd8:	f47f acd0 	bne.w	800a57c <_strtod_l+0x4a4>
 800abdc:	a334      	add	r3, pc, #208	; (adr r3, 800acb0 <_strtod_l+0xbd8>)
 800abde:	e9d3 2300 	ldrd	r2, r3, [r3]
 800abe2:	4640      	mov	r0, r8
 800abe4:	4649      	mov	r1, r9
 800abe6:	f7f5 ff97 	bl	8000b18 <__aeabi_dcmpgt>
 800abea:	2800      	cmp	r0, #0
 800abec:	f43f af7b 	beq.w	800aae6 <_strtod_l+0xa0e>
 800abf0:	e4c4      	b.n	800a57c <_strtod_l+0x4a4>
 800abf2:	9b04      	ldr	r3, [sp, #16]
 800abf4:	b333      	cbz	r3, 800ac44 <_strtod_l+0xb6c>
 800abf6:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800abf8:	f1b3 6fd4 	cmp.w	r3, #111149056	; 0x6a00000
 800abfc:	d822      	bhi.n	800ac44 <_strtod_l+0xb6c>
 800abfe:	a32e      	add	r3, pc, #184	; (adr r3, 800acb8 <_strtod_l+0xbe0>)
 800ac00:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac04:	4640      	mov	r0, r8
 800ac06:	4649      	mov	r1, r9
 800ac08:	f7f5 ff72 	bl	8000af0 <__aeabi_dcmple>
 800ac0c:	b1a0      	cbz	r0, 800ac38 <_strtod_l+0xb60>
 800ac0e:	4649      	mov	r1, r9
 800ac10:	4640      	mov	r0, r8
 800ac12:	f7f5 ffc9 	bl	8000ba8 <__aeabi_d2uiz>
 800ac16:	2801      	cmp	r0, #1
 800ac18:	bf38      	it	cc
 800ac1a:	2001      	movcc	r0, #1
 800ac1c:	f7f5 fc72 	bl	8000504 <__aeabi_ui2d>
 800ac20:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800ac22:	4680      	mov	r8, r0
 800ac24:	4689      	mov	r9, r1
 800ac26:	bb23      	cbnz	r3, 800ac72 <_strtod_l+0xb9a>
 800ac28:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800ac2c:	9010      	str	r0, [sp, #64]	; 0x40
 800ac2e:	9311      	str	r3, [sp, #68]	; 0x44
 800ac30:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 800ac34:	e9cd 2308 	strd	r2, r3, [sp, #32]
 800ac38:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800ac3a:	9a0d      	ldr	r2, [sp, #52]	; 0x34
 800ac3c:	f103 63d6 	add.w	r3, r3, #112197632	; 0x6b00000
 800ac40:	1a9b      	subs	r3, r3, r2
 800ac42:	9309      	str	r3, [sp, #36]	; 0x24
 800ac44:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac48:	eeb0 0a48 	vmov.f32	s0, s16
 800ac4c:	eef0 0a68 	vmov.f32	s1, s17
 800ac50:	e9cd 0108 	strd	r0, r1, [sp, #32]
 800ac54:	f001 fe66 	bl	800c924 <__ulp>
 800ac58:	e9dd 0108 	ldrd	r0, r1, [sp, #32]
 800ac5c:	ec53 2b10 	vmov	r2, r3, d0
 800ac60:	f7f5 fcca 	bl	80005f8 <__aeabi_dmul>
 800ac64:	ec53 2b18 	vmov	r2, r3, d8
 800ac68:	f7f5 fb10 	bl	800028c <__adddf3>
 800ac6c:	4682      	mov	sl, r0
 800ac6e:	468b      	mov	fp, r1
 800ac70:	e78d      	b.n	800ab8e <_strtod_l+0xab6>
 800ac72:	e9cd 8910 	strd	r8, r9, [sp, #64]	; 0x40
 800ac76:	e7db      	b.n	800ac30 <_strtod_l+0xb58>
 800ac78:	a311      	add	r3, pc, #68	; (adr r3, 800acc0 <_strtod_l+0xbe8>)
 800ac7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800ac7e:	f7f5 ff2d 	bl	8000adc <__aeabi_dcmplt>
 800ac82:	e7b2      	b.n	800abea <_strtod_l+0xb12>
 800ac84:	2300      	movs	r3, #0
 800ac86:	930a      	str	r3, [sp, #40]	; 0x28
 800ac88:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800ac8a:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 800ac8c:	6013      	str	r3, [r2, #0]
 800ac8e:	f7ff ba6b 	b.w	800a168 <_strtod_l+0x90>
 800ac92:	2a65      	cmp	r2, #101	; 0x65
 800ac94:	f43f ab5f 	beq.w	800a356 <_strtod_l+0x27e>
 800ac98:	2a45      	cmp	r2, #69	; 0x45
 800ac9a:	f43f ab5c 	beq.w	800a356 <_strtod_l+0x27e>
 800ac9e:	2301      	movs	r3, #1
 800aca0:	f7ff bb94 	b.w	800a3cc <_strtod_l+0x2f4>
 800aca4:	f3af 8000 	nop.w
 800aca8:	94a03595 	.word	0x94a03595
 800acac:	3fdfffff 	.word	0x3fdfffff
 800acb0:	35afe535 	.word	0x35afe535
 800acb4:	3fe00000 	.word	0x3fe00000
 800acb8:	ffc00000 	.word	0xffc00000
 800acbc:	41dfffff 	.word	0x41dfffff
 800acc0:	94a03595 	.word	0x94a03595
 800acc4:	3fcfffff 	.word	0x3fcfffff
 800acc8:	3ff00000 	.word	0x3ff00000
 800accc:	7ff00000 	.word	0x7ff00000
 800acd0:	7fe00000 	.word	0x7fe00000
 800acd4:	7c9fffff 	.word	0x7c9fffff
 800acd8:	3fe00000 	.word	0x3fe00000
 800acdc:	bff00000 	.word	0xbff00000
 800ace0:	7fefffff 	.word	0x7fefffff

0800ace4 <strtod>:
 800ace4:	460a      	mov	r2, r1
 800ace6:	4601      	mov	r1, r0
 800ace8:	4802      	ldr	r0, [pc, #8]	; (800acf4 <strtod+0x10>)
 800acea:	4b03      	ldr	r3, [pc, #12]	; (800acf8 <strtod+0x14>)
 800acec:	6800      	ldr	r0, [r0, #0]
 800acee:	f7ff b9f3 	b.w	800a0d8 <_strtod_l>
 800acf2:	bf00      	nop
 800acf4:	2000001c 	.word	0x2000001c
 800acf8:	20000084 	.word	0x20000084

0800acfc <strtok>:
 800acfc:	4b16      	ldr	r3, [pc, #88]	; (800ad58 <strtok+0x5c>)
 800acfe:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800ad00:	681e      	ldr	r6, [r3, #0]
 800ad02:	6db4      	ldr	r4, [r6, #88]	; 0x58
 800ad04:	4605      	mov	r5, r0
 800ad06:	b9fc      	cbnz	r4, 800ad48 <strtok+0x4c>
 800ad08:	2050      	movs	r0, #80	; 0x50
 800ad0a:	9101      	str	r1, [sp, #4]
 800ad0c:	f001 fa70 	bl	800c1f0 <malloc>
 800ad10:	9901      	ldr	r1, [sp, #4]
 800ad12:	65b0      	str	r0, [r6, #88]	; 0x58
 800ad14:	4602      	mov	r2, r0
 800ad16:	b920      	cbnz	r0, 800ad22 <strtok+0x26>
 800ad18:	4b10      	ldr	r3, [pc, #64]	; (800ad5c <strtok+0x60>)
 800ad1a:	4811      	ldr	r0, [pc, #68]	; (800ad60 <strtok+0x64>)
 800ad1c:	2157      	movs	r1, #87	; 0x57
 800ad1e:	f000 f849 	bl	800adb4 <__assert_func>
 800ad22:	e9c0 4400 	strd	r4, r4, [r0]
 800ad26:	e9c0 4402 	strd	r4, r4, [r0, #8]
 800ad2a:	e9c0 4404 	strd	r4, r4, [r0, #16]
 800ad2e:	e9c0 440a 	strd	r4, r4, [r0, #40]	; 0x28
 800ad32:	e9c0 440c 	strd	r4, r4, [r0, #48]	; 0x30
 800ad36:	e9c0 440e 	strd	r4, r4, [r0, #56]	; 0x38
 800ad3a:	e9c0 4410 	strd	r4, r4, [r0, #64]	; 0x40
 800ad3e:	e9c0 4412 	strd	r4, r4, [r0, #72]	; 0x48
 800ad42:	6184      	str	r4, [r0, #24]
 800ad44:	7704      	strb	r4, [r0, #28]
 800ad46:	6244      	str	r4, [r0, #36]	; 0x24
 800ad48:	6db2      	ldr	r2, [r6, #88]	; 0x58
 800ad4a:	2301      	movs	r3, #1
 800ad4c:	4628      	mov	r0, r5
 800ad4e:	b002      	add	sp, #8
 800ad50:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 800ad54:	f000 b806 	b.w	800ad64 <__strtok_r>
 800ad58:	2000001c 	.word	0x2000001c
 800ad5c:	0800e008 	.word	0x0800e008
 800ad60:	0800e01f 	.word	0x0800e01f

0800ad64 <__strtok_r>:
 800ad64:	b5f0      	push	{r4, r5, r6, r7, lr}
 800ad66:	b908      	cbnz	r0, 800ad6c <__strtok_r+0x8>
 800ad68:	6810      	ldr	r0, [r2, #0]
 800ad6a:	b188      	cbz	r0, 800ad90 <__strtok_r+0x2c>
 800ad6c:	4604      	mov	r4, r0
 800ad6e:	4620      	mov	r0, r4
 800ad70:	f814 5b01 	ldrb.w	r5, [r4], #1
 800ad74:	460f      	mov	r7, r1
 800ad76:	f817 6b01 	ldrb.w	r6, [r7], #1
 800ad7a:	b91e      	cbnz	r6, 800ad84 <__strtok_r+0x20>
 800ad7c:	b965      	cbnz	r5, 800ad98 <__strtok_r+0x34>
 800ad7e:	6015      	str	r5, [r2, #0]
 800ad80:	4628      	mov	r0, r5
 800ad82:	e005      	b.n	800ad90 <__strtok_r+0x2c>
 800ad84:	42b5      	cmp	r5, r6
 800ad86:	d1f6      	bne.n	800ad76 <__strtok_r+0x12>
 800ad88:	2b00      	cmp	r3, #0
 800ad8a:	d1f0      	bne.n	800ad6e <__strtok_r+0xa>
 800ad8c:	6014      	str	r4, [r2, #0]
 800ad8e:	7003      	strb	r3, [r0, #0]
 800ad90:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ad92:	461c      	mov	r4, r3
 800ad94:	e00c      	b.n	800adb0 <__strtok_r+0x4c>
 800ad96:	b915      	cbnz	r5, 800ad9e <__strtok_r+0x3a>
 800ad98:	f814 3b01 	ldrb.w	r3, [r4], #1
 800ad9c:	460e      	mov	r6, r1
 800ad9e:	f816 5b01 	ldrb.w	r5, [r6], #1
 800ada2:	42ab      	cmp	r3, r5
 800ada4:	d1f7      	bne.n	800ad96 <__strtok_r+0x32>
 800ada6:	2b00      	cmp	r3, #0
 800ada8:	d0f3      	beq.n	800ad92 <__strtok_r+0x2e>
 800adaa:	2300      	movs	r3, #0
 800adac:	f804 3c01 	strb.w	r3, [r4, #-1]
 800adb0:	6014      	str	r4, [r2, #0]
 800adb2:	e7ed      	b.n	800ad90 <__strtok_r+0x2c>

0800adb4 <__assert_func>:
 800adb4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800adb6:	4614      	mov	r4, r2
 800adb8:	461a      	mov	r2, r3
 800adba:	4b09      	ldr	r3, [pc, #36]	; (800ade0 <__assert_func+0x2c>)
 800adbc:	681b      	ldr	r3, [r3, #0]
 800adbe:	4605      	mov	r5, r0
 800adc0:	68d8      	ldr	r0, [r3, #12]
 800adc2:	b14c      	cbz	r4, 800add8 <__assert_func+0x24>
 800adc4:	4b07      	ldr	r3, [pc, #28]	; (800ade4 <__assert_func+0x30>)
 800adc6:	9100      	str	r1, [sp, #0]
 800adc8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800adcc:	4906      	ldr	r1, [pc, #24]	; (800ade8 <__assert_func+0x34>)
 800adce:	462b      	mov	r3, r5
 800add0:	f000 fe88 	bl	800bae4 <fiprintf>
 800add4:	f002 fb9e 	bl	800d514 <abort>
 800add8:	4b04      	ldr	r3, [pc, #16]	; (800adec <__assert_func+0x38>)
 800adda:	461c      	mov	r4, r3
 800addc:	e7f3      	b.n	800adc6 <__assert_func+0x12>
 800adde:	bf00      	nop
 800ade0:	2000001c 	.word	0x2000001c
 800ade4:	0800e07c 	.word	0x0800e07c
 800ade8:	0800e089 	.word	0x0800e089
 800adec:	0800e0b7 	.word	0x0800e0b7

0800adf0 <quorem>:
 800adf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800adf4:	6903      	ldr	r3, [r0, #16]
 800adf6:	690c      	ldr	r4, [r1, #16]
 800adf8:	42a3      	cmp	r3, r4
 800adfa:	4607      	mov	r7, r0
 800adfc:	f2c0 8081 	blt.w	800af02 <quorem+0x112>
 800ae00:	3c01      	subs	r4, #1
 800ae02:	f101 0814 	add.w	r8, r1, #20
 800ae06:	f100 0514 	add.w	r5, r0, #20
 800ae0a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800ae0e:	9301      	str	r3, [sp, #4]
 800ae10:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800ae14:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800ae18:	3301      	adds	r3, #1
 800ae1a:	429a      	cmp	r2, r3
 800ae1c:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800ae20:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 800ae24:	fbb2 f6f3 	udiv	r6, r2, r3
 800ae28:	d331      	bcc.n	800ae8e <quorem+0x9e>
 800ae2a:	f04f 0e00 	mov.w	lr, #0
 800ae2e:	4640      	mov	r0, r8
 800ae30:	46ac      	mov	ip, r5
 800ae32:	46f2      	mov	sl, lr
 800ae34:	f850 2b04 	ldr.w	r2, [r0], #4
 800ae38:	b293      	uxth	r3, r2
 800ae3a:	fb06 e303 	mla	r3, r6, r3, lr
 800ae3e:	ea4f 4e13 	mov.w	lr, r3, lsr #16
 800ae42:	b29b      	uxth	r3, r3
 800ae44:	ebaa 0303 	sub.w	r3, sl, r3
 800ae48:	f8dc a000 	ldr.w	sl, [ip]
 800ae4c:	0c12      	lsrs	r2, r2, #16
 800ae4e:	fa13 f38a 	uxtah	r3, r3, sl
 800ae52:	fb06 e202 	mla	r2, r6, r2, lr
 800ae56:	9300      	str	r3, [sp, #0]
 800ae58:	9b00      	ldr	r3, [sp, #0]
 800ae5a:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800ae5e:	b292      	uxth	r2, r2
 800ae60:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 800ae64:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800ae68:	f8bd 3000 	ldrh.w	r3, [sp]
 800ae6c:	4581      	cmp	r9, r0
 800ae6e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800ae72:	f84c 3b04 	str.w	r3, [ip], #4
 800ae76:	ea4f 4a22 	mov.w	sl, r2, asr #16
 800ae7a:	d2db      	bcs.n	800ae34 <quorem+0x44>
 800ae7c:	f855 300b 	ldr.w	r3, [r5, fp]
 800ae80:	b92b      	cbnz	r3, 800ae8e <quorem+0x9e>
 800ae82:	9b01      	ldr	r3, [sp, #4]
 800ae84:	3b04      	subs	r3, #4
 800ae86:	429d      	cmp	r5, r3
 800ae88:	461a      	mov	r2, r3
 800ae8a:	d32e      	bcc.n	800aeea <quorem+0xfa>
 800ae8c:	613c      	str	r4, [r7, #16]
 800ae8e:	4638      	mov	r0, r7
 800ae90:	f001 fca2 	bl	800c7d8 <__mcmp>
 800ae94:	2800      	cmp	r0, #0
 800ae96:	db24      	blt.n	800aee2 <quorem+0xf2>
 800ae98:	3601      	adds	r6, #1
 800ae9a:	4628      	mov	r0, r5
 800ae9c:	f04f 0c00 	mov.w	ip, #0
 800aea0:	f858 2b04 	ldr.w	r2, [r8], #4
 800aea4:	f8d0 e000 	ldr.w	lr, [r0]
 800aea8:	b293      	uxth	r3, r2
 800aeaa:	ebac 0303 	sub.w	r3, ip, r3
 800aeae:	0c12      	lsrs	r2, r2, #16
 800aeb0:	fa13 f38e 	uxtah	r3, r3, lr
 800aeb4:	ebc2 421e 	rsb	r2, r2, lr, lsr #16
 800aeb8:	eb02 4223 	add.w	r2, r2, r3, asr #16
 800aebc:	b29b      	uxth	r3, r3
 800aebe:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800aec2:	45c1      	cmp	r9, r8
 800aec4:	f840 3b04 	str.w	r3, [r0], #4
 800aec8:	ea4f 4c22 	mov.w	ip, r2, asr #16
 800aecc:	d2e8      	bcs.n	800aea0 <quorem+0xb0>
 800aece:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800aed2:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800aed6:	b922      	cbnz	r2, 800aee2 <quorem+0xf2>
 800aed8:	3b04      	subs	r3, #4
 800aeda:	429d      	cmp	r5, r3
 800aedc:	461a      	mov	r2, r3
 800aede:	d30a      	bcc.n	800aef6 <quorem+0x106>
 800aee0:	613c      	str	r4, [r7, #16]
 800aee2:	4630      	mov	r0, r6
 800aee4:	b003      	add	sp, #12
 800aee6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800aeea:	6812      	ldr	r2, [r2, #0]
 800aeec:	3b04      	subs	r3, #4
 800aeee:	2a00      	cmp	r2, #0
 800aef0:	d1cc      	bne.n	800ae8c <quorem+0x9c>
 800aef2:	3c01      	subs	r4, #1
 800aef4:	e7c7      	b.n	800ae86 <quorem+0x96>
 800aef6:	6812      	ldr	r2, [r2, #0]
 800aef8:	3b04      	subs	r3, #4
 800aefa:	2a00      	cmp	r2, #0
 800aefc:	d1f0      	bne.n	800aee0 <quorem+0xf0>
 800aefe:	3c01      	subs	r4, #1
 800af00:	e7eb      	b.n	800aeda <quorem+0xea>
 800af02:	2000      	movs	r0, #0
 800af04:	e7ee      	b.n	800aee4 <quorem+0xf4>
	...

0800af08 <_dtoa_r>:
 800af08:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800af0c:	ed2d 8b04 	vpush	{d8-d9}
 800af10:	ec57 6b10 	vmov	r6, r7, d0
 800af14:	b093      	sub	sp, #76	; 0x4c
 800af16:	6a45      	ldr	r5, [r0, #36]	; 0x24
 800af18:	f8dd 8080 	ldr.w	r8, [sp, #128]	; 0x80
 800af1c:	9106      	str	r1, [sp, #24]
 800af1e:	ee10 aa10 	vmov	sl, s0
 800af22:	4604      	mov	r4, r0
 800af24:	9209      	str	r2, [sp, #36]	; 0x24
 800af26:	930c      	str	r3, [sp, #48]	; 0x30
 800af28:	46bb      	mov	fp, r7
 800af2a:	b975      	cbnz	r5, 800af4a <_dtoa_r+0x42>
 800af2c:	2010      	movs	r0, #16
 800af2e:	f001 f95f 	bl	800c1f0 <malloc>
 800af32:	4602      	mov	r2, r0
 800af34:	6260      	str	r0, [r4, #36]	; 0x24
 800af36:	b920      	cbnz	r0, 800af42 <_dtoa_r+0x3a>
 800af38:	4ba7      	ldr	r3, [pc, #668]	; (800b1d8 <_dtoa_r+0x2d0>)
 800af3a:	21ea      	movs	r1, #234	; 0xea
 800af3c:	48a7      	ldr	r0, [pc, #668]	; (800b1dc <_dtoa_r+0x2d4>)
 800af3e:	f7ff ff39 	bl	800adb4 <__assert_func>
 800af42:	e9c0 5501 	strd	r5, r5, [r0, #4]
 800af46:	6005      	str	r5, [r0, #0]
 800af48:	60c5      	str	r5, [r0, #12]
 800af4a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af4c:	6819      	ldr	r1, [r3, #0]
 800af4e:	b151      	cbz	r1, 800af66 <_dtoa_r+0x5e>
 800af50:	685a      	ldr	r2, [r3, #4]
 800af52:	604a      	str	r2, [r1, #4]
 800af54:	2301      	movs	r3, #1
 800af56:	4093      	lsls	r3, r2
 800af58:	608b      	str	r3, [r1, #8]
 800af5a:	4620      	mov	r0, r4
 800af5c:	f001 f9b0 	bl	800c2c0 <_Bfree>
 800af60:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800af62:	2200      	movs	r2, #0
 800af64:	601a      	str	r2, [r3, #0]
 800af66:	1e3b      	subs	r3, r7, #0
 800af68:	bfaa      	itet	ge
 800af6a:	2300      	movge	r3, #0
 800af6c:	f023 4b00 	biclt.w	fp, r3, #2147483648	; 0x80000000
 800af70:	f8c8 3000 	strge.w	r3, [r8]
 800af74:	4b9a      	ldr	r3, [pc, #616]	; (800b1e0 <_dtoa_r+0x2d8>)
 800af76:	bfbc      	itt	lt
 800af78:	2201      	movlt	r2, #1
 800af7a:	f8c8 2000 	strlt.w	r2, [r8]
 800af7e:	ea33 030b 	bics.w	r3, r3, fp
 800af82:	d11b      	bne.n	800afbc <_dtoa_r+0xb4>
 800af84:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800af86:	f242 730f 	movw	r3, #9999	; 0x270f
 800af8a:	6013      	str	r3, [r2, #0]
 800af8c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800af90:	4333      	orrs	r3, r6
 800af92:	f000 8592 	beq.w	800baba <_dtoa_r+0xbb2>
 800af96:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800af98:	b963      	cbnz	r3, 800afb4 <_dtoa_r+0xac>
 800af9a:	4b92      	ldr	r3, [pc, #584]	; (800b1e4 <_dtoa_r+0x2dc>)
 800af9c:	e022      	b.n	800afe4 <_dtoa_r+0xdc>
 800af9e:	4b92      	ldr	r3, [pc, #584]	; (800b1e8 <_dtoa_r+0x2e0>)
 800afa0:	9301      	str	r3, [sp, #4]
 800afa2:	3308      	adds	r3, #8
 800afa4:	9a21      	ldr	r2, [sp, #132]	; 0x84
 800afa6:	6013      	str	r3, [r2, #0]
 800afa8:	9801      	ldr	r0, [sp, #4]
 800afaa:	b013      	add	sp, #76	; 0x4c
 800afac:	ecbd 8b04 	vpop	{d8-d9}
 800afb0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800afb4:	4b8b      	ldr	r3, [pc, #556]	; (800b1e4 <_dtoa_r+0x2dc>)
 800afb6:	9301      	str	r3, [sp, #4]
 800afb8:	3303      	adds	r3, #3
 800afba:	e7f3      	b.n	800afa4 <_dtoa_r+0x9c>
 800afbc:	2200      	movs	r2, #0
 800afbe:	2300      	movs	r3, #0
 800afc0:	4650      	mov	r0, sl
 800afc2:	4659      	mov	r1, fp
 800afc4:	f7f5 fd80 	bl	8000ac8 <__aeabi_dcmpeq>
 800afc8:	ec4b ab19 	vmov	d9, sl, fp
 800afcc:	4680      	mov	r8, r0
 800afce:	b158      	cbz	r0, 800afe8 <_dtoa_r+0xe0>
 800afd0:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 800afd2:	2301      	movs	r3, #1
 800afd4:	6013      	str	r3, [r2, #0]
 800afd6:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800afd8:	2b00      	cmp	r3, #0
 800afda:	f000 856b 	beq.w	800bab4 <_dtoa_r+0xbac>
 800afde:	4883      	ldr	r0, [pc, #524]	; (800b1ec <_dtoa_r+0x2e4>)
 800afe0:	6018      	str	r0, [r3, #0]
 800afe2:	1e43      	subs	r3, r0, #1
 800afe4:	9301      	str	r3, [sp, #4]
 800afe6:	e7df      	b.n	800afa8 <_dtoa_r+0xa0>
 800afe8:	ec4b ab10 	vmov	d0, sl, fp
 800afec:	aa10      	add	r2, sp, #64	; 0x40
 800afee:	a911      	add	r1, sp, #68	; 0x44
 800aff0:	4620      	mov	r0, r4
 800aff2:	f001 fd13 	bl	800ca1c <__d2b>
 800aff6:	f3cb 550a 	ubfx	r5, fp, #20, #11
 800affa:	ee08 0a10 	vmov	s16, r0
 800affe:	2d00      	cmp	r5, #0
 800b000:	f000 8084 	beq.w	800b10c <_dtoa_r+0x204>
 800b004:	ee19 3a90 	vmov	r3, s19
 800b008:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800b00c:	f043 577f 	orr.w	r7, r3, #1069547520	; 0x3fc00000
 800b010:	4656      	mov	r6, sl
 800b012:	f447 1740 	orr.w	r7, r7, #3145728	; 0x300000
 800b016:	f2a5 35ff 	subw	r5, r5, #1023	; 0x3ff
 800b01a:	f8cd 8038 	str.w	r8, [sp, #56]	; 0x38
 800b01e:	4b74      	ldr	r3, [pc, #464]	; (800b1f0 <_dtoa_r+0x2e8>)
 800b020:	2200      	movs	r2, #0
 800b022:	4630      	mov	r0, r6
 800b024:	4639      	mov	r1, r7
 800b026:	f7f5 f92f 	bl	8000288 <__aeabi_dsub>
 800b02a:	a365      	add	r3, pc, #404	; (adr r3, 800b1c0 <_dtoa_r+0x2b8>)
 800b02c:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b030:	f7f5 fae2 	bl	80005f8 <__aeabi_dmul>
 800b034:	a364      	add	r3, pc, #400	; (adr r3, 800b1c8 <_dtoa_r+0x2c0>)
 800b036:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b03a:	f7f5 f927 	bl	800028c <__adddf3>
 800b03e:	4606      	mov	r6, r0
 800b040:	4628      	mov	r0, r5
 800b042:	460f      	mov	r7, r1
 800b044:	f7f5 fa6e 	bl	8000524 <__aeabi_i2d>
 800b048:	a361      	add	r3, pc, #388	; (adr r3, 800b1d0 <_dtoa_r+0x2c8>)
 800b04a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b04e:	f7f5 fad3 	bl	80005f8 <__aeabi_dmul>
 800b052:	4602      	mov	r2, r0
 800b054:	460b      	mov	r3, r1
 800b056:	4630      	mov	r0, r6
 800b058:	4639      	mov	r1, r7
 800b05a:	f7f5 f917 	bl	800028c <__adddf3>
 800b05e:	4606      	mov	r6, r0
 800b060:	460f      	mov	r7, r1
 800b062:	f7f5 fd79 	bl	8000b58 <__aeabi_d2iz>
 800b066:	2200      	movs	r2, #0
 800b068:	9000      	str	r0, [sp, #0]
 800b06a:	2300      	movs	r3, #0
 800b06c:	4630      	mov	r0, r6
 800b06e:	4639      	mov	r1, r7
 800b070:	f7f5 fd34 	bl	8000adc <__aeabi_dcmplt>
 800b074:	b150      	cbz	r0, 800b08c <_dtoa_r+0x184>
 800b076:	9800      	ldr	r0, [sp, #0]
 800b078:	f7f5 fa54 	bl	8000524 <__aeabi_i2d>
 800b07c:	4632      	mov	r2, r6
 800b07e:	463b      	mov	r3, r7
 800b080:	f7f5 fd22 	bl	8000ac8 <__aeabi_dcmpeq>
 800b084:	b910      	cbnz	r0, 800b08c <_dtoa_r+0x184>
 800b086:	9b00      	ldr	r3, [sp, #0]
 800b088:	3b01      	subs	r3, #1
 800b08a:	9300      	str	r3, [sp, #0]
 800b08c:	9b00      	ldr	r3, [sp, #0]
 800b08e:	2b16      	cmp	r3, #22
 800b090:	d85a      	bhi.n	800b148 <_dtoa_r+0x240>
 800b092:	9a00      	ldr	r2, [sp, #0]
 800b094:	4b57      	ldr	r3, [pc, #348]	; (800b1f4 <_dtoa_r+0x2ec>)
 800b096:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b09a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b09e:	ec51 0b19 	vmov	r0, r1, d9
 800b0a2:	f7f5 fd1b 	bl	8000adc <__aeabi_dcmplt>
 800b0a6:	2800      	cmp	r0, #0
 800b0a8:	d050      	beq.n	800b14c <_dtoa_r+0x244>
 800b0aa:	9b00      	ldr	r3, [sp, #0]
 800b0ac:	3b01      	subs	r3, #1
 800b0ae:	9300      	str	r3, [sp, #0]
 800b0b0:	2300      	movs	r3, #0
 800b0b2:	930b      	str	r3, [sp, #44]	; 0x2c
 800b0b4:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b0b6:	1b5d      	subs	r5, r3, r5
 800b0b8:	1e6b      	subs	r3, r5, #1
 800b0ba:	9305      	str	r3, [sp, #20]
 800b0bc:	bf45      	ittet	mi
 800b0be:	f1c5 0301 	rsbmi	r3, r5, #1
 800b0c2:	9304      	strmi	r3, [sp, #16]
 800b0c4:	2300      	movpl	r3, #0
 800b0c6:	2300      	movmi	r3, #0
 800b0c8:	bf4c      	ite	mi
 800b0ca:	9305      	strmi	r3, [sp, #20]
 800b0cc:	9304      	strpl	r3, [sp, #16]
 800b0ce:	9b00      	ldr	r3, [sp, #0]
 800b0d0:	2b00      	cmp	r3, #0
 800b0d2:	db3d      	blt.n	800b150 <_dtoa_r+0x248>
 800b0d4:	9b05      	ldr	r3, [sp, #20]
 800b0d6:	9a00      	ldr	r2, [sp, #0]
 800b0d8:	920a      	str	r2, [sp, #40]	; 0x28
 800b0da:	4413      	add	r3, r2
 800b0dc:	9305      	str	r3, [sp, #20]
 800b0de:	2300      	movs	r3, #0
 800b0e0:	9307      	str	r3, [sp, #28]
 800b0e2:	9b06      	ldr	r3, [sp, #24]
 800b0e4:	2b09      	cmp	r3, #9
 800b0e6:	f200 8089 	bhi.w	800b1fc <_dtoa_r+0x2f4>
 800b0ea:	2b05      	cmp	r3, #5
 800b0ec:	bfc4      	itt	gt
 800b0ee:	3b04      	subgt	r3, #4
 800b0f0:	9306      	strgt	r3, [sp, #24]
 800b0f2:	9b06      	ldr	r3, [sp, #24]
 800b0f4:	f1a3 0302 	sub.w	r3, r3, #2
 800b0f8:	bfcc      	ite	gt
 800b0fa:	2500      	movgt	r5, #0
 800b0fc:	2501      	movle	r5, #1
 800b0fe:	2b03      	cmp	r3, #3
 800b100:	f200 8087 	bhi.w	800b212 <_dtoa_r+0x30a>
 800b104:	e8df f003 	tbb	[pc, r3]
 800b108:	59383a2d 	.word	0x59383a2d
 800b10c:	e9dd 5310 	ldrd	r5, r3, [sp, #64]	; 0x40
 800b110:	441d      	add	r5, r3
 800b112:	f205 4332 	addw	r3, r5, #1074	; 0x432
 800b116:	2b20      	cmp	r3, #32
 800b118:	bfc1      	itttt	gt
 800b11a:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800b11e:	f205 4012 	addwgt	r0, r5, #1042	; 0x412
 800b122:	fa0b f303 	lslgt.w	r3, fp, r3
 800b126:	fa26 f000 	lsrgt.w	r0, r6, r0
 800b12a:	bfda      	itte	le
 800b12c:	f1c3 0320 	rsble	r3, r3, #32
 800b130:	fa06 f003 	lslle.w	r0, r6, r3
 800b134:	4318      	orrgt	r0, r3
 800b136:	f7f5 f9e5 	bl	8000504 <__aeabi_ui2d>
 800b13a:	2301      	movs	r3, #1
 800b13c:	4606      	mov	r6, r0
 800b13e:	f1a1 77f8 	sub.w	r7, r1, #32505856	; 0x1f00000
 800b142:	3d01      	subs	r5, #1
 800b144:	930e      	str	r3, [sp, #56]	; 0x38
 800b146:	e76a      	b.n	800b01e <_dtoa_r+0x116>
 800b148:	2301      	movs	r3, #1
 800b14a:	e7b2      	b.n	800b0b2 <_dtoa_r+0x1aa>
 800b14c:	900b      	str	r0, [sp, #44]	; 0x2c
 800b14e:	e7b1      	b.n	800b0b4 <_dtoa_r+0x1ac>
 800b150:	9b04      	ldr	r3, [sp, #16]
 800b152:	9a00      	ldr	r2, [sp, #0]
 800b154:	1a9b      	subs	r3, r3, r2
 800b156:	9304      	str	r3, [sp, #16]
 800b158:	4253      	negs	r3, r2
 800b15a:	9307      	str	r3, [sp, #28]
 800b15c:	2300      	movs	r3, #0
 800b15e:	930a      	str	r3, [sp, #40]	; 0x28
 800b160:	e7bf      	b.n	800b0e2 <_dtoa_r+0x1da>
 800b162:	2300      	movs	r3, #0
 800b164:	9308      	str	r3, [sp, #32]
 800b166:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b168:	2b00      	cmp	r3, #0
 800b16a:	dc55      	bgt.n	800b218 <_dtoa_r+0x310>
 800b16c:	2301      	movs	r3, #1
 800b16e:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b172:	461a      	mov	r2, r3
 800b174:	9209      	str	r2, [sp, #36]	; 0x24
 800b176:	e00c      	b.n	800b192 <_dtoa_r+0x28a>
 800b178:	2301      	movs	r3, #1
 800b17a:	e7f3      	b.n	800b164 <_dtoa_r+0x25c>
 800b17c:	2300      	movs	r3, #0
 800b17e:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800b180:	9308      	str	r3, [sp, #32]
 800b182:	9b00      	ldr	r3, [sp, #0]
 800b184:	4413      	add	r3, r2
 800b186:	9302      	str	r3, [sp, #8]
 800b188:	3301      	adds	r3, #1
 800b18a:	2b01      	cmp	r3, #1
 800b18c:	9303      	str	r3, [sp, #12]
 800b18e:	bfb8      	it	lt
 800b190:	2301      	movlt	r3, #1
 800b192:	6a60      	ldr	r0, [r4, #36]	; 0x24
 800b194:	2200      	movs	r2, #0
 800b196:	6042      	str	r2, [r0, #4]
 800b198:	2204      	movs	r2, #4
 800b19a:	f102 0614 	add.w	r6, r2, #20
 800b19e:	429e      	cmp	r6, r3
 800b1a0:	6841      	ldr	r1, [r0, #4]
 800b1a2:	d93d      	bls.n	800b220 <_dtoa_r+0x318>
 800b1a4:	4620      	mov	r0, r4
 800b1a6:	f001 f84b 	bl	800c240 <_Balloc>
 800b1aa:	9001      	str	r0, [sp, #4]
 800b1ac:	2800      	cmp	r0, #0
 800b1ae:	d13b      	bne.n	800b228 <_dtoa_r+0x320>
 800b1b0:	4b11      	ldr	r3, [pc, #68]	; (800b1f8 <_dtoa_r+0x2f0>)
 800b1b2:	4602      	mov	r2, r0
 800b1b4:	f44f 71d5 	mov.w	r1, #426	; 0x1aa
 800b1b8:	e6c0      	b.n	800af3c <_dtoa_r+0x34>
 800b1ba:	2301      	movs	r3, #1
 800b1bc:	e7df      	b.n	800b17e <_dtoa_r+0x276>
 800b1be:	bf00      	nop
 800b1c0:	636f4361 	.word	0x636f4361
 800b1c4:	3fd287a7 	.word	0x3fd287a7
 800b1c8:	8b60c8b3 	.word	0x8b60c8b3
 800b1cc:	3fc68a28 	.word	0x3fc68a28
 800b1d0:	509f79fb 	.word	0x509f79fb
 800b1d4:	3fd34413 	.word	0x3fd34413
 800b1d8:	0800e008 	.word	0x0800e008
 800b1dc:	0800e0c5 	.word	0x0800e0c5
 800b1e0:	7ff00000 	.word	0x7ff00000
 800b1e4:	0800e0c1 	.word	0x0800e0c1
 800b1e8:	0800e0b8 	.word	0x0800e0b8
 800b1ec:	0800df91 	.word	0x0800df91
 800b1f0:	3ff80000 	.word	0x3ff80000
 800b1f4:	0800e230 	.word	0x0800e230
 800b1f8:	0800e120 	.word	0x0800e120
 800b1fc:	2501      	movs	r5, #1
 800b1fe:	2300      	movs	r3, #0
 800b200:	9306      	str	r3, [sp, #24]
 800b202:	9508      	str	r5, [sp, #32]
 800b204:	f04f 33ff 	mov.w	r3, #4294967295
 800b208:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b20c:	2200      	movs	r2, #0
 800b20e:	2312      	movs	r3, #18
 800b210:	e7b0      	b.n	800b174 <_dtoa_r+0x26c>
 800b212:	2301      	movs	r3, #1
 800b214:	9308      	str	r3, [sp, #32]
 800b216:	e7f5      	b.n	800b204 <_dtoa_r+0x2fc>
 800b218:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b21a:	e9cd 3302 	strd	r3, r3, [sp, #8]
 800b21e:	e7b8      	b.n	800b192 <_dtoa_r+0x28a>
 800b220:	3101      	adds	r1, #1
 800b222:	6041      	str	r1, [r0, #4]
 800b224:	0052      	lsls	r2, r2, #1
 800b226:	e7b8      	b.n	800b19a <_dtoa_r+0x292>
 800b228:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800b22a:	9a01      	ldr	r2, [sp, #4]
 800b22c:	601a      	str	r2, [r3, #0]
 800b22e:	9b03      	ldr	r3, [sp, #12]
 800b230:	2b0e      	cmp	r3, #14
 800b232:	f200 809d 	bhi.w	800b370 <_dtoa_r+0x468>
 800b236:	2d00      	cmp	r5, #0
 800b238:	f000 809a 	beq.w	800b370 <_dtoa_r+0x468>
 800b23c:	9b00      	ldr	r3, [sp, #0]
 800b23e:	2b00      	cmp	r3, #0
 800b240:	dd32      	ble.n	800b2a8 <_dtoa_r+0x3a0>
 800b242:	4ab7      	ldr	r2, [pc, #732]	; (800b520 <_dtoa_r+0x618>)
 800b244:	f003 030f 	and.w	r3, r3, #15
 800b248:	eb02 03c3 	add.w	r3, r2, r3, lsl #3
 800b24c:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b250:	9b00      	ldr	r3, [sp, #0]
 800b252:	05d8      	lsls	r0, r3, #23
 800b254:	ea4f 1723 	mov.w	r7, r3, asr #4
 800b258:	d516      	bpl.n	800b288 <_dtoa_r+0x380>
 800b25a:	4bb2      	ldr	r3, [pc, #712]	; (800b524 <_dtoa_r+0x61c>)
 800b25c:	ec51 0b19 	vmov	r0, r1, d9
 800b260:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 800b264:	f7f5 faf2 	bl	800084c <__aeabi_ddiv>
 800b268:	f007 070f 	and.w	r7, r7, #15
 800b26c:	4682      	mov	sl, r0
 800b26e:	468b      	mov	fp, r1
 800b270:	2503      	movs	r5, #3
 800b272:	4eac      	ldr	r6, [pc, #688]	; (800b524 <_dtoa_r+0x61c>)
 800b274:	b957      	cbnz	r7, 800b28c <_dtoa_r+0x384>
 800b276:	4642      	mov	r2, r8
 800b278:	464b      	mov	r3, r9
 800b27a:	4650      	mov	r0, sl
 800b27c:	4659      	mov	r1, fp
 800b27e:	f7f5 fae5 	bl	800084c <__aeabi_ddiv>
 800b282:	4682      	mov	sl, r0
 800b284:	468b      	mov	fp, r1
 800b286:	e028      	b.n	800b2da <_dtoa_r+0x3d2>
 800b288:	2502      	movs	r5, #2
 800b28a:	e7f2      	b.n	800b272 <_dtoa_r+0x36a>
 800b28c:	07f9      	lsls	r1, r7, #31
 800b28e:	d508      	bpl.n	800b2a2 <_dtoa_r+0x39a>
 800b290:	4640      	mov	r0, r8
 800b292:	4649      	mov	r1, r9
 800b294:	e9d6 2300 	ldrd	r2, r3, [r6]
 800b298:	f7f5 f9ae 	bl	80005f8 <__aeabi_dmul>
 800b29c:	3501      	adds	r5, #1
 800b29e:	4680      	mov	r8, r0
 800b2a0:	4689      	mov	r9, r1
 800b2a2:	107f      	asrs	r7, r7, #1
 800b2a4:	3608      	adds	r6, #8
 800b2a6:	e7e5      	b.n	800b274 <_dtoa_r+0x36c>
 800b2a8:	f000 809b 	beq.w	800b3e2 <_dtoa_r+0x4da>
 800b2ac:	9b00      	ldr	r3, [sp, #0]
 800b2ae:	4f9d      	ldr	r7, [pc, #628]	; (800b524 <_dtoa_r+0x61c>)
 800b2b0:	425e      	negs	r6, r3
 800b2b2:	4b9b      	ldr	r3, [pc, #620]	; (800b520 <_dtoa_r+0x618>)
 800b2b4:	f006 020f 	and.w	r2, r6, #15
 800b2b8:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b2bc:	e9d3 2300 	ldrd	r2, r3, [r3]
 800b2c0:	ec51 0b19 	vmov	r0, r1, d9
 800b2c4:	f7f5 f998 	bl	80005f8 <__aeabi_dmul>
 800b2c8:	1136      	asrs	r6, r6, #4
 800b2ca:	4682      	mov	sl, r0
 800b2cc:	468b      	mov	fp, r1
 800b2ce:	2300      	movs	r3, #0
 800b2d0:	2502      	movs	r5, #2
 800b2d2:	2e00      	cmp	r6, #0
 800b2d4:	d17a      	bne.n	800b3cc <_dtoa_r+0x4c4>
 800b2d6:	2b00      	cmp	r3, #0
 800b2d8:	d1d3      	bne.n	800b282 <_dtoa_r+0x37a>
 800b2da:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b2dc:	2b00      	cmp	r3, #0
 800b2de:	f000 8082 	beq.w	800b3e6 <_dtoa_r+0x4de>
 800b2e2:	4b91      	ldr	r3, [pc, #580]	; (800b528 <_dtoa_r+0x620>)
 800b2e4:	2200      	movs	r2, #0
 800b2e6:	4650      	mov	r0, sl
 800b2e8:	4659      	mov	r1, fp
 800b2ea:	f7f5 fbf7 	bl	8000adc <__aeabi_dcmplt>
 800b2ee:	2800      	cmp	r0, #0
 800b2f0:	d079      	beq.n	800b3e6 <_dtoa_r+0x4de>
 800b2f2:	9b03      	ldr	r3, [sp, #12]
 800b2f4:	2b00      	cmp	r3, #0
 800b2f6:	d076      	beq.n	800b3e6 <_dtoa_r+0x4de>
 800b2f8:	9b02      	ldr	r3, [sp, #8]
 800b2fa:	2b00      	cmp	r3, #0
 800b2fc:	dd36      	ble.n	800b36c <_dtoa_r+0x464>
 800b2fe:	9b00      	ldr	r3, [sp, #0]
 800b300:	4650      	mov	r0, sl
 800b302:	4659      	mov	r1, fp
 800b304:	1e5f      	subs	r7, r3, #1
 800b306:	2200      	movs	r2, #0
 800b308:	4b88      	ldr	r3, [pc, #544]	; (800b52c <_dtoa_r+0x624>)
 800b30a:	f7f5 f975 	bl	80005f8 <__aeabi_dmul>
 800b30e:	9e02      	ldr	r6, [sp, #8]
 800b310:	4682      	mov	sl, r0
 800b312:	468b      	mov	fp, r1
 800b314:	3501      	adds	r5, #1
 800b316:	4628      	mov	r0, r5
 800b318:	f7f5 f904 	bl	8000524 <__aeabi_i2d>
 800b31c:	4652      	mov	r2, sl
 800b31e:	465b      	mov	r3, fp
 800b320:	f7f5 f96a 	bl	80005f8 <__aeabi_dmul>
 800b324:	4b82      	ldr	r3, [pc, #520]	; (800b530 <_dtoa_r+0x628>)
 800b326:	2200      	movs	r2, #0
 800b328:	f7f4 ffb0 	bl	800028c <__adddf3>
 800b32c:	46d0      	mov	r8, sl
 800b32e:	46d9      	mov	r9, fp
 800b330:	4682      	mov	sl, r0
 800b332:	f1a1 7b50 	sub.w	fp, r1, #54525952	; 0x3400000
 800b336:	2e00      	cmp	r6, #0
 800b338:	d158      	bne.n	800b3ec <_dtoa_r+0x4e4>
 800b33a:	4b7e      	ldr	r3, [pc, #504]	; (800b534 <_dtoa_r+0x62c>)
 800b33c:	2200      	movs	r2, #0
 800b33e:	4640      	mov	r0, r8
 800b340:	4649      	mov	r1, r9
 800b342:	f7f4 ffa1 	bl	8000288 <__aeabi_dsub>
 800b346:	4652      	mov	r2, sl
 800b348:	465b      	mov	r3, fp
 800b34a:	4680      	mov	r8, r0
 800b34c:	4689      	mov	r9, r1
 800b34e:	f7f5 fbe3 	bl	8000b18 <__aeabi_dcmpgt>
 800b352:	2800      	cmp	r0, #0
 800b354:	f040 8295 	bne.w	800b882 <_dtoa_r+0x97a>
 800b358:	4652      	mov	r2, sl
 800b35a:	f10b 4300 	add.w	r3, fp, #2147483648	; 0x80000000
 800b35e:	4640      	mov	r0, r8
 800b360:	4649      	mov	r1, r9
 800b362:	f7f5 fbbb 	bl	8000adc <__aeabi_dcmplt>
 800b366:	2800      	cmp	r0, #0
 800b368:	f040 8289 	bne.w	800b87e <_dtoa_r+0x976>
 800b36c:	ec5b ab19 	vmov	sl, fp, d9
 800b370:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800b372:	2b00      	cmp	r3, #0
 800b374:	f2c0 8148 	blt.w	800b608 <_dtoa_r+0x700>
 800b378:	9a00      	ldr	r2, [sp, #0]
 800b37a:	2a0e      	cmp	r2, #14
 800b37c:	f300 8144 	bgt.w	800b608 <_dtoa_r+0x700>
 800b380:	4b67      	ldr	r3, [pc, #412]	; (800b520 <_dtoa_r+0x618>)
 800b382:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800b386:	e9d3 8900 	ldrd	r8, r9, [r3]
 800b38a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b38c:	2b00      	cmp	r3, #0
 800b38e:	f280 80d5 	bge.w	800b53c <_dtoa_r+0x634>
 800b392:	9b03      	ldr	r3, [sp, #12]
 800b394:	2b00      	cmp	r3, #0
 800b396:	f300 80d1 	bgt.w	800b53c <_dtoa_r+0x634>
 800b39a:	f040 826f 	bne.w	800b87c <_dtoa_r+0x974>
 800b39e:	4b65      	ldr	r3, [pc, #404]	; (800b534 <_dtoa_r+0x62c>)
 800b3a0:	2200      	movs	r2, #0
 800b3a2:	4640      	mov	r0, r8
 800b3a4:	4649      	mov	r1, r9
 800b3a6:	f7f5 f927 	bl	80005f8 <__aeabi_dmul>
 800b3aa:	4652      	mov	r2, sl
 800b3ac:	465b      	mov	r3, fp
 800b3ae:	f7f5 fba9 	bl	8000b04 <__aeabi_dcmpge>
 800b3b2:	9e03      	ldr	r6, [sp, #12]
 800b3b4:	4637      	mov	r7, r6
 800b3b6:	2800      	cmp	r0, #0
 800b3b8:	f040 8245 	bne.w	800b846 <_dtoa_r+0x93e>
 800b3bc:	9d01      	ldr	r5, [sp, #4]
 800b3be:	2331      	movs	r3, #49	; 0x31
 800b3c0:	f805 3b01 	strb.w	r3, [r5], #1
 800b3c4:	9b00      	ldr	r3, [sp, #0]
 800b3c6:	3301      	adds	r3, #1
 800b3c8:	9300      	str	r3, [sp, #0]
 800b3ca:	e240      	b.n	800b84e <_dtoa_r+0x946>
 800b3cc:	07f2      	lsls	r2, r6, #31
 800b3ce:	d505      	bpl.n	800b3dc <_dtoa_r+0x4d4>
 800b3d0:	e9d7 2300 	ldrd	r2, r3, [r7]
 800b3d4:	f7f5 f910 	bl	80005f8 <__aeabi_dmul>
 800b3d8:	3501      	adds	r5, #1
 800b3da:	2301      	movs	r3, #1
 800b3dc:	1076      	asrs	r6, r6, #1
 800b3de:	3708      	adds	r7, #8
 800b3e0:	e777      	b.n	800b2d2 <_dtoa_r+0x3ca>
 800b3e2:	2502      	movs	r5, #2
 800b3e4:	e779      	b.n	800b2da <_dtoa_r+0x3d2>
 800b3e6:	9f00      	ldr	r7, [sp, #0]
 800b3e8:	9e03      	ldr	r6, [sp, #12]
 800b3ea:	e794      	b.n	800b316 <_dtoa_r+0x40e>
 800b3ec:	9901      	ldr	r1, [sp, #4]
 800b3ee:	4b4c      	ldr	r3, [pc, #304]	; (800b520 <_dtoa_r+0x618>)
 800b3f0:	4431      	add	r1, r6
 800b3f2:	910d      	str	r1, [sp, #52]	; 0x34
 800b3f4:	9908      	ldr	r1, [sp, #32]
 800b3f6:	eb03 03c6 	add.w	r3, r3, r6, lsl #3
 800b3fa:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800b3fe:	2900      	cmp	r1, #0
 800b400:	d043      	beq.n	800b48a <_dtoa_r+0x582>
 800b402:	494d      	ldr	r1, [pc, #308]	; (800b538 <_dtoa_r+0x630>)
 800b404:	2000      	movs	r0, #0
 800b406:	f7f5 fa21 	bl	800084c <__aeabi_ddiv>
 800b40a:	4652      	mov	r2, sl
 800b40c:	465b      	mov	r3, fp
 800b40e:	f7f4 ff3b 	bl	8000288 <__aeabi_dsub>
 800b412:	9d01      	ldr	r5, [sp, #4]
 800b414:	4682      	mov	sl, r0
 800b416:	468b      	mov	fp, r1
 800b418:	4649      	mov	r1, r9
 800b41a:	4640      	mov	r0, r8
 800b41c:	f7f5 fb9c 	bl	8000b58 <__aeabi_d2iz>
 800b420:	4606      	mov	r6, r0
 800b422:	f7f5 f87f 	bl	8000524 <__aeabi_i2d>
 800b426:	4602      	mov	r2, r0
 800b428:	460b      	mov	r3, r1
 800b42a:	4640      	mov	r0, r8
 800b42c:	4649      	mov	r1, r9
 800b42e:	f7f4 ff2b 	bl	8000288 <__aeabi_dsub>
 800b432:	3630      	adds	r6, #48	; 0x30
 800b434:	f805 6b01 	strb.w	r6, [r5], #1
 800b438:	4652      	mov	r2, sl
 800b43a:	465b      	mov	r3, fp
 800b43c:	4680      	mov	r8, r0
 800b43e:	4689      	mov	r9, r1
 800b440:	f7f5 fb4c 	bl	8000adc <__aeabi_dcmplt>
 800b444:	2800      	cmp	r0, #0
 800b446:	d163      	bne.n	800b510 <_dtoa_r+0x608>
 800b448:	4642      	mov	r2, r8
 800b44a:	464b      	mov	r3, r9
 800b44c:	4936      	ldr	r1, [pc, #216]	; (800b528 <_dtoa_r+0x620>)
 800b44e:	2000      	movs	r0, #0
 800b450:	f7f4 ff1a 	bl	8000288 <__aeabi_dsub>
 800b454:	4652      	mov	r2, sl
 800b456:	465b      	mov	r3, fp
 800b458:	f7f5 fb40 	bl	8000adc <__aeabi_dcmplt>
 800b45c:	2800      	cmp	r0, #0
 800b45e:	f040 80b5 	bne.w	800b5cc <_dtoa_r+0x6c4>
 800b462:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b464:	429d      	cmp	r5, r3
 800b466:	d081      	beq.n	800b36c <_dtoa_r+0x464>
 800b468:	4b30      	ldr	r3, [pc, #192]	; (800b52c <_dtoa_r+0x624>)
 800b46a:	2200      	movs	r2, #0
 800b46c:	4650      	mov	r0, sl
 800b46e:	4659      	mov	r1, fp
 800b470:	f7f5 f8c2 	bl	80005f8 <__aeabi_dmul>
 800b474:	4b2d      	ldr	r3, [pc, #180]	; (800b52c <_dtoa_r+0x624>)
 800b476:	4682      	mov	sl, r0
 800b478:	468b      	mov	fp, r1
 800b47a:	4640      	mov	r0, r8
 800b47c:	4649      	mov	r1, r9
 800b47e:	2200      	movs	r2, #0
 800b480:	f7f5 f8ba 	bl	80005f8 <__aeabi_dmul>
 800b484:	4680      	mov	r8, r0
 800b486:	4689      	mov	r9, r1
 800b488:	e7c6      	b.n	800b418 <_dtoa_r+0x510>
 800b48a:	4650      	mov	r0, sl
 800b48c:	4659      	mov	r1, fp
 800b48e:	f7f5 f8b3 	bl	80005f8 <__aeabi_dmul>
 800b492:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b494:	9d01      	ldr	r5, [sp, #4]
 800b496:	930f      	str	r3, [sp, #60]	; 0x3c
 800b498:	4682      	mov	sl, r0
 800b49a:	468b      	mov	fp, r1
 800b49c:	4649      	mov	r1, r9
 800b49e:	4640      	mov	r0, r8
 800b4a0:	f7f5 fb5a 	bl	8000b58 <__aeabi_d2iz>
 800b4a4:	4606      	mov	r6, r0
 800b4a6:	f7f5 f83d 	bl	8000524 <__aeabi_i2d>
 800b4aa:	3630      	adds	r6, #48	; 0x30
 800b4ac:	4602      	mov	r2, r0
 800b4ae:	460b      	mov	r3, r1
 800b4b0:	4640      	mov	r0, r8
 800b4b2:	4649      	mov	r1, r9
 800b4b4:	f7f4 fee8 	bl	8000288 <__aeabi_dsub>
 800b4b8:	f805 6b01 	strb.w	r6, [r5], #1
 800b4bc:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 800b4be:	429d      	cmp	r5, r3
 800b4c0:	4680      	mov	r8, r0
 800b4c2:	4689      	mov	r9, r1
 800b4c4:	f04f 0200 	mov.w	r2, #0
 800b4c8:	d124      	bne.n	800b514 <_dtoa_r+0x60c>
 800b4ca:	4b1b      	ldr	r3, [pc, #108]	; (800b538 <_dtoa_r+0x630>)
 800b4cc:	4650      	mov	r0, sl
 800b4ce:	4659      	mov	r1, fp
 800b4d0:	f7f4 fedc 	bl	800028c <__adddf3>
 800b4d4:	4602      	mov	r2, r0
 800b4d6:	460b      	mov	r3, r1
 800b4d8:	4640      	mov	r0, r8
 800b4da:	4649      	mov	r1, r9
 800b4dc:	f7f5 fb1c 	bl	8000b18 <__aeabi_dcmpgt>
 800b4e0:	2800      	cmp	r0, #0
 800b4e2:	d173      	bne.n	800b5cc <_dtoa_r+0x6c4>
 800b4e4:	4652      	mov	r2, sl
 800b4e6:	465b      	mov	r3, fp
 800b4e8:	4913      	ldr	r1, [pc, #76]	; (800b538 <_dtoa_r+0x630>)
 800b4ea:	2000      	movs	r0, #0
 800b4ec:	f7f4 fecc 	bl	8000288 <__aeabi_dsub>
 800b4f0:	4602      	mov	r2, r0
 800b4f2:	460b      	mov	r3, r1
 800b4f4:	4640      	mov	r0, r8
 800b4f6:	4649      	mov	r1, r9
 800b4f8:	f7f5 faf0 	bl	8000adc <__aeabi_dcmplt>
 800b4fc:	2800      	cmp	r0, #0
 800b4fe:	f43f af35 	beq.w	800b36c <_dtoa_r+0x464>
 800b502:	9d0f      	ldr	r5, [sp, #60]	; 0x3c
 800b504:	1e6b      	subs	r3, r5, #1
 800b506:	930f      	str	r3, [sp, #60]	; 0x3c
 800b508:	f815 3c01 	ldrb.w	r3, [r5, #-1]
 800b50c:	2b30      	cmp	r3, #48	; 0x30
 800b50e:	d0f8      	beq.n	800b502 <_dtoa_r+0x5fa>
 800b510:	9700      	str	r7, [sp, #0]
 800b512:	e049      	b.n	800b5a8 <_dtoa_r+0x6a0>
 800b514:	4b05      	ldr	r3, [pc, #20]	; (800b52c <_dtoa_r+0x624>)
 800b516:	f7f5 f86f 	bl	80005f8 <__aeabi_dmul>
 800b51a:	4680      	mov	r8, r0
 800b51c:	4689      	mov	r9, r1
 800b51e:	e7bd      	b.n	800b49c <_dtoa_r+0x594>
 800b520:	0800e230 	.word	0x0800e230
 800b524:	0800e208 	.word	0x0800e208
 800b528:	3ff00000 	.word	0x3ff00000
 800b52c:	40240000 	.word	0x40240000
 800b530:	401c0000 	.word	0x401c0000
 800b534:	40140000 	.word	0x40140000
 800b538:	3fe00000 	.word	0x3fe00000
 800b53c:	9d01      	ldr	r5, [sp, #4]
 800b53e:	4656      	mov	r6, sl
 800b540:	465f      	mov	r7, fp
 800b542:	4642      	mov	r2, r8
 800b544:	464b      	mov	r3, r9
 800b546:	4630      	mov	r0, r6
 800b548:	4639      	mov	r1, r7
 800b54a:	f7f5 f97f 	bl	800084c <__aeabi_ddiv>
 800b54e:	f7f5 fb03 	bl	8000b58 <__aeabi_d2iz>
 800b552:	4682      	mov	sl, r0
 800b554:	f7f4 ffe6 	bl	8000524 <__aeabi_i2d>
 800b558:	4642      	mov	r2, r8
 800b55a:	464b      	mov	r3, r9
 800b55c:	f7f5 f84c 	bl	80005f8 <__aeabi_dmul>
 800b560:	4602      	mov	r2, r0
 800b562:	460b      	mov	r3, r1
 800b564:	4630      	mov	r0, r6
 800b566:	4639      	mov	r1, r7
 800b568:	f10a 0630 	add.w	r6, sl, #48	; 0x30
 800b56c:	f7f4 fe8c 	bl	8000288 <__aeabi_dsub>
 800b570:	f805 6b01 	strb.w	r6, [r5], #1
 800b574:	9e01      	ldr	r6, [sp, #4]
 800b576:	9f03      	ldr	r7, [sp, #12]
 800b578:	1bae      	subs	r6, r5, r6
 800b57a:	42b7      	cmp	r7, r6
 800b57c:	4602      	mov	r2, r0
 800b57e:	460b      	mov	r3, r1
 800b580:	d135      	bne.n	800b5ee <_dtoa_r+0x6e6>
 800b582:	f7f4 fe83 	bl	800028c <__adddf3>
 800b586:	4642      	mov	r2, r8
 800b588:	464b      	mov	r3, r9
 800b58a:	4606      	mov	r6, r0
 800b58c:	460f      	mov	r7, r1
 800b58e:	f7f5 fac3 	bl	8000b18 <__aeabi_dcmpgt>
 800b592:	b9d0      	cbnz	r0, 800b5ca <_dtoa_r+0x6c2>
 800b594:	4642      	mov	r2, r8
 800b596:	464b      	mov	r3, r9
 800b598:	4630      	mov	r0, r6
 800b59a:	4639      	mov	r1, r7
 800b59c:	f7f5 fa94 	bl	8000ac8 <__aeabi_dcmpeq>
 800b5a0:	b110      	cbz	r0, 800b5a8 <_dtoa_r+0x6a0>
 800b5a2:	f01a 0f01 	tst.w	sl, #1
 800b5a6:	d110      	bne.n	800b5ca <_dtoa_r+0x6c2>
 800b5a8:	4620      	mov	r0, r4
 800b5aa:	ee18 1a10 	vmov	r1, s16
 800b5ae:	f000 fe87 	bl	800c2c0 <_Bfree>
 800b5b2:	2300      	movs	r3, #0
 800b5b4:	9800      	ldr	r0, [sp, #0]
 800b5b6:	702b      	strb	r3, [r5, #0]
 800b5b8:	9b0c      	ldr	r3, [sp, #48]	; 0x30
 800b5ba:	3001      	adds	r0, #1
 800b5bc:	6018      	str	r0, [r3, #0]
 800b5be:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800b5c0:	2b00      	cmp	r3, #0
 800b5c2:	f43f acf1 	beq.w	800afa8 <_dtoa_r+0xa0>
 800b5c6:	601d      	str	r5, [r3, #0]
 800b5c8:	e4ee      	b.n	800afa8 <_dtoa_r+0xa0>
 800b5ca:	9f00      	ldr	r7, [sp, #0]
 800b5cc:	462b      	mov	r3, r5
 800b5ce:	461d      	mov	r5, r3
 800b5d0:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800b5d4:	2a39      	cmp	r2, #57	; 0x39
 800b5d6:	d106      	bne.n	800b5e6 <_dtoa_r+0x6de>
 800b5d8:	9a01      	ldr	r2, [sp, #4]
 800b5da:	429a      	cmp	r2, r3
 800b5dc:	d1f7      	bne.n	800b5ce <_dtoa_r+0x6c6>
 800b5de:	9901      	ldr	r1, [sp, #4]
 800b5e0:	2230      	movs	r2, #48	; 0x30
 800b5e2:	3701      	adds	r7, #1
 800b5e4:	700a      	strb	r2, [r1, #0]
 800b5e6:	781a      	ldrb	r2, [r3, #0]
 800b5e8:	3201      	adds	r2, #1
 800b5ea:	701a      	strb	r2, [r3, #0]
 800b5ec:	e790      	b.n	800b510 <_dtoa_r+0x608>
 800b5ee:	4ba6      	ldr	r3, [pc, #664]	; (800b888 <_dtoa_r+0x980>)
 800b5f0:	2200      	movs	r2, #0
 800b5f2:	f7f5 f801 	bl	80005f8 <__aeabi_dmul>
 800b5f6:	2200      	movs	r2, #0
 800b5f8:	2300      	movs	r3, #0
 800b5fa:	4606      	mov	r6, r0
 800b5fc:	460f      	mov	r7, r1
 800b5fe:	f7f5 fa63 	bl	8000ac8 <__aeabi_dcmpeq>
 800b602:	2800      	cmp	r0, #0
 800b604:	d09d      	beq.n	800b542 <_dtoa_r+0x63a>
 800b606:	e7cf      	b.n	800b5a8 <_dtoa_r+0x6a0>
 800b608:	9a08      	ldr	r2, [sp, #32]
 800b60a:	2a00      	cmp	r2, #0
 800b60c:	f000 80d7 	beq.w	800b7be <_dtoa_r+0x8b6>
 800b610:	9a06      	ldr	r2, [sp, #24]
 800b612:	2a01      	cmp	r2, #1
 800b614:	f300 80ba 	bgt.w	800b78c <_dtoa_r+0x884>
 800b618:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800b61a:	2a00      	cmp	r2, #0
 800b61c:	f000 80b2 	beq.w	800b784 <_dtoa_r+0x87c>
 800b620:	f203 4333 	addw	r3, r3, #1075	; 0x433
 800b624:	9e07      	ldr	r6, [sp, #28]
 800b626:	9d04      	ldr	r5, [sp, #16]
 800b628:	9a04      	ldr	r2, [sp, #16]
 800b62a:	441a      	add	r2, r3
 800b62c:	9204      	str	r2, [sp, #16]
 800b62e:	9a05      	ldr	r2, [sp, #20]
 800b630:	2101      	movs	r1, #1
 800b632:	441a      	add	r2, r3
 800b634:	4620      	mov	r0, r4
 800b636:	9205      	str	r2, [sp, #20]
 800b638:	f000 ff44 	bl	800c4c4 <__i2b>
 800b63c:	4607      	mov	r7, r0
 800b63e:	2d00      	cmp	r5, #0
 800b640:	dd0c      	ble.n	800b65c <_dtoa_r+0x754>
 800b642:	9b05      	ldr	r3, [sp, #20]
 800b644:	2b00      	cmp	r3, #0
 800b646:	dd09      	ble.n	800b65c <_dtoa_r+0x754>
 800b648:	42ab      	cmp	r3, r5
 800b64a:	9a04      	ldr	r2, [sp, #16]
 800b64c:	bfa8      	it	ge
 800b64e:	462b      	movge	r3, r5
 800b650:	1ad2      	subs	r2, r2, r3
 800b652:	9204      	str	r2, [sp, #16]
 800b654:	9a05      	ldr	r2, [sp, #20]
 800b656:	1aed      	subs	r5, r5, r3
 800b658:	1ad3      	subs	r3, r2, r3
 800b65a:	9305      	str	r3, [sp, #20]
 800b65c:	9b07      	ldr	r3, [sp, #28]
 800b65e:	b31b      	cbz	r3, 800b6a8 <_dtoa_r+0x7a0>
 800b660:	9b08      	ldr	r3, [sp, #32]
 800b662:	2b00      	cmp	r3, #0
 800b664:	f000 80af 	beq.w	800b7c6 <_dtoa_r+0x8be>
 800b668:	2e00      	cmp	r6, #0
 800b66a:	dd13      	ble.n	800b694 <_dtoa_r+0x78c>
 800b66c:	4639      	mov	r1, r7
 800b66e:	4632      	mov	r2, r6
 800b670:	4620      	mov	r0, r4
 800b672:	f000 ffe7 	bl	800c644 <__pow5mult>
 800b676:	ee18 2a10 	vmov	r2, s16
 800b67a:	4601      	mov	r1, r0
 800b67c:	4607      	mov	r7, r0
 800b67e:	4620      	mov	r0, r4
 800b680:	f000 ff36 	bl	800c4f0 <__multiply>
 800b684:	ee18 1a10 	vmov	r1, s16
 800b688:	4680      	mov	r8, r0
 800b68a:	4620      	mov	r0, r4
 800b68c:	f000 fe18 	bl	800c2c0 <_Bfree>
 800b690:	ee08 8a10 	vmov	s16, r8
 800b694:	9b07      	ldr	r3, [sp, #28]
 800b696:	1b9a      	subs	r2, r3, r6
 800b698:	d006      	beq.n	800b6a8 <_dtoa_r+0x7a0>
 800b69a:	ee18 1a10 	vmov	r1, s16
 800b69e:	4620      	mov	r0, r4
 800b6a0:	f000 ffd0 	bl	800c644 <__pow5mult>
 800b6a4:	ee08 0a10 	vmov	s16, r0
 800b6a8:	2101      	movs	r1, #1
 800b6aa:	4620      	mov	r0, r4
 800b6ac:	f000 ff0a 	bl	800c4c4 <__i2b>
 800b6b0:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b6b2:	2b00      	cmp	r3, #0
 800b6b4:	4606      	mov	r6, r0
 800b6b6:	f340 8088 	ble.w	800b7ca <_dtoa_r+0x8c2>
 800b6ba:	461a      	mov	r2, r3
 800b6bc:	4601      	mov	r1, r0
 800b6be:	4620      	mov	r0, r4
 800b6c0:	f000 ffc0 	bl	800c644 <__pow5mult>
 800b6c4:	9b06      	ldr	r3, [sp, #24]
 800b6c6:	2b01      	cmp	r3, #1
 800b6c8:	4606      	mov	r6, r0
 800b6ca:	f340 8081 	ble.w	800b7d0 <_dtoa_r+0x8c8>
 800b6ce:	f04f 0800 	mov.w	r8, #0
 800b6d2:	6933      	ldr	r3, [r6, #16]
 800b6d4:	eb06 0383 	add.w	r3, r6, r3, lsl #2
 800b6d8:	6918      	ldr	r0, [r3, #16]
 800b6da:	f000 fea3 	bl	800c424 <__hi0bits>
 800b6de:	f1c0 0020 	rsb	r0, r0, #32
 800b6e2:	9b05      	ldr	r3, [sp, #20]
 800b6e4:	4418      	add	r0, r3
 800b6e6:	f010 001f 	ands.w	r0, r0, #31
 800b6ea:	f000 8092 	beq.w	800b812 <_dtoa_r+0x90a>
 800b6ee:	f1c0 0320 	rsb	r3, r0, #32
 800b6f2:	2b04      	cmp	r3, #4
 800b6f4:	f340 808a 	ble.w	800b80c <_dtoa_r+0x904>
 800b6f8:	f1c0 001c 	rsb	r0, r0, #28
 800b6fc:	9b04      	ldr	r3, [sp, #16]
 800b6fe:	4403      	add	r3, r0
 800b700:	9304      	str	r3, [sp, #16]
 800b702:	9b05      	ldr	r3, [sp, #20]
 800b704:	4403      	add	r3, r0
 800b706:	4405      	add	r5, r0
 800b708:	9305      	str	r3, [sp, #20]
 800b70a:	9b04      	ldr	r3, [sp, #16]
 800b70c:	2b00      	cmp	r3, #0
 800b70e:	dd07      	ble.n	800b720 <_dtoa_r+0x818>
 800b710:	ee18 1a10 	vmov	r1, s16
 800b714:	461a      	mov	r2, r3
 800b716:	4620      	mov	r0, r4
 800b718:	f000 ffee 	bl	800c6f8 <__lshift>
 800b71c:	ee08 0a10 	vmov	s16, r0
 800b720:	9b05      	ldr	r3, [sp, #20]
 800b722:	2b00      	cmp	r3, #0
 800b724:	dd05      	ble.n	800b732 <_dtoa_r+0x82a>
 800b726:	4631      	mov	r1, r6
 800b728:	461a      	mov	r2, r3
 800b72a:	4620      	mov	r0, r4
 800b72c:	f000 ffe4 	bl	800c6f8 <__lshift>
 800b730:	4606      	mov	r6, r0
 800b732:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 800b734:	2b00      	cmp	r3, #0
 800b736:	d06e      	beq.n	800b816 <_dtoa_r+0x90e>
 800b738:	ee18 0a10 	vmov	r0, s16
 800b73c:	4631      	mov	r1, r6
 800b73e:	f001 f84b 	bl	800c7d8 <__mcmp>
 800b742:	2800      	cmp	r0, #0
 800b744:	da67      	bge.n	800b816 <_dtoa_r+0x90e>
 800b746:	9b00      	ldr	r3, [sp, #0]
 800b748:	3b01      	subs	r3, #1
 800b74a:	ee18 1a10 	vmov	r1, s16
 800b74e:	9300      	str	r3, [sp, #0]
 800b750:	220a      	movs	r2, #10
 800b752:	2300      	movs	r3, #0
 800b754:	4620      	mov	r0, r4
 800b756:	f000 fdd5 	bl	800c304 <__multadd>
 800b75a:	9b08      	ldr	r3, [sp, #32]
 800b75c:	ee08 0a10 	vmov	s16, r0
 800b760:	2b00      	cmp	r3, #0
 800b762:	f000 81b1 	beq.w	800bac8 <_dtoa_r+0xbc0>
 800b766:	2300      	movs	r3, #0
 800b768:	4639      	mov	r1, r7
 800b76a:	220a      	movs	r2, #10
 800b76c:	4620      	mov	r0, r4
 800b76e:	f000 fdc9 	bl	800c304 <__multadd>
 800b772:	9b02      	ldr	r3, [sp, #8]
 800b774:	2b00      	cmp	r3, #0
 800b776:	4607      	mov	r7, r0
 800b778:	f300 808e 	bgt.w	800b898 <_dtoa_r+0x990>
 800b77c:	9b06      	ldr	r3, [sp, #24]
 800b77e:	2b02      	cmp	r3, #2
 800b780:	dc51      	bgt.n	800b826 <_dtoa_r+0x91e>
 800b782:	e089      	b.n	800b898 <_dtoa_r+0x990>
 800b784:	9b10      	ldr	r3, [sp, #64]	; 0x40
 800b786:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 800b78a:	e74b      	b.n	800b624 <_dtoa_r+0x71c>
 800b78c:	9b03      	ldr	r3, [sp, #12]
 800b78e:	1e5e      	subs	r6, r3, #1
 800b790:	9b07      	ldr	r3, [sp, #28]
 800b792:	42b3      	cmp	r3, r6
 800b794:	bfbf      	itttt	lt
 800b796:	9b07      	ldrlt	r3, [sp, #28]
 800b798:	9607      	strlt	r6, [sp, #28]
 800b79a:	1af2      	sublt	r2, r6, r3
 800b79c:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 800b79e:	bfb6      	itet	lt
 800b7a0:	189b      	addlt	r3, r3, r2
 800b7a2:	1b9e      	subge	r6, r3, r6
 800b7a4:	930a      	strlt	r3, [sp, #40]	; 0x28
 800b7a6:	9b03      	ldr	r3, [sp, #12]
 800b7a8:	bfb8      	it	lt
 800b7aa:	2600      	movlt	r6, #0
 800b7ac:	2b00      	cmp	r3, #0
 800b7ae:	bfb7      	itett	lt
 800b7b0:	e9dd 2303 	ldrdlt	r2, r3, [sp, #12]
 800b7b4:	e9dd 3503 	ldrdge	r3, r5, [sp, #12]
 800b7b8:	1a9d      	sublt	r5, r3, r2
 800b7ba:	2300      	movlt	r3, #0
 800b7bc:	e734      	b.n	800b628 <_dtoa_r+0x720>
 800b7be:	9e07      	ldr	r6, [sp, #28]
 800b7c0:	9d04      	ldr	r5, [sp, #16]
 800b7c2:	9f08      	ldr	r7, [sp, #32]
 800b7c4:	e73b      	b.n	800b63e <_dtoa_r+0x736>
 800b7c6:	9a07      	ldr	r2, [sp, #28]
 800b7c8:	e767      	b.n	800b69a <_dtoa_r+0x792>
 800b7ca:	9b06      	ldr	r3, [sp, #24]
 800b7cc:	2b01      	cmp	r3, #1
 800b7ce:	dc18      	bgt.n	800b802 <_dtoa_r+0x8fa>
 800b7d0:	f1ba 0f00 	cmp.w	sl, #0
 800b7d4:	d115      	bne.n	800b802 <_dtoa_r+0x8fa>
 800b7d6:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800b7da:	b993      	cbnz	r3, 800b802 <_dtoa_r+0x8fa>
 800b7dc:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800b7e0:	0d1b      	lsrs	r3, r3, #20
 800b7e2:	051b      	lsls	r3, r3, #20
 800b7e4:	b183      	cbz	r3, 800b808 <_dtoa_r+0x900>
 800b7e6:	9b04      	ldr	r3, [sp, #16]
 800b7e8:	3301      	adds	r3, #1
 800b7ea:	9304      	str	r3, [sp, #16]
 800b7ec:	9b05      	ldr	r3, [sp, #20]
 800b7ee:	3301      	adds	r3, #1
 800b7f0:	9305      	str	r3, [sp, #20]
 800b7f2:	f04f 0801 	mov.w	r8, #1
 800b7f6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 800b7f8:	2b00      	cmp	r3, #0
 800b7fa:	f47f af6a 	bne.w	800b6d2 <_dtoa_r+0x7ca>
 800b7fe:	2001      	movs	r0, #1
 800b800:	e76f      	b.n	800b6e2 <_dtoa_r+0x7da>
 800b802:	f04f 0800 	mov.w	r8, #0
 800b806:	e7f6      	b.n	800b7f6 <_dtoa_r+0x8ee>
 800b808:	4698      	mov	r8, r3
 800b80a:	e7f4      	b.n	800b7f6 <_dtoa_r+0x8ee>
 800b80c:	f43f af7d 	beq.w	800b70a <_dtoa_r+0x802>
 800b810:	4618      	mov	r0, r3
 800b812:	301c      	adds	r0, #28
 800b814:	e772      	b.n	800b6fc <_dtoa_r+0x7f4>
 800b816:	9b03      	ldr	r3, [sp, #12]
 800b818:	2b00      	cmp	r3, #0
 800b81a:	dc37      	bgt.n	800b88c <_dtoa_r+0x984>
 800b81c:	9b06      	ldr	r3, [sp, #24]
 800b81e:	2b02      	cmp	r3, #2
 800b820:	dd34      	ble.n	800b88c <_dtoa_r+0x984>
 800b822:	9b03      	ldr	r3, [sp, #12]
 800b824:	9302      	str	r3, [sp, #8]
 800b826:	9b02      	ldr	r3, [sp, #8]
 800b828:	b96b      	cbnz	r3, 800b846 <_dtoa_r+0x93e>
 800b82a:	4631      	mov	r1, r6
 800b82c:	2205      	movs	r2, #5
 800b82e:	4620      	mov	r0, r4
 800b830:	f000 fd68 	bl	800c304 <__multadd>
 800b834:	4601      	mov	r1, r0
 800b836:	4606      	mov	r6, r0
 800b838:	ee18 0a10 	vmov	r0, s16
 800b83c:	f000 ffcc 	bl	800c7d8 <__mcmp>
 800b840:	2800      	cmp	r0, #0
 800b842:	f73f adbb 	bgt.w	800b3bc <_dtoa_r+0x4b4>
 800b846:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800b848:	9d01      	ldr	r5, [sp, #4]
 800b84a:	43db      	mvns	r3, r3
 800b84c:	9300      	str	r3, [sp, #0]
 800b84e:	f04f 0800 	mov.w	r8, #0
 800b852:	4631      	mov	r1, r6
 800b854:	4620      	mov	r0, r4
 800b856:	f000 fd33 	bl	800c2c0 <_Bfree>
 800b85a:	2f00      	cmp	r7, #0
 800b85c:	f43f aea4 	beq.w	800b5a8 <_dtoa_r+0x6a0>
 800b860:	f1b8 0f00 	cmp.w	r8, #0
 800b864:	d005      	beq.n	800b872 <_dtoa_r+0x96a>
 800b866:	45b8      	cmp	r8, r7
 800b868:	d003      	beq.n	800b872 <_dtoa_r+0x96a>
 800b86a:	4641      	mov	r1, r8
 800b86c:	4620      	mov	r0, r4
 800b86e:	f000 fd27 	bl	800c2c0 <_Bfree>
 800b872:	4639      	mov	r1, r7
 800b874:	4620      	mov	r0, r4
 800b876:	f000 fd23 	bl	800c2c0 <_Bfree>
 800b87a:	e695      	b.n	800b5a8 <_dtoa_r+0x6a0>
 800b87c:	2600      	movs	r6, #0
 800b87e:	4637      	mov	r7, r6
 800b880:	e7e1      	b.n	800b846 <_dtoa_r+0x93e>
 800b882:	9700      	str	r7, [sp, #0]
 800b884:	4637      	mov	r7, r6
 800b886:	e599      	b.n	800b3bc <_dtoa_r+0x4b4>
 800b888:	40240000 	.word	0x40240000
 800b88c:	9b08      	ldr	r3, [sp, #32]
 800b88e:	2b00      	cmp	r3, #0
 800b890:	f000 80ca 	beq.w	800ba28 <_dtoa_r+0xb20>
 800b894:	9b03      	ldr	r3, [sp, #12]
 800b896:	9302      	str	r3, [sp, #8]
 800b898:	2d00      	cmp	r5, #0
 800b89a:	dd05      	ble.n	800b8a8 <_dtoa_r+0x9a0>
 800b89c:	4639      	mov	r1, r7
 800b89e:	462a      	mov	r2, r5
 800b8a0:	4620      	mov	r0, r4
 800b8a2:	f000 ff29 	bl	800c6f8 <__lshift>
 800b8a6:	4607      	mov	r7, r0
 800b8a8:	f1b8 0f00 	cmp.w	r8, #0
 800b8ac:	d05b      	beq.n	800b966 <_dtoa_r+0xa5e>
 800b8ae:	6879      	ldr	r1, [r7, #4]
 800b8b0:	4620      	mov	r0, r4
 800b8b2:	f000 fcc5 	bl	800c240 <_Balloc>
 800b8b6:	4605      	mov	r5, r0
 800b8b8:	b928      	cbnz	r0, 800b8c6 <_dtoa_r+0x9be>
 800b8ba:	4b87      	ldr	r3, [pc, #540]	; (800bad8 <_dtoa_r+0xbd0>)
 800b8bc:	4602      	mov	r2, r0
 800b8be:	f240 21ea 	movw	r1, #746	; 0x2ea
 800b8c2:	f7ff bb3b 	b.w	800af3c <_dtoa_r+0x34>
 800b8c6:	693a      	ldr	r2, [r7, #16]
 800b8c8:	3202      	adds	r2, #2
 800b8ca:	0092      	lsls	r2, r2, #2
 800b8cc:	f107 010c 	add.w	r1, r7, #12
 800b8d0:	300c      	adds	r0, #12
 800b8d2:	f000 fca7 	bl	800c224 <memcpy>
 800b8d6:	2201      	movs	r2, #1
 800b8d8:	4629      	mov	r1, r5
 800b8da:	4620      	mov	r0, r4
 800b8dc:	f000 ff0c 	bl	800c6f8 <__lshift>
 800b8e0:	9b01      	ldr	r3, [sp, #4]
 800b8e2:	f103 0901 	add.w	r9, r3, #1
 800b8e6:	e9dd 2301 	ldrd	r2, r3, [sp, #4]
 800b8ea:	4413      	add	r3, r2
 800b8ec:	9305      	str	r3, [sp, #20]
 800b8ee:	f00a 0301 	and.w	r3, sl, #1
 800b8f2:	46b8      	mov	r8, r7
 800b8f4:	9304      	str	r3, [sp, #16]
 800b8f6:	4607      	mov	r7, r0
 800b8f8:	4631      	mov	r1, r6
 800b8fa:	ee18 0a10 	vmov	r0, s16
 800b8fe:	f7ff fa77 	bl	800adf0 <quorem>
 800b902:	4641      	mov	r1, r8
 800b904:	9002      	str	r0, [sp, #8]
 800b906:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800b90a:	ee18 0a10 	vmov	r0, s16
 800b90e:	f000 ff63 	bl	800c7d8 <__mcmp>
 800b912:	463a      	mov	r2, r7
 800b914:	9003      	str	r0, [sp, #12]
 800b916:	4631      	mov	r1, r6
 800b918:	4620      	mov	r0, r4
 800b91a:	f000 ff79 	bl	800c810 <__mdiff>
 800b91e:	68c2      	ldr	r2, [r0, #12]
 800b920:	f109 3bff 	add.w	fp, r9, #4294967295
 800b924:	4605      	mov	r5, r0
 800b926:	bb02      	cbnz	r2, 800b96a <_dtoa_r+0xa62>
 800b928:	4601      	mov	r1, r0
 800b92a:	ee18 0a10 	vmov	r0, s16
 800b92e:	f000 ff53 	bl	800c7d8 <__mcmp>
 800b932:	4602      	mov	r2, r0
 800b934:	4629      	mov	r1, r5
 800b936:	4620      	mov	r0, r4
 800b938:	9207      	str	r2, [sp, #28]
 800b93a:	f000 fcc1 	bl	800c2c0 <_Bfree>
 800b93e:	e9dd 3206 	ldrd	r3, r2, [sp, #24]
 800b942:	ea43 0102 	orr.w	r1, r3, r2
 800b946:	9b04      	ldr	r3, [sp, #16]
 800b948:	430b      	orrs	r3, r1
 800b94a:	464d      	mov	r5, r9
 800b94c:	d10f      	bne.n	800b96e <_dtoa_r+0xa66>
 800b94e:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b952:	d02a      	beq.n	800b9aa <_dtoa_r+0xaa2>
 800b954:	9b03      	ldr	r3, [sp, #12]
 800b956:	2b00      	cmp	r3, #0
 800b958:	dd02      	ble.n	800b960 <_dtoa_r+0xa58>
 800b95a:	9b02      	ldr	r3, [sp, #8]
 800b95c:	f103 0a31 	add.w	sl, r3, #49	; 0x31
 800b960:	f88b a000 	strb.w	sl, [fp]
 800b964:	e775      	b.n	800b852 <_dtoa_r+0x94a>
 800b966:	4638      	mov	r0, r7
 800b968:	e7ba      	b.n	800b8e0 <_dtoa_r+0x9d8>
 800b96a:	2201      	movs	r2, #1
 800b96c:	e7e2      	b.n	800b934 <_dtoa_r+0xa2c>
 800b96e:	9b03      	ldr	r3, [sp, #12]
 800b970:	2b00      	cmp	r3, #0
 800b972:	db04      	blt.n	800b97e <_dtoa_r+0xa76>
 800b974:	9906      	ldr	r1, [sp, #24]
 800b976:	430b      	orrs	r3, r1
 800b978:	9904      	ldr	r1, [sp, #16]
 800b97a:	430b      	orrs	r3, r1
 800b97c:	d122      	bne.n	800b9c4 <_dtoa_r+0xabc>
 800b97e:	2a00      	cmp	r2, #0
 800b980:	ddee      	ble.n	800b960 <_dtoa_r+0xa58>
 800b982:	ee18 1a10 	vmov	r1, s16
 800b986:	2201      	movs	r2, #1
 800b988:	4620      	mov	r0, r4
 800b98a:	f000 feb5 	bl	800c6f8 <__lshift>
 800b98e:	4631      	mov	r1, r6
 800b990:	ee08 0a10 	vmov	s16, r0
 800b994:	f000 ff20 	bl	800c7d8 <__mcmp>
 800b998:	2800      	cmp	r0, #0
 800b99a:	dc03      	bgt.n	800b9a4 <_dtoa_r+0xa9c>
 800b99c:	d1e0      	bne.n	800b960 <_dtoa_r+0xa58>
 800b99e:	f01a 0f01 	tst.w	sl, #1
 800b9a2:	d0dd      	beq.n	800b960 <_dtoa_r+0xa58>
 800b9a4:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9a8:	d1d7      	bne.n	800b95a <_dtoa_r+0xa52>
 800b9aa:	2339      	movs	r3, #57	; 0x39
 800b9ac:	f88b 3000 	strb.w	r3, [fp]
 800b9b0:	462b      	mov	r3, r5
 800b9b2:	461d      	mov	r5, r3
 800b9b4:	3b01      	subs	r3, #1
 800b9b6:	f815 2c01 	ldrb.w	r2, [r5, #-1]
 800b9ba:	2a39      	cmp	r2, #57	; 0x39
 800b9bc:	d071      	beq.n	800baa2 <_dtoa_r+0xb9a>
 800b9be:	3201      	adds	r2, #1
 800b9c0:	701a      	strb	r2, [r3, #0]
 800b9c2:	e746      	b.n	800b852 <_dtoa_r+0x94a>
 800b9c4:	2a00      	cmp	r2, #0
 800b9c6:	dd07      	ble.n	800b9d8 <_dtoa_r+0xad0>
 800b9c8:	f1ba 0f39 	cmp.w	sl, #57	; 0x39
 800b9cc:	d0ed      	beq.n	800b9aa <_dtoa_r+0xaa2>
 800b9ce:	f10a 0301 	add.w	r3, sl, #1
 800b9d2:	f88b 3000 	strb.w	r3, [fp]
 800b9d6:	e73c      	b.n	800b852 <_dtoa_r+0x94a>
 800b9d8:	9b05      	ldr	r3, [sp, #20]
 800b9da:	f809 ac01 	strb.w	sl, [r9, #-1]
 800b9de:	4599      	cmp	r9, r3
 800b9e0:	d047      	beq.n	800ba72 <_dtoa_r+0xb6a>
 800b9e2:	ee18 1a10 	vmov	r1, s16
 800b9e6:	2300      	movs	r3, #0
 800b9e8:	220a      	movs	r2, #10
 800b9ea:	4620      	mov	r0, r4
 800b9ec:	f000 fc8a 	bl	800c304 <__multadd>
 800b9f0:	45b8      	cmp	r8, r7
 800b9f2:	ee08 0a10 	vmov	s16, r0
 800b9f6:	f04f 0300 	mov.w	r3, #0
 800b9fa:	f04f 020a 	mov.w	r2, #10
 800b9fe:	4641      	mov	r1, r8
 800ba00:	4620      	mov	r0, r4
 800ba02:	d106      	bne.n	800ba12 <_dtoa_r+0xb0a>
 800ba04:	f000 fc7e 	bl	800c304 <__multadd>
 800ba08:	4680      	mov	r8, r0
 800ba0a:	4607      	mov	r7, r0
 800ba0c:	f109 0901 	add.w	r9, r9, #1
 800ba10:	e772      	b.n	800b8f8 <_dtoa_r+0x9f0>
 800ba12:	f000 fc77 	bl	800c304 <__multadd>
 800ba16:	4639      	mov	r1, r7
 800ba18:	4680      	mov	r8, r0
 800ba1a:	2300      	movs	r3, #0
 800ba1c:	220a      	movs	r2, #10
 800ba1e:	4620      	mov	r0, r4
 800ba20:	f000 fc70 	bl	800c304 <__multadd>
 800ba24:	4607      	mov	r7, r0
 800ba26:	e7f1      	b.n	800ba0c <_dtoa_r+0xb04>
 800ba28:	9b03      	ldr	r3, [sp, #12]
 800ba2a:	9302      	str	r3, [sp, #8]
 800ba2c:	9d01      	ldr	r5, [sp, #4]
 800ba2e:	ee18 0a10 	vmov	r0, s16
 800ba32:	4631      	mov	r1, r6
 800ba34:	f7ff f9dc 	bl	800adf0 <quorem>
 800ba38:	f100 0a30 	add.w	sl, r0, #48	; 0x30
 800ba3c:	9b01      	ldr	r3, [sp, #4]
 800ba3e:	f805 ab01 	strb.w	sl, [r5], #1
 800ba42:	1aea      	subs	r2, r5, r3
 800ba44:	9b02      	ldr	r3, [sp, #8]
 800ba46:	4293      	cmp	r3, r2
 800ba48:	dd09      	ble.n	800ba5e <_dtoa_r+0xb56>
 800ba4a:	ee18 1a10 	vmov	r1, s16
 800ba4e:	2300      	movs	r3, #0
 800ba50:	220a      	movs	r2, #10
 800ba52:	4620      	mov	r0, r4
 800ba54:	f000 fc56 	bl	800c304 <__multadd>
 800ba58:	ee08 0a10 	vmov	s16, r0
 800ba5c:	e7e7      	b.n	800ba2e <_dtoa_r+0xb26>
 800ba5e:	9b02      	ldr	r3, [sp, #8]
 800ba60:	2b00      	cmp	r3, #0
 800ba62:	bfc8      	it	gt
 800ba64:	461d      	movgt	r5, r3
 800ba66:	9b01      	ldr	r3, [sp, #4]
 800ba68:	bfd8      	it	le
 800ba6a:	2501      	movle	r5, #1
 800ba6c:	441d      	add	r5, r3
 800ba6e:	f04f 0800 	mov.w	r8, #0
 800ba72:	ee18 1a10 	vmov	r1, s16
 800ba76:	2201      	movs	r2, #1
 800ba78:	4620      	mov	r0, r4
 800ba7a:	f000 fe3d 	bl	800c6f8 <__lshift>
 800ba7e:	4631      	mov	r1, r6
 800ba80:	ee08 0a10 	vmov	s16, r0
 800ba84:	f000 fea8 	bl	800c7d8 <__mcmp>
 800ba88:	2800      	cmp	r0, #0
 800ba8a:	dc91      	bgt.n	800b9b0 <_dtoa_r+0xaa8>
 800ba8c:	d102      	bne.n	800ba94 <_dtoa_r+0xb8c>
 800ba8e:	f01a 0f01 	tst.w	sl, #1
 800ba92:	d18d      	bne.n	800b9b0 <_dtoa_r+0xaa8>
 800ba94:	462b      	mov	r3, r5
 800ba96:	461d      	mov	r5, r3
 800ba98:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800ba9c:	2a30      	cmp	r2, #48	; 0x30
 800ba9e:	d0fa      	beq.n	800ba96 <_dtoa_r+0xb8e>
 800baa0:	e6d7      	b.n	800b852 <_dtoa_r+0x94a>
 800baa2:	9a01      	ldr	r2, [sp, #4]
 800baa4:	429a      	cmp	r2, r3
 800baa6:	d184      	bne.n	800b9b2 <_dtoa_r+0xaaa>
 800baa8:	9b00      	ldr	r3, [sp, #0]
 800baaa:	3301      	adds	r3, #1
 800baac:	9300      	str	r3, [sp, #0]
 800baae:	2331      	movs	r3, #49	; 0x31
 800bab0:	7013      	strb	r3, [r2, #0]
 800bab2:	e6ce      	b.n	800b852 <_dtoa_r+0x94a>
 800bab4:	4b09      	ldr	r3, [pc, #36]	; (800badc <_dtoa_r+0xbd4>)
 800bab6:	f7ff ba95 	b.w	800afe4 <_dtoa_r+0xdc>
 800baba:	9b21      	ldr	r3, [sp, #132]	; 0x84
 800babc:	2b00      	cmp	r3, #0
 800babe:	f47f aa6e 	bne.w	800af9e <_dtoa_r+0x96>
 800bac2:	4b07      	ldr	r3, [pc, #28]	; (800bae0 <_dtoa_r+0xbd8>)
 800bac4:	f7ff ba8e 	b.w	800afe4 <_dtoa_r+0xdc>
 800bac8:	9b02      	ldr	r3, [sp, #8]
 800baca:	2b00      	cmp	r3, #0
 800bacc:	dcae      	bgt.n	800ba2c <_dtoa_r+0xb24>
 800bace:	9b06      	ldr	r3, [sp, #24]
 800bad0:	2b02      	cmp	r3, #2
 800bad2:	f73f aea8 	bgt.w	800b826 <_dtoa_r+0x91e>
 800bad6:	e7a9      	b.n	800ba2c <_dtoa_r+0xb24>
 800bad8:	0800e120 	.word	0x0800e120
 800badc:	0800df90 	.word	0x0800df90
 800bae0:	0800e0b8 	.word	0x0800e0b8

0800bae4 <fiprintf>:
 800bae4:	b40e      	push	{r1, r2, r3}
 800bae6:	b503      	push	{r0, r1, lr}
 800bae8:	4601      	mov	r1, r0
 800baea:	ab03      	add	r3, sp, #12
 800baec:	4805      	ldr	r0, [pc, #20]	; (800bb04 <fiprintf+0x20>)
 800baee:	f853 2b04 	ldr.w	r2, [r3], #4
 800baf2:	6800      	ldr	r0, [r0, #0]
 800baf4:	9301      	str	r3, [sp, #4]
 800baf6:	f001 fae1 	bl	800d0bc <_vfiprintf_r>
 800bafa:	b002      	add	sp, #8
 800bafc:	f85d eb04 	ldr.w	lr, [sp], #4
 800bb00:	b003      	add	sp, #12
 800bb02:	4770      	bx	lr
 800bb04:	2000001c 	.word	0x2000001c

0800bb08 <rshift>:
 800bb08:	6903      	ldr	r3, [r0, #16]
 800bb0a:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800bb0e:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800bb12:	ea4f 1261 	mov.w	r2, r1, asr #5
 800bb16:	f100 0414 	add.w	r4, r0, #20
 800bb1a:	dd45      	ble.n	800bba8 <rshift+0xa0>
 800bb1c:	f011 011f 	ands.w	r1, r1, #31
 800bb20:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800bb24:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800bb28:	d10c      	bne.n	800bb44 <rshift+0x3c>
 800bb2a:	f100 0710 	add.w	r7, r0, #16
 800bb2e:	4629      	mov	r1, r5
 800bb30:	42b1      	cmp	r1, r6
 800bb32:	d334      	bcc.n	800bb9e <rshift+0x96>
 800bb34:	1a9b      	subs	r3, r3, r2
 800bb36:	009b      	lsls	r3, r3, #2
 800bb38:	1eea      	subs	r2, r5, #3
 800bb3a:	4296      	cmp	r6, r2
 800bb3c:	bf38      	it	cc
 800bb3e:	2300      	movcc	r3, #0
 800bb40:	4423      	add	r3, r4
 800bb42:	e015      	b.n	800bb70 <rshift+0x68>
 800bb44:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800bb48:	f1c1 0820 	rsb	r8, r1, #32
 800bb4c:	40cf      	lsrs	r7, r1
 800bb4e:	f105 0e04 	add.w	lr, r5, #4
 800bb52:	46a1      	mov	r9, r4
 800bb54:	4576      	cmp	r6, lr
 800bb56:	46f4      	mov	ip, lr
 800bb58:	d815      	bhi.n	800bb86 <rshift+0x7e>
 800bb5a:	1a9a      	subs	r2, r3, r2
 800bb5c:	0092      	lsls	r2, r2, #2
 800bb5e:	3a04      	subs	r2, #4
 800bb60:	3501      	adds	r5, #1
 800bb62:	42ae      	cmp	r6, r5
 800bb64:	bf38      	it	cc
 800bb66:	2200      	movcc	r2, #0
 800bb68:	18a3      	adds	r3, r4, r2
 800bb6a:	50a7      	str	r7, [r4, r2]
 800bb6c:	b107      	cbz	r7, 800bb70 <rshift+0x68>
 800bb6e:	3304      	adds	r3, #4
 800bb70:	1b1a      	subs	r2, r3, r4
 800bb72:	42a3      	cmp	r3, r4
 800bb74:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800bb78:	bf08      	it	eq
 800bb7a:	2300      	moveq	r3, #0
 800bb7c:	6102      	str	r2, [r0, #16]
 800bb7e:	bf08      	it	eq
 800bb80:	6143      	streq	r3, [r0, #20]
 800bb82:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800bb86:	f8dc c000 	ldr.w	ip, [ip]
 800bb8a:	fa0c fc08 	lsl.w	ip, ip, r8
 800bb8e:	ea4c 0707 	orr.w	r7, ip, r7
 800bb92:	f849 7b04 	str.w	r7, [r9], #4
 800bb96:	f85e 7b04 	ldr.w	r7, [lr], #4
 800bb9a:	40cf      	lsrs	r7, r1
 800bb9c:	e7da      	b.n	800bb54 <rshift+0x4c>
 800bb9e:	f851 cb04 	ldr.w	ip, [r1], #4
 800bba2:	f847 cf04 	str.w	ip, [r7, #4]!
 800bba6:	e7c3      	b.n	800bb30 <rshift+0x28>
 800bba8:	4623      	mov	r3, r4
 800bbaa:	e7e1      	b.n	800bb70 <rshift+0x68>

0800bbac <__hexdig_fun>:
 800bbac:	f1a0 0330 	sub.w	r3, r0, #48	; 0x30
 800bbb0:	2b09      	cmp	r3, #9
 800bbb2:	d802      	bhi.n	800bbba <__hexdig_fun+0xe>
 800bbb4:	3820      	subs	r0, #32
 800bbb6:	b2c0      	uxtb	r0, r0
 800bbb8:	4770      	bx	lr
 800bbba:	f1a0 0361 	sub.w	r3, r0, #97	; 0x61
 800bbbe:	2b05      	cmp	r3, #5
 800bbc0:	d801      	bhi.n	800bbc6 <__hexdig_fun+0x1a>
 800bbc2:	3847      	subs	r0, #71	; 0x47
 800bbc4:	e7f7      	b.n	800bbb6 <__hexdig_fun+0xa>
 800bbc6:	f1a0 0341 	sub.w	r3, r0, #65	; 0x41
 800bbca:	2b05      	cmp	r3, #5
 800bbcc:	d801      	bhi.n	800bbd2 <__hexdig_fun+0x26>
 800bbce:	3827      	subs	r0, #39	; 0x27
 800bbd0:	e7f1      	b.n	800bbb6 <__hexdig_fun+0xa>
 800bbd2:	2000      	movs	r0, #0
 800bbd4:	4770      	bx	lr
	...

0800bbd8 <__gethex>:
 800bbd8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800bbdc:	ed2d 8b02 	vpush	{d8}
 800bbe0:	b089      	sub	sp, #36	; 0x24
 800bbe2:	ee08 0a10 	vmov	s16, r0
 800bbe6:	9304      	str	r3, [sp, #16]
 800bbe8:	4bb4      	ldr	r3, [pc, #720]	; (800bebc <__gethex+0x2e4>)
 800bbea:	681b      	ldr	r3, [r3, #0]
 800bbec:	9301      	str	r3, [sp, #4]
 800bbee:	4618      	mov	r0, r3
 800bbf0:	468b      	mov	fp, r1
 800bbf2:	4690      	mov	r8, r2
 800bbf4:	f7f4 faec 	bl	80001d0 <strlen>
 800bbf8:	9b01      	ldr	r3, [sp, #4]
 800bbfa:	f8db 2000 	ldr.w	r2, [fp]
 800bbfe:	4403      	add	r3, r0
 800bc00:	4682      	mov	sl, r0
 800bc02:	f813 3c01 	ldrb.w	r3, [r3, #-1]
 800bc06:	9305      	str	r3, [sp, #20]
 800bc08:	1c93      	adds	r3, r2, #2
 800bc0a:	f1c2 22ff 	rsb	r2, r2, #4278255360	; 0xff00ff00
 800bc0e:	f502 027f 	add.w	r2, r2, #16711680	; 0xff0000
 800bc12:	32fe      	adds	r2, #254	; 0xfe
 800bc14:	18d1      	adds	r1, r2, r3
 800bc16:	461f      	mov	r7, r3
 800bc18:	f813 0b01 	ldrb.w	r0, [r3], #1
 800bc1c:	9100      	str	r1, [sp, #0]
 800bc1e:	2830      	cmp	r0, #48	; 0x30
 800bc20:	d0f8      	beq.n	800bc14 <__gethex+0x3c>
 800bc22:	f7ff ffc3 	bl	800bbac <__hexdig_fun>
 800bc26:	4604      	mov	r4, r0
 800bc28:	2800      	cmp	r0, #0
 800bc2a:	d13a      	bne.n	800bca2 <__gethex+0xca>
 800bc2c:	9901      	ldr	r1, [sp, #4]
 800bc2e:	4652      	mov	r2, sl
 800bc30:	4638      	mov	r0, r7
 800bc32:	f001 fb8d 	bl	800d350 <strncmp>
 800bc36:	4605      	mov	r5, r0
 800bc38:	2800      	cmp	r0, #0
 800bc3a:	d168      	bne.n	800bd0e <__gethex+0x136>
 800bc3c:	f817 000a 	ldrb.w	r0, [r7, sl]
 800bc40:	eb07 060a 	add.w	r6, r7, sl
 800bc44:	f7ff ffb2 	bl	800bbac <__hexdig_fun>
 800bc48:	2800      	cmp	r0, #0
 800bc4a:	d062      	beq.n	800bd12 <__gethex+0x13a>
 800bc4c:	4633      	mov	r3, r6
 800bc4e:	7818      	ldrb	r0, [r3, #0]
 800bc50:	2830      	cmp	r0, #48	; 0x30
 800bc52:	461f      	mov	r7, r3
 800bc54:	f103 0301 	add.w	r3, r3, #1
 800bc58:	d0f9      	beq.n	800bc4e <__gethex+0x76>
 800bc5a:	f7ff ffa7 	bl	800bbac <__hexdig_fun>
 800bc5e:	2301      	movs	r3, #1
 800bc60:	fab0 f480 	clz	r4, r0
 800bc64:	0964      	lsrs	r4, r4, #5
 800bc66:	4635      	mov	r5, r6
 800bc68:	9300      	str	r3, [sp, #0]
 800bc6a:	463a      	mov	r2, r7
 800bc6c:	4616      	mov	r6, r2
 800bc6e:	3201      	adds	r2, #1
 800bc70:	7830      	ldrb	r0, [r6, #0]
 800bc72:	f7ff ff9b 	bl	800bbac <__hexdig_fun>
 800bc76:	2800      	cmp	r0, #0
 800bc78:	d1f8      	bne.n	800bc6c <__gethex+0x94>
 800bc7a:	9901      	ldr	r1, [sp, #4]
 800bc7c:	4652      	mov	r2, sl
 800bc7e:	4630      	mov	r0, r6
 800bc80:	f001 fb66 	bl	800d350 <strncmp>
 800bc84:	b980      	cbnz	r0, 800bca8 <__gethex+0xd0>
 800bc86:	b94d      	cbnz	r5, 800bc9c <__gethex+0xc4>
 800bc88:	eb06 050a 	add.w	r5, r6, sl
 800bc8c:	462a      	mov	r2, r5
 800bc8e:	4616      	mov	r6, r2
 800bc90:	3201      	adds	r2, #1
 800bc92:	7830      	ldrb	r0, [r6, #0]
 800bc94:	f7ff ff8a 	bl	800bbac <__hexdig_fun>
 800bc98:	2800      	cmp	r0, #0
 800bc9a:	d1f8      	bne.n	800bc8e <__gethex+0xb6>
 800bc9c:	1bad      	subs	r5, r5, r6
 800bc9e:	00ad      	lsls	r5, r5, #2
 800bca0:	e004      	b.n	800bcac <__gethex+0xd4>
 800bca2:	2400      	movs	r4, #0
 800bca4:	4625      	mov	r5, r4
 800bca6:	e7e0      	b.n	800bc6a <__gethex+0x92>
 800bca8:	2d00      	cmp	r5, #0
 800bcaa:	d1f7      	bne.n	800bc9c <__gethex+0xc4>
 800bcac:	7833      	ldrb	r3, [r6, #0]
 800bcae:	f003 03df 	and.w	r3, r3, #223	; 0xdf
 800bcb2:	2b50      	cmp	r3, #80	; 0x50
 800bcb4:	d13b      	bne.n	800bd2e <__gethex+0x156>
 800bcb6:	7873      	ldrb	r3, [r6, #1]
 800bcb8:	2b2b      	cmp	r3, #43	; 0x2b
 800bcba:	d02c      	beq.n	800bd16 <__gethex+0x13e>
 800bcbc:	2b2d      	cmp	r3, #45	; 0x2d
 800bcbe:	d02e      	beq.n	800bd1e <__gethex+0x146>
 800bcc0:	1c71      	adds	r1, r6, #1
 800bcc2:	f04f 0900 	mov.w	r9, #0
 800bcc6:	7808      	ldrb	r0, [r1, #0]
 800bcc8:	f7ff ff70 	bl	800bbac <__hexdig_fun>
 800bccc:	1e43      	subs	r3, r0, #1
 800bcce:	b2db      	uxtb	r3, r3
 800bcd0:	2b18      	cmp	r3, #24
 800bcd2:	d82c      	bhi.n	800bd2e <__gethex+0x156>
 800bcd4:	f1a0 0210 	sub.w	r2, r0, #16
 800bcd8:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800bcdc:	f7ff ff66 	bl	800bbac <__hexdig_fun>
 800bce0:	1e43      	subs	r3, r0, #1
 800bce2:	b2db      	uxtb	r3, r3
 800bce4:	2b18      	cmp	r3, #24
 800bce6:	d91d      	bls.n	800bd24 <__gethex+0x14c>
 800bce8:	f1b9 0f00 	cmp.w	r9, #0
 800bcec:	d000      	beq.n	800bcf0 <__gethex+0x118>
 800bcee:	4252      	negs	r2, r2
 800bcf0:	4415      	add	r5, r2
 800bcf2:	f8cb 1000 	str.w	r1, [fp]
 800bcf6:	b1e4      	cbz	r4, 800bd32 <__gethex+0x15a>
 800bcf8:	9b00      	ldr	r3, [sp, #0]
 800bcfa:	2b00      	cmp	r3, #0
 800bcfc:	bf14      	ite	ne
 800bcfe:	2700      	movne	r7, #0
 800bd00:	2706      	moveq	r7, #6
 800bd02:	4638      	mov	r0, r7
 800bd04:	b009      	add	sp, #36	; 0x24
 800bd06:	ecbd 8b02 	vpop	{d8}
 800bd0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800bd0e:	463e      	mov	r6, r7
 800bd10:	4625      	mov	r5, r4
 800bd12:	2401      	movs	r4, #1
 800bd14:	e7ca      	b.n	800bcac <__gethex+0xd4>
 800bd16:	f04f 0900 	mov.w	r9, #0
 800bd1a:	1cb1      	adds	r1, r6, #2
 800bd1c:	e7d3      	b.n	800bcc6 <__gethex+0xee>
 800bd1e:	f04f 0901 	mov.w	r9, #1
 800bd22:	e7fa      	b.n	800bd1a <__gethex+0x142>
 800bd24:	230a      	movs	r3, #10
 800bd26:	fb03 0202 	mla	r2, r3, r2, r0
 800bd2a:	3a10      	subs	r2, #16
 800bd2c:	e7d4      	b.n	800bcd8 <__gethex+0x100>
 800bd2e:	4631      	mov	r1, r6
 800bd30:	e7df      	b.n	800bcf2 <__gethex+0x11a>
 800bd32:	1bf3      	subs	r3, r6, r7
 800bd34:	3b01      	subs	r3, #1
 800bd36:	4621      	mov	r1, r4
 800bd38:	2b07      	cmp	r3, #7
 800bd3a:	dc0b      	bgt.n	800bd54 <__gethex+0x17c>
 800bd3c:	ee18 0a10 	vmov	r0, s16
 800bd40:	f000 fa7e 	bl	800c240 <_Balloc>
 800bd44:	4604      	mov	r4, r0
 800bd46:	b940      	cbnz	r0, 800bd5a <__gethex+0x182>
 800bd48:	4b5d      	ldr	r3, [pc, #372]	; (800bec0 <__gethex+0x2e8>)
 800bd4a:	4602      	mov	r2, r0
 800bd4c:	21de      	movs	r1, #222	; 0xde
 800bd4e:	485d      	ldr	r0, [pc, #372]	; (800bec4 <__gethex+0x2ec>)
 800bd50:	f7ff f830 	bl	800adb4 <__assert_func>
 800bd54:	3101      	adds	r1, #1
 800bd56:	105b      	asrs	r3, r3, #1
 800bd58:	e7ee      	b.n	800bd38 <__gethex+0x160>
 800bd5a:	f100 0914 	add.w	r9, r0, #20
 800bd5e:	f04f 0b00 	mov.w	fp, #0
 800bd62:	f1ca 0301 	rsb	r3, sl, #1
 800bd66:	f8cd 9008 	str.w	r9, [sp, #8]
 800bd6a:	f8cd b000 	str.w	fp, [sp]
 800bd6e:	9306      	str	r3, [sp, #24]
 800bd70:	42b7      	cmp	r7, r6
 800bd72:	d340      	bcc.n	800bdf6 <__gethex+0x21e>
 800bd74:	9802      	ldr	r0, [sp, #8]
 800bd76:	9b00      	ldr	r3, [sp, #0]
 800bd78:	f840 3b04 	str.w	r3, [r0], #4
 800bd7c:	eba0 0009 	sub.w	r0, r0, r9
 800bd80:	1080      	asrs	r0, r0, #2
 800bd82:	0146      	lsls	r6, r0, #5
 800bd84:	6120      	str	r0, [r4, #16]
 800bd86:	4618      	mov	r0, r3
 800bd88:	f000 fb4c 	bl	800c424 <__hi0bits>
 800bd8c:	1a30      	subs	r0, r6, r0
 800bd8e:	f8d8 6000 	ldr.w	r6, [r8]
 800bd92:	42b0      	cmp	r0, r6
 800bd94:	dd63      	ble.n	800be5e <__gethex+0x286>
 800bd96:	1b87      	subs	r7, r0, r6
 800bd98:	4639      	mov	r1, r7
 800bd9a:	4620      	mov	r0, r4
 800bd9c:	f000 fef0 	bl	800cb80 <__any_on>
 800bda0:	4682      	mov	sl, r0
 800bda2:	b1a8      	cbz	r0, 800bdd0 <__gethex+0x1f8>
 800bda4:	1e7b      	subs	r3, r7, #1
 800bda6:	1159      	asrs	r1, r3, #5
 800bda8:	f003 021f 	and.w	r2, r3, #31
 800bdac:	f859 1021 	ldr.w	r1, [r9, r1, lsl #2]
 800bdb0:	f04f 0a01 	mov.w	sl, #1
 800bdb4:	fa0a f202 	lsl.w	r2, sl, r2
 800bdb8:	420a      	tst	r2, r1
 800bdba:	d009      	beq.n	800bdd0 <__gethex+0x1f8>
 800bdbc:	4553      	cmp	r3, sl
 800bdbe:	dd05      	ble.n	800bdcc <__gethex+0x1f4>
 800bdc0:	1eb9      	subs	r1, r7, #2
 800bdc2:	4620      	mov	r0, r4
 800bdc4:	f000 fedc 	bl	800cb80 <__any_on>
 800bdc8:	2800      	cmp	r0, #0
 800bdca:	d145      	bne.n	800be58 <__gethex+0x280>
 800bdcc:	f04f 0a02 	mov.w	sl, #2
 800bdd0:	4639      	mov	r1, r7
 800bdd2:	4620      	mov	r0, r4
 800bdd4:	f7ff fe98 	bl	800bb08 <rshift>
 800bdd8:	443d      	add	r5, r7
 800bdda:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800bdde:	42ab      	cmp	r3, r5
 800bde0:	da4c      	bge.n	800be7c <__gethex+0x2a4>
 800bde2:	ee18 0a10 	vmov	r0, s16
 800bde6:	4621      	mov	r1, r4
 800bde8:	f000 fa6a 	bl	800c2c0 <_Bfree>
 800bdec:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bdee:	2300      	movs	r3, #0
 800bdf0:	6013      	str	r3, [r2, #0]
 800bdf2:	27a3      	movs	r7, #163	; 0xa3
 800bdf4:	e785      	b.n	800bd02 <__gethex+0x12a>
 800bdf6:	1e73      	subs	r3, r6, #1
 800bdf8:	9a05      	ldr	r2, [sp, #20]
 800bdfa:	9303      	str	r3, [sp, #12]
 800bdfc:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 800be00:	4293      	cmp	r3, r2
 800be02:	d019      	beq.n	800be38 <__gethex+0x260>
 800be04:	f1bb 0f20 	cmp.w	fp, #32
 800be08:	d107      	bne.n	800be1a <__gethex+0x242>
 800be0a:	9b02      	ldr	r3, [sp, #8]
 800be0c:	9a00      	ldr	r2, [sp, #0]
 800be0e:	f843 2b04 	str.w	r2, [r3], #4
 800be12:	9302      	str	r3, [sp, #8]
 800be14:	2300      	movs	r3, #0
 800be16:	9300      	str	r3, [sp, #0]
 800be18:	469b      	mov	fp, r3
 800be1a:	f816 0c01 	ldrb.w	r0, [r6, #-1]
 800be1e:	f7ff fec5 	bl	800bbac <__hexdig_fun>
 800be22:	9b00      	ldr	r3, [sp, #0]
 800be24:	f000 000f 	and.w	r0, r0, #15
 800be28:	fa00 f00b 	lsl.w	r0, r0, fp
 800be2c:	4303      	orrs	r3, r0
 800be2e:	9300      	str	r3, [sp, #0]
 800be30:	f10b 0b04 	add.w	fp, fp, #4
 800be34:	9b03      	ldr	r3, [sp, #12]
 800be36:	e00d      	b.n	800be54 <__gethex+0x27c>
 800be38:	9b03      	ldr	r3, [sp, #12]
 800be3a:	9a06      	ldr	r2, [sp, #24]
 800be3c:	4413      	add	r3, r2
 800be3e:	42bb      	cmp	r3, r7
 800be40:	d3e0      	bcc.n	800be04 <__gethex+0x22c>
 800be42:	4618      	mov	r0, r3
 800be44:	9901      	ldr	r1, [sp, #4]
 800be46:	9307      	str	r3, [sp, #28]
 800be48:	4652      	mov	r2, sl
 800be4a:	f001 fa81 	bl	800d350 <strncmp>
 800be4e:	9b07      	ldr	r3, [sp, #28]
 800be50:	2800      	cmp	r0, #0
 800be52:	d1d7      	bne.n	800be04 <__gethex+0x22c>
 800be54:	461e      	mov	r6, r3
 800be56:	e78b      	b.n	800bd70 <__gethex+0x198>
 800be58:	f04f 0a03 	mov.w	sl, #3
 800be5c:	e7b8      	b.n	800bdd0 <__gethex+0x1f8>
 800be5e:	da0a      	bge.n	800be76 <__gethex+0x29e>
 800be60:	1a37      	subs	r7, r6, r0
 800be62:	4621      	mov	r1, r4
 800be64:	ee18 0a10 	vmov	r0, s16
 800be68:	463a      	mov	r2, r7
 800be6a:	f000 fc45 	bl	800c6f8 <__lshift>
 800be6e:	1bed      	subs	r5, r5, r7
 800be70:	4604      	mov	r4, r0
 800be72:	f100 0914 	add.w	r9, r0, #20
 800be76:	f04f 0a00 	mov.w	sl, #0
 800be7a:	e7ae      	b.n	800bdda <__gethex+0x202>
 800be7c:	f8d8 0004 	ldr.w	r0, [r8, #4]
 800be80:	42a8      	cmp	r0, r5
 800be82:	dd72      	ble.n	800bf6a <__gethex+0x392>
 800be84:	1b45      	subs	r5, r0, r5
 800be86:	42ae      	cmp	r6, r5
 800be88:	dc36      	bgt.n	800bef8 <__gethex+0x320>
 800be8a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800be8e:	2b02      	cmp	r3, #2
 800be90:	d02a      	beq.n	800bee8 <__gethex+0x310>
 800be92:	2b03      	cmp	r3, #3
 800be94:	d02c      	beq.n	800bef0 <__gethex+0x318>
 800be96:	2b01      	cmp	r3, #1
 800be98:	d11c      	bne.n	800bed4 <__gethex+0x2fc>
 800be9a:	42ae      	cmp	r6, r5
 800be9c:	d11a      	bne.n	800bed4 <__gethex+0x2fc>
 800be9e:	2e01      	cmp	r6, #1
 800bea0:	d112      	bne.n	800bec8 <__gethex+0x2f0>
 800bea2:	9a04      	ldr	r2, [sp, #16]
 800bea4:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800bea8:	6013      	str	r3, [r2, #0]
 800beaa:	2301      	movs	r3, #1
 800beac:	6123      	str	r3, [r4, #16]
 800beae:	f8c9 3000 	str.w	r3, [r9]
 800beb2:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800beb4:	2762      	movs	r7, #98	; 0x62
 800beb6:	601c      	str	r4, [r3, #0]
 800beb8:	e723      	b.n	800bd02 <__gethex+0x12a>
 800beba:	bf00      	nop
 800bebc:	0800e198 	.word	0x0800e198
 800bec0:	0800e120 	.word	0x0800e120
 800bec4:	0800e131 	.word	0x0800e131
 800bec8:	1e71      	subs	r1, r6, #1
 800beca:	4620      	mov	r0, r4
 800becc:	f000 fe58 	bl	800cb80 <__any_on>
 800bed0:	2800      	cmp	r0, #0
 800bed2:	d1e6      	bne.n	800bea2 <__gethex+0x2ca>
 800bed4:	ee18 0a10 	vmov	r0, s16
 800bed8:	4621      	mov	r1, r4
 800beda:	f000 f9f1 	bl	800c2c0 <_Bfree>
 800bede:	9a14      	ldr	r2, [sp, #80]	; 0x50
 800bee0:	2300      	movs	r3, #0
 800bee2:	6013      	str	r3, [r2, #0]
 800bee4:	2750      	movs	r7, #80	; 0x50
 800bee6:	e70c      	b.n	800bd02 <__gethex+0x12a>
 800bee8:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800beea:	2b00      	cmp	r3, #0
 800beec:	d1f2      	bne.n	800bed4 <__gethex+0x2fc>
 800beee:	e7d8      	b.n	800bea2 <__gethex+0x2ca>
 800bef0:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bef2:	2b00      	cmp	r3, #0
 800bef4:	d1d5      	bne.n	800bea2 <__gethex+0x2ca>
 800bef6:	e7ed      	b.n	800bed4 <__gethex+0x2fc>
 800bef8:	1e6f      	subs	r7, r5, #1
 800befa:	f1ba 0f00 	cmp.w	sl, #0
 800befe:	d131      	bne.n	800bf64 <__gethex+0x38c>
 800bf00:	b127      	cbz	r7, 800bf0c <__gethex+0x334>
 800bf02:	4639      	mov	r1, r7
 800bf04:	4620      	mov	r0, r4
 800bf06:	f000 fe3b 	bl	800cb80 <__any_on>
 800bf0a:	4682      	mov	sl, r0
 800bf0c:	117b      	asrs	r3, r7, #5
 800bf0e:	2101      	movs	r1, #1
 800bf10:	f859 3023 	ldr.w	r3, [r9, r3, lsl #2]
 800bf14:	f007 071f 	and.w	r7, r7, #31
 800bf18:	fa01 f707 	lsl.w	r7, r1, r7
 800bf1c:	421f      	tst	r7, r3
 800bf1e:	4629      	mov	r1, r5
 800bf20:	4620      	mov	r0, r4
 800bf22:	bf18      	it	ne
 800bf24:	f04a 0a02 	orrne.w	sl, sl, #2
 800bf28:	1b76      	subs	r6, r6, r5
 800bf2a:	f7ff fded 	bl	800bb08 <rshift>
 800bf2e:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800bf32:	2702      	movs	r7, #2
 800bf34:	f1ba 0f00 	cmp.w	sl, #0
 800bf38:	d048      	beq.n	800bfcc <__gethex+0x3f4>
 800bf3a:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800bf3e:	2b02      	cmp	r3, #2
 800bf40:	d015      	beq.n	800bf6e <__gethex+0x396>
 800bf42:	2b03      	cmp	r3, #3
 800bf44:	d017      	beq.n	800bf76 <__gethex+0x39e>
 800bf46:	2b01      	cmp	r3, #1
 800bf48:	d109      	bne.n	800bf5e <__gethex+0x386>
 800bf4a:	f01a 0f02 	tst.w	sl, #2
 800bf4e:	d006      	beq.n	800bf5e <__gethex+0x386>
 800bf50:	f8d9 0000 	ldr.w	r0, [r9]
 800bf54:	ea4a 0a00 	orr.w	sl, sl, r0
 800bf58:	f01a 0f01 	tst.w	sl, #1
 800bf5c:	d10e      	bne.n	800bf7c <__gethex+0x3a4>
 800bf5e:	f047 0710 	orr.w	r7, r7, #16
 800bf62:	e033      	b.n	800bfcc <__gethex+0x3f4>
 800bf64:	f04f 0a01 	mov.w	sl, #1
 800bf68:	e7d0      	b.n	800bf0c <__gethex+0x334>
 800bf6a:	2701      	movs	r7, #1
 800bf6c:	e7e2      	b.n	800bf34 <__gethex+0x35c>
 800bf6e:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf70:	f1c3 0301 	rsb	r3, r3, #1
 800bf74:	9315      	str	r3, [sp, #84]	; 0x54
 800bf76:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800bf78:	2b00      	cmp	r3, #0
 800bf7a:	d0f0      	beq.n	800bf5e <__gethex+0x386>
 800bf7c:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800bf80:	f104 0314 	add.w	r3, r4, #20
 800bf84:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800bf88:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800bf8c:	f04f 0c00 	mov.w	ip, #0
 800bf90:	4618      	mov	r0, r3
 800bf92:	f853 2b04 	ldr.w	r2, [r3], #4
 800bf96:	f1b2 3fff 	cmp.w	r2, #4294967295
 800bf9a:	d01c      	beq.n	800bfd6 <__gethex+0x3fe>
 800bf9c:	3201      	adds	r2, #1
 800bf9e:	6002      	str	r2, [r0, #0]
 800bfa0:	2f02      	cmp	r7, #2
 800bfa2:	f104 0314 	add.w	r3, r4, #20
 800bfa6:	d13f      	bne.n	800c028 <__gethex+0x450>
 800bfa8:	f8d8 2000 	ldr.w	r2, [r8]
 800bfac:	3a01      	subs	r2, #1
 800bfae:	42b2      	cmp	r2, r6
 800bfb0:	d10a      	bne.n	800bfc8 <__gethex+0x3f0>
 800bfb2:	1171      	asrs	r1, r6, #5
 800bfb4:	2201      	movs	r2, #1
 800bfb6:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800bfba:	f006 061f 	and.w	r6, r6, #31
 800bfbe:	fa02 f606 	lsl.w	r6, r2, r6
 800bfc2:	421e      	tst	r6, r3
 800bfc4:	bf18      	it	ne
 800bfc6:	4617      	movne	r7, r2
 800bfc8:	f047 0720 	orr.w	r7, r7, #32
 800bfcc:	9b14      	ldr	r3, [sp, #80]	; 0x50
 800bfce:	601c      	str	r4, [r3, #0]
 800bfd0:	9b04      	ldr	r3, [sp, #16]
 800bfd2:	601d      	str	r5, [r3, #0]
 800bfd4:	e695      	b.n	800bd02 <__gethex+0x12a>
 800bfd6:	4299      	cmp	r1, r3
 800bfd8:	f843 cc04 	str.w	ip, [r3, #-4]
 800bfdc:	d8d8      	bhi.n	800bf90 <__gethex+0x3b8>
 800bfde:	68a3      	ldr	r3, [r4, #8]
 800bfe0:	459b      	cmp	fp, r3
 800bfe2:	db19      	blt.n	800c018 <__gethex+0x440>
 800bfe4:	6861      	ldr	r1, [r4, #4]
 800bfe6:	ee18 0a10 	vmov	r0, s16
 800bfea:	3101      	adds	r1, #1
 800bfec:	f000 f928 	bl	800c240 <_Balloc>
 800bff0:	4681      	mov	r9, r0
 800bff2:	b918      	cbnz	r0, 800bffc <__gethex+0x424>
 800bff4:	4b1a      	ldr	r3, [pc, #104]	; (800c060 <__gethex+0x488>)
 800bff6:	4602      	mov	r2, r0
 800bff8:	2184      	movs	r1, #132	; 0x84
 800bffa:	e6a8      	b.n	800bd4e <__gethex+0x176>
 800bffc:	6922      	ldr	r2, [r4, #16]
 800bffe:	3202      	adds	r2, #2
 800c000:	f104 010c 	add.w	r1, r4, #12
 800c004:	0092      	lsls	r2, r2, #2
 800c006:	300c      	adds	r0, #12
 800c008:	f000 f90c 	bl	800c224 <memcpy>
 800c00c:	4621      	mov	r1, r4
 800c00e:	ee18 0a10 	vmov	r0, s16
 800c012:	f000 f955 	bl	800c2c0 <_Bfree>
 800c016:	464c      	mov	r4, r9
 800c018:	6923      	ldr	r3, [r4, #16]
 800c01a:	1c5a      	adds	r2, r3, #1
 800c01c:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800c020:	6122      	str	r2, [r4, #16]
 800c022:	2201      	movs	r2, #1
 800c024:	615a      	str	r2, [r3, #20]
 800c026:	e7bb      	b.n	800bfa0 <__gethex+0x3c8>
 800c028:	6922      	ldr	r2, [r4, #16]
 800c02a:	455a      	cmp	r2, fp
 800c02c:	dd0b      	ble.n	800c046 <__gethex+0x46e>
 800c02e:	2101      	movs	r1, #1
 800c030:	4620      	mov	r0, r4
 800c032:	f7ff fd69 	bl	800bb08 <rshift>
 800c036:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800c03a:	3501      	adds	r5, #1
 800c03c:	42ab      	cmp	r3, r5
 800c03e:	f6ff aed0 	blt.w	800bde2 <__gethex+0x20a>
 800c042:	2701      	movs	r7, #1
 800c044:	e7c0      	b.n	800bfc8 <__gethex+0x3f0>
 800c046:	f016 061f 	ands.w	r6, r6, #31
 800c04a:	d0fa      	beq.n	800c042 <__gethex+0x46a>
 800c04c:	4453      	add	r3, sl
 800c04e:	f1c6 0620 	rsb	r6, r6, #32
 800c052:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800c056:	f000 f9e5 	bl	800c424 <__hi0bits>
 800c05a:	42b0      	cmp	r0, r6
 800c05c:	dbe7      	blt.n	800c02e <__gethex+0x456>
 800c05e:	e7f0      	b.n	800c042 <__gethex+0x46a>
 800c060:	0800e120 	.word	0x0800e120

0800c064 <L_shift>:
 800c064:	f1c2 0208 	rsb	r2, r2, #8
 800c068:	0092      	lsls	r2, r2, #2
 800c06a:	b570      	push	{r4, r5, r6, lr}
 800c06c:	f1c2 0620 	rsb	r6, r2, #32
 800c070:	6843      	ldr	r3, [r0, #4]
 800c072:	6804      	ldr	r4, [r0, #0]
 800c074:	fa03 f506 	lsl.w	r5, r3, r6
 800c078:	432c      	orrs	r4, r5
 800c07a:	40d3      	lsrs	r3, r2
 800c07c:	6004      	str	r4, [r0, #0]
 800c07e:	f840 3f04 	str.w	r3, [r0, #4]!
 800c082:	4288      	cmp	r0, r1
 800c084:	d3f4      	bcc.n	800c070 <L_shift+0xc>
 800c086:	bd70      	pop	{r4, r5, r6, pc}

0800c088 <__match>:
 800c088:	b530      	push	{r4, r5, lr}
 800c08a:	6803      	ldr	r3, [r0, #0]
 800c08c:	3301      	adds	r3, #1
 800c08e:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c092:	b914      	cbnz	r4, 800c09a <__match+0x12>
 800c094:	6003      	str	r3, [r0, #0]
 800c096:	2001      	movs	r0, #1
 800c098:	bd30      	pop	{r4, r5, pc}
 800c09a:	f813 2b01 	ldrb.w	r2, [r3], #1
 800c09e:	f1a2 0541 	sub.w	r5, r2, #65	; 0x41
 800c0a2:	2d19      	cmp	r5, #25
 800c0a4:	bf98      	it	ls
 800c0a6:	3220      	addls	r2, #32
 800c0a8:	42a2      	cmp	r2, r4
 800c0aa:	d0f0      	beq.n	800c08e <__match+0x6>
 800c0ac:	2000      	movs	r0, #0
 800c0ae:	e7f3      	b.n	800c098 <__match+0x10>

0800c0b0 <__hexnan>:
 800c0b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c0b4:	680b      	ldr	r3, [r1, #0]
 800c0b6:	115e      	asrs	r6, r3, #5
 800c0b8:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800c0bc:	f013 031f 	ands.w	r3, r3, #31
 800c0c0:	b087      	sub	sp, #28
 800c0c2:	bf18      	it	ne
 800c0c4:	3604      	addne	r6, #4
 800c0c6:	2500      	movs	r5, #0
 800c0c8:	1f37      	subs	r7, r6, #4
 800c0ca:	4690      	mov	r8, r2
 800c0cc:	6802      	ldr	r2, [r0, #0]
 800c0ce:	9301      	str	r3, [sp, #4]
 800c0d0:	4682      	mov	sl, r0
 800c0d2:	f846 5c04 	str.w	r5, [r6, #-4]
 800c0d6:	46b9      	mov	r9, r7
 800c0d8:	463c      	mov	r4, r7
 800c0da:	9502      	str	r5, [sp, #8]
 800c0dc:	46ab      	mov	fp, r5
 800c0de:	7851      	ldrb	r1, [r2, #1]
 800c0e0:	1c53      	adds	r3, r2, #1
 800c0e2:	9303      	str	r3, [sp, #12]
 800c0e4:	b341      	cbz	r1, 800c138 <__hexnan+0x88>
 800c0e6:	4608      	mov	r0, r1
 800c0e8:	9205      	str	r2, [sp, #20]
 800c0ea:	9104      	str	r1, [sp, #16]
 800c0ec:	f7ff fd5e 	bl	800bbac <__hexdig_fun>
 800c0f0:	2800      	cmp	r0, #0
 800c0f2:	d14f      	bne.n	800c194 <__hexnan+0xe4>
 800c0f4:	9904      	ldr	r1, [sp, #16]
 800c0f6:	9a05      	ldr	r2, [sp, #20]
 800c0f8:	2920      	cmp	r1, #32
 800c0fa:	d818      	bhi.n	800c12e <__hexnan+0x7e>
 800c0fc:	9b02      	ldr	r3, [sp, #8]
 800c0fe:	459b      	cmp	fp, r3
 800c100:	dd13      	ble.n	800c12a <__hexnan+0x7a>
 800c102:	454c      	cmp	r4, r9
 800c104:	d206      	bcs.n	800c114 <__hexnan+0x64>
 800c106:	2d07      	cmp	r5, #7
 800c108:	dc04      	bgt.n	800c114 <__hexnan+0x64>
 800c10a:	462a      	mov	r2, r5
 800c10c:	4649      	mov	r1, r9
 800c10e:	4620      	mov	r0, r4
 800c110:	f7ff ffa8 	bl	800c064 <L_shift>
 800c114:	4544      	cmp	r4, r8
 800c116:	d950      	bls.n	800c1ba <__hexnan+0x10a>
 800c118:	2300      	movs	r3, #0
 800c11a:	f1a4 0904 	sub.w	r9, r4, #4
 800c11e:	f844 3c04 	str.w	r3, [r4, #-4]
 800c122:	f8cd b008 	str.w	fp, [sp, #8]
 800c126:	464c      	mov	r4, r9
 800c128:	461d      	mov	r5, r3
 800c12a:	9a03      	ldr	r2, [sp, #12]
 800c12c:	e7d7      	b.n	800c0de <__hexnan+0x2e>
 800c12e:	2929      	cmp	r1, #41	; 0x29
 800c130:	d156      	bne.n	800c1e0 <__hexnan+0x130>
 800c132:	3202      	adds	r2, #2
 800c134:	f8ca 2000 	str.w	r2, [sl]
 800c138:	f1bb 0f00 	cmp.w	fp, #0
 800c13c:	d050      	beq.n	800c1e0 <__hexnan+0x130>
 800c13e:	454c      	cmp	r4, r9
 800c140:	d206      	bcs.n	800c150 <__hexnan+0xa0>
 800c142:	2d07      	cmp	r5, #7
 800c144:	dc04      	bgt.n	800c150 <__hexnan+0xa0>
 800c146:	462a      	mov	r2, r5
 800c148:	4649      	mov	r1, r9
 800c14a:	4620      	mov	r0, r4
 800c14c:	f7ff ff8a 	bl	800c064 <L_shift>
 800c150:	4544      	cmp	r4, r8
 800c152:	d934      	bls.n	800c1be <__hexnan+0x10e>
 800c154:	f1a8 0204 	sub.w	r2, r8, #4
 800c158:	4623      	mov	r3, r4
 800c15a:	f853 1b04 	ldr.w	r1, [r3], #4
 800c15e:	f842 1f04 	str.w	r1, [r2, #4]!
 800c162:	429f      	cmp	r7, r3
 800c164:	d2f9      	bcs.n	800c15a <__hexnan+0xaa>
 800c166:	1b3b      	subs	r3, r7, r4
 800c168:	f023 0303 	bic.w	r3, r3, #3
 800c16c:	3304      	adds	r3, #4
 800c16e:	3401      	adds	r4, #1
 800c170:	3e03      	subs	r6, #3
 800c172:	42b4      	cmp	r4, r6
 800c174:	bf88      	it	hi
 800c176:	2304      	movhi	r3, #4
 800c178:	4443      	add	r3, r8
 800c17a:	2200      	movs	r2, #0
 800c17c:	f843 2b04 	str.w	r2, [r3], #4
 800c180:	429f      	cmp	r7, r3
 800c182:	d2fb      	bcs.n	800c17c <__hexnan+0xcc>
 800c184:	683b      	ldr	r3, [r7, #0]
 800c186:	b91b      	cbnz	r3, 800c190 <__hexnan+0xe0>
 800c188:	4547      	cmp	r7, r8
 800c18a:	d127      	bne.n	800c1dc <__hexnan+0x12c>
 800c18c:	2301      	movs	r3, #1
 800c18e:	603b      	str	r3, [r7, #0]
 800c190:	2005      	movs	r0, #5
 800c192:	e026      	b.n	800c1e2 <__hexnan+0x132>
 800c194:	3501      	adds	r5, #1
 800c196:	2d08      	cmp	r5, #8
 800c198:	f10b 0b01 	add.w	fp, fp, #1
 800c19c:	dd06      	ble.n	800c1ac <__hexnan+0xfc>
 800c19e:	4544      	cmp	r4, r8
 800c1a0:	d9c3      	bls.n	800c12a <__hexnan+0x7a>
 800c1a2:	2300      	movs	r3, #0
 800c1a4:	f844 3c04 	str.w	r3, [r4, #-4]
 800c1a8:	2501      	movs	r5, #1
 800c1aa:	3c04      	subs	r4, #4
 800c1ac:	6822      	ldr	r2, [r4, #0]
 800c1ae:	f000 000f 	and.w	r0, r0, #15
 800c1b2:	ea40 1202 	orr.w	r2, r0, r2, lsl #4
 800c1b6:	6022      	str	r2, [r4, #0]
 800c1b8:	e7b7      	b.n	800c12a <__hexnan+0x7a>
 800c1ba:	2508      	movs	r5, #8
 800c1bc:	e7b5      	b.n	800c12a <__hexnan+0x7a>
 800c1be:	9b01      	ldr	r3, [sp, #4]
 800c1c0:	2b00      	cmp	r3, #0
 800c1c2:	d0df      	beq.n	800c184 <__hexnan+0xd4>
 800c1c4:	f04f 32ff 	mov.w	r2, #4294967295
 800c1c8:	f1c3 0320 	rsb	r3, r3, #32
 800c1cc:	fa22 f303 	lsr.w	r3, r2, r3
 800c1d0:	f856 2c04 	ldr.w	r2, [r6, #-4]
 800c1d4:	401a      	ands	r2, r3
 800c1d6:	f846 2c04 	str.w	r2, [r6, #-4]
 800c1da:	e7d3      	b.n	800c184 <__hexnan+0xd4>
 800c1dc:	3f04      	subs	r7, #4
 800c1de:	e7d1      	b.n	800c184 <__hexnan+0xd4>
 800c1e0:	2004      	movs	r0, #4
 800c1e2:	b007      	add	sp, #28
 800c1e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800c1e8 <_localeconv_r>:
 800c1e8:	4800      	ldr	r0, [pc, #0]	; (800c1ec <_localeconv_r+0x4>)
 800c1ea:	4770      	bx	lr
 800c1ec:	20000174 	.word	0x20000174

0800c1f0 <malloc>:
 800c1f0:	4b02      	ldr	r3, [pc, #8]	; (800c1fc <malloc+0xc>)
 800c1f2:	4601      	mov	r1, r0
 800c1f4:	6818      	ldr	r0, [r3, #0]
 800c1f6:	f000 bd67 	b.w	800ccc8 <_malloc_r>
 800c1fa:	bf00      	nop
 800c1fc:	2000001c 	.word	0x2000001c

0800c200 <__ascii_mbtowc>:
 800c200:	b082      	sub	sp, #8
 800c202:	b901      	cbnz	r1, 800c206 <__ascii_mbtowc+0x6>
 800c204:	a901      	add	r1, sp, #4
 800c206:	b142      	cbz	r2, 800c21a <__ascii_mbtowc+0x1a>
 800c208:	b14b      	cbz	r3, 800c21e <__ascii_mbtowc+0x1e>
 800c20a:	7813      	ldrb	r3, [r2, #0]
 800c20c:	600b      	str	r3, [r1, #0]
 800c20e:	7812      	ldrb	r2, [r2, #0]
 800c210:	1e10      	subs	r0, r2, #0
 800c212:	bf18      	it	ne
 800c214:	2001      	movne	r0, #1
 800c216:	b002      	add	sp, #8
 800c218:	4770      	bx	lr
 800c21a:	4610      	mov	r0, r2
 800c21c:	e7fb      	b.n	800c216 <__ascii_mbtowc+0x16>
 800c21e:	f06f 0001 	mvn.w	r0, #1
 800c222:	e7f8      	b.n	800c216 <__ascii_mbtowc+0x16>

0800c224 <memcpy>:
 800c224:	440a      	add	r2, r1
 800c226:	4291      	cmp	r1, r2
 800c228:	f100 33ff 	add.w	r3, r0, #4294967295
 800c22c:	d100      	bne.n	800c230 <memcpy+0xc>
 800c22e:	4770      	bx	lr
 800c230:	b510      	push	{r4, lr}
 800c232:	f811 4b01 	ldrb.w	r4, [r1], #1
 800c236:	f803 4f01 	strb.w	r4, [r3, #1]!
 800c23a:	4291      	cmp	r1, r2
 800c23c:	d1f9      	bne.n	800c232 <memcpy+0xe>
 800c23e:	bd10      	pop	{r4, pc}

0800c240 <_Balloc>:
 800c240:	b570      	push	{r4, r5, r6, lr}
 800c242:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c244:	4604      	mov	r4, r0
 800c246:	460d      	mov	r5, r1
 800c248:	b976      	cbnz	r6, 800c268 <_Balloc+0x28>
 800c24a:	2010      	movs	r0, #16
 800c24c:	f7ff ffd0 	bl	800c1f0 <malloc>
 800c250:	4602      	mov	r2, r0
 800c252:	6260      	str	r0, [r4, #36]	; 0x24
 800c254:	b920      	cbnz	r0, 800c260 <_Balloc+0x20>
 800c256:	4b18      	ldr	r3, [pc, #96]	; (800c2b8 <_Balloc+0x78>)
 800c258:	4818      	ldr	r0, [pc, #96]	; (800c2bc <_Balloc+0x7c>)
 800c25a:	2166      	movs	r1, #102	; 0x66
 800c25c:	f7fe fdaa 	bl	800adb4 <__assert_func>
 800c260:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c264:	6006      	str	r6, [r0, #0]
 800c266:	60c6      	str	r6, [r0, #12]
 800c268:	6a66      	ldr	r6, [r4, #36]	; 0x24
 800c26a:	68f3      	ldr	r3, [r6, #12]
 800c26c:	b183      	cbz	r3, 800c290 <_Balloc+0x50>
 800c26e:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c270:	68db      	ldr	r3, [r3, #12]
 800c272:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800c276:	b9b8      	cbnz	r0, 800c2a8 <_Balloc+0x68>
 800c278:	2101      	movs	r1, #1
 800c27a:	fa01 f605 	lsl.w	r6, r1, r5
 800c27e:	1d72      	adds	r2, r6, #5
 800c280:	0092      	lsls	r2, r2, #2
 800c282:	4620      	mov	r0, r4
 800c284:	f000 fc9d 	bl	800cbc2 <_calloc_r>
 800c288:	b160      	cbz	r0, 800c2a4 <_Balloc+0x64>
 800c28a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800c28e:	e00e      	b.n	800c2ae <_Balloc+0x6e>
 800c290:	2221      	movs	r2, #33	; 0x21
 800c292:	2104      	movs	r1, #4
 800c294:	4620      	mov	r0, r4
 800c296:	f000 fc94 	bl	800cbc2 <_calloc_r>
 800c29a:	6a63      	ldr	r3, [r4, #36]	; 0x24
 800c29c:	60f0      	str	r0, [r6, #12]
 800c29e:	68db      	ldr	r3, [r3, #12]
 800c2a0:	2b00      	cmp	r3, #0
 800c2a2:	d1e4      	bne.n	800c26e <_Balloc+0x2e>
 800c2a4:	2000      	movs	r0, #0
 800c2a6:	bd70      	pop	{r4, r5, r6, pc}
 800c2a8:	6802      	ldr	r2, [r0, #0]
 800c2aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800c2ae:	2300      	movs	r3, #0
 800c2b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800c2b4:	e7f7      	b.n	800c2a6 <_Balloc+0x66>
 800c2b6:	bf00      	nop
 800c2b8:	0800e008 	.word	0x0800e008
 800c2bc:	0800e1ac 	.word	0x0800e1ac

0800c2c0 <_Bfree>:
 800c2c0:	b570      	push	{r4, r5, r6, lr}
 800c2c2:	6a46      	ldr	r6, [r0, #36]	; 0x24
 800c2c4:	4605      	mov	r5, r0
 800c2c6:	460c      	mov	r4, r1
 800c2c8:	b976      	cbnz	r6, 800c2e8 <_Bfree+0x28>
 800c2ca:	2010      	movs	r0, #16
 800c2cc:	f7ff ff90 	bl	800c1f0 <malloc>
 800c2d0:	4602      	mov	r2, r0
 800c2d2:	6268      	str	r0, [r5, #36]	; 0x24
 800c2d4:	b920      	cbnz	r0, 800c2e0 <_Bfree+0x20>
 800c2d6:	4b09      	ldr	r3, [pc, #36]	; (800c2fc <_Bfree+0x3c>)
 800c2d8:	4809      	ldr	r0, [pc, #36]	; (800c300 <_Bfree+0x40>)
 800c2da:	218a      	movs	r1, #138	; 0x8a
 800c2dc:	f7fe fd6a 	bl	800adb4 <__assert_func>
 800c2e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800c2e4:	6006      	str	r6, [r0, #0]
 800c2e6:	60c6      	str	r6, [r0, #12]
 800c2e8:	b13c      	cbz	r4, 800c2fa <_Bfree+0x3a>
 800c2ea:	6a6b      	ldr	r3, [r5, #36]	; 0x24
 800c2ec:	6862      	ldr	r2, [r4, #4]
 800c2ee:	68db      	ldr	r3, [r3, #12]
 800c2f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800c2f4:	6021      	str	r1, [r4, #0]
 800c2f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 800c2fa:	bd70      	pop	{r4, r5, r6, pc}
 800c2fc:	0800e008 	.word	0x0800e008
 800c300:	0800e1ac 	.word	0x0800e1ac

0800c304 <__multadd>:
 800c304:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800c308:	690d      	ldr	r5, [r1, #16]
 800c30a:	4607      	mov	r7, r0
 800c30c:	460c      	mov	r4, r1
 800c30e:	461e      	mov	r6, r3
 800c310:	f101 0c14 	add.w	ip, r1, #20
 800c314:	2000      	movs	r0, #0
 800c316:	f8dc 3000 	ldr.w	r3, [ip]
 800c31a:	b299      	uxth	r1, r3
 800c31c:	fb02 6101 	mla	r1, r2, r1, r6
 800c320:	0c1e      	lsrs	r6, r3, #16
 800c322:	0c0b      	lsrs	r3, r1, #16
 800c324:	fb02 3306 	mla	r3, r2, r6, r3
 800c328:	b289      	uxth	r1, r1
 800c32a:	3001      	adds	r0, #1
 800c32c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 800c330:	4285      	cmp	r5, r0
 800c332:	f84c 1b04 	str.w	r1, [ip], #4
 800c336:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800c33a:	dcec      	bgt.n	800c316 <__multadd+0x12>
 800c33c:	b30e      	cbz	r6, 800c382 <__multadd+0x7e>
 800c33e:	68a3      	ldr	r3, [r4, #8]
 800c340:	42ab      	cmp	r3, r5
 800c342:	dc19      	bgt.n	800c378 <__multadd+0x74>
 800c344:	6861      	ldr	r1, [r4, #4]
 800c346:	4638      	mov	r0, r7
 800c348:	3101      	adds	r1, #1
 800c34a:	f7ff ff79 	bl	800c240 <_Balloc>
 800c34e:	4680      	mov	r8, r0
 800c350:	b928      	cbnz	r0, 800c35e <__multadd+0x5a>
 800c352:	4602      	mov	r2, r0
 800c354:	4b0c      	ldr	r3, [pc, #48]	; (800c388 <__multadd+0x84>)
 800c356:	480d      	ldr	r0, [pc, #52]	; (800c38c <__multadd+0x88>)
 800c358:	21b5      	movs	r1, #181	; 0xb5
 800c35a:	f7fe fd2b 	bl	800adb4 <__assert_func>
 800c35e:	6922      	ldr	r2, [r4, #16]
 800c360:	3202      	adds	r2, #2
 800c362:	f104 010c 	add.w	r1, r4, #12
 800c366:	0092      	lsls	r2, r2, #2
 800c368:	300c      	adds	r0, #12
 800c36a:	f7ff ff5b 	bl	800c224 <memcpy>
 800c36e:	4621      	mov	r1, r4
 800c370:	4638      	mov	r0, r7
 800c372:	f7ff ffa5 	bl	800c2c0 <_Bfree>
 800c376:	4644      	mov	r4, r8
 800c378:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800c37c:	3501      	adds	r5, #1
 800c37e:	615e      	str	r6, [r3, #20]
 800c380:	6125      	str	r5, [r4, #16]
 800c382:	4620      	mov	r0, r4
 800c384:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800c388:	0800e120 	.word	0x0800e120
 800c38c:	0800e1ac 	.word	0x0800e1ac

0800c390 <__s2b>:
 800c390:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c394:	460c      	mov	r4, r1
 800c396:	4615      	mov	r5, r2
 800c398:	461f      	mov	r7, r3
 800c39a:	2209      	movs	r2, #9
 800c39c:	3308      	adds	r3, #8
 800c39e:	4606      	mov	r6, r0
 800c3a0:	fb93 f3f2 	sdiv	r3, r3, r2
 800c3a4:	2100      	movs	r1, #0
 800c3a6:	2201      	movs	r2, #1
 800c3a8:	429a      	cmp	r2, r3
 800c3aa:	db09      	blt.n	800c3c0 <__s2b+0x30>
 800c3ac:	4630      	mov	r0, r6
 800c3ae:	f7ff ff47 	bl	800c240 <_Balloc>
 800c3b2:	b940      	cbnz	r0, 800c3c6 <__s2b+0x36>
 800c3b4:	4602      	mov	r2, r0
 800c3b6:	4b19      	ldr	r3, [pc, #100]	; (800c41c <__s2b+0x8c>)
 800c3b8:	4819      	ldr	r0, [pc, #100]	; (800c420 <__s2b+0x90>)
 800c3ba:	21ce      	movs	r1, #206	; 0xce
 800c3bc:	f7fe fcfa 	bl	800adb4 <__assert_func>
 800c3c0:	0052      	lsls	r2, r2, #1
 800c3c2:	3101      	adds	r1, #1
 800c3c4:	e7f0      	b.n	800c3a8 <__s2b+0x18>
 800c3c6:	9b08      	ldr	r3, [sp, #32]
 800c3c8:	6143      	str	r3, [r0, #20]
 800c3ca:	2d09      	cmp	r5, #9
 800c3cc:	f04f 0301 	mov.w	r3, #1
 800c3d0:	6103      	str	r3, [r0, #16]
 800c3d2:	dd16      	ble.n	800c402 <__s2b+0x72>
 800c3d4:	f104 0909 	add.w	r9, r4, #9
 800c3d8:	46c8      	mov	r8, r9
 800c3da:	442c      	add	r4, r5
 800c3dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 800c3e0:	4601      	mov	r1, r0
 800c3e2:	3b30      	subs	r3, #48	; 0x30
 800c3e4:	220a      	movs	r2, #10
 800c3e6:	4630      	mov	r0, r6
 800c3e8:	f7ff ff8c 	bl	800c304 <__multadd>
 800c3ec:	45a0      	cmp	r8, r4
 800c3ee:	d1f5      	bne.n	800c3dc <__s2b+0x4c>
 800c3f0:	f1a5 0408 	sub.w	r4, r5, #8
 800c3f4:	444c      	add	r4, r9
 800c3f6:	1b2d      	subs	r5, r5, r4
 800c3f8:	1963      	adds	r3, r4, r5
 800c3fa:	42bb      	cmp	r3, r7
 800c3fc:	db04      	blt.n	800c408 <__s2b+0x78>
 800c3fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c402:	340a      	adds	r4, #10
 800c404:	2509      	movs	r5, #9
 800c406:	e7f6      	b.n	800c3f6 <__s2b+0x66>
 800c408:	f814 3b01 	ldrb.w	r3, [r4], #1
 800c40c:	4601      	mov	r1, r0
 800c40e:	3b30      	subs	r3, #48	; 0x30
 800c410:	220a      	movs	r2, #10
 800c412:	4630      	mov	r0, r6
 800c414:	f7ff ff76 	bl	800c304 <__multadd>
 800c418:	e7ee      	b.n	800c3f8 <__s2b+0x68>
 800c41a:	bf00      	nop
 800c41c:	0800e120 	.word	0x0800e120
 800c420:	0800e1ac 	.word	0x0800e1ac

0800c424 <__hi0bits>:
 800c424:	0c03      	lsrs	r3, r0, #16
 800c426:	041b      	lsls	r3, r3, #16
 800c428:	b9d3      	cbnz	r3, 800c460 <__hi0bits+0x3c>
 800c42a:	0400      	lsls	r0, r0, #16
 800c42c:	2310      	movs	r3, #16
 800c42e:	f010 4f7f 	tst.w	r0, #4278190080	; 0xff000000
 800c432:	bf04      	itt	eq
 800c434:	0200      	lsleq	r0, r0, #8
 800c436:	3308      	addeq	r3, #8
 800c438:	f010 4f70 	tst.w	r0, #4026531840	; 0xf0000000
 800c43c:	bf04      	itt	eq
 800c43e:	0100      	lsleq	r0, r0, #4
 800c440:	3304      	addeq	r3, #4
 800c442:	f010 4f40 	tst.w	r0, #3221225472	; 0xc0000000
 800c446:	bf04      	itt	eq
 800c448:	0080      	lsleq	r0, r0, #2
 800c44a:	3302      	addeq	r3, #2
 800c44c:	2800      	cmp	r0, #0
 800c44e:	db05      	blt.n	800c45c <__hi0bits+0x38>
 800c450:	f010 4f80 	tst.w	r0, #1073741824	; 0x40000000
 800c454:	f103 0301 	add.w	r3, r3, #1
 800c458:	bf08      	it	eq
 800c45a:	2320      	moveq	r3, #32
 800c45c:	4618      	mov	r0, r3
 800c45e:	4770      	bx	lr
 800c460:	2300      	movs	r3, #0
 800c462:	e7e4      	b.n	800c42e <__hi0bits+0xa>

0800c464 <__lo0bits>:
 800c464:	6803      	ldr	r3, [r0, #0]
 800c466:	f013 0207 	ands.w	r2, r3, #7
 800c46a:	4601      	mov	r1, r0
 800c46c:	d00b      	beq.n	800c486 <__lo0bits+0x22>
 800c46e:	07da      	lsls	r2, r3, #31
 800c470:	d423      	bmi.n	800c4ba <__lo0bits+0x56>
 800c472:	0798      	lsls	r0, r3, #30
 800c474:	bf49      	itett	mi
 800c476:	085b      	lsrmi	r3, r3, #1
 800c478:	089b      	lsrpl	r3, r3, #2
 800c47a:	2001      	movmi	r0, #1
 800c47c:	600b      	strmi	r3, [r1, #0]
 800c47e:	bf5c      	itt	pl
 800c480:	600b      	strpl	r3, [r1, #0]
 800c482:	2002      	movpl	r0, #2
 800c484:	4770      	bx	lr
 800c486:	b298      	uxth	r0, r3
 800c488:	b9a8      	cbnz	r0, 800c4b6 <__lo0bits+0x52>
 800c48a:	0c1b      	lsrs	r3, r3, #16
 800c48c:	2010      	movs	r0, #16
 800c48e:	b2da      	uxtb	r2, r3
 800c490:	b90a      	cbnz	r2, 800c496 <__lo0bits+0x32>
 800c492:	3008      	adds	r0, #8
 800c494:	0a1b      	lsrs	r3, r3, #8
 800c496:	071a      	lsls	r2, r3, #28
 800c498:	bf04      	itt	eq
 800c49a:	091b      	lsreq	r3, r3, #4
 800c49c:	3004      	addeq	r0, #4
 800c49e:	079a      	lsls	r2, r3, #30
 800c4a0:	bf04      	itt	eq
 800c4a2:	089b      	lsreq	r3, r3, #2
 800c4a4:	3002      	addeq	r0, #2
 800c4a6:	07da      	lsls	r2, r3, #31
 800c4a8:	d403      	bmi.n	800c4b2 <__lo0bits+0x4e>
 800c4aa:	085b      	lsrs	r3, r3, #1
 800c4ac:	f100 0001 	add.w	r0, r0, #1
 800c4b0:	d005      	beq.n	800c4be <__lo0bits+0x5a>
 800c4b2:	600b      	str	r3, [r1, #0]
 800c4b4:	4770      	bx	lr
 800c4b6:	4610      	mov	r0, r2
 800c4b8:	e7e9      	b.n	800c48e <__lo0bits+0x2a>
 800c4ba:	2000      	movs	r0, #0
 800c4bc:	4770      	bx	lr
 800c4be:	2020      	movs	r0, #32
 800c4c0:	4770      	bx	lr
	...

0800c4c4 <__i2b>:
 800c4c4:	b510      	push	{r4, lr}
 800c4c6:	460c      	mov	r4, r1
 800c4c8:	2101      	movs	r1, #1
 800c4ca:	f7ff feb9 	bl	800c240 <_Balloc>
 800c4ce:	4602      	mov	r2, r0
 800c4d0:	b928      	cbnz	r0, 800c4de <__i2b+0x1a>
 800c4d2:	4b05      	ldr	r3, [pc, #20]	; (800c4e8 <__i2b+0x24>)
 800c4d4:	4805      	ldr	r0, [pc, #20]	; (800c4ec <__i2b+0x28>)
 800c4d6:	f44f 71a0 	mov.w	r1, #320	; 0x140
 800c4da:	f7fe fc6b 	bl	800adb4 <__assert_func>
 800c4de:	2301      	movs	r3, #1
 800c4e0:	6144      	str	r4, [r0, #20]
 800c4e2:	6103      	str	r3, [r0, #16]
 800c4e4:	bd10      	pop	{r4, pc}
 800c4e6:	bf00      	nop
 800c4e8:	0800e120 	.word	0x0800e120
 800c4ec:	0800e1ac 	.word	0x0800e1ac

0800c4f0 <__multiply>:
 800c4f0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c4f4:	4691      	mov	r9, r2
 800c4f6:	690a      	ldr	r2, [r1, #16]
 800c4f8:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800c4fc:	429a      	cmp	r2, r3
 800c4fe:	bfb8      	it	lt
 800c500:	460b      	movlt	r3, r1
 800c502:	460c      	mov	r4, r1
 800c504:	bfbc      	itt	lt
 800c506:	464c      	movlt	r4, r9
 800c508:	4699      	movlt	r9, r3
 800c50a:	6927      	ldr	r7, [r4, #16]
 800c50c:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800c510:	68a3      	ldr	r3, [r4, #8]
 800c512:	6861      	ldr	r1, [r4, #4]
 800c514:	eb07 060a 	add.w	r6, r7, sl
 800c518:	42b3      	cmp	r3, r6
 800c51a:	b085      	sub	sp, #20
 800c51c:	bfb8      	it	lt
 800c51e:	3101      	addlt	r1, #1
 800c520:	f7ff fe8e 	bl	800c240 <_Balloc>
 800c524:	b930      	cbnz	r0, 800c534 <__multiply+0x44>
 800c526:	4602      	mov	r2, r0
 800c528:	4b44      	ldr	r3, [pc, #272]	; (800c63c <__multiply+0x14c>)
 800c52a:	4845      	ldr	r0, [pc, #276]	; (800c640 <__multiply+0x150>)
 800c52c:	f240 115d 	movw	r1, #349	; 0x15d
 800c530:	f7fe fc40 	bl	800adb4 <__assert_func>
 800c534:	f100 0514 	add.w	r5, r0, #20
 800c538:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 800c53c:	462b      	mov	r3, r5
 800c53e:	2200      	movs	r2, #0
 800c540:	4543      	cmp	r3, r8
 800c542:	d321      	bcc.n	800c588 <__multiply+0x98>
 800c544:	f104 0314 	add.w	r3, r4, #20
 800c548:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 800c54c:	f109 0314 	add.w	r3, r9, #20
 800c550:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800c554:	9202      	str	r2, [sp, #8]
 800c556:	1b3a      	subs	r2, r7, r4
 800c558:	3a15      	subs	r2, #21
 800c55a:	f022 0203 	bic.w	r2, r2, #3
 800c55e:	3204      	adds	r2, #4
 800c560:	f104 0115 	add.w	r1, r4, #21
 800c564:	428f      	cmp	r7, r1
 800c566:	bf38      	it	cc
 800c568:	2204      	movcc	r2, #4
 800c56a:	9201      	str	r2, [sp, #4]
 800c56c:	9a02      	ldr	r2, [sp, #8]
 800c56e:	9303      	str	r3, [sp, #12]
 800c570:	429a      	cmp	r2, r3
 800c572:	d80c      	bhi.n	800c58e <__multiply+0x9e>
 800c574:	2e00      	cmp	r6, #0
 800c576:	dd03      	ble.n	800c580 <__multiply+0x90>
 800c578:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 800c57c:	2b00      	cmp	r3, #0
 800c57e:	d05a      	beq.n	800c636 <__multiply+0x146>
 800c580:	6106      	str	r6, [r0, #16]
 800c582:	b005      	add	sp, #20
 800c584:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c588:	f843 2b04 	str.w	r2, [r3], #4
 800c58c:	e7d8      	b.n	800c540 <__multiply+0x50>
 800c58e:	f8b3 a000 	ldrh.w	sl, [r3]
 800c592:	f1ba 0f00 	cmp.w	sl, #0
 800c596:	d024      	beq.n	800c5e2 <__multiply+0xf2>
 800c598:	f104 0e14 	add.w	lr, r4, #20
 800c59c:	46a9      	mov	r9, r5
 800c59e:	f04f 0c00 	mov.w	ip, #0
 800c5a2:	f85e 2b04 	ldr.w	r2, [lr], #4
 800c5a6:	f8d9 1000 	ldr.w	r1, [r9]
 800c5aa:	fa1f fb82 	uxth.w	fp, r2
 800c5ae:	b289      	uxth	r1, r1
 800c5b0:	fb0a 110b 	mla	r1, sl, fp, r1
 800c5b4:	ea4f 4b12 	mov.w	fp, r2, lsr #16
 800c5b8:	f8d9 2000 	ldr.w	r2, [r9]
 800c5bc:	4461      	add	r1, ip
 800c5be:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5c2:	fb0a c20b 	mla	r2, sl, fp, ip
 800c5c6:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 800c5ca:	b289      	uxth	r1, r1
 800c5cc:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 800c5d0:	4577      	cmp	r7, lr
 800c5d2:	f849 1b04 	str.w	r1, [r9], #4
 800c5d6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 800c5da:	d8e2      	bhi.n	800c5a2 <__multiply+0xb2>
 800c5dc:	9a01      	ldr	r2, [sp, #4]
 800c5de:	f845 c002 	str.w	ip, [r5, r2]
 800c5e2:	9a03      	ldr	r2, [sp, #12]
 800c5e4:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800c5e8:	3304      	adds	r3, #4
 800c5ea:	f1b9 0f00 	cmp.w	r9, #0
 800c5ee:	d020      	beq.n	800c632 <__multiply+0x142>
 800c5f0:	6829      	ldr	r1, [r5, #0]
 800c5f2:	f104 0c14 	add.w	ip, r4, #20
 800c5f6:	46ae      	mov	lr, r5
 800c5f8:	f04f 0a00 	mov.w	sl, #0
 800c5fc:	f8bc b000 	ldrh.w	fp, [ip]
 800c600:	f8be 2002 	ldrh.w	r2, [lr, #2]
 800c604:	fb09 220b 	mla	r2, r9, fp, r2
 800c608:	4492      	add	sl, r2
 800c60a:	b289      	uxth	r1, r1
 800c60c:	ea41 410a 	orr.w	r1, r1, sl, lsl #16
 800c610:	f84e 1b04 	str.w	r1, [lr], #4
 800c614:	f85c 2b04 	ldr.w	r2, [ip], #4
 800c618:	f8be 1000 	ldrh.w	r1, [lr]
 800c61c:	0c12      	lsrs	r2, r2, #16
 800c61e:	fb09 1102 	mla	r1, r9, r2, r1
 800c622:	eb01 411a 	add.w	r1, r1, sl, lsr #16
 800c626:	4567      	cmp	r7, ip
 800c628:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 800c62c:	d8e6      	bhi.n	800c5fc <__multiply+0x10c>
 800c62e:	9a01      	ldr	r2, [sp, #4]
 800c630:	50a9      	str	r1, [r5, r2]
 800c632:	3504      	adds	r5, #4
 800c634:	e79a      	b.n	800c56c <__multiply+0x7c>
 800c636:	3e01      	subs	r6, #1
 800c638:	e79c      	b.n	800c574 <__multiply+0x84>
 800c63a:	bf00      	nop
 800c63c:	0800e120 	.word	0x0800e120
 800c640:	0800e1ac 	.word	0x0800e1ac

0800c644 <__pow5mult>:
 800c644:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800c648:	4615      	mov	r5, r2
 800c64a:	f012 0203 	ands.w	r2, r2, #3
 800c64e:	4606      	mov	r6, r0
 800c650:	460f      	mov	r7, r1
 800c652:	d007      	beq.n	800c664 <__pow5mult+0x20>
 800c654:	4c25      	ldr	r4, [pc, #148]	; (800c6ec <__pow5mult+0xa8>)
 800c656:	3a01      	subs	r2, #1
 800c658:	2300      	movs	r3, #0
 800c65a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800c65e:	f7ff fe51 	bl	800c304 <__multadd>
 800c662:	4607      	mov	r7, r0
 800c664:	10ad      	asrs	r5, r5, #2
 800c666:	d03d      	beq.n	800c6e4 <__pow5mult+0xa0>
 800c668:	6a74      	ldr	r4, [r6, #36]	; 0x24
 800c66a:	b97c      	cbnz	r4, 800c68c <__pow5mult+0x48>
 800c66c:	2010      	movs	r0, #16
 800c66e:	f7ff fdbf 	bl	800c1f0 <malloc>
 800c672:	4602      	mov	r2, r0
 800c674:	6270      	str	r0, [r6, #36]	; 0x24
 800c676:	b928      	cbnz	r0, 800c684 <__pow5mult+0x40>
 800c678:	4b1d      	ldr	r3, [pc, #116]	; (800c6f0 <__pow5mult+0xac>)
 800c67a:	481e      	ldr	r0, [pc, #120]	; (800c6f4 <__pow5mult+0xb0>)
 800c67c:	f44f 71d7 	mov.w	r1, #430	; 0x1ae
 800c680:	f7fe fb98 	bl	800adb4 <__assert_func>
 800c684:	e9c0 4401 	strd	r4, r4, [r0, #4]
 800c688:	6004      	str	r4, [r0, #0]
 800c68a:	60c4      	str	r4, [r0, #12]
 800c68c:	f8d6 8024 	ldr.w	r8, [r6, #36]	; 0x24
 800c690:	f8d8 4008 	ldr.w	r4, [r8, #8]
 800c694:	b94c      	cbnz	r4, 800c6aa <__pow5mult+0x66>
 800c696:	f240 2171 	movw	r1, #625	; 0x271
 800c69a:	4630      	mov	r0, r6
 800c69c:	f7ff ff12 	bl	800c4c4 <__i2b>
 800c6a0:	2300      	movs	r3, #0
 800c6a2:	f8c8 0008 	str.w	r0, [r8, #8]
 800c6a6:	4604      	mov	r4, r0
 800c6a8:	6003      	str	r3, [r0, #0]
 800c6aa:	f04f 0900 	mov.w	r9, #0
 800c6ae:	07eb      	lsls	r3, r5, #31
 800c6b0:	d50a      	bpl.n	800c6c8 <__pow5mult+0x84>
 800c6b2:	4639      	mov	r1, r7
 800c6b4:	4622      	mov	r2, r4
 800c6b6:	4630      	mov	r0, r6
 800c6b8:	f7ff ff1a 	bl	800c4f0 <__multiply>
 800c6bc:	4639      	mov	r1, r7
 800c6be:	4680      	mov	r8, r0
 800c6c0:	4630      	mov	r0, r6
 800c6c2:	f7ff fdfd 	bl	800c2c0 <_Bfree>
 800c6c6:	4647      	mov	r7, r8
 800c6c8:	106d      	asrs	r5, r5, #1
 800c6ca:	d00b      	beq.n	800c6e4 <__pow5mult+0xa0>
 800c6cc:	6820      	ldr	r0, [r4, #0]
 800c6ce:	b938      	cbnz	r0, 800c6e0 <__pow5mult+0x9c>
 800c6d0:	4622      	mov	r2, r4
 800c6d2:	4621      	mov	r1, r4
 800c6d4:	4630      	mov	r0, r6
 800c6d6:	f7ff ff0b 	bl	800c4f0 <__multiply>
 800c6da:	6020      	str	r0, [r4, #0]
 800c6dc:	f8c0 9000 	str.w	r9, [r0]
 800c6e0:	4604      	mov	r4, r0
 800c6e2:	e7e4      	b.n	800c6ae <__pow5mult+0x6a>
 800c6e4:	4638      	mov	r0, r7
 800c6e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800c6ea:	bf00      	nop
 800c6ec:	0800e2f8 	.word	0x0800e2f8
 800c6f0:	0800e008 	.word	0x0800e008
 800c6f4:	0800e1ac 	.word	0x0800e1ac

0800c6f8 <__lshift>:
 800c6f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800c6fc:	460c      	mov	r4, r1
 800c6fe:	6849      	ldr	r1, [r1, #4]
 800c700:	6923      	ldr	r3, [r4, #16]
 800c702:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800c706:	68a3      	ldr	r3, [r4, #8]
 800c708:	4607      	mov	r7, r0
 800c70a:	4691      	mov	r9, r2
 800c70c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 800c710:	f108 0601 	add.w	r6, r8, #1
 800c714:	42b3      	cmp	r3, r6
 800c716:	db0b      	blt.n	800c730 <__lshift+0x38>
 800c718:	4638      	mov	r0, r7
 800c71a:	f7ff fd91 	bl	800c240 <_Balloc>
 800c71e:	4605      	mov	r5, r0
 800c720:	b948      	cbnz	r0, 800c736 <__lshift+0x3e>
 800c722:	4602      	mov	r2, r0
 800c724:	4b2a      	ldr	r3, [pc, #168]	; (800c7d0 <__lshift+0xd8>)
 800c726:	482b      	ldr	r0, [pc, #172]	; (800c7d4 <__lshift+0xdc>)
 800c728:	f240 11d9 	movw	r1, #473	; 0x1d9
 800c72c:	f7fe fb42 	bl	800adb4 <__assert_func>
 800c730:	3101      	adds	r1, #1
 800c732:	005b      	lsls	r3, r3, #1
 800c734:	e7ee      	b.n	800c714 <__lshift+0x1c>
 800c736:	2300      	movs	r3, #0
 800c738:	f100 0114 	add.w	r1, r0, #20
 800c73c:	f100 0210 	add.w	r2, r0, #16
 800c740:	4618      	mov	r0, r3
 800c742:	4553      	cmp	r3, sl
 800c744:	db37      	blt.n	800c7b6 <__lshift+0xbe>
 800c746:	6920      	ldr	r0, [r4, #16]
 800c748:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800c74c:	f104 0314 	add.w	r3, r4, #20
 800c750:	f019 091f 	ands.w	r9, r9, #31
 800c754:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800c758:	eb03 0080 	add.w	r0, r3, r0, lsl #2
 800c75c:	d02f      	beq.n	800c7be <__lshift+0xc6>
 800c75e:	f1c9 0e20 	rsb	lr, r9, #32
 800c762:	468a      	mov	sl, r1
 800c764:	f04f 0c00 	mov.w	ip, #0
 800c768:	681a      	ldr	r2, [r3, #0]
 800c76a:	fa02 f209 	lsl.w	r2, r2, r9
 800c76e:	ea42 020c 	orr.w	r2, r2, ip
 800c772:	f84a 2b04 	str.w	r2, [sl], #4
 800c776:	f853 2b04 	ldr.w	r2, [r3], #4
 800c77a:	4298      	cmp	r0, r3
 800c77c:	fa22 fc0e 	lsr.w	ip, r2, lr
 800c780:	d8f2      	bhi.n	800c768 <__lshift+0x70>
 800c782:	1b03      	subs	r3, r0, r4
 800c784:	3b15      	subs	r3, #21
 800c786:	f023 0303 	bic.w	r3, r3, #3
 800c78a:	3304      	adds	r3, #4
 800c78c:	f104 0215 	add.w	r2, r4, #21
 800c790:	4290      	cmp	r0, r2
 800c792:	bf38      	it	cc
 800c794:	2304      	movcc	r3, #4
 800c796:	f841 c003 	str.w	ip, [r1, r3]
 800c79a:	f1bc 0f00 	cmp.w	ip, #0
 800c79e:	d001      	beq.n	800c7a4 <__lshift+0xac>
 800c7a0:	f108 0602 	add.w	r6, r8, #2
 800c7a4:	3e01      	subs	r6, #1
 800c7a6:	4638      	mov	r0, r7
 800c7a8:	612e      	str	r6, [r5, #16]
 800c7aa:	4621      	mov	r1, r4
 800c7ac:	f7ff fd88 	bl	800c2c0 <_Bfree>
 800c7b0:	4628      	mov	r0, r5
 800c7b2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800c7b6:	f842 0f04 	str.w	r0, [r2, #4]!
 800c7ba:	3301      	adds	r3, #1
 800c7bc:	e7c1      	b.n	800c742 <__lshift+0x4a>
 800c7be:	3904      	subs	r1, #4
 800c7c0:	f853 2b04 	ldr.w	r2, [r3], #4
 800c7c4:	f841 2f04 	str.w	r2, [r1, #4]!
 800c7c8:	4298      	cmp	r0, r3
 800c7ca:	d8f9      	bhi.n	800c7c0 <__lshift+0xc8>
 800c7cc:	e7ea      	b.n	800c7a4 <__lshift+0xac>
 800c7ce:	bf00      	nop
 800c7d0:	0800e120 	.word	0x0800e120
 800c7d4:	0800e1ac 	.word	0x0800e1ac

0800c7d8 <__mcmp>:
 800c7d8:	b530      	push	{r4, r5, lr}
 800c7da:	6902      	ldr	r2, [r0, #16]
 800c7dc:	690c      	ldr	r4, [r1, #16]
 800c7de:	1b12      	subs	r2, r2, r4
 800c7e0:	d10e      	bne.n	800c800 <__mcmp+0x28>
 800c7e2:	f100 0314 	add.w	r3, r0, #20
 800c7e6:	3114      	adds	r1, #20
 800c7e8:	eb03 0084 	add.w	r0, r3, r4, lsl #2
 800c7ec:	eb01 0184 	add.w	r1, r1, r4, lsl #2
 800c7f0:	f850 5d04 	ldr.w	r5, [r0, #-4]!
 800c7f4:	f851 4d04 	ldr.w	r4, [r1, #-4]!
 800c7f8:	42a5      	cmp	r5, r4
 800c7fa:	d003      	beq.n	800c804 <__mcmp+0x2c>
 800c7fc:	d305      	bcc.n	800c80a <__mcmp+0x32>
 800c7fe:	2201      	movs	r2, #1
 800c800:	4610      	mov	r0, r2
 800c802:	bd30      	pop	{r4, r5, pc}
 800c804:	4283      	cmp	r3, r0
 800c806:	d3f3      	bcc.n	800c7f0 <__mcmp+0x18>
 800c808:	e7fa      	b.n	800c800 <__mcmp+0x28>
 800c80a:	f04f 32ff 	mov.w	r2, #4294967295
 800c80e:	e7f7      	b.n	800c800 <__mcmp+0x28>

0800c810 <__mdiff>:
 800c810:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800c814:	460c      	mov	r4, r1
 800c816:	4606      	mov	r6, r0
 800c818:	4611      	mov	r1, r2
 800c81a:	4620      	mov	r0, r4
 800c81c:	4690      	mov	r8, r2
 800c81e:	f7ff ffdb 	bl	800c7d8 <__mcmp>
 800c822:	1e05      	subs	r5, r0, #0
 800c824:	d110      	bne.n	800c848 <__mdiff+0x38>
 800c826:	4629      	mov	r1, r5
 800c828:	4630      	mov	r0, r6
 800c82a:	f7ff fd09 	bl	800c240 <_Balloc>
 800c82e:	b930      	cbnz	r0, 800c83e <__mdiff+0x2e>
 800c830:	4b3a      	ldr	r3, [pc, #232]	; (800c91c <__mdiff+0x10c>)
 800c832:	4602      	mov	r2, r0
 800c834:	f240 2132 	movw	r1, #562	; 0x232
 800c838:	4839      	ldr	r0, [pc, #228]	; (800c920 <__mdiff+0x110>)
 800c83a:	f7fe fabb 	bl	800adb4 <__assert_func>
 800c83e:	2301      	movs	r3, #1
 800c840:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800c844:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800c848:	bfa4      	itt	ge
 800c84a:	4643      	movge	r3, r8
 800c84c:	46a0      	movge	r8, r4
 800c84e:	4630      	mov	r0, r6
 800c850:	f8d8 1004 	ldr.w	r1, [r8, #4]
 800c854:	bfa6      	itte	ge
 800c856:	461c      	movge	r4, r3
 800c858:	2500      	movge	r5, #0
 800c85a:	2501      	movlt	r5, #1
 800c85c:	f7ff fcf0 	bl	800c240 <_Balloc>
 800c860:	b920      	cbnz	r0, 800c86c <__mdiff+0x5c>
 800c862:	4b2e      	ldr	r3, [pc, #184]	; (800c91c <__mdiff+0x10c>)
 800c864:	4602      	mov	r2, r0
 800c866:	f44f 7110 	mov.w	r1, #576	; 0x240
 800c86a:	e7e5      	b.n	800c838 <__mdiff+0x28>
 800c86c:	f8d8 7010 	ldr.w	r7, [r8, #16]
 800c870:	6926      	ldr	r6, [r4, #16]
 800c872:	60c5      	str	r5, [r0, #12]
 800c874:	f104 0914 	add.w	r9, r4, #20
 800c878:	f108 0514 	add.w	r5, r8, #20
 800c87c:	f100 0e14 	add.w	lr, r0, #20
 800c880:	eb05 0c87 	add.w	ip, r5, r7, lsl #2
 800c884:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 800c888:	f108 0210 	add.w	r2, r8, #16
 800c88c:	46f2      	mov	sl, lr
 800c88e:	2100      	movs	r1, #0
 800c890:	f859 3b04 	ldr.w	r3, [r9], #4
 800c894:	f852 bf04 	ldr.w	fp, [r2, #4]!
 800c898:	fa1f f883 	uxth.w	r8, r3
 800c89c:	fa11 f18b 	uxtah	r1, r1, fp
 800c8a0:	0c1b      	lsrs	r3, r3, #16
 800c8a2:	eba1 0808 	sub.w	r8, r1, r8
 800c8a6:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 800c8aa:	eb03 4328 	add.w	r3, r3, r8, asr #16
 800c8ae:	fa1f f888 	uxth.w	r8, r8
 800c8b2:	1419      	asrs	r1, r3, #16
 800c8b4:	454e      	cmp	r6, r9
 800c8b6:	ea48 4303 	orr.w	r3, r8, r3, lsl #16
 800c8ba:	f84a 3b04 	str.w	r3, [sl], #4
 800c8be:	d8e7      	bhi.n	800c890 <__mdiff+0x80>
 800c8c0:	1b33      	subs	r3, r6, r4
 800c8c2:	3b15      	subs	r3, #21
 800c8c4:	f023 0303 	bic.w	r3, r3, #3
 800c8c8:	3304      	adds	r3, #4
 800c8ca:	3415      	adds	r4, #21
 800c8cc:	42a6      	cmp	r6, r4
 800c8ce:	bf38      	it	cc
 800c8d0:	2304      	movcc	r3, #4
 800c8d2:	441d      	add	r5, r3
 800c8d4:	4473      	add	r3, lr
 800c8d6:	469e      	mov	lr, r3
 800c8d8:	462e      	mov	r6, r5
 800c8da:	4566      	cmp	r6, ip
 800c8dc:	d30e      	bcc.n	800c8fc <__mdiff+0xec>
 800c8de:	f10c 0203 	add.w	r2, ip, #3
 800c8e2:	1b52      	subs	r2, r2, r5
 800c8e4:	f022 0203 	bic.w	r2, r2, #3
 800c8e8:	3d03      	subs	r5, #3
 800c8ea:	45ac      	cmp	ip, r5
 800c8ec:	bf38      	it	cc
 800c8ee:	2200      	movcc	r2, #0
 800c8f0:	441a      	add	r2, r3
 800c8f2:	f852 3d04 	ldr.w	r3, [r2, #-4]!
 800c8f6:	b17b      	cbz	r3, 800c918 <__mdiff+0x108>
 800c8f8:	6107      	str	r7, [r0, #16]
 800c8fa:	e7a3      	b.n	800c844 <__mdiff+0x34>
 800c8fc:	f856 8b04 	ldr.w	r8, [r6], #4
 800c900:	fa11 f288 	uxtah	r2, r1, r8
 800c904:	1414      	asrs	r4, r2, #16
 800c906:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 800c90a:	b292      	uxth	r2, r2
 800c90c:	ea42 4204 	orr.w	r2, r2, r4, lsl #16
 800c910:	f84e 2b04 	str.w	r2, [lr], #4
 800c914:	1421      	asrs	r1, r4, #16
 800c916:	e7e0      	b.n	800c8da <__mdiff+0xca>
 800c918:	3f01      	subs	r7, #1
 800c91a:	e7ea      	b.n	800c8f2 <__mdiff+0xe2>
 800c91c:	0800e120 	.word	0x0800e120
 800c920:	0800e1ac 	.word	0x0800e1ac

0800c924 <__ulp>:
 800c924:	b082      	sub	sp, #8
 800c926:	ed8d 0b00 	vstr	d0, [sp]
 800c92a:	9b01      	ldr	r3, [sp, #4]
 800c92c:	4912      	ldr	r1, [pc, #72]	; (800c978 <__ulp+0x54>)
 800c92e:	4019      	ands	r1, r3
 800c930:	f1a1 7150 	sub.w	r1, r1, #54525952	; 0x3400000
 800c934:	2900      	cmp	r1, #0
 800c936:	dd05      	ble.n	800c944 <__ulp+0x20>
 800c938:	2200      	movs	r2, #0
 800c93a:	460b      	mov	r3, r1
 800c93c:	ec43 2b10 	vmov	d0, r2, r3
 800c940:	b002      	add	sp, #8
 800c942:	4770      	bx	lr
 800c944:	4249      	negs	r1, r1
 800c946:	f1b1 7fa0 	cmp.w	r1, #20971520	; 0x1400000
 800c94a:	ea4f 5021 	mov.w	r0, r1, asr #20
 800c94e:	f04f 0200 	mov.w	r2, #0
 800c952:	f04f 0300 	mov.w	r3, #0
 800c956:	da04      	bge.n	800c962 <__ulp+0x3e>
 800c958:	f44f 2100 	mov.w	r1, #524288	; 0x80000
 800c95c:	fa41 f300 	asr.w	r3, r1, r0
 800c960:	e7ec      	b.n	800c93c <__ulp+0x18>
 800c962:	f1a0 0114 	sub.w	r1, r0, #20
 800c966:	291e      	cmp	r1, #30
 800c968:	bfda      	itte	le
 800c96a:	f04f 4000 	movle.w	r0, #2147483648	; 0x80000000
 800c96e:	fa20 f101 	lsrle.w	r1, r0, r1
 800c972:	2101      	movgt	r1, #1
 800c974:	460a      	mov	r2, r1
 800c976:	e7e1      	b.n	800c93c <__ulp+0x18>
 800c978:	7ff00000 	.word	0x7ff00000

0800c97c <__b2d>:
 800c97c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800c97e:	6905      	ldr	r5, [r0, #16]
 800c980:	f100 0714 	add.w	r7, r0, #20
 800c984:	eb07 0585 	add.w	r5, r7, r5, lsl #2
 800c988:	1f2e      	subs	r6, r5, #4
 800c98a:	f855 4c04 	ldr.w	r4, [r5, #-4]
 800c98e:	4620      	mov	r0, r4
 800c990:	f7ff fd48 	bl	800c424 <__hi0bits>
 800c994:	f1c0 0320 	rsb	r3, r0, #32
 800c998:	280a      	cmp	r0, #10
 800c99a:	f8df c07c 	ldr.w	ip, [pc, #124]	; 800ca18 <__b2d+0x9c>
 800c99e:	600b      	str	r3, [r1, #0]
 800c9a0:	dc14      	bgt.n	800c9cc <__b2d+0x50>
 800c9a2:	f1c0 0e0b 	rsb	lr, r0, #11
 800c9a6:	fa24 f10e 	lsr.w	r1, r4, lr
 800c9aa:	42b7      	cmp	r7, r6
 800c9ac:	ea41 030c 	orr.w	r3, r1, ip
 800c9b0:	bf34      	ite	cc
 800c9b2:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c9b6:	2100      	movcs	r1, #0
 800c9b8:	3015      	adds	r0, #21
 800c9ba:	fa04 f000 	lsl.w	r0, r4, r0
 800c9be:	fa21 f10e 	lsr.w	r1, r1, lr
 800c9c2:	ea40 0201 	orr.w	r2, r0, r1
 800c9c6:	ec43 2b10 	vmov	d0, r2, r3
 800c9ca:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800c9cc:	42b7      	cmp	r7, r6
 800c9ce:	bf3a      	itte	cc
 800c9d0:	f855 1c08 	ldrcc.w	r1, [r5, #-8]
 800c9d4:	f1a5 0608 	subcc.w	r6, r5, #8
 800c9d8:	2100      	movcs	r1, #0
 800c9da:	380b      	subs	r0, #11
 800c9dc:	d017      	beq.n	800ca0e <__b2d+0x92>
 800c9de:	f1c0 0c20 	rsb	ip, r0, #32
 800c9e2:	fa04 f500 	lsl.w	r5, r4, r0
 800c9e6:	42be      	cmp	r6, r7
 800c9e8:	fa21 f40c 	lsr.w	r4, r1, ip
 800c9ec:	ea45 0504 	orr.w	r5, r5, r4
 800c9f0:	bf8c      	ite	hi
 800c9f2:	f856 4c04 	ldrhi.w	r4, [r6, #-4]
 800c9f6:	2400      	movls	r4, #0
 800c9f8:	f045 537f 	orr.w	r3, r5, #1069547520	; 0x3fc00000
 800c9fc:	fa01 f000 	lsl.w	r0, r1, r0
 800ca00:	fa24 f40c 	lsr.w	r4, r4, ip
 800ca04:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 800ca08:	ea40 0204 	orr.w	r2, r0, r4
 800ca0c:	e7db      	b.n	800c9c6 <__b2d+0x4a>
 800ca0e:	ea44 030c 	orr.w	r3, r4, ip
 800ca12:	460a      	mov	r2, r1
 800ca14:	e7d7      	b.n	800c9c6 <__b2d+0x4a>
 800ca16:	bf00      	nop
 800ca18:	3ff00000 	.word	0x3ff00000

0800ca1c <__d2b>:
 800ca1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 800ca20:	4689      	mov	r9, r1
 800ca22:	2101      	movs	r1, #1
 800ca24:	ec57 6b10 	vmov	r6, r7, d0
 800ca28:	4690      	mov	r8, r2
 800ca2a:	f7ff fc09 	bl	800c240 <_Balloc>
 800ca2e:	4604      	mov	r4, r0
 800ca30:	b930      	cbnz	r0, 800ca40 <__d2b+0x24>
 800ca32:	4602      	mov	r2, r0
 800ca34:	4b25      	ldr	r3, [pc, #148]	; (800cacc <__d2b+0xb0>)
 800ca36:	4826      	ldr	r0, [pc, #152]	; (800cad0 <__d2b+0xb4>)
 800ca38:	f240 310a 	movw	r1, #778	; 0x30a
 800ca3c:	f7fe f9ba 	bl	800adb4 <__assert_func>
 800ca40:	f3c7 550a 	ubfx	r5, r7, #20, #11
 800ca44:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800ca48:	bb35      	cbnz	r5, 800ca98 <__d2b+0x7c>
 800ca4a:	2e00      	cmp	r6, #0
 800ca4c:	9301      	str	r3, [sp, #4]
 800ca4e:	d028      	beq.n	800caa2 <__d2b+0x86>
 800ca50:	4668      	mov	r0, sp
 800ca52:	9600      	str	r6, [sp, #0]
 800ca54:	f7ff fd06 	bl	800c464 <__lo0bits>
 800ca58:	9900      	ldr	r1, [sp, #0]
 800ca5a:	b300      	cbz	r0, 800ca9e <__d2b+0x82>
 800ca5c:	9a01      	ldr	r2, [sp, #4]
 800ca5e:	f1c0 0320 	rsb	r3, r0, #32
 800ca62:	fa02 f303 	lsl.w	r3, r2, r3
 800ca66:	430b      	orrs	r3, r1
 800ca68:	40c2      	lsrs	r2, r0
 800ca6a:	6163      	str	r3, [r4, #20]
 800ca6c:	9201      	str	r2, [sp, #4]
 800ca6e:	9b01      	ldr	r3, [sp, #4]
 800ca70:	61a3      	str	r3, [r4, #24]
 800ca72:	2b00      	cmp	r3, #0
 800ca74:	bf14      	ite	ne
 800ca76:	2202      	movne	r2, #2
 800ca78:	2201      	moveq	r2, #1
 800ca7a:	6122      	str	r2, [r4, #16]
 800ca7c:	b1d5      	cbz	r5, 800cab4 <__d2b+0x98>
 800ca7e:	f2a5 4533 	subw	r5, r5, #1075	; 0x433
 800ca82:	4405      	add	r5, r0
 800ca84:	f8c9 5000 	str.w	r5, [r9]
 800ca88:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 800ca8c:	f8c8 0000 	str.w	r0, [r8]
 800ca90:	4620      	mov	r0, r4
 800ca92:	b003      	add	sp, #12
 800ca94:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800ca98:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800ca9c:	e7d5      	b.n	800ca4a <__d2b+0x2e>
 800ca9e:	6161      	str	r1, [r4, #20]
 800caa0:	e7e5      	b.n	800ca6e <__d2b+0x52>
 800caa2:	a801      	add	r0, sp, #4
 800caa4:	f7ff fcde 	bl	800c464 <__lo0bits>
 800caa8:	9b01      	ldr	r3, [sp, #4]
 800caaa:	6163      	str	r3, [r4, #20]
 800caac:	2201      	movs	r2, #1
 800caae:	6122      	str	r2, [r4, #16]
 800cab0:	3020      	adds	r0, #32
 800cab2:	e7e3      	b.n	800ca7c <__d2b+0x60>
 800cab4:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800cab8:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 800cabc:	f8c9 0000 	str.w	r0, [r9]
 800cac0:	6918      	ldr	r0, [r3, #16]
 800cac2:	f7ff fcaf 	bl	800c424 <__hi0bits>
 800cac6:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800caca:	e7df      	b.n	800ca8c <__d2b+0x70>
 800cacc:	0800e120 	.word	0x0800e120
 800cad0:	0800e1ac 	.word	0x0800e1ac

0800cad4 <__ratio>:
 800cad4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800cad8:	4688      	mov	r8, r1
 800cada:	4669      	mov	r1, sp
 800cadc:	4681      	mov	r9, r0
 800cade:	f7ff ff4d 	bl	800c97c <__b2d>
 800cae2:	a901      	add	r1, sp, #4
 800cae4:	4640      	mov	r0, r8
 800cae6:	ec55 4b10 	vmov	r4, r5, d0
 800caea:	f7ff ff47 	bl	800c97c <__b2d>
 800caee:	f8d9 3010 	ldr.w	r3, [r9, #16]
 800caf2:	f8d8 2010 	ldr.w	r2, [r8, #16]
 800caf6:	eba3 0c02 	sub.w	ip, r3, r2
 800cafa:	e9dd 3200 	ldrd	r3, r2, [sp]
 800cafe:	1a9b      	subs	r3, r3, r2
 800cb00:	eb03 134c 	add.w	r3, r3, ip, lsl #5
 800cb04:	ec51 0b10 	vmov	r0, r1, d0
 800cb08:	2b00      	cmp	r3, #0
 800cb0a:	bfd6      	itet	le
 800cb0c:	460a      	movle	r2, r1
 800cb0e:	462a      	movgt	r2, r5
 800cb10:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 800cb14:	468b      	mov	fp, r1
 800cb16:	462f      	mov	r7, r5
 800cb18:	bfd4      	ite	le
 800cb1a:	eb02 5b03 	addle.w	fp, r2, r3, lsl #20
 800cb1e:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800cb22:	4620      	mov	r0, r4
 800cb24:	ee10 2a10 	vmov	r2, s0
 800cb28:	465b      	mov	r3, fp
 800cb2a:	4639      	mov	r1, r7
 800cb2c:	f7f3 fe8e 	bl	800084c <__aeabi_ddiv>
 800cb30:	ec41 0b10 	vmov	d0, r0, r1
 800cb34:	b003      	add	sp, #12
 800cb36:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

0800cb3a <__copybits>:
 800cb3a:	3901      	subs	r1, #1
 800cb3c:	b570      	push	{r4, r5, r6, lr}
 800cb3e:	1149      	asrs	r1, r1, #5
 800cb40:	6914      	ldr	r4, [r2, #16]
 800cb42:	3101      	adds	r1, #1
 800cb44:	f102 0314 	add.w	r3, r2, #20
 800cb48:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 800cb4c:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800cb50:	1f05      	subs	r5, r0, #4
 800cb52:	42a3      	cmp	r3, r4
 800cb54:	d30c      	bcc.n	800cb70 <__copybits+0x36>
 800cb56:	1aa3      	subs	r3, r4, r2
 800cb58:	3b11      	subs	r3, #17
 800cb5a:	f023 0303 	bic.w	r3, r3, #3
 800cb5e:	3211      	adds	r2, #17
 800cb60:	42a2      	cmp	r2, r4
 800cb62:	bf88      	it	hi
 800cb64:	2300      	movhi	r3, #0
 800cb66:	4418      	add	r0, r3
 800cb68:	2300      	movs	r3, #0
 800cb6a:	4288      	cmp	r0, r1
 800cb6c:	d305      	bcc.n	800cb7a <__copybits+0x40>
 800cb6e:	bd70      	pop	{r4, r5, r6, pc}
 800cb70:	f853 6b04 	ldr.w	r6, [r3], #4
 800cb74:	f845 6f04 	str.w	r6, [r5, #4]!
 800cb78:	e7eb      	b.n	800cb52 <__copybits+0x18>
 800cb7a:	f840 3b04 	str.w	r3, [r0], #4
 800cb7e:	e7f4      	b.n	800cb6a <__copybits+0x30>

0800cb80 <__any_on>:
 800cb80:	f100 0214 	add.w	r2, r0, #20
 800cb84:	6900      	ldr	r0, [r0, #16]
 800cb86:	114b      	asrs	r3, r1, #5
 800cb88:	4298      	cmp	r0, r3
 800cb8a:	b510      	push	{r4, lr}
 800cb8c:	db11      	blt.n	800cbb2 <__any_on+0x32>
 800cb8e:	dd0a      	ble.n	800cba6 <__any_on+0x26>
 800cb90:	f011 011f 	ands.w	r1, r1, #31
 800cb94:	d007      	beq.n	800cba6 <__any_on+0x26>
 800cb96:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 800cb9a:	fa24 f001 	lsr.w	r0, r4, r1
 800cb9e:	fa00 f101 	lsl.w	r1, r0, r1
 800cba2:	428c      	cmp	r4, r1
 800cba4:	d10b      	bne.n	800cbbe <__any_on+0x3e>
 800cba6:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 800cbaa:	4293      	cmp	r3, r2
 800cbac:	d803      	bhi.n	800cbb6 <__any_on+0x36>
 800cbae:	2000      	movs	r0, #0
 800cbb0:	bd10      	pop	{r4, pc}
 800cbb2:	4603      	mov	r3, r0
 800cbb4:	e7f7      	b.n	800cba6 <__any_on+0x26>
 800cbb6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800cbba:	2900      	cmp	r1, #0
 800cbbc:	d0f5      	beq.n	800cbaa <__any_on+0x2a>
 800cbbe:	2001      	movs	r0, #1
 800cbc0:	e7f6      	b.n	800cbb0 <__any_on+0x30>

0800cbc2 <_calloc_r>:
 800cbc2:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbc4:	fba1 2402 	umull	r2, r4, r1, r2
 800cbc8:	b94c      	cbnz	r4, 800cbde <_calloc_r+0x1c>
 800cbca:	4611      	mov	r1, r2
 800cbcc:	9201      	str	r2, [sp, #4]
 800cbce:	f000 f87b 	bl	800ccc8 <_malloc_r>
 800cbd2:	9a01      	ldr	r2, [sp, #4]
 800cbd4:	4605      	mov	r5, r0
 800cbd6:	b930      	cbnz	r0, 800cbe6 <_calloc_r+0x24>
 800cbd8:	4628      	mov	r0, r5
 800cbda:	b003      	add	sp, #12
 800cbdc:	bd30      	pop	{r4, r5, pc}
 800cbde:	220c      	movs	r2, #12
 800cbe0:	6002      	str	r2, [r0, #0]
 800cbe2:	2500      	movs	r5, #0
 800cbe4:	e7f8      	b.n	800cbd8 <_calloc_r+0x16>
 800cbe6:	4621      	mov	r1, r4
 800cbe8:	f7fc fdc8 	bl	800977c <memset>
 800cbec:	e7f4      	b.n	800cbd8 <_calloc_r+0x16>
	...

0800cbf0 <_free_r>:
 800cbf0:	b537      	push	{r0, r1, r2, r4, r5, lr}
 800cbf2:	2900      	cmp	r1, #0
 800cbf4:	d044      	beq.n	800cc80 <_free_r+0x90>
 800cbf6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800cbfa:	9001      	str	r0, [sp, #4]
 800cbfc:	2b00      	cmp	r3, #0
 800cbfe:	f1a1 0404 	sub.w	r4, r1, #4
 800cc02:	bfb8      	it	lt
 800cc04:	18e4      	addlt	r4, r4, r3
 800cc06:	f000 fec7 	bl	800d998 <__malloc_lock>
 800cc0a:	4a1e      	ldr	r2, [pc, #120]	; (800cc84 <_free_r+0x94>)
 800cc0c:	9801      	ldr	r0, [sp, #4]
 800cc0e:	6813      	ldr	r3, [r2, #0]
 800cc10:	b933      	cbnz	r3, 800cc20 <_free_r+0x30>
 800cc12:	6063      	str	r3, [r4, #4]
 800cc14:	6014      	str	r4, [r2, #0]
 800cc16:	b003      	add	sp, #12
 800cc18:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 800cc1c:	f000 bec2 	b.w	800d9a4 <__malloc_unlock>
 800cc20:	42a3      	cmp	r3, r4
 800cc22:	d908      	bls.n	800cc36 <_free_r+0x46>
 800cc24:	6825      	ldr	r5, [r4, #0]
 800cc26:	1961      	adds	r1, r4, r5
 800cc28:	428b      	cmp	r3, r1
 800cc2a:	bf01      	itttt	eq
 800cc2c:	6819      	ldreq	r1, [r3, #0]
 800cc2e:	685b      	ldreq	r3, [r3, #4]
 800cc30:	1949      	addeq	r1, r1, r5
 800cc32:	6021      	streq	r1, [r4, #0]
 800cc34:	e7ed      	b.n	800cc12 <_free_r+0x22>
 800cc36:	461a      	mov	r2, r3
 800cc38:	685b      	ldr	r3, [r3, #4]
 800cc3a:	b10b      	cbz	r3, 800cc40 <_free_r+0x50>
 800cc3c:	42a3      	cmp	r3, r4
 800cc3e:	d9fa      	bls.n	800cc36 <_free_r+0x46>
 800cc40:	6811      	ldr	r1, [r2, #0]
 800cc42:	1855      	adds	r5, r2, r1
 800cc44:	42a5      	cmp	r5, r4
 800cc46:	d10b      	bne.n	800cc60 <_free_r+0x70>
 800cc48:	6824      	ldr	r4, [r4, #0]
 800cc4a:	4421      	add	r1, r4
 800cc4c:	1854      	adds	r4, r2, r1
 800cc4e:	42a3      	cmp	r3, r4
 800cc50:	6011      	str	r1, [r2, #0]
 800cc52:	d1e0      	bne.n	800cc16 <_free_r+0x26>
 800cc54:	681c      	ldr	r4, [r3, #0]
 800cc56:	685b      	ldr	r3, [r3, #4]
 800cc58:	6053      	str	r3, [r2, #4]
 800cc5a:	4421      	add	r1, r4
 800cc5c:	6011      	str	r1, [r2, #0]
 800cc5e:	e7da      	b.n	800cc16 <_free_r+0x26>
 800cc60:	d902      	bls.n	800cc68 <_free_r+0x78>
 800cc62:	230c      	movs	r3, #12
 800cc64:	6003      	str	r3, [r0, #0]
 800cc66:	e7d6      	b.n	800cc16 <_free_r+0x26>
 800cc68:	6825      	ldr	r5, [r4, #0]
 800cc6a:	1961      	adds	r1, r4, r5
 800cc6c:	428b      	cmp	r3, r1
 800cc6e:	bf04      	itt	eq
 800cc70:	6819      	ldreq	r1, [r3, #0]
 800cc72:	685b      	ldreq	r3, [r3, #4]
 800cc74:	6063      	str	r3, [r4, #4]
 800cc76:	bf04      	itt	eq
 800cc78:	1949      	addeq	r1, r1, r5
 800cc7a:	6021      	streq	r1, [r4, #0]
 800cc7c:	6054      	str	r4, [r2, #4]
 800cc7e:	e7ca      	b.n	800cc16 <_free_r+0x26>
 800cc80:	b003      	add	sp, #12
 800cc82:	bd30      	pop	{r4, r5, pc}
 800cc84:	20000564 	.word	0x20000564

0800cc88 <sbrk_aligned>:
 800cc88:	b570      	push	{r4, r5, r6, lr}
 800cc8a:	4e0e      	ldr	r6, [pc, #56]	; (800ccc4 <sbrk_aligned+0x3c>)
 800cc8c:	460c      	mov	r4, r1
 800cc8e:	6831      	ldr	r1, [r6, #0]
 800cc90:	4605      	mov	r5, r0
 800cc92:	b911      	cbnz	r1, 800cc9a <sbrk_aligned+0x12>
 800cc94:	f000 fb4c 	bl	800d330 <_sbrk_r>
 800cc98:	6030      	str	r0, [r6, #0]
 800cc9a:	4621      	mov	r1, r4
 800cc9c:	4628      	mov	r0, r5
 800cc9e:	f000 fb47 	bl	800d330 <_sbrk_r>
 800cca2:	1c43      	adds	r3, r0, #1
 800cca4:	d00a      	beq.n	800ccbc <sbrk_aligned+0x34>
 800cca6:	1cc4      	adds	r4, r0, #3
 800cca8:	f024 0403 	bic.w	r4, r4, #3
 800ccac:	42a0      	cmp	r0, r4
 800ccae:	d007      	beq.n	800ccc0 <sbrk_aligned+0x38>
 800ccb0:	1a21      	subs	r1, r4, r0
 800ccb2:	4628      	mov	r0, r5
 800ccb4:	f000 fb3c 	bl	800d330 <_sbrk_r>
 800ccb8:	3001      	adds	r0, #1
 800ccba:	d101      	bne.n	800ccc0 <sbrk_aligned+0x38>
 800ccbc:	f04f 34ff 	mov.w	r4, #4294967295
 800ccc0:	4620      	mov	r0, r4
 800ccc2:	bd70      	pop	{r4, r5, r6, pc}
 800ccc4:	20000568 	.word	0x20000568

0800ccc8 <_malloc_r>:
 800ccc8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800cccc:	1ccd      	adds	r5, r1, #3
 800ccce:	f025 0503 	bic.w	r5, r5, #3
 800ccd2:	3508      	adds	r5, #8
 800ccd4:	2d0c      	cmp	r5, #12
 800ccd6:	bf38      	it	cc
 800ccd8:	250c      	movcc	r5, #12
 800ccda:	2d00      	cmp	r5, #0
 800ccdc:	4607      	mov	r7, r0
 800ccde:	db01      	blt.n	800cce4 <_malloc_r+0x1c>
 800cce0:	42a9      	cmp	r1, r5
 800cce2:	d905      	bls.n	800ccf0 <_malloc_r+0x28>
 800cce4:	230c      	movs	r3, #12
 800cce6:	603b      	str	r3, [r7, #0]
 800cce8:	2600      	movs	r6, #0
 800ccea:	4630      	mov	r0, r6
 800ccec:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800ccf0:	4e2e      	ldr	r6, [pc, #184]	; (800cdac <_malloc_r+0xe4>)
 800ccf2:	f000 fe51 	bl	800d998 <__malloc_lock>
 800ccf6:	6833      	ldr	r3, [r6, #0]
 800ccf8:	461c      	mov	r4, r3
 800ccfa:	bb34      	cbnz	r4, 800cd4a <_malloc_r+0x82>
 800ccfc:	4629      	mov	r1, r5
 800ccfe:	4638      	mov	r0, r7
 800cd00:	f7ff ffc2 	bl	800cc88 <sbrk_aligned>
 800cd04:	1c43      	adds	r3, r0, #1
 800cd06:	4604      	mov	r4, r0
 800cd08:	d14d      	bne.n	800cda6 <_malloc_r+0xde>
 800cd0a:	6834      	ldr	r4, [r6, #0]
 800cd0c:	4626      	mov	r6, r4
 800cd0e:	2e00      	cmp	r6, #0
 800cd10:	d140      	bne.n	800cd94 <_malloc_r+0xcc>
 800cd12:	6823      	ldr	r3, [r4, #0]
 800cd14:	4631      	mov	r1, r6
 800cd16:	4638      	mov	r0, r7
 800cd18:	eb04 0803 	add.w	r8, r4, r3
 800cd1c:	f000 fb08 	bl	800d330 <_sbrk_r>
 800cd20:	4580      	cmp	r8, r0
 800cd22:	d13a      	bne.n	800cd9a <_malloc_r+0xd2>
 800cd24:	6821      	ldr	r1, [r4, #0]
 800cd26:	3503      	adds	r5, #3
 800cd28:	1a6d      	subs	r5, r5, r1
 800cd2a:	f025 0503 	bic.w	r5, r5, #3
 800cd2e:	3508      	adds	r5, #8
 800cd30:	2d0c      	cmp	r5, #12
 800cd32:	bf38      	it	cc
 800cd34:	250c      	movcc	r5, #12
 800cd36:	4629      	mov	r1, r5
 800cd38:	4638      	mov	r0, r7
 800cd3a:	f7ff ffa5 	bl	800cc88 <sbrk_aligned>
 800cd3e:	3001      	adds	r0, #1
 800cd40:	d02b      	beq.n	800cd9a <_malloc_r+0xd2>
 800cd42:	6823      	ldr	r3, [r4, #0]
 800cd44:	442b      	add	r3, r5
 800cd46:	6023      	str	r3, [r4, #0]
 800cd48:	e00e      	b.n	800cd68 <_malloc_r+0xa0>
 800cd4a:	6822      	ldr	r2, [r4, #0]
 800cd4c:	1b52      	subs	r2, r2, r5
 800cd4e:	d41e      	bmi.n	800cd8e <_malloc_r+0xc6>
 800cd50:	2a0b      	cmp	r2, #11
 800cd52:	d916      	bls.n	800cd82 <_malloc_r+0xba>
 800cd54:	1961      	adds	r1, r4, r5
 800cd56:	42a3      	cmp	r3, r4
 800cd58:	6025      	str	r5, [r4, #0]
 800cd5a:	bf18      	it	ne
 800cd5c:	6059      	strne	r1, [r3, #4]
 800cd5e:	6863      	ldr	r3, [r4, #4]
 800cd60:	bf08      	it	eq
 800cd62:	6031      	streq	r1, [r6, #0]
 800cd64:	5162      	str	r2, [r4, r5]
 800cd66:	604b      	str	r3, [r1, #4]
 800cd68:	4638      	mov	r0, r7
 800cd6a:	f104 060b 	add.w	r6, r4, #11
 800cd6e:	f000 fe19 	bl	800d9a4 <__malloc_unlock>
 800cd72:	f026 0607 	bic.w	r6, r6, #7
 800cd76:	1d23      	adds	r3, r4, #4
 800cd78:	1af2      	subs	r2, r6, r3
 800cd7a:	d0b6      	beq.n	800ccea <_malloc_r+0x22>
 800cd7c:	1b9b      	subs	r3, r3, r6
 800cd7e:	50a3      	str	r3, [r4, r2]
 800cd80:	e7b3      	b.n	800ccea <_malloc_r+0x22>
 800cd82:	6862      	ldr	r2, [r4, #4]
 800cd84:	42a3      	cmp	r3, r4
 800cd86:	bf0c      	ite	eq
 800cd88:	6032      	streq	r2, [r6, #0]
 800cd8a:	605a      	strne	r2, [r3, #4]
 800cd8c:	e7ec      	b.n	800cd68 <_malloc_r+0xa0>
 800cd8e:	4623      	mov	r3, r4
 800cd90:	6864      	ldr	r4, [r4, #4]
 800cd92:	e7b2      	b.n	800ccfa <_malloc_r+0x32>
 800cd94:	4634      	mov	r4, r6
 800cd96:	6876      	ldr	r6, [r6, #4]
 800cd98:	e7b9      	b.n	800cd0e <_malloc_r+0x46>
 800cd9a:	230c      	movs	r3, #12
 800cd9c:	603b      	str	r3, [r7, #0]
 800cd9e:	4638      	mov	r0, r7
 800cda0:	f000 fe00 	bl	800d9a4 <__malloc_unlock>
 800cda4:	e7a1      	b.n	800ccea <_malloc_r+0x22>
 800cda6:	6025      	str	r5, [r4, #0]
 800cda8:	e7de      	b.n	800cd68 <_malloc_r+0xa0>
 800cdaa:	bf00      	nop
 800cdac:	20000564 	.word	0x20000564

0800cdb0 <__ssputs_r>:
 800cdb0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800cdb4:	688e      	ldr	r6, [r1, #8]
 800cdb6:	429e      	cmp	r6, r3
 800cdb8:	4682      	mov	sl, r0
 800cdba:	460c      	mov	r4, r1
 800cdbc:	4690      	mov	r8, r2
 800cdbe:	461f      	mov	r7, r3
 800cdc0:	d838      	bhi.n	800ce34 <__ssputs_r+0x84>
 800cdc2:	898a      	ldrh	r2, [r1, #12]
 800cdc4:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800cdc8:	d032      	beq.n	800ce30 <__ssputs_r+0x80>
 800cdca:	6825      	ldr	r5, [r4, #0]
 800cdcc:	6909      	ldr	r1, [r1, #16]
 800cdce:	eba5 0901 	sub.w	r9, r5, r1
 800cdd2:	6965      	ldr	r5, [r4, #20]
 800cdd4:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800cdd8:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800cddc:	3301      	adds	r3, #1
 800cdde:	444b      	add	r3, r9
 800cde0:	106d      	asrs	r5, r5, #1
 800cde2:	429d      	cmp	r5, r3
 800cde4:	bf38      	it	cc
 800cde6:	461d      	movcc	r5, r3
 800cde8:	0553      	lsls	r3, r2, #21
 800cdea:	d531      	bpl.n	800ce50 <__ssputs_r+0xa0>
 800cdec:	4629      	mov	r1, r5
 800cdee:	f7ff ff6b 	bl	800ccc8 <_malloc_r>
 800cdf2:	4606      	mov	r6, r0
 800cdf4:	b950      	cbnz	r0, 800ce0c <__ssputs_r+0x5c>
 800cdf6:	230c      	movs	r3, #12
 800cdf8:	f8ca 3000 	str.w	r3, [sl]
 800cdfc:	89a3      	ldrh	r3, [r4, #12]
 800cdfe:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800ce02:	81a3      	strh	r3, [r4, #12]
 800ce04:	f04f 30ff 	mov.w	r0, #4294967295
 800ce08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800ce0c:	6921      	ldr	r1, [r4, #16]
 800ce0e:	464a      	mov	r2, r9
 800ce10:	f7ff fa08 	bl	800c224 <memcpy>
 800ce14:	89a3      	ldrh	r3, [r4, #12]
 800ce16:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 800ce1a:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800ce1e:	81a3      	strh	r3, [r4, #12]
 800ce20:	6126      	str	r6, [r4, #16]
 800ce22:	6165      	str	r5, [r4, #20]
 800ce24:	444e      	add	r6, r9
 800ce26:	eba5 0509 	sub.w	r5, r5, r9
 800ce2a:	6026      	str	r6, [r4, #0]
 800ce2c:	60a5      	str	r5, [r4, #8]
 800ce2e:	463e      	mov	r6, r7
 800ce30:	42be      	cmp	r6, r7
 800ce32:	d900      	bls.n	800ce36 <__ssputs_r+0x86>
 800ce34:	463e      	mov	r6, r7
 800ce36:	6820      	ldr	r0, [r4, #0]
 800ce38:	4632      	mov	r2, r6
 800ce3a:	4641      	mov	r1, r8
 800ce3c:	f000 fd92 	bl	800d964 <memmove>
 800ce40:	68a3      	ldr	r3, [r4, #8]
 800ce42:	1b9b      	subs	r3, r3, r6
 800ce44:	60a3      	str	r3, [r4, #8]
 800ce46:	6823      	ldr	r3, [r4, #0]
 800ce48:	4433      	add	r3, r6
 800ce4a:	6023      	str	r3, [r4, #0]
 800ce4c:	2000      	movs	r0, #0
 800ce4e:	e7db      	b.n	800ce08 <__ssputs_r+0x58>
 800ce50:	462a      	mov	r2, r5
 800ce52:	f000 fdad 	bl	800d9b0 <_realloc_r>
 800ce56:	4606      	mov	r6, r0
 800ce58:	2800      	cmp	r0, #0
 800ce5a:	d1e1      	bne.n	800ce20 <__ssputs_r+0x70>
 800ce5c:	6921      	ldr	r1, [r4, #16]
 800ce5e:	4650      	mov	r0, sl
 800ce60:	f7ff fec6 	bl	800cbf0 <_free_r>
 800ce64:	e7c7      	b.n	800cdf6 <__ssputs_r+0x46>
	...

0800ce68 <_svfiprintf_r>:
 800ce68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ce6c:	4698      	mov	r8, r3
 800ce6e:	898b      	ldrh	r3, [r1, #12]
 800ce70:	061b      	lsls	r3, r3, #24
 800ce72:	b09d      	sub	sp, #116	; 0x74
 800ce74:	4607      	mov	r7, r0
 800ce76:	460d      	mov	r5, r1
 800ce78:	4614      	mov	r4, r2
 800ce7a:	d50e      	bpl.n	800ce9a <_svfiprintf_r+0x32>
 800ce7c:	690b      	ldr	r3, [r1, #16]
 800ce7e:	b963      	cbnz	r3, 800ce9a <_svfiprintf_r+0x32>
 800ce80:	2140      	movs	r1, #64	; 0x40
 800ce82:	f7ff ff21 	bl	800ccc8 <_malloc_r>
 800ce86:	6028      	str	r0, [r5, #0]
 800ce88:	6128      	str	r0, [r5, #16]
 800ce8a:	b920      	cbnz	r0, 800ce96 <_svfiprintf_r+0x2e>
 800ce8c:	230c      	movs	r3, #12
 800ce8e:	603b      	str	r3, [r7, #0]
 800ce90:	f04f 30ff 	mov.w	r0, #4294967295
 800ce94:	e0d1      	b.n	800d03a <_svfiprintf_r+0x1d2>
 800ce96:	2340      	movs	r3, #64	; 0x40
 800ce98:	616b      	str	r3, [r5, #20]
 800ce9a:	2300      	movs	r3, #0
 800ce9c:	9309      	str	r3, [sp, #36]	; 0x24
 800ce9e:	2320      	movs	r3, #32
 800cea0:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800cea4:	f8cd 800c 	str.w	r8, [sp, #12]
 800cea8:	2330      	movs	r3, #48	; 0x30
 800ceaa:	f8df 81a8 	ldr.w	r8, [pc, #424]	; 800d054 <_svfiprintf_r+0x1ec>
 800ceae:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800ceb2:	f04f 0901 	mov.w	r9, #1
 800ceb6:	4623      	mov	r3, r4
 800ceb8:	469a      	mov	sl, r3
 800ceba:	f813 2b01 	ldrb.w	r2, [r3], #1
 800cebe:	b10a      	cbz	r2, 800cec4 <_svfiprintf_r+0x5c>
 800cec0:	2a25      	cmp	r2, #37	; 0x25
 800cec2:	d1f9      	bne.n	800ceb8 <_svfiprintf_r+0x50>
 800cec4:	ebba 0b04 	subs.w	fp, sl, r4
 800cec8:	d00b      	beq.n	800cee2 <_svfiprintf_r+0x7a>
 800ceca:	465b      	mov	r3, fp
 800cecc:	4622      	mov	r2, r4
 800cece:	4629      	mov	r1, r5
 800ced0:	4638      	mov	r0, r7
 800ced2:	f7ff ff6d 	bl	800cdb0 <__ssputs_r>
 800ced6:	3001      	adds	r0, #1
 800ced8:	f000 80aa 	beq.w	800d030 <_svfiprintf_r+0x1c8>
 800cedc:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800cede:	445a      	add	r2, fp
 800cee0:	9209      	str	r2, [sp, #36]	; 0x24
 800cee2:	f89a 3000 	ldrb.w	r3, [sl]
 800cee6:	2b00      	cmp	r3, #0
 800cee8:	f000 80a2 	beq.w	800d030 <_svfiprintf_r+0x1c8>
 800ceec:	2300      	movs	r3, #0
 800ceee:	f04f 32ff 	mov.w	r2, #4294967295
 800cef2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800cef6:	f10a 0a01 	add.w	sl, sl, #1
 800cefa:	9304      	str	r3, [sp, #16]
 800cefc:	9307      	str	r3, [sp, #28]
 800cefe:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800cf02:	931a      	str	r3, [sp, #104]	; 0x68
 800cf04:	4654      	mov	r4, sl
 800cf06:	2205      	movs	r2, #5
 800cf08:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cf0c:	4851      	ldr	r0, [pc, #324]	; (800d054 <_svfiprintf_r+0x1ec>)
 800cf0e:	f7f3 f967 	bl	80001e0 <memchr>
 800cf12:	9a04      	ldr	r2, [sp, #16]
 800cf14:	b9d8      	cbnz	r0, 800cf4e <_svfiprintf_r+0xe6>
 800cf16:	06d0      	lsls	r0, r2, #27
 800cf18:	bf44      	itt	mi
 800cf1a:	2320      	movmi	r3, #32
 800cf1c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf20:	0711      	lsls	r1, r2, #28
 800cf22:	bf44      	itt	mi
 800cf24:	232b      	movmi	r3, #43	; 0x2b
 800cf26:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800cf2a:	f89a 3000 	ldrb.w	r3, [sl]
 800cf2e:	2b2a      	cmp	r3, #42	; 0x2a
 800cf30:	d015      	beq.n	800cf5e <_svfiprintf_r+0xf6>
 800cf32:	9a07      	ldr	r2, [sp, #28]
 800cf34:	4654      	mov	r4, sl
 800cf36:	2000      	movs	r0, #0
 800cf38:	f04f 0c0a 	mov.w	ip, #10
 800cf3c:	4621      	mov	r1, r4
 800cf3e:	f811 3b01 	ldrb.w	r3, [r1], #1
 800cf42:	3b30      	subs	r3, #48	; 0x30
 800cf44:	2b09      	cmp	r3, #9
 800cf46:	d94e      	bls.n	800cfe6 <_svfiprintf_r+0x17e>
 800cf48:	b1b0      	cbz	r0, 800cf78 <_svfiprintf_r+0x110>
 800cf4a:	9207      	str	r2, [sp, #28]
 800cf4c:	e014      	b.n	800cf78 <_svfiprintf_r+0x110>
 800cf4e:	eba0 0308 	sub.w	r3, r0, r8
 800cf52:	fa09 f303 	lsl.w	r3, r9, r3
 800cf56:	4313      	orrs	r3, r2
 800cf58:	9304      	str	r3, [sp, #16]
 800cf5a:	46a2      	mov	sl, r4
 800cf5c:	e7d2      	b.n	800cf04 <_svfiprintf_r+0x9c>
 800cf5e:	9b03      	ldr	r3, [sp, #12]
 800cf60:	1d19      	adds	r1, r3, #4
 800cf62:	681b      	ldr	r3, [r3, #0]
 800cf64:	9103      	str	r1, [sp, #12]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	bfbb      	ittet	lt
 800cf6a:	425b      	neglt	r3, r3
 800cf6c:	f042 0202 	orrlt.w	r2, r2, #2
 800cf70:	9307      	strge	r3, [sp, #28]
 800cf72:	9307      	strlt	r3, [sp, #28]
 800cf74:	bfb8      	it	lt
 800cf76:	9204      	strlt	r2, [sp, #16]
 800cf78:	7823      	ldrb	r3, [r4, #0]
 800cf7a:	2b2e      	cmp	r3, #46	; 0x2e
 800cf7c:	d10c      	bne.n	800cf98 <_svfiprintf_r+0x130>
 800cf7e:	7863      	ldrb	r3, [r4, #1]
 800cf80:	2b2a      	cmp	r3, #42	; 0x2a
 800cf82:	d135      	bne.n	800cff0 <_svfiprintf_r+0x188>
 800cf84:	9b03      	ldr	r3, [sp, #12]
 800cf86:	1d1a      	adds	r2, r3, #4
 800cf88:	681b      	ldr	r3, [r3, #0]
 800cf8a:	9203      	str	r2, [sp, #12]
 800cf8c:	2b00      	cmp	r3, #0
 800cf8e:	bfb8      	it	lt
 800cf90:	f04f 33ff 	movlt.w	r3, #4294967295
 800cf94:	3402      	adds	r4, #2
 800cf96:	9305      	str	r3, [sp, #20]
 800cf98:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 800d064 <_svfiprintf_r+0x1fc>
 800cf9c:	7821      	ldrb	r1, [r4, #0]
 800cf9e:	2203      	movs	r2, #3
 800cfa0:	4650      	mov	r0, sl
 800cfa2:	f7f3 f91d 	bl	80001e0 <memchr>
 800cfa6:	b140      	cbz	r0, 800cfba <_svfiprintf_r+0x152>
 800cfa8:	2340      	movs	r3, #64	; 0x40
 800cfaa:	eba0 000a 	sub.w	r0, r0, sl
 800cfae:	fa03 f000 	lsl.w	r0, r3, r0
 800cfb2:	9b04      	ldr	r3, [sp, #16]
 800cfb4:	4303      	orrs	r3, r0
 800cfb6:	3401      	adds	r4, #1
 800cfb8:	9304      	str	r3, [sp, #16]
 800cfba:	f814 1b01 	ldrb.w	r1, [r4], #1
 800cfbe:	4826      	ldr	r0, [pc, #152]	; (800d058 <_svfiprintf_r+0x1f0>)
 800cfc0:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800cfc4:	2206      	movs	r2, #6
 800cfc6:	f7f3 f90b 	bl	80001e0 <memchr>
 800cfca:	2800      	cmp	r0, #0
 800cfcc:	d038      	beq.n	800d040 <_svfiprintf_r+0x1d8>
 800cfce:	4b23      	ldr	r3, [pc, #140]	; (800d05c <_svfiprintf_r+0x1f4>)
 800cfd0:	bb1b      	cbnz	r3, 800d01a <_svfiprintf_r+0x1b2>
 800cfd2:	9b03      	ldr	r3, [sp, #12]
 800cfd4:	3307      	adds	r3, #7
 800cfd6:	f023 0307 	bic.w	r3, r3, #7
 800cfda:	3308      	adds	r3, #8
 800cfdc:	9303      	str	r3, [sp, #12]
 800cfde:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800cfe0:	4433      	add	r3, r6
 800cfe2:	9309      	str	r3, [sp, #36]	; 0x24
 800cfe4:	e767      	b.n	800ceb6 <_svfiprintf_r+0x4e>
 800cfe6:	fb0c 3202 	mla	r2, ip, r2, r3
 800cfea:	460c      	mov	r4, r1
 800cfec:	2001      	movs	r0, #1
 800cfee:	e7a5      	b.n	800cf3c <_svfiprintf_r+0xd4>
 800cff0:	2300      	movs	r3, #0
 800cff2:	3401      	adds	r4, #1
 800cff4:	9305      	str	r3, [sp, #20]
 800cff6:	4619      	mov	r1, r3
 800cff8:	f04f 0c0a 	mov.w	ip, #10
 800cffc:	4620      	mov	r0, r4
 800cffe:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d002:	3a30      	subs	r2, #48	; 0x30
 800d004:	2a09      	cmp	r2, #9
 800d006:	d903      	bls.n	800d010 <_svfiprintf_r+0x1a8>
 800d008:	2b00      	cmp	r3, #0
 800d00a:	d0c5      	beq.n	800cf98 <_svfiprintf_r+0x130>
 800d00c:	9105      	str	r1, [sp, #20]
 800d00e:	e7c3      	b.n	800cf98 <_svfiprintf_r+0x130>
 800d010:	fb0c 2101 	mla	r1, ip, r1, r2
 800d014:	4604      	mov	r4, r0
 800d016:	2301      	movs	r3, #1
 800d018:	e7f0      	b.n	800cffc <_svfiprintf_r+0x194>
 800d01a:	ab03      	add	r3, sp, #12
 800d01c:	9300      	str	r3, [sp, #0]
 800d01e:	462a      	mov	r2, r5
 800d020:	4b0f      	ldr	r3, [pc, #60]	; (800d060 <_svfiprintf_r+0x1f8>)
 800d022:	a904      	add	r1, sp, #16
 800d024:	4638      	mov	r0, r7
 800d026:	f7fc fc51 	bl	80098cc <_printf_float>
 800d02a:	1c42      	adds	r2, r0, #1
 800d02c:	4606      	mov	r6, r0
 800d02e:	d1d6      	bne.n	800cfde <_svfiprintf_r+0x176>
 800d030:	89ab      	ldrh	r3, [r5, #12]
 800d032:	065b      	lsls	r3, r3, #25
 800d034:	f53f af2c 	bmi.w	800ce90 <_svfiprintf_r+0x28>
 800d038:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d03a:	b01d      	add	sp, #116	; 0x74
 800d03c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d040:	ab03      	add	r3, sp, #12
 800d042:	9300      	str	r3, [sp, #0]
 800d044:	462a      	mov	r2, r5
 800d046:	4b06      	ldr	r3, [pc, #24]	; (800d060 <_svfiprintf_r+0x1f8>)
 800d048:	a904      	add	r1, sp, #16
 800d04a:	4638      	mov	r0, r7
 800d04c:	f7fc fee2 	bl	8009e14 <_printf_i>
 800d050:	e7eb      	b.n	800d02a <_svfiprintf_r+0x1c2>
 800d052:	bf00      	nop
 800d054:	0800e304 	.word	0x0800e304
 800d058:	0800e30e 	.word	0x0800e30e
 800d05c:	080098cd 	.word	0x080098cd
 800d060:	0800cdb1 	.word	0x0800cdb1
 800d064:	0800e30a 	.word	0x0800e30a

0800d068 <__sfputc_r>:
 800d068:	6893      	ldr	r3, [r2, #8]
 800d06a:	3b01      	subs	r3, #1
 800d06c:	2b00      	cmp	r3, #0
 800d06e:	b410      	push	{r4}
 800d070:	6093      	str	r3, [r2, #8]
 800d072:	da08      	bge.n	800d086 <__sfputc_r+0x1e>
 800d074:	6994      	ldr	r4, [r2, #24]
 800d076:	42a3      	cmp	r3, r4
 800d078:	db01      	blt.n	800d07e <__sfputc_r+0x16>
 800d07a:	290a      	cmp	r1, #10
 800d07c:	d103      	bne.n	800d086 <__sfputc_r+0x1e>
 800d07e:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d082:	f000 b979 	b.w	800d378 <__swbuf_r>
 800d086:	6813      	ldr	r3, [r2, #0]
 800d088:	1c58      	adds	r0, r3, #1
 800d08a:	6010      	str	r0, [r2, #0]
 800d08c:	7019      	strb	r1, [r3, #0]
 800d08e:	4608      	mov	r0, r1
 800d090:	f85d 4b04 	ldr.w	r4, [sp], #4
 800d094:	4770      	bx	lr

0800d096 <__sfputs_r>:
 800d096:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d098:	4606      	mov	r6, r0
 800d09a:	460f      	mov	r7, r1
 800d09c:	4614      	mov	r4, r2
 800d09e:	18d5      	adds	r5, r2, r3
 800d0a0:	42ac      	cmp	r4, r5
 800d0a2:	d101      	bne.n	800d0a8 <__sfputs_r+0x12>
 800d0a4:	2000      	movs	r0, #0
 800d0a6:	e007      	b.n	800d0b8 <__sfputs_r+0x22>
 800d0a8:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d0ac:	463a      	mov	r2, r7
 800d0ae:	4630      	mov	r0, r6
 800d0b0:	f7ff ffda 	bl	800d068 <__sfputc_r>
 800d0b4:	1c43      	adds	r3, r0, #1
 800d0b6:	d1f3      	bne.n	800d0a0 <__sfputs_r+0xa>
 800d0b8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0800d0bc <_vfiprintf_r>:
 800d0bc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800d0c0:	460d      	mov	r5, r1
 800d0c2:	b09d      	sub	sp, #116	; 0x74
 800d0c4:	4614      	mov	r4, r2
 800d0c6:	4698      	mov	r8, r3
 800d0c8:	4606      	mov	r6, r0
 800d0ca:	b118      	cbz	r0, 800d0d4 <_vfiprintf_r+0x18>
 800d0cc:	6983      	ldr	r3, [r0, #24]
 800d0ce:	b90b      	cbnz	r3, 800d0d4 <_vfiprintf_r+0x18>
 800d0d0:	f000 fb42 	bl	800d758 <__sinit>
 800d0d4:	4b89      	ldr	r3, [pc, #548]	; (800d2fc <_vfiprintf_r+0x240>)
 800d0d6:	429d      	cmp	r5, r3
 800d0d8:	d11b      	bne.n	800d112 <_vfiprintf_r+0x56>
 800d0da:	6875      	ldr	r5, [r6, #4]
 800d0dc:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d0de:	07d9      	lsls	r1, r3, #31
 800d0e0:	d405      	bmi.n	800d0ee <_vfiprintf_r+0x32>
 800d0e2:	89ab      	ldrh	r3, [r5, #12]
 800d0e4:	059a      	lsls	r2, r3, #22
 800d0e6:	d402      	bmi.n	800d0ee <_vfiprintf_r+0x32>
 800d0e8:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d0ea:	f000 fbd3 	bl	800d894 <__retarget_lock_acquire_recursive>
 800d0ee:	89ab      	ldrh	r3, [r5, #12]
 800d0f0:	071b      	lsls	r3, r3, #28
 800d0f2:	d501      	bpl.n	800d0f8 <_vfiprintf_r+0x3c>
 800d0f4:	692b      	ldr	r3, [r5, #16]
 800d0f6:	b9eb      	cbnz	r3, 800d134 <_vfiprintf_r+0x78>
 800d0f8:	4629      	mov	r1, r5
 800d0fa:	4630      	mov	r0, r6
 800d0fc:	f000 f99c 	bl	800d438 <__swsetup_r>
 800d100:	b1c0      	cbz	r0, 800d134 <_vfiprintf_r+0x78>
 800d102:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d104:	07dc      	lsls	r4, r3, #31
 800d106:	d50e      	bpl.n	800d126 <_vfiprintf_r+0x6a>
 800d108:	f04f 30ff 	mov.w	r0, #4294967295
 800d10c:	b01d      	add	sp, #116	; 0x74
 800d10e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800d112:	4b7b      	ldr	r3, [pc, #492]	; (800d300 <_vfiprintf_r+0x244>)
 800d114:	429d      	cmp	r5, r3
 800d116:	d101      	bne.n	800d11c <_vfiprintf_r+0x60>
 800d118:	68b5      	ldr	r5, [r6, #8]
 800d11a:	e7df      	b.n	800d0dc <_vfiprintf_r+0x20>
 800d11c:	4b79      	ldr	r3, [pc, #484]	; (800d304 <_vfiprintf_r+0x248>)
 800d11e:	429d      	cmp	r5, r3
 800d120:	bf08      	it	eq
 800d122:	68f5      	ldreq	r5, [r6, #12]
 800d124:	e7da      	b.n	800d0dc <_vfiprintf_r+0x20>
 800d126:	89ab      	ldrh	r3, [r5, #12]
 800d128:	0598      	lsls	r0, r3, #22
 800d12a:	d4ed      	bmi.n	800d108 <_vfiprintf_r+0x4c>
 800d12c:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d12e:	f000 fbb2 	bl	800d896 <__retarget_lock_release_recursive>
 800d132:	e7e9      	b.n	800d108 <_vfiprintf_r+0x4c>
 800d134:	2300      	movs	r3, #0
 800d136:	9309      	str	r3, [sp, #36]	; 0x24
 800d138:	2320      	movs	r3, #32
 800d13a:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 800d13e:	f8cd 800c 	str.w	r8, [sp, #12]
 800d142:	2330      	movs	r3, #48	; 0x30
 800d144:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 800d308 <_vfiprintf_r+0x24c>
 800d148:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 800d14c:	f04f 0901 	mov.w	r9, #1
 800d150:	4623      	mov	r3, r4
 800d152:	469a      	mov	sl, r3
 800d154:	f813 2b01 	ldrb.w	r2, [r3], #1
 800d158:	b10a      	cbz	r2, 800d15e <_vfiprintf_r+0xa2>
 800d15a:	2a25      	cmp	r2, #37	; 0x25
 800d15c:	d1f9      	bne.n	800d152 <_vfiprintf_r+0x96>
 800d15e:	ebba 0b04 	subs.w	fp, sl, r4
 800d162:	d00b      	beq.n	800d17c <_vfiprintf_r+0xc0>
 800d164:	465b      	mov	r3, fp
 800d166:	4622      	mov	r2, r4
 800d168:	4629      	mov	r1, r5
 800d16a:	4630      	mov	r0, r6
 800d16c:	f7ff ff93 	bl	800d096 <__sfputs_r>
 800d170:	3001      	adds	r0, #1
 800d172:	f000 80aa 	beq.w	800d2ca <_vfiprintf_r+0x20e>
 800d176:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800d178:	445a      	add	r2, fp
 800d17a:	9209      	str	r2, [sp, #36]	; 0x24
 800d17c:	f89a 3000 	ldrb.w	r3, [sl]
 800d180:	2b00      	cmp	r3, #0
 800d182:	f000 80a2 	beq.w	800d2ca <_vfiprintf_r+0x20e>
 800d186:	2300      	movs	r3, #0
 800d188:	f04f 32ff 	mov.w	r2, #4294967295
 800d18c:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800d190:	f10a 0a01 	add.w	sl, sl, #1
 800d194:	9304      	str	r3, [sp, #16]
 800d196:	9307      	str	r3, [sp, #28]
 800d198:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800d19c:	931a      	str	r3, [sp, #104]	; 0x68
 800d19e:	4654      	mov	r4, sl
 800d1a0:	2205      	movs	r2, #5
 800d1a2:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d1a6:	4858      	ldr	r0, [pc, #352]	; (800d308 <_vfiprintf_r+0x24c>)
 800d1a8:	f7f3 f81a 	bl	80001e0 <memchr>
 800d1ac:	9a04      	ldr	r2, [sp, #16]
 800d1ae:	b9d8      	cbnz	r0, 800d1e8 <_vfiprintf_r+0x12c>
 800d1b0:	06d1      	lsls	r1, r2, #27
 800d1b2:	bf44      	itt	mi
 800d1b4:	2320      	movmi	r3, #32
 800d1b6:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1ba:	0713      	lsls	r3, r2, #28
 800d1bc:	bf44      	itt	mi
 800d1be:	232b      	movmi	r3, #43	; 0x2b
 800d1c0:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800d1c4:	f89a 3000 	ldrb.w	r3, [sl]
 800d1c8:	2b2a      	cmp	r3, #42	; 0x2a
 800d1ca:	d015      	beq.n	800d1f8 <_vfiprintf_r+0x13c>
 800d1cc:	9a07      	ldr	r2, [sp, #28]
 800d1ce:	4654      	mov	r4, sl
 800d1d0:	2000      	movs	r0, #0
 800d1d2:	f04f 0c0a 	mov.w	ip, #10
 800d1d6:	4621      	mov	r1, r4
 800d1d8:	f811 3b01 	ldrb.w	r3, [r1], #1
 800d1dc:	3b30      	subs	r3, #48	; 0x30
 800d1de:	2b09      	cmp	r3, #9
 800d1e0:	d94e      	bls.n	800d280 <_vfiprintf_r+0x1c4>
 800d1e2:	b1b0      	cbz	r0, 800d212 <_vfiprintf_r+0x156>
 800d1e4:	9207      	str	r2, [sp, #28]
 800d1e6:	e014      	b.n	800d212 <_vfiprintf_r+0x156>
 800d1e8:	eba0 0308 	sub.w	r3, r0, r8
 800d1ec:	fa09 f303 	lsl.w	r3, r9, r3
 800d1f0:	4313      	orrs	r3, r2
 800d1f2:	9304      	str	r3, [sp, #16]
 800d1f4:	46a2      	mov	sl, r4
 800d1f6:	e7d2      	b.n	800d19e <_vfiprintf_r+0xe2>
 800d1f8:	9b03      	ldr	r3, [sp, #12]
 800d1fa:	1d19      	adds	r1, r3, #4
 800d1fc:	681b      	ldr	r3, [r3, #0]
 800d1fe:	9103      	str	r1, [sp, #12]
 800d200:	2b00      	cmp	r3, #0
 800d202:	bfbb      	ittet	lt
 800d204:	425b      	neglt	r3, r3
 800d206:	f042 0202 	orrlt.w	r2, r2, #2
 800d20a:	9307      	strge	r3, [sp, #28]
 800d20c:	9307      	strlt	r3, [sp, #28]
 800d20e:	bfb8      	it	lt
 800d210:	9204      	strlt	r2, [sp, #16]
 800d212:	7823      	ldrb	r3, [r4, #0]
 800d214:	2b2e      	cmp	r3, #46	; 0x2e
 800d216:	d10c      	bne.n	800d232 <_vfiprintf_r+0x176>
 800d218:	7863      	ldrb	r3, [r4, #1]
 800d21a:	2b2a      	cmp	r3, #42	; 0x2a
 800d21c:	d135      	bne.n	800d28a <_vfiprintf_r+0x1ce>
 800d21e:	9b03      	ldr	r3, [sp, #12]
 800d220:	1d1a      	adds	r2, r3, #4
 800d222:	681b      	ldr	r3, [r3, #0]
 800d224:	9203      	str	r2, [sp, #12]
 800d226:	2b00      	cmp	r3, #0
 800d228:	bfb8      	it	lt
 800d22a:	f04f 33ff 	movlt.w	r3, #4294967295
 800d22e:	3402      	adds	r4, #2
 800d230:	9305      	str	r3, [sp, #20]
 800d232:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 800d318 <_vfiprintf_r+0x25c>
 800d236:	7821      	ldrb	r1, [r4, #0]
 800d238:	2203      	movs	r2, #3
 800d23a:	4650      	mov	r0, sl
 800d23c:	f7f2 ffd0 	bl	80001e0 <memchr>
 800d240:	b140      	cbz	r0, 800d254 <_vfiprintf_r+0x198>
 800d242:	2340      	movs	r3, #64	; 0x40
 800d244:	eba0 000a 	sub.w	r0, r0, sl
 800d248:	fa03 f000 	lsl.w	r0, r3, r0
 800d24c:	9b04      	ldr	r3, [sp, #16]
 800d24e:	4303      	orrs	r3, r0
 800d250:	3401      	adds	r4, #1
 800d252:	9304      	str	r3, [sp, #16]
 800d254:	f814 1b01 	ldrb.w	r1, [r4], #1
 800d258:	482c      	ldr	r0, [pc, #176]	; (800d30c <_vfiprintf_r+0x250>)
 800d25a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 800d25e:	2206      	movs	r2, #6
 800d260:	f7f2 ffbe 	bl	80001e0 <memchr>
 800d264:	2800      	cmp	r0, #0
 800d266:	d03f      	beq.n	800d2e8 <_vfiprintf_r+0x22c>
 800d268:	4b29      	ldr	r3, [pc, #164]	; (800d310 <_vfiprintf_r+0x254>)
 800d26a:	bb1b      	cbnz	r3, 800d2b4 <_vfiprintf_r+0x1f8>
 800d26c:	9b03      	ldr	r3, [sp, #12]
 800d26e:	3307      	adds	r3, #7
 800d270:	f023 0307 	bic.w	r3, r3, #7
 800d274:	3308      	adds	r3, #8
 800d276:	9303      	str	r3, [sp, #12]
 800d278:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800d27a:	443b      	add	r3, r7
 800d27c:	9309      	str	r3, [sp, #36]	; 0x24
 800d27e:	e767      	b.n	800d150 <_vfiprintf_r+0x94>
 800d280:	fb0c 3202 	mla	r2, ip, r2, r3
 800d284:	460c      	mov	r4, r1
 800d286:	2001      	movs	r0, #1
 800d288:	e7a5      	b.n	800d1d6 <_vfiprintf_r+0x11a>
 800d28a:	2300      	movs	r3, #0
 800d28c:	3401      	adds	r4, #1
 800d28e:	9305      	str	r3, [sp, #20]
 800d290:	4619      	mov	r1, r3
 800d292:	f04f 0c0a 	mov.w	ip, #10
 800d296:	4620      	mov	r0, r4
 800d298:	f810 2b01 	ldrb.w	r2, [r0], #1
 800d29c:	3a30      	subs	r2, #48	; 0x30
 800d29e:	2a09      	cmp	r2, #9
 800d2a0:	d903      	bls.n	800d2aa <_vfiprintf_r+0x1ee>
 800d2a2:	2b00      	cmp	r3, #0
 800d2a4:	d0c5      	beq.n	800d232 <_vfiprintf_r+0x176>
 800d2a6:	9105      	str	r1, [sp, #20]
 800d2a8:	e7c3      	b.n	800d232 <_vfiprintf_r+0x176>
 800d2aa:	fb0c 2101 	mla	r1, ip, r1, r2
 800d2ae:	4604      	mov	r4, r0
 800d2b0:	2301      	movs	r3, #1
 800d2b2:	e7f0      	b.n	800d296 <_vfiprintf_r+0x1da>
 800d2b4:	ab03      	add	r3, sp, #12
 800d2b6:	9300      	str	r3, [sp, #0]
 800d2b8:	462a      	mov	r2, r5
 800d2ba:	4b16      	ldr	r3, [pc, #88]	; (800d314 <_vfiprintf_r+0x258>)
 800d2bc:	a904      	add	r1, sp, #16
 800d2be:	4630      	mov	r0, r6
 800d2c0:	f7fc fb04 	bl	80098cc <_printf_float>
 800d2c4:	4607      	mov	r7, r0
 800d2c6:	1c78      	adds	r0, r7, #1
 800d2c8:	d1d6      	bne.n	800d278 <_vfiprintf_r+0x1bc>
 800d2ca:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 800d2cc:	07d9      	lsls	r1, r3, #31
 800d2ce:	d405      	bmi.n	800d2dc <_vfiprintf_r+0x220>
 800d2d0:	89ab      	ldrh	r3, [r5, #12]
 800d2d2:	059a      	lsls	r2, r3, #22
 800d2d4:	d402      	bmi.n	800d2dc <_vfiprintf_r+0x220>
 800d2d6:	6da8      	ldr	r0, [r5, #88]	; 0x58
 800d2d8:	f000 fadd 	bl	800d896 <__retarget_lock_release_recursive>
 800d2dc:	89ab      	ldrh	r3, [r5, #12]
 800d2de:	065b      	lsls	r3, r3, #25
 800d2e0:	f53f af12 	bmi.w	800d108 <_vfiprintf_r+0x4c>
 800d2e4:	9809      	ldr	r0, [sp, #36]	; 0x24
 800d2e6:	e711      	b.n	800d10c <_vfiprintf_r+0x50>
 800d2e8:	ab03      	add	r3, sp, #12
 800d2ea:	9300      	str	r3, [sp, #0]
 800d2ec:	462a      	mov	r2, r5
 800d2ee:	4b09      	ldr	r3, [pc, #36]	; (800d314 <_vfiprintf_r+0x258>)
 800d2f0:	a904      	add	r1, sp, #16
 800d2f2:	4630      	mov	r0, r6
 800d2f4:	f7fc fd8e 	bl	8009e14 <_printf_i>
 800d2f8:	e7e4      	b.n	800d2c4 <_vfiprintf_r+0x208>
 800d2fa:	bf00      	nop
 800d2fc:	0800e438 	.word	0x0800e438
 800d300:	0800e458 	.word	0x0800e458
 800d304:	0800e418 	.word	0x0800e418
 800d308:	0800e304 	.word	0x0800e304
 800d30c:	0800e30e 	.word	0x0800e30e
 800d310:	080098cd 	.word	0x080098cd
 800d314:	0800d097 	.word	0x0800d097
 800d318:	0800e30a 	.word	0x0800e30a
 800d31c:	00000000 	.word	0x00000000

0800d320 <nan>:
 800d320:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800d328 <nan+0x8>
 800d324:	4770      	bx	lr
 800d326:	bf00      	nop
 800d328:	00000000 	.word	0x00000000
 800d32c:	7ff80000 	.word	0x7ff80000

0800d330 <_sbrk_r>:
 800d330:	b538      	push	{r3, r4, r5, lr}
 800d332:	4d06      	ldr	r5, [pc, #24]	; (800d34c <_sbrk_r+0x1c>)
 800d334:	2300      	movs	r3, #0
 800d336:	4604      	mov	r4, r0
 800d338:	4608      	mov	r0, r1
 800d33a:	602b      	str	r3, [r5, #0]
 800d33c:	f7f8 fec2 	bl	80060c4 <_sbrk>
 800d340:	1c43      	adds	r3, r0, #1
 800d342:	d102      	bne.n	800d34a <_sbrk_r+0x1a>
 800d344:	682b      	ldr	r3, [r5, #0]
 800d346:	b103      	cbz	r3, 800d34a <_sbrk_r+0x1a>
 800d348:	6023      	str	r3, [r4, #0]
 800d34a:	bd38      	pop	{r3, r4, r5, pc}
 800d34c:	20000570 	.word	0x20000570

0800d350 <strncmp>:
 800d350:	b510      	push	{r4, lr}
 800d352:	b17a      	cbz	r2, 800d374 <strncmp+0x24>
 800d354:	4603      	mov	r3, r0
 800d356:	3901      	subs	r1, #1
 800d358:	1884      	adds	r4, r0, r2
 800d35a:	f813 0b01 	ldrb.w	r0, [r3], #1
 800d35e:	f811 2f01 	ldrb.w	r2, [r1, #1]!
 800d362:	4290      	cmp	r0, r2
 800d364:	d101      	bne.n	800d36a <strncmp+0x1a>
 800d366:	42a3      	cmp	r3, r4
 800d368:	d101      	bne.n	800d36e <strncmp+0x1e>
 800d36a:	1a80      	subs	r0, r0, r2
 800d36c:	bd10      	pop	{r4, pc}
 800d36e:	2800      	cmp	r0, #0
 800d370:	d1f3      	bne.n	800d35a <strncmp+0xa>
 800d372:	e7fa      	b.n	800d36a <strncmp+0x1a>
 800d374:	4610      	mov	r0, r2
 800d376:	e7f9      	b.n	800d36c <strncmp+0x1c>

0800d378 <__swbuf_r>:
 800d378:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d37a:	460e      	mov	r6, r1
 800d37c:	4614      	mov	r4, r2
 800d37e:	4605      	mov	r5, r0
 800d380:	b118      	cbz	r0, 800d38a <__swbuf_r+0x12>
 800d382:	6983      	ldr	r3, [r0, #24]
 800d384:	b90b      	cbnz	r3, 800d38a <__swbuf_r+0x12>
 800d386:	f000 f9e7 	bl	800d758 <__sinit>
 800d38a:	4b21      	ldr	r3, [pc, #132]	; (800d410 <__swbuf_r+0x98>)
 800d38c:	429c      	cmp	r4, r3
 800d38e:	d12b      	bne.n	800d3e8 <__swbuf_r+0x70>
 800d390:	686c      	ldr	r4, [r5, #4]
 800d392:	69a3      	ldr	r3, [r4, #24]
 800d394:	60a3      	str	r3, [r4, #8]
 800d396:	89a3      	ldrh	r3, [r4, #12]
 800d398:	071a      	lsls	r2, r3, #28
 800d39a:	d52f      	bpl.n	800d3fc <__swbuf_r+0x84>
 800d39c:	6923      	ldr	r3, [r4, #16]
 800d39e:	b36b      	cbz	r3, 800d3fc <__swbuf_r+0x84>
 800d3a0:	6923      	ldr	r3, [r4, #16]
 800d3a2:	6820      	ldr	r0, [r4, #0]
 800d3a4:	1ac0      	subs	r0, r0, r3
 800d3a6:	6963      	ldr	r3, [r4, #20]
 800d3a8:	b2f6      	uxtb	r6, r6
 800d3aa:	4283      	cmp	r3, r0
 800d3ac:	4637      	mov	r7, r6
 800d3ae:	dc04      	bgt.n	800d3ba <__swbuf_r+0x42>
 800d3b0:	4621      	mov	r1, r4
 800d3b2:	4628      	mov	r0, r5
 800d3b4:	f000 f93c 	bl	800d630 <_fflush_r>
 800d3b8:	bb30      	cbnz	r0, 800d408 <__swbuf_r+0x90>
 800d3ba:	68a3      	ldr	r3, [r4, #8]
 800d3bc:	3b01      	subs	r3, #1
 800d3be:	60a3      	str	r3, [r4, #8]
 800d3c0:	6823      	ldr	r3, [r4, #0]
 800d3c2:	1c5a      	adds	r2, r3, #1
 800d3c4:	6022      	str	r2, [r4, #0]
 800d3c6:	701e      	strb	r6, [r3, #0]
 800d3c8:	6963      	ldr	r3, [r4, #20]
 800d3ca:	3001      	adds	r0, #1
 800d3cc:	4283      	cmp	r3, r0
 800d3ce:	d004      	beq.n	800d3da <__swbuf_r+0x62>
 800d3d0:	89a3      	ldrh	r3, [r4, #12]
 800d3d2:	07db      	lsls	r3, r3, #31
 800d3d4:	d506      	bpl.n	800d3e4 <__swbuf_r+0x6c>
 800d3d6:	2e0a      	cmp	r6, #10
 800d3d8:	d104      	bne.n	800d3e4 <__swbuf_r+0x6c>
 800d3da:	4621      	mov	r1, r4
 800d3dc:	4628      	mov	r0, r5
 800d3de:	f000 f927 	bl	800d630 <_fflush_r>
 800d3e2:	b988      	cbnz	r0, 800d408 <__swbuf_r+0x90>
 800d3e4:	4638      	mov	r0, r7
 800d3e6:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d3e8:	4b0a      	ldr	r3, [pc, #40]	; (800d414 <__swbuf_r+0x9c>)
 800d3ea:	429c      	cmp	r4, r3
 800d3ec:	d101      	bne.n	800d3f2 <__swbuf_r+0x7a>
 800d3ee:	68ac      	ldr	r4, [r5, #8]
 800d3f0:	e7cf      	b.n	800d392 <__swbuf_r+0x1a>
 800d3f2:	4b09      	ldr	r3, [pc, #36]	; (800d418 <__swbuf_r+0xa0>)
 800d3f4:	429c      	cmp	r4, r3
 800d3f6:	bf08      	it	eq
 800d3f8:	68ec      	ldreq	r4, [r5, #12]
 800d3fa:	e7ca      	b.n	800d392 <__swbuf_r+0x1a>
 800d3fc:	4621      	mov	r1, r4
 800d3fe:	4628      	mov	r0, r5
 800d400:	f000 f81a 	bl	800d438 <__swsetup_r>
 800d404:	2800      	cmp	r0, #0
 800d406:	d0cb      	beq.n	800d3a0 <__swbuf_r+0x28>
 800d408:	f04f 37ff 	mov.w	r7, #4294967295
 800d40c:	e7ea      	b.n	800d3e4 <__swbuf_r+0x6c>
 800d40e:	bf00      	nop
 800d410:	0800e438 	.word	0x0800e438
 800d414:	0800e458 	.word	0x0800e458
 800d418:	0800e418 	.word	0x0800e418

0800d41c <__ascii_wctomb>:
 800d41c:	b149      	cbz	r1, 800d432 <__ascii_wctomb+0x16>
 800d41e:	2aff      	cmp	r2, #255	; 0xff
 800d420:	bf85      	ittet	hi
 800d422:	238a      	movhi	r3, #138	; 0x8a
 800d424:	6003      	strhi	r3, [r0, #0]
 800d426:	700a      	strbls	r2, [r1, #0]
 800d428:	f04f 30ff 	movhi.w	r0, #4294967295
 800d42c:	bf98      	it	ls
 800d42e:	2001      	movls	r0, #1
 800d430:	4770      	bx	lr
 800d432:	4608      	mov	r0, r1
 800d434:	4770      	bx	lr
	...

0800d438 <__swsetup_r>:
 800d438:	4b32      	ldr	r3, [pc, #200]	; (800d504 <__swsetup_r+0xcc>)
 800d43a:	b570      	push	{r4, r5, r6, lr}
 800d43c:	681d      	ldr	r5, [r3, #0]
 800d43e:	4606      	mov	r6, r0
 800d440:	460c      	mov	r4, r1
 800d442:	b125      	cbz	r5, 800d44e <__swsetup_r+0x16>
 800d444:	69ab      	ldr	r3, [r5, #24]
 800d446:	b913      	cbnz	r3, 800d44e <__swsetup_r+0x16>
 800d448:	4628      	mov	r0, r5
 800d44a:	f000 f985 	bl	800d758 <__sinit>
 800d44e:	4b2e      	ldr	r3, [pc, #184]	; (800d508 <__swsetup_r+0xd0>)
 800d450:	429c      	cmp	r4, r3
 800d452:	d10f      	bne.n	800d474 <__swsetup_r+0x3c>
 800d454:	686c      	ldr	r4, [r5, #4]
 800d456:	89a3      	ldrh	r3, [r4, #12]
 800d458:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d45c:	0719      	lsls	r1, r3, #28
 800d45e:	d42c      	bmi.n	800d4ba <__swsetup_r+0x82>
 800d460:	06dd      	lsls	r5, r3, #27
 800d462:	d411      	bmi.n	800d488 <__swsetup_r+0x50>
 800d464:	2309      	movs	r3, #9
 800d466:	6033      	str	r3, [r6, #0]
 800d468:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 800d46c:	81a3      	strh	r3, [r4, #12]
 800d46e:	f04f 30ff 	mov.w	r0, #4294967295
 800d472:	e03e      	b.n	800d4f2 <__swsetup_r+0xba>
 800d474:	4b25      	ldr	r3, [pc, #148]	; (800d50c <__swsetup_r+0xd4>)
 800d476:	429c      	cmp	r4, r3
 800d478:	d101      	bne.n	800d47e <__swsetup_r+0x46>
 800d47a:	68ac      	ldr	r4, [r5, #8]
 800d47c:	e7eb      	b.n	800d456 <__swsetup_r+0x1e>
 800d47e:	4b24      	ldr	r3, [pc, #144]	; (800d510 <__swsetup_r+0xd8>)
 800d480:	429c      	cmp	r4, r3
 800d482:	bf08      	it	eq
 800d484:	68ec      	ldreq	r4, [r5, #12]
 800d486:	e7e6      	b.n	800d456 <__swsetup_r+0x1e>
 800d488:	0758      	lsls	r0, r3, #29
 800d48a:	d512      	bpl.n	800d4b2 <__swsetup_r+0x7a>
 800d48c:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d48e:	b141      	cbz	r1, 800d4a2 <__swsetup_r+0x6a>
 800d490:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d494:	4299      	cmp	r1, r3
 800d496:	d002      	beq.n	800d49e <__swsetup_r+0x66>
 800d498:	4630      	mov	r0, r6
 800d49a:	f7ff fba9 	bl	800cbf0 <_free_r>
 800d49e:	2300      	movs	r3, #0
 800d4a0:	6363      	str	r3, [r4, #52]	; 0x34
 800d4a2:	89a3      	ldrh	r3, [r4, #12]
 800d4a4:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 800d4a8:	81a3      	strh	r3, [r4, #12]
 800d4aa:	2300      	movs	r3, #0
 800d4ac:	6063      	str	r3, [r4, #4]
 800d4ae:	6923      	ldr	r3, [r4, #16]
 800d4b0:	6023      	str	r3, [r4, #0]
 800d4b2:	89a3      	ldrh	r3, [r4, #12]
 800d4b4:	f043 0308 	orr.w	r3, r3, #8
 800d4b8:	81a3      	strh	r3, [r4, #12]
 800d4ba:	6923      	ldr	r3, [r4, #16]
 800d4bc:	b94b      	cbnz	r3, 800d4d2 <__swsetup_r+0x9a>
 800d4be:	89a3      	ldrh	r3, [r4, #12]
 800d4c0:	f403 7320 	and.w	r3, r3, #640	; 0x280
 800d4c4:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800d4c8:	d003      	beq.n	800d4d2 <__swsetup_r+0x9a>
 800d4ca:	4621      	mov	r1, r4
 800d4cc:	4630      	mov	r0, r6
 800d4ce:	f000 fa09 	bl	800d8e4 <__smakebuf_r>
 800d4d2:	89a0      	ldrh	r0, [r4, #12]
 800d4d4:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 800d4d8:	f010 0301 	ands.w	r3, r0, #1
 800d4dc:	d00a      	beq.n	800d4f4 <__swsetup_r+0xbc>
 800d4de:	2300      	movs	r3, #0
 800d4e0:	60a3      	str	r3, [r4, #8]
 800d4e2:	6963      	ldr	r3, [r4, #20]
 800d4e4:	425b      	negs	r3, r3
 800d4e6:	61a3      	str	r3, [r4, #24]
 800d4e8:	6923      	ldr	r3, [r4, #16]
 800d4ea:	b943      	cbnz	r3, 800d4fe <__swsetup_r+0xc6>
 800d4ec:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800d4f0:	d1ba      	bne.n	800d468 <__swsetup_r+0x30>
 800d4f2:	bd70      	pop	{r4, r5, r6, pc}
 800d4f4:	0781      	lsls	r1, r0, #30
 800d4f6:	bf58      	it	pl
 800d4f8:	6963      	ldrpl	r3, [r4, #20]
 800d4fa:	60a3      	str	r3, [r4, #8]
 800d4fc:	e7f4      	b.n	800d4e8 <__swsetup_r+0xb0>
 800d4fe:	2000      	movs	r0, #0
 800d500:	e7f7      	b.n	800d4f2 <__swsetup_r+0xba>
 800d502:	bf00      	nop
 800d504:	2000001c 	.word	0x2000001c
 800d508:	0800e438 	.word	0x0800e438
 800d50c:	0800e458 	.word	0x0800e458
 800d510:	0800e418 	.word	0x0800e418

0800d514 <abort>:
 800d514:	b508      	push	{r3, lr}
 800d516:	2006      	movs	r0, #6
 800d518:	f000 faa2 	bl	800da60 <raise>
 800d51c:	2001      	movs	r0, #1
 800d51e:	f7f8 fd59 	bl	8005fd4 <_exit>
	...

0800d524 <__sflush_r>:
 800d524:	898a      	ldrh	r2, [r1, #12]
 800d526:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d52a:	4605      	mov	r5, r0
 800d52c:	0710      	lsls	r0, r2, #28
 800d52e:	460c      	mov	r4, r1
 800d530:	d458      	bmi.n	800d5e4 <__sflush_r+0xc0>
 800d532:	684b      	ldr	r3, [r1, #4]
 800d534:	2b00      	cmp	r3, #0
 800d536:	dc05      	bgt.n	800d544 <__sflush_r+0x20>
 800d538:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	dc02      	bgt.n	800d544 <__sflush_r+0x20>
 800d53e:	2000      	movs	r0, #0
 800d540:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d544:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d546:	2e00      	cmp	r6, #0
 800d548:	d0f9      	beq.n	800d53e <__sflush_r+0x1a>
 800d54a:	2300      	movs	r3, #0
 800d54c:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 800d550:	682f      	ldr	r7, [r5, #0]
 800d552:	602b      	str	r3, [r5, #0]
 800d554:	d032      	beq.n	800d5bc <__sflush_r+0x98>
 800d556:	6d60      	ldr	r0, [r4, #84]	; 0x54
 800d558:	89a3      	ldrh	r3, [r4, #12]
 800d55a:	075a      	lsls	r2, r3, #29
 800d55c:	d505      	bpl.n	800d56a <__sflush_r+0x46>
 800d55e:	6863      	ldr	r3, [r4, #4]
 800d560:	1ac0      	subs	r0, r0, r3
 800d562:	6b63      	ldr	r3, [r4, #52]	; 0x34
 800d564:	b10b      	cbz	r3, 800d56a <__sflush_r+0x46>
 800d566:	6c23      	ldr	r3, [r4, #64]	; 0x40
 800d568:	1ac0      	subs	r0, r0, r3
 800d56a:	2300      	movs	r3, #0
 800d56c:	4602      	mov	r2, r0
 800d56e:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 800d570:	6a21      	ldr	r1, [r4, #32]
 800d572:	4628      	mov	r0, r5
 800d574:	47b0      	blx	r6
 800d576:	1c43      	adds	r3, r0, #1
 800d578:	89a3      	ldrh	r3, [r4, #12]
 800d57a:	d106      	bne.n	800d58a <__sflush_r+0x66>
 800d57c:	6829      	ldr	r1, [r5, #0]
 800d57e:	291d      	cmp	r1, #29
 800d580:	d82c      	bhi.n	800d5dc <__sflush_r+0xb8>
 800d582:	4a2a      	ldr	r2, [pc, #168]	; (800d62c <__sflush_r+0x108>)
 800d584:	40ca      	lsrs	r2, r1
 800d586:	07d6      	lsls	r6, r2, #31
 800d588:	d528      	bpl.n	800d5dc <__sflush_r+0xb8>
 800d58a:	2200      	movs	r2, #0
 800d58c:	6062      	str	r2, [r4, #4]
 800d58e:	04d9      	lsls	r1, r3, #19
 800d590:	6922      	ldr	r2, [r4, #16]
 800d592:	6022      	str	r2, [r4, #0]
 800d594:	d504      	bpl.n	800d5a0 <__sflush_r+0x7c>
 800d596:	1c42      	adds	r2, r0, #1
 800d598:	d101      	bne.n	800d59e <__sflush_r+0x7a>
 800d59a:	682b      	ldr	r3, [r5, #0]
 800d59c:	b903      	cbnz	r3, 800d5a0 <__sflush_r+0x7c>
 800d59e:	6560      	str	r0, [r4, #84]	; 0x54
 800d5a0:	6b61      	ldr	r1, [r4, #52]	; 0x34
 800d5a2:	602f      	str	r7, [r5, #0]
 800d5a4:	2900      	cmp	r1, #0
 800d5a6:	d0ca      	beq.n	800d53e <__sflush_r+0x1a>
 800d5a8:	f104 0344 	add.w	r3, r4, #68	; 0x44
 800d5ac:	4299      	cmp	r1, r3
 800d5ae:	d002      	beq.n	800d5b6 <__sflush_r+0x92>
 800d5b0:	4628      	mov	r0, r5
 800d5b2:	f7ff fb1d 	bl	800cbf0 <_free_r>
 800d5b6:	2000      	movs	r0, #0
 800d5b8:	6360      	str	r0, [r4, #52]	; 0x34
 800d5ba:	e7c1      	b.n	800d540 <__sflush_r+0x1c>
 800d5bc:	6a21      	ldr	r1, [r4, #32]
 800d5be:	2301      	movs	r3, #1
 800d5c0:	4628      	mov	r0, r5
 800d5c2:	47b0      	blx	r6
 800d5c4:	1c41      	adds	r1, r0, #1
 800d5c6:	d1c7      	bne.n	800d558 <__sflush_r+0x34>
 800d5c8:	682b      	ldr	r3, [r5, #0]
 800d5ca:	2b00      	cmp	r3, #0
 800d5cc:	d0c4      	beq.n	800d558 <__sflush_r+0x34>
 800d5ce:	2b1d      	cmp	r3, #29
 800d5d0:	d001      	beq.n	800d5d6 <__sflush_r+0xb2>
 800d5d2:	2b16      	cmp	r3, #22
 800d5d4:	d101      	bne.n	800d5da <__sflush_r+0xb6>
 800d5d6:	602f      	str	r7, [r5, #0]
 800d5d8:	e7b1      	b.n	800d53e <__sflush_r+0x1a>
 800d5da:	89a3      	ldrh	r3, [r4, #12]
 800d5dc:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d5e0:	81a3      	strh	r3, [r4, #12]
 800d5e2:	e7ad      	b.n	800d540 <__sflush_r+0x1c>
 800d5e4:	690f      	ldr	r7, [r1, #16]
 800d5e6:	2f00      	cmp	r7, #0
 800d5e8:	d0a9      	beq.n	800d53e <__sflush_r+0x1a>
 800d5ea:	0793      	lsls	r3, r2, #30
 800d5ec:	680e      	ldr	r6, [r1, #0]
 800d5ee:	bf08      	it	eq
 800d5f0:	694b      	ldreq	r3, [r1, #20]
 800d5f2:	600f      	str	r7, [r1, #0]
 800d5f4:	bf18      	it	ne
 800d5f6:	2300      	movne	r3, #0
 800d5f8:	eba6 0807 	sub.w	r8, r6, r7
 800d5fc:	608b      	str	r3, [r1, #8]
 800d5fe:	f1b8 0f00 	cmp.w	r8, #0
 800d602:	dd9c      	ble.n	800d53e <__sflush_r+0x1a>
 800d604:	6a21      	ldr	r1, [r4, #32]
 800d606:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 800d608:	4643      	mov	r3, r8
 800d60a:	463a      	mov	r2, r7
 800d60c:	4628      	mov	r0, r5
 800d60e:	47b0      	blx	r6
 800d610:	2800      	cmp	r0, #0
 800d612:	dc06      	bgt.n	800d622 <__sflush_r+0xfe>
 800d614:	89a3      	ldrh	r3, [r4, #12]
 800d616:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800d61a:	81a3      	strh	r3, [r4, #12]
 800d61c:	f04f 30ff 	mov.w	r0, #4294967295
 800d620:	e78e      	b.n	800d540 <__sflush_r+0x1c>
 800d622:	4407      	add	r7, r0
 800d624:	eba8 0800 	sub.w	r8, r8, r0
 800d628:	e7e9      	b.n	800d5fe <__sflush_r+0xda>
 800d62a:	bf00      	nop
 800d62c:	20400001 	.word	0x20400001

0800d630 <_fflush_r>:
 800d630:	b538      	push	{r3, r4, r5, lr}
 800d632:	690b      	ldr	r3, [r1, #16]
 800d634:	4605      	mov	r5, r0
 800d636:	460c      	mov	r4, r1
 800d638:	b913      	cbnz	r3, 800d640 <_fflush_r+0x10>
 800d63a:	2500      	movs	r5, #0
 800d63c:	4628      	mov	r0, r5
 800d63e:	bd38      	pop	{r3, r4, r5, pc}
 800d640:	b118      	cbz	r0, 800d64a <_fflush_r+0x1a>
 800d642:	6983      	ldr	r3, [r0, #24]
 800d644:	b90b      	cbnz	r3, 800d64a <_fflush_r+0x1a>
 800d646:	f000 f887 	bl	800d758 <__sinit>
 800d64a:	4b14      	ldr	r3, [pc, #80]	; (800d69c <_fflush_r+0x6c>)
 800d64c:	429c      	cmp	r4, r3
 800d64e:	d11b      	bne.n	800d688 <_fflush_r+0x58>
 800d650:	686c      	ldr	r4, [r5, #4]
 800d652:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d656:	2b00      	cmp	r3, #0
 800d658:	d0ef      	beq.n	800d63a <_fflush_r+0xa>
 800d65a:	6e62      	ldr	r2, [r4, #100]	; 0x64
 800d65c:	07d0      	lsls	r0, r2, #31
 800d65e:	d404      	bmi.n	800d66a <_fflush_r+0x3a>
 800d660:	0599      	lsls	r1, r3, #22
 800d662:	d402      	bmi.n	800d66a <_fflush_r+0x3a>
 800d664:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d666:	f000 f915 	bl	800d894 <__retarget_lock_acquire_recursive>
 800d66a:	4628      	mov	r0, r5
 800d66c:	4621      	mov	r1, r4
 800d66e:	f7ff ff59 	bl	800d524 <__sflush_r>
 800d672:	6e63      	ldr	r3, [r4, #100]	; 0x64
 800d674:	07da      	lsls	r2, r3, #31
 800d676:	4605      	mov	r5, r0
 800d678:	d4e0      	bmi.n	800d63c <_fflush_r+0xc>
 800d67a:	89a3      	ldrh	r3, [r4, #12]
 800d67c:	059b      	lsls	r3, r3, #22
 800d67e:	d4dd      	bmi.n	800d63c <_fflush_r+0xc>
 800d680:	6da0      	ldr	r0, [r4, #88]	; 0x58
 800d682:	f000 f908 	bl	800d896 <__retarget_lock_release_recursive>
 800d686:	e7d9      	b.n	800d63c <_fflush_r+0xc>
 800d688:	4b05      	ldr	r3, [pc, #20]	; (800d6a0 <_fflush_r+0x70>)
 800d68a:	429c      	cmp	r4, r3
 800d68c:	d101      	bne.n	800d692 <_fflush_r+0x62>
 800d68e:	68ac      	ldr	r4, [r5, #8]
 800d690:	e7df      	b.n	800d652 <_fflush_r+0x22>
 800d692:	4b04      	ldr	r3, [pc, #16]	; (800d6a4 <_fflush_r+0x74>)
 800d694:	429c      	cmp	r4, r3
 800d696:	bf08      	it	eq
 800d698:	68ec      	ldreq	r4, [r5, #12]
 800d69a:	e7da      	b.n	800d652 <_fflush_r+0x22>
 800d69c:	0800e438 	.word	0x0800e438
 800d6a0:	0800e458 	.word	0x0800e458
 800d6a4:	0800e418 	.word	0x0800e418

0800d6a8 <std>:
 800d6a8:	2300      	movs	r3, #0
 800d6aa:	b510      	push	{r4, lr}
 800d6ac:	4604      	mov	r4, r0
 800d6ae:	e9c0 3300 	strd	r3, r3, [r0]
 800d6b2:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800d6b6:	6083      	str	r3, [r0, #8]
 800d6b8:	8181      	strh	r1, [r0, #12]
 800d6ba:	6643      	str	r3, [r0, #100]	; 0x64
 800d6bc:	81c2      	strh	r2, [r0, #14]
 800d6be:	6183      	str	r3, [r0, #24]
 800d6c0:	4619      	mov	r1, r3
 800d6c2:	2208      	movs	r2, #8
 800d6c4:	305c      	adds	r0, #92	; 0x5c
 800d6c6:	f7fc f859 	bl	800977c <memset>
 800d6ca:	4b05      	ldr	r3, [pc, #20]	; (800d6e0 <std+0x38>)
 800d6cc:	6263      	str	r3, [r4, #36]	; 0x24
 800d6ce:	4b05      	ldr	r3, [pc, #20]	; (800d6e4 <std+0x3c>)
 800d6d0:	62a3      	str	r3, [r4, #40]	; 0x28
 800d6d2:	4b05      	ldr	r3, [pc, #20]	; (800d6e8 <std+0x40>)
 800d6d4:	62e3      	str	r3, [r4, #44]	; 0x2c
 800d6d6:	4b05      	ldr	r3, [pc, #20]	; (800d6ec <std+0x44>)
 800d6d8:	6224      	str	r4, [r4, #32]
 800d6da:	6323      	str	r3, [r4, #48]	; 0x30
 800d6dc:	bd10      	pop	{r4, pc}
 800d6de:	bf00      	nop
 800d6e0:	0800da99 	.word	0x0800da99
 800d6e4:	0800dabb 	.word	0x0800dabb
 800d6e8:	0800daf3 	.word	0x0800daf3
 800d6ec:	0800db17 	.word	0x0800db17

0800d6f0 <_cleanup_r>:
 800d6f0:	4901      	ldr	r1, [pc, #4]	; (800d6f8 <_cleanup_r+0x8>)
 800d6f2:	f000 b8af 	b.w	800d854 <_fwalk_reent>
 800d6f6:	bf00      	nop
 800d6f8:	0800d631 	.word	0x0800d631

0800d6fc <__sfmoreglue>:
 800d6fc:	b570      	push	{r4, r5, r6, lr}
 800d6fe:	2268      	movs	r2, #104	; 0x68
 800d700:	1e4d      	subs	r5, r1, #1
 800d702:	4355      	muls	r5, r2
 800d704:	460e      	mov	r6, r1
 800d706:	f105 0174 	add.w	r1, r5, #116	; 0x74
 800d70a:	f7ff fadd 	bl	800ccc8 <_malloc_r>
 800d70e:	4604      	mov	r4, r0
 800d710:	b140      	cbz	r0, 800d724 <__sfmoreglue+0x28>
 800d712:	2100      	movs	r1, #0
 800d714:	e9c0 1600 	strd	r1, r6, [r0]
 800d718:	300c      	adds	r0, #12
 800d71a:	60a0      	str	r0, [r4, #8]
 800d71c:	f105 0268 	add.w	r2, r5, #104	; 0x68
 800d720:	f7fc f82c 	bl	800977c <memset>
 800d724:	4620      	mov	r0, r4
 800d726:	bd70      	pop	{r4, r5, r6, pc}

0800d728 <__sfp_lock_acquire>:
 800d728:	4801      	ldr	r0, [pc, #4]	; (800d730 <__sfp_lock_acquire+0x8>)
 800d72a:	f000 b8b3 	b.w	800d894 <__retarget_lock_acquire_recursive>
 800d72e:	bf00      	nop
 800d730:	2000056d 	.word	0x2000056d

0800d734 <__sfp_lock_release>:
 800d734:	4801      	ldr	r0, [pc, #4]	; (800d73c <__sfp_lock_release+0x8>)
 800d736:	f000 b8ae 	b.w	800d896 <__retarget_lock_release_recursive>
 800d73a:	bf00      	nop
 800d73c:	2000056d 	.word	0x2000056d

0800d740 <__sinit_lock_acquire>:
 800d740:	4801      	ldr	r0, [pc, #4]	; (800d748 <__sinit_lock_acquire+0x8>)
 800d742:	f000 b8a7 	b.w	800d894 <__retarget_lock_acquire_recursive>
 800d746:	bf00      	nop
 800d748:	2000056e 	.word	0x2000056e

0800d74c <__sinit_lock_release>:
 800d74c:	4801      	ldr	r0, [pc, #4]	; (800d754 <__sinit_lock_release+0x8>)
 800d74e:	f000 b8a2 	b.w	800d896 <__retarget_lock_release_recursive>
 800d752:	bf00      	nop
 800d754:	2000056e 	.word	0x2000056e

0800d758 <__sinit>:
 800d758:	b510      	push	{r4, lr}
 800d75a:	4604      	mov	r4, r0
 800d75c:	f7ff fff0 	bl	800d740 <__sinit_lock_acquire>
 800d760:	69a3      	ldr	r3, [r4, #24]
 800d762:	b11b      	cbz	r3, 800d76c <__sinit+0x14>
 800d764:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800d768:	f7ff bff0 	b.w	800d74c <__sinit_lock_release>
 800d76c:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
 800d770:	6523      	str	r3, [r4, #80]	; 0x50
 800d772:	4b13      	ldr	r3, [pc, #76]	; (800d7c0 <__sinit+0x68>)
 800d774:	4a13      	ldr	r2, [pc, #76]	; (800d7c4 <__sinit+0x6c>)
 800d776:	681b      	ldr	r3, [r3, #0]
 800d778:	62a2      	str	r2, [r4, #40]	; 0x28
 800d77a:	42a3      	cmp	r3, r4
 800d77c:	bf04      	itt	eq
 800d77e:	2301      	moveq	r3, #1
 800d780:	61a3      	streq	r3, [r4, #24]
 800d782:	4620      	mov	r0, r4
 800d784:	f000 f820 	bl	800d7c8 <__sfp>
 800d788:	6060      	str	r0, [r4, #4]
 800d78a:	4620      	mov	r0, r4
 800d78c:	f000 f81c 	bl	800d7c8 <__sfp>
 800d790:	60a0      	str	r0, [r4, #8]
 800d792:	4620      	mov	r0, r4
 800d794:	f000 f818 	bl	800d7c8 <__sfp>
 800d798:	2200      	movs	r2, #0
 800d79a:	60e0      	str	r0, [r4, #12]
 800d79c:	2104      	movs	r1, #4
 800d79e:	6860      	ldr	r0, [r4, #4]
 800d7a0:	f7ff ff82 	bl	800d6a8 <std>
 800d7a4:	68a0      	ldr	r0, [r4, #8]
 800d7a6:	2201      	movs	r2, #1
 800d7a8:	2109      	movs	r1, #9
 800d7aa:	f7ff ff7d 	bl	800d6a8 <std>
 800d7ae:	68e0      	ldr	r0, [r4, #12]
 800d7b0:	2202      	movs	r2, #2
 800d7b2:	2112      	movs	r1, #18
 800d7b4:	f7ff ff78 	bl	800d6a8 <std>
 800d7b8:	2301      	movs	r3, #1
 800d7ba:	61a3      	str	r3, [r4, #24]
 800d7bc:	e7d2      	b.n	800d764 <__sinit+0xc>
 800d7be:	bf00      	nop
 800d7c0:	0800df7c 	.word	0x0800df7c
 800d7c4:	0800d6f1 	.word	0x0800d6f1

0800d7c8 <__sfp>:
 800d7c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800d7ca:	4607      	mov	r7, r0
 800d7cc:	f7ff ffac 	bl	800d728 <__sfp_lock_acquire>
 800d7d0:	4b1e      	ldr	r3, [pc, #120]	; (800d84c <__sfp+0x84>)
 800d7d2:	681e      	ldr	r6, [r3, #0]
 800d7d4:	69b3      	ldr	r3, [r6, #24]
 800d7d6:	b913      	cbnz	r3, 800d7de <__sfp+0x16>
 800d7d8:	4630      	mov	r0, r6
 800d7da:	f7ff ffbd 	bl	800d758 <__sinit>
 800d7de:	3648      	adds	r6, #72	; 0x48
 800d7e0:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
 800d7e4:	3b01      	subs	r3, #1
 800d7e6:	d503      	bpl.n	800d7f0 <__sfp+0x28>
 800d7e8:	6833      	ldr	r3, [r6, #0]
 800d7ea:	b30b      	cbz	r3, 800d830 <__sfp+0x68>
 800d7ec:	6836      	ldr	r6, [r6, #0]
 800d7ee:	e7f7      	b.n	800d7e0 <__sfp+0x18>
 800d7f0:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
 800d7f4:	b9d5      	cbnz	r5, 800d82c <__sfp+0x64>
 800d7f6:	4b16      	ldr	r3, [pc, #88]	; (800d850 <__sfp+0x88>)
 800d7f8:	60e3      	str	r3, [r4, #12]
 800d7fa:	f104 0058 	add.w	r0, r4, #88	; 0x58
 800d7fe:	6665      	str	r5, [r4, #100]	; 0x64
 800d800:	f000 f847 	bl	800d892 <__retarget_lock_init_recursive>
 800d804:	f7ff ff96 	bl	800d734 <__sfp_lock_release>
 800d808:	e9c4 5501 	strd	r5, r5, [r4, #4]
 800d80c:	e9c4 5504 	strd	r5, r5, [r4, #16]
 800d810:	6025      	str	r5, [r4, #0]
 800d812:	61a5      	str	r5, [r4, #24]
 800d814:	2208      	movs	r2, #8
 800d816:	4629      	mov	r1, r5
 800d818:	f104 005c 	add.w	r0, r4, #92	; 0x5c
 800d81c:	f7fb ffae 	bl	800977c <memset>
 800d820:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
 800d824:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
 800d828:	4620      	mov	r0, r4
 800d82a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800d82c:	3468      	adds	r4, #104	; 0x68
 800d82e:	e7d9      	b.n	800d7e4 <__sfp+0x1c>
 800d830:	2104      	movs	r1, #4
 800d832:	4638      	mov	r0, r7
 800d834:	f7ff ff62 	bl	800d6fc <__sfmoreglue>
 800d838:	4604      	mov	r4, r0
 800d83a:	6030      	str	r0, [r6, #0]
 800d83c:	2800      	cmp	r0, #0
 800d83e:	d1d5      	bne.n	800d7ec <__sfp+0x24>
 800d840:	f7ff ff78 	bl	800d734 <__sfp_lock_release>
 800d844:	230c      	movs	r3, #12
 800d846:	603b      	str	r3, [r7, #0]
 800d848:	e7ee      	b.n	800d828 <__sfp+0x60>
 800d84a:	bf00      	nop
 800d84c:	0800df7c 	.word	0x0800df7c
 800d850:	ffff0001 	.word	0xffff0001

0800d854 <_fwalk_reent>:
 800d854:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800d858:	4606      	mov	r6, r0
 800d85a:	4688      	mov	r8, r1
 800d85c:	f100 0448 	add.w	r4, r0, #72	; 0x48
 800d860:	2700      	movs	r7, #0
 800d862:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 800d866:	f1b9 0901 	subs.w	r9, r9, #1
 800d86a:	d505      	bpl.n	800d878 <_fwalk_reent+0x24>
 800d86c:	6824      	ldr	r4, [r4, #0]
 800d86e:	2c00      	cmp	r4, #0
 800d870:	d1f7      	bne.n	800d862 <_fwalk_reent+0xe>
 800d872:	4638      	mov	r0, r7
 800d874:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800d878:	89ab      	ldrh	r3, [r5, #12]
 800d87a:	2b01      	cmp	r3, #1
 800d87c:	d907      	bls.n	800d88e <_fwalk_reent+0x3a>
 800d87e:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 800d882:	3301      	adds	r3, #1
 800d884:	d003      	beq.n	800d88e <_fwalk_reent+0x3a>
 800d886:	4629      	mov	r1, r5
 800d888:	4630      	mov	r0, r6
 800d88a:	47c0      	blx	r8
 800d88c:	4307      	orrs	r7, r0
 800d88e:	3568      	adds	r5, #104	; 0x68
 800d890:	e7e9      	b.n	800d866 <_fwalk_reent+0x12>

0800d892 <__retarget_lock_init_recursive>:
 800d892:	4770      	bx	lr

0800d894 <__retarget_lock_acquire_recursive>:
 800d894:	4770      	bx	lr

0800d896 <__retarget_lock_release_recursive>:
 800d896:	4770      	bx	lr

0800d898 <__swhatbuf_r>:
 800d898:	b570      	push	{r4, r5, r6, lr}
 800d89a:	460e      	mov	r6, r1
 800d89c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800d8a0:	2900      	cmp	r1, #0
 800d8a2:	b096      	sub	sp, #88	; 0x58
 800d8a4:	4614      	mov	r4, r2
 800d8a6:	461d      	mov	r5, r3
 800d8a8:	da08      	bge.n	800d8bc <__swhatbuf_r+0x24>
 800d8aa:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
 800d8ae:	2200      	movs	r2, #0
 800d8b0:	602a      	str	r2, [r5, #0]
 800d8b2:	061a      	lsls	r2, r3, #24
 800d8b4:	d410      	bmi.n	800d8d8 <__swhatbuf_r+0x40>
 800d8b6:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800d8ba:	e00e      	b.n	800d8da <__swhatbuf_r+0x42>
 800d8bc:	466a      	mov	r2, sp
 800d8be:	f000 f951 	bl	800db64 <_fstat_r>
 800d8c2:	2800      	cmp	r0, #0
 800d8c4:	dbf1      	blt.n	800d8aa <__swhatbuf_r+0x12>
 800d8c6:	9a01      	ldr	r2, [sp, #4]
 800d8c8:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
 800d8cc:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
 800d8d0:	425a      	negs	r2, r3
 800d8d2:	415a      	adcs	r2, r3
 800d8d4:	602a      	str	r2, [r5, #0]
 800d8d6:	e7ee      	b.n	800d8b6 <__swhatbuf_r+0x1e>
 800d8d8:	2340      	movs	r3, #64	; 0x40
 800d8da:	2000      	movs	r0, #0
 800d8dc:	6023      	str	r3, [r4, #0]
 800d8de:	b016      	add	sp, #88	; 0x58
 800d8e0:	bd70      	pop	{r4, r5, r6, pc}
	...

0800d8e4 <__smakebuf_r>:
 800d8e4:	898b      	ldrh	r3, [r1, #12]
 800d8e6:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800d8e8:	079d      	lsls	r5, r3, #30
 800d8ea:	4606      	mov	r6, r0
 800d8ec:	460c      	mov	r4, r1
 800d8ee:	d507      	bpl.n	800d900 <__smakebuf_r+0x1c>
 800d8f0:	f104 0347 	add.w	r3, r4, #71	; 0x47
 800d8f4:	6023      	str	r3, [r4, #0]
 800d8f6:	6123      	str	r3, [r4, #16]
 800d8f8:	2301      	movs	r3, #1
 800d8fa:	6163      	str	r3, [r4, #20]
 800d8fc:	b002      	add	sp, #8
 800d8fe:	bd70      	pop	{r4, r5, r6, pc}
 800d900:	ab01      	add	r3, sp, #4
 800d902:	466a      	mov	r2, sp
 800d904:	f7ff ffc8 	bl	800d898 <__swhatbuf_r>
 800d908:	9900      	ldr	r1, [sp, #0]
 800d90a:	4605      	mov	r5, r0
 800d90c:	4630      	mov	r0, r6
 800d90e:	f7ff f9db 	bl	800ccc8 <_malloc_r>
 800d912:	b948      	cbnz	r0, 800d928 <__smakebuf_r+0x44>
 800d914:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800d918:	059a      	lsls	r2, r3, #22
 800d91a:	d4ef      	bmi.n	800d8fc <__smakebuf_r+0x18>
 800d91c:	f023 0303 	bic.w	r3, r3, #3
 800d920:	f043 0302 	orr.w	r3, r3, #2
 800d924:	81a3      	strh	r3, [r4, #12]
 800d926:	e7e3      	b.n	800d8f0 <__smakebuf_r+0xc>
 800d928:	4b0d      	ldr	r3, [pc, #52]	; (800d960 <__smakebuf_r+0x7c>)
 800d92a:	62b3      	str	r3, [r6, #40]	; 0x28
 800d92c:	89a3      	ldrh	r3, [r4, #12]
 800d92e:	6020      	str	r0, [r4, #0]
 800d930:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800d934:	81a3      	strh	r3, [r4, #12]
 800d936:	9b00      	ldr	r3, [sp, #0]
 800d938:	6163      	str	r3, [r4, #20]
 800d93a:	9b01      	ldr	r3, [sp, #4]
 800d93c:	6120      	str	r0, [r4, #16]
 800d93e:	b15b      	cbz	r3, 800d958 <__smakebuf_r+0x74>
 800d940:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800d944:	4630      	mov	r0, r6
 800d946:	f000 f91f 	bl	800db88 <_isatty_r>
 800d94a:	b128      	cbz	r0, 800d958 <__smakebuf_r+0x74>
 800d94c:	89a3      	ldrh	r3, [r4, #12]
 800d94e:	f023 0303 	bic.w	r3, r3, #3
 800d952:	f043 0301 	orr.w	r3, r3, #1
 800d956:	81a3      	strh	r3, [r4, #12]
 800d958:	89a0      	ldrh	r0, [r4, #12]
 800d95a:	4305      	orrs	r5, r0
 800d95c:	81a5      	strh	r5, [r4, #12]
 800d95e:	e7cd      	b.n	800d8fc <__smakebuf_r+0x18>
 800d960:	0800d6f1 	.word	0x0800d6f1

0800d964 <memmove>:
 800d964:	4288      	cmp	r0, r1
 800d966:	b510      	push	{r4, lr}
 800d968:	eb01 0402 	add.w	r4, r1, r2
 800d96c:	d902      	bls.n	800d974 <memmove+0x10>
 800d96e:	4284      	cmp	r4, r0
 800d970:	4623      	mov	r3, r4
 800d972:	d807      	bhi.n	800d984 <memmove+0x20>
 800d974:	1e43      	subs	r3, r0, #1
 800d976:	42a1      	cmp	r1, r4
 800d978:	d008      	beq.n	800d98c <memmove+0x28>
 800d97a:	f811 2b01 	ldrb.w	r2, [r1], #1
 800d97e:	f803 2f01 	strb.w	r2, [r3, #1]!
 800d982:	e7f8      	b.n	800d976 <memmove+0x12>
 800d984:	4402      	add	r2, r0
 800d986:	4601      	mov	r1, r0
 800d988:	428a      	cmp	r2, r1
 800d98a:	d100      	bne.n	800d98e <memmove+0x2a>
 800d98c:	bd10      	pop	{r4, pc}
 800d98e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800d992:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800d996:	e7f7      	b.n	800d988 <memmove+0x24>

0800d998 <__malloc_lock>:
 800d998:	4801      	ldr	r0, [pc, #4]	; (800d9a0 <__malloc_lock+0x8>)
 800d99a:	f7ff bf7b 	b.w	800d894 <__retarget_lock_acquire_recursive>
 800d99e:	bf00      	nop
 800d9a0:	2000056c 	.word	0x2000056c

0800d9a4 <__malloc_unlock>:
 800d9a4:	4801      	ldr	r0, [pc, #4]	; (800d9ac <__malloc_unlock+0x8>)
 800d9a6:	f7ff bf76 	b.w	800d896 <__retarget_lock_release_recursive>
 800d9aa:	bf00      	nop
 800d9ac:	2000056c 	.word	0x2000056c

0800d9b0 <_realloc_r>:
 800d9b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800d9b4:	4680      	mov	r8, r0
 800d9b6:	4614      	mov	r4, r2
 800d9b8:	460e      	mov	r6, r1
 800d9ba:	b921      	cbnz	r1, 800d9c6 <_realloc_r+0x16>
 800d9bc:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800d9c0:	4611      	mov	r1, r2
 800d9c2:	f7ff b981 	b.w	800ccc8 <_malloc_r>
 800d9c6:	b92a      	cbnz	r2, 800d9d4 <_realloc_r+0x24>
 800d9c8:	f7ff f912 	bl	800cbf0 <_free_r>
 800d9cc:	4625      	mov	r5, r4
 800d9ce:	4628      	mov	r0, r5
 800d9d0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800d9d4:	f000 f8fa 	bl	800dbcc <_malloc_usable_size_r>
 800d9d8:	4284      	cmp	r4, r0
 800d9da:	4607      	mov	r7, r0
 800d9dc:	d802      	bhi.n	800d9e4 <_realloc_r+0x34>
 800d9de:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800d9e2:	d812      	bhi.n	800da0a <_realloc_r+0x5a>
 800d9e4:	4621      	mov	r1, r4
 800d9e6:	4640      	mov	r0, r8
 800d9e8:	f7ff f96e 	bl	800ccc8 <_malloc_r>
 800d9ec:	4605      	mov	r5, r0
 800d9ee:	2800      	cmp	r0, #0
 800d9f0:	d0ed      	beq.n	800d9ce <_realloc_r+0x1e>
 800d9f2:	42bc      	cmp	r4, r7
 800d9f4:	4622      	mov	r2, r4
 800d9f6:	4631      	mov	r1, r6
 800d9f8:	bf28      	it	cs
 800d9fa:	463a      	movcs	r2, r7
 800d9fc:	f7fe fc12 	bl	800c224 <memcpy>
 800da00:	4631      	mov	r1, r6
 800da02:	4640      	mov	r0, r8
 800da04:	f7ff f8f4 	bl	800cbf0 <_free_r>
 800da08:	e7e1      	b.n	800d9ce <_realloc_r+0x1e>
 800da0a:	4635      	mov	r5, r6
 800da0c:	e7df      	b.n	800d9ce <_realloc_r+0x1e>

0800da0e <_raise_r>:
 800da0e:	291f      	cmp	r1, #31
 800da10:	b538      	push	{r3, r4, r5, lr}
 800da12:	4604      	mov	r4, r0
 800da14:	460d      	mov	r5, r1
 800da16:	d904      	bls.n	800da22 <_raise_r+0x14>
 800da18:	2316      	movs	r3, #22
 800da1a:	6003      	str	r3, [r0, #0]
 800da1c:	f04f 30ff 	mov.w	r0, #4294967295
 800da20:	bd38      	pop	{r3, r4, r5, pc}
 800da22:	6c42      	ldr	r2, [r0, #68]	; 0x44
 800da24:	b112      	cbz	r2, 800da2c <_raise_r+0x1e>
 800da26:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800da2a:	b94b      	cbnz	r3, 800da40 <_raise_r+0x32>
 800da2c:	4620      	mov	r0, r4
 800da2e:	f000 f831 	bl	800da94 <_getpid_r>
 800da32:	462a      	mov	r2, r5
 800da34:	4601      	mov	r1, r0
 800da36:	4620      	mov	r0, r4
 800da38:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800da3c:	f000 b818 	b.w	800da70 <_kill_r>
 800da40:	2b01      	cmp	r3, #1
 800da42:	d00a      	beq.n	800da5a <_raise_r+0x4c>
 800da44:	1c59      	adds	r1, r3, #1
 800da46:	d103      	bne.n	800da50 <_raise_r+0x42>
 800da48:	2316      	movs	r3, #22
 800da4a:	6003      	str	r3, [r0, #0]
 800da4c:	2001      	movs	r0, #1
 800da4e:	e7e7      	b.n	800da20 <_raise_r+0x12>
 800da50:	2400      	movs	r4, #0
 800da52:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800da56:	4628      	mov	r0, r5
 800da58:	4798      	blx	r3
 800da5a:	2000      	movs	r0, #0
 800da5c:	e7e0      	b.n	800da20 <_raise_r+0x12>
	...

0800da60 <raise>:
 800da60:	4b02      	ldr	r3, [pc, #8]	; (800da6c <raise+0xc>)
 800da62:	4601      	mov	r1, r0
 800da64:	6818      	ldr	r0, [r3, #0]
 800da66:	f7ff bfd2 	b.w	800da0e <_raise_r>
 800da6a:	bf00      	nop
 800da6c:	2000001c 	.word	0x2000001c

0800da70 <_kill_r>:
 800da70:	b538      	push	{r3, r4, r5, lr}
 800da72:	4d07      	ldr	r5, [pc, #28]	; (800da90 <_kill_r+0x20>)
 800da74:	2300      	movs	r3, #0
 800da76:	4604      	mov	r4, r0
 800da78:	4608      	mov	r0, r1
 800da7a:	4611      	mov	r1, r2
 800da7c:	602b      	str	r3, [r5, #0]
 800da7e:	f7f8 fa99 	bl	8005fb4 <_kill>
 800da82:	1c43      	adds	r3, r0, #1
 800da84:	d102      	bne.n	800da8c <_kill_r+0x1c>
 800da86:	682b      	ldr	r3, [r5, #0]
 800da88:	b103      	cbz	r3, 800da8c <_kill_r+0x1c>
 800da8a:	6023      	str	r3, [r4, #0]
 800da8c:	bd38      	pop	{r3, r4, r5, pc}
 800da8e:	bf00      	nop
 800da90:	20000570 	.word	0x20000570

0800da94 <_getpid_r>:
 800da94:	f7f8 ba86 	b.w	8005fa4 <_getpid>

0800da98 <__sread>:
 800da98:	b510      	push	{r4, lr}
 800da9a:	460c      	mov	r4, r1
 800da9c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800daa0:	f000 f89c 	bl	800dbdc <_read_r>
 800daa4:	2800      	cmp	r0, #0
 800daa6:	bfab      	itete	ge
 800daa8:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 800daaa:	89a3      	ldrhlt	r3, [r4, #12]
 800daac:	181b      	addge	r3, r3, r0
 800daae:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 800dab2:	bfac      	ite	ge
 800dab4:	6563      	strge	r3, [r4, #84]	; 0x54
 800dab6:	81a3      	strhlt	r3, [r4, #12]
 800dab8:	bd10      	pop	{r4, pc}

0800daba <__swrite>:
 800daba:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dabe:	461f      	mov	r7, r3
 800dac0:	898b      	ldrh	r3, [r1, #12]
 800dac2:	05db      	lsls	r3, r3, #23
 800dac4:	4605      	mov	r5, r0
 800dac6:	460c      	mov	r4, r1
 800dac8:	4616      	mov	r6, r2
 800daca:	d505      	bpl.n	800dad8 <__swrite+0x1e>
 800dacc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dad0:	2302      	movs	r3, #2
 800dad2:	2200      	movs	r2, #0
 800dad4:	f000 f868 	bl	800dba8 <_lseek_r>
 800dad8:	89a3      	ldrh	r3, [r4, #12]
 800dada:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800dade:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800dae2:	81a3      	strh	r3, [r4, #12]
 800dae4:	4632      	mov	r2, r6
 800dae6:	463b      	mov	r3, r7
 800dae8:	4628      	mov	r0, r5
 800daea:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800daee:	f000 b817 	b.w	800db20 <_write_r>

0800daf2 <__sseek>:
 800daf2:	b510      	push	{r4, lr}
 800daf4:	460c      	mov	r4, r1
 800daf6:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800dafa:	f000 f855 	bl	800dba8 <_lseek_r>
 800dafe:	1c43      	adds	r3, r0, #1
 800db00:	89a3      	ldrh	r3, [r4, #12]
 800db02:	bf15      	itete	ne
 800db04:	6560      	strne	r0, [r4, #84]	; 0x54
 800db06:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 800db0a:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 800db0e:	81a3      	strheq	r3, [r4, #12]
 800db10:	bf18      	it	ne
 800db12:	81a3      	strhne	r3, [r4, #12]
 800db14:	bd10      	pop	{r4, pc}

0800db16 <__sclose>:
 800db16:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800db1a:	f000 b813 	b.w	800db44 <_close_r>
	...

0800db20 <_write_r>:
 800db20:	b538      	push	{r3, r4, r5, lr}
 800db22:	4d07      	ldr	r5, [pc, #28]	; (800db40 <_write_r+0x20>)
 800db24:	4604      	mov	r4, r0
 800db26:	4608      	mov	r0, r1
 800db28:	4611      	mov	r1, r2
 800db2a:	2200      	movs	r2, #0
 800db2c:	602a      	str	r2, [r5, #0]
 800db2e:	461a      	mov	r2, r3
 800db30:	f7f8 fa77 	bl	8006022 <_write>
 800db34:	1c43      	adds	r3, r0, #1
 800db36:	d102      	bne.n	800db3e <_write_r+0x1e>
 800db38:	682b      	ldr	r3, [r5, #0]
 800db3a:	b103      	cbz	r3, 800db3e <_write_r+0x1e>
 800db3c:	6023      	str	r3, [r4, #0]
 800db3e:	bd38      	pop	{r3, r4, r5, pc}
 800db40:	20000570 	.word	0x20000570

0800db44 <_close_r>:
 800db44:	b538      	push	{r3, r4, r5, lr}
 800db46:	4d06      	ldr	r5, [pc, #24]	; (800db60 <_close_r+0x1c>)
 800db48:	2300      	movs	r3, #0
 800db4a:	4604      	mov	r4, r0
 800db4c:	4608      	mov	r0, r1
 800db4e:	602b      	str	r3, [r5, #0]
 800db50:	f7f8 fa83 	bl	800605a <_close>
 800db54:	1c43      	adds	r3, r0, #1
 800db56:	d102      	bne.n	800db5e <_close_r+0x1a>
 800db58:	682b      	ldr	r3, [r5, #0]
 800db5a:	b103      	cbz	r3, 800db5e <_close_r+0x1a>
 800db5c:	6023      	str	r3, [r4, #0]
 800db5e:	bd38      	pop	{r3, r4, r5, pc}
 800db60:	20000570 	.word	0x20000570

0800db64 <_fstat_r>:
 800db64:	b538      	push	{r3, r4, r5, lr}
 800db66:	4d07      	ldr	r5, [pc, #28]	; (800db84 <_fstat_r+0x20>)
 800db68:	2300      	movs	r3, #0
 800db6a:	4604      	mov	r4, r0
 800db6c:	4608      	mov	r0, r1
 800db6e:	4611      	mov	r1, r2
 800db70:	602b      	str	r3, [r5, #0]
 800db72:	f7f8 fa7e 	bl	8006072 <_fstat>
 800db76:	1c43      	adds	r3, r0, #1
 800db78:	d102      	bne.n	800db80 <_fstat_r+0x1c>
 800db7a:	682b      	ldr	r3, [r5, #0]
 800db7c:	b103      	cbz	r3, 800db80 <_fstat_r+0x1c>
 800db7e:	6023      	str	r3, [r4, #0]
 800db80:	bd38      	pop	{r3, r4, r5, pc}
 800db82:	bf00      	nop
 800db84:	20000570 	.word	0x20000570

0800db88 <_isatty_r>:
 800db88:	b538      	push	{r3, r4, r5, lr}
 800db8a:	4d06      	ldr	r5, [pc, #24]	; (800dba4 <_isatty_r+0x1c>)
 800db8c:	2300      	movs	r3, #0
 800db8e:	4604      	mov	r4, r0
 800db90:	4608      	mov	r0, r1
 800db92:	602b      	str	r3, [r5, #0]
 800db94:	f7f8 fa7d 	bl	8006092 <_isatty>
 800db98:	1c43      	adds	r3, r0, #1
 800db9a:	d102      	bne.n	800dba2 <_isatty_r+0x1a>
 800db9c:	682b      	ldr	r3, [r5, #0]
 800db9e:	b103      	cbz	r3, 800dba2 <_isatty_r+0x1a>
 800dba0:	6023      	str	r3, [r4, #0]
 800dba2:	bd38      	pop	{r3, r4, r5, pc}
 800dba4:	20000570 	.word	0x20000570

0800dba8 <_lseek_r>:
 800dba8:	b538      	push	{r3, r4, r5, lr}
 800dbaa:	4d07      	ldr	r5, [pc, #28]	; (800dbc8 <_lseek_r+0x20>)
 800dbac:	4604      	mov	r4, r0
 800dbae:	4608      	mov	r0, r1
 800dbb0:	4611      	mov	r1, r2
 800dbb2:	2200      	movs	r2, #0
 800dbb4:	602a      	str	r2, [r5, #0]
 800dbb6:	461a      	mov	r2, r3
 800dbb8:	f7f8 fa76 	bl	80060a8 <_lseek>
 800dbbc:	1c43      	adds	r3, r0, #1
 800dbbe:	d102      	bne.n	800dbc6 <_lseek_r+0x1e>
 800dbc0:	682b      	ldr	r3, [r5, #0]
 800dbc2:	b103      	cbz	r3, 800dbc6 <_lseek_r+0x1e>
 800dbc4:	6023      	str	r3, [r4, #0]
 800dbc6:	bd38      	pop	{r3, r4, r5, pc}
 800dbc8:	20000570 	.word	0x20000570

0800dbcc <_malloc_usable_size_r>:
 800dbcc:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800dbd0:	1f18      	subs	r0, r3, #4
 800dbd2:	2b00      	cmp	r3, #0
 800dbd4:	bfbc      	itt	lt
 800dbd6:	580b      	ldrlt	r3, [r1, r0]
 800dbd8:	18c0      	addlt	r0, r0, r3
 800dbda:	4770      	bx	lr

0800dbdc <_read_r>:
 800dbdc:	b538      	push	{r3, r4, r5, lr}
 800dbde:	4d07      	ldr	r5, [pc, #28]	; (800dbfc <_read_r+0x20>)
 800dbe0:	4604      	mov	r4, r0
 800dbe2:	4608      	mov	r0, r1
 800dbe4:	4611      	mov	r1, r2
 800dbe6:	2200      	movs	r2, #0
 800dbe8:	602a      	str	r2, [r5, #0]
 800dbea:	461a      	mov	r2, r3
 800dbec:	f7f8 f9fc 	bl	8005fe8 <_read>
 800dbf0:	1c43      	adds	r3, r0, #1
 800dbf2:	d102      	bne.n	800dbfa <_read_r+0x1e>
 800dbf4:	682b      	ldr	r3, [r5, #0]
 800dbf6:	b103      	cbz	r3, 800dbfa <_read_r+0x1e>
 800dbf8:	6023      	str	r3, [r4, #0]
 800dbfa:	bd38      	pop	{r3, r4, r5, pc}
 800dbfc:	20000570 	.word	0x20000570

0800dc00 <sqrt>:
 800dc00:	b538      	push	{r3, r4, r5, lr}
 800dc02:	ed2d 8b02 	vpush	{d8}
 800dc06:	ec55 4b10 	vmov	r4, r5, d0
 800dc0a:	f000 f825 	bl	800dc58 <__ieee754_sqrt>
 800dc0e:	4622      	mov	r2, r4
 800dc10:	462b      	mov	r3, r5
 800dc12:	4620      	mov	r0, r4
 800dc14:	4629      	mov	r1, r5
 800dc16:	eeb0 8a40 	vmov.f32	s16, s0
 800dc1a:	eef0 8a60 	vmov.f32	s17, s1
 800dc1e:	f7f2 ff85 	bl	8000b2c <__aeabi_dcmpun>
 800dc22:	b990      	cbnz	r0, 800dc4a <sqrt+0x4a>
 800dc24:	2200      	movs	r2, #0
 800dc26:	2300      	movs	r3, #0
 800dc28:	4620      	mov	r0, r4
 800dc2a:	4629      	mov	r1, r5
 800dc2c:	f7f2 ff56 	bl	8000adc <__aeabi_dcmplt>
 800dc30:	b158      	cbz	r0, 800dc4a <sqrt+0x4a>
 800dc32:	f7fb fd79 	bl	8009728 <__errno>
 800dc36:	2321      	movs	r3, #33	; 0x21
 800dc38:	6003      	str	r3, [r0, #0]
 800dc3a:	2200      	movs	r2, #0
 800dc3c:	2300      	movs	r3, #0
 800dc3e:	4610      	mov	r0, r2
 800dc40:	4619      	mov	r1, r3
 800dc42:	f7f2 fe03 	bl	800084c <__aeabi_ddiv>
 800dc46:	ec41 0b18 	vmov	d8, r0, r1
 800dc4a:	eeb0 0a48 	vmov.f32	s0, s16
 800dc4e:	eef0 0a68 	vmov.f32	s1, s17
 800dc52:	ecbd 8b02 	vpop	{d8}
 800dc56:	bd38      	pop	{r3, r4, r5, pc}

0800dc58 <__ieee754_sqrt>:
 800dc58:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800dc5c:	ec55 4b10 	vmov	r4, r5, d0
 800dc60:	4e55      	ldr	r6, [pc, #340]	; (800ddb8 <__ieee754_sqrt+0x160>)
 800dc62:	43ae      	bics	r6, r5
 800dc64:	ee10 0a10 	vmov	r0, s0
 800dc68:	ee10 3a10 	vmov	r3, s0
 800dc6c:	462a      	mov	r2, r5
 800dc6e:	4629      	mov	r1, r5
 800dc70:	d110      	bne.n	800dc94 <__ieee754_sqrt+0x3c>
 800dc72:	ee10 2a10 	vmov	r2, s0
 800dc76:	462b      	mov	r3, r5
 800dc78:	f7f2 fcbe 	bl	80005f8 <__aeabi_dmul>
 800dc7c:	4602      	mov	r2, r0
 800dc7e:	460b      	mov	r3, r1
 800dc80:	4620      	mov	r0, r4
 800dc82:	4629      	mov	r1, r5
 800dc84:	f7f2 fb02 	bl	800028c <__adddf3>
 800dc88:	4604      	mov	r4, r0
 800dc8a:	460d      	mov	r5, r1
 800dc8c:	ec45 4b10 	vmov	d0, r4, r5
 800dc90:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800dc94:	2d00      	cmp	r5, #0
 800dc96:	dc10      	bgt.n	800dcba <__ieee754_sqrt+0x62>
 800dc98:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800dc9c:	4330      	orrs	r0, r6
 800dc9e:	d0f5      	beq.n	800dc8c <__ieee754_sqrt+0x34>
 800dca0:	b15d      	cbz	r5, 800dcba <__ieee754_sqrt+0x62>
 800dca2:	ee10 2a10 	vmov	r2, s0
 800dca6:	462b      	mov	r3, r5
 800dca8:	ee10 0a10 	vmov	r0, s0
 800dcac:	f7f2 faec 	bl	8000288 <__aeabi_dsub>
 800dcb0:	4602      	mov	r2, r0
 800dcb2:	460b      	mov	r3, r1
 800dcb4:	f7f2 fdca 	bl	800084c <__aeabi_ddiv>
 800dcb8:	e7e6      	b.n	800dc88 <__ieee754_sqrt+0x30>
 800dcba:	1512      	asrs	r2, r2, #20
 800dcbc:	d074      	beq.n	800dda8 <__ieee754_sqrt+0x150>
 800dcbe:	07d4      	lsls	r4, r2, #31
 800dcc0:	f3c1 0113 	ubfx	r1, r1, #0, #20
 800dcc4:	f2a2 37ff 	subw	r7, r2, #1023	; 0x3ff
 800dcc8:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800dccc:	bf5e      	ittt	pl
 800dcce:	0fda      	lsrpl	r2, r3, #31
 800dcd0:	005b      	lslpl	r3, r3, #1
 800dcd2:	eb02 0141 	addpl.w	r1, r2, r1, lsl #1
 800dcd6:	2400      	movs	r4, #0
 800dcd8:	0fda      	lsrs	r2, r3, #31
 800dcda:	eb02 0141 	add.w	r1, r2, r1, lsl #1
 800dcde:	107f      	asrs	r7, r7, #1
 800dce0:	005b      	lsls	r3, r3, #1
 800dce2:	2516      	movs	r5, #22
 800dce4:	4620      	mov	r0, r4
 800dce6:	f44f 1200 	mov.w	r2, #2097152	; 0x200000
 800dcea:	1886      	adds	r6, r0, r2
 800dcec:	428e      	cmp	r6, r1
 800dcee:	bfde      	ittt	le
 800dcf0:	1b89      	suble	r1, r1, r6
 800dcf2:	18b0      	addle	r0, r6, r2
 800dcf4:	18a4      	addle	r4, r4, r2
 800dcf6:	0049      	lsls	r1, r1, #1
 800dcf8:	3d01      	subs	r5, #1
 800dcfa:	eb01 71d3 	add.w	r1, r1, r3, lsr #31
 800dcfe:	ea4f 0252 	mov.w	r2, r2, lsr #1
 800dd02:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dd06:	d1f0      	bne.n	800dcea <__ieee754_sqrt+0x92>
 800dd08:	462a      	mov	r2, r5
 800dd0a:	f04f 0e20 	mov.w	lr, #32
 800dd0e:	f04f 4600 	mov.w	r6, #2147483648	; 0x80000000
 800dd12:	4281      	cmp	r1, r0
 800dd14:	eb06 0c05 	add.w	ip, r6, r5
 800dd18:	dc02      	bgt.n	800dd20 <__ieee754_sqrt+0xc8>
 800dd1a:	d113      	bne.n	800dd44 <__ieee754_sqrt+0xec>
 800dd1c:	459c      	cmp	ip, r3
 800dd1e:	d811      	bhi.n	800dd44 <__ieee754_sqrt+0xec>
 800dd20:	f1bc 0f00 	cmp.w	ip, #0
 800dd24:	eb0c 0506 	add.w	r5, ip, r6
 800dd28:	da43      	bge.n	800ddb2 <__ieee754_sqrt+0x15a>
 800dd2a:	2d00      	cmp	r5, #0
 800dd2c:	db41      	blt.n	800ddb2 <__ieee754_sqrt+0x15a>
 800dd2e:	f100 0801 	add.w	r8, r0, #1
 800dd32:	1a09      	subs	r1, r1, r0
 800dd34:	459c      	cmp	ip, r3
 800dd36:	bf88      	it	hi
 800dd38:	f101 31ff 	addhi.w	r1, r1, #4294967295
 800dd3c:	eba3 030c 	sub.w	r3, r3, ip
 800dd40:	4432      	add	r2, r6
 800dd42:	4640      	mov	r0, r8
 800dd44:	ea4f 7cd3 	mov.w	ip, r3, lsr #31
 800dd48:	f1be 0e01 	subs.w	lr, lr, #1
 800dd4c:	eb0c 0141 	add.w	r1, ip, r1, lsl #1
 800dd50:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800dd54:	ea4f 0656 	mov.w	r6, r6, lsr #1
 800dd58:	d1db      	bne.n	800dd12 <__ieee754_sqrt+0xba>
 800dd5a:	430b      	orrs	r3, r1
 800dd5c:	d006      	beq.n	800dd6c <__ieee754_sqrt+0x114>
 800dd5e:	1c50      	adds	r0, r2, #1
 800dd60:	bf13      	iteet	ne
 800dd62:	3201      	addne	r2, #1
 800dd64:	3401      	addeq	r4, #1
 800dd66:	4672      	moveq	r2, lr
 800dd68:	f022 0201 	bicne.w	r2, r2, #1
 800dd6c:	1063      	asrs	r3, r4, #1
 800dd6e:	0852      	lsrs	r2, r2, #1
 800dd70:	07e1      	lsls	r1, r4, #31
 800dd72:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800dd76:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800dd7a:	bf48      	it	mi
 800dd7c:	f042 4200 	orrmi.w	r2, r2, #2147483648	; 0x80000000
 800dd80:	eb03 5507 	add.w	r5, r3, r7, lsl #20
 800dd84:	4614      	mov	r4, r2
 800dd86:	e781      	b.n	800dc8c <__ieee754_sqrt+0x34>
 800dd88:	0ad9      	lsrs	r1, r3, #11
 800dd8a:	3815      	subs	r0, #21
 800dd8c:	055b      	lsls	r3, r3, #21
 800dd8e:	2900      	cmp	r1, #0
 800dd90:	d0fa      	beq.n	800dd88 <__ieee754_sqrt+0x130>
 800dd92:	02cd      	lsls	r5, r1, #11
 800dd94:	d50a      	bpl.n	800ddac <__ieee754_sqrt+0x154>
 800dd96:	f1c2 0420 	rsb	r4, r2, #32
 800dd9a:	fa23 f404 	lsr.w	r4, r3, r4
 800dd9e:	1e55      	subs	r5, r2, #1
 800dda0:	4093      	lsls	r3, r2
 800dda2:	4321      	orrs	r1, r4
 800dda4:	1b42      	subs	r2, r0, r5
 800dda6:	e78a      	b.n	800dcbe <__ieee754_sqrt+0x66>
 800dda8:	4610      	mov	r0, r2
 800ddaa:	e7f0      	b.n	800dd8e <__ieee754_sqrt+0x136>
 800ddac:	0049      	lsls	r1, r1, #1
 800ddae:	3201      	adds	r2, #1
 800ddb0:	e7ef      	b.n	800dd92 <__ieee754_sqrt+0x13a>
 800ddb2:	4680      	mov	r8, r0
 800ddb4:	e7bd      	b.n	800dd32 <__ieee754_sqrt+0xda>
 800ddb6:	bf00      	nop
 800ddb8:	7ff00000 	.word	0x7ff00000

0800ddbc <_init>:
 800ddbc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddbe:	bf00      	nop
 800ddc0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddc2:	bc08      	pop	{r3}
 800ddc4:	469e      	mov	lr, r3
 800ddc6:	4770      	bx	lr

0800ddc8 <_fini>:
 800ddc8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ddca:	bf00      	nop
 800ddcc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ddce:	bc08      	pop	{r3}
 800ddd0:	469e      	mov	lr, r3
 800ddd2:	4770      	bx	lr
